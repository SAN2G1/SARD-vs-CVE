command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1008654	File	data/converged/CVE-2011-4930_htcondor/cream_gahp_server.cpp								
ANR	1008655	DeclStmt									
ANR	1008656	Decl							FILE	FILE *	tmplog
ANR	1008657	Function	quicklog	45:0:1434:1748							
ANR	1008658	FunctionDef	quicklog (const char * p)		1008657	0					
ANR	1008659	CompoundStatement		46:0:1471:1748	1008657	0					
ANR	1008660	IdentifierDeclStatement	struct tm t ;	47:1:1474:1485	1008657	0	True				
ANR	1008661	IdentifierDecl	t		1008657	0					
ANR	1008662	IdentifierDeclType	struct tm		1008657	0					
ANR	1008663	Identifier	t		1008657	1					
ANR	1008664	IdentifierDeclStatement	time_t timet = time ( 0 ) ;	48:1:1488:1510	1008657	1	True				
ANR	1008665	IdentifierDecl	timet = time ( 0 )		1008657	0					
ANR	1008666	IdentifierDeclType	time_t		1008657	0					
ANR	1008667	Identifier	timet		1008657	1					
ANR	1008668	AssignmentExpression	timet = time ( 0 )		1008657	2		=			
ANR	1008669	Identifier	timet		1008657	0					
ANR	1008670	CallExpression	time ( 0 )		1008657	1					
ANR	1008671	Callee	time		1008657	0					
ANR	1008672	Identifier	time		1008657	0					
ANR	1008673	ArgumentList	0		1008657	1					
ANR	1008674	Argument	0		1008657	0					
ANR	1008675	PrimaryExpression	0		1008657	0					
ANR	1008676	ExpressionStatement	"localtime_r ( & timet , & t )"	49:1:1513:1536	1008657	2	True				
ANR	1008677	CallExpression	"localtime_r ( & timet , & t )"		1008657	0					
ANR	1008678	Callee	localtime_r		1008657	0					
ANR	1008679	Identifier	localtime_r		1008657	0					
ANR	1008680	ArgumentList	& timet		1008657	1					
ANR	1008681	Argument	& timet		1008657	0					
ANR	1008682	UnaryOperationExpression	& timet		1008657	0					
ANR	1008683	UnaryOperator	&		1008657	0					
ANR	1008684	Identifier	timet		1008657	1					
ANR	1008685	Argument	& t		1008657	1					
ANR	1008686	UnaryOperationExpression	& t		1008657	0					
ANR	1008687	UnaryOperator	&		1008657	0					
ANR	1008688	Identifier	t		1008657	1					
ANR	1008689	IfStatement	if ( ! p )		1008657	3					
ANR	1008690	Condition	! p	50:5:1543:1545	1008657	0	True				
ANR	1008691	UnaryOperationExpression	! p		1008657	0					
ANR	1008692	UnaryOperator	!		1008657	0					
ANR	1008693	Identifier	p		1008657	1					
ANR	1008694	CompoundStatement		5:11:77:77	1008657	1					
ANR	1008695	ExpressionStatement	"p = ""No message"""	50:13:1551:1567	1008657	0	True				
ANR	1008696	AssignmentExpression	"p = ""No message"""		1008657	0		=			
ANR	1008697	Identifier	p		1008657	0					
ANR	1008698	PrimaryExpression	"""No message"""		1008657	1					
ANR	1008699	ExpressionStatement	"fprintf ( tmplog , ""%04d-%02d-%02d %02d:%02d:%02d (pid: %d) %s\\n"" , t . tm_year + 1900 , t . tm_mon + 1 , t . tm_mday + 1 , t . tm_hour + 1 , t . tm_min + 1 , t . tm_sec + 1 , ( int ) getpid ( ) , p )"	51:1:1572:1746	1008657	4	True				
ANR	1008700	CallExpression	"fprintf ( tmplog , ""%04d-%02d-%02d %02d:%02d:%02d (pid: %d) %s\\n"" , t . tm_year + 1900 , t . tm_mon + 1 , t . tm_mday + 1 , t . tm_hour + 1 , t . tm_min + 1 , t . tm_sec + 1 , ( int ) getpid ( ) , p )"		1008657	0					
ANR	1008701	Callee	fprintf		1008657	0					
ANR	1008702	Identifier	fprintf		1008657	0					
ANR	1008703	ArgumentList	tmplog		1008657	1					
ANR	1008704	Argument	tmplog		1008657	0					
ANR	1008705	Identifier	tmplog		1008657	0					
ANR	1008706	Argument	"""%04d-%02d-%02d %02d:%02d:%02d (pid: %d) %s\\n"""		1008657	1					
ANR	1008707	PrimaryExpression	"""%04d-%02d-%02d %02d:%02d:%02d (pid: %d) %s\\n"""		1008657	0					
ANR	1008708	Argument	t . tm_year + 1900		1008657	2					
ANR	1008709	AdditiveExpression	t . tm_year + 1900		1008657	0		+			
ANR	1008710	MemberAccess	t . tm_year		1008657	0					
ANR	1008711	Identifier	t		1008657	0					
ANR	1008712	Identifier	tm_year		1008657	1					
ANR	1008713	PrimaryExpression	1900		1008657	1					
ANR	1008714	Argument	t . tm_mon + 1		1008657	3					
ANR	1008715	AdditiveExpression	t . tm_mon + 1		1008657	0		+			
ANR	1008716	MemberAccess	t . tm_mon		1008657	0					
ANR	1008717	Identifier	t		1008657	0					
ANR	1008718	Identifier	tm_mon		1008657	1					
ANR	1008719	PrimaryExpression	1		1008657	1					
ANR	1008720	Argument	t . tm_mday + 1		1008657	4					
ANR	1008721	AdditiveExpression	t . tm_mday + 1		1008657	0		+			
ANR	1008722	MemberAccess	t . tm_mday		1008657	0					
ANR	1008723	Identifier	t		1008657	0					
ANR	1008724	Identifier	tm_mday		1008657	1					
ANR	1008725	PrimaryExpression	1		1008657	1					
ANR	1008726	Argument	t . tm_hour + 1		1008657	5					
ANR	1008727	AdditiveExpression	t . tm_hour + 1		1008657	0		+			
ANR	1008728	MemberAccess	t . tm_hour		1008657	0					
ANR	1008729	Identifier	t		1008657	0					
ANR	1008730	Identifier	tm_hour		1008657	1					
ANR	1008731	PrimaryExpression	1		1008657	1					
ANR	1008732	Argument	t . tm_min + 1		1008657	6					
ANR	1008733	AdditiveExpression	t . tm_min + 1		1008657	0		+			
ANR	1008734	MemberAccess	t . tm_min		1008657	0					
ANR	1008735	Identifier	t		1008657	0					
ANR	1008736	Identifier	tm_min		1008657	1					
ANR	1008737	PrimaryExpression	1		1008657	1					
ANR	1008738	Argument	t . tm_sec + 1		1008657	7					
ANR	1008739	AdditiveExpression	t . tm_sec + 1		1008657	0		+			
ANR	1008740	MemberAccess	t . tm_sec		1008657	0					
ANR	1008741	Identifier	t		1008657	0					
ANR	1008742	Identifier	tm_sec		1008657	1					
ANR	1008743	PrimaryExpression	1		1008657	1					
ANR	1008744	Argument	( int ) getpid ( )		1008657	8					
ANR	1008745	CastExpression	( int ) getpid ( )		1008657	0					
ANR	1008746	CastTarget	int		1008657	0					
ANR	1008747	CallExpression	getpid ( )		1008657	1					
ANR	1008748	Callee	getpid		1008657	0					
ANR	1008749	Identifier	getpid		1008657	0					
ANR	1008750	ArgumentList			1008657	1					
ANR	1008751	Argument	p		1008657	9					
ANR	1008752	Identifier	p		1008657	0					
ANR	1008753	ReturnType	static void		1008657	1					
ANR	1008754	Identifier	quicklog		1008657	2					
ANR	1008755	ParameterList	const char * p		1008657	3					
ANR	1008756	Parameter	const char * p	45:21:1455:1468	1008657	0	True				
ANR	1008757	ParameterType	const char *		1008657	0					
ANR	1008758	Identifier	p		1008657	1					
ANR	1008759	CFGEntryNode	ENTRY		1008657		True				
ANR	1008760	CFGExitNode	EXIT		1008657		True				
ANR	1008761	Symbol	t . tm_year		1008657						
ANR	1008762	Symbol	tmplog		1008657						
ANR	1008763	Symbol	p		1008657						
ANR	1008764	Symbol	timet		1008657						
ANR	1008765	Symbol	t . tm_hour		1008657						
ANR	1008766	Symbol	t		1008657						
ANR	1008767	Symbol	t . tm_mon		1008657						
ANR	1008768	Symbol	& timet		1008657						
ANR	1008769	Symbol	t . tm_mday		1008657						
ANR	1008770	Symbol	t . tm_sec		1008657						
ANR	1008771	Symbol	& t		1008657						
ANR	1008772	Symbol	time		1008657						
ANR	1008773	Symbol	t . tm_min		1008657						
ANR	1008774	Symbol	getpid		1008657						
ANR	1008775	Function	HANDLE_SYNTAX_ERROR	74:1:2020:2117							
ANR	1008776	FunctionDef	HANDLE_SYNTAX_ERROR ()		1008775	0					
ANR	1008777	CompoundStatement		75:0:2051:2117	1008775	0					
ANR	1008778	ExpressionStatement	"gahp_printf ( ""E\\n"" )"	76:1:2056:2074	1008775	0	True				
ANR	1008779	CallExpression	"gahp_printf ( ""E\\n"" )"		1008775	0					
ANR	1008780	Callee	gahp_printf		1008775	0					
ANR	1008781	Identifier	gahp_printf		1008775	0					
ANR	1008782	ArgumentList	"""E\\n"""		1008775	1					
ANR	1008783	Argument	"""E\\n"""		1008775	0					
ANR	1008784	PrimaryExpression	"""E\\n"""		1008775	0					
ANR	1008785	ExpressionStatement	free_args ( input_line )	77:1:2079:2100	1008775	1	True				
ANR	1008786	CallExpression	free_args ( input_line )		1008775	0					
ANR	1008787	Callee	free_args		1008775	0					
ANR	1008788	Identifier	free_args		1008775	0					
ANR	1008789	ArgumentList	input_line		1008775	1					
ANR	1008790	Argument	input_line		1008775	0					
ANR	1008791	Identifier	input_line		1008775	0					
ANR	1008792	ReturnStatement	return 0 ;	78:1:2105:2113	1008775	2	True				
ANR	1008793	PrimaryExpression	0		1008775	0					
ANR	1008794	ReturnType	define		1008775	1					
ANR	1008795	Identifier	HANDLE_SYNTAX_ERROR		1008775	2					
ANR	1008796	ParameterList			1008775	3					
ANR	1008797	CFGEntryNode	ENTRY		1008775		True				
ANR	1008798	CFGExitNode	EXIT		1008775		True				
ANR	1008799	Symbol	input_line		1008775						
ANR	1008800	Function	HANDLE_INVALID_REQ	81:1:2122:2205							
ANR	1008801	FunctionDef	HANDLE_INVALID_REQ ()		1008800	0					
ANR	1008802	CompoundStatement		82:0:2152:2205	1008800	0					
ANR	1008803	ExpressionStatement	"gahp_printf ( ""E\\n"" )"	83:1:2157:2175	1008800	0	True				
ANR	1008804	CallExpression	"gahp_printf ( ""E\\n"" )"		1008800	0					
ANR	1008805	Callee	gahp_printf		1008800	0					
ANR	1008806	Identifier	gahp_printf		1008800	0					
ANR	1008807	ArgumentList	"""E\\n"""		1008800	1					
ANR	1008808	Argument	"""E\\n"""		1008800	0					
ANR	1008809	PrimaryExpression	"""E\\n"""		1008800	0					
ANR	1008810	ExpressionStatement	free_args ( input_line )	84:1:2180:2201	1008800	1	True				
ANR	1008811	CallExpression	free_args ( input_line )		1008800	0					
ANR	1008812	Callee	free_args		1008800	0					
ANR	1008813	Identifier	free_args		1008800	0					
ANR	1008814	ArgumentList	input_line		1008800	1					
ANR	1008815	Argument	input_line		1008800	0					
ANR	1008816	Identifier	input_line		1008800	0					
ANR	1008817	ReturnType	define		1008800	1					
ANR	1008818	Identifier	HANDLE_INVALID_REQ		1008800	2					
ANR	1008819	ParameterList			1008800	3					
ANR	1008820	CFGEntryNode	ENTRY		1008800		True				
ANR	1008821	CFGExitNode	EXIT		1008800		True				
ANR	1008822	Symbol	input_line		1008800						
ANR	1008823	DeclStmt									
ANR	1008824	Decl							int ( * ) ( Request * )	int ( * ) ( Request * )	SingleHandler
ANR	1008825	DeclStmt									
ANR	1008826	Decl							int ( * ) ( Request * * )	int ( * ) ( Request * * )	BatchHandler
ANR	1008827	DeclStmt									
ANR	1008828	Decl							"bool ( * ) ( const vector < Request * > & , const Request * )"	"bool ( * ) ( const vector < Request * > & , const Request * )"	RequestCmp
ANR	1008829	Function	internal_error	95:0:2537:2643							
ANR	1008830	FunctionDef	internal_error (const char * p)		1008829	0					
ANR	1008831	CompoundStatement		96:0:2580:2643	1008829	0					
ANR	1008832	ExpressionStatement	"fprintf ( stderr , ""FATAL INTERNAL ERROR: %s\\n"" , p )"	97:1:2583:2631	1008829	0	True				
ANR	1008833	CallExpression	"fprintf ( stderr , ""FATAL INTERNAL ERROR: %s\\n"" , p )"		1008829	0					
ANR	1008834	Callee	fprintf		1008829	0					
ANR	1008835	Identifier	fprintf		1008829	0					
ANR	1008836	ArgumentList	stderr		1008829	1					
ANR	1008837	Argument	stderr		1008829	0					
ANR	1008838	Identifier	stderr		1008829	0					
ANR	1008839	Argument	"""FATAL INTERNAL ERROR: %s\\n"""		1008829	1					
ANR	1008840	PrimaryExpression	"""FATAL INTERNAL ERROR: %s\\n"""		1008829	0					
ANR	1008841	Argument	p		1008829	2					
ANR	1008842	Identifier	p		1008829	0					
ANR	1008843	ExpressionStatement	exit ( 4 )	98:1:2634:2641	1008829	1	True				
ANR	1008844	CallExpression	exit ( 4 )		1008829	0					
ANR	1008845	Callee	exit		1008829	0					
ANR	1008846	Identifier	exit		1008829	0					
ANR	1008847	ArgumentList	4		1008829	1					
ANR	1008848	Argument	4		1008829	0					
ANR	1008849	PrimaryExpression	4		1008829	0					
ANR	1008850	ReturnType	static void		1008829	1					
ANR	1008851	Identifier	internal_error		1008829	2					
ANR	1008852	ParameterList	const char * p		1008829	3					
ANR	1008853	Parameter	const char * p	95:27:2564:2577	1008829	0	True				
ANR	1008854	ParameterType	const char *		1008829	0					
ANR	1008855	Identifier	p		1008829	1					
ANR	1008856	CFGEntryNode	ENTRY		1008829		True				
ANR	1008857	CFGExitNode	EXIT		1008829		True				
ANR	1008858	Symbol	p		1008829						
ANR	1008859	Symbol	stderr		1008829						
ANR	1008860	Function	check_for_factory_error	101:0:2646:2798							
ANR	1008861	FunctionDef	check_for_factory_error (AbsCreamProxy * cp)		1008860	0					
ANR	1008862	CompoundStatement		103:0:2701:2798	1008860	0					
ANR	1008863	IfStatement	if ( cp == NULL )		1008860	0					
ANR	1008864	Condition	cp == NULL	104:5:2708:2717	1008860	0	True				
ANR	1008865	EqualityExpression	cp == NULL		1008860	0		==			
ANR	1008866	Identifier	cp		1008860	0					
ANR	1008867	Identifier	NULL		1008860	1					
ANR	1008868	CompoundStatement		2:17:18:18	1008860	1					
ANR	1008869	ThrowStatement	"throw runtime_error ( ""CreamProxyFactory failed to make a cream proxy"" ) ;"	105:2:2724:2793	1008860	0	True				
ANR	1008870	CallExpression	"runtime_error ( ""CreamProxyFactory failed to make a cream proxy"" )"		1008860	0					
ANR	1008871	Callee	runtime_error		1008860	0					
ANR	1008872	Identifier	runtime_error		1008860	0					
ANR	1008873	ArgumentList	"""CreamProxyFactory failed to make a cream proxy"""		1008860	1					
ANR	1008874	Argument	"""CreamProxyFactory failed to make a cream proxy"""		1008860	0					
ANR	1008875	PrimaryExpression	"""CreamProxyFactory failed to make a cream proxy"""		1008860	0					
ANR	1008876	ReturnType	static void		1008860	1					
ANR	1008877	Identifier	check_for_factory_error		1008860	2					
ANR	1008878	ParameterList	AbsCreamProxy * cp		1008860	3					
ANR	1008879	Parameter	AbsCreamProxy * cp	102:24:2682:2698	1008860	0	True				
ANR	1008880	ParameterType	AbsCreamProxy *		1008860	0					
ANR	1008881	Identifier	cp		1008860	1					
ANR	1008882	CFGEntryNode	ENTRY		1008860		True				
ANR	1008883	CFGExitNode	EXIT		1008860		True				
ANR	1008884	CFGExceptionNode	EXCEPTION		1008860		True				
ANR	1008885	Symbol	NULL		1008860						
ANR	1008886	Symbol	cp		1008860						
ANR	1008887	Function	check_result_wrapper	109:0:2801:3515							
ANR	1008888	FunctionDef	check_result_wrapper (ResultWrapper & rw)		1008887	0					
ANR	1008889	CompoundStatement		111:0:2853:3515	1008887	0					
ANR	1008890	IdentifierDeclStatement	"list < pair < JobIdWrapper , string > > job_list ;"	112:1:2856:2898	1008887	0	True				
ANR	1008891	IdentifierDecl	job_list		1008887	0					
ANR	1008892	IdentifierDeclType	"list < pair < JobIdWrapper , string > >"		1008887	0					
ANR	1008893	Identifier	job_list		1008887	1					
ANR	1008894	ExpressionStatement	rw . getNotExistingJobs ( job_list )	113:1:2901:2932	1008887	1	True				
ANR	1008895	CallExpression	rw . getNotExistingJobs ( job_list )		1008887	0					
ANR	1008896	Callee	rw . getNotExistingJobs		1008887	0					
ANR	1008897	MemberAccess	rw . getNotExistingJobs		1008887	0					
ANR	1008898	Identifier	rw		1008887	0					
ANR	1008899	Identifier	getNotExistingJobs		1008887	1					
ANR	1008900	ArgumentList	job_list		1008887	1					
ANR	1008901	Argument	job_list		1008887	0					
ANR	1008902	Identifier	job_list		1008887	0					
ANR	1008903	IfStatement	if ( ! job_list . empty ( ) )		1008887	2					
ANR	1008904	Condition	! job_list . empty ( )	114:5:2939:2955	1008887	0	True				
ANR	1008905	UnaryOperationExpression	! job_list . empty ( )		1008887	0					
ANR	1008906	UnaryOperator	!		1008887	0					
ANR	1008907	CallExpression	job_list . empty ( )		1008887	1					
ANR	1008908	Callee	job_list . empty		1008887	0					
ANR	1008909	MemberAccess	job_list . empty		1008887	0					
ANR	1008910	Identifier	job_list		1008887	0					
ANR	1008911	Identifier	empty		1008887	1					
ANR	1008912	ArgumentList			1008887	1					
ANR	1008913	CompoundStatement		4:24:104:104	1008887	1					
ANR	1008914	ThrowStatement	"throw runtime_error ( ""job does not exist"" ) ;"	115:2:2962:3003	1008887	0	True				
ANR	1008915	CallExpression	"runtime_error ( ""job does not exist"" )"		1008887	0					
ANR	1008916	Callee	runtime_error		1008887	0					
ANR	1008917	Identifier	runtime_error		1008887	0					
ANR	1008918	ArgumentList	"""job does not exist"""		1008887	1					
ANR	1008919	Argument	"""job does not exist"""		1008887	0					
ANR	1008920	PrimaryExpression	"""job does not exist"""		1008887	0					
ANR	1008921	ExpressionStatement	rw . getNotMatchingStatusJobs ( job_list )	117:1:3009:3046	1008887	3	True				
ANR	1008922	CallExpression	rw . getNotMatchingStatusJobs ( job_list )		1008887	0					
ANR	1008923	Callee	rw . getNotMatchingStatusJobs		1008887	0					
ANR	1008924	MemberAccess	rw . getNotMatchingStatusJobs		1008887	0					
ANR	1008925	Identifier	rw		1008887	0					
ANR	1008926	Identifier	getNotMatchingStatusJobs		1008887	1					
ANR	1008927	ArgumentList	job_list		1008887	1					
ANR	1008928	Argument	job_list		1008887	0					
ANR	1008929	Identifier	job_list		1008887	0					
ANR	1008930	IfStatement	if ( ! job_list . empty ( ) )		1008887	4					
ANR	1008931	Condition	! job_list . empty ( )	118:5:3053:3069	1008887	0	True				
ANR	1008932	UnaryOperationExpression	! job_list . empty ( )		1008887	0					
ANR	1008933	UnaryOperator	!		1008887	0					
ANR	1008934	CallExpression	job_list . empty ( )		1008887	1					
ANR	1008935	Callee	job_list . empty		1008887	0					
ANR	1008936	MemberAccess	job_list . empty		1008887	0					
ANR	1008937	Identifier	job_list		1008887	0					
ANR	1008938	Identifier	empty		1008887	1					
ANR	1008939	ArgumentList			1008887	1					
ANR	1008940	CompoundStatement		8:24:218:218	1008887	1					
ANR	1008941	ThrowStatement	"throw runtime_error ( ""job status does not match"" ) ;"	119:2:3076:3124	1008887	0	True				
ANR	1008942	CallExpression	"runtime_error ( ""job status does not match"" )"		1008887	0					
ANR	1008943	Callee	runtime_error		1008887	0					
ANR	1008944	Identifier	runtime_error		1008887	0					
ANR	1008945	ArgumentList	"""job status does not match"""		1008887	1					
ANR	1008946	Argument	"""job status does not match"""		1008887	0					
ANR	1008947	PrimaryExpression	"""job status does not match"""		1008887	0					
ANR	1008948	ExpressionStatement	rw . getNotMatchingDateJobs ( job_list )	121:1:3130:3165	1008887	5	True				
ANR	1008949	CallExpression	rw . getNotMatchingDateJobs ( job_list )		1008887	0					
ANR	1008950	Callee	rw . getNotMatchingDateJobs		1008887	0					
ANR	1008951	MemberAccess	rw . getNotMatchingDateJobs		1008887	0					
ANR	1008952	Identifier	rw		1008887	0					
ANR	1008953	Identifier	getNotMatchingDateJobs		1008887	1					
ANR	1008954	ArgumentList	job_list		1008887	1					
ANR	1008955	Argument	job_list		1008887	0					
ANR	1008956	Identifier	job_list		1008887	0					
ANR	1008957	IfStatement	if ( ! job_list . empty ( ) )		1008887	6					
ANR	1008958	Condition	! job_list . empty ( )	122:5:3172:3188	1008887	0	True				
ANR	1008959	UnaryOperationExpression	! job_list . empty ( )		1008887	0					
ANR	1008960	UnaryOperator	!		1008887	0					
ANR	1008961	CallExpression	job_list . empty ( )		1008887	1					
ANR	1008962	Callee	job_list . empty		1008887	0					
ANR	1008963	MemberAccess	job_list . empty		1008887	0					
ANR	1008964	Identifier	job_list		1008887	0					
ANR	1008965	Identifier	empty		1008887	1					
ANR	1008966	ArgumentList			1008887	1					
ANR	1008967	CompoundStatement		12:24:337:337	1008887	1					
ANR	1008968	ThrowStatement	"throw runtime_error ( ""job date does not match"" ) ;"	123:2:3195:3241	1008887	0	True				
ANR	1008969	CallExpression	"runtime_error ( ""job date does not match"" )"		1008887	0					
ANR	1008970	Callee	runtime_error		1008887	0					
ANR	1008971	Identifier	runtime_error		1008887	0					
ANR	1008972	ArgumentList	"""job date does not match"""		1008887	1					
ANR	1008973	Argument	"""job date does not match"""		1008887	0					
ANR	1008974	PrimaryExpression	"""job date does not match"""		1008887	0					
ANR	1008975	ExpressionStatement	rw . getNotMatchingProxyDelegationIdJobs ( job_list )	125:1:3247:3295	1008887	7	True				
ANR	1008976	CallExpression	rw . getNotMatchingProxyDelegationIdJobs ( job_list )		1008887	0					
ANR	1008977	Callee	rw . getNotMatchingProxyDelegationIdJobs		1008887	0					
ANR	1008978	MemberAccess	rw . getNotMatchingProxyDelegationIdJobs		1008887	0					
ANR	1008979	Identifier	rw		1008887	0					
ANR	1008980	Identifier	getNotMatchingProxyDelegationIdJobs		1008887	1					
ANR	1008981	ArgumentList	job_list		1008887	1					
ANR	1008982	Argument	job_list		1008887	0					
ANR	1008983	Identifier	job_list		1008887	0					
ANR	1008984	IfStatement	if ( ! job_list . empty ( ) )		1008887	8					
ANR	1008985	Condition	! job_list . empty ( )	126:5:3302:3318	1008887	0	True				
ANR	1008986	UnaryOperationExpression	! job_list . empty ( )		1008887	0					
ANR	1008987	UnaryOperator	!		1008887	0					
ANR	1008988	CallExpression	job_list . empty ( )		1008887	1					
ANR	1008989	Callee	job_list . empty		1008887	0					
ANR	1008990	MemberAccess	job_list . empty		1008887	0					
ANR	1008991	Identifier	job_list		1008887	0					
ANR	1008992	Identifier	empty		1008887	1					
ANR	1008993	ArgumentList			1008887	1					
ANR	1008994	CompoundStatement		16:24:467:467	1008887	1					
ANR	1008995	ThrowStatement	"throw runtime_error ( ""job proxy delegation ID does not match"" ) ;"	127:2:3325:3386	1008887	0	True				
ANR	1008996	CallExpression	"runtime_error ( ""job proxy delegation ID does not match"" )"		1008887	0					
ANR	1008997	Callee	runtime_error		1008887	0					
ANR	1008998	Identifier	runtime_error		1008887	0					
ANR	1008999	ArgumentList	"""job proxy delegation ID does not match"""		1008887	1					
ANR	1009000	Argument	"""job proxy delegation ID does not match"""		1008887	0					
ANR	1009001	PrimaryExpression	"""job proxy delegation ID does not match"""		1008887	0					
ANR	1009002	ExpressionStatement	rw . getNotMatchingLeaseIdJobs ( job_list )	129:1:3392:3430	1008887	9	True				
ANR	1009003	CallExpression	rw . getNotMatchingLeaseIdJobs ( job_list )		1008887	0					
ANR	1009004	Callee	rw . getNotMatchingLeaseIdJobs		1008887	0					
ANR	1009005	MemberAccess	rw . getNotMatchingLeaseIdJobs		1008887	0					
ANR	1009006	Identifier	rw		1008887	0					
ANR	1009007	Identifier	getNotMatchingLeaseIdJobs		1008887	1					
ANR	1009008	ArgumentList	job_list		1008887	1					
ANR	1009009	Argument	job_list		1008887	0					
ANR	1009010	Identifier	job_list		1008887	0					
ANR	1009011	IfStatement	if ( ! job_list . empty ( ) )		1008887	10					
ANR	1009012	Condition	! job_list . empty ( )	130:5:3437:3453	1008887	0	True				
ANR	1009013	UnaryOperationExpression	! job_list . empty ( )		1008887	0					
ANR	1009014	UnaryOperator	!		1008887	0					
ANR	1009015	CallExpression	job_list . empty ( )		1008887	1					
ANR	1009016	Callee	job_list . empty		1008887	0					
ANR	1009017	MemberAccess	job_list . empty		1008887	0					
ANR	1009018	Identifier	job_list		1008887	0					
ANR	1009019	Identifier	empty		1008887	1					
ANR	1009020	ArgumentList			1008887	1					
ANR	1009021	CompoundStatement		20:24:602:602	1008887	1					
ANR	1009022	ThrowStatement	"throw runtime_error ( ""job lease ID does not match"" ) ;"	131:2:3460:3510	1008887	0	True				
ANR	1009023	CallExpression	"runtime_error ( ""job lease ID does not match"" )"		1008887	0					
ANR	1009024	Callee	runtime_error		1008887	0					
ANR	1009025	Identifier	runtime_error		1008887	0					
ANR	1009026	ArgumentList	"""job lease ID does not match"""		1008887	1					
ANR	1009027	Argument	"""job lease ID does not match"""		1008887	0					
ANR	1009028	PrimaryExpression	"""job lease ID does not match"""		1008887	0					
ANR	1009029	ReturnType	static void		1008887	1					
ANR	1009030	Identifier	check_result_wrapper		1008887	2					
ANR	1009031	ParameterList	ResultWrapper & rw		1008887	3					
ANR	1009032	Parameter	ResultWrapper & rw	110:21:2834:2850	1008887	0	True				
ANR	1009033	ParameterType	ResultWrapper &		1008887	0					
ANR	1009034	Identifier	rw		1008887	1					
ANR	1009035	CFGEntryNode	ENTRY		1008887		True				
ANR	1009036	CFGExitNode	EXIT		1008887		True				
ANR	1009037	CFGExceptionNode	EXCEPTION		1008887		True				
ANR	1009038	CFGExceptionNode	EXCEPTION		1008887		True				
ANR	1009039	CFGExceptionNode	EXCEPTION		1008887		True				
ANR	1009040	CFGExceptionNode	EXCEPTION		1008887		True				
ANR	1009041	CFGExceptionNode	EXCEPTION		1008887		True				
ANR	1009042	CFGExceptionNode	EXCEPTION		1008887		True				
ANR	1009043	CFGExceptionNode	EXCEPTION		1008887		True				
ANR	1009044	CFGExceptionNode	EXCEPTION		1008887		True				
ANR	1009045	CFGExceptionNode	EXCEPTION		1008887		True				
ANR	1009046	Symbol	rw		1008887						
ANR	1009047	Symbol	job_list		1008887						
ANR	1009048	Symbol	job_list . empty		1008887						
ANR	1009049	Function	check_result_wrapper2	135:0:3518:4680							
ANR	1009050	FunctionDef	"check_result_wrapper2 (ResultWrapper & rw , map < string , string > & out)"		1009049	0					
ANR	1009051	CompoundStatement		137:0:3597:4680	1009049	0					
ANR	1009052	IdentifierDeclStatement	"list < pair < JobIdWrapper , string > > job_list ;"	138:1:3600:3642	1009049	0	True				
ANR	1009053	IdentifierDecl	job_list		1009049	0					
ANR	1009054	IdentifierDeclType	"list < pair < JobIdWrapper , string > >"		1009049	0					
ANR	1009055	Identifier	job_list		1009049	1					
ANR	1009056	IdentifierDeclStatement	"list < pair < JobIdWrapper , string > > :: iterator itr ;"	139:1:3645:3692	1009049	1	True				
ANR	1009057	IdentifierDecl	itr		1009049	0					
ANR	1009058	IdentifierDeclType	"list < pair < JobIdWrapper , string > > :: iterator"		1009049	0					
ANR	1009059	Identifier	itr		1009049	1					
ANR	1009060	ExpressionStatement	rw . getNotExistingJobs ( job_list )	140:1:3695:3726	1009049	2	True				
ANR	1009061	CallExpression	rw . getNotExistingJobs ( job_list )		1009049	0					
ANR	1009062	Callee	rw . getNotExistingJobs		1009049	0					
ANR	1009063	MemberAccess	rw . getNotExistingJobs		1009049	0					
ANR	1009064	Identifier	rw		1009049	0					
ANR	1009065	Identifier	getNotExistingJobs		1009049	1					
ANR	1009066	ArgumentList	job_list		1009049	1					
ANR	1009067	Argument	job_list		1009049	0					
ANR	1009068	Identifier	job_list		1009049	0					
ANR	1009069	ForStatement	for ( itr = job_list . begin ( ) ; itr != job_list . end ( ) ; itr ++ )		1009049	3					
ANR	1009070	ForInit	itr = job_list . begin ( ) ;	141:7:3735:3757	1009049	0	True				
ANR	1009071	AssignmentExpression	itr = job_list . begin ( )		1009049	0		=			
ANR	1009072	Identifier	itr		1009049	0					
ANR	1009073	CallExpression	job_list . begin ( )		1009049	1					
ANR	1009074	Callee	job_list . begin		1009049	0					
ANR	1009075	MemberAccess	job_list . begin		1009049	0					
ANR	1009076	Identifier	job_list		1009049	0					
ANR	1009077	Identifier	begin		1009049	1					
ANR	1009078	ArgumentList			1009049	1					
ANR	1009079	Condition	itr != job_list . end ( )	141:31:3759:3779	1009049	1	True				
ANR	1009080	EqualityExpression	itr != job_list . end ( )		1009049	0		!=			
ANR	1009081	Identifier	itr		1009049	0					
ANR	1009082	CallExpression	job_list . end ( )		1009049	1					
ANR	1009083	Callee	job_list . end		1009049	0					
ANR	1009084	MemberAccess	job_list . end		1009049	0					
ANR	1009085	Identifier	job_list		1009049	0					
ANR	1009086	Identifier	end		1009049	1					
ANR	1009087	ArgumentList			1009049	1					
ANR	1009088	PostIncDecOperationExpression	itr ++	141:54:3782:3786	1009049	2	True				
ANR	1009089	Identifier	itr		1009049	0					
ANR	1009090	IncDec	++		1009049	1					
ANR	1009091	CompoundStatement		5:62:192:192	1009049	3					
ANR	1009092	ExpressionStatement	"out [ itr -> first . getCreamJobID ( ) ] = string ( ""job does not exist"" )"	142:2:3794:3856	1009049	0	True				
ANR	1009093	AssignmentExpression	"out [ itr -> first . getCreamJobID ( ) ] = string ( ""job does not exist"" )"		1009049	0		=			
ANR	1009094	ArrayIndexing	out [ itr -> first . getCreamJobID ( ) ]		1009049	0					
ANR	1009095	Identifier	out		1009049	0					
ANR	1009096	CallExpression	itr -> first . getCreamJobID ( )		1009049	1					
ANR	1009097	Callee	itr -> first . getCreamJobID		1009049	0					
ANR	1009098	MemberAccess	itr -> first . getCreamJobID		1009049	0					
ANR	1009099	PtrMemberAccess	itr -> first		1009049	0					
ANR	1009100	Identifier	itr		1009049	0					
ANR	1009101	Identifier	first		1009049	1					
ANR	1009102	Identifier	getCreamJobID		1009049	1					
ANR	1009103	ArgumentList			1009049	1					
ANR	1009104	CallExpression	"string ( ""job does not exist"" )"		1009049	1					
ANR	1009105	Callee	string		1009049	0					
ANR	1009106	Identifier	string		1009049	0					
ANR	1009107	ArgumentList	"""job does not exist"""		1009049	1					
ANR	1009108	Argument	"""job does not exist"""		1009049	0					
ANR	1009109	PrimaryExpression	"""job does not exist"""		1009049	0					
ANR	1009110	ExpressionStatement	job_list . clear ( )	144:1:3862:3878	1009049	4	True				
ANR	1009111	CallExpression	job_list . clear ( )		1009049	0					
ANR	1009112	Callee	job_list . clear		1009049	0					
ANR	1009113	MemberAccess	job_list . clear		1009049	0					
ANR	1009114	Identifier	job_list		1009049	0					
ANR	1009115	Identifier	clear		1009049	1					
ANR	1009116	ArgumentList			1009049	1					
ANR	1009117	ExpressionStatement	rw . getNotMatchingStatusJobs ( job_list )	145:1:3881:3918	1009049	5	True				
ANR	1009118	CallExpression	rw . getNotMatchingStatusJobs ( job_list )		1009049	0					
ANR	1009119	Callee	rw . getNotMatchingStatusJobs		1009049	0					
ANR	1009120	MemberAccess	rw . getNotMatchingStatusJobs		1009049	0					
ANR	1009121	Identifier	rw		1009049	0					
ANR	1009122	Identifier	getNotMatchingStatusJobs		1009049	1					
ANR	1009123	ArgumentList	job_list		1009049	1					
ANR	1009124	Argument	job_list		1009049	0					
ANR	1009125	Identifier	job_list		1009049	0					
ANR	1009126	ForStatement	for ( itr = job_list . begin ( ) ; itr != job_list . end ( ) ; itr ++ )		1009049	6					
ANR	1009127	ForInit	itr = job_list . begin ( ) ;	146:7:3927:3949	1009049	0	True				
ANR	1009128	AssignmentExpression	itr = job_list . begin ( )		1009049	0		=			
ANR	1009129	Identifier	itr		1009049	0					
ANR	1009130	CallExpression	job_list . begin ( )		1009049	1					
ANR	1009131	Callee	job_list . begin		1009049	0					
ANR	1009132	MemberAccess	job_list . begin		1009049	0					
ANR	1009133	Identifier	job_list		1009049	0					
ANR	1009134	Identifier	begin		1009049	1					
ANR	1009135	ArgumentList			1009049	1					
ANR	1009136	Condition	itr != job_list . end ( )	146:31:3951:3971	1009049	1	True				
ANR	1009137	EqualityExpression	itr != job_list . end ( )		1009049	0		!=			
ANR	1009138	Identifier	itr		1009049	0					
ANR	1009139	CallExpression	job_list . end ( )		1009049	1					
ANR	1009140	Callee	job_list . end		1009049	0					
ANR	1009141	MemberAccess	job_list . end		1009049	0					
ANR	1009142	Identifier	job_list		1009049	0					
ANR	1009143	Identifier	end		1009049	1					
ANR	1009144	ArgumentList			1009049	1					
ANR	1009145	PostIncDecOperationExpression	itr ++	146:54:3974:3978	1009049	2	True				
ANR	1009146	Identifier	itr		1009049	0					
ANR	1009147	IncDec	++		1009049	1					
ANR	1009148	CompoundStatement		10:62:384:384	1009049	3					
ANR	1009149	ExpressionStatement	"out [ itr -> first . getCreamJobID ( ) ] = string ( ""job status does not match"" )"	147:2:3986:4055	1009049	0	True				
ANR	1009150	AssignmentExpression	"out [ itr -> first . getCreamJobID ( ) ] = string ( ""job status does not match"" )"		1009049	0		=			
ANR	1009151	ArrayIndexing	out [ itr -> first . getCreamJobID ( ) ]		1009049	0					
ANR	1009152	Identifier	out		1009049	0					
ANR	1009153	CallExpression	itr -> first . getCreamJobID ( )		1009049	1					
ANR	1009154	Callee	itr -> first . getCreamJobID		1009049	0					
ANR	1009155	MemberAccess	itr -> first . getCreamJobID		1009049	0					
ANR	1009156	PtrMemberAccess	itr -> first		1009049	0					
ANR	1009157	Identifier	itr		1009049	0					
ANR	1009158	Identifier	first		1009049	1					
ANR	1009159	Identifier	getCreamJobID		1009049	1					
ANR	1009160	ArgumentList			1009049	1					
ANR	1009161	CallExpression	"string ( ""job status does not match"" )"		1009049	1					
ANR	1009162	Callee	string		1009049	0					
ANR	1009163	Identifier	string		1009049	0					
ANR	1009164	ArgumentList	"""job status does not match"""		1009049	1					
ANR	1009165	Argument	"""job status does not match"""		1009049	0					
ANR	1009166	PrimaryExpression	"""job status does not match"""		1009049	0					
ANR	1009167	ExpressionStatement	job_list . clear ( )	149:1:4061:4077	1009049	7	True				
ANR	1009168	CallExpression	job_list . clear ( )		1009049	0					
ANR	1009169	Callee	job_list . clear		1009049	0					
ANR	1009170	MemberAccess	job_list . clear		1009049	0					
ANR	1009171	Identifier	job_list		1009049	0					
ANR	1009172	Identifier	clear		1009049	1					
ANR	1009173	ArgumentList			1009049	1					
ANR	1009174	ExpressionStatement	rw . getNotMatchingDateJobs ( job_list )	150:1:4080:4115	1009049	8	True				
ANR	1009175	CallExpression	rw . getNotMatchingDateJobs ( job_list )		1009049	0					
ANR	1009176	Callee	rw . getNotMatchingDateJobs		1009049	0					
ANR	1009177	MemberAccess	rw . getNotMatchingDateJobs		1009049	0					
ANR	1009178	Identifier	rw		1009049	0					
ANR	1009179	Identifier	getNotMatchingDateJobs		1009049	1					
ANR	1009180	ArgumentList	job_list		1009049	1					
ANR	1009181	Argument	job_list		1009049	0					
ANR	1009182	Identifier	job_list		1009049	0					
ANR	1009183	ForStatement	for ( itr = job_list . begin ( ) ; itr != job_list . end ( ) ; itr ++ )		1009049	9					
ANR	1009184	ForInit	itr = job_list . begin ( ) ;	151:7:4124:4146	1009049	0	True				
ANR	1009185	AssignmentExpression	itr = job_list . begin ( )		1009049	0		=			
ANR	1009186	Identifier	itr		1009049	0					
ANR	1009187	CallExpression	job_list . begin ( )		1009049	1					
ANR	1009188	Callee	job_list . begin		1009049	0					
ANR	1009189	MemberAccess	job_list . begin		1009049	0					
ANR	1009190	Identifier	job_list		1009049	0					
ANR	1009191	Identifier	begin		1009049	1					
ANR	1009192	ArgumentList			1009049	1					
ANR	1009193	Condition	itr != job_list . end ( )	151:31:4148:4168	1009049	1	True				
ANR	1009194	EqualityExpression	itr != job_list . end ( )		1009049	0		!=			
ANR	1009195	Identifier	itr		1009049	0					
ANR	1009196	CallExpression	job_list . end ( )		1009049	1					
ANR	1009197	Callee	job_list . end		1009049	0					
ANR	1009198	MemberAccess	job_list . end		1009049	0					
ANR	1009199	Identifier	job_list		1009049	0					
ANR	1009200	Identifier	end		1009049	1					
ANR	1009201	ArgumentList			1009049	1					
ANR	1009202	PostIncDecOperationExpression	itr ++	151:54:4171:4175	1009049	2	True				
ANR	1009203	Identifier	itr		1009049	0					
ANR	1009204	IncDec	++		1009049	1					
ANR	1009205	CompoundStatement		15:62:581:581	1009049	3					
ANR	1009206	ExpressionStatement	"out [ itr -> first . getCreamJobID ( ) ] = string ( ""job date does not match"" )"	152:2:4183:4250	1009049	0	True				
ANR	1009207	AssignmentExpression	"out [ itr -> first . getCreamJobID ( ) ] = string ( ""job date does not match"" )"		1009049	0		=			
ANR	1009208	ArrayIndexing	out [ itr -> first . getCreamJobID ( ) ]		1009049	0					
ANR	1009209	Identifier	out		1009049	0					
ANR	1009210	CallExpression	itr -> first . getCreamJobID ( )		1009049	1					
ANR	1009211	Callee	itr -> first . getCreamJobID		1009049	0					
ANR	1009212	MemberAccess	itr -> first . getCreamJobID		1009049	0					
ANR	1009213	PtrMemberAccess	itr -> first		1009049	0					
ANR	1009214	Identifier	itr		1009049	0					
ANR	1009215	Identifier	first		1009049	1					
ANR	1009216	Identifier	getCreamJobID		1009049	1					
ANR	1009217	ArgumentList			1009049	1					
ANR	1009218	CallExpression	"string ( ""job date does not match"" )"		1009049	1					
ANR	1009219	Callee	string		1009049	0					
ANR	1009220	Identifier	string		1009049	0					
ANR	1009221	ArgumentList	"""job date does not match"""		1009049	1					
ANR	1009222	Argument	"""job date does not match"""		1009049	0					
ANR	1009223	PrimaryExpression	"""job date does not match"""		1009049	0					
ANR	1009224	ExpressionStatement	job_list . clear ( )	154:1:4256:4272	1009049	10	True				
ANR	1009225	CallExpression	job_list . clear ( )		1009049	0					
ANR	1009226	Callee	job_list . clear		1009049	0					
ANR	1009227	MemberAccess	job_list . clear		1009049	0					
ANR	1009228	Identifier	job_list		1009049	0					
ANR	1009229	Identifier	clear		1009049	1					
ANR	1009230	ArgumentList			1009049	1					
ANR	1009231	ExpressionStatement	rw . getNotMatchingProxyDelegationIdJobs ( job_list )	155:1:4275:4323	1009049	11	True				
ANR	1009232	CallExpression	rw . getNotMatchingProxyDelegationIdJobs ( job_list )		1009049	0					
ANR	1009233	Callee	rw . getNotMatchingProxyDelegationIdJobs		1009049	0					
ANR	1009234	MemberAccess	rw . getNotMatchingProxyDelegationIdJobs		1009049	0					
ANR	1009235	Identifier	rw		1009049	0					
ANR	1009236	Identifier	getNotMatchingProxyDelegationIdJobs		1009049	1					
ANR	1009237	ArgumentList	job_list		1009049	1					
ANR	1009238	Argument	job_list		1009049	0					
ANR	1009239	Identifier	job_list		1009049	0					
ANR	1009240	ForStatement	for ( itr = job_list . begin ( ) ; itr != job_list . end ( ) ; itr ++ )		1009049	12					
ANR	1009241	ForInit	itr = job_list . begin ( ) ;	156:7:4332:4354	1009049	0	True				
ANR	1009242	AssignmentExpression	itr = job_list . begin ( )		1009049	0		=			
ANR	1009243	Identifier	itr		1009049	0					
ANR	1009244	CallExpression	job_list . begin ( )		1009049	1					
ANR	1009245	Callee	job_list . begin		1009049	0					
ANR	1009246	MemberAccess	job_list . begin		1009049	0					
ANR	1009247	Identifier	job_list		1009049	0					
ANR	1009248	Identifier	begin		1009049	1					
ANR	1009249	ArgumentList			1009049	1					
ANR	1009250	Condition	itr != job_list . end ( )	156:31:4356:4376	1009049	1	True				
ANR	1009251	EqualityExpression	itr != job_list . end ( )		1009049	0		!=			
ANR	1009252	Identifier	itr		1009049	0					
ANR	1009253	CallExpression	job_list . end ( )		1009049	1					
ANR	1009254	Callee	job_list . end		1009049	0					
ANR	1009255	MemberAccess	job_list . end		1009049	0					
ANR	1009256	Identifier	job_list		1009049	0					
ANR	1009257	Identifier	end		1009049	1					
ANR	1009258	ArgumentList			1009049	1					
ANR	1009259	PostIncDecOperationExpression	itr ++	156:54:4379:4383	1009049	2	True				
ANR	1009260	Identifier	itr		1009049	0					
ANR	1009261	IncDec	++		1009049	1					
ANR	1009262	CompoundStatement		20:62:789:789	1009049	3					
ANR	1009263	ExpressionStatement	"out [ itr -> first . getCreamJobID ( ) ] = string ( ""job proxy delegation ID does not match"" )"	157:2:4391:4473	1009049	0	True				
ANR	1009264	AssignmentExpression	"out [ itr -> first . getCreamJobID ( ) ] = string ( ""job proxy delegation ID does not match"" )"		1009049	0		=			
ANR	1009265	ArrayIndexing	out [ itr -> first . getCreamJobID ( ) ]		1009049	0					
ANR	1009266	Identifier	out		1009049	0					
ANR	1009267	CallExpression	itr -> first . getCreamJobID ( )		1009049	1					
ANR	1009268	Callee	itr -> first . getCreamJobID		1009049	0					
ANR	1009269	MemberAccess	itr -> first . getCreamJobID		1009049	0					
ANR	1009270	PtrMemberAccess	itr -> first		1009049	0					
ANR	1009271	Identifier	itr		1009049	0					
ANR	1009272	Identifier	first		1009049	1					
ANR	1009273	Identifier	getCreamJobID		1009049	1					
ANR	1009274	ArgumentList			1009049	1					
ANR	1009275	CallExpression	"string ( ""job proxy delegation ID does not match"" )"		1009049	1					
ANR	1009276	Callee	string		1009049	0					
ANR	1009277	Identifier	string		1009049	0					
ANR	1009278	ArgumentList	"""job proxy delegation ID does not match"""		1009049	1					
ANR	1009279	Argument	"""job proxy delegation ID does not match"""		1009049	0					
ANR	1009280	PrimaryExpression	"""job proxy delegation ID does not match"""		1009049	0					
ANR	1009281	ExpressionStatement	job_list . clear ( )	159:1:4479:4495	1009049	13	True				
ANR	1009282	CallExpression	job_list . clear ( )		1009049	0					
ANR	1009283	Callee	job_list . clear		1009049	0					
ANR	1009284	MemberAccess	job_list . clear		1009049	0					
ANR	1009285	Identifier	job_list		1009049	0					
ANR	1009286	Identifier	clear		1009049	1					
ANR	1009287	ArgumentList			1009049	1					
ANR	1009288	ExpressionStatement	rw . getNotMatchingLeaseIdJobs ( job_list )	160:1:4498:4536	1009049	14	True				
ANR	1009289	CallExpression	rw . getNotMatchingLeaseIdJobs ( job_list )		1009049	0					
ANR	1009290	Callee	rw . getNotMatchingLeaseIdJobs		1009049	0					
ANR	1009291	MemberAccess	rw . getNotMatchingLeaseIdJobs		1009049	0					
ANR	1009292	Identifier	rw		1009049	0					
ANR	1009293	Identifier	getNotMatchingLeaseIdJobs		1009049	1					
ANR	1009294	ArgumentList	job_list		1009049	1					
ANR	1009295	Argument	job_list		1009049	0					
ANR	1009296	Identifier	job_list		1009049	0					
ANR	1009297	ForStatement	for ( itr = job_list . begin ( ) ; itr != job_list . end ( ) ; itr ++ )		1009049	15					
ANR	1009298	ForInit	itr = job_list . begin ( ) ;	161:7:4545:4567	1009049	0	True				
ANR	1009299	AssignmentExpression	itr = job_list . begin ( )		1009049	0		=			
ANR	1009300	Identifier	itr		1009049	0					
ANR	1009301	CallExpression	job_list . begin ( )		1009049	1					
ANR	1009302	Callee	job_list . begin		1009049	0					
ANR	1009303	MemberAccess	job_list . begin		1009049	0					
ANR	1009304	Identifier	job_list		1009049	0					
ANR	1009305	Identifier	begin		1009049	1					
ANR	1009306	ArgumentList			1009049	1					
ANR	1009307	Condition	itr != job_list . end ( )	161:31:4569:4589	1009049	1	True				
ANR	1009308	EqualityExpression	itr != job_list . end ( )		1009049	0		!=			
ANR	1009309	Identifier	itr		1009049	0					
ANR	1009310	CallExpression	job_list . end ( )		1009049	1					
ANR	1009311	Callee	job_list . end		1009049	0					
ANR	1009312	MemberAccess	job_list . end		1009049	0					
ANR	1009313	Identifier	job_list		1009049	0					
ANR	1009314	Identifier	end		1009049	1					
ANR	1009315	ArgumentList			1009049	1					
ANR	1009316	PostIncDecOperationExpression	itr ++	161:54:4592:4596	1009049	2	True				
ANR	1009317	Identifier	itr		1009049	0					
ANR	1009318	IncDec	++		1009049	1					
ANR	1009319	CompoundStatement		25:62:1002:1002	1009049	3					
ANR	1009320	ExpressionStatement	"out [ itr -> first . getCreamJobID ( ) ] = string ( ""job lease ID does not match"" )"	162:2:4604:4675	1009049	0	True				
ANR	1009321	AssignmentExpression	"out [ itr -> first . getCreamJobID ( ) ] = string ( ""job lease ID does not match"" )"		1009049	0		=			
ANR	1009322	ArrayIndexing	out [ itr -> first . getCreamJobID ( ) ]		1009049	0					
ANR	1009323	Identifier	out		1009049	0					
ANR	1009324	CallExpression	itr -> first . getCreamJobID ( )		1009049	1					
ANR	1009325	Callee	itr -> first . getCreamJobID		1009049	0					
ANR	1009326	MemberAccess	itr -> first . getCreamJobID		1009049	0					
ANR	1009327	PtrMemberAccess	itr -> first		1009049	0					
ANR	1009328	Identifier	itr		1009049	0					
ANR	1009329	Identifier	first		1009049	1					
ANR	1009330	Identifier	getCreamJobID		1009049	1					
ANR	1009331	ArgumentList			1009049	1					
ANR	1009332	CallExpression	"string ( ""job lease ID does not match"" )"		1009049	1					
ANR	1009333	Callee	string		1009049	0					
ANR	1009334	Identifier	string		1009049	0					
ANR	1009335	ArgumentList	"""job lease ID does not match"""		1009049	1					
ANR	1009336	Argument	"""job lease ID does not match"""		1009049	0					
ANR	1009337	PrimaryExpression	"""job lease ID does not match"""		1009049	0					
ANR	1009338	ReturnType	static void		1009049	1					
ANR	1009339	Identifier	check_result_wrapper2		1009049	2					
ANR	1009340	ParameterList	"ResultWrapper & rw , map < string , string > & out"		1009049	3					
ANR	1009341	Parameter	ResultWrapper & rw	136:22:3552:3568	1009049	0	True				
ANR	1009342	ParameterType	ResultWrapper &		1009049	0					
ANR	1009343	Identifier	rw		1009049	1					
ANR	1009344	Parameter	"map < string , string > & out"	136:41:3571:3594	1009049	1	True				
ANR	1009345	ParameterType	"map < string , string > &"		1009049	0					
ANR	1009346	Identifier	out		1009049	1					
ANR	1009347	CFGEntryNode	ENTRY		1009049		True				
ANR	1009348	CFGExitNode	EXIT		1009049		True				
ANR	1009349	Symbol	* itr -> first . getCreamJobID		1009049						
ANR	1009350	Symbol	string		1009049						
ANR	1009351	Symbol	rw		1009049						
ANR	1009352	Symbol	itr		1009049						
ANR	1009353	Symbol	itr -> first . getCreamJobID		1009049						
ANR	1009354	Symbol	* itr		1009049						
ANR	1009355	Symbol	out		1009049						
ANR	1009356	Symbol	job_list . begin		1009049						
ANR	1009357	Symbol	* itr -> first		1009049						
ANR	1009358	Symbol	job_list . end		1009049						
ANR	1009359	Symbol	job_list		1009049						
ANR	1009360	Symbol	* out		1009049						
ANR	1009361	Symbol	itr -> first		1009049						
ANR	1009362	Symbol	* * itr		1009049						
ANR	1009363	DeclStmt									
ANR	1009364	Decl							void	void ( char * * )	free_args
ANR	1009365	ClassDef	Request	168:0:4711:4983							
ANR	1009366	Function	Request	169:1:4729:4813							
ANR	1009367	FunctionDef	Request ()		1009366	0					
ANR	1009368	CompoundStatement		169:11:4739:4813	1009366	0					
ANR	1009369	ExpressionStatement	input_line = NULL	169:1:4741:4758	1009366	0	True				
ANR	1009370	AssignmentExpression	input_line = NULL		1009366	0		=			
ANR	1009371	Identifier	input_line		1009366	0					
ANR	1009372	Identifier	NULL		1009366	1					
ANR	1009373	ExpressionStatement	handler = NULL	169:20:4760:4774	1009366	1	True				
ANR	1009374	AssignmentExpression	handler = NULL		1009366	0		=			
ANR	1009375	Identifier	handler		1009366	0					
ANR	1009376	Identifier	NULL		1009366	1					
ANR	1009377	ExpressionStatement	bhandler = NULL	169:36:4776:4791	1009366	2	True				
ANR	1009378	AssignmentExpression	bhandler = NULL		1009366	0		=			
ANR	1009379	Identifier	bhandler		1009366	0					
ANR	1009380	Identifier	NULL		1009366	1					
ANR	1009381	ExpressionStatement	requestcomp = NULL	169:53:4793:4811	1009366	3	True				
ANR	1009382	AssignmentExpression	requestcomp = NULL		1009366	0		=			
ANR	1009383	Identifier	requestcomp		1009366	0					
ANR	1009384	Identifier	NULL		1009366	1					
ANR	1009385	Identifier	Request		1009366	1					
ANR	1009386	ParameterList			1009366	2					
ANR	1009387	CFGEntryNode	ENTRY		1009366		True				
ANR	1009388	CFGExitNode	EXIT		1009366		True				
ANR	1009389	Symbol	handler		1009366						
ANR	1009390	Symbol	NULL		1009366						
ANR	1009391	Symbol	bhandler		1009366						
ANR	1009392	Symbol	input_line		1009366						
ANR	1009393	Symbol	requestcomp		1009366						
ANR	1009394	Function	~Request	170:1:4816:4872							
ANR	1009395	FunctionDef	~Request ()		1009394	1					
ANR	1009396	CompoundStatement		170:12:4827:4872	1009394	0					
ANR	1009397	IfStatement	if ( input_line )		1009394	0					
ANR	1009398	Condition	input_line	170:6:4834:4843	1009394	0	True				
ANR	1009399	Identifier	input_line		1009394	0					
ANR	1009400	ExpressionStatement	free_args ( input_line )	170:19:4847:4870	1009394	1	True				
ANR	1009401	CallExpression	free_args ( input_line )		1009394	0					
ANR	1009402	Callee	free_args		1009394	0					
ANR	1009403	Identifier	free_args		1009394	0					
ANR	1009404	ArgumentList	input_line		1009394	1					
ANR	1009405	Argument	input_line		1009394	0					
ANR	1009406	Identifier	input_line		1009394	0					
ANR	1009407	Identifier	~Request		1009394	1					
ANR	1009408	ParameterList			1009394	2					
ANR	1009409	CFGEntryNode	ENTRY		1009394		True				
ANR	1009410	CFGExitNode	EXIT		1009394		True				
ANR	1009411	Symbol	input_line		1009394						
ANR	1009412	DeclStmt									
ANR	1009413	Decl							char	char * *	input_line
ANR	1009414	DeclStmt									
ANR	1009415	Decl							string	string	proxy
ANR	1009416	DeclStmt									
ANR	1009417	Decl							SingleHandler	SingleHandler	handler
ANR	1009418	DeclStmt									
ANR	1009419	Decl							BatchHandler	BatchHandler	bhandler
ANR	1009420	DeclStmt									
ANR	1009421	Decl							RequestCmp	RequestCmp	requestcomp
ANR	1009422	DeclStmt									
ANR	1009423	Decl							char	char *	commands_list
ANR	1009424	DeclStmt									
ANR	1009425	Decl							char	char *	VersionString
ANR	1009426	DeclStmt									
ANR	1009427	Decl							pthread_t	pthread_t *	threads
ANR	1009428	DeclStmt									
ANR	1009429	Decl							string	string	active_proxy
ANR	1009430	DeclStmt									
ANR	1009431	Decl							bool	bool	initialized
ANR	1009432	DeclStmt									
ANR	1009433	Decl							"map < string , string >"	"map < string , string >"	proxies
ANR	1009434	DeclStmt									
ANR	1009435	Decl							string	string	sp
ANR	1009436	DeclStmt									
ANR	1009437	Decl							deque < Request * >	deque < Request * >	requestQueue
ANR	1009438	DeclStmt									
ANR	1009439	Decl							pthread_cond_t	pthread_cond_t	requestQueueEmpty
ANR	1009440	DeclStmt									
ANR	1009441	Decl							pthread_mutex_t	pthread_mutex_t	requestQueueLock
ANR	1009442	DeclStmt									
ANR	1009443	Decl							queue < string >	queue < string >	resultQueue
ANR	1009444	DeclStmt									
ANR	1009445	Decl							pthread_mutex_t	pthread_mutex_t	resultQueueLock
ANR	1009446	DeclStmt									
ANR	1009447	Decl							bool	bool	async
ANR	1009448	DeclStmt									
ANR	1009449	Decl							bool	bool	results_pending
ANR	1009450	DeclStmt									
ANR	1009451	Decl							pthread_mutex_t	pthread_mutex_t	outputLock
ANR	1009452	DeclStmt									
ANR	1009453	Decl							char	char *	response_prefix
ANR	1009454	DeclStmt									
ANR	1009455	Decl							int	int ( Request * req )	thread_cream_delegate
ANR	1009456	DeclStmt									
ANR	1009457	Decl							int	int ( Request * * req )	thread_cream_job_register
ANR	1009458	DeclStmt									
ANR	1009459	Decl							int	int ( Request * * req )	thread_cream_job_start
ANR	1009460	DeclStmt									
ANR	1009461	Decl							int	int ( Request * * req )	thread_cream_job_purge
ANR	1009462	DeclStmt									
ANR	1009463	Decl							int	int ( Request * * req )	thread_cream_job_cancel
ANR	1009464	DeclStmt									
ANR	1009465	Decl							int	int ( Request * req )	thread_cream_job_suspend
ANR	1009466	DeclStmt									
ANR	1009467	Decl							int	int ( Request * req )	thread_cream_job_resume
ANR	1009468	DeclStmt									
ANR	1009469	Decl							int	int ( Request * req )	thread_cream_set_lease
ANR	1009470	DeclStmt									
ANR	1009471	Decl							int	int ( Request * * req )	thread_cream_job_status
ANR	1009472	DeclStmt									
ANR	1009473	Decl							int	int ( Request * req )	thread_cream_job_info
ANR	1009474	DeclStmt									
ANR	1009475	Decl							int	int ( Request * req )	thread_cream_job_list
ANR	1009476	DeclStmt									
ANR	1009477	Decl							int	int ( Request * req )	thread_cream_ping
ANR	1009478	DeclStmt									
ANR	1009479	Decl							int	int ( Request * req )	thread_cream_does_accept_job_submissions
ANR	1009480	DeclStmt									
ANR	1009481	Decl							int	int ( Request * req )	thread_cream_proxy_renew
ANR	1009482	DeclStmt									
ANR	1009483	Decl							int	int ( Request * req )	thread_cream_get_CEMon_url
ANR	1009484	Function	gahp_printf	251:0:7395:7741							
ANR	1009485	FunctionDef	gahp_printf (const char * format)		1009484	0					
ANR	1009486	CompoundStatement		252:0:7436:7741	1009484	0					
ANR	1009487	IdentifierDeclStatement	int ret_val = 0 ;	253:1:7439:7454	1009484	0	True				
ANR	1009488	IdentifierDecl	ret_val = 0		1009484	0					
ANR	1009489	IdentifierDeclType	int		1009484	0					
ANR	1009490	Identifier	ret_val		1009484	1					
ANR	1009491	AssignmentExpression	ret_val = 0		1009484	2		=			
ANR	1009492	Identifier	ret_val		1009484	0					
ANR	1009493	PrimaryExpression	0		1009484	1					
ANR	1009494	IdentifierDeclStatement	va_list ap ;	254:1:7457:7467	1009484	1	True				
ANR	1009495	IdentifierDecl	ap		1009484	0					
ANR	1009496	IdentifierDeclType	va_list		1009484	0					
ANR	1009497	Identifier	ap		1009484	1					
ANR	1009498	ExpressionStatement	pthread_mutex_lock ( & outputLock )	256:1:7473:7506	1009484	2	True				
ANR	1009499	CallExpression	pthread_mutex_lock ( & outputLock )		1009484	0					
ANR	1009500	Callee	pthread_mutex_lock		1009484	0					
ANR	1009501	Identifier	pthread_mutex_lock		1009484	0					
ANR	1009502	ArgumentList	& outputLock		1009484	1					
ANR	1009503	Argument	& outputLock		1009484	0					
ANR	1009504	UnaryOperationExpression	& outputLock		1009484	0					
ANR	1009505	UnaryOperator	&		1009484	0					
ANR	1009506	Identifier	outputLock		1009484	1					
ANR	1009507	IfStatement	if ( response_prefix )		1009484	3					
ANR	1009508	Condition	response_prefix	258:5:7514:7528	1009484	0	True				
ANR	1009509	Identifier	response_prefix		1009484	0					
ANR	1009510	CompoundStatement		7:22:94:94	1009484	1					
ANR	1009511	ExpressionStatement	"ret_val = printf ( ""%s"" , response_prefix )"	259:2:7535:7574	1009484	0	True				
ANR	1009512	AssignmentExpression	"ret_val = printf ( ""%s"" , response_prefix )"		1009484	0		=			
ANR	1009513	Identifier	ret_val		1009484	0					
ANR	1009514	CallExpression	"printf ( ""%s"" , response_prefix )"		1009484	1					
ANR	1009515	Callee	printf		1009484	0					
ANR	1009516	Identifier	printf		1009484	0					
ANR	1009517	ArgumentList	"""%s"""		1009484	1					
ANR	1009518	Argument	"""%s"""		1009484	0					
ANR	1009519	PrimaryExpression	"""%s"""		1009484	0					
ANR	1009520	Argument	response_prefix		1009484	1					
ANR	1009521	Identifier	response_prefix		1009484	0					
ANR	1009522	IfStatement	if ( ret_val >= 0 )		1009484	4					
ANR	1009523	Condition	ret_val >= 0	262:4:7584:7595	1009484	0	True				
ANR	1009524	RelationalExpression	ret_val >= 0		1009484	0		>=			
ANR	1009525	Identifier	ret_val		1009484	0					
ANR	1009526	PrimaryExpression	0		1009484	1					
ANR	1009527	CompoundStatement		11:18:161:161	1009484	1					
ANR	1009528	ExpressionStatement	"va_start ( ap , format )"	263:2:7602:7622	1009484	0	True				
ANR	1009529	CallExpression	"va_start ( ap , format )"		1009484	0					
ANR	1009530	Callee	va_start		1009484	0					
ANR	1009531	Identifier	va_start		1009484	0					
ANR	1009532	ArgumentList	ap		1009484	1					
ANR	1009533	Argument	ap		1009484	0					
ANR	1009534	Identifier	ap		1009484	0					
ANR	1009535	Argument	format		1009484	1					
ANR	1009536	Identifier	format		1009484	0					
ANR	1009537	ExpressionStatement	"vprintf ( format , ap )"	264:2:7626:7645	1009484	1	True				
ANR	1009538	CallExpression	"vprintf ( format , ap )"		1009484	0					
ANR	1009539	Callee	vprintf		1009484	0					
ANR	1009540	Identifier	vprintf		1009484	0					
ANR	1009541	ArgumentList	format		1009484	1					
ANR	1009542	Argument	format		1009484	0					
ANR	1009543	Identifier	format		1009484	0					
ANR	1009544	Argument	ap		1009484	1					
ANR	1009545	Identifier	ap		1009484	0					
ANR	1009546	ExpressionStatement	va_end ( ap )	265:2:7649:7659	1009484	2	True				
ANR	1009547	CallExpression	va_end ( ap )		1009484	0					
ANR	1009548	Callee	va_end		1009484	0					
ANR	1009549	Identifier	va_end		1009484	0					
ANR	1009550	ArgumentList	ap		1009484	1					
ANR	1009551	Argument	ap		1009484	0					
ANR	1009552	Identifier	ap		1009484	0					
ANR	1009553	ExpressionStatement	fflush ( stdout )	268:1:7667:7681	1009484	5	True				
ANR	1009554	CallExpression	fflush ( stdout )		1009484	0					
ANR	1009555	Callee	fflush		1009484	0					
ANR	1009556	Identifier	fflush		1009484	0					
ANR	1009557	ArgumentList	stdout		1009484	1					
ANR	1009558	Argument	stdout		1009484	0					
ANR	1009559	Identifier	stdout		1009484	0					
ANR	1009560	ExpressionStatement	pthread_mutex_unlock ( & outputLock )	270:1:7685:7720	1009484	6	True				
ANR	1009561	CallExpression	pthread_mutex_unlock ( & outputLock )		1009484	0					
ANR	1009562	Callee	pthread_mutex_unlock		1009484	0					
ANR	1009563	Identifier	pthread_mutex_unlock		1009484	0					
ANR	1009564	ArgumentList	& outputLock		1009484	1					
ANR	1009565	Argument	& outputLock		1009484	0					
ANR	1009566	UnaryOperationExpression	& outputLock		1009484	0					
ANR	1009567	UnaryOperator	&		1009484	0					
ANR	1009568	Identifier	outputLock		1009484	1					
ANR	1009569	ReturnStatement	return ret_val ;	272:1:7725:7739	1009484	7	True				
ANR	1009570	Identifier	ret_val		1009484	0					
ANR	1009571	ReturnType	int		1009484	1					
ANR	1009572	Identifier	gahp_printf		1009484	2					
ANR	1009573	ParameterList	const char * format		1009484	3					
ANR	1009574	Parameter	const char * format	251:16:7411:7428	1009484	0	True				
ANR	1009575	ParameterType	const char *		1009484	0					
ANR	1009576	Identifier	format		1009484	1					
ANR	1009577	CFGEntryNode	ENTRY		1009484		True				
ANR	1009578	CFGExitNode	EXIT		1009484		True				
ANR	1009579	Symbol	stdout		1009484						
ANR	1009580	Symbol	& outputLock		1009484						
ANR	1009581	Symbol	format		1009484						
ANR	1009582	Symbol	response_prefix		1009484						
ANR	1009583	Symbol	ret_val		1009484						
ANR	1009584	Symbol	ap		1009484						
ANR	1009585	Symbol	printf		1009484						
ANR	1009586	Function	process_string_arg	280:0:7960:8267							
ANR	1009587	FunctionDef	"process_string_arg (char * input_line , char * * output)"		1009586	0					
ANR	1009588	CompoundStatement		281:0:8017:8267	1009586	0					
ANR	1009589	IfStatement	"if ( ! strcasecmp ( input_line , ""NULL"" ) )"		1009586	0					
ANR	1009590	Condition	"! strcasecmp ( input_line , ""NULL"" )"	284:4:8152:8182	1009586	0	True				
ANR	1009591	UnaryOperationExpression	"! strcasecmp ( input_line , ""NULL"" )"		1009586	0					
ANR	1009592	UnaryOperator	!		1009586	0					
ANR	1009593	CallExpression	"strcasecmp ( input_line , ""NULL"" )"		1009586	1					
ANR	1009594	Callee	strcasecmp		1009586	0					
ANR	1009595	Identifier	strcasecmp		1009586	0					
ANR	1009596	ArgumentList	input_line		1009586	1					
ANR	1009597	Argument	input_line		1009586	0					
ANR	1009598	Identifier	input_line		1009586	0					
ANR	1009599	Argument	"""NULL"""		1009586	1					
ANR	1009600	PrimaryExpression	"""NULL"""		1009586	0					
ANR	1009601	ExpressionStatement	* output = NULL	285:2:8188:8202	1009586	1	True				
ANR	1009602	AssignmentExpression	* output = NULL		1009586	0		=			
ANR	1009603	UnaryOperationExpression	* output		1009586	0					
ANR	1009604	UnaryOperator	*		1009586	0					
ANR	1009605	Identifier	output		1009586	1					
ANR	1009606	Identifier	NULL		1009586	1					
ANR	1009607	ElseStatement	else		1009586	0					
ANR	1009608	ExpressionStatement	* output = input_line	287:2:8214:8234	1009586	0	True				
ANR	1009609	AssignmentExpression	* output = input_line		1009586	0		=			
ANR	1009610	UnaryOperationExpression	* output		1009586	0					
ANR	1009611	UnaryOperator	*		1009586	0					
ANR	1009612	Identifier	output		1009586	1					
ANR	1009613	Identifier	input_line		1009586	1					
ANR	1009614	ReturnType	void		1009586	1					
ANR	1009615	Identifier	process_string_arg		1009586	2					
ANR	1009616	ParameterList	"char * input_line , char * * output"		1009586	3					
ANR	1009617	Parameter	char * input_line	280:24:7984:7999	1009586	0	True				
ANR	1009618	ParameterType	char *		1009586	0					
ANR	1009619	Identifier	input_line		1009586	1					
ANR	1009620	Parameter	char * * output	280:42:8002:8014	1009586	1	True				
ANR	1009621	ParameterType	char * *		1009586	0					
ANR	1009622	Identifier	output		1009586	1					
ANR	1009623	CFGEntryNode	ENTRY		1009586		True				
ANR	1009624	CFGExitNode	EXIT		1009586		True				
ANR	1009625	Symbol	output		1009586						
ANR	1009626	Symbol	NULL		1009586						
ANR	1009627	Symbol	input_line		1009586						
ANR	1009628	Symbol	strcasecmp		1009586						
ANR	1009629	Symbol	* output		1009586						
ANR	1009630	Function	process_int_arg	290:0:8270:8432							
ANR	1009631	FunctionDef	"process_int_arg (char * input , int * output)"		1009630	0					
ANR	1009632	CompoundStatement		292:0:8318:8432	1009630	0					
ANR	1009633	IfStatement	if ( input && strlen ( input ) )		1009630	0					
ANR	1009634	Condition	input && strlen ( input )	293:5:8325:8346	1009630	0	True				
ANR	1009635	AndExpression	input && strlen ( input )		1009630	0		&&			
ANR	1009636	Identifier	input		1009630	0					
ANR	1009637	CallExpression	strlen ( input )		1009630	1					
ANR	1009638	Callee	strlen		1009630	0					
ANR	1009639	Identifier	strlen		1009630	0					
ANR	1009640	ArgumentList	input		1009630	1					
ANR	1009641	Argument	input		1009630	0					
ANR	1009642	Identifier	input		1009630	0					
ANR	1009643	CompoundStatement		2:29:30:30	1009630	1					
ANR	1009644	IfStatement	if ( output )		1009630	0					
ANR	1009645	Condition	output	294:7:8358:8363	1009630	0	True				
ANR	1009646	Identifier	output		1009630	0					
ANR	1009647	CompoundStatement		3:16:48:48	1009630	1					
ANR	1009648	ExpressionStatement	* output = atoi ( input )	295:3:8372:8393	1009630	0	True				
ANR	1009649	AssignmentExpression	* output = atoi ( input )		1009630	0		=			
ANR	1009650	UnaryOperationExpression	* output		1009630	0					
ANR	1009651	UnaryOperator	*		1009630	0					
ANR	1009652	Identifier	output		1009630	1					
ANR	1009653	CallExpression	atoi ( input )		1009630	1					
ANR	1009654	Callee	atoi		1009630	0					
ANR	1009655	Identifier	atoi		1009630	0					
ANR	1009656	ArgumentList	input		1009630	1					
ANR	1009657	Argument	input		1009630	0					
ANR	1009658	Identifier	input		1009630	0					
ANR	1009659	ReturnStatement	return true ;	297:2:8401:8412	1009630	1	True				
ANR	1009660	Identifier	true		1009630	0					
ANR	1009661	ReturnStatement	return false ;	299:1:8418:8430	1009630	1	True				
ANR	1009662	Identifier	false		1009630	0					
ANR	1009663	ReturnType	int		1009630	1					
ANR	1009664	Identifier	process_int_arg		1009630	2					
ANR	1009665	ParameterList	"char * input , int * output"		1009630	3					
ANR	1009666	Parameter	char * input	291:17:8292:8302	1009630	0	True				
ANR	1009667	ParameterType	char *		1009630	0					
ANR	1009668	Identifier	input		1009630	1					
ANR	1009669	Parameter	int * output	291:30:8305:8315	1009630	1	True				
ANR	1009670	ParameterType	int *		1009630	0					
ANR	1009671	Identifier	output		1009630	1					
ANR	1009672	CFGEntryNode	ENTRY		1009630		True				
ANR	1009673	CFGExitNode	EXIT		1009630		True				
ANR	1009674	Symbol	output		1009630						
ANR	1009675	Symbol	atoi		1009630						
ANR	1009676	Symbol	input		1009630						
ANR	1009677	Symbol	strlen		1009630						
ANR	1009678	Symbol	true		1009630						
ANR	1009679	Symbol	false		1009630						
ANR	1009680	Symbol	* output		1009630						
ANR	1009681	Function	count_args	302:0:8435:8552							
ANR	1009682	FunctionDef	count_args (char * * input_line)		1009681	0					
ANR	1009683	CompoundStatement		303:0:8471:8552	1009681	0					
ANR	1009684	IdentifierDeclStatement	int count = 0 ;	304:1:8474:8487	1009681	0	True				
ANR	1009685	IdentifierDecl	count = 0		1009681	0					
ANR	1009686	IdentifierDeclType	int		1009681	0					
ANR	1009687	Identifier	count		1009681	1					
ANR	1009688	AssignmentExpression	count = 0		1009681	2		=			
ANR	1009689	Identifier	count		1009681	0					
ANR	1009690	PrimaryExpression	0		1009681	1					
ANR	1009691	ForStatement	for ( count = 0 ; input_line [ count ] ; count ++ )		1009681	1					
ANR	1009692	ForInit	count = 0 ;	305:7:8496:8505	1009681	0	True				
ANR	1009693	AssignmentExpression	count = 0		1009681	0		=			
ANR	1009694	Identifier	count		1009681	0					
ANR	1009695	PrimaryExpression	0		1009681	1					
ANR	1009696	Condition	input_line [ count ]	305:18:8507:8523	1009681	1	True				
ANR	1009697	ArrayIndexing	input_line [ count ]		1009681	0					
ANR	1009698	Identifier	input_line		1009681	0					
ANR	1009699	Identifier	count		1009681	1					
ANR	1009700	PostIncDecOperationExpression	count ++	305:37:8526:8532	1009681	2	True				
ANR	1009701	Identifier	count		1009681	0					
ANR	1009702	IncDec	++		1009681	1					
ANR	1009703	ExpressionStatement		305:46:8535:8535	1009681	3	True				
ANR	1009704	ReturnStatement	return count ;	306:1:8538:8550	1009681	2	True				
ANR	1009705	Identifier	count		1009681	0					
ANR	1009706	ReturnType	int		1009681	1					
ANR	1009707	Identifier	count_args		1009681	2					
ANR	1009708	ParameterList	char * * input_line		1009681	3					
ANR	1009709	Parameter	char * * input_line	302:16:8451:8467	1009681	0	True				
ANR	1009710	ParameterType	char * *		1009681	0					
ANR	1009711	Identifier	input_line		1009681	1					
ANR	1009712	CFGEntryNode	ENTRY		1009681		True				
ANR	1009713	CFGExitNode	EXIT		1009681		True				
ANR	1009714	Symbol	* input_line		1009681						
ANR	1009715	Symbol	* count		1009681						
ANR	1009716	Symbol	count		1009681						
ANR	1009717	Symbol	input_line		1009681						
ANR	1009718	Function	escape_spaces	313:0:8828:9538							
ANR	1009719	FunctionDef	escape_spaces (const char * input_line)		1009718	0					
ANR	1009720	CompoundStatement		314:0:8874:9538	1009718	0					
ANR	1009721	IdentifierDeclStatement	int i ;	315:1:8877:8882	1009718	0	True				
ANR	1009722	IdentifierDecl	i		1009718	0					
ANR	1009723	IdentifierDeclType	int		1009718	0					
ANR	1009724	Identifier	i		1009718	1					
ANR	1009725	IdentifierDeclStatement	const char * temp ;	316:1:8885:8901	1009718	1	True				
ANR	1009726	IdentifierDecl	* temp		1009718	0					
ANR	1009727	IdentifierDeclType	const char *		1009718	0					
ANR	1009728	Identifier	temp		1009718	1					
ANR	1009729	IdentifierDeclStatement	char * output_line ;	317:1:8904:8921	1009718	2	True				
ANR	1009730	IdentifierDecl	* output_line		1009718	0					
ANR	1009731	IdentifierDeclType	char *		1009718	0					
ANR	1009732	Identifier	output_line		1009718	1					
ANR	1009733	ExpressionStatement	temp = input_line	320:1:8956:8973	1009718	3	True				
ANR	1009734	AssignmentExpression	temp = input_line		1009718	0		=			
ANR	1009735	Identifier	temp		1009718	0					
ANR	1009736	Identifier	input_line		1009718	1					
ANR	1009737	ForStatement	for ( i = 0 ; * temp != '\\0' ; temp ++ )		1009718	4					
ANR	1009738	ForInit	i = 0 ;	321:5:8980:8985	1009718	0	True				
ANR	1009739	AssignmentExpression	i = 0		1009718	0		=			
ANR	1009740	Identifier	i		1009718	0					
ANR	1009741	PrimaryExpression	0		1009718	1					
ANR	1009742	Condition	* temp != '\\0'	321:12:8987:8999	1009718	1	True				
ANR	1009743	EqualityExpression	* temp != '\\0'		1009718	0		!=			
ANR	1009744	UnaryOperationExpression	* temp		1009718	0					
ANR	1009745	UnaryOperator	*		1009718	0					
ANR	1009746	Identifier	temp		1009718	1					
ANR	1009747	PrimaryExpression	'\\0'		1009718	1					
ANR	1009748	PostIncDecOperationExpression	temp ++	321:27:9002:9007	1009718	2	True				
ANR	1009749	Identifier	temp		1009718	0					
ANR	1009750	IncDec	++		1009718	1					
ANR	1009751	CompoundStatement		8:35:135:135	1009718	3					
ANR	1009752	IfStatement	if ( * temp == ' ' || * temp == '\\r' || * temp == '\\n' || * temp == '\\\\' )		1009718	0					
ANR	1009753	Condition	* temp == ' ' || * temp == '\\r' || * temp == '\\n' || * temp == '\\\\'	322:6:9018:9079	1009718	0	True				
ANR	1009754	OrExpression	* temp == ' ' || * temp == '\\r' || * temp == '\\n' || * temp == '\\\\'		1009718	0		||			
ANR	1009755	EqualityExpression	* temp == ' '		1009718	0		==			
ANR	1009756	UnaryOperationExpression	* temp		1009718	0					
ANR	1009757	UnaryOperator	*		1009718	0					
ANR	1009758	Identifier	temp		1009718	1					
ANR	1009759	PrimaryExpression	' '		1009718	1					
ANR	1009760	OrExpression	* temp == '\\r' || * temp == '\\n' || * temp == '\\\\'		1009718	1		||			
ANR	1009761	EqualityExpression	* temp == '\\r'		1009718	0		==			
ANR	1009762	UnaryOperationExpression	* temp		1009718	0					
ANR	1009763	UnaryOperator	*		1009718	0					
ANR	1009764	Identifier	temp		1009718	1					
ANR	1009765	PrimaryExpression	'\\r'		1009718	1					
ANR	1009766	OrExpression	* temp == '\\n' || * temp == '\\\\'		1009718	1		||			
ANR	1009767	EqualityExpression	* temp == '\\n'		1009718	0		==			
ANR	1009768	UnaryOperationExpression	* temp		1009718	0					
ANR	1009769	UnaryOperator	*		1009718	0					
ANR	1009770	Identifier	temp		1009718	1					
ANR	1009771	PrimaryExpression	'\\n'		1009718	1					
ANR	1009772	EqualityExpression	* temp == '\\\\'		1009718	1		==			
ANR	1009773	UnaryOperationExpression	* temp		1009718	0					
ANR	1009774	UnaryOperator	*		1009718	0					
ANR	1009775	Identifier	temp		1009718	1					
ANR	1009776	PrimaryExpression	'\\\\'		1009718	1					
ANR	1009777	CompoundStatement		9:71:208:208	1009718	1					
ANR	1009778	ExpressionStatement	i ++	323:3:9088:9091	1009718	0	True				
ANR	1009779	PostIncDecOperationExpression	i ++		1009718	0					
ANR	1009780	Identifier	i		1009718	0					
ANR	1009781	IncDec	++		1009718	1					
ANR	1009782	ExpressionStatement	output_line = ( char * ) malloc ( strlen ( input_line ) + i + 200 )	328:1:9139:9197	1009718	5	True				
ANR	1009783	AssignmentExpression	output_line = ( char * ) malloc ( strlen ( input_line ) + i + 200 )		1009718	0		=			
ANR	1009784	Identifier	output_line		1009718	0					
ANR	1009785	CastExpression	( char * ) malloc ( strlen ( input_line ) + i + 200 )		1009718	1					
ANR	1009786	CastTarget	char *		1009718	0					
ANR	1009787	CallExpression	malloc ( strlen ( input_line ) + i + 200 )		1009718	1					
ANR	1009788	Callee	malloc		1009718	0					
ANR	1009789	Identifier	malloc		1009718	0					
ANR	1009790	ArgumentList	strlen ( input_line ) + i + 200		1009718	1					
ANR	1009791	Argument	strlen ( input_line ) + i + 200		1009718	0					
ANR	1009792	AdditiveExpression	strlen ( input_line ) + i + 200		1009718	0		+			
ANR	1009793	CallExpression	strlen ( input_line )		1009718	0					
ANR	1009794	Callee	strlen		1009718	0					
ANR	1009795	Identifier	strlen		1009718	0					
ANR	1009796	ArgumentList	input_line		1009718	1					
ANR	1009797	Argument	input_line		1009718	0					
ANR	1009798	Identifier	input_line		1009718	0					
ANR	1009799	AdditiveExpression	i + 200		1009718	1		+			
ANR	1009800	Identifier	i		1009718	0					
ANR	1009801	PrimaryExpression	200		1009718	1					
ANR	1009802	ExpressionStatement	temp = input_line	331:1:9226:9243	1009718	6	True				
ANR	1009803	AssignmentExpression	temp = input_line		1009718	0		=			
ANR	1009804	Identifier	temp		1009718	0					
ANR	1009805	Identifier	input_line		1009718	1					
ANR	1009806	ForStatement	for ( i = 0 ; * temp != '\\0' ; temp ++ )		1009718	7					
ANR	1009807	ForInit	i = 0 ;	332:5:9250:9255	1009718	0	True				
ANR	1009808	AssignmentExpression	i = 0		1009718	0		=			
ANR	1009809	Identifier	i		1009718	0					
ANR	1009810	PrimaryExpression	0		1009718	1					
ANR	1009811	Condition	* temp != '\\0'	332:12:9257:9269	1009718	1	True				
ANR	1009812	EqualityExpression	* temp != '\\0'		1009718	0		!=			
ANR	1009813	UnaryOperationExpression	* temp		1009718	0					
ANR	1009814	UnaryOperator	*		1009718	0					
ANR	1009815	Identifier	temp		1009718	1					
ANR	1009816	PrimaryExpression	'\\0'		1009718	1					
ANR	1009817	PostIncDecOperationExpression	temp ++	332:27:9272:9277	1009718	2	True				
ANR	1009818	Identifier	temp		1009718	0					
ANR	1009819	IncDec	++		1009718	1					
ANR	1009820	CompoundStatement		19:35:405:405	1009718	3					
ANR	1009821	IfStatement	if ( * temp == ' ' || * temp == '\\r' || * temp == '\\n' || * temp == '\\\\' )		1009718	0					
ANR	1009822	Condition	* temp == ' ' || * temp == '\\r' || * temp == '\\n' || * temp == '\\\\'	333:6:9288:9349	1009718	0	True				
ANR	1009823	OrExpression	* temp == ' ' || * temp == '\\r' || * temp == '\\n' || * temp == '\\\\'		1009718	0		||			
ANR	1009824	EqualityExpression	* temp == ' '		1009718	0		==			
ANR	1009825	UnaryOperationExpression	* temp		1009718	0					
ANR	1009826	UnaryOperator	*		1009718	0					
ANR	1009827	Identifier	temp		1009718	1					
ANR	1009828	PrimaryExpression	' '		1009718	1					
ANR	1009829	OrExpression	* temp == '\\r' || * temp == '\\n' || * temp == '\\\\'		1009718	1		||			
ANR	1009830	EqualityExpression	* temp == '\\r'		1009718	0		==			
ANR	1009831	UnaryOperationExpression	* temp		1009718	0					
ANR	1009832	UnaryOperator	*		1009718	0					
ANR	1009833	Identifier	temp		1009718	1					
ANR	1009834	PrimaryExpression	'\\r'		1009718	1					
ANR	1009835	OrExpression	* temp == '\\n' || * temp == '\\\\'		1009718	1		||			
ANR	1009836	EqualityExpression	* temp == '\\n'		1009718	0		==			
ANR	1009837	UnaryOperationExpression	* temp		1009718	0					
ANR	1009838	UnaryOperator	*		1009718	0					
ANR	1009839	Identifier	temp		1009718	1					
ANR	1009840	PrimaryExpression	'\\n'		1009718	1					
ANR	1009841	EqualityExpression	* temp == '\\\\'		1009718	1		==			
ANR	1009842	UnaryOperationExpression	* temp		1009718	0					
ANR	1009843	UnaryOperator	*		1009718	0					
ANR	1009844	Identifier	temp		1009718	1					
ANR	1009845	PrimaryExpression	'\\\\'		1009718	1					
ANR	1009846	CompoundStatement		20:71:478:478	1009718	1					
ANR	1009847	ExpressionStatement	output_line [ i ] = '\\\\'	334:3:9358:9379	1009718	0	True				
ANR	1009848	AssignmentExpression	output_line [ i ] = '\\\\'		1009718	0		=			
ANR	1009849	ArrayIndexing	output_line [ i ]		1009718	0					
ANR	1009850	Identifier	output_line		1009718	0					
ANR	1009851	Identifier	i		1009718	1					
ANR	1009852	PrimaryExpression	'\\\\'		1009718	1					
ANR	1009853	ExpressionStatement	i ++	335:3:9385:9388	1009718	1	True				
ANR	1009854	PostIncDecOperationExpression	i ++		1009718	0					
ANR	1009855	Identifier	i		1009718	0					
ANR	1009856	IncDec	++		1009718	1					
ANR	1009857	ExpressionStatement	output_line [ i ] = * temp	337:2:9396:9418	1009718	1	True				
ANR	1009858	AssignmentExpression	output_line [ i ] = * temp		1009718	0		=			
ANR	1009859	ArrayIndexing	output_line [ i ]		1009718	0					
ANR	1009860	Identifier	output_line		1009718	0					
ANR	1009861	Identifier	i		1009718	1					
ANR	1009862	UnaryOperationExpression	* temp		1009718	1					
ANR	1009863	UnaryOperator	*		1009718	0					
ANR	1009864	Identifier	temp		1009718	1					
ANR	1009865	ExpressionStatement	i ++	338:2:9422:9425	1009718	2	True				
ANR	1009866	PostIncDecOperationExpression	i ++		1009718	0					
ANR	1009867	Identifier	i		1009718	0					
ANR	1009868	IncDec	++		1009718	1					
ANR	1009869	ExpressionStatement	output_line [ i ] = '\\0'	340:1:9431:9452	1009718	8	True				
ANR	1009870	AssignmentExpression	output_line [ i ] = '\\0'		1009718	0		=			
ANR	1009871	ArrayIndexing	output_line [ i ]		1009718	0					
ANR	1009872	Identifier	output_line		1009718	0					
ANR	1009873	Identifier	i		1009718	1					
ANR	1009874	PrimaryExpression	'\\0'		1009718	1					
ANR	1009875	ReturnStatement	return output_line ;	342:1:9517:9535	1009718	9	True				
ANR	1009876	Identifier	output_line		1009718	0					
ANR	1009877	ReturnType	char *		1009718	1					
ANR	1009878	Identifier	escape_spaces		1009718	2					
ANR	1009879	ParameterList	const char * input_line		1009718	3					
ANR	1009880	Parameter	const char * input_line	313:21:8849:8870	1009718	0	True				
ANR	1009881	ParameterType	const char *		1009718	0					
ANR	1009882	Identifier	input_line		1009718	1					
ANR	1009883	CFGEntryNode	ENTRY		1009718		True				
ANR	1009884	CFGExitNode	EXIT		1009718		True				
ANR	1009885	Symbol	* output_line		1009718						
ANR	1009886	Symbol	malloc		1009718						
ANR	1009887	Symbol	strlen		1009718						
ANR	1009888	Symbol	temp		1009718						
ANR	1009889	Symbol	* i		1009718						
ANR	1009890	Symbol	i		1009718						
ANR	1009891	Symbol	input_line		1009718						
ANR	1009892	Symbol	output_line		1009718						
ANR	1009893	Symbol	* temp		1009718						
ANR	1009894	Function	free_args	350:0:9746:9908							
ANR	1009895	FunctionDef	free_args (char * * input_line)		1009894	0					
ANR	1009896	CompoundStatement		351:0:9782:9908	1009894	0					
ANR	1009897	IfStatement	if ( input_line == NULL )		1009894	0					
ANR	1009898	Condition	input_line == NULL	352:4:9788:9805	1009894	0	True				
ANR	1009899	EqualityExpression	input_line == NULL		1009894	0		==			
ANR	1009900	Identifier	input_line		1009894	0					
ANR	1009901	Identifier	NULL		1009894	1					
ANR	1009902	ReturnStatement	return ;	353:2:9810:9816	1009894	1	True				
ANR	1009903	ForStatement	for ( int i = 0 ; input_line [ i ] ; i ++ )		1009894	1					
ANR	1009904	ForInit	int i = 0 ;	355:7:9826:9835	1009894	0	True				
ANR	1009905	IdentifierDeclStatement	int i = 0 ;		1009894	0					
ANR	1009906	IdentifierDecl	i = 0		1009894	0					
ANR	1009907	IdentifierDeclType	int		1009894	0					
ANR	1009908	Identifier	i		1009894	1					
ANR	1009909	AssignmentExpression	i = 0		1009894	2		=			
ANR	1009910	Identifier	i		1009894	0					
ANR	1009911	PrimaryExpression	0		1009894	1					
ANR	1009912	Condition	input_line [ i ]	355:18:9837:9849	1009894	1	True				
ANR	1009913	ArrayIndexing	input_line [ i ]		1009894	0					
ANR	1009914	Identifier	input_line		1009894	0					
ANR	1009915	Identifier	i		1009894	1					
ANR	1009916	PostIncDecOperationExpression	i ++	355:33:9852:9854	1009894	2	True				
ANR	1009917	Identifier	i		1009894	0					
ANR	1009918	IncDec	++		1009894	1					
ANR	1009919	CompoundStatement		5:39:75:75	1009894	3					
ANR	1009920	ExpressionStatement	free ( input_line [ i ] )	356:2:9862:9883	1009894	0	True				
ANR	1009921	CallExpression	free ( input_line [ i ] )		1009894	0					
ANR	1009922	Callee	free		1009894	0					
ANR	1009923	Identifier	free		1009894	0					
ANR	1009924	ArgumentList	input_line [ i ]		1009894	1					
ANR	1009925	Argument	input_line [ i ]		1009894	0					
ANR	1009926	ArrayIndexing	input_line [ i ]		1009894	0					
ANR	1009927	Identifier	input_line		1009894	0					
ANR	1009928	Identifier	i		1009894	1					
ANR	1009929	ExpressionStatement	free ( input_line )	359:1:9890:9906	1009894	2	True				
ANR	1009930	CallExpression	free ( input_line )		1009894	0					
ANR	1009931	Callee	free		1009894	0					
ANR	1009932	Identifier	free		1009894	0					
ANR	1009933	ArgumentList	input_line		1009894	1					
ANR	1009934	Argument	input_line		1009894	0					
ANR	1009935	Identifier	input_line		1009894	0					
ANR	1009936	ReturnType	void		1009894	1					
ANR	1009937	Identifier	free_args		1009894	2					
ANR	1009938	ParameterList	char * * input_line		1009894	3					
ANR	1009939	Parameter	char * * input_line	350:16:9762:9778	1009894	0	True				
ANR	1009940	ParameterType	char * *		1009894	0					
ANR	1009941	Identifier	input_line		1009894	1					
ANR	1009942	CFGEntryNode	ENTRY		1009894		True				
ANR	1009943	CFGExitNode	EXIT		1009894		True				
ANR	1009944	Symbol	* input_line		1009894						
ANR	1009945	Symbol	NULL		1009894						
ANR	1009946	Symbol	* i		1009894						
ANR	1009947	Symbol	i		1009894						
ANR	1009948	Symbol	input_line		1009894						
ANR	1009949	Function	enqueue_request_impl	364:0:9983:10498							
ANR	1009950	FunctionDef	"enqueue_request_impl (char * * input_line , SingleHandler shandler , BatchHandler bhandler , RequestCmp rhandler)"		1009949	0					
ANR	1009951	CompoundStatement		368:0:10160:10498	1009949	0					
ANR	1009952	IdentifierDeclStatement	Request * req = new Request ( ) ;	369:1:10163:10191	1009949	0	True				
ANR	1009953	IdentifierDecl	* req = new Request ( )		1009949	0					
ANR	1009954	IdentifierDeclType	Request *		1009949	0					
ANR	1009955	Identifier	req		1009949	1					
ANR	1009956	AssignmentExpression	* req = new Request ( )		1009949	2		=			
ANR	1009957	Identifier	req		1009949	0					
ANR	1009958	UnaryExpression	new Request ( )		1009949	1					
ANR	1009959	ExpressionStatement	req -> input_line = input_line	370:1:10194:10222	1009949	1	True				
ANR	1009960	AssignmentExpression	req -> input_line = input_line		1009949	0		=			
ANR	1009961	PtrMemberAccess	req -> input_line		1009949	0					
ANR	1009962	Identifier	req		1009949	0					
ANR	1009963	Identifier	input_line		1009949	1					
ANR	1009964	Identifier	input_line		1009949	1					
ANR	1009965	ExpressionStatement	req -> proxy = active_proxy	371:1:10225:10250	1009949	2	True				
ANR	1009966	AssignmentExpression	req -> proxy = active_proxy		1009949	0		=			
ANR	1009967	PtrMemberAccess	req -> proxy		1009949	0					
ANR	1009968	Identifier	req		1009949	0					
ANR	1009969	Identifier	proxy		1009949	1					
ANR	1009970	Identifier	active_proxy		1009949	1					
ANR	1009971	ExpressionStatement	req -> handler = shandler	372:1:10253:10276	1009949	3	True				
ANR	1009972	AssignmentExpression	req -> handler = shandler		1009949	0		=			
ANR	1009973	PtrMemberAccess	req -> handler		1009949	0					
ANR	1009974	Identifier	req		1009949	0					
ANR	1009975	Identifier	handler		1009949	1					
ANR	1009976	Identifier	shandler		1009949	1					
ANR	1009977	ExpressionStatement	req -> bhandler = bhandler	373:1:10279:10303	1009949	4	True				
ANR	1009978	AssignmentExpression	req -> bhandler = bhandler		1009949	0		=			
ANR	1009979	PtrMemberAccess	req -> bhandler		1009949	0					
ANR	1009980	Identifier	req		1009949	0					
ANR	1009981	Identifier	bhandler		1009949	1					
ANR	1009982	Identifier	bhandler		1009949	1					
ANR	1009983	ExpressionStatement	req -> requestcomp = rhandler	374:1:10306:10333	1009949	5	True				
ANR	1009984	AssignmentExpression	req -> requestcomp = rhandler		1009949	0		=			
ANR	1009985	PtrMemberAccess	req -> requestcomp		1009949	0					
ANR	1009986	Identifier	req		1009949	0					
ANR	1009987	Identifier	requestcomp		1009949	1					
ANR	1009988	Identifier	rhandler		1009949	1					
ANR	1009989	ExpressionStatement	pthread_mutex_lock ( & requestQueueLock )	376:1:10337:10376	1009949	6	True				
ANR	1009990	CallExpression	pthread_mutex_lock ( & requestQueueLock )		1009949	0					
ANR	1009991	Callee	pthread_mutex_lock		1009949	0					
ANR	1009992	Identifier	pthread_mutex_lock		1009949	0					
ANR	1009993	ArgumentList	& requestQueueLock		1009949	1					
ANR	1009994	Argument	& requestQueueLock		1009949	0					
ANR	1009995	UnaryOperationExpression	& requestQueueLock		1009949	0					
ANR	1009996	UnaryOperator	&		1009949	0					
ANR	1009997	Identifier	requestQueueLock		1009949	1					
ANR	1009998	ExpressionStatement	requestQueue . push_back ( req )	377:1:10379:10408	1009949	7	True				
ANR	1009999	CallExpression	requestQueue . push_back ( req )		1009949	0					
ANR	1010000	Callee	requestQueue . push_back		1009949	0					
ANR	1010001	MemberAccess	requestQueue . push_back		1009949	0					
ANR	1010002	Identifier	requestQueue		1009949	0					
ANR	1010003	Identifier	push_back		1009949	1					
ANR	1010004	ArgumentList	req		1009949	1					
ANR	1010005	Argument	req		1009949	0					
ANR	1010006	Identifier	req		1009949	0					
ANR	1010007	ExpressionStatement	pthread_cond_signal ( & requestQueueEmpty )	378:1:10411:10452	1009949	8	True				
ANR	1010008	CallExpression	pthread_cond_signal ( & requestQueueEmpty )		1009949	0					
ANR	1010009	Callee	pthread_cond_signal		1009949	0					
ANR	1010010	Identifier	pthread_cond_signal		1009949	0					
ANR	1010011	ArgumentList	& requestQueueEmpty		1009949	1					
ANR	1010012	Argument	& requestQueueEmpty		1009949	0					
ANR	1010013	UnaryOperationExpression	& requestQueueEmpty		1009949	0					
ANR	1010014	UnaryOperator	&		1009949	0					
ANR	1010015	Identifier	requestQueueEmpty		1009949	1					
ANR	1010016	ExpressionStatement	pthread_mutex_unlock ( & requestQueueLock )	379:1:10455:10496	1009949	9	True				
ANR	1010017	CallExpression	pthread_mutex_unlock ( & requestQueueLock )		1009949	0					
ANR	1010018	Callee	pthread_mutex_unlock		1009949	0					
ANR	1010019	Identifier	pthread_mutex_unlock		1009949	0					
ANR	1010020	ArgumentList	& requestQueueLock		1009949	1					
ANR	1010021	Argument	& requestQueueLock		1009949	0					
ANR	1010022	UnaryOperationExpression	& requestQueueLock		1009949	0					
ANR	1010023	UnaryOperator	&		1009949	0					
ANR	1010024	Identifier	requestQueueLock		1009949	1					
ANR	1010025	ReturnType	void		1009949	1					
ANR	1010026	Identifier	enqueue_request_impl		1009949	2					
ANR	1010027	ParameterList	"char * * input_line , SingleHandler shandler , BatchHandler bhandler , RequestCmp rhandler"		1009949	3					
ANR	1010028	Parameter	char * * input_line	364:27:10010:10026	1009949	0	True				
ANR	1010029	ParameterType	char * *		1009949	0					
ANR	1010030	Identifier	input_line		1009949	1					
ANR	1010031	Parameter	SingleHandler shandler	365:27:10056:10077	1009949	1	True				
ANR	1010032	ParameterType	SingleHandler		1009949	0					
ANR	1010033	Identifier	shandler		1009949	1					
ANR	1010034	Parameter	BatchHandler bhandler	366:27:10107:10127	1009949	2	True				
ANR	1010035	ParameterType	BatchHandler		1009949	0					
ANR	1010036	Identifier	bhandler		1009949	1					
ANR	1010037	Parameter	RequestCmp rhandler	367:9:10139:10157	1009949	3	True				
ANR	1010038	ParameterType	RequestCmp		1009949	0					
ANR	1010039	Identifier	rhandler		1009949	1					
ANR	1010040	CFGEntryNode	ENTRY		1009949		True				
ANR	1010041	CFGExitNode	EXIT		1009949		True				
ANR	1010042	Symbol	active_proxy		1009949						
ANR	1010043	Symbol	req -> proxy		1009949						
ANR	1010044	Symbol	shandler		1009949						
ANR	1010045	Symbol	* req		1009949						
ANR	1010046	Symbol	rhandler		1009949						
ANR	1010047	Symbol	input_line		1009949						
ANR	1010048	Symbol	& requestQueueEmpty		1009949						
ANR	1010049	Symbol	requestQueue		1009949						
ANR	1010050	Symbol	& requestQueueLock		1009949						
ANR	1010051	Symbol	bhandler		1009949						
ANR	1010052	Symbol	req -> input_line		1009949						
ANR	1010053	Symbol	req -> requestcomp		1009949						
ANR	1010054	Symbol	req -> bhandler		1009949						
ANR	1010055	Symbol	req		1009949						
ANR	1010056	Symbol	req -> handler		1009949						
ANR	1010057	Function	enqueue_request	382:0:10501:10630							
ANR	1010058	FunctionDef	"enqueue_request (char * * input_line , SingleHandler handler)"		1010057	0					
ANR	1010059	CompoundStatement		384:0:10572:10630	1010057	0					
ANR	1010060	ExpressionStatement	"enqueue_request_impl ( input_line , handler , NULL , NULL )"	385:1:10575:10628	1010057	0	True				
ANR	1010061	CallExpression	"enqueue_request_impl ( input_line , handler , NULL , NULL )"		1010057	0					
ANR	1010062	Callee	enqueue_request_impl		1010057	0					
ANR	1010063	Identifier	enqueue_request_impl		1010057	0					
ANR	1010064	ArgumentList	input_line		1010057	1					
ANR	1010065	Argument	input_line		1010057	0					
ANR	1010066	Identifier	input_line		1010057	0					
ANR	1010067	Argument	handler		1010057	1					
ANR	1010068	Identifier	handler		1010057	0					
ANR	1010069	Argument	NULL		1010057	2					
ANR	1010070	Identifier	NULL		1010057	0					
ANR	1010071	Argument	NULL		1010057	3					
ANR	1010072	Identifier	NULL		1010057	0					
ANR	1010073	ReturnType	void		1010057	1					
ANR	1010074	Identifier	enqueue_request		1010057	2					
ANR	1010075	ParameterList	"char * * input_line , SingleHandler handler"		1010057	3					
ANR	1010076	Parameter	char * * input_line	382:22:10523:10539	1010057	0	True				
ANR	1010077	ParameterType	char * *		1010057	0					
ANR	1010078	Identifier	input_line		1010057	1					
ANR	1010079	Parameter	SingleHandler handler	383:7:10549:10569	1010057	1	True				
ANR	1010080	ParameterType	SingleHandler		1010057	0					
ANR	1010081	Identifier	handler		1010057	1					
ANR	1010082	CFGEntryNode	ENTRY		1010057		True				
ANR	1010083	CFGExitNode	EXIT		1010057		True				
ANR	1010084	Symbol	handler		1010057						
ANR	1010085	Symbol	NULL		1010057						
ANR	1010086	Symbol	input_line		1010057						
ANR	1010087	Function	enqueue_request_batch	388:0:10633:10816							
ANR	1010088	FunctionDef	"enqueue_request_batch (char * * input_line , BatchHandler handler , RequestCmp reqcmp)"		1010087	0					
ANR	1010089	CompoundStatement		391:0:10756:10816	1010087	0					
ANR	1010090	ExpressionStatement	"enqueue_request_impl ( input_line , NULL , handler , reqcmp )"	392:1:10759:10814	1010087	0	True				
ANR	1010091	CallExpression	"enqueue_request_impl ( input_line , NULL , handler , reqcmp )"		1010087	0					
ANR	1010092	Callee	enqueue_request_impl		1010087	0					
ANR	1010093	Identifier	enqueue_request_impl		1010087	0					
ANR	1010094	ArgumentList	input_line		1010087	1					
ANR	1010095	Argument	input_line		1010087	0					
ANR	1010096	Identifier	input_line		1010087	0					
ANR	1010097	Argument	NULL		1010087	1					
ANR	1010098	Identifier	NULL		1010087	0					
ANR	1010099	Argument	handler		1010087	2					
ANR	1010100	Identifier	handler		1010087	0					
ANR	1010101	Argument	reqcmp		1010087	3					
ANR	1010102	Identifier	reqcmp		1010087	0					
ANR	1010103	ReturnType	void		1010087	1					
ANR	1010104	Identifier	enqueue_request_batch		1010087	2					
ANR	1010105	ParameterList	"char * * input_line , BatchHandler handler , RequestCmp reqcmp"		1010087	3					
ANR	1010106	Parameter	char * * input_line	388:28:10661:10677	1010087	0	True				
ANR	1010107	ParameterType	char * *		1010087	0					
ANR	1010108	Identifier	input_line		1010087	1					
ANR	1010109	Parameter	BatchHandler handler	389:28:10708:10727	1010087	1	True				
ANR	1010110	ParameterType	BatchHandler		1010087	0					
ANR	1010111	Identifier	handler		1010087	1					
ANR	1010112	Parameter	RequestCmp reqcmp	390:7:10737:10753	1010087	2	True				
ANR	1010113	ParameterType	RequestCmp		1010087	0					
ANR	1010114	Identifier	reqcmp		1010087	1					
ANR	1010115	CFGEntryNode	ENTRY		1010087		True				
ANR	1010116	CFGExitNode	EXIT		1010087		True				
ANR	1010117	Symbol	handler		1010087						
ANR	1010118	Symbol	NULL		1010087						
ANR	1010119	Symbol	reqcmp		1010087						
ANR	1010120	Symbol	input_line		1010087						
ANR	1010121	Function	enqueue_result	400:0:11092:11406							
ANR	1010122	FunctionDef	enqueue_result (string result_line)		1010121	0					
ANR	1010123	CompoundStatement		401:0:11132:11406	1010121	0					
ANR	1010124	ExpressionStatement	pthread_mutex_lock ( & resultQueueLock )	402:1:11135:11173	1010121	0	True				
ANR	1010125	CallExpression	pthread_mutex_lock ( & resultQueueLock )		1010121	0					
ANR	1010126	Callee	pthread_mutex_lock		1010121	0					
ANR	1010127	Identifier	pthread_mutex_lock		1010121	0					
ANR	1010128	ArgumentList	& resultQueueLock		1010121	1					
ANR	1010129	Argument	& resultQueueLock		1010121	0					
ANR	1010130	UnaryOperationExpression	& resultQueueLock		1010121	0					
ANR	1010131	UnaryOperator	&		1010121	0					
ANR	1010132	Identifier	resultQueueLock		1010121	1					
ANR	1010133	IfStatement	if ( async && ! results_pending )		1010121	1					
ANR	1010134	Condition	async && ! results_pending	404:5:11181:11205	1010121	0	True				
ANR	1010135	AndExpression	async && ! results_pending		1010121	0		&&			
ANR	1010136	Identifier	async		1010121	0					
ANR	1010137	UnaryOperationExpression	! results_pending		1010121	1					
ANR	1010138	UnaryOperator	!		1010121	0					
ANR	1010139	Identifier	results_pending		1010121	1					
ANR	1010140	CompoundStatement		4:32:75:75	1010121	1					
ANR	1010141	ExpressionStatement	"gahp_printf ( ""R\\n"" )"	405:2:11212:11230	1010121	0	True				
ANR	1010142	CallExpression	"gahp_printf ( ""R\\n"" )"		1010121	0					
ANR	1010143	Callee	gahp_printf		1010121	0					
ANR	1010144	Identifier	gahp_printf		1010121	0					
ANR	1010145	ArgumentList	"""R\\n"""		1010121	1					
ANR	1010146	Argument	"""R\\n"""		1010121	0					
ANR	1010147	PrimaryExpression	"""R\\n"""		1010121	0					
ANR	1010148	ExpressionStatement	results_pending = true	406:2:11234:11256	1010121	1	True				
ANR	1010149	AssignmentExpression	results_pending = true		1010121	0		=			
ANR	1010150	Identifier	results_pending		1010121	0					
ANR	1010151	Identifier	true		1010121	1					
ANR	1010152	ExpressionStatement	resultQueue . push ( result_line )	410:1:11320:11349	1010121	2	True				
ANR	1010153	CallExpression	resultQueue . push ( result_line )		1010121	0					
ANR	1010154	Callee	resultQueue . push		1010121	0					
ANR	1010155	MemberAccess	resultQueue . push		1010121	0					
ANR	1010156	Identifier	resultQueue		1010121	0					
ANR	1010157	Identifier	push		1010121	1					
ANR	1010158	ArgumentList	result_line		1010121	1					
ANR	1010159	Argument	result_line		1010121	0					
ANR	1010160	Identifier	result_line		1010121	0					
ANR	1010161	ExpressionStatement	pthread_mutex_unlock ( & resultQueueLock )	412:1:11353:11393	1010121	3	True				
ANR	1010162	CallExpression	pthread_mutex_unlock ( & resultQueueLock )		1010121	0					
ANR	1010163	Callee	pthread_mutex_unlock		1010121	0					
ANR	1010164	Identifier	pthread_mutex_unlock		1010121	0					
ANR	1010165	ArgumentList	& resultQueueLock		1010121	1					
ANR	1010166	Argument	& resultQueueLock		1010121	0					
ANR	1010167	UnaryOperationExpression	& resultQueueLock		1010121	0					
ANR	1010168	UnaryOperator	&		1010121	0					
ANR	1010169	Identifier	resultQueueLock		1010121	1					
ANR	1010170	ReturnStatement	return ;	414:1:11398:11404	1010121	4	True				
ANR	1010171	ReturnType	void		1010121	1					
ANR	1010172	Identifier	enqueue_result		1010121	2					
ANR	1010173	ParameterList	string result_line		1010121	3					
ANR	1010174	Parameter	string result_line	400:20:11112:11129	1010121	0	True				
ANR	1010175	ParameterType	string		1010121	0					
ANR	1010176	Identifier	result_line		1010121	1					
ANR	1010177	CFGEntryNode	ENTRY		1010121		True				
ANR	1010178	CFGExitNode	EXIT		1010121		True				
ANR	1010179	Symbol	async		1010121						
ANR	1010180	Symbol	resultQueue		1010121						
ANR	1010181	Symbol	true		1010121						
ANR	1010182	Symbol	& resultQueueLock		1010121						
ANR	1010183	Symbol	results_pending		1010121						
ANR	1010184	Symbol	result_line		1010121						
ANR	1010185	Function	collect_job_ids	434:0:12389:14096							
ANR	1010186	FunctionDef	"collect_job_ids (Request * * reqlist , vector < JobIdWrapper > & jv , vector < string > & reqids)"		1010185	0					
ANR	1010187	CompoundStatement		435:26:12484:14096	1010185	0					
ANR	1010188	IfStatement	if ( reqlist == NULL )		1010185	0					
ANR	1010189	Condition	reqlist == NULL	437:4:12491:12505	1010185	0	True				
ANR	1010190	EqualityExpression	reqlist == NULL		1010185	0		==			
ANR	1010191	Identifier	reqlist		1010185	0					
ANR	1010192	Identifier	NULL		1010185	1					
ANR	1010193	CompoundStatement		3:21:23:23	1010185	1					
ANR	1010194	ExpressionStatement	"internal_error ( ""collect_job_ids called with NULL pointer\\n"" )"	438:2:12512:12572	1010185	0	True				
ANR	1010195	CallExpression	"internal_error ( ""collect_job_ids called with NULL pointer\\n"" )"		1010185	0					
ANR	1010196	Callee	internal_error		1010185	0					
ANR	1010197	Identifier	internal_error		1010185	0					
ANR	1010198	ArgumentList	"""collect_job_ids called with NULL pointer\\n"""		1010185	1					
ANR	1010199	Argument	"""collect_job_ids called with NULL pointer\\n"""		1010185	0					
ANR	1010200	PrimaryExpression	"""collect_job_ids called with NULL pointer\\n"""		1010185	0					
ANR	1010201	IfStatement	if ( reqlist [ 0 ] == NULL )		1010185	1					
ANR	1010202	Condition	reqlist [ 0 ] == NULL	440:4:12581:12598	1010185	0	True				
ANR	1010203	EqualityExpression	reqlist [ 0 ] == NULL		1010185	0		==			
ANR	1010204	ArrayIndexing	reqlist [ 0 ]		1010185	0					
ANR	1010205	Identifier	reqlist		1010185	0					
ANR	1010206	PrimaryExpression	0		1010185	1					
ANR	1010207	Identifier	NULL		1010185	1					
ANR	1010208	CompoundStatement		6:24:116:116	1010185	1					
ANR	1010209	ExpressionStatement	"internal_error ( ""collect_job_ids called with empty list\\n"" )"	441:2:12605:12663	1010185	0	True				
ANR	1010210	CallExpression	"internal_error ( ""collect_job_ids called with empty list\\n"" )"		1010185	0					
ANR	1010211	Callee	internal_error		1010185	0					
ANR	1010212	Identifier	internal_error		1010185	0					
ANR	1010213	ArgumentList	"""collect_job_ids called with empty list\\n"""		1010185	1					
ANR	1010214	Argument	"""collect_job_ids called with empty list\\n"""		1010185	0					
ANR	1010215	PrimaryExpression	"""collect_job_ids called with empty list\\n"""		1010185	0					
ANR	1010216	IdentifierDeclStatement	char * service ;	444:1:12671:12684	1010185	2	True				
ANR	1010217	IdentifierDecl	* service		1010185	0					
ANR	1010218	IdentifierDeclType	char *		1010185	0					
ANR	1010219	Identifier	service		1010185	1					
ANR	1010220	ExpressionStatement	"process_string_arg ( reqlist [ 0 ] -> input_line [ 2 ] , & service )"	445:1:12687:12744	1010185	3	True				
ANR	1010221	CallExpression	"process_string_arg ( reqlist [ 0 ] -> input_line [ 2 ] , & service )"		1010185	0					
ANR	1010222	Callee	process_string_arg		1010185	0					
ANR	1010223	Identifier	process_string_arg		1010185	0					
ANR	1010224	ArgumentList	reqlist [ 0 ] -> input_line [ 2 ]		1010185	1					
ANR	1010225	Argument	reqlist [ 0 ] -> input_line [ 2 ]		1010185	0					
ANR	1010226	ArrayIndexing	reqlist [ 0 ] -> input_line [ 2 ]		1010185	0					
ANR	1010227	PtrMemberAccess	reqlist [ 0 ] -> input_line		1010185	0					
ANR	1010228	ArrayIndexing	reqlist [ 0 ]		1010185	0					
ANR	1010229	Identifier	reqlist		1010185	0					
ANR	1010230	PrimaryExpression	0		1010185	1					
ANR	1010231	Identifier	input_line		1010185	1					
ANR	1010232	PrimaryExpression	2		1010185	1					
ANR	1010233	Argument	& service		1010185	1					
ANR	1010234	UnaryOperationExpression	& service		1010185	0					
ANR	1010235	UnaryOperator	&		1010185	0					
ANR	1010236	Identifier	service		1010185	1					
ANR	1010237	IdentifierDeclStatement	string proxy = reqlist [ 0 ] -> proxy ;	446:1:12747:12779	1010185	4	True				
ANR	1010238	IdentifierDecl	proxy = reqlist [ 0 ] -> proxy		1010185	0					
ANR	1010239	IdentifierDeclType	string		1010185	0					
ANR	1010240	Identifier	proxy		1010185	1					
ANR	1010241	AssignmentExpression	proxy = reqlist [ 0 ] -> proxy		1010185	2		=			
ANR	1010242	Identifier	proxy		1010185	0					
ANR	1010243	PtrMemberAccess	reqlist [ 0 ] -> proxy		1010185	1					
ANR	1010244	ArrayIndexing	reqlist [ 0 ]		1010185	0					
ANR	1010245	Identifier	reqlist		1010185	0					
ANR	1010246	PrimaryExpression	0		1010185	1					
ANR	1010247	Identifier	proxy		1010185	1					
ANR	1010248	ForStatement	for ( size_t j = 0 ; reqlist [ j ] != NULL ; j ++ )		1010185	5					
ANR	1010249	ForInit	size_t j = 0 ;	448:5:12787:12799	1010185	0	True				
ANR	1010250	IdentifierDeclStatement	size_t j = 0 ;		1010185	0					
ANR	1010251	IdentifierDecl	j = 0		1010185	0					
ANR	1010252	IdentifierDeclType	size_t		1010185	0					
ANR	1010253	Identifier	j		1010185	1					
ANR	1010254	AssignmentExpression	j = 0		1010185	2		=			
ANR	1010255	Identifier	j		1010185	0					
ANR	1010256	PrimaryExpression	0		1010185	1					
ANR	1010257	Condition	reqlist [ j ] != NULL	448:19:12801:12818	1010185	1	True				
ANR	1010258	EqualityExpression	reqlist [ j ] != NULL		1010185	0		!=			
ANR	1010259	ArrayIndexing	reqlist [ j ]		1010185	0					
ANR	1010260	Identifier	reqlist		1010185	0					
ANR	1010261	Identifier	j		1010185	1					
ANR	1010262	Identifier	NULL		1010185	1					
ANR	1010263	PostIncDecOperationExpression	j ++	448:39:12821:12823	1010185	2	True				
ANR	1010264	Identifier	j		1010185	0					
ANR	1010265	IncDec	++		1010185	1					
ANR	1010266	CompoundStatement		48:2:1362:1393	1010185	3					
ANR	1010267	IdentifierDeclStatement	Request * req = reqlist [ j ] ;	449:2:12830:12856	1010185	0	True				
ANR	1010268	IdentifierDecl	* req = reqlist [ j ]		1010185	0					
ANR	1010269	IdentifierDeclType	Request *		1010185	0					
ANR	1010270	Identifier	req		1010185	1					
ANR	1010271	AssignmentExpression	* req = reqlist [ j ]		1010185	2		=			
ANR	1010272	Identifier	req		1010185	0					
ANR	1010273	ArrayIndexing	reqlist [ j ]		1010185	1					
ANR	1010274	Identifier	reqlist		1010185	0					
ANR	1010275	Identifier	j		1010185	1					
ANR	1010276	IdentifierDeclStatement	char * this_service ;	453:2:12957:12976	1010185	1	True				
ANR	1010277	IdentifierDecl	* this_service		1010185	0					
ANR	1010278	IdentifierDeclType	char *		1010185	0					
ANR	1010279	Identifier	this_service		1010185	1					
ANR	1010280	ExpressionStatement	"process_string_arg ( req -> input_line [ 2 ] , & this_service )"	454:2:12980:13035	1010185	2	True				
ANR	1010281	CallExpression	"process_string_arg ( req -> input_line [ 2 ] , & this_service )"		1010185	0					
ANR	1010282	Callee	process_string_arg		1010185	0					
ANR	1010283	Identifier	process_string_arg		1010185	0					
ANR	1010284	ArgumentList	req -> input_line [ 2 ]		1010185	1					
ANR	1010285	Argument	req -> input_line [ 2 ]		1010185	0					
ANR	1010286	ArrayIndexing	req -> input_line [ 2 ]		1010185	0					
ANR	1010287	PtrMemberAccess	req -> input_line		1010185	0					
ANR	1010288	Identifier	req		1010185	0					
ANR	1010289	Identifier	input_line		1010185	1					
ANR	1010290	PrimaryExpression	2		1010185	1					
ANR	1010291	Argument	& this_service		1010185	1					
ANR	1010292	UnaryOperationExpression	& this_service		1010185	0					
ANR	1010293	UnaryOperator	&		1010185	0					
ANR	1010294	Identifier	this_service		1010185	1					
ANR	1010295	IfStatement	"if ( strcmp ( this_service , service ) != 0 )"		1010185	3					
ANR	1010296	Condition	"strcmp ( this_service , service ) != 0"	455:5:13042:13075	1010185	0	True				
ANR	1010297	EqualityExpression	"strcmp ( this_service , service ) != 0"		1010185	0		!=			
ANR	1010298	CallExpression	"strcmp ( this_service , service )"		1010185	0					
ANR	1010299	Callee	strcmp		1010185	0					
ANR	1010300	Identifier	strcmp		1010185	0					
ANR	1010301	ArgumentList	this_service		1010185	1					
ANR	1010302	Argument	this_service		1010185	0					
ANR	1010303	Identifier	this_service		1010185	0					
ANR	1010304	Argument	service		1010185	1					
ANR	1010305	Identifier	service		1010185	0					
ANR	1010306	PrimaryExpression	0		1010185	1					
ANR	1010307	CompoundStatement		21:41:593:593	1010185	1					
ANR	1010308	ExpressionStatement	"internal_error ( ""Multiple services in one request"" )"	456:3:13083:13133	1010185	0	True				
ANR	1010309	CallExpression	"internal_error ( ""Multiple services in one request"" )"		1010185	0					
ANR	1010310	Callee	internal_error		1010185	0					
ANR	1010311	Identifier	internal_error		1010185	0					
ANR	1010312	ArgumentList	"""Multiple services in one request"""		1010185	1					
ANR	1010313	Argument	"""Multiple services in one request"""		1010185	0					
ANR	1010314	PrimaryExpression	"""Multiple services in one request"""		1010185	0					
ANR	1010315	IdentifierDeclStatement	string this_proxy = req -> proxy ;	461:2:13235:13265	1010185	4	True				
ANR	1010316	IdentifierDecl	this_proxy = req -> proxy		1010185	0					
ANR	1010317	IdentifierDeclType	string		1010185	0					
ANR	1010318	Identifier	this_proxy		1010185	1					
ANR	1010319	AssignmentExpression	this_proxy = req -> proxy		1010185	2		=			
ANR	1010320	Identifier	this_proxy		1010185	0					
ANR	1010321	PtrMemberAccess	req -> proxy		1010185	1					
ANR	1010322	Identifier	req		1010185	0					
ANR	1010323	Identifier	proxy		1010185	1					
ANR	1010324	ExpressionStatement		461:33:13266:13266	1010185	5	True				
ANR	1010325	IfStatement	if ( this_proxy != proxy )		1010185	6					
ANR	1010326	Condition	this_proxy != proxy	462:5:13273:13291	1010185	0	True				
ANR	1010327	EqualityExpression	this_proxy != proxy		1010185	0		!=			
ANR	1010328	Identifier	this_proxy		1010185	0					
ANR	1010329	Identifier	proxy		1010185	1					
ANR	1010330	CompoundStatement		28:26:809:809	1010185	1					
ANR	1010331	ExpressionStatement	"internal_error ( ""Multiple proxies in one request"" )"	463:3:13299:13348	1010185	0	True				
ANR	1010332	CallExpression	"internal_error ( ""Multiple proxies in one request"" )"		1010185	0					
ANR	1010333	Callee	internal_error		1010185	0					
ANR	1010334	Identifier	internal_error		1010185	0					
ANR	1010335	ArgumentList	"""Multiple proxies in one request"""		1010185	1					
ANR	1010336	Argument	"""Multiple proxies in one request"""		1010185	0					
ANR	1010337	PrimaryExpression	"""Multiple proxies in one request"""		1010185	0					
ANR	1010338	IdentifierDeclStatement	char * reqid = NULL ;	467:2:13402:13421	1010185	7	True				
ANR	1010339	IdentifierDecl	* reqid = NULL		1010185	0					
ANR	1010340	IdentifierDeclType	char *		1010185	0					
ANR	1010341	Identifier	reqid		1010185	1					
ANR	1010342	AssignmentExpression	* reqid = NULL		1010185	2		=			
ANR	1010343	Identifier	NULL		1010185	0					
ANR	1010344	Identifier	NULL		1010185	1					
ANR	1010345	ExpressionStatement	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"	468:2:13425:13473	1010185	8	True				
ANR	1010346	CallExpression	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"		1010185	0					
ANR	1010347	Callee	process_string_arg		1010185	0					
ANR	1010348	Identifier	process_string_arg		1010185	0					
ANR	1010349	ArgumentList	req -> input_line [ 1 ]		1010185	1					
ANR	1010350	Argument	req -> input_line [ 1 ]		1010185	0					
ANR	1010351	ArrayIndexing	req -> input_line [ 1 ]		1010185	0					
ANR	1010352	PtrMemberAccess	req -> input_line		1010185	0					
ANR	1010353	Identifier	req		1010185	0					
ANR	1010354	Identifier	input_line		1010185	1					
ANR	1010355	PrimaryExpression	1		1010185	1					
ANR	1010356	Argument	& reqid		1010185	1					
ANR	1010357	UnaryOperationExpression	& reqid		1010185	0					
ANR	1010358	UnaryOperator	&		1010185	0					
ANR	1010359	Identifier	reqid		1010185	1					
ANR	1010360	IfStatement	if ( reqid == NULL )		1010185	9					
ANR	1010361	Condition	reqid == NULL	469:5:13480:13492	1010185	0	True				
ANR	1010362	EqualityExpression	reqid == NULL		1010185	0		==			
ANR	1010363	Identifier	reqid		1010185	0					
ANR	1010364	Identifier	NULL		1010185	1					
ANR	1010365	CompoundStatement		35:20:1010:1010	1010185	1					
ANR	1010366	ExpressionStatement	"internal_error ( ""request lacks reqid"" )"	470:3:13500:13537	1010185	0	True				
ANR	1010367	CallExpression	"internal_error ( ""request lacks reqid"" )"		1010185	0					
ANR	1010368	Callee	internal_error		1010185	0					
ANR	1010369	Identifier	internal_error		1010185	0					
ANR	1010370	ArgumentList	"""request lacks reqid"""		1010185	1					
ANR	1010371	Argument	"""request lacks reqid"""		1010185	0					
ANR	1010372	PrimaryExpression	"""request lacks reqid"""		1010185	0					
ANR	1010373	ExpressionStatement	reqids . push_back ( reqid )	472:2:13545:13568	1010185	10	True				
ANR	1010374	CallExpression	reqids . push_back ( reqid )		1010185	0					
ANR	1010375	Callee	reqids . push_back		1010185	0					
ANR	1010376	MemberAccess	reqids . push_back		1010185	0					
ANR	1010377	Identifier	reqids		1010185	0					
ANR	1010378	Identifier	push_back		1010185	1					
ANR	1010379	ArgumentList	reqid		1010185	1					
ANR	1010380	Argument	reqid		1010185	0					
ANR	1010381	Identifier	reqid		1010185	0					
ANR	1010382	IdentifierDeclStatement	char * jobnum_str ;	475:2:13616:13633	1010185	11	True				
ANR	1010383	IdentifierDecl	* jobnum_str		1010185	0					
ANR	1010384	IdentifierDeclType	char *		1010185	0					
ANR	1010385	Identifier	jobnum_str		1010185	1					
ANR	1010386	ExpressionStatement	"process_string_arg ( req -> input_line [ 3 ] , & jobnum_str )"	476:2:13637:13690	1010185	12	True				
ANR	1010387	CallExpression	"process_string_arg ( req -> input_line [ 3 ] , & jobnum_str )"		1010185	0					
ANR	1010388	Callee	process_string_arg		1010185	0					
ANR	1010389	Identifier	process_string_arg		1010185	0					
ANR	1010390	ArgumentList	req -> input_line [ 3 ]		1010185	1					
ANR	1010391	Argument	req -> input_line [ 3 ]		1010185	0					
ANR	1010392	ArrayIndexing	req -> input_line [ 3 ]		1010185	0					
ANR	1010393	PtrMemberAccess	req -> input_line		1010185	0					
ANR	1010394	Identifier	req		1010185	0					
ANR	1010395	Identifier	input_line		1010185	1					
ANR	1010396	PrimaryExpression	3		1010185	1					
ANR	1010397	Argument	& jobnum_str		1010185	1					
ANR	1010398	UnaryOperationExpression	& jobnum_str		1010185	0					
ANR	1010399	UnaryOperator	&		1010185	0					
ANR	1010400	Identifier	jobnum_str		1010185	1					
ANR	1010401	IfStatement	if ( jobnum_str == NULL )		1010185	13					
ANR	1010402	Condition	jobnum_str == NULL	477:6:13698:13715	1010185	0	True				
ANR	1010403	EqualityExpression	jobnum_str == NULL		1010185	0		==			
ANR	1010404	Identifier	jobnum_str		1010185	0					
ANR	1010405	Identifier	NULL		1010185	1					
ANR	1010406	CompoundStatement		43:26:1233:1233	1010185	1					
ANR	1010407	ThrowStatement	"throw runtime_error ( ""handling of all jobs (NULL jobnum) not supported"" ) ;"	478:3:13723:13794	1010185	0	True				
ANR	1010408	CallExpression	"runtime_error ( ""handling of all jobs (NULL jobnum) not supported"" )"		1010185	0					
ANR	1010409	Callee	runtime_error		1010185	0					
ANR	1010410	Identifier	runtime_error		1010185	0					
ANR	1010411	ArgumentList	"""handling of all jobs (NULL jobnum) not supported"""		1010185	1					
ANR	1010412	Argument	"""handling of all jobs (NULL jobnum) not supported"""		1010185	0					
ANR	1010413	PrimaryExpression	"""handling of all jobs (NULL jobnum) not supported"""		1010185	0					
ANR	1010414	IdentifierDeclStatement	int jobnum = atoi ( jobnum_str ) ;	482:2:13847:13878	1010185	14	True				
ANR	1010415	IdentifierDecl	jobnum = atoi ( jobnum_str )		1010185	0					
ANR	1010416	IdentifierDeclType	int		1010185	0					
ANR	1010417	Identifier	jobnum		1010185	1					
ANR	1010418	AssignmentExpression	jobnum = atoi ( jobnum_str )		1010185	2		=			
ANR	1010419	Identifier	jobnum		1010185	0					
ANR	1010420	CallExpression	atoi ( jobnum_str )		1010185	1					
ANR	1010421	Callee	atoi		1010185	0					
ANR	1010422	Identifier	atoi		1010185	0					
ANR	1010423	ArgumentList	jobnum_str		1010185	1					
ANR	1010424	Argument	jobnum_str		1010185	0					
ANR	1010425	Identifier	jobnum_str		1010185	0					
ANR	1010426	ForStatement	for ( int i = 0 ; i < jobnum ; i ++ )		1010185	15					
ANR	1010427	ForInit	int i = 0 ;	483:8:13888:13897	1010185	0	True				
ANR	1010428	IdentifierDeclStatement	int i = 0 ;		1010185	0					
ANR	1010429	IdentifierDecl	i = 0		1010185	0					
ANR	1010430	IdentifierDeclType	int		1010185	0					
ANR	1010431	Identifier	i		1010185	1					
ANR	1010432	AssignmentExpression	i = 0		1010185	2		=			
ANR	1010433	Identifier	i		1010185	0					
ANR	1010434	PrimaryExpression	0		1010185	1					
ANR	1010435	Condition	i < jobnum	483:19:13899:13908	1010185	1	True				
ANR	1010436	RelationalExpression	i < jobnum		1010185	0		<			
ANR	1010437	Identifier	i		1010185	0					
ANR	1010438	Identifier	jobnum		1010185	1					
ANR	1010439	PostIncDecOperationExpression	i ++	483:31:13911:13913	1010185	2	True				
ANR	1010440	Identifier	i		1010185	0					
ANR	1010441	IncDec	++		1010185	1					
ANR	1010442	CompoundStatement		50:3:1436:1448	1010185	3					
ANR	1010443	IdentifierDeclStatement	char * jobid ;	484:3:13921:13933	1010185	0	True				
ANR	1010444	IdentifierDecl	* jobid		1010185	0					
ANR	1010445	IdentifierDeclType	char *		1010185	0					
ANR	1010446	Identifier	jobid		1010185	1					
ANR	1010447	ExpressionStatement	"process_string_arg ( req -> input_line [ i + 4 ] , & jobid )"	485:3:13938:13988	1010185	1	True				
ANR	1010448	CallExpression	"process_string_arg ( req -> input_line [ i + 4 ] , & jobid )"		1010185	0					
ANR	1010449	Callee	process_string_arg		1010185	0					
ANR	1010450	Identifier	process_string_arg		1010185	0					
ANR	1010451	ArgumentList	req -> input_line [ i + 4 ]		1010185	1					
ANR	1010452	Argument	req -> input_line [ i + 4 ]		1010185	0					
ANR	1010453	ArrayIndexing	req -> input_line [ i + 4 ]		1010185	0					
ANR	1010454	PtrMemberAccess	req -> input_line		1010185	0					
ANR	1010455	Identifier	req		1010185	0					
ANR	1010456	Identifier	input_line		1010185	1					
ANR	1010457	AdditiveExpression	i + 4		1010185	1		+			
ANR	1010458	Identifier	i		1010185	0					
ANR	1010459	PrimaryExpression	4		1010185	1					
ANR	1010460	Argument	& jobid		1010185	1					
ANR	1010461	UnaryOperationExpression	& jobid		1010185	0					
ANR	1010462	UnaryOperator	&		1010185	0					
ANR	1010463	Identifier	jobid		1010185	1					
ANR	1010464	Statement	jv	486:3:13993:13994	1010185	2	True				
ANR	1010465	Statement	.	486:5:13995:13995	1010185	3	True				
ANR	1010466	Statement	push_back	486:6:13996:14004	1010185	4	True				
ANR	1010467	Statement	(	486:15:14005:14005	1010185	5	True				
ANR	1010468	Statement	JobIdWrapper	486:16:14006:14017	1010185	6	True				
ANR	1010469	Statement	(	486:28:14018:14018	1010185	7	True				
ANR	1010470	Statement	jobid	486:29:14019:14023	1010185	8	True				
ANR	1010471	Statement	","	486:34:14024:14024	1010185	9	True				
ANR	1010472	Statement	service	487:11:14037:14043	1010185	10	True				
ANR	1010473	Statement	","	487:18:14044:14044	1010185	11	True				
ANR	1010474	Statement	vector	488:11:14057:14062	1010185	12	True				
ANR	1010475	Statement	<	488:17:14063:14063	1010185	13	True				
ANR	1010476	Statement	JobPropertyWrapper	488:18:14064:14081	1010185	14	True				
ANR	1010477	Statement	>	488:36:14082:14082	1010185	15	True				
ANR	1010478	Statement	(	488:37:14083:14083	1010185	16	True				
ANR	1010479	Statement	)	488:38:14084:14084	1010185	17	True				
ANR	1010480	Statement	)	488:39:14085:14085	1010185	18	True				
ANR	1010481	Statement	)	488:40:14086:14086	1010185	19	True				
ANR	1010482	ExpressionStatement		488:41:14087:14087	1010185	20	True				
ANR	1010483	ReturnType	void		1010185	1					
ANR	1010484	Identifier	collect_job_ids		1010185	2					
ANR	1010485	ParameterList	"Request * * reqlist , vector < JobIdWrapper > & jv , vector < string > & reqids"		1010185	3					
ANR	1010486	Parameter	Request * * reqlist	434:21:12410:12427	1010185	0	True				
ANR	1010487	ParameterType	Request * *		1010185	0					
ANR	1010488	Identifier	reqlist		1010185	1					
ANR	1010489	Parameter	vector < JobIdWrapper > & jv	434:41:12430:12454	1010185	1	True				
ANR	1010490	ParameterType	vector < JobIdWrapper > &		1010185	0					
ANR	1010491	Identifier	jv		1010185	1					
ANR	1010492	Parameter	vector < string > & reqids	435:1:12459:12481	1010185	2	True				
ANR	1010493	ParameterType	vector < string > &		1010185	0					
ANR	1010494	Identifier	reqids		1010185	1					
ANR	1010495	CFGEntryNode	ENTRY		1010185		True				
ANR	1010496	CFGExitNode	EXIT		1010185		True				
ANR	1010497	CFGExceptionNode	EXCEPTION		1010185		True				
ANR	1010498	Symbol	& reqid		1010185						
ANR	1010499	Symbol	jobnum		1010185						
ANR	1010500	Symbol	* req		1010185						
ANR	1010501	Symbol	* * * reqlist		1010185						
ANR	1010502	Symbol	jv		1010185						
ANR	1010503	Symbol	this_service		1010185						
ANR	1010504	Symbol	* * reqlist		1010185						
ANR	1010505	Symbol	reqid		1010185						
ANR	1010506	Symbol	& jobid		1010185						
ANR	1010507	Symbol	jobid		1010185						
ANR	1010508	Symbol	jobnum_str		1010185						
ANR	1010509	Symbol	this_proxy		1010185						
ANR	1010510	Symbol	reqids		1010185						
ANR	1010511	Symbol	reqlist [ 0 ] -> proxy		1010185						
ANR	1010512	Symbol	req -> input_line		1010185						
ANR	1010513	Symbol	* req -> input_line		1010185						
ANR	1010514	Symbol	* reqlist [ 0 ] -> input_line		1010185						
ANR	1010515	Symbol	req		1010185						
ANR	1010516	Symbol	strcmp		1010185						
ANR	1010517	Symbol	req -> proxy		1010185						
ANR	1010518	Symbol	atoi		1010185						
ANR	1010519	Symbol	NULL		1010185						
ANR	1010520	Symbol	reqlist [ 0 ] -> input_line		1010185						
ANR	1010521	Symbol	i		1010185						
ANR	1010522	Symbol	& service		1010185						
ANR	1010523	Symbol	j		1010185						
ANR	1010524	Symbol	& this_service		1010185						
ANR	1010525	Symbol	& jobnum_str		1010185						
ANR	1010526	Symbol	* reqlist		1010185						
ANR	1010527	Symbol	proxy		1010185						
ANR	1010528	Symbol	* * req		1010185						
ANR	1010529	Symbol	* i		1010185						
ANR	1010530	Symbol	* j		1010185						
ANR	1010531	Symbol	reqlist		1010185						
ANR	1010532	Symbol	service		1010185						
ANR	1010533	Function	cmp_request_register	499:0:14447:14796							
ANR	1010534	FunctionDef	"cmp_request_register (const vector < Request * > & list , const Request * b)"		1010533	0					
ANR	1010535	CompoundStatement		499:76:14523:14796	1010533	0					
ANR	1010536	IdentifierDeclStatement	const Request * a = list . front ( ) ;	503:1:14617:14648	1010533	0	True				
ANR	1010537	IdentifierDecl	* a = list . front ( )		1010533	0					
ANR	1010538	IdentifierDeclType	const Request *		1010533	0					
ANR	1010539	Identifier	a		1010533	1					
ANR	1010540	AssignmentExpression	* a = list . front ( )		1010533	2		=			
ANR	1010541	Identifier	a		1010533	0					
ANR	1010542	CallExpression	list . front ( )		1010533	1					
ANR	1010543	Callee	list . front		1010533	0					
ANR	1010544	MemberAccess	list . front		1010533	0					
ANR	1010545	Identifier	list		1010533	0					
ANR	1010546	Identifier	front		1010533	1					
ANR	1010547	ArgumentList			1010533	1					
ANR	1010548	IfStatement	if ( list . size ( ) >= 10 )		1010533	1					
ANR	1010549	Condition	list . size ( ) >= 10	504:6:14656:14672	1010533	0	True				
ANR	1010550	RelationalExpression	list . size ( ) >= 10		1010533	0		>=			
ANR	1010551	CallExpression	list . size ( )		1010533	0					
ANR	1010552	Callee	list . size		1010533	0					
ANR	1010553	MemberAccess	list . size		1010533	0					
ANR	1010554	Identifier	list		1010533	0					
ANR	1010555	Identifier	size		1010533	1					
ANR	1010556	ArgumentList			1010533	1					
ANR	1010557	PrimaryExpression	10		1010533	1					
ANR	1010558	CompoundStatement		6:26:152:152	1010533	1					
ANR	1010559	ReturnStatement	return false ;	505:2:14680:14692	1010533	0	True				
ANR	1010560	Identifier	false		1010533	0					
ANR	1010561	IfStatement	"if ( strcmp ( a -> input_line [ 2 ] , b -> input_line [ 2 ] ) )"		1010533	2					
ANR	1010562	Condition	"strcmp ( a -> input_line [ 2 ] , b -> input_line [ 2 ] )"	507:6:14703:14746	1010533	0	True				
ANR	1010563	CallExpression	"strcmp ( a -> input_line [ 2 ] , b -> input_line [ 2 ] )"		1010533	0					
ANR	1010564	Callee	strcmp		1010533	0					
ANR	1010565	Identifier	strcmp		1010533	0					
ANR	1010566	ArgumentList	a -> input_line [ 2 ]		1010533	1					
ANR	1010567	Argument	a -> input_line [ 2 ]		1010533	0					
ANR	1010568	ArrayIndexing	a -> input_line [ 2 ]		1010533	0					
ANR	1010569	PtrMemberAccess	a -> input_line		1010533	0					
ANR	1010570	Identifier	a		1010533	0					
ANR	1010571	Identifier	input_line		1010533	1					
ANR	1010572	PrimaryExpression	2		1010533	1					
ANR	1010573	Argument	b -> input_line [ 2 ]		1010533	1					
ANR	1010574	ArrayIndexing	b -> input_line [ 2 ]		1010533	0					
ANR	1010575	PtrMemberAccess	b -> input_line		1010533	0					
ANR	1010576	Identifier	b		1010533	0					
ANR	1010577	Identifier	input_line		1010533	1					
ANR	1010578	PrimaryExpression	2		1010533	1					
ANR	1010579	CompoundStatement		9:53:226:226	1010533	1					
ANR	1010580	ReturnStatement	return false ;	508:2:14754:14766	1010533	0	True				
ANR	1010581	Identifier	false		1010533	0					
ANR	1010582	ElseStatement	else		1010533	0					
ANR	1010583	CompoundStatement		11:8:252:252	1010533	0					
ANR	1010584	ReturnStatement	return true ;	510:2:14780:14791	1010533	0	True				
ANR	1010585	Identifier	true		1010533	0					
ANR	1010586	ReturnType	bool		1010533	1					
ANR	1010587	Identifier	cmp_request_register		1010533	2					
ANR	1010588	ParameterList	"const vector < Request * > & list , const Request * b"		1010533	3					
ANR	1010589	Parameter	const vector < Request * > & list	499:26:14473:14501	1010533	0	True				
ANR	1010590	ParameterType	const vector < Request * > &		1010533	0					
ANR	1010591	Identifier	list		1010533	1					
ANR	1010592	Parameter	const Request * b	499:57:14504:14520	1010533	1	True				
ANR	1010593	ParameterType	const Request *		1010533	0					
ANR	1010594	Identifier	b		1010533	1					
ANR	1010595	CFGEntryNode	ENTRY		1010533		True				
ANR	1010596	CFGExitNode	EXIT		1010533		True				
ANR	1010597	Symbol	strcmp		1010533						
ANR	1010598	Symbol	a		1010533						
ANR	1010599	Symbol	b		1010533						
ANR	1010600	Symbol	list . front		1010533						
ANR	1010601	Symbol	b -> input_line		1010533						
ANR	1010602	Symbol	false		1010533						
ANR	1010603	Symbol	* * b		1010533						
ANR	1010604	Symbol	* * a		1010533						
ANR	1010605	Symbol	* a		1010533						
ANR	1010606	Symbol	list		1010533						
ANR	1010607	Symbol	* b		1010533						
ANR	1010608	Symbol	list . size		1010533						
ANR	1010609	Symbol	true		1010533						
ANR	1010610	Symbol	a -> input_line		1010533						
ANR	1010611	Symbol	* b -> input_line		1010533						
ANR	1010612	Symbol	* a -> input_line		1010533						
ANR	1010613	Function	cmp_request_single	521:0:15200:15487							
ANR	1010614	FunctionDef	"cmp_request_single (const vector < Request * > & list , const Request * b)"		1010613	0					
ANR	1010615	CompoundStatement		521:76:15276:15487	1010613	0					
ANR	1010616	IdentifierDeclStatement	const Request * a = list . front ( ) ;	522:1:15279:15310	1010613	0	True				
ANR	1010617	IdentifierDecl	* a = list . front ( )		1010613	0					
ANR	1010618	IdentifierDeclType	const Request *		1010613	0					
ANR	1010619	Identifier	a		1010613	1					
ANR	1010620	AssignmentExpression	* a = list . front ( )		1010613	2		=			
ANR	1010621	Identifier	a		1010613	0					
ANR	1010622	CallExpression	list . front ( )		1010613	1					
ANR	1010623	Callee	list . front		1010613	0					
ANR	1010624	MemberAccess	list . front		1010613	0					
ANR	1010625	Identifier	list		1010613	0					
ANR	1010626	Identifier	front		1010613	1					
ANR	1010627	ArgumentList			1010613	1					
ANR	1010628	IfStatement	"if ( strcmp ( a -> input_line [ 3 ] , ""1"" ) || strcmp ( b -> input_line [ 3 ] , ""1"" ) || strcmp ( a -> input_line [ 2 ] , b -> input_line [ 2 ] ) )"		1010613	1					
ANR	1010629	Condition	"strcmp ( a -> input_line [ 3 ] , ""1"" ) || strcmp ( b -> input_line [ 3 ] , ""1"" ) || strcmp ( a -> input_line [ 2 ] , b -> input_line [ 2 ] )"	523:6:15318:15437	1010613	0	True				
ANR	1010630	OrExpression	"strcmp ( a -> input_line [ 3 ] , ""1"" ) || strcmp ( b -> input_line [ 3 ] , ""1"" ) || strcmp ( a -> input_line [ 2 ] , b -> input_line [ 2 ] )"		1010613	0		||			
ANR	1010631	CallExpression	"strcmp ( a -> input_line [ 3 ] , ""1"" )"		1010613	0					
ANR	1010632	Callee	strcmp		1010613	0					
ANR	1010633	Identifier	strcmp		1010613	0					
ANR	1010634	ArgumentList	a -> input_line [ 3 ]		1010613	1					
ANR	1010635	Argument	a -> input_line [ 3 ]		1010613	0					
ANR	1010636	ArrayIndexing	a -> input_line [ 3 ]		1010613	0					
ANR	1010637	PtrMemberAccess	a -> input_line		1010613	0					
ANR	1010638	Identifier	a		1010613	0					
ANR	1010639	Identifier	input_line		1010613	1					
ANR	1010640	PrimaryExpression	3		1010613	1					
ANR	1010641	Argument	"""1"""		1010613	1					
ANR	1010642	PrimaryExpression	"""1"""		1010613	0					
ANR	1010643	OrExpression	"strcmp ( b -> input_line [ 3 ] , ""1"" ) || strcmp ( a -> input_line [ 2 ] , b -> input_line [ 2 ] )"		1010613	1		||			
ANR	1010644	CallExpression	"strcmp ( b -> input_line [ 3 ] , ""1"" )"		1010613	0					
ANR	1010645	Callee	strcmp		1010613	0					
ANR	1010646	Identifier	strcmp		1010613	0					
ANR	1010647	ArgumentList	b -> input_line [ 3 ]		1010613	1					
ANR	1010648	Argument	b -> input_line [ 3 ]		1010613	0					
ANR	1010649	ArrayIndexing	b -> input_line [ 3 ]		1010613	0					
ANR	1010650	PtrMemberAccess	b -> input_line		1010613	0					
ANR	1010651	Identifier	b		1010613	0					
ANR	1010652	Identifier	input_line		1010613	1					
ANR	1010653	PrimaryExpression	3		1010613	1					
ANR	1010654	Argument	"""1"""		1010613	1					
ANR	1010655	PrimaryExpression	"""1"""		1010613	0					
ANR	1010656	CallExpression	"strcmp ( a -> input_line [ 2 ] , b -> input_line [ 2 ] )"		1010613	1					
ANR	1010657	Callee	strcmp		1010613	0					
ANR	1010658	Identifier	strcmp		1010613	0					
ANR	1010659	ArgumentList	a -> input_line [ 2 ]		1010613	1					
ANR	1010660	Argument	a -> input_line [ 2 ]		1010613	0					
ANR	1010661	ArrayIndexing	a -> input_line [ 2 ]		1010613	0					
ANR	1010662	PtrMemberAccess	a -> input_line		1010613	0					
ANR	1010663	Identifier	a		1010613	0					
ANR	1010664	Identifier	input_line		1010613	1					
ANR	1010665	PrimaryExpression	2		1010613	1					
ANR	1010666	Argument	b -> input_line [ 2 ]		1010613	1					
ANR	1010667	ArrayIndexing	b -> input_line [ 2 ]		1010613	0					
ANR	1010668	PtrMemberAccess	b -> input_line		1010613	0					
ANR	1010669	Identifier	b		1010613	0					
ANR	1010670	Identifier	input_line		1010613	1					
ANR	1010671	PrimaryExpression	2		1010613	1					
ANR	1010672	CompoundStatement		5:50:164:164	1010613	1					
ANR	1010673	ReturnStatement	return false ;	526:2:15445:15457	1010613	0	True				
ANR	1010674	Identifier	false		1010613	0					
ANR	1010675	ElseStatement	else		1010613	0					
ANR	1010676	CompoundStatement		7:8:190:190	1010613	0					
ANR	1010677	ReturnStatement	return true ;	528:2:15471:15482	1010613	0	True				
ANR	1010678	Identifier	true		1010613	0					
ANR	1010679	ReturnType	bool		1010613	1					
ANR	1010680	Identifier	cmp_request_single		1010613	2					
ANR	1010681	ParameterList	"const vector < Request * > & list , const Request * b"		1010613	3					
ANR	1010682	Parameter	const vector < Request * > & list	521:25:15225:15253	1010613	0	True				
ANR	1010683	ParameterType	const vector < Request * > &		1010613	0					
ANR	1010684	Identifier	list		1010613	1					
ANR	1010685	Parameter	const Request * b	521:56:15256:15272	1010613	1	True				
ANR	1010686	ParameterType	const Request *		1010613	0					
ANR	1010687	Identifier	b		1010613	1					
ANR	1010688	CFGEntryNode	ENTRY		1010613		True				
ANR	1010689	CFGExitNode	EXIT		1010613		True				
ANR	1010690	Symbol	strcmp		1010613						
ANR	1010691	Symbol	a		1010613						
ANR	1010692	Symbol	b		1010613						
ANR	1010693	Symbol	list . front		1010613						
ANR	1010694	Symbol	b -> input_line		1010613						
ANR	1010695	Symbol	false		1010613						
ANR	1010696	Symbol	* * b		1010613						
ANR	1010697	Symbol	* * a		1010613						
ANR	1010698	Symbol	* a		1010613						
ANR	1010699	Symbol	list		1010613						
ANR	1010700	Symbol	* b		1010613						
ANR	1010701	Symbol	true		1010613						
ANR	1010702	Symbol	* a -> input_line		1010613						
ANR	1010703	Symbol	* b -> input_line		1010613						
ANR	1010704	Symbol	a -> input_line		1010613						
ANR	1010705	Function	handle_initialize_from_file	537:0:15769:16471							
ANR	1010706	FunctionDef	handle_initialize_from_file (char * * input_line)		1010705	0					
ANR	1010707	CompoundStatement		538:0:15820:16471	1010705	0					
ANR	1010708	IdentifierDeclStatement	char * cert ;	539:1:15823:15833	1010705	0	True				
ANR	1010709	IdentifierDecl	* cert		1010705	0					
ANR	1010710	IdentifierDeclType	char *		1010705	0					
ANR	1010711	Identifier	cert		1010705	1					
ANR	1010712	IdentifierDeclStatement	AbsCreamProxy * cp = NULL ;	540:1:15836:15860	1010705	1	True				
ANR	1010713	IdentifierDecl	* cp = NULL		1010705	0					
ANR	1010714	IdentifierDeclType	AbsCreamProxy *		1010705	0					
ANR	1010715	Identifier	cp		1010705	1					
ANR	1010716	AssignmentExpression	* cp = NULL		1010705	2		=			
ANR	1010717	Identifier	NULL		1010705	0					
ANR	1010718	Identifier	NULL		1010705	1					
ANR	1010719	IfStatement	if ( count_args ( input_line ) != 2 )		1010705	2					
ANR	1010720	Condition	count_args ( input_line ) != 2	542:6:15870:15897	1010705	0	True				
ANR	1010721	EqualityExpression	count_args ( input_line ) != 2		1010705	0		!=			
ANR	1010722	CallExpression	count_args ( input_line )		1010705	0					
ANR	1010723	Callee	count_args		1010705	0					
ANR	1010724	Identifier	count_args		1010705	0					
ANR	1010725	ArgumentList	input_line		1010705	1					
ANR	1010726	Argument	input_line		1010705	0					
ANR	1010727	Identifier	input_line		1010705	0					
ANR	1010728	PrimaryExpression	2		1010705	1					
ANR	1010729	CompoundStatement		5:37:80:80	1010705	1					
ANR	1010730	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	543:2:15905:15926	1010705	0	True				
ANR	1010731	CallExpression	HANDLE_SYNTAX_ERROR ( )		1010705	0					
ANR	1010732	Callee	HANDLE_SYNTAX_ERROR		1010705	0					
ANR	1010733	Identifier	HANDLE_SYNTAX_ERROR		1010705	0					
ANR	1010734	ArgumentList			1010705	1					
ANR	1010735	ExpressionStatement	"process_string_arg ( input_line [ 1 ] , & cert )"	546:1:15933:15975	1010705	3	True				
ANR	1010736	CallExpression	"process_string_arg ( input_line [ 1 ] , & cert )"		1010705	0					
ANR	1010737	Callee	process_string_arg		1010705	0					
ANR	1010738	Identifier	process_string_arg		1010705	0					
ANR	1010739	ArgumentList	input_line [ 1 ]		1010705	1					
ANR	1010740	Argument	input_line [ 1 ]		1010705	0					
ANR	1010741	ArrayIndexing	input_line [ 1 ]		1010705	0					
ANR	1010742	Identifier	input_line		1010705	0					
ANR	1010743	PrimaryExpression	1		1010705	1					
ANR	1010744	Argument	& cert		1010705	1					
ANR	1010745	UnaryOperationExpression	& cert		1010705	0					
ANR	1010746	UnaryOperator	&		1010705	0					
ANR	1010747	Identifier	cert		1010705	1					
ANR	1010748	ExpressionStatement	active_proxy = cert	548:1:15979:15998	1010705	4	True				
ANR	1010749	AssignmentExpression	active_proxy = cert		1010705	0		=			
ANR	1010750	Identifier	active_proxy		1010705	0					
ANR	1010751	Identifier	cert		1010705	1					
ANR	1010752	TryStatement	try		1010705	5					
ANR	1010753	CompoundStatement		13:5:185:185	1010705	0					
ANR	1010754	ExpressionStatement	"cp = CreamProxyFactory :: make_CreamProxyDelegate ( ""XXX"" , DEFAULT_TIMEOUT )"		1010705	0					
ANR	1010755	AssignmentExpression	"cp = CreamProxyFactory :: make_CreamProxyDelegate ( ""XXX"" , DEFAULT_TIMEOUT )"		1010705	0		=			
ANR	1010756	Identifier	cp		1010705	0					
ANR	1010757	CallExpression	"CreamProxyFactory :: make_CreamProxyDelegate ( ""XXX"" , DEFAULT_TIMEOUT )"		1010705	1					
ANR	1010758	Callee	CreamProxyFactory :: make_CreamProxyDelegate		1010705	0					
ANR	1010759	Identifier	CreamProxyFactory :: make_CreamProxyDelegate		1010705	0					
ANR	1010760	ArgumentList	"""XXX"""		1010705	1					
ANR	1010761	Argument	"""XXX"""		1010705	0					
ANR	1010762	PrimaryExpression	"""XXX"""		1010705	0					
ANR	1010763	Argument	DEFAULT_TIMEOUT		1010705	1					
ANR	1010764	Identifier	DEFAULT_TIMEOUT		1010705	0					
ANR	1010765	ExpressionStatement	check_for_factory_error ( cp )		1010705	1					
ANR	1010766	CallExpression	check_for_factory_error ( cp )		1010705	0					
ANR	1010767	Callee	check_for_factory_error		1010705	0					
ANR	1010768	Identifier	check_for_factory_error		1010705	0					
ANR	1010769	ArgumentList	cp		1010705	1					
ANR	1010770	Argument	cp		1010705	0					
ANR	1010771	Identifier	cp		1010705	0					
ANR	1010772	ExpressionStatement	cp -> setCredential ( cert )		1010705	2					
ANR	1010773	CallExpression	cp -> setCredential ( cert )		1010705	0					
ANR	1010774	Callee	cp -> setCredential		1010705	0					
ANR	1010775	PtrMemberAccess	cp -> setCredential		1010705	0					
ANR	1010776	Identifier	cp		1010705	0					
ANR	1010777	Identifier	setCredential		1010705	1					
ANR	1010778	ArgumentList	cert		1010705	1					
ANR	1010779	Argument	cert		1010705	0					
ANR	1010780	Identifier	cert		1010705	0					
ANR	1010781	Statement	delete		1010705	3					
ANR	1010782	ExpressionStatement	cp		1010705	4					
ANR	1010783	Identifier	cp		1010705	0					
ANR	1010784	CatchList			1010705	1					
ANR	1010785	CatchStatement	catch ( std :: exception & ex )		1010705	0					
ANR	1010786	Identifier	ex		1010705	0					
ANR	1010787	CompoundStatement		20:29:483:483	1010705	1					
ANR	1010788	Statement	delete	558:2:16308:16313	1010705	0	True				
ANR	1010789	ExpressionStatement	cp	558:9:16315:16317	1010705	1	True				
ANR	1010790	Identifier	cp		1010705	0					
ANR	1010791	ExpressionStatement	"gahp_printf ( ""E\\n"" )"	559:2:16321:16339	1010705	2	True				
ANR	1010792	CallExpression	"gahp_printf ( ""E\\n"" )"		1010705	0					
ANR	1010793	Callee	gahp_printf		1010705	0					
ANR	1010794	Identifier	gahp_printf		1010705	0					
ANR	1010795	ArgumentList	"""E\\n"""		1010705	1					
ANR	1010796	Argument	"""E\\n"""		1010705	0					
ANR	1010797	PrimaryExpression	"""E\\n"""		1010705	0					
ANR	1010798	ExpressionStatement	free_args ( input_line )	560:2:16343:16364	1010705	3	True				
ANR	1010799	CallExpression	free_args ( input_line )		1010705	0					
ANR	1010800	Callee	free_args		1010705	0					
ANR	1010801	Identifier	free_args		1010705	0					
ANR	1010802	ArgumentList	input_line		1010705	1					
ANR	1010803	Argument	input_line		1010705	0					
ANR	1010804	Identifier	input_line		1010705	0					
ANR	1010805	ReturnStatement	return 1 ;	562:2:16371:16379	1010705	4	True				
ANR	1010806	PrimaryExpression	1		1010705	0					
ANR	1010807	ExpressionStatement	initialized = true	565:1:16386:16404	1010705	6	True				
ANR	1010808	AssignmentExpression	initialized = true		1010705	0		=			
ANR	1010809	Identifier	initialized		1010705	0					
ANR	1010810	Identifier	true		1010705	1					
ANR	1010811	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	566:1:16412:16430	1010705	7	True				
ANR	1010812	CallExpression	"gahp_printf ( ""S\\n"" )"		1010705	0					
ANR	1010813	Callee	gahp_printf		1010705	0					
ANR	1010814	Identifier	gahp_printf		1010705	0					
ANR	1010815	ArgumentList	"""S\\n"""		1010705	1					
ANR	1010816	Argument	"""S\\n"""		1010705	0					
ANR	1010817	PrimaryExpression	"""S\\n"""		1010705	0					
ANR	1010818	ExpressionStatement	free_args ( input_line )	568:1:16435:16456	1010705	8	True				
ANR	1010819	CallExpression	free_args ( input_line )		1010705	0					
ANR	1010820	Callee	free_args		1010705	0					
ANR	1010821	Identifier	free_args		1010705	0					
ANR	1010822	ArgumentList	input_line		1010705	1					
ANR	1010823	Argument	input_line		1010705	0					
ANR	1010824	Identifier	input_line		1010705	0					
ANR	1010825	ReturnStatement	return 0 ;	570:1:16461:16469	1010705	9	True				
ANR	1010826	PrimaryExpression	0		1010705	0					
ANR	1010827	ReturnType	int		1010705	1					
ANR	1010828	Identifier	handle_initialize_from_file		1010705	2					
ANR	1010829	ParameterList	char * * input_line		1010705	3					
ANR	1010830	Parameter	char * * input_line	537:32:15801:15817	1010705	0	True				
ANR	1010831	ParameterType	char * *		1010705	0					
ANR	1010832	Identifier	input_line		1010705	1					
ANR	1010833	CFGEntryNode	ENTRY		1010705		True				
ANR	1010834	CFGExitNode	EXIT		1010705		True				
ANR	1010835	CFGErrorNode	ERROR		1010705		True				
ANR	1010836	Symbol	active_proxy		1010705						
ANR	1010837	Symbol	* input_line		1010705						
ANR	1010838	Symbol	NULL		1010705						
ANR	1010839	Symbol	& cert		1010705						
ANR	1010840	Symbol	true		1010705						
ANR	1010841	Symbol	count_args		1010705						
ANR	1010842	Symbol	initialized		1010705						
ANR	1010843	Symbol	input_line		1010705						
ANR	1010844	Symbol	cert		1010705						
ANR	1010845	Symbol	cp		1010705						
ANR	1010846	Function	handle_cream_delegate	577:0:16693:16900							
ANR	1010847	FunctionDef	handle_cream_delegate (char * * input_line)		1010846	0					
ANR	1010848	CompoundStatement		578:0:16740:16900	1010846	0					
ANR	1010849	IfStatement	if ( count_args ( input_line ) != 4 )		1010846	0					
ANR	1010850	Condition	count_args ( input_line ) != 4	579:6:16748:16776	1010846	0	True				
ANR	1010851	EqualityExpression	count_args ( input_line ) != 4		1010846	0		!=			
ANR	1010852	CallExpression	count_args ( input_line )		1010846	0					
ANR	1010853	Callee	count_args		1010846	0					
ANR	1010854	Identifier	count_args		1010846	0					
ANR	1010855	ArgumentList	input_line		1010846	1					
ANR	1010856	Argument	input_line		1010846	0					
ANR	1010857	Identifier	input_line		1010846	0					
ANR	1010858	PrimaryExpression	4		1010846	1					
ANR	1010859	CompoundStatement		2:38:39:39	1010846	1					
ANR	1010860	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	580:2:16784:16805	1010846	0	True				
ANR	1010861	CallExpression	HANDLE_SYNTAX_ERROR ( )		1010846	0					
ANR	1010862	Callee	HANDLE_SYNTAX_ERROR		1010846	0					
ANR	1010863	Identifier	HANDLE_SYNTAX_ERROR		1010846	0					
ANR	1010864	ArgumentList			1010846	1					
ANR	1010865	ExpressionStatement	"enqueue_request ( input_line , thread_cream_delegate )"	583:1:16812:16864	1010846	1	True				
ANR	1010866	CallExpression	"enqueue_request ( input_line , thread_cream_delegate )"		1010846	0					
ANR	1010867	Callee	enqueue_request		1010846	0					
ANR	1010868	Identifier	enqueue_request		1010846	0					
ANR	1010869	ArgumentList	input_line		1010846	1					
ANR	1010870	Argument	input_line		1010846	0					
ANR	1010871	Identifier	input_line		1010846	0					
ANR	1010872	Argument	thread_cream_delegate		1010846	1					
ANR	1010873	Identifier	thread_cream_delegate		1010846	0					
ANR	1010874	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	585:1:16868:16886	1010846	2	True				
ANR	1010875	CallExpression	"gahp_printf ( ""S\\n"" )"		1010846	0					
ANR	1010876	Callee	gahp_printf		1010846	0					
ANR	1010877	Identifier	gahp_printf		1010846	0					
ANR	1010878	ArgumentList	"""S\\n"""		1010846	1					
ANR	1010879	Argument	"""S\\n"""		1010846	0					
ANR	1010880	PrimaryExpression	"""S\\n"""		1010846	0					
ANR	1010881	ReturnStatement	return 0 ;	587:1:16890:16898	1010846	3	True				
ANR	1010882	PrimaryExpression	0		1010846	0					
ANR	1010883	ReturnType	int		1010846	1					
ANR	1010884	Identifier	handle_cream_delegate		1010846	2					
ANR	1010885	ParameterList	char * * input_line		1010846	3					
ANR	1010886	Parameter	char * * input_line	577:27:16720:16736	1010846	0	True				
ANR	1010887	ParameterType	char * *		1010846	0					
ANR	1010888	Identifier	input_line		1010846	1					
ANR	1010889	CFGEntryNode	ENTRY		1010846		True				
ANR	1010890	CFGExitNode	EXIT		1010846		True				
ANR	1010891	Symbol	count_args		1010846						
ANR	1010892	Symbol	input_line		1010846						
ANR	1010893	Symbol	thread_cream_delegate		1010846						
ANR	1010894	Function	thread_cream_delegate	590:0:16903:17703							
ANR	1010895	FunctionDef	thread_cream_delegate (Request * req)		1010894	0					
ANR	1010896	CompoundStatement		591:0:16945:17703	1010894	0					
ANR	1010897	IdentifierDeclStatement	"char * reqid , * delgservice , * delgid ;"	592:1:16948:16982	1010894	0	True				
ANR	1010898	IdentifierDecl	* reqid		1010894	0					
ANR	1010899	IdentifierDeclType	char *		1010894	0					
ANR	1010900	Identifier	reqid		1010894	1					
ANR	1010901	IdentifierDecl	* delgservice		1010894	1					
ANR	1010902	IdentifierDeclType	char *		1010894	0					
ANR	1010903	Identifier	delgservice		1010894	1					
ANR	1010904	IdentifierDecl	* delgid		1010894	2					
ANR	1010905	IdentifierDeclType	char *		1010894	0					
ANR	1010906	Identifier	delgid		1010894	1					
ANR	1010907	IdentifierDeclStatement	string result_line ;	593:1:16985:17003	1010894	1	True				
ANR	1010908	IdentifierDecl	result_line		1010894	0					
ANR	1010909	IdentifierDeclType	string		1010894	0					
ANR	1010910	Identifier	result_line		1010894	1					
ANR	1010911	IdentifierDeclStatement	AbsCreamProxy * cp = NULL ;	594:1:17006:17030	1010894	2	True				
ANR	1010912	IdentifierDecl	* cp = NULL		1010894	0					
ANR	1010913	IdentifierDeclType	AbsCreamProxy *		1010894	0					
ANR	1010914	Identifier	cp		1010894	1					
ANR	1010915	AssignmentExpression	* cp = NULL		1010894	2		=			
ANR	1010916	Identifier	NULL		1010894	0					
ANR	1010917	Identifier	NULL		1010894	1					
ANR	1010918	ExpressionStatement	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"	596:1:17035:17083	1010894	3	True				
ANR	1010919	CallExpression	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"		1010894	0					
ANR	1010920	Callee	process_string_arg		1010894	0					
ANR	1010921	Identifier	process_string_arg		1010894	0					
ANR	1010922	ArgumentList	req -> input_line [ 1 ]		1010894	1					
ANR	1010923	Argument	req -> input_line [ 1 ]		1010894	0					
ANR	1010924	ArrayIndexing	req -> input_line [ 1 ]		1010894	0					
ANR	1010925	PtrMemberAccess	req -> input_line		1010894	0					
ANR	1010926	Identifier	req		1010894	0					
ANR	1010927	Identifier	input_line		1010894	1					
ANR	1010928	PrimaryExpression	1		1010894	1					
ANR	1010929	Argument	& reqid		1010894	1					
ANR	1010930	UnaryOperationExpression	& reqid		1010894	0					
ANR	1010931	UnaryOperator	&		1010894	0					
ANR	1010932	Identifier	reqid		1010894	1					
ANR	1010933	ExpressionStatement	"process_string_arg ( req -> input_line [ 2 ] , & delgid )"	597:1:17086:17135	1010894	4	True				
ANR	1010934	CallExpression	"process_string_arg ( req -> input_line [ 2 ] , & delgid )"		1010894	0					
ANR	1010935	Callee	process_string_arg		1010894	0					
ANR	1010936	Identifier	process_string_arg		1010894	0					
ANR	1010937	ArgumentList	req -> input_line [ 2 ]		1010894	1					
ANR	1010938	Argument	req -> input_line [ 2 ]		1010894	0					
ANR	1010939	ArrayIndexing	req -> input_line [ 2 ]		1010894	0					
ANR	1010940	PtrMemberAccess	req -> input_line		1010894	0					
ANR	1010941	Identifier	req		1010894	0					
ANR	1010942	Identifier	input_line		1010894	1					
ANR	1010943	PrimaryExpression	2		1010894	1					
ANR	1010944	Argument	& delgid		1010894	1					
ANR	1010945	UnaryOperationExpression	& delgid		1010894	0					
ANR	1010946	UnaryOperator	&		1010894	0					
ANR	1010947	Identifier	delgid		1010894	1					
ANR	1010948	ExpressionStatement	"process_string_arg ( req -> input_line [ 3 ] , & delgservice )"	598:1:17138:17191	1010894	5	True				
ANR	1010949	CallExpression	"process_string_arg ( req -> input_line [ 3 ] , & delgservice )"		1010894	0					
ANR	1010950	Callee	process_string_arg		1010894	0					
ANR	1010951	Identifier	process_string_arg		1010894	0					
ANR	1010952	ArgumentList	req -> input_line [ 3 ]		1010894	1					
ANR	1010953	Argument	req -> input_line [ 3 ]		1010894	0					
ANR	1010954	ArrayIndexing	req -> input_line [ 3 ]		1010894	0					
ANR	1010955	PtrMemberAccess	req -> input_line		1010894	0					
ANR	1010956	Identifier	req		1010894	0					
ANR	1010957	Identifier	input_line		1010894	1					
ANR	1010958	PrimaryExpression	3		1010894	1					
ANR	1010959	Argument	& delgservice		1010894	1					
ANR	1010960	UnaryOperationExpression	& delgservice		1010894	0					
ANR	1010961	UnaryOperator	&		1010894	0					
ANR	1010962	Identifier	delgservice		1010894	1					
ANR	1010963	TryStatement	try		1010894	6					
ANR	1010964	CompoundStatement		10:5:253:253	1010894	0					
ANR	1010965	ExpressionStatement	"cp = CreamProxyFactory :: make_CreamProxyDelegate ( delgid , DEFAULT_TIMEOUT )"		1010894	0					
ANR	1010966	AssignmentExpression	"cp = CreamProxyFactory :: make_CreamProxyDelegate ( delgid , DEFAULT_TIMEOUT )"		1010894	0		=			
ANR	1010967	Identifier	cp		1010894	0					
ANR	1010968	CallExpression	"CreamProxyFactory :: make_CreamProxyDelegate ( delgid , DEFAULT_TIMEOUT )"		1010894	1					
ANR	1010969	Callee	CreamProxyFactory :: make_CreamProxyDelegate		1010894	0					
ANR	1010970	Identifier	CreamProxyFactory :: make_CreamProxyDelegate		1010894	0					
ANR	1010971	ArgumentList	delgid		1010894	1					
ANR	1010972	Argument	delgid		1010894	0					
ANR	1010973	Identifier	delgid		1010894	0					
ANR	1010974	Argument	DEFAULT_TIMEOUT		1010894	1					
ANR	1010975	Identifier	DEFAULT_TIMEOUT		1010894	0					
ANR	1010976	ExpressionStatement	check_for_factory_error ( cp )		1010894	1					
ANR	1010977	CallExpression	check_for_factory_error ( cp )		1010894	0					
ANR	1010978	Callee	check_for_factory_error		1010894	0					
ANR	1010979	Identifier	check_for_factory_error		1010894	0					
ANR	1010980	ArgumentList	cp		1010894	1					
ANR	1010981	Argument	cp		1010894	0					
ANR	1010982	Identifier	cp		1010894	0					
ANR	1010983	ExpressionStatement	cp -> setCredential ( req -> proxy . c_str ( ) )		1010894	2					
ANR	1010984	CallExpression	cp -> setCredential ( req -> proxy . c_str ( ) )		1010894	0					
ANR	1010985	Callee	cp -> setCredential		1010894	0					
ANR	1010986	PtrMemberAccess	cp -> setCredential		1010894	0					
ANR	1010987	Identifier	cp		1010894	0					
ANR	1010988	Identifier	setCredential		1010894	1					
ANR	1010989	ArgumentList	req -> proxy . c_str ( )		1010894	1					
ANR	1010990	Argument	req -> proxy . c_str ( )		1010894	0					
ANR	1010991	CallExpression	req -> proxy . c_str ( )		1010894	0					
ANR	1010992	Callee	req -> proxy . c_str		1010894	0					
ANR	1010993	MemberAccess	req -> proxy . c_str		1010894	0					
ANR	1010994	PtrMemberAccess	req -> proxy		1010894	0					
ANR	1010995	Identifier	req		1010894	0					
ANR	1010996	Identifier	proxy		1010894	1					
ANR	1010997	Identifier	c_str		1010894	1					
ANR	1010998	ArgumentList			1010894	1					
ANR	1010999	ExpressionStatement	cp -> execute ( delgservice )		1010894	3					
ANR	1011000	CallExpression	cp -> execute ( delgservice )		1010894	0					
ANR	1011001	Callee	cp -> execute		1010894	0					
ANR	1011002	PtrMemberAccess	cp -> execute		1010894	0					
ANR	1011003	Identifier	cp		1010894	0					
ANR	1011004	Identifier	execute		1010894	1					
ANR	1011005	ArgumentList	delgservice		1010894	1					
ANR	1011006	Argument	delgservice		1010894	0					
ANR	1011007	Identifier	delgservice		1010894	0					
ANR	1011008	Statement	delete		1010894	4					
ANR	1011009	ExpressionStatement	cp		1010894	5					
ANR	1011010	Identifier	cp		1010894	0					
ANR	1011011	CatchList			1010894	1					
ANR	1011012	CatchStatement	catch ( std :: exception & ex )		1010894	0					
ANR	1011013	Identifier	ex		1010894	0					
ANR	1011014	CompoundStatement		20:2:505:541	1010894	1					
ANR	1011015	Statement	delete	609:2:17438:17443	1010894	0	True				
ANR	1011016	ExpressionStatement	cp	609:9:17445:17447	1010894	1	True				
ANR	1011017	Identifier	cp		1010894	0					
ANR	1011018	IdentifierDeclStatement	char * msg = escape_spaces ( ex . what ( ) ) ;	610:2:17451:17487	1010894	2	True				
ANR	1011019	IdentifierDecl	* msg = escape_spaces ( ex . what ( ) )		1010894	0					
ANR	1011020	IdentifierDeclType	char *		1010894	0					
ANR	1011021	Identifier	msg		1010894	1					
ANR	1011022	AssignmentExpression	* msg = escape_spaces ( ex . what ( ) )		1010894	2		=			
ANR	1011023	Identifier	msg		1010894	0					
ANR	1011024	CallExpression	escape_spaces ( ex . what ( ) )		1010894	1					
ANR	1011025	Callee	escape_spaces		1010894	0					
ANR	1011026	Identifier	escape_spaces		1010894	0					
ANR	1011027	ArgumentList	ex . what ( )		1010894	1					
ANR	1011028	Argument	ex . what ( )		1010894	0					
ANR	1011029	CallExpression	ex . what ( )		1010894	0					
ANR	1011030	Callee	ex . what		1010894	0					
ANR	1011031	MemberAccess	ex . what		1010894	0					
ANR	1011032	Identifier	ex		1010894	0					
ANR	1011033	Identifier	what		1010894	1					
ANR	1011034	ArgumentList			1010894	1					
ANR	1011035	ExpressionStatement	"result_line = ( string ) reqid + "" CREAM_Delegate\\\\ Error:\\\\ "" + msg"	611:2:17491:17556	1010894	3	True				
ANR	1011036	AssignmentExpression	"result_line = ( string ) reqid + "" CREAM_Delegate\\\\ Error:\\\\ "" + msg"		1010894	0		=			
ANR	1011037	Identifier	result_line		1010894	0					
ANR	1011038	AdditiveExpression	"( string ) reqid + "" CREAM_Delegate\\\\ Error:\\\\ "" + msg"		1010894	1		+			
ANR	1011039	CastExpression	( string ) reqid		1010894	0					
ANR	1011040	CastTarget	string		1010894	0					
ANR	1011041	Identifier	reqid		1010894	1					
ANR	1011042	AdditiveExpression	""" CREAM_Delegate\\\\ Error:\\\\ "" + msg"		1010894	1		+			
ANR	1011043	PrimaryExpression	""" CREAM_Delegate\\\\ Error:\\\\ """		1010894	0					
ANR	1011044	Identifier	msg		1010894	1					
ANR	1011045	ExpressionStatement	enqueue_result ( result_line )	612:2:17560:17587	1010894	4	True				
ANR	1011046	CallExpression	enqueue_result ( result_line )		1010894	0					
ANR	1011047	Callee	enqueue_result		1010894	0					
ANR	1011048	Identifier	enqueue_result		1010894	0					
ANR	1011049	ArgumentList	result_line		1010894	1					
ANR	1011050	Argument	result_line		1010894	0					
ANR	1011051	Identifier	result_line		1010894	0					
ANR	1011052	ExpressionStatement	free ( msg )	613:2:17591:17600	1010894	5	True				
ANR	1011053	CallExpression	free ( msg )		1010894	0					
ANR	1011054	Callee	free		1010894	0					
ANR	1011055	Identifier	free		1010894	0					
ANR	1011056	ArgumentList	msg		1010894	1					
ANR	1011057	Argument	msg		1010894	0					
ANR	1011058	Identifier	msg		1010894	0					
ANR	1011059	ReturnStatement	return 1 ;	615:2:17605:17613	1010894	6	True				
ANR	1011060	PrimaryExpression	1		1010894	0					
ANR	1011061	ExpressionStatement	"result_line = ( string ) reqid + "" NULL"""	618:1:17621:17658	1010894	7	True				
ANR	1011062	AssignmentExpression	"result_line = ( string ) reqid + "" NULL"""		1010894	0		=			
ANR	1011063	Identifier	result_line		1010894	0					
ANR	1011064	AdditiveExpression	"( string ) reqid + "" NULL"""		1010894	1		+			
ANR	1011065	CastExpression	( string ) reqid		1010894	0					
ANR	1011066	CastTarget	string		1010894	0					
ANR	1011067	Identifier	reqid		1010894	1					
ANR	1011068	PrimaryExpression	""" NULL"""		1010894	1					
ANR	1011069	ExpressionStatement	enqueue_result ( result_line )	619:1:17661:17688	1010894	8	True				
ANR	1011070	CallExpression	enqueue_result ( result_line )		1010894	0					
ANR	1011071	Callee	enqueue_result		1010894	0					
ANR	1011072	Identifier	enqueue_result		1010894	0					
ANR	1011073	ArgumentList	result_line		1010894	1					
ANR	1011074	Argument	result_line		1010894	0					
ANR	1011075	Identifier	result_line		1010894	0					
ANR	1011076	ReturnStatement	return 0 ;	621:1:17693:17701	1010894	9	True				
ANR	1011077	PrimaryExpression	0		1010894	0					
ANR	1011078	ReturnType	int		1010894	1					
ANR	1011079	Identifier	thread_cream_delegate		1010894	2					
ANR	1011080	ParameterList	Request * req		1010894	3					
ANR	1011081	Parameter	Request * req	590:27:16930:16941	1010894	0	True				
ANR	1011082	ParameterType	Request *		1010894	0					
ANR	1011083	Identifier	req		1010894	1					
ANR	1011084	CFGEntryNode	ENTRY		1010894		True				
ANR	1011085	CFGExitNode	EXIT		1010894		True				
ANR	1011086	CFGErrorNode	ERROR		1010894		True				
ANR	1011087	Symbol	& reqid		1010894						
ANR	1011088	Symbol	NULL		1010894						
ANR	1011089	Symbol	* req		1010894						
ANR	1011090	Symbol	& delgid		1010894						
ANR	1011091	Symbol	cp		1010894						
ANR	1011092	Symbol	& delgservice		1010894						
ANR	1011093	Symbol	reqid		1010894						
ANR	1011094	Symbol	result_line		1010894						
ANR	1011095	Symbol	delgid		1010894						
ANR	1011096	Symbol	delgservice		1010894						
ANR	1011097	Symbol	* * req		1010894						
ANR	1011098	Symbol	req -> input_line		1010894						
ANR	1011099	Symbol	* req -> input_line		1010894						
ANR	1011100	Symbol	req		1010894						
ANR	1011101	Function	handle_cream_job_register	629:0:17921:18167							
ANR	1011102	FunctionDef	handle_cream_job_register (char * * input_line)		1011101	0					
ANR	1011103	CompoundStatement		630:0:17972:18167	1011101	0					
ANR	1011104	IfStatement	if ( count_args ( input_line ) != 6 )		1011101	0					
ANR	1011105	Condition	count_args ( input_line ) != 6	631:6:17980:18008	1011101	0	True				
ANR	1011106	EqualityExpression	count_args ( input_line ) != 6		1011101	0		!=			
ANR	1011107	CallExpression	count_args ( input_line )		1011101	0					
ANR	1011108	Callee	count_args		1011101	0					
ANR	1011109	Identifier	count_args		1011101	0					
ANR	1011110	ArgumentList	input_line		1011101	1					
ANR	1011111	Argument	input_line		1011101	0					
ANR	1011112	Identifier	input_line		1011101	0					
ANR	1011113	PrimaryExpression	6		1011101	1					
ANR	1011114	CompoundStatement		2:38:39:39	1011101	1					
ANR	1011115	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	632:2:18016:18037	1011101	0	True				
ANR	1011116	CallExpression	HANDLE_SYNTAX_ERROR ( )		1011101	0					
ANR	1011117	Callee	HANDLE_SYNTAX_ERROR		1011101	0					
ANR	1011118	Identifier	HANDLE_SYNTAX_ERROR		1011101	0					
ANR	1011119	ArgumentList			1011101	1					
ANR	1011120	ExpressionStatement	"enqueue_request_batch ( input_line , thread_cream_job_register , cmp_request_register )"	635:1:18045:18129	1011101	1	True				
ANR	1011121	CallExpression	"enqueue_request_batch ( input_line , thread_cream_job_register , cmp_request_register )"		1011101	0					
ANR	1011122	Callee	enqueue_request_batch		1011101	0					
ANR	1011123	Identifier	enqueue_request_batch		1011101	0					
ANR	1011124	ArgumentList	input_line		1011101	1					
ANR	1011125	Argument	input_line		1011101	0					
ANR	1011126	Identifier	input_line		1011101	0					
ANR	1011127	Argument	thread_cream_job_register		1011101	1					
ANR	1011128	Identifier	thread_cream_job_register		1011101	0					
ANR	1011129	Argument	cmp_request_register		1011101	2					
ANR	1011130	Identifier	cmp_request_register		1011101	0					
ANR	1011131	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	637:1:18133:18151	1011101	2	True				
ANR	1011132	CallExpression	"gahp_printf ( ""S\\n"" )"		1011101	0					
ANR	1011133	Callee	gahp_printf		1011101	0					
ANR	1011134	Identifier	gahp_printf		1011101	0					
ANR	1011135	ArgumentList	"""S\\n"""		1011101	1					
ANR	1011136	Argument	"""S\\n"""		1011101	0					
ANR	1011137	PrimaryExpression	"""S\\n"""		1011101	0					
ANR	1011138	ReturnStatement	return 0 ;	639:1:18157:18165	1011101	3	True				
ANR	1011139	PrimaryExpression	0		1011101	0					
ANR	1011140	ReturnType	int		1011101	1					
ANR	1011141	Identifier	handle_cream_job_register		1011101	2					
ANR	1011142	ParameterList	char * * input_line		1011101	3					
ANR	1011143	Parameter	char * * input_line	629:31:17952:17968	1011101	0	True				
ANR	1011144	ParameterType	char * *		1011101	0					
ANR	1011145	Identifier	input_line		1011101	1					
ANR	1011146	CFGEntryNode	ENTRY		1011101		True				
ANR	1011147	CFGExitNode	EXIT		1011101		True				
ANR	1011148	Symbol	count_args		1011101						
ANR	1011149	Symbol	input_line		1011101						
ANR	1011150	Symbol	cmp_request_register		1011101						
ANR	1011151	Symbol	thread_cream_job_register		1011101						
ANR	1011152	Function	thread_cream_job_register	642:0:18170:20844							
ANR	1011153	FunctionDef	thread_cream_job_register (Request * * reqlist)		1011152	0					
ANR	1011154	CompoundStatement		643:0:18221:20844	1011152	0					
ANR	1011155	IfStatement	if ( reqlist == NULL )		1011152	0					
ANR	1011156	Condition	reqlist == NULL	648:6:18400:18414	1011152	0	True				
ANR	1011157	EqualityExpression	reqlist == NULL		1011152	0		==			
ANR	1011158	Identifier	reqlist		1011152	0					
ANR	1011159	Identifier	NULL		1011152	1					
ANR	1011160	CompoundStatement		6:24:196:196	1011152	1					
ANR	1011161	ExpressionStatement	"internal_error ( ""thread_cream_job_register called with NULL pointer\\n"" )"	649:2:18422:18494	1011152	0	True				
ANR	1011162	CallExpression	"internal_error ( ""thread_cream_job_register called with NULL pointer\\n"" )"		1011152	0					
ANR	1011163	Callee	internal_error		1011152	0					
ANR	1011164	Identifier	internal_error		1011152	0					
ANR	1011165	ArgumentList	"""thread_cream_job_register called with NULL pointer\\n"""		1011152	1					
ANR	1011166	Argument	"""thread_cream_job_register called with NULL pointer\\n"""		1011152	0					
ANR	1011167	PrimaryExpression	"""thread_cream_job_register called with NULL pointer\\n"""		1011152	0					
ANR	1011168	IfStatement	if ( reqlist [ 0 ] == NULL )		1011152	1					
ANR	1011169	Condition	reqlist [ 0 ] == NULL	651:6:18505:18522	1011152	0	True				
ANR	1011170	EqualityExpression	reqlist [ 0 ] == NULL		1011152	0		==			
ANR	1011171	ArrayIndexing	reqlist [ 0 ]		1011152	0					
ANR	1011172	Identifier	reqlist		1011152	0					
ANR	1011173	PrimaryExpression	0		1011152	1					
ANR	1011174	Identifier	NULL		1011152	1					
ANR	1011175	CompoundStatement		9:27:304:304	1011152	1					
ANR	1011176	ExpressionStatement	"internal_error ( ""thread_cream_job_status called with empty list\\n"" )"	652:2:18530:18598	1011152	0	True				
ANR	1011177	CallExpression	"internal_error ( ""thread_cream_job_status called with empty list\\n"" )"		1011152	0					
ANR	1011178	Callee	internal_error		1011152	0					
ANR	1011179	Identifier	internal_error		1011152	0					
ANR	1011180	ArgumentList	"""thread_cream_job_status called with empty list\\n"""		1011152	1					
ANR	1011181	Argument	"""thread_cream_job_status called with empty list\\n"""		1011152	0					
ANR	1011182	PrimaryExpression	"""thread_cream_job_status called with empty list\\n"""		1011152	0					
ANR	1011183	IdentifierDeclStatement	vector < string > reqids ;	655:1:18605:18626	1011152	2	True				
ANR	1011184	IdentifierDecl	reqids		1011152	0					
ANR	1011185	IdentifierDeclType	vector < string >		1011152	0					
ANR	1011186	Identifier	reqids		1011152	1					
ANR	1011187	IdentifierDeclStatement	string result_line ;	657:1:18630:18648	1011152	3	True				
ANR	1011188	IdentifierDecl	result_line		1011152	0					
ANR	1011189	IdentifierDeclType	string		1011152	0					
ANR	1011190	Identifier	result_line		1011152	1					
ANR	1011191	IdentifierDeclStatement	string proxy = reqlist [ 0 ] -> proxy ;	658:1:18651:18683	1011152	4	True				
ANR	1011192	IdentifierDecl	proxy = reqlist [ 0 ] -> proxy		1011152	0					
ANR	1011193	IdentifierDeclType	string		1011152	0					
ANR	1011194	Identifier	proxy		1011152	1					
ANR	1011195	AssignmentExpression	proxy = reqlist [ 0 ] -> proxy		1011152	2		=			
ANR	1011196	Identifier	proxy		1011152	0					
ANR	1011197	PtrMemberAccess	reqlist [ 0 ] -> proxy		1011152	1					
ANR	1011198	ArrayIndexing	reqlist [ 0 ]		1011152	0					
ANR	1011199	Identifier	reqlist		1011152	0					
ANR	1011200	PrimaryExpression	0		1011152	1					
ANR	1011201	Identifier	proxy		1011152	1					
ANR	1011202	IdentifierDeclStatement	char * service = reqlist [ 0 ] -> input_line [ 2 ] ;	659:1:18686:18727	1011152	5	True				
ANR	1011203	IdentifierDecl	* service = reqlist [ 0 ] -> input_line [ 2 ]		1011152	0					
ANR	1011204	IdentifierDeclType	char *		1011152	0					
ANR	1011205	Identifier	service		1011152	1					
ANR	1011206	AssignmentExpression	* service = reqlist [ 0 ] -> input_line [ 2 ]		1011152	2		=			
ANR	1011207	Identifier	service		1011152	0					
ANR	1011208	ArrayIndexing	reqlist [ 0 ] -> input_line [ 2 ]		1011152	1					
ANR	1011209	PtrMemberAccess	reqlist [ 0 ] -> input_line		1011152	0					
ANR	1011210	ArrayIndexing	reqlist [ 0 ]		1011152	0					
ANR	1011211	Identifier	reqlist		1011152	0					
ANR	1011212	PrimaryExpression	0		1011152	1					
ANR	1011213	Identifier	input_line		1011152	1					
ANR	1011214	PrimaryExpression	2		1011152	1					
ANR	1011215	IdentifierDeclStatement	AbsCreamProxy * cp = NULL ;	660:1:18730:18754	1011152	6	True				
ANR	1011216	IdentifierDecl	* cp = NULL		1011152	0					
ANR	1011217	IdentifierDeclType	AbsCreamProxy *		1011152	0					
ANR	1011218	Identifier	cp		1011152	1					
ANR	1011219	AssignmentExpression	* cp = NULL		1011152	2		=			
ANR	1011220	Identifier	NULL		1011152	0					
ANR	1011221	Identifier	NULL		1011152	1					
ANR	1011222	IdentifierDeclStatement	AbsCreamProxy :: RegisterArrayResult resp ;	661:1:18757:18796	1011152	7	True				
ANR	1011223	IdentifierDecl	resp		1011152	0					
ANR	1011224	IdentifierDeclType	AbsCreamProxy :: RegisterArrayResult		1011152	0					
ANR	1011225	Identifier	resp		1011152	1					
ANR	1011226	IdentifierDeclStatement	AbsCreamProxy :: RegisterArrayRequest reqs ;	662:1:18799:18839	1011152	8	True				
ANR	1011227	IdentifierDecl	reqs		1011152	0					
ANR	1011228	IdentifierDeclType	AbsCreamProxy :: RegisterArrayRequest		1011152	0					
ANR	1011229	Identifier	reqs		1011152	1					
ANR	1011230	TryStatement	try		1011152	9					
ANR	1011231	CompoundStatement		22:5:625:625	1011152	0					
ANR	1011232	ForStatement	for ( int i = 0 ; reqlist [ i ] != NULL ; i ++ )		1011152	0					
ANR	1011233	ForInit	int i = 0 ;		1011152	0					
ANR	1011234	IdentifierDeclStatement	int i = 0 ;		1011152	0					
ANR	1011235	IdentifierDecl	i = 0		1011152	0					
ANR	1011236	IdentifierDeclType	int		1011152	0					
ANR	1011237	Identifier	i		1011152	1					
ANR	1011238	AssignmentExpression	i = 0		1011152	2		=			
ANR	1011239	Identifier	i		1011152	0					
ANR	1011240	PrimaryExpression	0		1011152	1					
ANR	1011241	Condition	reqlist [ i ] != NULL		1011152	1					
ANR	1011242	EqualityExpression	reqlist [ i ] != NULL		1011152	0		!=			
ANR	1011243	ArrayIndexing	reqlist [ i ]		1011152	0					
ANR	1011244	Identifier	reqlist		1011152	0					
ANR	1011245	Identifier	i		1011152	1					
ANR	1011246	Identifier	NULL		1011152	1					
ANR	1011247	PostIncDecOperationExpression	i ++		1011152	2					
ANR	1011248	Identifier	i		1011152	0					
ANR	1011249	IncDec	++		1011152	1					
ANR	1011250	CompoundStatement		23:45:672:672	1011152	3					
ANR	1011251	ExpressionStatement	reqids . push_back ( reqlist [ i ] -> input_line [ 1 ] )		1011152	0					
ANR	1011252	CallExpression	reqids . push_back ( reqlist [ i ] -> input_line [ 1 ] )		1011152	0					
ANR	1011253	Callee	reqids . push_back		1011152	0					
ANR	1011254	MemberAccess	reqids . push_back		1011152	0					
ANR	1011255	Identifier	reqids		1011152	0					
ANR	1011256	Identifier	push_back		1011152	1					
ANR	1011257	ArgumentList	reqlist [ i ] -> input_line [ 1 ]		1011152	1					
ANR	1011258	Argument	reqlist [ i ] -> input_line [ 1 ]		1011152	0					
ANR	1011259	ArrayIndexing	reqlist [ i ] -> input_line [ 1 ]		1011152	0					
ANR	1011260	PtrMemberAccess	reqlist [ i ] -> input_line		1011152	0					
ANR	1011261	ArrayIndexing	reqlist [ i ]		1011152	0					
ANR	1011262	Identifier	reqlist		1011152	0					
ANR	1011263	Identifier	i		1011152	1					
ANR	1011264	Identifier	input_line		1011152	1					
ANR	1011265	PrimaryExpression	1		1011152	1					
ANR	1011266	ExpressionStatement	"reqs . push_back ( new JobDescriptionWrapper ( reqlist [ i ] -> input_line [ 4 ] , reqlist [ i ] -> input_line [ 3 ] , """" , reqlist [ i ] -> input_line [ 5 ] , false , reqlist [ i ] -> input_line [ 1 ] ) )"		1011152	1					
ANR	1011267	CallExpression	"reqs . push_back ( new JobDescriptionWrapper ( reqlist [ i ] -> input_line [ 4 ] , reqlist [ i ] -> input_line [ 3 ] , """" , reqlist [ i ] -> input_line [ 5 ] , false , reqlist [ i ] -> input_line [ 1 ] ) )"		1011152	0					
ANR	1011268	Callee	reqs . push_back		1011152	0					
ANR	1011269	MemberAccess	reqs . push_back		1011152	0					
ANR	1011270	Identifier	reqs		1011152	0					
ANR	1011271	Identifier	push_back		1011152	1					
ANR	1011272	ArgumentList	"reqlist [ i ] -> input_line [ 4 ] , reqlist [ i ] -> input_line [ 3 ] , """" , reqlist [ i ] -> input_line [ 5 ] , false , reqlist [ i ] -> input_line [ 1 ]"		1011152	1					
ANR	1011273	Argument	"reqlist [ i ] -> input_line [ 4 ] , reqlist [ i ] -> input_line [ 3 ] , """" , reqlist [ i ] -> input_line [ 5 ] , false , reqlist [ i ] -> input_line [ 1 ]"		1011152	0					
ANR	1011274	Expression	"reqlist [ i ] -> input_line [ 4 ] , reqlist [ i ] -> input_line [ 3 ] , """" , reqlist [ i ] -> input_line [ 5 ] , false , reqlist [ i ] -> input_line [ 1 ]"		1011152	0					
ANR	1011275	ArrayIndexing	reqlist [ i ] -> input_line [ 4 ]		1011152	0					
ANR	1011276	PtrMemberAccess	reqlist [ i ] -> input_line		1011152	0					
ANR	1011277	ArrayIndexing	reqlist [ i ]		1011152	0					
ANR	1011278	Identifier	reqlist		1011152	0					
ANR	1011279	Identifier	i		1011152	1					
ANR	1011280	Identifier	input_line		1011152	1					
ANR	1011281	PrimaryExpression	4		1011152	1					
ANR	1011282	Expression	"reqlist [ i ] -> input_line [ 3 ] , """" , reqlist [ i ] -> input_line [ 5 ] , false , reqlist [ i ] -> input_line [ 1 ]"		1011152	1					
ANR	1011283	ArrayIndexing	reqlist [ i ] -> input_line [ 3 ]		1011152	0					
ANR	1011284	PtrMemberAccess	reqlist [ i ] -> input_line		1011152	0					
ANR	1011285	ArrayIndexing	reqlist [ i ]		1011152	0					
ANR	1011286	Identifier	reqlist		1011152	0					
ANR	1011287	Identifier	i		1011152	1					
ANR	1011288	Identifier	input_line		1011152	1					
ANR	1011289	PrimaryExpression	3		1011152	1					
ANR	1011290	Expression	""""" , reqlist [ i ] -> input_line [ 5 ] , false , reqlist [ i ] -> input_line [ 1 ]"		1011152	1					
ANR	1011291	PrimaryExpression	""""""		1011152	0					
ANR	1011292	Expression	"reqlist [ i ] -> input_line [ 5 ] , false , reqlist [ i ] -> input_line [ 1 ]"		1011152	1					
ANR	1011293	ArrayIndexing	reqlist [ i ] -> input_line [ 5 ]		1011152	0					
ANR	1011294	PtrMemberAccess	reqlist [ i ] -> input_line		1011152	0					
ANR	1011295	ArrayIndexing	reqlist [ i ]		1011152	0					
ANR	1011296	Identifier	reqlist		1011152	0					
ANR	1011297	Identifier	i		1011152	1					
ANR	1011298	Identifier	input_line		1011152	1					
ANR	1011299	PrimaryExpression	5		1011152	1					
ANR	1011300	Expression	"false , reqlist [ i ] -> input_line [ 1 ]"		1011152	1					
ANR	1011301	Identifier	false		1011152	0					
ANR	1011302	ArrayIndexing	reqlist [ i ] -> input_line [ 1 ]		1011152	1					
ANR	1011303	PtrMemberAccess	reqlist [ i ] -> input_line		1011152	0					
ANR	1011304	ArrayIndexing	reqlist [ i ]		1011152	0					
ANR	1011305	Identifier	reqlist		1011152	0					
ANR	1011306	Identifier	i		1011152	1					
ANR	1011307	Identifier	input_line		1011152	1					
ANR	1011308	PrimaryExpression	1		1011152	1					
ANR	1011309	ExpressionStatement	"cp = CreamProxyFactory :: make_CreamProxyRegister ( & reqs , & resp , DEFAULT_TIMEOUT )"		1011152	1					
ANR	1011310	AssignmentExpression	"cp = CreamProxyFactory :: make_CreamProxyRegister ( & reqs , & resp , DEFAULT_TIMEOUT )"		1011152	0		=			
ANR	1011311	Identifier	cp		1011152	0					
ANR	1011312	CallExpression	"CreamProxyFactory :: make_CreamProxyRegister ( & reqs , & resp , DEFAULT_TIMEOUT )"		1011152	1					
ANR	1011313	Callee	CreamProxyFactory :: make_CreamProxyRegister		1011152	0					
ANR	1011314	Identifier	CreamProxyFactory :: make_CreamProxyRegister		1011152	0					
ANR	1011315	ArgumentList	& reqs		1011152	1					
ANR	1011316	Argument	& reqs		1011152	0					
ANR	1011317	UnaryOperationExpression	& reqs		1011152	0					
ANR	1011318	UnaryOperator	&		1011152	0					
ANR	1011319	Identifier	reqs		1011152	1					
ANR	1011320	Argument	& resp		1011152	1					
ANR	1011321	UnaryOperationExpression	& resp		1011152	0					
ANR	1011322	UnaryOperator	&		1011152	0					
ANR	1011323	Identifier	resp		1011152	1					
ANR	1011324	Argument	DEFAULT_TIMEOUT		1011152	2					
ANR	1011325	Identifier	DEFAULT_TIMEOUT		1011152	0					
ANR	1011326	ExpressionStatement	check_for_factory_error ( cp )		1011152	2					
ANR	1011327	CallExpression	check_for_factory_error ( cp )		1011152	0					
ANR	1011328	Callee	check_for_factory_error		1011152	0					
ANR	1011329	Identifier	check_for_factory_error		1011152	0					
ANR	1011330	ArgumentList	cp		1011152	1					
ANR	1011331	Argument	cp		1011152	0					
ANR	1011332	Identifier	cp		1011152	0					
ANR	1011333	ExpressionStatement	cp -> setCredential ( proxy . c_str ( ) )		1011152	3					
ANR	1011334	CallExpression	cp -> setCredential ( proxy . c_str ( ) )		1011152	0					
ANR	1011335	Callee	cp -> setCredential		1011152	0					
ANR	1011336	PtrMemberAccess	cp -> setCredential		1011152	0					
ANR	1011337	Identifier	cp		1011152	0					
ANR	1011338	Identifier	setCredential		1011152	1					
ANR	1011339	ArgumentList	proxy . c_str ( )		1011152	1					
ANR	1011340	Argument	proxy . c_str ( )		1011152	0					
ANR	1011341	CallExpression	proxy . c_str ( )		1011152	0					
ANR	1011342	Callee	proxy . c_str		1011152	0					
ANR	1011343	MemberAccess	proxy . c_str		1011152	0					
ANR	1011344	Identifier	proxy		1011152	0					
ANR	1011345	Identifier	c_str		1011152	1					
ANR	1011346	ArgumentList			1011152	1					
ANR	1011347	ExpressionStatement	cp -> execute ( service )		1011152	4					
ANR	1011348	CallExpression	cp -> execute ( service )		1011152	0					
ANR	1011349	Callee	cp -> execute		1011152	0					
ANR	1011350	PtrMemberAccess	cp -> execute		1011152	0					
ANR	1011351	Identifier	cp		1011152	0					
ANR	1011352	Identifier	execute		1011152	1					
ANR	1011353	ArgumentList	service		1011152	1					
ANR	1011354	Argument	service		1011152	0					
ANR	1011355	Identifier	service		1011152	0					
ANR	1011356	Statement	delete		1011152	5					
ANR	1011357	ExpressionStatement	cp		1011152	6					
ANR	1011358	Identifier	cp		1011152	0					
ANR	1011359	ForStatement	for ( AbsCreamProxy :: RegisterArrayRequest :: iterator it = reqs . begin ( ) ; it != reqs . end ( ) ; it ++ )		1011152	7					
ANR	1011360	ForInit	AbsCreamProxy :: RegisterArrayRequest :: iterator it = reqs . begin ( ) ;		1011152	0					
ANR	1011361	IdentifierDeclStatement	AbsCreamProxy :: RegisterArrayRequest :: iterator it = reqs . begin ( ) ;		1011152	0					
ANR	1011362	IdentifierDecl	it = reqs . begin ( )		1011152	0					
ANR	1011363	IdentifierDeclType	AbsCreamProxy :: RegisterArrayRequest :: iterator		1011152	0					
ANR	1011364	Identifier	it		1011152	1					
ANR	1011365	AssignmentExpression	it = reqs . begin ( )		1011152	2		=			
ANR	1011366	Identifier	it		1011152	0					
ANR	1011367	CallExpression	reqs . begin ( )		1011152	1					
ANR	1011368	Callee	reqs . begin		1011152	0					
ANR	1011369	MemberAccess	reqs . begin		1011152	0					
ANR	1011370	Identifier	reqs		1011152	0					
ANR	1011371	Identifier	begin		1011152	1					
ANR	1011372	ArgumentList			1011152	1					
ANR	1011373	Condition	it != reqs . end ( )		1011152	1					
ANR	1011374	EqualityExpression	it != reqs . end ( )		1011152	0		!=			
ANR	1011375	Identifier	it		1011152	0					
ANR	1011376	CallExpression	reqs . end ( )		1011152	1					
ANR	1011377	Callee	reqs . end		1011152	0					
ANR	1011378	MemberAccess	reqs . end		1011152	0					
ANR	1011379	Identifier	reqs		1011152	0					
ANR	1011380	Identifier	end		1011152	1					
ANR	1011381	ArgumentList			1011152	1					
ANR	1011382	PostIncDecOperationExpression	it ++		1011152	2					
ANR	1011383	Identifier	it		1011152	0					
ANR	1011384	IncDec	++		1011152	1					
ANR	1011385	CompoundStatement		42:30:1357:1357	1011152	3					
ANR	1011386	Statement	delete		1011152	0					
ANR	1011387	ExpressionStatement	* it		1011152	1					
ANR	1011388	UnaryOperationExpression	* it		1011152	0					
ANR	1011389	UnaryOperator	*		1011152	0					
ANR	1011390	Identifier	it		1011152	1					
ANR	1011391	CatchList			1011152	1					
ANR	1011392	CatchStatement	catch ( std :: exception & ex )		1011152	0					
ANR	1011393	Identifier	ex		1011152	0					
ANR	1011394	CompoundStatement		52:2:1549:1585	1011152	1					
ANR	1011395	Statement	delete	689:2:19634:19639	1011152	0	True				
ANR	1011396	ExpressionStatement	cp	689:9:19641:19643	1011152	1	True				
ANR	1011397	Identifier	cp		1011152	0					
ANR	1011398	ForStatement	for ( AbsCreamProxy :: RegisterArrayRequest :: iterator it = reqs . begin ( ) ; it != reqs . end ( ) ; it ++ )		1011152	2					
ANR	1011399	ForInit	AbsCreamProxy :: RegisterArrayRequest :: iterator it = reqs . begin ( ) ;	690:8:19653:19716	1011152	0	True				
ANR	1011400	IdentifierDeclStatement	AbsCreamProxy :: RegisterArrayRequest :: iterator it = reqs . begin ( ) ;		1011152	0					
ANR	1011401	IdentifierDecl	it = reqs . begin ( )		1011152	0					
ANR	1011402	IdentifierDeclType	AbsCreamProxy :: RegisterArrayRequest :: iterator		1011152	0					
ANR	1011403	Identifier	it		1011152	1					
ANR	1011404	AssignmentExpression	it = reqs . begin ( )		1011152	2		=			
ANR	1011405	Identifier	it		1011152	0					
ANR	1011406	CallExpression	reqs . begin ( )		1011152	1					
ANR	1011407	Callee	reqs . begin		1011152	0					
ANR	1011408	MemberAccess	reqs . begin		1011152	0					
ANR	1011409	Identifier	reqs		1011152	0					
ANR	1011410	Identifier	begin		1011152	1					
ANR	1011411	ArgumentList			1011152	1					
ANR	1011412	Condition	it != reqs . end ( )	691:5:19723:19738	1011152	1	True				
ANR	1011413	EqualityExpression	it != reqs . end ( )		1011152	0		!=			
ANR	1011414	Identifier	it		1011152	0					
ANR	1011415	CallExpression	reqs . end ( )		1011152	1					
ANR	1011416	Callee	reqs . end		1011152	0					
ANR	1011417	MemberAccess	reqs . end		1011152	0					
ANR	1011418	Identifier	reqs		1011152	0					
ANR	1011419	Identifier	end		1011152	1					
ANR	1011420	ArgumentList			1011152	1					
ANR	1011421	PostIncDecOperationExpression	it ++	691:23:19741:19744	1011152	2	True				
ANR	1011422	Identifier	it		1011152	0					
ANR	1011423	IncDec	++		1011152	1					
ANR	1011424	CompoundStatement		49:30:1526:1526	1011152	3					
ANR	1011425	Statement	delete	692:3:19753:19758	1011152	0	True				
ANR	1011426	ExpressionStatement	* it	692:10:19760:19763	1011152	1	True				
ANR	1011427	UnaryOperationExpression	* it		1011152	0					
ANR	1011428	UnaryOperator	*		1011152	0					
ANR	1011429	Identifier	it		1011152	1					
ANR	1011430	IdentifierDeclStatement	char * msg = escape_spaces ( ex . what ( ) ) ;	694:2:19771:19807	1011152	3	True				
ANR	1011431	IdentifierDecl	* msg = escape_spaces ( ex . what ( ) )		1011152	0					
ANR	1011432	IdentifierDeclType	char *		1011152	0					
ANR	1011433	Identifier	msg		1011152	1					
ANR	1011434	AssignmentExpression	* msg = escape_spaces ( ex . what ( ) )		1011152	2		=			
ANR	1011435	Identifier	msg		1011152	0					
ANR	1011436	CallExpression	escape_spaces ( ex . what ( ) )		1011152	1					
ANR	1011437	Callee	escape_spaces		1011152	0					
ANR	1011438	Identifier	escape_spaces		1011152	0					
ANR	1011439	ArgumentList	ex . what ( )		1011152	1					
ANR	1011440	Argument	ex . what ( )		1011152	0					
ANR	1011441	CallExpression	ex . what ( )		1011152	0					
ANR	1011442	Callee	ex . what		1011152	0					
ANR	1011443	MemberAccess	ex . what		1011152	0					
ANR	1011444	Identifier	ex		1011152	0					
ANR	1011445	Identifier	what		1011152	1					
ANR	1011446	ArgumentList			1011152	1					
ANR	1011447	ForStatement	for ( vector < string > :: const_iterator it = reqids . begin ( ) ; it != reqids . end ( ) ; it ++ )		1011152	4					
ANR	1011448	ForInit	vector < string > :: const_iterator it = reqids . begin ( ) ;	695:7:19816:19866	1011152	0	True				
ANR	1011449	IdentifierDeclStatement	vector < string > :: const_iterator it = reqids . begin ( ) ;		1011152	0					
ANR	1011450	IdentifierDecl	it = reqids . begin ( )		1011152	0					
ANR	1011451	IdentifierDeclType	vector < string > :: const_iterator		1011152	0					
ANR	1011452	Identifier	it		1011152	1					
ANR	1011453	AssignmentExpression	it = reqids . begin ( )		1011152	2		=			
ANR	1011454	Identifier	it		1011152	0					
ANR	1011455	CallExpression	reqids . begin ( )		1011152	1					
ANR	1011456	Callee	reqids . begin		1011152	0					
ANR	1011457	MemberAccess	reqids . begin		1011152	0					
ANR	1011458	Identifier	reqids		1011152	0					
ANR	1011459	Identifier	begin		1011152	1					
ANR	1011460	ArgumentList			1011152	1					
ANR	1011461	Condition	it != reqids . end ( )	696:4:19872:19889	1011152	1	True				
ANR	1011462	EqualityExpression	it != reqids . end ( )		1011152	0		!=			
ANR	1011463	Identifier	it		1011152	0					
ANR	1011464	CallExpression	reqids . end ( )		1011152	1					
ANR	1011465	Callee	reqids . end		1011152	0					
ANR	1011466	MemberAccess	reqids . end		1011152	0					
ANR	1011467	Identifier	reqids		1011152	0					
ANR	1011468	Identifier	end		1011152	1					
ANR	1011469	ArgumentList			1011152	1					
ANR	1011470	PostIncDecOperationExpression	it ++	696:24:19892:19895	1011152	2	True				
ANR	1011471	Identifier	it		1011152	0					
ANR	1011472	IncDec	++		1011152	1					
ANR	1011473	CompoundStatement		54:31:1677:1677	1011152	3					
ANR	1011474	ExpressionStatement	"result_line = ( * it ) + "" CREAM_Job_Register\\\\ Error:\\\\ "" + msg"	697:3:19904:19965	1011152	0	True				
ANR	1011475	AssignmentExpression	"result_line = ( * it ) + "" CREAM_Job_Register\\\\ Error:\\\\ "" + msg"		1011152	0		=			
ANR	1011476	Identifier	result_line		1011152	0					
ANR	1011477	AdditiveExpression	"( * it ) + "" CREAM_Job_Register\\\\ Error:\\\\ "" + msg"		1011152	1		+			
ANR	1011478	UnaryOperationExpression	* it		1011152	0					
ANR	1011479	UnaryOperator	*		1011152	0					
ANR	1011480	Identifier	it		1011152	1					
ANR	1011481	AdditiveExpression	""" CREAM_Job_Register\\\\ Error:\\\\ "" + msg"		1011152	1		+			
ANR	1011482	PrimaryExpression	""" CREAM_Job_Register\\\\ Error:\\\\ """		1011152	0					
ANR	1011483	Identifier	msg		1011152	1					
ANR	1011484	ExpressionStatement	enqueue_result ( result_line )	698:3:19970:19997	1011152	1	True				
ANR	1011485	CallExpression	enqueue_result ( result_line )		1011152	0					
ANR	1011486	Callee	enqueue_result		1011152	0					
ANR	1011487	Identifier	enqueue_result		1011152	0					
ANR	1011488	ArgumentList	result_line		1011152	1					
ANR	1011489	Argument	result_line		1011152	0					
ANR	1011490	Identifier	result_line		1011152	0					
ANR	1011491	ExpressionStatement	free ( msg )	700:2:20005:20014	1011152	5	True				
ANR	1011492	CallExpression	free ( msg )		1011152	0					
ANR	1011493	Callee	free		1011152	0					
ANR	1011494	Identifier	free		1011152	0					
ANR	1011495	ArgumentList	msg		1011152	1					
ANR	1011496	Argument	msg		1011152	0					
ANR	1011497	Identifier	msg		1011152	0					
ANR	1011498	ReturnStatement	return 1 ;	702:2:20019:20027	1011152	6	True				
ANR	1011499	PrimaryExpression	1		1011152	0					
ANR	1011500	ForStatement	for ( vector < string > :: const_iterator it = reqids . begin ( ) ; it != reqids . end ( ) ; it ++ )		1011152	10					
ANR	1011501	ForInit	vector < string > :: const_iterator it = reqids . begin ( ) ;	705:6:20039:20089	1011152	0	True				
ANR	1011502	IdentifierDeclStatement	vector < string > :: const_iterator it = reqids . begin ( ) ;		1011152	0					
ANR	1011503	IdentifierDecl	it = reqids . begin ( )		1011152	0					
ANR	1011504	IdentifierDeclType	vector < string > :: const_iterator		1011152	0					
ANR	1011505	Identifier	it		1011152	1					
ANR	1011506	AssignmentExpression	it = reqids . begin ( )		1011152	2		=			
ANR	1011507	Identifier	it		1011152	0					
ANR	1011508	CallExpression	reqids . begin ( )		1011152	1					
ANR	1011509	Callee	reqids . begin		1011152	0					
ANR	1011510	MemberAccess	reqids . begin		1011152	0					
ANR	1011511	Identifier	reqids		1011152	0					
ANR	1011512	Identifier	begin		1011152	1					
ANR	1011513	ArgumentList			1011152	1					
ANR	1011514	Condition	it != reqids . end ( )	706:3:20094:20111	1011152	1	True				
ANR	1011515	EqualityExpression	it != reqids . end ( )		1011152	0		!=			
ANR	1011516	Identifier	it		1011152	0					
ANR	1011517	CallExpression	reqids . end ( )		1011152	1					
ANR	1011518	Callee	reqids . end		1011152	0					
ANR	1011519	MemberAccess	reqids . end		1011152	0					
ANR	1011520	Identifier	reqids		1011152	0					
ANR	1011521	Identifier	end		1011152	1					
ANR	1011522	ArgumentList			1011152	1					
ANR	1011523	PostIncDecOperationExpression	it ++	706:23:20114:20117	1011152	2	True				
ANR	1011524	Identifier	it		1011152	0					
ANR	1011525	IncDec	++		1011152	1					
ANR	1011526	CompoundStatement		79:2:2344:2369	1011152	3					
ANR	1011527	IfStatement	if ( resp . find ( * it ) == resp . end ( ) )		1011152	0					
ANR	1011528	Condition	resp . find ( * it ) == resp . end ( )	707:7:20130:20159	1011152	0	True				
ANR	1011529	EqualityExpression	resp . find ( * it ) == resp . end ( )		1011152	0		==			
ANR	1011530	CallExpression	resp . find ( * it )		1011152	0					
ANR	1011531	Callee	resp . find		1011152	0					
ANR	1011532	MemberAccess	resp . find		1011152	0					
ANR	1011533	Identifier	resp		1011152	0					
ANR	1011534	Identifier	find		1011152	1					
ANR	1011535	ArgumentList	* it		1011152	1					
ANR	1011536	Argument	* it		1011152	0					
ANR	1011537	UnaryOperationExpression	* it		1011152	0					
ANR	1011538	UnaryOperator	*		1011152	0					
ANR	1011539	Identifier	it		1011152	1					
ANR	1011540	CallExpression	resp . end ( )		1011152	1					
ANR	1011541	Callee	resp . end		1011152	0					
ANR	1011542	MemberAccess	resp . end		1011152	0					
ANR	1011543	Identifier	resp		1011152	0					
ANR	1011544	Identifier	end		1011152	1					
ANR	1011545	ArgumentList			1011152	1					
ANR	1011546	CompoundStatement		65:40:1941:1941	1011152	1					
ANR	1011547	ExpressionStatement	"result_line = * it + "" CREAM_Job_Register\\\\ Error:\\\\ Job\\\\ not\\\\ in\\\\ reply"""	709:3:20195:20270	1011152	0	True				
ANR	1011548	AssignmentExpression	"result_line = * it + "" CREAM_Job_Register\\\\ Error:\\\\ Job\\\\ not\\\\ in\\\\ reply"""		1011152	0		=			
ANR	1011549	Identifier	result_line		1011152	0					
ANR	1011550	AdditiveExpression	"* it + "" CREAM_Job_Register\\\\ Error:\\\\ Job\\\\ not\\\\ in\\\\ reply"""		1011152	1		+			
ANR	1011551	UnaryOperationExpression	* it		1011152	0					
ANR	1011552	UnaryOperator	*		1011152	0					
ANR	1011553	Identifier	it		1011152	1					
ANR	1011554	PrimaryExpression	""" CREAM_Job_Register\\\\ Error:\\\\ Job\\\\ not\\\\ in\\\\ reply"""		1011152	1					
ANR	1011555	ExpressionStatement	enqueue_result ( result_line )	710:3:20275:20304	1011152	1	True				
ANR	1011556	CallExpression	enqueue_result ( result_line )		1011152	0					
ANR	1011557	Callee	enqueue_result		1011152	0					
ANR	1011558	Identifier	enqueue_result		1011152	0					
ANR	1011559	ArgumentList	result_line		1011152	1					
ANR	1011560	Argument	result_line		1011152	0					
ANR	1011561	Identifier	result_line		1011152	0					
ANR	1011562	ContinueStatement	continue ;	711:3:20309:20317	1011152	2	True				
ANR	1011563	Statement	if	713:2:20325:20326	1011152	1	True				
ANR	1011564	Statement	(	713:5:20328:20328	1011152	2	True				
ANR	1011565	Statement	resp	713:7:20330:20333	1011152	3	True				
ANR	1011566	Statement	[	713:11:20334:20334	1011152	4	True				
ANR	1011567	Statement	*	713:12:20335:20335	1011152	5	True				
ANR	1011568	Statement	it	713:13:20336:20337	1011152	6	True				
ANR	1011569	Statement	]	713:15:20338:20338	1011152	7	True				
ANR	1011570	Statement	.	713:16:20339:20339	1011152	8	True				
ANR	1011571	Statement	get	713:17:20340:20342	1011152	9	True				
ANR	1011572	Statement	<	713:20:20343:20343	1011152	10	True				
ANR	1011573	Statement	0	713:21:20344:20344	1011152	11	True				
ANR	1011574	Statement	>	713:22:20345:20345	1011152	12	True				
ANR	1011575	Statement	(	713:23:20346:20346	1011152	13	True				
ANR	1011576	Statement	)	713:24:20347:20347	1011152	14	True				
ANR	1011577	Statement	!=	713:26:20349:20350	1011152	15	True				
ANR	1011578	Statement	JobIdWrapper	713:29:20352:20363	1011152	16	True				
ANR	1011579	Statement	::	713:41:20364:20365	1011152	17	True				
ANR	1011580	Statement	OK	713:43:20366:20367	1011152	18	True				
ANR	1011581	Statement	)	713:45:20368:20368	1011152	19	True				
ANR	1011582	CompoundStatement		71:47:2148:2148	1011152	20					
ANR	1011583	Statement	char	714:3:20375:20378	1011152	0	True				
ANR	1011584	Statement	*	714:8:20380:20380	1011152	1	True				
ANR	1011585	Statement	msg	714:9:20381:20383	1011152	2	True				
ANR	1011586	Statement	=	714:13:20385:20385	1011152	3	True				
ANR	1011587	Statement	escape_spaces	714:15:20387:20399	1011152	4	True				
ANR	1011588	Statement	(	714:28:20400:20400	1011152	5	True				
ANR	1011589	Statement	resp	714:30:20402:20405	1011152	6	True				
ANR	1011590	Statement	[	714:34:20406:20406	1011152	7	True				
ANR	1011591	Statement	*	714:35:20407:20407	1011152	8	True				
ANR	1011592	Statement	it	714:36:20408:20409	1011152	9	True				
ANR	1011593	Statement	]	714:38:20410:20410	1011152	10	True				
ANR	1011594	Statement	.	714:39:20411:20411	1011152	11	True				
ANR	1011595	Statement	get	714:40:20412:20414	1011152	12	True				
ANR	1011596	Statement	<	714:43:20415:20415	1011152	13	True				
ANR	1011597	Statement	2	714:44:20416:20416	1011152	14	True				
ANR	1011598	Statement	>	714:45:20417:20417	1011152	15	True				
ANR	1011599	Statement	(	714:46:20418:20418	1011152	16	True				
ANR	1011600	Statement	)	714:47:20419:20419	1011152	17	True				
ANR	1011601	Statement	.	714:48:20420:20420	1011152	18	True				
ANR	1011602	Statement	c_str	714:49:20421:20425	1011152	19	True				
ANR	1011603	Statement	(	714:54:20426:20426	1011152	20	True				
ANR	1011604	Statement	)	714:55:20427:20427	1011152	21	True				
ANR	1011605	Statement	)	714:57:20429:20429	1011152	22	True				
ANR	1011606	ExpressionStatement		714:58:20430:20430	1011152	23	True				
ANR	1011607	ExpressionStatement	"result_line = * it + "" CREAM_Job_Register\\\\ Error:\\\\ "" + msg"	715:3:20435:20494	1011152	24	True				
ANR	1011608	AssignmentExpression	"result_line = * it + "" CREAM_Job_Register\\\\ Error:\\\\ "" + msg"		1011152	0		=			
ANR	1011609	Identifier	result_line		1011152	0					
ANR	1011610	AdditiveExpression	"* it + "" CREAM_Job_Register\\\\ Error:\\\\ "" + msg"		1011152	1		+			
ANR	1011611	UnaryOperationExpression	* it		1011152	0					
ANR	1011612	UnaryOperator	*		1011152	0					
ANR	1011613	Identifier	it		1011152	1					
ANR	1011614	AdditiveExpression	""" CREAM_Job_Register\\\\ Error:\\\\ "" + msg"		1011152	1		+			
ANR	1011615	PrimaryExpression	""" CREAM_Job_Register\\\\ Error:\\\\ """		1011152	0					
ANR	1011616	Identifier	msg		1011152	1					
ANR	1011617	ExpressionStatement	enqueue_result ( result_line )	716:3:20499:20528	1011152	25	True				
ANR	1011618	CallExpression	enqueue_result ( result_line )		1011152	0					
ANR	1011619	Callee	enqueue_result		1011152	0					
ANR	1011620	Identifier	enqueue_result		1011152	0					
ANR	1011621	ArgumentList	result_line		1011152	1					
ANR	1011622	Argument	result_line		1011152	0					
ANR	1011623	Identifier	result_line		1011152	0					
ANR	1011624	ExpressionStatement	free ( msg )	717:3:20533:20544	1011152	26	True				
ANR	1011625	CallExpression	free ( msg )		1011152	0					
ANR	1011626	Callee	free		1011152	0					
ANR	1011627	Identifier	free		1011152	0					
ANR	1011628	ArgumentList	msg		1011152	1					
ANR	1011629	Argument	msg		1011152	0					
ANR	1011630	Identifier	msg		1011152	0					
ANR	1011631	ContinueStatement	continue ;	718:3:20549:20557	1011152	27	True				
ANR	1011632	IdentifierDeclStatement	"map < string , string > props ;"	721:2:20566:20591	1011152	21	True				
ANR	1011633	IdentifierDecl	props		1011152	0					
ANR	1011634	IdentifierDeclType	"map < string , string >"		1011152	0					
ANR	1011635	Identifier	props		1011152	1					
ANR	1011636	Statement	resp	722:2:20595:20598	1011152	22	True				
ANR	1011637	Statement	[	722:6:20599:20599	1011152	23	True				
ANR	1011638	Statement	*	722:7:20600:20600	1011152	24	True				
ANR	1011639	Statement	it	722:8:20601:20602	1011152	25	True				
ANR	1011640	Statement	]	722:10:20603:20603	1011152	26	True				
ANR	1011641	Statement	.	722:11:20604:20604	1011152	27	True				
ANR	1011642	Statement	get	722:12:20605:20607	1011152	28	True				
ANR	1011643	Statement	<	722:15:20608:20608	1011152	29	True				
ANR	1011644	Statement	1	722:16:20609:20609	1011152	30	True				
ANR	1011645	Statement	>	722:17:20610:20610	1011152	31	True				
ANR	1011646	Statement	(	722:18:20611:20611	1011152	32	True				
ANR	1011647	Statement	)	722:19:20612:20612	1011152	33	True				
ANR	1011648	Statement	.	722:20:20613:20613	1011152	34	True				
ANR	1011649	ExpressionStatement	getProperties ( props )	722:21:20614:20634	1011152	35	True				
ANR	1011650	CallExpression	getProperties ( props )		1011152	0					
ANR	1011651	Callee	getProperties		1011152	0					
ANR	1011652	Identifier	getProperties		1011152	0					
ANR	1011653	ArgumentList	props		1011152	1					
ANR	1011654	Argument	props		1011152	0					
ANR	1011655	Identifier	props		1011152	0					
ANR	1011656	Statement	result_line	723:2:20638:20648	1011152	36	True				
ANR	1011657	Statement	=	723:14:20650:20650	1011152	37	True				
ANR	1011658	Statement	*	723:16:20652:20652	1011152	38	True				
ANR	1011659	Statement	it	723:17:20653:20654	1011152	39	True				
ANR	1011660	Statement	+	723:20:20656:20656	1011152	40	True				
ANR	1011661	Statement	""" NULL """	724:3:20661:20668	1011152	41	True				
ANR	1011662	Statement	+	724:12:20670:20670	1011152	42	True				
ANR	1011663	Statement	resp	725:3:20675:20678	1011152	43	True				
ANR	1011664	Statement	[	725:7:20679:20679	1011152	44	True				
ANR	1011665	Statement	*	725:8:20680:20680	1011152	45	True				
ANR	1011666	Statement	it	725:9:20681:20682	1011152	46	True				
ANR	1011667	Statement	]	725:11:20683:20683	1011152	47	True				
ANR	1011668	Statement	.	725:12:20684:20684	1011152	48	True				
ANR	1011669	Statement	get	725:13:20685:20687	1011152	49	True				
ANR	1011670	Statement	<	725:16:20688:20688	1011152	50	True				
ANR	1011671	Statement	1	725:17:20689:20689	1011152	51	True				
ANR	1011672	Statement	>	725:18:20690:20690	1011152	52	True				
ANR	1011673	Statement	(	725:19:20691:20691	1011152	53	True				
ANR	1011674	Statement	)	725:20:20692:20692	1011152	54	True				
ANR	1011675	Statement	.	725:21:20693:20693	1011152	55	True				
ANR	1011676	ExpressionStatement	"getCreamJobID ( ) + sp + props [ ""CREAMInputSandboxURI"" ] + sp + props [ ""CREAMOutputSandboxURI"" ]"	725:22:20694:20796	1011152	56	True				
ANR	1011677	AdditiveExpression	"getCreamJobID ( ) + sp + props [ ""CREAMInputSandboxURI"" ] + sp + props [ ""CREAMOutputSandboxURI"" ]"		1011152	0		+			
ANR	1011678	CallExpression	getCreamJobID ( )		1011152	0					
ANR	1011679	Callee	getCreamJobID		1011152	0					
ANR	1011680	Identifier	getCreamJobID		1011152	0					
ANR	1011681	ArgumentList			1011152	1					
ANR	1011682	AdditiveExpression	"sp + props [ ""CREAMInputSandboxURI"" ] + sp + props [ ""CREAMOutputSandboxURI"" ]"		1011152	1		+			
ANR	1011683	Identifier	sp		1011152	0					
ANR	1011684	AdditiveExpression	"props [ ""CREAMInputSandboxURI"" ] + sp + props [ ""CREAMOutputSandboxURI"" ]"		1011152	1		+			
ANR	1011685	ArrayIndexing	"props [ ""CREAMInputSandboxURI"" ]"		1011152	0					
ANR	1011686	Identifier	props		1011152	0					
ANR	1011687	PrimaryExpression	"""CREAMInputSandboxURI"""		1011152	1					
ANR	1011688	AdditiveExpression	"sp + props [ ""CREAMOutputSandboxURI"" ]"		1011152	1		+			
ANR	1011689	Identifier	sp		1011152	0					
ANR	1011690	ArrayIndexing	"props [ ""CREAMOutputSandboxURI"" ]"		1011152	1					
ANR	1011691	Identifier	props		1011152	0					
ANR	1011692	PrimaryExpression	"""CREAMOutputSandboxURI"""		1011152	1					
ANR	1011693	ExpressionStatement	enqueue_result ( result_line )	730:2:20800:20827	1011152	57	True				
ANR	1011694	CallExpression	enqueue_result ( result_line )		1011152	0					
ANR	1011695	Callee	enqueue_result		1011152	0					
ANR	1011696	Identifier	enqueue_result		1011152	0					
ANR	1011697	ArgumentList	result_line		1011152	1					
ANR	1011698	Argument	result_line		1011152	0					
ANR	1011699	Identifier	result_line		1011152	0					
ANR	1011700	ReturnStatement	return 0 ;	733:1:20834:20842	1011152	11	True				
ANR	1011701	PrimaryExpression	0		1011152	0					
ANR	1011702	ReturnType	int		1011152	1					
ANR	1011703	Identifier	thread_cream_job_register		1011152	2					
ANR	1011704	ParameterList	Request * * reqlist		1011152	3					
ANR	1011705	Parameter	Request * * reqlist	642:31:18201:18217	1011152	0	True				
ANR	1011706	ParameterType	Request * *		1011152	0					
ANR	1011707	Identifier	reqlist		1011152	1					
ANR	1011708	CFGEntryNode	ENTRY		1011152		True				
ANR	1011709	CFGExitNode	EXIT		1011152		True				
ANR	1011710	CFGErrorNode	ERROR		1011152		True				
ANR	1011711	Symbol	reqs		1011152						
ANR	1011712	Symbol	msg		1011152						
ANR	1011713	Symbol	NULL		1011152						
ANR	1011714	Symbol	reqlist [ 0 ] -> input_line		1011152						
ANR	1011715	Symbol	resp		1011152						
ANR	1011716	Symbol	* * * reqlist		1011152						
ANR	1011717	Symbol	reqids . end		1011152						
ANR	1011718	Symbol	it		1011152						
ANR	1011719	Symbol	* reqlist		1011152						
ANR	1011720	Symbol	cp		1011152						
ANR	1011721	Symbol	* * reqlist		1011152						
ANR	1011722	Symbol	result_line		1011152						
ANR	1011723	Symbol	props		1011152						
ANR	1011724	Symbol	resp . find		1011152						
ANR	1011725	Symbol	proxy		1011152						
ANR	1011726	Symbol	resp . end		1011152						
ANR	1011727	Symbol	* it		1011152						
ANR	1011728	Symbol	reqlist		1011152						
ANR	1011729	Symbol	reqids		1011152						
ANR	1011730	Symbol	service		1011152						
ANR	1011731	Symbol	reqlist [ 0 ] -> proxy		1011152						
ANR	1011732	Symbol	* reqlist [ 0 ] -> input_line		1011152						
ANR	1011733	Symbol	reqids . begin		1011152						
ANR	1011734	Function	handle_cream_job_start	740:0:21047:21855							
ANR	1011735	FunctionDef	handle_cream_job_start (char * * input_line)		1011734	0					
ANR	1011736	CompoundStatement		741:0:21095:21855	1011734	0					
ANR	1011737	IdentifierDeclStatement	int arg_cnt = count_args ( input_line ) ;	742:1:21098:21136	1011734	0	True				
ANR	1011738	IdentifierDecl	arg_cnt = count_args ( input_line )		1011734	0					
ANR	1011739	IdentifierDeclType	int		1011734	0					
ANR	1011740	Identifier	arg_cnt		1011734	1					
ANR	1011741	AssignmentExpression	arg_cnt = count_args ( input_line )		1011734	2		=			
ANR	1011742	Identifier	arg_cnt		1011734	0					
ANR	1011743	CallExpression	count_args ( input_line )		1011734	1					
ANR	1011744	Callee	count_args		1011734	0					
ANR	1011745	Identifier	count_args		1011734	0					
ANR	1011746	ArgumentList	input_line		1011734	1					
ANR	1011747	Argument	input_line		1011734	0					
ANR	1011748	Identifier	input_line		1011734	0					
ANR	1011749	IdentifierDeclStatement	char * jobnum = NULL ;	743:1:21139:21158	1011734	1	True				
ANR	1011750	IdentifierDecl	* jobnum = NULL		1011734	0					
ANR	1011751	IdentifierDeclType	char *		1011734	0					
ANR	1011752	Identifier	jobnum		1011734	1					
ANR	1011753	AssignmentExpression	* jobnum = NULL		1011734	2		=			
ANR	1011754	Identifier	NULL		1011734	0					
ANR	1011755	Identifier	NULL		1011734	1					
ANR	1011756	IfStatement	if ( arg_cnt == 4 )		1011734	2					
ANR	1011757	Condition	arg_cnt == 4	752:6:21472:21483	1011734	0	True				
ANR	1011758	EqualityExpression	arg_cnt == 4		1011734	0		==			
ANR	1011759	Identifier	arg_cnt		1011734	0					
ANR	1011760	PrimaryExpression	4		1011734	1					
ANR	1011761	CompoundStatement		12:21:391:391	1011734	1					
ANR	1011762	ExpressionStatement	input_line [ 5 ] = input_line [ 4 ]	753:2:21491:21520	1011734	0	True				
ANR	1011763	AssignmentExpression	input_line [ 5 ] = input_line [ 4 ]		1011734	0		=			
ANR	1011764	ArrayIndexing	input_line [ 5 ]		1011734	0					
ANR	1011765	Identifier	input_line		1011734	0					
ANR	1011766	PrimaryExpression	5		1011734	1					
ANR	1011767	ArrayIndexing	input_line [ 4 ]		1011734	1					
ANR	1011768	Identifier	input_line		1011734	0					
ANR	1011769	PrimaryExpression	4		1011734	1					
ANR	1011770	ExpressionStatement	input_line [ 4 ] = input_line [ 3 ]	754:2:21524:21553	1011734	1	True				
ANR	1011771	AssignmentExpression	input_line [ 4 ] = input_line [ 3 ]		1011734	0		=			
ANR	1011772	ArrayIndexing	input_line [ 4 ]		1011734	0					
ANR	1011773	Identifier	input_line		1011734	0					
ANR	1011774	PrimaryExpression	4		1011734	1					
ANR	1011775	ArrayIndexing	input_line [ 3 ]		1011734	1					
ANR	1011776	Identifier	input_line		1011734	0					
ANR	1011777	PrimaryExpression	3		1011734	1					
ANR	1011778	ExpressionStatement	"input_line [ 3 ] = strdup ( ""1"" )"	755:2:21557:21586	1011734	2	True				
ANR	1011779	AssignmentExpression	"input_line [ 3 ] = strdup ( ""1"" )"		1011734	0		=			
ANR	1011780	ArrayIndexing	input_line [ 3 ]		1011734	0					
ANR	1011781	Identifier	input_line		1011734	0					
ANR	1011782	PrimaryExpression	3		1011734	1					
ANR	1011783	CallExpression	"strdup ( ""1"" )"		1011734	1					
ANR	1011784	Callee	strdup		1011734	0					
ANR	1011785	Identifier	strdup		1011734	0					
ANR	1011786	ArgumentList	"""1"""		1011734	1					
ANR	1011787	Argument	"""1"""		1011734	0					
ANR	1011788	PrimaryExpression	"""1"""		1011734	0					
ANR	1011789	ExpressionStatement	arg_cnt = 5	756:2:21590:21601	1011734	3	True				
ANR	1011790	AssignmentExpression	arg_cnt = 5		1011734	0		=			
ANR	1011791	Identifier	arg_cnt		1011734	0					
ANR	1011792	PrimaryExpression	5		1011734	1					
ANR	1011793	ExpressionStatement	"process_string_arg ( input_line [ 3 ] , & jobnum )"	759:1:21608:21652	1011734	3	True				
ANR	1011794	CallExpression	"process_string_arg ( input_line [ 3 ] , & jobnum )"		1011734	0					
ANR	1011795	Callee	process_string_arg		1011734	0					
ANR	1011796	Identifier	process_string_arg		1011734	0					
ANR	1011797	ArgumentList	input_line [ 3 ]		1011734	1					
ANR	1011798	Argument	input_line [ 3 ]		1011734	0					
ANR	1011799	ArrayIndexing	input_line [ 3 ]		1011734	0					
ANR	1011800	Identifier	input_line		1011734	0					
ANR	1011801	PrimaryExpression	3		1011734	1					
ANR	1011802	Argument	& jobnum		1011734	1					
ANR	1011803	UnaryOperationExpression	& jobnum		1011734	0					
ANR	1011804	UnaryOperator	&		1011734	0					
ANR	1011805	Identifier	jobnum		1011734	1					
ANR	1011806	IfStatement	if ( jobnum && ( atoi ( jobnum ) + 4 != arg_cnt ) )		1011734	4					
ANR	1011807	Condition	jobnum && ( atoi ( jobnum ) + 4 != arg_cnt )	760:6:21660:21702	1011734	0	True				
ANR	1011808	AndExpression	jobnum && ( atoi ( jobnum ) + 4 != arg_cnt )		1011734	0		&&			
ANR	1011809	Identifier	jobnum		1011734	0					
ANR	1011810	EqualityExpression	atoi ( jobnum ) + 4 != arg_cnt		1011734	1		!=			
ANR	1011811	AdditiveExpression	atoi ( jobnum ) + 4		1011734	0		+			
ANR	1011812	CallExpression	atoi ( jobnum )		1011734	0					
ANR	1011813	Callee	atoi		1011734	0					
ANR	1011814	Identifier	atoi		1011734	0					
ANR	1011815	ArgumentList	jobnum		1011734	1					
ANR	1011816	Argument	jobnum		1011734	0					
ANR	1011817	Identifier	jobnum		1011734	0					
ANR	1011818	PrimaryExpression	4		1011734	1					
ANR	1011819	Identifier	arg_cnt		1011734	1					
ANR	1011820	CompoundStatement		20:52:610:610	1011734	1					
ANR	1011821	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	761:2:21710:21731	1011734	0	True				
ANR	1011822	CallExpression	HANDLE_SYNTAX_ERROR ( )		1011734	0					
ANR	1011823	Callee	HANDLE_SYNTAX_ERROR		1011734	0					
ANR	1011824	Identifier	HANDLE_SYNTAX_ERROR		1011734	0					
ANR	1011825	ArgumentList			1011734	1					
ANR	1011826	ExpressionStatement	"enqueue_request_batch ( input_line , thread_cream_job_start , cmp_request_single )"	764:1:21738:21817	1011734	5	True				
ANR	1011827	CallExpression	"enqueue_request_batch ( input_line , thread_cream_job_start , cmp_request_single )"		1011734	0					
ANR	1011828	Callee	enqueue_request_batch		1011734	0					
ANR	1011829	Identifier	enqueue_request_batch		1011734	0					
ANR	1011830	ArgumentList	input_line		1011734	1					
ANR	1011831	Argument	input_line		1011734	0					
ANR	1011832	Identifier	input_line		1011734	0					
ANR	1011833	Argument	thread_cream_job_start		1011734	1					
ANR	1011834	Identifier	thread_cream_job_start		1011734	0					
ANR	1011835	Argument	cmp_request_single		1011734	2					
ANR	1011836	Identifier	cmp_request_single		1011734	0					
ANR	1011837	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	766:1:21821:21839	1011734	6	True				
ANR	1011838	CallExpression	"gahp_printf ( ""S\\n"" )"		1011734	0					
ANR	1011839	Callee	gahp_printf		1011734	0					
ANR	1011840	Identifier	gahp_printf		1011734	0					
ANR	1011841	ArgumentList	"""S\\n"""		1011734	1					
ANR	1011842	Argument	"""S\\n"""		1011734	0					
ANR	1011843	PrimaryExpression	"""S\\n"""		1011734	0					
ANR	1011844	ReturnStatement	return 0 ;	768:1:21845:21853	1011734	7	True				
ANR	1011845	PrimaryExpression	0		1011734	0					
ANR	1011846	ReturnType	int		1011734	1					
ANR	1011847	Identifier	handle_cream_job_start		1011734	2					
ANR	1011848	ParameterList	char * * input_line		1011734	3					
ANR	1011849	Parameter	char * * input_line	740:28:21075:21091	1011734	0	True				
ANR	1011850	ParameterType	char * *		1011734	0					
ANR	1011851	Identifier	input_line		1011734	1					
ANR	1011852	CFGEntryNode	ENTRY		1011734		True				
ANR	1011853	CFGExitNode	EXIT		1011734		True				
ANR	1011854	Symbol	atoi		1011734						
ANR	1011855	Symbol	* input_line		1011734						
ANR	1011856	Symbol	NULL		1011734						
ANR	1011857	Symbol	& jobnum		1011734						
ANR	1011858	Symbol	jobnum		1011734						
ANR	1011859	Symbol	thread_cream_job_start		1011734						
ANR	1011860	Symbol	count_args		1011734						
ANR	1011861	Symbol	cmp_request_single		1011734						
ANR	1011862	Symbol	input_line		1011734						
ANR	1011863	Symbol	strdup		1011734						
ANR	1011864	Symbol	arg_cnt		1011734						
ANR	1011865	Function	thread_cream_job_start	771:0:21858:23827							
ANR	1011866	FunctionDef	thread_cream_job_start (Request * * reqlist)		1011865	0					
ANR	1011867	CompoundStatement		772:0:21906:23827	1011865	0					
ANR	1011868	IfStatement	if ( reqlist == NULL )		1011865	0					
ANR	1011869	Condition	reqlist == NULL	778:4:22133:22147	1011865	0	True				
ANR	1011870	EqualityExpression	reqlist == NULL		1011865	0		==			
ANR	1011871	Identifier	reqlist		1011865	0					
ANR	1011872	Identifier	NULL		1011865	1					
ANR	1011873	CompoundStatement		7:21:243:243	1011865	1					
ANR	1011874	ExpressionStatement	"internal_error ( ""thread_cream_job_start called with NULL pointer\\n"" )"	779:2:22154:22221	1011865	0	True				
ANR	1011875	CallExpression	"internal_error ( ""thread_cream_job_start called with NULL pointer\\n"" )"		1011865	0					
ANR	1011876	Callee	internal_error		1011865	0					
ANR	1011877	Identifier	internal_error		1011865	0					
ANR	1011878	ArgumentList	"""thread_cream_job_start called with NULL pointer\\n"""		1011865	1					
ANR	1011879	Argument	"""thread_cream_job_start called with NULL pointer\\n"""		1011865	0					
ANR	1011880	PrimaryExpression	"""thread_cream_job_start called with NULL pointer\\n"""		1011865	0					
ANR	1011881	IfStatement	if ( reqlist [ 0 ] == NULL )		1011865	1					
ANR	1011882	Condition	reqlist [ 0 ] == NULL	781:4:22230:22247	1011865	0	True				
ANR	1011883	EqualityExpression	reqlist [ 0 ] == NULL		1011865	0		==			
ANR	1011884	ArrayIndexing	reqlist [ 0 ]		1011865	0					
ANR	1011885	Identifier	reqlist		1011865	0					
ANR	1011886	PrimaryExpression	0		1011865	1					
ANR	1011887	Identifier	NULL		1011865	1					
ANR	1011888	CompoundStatement		10:24:343:343	1011865	1					
ANR	1011889	ExpressionStatement	"internal_error ( ""thread_cream_job_start called with empty list\\n"" )"	782:2:22254:22319	1011865	0	True				
ANR	1011890	CallExpression	"internal_error ( ""thread_cream_job_start called with empty list\\n"" )"		1011865	0					
ANR	1011891	Callee	internal_error		1011865	0					
ANR	1011892	Identifier	internal_error		1011865	0					
ANR	1011893	ArgumentList	"""thread_cream_job_start called with empty list\\n"""		1011865	1					
ANR	1011894	Argument	"""thread_cream_job_start called with empty list\\n"""		1011865	0					
ANR	1011895	PrimaryExpression	"""thread_cream_job_start called with empty list\\n"""		1011865	0					
ANR	1011896	IdentifierDeclStatement	char * service ;	785:1:22327:22340	1011865	2	True				
ANR	1011897	IdentifierDecl	* service		1011865	0					
ANR	1011898	IdentifierDeclType	char *		1011865	0					
ANR	1011899	Identifier	service		1011865	1					
ANR	1011900	ExpressionStatement	"process_string_arg ( reqlist [ 0 ] -> input_line [ 2 ] , & service )"	786:1:22343:22400	1011865	3	True				
ANR	1011901	CallExpression	"process_string_arg ( reqlist [ 0 ] -> input_line [ 2 ] , & service )"		1011865	0					
ANR	1011902	Callee	process_string_arg		1011865	0					
ANR	1011903	Identifier	process_string_arg		1011865	0					
ANR	1011904	ArgumentList	reqlist [ 0 ] -> input_line [ 2 ]		1011865	1					
ANR	1011905	Argument	reqlist [ 0 ] -> input_line [ 2 ]		1011865	0					
ANR	1011906	ArrayIndexing	reqlist [ 0 ] -> input_line [ 2 ]		1011865	0					
ANR	1011907	PtrMemberAccess	reqlist [ 0 ] -> input_line		1011865	0					
ANR	1011908	ArrayIndexing	reqlist [ 0 ]		1011865	0					
ANR	1011909	Identifier	reqlist		1011865	0					
ANR	1011910	PrimaryExpression	0		1011865	1					
ANR	1011911	Identifier	input_line		1011865	1					
ANR	1011912	PrimaryExpression	2		1011865	1					
ANR	1011913	Argument	& service		1011865	1					
ANR	1011914	UnaryOperationExpression	& service		1011865	0					
ANR	1011915	UnaryOperator	&		1011865	0					
ANR	1011916	Identifier	service		1011865	1					
ANR	1011917	IdentifierDeclStatement	string proxy = reqlist [ 0 ] -> proxy ;	787:1:22403:22435	1011865	4	True				
ANR	1011918	IdentifierDecl	proxy = reqlist [ 0 ] -> proxy		1011865	0					
ANR	1011919	IdentifierDeclType	string		1011865	0					
ANR	1011920	Identifier	proxy		1011865	1					
ANR	1011921	AssignmentExpression	proxy = reqlist [ 0 ] -> proxy		1011865	2		=			
ANR	1011922	Identifier	proxy		1011865	0					
ANR	1011923	PtrMemberAccess	reqlist [ 0 ] -> proxy		1011865	1					
ANR	1011924	ArrayIndexing	reqlist [ 0 ]		1011865	0					
ANR	1011925	Identifier	reqlist		1011865	0					
ANR	1011926	PrimaryExpression	0		1011865	1					
ANR	1011927	Identifier	proxy		1011865	1					
ANR	1011928	IdentifierDeclStatement	AbsCreamProxy * cp = NULL ;	788:1:22438:22462	1011865	5	True				
ANR	1011929	IdentifierDecl	* cp = NULL		1011865	0					
ANR	1011930	IdentifierDeclType	AbsCreamProxy *		1011865	0					
ANR	1011931	Identifier	cp		1011865	1					
ANR	1011932	AssignmentExpression	* cp = NULL		1011865	2		=			
ANR	1011933	Identifier	NULL		1011865	0					
ANR	1011934	Identifier	NULL		1011865	1					
ANR	1011935	IdentifierDeclStatement	vector < string > reqids ;	790:1:22466:22487	1011865	6	True				
ANR	1011936	IdentifierDecl	reqids		1011865	0					
ANR	1011937	IdentifierDeclType	vector < string >		1011865	0					
ANR	1011938	Identifier	reqids		1011865	1					
ANR	1011939	IdentifierDeclStatement	"map < string , string > results ;"	791:1:22490:22517	1011865	7	True				
ANR	1011940	IdentifierDecl	results		1011865	0					
ANR	1011941	IdentifierDeclType	"map < string , string >"		1011865	0					
ANR	1011942	Identifier	results		1011865	1					
ANR	1011943	TryStatement	try		1011865	8					
ANR	1011944	CompoundStatement		33:2:1006:1022	1011865	0					
ANR	1011945	IdentifierDeclStatement	vector < JobIdWrapper > jv ;		1011865	0					
ANR	1011946	IdentifierDecl	jv		1011865	0					
ANR	1011947	IdentifierDeclType	vector < JobIdWrapper >		1011865	0					
ANR	1011948	Identifier	jv		1011865	1					
ANR	1011949	ExpressionStatement	"collect_job_ids ( reqlist , jv , reqids )"		1011865	1					
ANR	1011950	CallExpression	"collect_job_ids ( reqlist , jv , reqids )"		1011865	0					
ANR	1011951	Callee	collect_job_ids		1011865	0					
ANR	1011952	Identifier	collect_job_ids		1011865	0					
ANR	1011953	ArgumentList	reqlist		1011865	1					
ANR	1011954	Argument	reqlist		1011865	0					
ANR	1011955	Identifier	reqlist		1011865	0					
ANR	1011956	Argument	jv		1011865	1					
ANR	1011957	Identifier	jv		1011865	0					
ANR	1011958	Argument	reqids		1011865	2					
ANR	1011959	Identifier	reqids		1011865	0					
ANR	1011960	IdentifierDeclStatement	vector < string > sv ;		1011865	2					
ANR	1011961	IdentifierDecl	sv		1011865	0					
ANR	1011962	IdentifierDeclType	vector < string >		1011865	0					
ANR	1011963	Identifier	sv		1011865	1					
ANR	1011964	IdentifierDeclStatement	"JobFilterWrapper jfw ( jv , sv , - 1 , - 1 , """" , """" ) ;"		1011865	3					
ANR	1011965	IdentifierDecl	"jfw ( jv , sv , - 1 , - 1 , """" , """" )"		1011865	0					
ANR	1011966	IdentifierDeclType	JobFilterWrapper		1011865	0					
ANR	1011967	Identifier	jfw		1011865	1					
ANR	1011968	Expression	"jv , sv , - 1 , - 1 , """" , """""		1011865	2					
ANR	1011969	Identifier	jv		1011865	0					
ANR	1011970	Expression	"sv , - 1 , - 1 , """" , """""		1011865	1					
ANR	1011971	Identifier	sv		1011865	0					
ANR	1011972	Expression	"- 1 , - 1 , """" , """""		1011865	1					
ANR	1011973	UnaryOperationExpression	- 1		1011865	0					
ANR	1011974	UnaryOperator	-		1011865	0					
ANR	1011975	PrimaryExpression	1		1011865	1					
ANR	1011976	Expression	"- 1 , """" , """""		1011865	1					
ANR	1011977	UnaryOperationExpression	- 1		1011865	0					
ANR	1011978	UnaryOperator	-		1011865	0					
ANR	1011979	PrimaryExpression	1		1011865	1					
ANR	1011980	Expression	""""" , """""		1011865	1					
ANR	1011981	PrimaryExpression	""""""		1011865	0					
ANR	1011982	PrimaryExpression	""""""		1011865	1					
ANR	1011983	IdentifierDeclStatement	ResultWrapper rw ;		1011865	4					
ANR	1011984	IdentifierDecl	rw		1011865	0					
ANR	1011985	IdentifierDeclType	ResultWrapper		1011865	0					
ANR	1011986	Identifier	rw		1011865	1					
ANR	1011987	ExpressionStatement	"cp = CreamProxyFactory :: make_CreamProxyStart ( & jfw , & rw , DEFAULT_TIMEOUT )"		1011865	5					
ANR	1011988	AssignmentExpression	"cp = CreamProxyFactory :: make_CreamProxyStart ( & jfw , & rw , DEFAULT_TIMEOUT )"		1011865	0		=			
ANR	1011989	Identifier	cp		1011865	0					
ANR	1011990	CallExpression	"CreamProxyFactory :: make_CreamProxyStart ( & jfw , & rw , DEFAULT_TIMEOUT )"		1011865	1					
ANR	1011991	Callee	CreamProxyFactory :: make_CreamProxyStart		1011865	0					
ANR	1011992	Identifier	CreamProxyFactory :: make_CreamProxyStart		1011865	0					
ANR	1011993	ArgumentList	& jfw		1011865	1					
ANR	1011994	Argument	& jfw		1011865	0					
ANR	1011995	UnaryOperationExpression	& jfw		1011865	0					
ANR	1011996	UnaryOperator	&		1011865	0					
ANR	1011997	Identifier	jfw		1011865	1					
ANR	1011998	Argument	& rw		1011865	1					
ANR	1011999	UnaryOperationExpression	& rw		1011865	0					
ANR	1012000	UnaryOperator	&		1011865	0					
ANR	1012001	Identifier	rw		1011865	1					
ANR	1012002	Argument	DEFAULT_TIMEOUT		1011865	2					
ANR	1012003	Identifier	DEFAULT_TIMEOUT		1011865	0					
ANR	1012004	ExpressionStatement	check_for_factory_error ( cp )		1011865	6					
ANR	1012005	CallExpression	check_for_factory_error ( cp )		1011865	0					
ANR	1012006	Callee	check_for_factory_error		1011865	0					
ANR	1012007	Identifier	check_for_factory_error		1011865	0					
ANR	1012008	ArgumentList	cp		1011865	1					
ANR	1012009	Argument	cp		1011865	0					
ANR	1012010	Identifier	cp		1011865	0					
ANR	1012011	ExpressionStatement	cp -> setCredential ( proxy . c_str ( ) )		1011865	7					
ANR	1012012	CallExpression	cp -> setCredential ( proxy . c_str ( ) )		1011865	0					
ANR	1012013	Callee	cp -> setCredential		1011865	0					
ANR	1012014	PtrMemberAccess	cp -> setCredential		1011865	0					
ANR	1012015	Identifier	cp		1011865	0					
ANR	1012016	Identifier	setCredential		1011865	1					
ANR	1012017	ArgumentList	proxy . c_str ( )		1011865	1					
ANR	1012018	Argument	proxy . c_str ( )		1011865	0					
ANR	1012019	CallExpression	proxy . c_str ( )		1011865	0					
ANR	1012020	Callee	proxy . c_str		1011865	0					
ANR	1012021	MemberAccess	proxy . c_str		1011865	0					
ANR	1012022	Identifier	proxy		1011865	0					
ANR	1012023	Identifier	c_str		1011865	1					
ANR	1012024	ArgumentList			1011865	1					
ANR	1012025	ExpressionStatement	cp -> execute ( service )		1011865	8					
ANR	1012026	CallExpression	cp -> execute ( service )		1011865	0					
ANR	1012027	Callee	cp -> execute		1011865	0					
ANR	1012028	PtrMemberAccess	cp -> execute		1011865	0					
ANR	1012029	Identifier	cp		1011865	0					
ANR	1012030	Identifier	execute		1011865	1					
ANR	1012031	ArgumentList	service		1011865	1					
ANR	1012032	Argument	service		1011865	0					
ANR	1012033	Identifier	service		1011865	0					
ANR	1012034	ExpressionStatement	"check_result_wrapper2 ( rw , results )"		1011865	9					
ANR	1012035	CallExpression	"check_result_wrapper2 ( rw , results )"		1011865	0					
ANR	1012036	Callee	check_result_wrapper2		1011865	0					
ANR	1012037	Identifier	check_result_wrapper2		1011865	0					
ANR	1012038	ArgumentList	rw		1011865	1					
ANR	1012039	Argument	rw		1011865	0					
ANR	1012040	Identifier	rw		1011865	0					
ANR	1012041	Argument	results		1011865	1					
ANR	1012042	Identifier	results		1011865	0					
ANR	1012043	Statement	delete		1011865	10					
ANR	1012044	ExpressionStatement	cp		1011865	11					
ANR	1012045	Identifier	cp		1011865	0					
ANR	1012046	CatchList			1011865	1					
ANR	1012047	CatchStatement	catch ( std :: exception & ex )		1011865	0					
ANR	1012048	Identifier	ex		1011865	0					
ANR	1012049	CompoundStatement		43:27:1300:1300	1011865	1					
ANR	1012050	Statement	delete	815:2:23211:23216	1011865	0	True				
ANR	1012051	ExpressionStatement	cp	815:9:23218:23220	1011865	1	True				
ANR	1012052	Identifier	cp		1011865	0					
ANR	1012053	ForStatement	for ( vector < string > :: const_iterator it = reqids . begin ( ) ; it != reqids . end ( ) ; it ++ )		1011865	2					
ANR	1012054	ForInit	vector < string > :: const_iterator it = reqids . begin ( ) ;	816:6:23228:23278	1011865	0	True				
ANR	1012055	IdentifierDeclStatement	vector < string > :: const_iterator it = reqids . begin ( ) ;		1011865	0					
ANR	1012056	IdentifierDecl	it = reqids . begin ( )		1011865	0					
ANR	1012057	IdentifierDeclType	vector < string > :: const_iterator		1011865	0					
ANR	1012058	Identifier	it		1011865	1					
ANR	1012059	AssignmentExpression	it = reqids . begin ( )		1011865	2		=			
ANR	1012060	Identifier	it		1011865	0					
ANR	1012061	CallExpression	reqids . begin ( )		1011865	1					
ANR	1012062	Callee	reqids . begin		1011865	0					
ANR	1012063	MemberAccess	reqids . begin		1011865	0					
ANR	1012064	Identifier	reqids		1011865	0					
ANR	1012065	Identifier	begin		1011865	1					
ANR	1012066	ArgumentList			1011865	1					
ANR	1012067	Condition	it != reqids . end ( )	817:3:23283:23300	1011865	1	True				
ANR	1012068	EqualityExpression	it != reqids . end ( )		1011865	0		!=			
ANR	1012069	Identifier	it		1011865	0					
ANR	1012070	CallExpression	reqids . end ( )		1011865	1					
ANR	1012071	Callee	reqids . end		1011865	0					
ANR	1012072	MemberAccess	reqids . end		1011865	0					
ANR	1012073	Identifier	reqids		1011865	0					
ANR	1012074	Identifier	end		1011865	1					
ANR	1012075	ArgumentList			1011865	1					
ANR	1012076	PostIncDecOperationExpression	it ++	817:23:23303:23306	1011865	2	True				
ANR	1012077	Identifier	it		1011865	0					
ANR	1012078	IncDec	++		1011865	1					
ANR	1012079	CompoundStatement		48:3:1411:1447	1011865	3					
ANR	1012080	IdentifierDeclStatement	char * msg = escape_spaces ( ex . what ( ) ) ;	819:3:23318:23354	1011865	0	True				
ANR	1012081	IdentifierDecl	* msg = escape_spaces ( ex . what ( ) )		1011865	0					
ANR	1012082	IdentifierDeclType	char *		1011865	0					
ANR	1012083	Identifier	msg		1011865	1					
ANR	1012084	AssignmentExpression	* msg = escape_spaces ( ex . what ( ) )		1011865	2		=			
ANR	1012085	Identifier	msg		1011865	0					
ANR	1012086	CallExpression	escape_spaces ( ex . what ( ) )		1011865	1					
ANR	1012087	Callee	escape_spaces		1011865	0					
ANR	1012088	Identifier	escape_spaces		1011865	0					
ANR	1012089	ArgumentList	ex . what ( )		1011865	1					
ANR	1012090	Argument	ex . what ( )		1011865	0					
ANR	1012091	CallExpression	ex . what ( )		1011865	0					
ANR	1012092	Callee	ex . what		1011865	0					
ANR	1012093	MemberAccess	ex . what		1011865	0					
ANR	1012094	Identifier	ex		1011865	0					
ANR	1012095	Identifier	what		1011865	1					
ANR	1012096	ArgumentList			1011865	1					
ANR	1012097	ExpressionStatement	"enqueue_result ( ( * it ) + "" CREAM_Job_Start\\\\ Error:\\\\ "" + msg )"	820:3:23359:23419	1011865	1	True				
ANR	1012098	CallExpression	"enqueue_result ( ( * it ) + "" CREAM_Job_Start\\\\ Error:\\\\ "" + msg )"		1011865	0					
ANR	1012099	Callee	enqueue_result		1011865	0					
ANR	1012100	Identifier	enqueue_result		1011865	0					
ANR	1012101	ArgumentList	"( * it ) + "" CREAM_Job_Start\\\\ Error:\\\\ "" + msg"		1011865	1					
ANR	1012102	Argument	"( * it ) + "" CREAM_Job_Start\\\\ Error:\\\\ "" + msg"		1011865	0					
ANR	1012103	AdditiveExpression	"( * it ) + "" CREAM_Job_Start\\\\ Error:\\\\ "" + msg"		1011865	0		+			
ANR	1012104	UnaryOperationExpression	* it		1011865	0					
ANR	1012105	UnaryOperator	*		1011865	0					
ANR	1012106	Identifier	it		1011865	1					
ANR	1012107	AdditiveExpression	""" CREAM_Job_Start\\\\ Error:\\\\ "" + msg"		1011865	1		+			
ANR	1012108	PrimaryExpression	""" CREAM_Job_Start\\\\ Error:\\\\ """		1011865	0					
ANR	1012109	Identifier	msg		1011865	1					
ANR	1012110	ExpressionStatement	free ( msg )	821:3:23424:23433	1011865	2	True				
ANR	1012111	CallExpression	free ( msg )		1011865	0					
ANR	1012112	Callee	free		1011865	0					
ANR	1012113	Identifier	free		1011865	0					
ANR	1012114	ArgumentList	msg		1011865	1					
ANR	1012115	Argument	msg		1011865	0					
ANR	1012116	Identifier	msg		1011865	0					
ANR	1012117	ReturnStatement	return 1 ;	824:2:23444:23452	1011865	3	True				
ANR	1012118	PrimaryExpression	1		1011865	0					
ANR	1012119	ForStatement	for ( int idx = 0 ; reqlist [ idx ] != NULL ; idx ++ )		1011865	9					
ANR	1012120	ForInit	int idx = 0 ;	827:7:23466:23477	1011865	0	True				
ANR	1012121	IdentifierDeclStatement	int idx = 0 ;		1011865	0					
ANR	1012122	IdentifierDecl	idx = 0		1011865	0					
ANR	1012123	IdentifierDeclType	int		1011865	0					
ANR	1012124	Identifier	idx		1011865	1					
ANR	1012125	AssignmentExpression	idx = 0		1011865	2		=			
ANR	1012126	Identifier	idx		1011865	0					
ANR	1012127	PrimaryExpression	0		1011865	1					
ANR	1012128	Condition	reqlist [ idx ] != NULL	827:20:23479:23498	1011865	1	True				
ANR	1012129	EqualityExpression	reqlist [ idx ] != NULL		1011865	0		!=			
ANR	1012130	ArrayIndexing	reqlist [ idx ]		1011865	0					
ANR	1012131	Identifier	reqlist		1011865	0					
ANR	1012132	Identifier	idx		1011865	1					
ANR	1012133	Identifier	NULL		1011865	1					
ANR	1012134	PostIncDecOperationExpression	idx ++	827:42:23501:23505	1011865	2	True				
ANR	1012135	Identifier	idx		1011865	0					
ANR	1012136	IncDec	++		1011865	1					
ANR	1012137	CompoundStatement		58:2:1652:1694	1011865	3					
ANR	1012138	IdentifierDeclStatement	string reqid = reqlist [ idx ] -> input_line [ 1 ] ;	828:2:23513:23555	1011865	0	True				
ANR	1012139	IdentifierDecl	reqid = reqlist [ idx ] -> input_line [ 1 ]		1011865	0					
ANR	1012140	IdentifierDeclType	string		1011865	0					
ANR	1012141	Identifier	reqid		1011865	1					
ANR	1012142	AssignmentExpression	reqid = reqlist [ idx ] -> input_line [ 1 ]		1011865	2		=			
ANR	1012143	Identifier	reqid		1011865	0					
ANR	1012144	ArrayIndexing	reqlist [ idx ] -> input_line [ 1 ]		1011865	1					
ANR	1012145	PtrMemberAccess	reqlist [ idx ] -> input_line		1011865	0					
ANR	1012146	ArrayIndexing	reqlist [ idx ]		1011865	0					
ANR	1012147	Identifier	reqlist		1011865	0					
ANR	1012148	Identifier	idx		1011865	1					
ANR	1012149	Identifier	input_line		1011865	1					
ANR	1012150	PrimaryExpression	1		1011865	1					
ANR	1012151	IdentifierDeclStatement	string jobid = reqlist [ idx ] -> input_line [ 4 ] ;	829:2:23559:23601	1011865	1	True				
ANR	1012152	IdentifierDecl	jobid = reqlist [ idx ] -> input_line [ 4 ]		1011865	0					
ANR	1012153	IdentifierDeclType	string		1011865	0					
ANR	1012154	Identifier	jobid		1011865	1					
ANR	1012155	AssignmentExpression	jobid = reqlist [ idx ] -> input_line [ 4 ]		1011865	2		=			
ANR	1012156	Identifier	jobid		1011865	0					
ANR	1012157	ArrayIndexing	reqlist [ idx ] -> input_line [ 4 ]		1011865	1					
ANR	1012158	PtrMemberAccess	reqlist [ idx ] -> input_line		1011865	0					
ANR	1012159	ArrayIndexing	reqlist [ idx ]		1011865	0					
ANR	1012160	Identifier	reqlist		1011865	0					
ANR	1012161	Identifier	idx		1011865	1					
ANR	1012162	Identifier	input_line		1011865	1					
ANR	1012163	PrimaryExpression	4		1011865	1					
ANR	1012164	IfStatement	"if ( results [ jobid ] != """" )"		1011865	2					
ANR	1012165	Condition	"results [ jobid ] != """""	830:7:23610:23629	1011865	0	True				
ANR	1012166	EqualityExpression	"results [ jobid ] != """""		1011865	0		!=			
ANR	1012167	ArrayIndexing	results [ jobid ]		1011865	0					
ANR	1012168	Identifier	results		1011865	0					
ANR	1012169	Identifier	jobid		1011865	1					
ANR	1012170	PrimaryExpression	""""""		1011865	1					
ANR	1012171	CompoundStatement		60:3:1731:1782	1011865	1					
ANR	1012172	IdentifierDeclStatement	char * msg = escape_spaces ( results [ jobid ] . c_str ( ) ) ;	831:3:23638:23689	1011865	0	True				
ANR	1012173	IdentifierDecl	* msg = escape_spaces ( results [ jobid ] . c_str ( ) )		1011865	0					
ANR	1012174	IdentifierDeclType	char *		1011865	0					
ANR	1012175	Identifier	msg		1011865	1					
ANR	1012176	AssignmentExpression	* msg = escape_spaces ( results [ jobid ] . c_str ( ) )		1011865	2		=			
ANR	1012177	Identifier	msg		1011865	0					
ANR	1012178	CallExpression	escape_spaces ( results [ jobid ] . c_str ( ) )		1011865	1					
ANR	1012179	Callee	escape_spaces		1011865	0					
ANR	1012180	Identifier	escape_spaces		1011865	0					
ANR	1012181	ArgumentList	results [ jobid ] . c_str ( )		1011865	1					
ANR	1012182	Argument	results [ jobid ] . c_str ( )		1011865	0					
ANR	1012183	CallExpression	results [ jobid ] . c_str ( )		1011865	0					
ANR	1012184	Callee	results [ jobid ] . c_str		1011865	0					
ANR	1012185	MemberAccess	results [ jobid ] . c_str		1011865	0					
ANR	1012186	ArrayIndexing	results [ jobid ]		1011865	0					
ANR	1012187	Identifier	results		1011865	0					
ANR	1012188	Identifier	jobid		1011865	1					
ANR	1012189	Identifier	c_str		1011865	1					
ANR	1012190	ArgumentList			1011865	1					
ANR	1012191	ExpressionStatement	"enqueue_result ( reqid + "" CREAM_Job_Start\\\\ Error:\\\\ "" + msg )"	832:3:23694:23756	1011865	1	True				
ANR	1012192	CallExpression	"enqueue_result ( reqid + "" CREAM_Job_Start\\\\ Error:\\\\ "" + msg )"		1011865	0					
ANR	1012193	Callee	enqueue_result		1011865	0					
ANR	1012194	Identifier	enqueue_result		1011865	0					
ANR	1012195	ArgumentList	"reqid + "" CREAM_Job_Start\\\\ Error:\\\\ "" + msg"		1011865	1					
ANR	1012196	Argument	"reqid + "" CREAM_Job_Start\\\\ Error:\\\\ "" + msg"		1011865	0					
ANR	1012197	AdditiveExpression	"reqid + "" CREAM_Job_Start\\\\ Error:\\\\ "" + msg"		1011865	0		+			
ANR	1012198	Identifier	reqid		1011865	0					
ANR	1012199	AdditiveExpression	""" CREAM_Job_Start\\\\ Error:\\\\ "" + msg"		1011865	1		+			
ANR	1012200	PrimaryExpression	""" CREAM_Job_Start\\\\ Error:\\\\ """		1011865	0					
ANR	1012201	Identifier	msg		1011865	1					
ANR	1012202	ElseStatement	else		1011865	0					
ANR	1012203	CompoundStatement		62:9:1860:1860	1011865	0					
ANR	1012204	ExpressionStatement	"enqueue_result ( reqid + "" NULL"" )"	834:3:23772:23805	1011865	0	True				
ANR	1012205	CallExpression	"enqueue_result ( reqid + "" NULL"" )"		1011865	0					
ANR	1012206	Callee	enqueue_result		1011865	0					
ANR	1012207	Identifier	enqueue_result		1011865	0					
ANR	1012208	ArgumentList	"reqid + "" NULL"""		1011865	1					
ANR	1012209	Argument	"reqid + "" NULL"""		1011865	0					
ANR	1012210	AdditiveExpression	"reqid + "" NULL"""		1011865	0		+			
ANR	1012211	Identifier	reqid		1011865	0					
ANR	1012212	PrimaryExpression	""" NULL"""		1011865	1					
ANR	1012213	ReturnStatement	return 0 ;	838:1:23817:23825	1011865	10	True				
ANR	1012214	PrimaryExpression	0		1011865	0					
ANR	1012215	ReturnType	int		1011865	1					
ANR	1012216	Identifier	thread_cream_job_start		1011865	2					
ANR	1012217	ParameterList	Request * * reqlist		1011865	3					
ANR	1012218	Parameter	Request * * reqlist	771:28:21886:21902	1011865	0	True				
ANR	1012219	ParameterType	Request * *		1011865	0					
ANR	1012220	Identifier	reqlist		1011865	1					
ANR	1012221	CFGEntryNode	ENTRY		1011865		True				
ANR	1012222	CFGExitNode	EXIT		1011865		True				
ANR	1012223	CFGErrorNode	ERROR		1011865		True				
ANR	1012224	Symbol	msg		1011865						
ANR	1012225	Symbol	results [ jobid ] . c_str		1011865						
ANR	1012226	Symbol	reqlist [ idx ] -> input_line		1011865						
ANR	1012227	Symbol	* jobid		1011865						
ANR	1012228	Symbol	* * * reqlist		1011865						
ANR	1012229	Symbol	* results		1011865						
ANR	1012230	Symbol	* * reqlist		1011865						
ANR	1012231	Symbol	reqid		1011865						
ANR	1012232	Symbol	* * idx		1011865						
ANR	1012233	Symbol	jobid		1011865						
ANR	1012234	Symbol	* reqlist [ idx ] -> input_line		1011865						
ANR	1012235	Symbol	reqids		1011865						
ANR	1012236	Symbol	reqlist [ 0 ] -> proxy		1011865						
ANR	1012237	Symbol	* idx		1011865						
ANR	1012238	Symbol	* reqlist [ 0 ] -> input_line		1011865						
ANR	1012239	Symbol	results		1011865						
ANR	1012240	Symbol	NULL		1011865						
ANR	1012241	Symbol	reqlist [ 0 ] -> input_line		1011865						
ANR	1012242	Symbol	& service		1011865						
ANR	1012243	Symbol	* reqlist		1011865						
ANR	1012244	Symbol	cp		1011865						
ANR	1012245	Symbol	proxy		1011865						
ANR	1012246	Symbol	reqlist		1011865						
ANR	1012247	Symbol	service		1011865						
ANR	1012248	Symbol	* * * idx		1011865						
ANR	1012249	Symbol	escape_spaces		1011865						
ANR	1012250	Symbol	idx		1011865						
ANR	1012251	Function	handle_cream_job_purge	847:0:24073:24485							
ANR	1012252	FunctionDef	handle_cream_job_purge (char * * input_line)		1012251	0					
ANR	1012253	CompoundStatement		848:0:24121:24485	1012251	0					
ANR	1012254	IdentifierDeclStatement	int arg_cnt = count_args ( input_line ) ;	849:1:24124:24162	1012251	0	True				
ANR	1012255	IdentifierDecl	arg_cnt = count_args ( input_line )		1012251	0					
ANR	1012256	IdentifierDeclType	int		1012251	0					
ANR	1012257	Identifier	arg_cnt		1012251	1					
ANR	1012258	AssignmentExpression	arg_cnt = count_args ( input_line )		1012251	2		=			
ANR	1012259	Identifier	arg_cnt		1012251	0					
ANR	1012260	CallExpression	count_args ( input_line )		1012251	1					
ANR	1012261	Callee	count_args		1012251	0					
ANR	1012262	Identifier	count_args		1012251	0					
ANR	1012263	ArgumentList	input_line		1012251	1					
ANR	1012264	Argument	input_line		1012251	0					
ANR	1012265	Identifier	input_line		1012251	0					
ANR	1012266	IdentifierDeclStatement	char * jobnum = NULL ;	850:1:24165:24184	1012251	1	True				
ANR	1012267	IdentifierDecl	* jobnum = NULL		1012251	0					
ANR	1012268	IdentifierDeclType	char *		1012251	0					
ANR	1012269	Identifier	jobnum		1012251	1					
ANR	1012270	AssignmentExpression	* jobnum = NULL		1012251	2		=			
ANR	1012271	Identifier	NULL		1012251	0					
ANR	1012272	Identifier	NULL		1012251	1					
ANR	1012273	IfStatement	if ( arg_cnt < 4 )		1012251	2					
ANR	1012274	Condition	arg_cnt < 4	852:6:24193:24203	1012251	0	True				
ANR	1012275	RelationalExpression	arg_cnt < 4		1012251	0		<			
ANR	1012276	Identifier	arg_cnt		1012251	0					
ANR	1012277	PrimaryExpression	4		1012251	1					
ANR	1012278	CompoundStatement		5:20:85:85	1012251	1					
ANR	1012279	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	853:2:24211:24232	1012251	0	True				
ANR	1012280	CallExpression	HANDLE_SYNTAX_ERROR ( )		1012251	0					
ANR	1012281	Callee	HANDLE_SYNTAX_ERROR		1012251	0					
ANR	1012282	Identifier	HANDLE_SYNTAX_ERROR		1012251	0					
ANR	1012283	ArgumentList			1012251	1					
ANR	1012284	ExpressionStatement	"process_string_arg ( input_line [ 3 ] , & jobnum )"	856:1:24239:24283	1012251	3	True				
ANR	1012285	CallExpression	"process_string_arg ( input_line [ 3 ] , & jobnum )"		1012251	0					
ANR	1012286	Callee	process_string_arg		1012251	0					
ANR	1012287	Identifier	process_string_arg		1012251	0					
ANR	1012288	ArgumentList	input_line [ 3 ]		1012251	1					
ANR	1012289	Argument	input_line [ 3 ]		1012251	0					
ANR	1012290	ArrayIndexing	input_line [ 3 ]		1012251	0					
ANR	1012291	Identifier	input_line		1012251	0					
ANR	1012292	PrimaryExpression	3		1012251	1					
ANR	1012293	Argument	& jobnum		1012251	1					
ANR	1012294	UnaryOperationExpression	& jobnum		1012251	0					
ANR	1012295	UnaryOperator	&		1012251	0					
ANR	1012296	Identifier	jobnum		1012251	1					
ANR	1012297	IfStatement	if ( jobnum && ( atoi ( jobnum ) + 4 != arg_cnt ) )		1012251	4					
ANR	1012298	Condition	jobnum && ( atoi ( jobnum ) + 4 != arg_cnt )	857:6:24291:24333	1012251	0	True				
ANR	1012299	AndExpression	jobnum && ( atoi ( jobnum ) + 4 != arg_cnt )		1012251	0		&&			
ANR	1012300	Identifier	jobnum		1012251	0					
ANR	1012301	EqualityExpression	atoi ( jobnum ) + 4 != arg_cnt		1012251	1		!=			
ANR	1012302	AdditiveExpression	atoi ( jobnum ) + 4		1012251	0		+			
ANR	1012303	CallExpression	atoi ( jobnum )		1012251	0					
ANR	1012304	Callee	atoi		1012251	0					
ANR	1012305	Identifier	atoi		1012251	0					
ANR	1012306	ArgumentList	jobnum		1012251	1					
ANR	1012307	Argument	jobnum		1012251	0					
ANR	1012308	Identifier	jobnum		1012251	0					
ANR	1012309	PrimaryExpression	4		1012251	1					
ANR	1012310	Identifier	arg_cnt		1012251	1					
ANR	1012311	CompoundStatement		10:52:215:215	1012251	1					
ANR	1012312	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	858:2:24341:24362	1012251	0	True				
ANR	1012313	CallExpression	HANDLE_SYNTAX_ERROR ( )		1012251	0					
ANR	1012314	Callee	HANDLE_SYNTAX_ERROR		1012251	0					
ANR	1012315	Identifier	HANDLE_SYNTAX_ERROR		1012251	0					
ANR	1012316	ArgumentList			1012251	1					
ANR	1012317	ExpressionStatement	"enqueue_request_batch ( input_line , thread_cream_job_purge , cmp_request_single )"	861:1:24369:24448	1012251	5	True				
ANR	1012318	CallExpression	"enqueue_request_batch ( input_line , thread_cream_job_purge , cmp_request_single )"		1012251	0					
ANR	1012319	Callee	enqueue_request_batch		1012251	0					
ANR	1012320	Identifier	enqueue_request_batch		1012251	0					
ANR	1012321	ArgumentList	input_line		1012251	1					
ANR	1012322	Argument	input_line		1012251	0					
ANR	1012323	Identifier	input_line		1012251	0					
ANR	1012324	Argument	thread_cream_job_purge		1012251	1					
ANR	1012325	Identifier	thread_cream_job_purge		1012251	0					
ANR	1012326	Argument	cmp_request_single		1012251	2					
ANR	1012327	Identifier	cmp_request_single		1012251	0					
ANR	1012328	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	863:1:24452:24470	1012251	6	True				
ANR	1012329	CallExpression	"gahp_printf ( ""S\\n"" )"		1012251	0					
ANR	1012330	Callee	gahp_printf		1012251	0					
ANR	1012331	Identifier	gahp_printf		1012251	0					
ANR	1012332	ArgumentList	"""S\\n"""		1012251	1					
ANR	1012333	Argument	"""S\\n"""		1012251	0					
ANR	1012334	PrimaryExpression	"""S\\n"""		1012251	0					
ANR	1012335	ReturnStatement	return 0 ;	865:1:24475:24483	1012251	7	True				
ANR	1012336	PrimaryExpression	0		1012251	0					
ANR	1012337	ReturnType	int		1012251	1					
ANR	1012338	Identifier	handle_cream_job_purge		1012251	2					
ANR	1012339	ParameterList	char * * input_line		1012251	3					
ANR	1012340	Parameter	char * * input_line	847:28:24101:24117	1012251	0	True				
ANR	1012341	ParameterType	char * *		1012251	0					
ANR	1012342	Identifier	input_line		1012251	1					
ANR	1012343	CFGEntryNode	ENTRY		1012251		True				
ANR	1012344	CFGExitNode	EXIT		1012251		True				
ANR	1012345	Symbol	atoi		1012251						
ANR	1012346	Symbol	* input_line		1012251						
ANR	1012347	Symbol	NULL		1012251						
ANR	1012348	Symbol	& jobnum		1012251						
ANR	1012349	Symbol	jobnum		1012251						
ANR	1012350	Symbol	thread_cream_job_purge		1012251						
ANR	1012351	Symbol	count_args		1012251						
ANR	1012352	Symbol	cmp_request_single		1012251						
ANR	1012353	Symbol	input_line		1012251						
ANR	1012354	Symbol	arg_cnt		1012251						
ANR	1012355	Function	thread_cream_job_purge	868:0:24488:26379							
ANR	1012356	FunctionDef	thread_cream_job_purge (Request * * reqlist)		1012355	0					
ANR	1012357	CompoundStatement		869:0:24536:26379	1012355	0					
ANR	1012358	IfStatement	if ( reqlist == NULL )		1012355	0					
ANR	1012359	Condition	reqlist == NULL	875:4:24763:24777	1012355	0	True				
ANR	1012360	EqualityExpression	reqlist == NULL		1012355	0		==			
ANR	1012361	Identifier	reqlist		1012355	0					
ANR	1012362	Identifier	NULL		1012355	1					
ANR	1012363	CompoundStatement		7:21:243:243	1012355	1					
ANR	1012364	ExpressionStatement	"internal_error ( ""thread_cream_job_purge called with NULL pointer\\n"" )"	876:2:24784:24851	1012355	0	True				
ANR	1012365	CallExpression	"internal_error ( ""thread_cream_job_purge called with NULL pointer\\n"" )"		1012355	0					
ANR	1012366	Callee	internal_error		1012355	0					
ANR	1012367	Identifier	internal_error		1012355	0					
ANR	1012368	ArgumentList	"""thread_cream_job_purge called with NULL pointer\\n"""		1012355	1					
ANR	1012369	Argument	"""thread_cream_job_purge called with NULL pointer\\n"""		1012355	0					
ANR	1012370	PrimaryExpression	"""thread_cream_job_purge called with NULL pointer\\n"""		1012355	0					
ANR	1012371	IfStatement	if ( reqlist [ 0 ] == NULL )		1012355	1					
ANR	1012372	Condition	reqlist [ 0 ] == NULL	878:4:24860:24877	1012355	0	True				
ANR	1012373	EqualityExpression	reqlist [ 0 ] == NULL		1012355	0		==			
ANR	1012374	ArrayIndexing	reqlist [ 0 ]		1012355	0					
ANR	1012375	Identifier	reqlist		1012355	0					
ANR	1012376	PrimaryExpression	0		1012355	1					
ANR	1012377	Identifier	NULL		1012355	1					
ANR	1012378	CompoundStatement		10:24:343:343	1012355	1					
ANR	1012379	ExpressionStatement	"internal_error ( ""thread_cream_job_purge called with empty list\\n"" )"	879:2:24884:24949	1012355	0	True				
ANR	1012380	CallExpression	"internal_error ( ""thread_cream_job_purge called with empty list\\n"" )"		1012355	0					
ANR	1012381	Callee	internal_error		1012355	0					
ANR	1012382	Identifier	internal_error		1012355	0					
ANR	1012383	ArgumentList	"""thread_cream_job_purge called with empty list\\n"""		1012355	1					
ANR	1012384	Argument	"""thread_cream_job_purge called with empty list\\n"""		1012355	0					
ANR	1012385	PrimaryExpression	"""thread_cream_job_purge called with empty list\\n"""		1012355	0					
ANR	1012386	IdentifierDeclStatement	char * service ;	882:1:24956:24969	1012355	2	True				
ANR	1012387	IdentifierDecl	* service		1012355	0					
ANR	1012388	IdentifierDeclType	char *		1012355	0					
ANR	1012389	Identifier	service		1012355	1					
ANR	1012390	ExpressionStatement	"process_string_arg ( reqlist [ 0 ] -> input_line [ 2 ] , & service )"	883:1:24972:25029	1012355	3	True				
ANR	1012391	CallExpression	"process_string_arg ( reqlist [ 0 ] -> input_line [ 2 ] , & service )"		1012355	0					
ANR	1012392	Callee	process_string_arg		1012355	0					
ANR	1012393	Identifier	process_string_arg		1012355	0					
ANR	1012394	ArgumentList	reqlist [ 0 ] -> input_line [ 2 ]		1012355	1					
ANR	1012395	Argument	reqlist [ 0 ] -> input_line [ 2 ]		1012355	0					
ANR	1012396	ArrayIndexing	reqlist [ 0 ] -> input_line [ 2 ]		1012355	0					
ANR	1012397	PtrMemberAccess	reqlist [ 0 ] -> input_line		1012355	0					
ANR	1012398	ArrayIndexing	reqlist [ 0 ]		1012355	0					
ANR	1012399	Identifier	reqlist		1012355	0					
ANR	1012400	PrimaryExpression	0		1012355	1					
ANR	1012401	Identifier	input_line		1012355	1					
ANR	1012402	PrimaryExpression	2		1012355	1					
ANR	1012403	Argument	& service		1012355	1					
ANR	1012404	UnaryOperationExpression	& service		1012355	0					
ANR	1012405	UnaryOperator	&		1012355	0					
ANR	1012406	Identifier	service		1012355	1					
ANR	1012407	IdentifierDeclStatement	string proxy = reqlist [ 0 ] -> proxy ;	884:1:25032:25064	1012355	4	True				
ANR	1012408	IdentifierDecl	proxy = reqlist [ 0 ] -> proxy		1012355	0					
ANR	1012409	IdentifierDeclType	string		1012355	0					
ANR	1012410	Identifier	proxy		1012355	1					
ANR	1012411	AssignmentExpression	proxy = reqlist [ 0 ] -> proxy		1012355	2		=			
ANR	1012412	Identifier	proxy		1012355	0					
ANR	1012413	PtrMemberAccess	reqlist [ 0 ] -> proxy		1012355	1					
ANR	1012414	ArrayIndexing	reqlist [ 0 ]		1012355	0					
ANR	1012415	Identifier	reqlist		1012355	0					
ANR	1012416	PrimaryExpression	0		1012355	1					
ANR	1012417	Identifier	proxy		1012355	1					
ANR	1012418	IdentifierDeclStatement	AbsCreamProxy * cp = NULL ;	885:1:25067:25091	1012355	5	True				
ANR	1012419	IdentifierDecl	* cp = NULL		1012355	0					
ANR	1012420	IdentifierDeclType	AbsCreamProxy *		1012355	0					
ANR	1012421	Identifier	cp		1012355	1					
ANR	1012422	AssignmentExpression	* cp = NULL		1012355	2		=			
ANR	1012423	Identifier	NULL		1012355	0					
ANR	1012424	Identifier	NULL		1012355	1					
ANR	1012425	IdentifierDeclStatement	vector < string > reqids ;	887:1:25095:25116	1012355	6	True				
ANR	1012426	IdentifierDecl	reqids		1012355	0					
ANR	1012427	IdentifierDeclType	vector < string >		1012355	0					
ANR	1012428	Identifier	reqids		1012355	1					
ANR	1012429	IdentifierDeclStatement	"map < string , string > results ;"	888:1:25119:25146	1012355	7	True				
ANR	1012430	IdentifierDecl	results		1012355	0					
ANR	1012431	IdentifierDeclType	"map < string , string >"		1012355	0					
ANR	1012432	Identifier	results		1012355	1					
ANR	1012433	TryStatement	try		1012355	8					
ANR	1012434	CompoundStatement		33:2:930:946	1012355	0					
ANR	1012435	IdentifierDeclStatement	vector < JobIdWrapper > jv ;		1012355	0					
ANR	1012436	IdentifierDecl	jv		1012355	0					
ANR	1012437	IdentifierDeclType	vector < JobIdWrapper >		1012355	0					
ANR	1012438	Identifier	jv		1012355	1					
ANR	1012439	ExpressionStatement	"collect_job_ids ( reqlist , jv , reqids )"		1012355	1					
ANR	1012440	CallExpression	"collect_job_ids ( reqlist , jv , reqids )"		1012355	0					
ANR	1012441	Callee	collect_job_ids		1012355	0					
ANR	1012442	Identifier	collect_job_ids		1012355	0					
ANR	1012443	ArgumentList	reqlist		1012355	1					
ANR	1012444	Argument	reqlist		1012355	0					
ANR	1012445	Identifier	reqlist		1012355	0					
ANR	1012446	Argument	jv		1012355	1					
ANR	1012447	Identifier	jv		1012355	0					
ANR	1012448	Argument	reqids		1012355	2					
ANR	1012449	Identifier	reqids		1012355	0					
ANR	1012450	IdentifierDeclStatement	vector < string > sv ;		1012355	2					
ANR	1012451	IdentifierDecl	sv		1012355	0					
ANR	1012452	IdentifierDeclType	vector < string >		1012355	0					
ANR	1012453	Identifier	sv		1012355	1					
ANR	1012454	IdentifierDeclStatement	"JobFilterWrapper jfw ( jv , sv , - 1 , - 1 , """" , """" ) ;"		1012355	3					
ANR	1012455	IdentifierDecl	"jfw ( jv , sv , - 1 , - 1 , """" , """" )"		1012355	0					
ANR	1012456	IdentifierDeclType	JobFilterWrapper		1012355	0					
ANR	1012457	Identifier	jfw		1012355	1					
ANR	1012458	Expression	"jv , sv , - 1 , - 1 , """" , """""		1012355	2					
ANR	1012459	Identifier	jv		1012355	0					
ANR	1012460	Expression	"sv , - 1 , - 1 , """" , """""		1012355	1					
ANR	1012461	Identifier	sv		1012355	0					
ANR	1012462	Expression	"- 1 , - 1 , """" , """""		1012355	1					
ANR	1012463	UnaryOperationExpression	- 1		1012355	0					
ANR	1012464	UnaryOperator	-		1012355	0					
ANR	1012465	PrimaryExpression	1		1012355	1					
ANR	1012466	Expression	"- 1 , """" , """""		1012355	1					
ANR	1012467	UnaryOperationExpression	- 1		1012355	0					
ANR	1012468	UnaryOperator	-		1012355	0					
ANR	1012469	PrimaryExpression	1		1012355	1					
ANR	1012470	Expression	""""" , """""		1012355	1					
ANR	1012471	PrimaryExpression	""""""		1012355	0					
ANR	1012472	PrimaryExpression	""""""		1012355	1					
ANR	1012473	IdentifierDeclStatement	ResultWrapper rw ;		1012355	4					
ANR	1012474	IdentifierDecl	rw		1012355	0					
ANR	1012475	IdentifierDeclType	ResultWrapper		1012355	0					
ANR	1012476	Identifier	rw		1012355	1					
ANR	1012477	ExpressionStatement	"cp = CreamProxyFactory :: make_CreamProxyPurge ( & jfw , & rw , DEFAULT_TIMEOUT )"		1012355	5					
ANR	1012478	AssignmentExpression	"cp = CreamProxyFactory :: make_CreamProxyPurge ( & jfw , & rw , DEFAULT_TIMEOUT )"		1012355	0		=			
ANR	1012479	Identifier	cp		1012355	0					
ANR	1012480	CallExpression	"CreamProxyFactory :: make_CreamProxyPurge ( & jfw , & rw , DEFAULT_TIMEOUT )"		1012355	1					
ANR	1012481	Callee	CreamProxyFactory :: make_CreamProxyPurge		1012355	0					
ANR	1012482	Identifier	CreamProxyFactory :: make_CreamProxyPurge		1012355	0					
ANR	1012483	ArgumentList	& jfw		1012355	1					
ANR	1012484	Argument	& jfw		1012355	0					
ANR	1012485	UnaryOperationExpression	& jfw		1012355	0					
ANR	1012486	UnaryOperator	&		1012355	0					
ANR	1012487	Identifier	jfw		1012355	1					
ANR	1012488	Argument	& rw		1012355	1					
ANR	1012489	UnaryOperationExpression	& rw		1012355	0					
ANR	1012490	UnaryOperator	&		1012355	0					
ANR	1012491	Identifier	rw		1012355	1					
ANR	1012492	Argument	DEFAULT_TIMEOUT		1012355	2					
ANR	1012493	Identifier	DEFAULT_TIMEOUT		1012355	0					
ANR	1012494	ExpressionStatement	check_for_factory_error ( cp )		1012355	6					
ANR	1012495	CallExpression	check_for_factory_error ( cp )		1012355	0					
ANR	1012496	Callee	check_for_factory_error		1012355	0					
ANR	1012497	Identifier	check_for_factory_error		1012355	0					
ANR	1012498	ArgumentList	cp		1012355	1					
ANR	1012499	Argument	cp		1012355	0					
ANR	1012500	Identifier	cp		1012355	0					
ANR	1012501	ExpressionStatement	cp -> setCredential ( proxy . c_str ( ) )		1012355	7					
ANR	1012502	CallExpression	cp -> setCredential ( proxy . c_str ( ) )		1012355	0					
ANR	1012503	Callee	cp -> setCredential		1012355	0					
ANR	1012504	PtrMemberAccess	cp -> setCredential		1012355	0					
ANR	1012505	Identifier	cp		1012355	0					
ANR	1012506	Identifier	setCredential		1012355	1					
ANR	1012507	ArgumentList	proxy . c_str ( )		1012355	1					
ANR	1012508	Argument	proxy . c_str ( )		1012355	0					
ANR	1012509	CallExpression	proxy . c_str ( )		1012355	0					
ANR	1012510	Callee	proxy . c_str		1012355	0					
ANR	1012511	MemberAccess	proxy . c_str		1012355	0					
ANR	1012512	Identifier	proxy		1012355	0					
ANR	1012513	Identifier	c_str		1012355	1					
ANR	1012514	ArgumentList			1012355	1					
ANR	1012515	ExpressionStatement	cp -> execute ( service )		1012355	8					
ANR	1012516	CallExpression	cp -> execute ( service )		1012355	0					
ANR	1012517	Callee	cp -> execute		1012355	0					
ANR	1012518	PtrMemberAccess	cp -> execute		1012355	0					
ANR	1012519	Identifier	cp		1012355	0					
ANR	1012520	Identifier	execute		1012355	1					
ANR	1012521	ArgumentList	service		1012355	1					
ANR	1012522	Argument	service		1012355	0					
ANR	1012523	Identifier	service		1012355	0					
ANR	1012524	ExpressionStatement	"check_result_wrapper2 ( rw , results )"		1012355	9					
ANR	1012525	CallExpression	"check_result_wrapper2 ( rw , results )"		1012355	0					
ANR	1012526	Callee	check_result_wrapper2		1012355	0					
ANR	1012527	Identifier	check_result_wrapper2		1012355	0					
ANR	1012528	ArgumentList	rw		1012355	1					
ANR	1012529	Argument	rw		1012355	0					
ANR	1012530	Identifier	rw		1012355	0					
ANR	1012531	Argument	results		1012355	1					
ANR	1012532	Identifier	results		1012355	0					
ANR	1012533	Statement	delete		1012355	10					
ANR	1012534	ExpressionStatement	cp		1012355	11					
ANR	1012535	Identifier	cp		1012355	0					
ANR	1012536	CatchList			1012355	1					
ANR	1012537	CatchStatement	catch ( std :: exception & ex )		1012355	0					
ANR	1012538	Identifier	ex		1012355	0					
ANR	1012539	CompoundStatement		43:27:1224:1224	1012355	1					
ANR	1012540	Statement	delete	912:2:25765:25770	1012355	0	True				
ANR	1012541	ExpressionStatement	cp	912:9:25772:25774	1012355	1	True				
ANR	1012542	Identifier	cp		1012355	0					
ANR	1012543	ForStatement	for ( vector < string > :: const_iterator it = reqids . begin ( ) ; it != reqids . end ( ) ; it ++ )		1012355	2					
ANR	1012544	ForInit	vector < string > :: const_iterator it = reqids . begin ( ) ;	914:6:25783:25833	1012355	0	True				
ANR	1012545	IdentifierDeclStatement	vector < string > :: const_iterator it = reqids . begin ( ) ;		1012355	0					
ANR	1012546	IdentifierDecl	it = reqids . begin ( )		1012355	0					
ANR	1012547	IdentifierDeclType	vector < string > :: const_iterator		1012355	0					
ANR	1012548	Identifier	it		1012355	1					
ANR	1012549	AssignmentExpression	it = reqids . begin ( )		1012355	2		=			
ANR	1012550	Identifier	it		1012355	0					
ANR	1012551	CallExpression	reqids . begin ( )		1012355	1					
ANR	1012552	Callee	reqids . begin		1012355	0					
ANR	1012553	MemberAccess	reqids . begin		1012355	0					
ANR	1012554	Identifier	reqids		1012355	0					
ANR	1012555	Identifier	begin		1012355	1					
ANR	1012556	ArgumentList			1012355	1					
ANR	1012557	Condition	it != reqids . end ( )	915:3:25838:25855	1012355	1	True				
ANR	1012558	EqualityExpression	it != reqids . end ( )		1012355	0		!=			
ANR	1012559	Identifier	it		1012355	0					
ANR	1012560	CallExpression	reqids . end ( )		1012355	1					
ANR	1012561	Callee	reqids . end		1012355	0					
ANR	1012562	MemberAccess	reqids . end		1012355	0					
ANR	1012563	Identifier	reqids		1012355	0					
ANR	1012564	Identifier	end		1012355	1					
ANR	1012565	ArgumentList			1012355	1					
ANR	1012566	PostIncDecOperationExpression	it ++	915:23:25858:25861	1012355	2	True				
ANR	1012567	Identifier	it		1012355	0					
ANR	1012568	IncDec	++		1012355	1					
ANR	1012569	CompoundStatement		49:3:1333:1369	1012355	3					
ANR	1012570	IdentifierDeclStatement	char * msg = escape_spaces ( ex . what ( ) ) ;	917:3:25870:25906	1012355	0	True				
ANR	1012571	IdentifierDecl	* msg = escape_spaces ( ex . what ( ) )		1012355	0					
ANR	1012572	IdentifierDeclType	char *		1012355	0					
ANR	1012573	Identifier	msg		1012355	1					
ANR	1012574	AssignmentExpression	* msg = escape_spaces ( ex . what ( ) )		1012355	2		=			
ANR	1012575	Identifier	msg		1012355	0					
ANR	1012576	CallExpression	escape_spaces ( ex . what ( ) )		1012355	1					
ANR	1012577	Callee	escape_spaces		1012355	0					
ANR	1012578	Identifier	escape_spaces		1012355	0					
ANR	1012579	ArgumentList	ex . what ( )		1012355	1					
ANR	1012580	Argument	ex . what ( )		1012355	0					
ANR	1012581	CallExpression	ex . what ( )		1012355	0					
ANR	1012582	Callee	ex . what		1012355	0					
ANR	1012583	MemberAccess	ex . what		1012355	0					
ANR	1012584	Identifier	ex		1012355	0					
ANR	1012585	Identifier	what		1012355	1					
ANR	1012586	ArgumentList			1012355	1					
ANR	1012587	ExpressionStatement	"enqueue_result ( ( * it ) + "" CREAM_Job_Purge\\\\ Error:\\\\ "" + msg )"	918:3:25911:25971	1012355	1	True				
ANR	1012588	CallExpression	"enqueue_result ( ( * it ) + "" CREAM_Job_Purge\\\\ Error:\\\\ "" + msg )"		1012355	0					
ANR	1012589	Callee	enqueue_result		1012355	0					
ANR	1012590	Identifier	enqueue_result		1012355	0					
ANR	1012591	ArgumentList	"( * it ) + "" CREAM_Job_Purge\\\\ Error:\\\\ "" + msg"		1012355	1					
ANR	1012592	Argument	"( * it ) + "" CREAM_Job_Purge\\\\ Error:\\\\ "" + msg"		1012355	0					
ANR	1012593	AdditiveExpression	"( * it ) + "" CREAM_Job_Purge\\\\ Error:\\\\ "" + msg"		1012355	0		+			
ANR	1012594	UnaryOperationExpression	* it		1012355	0					
ANR	1012595	UnaryOperator	*		1012355	0					
ANR	1012596	Identifier	it		1012355	1					
ANR	1012597	AdditiveExpression	""" CREAM_Job_Purge\\\\ Error:\\\\ "" + msg"		1012355	1		+			
ANR	1012598	PrimaryExpression	""" CREAM_Job_Purge\\\\ Error:\\\\ """		1012355	0					
ANR	1012599	Identifier	msg		1012355	1					
ANR	1012600	ExpressionStatement	free ( msg )	919:3:25976:25985	1012355	2	True				
ANR	1012601	CallExpression	free ( msg )		1012355	0					
ANR	1012602	Callee	free		1012355	0					
ANR	1012603	Identifier	free		1012355	0					
ANR	1012604	ArgumentList	msg		1012355	1					
ANR	1012605	Argument	msg		1012355	0					
ANR	1012606	Identifier	msg		1012355	0					
ANR	1012607	ReturnStatement	return 1 ;	922:2:25996:26004	1012355	3	True				
ANR	1012608	PrimaryExpression	1		1012355	0					
ANR	1012609	ForStatement	for ( int idx = 0 ; reqlist [ idx ] != NULL ; idx ++ )		1012355	9					
ANR	1012610	ForInit	int idx = 0 ;	925:7:26018:26029	1012355	0	True				
ANR	1012611	IdentifierDeclStatement	int idx = 0 ;		1012355	0					
ANR	1012612	IdentifierDecl	idx = 0		1012355	0					
ANR	1012613	IdentifierDeclType	int		1012355	0					
ANR	1012614	Identifier	idx		1012355	1					
ANR	1012615	AssignmentExpression	idx = 0		1012355	2		=			
ANR	1012616	Identifier	idx		1012355	0					
ANR	1012617	PrimaryExpression	0		1012355	1					
ANR	1012618	Condition	reqlist [ idx ] != NULL	925:20:26031:26050	1012355	1	True				
ANR	1012619	EqualityExpression	reqlist [ idx ] != NULL		1012355	0		!=			
ANR	1012620	ArrayIndexing	reqlist [ idx ]		1012355	0					
ANR	1012621	Identifier	reqlist		1012355	0					
ANR	1012622	Identifier	idx		1012355	1					
ANR	1012623	Identifier	NULL		1012355	1					
ANR	1012624	PostIncDecOperationExpression	idx ++	925:42:26053:26057	1012355	2	True				
ANR	1012625	Identifier	idx		1012355	0					
ANR	1012626	IncDec	++		1012355	1					
ANR	1012627	CompoundStatement		59:2:1574:1616	1012355	3					
ANR	1012628	IdentifierDeclStatement	string reqid = reqlist [ idx ] -> input_line [ 1 ] ;	926:2:26065:26107	1012355	0	True				
ANR	1012629	IdentifierDecl	reqid = reqlist [ idx ] -> input_line [ 1 ]		1012355	0					
ANR	1012630	IdentifierDeclType	string		1012355	0					
ANR	1012631	Identifier	reqid		1012355	1					
ANR	1012632	AssignmentExpression	reqid = reqlist [ idx ] -> input_line [ 1 ]		1012355	2		=			
ANR	1012633	Identifier	reqid		1012355	0					
ANR	1012634	ArrayIndexing	reqlist [ idx ] -> input_line [ 1 ]		1012355	1					
ANR	1012635	PtrMemberAccess	reqlist [ idx ] -> input_line		1012355	0					
ANR	1012636	ArrayIndexing	reqlist [ idx ]		1012355	0					
ANR	1012637	Identifier	reqlist		1012355	0					
ANR	1012638	Identifier	idx		1012355	1					
ANR	1012639	Identifier	input_line		1012355	1					
ANR	1012640	PrimaryExpression	1		1012355	1					
ANR	1012641	IdentifierDeclStatement	string jobid = reqlist [ idx ] -> input_line [ 4 ] ;	927:2:26111:26153	1012355	1	True				
ANR	1012642	IdentifierDecl	jobid = reqlist [ idx ] -> input_line [ 4 ]		1012355	0					
ANR	1012643	IdentifierDeclType	string		1012355	0					
ANR	1012644	Identifier	jobid		1012355	1					
ANR	1012645	AssignmentExpression	jobid = reqlist [ idx ] -> input_line [ 4 ]		1012355	2		=			
ANR	1012646	Identifier	jobid		1012355	0					
ANR	1012647	ArrayIndexing	reqlist [ idx ] -> input_line [ 4 ]		1012355	1					
ANR	1012648	PtrMemberAccess	reqlist [ idx ] -> input_line		1012355	0					
ANR	1012649	ArrayIndexing	reqlist [ idx ]		1012355	0					
ANR	1012650	Identifier	reqlist		1012355	0					
ANR	1012651	Identifier	idx		1012355	1					
ANR	1012652	Identifier	input_line		1012355	1					
ANR	1012653	PrimaryExpression	4		1012355	1					
ANR	1012654	IfStatement	"if ( results [ jobid ] != """" )"		1012355	2					
ANR	1012655	Condition	"results [ jobid ] != """""	928:7:26162:26181	1012355	0	True				
ANR	1012656	EqualityExpression	"results [ jobid ] != """""		1012355	0		!=			
ANR	1012657	ArrayIndexing	results [ jobid ]		1012355	0					
ANR	1012658	Identifier	results		1012355	0					
ANR	1012659	Identifier	jobid		1012355	1					
ANR	1012660	PrimaryExpression	""""""		1012355	1					
ANR	1012661	CompoundStatement		61:3:1653:1704	1012355	1					
ANR	1012662	IdentifierDeclStatement	char * msg = escape_spaces ( results [ jobid ] . c_str ( ) ) ;	929:3:26190:26241	1012355	0	True				
ANR	1012663	IdentifierDecl	* msg = escape_spaces ( results [ jobid ] . c_str ( ) )		1012355	0					
ANR	1012664	IdentifierDeclType	char *		1012355	0					
ANR	1012665	Identifier	msg		1012355	1					
ANR	1012666	AssignmentExpression	* msg = escape_spaces ( results [ jobid ] . c_str ( ) )		1012355	2		=			
ANR	1012667	Identifier	msg		1012355	0					
ANR	1012668	CallExpression	escape_spaces ( results [ jobid ] . c_str ( ) )		1012355	1					
ANR	1012669	Callee	escape_spaces		1012355	0					
ANR	1012670	Identifier	escape_spaces		1012355	0					
ANR	1012671	ArgumentList	results [ jobid ] . c_str ( )		1012355	1					
ANR	1012672	Argument	results [ jobid ] . c_str ( )		1012355	0					
ANR	1012673	CallExpression	results [ jobid ] . c_str ( )		1012355	0					
ANR	1012674	Callee	results [ jobid ] . c_str		1012355	0					
ANR	1012675	MemberAccess	results [ jobid ] . c_str		1012355	0					
ANR	1012676	ArrayIndexing	results [ jobid ]		1012355	0					
ANR	1012677	Identifier	results		1012355	0					
ANR	1012678	Identifier	jobid		1012355	1					
ANR	1012679	Identifier	c_str		1012355	1					
ANR	1012680	ArgumentList			1012355	1					
ANR	1012681	ExpressionStatement	"enqueue_result ( reqid + "" CREAM_Job_Purge\\\\ Error:\\\\ "" + msg )"	930:3:26246:26308	1012355	1	True				
ANR	1012682	CallExpression	"enqueue_result ( reqid + "" CREAM_Job_Purge\\\\ Error:\\\\ "" + msg )"		1012355	0					
ANR	1012683	Callee	enqueue_result		1012355	0					
ANR	1012684	Identifier	enqueue_result		1012355	0					
ANR	1012685	ArgumentList	"reqid + "" CREAM_Job_Purge\\\\ Error:\\\\ "" + msg"		1012355	1					
ANR	1012686	Argument	"reqid + "" CREAM_Job_Purge\\\\ Error:\\\\ "" + msg"		1012355	0					
ANR	1012687	AdditiveExpression	"reqid + "" CREAM_Job_Purge\\\\ Error:\\\\ "" + msg"		1012355	0		+			
ANR	1012688	Identifier	reqid		1012355	0					
ANR	1012689	AdditiveExpression	""" CREAM_Job_Purge\\\\ Error:\\\\ "" + msg"		1012355	1		+			
ANR	1012690	PrimaryExpression	""" CREAM_Job_Purge\\\\ Error:\\\\ """		1012355	0					
ANR	1012691	Identifier	msg		1012355	1					
ANR	1012692	ElseStatement	else		1012355	0					
ANR	1012693	CompoundStatement		63:9:1782:1782	1012355	0					
ANR	1012694	ExpressionStatement	"enqueue_result ( reqid + "" NULL"" )"	932:3:26324:26357	1012355	0	True				
ANR	1012695	CallExpression	"enqueue_result ( reqid + "" NULL"" )"		1012355	0					
ANR	1012696	Callee	enqueue_result		1012355	0					
ANR	1012697	Identifier	enqueue_result		1012355	0					
ANR	1012698	ArgumentList	"reqid + "" NULL"""		1012355	1					
ANR	1012699	Argument	"reqid + "" NULL"""		1012355	0					
ANR	1012700	AdditiveExpression	"reqid + "" NULL"""		1012355	0		+			
ANR	1012701	Identifier	reqid		1012355	0					
ANR	1012702	PrimaryExpression	""" NULL"""		1012355	1					
ANR	1012703	ReturnStatement	return 0 ;	936:1:26369:26377	1012355	10	True				
ANR	1012704	PrimaryExpression	0		1012355	0					
ANR	1012705	ReturnType	int		1012355	1					
ANR	1012706	Identifier	thread_cream_job_purge		1012355	2					
ANR	1012707	ParameterList	Request * * reqlist		1012355	3					
ANR	1012708	Parameter	Request * * reqlist	868:28:24516:24532	1012355	0	True				
ANR	1012709	ParameterType	Request * *		1012355	0					
ANR	1012710	Identifier	reqlist		1012355	1					
ANR	1012711	CFGEntryNode	ENTRY		1012355		True				
ANR	1012712	CFGExitNode	EXIT		1012355		True				
ANR	1012713	CFGErrorNode	ERROR		1012355		True				
ANR	1012714	Symbol	msg		1012355						
ANR	1012715	Symbol	results [ jobid ] . c_str		1012355						
ANR	1012716	Symbol	reqlist [ idx ] -> input_line		1012355						
ANR	1012717	Symbol	* jobid		1012355						
ANR	1012718	Symbol	* * * reqlist		1012355						
ANR	1012719	Symbol	* results		1012355						
ANR	1012720	Symbol	* * reqlist		1012355						
ANR	1012721	Symbol	reqid		1012355						
ANR	1012722	Symbol	* * idx		1012355						
ANR	1012723	Symbol	jobid		1012355						
ANR	1012724	Symbol	* reqlist [ idx ] -> input_line		1012355						
ANR	1012725	Symbol	reqids		1012355						
ANR	1012726	Symbol	reqlist [ 0 ] -> proxy		1012355						
ANR	1012727	Symbol	* idx		1012355						
ANR	1012728	Symbol	* reqlist [ 0 ] -> input_line		1012355						
ANR	1012729	Symbol	results		1012355						
ANR	1012730	Symbol	NULL		1012355						
ANR	1012731	Symbol	reqlist [ 0 ] -> input_line		1012355						
ANR	1012732	Symbol	& service		1012355						
ANR	1012733	Symbol	* reqlist		1012355						
ANR	1012734	Symbol	cp		1012355						
ANR	1012735	Symbol	proxy		1012355						
ANR	1012736	Symbol	reqlist		1012355						
ANR	1012737	Symbol	service		1012355						
ANR	1012738	Symbol	* * * idx		1012355						
ANR	1012739	Symbol	escape_spaces		1012355						
ANR	1012740	Symbol	idx		1012355						
ANR	1012741	Function	handle_cream_job_cancel	945:0:26635:27046							
ANR	1012742	FunctionDef	handle_cream_job_cancel (char * * input_line)		1012741	0					
ANR	1012743	CompoundStatement		946:0:26684:27046	1012741	0					
ANR	1012744	IdentifierDeclStatement	int arg_cnt = count_args ( input_line ) ;	947:1:26687:26725	1012741	0	True				
ANR	1012745	IdentifierDecl	arg_cnt = count_args ( input_line )		1012741	0					
ANR	1012746	IdentifierDeclType	int		1012741	0					
ANR	1012747	Identifier	arg_cnt		1012741	1					
ANR	1012748	AssignmentExpression	arg_cnt = count_args ( input_line )		1012741	2		=			
ANR	1012749	Identifier	arg_cnt		1012741	0					
ANR	1012750	CallExpression	count_args ( input_line )		1012741	1					
ANR	1012751	Callee	count_args		1012741	0					
ANR	1012752	Identifier	count_args		1012741	0					
ANR	1012753	ArgumentList	input_line		1012741	1					
ANR	1012754	Argument	input_line		1012741	0					
ANR	1012755	Identifier	input_line		1012741	0					
ANR	1012756	IdentifierDeclStatement	char * jobnum = NULL ;	948:1:26728:26747	1012741	1	True				
ANR	1012757	IdentifierDecl	* jobnum = NULL		1012741	0					
ANR	1012758	IdentifierDeclType	char *		1012741	0					
ANR	1012759	Identifier	jobnum		1012741	1					
ANR	1012760	AssignmentExpression	* jobnum = NULL		1012741	2		=			
ANR	1012761	Identifier	NULL		1012741	0					
ANR	1012762	Identifier	NULL		1012741	1					
ANR	1012763	IfStatement	if ( arg_cnt < 4 )		1012741	2					
ANR	1012764	Condition	arg_cnt < 4	950:6:26756:26766	1012741	0	True				
ANR	1012765	RelationalExpression	arg_cnt < 4		1012741	0		<			
ANR	1012766	Identifier	arg_cnt		1012741	0					
ANR	1012767	PrimaryExpression	4		1012741	1					
ANR	1012768	CompoundStatement		5:20:85:85	1012741	1					
ANR	1012769	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	951:2:26774:26795	1012741	0	True				
ANR	1012770	CallExpression	HANDLE_SYNTAX_ERROR ( )		1012741	0					
ANR	1012771	Callee	HANDLE_SYNTAX_ERROR		1012741	0					
ANR	1012772	Identifier	HANDLE_SYNTAX_ERROR		1012741	0					
ANR	1012773	ArgumentList			1012741	1					
ANR	1012774	ExpressionStatement	"process_string_arg ( input_line [ 3 ] , & jobnum )"	954:1:26802:26846	1012741	3	True				
ANR	1012775	CallExpression	"process_string_arg ( input_line [ 3 ] , & jobnum )"		1012741	0					
ANR	1012776	Callee	process_string_arg		1012741	0					
ANR	1012777	Identifier	process_string_arg		1012741	0					
ANR	1012778	ArgumentList	input_line [ 3 ]		1012741	1					
ANR	1012779	Argument	input_line [ 3 ]		1012741	0					
ANR	1012780	ArrayIndexing	input_line [ 3 ]		1012741	0					
ANR	1012781	Identifier	input_line		1012741	0					
ANR	1012782	PrimaryExpression	3		1012741	1					
ANR	1012783	Argument	& jobnum		1012741	1					
ANR	1012784	UnaryOperationExpression	& jobnum		1012741	0					
ANR	1012785	UnaryOperator	&		1012741	0					
ANR	1012786	Identifier	jobnum		1012741	1					
ANR	1012787	IfStatement	if ( jobnum && ( atoi ( jobnum ) + 4 != arg_cnt ) )		1012741	4					
ANR	1012788	Condition	jobnum && ( atoi ( jobnum ) + 4 != arg_cnt )	955:6:26854:26896	1012741	0	True				
ANR	1012789	AndExpression	jobnum && ( atoi ( jobnum ) + 4 != arg_cnt )		1012741	0		&&			
ANR	1012790	Identifier	jobnum		1012741	0					
ANR	1012791	EqualityExpression	atoi ( jobnum ) + 4 != arg_cnt		1012741	1		!=			
ANR	1012792	AdditiveExpression	atoi ( jobnum ) + 4		1012741	0		+			
ANR	1012793	CallExpression	atoi ( jobnum )		1012741	0					
ANR	1012794	Callee	atoi		1012741	0					
ANR	1012795	Identifier	atoi		1012741	0					
ANR	1012796	ArgumentList	jobnum		1012741	1					
ANR	1012797	Argument	jobnum		1012741	0					
ANR	1012798	Identifier	jobnum		1012741	0					
ANR	1012799	PrimaryExpression	4		1012741	1					
ANR	1012800	Identifier	arg_cnt		1012741	1					
ANR	1012801	CompoundStatement		10:52:215:215	1012741	1					
ANR	1012802	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	956:2:26904:26925	1012741	0	True				
ANR	1012803	CallExpression	HANDLE_SYNTAX_ERROR ( )		1012741	0					
ANR	1012804	Callee	HANDLE_SYNTAX_ERROR		1012741	0					
ANR	1012805	Identifier	HANDLE_SYNTAX_ERROR		1012741	0					
ANR	1012806	ArgumentList			1012741	1					
ANR	1012807	ExpressionStatement	"enqueue_request_batch ( input_line , thread_cream_job_cancel , cmp_request_single )"	959:1:26932:27010	1012741	5	True				
ANR	1012808	CallExpression	"enqueue_request_batch ( input_line , thread_cream_job_cancel , cmp_request_single )"		1012741	0					
ANR	1012809	Callee	enqueue_request_batch		1012741	0					
ANR	1012810	Identifier	enqueue_request_batch		1012741	0					
ANR	1012811	ArgumentList	input_line		1012741	1					
ANR	1012812	Argument	input_line		1012741	0					
ANR	1012813	Identifier	input_line		1012741	0					
ANR	1012814	Argument	thread_cream_job_cancel		1012741	1					
ANR	1012815	Identifier	thread_cream_job_cancel		1012741	0					
ANR	1012816	Argument	cmp_request_single		1012741	2					
ANR	1012817	Identifier	cmp_request_single		1012741	0					
ANR	1012818	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	960:1:27013:27031	1012741	6	True				
ANR	1012819	CallExpression	"gahp_printf ( ""S\\n"" )"		1012741	0					
ANR	1012820	Callee	gahp_printf		1012741	0					
ANR	1012821	Identifier	gahp_printf		1012741	0					
ANR	1012822	ArgumentList	"""S\\n"""		1012741	1					
ANR	1012823	Argument	"""S\\n"""		1012741	0					
ANR	1012824	PrimaryExpression	"""S\\n"""		1012741	0					
ANR	1012825	ReturnStatement	return 0 ;	962:1:27036:27044	1012741	7	True				
ANR	1012826	PrimaryExpression	0		1012741	0					
ANR	1012827	ReturnType	int		1012741	1					
ANR	1012828	Identifier	handle_cream_job_cancel		1012741	2					
ANR	1012829	ParameterList	char * * input_line		1012741	3					
ANR	1012830	Parameter	char * * input_line	945:29:26664:26680	1012741	0	True				
ANR	1012831	ParameterType	char * *		1012741	0					
ANR	1012832	Identifier	input_line		1012741	1					
ANR	1012833	CFGEntryNode	ENTRY		1012741		True				
ANR	1012834	CFGExitNode	EXIT		1012741		True				
ANR	1012835	Symbol	atoi		1012741						
ANR	1012836	Symbol	* input_line		1012741						
ANR	1012837	Symbol	NULL		1012741						
ANR	1012838	Symbol	& jobnum		1012741						
ANR	1012839	Symbol	jobnum		1012741						
ANR	1012840	Symbol	count_args		1012741						
ANR	1012841	Symbol	cmp_request_single		1012741						
ANR	1012842	Symbol	input_line		1012741						
ANR	1012843	Symbol	arg_cnt		1012741						
ANR	1012844	Symbol	thread_cream_job_cancel		1012741						
ANR	1012845	Function	thread_cream_job_cancel	965:0:27049:29022							
ANR	1012846	FunctionDef	thread_cream_job_cancel (Request * * reqlist)		1012845	0					
ANR	1012847	CompoundStatement		966:0:27098:29022	1012845	0					
ANR	1012848	IfStatement	if ( reqlist == NULL )		1012845	0					
ANR	1012849	Condition	reqlist == NULL	972:4:27325:27339	1012845	0	True				
ANR	1012850	EqualityExpression	reqlist == NULL		1012845	0		==			
ANR	1012851	Identifier	reqlist		1012845	0					
ANR	1012852	Identifier	NULL		1012845	1					
ANR	1012853	CompoundStatement		7:21:243:243	1012845	1					
ANR	1012854	ExpressionStatement	"internal_error ( ""thread_cream_job_cancel called with NULL pointer\\n"" )"	973:2:27346:27414	1012845	0	True				
ANR	1012855	CallExpression	"internal_error ( ""thread_cream_job_cancel called with NULL pointer\\n"" )"		1012845	0					
ANR	1012856	Callee	internal_error		1012845	0					
ANR	1012857	Identifier	internal_error		1012845	0					
ANR	1012858	ArgumentList	"""thread_cream_job_cancel called with NULL pointer\\n"""		1012845	1					
ANR	1012859	Argument	"""thread_cream_job_cancel called with NULL pointer\\n"""		1012845	0					
ANR	1012860	PrimaryExpression	"""thread_cream_job_cancel called with NULL pointer\\n"""		1012845	0					
ANR	1012861	IfStatement	if ( reqlist [ 0 ] == NULL )		1012845	1					
ANR	1012862	Condition	reqlist [ 0 ] == NULL	975:4:27423:27440	1012845	0	True				
ANR	1012863	EqualityExpression	reqlist [ 0 ] == NULL		1012845	0		==			
ANR	1012864	ArrayIndexing	reqlist [ 0 ]		1012845	0					
ANR	1012865	Identifier	reqlist		1012845	0					
ANR	1012866	PrimaryExpression	0		1012845	1					
ANR	1012867	Identifier	NULL		1012845	1					
ANR	1012868	CompoundStatement		10:24:344:344	1012845	1					
ANR	1012869	ExpressionStatement	"internal_error ( ""thread_cream_job_cancel called with empty list\\n"" )"	976:2:27447:27513	1012845	0	True				
ANR	1012870	CallExpression	"internal_error ( ""thread_cream_job_cancel called with empty list\\n"" )"		1012845	0					
ANR	1012871	Callee	internal_error		1012845	0					
ANR	1012872	Identifier	internal_error		1012845	0					
ANR	1012873	ArgumentList	"""thread_cream_job_cancel called with empty list\\n"""		1012845	1					
ANR	1012874	Argument	"""thread_cream_job_cancel called with empty list\\n"""		1012845	0					
ANR	1012875	PrimaryExpression	"""thread_cream_job_cancel called with empty list\\n"""		1012845	0					
ANR	1012876	IdentifierDeclStatement	char * service ;	979:1:27520:27533	1012845	2	True				
ANR	1012877	IdentifierDecl	* service		1012845	0					
ANR	1012878	IdentifierDeclType	char *		1012845	0					
ANR	1012879	Identifier	service		1012845	1					
ANR	1012880	ExpressionStatement	"process_string_arg ( reqlist [ 0 ] -> input_line [ 2 ] , & service )"	980:1:27536:27593	1012845	3	True				
ANR	1012881	CallExpression	"process_string_arg ( reqlist [ 0 ] -> input_line [ 2 ] , & service )"		1012845	0					
ANR	1012882	Callee	process_string_arg		1012845	0					
ANR	1012883	Identifier	process_string_arg		1012845	0					
ANR	1012884	ArgumentList	reqlist [ 0 ] -> input_line [ 2 ]		1012845	1					
ANR	1012885	Argument	reqlist [ 0 ] -> input_line [ 2 ]		1012845	0					
ANR	1012886	ArrayIndexing	reqlist [ 0 ] -> input_line [ 2 ]		1012845	0					
ANR	1012887	PtrMemberAccess	reqlist [ 0 ] -> input_line		1012845	0					
ANR	1012888	ArrayIndexing	reqlist [ 0 ]		1012845	0					
ANR	1012889	Identifier	reqlist		1012845	0					
ANR	1012890	PrimaryExpression	0		1012845	1					
ANR	1012891	Identifier	input_line		1012845	1					
ANR	1012892	PrimaryExpression	2		1012845	1					
ANR	1012893	Argument	& service		1012845	1					
ANR	1012894	UnaryOperationExpression	& service		1012845	0					
ANR	1012895	UnaryOperator	&		1012845	0					
ANR	1012896	Identifier	service		1012845	1					
ANR	1012897	IdentifierDeclStatement	string proxy = reqlist [ 0 ] -> proxy ;	981:1:27596:27628	1012845	4	True				
ANR	1012898	IdentifierDecl	proxy = reqlist [ 0 ] -> proxy		1012845	0					
ANR	1012899	IdentifierDeclType	string		1012845	0					
ANR	1012900	Identifier	proxy		1012845	1					
ANR	1012901	AssignmentExpression	proxy = reqlist [ 0 ] -> proxy		1012845	2		=			
ANR	1012902	Identifier	proxy		1012845	0					
ANR	1012903	PtrMemberAccess	reqlist [ 0 ] -> proxy		1012845	1					
ANR	1012904	ArrayIndexing	reqlist [ 0 ]		1012845	0					
ANR	1012905	Identifier	reqlist		1012845	0					
ANR	1012906	PrimaryExpression	0		1012845	1					
ANR	1012907	Identifier	proxy		1012845	1					
ANR	1012908	IdentifierDeclStatement	AbsCreamProxy * cp = NULL ;	982:1:27631:27655	1012845	5	True				
ANR	1012909	IdentifierDecl	* cp = NULL		1012845	0					
ANR	1012910	IdentifierDeclType	AbsCreamProxy *		1012845	0					
ANR	1012911	Identifier	cp		1012845	1					
ANR	1012912	AssignmentExpression	* cp = NULL		1012845	2		=			
ANR	1012913	Identifier	NULL		1012845	0					
ANR	1012914	Identifier	NULL		1012845	1					
ANR	1012915	IdentifierDeclStatement	vector < string > reqids ;	984:1:27659:27680	1012845	6	True				
ANR	1012916	IdentifierDecl	reqids		1012845	0					
ANR	1012917	IdentifierDeclType	vector < string >		1012845	0					
ANR	1012918	Identifier	reqids		1012845	1					
ANR	1012919	IdentifierDeclStatement	"map < string , string > results ;"	985:1:27683:27710	1012845	7	True				
ANR	1012920	IdentifierDecl	results		1012845	0					
ANR	1012921	IdentifierDeclType	"map < string , string >"		1012845	0					
ANR	1012922	Identifier	results		1012845	1					
ANR	1012923	TryStatement	try		1012845	8					
ANR	1012924	CompoundStatement		33:2:1006:1022	1012845	0					
ANR	1012925	IdentifierDeclStatement	vector < JobIdWrapper > jv ;		1012845	0					
ANR	1012926	IdentifierDecl	jv		1012845	0					
ANR	1012927	IdentifierDeclType	vector < JobIdWrapper >		1012845	0					
ANR	1012928	Identifier	jv		1012845	1					
ANR	1012929	ExpressionStatement	"collect_job_ids ( reqlist , jv , reqids )"		1012845	1					
ANR	1012930	CallExpression	"collect_job_ids ( reqlist , jv , reqids )"		1012845	0					
ANR	1012931	Callee	collect_job_ids		1012845	0					
ANR	1012932	Identifier	collect_job_ids		1012845	0					
ANR	1012933	ArgumentList	reqlist		1012845	1					
ANR	1012934	Argument	reqlist		1012845	0					
ANR	1012935	Identifier	reqlist		1012845	0					
ANR	1012936	Argument	jv		1012845	1					
ANR	1012937	Identifier	jv		1012845	0					
ANR	1012938	Argument	reqids		1012845	2					
ANR	1012939	Identifier	reqids		1012845	0					
ANR	1012940	IdentifierDeclStatement	vector < string > sv ;		1012845	2					
ANR	1012941	IdentifierDecl	sv		1012845	0					
ANR	1012942	IdentifierDeclType	vector < string >		1012845	0					
ANR	1012943	Identifier	sv		1012845	1					
ANR	1012944	IdentifierDeclStatement	"JobFilterWrapper jfw ( jv , sv , - 1 , - 1 , """" , """" ) ;"		1012845	3					
ANR	1012945	IdentifierDecl	"jfw ( jv , sv , - 1 , - 1 , """" , """" )"		1012845	0					
ANR	1012946	IdentifierDeclType	JobFilterWrapper		1012845	0					
ANR	1012947	Identifier	jfw		1012845	1					
ANR	1012948	Expression	"jv , sv , - 1 , - 1 , """" , """""		1012845	2					
ANR	1012949	Identifier	jv		1012845	0					
ANR	1012950	Expression	"sv , - 1 , - 1 , """" , """""		1012845	1					
ANR	1012951	Identifier	sv		1012845	0					
ANR	1012952	Expression	"- 1 , - 1 , """" , """""		1012845	1					
ANR	1012953	UnaryOperationExpression	- 1		1012845	0					
ANR	1012954	UnaryOperator	-		1012845	0					
ANR	1012955	PrimaryExpression	1		1012845	1					
ANR	1012956	Expression	"- 1 , """" , """""		1012845	1					
ANR	1012957	UnaryOperationExpression	- 1		1012845	0					
ANR	1012958	UnaryOperator	-		1012845	0					
ANR	1012959	PrimaryExpression	1		1012845	1					
ANR	1012960	Expression	""""" , """""		1012845	1					
ANR	1012961	PrimaryExpression	""""""		1012845	0					
ANR	1012962	PrimaryExpression	""""""		1012845	1					
ANR	1012963	IdentifierDeclStatement	ResultWrapper rw ;		1012845	4					
ANR	1012964	IdentifierDecl	rw		1012845	0					
ANR	1012965	IdentifierDeclType	ResultWrapper		1012845	0					
ANR	1012966	Identifier	rw		1012845	1					
ANR	1012967	ExpressionStatement	"cp = CreamProxyFactory :: make_CreamProxyCancel ( & jfw , & rw , DEFAULT_TIMEOUT )"		1012845	5					
ANR	1012968	AssignmentExpression	"cp = CreamProxyFactory :: make_CreamProxyCancel ( & jfw , & rw , DEFAULT_TIMEOUT )"		1012845	0		=			
ANR	1012969	Identifier	cp		1012845	0					
ANR	1012970	CallExpression	"CreamProxyFactory :: make_CreamProxyCancel ( & jfw , & rw , DEFAULT_TIMEOUT )"		1012845	1					
ANR	1012971	Callee	CreamProxyFactory :: make_CreamProxyCancel		1012845	0					
ANR	1012972	Identifier	CreamProxyFactory :: make_CreamProxyCancel		1012845	0					
ANR	1012973	ArgumentList	& jfw		1012845	1					
ANR	1012974	Argument	& jfw		1012845	0					
ANR	1012975	UnaryOperationExpression	& jfw		1012845	0					
ANR	1012976	UnaryOperator	&		1012845	0					
ANR	1012977	Identifier	jfw		1012845	1					
ANR	1012978	Argument	& rw		1012845	1					
ANR	1012979	UnaryOperationExpression	& rw		1012845	0					
ANR	1012980	UnaryOperator	&		1012845	0					
ANR	1012981	Identifier	rw		1012845	1					
ANR	1012982	Argument	DEFAULT_TIMEOUT		1012845	2					
ANR	1012983	Identifier	DEFAULT_TIMEOUT		1012845	0					
ANR	1012984	ExpressionStatement	check_for_factory_error ( cp )		1012845	6					
ANR	1012985	CallExpression	check_for_factory_error ( cp )		1012845	0					
ANR	1012986	Callee	check_for_factory_error		1012845	0					
ANR	1012987	Identifier	check_for_factory_error		1012845	0					
ANR	1012988	ArgumentList	cp		1012845	1					
ANR	1012989	Argument	cp		1012845	0					
ANR	1012990	Identifier	cp		1012845	0					
ANR	1012991	ExpressionStatement	cp -> setCredential ( proxy . c_str ( ) )		1012845	7					
ANR	1012992	CallExpression	cp -> setCredential ( proxy . c_str ( ) )		1012845	0					
ANR	1012993	Callee	cp -> setCredential		1012845	0					
ANR	1012994	PtrMemberAccess	cp -> setCredential		1012845	0					
ANR	1012995	Identifier	cp		1012845	0					
ANR	1012996	Identifier	setCredential		1012845	1					
ANR	1012997	ArgumentList	proxy . c_str ( )		1012845	1					
ANR	1012998	Argument	proxy . c_str ( )		1012845	0					
ANR	1012999	CallExpression	proxy . c_str ( )		1012845	0					
ANR	1013000	Callee	proxy . c_str		1012845	0					
ANR	1013001	MemberAccess	proxy . c_str		1012845	0					
ANR	1013002	Identifier	proxy		1012845	0					
ANR	1013003	Identifier	c_str		1012845	1					
ANR	1013004	ArgumentList			1012845	1					
ANR	1013005	ExpressionStatement	cp -> execute ( service )		1012845	8					
ANR	1013006	CallExpression	cp -> execute ( service )		1012845	0					
ANR	1013007	Callee	cp -> execute		1012845	0					
ANR	1013008	PtrMemberAccess	cp -> execute		1012845	0					
ANR	1013009	Identifier	cp		1012845	0					
ANR	1013010	Identifier	execute		1012845	1					
ANR	1013011	ArgumentList	service		1012845	1					
ANR	1013012	Argument	service		1012845	0					
ANR	1013013	Identifier	service		1012845	0					
ANR	1013014	ExpressionStatement	"check_result_wrapper2 ( rw , results )"		1012845	9					
ANR	1013015	CallExpression	"check_result_wrapper2 ( rw , results )"		1012845	0					
ANR	1013016	Callee	check_result_wrapper2		1012845	0					
ANR	1013017	Identifier	check_result_wrapper2		1012845	0					
ANR	1013018	ArgumentList	rw		1012845	1					
ANR	1013019	Argument	rw		1012845	0					
ANR	1013020	Identifier	rw		1012845	0					
ANR	1013021	Argument	results		1012845	1					
ANR	1013022	Identifier	results		1012845	0					
ANR	1013023	Statement	delete		1012845	10					
ANR	1013024	ExpressionStatement	cp		1012845	11					
ANR	1013025	Identifier	cp		1012845	0					
ANR	1013026	CatchList			1012845	1					
ANR	1013027	CatchStatement	catch ( std :: exception & ex )		1012845	0					
ANR	1013028	Identifier	ex		1012845	0					
ANR	1013029	CompoundStatement		43:27:1303:1303	1012845	1					
ANR	1013030	Statement	delete	1009:2:28406:28411	1012845	0	True				
ANR	1013031	ExpressionStatement	cp	1009:9:28413:28415	1012845	1	True				
ANR	1013032	Identifier	cp		1012845	0					
ANR	1013033	ForStatement	for ( vector < string > :: const_iterator it = reqids . begin ( ) ; it != reqids . end ( ) ; it ++ )		1012845	2					
ANR	1013034	ForInit	vector < string > :: const_iterator it = reqids . begin ( ) ;	1011:6:28424:28474	1012845	0	True				
ANR	1013035	IdentifierDeclStatement	vector < string > :: const_iterator it = reqids . begin ( ) ;		1012845	0					
ANR	1013036	IdentifierDecl	it = reqids . begin ( )		1012845	0					
ANR	1013037	IdentifierDeclType	vector < string > :: const_iterator		1012845	0					
ANR	1013038	Identifier	it		1012845	1					
ANR	1013039	AssignmentExpression	it = reqids . begin ( )		1012845	2		=			
ANR	1013040	Identifier	it		1012845	0					
ANR	1013041	CallExpression	reqids . begin ( )		1012845	1					
ANR	1013042	Callee	reqids . begin		1012845	0					
ANR	1013043	MemberAccess	reqids . begin		1012845	0					
ANR	1013044	Identifier	reqids		1012845	0					
ANR	1013045	Identifier	begin		1012845	1					
ANR	1013046	ArgumentList			1012845	1					
ANR	1013047	Condition	it != reqids . end ( )	1012:3:28479:28496	1012845	1	True				
ANR	1013048	EqualityExpression	it != reqids . end ( )		1012845	0		!=			
ANR	1013049	Identifier	it		1012845	0					
ANR	1013050	CallExpression	reqids . end ( )		1012845	1					
ANR	1013051	Callee	reqids . end		1012845	0					
ANR	1013052	MemberAccess	reqids . end		1012845	0					
ANR	1013053	Identifier	reqids		1012845	0					
ANR	1013054	Identifier	end		1012845	1					
ANR	1013055	ArgumentList			1012845	1					
ANR	1013056	PostIncDecOperationExpression	it ++	1012:23:28499:28502	1012845	2	True				
ANR	1013057	Identifier	it		1012845	0					
ANR	1013058	IncDec	++		1012845	1					
ANR	1013059	CompoundStatement		49:3:1412:1448	1012845	3					
ANR	1013060	IdentifierDeclStatement	char * msg = escape_spaces ( ex . what ( ) ) ;	1014:3:28511:28547	1012845	0	True				
ANR	1013061	IdentifierDecl	* msg = escape_spaces ( ex . what ( ) )		1012845	0					
ANR	1013062	IdentifierDeclType	char *		1012845	0					
ANR	1013063	Identifier	msg		1012845	1					
ANR	1013064	AssignmentExpression	* msg = escape_spaces ( ex . what ( ) )		1012845	2		=			
ANR	1013065	Identifier	msg		1012845	0					
ANR	1013066	CallExpression	escape_spaces ( ex . what ( ) )		1012845	1					
ANR	1013067	Callee	escape_spaces		1012845	0					
ANR	1013068	Identifier	escape_spaces		1012845	0					
ANR	1013069	ArgumentList	ex . what ( )		1012845	1					
ANR	1013070	Argument	ex . what ( )		1012845	0					
ANR	1013071	CallExpression	ex . what ( )		1012845	0					
ANR	1013072	Callee	ex . what		1012845	0					
ANR	1013073	MemberAccess	ex . what		1012845	0					
ANR	1013074	Identifier	ex		1012845	0					
ANR	1013075	Identifier	what		1012845	1					
ANR	1013076	ArgumentList			1012845	1					
ANR	1013077	ExpressionStatement	"enqueue_result ( ( * it ) + "" CREAM_Job_Cancel\\\\ Error:\\\\ "" + msg )"	1015:3:28552:28613	1012845	1	True				
ANR	1013078	CallExpression	"enqueue_result ( ( * it ) + "" CREAM_Job_Cancel\\\\ Error:\\\\ "" + msg )"		1012845	0					
ANR	1013079	Callee	enqueue_result		1012845	0					
ANR	1013080	Identifier	enqueue_result		1012845	0					
ANR	1013081	ArgumentList	"( * it ) + "" CREAM_Job_Cancel\\\\ Error:\\\\ "" + msg"		1012845	1					
ANR	1013082	Argument	"( * it ) + "" CREAM_Job_Cancel\\\\ Error:\\\\ "" + msg"		1012845	0					
ANR	1013083	AdditiveExpression	"( * it ) + "" CREAM_Job_Cancel\\\\ Error:\\\\ "" + msg"		1012845	0		+			
ANR	1013084	UnaryOperationExpression	* it		1012845	0					
ANR	1013085	UnaryOperator	*		1012845	0					
ANR	1013086	Identifier	it		1012845	1					
ANR	1013087	AdditiveExpression	""" CREAM_Job_Cancel\\\\ Error:\\\\ "" + msg"		1012845	1		+			
ANR	1013088	PrimaryExpression	""" CREAM_Job_Cancel\\\\ Error:\\\\ """		1012845	0					
ANR	1013089	Identifier	msg		1012845	1					
ANR	1013090	ExpressionStatement	free ( msg )	1016:3:28618:28627	1012845	2	True				
ANR	1013091	CallExpression	free ( msg )		1012845	0					
ANR	1013092	Callee	free		1012845	0					
ANR	1013093	Identifier	free		1012845	0					
ANR	1013094	ArgumentList	msg		1012845	1					
ANR	1013095	Argument	msg		1012845	0					
ANR	1013096	Identifier	msg		1012845	0					
ANR	1013097	ReturnStatement	return 1 ;	1019:2:28638:28646	1012845	3	True				
ANR	1013098	PrimaryExpression	1		1012845	0					
ANR	1013099	ForStatement	for ( int idx = 0 ; reqlist [ idx ] != NULL ; idx ++ )		1012845	9					
ANR	1013100	ForInit	int idx = 0 ;	1022:7:28660:28671	1012845	0	True				
ANR	1013101	IdentifierDeclStatement	int idx = 0 ;		1012845	0					
ANR	1013102	IdentifierDecl	idx = 0		1012845	0					
ANR	1013103	IdentifierDeclType	int		1012845	0					
ANR	1013104	Identifier	idx		1012845	1					
ANR	1013105	AssignmentExpression	idx = 0		1012845	2		=			
ANR	1013106	Identifier	idx		1012845	0					
ANR	1013107	PrimaryExpression	0		1012845	1					
ANR	1013108	Condition	reqlist [ idx ] != NULL	1022:20:28673:28692	1012845	1	True				
ANR	1013109	EqualityExpression	reqlist [ idx ] != NULL		1012845	0		!=			
ANR	1013110	ArrayIndexing	reqlist [ idx ]		1012845	0					
ANR	1013111	Identifier	reqlist		1012845	0					
ANR	1013112	Identifier	idx		1012845	1					
ANR	1013113	Identifier	NULL		1012845	1					
ANR	1013114	PostIncDecOperationExpression	idx ++	1022:42:28695:28699	1012845	2	True				
ANR	1013115	Identifier	idx		1012845	0					
ANR	1013116	IncDec	++		1012845	1					
ANR	1013117	CompoundStatement		59:2:1654:1696	1012845	3					
ANR	1013118	IdentifierDeclStatement	string reqid = reqlist [ idx ] -> input_line [ 1 ] ;	1023:2:28707:28749	1012845	0	True				
ANR	1013119	IdentifierDecl	reqid = reqlist [ idx ] -> input_line [ 1 ]		1012845	0					
ANR	1013120	IdentifierDeclType	string		1012845	0					
ANR	1013121	Identifier	reqid		1012845	1					
ANR	1013122	AssignmentExpression	reqid = reqlist [ idx ] -> input_line [ 1 ]		1012845	2		=			
ANR	1013123	Identifier	reqid		1012845	0					
ANR	1013124	ArrayIndexing	reqlist [ idx ] -> input_line [ 1 ]		1012845	1					
ANR	1013125	PtrMemberAccess	reqlist [ idx ] -> input_line		1012845	0					
ANR	1013126	ArrayIndexing	reqlist [ idx ]		1012845	0					
ANR	1013127	Identifier	reqlist		1012845	0					
ANR	1013128	Identifier	idx		1012845	1					
ANR	1013129	Identifier	input_line		1012845	1					
ANR	1013130	PrimaryExpression	1		1012845	1					
ANR	1013131	IdentifierDeclStatement	string jobid = reqlist [ idx ] -> input_line [ 4 ] ;	1024:2:28753:28795	1012845	1	True				
ANR	1013132	IdentifierDecl	jobid = reqlist [ idx ] -> input_line [ 4 ]		1012845	0					
ANR	1013133	IdentifierDeclType	string		1012845	0					
ANR	1013134	Identifier	jobid		1012845	1					
ANR	1013135	AssignmentExpression	jobid = reqlist [ idx ] -> input_line [ 4 ]		1012845	2		=			
ANR	1013136	Identifier	jobid		1012845	0					
ANR	1013137	ArrayIndexing	reqlist [ idx ] -> input_line [ 4 ]		1012845	1					
ANR	1013138	PtrMemberAccess	reqlist [ idx ] -> input_line		1012845	0					
ANR	1013139	ArrayIndexing	reqlist [ idx ]		1012845	0					
ANR	1013140	Identifier	reqlist		1012845	0					
ANR	1013141	Identifier	idx		1012845	1					
ANR	1013142	Identifier	input_line		1012845	1					
ANR	1013143	PrimaryExpression	4		1012845	1					
ANR	1013144	IfStatement	"if ( results [ jobid ] != """" )"		1012845	2					
ANR	1013145	Condition	"results [ jobid ] != """""	1025:7:28804:28823	1012845	0	True				
ANR	1013146	EqualityExpression	"results [ jobid ] != """""		1012845	0		!=			
ANR	1013147	ArrayIndexing	results [ jobid ]		1012845	0					
ANR	1013148	Identifier	results		1012845	0					
ANR	1013149	Identifier	jobid		1012845	1					
ANR	1013150	PrimaryExpression	""""""		1012845	1					
ANR	1013151	CompoundStatement		61:3:1733:1784	1012845	1					
ANR	1013152	IdentifierDeclStatement	char * msg = escape_spaces ( results [ jobid ] . c_str ( ) ) ;	1026:3:28832:28883	1012845	0	True				
ANR	1013153	IdentifierDecl	* msg = escape_spaces ( results [ jobid ] . c_str ( ) )		1012845	0					
ANR	1013154	IdentifierDeclType	char *		1012845	0					
ANR	1013155	Identifier	msg		1012845	1					
ANR	1013156	AssignmentExpression	* msg = escape_spaces ( results [ jobid ] . c_str ( ) )		1012845	2		=			
ANR	1013157	Identifier	msg		1012845	0					
ANR	1013158	CallExpression	escape_spaces ( results [ jobid ] . c_str ( ) )		1012845	1					
ANR	1013159	Callee	escape_spaces		1012845	0					
ANR	1013160	Identifier	escape_spaces		1012845	0					
ANR	1013161	ArgumentList	results [ jobid ] . c_str ( )		1012845	1					
ANR	1013162	Argument	results [ jobid ] . c_str ( )		1012845	0					
ANR	1013163	CallExpression	results [ jobid ] . c_str ( )		1012845	0					
ANR	1013164	Callee	results [ jobid ] . c_str		1012845	0					
ANR	1013165	MemberAccess	results [ jobid ] . c_str		1012845	0					
ANR	1013166	ArrayIndexing	results [ jobid ]		1012845	0					
ANR	1013167	Identifier	results		1012845	0					
ANR	1013168	Identifier	jobid		1012845	1					
ANR	1013169	Identifier	c_str		1012845	1					
ANR	1013170	ArgumentList			1012845	1					
ANR	1013171	ExpressionStatement	"enqueue_result ( reqid + "" CREAM_Job_Cancel\\\\ Error:\\\\ "" + msg )"	1027:3:28888:28951	1012845	1	True				
ANR	1013172	CallExpression	"enqueue_result ( reqid + "" CREAM_Job_Cancel\\\\ Error:\\\\ "" + msg )"		1012845	0					
ANR	1013173	Callee	enqueue_result		1012845	0					
ANR	1013174	Identifier	enqueue_result		1012845	0					
ANR	1013175	ArgumentList	"reqid + "" CREAM_Job_Cancel\\\\ Error:\\\\ "" + msg"		1012845	1					
ANR	1013176	Argument	"reqid + "" CREAM_Job_Cancel\\\\ Error:\\\\ "" + msg"		1012845	0					
ANR	1013177	AdditiveExpression	"reqid + "" CREAM_Job_Cancel\\\\ Error:\\\\ "" + msg"		1012845	0		+			
ANR	1013178	Identifier	reqid		1012845	0					
ANR	1013179	AdditiveExpression	""" CREAM_Job_Cancel\\\\ Error:\\\\ "" + msg"		1012845	1		+			
ANR	1013180	PrimaryExpression	""" CREAM_Job_Cancel\\\\ Error:\\\\ """		1012845	0					
ANR	1013181	Identifier	msg		1012845	1					
ANR	1013182	ElseStatement	else		1012845	0					
ANR	1013183	CompoundStatement		63:9:1863:1863	1012845	0					
ANR	1013184	ExpressionStatement	"enqueue_result ( reqid + "" NULL"" )"	1029:3:28967:29000	1012845	0	True				
ANR	1013185	CallExpression	"enqueue_result ( reqid + "" NULL"" )"		1012845	0					
ANR	1013186	Callee	enqueue_result		1012845	0					
ANR	1013187	Identifier	enqueue_result		1012845	0					
ANR	1013188	ArgumentList	"reqid + "" NULL"""		1012845	1					
ANR	1013189	Argument	"reqid + "" NULL"""		1012845	0					
ANR	1013190	AdditiveExpression	"reqid + "" NULL"""		1012845	0		+			
ANR	1013191	Identifier	reqid		1012845	0					
ANR	1013192	PrimaryExpression	""" NULL"""		1012845	1					
ANR	1013193	ReturnStatement	return 0 ;	1033:1:29012:29020	1012845	10	True				
ANR	1013194	PrimaryExpression	0		1012845	0					
ANR	1013195	ReturnType	int		1012845	1					
ANR	1013196	Identifier	thread_cream_job_cancel		1012845	2					
ANR	1013197	ParameterList	Request * * reqlist		1012845	3					
ANR	1013198	Parameter	Request * * reqlist	965:29:27078:27094	1012845	0	True				
ANR	1013199	ParameterType	Request * *		1012845	0					
ANR	1013200	Identifier	reqlist		1012845	1					
ANR	1013201	CFGEntryNode	ENTRY		1012845		True				
ANR	1013202	CFGExitNode	EXIT		1012845		True				
ANR	1013203	CFGErrorNode	ERROR		1012845		True				
ANR	1013204	Symbol	msg		1012845						
ANR	1013205	Symbol	results [ jobid ] . c_str		1012845						
ANR	1013206	Symbol	reqlist [ idx ] -> input_line		1012845						
ANR	1013207	Symbol	* jobid		1012845						
ANR	1013208	Symbol	* * * reqlist		1012845						
ANR	1013209	Symbol	* results		1012845						
ANR	1013210	Symbol	* * reqlist		1012845						
ANR	1013211	Symbol	reqid		1012845						
ANR	1013212	Symbol	* * idx		1012845						
ANR	1013213	Symbol	jobid		1012845						
ANR	1013214	Symbol	* reqlist [ idx ] -> input_line		1012845						
ANR	1013215	Symbol	reqids		1012845						
ANR	1013216	Symbol	reqlist [ 0 ] -> proxy		1012845						
ANR	1013217	Symbol	* idx		1012845						
ANR	1013218	Symbol	* reqlist [ 0 ] -> input_line		1012845						
ANR	1013219	Symbol	results		1012845						
ANR	1013220	Symbol	NULL		1012845						
ANR	1013221	Symbol	reqlist [ 0 ] -> input_line		1012845						
ANR	1013222	Symbol	& service		1012845						
ANR	1013223	Symbol	* reqlist		1012845						
ANR	1013224	Symbol	cp		1012845						
ANR	1013225	Symbol	proxy		1012845						
ANR	1013226	Symbol	reqlist		1012845						
ANR	1013227	Symbol	service		1012845						
ANR	1013228	Symbol	* * * idx		1012845						
ANR	1013229	Symbol	escape_spaces		1012845						
ANR	1013230	Symbol	idx		1012845						
ANR	1013231	Function	handle_cream_job_suspend	1041:0:29270:29660							
ANR	1013232	FunctionDef	handle_cream_job_suspend (char * * input_line)		1013231	0					
ANR	1013233	CompoundStatement		1042:0:29320:29660	1013231	0					
ANR	1013234	IdentifierDeclStatement	int arg_cnt = count_args ( input_line ) ;	1043:1:29323:29361	1013231	0	True				
ANR	1013235	IdentifierDecl	arg_cnt = count_args ( input_line )		1013231	0					
ANR	1013236	IdentifierDeclType	int		1013231	0					
ANR	1013237	Identifier	arg_cnt		1013231	1					
ANR	1013238	AssignmentExpression	arg_cnt = count_args ( input_line )		1013231	2		=			
ANR	1013239	Identifier	arg_cnt		1013231	0					
ANR	1013240	CallExpression	count_args ( input_line )		1013231	1					
ANR	1013241	Callee	count_args		1013231	0					
ANR	1013242	Identifier	count_args		1013231	0					
ANR	1013243	ArgumentList	input_line		1013231	1					
ANR	1013244	Argument	input_line		1013231	0					
ANR	1013245	Identifier	input_line		1013231	0					
ANR	1013246	IdentifierDeclStatement	char * jobnum = NULL ;	1044:1:29364:29383	1013231	1	True				
ANR	1013247	IdentifierDecl	* jobnum = NULL		1013231	0					
ANR	1013248	IdentifierDeclType	char *		1013231	0					
ANR	1013249	Identifier	jobnum		1013231	1					
ANR	1013250	AssignmentExpression	* jobnum = NULL		1013231	2		=			
ANR	1013251	Identifier	NULL		1013231	0					
ANR	1013252	Identifier	NULL		1013231	1					
ANR	1013253	IfStatement	if ( arg_cnt < 4 )		1013231	2					
ANR	1013254	Condition	arg_cnt < 4	1046:6:29392:29402	1013231	0	True				
ANR	1013255	RelationalExpression	arg_cnt < 4		1013231	0		<			
ANR	1013256	Identifier	arg_cnt		1013231	0					
ANR	1013257	PrimaryExpression	4		1013231	1					
ANR	1013258	CompoundStatement		5:20:85:85	1013231	1					
ANR	1013259	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	1047:2:29410:29431	1013231	0	True				
ANR	1013260	CallExpression	HANDLE_SYNTAX_ERROR ( )		1013231	0					
ANR	1013261	Callee	HANDLE_SYNTAX_ERROR		1013231	0					
ANR	1013262	Identifier	HANDLE_SYNTAX_ERROR		1013231	0					
ANR	1013263	ArgumentList			1013231	1					
ANR	1013264	ExpressionStatement	"process_string_arg ( input_line [ 3 ] , & jobnum )"	1050:1:29438:29482	1013231	3	True				
ANR	1013265	CallExpression	"process_string_arg ( input_line [ 3 ] , & jobnum )"		1013231	0					
ANR	1013266	Callee	process_string_arg		1013231	0					
ANR	1013267	Identifier	process_string_arg		1013231	0					
ANR	1013268	ArgumentList	input_line [ 3 ]		1013231	1					
ANR	1013269	Argument	input_line [ 3 ]		1013231	0					
ANR	1013270	ArrayIndexing	input_line [ 3 ]		1013231	0					
ANR	1013271	Identifier	input_line		1013231	0					
ANR	1013272	PrimaryExpression	3		1013231	1					
ANR	1013273	Argument	& jobnum		1013231	1					
ANR	1013274	UnaryOperationExpression	& jobnum		1013231	0					
ANR	1013275	UnaryOperator	&		1013231	0					
ANR	1013276	Identifier	jobnum		1013231	1					
ANR	1013277	IfStatement	if ( jobnum && ( atoi ( jobnum ) + 4 != arg_cnt ) )		1013231	4					
ANR	1013278	Condition	jobnum && ( atoi ( jobnum ) + 4 != arg_cnt )	1051:6:29490:29532	1013231	0	True				
ANR	1013279	AndExpression	jobnum && ( atoi ( jobnum ) + 4 != arg_cnt )		1013231	0		&&			
ANR	1013280	Identifier	jobnum		1013231	0					
ANR	1013281	EqualityExpression	atoi ( jobnum ) + 4 != arg_cnt		1013231	1		!=			
ANR	1013282	AdditiveExpression	atoi ( jobnum ) + 4		1013231	0		+			
ANR	1013283	CallExpression	atoi ( jobnum )		1013231	0					
ANR	1013284	Callee	atoi		1013231	0					
ANR	1013285	Identifier	atoi		1013231	0					
ANR	1013286	ArgumentList	jobnum		1013231	1					
ANR	1013287	Argument	jobnum		1013231	0					
ANR	1013288	Identifier	jobnum		1013231	0					
ANR	1013289	PrimaryExpression	4		1013231	1					
ANR	1013290	Identifier	arg_cnt		1013231	1					
ANR	1013291	CompoundStatement		10:52:215:215	1013231	1					
ANR	1013292	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	1052:2:29540:29561	1013231	0	True				
ANR	1013293	CallExpression	HANDLE_SYNTAX_ERROR ( )		1013231	0					
ANR	1013294	Callee	HANDLE_SYNTAX_ERROR		1013231	0					
ANR	1013295	Identifier	HANDLE_SYNTAX_ERROR		1013231	0					
ANR	1013296	ArgumentList			1013231	1					
ANR	1013297	ExpressionStatement	"enqueue_request ( input_line , thread_cream_job_suspend )"	1055:1:29568:29623	1013231	5	True				
ANR	1013298	CallExpression	"enqueue_request ( input_line , thread_cream_job_suspend )"		1013231	0					
ANR	1013299	Callee	enqueue_request		1013231	0					
ANR	1013300	Identifier	enqueue_request		1013231	0					
ANR	1013301	ArgumentList	input_line		1013231	1					
ANR	1013302	Argument	input_line		1013231	0					
ANR	1013303	Identifier	input_line		1013231	0					
ANR	1013304	Argument	thread_cream_job_suspend		1013231	1					
ANR	1013305	Identifier	thread_cream_job_suspend		1013231	0					
ANR	1013306	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	1057:1:29627:29645	1013231	6	True				
ANR	1013307	CallExpression	"gahp_printf ( ""S\\n"" )"		1013231	0					
ANR	1013308	Callee	gahp_printf		1013231	0					
ANR	1013309	Identifier	gahp_printf		1013231	0					
ANR	1013310	ArgumentList	"""S\\n"""		1013231	1					
ANR	1013311	Argument	"""S\\n"""		1013231	0					
ANR	1013312	PrimaryExpression	"""S\\n"""		1013231	0					
ANR	1013313	ReturnStatement	return 0 ;	1059:1:29650:29658	1013231	7	True				
ANR	1013314	PrimaryExpression	0		1013231	0					
ANR	1013315	ReturnType	int		1013231	1					
ANR	1013316	Identifier	handle_cream_job_suspend		1013231	2					
ANR	1013317	ParameterList	char * * input_line		1013231	3					
ANR	1013318	Parameter	char * * input_line	1041:30:29300:29316	1013231	0	True				
ANR	1013319	ParameterType	char * *		1013231	0					
ANR	1013320	Identifier	input_line		1013231	1					
ANR	1013321	CFGEntryNode	ENTRY		1013231		True				
ANR	1013322	CFGExitNode	EXIT		1013231		True				
ANR	1013323	Symbol	atoi		1013231						
ANR	1013324	Symbol	* input_line		1013231						
ANR	1013325	Symbol	NULL		1013231						
ANR	1013326	Symbol	& jobnum		1013231						
ANR	1013327	Symbol	jobnum		1013231						
ANR	1013328	Symbol	count_args		1013231						
ANR	1013329	Symbol	input_line		1013231						
ANR	1013330	Symbol	thread_cream_job_suspend		1013231						
ANR	1013331	Symbol	arg_cnt		1013231						
ANR	1013332	Function	thread_cream_job_suspend	1062:0:29663:31468							
ANR	1013333	FunctionDef	thread_cream_job_suspend (Request * req)		1013332	0					
ANR	1013334	CompoundStatement		1063:0:29708:31468	1013332	0					
ANR	1013335	IdentifierDeclStatement	"char * reqid , * service , * jobnum_str , * jobid ;"	1069:1:29932:29974	1013332	0	True				
ANR	1013336	IdentifierDecl	* reqid		1013332	0					
ANR	1013337	IdentifierDeclType	char *		1013332	0					
ANR	1013338	Identifier	reqid		1013332	1					
ANR	1013339	IdentifierDecl	* service		1013332	1					
ANR	1013340	IdentifierDeclType	char *		1013332	0					
ANR	1013341	Identifier	service		1013332	1					
ANR	1013342	IdentifierDecl	* jobnum_str		1013332	2					
ANR	1013343	IdentifierDeclType	char *		1013332	0					
ANR	1013344	Identifier	jobnum_str		1013332	1					
ANR	1013345	IdentifierDecl	* jobid		1013332	3					
ANR	1013346	IdentifierDeclType	char *		1013332	0					
ANR	1013347	Identifier	jobid		1013332	1					
ANR	1013348	IdentifierDeclStatement	string result_line ;	1070:1:29977:29995	1013332	1	True				
ANR	1013349	IdentifierDecl	result_line		1013332	0					
ANR	1013350	IdentifierDeclType	string		1013332	0					
ANR	1013351	Identifier	result_line		1013332	1					
ANR	1013352	IdentifierDeclStatement	AbsCreamProxy * cp = NULL ;	1071:1:29998:30022	1013332	2	True				
ANR	1013353	IdentifierDecl	* cp = NULL		1013332	0					
ANR	1013354	IdentifierDeclType	AbsCreamProxy *		1013332	0					
ANR	1013355	Identifier	cp		1013332	1					
ANR	1013356	AssignmentExpression	* cp = NULL		1013332	2		=			
ANR	1013357	Identifier	NULL		1013332	0					
ANR	1013358	Identifier	NULL		1013332	1					
ANR	1013359	ExpressionStatement	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"	1073:1:30027:30075	1013332	3	True				
ANR	1013360	CallExpression	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"		1013332	0					
ANR	1013361	Callee	process_string_arg		1013332	0					
ANR	1013362	Identifier	process_string_arg		1013332	0					
ANR	1013363	ArgumentList	req -> input_line [ 1 ]		1013332	1					
ANR	1013364	Argument	req -> input_line [ 1 ]		1013332	0					
ANR	1013365	ArrayIndexing	req -> input_line [ 1 ]		1013332	0					
ANR	1013366	PtrMemberAccess	req -> input_line		1013332	0					
ANR	1013367	Identifier	req		1013332	0					
ANR	1013368	Identifier	input_line		1013332	1					
ANR	1013369	PrimaryExpression	1		1013332	1					
ANR	1013370	Argument	& reqid		1013332	1					
ANR	1013371	UnaryOperationExpression	& reqid		1013332	0					
ANR	1013372	UnaryOperator	&		1013332	0					
ANR	1013373	Identifier	reqid		1013332	1					
ANR	1013374	ExpressionStatement	"process_string_arg ( req -> input_line [ 2 ] , & service )"	1074:1:30078:30128	1013332	4	True				
ANR	1013375	CallExpression	"process_string_arg ( req -> input_line [ 2 ] , & service )"		1013332	0					
ANR	1013376	Callee	process_string_arg		1013332	0					
ANR	1013377	Identifier	process_string_arg		1013332	0					
ANR	1013378	ArgumentList	req -> input_line [ 2 ]		1013332	1					
ANR	1013379	Argument	req -> input_line [ 2 ]		1013332	0					
ANR	1013380	ArrayIndexing	req -> input_line [ 2 ]		1013332	0					
ANR	1013381	PtrMemberAccess	req -> input_line		1013332	0					
ANR	1013382	Identifier	req		1013332	0					
ANR	1013383	Identifier	input_line		1013332	1					
ANR	1013384	PrimaryExpression	2		1013332	1					
ANR	1013385	Argument	& service		1013332	1					
ANR	1013386	UnaryOperationExpression	& service		1013332	0					
ANR	1013387	UnaryOperator	&		1013332	0					
ANR	1013388	Identifier	service		1013332	1					
ANR	1013389	ExpressionStatement	"process_string_arg ( req -> input_line [ 3 ] , & jobnum_str )"	1075:1:30131:30184	1013332	5	True				
ANR	1013390	CallExpression	"process_string_arg ( req -> input_line [ 3 ] , & jobnum_str )"		1013332	0					
ANR	1013391	Callee	process_string_arg		1013332	0					
ANR	1013392	Identifier	process_string_arg		1013332	0					
ANR	1013393	ArgumentList	req -> input_line [ 3 ]		1013332	1					
ANR	1013394	Argument	req -> input_line [ 3 ]		1013332	0					
ANR	1013395	ArrayIndexing	req -> input_line [ 3 ]		1013332	0					
ANR	1013396	PtrMemberAccess	req -> input_line		1013332	0					
ANR	1013397	Identifier	req		1013332	0					
ANR	1013398	Identifier	input_line		1013332	1					
ANR	1013399	PrimaryExpression	3		1013332	1					
ANR	1013400	Argument	& jobnum_str		1013332	1					
ANR	1013401	UnaryOperationExpression	& jobnum_str		1013332	0					
ANR	1013402	UnaryOperator	&		1013332	0					
ANR	1013403	Identifier	jobnum_str		1013332	1					
ANR	1013404	TryStatement	try		1013332	6					
ANR	1013405	CompoundStatement		34:2:1190:1206	1013332	0					
ANR	1013406	IfStatement	if ( jobnum_str == NULL )		1013332	0					
ANR	1013407	Condition	jobnum_str == NULL		1013332	0					
ANR	1013408	EqualityExpression	jobnum_str == NULL		1013332	0		==			
ANR	1013409	Identifier	jobnum_str		1013332	0					
ANR	1013410	Identifier	NULL		1013332	1					
ANR	1013411	CompoundStatement		16:26:512:512	1013332	1					
ANR	1013412	ThrowStatement	"throw runtime_error ( ""suspend of all jobs not supported"" ) ;"		1013332	0					
ANR	1013413	CallExpression	"runtime_error ( ""suspend of all jobs not supported"" )"		1013332	0					
ANR	1013414	Callee	runtime_error		1013332	0					
ANR	1013415	Identifier	runtime_error		1013332	0					
ANR	1013416	ArgumentList	"""suspend of all jobs not supported"""		1013332	1					
ANR	1013417	Argument	"""suspend of all jobs not supported"""		1013332	0					
ANR	1013418	PrimaryExpression	"""suspend of all jobs not supported"""		1013332	0					
ANR	1013419	IdentifierDeclStatement	vector < JobIdWrapper > jv ;		1013332	1					
ANR	1013420	IdentifierDecl	jv		1013332	0					
ANR	1013421	IdentifierDeclType	vector < JobIdWrapper >		1013332	0					
ANR	1013422	Identifier	jv		1013332	1					
ANR	1013423	IdentifierDeclStatement	int jobnum = atoi ( jobnum_str ) ;		1013332	2					
ANR	1013424	IdentifierDecl	jobnum = atoi ( jobnum_str )		1013332	0					
ANR	1013425	IdentifierDeclType	int		1013332	0					
ANR	1013426	Identifier	jobnum		1013332	1					
ANR	1013427	AssignmentExpression	jobnum = atoi ( jobnum_str )		1013332	2		=			
ANR	1013428	Identifier	jobnum		1013332	0					
ANR	1013429	CallExpression	atoi ( jobnum_str )		1013332	1					
ANR	1013430	Callee	atoi		1013332	0					
ANR	1013431	Identifier	atoi		1013332	0					
ANR	1013432	ArgumentList	jobnum_str		1013332	1					
ANR	1013433	Argument	jobnum_str		1013332	0					
ANR	1013434	Identifier	jobnum_str		1013332	0					
ANR	1013435	ForStatement	for ( int i = 0 ; i < jobnum ; i ++ )		1013332	3					
ANR	1013436	ForInit	int i = 0 ;		1013332	0					
ANR	1013437	IdentifierDeclStatement	int i = 0 ;		1013332	0					
ANR	1013438	IdentifierDecl	i = 0		1013332	0					
ANR	1013439	IdentifierDeclType	int		1013332	0					
ANR	1013440	Identifier	i		1013332	1					
ANR	1013441	AssignmentExpression	i = 0		1013332	2		=			
ANR	1013442	Identifier	i		1013332	0					
ANR	1013443	PrimaryExpression	0		1013332	1					
ANR	1013444	Condition	i < jobnum		1013332	1					
ANR	1013445	RelationalExpression	i < jobnum		1013332	0		<			
ANR	1013446	Identifier	i		1013332	0					
ANR	1013447	Identifier	jobnum		1013332	1					
ANR	1013448	PostIncDecOperationExpression	i ++		1013332	2					
ANR	1013449	Identifier	i		1013332	0					
ANR	1013450	IncDec	++		1013332	1					
ANR	1013451	CompoundStatement		21:36:677:677	1013332	3					
ANR	1013452	ExpressionStatement	"process_string_arg ( req -> input_line [ i + 4 ] , & jobid )"		1013332	0					
ANR	1013453	CallExpression	"process_string_arg ( req -> input_line [ i + 4 ] , & jobid )"		1013332	0					
ANR	1013454	Callee	process_string_arg		1013332	0					
ANR	1013455	Identifier	process_string_arg		1013332	0					
ANR	1013456	ArgumentList	req -> input_line [ i + 4 ]		1013332	1					
ANR	1013457	Argument	req -> input_line [ i + 4 ]		1013332	0					
ANR	1013458	ArrayIndexing	req -> input_line [ i + 4 ]		1013332	0					
ANR	1013459	PtrMemberAccess	req -> input_line		1013332	0					
ANR	1013460	Identifier	req		1013332	0					
ANR	1013461	Identifier	input_line		1013332	1					
ANR	1013462	AdditiveExpression	i + 4		1013332	1		+			
ANR	1013463	Identifier	i		1013332	0					
ANR	1013464	PrimaryExpression	4		1013332	1					
ANR	1013465	Argument	& jobid		1013332	1					
ANR	1013466	UnaryOperationExpression	& jobid		1013332	0					
ANR	1013467	UnaryOperator	&		1013332	0					
ANR	1013468	Identifier	jobid		1013332	1					
ANR	1013469	Statement	jv		1013332	1					
ANR	1013470	Statement	.		1013332	2					
ANR	1013471	Statement	push_back		1013332	3					
ANR	1013472	Statement	(		1013332	4					
ANR	1013473	Statement	JobIdWrapper		1013332	5					
ANR	1013474	Statement	(		1013332	6					
ANR	1013475	Statement	jobid		1013332	7					
ANR	1013476	Statement	","		1013332	8					
ANR	1013477	Statement	service		1013332	9					
ANR	1013478	Statement	","		1013332	10					
ANR	1013479	Statement	vector		1013332	11					
ANR	1013480	Statement	<		1013332	12					
ANR	1013481	Statement	JobPropertyWrapper		1013332	13					
ANR	1013482	Statement	>		1013332	14					
ANR	1013483	Statement	(		1013332	15					
ANR	1013484	Statement	)		1013332	16					
ANR	1013485	Statement	)		1013332	17					
ANR	1013486	Statement	)		1013332	18					
ANR	1013487	ExpressionStatement			1013332	19					
ANR	1013488	IdentifierDeclStatement	vector < string > sv ;		1013332	4					
ANR	1013489	IdentifierDecl	sv		1013332	0					
ANR	1013490	IdentifierDeclType	vector < string >		1013332	0					
ANR	1013491	Identifier	sv		1013332	1					
ANR	1013492	IdentifierDeclStatement	"JobFilterWrapper jfw ( jv , sv , - 1 , - 1 , """" , """" ) ;"		1013332	5					
ANR	1013493	IdentifierDecl	"jfw ( jv , sv , - 1 , - 1 , """" , """" )"		1013332	0					
ANR	1013494	IdentifierDeclType	JobFilterWrapper		1013332	0					
ANR	1013495	Identifier	jfw		1013332	1					
ANR	1013496	Expression	"jv , sv , - 1 , - 1 , """" , """""		1013332	2					
ANR	1013497	Identifier	jv		1013332	0					
ANR	1013498	Expression	"sv , - 1 , - 1 , """" , """""		1013332	1					
ANR	1013499	Identifier	sv		1013332	0					
ANR	1013500	Expression	"- 1 , - 1 , """" , """""		1013332	1					
ANR	1013501	UnaryOperationExpression	- 1		1013332	0					
ANR	1013502	UnaryOperator	-		1013332	0					
ANR	1013503	PrimaryExpression	1		1013332	1					
ANR	1013504	Expression	"- 1 , """" , """""		1013332	1					
ANR	1013505	UnaryOperationExpression	- 1		1013332	0					
ANR	1013506	UnaryOperator	-		1013332	0					
ANR	1013507	PrimaryExpression	1		1013332	1					
ANR	1013508	Expression	""""" , """""		1013332	1					
ANR	1013509	PrimaryExpression	""""""		1013332	0					
ANR	1013510	PrimaryExpression	""""""		1013332	1					
ANR	1013511	IdentifierDeclStatement	ResultWrapper rw ;		1013332	6					
ANR	1013512	IdentifierDecl	rw		1013332	0					
ANR	1013513	IdentifierDeclType	ResultWrapper		1013332	0					
ANR	1013514	Identifier	rw		1013332	1					
ANR	1013515	ExpressionStatement	"cp = CreamProxyFactory :: make_CreamProxySuspend ( & jfw , & rw , DEFAULT_TIMEOUT )"		1013332	7					
ANR	1013516	AssignmentExpression	"cp = CreamProxyFactory :: make_CreamProxySuspend ( & jfw , & rw , DEFAULT_TIMEOUT )"		1013332	0		=			
ANR	1013517	Identifier	cp		1013332	0					
ANR	1013518	CallExpression	"CreamProxyFactory :: make_CreamProxySuspend ( & jfw , & rw , DEFAULT_TIMEOUT )"		1013332	1					
ANR	1013519	Callee	CreamProxyFactory :: make_CreamProxySuspend		1013332	0					
ANR	1013520	Identifier	CreamProxyFactory :: make_CreamProxySuspend		1013332	0					
ANR	1013521	ArgumentList	& jfw		1013332	1					
ANR	1013522	Argument	& jfw		1013332	0					
ANR	1013523	UnaryOperationExpression	& jfw		1013332	0					
ANR	1013524	UnaryOperator	&		1013332	0					
ANR	1013525	Identifier	jfw		1013332	1					
ANR	1013526	Argument	& rw		1013332	1					
ANR	1013527	UnaryOperationExpression	& rw		1013332	0					
ANR	1013528	UnaryOperator	&		1013332	0					
ANR	1013529	Identifier	rw		1013332	1					
ANR	1013530	Argument	DEFAULT_TIMEOUT		1013332	2					
ANR	1013531	Identifier	DEFAULT_TIMEOUT		1013332	0					
ANR	1013532	ExpressionStatement	check_for_factory_error ( cp )		1013332	8					
ANR	1013533	CallExpression	check_for_factory_error ( cp )		1013332	0					
ANR	1013534	Callee	check_for_factory_error		1013332	0					
ANR	1013535	Identifier	check_for_factory_error		1013332	0					
ANR	1013536	ArgumentList	cp		1013332	1					
ANR	1013537	Argument	cp		1013332	0					
ANR	1013538	Identifier	cp		1013332	0					
ANR	1013539	ExpressionStatement	cp -> setCredential ( req -> proxy . c_str ( ) )		1013332	9					
ANR	1013540	CallExpression	cp -> setCredential ( req -> proxy . c_str ( ) )		1013332	0					
ANR	1013541	Callee	cp -> setCredential		1013332	0					
ANR	1013542	PtrMemberAccess	cp -> setCredential		1013332	0					
ANR	1013543	Identifier	cp		1013332	0					
ANR	1013544	Identifier	setCredential		1013332	1					
ANR	1013545	ArgumentList	req -> proxy . c_str ( )		1013332	1					
ANR	1013546	Argument	req -> proxy . c_str ( )		1013332	0					
ANR	1013547	CallExpression	req -> proxy . c_str ( )		1013332	0					
ANR	1013548	Callee	req -> proxy . c_str		1013332	0					
ANR	1013549	MemberAccess	req -> proxy . c_str		1013332	0					
ANR	1013550	PtrMemberAccess	req -> proxy		1013332	0					
ANR	1013551	Identifier	req		1013332	0					
ANR	1013552	Identifier	proxy		1013332	1					
ANR	1013553	Identifier	c_str		1013332	1					
ANR	1013554	ArgumentList			1013332	1					
ANR	1013555	ExpressionStatement	cp -> execute ( service )		1013332	10					
ANR	1013556	CallExpression	cp -> execute ( service )		1013332	0					
ANR	1013557	Callee	cp -> execute		1013332	0					
ANR	1013558	PtrMemberAccess	cp -> execute		1013332	0					
ANR	1013559	Identifier	cp		1013332	0					
ANR	1013560	Identifier	execute		1013332	1					
ANR	1013561	ArgumentList	service		1013332	1					
ANR	1013562	Argument	service		1013332	0					
ANR	1013563	Identifier	service		1013332	0					
ANR	1013564	ExpressionStatement	check_result_wrapper ( rw )		1013332	11					
ANR	1013565	CallExpression	check_result_wrapper ( rw )		1013332	0					
ANR	1013566	Callee	check_result_wrapper		1013332	0					
ANR	1013567	Identifier	check_result_wrapper		1013332	0					
ANR	1013568	ArgumentList	rw		1013332	1					
ANR	1013569	Argument	rw		1013332	0					
ANR	1013570	Identifier	rw		1013332	0					
ANR	1013571	Statement	delete		1013332	12					
ANR	1013572	ExpressionStatement	cp		1013332	13					
ANR	1013573	Identifier	cp		1013332	0					
ANR	1013574	CatchList			1013332	1					
ANR	1013575	CatchStatement	catch ( std :: exception & ex )		1013332	0					
ANR	1013576	Identifier	ex		1013332	0					
ANR	1013577	CompoundStatement		46:2:1502:1538	1013332	1					
ANR	1013578	Statement	delete	1107:2:31198:31203	1013332	0	True				
ANR	1013579	ExpressionStatement	cp	1107:9:31205:31207	1013332	1	True				
ANR	1013580	Identifier	cp		1013332	0					
ANR	1013581	IdentifierDeclStatement	char * msg = escape_spaces ( ex . what ( ) ) ;	1108:2:31211:31247	1013332	2	True				
ANR	1013582	IdentifierDecl	* msg = escape_spaces ( ex . what ( ) )		1013332	0					
ANR	1013583	IdentifierDeclType	char *		1013332	0					
ANR	1013584	Identifier	msg		1013332	1					
ANR	1013585	AssignmentExpression	* msg = escape_spaces ( ex . what ( ) )		1013332	2		=			
ANR	1013586	Identifier	msg		1013332	0					
ANR	1013587	CallExpression	escape_spaces ( ex . what ( ) )		1013332	1					
ANR	1013588	Callee	escape_spaces		1013332	0					
ANR	1013589	Identifier	escape_spaces		1013332	0					
ANR	1013590	ArgumentList	ex . what ( )		1013332	1					
ANR	1013591	Argument	ex . what ( )		1013332	0					
ANR	1013592	CallExpression	ex . what ( )		1013332	0					
ANR	1013593	Callee	ex . what		1013332	0					
ANR	1013594	MemberAccess	ex . what		1013332	0					
ANR	1013595	Identifier	ex		1013332	0					
ANR	1013596	Identifier	what		1013332	1					
ANR	1013597	ArgumentList			1013332	1					
ANR	1013598	ExpressionStatement	"result_line = ( string ) reqid + "" CREAM_Job_Suspend\\\\ Error:\\\\ "" + msg"	1109:2:31251:31319	1013332	3	True				
ANR	1013599	AssignmentExpression	"result_line = ( string ) reqid + "" CREAM_Job_Suspend\\\\ Error:\\\\ "" + msg"		1013332	0		=			
ANR	1013600	Identifier	result_line		1013332	0					
ANR	1013601	AdditiveExpression	"( string ) reqid + "" CREAM_Job_Suspend\\\\ Error:\\\\ "" + msg"		1013332	1		+			
ANR	1013602	CastExpression	( string ) reqid		1013332	0					
ANR	1013603	CastTarget	string		1013332	0					
ANR	1013604	Identifier	reqid		1013332	1					
ANR	1013605	AdditiveExpression	""" CREAM_Job_Suspend\\\\ Error:\\\\ "" + msg"		1013332	1		+			
ANR	1013606	PrimaryExpression	""" CREAM_Job_Suspend\\\\ Error:\\\\ """		1013332	0					
ANR	1013607	Identifier	msg		1013332	1					
ANR	1013608	ExpressionStatement	enqueue_result ( result_line )	1110:2:31323:31350	1013332	4	True				
ANR	1013609	CallExpression	enqueue_result ( result_line )		1013332	0					
ANR	1013610	Callee	enqueue_result		1013332	0					
ANR	1013611	Identifier	enqueue_result		1013332	0					
ANR	1013612	ArgumentList	result_line		1013332	1					
ANR	1013613	Argument	result_line		1013332	0					
ANR	1013614	Identifier	result_line		1013332	0					
ANR	1013615	ExpressionStatement	free ( msg )	1111:2:31354:31363	1013332	5	True				
ANR	1013616	CallExpression	free ( msg )		1013332	0					
ANR	1013617	Callee	free		1013332	0					
ANR	1013618	Identifier	free		1013332	0					
ANR	1013619	ArgumentList	msg		1013332	1					
ANR	1013620	Argument	msg		1013332	0					
ANR	1013621	Identifier	msg		1013332	0					
ANR	1013622	ReturnStatement	return 1 ;	1113:2:31370:31378	1013332	6	True				
ANR	1013623	PrimaryExpression	1		1013332	0					
ANR	1013624	ExpressionStatement	"result_line = ( string ) reqid + "" NULL"""	1116:1:31386:31423	1013332	7	True				
ANR	1013625	AssignmentExpression	"result_line = ( string ) reqid + "" NULL"""		1013332	0		=			
ANR	1013626	Identifier	result_line		1013332	0					
ANR	1013627	AdditiveExpression	"( string ) reqid + "" NULL"""		1013332	1		+			
ANR	1013628	CastExpression	( string ) reqid		1013332	0					
ANR	1013629	CastTarget	string		1013332	0					
ANR	1013630	Identifier	reqid		1013332	1					
ANR	1013631	PrimaryExpression	""" NULL"""		1013332	1					
ANR	1013632	ExpressionStatement	enqueue_result ( result_line )	1117:1:31426:31453	1013332	8	True				
ANR	1013633	CallExpression	enqueue_result ( result_line )		1013332	0					
ANR	1013634	Callee	enqueue_result		1013332	0					
ANR	1013635	Identifier	enqueue_result		1013332	0					
ANR	1013636	ArgumentList	result_line		1013332	1					
ANR	1013637	Argument	result_line		1013332	0					
ANR	1013638	Identifier	result_line		1013332	0					
ANR	1013639	ReturnStatement	return 0 ;	1119:1:31458:31466	1013332	9	True				
ANR	1013640	PrimaryExpression	0		1013332	0					
ANR	1013641	ReturnType	int		1013332	1					
ANR	1013642	Identifier	thread_cream_job_suspend		1013332	2					
ANR	1013643	ParameterList	Request * req		1013332	3					
ANR	1013644	Parameter	Request * req	1062:30:29693:29704	1013332	0	True				
ANR	1013645	ParameterType	Request *		1013332	0					
ANR	1013646	Identifier	req		1013332	1					
ANR	1013647	CFGEntryNode	ENTRY		1013332		True				
ANR	1013648	CFGExitNode	EXIT		1013332		True				
ANR	1013649	CFGErrorNode	ERROR		1013332		True				
ANR	1013650	Symbol	& reqid		1013332						
ANR	1013651	Symbol	NULL		1013332						
ANR	1013652	Symbol	* req		1013332						
ANR	1013653	Symbol	& service		1013332						
ANR	1013654	Symbol	& jobnum_str		1013332						
ANR	1013655	Symbol	cp		1013332						
ANR	1013656	Symbol	reqid		1013332						
ANR	1013657	Symbol	result_line		1013332						
ANR	1013658	Symbol	jobid		1013332						
ANR	1013659	Symbol	jobnum_str		1013332						
ANR	1013660	Symbol	* * req		1013332						
ANR	1013661	Symbol	service		1013332						
ANR	1013662	Symbol	req -> input_line		1013332						
ANR	1013663	Symbol	* req -> input_line		1013332						
ANR	1013664	Symbol	req		1013332						
ANR	1013665	Function	handle_cream_job_resume	1127:0:31679:32067							
ANR	1013666	FunctionDef	handle_cream_job_resume (char * * input_line)		1013665	0					
ANR	1013667	CompoundStatement		1128:0:31728:32067	1013665	0					
ANR	1013668	IdentifierDeclStatement	int arg_cnt = count_args ( input_line ) ;	1129:1:31731:31769	1013665	0	True				
ANR	1013669	IdentifierDecl	arg_cnt = count_args ( input_line )		1013665	0					
ANR	1013670	IdentifierDeclType	int		1013665	0					
ANR	1013671	Identifier	arg_cnt		1013665	1					
ANR	1013672	AssignmentExpression	arg_cnt = count_args ( input_line )		1013665	2		=			
ANR	1013673	Identifier	arg_cnt		1013665	0					
ANR	1013674	CallExpression	count_args ( input_line )		1013665	1					
ANR	1013675	Callee	count_args		1013665	0					
ANR	1013676	Identifier	count_args		1013665	0					
ANR	1013677	ArgumentList	input_line		1013665	1					
ANR	1013678	Argument	input_line		1013665	0					
ANR	1013679	Identifier	input_line		1013665	0					
ANR	1013680	IdentifierDeclStatement	char * jobnum = NULL ;	1130:1:31772:31791	1013665	1	True				
ANR	1013681	IdentifierDecl	* jobnum = NULL		1013665	0					
ANR	1013682	IdentifierDeclType	char *		1013665	0					
ANR	1013683	Identifier	jobnum		1013665	1					
ANR	1013684	AssignmentExpression	* jobnum = NULL		1013665	2		=			
ANR	1013685	Identifier	NULL		1013665	0					
ANR	1013686	Identifier	NULL		1013665	1					
ANR	1013687	IfStatement	if ( arg_cnt < 4 )		1013665	2					
ANR	1013688	Condition	arg_cnt < 4	1132:6:31800:31810	1013665	0	True				
ANR	1013689	RelationalExpression	arg_cnt < 4		1013665	0		<			
ANR	1013690	Identifier	arg_cnt		1013665	0					
ANR	1013691	PrimaryExpression	4		1013665	1					
ANR	1013692	CompoundStatement		5:20:85:85	1013665	1					
ANR	1013693	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	1133:2:31818:31839	1013665	0	True				
ANR	1013694	CallExpression	HANDLE_SYNTAX_ERROR ( )		1013665	0					
ANR	1013695	Callee	HANDLE_SYNTAX_ERROR		1013665	0					
ANR	1013696	Identifier	HANDLE_SYNTAX_ERROR		1013665	0					
ANR	1013697	ArgumentList			1013665	1					
ANR	1013698	ExpressionStatement	"process_string_arg ( input_line [ 3 ] , & jobnum )"	1136:1:31846:31890	1013665	3	True				
ANR	1013699	CallExpression	"process_string_arg ( input_line [ 3 ] , & jobnum )"		1013665	0					
ANR	1013700	Callee	process_string_arg		1013665	0					
ANR	1013701	Identifier	process_string_arg		1013665	0					
ANR	1013702	ArgumentList	input_line [ 3 ]		1013665	1					
ANR	1013703	Argument	input_line [ 3 ]		1013665	0					
ANR	1013704	ArrayIndexing	input_line [ 3 ]		1013665	0					
ANR	1013705	Identifier	input_line		1013665	0					
ANR	1013706	PrimaryExpression	3		1013665	1					
ANR	1013707	Argument	& jobnum		1013665	1					
ANR	1013708	UnaryOperationExpression	& jobnum		1013665	0					
ANR	1013709	UnaryOperator	&		1013665	0					
ANR	1013710	Identifier	jobnum		1013665	1					
ANR	1013711	IfStatement	if ( jobnum && ( atoi ( jobnum ) + 4 != arg_cnt ) )		1013665	4					
ANR	1013712	Condition	jobnum && ( atoi ( jobnum ) + 4 != arg_cnt )	1137:6:31898:31940	1013665	0	True				
ANR	1013713	AndExpression	jobnum && ( atoi ( jobnum ) + 4 != arg_cnt )		1013665	0		&&			
ANR	1013714	Identifier	jobnum		1013665	0					
ANR	1013715	EqualityExpression	atoi ( jobnum ) + 4 != arg_cnt		1013665	1		!=			
ANR	1013716	AdditiveExpression	atoi ( jobnum ) + 4		1013665	0		+			
ANR	1013717	CallExpression	atoi ( jobnum )		1013665	0					
ANR	1013718	Callee	atoi		1013665	0					
ANR	1013719	Identifier	atoi		1013665	0					
ANR	1013720	ArgumentList	jobnum		1013665	1					
ANR	1013721	Argument	jobnum		1013665	0					
ANR	1013722	Identifier	jobnum		1013665	0					
ANR	1013723	PrimaryExpression	4		1013665	1					
ANR	1013724	Identifier	arg_cnt		1013665	1					
ANR	1013725	CompoundStatement		10:52:215:215	1013665	1					
ANR	1013726	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	1138:2:31948:31969	1013665	0	True				
ANR	1013727	CallExpression	HANDLE_SYNTAX_ERROR ( )		1013665	0					
ANR	1013728	Callee	HANDLE_SYNTAX_ERROR		1013665	0					
ANR	1013729	Identifier	HANDLE_SYNTAX_ERROR		1013665	0					
ANR	1013730	ArgumentList			1013665	1					
ANR	1013731	ExpressionStatement	"enqueue_request ( input_line , thread_cream_job_resume )"	1141:1:31976:32030	1013665	5	True				
ANR	1013732	CallExpression	"enqueue_request ( input_line , thread_cream_job_resume )"		1013665	0					
ANR	1013733	Callee	enqueue_request		1013665	0					
ANR	1013734	Identifier	enqueue_request		1013665	0					
ANR	1013735	ArgumentList	input_line		1013665	1					
ANR	1013736	Argument	input_line		1013665	0					
ANR	1013737	Identifier	input_line		1013665	0					
ANR	1013738	Argument	thread_cream_job_resume		1013665	1					
ANR	1013739	Identifier	thread_cream_job_resume		1013665	0					
ANR	1013740	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	1143:1:32034:32052	1013665	6	True				
ANR	1013741	CallExpression	"gahp_printf ( ""S\\n"" )"		1013665	0					
ANR	1013742	Callee	gahp_printf		1013665	0					
ANR	1013743	Identifier	gahp_printf		1013665	0					
ANR	1013744	ArgumentList	"""S\\n"""		1013665	1					
ANR	1013745	Argument	"""S\\n"""		1013665	0					
ANR	1013746	PrimaryExpression	"""S\\n"""		1013665	0					
ANR	1013747	ReturnStatement	return 0 ;	1145:1:32057:32065	1013665	7	True				
ANR	1013748	PrimaryExpression	0		1013665	0					
ANR	1013749	ReturnType	int		1013665	1					
ANR	1013750	Identifier	handle_cream_job_resume		1013665	2					
ANR	1013751	ParameterList	char * * input_line		1013665	3					
ANR	1013752	Parameter	char * * input_line	1127:29:31708:31724	1013665	0	True				
ANR	1013753	ParameterType	char * *		1013665	0					
ANR	1013754	Identifier	input_line		1013665	1					
ANR	1013755	CFGEntryNode	ENTRY		1013665		True				
ANR	1013756	CFGExitNode	EXIT		1013665		True				
ANR	1013757	Symbol	atoi		1013665						
ANR	1013758	Symbol	* input_line		1013665						
ANR	1013759	Symbol	NULL		1013665						
ANR	1013760	Symbol	& jobnum		1013665						
ANR	1013761	Symbol	jobnum		1013665						
ANR	1013762	Symbol	thread_cream_job_resume		1013665						
ANR	1013763	Symbol	count_args		1013665						
ANR	1013764	Symbol	input_line		1013665						
ANR	1013765	Symbol	arg_cnt		1013665						
ANR	1013766	Function	thread_cream_job_resume	1148:0:32070:33869							
ANR	1013767	FunctionDef	thread_cream_job_resume (Request * req)		1013766	0					
ANR	1013768	CompoundStatement		1149:0:32114:33869	1013766	0					
ANR	1013769	IdentifierDeclStatement	"char * reqid , * service , * jobnum_str , * jobid ;"	1155:1:32338:32380	1013766	0	True				
ANR	1013770	IdentifierDecl	* reqid		1013766	0					
ANR	1013771	IdentifierDeclType	char *		1013766	0					
ANR	1013772	Identifier	reqid		1013766	1					
ANR	1013773	IdentifierDecl	* service		1013766	1					
ANR	1013774	IdentifierDeclType	char *		1013766	0					
ANR	1013775	Identifier	service		1013766	1					
ANR	1013776	IdentifierDecl	* jobnum_str		1013766	2					
ANR	1013777	IdentifierDeclType	char *		1013766	0					
ANR	1013778	Identifier	jobnum_str		1013766	1					
ANR	1013779	IdentifierDecl	* jobid		1013766	3					
ANR	1013780	IdentifierDeclType	char *		1013766	0					
ANR	1013781	Identifier	jobid		1013766	1					
ANR	1013782	IdentifierDeclStatement	string result_line ;	1156:1:32383:32401	1013766	1	True				
ANR	1013783	IdentifierDecl	result_line		1013766	0					
ANR	1013784	IdentifierDeclType	string		1013766	0					
ANR	1013785	Identifier	result_line		1013766	1					
ANR	1013786	IdentifierDeclStatement	AbsCreamProxy * cp = NULL ;	1157:1:32404:32428	1013766	2	True				
ANR	1013787	IdentifierDecl	* cp = NULL		1013766	0					
ANR	1013788	IdentifierDeclType	AbsCreamProxy *		1013766	0					
ANR	1013789	Identifier	cp		1013766	1					
ANR	1013790	AssignmentExpression	* cp = NULL		1013766	2		=			
ANR	1013791	Identifier	NULL		1013766	0					
ANR	1013792	Identifier	NULL		1013766	1					
ANR	1013793	ExpressionStatement	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"	1159:1:32433:32481	1013766	3	True				
ANR	1013794	CallExpression	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"		1013766	0					
ANR	1013795	Callee	process_string_arg		1013766	0					
ANR	1013796	Identifier	process_string_arg		1013766	0					
ANR	1013797	ArgumentList	req -> input_line [ 1 ]		1013766	1					
ANR	1013798	Argument	req -> input_line [ 1 ]		1013766	0					
ANR	1013799	ArrayIndexing	req -> input_line [ 1 ]		1013766	0					
ANR	1013800	PtrMemberAccess	req -> input_line		1013766	0					
ANR	1013801	Identifier	req		1013766	0					
ANR	1013802	Identifier	input_line		1013766	1					
ANR	1013803	PrimaryExpression	1		1013766	1					
ANR	1013804	Argument	& reqid		1013766	1					
ANR	1013805	UnaryOperationExpression	& reqid		1013766	0					
ANR	1013806	UnaryOperator	&		1013766	0					
ANR	1013807	Identifier	reqid		1013766	1					
ANR	1013808	ExpressionStatement	"process_string_arg ( req -> input_line [ 2 ] , & service )"	1160:1:32484:32534	1013766	4	True				
ANR	1013809	CallExpression	"process_string_arg ( req -> input_line [ 2 ] , & service )"		1013766	0					
ANR	1013810	Callee	process_string_arg		1013766	0					
ANR	1013811	Identifier	process_string_arg		1013766	0					
ANR	1013812	ArgumentList	req -> input_line [ 2 ]		1013766	1					
ANR	1013813	Argument	req -> input_line [ 2 ]		1013766	0					
ANR	1013814	ArrayIndexing	req -> input_line [ 2 ]		1013766	0					
ANR	1013815	PtrMemberAccess	req -> input_line		1013766	0					
ANR	1013816	Identifier	req		1013766	0					
ANR	1013817	Identifier	input_line		1013766	1					
ANR	1013818	PrimaryExpression	2		1013766	1					
ANR	1013819	Argument	& service		1013766	1					
ANR	1013820	UnaryOperationExpression	& service		1013766	0					
ANR	1013821	UnaryOperator	&		1013766	0					
ANR	1013822	Identifier	service		1013766	1					
ANR	1013823	ExpressionStatement	"process_string_arg ( req -> input_line [ 3 ] , & jobnum_str )"	1161:1:32537:32590	1013766	5	True				
ANR	1013824	CallExpression	"process_string_arg ( req -> input_line [ 3 ] , & jobnum_str )"		1013766	0					
ANR	1013825	Callee	process_string_arg		1013766	0					
ANR	1013826	Identifier	process_string_arg		1013766	0					
ANR	1013827	ArgumentList	req -> input_line [ 3 ]		1013766	1					
ANR	1013828	Argument	req -> input_line [ 3 ]		1013766	0					
ANR	1013829	ArrayIndexing	req -> input_line [ 3 ]		1013766	0					
ANR	1013830	PtrMemberAccess	req -> input_line		1013766	0					
ANR	1013831	Identifier	req		1013766	0					
ANR	1013832	Identifier	input_line		1013766	1					
ANR	1013833	PrimaryExpression	3		1013766	1					
ANR	1013834	Argument	& jobnum_str		1013766	1					
ANR	1013835	UnaryOperationExpression	& jobnum_str		1013766	0					
ANR	1013836	UnaryOperator	&		1013766	0					
ANR	1013837	Identifier	jobnum_str		1013766	1					
ANR	1013838	TryStatement	try		1013766	6					
ANR	1013839	CompoundStatement		34:2:1189:1205	1013766	0					
ANR	1013840	IfStatement	if ( jobnum_str == NULL )		1013766	0					
ANR	1013841	Condition	jobnum_str == NULL		1013766	0					
ANR	1013842	EqualityExpression	jobnum_str == NULL		1013766	0		==			
ANR	1013843	Identifier	jobnum_str		1013766	0					
ANR	1013844	Identifier	NULL		1013766	1					
ANR	1013845	CompoundStatement		16:26:512:512	1013766	1					
ANR	1013846	ThrowStatement	"throw runtime_error ( ""resume of all jobs not supported"" ) ;"		1013766	0					
ANR	1013847	CallExpression	"runtime_error ( ""resume of all jobs not supported"" )"		1013766	0					
ANR	1013848	Callee	runtime_error		1013766	0					
ANR	1013849	Identifier	runtime_error		1013766	0					
ANR	1013850	ArgumentList	"""resume of all jobs not supported"""		1013766	1					
ANR	1013851	Argument	"""resume of all jobs not supported"""		1013766	0					
ANR	1013852	PrimaryExpression	"""resume of all jobs not supported"""		1013766	0					
ANR	1013853	IdentifierDeclStatement	vector < JobIdWrapper > jv ;		1013766	1					
ANR	1013854	IdentifierDecl	jv		1013766	0					
ANR	1013855	IdentifierDeclType	vector < JobIdWrapper >		1013766	0					
ANR	1013856	Identifier	jv		1013766	1					
ANR	1013857	IdentifierDeclStatement	int jobnum = atoi ( jobnum_str ) ;		1013766	2					
ANR	1013858	IdentifierDecl	jobnum = atoi ( jobnum_str )		1013766	0					
ANR	1013859	IdentifierDeclType	int		1013766	0					
ANR	1013860	Identifier	jobnum		1013766	1					
ANR	1013861	AssignmentExpression	jobnum = atoi ( jobnum_str )		1013766	2		=			
ANR	1013862	Identifier	jobnum		1013766	0					
ANR	1013863	CallExpression	atoi ( jobnum_str )		1013766	1					
ANR	1013864	Callee	atoi		1013766	0					
ANR	1013865	Identifier	atoi		1013766	0					
ANR	1013866	ArgumentList	jobnum_str		1013766	1					
ANR	1013867	Argument	jobnum_str		1013766	0					
ANR	1013868	Identifier	jobnum_str		1013766	0					
ANR	1013869	ForStatement	for ( int i = 0 ; i < jobnum ; i ++ )		1013766	3					
ANR	1013870	ForInit	int i = 0 ;		1013766	0					
ANR	1013871	IdentifierDeclStatement	int i = 0 ;		1013766	0					
ANR	1013872	IdentifierDecl	i = 0		1013766	0					
ANR	1013873	IdentifierDeclType	int		1013766	0					
ANR	1013874	Identifier	i		1013766	1					
ANR	1013875	AssignmentExpression	i = 0		1013766	2		=			
ANR	1013876	Identifier	i		1013766	0					
ANR	1013877	PrimaryExpression	0		1013766	1					
ANR	1013878	Condition	i < jobnum		1013766	1					
ANR	1013879	RelationalExpression	i < jobnum		1013766	0		<			
ANR	1013880	Identifier	i		1013766	0					
ANR	1013881	Identifier	jobnum		1013766	1					
ANR	1013882	PostIncDecOperationExpression	i ++		1013766	2					
ANR	1013883	Identifier	i		1013766	0					
ANR	1013884	IncDec	++		1013766	1					
ANR	1013885	CompoundStatement		21:36:676:676	1013766	3					
ANR	1013886	ExpressionStatement	"process_string_arg ( req -> input_line [ i + 4 ] , & jobid )"		1013766	0					
ANR	1013887	CallExpression	"process_string_arg ( req -> input_line [ i + 4 ] , & jobid )"		1013766	0					
ANR	1013888	Callee	process_string_arg		1013766	0					
ANR	1013889	Identifier	process_string_arg		1013766	0					
ANR	1013890	ArgumentList	req -> input_line [ i + 4 ]		1013766	1					
ANR	1013891	Argument	req -> input_line [ i + 4 ]		1013766	0					
ANR	1013892	ArrayIndexing	req -> input_line [ i + 4 ]		1013766	0					
ANR	1013893	PtrMemberAccess	req -> input_line		1013766	0					
ANR	1013894	Identifier	req		1013766	0					
ANR	1013895	Identifier	input_line		1013766	1					
ANR	1013896	AdditiveExpression	i + 4		1013766	1		+			
ANR	1013897	Identifier	i		1013766	0					
ANR	1013898	PrimaryExpression	4		1013766	1					
ANR	1013899	Argument	& jobid		1013766	1					
ANR	1013900	UnaryOperationExpression	& jobid		1013766	0					
ANR	1013901	UnaryOperator	&		1013766	0					
ANR	1013902	Identifier	jobid		1013766	1					
ANR	1013903	Statement	jv		1013766	1					
ANR	1013904	Statement	.		1013766	2					
ANR	1013905	Statement	push_back		1013766	3					
ANR	1013906	Statement	(		1013766	4					
ANR	1013907	Statement	JobIdWrapper		1013766	5					
ANR	1013908	Statement	(		1013766	6					
ANR	1013909	Statement	jobid		1013766	7					
ANR	1013910	Statement	","		1013766	8					
ANR	1013911	Statement	service		1013766	9					
ANR	1013912	Statement	","		1013766	10					
ANR	1013913	Statement	vector		1013766	11					
ANR	1013914	Statement	<		1013766	12					
ANR	1013915	Statement	JobPropertyWrapper		1013766	13					
ANR	1013916	Statement	>		1013766	14					
ANR	1013917	Statement	(		1013766	15					
ANR	1013918	Statement	)		1013766	16					
ANR	1013919	Statement	)		1013766	17					
ANR	1013920	Statement	)		1013766	18					
ANR	1013921	ExpressionStatement			1013766	19					
ANR	1013922	IdentifierDeclStatement	vector < string > sv ;		1013766	4					
ANR	1013923	IdentifierDecl	sv		1013766	0					
ANR	1013924	IdentifierDeclType	vector < string >		1013766	0					
ANR	1013925	Identifier	sv		1013766	1					
ANR	1013926	IdentifierDeclStatement	"JobFilterWrapper jfw ( jv , sv , - 1 , - 1 , """" , """" ) ;"		1013766	5					
ANR	1013927	IdentifierDecl	"jfw ( jv , sv , - 1 , - 1 , """" , """" )"		1013766	0					
ANR	1013928	IdentifierDeclType	JobFilterWrapper		1013766	0					
ANR	1013929	Identifier	jfw		1013766	1					
ANR	1013930	Expression	"jv , sv , - 1 , - 1 , """" , """""		1013766	2					
ANR	1013931	Identifier	jv		1013766	0					
ANR	1013932	Expression	"sv , - 1 , - 1 , """" , """""		1013766	1					
ANR	1013933	Identifier	sv		1013766	0					
ANR	1013934	Expression	"- 1 , - 1 , """" , """""		1013766	1					
ANR	1013935	UnaryOperationExpression	- 1		1013766	0					
ANR	1013936	UnaryOperator	-		1013766	0					
ANR	1013937	PrimaryExpression	1		1013766	1					
ANR	1013938	Expression	"- 1 , """" , """""		1013766	1					
ANR	1013939	UnaryOperationExpression	- 1		1013766	0					
ANR	1013940	UnaryOperator	-		1013766	0					
ANR	1013941	PrimaryExpression	1		1013766	1					
ANR	1013942	Expression	""""" , """""		1013766	1					
ANR	1013943	PrimaryExpression	""""""		1013766	0					
ANR	1013944	PrimaryExpression	""""""		1013766	1					
ANR	1013945	IdentifierDeclStatement	ResultWrapper rw ;		1013766	6					
ANR	1013946	IdentifierDecl	rw		1013766	0					
ANR	1013947	IdentifierDeclType	ResultWrapper		1013766	0					
ANR	1013948	Identifier	rw		1013766	1					
ANR	1013949	ExpressionStatement	"cp = CreamProxyFactory :: make_CreamProxyResume ( & jfw , & rw , DEFAULT_TIMEOUT )"		1013766	7					
ANR	1013950	AssignmentExpression	"cp = CreamProxyFactory :: make_CreamProxyResume ( & jfw , & rw , DEFAULT_TIMEOUT )"		1013766	0		=			
ANR	1013951	Identifier	cp		1013766	0					
ANR	1013952	CallExpression	"CreamProxyFactory :: make_CreamProxyResume ( & jfw , & rw , DEFAULT_TIMEOUT )"		1013766	1					
ANR	1013953	Callee	CreamProxyFactory :: make_CreamProxyResume		1013766	0					
ANR	1013954	Identifier	CreamProxyFactory :: make_CreamProxyResume		1013766	0					
ANR	1013955	ArgumentList	& jfw		1013766	1					
ANR	1013956	Argument	& jfw		1013766	0					
ANR	1013957	UnaryOperationExpression	& jfw		1013766	0					
ANR	1013958	UnaryOperator	&		1013766	0					
ANR	1013959	Identifier	jfw		1013766	1					
ANR	1013960	Argument	& rw		1013766	1					
ANR	1013961	UnaryOperationExpression	& rw		1013766	0					
ANR	1013962	UnaryOperator	&		1013766	0					
ANR	1013963	Identifier	rw		1013766	1					
ANR	1013964	Argument	DEFAULT_TIMEOUT		1013766	2					
ANR	1013965	Identifier	DEFAULT_TIMEOUT		1013766	0					
ANR	1013966	ExpressionStatement	check_for_factory_error ( cp )		1013766	8					
ANR	1013967	CallExpression	check_for_factory_error ( cp )		1013766	0					
ANR	1013968	Callee	check_for_factory_error		1013766	0					
ANR	1013969	Identifier	check_for_factory_error		1013766	0					
ANR	1013970	ArgumentList	cp		1013766	1					
ANR	1013971	Argument	cp		1013766	0					
ANR	1013972	Identifier	cp		1013766	0					
ANR	1013973	ExpressionStatement	cp -> setCredential ( req -> proxy . c_str ( ) )		1013766	9					
ANR	1013974	CallExpression	cp -> setCredential ( req -> proxy . c_str ( ) )		1013766	0					
ANR	1013975	Callee	cp -> setCredential		1013766	0					
ANR	1013976	PtrMemberAccess	cp -> setCredential		1013766	0					
ANR	1013977	Identifier	cp		1013766	0					
ANR	1013978	Identifier	setCredential		1013766	1					
ANR	1013979	ArgumentList	req -> proxy . c_str ( )		1013766	1					
ANR	1013980	Argument	req -> proxy . c_str ( )		1013766	0					
ANR	1013981	CallExpression	req -> proxy . c_str ( )		1013766	0					
ANR	1013982	Callee	req -> proxy . c_str		1013766	0					
ANR	1013983	MemberAccess	req -> proxy . c_str		1013766	0					
ANR	1013984	PtrMemberAccess	req -> proxy		1013766	0					
ANR	1013985	Identifier	req		1013766	0					
ANR	1013986	Identifier	proxy		1013766	1					
ANR	1013987	Identifier	c_str		1013766	1					
ANR	1013988	ArgumentList			1013766	1					
ANR	1013989	ExpressionStatement	cp -> execute ( service )		1013766	10					
ANR	1013990	CallExpression	cp -> execute ( service )		1013766	0					
ANR	1013991	Callee	cp -> execute		1013766	0					
ANR	1013992	PtrMemberAccess	cp -> execute		1013766	0					
ANR	1013993	Identifier	cp		1013766	0					
ANR	1013994	Identifier	execute		1013766	1					
ANR	1013995	ArgumentList	service		1013766	1					
ANR	1013996	Argument	service		1013766	0					
ANR	1013997	Identifier	service		1013766	0					
ANR	1013998	ExpressionStatement	check_result_wrapper ( rw )		1013766	11					
ANR	1013999	CallExpression	check_result_wrapper ( rw )		1013766	0					
ANR	1014000	Callee	check_result_wrapper		1013766	0					
ANR	1014001	Identifier	check_result_wrapper		1013766	0					
ANR	1014002	ArgumentList	rw		1013766	1					
ANR	1014003	Argument	rw		1013766	0					
ANR	1014004	Identifier	rw		1013766	0					
ANR	1014005	Statement	delete		1013766	12					
ANR	1014006	ExpressionStatement	cp		1013766	13					
ANR	1014007	Identifier	cp		1013766	0					
ANR	1014008	CatchList			1013766	1					
ANR	1014009	CatchStatement	catch ( std :: exception & ex )		1013766	0					
ANR	1014010	Identifier	ex		1013766	0					
ANR	1014011	CompoundStatement		46:2:1498:1534	1013766	1					
ANR	1014012	Statement	delete	1193:2:33600:33605	1013766	0	True				
ANR	1014013	ExpressionStatement	cp	1193:9:33607:33609	1013766	1	True				
ANR	1014014	Identifier	cp		1013766	0					
ANR	1014015	IdentifierDeclStatement	char * msg = escape_spaces ( ex . what ( ) ) ;	1194:2:33613:33649	1013766	2	True				
ANR	1014016	IdentifierDecl	* msg = escape_spaces ( ex . what ( ) )		1013766	0					
ANR	1014017	IdentifierDeclType	char *		1013766	0					
ANR	1014018	Identifier	msg		1013766	1					
ANR	1014019	AssignmentExpression	* msg = escape_spaces ( ex . what ( ) )		1013766	2		=			
ANR	1014020	Identifier	msg		1013766	0					
ANR	1014021	CallExpression	escape_spaces ( ex . what ( ) )		1013766	1					
ANR	1014022	Callee	escape_spaces		1013766	0					
ANR	1014023	Identifier	escape_spaces		1013766	0					
ANR	1014024	ArgumentList	ex . what ( )		1013766	1					
ANR	1014025	Argument	ex . what ( )		1013766	0					
ANR	1014026	CallExpression	ex . what ( )		1013766	0					
ANR	1014027	Callee	ex . what		1013766	0					
ANR	1014028	MemberAccess	ex . what		1013766	0					
ANR	1014029	Identifier	ex		1013766	0					
ANR	1014030	Identifier	what		1013766	1					
ANR	1014031	ArgumentList			1013766	1					
ANR	1014032	ExpressionStatement	"result_line = ( string ) reqid + "" CREAM_Job_Resume\\\\ Error:\\\\ "" + msg"	1195:2:33653:33720	1013766	3	True				
ANR	1014033	AssignmentExpression	"result_line = ( string ) reqid + "" CREAM_Job_Resume\\\\ Error:\\\\ "" + msg"		1013766	0		=			
ANR	1014034	Identifier	result_line		1013766	0					
ANR	1014035	AdditiveExpression	"( string ) reqid + "" CREAM_Job_Resume\\\\ Error:\\\\ "" + msg"		1013766	1		+			
ANR	1014036	CastExpression	( string ) reqid		1013766	0					
ANR	1014037	CastTarget	string		1013766	0					
ANR	1014038	Identifier	reqid		1013766	1					
ANR	1014039	AdditiveExpression	""" CREAM_Job_Resume\\\\ Error:\\\\ "" + msg"		1013766	1		+			
ANR	1014040	PrimaryExpression	""" CREAM_Job_Resume\\\\ Error:\\\\ """		1013766	0					
ANR	1014041	Identifier	msg		1013766	1					
ANR	1014042	ExpressionStatement	enqueue_result ( result_line )	1196:2:33724:33751	1013766	4	True				
ANR	1014043	CallExpression	enqueue_result ( result_line )		1013766	0					
ANR	1014044	Callee	enqueue_result		1013766	0					
ANR	1014045	Identifier	enqueue_result		1013766	0					
ANR	1014046	ArgumentList	result_line		1013766	1					
ANR	1014047	Argument	result_line		1013766	0					
ANR	1014048	Identifier	result_line		1013766	0					
ANR	1014049	ExpressionStatement	free ( msg )	1197:2:33755:33764	1013766	5	True				
ANR	1014050	CallExpression	free ( msg )		1013766	0					
ANR	1014051	Callee	free		1013766	0					
ANR	1014052	Identifier	free		1013766	0					
ANR	1014053	ArgumentList	msg		1013766	1					
ANR	1014054	Argument	msg		1013766	0					
ANR	1014055	Identifier	msg		1013766	0					
ANR	1014056	ReturnStatement	return 1 ;	1199:2:33771:33779	1013766	6	True				
ANR	1014057	PrimaryExpression	1		1013766	0					
ANR	1014058	ExpressionStatement	"result_line = ( string ) reqid + "" NULL"""	1202:1:33787:33824	1013766	7	True				
ANR	1014059	AssignmentExpression	"result_line = ( string ) reqid + "" NULL"""		1013766	0		=			
ANR	1014060	Identifier	result_line		1013766	0					
ANR	1014061	AdditiveExpression	"( string ) reqid + "" NULL"""		1013766	1		+			
ANR	1014062	CastExpression	( string ) reqid		1013766	0					
ANR	1014063	CastTarget	string		1013766	0					
ANR	1014064	Identifier	reqid		1013766	1					
ANR	1014065	PrimaryExpression	""" NULL"""		1013766	1					
ANR	1014066	ExpressionStatement	enqueue_result ( result_line )	1203:1:33827:33854	1013766	8	True				
ANR	1014067	CallExpression	enqueue_result ( result_line )		1013766	0					
ANR	1014068	Callee	enqueue_result		1013766	0					
ANR	1014069	Identifier	enqueue_result		1013766	0					
ANR	1014070	ArgumentList	result_line		1013766	1					
ANR	1014071	Argument	result_line		1013766	0					
ANR	1014072	Identifier	result_line		1013766	0					
ANR	1014073	ReturnStatement	return 0 ;	1205:1:33859:33867	1013766	9	True				
ANR	1014074	PrimaryExpression	0		1013766	0					
ANR	1014075	ReturnType	int		1013766	1					
ANR	1014076	Identifier	thread_cream_job_resume		1013766	2					
ANR	1014077	ParameterList	Request * req		1013766	3					
ANR	1014078	Parameter	Request * req	1148:29:32099:32110	1013766	0	True				
ANR	1014079	ParameterType	Request *		1013766	0					
ANR	1014080	Identifier	req		1013766	1					
ANR	1014081	CFGEntryNode	ENTRY		1013766		True				
ANR	1014082	CFGExitNode	EXIT		1013766		True				
ANR	1014083	CFGErrorNode	ERROR		1013766		True				
ANR	1014084	Symbol	& reqid		1013766						
ANR	1014085	Symbol	NULL		1013766						
ANR	1014086	Symbol	* req		1013766						
ANR	1014087	Symbol	& service		1013766						
ANR	1014088	Symbol	& jobnum_str		1013766						
ANR	1014089	Symbol	cp		1013766						
ANR	1014090	Symbol	reqid		1013766						
ANR	1014091	Symbol	result_line		1013766						
ANR	1014092	Symbol	jobid		1013766						
ANR	1014093	Symbol	jobnum_str		1013766						
ANR	1014094	Symbol	* * req		1013766						
ANR	1014095	Symbol	service		1013766						
ANR	1014096	Symbol	req -> input_line		1013766						
ANR	1014097	Symbol	* req -> input_line		1013766						
ANR	1014098	Symbol	req		1013766						
ANR	1014099	Function	handle_cream_set_lease	1213:0:34051:34286							
ANR	1014100	FunctionDef	handle_cream_set_lease (char * * input_line)		1014099	0					
ANR	1014101	CompoundStatement		1214:0:34099:34286	1014099	0					
ANR	1014102	IdentifierDeclStatement	int arg_cnt = count_args ( input_line ) ;	1215:1:34102:34140	1014099	0	True				
ANR	1014103	IdentifierDecl	arg_cnt = count_args ( input_line )		1014099	0					
ANR	1014104	IdentifierDeclType	int		1014099	0					
ANR	1014105	Identifier	arg_cnt		1014099	1					
ANR	1014106	AssignmentExpression	arg_cnt = count_args ( input_line )		1014099	2		=			
ANR	1014107	Identifier	arg_cnt		1014099	0					
ANR	1014108	CallExpression	count_args ( input_line )		1014099	1					
ANR	1014109	Callee	count_args		1014099	0					
ANR	1014110	Identifier	count_args		1014099	0					
ANR	1014111	ArgumentList	input_line		1014099	1					
ANR	1014112	Argument	input_line		1014099	0					
ANR	1014113	Identifier	input_line		1014099	0					
ANR	1014114	IfStatement	if ( arg_cnt != 5 )		1014099	1					
ANR	1014115	Condition	arg_cnt != 5	1217:6:34149:34160	1014099	0	True				
ANR	1014116	EqualityExpression	arg_cnt != 5		1014099	0		!=			
ANR	1014117	Identifier	arg_cnt		1014099	0					
ANR	1014118	PrimaryExpression	5		1014099	1					
ANR	1014119	CompoundStatement		4:21:64:64	1014099	1					
ANR	1014120	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	1218:2:34168:34189	1014099	0	True				
ANR	1014121	CallExpression	HANDLE_SYNTAX_ERROR ( )		1014099	0					
ANR	1014122	Callee	HANDLE_SYNTAX_ERROR		1014099	0					
ANR	1014123	Identifier	HANDLE_SYNTAX_ERROR		1014099	0					
ANR	1014124	ArgumentList			1014099	1					
ANR	1014125	ExpressionStatement	"enqueue_request ( input_line , thread_cream_set_lease )"	1221:1:34196:34249	1014099	2	True				
ANR	1014126	CallExpression	"enqueue_request ( input_line , thread_cream_set_lease )"		1014099	0					
ANR	1014127	Callee	enqueue_request		1014099	0					
ANR	1014128	Identifier	enqueue_request		1014099	0					
ANR	1014129	ArgumentList	input_line		1014099	1					
ANR	1014130	Argument	input_line		1014099	0					
ANR	1014131	Identifier	input_line		1014099	0					
ANR	1014132	Argument	thread_cream_set_lease		1014099	1					
ANR	1014133	Identifier	thread_cream_set_lease		1014099	0					
ANR	1014134	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	1223:1:34253:34271	1014099	3	True				
ANR	1014135	CallExpression	"gahp_printf ( ""S\\n"" )"		1014099	0					
ANR	1014136	Callee	gahp_printf		1014099	0					
ANR	1014137	Identifier	gahp_printf		1014099	0					
ANR	1014138	ArgumentList	"""S\\n"""		1014099	1					
ANR	1014139	Argument	"""S\\n"""		1014099	0					
ANR	1014140	PrimaryExpression	"""S\\n"""		1014099	0					
ANR	1014141	ReturnStatement	return 0 ;	1225:1:34276:34284	1014099	4	True				
ANR	1014142	PrimaryExpression	0		1014099	0					
ANR	1014143	ReturnType	int		1014099	1					
ANR	1014144	Identifier	handle_cream_set_lease		1014099	2					
ANR	1014145	ParameterList	char * * input_line		1014099	3					
ANR	1014146	Parameter	char * * input_line	1213:28:34079:34095	1014099	0	True				
ANR	1014147	ParameterType	char * *		1014099	0					
ANR	1014148	Identifier	input_line		1014099	1					
ANR	1014149	CFGEntryNode	ENTRY		1014099		True				
ANR	1014150	CFGExitNode	EXIT		1014099		True				
ANR	1014151	Symbol	thread_cream_set_lease		1014099						
ANR	1014152	Symbol	count_args		1014099						
ANR	1014153	Symbol	input_line		1014099						
ANR	1014154	Symbol	arg_cnt		1014099						
ANR	1014155	Function	thread_cream_set_lease	1228:0:34289:35624							
ANR	1014156	FunctionDef	thread_cream_set_lease (Request * req)		1014155	0					
ANR	1014157	CompoundStatement		1229:0:34332:35624	1014155	0					
ANR	1014158	IdentifierDeclStatement	"char * reqid , * service , * lease_id ;"	1234:1:34494:34526	1014155	0	True				
ANR	1014159	IdentifierDecl	* reqid		1014155	0					
ANR	1014160	IdentifierDeclType	char *		1014155	0					
ANR	1014161	Identifier	reqid		1014155	1					
ANR	1014162	IdentifierDecl	* service		1014155	1					
ANR	1014163	IdentifierDeclType	char *		1014155	0					
ANR	1014164	Identifier	service		1014155	1					
ANR	1014165	IdentifierDecl	* lease_id		1014155	2					
ANR	1014166	IdentifierDeclType	char *		1014155	0					
ANR	1014167	Identifier	lease_id		1014155	1					
ANR	1014168	IdentifierDeclStatement	int lease_expiry ;	1235:1:34529:34545	1014155	1	True				
ANR	1014169	IdentifierDecl	lease_expiry		1014155	0					
ANR	1014170	IdentifierDeclType	int		1014155	0					
ANR	1014171	Identifier	lease_expiry		1014155	1					
ANR	1014172	IdentifierDeclStatement	string result_line ;	1236:1:34548:34566	1014155	2	True				
ANR	1014173	IdentifierDecl	result_line		1014155	0					
ANR	1014174	IdentifierDeclType	string		1014155	0					
ANR	1014175	Identifier	result_line		1014155	1					
ANR	1014176	IdentifierDeclStatement	AbsCreamProxy * cp = NULL ;	1237:1:34569:34593	1014155	3	True				
ANR	1014177	IdentifierDecl	* cp = NULL		1014155	0					
ANR	1014178	IdentifierDeclType	AbsCreamProxy *		1014155	0					
ANR	1014179	Identifier	cp		1014155	1					
ANR	1014180	AssignmentExpression	* cp = NULL		1014155	2		=			
ANR	1014181	Identifier	NULL		1014155	0					
ANR	1014182	Identifier	NULL		1014155	1					
ANR	1014183	ExpressionStatement	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"	1239:1:34598:34646	1014155	4	True				
ANR	1014184	CallExpression	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"		1014155	0					
ANR	1014185	Callee	process_string_arg		1014155	0					
ANR	1014186	Identifier	process_string_arg		1014155	0					
ANR	1014187	ArgumentList	req -> input_line [ 1 ]		1014155	1					
ANR	1014188	Argument	req -> input_line [ 1 ]		1014155	0					
ANR	1014189	ArrayIndexing	req -> input_line [ 1 ]		1014155	0					
ANR	1014190	PtrMemberAccess	req -> input_line		1014155	0					
ANR	1014191	Identifier	req		1014155	0					
ANR	1014192	Identifier	input_line		1014155	1					
ANR	1014193	PrimaryExpression	1		1014155	1					
ANR	1014194	Argument	& reqid		1014155	1					
ANR	1014195	UnaryOperationExpression	& reqid		1014155	0					
ANR	1014196	UnaryOperator	&		1014155	0					
ANR	1014197	Identifier	reqid		1014155	1					
ANR	1014198	ExpressionStatement	"process_string_arg ( req -> input_line [ 2 ] , & service )"	1240:1:34649:34699	1014155	5	True				
ANR	1014199	CallExpression	"process_string_arg ( req -> input_line [ 2 ] , & service )"		1014155	0					
ANR	1014200	Callee	process_string_arg		1014155	0					
ANR	1014201	Identifier	process_string_arg		1014155	0					
ANR	1014202	ArgumentList	req -> input_line [ 2 ]		1014155	1					
ANR	1014203	Argument	req -> input_line [ 2 ]		1014155	0					
ANR	1014204	ArrayIndexing	req -> input_line [ 2 ]		1014155	0					
ANR	1014205	PtrMemberAccess	req -> input_line		1014155	0					
ANR	1014206	Identifier	req		1014155	0					
ANR	1014207	Identifier	input_line		1014155	1					
ANR	1014208	PrimaryExpression	2		1014155	1					
ANR	1014209	Argument	& service		1014155	1					
ANR	1014210	UnaryOperationExpression	& service		1014155	0					
ANR	1014211	UnaryOperator	&		1014155	0					
ANR	1014212	Identifier	service		1014155	1					
ANR	1014213	ExpressionStatement	"process_string_arg ( req -> input_line [ 3 ] , & lease_id )"	1241:1:34702:34753	1014155	6	True				
ANR	1014214	CallExpression	"process_string_arg ( req -> input_line [ 3 ] , & lease_id )"		1014155	0					
ANR	1014215	Callee	process_string_arg		1014155	0					
ANR	1014216	Identifier	process_string_arg		1014155	0					
ANR	1014217	ArgumentList	req -> input_line [ 3 ]		1014155	1					
ANR	1014218	Argument	req -> input_line [ 3 ]		1014155	0					
ANR	1014219	ArrayIndexing	req -> input_line [ 3 ]		1014155	0					
ANR	1014220	PtrMemberAccess	req -> input_line		1014155	0					
ANR	1014221	Identifier	req		1014155	0					
ANR	1014222	Identifier	input_line		1014155	1					
ANR	1014223	PrimaryExpression	3		1014155	1					
ANR	1014224	Argument	& lease_id		1014155	1					
ANR	1014225	UnaryOperationExpression	& lease_id		1014155	0					
ANR	1014226	UnaryOperator	&		1014155	0					
ANR	1014227	Identifier	lease_id		1014155	1					
ANR	1014228	ExpressionStatement	"process_int_arg ( req -> input_line [ 4 ] , & lease_expiry )"	1242:1:34756:34808	1014155	7	True				
ANR	1014229	CallExpression	"process_int_arg ( req -> input_line [ 4 ] , & lease_expiry )"		1014155	0					
ANR	1014230	Callee	process_int_arg		1014155	0					
ANR	1014231	Identifier	process_int_arg		1014155	0					
ANR	1014232	ArgumentList	req -> input_line [ 4 ]		1014155	1					
ANR	1014233	Argument	req -> input_line [ 4 ]		1014155	0					
ANR	1014234	ArrayIndexing	req -> input_line [ 4 ]		1014155	0					
ANR	1014235	PtrMemberAccess	req -> input_line		1014155	0					
ANR	1014236	Identifier	req		1014155	0					
ANR	1014237	Identifier	input_line		1014155	1					
ANR	1014238	PrimaryExpression	4		1014155	1					
ANR	1014239	Argument	& lease_expiry		1014155	1					
ANR	1014240	UnaryOperationExpression	& lease_expiry		1014155	0					
ANR	1014241	UnaryOperator	&		1014155	0					
ANR	1014242	Identifier	lease_expiry		1014155	1					
ANR	1014243	TryStatement	try		1014155	8					
ANR	1014244	CompoundStatement		18:2:522:553	1014155	0					
ANR	1014245	IdentifierDeclStatement	"pair < string , time_t > cmd_input ;"		1014155	0					
ANR	1014246	IdentifierDecl	cmd_input		1014155	0					
ANR	1014247	IdentifierDeclType	"pair < string , time_t >"		1014155	0					
ANR	1014248	Identifier	cmd_input		1014155	1					
ANR	1014249	IdentifierDeclStatement	"pair < string , time_t > cmd_output ;"		1014155	1					
ANR	1014250	IdentifierDecl	cmd_output		1014155	0					
ANR	1014251	IdentifierDeclType	"pair < string , time_t >"		1014155	0					
ANR	1014252	Identifier	cmd_output		1014155	1					
ANR	1014253	IfStatement	if ( lease_id )		1014155	2					
ANR	1014254	Condition	lease_id		1014155	0					
ANR	1014255	Identifier	lease_id		1014155	0					
ANR	1014256	CompoundStatement		19:18:573:573	1014155	1					
ANR	1014257	ExpressionStatement	cmd_input . first = lease_id		1014155	0					
ANR	1014258	AssignmentExpression	cmd_input . first = lease_id		1014155	0		=			
ANR	1014259	MemberAccess	cmd_input . first		1014155	0					
ANR	1014260	Identifier	cmd_input		1014155	0					
ANR	1014261	Identifier	first		1014155	1					
ANR	1014262	Identifier	lease_id		1014155	1					
ANR	1014263	ElseStatement	else		1014155	0					
ANR	1014264	CompoundStatement		21:9:615:615	1014155	0					
ANR	1014265	ExpressionStatement	"cmd_input . first = """""		1014155	0					
ANR	1014266	AssignmentExpression	"cmd_input . first = """""		1014155	0		=			
ANR	1014267	MemberAccess	cmd_input . first		1014155	0					
ANR	1014268	Identifier	cmd_input		1014155	0					
ANR	1014269	Identifier	first		1014155	1					
ANR	1014270	PrimaryExpression	""""""		1014155	1					
ANR	1014271	ExpressionStatement	cmd_input . second = lease_expiry		1014155	3					
ANR	1014272	AssignmentExpression	cmd_input . second = lease_expiry		1014155	0		=			
ANR	1014273	MemberAccess	cmd_input . second		1014155	0					
ANR	1014274	Identifier	cmd_input		1014155	0					
ANR	1014275	Identifier	second		1014155	1					
ANR	1014276	Identifier	lease_expiry		1014155	1					
ANR	1014277	ExpressionStatement	"cp = CreamProxyFactory :: make_CreamProxyLease ( cmd_input , & cmd_output , DEFAULT_TIMEOUT )"		1014155	4					
ANR	1014278	AssignmentExpression	"cp = CreamProxyFactory :: make_CreamProxyLease ( cmd_input , & cmd_output , DEFAULT_TIMEOUT )"		1014155	0		=			
ANR	1014279	Identifier	cp		1014155	0					
ANR	1014280	CallExpression	"CreamProxyFactory :: make_CreamProxyLease ( cmd_input , & cmd_output , DEFAULT_TIMEOUT )"		1014155	1					
ANR	1014281	Callee	CreamProxyFactory :: make_CreamProxyLease		1014155	0					
ANR	1014282	Identifier	CreamProxyFactory :: make_CreamProxyLease		1014155	0					
ANR	1014283	ArgumentList	cmd_input		1014155	1					
ANR	1014284	Argument	cmd_input		1014155	0					
ANR	1014285	Identifier	cmd_input		1014155	0					
ANR	1014286	Argument	& cmd_output		1014155	1					
ANR	1014287	UnaryOperationExpression	& cmd_output		1014155	0					
ANR	1014288	UnaryOperator	&		1014155	0					
ANR	1014289	Identifier	cmd_output		1014155	1					
ANR	1014290	Argument	DEFAULT_TIMEOUT		1014155	2					
ANR	1014291	Identifier	DEFAULT_TIMEOUT		1014155	0					
ANR	1014292	ExpressionStatement	check_for_factory_error ( cp )		1014155	5					
ANR	1014293	CallExpression	check_for_factory_error ( cp )		1014155	0					
ANR	1014294	Callee	check_for_factory_error		1014155	0					
ANR	1014295	Identifier	check_for_factory_error		1014155	0					
ANR	1014296	ArgumentList	cp		1014155	1					
ANR	1014297	Argument	cp		1014155	0					
ANR	1014298	Identifier	cp		1014155	0					
ANR	1014299	ExpressionStatement	cp -> setCredential ( req -> proxy . c_str ( ) )		1014155	6					
ANR	1014300	CallExpression	cp -> setCredential ( req -> proxy . c_str ( ) )		1014155	0					
ANR	1014301	Callee	cp -> setCredential		1014155	0					
ANR	1014302	PtrMemberAccess	cp -> setCredential		1014155	0					
ANR	1014303	Identifier	cp		1014155	0					
ANR	1014304	Identifier	setCredential		1014155	1					
ANR	1014305	ArgumentList	req -> proxy . c_str ( )		1014155	1					
ANR	1014306	Argument	req -> proxy . c_str ( )		1014155	0					
ANR	1014307	CallExpression	req -> proxy . c_str ( )		1014155	0					
ANR	1014308	Callee	req -> proxy . c_str		1014155	0					
ANR	1014309	MemberAccess	req -> proxy . c_str		1014155	0					
ANR	1014310	PtrMemberAccess	req -> proxy		1014155	0					
ANR	1014311	Identifier	req		1014155	0					
ANR	1014312	Identifier	proxy		1014155	1					
ANR	1014313	Identifier	c_str		1014155	1					
ANR	1014314	ArgumentList			1014155	1					
ANR	1014315	ExpressionStatement	cp -> execute ( service )		1014155	7					
ANR	1014316	CallExpression	cp -> execute ( service )		1014155	0					
ANR	1014317	Callee	cp -> execute		1014155	0					
ANR	1014318	PtrMemberAccess	cp -> execute		1014155	0					
ANR	1014319	Identifier	cp		1014155	0					
ANR	1014320	Identifier	execute		1014155	1					
ANR	1014321	ArgumentList	service		1014155	1					
ANR	1014322	Argument	service		1014155	0					
ANR	1014323	Identifier	service		1014155	0					
ANR	1014324	ExpressionStatement	lease_expiry = cmd_output . second		1014155	8					
ANR	1014325	AssignmentExpression	lease_expiry = cmd_output . second		1014155	0		=			
ANR	1014326	Identifier	lease_expiry		1014155	0					
ANR	1014327	MemberAccess	cmd_output . second		1014155	1					
ANR	1014328	Identifier	cmd_output		1014155	0					
ANR	1014329	Identifier	second		1014155	1					
ANR	1014330	Statement	delete		1014155	9					
ANR	1014331	ExpressionStatement	cp		1014155	10					
ANR	1014332	Identifier	cp		1014155	0					
ANR	1014333	CatchList			1014155	1					
ANR	1014334	CatchStatement	catch ( std :: exception & ex )		1014155	0					
ANR	1014335	Identifier	ex		1014155	0					
ANR	1014336	CompoundStatement		35:2:976:1012	1014155	1					
ANR	1014337	Statement	delete	1262:2:35296:35301	1014155	0	True				
ANR	1014338	ExpressionStatement	cp	1262:9:35303:35305	1014155	1	True				
ANR	1014339	Identifier	cp		1014155	0					
ANR	1014340	IdentifierDeclStatement	char * msg = escape_spaces ( ex . what ( ) ) ;	1263:2:35309:35345	1014155	2	True				
ANR	1014341	IdentifierDecl	* msg = escape_spaces ( ex . what ( ) )		1014155	0					
ANR	1014342	IdentifierDeclType	char *		1014155	0					
ANR	1014343	Identifier	msg		1014155	1					
ANR	1014344	AssignmentExpression	* msg = escape_spaces ( ex . what ( ) )		1014155	2		=			
ANR	1014345	Identifier	msg		1014155	0					
ANR	1014346	CallExpression	escape_spaces ( ex . what ( ) )		1014155	1					
ANR	1014347	Callee	escape_spaces		1014155	0					
ANR	1014348	Identifier	escape_spaces		1014155	0					
ANR	1014349	ArgumentList	ex . what ( )		1014155	1					
ANR	1014350	Argument	ex . what ( )		1014155	0					
ANR	1014351	CallExpression	ex . what ( )		1014155	0					
ANR	1014352	Callee	ex . what		1014155	0					
ANR	1014353	MemberAccess	ex . what		1014155	0					
ANR	1014354	Identifier	ex		1014155	0					
ANR	1014355	Identifier	what		1014155	1					
ANR	1014356	ArgumentList			1014155	1					
ANR	1014357	ExpressionStatement	"result_line = ( string ) reqid + "" CREAM_Set_Lease\\\\ Error:\\\\ "" + msg"	1264:2:35349:35415	1014155	3	True				
ANR	1014358	AssignmentExpression	"result_line = ( string ) reqid + "" CREAM_Set_Lease\\\\ Error:\\\\ "" + msg"		1014155	0		=			
ANR	1014359	Identifier	result_line		1014155	0					
ANR	1014360	AdditiveExpression	"( string ) reqid + "" CREAM_Set_Lease\\\\ Error:\\\\ "" + msg"		1014155	1		+			
ANR	1014361	CastExpression	( string ) reqid		1014155	0					
ANR	1014362	CastTarget	string		1014155	0					
ANR	1014363	Identifier	reqid		1014155	1					
ANR	1014364	AdditiveExpression	""" CREAM_Set_Lease\\\\ Error:\\\\ "" + msg"		1014155	1		+			
ANR	1014365	PrimaryExpression	""" CREAM_Set_Lease\\\\ Error:\\\\ """		1014155	0					
ANR	1014366	Identifier	msg		1014155	1					
ANR	1014367	ExpressionStatement	enqueue_result ( result_line )	1265:2:35419:35446	1014155	4	True				
ANR	1014368	CallExpression	enqueue_result ( result_line )		1014155	0					
ANR	1014369	Callee	enqueue_result		1014155	0					
ANR	1014370	Identifier	enqueue_result		1014155	0					
ANR	1014371	ArgumentList	result_line		1014155	1					
ANR	1014372	Argument	result_line		1014155	0					
ANR	1014373	Identifier	result_line		1014155	0					
ANR	1014374	ExpressionStatement	free ( msg )	1266:2:35450:35459	1014155	5	True				
ANR	1014375	CallExpression	free ( msg )		1014155	0					
ANR	1014376	Callee	free		1014155	0					
ANR	1014377	Identifier	free		1014155	0					
ANR	1014378	ArgumentList	msg		1014155	1					
ANR	1014379	Argument	msg		1014155	0					
ANR	1014380	Identifier	msg		1014155	0					
ANR	1014381	ReturnStatement	return 1 ;	1268:2:35466:35474	1014155	6	True				
ANR	1014382	PrimaryExpression	1		1014155	0					
ANR	1014383	IdentifierDeclStatement	char buf [ 100 ] ;	1271:1:35482:35495	1014155	9	True				
ANR	1014384	IdentifierDecl	buf [ 100 ]		1014155	0					
ANR	1014385	IdentifierDeclType	char [ 100 ]		1014155	0					
ANR	1014386	Identifier	buf		1014155	1					
ANR	1014387	PrimaryExpression	100		1014155	2					
ANR	1014388	ExpressionStatement	"sprintf ( buf , ""%d"" , lease_expiry )"	1272:1:35498:35532	1014155	10	True				
ANR	1014389	CallExpression	"sprintf ( buf , ""%d"" , lease_expiry )"		1014155	0					
ANR	1014390	Callee	sprintf		1014155	0					
ANR	1014391	Identifier	sprintf		1014155	0					
ANR	1014392	ArgumentList	buf		1014155	1					
ANR	1014393	Argument	buf		1014155	0					
ANR	1014394	Identifier	buf		1014155	0					
ANR	1014395	Argument	"""%d"""		1014155	1					
ANR	1014396	PrimaryExpression	"""%d"""		1014155	0					
ANR	1014397	Argument	lease_expiry		1014155	2					
ANR	1014398	Identifier	lease_expiry		1014155	0					
ANR	1014399	ExpressionStatement	"result_line = ( string ) reqid + "" NULL "" + buf"	1273:1:35535:35579	1014155	11	True				
ANR	1014400	AssignmentExpression	"result_line = ( string ) reqid + "" NULL "" + buf"		1014155	0		=			
ANR	1014401	Identifier	result_line		1014155	0					
ANR	1014402	AdditiveExpression	"( string ) reqid + "" NULL "" + buf"		1014155	1		+			
ANR	1014403	CastExpression	( string ) reqid		1014155	0					
ANR	1014404	CastTarget	string		1014155	0					
ANR	1014405	Identifier	reqid		1014155	1					
ANR	1014406	AdditiveExpression	""" NULL "" + buf"		1014155	1		+			
ANR	1014407	PrimaryExpression	""" NULL """		1014155	0					
ANR	1014408	Identifier	buf		1014155	1					
ANR	1014409	ExpressionStatement	enqueue_result ( result_line )	1274:1:35582:35609	1014155	12	True				
ANR	1014410	CallExpression	enqueue_result ( result_line )		1014155	0					
ANR	1014411	Callee	enqueue_result		1014155	0					
ANR	1014412	Identifier	enqueue_result		1014155	0					
ANR	1014413	ArgumentList	result_line		1014155	1					
ANR	1014414	Argument	result_line		1014155	0					
ANR	1014415	Identifier	result_line		1014155	0					
ANR	1014416	ReturnStatement	return 0 ;	1276:1:35614:35622	1014155	13	True				
ANR	1014417	PrimaryExpression	0		1014155	0					
ANR	1014418	ReturnType	int		1014155	1					
ANR	1014419	Identifier	thread_cream_set_lease		1014155	2					
ANR	1014420	ParameterList	Request * req		1014155	3					
ANR	1014421	Parameter	Request * req	1228:28:34317:34328	1014155	0	True				
ANR	1014422	ParameterType	Request *		1014155	0					
ANR	1014423	Identifier	req		1014155	1					
ANR	1014424	CFGEntryNode	ENTRY		1014155		True				
ANR	1014425	CFGExitNode	EXIT		1014155		True				
ANR	1014426	CFGErrorNode	ERROR		1014155		True				
ANR	1014427	Symbol	& reqid		1014155						
ANR	1014428	Symbol	NULL		1014155						
ANR	1014429	Symbol	* req		1014155						
ANR	1014430	Symbol	& lease_id		1014155						
ANR	1014431	Symbol	& lease_expiry		1014155						
ANR	1014432	Symbol	& service		1014155						
ANR	1014433	Symbol	cp		1014155						
ANR	1014434	Symbol	reqid		1014155						
ANR	1014435	Symbol	result_line		1014155						
ANR	1014436	Symbol	* * req		1014155						
ANR	1014437	Symbol	buf		1014155						
ANR	1014438	Symbol	lease_expiry		1014155						
ANR	1014439	Symbol	service		1014155						
ANR	1014440	Symbol	req -> input_line		1014155						
ANR	1014441	Symbol	* req -> input_line		1014155						
ANR	1014442	Symbol	lease_id		1014155						
ANR	1014443	Symbol	req		1014155						
ANR	1014444	Function	handle_cream_job_status	1284:0:35802:36216							
ANR	1014445	FunctionDef	handle_cream_job_status (char * * input_line)		1014444	0					
ANR	1014446	CompoundStatement		1285:0:35851:36216	1014444	0					
ANR	1014447	IdentifierDeclStatement	int arg_cnt = count_args ( input_line ) ;	1286:1:35854:35892	1014444	0	True				
ANR	1014448	IdentifierDecl	arg_cnt = count_args ( input_line )		1014444	0					
ANR	1014449	IdentifierDeclType	int		1014444	0					
ANR	1014450	Identifier	arg_cnt		1014444	1					
ANR	1014451	AssignmentExpression	arg_cnt = count_args ( input_line )		1014444	2		=			
ANR	1014452	Identifier	arg_cnt		1014444	0					
ANR	1014453	CallExpression	count_args ( input_line )		1014444	1					
ANR	1014454	Callee	count_args		1014444	0					
ANR	1014455	Identifier	count_args		1014444	0					
ANR	1014456	ArgumentList	input_line		1014444	1					
ANR	1014457	Argument	input_line		1014444	0					
ANR	1014458	Identifier	input_line		1014444	0					
ANR	1014459	IdentifierDeclStatement	char * jobnum = NULL ;	1287:1:35895:35914	1014444	1	True				
ANR	1014460	IdentifierDecl	* jobnum = NULL		1014444	0					
ANR	1014461	IdentifierDeclType	char *		1014444	0					
ANR	1014462	Identifier	jobnum		1014444	1					
ANR	1014463	AssignmentExpression	* jobnum = NULL		1014444	2		=			
ANR	1014464	Identifier	NULL		1014444	0					
ANR	1014465	Identifier	NULL		1014444	1					
ANR	1014466	IfStatement	if ( arg_cnt < 4 )		1014444	2					
ANR	1014467	Condition	arg_cnt < 4	1289:6:35923:35933	1014444	0	True				
ANR	1014468	RelationalExpression	arg_cnt < 4		1014444	0		<			
ANR	1014469	Identifier	arg_cnt		1014444	0					
ANR	1014470	PrimaryExpression	4		1014444	1					
ANR	1014471	CompoundStatement		5:20:85:85	1014444	1					
ANR	1014472	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	1290:2:35941:35962	1014444	0	True				
ANR	1014473	CallExpression	HANDLE_SYNTAX_ERROR ( )		1014444	0					
ANR	1014474	Callee	HANDLE_SYNTAX_ERROR		1014444	0					
ANR	1014475	Identifier	HANDLE_SYNTAX_ERROR		1014444	0					
ANR	1014476	ArgumentList			1014444	1					
ANR	1014477	ExpressionStatement	"process_string_arg ( input_line [ 3 ] , & jobnum )"	1293:1:35969:36013	1014444	3	True				
ANR	1014478	CallExpression	"process_string_arg ( input_line [ 3 ] , & jobnum )"		1014444	0					
ANR	1014479	Callee	process_string_arg		1014444	0					
ANR	1014480	Identifier	process_string_arg		1014444	0					
ANR	1014481	ArgumentList	input_line [ 3 ]		1014444	1					
ANR	1014482	Argument	input_line [ 3 ]		1014444	0					
ANR	1014483	ArrayIndexing	input_line [ 3 ]		1014444	0					
ANR	1014484	Identifier	input_line		1014444	0					
ANR	1014485	PrimaryExpression	3		1014444	1					
ANR	1014486	Argument	& jobnum		1014444	1					
ANR	1014487	UnaryOperationExpression	& jobnum		1014444	0					
ANR	1014488	UnaryOperator	&		1014444	0					
ANR	1014489	Identifier	jobnum		1014444	1					
ANR	1014490	IfStatement	if ( jobnum && ( atoi ( jobnum ) + 4 != arg_cnt ) )		1014444	4					
ANR	1014491	Condition	jobnum && ( atoi ( jobnum ) + 4 != arg_cnt )	1294:6:36021:36063	1014444	0	True				
ANR	1014492	AndExpression	jobnum && ( atoi ( jobnum ) + 4 != arg_cnt )		1014444	0		&&			
ANR	1014493	Identifier	jobnum		1014444	0					
ANR	1014494	EqualityExpression	atoi ( jobnum ) + 4 != arg_cnt		1014444	1		!=			
ANR	1014495	AdditiveExpression	atoi ( jobnum ) + 4		1014444	0		+			
ANR	1014496	CallExpression	atoi ( jobnum )		1014444	0					
ANR	1014497	Callee	atoi		1014444	0					
ANR	1014498	Identifier	atoi		1014444	0					
ANR	1014499	ArgumentList	jobnum		1014444	1					
ANR	1014500	Argument	jobnum		1014444	0					
ANR	1014501	Identifier	jobnum		1014444	0					
ANR	1014502	PrimaryExpression	4		1014444	1					
ANR	1014503	Identifier	arg_cnt		1014444	1					
ANR	1014504	CompoundStatement		10:52:215:215	1014444	1					
ANR	1014505	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	1295:2:36071:36092	1014444	0	True				
ANR	1014506	CallExpression	HANDLE_SYNTAX_ERROR ( )		1014444	0					
ANR	1014507	Callee	HANDLE_SYNTAX_ERROR		1014444	0					
ANR	1014508	Identifier	HANDLE_SYNTAX_ERROR		1014444	0					
ANR	1014509	ArgumentList			1014444	1					
ANR	1014510	ExpressionStatement	"enqueue_request_batch ( input_line , thread_cream_job_status , cmp_request_single )"	1298:1:36099:36179	1014444	5	True				
ANR	1014511	CallExpression	"enqueue_request_batch ( input_line , thread_cream_job_status , cmp_request_single )"		1014444	0					
ANR	1014512	Callee	enqueue_request_batch		1014444	0					
ANR	1014513	Identifier	enqueue_request_batch		1014444	0					
ANR	1014514	ArgumentList	input_line		1014444	1					
ANR	1014515	Argument	input_line		1014444	0					
ANR	1014516	Identifier	input_line		1014444	0					
ANR	1014517	Argument	thread_cream_job_status		1014444	1					
ANR	1014518	Identifier	thread_cream_job_status		1014444	0					
ANR	1014519	Argument	cmp_request_single		1014444	2					
ANR	1014520	Identifier	cmp_request_single		1014444	0					
ANR	1014521	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	1300:1:36183:36201	1014444	6	True				
ANR	1014522	CallExpression	"gahp_printf ( ""S\\n"" )"		1014444	0					
ANR	1014523	Callee	gahp_printf		1014444	0					
ANR	1014524	Identifier	gahp_printf		1014444	0					
ANR	1014525	ArgumentList	"""S\\n"""		1014444	1					
ANR	1014526	Argument	"""S\\n"""		1014444	0					
ANR	1014527	PrimaryExpression	"""S\\n"""		1014444	0					
ANR	1014528	ReturnStatement	return 0 ;	1302:1:36206:36214	1014444	7	True				
ANR	1014529	PrimaryExpression	0		1014444	0					
ANR	1014530	ReturnType	int		1014444	1					
ANR	1014531	Identifier	handle_cream_job_status		1014444	2					
ANR	1014532	ParameterList	char * * input_line		1014444	3					
ANR	1014533	Parameter	char * * input_line	1284:29:35831:35847	1014444	0	True				
ANR	1014534	ParameterType	char * *		1014444	0					
ANR	1014535	Identifier	input_line		1014444	1					
ANR	1014536	CFGEntryNode	ENTRY		1014444		True				
ANR	1014537	CFGExitNode	EXIT		1014444		True				
ANR	1014538	Symbol	atoi		1014444						
ANR	1014539	Symbol	* input_line		1014444						
ANR	1014540	Symbol	thread_cream_job_status		1014444						
ANR	1014541	Symbol	NULL		1014444						
ANR	1014542	Symbol	& jobnum		1014444						
ANR	1014543	Symbol	jobnum		1014444						
ANR	1014544	Symbol	count_args		1014444						
ANR	1014545	Symbol	cmp_request_single		1014444						
ANR	1014546	Symbol	input_line		1014444						
ANR	1014547	Symbol	arg_cnt		1014444						
ANR	1014548	Function	thread_cream_job_status	1305:0:36219:40561							
ANR	1014549	FunctionDef	thread_cream_job_status (Request * * reqlist)		1014548	0					
ANR	1014550	CompoundStatement		1306:0:36268:40561	1014548	0					
ANR	1014551	IfStatement	if ( reqlist == NULL )		1014548	0					
ANR	1014552	Condition	reqlist == NULL	1307:6:36276:36290	1014548	0	True				
ANR	1014553	EqualityExpression	reqlist == NULL		1014548	0		==			
ANR	1014554	Identifier	reqlist		1014548	0					
ANR	1014555	Identifier	NULL		1014548	1					
ANR	1014556	CompoundStatement		2:24:25:25	1014548	1					
ANR	1014557	ExpressionStatement	"internal_error ( ""thread_cream_job_status called with NULL pointer\\n"" )"	1308:2:36298:36368	1014548	0	True				
ANR	1014558	CallExpression	"internal_error ( ""thread_cream_job_status called with NULL pointer\\n"" )"		1014548	0					
ANR	1014559	Callee	internal_error		1014548	0					
ANR	1014560	Identifier	internal_error		1014548	0					
ANR	1014561	ArgumentList	"""thread_cream_job_status called with NULL pointer\\n"""		1014548	1					
ANR	1014562	Argument	"""thread_cream_job_status called with NULL pointer\\n"""		1014548	0					
ANR	1014563	PrimaryExpression	"""thread_cream_job_status called with NULL pointer\\n"""		1014548	0					
ANR	1014564	IfStatement	if ( reqlist [ 0 ] == NULL )		1014548	1					
ANR	1014565	Condition	reqlist [ 0 ] == NULL	1310:6:36379:36396	1014548	0	True				
ANR	1014566	EqualityExpression	reqlist [ 0 ] == NULL		1014548	0		==			
ANR	1014567	ArrayIndexing	reqlist [ 0 ]		1014548	0					
ANR	1014568	Identifier	reqlist		1014548	0					
ANR	1014569	PrimaryExpression	0		1014548	1					
ANR	1014570	Identifier	NULL		1014548	1					
ANR	1014571	CompoundStatement		5:27:131:131	1014548	1					
ANR	1014572	ExpressionStatement	"internal_error ( ""thread_cream_job_status called with empty list\\n"" )"	1311:2:36404:36472	1014548	0	True				
ANR	1014573	CallExpression	"internal_error ( ""thread_cream_job_status called with empty list\\n"" )"		1014548	0					
ANR	1014574	Callee	internal_error		1014548	0					
ANR	1014575	Identifier	internal_error		1014548	0					
ANR	1014576	ArgumentList	"""thread_cream_job_status called with empty list\\n"""		1014548	1					
ANR	1014577	Argument	"""thread_cream_job_status called with empty list\\n"""		1014548	0					
ANR	1014578	PrimaryExpression	"""thread_cream_job_status called with empty list\\n"""		1014548	0					
ANR	1014579	IdentifierDeclStatement	bool single_request = ( reqlist [ 1 ] == NULL ) ;	1314:1:36479:36521	1014548	2	True				
ANR	1014580	IdentifierDecl	single_request = ( reqlist [ 1 ] == NULL )		1014548	0					
ANR	1014581	IdentifierDeclType	bool		1014548	0					
ANR	1014582	Identifier	single_request		1014548	1					
ANR	1014583	AssignmentExpression	single_request = ( reqlist [ 1 ] == NULL )		1014548	2		=			
ANR	1014584	Identifier	single_request		1014548	0					
ANR	1014585	EqualityExpression	reqlist [ 1 ] == NULL		1014548	1		==			
ANR	1014586	ArrayIndexing	reqlist [ 1 ]		1014548	0					
ANR	1014587	Identifier	reqlist		1014548	0					
ANR	1014588	PrimaryExpression	1		1014548	1					
ANR	1014589	Identifier	NULL		1014548	1					
ANR	1014590	IdentifierDeclStatement	string result_line ;	1316:1:36525:36543	1014548	3	True				
ANR	1014591	IdentifierDecl	result_line		1014548	0					
ANR	1014592	IdentifierDeclType	string		1014548	0					
ANR	1014593	Identifier	result_line		1014548	1					
ANR	1014594	IdentifierDeclStatement	char * service ;	1317:1:36546:36559	1014548	4	True				
ANR	1014595	IdentifierDecl	* service		1014548	0					
ANR	1014596	IdentifierDeclType	char *		1014548	0					
ANR	1014597	Identifier	service		1014548	1					
ANR	1014598	ExpressionStatement	"process_string_arg ( reqlist [ 0 ] -> input_line [ 2 ] , & service )"	1318:1:36562:36619	1014548	5	True				
ANR	1014599	CallExpression	"process_string_arg ( reqlist [ 0 ] -> input_line [ 2 ] , & service )"		1014548	0					
ANR	1014600	Callee	process_string_arg		1014548	0					
ANR	1014601	Identifier	process_string_arg		1014548	0					
ANR	1014602	ArgumentList	reqlist [ 0 ] -> input_line [ 2 ]		1014548	1					
ANR	1014603	Argument	reqlist [ 0 ] -> input_line [ 2 ]		1014548	0					
ANR	1014604	ArrayIndexing	reqlist [ 0 ] -> input_line [ 2 ]		1014548	0					
ANR	1014605	PtrMemberAccess	reqlist [ 0 ] -> input_line		1014548	0					
ANR	1014606	ArrayIndexing	reqlist [ 0 ]		1014548	0					
ANR	1014607	Identifier	reqlist		1014548	0					
ANR	1014608	PrimaryExpression	0		1014548	1					
ANR	1014609	Identifier	input_line		1014548	1					
ANR	1014610	PrimaryExpression	2		1014548	1					
ANR	1014611	Argument	& service		1014548	1					
ANR	1014612	UnaryOperationExpression	& service		1014548	0					
ANR	1014613	UnaryOperator	&		1014548	0					
ANR	1014614	Identifier	service		1014548	1					
ANR	1014615	IdentifierDeclStatement	string proxy = reqlist [ 0 ] -> proxy ;	1319:1:36622:36654	1014548	6	True				
ANR	1014616	IdentifierDecl	proxy = reqlist [ 0 ] -> proxy		1014548	0					
ANR	1014617	IdentifierDeclType	string		1014548	0					
ANR	1014618	Identifier	proxy		1014548	1					
ANR	1014619	AssignmentExpression	proxy = reqlist [ 0 ] -> proxy		1014548	2		=			
ANR	1014620	Identifier	proxy		1014548	0					
ANR	1014621	PtrMemberAccess	reqlist [ 0 ] -> proxy		1014548	1					
ANR	1014622	ArrayIndexing	reqlist [ 0 ]		1014548	0					
ANR	1014623	Identifier	reqlist		1014548	0					
ANR	1014624	PrimaryExpression	0		1014548	1					
ANR	1014625	Identifier	proxy		1014548	1					
ANR	1014626	IdentifierDeclStatement	AbsCreamProxy * cp = NULL ;	1320:1:36657:36681	1014548	7	True				
ANR	1014627	IdentifierDecl	* cp = NULL		1014548	0					
ANR	1014628	IdentifierDeclType	AbsCreamProxy *		1014548	0					
ANR	1014629	Identifier	cp		1014548	1					
ANR	1014630	AssignmentExpression	* cp = NULL		1014548	2		=			
ANR	1014631	Identifier	NULL		1014548	0					
ANR	1014632	Identifier	NULL		1014548	1					
ANR	1014633	IdentifierDeclStatement	vector < string > reqids ;	1322:1:36685:36706	1014548	8	True				
ANR	1014634	IdentifierDecl	reqids		1014548	0					
ANR	1014635	IdentifierDeclType	vector < string >		1014548	0					
ANR	1014636	Identifier	reqids		1014548	1					
ANR	1014637	IdentifierDeclStatement	AbsCreamProxy :: StatusArrayResult sar ;	1324:1:36710:36746	1014548	9	True				
ANR	1014638	IdentifierDecl	sar		1014548	0					
ANR	1014639	IdentifierDeclType	AbsCreamProxy :: StatusArrayResult		1014548	0					
ANR	1014640	Identifier	sar		1014548	1					
ANR	1014641	TryStatement	try		1014548	10					
ANR	1014642	CompoundStatement		25:2:579:765	1014548	0					
ANR	1014643	IdentifierDeclStatement	vector < JobIdWrapper > jv ;		1014548	0					
ANR	1014644	IdentifierDecl	jv		1014548	0					
ANR	1014645	IdentifierDeclType	vector < JobIdWrapper >		1014548	0					
ANR	1014646	Identifier	jv		1014548	1					
ANR	1014647	ExpressionStatement	"collect_job_ids ( reqlist , jv , reqids )"		1014548	1					
ANR	1014648	CallExpression	"collect_job_ids ( reqlist , jv , reqids )"		1014548	0					
ANR	1014649	Callee	collect_job_ids		1014548	0					
ANR	1014650	Identifier	collect_job_ids		1014548	0					
ANR	1014651	ArgumentList	reqlist		1014548	1					
ANR	1014652	Argument	reqlist		1014548	0					
ANR	1014653	Identifier	reqlist		1014548	0					
ANR	1014654	Argument	jv		1014548	1					
ANR	1014655	Identifier	jv		1014548	0					
ANR	1014656	Argument	reqids		1014548	2					
ANR	1014657	Identifier	reqids		1014548	0					
ANR	1014658	IdentifierDeclStatement	vector < string > sv ;		1014548	2					
ANR	1014659	IdentifierDecl	sv		1014548	0					
ANR	1014660	IdentifierDeclType	vector < string >		1014548	0					
ANR	1014661	Identifier	sv		1014548	1					
ANR	1014662	IdentifierDeclStatement	"JobFilterWrapper jfw ( jv , sv , - 1 , - 1 , """" , """" ) ;"		1014548	3					
ANR	1014663	IdentifierDecl	"jfw ( jv , sv , - 1 , - 1 , """" , """" )"		1014548	0					
ANR	1014664	IdentifierDeclType	JobFilterWrapper		1014548	0					
ANR	1014665	Identifier	jfw		1014548	1					
ANR	1014666	Expression	"jv , sv , - 1 , - 1 , """" , """""		1014548	2					
ANR	1014667	Identifier	jv		1014548	0					
ANR	1014668	Expression	"sv , - 1 , - 1 , """" , """""		1014548	1					
ANR	1014669	Identifier	sv		1014548	0					
ANR	1014670	Expression	"- 1 , - 1 , """" , """""		1014548	1					
ANR	1014671	UnaryOperationExpression	- 1		1014548	0					
ANR	1014672	UnaryOperator	-		1014548	0					
ANR	1014673	PrimaryExpression	1		1014548	1					
ANR	1014674	Expression	"- 1 , """" , """""		1014548	1					
ANR	1014675	UnaryOperationExpression	- 1		1014548	0					
ANR	1014676	UnaryOperator	-		1014548	0					
ANR	1014677	PrimaryExpression	1		1014548	1					
ANR	1014678	Expression	""""" , """""		1014548	1					
ANR	1014679	PrimaryExpression	""""""		1014548	0					
ANR	1014680	PrimaryExpression	""""""		1014548	1					
ANR	1014681	ExpressionStatement	"cp = CreamProxyFactory :: make_CreamProxyStatus ( & jfw , & sar , DEFAULT_TIMEOUT )"		1014548	4					
ANR	1014682	AssignmentExpression	"cp = CreamProxyFactory :: make_CreamProxyStatus ( & jfw , & sar , DEFAULT_TIMEOUT )"		1014548	0		=			
ANR	1014683	Identifier	cp		1014548	0					
ANR	1014684	CallExpression	"CreamProxyFactory :: make_CreamProxyStatus ( & jfw , & sar , DEFAULT_TIMEOUT )"		1014548	1					
ANR	1014685	Callee	CreamProxyFactory :: make_CreamProxyStatus		1014548	0					
ANR	1014686	Identifier	CreamProxyFactory :: make_CreamProxyStatus		1014548	0					
ANR	1014687	ArgumentList	& jfw		1014548	1					
ANR	1014688	Argument	& jfw		1014548	0					
ANR	1014689	UnaryOperationExpression	& jfw		1014548	0					
ANR	1014690	UnaryOperator	&		1014548	0					
ANR	1014691	Identifier	jfw		1014548	1					
ANR	1014692	Argument	& sar		1014548	1					
ANR	1014693	UnaryOperationExpression	& sar		1014548	0					
ANR	1014694	UnaryOperator	&		1014548	0					
ANR	1014695	Identifier	sar		1014548	1					
ANR	1014696	Argument	DEFAULT_TIMEOUT		1014548	2					
ANR	1014697	Identifier	DEFAULT_TIMEOUT		1014548	0					
ANR	1014698	ExpressionStatement	check_for_factory_error ( cp )		1014548	5					
ANR	1014699	CallExpression	check_for_factory_error ( cp )		1014548	0					
ANR	1014700	Callee	check_for_factory_error		1014548	0					
ANR	1014701	Identifier	check_for_factory_error		1014548	0					
ANR	1014702	ArgumentList	cp		1014548	1					
ANR	1014703	Argument	cp		1014548	0					
ANR	1014704	Identifier	cp		1014548	0					
ANR	1014705	ExpressionStatement	cp -> setCredential ( proxy . c_str ( ) )		1014548	6					
ANR	1014706	CallExpression	cp -> setCredential ( proxy . c_str ( ) )		1014548	0					
ANR	1014707	Callee	cp -> setCredential		1014548	0					
ANR	1014708	PtrMemberAccess	cp -> setCredential		1014548	0					
ANR	1014709	Identifier	cp		1014548	0					
ANR	1014710	Identifier	setCredential		1014548	1					
ANR	1014711	ArgumentList	proxy . c_str ( )		1014548	1					
ANR	1014712	Argument	proxy . c_str ( )		1014548	0					
ANR	1014713	CallExpression	proxy . c_str ( )		1014548	0					
ANR	1014714	Callee	proxy . c_str		1014548	0					
ANR	1014715	MemberAccess	proxy . c_str		1014548	0					
ANR	1014716	Identifier	proxy		1014548	0					
ANR	1014717	Identifier	c_str		1014548	1					
ANR	1014718	ArgumentList			1014548	1					
ANR	1014719	ExpressionStatement	cp -> execute ( service )		1014548	7					
ANR	1014720	CallExpression	cp -> execute ( service )		1014548	0					
ANR	1014721	Callee	cp -> execute		1014548	0					
ANR	1014722	PtrMemberAccess	cp -> execute		1014548	0					
ANR	1014723	Identifier	cp		1014548	0					
ANR	1014724	Identifier	execute		1014548	1					
ANR	1014725	ArgumentList	service		1014548	1					
ANR	1014726	Argument	service		1014548	0					
ANR	1014727	Identifier	service		1014548	0					
ANR	1014728	Statement	delete		1014548	8					
ANR	1014729	ExpressionStatement	cp		1014548	9					
ANR	1014730	Identifier	cp		1014548	0					
ANR	1014731	CatchList			1014548	1					
ANR	1014732	CatchStatement	catch ( std :: exception & ex )		1014548	0					
ANR	1014733	Identifier	ex		1014548	0					
ANR	1014734	CompoundStatement		40:27:1039:1039	1014548	1					
ANR	1014735	Statement	delete	1346:2:37312:37317	1014548	0	True				
ANR	1014736	ExpressionStatement	cp	1346:9:37319:37321	1014548	1	True				
ANR	1014737	Identifier	cp		1014548	0					
ANR	1014738	ForStatement	for ( vector < string > :: const_iterator it = reqids . begin ( ) ; it != reqids . end ( ) ; it ++ )		1014548	2					
ANR	1014739	ForInit	vector < string > :: const_iterator it = reqids . begin ( ) ;	1347:7:37330:37380	1014548	0	True				
ANR	1014740	IdentifierDeclStatement	vector < string > :: const_iterator it = reqids . begin ( ) ;		1014548	0					
ANR	1014741	IdentifierDecl	it = reqids . begin ( )		1014548	0					
ANR	1014742	IdentifierDeclType	vector < string > :: const_iterator		1014548	0					
ANR	1014743	Identifier	it		1014548	1					
ANR	1014744	AssignmentExpression	it = reqids . begin ( )		1014548	2		=			
ANR	1014745	Identifier	it		1014548	0					
ANR	1014746	CallExpression	reqids . begin ( )		1014548	1					
ANR	1014747	Callee	reqids . begin		1014548	0					
ANR	1014748	MemberAccess	reqids . begin		1014548	0					
ANR	1014749	Identifier	reqids		1014548	0					
ANR	1014750	Identifier	begin		1014548	1					
ANR	1014751	ArgumentList			1014548	1					
ANR	1014752	Condition	it != reqids . end ( )	1348:4:37386:37403	1014548	1	True				
ANR	1014753	EqualityExpression	it != reqids . end ( )		1014548	0		!=			
ANR	1014754	Identifier	it		1014548	0					
ANR	1014755	CallExpression	reqids . end ( )		1014548	1					
ANR	1014756	Callee	reqids . end		1014548	0					
ANR	1014757	MemberAccess	reqids . end		1014548	0					
ANR	1014758	Identifier	reqids		1014548	0					
ANR	1014759	Identifier	end		1014548	1					
ANR	1014760	ArgumentList			1014548	1					
ANR	1014761	PostIncDecOperationExpression	it ++	1348:24:37406:37409	1014548	2	True				
ANR	1014762	Identifier	it		1014548	0					
ANR	1014763	IncDec	++		1014548	1					
ANR	1014764	CompoundStatement		45:3:1150:1186	1014548	3					
ANR	1014765	IdentifierDeclStatement	char * msg = escape_spaces ( ex . what ( ) ) ;	1350:3:37419:37455	1014548	0	True				
ANR	1014766	IdentifierDecl	* msg = escape_spaces ( ex . what ( ) )		1014548	0					
ANR	1014767	IdentifierDeclType	char *		1014548	0					
ANR	1014768	Identifier	msg		1014548	1					
ANR	1014769	AssignmentExpression	* msg = escape_spaces ( ex . what ( ) )		1014548	2		=			
ANR	1014770	Identifier	msg		1014548	0					
ANR	1014771	CallExpression	escape_spaces ( ex . what ( ) )		1014548	1					
ANR	1014772	Callee	escape_spaces		1014548	0					
ANR	1014773	Identifier	escape_spaces		1014548	0					
ANR	1014774	ArgumentList	ex . what ( )		1014548	1					
ANR	1014775	Argument	ex . what ( )		1014548	0					
ANR	1014776	CallExpression	ex . what ( )		1014548	0					
ANR	1014777	Callee	ex . what		1014548	0					
ANR	1014778	MemberAccess	ex . what		1014548	0					
ANR	1014779	Identifier	ex		1014548	0					
ANR	1014780	Identifier	what		1014548	1					
ANR	1014781	ArgumentList			1014548	1					
ANR	1014782	ExpressionStatement	"enqueue_result ( ( * it ) + "" CREAM_Job_Status\\\\ Error:\\\\ "" + msg )"	1351:3:37460:37523	1014548	1	True				
ANR	1014783	CallExpression	"enqueue_result ( ( * it ) + "" CREAM_Job_Status\\\\ Error:\\\\ "" + msg )"		1014548	0					
ANR	1014784	Callee	enqueue_result		1014548	0					
ANR	1014785	Identifier	enqueue_result		1014548	0					
ANR	1014786	ArgumentList	"( * it ) + "" CREAM_Job_Status\\\\ Error:\\\\ "" + msg"		1014548	1					
ANR	1014787	Argument	"( * it ) + "" CREAM_Job_Status\\\\ Error:\\\\ "" + msg"		1014548	0					
ANR	1014788	AdditiveExpression	"( * it ) + "" CREAM_Job_Status\\\\ Error:\\\\ "" + msg"		1014548	0		+			
ANR	1014789	UnaryOperationExpression	* it		1014548	0					
ANR	1014790	UnaryOperator	*		1014548	0					
ANR	1014791	Identifier	it		1014548	1					
ANR	1014792	AdditiveExpression	""" CREAM_Job_Status\\\\ Error:\\\\ "" + msg"		1014548	1		+			
ANR	1014793	PrimaryExpression	""" CREAM_Job_Status\\\\ Error:\\\\ """		1014548	0					
ANR	1014794	Identifier	msg		1014548	1					
ANR	1014795	ExpressionStatement	free ( msg )	1352:3:37528:37537	1014548	2	True				
ANR	1014796	CallExpression	free ( msg )		1014548	0					
ANR	1014797	Callee	free		1014548	0					
ANR	1014798	Identifier	free		1014548	0					
ANR	1014799	ArgumentList	msg		1014548	1					
ANR	1014800	Argument	msg		1014548	0					
ANR	1014801	Identifier	msg		1014548	0					
ANR	1014802	ReturnStatement	return 1 ;	1354:2:37545:37553	1014548	3	True				
ANR	1014803	PrimaryExpression	1		1014548	0					
ANR	1014804	ReturnType	int		1014548	1					
ANR	1014805	Identifier	thread_cream_job_status		1014548	2					
ANR	1014806	ParameterList	Request * * reqlist		1014548	3					
ANR	1014807	Parameter	Request * * reqlist	1305:29:36248:36264	1014548	0	True				
ANR	1014808	ParameterType	Request * *		1014548	0					
ANR	1014809	Identifier	reqlist		1014548	1					
ANR	1014810	CFGEntryNode	ENTRY		1014548		True				
ANR	1014811	CFGExitNode	EXIT		1014548		True				
ANR	1014812	CFGErrorNode	ERROR		1014548		True				
ANR	1014813	Symbol	NULL		1014548						
ANR	1014814	Symbol	reqlist [ 0 ] -> input_line		1014548						
ANR	1014815	Symbol	sar		1014548						
ANR	1014816	Symbol	single_request		1014548						
ANR	1014817	Symbol	& service		1014548						
ANR	1014818	Symbol	* * * reqlist		1014548						
ANR	1014819	Symbol	* reqlist		1014548						
ANR	1014820	Symbol	cp		1014548						
ANR	1014821	Symbol	* * reqlist		1014548						
ANR	1014822	Symbol	result_line		1014548						
ANR	1014823	Symbol	proxy		1014548						
ANR	1014824	Symbol	reqlist		1014548						
ANR	1014825	Symbol	service		1014548						
ANR	1014826	Symbol	reqids		1014548						
ANR	1014827	Symbol	reqlist [ 0 ] -> proxy		1014548						
ANR	1014828	Symbol	* reqlist [ 0 ] -> input_line		1014548						
ANR	1014829	Function	handle_cream_job_info	1482:0:40783:41167							
ANR	1014830	FunctionDef	handle_cream_job_info (char * * input_line)		1014829	0					
ANR	1014831	CompoundStatement		1483:0:40830:41167	1014829	0					
ANR	1014832	IdentifierDeclStatement	int arg_cnt = count_args ( input_line ) ;	1484:1:40833:40871	1014829	0	True				
ANR	1014833	IdentifierDecl	arg_cnt = count_args ( input_line )		1014829	0					
ANR	1014834	IdentifierDeclType	int		1014829	0					
ANR	1014835	Identifier	arg_cnt		1014829	1					
ANR	1014836	AssignmentExpression	arg_cnt = count_args ( input_line )		1014829	2		=			
ANR	1014837	Identifier	arg_cnt		1014829	0					
ANR	1014838	CallExpression	count_args ( input_line )		1014829	1					
ANR	1014839	Callee	count_args		1014829	0					
ANR	1014840	Identifier	count_args		1014829	0					
ANR	1014841	ArgumentList	input_line		1014829	1					
ANR	1014842	Argument	input_line		1014829	0					
ANR	1014843	Identifier	input_line		1014829	0					
ANR	1014844	IdentifierDeclStatement	char * jobnum = NULL ;	1485:1:40874:40893	1014829	1	True				
ANR	1014845	IdentifierDecl	* jobnum = NULL		1014829	0					
ANR	1014846	IdentifierDeclType	char *		1014829	0					
ANR	1014847	Identifier	jobnum		1014829	1					
ANR	1014848	AssignmentExpression	* jobnum = NULL		1014829	2		=			
ANR	1014849	Identifier	NULL		1014829	0					
ANR	1014850	Identifier	NULL		1014829	1					
ANR	1014851	IfStatement	if ( arg_cnt < 4 )		1014829	2					
ANR	1014852	Condition	arg_cnt < 4	1487:6:40902:40912	1014829	0	True				
ANR	1014853	RelationalExpression	arg_cnt < 4		1014829	0		<			
ANR	1014854	Identifier	arg_cnt		1014829	0					
ANR	1014855	PrimaryExpression	4		1014829	1					
ANR	1014856	CompoundStatement		5:20:85:85	1014829	1					
ANR	1014857	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	1488:2:40920:40941	1014829	0	True				
ANR	1014858	CallExpression	HANDLE_SYNTAX_ERROR ( )		1014829	0					
ANR	1014859	Callee	HANDLE_SYNTAX_ERROR		1014829	0					
ANR	1014860	Identifier	HANDLE_SYNTAX_ERROR		1014829	0					
ANR	1014861	ArgumentList			1014829	1					
ANR	1014862	ExpressionStatement	"process_string_arg ( input_line [ 3 ] , & jobnum )"	1491:1:40948:40992	1014829	3	True				
ANR	1014863	CallExpression	"process_string_arg ( input_line [ 3 ] , & jobnum )"		1014829	0					
ANR	1014864	Callee	process_string_arg		1014829	0					
ANR	1014865	Identifier	process_string_arg		1014829	0					
ANR	1014866	ArgumentList	input_line [ 3 ]		1014829	1					
ANR	1014867	Argument	input_line [ 3 ]		1014829	0					
ANR	1014868	ArrayIndexing	input_line [ 3 ]		1014829	0					
ANR	1014869	Identifier	input_line		1014829	0					
ANR	1014870	PrimaryExpression	3		1014829	1					
ANR	1014871	Argument	& jobnum		1014829	1					
ANR	1014872	UnaryOperationExpression	& jobnum		1014829	0					
ANR	1014873	UnaryOperator	&		1014829	0					
ANR	1014874	Identifier	jobnum		1014829	1					
ANR	1014875	IfStatement	if ( jobnum && ( atoi ( jobnum ) + 4 != arg_cnt ) )		1014829	4					
ANR	1014876	Condition	jobnum && ( atoi ( jobnum ) + 4 != arg_cnt )	1492:6:41000:41042	1014829	0	True				
ANR	1014877	AndExpression	jobnum && ( atoi ( jobnum ) + 4 != arg_cnt )		1014829	0		&&			
ANR	1014878	Identifier	jobnum		1014829	0					
ANR	1014879	EqualityExpression	atoi ( jobnum ) + 4 != arg_cnt		1014829	1		!=			
ANR	1014880	AdditiveExpression	atoi ( jobnum ) + 4		1014829	0		+			
ANR	1014881	CallExpression	atoi ( jobnum )		1014829	0					
ANR	1014882	Callee	atoi		1014829	0					
ANR	1014883	Identifier	atoi		1014829	0					
ANR	1014884	ArgumentList	jobnum		1014829	1					
ANR	1014885	Argument	jobnum		1014829	0					
ANR	1014886	Identifier	jobnum		1014829	0					
ANR	1014887	PrimaryExpression	4		1014829	1					
ANR	1014888	Identifier	arg_cnt		1014829	1					
ANR	1014889	CompoundStatement		10:52:215:215	1014829	1					
ANR	1014890	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	1493:2:41050:41071	1014829	0	True				
ANR	1014891	CallExpression	HANDLE_SYNTAX_ERROR ( )		1014829	0					
ANR	1014892	Callee	HANDLE_SYNTAX_ERROR		1014829	0					
ANR	1014893	Identifier	HANDLE_SYNTAX_ERROR		1014829	0					
ANR	1014894	ArgumentList			1014829	1					
ANR	1014895	ExpressionStatement	"enqueue_request ( input_line , thread_cream_job_info )"	1496:1:41078:41130	1014829	5	True				
ANR	1014896	CallExpression	"enqueue_request ( input_line , thread_cream_job_info )"		1014829	0					
ANR	1014897	Callee	enqueue_request		1014829	0					
ANR	1014898	Identifier	enqueue_request		1014829	0					
ANR	1014899	ArgumentList	input_line		1014829	1					
ANR	1014900	Argument	input_line		1014829	0					
ANR	1014901	Identifier	input_line		1014829	0					
ANR	1014902	Argument	thread_cream_job_info		1014829	1					
ANR	1014903	Identifier	thread_cream_job_info		1014829	0					
ANR	1014904	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	1498:1:41134:41152	1014829	6	True				
ANR	1014905	CallExpression	"gahp_printf ( ""S\\n"" )"		1014829	0					
ANR	1014906	Callee	gahp_printf		1014829	0					
ANR	1014907	Identifier	gahp_printf		1014829	0					
ANR	1014908	ArgumentList	"""S\\n"""		1014829	1					
ANR	1014909	Argument	"""S\\n"""		1014829	0					
ANR	1014910	PrimaryExpression	"""S\\n"""		1014829	0					
ANR	1014911	ReturnStatement	return 0 ;	1500:1:41157:41165	1014829	7	True				
ANR	1014912	PrimaryExpression	0		1014829	0					
ANR	1014913	ReturnType	int		1014829	1					
ANR	1014914	Identifier	handle_cream_job_info		1014829	2					
ANR	1014915	ParameterList	char * * input_line		1014829	3					
ANR	1014916	Parameter	char * * input_line	1482:27:40810:40826	1014829	0	True				
ANR	1014917	ParameterType	char * *		1014829	0					
ANR	1014918	Identifier	input_line		1014829	1					
ANR	1014919	CFGEntryNode	ENTRY		1014829		True				
ANR	1014920	CFGExitNode	EXIT		1014829		True				
ANR	1014921	Symbol	atoi		1014829						
ANR	1014922	Symbol	* input_line		1014829						
ANR	1014923	Symbol	NULL		1014829						
ANR	1014924	Symbol	& jobnum		1014829						
ANR	1014925	Symbol	jobnum		1014829						
ANR	1014926	Symbol	count_args		1014829						
ANR	1014927	Symbol	input_line		1014829						
ANR	1014928	Symbol	arg_cnt		1014829						
ANR	1014929	Symbol	thread_cream_job_info		1014829						
ANR	1014930	Function	thread_cream_job_info	1503:0:41170:43077							
ANR	1014931	FunctionDef	thread_cream_job_info (Request * req)		1014930	0					
ANR	1014932	CompoundStatement		1504:0:41212:43077	1014930	0					
ANR	1014933	IdentifierDeclStatement	"char * reqid , * service , * jobnum_str , * jobid ;"	1509:1:41374:41416	1014930	0	True				
ANR	1014934	IdentifierDecl	* reqid		1014930	0					
ANR	1014935	IdentifierDeclType	char *		1014930	0					
ANR	1014936	Identifier	reqid		1014930	1					
ANR	1014937	IdentifierDecl	* service		1014930	1					
ANR	1014938	IdentifierDeclType	char *		1014930	0					
ANR	1014939	Identifier	service		1014930	1					
ANR	1014940	IdentifierDecl	* jobnum_str		1014930	2					
ANR	1014941	IdentifierDeclType	char *		1014930	0					
ANR	1014942	Identifier	jobnum_str		1014930	1					
ANR	1014943	IdentifierDecl	* jobid		1014930	3					
ANR	1014944	IdentifierDeclType	char *		1014930	0					
ANR	1014945	Identifier	jobid		1014930	1					
ANR	1014946	IdentifierDeclStatement	string result_line ;	1510:1:41419:41437	1014930	1	True				
ANR	1014947	IdentifierDecl	result_line		1014930	0					
ANR	1014948	IdentifierDeclType	string		1014930	0					
ANR	1014949	Identifier	result_line		1014930	1					
ANR	1014950	IdentifierDeclStatement	AbsCreamProxy * cp = NULL ;	1511:1:41440:41464	1014930	2	True				
ANR	1014951	IdentifierDecl	* cp = NULL		1014930	0					
ANR	1014952	IdentifierDeclType	AbsCreamProxy *		1014930	0					
ANR	1014953	Identifier	cp		1014930	1					
ANR	1014954	AssignmentExpression	* cp = NULL		1014930	2		=			
ANR	1014955	Identifier	NULL		1014930	0					
ANR	1014956	Identifier	NULL		1014930	1					
ANR	1014957	ExpressionStatement	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"	1513:1:41469:41517	1014930	3	True				
ANR	1014958	CallExpression	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"		1014930	0					
ANR	1014959	Callee	process_string_arg		1014930	0					
ANR	1014960	Identifier	process_string_arg		1014930	0					
ANR	1014961	ArgumentList	req -> input_line [ 1 ]		1014930	1					
ANR	1014962	Argument	req -> input_line [ 1 ]		1014930	0					
ANR	1014963	ArrayIndexing	req -> input_line [ 1 ]		1014930	0					
ANR	1014964	PtrMemberAccess	req -> input_line		1014930	0					
ANR	1014965	Identifier	req		1014930	0					
ANR	1014966	Identifier	input_line		1014930	1					
ANR	1014967	PrimaryExpression	1		1014930	1					
ANR	1014968	Argument	& reqid		1014930	1					
ANR	1014969	UnaryOperationExpression	& reqid		1014930	0					
ANR	1014970	UnaryOperator	&		1014930	0					
ANR	1014971	Identifier	reqid		1014930	1					
ANR	1014972	ExpressionStatement	"process_string_arg ( req -> input_line [ 2 ] , & service )"	1514:1:41520:41570	1014930	4	True				
ANR	1014973	CallExpression	"process_string_arg ( req -> input_line [ 2 ] , & service )"		1014930	0					
ANR	1014974	Callee	process_string_arg		1014930	0					
ANR	1014975	Identifier	process_string_arg		1014930	0					
ANR	1014976	ArgumentList	req -> input_line [ 2 ]		1014930	1					
ANR	1014977	Argument	req -> input_line [ 2 ]		1014930	0					
ANR	1014978	ArrayIndexing	req -> input_line [ 2 ]		1014930	0					
ANR	1014979	PtrMemberAccess	req -> input_line		1014930	0					
ANR	1014980	Identifier	req		1014930	0					
ANR	1014981	Identifier	input_line		1014930	1					
ANR	1014982	PrimaryExpression	2		1014930	1					
ANR	1014983	Argument	& service		1014930	1					
ANR	1014984	UnaryOperationExpression	& service		1014930	0					
ANR	1014985	UnaryOperator	&		1014930	0					
ANR	1014986	Identifier	service		1014930	1					
ANR	1014987	ExpressionStatement	"process_string_arg ( req -> input_line [ 3 ] , & jobnum_str )"	1515:1:41573:41626	1014930	5	True				
ANR	1014988	CallExpression	"process_string_arg ( req -> input_line [ 3 ] , & jobnum_str )"		1014930	0					
ANR	1014989	Callee	process_string_arg		1014930	0					
ANR	1014990	Identifier	process_string_arg		1014930	0					
ANR	1014991	ArgumentList	req -> input_line [ 3 ]		1014930	1					
ANR	1014992	Argument	req -> input_line [ 3 ]		1014930	0					
ANR	1014993	ArrayIndexing	req -> input_line [ 3 ]		1014930	0					
ANR	1014994	PtrMemberAccess	req -> input_line		1014930	0					
ANR	1014995	Identifier	req		1014930	0					
ANR	1014996	Identifier	input_line		1014930	1					
ANR	1014997	PrimaryExpression	3		1014930	1					
ANR	1014998	Argument	& jobnum_str		1014930	1					
ANR	1014999	UnaryOperationExpression	& jobnum_str		1014930	0					
ANR	1015000	UnaryOperator	&		1014930	0					
ANR	1015001	Identifier	jobnum_str		1014930	1					
ANR	1015002	IdentifierDeclStatement	AbsCreamProxy :: InfoArrayResult iar ;	1517:1:41631:41665	1014930	6	True				
ANR	1015003	IdentifierDecl	iar		1014930	0					
ANR	1015004	IdentifierDeclType	AbsCreamProxy :: InfoArrayResult		1014930	0					
ANR	1015005	Identifier	iar		1014930	1					
ANR	1015006	TryStatement	try		1014930	7					
ANR	1015007	CompoundStatement		28:2:868:1129	1014930	0					
ANR	1015008	IfStatement	if ( jobnum_str == NULL )		1014930	0					
ANR	1015009	Condition	jobnum_str == NULL		1014930	0					
ANR	1015010	EqualityExpression	jobnum_str == NULL		1014930	0		==			
ANR	1015011	Identifier	jobnum_str		1014930	0					
ANR	1015012	Identifier	NULL		1014930	1					
ANR	1015013	CompoundStatement		16:26:487:487	1014930	1					
ANR	1015014	ThrowStatement	"throw runtime_error ( ""info of all jobs not supported"" ) ;"		1014930	0					
ANR	1015015	CallExpression	"runtime_error ( ""info of all jobs not supported"" )"		1014930	0					
ANR	1015016	Callee	runtime_error		1014930	0					
ANR	1015017	Identifier	runtime_error		1014930	0					
ANR	1015018	ArgumentList	"""info of all jobs not supported"""		1014930	1					
ANR	1015019	Argument	"""info of all jobs not supported"""		1014930	0					
ANR	1015020	PrimaryExpression	"""info of all jobs not supported"""		1014930	0					
ANR	1015021	IdentifierDeclStatement	vector < JobIdWrapper > jv ;		1014930	1					
ANR	1015022	IdentifierDecl	jv		1014930	0					
ANR	1015023	IdentifierDeclType	vector < JobIdWrapper >		1014930	0					
ANR	1015024	Identifier	jv		1014930	1					
ANR	1015025	IdentifierDeclStatement	int jobnum = atoi ( jobnum_str ) ;		1014930	2					
ANR	1015026	IdentifierDecl	jobnum = atoi ( jobnum_str )		1014930	0					
ANR	1015027	IdentifierDeclType	int		1014930	0					
ANR	1015028	Identifier	jobnum		1014930	1					
ANR	1015029	AssignmentExpression	jobnum = atoi ( jobnum_str )		1014930	2		=			
ANR	1015030	Identifier	jobnum		1014930	0					
ANR	1015031	CallExpression	atoi ( jobnum_str )		1014930	1					
ANR	1015032	Callee	atoi		1014930	0					
ANR	1015033	Identifier	atoi		1014930	0					
ANR	1015034	ArgumentList	jobnum_str		1014930	1					
ANR	1015035	Argument	jobnum_str		1014930	0					
ANR	1015036	Identifier	jobnum_str		1014930	0					
ANR	1015037	ForStatement	for ( int i = 0 ; i < jobnum ; i ++ )		1014930	3					
ANR	1015038	ForInit	int i = 0 ;		1014930	0					
ANR	1015039	IdentifierDeclStatement	int i = 0 ;		1014930	0					
ANR	1015040	IdentifierDecl	i = 0		1014930	0					
ANR	1015041	IdentifierDeclType	int		1014930	0					
ANR	1015042	Identifier	i		1014930	1					
ANR	1015043	AssignmentExpression	i = 0		1014930	2		=			
ANR	1015044	Identifier	i		1014930	0					
ANR	1015045	PrimaryExpression	0		1014930	1					
ANR	1015046	Condition	i < jobnum		1014930	1					
ANR	1015047	RelationalExpression	i < jobnum		1014930	0		<			
ANR	1015048	Identifier	i		1014930	0					
ANR	1015049	Identifier	jobnum		1014930	1					
ANR	1015050	PostIncDecOperationExpression	i ++		1014930	2					
ANR	1015051	Identifier	i		1014930	0					
ANR	1015052	IncDec	++		1014930	1					
ANR	1015053	CompoundStatement		21:36:649:649	1014930	3					
ANR	1015054	ExpressionStatement	"process_string_arg ( req -> input_line [ i + 4 ] , & jobid )"		1014930	0					
ANR	1015055	CallExpression	"process_string_arg ( req -> input_line [ i + 4 ] , & jobid )"		1014930	0					
ANR	1015056	Callee	process_string_arg		1014930	0					
ANR	1015057	Identifier	process_string_arg		1014930	0					
ANR	1015058	ArgumentList	req -> input_line [ i + 4 ]		1014930	1					
ANR	1015059	Argument	req -> input_line [ i + 4 ]		1014930	0					
ANR	1015060	ArrayIndexing	req -> input_line [ i + 4 ]		1014930	0					
ANR	1015061	PtrMemberAccess	req -> input_line		1014930	0					
ANR	1015062	Identifier	req		1014930	0					
ANR	1015063	Identifier	input_line		1014930	1					
ANR	1015064	AdditiveExpression	i + 4		1014930	1		+			
ANR	1015065	Identifier	i		1014930	0					
ANR	1015066	PrimaryExpression	4		1014930	1					
ANR	1015067	Argument	& jobid		1014930	1					
ANR	1015068	UnaryOperationExpression	& jobid		1014930	0					
ANR	1015069	UnaryOperator	&		1014930	0					
ANR	1015070	Identifier	jobid		1014930	1					
ANR	1015071	Statement	jv		1014930	1					
ANR	1015072	Statement	.		1014930	2					
ANR	1015073	Statement	push_back		1014930	3					
ANR	1015074	Statement	(		1014930	4					
ANR	1015075	Statement	JobIdWrapper		1014930	5					
ANR	1015076	Statement	(		1014930	6					
ANR	1015077	Statement	jobid		1014930	7					
ANR	1015078	Statement	","		1014930	8					
ANR	1015079	Statement	service		1014930	9					
ANR	1015080	Statement	","		1014930	10					
ANR	1015081	Statement	vector		1014930	11					
ANR	1015082	Statement	<		1014930	12					
ANR	1015083	Statement	JobPropertyWrapper		1014930	13					
ANR	1015084	Statement	>		1014930	14					
ANR	1015085	Statement	(		1014930	15					
ANR	1015086	Statement	)		1014930	16					
ANR	1015087	Statement	)		1014930	17					
ANR	1015088	Statement	)		1014930	18					
ANR	1015089	ExpressionStatement			1014930	19					
ANR	1015090	IdentifierDeclStatement	vector < string > sv ;		1014930	4					
ANR	1015091	IdentifierDecl	sv		1014930	0					
ANR	1015092	IdentifierDeclType	vector < string >		1014930	0					
ANR	1015093	Identifier	sv		1014930	1					
ANR	1015094	IdentifierDeclStatement	"JobFilterWrapper jfw ( jv , sv , - 1 , - 1 , """" , """" ) ;"		1014930	5					
ANR	1015095	IdentifierDecl	"jfw ( jv , sv , - 1 , - 1 , """" , """" )"		1014930	0					
ANR	1015096	IdentifierDeclType	JobFilterWrapper		1014930	0					
ANR	1015097	Identifier	jfw		1014930	1					
ANR	1015098	Expression	"jv , sv , - 1 , - 1 , """" , """""		1014930	2					
ANR	1015099	Identifier	jv		1014930	0					
ANR	1015100	Expression	"sv , - 1 , - 1 , """" , """""		1014930	1					
ANR	1015101	Identifier	sv		1014930	0					
ANR	1015102	Expression	"- 1 , - 1 , """" , """""		1014930	1					
ANR	1015103	UnaryOperationExpression	- 1		1014930	0					
ANR	1015104	UnaryOperator	-		1014930	0					
ANR	1015105	PrimaryExpression	1		1014930	1					
ANR	1015106	Expression	"- 1 , """" , """""		1014930	1					
ANR	1015107	UnaryOperationExpression	- 1		1014930	0					
ANR	1015108	UnaryOperator	-		1014930	0					
ANR	1015109	PrimaryExpression	1		1014930	1					
ANR	1015110	Expression	""""" , """""		1014930	1					
ANR	1015111	PrimaryExpression	""""""		1014930	0					
ANR	1015112	PrimaryExpression	""""""		1014930	1					
ANR	1015113	ExpressionStatement	"cp = CreamProxyFactory :: make_CreamProxyInfo ( & jfw , & iar , DEFAULT_TIMEOUT )"		1014930	6					
ANR	1015114	AssignmentExpression	"cp = CreamProxyFactory :: make_CreamProxyInfo ( & jfw , & iar , DEFAULT_TIMEOUT )"		1014930	0		=			
ANR	1015115	Identifier	cp		1014930	0					
ANR	1015116	CallExpression	"CreamProxyFactory :: make_CreamProxyInfo ( & jfw , & iar , DEFAULT_TIMEOUT )"		1014930	1					
ANR	1015117	Callee	CreamProxyFactory :: make_CreamProxyInfo		1014930	0					
ANR	1015118	Identifier	CreamProxyFactory :: make_CreamProxyInfo		1014930	0					
ANR	1015119	ArgumentList	& jfw		1014930	1					
ANR	1015120	Argument	& jfw		1014930	0					
ANR	1015121	UnaryOperationExpression	& jfw		1014930	0					
ANR	1015122	UnaryOperator	&		1014930	0					
ANR	1015123	Identifier	jfw		1014930	1					
ANR	1015124	Argument	& iar		1014930	1					
ANR	1015125	UnaryOperationExpression	& iar		1014930	0					
ANR	1015126	UnaryOperator	&		1014930	0					
ANR	1015127	Identifier	iar		1014930	1					
ANR	1015128	Argument	DEFAULT_TIMEOUT		1014930	2					
ANR	1015129	Identifier	DEFAULT_TIMEOUT		1014930	0					
ANR	1015130	ExpressionStatement	check_for_factory_error ( cp )		1014930	7					
ANR	1015131	CallExpression	check_for_factory_error ( cp )		1014930	0					
ANR	1015132	Callee	check_for_factory_error		1014930	0					
ANR	1015133	Identifier	check_for_factory_error		1014930	0					
ANR	1015134	ArgumentList	cp		1014930	1					
ANR	1015135	Argument	cp		1014930	0					
ANR	1015136	Identifier	cp		1014930	0					
ANR	1015137	ExpressionStatement	cp -> setCredential ( req -> proxy . c_str ( ) )		1014930	8					
ANR	1015138	CallExpression	cp -> setCredential ( req -> proxy . c_str ( ) )		1014930	0					
ANR	1015139	Callee	cp -> setCredential		1014930	0					
ANR	1015140	PtrMemberAccess	cp -> setCredential		1014930	0					
ANR	1015141	Identifier	cp		1014930	0					
ANR	1015142	Identifier	setCredential		1014930	1					
ANR	1015143	ArgumentList	req -> proxy . c_str ( )		1014930	1					
ANR	1015144	Argument	req -> proxy . c_str ( )		1014930	0					
ANR	1015145	CallExpression	req -> proxy . c_str ( )		1014930	0					
ANR	1015146	Callee	req -> proxy . c_str		1014930	0					
ANR	1015147	MemberAccess	req -> proxy . c_str		1014930	0					
ANR	1015148	PtrMemberAccess	req -> proxy		1014930	0					
ANR	1015149	Identifier	req		1014930	0					
ANR	1015150	Identifier	proxy		1014930	1					
ANR	1015151	Identifier	c_str		1014930	1					
ANR	1015152	ArgumentList			1014930	1					
ANR	1015153	ExpressionStatement	cp -> execute ( service )		1014930	9					
ANR	1015154	CallExpression	cp -> execute ( service )		1014930	0					
ANR	1015155	Callee	cp -> execute		1014930	0					
ANR	1015156	PtrMemberAccess	cp -> execute		1014930	0					
ANR	1015157	Identifier	cp		1014930	0					
ANR	1015158	Identifier	execute		1014930	1					
ANR	1015159	ArgumentList	service		1014930	1					
ANR	1015160	Argument	service		1014930	0					
ANR	1015161	Identifier	service		1014930	0					
ANR	1015162	ForStatement	for ( AbsCreamProxy :: InfoArrayResult :: iterator i = iar . begin ( ) ; i != iar . end ( ) ; i ++ )		1014930	10					
ANR	1015163	ForInit	AbsCreamProxy :: InfoArrayResult :: iterator i = iar . begin ( ) ;		1014930	0					
ANR	1015164	IdentifierDeclStatement	AbsCreamProxy :: InfoArrayResult :: iterator i = iar . begin ( ) ;		1014930	0					
ANR	1015165	IdentifierDecl	i = iar . begin ( )		1014930	0					
ANR	1015166	IdentifierDeclType	AbsCreamProxy :: InfoArrayResult :: iterator		1014930	0					
ANR	1015167	Identifier	i		1014930	1					
ANR	1015168	AssignmentExpression	i = iar . begin ( )		1014930	2		=			
ANR	1015169	Identifier	i		1014930	0					
ANR	1015170	CallExpression	iar . begin ( )		1014930	1					
ANR	1015171	Callee	iar . begin		1014930	0					
ANR	1015172	MemberAccess	iar . begin		1014930	0					
ANR	1015173	Identifier	iar		1014930	0					
ANR	1015174	Identifier	begin		1014930	1					
ANR	1015175	ArgumentList			1014930	1					
ANR	1015176	Condition	i != iar . end ( )		1014930	1					
ANR	1015177	EqualityExpression	i != iar . end ( )		1014930	0		!=			
ANR	1015178	Identifier	i		1014930	0					
ANR	1015179	CallExpression	iar . end ( )		1014930	1					
ANR	1015180	Callee	iar . end		1014930	0					
ANR	1015181	MemberAccess	iar . end		1014930	0					
ANR	1015182	Identifier	iar		1014930	0					
ANR	1015183	Identifier	end		1014930	1					
ANR	1015184	ArgumentList			1014930	1					
ANR	1015185	PostIncDecOperationExpression	i ++		1014930	2					
ANR	1015186	Identifier	i		1014930	0					
ANR	1015187	IncDec	++		1014930	1					
ANR	1015188	CompoundStatement		43:2:1460:1460	1014930	3					
ANR	1015189	Statement	if		1014930	0					
ANR	1015190	Statement	(		1014930	1					
ANR	1015191	Statement	i		1014930	2					
ANR	1015192	Statement	->		1014930	3					
ANR	1015193	Statement	second		1014930	4					
ANR	1015194	Statement	.		1014930	5					
ANR	1015195	Statement	get		1014930	6					
ANR	1015196	Statement	<		1014930	7					
ANR	1015197	Statement	0		1014930	8					
ANR	1015198	Statement	>		1014930	9					
ANR	1015199	Statement	(		1014930	10					
ANR	1015200	Statement	)		1014930	11					
ANR	1015201	Statement	!=		1014930	12					
ANR	1015202	Statement	JobInfoWrapper		1014930	13					
ANR	1015203	Statement	::		1014930	14					
ANR	1015204	Statement	OK		1014930	15					
ANR	1015205	Statement	)		1014930	16					
ANR	1015206	CompoundStatement		44:49:1511:1511	1014930	17					
ANR	1015207	Statement	throw		1014930	0					
ANR	1015208	Statement	runtime_error		1014930	1					
ANR	1015209	Statement	(		1014930	2					
ANR	1015210	Statement	i		1014930	3					
ANR	1015211	Statement	->		1014930	4					
ANR	1015212	Statement	second		1014930	5					
ANR	1015213	Statement	.		1014930	6					
ANR	1015214	Statement	get		1014930	7					
ANR	1015215	Statement	<		1014930	8					
ANR	1015216	Statement	2		1014930	9					
ANR	1015217	Statement	>		1014930	10					
ANR	1015218	Statement	(		1014930	11					
ANR	1015219	Statement	)		1014930	12					
ANR	1015220	Statement	)		1014930	13					
ANR	1015221	ExpressionStatement			1014930	14					
ANR	1015222	Statement	delete		1014930	11					
ANR	1015223	ExpressionStatement	cp		1014930	12					
ANR	1015224	Identifier	cp		1014930	0					
ANR	1015225	CatchList			1014930	1					
ANR	1015226	CatchStatement	catch ( std :: exception & ex )		1014930	0					
ANR	1015227	Identifier	ex		1014930	0					
ANR	1015228	CompoundStatement		52:2:1627:1663	1014930	1					
ANR	1015229	Statement	delete	1554:2:42827:42832	1014930	0	True				
ANR	1015230	ExpressionStatement	cp	1554:9:42834:42836	1014930	1	True				
ANR	1015231	Identifier	cp		1014930	0					
ANR	1015232	IdentifierDeclStatement	char * msg = escape_spaces ( ex . what ( ) ) ;	1555:2:42840:42876	1014930	2	True				
ANR	1015233	IdentifierDecl	* msg = escape_spaces ( ex . what ( ) )		1014930	0					
ANR	1015234	IdentifierDeclType	char *		1014930	0					
ANR	1015235	Identifier	msg		1014930	1					
ANR	1015236	AssignmentExpression	* msg = escape_spaces ( ex . what ( ) )		1014930	2		=			
ANR	1015237	Identifier	msg		1014930	0					
ANR	1015238	CallExpression	escape_spaces ( ex . what ( ) )		1014930	1					
ANR	1015239	Callee	escape_spaces		1014930	0					
ANR	1015240	Identifier	escape_spaces		1014930	0					
ANR	1015241	ArgumentList	ex . what ( )		1014930	1					
ANR	1015242	Argument	ex . what ( )		1014930	0					
ANR	1015243	CallExpression	ex . what ( )		1014930	0					
ANR	1015244	Callee	ex . what		1014930	0					
ANR	1015245	MemberAccess	ex . what		1014930	0					
ANR	1015246	Identifier	ex		1014930	0					
ANR	1015247	Identifier	what		1014930	1					
ANR	1015248	ArgumentList			1014930	1					
ANR	1015249	ExpressionStatement	"result_line = ( string ) reqid + "" CREAM_Job_Info\\\\ Error:\\\\ "" + msg"	1556:2:42880:42945	1014930	3	True				
ANR	1015250	AssignmentExpression	"result_line = ( string ) reqid + "" CREAM_Job_Info\\\\ Error:\\\\ "" + msg"		1014930	0		=			
ANR	1015251	Identifier	result_line		1014930	0					
ANR	1015252	AdditiveExpression	"( string ) reqid + "" CREAM_Job_Info\\\\ Error:\\\\ "" + msg"		1014930	1		+			
ANR	1015253	CastExpression	( string ) reqid		1014930	0					
ANR	1015254	CastTarget	string		1014930	0					
ANR	1015255	Identifier	reqid		1014930	1					
ANR	1015256	AdditiveExpression	""" CREAM_Job_Info\\\\ Error:\\\\ "" + msg"		1014930	1		+			
ANR	1015257	PrimaryExpression	""" CREAM_Job_Info\\\\ Error:\\\\ """		1014930	0					
ANR	1015258	Identifier	msg		1014930	1					
ANR	1015259	ExpressionStatement	enqueue_result ( result_line )	1557:2:42949:42976	1014930	4	True				
ANR	1015260	CallExpression	enqueue_result ( result_line )		1014930	0					
ANR	1015261	Callee	enqueue_result		1014930	0					
ANR	1015262	Identifier	enqueue_result		1014930	0					
ANR	1015263	ArgumentList	result_line		1014930	1					
ANR	1015264	Argument	result_line		1014930	0					
ANR	1015265	Identifier	result_line		1014930	0					
ANR	1015266	ExpressionStatement	free ( msg )	1558:2:42980:42989	1014930	5	True				
ANR	1015267	CallExpression	free ( msg )		1014930	0					
ANR	1015268	Callee	free		1014930	0					
ANR	1015269	Identifier	free		1014930	0					
ANR	1015270	ArgumentList	msg		1014930	1					
ANR	1015271	Argument	msg		1014930	0					
ANR	1015272	Identifier	msg		1014930	0					
ANR	1015273	ReturnStatement	return 1 ;	1560:2:42996:43004	1014930	6	True				
ANR	1015274	PrimaryExpression	1		1014930	0					
ANR	1015275	ReturnStatement	return 0 ;	1565:1:43067:43075	1014930	8	True				
ANR	1015276	PrimaryExpression	0		1014930	0					
ANR	1015277	ReturnType	int		1014930	1					
ANR	1015278	Identifier	thread_cream_job_info		1014930	2					
ANR	1015279	ParameterList	Request * req		1014930	3					
ANR	1015280	Parameter	Request * req	1503:27:41197:41208	1014930	0	True				
ANR	1015281	ParameterType	Request *		1014930	0					
ANR	1015282	Identifier	req		1014930	1					
ANR	1015283	CFGEntryNode	ENTRY		1014930		True				
ANR	1015284	CFGExitNode	EXIT		1014930		True				
ANR	1015285	CFGErrorNode	ERROR		1014930		True				
ANR	1015286	Symbol	& reqid		1014930						
ANR	1015287	Symbol	NULL		1014930						
ANR	1015288	Symbol	* req		1014930						
ANR	1015289	Symbol	& service		1014930						
ANR	1015290	Symbol	& jobnum_str		1014930						
ANR	1015291	Symbol	cp		1014930						
ANR	1015292	Symbol	reqid		1014930						
ANR	1015293	Symbol	result_line		1014930						
ANR	1015294	Symbol	jobid		1014930						
ANR	1015295	Symbol	jobnum_str		1014930						
ANR	1015296	Symbol	* * req		1014930						
ANR	1015297	Symbol	service		1014930						
ANR	1015298	Symbol	req -> input_line		1014930						
ANR	1015299	Symbol	iar		1014930						
ANR	1015300	Symbol	* req -> input_line		1014930						
ANR	1015301	Symbol	req		1014930						
ANR	1015302	Function	handle_cream_job_list	1573:0:43287:43497							
ANR	1015303	FunctionDef	handle_cream_job_list (char * * input_line)		1015302	0					
ANR	1015304	CompoundStatement		1574:0:43335:43497	1015302	0					
ANR	1015305	IfStatement	if ( count_args ( input_line ) != 3 )		1015302	0					
ANR	1015306	Condition	count_args ( input_line ) != 3	1575:6:43343:43371	1015302	0	True				
ANR	1015307	EqualityExpression	count_args ( input_line ) != 3		1015302	0		!=			
ANR	1015308	CallExpression	count_args ( input_line )		1015302	0					
ANR	1015309	Callee	count_args		1015302	0					
ANR	1015310	Identifier	count_args		1015302	0					
ANR	1015311	ArgumentList	input_line		1015302	1					
ANR	1015312	Argument	input_line		1015302	0					
ANR	1015313	Identifier	input_line		1015302	0					
ANR	1015314	PrimaryExpression	3		1015302	1					
ANR	1015315	CompoundStatement		2:38:39:39	1015302	1					
ANR	1015316	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	1576:2:43379:43400	1015302	0	True				
ANR	1015317	CallExpression	HANDLE_SYNTAX_ERROR ( )		1015302	0					
ANR	1015318	Callee	HANDLE_SYNTAX_ERROR		1015302	0					
ANR	1015319	Identifier	HANDLE_SYNTAX_ERROR		1015302	0					
ANR	1015320	ArgumentList			1015302	1					
ANR	1015321	ExpressionStatement	"enqueue_request ( input_line , thread_cream_job_list )"	1579:1:43407:43459	1015302	1	True				
ANR	1015322	CallExpression	"enqueue_request ( input_line , thread_cream_job_list )"		1015302	0					
ANR	1015323	Callee	enqueue_request		1015302	0					
ANR	1015324	Identifier	enqueue_request		1015302	0					
ANR	1015325	ArgumentList	input_line		1015302	1					
ANR	1015326	Argument	input_line		1015302	0					
ANR	1015327	Identifier	input_line		1015302	0					
ANR	1015328	Argument	thread_cream_job_list		1015302	1					
ANR	1015329	Identifier	thread_cream_job_list		1015302	0					
ANR	1015330	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	1581:1:43463:43481	1015302	2	True				
ANR	1015331	CallExpression	"gahp_printf ( ""S\\n"" )"		1015302	0					
ANR	1015332	Callee	gahp_printf		1015302	0					
ANR	1015333	Identifier	gahp_printf		1015302	0					
ANR	1015334	ArgumentList	"""S\\n"""		1015302	1					
ANR	1015335	Argument	"""S\\n"""		1015302	0					
ANR	1015336	PrimaryExpression	"""S\\n"""		1015302	0					
ANR	1015337	ReturnStatement	return 0 ;	1583:1:43487:43495	1015302	3	True				
ANR	1015338	PrimaryExpression	0		1015302	0					
ANR	1015339	ReturnType	int		1015302	1					
ANR	1015340	Identifier	handle_cream_job_list		1015302	2					
ANR	1015341	ParameterList	char * * input_line		1015302	3					
ANR	1015342	Parameter	char * * input_line	1573:27:43314:43331	1015302	0	True				
ANR	1015343	ParameterType	char * *		1015302	0					
ANR	1015344	Identifier	input_line		1015302	1					
ANR	1015345	CFGEntryNode	ENTRY		1015302		True				
ANR	1015346	CFGExitNode	EXIT		1015302		True				
ANR	1015347	Symbol	count_args		1015302						
ANR	1015348	Symbol	input_line		1015302						
ANR	1015349	Symbol	thread_cream_job_list		1015302						
ANR	1015350	Function	thread_cream_job_list	1586:0:43500:44499							
ANR	1015351	FunctionDef	thread_cream_job_list (Request * req)		1015350	0					
ANR	1015352	CompoundStatement		1587:0:43542:44499	1015350	0					
ANR	1015353	IdentifierDeclStatement	"char * reqid , * service ;"	1588:1:43545:43566	1015350	0	True				
ANR	1015354	IdentifierDecl	* reqid		1015350	0					
ANR	1015355	IdentifierDeclType	char *		1015350	0					
ANR	1015356	Identifier	reqid		1015350	1					
ANR	1015357	IdentifierDecl	* service		1015350	1					
ANR	1015358	IdentifierDeclType	char *		1015350	0					
ANR	1015359	Identifier	service		1015350	1					
ANR	1015360	IdentifierDeclStatement	"string result_line , temp ;"	1589:1:43569:43593	1015350	1	True				
ANR	1015361	IdentifierDecl	result_line		1015350	0					
ANR	1015362	IdentifierDeclType	string		1015350	0					
ANR	1015363	Identifier	result_line		1015350	1					
ANR	1015364	IdentifierDecl	temp		1015350	1					
ANR	1015365	IdentifierDeclType	string		1015350	0					
ANR	1015366	Identifier	temp		1015350	1					
ANR	1015367	IdentifierDeclStatement	AbsCreamProxy * cp = NULL ;	1590:1:43596:43620	1015350	2	True				
ANR	1015368	IdentifierDecl	* cp = NULL		1015350	0					
ANR	1015369	IdentifierDeclType	AbsCreamProxy *		1015350	0					
ANR	1015370	Identifier	cp		1015350	1					
ANR	1015371	AssignmentExpression	* cp = NULL		1015350	2		=			
ANR	1015372	Identifier	NULL		1015350	0					
ANR	1015373	Identifier	NULL		1015350	1					
ANR	1015374	ExpressionStatement	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"	1592:1:43624:43672	1015350	3	True				
ANR	1015375	CallExpression	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"		1015350	0					
ANR	1015376	Callee	process_string_arg		1015350	0					
ANR	1015377	Identifier	process_string_arg		1015350	0					
ANR	1015378	ArgumentList	req -> input_line [ 1 ]		1015350	1					
ANR	1015379	Argument	req -> input_line [ 1 ]		1015350	0					
ANR	1015380	ArrayIndexing	req -> input_line [ 1 ]		1015350	0					
ANR	1015381	PtrMemberAccess	req -> input_line		1015350	0					
ANR	1015382	Identifier	req		1015350	0					
ANR	1015383	Identifier	input_line		1015350	1					
ANR	1015384	PrimaryExpression	1		1015350	1					
ANR	1015385	Argument	& reqid		1015350	1					
ANR	1015386	UnaryOperationExpression	& reqid		1015350	0					
ANR	1015387	UnaryOperator	&		1015350	0					
ANR	1015388	Identifier	reqid		1015350	1					
ANR	1015389	ExpressionStatement	"process_string_arg ( req -> input_line [ 2 ] , & service )"	1593:1:43675:43725	1015350	4	True				
ANR	1015390	CallExpression	"process_string_arg ( req -> input_line [ 2 ] , & service )"		1015350	0					
ANR	1015391	Callee	process_string_arg		1015350	0					
ANR	1015392	Identifier	process_string_arg		1015350	0					
ANR	1015393	ArgumentList	req -> input_line [ 2 ]		1015350	1					
ANR	1015394	Argument	req -> input_line [ 2 ]		1015350	0					
ANR	1015395	ArrayIndexing	req -> input_line [ 2 ]		1015350	0					
ANR	1015396	PtrMemberAccess	req -> input_line		1015350	0					
ANR	1015397	Identifier	req		1015350	0					
ANR	1015398	Identifier	input_line		1015350	1					
ANR	1015399	PrimaryExpression	2		1015350	1					
ANR	1015400	Argument	& service		1015350	1					
ANR	1015401	UnaryOperationExpression	& service		1015350	0					
ANR	1015402	UnaryOperator	&		1015350	0					
ANR	1015403	Identifier	service		1015350	1					
ANR	1015404	IdentifierDeclStatement	vector < JobIdWrapper > jv ;	1595:1:43729:43752	1015350	5	True				
ANR	1015405	IdentifierDecl	jv		1015350	0					
ANR	1015406	IdentifierDeclType	vector < JobIdWrapper >		1015350	0					
ANR	1015407	Identifier	jv		1015350	1					
ANR	1015408	TryStatement	try		1015350	6					
ANR	1015409	CompoundStatement		10:5:216:216	1015350	0					
ANR	1015410	ExpressionStatement	"cp = CreamProxyFactory :: make_CreamProxyList ( & jv , DEFAULT_TIMEOUT )"		1015350	0					
ANR	1015411	AssignmentExpression	"cp = CreamProxyFactory :: make_CreamProxyList ( & jv , DEFAULT_TIMEOUT )"		1015350	0		=			
ANR	1015412	Identifier	cp		1015350	0					
ANR	1015413	CallExpression	"CreamProxyFactory :: make_CreamProxyList ( & jv , DEFAULT_TIMEOUT )"		1015350	1					
ANR	1015414	Callee	CreamProxyFactory :: make_CreamProxyList		1015350	0					
ANR	1015415	Identifier	CreamProxyFactory :: make_CreamProxyList		1015350	0					
ANR	1015416	ArgumentList	& jv		1015350	1					
ANR	1015417	Argument	& jv		1015350	0					
ANR	1015418	UnaryOperationExpression	& jv		1015350	0					
ANR	1015419	UnaryOperator	&		1015350	0					
ANR	1015420	Identifier	jv		1015350	1					
ANR	1015421	Argument	DEFAULT_TIMEOUT		1015350	1					
ANR	1015422	Identifier	DEFAULT_TIMEOUT		1015350	0					
ANR	1015423	ExpressionStatement	check_for_factory_error ( cp )		1015350	1					
ANR	1015424	CallExpression	check_for_factory_error ( cp )		1015350	0					
ANR	1015425	Callee	check_for_factory_error		1015350	0					
ANR	1015426	Identifier	check_for_factory_error		1015350	0					
ANR	1015427	ArgumentList	cp		1015350	1					
ANR	1015428	Argument	cp		1015350	0					
ANR	1015429	Identifier	cp		1015350	0					
ANR	1015430	ExpressionStatement	cp -> setCredential ( req -> proxy . c_str ( ) )		1015350	2					
ANR	1015431	CallExpression	cp -> setCredential ( req -> proxy . c_str ( ) )		1015350	0					
ANR	1015432	Callee	cp -> setCredential		1015350	0					
ANR	1015433	PtrMemberAccess	cp -> setCredential		1015350	0					
ANR	1015434	Identifier	cp		1015350	0					
ANR	1015435	Identifier	setCredential		1015350	1					
ANR	1015436	ArgumentList	req -> proxy . c_str ( )		1015350	1					
ANR	1015437	Argument	req -> proxy . c_str ( )		1015350	0					
ANR	1015438	CallExpression	req -> proxy . c_str ( )		1015350	0					
ANR	1015439	Callee	req -> proxy . c_str		1015350	0					
ANR	1015440	MemberAccess	req -> proxy . c_str		1015350	0					
ANR	1015441	PtrMemberAccess	req -> proxy		1015350	0					
ANR	1015442	Identifier	req		1015350	0					
ANR	1015443	Identifier	proxy		1015350	1					
ANR	1015444	Identifier	c_str		1015350	1					
ANR	1015445	ArgumentList			1015350	1					
ANR	1015446	ExpressionStatement	cp -> execute ( service )		1015350	3					
ANR	1015447	CallExpression	cp -> execute ( service )		1015350	0					
ANR	1015448	Callee	cp -> execute		1015350	0					
ANR	1015449	PtrMemberAccess	cp -> execute		1015350	0					
ANR	1015450	Identifier	cp		1015350	0					
ANR	1015451	Identifier	execute		1015350	1					
ANR	1015452	ArgumentList	service		1015350	1					
ANR	1015453	Argument	service		1015350	0					
ANR	1015454	Identifier	service		1015350	0					
ANR	1015455	Statement	delete		1015350	4					
ANR	1015456	ExpressionStatement	cp		1015350	5					
ANR	1015457	Identifier	cp		1015350	0					
ANR	1015458	CatchList			1015350	1					
ANR	1015459	CatchStatement	catch ( std :: exception & ex )		1015350	0					
ANR	1015460	Identifier	ex		1015350	0					
ANR	1015461	CompoundStatement		20:2:456:492	1015350	1					
ANR	1015462	Statement	delete	1605:2:43986:43991	1015350	0	True				
ANR	1015463	ExpressionStatement	cp	1605:9:43993:43995	1015350	1	True				
ANR	1015464	Identifier	cp		1015350	0					
ANR	1015465	IdentifierDeclStatement	char * msg = escape_spaces ( ex . what ( ) ) ;	1606:2:43999:44035	1015350	2	True				
ANR	1015466	IdentifierDecl	* msg = escape_spaces ( ex . what ( ) )		1015350	0					
ANR	1015467	IdentifierDeclType	char *		1015350	0					
ANR	1015468	Identifier	msg		1015350	1					
ANR	1015469	AssignmentExpression	* msg = escape_spaces ( ex . what ( ) )		1015350	2		=			
ANR	1015470	Identifier	msg		1015350	0					
ANR	1015471	CallExpression	escape_spaces ( ex . what ( ) )		1015350	1					
ANR	1015472	Callee	escape_spaces		1015350	0					
ANR	1015473	Identifier	escape_spaces		1015350	0					
ANR	1015474	ArgumentList	ex . what ( )		1015350	1					
ANR	1015475	Argument	ex . what ( )		1015350	0					
ANR	1015476	CallExpression	ex . what ( )		1015350	0					
ANR	1015477	Callee	ex . what		1015350	0					
ANR	1015478	MemberAccess	ex . what		1015350	0					
ANR	1015479	Identifier	ex		1015350	0					
ANR	1015480	Identifier	what		1015350	1					
ANR	1015481	ArgumentList			1015350	1					
ANR	1015482	ExpressionStatement	"result_line = ( string ) reqid + "" CREAM_Job_List\\\\ Error:\\\\ "" + msg"	1607:2:44039:44104	1015350	3	True				
ANR	1015483	AssignmentExpression	"result_line = ( string ) reqid + "" CREAM_Job_List\\\\ Error:\\\\ "" + msg"		1015350	0		=			
ANR	1015484	Identifier	result_line		1015350	0					
ANR	1015485	AdditiveExpression	"( string ) reqid + "" CREAM_Job_List\\\\ Error:\\\\ "" + msg"		1015350	1		+			
ANR	1015486	CastExpression	( string ) reqid		1015350	0					
ANR	1015487	CastTarget	string		1015350	0					
ANR	1015488	Identifier	reqid		1015350	1					
ANR	1015489	AdditiveExpression	""" CREAM_Job_List\\\\ Error:\\\\ "" + msg"		1015350	1		+			
ANR	1015490	PrimaryExpression	""" CREAM_Job_List\\\\ Error:\\\\ """		1015350	0					
ANR	1015491	Identifier	msg		1015350	1					
ANR	1015492	ExpressionStatement	enqueue_result ( result_line )	1608:2:44108:44135	1015350	4	True				
ANR	1015493	CallExpression	enqueue_result ( result_line )		1015350	0					
ANR	1015494	Callee	enqueue_result		1015350	0					
ANR	1015495	Identifier	enqueue_result		1015350	0					
ANR	1015496	ArgumentList	result_line		1015350	1					
ANR	1015497	Argument	result_line		1015350	0					
ANR	1015498	Identifier	result_line		1015350	0					
ANR	1015499	ExpressionStatement	free ( msg )	1609:2:44139:44148	1015350	5	True				
ANR	1015500	CallExpression	free ( msg )		1015350	0					
ANR	1015501	Callee	free		1015350	0					
ANR	1015502	Identifier	free		1015350	0					
ANR	1015503	ArgumentList	msg		1015350	1					
ANR	1015504	Argument	msg		1015350	0					
ANR	1015505	Identifier	msg		1015350	0					
ANR	1015506	ReturnStatement	return 1 ;	1611:2:44157:44165	1015350	6	True				
ANR	1015507	PrimaryExpression	1		1015350	0					
ANR	1015508	ExpressionStatement	"result_line = ( string ) reqid + "" NULL"""	1614:1:44173:44210	1015350	7	True				
ANR	1015509	AssignmentExpression	"result_line = ( string ) reqid + "" NULL"""		1015350	0		=			
ANR	1015510	Identifier	result_line		1015350	0					
ANR	1015511	AdditiveExpression	"( string ) reqid + "" NULL"""		1015350	1		+			
ANR	1015512	CastExpression	( string ) reqid		1015350	0					
ANR	1015513	CastTarget	string		1015350	0					
ANR	1015514	Identifier	reqid		1015350	1					
ANR	1015515	PrimaryExpression	""" NULL"""		1015350	1					
ANR	1015516	IdentifierDeclStatement	int cnt = 0 ;	1616:1:44215:44226	1015350	8	True				
ANR	1015517	IdentifierDecl	cnt = 0		1015350	0					
ANR	1015518	IdentifierDeclType	int		1015350	0					
ANR	1015519	Identifier	cnt		1015350	1					
ANR	1015520	AssignmentExpression	cnt = 0		1015350	2		=			
ANR	1015521	Identifier	cnt		1015350	0					
ANR	1015522	PrimaryExpression	0		1015350	1					
ANR	1015523	ForStatement	for ( vector < JobIdWrapper > :: iterator i = jv . begin ( ) ; i != jv . end ( ) ; i ++ )		1015350	9					
ANR	1015524	ForInit	vector < JobIdWrapper > :: iterator i = jv . begin ( ) ;	1617:6:44234:44279	1015350	0	True				
ANR	1015525	IdentifierDeclStatement	vector < JobIdWrapper > :: iterator i = jv . begin ( ) ;		1015350	0					
ANR	1015526	IdentifierDecl	i = jv . begin ( )		1015350	0					
ANR	1015527	IdentifierDeclType	vector < JobIdWrapper > :: iterator		1015350	0					
ANR	1015528	Identifier	i		1015350	1					
ANR	1015529	AssignmentExpression	i = jv . begin ( )		1015350	2		=			
ANR	1015530	Identifier	i		1015350	0					
ANR	1015531	CallExpression	jv . begin ( )		1015350	1					
ANR	1015532	Callee	jv . begin		1015350	0					
ANR	1015533	MemberAccess	jv . begin		1015350	0					
ANR	1015534	Identifier	jv		1015350	0					
ANR	1015535	Identifier	begin		1015350	1					
ANR	1015536	ArgumentList			1015350	1					
ANR	1015537	Condition	i != jv . end ( )	1618:6:44287:44299	1015350	1	True				
ANR	1015538	EqualityExpression	i != jv . end ( )		1015350	0		!=			
ANR	1015539	Identifier	i		1015350	0					
ANR	1015540	CallExpression	jv . end ( )		1015350	1					
ANR	1015541	Callee	jv . end		1015350	0					
ANR	1015542	MemberAccess	jv . end		1015350	0					
ANR	1015543	Identifier	jv		1015350	0					
ANR	1015544	Identifier	end		1015350	1					
ANR	1015545	ArgumentList			1015350	1					
ANR	1015546	PostIncDecOperationExpression	i ++	1619:6:44308:44310	1015350	2	True				
ANR	1015547	Identifier	i		1015350	0					
ANR	1015548	IncDec	++		1015350	1					
ANR	1015549	CompoundStatement		34:1:771:771	1015350	3					
ANR	1015550	ExpressionStatement	temp += sp + i -> getCreamJobID ( )	1621:2:44318:44349	1015350	0	True				
ANR	1015551	AssignmentExpression	temp += sp + i -> getCreamJobID ( )		1015350	0		+=			
ANR	1015552	Identifier	temp		1015350	0					
ANR	1015553	AdditiveExpression	sp + i -> getCreamJobID ( )		1015350	1		+			
ANR	1015554	Identifier	sp		1015350	0					
ANR	1015555	CallExpression	i -> getCreamJobID ( )		1015350	1					
ANR	1015556	Callee	i -> getCreamJobID		1015350	0					
ANR	1015557	PtrMemberAccess	i -> getCreamJobID		1015350	0					
ANR	1015558	Identifier	i		1015350	0					
ANR	1015559	Identifier	getCreamJobID		1015350	1					
ANR	1015560	ArgumentList			1015350	1					
ANR	1015561	ExpressionStatement	cnt ++	1622:2:44353:44358	1015350	1	True				
ANR	1015562	PostIncDecOperationExpression	cnt ++		1015350	0					
ANR	1015563	Identifier	cnt		1015350	0					
ANR	1015564	IncDec	++		1015350	1					
ANR	1015565	IdentifierDeclStatement	char buf [ 10000 ] ;	1625:1:44366:44381	1015350	10	True				
ANR	1015566	IdentifierDecl	buf [ 10000 ]		1015350	0					
ANR	1015567	IdentifierDeclType	char [ 10000 ]		1015350	0					
ANR	1015568	Identifier	buf		1015350	1					
ANR	1015569	PrimaryExpression	10000		1015350	2					
ANR	1015570	ExpressionStatement	"sprintf ( buf , ""%d"" , cnt )"	1627:1:44386:44409	1015350	11	True				
ANR	1015571	CallExpression	"sprintf ( buf , ""%d"" , cnt )"		1015350	0					
ANR	1015572	Callee	sprintf		1015350	0					
ANR	1015573	Identifier	sprintf		1015350	0					
ANR	1015574	ArgumentList	buf		1015350	1					
ANR	1015575	Argument	buf		1015350	0					
ANR	1015576	Identifier	buf		1015350	0					
ANR	1015577	Argument	"""%d"""		1015350	1					
ANR	1015578	PrimaryExpression	"""%d"""		1015350	0					
ANR	1015579	Argument	cnt		1015350	2					
ANR	1015580	Identifier	cnt		1015350	0					
ANR	1015581	ExpressionStatement	result_line += sp + string ( buf ) + temp	1628:1:44414:44452	1015350	12	True				
ANR	1015582	AssignmentExpression	result_line += sp + string ( buf ) + temp		1015350	0		+=			
ANR	1015583	Identifier	result_line		1015350	0					
ANR	1015584	AdditiveExpression	sp + string ( buf ) + temp		1015350	1		+			
ANR	1015585	Identifier	sp		1015350	0					
ANR	1015586	AdditiveExpression	string ( buf ) + temp		1015350	1		+			
ANR	1015587	CallExpression	string ( buf )		1015350	0					
ANR	1015588	Callee	string		1015350	0					
ANR	1015589	Identifier	string		1015350	0					
ANR	1015590	ArgumentList	buf		1015350	1					
ANR	1015591	Argument	buf		1015350	0					
ANR	1015592	Identifier	buf		1015350	0					
ANR	1015593	Identifier	temp		1015350	1					
ANR	1015594	ExpressionStatement	enqueue_result ( result_line )	1630:1:44456:44483	1015350	13	True				
ANR	1015595	CallExpression	enqueue_result ( result_line )		1015350	0					
ANR	1015596	Callee	enqueue_result		1015350	0					
ANR	1015597	Identifier	enqueue_result		1015350	0					
ANR	1015598	ArgumentList	result_line		1015350	1					
ANR	1015599	Argument	result_line		1015350	0					
ANR	1015600	Identifier	result_line		1015350	0					
ANR	1015601	ReturnStatement	return 0 ;	1632:1:44489:44497	1015350	14	True				
ANR	1015602	PrimaryExpression	0		1015350	0					
ANR	1015603	ReturnType	int		1015350	1					
ANR	1015604	Identifier	thread_cream_job_list		1015350	2					
ANR	1015605	ParameterList	Request * req		1015350	3					
ANR	1015606	Parameter	Request * req	1586:27:43527:43538	1015350	0	True				
ANR	1015607	ParameterType	Request *		1015350	0					
ANR	1015608	Identifier	req		1015350	1					
ANR	1015609	CFGEntryNode	ENTRY		1015350		True				
ANR	1015610	CFGExitNode	EXIT		1015350		True				
ANR	1015611	CFGErrorNode	ERROR		1015350		True				
ANR	1015612	Symbol	temp		1015350						
ANR	1015613	Symbol	& reqid		1015350						
ANR	1015614	Symbol	NULL		1015350						
ANR	1015615	Symbol	jv . begin		1015350						
ANR	1015616	Symbol	string		1015350						
ANR	1015617	Symbol	* req		1015350						
ANR	1015618	Symbol	cnt		1015350						
ANR	1015619	Symbol	i		1015350						
ANR	1015620	Symbol	& service		1015350						
ANR	1015621	Symbol	jv		1015350						
ANR	1015622	Symbol	cp		1015350						
ANR	1015623	Symbol	reqid		1015350						
ANR	1015624	Symbol	result_line		1015350						
ANR	1015625	Symbol	* * req		1015350						
ANR	1015626	Symbol	buf		1015350						
ANR	1015627	Symbol	* i		1015350						
ANR	1015628	Symbol	service		1015350						
ANR	1015629	Symbol	i -> getCreamJobID		1015350						
ANR	1015630	Symbol	req -> input_line		1015350						
ANR	1015631	Symbol	jv . end		1015350						
ANR	1015632	Symbol	* req -> input_line		1015350						
ANR	1015633	Symbol	sp		1015350						
ANR	1015634	Symbol	req		1015350						
ANR	1015635	Function	handle_cream_ping	1640:0:44699:44899							
ANR	1015636	FunctionDef	handle_cream_ping (char * * input_line)		1015635	0					
ANR	1015637	CompoundStatement		1641:0:44742:44899	1015635	0					
ANR	1015638	IfStatement	if ( count_args ( input_line ) != 3 )		1015635	0					
ANR	1015639	Condition	count_args ( input_line ) != 3	1642:6:44750:44778	1015635	0	True				
ANR	1015640	EqualityExpression	count_args ( input_line ) != 3		1015635	0		!=			
ANR	1015641	CallExpression	count_args ( input_line )		1015635	0					
ANR	1015642	Callee	count_args		1015635	0					
ANR	1015643	Identifier	count_args		1015635	0					
ANR	1015644	ArgumentList	input_line		1015635	1					
ANR	1015645	Argument	input_line		1015635	0					
ANR	1015646	Identifier	input_line		1015635	0					
ANR	1015647	PrimaryExpression	3		1015635	1					
ANR	1015648	CompoundStatement		2:38:39:39	1015635	1					
ANR	1015649	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	1643:2:44786:44807	1015635	0	True				
ANR	1015650	CallExpression	HANDLE_SYNTAX_ERROR ( )		1015635	0					
ANR	1015651	Callee	HANDLE_SYNTAX_ERROR		1015635	0					
ANR	1015652	Identifier	HANDLE_SYNTAX_ERROR		1015635	0					
ANR	1015653	ArgumentList			1015635	1					
ANR	1015654	ExpressionStatement	"enqueue_request ( input_line , thread_cream_ping )"	1646:1:44814:44862	1015635	1	True				
ANR	1015655	CallExpression	"enqueue_request ( input_line , thread_cream_ping )"		1015635	0					
ANR	1015656	Callee	enqueue_request		1015635	0					
ANR	1015657	Identifier	enqueue_request		1015635	0					
ANR	1015658	ArgumentList	input_line		1015635	1					
ANR	1015659	Argument	input_line		1015635	0					
ANR	1015660	Identifier	input_line		1015635	0					
ANR	1015661	Argument	thread_cream_ping		1015635	1					
ANR	1015662	Identifier	thread_cream_ping		1015635	0					
ANR	1015663	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	1648:1:44867:44885	1015635	2	True				
ANR	1015664	CallExpression	"gahp_printf ( ""S\\n"" )"		1015635	0					
ANR	1015665	Callee	gahp_printf		1015635	0					
ANR	1015666	Identifier	gahp_printf		1015635	0					
ANR	1015667	ArgumentList	"""S\\n"""		1015635	1					
ANR	1015668	Argument	"""S\\n"""		1015635	0					
ANR	1015669	PrimaryExpression	"""S\\n"""		1015635	0					
ANR	1015670	ReturnStatement	return 0 ;	1650:1:44889:44897	1015635	3	True				
ANR	1015671	PrimaryExpression	0		1015635	0					
ANR	1015672	ReturnType	int		1015635	1					
ANR	1015673	Identifier	handle_cream_ping		1015635	2					
ANR	1015674	ParameterList	char * * input_line		1015635	3					
ANR	1015675	Parameter	char * * input_line	1640:23:44722:44738	1015635	0	True				
ANR	1015676	ParameterType	char * *		1015635	0					
ANR	1015677	Identifier	input_line		1015635	1					
ANR	1015678	CFGEntryNode	ENTRY		1015635		True				
ANR	1015679	CFGExitNode	EXIT		1015635		True				
ANR	1015680	Symbol	count_args		1015635						
ANR	1015681	Symbol	input_line		1015635						
ANR	1015682	Symbol	thread_cream_ping		1015635						
ANR	1015683	Function	thread_cream_ping	1653:0:44902:45707							
ANR	1015684	FunctionDef	thread_cream_ping (Request * req)		1015683	0					
ANR	1015685	CompoundStatement		1654:0:44940:45707	1015683	0					
ANR	1015686	IdentifierDeclStatement	"char * reqid , * service ;"	1658:1:45065:45086	1015683	0	True				
ANR	1015687	IdentifierDecl	* reqid		1015683	0					
ANR	1015688	IdentifierDeclType	char *		1015683	0					
ANR	1015689	Identifier	reqid		1015683	1					
ANR	1015690	IdentifierDecl	* service		1015683	1					
ANR	1015691	IdentifierDeclType	char *		1015683	0					
ANR	1015692	Identifier	service		1015683	1					
ANR	1015693	IdentifierDeclStatement	AbsCreamProxy * cp = NULL ;	1659:1:45089:45113	1015683	1	True				
ANR	1015694	IdentifierDecl	* cp = NULL		1015683	0					
ANR	1015695	IdentifierDeclType	AbsCreamProxy *		1015683	0					
ANR	1015696	Identifier	cp		1015683	1					
ANR	1015697	AssignmentExpression	* cp = NULL		1015683	2		=			
ANR	1015698	Identifier	NULL		1015683	0					
ANR	1015699	Identifier	NULL		1015683	1					
ANR	1015700	ExpressionStatement	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"	1661:1:45118:45166	1015683	2	True				
ANR	1015701	CallExpression	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"		1015683	0					
ANR	1015702	Callee	process_string_arg		1015683	0					
ANR	1015703	Identifier	process_string_arg		1015683	0					
ANR	1015704	ArgumentList	req -> input_line [ 1 ]		1015683	1					
ANR	1015705	Argument	req -> input_line [ 1 ]		1015683	0					
ANR	1015706	ArrayIndexing	req -> input_line [ 1 ]		1015683	0					
ANR	1015707	PtrMemberAccess	req -> input_line		1015683	0					
ANR	1015708	Identifier	req		1015683	0					
ANR	1015709	Identifier	input_line		1015683	1					
ANR	1015710	PrimaryExpression	1		1015683	1					
ANR	1015711	Argument	& reqid		1015683	1					
ANR	1015712	UnaryOperationExpression	& reqid		1015683	0					
ANR	1015713	UnaryOperator	&		1015683	0					
ANR	1015714	Identifier	reqid		1015683	1					
ANR	1015715	ExpressionStatement	"process_string_arg ( req -> input_line [ 2 ] , & service )"	1662:1:45169:45219	1015683	3	True				
ANR	1015716	CallExpression	"process_string_arg ( req -> input_line [ 2 ] , & service )"		1015683	0					
ANR	1015717	Callee	process_string_arg		1015683	0					
ANR	1015718	Identifier	process_string_arg		1015683	0					
ANR	1015719	ArgumentList	req -> input_line [ 2 ]		1015683	1					
ANR	1015720	Argument	req -> input_line [ 2 ]		1015683	0					
ANR	1015721	ArrayIndexing	req -> input_line [ 2 ]		1015683	0					
ANR	1015722	PtrMemberAccess	req -> input_line		1015683	0					
ANR	1015723	Identifier	req		1015683	0					
ANR	1015724	Identifier	input_line		1015683	1					
ANR	1015725	PrimaryExpression	2		1015683	1					
ANR	1015726	Argument	& service		1015683	1					
ANR	1015727	UnaryOperationExpression	& service		1015683	0					
ANR	1015728	UnaryOperator	&		1015683	0					
ANR	1015729	Identifier	service		1015683	1					
ANR	1015730	IdentifierDeclStatement	ServiceInfoWrapper siw ;	1664:1:45224:45246	1015683	4	True				
ANR	1015731	IdentifierDecl	siw		1015683	0					
ANR	1015732	IdentifierDeclType	ServiceInfoWrapper		1015683	0					
ANR	1015733	Identifier	siw		1015683	1					
ANR	1015734	TryStatement	try		1015683	5					
ANR	1015735	CompoundStatement		12:5:312:312	1015683	0					
ANR	1015736	ExpressionStatement	"cp = CreamProxyFactory :: make_CreamProxyServiceInfo ( & siw , 0 , DEFAULT_TIMEOUT )"		1015683	0					
ANR	1015737	AssignmentExpression	"cp = CreamProxyFactory :: make_CreamProxyServiceInfo ( & siw , 0 , DEFAULT_TIMEOUT )"		1015683	0		=			
ANR	1015738	Identifier	cp		1015683	0					
ANR	1015739	CallExpression	"CreamProxyFactory :: make_CreamProxyServiceInfo ( & siw , 0 , DEFAULT_TIMEOUT )"		1015683	1					
ANR	1015740	Callee	CreamProxyFactory :: make_CreamProxyServiceInfo		1015683	0					
ANR	1015741	Identifier	CreamProxyFactory :: make_CreamProxyServiceInfo		1015683	0					
ANR	1015742	ArgumentList	& siw		1015683	1					
ANR	1015743	Argument	& siw		1015683	0					
ANR	1015744	UnaryOperationExpression	& siw		1015683	0					
ANR	1015745	UnaryOperator	&		1015683	0					
ANR	1015746	Identifier	siw		1015683	1					
ANR	1015747	Argument	0		1015683	1					
ANR	1015748	PrimaryExpression	0		1015683	0					
ANR	1015749	Argument	DEFAULT_TIMEOUT		1015683	2					
ANR	1015750	Identifier	DEFAULT_TIMEOUT		1015683	0					
ANR	1015751	ExpressionStatement	check_for_factory_error ( cp )		1015683	1					
ANR	1015752	CallExpression	check_for_factory_error ( cp )		1015683	0					
ANR	1015753	Callee	check_for_factory_error		1015683	0					
ANR	1015754	Identifier	check_for_factory_error		1015683	0					
ANR	1015755	ArgumentList	cp		1015683	1					
ANR	1015756	Argument	cp		1015683	0					
ANR	1015757	Identifier	cp		1015683	0					
ANR	1015758	ExpressionStatement	cp -> setCredential ( req -> proxy . c_str ( ) )		1015683	2					
ANR	1015759	CallExpression	cp -> setCredential ( req -> proxy . c_str ( ) )		1015683	0					
ANR	1015760	Callee	cp -> setCredential		1015683	0					
ANR	1015761	PtrMemberAccess	cp -> setCredential		1015683	0					
ANR	1015762	Identifier	cp		1015683	0					
ANR	1015763	Identifier	setCredential		1015683	1					
ANR	1015764	ArgumentList	req -> proxy . c_str ( )		1015683	1					
ANR	1015765	Argument	req -> proxy . c_str ( )		1015683	0					
ANR	1015766	CallExpression	req -> proxy . c_str ( )		1015683	0					
ANR	1015767	Callee	req -> proxy . c_str		1015683	0					
ANR	1015768	MemberAccess	req -> proxy . c_str		1015683	0					
ANR	1015769	PtrMemberAccess	req -> proxy		1015683	0					
ANR	1015770	Identifier	req		1015683	0					
ANR	1015771	Identifier	proxy		1015683	1					
ANR	1015772	Identifier	c_str		1015683	1					
ANR	1015773	ArgumentList			1015683	1					
ANR	1015774	ExpressionStatement	cp -> execute ( service )		1015683	3					
ANR	1015775	CallExpression	cp -> execute ( service )		1015683	0					
ANR	1015776	Callee	cp -> execute		1015683	0					
ANR	1015777	PtrMemberAccess	cp -> execute		1015683	0					
ANR	1015778	Identifier	cp		1015683	0					
ANR	1015779	Identifier	execute		1015683	1					
ANR	1015780	ArgumentList	service		1015683	1					
ANR	1015781	Argument	service		1015683	0					
ANR	1015782	Identifier	service		1015683	0					
ANR	1015783	Statement	delete		1015683	4					
ANR	1015784	ExpressionStatement	cp		1015683	5					
ANR	1015785	Identifier	cp		1015683	0					
ANR	1015786	CatchList			1015683	1					
ANR	1015787	CatchStatement	catch ( std :: exception & ex )		1015683	0					
ANR	1015788	Identifier	ex		1015683	0					
ANR	1015789	CompoundStatement		22:2:566:602	1015683	1					
ANR	1015790	Statement	delete	1674:2:45494:45499	1015683	0	True				
ANR	1015791	ExpressionStatement	cp	1674:9:45501:45503	1015683	1	True				
ANR	1015792	Identifier	cp		1015683	0					
ANR	1015793	IdentifierDeclStatement	char * msg = escape_spaces ( ex . what ( ) ) ;	1675:2:45507:45543	1015683	2	True				
ANR	1015794	IdentifierDecl	* msg = escape_spaces ( ex . what ( ) )		1015683	0					
ANR	1015795	IdentifierDeclType	char *		1015683	0					
ANR	1015796	Identifier	msg		1015683	1					
ANR	1015797	AssignmentExpression	* msg = escape_spaces ( ex . what ( ) )		1015683	2		=			
ANR	1015798	Identifier	msg		1015683	0					
ANR	1015799	CallExpression	escape_spaces ( ex . what ( ) )		1015683	1					
ANR	1015800	Callee	escape_spaces		1015683	0					
ANR	1015801	Identifier	escape_spaces		1015683	0					
ANR	1015802	ArgumentList	ex . what ( )		1015683	1					
ANR	1015803	Argument	ex . what ( )		1015683	0					
ANR	1015804	CallExpression	ex . what ( )		1015683	0					
ANR	1015805	Callee	ex . what		1015683	0					
ANR	1015806	MemberAccess	ex . what		1015683	0					
ANR	1015807	Identifier	ex		1015683	0					
ANR	1015808	Identifier	what		1015683	1					
ANR	1015809	ArgumentList			1015683	1					
ANR	1015810	ExpressionStatement	"enqueue_result ( ( string ) reqid + "" "" + msg )"	1676:2:45547:45588	1015683	3	True				
ANR	1015811	CallExpression	"enqueue_result ( ( string ) reqid + "" "" + msg )"		1015683	0					
ANR	1015812	Callee	enqueue_result		1015683	0					
ANR	1015813	Identifier	enqueue_result		1015683	0					
ANR	1015814	ArgumentList	"( string ) reqid + "" "" + msg"		1015683	1					
ANR	1015815	Argument	"( string ) reqid + "" "" + msg"		1015683	0					
ANR	1015816	AdditiveExpression	"( string ) reqid + "" "" + msg"		1015683	0		+			
ANR	1015817	CastExpression	( string ) reqid		1015683	0					
ANR	1015818	CastTarget	string		1015683	0					
ANR	1015819	Identifier	reqid		1015683	1					
ANR	1015820	AdditiveExpression	""" "" + msg"		1015683	1		+			
ANR	1015821	PrimaryExpression	""" """		1015683	0					
ANR	1015822	Identifier	msg		1015683	1					
ANR	1015823	ExpressionStatement	free ( msg )	1677:2:45592:45601	1015683	4	True				
ANR	1015824	CallExpression	free ( msg )		1015683	0					
ANR	1015825	Callee	free		1015683	0					
ANR	1015826	Identifier	free		1015683	0					
ANR	1015827	ArgumentList	msg		1015683	1					
ANR	1015828	Argument	msg		1015683	0					
ANR	1015829	Identifier	msg		1015683	0					
ANR	1015830	ReturnStatement	return 1 ;	1679:2:45608:45616	1015683	5	True				
ANR	1015831	PrimaryExpression	1		1015683	0					
ANR	1015832	ExpressionStatement	"enqueue_result ( ( string ) reqid + "" NULL true"" )"	1682:1:45624:45668	1015683	6	True				
ANR	1015833	CallExpression	"enqueue_result ( ( string ) reqid + "" NULL true"" )"		1015683	0					
ANR	1015834	Callee	enqueue_result		1015683	0					
ANR	1015835	Identifier	enqueue_result		1015683	0					
ANR	1015836	ArgumentList	"( string ) reqid + "" NULL true"""		1015683	1					
ANR	1015837	Argument	"( string ) reqid + "" NULL true"""		1015683	0					
ANR	1015838	AdditiveExpression	"( string ) reqid + "" NULL true"""		1015683	0		+			
ANR	1015839	CastExpression	( string ) reqid		1015683	0					
ANR	1015840	CastTarget	string		1015683	0					
ANR	1015841	Identifier	reqid		1015683	1					
ANR	1015842	PrimaryExpression	""" NULL true"""		1015683	1					
ANR	1015843	ReturnStatement	return 0 ;	1684:1:45697:45705	1015683	7	True				
ANR	1015844	PrimaryExpression	0		1015683	0					
ANR	1015845	ReturnType	int		1015683	1					
ANR	1015846	Identifier	thread_cream_ping		1015683	2					
ANR	1015847	ParameterList	Request * req		1015683	3					
ANR	1015848	Parameter	Request * req	1653:23:44925:44936	1015683	0	True				
ANR	1015849	ParameterType	Request *		1015683	0					
ANR	1015850	Identifier	req		1015683	1					
ANR	1015851	CFGEntryNode	ENTRY		1015683		True				
ANR	1015852	CFGExitNode	EXIT		1015683		True				
ANR	1015853	CFGErrorNode	ERROR		1015683		True				
ANR	1015854	Symbol	siw		1015683						
ANR	1015855	Symbol	* * req		1015683						
ANR	1015856	Symbol	& reqid		1015683						
ANR	1015857	Symbol	NULL		1015683						
ANR	1015858	Symbol	service		1015683						
ANR	1015859	Symbol	* req		1015683						
ANR	1015860	Symbol	req -> input_line		1015683						
ANR	1015861	Symbol	& service		1015683						
ANR	1015862	Symbol	* req -> input_line		1015683						
ANR	1015863	Symbol	cp		1015683						
ANR	1015864	Symbol	req		1015683						
ANR	1015865	Symbol	reqid		1015683						
ANR	1015866	Function	handle_cream_does_accept_job_submissions	1692:0:45958:46203							
ANR	1015867	FunctionDef	handle_cream_does_accept_job_submissions (char * * input_line)		1015866	0					
ANR	1015868	CompoundStatement		1693:0:46024:46203	1015866	0					
ANR	1015869	IfStatement	if ( count_args ( input_line ) != 3 )		1015866	0					
ANR	1015870	Condition	count_args ( input_line ) != 3	1694:6:46032:46060	1015866	0	True				
ANR	1015871	EqualityExpression	count_args ( input_line ) != 3		1015866	0		!=			
ANR	1015872	CallExpression	count_args ( input_line )		1015866	0					
ANR	1015873	Callee	count_args		1015866	0					
ANR	1015874	Identifier	count_args		1015866	0					
ANR	1015875	ArgumentList	input_line		1015866	1					
ANR	1015876	Argument	input_line		1015866	0					
ANR	1015877	Identifier	input_line		1015866	0					
ANR	1015878	PrimaryExpression	3		1015866	1					
ANR	1015879	CompoundStatement		2:38:39:39	1015866	1					
ANR	1015880	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	1695:2:46068:46089	1015866	0	True				
ANR	1015881	CallExpression	HANDLE_SYNTAX_ERROR ( )		1015866	0					
ANR	1015882	Callee	HANDLE_SYNTAX_ERROR		1015866	0					
ANR	1015883	Identifier	HANDLE_SYNTAX_ERROR		1015866	0					
ANR	1015884	ArgumentList			1015866	1					
ANR	1015885	ExpressionStatement	"enqueue_request ( input_line , thread_cream_does_accept_job_submissions )"	1698:1:46096:46167	1015866	1	True				
ANR	1015886	CallExpression	"enqueue_request ( input_line , thread_cream_does_accept_job_submissions )"		1015866	0					
ANR	1015887	Callee	enqueue_request		1015866	0					
ANR	1015888	Identifier	enqueue_request		1015866	0					
ANR	1015889	ArgumentList	input_line		1015866	1					
ANR	1015890	Argument	input_line		1015866	0					
ANR	1015891	Identifier	input_line		1015866	0					
ANR	1015892	Argument	thread_cream_does_accept_job_submissions		1015866	1					
ANR	1015893	Identifier	thread_cream_does_accept_job_submissions		1015866	0					
ANR	1015894	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	1700:1:46171:46189	1015866	2	True				
ANR	1015895	CallExpression	"gahp_printf ( ""S\\n"" )"		1015866	0					
ANR	1015896	Callee	gahp_printf		1015866	0					
ANR	1015897	Identifier	gahp_printf		1015866	0					
ANR	1015898	ArgumentList	"""S\\n"""		1015866	1					
ANR	1015899	Argument	"""S\\n"""		1015866	0					
ANR	1015900	PrimaryExpression	"""S\\n"""		1015866	0					
ANR	1015901	ReturnStatement	return 0 ;	1702:1:46193:46201	1015866	3	True				
ANR	1015902	PrimaryExpression	0		1015866	0					
ANR	1015903	ReturnType	int		1015866	1					
ANR	1015904	Identifier	handle_cream_does_accept_job_submissions		1015866	2					
ANR	1015905	ParameterList	char * * input_line		1015866	3					
ANR	1015906	Parameter	char * * input_line	1692:46:46004:46020	1015866	0	True				
ANR	1015907	ParameterType	char * *		1015866	0					
ANR	1015908	Identifier	input_line		1015866	1					
ANR	1015909	CFGEntryNode	ENTRY		1015866		True				
ANR	1015910	CFGExitNode	EXIT		1015866		True				
ANR	1015911	Symbol	thread_cream_does_accept_job_submissions		1015866						
ANR	1015912	Symbol	count_args		1015866						
ANR	1015913	Symbol	input_line		1015866						
ANR	1015914	Function	thread_cream_does_accept_job_submissions	1705:0:46206:46988							
ANR	1015915	FunctionDef	thread_cream_does_accept_job_submissions (Request * req)		1015914	0					
ANR	1015916	CompoundStatement		1706:0:46267:46988	1015914	0					
ANR	1015917	IdentifierDeclStatement	"char * reqid , * service ;"	1707:1:46270:46291	1015914	0	True				
ANR	1015918	IdentifierDecl	* reqid		1015914	0					
ANR	1015919	IdentifierDeclType	char *		1015914	0					
ANR	1015920	Identifier	reqid		1015914	1					
ANR	1015921	IdentifierDecl	* service		1015914	1					
ANR	1015922	IdentifierDeclType	char *		1015914	0					
ANR	1015923	Identifier	service		1015914	1					
ANR	1015924	IdentifierDeclStatement	AbsCreamProxy * cp = NULL ;	1708:1:46294:46318	1015914	1	True				
ANR	1015925	IdentifierDecl	* cp = NULL		1015914	0					
ANR	1015926	IdentifierDeclType	AbsCreamProxy *		1015914	0					
ANR	1015927	Identifier	cp		1015914	1					
ANR	1015928	AssignmentExpression	* cp = NULL		1015914	2		=			
ANR	1015929	Identifier	NULL		1015914	0					
ANR	1015930	Identifier	NULL		1015914	1					
ANR	1015931	ExpressionStatement	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"	1710:1:46323:46371	1015914	2	True				
ANR	1015932	CallExpression	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"		1015914	0					
ANR	1015933	Callee	process_string_arg		1015914	0					
ANR	1015934	Identifier	process_string_arg		1015914	0					
ANR	1015935	ArgumentList	req -> input_line [ 1 ]		1015914	1					
ANR	1015936	Argument	req -> input_line [ 1 ]		1015914	0					
ANR	1015937	ArrayIndexing	req -> input_line [ 1 ]		1015914	0					
ANR	1015938	PtrMemberAccess	req -> input_line		1015914	0					
ANR	1015939	Identifier	req		1015914	0					
ANR	1015940	Identifier	input_line		1015914	1					
ANR	1015941	PrimaryExpression	1		1015914	1					
ANR	1015942	Argument	& reqid		1015914	1					
ANR	1015943	UnaryOperationExpression	& reqid		1015914	0					
ANR	1015944	UnaryOperator	&		1015914	0					
ANR	1015945	Identifier	reqid		1015914	1					
ANR	1015946	ExpressionStatement	"process_string_arg ( req -> input_line [ 2 ] , & service )"	1711:1:46374:46424	1015914	3	True				
ANR	1015947	CallExpression	"process_string_arg ( req -> input_line [ 2 ] , & service )"		1015914	0					
ANR	1015948	Callee	process_string_arg		1015914	0					
ANR	1015949	Identifier	process_string_arg		1015914	0					
ANR	1015950	ArgumentList	req -> input_line [ 2 ]		1015914	1					
ANR	1015951	Argument	req -> input_line [ 2 ]		1015914	0					
ANR	1015952	ArrayIndexing	req -> input_line [ 2 ]		1015914	0					
ANR	1015953	PtrMemberAccess	req -> input_line		1015914	0					
ANR	1015954	Identifier	req		1015914	0					
ANR	1015955	Identifier	input_line		1015914	1					
ANR	1015956	PrimaryExpression	2		1015914	1					
ANR	1015957	Argument	& service		1015914	1					
ANR	1015958	UnaryOperationExpression	& service		1015914	0					
ANR	1015959	UnaryOperator	&		1015914	0					
ANR	1015960	Identifier	service		1015914	1					
ANR	1015961	IdentifierDeclStatement	ServiceInfoWrapper siw ;	1713:1:46428:46450	1015914	4	True				
ANR	1015962	IdentifierDecl	siw		1015914	0					
ANR	1015963	IdentifierDeclType	ServiceInfoWrapper		1015914	0					
ANR	1015964	Identifier	siw		1015914	1					
ANR	1015965	TryStatement	try		1015914	5					
ANR	1015966	CompoundStatement		9:5:189:189	1015914	0					
ANR	1015967	ExpressionStatement	"cp = CreamProxyFactory :: make_CreamProxyServiceInfo ( & siw , 0 , DEFAULT_TIMEOUT )"		1015914	0					
ANR	1015968	AssignmentExpression	"cp = CreamProxyFactory :: make_CreamProxyServiceInfo ( & siw , 0 , DEFAULT_TIMEOUT )"		1015914	0		=			
ANR	1015969	Identifier	cp		1015914	0					
ANR	1015970	CallExpression	"CreamProxyFactory :: make_CreamProxyServiceInfo ( & siw , 0 , DEFAULT_TIMEOUT )"		1015914	1					
ANR	1015971	Callee	CreamProxyFactory :: make_CreamProxyServiceInfo		1015914	0					
ANR	1015972	Identifier	CreamProxyFactory :: make_CreamProxyServiceInfo		1015914	0					
ANR	1015973	ArgumentList	& siw		1015914	1					
ANR	1015974	Argument	& siw		1015914	0					
ANR	1015975	UnaryOperationExpression	& siw		1015914	0					
ANR	1015976	UnaryOperator	&		1015914	0					
ANR	1015977	Identifier	siw		1015914	1					
ANR	1015978	Argument	0		1015914	1					
ANR	1015979	PrimaryExpression	0		1015914	0					
ANR	1015980	Argument	DEFAULT_TIMEOUT		1015914	2					
ANR	1015981	Identifier	DEFAULT_TIMEOUT		1015914	0					
ANR	1015982	ExpressionStatement	check_for_factory_error ( cp )		1015914	1					
ANR	1015983	CallExpression	check_for_factory_error ( cp )		1015914	0					
ANR	1015984	Callee	check_for_factory_error		1015914	0					
ANR	1015985	Identifier	check_for_factory_error		1015914	0					
ANR	1015986	ArgumentList	cp		1015914	1					
ANR	1015987	Argument	cp		1015914	0					
ANR	1015988	Identifier	cp		1015914	0					
ANR	1015989	ExpressionStatement	cp -> setCredential ( req -> proxy . c_str ( ) )		1015914	2					
ANR	1015990	CallExpression	cp -> setCredential ( req -> proxy . c_str ( ) )		1015914	0					
ANR	1015991	Callee	cp -> setCredential		1015914	0					
ANR	1015992	PtrMemberAccess	cp -> setCredential		1015914	0					
ANR	1015993	Identifier	cp		1015914	0					
ANR	1015994	Identifier	setCredential		1015914	1					
ANR	1015995	ArgumentList	req -> proxy . c_str ( )		1015914	1					
ANR	1015996	Argument	req -> proxy . c_str ( )		1015914	0					
ANR	1015997	CallExpression	req -> proxy . c_str ( )		1015914	0					
ANR	1015998	Callee	req -> proxy . c_str		1015914	0					
ANR	1015999	MemberAccess	req -> proxy . c_str		1015914	0					
ANR	1016000	PtrMemberAccess	req -> proxy		1015914	0					
ANR	1016001	Identifier	req		1015914	0					
ANR	1016002	Identifier	proxy		1015914	1					
ANR	1016003	Identifier	c_str		1015914	1					
ANR	1016004	ArgumentList			1015914	1					
ANR	1016005	ExpressionStatement	cp -> execute ( service )		1015914	3					
ANR	1016006	CallExpression	cp -> execute ( service )		1015914	0					
ANR	1016007	Callee	cp -> execute		1015914	0					
ANR	1016008	PtrMemberAccess	cp -> execute		1015914	0					
ANR	1016009	Identifier	cp		1015914	0					
ANR	1016010	Identifier	execute		1015914	1					
ANR	1016011	ArgumentList	service		1015914	1					
ANR	1016012	Argument	service		1015914	0					
ANR	1016013	Identifier	service		1015914	0					
ANR	1016014	Statement	delete		1015914	4					
ANR	1016015	ExpressionStatement	cp		1015914	5					
ANR	1016016	Identifier	cp		1015914	0					
ANR	1016017	CatchList			1015914	1					
ANR	1016018	CatchStatement	catch ( std :: exception & ex )		1015914	0					
ANR	1016019	Identifier	ex		1015914	0					
ANR	1016020	CompoundStatement		19:2:443:479	1015914	1					
ANR	1016021	Statement	delete	1723:2:46698:46703	1015914	0	True				
ANR	1016022	ExpressionStatement	cp	1723:9:46705:46707	1015914	1	True				
ANR	1016023	Identifier	cp		1015914	0					
ANR	1016024	IdentifierDeclStatement	char * msg = escape_spaces ( ex . what ( ) ) ;	1724:2:46711:46747	1015914	2	True				
ANR	1016025	IdentifierDecl	* msg = escape_spaces ( ex . what ( ) )		1015914	0					
ANR	1016026	IdentifierDeclType	char *		1015914	0					
ANR	1016027	Identifier	msg		1015914	1					
ANR	1016028	AssignmentExpression	* msg = escape_spaces ( ex . what ( ) )		1015914	2		=			
ANR	1016029	Identifier	msg		1015914	0					
ANR	1016030	CallExpression	escape_spaces ( ex . what ( ) )		1015914	1					
ANR	1016031	Callee	escape_spaces		1015914	0					
ANR	1016032	Identifier	escape_spaces		1015914	0					
ANR	1016033	ArgumentList	ex . what ( )		1015914	1					
ANR	1016034	Argument	ex . what ( )		1015914	0					
ANR	1016035	CallExpression	ex . what ( )		1015914	0					
ANR	1016036	Callee	ex . what		1015914	0					
ANR	1016037	MemberAccess	ex . what		1015914	0					
ANR	1016038	Identifier	ex		1015914	0					
ANR	1016039	Identifier	what		1015914	1					
ANR	1016040	ArgumentList			1015914	1					
ANR	1016041	ExpressionStatement	"enqueue_result ( ( string ) reqid + "" "" + msg )"	1725:2:46751:46792	1015914	3	True				
ANR	1016042	CallExpression	"enqueue_result ( ( string ) reqid + "" "" + msg )"		1015914	0					
ANR	1016043	Callee	enqueue_result		1015914	0					
ANR	1016044	Identifier	enqueue_result		1015914	0					
ANR	1016045	ArgumentList	"( string ) reqid + "" "" + msg"		1015914	1					
ANR	1016046	Argument	"( string ) reqid + "" "" + msg"		1015914	0					
ANR	1016047	AdditiveExpression	"( string ) reqid + "" "" + msg"		1015914	0		+			
ANR	1016048	CastExpression	( string ) reqid		1015914	0					
ANR	1016049	CastTarget	string		1015914	0					
ANR	1016050	Identifier	reqid		1015914	1					
ANR	1016051	AdditiveExpression	""" "" + msg"		1015914	1		+			
ANR	1016052	PrimaryExpression	""" """		1015914	0					
ANR	1016053	Identifier	msg		1015914	1					
ANR	1016054	ExpressionStatement	free ( msg )	1726:2:46796:46805	1015914	4	True				
ANR	1016055	CallExpression	free ( msg )		1015914	0					
ANR	1016056	Callee	free		1015914	0					
ANR	1016057	Identifier	free		1015914	0					
ANR	1016058	ArgumentList	msg		1015914	1					
ANR	1016059	Argument	msg		1015914	0					
ANR	1016060	Identifier	msg		1015914	0					
ANR	1016061	ReturnStatement	return 1 ;	1728:2:46812:46820	1015914	5	True				
ANR	1016062	PrimaryExpression	1		1015914	0					
ANR	1016063	IfStatement	if ( siw . getAcceptJobSubmission ( ) )		1015914	6					
ANR	1016064	Condition	siw . getAcceptJobSubmission ( )	1731:5:46832:46859	1015914	0	True				
ANR	1016065	CallExpression	siw . getAcceptJobSubmission ( )		1015914	0					
ANR	1016066	Callee	siw . getAcceptJobSubmission		1015914	0					
ANR	1016067	MemberAccess	siw . getAcceptJobSubmission		1015914	0					
ANR	1016068	Identifier	siw		1015914	0					
ANR	1016069	Identifier	getAcceptJobSubmission		1015914	1					
ANR	1016070	ArgumentList			1015914	1					
ANR	1016071	CompoundStatement		26:35:594:594	1015914	1					
ANR	1016072	ExpressionStatement	"enqueue_result ( ( string ) reqid + "" NULL true"" )"	1732:2:46866:46910	1015914	0	True				
ANR	1016073	CallExpression	"enqueue_result ( ( string ) reqid + "" NULL true"" )"		1015914	0					
ANR	1016074	Callee	enqueue_result		1015914	0					
ANR	1016075	Identifier	enqueue_result		1015914	0					
ANR	1016076	ArgumentList	"( string ) reqid + "" NULL true"""		1015914	1					
ANR	1016077	Argument	"( string ) reqid + "" NULL true"""		1015914	0					
ANR	1016078	AdditiveExpression	"( string ) reqid + "" NULL true"""		1015914	0		+			
ANR	1016079	CastExpression	( string ) reqid		1015914	0					
ANR	1016080	CastTarget	string		1015914	0					
ANR	1016081	Identifier	reqid		1015914	1					
ANR	1016082	PrimaryExpression	""" NULL true"""		1015914	1					
ANR	1016083	ElseStatement	else		1015914	0					
ANR	1016084	CompoundStatement		29:6:653:653	1015914	0					
ANR	1016085	ExpressionStatement	"enqueue_result ( ( string ) reqid + "" NULL false"" )"	1735:2:46925:46970	1015914	0	True				
ANR	1016086	CallExpression	"enqueue_result ( ( string ) reqid + "" NULL false"" )"		1015914	0					
ANR	1016087	Callee	enqueue_result		1015914	0					
ANR	1016088	Identifier	enqueue_result		1015914	0					
ANR	1016089	ArgumentList	"( string ) reqid + "" NULL false"""		1015914	1					
ANR	1016090	Argument	"( string ) reqid + "" NULL false"""		1015914	0					
ANR	1016091	AdditiveExpression	"( string ) reqid + "" NULL false"""		1015914	0		+			
ANR	1016092	CastExpression	( string ) reqid		1015914	0					
ANR	1016093	CastTarget	string		1015914	0					
ANR	1016094	Identifier	reqid		1015914	1					
ANR	1016095	PrimaryExpression	""" NULL false"""		1015914	1					
ANR	1016096	ReturnStatement	return 0 ;	1738:1:46978:46986	1015914	7	True				
ANR	1016097	PrimaryExpression	0		1015914	0					
ANR	1016098	ReturnType	int		1015914	1					
ANR	1016099	Identifier	thread_cream_does_accept_job_submissions		1015914	2					
ANR	1016100	ParameterList	Request * req		1015914	3					
ANR	1016101	Parameter	Request * req	1705:46:46252:46263	1015914	0	True				
ANR	1016102	ParameterType	Request *		1015914	0					
ANR	1016103	Identifier	req		1015914	1					
ANR	1016104	CFGEntryNode	ENTRY		1015914		True				
ANR	1016105	CFGExitNode	EXIT		1015914		True				
ANR	1016106	CFGErrorNode	ERROR		1015914		True				
ANR	1016107	Symbol	siw		1015914						
ANR	1016108	Symbol	& reqid		1015914						
ANR	1016109	Symbol	NULL		1015914						
ANR	1016110	Symbol	* req		1015914						
ANR	1016111	Symbol	& service		1015914						
ANR	1016112	Symbol	cp		1015914						
ANR	1016113	Symbol	reqid		1015914						
ANR	1016114	Symbol	* * req		1015914						
ANR	1016115	Symbol	siw . getAcceptJobSubmission		1015914						
ANR	1016116	Symbol	service		1015914						
ANR	1016117	Symbol	req -> input_line		1015914						
ANR	1016118	Symbol	* req -> input_line		1015914						
ANR	1016119	Symbol	req		1015914						
ANR	1016120	Function	handle_cream_proxy_renew	1747:0:47254:47628							
ANR	1016121	FunctionDef	handle_cream_proxy_renew (char * * input_line)		1016120	0					
ANR	1016122	CompoundStatement		1748:0:47304:47628	1016120	0					
ANR	1016123	IdentifierDeclStatement	int arg_cnt = count_args ( input_line ) ;	1749:1:47307:47345	1016120	0	True				
ANR	1016124	IdentifierDecl	arg_cnt = count_args ( input_line )		1016120	0					
ANR	1016125	IdentifierDeclType	int		1016120	0					
ANR	1016126	Identifier	arg_cnt		1016120	1					
ANR	1016127	AssignmentExpression	arg_cnt = count_args ( input_line )		1016120	2		=			
ANR	1016128	Identifier	arg_cnt		1016120	0					
ANR	1016129	CallExpression	count_args ( input_line )		1016120	1					
ANR	1016130	Callee	count_args		1016120	0					
ANR	1016131	Identifier	count_args		1016120	0					
ANR	1016132	ArgumentList	input_line		1016120	1					
ANR	1016133	Argument	input_line		1016120	0					
ANR	1016134	Identifier	input_line		1016120	0					
ANR	1016135	IdentifierDeclStatement	int jobnum ;	1750:1:47348:47358	1016120	1	True				
ANR	1016136	IdentifierDecl	jobnum		1016120	0					
ANR	1016137	IdentifierDeclType	int		1016120	0					
ANR	1016138	Identifier	jobnum		1016120	1					
ANR	1016139	IfStatement	"if ( arg_cnt != 4 && ( arg_cnt < 6 || ! process_int_arg ( input_line [ 5 ] , & jobnum ) || jobnum <= 0 || jobnum + 6 != arg_cnt ) )"		1016120	2					
ANR	1016140	Condition	"arg_cnt != 4 && ( arg_cnt < 6 || ! process_int_arg ( input_line [ 5 ] , & jobnum ) || jobnum <= 0 || jobnum + 6 != arg_cnt )"	1752:6:47367:47501	1016120	0	True				
ANR	1016141	AndExpression	"arg_cnt != 4 && ( arg_cnt < 6 || ! process_int_arg ( input_line [ 5 ] , & jobnum ) || jobnum <= 0 || jobnum + 6 != arg_cnt )"		1016120	0		&&			
ANR	1016142	EqualityExpression	arg_cnt != 4		1016120	0		!=			
ANR	1016143	Identifier	arg_cnt		1016120	0					
ANR	1016144	PrimaryExpression	4		1016120	1					
ANR	1016145	OrExpression	"arg_cnt < 6 || ! process_int_arg ( input_line [ 5 ] , & jobnum ) || jobnum <= 0 || jobnum + 6 != arg_cnt"		1016120	1		||			
ANR	1016146	RelationalExpression	arg_cnt < 6		1016120	0		<			
ANR	1016147	Identifier	arg_cnt		1016120	0					
ANR	1016148	PrimaryExpression	6		1016120	1					
ANR	1016149	OrExpression	"! process_int_arg ( input_line [ 5 ] , & jobnum ) || jobnum <= 0 || jobnum + 6 != arg_cnt"		1016120	1		||			
ANR	1016150	UnaryOperationExpression	"! process_int_arg ( input_line [ 5 ] , & jobnum )"		1016120	0					
ANR	1016151	UnaryOperator	!		1016120	0					
ANR	1016152	CallExpression	"process_int_arg ( input_line [ 5 ] , & jobnum )"		1016120	1					
ANR	1016153	Callee	process_int_arg		1016120	0					
ANR	1016154	Identifier	process_int_arg		1016120	0					
ANR	1016155	ArgumentList	input_line [ 5 ]		1016120	1					
ANR	1016156	Argument	input_line [ 5 ]		1016120	0					
ANR	1016157	ArrayIndexing	input_line [ 5 ]		1016120	0					
ANR	1016158	Identifier	input_line		1016120	0					
ANR	1016159	PrimaryExpression	5		1016120	1					
ANR	1016160	Argument	& jobnum		1016120	1					
ANR	1016161	UnaryOperationExpression	& jobnum		1016120	0					
ANR	1016162	UnaryOperator	&		1016120	0					
ANR	1016163	Identifier	jobnum		1016120	1					
ANR	1016164	OrExpression	jobnum <= 0 || jobnum + 6 != arg_cnt		1016120	1		||			
ANR	1016165	RelationalExpression	jobnum <= 0		1016120	0		<=			
ANR	1016166	Identifier	jobnum		1016120	0					
ANR	1016167	PrimaryExpression	0		1016120	1					
ANR	1016168	EqualityExpression	jobnum + 6 != arg_cnt		1016120	1		!=			
ANR	1016169	AdditiveExpression	jobnum + 6		1016120	0		+			
ANR	1016170	Identifier	jobnum		1016120	0					
ANR	1016171	PrimaryExpression	6		1016120	1					
ANR	1016172	Identifier	arg_cnt		1016120	1					
ANR	1016173	CompoundStatement		7:50:200:200	1016120	1					
ANR	1016174	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	1755:2:47509:47530	1016120	0	True				
ANR	1016175	CallExpression	HANDLE_SYNTAX_ERROR ( )		1016120	0					
ANR	1016176	Callee	HANDLE_SYNTAX_ERROR		1016120	0					
ANR	1016177	Identifier	HANDLE_SYNTAX_ERROR		1016120	0					
ANR	1016178	ArgumentList			1016120	1					
ANR	1016179	ExpressionStatement	"enqueue_request ( input_line , thread_cream_proxy_renew )"	1758:1:47537:47592	1016120	3	True				
ANR	1016180	CallExpression	"enqueue_request ( input_line , thread_cream_proxy_renew )"		1016120	0					
ANR	1016181	Callee	enqueue_request		1016120	0					
ANR	1016182	Identifier	enqueue_request		1016120	0					
ANR	1016183	ArgumentList	input_line		1016120	1					
ANR	1016184	Argument	input_line		1016120	0					
ANR	1016185	Identifier	input_line		1016120	0					
ANR	1016186	Argument	thread_cream_proxy_renew		1016120	1					
ANR	1016187	Identifier	thread_cream_proxy_renew		1016120	0					
ANR	1016188	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	1760:1:47596:47614	1016120	4	True				
ANR	1016189	CallExpression	"gahp_printf ( ""S\\n"" )"		1016120	0					
ANR	1016190	Callee	gahp_printf		1016120	0					
ANR	1016191	Identifier	gahp_printf		1016120	0					
ANR	1016192	ArgumentList	"""S\\n"""		1016120	1					
ANR	1016193	Argument	"""S\\n"""		1016120	0					
ANR	1016194	PrimaryExpression	"""S\\n"""		1016120	0					
ANR	1016195	ReturnStatement	return 0 ;	1762:1:47618:47626	1016120	5	True				
ANR	1016196	PrimaryExpression	0		1016120	0					
ANR	1016197	ReturnType	int		1016120	1					
ANR	1016198	Identifier	handle_cream_proxy_renew		1016120	2					
ANR	1016199	ParameterList	char * * input_line		1016120	3					
ANR	1016200	Parameter	char * * input_line	1747:30:47284:47300	1016120	0	True				
ANR	1016201	ParameterType	char * *		1016120	0					
ANR	1016202	Identifier	input_line		1016120	1					
ANR	1016203	CFGEntryNode	ENTRY		1016120		True				
ANR	1016204	CFGExitNode	EXIT		1016120		True				
ANR	1016205	Symbol	thread_cream_proxy_renew		1016120						
ANR	1016206	Symbol	* input_line		1016120						
ANR	1016207	Symbol	& jobnum		1016120						
ANR	1016208	Symbol	jobnum		1016120						
ANR	1016209	Symbol	count_args		1016120						
ANR	1016210	Symbol	input_line		1016120						
ANR	1016211	Symbol	process_int_arg		1016120						
ANR	1016212	Symbol	arg_cnt		1016120						
ANR	1016213	Function	thread_cream_proxy_renew	1765:0:47631:48934							
ANR	1016214	FunctionDef	thread_cream_proxy_renew (Request * req)		1016213	0					
ANR	1016215	CompoundStatement		1766:0:47676:48934	1016213	0					
ANR	1016216	IdentifierDeclStatement	int arg_cnt = count_args ( req -> input_line ) ;	1773:1:47968:48011	1016213	0	True				
ANR	1016217	IdentifierDecl	arg_cnt = count_args ( req -> input_line )		1016213	0					
ANR	1016218	IdentifierDeclType	int		1016213	0					
ANR	1016219	Identifier	arg_cnt		1016213	1					
ANR	1016220	AssignmentExpression	arg_cnt = count_args ( req -> input_line )		1016213	2		=			
ANR	1016221	Identifier	arg_cnt		1016213	0					
ANR	1016222	CallExpression	count_args ( req -> input_line )		1016213	1					
ANR	1016223	Callee	count_args		1016213	0					
ANR	1016224	Identifier	count_args		1016213	0					
ANR	1016225	ArgumentList	req -> input_line		1016213	1					
ANR	1016226	Argument	req -> input_line		1016213	0					
ANR	1016227	PtrMemberAccess	req -> input_line		1016213	0					
ANR	1016228	Identifier	req		1016213	0					
ANR	1016229	Identifier	input_line		1016213	1					
ANR	1016230	IdentifierDeclStatement	"char * reqid , * delgservice , * delgid ;"	1774:1:48014:48048	1016213	1	True				
ANR	1016231	IdentifierDecl	* reqid		1016213	0					
ANR	1016232	IdentifierDeclType	char *		1016213	0					
ANR	1016233	Identifier	reqid		1016213	1					
ANR	1016234	IdentifierDecl	* delgservice		1016213	1					
ANR	1016235	IdentifierDeclType	char *		1016213	0					
ANR	1016236	Identifier	delgservice		1016213	1					
ANR	1016237	IdentifierDecl	* delgid		1016213	2					
ANR	1016238	IdentifierDeclType	char *		1016213	0					
ANR	1016239	Identifier	delgid		1016213	1					
ANR	1016240	IdentifierDeclStatement	string result_line ;	1775:1:48051:48069	1016213	2	True				
ANR	1016241	IdentifierDecl	result_line		1016213	0					
ANR	1016242	IdentifierDeclType	string		1016213	0					
ANR	1016243	Identifier	result_line		1016213	1					
ANR	1016244	IdentifierDeclStatement	AbsCreamProxy * cp = NULL ;	1776:1:48072:48096	1016213	3	True				
ANR	1016245	IdentifierDecl	* cp = NULL		1016213	0					
ANR	1016246	IdentifierDeclType	AbsCreamProxy *		1016213	0					
ANR	1016247	Identifier	cp		1016213	1					
ANR	1016248	AssignmentExpression	* cp = NULL		1016213	2		=			
ANR	1016249	Identifier	NULL		1016213	0					
ANR	1016250	Identifier	NULL		1016213	1					
ANR	1016251	ExpressionStatement	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"	1778:1:48101:48149	1016213	4	True				
ANR	1016252	CallExpression	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"		1016213	0					
ANR	1016253	Callee	process_string_arg		1016213	0					
ANR	1016254	Identifier	process_string_arg		1016213	0					
ANR	1016255	ArgumentList	req -> input_line [ 1 ]		1016213	1					
ANR	1016256	Argument	req -> input_line [ 1 ]		1016213	0					
ANR	1016257	ArrayIndexing	req -> input_line [ 1 ]		1016213	0					
ANR	1016258	PtrMemberAccess	req -> input_line		1016213	0					
ANR	1016259	Identifier	req		1016213	0					
ANR	1016260	Identifier	input_line		1016213	1					
ANR	1016261	PrimaryExpression	1		1016213	1					
ANR	1016262	Argument	& reqid		1016213	1					
ANR	1016263	UnaryOperationExpression	& reqid		1016213	0					
ANR	1016264	UnaryOperator	&		1016213	0					
ANR	1016265	Identifier	reqid		1016213	1					
ANR	1016266	IfStatement	if ( arg_cnt == 4 )		1016213	5					
ANR	1016267	Condition	arg_cnt == 4	1780:6:48158:48169	1016213	0	True				
ANR	1016268	EqualityExpression	arg_cnt == 4		1016213	0		==			
ANR	1016269	Identifier	arg_cnt		1016213	0					
ANR	1016270	PrimaryExpression	4		1016213	1					
ANR	1016271	CompoundStatement		15:21:496:496	1016213	1					
ANR	1016272	ExpressionStatement	"process_string_arg ( req -> input_line [ 2 ] , & delgservice )"	1781:2:48177:48231	1016213	0	True				
ANR	1016273	CallExpression	"process_string_arg ( req -> input_line [ 2 ] , & delgservice )"		1016213	0					
ANR	1016274	Callee	process_string_arg		1016213	0					
ANR	1016275	Identifier	process_string_arg		1016213	0					
ANR	1016276	ArgumentList	req -> input_line [ 2 ]		1016213	1					
ANR	1016277	Argument	req -> input_line [ 2 ]		1016213	0					
ANR	1016278	ArrayIndexing	req -> input_line [ 2 ]		1016213	0					
ANR	1016279	PtrMemberAccess	req -> input_line		1016213	0					
ANR	1016280	Identifier	req		1016213	0					
ANR	1016281	Identifier	input_line		1016213	1					
ANR	1016282	PrimaryExpression	2		1016213	1					
ANR	1016283	Argument	& delgservice		1016213	1					
ANR	1016284	UnaryOperationExpression	& delgservice		1016213	0					
ANR	1016285	UnaryOperator	&		1016213	0					
ANR	1016286	Identifier	delgservice		1016213	1					
ANR	1016287	ExpressionStatement	"process_string_arg ( req -> input_line [ 3 ] , & delgid )"	1782:2:48235:48284	1016213	1	True				
ANR	1016288	CallExpression	"process_string_arg ( req -> input_line [ 3 ] , & delgid )"		1016213	0					
ANR	1016289	Callee	process_string_arg		1016213	0					
ANR	1016290	Identifier	process_string_arg		1016213	0					
ANR	1016291	ArgumentList	req -> input_line [ 3 ]		1016213	1					
ANR	1016292	Argument	req -> input_line [ 3 ]		1016213	0					
ANR	1016293	ArrayIndexing	req -> input_line [ 3 ]		1016213	0					
ANR	1016294	PtrMemberAccess	req -> input_line		1016213	0					
ANR	1016295	Identifier	req		1016213	0					
ANR	1016296	Identifier	input_line		1016213	1					
ANR	1016297	PrimaryExpression	3		1016213	1					
ANR	1016298	Argument	& delgid		1016213	1					
ANR	1016299	UnaryOperationExpression	& delgid		1016213	0					
ANR	1016300	UnaryOperator	&		1016213	0					
ANR	1016301	Identifier	delgid		1016213	1					
ANR	1016302	ElseStatement	else		1016213	0					
ANR	1016303	CompoundStatement		18:8:617:617	1016213	0					
ANR	1016304	ExpressionStatement	"process_string_arg ( req -> input_line [ 3 ] , & delgservice )"	1784:2:48298:48352	1016213	0	True				
ANR	1016305	CallExpression	"process_string_arg ( req -> input_line [ 3 ] , & delgservice )"		1016213	0					
ANR	1016306	Callee	process_string_arg		1016213	0					
ANR	1016307	Identifier	process_string_arg		1016213	0					
ANR	1016308	ArgumentList	req -> input_line [ 3 ]		1016213	1					
ANR	1016309	Argument	req -> input_line [ 3 ]		1016213	0					
ANR	1016310	ArrayIndexing	req -> input_line [ 3 ]		1016213	0					
ANR	1016311	PtrMemberAccess	req -> input_line		1016213	0					
ANR	1016312	Identifier	req		1016213	0					
ANR	1016313	Identifier	input_line		1016213	1					
ANR	1016314	PrimaryExpression	3		1016213	1					
ANR	1016315	Argument	& delgservice		1016213	1					
ANR	1016316	UnaryOperationExpression	& delgservice		1016213	0					
ANR	1016317	UnaryOperator	&		1016213	0					
ANR	1016318	Identifier	delgservice		1016213	1					
ANR	1016319	ExpressionStatement	"process_string_arg ( req -> input_line [ 4 ] , & delgid )"	1785:2:48356:48405	1016213	1	True				
ANR	1016320	CallExpression	"process_string_arg ( req -> input_line [ 4 ] , & delgid )"		1016213	0					
ANR	1016321	Callee	process_string_arg		1016213	0					
ANR	1016322	Identifier	process_string_arg		1016213	0					
ANR	1016323	ArgumentList	req -> input_line [ 4 ]		1016213	1					
ANR	1016324	Argument	req -> input_line [ 4 ]		1016213	0					
ANR	1016325	ArrayIndexing	req -> input_line [ 4 ]		1016213	0					
ANR	1016326	PtrMemberAccess	req -> input_line		1016213	0					
ANR	1016327	Identifier	req		1016213	0					
ANR	1016328	Identifier	input_line		1016213	1					
ANR	1016329	PrimaryExpression	4		1016213	1					
ANR	1016330	Argument	& delgid		1016213	1					
ANR	1016331	UnaryOperationExpression	& delgid		1016213	0					
ANR	1016332	UnaryOperator	&		1016213	0					
ANR	1016333	Identifier	delgid		1016213	1					
ANR	1016334	TryStatement	try		1016213	6					
ANR	1016335	CompoundStatement		23:5:740:740	1016213	0					
ANR	1016336	ExpressionStatement	"cp = CreamProxyFactory :: make_CreamProxy_ProxyRenew ( delgid , DEFAULT_TIMEOUT )"		1016213	0					
ANR	1016337	AssignmentExpression	"cp = CreamProxyFactory :: make_CreamProxy_ProxyRenew ( delgid , DEFAULT_TIMEOUT )"		1016213	0		=			
ANR	1016338	Identifier	cp		1016213	0					
ANR	1016339	CallExpression	"CreamProxyFactory :: make_CreamProxy_ProxyRenew ( delgid , DEFAULT_TIMEOUT )"		1016213	1					
ANR	1016340	Callee	CreamProxyFactory :: make_CreamProxy_ProxyRenew		1016213	0					
ANR	1016341	Identifier	CreamProxyFactory :: make_CreamProxy_ProxyRenew		1016213	0					
ANR	1016342	ArgumentList	delgid		1016213	1					
ANR	1016343	Argument	delgid		1016213	0					
ANR	1016344	Identifier	delgid		1016213	0					
ANR	1016345	Argument	DEFAULT_TIMEOUT		1016213	1					
ANR	1016346	Identifier	DEFAULT_TIMEOUT		1016213	0					
ANR	1016347	ExpressionStatement	check_for_factory_error ( cp )		1016213	1					
ANR	1016348	CallExpression	check_for_factory_error ( cp )		1016213	0					
ANR	1016349	Callee	check_for_factory_error		1016213	0					
ANR	1016350	Identifier	check_for_factory_error		1016213	0					
ANR	1016351	ArgumentList	cp		1016213	1					
ANR	1016352	Argument	cp		1016213	0					
ANR	1016353	Identifier	cp		1016213	0					
ANR	1016354	ExpressionStatement	cp -> setCredential ( req -> proxy . c_str ( ) )		1016213	2					
ANR	1016355	CallExpression	cp -> setCredential ( req -> proxy . c_str ( ) )		1016213	0					
ANR	1016356	Callee	cp -> setCredential		1016213	0					
ANR	1016357	PtrMemberAccess	cp -> setCredential		1016213	0					
ANR	1016358	Identifier	cp		1016213	0					
ANR	1016359	Identifier	setCredential		1016213	1					
ANR	1016360	ArgumentList	req -> proxy . c_str ( )		1016213	1					
ANR	1016361	Argument	req -> proxy . c_str ( )		1016213	0					
ANR	1016362	CallExpression	req -> proxy . c_str ( )		1016213	0					
ANR	1016363	Callee	req -> proxy . c_str		1016213	0					
ANR	1016364	MemberAccess	req -> proxy . c_str		1016213	0					
ANR	1016365	PtrMemberAccess	req -> proxy		1016213	0					
ANR	1016366	Identifier	req		1016213	0					
ANR	1016367	Identifier	proxy		1016213	1					
ANR	1016368	Identifier	c_str		1016213	1					
ANR	1016369	ArgumentList			1016213	1					
ANR	1016370	ExpressionStatement	cp -> execute ( delgservice )		1016213	3					
ANR	1016371	CallExpression	cp -> execute ( delgservice )		1016213	0					
ANR	1016372	Callee	cp -> execute		1016213	0					
ANR	1016373	PtrMemberAccess	cp -> execute		1016213	0					
ANR	1016374	Identifier	cp		1016213	0					
ANR	1016375	Identifier	execute		1016213	1					
ANR	1016376	ArgumentList	delgservice		1016213	1					
ANR	1016377	Argument	delgservice		1016213	0					
ANR	1016378	Identifier	delgservice		1016213	0					
ANR	1016379	Statement	delete		1016213	4					
ANR	1016380	ExpressionStatement	cp		1016213	5					
ANR	1016381	Identifier	cp		1016213	0					
ANR	1016382	CatchList			1016213	1					
ANR	1016383	CatchStatement	catch ( std :: exception & ex )		1016213	0					
ANR	1016384	Identifier	ex		1016213	0					
ANR	1016385	CompoundStatement		33:2:998:1034	1016213	1					
ANR	1016386	Statement	delete	1797:2:48662:48667	1016213	0	True				
ANR	1016387	ExpressionStatement	cp	1797:9:48669:48671	1016213	1	True				
ANR	1016388	Identifier	cp		1016213	0					
ANR	1016389	IdentifierDeclStatement	char * msg = escape_spaces ( ex . what ( ) ) ;	1798:2:48675:48711	1016213	2	True				
ANR	1016390	IdentifierDecl	* msg = escape_spaces ( ex . what ( ) )		1016213	0					
ANR	1016391	IdentifierDeclType	char *		1016213	0					
ANR	1016392	Identifier	msg		1016213	1					
ANR	1016393	AssignmentExpression	* msg = escape_spaces ( ex . what ( ) )		1016213	2		=			
ANR	1016394	Identifier	msg		1016213	0					
ANR	1016395	CallExpression	escape_spaces ( ex . what ( ) )		1016213	1					
ANR	1016396	Callee	escape_spaces		1016213	0					
ANR	1016397	Identifier	escape_spaces		1016213	0					
ANR	1016398	ArgumentList	ex . what ( )		1016213	1					
ANR	1016399	Argument	ex . what ( )		1016213	0					
ANR	1016400	CallExpression	ex . what ( )		1016213	0					
ANR	1016401	Callee	ex . what		1016213	0					
ANR	1016402	MemberAccess	ex . what		1016213	0					
ANR	1016403	Identifier	ex		1016213	0					
ANR	1016404	Identifier	what		1016213	1					
ANR	1016405	ArgumentList			1016213	1					
ANR	1016406	ExpressionStatement	"result_line = ( string ) reqid + "" CREAM_Proxy_Renew\\\\ Error:\\\\ "" + msg"	1799:2:48715:48783	1016213	3	True				
ANR	1016407	AssignmentExpression	"result_line = ( string ) reqid + "" CREAM_Proxy_Renew\\\\ Error:\\\\ "" + msg"		1016213	0		=			
ANR	1016408	Identifier	result_line		1016213	0					
ANR	1016409	AdditiveExpression	"( string ) reqid + "" CREAM_Proxy_Renew\\\\ Error:\\\\ "" + msg"		1016213	1		+			
ANR	1016410	CastExpression	( string ) reqid		1016213	0					
ANR	1016411	CastTarget	string		1016213	0					
ANR	1016412	Identifier	reqid		1016213	1					
ANR	1016413	AdditiveExpression	""" CREAM_Proxy_Renew\\\\ Error:\\\\ "" + msg"		1016213	1		+			
ANR	1016414	PrimaryExpression	""" CREAM_Proxy_Renew\\\\ Error:\\\\ """		1016213	0					
ANR	1016415	Identifier	msg		1016213	1					
ANR	1016416	ExpressionStatement	enqueue_result ( result_line )	1800:2:48787:48814	1016213	4	True				
ANR	1016417	CallExpression	enqueue_result ( result_line )		1016213	0					
ANR	1016418	Callee	enqueue_result		1016213	0					
ANR	1016419	Identifier	enqueue_result		1016213	0					
ANR	1016420	ArgumentList	result_line		1016213	1					
ANR	1016421	Argument	result_line		1016213	0					
ANR	1016422	Identifier	result_line		1016213	0					
ANR	1016423	ExpressionStatement	free ( msg )	1801:2:48818:48827	1016213	5	True				
ANR	1016424	CallExpression	free ( msg )		1016213	0					
ANR	1016425	Callee	free		1016213	0					
ANR	1016426	Identifier	free		1016213	0					
ANR	1016427	ArgumentList	msg		1016213	1					
ANR	1016428	Argument	msg		1016213	0					
ANR	1016429	Identifier	msg		1016213	0					
ANR	1016430	ReturnStatement	return 1 ;	1803:2:48834:48842	1016213	6	True				
ANR	1016431	PrimaryExpression	1		1016213	0					
ANR	1016432	ExpressionStatement	"result_line = ( string ) reqid + "" NULL"""	1806:1:48850:48887	1016213	7	True				
ANR	1016433	AssignmentExpression	"result_line = ( string ) reqid + "" NULL"""		1016213	0		=			
ANR	1016434	Identifier	result_line		1016213	0					
ANR	1016435	AdditiveExpression	"( string ) reqid + "" NULL"""		1016213	1		+			
ANR	1016436	CastExpression	( string ) reqid		1016213	0					
ANR	1016437	CastTarget	string		1016213	0					
ANR	1016438	Identifier	reqid		1016213	1					
ANR	1016439	PrimaryExpression	""" NULL"""		1016213	1					
ANR	1016440	ExpressionStatement	enqueue_result ( result_line )	1807:1:48890:48917	1016213	8	True				
ANR	1016441	CallExpression	enqueue_result ( result_line )		1016213	0					
ANR	1016442	Callee	enqueue_result		1016213	0					
ANR	1016443	Identifier	enqueue_result		1016213	0					
ANR	1016444	ArgumentList	result_line		1016213	1					
ANR	1016445	Argument	result_line		1016213	0					
ANR	1016446	Identifier	result_line		1016213	0					
ANR	1016447	ReturnStatement	return 0 ;	1809:1:48924:48932	1016213	9	True				
ANR	1016448	PrimaryExpression	0		1016213	0					
ANR	1016449	ReturnType	int		1016213	1					
ANR	1016450	Identifier	thread_cream_proxy_renew		1016213	2					
ANR	1016451	ParameterList	Request * req		1016213	3					
ANR	1016452	Parameter	Request * req	1765:30:47661:47672	1016213	0	True				
ANR	1016453	ParameterType	Request *		1016213	0					
ANR	1016454	Identifier	req		1016213	1					
ANR	1016455	CFGEntryNode	ENTRY		1016213		True				
ANR	1016456	CFGExitNode	EXIT		1016213		True				
ANR	1016457	CFGErrorNode	ERROR		1016213		True				
ANR	1016458	Symbol	& reqid		1016213						
ANR	1016459	Symbol	NULL		1016213						
ANR	1016460	Symbol	* req		1016213						
ANR	1016461	Symbol	count_args		1016213						
ANR	1016462	Symbol	& delgid		1016213						
ANR	1016463	Symbol	cp		1016213						
ANR	1016464	Symbol	& delgservice		1016213						
ANR	1016465	Symbol	reqid		1016213						
ANR	1016466	Symbol	result_line		1016213						
ANR	1016467	Symbol	delgid		1016213						
ANR	1016468	Symbol	delgservice		1016213						
ANR	1016469	Symbol	* * req		1016213						
ANR	1016470	Symbol	req -> input_line		1016213						
ANR	1016471	Symbol	* req -> input_line		1016213						
ANR	1016472	Symbol	arg_cnt		1016213						
ANR	1016473	Symbol	req		1016213						
ANR	1016474	Function	handle_cream_get_CEMon_url	1818:0:49196:49415							
ANR	1016475	FunctionDef	handle_cream_get_CEMon_url (char * * input_line)		1016474	0					
ANR	1016476	CompoundStatement		1819:0:49248:49415	1016474	0					
ANR	1016477	IfStatement	if ( count_args ( input_line ) != 3 )		1016474	0					
ANR	1016478	Condition	count_args ( input_line ) != 3	1820:6:49256:49284	1016474	0	True				
ANR	1016479	EqualityExpression	count_args ( input_line ) != 3		1016474	0		!=			
ANR	1016480	CallExpression	count_args ( input_line )		1016474	0					
ANR	1016481	Callee	count_args		1016474	0					
ANR	1016482	Identifier	count_args		1016474	0					
ANR	1016483	ArgumentList	input_line		1016474	1					
ANR	1016484	Argument	input_line		1016474	0					
ANR	1016485	Identifier	input_line		1016474	0					
ANR	1016486	PrimaryExpression	3		1016474	1					
ANR	1016487	CompoundStatement		2:38:39:39	1016474	1					
ANR	1016488	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	1821:2:49292:49313	1016474	0	True				
ANR	1016489	CallExpression	HANDLE_SYNTAX_ERROR ( )		1016474	0					
ANR	1016490	Callee	HANDLE_SYNTAX_ERROR		1016474	0					
ANR	1016491	Identifier	HANDLE_SYNTAX_ERROR		1016474	0					
ANR	1016492	ArgumentList			1016474	1					
ANR	1016493	ExpressionStatement	"enqueue_request ( input_line , thread_cream_get_CEMon_url )"	1824:1:49320:49377	1016474	1	True				
ANR	1016494	CallExpression	"enqueue_request ( input_line , thread_cream_get_CEMon_url )"		1016474	0					
ANR	1016495	Callee	enqueue_request		1016474	0					
ANR	1016496	Identifier	enqueue_request		1016474	0					
ANR	1016497	ArgumentList	input_line		1016474	1					
ANR	1016498	Argument	input_line		1016474	0					
ANR	1016499	Identifier	input_line		1016474	0					
ANR	1016500	Argument	thread_cream_get_CEMon_url		1016474	1					
ANR	1016501	Identifier	thread_cream_get_CEMon_url		1016474	0					
ANR	1016502	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	1826:1:49382:49400	1016474	2	True				
ANR	1016503	CallExpression	"gahp_printf ( ""S\\n"" )"		1016474	0					
ANR	1016504	Callee	gahp_printf		1016474	0					
ANR	1016505	Identifier	gahp_printf		1016474	0					
ANR	1016506	ArgumentList	"""S\\n"""		1016474	1					
ANR	1016507	Argument	"""S\\n"""		1016474	0					
ANR	1016508	PrimaryExpression	"""S\\n"""		1016474	0					
ANR	1016509	ReturnStatement	return 0 ;	1828:1:49405:49413	1016474	3	True				
ANR	1016510	PrimaryExpression	0		1016474	0					
ANR	1016511	ReturnType	int		1016474	1					
ANR	1016512	Identifier	handle_cream_get_CEMon_url		1016474	2					
ANR	1016513	ParameterList	char * * input_line		1016474	3					
ANR	1016514	Parameter	char * * input_line	1818:32:49228:49244	1016474	0	True				
ANR	1016515	ParameterType	char * *		1016474	0					
ANR	1016516	Identifier	input_line		1016474	1					
ANR	1016517	CFGEntryNode	ENTRY		1016474		True				
ANR	1016518	CFGExitNode	EXIT		1016474		True				
ANR	1016519	Symbol	count_args		1016474						
ANR	1016520	Symbol	input_line		1016474						
ANR	1016521	Symbol	thread_cream_get_CEMon_url		1016474						
ANR	1016522	Function	thread_cream_get_CEMon_url	1831:0:49418:50211							
ANR	1016523	FunctionDef	thread_cream_get_CEMon_url (Request * req)		1016522	0					
ANR	1016524	CompoundStatement		1832:0:49465:50211	1016522	0					
ANR	1016525	IdentifierDeclStatement	"char * reqid , * service ;"	1833:1:49468:49489	1016522	0	True				
ANR	1016526	IdentifierDecl	* reqid		1016522	0					
ANR	1016527	IdentifierDeclType	char *		1016522	0					
ANR	1016528	Identifier	reqid		1016522	1					
ANR	1016529	IdentifierDecl	* service		1016522	1					
ANR	1016530	IdentifierDeclType	char *		1016522	0					
ANR	1016531	Identifier	service		1016522	1					
ANR	1016532	IdentifierDeclStatement	string result_line ;	1834:1:49492:49510	1016522	1	True				
ANR	1016533	IdentifierDecl	result_line		1016522	0					
ANR	1016534	IdentifierDeclType	string		1016522	0					
ANR	1016535	Identifier	result_line		1016522	1					
ANR	1016536	IdentifierDeclStatement	AbsCreamProxy * cp = NULL ;	1835:1:49513:49537	1016522	2	True				
ANR	1016537	IdentifierDecl	* cp = NULL		1016522	0					
ANR	1016538	IdentifierDeclType	AbsCreamProxy *		1016522	0					
ANR	1016539	Identifier	cp		1016522	1					
ANR	1016540	AssignmentExpression	* cp = NULL		1016522	2		=			
ANR	1016541	Identifier	NULL		1016522	0					
ANR	1016542	Identifier	NULL		1016522	1					
ANR	1016543	ExpressionStatement	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"	1837:1:49542:49590	1016522	3	True				
ANR	1016544	CallExpression	"process_string_arg ( req -> input_line [ 1 ] , & reqid )"		1016522	0					
ANR	1016545	Callee	process_string_arg		1016522	0					
ANR	1016546	Identifier	process_string_arg		1016522	0					
ANR	1016547	ArgumentList	req -> input_line [ 1 ]		1016522	1					
ANR	1016548	Argument	req -> input_line [ 1 ]		1016522	0					
ANR	1016549	ArrayIndexing	req -> input_line [ 1 ]		1016522	0					
ANR	1016550	PtrMemberAccess	req -> input_line		1016522	0					
ANR	1016551	Identifier	req		1016522	0					
ANR	1016552	Identifier	input_line		1016522	1					
ANR	1016553	PrimaryExpression	1		1016522	1					
ANR	1016554	Argument	& reqid		1016522	1					
ANR	1016555	UnaryOperationExpression	& reqid		1016522	0					
ANR	1016556	UnaryOperator	&		1016522	0					
ANR	1016557	Identifier	reqid		1016522	1					
ANR	1016558	ExpressionStatement	"process_string_arg ( req -> input_line [ 2 ] , & service )"	1838:1:49593:49643	1016522	4	True				
ANR	1016559	CallExpression	"process_string_arg ( req -> input_line [ 2 ] , & service )"		1016522	0					
ANR	1016560	Callee	process_string_arg		1016522	0					
ANR	1016561	Identifier	process_string_arg		1016522	0					
ANR	1016562	ArgumentList	req -> input_line [ 2 ]		1016522	1					
ANR	1016563	Argument	req -> input_line [ 2 ]		1016522	0					
ANR	1016564	ArrayIndexing	req -> input_line [ 2 ]		1016522	0					
ANR	1016565	PtrMemberAccess	req -> input_line		1016522	0					
ANR	1016566	Identifier	req		1016522	0					
ANR	1016567	Identifier	input_line		1016522	1					
ANR	1016568	PrimaryExpression	2		1016522	1					
ANR	1016569	Argument	& service		1016522	1					
ANR	1016570	UnaryOperationExpression	& service		1016522	0					
ANR	1016571	UnaryOperator	&		1016522	0					
ANR	1016572	Identifier	service		1016522	1					
ANR	1016573	IdentifierDeclStatement	ServiceInfoWrapper siw ;	1840:1:49648:49670	1016522	5	True				
ANR	1016574	IdentifierDecl	siw		1016522	0					
ANR	1016575	IdentifierDeclType	ServiceInfoWrapper		1016522	0					
ANR	1016576	Identifier	siw		1016522	1					
ANR	1016577	TryStatement	try		1016522	6					
ANR	1016578	CompoundStatement		10:5:211:211	1016522	0					
ANR	1016579	ExpressionStatement	"cp = CreamProxyFactory :: make_CreamProxyServiceInfo ( & siw , 0 , DEFAULT_TIMEOUT )"		1016522	0					
ANR	1016580	AssignmentExpression	"cp = CreamProxyFactory :: make_CreamProxyServiceInfo ( & siw , 0 , DEFAULT_TIMEOUT )"		1016522	0		=			
ANR	1016581	Identifier	cp		1016522	0					
ANR	1016582	CallExpression	"CreamProxyFactory :: make_CreamProxyServiceInfo ( & siw , 0 , DEFAULT_TIMEOUT )"		1016522	1					
ANR	1016583	Callee	CreamProxyFactory :: make_CreamProxyServiceInfo		1016522	0					
ANR	1016584	Identifier	CreamProxyFactory :: make_CreamProxyServiceInfo		1016522	0					
ANR	1016585	ArgumentList	& siw		1016522	1					
ANR	1016586	Argument	& siw		1016522	0					
ANR	1016587	UnaryOperationExpression	& siw		1016522	0					
ANR	1016588	UnaryOperator	&		1016522	0					
ANR	1016589	Identifier	siw		1016522	1					
ANR	1016590	Argument	0		1016522	1					
ANR	1016591	PrimaryExpression	0		1016522	0					
ANR	1016592	Argument	DEFAULT_TIMEOUT		1016522	2					
ANR	1016593	Identifier	DEFAULT_TIMEOUT		1016522	0					
ANR	1016594	ExpressionStatement	check_for_factory_error ( cp )		1016522	1					
ANR	1016595	CallExpression	check_for_factory_error ( cp )		1016522	0					
ANR	1016596	Callee	check_for_factory_error		1016522	0					
ANR	1016597	Identifier	check_for_factory_error		1016522	0					
ANR	1016598	ArgumentList	cp		1016522	1					
ANR	1016599	Argument	cp		1016522	0					
ANR	1016600	Identifier	cp		1016522	0					
ANR	1016601	ExpressionStatement	cp -> setCredential ( req -> proxy . c_str ( ) )		1016522	2					
ANR	1016602	CallExpression	cp -> setCredential ( req -> proxy . c_str ( ) )		1016522	0					
ANR	1016603	Callee	cp -> setCredential		1016522	0					
ANR	1016604	PtrMemberAccess	cp -> setCredential		1016522	0					
ANR	1016605	Identifier	cp		1016522	0					
ANR	1016606	Identifier	setCredential		1016522	1					
ANR	1016607	ArgumentList	req -> proxy . c_str ( )		1016522	1					
ANR	1016608	Argument	req -> proxy . c_str ( )		1016522	0					
ANR	1016609	CallExpression	req -> proxy . c_str ( )		1016522	0					
ANR	1016610	Callee	req -> proxy . c_str		1016522	0					
ANR	1016611	MemberAccess	req -> proxy . c_str		1016522	0					
ANR	1016612	PtrMemberAccess	req -> proxy		1016522	0					
ANR	1016613	Identifier	req		1016522	0					
ANR	1016614	Identifier	proxy		1016522	1					
ANR	1016615	Identifier	c_str		1016522	1					
ANR	1016616	ArgumentList			1016522	1					
ANR	1016617	ExpressionStatement	cp -> execute ( service )		1016522	3					
ANR	1016618	CallExpression	cp -> execute ( service )		1016522	0					
ANR	1016619	Callee	cp -> execute		1016522	0					
ANR	1016620	PtrMemberAccess	cp -> execute		1016522	0					
ANR	1016621	Identifier	cp		1016522	0					
ANR	1016622	Identifier	execute		1016522	1					
ANR	1016623	ArgumentList	service		1016522	1					
ANR	1016624	Argument	service		1016522	0					
ANR	1016625	Identifier	service		1016522	0					
ANR	1016626	Statement	delete		1016522	4					
ANR	1016627	ExpressionStatement	cp		1016522	5					
ANR	1016628	Identifier	cp		1016522	0					
ANR	1016629	CatchList			1016522	1					
ANR	1016630	CatchStatement	catch ( std :: exception & ex )		1016522	0					
ANR	1016631	Identifier	ex		1016522	0					
ANR	1016632	CompoundStatement		20:2:465:501	1016522	1					
ANR	1016633	Statement	delete	1850:2:49918:49923	1016522	0	True				
ANR	1016634	ExpressionStatement	cp	1850:9:49925:49927	1016522	1	True				
ANR	1016635	Identifier	cp		1016522	0					
ANR	1016636	IdentifierDeclStatement	char * msg = escape_spaces ( ex . what ( ) ) ;	1851:2:49931:49967	1016522	2	True				
ANR	1016637	IdentifierDecl	* msg = escape_spaces ( ex . what ( ) )		1016522	0					
ANR	1016638	IdentifierDeclType	char *		1016522	0					
ANR	1016639	Identifier	msg		1016522	1					
ANR	1016640	AssignmentExpression	* msg = escape_spaces ( ex . what ( ) )		1016522	2		=			
ANR	1016641	Identifier	msg		1016522	0					
ANR	1016642	CallExpression	escape_spaces ( ex . what ( ) )		1016522	1					
ANR	1016643	Callee	escape_spaces		1016522	0					
ANR	1016644	Identifier	escape_spaces		1016522	0					
ANR	1016645	ArgumentList	ex . what ( )		1016522	1					
ANR	1016646	Argument	ex . what ( )		1016522	0					
ANR	1016647	CallExpression	ex . what ( )		1016522	0					
ANR	1016648	Callee	ex . what		1016522	0					
ANR	1016649	MemberAccess	ex . what		1016522	0					
ANR	1016650	Identifier	ex		1016522	0					
ANR	1016651	Identifier	what		1016522	1					
ANR	1016652	ArgumentList			1016522	1					
ANR	1016653	ExpressionStatement	"result_line = ( string ) reqid + "" CREAM_Get_CEMon_URL\\\\ Error:\\\\ "" + msg"	1852:2:49971:50041	1016522	3	True				
ANR	1016654	AssignmentExpression	"result_line = ( string ) reqid + "" CREAM_Get_CEMon_URL\\\\ Error:\\\\ "" + msg"		1016522	0		=			
ANR	1016655	Identifier	result_line		1016522	0					
ANR	1016656	AdditiveExpression	"( string ) reqid + "" CREAM_Get_CEMon_URL\\\\ Error:\\\\ "" + msg"		1016522	1		+			
ANR	1016657	CastExpression	( string ) reqid		1016522	0					
ANR	1016658	CastTarget	string		1016522	0					
ANR	1016659	Identifier	reqid		1016522	1					
ANR	1016660	AdditiveExpression	""" CREAM_Get_CEMon_URL\\\\ Error:\\\\ "" + msg"		1016522	1		+			
ANR	1016661	PrimaryExpression	""" CREAM_Get_CEMon_URL\\\\ Error:\\\\ """		1016522	0					
ANR	1016662	Identifier	msg		1016522	1					
ANR	1016663	ExpressionStatement	enqueue_result ( result_line )	1853:2:50045:50072	1016522	4	True				
ANR	1016664	CallExpression	enqueue_result ( result_line )		1016522	0					
ANR	1016665	Callee	enqueue_result		1016522	0					
ANR	1016666	Identifier	enqueue_result		1016522	0					
ANR	1016667	ArgumentList	result_line		1016522	1					
ANR	1016668	Argument	result_line		1016522	0					
ANR	1016669	Identifier	result_line		1016522	0					
ANR	1016670	ExpressionStatement	free ( msg )	1854:2:50076:50085	1016522	5	True				
ANR	1016671	CallExpression	free ( msg )		1016522	0					
ANR	1016672	Callee	free		1016522	0					
ANR	1016673	Identifier	free		1016522	0					
ANR	1016674	ArgumentList	msg		1016522	1					
ANR	1016675	Argument	msg		1016522	0					
ANR	1016676	Identifier	msg		1016522	0					
ANR	1016677	ReturnStatement	return 1 ;	1856:2:50092:50100	1016522	6	True				
ANR	1016678	PrimaryExpression	1		1016522	0					
ANR	1016679	ExpressionStatement	"result_line = ( string ) reqid + "" NULL "" + siw . getCEMonURL ( )"	1859:1:50108:50166	1016522	7	True				
ANR	1016680	AssignmentExpression	"result_line = ( string ) reqid + "" NULL "" + siw . getCEMonURL ( )"		1016522	0		=			
ANR	1016681	Identifier	result_line		1016522	0					
ANR	1016682	AdditiveExpression	"( string ) reqid + "" NULL "" + siw . getCEMonURL ( )"		1016522	1		+			
ANR	1016683	CastExpression	( string ) reqid		1016522	0					
ANR	1016684	CastTarget	string		1016522	0					
ANR	1016685	Identifier	reqid		1016522	1					
ANR	1016686	AdditiveExpression	""" NULL "" + siw . getCEMonURL ( )"		1016522	1		+			
ANR	1016687	PrimaryExpression	""" NULL """		1016522	0					
ANR	1016688	CallExpression	siw . getCEMonURL ( )		1016522	1					
ANR	1016689	Callee	siw . getCEMonURL		1016522	0					
ANR	1016690	MemberAccess	siw . getCEMonURL		1016522	0					
ANR	1016691	Identifier	siw		1016522	0					
ANR	1016692	Identifier	getCEMonURL		1016522	1					
ANR	1016693	ArgumentList			1016522	1					
ANR	1016694	ExpressionStatement	enqueue_result ( result_line )	1860:1:50169:50196	1016522	8	True				
ANR	1016695	CallExpression	enqueue_result ( result_line )		1016522	0					
ANR	1016696	Callee	enqueue_result		1016522	0					
ANR	1016697	Identifier	enqueue_result		1016522	0					
ANR	1016698	ArgumentList	result_line		1016522	1					
ANR	1016699	Argument	result_line		1016522	0					
ANR	1016700	Identifier	result_line		1016522	0					
ANR	1016701	ReturnStatement	return 0 ;	1862:1:50201:50209	1016522	9	True				
ANR	1016702	PrimaryExpression	0		1016522	0					
ANR	1016703	ReturnType	int		1016522	1					
ANR	1016704	Identifier	thread_cream_get_CEMon_url		1016522	2					
ANR	1016705	ParameterList	Request * req		1016522	3					
ANR	1016706	Parameter	Request * req	1831:32:49450:49461	1016522	0	True				
ANR	1016707	ParameterType	Request *		1016522	0					
ANR	1016708	Identifier	req		1016522	1					
ANR	1016709	CFGEntryNode	ENTRY		1016522		True				
ANR	1016710	CFGExitNode	EXIT		1016522		True				
ANR	1016711	CFGErrorNode	ERROR		1016522		True				
ANR	1016712	Symbol	siw		1016522						
ANR	1016713	Symbol	siw . getCEMonURL		1016522						
ANR	1016714	Symbol	& reqid		1016522						
ANR	1016715	Symbol	NULL		1016522						
ANR	1016716	Symbol	* req		1016522						
ANR	1016717	Symbol	& service		1016522						
ANR	1016718	Symbol	cp		1016522						
ANR	1016719	Symbol	reqid		1016522						
ANR	1016720	Symbol	result_line		1016522						
ANR	1016721	Symbol	* * req		1016522						
ANR	1016722	Symbol	service		1016522						
ANR	1016723	Symbol	req -> input_line		1016522						
ANR	1016724	Symbol	* req -> input_line		1016522						
ANR	1016725	Symbol	req		1016522						
ANR	1016726	Function	handle_results	1870:0:50425:50809							
ANR	1016727	FunctionDef	handle_results (char * * input_line)		1016726	0					
ANR	1016728	CompoundStatement		1871:0:50465:50809	1016726	0					
ANR	1016729	ExpressionStatement	pthread_mutex_lock ( & resultQueueLock )	1872:1:50468:50506	1016726	0	True				
ANR	1016730	CallExpression	pthread_mutex_lock ( & resultQueueLock )		1016726	0					
ANR	1016731	Callee	pthread_mutex_lock		1016726	0					
ANR	1016732	Identifier	pthread_mutex_lock		1016726	0					
ANR	1016733	ArgumentList	& resultQueueLock		1016726	1					
ANR	1016734	Argument	& resultQueueLock		1016726	0					
ANR	1016735	UnaryOperationExpression	& resultQueueLock		1016726	0					
ANR	1016736	UnaryOperator	&		1016726	0					
ANR	1016737	Identifier	resultQueueLock		1016726	1					
ANR	1016738	ExpressionStatement	results_pending = false	1874:1:50510:50533	1016726	1	True				
ANR	1016739	AssignmentExpression	results_pending = false		1016726	0		=			
ANR	1016740	Identifier	results_pending		1016726	0					
ANR	1016741	Identifier	false		1016726	1					
ANR	1016742	ExpressionStatement	"gahp_printf ( ""S %d\\n"" , resultQueue . size ( ) )"	1876:1:50563:50606	1016726	2	True				
ANR	1016743	CallExpression	"gahp_printf ( ""S %d\\n"" , resultQueue . size ( ) )"		1016726	0					
ANR	1016744	Callee	gahp_printf		1016726	0					
ANR	1016745	Identifier	gahp_printf		1016726	0					
ANR	1016746	ArgumentList	"""S %d\\n"""		1016726	1					
ANR	1016747	Argument	"""S %d\\n"""		1016726	0					
ANR	1016748	PrimaryExpression	"""S %d\\n"""		1016726	0					
ANR	1016749	Argument	resultQueue . size ( )		1016726	1					
ANR	1016750	CallExpression	resultQueue . size ( )		1016726	0					
ANR	1016751	Callee	resultQueue . size		1016726	0					
ANR	1016752	MemberAccess	resultQueue . size		1016726	0					
ANR	1016753	Identifier	resultQueue		1016726	0					
ANR	1016754	Identifier	size		1016726	1					
ANR	1016755	ArgumentList			1016726	1					
ANR	1016756	WhileStatement	while ( ! resultQueue . empty ( ) )		1016726	3					
ANR	1016757	Condition	! resultQueue . empty ( )	1878:9:50619:50639	1016726	0	True				
ANR	1016758	UnaryOperationExpression	! resultQueue . empty ( )		1016726	0					
ANR	1016759	UnaryOperator	!		1016726	0					
ANR	1016760	CallExpression	resultQueue . empty ( )		1016726	1					
ANR	1016761	Callee	resultQueue . empty		1016726	0					
ANR	1016762	MemberAccess	resultQueue . empty		1016726	0					
ANR	1016763	Identifier	resultQueue		1016726	0					
ANR	1016764	Identifier	empty		1016726	1					
ANR	1016765	ArgumentList			1016726	1					
ANR	1016766	CompoundStatement		8:32:176:176	1016726	1					
ANR	1016767	ExpressionStatement	"gahp_printf ( ""%s\\n"" , ( resultQueue . front ( ) ) . c_str ( ) )"	1879:2:50646:50698	1016726	0	True				
ANR	1016768	CallExpression	"gahp_printf ( ""%s\\n"" , ( resultQueue . front ( ) ) . c_str ( ) )"		1016726	0					
ANR	1016769	Callee	gahp_printf		1016726	0					
ANR	1016770	Identifier	gahp_printf		1016726	0					
ANR	1016771	ArgumentList	"""%s\\n"""		1016726	1					
ANR	1016772	Argument	"""%s\\n"""		1016726	0					
ANR	1016773	PrimaryExpression	"""%s\\n"""		1016726	0					
ANR	1016774	Argument	( resultQueue . front ( ) ) . c_str ( )		1016726	1					
ANR	1016775	CallExpression	( resultQueue . front ( ) ) . c_str ( )		1016726	0					
ANR	1016776	Callee	( resultQueue . front ( ) ) . c_str		1016726	0					
ANR	1016777	MemberAccess	( resultQueue . front ( ) ) . c_str		1016726	0					
ANR	1016778	CallExpression	resultQueue . front ( )		1016726	0					
ANR	1016779	Callee	resultQueue . front		1016726	0					
ANR	1016780	MemberAccess	resultQueue . front		1016726	0					
ANR	1016781	Identifier	resultQueue		1016726	0					
ANR	1016782	Identifier	front		1016726	1					
ANR	1016783	ArgumentList			1016726	1					
ANR	1016784	Identifier	c_str		1016726	1					
ANR	1016785	ArgumentList			1016726	1					
ANR	1016786	ExpressionStatement	resultQueue . pop ( )	1880:2:50702:50719	1016726	1	True				
ANR	1016787	CallExpression	resultQueue . pop ( )		1016726	0					
ANR	1016788	Callee	resultQueue . pop		1016726	0					
ANR	1016789	MemberAccess	resultQueue . pop		1016726	0					
ANR	1016790	Identifier	resultQueue		1016726	0					
ANR	1016791	Identifier	pop		1016726	1					
ANR	1016792	ArgumentList			1016726	1					
ANR	1016793	ExpressionStatement	pthread_mutex_unlock ( & resultQueueLock )	1883:1:50727:50767	1016726	4	True				
ANR	1016794	CallExpression	pthread_mutex_unlock ( & resultQueueLock )		1016726	0					
ANR	1016795	Callee	pthread_mutex_unlock		1016726	0					
ANR	1016796	Identifier	pthread_mutex_unlock		1016726	0					
ANR	1016797	ArgumentList	& resultQueueLock		1016726	1					
ANR	1016798	Argument	& resultQueueLock		1016726	0					
ANR	1016799	UnaryOperationExpression	& resultQueueLock		1016726	0					
ANR	1016800	UnaryOperator	&		1016726	0					
ANR	1016801	Identifier	resultQueueLock		1016726	1					
ANR	1016802	ExpressionStatement	free_args ( input_line )	1885:1:50771:50794	1016726	5	True				
ANR	1016803	CallExpression	free_args ( input_line )		1016726	0					
ANR	1016804	Callee	free_args		1016726	0					
ANR	1016805	Identifier	free_args		1016726	0					
ANR	1016806	ArgumentList	input_line		1016726	1					
ANR	1016807	Argument	input_line		1016726	0					
ANR	1016808	Identifier	input_line		1016726	0					
ANR	1016809	ReturnStatement	return 0 ;	1887:1:50799:50807	1016726	6	True				
ANR	1016810	PrimaryExpression	0		1016726	0					
ANR	1016811	ReturnType	int		1016726	1					
ANR	1016812	Identifier	handle_results		1016726	2					
ANR	1016813	ParameterList	char * * input_line		1016726	3					
ANR	1016814	Parameter	char * * input_line	1870:20:50445:50461	1016726	0	True				
ANR	1016815	ParameterType	char * *		1016726	0					
ANR	1016816	Identifier	input_line		1016726	1					
ANR	1016817	CFGEntryNode	ENTRY		1016726		True				
ANR	1016818	CFGExitNode	EXIT		1016726		True				
ANR	1016819	Symbol	resultQueue . front		1016726						
ANR	1016820	Symbol	resultQueue		1016726						
ANR	1016821	Symbol	resultQueue . size		1016726						
ANR	1016822	Symbol	resultQueue . empty		1016726						
ANR	1016823	Symbol	false		1016726						
ANR	1016824	Symbol	input_line		1016726						
ANR	1016825	Symbol	( resultQueue . front ( ) ) . c_str		1016726						
ANR	1016826	Symbol	& resultQueueLock		1016726						
ANR	1016827	Symbol	results_pending		1016726						
ANR	1016828	Function	handle_version	1895:0:51016:51138							
ANR	1016829	FunctionDef	handle_version (char * * input_line)		1016828	0					
ANR	1016830	CompoundStatement		1896:0:51056:51138	1016828	0					
ANR	1016831	ExpressionStatement	"gahp_printf ( ""S %s\\n"" , VersionString )"	1897:1:51059:51095	1016828	0	True				
ANR	1016832	CallExpression	"gahp_printf ( ""S %s\\n"" , VersionString )"		1016828	0					
ANR	1016833	Callee	gahp_printf		1016828	0					
ANR	1016834	Identifier	gahp_printf		1016828	0					
ANR	1016835	ArgumentList	"""S %s\\n"""		1016828	1					
ANR	1016836	Argument	"""S %s\\n"""		1016828	0					
ANR	1016837	PrimaryExpression	"""S %s\\n"""		1016828	0					
ANR	1016838	Argument	VersionString		1016828	1					
ANR	1016839	Identifier	VersionString		1016828	0					
ANR	1016840	ExpressionStatement	free_args ( input_line )	1899:1:51100:51123	1016828	1	True				
ANR	1016841	CallExpression	free_args ( input_line )		1016828	0					
ANR	1016842	Callee	free_args		1016828	0					
ANR	1016843	Identifier	free_args		1016828	0					
ANR	1016844	ArgumentList	input_line		1016828	1					
ANR	1016845	Argument	input_line		1016828	0					
ANR	1016846	Identifier	input_line		1016828	0					
ANR	1016847	ReturnStatement	return 0 ;	1901:1:51128:51136	1016828	2	True				
ANR	1016848	PrimaryExpression	0		1016828	0					
ANR	1016849	ReturnType	int		1016828	1					
ANR	1016850	Identifier	handle_version		1016828	2					
ANR	1016851	ParameterList	char * * input_line		1016828	3					
ANR	1016852	Parameter	char * * input_line	1895:20:51036:51052	1016828	0	True				
ANR	1016853	ParameterType	char * *		1016828	0					
ANR	1016854	Identifier	input_line		1016828	1					
ANR	1016855	CFGEntryNode	ENTRY		1016828		True				
ANR	1016856	CFGExitNode	EXIT		1016828		True				
ANR	1016857	Symbol	VersionString		1016828						
ANR	1016858	Symbol	input_line		1016828						
ANR	1016859	Function	handle_response_prefix	1910:0:51384:51935							
ANR	1016860	FunctionDef	handle_response_prefix (char * * input_line)		1016859	0					
ANR	1016861	CompoundStatement		1911:0:51432:51935	1016859	0					
ANR	1016862	IdentifierDeclStatement	char * prefix ;	1912:1:51435:51447	1016859	0	True				
ANR	1016863	IdentifierDecl	* prefix		1016859	0					
ANR	1016864	IdentifierDeclType	char *		1016859	0					
ANR	1016865	Identifier	prefix		1016859	1					
ANR	1016866	IfStatement	if ( count_args ( input_line ) != 2 )		1016859	1					
ANR	1016867	Condition	count_args ( input_line ) != 2	1914:6:51457:51485	1016859	0	True				
ANR	1016868	EqualityExpression	count_args ( input_line ) != 2		1016859	0		!=			
ANR	1016869	CallExpression	count_args ( input_line )		1016859	0					
ANR	1016870	Callee	count_args		1016859	0					
ANR	1016871	Identifier	count_args		1016859	0					
ANR	1016872	ArgumentList	input_line		1016859	1					
ANR	1016873	Argument	input_line		1016859	0					
ANR	1016874	Identifier	input_line		1016859	0					
ANR	1016875	PrimaryExpression	2		1016859	1					
ANR	1016876	CompoundStatement		4:38:56:56	1016859	1					
ANR	1016877	ForStatement	for ( int i = 0 ; input_line [ i ] ; i ++ )		1016859	0					
ANR	1016878	ForInit	int i = 0 ;	1915:6:51497:51504	1016859	0	True				
ANR	1016879	IdentifierDeclStatement	int i = 0 ;		1016859	0					
ANR	1016880	IdentifierDecl	i = 0		1016859	0					
ANR	1016881	IdentifierDeclType	int		1016859	0					
ANR	1016882	Identifier	i		1016859	1					
ANR	1016883	AssignmentExpression	i = 0		1016859	2		=			
ANR	1016884	Identifier	i		1016859	0					
ANR	1016885	PrimaryExpression	0		1016859	1					
ANR	1016886	Condition	input_line [ i ]	1915:14:51505:51517	1016859	1	True				
ANR	1016887	ArrayIndexing	input_line [ i ]		1016859	0					
ANR	1016888	Identifier	input_line		1016859	0					
ANR	1016889	Identifier	i		1016859	1					
ANR	1016890	PostIncDecOperationExpression	i ++	1915:28:51519:51521	1016859	2	True				
ANR	1016891	Identifier	i		1016859	0					
ANR	1016892	IncDec	++		1016859	1					
ANR	1016893	CompoundStatement		5:32:90:90	1016859	3					
ANR	1016894	ExpressionStatement	"fprintf ( stderr , ""input_line[%d]=\\""%s\\"" (len=%d)\\n"" , i , input_line [ i ] , strlen ( input_line [ i ] ) )"	1915:33:51524:51612	1016859	0	True				
ANR	1016895	CallExpression	"fprintf ( stderr , ""input_line[%d]=\\""%s\\"" (len=%d)\\n"" , i , input_line [ i ] , strlen ( input_line [ i ] ) )"		1016859	0					
ANR	1016896	Callee	fprintf		1016859	0					
ANR	1016897	Identifier	fprintf		1016859	0					
ANR	1016898	ArgumentList	stderr		1016859	1					
ANR	1016899	Argument	stderr		1016859	0					
ANR	1016900	Identifier	stderr		1016859	0					
ANR	1016901	Argument	"""input_line[%d]=\\""%s\\"" (len=%d)\\n"""		1016859	1					
ANR	1016902	PrimaryExpression	"""input_line[%d]=\\""%s\\"" (len=%d)\\n"""		1016859	0					
ANR	1016903	Argument	i		1016859	2					
ANR	1016904	Identifier	i		1016859	0					
ANR	1016905	Argument	input_line [ i ]		1016859	3					
ANR	1016906	ArrayIndexing	input_line [ i ]		1016859	0					
ANR	1016907	Identifier	input_line		1016859	0					
ANR	1016908	Identifier	i		1016859	1					
ANR	1016909	Argument	strlen ( input_line [ i ] )		1016859	4					
ANR	1016910	CallExpression	strlen ( input_line [ i ] )		1016859	0					
ANR	1016911	Callee	strlen		1016859	0					
ANR	1016912	Identifier	strlen		1016859	0					
ANR	1016913	ArgumentList	input_line [ i ]		1016859	1					
ANR	1016914	Argument	input_line [ i ]		1016859	0					
ANR	1016915	ArrayIndexing	input_line [ i ]		1016859	0					
ANR	1016916	Identifier	input_line		1016859	0					
ANR	1016917	Identifier	i		1016859	1					
ANR	1016918	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	1916:2:51617:51638	1016859	1	True				
ANR	1016919	CallExpression	HANDLE_SYNTAX_ERROR ( )		1016859	0					
ANR	1016920	Callee	HANDLE_SYNTAX_ERROR		1016859	0					
ANR	1016921	Identifier	HANDLE_SYNTAX_ERROR		1016859	0					
ANR	1016922	ArgumentList			1016859	1					
ANR	1016923	ExpressionStatement	"process_string_arg ( input_line [ 1 ] , & prefix )"	1919:1:51645:51689	1016859	2	True				
ANR	1016924	CallExpression	"process_string_arg ( input_line [ 1 ] , & prefix )"		1016859	0					
ANR	1016925	Callee	process_string_arg		1016859	0					
ANR	1016926	Identifier	process_string_arg		1016859	0					
ANR	1016927	ArgumentList	input_line [ 1 ]		1016859	1					
ANR	1016928	Argument	input_line [ 1 ]		1016859	0					
ANR	1016929	ArrayIndexing	input_line [ 1 ]		1016859	0					
ANR	1016930	Identifier	input_line		1016859	0					
ANR	1016931	PrimaryExpression	1		1016859	1					
ANR	1016932	Argument	& prefix		1016859	1					
ANR	1016933	UnaryOperationExpression	& prefix		1016859	0					
ANR	1016934	UnaryOperator	&		1016859	0					
ANR	1016935	Identifier	prefix		1016859	1					
ANR	1016936	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	1921:1:51693:51711	1016859	3	True				
ANR	1016937	CallExpression	"gahp_printf ( ""S\\n"" )"		1016859	0					
ANR	1016938	Callee	gahp_printf		1016859	0					
ANR	1016939	Identifier	gahp_printf		1016859	0					
ANR	1016940	ArgumentList	"""S\\n"""		1016859	1					
ANR	1016941	Argument	"""S\\n"""		1016859	0					
ANR	1016942	PrimaryExpression	"""S\\n"""		1016859	0					
ANR	1016943	ExpressionStatement	pthread_mutex_lock ( & outputLock )	1923:1:51715:51748	1016859	4	True				
ANR	1016944	CallExpression	pthread_mutex_lock ( & outputLock )		1016859	0					
ANR	1016945	Callee	pthread_mutex_lock		1016859	0					
ANR	1016946	Identifier	pthread_mutex_lock		1016859	0					
ANR	1016947	ArgumentList	& outputLock		1016859	1					
ANR	1016948	Argument	& outputLock		1016859	0					
ANR	1016949	UnaryOperationExpression	& outputLock		1016859	0					
ANR	1016950	UnaryOperator	&		1016859	0					
ANR	1016951	Identifier	outputLock		1016859	1					
ANR	1016952	IfStatement	if ( response_prefix )		1016859	5					
ANR	1016953	Condition	response_prefix	1925:5:51756:51770	1016859	0	True				
ANR	1016954	Identifier	response_prefix		1016859	0					
ANR	1016955	ExpressionStatement	free ( response_prefix )	1926:2:51775:51796	1016859	1	True				
ANR	1016956	CallExpression	free ( response_prefix )		1016859	0					
ANR	1016957	Callee	free		1016859	0					
ANR	1016958	Identifier	free		1016859	0					
ANR	1016959	ArgumentList	response_prefix		1016859	1					
ANR	1016960	Argument	response_prefix		1016859	0					
ANR	1016961	Identifier	response_prefix		1016859	0					
ANR	1016962	IfStatement	if ( prefix )		1016859	6					
ANR	1016963	Condition	prefix	1928:5:51804:51809	1016859	0	True				
ANR	1016964	Identifier	prefix		1016859	0					
ANR	1016965	CompoundStatement		18:13:379:379	1016859	1					
ANR	1016966	ExpressionStatement	response_prefix = strdup ( prefix )	1929:2:51816:51850	1016859	0	True				
ANR	1016967	AssignmentExpression	response_prefix = strdup ( prefix )		1016859	0		=			
ANR	1016968	Identifier	response_prefix		1016859	0					
ANR	1016969	CallExpression	strdup ( prefix )		1016859	1					
ANR	1016970	Callee	strdup		1016859	0					
ANR	1016971	Identifier	strdup		1016859	0					
ANR	1016972	ArgumentList	prefix		1016859	1					
ANR	1016973	Argument	prefix		1016859	0					
ANR	1016974	Identifier	prefix		1016859	0					
ANR	1016975	ExpressionStatement	pthread_mutex_unlock ( & outputLock )	1932:1:51857:51892	1016859	7	True				
ANR	1016976	CallExpression	pthread_mutex_unlock ( & outputLock )		1016859	0					
ANR	1016977	Callee	pthread_mutex_unlock		1016859	0					
ANR	1016978	Identifier	pthread_mutex_unlock		1016859	0					
ANR	1016979	ArgumentList	& outputLock		1016859	1					
ANR	1016980	Argument	& outputLock		1016859	0					
ANR	1016981	UnaryOperationExpression	& outputLock		1016859	0					
ANR	1016982	UnaryOperator	&		1016859	0					
ANR	1016983	Identifier	outputLock		1016859	1					
ANR	1016984	ExpressionStatement	free_args ( input_line )	1934:1:51897:51920	1016859	8	True				
ANR	1016985	CallExpression	free_args ( input_line )		1016859	0					
ANR	1016986	Callee	free_args		1016859	0					
ANR	1016987	Identifier	free_args		1016859	0					
ANR	1016988	ArgumentList	input_line		1016859	1					
ANR	1016989	Argument	input_line		1016859	0					
ANR	1016990	Identifier	input_line		1016859	0					
ANR	1016991	ReturnStatement	return 0 ;	1936:1:51925:51933	1016859	9	True				
ANR	1016992	PrimaryExpression	0		1016859	0					
ANR	1016993	ReturnType	int		1016859	1					
ANR	1016994	Identifier	handle_response_prefix		1016859	2					
ANR	1016995	ParameterList	char * * input_line		1016859	3					
ANR	1016996	Parameter	char * * input_line	1910:28:51412:51428	1016859	0	True				
ANR	1016997	ParameterType	char * *		1016859	0					
ANR	1016998	Identifier	input_line		1016859	1					
ANR	1016999	CFGEntryNode	ENTRY		1016859		True				
ANR	1017000	CFGExitNode	EXIT		1016859		True				
ANR	1017001	Symbol	* input_line		1016859						
ANR	1017002	Symbol	strlen		1016859						
ANR	1017003	Symbol	* i		1016859						
ANR	1017004	Symbol	& prefix		1016859						
ANR	1017005	Symbol	& outputLock		1016859						
ANR	1017006	Symbol	prefix		1016859						
ANR	1017007	Symbol	count_args		1016859						
ANR	1017008	Symbol	i		1016859						
ANR	1017009	Symbol	input_line		1016859						
ANR	1017010	Symbol	response_prefix		1016859						
ANR	1017011	Symbol	strdup		1016859						
ANR	1017012	Symbol	stderr		1016859						
ANR	1017013	Function	handle_async_mode_on	1944:0:52149:52386							
ANR	1017014	FunctionDef	handle_async_mode_on (char * * input_line)		1017013	0					
ANR	1017015	CompoundStatement		1945:0:52195:52386	1017013	0					
ANR	1017016	ExpressionStatement	pthread_mutex_lock ( & resultQueueLock )	1946:1:52198:52236	1017013	0	True				
ANR	1017017	CallExpression	pthread_mutex_lock ( & resultQueueLock )		1017013	0					
ANR	1017018	Callee	pthread_mutex_lock		1017013	0					
ANR	1017019	Identifier	pthread_mutex_lock		1017013	0					
ANR	1017020	ArgumentList	& resultQueueLock		1017013	1					
ANR	1017021	Argument	& resultQueueLock		1017013	0					
ANR	1017022	UnaryOperationExpression	& resultQueueLock		1017013	0					
ANR	1017023	UnaryOperator	&		1017013	0					
ANR	1017024	Identifier	resultQueueLock		1017013	1					
ANR	1017025	ExpressionStatement	async = true	1947:1:52239:52251	1017013	1	True				
ANR	1017026	AssignmentExpression	async = true		1017013	0		=			
ANR	1017027	Identifier	async		1017013	0					
ANR	1017028	Identifier	true		1017013	1					
ANR	1017029	ExpressionStatement	results_pending = false	1948:1:52254:52277	1017013	2	True				
ANR	1017030	AssignmentExpression	results_pending = false		1017013	0		=			
ANR	1017031	Identifier	results_pending		1017013	0					
ANR	1017032	Identifier	false		1017013	1					
ANR	1017033	ExpressionStatement	pthread_mutex_unlock ( & resultQueueLock )	1949:1:52280:52320	1017013	3	True				
ANR	1017034	CallExpression	pthread_mutex_unlock ( & resultQueueLock )		1017013	0					
ANR	1017035	Callee	pthread_mutex_unlock		1017013	0					
ANR	1017036	Identifier	pthread_mutex_unlock		1017013	0					
ANR	1017037	ArgumentList	& resultQueueLock		1017013	1					
ANR	1017038	Argument	& resultQueueLock		1017013	0					
ANR	1017039	UnaryOperationExpression	& resultQueueLock		1017013	0					
ANR	1017040	UnaryOperator	&		1017013	0					
ANR	1017041	Identifier	resultQueueLock		1017013	1					
ANR	1017042	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	1951:1:52325:52343	1017013	4	True				
ANR	1017043	CallExpression	"gahp_printf ( ""S\\n"" )"		1017013	0					
ANR	1017044	Callee	gahp_printf		1017013	0					
ANR	1017045	Identifier	gahp_printf		1017013	0					
ANR	1017046	ArgumentList	"""S\\n"""		1017013	1					
ANR	1017047	Argument	"""S\\n"""		1017013	0					
ANR	1017048	PrimaryExpression	"""S\\n"""		1017013	0					
ANR	1017049	ExpressionStatement	free_args ( input_line )	1953:1:52348:52371	1017013	5	True				
ANR	1017050	CallExpression	free_args ( input_line )		1017013	0					
ANR	1017051	Callee	free_args		1017013	0					
ANR	1017052	Identifier	free_args		1017013	0					
ANR	1017053	ArgumentList	input_line		1017013	1					
ANR	1017054	Argument	input_line		1017013	0					
ANR	1017055	Identifier	input_line		1017013	0					
ANR	1017056	ReturnStatement	return 0 ;	1955:1:52376:52384	1017013	6	True				
ANR	1017057	PrimaryExpression	0		1017013	0					
ANR	1017058	ReturnType	int		1017013	1					
ANR	1017059	Identifier	handle_async_mode_on		1017013	2					
ANR	1017060	ParameterList	char * * input_line		1017013	3					
ANR	1017061	Parameter	char * * input_line	1944:26:52175:52191	1017013	0	True				
ANR	1017062	ParameterType	char * *		1017013	0					
ANR	1017063	Identifier	input_line		1017013	1					
ANR	1017064	CFGEntryNode	ENTRY		1017013		True				
ANR	1017065	CFGExitNode	EXIT		1017013		True				
ANR	1017066	Symbol	async		1017013						
ANR	1017067	Symbol	true		1017013						
ANR	1017068	Symbol	false		1017013						
ANR	1017069	Symbol	input_line		1017013						
ANR	1017070	Symbol	& resultQueueLock		1017013						
ANR	1017071	Symbol	results_pending		1017013						
ANR	1017072	Function	handle_async_mode_off	1963:0:52602:52841							
ANR	1017073	FunctionDef	handle_async_mode_off (char * * input_line)		1017072	0					
ANR	1017074	CompoundStatement		1964:0:52649:52841	1017072	0					
ANR	1017075	ExpressionStatement	pthread_mutex_lock ( & resultQueueLock )	1965:1:52652:52690	1017072	0	True				
ANR	1017076	CallExpression	pthread_mutex_lock ( & resultQueueLock )		1017072	0					
ANR	1017077	Callee	pthread_mutex_lock		1017072	0					
ANR	1017078	Identifier	pthread_mutex_lock		1017072	0					
ANR	1017079	ArgumentList	& resultQueueLock		1017072	1					
ANR	1017080	Argument	& resultQueueLock		1017072	0					
ANR	1017081	UnaryOperationExpression	& resultQueueLock		1017072	0					
ANR	1017082	UnaryOperator	&		1017072	0					
ANR	1017083	Identifier	resultQueueLock		1017072	1					
ANR	1017084	ExpressionStatement	async = false	1966:1:52693:52706	1017072	1	True				
ANR	1017085	AssignmentExpression	async = false		1017072	0		=			
ANR	1017086	Identifier	async		1017072	0					
ANR	1017087	Identifier	false		1017072	1					
ANR	1017088	ExpressionStatement	results_pending = false	1967:1:52709:52732	1017072	2	True				
ANR	1017089	AssignmentExpression	results_pending = false		1017072	0		=			
ANR	1017090	Identifier	results_pending		1017072	0					
ANR	1017091	Identifier	false		1017072	1					
ANR	1017092	ExpressionStatement	pthread_mutex_unlock ( & resultQueueLock )	1968:1:52735:52775	1017072	3	True				
ANR	1017093	CallExpression	pthread_mutex_unlock ( & resultQueueLock )		1017072	0					
ANR	1017094	Callee	pthread_mutex_unlock		1017072	0					
ANR	1017095	Identifier	pthread_mutex_unlock		1017072	0					
ANR	1017096	ArgumentList	& resultQueueLock		1017072	1					
ANR	1017097	Argument	& resultQueueLock		1017072	0					
ANR	1017098	UnaryOperationExpression	& resultQueueLock		1017072	0					
ANR	1017099	UnaryOperator	&		1017072	0					
ANR	1017100	Identifier	resultQueueLock		1017072	1					
ANR	1017101	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	1970:1:52780:52798	1017072	4	True				
ANR	1017102	CallExpression	"gahp_printf ( ""S\\n"" )"		1017072	0					
ANR	1017103	Callee	gahp_printf		1017072	0					
ANR	1017104	Identifier	gahp_printf		1017072	0					
ANR	1017105	ArgumentList	"""S\\n"""		1017072	1					
ANR	1017106	Argument	"""S\\n"""		1017072	0					
ANR	1017107	PrimaryExpression	"""S\\n"""		1017072	0					
ANR	1017108	ExpressionStatement	free_args ( input_line )	1972:1:52803:52826	1017072	5	True				
ANR	1017109	CallExpression	free_args ( input_line )		1017072	0					
ANR	1017110	Callee	free_args		1017072	0					
ANR	1017111	Identifier	free_args		1017072	0					
ANR	1017112	ArgumentList	input_line		1017072	1					
ANR	1017113	Argument	input_line		1017072	0					
ANR	1017114	Identifier	input_line		1017072	0					
ANR	1017115	ReturnStatement	return 0 ;	1974:1:52831:52839	1017072	6	True				
ANR	1017116	PrimaryExpression	0		1017072	0					
ANR	1017117	ReturnType	int		1017072	1					
ANR	1017118	Identifier	handle_async_mode_off		1017072	2					
ANR	1017119	ParameterList	char * * input_line		1017072	3					
ANR	1017120	Parameter	char * * input_line	1963:27:52629:52645	1017072	0	True				
ANR	1017121	ParameterType	char * *		1017072	0					
ANR	1017122	Identifier	input_line		1017072	1					
ANR	1017123	CFGEntryNode	ENTRY		1017072		True				
ANR	1017124	CFGExitNode	EXIT		1017072		True				
ANR	1017125	Symbol	async		1017072						
ANR	1017126	Symbol	false		1017072						
ANR	1017127	Symbol	input_line		1017072						
ANR	1017128	Symbol	& resultQueueLock		1017072						
ANR	1017129	Symbol	results_pending		1017072						
ANR	1017130	Function	handle_commands	1982:0:53040:53161							
ANR	1017131	FunctionDef	handle_commands (char * * input_line)		1017130	0					
ANR	1017132	CompoundStatement		1983:0:53081:53161	1017130	0					
ANR	1017133	ExpressionStatement	"gahp_printf ( ""S %s\\n"" , commands_list )"	1984:1:53084:53120	1017130	0	True				
ANR	1017134	CallExpression	"gahp_printf ( ""S %s\\n"" , commands_list )"		1017130	0					
ANR	1017135	Callee	gahp_printf		1017130	0					
ANR	1017136	Identifier	gahp_printf		1017130	0					
ANR	1017137	ArgumentList	"""S %s\\n"""		1017130	1					
ANR	1017138	Argument	"""S %s\\n"""		1017130	0					
ANR	1017139	PrimaryExpression	"""S %s\\n"""		1017130	0					
ANR	1017140	Argument	commands_list		1017130	1					
ANR	1017141	Identifier	commands_list		1017130	0					
ANR	1017142	ExpressionStatement	free_args ( input_line )	1985:1:53123:53146	1017130	1	True				
ANR	1017143	CallExpression	free_args ( input_line )		1017130	0					
ANR	1017144	Callee	free_args		1017130	0					
ANR	1017145	Identifier	free_args		1017130	0					
ANR	1017146	ArgumentList	input_line		1017130	1					
ANR	1017147	Argument	input_line		1017130	0					
ANR	1017148	Identifier	input_line		1017130	0					
ANR	1017149	ReturnStatement	return 0 ;	1987:1:53151:53159	1017130	2	True				
ANR	1017150	PrimaryExpression	0		1017130	0					
ANR	1017151	ReturnType	int		1017130	1					
ANR	1017152	Identifier	handle_commands		1017130	2					
ANR	1017153	ParameterList	char * * input_line		1017130	3					
ANR	1017154	Parameter	char * * input_line	1982:21:53061:53077	1017130	0	True				
ANR	1017155	ParameterType	char * *		1017130	0					
ANR	1017156	Identifier	input_line		1017130	1					
ANR	1017157	CFGEntryNode	ENTRY		1017130		True				
ANR	1017158	CFGExitNode	EXIT		1017130		True				
ANR	1017159	Symbol	commands_list		1017130						
ANR	1017160	Symbol	input_line		1017130						
ANR	1017161	Function	handle_quit	1995:0:53365:53521							
ANR	1017162	FunctionDef	handle_quit (char * * input_line)		1017161	0					
ANR	1017163	CompoundStatement		1996:0:53402:53521	1017161	0					
ANR	1017164	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	1997:1:53405:53423	1017161	0	True				
ANR	1017165	CallExpression	"gahp_printf ( ""S\\n"" )"		1017161	0					
ANR	1017166	Callee	gahp_printf		1017161	0					
ANR	1017167	Identifier	gahp_printf		1017161	0					
ANR	1017168	ArgumentList	"""S\\n"""		1017161	1					
ANR	1017169	Argument	"""S\\n"""		1017161	0					
ANR	1017170	PrimaryExpression	"""S\\n"""		1017161	0					
ANR	1017171	ExpressionStatement	free_args ( input_line )	1999:1:53427:53450	1017161	1	True				
ANR	1017172	CallExpression	free_args ( input_line )		1017161	0					
ANR	1017173	Callee	free_args		1017161	0					
ANR	1017174	Identifier	free_args		1017161	0					
ANR	1017175	ArgumentList	input_line		1017161	1					
ANR	1017176	Argument	input_line		1017161	0					
ANR	1017177	Identifier	input_line		1017161	0					
ANR	1017178	IfStatement	if ( response_prefix != NULL )		1017161	2					
ANR	1017179	Condition	response_prefix != NULL	2001:5:53459:53481	1017161	0	True				
ANR	1017180	EqualityExpression	response_prefix != NULL		1017161	0		!=			
ANR	1017181	Identifier	response_prefix		1017161	0					
ANR	1017182	Identifier	NULL		1017161	1					
ANR	1017183	ExpressionStatement	free ( response_prefix )	2002:2:53486:53507	1017161	1	True				
ANR	1017184	CallExpression	free ( response_prefix )		1017161	0					
ANR	1017185	Callee	free		1017161	0					
ANR	1017186	Identifier	free		1017161	0					
ANR	1017187	ArgumentList	response_prefix		1017161	1					
ANR	1017188	Argument	response_prefix		1017161	0					
ANR	1017189	Identifier	response_prefix		1017161	0					
ANR	1017190	ExpressionStatement	exit ( 0 )	2004:1:53512:53519	1017161	3	True				
ANR	1017191	CallExpression	exit ( 0 )		1017161	0					
ANR	1017192	Callee	exit		1017161	0					
ANR	1017193	Identifier	exit		1017161	0					
ANR	1017194	ArgumentList	0		1017161	1					
ANR	1017195	Argument	0		1017161	0					
ANR	1017196	PrimaryExpression	0		1017161	0					
ANR	1017197	ReturnType	int		1017161	1					
ANR	1017198	Identifier	handle_quit		1017161	2					
ANR	1017199	ParameterList	char * * input_line		1017161	3					
ANR	1017200	Parameter	char * * input_line	1995:17:53382:53398	1017161	0	True				
ANR	1017201	ParameterType	char * *		1017161	0					
ANR	1017202	Identifier	input_line		1017161	1					
ANR	1017203	CFGEntryNode	ENTRY		1017161		True				
ANR	1017204	CFGExitNode	EXIT		1017161		True				
ANR	1017205	Symbol	NULL		1017161						
ANR	1017206	Symbol	input_line		1017161						
ANR	1017207	Symbol	response_prefix		1017161						
ANR	1017208	Function	handle_cache_proxy_from_file	2012:0:53752:54594							
ANR	1017209	FunctionDef	handle_cache_proxy_from_file (char * * input_line)		1017208	0					
ANR	1017210	CompoundStatement		2013:0:53805:54594	1017208	0					
ANR	1017211	IdentifierDeclStatement	"char * reqid , * filename ;"	2014:1:53808:53830	1017208	0	True				
ANR	1017212	IdentifierDecl	* reqid		1017208	0					
ANR	1017213	IdentifierDeclType	char *		1017208	0					
ANR	1017214	Identifier	reqid		1017208	1					
ANR	1017215	IdentifierDecl	* filename		1017208	1					
ANR	1017216	IdentifierDeclType	char *		1017208	0					
ANR	1017217	Identifier	filename		1017208	1					
ANR	1017218	IdentifierDeclStatement	AbsCreamProxy * cp = NULL ;	2015:1:53833:53857	1017208	1	True				
ANR	1017219	IdentifierDecl	* cp = NULL		1017208	0					
ANR	1017220	IdentifierDeclType	AbsCreamProxy *		1017208	0					
ANR	1017221	Identifier	cp		1017208	1					
ANR	1017222	AssignmentExpression	* cp = NULL		1017208	2		=			
ANR	1017223	Identifier	NULL		1017208	0					
ANR	1017224	Identifier	NULL		1017208	1					
ANR	1017225	IfStatement	if ( count_args ( input_line ) != 3 )		1017208	2					
ANR	1017226	Condition	count_args ( input_line ) != 3	2017:6:53866:53894	1017208	0	True				
ANR	1017227	EqualityExpression	count_args ( input_line ) != 3		1017208	0		!=			
ANR	1017228	CallExpression	count_args ( input_line )		1017208	0					
ANR	1017229	Callee	count_args		1017208	0					
ANR	1017230	Identifier	count_args		1017208	0					
ANR	1017231	ArgumentList	input_line		1017208	1					
ANR	1017232	Argument	input_line		1017208	0					
ANR	1017233	Identifier	input_line		1017208	0					
ANR	1017234	PrimaryExpression	3		1017208	1					
ANR	1017235	CompoundStatement		5:38:92:92	1017208	1					
ANR	1017236	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	2018:2:53902:53923	1017208	0	True				
ANR	1017237	CallExpression	HANDLE_SYNTAX_ERROR ( )		1017208	0					
ANR	1017238	Callee	HANDLE_SYNTAX_ERROR		1017208	0					
ANR	1017239	Identifier	HANDLE_SYNTAX_ERROR		1017208	0					
ANR	1017240	ArgumentList			1017208	1					
ANR	1017241	ExpressionStatement	"process_string_arg ( input_line [ 1 ] , & reqid )"	2021:1:53931:53974	1017208	3	True				
ANR	1017242	CallExpression	"process_string_arg ( input_line [ 1 ] , & reqid )"		1017208	0					
ANR	1017243	Callee	process_string_arg		1017208	0					
ANR	1017244	Identifier	process_string_arg		1017208	0					
ANR	1017245	ArgumentList	input_line [ 1 ]		1017208	1					
ANR	1017246	Argument	input_line [ 1 ]		1017208	0					
ANR	1017247	ArrayIndexing	input_line [ 1 ]		1017208	0					
ANR	1017248	Identifier	input_line		1017208	0					
ANR	1017249	PrimaryExpression	1		1017208	1					
ANR	1017250	Argument	& reqid		1017208	1					
ANR	1017251	UnaryOperationExpression	& reqid		1017208	0					
ANR	1017252	UnaryOperator	&		1017208	0					
ANR	1017253	Identifier	reqid		1017208	1					
ANR	1017254	ExpressionStatement	"process_string_arg ( input_line [ 2 ] , & filename )"	2022:1:53977:54023	1017208	4	True				
ANR	1017255	CallExpression	"process_string_arg ( input_line [ 2 ] , & filename )"		1017208	0					
ANR	1017256	Callee	process_string_arg		1017208	0					
ANR	1017257	Identifier	process_string_arg		1017208	0					
ANR	1017258	ArgumentList	input_line [ 2 ]		1017208	1					
ANR	1017259	Argument	input_line [ 2 ]		1017208	0					
ANR	1017260	ArrayIndexing	input_line [ 2 ]		1017208	0					
ANR	1017261	Identifier	input_line		1017208	0					
ANR	1017262	PrimaryExpression	2		1017208	1					
ANR	1017263	Argument	& filename		1017208	1					
ANR	1017264	UnaryOperationExpression	& filename		1017208	0					
ANR	1017265	UnaryOperator	&		1017208	0					
ANR	1017266	Identifier	filename		1017208	1					
ANR	1017267	IfStatement	if ( reqid == NULL || filename == NULL )		1017208	5					
ANR	1017268	Condition	reqid == NULL || filename == NULL	2023:6:54031:54063	1017208	0	True				
ANR	1017269	OrExpression	reqid == NULL || filename == NULL		1017208	0		||			
ANR	1017270	EqualityExpression	reqid == NULL		1017208	0		==			
ANR	1017271	Identifier	reqid		1017208	0					
ANR	1017272	Identifier	NULL		1017208	1					
ANR	1017273	EqualityExpression	filename == NULL		1017208	1		==			
ANR	1017274	Identifier	filename		1017208	0					
ANR	1017275	Identifier	NULL		1017208	1					
ANR	1017276	CompoundStatement		11:42:261:261	1017208	1					
ANR	1017277	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	2024:2:54071:54092	1017208	0	True				
ANR	1017278	CallExpression	HANDLE_SYNTAX_ERROR ( )		1017208	0					
ANR	1017279	Callee	HANDLE_SYNTAX_ERROR		1017208	0					
ANR	1017280	Identifier	HANDLE_SYNTAX_ERROR		1017208	0					
ANR	1017281	ArgumentList			1017208	1					
ANR	1017282	TryStatement	try		1017208	6					
ANR	1017283	CompoundStatement		15:5:297:297	1017208	0					
ANR	1017284	ExpressionStatement	"cp = CreamProxyFactory :: make_CreamProxyDelegate ( ""XXX"" , DEFAULT_TIMEOUT )"		1017208	0					
ANR	1017285	AssignmentExpression	"cp = CreamProxyFactory :: make_CreamProxyDelegate ( ""XXX"" , DEFAULT_TIMEOUT )"		1017208	0		=			
ANR	1017286	Identifier	cp		1017208	0					
ANR	1017287	CallExpression	"CreamProxyFactory :: make_CreamProxyDelegate ( ""XXX"" , DEFAULT_TIMEOUT )"		1017208	1					
ANR	1017288	Callee	CreamProxyFactory :: make_CreamProxyDelegate		1017208	0					
ANR	1017289	Identifier	CreamProxyFactory :: make_CreamProxyDelegate		1017208	0					
ANR	1017290	ArgumentList	"""XXX"""		1017208	1					
ANR	1017291	Argument	"""XXX"""		1017208	0					
ANR	1017292	PrimaryExpression	"""XXX"""		1017208	0					
ANR	1017293	Argument	DEFAULT_TIMEOUT		1017208	1					
ANR	1017294	Identifier	DEFAULT_TIMEOUT		1017208	0					
ANR	1017295	ExpressionStatement	check_for_factory_error ( cp )		1017208	1					
ANR	1017296	CallExpression	check_for_factory_error ( cp )		1017208	0					
ANR	1017297	Callee	check_for_factory_error		1017208	0					
ANR	1017298	Identifier	check_for_factory_error		1017208	0					
ANR	1017299	ArgumentList	cp		1017208	1					
ANR	1017300	Argument	cp		1017208	0					
ANR	1017301	Identifier	cp		1017208	0					
ANR	1017302	ExpressionStatement	cp -> setCredential ( filename )		1017208	2					
ANR	1017303	CallExpression	cp -> setCredential ( filename )		1017208	0					
ANR	1017304	Callee	cp -> setCredential		1017208	0					
ANR	1017305	PtrMemberAccess	cp -> setCredential		1017208	0					
ANR	1017306	Identifier	cp		1017208	0					
ANR	1017307	Identifier	setCredential		1017208	1					
ANR	1017308	ArgumentList	filename		1017208	1					
ANR	1017309	Argument	filename		1017208	0					
ANR	1017310	Identifier	filename		1017208	0					
ANR	1017311	Statement	delete		1017208	3					
ANR	1017312	ExpressionStatement	cp		1017208	4					
ANR	1017313	Identifier	cp		1017208	0					
ANR	1017314	CatchList			1017208	1					
ANR	1017315	CatchStatement	catch ( std :: exception & ex )		1017208	0					
ANR	1017316	Identifier	ex		1017208	0					
ANR	1017317	CompoundStatement		22:32:602:602	1017208	1					
ANR	1017318	Statement	delete	2035:2:54412:54417	1017208	0	True				
ANR	1017319	ExpressionStatement	cp	2035:9:54419:54421	1017208	1	True				
ANR	1017320	Identifier	cp		1017208	0					
ANR	1017321	ExpressionStatement	"gahp_printf ( ""E\\n"" )"	2036:2:54425:54443	1017208	2	True				
ANR	1017322	CallExpression	"gahp_printf ( ""E\\n"" )"		1017208	0					
ANR	1017323	Callee	gahp_printf		1017208	0					
ANR	1017324	Identifier	gahp_printf		1017208	0					
ANR	1017325	ArgumentList	"""E\\n"""		1017208	1					
ANR	1017326	Argument	"""E\\n"""		1017208	0					
ANR	1017327	PrimaryExpression	"""E\\n"""		1017208	0					
ANR	1017328	ExpressionStatement	free_args ( input_line )	2037:2:54447:54470	1017208	3	True				
ANR	1017329	CallExpression	free_args ( input_line )		1017208	0					
ANR	1017330	Callee	free_args		1017208	0					
ANR	1017331	Identifier	free_args		1017208	0					
ANR	1017332	ArgumentList	input_line		1017208	1					
ANR	1017333	Argument	input_line		1017208	0					
ANR	1017334	Identifier	input_line		1017208	0					
ANR	1017335	ReturnStatement	return 1 ;	2039:2:54475:54483	1017208	4	True				
ANR	1017336	PrimaryExpression	1		1017208	0					
ANR	1017337	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	2042:1:54490:54508	1017208	7	True				
ANR	1017338	CallExpression	"gahp_printf ( ""S\\n"" )"		1017208	0					
ANR	1017339	Callee	gahp_printf		1017208	0					
ANR	1017340	Identifier	gahp_printf		1017208	0					
ANR	1017341	ArgumentList	"""S\\n"""		1017208	1					
ANR	1017342	Argument	"""S\\n"""		1017208	0					
ANR	1017343	PrimaryExpression	"""S\\n"""		1017208	0					
ANR	1017344	ExpressionStatement	proxies [ string ( reqid ) ] = string ( filename )	2044:1:54512:54553	1017208	8	True				
ANR	1017345	AssignmentExpression	proxies [ string ( reqid ) ] = string ( filename )		1017208	0		=			
ANR	1017346	ArrayIndexing	proxies [ string ( reqid ) ]		1017208	0					
ANR	1017347	Identifier	proxies		1017208	0					
ANR	1017348	CallExpression	string ( reqid )		1017208	1					
ANR	1017349	Callee	string		1017208	0					
ANR	1017350	Identifier	string		1017208	0					
ANR	1017351	ArgumentList	reqid		1017208	1					
ANR	1017352	Argument	reqid		1017208	0					
ANR	1017353	Identifier	reqid		1017208	0					
ANR	1017354	CallExpression	string ( filename )		1017208	1					
ANR	1017355	Callee	string		1017208	0					
ANR	1017356	Identifier	string		1017208	0					
ANR	1017357	ArgumentList	filename		1017208	1					
ANR	1017358	Argument	filename		1017208	0					
ANR	1017359	Identifier	filename		1017208	0					
ANR	1017360	ExpressionStatement	free_args ( input_line )	2046:1:54557:54580	1017208	9	True				
ANR	1017361	CallExpression	free_args ( input_line )		1017208	0					
ANR	1017362	Callee	free_args		1017208	0					
ANR	1017363	Identifier	free_args		1017208	0					
ANR	1017364	ArgumentList	input_line		1017208	1					
ANR	1017365	Argument	input_line		1017208	0					
ANR	1017366	Identifier	input_line		1017208	0					
ANR	1017367	ReturnStatement	return 0 ;	2048:1:54584:54592	1017208	10	True				
ANR	1017368	PrimaryExpression	0		1017208	0					
ANR	1017369	ReturnType	int		1017208	1					
ANR	1017370	Identifier	handle_cache_proxy_from_file		1017208	2					
ANR	1017371	ParameterList	char * * input_line		1017208	3					
ANR	1017372	Parameter	char * * input_line	2012:34:53786:53802	1017208	0	True				
ANR	1017373	ParameterType	char * *		1017208	0					
ANR	1017374	Identifier	input_line		1017208	1					
ANR	1017375	CFGEntryNode	ENTRY		1017208		True				
ANR	1017376	CFGExitNode	EXIT		1017208		True				
ANR	1017377	CFGErrorNode	ERROR		1017208		True				
ANR	1017378	Symbol	* proxies		1017208						
ANR	1017379	Symbol	* input_line		1017208						
ANR	1017380	Symbol	& reqid		1017208						
ANR	1017381	Symbol	NULL		1017208						
ANR	1017382	Symbol	string		1017208						
ANR	1017383	Symbol	count_args		1017208						
ANR	1017384	Symbol	& filename		1017208						
ANR	1017385	Symbol	* string		1017208						
ANR	1017386	Symbol	input_line		1017208						
ANR	1017387	Symbol	cp		1017208						
ANR	1017388	Symbol	reqid		1017208						
ANR	1017389	Symbol	filename		1017208						
ANR	1017390	Symbol	proxies		1017208						
ANR	1017391	Function	handle_use_cached_proxy	2056:0:54822:55403							
ANR	1017392	FunctionDef	handle_use_cached_proxy (char * * input_line)		1017391	0					
ANR	1017393	CompoundStatement		2057:0:54871:55403	1017391	0					
ANR	1017394	IdentifierDeclStatement	char * reqid ;	2058:1:54874:54885	1017391	0	True				
ANR	1017395	IdentifierDecl	* reqid		1017391	0					
ANR	1017396	IdentifierDeclType	char *		1017391	0					
ANR	1017397	Identifier	reqid		1017391	1					
ANR	1017398	IdentifierDeclStatement	"map < string , string > :: const_iterator it ;"	2059:1:54888:54926	1017391	1	True				
ANR	1017399	IdentifierDecl	it		1017391	0					
ANR	1017400	IdentifierDeclType	"map < string , string > :: const_iterator"		1017391	0					
ANR	1017401	Identifier	it		1017391	1					
ANR	1017402	IfStatement	if ( count_args ( input_line ) != 2 )		1017391	2					
ANR	1017403	Condition	count_args ( input_line ) != 2	2061:6:54935:54963	1017391	0	True				
ANR	1017404	EqualityExpression	count_args ( input_line ) != 2		1017391	0		!=			
ANR	1017405	CallExpression	count_args ( input_line )		1017391	0					
ANR	1017406	Callee	count_args		1017391	0					
ANR	1017407	Identifier	count_args		1017391	0					
ANR	1017408	ArgumentList	input_line		1017391	1					
ANR	1017409	Argument	input_line		1017391	0					
ANR	1017410	Identifier	input_line		1017391	0					
ANR	1017411	PrimaryExpression	2		1017391	1					
ANR	1017412	CompoundStatement		5:38:95:95	1017391	1					
ANR	1017413	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	2062:2:54971:54992	1017391	0	True				
ANR	1017414	CallExpression	HANDLE_SYNTAX_ERROR ( )		1017391	0					
ANR	1017415	Callee	HANDLE_SYNTAX_ERROR		1017391	0					
ANR	1017416	Identifier	HANDLE_SYNTAX_ERROR		1017391	0					
ANR	1017417	ArgumentList			1017391	1					
ANR	1017418	ExpressionStatement	"process_string_arg ( input_line [ 1 ] , & reqid )"	2065:1:54999:55042	1017391	3	True				
ANR	1017419	CallExpression	"process_string_arg ( input_line [ 1 ] , & reqid )"		1017391	0					
ANR	1017420	Callee	process_string_arg		1017391	0					
ANR	1017421	Identifier	process_string_arg		1017391	0					
ANR	1017422	ArgumentList	input_line [ 1 ]		1017391	1					
ANR	1017423	Argument	input_line [ 1 ]		1017391	0					
ANR	1017424	ArrayIndexing	input_line [ 1 ]		1017391	0					
ANR	1017425	Identifier	input_line		1017391	0					
ANR	1017426	PrimaryExpression	1		1017391	1					
ANR	1017427	Argument	& reqid		1017391	1					
ANR	1017428	UnaryOperationExpression	& reqid		1017391	0					
ANR	1017429	UnaryOperator	&		1017391	0					
ANR	1017430	Identifier	reqid		1017391	1					
ANR	1017431	IfStatement	if ( reqid == NULL )		1017391	4					
ANR	1017432	Condition	reqid == NULL	2066:6:55050:55062	1017391	0	True				
ANR	1017433	EqualityExpression	reqid == NULL		1017391	0		==			
ANR	1017434	Identifier	reqid		1017391	0					
ANR	1017435	Identifier	NULL		1017391	1					
ANR	1017436	CompoundStatement		10:22:194:194	1017391	1					
ANR	1017437	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	2067:2:55070:55091	1017391	0	True				
ANR	1017438	CallExpression	HANDLE_SYNTAX_ERROR ( )		1017391	0					
ANR	1017439	Callee	HANDLE_SYNTAX_ERROR		1017391	0					
ANR	1017440	Identifier	HANDLE_SYNTAX_ERROR		1017391	0					
ANR	1017441	ArgumentList			1017391	1					
ANR	1017442	ExpressionStatement	sleep ( 1 )	2071:1:55137:55145	1017391	5	True				
ANR	1017443	CallExpression	sleep ( 1 )		1017391	0					
ANR	1017444	Callee	sleep		1017391	0					
ANR	1017445	Identifier	sleep		1017391	0					
ANR	1017446	ArgumentList	1		1017391	1					
ANR	1017447	Argument	1		1017391	0					
ANR	1017448	PrimaryExpression	1		1017391	0					
ANR	1017449	ExpressionStatement	it = proxies . find ( string ( reqid ) )	2072:1:55148:55180	1017391	6	True				
ANR	1017450	AssignmentExpression	it = proxies . find ( string ( reqid ) )		1017391	0		=			
ANR	1017451	Identifier	it		1017391	0					
ANR	1017452	CallExpression	proxies . find ( string ( reqid ) )		1017391	1					
ANR	1017453	Callee	proxies . find		1017391	0					
ANR	1017454	MemberAccess	proxies . find		1017391	0					
ANR	1017455	Identifier	proxies		1017391	0					
ANR	1017456	Identifier	find		1017391	1					
ANR	1017457	ArgumentList	string ( reqid )		1017391	1					
ANR	1017458	Argument	string ( reqid )		1017391	0					
ANR	1017459	CallExpression	string ( reqid )		1017391	0					
ANR	1017460	Callee	string		1017391	0					
ANR	1017461	Identifier	string		1017391	0					
ANR	1017462	ArgumentList	reqid		1017391	1					
ANR	1017463	Argument	reqid		1017391	0					
ANR	1017464	Identifier	reqid		1017391	0					
ANR	1017465	IfStatement	if ( it != proxies . end ( ) )		1017391	7					
ANR	1017466	Condition	it != proxies . end ( )	2074:5:55188:55206	1017391	0	True				
ANR	1017467	EqualityExpression	it != proxies . end ( )		1017391	0		!=			
ANR	1017468	Identifier	it		1017391	0					
ANR	1017469	CallExpression	proxies . end ( )		1017391	1					
ANR	1017470	Callee	proxies . end		1017391	0					
ANR	1017471	MemberAccess	proxies . end		1017391	0					
ANR	1017472	Identifier	proxies		1017391	0					
ANR	1017473	Identifier	end		1017391	1					
ANR	1017474	ArgumentList			1017391	1					
ANR	1017475	CompoundStatement		18:26:337:337	1017391	1					
ANR	1017476	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	2075:2:55213:55231	1017391	0	True				
ANR	1017477	CallExpression	"gahp_printf ( ""S\\n"" )"		1017391	0					
ANR	1017478	Callee	gahp_printf		1017391	0					
ANR	1017479	Identifier	gahp_printf		1017391	0					
ANR	1017480	ArgumentList	"""S\\n"""		1017391	1					
ANR	1017481	Argument	"""S\\n"""		1017391	0					
ANR	1017482	PrimaryExpression	"""S\\n"""		1017391	0					
ANR	1017483	ExpressionStatement	active_proxy = it -> second	2076:2:55235:55260	1017391	1	True				
ANR	1017484	AssignmentExpression	active_proxy = it -> second		1017391	0		=			
ANR	1017485	Identifier	active_proxy		1017391	0					
ANR	1017486	PtrMemberAccess	it -> second		1017391	1					
ANR	1017487	Identifier	it		1017391	0					
ANR	1017488	Identifier	second		1017391	1					
ANR	1017489	ElseStatement	else		1017391	0					
ANR	1017490	CompoundStatement		22:6:399:399	1017391	0					
ANR	1017491	ExpressionStatement	"gahp_printf ( ""F unable\\\\ to\\\\ locate\\\\ proxy\\\\ cached\\\\ under\\\\ key:\\\\ %s\\n"" , reqid )"	2079:2:55275:55358	1017391	0	True				
ANR	1017492	CallExpression	"gahp_printf ( ""F unable\\\\ to\\\\ locate\\\\ proxy\\\\ cached\\\\ under\\\\ key:\\\\ %s\\n"" , reqid )"		1017391	0					
ANR	1017493	Callee	gahp_printf		1017391	0					
ANR	1017494	Identifier	gahp_printf		1017391	0					
ANR	1017495	ArgumentList	"""F unable\\\\ to\\\\ locate\\\\ proxy\\\\ cached\\\\ under\\\\ key:\\\\ %s\\n"""		1017391	1					
ANR	1017496	Argument	"""F unable\\\\ to\\\\ locate\\\\ proxy\\\\ cached\\\\ under\\\\ key:\\\\ %s\\n"""		1017391	0					
ANR	1017497	PrimaryExpression	"""F unable\\\\ to\\\\ locate\\\\ proxy\\\\ cached\\\\ under\\\\ key:\\\\ %s\\n"""		1017391	0					
ANR	1017498	Argument	reqid		1017391	1					
ANR	1017499	Identifier	reqid		1017391	0					
ANR	1017500	ExpressionStatement	free_args ( input_line )	2082:1:55365:55388	1017391	8	True				
ANR	1017501	CallExpression	free_args ( input_line )		1017391	0					
ANR	1017502	Callee	free_args		1017391	0					
ANR	1017503	Identifier	free_args		1017391	0					
ANR	1017504	ArgumentList	input_line		1017391	1					
ANR	1017505	Argument	input_line		1017391	0					
ANR	1017506	Identifier	input_line		1017391	0					
ANR	1017507	ReturnStatement	return 0 ;	2084:1:55393:55401	1017391	9	True				
ANR	1017508	PrimaryExpression	0		1017391	0					
ANR	1017509	ReturnType	int		1017391	1					
ANR	1017510	Identifier	handle_use_cached_proxy		1017391	2					
ANR	1017511	ParameterList	char * * input_line		1017391	3					
ANR	1017512	Parameter	char * * input_line	2056:29:54851:54867	1017391	0	True				
ANR	1017513	ParameterType	char * *		1017391	0					
ANR	1017514	Identifier	input_line		1017391	1					
ANR	1017515	CFGEntryNode	ENTRY		1017391		True				
ANR	1017516	CFGExitNode	EXIT		1017391		True				
ANR	1017517	Symbol	active_proxy		1017391						
ANR	1017518	Symbol	* input_line		1017391						
ANR	1017519	Symbol	& reqid		1017391						
ANR	1017520	Symbol	NULL		1017391						
ANR	1017521	Symbol	proxies . find		1017391						
ANR	1017522	Symbol	string		1017391						
ANR	1017523	Symbol	count_args		1017391						
ANR	1017524	Symbol	input_line		1017391						
ANR	1017525	Symbol	it		1017391						
ANR	1017526	Symbol	reqid		1017391						
ANR	1017527	Symbol	it -> second		1017391						
ANR	1017528	Symbol	* it		1017391						
ANR	1017529	Symbol	proxies . end		1017391						
ANR	1017530	Symbol	proxies		1017391						
ANR	1017531	Function	handle_uncache_proxy	2092:0:55625:56203							
ANR	1017532	FunctionDef	handle_uncache_proxy (char * * input_line)		1017531	0					
ANR	1017533	CompoundStatement		2093:0:55671:56203	1017531	0					
ANR	1017534	IdentifierDeclStatement	char * reqid ;	2094:1:55674:55685	1017531	0	True				
ANR	1017535	IdentifierDecl	* reqid		1017531	0					
ANR	1017536	IdentifierDeclType	char *		1017531	0					
ANR	1017537	Identifier	reqid		1017531	1					
ANR	1017538	IdentifierDeclStatement	"map < string , string > :: const_iterator it ;"	2095:1:55688:55726	1017531	1	True				
ANR	1017539	IdentifierDecl	it		1017531	0					
ANR	1017540	IdentifierDeclType	"map < string , string > :: const_iterator"		1017531	0					
ANR	1017541	Identifier	it		1017531	1					
ANR	1017542	IfStatement	if ( count_args ( input_line ) != 2 )		1017531	2					
ANR	1017543	Condition	count_args ( input_line ) != 2	2097:6:55735:55763	1017531	0	True				
ANR	1017544	EqualityExpression	count_args ( input_line ) != 2		1017531	0		!=			
ANR	1017545	CallExpression	count_args ( input_line )		1017531	0					
ANR	1017546	Callee	count_args		1017531	0					
ANR	1017547	Identifier	count_args		1017531	0					
ANR	1017548	ArgumentList	input_line		1017531	1					
ANR	1017549	Argument	input_line		1017531	0					
ANR	1017550	Identifier	input_line		1017531	0					
ANR	1017551	PrimaryExpression	2		1017531	1					
ANR	1017552	CompoundStatement		5:38:95:95	1017531	1					
ANR	1017553	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	2098:2:55771:55792	1017531	0	True				
ANR	1017554	CallExpression	HANDLE_SYNTAX_ERROR ( )		1017531	0					
ANR	1017555	Callee	HANDLE_SYNTAX_ERROR		1017531	0					
ANR	1017556	Identifier	HANDLE_SYNTAX_ERROR		1017531	0					
ANR	1017557	ArgumentList			1017531	1					
ANR	1017558	ExpressionStatement	"process_string_arg ( input_line [ 1 ] , & reqid )"	2101:1:55799:55842	1017531	3	True				
ANR	1017559	CallExpression	"process_string_arg ( input_line [ 1 ] , & reqid )"		1017531	0					
ANR	1017560	Callee	process_string_arg		1017531	0					
ANR	1017561	Identifier	process_string_arg		1017531	0					
ANR	1017562	ArgumentList	input_line [ 1 ]		1017531	1					
ANR	1017563	Argument	input_line [ 1 ]		1017531	0					
ANR	1017564	ArrayIndexing	input_line [ 1 ]		1017531	0					
ANR	1017565	Identifier	input_line		1017531	0					
ANR	1017566	PrimaryExpression	1		1017531	1					
ANR	1017567	Argument	& reqid		1017531	1					
ANR	1017568	UnaryOperationExpression	& reqid		1017531	0					
ANR	1017569	UnaryOperator	&		1017531	0					
ANR	1017570	Identifier	reqid		1017531	1					
ANR	1017571	IfStatement	if ( reqid == NULL )		1017531	4					
ANR	1017572	Condition	reqid == NULL	2102:6:55850:55862	1017531	0	True				
ANR	1017573	EqualityExpression	reqid == NULL		1017531	0		==			
ANR	1017574	Identifier	reqid		1017531	0					
ANR	1017575	Identifier	NULL		1017531	1					
ANR	1017576	CompoundStatement		10:22:194:194	1017531	1					
ANR	1017577	ExpressionStatement	HANDLE_SYNTAX_ERROR ( )	2103:2:55870:55891	1017531	0	True				
ANR	1017578	CallExpression	HANDLE_SYNTAX_ERROR ( )		1017531	0					
ANR	1017579	Callee	HANDLE_SYNTAX_ERROR		1017531	0					
ANR	1017580	Identifier	HANDLE_SYNTAX_ERROR		1017531	0					
ANR	1017581	ArgumentList			1017531	1					
ANR	1017582	ExpressionStatement	sleep ( 1 )	2107:1:55936:55944	1017531	5	True				
ANR	1017583	CallExpression	sleep ( 1 )		1017531	0					
ANR	1017584	Callee	sleep		1017531	0					
ANR	1017585	Identifier	sleep		1017531	0					
ANR	1017586	ArgumentList	1		1017531	1					
ANR	1017587	Argument	1		1017531	0					
ANR	1017588	PrimaryExpression	1		1017531	0					
ANR	1017589	ExpressionStatement	it = proxies . find ( string ( reqid ) )	2108:1:55947:55979	1017531	6	True				
ANR	1017590	AssignmentExpression	it = proxies . find ( string ( reqid ) )		1017531	0		=			
ANR	1017591	Identifier	it		1017531	0					
ANR	1017592	CallExpression	proxies . find ( string ( reqid ) )		1017531	1					
ANR	1017593	Callee	proxies . find		1017531	0					
ANR	1017594	MemberAccess	proxies . find		1017531	0					
ANR	1017595	Identifier	proxies		1017531	0					
ANR	1017596	Identifier	find		1017531	1					
ANR	1017597	ArgumentList	string ( reqid )		1017531	1					
ANR	1017598	Argument	string ( reqid )		1017531	0					
ANR	1017599	CallExpression	string ( reqid )		1017531	0					
ANR	1017600	Callee	string		1017531	0					
ANR	1017601	Identifier	string		1017531	0					
ANR	1017602	ArgumentList	reqid		1017531	1					
ANR	1017603	Argument	reqid		1017531	0					
ANR	1017604	Identifier	reqid		1017531	0					
ANR	1017605	IfStatement	if ( it != proxies . end ( ) )		1017531	7					
ANR	1017606	Condition	it != proxies . end ( )	2110:5:55987:56005	1017531	0	True				
ANR	1017607	EqualityExpression	it != proxies . end ( )		1017531	0		!=			
ANR	1017608	Identifier	it		1017531	0					
ANR	1017609	CallExpression	proxies . end ( )		1017531	1					
ANR	1017610	Callee	proxies . end		1017531	0					
ANR	1017611	MemberAccess	proxies . end		1017531	0					
ANR	1017612	Identifier	proxies		1017531	0					
ANR	1017613	Identifier	end		1017531	1					
ANR	1017614	ArgumentList			1017531	1					
ANR	1017615	CompoundStatement		18:26:336:336	1017531	1					
ANR	1017616	ExpressionStatement	"gahp_printf ( ""S\\n"" )"	2111:2:56012:56030	1017531	0	True				
ANR	1017617	CallExpression	"gahp_printf ( ""S\\n"" )"		1017531	0					
ANR	1017618	Callee	gahp_printf		1017531	0					
ANR	1017619	Identifier	gahp_printf		1017531	0					
ANR	1017620	ArgumentList	"""S\\n"""		1017531	1					
ANR	1017621	Argument	"""S\\n"""		1017531	0					
ANR	1017622	PrimaryExpression	"""S\\n"""		1017531	0					
ANR	1017623	ExpressionStatement	proxies . erase ( string ( reqid ) )	2112:2:56034:56062	1017531	1	True				
ANR	1017624	CallExpression	proxies . erase ( string ( reqid ) )		1017531	0					
ANR	1017625	Callee	proxies . erase		1017531	0					
ANR	1017626	MemberAccess	proxies . erase		1017531	0					
ANR	1017627	Identifier	proxies		1017531	0					
ANR	1017628	Identifier	erase		1017531	1					
ANR	1017629	ArgumentList	string ( reqid )		1017531	1					
ANR	1017630	Argument	string ( reqid )		1017531	0					
ANR	1017631	CallExpression	string ( reqid )		1017531	0					
ANR	1017632	Callee	string		1017531	0					
ANR	1017633	Identifier	string		1017531	0					
ANR	1017634	ArgumentList	reqid		1017531	1					
ANR	1017635	Argument	reqid		1017531	0					
ANR	1017636	Identifier	reqid		1017531	0					
ANR	1017637	ElseStatement	else		1017531	0					
ANR	1017638	CompoundStatement		21:8:400:400	1017531	0					
ANR	1017639	ExpressionStatement	"gahp_printf ( ""F unable\\\\ to\\\\ locate\\\\ proxy\\\\ cached\\\\ under\\\\ key:\\\\ %s\\n"" , reqid )"	2114:2:56076:56159	1017531	0	True				
ANR	1017640	CallExpression	"gahp_printf ( ""F unable\\\\ to\\\\ locate\\\\ proxy\\\\ cached\\\\ under\\\\ key:\\\\ %s\\n"" , reqid )"		1017531	0					
ANR	1017641	Callee	gahp_printf		1017531	0					
ANR	1017642	Identifier	gahp_printf		1017531	0					
ANR	1017643	ArgumentList	"""F unable\\\\ to\\\\ locate\\\\ proxy\\\\ cached\\\\ under\\\\ key:\\\\ %s\\n"""		1017531	1					
ANR	1017644	Argument	"""F unable\\\\ to\\\\ locate\\\\ proxy\\\\ cached\\\\ under\\\\ key:\\\\ %s\\n"""		1017531	0					
ANR	1017645	PrimaryExpression	"""F unable\\\\ to\\\\ locate\\\\ proxy\\\\ cached\\\\ under\\\\ key:\\\\ %s\\n"""		1017531	0					
ANR	1017646	Argument	reqid		1017531	1					
ANR	1017647	Identifier	reqid		1017531	0					
ANR	1017648	ExpressionStatement	free_args ( input_line )	2117:1:56166:56189	1017531	8	True				
ANR	1017649	CallExpression	free_args ( input_line )		1017531	0					
ANR	1017650	Callee	free_args		1017531	0					
ANR	1017651	Identifier	free_args		1017531	0					
ANR	1017652	ArgumentList	input_line		1017531	1					
ANR	1017653	Argument	input_line		1017531	0					
ANR	1017654	Identifier	input_line		1017531	0					
ANR	1017655	ReturnStatement	return 0 ;	2119:1:56193:56201	1017531	9	True				
ANR	1017656	PrimaryExpression	0		1017531	0					
ANR	1017657	ReturnType	int		1017531	1					
ANR	1017658	Identifier	handle_uncache_proxy		1017531	2					
ANR	1017659	ParameterList	char * * input_line		1017531	3					
ANR	1017660	Parameter	char * * input_line	2092:26:55651:55667	1017531	0	True				
ANR	1017661	ParameterType	char * *		1017531	0					
ANR	1017662	Identifier	input_line		1017531	1					
ANR	1017663	CFGEntryNode	ENTRY		1017531		True				
ANR	1017664	CFGExitNode	EXIT		1017531		True				
ANR	1017665	Symbol	* input_line		1017531						
ANR	1017666	Symbol	& reqid		1017531						
ANR	1017667	Symbol	NULL		1017531						
ANR	1017668	Symbol	string		1017531						
ANR	1017669	Symbol	proxies . find		1017531						
ANR	1017670	Symbol	proxies . end		1017531						
ANR	1017671	Symbol	count_args		1017531						
ANR	1017672	Symbol	input_line		1017531						
ANR	1017673	Symbol	proxies		1017531						
ANR	1017674	Symbol	it		1017531						
ANR	1017675	Symbol	reqid		1017531						
ANR	1017676	Function	read_command	2128:0:56478:57841							
ANR	1017677	FunctionDef	read_command ()		1017676	0					
ANR	1017678	CompoundStatement		2129:0:56500:57841	1017676	0					
ANR	1017679	Statement	static	2130:1:56503:56508	1017676	0	True				
ANR	1017680	IdentifierDeclStatement	char * buf = NULL ;	2130:8:56510:56526	1017676	1	True				
ANR	1017681	IdentifierDecl	* buf = NULL		1017676	0					
ANR	1017682	IdentifierDeclType	char *		1017676	0					
ANR	1017683	Identifier	buf		1017676	1					
ANR	1017684	AssignmentExpression	* buf = NULL		1017676	2		=			
ANR	1017685	Identifier	NULL		1017676	0					
ANR	1017686	Identifier	NULL		1017676	1					
ANR	1017687	IdentifierDeclStatement	char * * command_argv ;	2131:1:56529:56548	1017676	2	True				
ANR	1017688	IdentifierDecl	* * command_argv		1017676	0					
ANR	1017689	IdentifierDeclType	char * *		1017676	0					
ANR	1017690	Identifier	command_argv		1017676	1					
ANR	1017691	IdentifierDeclStatement	int ibuf = 0 ;	2132:1:56551:56563	1017676	3	True				
ANR	1017692	IdentifierDecl	ibuf = 0		1017676	0					
ANR	1017693	IdentifierDeclType	int		1017676	0					
ANR	1017694	Identifier	ibuf		1017676	1					
ANR	1017695	AssignmentExpression	ibuf = 0		1017676	2		=			
ANR	1017696	Identifier	ibuf		1017676	0					
ANR	1017697	PrimaryExpression	0		1017676	1					
ANR	1017698	IdentifierDeclStatement	int iargv = 0 ;	2133:1:56566:56579	1017676	4	True				
ANR	1017699	IdentifierDecl	iargv = 0		1017676	0					
ANR	1017700	IdentifierDeclType	int		1017676	0					
ANR	1017701	Identifier	iargv		1017676	1					
ANR	1017702	AssignmentExpression	iargv = 0		1017676	2		=			
ANR	1017703	Identifier	iargv		1017676	0					
ANR	1017704	PrimaryExpression	0		1017676	1					
ANR	1017705	IdentifierDeclStatement	int result = 0 ;	2134:1:56582:56596	1017676	5	True				
ANR	1017706	IdentifierDecl	result = 0		1017676	0					
ANR	1017707	IdentifierDeclType	int		1017676	0					
ANR	1017708	Identifier	result		1017676	1					
ANR	1017709	AssignmentExpression	result = 0		1017676	2		=			
ANR	1017710	Identifier	result		1017676	0					
ANR	1017711	PrimaryExpression	0		1017676	1					
ANR	1017712	IdentifierDeclStatement	int argv_size = 500 ;	2135:1:56599:56618	1017676	6	True				
ANR	1017713	IdentifierDecl	argv_size = 500		1017676	0					
ANR	1017714	IdentifierDeclType	int		1017676	0					
ANR	1017715	Identifier	argv_size		1017676	1					
ANR	1017716	AssignmentExpression	argv_size = 500		1017676	2		=			
ANR	1017717	Identifier	argv_size		1017676	0					
ANR	1017718	PrimaryExpression	500		1017676	1					
ANR	1017719	IfStatement	if ( buf == NULL )		1017676	7					
ANR	1017720	Condition	buf == NULL	2137:6:56628:56638	1017676	0	True				
ANR	1017721	EqualityExpression	buf == NULL		1017676	0		==			
ANR	1017722	Identifier	buf		1017676	0					
ANR	1017723	Identifier	NULL		1017676	1					
ANR	1017724	CompoundStatement		9:20:141:141	1017676	1					
ANR	1017725	ExpressionStatement	buf = ( char * ) malloc ( 1024 * 500 )	2138:2:56646:56679	1017676	0	True				
ANR	1017726	AssignmentExpression	buf = ( char * ) malloc ( 1024 * 500 )		1017676	0		=			
ANR	1017727	Identifier	buf		1017676	0					
ANR	1017728	CastExpression	( char * ) malloc ( 1024 * 500 )		1017676	1					
ANR	1017729	CastTarget	char *		1017676	0					
ANR	1017730	CallExpression	malloc ( 1024 * 500 )		1017676	1					
ANR	1017731	Callee	malloc		1017676	0					
ANR	1017732	Identifier	malloc		1017676	0					
ANR	1017733	ArgumentList	1024 * 500		1017676	1					
ANR	1017734	Argument	1024 * 500		1017676	0					
ANR	1017735	MultiplicativeExpression	1024 * 500		1017676	0		*			
ANR	1017736	PrimaryExpression	1024		1017676	0					
ANR	1017737	PrimaryExpression	500		1017676	1					
ANR	1017738	ExpressionStatement	command_argv = ( char * * ) malloc ( argv_size * sizeof ( char * ) )	2141:1:56687:56744	1017676	8	True				
ANR	1017739	AssignmentExpression	command_argv = ( char * * ) malloc ( argv_size * sizeof ( char * ) )		1017676	0		=			
ANR	1017740	Identifier	command_argv		1017676	0					
ANR	1017741	CastExpression	( char * * ) malloc ( argv_size * sizeof ( char * ) )		1017676	1					
ANR	1017742	CastTarget	char * *		1017676	0					
ANR	1017743	CallExpression	malloc ( argv_size * sizeof ( char * ) )		1017676	1					
ANR	1017744	Callee	malloc		1017676	0					
ANR	1017745	Identifier	malloc		1017676	0					
ANR	1017746	ArgumentList	argv_size * sizeof ( char * )		1017676	1					
ANR	1017747	Argument	argv_size * sizeof ( char * )		1017676	0					
ANR	1017748	MultiplicativeExpression	argv_size * sizeof ( char * )		1017676	0		*			
ANR	1017749	Identifier	argv_size		1017676	0					
ANR	1017750	SizeofExpression	sizeof ( char * )		1017676	1					
ANR	1017751	Sizeof	sizeof		1017676	0					
ANR	1017752	SizeofOperand	char *		1017676	1					
ANR	1017753	WhileStatement	while ( 1 )		1017676	9					
ANR	1017754	Condition	1	2143:7:56755:56755	1017676	0	True				
ANR	1017755	PrimaryExpression	1		1017676	0					
ANR	1017756	CompoundStatement		15:10:257:257	1017676	1					
ANR	1017757	ExpressionStatement	"result = read ( 0 , & ( buf [ ibuf ] ) , 1 )"	2144:2:56762:56796	1017676	0	True				
ANR	1017758	AssignmentExpression	"result = read ( 0 , & ( buf [ ibuf ] ) , 1 )"		1017676	0		=			
ANR	1017759	Identifier	result		1017676	0					
ANR	1017760	CallExpression	"read ( 0 , & ( buf [ ibuf ] ) , 1 )"		1017676	1					
ANR	1017761	Callee	read		1017676	0					
ANR	1017762	Identifier	read		1017676	0					
ANR	1017763	ArgumentList	0		1017676	1					
ANR	1017764	Argument	0		1017676	0					
ANR	1017765	PrimaryExpression	0		1017676	0					
ANR	1017766	Argument	& ( buf [ ibuf ] )		1017676	1					
ANR	1017767	UnaryOperationExpression	& ( buf [ ibuf ] )		1017676	0					
ANR	1017768	UnaryOperator	&		1017676	0					
ANR	1017769	ArrayIndexing	buf [ ibuf ]		1017676	1					
ANR	1017770	Identifier	buf		1017676	0					
ANR	1017771	Identifier	ibuf		1017676	1					
ANR	1017772	Argument	1		1017676	2					
ANR	1017773	PrimaryExpression	1		1017676	0					
ANR	1017774	IfStatement	if ( result < 0 )		1017676	1					
ANR	1017775	Condition	result < 0	2146:6:56807:56816	1017676	0	True				
ANR	1017776	RelationalExpression	result < 0		1017676	0		<			
ANR	1017777	Identifier	result		1017676	0					
ANR	1017778	PrimaryExpression	0		1017676	1					
ANR	1017779	ExpressionStatement	exit ( 2 )	2147:3:56831:56838	1017676	1	True				
ANR	1017780	CallExpression	exit ( 2 )		1017676	0					
ANR	1017781	Callee	exit		1017676	0					
ANR	1017782	Identifier	exit		1017676	0					
ANR	1017783	ArgumentList	2		1017676	1					
ANR	1017784	Argument	2		1017676	0					
ANR	1017785	PrimaryExpression	2		1017676	0					
ANR	1017786	IfStatement	if ( result == 0 )		1017676	2					
ANR	1017787	Condition	result == 0	2149:6:56850:56860	1017676	0	True				
ANR	1017788	EqualityExpression	result == 0		1017676	0		==			
ANR	1017789	Identifier	result		1017676	0					
ANR	1017790	PrimaryExpression	0		1017676	1					
ANR	1017791	ExpressionStatement	exit ( 3 )	2150:3:56873:56880	1017676	1	True				
ANR	1017792	CallExpression	exit ( 3 )		1017676	0					
ANR	1017793	Callee	exit		1017676	0					
ANR	1017794	Identifier	exit		1017676	0					
ANR	1017795	ArgumentList	3		1017676	1					
ANR	1017796	Argument	3		1017676	0					
ANR	1017797	PrimaryExpression	3		1017676	0					
ANR	1017798	IfStatement	if ( ibuf > 0 && buf [ ibuf - 1 ] == '\\\\' )		1017676	3					
ANR	1017799	Condition	ibuf > 0 && buf [ ibuf - 1 ] == '\\\\'	2154:7:57011:57041	1017676	0	True				
ANR	1017800	AndExpression	ibuf > 0 && buf [ ibuf - 1 ] == '\\\\'		1017676	0		&&			
ANR	1017801	RelationalExpression	ibuf > 0		1017676	0		>			
ANR	1017802	Identifier	ibuf		1017676	0					
ANR	1017803	PrimaryExpression	0		1017676	1					
ANR	1017804	EqualityExpression	buf [ ibuf - 1 ] == '\\\\'		1017676	1		==			
ANR	1017805	ArrayIndexing	buf [ ibuf - 1 ]		1017676	0					
ANR	1017806	Identifier	buf		1017676	0					
ANR	1017807	AdditiveExpression	ibuf - 1		1017676	1		-			
ANR	1017808	Identifier	ibuf		1017676	0					
ANR	1017809	PrimaryExpression	1		1017676	1					
ANR	1017810	PrimaryExpression	'\\\\'		1017676	1					
ANR	1017811	CompoundStatement		26:41:544:544	1017676	1					
ANR	1017812	ExpressionStatement	buf [ ibuf - 1 ] = buf [ ibuf ]	2155:3:57050:57073	1017676	0	True				
ANR	1017813	AssignmentExpression	buf [ ibuf - 1 ] = buf [ ibuf ]		1017676	0		=			
ANR	1017814	ArrayIndexing	buf [ ibuf - 1 ]		1017676	0					
ANR	1017815	Identifier	buf		1017676	0					
ANR	1017816	AdditiveExpression	ibuf - 1		1017676	1		-			
ANR	1017817	Identifier	ibuf		1017676	0					
ANR	1017818	PrimaryExpression	1		1017676	1					
ANR	1017819	ArrayIndexing	buf [ ibuf ]		1017676	1					
ANR	1017820	Identifier	buf		1017676	0					
ANR	1017821	Identifier	ibuf		1017676	1					
ANR	1017822	ContinueStatement	continue ;	2156:3:57078:57086	1017676	1	True				
ANR	1017823	IfStatement	if ( buf [ ibuf ] == '\\r' )		1017676	4					
ANR	1017824	Condition	buf [ ibuf ] == '\\r'	2159:7:57140:57156	1017676	0	True				
ANR	1017825	EqualityExpression	buf [ ibuf ] == '\\r'		1017676	0		==			
ANR	1017826	ArrayIndexing	buf [ ibuf ]		1017676	0					
ANR	1017827	Identifier	buf		1017676	0					
ANR	1017828	Identifier	ibuf		1017676	1					
ANR	1017829	PrimaryExpression	'\\r'		1017676	1					
ANR	1017830	CompoundStatement		31:27:659:659	1017676	1					
ANR	1017831	ContinueStatement	continue ;	2160:3:57165:57173	1017676	0	True				
ANR	1017832	IfStatement	if ( buf [ ibuf ] == ' ' )		1017676	5					
ANR	1017833	Condition	buf [ ibuf ] == ' '	2163:7:57231:57246	1017676	0	True				
ANR	1017834	EqualityExpression	buf [ ibuf ] == ' '		1017676	0		==			
ANR	1017835	ArrayIndexing	buf [ ibuf ]		1017676	0					
ANR	1017836	Identifier	buf		1017676	0					
ANR	1017837	Identifier	ibuf		1017676	1					
ANR	1017838	PrimaryExpression	' '		1017676	1					
ANR	1017839	CompoundStatement		35:26:749:749	1017676	1					
ANR	1017840	ExpressionStatement	buf [ ibuf ] = '\\0'	2165:3:57256:57272	1017676	0	True				
ANR	1017841	AssignmentExpression	buf [ ibuf ] = '\\0'		1017676	0		=			
ANR	1017842	ArrayIndexing	buf [ ibuf ]		1017676	0					
ANR	1017843	Identifier	buf		1017676	0					
ANR	1017844	Identifier	ibuf		1017676	1					
ANR	1017845	PrimaryExpression	'\\0'		1017676	1					
ANR	1017846	ExpressionStatement	command_argv [ iargv ] = ( char * ) malloc ( ibuf + 5 )	2166:3:57277:57323	1017676	1	True				
ANR	1017847	AssignmentExpression	command_argv [ iargv ] = ( char * ) malloc ( ibuf + 5 )		1017676	0		=			
ANR	1017848	ArrayIndexing	command_argv [ iargv ]		1017676	0					
ANR	1017849	Identifier	command_argv		1017676	0					
ANR	1017850	Identifier	iargv		1017676	1					
ANR	1017851	CastExpression	( char * ) malloc ( ibuf + 5 )		1017676	1					
ANR	1017852	CastTarget	char *		1017676	0					
ANR	1017853	CallExpression	malloc ( ibuf + 5 )		1017676	1					
ANR	1017854	Callee	malloc		1017676	0					
ANR	1017855	Identifier	malloc		1017676	0					
ANR	1017856	ArgumentList	ibuf + 5		1017676	1					
ANR	1017857	Argument	ibuf + 5		1017676	0					
ANR	1017858	AdditiveExpression	ibuf + 5		1017676	0		+			
ANR	1017859	Identifier	ibuf		1017676	0					
ANR	1017860	PrimaryExpression	5		1017676	1					
ANR	1017861	ExpressionStatement	"strcpy ( command_argv [ iargv ] , buf )"	2167:3:57328:57359	1017676	2	True				
ANR	1017862	CallExpression	"strcpy ( command_argv [ iargv ] , buf )"		1017676	0					
ANR	1017863	Callee	strcpy		1017676	0					
ANR	1017864	Identifier	strcpy		1017676	0					
ANR	1017865	ArgumentList	command_argv [ iargv ]		1017676	1					
ANR	1017866	Argument	command_argv [ iargv ]		1017676	0					
ANR	1017867	ArrayIndexing	command_argv [ iargv ]		1017676	0					
ANR	1017868	Identifier	command_argv		1017676	0					
ANR	1017869	Identifier	iargv		1017676	1					
ANR	1017870	Argument	buf		1017676	1					
ANR	1017871	Identifier	buf		1017676	0					
ANR	1017872	ExpressionStatement	ibuf = 0	2168:3:57364:57372	1017676	3	True				
ANR	1017873	AssignmentExpression	ibuf = 0		1017676	0		=			
ANR	1017874	Identifier	ibuf		1017676	0					
ANR	1017875	PrimaryExpression	0		1017676	1					
ANR	1017876	ExpressionStatement	iargv ++	2169:3:57377:57384	1017676	4	True				
ANR	1017877	PostIncDecOperationExpression	iargv ++		1017676	0					
ANR	1017878	Identifier	iargv		1017676	0					
ANR	1017879	IncDec	++		1017676	1					
ANR	1017880	IfStatement	if ( iargv >= argv_size - 1 )		1017676	5					
ANR	1017881	Condition	iargv >= argv_size - 1	2170:8:57394:57415	1017676	0	True				
ANR	1017882	RelationalExpression	iargv >= argv_size - 1		1017676	0		>=			
ANR	1017883	Identifier	iargv		1017676	0					
ANR	1017884	AdditiveExpression	argv_size - 1		1017676	1		-			
ANR	1017885	Identifier	argv_size		1017676	0					
ANR	1017886	PrimaryExpression	1		1017676	1					
ANR	1017887	CompoundStatement		42:33:918:918	1017676	1					
ANR	1017888	ExpressionStatement	argv_size += 500	2171:4:57425:57441	1017676	0	True				
ANR	1017889	AssignmentExpression	argv_size += 500		1017676	0		+=			
ANR	1017890	Identifier	argv_size		1017676	0					
ANR	1017891	PrimaryExpression	500		1017676	1					
ANR	1017892	ExpressionStatement	"command_argv = ( char * * ) realloc ( command_argv , argv_size * sizeof ( char * ) )"	2172:4:57447:57534	1017676	1	True				
ANR	1017893	AssignmentExpression	"command_argv = ( char * * ) realloc ( command_argv , argv_size * sizeof ( char * ) )"		1017676	0		=			
ANR	1017894	Identifier	command_argv		1017676	0					
ANR	1017895	CastExpression	"( char * * ) realloc ( command_argv , argv_size * sizeof ( char * ) )"		1017676	1					
ANR	1017896	CastTarget	char * *		1017676	0					
ANR	1017897	CallExpression	"realloc ( command_argv , argv_size * sizeof ( char * ) )"		1017676	1					
ANR	1017898	Callee	realloc		1017676	0					
ANR	1017899	Identifier	realloc		1017676	0					
ANR	1017900	ArgumentList	command_argv		1017676	1					
ANR	1017901	Argument	command_argv		1017676	0					
ANR	1017902	Identifier	command_argv		1017676	0					
ANR	1017903	Argument	argv_size * sizeof ( char * )		1017676	1					
ANR	1017904	MultiplicativeExpression	argv_size * sizeof ( char * )		1017676	0		*			
ANR	1017905	Identifier	argv_size		1017676	0					
ANR	1017906	SizeofExpression	sizeof ( char * )		1017676	1					
ANR	1017907	Sizeof	sizeof		1017676	0					
ANR	1017908	SizeofOperand	char *		1017676	1					
ANR	1017909	ContinueStatement	continue ;	2175:3:57544:57552	1017676	6	True				
ANR	1017910	IfStatement	if ( buf [ ibuf ] == '\\n' )		1017676	6					
ANR	1017911	Condition	buf [ ibuf ] == '\\n'	2179:6:57627:57643	1017676	0	True				
ANR	1017912	EqualityExpression	buf [ ibuf ] == '\\n'		1017676	0		==			
ANR	1017913	ArrayIndexing	buf [ ibuf ]		1017676	0					
ANR	1017914	Identifier	buf		1017676	0					
ANR	1017915	Identifier	ibuf		1017676	1					
ANR	1017916	PrimaryExpression	'\\n'		1017676	1					
ANR	1017917	CompoundStatement		51:25:1145:1145	1017676	1					
ANR	1017918	ExpressionStatement	buf [ ibuf ] = '\\0'	2180:3:57652:57668	1017676	0	True				
ANR	1017919	AssignmentExpression	buf [ ibuf ] = '\\0'		1017676	0		=			
ANR	1017920	ArrayIndexing	buf [ ibuf ]		1017676	0					
ANR	1017921	Identifier	buf		1017676	0					
ANR	1017922	Identifier	ibuf		1017676	1					
ANR	1017923	PrimaryExpression	'\\0'		1017676	1					
ANR	1017924	ExpressionStatement	command_argv [ iargv ] = ( char * ) malloc ( ibuf + 5 )	2181:3:57673:57719	1017676	1	True				
ANR	1017925	AssignmentExpression	command_argv [ iargv ] = ( char * ) malloc ( ibuf + 5 )		1017676	0		=			
ANR	1017926	ArrayIndexing	command_argv [ iargv ]		1017676	0					
ANR	1017927	Identifier	command_argv		1017676	0					
ANR	1017928	Identifier	iargv		1017676	1					
ANR	1017929	CastExpression	( char * ) malloc ( ibuf + 5 )		1017676	1					
ANR	1017930	CastTarget	char *		1017676	0					
ANR	1017931	CallExpression	malloc ( ibuf + 5 )		1017676	1					
ANR	1017932	Callee	malloc		1017676	0					
ANR	1017933	Identifier	malloc		1017676	0					
ANR	1017934	ArgumentList	ibuf + 5		1017676	1					
ANR	1017935	Argument	ibuf + 5		1017676	0					
ANR	1017936	AdditiveExpression	ibuf + 5		1017676	0		+			
ANR	1017937	Identifier	ibuf		1017676	0					
ANR	1017938	PrimaryExpression	5		1017676	1					
ANR	1017939	ExpressionStatement	"strcpy ( command_argv [ iargv ] , buf )"	2182:3:57724:57755	1017676	2	True				
ANR	1017940	CallExpression	"strcpy ( command_argv [ iargv ] , buf )"		1017676	0					
ANR	1017941	Callee	strcpy		1017676	0					
ANR	1017942	Identifier	strcpy		1017676	0					
ANR	1017943	ArgumentList	command_argv [ iargv ]		1017676	1					
ANR	1017944	Argument	command_argv [ iargv ]		1017676	0					
ANR	1017945	ArrayIndexing	command_argv [ iargv ]		1017676	0					
ANR	1017946	Identifier	command_argv		1017676	0					
ANR	1017947	Identifier	iargv		1017676	1					
ANR	1017948	Argument	buf		1017676	1					
ANR	1017949	Identifier	buf		1017676	0					
ANR	1017950	ExpressionStatement	command_argv [ iargv + 1 ] = NULL	2183:3:57760:57790	1017676	3	True				
ANR	1017951	AssignmentExpression	command_argv [ iargv + 1 ] = NULL		1017676	0		=			
ANR	1017952	ArrayIndexing	command_argv [ iargv + 1 ]		1017676	0					
ANR	1017953	Identifier	command_argv		1017676	0					
ANR	1017954	AdditiveExpression	iargv + 1		1017676	1		+			
ANR	1017955	Identifier	iargv		1017676	0					
ANR	1017956	PrimaryExpression	1		1017676	1					
ANR	1017957	Identifier	NULL		1017676	1					
ANR	1017958	ReturnStatement	return command_argv ;	2185:3:57799:57818	1017676	4	True				
ANR	1017959	Identifier	command_argv		1017676	0					
ANR	1017960	ExpressionStatement	ibuf ++	2188:2:57829:57835	1017676	7	True				
ANR	1017961	PostIncDecOperationExpression	ibuf ++		1017676	0					
ANR	1017962	Identifier	ibuf		1017676	0					
ANR	1017963	IncDec	++		1017676	1					
ANR	1017964	ReturnType	char * *		1017676	1					
ANR	1017965	Identifier	read_command		1017676	2					
ANR	1017966	ParameterList			1017676	3					
ANR	1017967	CFGEntryNode	ENTRY		1017676		True				
ANR	1017968	CFGExitNode	EXIT		1017676		True				
ANR	1017969	Symbol	malloc		1017676						
ANR	1017970	Symbol	argv_size		1017676						
ANR	1017971	Symbol	* buf		1017676						
ANR	1017972	Symbol	NULL		1017676						
ANR	1017973	Symbol	read		1017676						
ANR	1017974	Symbol	command_argv		1017676						
ANR	1017975	Symbol	* iargv		1017676						
ANR	1017976	Symbol	realloc		1017676						
ANR	1017977	Symbol	result		1017676						
ANR	1017978	Symbol	buf		1017676						
ANR	1017979	Symbol	ibuf		1017676						
ANR	1017980	Symbol	iargv		1017676						
ANR	1017981	Symbol	* ibuf		1017676						
ANR	1017982	Symbol	* command_argv		1017676						
ANR	1017983	Function	process_request	2196:0:58061:59126							
ANR	1017984	FunctionDef	process_request (char * * input_line)		1017983	0					
ANR	1017985	CompoundStatement		2197:0:58103:59126	1017983	0					
ANR	1017986	ExpressionStatement	HANDLE ( initialize_from_file )	2198:1:58106:58134	1017983	0	True				
ANR	1017987	CallExpression	HANDLE ( initialize_from_file )		1017983	0					
ANR	1017988	Callee	HANDLE		1017983	0					
ANR	1017989	Identifier	HANDLE		1017983	0					
ANR	1017990	ArgumentList	initialize_from_file		1017983	1					
ANR	1017991	Argument	initialize_from_file		1017983	0					
ANR	1017992	Identifier	initialize_from_file		1017983	0					
ANR	1017993	ReturnType	void		1017983	1					
ANR	1017994	Identifier	process_request		1017983	2					
ANR	1017995	ParameterList	char * * input_line		1017983	3					
ANR	1017996	Parameter	char * * input_line	2196:22:58083:58099	1017983	0	True				
ANR	1017997	ParameterType	char * *		1017983	0					
ANR	1017998	Identifier	input_line		1017983	1					
ANR	1017999	CFGEntryNode	ENTRY		1017983		True				
ANR	1018000	CFGExitNode	EXIT		1017983		True				
ANR	1018001	Symbol	input_line		1017983						
ANR	1018002	Symbol	initialize_from_file		1017983						
ANR	1018003	Function	is_a_batchable_set	2238:0:59381:60043							
ANR	1018004	FunctionDef	"is_a_batchable_set (const vector < Request * > & list , const Request * b)"		1018003	0					
ANR	1018005	CompoundStatement		2238:74:59455:60043	1018003	0					
ANR	1018006	IdentifierDeclStatement	const Request * a = list . front ( ) ;	2239:1:59458:59489	1018003	0	True				
ANR	1018007	IdentifierDecl	* a = list . front ( )		1018003	0					
ANR	1018008	IdentifierDeclType	const Request *		1018003	0					
ANR	1018009	Identifier	a		1018003	1					
ANR	1018010	AssignmentExpression	* a = list . front ( )		1018003	2		=			
ANR	1018011	Identifier	a		1018003	0					
ANR	1018012	CallExpression	list . front ( )		1018003	1					
ANR	1018013	Callee	list . front		1018003	0					
ANR	1018014	MemberAccess	list . front		1018003	0					
ANR	1018015	Identifier	list		1018003	0					
ANR	1018016	Identifier	front		1018003	1					
ANR	1018017	ArgumentList			1018003	1					
ANR	1018018	IfStatement	if ( a == NULL || b == NULL )		1018003	1					
ANR	1018019	Condition	a == NULL || b == NULL	2240:6:59497:59518	1018003	0	True				
ANR	1018020	OrExpression	a == NULL || b == NULL		1018003	0		||			
ANR	1018021	EqualityExpression	a == NULL		1018003	0		==			
ANR	1018022	Identifier	a		1018003	0					
ANR	1018023	Identifier	NULL		1018003	1					
ANR	1018024	EqualityExpression	b == NULL		1018003	1		==			
ANR	1018025	Identifier	b		1018003	0					
ANR	1018026	Identifier	NULL		1018003	1					
ANR	1018027	CompoundStatement		3:31:66:66	1018003	1					
ANR	1018028	ExpressionStatement	"internal_error ( ""is_a_batchable_set passed a NULL pointer"" )"	2241:2:59526:59584	1018003	0	True				
ANR	1018029	CallExpression	"internal_error ( ""is_a_batchable_set passed a NULL pointer"" )"		1018003	0					
ANR	1018030	Callee	internal_error		1018003	0					
ANR	1018031	Identifier	internal_error		1018003	0					
ANR	1018032	ArgumentList	"""is_a_batchable_set passed a NULL pointer"""		1018003	1					
ANR	1018033	Argument	"""is_a_batchable_set passed a NULL pointer"""		1018003	0					
ANR	1018034	PrimaryExpression	"""is_a_batchable_set passed a NULL pointer"""		1018003	0					
ANR	1018035	IfStatement	if ( a -> bhandler == NULL && b -> bhandler == NULL )		1018003	2					
ANR	1018036	Condition	a -> bhandler == NULL && b -> bhandler == NULL	2243:4:59593:59634	1018003	0	True				
ANR	1018037	AndExpression	a -> bhandler == NULL && b -> bhandler == NULL		1018003	0		&&			
ANR	1018038	EqualityExpression	a -> bhandler == NULL		1018003	0		==			
ANR	1018039	PtrMemberAccess	a -> bhandler		1018003	0					
ANR	1018040	Identifier	a		1018003	0					
ANR	1018041	Identifier	bhandler		1018003	1					
ANR	1018042	Identifier	NULL		1018003	1					
ANR	1018043	EqualityExpression	b -> bhandler == NULL		1018003	1		==			
ANR	1018044	PtrMemberAccess	b -> bhandler		1018003	0					
ANR	1018045	Identifier	b		1018003	0					
ANR	1018046	Identifier	bhandler		1018003	1					
ANR	1018047	Identifier	NULL		1018003	1					
ANR	1018048	CompoundStatement		6:48:181:181	1018003	1					
ANR	1018049	ExpressionStatement	"internal_error ( ""is_a_batchable_set passed all NULL bhandler"" )"	2244:2:59641:59702	1018003	0	True				
ANR	1018050	CallExpression	"internal_error ( ""is_a_batchable_set passed all NULL bhandler"" )"		1018003	0					
ANR	1018051	Callee	internal_error		1018003	0					
ANR	1018052	Identifier	internal_error		1018003	0					
ANR	1018053	ArgumentList	"""is_a_batchable_set passed all NULL bhandler"""		1018003	1					
ANR	1018054	Argument	"""is_a_batchable_set passed all NULL bhandler"""		1018003	0					
ANR	1018055	PrimaryExpression	"""is_a_batchable_set passed all NULL bhandler"""		1018003	0					
ANR	1018056	IfStatement	if ( a -> bhandler != b -> bhandler )		1018003	3					
ANR	1018057	Condition	a -> bhandler != b -> bhandler	2246:4:59711:59736	1018003	0	True				
ANR	1018058	EqualityExpression	a -> bhandler != b -> bhandler		1018003	0		!=			
ANR	1018059	PtrMemberAccess	a -> bhandler		1018003	0					
ANR	1018060	Identifier	a		1018003	0					
ANR	1018061	Identifier	bhandler		1018003	1					
ANR	1018062	PtrMemberAccess	b -> bhandler		1018003	1					
ANR	1018063	Identifier	b		1018003	0					
ANR	1018064	Identifier	bhandler		1018003	1					
ANR	1018065	CompoundStatement		9:32:283:283	1018003	1					
ANR	1018066	ReturnStatement	return false ;	2247:2:59779:59791	1018003	0	True				
ANR	1018067	Identifier	false		1018003	0					
ANR	1018068	IfStatement	if ( a -> proxy != b -> proxy )		1018003	4					
ANR	1018069	Condition	a -> proxy != b -> proxy	2249:4:59800:59819	1018003	0	True				
ANR	1018070	EqualityExpression	a -> proxy != b -> proxy		1018003	0		!=			
ANR	1018071	PtrMemberAccess	a -> proxy		1018003	0					
ANR	1018072	Identifier	a		1018003	0					
ANR	1018073	Identifier	proxy		1018003	1					
ANR	1018074	PtrMemberAccess	b -> proxy		1018003	1					
ANR	1018075	Identifier	b		1018003	0					
ANR	1018076	Identifier	proxy		1018003	1					
ANR	1018077	CompoundStatement		12:26:366:366	1018003	1					
ANR	1018078	ReturnStatement	return false ;	2250:2:59858:59870	1018003	0	True				
ANR	1018079	Identifier	false		1018003	0					
ANR	1018080	IfStatement	if ( a -> requestcomp != b -> requestcomp )		1018003	5					
ANR	1018081	Condition	a -> requestcomp != b -> requestcomp	2252:4:59879:59910	1018003	0	True				
ANR	1018082	EqualityExpression	a -> requestcomp != b -> requestcomp		1018003	0		!=			
ANR	1018083	PtrMemberAccess	a -> requestcomp		1018003	0					
ANR	1018084	Identifier	a		1018003	0					
ANR	1018085	Identifier	requestcomp		1018003	1					
ANR	1018086	PtrMemberAccess	b -> requestcomp		1018003	1					
ANR	1018087	Identifier	b		1018003	0					
ANR	1018088	Identifier	requestcomp		1018003	1					
ANR	1018089	CompoundStatement		15:38:457:457	1018003	1					
ANR	1018090	ReturnStatement	return false ;	2253:2:59954:59966	1018003	0	True				
ANR	1018091	Identifier	false		1018003	0					
ANR	1018092	IfStatement	if ( a -> requestcomp )		1018003	6					
ANR	1018093	Condition	a -> requestcomp	2255:4:59975:59988	1018003	0	True				
ANR	1018094	PtrMemberAccess	a -> requestcomp		1018003	0					
ANR	1018095	Identifier	a		1018003	0					
ANR	1018096	Identifier	requestcomp		1018003	1					
ANR	1018097	CompoundStatement		18:20:535:535	1018003	1					
ANR	1018098	ReturnStatement	"return a -> requestcomp ( list , b ) ;"	2256:2:59995:60024	1018003	0	True				
ANR	1018099	CallExpression	"a -> requestcomp ( list , b )"		1018003	0					
ANR	1018100	Callee	a -> requestcomp		1018003	0					
ANR	1018101	PtrMemberAccess	a -> requestcomp		1018003	0					
ANR	1018102	Identifier	a		1018003	0					
ANR	1018103	Identifier	requestcomp		1018003	1					
ANR	1018104	ArgumentList	list		1018003	1					
ANR	1018105	Argument	list		1018003	0					
ANR	1018106	Identifier	list		1018003	0					
ANR	1018107	Argument	b		1018003	1					
ANR	1018108	Identifier	b		1018003	0					
ANR	1018109	ReturnStatement	return true ;	2258:1:60030:60041	1018003	7	True				
ANR	1018110	Identifier	true		1018003	0					
ANR	1018111	ReturnType	bool		1018003	1					
ANR	1018112	Identifier	is_a_batchable_set		1018003	2					
ANR	1018113	ParameterList	"const vector < Request * > & list , const Request * b"		1018003	3					
ANR	1018114	Parameter	const vector < Request * > & list	2238:25:59406:59433	1018003	0	True				
ANR	1018115	ParameterType	const vector < Request * > &		1018003	0					
ANR	1018116	Identifier	list		1018003	1					
ANR	1018117	Parameter	const Request * b	2238:55:59436:59451	1018003	1	True				
ANR	1018118	ParameterType	const Request *		1018003	0					
ANR	1018119	Identifier	b		1018003	1					
ANR	1018120	CFGEntryNode	ENTRY		1018003		True				
ANR	1018121	CFGExitNode	EXIT		1018003		True				
ANR	1018122	Symbol	b -> proxy		1018003						
ANR	1018123	Symbol	a		1018003						
ANR	1018124	Symbol	b		1018003						
ANR	1018125	Symbol	NULL		1018003						
ANR	1018126	Symbol	list . front		1018003						
ANR	1018127	Symbol	false		1018003						
ANR	1018128	Symbol	b -> requestcomp		1018003						
ANR	1018129	Symbol	* a		1018003						
ANR	1018130	Symbol	list		1018003						
ANR	1018131	Symbol	* b		1018003						
ANR	1018132	Symbol	a -> proxy		1018003						
ANR	1018133	Symbol	true		1018003						
ANR	1018134	Symbol	a -> bhandler		1018003						
ANR	1018135	Symbol	a -> requestcomp		1018003						
ANR	1018136	Symbol	b -> bhandler		1018003						
ANR	1018137	DeclStmt									
ANR	1018138	Decl							Request	Request *	req
ANR	1018139	DeclStmt									
ANR	1018140	Decl							vector < Request * >	vector < Request * >	rv
ANR	1018141	DeclStmt									
ANR	1018142	Decl							deque < Request * >	deque < Request * >	ReqDeque
ANR	1018143	DeclStmt									
ANR	1018144	Decl							int	int	size
ANR	1018145	DeclStmt									
ANR	1018146	Decl							ReqDeque :: iterator	ReqDeque :: iterator	it
ANR	1018147	DeclStmt									
ANR	1018148	Decl							char	char *	msg
ANR	1018149	DeclStmt									
ANR	1018150	Decl							vector < Request * > :: iterator	vector < Request * > :: iterator	it
ANR	1018151	DeclStmt									
ANR	1018152	Decl							int	int	i
ANR	1018153	DeclStmt									
ANR	1018154	Decl							glite :: ce :: cream_client_api :: util :: creamApiLogger	glite :: ce :: cream_client_api :: util :: creamApiLogger *	logger_instance
ANR	1018155	DeclStmt									
ANR	1018156	Decl							log4cpp :: Category	log4cpp :: Category *	log_dev
ANR	1018157	DeclStmt									
ANR	1018158	Decl							char	char * *	in
