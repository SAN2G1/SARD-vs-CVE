command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3137931	File	data/converged/CVE-2011-4930_htcondor/src_condor_dagman_node_scheduler_BTree.cpp								
ANR	3137932	Function	BTree :: BTree	40:0:806:841							
ANR	3137933	FunctionDef	BTree :: BTree ()		3137932	0					
ANR	3137934	CompoundStatement		41:0:825:841	3137932	0					
ANR	3137935	ExpressionStatement	root = NULL	42:1:828:839	3137932	0	True				
ANR	3137936	AssignmentExpression	root = NULL		3137932	0		=			
ANR	3137937	Identifier	root		3137932	0					
ANR	3137938	Identifier	NULL		3137932	1					
ANR	3137939	Identifier	BTree :: BTree		3137932	1					
ANR	3137940	ParameterList			3137932	2					
ANR	3137941	CFGEntryNode	ENTRY		3137932		True				
ANR	3137942	CFGExitNode	EXIT		3137932		True				
ANR	3137943	Symbol	NULL		3137932						
ANR	3137944	Symbol	root		3137932						
ANR	3137945	Function	BTree :: ~BTree	59:0:1021:1081							
ANR	3137946	FunctionDef	BTree :: ~BTree ()		3137945	0					
ANR	3137947	CompoundStatement		60:0:1041:1081	3137945	0					
ANR	3137948	ExpressionStatement	deleteRecursive ( root )	61:1:1044:1065	3137945	0	True				
ANR	3137949	CallExpression	deleteRecursive ( root )		3137945	0					
ANR	3137950	Callee	deleteRecursive		3137945	0					
ANR	3137951	Identifier	deleteRecursive		3137945	0					
ANR	3137952	ArgumentList	root		3137945	1					
ANR	3137953	Argument	root		3137945	0					
ANR	3137954	Identifier	root		3137945	0					
ANR	3137955	ExpressionStatement	root = NULL	62:1:1068:1079	3137945	1	True				
ANR	3137956	AssignmentExpression	root = NULL		3137945	0		=			
ANR	3137957	Identifier	root		3137945	0					
ANR	3137958	Identifier	NULL		3137945	1					
ANR	3137959	Identifier	BTree :: ~BTree		3137945	1					
ANR	3137960	ParameterList			3137945	2					
ANR	3137961	CFGEntryNode	ENTRY		3137945		True				
ANR	3137962	CFGExitNode	EXIT		3137945		True				
ANR	3137963	Symbol	NULL		3137945						
ANR	3137964	Symbol	root		3137945						
ANR	3137965	Function	BTree :: isEmpty	80:0:1268:1324							
ANR	3137966	FunctionDef	BTree :: isEmpty ()		3137965	0					
ANR	3137967	CompoundStatement		81:0:1300:1324	3137965	0					
ANR	3137968	ReturnStatement	return NULL == root ;	82:1:1303:1322	3137965	0	True				
ANR	3137969	EqualityExpression	NULL == root		3137965	0		==			
ANR	3137970	Identifier	NULL		3137965	0					
ANR	3137971	Identifier	root		3137965	1					
ANR	3137972	ReturnType	bool		3137965	1					
ANR	3137973	Identifier	BTree :: isEmpty		3137965	2					
ANR	3137974	ParameterList			3137965	3					
ANR	3137975	CFGEntryNode	ENTRY		3137965		True				
ANR	3137976	CFGExitNode	EXIT		3137965		True				
ANR	3137977	Symbol	NULL		3137965						
ANR	3137978	Symbol	root		3137965						
ANR	3137979	Function	BTree :: deleteRecursive	99:0:1589:1770							
ANR	3137980	FunctionDef	BTree :: deleteRecursive (Btree_Node * pNode)		3137979	0					
ANR	3137981	CompoundStatement		100:0:1636:1770	3137979	0					
ANR	3137982	IfStatement	if ( NULL == pNode )		3137979	0					
ANR	3137983	Condition	NULL == pNode	101:5:1643:1653	3137979	0	True				
ANR	3137984	EqualityExpression	NULL == pNode		3137979	0		==			
ANR	3137985	Identifier	NULL		3137979	0					
ANR	3137986	Identifier	pNode		3137979	1					
ANR	3137987	ReturnStatement	return ;	102:2:1659:1665	3137979	1	True				
ANR	3137988	ForStatement	for ( int i = 0 ; i <= pNode -> nkeys ; i ++ )		3137979	1					
ANR	3137989	ForInit	int i = 0 ;	104:6:1674:1681	3137979	0	True				
ANR	3137990	IdentifierDeclStatement	int i = 0 ;		3137979	0					
ANR	3137991	IdentifierDecl	i = 0		3137979	0					
ANR	3137992	IdentifierDeclType	int		3137979	0					
ANR	3137993	Identifier	i		3137979	1					
ANR	3137994	AssignmentExpression	i = 0		3137979	2		=			
ANR	3137995	Identifier	i		3137979	0					
ANR	3137996	PrimaryExpression	0		3137979	1					
ANR	3137997	Condition	i <= pNode -> nkeys	104:15:1683:1697	3137979	1	True				
ANR	3137998	RelationalExpression	i <= pNode -> nkeys		3137979	0		<=			
ANR	3137999	Identifier	i		3137979	0					
ANR	3138000	PtrMemberAccess	pNode -> nkeys		3137979	1					
ANR	3138001	Identifier	pNode		3137979	0					
ANR	3138002	Identifier	nkeys		3137979	1					
ANR	3138003	PostIncDecOperationExpression	i ++	104:32:1700:1702	3137979	2	True				
ANR	3138004	Identifier	i		3137979	0					
ANR	3138005	IncDec	++		3137979	1					
ANR	3138006	ExpressionStatement	deleteRecursive ( ( pNode -> child ) [ i ] )	105:2:1708:1744	3137979	3	True				
ANR	3138007	CallExpression	deleteRecursive ( ( pNode -> child ) [ i ] )		3137979	0					
ANR	3138008	Callee	deleteRecursive		3137979	0					
ANR	3138009	Identifier	deleteRecursive		3137979	0					
ANR	3138010	ArgumentList	( pNode -> child ) [ i ]		3137979	1					
ANR	3138011	Argument	( pNode -> child ) [ i ]		3137979	0					
ANR	3138012	ArrayIndexing	( pNode -> child ) [ i ]		3137979	0					
ANR	3138013	PtrMemberAccess	pNode -> child		3137979	0					
ANR	3138014	Identifier	pNode		3137979	0					
ANR	3138015	Identifier	child		3137979	1					
ANR	3138016	Identifier	i		3137979	1					
ANR	3138017	Statement	delete	106:1:1747:1752	3137979	2	True				
ANR	3138018	ExpressionStatement	pNode	106:8:1754:1759	3137979	3	True				
ANR	3138019	Identifier	pNode		3137979	0					
ANR	3138020	ReturnStatement	return ;	107:1:1762:1768	3137979	4	True				
ANR	3138021	ReturnType	void		3137979	1					
ANR	3138022	Identifier	BTree :: deleteRecursive		3137979	2					
ANR	3138023	ParameterList	Btree_Node * pNode		3137979	3					
ANR	3138024	Parameter	Btree_Node * pNode	99:28:1617:1633	3137979	0	True				
ANR	3138025	ParameterType	Btree_Node *		3137979	0					
ANR	3138026	Identifier	pNode		3137979	1					
ANR	3138027	CFGEntryNode	ENTRY		3137979		True				
ANR	3138028	CFGExitNode	EXIT		3137979		True				
ANR	3138029	Symbol	NULL		3137979						
ANR	3138030	Symbol	* i		3137979						
ANR	3138031	Symbol	pNode -> child		3137979						
ANR	3138032	Symbol	* * pNode		3137979						
ANR	3138033	Symbol	i		3137979						
ANR	3138034	Symbol	pNode -> nkeys		3137979						
ANR	3138035	Symbol	* pNode -> child		3137979						
ANR	3138036	Symbol	* pNode		3137979						
ANR	3138037	Symbol	pNode		3137979						
ANR	3138038	Function	BTree :: detachSibling	169:0:5357:6281							
ANR	3138039	FunctionDef	"BTree :: detachSibling (Btree_Node * pNode , Btree_Node * * ppSibling , Btree_Pair * pPairUp)"		3138038	0					
ANR	3138040	CompoundStatement		170:0:5447:6281	3138038	0					
ANR	3138041	IfStatement	if ( NULL == pNode )		3138038	0					
ANR	3138042	Condition	NULL == pNode	171:4:5453:5463	3138038	0	True				
ANR	3138043	EqualityExpression	NULL == pNode		3138038	0		==			
ANR	3138044	Identifier	NULL		3138038	0					
ANR	3138045	Identifier	pNode		3138038	1					
ANR	3138046	ThrowStatement	"throw ""BTree::detachSibling, pNode is NULL"" ;"	171:17:5466:5509	3138038	1	True				
ANR	3138047	PrimaryExpression	"""BTree::detachSibling, pNode is NULL"""		3138038	0					
ANR	3138048	IfStatement	if ( NULL == ppSibling )		3138038	1					
ANR	3138049	Condition	NULL == ppSibling	172:4:5515:5529	3138038	0	True				
ANR	3138050	EqualityExpression	NULL == ppSibling		3138038	0		==			
ANR	3138051	Identifier	NULL		3138038	0					
ANR	3138052	Identifier	ppSibling		3138038	1					
ANR	3138053	ThrowStatement	"throw ""BTree::detachSibling, ppSIBLING is NULL"" ;"	172:21:5532:5579	3138038	1	True				
ANR	3138054	PrimaryExpression	"""BTree::detachSibling, ppSIBLING is NULL"""		3138038	0					
ANR	3138055	IfStatement	if ( NULL == pPairUp )		3138038	2					
ANR	3138056	Condition	NULL == pPairUp	173:4:5585:5597	3138038	0	True				
ANR	3138057	EqualityExpression	NULL == pPairUp		3138038	0		==			
ANR	3138058	Identifier	NULL		3138038	0					
ANR	3138059	Identifier	pPairUp		3138038	1					
ANR	3138060	ThrowStatement	"throw ""BTree::detachSibling, pPairUp is NULL"" ;"	173:19:5600:5645	3138038	1	True				
ANR	3138061	PrimaryExpression	"""BTree::detachSibling, pPairUp is NULL"""		3138038	0					
ANR	3138062	IdentifierDeclStatement	int i ;	175:1:5649:5654	3138038	3	True				
ANR	3138063	IdentifierDecl	i		3138038	0					
ANR	3138064	IdentifierDeclType	int		3138038	0					
ANR	3138065	Identifier	i		3138038	1					
ANR	3138066	IfStatement	if ( 2 * t != pNode -> nkeys )		3138038	4					
ANR	3138067	Condition	2 * t != pNode -> nkeys	178:5:5699:5717	3138038	0	True				
ANR	3138068	EqualityExpression	2 * t != pNode -> nkeys		3138038	0		!=			
ANR	3138069	MultiplicativeExpression	2 * t		3138038	0		*			
ANR	3138070	PrimaryExpression	2		3138038	0					
ANR	3138071	Identifier	t		3138038	1					
ANR	3138072	PtrMemberAccess	pNode -> nkeys		3138038	1					
ANR	3138073	Identifier	pNode		3138038	0					
ANR	3138074	Identifier	nkeys		3138038	1					
ANR	3138075	CompoundStatement		9:27:273:273	3138038	1					
ANR	3138076	ExpressionStatement	* ppSibling = NULL	179:2:5725:5742	3138038	0	True				
ANR	3138077	AssignmentExpression	* ppSibling = NULL		3138038	0		=			
ANR	3138078	UnaryOperationExpression	* ppSibling		3138038	0					
ANR	3138079	UnaryOperator	*		3138038	0					
ANR	3138080	Identifier	ppSibling		3138038	1					
ANR	3138081	Identifier	NULL		3138038	1					
ANR	3138082	ReturnStatement	return ;	180:2:5746:5752	3138038	1	True				
ANR	3138083	ExpressionStatement		181:2:5756:5756	3138038	5	True				
ANR	3138084	ExpressionStatement	* pPairUp = ( pNode -> pair ) [ t ]	183:1:5760:5787	3138038	6	True				
ANR	3138085	AssignmentExpression	* pPairUp = ( pNode -> pair ) [ t ]		3138038	0		=			
ANR	3138086	UnaryOperationExpression	* pPairUp		3138038	0					
ANR	3138087	UnaryOperator	*		3138038	0					
ANR	3138088	Identifier	pPairUp		3138038	1					
ANR	3138089	ArrayIndexing	( pNode -> pair ) [ t ]		3138038	1					
ANR	3138090	PtrMemberAccess	pNode -> pair		3138038	0					
ANR	3138091	Identifier	pNode		3138038	0					
ANR	3138092	Identifier	pair		3138038	1					
ANR	3138093	Identifier	t		3138038	1					
ANR	3138094	Statement	*	185:1:5791:5791	3138038	7	True				
ANR	3138095	Statement	ppSibling	185:2:5792:5800	3138038	8	True				
ANR	3138096	Statement	=	185:12:5802:5802	3138038	9	True				
ANR	3138097	Statement	new	185:14:5804:5806	3138038	10	True				
ANR	3138098	ExpressionStatement	Btree_Node	185:18:5808:5818	3138038	11	True				
ANR	3138099	Identifier	Btree_Node		3138038	0					
ANR	3138100	IfStatement	if ( NULL == * ppSibling )		3138038	12					
ANR	3138101	Condition	NULL == * ppSibling	186:5:5825:5840	3138038	0	True				
ANR	3138102	EqualityExpression	NULL == * ppSibling		3138038	0		==			
ANR	3138103	Identifier	NULL		3138038	0					
ANR	3138104	UnaryOperationExpression	* ppSibling		3138038	1					
ANR	3138105	UnaryOperator	*		3138038	0					
ANR	3138106	Identifier	ppSibling		3138038	1					
ANR	3138107	ThrowStatement	"throw ""BTree::detachSibling, *ppSibling is NULL"" ;"	187:2:5846:5894	3138038	1	True				
ANR	3138108	PrimaryExpression	"""BTree::detachSibling, *ppSibling is NULL"""		3138038	0					
ANR	3138109	ExpressionStatement	( * ppSibling ) -> p = pNode -> p	189:1:5898:5924	3138038	13	True				
ANR	3138110	AssignmentExpression	( * ppSibling ) -> p = pNode -> p		3138038	0		=			
ANR	3138111	PtrMemberAccess	( * ppSibling ) -> p		3138038	0					
ANR	3138112	UnaryOperationExpression	* ppSibling		3138038	0					
ANR	3138113	UnaryOperator	*		3138038	0					
ANR	3138114	Identifier	ppSibling		3138038	1					
ANR	3138115	Identifier	p		3138038	1					
ANR	3138116	PtrMemberAccess	pNode -> p		3138038	1					
ANR	3138117	Identifier	pNode		3138038	0					
ANR	3138118	Identifier	p		3138038	1					
ANR	3138119	ExpressionStatement	( * ppSibling ) -> nkeys = t - 1	191:1:5928:5953	3138038	14	True				
ANR	3138120	AssignmentExpression	( * ppSibling ) -> nkeys = t - 1		3138038	0		=			
ANR	3138121	PtrMemberAccess	( * ppSibling ) -> nkeys		3138038	0					
ANR	3138122	UnaryOperationExpression	* ppSibling		3138038	0					
ANR	3138123	UnaryOperator	*		3138038	0					
ANR	3138124	Identifier	ppSibling		3138038	1					
ANR	3138125	Identifier	nkeys		3138038	1					
ANR	3138126	AdditiveExpression	t - 1		3138038	1		-			
ANR	3138127	Identifier	t		3138038	0					
ANR	3138128	PrimaryExpression	1		3138038	1					
ANR	3138129	ExpressionStatement	pNode -> nkeys = t	192:1:5956:5972	3138038	15	True				
ANR	3138130	AssignmentExpression	pNode -> nkeys = t		3138038	0		=			
ANR	3138131	PtrMemberAccess	pNode -> nkeys		3138038	0					
ANR	3138132	Identifier	pNode		3138038	0					
ANR	3138133	Identifier	nkeys		3138038	1					
ANR	3138134	Identifier	t		3138038	1					
ANR	3138135	ForStatement	for ( i = t + 1 ; i <= 2 * t - 1 ; i ++ )		3138038	16					
ANR	3138136	ForInit	i = t + 1 ;	194:6:5981:5986	3138038	0	True				
ANR	3138137	AssignmentExpression	i = t + 1		3138038	0		=			
ANR	3138138	Identifier	i		3138038	0					
ANR	3138139	AdditiveExpression	t + 1		3138038	1		+			
ANR	3138140	Identifier	t		3138038	0					
ANR	3138141	PrimaryExpression	1		3138038	1					
ANR	3138142	Condition	i <= 2 * t - 1	194:13:5988:5995	3138038	1	True				
ANR	3138143	RelationalExpression	i <= 2 * t - 1		3138038	0		<=			
ANR	3138144	Identifier	i		3138038	0					
ANR	3138145	AdditiveExpression	2 * t - 1		3138038	1		-			
ANR	3138146	MultiplicativeExpression	2 * t		3138038	0		*			
ANR	3138147	PrimaryExpression	2		3138038	0					
ANR	3138148	Identifier	t		3138038	1					
ANR	3138149	PrimaryExpression	1		3138038	1					
ANR	3138150	PostIncDecOperationExpression	i ++	194:23:5998:6000	3138038	2	True				
ANR	3138151	Identifier	i		3138038	0					
ANR	3138152	IncDec	++		3138038	1					
ANR	3138153	CompoundStatement		25:29:556:556	3138038	3					
ANR	3138154	ExpressionStatement	( ( * ppSibling ) -> pair ) [ i - t - 1 ] = ( pNode -> pair ) [ i ]	195:2:6008:6054	3138038	0	True				
ANR	3138155	AssignmentExpression	( ( * ppSibling ) -> pair ) [ i - t - 1 ] = ( pNode -> pair ) [ i ]		3138038	0		=			
ANR	3138156	ArrayIndexing	( ( * ppSibling ) -> pair ) [ i - t - 1 ]		3138038	0					
ANR	3138157	PtrMemberAccess	( * ppSibling ) -> pair		3138038	0					
ANR	3138158	UnaryOperationExpression	* ppSibling		3138038	0					
ANR	3138159	UnaryOperator	*		3138038	0					
ANR	3138160	Identifier	ppSibling		3138038	1					
ANR	3138161	Identifier	pair		3138038	1					
ANR	3138162	AdditiveExpression	i - t - 1		3138038	1		-			
ANR	3138163	Identifier	i		3138038	0					
ANR	3138164	AdditiveExpression	t - 1		3138038	1		-			
ANR	3138165	Identifier	t		3138038	0					
ANR	3138166	PrimaryExpression	1		3138038	1					
ANR	3138167	ArrayIndexing	( pNode -> pair ) [ i ]		3138038	1					
ANR	3138168	PtrMemberAccess	pNode -> pair		3138038	0					
ANR	3138169	Identifier	pNode		3138038	0					
ANR	3138170	Identifier	pair		3138038	1					
ANR	3138171	Identifier	i		3138038	1					
ANR	3138172	ExpressionStatement	( ( * ppSibling ) -> child ) [ i - t - 1 ] = ( pNode -> child ) [ i ]	196:2:6058:6106	3138038	1	True				
ANR	3138173	AssignmentExpression	( ( * ppSibling ) -> child ) [ i - t - 1 ] = ( pNode -> child ) [ i ]		3138038	0		=			
ANR	3138174	ArrayIndexing	( ( * ppSibling ) -> child ) [ i - t - 1 ]		3138038	0					
ANR	3138175	PtrMemberAccess	( * ppSibling ) -> child		3138038	0					
ANR	3138176	UnaryOperationExpression	* ppSibling		3138038	0					
ANR	3138177	UnaryOperator	*		3138038	0					
ANR	3138178	Identifier	ppSibling		3138038	1					
ANR	3138179	Identifier	child		3138038	1					
ANR	3138180	AdditiveExpression	i - t - 1		3138038	1		-			
ANR	3138181	Identifier	i		3138038	0					
ANR	3138182	AdditiveExpression	t - 1		3138038	1		-			
ANR	3138183	Identifier	t		3138038	0					
ANR	3138184	PrimaryExpression	1		3138038	1					
ANR	3138185	ArrayIndexing	( pNode -> child ) [ i ]		3138038	1					
ANR	3138186	PtrMemberAccess	pNode -> child		3138038	0					
ANR	3138187	Identifier	pNode		3138038	0					
ANR	3138188	Identifier	child		3138038	1					
ANR	3138189	Identifier	i		3138038	1					
ANR	3138190	ExpressionStatement		197:2:6110:6110	3138038	17	True				
ANR	3138191	ExpressionStatement	( ( * ppSibling ) -> child ) [ t - 1 ] = ( pNode -> child ) [ 2 * t ]	198:1:6113:6161	3138038	18	True				
ANR	3138192	AssignmentExpression	( ( * ppSibling ) -> child ) [ t - 1 ] = ( pNode -> child ) [ 2 * t ]		3138038	0		=			
ANR	3138193	ArrayIndexing	( ( * ppSibling ) -> child ) [ t - 1 ]		3138038	0					
ANR	3138194	PtrMemberAccess	( * ppSibling ) -> child		3138038	0					
ANR	3138195	UnaryOperationExpression	* ppSibling		3138038	0					
ANR	3138196	UnaryOperator	*		3138038	0					
ANR	3138197	Identifier	ppSibling		3138038	1					
ANR	3138198	Identifier	child		3138038	1					
ANR	3138199	AdditiveExpression	t - 1		3138038	1		-			
ANR	3138200	Identifier	t		3138038	0					
ANR	3138201	PrimaryExpression	1		3138038	1					
ANR	3138202	ArrayIndexing	( pNode -> child ) [ 2 * t ]		3138038	1					
ANR	3138203	PtrMemberAccess	pNode -> child		3138038	0					
ANR	3138204	Identifier	pNode		3138038	0					
ANR	3138205	Identifier	child		3138038	1					
ANR	3138206	MultiplicativeExpression	2 * t		3138038	1		*			
ANR	3138207	PrimaryExpression	2		3138038	0					
ANR	3138208	Identifier	t		3138038	1					
ANR	3138209	ForStatement	for ( i = 0 ; i <= t - 1 ; i ++ )		3138038	19					
ANR	3138210	ForInit	i = 0 ;	200:6:6170:6173	3138038	0	True				
ANR	3138211	AssignmentExpression	i = 0		3138038	0		=			
ANR	3138212	Identifier	i		3138038	0					
ANR	3138213	PrimaryExpression	0		3138038	1					
ANR	3138214	Condition	i <= t - 1	200:11:6175:6180	3138038	1	True				
ANR	3138215	RelationalExpression	i <= t - 1		3138038	0		<=			
ANR	3138216	Identifier	i		3138038	0					
ANR	3138217	AdditiveExpression	t - 1		3138038	1		-			
ANR	3138218	Identifier	t		3138038	0					
ANR	3138219	PrimaryExpression	1		3138038	1					
ANR	3138220	PostIncDecOperationExpression	i ++	200:19:6183:6185	3138038	2	True				
ANR	3138221	Identifier	i		3138038	0					
ANR	3138222	IncDec	++		3138038	1					
ANR	3138223	CompoundStatement		31:25:741:741	3138038	3					
ANR	3138224	IfStatement	if ( ( ( * ppSibling ) -> child ) [ i ] )		3138038	0					
ANR	3138225	Condition	( ( * ppSibling ) -> child ) [ i ]	201:6:6197:6220	3138038	0	True				
ANR	3138226	ArrayIndexing	( ( * ppSibling ) -> child ) [ i ]		3138038	0					
ANR	3138227	PtrMemberAccess	( * ppSibling ) -> child		3138038	0					
ANR	3138228	UnaryOperationExpression	* ppSibling		3138038	0					
ANR	3138229	UnaryOperator	*		3138038	0					
ANR	3138230	Identifier	ppSibling		3138038	1					
ANR	3138231	Identifier	child		3138038	1					
ANR	3138232	Identifier	i		3138038	1					
ANR	3138233	CompoundStatement		32:33:776:776	3138038	1					
ANR	3138234	ExpressionStatement	( ( * ppSibling ) -> child ) [ i ] -> p = * ppSibling	202:3:6229:6269	3138038	0	True				
ANR	3138235	AssignmentExpression	( ( * ppSibling ) -> child ) [ i ] -> p = * ppSibling		3138038	0		=			
ANR	3138236	PtrMemberAccess	( ( * ppSibling ) -> child ) [ i ] -> p		3138038	0					
ANR	3138237	ArrayIndexing	( ( * ppSibling ) -> child ) [ i ]		3138038	0					
ANR	3138238	PtrMemberAccess	( * ppSibling ) -> child		3138038	0					
ANR	3138239	UnaryOperationExpression	* ppSibling		3138038	0					
ANR	3138240	UnaryOperator	*		3138038	0					
ANR	3138241	Identifier	ppSibling		3138038	1					
ANR	3138242	Identifier	child		3138038	1					
ANR	3138243	Identifier	i		3138038	1					
ANR	3138244	Identifier	p		3138038	1					
ANR	3138245	UnaryOperationExpression	* ppSibling		3138038	1					
ANR	3138246	UnaryOperator	*		3138038	0					
ANR	3138247	Identifier	ppSibling		3138038	1					
ANR	3138248	ExpressionStatement		203:3:6274:6274	3138038	1	True				
ANR	3138249	ExpressionStatement		204:2:6278:6278	3138038	20	True				
ANR	3138250	ReturnType	void		3138038	1					
ANR	3138251	Identifier	BTree :: detachSibling		3138038	2					
ANR	3138252	ParameterList	"Btree_Node * pNode , Btree_Node * * ppSibling , Btree_Pair * pPairUp"		3138038	3					
ANR	3138253	Parameter	Btree_Node * pNode	169:26:5383:5399	3138038	0	True				
ANR	3138254	ParameterType	Btree_Node *		3138038	0					
ANR	3138255	Identifier	pNode		3138038	1					
ANR	3138256	Parameter	Btree_Node * * ppSibling	169:45:5402:5423	3138038	1	True				
ANR	3138257	ParameterType	Btree_Node * *		3138038	0					
ANR	3138258	Identifier	ppSibling		3138038	1					
ANR	3138259	Parameter	Btree_Pair * pPairUp	169:69:5426:5444	3138038	2	True				
ANR	3138260	ParameterType	Btree_Pair *		3138038	0					
ANR	3138261	Identifier	pPairUp		3138038	1					
ANR	3138262	CFGEntryNode	ENTRY		3138038		True				
ANR	3138263	CFGExitNode	EXIT		3138038		True				
ANR	3138264	CFGExceptionNode	EXCEPTION		3138038		True				
ANR	3138265	CFGExceptionNode	EXCEPTION		3138038		True				
ANR	3138266	CFGExceptionNode	EXCEPTION		3138038		True				
ANR	3138267	CFGExceptionNode	EXCEPTION		3138038		True				
ANR	3138268	CFGExceptionNode	EXCEPTION		3138038		True				
ANR	3138269	CFGExceptionNode	EXCEPTION		3138038		True				
ANR	3138270	CFGExceptionNode	EXCEPTION		3138038		True				
ANR	3138271	Symbol	* ( * ppSibling ) -> child		3138038						
ANR	3138272	Symbol	* pNode -> pair		3138038						
ANR	3138273	Symbol	( * ppSibling ) -> child		3138038						
ANR	3138274	Symbol	* ( * ppSibling ) -> pair		3138038						
ANR	3138275	Symbol	* pPairUp		3138038						
ANR	3138276	Symbol	pNode -> nkeys		3138038						
ANR	3138277	Symbol	* * ( * ppSibling ) -> child		3138038						
ANR	3138278	Symbol	pNode -> child		3138038						
ANR	3138279	Symbol	pNode		3138038						
ANR	3138280	Symbol	( ( * ppSibling ) -> child ) [ i ] -> p		3138038						
ANR	3138281	Symbol	* * * * ppSibling		3138038						
ANR	3138282	Symbol	pPairUp		3138038						
ANR	3138283	Symbol	* * i		3138038						
ANR	3138284	Symbol	NULL		3138038						
ANR	3138285	Symbol	( * ppSibling ) -> nkeys		3138038						
ANR	3138286	Symbol	i		3138038						
ANR	3138287	Symbol	* pNode		3138038						
ANR	3138288	Symbol	( * ppSibling ) -> p		3138038						
ANR	3138289	Symbol	pNode -> p		3138038						
ANR	3138290	Symbol	* * ppSibling		3138038						
ANR	3138291	Symbol	* i		3138038						
ANR	3138292	Symbol	t		3138038						
ANR	3138293	Symbol	pNode -> pair		3138038						
ANR	3138294	Symbol	* * pNode		3138038						
ANR	3138295	Symbol	* pNode -> child		3138038						
ANR	3138296	Symbol	* ppSibling		3138038						
ANR	3138297	Symbol	* * * ppSibling		3138038						
ANR	3138298	Symbol	( * ppSibling ) -> pair		3138038						
ANR	3138299	Symbol	* t		3138038						
ANR	3138300	Symbol	ppSibling		3138038						
ANR	3138301	Function	BTree :: attachSibling	267:0:9550:11442							
ANR	3138302	FunctionDef	"BTree :: attachSibling (Btree_Node * pNode , Btree_Node * pRightSibling)"		3138301	0					
ANR	3138303	CompoundStatement		268:0:9622:11442	3138301	0					
ANR	3138304	IfStatement	if ( NULL == pNode )		3138301	0					
ANR	3138305	Condition	NULL == pNode	269:4:9628:9638	3138301	0	True				
ANR	3138306	EqualityExpression	NULL == pNode		3138301	0		==			
ANR	3138307	Identifier	NULL		3138301	0					
ANR	3138308	Identifier	pNode		3138301	1					
ANR	3138309	ThrowStatement	"throw ""BTree::attachSibling, pNode is NULL"" ;"	269:17:9641:9684	3138301	1	True				
ANR	3138310	PrimaryExpression	"""BTree::attachSibling, pNode is NULL"""		3138301	0					
ANR	3138311	IfStatement	if ( NULL == pRightSibling )		3138301	1					
ANR	3138312	Condition	NULL == pRightSibling	270:4:9690:9708	3138301	0	True				
ANR	3138313	EqualityExpression	NULL == pRightSibling		3138301	0		==			
ANR	3138314	Identifier	NULL		3138301	0					
ANR	3138315	Identifier	pRightSibling		3138301	1					
ANR	3138316	ThrowStatement	"throw ""BTree::attachSibling, pRightSibling is NULL"" ;"	270:25:9711:9762	3138301	1	True				
ANR	3138317	PrimaryExpression	"""BTree::attachSibling, pRightSibling is NULL"""		3138301	0					
ANR	3138318	IfStatement	if ( pNode -> nkeys + pRightSibling -> nkeys > 2 * t - 2 )		3138301	2					
ANR	3138319	Condition	pNode -> nkeys + pRightSibling -> nkeys > 2 * t - 2	271:5:9769:9811	3138301	0	True				
ANR	3138320	RelationalExpression	pNode -> nkeys + pRightSibling -> nkeys > 2 * t - 2		3138301	0		>			
ANR	3138321	AdditiveExpression	pNode -> nkeys + pRightSibling -> nkeys		3138301	0		+			
ANR	3138322	PtrMemberAccess	pNode -> nkeys		3138301	0					
ANR	3138323	Identifier	pNode		3138301	0					
ANR	3138324	Identifier	nkeys		3138301	1					
ANR	3138325	PtrMemberAccess	pRightSibling -> nkeys		3138301	1					
ANR	3138326	Identifier	pRightSibling		3138301	0					
ANR	3138327	Identifier	nkeys		3138301	1					
ANR	3138328	AdditiveExpression	2 * t - 2		3138301	1		-			
ANR	3138329	MultiplicativeExpression	2 * t		3138301	0		*			
ANR	3138330	PrimaryExpression	2		3138301	0					
ANR	3138331	Identifier	t		3138301	1					
ANR	3138332	PrimaryExpression	2		3138301	1					
ANR	3138333	ThrowStatement	"throw ""BTree::attachSibling, too many keys"" ;"	271:51:9815:9858	3138301	1	True				
ANR	3138334	PrimaryExpression	"""BTree::attachSibling, too many keys"""		3138301	0					
ANR	3138335	IdentifierDeclStatement	Btree_Node * pParent ;	273:1:9879:9898	3138301	3	True				
ANR	3138336	IdentifierDecl	* pParent		3138301	0					
ANR	3138337	IdentifierDeclType	Btree_Node *		3138301	0					
ANR	3138338	Identifier	pParent		3138301	1					
ANR	3138339	IdentifierDeclStatement	"int i , j , h ;"	274:1:9901:9910	3138301	4	True				
ANR	3138340	IdentifierDecl	i		3138301	0					
ANR	3138341	IdentifierDeclType	int		3138301	0					
ANR	3138342	Identifier	i		3138301	1					
ANR	3138343	IdentifierDecl	j		3138301	1					
ANR	3138344	IdentifierDeclType	int		3138301	0					
ANR	3138345	Identifier	j		3138301	1					
ANR	3138346	IdentifierDecl	h		3138301	2					
ANR	3138347	IdentifierDeclType	int		3138301	0					
ANR	3138348	Identifier	h		3138301	1					
ANR	3138349	ExpressionStatement	pParent = pNode -> p	277:1:10006:10024	3138301	5	True				
ANR	3138350	AssignmentExpression	pParent = pNode -> p		3138301	0		=			
ANR	3138351	Identifier	pParent		3138301	0					
ANR	3138352	PtrMemberAccess	pNode -> p		3138301	1					
ANR	3138353	Identifier	pNode		3138301	0					
ANR	3138354	Identifier	p		3138301	1					
ANR	3138355	IfStatement	if ( NULL == pParent )		3138301	6					
ANR	3138356	Condition	NULL == pParent	278:5:10031:10045	3138301	0	True				
ANR	3138357	EqualityExpression	NULL == pParent		3138301	0		==			
ANR	3138358	Identifier	NULL		3138301	0					
ANR	3138359	Identifier	pParent		3138301	1					
ANR	3138360	CompoundStatement		11:23:426:426	3138301	1					
ANR	3138361	ExpressionStatement	"printf ( ""cannot happen, because pNode has a sibling\\n"" )"	278:25:10051:10105	3138301	0	True				
ANR	3138362	CallExpression	"printf ( ""cannot happen, because pNode has a sibling\\n"" )"		3138301	0					
ANR	3138363	Callee	printf		3138301	0					
ANR	3138364	Identifier	printf		3138301	0					
ANR	3138365	ArgumentList	"""cannot happen, because pNode has a sibling\\n"""		3138301	1					
ANR	3138366	Argument	"""cannot happen, because pNode has a sibling\\n"""		3138301	0					
ANR	3138367	PrimaryExpression	"""cannot happen, because pNode has a sibling\\n"""		3138301	0					
ANR	3138368	ReturnStatement	return ;	278:81:10107:10113	3138301	1	True				
ANR	3138369	ForStatement	for ( i = 0 ; i < pParent -> nkeys ; i ++ )		3138301	7					
ANR	3138370	ForInit	i = 0 ;	279:6:10123:10126	3138301	0	True				
ANR	3138371	AssignmentExpression	i = 0		3138301	0		=			
ANR	3138372	Identifier	i		3138301	0					
ANR	3138373	PrimaryExpression	0		3138301	1					
ANR	3138374	Condition	i < pParent -> nkeys	279:11:10128:10143	3138301	1	True				
ANR	3138375	RelationalExpression	i < pParent -> nkeys		3138301	0		<			
ANR	3138376	Identifier	i		3138301	0					
ANR	3138377	PtrMemberAccess	pParent -> nkeys		3138301	1					
ANR	3138378	Identifier	pParent		3138301	0					
ANR	3138379	Identifier	nkeys		3138301	1					
ANR	3138380	PostIncDecOperationExpression	i ++	279:29:10146:10148	3138301	2	True				
ANR	3138381	Identifier	i		3138301	0					
ANR	3138382	IncDec	++		3138301	1					
ANR	3138383	IfStatement	if ( ( pParent -> child ) [ i ] == pNode )		3138301	3					
ANR	3138384	Condition	( pParent -> child ) [ i ] == pNode	280:6:10206:10233	3138301	0	True				
ANR	3138385	EqualityExpression	( pParent -> child ) [ i ] == pNode		3138301	0		==			
ANR	3138386	ArrayIndexing	( pParent -> child ) [ i ]		3138301	0					
ANR	3138387	PtrMemberAccess	pParent -> child		3138301	0					
ANR	3138388	Identifier	pParent		3138301	0					
ANR	3138389	Identifier	child		3138301	1					
ANR	3138390	Identifier	i		3138301	1					
ANR	3138391	Identifier	pNode		3138301	1					
ANR	3138392	BreakStatement	break ;	280:37:10237:10242	3138301	1	True				
ANR	3138393	IfStatement	if ( i == pParent -> nkeys )		3138301	8					
ANR	3138394	Condition	i == pParent -> nkeys	281:5:10249:10267	3138301	0	True				
ANR	3138395	EqualityExpression	i == pParent -> nkeys		3138301	0		==			
ANR	3138396	Identifier	i		3138301	0					
ANR	3138397	PtrMemberAccess	pParent -> nkeys		3138301	1					
ANR	3138398	Identifier	pParent		3138301	0					
ANR	3138399	Identifier	nkeys		3138301	1					
ANR	3138400	CompoundStatement		14:27:648:648	3138301	1					
ANR	3138401	ExpressionStatement	"printf ( ""cannot happen, because pNode has a sibling on the right\\n"" )"	281:29:10273:10340	3138301	0	True				
ANR	3138402	CallExpression	"printf ( ""cannot happen, because pNode has a sibling on the right\\n"" )"		3138301	0					
ANR	3138403	Callee	printf		3138301	0					
ANR	3138404	Identifier	printf		3138301	0					
ANR	3138405	ArgumentList	"""cannot happen, because pNode has a sibling on the right\\n"""		3138301	1					
ANR	3138406	Argument	"""cannot happen, because pNode has a sibling on the right\\n"""		3138301	0					
ANR	3138407	PrimaryExpression	"""cannot happen, because pNode has a sibling on the right\\n"""		3138301	0					
ANR	3138408	ReturnStatement	return ;	281:98:10342:10348	3138301	1	True				
ANR	3138409	ExpressionStatement	j = pNode -> nkeys	284:1:10392:10408	3138301	9	True				
ANR	3138410	AssignmentExpression	j = pNode -> nkeys		3138301	0		=			
ANR	3138411	Identifier	j		3138301	0					
ANR	3138412	PtrMemberAccess	pNode -> nkeys		3138301	1					
ANR	3138413	Identifier	pNode		3138301	0					
ANR	3138414	Identifier	nkeys		3138301	1					
ANR	3138415	ExpressionStatement	( pNode -> pair ) [ j ] = ( pParent -> pair ) [ i ]	285:1:10411:10448	3138301	10	True				
ANR	3138416	AssignmentExpression	( pNode -> pair ) [ j ] = ( pParent -> pair ) [ i ]		3138301	0		=			
ANR	3138417	ArrayIndexing	( pNode -> pair ) [ j ]		3138301	0					
ANR	3138418	PtrMemberAccess	pNode -> pair		3138301	0					
ANR	3138419	Identifier	pNode		3138301	0					
ANR	3138420	Identifier	pair		3138301	1					
ANR	3138421	Identifier	j		3138301	1					
ANR	3138422	ArrayIndexing	( pParent -> pair ) [ i ]		3138301	1					
ANR	3138423	PtrMemberAccess	pParent -> pair		3138301	0					
ANR	3138424	Identifier	pParent		3138301	0					
ANR	3138425	Identifier	pair		3138301	1					
ANR	3138426	Identifier	i		3138301	1					
ANR	3138427	ExpressionStatement	j ++	286:1:10451:10454	3138301	11	True				
ANR	3138428	PostIncDecOperationExpression	j ++		3138301	0					
ANR	3138429	Identifier	j		3138301	0					
ANR	3138430	IncDec	++		3138301	1					
ANR	3138431	ForStatement	"for ( h = 0 ; h < pRightSibling -> nkeys ; h ++ , j ++ )"		3138301	12					
ANR	3138432	ForInit	h = 0 ;	289:6:10539:10542	3138301	0	True				
ANR	3138433	AssignmentExpression	h = 0		3138301	0		=			
ANR	3138434	Identifier	h		3138301	0					
ANR	3138435	PrimaryExpression	0		3138301	1					
ANR	3138436	Condition	h < pRightSibling -> nkeys	289:11:10544:10565	3138301	1	True				
ANR	3138437	RelationalExpression	h < pRightSibling -> nkeys		3138301	0		<			
ANR	3138438	Identifier	h		3138301	0					
ANR	3138439	PtrMemberAccess	pRightSibling -> nkeys		3138301	1					
ANR	3138440	Identifier	pRightSibling		3138301	0					
ANR	3138441	Identifier	nkeys		3138301	1					
ANR	3138442	Expression	"h ++ , j ++"	289:35:10568:10574	3138301	2	True				
ANR	3138443	PostIncDecOperationExpression	h ++		3138301	0					
ANR	3138444	Identifier	h		3138301	0					
ANR	3138445	IncDec	++		3138301	1					
ANR	3138446	PostIncDecOperationExpression	j ++		3138301	1					
ANR	3138447	Identifier	j		3138301	0					
ANR	3138448	IncDec	++		3138301	1					
ANR	3138449	CompoundStatement		22:44:954:954	3138301	3					
ANR	3138450	ExpressionStatement	( pNode -> pair ) [ j ] = ( pRightSibling -> pair ) [ h ]	290:2:10581:10624	3138301	0	True				
ANR	3138451	AssignmentExpression	( pNode -> pair ) [ j ] = ( pRightSibling -> pair ) [ h ]		3138301	0		=			
ANR	3138452	ArrayIndexing	( pNode -> pair ) [ j ]		3138301	0					
ANR	3138453	PtrMemberAccess	pNode -> pair		3138301	0					
ANR	3138454	Identifier	pNode		3138301	0					
ANR	3138455	Identifier	pair		3138301	1					
ANR	3138456	Identifier	j		3138301	1					
ANR	3138457	ArrayIndexing	( pRightSibling -> pair ) [ h ]		3138301	1					
ANR	3138458	PtrMemberAccess	pRightSibling -> pair		3138301	0					
ANR	3138459	Identifier	pRightSibling		3138301	0					
ANR	3138460	Identifier	pair		3138301	1					
ANR	3138461	Identifier	h		3138301	1					
ANR	3138462	ExpressionStatement	( pNode -> child ) [ j ] = ( pRightSibling -> child ) [ h ]	291:2:10628:10673	3138301	1	True				
ANR	3138463	AssignmentExpression	( pNode -> child ) [ j ] = ( pRightSibling -> child ) [ h ]		3138301	0		=			
ANR	3138464	ArrayIndexing	( pNode -> child ) [ j ]		3138301	0					
ANR	3138465	PtrMemberAccess	pNode -> child		3138301	0					
ANR	3138466	Identifier	pNode		3138301	0					
ANR	3138467	Identifier	child		3138301	1					
ANR	3138468	Identifier	j		3138301	1					
ANR	3138469	ArrayIndexing	( pRightSibling -> child ) [ h ]		3138301	1					
ANR	3138470	PtrMemberAccess	pRightSibling -> child		3138301	0					
ANR	3138471	Identifier	pRightSibling		3138301	0					
ANR	3138472	Identifier	child		3138301	1					
ANR	3138473	Identifier	h		3138301	1					
ANR	3138474	ExpressionStatement		292:2:10677:10677	3138301	13	True				
ANR	3138475	ExpressionStatement	( pNode -> child ) [ j ] = ( pRightSibling -> child ) [ h ]	293:1:10680:10725	3138301	14	True				
ANR	3138476	AssignmentExpression	( pNode -> child ) [ j ] = ( pRightSibling -> child ) [ h ]		3138301	0		=			
ANR	3138477	ArrayIndexing	( pNode -> child ) [ j ]		3138301	0					
ANR	3138478	PtrMemberAccess	pNode -> child		3138301	0					
ANR	3138479	Identifier	pNode		3138301	0					
ANR	3138480	Identifier	child		3138301	1					
ANR	3138481	Identifier	j		3138301	1					
ANR	3138482	ArrayIndexing	( pRightSibling -> child ) [ h ]		3138301	1					
ANR	3138483	PtrMemberAccess	pRightSibling -> child		3138301	0					
ANR	3138484	Identifier	pRightSibling		3138301	0					
ANR	3138485	Identifier	child		3138301	1					
ANR	3138486	Identifier	h		3138301	1					
ANR	3138487	ForStatement	for ( h = 0 ; h <= pRightSibling -> nkeys ; h ++ )		3138301	15					
ANR	3138488	ForInit	h = 0 ;	296:6:10848:10851	3138301	0	True				
ANR	3138489	AssignmentExpression	h = 0		3138301	0		=			
ANR	3138490	Identifier	h		3138301	0					
ANR	3138491	PrimaryExpression	0		3138301	1					
ANR	3138492	Condition	h <= pRightSibling -> nkeys	296:11:10853:10875	3138301	1	True				
ANR	3138493	RelationalExpression	h <= pRightSibling -> nkeys		3138301	0		<=			
ANR	3138494	Identifier	h		3138301	0					
ANR	3138495	PtrMemberAccess	pRightSibling -> nkeys		3138301	1					
ANR	3138496	Identifier	pRightSibling		3138301	0					
ANR	3138497	Identifier	nkeys		3138301	1					
ANR	3138498	PostIncDecOperationExpression	h ++	296:36:10878:10880	3138301	2	True				
ANR	3138499	Identifier	h		3138301	0					
ANR	3138500	IncDec	++		3138301	1					
ANR	3138501	CompoundStatement		29:41:1260:1260	3138301	3					
ANR	3138502	IfStatement	if ( NULL != ( pRightSibling -> child ) [ h ] )		3138301	0					
ANR	3138503	Condition	NULL != ( pRightSibling -> child ) [ h ]	297:6:10891:10923	3138301	0	True				
ANR	3138504	EqualityExpression	NULL != ( pRightSibling -> child ) [ h ]		3138301	0		!=			
ANR	3138505	Identifier	NULL		3138301	0					
ANR	3138506	ArrayIndexing	( pRightSibling -> child ) [ h ]		3138301	1					
ANR	3138507	PtrMemberAccess	pRightSibling -> child		3138301	0					
ANR	3138508	Identifier	pRightSibling		3138301	0					
ANR	3138509	Identifier	child		3138301	1					
ANR	3138510	Identifier	h		3138301	1					
ANR	3138511	ExpressionStatement	( ( pRightSibling -> child ) [ h ] ) -> p = pNode	298:3:10930:10968	3138301	1	True				
ANR	3138512	AssignmentExpression	( ( pRightSibling -> child ) [ h ] ) -> p = pNode		3138301	0		=			
ANR	3138513	PtrMemberAccess	( ( pRightSibling -> child ) [ h ] ) -> p		3138301	0					
ANR	3138514	ArrayIndexing	( pRightSibling -> child ) [ h ]		3138301	0					
ANR	3138515	PtrMemberAccess	pRightSibling -> child		3138301	0					
ANR	3138516	Identifier	pRightSibling		3138301	0					
ANR	3138517	Identifier	child		3138301	1					
ANR	3138518	Identifier	h		3138301	1					
ANR	3138519	Identifier	p		3138301	1					
ANR	3138520	Identifier	pNode		3138301	1					
ANR	3138521	ExpressionStatement		299:2:10972:10972	3138301	16	True				
ANR	3138522	ForStatement	for ( h = i + 1 ; h < pParent -> nkeys ; h ++ )		3138301	17					
ANR	3138523	ForInit	h = i + 1 ;	302:6:11074:11079	3138301	0	True				
ANR	3138524	AssignmentExpression	h = i + 1		3138301	0		=			
ANR	3138525	Identifier	h		3138301	0					
ANR	3138526	AdditiveExpression	i + 1		3138301	1		+			
ANR	3138527	Identifier	i		3138301	0					
ANR	3138528	PrimaryExpression	1		3138301	1					
ANR	3138529	Condition	h < pParent -> nkeys	302:13:11081:11096	3138301	1	True				
ANR	3138530	RelationalExpression	h < pParent -> nkeys		3138301	0		<			
ANR	3138531	Identifier	h		3138301	0					
ANR	3138532	PtrMemberAccess	pParent -> nkeys		3138301	1					
ANR	3138533	Identifier	pParent		3138301	0					
ANR	3138534	Identifier	nkeys		3138301	1					
ANR	3138535	PostIncDecOperationExpression	h ++	302:31:11099:11101	3138301	2	True				
ANR	3138536	Identifier	h		3138301	0					
ANR	3138537	IncDec	++		3138301	1					
ANR	3138538	CompoundStatement		35:37:1482:1482	3138301	3					
ANR	3138539	ExpressionStatement	( pParent -> pair ) [ h - 1 ] = ( pParent -> pair ) [ h ]	303:2:11109:11150	3138301	0	True				
ANR	3138540	AssignmentExpression	( pParent -> pair ) [ h - 1 ] = ( pParent -> pair ) [ h ]		3138301	0		=			
ANR	3138541	ArrayIndexing	( pParent -> pair ) [ h - 1 ]		3138301	0					
ANR	3138542	PtrMemberAccess	pParent -> pair		3138301	0					
ANR	3138543	Identifier	pParent		3138301	0					
ANR	3138544	Identifier	pair		3138301	1					
ANR	3138545	AdditiveExpression	h - 1		3138301	1		-			
ANR	3138546	Identifier	h		3138301	0					
ANR	3138547	PrimaryExpression	1		3138301	1					
ANR	3138548	ArrayIndexing	( pParent -> pair ) [ h ]		3138301	1					
ANR	3138549	PtrMemberAccess	pParent -> pair		3138301	0					
ANR	3138550	Identifier	pParent		3138301	0					
ANR	3138551	Identifier	pair		3138301	1					
ANR	3138552	Identifier	h		3138301	1					
ANR	3138553	ExpressionStatement	( pParent -> child ) [ h ] = ( pParent -> child ) [ h + 1 ]	304:2:11154:11197	3138301	1	True				
ANR	3138554	AssignmentExpression	( pParent -> child ) [ h ] = ( pParent -> child ) [ h + 1 ]		3138301	0		=			
ANR	3138555	ArrayIndexing	( pParent -> child ) [ h ]		3138301	0					
ANR	3138556	PtrMemberAccess	pParent -> child		3138301	0					
ANR	3138557	Identifier	pParent		3138301	0					
ANR	3138558	Identifier	child		3138301	1					
ANR	3138559	Identifier	h		3138301	1					
ANR	3138560	ArrayIndexing	( pParent -> child ) [ h + 1 ]		3138301	1					
ANR	3138561	PtrMemberAccess	pParent -> child		3138301	0					
ANR	3138562	Identifier	pParent		3138301	0					
ANR	3138563	Identifier	child		3138301	1					
ANR	3138564	AdditiveExpression	h + 1		3138301	1		+			
ANR	3138565	Identifier	h		3138301	0					
ANR	3138566	PrimaryExpression	1		3138301	1					
ANR	3138567	ExpressionStatement		305:2:11201:11201	3138301	18	True				
ANR	3138568	ExpressionStatement	( pParent -> nkeys ) --	306:1:11204:11222	3138301	19	True				
ANR	3138569	PostIncDecOperationExpression	( pParent -> nkeys ) --		3138301	0					
ANR	3138570	PtrMemberAccess	pParent -> nkeys		3138301	0					
ANR	3138571	Identifier	pParent		3138301	0					
ANR	3138572	Identifier	nkeys		3138301	1					
ANR	3138573	IncDec	--		3138301	1					
ANR	3138574	ExpressionStatement	( pNode -> nkeys ) += ( pRightSibling -> nkeys ) + 1	309:1:11333:11377	3138301	20	True				
ANR	3138575	AssignmentExpression	( pNode -> nkeys ) += ( pRightSibling -> nkeys ) + 1		3138301	0		+=			
ANR	3138576	PtrMemberAccess	pNode -> nkeys		3138301	0					
ANR	3138577	Identifier	pNode		3138301	0					
ANR	3138578	Identifier	nkeys		3138301	1					
ANR	3138579	AdditiveExpression	( pRightSibling -> nkeys ) + 1		3138301	1		+			
ANR	3138580	PtrMemberAccess	pRightSibling -> nkeys		3138301	0					
ANR	3138581	Identifier	pRightSibling		3138301	0					
ANR	3138582	Identifier	nkeys		3138301	1					
ANR	3138583	PrimaryExpression	1		3138301	1					
ANR	3138584	Statement	delete	312:1:11420:11425	3138301	21	True				
ANR	3138585	ExpressionStatement	pRightSibling	312:8:11427:11440	3138301	22	True				
ANR	3138586	Identifier	pRightSibling		3138301	0					
ANR	3138587	ReturnType	void		3138301	1					
ANR	3138588	Identifier	BTree :: attachSibling		3138301	2					
ANR	3138589	ParameterList	"Btree_Node * pNode , Btree_Node * pRightSibling"		3138301	3					
ANR	3138590	Parameter	Btree_Node * pNode	267:26:9576:9592	3138301	0	True				
ANR	3138591	ParameterType	Btree_Node *		3138301	0					
ANR	3138592	Identifier	pNode		3138301	1					
ANR	3138593	Parameter	Btree_Node * pRightSibling	267:45:9595:9619	3138301	1	True				
ANR	3138594	ParameterType	Btree_Node *		3138301	0					
ANR	3138595	Identifier	pRightSibling		3138301	1					
ANR	3138596	CFGEntryNode	ENTRY		3138301		True				
ANR	3138597	CFGExitNode	EXIT		3138301		True				
ANR	3138598	CFGExceptionNode	EXCEPTION		3138301		True				
ANR	3138599	CFGExceptionNode	EXCEPTION		3138301		True				
ANR	3138600	CFGExceptionNode	EXCEPTION		3138301		True				
ANR	3138601	CFGExceptionNode	EXCEPTION		3138301		True				
ANR	3138602	CFGExceptionNode	EXCEPTION		3138301		True				
ANR	3138603	Symbol	* pNode -> pair		3138301						
ANR	3138604	Symbol	pRightSibling -> child		3138301						
ANR	3138605	Symbol	pRightSibling		3138301						
ANR	3138606	Symbol	* pRightSibling -> child		3138301						
ANR	3138607	Symbol	pNode -> nkeys		3138301						
ANR	3138608	Symbol	( ( pRightSibling -> child ) [ h ] ) -> p		3138301						
ANR	3138609	Symbol	* * pRightSibling		3138301						
ANR	3138610	Symbol	* * pParent		3138301						
ANR	3138611	Symbol	pNode -> child		3138301						
ANR	3138612	Symbol	pParent -> child		3138301						
ANR	3138613	Symbol	* pParent -> pair		3138301						
ANR	3138614	Symbol	pNode		3138301						
ANR	3138615	Symbol	* * * pRightSibling		3138301						
ANR	3138616	Symbol	NULL		3138301						
ANR	3138617	Symbol	* * h		3138301						
ANR	3138618	Symbol	h		3138301						
ANR	3138619	Symbol	i		3138301						
ANR	3138620	Symbol	j		3138301						
ANR	3138621	Symbol	* pRightSibling		3138301						
ANR	3138622	Symbol	pRightSibling -> nkeys		3138301						
ANR	3138623	Symbol	* pNode		3138301						
ANR	3138624	Symbol	* pParent		3138301						
ANR	3138625	Symbol	* pRightSibling -> pair		3138301						
ANR	3138626	Symbol	pNode -> p		3138301						
ANR	3138627	Symbol	* h		3138301						
ANR	3138628	Symbol	pParent		3138301						
ANR	3138629	Symbol	* i		3138301						
ANR	3138630	Symbol	pRightSibling -> pair		3138301						
ANR	3138631	Symbol	t		3138301						
ANR	3138632	Symbol	* j		3138301						
ANR	3138633	Symbol	pNode -> pair		3138301						
ANR	3138634	Symbol	* * pNode		3138301						
ANR	3138635	Symbol	pParent -> pair		3138301						
ANR	3138636	Symbol	* * pRightSibling -> child		3138301						
ANR	3138637	Symbol	* pNode -> child		3138301						
ANR	3138638	Symbol	* pParent -> child		3138301						
ANR	3138639	Symbol	pParent -> nkeys		3138301						
ANR	3138640	Function	BTree :: leftSibling	330:0:11718:12423							
ANR	3138641	FunctionDef	BTree :: leftSibling (Btree_Node * pNode)		3138640	0					
ANR	3138642	CompoundStatement		331:0:11768:12423	3138640	0					
ANR	3138643	IfStatement	if ( NULL == pNode )		3138640	0					
ANR	3138644	Condition	NULL == pNode	332:4:11774:11784	3138640	0	True				
ANR	3138645	EqualityExpression	NULL == pNode		3138640	0		==			
ANR	3138646	Identifier	NULL		3138640	0					
ANR	3138647	Identifier	pNode		3138640	1					
ANR	3138648	ThrowStatement	"throw ""BTree::leftSibling, pNode is NULL"" ;"	332:17:11787:11828	3138640	1	True				
ANR	3138649	PrimaryExpression	"""BTree::leftSibling, pNode is NULL"""		3138640	0					
ANR	3138650	IdentifierDeclStatement	Btree_Node * pParent ;	334:1:11832:11851	3138640	1	True				
ANR	3138651	IdentifierDecl	* pParent		3138640	0					
ANR	3138652	IdentifierDeclType	Btree_Node *		3138640	0					
ANR	3138653	Identifier	pParent		3138640	1					
ANR	3138654	IdentifierDeclStatement	int i ;	335:1:11854:11859	3138640	2	True				
ANR	3138655	IdentifierDecl	i		3138640	0					
ANR	3138656	IdentifierDeclType	int		3138640	0					
ANR	3138657	Identifier	i		3138640	1					
ANR	3138658	ExpressionStatement	pParent = pNode -> p	338:1:11925:11943	3138640	3	True				
ANR	3138659	AssignmentExpression	pParent = pNode -> p		3138640	0		=			
ANR	3138660	Identifier	pParent		3138640	0					
ANR	3138661	PtrMemberAccess	pNode -> p		3138640	1					
ANR	3138662	Identifier	pNode		3138640	0					
ANR	3138663	Identifier	p		3138640	1					
ANR	3138664	IfStatement	if ( NULL == pParent )		3138640	4					
ANR	3138665	Condition	NULL == pParent	339:5:11950:11964	3138640	0	True				
ANR	3138666	EqualityExpression	NULL == pParent		3138640	0		==			
ANR	3138667	Identifier	NULL		3138640	0					
ANR	3138668	Identifier	pParent		3138640	1					
ANR	3138669	ReturnStatement	return NULL ;	340:2:11970:11981	3138640	1	True				
ANR	3138670	Identifier	NULL		3138640	0					
ANR	3138671	ForStatement	for ( i = 0 ; i <= pParent -> nkeys ; i ++ )		3138640	5					
ANR	3138672	ForInit	i = 0 ;	343:6:12078:12081	3138640	0	True				
ANR	3138673	AssignmentExpression	i = 0		3138640	0		=			
ANR	3138674	Identifier	i		3138640	0					
ANR	3138675	PrimaryExpression	0		3138640	1					
ANR	3138676	Condition	i <= pParent -> nkeys	343:11:12083:12099	3138640	1	True				
ANR	3138677	RelationalExpression	i <= pParent -> nkeys		3138640	0		<=			
ANR	3138678	Identifier	i		3138640	0					
ANR	3138679	PtrMemberAccess	pParent -> nkeys		3138640	1					
ANR	3138680	Identifier	pParent		3138640	0					
ANR	3138681	Identifier	nkeys		3138640	1					
ANR	3138682	PostIncDecOperationExpression	i ++	343:30:12102:12104	3138640	2	True				
ANR	3138683	Identifier	i		3138640	0					
ANR	3138684	IncDec	++		3138640	1					
ANR	3138685	CompoundStatement		13:36:339:339	3138640	3					
ANR	3138686	IfStatement	if ( ( pParent -> child ) [ i ] == pNode )		3138640	0					
ANR	3138687	Condition	( pParent -> child ) [ i ] == pNode	344:6:12116:12143	3138640	0	True				
ANR	3138688	EqualityExpression	( pParent -> child ) [ i ] == pNode		3138640	0		==			
ANR	3138689	ArrayIndexing	( pParent -> child ) [ i ]		3138640	0					
ANR	3138690	PtrMemberAccess	pParent -> child		3138640	0					
ANR	3138691	Identifier	pParent		3138640	0					
ANR	3138692	Identifier	child		3138640	1					
ANR	3138693	Identifier	i		3138640	1					
ANR	3138694	Identifier	pNode		3138640	1					
ANR	3138695	BreakStatement	break ;	344:37:12147:12152	3138640	1	True				
ANR	3138696	IfStatement	if ( i == pParent -> nkeys + 1 )		3138640	6					
ANR	3138697	Condition	i == pParent -> nkeys + 1	346:5:12162:12183	3138640	0	True				
ANR	3138698	EqualityExpression	i == pParent -> nkeys + 1		3138640	0		==			
ANR	3138699	Identifier	i		3138640	0					
ANR	3138700	AdditiveExpression	pParent -> nkeys + 1		3138640	1		+			
ANR	3138701	PtrMemberAccess	pParent -> nkeys		3138640	0					
ANR	3138702	Identifier	pParent		3138640	0					
ANR	3138703	Identifier	nkeys		3138640	1					
ANR	3138704	PrimaryExpression	1		3138640	1					
ANR	3138705	CompoundStatement		16:30:418:418	3138640	1					
ANR	3138706	ExpressionStatement	"printf ( ""this cannot happen becasue pNode is a child of pParent\\n"" )"	346:31:12188:12254	3138640	0	True				
ANR	3138707	CallExpression	"printf ( ""this cannot happen becasue pNode is a child of pParent\\n"" )"		3138640	0					
ANR	3138708	Callee	printf		3138640	0					
ANR	3138709	Identifier	printf		3138640	0					
ANR	3138710	ArgumentList	"""this cannot happen becasue pNode is a child of pParent\\n"""		3138640	1					
ANR	3138711	Argument	"""this cannot happen becasue pNode is a child of pParent\\n"""		3138640	0					
ANR	3138712	PrimaryExpression	"""this cannot happen becasue pNode is a child of pParent\\n"""		3138640	0					
ANR	3138713	ReturnStatement	return NULL ;	346:99:12256:12267	3138640	1	True				
ANR	3138714	Identifier	NULL		3138640	0					
ANR	3138715	ExpressionStatement		346:113:12270:12270	3138640	7	True				
ANR	3138716	IfStatement	if ( i == 0 )		3138640	8					
ANR	3138717	Condition	i == 0	349:5:12363:12366	3138640	0	True				
ANR	3138718	EqualityExpression	i == 0		3138640	0		==			
ANR	3138719	Identifier	i		3138640	0					
ANR	3138720	PrimaryExpression	0		3138640	1					
ANR	3138721	ReturnStatement	return NULL ;	350:2:12372:12383	3138640	1	True				
ANR	3138722	Identifier	NULL		3138640	0					
ANR	3138723	ElseStatement	else		3138640	0					
ANR	3138724	ReturnStatement	return ( pParent -> child ) [ i - 1 ] ;	352:2:12393:12421	3138640	0	True				
ANR	3138725	ArrayIndexing	( pParent -> child ) [ i - 1 ]		3138640	0					
ANR	3138726	PtrMemberAccess	pParent -> child		3138640	0					
ANR	3138727	Identifier	pParent		3138640	0					
ANR	3138728	Identifier	child		3138640	1					
ANR	3138729	AdditiveExpression	i - 1		3138640	1		-			
ANR	3138730	Identifier	i		3138640	0					
ANR	3138731	PrimaryExpression	1		3138640	1					
ANR	3138732	ReturnType	Btree_Node *		3138640	1					
ANR	3138733	Identifier	BTree :: leftSibling		3138640	2					
ANR	3138734	ParameterList	Btree_Node * pNode		3138640	3					
ANR	3138735	Parameter	Btree_Node * pNode	330:31:11749:11765	3138640	0	True				
ANR	3138736	ParameterType	Btree_Node *		3138640	0					
ANR	3138737	Identifier	pNode		3138640	1					
ANR	3138738	CFGEntryNode	ENTRY		3138640		True				
ANR	3138739	CFGExitNode	EXIT		3138640		True				
ANR	3138740	CFGExceptionNode	EXCEPTION		3138640		True				
ANR	3138741	Symbol	pNode -> p		3138640						
ANR	3138742	Symbol	NULL		3138640						
ANR	3138743	Symbol	pParent		3138640						
ANR	3138744	Symbol	* * pParent		3138640						
ANR	3138745	Symbol	* i		3138640						
ANR	3138746	Symbol	pParent -> child		3138640						
ANR	3138747	Symbol	i		3138640						
ANR	3138748	Symbol	* pNode		3138640						
ANR	3138749	Symbol	* pParent -> child		3138640						
ANR	3138750	Symbol	pNode		3138640						
ANR	3138751	Symbol	* pParent		3138640						
ANR	3138752	Symbol	pParent -> nkeys		3138640						
ANR	3138753	Function	BTree :: rightSibling	370:0:12703:13427							
ANR	3138754	FunctionDef	BTree :: rightSibling (Btree_Node * pNode)		3138753	0					
ANR	3138755	CompoundStatement		371:0:12754:13427	3138753	0					
ANR	3138756	IfStatement	if ( NULL == pNode )		3138753	0					
ANR	3138757	Condition	NULL == pNode	372:4:12760:12770	3138753	0	True				
ANR	3138758	EqualityExpression	NULL == pNode		3138753	0		==			
ANR	3138759	Identifier	NULL		3138753	0					
ANR	3138760	Identifier	pNode		3138753	1					
ANR	3138761	ThrowStatement	"throw ""BTree::rightSibling, pNode is NULL"" ;"	372:17:12773:12815	3138753	1	True				
ANR	3138762	PrimaryExpression	"""BTree::rightSibling, pNode is NULL"""		3138753	0					
ANR	3138763	IdentifierDeclStatement	Btree_Node * pParent ;	374:1:12819:12838	3138753	1	True				
ANR	3138764	IdentifierDecl	* pParent		3138753	0					
ANR	3138765	IdentifierDeclType	Btree_Node *		3138753	0					
ANR	3138766	Identifier	pParent		3138753	1					
ANR	3138767	IdentifierDeclStatement	int i ;	375:1:12841:12846	3138753	2	True				
ANR	3138768	IdentifierDecl	i		3138753	0					
ANR	3138769	IdentifierDeclType	int		3138753	0					
ANR	3138770	Identifier	i		3138753	1					
ANR	3138771	ExpressionStatement	pParent = pNode -> p	378:1:12912:12930	3138753	3	True				
ANR	3138772	AssignmentExpression	pParent = pNode -> p		3138753	0		=			
ANR	3138773	Identifier	pParent		3138753	0					
ANR	3138774	PtrMemberAccess	pNode -> p		3138753	1					
ANR	3138775	Identifier	pNode		3138753	0					
ANR	3138776	Identifier	p		3138753	1					
ANR	3138777	IfStatement	if ( NULL == pParent )		3138753	4					
ANR	3138778	Condition	NULL == pParent	379:5:12937:12951	3138753	0	True				
ANR	3138779	EqualityExpression	NULL == pParent		3138753	0		==			
ANR	3138780	Identifier	NULL		3138753	0					
ANR	3138781	Identifier	pParent		3138753	1					
ANR	3138782	ReturnStatement	return NULL ;	380:2:12957:12968	3138753	1	True				
ANR	3138783	Identifier	NULL		3138753	0					
ANR	3138784	ForStatement	for ( i = 0 ; i <= pParent -> nkeys ; i ++ )		3138753	5					
ANR	3138785	ForInit	i = 0 ;	383:6:13065:13068	3138753	0	True				
ANR	3138786	AssignmentExpression	i = 0		3138753	0		=			
ANR	3138787	Identifier	i		3138753	0					
ANR	3138788	PrimaryExpression	0		3138753	1					
ANR	3138789	Condition	i <= pParent -> nkeys	383:11:13070:13086	3138753	1	True				
ANR	3138790	RelationalExpression	i <= pParent -> nkeys		3138753	0		<=			
ANR	3138791	Identifier	i		3138753	0					
ANR	3138792	PtrMemberAccess	pParent -> nkeys		3138753	1					
ANR	3138793	Identifier	pParent		3138753	0					
ANR	3138794	Identifier	nkeys		3138753	1					
ANR	3138795	PostIncDecOperationExpression	i ++	383:30:13089:13091	3138753	2	True				
ANR	3138796	Identifier	i		3138753	0					
ANR	3138797	IncDec	++		3138753	1					
ANR	3138798	CompoundStatement		13:36:340:340	3138753	3					
ANR	3138799	IfStatement	if ( ( pParent -> child ) [ i ] == pNode )		3138753	0					
ANR	3138800	Condition	( pParent -> child ) [ i ] == pNode	384:6:13103:13130	3138753	0	True				
ANR	3138801	EqualityExpression	( pParent -> child ) [ i ] == pNode		3138753	0		==			
ANR	3138802	ArrayIndexing	( pParent -> child ) [ i ]		3138753	0					
ANR	3138803	PtrMemberAccess	pParent -> child		3138753	0					
ANR	3138804	Identifier	pParent		3138753	0					
ANR	3138805	Identifier	child		3138753	1					
ANR	3138806	Identifier	i		3138753	1					
ANR	3138807	Identifier	pNode		3138753	1					
ANR	3138808	BreakStatement	break ;	384:37:13134:13139	3138753	1	True				
ANR	3138809	IfStatement	if ( i == pParent -> nkeys + 1 )		3138753	6					
ANR	3138810	Condition	i == pParent -> nkeys + 1	386:5:13149:13170	3138753	0	True				
ANR	3138811	EqualityExpression	i == pParent -> nkeys + 1		3138753	0		==			
ANR	3138812	Identifier	i		3138753	0					
ANR	3138813	AdditiveExpression	pParent -> nkeys + 1		3138753	1		+			
ANR	3138814	PtrMemberAccess	pParent -> nkeys		3138753	0					
ANR	3138815	Identifier	pParent		3138753	0					
ANR	3138816	Identifier	nkeys		3138753	1					
ANR	3138817	PrimaryExpression	1		3138753	1					
ANR	3138818	CompoundStatement		16:30:419:419	3138753	1					
ANR	3138819	ExpressionStatement	"printf ( ""this cannot happen becasue pNode is a child of pParent\\n"" )"	386:31:13175:13241	3138753	0	True				
ANR	3138820	CallExpression	"printf ( ""this cannot happen becasue pNode is a child of pParent\\n"" )"		3138753	0					
ANR	3138821	Callee	printf		3138753	0					
ANR	3138822	Identifier	printf		3138753	0					
ANR	3138823	ArgumentList	"""this cannot happen becasue pNode is a child of pParent\\n"""		3138753	1					
ANR	3138824	Argument	"""this cannot happen becasue pNode is a child of pParent\\n"""		3138753	0					
ANR	3138825	PrimaryExpression	"""this cannot happen becasue pNode is a child of pParent\\n"""		3138753	0					
ANR	3138826	ReturnStatement	return NULL ;	386:99:13243:13254	3138753	1	True				
ANR	3138827	Identifier	NULL		3138753	0					
ANR	3138828	ExpressionStatement		386:113:13257:13257	3138753	7	True				
ANR	3138829	IfStatement	if ( i == pParent -> nkeys )		3138753	8					
ANR	3138830	Condition	i == pParent -> nkeys	389:5:13352:13370	3138753	0	True				
ANR	3138831	EqualityExpression	i == pParent -> nkeys		3138753	0		==			
ANR	3138832	Identifier	i		3138753	0					
ANR	3138833	PtrMemberAccess	pParent -> nkeys		3138753	1					
ANR	3138834	Identifier	pParent		3138753	0					
ANR	3138835	Identifier	nkeys		3138753	1					
ANR	3138836	ReturnStatement	return NULL ;	390:2:13376:13387	3138753	1	True				
ANR	3138837	Identifier	NULL		3138753	0					
ANR	3138838	ElseStatement	else		3138753	0					
ANR	3138839	ReturnStatement	return ( pParent -> child ) [ i + 1 ] ;	392:2:13397:13425	3138753	0	True				
ANR	3138840	ArrayIndexing	( pParent -> child ) [ i + 1 ]		3138753	0					
ANR	3138841	PtrMemberAccess	pParent -> child		3138753	0					
ANR	3138842	Identifier	pParent		3138753	0					
ANR	3138843	Identifier	child		3138753	1					
ANR	3138844	AdditiveExpression	i + 1		3138753	1		+			
ANR	3138845	Identifier	i		3138753	0					
ANR	3138846	PrimaryExpression	1		3138753	1					
ANR	3138847	ReturnType	Btree_Node *		3138753	1					
ANR	3138848	Identifier	BTree :: rightSibling		3138753	2					
ANR	3138849	ParameterList	Btree_Node * pNode		3138753	3					
ANR	3138850	Parameter	Btree_Node * pNode	370:32:12735:12751	3138753	0	True				
ANR	3138851	ParameterType	Btree_Node *		3138753	0					
ANR	3138852	Identifier	pNode		3138753	1					
ANR	3138853	CFGEntryNode	ENTRY		3138753		True				
ANR	3138854	CFGExitNode	EXIT		3138753		True				
ANR	3138855	CFGExceptionNode	EXCEPTION		3138753		True				
ANR	3138856	Symbol	pNode -> p		3138753						
ANR	3138857	Symbol	NULL		3138753						
ANR	3138858	Symbol	pParent		3138753						
ANR	3138859	Symbol	* i		3138753						
ANR	3138860	Symbol	* * pParent		3138753						
ANR	3138861	Symbol	pParent -> child		3138753						
ANR	3138862	Symbol	i		3138753						
ANR	3138863	Symbol	* pNode		3138753						
ANR	3138864	Symbol	* pParent -> child		3138753						
ANR	3138865	Symbol	pNode		3138753						
ANR	3138866	Symbol	* pParent		3138753						
ANR	3138867	Symbol	pParent -> nkeys		3138753						
ANR	3138868	Function	BTree :: insert	410:0:13698:16905							
ANR	3138869	FunctionDef	"BTree :: insert (unsigned long key , unsigned long val)"		3138868	0					
ANR	3138870	CompoundStatement		411:0:13755:16905	3138868	0					
ANR	3138871	IdentifierDeclStatement	Btree_Node * pLeaf ;	412:1:13758:13775	3138868	0	True				
ANR	3138872	IdentifierDecl	* pLeaf		3138868	0					
ANR	3138873	IdentifierDeclType	Btree_Node *		3138868	0					
ANR	3138874	Identifier	pLeaf		3138868	1					
ANR	3138875	IdentifierDeclStatement	Btree_Node * pNode ;	413:1:13778:13795	3138868	1	True				
ANR	3138876	IdentifierDecl	* pNode		3138868	0					
ANR	3138877	IdentifierDeclType	Btree_Node *		3138868	0					
ANR	3138878	Identifier	pNode		3138868	1					
ANR	3138879	IdentifierDeclStatement	Btree_Node * pSibling ;	414:1:13798:13818	3138868	2	True				
ANR	3138880	IdentifierDecl	* pSibling		3138868	0					
ANR	3138881	IdentifierDeclType	Btree_Node *		3138868	0					
ANR	3138882	Identifier	pSibling		3138868	1					
ANR	3138883	IdentifierDeclStatement	Btree_Node * pParent ;	415:1:13821:13840	3138868	3	True				
ANR	3138884	IdentifierDecl	* pParent		3138868	0					
ANR	3138885	IdentifierDeclType	Btree_Node *		3138868	0					
ANR	3138886	Identifier	pParent		3138868	1					
ANR	3138887	IdentifierDeclStatement	Btree_Pair pairUp ;	416:1:13843:13860	3138868	4	True				
ANR	3138888	IdentifierDecl	pairUp		3138868	0					
ANR	3138889	IdentifierDeclType	Btree_Pair		3138868	0					
ANR	3138890	Identifier	pairUp		3138868	1					
ANR	3138891	IfStatement	if ( NULL == root )		3138868	5					
ANR	3138892	Condition	NULL == root	426:5:14067:14078	3138868	0	True				
ANR	3138893	EqualityExpression	NULL == root		3138868	0		==			
ANR	3138894	Identifier	NULL		3138868	0					
ANR	3138895	Identifier	root		3138868	1					
ANR	3138896	CompoundStatement		16:20:326:326	3138868	1					
ANR	3138897	Statement	root	427:2:14086:14089	3138868	0	True				
ANR	3138898	Statement	=	427:7:14091:14091	3138868	1	True				
ANR	3138899	Statement	new	427:9:14093:14095	3138868	2	True				
ANR	3138900	ExpressionStatement	Btree_Node	427:13:14097:14107	3138868	3	True				
ANR	3138901	Identifier	Btree_Node		3138868	0					
ANR	3138902	IfStatement	if ( NULL == root )		3138868	4					
ANR	3138903	Condition	NULL == root	428:6:14115:14124	3138868	0	True				
ANR	3138904	EqualityExpression	NULL == root		3138868	0		==			
ANR	3138905	Identifier	NULL		3138868	0					
ANR	3138906	Identifier	root		3138868	1					
ANR	3138907	ThrowStatement	"throw ""BTree::insert, root is NULL"" ;"	429:3:14131:14166	3138868	1	True				
ANR	3138908	PrimaryExpression	"""BTree::insert, root is NULL"""		3138868	0					
ANR	3138909	ExpressionStatement	root -> p = NULL	430:2:14170:14184	3138868	5	True				
ANR	3138910	AssignmentExpression	root -> p = NULL		3138868	0		=			
ANR	3138911	PtrMemberAccess	root -> p		3138868	0					
ANR	3138912	Identifier	root		3138868	0					
ANR	3138913	Identifier	p		3138868	1					
ANR	3138914	Identifier	NULL		3138868	1					
ANR	3138915	ExpressionStatement	root -> nkeys = 1	431:2:14188:14203	3138868	6	True				
ANR	3138916	AssignmentExpression	root -> nkeys = 1		3138868	0		=			
ANR	3138917	PtrMemberAccess	root -> nkeys		3138868	0					
ANR	3138918	Identifier	root		3138868	0					
ANR	3138919	Identifier	nkeys		3138868	1					
ANR	3138920	PrimaryExpression	1		3138868	1					
ANR	3138921	ExpressionStatement	( root -> pair ) [ 0 ] . key = key	432:2:14207:14232	3138868	7	True				
ANR	3138922	AssignmentExpression	( root -> pair ) [ 0 ] . key = key		3138868	0		=			
ANR	3138923	MemberAccess	( root -> pair ) [ 0 ] . key		3138868	0					
ANR	3138924	ArrayIndexing	( root -> pair ) [ 0 ]		3138868	0					
ANR	3138925	PtrMemberAccess	root -> pair		3138868	0					
ANR	3138926	Identifier	root		3138868	0					
ANR	3138927	Identifier	pair		3138868	1					
ANR	3138928	PrimaryExpression	0		3138868	1					
ANR	3138929	Identifier	key		3138868	1					
ANR	3138930	Identifier	key		3138868	1					
ANR	3138931	ExpressionStatement	( root -> pair ) [ 0 ] . val = val	433:2:14236:14261	3138868	8	True				
ANR	3138932	AssignmentExpression	( root -> pair ) [ 0 ] . val = val		3138868	0		=			
ANR	3138933	MemberAccess	( root -> pair ) [ 0 ] . val		3138868	0					
ANR	3138934	ArrayIndexing	( root -> pair ) [ 0 ]		3138868	0					
ANR	3138935	PtrMemberAccess	root -> pair		3138868	0					
ANR	3138936	Identifier	root		3138868	0					
ANR	3138937	Identifier	pair		3138868	1					
ANR	3138938	PrimaryExpression	0		3138868	1					
ANR	3138939	Identifier	val		3138868	1					
ANR	3138940	Identifier	val		3138868	1					
ANR	3138941	ExpressionStatement	( root -> child ) [ 0 ] = NULL	434:2:14265:14288	3138868	9	True				
ANR	3138942	AssignmentExpression	( root -> child ) [ 0 ] = NULL		3138868	0		=			
ANR	3138943	ArrayIndexing	( root -> child ) [ 0 ]		3138868	0					
ANR	3138944	PtrMemberAccess	root -> child		3138868	0					
ANR	3138945	Identifier	root		3138868	0					
ANR	3138946	Identifier	child		3138868	1					
ANR	3138947	PrimaryExpression	0		3138868	1					
ANR	3138948	Identifier	NULL		3138868	1					
ANR	3138949	ExpressionStatement	( root -> child ) [ 1 ] = NULL	435:2:14292:14315	3138868	10	True				
ANR	3138950	AssignmentExpression	( root -> child ) [ 1 ] = NULL		3138868	0		=			
ANR	3138951	ArrayIndexing	( root -> child ) [ 1 ]		3138868	0					
ANR	3138952	PtrMemberAccess	root -> child		3138868	0					
ANR	3138953	Identifier	root		3138868	0					
ANR	3138954	Identifier	child		3138868	1					
ANR	3138955	PrimaryExpression	1		3138868	1					
ANR	3138956	Identifier	NULL		3138868	1					
ANR	3138957	ReturnStatement	return ;	436:2:14319:14325	3138868	11	True				
ANR	3138958	ExpressionStatement		437:2:14329:14329	3138868	6	True				
ANR	3138959	ExpressionStatement	pLeaf = root	440:4:14409:14421	3138868	7	True				
ANR	3138960	AssignmentExpression	pLeaf = root		3138868	0		=			
ANR	3138961	Identifier	pLeaf		3138868	0					
ANR	3138962	Identifier	root		3138868	1					
ANR	3138963	IdentifierDeclStatement	int i ;	441:1:14424:14429	3138868	8	True				
ANR	3138964	IdentifierDecl	i		3138868	0					
ANR	3138965	IdentifierDeclType	int		3138868	0					
ANR	3138966	Identifier	i		3138868	1					
ANR	3138967	WhileStatement	while ( NULL != ( pLeaf -> child ) [ 0 ] )		3138868	9					
ANR	3138968	Condition	NULL != ( pLeaf -> child ) [ 0 ]	442:8:14439:14463	3138868	0	True				
ANR	3138969	EqualityExpression	NULL != ( pLeaf -> child ) [ 0 ]		3138868	0		!=			
ANR	3138970	Identifier	NULL		3138868	0					
ANR	3138971	ArrayIndexing	( pLeaf -> child ) [ 0 ]		3138868	1					
ANR	3138972	PtrMemberAccess	pLeaf -> child		3138868	0					
ANR	3138973	Identifier	pLeaf		3138868	0					
ANR	3138974	Identifier	child		3138868	1					
ANR	3138975	PrimaryExpression	0		3138868	1					
ANR	3138976	CompoundStatement		32:36:711:711	3138868	1					
ANR	3138977	ForStatement	for ( i = 0 ; i < ( pLeaf -> nkeys ) ; i ++ )		3138868	0					
ANR	3138978	ForInit	i = 0 ;	446:7:14629:14632	3138868	0	True				
ANR	3138979	AssignmentExpression	i = 0		3138868	0		=			
ANR	3138980	Identifier	i		3138868	0					
ANR	3138981	PrimaryExpression	0		3138868	1					
ANR	3138982	Condition	i < ( pLeaf -> nkeys )	446:12:14634:14649	3138868	1	True				
ANR	3138983	RelationalExpression	i < ( pLeaf -> nkeys )		3138868	0		<			
ANR	3138984	Identifier	i		3138868	0					
ANR	3138985	PtrMemberAccess	pLeaf -> nkeys		3138868	1					
ANR	3138986	Identifier	pLeaf		3138868	0					
ANR	3138987	Identifier	nkeys		3138868	1					
ANR	3138988	PostIncDecOperationExpression	i ++	446:30:14652:14654	3138868	2	True				
ANR	3138989	Identifier	i		3138868	0					
ANR	3138990	IncDec	++		3138868	1					
ANR	3138991	IfStatement	if ( key < ( pLeaf -> pair ) [ i ] . key )		3138868	3					
ANR	3138992	Condition	key < ( pLeaf -> pair ) [ i ] . key	447:7:14665:14690	3138868	0	True				
ANR	3138993	RelationalExpression	key < ( pLeaf -> pair ) [ i ] . key		3138868	0		<			
ANR	3138994	Identifier	key		3138868	0					
ANR	3138995	MemberAccess	( pLeaf -> pair ) [ i ] . key		3138868	1					
ANR	3138996	ArrayIndexing	( pLeaf -> pair ) [ i ]		3138868	0					
ANR	3138997	PtrMemberAccess	pLeaf -> pair		3138868	0					
ANR	3138998	Identifier	pLeaf		3138868	0					
ANR	3138999	Identifier	pair		3138868	1					
ANR	3139000	Identifier	i		3138868	1					
ANR	3139001	Identifier	key		3138868	1					
ANR	3139002	BreakStatement	break ;	447:36:14694:14699	3138868	1	True				
ANR	3139003	ExpressionStatement	pLeaf = ( pLeaf -> child ) [ i ]	457:2:15011:15036	3138868	1	True				
ANR	3139004	AssignmentExpression	pLeaf = ( pLeaf -> child ) [ i ]		3138868	0		=			
ANR	3139005	Identifier	pLeaf		3138868	0					
ANR	3139006	ArrayIndexing	( pLeaf -> child ) [ i ]		3138868	1					
ANR	3139007	PtrMemberAccess	pLeaf -> child		3138868	0					
ANR	3139008	Identifier	pLeaf		3138868	0					
ANR	3139009	Identifier	child		3138868	1					
ANR	3139010	Identifier	i		3138868	1					
ANR	3139011	ExpressionStatement		458:2:15040:15040	3138868	10	True				
ANR	3139012	ExpressionStatement	i = ( pLeaf -> nkeys ) - 1	462:1:15216:15236	3138868	11	True				
ANR	3139013	AssignmentExpression	i = ( pLeaf -> nkeys ) - 1		3138868	0		=			
ANR	3139014	Identifier	i		3138868	0					
ANR	3139015	AdditiveExpression	( pLeaf -> nkeys ) - 1		3138868	1		-			
ANR	3139016	PtrMemberAccess	pLeaf -> nkeys		3138868	0					
ANR	3139017	Identifier	pLeaf		3138868	0					
ANR	3139018	Identifier	nkeys		3138868	1					
ANR	3139019	PrimaryExpression	1		3138868	1					
ANR	3139020	WhileStatement	while ( i >= 0 && ( pLeaf -> pair ) [ i ] . key > key )		3138868	12					
ANR	3139021	Condition	i >= 0 && ( pLeaf -> pair ) [ i ] . key > key	463:8:15246:15279	3138868	0	True				
ANR	3139022	AndExpression	i >= 0 && ( pLeaf -> pair ) [ i ] . key > key		3138868	0		&&			
ANR	3139023	RelationalExpression	i >= 0		3138868	0		>=			
ANR	3139024	Identifier	i		3138868	0					
ANR	3139025	PrimaryExpression	0		3138868	1					
ANR	3139026	RelationalExpression	( pLeaf -> pair ) [ i ] . key > key		3138868	1		>			
ANR	3139027	MemberAccess	( pLeaf -> pair ) [ i ] . key		3138868	0					
ANR	3139028	ArrayIndexing	( pLeaf -> pair ) [ i ]		3138868	0					
ANR	3139029	PtrMemberAccess	pLeaf -> pair		3138868	0					
ANR	3139030	Identifier	pLeaf		3138868	0					
ANR	3139031	Identifier	pair		3138868	1					
ANR	3139032	Identifier	i		3138868	1					
ANR	3139033	Identifier	key		3138868	1					
ANR	3139034	Identifier	key		3138868	1					
ANR	3139035	CompoundStatement		53:45:1527:1527	3138868	1					
ANR	3139036	ExpressionStatement	( pLeaf -> pair ) [ i + 1 ] = ( pLeaf -> pair ) [ i ]	464:2:15287:15324	3138868	0	True				
ANR	3139037	AssignmentExpression	( pLeaf -> pair ) [ i + 1 ] = ( pLeaf -> pair ) [ i ]		3138868	0		=			
ANR	3139038	ArrayIndexing	( pLeaf -> pair ) [ i + 1 ]		3138868	0					
ANR	3139039	PtrMemberAccess	pLeaf -> pair		3138868	0					
ANR	3139040	Identifier	pLeaf		3138868	0					
ANR	3139041	Identifier	pair		3138868	1					
ANR	3139042	AdditiveExpression	i + 1		3138868	1		+			
ANR	3139043	Identifier	i		3138868	0					
ANR	3139044	PrimaryExpression	1		3138868	1					
ANR	3139045	ArrayIndexing	( pLeaf -> pair ) [ i ]		3138868	1					
ANR	3139046	PtrMemberAccess	pLeaf -> pair		3138868	0					
ANR	3139047	Identifier	pLeaf		3138868	0					
ANR	3139048	Identifier	pair		3138868	1					
ANR	3139049	Identifier	i		3138868	1					
ANR	3139050	ExpressionStatement	i --	465:2:15328:15331	3138868	1	True				
ANR	3139051	PostIncDecOperationExpression	i --		3138868	0					
ANR	3139052	Identifier	i		3138868	0					
ANR	3139053	IncDec	--		3138868	1					
ANR	3139054	ExpressionStatement		466:2:15335:15335	3138868	13	True				
ANR	3139055	ExpressionStatement	( pLeaf -> pair ) [ i + 1 ] . key = key	467:1:15338:15366	3138868	14	True				
ANR	3139056	AssignmentExpression	( pLeaf -> pair ) [ i + 1 ] . key = key		3138868	0		=			
ANR	3139057	MemberAccess	( pLeaf -> pair ) [ i + 1 ] . key		3138868	0					
ANR	3139058	ArrayIndexing	( pLeaf -> pair ) [ i + 1 ]		3138868	0					
ANR	3139059	PtrMemberAccess	pLeaf -> pair		3138868	0					
ANR	3139060	Identifier	pLeaf		3138868	0					
ANR	3139061	Identifier	pair		3138868	1					
ANR	3139062	AdditiveExpression	i + 1		3138868	1		+			
ANR	3139063	Identifier	i		3138868	0					
ANR	3139064	PrimaryExpression	1		3138868	1					
ANR	3139065	Identifier	key		3138868	1					
ANR	3139066	Identifier	key		3138868	1					
ANR	3139067	ExpressionStatement	( pLeaf -> pair ) [ i + 1 ] . val = val	468:1:15369:15397	3138868	15	True				
ANR	3139068	AssignmentExpression	( pLeaf -> pair ) [ i + 1 ] . val = val		3138868	0		=			
ANR	3139069	MemberAccess	( pLeaf -> pair ) [ i + 1 ] . val		3138868	0					
ANR	3139070	ArrayIndexing	( pLeaf -> pair ) [ i + 1 ]		3138868	0					
ANR	3139071	PtrMemberAccess	pLeaf -> pair		3138868	0					
ANR	3139072	Identifier	pLeaf		3138868	0					
ANR	3139073	Identifier	pair		3138868	1					
ANR	3139074	AdditiveExpression	i + 1		3138868	1		+			
ANR	3139075	Identifier	i		3138868	0					
ANR	3139076	PrimaryExpression	1		3138868	1					
ANR	3139077	Identifier	val		3138868	1					
ANR	3139078	Identifier	val		3138868	1					
ANR	3139079	ExpressionStatement	( pLeaf -> nkeys ) ++	469:1:15400:15416	3138868	16	True				
ANR	3139080	PostIncDecOperationExpression	( pLeaf -> nkeys ) ++		3138868	0					
ANR	3139081	PtrMemberAccess	pLeaf -> nkeys		3138868	0					
ANR	3139082	Identifier	pLeaf		3138868	0					
ANR	3139083	Identifier	nkeys		3138868	1					
ANR	3139084	IncDec	++		3138868	1					
ANR	3139085	ExpressionStatement	( pLeaf -> child ) [ pLeaf -> nkeys ] = NULL	471:1:15474:15511	3138868	17	True				
ANR	3139086	AssignmentExpression	( pLeaf -> child ) [ pLeaf -> nkeys ] = NULL		3138868	0		=			
ANR	3139087	ArrayIndexing	( pLeaf -> child ) [ pLeaf -> nkeys ]		3138868	0					
ANR	3139088	PtrMemberAccess	pLeaf -> child		3138868	0					
ANR	3139089	Identifier	pLeaf		3138868	0					
ANR	3139090	Identifier	child		3138868	1					
ANR	3139091	PtrMemberAccess	pLeaf -> nkeys		3138868	1					
ANR	3139092	Identifier	pLeaf		3138868	0					
ANR	3139093	Identifier	nkeys		3138868	1					
ANR	3139094	Identifier	NULL		3138868	1					
ANR	3139095	ExpressionStatement	pNode = pLeaf	473:1:15515:15528	3138868	18	True				
ANR	3139096	AssignmentExpression	pNode = pLeaf		3138868	0		=			
ANR	3139097	Identifier	pNode		3138868	0					
ANR	3139098	Identifier	pLeaf		3138868	1					
ANR	3139099	WhileStatement	while ( 2 * t == pNode -> nkeys )		3138868	19					
ANR	3139100	Condition	2 * t == pNode -> nkeys	474:8:15538:15556	3138868	0	True				
ANR	3139101	EqualityExpression	2 * t == pNode -> nkeys		3138868	0		==			
ANR	3139102	MultiplicativeExpression	2 * t		3138868	0		*			
ANR	3139103	PrimaryExpression	2		3138868	0					
ANR	3139104	Identifier	t		3138868	1					
ANR	3139105	PtrMemberAccess	pNode -> nkeys		3138868	1					
ANR	3139106	Identifier	pNode		3138868	0					
ANR	3139107	Identifier	nkeys		3138868	1					
ANR	3139108	CompoundStatement		64:30:1804:1804	3138868	1					
ANR	3139109	ExpressionStatement	"detachSibling ( pNode , & pSibling , & pairUp )"	477:2:15673:15711	3138868	0	True				
ANR	3139110	CallExpression	"detachSibling ( pNode , & pSibling , & pairUp )"		3138868	0					
ANR	3139111	Callee	detachSibling		3138868	0					
ANR	3139112	Identifier	detachSibling		3138868	0					
ANR	3139113	ArgumentList	pNode		3138868	1					
ANR	3139114	Argument	pNode		3138868	0					
ANR	3139115	Identifier	pNode		3138868	0					
ANR	3139116	Argument	& pSibling		3138868	1					
ANR	3139117	UnaryOperationExpression	& pSibling		3138868	0					
ANR	3139118	UnaryOperator	&		3138868	0					
ANR	3139119	Identifier	pSibling		3138868	1					
ANR	3139120	Argument	& pairUp		3138868	2					
ANR	3139121	UnaryOperationExpression	& pairUp		3138868	0					
ANR	3139122	UnaryOperator	&		3138868	0					
ANR	3139123	Identifier	pairUp		3138868	1					
ANR	3139124	IfStatement	if ( NULL == pNode -> p )		3138868	1					
ANR	3139125	Condition	NULL == pNode -> p	480:6:15806:15821	3138868	0	True				
ANR	3139126	EqualityExpression	NULL == pNode -> p		3138868	0		==			
ANR	3139127	Identifier	NULL		3138868	0					
ANR	3139128	PtrMemberAccess	pNode -> p		3138868	1					
ANR	3139129	Identifier	pNode		3138868	0					
ANR	3139130	Identifier	p		3138868	1					
ANR	3139131	CompoundStatement		70:25:2069:2069	3138868	1					
ANR	3139132	Statement	root	481:3:15830:15833	3138868	0	True				
ANR	3139133	Statement	=	481:8:15835:15835	3138868	1	True				
ANR	3139134	Statement	new	481:10:15837:15839	3138868	2	True				
ANR	3139135	ExpressionStatement	Btree_Node	481:14:15841:15851	3138868	3	True				
ANR	3139136	Identifier	Btree_Node		3138868	0					
ANR	3139137	IfStatement	if ( NULL == root )		3138868	4					
ANR	3139138	Condition	NULL == root	482:7:15860:15869	3138868	0	True				
ANR	3139139	EqualityExpression	NULL == root		3138868	0		==			
ANR	3139140	Identifier	NULL		3138868	0					
ANR	3139141	Identifier	root		3138868	1					
ANR	3139142	ThrowStatement	"throw ""BTree::insert, root is NULL 2"" ;"	483:4:15877:15914	3138868	1	True				
ANR	3139143	PrimaryExpression	"""BTree::insert, root is NULL 2"""		3138868	0					
ANR	3139144	ExpressionStatement	root -> p = NULL	484:3:15919:15933	3138868	5	True				
ANR	3139145	AssignmentExpression	root -> p = NULL		3138868	0		=			
ANR	3139146	PtrMemberAccess	root -> p		3138868	0					
ANR	3139147	Identifier	root		3138868	0					
ANR	3139148	Identifier	p		3138868	1					
ANR	3139149	Identifier	NULL		3138868	1					
ANR	3139150	ExpressionStatement	root -> nkeys = 1	485:3:15938:15953	3138868	6	True				
ANR	3139151	AssignmentExpression	root -> nkeys = 1		3138868	0		=			
ANR	3139152	PtrMemberAccess	root -> nkeys		3138868	0					
ANR	3139153	Identifier	root		3138868	0					
ANR	3139154	Identifier	nkeys		3138868	1					
ANR	3139155	PrimaryExpression	1		3138868	1					
ANR	3139156	ExpressionStatement	( root -> pair ) [ 0 ] = pairUp	486:3:15958:15982	3138868	7	True				
ANR	3139157	AssignmentExpression	( root -> pair ) [ 0 ] = pairUp		3138868	0		=			
ANR	3139158	ArrayIndexing	( root -> pair ) [ 0 ]		3138868	0					
ANR	3139159	PtrMemberAccess	root -> pair		3138868	0					
ANR	3139160	Identifier	root		3138868	0					
ANR	3139161	Identifier	pair		3138868	1					
ANR	3139162	PrimaryExpression	0		3138868	1					
ANR	3139163	Identifier	pairUp		3138868	1					
ANR	3139164	ExpressionStatement	( root -> child ) [ 0 ] = pNode	487:3:15987:16011	3138868	8	True				
ANR	3139165	AssignmentExpression	( root -> child ) [ 0 ] = pNode		3138868	0		=			
ANR	3139166	ArrayIndexing	( root -> child ) [ 0 ]		3138868	0					
ANR	3139167	PtrMemberAccess	root -> child		3138868	0					
ANR	3139168	Identifier	root		3138868	0					
ANR	3139169	Identifier	child		3138868	1					
ANR	3139170	PrimaryExpression	0		3138868	1					
ANR	3139171	Identifier	pNode		3138868	1					
ANR	3139172	ExpressionStatement	( root -> child ) [ 1 ] = pSibling	488:3:16016:16043	3138868	9	True				
ANR	3139173	AssignmentExpression	( root -> child ) [ 1 ] = pSibling		3138868	0		=			
ANR	3139174	ArrayIndexing	( root -> child ) [ 1 ]		3138868	0					
ANR	3139175	PtrMemberAccess	root -> child		3138868	0					
ANR	3139176	Identifier	root		3138868	0					
ANR	3139177	Identifier	child		3138868	1					
ANR	3139178	PrimaryExpression	1		3138868	1					
ANR	3139179	Identifier	pSibling		3138868	1					
ANR	3139180	ExpressionStatement	pNode -> p = root	489:3:16048:16063	3138868	10	True				
ANR	3139181	AssignmentExpression	pNode -> p = root		3138868	0		=			
ANR	3139182	PtrMemberAccess	pNode -> p		3138868	0					
ANR	3139183	Identifier	pNode		3138868	0					
ANR	3139184	Identifier	p		3138868	1					
ANR	3139185	Identifier	root		3138868	1					
ANR	3139186	ExpressionStatement	pSibling -> p = root	490:3:16068:16086	3138868	11	True				
ANR	3139187	AssignmentExpression	pSibling -> p = root		3138868	0		=			
ANR	3139188	PtrMemberAccess	pSibling -> p		3138868	0					
ANR	3139189	Identifier	pSibling		3138868	0					
ANR	3139190	Identifier	p		3138868	1					
ANR	3139191	Identifier	root		3138868	1					
ANR	3139192	ReturnStatement	return ;	491:3:16091:16097	3138868	12	True				
ANR	3139193	ExpressionStatement		492:3:16102:16102	3138868	2	True				
ANR	3139194	ExpressionStatement	pParent = pNode -> p	503:2:16537:16555	3138868	3	True				
ANR	3139195	AssignmentExpression	pParent = pNode -> p		3138868	0		=			
ANR	3139196	Identifier	pParent		3138868	0					
ANR	3139197	PtrMemberAccess	pNode -> p		3138868	1					
ANR	3139198	Identifier	pNode		3138868	0					
ANR	3139199	Identifier	p		3138868	1					
ANR	3139200	ExpressionStatement	i = pParent -> nkeys	504:2:16559:16577	3138868	4	True				
ANR	3139201	AssignmentExpression	i = pParent -> nkeys		3138868	0		=			
ANR	3139202	Identifier	i		3138868	0					
ANR	3139203	PtrMemberAccess	pParent -> nkeys		3138868	1					
ANR	3139204	Identifier	pParent		3138868	0					
ANR	3139205	Identifier	nkeys		3138868	1					
ANR	3139206	WhileStatement	while ( i >= 0 && ( pParent -> child ) [ i ] != pNode )		3138868	5					
ANR	3139207	Condition	i >= 0 && ( pParent -> child ) [ i ] != pNode	505:9:16588:16623	3138868	0	True				
ANR	3139208	AndExpression	i >= 0 && ( pParent -> child ) [ i ] != pNode		3138868	0		&&			
ANR	3139209	RelationalExpression	i >= 0		3138868	0		>=			
ANR	3139210	Identifier	i		3138868	0					
ANR	3139211	PrimaryExpression	0		3138868	1					
ANR	3139212	EqualityExpression	( pParent -> child ) [ i ] != pNode		3138868	1		!=			
ANR	3139213	ArrayIndexing	( pParent -> child ) [ i ]		3138868	0					
ANR	3139214	PtrMemberAccess	pParent -> child		3138868	0					
ANR	3139215	Identifier	pParent		3138868	0					
ANR	3139216	Identifier	child		3138868	1					
ANR	3139217	Identifier	i		3138868	1					
ANR	3139218	Identifier	pNode		3138868	1					
ANR	3139219	CompoundStatement		95:48:2871:2871	3138868	1					
ANR	3139220	ExpressionStatement	( pParent -> child ) [ i + 1 ] = ( pParent -> child ) [ i ]	506:3:16632:16675	3138868	0	True				
ANR	3139221	AssignmentExpression	( pParent -> child ) [ i + 1 ] = ( pParent -> child ) [ i ]		3138868	0		=			
ANR	3139222	ArrayIndexing	( pParent -> child ) [ i + 1 ]		3138868	0					
ANR	3139223	PtrMemberAccess	pParent -> child		3138868	0					
ANR	3139224	Identifier	pParent		3138868	0					
ANR	3139225	Identifier	child		3138868	1					
ANR	3139226	AdditiveExpression	i + 1		3138868	1		+			
ANR	3139227	Identifier	i		3138868	0					
ANR	3139228	PrimaryExpression	1		3138868	1					
ANR	3139229	ArrayIndexing	( pParent -> child ) [ i ]		3138868	1					
ANR	3139230	PtrMemberAccess	pParent -> child		3138868	0					
ANR	3139231	Identifier	pParent		3138868	0					
ANR	3139232	Identifier	child		3138868	1					
ANR	3139233	Identifier	i		3138868	1					
ANR	3139234	ExpressionStatement	( pParent -> pair ) [ i ] = ( pParent -> pair ) [ i - 1 ]	507:3:16680:16721	3138868	1	True				
ANR	3139235	AssignmentExpression	( pParent -> pair ) [ i ] = ( pParent -> pair ) [ i - 1 ]		3138868	0		=			
ANR	3139236	ArrayIndexing	( pParent -> pair ) [ i ]		3138868	0					
ANR	3139237	PtrMemberAccess	pParent -> pair		3138868	0					
ANR	3139238	Identifier	pParent		3138868	0					
ANR	3139239	Identifier	pair		3138868	1					
ANR	3139240	Identifier	i		3138868	1					
ANR	3139241	ArrayIndexing	( pParent -> pair ) [ i - 1 ]		3138868	1					
ANR	3139242	PtrMemberAccess	pParent -> pair		3138868	0					
ANR	3139243	Identifier	pParent		3138868	0					
ANR	3139244	Identifier	pair		3138868	1					
ANR	3139245	AdditiveExpression	i - 1		3138868	1		-			
ANR	3139246	Identifier	i		3138868	0					
ANR	3139247	PrimaryExpression	1		3138868	1					
ANR	3139248	ExpressionStatement	i --	508:3:16726:16729	3138868	2	True				
ANR	3139249	PostIncDecOperationExpression	i --		3138868	0					
ANR	3139250	Identifier	i		3138868	0					
ANR	3139251	IncDec	--		3138868	1					
ANR	3139252	ExpressionStatement		509:3:16734:16734	3138868	6	True				
ANR	3139253	IfStatement	if ( i == - 1 )		3138868	7					
ANR	3139254	Condition	i == - 1	510:6:16742:16748	3138868	0	True				
ANR	3139255	EqualityExpression	i == - 1		3138868	0		==			
ANR	3139256	Identifier	i		3138868	0					
ANR	3139257	UnaryOperationExpression	- 1		3138868	1					
ANR	3139258	UnaryOperator	-		3138868	0					
ANR	3139259	PrimaryExpression	1		3138868	1					
ANR	3139260	ExpressionStatement	"printf ( ""cannot happen\\n"" )"	510:16:16752:16777	3138868	1	True				
ANR	3139261	CallExpression	"printf ( ""cannot happen\\n"" )"		3138868	0					
ANR	3139262	Callee	printf		3138868	0					
ANR	3139263	Identifier	printf		3138868	0					
ANR	3139264	ArgumentList	"""cannot happen\\n"""		3138868	1					
ANR	3139265	Argument	"""cannot happen\\n"""		3138868	0					
ANR	3139266	PrimaryExpression	"""cannot happen\\n"""		3138868	0					
ANR	3139267	ExpressionStatement	( pParent -> child ) [ i + 1 ] = pSibling	511:2:16781:16813	3138868	8	True				
ANR	3139268	AssignmentExpression	( pParent -> child ) [ i + 1 ] = pSibling		3138868	0		=			
ANR	3139269	ArrayIndexing	( pParent -> child ) [ i + 1 ]		3138868	0					
ANR	3139270	PtrMemberAccess	pParent -> child		3138868	0					
ANR	3139271	Identifier	pParent		3138868	0					
ANR	3139272	Identifier	child		3138868	1					
ANR	3139273	AdditiveExpression	i + 1		3138868	1		+			
ANR	3139274	Identifier	i		3138868	0					
ANR	3139275	PrimaryExpression	1		3138868	1					
ANR	3139276	Identifier	pSibling		3138868	1					
ANR	3139277	ExpressionStatement	( pParent -> pair ) [ i ] = pairUp	512:2:16817:16844	3138868	9	True				
ANR	3139278	AssignmentExpression	( pParent -> pair ) [ i ] = pairUp		3138868	0		=			
ANR	3139279	ArrayIndexing	( pParent -> pair ) [ i ]		3138868	0					
ANR	3139280	PtrMemberAccess	pParent -> pair		3138868	0					
ANR	3139281	Identifier	pParent		3138868	0					
ANR	3139282	Identifier	pair		3138868	1					
ANR	3139283	Identifier	i		3138868	1					
ANR	3139284	Identifier	pairUp		3138868	1					
ANR	3139285	ExpressionStatement	( pParent -> nkeys ) ++	513:2:16848:16867	3138868	10	True				
ANR	3139286	PostIncDecOperationExpression	( pParent -> nkeys ) ++		3138868	0					
ANR	3139287	PtrMemberAccess	pParent -> nkeys		3138868	0					
ANR	3139288	Identifier	pParent		3138868	0					
ANR	3139289	Identifier	nkeys		3138868	1					
ANR	3139290	IncDec	++		3138868	1					
ANR	3139291	ExpressionStatement	pNode = pNode -> p	516:2:16883:16899	3138868	11	True				
ANR	3139292	AssignmentExpression	pNode = pNode -> p		3138868	0		=			
ANR	3139293	Identifier	pNode		3138868	0					
ANR	3139294	PtrMemberAccess	pNode -> p		3138868	1					
ANR	3139295	Identifier	pNode		3138868	0					
ANR	3139296	Identifier	p		3138868	1					
ANR	3139297	ExpressionStatement		517:2:16903:16903	3138868	20	True				
ANR	3139298	ReturnType	void		3138868	1					
ANR	3139299	Identifier	BTree :: insert		3138868	2					
ANR	3139300	ParameterList	"unsigned long key , unsigned long val"		3138868	3					
ANR	3139301	Parameter	unsigned long key	410:19:13717:13733	3138868	0	True				
ANR	3139302	ParameterType	unsigned long		3138868	0					
ANR	3139303	Identifier	key		3138868	1					
ANR	3139304	Parameter	unsigned long val	410:38:13736:13752	3138868	1	True				
ANR	3139305	ParameterType	unsigned long		3138868	0					
ANR	3139306	Identifier	val		3138868	1					
ANR	3139307	CFGEntryNode	ENTRY		3138868		True				
ANR	3139308	CFGExitNode	EXIT		3138868		True				
ANR	3139309	CFGExceptionNode	EXCEPTION		3138868		True				
ANR	3139310	CFGExceptionNode	EXCEPTION		3138868		True				
ANR	3139311	CFGExceptionNode	EXCEPTION		3138868		True				
ANR	3139312	Symbol	root -> p		3138868						
ANR	3139313	Symbol	pLeaf -> nkeys		3138868						
ANR	3139314	Symbol	pNode -> nkeys		3138868						
ANR	3139315	Symbol	* * pLeaf		3138868						
ANR	3139316	Symbol	pLeaf -> child		3138868						
ANR	3139317	Symbol	& pSibling		3138868						
ANR	3139318	Symbol	* pLeaf -> nkeys		3138868						
ANR	3139319	Symbol	* * root		3138868						
ANR	3139320	Symbol	( pLeaf -> pair ) [ i ] . key		3138868						
ANR	3139321	Symbol	* * pParent		3138868						
ANR	3139322	Symbol	& pairUp		3138868						
ANR	3139323	Symbol	root		3138868						
ANR	3139324	Symbol	* pLeaf		3138868						
ANR	3139325	Symbol	* root -> child		3138868						
ANR	3139326	Symbol	pParent -> child		3138868						
ANR	3139327	Symbol	* pParent -> pair		3138868						
ANR	3139328	Symbol	pNode		3138868						
ANR	3139329	Symbol	key		3138868						
ANR	3139330	Symbol	pSibling		3138868						
ANR	3139331	Symbol	root -> child		3138868						
ANR	3139332	Symbol	val		3138868						
ANR	3139333	Symbol	pLeaf		3138868						
ANR	3139334	Symbol	root -> nkeys		3138868						
ANR	3139335	Symbol	( pLeaf -> pair ) [ i + 1 ] . val		3138868						
ANR	3139336	Symbol	NULL		3138868						
ANR	3139337	Symbol	* root -> pair		3138868						
ANR	3139338	Symbol	( pLeaf -> pair ) [ i + 1 ] . key		3138868						
ANR	3139339	Symbol	i		3138868						
ANR	3139340	Symbol	root -> pair		3138868						
ANR	3139341	Symbol	* pNode		3138868						
ANR	3139342	Symbol	* pParent		3138868						
ANR	3139343	Symbol	* pSibling		3138868						
ANR	3139344	Symbol	( root -> pair ) [ 0 ] . key		3138868						
ANR	3139345	Symbol	pNode -> p		3138868						
ANR	3139346	Symbol	pairUp		3138868						
ANR	3139347	Symbol	( root -> pair ) [ 0 ] . val		3138868						
ANR	3139348	Symbol	pParent		3138868						
ANR	3139349	Symbol	* i		3138868						
ANR	3139350	Symbol	pLeaf -> pair		3138868						
ANR	3139351	Symbol	t		3138868						
ANR	3139352	Symbol	pSibling -> p		3138868						
ANR	3139353	Symbol	pParent -> pair		3138868						
ANR	3139354	Symbol	* pLeaf -> child		3138868						
ANR	3139355	Symbol	* root		3138868						
ANR	3139356	Symbol	* pLeaf -> pair		3138868						
ANR	3139357	Symbol	* pParent -> child		3138868						
ANR	3139358	Symbol	pParent -> nkeys		3138868						
ANR	3139359	Function	BTree :: keyTransferRight	568:0:18388:19627							
ANR	3139360	FunctionDef	"BTree :: keyTransferRight (Btree_Node * pLeft , Btree_Node * pRight)"		3139359	0					
ANR	3139361	CompoundStatement		569:0:18456:19627	3139359	0					
ANR	3139362	IfStatement	if ( NULL == pLeft )		3139359	0					
ANR	3139363	Condition	NULL == pLeft	570:4:18462:18472	3139359	0	True				
ANR	3139364	EqualityExpression	NULL == pLeft		3139359	0		==			
ANR	3139365	Identifier	NULL		3139359	0					
ANR	3139366	Identifier	pLeft		3139359	1					
ANR	3139367	ThrowStatement	"throw ""BTree::keyTransferRight, pLeft is NULL"" ;"	570:17:18475:18521	3139359	1	True				
ANR	3139368	PrimaryExpression	"""BTree::keyTransferRight, pLeft is NULL"""		3139359	0					
ANR	3139369	IfStatement	if ( NULL == pRight )		3139359	1					
ANR	3139370	Condition	NULL == pRight	571:4:18527:18538	3139359	0	True				
ANR	3139371	EqualityExpression	NULL == pRight		3139359	0		==			
ANR	3139372	Identifier	NULL		3139359	0					
ANR	3139373	Identifier	pRight		3139359	1					
ANR	3139374	ThrowStatement	"throw ""BTree::keyTransferRight, pRight is NULL"" ;"	571:18:18541:18588	3139359	1	True				
ANR	3139375	PrimaryExpression	"""BTree::keyTransferRight, pRight is NULL"""		3139359	0					
ANR	3139376	IfStatement	if ( pLeft -> nkeys <= t - 1 )		3139359	2					
ANR	3139377	Condition	pLeft -> nkeys <= t - 1	572:5:18595:18613	3139359	0	True				
ANR	3139378	RelationalExpression	pLeft -> nkeys <= t - 1		3139359	0		<=			
ANR	3139379	PtrMemberAccess	pLeft -> nkeys		3139359	0					
ANR	3139380	Identifier	pLeft		3139359	0					
ANR	3139381	Identifier	nkeys		3139359	1					
ANR	3139382	AdditiveExpression	t - 1		3139359	1		-			
ANR	3139383	Identifier	t		3139359	0					
ANR	3139384	PrimaryExpression	1		3139359	1					
ANR	3139385	ThrowStatement	"throw ""BTree::keyTransferRight, not enough keys"" ;"	572:27:18617:18665	3139359	1	True				
ANR	3139386	PrimaryExpression	"""BTree::keyTransferRight, not enough keys"""		3139359	0					
ANR	3139387	IfStatement	if ( pRight -> nkeys >= 2 * t - 1 )		3139359	3					
ANR	3139388	Condition	pRight -> nkeys >= 2 * t - 1	573:5:18700:18721	3139359	0	True				
ANR	3139389	RelationalExpression	pRight -> nkeys >= 2 * t - 1		3139359	0		>=			
ANR	3139390	PtrMemberAccess	pRight -> nkeys		3139359	0					
ANR	3139391	Identifier	pRight		3139359	0					
ANR	3139392	Identifier	nkeys		3139359	1					
ANR	3139393	AdditiveExpression	2 * t - 1		3139359	1		-			
ANR	3139394	MultiplicativeExpression	2 * t		3139359	0		*			
ANR	3139395	PrimaryExpression	2		3139359	0					
ANR	3139396	Identifier	t		3139359	1					
ANR	3139397	PrimaryExpression	1		3139359	1					
ANR	3139398	ThrowStatement	"throw ""BTree::keyTransferRight, too many keys"" ;"	573:30:18725:18771	3139359	1	True				
ANR	3139399	PrimaryExpression	"""BTree::keyTransferRight, too many keys"""		3139359	0					
ANR	3139400	IdentifierDeclStatement	"int i , j ;"	575:1:18818:18825	3139359	4	True				
ANR	3139401	IdentifierDecl	i		3139359	0					
ANR	3139402	IdentifierDeclType	int		3139359	0					
ANR	3139403	Identifier	i		3139359	1					
ANR	3139404	IdentifierDecl	j		3139359	1					
ANR	3139405	IdentifierDeclType	int		3139359	0					
ANR	3139406	Identifier	j		3139359	1					
ANR	3139407	IdentifierDeclStatement	Btree_Node * pParent ;	576:1:18828:18847	3139359	5	True				
ANR	3139408	IdentifierDecl	* pParent		3139359	0					
ANR	3139409	IdentifierDeclType	Btree_Node *		3139359	0					
ANR	3139410	Identifier	pParent		3139359	1					
ANR	3139411	ExpressionStatement	pParent = pLeft -> p	579:1:18948:18966	3139359	6	True				
ANR	3139412	AssignmentExpression	pParent = pLeft -> p		3139359	0		=			
ANR	3139413	Identifier	pParent		3139359	0					
ANR	3139414	PtrMemberAccess	pLeft -> p		3139359	1					
ANR	3139415	Identifier	pLeft		3139359	0					
ANR	3139416	Identifier	p		3139359	1					
ANR	3139417	ForStatement	for ( i = 0 ; i < pParent -> nkeys ; i ++ )		3139359	7					
ANR	3139418	ForInit	i = 0 ;	580:5:18973:18976	3139359	0	True				
ANR	3139419	AssignmentExpression	i = 0		3139359	0		=			
ANR	3139420	Identifier	i		3139359	0					
ANR	3139421	PrimaryExpression	0		3139359	1					
ANR	3139422	Condition	i < pParent -> nkeys	580:10:18978:18993	3139359	1	True				
ANR	3139423	RelationalExpression	i < pParent -> nkeys		3139359	0		<			
ANR	3139424	Identifier	i		3139359	0					
ANR	3139425	PtrMemberAccess	pParent -> nkeys		3139359	1					
ANR	3139426	Identifier	pParent		3139359	0					
ANR	3139427	Identifier	nkeys		3139359	1					
ANR	3139428	PostIncDecOperationExpression	i ++	580:28:18996:18998	3139359	2	True				
ANR	3139429	Identifier	i		3139359	0					
ANR	3139430	IncDec	++		3139359	1					
ANR	3139431	CompoundStatement		12:34:545:545	3139359	3					
ANR	3139432	IfStatement	if ( ( pParent -> child ) [ i ] == pLeft )		3139359	0					
ANR	3139433	Condition	( pParent -> child ) [ i ] == pLeft	581:6:19010:19037	3139359	0	True				
ANR	3139434	EqualityExpression	( pParent -> child ) [ i ] == pLeft		3139359	0		==			
ANR	3139435	ArrayIndexing	( pParent -> child ) [ i ]		3139359	0					
ANR	3139436	PtrMemberAccess	pParent -> child		3139359	0					
ANR	3139437	Identifier	pParent		3139359	0					
ANR	3139438	Identifier	child		3139359	1					
ANR	3139439	Identifier	i		3139359	1					
ANR	3139440	Identifier	pLeft		3139359	1					
ANR	3139441	BreakStatement	break ;	581:37:19041:19046	3139359	1	True				
ANR	3139442	ExpressionStatement		582:2:19050:19050	3139359	8	True				
ANR	3139443	IfStatement	if ( i == pParent -> nkeys )		3139359	9					
ANR	3139444	Condition	i == pParent -> nkeys	583:5:19057:19073	3139359	0	True				
ANR	3139445	EqualityExpression	i == pParent -> nkeys		3139359	0		==			
ANR	3139446	Identifier	i		3139359	0					
ANR	3139447	PtrMemberAccess	pParent -> nkeys		3139359	1					
ANR	3139448	Identifier	pParent		3139359	0					
ANR	3139449	Identifier	nkeys		3139359	1					
ANR	3139450	ExpressionStatement	"printf ( ""not possible"" )"	583:25:19077:19099	3139359	1	True				
ANR	3139451	CallExpression	"printf ( ""not possible"" )"		3139359	0					
ANR	3139452	Callee	printf		3139359	0					
ANR	3139453	Identifier	printf		3139359	0					
ANR	3139454	ArgumentList	"""not possible"""		3139359	1					
ANR	3139455	Argument	"""not possible"""		3139359	0					
ANR	3139456	PrimaryExpression	"""not possible"""		3139359	0					
ANR	3139457	ExpressionStatement	j = pRight -> nkeys	586:1:19184:19201	3139359	10	True				
ANR	3139458	AssignmentExpression	j = pRight -> nkeys		3139359	0		=			
ANR	3139459	Identifier	j		3139359	0					
ANR	3139460	PtrMemberAccess	pRight -> nkeys		3139359	1					
ANR	3139461	Identifier	pRight		3139359	0					
ANR	3139462	Identifier	nkeys		3139359	1					
ANR	3139463	ExpressionStatement	( pRight -> child ) [ j + 1 ] = ( pRight -> child ) [ j ]	587:1:19204:19245	3139359	11	True				
ANR	3139464	AssignmentExpression	( pRight -> child ) [ j + 1 ] = ( pRight -> child ) [ j ]		3139359	0		=			
ANR	3139465	ArrayIndexing	( pRight -> child ) [ j + 1 ]		3139359	0					
ANR	3139466	PtrMemberAccess	pRight -> child		3139359	0					
ANR	3139467	Identifier	pRight		3139359	0					
ANR	3139468	Identifier	child		3139359	1					
ANR	3139469	AdditiveExpression	j + 1		3139359	1		+			
ANR	3139470	Identifier	j		3139359	0					
ANR	3139471	PrimaryExpression	1		3139359	1					
ANR	3139472	ArrayIndexing	( pRight -> child ) [ j ]		3139359	1					
ANR	3139473	PtrMemberAccess	pRight -> child		3139359	0					
ANR	3139474	Identifier	pRight		3139359	0					
ANR	3139475	Identifier	child		3139359	1					
ANR	3139476	Identifier	j		3139359	1					
ANR	3139477	ForStatement	for ( j -- ; j >= 0 ; j -- )		3139359	12					
ANR	3139478	ForInit	j -- ;	588:5:19252:19255	3139359	0	True				
ANR	3139479	PostIncDecOperationExpression	j --		3139359	0					
ANR	3139480	Identifier	j		3139359	0					
ANR	3139481	IncDec	--		3139359	1					
ANR	3139482	Condition	j >= 0	588:9:19256:19259	3139359	1	True				
ANR	3139483	RelationalExpression	j >= 0		3139359	0		>=			
ANR	3139484	Identifier	j		3139359	0					
ANR	3139485	PrimaryExpression	0		3139359	1					
ANR	3139486	PostIncDecOperationExpression	j --	588:14:19261:19263	3139359	2	True				
ANR	3139487	Identifier	j		3139359	0					
ANR	3139488	IncDec	--		3139359	1					
ANR	3139489	CompoundStatement		20:19:809:809	3139359	3					
ANR	3139490	ExpressionStatement	( pRight -> pair ) [ j + 1 ] = ( pRight -> pair ) [ j ]	589:2:19270:19309	3139359	0	True				
ANR	3139491	AssignmentExpression	( pRight -> pair ) [ j + 1 ] = ( pRight -> pair ) [ j ]		3139359	0		=			
ANR	3139492	ArrayIndexing	( pRight -> pair ) [ j + 1 ]		3139359	0					
ANR	3139493	PtrMemberAccess	pRight -> pair		3139359	0					
ANR	3139494	Identifier	pRight		3139359	0					
ANR	3139495	Identifier	pair		3139359	1					
ANR	3139496	AdditiveExpression	j + 1		3139359	1		+			
ANR	3139497	Identifier	j		3139359	0					
ANR	3139498	PrimaryExpression	1		3139359	1					
ANR	3139499	ArrayIndexing	( pRight -> pair ) [ j ]		3139359	1					
ANR	3139500	PtrMemberAccess	pRight -> pair		3139359	0					
ANR	3139501	Identifier	pRight		3139359	0					
ANR	3139502	Identifier	pair		3139359	1					
ANR	3139503	Identifier	j		3139359	1					
ANR	3139504	ExpressionStatement	( pRight -> child ) [ j + 1 ] = ( pRight -> child ) [ j ]	590:2:19313:19354	3139359	1	True				
ANR	3139505	AssignmentExpression	( pRight -> child ) [ j + 1 ] = ( pRight -> child ) [ j ]		3139359	0		=			
ANR	3139506	ArrayIndexing	( pRight -> child ) [ j + 1 ]		3139359	0					
ANR	3139507	PtrMemberAccess	pRight -> child		3139359	0					
ANR	3139508	Identifier	pRight		3139359	0					
ANR	3139509	Identifier	child		3139359	1					
ANR	3139510	AdditiveExpression	j + 1		3139359	1		+			
ANR	3139511	Identifier	j		3139359	0					
ANR	3139512	PrimaryExpression	1		3139359	1					
ANR	3139513	ArrayIndexing	( pRight -> child ) [ j ]		3139359	1					
ANR	3139514	PtrMemberAccess	pRight -> child		3139359	0					
ANR	3139515	Identifier	pRight		3139359	0					
ANR	3139516	Identifier	child		3139359	1					
ANR	3139517	Identifier	j		3139359	1					
ANR	3139518	ExpressionStatement		591:2:19358:19358	3139359	13	True				
ANR	3139519	ExpressionStatement	( pRight -> pair ) [ 0 ] = ( pParent -> pair ) [ i ]	594:1:19385:19423	3139359	14	True				
ANR	3139520	AssignmentExpression	( pRight -> pair ) [ 0 ] = ( pParent -> pair ) [ i ]		3139359	0		=			
ANR	3139521	ArrayIndexing	( pRight -> pair ) [ 0 ]		3139359	0					
ANR	3139522	PtrMemberAccess	pRight -> pair		3139359	0					
ANR	3139523	Identifier	pRight		3139359	0					
ANR	3139524	Identifier	pair		3139359	1					
ANR	3139525	PrimaryExpression	0		3139359	1					
ANR	3139526	ArrayIndexing	( pParent -> pair ) [ i ]		3139359	1					
ANR	3139527	PtrMemberAccess	pParent -> pair		3139359	0					
ANR	3139528	Identifier	pParent		3139359	0					
ANR	3139529	Identifier	pair		3139359	1					
ANR	3139530	Identifier	i		3139359	1					
ANR	3139531	ExpressionStatement	( pRight -> child ) [ 0 ] = ( pLeft -> child ) [ pLeft -> nkeys ]	595:1:19426:19475	3139359	15	True				
ANR	3139532	AssignmentExpression	( pRight -> child ) [ 0 ] = ( pLeft -> child ) [ pLeft -> nkeys ]		3139359	0		=			
ANR	3139533	ArrayIndexing	( pRight -> child ) [ 0 ]		3139359	0					
ANR	3139534	PtrMemberAccess	pRight -> child		3139359	0					
ANR	3139535	Identifier	pRight		3139359	0					
ANR	3139536	Identifier	child		3139359	1					
ANR	3139537	PrimaryExpression	0		3139359	1					
ANR	3139538	ArrayIndexing	( pLeft -> child ) [ pLeft -> nkeys ]		3139359	1					
ANR	3139539	PtrMemberAccess	pLeft -> child		3139359	0					
ANR	3139540	Identifier	pLeft		3139359	0					
ANR	3139541	Identifier	child		3139359	1					
ANR	3139542	PtrMemberAccess	pLeft -> nkeys		3139359	1					
ANR	3139543	Identifier	pLeft		3139359	0					
ANR	3139544	Identifier	nkeys		3139359	1					
ANR	3139545	ExpressionStatement	( pRight -> nkeys ) ++	596:1:19478:19495	3139359	16	True				
ANR	3139546	PostIncDecOperationExpression	( pRight -> nkeys ) ++		3139359	0					
ANR	3139547	PtrMemberAccess	pRight -> nkeys		3139359	0					
ANR	3139548	Identifier	pRight		3139359	0					
ANR	3139549	Identifier	nkeys		3139359	1					
ANR	3139550	IncDec	++		3139359	1					
ANR	3139551	ExpressionStatement	( pParent -> pair ) [ i ] = ( pLeft -> pair ) [ pLeft -> nkeys - 1 ]	599:1:19523:19573	3139359	17	True				
ANR	3139552	AssignmentExpression	( pParent -> pair ) [ i ] = ( pLeft -> pair ) [ pLeft -> nkeys - 1 ]		3139359	0		=			
ANR	3139553	ArrayIndexing	( pParent -> pair ) [ i ]		3139359	0					
ANR	3139554	PtrMemberAccess	pParent -> pair		3139359	0					
ANR	3139555	Identifier	pParent		3139359	0					
ANR	3139556	Identifier	pair		3139359	1					
ANR	3139557	Identifier	i		3139359	1					
ANR	3139558	ArrayIndexing	( pLeft -> pair ) [ pLeft -> nkeys - 1 ]		3139359	1					
ANR	3139559	PtrMemberAccess	pLeft -> pair		3139359	0					
ANR	3139560	Identifier	pLeft		3139359	0					
ANR	3139561	Identifier	pair		3139359	1					
ANR	3139562	AdditiveExpression	pLeft -> nkeys - 1		3139359	1		-			
ANR	3139563	PtrMemberAccess	pLeft -> nkeys		3139359	0					
ANR	3139564	Identifier	pLeft		3139359	0					
ANR	3139565	Identifier	nkeys		3139359	1					
ANR	3139566	PrimaryExpression	1		3139359	1					
ANR	3139567	ExpressionStatement	( pLeft -> nkeys ) --	602:1:19609:19625	3139359	18	True				
ANR	3139568	PostIncDecOperationExpression	( pLeft -> nkeys ) --		3139359	0					
ANR	3139569	PtrMemberAccess	pLeft -> nkeys		3139359	0					
ANR	3139570	Identifier	pLeft		3139359	0					
ANR	3139571	Identifier	nkeys		3139359	1					
ANR	3139572	IncDec	--		3139359	1					
ANR	3139573	ReturnType	void		3139359	1					
ANR	3139574	Identifier	BTree :: keyTransferRight		3139359	2					
ANR	3139575	ParameterList	"Btree_Node * pLeft , Btree_Node * pRight"		3139359	3					
ANR	3139576	Parameter	Btree_Node * pLeft	568:29:18417:18433	3139359	0	True				
ANR	3139577	ParameterType	Btree_Node *		3139359	0					
ANR	3139578	Identifier	pLeft		3139359	1					
ANR	3139579	Parameter	Btree_Node * pRight	568:48:18436:18453	3139359	1	True				
ANR	3139580	ParameterType	Btree_Node *		3139359	0					
ANR	3139581	Identifier	pRight		3139359	1					
ANR	3139582	CFGEntryNode	ENTRY		3139359		True				
ANR	3139583	CFGExitNode	EXIT		3139359		True				
ANR	3139584	CFGExceptionNode	EXCEPTION		3139359		True				
ANR	3139585	CFGExceptionNode	EXCEPTION		3139359		True				
ANR	3139586	CFGExceptionNode	EXCEPTION		3139359		True				
ANR	3139587	CFGExceptionNode	EXCEPTION		3139359		True				
ANR	3139588	CFGExceptionNode	EXCEPTION		3139359		True				
ANR	3139589	CFGExceptionNode	EXCEPTION		3139359		True				
ANR	3139590	CFGExceptionNode	EXCEPTION		3139359		True				
ANR	3139591	Symbol	* pLeft -> pair		3139359						
ANR	3139592	Symbol	* pLeft		3139359						
ANR	3139593	Symbol	* pRight		3139359						
ANR	3139594	Symbol	pRight -> pair		3139359						
ANR	3139595	Symbol	pLeft -> pair		3139359						
ANR	3139596	Symbol	* * pParent		3139359						
ANR	3139597	Symbol	pRight -> child		3139359						
ANR	3139598	Symbol	* pLeft -> nkeys		3139359						
ANR	3139599	Symbol	pParent -> child		3139359						
ANR	3139600	Symbol	* pParent -> pair		3139359						
ANR	3139601	Symbol	pLeft		3139359						
ANR	3139602	Symbol	pLeft -> child		3139359						
ANR	3139603	Symbol	* * pRight		3139359						
ANR	3139604	Symbol	pRight		3139359						
ANR	3139605	Symbol	NULL		3139359						
ANR	3139606	Symbol	pLeft -> p		3139359						
ANR	3139607	Symbol	* pRight -> child		3139359						
ANR	3139608	Symbol	* * pLeft		3139359						
ANR	3139609	Symbol	* pLeft -> child		3139359						
ANR	3139610	Symbol	i		3139359						
ANR	3139611	Symbol	j		3139359						
ANR	3139612	Symbol	* pParent		3139359						
ANR	3139613	Symbol	pParent		3139359						
ANR	3139614	Symbol	* i		3139359						
ANR	3139615	Symbol	t		3139359						
ANR	3139616	Symbol	* j		3139359						
ANR	3139617	Symbol	pLeft -> nkeys		3139359						
ANR	3139618	Symbol	pRight -> nkeys		3139359						
ANR	3139619	Symbol	pParent -> pair		3139359						
ANR	3139620	Symbol	* pParent -> child		3139359						
ANR	3139621	Symbol	* pRight -> pair		3139359						
ANR	3139622	Symbol	pParent -> nkeys		3139359						
ANR	3139623	Function	BTree :: keyTransferLeft	653:0:21113:22287							
ANR	3139624	FunctionDef	"BTree :: keyTransferLeft (Btree_Node * pLeft , Btree_Node * pRight)"		3139623	0					
ANR	3139625	CompoundStatement		654:0:21180:22287	3139623	0					
ANR	3139626	IfStatement	if ( NULL == pLeft )		3139623	0					
ANR	3139627	Condition	NULL == pLeft	655:4:21186:21196	3139623	0	True				
ANR	3139628	EqualityExpression	NULL == pLeft		3139623	0		==			
ANR	3139629	Identifier	NULL		3139623	0					
ANR	3139630	Identifier	pLeft		3139623	1					
ANR	3139631	ThrowStatement	"throw ""BTree::keyTransferLeft, pLeft is NULL"" ;"	655:17:21199:21244	3139623	1	True				
ANR	3139632	PrimaryExpression	"""BTree::keyTransferLeft, pLeft is NULL"""		3139623	0					
ANR	3139633	IfStatement	if ( NULL == pRight )		3139623	1					
ANR	3139634	Condition	NULL == pRight	656:4:21250:21261	3139623	0	True				
ANR	3139635	EqualityExpression	NULL == pRight		3139623	0		==			
ANR	3139636	Identifier	NULL		3139623	0					
ANR	3139637	Identifier	pRight		3139623	1					
ANR	3139638	ThrowStatement	"throw ""BTree::keyTransferLeft, pRight is NULL"" ;"	656:18:21264:21310	3139623	1	True				
ANR	3139639	PrimaryExpression	"""BTree::keyTransferLeft, pRight is NULL"""		3139623	0					
ANR	3139640	IfStatement	if ( pRight -> nkeys <= t - 1 )		3139623	2					
ANR	3139641	Condition	pRight -> nkeys <= t - 1	657:5:21317:21336	3139623	0	True				
ANR	3139642	RelationalExpression	pRight -> nkeys <= t - 1		3139623	0		<=			
ANR	3139643	PtrMemberAccess	pRight -> nkeys		3139623	0					
ANR	3139644	Identifier	pRight		3139623	0					
ANR	3139645	Identifier	nkeys		3139623	1					
ANR	3139646	AdditiveExpression	t - 1		3139623	1		-			
ANR	3139647	Identifier	t		3139623	0					
ANR	3139648	PrimaryExpression	1		3139623	1					
ANR	3139649	ThrowStatement	"throw ""BTree::keyTransferLeft, not enough keys"" ;"	657:28:21340:21387	3139623	1	True				
ANR	3139650	PrimaryExpression	"""BTree::keyTransferLeft, not enough keys"""		3139623	0					
ANR	3139651	IfStatement	if ( pLeft -> nkeys >= 2 * t - 1 )		3139623	3					
ANR	3139652	Condition	pLeft -> nkeys >= 2 * t - 1	658:5:21423:21443	3139623	0	True				
ANR	3139653	RelationalExpression	pLeft -> nkeys >= 2 * t - 1		3139623	0		>=			
ANR	3139654	PtrMemberAccess	pLeft -> nkeys		3139623	0					
ANR	3139655	Identifier	pLeft		3139623	0					
ANR	3139656	Identifier	nkeys		3139623	1					
ANR	3139657	AdditiveExpression	2 * t - 1		3139623	1		-			
ANR	3139658	MultiplicativeExpression	2 * t		3139623	0		*			
ANR	3139659	PrimaryExpression	2		3139623	0					
ANR	3139660	Identifier	t		3139623	1					
ANR	3139661	PrimaryExpression	1		3139623	1					
ANR	3139662	ThrowStatement	"throw ""BTree::keyTransferLeft, too many keys"" ;"	658:29:21447:21492	3139623	1	True				
ANR	3139663	PrimaryExpression	"""BTree::keyTransferLeft, too many keys"""		3139623	0					
ANR	3139664	IdentifierDeclStatement	"int i , j ;"	660:1:21539:21546	3139623	4	True				
ANR	3139665	IdentifierDecl	i		3139623	0					
ANR	3139666	IdentifierDeclType	int		3139623	0					
ANR	3139667	Identifier	i		3139623	1					
ANR	3139668	IdentifierDecl	j		3139623	1					
ANR	3139669	IdentifierDeclType	int		3139623	0					
ANR	3139670	Identifier	j		3139623	1					
ANR	3139671	IdentifierDeclStatement	Btree_Node * pParent ;	661:1:21549:21568	3139623	5	True				
ANR	3139672	IdentifierDecl	* pParent		3139623	0					
ANR	3139673	IdentifierDeclType	Btree_Node *		3139623	0					
ANR	3139674	Identifier	pParent		3139623	1					
ANR	3139675	ExpressionStatement	pParent = pLeft -> p	664:1:21669:21687	3139623	6	True				
ANR	3139676	AssignmentExpression	pParent = pLeft -> p		3139623	0		=			
ANR	3139677	Identifier	pParent		3139623	0					
ANR	3139678	PtrMemberAccess	pLeft -> p		3139623	1					
ANR	3139679	Identifier	pLeft		3139623	0					
ANR	3139680	Identifier	p		3139623	1					
ANR	3139681	ForStatement	for ( i = 0 ; i < pParent -> nkeys ; i ++ )		3139623	7					
ANR	3139682	ForInit	i = 0 ;	665:5:21694:21697	3139623	0	True				
ANR	3139683	AssignmentExpression	i = 0		3139623	0		=			
ANR	3139684	Identifier	i		3139623	0					
ANR	3139685	PrimaryExpression	0		3139623	1					
ANR	3139686	Condition	i < pParent -> nkeys	665:10:21699:21714	3139623	1	True				
ANR	3139687	RelationalExpression	i < pParent -> nkeys		3139623	0		<			
ANR	3139688	Identifier	i		3139623	0					
ANR	3139689	PtrMemberAccess	pParent -> nkeys		3139623	1					
ANR	3139690	Identifier	pParent		3139623	0					
ANR	3139691	Identifier	nkeys		3139623	1					
ANR	3139692	PostIncDecOperationExpression	i ++	665:28:21717:21719	3139623	2	True				
ANR	3139693	Identifier	i		3139623	0					
ANR	3139694	IncDec	++		3139623	1					
ANR	3139695	CompoundStatement		12:34:542:542	3139623	3					
ANR	3139696	IfStatement	if ( ( pParent -> child ) [ i ] == pLeft )		3139623	0					
ANR	3139697	Condition	( pParent -> child ) [ i ] == pLeft	666:6:21731:21758	3139623	0	True				
ANR	3139698	EqualityExpression	( pParent -> child ) [ i ] == pLeft		3139623	0		==			
ANR	3139699	ArrayIndexing	( pParent -> child ) [ i ]		3139623	0					
ANR	3139700	PtrMemberAccess	pParent -> child		3139623	0					
ANR	3139701	Identifier	pParent		3139623	0					
ANR	3139702	Identifier	child		3139623	1					
ANR	3139703	Identifier	i		3139623	1					
ANR	3139704	Identifier	pLeft		3139623	1					
ANR	3139705	BreakStatement	break ;	666:37:21762:21767	3139623	1	True				
ANR	3139706	ExpressionStatement		667:2:21771:21771	3139623	8	True				
ANR	3139707	IfStatement	if ( i == i < pParent -> nkeys )		3139623	9					
ANR	3139708	Condition	i == i < pParent -> nkeys	668:5:21778:21796	3139623	0	True				
ANR	3139709	EqualityExpression	i == i < pParent -> nkeys		3139623	0		==			
ANR	3139710	Identifier	i		3139623	0					
ANR	3139711	RelationalExpression	i < pParent -> nkeys		3139623	1		<			
ANR	3139712	Identifier	i		3139623	0					
ANR	3139713	PtrMemberAccess	pParent -> nkeys		3139623	1					
ANR	3139714	Identifier	pParent		3139623	0					
ANR	3139715	Identifier	nkeys		3139623	1					
ANR	3139716	ExpressionStatement	"printf ( ""not possible"" )"	668:27:21800:21822	3139623	1	True				
ANR	3139717	CallExpression	"printf ( ""not possible"" )"		3139623	0					
ANR	3139718	Callee	printf		3139623	0					
ANR	3139719	Identifier	printf		3139623	0					
ANR	3139720	ArgumentList	"""not possible"""		3139623	1					
ANR	3139721	Argument	"""not possible"""		3139623	0					
ANR	3139722	PrimaryExpression	"""not possible"""		3139623	0					
ANR	3139723	ExpressionStatement	( pLeft -> pair ) [ pLeft -> nkeys ] = ( pParent -> pair ) [ i ]	671:1:21871:21919	3139623	10	True				
ANR	3139724	AssignmentExpression	( pLeft -> pair ) [ pLeft -> nkeys ] = ( pParent -> pair ) [ i ]		3139623	0		=			
ANR	3139725	ArrayIndexing	( pLeft -> pair ) [ pLeft -> nkeys ]		3139623	0					
ANR	3139726	PtrMemberAccess	pLeft -> pair		3139623	0					
ANR	3139727	Identifier	pLeft		3139623	0					
ANR	3139728	Identifier	pair		3139623	1					
ANR	3139729	PtrMemberAccess	pLeft -> nkeys		3139623	1					
ANR	3139730	Identifier	pLeft		3139623	0					
ANR	3139731	Identifier	nkeys		3139623	1					
ANR	3139732	ArrayIndexing	( pParent -> pair ) [ i ]		3139623	1					
ANR	3139733	PtrMemberAccess	pParent -> pair		3139623	0					
ANR	3139734	Identifier	pParent		3139623	0					
ANR	3139735	Identifier	pair		3139623	1					
ANR	3139736	Identifier	i		3139623	1					
ANR	3139737	ExpressionStatement	( pLeft -> child ) [ pLeft -> nkeys + 1 ] = ( pRight -> child ) [ 0 ]	672:1:21922:21973	3139623	11	True				
ANR	3139738	AssignmentExpression	( pLeft -> child ) [ pLeft -> nkeys + 1 ] = ( pRight -> child ) [ 0 ]		3139623	0		=			
ANR	3139739	ArrayIndexing	( pLeft -> child ) [ pLeft -> nkeys + 1 ]		3139623	0					
ANR	3139740	PtrMemberAccess	pLeft -> child		3139623	0					
ANR	3139741	Identifier	pLeft		3139623	0					
ANR	3139742	Identifier	child		3139623	1					
ANR	3139743	AdditiveExpression	pLeft -> nkeys + 1		3139623	1		+			
ANR	3139744	PtrMemberAccess	pLeft -> nkeys		3139623	0					
ANR	3139745	Identifier	pLeft		3139623	0					
ANR	3139746	Identifier	nkeys		3139623	1					
ANR	3139747	PrimaryExpression	1		3139623	1					
ANR	3139748	ArrayIndexing	( pRight -> child ) [ 0 ]		3139623	1					
ANR	3139749	PtrMemberAccess	pRight -> child		3139623	0					
ANR	3139750	Identifier	pRight		3139623	0					
ANR	3139751	Identifier	child		3139623	1					
ANR	3139752	PrimaryExpression	0		3139623	1					
ANR	3139753	ExpressionStatement	( pLeft -> nkeys ) ++	673:1:21976:21992	3139623	12	True				
ANR	3139754	PostIncDecOperationExpression	( pLeft -> nkeys ) ++		3139623	0					
ANR	3139755	PtrMemberAccess	pLeft -> nkeys		3139623	0					
ANR	3139756	Identifier	pLeft		3139623	0					
ANR	3139757	Identifier	nkeys		3139623	1					
ANR	3139758	IncDec	++		3139623	1					
ANR	3139759	ExpressionStatement	( pParent -> pair ) [ i ] = ( pRight -> pair ) [ 0 ]	676:1:22020:22058	3139623	13	True				
ANR	3139760	AssignmentExpression	( pParent -> pair ) [ i ] = ( pRight -> pair ) [ 0 ]		3139623	0		=			
ANR	3139761	ArrayIndexing	( pParent -> pair ) [ i ]		3139623	0					
ANR	3139762	PtrMemberAccess	pParent -> pair		3139623	0					
ANR	3139763	Identifier	pParent		3139623	0					
ANR	3139764	Identifier	pair		3139623	1					
ANR	3139765	Identifier	i		3139623	1					
ANR	3139766	ArrayIndexing	( pRight -> pair ) [ 0 ]		3139623	1					
ANR	3139767	PtrMemberAccess	pRight -> pair		3139623	0					
ANR	3139768	Identifier	pRight		3139623	0					
ANR	3139769	Identifier	pair		3139623	1					
ANR	3139770	PrimaryExpression	0		3139623	1					
ANR	3139771	ForStatement	for ( j = 0 ; j < pRight -> nkeys ; j ++ )		3139623	14					
ANR	3139772	ForInit	j = 0 ;	679:5:22104:22107	3139623	0	True				
ANR	3139773	AssignmentExpression	j = 0		3139623	0		=			
ANR	3139774	Identifier	j		3139623	0					
ANR	3139775	PrimaryExpression	0		3139623	1					
ANR	3139776	Condition	j < pRight -> nkeys	679:9:22108:22122	3139623	1	True				
ANR	3139777	RelationalExpression	j < pRight -> nkeys		3139623	0		<			
ANR	3139778	Identifier	j		3139623	0					
ANR	3139779	PtrMemberAccess	pRight -> nkeys		3139623	1					
ANR	3139780	Identifier	pRight		3139623	0					
ANR	3139781	Identifier	nkeys		3139623	1					
ANR	3139782	PostIncDecOperationExpression	j ++	679:25:22124:22126	3139623	2	True				
ANR	3139783	Identifier	j		3139623	0					
ANR	3139784	IncDec	++		3139623	1					
ANR	3139785	CompoundStatement		26:30:948:948	3139623	3					
ANR	3139786	ExpressionStatement	( pRight -> pair ) [ j ] = ( pRight -> pair ) [ j + 1 ]	680:2:22133:22172	3139623	0	True				
ANR	3139787	AssignmentExpression	( pRight -> pair ) [ j ] = ( pRight -> pair ) [ j + 1 ]		3139623	0		=			
ANR	3139788	ArrayIndexing	( pRight -> pair ) [ j ]		3139623	0					
ANR	3139789	PtrMemberAccess	pRight -> pair		3139623	0					
ANR	3139790	Identifier	pRight		3139623	0					
ANR	3139791	Identifier	pair		3139623	1					
ANR	3139792	Identifier	j		3139623	1					
ANR	3139793	ArrayIndexing	( pRight -> pair ) [ j + 1 ]		3139623	1					
ANR	3139794	PtrMemberAccess	pRight -> pair		3139623	0					
ANR	3139795	Identifier	pRight		3139623	0					
ANR	3139796	Identifier	pair		3139623	1					
ANR	3139797	AdditiveExpression	j + 1		3139623	1		+			
ANR	3139798	Identifier	j		3139623	0					
ANR	3139799	PrimaryExpression	1		3139623	1					
ANR	3139800	ExpressionStatement	( pRight -> child ) [ j ] = ( pRight -> child ) [ j + 1 ]	681:2:22176:22217	3139623	1	True				
ANR	3139801	AssignmentExpression	( pRight -> child ) [ j ] = ( pRight -> child ) [ j + 1 ]		3139623	0		=			
ANR	3139802	ArrayIndexing	( pRight -> child ) [ j ]		3139623	0					
ANR	3139803	PtrMemberAccess	pRight -> child		3139623	0					
ANR	3139804	Identifier	pRight		3139623	0					
ANR	3139805	Identifier	child		3139623	1					
ANR	3139806	Identifier	j		3139623	1					
ANR	3139807	ArrayIndexing	( pRight -> child ) [ j + 1 ]		3139623	1					
ANR	3139808	PtrMemberAccess	pRight -> child		3139623	0					
ANR	3139809	Identifier	pRight		3139623	0					
ANR	3139810	Identifier	child		3139623	1					
ANR	3139811	AdditiveExpression	j + 1		3139623	1		+			
ANR	3139812	Identifier	j		3139623	0					
ANR	3139813	PrimaryExpression	1		3139623	1					
ANR	3139814	ExpressionStatement		682:2:22221:22221	3139623	15	True				
ANR	3139815	ExpressionStatement	( pRight -> child ) [ j ] = ( pRight -> child ) [ j + 1 ]	683:1:22224:22265	3139623	16	True				
ANR	3139816	AssignmentExpression	( pRight -> child ) [ j ] = ( pRight -> child ) [ j + 1 ]		3139623	0		=			
ANR	3139817	ArrayIndexing	( pRight -> child ) [ j ]		3139623	0					
ANR	3139818	PtrMemberAccess	pRight -> child		3139623	0					
ANR	3139819	Identifier	pRight		3139623	0					
ANR	3139820	Identifier	child		3139623	1					
ANR	3139821	Identifier	j		3139623	1					
ANR	3139822	ArrayIndexing	( pRight -> child ) [ j + 1 ]		3139623	1					
ANR	3139823	PtrMemberAccess	pRight -> child		3139623	0					
ANR	3139824	Identifier	pRight		3139623	0					
ANR	3139825	Identifier	child		3139623	1					
ANR	3139826	AdditiveExpression	j + 1		3139623	1		+			
ANR	3139827	Identifier	j		3139623	0					
ANR	3139828	PrimaryExpression	1		3139623	1					
ANR	3139829	ExpressionStatement	( pRight -> nkeys ) --	684:1:22268:22285	3139623	17	True				
ANR	3139830	PostIncDecOperationExpression	( pRight -> nkeys ) --		3139623	0					
ANR	3139831	PtrMemberAccess	pRight -> nkeys		3139623	0					
ANR	3139832	Identifier	pRight		3139623	0					
ANR	3139833	Identifier	nkeys		3139623	1					
ANR	3139834	IncDec	--		3139623	1					
ANR	3139835	ReturnType	void		3139623	1					
ANR	3139836	Identifier	BTree :: keyTransferLeft		3139623	2					
ANR	3139837	ParameterList	"Btree_Node * pLeft , Btree_Node * pRight"		3139623	3					
ANR	3139838	Parameter	Btree_Node * pLeft	653:28:21141:21157	3139623	0	True				
ANR	3139839	ParameterType	Btree_Node *		3139623	0					
ANR	3139840	Identifier	pLeft		3139623	1					
ANR	3139841	Parameter	Btree_Node * pRight	653:47:21160:21177	3139623	1	True				
ANR	3139842	ParameterType	Btree_Node *		3139623	0					
ANR	3139843	Identifier	pRight		3139623	1					
ANR	3139844	CFGEntryNode	ENTRY		3139623		True				
ANR	3139845	CFGExitNode	EXIT		3139623		True				
ANR	3139846	CFGExceptionNode	EXCEPTION		3139623		True				
ANR	3139847	CFGExceptionNode	EXCEPTION		3139623		True				
ANR	3139848	CFGExceptionNode	EXCEPTION		3139623		True				
ANR	3139849	CFGExceptionNode	EXCEPTION		3139623		True				
ANR	3139850	CFGExceptionNode	EXCEPTION		3139623		True				
ANR	3139851	CFGExceptionNode	EXCEPTION		3139623		True				
ANR	3139852	CFGExceptionNode	EXCEPTION		3139623		True				
ANR	3139853	Symbol	* pLeft -> pair		3139623						
ANR	3139854	Symbol	* pRight		3139623						
ANR	3139855	Symbol	* pLeft		3139623						
ANR	3139856	Symbol	pRight -> pair		3139623						
ANR	3139857	Symbol	pLeft -> pair		3139623						
ANR	3139858	Symbol	* * pParent		3139623						
ANR	3139859	Symbol	* pLeft -> nkeys		3139623						
ANR	3139860	Symbol	pRight -> child		3139623						
ANR	3139861	Symbol	pParent -> child		3139623						
ANR	3139862	Symbol	* pParent -> pair		3139623						
ANR	3139863	Symbol	pLeft		3139623						
ANR	3139864	Symbol	pLeft -> child		3139623						
ANR	3139865	Symbol	* * pRight		3139623						
ANR	3139866	Symbol	pRight		3139623						
ANR	3139867	Symbol	NULL		3139623						
ANR	3139868	Symbol	pLeft -> p		3139623						
ANR	3139869	Symbol	* * pLeft		3139623						
ANR	3139870	Symbol	* pRight -> child		3139623						
ANR	3139871	Symbol	* pLeft -> child		3139623						
ANR	3139872	Symbol	i		3139623						
ANR	3139873	Symbol	j		3139623						
ANR	3139874	Symbol	* pParent		3139623						
ANR	3139875	Symbol	pParent		3139623						
ANR	3139876	Symbol	* i		3139623						
ANR	3139877	Symbol	t		3139623						
ANR	3139878	Symbol	* j		3139623						
ANR	3139879	Symbol	pRight -> nkeys		3139623						
ANR	3139880	Symbol	pLeft -> nkeys		3139623						
ANR	3139881	Symbol	pParent -> pair		3139623						
ANR	3139882	Symbol	* pParent -> child		3139623						
ANR	3139883	Symbol	* pRight -> pair		3139623						
ANR	3139884	Symbol	pParent -> nkeys		3139623						
ANR	3139885	Function	BTree :: searchKey	706:0:22848:24148							
ANR	3139886	FunctionDef	"BTree :: searchKey (unsigned long key , Btree_Node * * ppNode , int * pIndex)"		3139885	0					
ANR	3139887	CompoundStatement		707:0:22929:24148	3139885	0					
ANR	3139888	IfStatement	if ( NULL == ppNode )		3139885	0					
ANR	3139889	Condition	NULL == ppNode	708:4:22935:22946	3139885	0	True				
ANR	3139890	EqualityExpression	NULL == ppNode		3139885	0		==			
ANR	3139891	Identifier	NULL		3139885	0					
ANR	3139892	Identifier	ppNode		3139885	1					
ANR	3139893	ThrowStatement	"throw ""BTree::searchKey, ppNode is NULL"" ;"	708:18:22949:22989	3139885	1	True				
ANR	3139894	PrimaryExpression	"""BTree::searchKey, ppNode is NULL"""		3139885	0					
ANR	3139895	IfStatement	if ( NULL == pIndex )		3139885	1					
ANR	3139896	Condition	NULL == pIndex	709:4:22995:23006	3139885	0	True				
ANR	3139897	EqualityExpression	NULL == pIndex		3139885	0		==			
ANR	3139898	Identifier	NULL		3139885	0					
ANR	3139899	Identifier	pIndex		3139885	1					
ANR	3139900	ThrowStatement	"throw ""BTree::searchKey, pIndex is NULL"" ;"	709:18:23009:23049	3139885	1	True				
ANR	3139901	PrimaryExpression	"""BTree::searchKey, pIndex is NULL"""		3139885	0					
ANR	3139902	IdentifierDeclStatement	Btree_Node * pNode ;	711:1:23053:23070	3139885	2	True				
ANR	3139903	IdentifierDecl	* pNode		3139885	0					
ANR	3139904	IdentifierDeclType	Btree_Node *		3139885	0					
ANR	3139905	Identifier	pNode		3139885	1					
ANR	3139906	IdentifierDeclStatement	int i ;	712:1:23073:23078	3139885	3	True				
ANR	3139907	IdentifierDecl	i		3139885	0					
ANR	3139908	IdentifierDeclType	int		3139885	0					
ANR	3139909	Identifier	i		3139885	1					
ANR	3139910	ExpressionStatement	pNode = root	714:1:23082:23094	3139885	4	True				
ANR	3139911	AssignmentExpression	pNode = root		3139885	0		=			
ANR	3139912	Identifier	pNode		3139885	0					
ANR	3139913	Identifier	root		3139885	1					
ANR	3139914	WhileStatement	while ( pNode )		3139885	5					
ANR	3139915	Condition	pNode	715:8:23104:23108	3139885	0	True				
ANR	3139916	Identifier	pNode		3139885	0					
ANR	3139917	CompoundStatement		9:16:182:182	3139885	1					
ANR	3139918	ForStatement	for ( i = 0 ; i < pNode -> nkeys ; i ++ )		3139885	0					
ANR	3139919	ForInit	i = 0 ;	718:6:23185:23188	3139885	0	True				
ANR	3139920	AssignmentExpression	i = 0		3139885	0		=			
ANR	3139921	Identifier	i		3139885	0					
ANR	3139922	PrimaryExpression	0		3139885	1					
ANR	3139923	Condition	i < pNode -> nkeys	718:11:23190:23203	3139885	1	True				
ANR	3139924	RelationalExpression	i < pNode -> nkeys		3139885	0		<			
ANR	3139925	Identifier	i		3139885	0					
ANR	3139926	PtrMemberAccess	pNode -> nkeys		3139885	1					
ANR	3139927	Identifier	pNode		3139885	0					
ANR	3139928	Identifier	nkeys		3139885	1					
ANR	3139929	PostIncDecOperationExpression	i ++	718:27:23206:23208	3139885	2	True				
ANR	3139930	Identifier	i		3139885	0					
ANR	3139931	IncDec	++		3139885	1					
ANR	3139932	CompoundStatement		12:32:281:281	3139885	3					
ANR	3139933	IfStatement	if ( ( pNode -> pair ) [ i ] . key == key )		3139885	0					
ANR	3139934	Condition	( pNode -> pair ) [ i ] . key == key	719:7:23220:23246	3139885	0	True				
ANR	3139935	EqualityExpression	( pNode -> pair ) [ i ] . key == key		3139885	0		==			
ANR	3139936	MemberAccess	( pNode -> pair ) [ i ] . key		3139885	0					
ANR	3139937	ArrayIndexing	( pNode -> pair ) [ i ]		3139885	0					
ANR	3139938	PtrMemberAccess	pNode -> pair		3139885	0					
ANR	3139939	Identifier	pNode		3139885	0					
ANR	3139940	Identifier	pair		3139885	1					
ANR	3139941	Identifier	i		3139885	1					
ANR	3139942	Identifier	key		3139885	1					
ANR	3139943	Identifier	key		3139885	1					
ANR	3139944	CompoundStatement		13:37:320:320	3139885	1					
ANR	3139945	ExpressionStatement	* ppNode = pNode	720:4:23256:23271	3139885	0	True				
ANR	3139946	AssignmentExpression	* ppNode = pNode		3139885	0		=			
ANR	3139947	UnaryOperationExpression	* ppNode		3139885	0					
ANR	3139948	UnaryOperator	*		3139885	0					
ANR	3139949	Identifier	ppNode		3139885	1					
ANR	3139950	Identifier	pNode		3139885	1					
ANR	3139951	ExpressionStatement	* pIndex = i	721:4:23277:23288	3139885	1	True				
ANR	3139952	AssignmentExpression	* pIndex = i		3139885	0		=			
ANR	3139953	UnaryOperationExpression	* pIndex		3139885	0					
ANR	3139954	UnaryOperator	*		3139885	0					
ANR	3139955	Identifier	pIndex		3139885	1					
ANR	3139956	Identifier	i		3139885	1					
ANR	3139957	ReturnStatement	return ;	722:4:23294:23300	3139885	2	True				
ANR	3139958	ExpressionStatement		723:4:23306:23306	3139885	1	True				
ANR	3139959	ExpressionStatement		724:3:23311:23311	3139885	1	True				
ANR	3139960	ExpressionStatement	i = 0	730:2:23655:23658	3139885	2	True				
ANR	3139961	AssignmentExpression	i = 0		3139885	0		=			
ANR	3139962	Identifier	i		3139885	0					
ANR	3139963	PrimaryExpression	0		3139885	1					
ANR	3139964	WhileStatement	while ( i < pNode -> nkeys && ( pNode -> pair ) [ i ] . key < key )		3139885	3					
ANR	3139965	Condition	i < pNode -> nkeys && ( pNode -> pair ) [ i ] . key < key	731:9:23669:23712	3139885	0	True				
ANR	3139966	AndExpression	i < pNode -> nkeys && ( pNode -> pair ) [ i ] . key < key		3139885	0		&&			
ANR	3139967	RelationalExpression	i < pNode -> nkeys		3139885	0		<			
ANR	3139968	Identifier	i		3139885	0					
ANR	3139969	PtrMemberAccess	pNode -> nkeys		3139885	1					
ANR	3139970	Identifier	pNode		3139885	0					
ANR	3139971	Identifier	nkeys		3139885	1					
ANR	3139972	RelationalExpression	( pNode -> pair ) [ i ] . key < key		3139885	1		<			
ANR	3139973	MemberAccess	( pNode -> pair ) [ i ] . key		3139885	0					
ANR	3139974	ArrayIndexing	( pNode -> pair ) [ i ]		3139885	0					
ANR	3139975	PtrMemberAccess	pNode -> pair		3139885	0					
ANR	3139976	Identifier	pNode		3139885	0					
ANR	3139977	Identifier	pair		3139885	1					
ANR	3139978	Identifier	i		3139885	1					
ANR	3139979	Identifier	key		3139885	1					
ANR	3139980	Identifier	key		3139885	1					
ANR	3139981	ExpressionStatement	i ++	731:56:23716:23719	3139885	1	True				
ANR	3139982	PostIncDecOperationExpression	i ++		3139885	0					
ANR	3139983	Identifier	i		3139885	0					
ANR	3139984	IncDec	++		3139885	1					
ANR	3139985	ExpressionStatement	pNode = ( pNode -> child ) [ i ]	738:2:24059:24084	3139885	4	True				
ANR	3139986	AssignmentExpression	pNode = ( pNode -> child ) [ i ]		3139885	0		=			
ANR	3139987	Identifier	pNode		3139885	0					
ANR	3139988	ArrayIndexing	( pNode -> child ) [ i ]		3139885	1					
ANR	3139989	PtrMemberAccess	pNode -> child		3139885	0					
ANR	3139990	Identifier	pNode		3139885	0					
ANR	3139991	Identifier	child		3139885	1					
ANR	3139992	Identifier	i		3139885	1					
ANR	3139993	ExpressionStatement		739:2:24088:24088	3139885	6	True				
ANR	3139994	ExpressionStatement	* ppNode = NULL	742:1:24132:24146	3139885	7	True				
ANR	3139995	AssignmentExpression	* ppNode = NULL		3139885	0		=			
ANR	3139996	UnaryOperationExpression	* ppNode		3139885	0					
ANR	3139997	UnaryOperator	*		3139885	0					
ANR	3139998	Identifier	ppNode		3139885	1					
ANR	3139999	Identifier	NULL		3139885	1					
ANR	3140000	ReturnType	void		3139885	1					
ANR	3140001	Identifier	BTree :: searchKey		3139885	2					
ANR	3140002	ParameterList	"unsigned long key , Btree_Node * * ppNode , int * pIndex"		3139885	3					
ANR	3140003	Parameter	unsigned long key	706:22:22870:22886	3139885	0	True				
ANR	3140004	ParameterType	unsigned long		3139885	0					
ANR	3140005	Identifier	key		3139885	1					
ANR	3140006	Parameter	Btree_Node * * ppNode	706:41:22889:22907	3139885	1	True				
ANR	3140007	ParameterType	Btree_Node * *		3139885	0					
ANR	3140008	Identifier	ppNode		3139885	1					
ANR	3140009	Parameter	int * pIndex	706:62:22910:22920	3139885	2	True				
ANR	3140010	ParameterType	int *		3139885	0					
ANR	3140011	Identifier	pIndex		3139885	1					
ANR	3140012	CFGEntryNode	ENTRY		3139885		True				
ANR	3140013	CFGExitNode	EXIT		3139885		True				
ANR	3140014	CFGExceptionNode	EXCEPTION		3139885		True				
ANR	3140015	CFGExceptionNode	EXCEPTION		3139885		True				
ANR	3140016	CFGExceptionNode	EXCEPTION		3139885		True				
ANR	3140017	Symbol	* pNode -> pair		3139885						
ANR	3140018	Symbol	NULL		3139885						
ANR	3140019	Symbol	i		3139885						
ANR	3140020	Symbol	pNode -> nkeys		3139885						
ANR	3140021	Symbol	ppNode		3139885						
ANR	3140022	Symbol	* pNode		3139885						
ANR	3140023	Symbol	* i		3139885						
ANR	3140024	Symbol	pIndex		3139885						
ANR	3140025	Symbol	pNode -> pair		3139885						
ANR	3140026	Symbol	pNode -> child		3139885						
ANR	3140027	Symbol	* * pNode		3139885						
ANR	3140028	Symbol	root		3139885						
ANR	3140029	Symbol	( pNode -> pair ) [ i ] . key		3139885						
ANR	3140030	Symbol	* pIndex		3139885						
ANR	3140031	Symbol	* pNode -> child		3139885						
ANR	3140032	Symbol	pNode		3139885						
ANR	3140033	Symbol	key		3139885						
ANR	3140034	Symbol	* ppNode		3139885						
ANR	3140035	Function	BTree :: exists	760:0:24383:24514							
ANR	3140036	FunctionDef	BTree :: exists (unsigned long key)		3140035	0					
ANR	3140037	CompoundStatement		761:0:24427:24514	3140035	0					
ANR	3140038	IdentifierDeclStatement	Btree_Node * pNode = NULL ;	762:1:24430:24452	3140035	0	True				
ANR	3140039	IdentifierDecl	* pNode = NULL		3140035	0					
ANR	3140040	IdentifierDeclType	Btree_Node *		3140035	0					
ANR	3140041	Identifier	pNode		3140035	1					
ANR	3140042	AssignmentExpression	* pNode = NULL		3140035	2		=			
ANR	3140043	Identifier	NULL		3140035	0					
ANR	3140044	Identifier	NULL		3140035	1					
ANR	3140045	IdentifierDeclStatement	int idx ;	763:1:24455:24462	3140035	1	True				
ANR	3140046	IdentifierDecl	idx		3140035	0					
ANR	3140047	IdentifierDeclType	int		3140035	0					
ANR	3140048	Identifier	idx		3140035	1					
ANR	3140049	ExpressionStatement	"searchKey ( key , & pNode , & idx )"	764:1:24465:24491	3140035	2	True				
ANR	3140050	CallExpression	"searchKey ( key , & pNode , & idx )"		3140035	0					
ANR	3140051	Callee	searchKey		3140035	0					
ANR	3140052	Identifier	searchKey		3140035	0					
ANR	3140053	ArgumentList	key		3140035	1					
ANR	3140054	Argument	key		3140035	0					
ANR	3140055	Identifier	key		3140035	0					
ANR	3140056	Argument	& pNode		3140035	1					
ANR	3140057	UnaryOperationExpression	& pNode		3140035	0					
ANR	3140058	UnaryOperator	&		3140035	0					
ANR	3140059	Identifier	pNode		3140035	1					
ANR	3140060	Argument	& idx		3140035	2					
ANR	3140061	UnaryOperationExpression	& idx		3140035	0					
ANR	3140062	UnaryOperator	&		3140035	0					
ANR	3140063	Identifier	idx		3140035	1					
ANR	3140064	ReturnStatement	return NULL != pNode ;	765:1:24494:24512	3140035	3	True				
ANR	3140065	EqualityExpression	NULL != pNode		3140035	0		!=			
ANR	3140066	Identifier	NULL		3140035	0					
ANR	3140067	Identifier	pNode		3140035	1					
ANR	3140068	ReturnType	bool		3140035	1					
ANR	3140069	Identifier	BTree :: exists		3140035	2					
ANR	3140070	ParameterList	unsigned long key		3140035	3					
ANR	3140071	Parameter	unsigned long key	760:19:24402:24418	3140035	0	True				
ANR	3140072	ParameterType	unsigned long		3140035	0					
ANR	3140073	Identifier	key		3140035	1					
ANR	3140074	CFGEntryNode	ENTRY		3140035		True				
ANR	3140075	CFGExitNode	EXIT		3140035		True				
ANR	3140076	Symbol	NULL		3140035						
ANR	3140077	Symbol	& idx		3140035						
ANR	3140078	Symbol	idx		3140035						
ANR	3140079	Symbol	pNode		3140035						
ANR	3140080	Symbol	key		3140035						
ANR	3140081	Symbol	& pNode		3140035						
ANR	3140082	Function	BTree :: findVal	783:0:24800:25025							
ANR	3140083	FunctionDef	BTree :: findVal (unsigned long key)		3140082	0					
ANR	3140084	CompoundStatement		784:0:24854:25025	3140082	0					
ANR	3140085	IdentifierDeclStatement	Btree_Node * pNode = NULL ;	785:1:24857:24879	3140082	0	True				
ANR	3140086	IdentifierDecl	* pNode = NULL		3140082	0					
ANR	3140087	IdentifierDeclType	Btree_Node *		3140082	0					
ANR	3140088	Identifier	pNode		3140082	1					
ANR	3140089	AssignmentExpression	* pNode = NULL		3140082	2		=			
ANR	3140090	Identifier	NULL		3140082	0					
ANR	3140091	Identifier	NULL		3140082	1					
ANR	3140092	IdentifierDeclStatement	int Index ;	786:1:24882:24891	3140082	1	True				
ANR	3140093	IdentifierDecl	Index		3140082	0					
ANR	3140094	IdentifierDeclType	int		3140082	0					
ANR	3140095	Identifier	Index		3140082	1					
ANR	3140096	ExpressionStatement	"searchKey ( key , & pNode , & Index )"	788:1:24895:24923	3140082	2	True				
ANR	3140097	CallExpression	"searchKey ( key , & pNode , & Index )"		3140082	0					
ANR	3140098	Callee	searchKey		3140082	0					
ANR	3140099	Identifier	searchKey		3140082	0					
ANR	3140100	ArgumentList	key		3140082	1					
ANR	3140101	Argument	key		3140082	0					
ANR	3140102	Identifier	key		3140082	0					
ANR	3140103	Argument	& pNode		3140082	1					
ANR	3140104	UnaryOperationExpression	& pNode		3140082	0					
ANR	3140105	UnaryOperator	&		3140082	0					
ANR	3140106	Identifier	pNode		3140082	1					
ANR	3140107	Argument	& Index		3140082	2					
ANR	3140108	UnaryOperationExpression	& Index		3140082	0					
ANR	3140109	UnaryOperator	&		3140082	0					
ANR	3140110	Identifier	Index		3140082	1					
ANR	3140111	IfStatement	if ( NULL == pNode )		3140082	3					
ANR	3140112	Condition	NULL == pNode	789:5:24930:24940	3140082	0	True				
ANR	3140113	EqualityExpression	NULL == pNode		3140082	0		==			
ANR	3140114	Identifier	NULL		3140082	0					
ANR	3140115	Identifier	pNode		3140082	1					
ANR	3140116	ThrowStatement	"throw ""BTree::findVal, key does not exist"" ;"	790:2:24946:24988	3140082	1	True				
ANR	3140117	PrimaryExpression	"""BTree::findVal, key does not exist"""		3140082	0					
ANR	3140118	ReturnStatement	return ( pNode -> pair ) [ Index ] . val ;	792:1:24992:25023	3140082	4	True				
ANR	3140119	MemberAccess	( pNode -> pair ) [ Index ] . val		3140082	0					
ANR	3140120	ArrayIndexing	( pNode -> pair ) [ Index ]		3140082	0					
ANR	3140121	PtrMemberAccess	pNode -> pair		3140082	0					
ANR	3140122	Identifier	pNode		3140082	0					
ANR	3140123	Identifier	pair		3140082	1					
ANR	3140124	Identifier	Index		3140082	1					
ANR	3140125	Identifier	val		3140082	1					
ANR	3140126	ReturnType	unsigned long		3140082	1					
ANR	3140127	Identifier	BTree :: findVal		3140082	2					
ANR	3140128	ParameterList	unsigned long key		3140082	3					
ANR	3140129	Parameter	unsigned long key	783:29:24829:24845	3140082	0	True				
ANR	3140130	ParameterType	unsigned long		3140082	0					
ANR	3140131	Identifier	key		3140082	1					
ANR	3140132	CFGEntryNode	ENTRY		3140082		True				
ANR	3140133	CFGExitNode	EXIT		3140082		True				
ANR	3140134	CFGExceptionNode	EXCEPTION		3140082		True				
ANR	3140135	Symbol	* pNode -> pair		3140082						
ANR	3140136	Symbol	NULL		3140082						
ANR	3140137	Symbol	( pNode -> pair ) [ Index ] . val		3140082						
ANR	3140138	Symbol	* Index		3140082						
ANR	3140139	Symbol	pNode -> pair		3140082						
ANR	3140140	Symbol	* * pNode		3140082						
ANR	3140141	Symbol	& Index		3140082						
ANR	3140142	Symbol	Index		3140082						
ANR	3140143	Symbol	* pNode		3140082						
ANR	3140144	Symbol	pNode		3140082						
ANR	3140145	Symbol	key		3140082						
ANR	3140146	Symbol	& pNode		3140082						
ANR	3140147	Function	BTree :: removeAtLeaf	810:0:25288:28075							
ANR	3140148	FunctionDef	"BTree :: removeAtLeaf (Btree_Node * pNode , int i)"		3140147	0					
ANR	3140149	CompoundStatement		811:0:25341:28075	3140147	0					
ANR	3140150	IdentifierDeclStatement	Btree_Node * pLeftSibling ;	812:1:25344:25368	3140147	0	True				
ANR	3140151	IdentifierDecl	* pLeftSibling		3140147	0					
ANR	3140152	IdentifierDeclType	Btree_Node *		3140147	0					
ANR	3140153	Identifier	pLeftSibling		3140147	1					
ANR	3140154	IdentifierDeclStatement	Btree_Node * pRightSibling ;	813:1:25371:25396	3140147	1	True				
ANR	3140155	IdentifierDecl	* pRightSibling		3140147	0					
ANR	3140156	IdentifierDeclType	Btree_Node *		3140147	0					
ANR	3140157	Identifier	pRightSibling		3140147	1					
ANR	3140158	IdentifierDeclStatement	int h ;	814:1:25399:25404	3140147	2	True				
ANR	3140159	IdentifierDecl	h		3140147	0					
ANR	3140160	IdentifierDeclType	int		3140147	0					
ANR	3140161	Identifier	h		3140147	1					
ANR	3140162	IfStatement	if ( NULL == pNode )		3140147	3					
ANR	3140163	Condition	NULL == pNode	817:5:25427:25437	3140147	0	True				
ANR	3140164	EqualityExpression	NULL == pNode		3140147	0		==			
ANR	3140165	Identifier	NULL		3140147	0					
ANR	3140166	Identifier	pNode		3140147	1					
ANR	3140167	ThrowStatement	"throw ""removeAtLeaf, pNode is NULL"" ;"	818:2:25443:25478	3140147	1	True				
ANR	3140168	PrimaryExpression	"""removeAtLeaf, pNode is NULL"""		3140147	0					
ANR	3140169	IfStatement	if ( NULL != ( pNode -> child ) [ 0 ] )		3140147	4					
ANR	3140170	Condition	NULL != ( pNode -> child ) [ 0 ]	821:5:25504:25528	3140147	0	True				
ANR	3140171	EqualityExpression	NULL != ( pNode -> child ) [ 0 ]		3140147	0		!=			
ANR	3140172	Identifier	NULL		3140147	0					
ANR	3140173	ArrayIndexing	( pNode -> child ) [ 0 ]		3140147	1					
ANR	3140174	PtrMemberAccess	pNode -> child		3140147	0					
ANR	3140175	Identifier	pNode		3140147	0					
ANR	3140176	Identifier	child		3140147	1					
ANR	3140177	PrimaryExpression	0		3140147	1					
ANR	3140178	ThrowStatement	"throw ""removeAtLeaf, not a leaf"" ;"	822:2:25534:25566	3140147	1	True				
ANR	3140179	PrimaryExpression	"""removeAtLeaf, not a leaf"""		3140147	0					
ANR	3140180	IfStatement	if ( i < 0 || i >= pNode -> nkeys )		3140147	5					
ANR	3140181	Condition	i < 0 || i >= pNode -> nkeys	825:5:25612:25633	3140147	0	True				
ANR	3140182	OrExpression	i < 0 || i >= pNode -> nkeys		3140147	0		||			
ANR	3140183	RelationalExpression	i < 0		3140147	0		<			
ANR	3140184	Identifier	i		3140147	0					
ANR	3140185	PrimaryExpression	0		3140147	1					
ANR	3140186	RelationalExpression	i >= pNode -> nkeys		3140147	1		>=			
ANR	3140187	Identifier	i		3140147	0					
ANR	3140188	PtrMemberAccess	pNode -> nkeys		3140147	1					
ANR	3140189	Identifier	pNode		3140147	0					
ANR	3140190	Identifier	nkeys		3140147	1					
ANR	3140191	ThrowStatement	"throw ""removeAtLeaf, i out of bound"" ;"	826:2:25639:25675	3140147	1	True				
ANR	3140192	PrimaryExpression	"""removeAtLeaf, i out of bound"""		3140147	0					
ANR	3140193	ForStatement	for ( h = i + 1 ; h < pNode -> nkeys ; h ++ )		3140147	6					
ANR	3140194	ForInit	h = i + 1 ;	831:6:25829:25834	3140147	0	True				
ANR	3140195	AssignmentExpression	h = i + 1		3140147	0		=			
ANR	3140196	Identifier	h		3140147	0					
ANR	3140197	AdditiveExpression	i + 1		3140147	1		+			
ANR	3140198	Identifier	i		3140147	0					
ANR	3140199	PrimaryExpression	1		3140147	1					
ANR	3140200	Condition	h < pNode -> nkeys	831:13:25836:25849	3140147	1	True				
ANR	3140201	RelationalExpression	h < pNode -> nkeys		3140147	0		<			
ANR	3140202	Identifier	h		3140147	0					
ANR	3140203	PtrMemberAccess	pNode -> nkeys		3140147	1					
ANR	3140204	Identifier	pNode		3140147	0					
ANR	3140205	Identifier	nkeys		3140147	1					
ANR	3140206	PostIncDecOperationExpression	h ++	831:29:25852:25854	3140147	2	True				
ANR	3140207	Identifier	h		3140147	0					
ANR	3140208	IncDec	++		3140147	1					
ANR	3140209	ExpressionStatement	( pNode -> pair ) [ h - 1 ] = ( pNode -> pair ) [ h ]	832:2:25860:25897	3140147	3	True				
ANR	3140210	AssignmentExpression	( pNode -> pair ) [ h - 1 ] = ( pNode -> pair ) [ h ]		3140147	0		=			
ANR	3140211	ArrayIndexing	( pNode -> pair ) [ h - 1 ]		3140147	0					
ANR	3140212	PtrMemberAccess	pNode -> pair		3140147	0					
ANR	3140213	Identifier	pNode		3140147	0					
ANR	3140214	Identifier	pair		3140147	1					
ANR	3140215	AdditiveExpression	h - 1		3140147	1		-			
ANR	3140216	Identifier	h		3140147	0					
ANR	3140217	PrimaryExpression	1		3140147	1					
ANR	3140218	ArrayIndexing	( pNode -> pair ) [ h ]		3140147	1					
ANR	3140219	PtrMemberAccess	pNode -> pair		3140147	0					
ANR	3140220	Identifier	pNode		3140147	0					
ANR	3140221	Identifier	pair		3140147	1					
ANR	3140222	Identifier	h		3140147	1					
ANR	3140223	ExpressionStatement	( pNode -> nkeys ) --	833:1:25900:25918	3140147	7	True				
ANR	3140224	PostIncDecOperationExpression	( pNode -> nkeys ) --		3140147	0					
ANR	3140225	PtrMemberAccess	pNode -> nkeys		3140147	0					
ANR	3140226	Identifier	pNode		3140147	0					
ANR	3140227	Identifier	nkeys		3140147	1					
ANR	3140228	IncDec	--		3140147	1					
ANR	3140229	IfStatement	if ( NULL == ( pNode -> p ) && 0 == ( pNode -> nkeys ) )		3140147	8					
ANR	3140230	Condition	NULL == ( pNode -> p ) && 0 == ( pNode -> nkeys )	836:5:26011:26047	3140147	0	True				
ANR	3140231	AndExpression	NULL == ( pNode -> p ) && 0 == ( pNode -> nkeys )		3140147	0		&&			
ANR	3140232	EqualityExpression	NULL == ( pNode -> p )		3140147	0		==			
ANR	3140233	Identifier	NULL		3140147	0					
ANR	3140234	PtrMemberAccess	pNode -> p		3140147	1					
ANR	3140235	Identifier	pNode		3140147	0					
ANR	3140236	Identifier	p		3140147	1					
ANR	3140237	EqualityExpression	0 == ( pNode -> nkeys )		3140147	1		==			
ANR	3140238	PrimaryExpression	0		3140147	0					
ANR	3140239	PtrMemberAccess	pNode -> nkeys		3140147	1					
ANR	3140240	Identifier	pNode		3140147	0					
ANR	3140241	Identifier	nkeys		3140147	1					
ANR	3140242	CompoundStatement		26:45:709:709	3140147	1					
ANR	3140243	Statement	delete	837:2:26055:26060	3140147	0	True				
ANR	3140244	ExpressionStatement	root	837:9:26062:26066	3140147	1	True				
ANR	3140245	Identifier	root		3140147	0					
ANR	3140246	ExpressionStatement	root = NULL	838:2:26070:26081	3140147	2	True				
ANR	3140247	AssignmentExpression	root = NULL		3140147	0		=			
ANR	3140248	Identifier	root		3140147	0					
ANR	3140249	Identifier	NULL		3140147	1					
ANR	3140250	ReturnStatement	return ;	839:2:26085:26091	3140147	3	True				
ANR	3140251	ExpressionStatement		840:2:26095:26095	3140147	9	True				
ANR	3140252	WhileStatement	while ( ( pNode -> nkeys ) < t - 1 && NULL != pNode -> p )		3140147	10					
ANR	3140253	Condition	( pNode -> nkeys ) < t - 1 && NULL != pNode -> p	843:8:26168:26205	3140147	0	True				
ANR	3140254	AndExpression	( pNode -> nkeys ) < t - 1 && NULL != pNode -> p		3140147	0		&&			
ANR	3140255	RelationalExpression	( pNode -> nkeys ) < t - 1		3140147	0		<			
ANR	3140256	PtrMemberAccess	pNode -> nkeys		3140147	0					
ANR	3140257	Identifier	pNode		3140147	0					
ANR	3140258	Identifier	nkeys		3140147	1					
ANR	3140259	AdditiveExpression	t - 1		3140147	1		-			
ANR	3140260	Identifier	t		3140147	0					
ANR	3140261	PrimaryExpression	1		3140147	1					
ANR	3140262	EqualityExpression	NULL != pNode -> p		3140147	1		!=			
ANR	3140263	Identifier	NULL		3140147	0					
ANR	3140264	PtrMemberAccess	pNode -> p		3140147	1					
ANR	3140265	Identifier	pNode		3140147	0					
ANR	3140266	Identifier	p		3140147	1					
ANR	3140267	CompoundStatement		33:49:867:867	3140147	1					
ANR	3140268	ExpressionStatement	pLeftSibling = leftSibling ( pNode )	845:2:26258:26291	3140147	0	True				
ANR	3140269	AssignmentExpression	pLeftSibling = leftSibling ( pNode )		3140147	0		=			
ANR	3140270	Identifier	pLeftSibling		3140147	0					
ANR	3140271	CallExpression	leftSibling ( pNode )		3140147	1					
ANR	3140272	Callee	leftSibling		3140147	0					
ANR	3140273	Identifier	leftSibling		3140147	0					
ANR	3140274	ArgumentList	pNode		3140147	1					
ANR	3140275	Argument	pNode		3140147	0					
ANR	3140276	Identifier	pNode		3140147	0					
ANR	3140277	IfStatement	if ( NULL != pLeftSibling )		3140147	1					
ANR	3140278	Condition	NULL != pLeftSibling	846:6:26299:26316	3140147	0	True				
ANR	3140279	EqualityExpression	NULL != pLeftSibling		3140147	0		!=			
ANR	3140280	Identifier	NULL		3140147	0					
ANR	3140281	Identifier	pLeftSibling		3140147	1					
ANR	3140282	CompoundStatement		36:27:978:978	3140147	1					
ANR	3140283	IfStatement	if ( pLeftSibling -> nkeys >= t )		3140147	0					
ANR	3140284	Condition	pLeftSibling -> nkeys >= t	848:7:26428:26449	3140147	0	True				
ANR	3140285	RelationalExpression	pLeftSibling -> nkeys >= t		3140147	0		>=			
ANR	3140286	PtrMemberAccess	pLeftSibling -> nkeys		3140147	0					
ANR	3140287	Identifier	pLeftSibling		3140147	0					
ANR	3140288	Identifier	nkeys		3140147	1					
ANR	3140289	Identifier	t		3140147	1					
ANR	3140290	CompoundStatement		38:32:1111:1111	3140147	1					
ANR	3140291	ExpressionStatement	"keyTransferRight ( pLeftSibling , pNode )"	849:4:26459:26495	3140147	0	True				
ANR	3140292	CallExpression	"keyTransferRight ( pLeftSibling , pNode )"		3140147	0					
ANR	3140293	Callee	keyTransferRight		3140147	0					
ANR	3140294	Identifier	keyTransferRight		3140147	0					
ANR	3140295	ArgumentList	pLeftSibling		3140147	1					
ANR	3140296	Argument	pLeftSibling		3140147	0					
ANR	3140297	Identifier	pLeftSibling		3140147	0					
ANR	3140298	Argument	pNode		3140147	1					
ANR	3140299	Identifier	pNode		3140147	0					
ANR	3140300	ReturnStatement	return ;	850:4:26501:26507	3140147	1	True				
ANR	3140301	ElseStatement	else		3140147	0					
ANR	3140302	CompoundStatement		42:8:1180:1180	3140147	0					
ANR	3140303	ExpressionStatement	"attachSibling ( pLeftSibling , pNode )"	857:4:26808:26841	3140147	0	True				
ANR	3140304	CallExpression	"attachSibling ( pLeftSibling , pNode )"		3140147	0					
ANR	3140305	Callee	attachSibling		3140147	0					
ANR	3140306	Identifier	attachSibling		3140147	0					
ANR	3140307	ArgumentList	pLeftSibling		3140147	1					
ANR	3140308	Argument	pLeftSibling		3140147	0					
ANR	3140309	Identifier	pLeftSibling		3140147	0					
ANR	3140310	Argument	pNode		3140147	1					
ANR	3140311	Identifier	pNode		3140147	0					
ANR	3140312	ExpressionStatement	pNode = pLeftSibling -> p	862:4:27055:27078	3140147	1	True				
ANR	3140313	AssignmentExpression	pNode = pLeftSibling -> p		3140147	0		=			
ANR	3140314	Identifier	pNode		3140147	0					
ANR	3140315	PtrMemberAccess	pLeftSibling -> p		3140147	1					
ANR	3140316	Identifier	pLeftSibling		3140147	0					
ANR	3140317	Identifier	p		3140147	1					
ANR	3140318	IfStatement	if ( NULL == pNode -> p && 0 == pNode -> nkeys )		3140147	2					
ANR	3140319	Condition	NULL == pNode -> p && 0 == pNode -> nkeys	865:8:27165:27197	3140147	0	True				
ANR	3140320	AndExpression	NULL == pNode -> p && 0 == pNode -> nkeys		3140147	0		&&			
ANR	3140321	EqualityExpression	NULL == pNode -> p		3140147	0		==			
ANR	3140322	Identifier	NULL		3140147	0					
ANR	3140323	PtrMemberAccess	pNode -> p		3140147	1					
ANR	3140324	Identifier	pNode		3140147	0					
ANR	3140325	Identifier	p		3140147	1					
ANR	3140326	EqualityExpression	0 == pNode -> nkeys		3140147	1		==			
ANR	3140327	PrimaryExpression	0		3140147	0					
ANR	3140328	PtrMemberAccess	pNode -> nkeys		3140147	1					
ANR	3140329	Identifier	pNode		3140147	0					
ANR	3140330	Identifier	nkeys		3140147	1					
ANR	3140331	CompoundStatement		55:44:1859:1859	3140147	1					
ANR	3140332	ExpressionStatement	root = pLeftSibling	866:5:27208:27227	3140147	0	True				
ANR	3140333	AssignmentExpression	root = pLeftSibling		3140147	0		=			
ANR	3140334	Identifier	root		3140147	0					
ANR	3140335	Identifier	pLeftSibling		3140147	1					
ANR	3140336	ExpressionStatement	root -> p = NULL	867:5:27234:27248	3140147	1	True				
ANR	3140337	AssignmentExpression	root -> p = NULL		3140147	0		=			
ANR	3140338	PtrMemberAccess	root -> p		3140147	0					
ANR	3140339	Identifier	root		3140147	0					
ANR	3140340	Identifier	p		3140147	1					
ANR	3140341	Identifier	NULL		3140147	1					
ANR	3140342	Statement	delete	868:5:27255:27260	3140147	2	True				
ANR	3140343	ExpressionStatement	pNode	868:12:27262:27267	3140147	3	True				
ANR	3140344	Identifier	pNode		3140147	0					
ANR	3140345	ReturnStatement	return ;	869:5:27274:27280	3140147	4	True				
ANR	3140346	ExpressionStatement		870:5:27287:27287	3140147	3	True				
ANR	3140347	ExpressionStatement		871:4:27293:27293	3140147	1	True				
ANR	3140348	ElseStatement	else		3140147	0					
ANR	3140349	CompoundStatement		63:7:1964:1964	3140147	0					
ANR	3140350	ExpressionStatement	pRightSibling = rightSibling ( pNode )	875:3:27414:27449	3140147	0	True				
ANR	3140351	AssignmentExpression	pRightSibling = rightSibling ( pNode )		3140147	0		=			
ANR	3140352	Identifier	pRightSibling		3140147	0					
ANR	3140353	CallExpression	rightSibling ( pNode )		3140147	1					
ANR	3140354	Callee	rightSibling		3140147	0					
ANR	3140355	Identifier	rightSibling		3140147	0					
ANR	3140356	ArgumentList	pNode		3140147	1					
ANR	3140357	Argument	pNode		3140147	0					
ANR	3140358	Identifier	pNode		3140147	0					
ANR	3140359	IfStatement	if ( NULL == pRightSibling )		3140147	1					
ANR	3140360	Condition	NULL == pRightSibling	876:7:27458:27476	3140147	0	True				
ANR	3140361	EqualityExpression	NULL == pRightSibling		3140147	0		==			
ANR	3140362	Identifier	NULL		3140147	0					
ANR	3140363	Identifier	pRightSibling		3140147	1					
ANR	3140364	CompoundStatement		66:29:2138:2138	3140147	1					
ANR	3140365	ExpressionStatement	"printf ( ""not possible, must have right sibling\\n"" )"	876:30:27481:27530	3140147	0	True				
ANR	3140366	CallExpression	"printf ( ""not possible, must have right sibling\\n"" )"		3140147	0					
ANR	3140367	Callee	printf		3140147	0					
ANR	3140368	Identifier	printf		3140147	0					
ANR	3140369	ArgumentList	"""not possible, must have right sibling\\n"""		3140147	1					
ANR	3140370	Argument	"""not possible, must have right sibling\\n"""		3140147	0					
ANR	3140371	PrimaryExpression	"""not possible, must have right sibling\\n"""		3140147	0					
ANR	3140372	ReturnStatement	return ;	876:81:27532:27538	3140147	1	True				
ANR	3140373	IfStatement	if ( pRightSibling -> nkeys >= t )		3140147	2					
ANR	3140374	Condition	pRightSibling -> nkeys >= t	879:7:27626:27650	3140147	0	True				
ANR	3140375	RelationalExpression	pRightSibling -> nkeys >= t		3140147	0		>=			
ANR	3140376	PtrMemberAccess	pRightSibling -> nkeys		3140147	0					
ANR	3140377	Identifier	pRightSibling		3140147	0					
ANR	3140378	Identifier	nkeys		3140147	1					
ANR	3140379	Identifier	t		3140147	1					
ANR	3140380	CompoundStatement		69:35:2312:2312	3140147	1					
ANR	3140381	ExpressionStatement	"keyTransferLeft ( pNode , pRightSibling )"	880:4:27660:27696	3140147	0	True				
ANR	3140382	CallExpression	"keyTransferLeft ( pNode , pRightSibling )"		3140147	0					
ANR	3140383	Callee	keyTransferLeft		3140147	0					
ANR	3140384	Identifier	keyTransferLeft		3140147	0					
ANR	3140385	ArgumentList	pNode		3140147	1					
ANR	3140386	Argument	pNode		3140147	0					
ANR	3140387	Identifier	pNode		3140147	0					
ANR	3140388	Argument	pRightSibling		3140147	1					
ANR	3140389	Identifier	pRightSibling		3140147	0					
ANR	3140390	ReturnStatement	return ;	881:4:27702:27708	3140147	1	True				
ANR	3140391	ExpressionStatement		882:4:27714:27714	3140147	3	True				
ANR	3140392	ExpressionStatement	"attachSibling ( pNode , pRightSibling )"	885:3:27795:27829	3140147	4	True				
ANR	3140393	CallExpression	"attachSibling ( pNode , pRightSibling )"		3140147	0					
ANR	3140394	Callee	attachSibling		3140147	0					
ANR	3140395	Identifier	attachSibling		3140147	0					
ANR	3140396	ArgumentList	pNode		3140147	1					
ANR	3140397	Argument	pNode		3140147	0					
ANR	3140398	Identifier	pNode		3140147	0					
ANR	3140399	Argument	pRightSibling		3140147	1					
ANR	3140400	Identifier	pRightSibling		3140147	0					
ANR	3140401	ExpressionStatement	pNode = pNode -> p	887:3:27835:27851	3140147	5	True				
ANR	3140402	AssignmentExpression	pNode = pNode -> p		3140147	0		=			
ANR	3140403	Identifier	pNode		3140147	0					
ANR	3140404	PtrMemberAccess	pNode -> p		3140147	1					
ANR	3140405	Identifier	pNode		3140147	0					
ANR	3140406	Identifier	p		3140147	1					
ANR	3140407	IfStatement	if ( NULL == pNode -> p && 0 == pNode -> nkeys )		3140147	6					
ANR	3140408	Condition	NULL == pNode -> p && 0 == pNode -> nkeys	890:7:27941:27973	3140147	0	True				
ANR	3140409	AndExpression	NULL == pNode -> p && 0 == pNode -> nkeys		3140147	0		&&			
ANR	3140410	EqualityExpression	NULL == pNode -> p		3140147	0		==			
ANR	3140411	Identifier	NULL		3140147	0					
ANR	3140412	PtrMemberAccess	pNode -> p		3140147	1					
ANR	3140413	Identifier	pNode		3140147	0					
ANR	3140414	Identifier	p		3140147	1					
ANR	3140415	EqualityExpression	0 == pNode -> nkeys		3140147	1		==			
ANR	3140416	PrimaryExpression	0		3140147	0					
ANR	3140417	PtrMemberAccess	pNode -> nkeys		3140147	1					
ANR	3140418	Identifier	pNode		3140147	0					
ANR	3140419	Identifier	nkeys		3140147	1					
ANR	3140420	CompoundStatement		80:43:2635:2635	3140147	1					
ANR	3140421	ExpressionStatement	root = ( pNode -> child ) [ 0 ]	891:4:27983:28007	3140147	0	True				
ANR	3140422	AssignmentExpression	root = ( pNode -> child ) [ 0 ]		3140147	0		=			
ANR	3140423	Identifier	root		3140147	0					
ANR	3140424	ArrayIndexing	( pNode -> child ) [ 0 ]		3140147	1					
ANR	3140425	PtrMemberAccess	pNode -> child		3140147	0					
ANR	3140426	Identifier	pNode		3140147	0					
ANR	3140427	Identifier	child		3140147	1					
ANR	3140428	PrimaryExpression	0		3140147	1					
ANR	3140429	ExpressionStatement	root -> p = NULL	892:4:28013:28027	3140147	1	True				
ANR	3140430	AssignmentExpression	root -> p = NULL		3140147	0		=			
ANR	3140431	PtrMemberAccess	root -> p		3140147	0					
ANR	3140432	Identifier	root		3140147	0					
ANR	3140433	Identifier	p		3140147	1					
ANR	3140434	Identifier	NULL		3140147	1					
ANR	3140435	Statement	delete	893:4:28033:28038	3140147	2	True				
ANR	3140436	ExpressionStatement	pNode	893:11:28040:28045	3140147	3	True				
ANR	3140437	Identifier	pNode		3140147	0					
ANR	3140438	ReturnStatement	return ;	894:4:28051:28057	3140147	4	True				
ANR	3140439	ExpressionStatement		895:4:28063:28063	3140147	7	True				
ANR	3140440	ExpressionStatement		896:3:28068:28068	3140147	2	True				
ANR	3140441	ExpressionStatement		898:2:28073:28073	3140147	11	True				
ANR	3140442	ReturnType	void		3140147	1					
ANR	3140443	Identifier	BTree :: removeAtLeaf		3140147	2					
ANR	3140444	ParameterList	"Btree_Node * pNode , int i"		3140147	3					
ANR	3140445	Parameter	Btree_Node * pNode	810:26:25314:25330	3140147	0	True				
ANR	3140446	ParameterType	Btree_Node *		3140147	0					
ANR	3140447	Identifier	pNode		3140147	1					
ANR	3140448	Parameter	int i	810:45:25333:25337	3140147	1	True				
ANR	3140449	ParameterType	int		3140147	0					
ANR	3140450	Identifier	i		3140147	1					
ANR	3140451	CFGEntryNode	ENTRY		3140147		True				
ANR	3140452	CFGExitNode	EXIT		3140147		True				
ANR	3140453	CFGExceptionNode	EXCEPTION		3140147		True				
ANR	3140454	CFGExceptionNode	EXCEPTION		3140147		True				
ANR	3140455	CFGExceptionNode	EXCEPTION		3140147		True				
ANR	3140456	CFGExceptionNode	EXCEPTION		3140147		True				
ANR	3140457	CFGExceptionNode	EXCEPTION		3140147		True				
ANR	3140458	Symbol	* pNode -> pair		3140147						
ANR	3140459	Symbol	pRightSibling		3140147						
ANR	3140460	Symbol	root -> p		3140147						
ANR	3140461	Symbol	pNode -> nkeys		3140147						
ANR	3140462	Symbol	leftSibling		3140147						
ANR	3140463	Symbol	pNode -> child		3140147						
ANR	3140464	Symbol	root		3140147						
ANR	3140465	Symbol	pNode		3140147						
ANR	3140466	Symbol	NULL		3140147						
ANR	3140467	Symbol	pLeftSibling -> p		3140147						
ANR	3140468	Symbol	pLeftSibling		3140147						
ANR	3140469	Symbol	pLeftSibling -> nkeys		3140147						
ANR	3140470	Symbol	h		3140147						
ANR	3140471	Symbol	i		3140147						
ANR	3140472	Symbol	* pRightSibling		3140147						
ANR	3140473	Symbol	* pNode		3140147						
ANR	3140474	Symbol	pRightSibling -> nkeys		3140147						
ANR	3140475	Symbol	* pLeftSibling		3140147						
ANR	3140476	Symbol	pNode -> p		3140147						
ANR	3140477	Symbol	* h		3140147						
ANR	3140478	Symbol	rightSibling		3140147						
ANR	3140479	Symbol	t		3140147						
ANR	3140480	Symbol	pNode -> pair		3140147						
ANR	3140481	Symbol	* * pNode		3140147						
ANR	3140482	Symbol	* pNode -> child		3140147						
ANR	3140483	Symbol	* root		3140147						
ANR	3140484	Function	BTree :: remove	916:0:28342:29531							
ANR	3140485	FunctionDef	BTree :: remove (unsigned long key)		3140484	0					
ANR	3140486	CompoundStatement		917:0:28380:29531	3140484	0					
ANR	3140487	IdentifierDeclStatement	Btree_Node * pLeaf ;	918:1:28383:28400	3140484	0	True				
ANR	3140488	IdentifierDecl	* pLeaf		3140484	0					
ANR	3140489	IdentifierDeclType	Btree_Node *		3140484	0					
ANR	3140490	Identifier	pLeaf		3140484	1					
ANR	3140491	IdentifierDeclStatement	int idx ;	919:1:28403:28410	3140484	1	True				
ANR	3140492	IdentifierDecl	idx		3140484	0					
ANR	3140493	IdentifierDeclType	int		3140484	0					
ANR	3140494	Identifier	idx		3140484	1					
ANR	3140495	IdentifierDeclStatement	Btree_Node * pNode = NULL ;	922:1:28446:28468	3140484	2	True				
ANR	3140496	IdentifierDecl	* pNode = NULL		3140484	0					
ANR	3140497	IdentifierDeclType	Btree_Node *		3140484	0					
ANR	3140498	Identifier	pNode		3140484	1					
ANR	3140499	AssignmentExpression	* pNode = NULL		3140484	2		=			
ANR	3140500	Identifier	NULL		3140484	0					
ANR	3140501	Identifier	NULL		3140484	1					
ANR	3140502	ExpressionStatement	"searchKey ( key , & pNode , & idx )"	923:1:28471:28497	3140484	3	True				
ANR	3140503	CallExpression	"searchKey ( key , & pNode , & idx )"		3140484	0					
ANR	3140504	Callee	searchKey		3140484	0					
ANR	3140505	Identifier	searchKey		3140484	0					
ANR	3140506	ArgumentList	key		3140484	1					
ANR	3140507	Argument	key		3140484	0					
ANR	3140508	Identifier	key		3140484	0					
ANR	3140509	Argument	& pNode		3140484	1					
ANR	3140510	UnaryOperationExpression	& pNode		3140484	0					
ANR	3140511	UnaryOperator	&		3140484	0					
ANR	3140512	Identifier	pNode		3140484	1					
ANR	3140513	Argument	& idx		3140484	2					
ANR	3140514	UnaryOperationExpression	& idx		3140484	0					
ANR	3140515	UnaryOperator	&		3140484	0					
ANR	3140516	Identifier	idx		3140484	1					
ANR	3140517	IfStatement	if ( NULL == pNode )		3140484	4					
ANR	3140518	Condition	NULL == pNode	925:5:28505:28517	3140484	0	True				
ANR	3140519	EqualityExpression	NULL == pNode		3140484	0		==			
ANR	3140520	Identifier	NULL		3140484	0					
ANR	3140521	Identifier	pNode		3140484	1					
ANR	3140522	ReturnStatement	return false ;	927:2:28564:28576	3140484	1	True				
ANR	3140523	Identifier	false		3140484	0					
ANR	3140524	IfStatement	if ( NULL != ( pNode -> child ) [ 0 ] )		3140484	5					
ANR	3140525	Condition	NULL != ( pNode -> child ) [ 0 ]	937:5:29060:29084	3140484	0	True				
ANR	3140526	EqualityExpression	NULL != ( pNode -> child ) [ 0 ]		3140484	0		!=			
ANR	3140527	Identifier	NULL		3140484	0					
ANR	3140528	ArrayIndexing	( pNode -> child ) [ 0 ]		3140484	1					
ANR	3140529	PtrMemberAccess	pNode -> child		3140484	0					
ANR	3140530	Identifier	pNode		3140484	0					
ANR	3140531	Identifier	child		3140484	1					
ANR	3140532	PrimaryExpression	0		3140484	1					
ANR	3140533	CompoundStatement		21:33:707:707	3140484	1					
ANR	3140534	ExpressionStatement	pLeaf = ( pNode -> child ) [ idx + 1 ]	941:2:29202:29231	3140484	0	True				
ANR	3140535	AssignmentExpression	pLeaf = ( pNode -> child ) [ idx + 1 ]		3140484	0		=			
ANR	3140536	Identifier	pLeaf		3140484	0					
ANR	3140537	ArrayIndexing	( pNode -> child ) [ idx + 1 ]		3140484	1					
ANR	3140538	PtrMemberAccess	pNode -> child		3140484	0					
ANR	3140539	Identifier	pNode		3140484	0					
ANR	3140540	Identifier	child		3140484	1					
ANR	3140541	AdditiveExpression	idx + 1		3140484	1		+			
ANR	3140542	Identifier	idx		3140484	0					
ANR	3140543	PrimaryExpression	1		3140484	1					
ANR	3140544	WhileStatement	while ( NULL != ( pLeaf -> child ) [ 0 ] )		3140484	1					
ANR	3140545	Condition	NULL != ( pLeaf -> child ) [ 0 ]	942:9:29242:29266	3140484	0	True				
ANR	3140546	EqualityExpression	NULL != ( pLeaf -> child ) [ 0 ]		3140484	0		!=			
ANR	3140547	Identifier	NULL		3140484	0					
ANR	3140548	ArrayIndexing	( pLeaf -> child ) [ 0 ]		3140484	1					
ANR	3140549	PtrMemberAccess	pLeaf -> child		3140484	0					
ANR	3140550	Identifier	pLeaf		3140484	0					
ANR	3140551	Identifier	child		3140484	1					
ANR	3140552	PrimaryExpression	0		3140484	1					
ANR	3140553	ExpressionStatement	pLeaf = ( pLeaf -> child ) [ 0 ]	943:3:29273:29298	3140484	1	True				
ANR	3140554	AssignmentExpression	pLeaf = ( pLeaf -> child ) [ 0 ]		3140484	0		=			
ANR	3140555	Identifier	pLeaf		3140484	0					
ANR	3140556	ArrayIndexing	( pLeaf -> child ) [ 0 ]		3140484	1					
ANR	3140557	PtrMemberAccess	pLeaf -> child		3140484	0					
ANR	3140558	Identifier	pLeaf		3140484	0					
ANR	3140559	Identifier	child		3140484	1					
ANR	3140560	PrimaryExpression	0		3140484	1					
ANR	3140561	ExpressionStatement	( pNode -> pair ) [ idx ] = ( pLeaf -> pair ) [ 0 ]	944:2:29302:29339	3140484	2	True				
ANR	3140562	AssignmentExpression	( pNode -> pair ) [ idx ] = ( pLeaf -> pair ) [ 0 ]		3140484	0		=			
ANR	3140563	ArrayIndexing	( pNode -> pair ) [ idx ]		3140484	0					
ANR	3140564	PtrMemberAccess	pNode -> pair		3140484	0					
ANR	3140565	Identifier	pNode		3140484	0					
ANR	3140566	Identifier	pair		3140484	1					
ANR	3140567	Identifier	idx		3140484	1					
ANR	3140568	ArrayIndexing	( pLeaf -> pair ) [ 0 ]		3140484	1					
ANR	3140569	PtrMemberAccess	pLeaf -> pair		3140484	0					
ANR	3140570	Identifier	pLeaf		3140484	0					
ANR	3140571	Identifier	pair		3140484	1					
ANR	3140572	PrimaryExpression	0		3140484	1					
ANR	3140573	ExpressionStatement	pNode = pLeaf	947:2:29383:29396	3140484	3	True				
ANR	3140574	AssignmentExpression	pNode = pLeaf		3140484	0		=			
ANR	3140575	Identifier	pNode		3140484	0					
ANR	3140576	Identifier	pLeaf		3140484	1					
ANR	3140577	ExpressionStatement	idx = 0	948:2:29400:29407	3140484	4	True				
ANR	3140578	AssignmentExpression	idx = 0		3140484	0		=			
ANR	3140579	Identifier	idx		3140484	0					
ANR	3140580	PrimaryExpression	0		3140484	1					
ANR	3140581	ExpressionStatement		949:2:29411:29411	3140484	6	True				
ANR	3140582	ExpressionStatement	"removeAtLeaf ( pNode , idx )"	952:1:29491:29514	3140484	7	True				
ANR	3140583	CallExpression	"removeAtLeaf ( pNode , idx )"		3140484	0					
ANR	3140584	Callee	removeAtLeaf		3140484	0					
ANR	3140585	Identifier	removeAtLeaf		3140484	0					
ANR	3140586	ArgumentList	pNode		3140484	1					
ANR	3140587	Argument	pNode		3140484	0					
ANR	3140588	Identifier	pNode		3140484	0					
ANR	3140589	Argument	idx		3140484	1					
ANR	3140590	Identifier	idx		3140484	0					
ANR	3140591	ReturnStatement	return true ;	954:1:29518:29529	3140484	8	True				
ANR	3140592	Identifier	true		3140484	0					
ANR	3140593	ReturnType	bool		3140484	1					
ANR	3140594	Identifier	BTree :: remove		3140484	2					
ANR	3140595	ParameterList	unsigned long key		3140484	3					
ANR	3140596	Parameter	unsigned long key	916:19:28361:28377	3140484	0	True				
ANR	3140597	ParameterType	unsigned long		3140484	0					
ANR	3140598	Identifier	key		3140484	1					
ANR	3140599	CFGEntryNode	ENTRY		3140484		True				
ANR	3140600	CFGExitNode	EXIT		3140484		True				
ANR	3140601	Symbol	pLeaf		3140484						
ANR	3140602	Symbol	* pNode -> pair		3140484						
ANR	3140603	Symbol	NULL		3140484						
ANR	3140604	Symbol	& idx		3140484						
ANR	3140605	Symbol	false		3140484						
ANR	3140606	Symbol	* pNode		3140484						
ANR	3140607	Symbol	* * pLeaf		3140484						
ANR	3140608	Symbol	pLeaf -> child		3140484						
ANR	3140609	Symbol	& pNode		3140484						
ANR	3140610	Symbol	pLeaf -> pair		3140484						
ANR	3140611	Symbol	pNode -> child		3140484						
ANR	3140612	Symbol	pNode -> pair		3140484						
ANR	3140613	Symbol	* * pNode		3140484						
ANR	3140614	Symbol	* pLeaf		3140484						
ANR	3140615	Symbol	* idx		3140484						
ANR	3140616	Symbol	true		3140484						
ANR	3140617	Symbol	* pLeaf -> child		3140484						
ANR	3140618	Symbol	* pNode -> child		3140484						
ANR	3140619	Symbol	idx		3140484						
ANR	3140620	Symbol	* pLeaf -> pair		3140484						
ANR	3140621	Symbol	pNode		3140484						
ANR	3140622	Symbol	key		3140484						
ANR	3140623	Function	BTree :: searchMax	973:0:29837:30279							
ANR	3140624	FunctionDef	"BTree :: searchMax (Btree_Node * * ppNode , int * pIdx)"		3140623	0					
ANR	3140625	CompoundStatement		974:0:29897:30279	3140623	0					
ANR	3140626	IfStatement	if ( NULL == ppNode )		3140623	0					
ANR	3140627	Condition	NULL == ppNode	975:5:29904:29915	3140623	0	True				
ANR	3140628	EqualityExpression	NULL == ppNode		3140623	0		==			
ANR	3140629	Identifier	NULL		3140623	0					
ANR	3140630	Identifier	ppNode		3140623	1					
ANR	3140631	ThrowStatement	"throw ""BTree::searchMax, ppNode is NULL"" ;"	976:2:29921:29961	3140623	1	True				
ANR	3140632	PrimaryExpression	"""BTree::searchMax, ppNode is NULL"""		3140623	0					
ANR	3140633	IfStatement	if ( NULL == pIdx )		3140623	1					
ANR	3140634	Condition	NULL == pIdx	977:5:29968:29977	3140623	0	True				
ANR	3140635	EqualityExpression	NULL == pIdx		3140623	0		==			
ANR	3140636	Identifier	NULL		3140623	0					
ANR	3140637	Identifier	pIdx		3140623	1					
ANR	3140638	ThrowStatement	"throw ""BTree::searchMax, pIdx is NULL"" ;"	978:2:29982:30020	3140623	1	True				
ANR	3140639	PrimaryExpression	"""BTree::searchMax, pIdx is NULL"""		3140623	0					
ANR	3140640	IfStatement	if ( NULL == root )		3140623	2					
ANR	3140641	Condition	NULL == root	979:5:30027:30036	3140623	0	True				
ANR	3140642	EqualityExpression	NULL == root		3140623	0		==			
ANR	3140643	Identifier	NULL		3140623	0					
ANR	3140644	Identifier	root		3140623	1					
ANR	3140645	ThrowStatement	"throw ""BTree::searchMax, BTree is empty"" ;"	980:2:30042:30082	3140623	1	True				
ANR	3140646	PrimaryExpression	"""BTree::searchMax, BTree is empty"""		3140623	0					
ANR	3140647	IdentifierDeclStatement	Btree_Node * node ;	983:1:30119:30135	3140623	3	True				
ANR	3140648	IdentifierDecl	* node		3140623	0					
ANR	3140649	IdentifierDeclType	Btree_Node *		3140623	0					
ANR	3140650	Identifier	node		3140623	1					
ANR	3140651	ExpressionStatement	node = root	984:1:30138:30149	3140623	4	True				
ANR	3140652	AssignmentExpression	node = root		3140623	0		=			
ANR	3140653	Identifier	node		3140623	0					
ANR	3140654	Identifier	root		3140623	1					
ANR	3140655	WhileStatement	while ( NULL != ( node -> child ) [ node -> nkeys ] )		3140623	5					
ANR	3140656	Condition	NULL != ( node -> child ) [ node -> nkeys ]	985:8:30159:30192	3140623	0	True				
ANR	3140657	EqualityExpression	NULL != ( node -> child ) [ node -> nkeys ]		3140623	0		!=			
ANR	3140658	Identifier	NULL		3140623	0					
ANR	3140659	ArrayIndexing	( node -> child ) [ node -> nkeys ]		3140623	1					
ANR	3140660	PtrMemberAccess	node -> child		3140623	0					
ANR	3140661	Identifier	node		3140623	0					
ANR	3140662	Identifier	child		3140623	1					
ANR	3140663	PtrMemberAccess	node -> nkeys		3140623	1					
ANR	3140664	Identifier	node		3140623	0					
ANR	3140665	Identifier	nkeys		3140623	1					
ANR	3140666	ExpressionStatement	node = ( node -> child ) [ node -> nkeys ]	986:2:30198:30231	3140623	1	True				
ANR	3140667	AssignmentExpression	node = ( node -> child ) [ node -> nkeys ]		3140623	0		=			
ANR	3140668	Identifier	node		3140623	0					
ANR	3140669	ArrayIndexing	( node -> child ) [ node -> nkeys ]		3140623	1					
ANR	3140670	PtrMemberAccess	node -> child		3140623	0					
ANR	3140671	Identifier	node		3140623	0					
ANR	3140672	Identifier	child		3140623	1					
ANR	3140673	PtrMemberAccess	node -> nkeys		3140623	1					
ANR	3140674	Identifier	node		3140623	0					
ANR	3140675	Identifier	nkeys		3140623	1					
ANR	3140676	ExpressionStatement	* ppNode = node	988:1:30235:30249	3140623	6	True				
ANR	3140677	AssignmentExpression	* ppNode = node		3140623	0		=			
ANR	3140678	UnaryOperationExpression	* ppNode		3140623	0					
ANR	3140679	UnaryOperator	*		3140623	0					
ANR	3140680	Identifier	ppNode		3140623	1					
ANR	3140681	Identifier	node		3140623	1					
ANR	3140682	ExpressionStatement	* pIdx = ( node -> nkeys ) - 1	989:1:30252:30277	3140623	7	True				
ANR	3140683	AssignmentExpression	* pIdx = ( node -> nkeys ) - 1		3140623	0		=			
ANR	3140684	UnaryOperationExpression	* pIdx		3140623	0					
ANR	3140685	UnaryOperator	*		3140623	0					
ANR	3140686	Identifier	pIdx		3140623	1					
ANR	3140687	AdditiveExpression	( node -> nkeys ) - 1		3140623	1		-			
ANR	3140688	PtrMemberAccess	node -> nkeys		3140623	0					
ANR	3140689	Identifier	node		3140623	0					
ANR	3140690	Identifier	nkeys		3140623	1					
ANR	3140691	PrimaryExpression	1		3140623	1					
ANR	3140692	ReturnType	void		3140623	1					
ANR	3140693	Identifier	BTree :: searchMax		3140623	2					
ANR	3140694	ParameterList	"Btree_Node * * ppNode , int * pIdx"		3140623	3					
ANR	3140695	Parameter	Btree_Node * * ppNode	973:22:29859:29877	3140623	0	True				
ANR	3140696	ParameterType	Btree_Node * *		3140623	0					
ANR	3140697	Identifier	ppNode		3140623	1					
ANR	3140698	Parameter	int * pIdx	973:43:29880:29888	3140623	1	True				
ANR	3140699	ParameterType	int *		3140623	0					
ANR	3140700	Identifier	pIdx		3140623	1					
ANR	3140701	CFGEntryNode	ENTRY		3140623		True				
ANR	3140702	CFGExitNode	EXIT		3140623		True				
ANR	3140703	CFGExceptionNode	EXCEPTION		3140623		True				
ANR	3140704	CFGExceptionNode	EXCEPTION		3140623		True				
ANR	3140705	CFGExceptionNode	EXCEPTION		3140623		True				
ANR	3140706	CFGExceptionNode	EXCEPTION		3140623		True				
ANR	3140707	CFGExceptionNode	EXCEPTION		3140623		True				
ANR	3140708	Symbol	* pIdx		3140623						
ANR	3140709	Symbol	NULL		3140623						
ANR	3140710	Symbol	* node -> nkeys		3140623						
ANR	3140711	Symbol	* node -> child		3140623						
ANR	3140712	Symbol	ppNode		3140623						
ANR	3140713	Symbol	node -> child		3140623						
ANR	3140714	Symbol	node		3140623						
ANR	3140715	Symbol	node -> nkeys		3140623						
ANR	3140716	Symbol	* * node		3140623						
ANR	3140717	Symbol	root		3140623						
ANR	3140718	Symbol	pIdx		3140623						
ANR	3140719	Symbol	* node		3140623						
ANR	3140720	Symbol	* ppNode		3140623						
ANR	3140721	Function	BTree :: searchMin	1008:0:30585:30990							
ANR	3140722	FunctionDef	"BTree :: searchMin (Btree_Node * * ppNode , int * pIdx)"		3140721	0					
ANR	3140723	CompoundStatement		1009:0:30645:30990	3140721	0					
ANR	3140724	IfStatement	if ( NULL == ppNode )		3140721	0					
ANR	3140725	Condition	NULL == ppNode	1010:5:30652:30663	3140721	0	True				
ANR	3140726	EqualityExpression	NULL == ppNode		3140721	0		==			
ANR	3140727	Identifier	NULL		3140721	0					
ANR	3140728	Identifier	ppNode		3140721	1					
ANR	3140729	ThrowStatement	"throw ""BTree::searchMax, ppNode is NULL"" ;"	1011:2:30669:30709	3140721	1	True				
ANR	3140730	PrimaryExpression	"""BTree::searchMax, ppNode is NULL"""		3140721	0					
ANR	3140731	IfStatement	if ( NULL == pIdx )		3140721	1					
ANR	3140732	Condition	NULL == pIdx	1012:5:30716:30725	3140721	0	True				
ANR	3140733	EqualityExpression	NULL == pIdx		3140721	0		==			
ANR	3140734	Identifier	NULL		3140721	0					
ANR	3140735	Identifier	pIdx		3140721	1					
ANR	3140736	ThrowStatement	"throw ""BTree::searchMax, pIdx is NULL"" ;"	1013:2:30730:30768	3140721	1	True				
ANR	3140737	PrimaryExpression	"""BTree::searchMax, pIdx is NULL"""		3140721	0					
ANR	3140738	IfStatement	if ( NULL == root )		3140721	2					
ANR	3140739	Condition	NULL == root	1014:5:30775:30784	3140721	0	True				
ANR	3140740	EqualityExpression	NULL == root		3140721	0		==			
ANR	3140741	Identifier	NULL		3140721	0					
ANR	3140742	Identifier	root		3140721	1					
ANR	3140743	ThrowStatement	"throw ""BTree::searchMax, BTree is empty"" ;"	1015:2:30790:30830	3140721	1	True				
ANR	3140744	PrimaryExpression	"""BTree::searchMax, BTree is empty"""		3140721	0					
ANR	3140745	IdentifierDeclStatement	Btree_Node * node ;	1018:1:30866:30882	3140721	3	True				
ANR	3140746	IdentifierDecl	* node		3140721	0					
ANR	3140747	IdentifierDeclType	Btree_Node *		3140721	0					
ANR	3140748	Identifier	node		3140721	1					
ANR	3140749	ExpressionStatement	node = root	1019:1:30885:30896	3140721	4	True				
ANR	3140750	AssignmentExpression	node = root		3140721	0		=			
ANR	3140751	Identifier	node		3140721	0					
ANR	3140752	Identifier	root		3140721	1					
ANR	3140753	WhileStatement	while ( NULL != ( node -> child ) [ 0 ] )		3140721	5					
ANR	3140754	Condition	NULL != ( node -> child ) [ 0 ]	1020:8:30906:30929	3140721	0	True				
ANR	3140755	EqualityExpression	NULL != ( node -> child ) [ 0 ]		3140721	0		!=			
ANR	3140756	Identifier	NULL		3140721	0					
ANR	3140757	ArrayIndexing	( node -> child ) [ 0 ]		3140721	1					
ANR	3140758	PtrMemberAccess	node -> child		3140721	0					
ANR	3140759	Identifier	node		3140721	0					
ANR	3140760	Identifier	child		3140721	1					
ANR	3140761	PrimaryExpression	0		3140721	1					
ANR	3140762	ExpressionStatement	node = ( node -> child ) [ 0 ]	1021:2:30935:30958	3140721	1	True				
ANR	3140763	AssignmentExpression	node = ( node -> child ) [ 0 ]		3140721	0		=			
ANR	3140764	Identifier	node		3140721	0					
ANR	3140765	ArrayIndexing	( node -> child ) [ 0 ]		3140721	1					
ANR	3140766	PtrMemberAccess	node -> child		3140721	0					
ANR	3140767	Identifier	node		3140721	0					
ANR	3140768	Identifier	child		3140721	1					
ANR	3140769	PrimaryExpression	0		3140721	1					
ANR	3140770	ExpressionStatement	* ppNode = node	1023:1:30962:30976	3140721	6	True				
ANR	3140771	AssignmentExpression	* ppNode = node		3140721	0		=			
ANR	3140772	UnaryOperationExpression	* ppNode		3140721	0					
ANR	3140773	UnaryOperator	*		3140721	0					
ANR	3140774	Identifier	ppNode		3140721	1					
ANR	3140775	Identifier	node		3140721	1					
ANR	3140776	ExpressionStatement	* pIdx = 0	1024:1:30979:30988	3140721	7	True				
ANR	3140777	AssignmentExpression	* pIdx = 0		3140721	0		=			
ANR	3140778	UnaryOperationExpression	* pIdx		3140721	0					
ANR	3140779	UnaryOperator	*		3140721	0					
ANR	3140780	Identifier	pIdx		3140721	1					
ANR	3140781	PrimaryExpression	0		3140721	1					
ANR	3140782	ReturnType	void		3140721	1					
ANR	3140783	Identifier	BTree :: searchMin		3140721	2					
ANR	3140784	ParameterList	"Btree_Node * * ppNode , int * pIdx"		3140721	3					
ANR	3140785	Parameter	Btree_Node * * ppNode	1008:22:30607:30625	3140721	0	True				
ANR	3140786	ParameterType	Btree_Node * *		3140721	0					
ANR	3140787	Identifier	ppNode		3140721	1					
ANR	3140788	Parameter	int * pIdx	1008:43:30628:30636	3140721	1	True				
ANR	3140789	ParameterType	int *		3140721	0					
ANR	3140790	Identifier	pIdx		3140721	1					
ANR	3140791	CFGEntryNode	ENTRY		3140721		True				
ANR	3140792	CFGExitNode	EXIT		3140721		True				
ANR	3140793	CFGExceptionNode	EXCEPTION		3140721		True				
ANR	3140794	CFGExceptionNode	EXCEPTION		3140721		True				
ANR	3140795	CFGExceptionNode	EXCEPTION		3140721		True				
ANR	3140796	CFGExceptionNode	EXCEPTION		3140721		True				
ANR	3140797	CFGExceptionNode	EXCEPTION		3140721		True				
ANR	3140798	Symbol	node		3140721						
ANR	3140799	Symbol	* pIdx		3140721						
ANR	3140800	Symbol	NULL		3140721						
ANR	3140801	Symbol	* * node		3140721						
ANR	3140802	Symbol	root		3140721						
ANR	3140803	Symbol	pIdx		3140721						
ANR	3140804	Symbol	* node		3140721						
ANR	3140805	Symbol	* node -> child		3140721						
ANR	3140806	Symbol	ppNode		3140721						
ANR	3140807	Symbol	node -> child		3140721						
ANR	3140808	Symbol	* ppNode		3140721						
ANR	3140809	Function	BTree :: findMaxKey	1042:0:31209:31344							
ANR	3140810	FunctionDef	BTree :: findMaxKey ()		3140809	0					
ANR	3140811	CompoundStatement		1043:0:31253:31344	3140809	0					
ANR	3140812	IdentifierDeclStatement	Btree_Node * node = NULL ;	1044:1:31256:31277	3140809	0	True				
ANR	3140813	IdentifierDecl	* node = NULL		3140809	0					
ANR	3140814	IdentifierDeclType	Btree_Node *		3140809	0					
ANR	3140815	Identifier	node		3140809	1					
ANR	3140816	AssignmentExpression	* node = NULL		3140809	2		=			
ANR	3140817	Identifier	NULL		3140809	0					
ANR	3140818	Identifier	NULL		3140809	1					
ANR	3140819	IdentifierDeclStatement	int idx ;	1045:1:31280:31287	3140809	1	True				
ANR	3140820	IdentifierDecl	idx		3140809	0					
ANR	3140821	IdentifierDeclType	int		3140809	0					
ANR	3140822	Identifier	idx		3140809	1					
ANR	3140823	ExpressionStatement	"searchMax ( & node , & idx )"	1046:1:31290:31311	3140809	2	True				
ANR	3140824	CallExpression	"searchMax ( & node , & idx )"		3140809	0					
ANR	3140825	Callee	searchMax		3140809	0					
ANR	3140826	Identifier	searchMax		3140809	0					
ANR	3140827	ArgumentList	& node		3140809	1					
ANR	3140828	Argument	& node		3140809	0					
ANR	3140829	UnaryOperationExpression	& node		3140809	0					
ANR	3140830	UnaryOperator	&		3140809	0					
ANR	3140831	Identifier	node		3140809	1					
ANR	3140832	Argument	& idx		3140809	1					
ANR	3140833	UnaryOperationExpression	& idx		3140809	0					
ANR	3140834	UnaryOperator	&		3140809	0					
ANR	3140835	Identifier	idx		3140809	1					
ANR	3140836	ReturnStatement	return ( node -> pair ) [ idx ] . key ;	1047:1:31314:31342	3140809	3	True				
ANR	3140837	MemberAccess	( node -> pair ) [ idx ] . key		3140809	0					
ANR	3140838	ArrayIndexing	( node -> pair ) [ idx ]		3140809	0					
ANR	3140839	PtrMemberAccess	node -> pair		3140809	0					
ANR	3140840	Identifier	node		3140809	0					
ANR	3140841	Identifier	pair		3140809	1					
ANR	3140842	Identifier	idx		3140809	1					
ANR	3140843	Identifier	key		3140809	1					
ANR	3140844	ReturnType	unsigned long		3140809	1					
ANR	3140845	Identifier	BTree :: findMaxKey		3140809	2					
ANR	3140846	ParameterList			3140809	3					
ANR	3140847	CFGEntryNode	ENTRY		3140809		True				
ANR	3140848	CFGExitNode	EXIT		3140809		True				
ANR	3140849	Symbol	node		3140809						
ANR	3140850	Symbol	& node		3140809						
ANR	3140851	Symbol	NULL		3140809						
ANR	3140852	Symbol	& idx		3140809						
ANR	3140853	Symbol	* * node		3140809						
ANR	3140854	Symbol	* node -> pair		3140809						
ANR	3140855	Symbol	* idx		3140809						
ANR	3140856	Symbol	* node		3140809						
ANR	3140857	Symbol	node -> pair		3140809						
ANR	3140858	Symbol	idx		3140809						
ANR	3140859	Symbol	( node -> pair ) [ idx ] . key		3140809						
ANR	3140860	Function	BTree :: findMinKey	1065:0:31565:31700							
ANR	3140861	FunctionDef	BTree :: findMinKey ()		3140860	0					
ANR	3140862	CompoundStatement		1066:0:31609:31700	3140860	0					
ANR	3140863	IdentifierDeclStatement	Btree_Node * node = NULL ;	1067:1:31612:31633	3140860	0	True				
ANR	3140864	IdentifierDecl	* node = NULL		3140860	0					
ANR	3140865	IdentifierDeclType	Btree_Node *		3140860	0					
ANR	3140866	Identifier	node		3140860	1					
ANR	3140867	AssignmentExpression	* node = NULL		3140860	2		=			
ANR	3140868	Identifier	NULL		3140860	0					
ANR	3140869	Identifier	NULL		3140860	1					
ANR	3140870	IdentifierDeclStatement	int idx ;	1068:1:31636:31643	3140860	1	True				
ANR	3140871	IdentifierDecl	idx		3140860	0					
ANR	3140872	IdentifierDeclType	int		3140860	0					
ANR	3140873	Identifier	idx		3140860	1					
ANR	3140874	ExpressionStatement	"searchMin ( & node , & idx )"	1069:1:31646:31667	3140860	2	True				
ANR	3140875	CallExpression	"searchMin ( & node , & idx )"		3140860	0					
ANR	3140876	Callee	searchMin		3140860	0					
ANR	3140877	Identifier	searchMin		3140860	0					
ANR	3140878	ArgumentList	& node		3140860	1					
ANR	3140879	Argument	& node		3140860	0					
ANR	3140880	UnaryOperationExpression	& node		3140860	0					
ANR	3140881	UnaryOperator	&		3140860	0					
ANR	3140882	Identifier	node		3140860	1					
ANR	3140883	Argument	& idx		3140860	1					
ANR	3140884	UnaryOperationExpression	& idx		3140860	0					
ANR	3140885	UnaryOperator	&		3140860	0					
ANR	3140886	Identifier	idx		3140860	1					
ANR	3140887	ReturnStatement	return ( node -> pair ) [ idx ] . key ;	1070:1:31670:31698	3140860	3	True				
ANR	3140888	MemberAccess	( node -> pair ) [ idx ] . key		3140860	0					
ANR	3140889	ArrayIndexing	( node -> pair ) [ idx ]		3140860	0					
ANR	3140890	PtrMemberAccess	node -> pair		3140860	0					
ANR	3140891	Identifier	node		3140860	0					
ANR	3140892	Identifier	pair		3140860	1					
ANR	3140893	Identifier	idx		3140860	1					
ANR	3140894	Identifier	key		3140860	1					
ANR	3140895	ReturnType	unsigned long		3140860	1					
ANR	3140896	Identifier	BTree :: findMinKey		3140860	2					
ANR	3140897	ParameterList			3140860	3					
ANR	3140898	CFGEntryNode	ENTRY		3140860		True				
ANR	3140899	CFGExitNode	EXIT		3140860		True				
ANR	3140900	Symbol	node		3140860						
ANR	3140901	Symbol	& node		3140860						
ANR	3140902	Symbol	NULL		3140860						
ANR	3140903	Symbol	& idx		3140860						
ANR	3140904	Symbol	* * node		3140860						
ANR	3140905	Symbol	* node -> pair		3140860						
ANR	3140906	Symbol	* idx		3140860						
ANR	3140907	Symbol	* node		3140860						
ANR	3140908	Symbol	node -> pair		3140860						
ANR	3140909	Symbol	idx		3140860						
ANR	3140910	Symbol	( node -> pair ) [ idx ] . key		3140860						
ANR	3140911	Function	BTree :: findValForMaxKey	1089:0:31953:32094							
ANR	3140912	FunctionDef	BTree :: findValForMaxKey ()		3140911	0					
ANR	3140913	CompoundStatement		1090:0:32003:32094	3140911	0					
ANR	3140914	IdentifierDeclStatement	Btree_Node * node = NULL ;	1091:1:32006:32027	3140911	0	True				
ANR	3140915	IdentifierDecl	* node = NULL		3140911	0					
ANR	3140916	IdentifierDeclType	Btree_Node *		3140911	0					
ANR	3140917	Identifier	node		3140911	1					
ANR	3140918	AssignmentExpression	* node = NULL		3140911	2		=			
ANR	3140919	Identifier	NULL		3140911	0					
ANR	3140920	Identifier	NULL		3140911	1					
ANR	3140921	IdentifierDeclStatement	int idx ;	1092:1:32030:32037	3140911	1	True				
ANR	3140922	IdentifierDecl	idx		3140911	0					
ANR	3140923	IdentifierDeclType	int		3140911	0					
ANR	3140924	Identifier	idx		3140911	1					
ANR	3140925	ExpressionStatement	"searchMax ( & node , & idx )"	1093:1:32040:32061	3140911	2	True				
ANR	3140926	CallExpression	"searchMax ( & node , & idx )"		3140911	0					
ANR	3140927	Callee	searchMax		3140911	0					
ANR	3140928	Identifier	searchMax		3140911	0					
ANR	3140929	ArgumentList	& node		3140911	1					
ANR	3140930	Argument	& node		3140911	0					
ANR	3140931	UnaryOperationExpression	& node		3140911	0					
ANR	3140932	UnaryOperator	&		3140911	0					
ANR	3140933	Identifier	node		3140911	1					
ANR	3140934	Argument	& idx		3140911	1					
ANR	3140935	UnaryOperationExpression	& idx		3140911	0					
ANR	3140936	UnaryOperator	&		3140911	0					
ANR	3140937	Identifier	idx		3140911	1					
ANR	3140938	ReturnStatement	return ( node -> pair ) [ idx ] . val ;	1094:1:32064:32092	3140911	3	True				
ANR	3140939	MemberAccess	( node -> pair ) [ idx ] . val		3140911	0					
ANR	3140940	ArrayIndexing	( node -> pair ) [ idx ]		3140911	0					
ANR	3140941	PtrMemberAccess	node -> pair		3140911	0					
ANR	3140942	Identifier	node		3140911	0					
ANR	3140943	Identifier	pair		3140911	1					
ANR	3140944	Identifier	idx		3140911	1					
ANR	3140945	Identifier	val		3140911	1					
ANR	3140946	ReturnType	unsigned long		3140911	1					
ANR	3140947	Identifier	BTree :: findValForMaxKey		3140911	2					
ANR	3140948	ParameterList			3140911	3					
ANR	3140949	CFGEntryNode	ENTRY		3140911		True				
ANR	3140950	CFGExitNode	EXIT		3140911		True				
ANR	3140951	Symbol	node		3140911						
ANR	3140952	Symbol	& node		3140911						
ANR	3140953	Symbol	NULL		3140911						
ANR	3140954	Symbol	& idx		3140911						
ANR	3140955	Symbol	( node -> pair ) [ idx ] . val		3140911						
ANR	3140956	Symbol	* * node		3140911						
ANR	3140957	Symbol	* node -> pair		3140911						
ANR	3140958	Symbol	* idx		3140911						
ANR	3140959	Symbol	* node		3140911						
ANR	3140960	Symbol	node -> pair		3140911						
ANR	3140961	Symbol	idx		3140911						
ANR	3140962	Function	BTree :: findValForMinKey	1113:0:32349:32490							
ANR	3140963	FunctionDef	BTree :: findValForMinKey ()		3140962	0					
ANR	3140964	CompoundStatement		1114:0:32399:32490	3140962	0					
ANR	3140965	IdentifierDeclStatement	Btree_Node * node = NULL ;	1115:1:32402:32423	3140962	0	True				
ANR	3140966	IdentifierDecl	* node = NULL		3140962	0					
ANR	3140967	IdentifierDeclType	Btree_Node *		3140962	0					
ANR	3140968	Identifier	node		3140962	1					
ANR	3140969	AssignmentExpression	* node = NULL		3140962	2		=			
ANR	3140970	Identifier	NULL		3140962	0					
ANR	3140971	Identifier	NULL		3140962	1					
ANR	3140972	IdentifierDeclStatement	int idx ;	1116:1:32426:32433	3140962	1	True				
ANR	3140973	IdentifierDecl	idx		3140962	0					
ANR	3140974	IdentifierDeclType	int		3140962	0					
ANR	3140975	Identifier	idx		3140962	1					
ANR	3140976	ExpressionStatement	"searchMin ( & node , & idx )"	1117:1:32436:32457	3140962	2	True				
ANR	3140977	CallExpression	"searchMin ( & node , & idx )"		3140962	0					
ANR	3140978	Callee	searchMin		3140962	0					
ANR	3140979	Identifier	searchMin		3140962	0					
ANR	3140980	ArgumentList	& node		3140962	1					
ANR	3140981	Argument	& node		3140962	0					
ANR	3140982	UnaryOperationExpression	& node		3140962	0					
ANR	3140983	UnaryOperator	&		3140962	0					
ANR	3140984	Identifier	node		3140962	1					
ANR	3140985	Argument	& idx		3140962	1					
ANR	3140986	UnaryOperationExpression	& idx		3140962	0					
ANR	3140987	UnaryOperator	&		3140962	0					
ANR	3140988	Identifier	idx		3140962	1					
ANR	3140989	ReturnStatement	return ( node -> pair ) [ idx ] . val ;	1118:1:32460:32488	3140962	3	True				
ANR	3140990	MemberAccess	( node -> pair ) [ idx ] . val		3140962	0					
ANR	3140991	ArrayIndexing	( node -> pair ) [ idx ]		3140962	0					
ANR	3140992	PtrMemberAccess	node -> pair		3140962	0					
ANR	3140993	Identifier	node		3140962	0					
ANR	3140994	Identifier	pair		3140962	1					
ANR	3140995	Identifier	idx		3140962	1					
ANR	3140996	Identifier	val		3140962	1					
ANR	3140997	ReturnType	unsigned long		3140962	1					
ANR	3140998	Identifier	BTree :: findValForMinKey		3140962	2					
ANR	3140999	ParameterList			3140962	3					
ANR	3141000	CFGEntryNode	ENTRY		3140962		True				
ANR	3141001	CFGExitNode	EXIT		3140962		True				
ANR	3141002	Symbol	node		3140962						
ANR	3141003	Symbol	& node		3140962						
ANR	3141004	Symbol	NULL		3140962						
ANR	3141005	Symbol	& idx		3140962						
ANR	3141006	Symbol	* * node		3140962						
ANR	3141007	Symbol	( node -> pair ) [ idx ] . val		3140962						
ANR	3141008	Symbol	* node -> pair		3140962						
ANR	3141009	Symbol	* idx		3140962						
ANR	3141010	Symbol	* node		3140962						
ANR	3141011	Symbol	node -> pair		3140962						
ANR	3141012	Symbol	idx		3140962						
ANR	3141013	Function	BTree :: removeMax	1137:0:32732:32845							
ANR	3141014	FunctionDef	BTree :: removeMax ()		3141013	0					
ANR	3141015	CompoundStatement		1138:0:32760:32845	3141013	0					
ANR	3141016	IdentifierDeclStatement	Btree_Node * node = NULL ;	1139:1:32763:32784	3141013	0	True				
ANR	3141017	IdentifierDecl	* node = NULL		3141013	0					
ANR	3141018	IdentifierDeclType	Btree_Node *		3141013	0					
ANR	3141019	Identifier	node		3141013	1					
ANR	3141020	AssignmentExpression	* node = NULL		3141013	2		=			
ANR	3141021	Identifier	NULL		3141013	0					
ANR	3141022	Identifier	NULL		3141013	1					
ANR	3141023	IdentifierDeclStatement	int idx ;	1140:1:32787:32794	3141013	1	True				
ANR	3141024	IdentifierDecl	idx		3141013	0					
ANR	3141025	IdentifierDeclType	int		3141013	0					
ANR	3141026	Identifier	idx		3141013	1					
ANR	3141027	ExpressionStatement	"searchMax ( & node , & idx )"	1141:1:32797:32818	3141013	2	True				
ANR	3141028	CallExpression	"searchMax ( & node , & idx )"		3141013	0					
ANR	3141029	Callee	searchMax		3141013	0					
ANR	3141030	Identifier	searchMax		3141013	0					
ANR	3141031	ArgumentList	& node		3141013	1					
ANR	3141032	Argument	& node		3141013	0					
ANR	3141033	UnaryOperationExpression	& node		3141013	0					
ANR	3141034	UnaryOperator	&		3141013	0					
ANR	3141035	Identifier	node		3141013	1					
ANR	3141036	Argument	& idx		3141013	1					
ANR	3141037	UnaryOperationExpression	& idx		3141013	0					
ANR	3141038	UnaryOperator	&		3141013	0					
ANR	3141039	Identifier	idx		3141013	1					
ANR	3141040	ExpressionStatement	"removeAtLeaf ( node , idx )"	1142:1:32821:32843	3141013	3	True				
ANR	3141041	CallExpression	"removeAtLeaf ( node , idx )"		3141013	0					
ANR	3141042	Callee	removeAtLeaf		3141013	0					
ANR	3141043	Identifier	removeAtLeaf		3141013	0					
ANR	3141044	ArgumentList	node		3141013	1					
ANR	3141045	Argument	node		3141013	0					
ANR	3141046	Identifier	node		3141013	0					
ANR	3141047	Argument	idx		3141013	1					
ANR	3141048	Identifier	idx		3141013	0					
ANR	3141049	ReturnType	void		3141013	1					
ANR	3141050	Identifier	BTree :: removeMax		3141013	2					
ANR	3141051	ParameterList			3141013	3					
ANR	3141052	CFGEntryNode	ENTRY		3141013		True				
ANR	3141053	CFGExitNode	EXIT		3141013		True				
ANR	3141054	Symbol	node		3141013						
ANR	3141055	Symbol	& node		3141013						
ANR	3141056	Symbol	NULL		3141013						
ANR	3141057	Symbol	& idx		3141013						
ANR	3141058	Symbol	idx		3141013						
ANR	3141059	Function	BTree :: removeMin	1161:0:33088:33201							
ANR	3141060	FunctionDef	BTree :: removeMin ()		3141059	0					
ANR	3141061	CompoundStatement		1162:0:33116:33201	3141059	0					
ANR	3141062	IdentifierDeclStatement	Btree_Node * node = NULL ;	1163:1:33119:33140	3141059	0	True				
ANR	3141063	IdentifierDecl	* node = NULL		3141059	0					
ANR	3141064	IdentifierDeclType	Btree_Node *		3141059	0					
ANR	3141065	Identifier	node		3141059	1					
ANR	3141066	AssignmentExpression	* node = NULL		3141059	2		=			
ANR	3141067	Identifier	NULL		3141059	0					
ANR	3141068	Identifier	NULL		3141059	1					
ANR	3141069	IdentifierDeclStatement	int idx ;	1164:1:33143:33150	3141059	1	True				
ANR	3141070	IdentifierDecl	idx		3141059	0					
ANR	3141071	IdentifierDeclType	int		3141059	0					
ANR	3141072	Identifier	idx		3141059	1					
ANR	3141073	ExpressionStatement	"searchMin ( & node , & idx )"	1165:1:33153:33174	3141059	2	True				
ANR	3141074	CallExpression	"searchMin ( & node , & idx )"		3141059	0					
ANR	3141075	Callee	searchMin		3141059	0					
ANR	3141076	Identifier	searchMin		3141059	0					
ANR	3141077	ArgumentList	& node		3141059	1					
ANR	3141078	Argument	& node		3141059	0					
ANR	3141079	UnaryOperationExpression	& node		3141059	0					
ANR	3141080	UnaryOperator	&		3141059	0					
ANR	3141081	Identifier	node		3141059	1					
ANR	3141082	Argument	& idx		3141059	1					
ANR	3141083	UnaryOperationExpression	& idx		3141059	0					
ANR	3141084	UnaryOperator	&		3141059	0					
ANR	3141085	Identifier	idx		3141059	1					
ANR	3141086	ExpressionStatement	"removeAtLeaf ( node , idx )"	1166:1:33177:33199	3141059	3	True				
ANR	3141087	CallExpression	"removeAtLeaf ( node , idx )"		3141059	0					
ANR	3141088	Callee	removeAtLeaf		3141059	0					
ANR	3141089	Identifier	removeAtLeaf		3141059	0					
ANR	3141090	ArgumentList	node		3141059	1					
ANR	3141091	Argument	node		3141059	0					
ANR	3141092	Identifier	node		3141059	0					
ANR	3141093	Argument	idx		3141059	1					
ANR	3141094	Identifier	idx		3141059	0					
ANR	3141095	ReturnType	void		3141059	1					
ANR	3141096	Identifier	BTree :: removeMin		3141059	2					
ANR	3141097	ParameterList			3141059	3					
ANR	3141098	CFGEntryNode	ENTRY		3141059		True				
ANR	3141099	CFGExitNode	EXIT		3141059		True				
ANR	3141100	Symbol	node		3141059						
ANR	3141101	Symbol	& node		3141059						
ANR	3141102	Symbol	NULL		3141059						
ANR	3141103	Symbol	& idx		3141059						
ANR	3141104	Symbol	idx		3141059						
ANR	3141105	Function	BTree :: printInd	1184:0:33413:33739							
ANR	3141106	FunctionDef	"BTree :: printInd (Btree_Node * pNode , int iTab)"		3141105	0					
ANR	3141107	CompoundStatement		1185:0:33469:33739	3141105	0					
ANR	3141108	IfStatement	if ( NULL != pNode )		3141105	0					
ANR	3141109	Condition	NULL != pNode	1186:5:33476:33486	3141105	0	True				
ANR	3141110	EqualityExpression	NULL != pNode		3141105	0		!=			
ANR	3141111	Identifier	NULL		3141105	0					
ANR	3141112	Identifier	pNode		3141105	1					
ANR	3141113	CompoundStatement		2:19:20:20	3141105	1					
ANR	3141114	ForStatement	for ( int j = pNode -> nkeys ; j > 0 ; j -- )		3141105	0					
ANR	3141115	ForInit	int j = pNode -> nkeys ;	1187:6:33498:33516	3141105	0	True				
ANR	3141116	IdentifierDeclStatement	int j = pNode -> nkeys ;		3141105	0					
ANR	3141117	IdentifierDecl	j = pNode -> nkeys		3141105	0					
ANR	3141118	IdentifierDeclType	int		3141105	0					
ANR	3141119	Identifier	j		3141105	1					
ANR	3141120	AssignmentExpression	j = pNode -> nkeys		3141105	2		=			
ANR	3141121	Identifier	j		3141105	0					
ANR	3141122	PtrMemberAccess	pNode -> nkeys		3141105	1					
ANR	3141123	Identifier	pNode		3141105	0					
ANR	3141124	Identifier	nkeys		3141105	1					
ANR	3141125	Condition	j > 0	1187:26:33518:33520	3141105	1	True				
ANR	3141126	RelationalExpression	j > 0		3141105	0		>			
ANR	3141127	Identifier	j		3141105	0					
ANR	3141128	PrimaryExpression	0		3141105	1					
ANR	3141129	PostIncDecOperationExpression	j --	1187:31:33523:33525	3141105	2	True				
ANR	3141130	Identifier	j		3141105	0					
ANR	3141131	IncDec	--		3141105	1					
ANR	3141132	CompoundStatement		3:37:59:59	3141105	3					
ANR	3141133	ExpressionStatement	"printInd ( ( pNode -> child ) [ j ] , iTab + 3 )"	1188:3:33534:33569	3141105	0	True				
ANR	3141134	CallExpression	"printInd ( ( pNode -> child ) [ j ] , iTab + 3 )"		3141105	0					
ANR	3141135	Callee	printInd		3141105	0					
ANR	3141136	Identifier	printInd		3141105	0					
ANR	3141137	ArgumentList	( pNode -> child ) [ j ]		3141105	1					
ANR	3141138	Argument	( pNode -> child ) [ j ]		3141105	0					
ANR	3141139	ArrayIndexing	( pNode -> child ) [ j ]		3141105	0					
ANR	3141140	PtrMemberAccess	pNode -> child		3141105	0					
ANR	3141141	Identifier	pNode		3141105	0					
ANR	3141142	Identifier	child		3141105	1					
ANR	3141143	Identifier	j		3141105	1					
ANR	3141144	Argument	iTab + 3		3141105	1					
ANR	3141145	AdditiveExpression	iTab + 3		3141105	0		+			
ANR	3141146	Identifier	iTab		3141105	0					
ANR	3141147	PrimaryExpression	3		3141105	1					
ANR	3141148	ForStatement	for ( int i = 0 ; i < iTab ; i ++ )		3141105	1					
ANR	3141149	ForInit	int i = 0 ;	1189:7:33578:33585	3141105	0	True				
ANR	3141150	IdentifierDeclStatement	int i = 0 ;		3141105	0					
ANR	3141151	IdentifierDecl	i = 0		3141105	0					
ANR	3141152	IdentifierDeclType	int		3141105	0					
ANR	3141153	Identifier	i		3141105	1					
ANR	3141154	AssignmentExpression	i = 0		3141105	2		=			
ANR	3141155	Identifier	i		3141105	0					
ANR	3141156	PrimaryExpression	0		3141105	1					
ANR	3141157	Condition	i < iTab	1189:15:33586:33591	3141105	1	True				
ANR	3141158	RelationalExpression	i < iTab		3141105	0		<			
ANR	3141159	Identifier	i		3141105	0					
ANR	3141160	Identifier	iTab		3141105	1					
ANR	3141161	PostIncDecOperationExpression	i ++	1189:22:33593:33595	3141105	2	True				
ANR	3141162	Identifier	i		3141105	0					
ANR	3141163	IncDec	++		3141105	1					
ANR	3141164	ExpressionStatement	"printf ( "" "" )"	1189:27:33598:33609	3141105	3	True				
ANR	3141165	CallExpression	"printf ( "" "" )"		3141105	0					
ANR	3141166	Callee	printf		3141105	0					
ANR	3141167	Identifier	printf		3141105	0					
ANR	3141168	ArgumentList	""" """		3141105	1					
ANR	3141169	Argument	""" """		3141105	0					
ANR	3141170	PrimaryExpression	""" """		3141105	0					
ANR	3141171	ExpressionStatement	"printf ( ""key %d, val %d \\n"" , ( pNode -> pair ) [ j - 1 ] . key , ( pNode -> pair ) [ j - 1 ] . val )"	1190:3:33614:33689	3141105	2	True				
ANR	3141172	CallExpression	"printf ( ""key %d, val %d \\n"" , ( pNode -> pair ) [ j - 1 ] . key , ( pNode -> pair ) [ j - 1 ] . val )"		3141105	0					
ANR	3141173	Callee	printf		3141105	0					
ANR	3141174	Identifier	printf		3141105	0					
ANR	3141175	ArgumentList	"""key %d, val %d \\n"""		3141105	1					
ANR	3141176	Argument	"""key %d, val %d \\n"""		3141105	0					
ANR	3141177	PrimaryExpression	"""key %d, val %d \\n"""		3141105	0					
ANR	3141178	Argument	( pNode -> pair ) [ j - 1 ] . key		3141105	1					
ANR	3141179	MemberAccess	( pNode -> pair ) [ j - 1 ] . key		3141105	0					
ANR	3141180	ArrayIndexing	( pNode -> pair ) [ j - 1 ]		3141105	0					
ANR	3141181	PtrMemberAccess	pNode -> pair		3141105	0					
ANR	3141182	Identifier	pNode		3141105	0					
ANR	3141183	Identifier	pair		3141105	1					
ANR	3141184	AdditiveExpression	j - 1		3141105	1		-			
ANR	3141185	Identifier	j		3141105	0					
ANR	3141186	PrimaryExpression	1		3141105	1					
ANR	3141187	Identifier	key		3141105	1					
ANR	3141188	Argument	( pNode -> pair ) [ j - 1 ] . val		3141105	2					
ANR	3141189	MemberAccess	( pNode -> pair ) [ j - 1 ] . val		3141105	0					
ANR	3141190	ArrayIndexing	( pNode -> pair ) [ j - 1 ]		3141105	0					
ANR	3141191	PtrMemberAccess	pNode -> pair		3141105	0					
ANR	3141192	Identifier	pNode		3141105	0					
ANR	3141193	Identifier	pair		3141105	1					
ANR	3141194	AdditiveExpression	j - 1		3141105	1		-			
ANR	3141195	Identifier	j		3141105	0					
ANR	3141196	PrimaryExpression	1		3141105	1					
ANR	3141197	Identifier	val		3141105	1					
ANR	3141198	ExpressionStatement		1191:3:33694:33694	3141105	1	True				
ANR	3141199	ExpressionStatement	"printInd ( ( pNode -> child ) [ 0 ] , iTab + 3 )"	1192:2:33698:33733	3141105	2	True				
ANR	3141200	CallExpression	"printInd ( ( pNode -> child ) [ 0 ] , iTab + 3 )"		3141105	0					
ANR	3141201	Callee	printInd		3141105	0					
ANR	3141202	Identifier	printInd		3141105	0					
ANR	3141203	ArgumentList	( pNode -> child ) [ 0 ]		3141105	1					
ANR	3141204	Argument	( pNode -> child ) [ 0 ]		3141105	0					
ANR	3141205	ArrayIndexing	( pNode -> child ) [ 0 ]		3141105	0					
ANR	3141206	PtrMemberAccess	pNode -> child		3141105	0					
ANR	3141207	Identifier	pNode		3141105	0					
ANR	3141208	Identifier	child		3141105	1					
ANR	3141209	PrimaryExpression	0		3141105	1					
ANR	3141210	Argument	iTab + 3		3141105	1					
ANR	3141211	AdditiveExpression	iTab + 3		3141105	0		+			
ANR	3141212	Identifier	iTab		3141105	0					
ANR	3141213	PrimaryExpression	3		3141105	1					
ANR	3141214	ExpressionStatement		1193:2:33737:33737	3141105	1	True				
ANR	3141215	ReturnType	void		3141105	1					
ANR	3141216	Identifier	BTree :: printInd		3141105	2					
ANR	3141217	ParameterList	"Btree_Node * pNode , int iTab"		3141105	3					
ANR	3141218	Parameter	Btree_Node * pNode	1184:21:33434:33450	3141105	0	True				
ANR	3141219	ParameterType	Btree_Node *		3141105	0					
ANR	3141220	Identifier	pNode		3141105	1					
ANR	3141221	Parameter	int iTab	1184:40:33453:33460	3141105	1	True				
ANR	3141222	ParameterType	int		3141105	0					
ANR	3141223	Identifier	iTab		3141105	1					
ANR	3141224	CFGEntryNode	ENTRY		3141105		True				
ANR	3141225	CFGExitNode	EXIT		3141105		True				
ANR	3141226	Symbol	( pNode -> pair ) [ j - 1 ] . key		3141105						
ANR	3141227	Symbol	* pNode -> pair		3141105						
ANR	3141228	Symbol	NULL		3141105						
ANR	3141229	Symbol	( pNode -> pair ) [ j - 1 ] . val		3141105						
ANR	3141230	Symbol	i		3141105						
ANR	3141231	Symbol	j		3141105						
ANR	3141232	Symbol	pNode -> nkeys		3141105						
ANR	3141233	Symbol	* pNode		3141105						
ANR	3141234	Symbol	* j		3141105						
ANR	3141235	Symbol	pNode -> child		3141105						
ANR	3141236	Symbol	pNode -> pair		3141105						
ANR	3141237	Symbol	* * pNode		3141105						
ANR	3141238	Symbol	* pNode -> child		3141105						
ANR	3141239	Symbol	pNode		3141105						
ANR	3141240	Symbol	iTab		3141105						
ANR	3141241	Function	BTree :: print	1210:0:33870:34007							
ANR	3141242	FunctionDef	BTree :: print ()		3141241	0					
ANR	3141243	CompoundStatement		1211:0:33900:34007	3141241	0					
ANR	3141244	ExpressionStatement	"printf ( ""-----------------------\\n"" )"	1212:1:33903:33938	3141241	0	True				
ANR	3141245	CallExpression	"printf ( ""-----------------------\\n"" )"		3141241	0					
ANR	3141246	Callee	printf		3141241	0					
ANR	3141247	Identifier	printf		3141241	0					
ANR	3141248	ArgumentList	"""-----------------------\\n"""		3141241	1					
ANR	3141249	Argument	"""-----------------------\\n"""		3141241	0					
ANR	3141250	PrimaryExpression	"""-----------------------\\n"""		3141241	0					
ANR	3141251	IfStatement	if ( NULL == root )		3141241	1					
ANR	3141252	Condition	NULL == root	1213:5:33945:33956	3141241	0	True				
ANR	3141253	EqualityExpression	NULL == root		3141241	0		==			
ANR	3141254	Identifier	NULL		3141241	0					
ANR	3141255	Identifier	root		3141241	1					
ANR	3141256	ExpressionStatement	"printf ( ""empty\\n"" )"	1214:2:33962:33979	3141241	1	True				
ANR	3141257	CallExpression	"printf ( ""empty\\n"" )"		3141241	0					
ANR	3141258	Callee	printf		3141241	0					
ANR	3141259	Identifier	printf		3141241	0					
ANR	3141260	ArgumentList	"""empty\\n"""		3141241	1					
ANR	3141261	Argument	"""empty\\n"""		3141241	0					
ANR	3141262	PrimaryExpression	"""empty\\n"""		3141241	0					
ANR	3141263	ElseStatement	else		3141241	0					
ANR	3141264	ExpressionStatement	"printInd ( root , 0 )"	1216:2:33989:34005	3141241	0	True				
ANR	3141265	CallExpression	"printInd ( root , 0 )"		3141241	0					
ANR	3141266	Callee	printInd		3141241	0					
ANR	3141267	Identifier	printInd		3141241	0					
ANR	3141268	ArgumentList	root		3141241	1					
ANR	3141269	Argument	root		3141241	0					
ANR	3141270	Identifier	root		3141241	0					
ANR	3141271	Argument	0		3141241	1					
ANR	3141272	PrimaryExpression	0		3141241	0					
ANR	3141273	ReturnType	void		3141241	1					
ANR	3141274	Identifier	BTree :: print		3141241	2					
ANR	3141275	ParameterList			3141241	3					
ANR	3141276	CFGEntryNode	ENTRY		3141241		True				
ANR	3141277	CFGExitNode	EXIT		3141241		True				
ANR	3141278	Symbol	NULL		3141241						
ANR	3141279	Symbol	root		3141241						
ANR	3141280	Function	Btree_test	1233:0:34155:35659							
ANR	3141281	FunctionDef	Btree_test ()		3141280	0					
ANR	3141282	CompoundStatement		1234:0:34177:35659	3141280	0					
ANR	3141283	IdentifierDeclStatement	BTree * bt ;	1235:1:34180:34190	3141280	0	True				
ANR	3141284	IdentifierDecl	* bt		3141280	0					
ANR	3141285	IdentifierDeclType	BTree *		3141280	0					
ANR	3141286	Identifier	bt		3141280	1					
ANR	3141287	ExpressionStatement	bt = new BTree ( )	1237:1:34194:34210	3141280	1	True				
ANR	3141288	AssignmentExpression	bt = new BTree ( )		3141280	0		=			
ANR	3141289	Identifier	bt		3141280	0					
ANR	3141290	UnaryExpression	new BTree ( )		3141280	1					
ANR	3141291	IfStatement	if ( NULL == bt )		3141280	2					
ANR	3141292	Condition	NULL == bt	1238:5:34217:34224	3141280	0	True				
ANR	3141293	EqualityExpression	NULL == bt		3141280	0		==			
ANR	3141294	Identifier	NULL		3141280	0					
ANR	3141295	Identifier	bt		3141280	1					
ANR	3141296	ThrowStatement	"throw ""Btree_test, 1"" ;"	1239:2:34230:34251	3141280	1	True				
ANR	3141297	PrimaryExpression	"""Btree_test, 1"""		3141280	0					
ANR	3141298	ExpressionStatement	bt -> print ( )	1241:1:34255:34266	3141280	3	True				
ANR	3141299	CallExpression	bt -> print ( )		3141280	0					
ANR	3141300	Callee	bt -> print		3141280	0					
ANR	3141301	PtrMemberAccess	bt -> print		3141280	0					
ANR	3141302	Identifier	bt		3141280	0					
ANR	3141303	Identifier	print		3141280	1					
ANR	3141304	ArgumentList			3141280	1					
ANR	3141305	IfStatement	if ( false == bt -> isEmpty ( ) )		3141280	4					
ANR	3141306	Condition	false == bt -> isEmpty ( )	1242:5:34273:34294	3141280	0	True				
ANR	3141307	EqualityExpression	false == bt -> isEmpty ( )		3141280	0		==			
ANR	3141308	Identifier	false		3141280	0					
ANR	3141309	CallExpression	bt -> isEmpty ( )		3141280	1					
ANR	3141310	Callee	bt -> isEmpty		3141280	0					
ANR	3141311	PtrMemberAccess	bt -> isEmpty		3141280	0					
ANR	3141312	Identifier	bt		3141280	0					
ANR	3141313	Identifier	isEmpty		3141280	1					
ANR	3141314	ArgumentList			3141280	1					
ANR	3141315	ThrowStatement	"throw ""Btree_test, 2"" ;"	1243:2:34300:34321	3141280	1	True				
ANR	3141316	PrimaryExpression	"""Btree_test, 2"""		3141280	0					
ANR	3141317	ExpressionStatement	"bt -> insert ( 10 , 1 )"	1244:1:34324:34340	3141280	5	True				
ANR	3141318	CallExpression	"bt -> insert ( 10 , 1 )"		3141280	0					
ANR	3141319	Callee	bt -> insert		3141280	0					
ANR	3141320	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141321	Identifier	bt		3141280	0					
ANR	3141322	Identifier	insert		3141280	1					
ANR	3141323	ArgumentList	10		3141280	1					
ANR	3141324	Argument	10		3141280	0					
ANR	3141325	PrimaryExpression	10		3141280	0					
ANR	3141326	Argument	1		3141280	1					
ANR	3141327	PrimaryExpression	1		3141280	0					
ANR	3141328	IfStatement	if ( true == bt -> isEmpty ( ) )		3141280	6					
ANR	3141329	Condition	true == bt -> isEmpty ( )	1245:5:34347:34367	3141280	0	True				
ANR	3141330	EqualityExpression	true == bt -> isEmpty ( )		3141280	0		==			
ANR	3141331	Identifier	true		3141280	0					
ANR	3141332	CallExpression	bt -> isEmpty ( )		3141280	1					
ANR	3141333	Callee	bt -> isEmpty		3141280	0					
ANR	3141334	PtrMemberAccess	bt -> isEmpty		3141280	0					
ANR	3141335	Identifier	bt		3141280	0					
ANR	3141336	Identifier	isEmpty		3141280	1					
ANR	3141337	ArgumentList			3141280	1					
ANR	3141338	ThrowStatement	"throw ""Btree_test, 3"" ;"	1246:2:34373:34394	3141280	1	True				
ANR	3141339	PrimaryExpression	"""Btree_test, 3"""		3141280	0					
ANR	3141340	ExpressionStatement	"bt -> insert ( 10 , 2 )"	1247:1:34397:34413	3141280	7	True				
ANR	3141341	CallExpression	"bt -> insert ( 10 , 2 )"		3141280	0					
ANR	3141342	Callee	bt -> insert		3141280	0					
ANR	3141343	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141344	Identifier	bt		3141280	0					
ANR	3141345	Identifier	insert		3141280	1					
ANR	3141346	ArgumentList	10		3141280	1					
ANR	3141347	Argument	10		3141280	0					
ANR	3141348	PrimaryExpression	10		3141280	0					
ANR	3141349	Argument	2		3141280	1					
ANR	3141350	PrimaryExpression	2		3141280	0					
ANR	3141351	ExpressionStatement	"bt -> insert ( 11 , 3 )"	1248:1:34416:34432	3141280	8	True				
ANR	3141352	CallExpression	"bt -> insert ( 11 , 3 )"		3141280	0					
ANR	3141353	Callee	bt -> insert		3141280	0					
ANR	3141354	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141355	Identifier	bt		3141280	0					
ANR	3141356	Identifier	insert		3141280	1					
ANR	3141357	ArgumentList	11		3141280	1					
ANR	3141358	Argument	11		3141280	0					
ANR	3141359	PrimaryExpression	11		3141280	0					
ANR	3141360	Argument	3		3141280	1					
ANR	3141361	PrimaryExpression	3		3141280	0					
ANR	3141362	ExpressionStatement	"bt -> insert ( 7 , 4 )"	1249:1:34435:34450	3141280	9	True				
ANR	3141363	CallExpression	"bt -> insert ( 7 , 4 )"		3141280	0					
ANR	3141364	Callee	bt -> insert		3141280	0					
ANR	3141365	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141366	Identifier	bt		3141280	0					
ANR	3141367	Identifier	insert		3141280	1					
ANR	3141368	ArgumentList	7		3141280	1					
ANR	3141369	Argument	7		3141280	0					
ANR	3141370	PrimaryExpression	7		3141280	0					
ANR	3141371	Argument	4		3141280	1					
ANR	3141372	PrimaryExpression	4		3141280	0					
ANR	3141373	ExpressionStatement	"bt -> insert ( 9 , 5 )"	1250:1:34453:34468	3141280	10	True				
ANR	3141374	CallExpression	"bt -> insert ( 9 , 5 )"		3141280	0					
ANR	3141375	Callee	bt -> insert		3141280	0					
ANR	3141376	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141377	Identifier	bt		3141280	0					
ANR	3141378	Identifier	insert		3141280	1					
ANR	3141379	ArgumentList	9		3141280	1					
ANR	3141380	Argument	9		3141280	0					
ANR	3141381	PrimaryExpression	9		3141280	0					
ANR	3141382	Argument	5		3141280	1					
ANR	3141383	PrimaryExpression	5		3141280	0					
ANR	3141384	ExpressionStatement	"bt -> insert ( 2 , 6 )"	1251:1:34471:34486	3141280	11	True				
ANR	3141385	CallExpression	"bt -> insert ( 2 , 6 )"		3141280	0					
ANR	3141386	Callee	bt -> insert		3141280	0					
ANR	3141387	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141388	Identifier	bt		3141280	0					
ANR	3141389	Identifier	insert		3141280	1					
ANR	3141390	ArgumentList	2		3141280	1					
ANR	3141391	Argument	2		3141280	0					
ANR	3141392	PrimaryExpression	2		3141280	0					
ANR	3141393	Argument	6		3141280	1					
ANR	3141394	PrimaryExpression	6		3141280	0					
ANR	3141395	ExpressionStatement	"bt -> insert ( 5 , 7 )"	1252:1:34489:34504	3141280	12	True				
ANR	3141396	CallExpression	"bt -> insert ( 5 , 7 )"		3141280	0					
ANR	3141397	Callee	bt -> insert		3141280	0					
ANR	3141398	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141399	Identifier	bt		3141280	0					
ANR	3141400	Identifier	insert		3141280	1					
ANR	3141401	ArgumentList	5		3141280	1					
ANR	3141402	Argument	5		3141280	0					
ANR	3141403	PrimaryExpression	5		3141280	0					
ANR	3141404	Argument	7		3141280	1					
ANR	3141405	PrimaryExpression	7		3141280	0					
ANR	3141406	ExpressionStatement	bt -> print ( )	1253:1:34507:34518	3141280	13	True				
ANR	3141407	CallExpression	bt -> print ( )		3141280	0					
ANR	3141408	Callee	bt -> print		3141280	0					
ANR	3141409	PtrMemberAccess	bt -> print		3141280	0					
ANR	3141410	Identifier	bt		3141280	0					
ANR	3141411	Identifier	print		3141280	1					
ANR	3141412	ArgumentList			3141280	1					
ANR	3141413	ExpressionStatement	"bt -> insert ( 0 , 8 )"	1254:1:34521:34536	3141280	14	True				
ANR	3141414	CallExpression	"bt -> insert ( 0 , 8 )"		3141280	0					
ANR	3141415	Callee	bt -> insert		3141280	0					
ANR	3141416	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141417	Identifier	bt		3141280	0					
ANR	3141418	Identifier	insert		3141280	1					
ANR	3141419	ArgumentList	0		3141280	1					
ANR	3141420	Argument	0		3141280	0					
ANR	3141421	PrimaryExpression	0		3141280	0					
ANR	3141422	Argument	8		3141280	1					
ANR	3141423	PrimaryExpression	8		3141280	0					
ANR	3141424	ExpressionStatement	bt -> print ( )	1255:1:34539:34550	3141280	15	True				
ANR	3141425	CallExpression	bt -> print ( )		3141280	0					
ANR	3141426	Callee	bt -> print		3141280	0					
ANR	3141427	PtrMemberAccess	bt -> print		3141280	0					
ANR	3141428	Identifier	bt		3141280	0					
ANR	3141429	Identifier	print		3141280	1					
ANR	3141430	ArgumentList			3141280	1					
ANR	3141431	ExpressionStatement	"bt -> insert ( 1 , 9 )"	1256:1:34553:34568	3141280	16	True				
ANR	3141432	CallExpression	"bt -> insert ( 1 , 9 )"		3141280	0					
ANR	3141433	Callee	bt -> insert		3141280	0					
ANR	3141434	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141435	Identifier	bt		3141280	0					
ANR	3141436	Identifier	insert		3141280	1					
ANR	3141437	ArgumentList	1		3141280	1					
ANR	3141438	Argument	1		3141280	0					
ANR	3141439	PrimaryExpression	1		3141280	0					
ANR	3141440	Argument	9		3141280	1					
ANR	3141441	PrimaryExpression	9		3141280	0					
ANR	3141442	ExpressionStatement	bt -> print ( )	1257:1:34571:34582	3141280	17	True				
ANR	3141443	CallExpression	bt -> print ( )		3141280	0					
ANR	3141444	Callee	bt -> print		3141280	0					
ANR	3141445	PtrMemberAccess	bt -> print		3141280	0					
ANR	3141446	Identifier	bt		3141280	0					
ANR	3141447	Identifier	print		3141280	1					
ANR	3141448	ArgumentList			3141280	1					
ANR	3141449	ExpressionStatement	"bt -> insert ( 3 , 10 )"	1258:1:34585:34601	3141280	18	True				
ANR	3141450	CallExpression	"bt -> insert ( 3 , 10 )"		3141280	0					
ANR	3141451	Callee	bt -> insert		3141280	0					
ANR	3141452	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141453	Identifier	bt		3141280	0					
ANR	3141454	Identifier	insert		3141280	1					
ANR	3141455	ArgumentList	3		3141280	1					
ANR	3141456	Argument	3		3141280	0					
ANR	3141457	PrimaryExpression	3		3141280	0					
ANR	3141458	Argument	10		3141280	1					
ANR	3141459	PrimaryExpression	10		3141280	0					
ANR	3141460	ExpressionStatement	bt -> print ( )	1259:1:34604:34615	3141280	19	True				
ANR	3141461	CallExpression	bt -> print ( )		3141280	0					
ANR	3141462	Callee	bt -> print		3141280	0					
ANR	3141463	PtrMemberAccess	bt -> print		3141280	0					
ANR	3141464	Identifier	bt		3141280	0					
ANR	3141465	Identifier	print		3141280	1					
ANR	3141466	ArgumentList			3141280	1					
ANR	3141467	ExpressionStatement	"bt -> insert ( 100 , 11 )"	1260:1:34618:34636	3141280	20	True				
ANR	3141468	CallExpression	"bt -> insert ( 100 , 11 )"		3141280	0					
ANR	3141469	Callee	bt -> insert		3141280	0					
ANR	3141470	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141471	Identifier	bt		3141280	0					
ANR	3141472	Identifier	insert		3141280	1					
ANR	3141473	ArgumentList	100		3141280	1					
ANR	3141474	Argument	100		3141280	0					
ANR	3141475	PrimaryExpression	100		3141280	0					
ANR	3141476	Argument	11		3141280	1					
ANR	3141477	PrimaryExpression	11		3141280	0					
ANR	3141478	ExpressionStatement	bt -> print ( )	1261:1:34639:34650	3141280	21	True				
ANR	3141479	CallExpression	bt -> print ( )		3141280	0					
ANR	3141480	Callee	bt -> print		3141280	0					
ANR	3141481	PtrMemberAccess	bt -> print		3141280	0					
ANR	3141482	Identifier	bt		3141280	0					
ANR	3141483	Identifier	print		3141280	1					
ANR	3141484	ArgumentList			3141280	1					
ANR	3141485	ExpressionStatement	"bt -> insert ( 50 , 12 )"	1262:1:34653:34670	3141280	22	True				
ANR	3141486	CallExpression	"bt -> insert ( 50 , 12 )"		3141280	0					
ANR	3141487	Callee	bt -> insert		3141280	0					
ANR	3141488	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141489	Identifier	bt		3141280	0					
ANR	3141490	Identifier	insert		3141280	1					
ANR	3141491	ArgumentList	50		3141280	1					
ANR	3141492	Argument	50		3141280	0					
ANR	3141493	PrimaryExpression	50		3141280	0					
ANR	3141494	Argument	12		3141280	1					
ANR	3141495	PrimaryExpression	12		3141280	0					
ANR	3141496	ExpressionStatement	bt -> print ( )	1263:1:34673:34684	3141280	23	True				
ANR	3141497	CallExpression	bt -> print ( )		3141280	0					
ANR	3141498	Callee	bt -> print		3141280	0					
ANR	3141499	PtrMemberAccess	bt -> print		3141280	0					
ANR	3141500	Identifier	bt		3141280	0					
ANR	3141501	Identifier	print		3141280	1					
ANR	3141502	ArgumentList			3141280	1					
ANR	3141503	ExpressionStatement	"bt -> insert ( 30 , 13 )"	1264:1:34687:34704	3141280	24	True				
ANR	3141504	CallExpression	"bt -> insert ( 30 , 13 )"		3141280	0					
ANR	3141505	Callee	bt -> insert		3141280	0					
ANR	3141506	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141507	Identifier	bt		3141280	0					
ANR	3141508	Identifier	insert		3141280	1					
ANR	3141509	ArgumentList	30		3141280	1					
ANR	3141510	Argument	30		3141280	0					
ANR	3141511	PrimaryExpression	30		3141280	0					
ANR	3141512	Argument	13		3141280	1					
ANR	3141513	PrimaryExpression	13		3141280	0					
ANR	3141514	ExpressionStatement	bt -> print ( )	1265:1:34707:34718	3141280	25	True				
ANR	3141515	CallExpression	bt -> print ( )		3141280	0					
ANR	3141516	Callee	bt -> print		3141280	0					
ANR	3141517	PtrMemberAccess	bt -> print		3141280	0					
ANR	3141518	Identifier	bt		3141280	0					
ANR	3141519	Identifier	print		3141280	1					
ANR	3141520	ArgumentList			3141280	1					
ANR	3141521	ExpressionStatement	"bt -> insert ( 6 , 14 )"	1266:1:34721:34737	3141280	26	True				
ANR	3141522	CallExpression	"bt -> insert ( 6 , 14 )"		3141280	0					
ANR	3141523	Callee	bt -> insert		3141280	0					
ANR	3141524	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141525	Identifier	bt		3141280	0					
ANR	3141526	Identifier	insert		3141280	1					
ANR	3141527	ArgumentList	6		3141280	1					
ANR	3141528	Argument	6		3141280	0					
ANR	3141529	PrimaryExpression	6		3141280	0					
ANR	3141530	Argument	14		3141280	1					
ANR	3141531	PrimaryExpression	14		3141280	0					
ANR	3141532	ExpressionStatement	"bt -> insert ( 6 , 15 )"	1267:1:34740:34756	3141280	27	True				
ANR	3141533	CallExpression	"bt -> insert ( 6 , 15 )"		3141280	0					
ANR	3141534	Callee	bt -> insert		3141280	0					
ANR	3141535	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141536	Identifier	bt		3141280	0					
ANR	3141537	Identifier	insert		3141280	1					
ANR	3141538	ArgumentList	6		3141280	1					
ANR	3141539	Argument	6		3141280	0					
ANR	3141540	PrimaryExpression	6		3141280	0					
ANR	3141541	Argument	15		3141280	1					
ANR	3141542	PrimaryExpression	15		3141280	0					
ANR	3141543	ExpressionStatement	bt -> print ( )	1268:1:34759:34770	3141280	28	True				
ANR	3141544	CallExpression	bt -> print ( )		3141280	0					
ANR	3141545	Callee	bt -> print		3141280	0					
ANR	3141546	PtrMemberAccess	bt -> print		3141280	0					
ANR	3141547	Identifier	bt		3141280	0					
ANR	3141548	Identifier	print		3141280	1					
ANR	3141549	ArgumentList			3141280	1					
ANR	3141550	ExpressionStatement	"bt -> insert ( 8 , 16 )"	1269:1:34773:34789	3141280	29	True				
ANR	3141551	CallExpression	"bt -> insert ( 8 , 16 )"		3141280	0					
ANR	3141552	Callee	bt -> insert		3141280	0					
ANR	3141553	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141554	Identifier	bt		3141280	0					
ANR	3141555	Identifier	insert		3141280	1					
ANR	3141556	ArgumentList	8		3141280	1					
ANR	3141557	Argument	8		3141280	0					
ANR	3141558	PrimaryExpression	8		3141280	0					
ANR	3141559	Argument	16		3141280	1					
ANR	3141560	PrimaryExpression	16		3141280	0					
ANR	3141561	ExpressionStatement	"bt -> insert ( 8 , 17 )"	1270:1:34792:34808	3141280	30	True				
ANR	3141562	CallExpression	"bt -> insert ( 8 , 17 )"		3141280	0					
ANR	3141563	Callee	bt -> insert		3141280	0					
ANR	3141564	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141565	Identifier	bt		3141280	0					
ANR	3141566	Identifier	insert		3141280	1					
ANR	3141567	ArgumentList	8		3141280	1					
ANR	3141568	Argument	8		3141280	0					
ANR	3141569	PrimaryExpression	8		3141280	0					
ANR	3141570	Argument	17		3141280	1					
ANR	3141571	PrimaryExpression	17		3141280	0					
ANR	3141572	ExpressionStatement	bt -> print ( )	1271:1:34811:34822	3141280	31	True				
ANR	3141573	CallExpression	bt -> print ( )		3141280	0					
ANR	3141574	Callee	bt -> print		3141280	0					
ANR	3141575	PtrMemberAccess	bt -> print		3141280	0					
ANR	3141576	Identifier	bt		3141280	0					
ANR	3141577	Identifier	print		3141280	1					
ANR	3141578	ArgumentList			3141280	1					
ANR	3141579	ExpressionStatement	"bt -> insert ( 4 , 18 )"	1272:1:34825:34841	3141280	32	True				
ANR	3141580	CallExpression	"bt -> insert ( 4 , 18 )"		3141280	0					
ANR	3141581	Callee	bt -> insert		3141280	0					
ANR	3141582	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141583	Identifier	bt		3141280	0					
ANR	3141584	Identifier	insert		3141280	1					
ANR	3141585	ArgumentList	4		3141280	1					
ANR	3141586	Argument	4		3141280	0					
ANR	3141587	PrimaryExpression	4		3141280	0					
ANR	3141588	Argument	18		3141280	1					
ANR	3141589	PrimaryExpression	18		3141280	0					
ANR	3141590	ExpressionStatement	"bt -> insert ( 5 , 19 )"	1273:1:34844:34860	3141280	33	True				
ANR	3141591	CallExpression	"bt -> insert ( 5 , 19 )"		3141280	0					
ANR	3141592	Callee	bt -> insert		3141280	0					
ANR	3141593	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141594	Identifier	bt		3141280	0					
ANR	3141595	Identifier	insert		3141280	1					
ANR	3141596	ArgumentList	5		3141280	1					
ANR	3141597	Argument	5		3141280	0					
ANR	3141598	PrimaryExpression	5		3141280	0					
ANR	3141599	Argument	19		3141280	1					
ANR	3141600	PrimaryExpression	19		3141280	0					
ANR	3141601	ExpressionStatement	"bt -> insert ( 5 , 20 )"	1274:1:34863:34879	3141280	34	True				
ANR	3141602	CallExpression	"bt -> insert ( 5 , 20 )"		3141280	0					
ANR	3141603	Callee	bt -> insert		3141280	0					
ANR	3141604	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141605	Identifier	bt		3141280	0					
ANR	3141606	Identifier	insert		3141280	1					
ANR	3141607	ArgumentList	5		3141280	1					
ANR	3141608	Argument	5		3141280	0					
ANR	3141609	PrimaryExpression	5		3141280	0					
ANR	3141610	Argument	20		3141280	1					
ANR	3141611	PrimaryExpression	20		3141280	0					
ANR	3141612	ExpressionStatement	"bt -> insert ( 20 , 21 )"	1276:1:34883:34900	3141280	35	True				
ANR	3141613	CallExpression	"bt -> insert ( 20 , 21 )"		3141280	0					
ANR	3141614	Callee	bt -> insert		3141280	0					
ANR	3141615	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141616	Identifier	bt		3141280	0					
ANR	3141617	Identifier	insert		3141280	1					
ANR	3141618	ArgumentList	20		3141280	1					
ANR	3141619	Argument	20		3141280	0					
ANR	3141620	PrimaryExpression	20		3141280	0					
ANR	3141621	Argument	21		3141280	1					
ANR	3141622	PrimaryExpression	21		3141280	0					
ANR	3141623	ExpressionStatement	"bt -> insert ( 15 , 22 )"	1277:1:34903:34920	3141280	36	True				
ANR	3141624	CallExpression	"bt -> insert ( 15 , 22 )"		3141280	0					
ANR	3141625	Callee	bt -> insert		3141280	0					
ANR	3141626	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141627	Identifier	bt		3141280	0					
ANR	3141628	Identifier	insert		3141280	1					
ANR	3141629	ArgumentList	15		3141280	1					
ANR	3141630	Argument	15		3141280	0					
ANR	3141631	PrimaryExpression	15		3141280	0					
ANR	3141632	Argument	22		3141280	1					
ANR	3141633	PrimaryExpression	22		3141280	0					
ANR	3141634	ExpressionStatement	bt -> print ( )	1278:1:34923:34934	3141280	37	True				
ANR	3141635	CallExpression	bt -> print ( )		3141280	0					
ANR	3141636	Callee	bt -> print		3141280	0					
ANR	3141637	PtrMemberAccess	bt -> print		3141280	0					
ANR	3141638	Identifier	bt		3141280	0					
ANR	3141639	Identifier	print		3141280	1					
ANR	3141640	ArgumentList			3141280	1					
ANR	3141641	ExpressionStatement	"bt -> insert ( 17 , 23 )"	1279:1:34937:34954	3141280	38	True				
ANR	3141642	CallExpression	"bt -> insert ( 17 , 23 )"		3141280	0					
ANR	3141643	Callee	bt -> insert		3141280	0					
ANR	3141644	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141645	Identifier	bt		3141280	0					
ANR	3141646	Identifier	insert		3141280	1					
ANR	3141647	ArgumentList	17		3141280	1					
ANR	3141648	Argument	17		3141280	0					
ANR	3141649	PrimaryExpression	17		3141280	0					
ANR	3141650	Argument	23		3141280	1					
ANR	3141651	PrimaryExpression	23		3141280	0					
ANR	3141652	ExpressionStatement	bt -> print ( )	1280:1:34957:34968	3141280	39	True				
ANR	3141653	CallExpression	bt -> print ( )		3141280	0					
ANR	3141654	Callee	bt -> print		3141280	0					
ANR	3141655	PtrMemberAccess	bt -> print		3141280	0					
ANR	3141656	Identifier	bt		3141280	0					
ANR	3141657	Identifier	print		3141280	1					
ANR	3141658	ArgumentList			3141280	1					
ANR	3141659	IfStatement	if ( bt -> exists ( 120 ) )		3141280	40					
ANR	3141660	Condition	bt -> exists ( 120 )	1282:5:34976:34990	3141280	0	True				
ANR	3141661	CallExpression	bt -> exists ( 120 )		3141280	0					
ANR	3141662	Callee	bt -> exists		3141280	0					
ANR	3141663	PtrMemberAccess	bt -> exists		3141280	0					
ANR	3141664	Identifier	bt		3141280	0					
ANR	3141665	Identifier	exists		3141280	1					
ANR	3141666	ArgumentList	120		3141280	1					
ANR	3141667	Argument	120		3141280	0					
ANR	3141668	PrimaryExpression	120		3141280	0					
ANR	3141669	ThrowStatement	"throw ""Btree_test, 4"" ;"	1283:2:34996:35017	3141280	1	True				
ANR	3141670	PrimaryExpression	"""Btree_test, 4"""		3141280	0					
ANR	3141671	IfStatement	if ( ! bt -> exists ( 20 ) )		3141280	41					
ANR	3141672	Condition	! bt -> exists ( 20 )	1284:5:35024:35038	3141280	0	True				
ANR	3141673	UnaryOperationExpression	! bt -> exists ( 20 )		3141280	0					
ANR	3141674	UnaryOperator	!		3141280	0					
ANR	3141675	CallExpression	bt -> exists ( 20 )		3141280	1					
ANR	3141676	Callee	bt -> exists		3141280	0					
ANR	3141677	PtrMemberAccess	bt -> exists		3141280	0					
ANR	3141678	Identifier	bt		3141280	0					
ANR	3141679	Identifier	exists		3141280	1					
ANR	3141680	ArgumentList	20		3141280	1					
ANR	3141681	Argument	20		3141280	0					
ANR	3141682	PrimaryExpression	20		3141280	0					
ANR	3141683	ThrowStatement	"throw ""Btree_test, 5"" ;"	1285:2:35044:35065	3141280	1	True				
ANR	3141684	PrimaryExpression	"""Btree_test, 5"""		3141280	0					
ANR	3141685	IfStatement	if ( 16 != bt -> findVal ( 8 ) )		3141280	42					
ANR	3141686	Condition	16 != bt -> findVal ( 8 )	1287:5:35073:35092	3141280	0	True				
ANR	3141687	EqualityExpression	16 != bt -> findVal ( 8 )		3141280	0		!=			
ANR	3141688	PrimaryExpression	16		3141280	0					
ANR	3141689	CallExpression	bt -> findVal ( 8 )		3141280	1					
ANR	3141690	Callee	bt -> findVal		3141280	0					
ANR	3141691	PtrMemberAccess	bt -> findVal		3141280	0					
ANR	3141692	Identifier	bt		3141280	0					
ANR	3141693	Identifier	findVal		3141280	1					
ANR	3141694	ArgumentList	8		3141280	1					
ANR	3141695	Argument	8		3141280	0					
ANR	3141696	PrimaryExpression	8		3141280	0					
ANR	3141697	ThrowStatement	"throw ""Btree_test, 6"" ;"	1288:2:35126:35147	3141280	1	True				
ANR	3141698	PrimaryExpression	"""Btree_test, 6"""		3141280	0					
ANR	3141699	ExpressionStatement	bt -> remove ( 8 )	1289:1:35150:35163	3141280	43	True				
ANR	3141700	CallExpression	bt -> remove ( 8 )		3141280	0					
ANR	3141701	Callee	bt -> remove		3141280	0					
ANR	3141702	PtrMemberAccess	bt -> remove		3141280	0					
ANR	3141703	Identifier	bt		3141280	0					
ANR	3141704	Identifier	remove		3141280	1					
ANR	3141705	ArgumentList	8		3141280	1					
ANR	3141706	Argument	8		3141280	0					
ANR	3141707	PrimaryExpression	8		3141280	0					
ANR	3141708	ExpressionStatement	bt -> print ( )	1290:1:35166:35177	3141280	44	True				
ANR	3141709	CallExpression	bt -> print ( )		3141280	0					
ANR	3141710	Callee	bt -> print		3141280	0					
ANR	3141711	PtrMemberAccess	bt -> print		3141280	0					
ANR	3141712	Identifier	bt		3141280	0					
ANR	3141713	Identifier	print		3141280	1					
ANR	3141714	ArgumentList			3141280	1					
ANR	3141715	ExpressionStatement	"bt -> insert ( 100 , 12 )"	1292:1:35181:35199	3141280	45	True				
ANR	3141716	CallExpression	"bt -> insert ( 100 , 12 )"		3141280	0					
ANR	3141717	Callee	bt -> insert		3141280	0					
ANR	3141718	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141719	Identifier	bt		3141280	0					
ANR	3141720	Identifier	insert		3141280	1					
ANR	3141721	ArgumentList	100		3141280	1					
ANR	3141722	Argument	100		3141280	0					
ANR	3141723	PrimaryExpression	100		3141280	0					
ANR	3141724	Argument	12		3141280	1					
ANR	3141725	PrimaryExpression	12		3141280	0					
ANR	3141726	ExpressionStatement	bt -> print ( )	1293:1:35202:35213	3141280	46	True				
ANR	3141727	CallExpression	bt -> print ( )		3141280	0					
ANR	3141728	Callee	bt -> print		3141280	0					
ANR	3141729	PtrMemberAccess	bt -> print		3141280	0					
ANR	3141730	Identifier	bt		3141280	0					
ANR	3141731	Identifier	print		3141280	1					
ANR	3141732	ArgumentList			3141280	1					
ANR	3141733	IfStatement	if ( 100 != bt -> findMaxKey ( ) )		3141280	47					
ANR	3141734	Condition	100 != bt -> findMaxKey ( )	1294:5:35220:35240	3141280	0	True				
ANR	3141735	EqualityExpression	100 != bt -> findMaxKey ( )		3141280	0		!=			
ANR	3141736	PrimaryExpression	100		3141280	0					
ANR	3141737	CallExpression	bt -> findMaxKey ( )		3141280	1					
ANR	3141738	Callee	bt -> findMaxKey		3141280	0					
ANR	3141739	PtrMemberAccess	bt -> findMaxKey		3141280	0					
ANR	3141740	Identifier	bt		3141280	0					
ANR	3141741	Identifier	findMaxKey		3141280	1					
ANR	3141742	ArgumentList			3141280	1					
ANR	3141743	ThrowStatement	"throw ""Btree_test, 7"" ;"	1295:2:35246:35267	3141280	1	True				
ANR	3141744	PrimaryExpression	"""Btree_test, 7"""		3141280	0					
ANR	3141745	IfStatement	if ( 12 != bt -> findValForMaxKey ( ) )		3141280	48					
ANR	3141746	Condition	12 != bt -> findValForMaxKey ( )	1296:5:35274:35299	3141280	0	True				
ANR	3141747	EqualityExpression	12 != bt -> findValForMaxKey ( )		3141280	0		!=			
ANR	3141748	PrimaryExpression	12		3141280	0					
ANR	3141749	CallExpression	bt -> findValForMaxKey ( )		3141280	1					
ANR	3141750	Callee	bt -> findValForMaxKey		3141280	0					
ANR	3141751	PtrMemberAccess	bt -> findValForMaxKey		3141280	0					
ANR	3141752	Identifier	bt		3141280	0					
ANR	3141753	Identifier	findValForMaxKey		3141280	1					
ANR	3141754	ArgumentList			3141280	1					
ANR	3141755	ThrowStatement	"throw ""Btree_test, 8"" ;"	1297:2:35305:35326	3141280	1	True				
ANR	3141756	PrimaryExpression	"""Btree_test, 8"""		3141280	0					
ANR	3141757	ExpressionStatement	bt -> removeMax ( )	1298:1:35329:35344	3141280	49	True				
ANR	3141758	CallExpression	bt -> removeMax ( )		3141280	0					
ANR	3141759	Callee	bt -> removeMax		3141280	0					
ANR	3141760	PtrMemberAccess	bt -> removeMax		3141280	0					
ANR	3141761	Identifier	bt		3141280	0					
ANR	3141762	Identifier	removeMax		3141280	1					
ANR	3141763	ArgumentList			3141280	1					
ANR	3141764	ExpressionStatement	"bt -> insert ( 0 , 9 )"	1299:1:35347:35362	3141280	50	True				
ANR	3141765	CallExpression	"bt -> insert ( 0 , 9 )"		3141280	0					
ANR	3141766	Callee	bt -> insert		3141280	0					
ANR	3141767	PtrMemberAccess	bt -> insert		3141280	0					
ANR	3141768	Identifier	bt		3141280	0					
ANR	3141769	Identifier	insert		3141280	1					
ANR	3141770	ArgumentList	0		3141280	1					
ANR	3141771	Argument	0		3141280	0					
ANR	3141772	PrimaryExpression	0		3141280	0					
ANR	3141773	Argument	9		3141280	1					
ANR	3141774	PrimaryExpression	9		3141280	0					
ANR	3141775	ExpressionStatement	bt -> print ( )	1300:1:35365:35376	3141280	51	True				
ANR	3141776	CallExpression	bt -> print ( )		3141280	0					
ANR	3141777	Callee	bt -> print		3141280	0					
ANR	3141778	PtrMemberAccess	bt -> print		3141280	0					
ANR	3141779	Identifier	bt		3141280	0					
ANR	3141780	Identifier	print		3141280	1					
ANR	3141781	ArgumentList			3141280	1					
ANR	3141782	IfStatement	if ( 0 != bt -> findMinKey ( ) )		3141280	52					
ANR	3141783	Condition	0 != bt -> findMinKey ( )	1301:5:35383:35401	3141280	0	True				
ANR	3141784	EqualityExpression	0 != bt -> findMinKey ( )		3141280	0		!=			
ANR	3141785	PrimaryExpression	0		3141280	0					
ANR	3141786	CallExpression	bt -> findMinKey ( )		3141280	1					
ANR	3141787	Callee	bt -> findMinKey		3141280	0					
ANR	3141788	PtrMemberAccess	bt -> findMinKey		3141280	0					
ANR	3141789	Identifier	bt		3141280	0					
ANR	3141790	Identifier	findMinKey		3141280	1					
ANR	3141791	ArgumentList			3141280	1					
ANR	3141792	ThrowStatement	"throw ""Btree_test, 9"" ;"	1302:2:35407:35428	3141280	1	True				
ANR	3141793	PrimaryExpression	"""Btree_test, 9"""		3141280	0					
ANR	3141794	IfStatement	if ( 8 != bt -> findValForMinKey ( ) )		3141280	53					
ANR	3141795	Condition	8 != bt -> findValForMinKey ( )	1303:5:35435:35459	3141280	0	True				
ANR	3141796	EqualityExpression	8 != bt -> findValForMinKey ( )		3141280	0		!=			
ANR	3141797	PrimaryExpression	8		3141280	0					
ANR	3141798	CallExpression	bt -> findValForMinKey ( )		3141280	1					
ANR	3141799	Callee	bt -> findValForMinKey		3141280	0					
ANR	3141800	PtrMemberAccess	bt -> findValForMinKey		3141280	0					
ANR	3141801	Identifier	bt		3141280	0					
ANR	3141802	Identifier	findValForMinKey		3141280	1					
ANR	3141803	ArgumentList			3141280	1					
ANR	3141804	ThrowStatement	"throw ""Btree_test, 10"" ;"	1304:2:35465:35487	3141280	1	True				
ANR	3141805	PrimaryExpression	"""Btree_test, 10"""		3141280	0					
ANR	3141806	ExpressionStatement	bt -> removeMin ( )	1305:1:35490:35505	3141280	54	True				
ANR	3141807	CallExpression	bt -> removeMin ( )		3141280	0					
ANR	3141808	Callee	bt -> removeMin		3141280	0					
ANR	3141809	PtrMemberAccess	bt -> removeMin		3141280	0					
ANR	3141810	Identifier	bt		3141280	0					
ANR	3141811	Identifier	removeMin		3141280	1					
ANR	3141812	ArgumentList			3141280	1					
ANR	3141813	ExpressionStatement	bt -> print ( )	1306:1:35508:35519	3141280	55	True				
ANR	3141814	CallExpression	bt -> print ( )		3141280	0					
ANR	3141815	Callee	bt -> print		3141280	0					
ANR	3141816	PtrMemberAccess	bt -> print		3141280	0					
ANR	3141817	Identifier	bt		3141280	0					
ANR	3141818	Identifier	print		3141280	1					
ANR	3141819	ArgumentList			3141280	1					
ANR	3141820	ExpressionStatement	"printf ( "">>>>> %d\\n"" , bt -> findMaxKey ( ) )"	1308:1:35523:35562	3141280	56	True				
ANR	3141821	CallExpression	"printf ( "">>>>> %d\\n"" , bt -> findMaxKey ( ) )"		3141280	0					
ANR	3141822	Callee	printf		3141280	0					
ANR	3141823	Identifier	printf		3141280	0					
ANR	3141824	ArgumentList	""">>>>> %d\\n"""		3141280	1					
ANR	3141825	Argument	""">>>>> %d\\n"""		3141280	0					
ANR	3141826	PrimaryExpression	""">>>>> %d\\n"""		3141280	0					
ANR	3141827	Argument	bt -> findMaxKey ( )		3141280	1					
ANR	3141828	CallExpression	bt -> findMaxKey ( )		3141280	0					
ANR	3141829	Callee	bt -> findMaxKey		3141280	0					
ANR	3141830	PtrMemberAccess	bt -> findMaxKey		3141280	0					
ANR	3141831	Identifier	bt		3141280	0					
ANR	3141832	Identifier	findMaxKey		3141280	1					
ANR	3141833	ArgumentList			3141280	1					
ANR	3141834	ExpressionStatement	"printf ( "">>>>> %d\\n"" , bt -> findMinKey ( ) )"	1309:1:35565:35604	3141280	57	True				
ANR	3141835	CallExpression	"printf ( "">>>>> %d\\n"" , bt -> findMinKey ( ) )"		3141280	0					
ANR	3141836	Callee	printf		3141280	0					
ANR	3141837	Identifier	printf		3141280	0					
ANR	3141838	ArgumentList	""">>>>> %d\\n"""		3141280	1					
ANR	3141839	Argument	""">>>>> %d\\n"""		3141280	0					
ANR	3141840	PrimaryExpression	""">>>>> %d\\n"""		3141280	0					
ANR	3141841	Argument	bt -> findMinKey ( )		3141280	1					
ANR	3141842	CallExpression	bt -> findMinKey ( )		3141280	0					
ANR	3141843	Callee	bt -> findMinKey		3141280	0					
ANR	3141844	PtrMemberAccess	bt -> findMinKey		3141280	0					
ANR	3141845	Identifier	bt		3141280	0					
ANR	3141846	Identifier	findMinKey		3141280	1					
ANR	3141847	ArgumentList			3141280	1					
ANR	3141848	ExpressionStatement	"printf ( "">>>>> %d\\n"" , bt -> findVal ( 15 ) )"	1310:1:35607:35645	3141280	58	True				
ANR	3141849	CallExpression	"printf ( "">>>>> %d\\n"" , bt -> findVal ( 15 ) )"		3141280	0					
ANR	3141850	Callee	printf		3141280	0					
ANR	3141851	Identifier	printf		3141280	0					
ANR	3141852	ArgumentList	""">>>>> %d\\n"""		3141280	1					
ANR	3141853	Argument	""">>>>> %d\\n"""		3141280	0					
ANR	3141854	PrimaryExpression	""">>>>> %d\\n"""		3141280	0					
ANR	3141855	Argument	bt -> findVal ( 15 )		3141280	1					
ANR	3141856	CallExpression	bt -> findVal ( 15 )		3141280	0					
ANR	3141857	Callee	bt -> findVal		3141280	0					
ANR	3141858	PtrMemberAccess	bt -> findVal		3141280	0					
ANR	3141859	Identifier	bt		3141280	0					
ANR	3141860	Identifier	findVal		3141280	1					
ANR	3141861	ArgumentList	15		3141280	1					
ANR	3141862	Argument	15		3141280	0					
ANR	3141863	PrimaryExpression	15		3141280	0					
ANR	3141864	Statement	delete	1311:1:35648:35653	3141280	59	True				
ANR	3141865	ExpressionStatement	bt	1311:8:35655:35657	3141280	60	True				
ANR	3141866	Identifier	bt		3141280	0					
ANR	3141867	ReturnType	void		3141280	1					
ANR	3141868	Identifier	Btree_test		3141280	2					
ANR	3141869	ParameterList			3141280	3					
ANR	3141870	CFGEntryNode	ENTRY		3141280		True				
ANR	3141871	CFGExitNode	EXIT		3141280		True				
ANR	3141872	CFGExceptionNode	EXCEPTION		3141280		True				
ANR	3141873	CFGExceptionNode	EXCEPTION		3141280		True				
ANR	3141874	CFGExceptionNode	EXCEPTION		3141280		True				
ANR	3141875	CFGExceptionNode	EXCEPTION		3141280		True				
ANR	3141876	CFGExceptionNode	EXCEPTION		3141280		True				
ANR	3141877	CFGExceptionNode	EXCEPTION		3141280		True				
ANR	3141878	CFGExceptionNode	EXCEPTION		3141280		True				
ANR	3141879	CFGExceptionNode	EXCEPTION		3141280		True				
ANR	3141880	CFGExceptionNode	EXCEPTION		3141280		True				
ANR	3141881	CFGExceptionNode	EXCEPTION		3141280		True				
ANR	3141882	CFGExceptionNode	EXCEPTION		3141280		True				
ANR	3141883	CFGExceptionNode	EXCEPTION		3141280		True				
ANR	3141884	CFGExceptionNode	EXCEPTION		3141280		True				
ANR	3141885	CFGExceptionNode	EXCEPTION		3141280		True				
ANR	3141886	CFGExceptionNode	EXCEPTION		3141280		True				
ANR	3141887	CFGExceptionNode	EXCEPTION		3141280		True				
ANR	3141888	CFGExceptionNode	EXCEPTION		3141280		True				
ANR	3141889	CFGExceptionNode	EXCEPTION		3141280		True				
ANR	3141890	CFGExceptionNode	EXCEPTION		3141280		True				
ANR	3141891	Symbol	bt		3141280						
ANR	3141892	Symbol	bt -> findMinKey		3141280						
ANR	3141893	Symbol	NULL		3141280						
ANR	3141894	Symbol	bt -> exists		3141280						
ANR	3141895	Symbol	bt -> findVal		3141280						
ANR	3141896	Symbol	bt -> findValForMaxKey		3141280						
ANR	3141897	Symbol	false		3141280						
ANR	3141898	Symbol	bt -> isEmpty		3141280						
ANR	3141899	Symbol	true		3141280						
ANR	3141900	Symbol	bt -> findValForMinKey		3141280						
ANR	3141901	Symbol	* bt		3141280						
ANR	3141902	Symbol	bt -> findMaxKey		3141280						
