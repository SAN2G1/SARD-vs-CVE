command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3031671	File	data/converged/CVE-2011-4930_htcondor/src_condor_daemon_core.V6_HookClient.cpp								
ANR	3031672	Function	HookClient :: HookClient	26:0:947:1191							
ANR	3031673	FunctionDef	"HookClient :: HookClient (HookType hook_type , const char * hook_path , bool wants_output)"		3031672	0					
ANR	3031674	CompoundStatement		28:0:1040:1191	3031672	0					
ANR	3031675	ExpressionStatement	m_hook_path = strdup ( hook_path )	29:1:1043:1074	3031672	0	True				
ANR	3031676	AssignmentExpression	m_hook_path = strdup ( hook_path )		3031672	0		=			
ANR	3031677	Identifier	m_hook_path		3031672	0					
ANR	3031678	CallExpression	strdup ( hook_path )		3031672	1					
ANR	3031679	Callee	strdup		3031672	0					
ANR	3031680	Identifier	strdup		3031672	0					
ANR	3031681	ArgumentList	hook_path		3031672	1					
ANR	3031682	Argument	hook_path		3031672	0					
ANR	3031683	Identifier	hook_path		3031672	0					
ANR	3031684	ExpressionStatement	m_hook_type = hook_type	30:1:1077:1100	3031672	1	True				
ANR	3031685	AssignmentExpression	m_hook_type = hook_type		3031672	0		=			
ANR	3031686	Identifier	m_hook_type		3031672	0					
ANR	3031687	Identifier	hook_type		3031672	1					
ANR	3031688	ExpressionStatement	m_pid = - 1	31:1:1103:1113	3031672	2	True				
ANR	3031689	AssignmentExpression	m_pid = - 1		3031672	0		=			
ANR	3031690	Identifier	m_pid		3031672	0					
ANR	3031691	UnaryOperationExpression	- 1		3031672	1					
ANR	3031692	UnaryOperator	-		3031672	0					
ANR	3031693	PrimaryExpression	1		3031672	1					
ANR	3031694	ExpressionStatement	m_exit_status = - 1	32:1:1116:1134	3031672	3	True				
ANR	3031695	AssignmentExpression	m_exit_status = - 1		3031672	0		=			
ANR	3031696	Identifier	m_exit_status		3031672	0					
ANR	3031697	UnaryOperationExpression	- 1		3031672	1					
ANR	3031698	UnaryOperator	-		3031672	0					
ANR	3031699	PrimaryExpression	1		3031672	1					
ANR	3031700	ExpressionStatement	m_has_exited = false	33:1:1137:1157	3031672	4	True				
ANR	3031701	AssignmentExpression	m_has_exited = false		3031672	0		=			
ANR	3031702	Identifier	m_has_exited		3031672	0					
ANR	3031703	Identifier	false		3031672	1					
ANR	3031704	ExpressionStatement	m_wants_output = wants_output	34:1:1160:1189	3031672	5	True				
ANR	3031705	AssignmentExpression	m_wants_output = wants_output		3031672	0		=			
ANR	3031706	Identifier	m_wants_output		3031672	0					
ANR	3031707	Identifier	wants_output		3031672	1					
ANR	3031708	Identifier	HookClient :: HookClient		3031672	1					
ANR	3031709	ParameterList	"HookType hook_type , const char * hook_path , bool wants_output"		3031672	2					
ANR	3031710	Parameter	HookType hook_type	26:23:970:987	3031672	0	True				
ANR	3031711	ParameterType	HookType		3031672	0					
ANR	3031712	Identifier	hook_type		3031672	1					
ANR	3031713	Parameter	const char * hook_path	26:43:990:1010	3031672	1	True				
ANR	3031714	ParameterType	const char *		3031672	0					
ANR	3031715	Identifier	hook_path		3031672	1					
ANR	3031716	Parameter	bool wants_output	27:8:1021:1037	3031672	2	True				
ANR	3031717	ParameterType	bool		3031672	0					
ANR	3031718	Identifier	wants_output		3031672	1					
ANR	3031719	CFGEntryNode	ENTRY		3031672		True				
ANR	3031720	CFGExitNode	EXIT		3031672		True				
ANR	3031721	Symbol	m_exit_status		3031672						
ANR	3031722	Symbol	m_pid		3031672						
ANR	3031723	Symbol	m_hook_path		3031672						
ANR	3031724	Symbol	m_has_exited		3031672						
ANR	3031725	Symbol	m_hook_type		3031672						
ANR	3031726	Symbol	false		3031672						
ANR	3031727	Symbol	hook_path		3031672						
ANR	3031728	Symbol	wants_output		3031672						
ANR	3031729	Symbol	strdup		3031672						
ANR	3031730	Symbol	m_wants_output		3031672						
ANR	3031731	Symbol	hook_type		3031672						
ANR	3031732	Function	HookClient :: ~HookClient	38:0:1195:1360							
ANR	3031733	FunctionDef	HookClient :: ~HookClient ()		3031732	0					
ANR	3031734	CompoundStatement		38:26:1221:1360	3031732	0					
ANR	3031735	IfStatement	if ( m_hook_path )		3031732	0					
ANR	3031736	Condition	m_hook_path	39:5:1228:1238	3031732	0	True				
ANR	3031737	Identifier	m_hook_path		3031732	0					
ANR	3031738	CompoundStatement		2:18:19:19	3031732	1					
ANR	3031739	ExpressionStatement	free ( m_hook_path )	40:2:1245:1262	3031732	0	True				
ANR	3031740	CallExpression	free ( m_hook_path )		3031732	0					
ANR	3031741	Callee	free		3031732	0					
ANR	3031742	Identifier	free		3031732	0					
ANR	3031743	ArgumentList	m_hook_path		3031732	1					
ANR	3031744	Argument	m_hook_path		3031732	0					
ANR	3031745	Identifier	m_hook_path		3031732	0					
ANR	3031746	ExpressionStatement	m_hook_path = NULL	41:2:1266:1284	3031732	1	True				
ANR	3031747	AssignmentExpression	m_hook_path = NULL		3031732	0		=			
ANR	3031748	Identifier	m_hook_path		3031732	0					
ANR	3031749	Identifier	NULL		3031732	1					
ANR	3031750	IfStatement	if ( m_pid != - 1 && ! m_has_exited )		3031732	1					
ANR	3031751	Condition	m_pid != - 1 && ! m_has_exited	43:5:1294:1321	3031732	0	True				
ANR	3031752	AndExpression	m_pid != - 1 && ! m_has_exited		3031732	0		&&			
ANR	3031753	EqualityExpression	m_pid != - 1		3031732	0		!=			
ANR	3031754	Identifier	m_pid		3031732	0					
ANR	3031755	UnaryOperationExpression	- 1		3031732	1					
ANR	3031756	UnaryOperator	-		3031732	0					
ANR	3031757	PrimaryExpression	1		3031732	1					
ANR	3031758	UnaryOperationExpression	! m_has_exited		3031732	1					
ANR	3031759	UnaryOperator	!		3031732	0					
ANR	3031760	Identifier	m_has_exited		3031732	1					
ANR	3031761	CompoundStatement		6:35:102:102	3031732	1					
ANR	3031762	Identifier	HookClient :: ~HookClient		3031732	1					
ANR	3031763	ParameterList			3031732	2					
ANR	3031764	CFGEntryNode	ENTRY		3031732		True				
ANR	3031765	CFGExitNode	EXIT		3031732		True				
ANR	3031766	Symbol	NULL		3031732						
ANR	3031767	Symbol	m_pid		3031732						
ANR	3031768	Symbol	m_hook_path		3031732						
ANR	3031769	Symbol	m_has_exited		3031732						
ANR	3031770	Function	HookClient :: getStdOut	50:0:1364:1490							
ANR	3031771	FunctionDef	HookClient :: getStdOut ()		3031770	0					
ANR	3031772	CompoundStatement		51:24:1398:1490	3031770	0					
ANR	3031773	IfStatement	if ( m_has_exited )		3031770	0					
ANR	3031774	Condition	m_has_exited	52:5:1405:1416	3031770	0	True				
ANR	3031775	Identifier	m_has_exited		3031770	0					
ANR	3031776	CompoundStatement		2:19:20:20	3031770	1					
ANR	3031777	ReturnStatement	return & m_std_out ;	53:2:1423:1440	3031770	0	True				
ANR	3031778	UnaryOperationExpression	& m_std_out		3031770	0					
ANR	3031779	UnaryOperator	&		3031770	0					
ANR	3031780	Identifier	m_std_out		3031770	1					
ANR	3031781	ReturnStatement	"return daemonCore -> Read_Std_Pipe ( m_pid , 1 ) ;"	55:1:1446:1488	3031770	1	True				
ANR	3031782	CallExpression	"daemonCore -> Read_Std_Pipe ( m_pid , 1 )"		3031770	0					
ANR	3031783	Callee	daemonCore -> Read_Std_Pipe		3031770	0					
ANR	3031784	PtrMemberAccess	daemonCore -> Read_Std_Pipe		3031770	0					
ANR	3031785	Identifier	daemonCore		3031770	0					
ANR	3031786	Identifier	Read_Std_Pipe		3031770	1					
ANR	3031787	ArgumentList	m_pid		3031770	1					
ANR	3031788	Argument	m_pid		3031770	0					
ANR	3031789	Identifier	m_pid		3031770	0					
ANR	3031790	Argument	1		3031770	1					
ANR	3031791	PrimaryExpression	1		3031770	0					
ANR	3031792	ReturnType	MyString *		3031770	1					
ANR	3031793	Identifier	HookClient :: getStdOut		3031770	2					
ANR	3031794	ParameterList			3031770	3					
ANR	3031795	CFGEntryNode	ENTRY		3031770		True				
ANR	3031796	CFGExitNode	EXIT		3031770		True				
ANR	3031797	Symbol	m_pid		3031770						
ANR	3031798	Symbol	m_has_exited		3031770						
ANR	3031799	Symbol	& m_std_out		3031770						
ANR	3031800	Symbol	* daemonCore		3031770						
ANR	3031801	Symbol	daemonCore		3031770						
ANR	3031802	Symbol	daemonCore -> Read_Std_Pipe		3031770						
ANR	3031803	Function	HookClient :: getStdErr	59:0:1494:1620							
ANR	3031804	FunctionDef	HookClient :: getStdErr ()		3031803	0					
ANR	3031805	CompoundStatement		60:24:1528:1620	3031803	0					
ANR	3031806	IfStatement	if ( m_has_exited )		3031803	0					
ANR	3031807	Condition	m_has_exited	61:5:1535:1546	3031803	0	True				
ANR	3031808	Identifier	m_has_exited		3031803	0					
ANR	3031809	CompoundStatement		2:19:20:20	3031803	1					
ANR	3031810	ReturnStatement	return & m_std_err ;	62:2:1553:1570	3031803	0	True				
ANR	3031811	UnaryOperationExpression	& m_std_err		3031803	0					
ANR	3031812	UnaryOperator	&		3031803	0					
ANR	3031813	Identifier	m_std_err		3031803	1					
ANR	3031814	ReturnStatement	"return daemonCore -> Read_Std_Pipe ( m_pid , 2 ) ;"	64:1:1576:1618	3031803	1	True				
ANR	3031815	CallExpression	"daemonCore -> Read_Std_Pipe ( m_pid , 2 )"		3031803	0					
ANR	3031816	Callee	daemonCore -> Read_Std_Pipe		3031803	0					
ANR	3031817	PtrMemberAccess	daemonCore -> Read_Std_Pipe		3031803	0					
ANR	3031818	Identifier	daemonCore		3031803	0					
ANR	3031819	Identifier	Read_Std_Pipe		3031803	1					
ANR	3031820	ArgumentList	m_pid		3031803	1					
ANR	3031821	Argument	m_pid		3031803	0					
ANR	3031822	Identifier	m_pid		3031803	0					
ANR	3031823	Argument	2		3031803	1					
ANR	3031824	PrimaryExpression	2		3031803	0					
ANR	3031825	ReturnType	MyString *		3031803	1					
ANR	3031826	Identifier	HookClient :: getStdErr		3031803	2					
ANR	3031827	ParameterList			3031803	3					
ANR	3031828	CFGEntryNode	ENTRY		3031803		True				
ANR	3031829	CFGExitNode	EXIT		3031803		True				
ANR	3031830	Symbol	m_pid		3031803						
ANR	3031831	Symbol	m_has_exited		3031803						
ANR	3031832	Symbol	* daemonCore		3031803						
ANR	3031833	Symbol	daemonCore		3031803						
ANR	3031834	Symbol	daemonCore -> Read_Std_Pipe		3031803						
ANR	3031835	Symbol	& m_std_err		3031803						
ANR	3031836	Function	HookClient :: hookExited	68:0:1624:2108							
ANR	3031837	FunctionDef	HookClient :: hookExited (int exit_status)		3031836	0					
ANR	3031838	CompoundStatement		69:40:1669:2108	3031836	0					
ANR	3031839	ExpressionStatement	m_has_exited = true	70:1:1672:1691	3031836	0	True				
ANR	3031840	AssignmentExpression	m_has_exited = true		3031836	0		=			
ANR	3031841	Identifier	m_has_exited		3031836	0					
ANR	3031842	Identifier	true		3031836	1					
ANR	3031843	ExpressionStatement	m_exit_status = exit_status	71:1:1694:1721	3031836	1	True				
ANR	3031844	AssignmentExpression	m_exit_status = exit_status		3031836	0		=			
ANR	3031845	Identifier	m_exit_status		3031836	0					
ANR	3031846	Identifier	exit_status		3031836	1					
ANR	3031847	IdentifierDeclStatement	MyString status_txt ;	73:1:1725:1744	3031836	2	True				
ANR	3031848	IdentifierDecl	status_txt		3031836	0					
ANR	3031849	IdentifierDeclType	MyString		3031836	0					
ANR	3031850	Identifier	status_txt		3031836	1					
ANR	3031851	ExpressionStatement	"status_txt . sprintf ( ""HookClient %s (pid %d) "" , m_hook_path , m_pid )"	74:1:1747:1812	3031836	3	True				
ANR	3031852	CallExpression	"status_txt . sprintf ( ""HookClient %s (pid %d) "" , m_hook_path , m_pid )"		3031836	0					
ANR	3031853	Callee	status_txt . sprintf		3031836	0					
ANR	3031854	MemberAccess	status_txt . sprintf		3031836	0					
ANR	3031855	Identifier	status_txt		3031836	0					
ANR	3031856	Identifier	sprintf		3031836	1					
ANR	3031857	ArgumentList	"""HookClient %s (pid %d) """		3031836	1					
ANR	3031858	Argument	"""HookClient %s (pid %d) """		3031836	0					
ANR	3031859	PrimaryExpression	"""HookClient %s (pid %d) """		3031836	0					
ANR	3031860	Argument	m_hook_path		3031836	1					
ANR	3031861	Identifier	m_hook_path		3031836	0					
ANR	3031862	Argument	m_pid		3031836	2					
ANR	3031863	Identifier	m_pid		3031836	0					
ANR	3031864	ExpressionStatement	"statusString ( exit_status , status_txt )"	75:1:1815:1852	3031836	4	True				
ANR	3031865	CallExpression	"statusString ( exit_status , status_txt )"		3031836	0					
ANR	3031866	Callee	statusString		3031836	0					
ANR	3031867	Identifier	statusString		3031836	0					
ANR	3031868	ArgumentList	exit_status		3031836	1					
ANR	3031869	Argument	exit_status		3031836	0					
ANR	3031870	Identifier	exit_status		3031836	0					
ANR	3031871	Argument	status_txt		3031836	1					
ANR	3031872	Identifier	status_txt		3031836	0					
ANR	3031873	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""%s\\n"" , status_txt . Value ( ) )"	76:1:1855:1903	3031836	5	True				
ANR	3031874	CallExpression	"dprintf ( D_FULLDEBUG , ""%s\\n"" , status_txt . Value ( ) )"		3031836	0					
ANR	3031875	Callee	dprintf		3031836	0					
ANR	3031876	Identifier	dprintf		3031836	0					
ANR	3031877	ArgumentList	D_FULLDEBUG		3031836	1					
ANR	3031878	Argument	D_FULLDEBUG		3031836	0					
ANR	3031879	Identifier	D_FULLDEBUG		3031836	0					
ANR	3031880	Argument	"""%s\\n"""		3031836	1					
ANR	3031881	PrimaryExpression	"""%s\\n"""		3031836	0					
ANR	3031882	Argument	status_txt . Value ( )		3031836	2					
ANR	3031883	CallExpression	status_txt . Value ( )		3031836	0					
ANR	3031884	Callee	status_txt . Value		3031836	0					
ANR	3031885	MemberAccess	status_txt . Value		3031836	0					
ANR	3031886	Identifier	status_txt		3031836	0					
ANR	3031887	Identifier	Value		3031836	1					
ANR	3031888	ArgumentList			3031836	1					
ANR	3031889	IdentifierDeclStatement	"MyString * std_out = daemonCore -> Read_Std_Pipe ( m_pid , 1 ) ;"	78:1:1907:1962	3031836	6	True				
ANR	3031890	IdentifierDecl	"* std_out = daemonCore -> Read_Std_Pipe ( m_pid , 1 )"		3031836	0					
ANR	3031891	IdentifierDeclType	MyString *		3031836	0					
ANR	3031892	Identifier	std_out		3031836	1					
ANR	3031893	AssignmentExpression	"* std_out = daemonCore -> Read_Std_Pipe ( m_pid , 1 )"		3031836	2		=			
ANR	3031894	Identifier	std_out		3031836	0					
ANR	3031895	CallExpression	"daemonCore -> Read_Std_Pipe ( m_pid , 1 )"		3031836	1					
ANR	3031896	Callee	daemonCore -> Read_Std_Pipe		3031836	0					
ANR	3031897	PtrMemberAccess	daemonCore -> Read_Std_Pipe		3031836	0					
ANR	3031898	Identifier	daemonCore		3031836	0					
ANR	3031899	Identifier	Read_Std_Pipe		3031836	1					
ANR	3031900	ArgumentList	m_pid		3031836	1					
ANR	3031901	Argument	m_pid		3031836	0					
ANR	3031902	Identifier	m_pid		3031836	0					
ANR	3031903	Argument	1		3031836	1					
ANR	3031904	PrimaryExpression	1		3031836	0					
ANR	3031905	IfStatement	if ( std_out )		3031836	7					
ANR	3031906	Condition	std_out	79:5:1969:1975	3031836	0	True				
ANR	3031907	Identifier	std_out		3031836	0					
ANR	3031908	CompoundStatement		11:14:308:308	3031836	1					
ANR	3031909	ExpressionStatement	m_std_out = * std_out	80:2:1982:2002	3031836	0	True				
ANR	3031910	AssignmentExpression	m_std_out = * std_out		3031836	0		=			
ANR	3031911	Identifier	m_std_out		3031836	0					
ANR	3031912	UnaryOperationExpression	* std_out		3031836	1					
ANR	3031913	UnaryOperator	*		3031836	0					
ANR	3031914	Identifier	std_out		3031836	1					
ANR	3031915	IdentifierDeclStatement	"MyString * std_err = daemonCore -> Read_Std_Pipe ( m_pid , 2 ) ;"	82:1:2008:2063	3031836	8	True				
ANR	3031916	IdentifierDecl	"* std_err = daemonCore -> Read_Std_Pipe ( m_pid , 2 )"		3031836	0					
ANR	3031917	IdentifierDeclType	MyString *		3031836	0					
ANR	3031918	Identifier	std_err		3031836	1					
ANR	3031919	AssignmentExpression	"* std_err = daemonCore -> Read_Std_Pipe ( m_pid , 2 )"		3031836	2		=			
ANR	3031920	Identifier	std_err		3031836	0					
ANR	3031921	CallExpression	"daemonCore -> Read_Std_Pipe ( m_pid , 2 )"		3031836	1					
ANR	3031922	Callee	daemonCore -> Read_Std_Pipe		3031836	0					
ANR	3031923	PtrMemberAccess	daemonCore -> Read_Std_Pipe		3031836	0					
ANR	3031924	Identifier	daemonCore		3031836	0					
ANR	3031925	Identifier	Read_Std_Pipe		3031836	1					
ANR	3031926	ArgumentList	m_pid		3031836	1					
ANR	3031927	Argument	m_pid		3031836	0					
ANR	3031928	Identifier	m_pid		3031836	0					
ANR	3031929	Argument	2		3031836	1					
ANR	3031930	PrimaryExpression	2		3031836	0					
ANR	3031931	IfStatement	if ( std_err )		3031836	9					
ANR	3031932	Condition	std_err	83:5:2070:2076	3031836	0	True				
ANR	3031933	Identifier	std_err		3031836	0					
ANR	3031934	CompoundStatement		15:14:409:409	3031836	1					
ANR	3031935	ExpressionStatement	m_std_err = * std_err	84:2:2083:2103	3031836	0	True				
ANR	3031936	AssignmentExpression	m_std_err = * std_err		3031836	0		=			
ANR	3031937	Identifier	m_std_err		3031836	0					
ANR	3031938	UnaryOperationExpression	* std_err		3031836	1					
ANR	3031939	UnaryOperator	*		3031836	0					
ANR	3031940	Identifier	std_err		3031836	1					
ANR	3031941	ReturnType	void		3031836	1					
ANR	3031942	Identifier	HookClient :: hookExited		3031836	2					
ANR	3031943	ParameterList	int exit_status		3031836	3					
ANR	3031944	Parameter	int exit_status	69:23:1652:1666	3031836	0	True				
ANR	3031945	ParameterType	int		3031836	0					
ANR	3031946	Identifier	exit_status		3031836	1					
ANR	3031947	CFGEntryNode	ENTRY		3031836		True				
ANR	3031948	CFGExitNode	EXIT		3031836		True				
ANR	3031949	Symbol	std_err		3031836						
ANR	3031950	Symbol	m_hook_path		3031836						
ANR	3031951	Symbol	m_std_err		3031836						
ANR	3031952	Symbol	D_FULLDEBUG		3031836						
ANR	3031953	Symbol	exit_status		3031836						
ANR	3031954	Symbol	status_txt		3031836						
ANR	3031955	Symbol	* std_out		3031836						
ANR	3031956	Symbol	status_txt . Value		3031836						
ANR	3031957	Symbol	m_exit_status		3031836						
ANR	3031958	Symbol	m_pid		3031836						
ANR	3031959	Symbol	m_has_exited		3031836						
ANR	3031960	Symbol	* daemonCore		3031836						
ANR	3031961	Symbol	daemonCore -> Read_Std_Pipe		3031836						
ANR	3031962	Symbol	daemonCore		3031836						
ANR	3031963	Symbol	true		3031836						
ANR	3031964	Symbol	std_out		3031836						
ANR	3031965	Symbol	m_std_out		3031836						
ANR	3031966	Symbol	* std_err		3031836						
