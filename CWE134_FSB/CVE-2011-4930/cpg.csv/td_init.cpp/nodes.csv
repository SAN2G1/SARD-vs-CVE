command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5342099	File	data/converged/CVE-2011-4930_htcondor/td_init.cpp								
ANR	5342100	DeclStmt									
ANR	5342101	Decl							void	void ( void )	usage
ANR	5342102	Function	TransferD :: TransferD	34:0:1111:1471							
ANR	5342103	FunctionDef	TransferD :: TransferD ()		5342102	0					
ANR	5342104	CompoundStatement		38:0:1270:1471	5342102	0					
ANR	5342105	ExpressionStatement	m_initialized = FALSE	39:1:1273:1294	5342102	0	True				
ANR	5342106	AssignmentExpression	m_initialized = FALSE		5342102	0		=			
ANR	5342107	Identifier	m_initialized		5342102	0					
ANR	5342108	Identifier	FALSE		5342102	1					
ANR	5342109	ExpressionStatement	m_update_sock = NULL	40:1:1297:1317	5342102	1	True				
ANR	5342110	AssignmentExpression	m_update_sock = NULL		5342102	0		=			
ANR	5342111	Identifier	m_update_sock		5342102	0					
ANR	5342112	Identifier	NULL		5342102	1					
ANR	5342113	ExpressionStatement	m_inactivity_timer = time ( NULL )	44:1:1438:1469	5342102	2	True				
ANR	5342114	AssignmentExpression	m_inactivity_timer = time ( NULL )		5342102	0		=			
ANR	5342115	Identifier	m_inactivity_timer		5342102	0					
ANR	5342116	CallExpression	time ( NULL )		5342102	1					
ANR	5342117	Callee	time		5342102	0					
ANR	5342118	Identifier	time		5342102	0					
ANR	5342119	ArgumentList	NULL		5342102	1					
ANR	5342120	Argument	NULL		5342102	0					
ANR	5342121	Identifier	NULL		5342102	0					
ANR	5342122	Identifier	TransferD :: TransferD		5342102	1					
ANR	5342123	ParameterList			5342102	2					
ANR	5342124	CFGEntryNode	ENTRY		5342102		True				
ANR	5342125	CFGExitNode	EXIT		5342102		True				
ANR	5342126	Symbol	m_initialized		5342102						
ANR	5342127	Symbol	NULL		5342102						
ANR	5342128	Symbol	m_inactivity_timer		5342102						
ANR	5342129	Symbol	FALSE		5342102						
ANR	5342130	Symbol	time		5342102						
ANR	5342131	Symbol	m_update_sock		5342102						
ANR	5342132	Function	TransferD :: ~TransferD	47:0:1474:1763							
ANR	5342133	FunctionDef	TransferD :: ~TransferD ()		5342132	0					
ANR	5342134	CompoundStatement		48:0:1498:1763	5342132	0					
ANR	5342135	IdentifierDeclStatement	MyString key ;	49:1:1502:1514	5342132	0	True				
ANR	5342136	IdentifierDecl	key		5342132	0					
ANR	5342137	IdentifierDeclType	MyString		5342132	0					
ANR	5342138	Identifier	key		5342132	1					
ANR	5342139	IdentifierDeclStatement	TransferRequest * treq ;	50:1:1517:1538	5342132	1	True				
ANR	5342140	IdentifierDecl	* treq		5342132	0					
ANR	5342141	IdentifierDeclType	TransferRequest *		5342132	0					
ANR	5342142	Identifier	treq		5342132	1					
ANR	5342143	IfStatement	if ( m_initialized == TRUE )		5342132	2					
ANR	5342144	Condition	m_initialized == TRUE	53:5:1582:1602	5342132	0	True				
ANR	5342145	EqualityExpression	m_initialized == TRUE		5342132	0		==			
ANR	5342146	Identifier	m_initialized		5342132	0					
ANR	5342147	Identifier	TRUE		5342132	1					
ANR	5342148	CompoundStatement		6:28:106:106	5342132	1					
ANR	5342149	ExpressionStatement	m_treqs . startIterations ( )	54:2:1609:1634	5342132	0	True				
ANR	5342150	CallExpression	m_treqs . startIterations ( )		5342132	0					
ANR	5342151	Callee	m_treqs . startIterations		5342132	0					
ANR	5342152	MemberAccess	m_treqs . startIterations		5342132	0					
ANR	5342153	Identifier	m_treqs		5342132	0					
ANR	5342154	Identifier	startIterations		5342132	1					
ANR	5342155	ArgumentList			5342132	1					
ANR	5342156	WhileStatement	while ( m_treqs . iterate ( treq ) )		5342132	1					
ANR	5342157	Condition	m_treqs . iterate ( treq )	55:8:1644:1664	5342132	0	True				
ANR	5342158	CallExpression	m_treqs . iterate ( treq )		5342132	0					
ANR	5342159	Callee	m_treqs . iterate		5342132	0					
ANR	5342160	MemberAccess	m_treqs . iterate		5342132	0					
ANR	5342161	Identifier	m_treqs		5342132	0					
ANR	5342162	Identifier	iterate		5342132	1					
ANR	5342163	ArgumentList	treq		5342132	1					
ANR	5342164	Argument	treq		5342132	0					
ANR	5342165	Identifier	treq		5342132	0					
ANR	5342166	CompoundStatement		8:31:168:168	5342132	1					
ANR	5342167	ExpressionStatement	m_treqs . getCurrentKey ( key )	56:3:1672:1698	5342132	0	True				
ANR	5342168	CallExpression	m_treqs . getCurrentKey ( key )		5342132	0					
ANR	5342169	Callee	m_treqs . getCurrentKey		5342132	0					
ANR	5342170	MemberAccess	m_treqs . getCurrentKey		5342132	0					
ANR	5342171	Identifier	m_treqs		5342132	0					
ANR	5342172	Identifier	getCurrentKey		5342132	1					
ANR	5342173	ArgumentList	key		5342132	1					
ANR	5342174	Argument	key		5342132	0					
ANR	5342175	Identifier	key		5342132	0					
ANR	5342176	ExpressionStatement	m_treqs . remove ( key )	57:3:1703:1722	5342132	1	True				
ANR	5342177	CallExpression	m_treqs . remove ( key )		5342132	0					
ANR	5342178	Callee	m_treqs . remove		5342132	0					
ANR	5342179	MemberAccess	m_treqs . remove		5342132	0					
ANR	5342180	Identifier	m_treqs		5342132	0					
ANR	5342181	Identifier	remove		5342132	1					
ANR	5342182	ArgumentList	key		5342132	1					
ANR	5342183	Argument	key		5342132	0					
ANR	5342184	Identifier	key		5342132	0					
ANR	5342185	Statement	delete	58:3:1727:1732	5342132	2	True				
ANR	5342186	ExpressionStatement	treq	58:10:1734:1738	5342132	3	True				
ANR	5342187	Identifier	treq		5342132	0					
ANR	5342188	ExpressionStatement	treq = NULL	59:3:1743:1754	5342132	4	True				
ANR	5342189	AssignmentExpression	treq = NULL		5342132	0		=			
ANR	5342190	Identifier	treq		5342132	0					
ANR	5342191	Identifier	NULL		5342132	1					
ANR	5342192	Identifier	TransferD :: ~TransferD		5342132	1					
ANR	5342193	ParameterList			5342132	2					
ANR	5342194	CFGEntryNode	ENTRY		5342132		True				
ANR	5342195	CFGExitNode	EXIT		5342132		True				
ANR	5342196	Symbol	m_initialized		5342132						
ANR	5342197	Symbol	NULL		5342132						
ANR	5342198	Symbol	TRUE		5342132						
ANR	5342199	Symbol	treq		5342132						
ANR	5342200	Symbol	m_treqs		5342132						
ANR	5342201	Symbol	key		5342132						
ANR	5342202	Symbol	m_treqs . iterate		5342132						
ANR	5342203	Function	TransferD :: init	67:0:1883:4736							
ANR	5342204	FunctionDef	"TransferD :: init (int argc , char * argv [ ])"		5342203	0					
ANR	5342205	CompoundStatement		69:0:1928:4736	5342203	0					
ANR	5342206	IdentifierDeclStatement	RegisterResult ret ;	70:1:1931:1949	5342203	0	True				
ANR	5342207	IdentifierDecl	ret		5342203	0					
ANR	5342208	IdentifierDeclType	RegisterResult		5342203	0					
ANR	5342209	Identifier	ret		5342203	1					
ANR	5342210	IdentifierDeclStatement	int i ;	71:1:1952:1957	5342203	1	True				
ANR	5342211	IdentifierDecl	i		5342203	0					
ANR	5342212	IdentifierDeclType	int		5342203	0					
ANR	5342213	Identifier	i		5342203	1					
ANR	5342214	IdentifierDeclStatement	ReliSock * usock = NULL ;	72:1:1960:1982	5342203	2	True				
ANR	5342215	IdentifierDecl	* usock = NULL		5342203	0					
ANR	5342216	IdentifierDeclType	ReliSock *		5342203	0					
ANR	5342217	Identifier	usock		5342203	1					
ANR	5342218	AssignmentExpression	* usock = NULL		5342203	2		=			
ANR	5342219	Identifier	NULL		5342203	0					
ANR	5342220	Identifier	NULL		5342203	1					
ANR	5342221	IdentifierDeclStatement	unsigned long tout ;	73:1:1985:2003	5342203	3	True				
ANR	5342222	IdentifierDecl	tout		5342203	0					
ANR	5342223	IdentifierDeclType	unsigned long		5342203	0					
ANR	5342224	Identifier	tout		5342203	1					
ANR	5342225	ForStatement	for ( i = 1 ; i < argc ; i ++ )		5342203	4					
ANR	5342226	ForInit	i = 1 ;	77:6:2082:2087	5342203	0	True				
ANR	5342227	AssignmentExpression	i = 1		5342203	0		=			
ANR	5342228	Identifier	i		5342203	0					
ANR	5342229	PrimaryExpression	1		5342203	1					
ANR	5342230	Condition	i < argc	77:13:2089:2096	5342203	1	True				
ANR	5342231	RelationalExpression	i < argc		5342203	0		<			
ANR	5342232	Identifier	i		5342203	0					
ANR	5342233	Identifier	argc		5342203	1					
ANR	5342234	PostIncDecOperationExpression	i ++	77:23:2099:2101	5342203	2	True				
ANR	5342235	Identifier	i		5342203	0					
ANR	5342236	IncDec	++		5342203	1					
ANR	5342237	CompoundStatement		9:28:175:175	5342203	3					
ANR	5342238	IfStatement	"if ( strcmp ( argv [ i ] , ""--schedd"" ) == MATCH )"		5342203	0					
ANR	5342239	Condition	"strcmp ( argv [ i ] , ""--schedd"" ) == MATCH"	79:6:2177:2212	5342203	0	True				
ANR	5342240	EqualityExpression	"strcmp ( argv [ i ] , ""--schedd"" ) == MATCH"		5342203	0		==			
ANR	5342241	CallExpression	"strcmp ( argv [ i ] , ""--schedd"" )"		5342203	0					
ANR	5342242	Callee	strcmp		5342203	0					
ANR	5342243	Identifier	strcmp		5342203	0					
ANR	5342244	ArgumentList	argv [ i ]		5342203	1					
ANR	5342245	Argument	argv [ i ]		5342203	0					
ANR	5342246	ArrayIndexing	argv [ i ]		5342203	0					
ANR	5342247	Identifier	argv		5342203	0					
ANR	5342248	Identifier	i		5342203	1					
ANR	5342249	Argument	"""--schedd"""		5342203	1					
ANR	5342250	PrimaryExpression	"""--schedd"""		5342203	0					
ANR	5342251	Identifier	MATCH		5342203	1					
ANR	5342252	CompoundStatement		11:44:286:286	5342203	1					
ANR	5342253	IfStatement	if ( i + 1 < argc )		5342203	0					
ANR	5342254	Condition	i + 1 < argc	80:7:2224:2233	5342203	0	True				
ANR	5342255	RelationalExpression	i + 1 < argc		5342203	0		<			
ANR	5342256	AdditiveExpression	i + 1		5342203	0		+			
ANR	5342257	Identifier	i		5342203	0					
ANR	5342258	PrimaryExpression	1		5342203	1					
ANR	5342259	Identifier	argc		5342203	1					
ANR	5342260	CompoundStatement		12:19:307:307	5342203	1					
ANR	5342261	ExpressionStatement	g_td . m_features . set_schedd_sinful ( argv [ i + 1 ] )	81:4:2242:2286	5342203	0	True				
ANR	5342262	CallExpression	g_td . m_features . set_schedd_sinful ( argv [ i + 1 ] )		5342203	0					
ANR	5342263	Callee	g_td . m_features . set_schedd_sinful		5342203	0					
ANR	5342264	MemberAccess	g_td . m_features . set_schedd_sinful		5342203	0					
ANR	5342265	MemberAccess	g_td . m_features		5342203	0					
ANR	5342266	Identifier	g_td		5342203	0					
ANR	5342267	Identifier	m_features		5342203	1					
ANR	5342268	Identifier	set_schedd_sinful		5342203	1					
ANR	5342269	ArgumentList	argv [ i + 1 ]		5342203	1					
ANR	5342270	Argument	argv [ i + 1 ]		5342203	0					
ANR	5342271	ArrayIndexing	argv [ i + 1 ]		5342203	0					
ANR	5342272	Identifier	argv		5342203	0					
ANR	5342273	AdditiveExpression	i + 1		5342203	1		+			
ANR	5342274	Identifier	i		5342203	0					
ANR	5342275	PrimaryExpression	1		5342203	1					
ANR	5342276	ExpressionStatement	i ++	82:4:2292:2295	5342203	1	True				
ANR	5342277	PostIncDecOperationExpression	i ++		5342203	0					
ANR	5342278	Identifier	i		5342203	0					
ANR	5342279	IncDec	++		5342203	1					
ANR	5342280	IfStatement	"if ( strcmp ( argv [ i ] , ""--timeout"" ) == MATCH )"		5342203	1					
ANR	5342281	Condition	"strcmp ( argv [ i ] , ""--timeout"" ) == MATCH"	88:6:2459:2495	5342203	0	True				
ANR	5342282	EqualityExpression	"strcmp ( argv [ i ] , ""--timeout"" ) == MATCH"		5342203	0		==			
ANR	5342283	CallExpression	"strcmp ( argv [ i ] , ""--timeout"" )"		5342203	0					
ANR	5342284	Callee	strcmp		5342203	0					
ANR	5342285	Identifier	strcmp		5342203	0					
ANR	5342286	ArgumentList	argv [ i ]		5342203	1					
ANR	5342287	Argument	argv [ i ]		5342203	0					
ANR	5342288	ArrayIndexing	argv [ i ]		5342203	0					
ANR	5342289	Identifier	argv		5342203	0					
ANR	5342290	Identifier	i		5342203	1					
ANR	5342291	Argument	"""--timeout"""		5342203	1					
ANR	5342292	PrimaryExpression	"""--timeout"""		5342203	0					
ANR	5342293	Identifier	MATCH		5342203	1					
ANR	5342294	CompoundStatement		20:45:569:569	5342203	1					
ANR	5342295	IfStatement	if ( i + 1 < argc )		5342203	0					
ANR	5342296	Condition	i + 1 < argc	89:7:2507:2516	5342203	0	True				
ANR	5342297	RelationalExpression	i + 1 < argc		5342203	0		<			
ANR	5342298	AdditiveExpression	i + 1		5342203	0		+			
ANR	5342299	Identifier	i		5342203	0					
ANR	5342300	PrimaryExpression	1		5342203	1					
ANR	5342301	Identifier	argc		5342203	1					
ANR	5342302	CompoundStatement		21:19:590:590	5342203	1					
ANR	5342303	ExpressionStatement	"tout = strtoul ( argv [ i + 1 ] , NULL , 10 )"	90:4:2525:2560	5342203	0	True				
ANR	5342304	AssignmentExpression	"tout = strtoul ( argv [ i + 1 ] , NULL , 10 )"		5342203	0		=			
ANR	5342305	Identifier	tout		5342203	0					
ANR	5342306	CallExpression	"strtoul ( argv [ i + 1 ] , NULL , 10 )"		5342203	1					
ANR	5342307	Callee	strtoul		5342203	0					
ANR	5342308	Identifier	strtoul		5342203	0					
ANR	5342309	ArgumentList	argv [ i + 1 ]		5342203	1					
ANR	5342310	Argument	argv [ i + 1 ]		5342203	0					
ANR	5342311	ArrayIndexing	argv [ i + 1 ]		5342203	0					
ANR	5342312	Identifier	argv		5342203	0					
ANR	5342313	AdditiveExpression	i + 1		5342203	1		+			
ANR	5342314	Identifier	i		5342203	0					
ANR	5342315	PrimaryExpression	1		5342203	1					
ANR	5342316	Argument	NULL		5342203	1					
ANR	5342317	Identifier	NULL		5342203	0					
ANR	5342318	Argument	10		5342203	2					
ANR	5342319	PrimaryExpression	10		5342203	0					
ANR	5342320	ExpressionStatement	g_td . m_features . set_timeout ( tout )	91:4:2566:2599	5342203	1	True				
ANR	5342321	CallExpression	g_td . m_features . set_timeout ( tout )		5342203	0					
ANR	5342322	Callee	g_td . m_features . set_timeout		5342203	0					
ANR	5342323	MemberAccess	g_td . m_features . set_timeout		5342203	0					
ANR	5342324	MemberAccess	g_td . m_features		5342203	0					
ANR	5342325	Identifier	g_td		5342203	0					
ANR	5342326	Identifier	m_features		5342203	1					
ANR	5342327	Identifier	set_timeout		5342203	1					
ANR	5342328	ArgumentList	tout		5342203	1					
ANR	5342329	Argument	tout		5342203	0					
ANR	5342330	Identifier	tout		5342203	0					
ANR	5342331	ExpressionStatement	i ++	92:4:2605:2608	5342203	2	True				
ANR	5342332	PostIncDecOperationExpression	i ++		5342203	0					
ANR	5342333	Identifier	i		5342203	0					
ANR	5342334	IncDec	++		5342203	1					
ANR	5342335	IfStatement	"if ( strcmp ( argv [ i ] , ""--stdin"" ) == MATCH )"		5342203	2					
ANR	5342336	Condition	"strcmp ( argv [ i ] , ""--stdin"" ) == MATCH"	98:6:2754:2788	5342203	0	True				
ANR	5342337	EqualityExpression	"strcmp ( argv [ i ] , ""--stdin"" ) == MATCH"		5342203	0		==			
ANR	5342338	CallExpression	"strcmp ( argv [ i ] , ""--stdin"" )"		5342203	0					
ANR	5342339	Callee	strcmp		5342203	0					
ANR	5342340	Identifier	strcmp		5342203	0					
ANR	5342341	ArgumentList	argv [ i ]		5342203	1					
ANR	5342342	Argument	argv [ i ]		5342203	0					
ANR	5342343	ArrayIndexing	argv [ i ]		5342203	0					
ANR	5342344	Identifier	argv		5342203	0					
ANR	5342345	Identifier	i		5342203	1					
ANR	5342346	Argument	"""--stdin"""		5342203	1					
ANR	5342347	PrimaryExpression	"""--stdin"""		5342203	0					
ANR	5342348	Identifier	MATCH		5342203	1					
ANR	5342349	CompoundStatement		30:43:862:862	5342203	1					
ANR	5342350	ExpressionStatement	g_td . m_features . set_uses_stdin ( TRUE )	99:3:2796:2832	5342203	0	True				
ANR	5342351	CallExpression	g_td . m_features . set_uses_stdin ( TRUE )		5342203	0					
ANR	5342352	Callee	g_td . m_features . set_uses_stdin		5342203	0					
ANR	5342353	MemberAccess	g_td . m_features . set_uses_stdin		5342203	0					
ANR	5342354	MemberAccess	g_td . m_features		5342203	0					
ANR	5342355	Identifier	g_td		5342203	0					
ANR	5342356	Identifier	m_features		5342203	1					
ANR	5342357	Identifier	set_uses_stdin		5342203	1					
ANR	5342358	ArgumentList	TRUE		5342203	1					
ANR	5342359	Argument	TRUE		5342203	0					
ANR	5342360	Identifier	TRUE		5342203	0					
ANR	5342361	IfStatement	"if ( strcmp ( argv [ i ] , ""--id"" ) == MATCH )"		5342203	3					
ANR	5342362	Condition	"strcmp ( argv [ i ] , ""--id"" ) == MATCH"	105:6:2999:3030	5342203	0	True				
ANR	5342363	EqualityExpression	"strcmp ( argv [ i ] , ""--id"" ) == MATCH"		5342203	0		==			
ANR	5342364	CallExpression	"strcmp ( argv [ i ] , ""--id"" )"		5342203	0					
ANR	5342365	Callee	strcmp		5342203	0					
ANR	5342366	Identifier	strcmp		5342203	0					
ANR	5342367	ArgumentList	argv [ i ]		5342203	1					
ANR	5342368	Argument	argv [ i ]		5342203	0					
ANR	5342369	ArrayIndexing	argv [ i ]		5342203	0					
ANR	5342370	Identifier	argv		5342203	0					
ANR	5342371	Identifier	i		5342203	1					
ANR	5342372	Argument	"""--id"""		5342203	1					
ANR	5342373	PrimaryExpression	"""--id"""		5342203	0					
ANR	5342374	Identifier	MATCH		5342203	1					
ANR	5342375	CompoundStatement		37:40:1104:1104	5342203	1					
ANR	5342376	ExpressionStatement	g_td . m_features . set_id ( argv [ i + 1 ] )	106:3:3038:3071	5342203	0	True				
ANR	5342377	CallExpression	g_td . m_features . set_id ( argv [ i + 1 ] )		5342203	0					
ANR	5342378	Callee	g_td . m_features . set_id		5342203	0					
ANR	5342379	MemberAccess	g_td . m_features . set_id		5342203	0					
ANR	5342380	MemberAccess	g_td . m_features		5342203	0					
ANR	5342381	Identifier	g_td		5342203	0					
ANR	5342382	Identifier	m_features		5342203	1					
ANR	5342383	Identifier	set_id		5342203	1					
ANR	5342384	ArgumentList	argv [ i + 1 ]		5342203	1					
ANR	5342385	Argument	argv [ i + 1 ]		5342203	0					
ANR	5342386	ArrayIndexing	argv [ i + 1 ]		5342203	0					
ANR	5342387	Identifier	argv		5342203	0					
ANR	5342388	AdditiveExpression	i + 1		5342203	1		+			
ANR	5342389	Identifier	i		5342203	0					
ANR	5342390	PrimaryExpression	1		5342203	1					
ANR	5342391	ExpressionStatement	i ++	107:3:3076:3079	5342203	1	True				
ANR	5342392	PostIncDecOperationExpression	i ++		5342203	0					
ANR	5342393	Identifier	i		5342203	0					
ANR	5342394	IncDec	++		5342203	1					
ANR	5342395	IfStatement	"if ( strcmp ( argv [ i ] , ""--shadow"" ) == MATCH )"		5342203	4					
ANR	5342396	Condition	"strcmp ( argv [ i ] , ""--shadow"" ) == MATCH"	113:6:3302:3337	5342203	0	True				
ANR	5342397	EqualityExpression	"strcmp ( argv [ i ] , ""--shadow"" ) == MATCH"		5342203	0		==			
ANR	5342398	CallExpression	"strcmp ( argv [ i ] , ""--shadow"" )"		5342203	0					
ANR	5342399	Callee	strcmp		5342203	0					
ANR	5342400	Identifier	strcmp		5342203	0					
ANR	5342401	ArgumentList	argv [ i ]		5342203	1					
ANR	5342402	Argument	argv [ i ]		5342203	0					
ANR	5342403	ArrayIndexing	argv [ i ]		5342203	0					
ANR	5342404	Identifier	argv		5342203	0					
ANR	5342405	Identifier	i		5342203	1					
ANR	5342406	Argument	"""--shadow"""		5342203	1					
ANR	5342407	PrimaryExpression	"""--shadow"""		5342203	0					
ANR	5342408	Identifier	MATCH		5342203	1					
ANR	5342409	CompoundStatement		45:44:1411:1411	5342203	1					
ANR	5342410	ExpressionStatement	g_td . m_features . set_shadow_direction ( argv [ i + 1 ] )	114:3:3345:3392	5342203	0	True				
ANR	5342411	CallExpression	g_td . m_features . set_shadow_direction ( argv [ i + 1 ] )		5342203	0					
ANR	5342412	Callee	g_td . m_features . set_shadow_direction		5342203	0					
ANR	5342413	MemberAccess	g_td . m_features . set_shadow_direction		5342203	0					
ANR	5342414	MemberAccess	g_td . m_features		5342203	0					
ANR	5342415	Identifier	g_td		5342203	0					
ANR	5342416	Identifier	m_features		5342203	1					
ANR	5342417	Identifier	set_shadow_direction		5342203	1					
ANR	5342418	ArgumentList	argv [ i + 1 ]		5342203	1					
ANR	5342419	Argument	argv [ i + 1 ]		5342203	0					
ANR	5342420	ArrayIndexing	argv [ i + 1 ]		5342203	0					
ANR	5342421	Identifier	argv		5342203	0					
ANR	5342422	AdditiveExpression	i + 1		5342203	1		+			
ANR	5342423	Identifier	i		5342203	0					
ANR	5342424	PrimaryExpression	1		5342203	1					
ANR	5342425	ExpressionStatement	i ++	115:3:3397:3400	5342203	1	True				
ANR	5342426	PostIncDecOperationExpression	i ++		5342203	0					
ANR	5342427	Identifier	i		5342203	0					
ANR	5342428	IncDec	++		5342203	1					
ANR	5342429	IfStatement	"if ( strcmp ( argv [ i ] , ""--help"" ) == MATCH )"		5342203	5					
ANR	5342430	Condition	"strcmp ( argv [ i ] , ""--help"" ) == MATCH"	119:6:3443:3476	5342203	0	True				
ANR	5342431	EqualityExpression	"strcmp ( argv [ i ] , ""--help"" ) == MATCH"		5342203	0		==			
ANR	5342432	CallExpression	"strcmp ( argv [ i ] , ""--help"" )"		5342203	0					
ANR	5342433	Callee	strcmp		5342203	0					
ANR	5342434	Identifier	strcmp		5342203	0					
ANR	5342435	ArgumentList	argv [ i ]		5342203	1					
ANR	5342436	Argument	argv [ i ]		5342203	0					
ANR	5342437	ArrayIndexing	argv [ i ]		5342203	0					
ANR	5342438	Identifier	argv		5342203	0					
ANR	5342439	Identifier	i		5342203	1					
ANR	5342440	Argument	"""--help"""		5342203	1					
ANR	5342441	PrimaryExpression	"""--help"""		5342203	0					
ANR	5342442	Identifier	MATCH		5342203	1					
ANR	5342443	CompoundStatement		51:42:1550:1550	5342203	1					
ANR	5342444	ExpressionStatement	usage ( )	120:3:3484:3491	5342203	0	True				
ANR	5342445	CallExpression	usage ( )		5342203	0					
ANR	5342446	Callee	usage		5342203	0					
ANR	5342447	Identifier	usage		5342203	0					
ANR	5342448	ArgumentList			5342203	1					
ANR	5342449	IfStatement	if ( g_td . m_features . get_uses_stdin ( ) == TRUE )		5342203	5					
ANR	5342450	Condition	g_td . m_features . get_uses_stdin ( ) == TRUE	132:5:3821:3860	5342203	0	True				
ANR	5342451	EqualityExpression	g_td . m_features . get_uses_stdin ( ) == TRUE		5342203	0		==			
ANR	5342452	CallExpression	g_td . m_features . get_uses_stdin ( )		5342203	0					
ANR	5342453	Callee	g_td . m_features . get_uses_stdin		5342203	0					
ANR	5342454	MemberAccess	g_td . m_features . get_uses_stdin		5342203	0					
ANR	5342455	MemberAccess	g_td . m_features		5342203	0					
ANR	5342456	Identifier	g_td		5342203	0					
ANR	5342457	Identifier	m_features		5342203	1					
ANR	5342458	Identifier	get_uses_stdin		5342203	1					
ANR	5342459	ArgumentList			5342203	1					
ANR	5342460	Identifier	TRUE		5342203	1					
ANR	5342461	CompoundStatement		64:47:1934:1934	5342203	1					
ANR	5342462	ExpressionStatement	"dprintf ( D_ALWAYS , ""Loading transfer request from stdin...\\n"" )"	133:2:3867:3928	5342203	0	True				
ANR	5342463	CallExpression	"dprintf ( D_ALWAYS , ""Loading transfer request from stdin...\\n"" )"		5342203	0					
ANR	5342464	Callee	dprintf		5342203	0					
ANR	5342465	Identifier	dprintf		5342203	0					
ANR	5342466	ArgumentList	D_ALWAYS		5342203	1					
ANR	5342467	Argument	D_ALWAYS		5342203	0					
ANR	5342468	Identifier	D_ALWAYS		5342203	0					
ANR	5342469	Argument	"""Loading transfer request from stdin...\\n"""		5342203	1					
ANR	5342470	PrimaryExpression	"""Loading transfer request from stdin...\\n"""		5342203	0					
ANR	5342471	ExpressionStatement	g_td . accept_transfer_request ( stdin )	134:2:3932:3967	5342203	1	True				
ANR	5342472	CallExpression	g_td . accept_transfer_request ( stdin )		5342203	0					
ANR	5342473	Callee	g_td . accept_transfer_request		5342203	0					
ANR	5342474	MemberAccess	g_td . accept_transfer_request		5342203	0					
ANR	5342475	Identifier	g_td		5342203	0					
ANR	5342476	Identifier	accept_transfer_request		5342203	1					
ANR	5342477	ArgumentList	stdin		5342203	1					
ANR	5342478	Argument	stdin		5342203	0					
ANR	5342479	Identifier	stdin		5342203	0					
ANR	5342480	ExpressionStatement	ret = g_td . register_to_schedd ( & usock )	138:1:4036:4073	5342203	6	True				
ANR	5342481	AssignmentExpression	ret = g_td . register_to_schedd ( & usock )		5342203	0		=			
ANR	5342482	Identifier	ret		5342203	0					
ANR	5342483	CallExpression	g_td . register_to_schedd ( & usock )		5342203	1					
ANR	5342484	Callee	g_td . register_to_schedd		5342203	0					
ANR	5342485	MemberAccess	g_td . register_to_schedd		5342203	0					
ANR	5342486	Identifier	g_td		5342203	0					
ANR	5342487	Identifier	register_to_schedd		5342203	1					
ANR	5342488	ArgumentList	& usock		5342203	1					
ANR	5342489	Argument	& usock		5342203	0					
ANR	5342490	UnaryOperationExpression	& usock		5342203	0					
ANR	5342491	UnaryOperator	&		5342203	0					
ANR	5342492	Identifier	usock		5342203	1					
ANR	5342493	SwitchStatement	switch ( ret )		5342203	7					
ANR	5342494	Condition	ret	140:8:4084:4086	5342203	0	True				
ANR	5342495	Identifier	ret		5342203	0					
ANR	5342496	CompoundStatement		72:13:2160:2160	5342203	1					
ANR	5342497	Label	case REG_RESULT_NO_SCHEDD :	141:2:4093:4118	5342203	0	True				
ANR	5342498	Identifier	REG_RESULT_NO_SCHEDD		5342203	0					
ANR	5342499	BreakStatement	break ;	144:3:4227:4232	5342203	1	True				
ANR	5342500	Label	case REG_RESULT_FAILED :	145:2:4236:4258	5342203	2	True				
ANR	5342501	Identifier	REG_RESULT_FAILED		5342203	0					
ANR	5342502	ExpressionStatement	"EXCEPT ( ""Failed to register to schedd! Aborting."" )"	150:3:4498:4547	5342203	3	True				
ANR	5342503	CallExpression	"EXCEPT ( ""Failed to register to schedd! Aborting."" )"		5342203	0					
ANR	5342504	Callee	EXCEPT		5342203	0					
ANR	5342505	Identifier	EXCEPT		5342203	0					
ANR	5342506	ArgumentList	"""Failed to register to schedd! Aborting."""		5342203	1					
ANR	5342507	Argument	"""Failed to register to schedd! Aborting."""		5342203	0					
ANR	5342508	PrimaryExpression	"""Failed to register to schedd! Aborting."""		5342203	0					
ANR	5342509	BreakStatement	break ;	151:3:4552:4557	5342203	4	True				
ANR	5342510	Label	case REG_RESULT_SUCCESS :	153:2:4562:4585	5342203	5	True				
ANR	5342511	Identifier	REG_RESULT_SUCCESS		5342203	0					
ANR	5342512	ExpressionStatement	m_update_sock = usock	155:3:4628:4649	5342203	6	True				
ANR	5342513	AssignmentExpression	m_update_sock = usock		5342203	0		=			
ANR	5342514	Identifier	m_update_sock		5342203	0					
ANR	5342515	Identifier	usock		5342203	1					
ANR	5342516	BreakStatement	break ;	156:3:4654:4659	5342203	7	True				
ANR	5342517	Label	default :	158:2:4664:4671	5342203	8	True				
ANR	5342518	Identifier	default		5342203	0					
ANR	5342519	ExpressionStatement	"EXCEPT ( ""TransferD::init() Programmer error!"" )"	159:3:4676:4721	5342203	9	True				
ANR	5342520	CallExpression	"EXCEPT ( ""TransferD::init() Programmer error!"" )"		5342203	0					
ANR	5342521	Callee	EXCEPT		5342203	0					
ANR	5342522	Identifier	EXCEPT		5342203	0					
ANR	5342523	ArgumentList	"""TransferD::init() Programmer error!"""		5342203	1					
ANR	5342524	Argument	"""TransferD::init() Programmer error!"""		5342203	0					
ANR	5342525	PrimaryExpression	"""TransferD::init() Programmer error!"""		5342203	0					
ANR	5342526	BreakStatement	break ;	160:3:4726:4731	5342203	10	True				
ANR	5342527	ReturnType	void		5342203	1					
ANR	5342528	Identifier	TransferD :: init		5342203	2					
ANR	5342529	ParameterList	"int argc , char * argv [ ]"		5342203	3					
ANR	5342530	Parameter	int argc	68:16:1904:1911	5342203	0	True				
ANR	5342531	ParameterType	int		5342203	0					
ANR	5342532	Identifier	argc		5342203	1					
ANR	5342533	Parameter	char * argv [ ]	68:26:1914:1925	5342203	1	True				
ANR	5342534	ParameterType	char * [ ]		5342203	0					
ANR	5342535	Identifier	argv		5342203	1					
ANR	5342536	CFGEntryNode	ENTRY		5342203		True				
ANR	5342537	CFGExitNode	EXIT		5342203		True				
ANR	5342538	Symbol	argc		5342203						
ANR	5342539	Symbol	ret		5342203						
ANR	5342540	Symbol	strcmp		5342203						
ANR	5342541	Symbol	stdin		5342203						
ANR	5342542	Symbol	NULL		5342203						
ANR	5342543	Symbol	D_ALWAYS		5342203						
ANR	5342544	Symbol	i		5342203						
ANR	5342545	Symbol	TRUE		5342203						
ANR	5342546	Symbol	* argv		5342203						
ANR	5342547	Symbol	tout		5342203						
ANR	5342548	Symbol	argv		5342203						
ANR	5342549	Symbol	g_td . m_features . get_uses_stdin		5342203						
ANR	5342550	Symbol	m_update_sock		5342203						
ANR	5342551	Symbol	& usock		5342203						
ANR	5342552	Symbol	* i		5342203						
ANR	5342553	Symbol	g_td . register_to_schedd		5342203						
ANR	5342554	Symbol	g_td		5342203						
ANR	5342555	Symbol	strtoul		5342203						
ANR	5342556	Symbol	g_td . m_features		5342203						
ANR	5342557	Symbol	MATCH		5342203						
ANR	5342558	Symbol	usock		5342203						
ANR	5342559	Function	TransferD :: accept_transfer_request	165:0:4806:5919							
ANR	5342560	FunctionDef	TransferD :: accept_transfer_request (FILE * fin)		5342559	0					
ANR	5342561	CompoundStatement		167:0:4856:5919	5342559	0					
ANR	5342562	IdentifierDeclStatement	MyString encapsulation_method_line ;	168:1:4859:4893	5342559	0	True				
ANR	5342563	IdentifierDecl	encapsulation_method_line		5342559	0					
ANR	5342564	IdentifierDeclType	MyString		5342559	0					
ANR	5342565	Identifier	encapsulation_method_line		5342559	1					
ANR	5342566	IdentifierDeclStatement	MyString encap_end_line ;	169:1:4896:4919	5342559	1	True				
ANR	5342567	IdentifierDecl	encap_end_line		5342559	0					
ANR	5342568	IdentifierDeclType	MyString		5342559	0					
ANR	5342569	Identifier	encap_end_line		5342559	1					
ANR	5342570	IdentifierDeclStatement	EncapMethod em ;	170:1:4922:4936	5342559	2	True				
ANR	5342571	IdentifierDecl	em		5342559	0					
ANR	5342572	IdentifierDeclType	EncapMethod		5342559	0					
ANR	5342573	Identifier	em		5342559	1					
ANR	5342574	IdentifierDeclStatement	int rval = 0 ;	171:1:4939:4951	5342559	3	True				
ANR	5342575	IdentifierDecl	rval = 0		5342559	0					
ANR	5342576	IdentifierDeclType	int		5342559	0					
ANR	5342577	Identifier	rval		5342559	1					
ANR	5342578	AssignmentExpression	rval = 0		5342559	2		=			
ANR	5342579	Identifier	rval		5342559	0					
ANR	5342580	PrimaryExpression	0		5342559	1					
ANR	5342581	IfStatement	if ( encapsulation_method_line . readLine ( fin ) == FALSE )		5342559	4					
ANR	5342582	Condition	encapsulation_method_line . readLine ( fin ) == FALSE	178:5:5214:5261	5342559	0	True				
ANR	5342583	EqualityExpression	encapsulation_method_line . readLine ( fin ) == FALSE		5342559	0		==			
ANR	5342584	CallExpression	encapsulation_method_line . readLine ( fin )		5342559	0					
ANR	5342585	Callee	encapsulation_method_line . readLine		5342559	0					
ANR	5342586	MemberAccess	encapsulation_method_line . readLine		5342559	0					
ANR	5342587	Identifier	encapsulation_method_line		5342559	0					
ANR	5342588	Identifier	readLine		5342559	1					
ANR	5342589	ArgumentList	fin		5342559	1					
ANR	5342590	Argument	fin		5342559	0					
ANR	5342591	Identifier	fin		5342559	0					
ANR	5342592	Identifier	FALSE		5342559	1					
ANR	5342593	CompoundStatement		12:55:407:407	5342559	1					
ANR	5342594	ExpressionStatement	"EXCEPT ( ""Failed to read encapsulation method line!"" )"	179:2:5268:5319	5342559	0	True				
ANR	5342595	CallExpression	"EXCEPT ( ""Failed to read encapsulation method line!"" )"		5342559	0					
ANR	5342596	Callee	EXCEPT		5342559	0					
ANR	5342597	Identifier	EXCEPT		5342559	0					
ANR	5342598	ArgumentList	"""Failed to read encapsulation method line!"""		5342559	1					
ANR	5342599	Argument	"""Failed to read encapsulation method line!"""		5342559	0					
ANR	5342600	PrimaryExpression	"""Failed to read encapsulation method line!"""		5342559	0					
ANR	5342601	ExpressionStatement	encapsulation_method_line . trim ( )	181:1:5325:5357	5342559	5	True				
ANR	5342602	CallExpression	encapsulation_method_line . trim ( )		5342559	0					
ANR	5342603	Callee	encapsulation_method_line . trim		5342559	0					
ANR	5342604	MemberAccess	encapsulation_method_line . trim		5342559	0					
ANR	5342605	Identifier	encapsulation_method_line		5342559	0					
ANR	5342606	Identifier	trim		5342559	1					
ANR	5342607	ArgumentList			5342559	1					
ANR	5342608	ExpressionStatement	em = encap_method ( encapsulation_method_line )	183:1:5361:5405	5342559	6	True				
ANR	5342609	AssignmentExpression	em = encap_method ( encapsulation_method_line )		5342559	0		=			
ANR	5342610	Identifier	em		5342559	0					
ANR	5342611	CallExpression	encap_method ( encapsulation_method_line )		5342559	1					
ANR	5342612	Callee	encap_method		5342559	0					
ANR	5342613	Identifier	encap_method		5342559	0					
ANR	5342614	ArgumentList	encapsulation_method_line		5342559	1					
ANR	5342615	Argument	encapsulation_method_line		5342559	0					
ANR	5342616	Identifier	encapsulation_method_line		5342559	0					
ANR	5342617	SwitchStatement	switch ( em )		5342559	7					
ANR	5342618	Condition	em	187:9:5506:5507	5342559	0	True				
ANR	5342619	Identifier	em		5342559	0					
ANR	5342620	CompoundStatement		21:13:653:653	5342559	1					
ANR	5342621	Label	case ENCAP_METHOD_UNKNOWN :	189:2:5515:5540	5342559	0	True				
ANR	5342622	Identifier	ENCAP_METHOD_UNKNOWN		5342559	0					
ANR	5342623	Statement	EXCEPT	190:3:5545:5550	5342559	1	True				
ANR	5342624	Statement	(	190:9:5551:5551	5342559	2	True				
ANR	5342625	Statement	"""I don't understand the encapsulation method of the """	190:10:5552:5604	5342559	3	True				
ANR	5342626	Statement	"""protocol: %s\\n"""	191:5:5611:5626	5342559	4	True				
ANR	5342627	Statement	","	191:21:5627:5627	5342559	5	True				
ANR	5342628	Statement	encapsulation_method_line	191:23:5629:5653	5342559	6	True				
ANR	5342629	Statement	.	191:48:5654:5654	5342559	7	True				
ANR	5342630	Statement	Value	191:49:5655:5659	5342559	8	True				
ANR	5342631	Statement	(	191:54:5660:5660	5342559	9	True				
ANR	5342632	Statement	)	191:55:5661:5661	5342559	10	True				
ANR	5342633	Statement	)	191:56:5662:5662	5342559	11	True				
ANR	5342634	ExpressionStatement		191:57:5663:5663	5342559	12	True				
ANR	5342635	BreakStatement	break ;	192:3:5668:5673	5342559	13	True				
ANR	5342636	Label	case ENCAP_METHOD_OLD_CLASSADS :	194:2:5678:5708	5342559	14	True				
ANR	5342637	Identifier	ENCAP_METHOD_OLD_CLASSADS		5342559	0					
ANR	5342638	ExpressionStatement	rval = accept_transfer_request_encapsulation_old_classads ( fin )	195:3:5713:5775	5342559	15	True				
ANR	5342639	AssignmentExpression	rval = accept_transfer_request_encapsulation_old_classads ( fin )		5342559	0		=			
ANR	5342640	Identifier	rval		5342559	0					
ANR	5342641	CallExpression	accept_transfer_request_encapsulation_old_classads ( fin )		5342559	1					
ANR	5342642	Callee	accept_transfer_request_encapsulation_old_classads		5342559	0					
ANR	5342643	Identifier	accept_transfer_request_encapsulation_old_classads		5342559	0					
ANR	5342644	ArgumentList	fin		5342559	1					
ANR	5342645	Argument	fin		5342559	0					
ANR	5342646	Identifier	fin		5342559	0					
ANR	5342647	BreakStatement	break ;	196:3:5780:5785	5342559	16	True				
ANR	5342648	Label	default :	198:2:5790:5797	5342559	17	True				
ANR	5342649	Identifier	default		5342559	0					
ANR	5342650	ExpressionStatement	"EXCEPT ( ""TransferD::init(): Programmer error! encap unhandled!"" )"	199:3:5802:5865	5342559	18	True				
ANR	5342651	CallExpression	"EXCEPT ( ""TransferD::init(): Programmer error! encap unhandled!"" )"		5342559	0					
ANR	5342652	Callee	EXCEPT		5342559	0					
ANR	5342653	Identifier	EXCEPT		5342559	0					
ANR	5342654	ArgumentList	"""TransferD::init(): Programmer error! encap unhandled!"""		5342559	1					
ANR	5342655	Argument	"""TransferD::init(): Programmer error! encap unhandled!"""		5342559	0					
ANR	5342656	PrimaryExpression	"""TransferD::init(): Programmer error! encap unhandled!"""		5342559	0					
ANR	5342657	BreakStatement	break ;	200:3:5870:5875	5342559	19	True				
ANR	5342658	ExpressionStatement	m_initialized = TRUE	203:1:5882:5902	5342559	8	True				
ANR	5342659	AssignmentExpression	m_initialized = TRUE		5342559	0		=			
ANR	5342660	Identifier	m_initialized		5342559	0					
ANR	5342661	Identifier	TRUE		5342559	1					
ANR	5342662	ReturnStatement	return rval ;	205:1:5906:5917	5342559	9	True				
ANR	5342663	Identifier	rval		5342559	0					
ANR	5342664	ReturnType	int		5342559	1					
ANR	5342665	Identifier	TransferD :: accept_transfer_request		5342559	2					
ANR	5342666	ParameterList	FILE * fin		5342559	3					
ANR	5342667	Parameter	FILE * fin	166:35:4845:4853	5342559	0	True				
ANR	5342668	ParameterType	FILE *		5342559	0					
ANR	5342669	Identifier	fin		5342559	1					
ANR	5342670	CFGEntryNode	ENTRY		5342559		True				
ANR	5342671	CFGExitNode	EXIT		5342559		True				
ANR	5342672	Symbol	m_initialized		5342559						
ANR	5342673	Symbol	encapsulation_method_line		5342559						
ANR	5342674	Symbol	accept_transfer_request_encapsulation_old_classads		5342559						
ANR	5342675	Symbol	em		5342559						
ANR	5342676	Symbol	TRUE		5342559						
ANR	5342677	Symbol	fin		5342559						
ANR	5342678	Symbol	encap_end_line		5342559						
ANR	5342679	Symbol	rval		5342559						
ANR	5342680	Symbol	FALSE		5342559						
ANR	5342681	Symbol	encap_method		5342559						
ANR	5342682	Symbol	encapsulation_method_line . readLine		5342559						
ANR	5342683	Function	TransferD :: accept_transfer_request_encapsulation_old_classads	210:0:6012:7439							
ANR	5342684	FunctionDef	TransferD :: accept_transfer_request_encapsulation_old_classads (FILE * fin)		5342683	0					
ANR	5342685	CompoundStatement		212:0:6089:7439	5342683	0					
ANR	5342686	IdentifierDeclStatement	int i ;	213:1:6092:6097	5342683	0	True				
ANR	5342687	IdentifierDecl	i		5342683	0					
ANR	5342688	IdentifierDeclType	int		5342683	0					
ANR	5342689	Identifier	i		5342683	1					
ANR	5342690	IdentifierDeclStatement	"int eof , error , empty ;"	214:1:6100:6121	5342683	1	True				
ANR	5342691	IdentifierDecl	eof		5342683	0					
ANR	5342692	IdentifierDeclType	int		5342683	0					
ANR	5342693	Identifier	eof		5342683	1					
ANR	5342694	IdentifierDecl	error		5342683	1					
ANR	5342695	IdentifierDeclType	int		5342683	0					
ANR	5342696	Identifier	error		5342683	1					
ANR	5342697	IdentifierDecl	empty		5342683	2					
ANR	5342698	IdentifierDeclType	int		5342683	0					
ANR	5342699	Identifier	empty		5342683	1					
ANR	5342700	IdentifierDeclStatement	"const char * classad_delimitor = ""---\\n"" ;"	215:1:6124:6163	5342683	2	True				
ANR	5342701	IdentifierDecl	"* classad_delimitor = ""---\\n"""		5342683	0					
ANR	5342702	IdentifierDeclType	const char *		5342683	0					
ANR	5342703	Identifier	classad_delimitor		5342683	1					
ANR	5342704	AssignmentExpression	"* classad_delimitor = ""---\\n"""		5342683	2		=			
ANR	5342705	Identifier	classad_delimitor		5342683	0					
ANR	5342706	PrimaryExpression	"""---\\n"""		5342683	1					
ANR	5342707	IdentifierDeclStatement	ClassAd * ad ;	216:1:6166:6177	5342683	3	True				
ANR	5342708	IdentifierDecl	* ad		5342683	0					
ANR	5342709	IdentifierDeclType	ClassAd *		5342683	0					
ANR	5342710	Identifier	ad		5342683	1					
ANR	5342711	IdentifierDeclStatement	TransferRequest * treq = NULL ;	217:1:6180:6208	5342683	4	True				
ANR	5342712	IdentifierDecl	* treq = NULL		5342683	0					
ANR	5342713	IdentifierDeclType	TransferRequest *		5342683	0					
ANR	5342714	Identifier	treq		5342683	1					
ANR	5342715	AssignmentExpression	* treq = NULL		5342683	2		=			
ANR	5342716	Identifier	NULL		5342683	0					
ANR	5342717	Identifier	NULL		5342683	1					
ANR	5342718	IdentifierDeclStatement	MyString cap ;	218:1:6211:6223	5342683	5	True				
ANR	5342719	IdentifierDecl	cap		5342683	0					
ANR	5342720	IdentifierDeclType	MyString		5342683	0					
ANR	5342721	Identifier	cap		5342683	1					
ANR	5342722	ExpressionStatement	"ad = new ClassAd ( fin , classad_delimitor , eof , error , empty )"	221:1:6292:6351	5342683	6	True				
ANR	5342723	AssignmentExpression	"ad = new ClassAd ( fin , classad_delimitor , eof , error , empty )"		5342683	0		=			
ANR	5342724	Identifier	ad		5342683	0					
ANR	5342725	Expression	"fin , classad_delimitor , eof , error , empty"		5342683	1					
ANR	5342726	Identifier	fin		5342683	0					
ANR	5342727	Expression	"classad_delimitor , eof , error , empty"		5342683	1					
ANR	5342728	Identifier	classad_delimitor		5342683	0					
ANR	5342729	Expression	"eof , error , empty"		5342683	1					
ANR	5342730	Identifier	eof		5342683	0					
ANR	5342731	Expression	"error , empty"		5342683	1					
ANR	5342732	Identifier	error		5342683	0					
ANR	5342733	Identifier	empty		5342683	1					
ANR	5342734	IfStatement	if ( empty == TRUE )		5342683	7					
ANR	5342735	Condition	empty == TRUE	222:5:6358:6370	5342683	0	True				
ANR	5342736	EqualityExpression	empty == TRUE		5342683	0		==			
ANR	5342737	Identifier	empty		5342683	0					
ANR	5342738	Identifier	TRUE		5342683	1					
ANR	5342739	CompoundStatement		11:20:283:283	5342683	1					
ANR	5342740	ExpressionStatement	"EXCEPT ( ""Protocol faliure, can't read initial Info Packet"" )"	223:2:6377:6435	5342683	0	True				
ANR	5342741	CallExpression	"EXCEPT ( ""Protocol faliure, can't read initial Info Packet"" )"		5342683	0					
ANR	5342742	Callee	EXCEPT		5342683	0					
ANR	5342743	Identifier	EXCEPT		5342683	0					
ANR	5342744	ArgumentList	"""Protocol faliure, can't read initial Info Packet"""		5342683	1					
ANR	5342745	Argument	"""Protocol faliure, can't read initial Info Packet"""		5342683	0					
ANR	5342746	PrimaryExpression	"""Protocol faliure, can't read initial Info Packet"""		5342683	0					
ANR	5342747	ExpressionStatement	treq = new TransferRequest ( ad )	227:1:6511:6541	5342683	8	True				
ANR	5342748	AssignmentExpression	treq = new TransferRequest ( ad )		5342683	0		=			
ANR	5342749	Identifier	treq		5342683	0					
ANR	5342750	Identifier	ad		5342683	1					
ANR	5342751	IfStatement	if ( treq == NULL )		5342683	9					
ANR	5342752	Condition	treq == NULL	228:5:6548:6559	5342683	0	True				
ANR	5342753	EqualityExpression	treq == NULL		5342683	0		==			
ANR	5342754	Identifier	treq		5342683	0					
ANR	5342755	Identifier	NULL		5342683	1					
ANR	5342756	CompoundStatement		17:19:472:472	5342683	1					
ANR	5342757	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	229:2:6566:6590	5342683	0	True				
ANR	5342758	CallExpression	"EXCEPT ( ""Out of memory!"" )"		5342683	0					
ANR	5342759	Callee	EXCEPT		5342683	0					
ANR	5342760	Identifier	EXCEPT		5342683	0					
ANR	5342761	ArgumentList	"""Out of memory!"""		5342683	1					
ANR	5342762	Argument	"""Out of memory!"""		5342683	0					
ANR	5342763	PrimaryExpression	"""Out of memory!"""		5342683	0					
ANR	5342764	ExpressionStatement	treq -> dprintf ( D_ALWAYS )	232:1:6597:6620	5342683	10	True				
ANR	5342765	CallExpression	treq -> dprintf ( D_ALWAYS )		5342683	0					
ANR	5342766	Callee	treq -> dprintf		5342683	0					
ANR	5342767	PtrMemberAccess	treq -> dprintf		5342683	0					
ANR	5342768	Identifier	treq		5342683	0					
ANR	5342769	Identifier	dprintf		5342683	1					
ANR	5342770	ArgumentList	D_ALWAYS		5342683	1					
ANR	5342771	Argument	D_ALWAYS		5342683	0					
ANR	5342772	Identifier	D_ALWAYS		5342683	0					
ANR	5342773	IfStatement	if ( treq -> get_num_transfers ( ) <= 0 )		5342683	11					
ANR	5342774	Condition	treq -> get_num_transfers ( ) <= 0	235:5:6705:6734	5342683	0	True				
ANR	5342775	RelationalExpression	treq -> get_num_transfers ( ) <= 0		5342683	0		<=			
ANR	5342776	CallExpression	treq -> get_num_transfers ( )		5342683	0					
ANR	5342777	Callee	treq -> get_num_transfers		5342683	0					
ANR	5342778	PtrMemberAccess	treq -> get_num_transfers		5342683	0					
ANR	5342779	Identifier	treq		5342683	0					
ANR	5342780	Identifier	get_num_transfers		5342683	1					
ANR	5342781	ArgumentList			5342683	1					
ANR	5342782	PrimaryExpression	0		5342683	1					
ANR	5342783	CompoundStatement		24:37:647:647	5342683	1					
ANR	5342784	ExpressionStatement	"EXCEPT ( ""Protocol error!"" )"	236:2:6741:6766	5342683	0	True				
ANR	5342785	CallExpression	"EXCEPT ( ""Protocol error!"" )"		5342683	0					
ANR	5342786	Callee	EXCEPT		5342683	0					
ANR	5342787	Identifier	EXCEPT		5342683	0					
ANR	5342788	ArgumentList	"""Protocol error!"""		5342683	1					
ANR	5342789	Argument	"""Protocol error!"""		5342683	0					
ANR	5342790	PrimaryExpression	"""Protocol error!"""		5342683	0					
ANR	5342791	ForStatement	for ( i = 0 ; i < treq -> get_num_transfers ( ) ; i ++ )		5342683	12					
ANR	5342792	ForInit	i = 0 ;	240:6:6841:6846	5342683	0	True				
ANR	5342793	AssignmentExpression	i = 0		5342683	0		=			
ANR	5342794	Identifier	i		5342683	0					
ANR	5342795	PrimaryExpression	0		5342683	1					
ANR	5342796	Condition	i < treq -> get_num_transfers ( )	240:13:6848:6876	5342683	1	True				
ANR	5342797	RelationalExpression	i < treq -> get_num_transfers ( )		5342683	0		<			
ANR	5342798	Identifier	i		5342683	0					
ANR	5342799	CallExpression	treq -> get_num_transfers ( )		5342683	1					
ANR	5342800	Callee	treq -> get_num_transfers		5342683	0					
ANR	5342801	PtrMemberAccess	treq -> get_num_transfers		5342683	0					
ANR	5342802	Identifier	treq		5342683	0					
ANR	5342803	Identifier	get_num_transfers		5342683	1					
ANR	5342804	ArgumentList			5342683	1					
ANR	5342805	PostIncDecOperationExpression	i ++	240:44:6879:6881	5342683	2	True				
ANR	5342806	Identifier	i		5342683	0					
ANR	5342807	IncDec	++		5342683	1					
ANR	5342808	CompoundStatement		29:49:794:794	5342683	3					
ANR	5342809	ExpressionStatement	"ad = new ClassAd ( fin , classad_delimitor , eof , error , empty )"	241:2:6888:6947	5342683	0	True				
ANR	5342810	AssignmentExpression	"ad = new ClassAd ( fin , classad_delimitor , eof , error , empty )"		5342683	0		=			
ANR	5342811	Identifier	ad		5342683	0					
ANR	5342812	Expression	"fin , classad_delimitor , eof , error , empty"		5342683	1					
ANR	5342813	Identifier	fin		5342683	0					
ANR	5342814	Expression	"classad_delimitor , eof , error , empty"		5342683	1					
ANR	5342815	Identifier	classad_delimitor		5342683	0					
ANR	5342816	Expression	"eof , error , empty"		5342683	1					
ANR	5342817	Identifier	eof		5342683	0					
ANR	5342818	Expression	"error , empty"		5342683	1					
ANR	5342819	Identifier	error		5342683	0					
ANR	5342820	Identifier	empty		5342683	1					
ANR	5342821	IfStatement	if ( empty == TRUE )		5342683	1					
ANR	5342822	Condition	empty == TRUE	242:6:6955:6967	5342683	0	True				
ANR	5342823	EqualityExpression	empty == TRUE		5342683	0		==			
ANR	5342824	Identifier	empty		5342683	0					
ANR	5342825	Identifier	TRUE		5342683	1					
ANR	5342826	CompoundStatement		31:21:880:880	5342683	1					
ANR	5342827	ExpressionStatement	"EXCEPT ( ""Expected %d transfer job ads, got %d instead."" , treq -> get_num_transfers ( ) , i )"	243:3:6975:7065	5342683	0	True				
ANR	5342828	CallExpression	"EXCEPT ( ""Expected %d transfer job ads, got %d instead."" , treq -> get_num_transfers ( ) , i )"		5342683	0					
ANR	5342829	Callee	EXCEPT		5342683	0					
ANR	5342830	Identifier	EXCEPT		5342683	0					
ANR	5342831	ArgumentList	"""Expected %d transfer job ads, got %d instead."""		5342683	1					
ANR	5342832	Argument	"""Expected %d transfer job ads, got %d instead."""		5342683	0					
ANR	5342833	PrimaryExpression	"""Expected %d transfer job ads, got %d instead."""		5342683	0					
ANR	5342834	Argument	treq -> get_num_transfers ( )		5342683	1					
ANR	5342835	CallExpression	treq -> get_num_transfers ( )		5342683	0					
ANR	5342836	Callee	treq -> get_num_transfers		5342683	0					
ANR	5342837	PtrMemberAccess	treq -> get_num_transfers		5342683	0					
ANR	5342838	Identifier	treq		5342683	0					
ANR	5342839	Identifier	get_num_transfers		5342683	1					
ANR	5342840	ArgumentList			5342683	1					
ANR	5342841	Argument	i		5342683	2					
ANR	5342842	Identifier	i		5342683	0					
ANR	5342843	ExpressionStatement	ad -> dPrint ( D_ALWAYS )	246:2:7073:7093	5342683	2	True				
ANR	5342844	CallExpression	ad -> dPrint ( D_ALWAYS )		5342683	0					
ANR	5342845	Callee	ad -> dPrint		5342683	0					
ANR	5342846	PtrMemberAccess	ad -> dPrint		5342683	0					
ANR	5342847	Identifier	ad		5342683	0					
ANR	5342848	Identifier	dPrint		5342683	1					
ANR	5342849	ArgumentList	D_ALWAYS		5342683	1					
ANR	5342850	Argument	D_ALWAYS		5342683	0					
ANR	5342851	Identifier	D_ALWAYS		5342683	0					
ANR	5342852	ExpressionStatement	treq -> append_task ( ad )	247:2:7097:7118	5342683	3	True				
ANR	5342853	CallExpression	treq -> append_task ( ad )		5342683	0					
ANR	5342854	Callee	treq -> append_task		5342683	0					
ANR	5342855	PtrMemberAccess	treq -> append_task		5342683	0					
ANR	5342856	Identifier	treq		5342683	0					
ANR	5342857	Identifier	append_task		5342683	1					
ANR	5342858	ArgumentList	ad		5342683	1					
ANR	5342859	Argument	ad		5342683	0					
ANR	5342860	Identifier	ad		5342683	0					
ANR	5342861	ExpressionStatement	cap = gen_capability ( )	252:1:7247:7269	5342683	13	True				
ANR	5342862	AssignmentExpression	cap = gen_capability ( )		5342683	0		=			
ANR	5342863	Identifier	cap		5342683	0					
ANR	5342864	CallExpression	gen_capability ( )		5342683	1					
ANR	5342865	Callee	gen_capability		5342683	0					
ANR	5342866	Identifier	gen_capability		5342683	0					
ANR	5342867	ArgumentList			5342683	1					
ANR	5342868	ExpressionStatement	"m_treqs . insert ( cap , treq )"	255:1:7307:7332	5342683	14	True				
ANR	5342869	CallExpression	"m_treqs . insert ( cap , treq )"		5342683	0					
ANR	5342870	Callee	m_treqs . insert		5342683	0					
ANR	5342871	MemberAccess	m_treqs . insert		5342683	0					
ANR	5342872	Identifier	m_treqs		5342683	0					
ANR	5342873	Identifier	insert		5342683	1					
ANR	5342874	ArgumentList	cap		5342683	1					
ANR	5342875	Argument	cap		5342683	0					
ANR	5342876	Identifier	cap		5342683	0					
ANR	5342877	Argument	treq		5342683	1					
ANR	5342878	Identifier	treq		5342683	0					
ANR	5342879	ExpressionStatement	m_inactivity_timer = 0	258:1:7400:7422	5342683	15	True				
ANR	5342880	AssignmentExpression	m_inactivity_timer = 0		5342683	0		=			
ANR	5342881	Identifier	m_inactivity_timer		5342683	0					
ANR	5342882	PrimaryExpression	0		5342683	1					
ANR	5342883	ReturnStatement	return TRUE ;	260:1:7426:7437	5342683	16	True				
ANR	5342884	Identifier	TRUE		5342683	0					
ANR	5342885	ReturnType	int		5342683	1					
ANR	5342886	Identifier	TransferD :: accept_transfer_request_encapsulation_old_classads		5342683	2					
ANR	5342887	ParameterList	FILE * fin		5342683	3					
ANR	5342888	Parameter	FILE * fin	211:62:6078:6086	5342683	0	True				
ANR	5342889	ParameterType	FILE *		5342683	0					
ANR	5342890	Identifier	fin		5342683	1					
ANR	5342891	CFGEntryNode	ENTRY		5342683		True				
ANR	5342892	CFGExitNode	EXIT		5342683		True				
ANR	5342893	Symbol	ad		5342683						
ANR	5342894	Symbol	NULL		5342683						
ANR	5342895	Symbol	* treq		5342683						
ANR	5342896	Symbol	D_ALWAYS		5342683						
ANR	5342897	Symbol	i		5342683						
ANR	5342898	Symbol	TRUE		5342683						
ANR	5342899	Symbol	fin		5342683						
ANR	5342900	Symbol	classad_delimitor		5342683						
ANR	5342901	Symbol	error		5342683						
ANR	5342902	Symbol	gen_capability		5342683						
ANR	5342903	Symbol	m_treqs		5342683						
ANR	5342904	Symbol	empty		5342683						
ANR	5342905	Symbol	cap		5342683						
ANR	5342906	Symbol	m_inactivity_timer		5342683						
ANR	5342907	Symbol	treq -> get_num_transfers		5342683						
ANR	5342908	Symbol	treq		5342683						
ANR	5342909	Symbol	eof		5342683						
ANR	5342910	DeclStmt									
ANR	5342911	Decl							ReliSock	ReliSock *	rsock
ANR	5342912	DeclStmt									
ANR	5342913	Decl							MyString	MyString	sock_id
ANR	5342914	DeclStmt									
ANR	5342915	Decl							CondorError	CondorError	errstack
ANR	5342916	DeclStmt									
ANR	5342917	Decl							char	char *	_sock_id
ANR	5342918	Function	TransferD :: accept_transfer_request_handler	321:0:9392:10921							
ANR	5342919	FunctionDef	TransferD :: accept_transfer_request_handler (Stream * sock)		5342918	0					
ANR	5342920	CompoundStatement		323:0:9453:10921	5342918	0					
ANR	5342921	IdentifierDeclStatement	MyString encapsulation_method_line ;	324:1:9456:9490	5342918	0	True				
ANR	5342922	IdentifierDecl	encapsulation_method_line		5342918	0					
ANR	5342923	IdentifierDeclType	MyString		5342918	0					
ANR	5342924	Identifier	encapsulation_method_line		5342918	1					
ANR	5342925	IdentifierDeclStatement	MyString encap_end_line ;	325:1:9493:9516	5342918	1	True				
ANR	5342926	IdentifierDecl	encap_end_line		5342918	0					
ANR	5342927	IdentifierDeclType	MyString		5342918	0					
ANR	5342928	Identifier	encap_end_line		5342918	1					
ANR	5342929	IdentifierDeclStatement	EncapMethod em ;	326:1:9519:9533	5342918	2	True				
ANR	5342930	IdentifierDecl	em		5342918	0					
ANR	5342931	IdentifierDeclType	EncapMethod		5342918	0					
ANR	5342932	Identifier	em		5342918	1					
ANR	5342933	IdentifierDeclStatement	char * str = NULL ;	327:1:9536:9552	5342918	3	True				
ANR	5342934	IdentifierDecl	* str = NULL		5342918	0					
ANR	5342935	IdentifierDeclType	char *		5342918	0					
ANR	5342936	Identifier	str		5342918	1					
ANR	5342937	AssignmentExpression	* str = NULL		5342918	2		=			
ANR	5342938	Identifier	NULL		5342918	0					
ANR	5342939	Identifier	NULL		5342918	1					
ANR	5342940	IdentifierDeclStatement	int rval ;	328:1:9555:9563	5342918	4	True				
ANR	5342941	IdentifierDecl	rval		5342918	0					
ANR	5342942	IdentifierDeclType	int		5342918	0					
ANR	5342943	Identifier	rval		5342918	1					
ANR	5342944	ExpressionStatement	"dprintf ( D_ALWAYS , ""Entering TransferD::accept_transfer_request_handler()\\n"" )"	330:1:9567:9646	5342918	5	True				
ANR	5342945	CallExpression	"dprintf ( D_ALWAYS , ""Entering TransferD::accept_transfer_request_handler()\\n"" )"		5342918	0					
ANR	5342946	Callee	dprintf		5342918	0					
ANR	5342947	Identifier	dprintf		5342918	0					
ANR	5342948	ArgumentList	D_ALWAYS		5342918	1					
ANR	5342949	Argument	D_ALWAYS		5342918	0					
ANR	5342950	Identifier	D_ALWAYS		5342918	0					
ANR	5342951	Argument	"""Entering TransferD::accept_transfer_request_handler()\\n"""		5342918	1					
ANR	5342952	PrimaryExpression	"""Entering TransferD::accept_transfer_request_handler()\\n"""		5342918	0					
ANR	5342953	ExpressionStatement	"dprintf ( D_ALWAYS , ""INCOMING TRANSFER REQUEST!\\n"" )"	332:1:9649:9698	5342918	6	True				
ANR	5342954	CallExpression	"dprintf ( D_ALWAYS , ""INCOMING TRANSFER REQUEST!\\n"" )"		5342918	0					
ANR	5342955	Callee	dprintf		5342918	0					
ANR	5342956	Identifier	dprintf		5342918	0					
ANR	5342957	ArgumentList	D_ALWAYS		5342918	1					
ANR	5342958	Argument	D_ALWAYS		5342918	0					
ANR	5342959	Identifier	D_ALWAYS		5342918	0					
ANR	5342960	Argument	"""INCOMING TRANSFER REQUEST!\\n"""		5342918	1					
ANR	5342961	PrimaryExpression	"""INCOMING TRANSFER REQUEST!\\n"""		5342918	0					
ANR	5342962	ExpressionStatement	sock -> decode ( )	339:1:9960:9974	5342918	7	True				
ANR	5342963	CallExpression	sock -> decode ( )		5342918	0					
ANR	5342964	Callee	sock -> decode		5342918	0					
ANR	5342965	PtrMemberAccess	sock -> decode		5342918	0					
ANR	5342966	Identifier	sock		5342918	0					
ANR	5342967	Identifier	decode		5342918	1					
ANR	5342968	ArgumentList			5342918	1					
ANR	5342969	IfStatement	if ( sock -> code ( str ) == 0 )		5342918	8					
ANR	5342970	Condition	sock -> code ( str ) == 0	341:5:9982:10001	5342918	0	True				
ANR	5342971	EqualityExpression	sock -> code ( str ) == 0		5342918	0		==			
ANR	5342972	CallExpression	sock -> code ( str )		5342918	0					
ANR	5342973	Callee	sock -> code		5342918	0					
ANR	5342974	PtrMemberAccess	sock -> code		5342918	0					
ANR	5342975	Identifier	sock		5342918	0					
ANR	5342976	Identifier	code		5342918	1					
ANR	5342977	ArgumentList	str		5342918	1					
ANR	5342978	Argument	str		5342918	0					
ANR	5342979	Identifier	str		5342918	0					
ANR	5342980	PrimaryExpression	0		5342918	1					
ANR	5342981	CompoundStatement		19:27:550:550	5342918	1					
ANR	5342982	ExpressionStatement	"EXCEPT ( ""Schedd closed connection, I'm going away."" )"	342:2:10008:10059	5342918	0	True				
ANR	5342983	CallExpression	"EXCEPT ( ""Schedd closed connection, I'm going away."" )"		5342918	0					
ANR	5342984	Callee	EXCEPT		5342918	0					
ANR	5342985	Identifier	EXCEPT		5342918	0					
ANR	5342986	ArgumentList	"""Schedd closed connection, I'm going away."""		5342918	1					
ANR	5342987	Argument	"""Schedd closed connection, I'm going away."""		5342918	0					
ANR	5342988	PrimaryExpression	"""Schedd closed connection, I'm going away."""		5342918	0					
ANR	5342989	ExpressionStatement	sock -> end_of_message ( )	344:1:10065:10087	5342918	9	True				
ANR	5342990	CallExpression	sock -> end_of_message ( )		5342918	0					
ANR	5342991	Callee	sock -> end_of_message		5342918	0					
ANR	5342992	PtrMemberAccess	sock -> end_of_message		5342918	0					
ANR	5342993	Identifier	sock		5342918	0					
ANR	5342994	Identifier	end_of_message		5342918	1					
ANR	5342995	ArgumentList			5342918	1					
ANR	5342996	ExpressionStatement	encapsulation_method_line = str	346:1:10091:10122	5342918	10	True				
ANR	5342997	AssignmentExpression	encapsulation_method_line = str		5342918	0		=			
ANR	5342998	Identifier	encapsulation_method_line		5342918	0					
ANR	5342999	Identifier	str		5342918	1					
ANR	5343000	ExpressionStatement	free ( str )	347:1:10141:10150	5342918	11	True				
ANR	5343001	CallExpression	free ( str )		5342918	0					
ANR	5343002	Callee	free		5342918	0					
ANR	5343003	Identifier	free		5342918	0					
ANR	5343004	ArgumentList	str		5342918	1					
ANR	5343005	Argument	str		5342918	0					
ANR	5343006	Identifier	str		5342918	0					
ANR	5343007	ExpressionStatement	encapsulation_method_line . trim ( )	349:1:10154:10186	5342918	12	True				
ANR	5343008	CallExpression	encapsulation_method_line . trim ( )		5342918	0					
ANR	5343009	Callee	encapsulation_method_line . trim		5342918	0					
ANR	5343010	MemberAccess	encapsulation_method_line . trim		5342918	0					
ANR	5343011	Identifier	encapsulation_method_line		5342918	0					
ANR	5343012	Identifier	trim		5342918	1					
ANR	5343013	ArgumentList			5342918	1					
ANR	5343014	ExpressionStatement	"dprintf ( D_ALWAYS , ""Read encap line: %s\\n"" , encapsulation_method_line . Value ( ) )"	351:1:10190:10270	5342918	13	True				
ANR	5343015	CallExpression	"dprintf ( D_ALWAYS , ""Read encap line: %s\\n"" , encapsulation_method_line . Value ( ) )"		5342918	0					
ANR	5343016	Callee	dprintf		5342918	0					
ANR	5343017	Identifier	dprintf		5342918	0					
ANR	5343018	ArgumentList	D_ALWAYS		5342918	1					
ANR	5343019	Argument	D_ALWAYS		5342918	0					
ANR	5343020	Identifier	D_ALWAYS		5342918	0					
ANR	5343021	Argument	"""Read encap line: %s\\n"""		5342918	1					
ANR	5343022	PrimaryExpression	"""Read encap line: %s\\n"""		5342918	0					
ANR	5343023	Argument	encapsulation_method_line . Value ( )		5342918	2					
ANR	5343024	CallExpression	encapsulation_method_line . Value ( )		5342918	0					
ANR	5343025	Callee	encapsulation_method_line . Value		5342918	0					
ANR	5343026	MemberAccess	encapsulation_method_line . Value		5342918	0					
ANR	5343027	Identifier	encapsulation_method_line		5342918	0					
ANR	5343028	Identifier	Value		5342918	1					
ANR	5343029	ArgumentList			5342918	1					
ANR	5343030	ExpressionStatement	em = encap_method ( encapsulation_method_line )	354:1:10274:10318	5342918	14	True				
ANR	5343031	AssignmentExpression	em = encap_method ( encapsulation_method_line )		5342918	0		=			
ANR	5343032	Identifier	em		5342918	0					
ANR	5343033	CallExpression	encap_method ( encapsulation_method_line )		5342918	1					
ANR	5343034	Callee	encap_method		5342918	0					
ANR	5343035	Identifier	encap_method		5342918	0					
ANR	5343036	ArgumentList	encapsulation_method_line		5342918	1					
ANR	5343037	Argument	encapsulation_method_line		5342918	0					
ANR	5343038	Identifier	encapsulation_method_line		5342918	0					
ANR	5343039	SwitchStatement	switch ( em )		5342918	15					
ANR	5343040	Condition	em	358:9:10419:10420	5342918	0	True				
ANR	5343041	Identifier	em		5342918	0					
ANR	5343042	CompoundStatement		36:13:969:969	5342918	1					
ANR	5343043	Label	case ENCAP_METHOD_UNKNOWN :	360:2:10428:10453	5342918	0	True				
ANR	5343044	Identifier	ENCAP_METHOD_UNKNOWN		5342918	0					
ANR	5343045	Statement	EXCEPT	361:3:10458:10463	5342918	1	True				
ANR	5343046	Statement	(	361:9:10464:10464	5342918	2	True				
ANR	5343047	Statement	"""I don't understand the encapsulation method of the """	361:10:10465:10517	5342918	3	True				
ANR	5343048	Statement	"""protocol: %s\\n"""	362:5:10524:10539	5342918	4	True				
ANR	5343049	Statement	","	362:21:10540:10540	5342918	5	True				
ANR	5343050	Statement	encapsulation_method_line	362:23:10542:10566	5342918	6	True				
ANR	5343051	Statement	.	362:48:10567:10567	5342918	7	True				
ANR	5343052	Statement	Value	362:49:10568:10572	5342918	8	True				
ANR	5343053	Statement	(	362:54:10573:10573	5342918	9	True				
ANR	5343054	Statement	)	362:55:10574:10574	5342918	10	True				
ANR	5343055	Statement	)	362:56:10575:10575	5342918	11	True				
ANR	5343056	ExpressionStatement		362:57:10576:10576	5342918	12	True				
ANR	5343057	BreakStatement	break ;	363:3:10581:10586	5342918	13	True				
ANR	5343058	Label	case ENCAP_METHOD_OLD_CLASSADS :	365:2:10591:10621	5342918	14	True				
ANR	5343059	Identifier	ENCAP_METHOD_OLD_CLASSADS		5342918	0					
ANR	5343060	ExpressionStatement	rval = accept_transfer_request_encapsulation_old_classads ( sock )	366:3:10626:10689	5342918	15	True				
ANR	5343061	AssignmentExpression	rval = accept_transfer_request_encapsulation_old_classads ( sock )		5342918	0		=			
ANR	5343062	Identifier	rval		5342918	0					
ANR	5343063	CallExpression	accept_transfer_request_encapsulation_old_classads ( sock )		5342918	1					
ANR	5343064	Callee	accept_transfer_request_encapsulation_old_classads		5342918	0					
ANR	5343065	Identifier	accept_transfer_request_encapsulation_old_classads		5342918	0					
ANR	5343066	ArgumentList	sock		5342918	1					
ANR	5343067	Argument	sock		5342918	0					
ANR	5343068	Identifier	sock		5342918	0					
ANR	5343069	BreakStatement	break ;	367:3:10694:10699	5342918	16	True				
ANR	5343070	Label	default :	369:2:10704:10711	5342918	17	True				
ANR	5343071	Identifier	default		5342918	0					
ANR	5343072	ExpressionStatement	"EXCEPT ( ""TransferD::init(): Programmer error! encap unhandled!"" )"	370:3:10716:10779	5342918	18	True				
ANR	5343073	CallExpression	"EXCEPT ( ""TransferD::init(): Programmer error! encap unhandled!"" )"		5342918	0					
ANR	5343074	Callee	EXCEPT		5342918	0					
ANR	5343075	Identifier	EXCEPT		5342918	0					
ANR	5343076	ArgumentList	"""TransferD::init(): Programmer error! encap unhandled!"""		5342918	1					
ANR	5343077	Argument	"""TransferD::init(): Programmer error! encap unhandled!"""		5342918	0					
ANR	5343078	PrimaryExpression	"""TransferD::init(): Programmer error! encap unhandled!"""		5342918	0					
ANR	5343079	BreakStatement	break ;	371:3:10784:10789	5342918	19	True				
ANR	5343080	ExpressionStatement	m_initialized = TRUE	374:1:10796:10816	5342918	16	True				
ANR	5343081	AssignmentExpression	m_initialized = TRUE		5342918	0		=			
ANR	5343082	Identifier	m_initialized		5342918	0					
ANR	5343083	Identifier	TRUE		5342918	1					
ANR	5343084	ExpressionStatement	"dprintf ( D_ALWAYS , ""Leaving TransferD::accept_transfer_request_handler()\\n"" )"	376:1:10820:10898	5342918	17	True				
ANR	5343085	CallExpression	"dprintf ( D_ALWAYS , ""Leaving TransferD::accept_transfer_request_handler()\\n"" )"		5342918	0					
ANR	5343086	Callee	dprintf		5342918	0					
ANR	5343087	Identifier	dprintf		5342918	0					
ANR	5343088	ArgumentList	D_ALWAYS		5342918	1					
ANR	5343089	Argument	D_ALWAYS		5342918	0					
ANR	5343090	Identifier	D_ALWAYS		5342918	0					
ANR	5343091	Argument	"""Leaving TransferD::accept_transfer_request_handler()\\n"""		5342918	1					
ANR	5343092	PrimaryExpression	"""Leaving TransferD::accept_transfer_request_handler()\\n"""		5342918	0					
ANR	5343093	ReturnStatement	return KEEP_STREAM ;	378:1:10901:10919	5342918	18	True				
ANR	5343094	Identifier	KEEP_STREAM		5342918	0					
ANR	5343095	ReturnType	int		5342918	1					
ANR	5343096	Identifier	TransferD :: accept_transfer_request_handler		5342918	2					
ANR	5343097	ParameterList	Stream * sock		5342918	3					
ANR	5343098	Parameter	Stream * sock	322:43:9439:9450	5342918	0	True				
ANR	5343099	ParameterType	Stream *		5342918	0					
ANR	5343100	Identifier	sock		5342918	1					
ANR	5343101	CFGEntryNode	ENTRY		5342918		True				
ANR	5343102	CFGExitNode	EXIT		5342918		True				
ANR	5343103	Symbol	m_initialized		5342918						
ANR	5343104	Symbol	NULL		5342918						
ANR	5343105	Symbol	accept_transfer_request_encapsulation_old_classads		5342918						
ANR	5343106	Symbol	em		5342918						
ANR	5343107	Symbol	D_ALWAYS		5342918						
ANR	5343108	Symbol	encapsulation_method_line . Value		5342918						
ANR	5343109	Symbol	TRUE		5342918						
ANR	5343110	Symbol	encap_end_line		5342918						
ANR	5343111	Symbol	KEEP_STREAM		5342918						
ANR	5343112	Symbol	str		5342918						
ANR	5343113	Symbol	sock		5342918						
ANR	5343114	Symbol	sock -> code		5342918						
ANR	5343115	Symbol	encapsulation_method_line		5342918						
ANR	5343116	Symbol	rval		5342918						
ANR	5343117	Symbol	* sock		5342918						
ANR	5343118	Symbol	encap_method		5342918						
ANR	5343119	Function	TransferD :: accept_transfer_request_encapsulation_old_classads	383:0:11013:14727							
ANR	5343120	FunctionDef	TransferD :: accept_transfer_request_encapsulation_old_classads (Stream * sock)		5343119	0					
ANR	5343121	CompoundStatement		385:0:11093:14727	5343119	0					
ANR	5343122	IdentifierDeclStatement	int i ;	386:1:11096:11101	5343119	0	True				
ANR	5343123	IdentifierDecl	i		5343119	0					
ANR	5343124	IdentifierDeclType	int		5343119	0					
ANR	5343125	Identifier	i		5343119	1					
ANR	5343126	IdentifierDeclStatement	ClassAd * ad = NULL ;	387:1:11104:11122	5343119	1	True				
ANR	5343127	IdentifierDecl	* ad = NULL		5343119	0					
ANR	5343128	IdentifierDeclType	ClassAd *		5343119	0					
ANR	5343129	Identifier	ad		5343119	1					
ANR	5343130	AssignmentExpression	* ad = NULL		5343119	2		=			
ANR	5343131	Identifier	NULL		5343119	0					
ANR	5343132	Identifier	NULL		5343119	1					
ANR	5343133	IdentifierDeclStatement	TransferRequest * treq = NULL ;	388:1:11125:11153	5343119	2	True				
ANR	5343134	IdentifierDecl	* treq = NULL		5343119	0					
ANR	5343135	IdentifierDeclType	TransferRequest *		5343119	0					
ANR	5343136	Identifier	treq		5343119	1					
ANR	5343137	AssignmentExpression	* treq = NULL		5343119	2		=			
ANR	5343138	Identifier	NULL		5343119	0					
ANR	5343139	Identifier	NULL		5343119	1					
ANR	5343140	IdentifierDeclStatement	MyString cap ;	389:1:11156:11168	5343119	3	True				
ANR	5343141	IdentifierDecl	cap		5343119	0					
ANR	5343142	IdentifierDeclType	MyString		5343119	0					
ANR	5343143	Identifier	cap		5343119	1					
ANR	5343144	IdentifierDeclStatement	ClassAd respad ;	390:1:11171:11185	5343119	4	True				
ANR	5343145	IdentifierDecl	respad		5343119	0					
ANR	5343146	IdentifierDeclType	ClassAd		5343119	0					
ANR	5343147	Identifier	respad		5343119	1					
ANR	5343148	Statement	dprintf	392:1:11189:11195	5343119	5	True				
ANR	5343149	Statement	(	392:8:11196:11196	5343119	6	True				
ANR	5343150	Statement	D_ALWAYS	392:9:11197:11204	5343119	7	True				
ANR	5343151	Statement	","	392:17:11205:11205	5343119	8	True				
ANR	5343152	Statement	"""Entering """	393:2:11209:11219	5343119	9	True				
ANR	5343153	Statement	"""TransferD::accept_transfer_request_encapsulation_old_classads()\\n"""	394:2:11223:11289	5343119	10	True				
ANR	5343154	Statement	)	394:69:11290:11290	5343119	11	True				
ANR	5343155	ExpressionStatement		394:70:11291:11291	5343119	12	True				
ANR	5343156	ExpressionStatement	sock -> decode ( )	396:1:11295:11309	5343119	13	True				
ANR	5343157	CallExpression	sock -> decode ( )		5343119	0					
ANR	5343158	Callee	sock -> decode		5343119	0					
ANR	5343159	PtrMemberAccess	sock -> decode		5343119	0					
ANR	5343160	Identifier	sock		5343119	0					
ANR	5343161	Identifier	decode		5343119	1					
ANR	5343162	ArgumentList			5343119	1					
ANR	5343163	ExpressionStatement	ad = new ClassAd ( )	403:1:11578:11596	5343119	14	True				
ANR	5343164	AssignmentExpression	ad = new ClassAd ( )		5343119	0		=			
ANR	5343165	Identifier	ad		5343119	0					
ANR	5343166	UnaryExpression	new ClassAd ( )		5343119	1					
ANR	5343167	IfStatement	if ( ad -> initFromStream ( * sock ) == 0 )		5343119	15					
ANR	5343168	Condition	ad -> initFromStream ( * sock ) == 0	404:5:11603:11632	5343119	0	True				
ANR	5343169	EqualityExpression	ad -> initFromStream ( * sock ) == 0		5343119	0		==			
ANR	5343170	CallExpression	ad -> initFromStream ( * sock )		5343119	0					
ANR	5343171	Callee	ad -> initFromStream		5343119	0					
ANR	5343172	PtrMemberAccess	ad -> initFromStream		5343119	0					
ANR	5343173	Identifier	ad		5343119	0					
ANR	5343174	Identifier	initFromStream		5343119	1					
ANR	5343175	ArgumentList	* sock		5343119	1					
ANR	5343176	Argument	* sock		5343119	0					
ANR	5343177	UnaryOperationExpression	* sock		5343119	0					
ANR	5343178	UnaryOperator	*		5343119	0					
ANR	5343179	Identifier	sock		5343119	1					
ANR	5343180	PrimaryExpression	0		5343119	1					
ANR	5343181	CompoundStatement		20:37:541:541	5343119	1					
ANR	5343182	ExpressionStatement	"EXCEPT ( ""XXX Couldn't init initial ad from stream!"" )"	406:2:11692:11743	5343119	0	True				
ANR	5343183	CallExpression	"EXCEPT ( ""XXX Couldn't init initial ad from stream!"" )"		5343119	0					
ANR	5343184	Callee	EXCEPT		5343119	0					
ANR	5343185	Identifier	EXCEPT		5343119	0					
ANR	5343186	ArgumentList	"""XXX Couldn't init initial ad from stream!"""		5343119	1					
ANR	5343187	Argument	"""XXX Couldn't init initial ad from stream!"""		5343119	0					
ANR	5343188	PrimaryExpression	"""XXX Couldn't init initial ad from stream!"""		5343119	0					
ANR	5343189	ExpressionStatement	sock -> end_of_message ( )	408:1:11749:11771	5343119	16	True				
ANR	5343190	CallExpression	sock -> end_of_message ( )		5343119	0					
ANR	5343191	Callee	sock -> end_of_message		5343119	0					
ANR	5343192	PtrMemberAccess	sock -> end_of_message		5343119	0					
ANR	5343193	Identifier	sock		5343119	0					
ANR	5343194	Identifier	end_of_message		5343119	1					
ANR	5343195	ArgumentList			5343119	1					
ANR	5343196	ExpressionStatement	"dprintf ( D_ALWAYS , ""Read treq header.\\n"" )"	410:1:11775:11815	5343119	17	True				
ANR	5343197	CallExpression	"dprintf ( D_ALWAYS , ""Read treq header.\\n"" )"		5343119	0					
ANR	5343198	Callee	dprintf		5343119	0					
ANR	5343199	Identifier	dprintf		5343119	0					
ANR	5343200	ArgumentList	D_ALWAYS		5343119	1					
ANR	5343201	Argument	D_ALWAYS		5343119	0					
ANR	5343202	Identifier	D_ALWAYS		5343119	0					
ANR	5343203	Argument	"""Read treq header.\\n"""		5343119	1					
ANR	5343204	PrimaryExpression	"""Read treq header.\\n"""		5343119	0					
ANR	5343205	ExpressionStatement	treq = new TransferRequest ( ad )	413:1:11888:11918	5343119	18	True				
ANR	5343206	AssignmentExpression	treq = new TransferRequest ( ad )		5343119	0		=			
ANR	5343207	Identifier	treq		5343119	0					
ANR	5343208	Identifier	ad		5343119	1					
ANR	5343209	IfStatement	if ( treq == NULL )		5343119	19					
ANR	5343210	Condition	treq == NULL	414:5:11925:11936	5343119	0	True				
ANR	5343211	EqualityExpression	treq == NULL		5343119	0		==			
ANR	5343212	Identifier	treq		5343119	0					
ANR	5343213	Identifier	NULL		5343119	1					
ANR	5343214	CompoundStatement		30:19:845:845	5343119	1					
ANR	5343215	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	415:2:11943:11967	5343119	0	True				
ANR	5343216	CallExpression	"EXCEPT ( ""Out of memory!"" )"		5343119	0					
ANR	5343217	Callee	EXCEPT		5343119	0					
ANR	5343218	Identifier	EXCEPT		5343119	0					
ANR	5343219	ArgumentList	"""Out of memory!"""		5343119	1					
ANR	5343220	Argument	"""Out of memory!"""		5343119	0					
ANR	5343221	PrimaryExpression	"""Out of memory!"""		5343119	0					
ANR	5343222	IfStatement	if ( treq -> get_num_transfers ( ) <= 0 )		5343119	20					
ANR	5343223	Condition	treq -> get_num_transfers ( ) <= 0	419:5:12054:12083	5343119	0	True				
ANR	5343224	RelationalExpression	treq -> get_num_transfers ( ) <= 0		5343119	0		<=			
ANR	5343225	CallExpression	treq -> get_num_transfers ( )		5343119	0					
ANR	5343226	Callee	treq -> get_num_transfers		5343119	0					
ANR	5343227	PtrMemberAccess	treq -> get_num_transfers		5343119	0					
ANR	5343228	Identifier	treq		5343119	0					
ANR	5343229	Identifier	get_num_transfers		5343119	1					
ANR	5343230	ArgumentList			5343119	1					
ANR	5343231	PrimaryExpression	0		5343119	1					
ANR	5343232	CompoundStatement		35:37:992:992	5343119	1					
ANR	5343233	ExpressionStatement	"EXCEPT ( ""Protocol error!"" )"	420:2:12090:12115	5343119	0	True				
ANR	5343234	CallExpression	"EXCEPT ( ""Protocol error!"" )"		5343119	0					
ANR	5343235	Callee	EXCEPT		5343119	0					
ANR	5343236	Identifier	EXCEPT		5343119	0					
ANR	5343237	ArgumentList	"""Protocol error!"""		5343119	1					
ANR	5343238	Argument	"""Protocol error!"""		5343119	0					
ANR	5343239	PrimaryExpression	"""Protocol error!"""		5343119	0					
ANR	5343240	ForStatement	for ( i = 0 ; i < treq -> get_num_transfers ( ) ; i ++ )		5343119	21					
ANR	5343241	ForInit	i = 0 ;	424:6:12190:12195	5343119	0	True				
ANR	5343242	AssignmentExpression	i = 0		5343119	0		=			
ANR	5343243	Identifier	i		5343119	0					
ANR	5343244	PrimaryExpression	0		5343119	1					
ANR	5343245	Condition	i < treq -> get_num_transfers ( )	424:13:12197:12225	5343119	1	True				
ANR	5343246	RelationalExpression	i < treq -> get_num_transfers ( )		5343119	0		<			
ANR	5343247	Identifier	i		5343119	0					
ANR	5343248	CallExpression	treq -> get_num_transfers ( )		5343119	1					
ANR	5343249	Callee	treq -> get_num_transfers		5343119	0					
ANR	5343250	PtrMemberAccess	treq -> get_num_transfers		5343119	0					
ANR	5343251	Identifier	treq		5343119	0					
ANR	5343252	Identifier	get_num_transfers		5343119	1					
ANR	5343253	ArgumentList			5343119	1					
ANR	5343254	PostIncDecOperationExpression	i ++	424:44:12228:12230	5343119	2	True				
ANR	5343255	Identifier	i		5343119	0					
ANR	5343256	IncDec	++		5343119	1					
ANR	5343257	CompoundStatement		40:49:1139:1139	5343119	3					
ANR	5343258	ExpressionStatement	ad = new ClassAd ( )	425:2:12237:12255	5343119	0	True				
ANR	5343259	AssignmentExpression	ad = new ClassAd ( )		5343119	0		=			
ANR	5343260	Identifier	ad		5343119	0					
ANR	5343261	UnaryExpression	new ClassAd ( )		5343119	1					
ANR	5343262	IfStatement	if ( ad == NULL )		5343119	1					
ANR	5343263	Condition	ad == NULL	426:6:12263:12272	5343119	0	True				
ANR	5343264	EqualityExpression	ad == NULL		5343119	0		==			
ANR	5343265	Identifier	ad		5343119	0					
ANR	5343266	Identifier	NULL		5343119	1					
ANR	5343267	CompoundStatement		42:18:1181:1181	5343119	1					
ANR	5343268	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	427:3:12280:12304	5343119	0	True				
ANR	5343269	CallExpression	"EXCEPT ( ""Out of memory!"" )"		5343119	0					
ANR	5343270	Callee	EXCEPT		5343119	0					
ANR	5343271	Identifier	EXCEPT		5343119	0					
ANR	5343272	ArgumentList	"""Out of memory!"""		5343119	1					
ANR	5343273	Argument	"""Out of memory!"""		5343119	0					
ANR	5343274	PrimaryExpression	"""Out of memory!"""		5343119	0					
ANR	5343275	IfStatement	if ( ad -> initFromStream ( * sock ) == 0 )		5343119	2					
ANR	5343276	Condition	ad -> initFromStream ( * sock ) == 0	429:6:12316:12345	5343119	0	True				
ANR	5343277	EqualityExpression	ad -> initFromStream ( * sock ) == 0		5343119	0		==			
ANR	5343278	CallExpression	ad -> initFromStream ( * sock )		5343119	0					
ANR	5343279	Callee	ad -> initFromStream		5343119	0					
ANR	5343280	PtrMemberAccess	ad -> initFromStream		5343119	0					
ANR	5343281	Identifier	ad		5343119	0					
ANR	5343282	Identifier	initFromStream		5343119	1					
ANR	5343283	ArgumentList	* sock		5343119	1					
ANR	5343284	Argument	* sock		5343119	0					
ANR	5343285	UnaryOperationExpression	* sock		5343119	0					
ANR	5343286	UnaryOperator	*		5343119	0					
ANR	5343287	Identifier	sock		5343119	1					
ANR	5343288	PrimaryExpression	0		5343119	1					
ANR	5343289	CompoundStatement		45:38:1254:1254	5343119	1					
ANR	5343290	ExpressionStatement	"EXCEPT ( ""Expected %d transfer job ads, got %d instead."" , treq -> get_num_transfers ( ) , i )"	430:3:12353:12443	5343119	0	True				
ANR	5343291	CallExpression	"EXCEPT ( ""Expected %d transfer job ads, got %d instead."" , treq -> get_num_transfers ( ) , i )"		5343119	0					
ANR	5343292	Callee	EXCEPT		5343119	0					
ANR	5343293	Identifier	EXCEPT		5343119	0					
ANR	5343294	ArgumentList	"""Expected %d transfer job ads, got %d instead."""		5343119	1					
ANR	5343295	Argument	"""Expected %d transfer job ads, got %d instead."""		5343119	0					
ANR	5343296	PrimaryExpression	"""Expected %d transfer job ads, got %d instead."""		5343119	0					
ANR	5343297	Argument	treq -> get_num_transfers ( )		5343119	1					
ANR	5343298	CallExpression	treq -> get_num_transfers ( )		5343119	0					
ANR	5343299	Callee	treq -> get_num_transfers		5343119	0					
ANR	5343300	PtrMemberAccess	treq -> get_num_transfers		5343119	0					
ANR	5343301	Identifier	treq		5343119	0					
ANR	5343302	Identifier	get_num_transfers		5343119	1					
ANR	5343303	ArgumentList			5343119	1					
ANR	5343304	Argument	i		5343119	2					
ANR	5343305	Identifier	i		5343119	0					
ANR	5343306	ExpressionStatement	sock -> end_of_message ( )	433:2:12451:12473	5343119	3	True				
ANR	5343307	CallExpression	sock -> end_of_message ( )		5343119	0					
ANR	5343308	Callee	sock -> end_of_message		5343119	0					
ANR	5343309	PtrMemberAccess	sock -> end_of_message		5343119	0					
ANR	5343310	Identifier	sock		5343119	0					
ANR	5343311	Identifier	end_of_message		5343119	1					
ANR	5343312	ArgumentList			5343119	1					
ANR	5343313	ExpressionStatement	"dprintf ( D_ALWAYS , ""Read treq job ad[%d].\\n"" , i )"	434:2:12477:12524	5343119	4	True				
ANR	5343314	CallExpression	"dprintf ( D_ALWAYS , ""Read treq job ad[%d].\\n"" , i )"		5343119	0					
ANR	5343315	Callee	dprintf		5343119	0					
ANR	5343316	Identifier	dprintf		5343119	0					
ANR	5343317	ArgumentList	D_ALWAYS		5343119	1					
ANR	5343318	Argument	D_ALWAYS		5343119	0					
ANR	5343319	Identifier	D_ALWAYS		5343119	0					
ANR	5343320	Argument	"""Read treq job ad[%d].\\n"""		5343119	1					
ANR	5343321	PrimaryExpression	"""Read treq job ad[%d].\\n"""		5343119	0					
ANR	5343322	Argument	i		5343119	2					
ANR	5343323	Identifier	i		5343119	0					
ANR	5343324	ExpressionStatement	treq -> append_task ( ad )	435:2:12528:12549	5343119	5	True				
ANR	5343325	CallExpression	treq -> append_task ( ad )		5343119	0					
ANR	5343326	Callee	treq -> append_task		5343119	0					
ANR	5343327	PtrMemberAccess	treq -> append_task		5343119	0					
ANR	5343328	Identifier	treq		5343119	0					
ANR	5343329	Identifier	append_task		5343119	1					
ANR	5343330	ArgumentList	ad		5343119	1					
ANR	5343331	Argument	ad		5343119	0					
ANR	5343332	Identifier	ad		5343119	0					
ANR	5343333	ExpressionStatement	sock -> end_of_message ( )	437:1:12555:12577	5343119	22	True				
ANR	5343334	CallExpression	sock -> end_of_message ( )		5343119	0					
ANR	5343335	Callee	sock -> end_of_message		5343119	0					
ANR	5343336	PtrMemberAccess	sock -> end_of_message		5343119	0					
ANR	5343337	Identifier	sock		5343119	0					
ANR	5343338	Identifier	end_of_message		5343119	1					
ANR	5343339	ArgumentList			5343119	1					
ANR	5343340	ExpressionStatement	sock -> encode ( )	439:1:12581:12595	5343119	23	True				
ANR	5343341	CallExpression	sock -> encode ( )		5343119	0					
ANR	5343342	Callee	sock -> encode		5343119	0					
ANR	5343343	PtrMemberAccess	sock -> encode		5343119	0					
ANR	5343344	Identifier	sock		5343119	0					
ANR	5343345	Identifier	encode		5343119	1					
ANR	5343346	ArgumentList			5343119	1					
ANR	5343347	SwitchStatement	switch ( treq -> get_xfer_protocol ( ) )		5343119	24					
ANR	5343348	Condition	treq -> get_xfer_protocol ( )	445:8:12811:12835	5343119	0	True				
ANR	5343349	CallExpression	treq -> get_xfer_protocol ( )		5343119	0					
ANR	5343350	Callee	treq -> get_xfer_protocol		5343119	0					
ANR	5343351	PtrMemberAccess	treq -> get_xfer_protocol		5343119	0					
ANR	5343352	Identifier	treq		5343119	0					
ANR	5343353	Identifier	get_xfer_protocol		5343119	1					
ANR	5343354	ArgumentList			5343119	1					
ANR	5343355	CompoundStatement		62:1:1745:1745	5343119	1					
ANR	5343356	Label	case FTP_CFTP :	447:2:12843:12856	5343119	0	True				
ANR	5343357	Identifier	FTP_CFTP		5343119	0					
ANR	5343358	ExpressionStatement	"respad . Assign ( ATTR_TREQ_INVALID_REQUEST , FALSE )"	448:3:12915:12962	5343119	1	True				
ANR	5343359	CallExpression	"respad . Assign ( ATTR_TREQ_INVALID_REQUEST , FALSE )"		5343119	0					
ANR	5343360	Callee	respad . Assign		5343119	0					
ANR	5343361	MemberAccess	respad . Assign		5343119	0					
ANR	5343362	Identifier	respad		5343119	0					
ANR	5343363	Identifier	Assign		5343119	1					
ANR	5343364	ArgumentList	ATTR_TREQ_INVALID_REQUEST		5343119	1					
ANR	5343365	Argument	ATTR_TREQ_INVALID_REQUEST		5343119	0					
ANR	5343366	Identifier	ATTR_TREQ_INVALID_REQUEST		5343119	0					
ANR	5343367	Argument	FALSE		5343119	1					
ANR	5343368	Identifier	FALSE		5343119	0					
ANR	5343369	BreakStatement	break ;	449:3:12967:12972	5343119	2	True				
ANR	5343370	Label	default :	451:2:12977:12984	5343119	3	True				
ANR	5343371	Identifier	default		5343119	0					
ANR	5343372	Statement	dprintf	452:3:12989:12995	5343119	4	True				
ANR	5343373	Statement	(	452:10:12996:12996	5343119	5	True				
ANR	5343374	Statement	D_ALWAYS	452:11:12997:13004	5343119	6	True				
ANR	5343375	Statement	","	452:19:13005:13005	5343119	7	True				
ANR	5343376	Statement	"""Transfer Request uses an unsupported file """	452:21:13007:13050	5343119	8	True				
ANR	5343377	Statement	"""transfer protocol. Rejecting it.\\n"""	453:4:13056:13091	5343119	9	True				
ANR	5343378	Statement	)	453:40:13092:13092	5343119	10	True				
ANR	5343379	ExpressionStatement		453:41:13093:13093	5343119	11	True				
ANR	5343380	ExpressionStatement	"respad . Assign ( ATTR_TREQ_INVALID_REQUEST , TRUE )"	456:3:13150:13196	5343119	12	True				
ANR	5343381	CallExpression	"respad . Assign ( ATTR_TREQ_INVALID_REQUEST , TRUE )"		5343119	0					
ANR	5343382	Callee	respad . Assign		5343119	0					
ANR	5343383	MemberAccess	respad . Assign		5343119	0					
ANR	5343384	Identifier	respad		5343119	0					
ANR	5343385	Identifier	Assign		5343119	1					
ANR	5343386	ArgumentList	ATTR_TREQ_INVALID_REQUEST		5343119	1					
ANR	5343387	Argument	ATTR_TREQ_INVALID_REQUEST		5343119	0					
ANR	5343388	Identifier	ATTR_TREQ_INVALID_REQUEST		5343119	0					
ANR	5343389	Argument	TRUE		5343119	1					
ANR	5343390	Identifier	TRUE		5343119	0					
ANR	5343391	Statement	respad	457:3:13201:13206	5343119	13	True				
ANR	5343392	Statement	.	457:9:13207:13207	5343119	14	True				
ANR	5343393	Statement	Assign	457:10:13208:13213	5343119	15	True				
ANR	5343394	Statement	(	457:16:13214:13214	5343119	16	True				
ANR	5343395	Statement	ATTR_TREQ_INVALID_REASON	457:17:13215:13238	5343119	17	True				
ANR	5343396	Statement	","	457:41:13239:13239	5343119	18	True				
ANR	5343397	Statement	"""Transferd doesn't support client required file transfer """	458:4:13246:13303	5343119	19	True				
ANR	5343398	Statement	"""protocol."""	459:4:13309:13319	5343119	20	True				
ANR	5343399	Statement	)	459:15:13320:13320	5343119	21	True				
ANR	5343400	ExpressionStatement		459:16:13321:13321	5343119	22	True				
ANR	5343401	ExpressionStatement	respad . put ( * sock )	462:3:13382:13399	5343119	23	True				
ANR	5343402	CallExpression	respad . put ( * sock )		5343119	0					
ANR	5343403	Callee	respad . put		5343119	0					
ANR	5343404	MemberAccess	respad . put		5343119	0					
ANR	5343405	Identifier	respad		5343119	0					
ANR	5343406	Identifier	put		5343119	1					
ANR	5343407	ArgumentList	* sock		5343119	1					
ANR	5343408	Argument	* sock		5343119	0					
ANR	5343409	UnaryOperationExpression	* sock		5343119	0					
ANR	5343410	UnaryOperator	*		5343119	0					
ANR	5343411	Identifier	sock		5343119	1					
ANR	5343412	ExpressionStatement	sock -> end_of_message ( )	463:3:13404:13426	5343119	24	True				
ANR	5343413	CallExpression	sock -> end_of_message ( )		5343119	0					
ANR	5343414	Callee	sock -> end_of_message		5343119	0					
ANR	5343415	PtrMemberAccess	sock -> end_of_message		5343119	0					
ANR	5343416	Identifier	sock		5343119	0					
ANR	5343417	Identifier	end_of_message		5343119	1					
ANR	5343418	ArgumentList			5343119	1					
ANR	5343419	Statement	delete	464:3:13431:13436	5343119	25	True				
ANR	5343420	ExpressionStatement	treq	464:10:13438:13442	5343119	26	True				
ANR	5343421	Identifier	treq		5343119	0					
ANR	5343422	ReturnStatement	return KEEP_STREAM ;	467:3:13495:13513	5343119	27	True				
ANR	5343423	Identifier	KEEP_STREAM		5343119	0					
ANR	5343424	BreakStatement	break ;	468:3:13518:13523	5343119	28	True				
ANR	5343425	ExpressionStatement	cap = gen_capability ( )	476:1:13792:13814	5343119	25	True				
ANR	5343426	AssignmentExpression	cap = gen_capability ( )		5343119	0		=			
ANR	5343427	Identifier	cap		5343119	0					
ANR	5343428	CallExpression	gen_capability ( )		5343119	1					
ANR	5343429	Callee	gen_capability		5343119	0					
ANR	5343430	Identifier	gen_capability		5343119	0					
ANR	5343431	ArgumentList			5343119	1					
ANR	5343432	ExpressionStatement	treq -> set_capability ( cap )	477:1:13817:13842	5343119	26	True				
ANR	5343433	CallExpression	treq -> set_capability ( cap )		5343119	0					
ANR	5343434	Callee	treq -> set_capability		5343119	0					
ANR	5343435	PtrMemberAccess	treq -> set_capability		5343119	0					
ANR	5343436	Identifier	treq		5343119	0					
ANR	5343437	Identifier	set_capability		5343119	1					
ANR	5343438	ArgumentList	cap		5343119	1					
ANR	5343439	Argument	cap		5343119	0					
ANR	5343440	Identifier	cap		5343119	0					
ANR	5343441	ExpressionStatement	"respad . Assign ( ATTR_TREQ_CAPABILITY , cap )"	479:1:13846:13886	5343119	27	True				
ANR	5343442	CallExpression	"respad . Assign ( ATTR_TREQ_CAPABILITY , cap )"		5343119	0					
ANR	5343443	Callee	respad . Assign		5343119	0					
ANR	5343444	MemberAccess	respad . Assign		5343119	0					
ANR	5343445	Identifier	respad		5343119	0					
ANR	5343446	Identifier	Assign		5343119	1					
ANR	5343447	ArgumentList	ATTR_TREQ_CAPABILITY		5343119	1					
ANR	5343448	Argument	ATTR_TREQ_CAPABILITY		5343119	0					
ANR	5343449	Identifier	ATTR_TREQ_CAPABILITY		5343119	0					
ANR	5343450	Argument	cap		5343119	1					
ANR	5343451	Identifier	cap		5343119	0					
ANR	5343452	ExpressionStatement	"dprintf ( D_ALWAYS , ""Assigned capability to treq: %s.\\n"" , cap . Value ( ) )"	481:1:13890:13958	5343119	28	True				
ANR	5343453	CallExpression	"dprintf ( D_ALWAYS , ""Assigned capability to treq: %s.\\n"" , cap . Value ( ) )"		5343119	0					
ANR	5343454	Callee	dprintf		5343119	0					
ANR	5343455	Identifier	dprintf		5343119	0					
ANR	5343456	ArgumentList	D_ALWAYS		5343119	1					
ANR	5343457	Argument	D_ALWAYS		5343119	0					
ANR	5343458	Identifier	D_ALWAYS		5343119	0					
ANR	5343459	Argument	"""Assigned capability to treq: %s.\\n"""		5343119	1					
ANR	5343460	PrimaryExpression	"""Assigned capability to treq: %s.\\n"""		5343119	0					
ANR	5343461	Argument	cap . Value ( )		5343119	2					
ANR	5343462	CallExpression	cap . Value ( )		5343119	0					
ANR	5343463	Callee	cap . Value		5343119	0					
ANR	5343464	MemberAccess	cap . Value		5343119	0					
ANR	5343465	Identifier	cap		5343119	0					
ANR	5343466	Identifier	Value		5343119	1					
ANR	5343467	ArgumentList			5343119	1					
ANR	5343468	ExpressionStatement	respad . put ( * sock )	493:1:14162:14179	5343119	29	True				
ANR	5343469	CallExpression	respad . put ( * sock )		5343119	0					
ANR	5343470	Callee	respad . put		5343119	0					
ANR	5343471	MemberAccess	respad . put		5343119	0					
ANR	5343472	Identifier	respad		5343119	0					
ANR	5343473	Identifier	put		5343119	1					
ANR	5343474	ArgumentList	* sock		5343119	1					
ANR	5343475	Argument	* sock		5343119	0					
ANR	5343476	UnaryOperationExpression	* sock		5343119	0					
ANR	5343477	UnaryOperator	*		5343119	0					
ANR	5343478	Identifier	sock		5343119	1					
ANR	5343479	ExpressionStatement	sock -> end_of_message ( )	494:1:14182:14204	5343119	30	True				
ANR	5343480	CallExpression	sock -> end_of_message ( )		5343119	0					
ANR	5343481	Callee	sock -> end_of_message		5343119	0					
ANR	5343482	PtrMemberAccess	sock -> end_of_message		5343119	0					
ANR	5343483	Identifier	sock		5343119	0					
ANR	5343484	Identifier	end_of_message		5343119	1					
ANR	5343485	ArgumentList			5343119	1					
ANR	5343486	ExpressionStatement	"dprintf ( D_ALWAYS , ""Reported capability back to schedd.\\n"" )"	496:1:14208:14266	5343119	31	True				
ANR	5343487	CallExpression	"dprintf ( D_ALWAYS , ""Reported capability back to schedd.\\n"" )"		5343119	0					
ANR	5343488	Callee	dprintf		5343119	0					
ANR	5343489	Identifier	dprintf		5343119	0					
ANR	5343490	ArgumentList	D_ALWAYS		5343119	1					
ANR	5343491	Argument	D_ALWAYS		5343119	0					
ANR	5343492	Identifier	D_ALWAYS		5343119	0					
ANR	5343493	Argument	"""Reported capability back to schedd.\\n"""		5343119	1					
ANR	5343494	PrimaryExpression	"""Reported capability back to schedd.\\n"""		5343119	0					
ANR	5343495	ExpressionStatement	"m_treqs . insert ( cap , treq )"	501:1:14443:14468	5343119	32	True				
ANR	5343496	CallExpression	"m_treqs . insert ( cap , treq )"		5343119	0					
ANR	5343497	Callee	m_treqs . insert		5343119	0					
ANR	5343498	MemberAccess	m_treqs . insert		5343119	0					
ANR	5343499	Identifier	m_treqs		5343119	0					
ANR	5343500	Identifier	insert		5343119	1					
ANR	5343501	ArgumentList	cap		5343119	1					
ANR	5343502	Argument	cap		5343119	0					
ANR	5343503	Identifier	cap		5343119	0					
ANR	5343504	Argument	treq		5343119	1					
ANR	5343505	Identifier	treq		5343119	0					
ANR	5343506	ExpressionStatement	sock -> decode ( )	504:1:14508:14522	5343119	33	True				
ANR	5343507	CallExpression	sock -> decode ( )		5343119	0					
ANR	5343508	Callee	sock -> decode		5343119	0					
ANR	5343509	PtrMemberAccess	sock -> decode		5343119	0					
ANR	5343510	Identifier	sock		5343119	0					
ANR	5343511	Identifier	decode		5343119	1					
ANR	5343512	ArgumentList			5343119	1					
ANR	5343513	ExpressionStatement	"dprintf ( D_ALWAYS , ""Waiting for another transfer request from schedd.\\n"" )"	506:1:14526:14598	5343119	34	True				
ANR	5343514	CallExpression	"dprintf ( D_ALWAYS , ""Waiting for another transfer request from schedd.\\n"" )"		5343119	0					
ANR	5343515	Callee	dprintf		5343119	0					
ANR	5343516	Identifier	dprintf		5343119	0					
ANR	5343517	ArgumentList	D_ALWAYS		5343119	1					
ANR	5343518	Argument	D_ALWAYS		5343119	0					
ANR	5343519	Identifier	D_ALWAYS		5343119	0					
ANR	5343520	Argument	"""Waiting for another transfer request from schedd.\\n"""		5343119	1					
ANR	5343521	PrimaryExpression	"""Waiting for another transfer request from schedd.\\n"""		5343119	0					
ANR	5343522	Statement	dprintf	508:1:14602:14608	5343119	35	True				
ANR	5343523	Statement	(	508:8:14609:14609	5343119	36	True				
ANR	5343524	Statement	D_ALWAYS	508:9:14610:14617	5343119	37	True				
ANR	5343525	Statement	","	508:17:14618:14618	5343119	38	True				
ANR	5343526	Statement	"""Leaving """	509:2:14622:14631	5343119	39	True				
ANR	5343527	Statement	"""TransferD::accept_transfer_request_encapsulation_old_classads()\\n"""	510:2:14635:14701	5343119	40	True				
ANR	5343528	Statement	)	510:69:14702:14702	5343119	41	True				
ANR	5343529	ExpressionStatement		510:70:14703:14703	5343119	42	True				
ANR	5343530	ReturnStatement	return KEEP_STREAM ;	512:1:14707:14725	5343119	43	True				
ANR	5343531	Identifier	KEEP_STREAM		5343119	0					
ANR	5343532	ReturnType	int		5343119	1					
ANR	5343533	Identifier	TransferD :: accept_transfer_request_encapsulation_old_classads		5343119	2					
ANR	5343534	ParameterList	Stream * sock		5343119	3					
ANR	5343535	Parameter	Stream * sock	384:62:11079:11090	5343119	0	True				
ANR	5343536	ParameterType	Stream *		5343119	0					
ANR	5343537	Identifier	sock		5343119	1					
ANR	5343538	CFGEntryNode	ENTRY		5343119		True				
ANR	5343539	CFGExitNode	EXIT		5343119		True				
ANR	5343540	Symbol	ad -> initFromStream		5343119						
ANR	5343541	Symbol	ad		5343119						
ANR	5343542	Symbol	NULL		5343119						
ANR	5343543	Symbol	* treq		5343119						
ANR	5343544	Symbol	D_ALWAYS		5343119						
ANR	5343545	Symbol	i		5343119						
ANR	5343546	Symbol	TRUE		5343119						
ANR	5343547	Symbol	* ad		5343119						
ANR	5343548	Symbol	gen_capability		5343119						
ANR	5343549	Symbol	m_treqs		5343119						
ANR	5343550	Symbol	KEEP_STREAM		5343119						
ANR	5343551	Symbol	cap . Value		5343119						
ANR	5343552	Symbol	sock		5343119						
ANR	5343553	Symbol	cap		5343119						
ANR	5343554	Symbol	treq -> get_xfer_protocol		5343119						
ANR	5343555	Symbol	ATTR_TREQ_CAPABILITY		5343119						
ANR	5343556	Symbol	treq -> get_num_transfers		5343119						
ANR	5343557	Symbol	ATTR_TREQ_INVALID_REQUEST		5343119						
ANR	5343558	Symbol	FALSE		5343119						
ANR	5343559	Symbol	treq		5343119						
ANR	5343560	Symbol	respad		5343119						
ANR	5343561	Symbol	* sock		5343119						
ANR	5343562	Function	TransferD :: register_to_schedd	517:0:14870:16418							
ANR	5343563	FunctionDef	TransferD :: register_to_schedd (ReliSock * * regsock_ptr)		5343562	0					
ANR	5343564	CompoundStatement		519:0:14939:16418	5343562	0					
ANR	5343565	IdentifierDeclStatement	CondorError errstack ;	520:1:14942:14962	5343562	0	True				
ANR	5343566	IdentifierDecl	errstack		5343562	0					
ANR	5343567	IdentifierDeclType	CondorError		5343562	0					
ANR	5343568	Identifier	errstack		5343562	1					
ANR	5343569	IdentifierDeclStatement	MyString sname ;	521:1:14965:14979	5343562	1	True				
ANR	5343570	IdentifierDecl	sname		5343562	0					
ANR	5343571	IdentifierDeclType	MyString		5343562	0					
ANR	5343572	Identifier	sname		5343562	1					
ANR	5343573	IdentifierDeclStatement	MyString id ;	522:1:14982:14993	5343562	2	True				
ANR	5343574	IdentifierDecl	id		5343562	0					
ANR	5343575	IdentifierDeclType	MyString		5343562	0					
ANR	5343576	Identifier	id		5343562	1					
ANR	5343577	IdentifierDeclStatement	MyString sinful ;	523:1:14996:15011	5343562	3	True				
ANR	5343578	IdentifierDecl	sinful		5343562	0					
ANR	5343579	IdentifierDeclType	MyString		5343562	0					
ANR	5343580	Identifier	sinful		5343562	1					
ANR	5343581	IdentifierDeclStatement	bool rval ;	524:1:15014:15023	5343562	4	True				
ANR	5343582	IdentifierDecl	rval		5343562	0					
ANR	5343583	IdentifierDeclType	bool		5343562	0					
ANR	5343584	Identifier	rval		5343562	1					
ANR	5343585	IfStatement	if ( * regsock_ptr != NULL )		5343562	5					
ANR	5343586	Condition	* regsock_ptr != NULL	526:5:15032:15051	5343562	0	True				
ANR	5343587	EqualityExpression	* regsock_ptr != NULL		5343562	0		!=			
ANR	5343588	UnaryOperationExpression	* regsock_ptr		5343562	0					
ANR	5343589	UnaryOperator	*		5343562	0					
ANR	5343590	Identifier	regsock_ptr		5343562	1					
ANR	5343591	Identifier	NULL		5343562	1					
ANR	5343592	CompoundStatement		8:27:114:114	5343562	1					
ANR	5343593	ExpressionStatement	* regsock_ptr = NULL	527:2:15058:15077	5343562	0	True				
ANR	5343594	AssignmentExpression	* regsock_ptr = NULL		5343562	0		=			
ANR	5343595	UnaryOperationExpression	* regsock_ptr		5343562	0					
ANR	5343596	UnaryOperator	*		5343562	0					
ANR	5343597	Identifier	regsock_ptr		5343562	1					
ANR	5343598	Identifier	NULL		5343562	1					
ANR	5343599	ExpressionStatement	sname = m_features . get_schedd_sinful ( )	530:1:15084:15122	5343562	6	True				
ANR	5343600	AssignmentExpression	sname = m_features . get_schedd_sinful ( )		5343562	0		=			
ANR	5343601	Identifier	sname		5343562	0					
ANR	5343602	CallExpression	m_features . get_schedd_sinful ( )		5343562	1					
ANR	5343603	Callee	m_features . get_schedd_sinful		5343562	0					
ANR	5343604	MemberAccess	m_features . get_schedd_sinful		5343562	0					
ANR	5343605	Identifier	m_features		5343562	0					
ANR	5343606	Identifier	get_schedd_sinful		5343562	1					
ANR	5343607	ArgumentList			5343562	1					
ANR	5343608	ExpressionStatement	id = m_features . get_id ( )	531:1:15125:15149	5343562	7	True				
ANR	5343609	AssignmentExpression	id = m_features . get_id ( )		5343562	0		=			
ANR	5343610	Identifier	id		5343562	0					
ANR	5343611	CallExpression	m_features . get_id ( )		5343562	1					
ANR	5343612	Callee	m_features . get_id		5343562	0					
ANR	5343613	MemberAccess	m_features . get_id		5343562	0					
ANR	5343614	Identifier	m_features		5343562	0					
ANR	5343615	Identifier	get_id		5343562	1					
ANR	5343616	ArgumentList			5343562	1					
ANR	5343617	IfStatement	"if ( sname == ""N/A"" )"		5343562	8					
ANR	5343618	Condition	"sname == ""N/A"""	533:5:15157:15170	5343562	0	True				
ANR	5343619	EqualityExpression	"sname == ""N/A"""		5343562	0		==			
ANR	5343620	Identifier	sname		5343562	0					
ANR	5343621	PrimaryExpression	"""N/A"""		5343562	1					
ANR	5343622	CompoundStatement		15:21:233:233	5343562	1					
ANR	5343623	ExpressionStatement	"dprintf ( D_ALWAYS , ""No schedd specified to which to register.\\n"" )"	535:2:15224:15288	5343562	0	True				
ANR	5343624	CallExpression	"dprintf ( D_ALWAYS , ""No schedd specified to which to register.\\n"" )"		5343562	0					
ANR	5343625	Callee	dprintf		5343562	0					
ANR	5343626	Identifier	dprintf		5343562	0					
ANR	5343627	ArgumentList	D_ALWAYS		5343562	1					
ANR	5343628	Argument	D_ALWAYS		5343562	0					
ANR	5343629	Identifier	D_ALWAYS		5343562	0					
ANR	5343630	Argument	"""No schedd specified to which to register.\\n"""		5343562	1					
ANR	5343631	PrimaryExpression	"""No schedd specified to which to register.\\n"""		5343562	0					
ANR	5343632	ReturnStatement	return REG_RESULT_NO_SCHEDD ;	536:2:15292:15319	5343562	1	True				
ANR	5343633	Identifier	REG_RESULT_NO_SCHEDD		5343562	0					
ANR	5343634	ExpressionStatement	sinful = daemonCore -> InfoCommandSinfulString ( - 1 )	540:1:15357:15405	5343562	9	True				
ANR	5343635	AssignmentExpression	sinful = daemonCore -> InfoCommandSinfulString ( - 1 )		5343562	0		=			
ANR	5343636	Identifier	sinful		5343562	0					
ANR	5343637	CallExpression	daemonCore -> InfoCommandSinfulString ( - 1 )		5343562	1					
ANR	5343638	Callee	daemonCore -> InfoCommandSinfulString		5343562	0					
ANR	5343639	PtrMemberAccess	daemonCore -> InfoCommandSinfulString		5343562	0					
ANR	5343640	Identifier	daemonCore		5343562	0					
ANR	5343641	Identifier	InfoCommandSinfulString		5343562	1					
ANR	5343642	ArgumentList	- 1		5343562	1					
ANR	5343643	Argument	- 1		5343562	0					
ANR	5343644	UnaryOperationExpression	- 1		5343562	0					
ANR	5343645	UnaryOperator	-		5343562	0					
ANR	5343646	PrimaryExpression	1		5343562	1					
ANR	5343647	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Registering myself(%s) to schedd(%s)\\n"" , sinful . Value ( ) , sname . Value ( ) )"	542:1:15409:15504	5343562	10	True				
ANR	5343648	CallExpression	"dprintf ( D_FULLDEBUG , ""Registering myself(%s) to schedd(%s)\\n"" , sinful . Value ( ) , sname . Value ( ) )"		5343562	0					
ANR	5343649	Callee	dprintf		5343562	0					
ANR	5343650	Identifier	dprintf		5343562	0					
ANR	5343651	ArgumentList	D_FULLDEBUG		5343562	1					
ANR	5343652	Argument	D_FULLDEBUG		5343562	0					
ANR	5343653	Identifier	D_FULLDEBUG		5343562	0					
ANR	5343654	Argument	"""Registering myself(%s) to schedd(%s)\\n"""		5343562	1					
ANR	5343655	PrimaryExpression	"""Registering myself(%s) to schedd(%s)\\n"""		5343562	0					
ANR	5343656	Argument	sinful . Value ( )		5343562	2					
ANR	5343657	CallExpression	sinful . Value ( )		5343562	0					
ANR	5343658	Callee	sinful . Value		5343562	0					
ANR	5343659	MemberAccess	sinful . Value		5343562	0					
ANR	5343660	Identifier	sinful		5343562	0					
ANR	5343661	Identifier	Value		5343562	1					
ANR	5343662	ArgumentList			5343562	1					
ANR	5343663	Argument	sname . Value ( )		5343562	3					
ANR	5343664	CallExpression	sname . Value ( )		5343562	0					
ANR	5343665	Callee	sname . Value		5343562	0					
ANR	5343666	MemberAccess	sname . Value		5343562	0					
ANR	5343667	Identifier	sname		5343562	0					
ANR	5343668	Identifier	Value		5343562	1					
ANR	5343669	ArgumentList			5343562	1					
ANR	5343670	IdentifierDeclStatement	"DCSchedd schedd ( sname . Value ( ) , NULL ) ;"	546:1:15535:15571	5343562	11	True				
ANR	5343671	IdentifierDecl	"schedd ( sname . Value ( ) , NULL )"		5343562	0					
ANR	5343672	IdentifierDeclType	DCSchedd		5343562	0					
ANR	5343673	Identifier	schedd		5343562	1					
ANR	5343674	Expression	"sname . Value ( ) , NULL"		5343562	2					
ANR	5343675	CallExpression	sname . Value ( )		5343562	0					
ANR	5343676	Callee	sname . Value		5343562	0					
ANR	5343677	MemberAccess	sname . Value		5343562	0					
ANR	5343678	Identifier	sname		5343562	0					
ANR	5343679	Identifier	Value		5343562	1					
ANR	5343680	ArgumentList			5343562	1					
ANR	5343681	Identifier	NULL		5343562	1					
ANR	5343682	ExpressionStatement	"rval = schedd . register_transferd ( sinful , id , 20 * 3 , regsock_ptr , & errstack )"	549:1:15629:15703	5343562	12	True				
ANR	5343683	AssignmentExpression	"rval = schedd . register_transferd ( sinful , id , 20 * 3 , regsock_ptr , & errstack )"		5343562	0		=			
ANR	5343684	Identifier	rval		5343562	0					
ANR	5343685	CallExpression	"schedd . register_transferd ( sinful , id , 20 * 3 , regsock_ptr , & errstack )"		5343562	1					
ANR	5343686	Callee	schedd . register_transferd		5343562	0					
ANR	5343687	MemberAccess	schedd . register_transferd		5343562	0					
ANR	5343688	Identifier	schedd		5343562	0					
ANR	5343689	Identifier	register_transferd		5343562	1					
ANR	5343690	ArgumentList	sinful		5343562	1					
ANR	5343691	Argument	sinful		5343562	0					
ANR	5343692	Identifier	sinful		5343562	0					
ANR	5343693	Argument	id		5343562	1					
ANR	5343694	Identifier	id		5343562	0					
ANR	5343695	Argument	20 * 3		5343562	2					
ANR	5343696	MultiplicativeExpression	20 * 3		5343562	0		*			
ANR	5343697	PrimaryExpression	20		5343562	0					
ANR	5343698	PrimaryExpression	3		5343562	1					
ANR	5343699	Argument	regsock_ptr		5343562	3					
ANR	5343700	Identifier	regsock_ptr		5343562	0					
ANR	5343701	Argument	& errstack		5343562	4					
ANR	5343702	UnaryOperationExpression	& errstack		5343562	0					
ANR	5343703	UnaryOperator	&		5343562	0					
ANR	5343704	Identifier	errstack		5343562	1					
ANR	5343705	IfStatement	if ( rval == false )		5343562	13					
ANR	5343706	Condition	rval == false	551:5:15711:15723	5343562	0	True				
ANR	5343707	EqualityExpression	rval == false		5343562	0		==			
ANR	5343708	Identifier	rval		5343562	0					
ANR	5343709	Identifier	false		5343562	1					
ANR	5343710	CompoundStatement		33:20:786:786	5343562	1					
ANR	5343711	Statement	dprintf	553:2:15745:15751	5343562	0	True				
ANR	5343712	Statement	(	553:9:15752:15752	5343562	1	True				
ANR	5343713	Statement	D_ALWAYS	553:10:15753:15760	5343562	2	True				
ANR	5343714	Statement	","	553:18:15761:15761	5343562	3	True				
ANR	5343715	Statement	"""TransferRequest::register_to_schedd(): Failed to """	553:20:15763:15813	5343562	4	True				
ANR	5343716	Statement	"""register. Schedd gave reason '%s'\\n"""	554:3:15818:15854	5343562	5	True				
ANR	5343717	Statement	","	554:40:15855:15855	5343562	6	True				
ANR	5343718	Statement	errstack	554:42:15857:15864	5343562	7	True				
ANR	5343719	Statement	.	554:50:15865:15865	5343562	8	True				
ANR	5343720	Statement	getFullText	554:51:15866:15876	5343562	9	True				
ANR	5343721	Statement	(	554:62:15877:15877	5343562	10	True				
ANR	5343722	Statement	)	554:63:15878:15878	5343562	11	True				
ANR	5343723	Statement	)	554:64:15879:15879	5343562	12	True				
ANR	5343724	ExpressionStatement		554:65:15880:15880	5343562	13	True				
ANR	5343725	ReturnStatement	return REG_RESULT_FAILED ;	555:2:15884:15908	5343562	14	True				
ANR	5343726	Identifier	REG_RESULT_FAILED		5343562	0					
ANR	5343727	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Succesfully registered, awaiting treq channel message....\\n"" )"	568:1:16301:16387	5343562	14	True				
ANR	5343728	CallExpression	"dprintf ( D_FULLDEBUG , ""Succesfully registered, awaiting treq channel message....\\n"" )"		5343562	0					
ANR	5343729	Callee	dprintf		5343562	0					
ANR	5343730	Identifier	dprintf		5343562	0					
ANR	5343731	ArgumentList	D_FULLDEBUG		5343562	1					
ANR	5343732	Argument	D_FULLDEBUG		5343562	0					
ANR	5343733	Identifier	D_FULLDEBUG		5343562	0					
ANR	5343734	Argument	"""Succesfully registered, awaiting treq channel message....\\n"""		5343562	1					
ANR	5343735	PrimaryExpression	"""Succesfully registered, awaiting treq channel message....\\n"""		5343562	0					
ANR	5343736	ReturnStatement	return REG_RESULT_SUCCESS ;	571:1:16391:16416	5343562	15	True				
ANR	5343737	Identifier	REG_RESULT_SUCCESS		5343562	0					
ANR	5343738	ReturnType	RegisterResult		5343562	1					
ANR	5343739	Identifier	TransferD :: register_to_schedd		5343562	2					
ANR	5343740	ParameterList	ReliSock * * regsock_ptr		5343562	3					
ANR	5343741	Parameter	ReliSock * * regsock_ptr	518:30:14915:14936	5343562	0	True				
ANR	5343742	ParameterType	ReliSock * *		5343562	0					
ANR	5343743	Identifier	regsock_ptr		5343562	1					
ANR	5343744	CFGEntryNode	ENTRY		5343562		True				
ANR	5343745	CFGExitNode	EXIT		5343562		True				
ANR	5343746	Symbol	schedd . register_transferd		5343562						
ANR	5343747	Symbol	m_features . get_schedd_sinful		5343562						
ANR	5343748	Symbol	REG_RESULT_FAILED		5343562						
ANR	5343749	Symbol	m_features . get_id		5343562						
ANR	5343750	Symbol	regsock_ptr		5343562						
ANR	5343751	Symbol	daemonCore		5343562						
ANR	5343752	Symbol	m_features		5343562						
ANR	5343753	Symbol	* regsock_ptr		5343562						
ANR	5343754	Symbol	& errstack		5343562						
ANR	5343755	Symbol	rval		5343562						
ANR	5343756	Symbol	id		5343562						
ANR	5343757	Symbol	sname . Value		5343562						
ANR	5343758	Symbol	sinful		5343562						
ANR	5343759	Symbol	REG_RESULT_NO_SCHEDD		5343562						
ANR	5343760	Symbol	daemonCore -> InfoCommandSinfulString		5343562						
ANR	5343761	Symbol	NULL		5343562						
ANR	5343762	Symbol	D_ALWAYS		5343562						
ANR	5343763	Symbol	sinful . Value		5343562						
ANR	5343764	Symbol	false		5343562						
ANR	5343765	Symbol	D_FULLDEBUG		5343562						
ANR	5343766	Symbol	schedd		5343562						
ANR	5343767	Symbol	errstack		5343562						
ANR	5343768	Symbol	REG_RESULT_SUCCESS		5343562						
ANR	5343769	Symbol	sname		5343562						
ANR	5343770	Symbol	* daemonCore		5343562						
ANR	5343771	Function	TransferD :: register_handlers	574:0:16421:17823							
ANR	5343772	FunctionDef	TransferD :: register_handlers ()		5343771	0					
ANR	5343773	CompoundStatement		576:0:16461:17823	5343771	0					
ANR	5343774	ExpressionStatement	"daemonCore -> Register_Command ( DUMP_STATE , ""DUMP_STATE"" , ( CommandHandlercpp ) & TransferD :: dump_state_handler , ""dump_state_handler"" , this , READ )"	578:1:16487:16635	5343771	0	True				
ANR	5343775	CallExpression	"daemonCore -> Register_Command ( DUMP_STATE , ""DUMP_STATE"" , ( CommandHandlercpp ) & TransferD :: dump_state_handler , ""dump_state_handler"" , this , READ )"		5343771	0					
ANR	5343776	Callee	daemonCore -> Register_Command		5343771	0					
ANR	5343777	PtrMemberAccess	daemonCore -> Register_Command		5343771	0					
ANR	5343778	Identifier	daemonCore		5343771	0					
ANR	5343779	Identifier	Register_Command		5343771	1					
ANR	5343780	ArgumentList	DUMP_STATE		5343771	1					
ANR	5343781	Argument	DUMP_STATE		5343771	0					
ANR	5343782	Identifier	DUMP_STATE		5343771	0					
ANR	5343783	Argument	"""DUMP_STATE"""		5343771	1					
ANR	5343784	PrimaryExpression	"""DUMP_STATE"""		5343771	0					
ANR	5343785	Argument	( CommandHandlercpp ) & TransferD :: dump_state_handler		5343771	2					
ANR	5343786	CastExpression	( CommandHandlercpp ) & TransferD :: dump_state_handler		5343771	0					
ANR	5343787	CastTarget	CommandHandlercpp		5343771	0					
ANR	5343788	UnaryOperationExpression	& TransferD :: dump_state_handler		5343771	1					
ANR	5343789	UnaryOperator	&		5343771	0					
ANR	5343790	Identifier	TransferD :: dump_state_handler		5343771	1					
ANR	5343791	Argument	"""dump_state_handler"""		5343771	3					
ANR	5343792	PrimaryExpression	"""dump_state_handler"""		5343771	0					
ANR	5343793	Argument	this		5343771	4					
ANR	5343794	Identifier	this		5343771	0					
ANR	5343795	Argument	READ		5343771	5					
ANR	5343796	Identifier	READ		5343771	0					
ANR	5343797	ExpressionStatement	"daemonCore -> Register_Command ( TRANSFERD_CONTROL_CHANNEL , ""TRANSFERD_CONTROL_CHANNEL"" , ( CommandHandlercpp ) & TransferD :: setup_transfer_request_handler , ""setup_transfer_request_handler"" , this , WRITE )"	586:1:16829:17032	5343771	1	True				
ANR	5343798	CallExpression	"daemonCore -> Register_Command ( TRANSFERD_CONTROL_CHANNEL , ""TRANSFERD_CONTROL_CHANNEL"" , ( CommandHandlercpp ) & TransferD :: setup_transfer_request_handler , ""setup_transfer_request_handler"" , this , WRITE )"		5343771	0					
ANR	5343799	Callee	daemonCore -> Register_Command		5343771	0					
ANR	5343800	PtrMemberAccess	daemonCore -> Register_Command		5343771	0					
ANR	5343801	Identifier	daemonCore		5343771	0					
ANR	5343802	Identifier	Register_Command		5343771	1					
ANR	5343803	ArgumentList	TRANSFERD_CONTROL_CHANNEL		5343771	1					
ANR	5343804	Argument	TRANSFERD_CONTROL_CHANNEL		5343771	0					
ANR	5343805	Identifier	TRANSFERD_CONTROL_CHANNEL		5343771	0					
ANR	5343806	Argument	"""TRANSFERD_CONTROL_CHANNEL"""		5343771	1					
ANR	5343807	PrimaryExpression	"""TRANSFERD_CONTROL_CHANNEL"""		5343771	0					
ANR	5343808	Argument	( CommandHandlercpp ) & TransferD :: setup_transfer_request_handler		5343771	2					
ANR	5343809	CastExpression	( CommandHandlercpp ) & TransferD :: setup_transfer_request_handler		5343771	0					
ANR	5343810	CastTarget	CommandHandlercpp		5343771	0					
ANR	5343811	UnaryOperationExpression	& TransferD :: setup_transfer_request_handler		5343771	1					
ANR	5343812	UnaryOperator	&		5343771	0					
ANR	5343813	Identifier	TransferD :: setup_transfer_request_handler		5343771	1					
ANR	5343814	Argument	"""setup_transfer_request_handler"""		5343771	3					
ANR	5343815	PrimaryExpression	"""setup_transfer_request_handler"""		5343771	0					
ANR	5343816	Argument	this		5343771	4					
ANR	5343817	Identifier	this		5343771	0					
ANR	5343818	Argument	WRITE		5343771	5					
ANR	5343819	Identifier	WRITE		5343771	0					
ANR	5343820	ExpressionStatement	"daemonCore -> Register_Command ( TRANSFERD_WRITE_FILES , ""TRANSFERD_WRITE_FILES"" , ( CommandHandlercpp ) & TransferD :: write_files_handler , ""write_files_handler"" , this , WRITE )"	593:1:17153:17326	5343771	2	True				
ANR	5343821	CallExpression	"daemonCore -> Register_Command ( TRANSFERD_WRITE_FILES , ""TRANSFERD_WRITE_FILES"" , ( CommandHandlercpp ) & TransferD :: write_files_handler , ""write_files_handler"" , this , WRITE )"		5343771	0					
ANR	5343822	Callee	daemonCore -> Register_Command		5343771	0					
ANR	5343823	PtrMemberAccess	daemonCore -> Register_Command		5343771	0					
ANR	5343824	Identifier	daemonCore		5343771	0					
ANR	5343825	Identifier	Register_Command		5343771	1					
ANR	5343826	ArgumentList	TRANSFERD_WRITE_FILES		5343771	1					
ANR	5343827	Argument	TRANSFERD_WRITE_FILES		5343771	0					
ANR	5343828	Identifier	TRANSFERD_WRITE_FILES		5343771	0					
ANR	5343829	Argument	"""TRANSFERD_WRITE_FILES"""		5343771	1					
ANR	5343830	PrimaryExpression	"""TRANSFERD_WRITE_FILES"""		5343771	0					
ANR	5343831	Argument	( CommandHandlercpp ) & TransferD :: write_files_handler		5343771	2					
ANR	5343832	CastExpression	( CommandHandlercpp ) & TransferD :: write_files_handler		5343771	0					
ANR	5343833	CastTarget	CommandHandlercpp		5343771	0					
ANR	5343834	UnaryOperationExpression	& TransferD :: write_files_handler		5343771	1					
ANR	5343835	UnaryOperator	&		5343771	0					
ANR	5343836	Identifier	TransferD :: write_files_handler		5343771	1					
ANR	5343837	Argument	"""write_files_handler"""		5343771	3					
ANR	5343838	PrimaryExpression	"""write_files_handler"""		5343771	0					
ANR	5343839	Argument	this		5343771	4					
ANR	5343840	Identifier	this		5343771	0					
ANR	5343841	Argument	WRITE		5343771	5					
ANR	5343842	Identifier	WRITE		5343771	0					
ANR	5343843	ExpressionStatement	"daemonCore -> Register_Command ( TRANSFERD_READ_FILES , ""TRANSFERD_READ_FILES"" , ( CommandHandlercpp ) & TransferD :: read_files_handler , ""read_files_handler"" , this , READ )"	600:1:17446:17614	5343771	3	True				
ANR	5343844	CallExpression	"daemonCore -> Register_Command ( TRANSFERD_READ_FILES , ""TRANSFERD_READ_FILES"" , ( CommandHandlercpp ) & TransferD :: read_files_handler , ""read_files_handler"" , this , READ )"		5343771	0					
ANR	5343845	Callee	daemonCore -> Register_Command		5343771	0					
ANR	5343846	PtrMemberAccess	daemonCore -> Register_Command		5343771	0					
ANR	5343847	Identifier	daemonCore		5343771	0					
ANR	5343848	Identifier	Register_Command		5343771	1					
ANR	5343849	ArgumentList	TRANSFERD_READ_FILES		5343771	1					
ANR	5343850	Argument	TRANSFERD_READ_FILES		5343771	0					
ANR	5343851	Identifier	TRANSFERD_READ_FILES		5343771	0					
ANR	5343852	Argument	"""TRANSFERD_READ_FILES"""		5343771	1					
ANR	5343853	PrimaryExpression	"""TRANSFERD_READ_FILES"""		5343771	0					
ANR	5343854	Argument	( CommandHandlercpp ) & TransferD :: read_files_handler		5343771	2					
ANR	5343855	CastExpression	( CommandHandlercpp ) & TransferD :: read_files_handler		5343771	0					
ANR	5343856	CastTarget	CommandHandlercpp		5343771	0					
ANR	5343857	UnaryOperationExpression	& TransferD :: read_files_handler		5343771	1					
ANR	5343858	UnaryOperator	&		5343771	0					
ANR	5343859	Identifier	TransferD :: read_files_handler		5343771	1					
ANR	5343860	Argument	"""read_files_handler"""		5343771	3					
ANR	5343861	PrimaryExpression	"""read_files_handler"""		5343771	0					
ANR	5343862	Argument	this		5343771	4					
ANR	5343863	Identifier	this		5343771	0					
ANR	5343864	Argument	READ		5343771	5					
ANR	5343865	Identifier	READ		5343771	0					
ANR	5343866	ExpressionStatement	"daemonCore -> Register_Reaper ( ""Reaper"" , ( ReaperHandlercpp ) & TransferD :: reaper_handler , ""Reaper"" , this )"	607:1:17719:17821	5343771	4	True				
ANR	5343867	CallExpression	"daemonCore -> Register_Reaper ( ""Reaper"" , ( ReaperHandlercpp ) & TransferD :: reaper_handler , ""Reaper"" , this )"		5343771	0					
ANR	5343868	Callee	daemonCore -> Register_Reaper		5343771	0					
ANR	5343869	PtrMemberAccess	daemonCore -> Register_Reaper		5343771	0					
ANR	5343870	Identifier	daemonCore		5343771	0					
ANR	5343871	Identifier	Register_Reaper		5343771	1					
ANR	5343872	ArgumentList	"""Reaper"""		5343771	1					
ANR	5343873	Argument	"""Reaper"""		5343771	0					
ANR	5343874	PrimaryExpression	"""Reaper"""		5343771	0					
ANR	5343875	Argument	( ReaperHandlercpp ) & TransferD :: reaper_handler		5343771	1					
ANR	5343876	CastExpression	( ReaperHandlercpp ) & TransferD :: reaper_handler		5343771	0					
ANR	5343877	CastTarget	ReaperHandlercpp		5343771	0					
ANR	5343878	UnaryOperationExpression	& TransferD :: reaper_handler		5343771	1					
ANR	5343879	UnaryOperator	&		5343771	0					
ANR	5343880	Identifier	TransferD :: reaper_handler		5343771	1					
ANR	5343881	Argument	"""Reaper"""		5343771	2					
ANR	5343882	PrimaryExpression	"""Reaper"""		5343771	0					
ANR	5343883	Argument	this		5343771	3					
ANR	5343884	Identifier	this		5343771	0					
ANR	5343885	ReturnType	void		5343771	1					
ANR	5343886	Identifier	TransferD :: register_handlers		5343771	2					
ANR	5343887	ParameterList			5343771	3					
ANR	5343888	CFGEntryNode	ENTRY		5343771		True				
ANR	5343889	CFGExitNode	EXIT		5343771		True				
ANR	5343890	Symbol	TRANSFERD_READ_FILES		5343771						
ANR	5343891	Symbol	this		5343771						
ANR	5343892	Symbol	& TransferD :: read_files_handler		5343771						
ANR	5343893	Symbol	& TransferD :: dump_state_handler		5343771						
ANR	5343894	Symbol	WRITE		5343771						
ANR	5343895	Symbol	READ		5343771						
ANR	5343896	Symbol	& TransferD :: setup_transfer_request_handler		5343771						
ANR	5343897	Symbol	TRANSFERD_WRITE_FILES		5343771						
ANR	5343898	Symbol	daemonCore		5343771						
ANR	5343899	Symbol	& TransferD :: write_files_handler		5343771						
ANR	5343900	Symbol	DUMP_STATE		5343771						
ANR	5343901	Symbol	& TransferD :: reaper_handler		5343771						
ANR	5343902	Symbol	TRANSFERD_CONTROL_CHANNEL		5343771						
ANR	5343903	Function	TransferD :: register_timers	611:0:17826:18312							
ANR	5343904	FunctionDef	TransferD :: register_timers ()		5343903	0					
ANR	5343905	CompoundStatement		613:0:17864:18312	5343903	0					
ANR	5343906	ExpressionStatement	"daemonCore -> Register_Timer ( 0 , 20 , ( TimerHandlercpp ) & TransferD :: exit_due_to_inactivity_timer , ""TransferD::exit_due_to_inactivity_timer"" , this )"	620:1:18163:18310	5343903	0	True				
ANR	5343907	CallExpression	"daemonCore -> Register_Timer ( 0 , 20 , ( TimerHandlercpp ) & TransferD :: exit_due_to_inactivity_timer , ""TransferD::exit_due_to_inactivity_timer"" , this )"		5343903	0					
ANR	5343908	Callee	daemonCore -> Register_Timer		5343903	0					
ANR	5343909	PtrMemberAccess	daemonCore -> Register_Timer		5343903	0					
ANR	5343910	Identifier	daemonCore		5343903	0					
ANR	5343911	Identifier	Register_Timer		5343903	1					
ANR	5343912	ArgumentList	0		5343903	1					
ANR	5343913	Argument	0		5343903	0					
ANR	5343914	PrimaryExpression	0		5343903	0					
ANR	5343915	Argument	20		5343903	1					
ANR	5343916	PrimaryExpression	20		5343903	0					
ANR	5343917	Argument	( TimerHandlercpp ) & TransferD :: exit_due_to_inactivity_timer		5343903	2					
ANR	5343918	CastExpression	( TimerHandlercpp ) & TransferD :: exit_due_to_inactivity_timer		5343903	0					
ANR	5343919	CastTarget	TimerHandlercpp		5343903	0					
ANR	5343920	UnaryOperationExpression	& TransferD :: exit_due_to_inactivity_timer		5343903	1					
ANR	5343921	UnaryOperator	&		5343903	0					
ANR	5343922	Identifier	TransferD :: exit_due_to_inactivity_timer		5343903	1					
ANR	5343923	Argument	"""TransferD::exit_due_to_inactivity_timer"""		5343903	3					
ANR	5343924	PrimaryExpression	"""TransferD::exit_due_to_inactivity_timer"""		5343903	0					
ANR	5343925	Argument	this		5343903	4					
ANR	5343926	Identifier	this		5343903	0					
ANR	5343927	ReturnType	void		5343903	1					
ANR	5343928	Identifier	TransferD :: register_timers		5343903	2					
ANR	5343929	ParameterList			5343903	3					
ANR	5343930	CFGEntryNode	ENTRY		5343903		True				
ANR	5343931	CFGExitNode	EXIT		5343903		True				
ANR	5343932	Symbol	& TransferD :: exit_due_to_inactivity_timer		5343903						
ANR	5343933	Symbol	daemonCore		5343903						
ANR	5343934	Symbol	this		5343903						
ANR	5343935	Function	usage	626:0:18316:18767							
ANR	5343936	FunctionDef	usage ()		5343935	0					
ANR	5343937	CompoundStatement		627:0:18333:18767	5343935	0					
ANR	5343938	Statement	dprintf	628:1:18336:18342	5343935	0	True				
ANR	5343939	Statement	(	628:8:18343:18343	5343935	1	True				
ANR	5343940	Statement	D_ALWAYS	628:9:18344:18351	5343935	2	True				
ANR	5343941	Statement	","	628:17:18352:18352	5343935	3	True				
ANR	5343942	Statement	"""Usage info:\\n"""	629:2:18357:18371	5343935	4	True				
ANR	5343943	Statement	"""--schedd <sinful>: Address of the schedd the transferd will contact\\n"""	630:2:18375:18445	5343935	5	True				
ANR	5343944	Statement	"""--stdin:           Accept a transfer request on stdin\\n"""	631:2:18449:18505	5343935	6	True				
ANR	5343945	Statement	"""--id <ascii>:      Used by the schedd to pair transferds to requests\\n"""	632:2:18509:18580	5343935	7	True				
ANR	5343946	Statement	"""--shadow <upload|download>:\\n"""	633:2:18584:18614	5343935	8	True				
ANR	5343947	Statement	"""                   Used with --stdin, transferd connects to shadow.\\n"""	634:2:18618:18688	5343935	9	True				
ANR	5343948	Statement	"""                   This is demo mode with the starter.\\n"""	635:2:18692:18749	5343935	10	True				
ANR	5343949	Statement	)	635:60:18750:18750	5343935	11	True				
ANR	5343950	ExpressionStatement		635:61:18751:18751	5343935	12	True				
ANR	5343951	ExpressionStatement	DC_Exit ( 0 )	637:1:18755:18765	5343935	13	True				
ANR	5343952	CallExpression	DC_Exit ( 0 )		5343935	0					
ANR	5343953	Callee	DC_Exit		5343935	0					
ANR	5343954	Identifier	DC_Exit		5343935	0					
ANR	5343955	ArgumentList	0		5343935	1					
ANR	5343956	Argument	0		5343935	0					
ANR	5343957	PrimaryExpression	0		5343935	0					
ANR	5343958	ReturnType	void		5343935	1					
ANR	5343959	Identifier	usage		5343935	2					
ANR	5343960	ParameterList			5343935	3					
ANR	5343961	CFGEntryNode	ENTRY		5343935		True				
ANR	5343962	CFGExitNode	EXIT		5343935		True				
