command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	828824	File	data/converged/CVE-2011-4930_htcondor/condor_arglist.cpp								
ANR	828825	Function	append_arg	27:0:951:1622							
ANR	828826	FunctionDef	"append_arg (char const * arg , MyString & result)"		828825	0					
ANR	828827	CompoundStatement		27:50:1001:1622	828825	0					
ANR	828828	IfStatement	if ( result . Length ( ) )		828825	0					
ANR	828829	Condition	result . Length ( )	28:4:1007:1021	828825	0	True				
ANR	828830	CallExpression	result . Length ( )		828825	0					
ANR	828831	Callee	result . Length		828825	0					
ANR	828832	MemberAccess	result . Length		828825	0					
ANR	828833	Identifier	result		828825	0					
ANR	828834	Identifier	Length		828825	1					
ANR	828835	ArgumentList			828825	1					
ANR	828836	CompoundStatement		2:21:22:22	828825	1					
ANR	828837	ExpressionStatement	"result += "" """	29:2:1028:1041	828825	0	True				
ANR	828838	AssignmentExpression	"result += "" """		828825	0		+=			
ANR	828839	Identifier	result		828825	0					
ANR	828840	PrimaryExpression	""" """		828825	1					
ANR	828841	ExpressionStatement	ASSERT ( arg )	31:1:1047:1058	828825	1	True				
ANR	828842	CallExpression	ASSERT ( arg )		828825	0					
ANR	828843	Callee	ASSERT		828825	0					
ANR	828844	Identifier	ASSERT		828825	0					
ANR	828845	ArgumentList	arg		828825	1					
ANR	828846	Argument	arg		828825	0					
ANR	828847	Identifier	arg		828825	0					
ANR	828848	IfStatement	if ( ! * arg )		828825	2					
ANR	828849	Condition	! * arg	32:4:1064:1068	828825	0	True				
ANR	828850	UnaryOperationExpression	! * arg		828825	0					
ANR	828851	UnaryOperator	!		828825	0					
ANR	828852	UnaryOperationExpression	* arg		828825	1					
ANR	828853	UnaryOperator	*		828825	0					
ANR	828854	Identifier	arg		828825	1					
ANR	828855	CompoundStatement		6:11:69:69	828825	1					
ANR	828856	ExpressionStatement	"result += ""''"""	33:2:1075:1089	828825	0	True				
ANR	828857	AssignmentExpression	"result += ""''"""		828825	0		+=			
ANR	828858	Identifier	result		828825	0					
ANR	828859	PrimaryExpression	"""''"""		828825	1					
ANR	828860	WhileStatement	while ( * arg )		828825	3					
ANR	828861	Condition	* arg	35:7:1113:1116	828825	0	True				
ANR	828862	UnaryOperationExpression	* arg		828825	0					
ANR	828863	UnaryOperator	*		828825	0					
ANR	828864	Identifier	arg		828825	1					
ANR	828865	CompoundStatement		9:13:117:117	828825	1					
ANR	828866	SwitchStatement	switch ( * arg )		828825	0					
ANR	828867	Condition	* arg	36:9:1130:1133	828825	0	True				
ANR	828868	UnaryOperationExpression	* arg		828825	0					
ANR	828869	UnaryOperator	*		828825	0					
ANR	828870	Identifier	arg		828825	1					
ANR	828871	CompoundStatement		10:15:134:134	828825	1					
ANR	828872	Label	case ' ' :	37:2:1140:1148	828825	0	True				
ANR	828873	Label	case '\\t' :	38:2:1152:1161	828825	1	True				
ANR	828874	Label	case '\\n' :	39:2:1165:1174	828825	2	True				
ANR	828875	Label	case '\\r' :	40:2:1178:1187	828825	3	True				
ANR	828876	Label	case '\\'' :	41:2:1191:1200	828825	4	True				
ANR	828877	IfStatement	if ( result . Length ( ) && result [ result . Length ( ) - 1 ] == '\\'' )		828825	5					
ANR	828878	Condition	result . Length ( ) && result [ result . Length ( ) - 1 ] == '\\''	42:6:1208:1259	828825	0	True				
ANR	828879	AndExpression	result . Length ( ) && result [ result . Length ( ) - 1 ] == '\\''		828825	0		&&			
ANR	828880	CallExpression	result . Length ( )		828825	0					
ANR	828881	Callee	result . Length		828825	0					
ANR	828882	MemberAccess	result . Length		828825	0					
ANR	828883	Identifier	result		828825	0					
ANR	828884	Identifier	Length		828825	1					
ANR	828885	ArgumentList			828825	1					
ANR	828886	EqualityExpression	result [ result . Length ( ) - 1 ] == '\\''		828825	1		==			
ANR	828887	ArrayIndexing	result [ result . Length ( ) - 1 ]		828825	0					
ANR	828888	Identifier	result		828825	0					
ANR	828889	AdditiveExpression	result . Length ( ) - 1		828825	1		-			
ANR	828890	CallExpression	result . Length ( )		828825	0					
ANR	828891	Callee	result . Length		828825	0					
ANR	828892	MemberAccess	result . Length		828825	0					
ANR	828893	Identifier	result		828825	0					
ANR	828894	Identifier	Length		828825	1					
ANR	828895	ArgumentList			828825	1					
ANR	828896	PrimaryExpression	1		828825	1					
ANR	828897	PrimaryExpression	'\\''		828825	1					
ANR	828898	CompoundStatement		16:60:260:260	828825	1					
ANR	828899	ExpressionStatement	"result . setChar ( result . Length ( ) - 1 , '\\0' )"	45:4:1370:1408	828825	0	True				
ANR	828900	CallExpression	"result . setChar ( result . Length ( ) - 1 , '\\0' )"		828825	0					
ANR	828901	Callee	result . setChar		828825	0					
ANR	828902	MemberAccess	result . setChar		828825	0					
ANR	828903	Identifier	result		828825	0					
ANR	828904	Identifier	setChar		828825	1					
ANR	828905	ArgumentList	result . Length ( ) - 1		828825	1					
ANR	828906	Argument	result . Length ( ) - 1		828825	0					
ANR	828907	AdditiveExpression	result . Length ( ) - 1		828825	0		-			
ANR	828908	CallExpression	result . Length ( )		828825	0					
ANR	828909	Callee	result . Length		828825	0					
ANR	828910	MemberAccess	result . Length		828825	0					
ANR	828911	Identifier	result		828825	0					
ANR	828912	Identifier	Length		828825	1					
ANR	828913	ArgumentList			828825	1					
ANR	828914	PrimaryExpression	1		828825	1					
ANR	828915	Argument	'\\0'		828825	1					
ANR	828916	PrimaryExpression	'\\0'		828825	0					
ANR	828917	ElseStatement	else		828825	0					
ANR	828918	CompoundStatement		21:8:421:421	828825	0					
ANR	828919	ExpressionStatement	result += '\\''	48:4:1429:1443	828825	0	True				
ANR	828920	AssignmentExpression	result += '\\''		828825	0		+=			
ANR	828921	Identifier	result		828825	0					
ANR	828922	PrimaryExpression	'\\''		828825	1					
ANR	828923	IfStatement	if ( * arg == '\\'' )		828825	6					
ANR	828924	Condition	* arg == '\\''	50:6:1456:1467	828825	0	True				
ANR	828925	EqualityExpression	* arg == '\\''		828825	0		==			
ANR	828926	UnaryOperationExpression	* arg		828825	0					
ANR	828927	UnaryOperator	*		828825	0					
ANR	828928	Identifier	arg		828825	1					
ANR	828929	PrimaryExpression	'\\''		828825	1					
ANR	828930	CompoundStatement		24:20:468:468	828825	1					
ANR	828931	ExpressionStatement	result += '\\''	51:4:1476:1490	828825	0	True				
ANR	828932	AssignmentExpression	result += '\\''		828825	0		+=			
ANR	828933	Identifier	result		828825	0					
ANR	828934	PrimaryExpression	'\\''		828825	1					
ANR	828935	ExpressionStatement	result += * ( arg ++ )	53:3:1532:1550	828825	7	True				
ANR	828936	AssignmentExpression	result += * ( arg ++ )		828825	0		+=			
ANR	828937	Identifier	result		828825	0					
ANR	828938	UnaryOperationExpression	* ( arg ++ )		828825	1					
ANR	828939	UnaryOperator	*		828825	0					
ANR	828940	PostIncDecOperationExpression	arg ++		828825	1					
ANR	828941	Identifier	arg		828825	0					
ANR	828942	IncDec	++		828825	1					
ANR	828943	ExpressionStatement	result += '\\''	54:3:1555:1569	828825	8	True				
ANR	828944	AssignmentExpression	result += '\\''		828825	0		+=			
ANR	828945	Identifier	result		828825	0					
ANR	828946	PrimaryExpression	'\\''		828825	1					
ANR	828947	BreakStatement	break ;	55:3:1574:1579	828825	9	True				
ANR	828948	Label	default :	56:2:1583:1590	828825	10	True				
ANR	828949	Identifier	default		828825	0					
ANR	828950	ExpressionStatement	result += * ( arg ++ )	57:3:1595:1613	828825	11	True				
ANR	828951	AssignmentExpression	result += * ( arg ++ )		828825	0		+=			
ANR	828952	Identifier	result		828825	0					
ANR	828953	UnaryOperationExpression	* ( arg ++ )		828825	1					
ANR	828954	UnaryOperator	*		828825	0					
ANR	828955	PostIncDecOperationExpression	arg ++		828825	1					
ANR	828956	Identifier	arg		828825	0					
ANR	828957	IncDec	++		828825	1					
ANR	828958	ReturnType	void		828825	1					
ANR	828959	Identifier	append_arg		828825	2					
ANR	828960	ParameterList	"char const * arg , MyString & result"		828825	3					
ANR	828961	Parameter	char const * arg	27:16:967:981	828825	0	True				
ANR	828962	ParameterType	char const *		828825	0					
ANR	828963	Identifier	arg		828825	1					
ANR	828964	Parameter	MyString & result	27:32:983:998	828825	1	True				
ANR	828965	ParameterType	MyString &		828825	0					
ANR	828966	Identifier	result		828825	1					
ANR	828967	CFGEntryNode	ENTRY		828825		True				
ANR	828968	CFGExitNode	EXIT		828825		True				
ANR	828969	Symbol	result		828825						
ANR	828970	Symbol	* ( arg ++ )		828825						
ANR	828971	Symbol	* result		828825						
ANR	828972	Symbol	arg		828825						
ANR	828973	Symbol	result . Length		828825						
ANR	828974	Symbol	* result . Length		828825						
ANR	828975	Symbol	* arg		828825						
ANR	828976	Function	join_args	62:0:1625:1895							
ANR	828977	FunctionDef	"join_args (SimpleList < MyString > const & args_list , MyString * result , int start_arg)"		828976	0					
ANR	828978	CompoundStatement		63:0:1710:1895	828976	0					
ANR	828979	IdentifierDeclStatement	SimpleListIterator < MyString > it ( args_list ) ;	64:1:1713:1755	828976	0	True				
ANR	828980	IdentifierDecl	it ( args_list )		828976	0					
ANR	828981	IdentifierDeclType	SimpleListIterator < MyString >		828976	0					
ANR	828982	Identifier	it		828976	1					
ANR	828983	Identifier	args_list		828976	2					
ANR	828984	ExpressionStatement	ASSERT ( result )	65:1:1758:1772	828976	1	True				
ANR	828985	CallExpression	ASSERT ( result )		828976	0					
ANR	828986	Callee	ASSERT		828976	0					
ANR	828987	Identifier	ASSERT		828976	0					
ANR	828988	ArgumentList	result		828976	1					
ANR	828989	Argument	result		828976	0					
ANR	828990	Identifier	result		828976	0					
ANR	828991	IdentifierDeclStatement	MyString * arg = NULL ;	66:1:1775:1793	828976	2	True				
ANR	828992	IdentifierDecl	* arg = NULL		828976	0					
ANR	828993	IdentifierDeclType	MyString *		828976	0					
ANR	828994	Identifier	arg		828976	1					
ANR	828995	AssignmentExpression	* arg = NULL		828976	2		=			
ANR	828996	Identifier	NULL		828976	0					
ANR	828997	Identifier	NULL		828976	1					
ANR	828998	ForStatement	for ( int i = 0 ; it . Next ( arg ) ; i ++ )		828976	3					
ANR	828999	ForInit	int i = 0 ;	67:5:1800:1807	828976	0	True				
ANR	829000	IdentifierDeclStatement	int i = 0 ;		828976	0					
ANR	829001	IdentifierDecl	i = 0		828976	0					
ANR	829002	IdentifierDeclType	int		828976	0					
ANR	829003	Identifier	i		828976	1					
ANR	829004	AssignmentExpression	i = 0		828976	2		=			
ANR	829005	Identifier	i		828976	0					
ANR	829006	PrimaryExpression	0		828976	1					
ANR	829007	Condition	it . Next ( arg )	67:13:1808:1819	828976	1	True				
ANR	829008	CallExpression	it . Next ( arg )		828976	0					
ANR	829009	Callee	it . Next		828976	0					
ANR	829010	MemberAccess	it . Next		828976	0					
ANR	829011	Identifier	it		828976	0					
ANR	829012	Identifier	Next		828976	1					
ANR	829013	ArgumentList	arg		828976	1					
ANR	829014	Argument	arg		828976	0					
ANR	829015	Identifier	arg		828976	0					
ANR	829016	PostIncDecOperationExpression	i ++	67:26:1821:1823	828976	2	True				
ANR	829017	Identifier	i		828976	0					
ANR	829018	IncDec	++		828976	1					
ANR	829019	CompoundStatement		5:31:115:115	828976	3					
ANR	829020	IfStatement	if ( i < start_arg )		828976	0					
ANR	829021	Condition	i < start_arg	68:5:1833:1843	828976	0	True				
ANR	829022	RelationalExpression	i < start_arg		828976	0		<			
ANR	829023	Identifier	i		828976	0					
ANR	829024	Identifier	start_arg		828976	1					
ANR	829025	ContinueStatement	continue ;	68:18:1846:1854	828976	1	True				
ANR	829026	ExpressionStatement	"append_arg ( arg -> Value ( ) , * result )"	69:2:1858:1890	828976	1	True				
ANR	829027	CallExpression	"append_arg ( arg -> Value ( ) , * result )"		828976	0					
ANR	829028	Callee	append_arg		828976	0					
ANR	829029	Identifier	append_arg		828976	0					
ANR	829030	ArgumentList	arg -> Value ( )		828976	1					
ANR	829031	Argument	arg -> Value ( )		828976	0					
ANR	829032	CallExpression	arg -> Value ( )		828976	0					
ANR	829033	Callee	arg -> Value		828976	0					
ANR	829034	PtrMemberAccess	arg -> Value		828976	0					
ANR	829035	Identifier	arg		828976	0					
ANR	829036	Identifier	Value		828976	1					
ANR	829037	ArgumentList			828976	1					
ANR	829038	Argument	* result		828976	1					
ANR	829039	UnaryOperationExpression	* result		828976	0					
ANR	829040	UnaryOperator	*		828976	0					
ANR	829041	Identifier	result		828976	1					
ANR	829042	ReturnType	void		828976	1					
ANR	829043	Identifier	join_args		828976	2					
ANR	829044	ParameterList	"SimpleList < MyString > const & args_list , MyString * result , int start_arg"		828976	3					
ANR	829045	Parameter	SimpleList < MyString > const & args_list	62:15:1640:1676	828976	0	True				
ANR	829046	ParameterType	SimpleList < MyString > const &		828976	0					
ANR	829047	Identifier	args_list		828976	1					
ANR	829048	Parameter	MyString * result	62:53:1678:1693	828976	1	True				
ANR	829049	ParameterType	MyString *		828976	0					
ANR	829050	Identifier	result		828976	1					
ANR	829051	Parameter	int start_arg	62:70:1695:1707	828976	2	True				
ANR	829052	ParameterType	int		828976	0					
ANR	829053	Identifier	start_arg		828976	1					
ANR	829054	CFGEntryNode	ENTRY		828976		True				
ANR	829055	CFGExitNode	EXIT		828976		True				
ANR	829056	Symbol	args_list		828976						
ANR	829057	Symbol	result		828976						
ANR	829058	Symbol	arg -> Value		828976						
ANR	829059	Symbol	it . Next		828976						
ANR	829060	Symbol	start_arg		828976						
ANR	829061	Symbol	NULL		828976						
ANR	829062	Symbol	* result		828976						
ANR	829063	Symbol	arg		828976						
ANR	829064	Symbol	i		828976						
ANR	829065	Symbol	it		828976						
ANR	829066	Symbol	* arg		828976						
ANR	829067	DeclStmt									
ANR	829068	Decl							int	int	i
ANR	829069	Function	split_args	82:0:2125:3213							
ANR	829070	FunctionDef	"split_args (char const * args , SimpleList < MyString > * args_list , MyString * error_msg)"		829069	0					
ANR	829071	CompoundStatement		86:0:2220:3213	829069	0					
ANR	829072	IdentifierDeclStatement	"MyString buf = """" ;"	87:1:2223:2240	829069	0	True				
ANR	829073	IdentifierDecl	"buf = """""		829069	0					
ANR	829074	IdentifierDeclType	MyString		829069	0					
ANR	829075	Identifier	buf		829069	1					
ANR	829076	AssignmentExpression	"buf = """""		829069	2		=			
ANR	829077	Identifier	buf		829069	0					
ANR	829078	PrimaryExpression	""""""		829069	1					
ANR	829079	IdentifierDeclStatement	bool parsed_token = false ;	88:1:2243:2268	829069	1	True				
ANR	829080	IdentifierDecl	parsed_token = false		829069	0					
ANR	829081	IdentifierDeclType	bool		829069	0					
ANR	829082	Identifier	parsed_token		829069	1					
ANR	829083	AssignmentExpression	parsed_token = false		829069	2		=			
ANR	829084	Identifier	false		829069	0					
ANR	829085	Identifier	false		829069	1					
ANR	829086	IfStatement	if ( ! args )		829069	2					
ANR	829087	Condition	! args	90:4:2275:2279	829069	0	True				
ANR	829088	UnaryOperationExpression	! args		829069	0					
ANR	829089	UnaryOperator	!		829069	0					
ANR	829090	Identifier	args		829069	1					
ANR	829091	ReturnStatement	return true ;	90:11:2282:2293	829069	1	True				
ANR	829092	Identifier	true		829069	0					
ANR	829093	WhileStatement	while ( * args )		829069	3					
ANR	829094	Condition	* args	92:7:2303:2307	829069	0	True				
ANR	829095	UnaryOperationExpression	* args		829069	0					
ANR	829096	UnaryOperator	*		829069	0					
ANR	829097	Identifier	args		829069	1					
ANR	829098	CompoundStatement		7:14:89:89	829069	1					
ANR	829099	SwitchStatement	switch ( * args )		829069	0					
ANR	829100	Condition	* args	93:9:2321:2325	829069	0	True				
ANR	829101	UnaryOperationExpression	* args		829069	0					
ANR	829102	UnaryOperator	*		829069	0					
ANR	829103	Identifier	args		829069	1					
ANR	829104	CompoundStatement		8:16:107:107	829069	1					
ANR	829105	Label	case '\\'' :	94:2:2332:2341	829069	0	True				
ANR	829106	CompoundStatement		10:3:127:153	829069	1					
ANR	829107	IdentifierDeclStatement	char const * quote = args ++ ;	95:3:2348:2374	829069	0	True				
ANR	829108	IdentifierDecl	* quote = args ++		829069	0					
ANR	829109	IdentifierDeclType	char const *		829069	0					
ANR	829110	Identifier	quote		829069	1					
ANR	829111	AssignmentExpression	* quote = args ++		829069	2		=			
ANR	829112	Identifier	quote		829069	0					
ANR	829113	PostIncDecOperationExpression	args ++		829069	1					
ANR	829114	Identifier	args		829069	0					
ANR	829115	IncDec	++		829069	1					
ANR	829116	ExpressionStatement	parsed_token = true	96:3:2379:2398	829069	1	True				
ANR	829117	AssignmentExpression	parsed_token = true		829069	0		=			
ANR	829118	Identifier	parsed_token		829069	0					
ANR	829119	Identifier	true		829069	1					
ANR	829120	WhileStatement	while ( * args )		829069	2					
ANR	829121	Condition	* args	97:9:2409:2413	829069	0	True				
ANR	829122	UnaryOperationExpression	* args		829069	0					
ANR	829123	UnaryOperator	*		829069	0					
ANR	829124	Identifier	args		829069	1					
ANR	829125	CompoundStatement		12:16:195:195	829069	1					
ANR	829126	IfStatement	if ( * args == * quote )		829069	0					
ANR	829127	Condition	* args == * quote	98:7:2425:2439	829069	0	True				
ANR	829128	EqualityExpression	* args == * quote		829069	0		==			
ANR	829129	UnaryOperationExpression	* args		829069	0					
ANR	829130	UnaryOperator	*		829069	0					
ANR	829131	Identifier	args		829069	1					
ANR	829132	UnaryOperationExpression	* quote		829069	1					
ANR	829133	UnaryOperator	*		829069	0					
ANR	829134	Identifier	quote		829069	1					
ANR	829135	CompoundStatement		13:24:221:221	829069	1					
ANR	829136	IfStatement	if ( args [ 1 ] == * quote )		829069	0					
ANR	829137	Condition	args [ 1 ] == * quote	99:8:2452:2468	829069	0	True				
ANR	829138	EqualityExpression	args [ 1 ] == * quote		829069	0		==			
ANR	829139	ArrayIndexing	args [ 1 ]		829069	0					
ANR	829140	Identifier	args		829069	0					
ANR	829141	PrimaryExpression	1		829069	1					
ANR	829142	UnaryOperationExpression	* quote		829069	1					
ANR	829143	UnaryOperator	*		829069	0					
ANR	829144	Identifier	quote		829069	1					
ANR	829145	CompoundStatement		14:27:250:250	829069	1					
ANR	829146	ExpressionStatement	buf += * ( args ++ )	102:6:2573:2589	829069	0	True				
ANR	829147	AssignmentExpression	buf += * ( args ++ )		829069	0		+=			
ANR	829148	Identifier	buf		829069	0					
ANR	829149	UnaryOperationExpression	* ( args ++ )		829069	1					
ANR	829150	UnaryOperator	*		829069	0					
ANR	829151	PostIncDecOperationExpression	args ++		829069	1					
ANR	829152	Identifier	args		829069	0					
ANR	829153	IncDec	++		829069	1					
ANR	829154	ExpressionStatement	args ++	103:6:2597:2603	829069	1	True				
ANR	829155	PostIncDecOperationExpression	args ++		829069	0					
ANR	829156	Identifier	args		829069	0					
ANR	829157	IncDec	++		829069	1					
ANR	829158	ElseStatement	else		829069	0					
ANR	829159	CompoundStatement		20:10:401:401	829069	0					
ANR	829160	BreakStatement	break ;	106:6:2630:2635	829069	0	True				
ANR	829161	ElseStatement	else		829069	0					
ANR	829162	CompoundStatement		24:9:438:438	829069	0					
ANR	829163	ExpressionStatement	buf += * ( args ++ )	110:5:2666:2682	829069	0	True				
ANR	829164	AssignmentExpression	buf += * ( args ++ )		829069	0		+=			
ANR	829165	Identifier	buf		829069	0					
ANR	829166	UnaryOperationExpression	* ( args ++ )		829069	1					
ANR	829167	UnaryOperator	*		829069	0					
ANR	829168	PostIncDecOperationExpression	args ++		829069	1					
ANR	829169	Identifier	args		829069	0					
ANR	829170	IncDec	++		829069	1					
ANR	829171	IfStatement	if ( ! * args )		829069	3					
ANR	829172	Condition	! * args	113:6:2701:2706	829069	0	True				
ANR	829173	UnaryOperationExpression	! * args		829069	0					
ANR	829174	UnaryOperator	!		829069	0					
ANR	829175	UnaryOperationExpression	* args		829069	1					
ANR	829176	UnaryOperator	*		829069	0					
ANR	829177	Identifier	args		829069	1					
ANR	829178	CompoundStatement		28:14:488:488	829069	1					
ANR	829179	IfStatement	if ( error_msg )		829069	0					
ANR	829180	Condition	error_msg	114:7:2718:2726	829069	0	True				
ANR	829181	Identifier	error_msg		829069	0					
ANR	829182	CompoundStatement		29:18:508:508	829069	1					
ANR	829183	ExpressionStatement	"error_msg -> sprintf ( ""Unbalanced quote starting here: %s"" , quote )"	115:5:2736:2798	829069	0	True				
ANR	829184	CallExpression	"error_msg -> sprintf ( ""Unbalanced quote starting here: %s"" , quote )"		829069	0					
ANR	829185	Callee	error_msg -> sprintf		829069	0					
ANR	829186	PtrMemberAccess	error_msg -> sprintf		829069	0					
ANR	829187	Identifier	error_msg		829069	0					
ANR	829188	Identifier	sprintf		829069	1					
ANR	829189	ArgumentList	"""Unbalanced quote starting here: %s"""		829069	1					
ANR	829190	Argument	"""Unbalanced quote starting here: %s"""		829069	0					
ANR	829191	PrimaryExpression	"""Unbalanced quote starting here: %s"""		829069	0					
ANR	829192	Argument	quote		829069	1					
ANR	829193	Identifier	quote		829069	0					
ANR	829194	ReturnStatement	return false ;	117:4:2810:2822	829069	1	True				
ANR	829195	Identifier	false		829069	0					
ANR	829196	ExpressionStatement	args ++	119:3:2832:2838	829069	4	True				
ANR	829197	PostIncDecOperationExpression	args ++		829069	0					
ANR	829198	Identifier	args		829069	0					
ANR	829199	IncDec	++		829069	1					
ANR	829200	BreakStatement	break ;	120:3:2867:2872	829069	5	True				
ANR	829201	Label	case ' ' :	122:2:2880:2888	829069	2	True				
ANR	829202	Label	case '\\t' :	123:2:2892:2901	829069	3	True				
ANR	829203	Label	case '\\n' :	124:2:2905:2914	829069	4	True				
ANR	829204	Label	case '\\r' :	125:2:2918:2927	829069	5	True				
ANR	829205	CompoundStatement		40:13:708:708	829069	6					
ANR	829206	ExpressionStatement	args ++	126:3:2934:2940	829069	0	True				
ANR	829207	PostIncDecOperationExpression	args ++		829069	0					
ANR	829208	Identifier	args		829069	0					
ANR	829209	IncDec	++		829069	1					
ANR	829210	IfStatement	if ( parsed_token )		829069	1					
ANR	829211	Condition	parsed_token	127:6:2966:2977	829069	0	True				
ANR	829212	Identifier	parsed_token		829069	0					
ANR	829213	CompoundStatement		42:20:759:759	829069	1					
ANR	829214	ExpressionStatement	parsed_token = false	128:4:2986:3006	829069	0	True				
ANR	829215	AssignmentExpression	parsed_token = false		829069	0		=			
ANR	829216	Identifier	parsed_token		829069	0					
ANR	829217	Identifier	false		829069	1					
ANR	829218	ExpressionStatement	ASSERT ( args_list -> Append ( buf ) )	129:4:3012:3042	829069	1	True				
ANR	829219	CallExpression	ASSERT ( args_list -> Append ( buf ) )		829069	0					
ANR	829220	Callee	ASSERT		829069	0					
ANR	829221	Identifier	ASSERT		829069	0					
ANR	829222	ArgumentList	args_list -> Append ( buf )		829069	1					
ANR	829223	Argument	args_list -> Append ( buf )		829069	0					
ANR	829224	CallExpression	args_list -> Append ( buf )		829069	0					
ANR	829225	Callee	args_list -> Append		829069	0					
ANR	829226	PtrMemberAccess	args_list -> Append		829069	0					
ANR	829227	Identifier	args_list		829069	0					
ANR	829228	Identifier	Append		829069	1					
ANR	829229	ArgumentList	buf		829069	1					
ANR	829230	Argument	buf		829069	0					
ANR	829231	Identifier	buf		829069	0					
ANR	829232	ExpressionStatement	"buf = """""	130:4:3048:3056	829069	2	True				
ANR	829233	AssignmentExpression	"buf = """""		829069	0		=			
ANR	829234	Identifier	buf		829069	0					
ANR	829235	PrimaryExpression	""""""		829069	1					
ANR	829236	BreakStatement	break ;	132:3:3066:3071	829069	2	True				
ANR	829237	Label	default :	134:2:3079:3086	829069	7	True				
ANR	829238	Identifier	default		829069	0					
ANR	829239	ExpressionStatement	parsed_token = true	135:3:3091:3110	829069	8	True				
ANR	829240	AssignmentExpression	parsed_token = true		829069	0		=			
ANR	829241	Identifier	parsed_token		829069	0					
ANR	829242	Identifier	true		829069	1					
ANR	829243	ExpressionStatement	buf += * ( args ++ )	136:3:3115:3131	829069	9	True				
ANR	829244	AssignmentExpression	buf += * ( args ++ )		829069	0		+=			
ANR	829245	Identifier	buf		829069	0					
ANR	829246	UnaryOperationExpression	* ( args ++ )		829069	1					
ANR	829247	UnaryOperator	*		829069	0					
ANR	829248	PostIncDecOperationExpression	args ++		829069	1					
ANR	829249	Identifier	args		829069	0					
ANR	829250	IncDec	++		829069	1					
ANR	829251	BreakStatement	break ;	137:3:3136:3141	829069	10	True				
ANR	829252	IfStatement	if ( parsed_token )		829069	4					
ANR	829253	Condition	parsed_token	140:4:3154:3165	829069	0	True				
ANR	829254	Identifier	parsed_token		829069	0					
ANR	829255	CompoundStatement		55:18:947:947	829069	1					
ANR	829256	ExpressionStatement	args_list -> Append ( buf )	141:2:3172:3194	829069	0	True				
ANR	829257	CallExpression	args_list -> Append ( buf )		829069	0					
ANR	829258	Callee	args_list -> Append		829069	0					
ANR	829259	PtrMemberAccess	args_list -> Append		829069	0					
ANR	829260	Identifier	args_list		829069	0					
ANR	829261	Identifier	Append		829069	1					
ANR	829262	ArgumentList	buf		829069	1					
ANR	829263	Argument	buf		829069	0					
ANR	829264	Identifier	buf		829069	0					
ANR	829265	ReturnStatement	return true ;	143:1:3200:3211	829069	5	True				
ANR	829266	Identifier	true		829069	0					
ANR	829267	ReturnType	bool		829069	1					
ANR	829268	Identifier	split_args		829069	2					
ANR	829269	ParameterList	"char const * args , SimpleList < MyString > * args_list , MyString * error_msg"		829069	3					
ANR	829270	Parameter	char const * args	83:2:2144:2159	829069	0	True				
ANR	829271	ParameterType	char const *		829069	0					
ANR	829272	Identifier	args		829069	1					
ANR	829273	Parameter	SimpleList < MyString > * args_list	84:2:2164:2194	829069	1	True				
ANR	829274	ParameterType	SimpleList < MyString > *		829069	0					
ANR	829275	Identifier	args_list		829069	1					
ANR	829276	Parameter	MyString * error_msg	85:2:2199:2217	829069	2	True				
ANR	829277	ParameterType	MyString *		829069	0					
ANR	829278	Identifier	error_msg		829069	1					
ANR	829279	CFGEntryNode	ENTRY		829069		True				
ANR	829280	CFGExitNode	EXIT		829069		True				
ANR	829281	Symbol	args_list		829069						
ANR	829282	Symbol	parsed_token		829069						
ANR	829283	Symbol	error_msg		829069						
ANR	829284	Symbol	false		829069						
ANR	829285	Symbol	* args		829069						
ANR	829286	Symbol	args		829069						
ANR	829287	Symbol	buf		829069						
ANR	829288	Symbol	quote		829069						
ANR	829289	Symbol	args_list -> Append		829069						
ANR	829290	Symbol	* quote		829069						
ANR	829291	Symbol	* ( args ++ )		829069						
ANR	829292	Symbol	true		829069						
ANR	829293	Symbol	* args_list		829069						
ANR	829294	Function	ArgListToArgsArray	146:0:3216:3577							
ANR	829295	FunctionDef	ArgListToArgsArray (SimpleList < MyString > const & args_list)		829294	0					
ANR	829296	CompoundStatement		148:0:3289:3577	829294	0					
ANR	829297	IdentifierDeclStatement	SimpleListIterator < MyString > it ( args_list ) ;	149:1:3292:3334	829294	0	True				
ANR	829298	IdentifierDecl	it ( args_list )		829294	0					
ANR	829299	IdentifierDeclType	SimpleListIterator < MyString >		829294	0					
ANR	829300	Identifier	it		829294	1					
ANR	829301	Identifier	args_list		829294	2					
ANR	829302	IdentifierDeclStatement	MyString * arg ;	150:1:3337:3350	829294	1	True				
ANR	829303	IdentifierDecl	* arg		829294	0					
ANR	829304	IdentifierDeclType	MyString *		829294	0					
ANR	829305	Identifier	arg		829294	1					
ANR	829306	IdentifierDeclStatement	int i ;	151:1:3353:3358	829294	2	True				
ANR	829307	IdentifierDecl	i		829294	0					
ANR	829308	IdentifierDeclType	int		829294	0					
ANR	829309	Identifier	i		829294	1					
ANR	829310	Statement	char	152:1:3361:3364	829294	3	True				
ANR	829311	Statement	*	152:6:3366:3366	829294	4	True				
ANR	829312	Statement	*	152:7:3367:3367	829294	5	True				
ANR	829313	Statement	args_array	152:8:3368:3377	829294	6	True				
ANR	829314	Statement	=	152:19:3379:3379	829294	7	True				
ANR	829315	Statement	new	152:21:3381:3383	829294	8	True				
ANR	829316	Statement	char	152:25:3385:3388	829294	9	True				
ANR	829317	Statement	*	152:30:3390:3390	829294	10	True				
ANR	829318	Statement	[	152:31:3391:3391	829294	11	True				
ANR	829319	Statement	args_list	152:32:3392:3400	829294	12	True				
ANR	829320	Statement	.	152:41:3401:3401	829294	13	True				
ANR	829321	Statement	Number	152:42:3402:3407	829294	14	True				
ANR	829322	Statement	(	152:48:3408:3408	829294	15	True				
ANR	829323	Statement	)	152:49:3409:3409	829294	16	True				
ANR	829324	Statement	+	152:50:3410:3410	829294	17	True				
ANR	829325	Statement	1	152:51:3411:3411	829294	18	True				
ANR	829326	Statement	]	152:52:3412:3412	829294	19	True				
ANR	829327	ExpressionStatement		152:53:3413:3413	829294	20	True				
ANR	829328	ExpressionStatement	ASSERT ( args_array )	153:1:3416:3434	829294	21	True				
ANR	829329	CallExpression	ASSERT ( args_array )		829294	0					
ANR	829330	Callee	ASSERT		829294	0					
ANR	829331	Identifier	ASSERT		829294	0					
ANR	829332	ArgumentList	args_array		829294	1					
ANR	829333	Argument	args_array		829294	0					
ANR	829334	Identifier	args_array		829294	0					
ANR	829335	ForStatement	for ( i = 0 ; it . Next ( arg ) ; i ++ )		829294	22					
ANR	829336	ForInit	i = 0 ;	154:5:3441:3444	829294	0	True				
ANR	829337	AssignmentExpression	i = 0		829294	0		=			
ANR	829338	Identifier	i		829294	0					
ANR	829339	PrimaryExpression	0		829294	1					
ANR	829340	Condition	it . Next ( arg )	154:9:3445:3456	829294	1	True				
ANR	829341	CallExpression	it . Next ( arg )		829294	0					
ANR	829342	Callee	it . Next		829294	0					
ANR	829343	MemberAccess	it . Next		829294	0					
ANR	829344	Identifier	it		829294	0					
ANR	829345	Identifier	Next		829294	1					
ANR	829346	ArgumentList	arg		829294	1					
ANR	829347	Argument	arg		829294	0					
ANR	829348	Identifier	arg		829294	0					
ANR	829349	PostIncDecOperationExpression	i ++	154:22:3458:3460	829294	2	True				
ANR	829350	Identifier	i		829294	0					
ANR	829351	IncDec	++		829294	1					
ANR	829352	CompoundStatement		7:27:173:173	829294	3					
ANR	829353	ExpressionStatement	args_array [ i ] = strnewp ( arg -> Value ( ) )	155:2:3467:3504	829294	0	True				
ANR	829354	AssignmentExpression	args_array [ i ] = strnewp ( arg -> Value ( ) )		829294	0		=			
ANR	829355	ArrayIndexing	args_array [ i ]		829294	0					
ANR	829356	Identifier	args_array		829294	0					
ANR	829357	Identifier	i		829294	1					
ANR	829358	CallExpression	strnewp ( arg -> Value ( ) )		829294	1					
ANR	829359	Callee	strnewp		829294	0					
ANR	829360	Identifier	strnewp		829294	0					
ANR	829361	ArgumentList	arg -> Value ( )		829294	1					
ANR	829362	Argument	arg -> Value ( )		829294	0					
ANR	829363	CallExpression	arg -> Value ( )		829294	0					
ANR	829364	Callee	arg -> Value		829294	0					
ANR	829365	PtrMemberAccess	arg -> Value		829294	0					
ANR	829366	Identifier	arg		829294	0					
ANR	829367	Identifier	Value		829294	1					
ANR	829368	ArgumentList			829294	1					
ANR	829369	ExpressionStatement	ASSERT ( args_array [ i ] )	156:2:3508:3529	829294	1	True				
ANR	829370	CallExpression	ASSERT ( args_array [ i ] )		829294	0					
ANR	829371	Callee	ASSERT		829294	0					
ANR	829372	Identifier	ASSERT		829294	0					
ANR	829373	ArgumentList	args_array [ i ]		829294	1					
ANR	829374	Argument	args_array [ i ]		829294	0					
ANR	829375	ArrayIndexing	args_array [ i ]		829294	0					
ANR	829376	Identifier	args_array		829294	0					
ANR	829377	Identifier	i		829294	1					
ANR	829378	ExpressionStatement	args_array [ i ] = NULL	158:1:3535:3555	829294	23	True				
ANR	829379	AssignmentExpression	args_array [ i ] = NULL		829294	0		=			
ANR	829380	ArrayIndexing	args_array [ i ]		829294	0					
ANR	829381	Identifier	args_array		829294	0					
ANR	829382	Identifier	i		829294	1					
ANR	829383	Identifier	NULL		829294	1					
ANR	829384	ReturnStatement	return args_array ;	159:1:3558:3575	829294	24	True				
ANR	829385	Identifier	args_array		829294	0					
ANR	829386	ReturnType	static char * *		829294	1					
ANR	829387	Identifier	ArgListToArgsArray		829294	2					
ANR	829388	ParameterList	SimpleList < MyString > const & args_list		829294	3					
ANR	829389	Parameter	SimpleList < MyString > const & args_list	147:19:3250:3286	829294	0	True				
ANR	829390	ParameterType	SimpleList < MyString > const &		829294	0					
ANR	829391	Identifier	args_list		829294	1					
ANR	829392	CFGEntryNode	ENTRY		829294		True				
ANR	829393	CFGExitNode	EXIT		829294		True				
ANR	829394	Symbol	args_list		829294						
ANR	829395	Symbol	arg -> Value		829294						
ANR	829396	Symbol	it . Next		829294						
ANR	829397	Symbol	* i		829294						
ANR	829398	Symbol	NULL		829294						
ANR	829399	Symbol	arg		829294						
ANR	829400	Symbol	i		829294						
ANR	829401	Symbol	strnewp		829294						
ANR	829402	Symbol	* args_array		829294						
ANR	829403	Symbol	it		829294						
ANR	829404	Symbol	args_array		829294						
ANR	829405	Symbol	* arg		829294						
ANR	829406	Function	split_args	162:0:3580:3851							
ANR	829407	FunctionDef	"split_args (char const * args , char * * * args_array , MyString * error_msg)"		829406	0					
ANR	829408	CompoundStatement		162:73:3653:3851	829406	0					
ANR	829409	IdentifierDeclStatement	SimpleList < MyString > args_list ;	163:1:3656:3686	829406	0	True				
ANR	829410	IdentifierDecl	args_list		829406	0					
ANR	829411	IdentifierDeclType	SimpleList < MyString >		829406	0					
ANR	829412	Identifier	args_list		829406	1					
ANR	829413	IfStatement	"if ( ! split_args ( args , & args_list , error_msg ) )"		829406	1					
ANR	829414	Condition	"! split_args ( args , & args_list , error_msg )"	164:4:3692:3729	829406	0	True				
ANR	829415	UnaryOperationExpression	"! split_args ( args , & args_list , error_msg )"		829406	0					
ANR	829416	UnaryOperator	!		829406	0					
ANR	829417	CallExpression	"split_args ( args , & args_list , error_msg )"		829406	1					
ANR	829418	Callee	split_args		829406	0					
ANR	829419	Identifier	split_args		829406	0					
ANR	829420	ArgumentList	args		829406	1					
ANR	829421	Argument	args		829406	0					
ANR	829422	Identifier	args		829406	0					
ANR	829423	Argument	& args_list		829406	1					
ANR	829424	UnaryOperationExpression	& args_list		829406	0					
ANR	829425	UnaryOperator	&		829406	0					
ANR	829426	Identifier	args_list		829406	1					
ANR	829427	Argument	error_msg		829406	2					
ANR	829428	Identifier	error_msg		829406	0					
ANR	829429	CompoundStatement		3:44:78:78	829406	1					
ANR	829430	ExpressionStatement	* args_array = NULL	165:2:3736:3754	829406	0	True				
ANR	829431	AssignmentExpression	* args_array = NULL		829406	0		=			
ANR	829432	UnaryOperationExpression	* args_array		829406	0					
ANR	829433	UnaryOperator	*		829406	0					
ANR	829434	Identifier	args_array		829406	1					
ANR	829435	Identifier	NULL		829406	1					
ANR	829436	ReturnStatement	return false ;	166:2:3758:3770	829406	1	True				
ANR	829437	Identifier	false		829406	0					
ANR	829438	ExpressionStatement	* args_array = ArgListToArgsArray ( args_list )	169:1:3777:3820	829406	2	True				
ANR	829439	AssignmentExpression	* args_array = ArgListToArgsArray ( args_list )		829406	0		=			
ANR	829440	UnaryOperationExpression	* args_array		829406	0					
ANR	829441	UnaryOperator	*		829406	0					
ANR	829442	Identifier	args_array		829406	1					
ANR	829443	CallExpression	ArgListToArgsArray ( args_list )		829406	1					
ANR	829444	Callee	ArgListToArgsArray		829406	0					
ANR	829445	Identifier	ArgListToArgsArray		829406	0					
ANR	829446	ArgumentList	args_list		829406	1					
ANR	829447	Argument	args_list		829406	0					
ANR	829448	Identifier	args_list		829406	0					
ANR	829449	ReturnStatement	return * args_array != NULL ;	170:1:3823:3849	829406	3	True				
ANR	829450	EqualityExpression	* args_array != NULL		829406	0		!=			
ANR	829451	UnaryOperationExpression	* args_array		829406	0					
ANR	829452	UnaryOperator	*		829406	0					
ANR	829453	Identifier	args_array		829406	1					
ANR	829454	Identifier	NULL		829406	1					
ANR	829455	ReturnType	bool		829406	1					
ANR	829456	Identifier	split_args		829406	2					
ANR	829457	ParameterList	"char const * args , char * * * args_array , MyString * error_msg"		829406	3					
ANR	829458	Parameter	char const * args	162:16:3596:3611	829406	0	True				
ANR	829459	ParameterType	char const *		829406	0					
ANR	829460	Identifier	args		829406	1					
ANR	829461	Parameter	char * * * args_array	162:33:3613:3630	829406	1	True				
ANR	829462	ParameterType	char * * *		829406	0					
ANR	829463	Identifier	args_array		829406	1					
ANR	829464	Parameter	MyString * error_msg	162:52:3632:3650	829406	2	True				
ANR	829465	ParameterType	MyString *		829406	0					
ANR	829466	Identifier	error_msg		829406	1					
ANR	829467	CFGEntryNode	ENTRY		829406		True				
ANR	829468	CFGExitNode	EXIT		829406		True				
ANR	829469	Symbol	args		829406						
ANR	829470	Symbol	args_list		829406						
ANR	829471	Symbol	error_msg		829406						
ANR	829472	Symbol	NULL		829406						
ANR	829473	Symbol	split_args		829406						
ANR	829474	Symbol	& args_list		829406						
ANR	829475	Symbol	false		829406						
ANR	829476	Symbol	* args_array		829406						
ANR	829477	Symbol	ArgListToArgsArray		829406						
ANR	829478	Symbol	args_array		829406						
ANR	829479	Function	deleteStringArray	173:0:3854:3985							
ANR	829480	FunctionDef	deleteStringArray (char * * array)		829479	0					
ANR	829481	CompoundStatement		175:0:3891:3985	829479	0					
ANR	829482	IfStatement	if ( ! array )		829479	0					
ANR	829483	Condition	! array	176:4:3897:3902	829479	0	True				
ANR	829484	UnaryOperationExpression	! array		829479	0					
ANR	829485	UnaryOperator	!		829479	0					
ANR	829486	Identifier	array		829479	1					
ANR	829487	ReturnStatement	return ;	176:12:3905:3911	829479	1	True				
ANR	829488	ForStatement	for ( int i = 0 ; array [ i ] ; i ++ )		829479	1					
ANR	829489	ForInit	int i = 0 ;	177:5:3918:3925	829479	0	True				
ANR	829490	IdentifierDeclStatement	int i = 0 ;		829479	0					
ANR	829491	IdentifierDecl	i = 0		829479	0					
ANR	829492	IdentifierDeclType	int		829479	0					
ANR	829493	Identifier	i		829479	1					
ANR	829494	AssignmentExpression	i = 0		829479	2		=			
ANR	829495	Identifier	i		829479	0					
ANR	829496	PrimaryExpression	0		829479	1					
ANR	829497	Condition	array [ i ]	177:13:3926:3933	829479	1	True				
ANR	829498	ArrayIndexing	array [ i ]		829479	0					
ANR	829499	Identifier	array		829479	0					
ANR	829500	Identifier	i		829479	1					
ANR	829501	PostIncDecOperationExpression	i ++	177:22:3935:3937	829479	2	True				
ANR	829502	Identifier	i		829479	0					
ANR	829503	IncDec	++		829479	1					
ANR	829504	CompoundStatement		3:27:48:48	829479	3					
ANR	829505	Statement	delete	178:2:3944:3949	829479	0	True				
ANR	829506	Statement	[	178:9:3951:3951	829479	1	True				
ANR	829507	Statement	]	178:10:3952:3952	829479	2	True				
ANR	829508	ExpressionStatement	array [ i ]	178:12:3954:3962	829479	3	True				
ANR	829509	ArrayIndexing	array [ i ]		829479	0					
ANR	829510	Identifier	array		829479	0					
ANR	829511	Identifier	i		829479	1					
ANR	829512	Statement	delete	180:1:3968:3973	829479	2	True				
ANR	829513	Statement	[	180:8:3975:3975	829479	3	True				
ANR	829514	Statement	]	180:9:3976:3976	829479	4	True				
ANR	829515	ExpressionStatement	array	180:11:3978:3983	829479	5	True				
ANR	829516	Identifier	array		829479	0					
ANR	829517	ReturnType	void		829479	1					
ANR	829518	Identifier	deleteStringArray		829479	2					
ANR	829519	ParameterList	char * * array		829479	3					
ANR	829520	Parameter	char * * array	174:18:3877:3888	829479	0	True				
ANR	829521	ParameterType	char * *		829479	0					
ANR	829522	Identifier	array		829479	1					
ANR	829523	CFGEntryNode	ENTRY		829479		True				
ANR	829524	CFGExitNode	EXIT		829479		True				
ANR	829525	Symbol	* i		829479						
ANR	829526	Symbol	array		829479						
ANR	829527	Symbol	i		829479						
ANR	829528	Symbol	* array		829479						
ANR	829529	Function	ArgList :: Count	184:0:3989:4046							
ANR	829530	FunctionDef	ArgList :: Count ()		829529	0					
ANR	829531	CompoundStatement		185:23:4016:4046	829529	0					
ANR	829532	ReturnStatement	return args_list . Number ( ) ;	186:1:4019:4044	829529	0	True				
ANR	829533	CallExpression	args_list . Number ( )		829529	0					
ANR	829534	Callee	args_list . Number		829529	0					
ANR	829535	MemberAccess	args_list . Number		829529	0					
ANR	829536	Identifier	args_list		829529	0					
ANR	829537	Identifier	Number		829529	1					
ANR	829538	ArgumentList			829529	1					
ANR	829539	ReturnType	int		829529	1					
ANR	829540	Identifier	ArgList :: Count		829529	2					
ANR	829541	ParameterList			829529	3					
ANR	829542	CFGEntryNode	ENTRY		829529		True				
ANR	829543	CFGExitNode	EXIT		829529		True				
ANR	829544	Symbol	args_list		829529						
ANR	829545	Symbol	args_list . Number		829529						
ANR	829546	Function	ArgList :: Clear	188:0:4048:4132							
ANR	829547	FunctionDef	ArgList :: Clear ()		829546	0					
ANR	829548	CompoundStatement		189:17:4070:4132	829546	0					
ANR	829549	ExpressionStatement	args_list . Clear ( )	190:1:4073:4090	829546	0	True				
ANR	829550	CallExpression	args_list . Clear ( )		829546	0					
ANR	829551	Callee	args_list . Clear		829546	0					
ANR	829552	MemberAccess	args_list . Clear		829546	0					
ANR	829553	Identifier	args_list		829546	0					
ANR	829554	Identifier	Clear		829546	1					
ANR	829555	ArgumentList			829546	1					
ANR	829556	ExpressionStatement	input_was_unknown_platform_v1 = false	191:1:4093:4130	829546	1	True				
ANR	829557	AssignmentExpression	input_was_unknown_platform_v1 = false		829546	0		=			
ANR	829558	Identifier	input_was_unknown_platform_v1		829546	0					
ANR	829559	Identifier	false		829546	1					
ANR	829560	ReturnType	void		829546	1					
ANR	829561	Identifier	ArgList :: Clear		829546	2					
ANR	829562	ParameterList			829546	3					
ANR	829563	CFGEntryNode	ENTRY		829546		True				
ANR	829564	CFGExitNode	EXIT		829546		True				
ANR	829565	Symbol	args_list		829546						
ANR	829566	Symbol	input_was_unknown_platform_v1		829546						
ANR	829567	Symbol	false		829546						
ANR	829568	Function	ArgList :: GetArg	194:0:4135:4328							
ANR	829569	FunctionDef	ArgList :: GetArg (int n)		829568	0					
ANR	829570	CompoundStatement		195:29:4177:4328	829568	0					
ANR	829571	IdentifierDeclStatement	SimpleListIterator < MyString > it ( args_list ) ;	196:1:4180:4222	829568	0	True				
ANR	829572	IdentifierDecl	it ( args_list )		829568	0					
ANR	829573	IdentifierDeclType	SimpleListIterator < MyString >		829568	0					
ANR	829574	Identifier	it		829568	1					
ANR	829575	Identifier	args_list		829568	2					
ANR	829576	IdentifierDeclStatement	MyString * arg ;	197:1:4225:4238	829568	1	True				
ANR	829577	IdentifierDecl	* arg		829568	0					
ANR	829578	IdentifierDeclType	MyString *		829568	0					
ANR	829579	Identifier	arg		829568	1					
ANR	829580	IdentifierDeclStatement	int i ;	198:1:4241:4246	829568	2	True				
ANR	829581	IdentifierDecl	i		829568	0					
ANR	829582	IdentifierDeclType	int		829568	0					
ANR	829583	Identifier	i		829568	1					
ANR	829584	ForStatement	for ( i = 0 ; it . Next ( arg ) ; i ++ )		829568	3					
ANR	829585	ForInit	i = 0 ;	199:5:4253:4256	829568	0	True				
ANR	829586	AssignmentExpression	i = 0		829568	0		=			
ANR	829587	Identifier	i		829568	0					
ANR	829588	PrimaryExpression	0		829568	1					
ANR	829589	Condition	it . Next ( arg )	199:9:4257:4268	829568	1	True				
ANR	829590	CallExpression	it . Next ( arg )		829568	0					
ANR	829591	Callee	it . Next		829568	0					
ANR	829592	MemberAccess	it . Next		829568	0					
ANR	829593	Identifier	it		829568	0					
ANR	829594	Identifier	Next		829568	1					
ANR	829595	ArgumentList	arg		829568	1					
ANR	829596	Argument	arg		829568	0					
ANR	829597	Identifier	arg		829568	0					
ANR	829598	PostIncDecOperationExpression	i ++	199:22:4270:4272	829568	2	True				
ANR	829599	Identifier	i		829568	0					
ANR	829600	IncDec	++		829568	1					
ANR	829601	CompoundStatement		5:27:97:97	829568	3					
ANR	829602	IfStatement	if ( i == n )		829568	0					
ANR	829603	Condition	i == n	200:5:4282:4287	829568	0	True				
ANR	829604	EqualityExpression	i == n		829568	0		==			
ANR	829605	Identifier	i		829568	0					
ANR	829606	Identifier	n		829568	1					
ANR	829607	ReturnStatement	return arg -> Value ( ) ;	200:13:4290:4309	829568	1	True				
ANR	829608	CallExpression	arg -> Value ( )		829568	0					
ANR	829609	Callee	arg -> Value		829568	0					
ANR	829610	PtrMemberAccess	arg -> Value		829568	0					
ANR	829611	Identifier	arg		829568	0					
ANR	829612	Identifier	Value		829568	1					
ANR	829613	ArgumentList			829568	1					
ANR	829614	ReturnStatement	return NULL ;	202:1:4315:4326	829568	4	True				
ANR	829615	Identifier	NULL		829568	0					
ANR	829616	ReturnType	char const *		829568	1					
ANR	829617	Identifier	ArgList :: GetArg		829568	2					
ANR	829618	ParameterList	int n		829568	3					
ANR	829619	Parameter	int n	195:16:4164:4168	829568	0	True				
ANR	829620	ParameterType	int		829568	0					
ANR	829621	Identifier	n		829568	1					
ANR	829622	CFGEntryNode	ENTRY		829568		True				
ANR	829623	CFGExitNode	EXIT		829568		True				
ANR	829624	Symbol	arg -> Value		829568						
ANR	829625	Symbol	it . Next		829568						
ANR	829626	Symbol	NULL		829568						
ANR	829627	Symbol	arg		829568						
ANR	829628	Symbol	i		829568						
ANR	829629	Symbol	it		829568						
ANR	829630	Symbol	n		829568						
ANR	829631	Symbol	* arg		829568						
ANR	829632	Function	ArgList :: AppendArg	205:0:4331:4433							
ANR	829633	FunctionDef	ArgList :: AppendArg (MyString arg)		829632	0					
ANR	829634	CompoundStatement		206:33:4369:4433	829632	0					
ANR	829635	ExpressionStatement	ASSERT ( arg . Value ( ) )	207:1:4372:4391	829632	0	True				
ANR	829636	CallExpression	ASSERT ( arg . Value ( ) )		829632	0					
ANR	829637	Callee	ASSERT		829632	0					
ANR	829638	Identifier	ASSERT		829632	0					
ANR	829639	ArgumentList	arg . Value ( )		829632	1					
ANR	829640	Argument	arg . Value ( )		829632	0					
ANR	829641	CallExpression	arg . Value ( )		829632	0					
ANR	829642	Callee	arg . Value		829632	0					
ANR	829643	MemberAccess	arg . Value		829632	0					
ANR	829644	Identifier	arg		829632	0					
ANR	829645	Identifier	Value		829632	1					
ANR	829646	ArgumentList			829632	1					
ANR	829647	ExpressionStatement	ASSERT ( args_list . Append ( arg . Value ( ) ) )	208:1:4394:4431	829632	1	True				
ANR	829648	CallExpression	ASSERT ( args_list . Append ( arg . Value ( ) ) )		829632	0					
ANR	829649	Callee	ASSERT		829632	0					
ANR	829650	Identifier	ASSERT		829632	0					
ANR	829651	ArgumentList	args_list . Append ( arg . Value ( ) )		829632	1					
ANR	829652	Argument	args_list . Append ( arg . Value ( ) )		829632	0					
ANR	829653	CallExpression	args_list . Append ( arg . Value ( ) )		829632	0					
ANR	829654	Callee	args_list . Append		829632	0					
ANR	829655	MemberAccess	args_list . Append		829632	0					
ANR	829656	Identifier	args_list		829632	0					
ANR	829657	Identifier	Append		829632	1					
ANR	829658	ArgumentList	arg . Value ( )		829632	1					
ANR	829659	Argument	arg . Value ( )		829632	0					
ANR	829660	CallExpression	arg . Value ( )		829632	0					
ANR	829661	Callee	arg . Value		829632	0					
ANR	829662	MemberAccess	arg . Value		829632	0					
ANR	829663	Identifier	arg		829632	0					
ANR	829664	Identifier	Value		829632	1					
ANR	829665	ArgumentList			829632	1					
ANR	829666	ReturnType	void		829632	1					
ANR	829667	Identifier	ArgList :: AppendArg		829632	2					
ANR	829668	ParameterList	MyString arg		829632	3					
ANR	829669	Parameter	MyString arg	206:19:4355:4366	829632	0	True				
ANR	829670	ParameterType	MyString		829632	0					
ANR	829671	Identifier	arg		829632	1					
ANR	829672	CFGEntryNode	ENTRY		829632		True				
ANR	829673	CFGExitNode	EXIT		829632		True				
ANR	829674	Symbol	args_list		829632						
ANR	829675	Symbol	arg		829632						
ANR	829676	Symbol	arg . Value		829632						
ANR	829677	Symbol	args_list . Append		829632						
ANR	829678	Function	ArgList :: AppendArg	211:0:4436:4525							
ANR	829679	FunctionDef	ArgList :: AppendArg (char const * arg)		829678	0					
ANR	829680	CompoundStatement		212:36:4477:4525	829678	0					
ANR	829681	ExpressionStatement	ASSERT ( arg )	213:1:4480:4491	829678	0	True				
ANR	829682	CallExpression	ASSERT ( arg )		829678	0					
ANR	829683	Callee	ASSERT		829678	0					
ANR	829684	Identifier	ASSERT		829678	0					
ANR	829685	ArgumentList	arg		829678	1					
ANR	829686	Argument	arg		829678	0					
ANR	829687	Identifier	arg		829678	0					
ANR	829688	ExpressionStatement	ASSERT ( args_list . Append ( arg ) )	214:1:4494:4523	829678	1	True				
ANR	829689	CallExpression	ASSERT ( args_list . Append ( arg ) )		829678	0					
ANR	829690	Callee	ASSERT		829678	0					
ANR	829691	Identifier	ASSERT		829678	0					
ANR	829692	ArgumentList	args_list . Append ( arg )		829678	1					
ANR	829693	Argument	args_list . Append ( arg )		829678	0					
ANR	829694	CallExpression	args_list . Append ( arg )		829678	0					
ANR	829695	Callee	args_list . Append		829678	0					
ANR	829696	MemberAccess	args_list . Append		829678	0					
ANR	829697	Identifier	args_list		829678	0					
ANR	829698	Identifier	Append		829678	1					
ANR	829699	ArgumentList	arg		829678	1					
ANR	829700	Argument	arg		829678	0					
ANR	829701	Identifier	arg		829678	0					
ANR	829702	ReturnType	void		829678	1					
ANR	829703	Identifier	ArgList :: AppendArg		829678	2					
ANR	829704	ParameterList	char const * arg		829678	3					
ANR	829705	Parameter	char const * arg	212:19:4460:4474	829678	0	True				
ANR	829706	ParameterType	char const *		829678	0					
ANR	829707	Identifier	arg		829678	1					
ANR	829708	CFGEntryNode	ENTRY		829678		True				
ANR	829709	CFGExitNode	EXIT		829678		True				
ANR	829710	Symbol	args_list		829678						
ANR	829711	Symbol	arg		829678						
ANR	829712	Symbol	args_list . Append		829678						
ANR	829713	Function	ArgList :: AppendArg	217:0:4528:4625							
ANR	829714	FunctionDef	ArgList :: AppendArg (int arg)		829713	0					
ANR	829715	CompoundStatement		218:28:4561:4625	829713	0					
ANR	829716	IdentifierDeclStatement	char buf [ 100 ] ;	219:1:4564:4577	829713	0	True				
ANR	829717	IdentifierDecl	buf [ 100 ]		829713	0					
ANR	829718	IdentifierDeclType	char [ 100 ]		829713	0					
ANR	829719	Identifier	buf		829713	1					
ANR	829720	PrimaryExpression	100		829713	2					
ANR	829721	ExpressionStatement	"snprintf ( buf , 100 , ""%d"" , arg )"	220:1:4580:4606	829713	1	True				
ANR	829722	CallExpression	"snprintf ( buf , 100 , ""%d"" , arg )"		829713	0					
ANR	829723	Callee	snprintf		829713	0					
ANR	829724	Identifier	snprintf		829713	0					
ANR	829725	ArgumentList	buf		829713	1					
ANR	829726	Argument	buf		829713	0					
ANR	829727	Identifier	buf		829713	0					
ANR	829728	Argument	100		829713	1					
ANR	829729	PrimaryExpression	100		829713	0					
ANR	829730	Argument	"""%d"""		829713	2					
ANR	829731	PrimaryExpression	"""%d"""		829713	0					
ANR	829732	Argument	arg		829713	3					
ANR	829733	Identifier	arg		829713	0					
ANR	829734	ExpressionStatement	AppendArg ( buf )	221:1:4609:4623	829713	2	True				
ANR	829735	CallExpression	AppendArg ( buf )		829713	0					
ANR	829736	Callee	AppendArg		829713	0					
ANR	829737	Identifier	AppendArg		829713	0					
ANR	829738	ArgumentList	buf		829713	1					
ANR	829739	Argument	buf		829713	0					
ANR	829740	Identifier	buf		829713	0					
ANR	829741	ReturnType	void		829713	1					
ANR	829742	Identifier	ArgList :: AppendArg		829713	2					
ANR	829743	ParameterList	int arg		829713	3					
ANR	829744	Parameter	int arg	218:19:4552:4558	829713	0	True				
ANR	829745	ParameterType	int		829713	0					
ANR	829746	Identifier	arg		829713	1					
ANR	829747	CFGEntryNode	ENTRY		829713		True				
ANR	829748	CFGExitNode	EXIT		829713		True				
ANR	829749	Symbol	buf		829713						
ANR	829750	Symbol	arg		829713						
ANR	829751	Function	ArgList :: RemoveArg	224:0:4628:4818							
ANR	829752	FunctionDef	ArgList :: RemoveArg (int pos)		829751	0					
ANR	829753	CompoundStatement		225:28:4661:4818	829751	0					
ANR	829754	IdentifierDeclStatement	MyString arg ;	226:1:4664:4676	829751	0	True				
ANR	829755	IdentifierDecl	arg		829751	0					
ANR	829756	IdentifierDeclType	MyString		829751	0					
ANR	829757	Identifier	arg		829751	1					
ANR	829758	ExpressionStatement	ASSERT ( pos >= 0 && pos < Count ( ) )	227:1:4679:4712	829751	1	True				
ANR	829759	CallExpression	ASSERT ( pos >= 0 && pos < Count ( ) )		829751	0					
ANR	829760	Callee	ASSERT		829751	0					
ANR	829761	Identifier	ASSERT		829751	0					
ANR	829762	ArgumentList	pos >= 0 && pos < Count ( )		829751	1					
ANR	829763	Argument	pos >= 0 && pos < Count ( )		829751	0					
ANR	829764	AndExpression	pos >= 0 && pos < Count ( )		829751	0		&&			
ANR	829765	RelationalExpression	pos >= 0		829751	0		>=			
ANR	829766	Identifier	pos		829751	0					
ANR	829767	PrimaryExpression	0		829751	1					
ANR	829768	RelationalExpression	pos < Count ( )		829751	1		<			
ANR	829769	Identifier	pos		829751	0					
ANR	829770	CallExpression	Count ( )		829751	1					
ANR	829771	Callee	Count		829751	0					
ANR	829772	Identifier	Count		829751	0					
ANR	829773	ArgumentList			829751	1					
ANR	829774	ExpressionStatement	args_list . Rewind ( )	228:1:4715:4733	829751	2	True				
ANR	829775	CallExpression	args_list . Rewind ( )		829751	0					
ANR	829776	Callee	args_list . Rewind		829751	0					
ANR	829777	MemberAccess	args_list . Rewind		829751	0					
ANR	829778	Identifier	args_list		829751	0					
ANR	829779	Identifier	Rewind		829751	1					
ANR	829780	ArgumentList			829751	1					
ANR	829781	ForStatement	for ( int i = 0 ; i <= pos ; i ++ )		829751	3					
ANR	829782	ForInit	int i = 0 ;	229:5:4740:4747	829751	0	True				
ANR	829783	IdentifierDeclStatement	int i = 0 ;		829751	0					
ANR	829784	IdentifierDecl	i = 0		829751	0					
ANR	829785	IdentifierDeclType	int		829751	0					
ANR	829786	Identifier	i		829751	1					
ANR	829787	AssignmentExpression	i = 0		829751	2		=			
ANR	829788	Identifier	i		829751	0					
ANR	829789	PrimaryExpression	0		829751	1					
ANR	829790	Condition	i <= pos	229:13:4748:4755	829751	1	True				
ANR	829791	RelationalExpression	i <= pos		829751	0		<=			
ANR	829792	Identifier	i		829751	0					
ANR	829793	Identifier	pos		829751	1					
ANR	829794	PostIncDecOperationExpression	i ++	229:22:4757:4759	829751	2	True				
ANR	829795	Identifier	i		829751	0					
ANR	829796	IncDec	++		829751	1					
ANR	829797	CompoundStatement		5:27:100:100	829751	3					
ANR	829798	ExpressionStatement	args_list . Next ( arg )	230:2:4766:4785	829751	0	True				
ANR	829799	CallExpression	args_list . Next ( arg )		829751	0					
ANR	829800	Callee	args_list . Next		829751	0					
ANR	829801	MemberAccess	args_list . Next		829751	0					
ANR	829802	Identifier	args_list		829751	0					
ANR	829803	Identifier	Next		829751	1					
ANR	829804	ArgumentList	arg		829751	1					
ANR	829805	Argument	arg		829751	0					
ANR	829806	Identifier	arg		829751	0					
ANR	829807	ExpressionStatement	args_list . DeleteCurrent ( )	232:1:4791:4816	829751	4	True				
ANR	829808	CallExpression	args_list . DeleteCurrent ( )		829751	0					
ANR	829809	Callee	args_list . DeleteCurrent		829751	0					
ANR	829810	MemberAccess	args_list . DeleteCurrent		829751	0					
ANR	829811	Identifier	args_list		829751	0					
ANR	829812	Identifier	DeleteCurrent		829751	1					
ANR	829813	ArgumentList			829751	1					
ANR	829814	ReturnType	void		829751	1					
ANR	829815	Identifier	ArgList :: RemoveArg		829751	2					
ANR	829816	ParameterList	int pos		829751	3					
ANR	829817	Parameter	int pos	225:19:4652:4658	829751	0	True				
ANR	829818	ParameterType	int		829751	0					
ANR	829819	Identifier	pos		829751	1					
ANR	829820	CFGEntryNode	ENTRY		829751		True				
ANR	829821	CFGExitNode	EXIT		829751		True				
ANR	829822	Symbol	args_list		829751						
ANR	829823	Symbol	pos		829751						
ANR	829824	Symbol	arg		829751						
ANR	829825	Symbol	i		829751						
ANR	829826	Symbol	Count		829751						
ANR	829827	Function	ArgList :: InsertArg	235:0:4821:5170							
ANR	829828	FunctionDef	"ArgList :: InsertArg (char const * arg , int pos)"		829827	0					
ANR	829829	CompoundStatement		236:44:4870:5170	829827	0					
ANR	829830	ExpressionStatement	ASSERT ( pos >= 0 && pos <= Count ( ) )	237:1:4873:4907	829827	0	True				
ANR	829831	CallExpression	ASSERT ( pos >= 0 && pos <= Count ( ) )		829827	0					
ANR	829832	Callee	ASSERT		829827	0					
ANR	829833	Identifier	ASSERT		829827	0					
ANR	829834	ArgumentList	pos >= 0 && pos <= Count ( )		829827	1					
ANR	829835	Argument	pos >= 0 && pos <= Count ( )		829827	0					
ANR	829836	AndExpression	pos >= 0 && pos <= Count ( )		829827	0		&&			
ANR	829837	RelationalExpression	pos >= 0		829827	0		>=			
ANR	829838	Identifier	pos		829827	0					
ANR	829839	PrimaryExpression	0		829827	1					
ANR	829840	RelationalExpression	pos <= Count ( )		829827	1		<=			
ANR	829841	Identifier	pos		829827	0					
ANR	829842	CallExpression	Count ( )		829827	1					
ANR	829843	Callee	Count		829827	0					
ANR	829844	Identifier	Count		829827	0					
ANR	829845	ArgumentList			829827	1					
ANR	829846	IdentifierDeclStatement	int i ;	239:1:4911:4916	829827	1	True				
ANR	829847	IdentifierDecl	i		829827	0					
ANR	829848	IdentifierDeclType	int		829827	0					
ANR	829849	Identifier	i		829827	1					
ANR	829850	IdentifierDeclStatement	char * * args_array = GetStringArray ( ) ;	240:1:4919:4955	829827	2	True				
ANR	829851	IdentifierDecl	* * args_array = GetStringArray ( )		829827	0					
ANR	829852	IdentifierDeclType	char * *		829827	0					
ANR	829853	Identifier	args_array		829827	1					
ANR	829854	AssignmentExpression	* * args_array = GetStringArray ( )		829827	2		=			
ANR	829855	Identifier	args_array		829827	0					
ANR	829856	CallExpression	GetStringArray ( )		829827	1					
ANR	829857	Callee	GetStringArray		829827	0					
ANR	829858	Identifier	GetStringArray		829827	0					
ANR	829859	ArgumentList			829827	1					
ANR	829860	ExpressionStatement	args_list . Clear ( )	242:1:4959:4976	829827	3	True				
ANR	829861	CallExpression	args_list . Clear ( )		829827	0					
ANR	829862	Callee	args_list . Clear		829827	0					
ANR	829863	MemberAccess	args_list . Clear		829827	0					
ANR	829864	Identifier	args_list		829827	0					
ANR	829865	Identifier	Clear		829827	1					
ANR	829866	ArgumentList			829827	1					
ANR	829867	ForStatement	for ( i = 0 ; args_array [ i ] ; i ++ )		829827	4					
ANR	829868	ForInit	i = 0 ;	243:5:4983:4986	829827	0	True				
ANR	829869	AssignmentExpression	i = 0		829827	0		=			
ANR	829870	Identifier	i		829827	0					
ANR	829871	PrimaryExpression	0		829827	1					
ANR	829872	Condition	args_array [ i ]	243:9:4987:4999	829827	1	True				
ANR	829873	ArrayIndexing	args_array [ i ]		829827	0					
ANR	829874	Identifier	args_array		829827	0					
ANR	829875	Identifier	i		829827	1					
ANR	829876	PostIncDecOperationExpression	i ++	243:23:5001:5003	829827	2	True				
ANR	829877	Identifier	i		829827	0					
ANR	829878	IncDec	++		829827	1					
ANR	829879	CompoundStatement		8:28:135:135	829827	3					
ANR	829880	IfStatement	if ( i == pos )		829827	0					
ANR	829881	Condition	i == pos	244:5:5013:5020	829827	0	True				
ANR	829882	EqualityExpression	i == pos		829827	0		==			
ANR	829883	Identifier	i		829827	0					
ANR	829884	Identifier	pos		829827	1					
ANR	829885	CompoundStatement		9:15:152:152	829827	1					
ANR	829886	ExpressionStatement	args_list . Append ( arg )	245:3:5028:5049	829827	0	True				
ANR	829887	CallExpression	args_list . Append ( arg )		829827	0					
ANR	829888	Callee	args_list . Append		829827	0					
ANR	829889	MemberAccess	args_list . Append		829827	0					
ANR	829890	Identifier	args_list		829827	0					
ANR	829891	Identifier	Append		829827	1					
ANR	829892	ArgumentList	arg		829827	1					
ANR	829893	Argument	arg		829827	0					
ANR	829894	Identifier	arg		829827	0					
ANR	829895	ExpressionStatement	args_list . Append ( args_array [ i ] )	247:2:5057:5088	829827	1	True				
ANR	829896	CallExpression	args_list . Append ( args_array [ i ] )		829827	0					
ANR	829897	Callee	args_list . Append		829827	0					
ANR	829898	MemberAccess	args_list . Append		829827	0					
ANR	829899	Identifier	args_list		829827	0					
ANR	829900	Identifier	Append		829827	1					
ANR	829901	ArgumentList	args_array [ i ]		829827	1					
ANR	829902	Argument	args_array [ i ]		829827	0					
ANR	829903	ArrayIndexing	args_array [ i ]		829827	0					
ANR	829904	Identifier	args_array		829827	0					
ANR	829905	Identifier	i		829827	1					
ANR	829906	IfStatement	if ( i == pos )		829827	5					
ANR	829907	Condition	i == pos	249:4:5097:5104	829827	0	True				
ANR	829908	EqualityExpression	i == pos		829827	0		==			
ANR	829909	Identifier	i		829827	0					
ANR	829910	Identifier	pos		829827	1					
ANR	829911	CompoundStatement		14:14:236:236	829827	1					
ANR	829912	ExpressionStatement	args_list . Append ( arg )	250:2:5111:5132	829827	0	True				
ANR	829913	CallExpression	args_list . Append ( arg )		829827	0					
ANR	829914	Callee	args_list . Append		829827	0					
ANR	829915	MemberAccess	args_list . Append		829827	0					
ANR	829916	Identifier	args_list		829827	0					
ANR	829917	Identifier	Append		829827	1					
ANR	829918	ArgumentList	arg		829827	1					
ANR	829919	Argument	arg		829827	0					
ANR	829920	Identifier	arg		829827	0					
ANR	829921	ExpressionStatement	deleteStringArray ( args_array )	253:1:5139:5168	829827	6	True				
ANR	829922	CallExpression	deleteStringArray ( args_array )		829827	0					
ANR	829923	Callee	deleteStringArray		829827	0					
ANR	829924	Identifier	deleteStringArray		829827	0					
ANR	829925	ArgumentList	args_array		829827	1					
ANR	829926	Argument	args_array		829827	0					
ANR	829927	Identifier	args_array		829827	0					
ANR	829928	ReturnType	void		829827	1					
ANR	829929	Identifier	ArgList :: InsertArg		829827	2					
ANR	829930	ParameterList	"char const * arg , int pos"		829827	3					
ANR	829931	Parameter	char const * arg	236:19:4845:4859	829827	0	True				
ANR	829932	ParameterType	char const *		829827	0					
ANR	829933	Identifier	arg		829827	1					
ANR	829934	Parameter	int pos	236:35:4861:4867	829827	1	True				
ANR	829935	ParameterType	int		829827	0					
ANR	829936	Identifier	pos		829827	1					
ANR	829937	CFGEntryNode	ENTRY		829827		True				
ANR	829938	CFGExitNode	EXIT		829827		True				
ANR	829939	Symbol	args_list		829827						
ANR	829940	Symbol	* i		829827						
ANR	829941	Symbol	pos		829827						
ANR	829942	Symbol	arg		829827						
ANR	829943	Symbol	i		829827						
ANR	829944	Symbol	* args_array		829827						
ANR	829945	Symbol	Count		829827						
ANR	829946	Symbol	args_array		829827						
ANR	829947	Symbol	GetStringArray		829827						
ANR	829948	Function	ArgList :: GetStringArray	256:0:5173:5254							
ANR	829949	FunctionDef	ArgList :: GetStringArray ()		829948	0					
ANR	829950	CompoundStatement		257:32:5213:5254	829948	0					
ANR	829951	ReturnStatement	return ArgListToArgsArray ( args_list ) ;	258:1:5216:5252	829948	0	True				
ANR	829952	CallExpression	ArgListToArgsArray ( args_list )		829948	0					
ANR	829953	Callee	ArgListToArgsArray		829948	0					
ANR	829954	Identifier	ArgListToArgsArray		829948	0					
ANR	829955	ArgumentList	args_list		829948	1					
ANR	829956	Argument	args_list		829948	0					
ANR	829957	Identifier	args_list		829948	0					
ANR	829958	ReturnType	char * *		829948	1					
ANR	829959	Identifier	ArgList :: GetStringArray		829948	2					
ANR	829960	ParameterList			829948	3					
ANR	829961	CFGEntryNode	ENTRY		829948		True				
ANR	829962	CFGExitNode	EXIT		829948		True				
ANR	829963	Symbol	args_list		829948						
ANR	829964	Symbol	ArgListToArgsArray		829948						
ANR	829965	Function	ArgList :: AppendArgsV1RawOrV2Quoted	261:0:5257:5677							
ANR	829966	FunctionDef	"ArgList :: AppendArgsV1RawOrV2Quoted (char const * args , MyString * error_msg)"		829965	0					
ANR	829967	CompoundStatement		263:0:5335:5677	829965	0					
ANR	829968	IfStatement	if ( IsV2QuotedString ( args ) )		829965	0					
ANR	829969	Condition	IsV2QuotedString ( args )	264:4:5341:5362	829965	0	True				
ANR	829970	CallExpression	IsV2QuotedString ( args )		829965	0					
ANR	829971	Callee	IsV2QuotedString		829965	0					
ANR	829972	Identifier	IsV2QuotedString		829965	0					
ANR	829973	ArgumentList	args		829965	1					
ANR	829974	Argument	args		829965	0					
ANR	829975	Identifier	args		829965	0					
ANR	829976	CompoundStatement		4:2:103:114	829965	1					
ANR	829977	IdentifierDeclStatement	MyString v2 ;	266:2:5439:5450	829965	0	True				
ANR	829978	IdentifierDecl	v2		829965	0					
ANR	829979	IdentifierDeclType	MyString		829965	0					
ANR	829980	Identifier	v2		829965	1					
ANR	829981	IfStatement	"if ( ! V2QuotedToV2Raw ( args , & v2 , error_msg ) )"		829965	1					
ANR	829982	Condition	"! V2QuotedToV2Raw ( args , & v2 , error_msg )"	267:5:5457:5492	829965	0	True				
ANR	829983	UnaryOperationExpression	"! V2QuotedToV2Raw ( args , & v2 , error_msg )"		829965	0					
ANR	829984	UnaryOperator	!		829965	0					
ANR	829985	CallExpression	"V2QuotedToV2Raw ( args , & v2 , error_msg )"		829965	1					
ANR	829986	Callee	V2QuotedToV2Raw		829965	0					
ANR	829987	Identifier	V2QuotedToV2Raw		829965	0					
ANR	829988	ArgumentList	args		829965	1					
ANR	829989	Argument	args		829965	0					
ANR	829990	Identifier	args		829965	0					
ANR	829991	Argument	& v2		829965	1					
ANR	829992	UnaryOperationExpression	& v2		829965	0					
ANR	829993	UnaryOperator	&		829965	0					
ANR	829994	Identifier	v2		829965	1					
ANR	829995	Argument	error_msg		829965	2					
ANR	829996	Identifier	error_msg		829965	0					
ANR	829997	CompoundStatement		5:43:159:159	829965	1					
ANR	829998	ReturnStatement	return false ;	268:3:5500:5512	829965	0	True				
ANR	829999	Identifier	false		829965	0					
ANR	830000	ReturnStatement	"return AppendArgsV2Raw ( v2 . Value ( ) , error_msg ) ;"	270:2:5520:5564	829965	2	True				
ANR	830001	CallExpression	"AppendArgsV2Raw ( v2 . Value ( ) , error_msg )"		829965	0					
ANR	830002	Callee	AppendArgsV2Raw		829965	0					
ANR	830003	Identifier	AppendArgsV2Raw		829965	0					
ANR	830004	ArgumentList	v2 . Value ( )		829965	1					
ANR	830005	Argument	v2 . Value ( )		829965	0					
ANR	830006	CallExpression	v2 . Value ( )		829965	0					
ANR	830007	Callee	v2 . Value		829965	0					
ANR	830008	MemberAccess	v2 . Value		829965	0					
ANR	830009	Identifier	v2		829965	0					
ANR	830010	Identifier	Value		829965	1					
ANR	830011	ArgumentList			829965	1					
ANR	830012	Argument	error_msg		829965	1					
ANR	830013	Identifier	error_msg		829965	0					
ANR	830014	ReturnStatement	"return AppendArgsV1Raw ( args , error_msg ) ;"	275:1:5637:5675	829965	1	True				
ANR	830015	CallExpression	"AppendArgsV1Raw ( args , error_msg )"		829965	0					
ANR	830016	Callee	AppendArgsV1Raw		829965	0					
ANR	830017	Identifier	AppendArgsV1Raw		829965	0					
ANR	830018	ArgumentList	args		829965	1					
ANR	830019	Argument	args		829965	0					
ANR	830020	Identifier	args		829965	0					
ANR	830021	Argument	error_msg		829965	1					
ANR	830022	Identifier	error_msg		829965	0					
ANR	830023	ReturnType	bool		829965	1					
ANR	830024	Identifier	ArgList :: AppendArgsV1RawOrV2Quoted		829965	2					
ANR	830025	ParameterList	"char const * args , MyString * error_msg"		829965	3					
ANR	830026	Parameter	char const * args	262:35:5297:5312	829965	0	True				
ANR	830027	ParameterType	char const *		829965	0					
ANR	830028	Identifier	args		829965	1					
ANR	830029	Parameter	MyString * error_msg	262:52:5314:5332	829965	1	True				
ANR	830030	ParameterType	MyString *		829965	0					
ANR	830031	Identifier	error_msg		829965	1					
ANR	830032	CFGEntryNode	ENTRY		829965		True				
ANR	830033	CFGExitNode	EXIT		829965		True				
ANR	830034	Symbol	args		829965						
ANR	830035	Symbol	AppendArgsV2Raw		829965						
ANR	830036	Symbol	V2QuotedToV2Raw		829965						
ANR	830037	Symbol	error_msg		829965						
ANR	830038	Symbol	AppendArgsV1Raw		829965						
ANR	830039	Symbol	& v2		829965						
ANR	830040	Symbol	IsV2QuotedString		829965						
ANR	830041	Symbol	false		829965						
ANR	830042	Symbol	v2 . Value		829965						
ANR	830043	Symbol	v2		829965						
ANR	830044	Function	ArgList :: AppendArgsV1WackedOrV2Quoted	278:0:5680:6195							
ANR	830045	FunctionDef	"ArgList :: AppendArgsV1WackedOrV2Quoted (char const * args , MyString * error_msg)"		830044	0					
ANR	830046	CompoundStatement		280:0:5761:6195	830044	0					
ANR	830047	IfStatement	if ( IsV2QuotedString ( args ) )		830044	0					
ANR	830048	Condition	IsV2QuotedString ( args )	281:4:5767:5788	830044	0	True				
ANR	830049	CallExpression	IsV2QuotedString ( args )		830044	0					
ANR	830050	Callee	IsV2QuotedString		830044	0					
ANR	830051	Identifier	IsV2QuotedString		830044	0					
ANR	830052	ArgumentList	args		830044	1					
ANR	830053	Argument	args		830044	0					
ANR	830054	Identifier	args		830044	0					
ANR	830055	CompoundStatement		4:2:103:114	830044	1					
ANR	830056	IdentifierDeclStatement	MyString v2 ;	283:2:5865:5876	830044	0	True				
ANR	830057	IdentifierDecl	v2		830044	0					
ANR	830058	IdentifierDeclType	MyString		830044	0					
ANR	830059	Identifier	v2		830044	1					
ANR	830060	IfStatement	"if ( ! V2QuotedToV2Raw ( args , & v2 , error_msg ) )"		830044	1					
ANR	830061	Condition	"! V2QuotedToV2Raw ( args , & v2 , error_msg )"	284:5:5883:5918	830044	0	True				
ANR	830062	UnaryOperationExpression	"! V2QuotedToV2Raw ( args , & v2 , error_msg )"		830044	0					
ANR	830063	UnaryOperator	!		830044	0					
ANR	830064	CallExpression	"V2QuotedToV2Raw ( args , & v2 , error_msg )"		830044	1					
ANR	830065	Callee	V2QuotedToV2Raw		830044	0					
ANR	830066	Identifier	V2QuotedToV2Raw		830044	0					
ANR	830067	ArgumentList	args		830044	1					
ANR	830068	Argument	args		830044	0					
ANR	830069	Identifier	args		830044	0					
ANR	830070	Argument	& v2		830044	1					
ANR	830071	UnaryOperationExpression	& v2		830044	0					
ANR	830072	UnaryOperator	&		830044	0					
ANR	830073	Identifier	v2		830044	1					
ANR	830074	Argument	error_msg		830044	2					
ANR	830075	Identifier	error_msg		830044	0					
ANR	830076	CompoundStatement		5:43:159:159	830044	1					
ANR	830077	ReturnStatement	return false ;	285:3:5926:5938	830044	0	True				
ANR	830078	Identifier	false		830044	0					
ANR	830079	ReturnStatement	"return AppendArgsV2Raw ( v2 . Value ( ) , error_msg ) ;"	287:2:5946:5990	830044	2	True				
ANR	830080	CallExpression	"AppendArgsV2Raw ( v2 . Value ( ) , error_msg )"		830044	0					
ANR	830081	Callee	AppendArgsV2Raw		830044	0					
ANR	830082	Identifier	AppendArgsV2Raw		830044	0					
ANR	830083	ArgumentList	v2 . Value ( )		830044	1					
ANR	830084	Argument	v2 . Value ( )		830044	0					
ANR	830085	CallExpression	v2 . Value ( )		830044	0					
ANR	830086	Callee	v2 . Value		830044	0					
ANR	830087	MemberAccess	v2 . Value		830044	0					
ANR	830088	Identifier	v2		830044	0					
ANR	830089	Identifier	Value		830044	1					
ANR	830090	ArgumentList			830044	1					
ANR	830091	Argument	error_msg		830044	1					
ANR	830092	Identifier	error_msg		830044	0					
ANR	830093	IdentifierDeclStatement	MyString v1 ;	292:1:6071:6082	830044	1	True				
ANR	830094	IdentifierDecl	v1		830044	0					
ANR	830095	IdentifierDeclType	MyString		830044	0					
ANR	830096	Identifier	v1		830044	1					
ANR	830097	IfStatement	"if ( ! V1WackedToV1Raw ( args , & v1 , error_msg ) )"		830044	2					
ANR	830098	Condition	"! V1WackedToV1Raw ( args , & v1 , error_msg )"	293:4:6088:6123	830044	0	True				
ANR	830099	UnaryOperationExpression	"! V1WackedToV1Raw ( args , & v1 , error_msg )"		830044	0					
ANR	830100	UnaryOperator	!		830044	0					
ANR	830101	CallExpression	"V1WackedToV1Raw ( args , & v1 , error_msg )"		830044	1					
ANR	830102	Callee	V1WackedToV1Raw		830044	0					
ANR	830103	Identifier	V1WackedToV1Raw		830044	0					
ANR	830104	ArgumentList	args		830044	1					
ANR	830105	Argument	args		830044	0					
ANR	830106	Identifier	args		830044	0					
ANR	830107	Argument	& v1		830044	1					
ANR	830108	UnaryOperationExpression	& v1		830044	0					
ANR	830109	UnaryOperator	&		830044	0					
ANR	830110	Identifier	v1		830044	1					
ANR	830111	Argument	error_msg		830044	2					
ANR	830112	Identifier	error_msg		830044	0					
ANR	830113	CompoundStatement		14:42:364:364	830044	1					
ANR	830114	ReturnStatement	return false ;	294:2:6130:6142	830044	0	True				
ANR	830115	Identifier	false		830044	0					
ANR	830116	ReturnStatement	"return AppendArgsV1Raw ( v1 . Value ( ) , error_msg ) ;"	297:1:6149:6193	830044	3	True				
ANR	830117	CallExpression	"AppendArgsV1Raw ( v1 . Value ( ) , error_msg )"		830044	0					
ANR	830118	Callee	AppendArgsV1Raw		830044	0					
ANR	830119	Identifier	AppendArgsV1Raw		830044	0					
ANR	830120	ArgumentList	v1 . Value ( )		830044	1					
ANR	830121	Argument	v1 . Value ( )		830044	0					
ANR	830122	CallExpression	v1 . Value ( )		830044	0					
ANR	830123	Callee	v1 . Value		830044	0					
ANR	830124	MemberAccess	v1 . Value		830044	0					
ANR	830125	Identifier	v1		830044	0					
ANR	830126	Identifier	Value		830044	1					
ANR	830127	ArgumentList			830044	1					
ANR	830128	Argument	error_msg		830044	1					
ANR	830129	Identifier	error_msg		830044	0					
ANR	830130	ReturnType	bool		830044	1					
ANR	830131	Identifier	ArgList :: AppendArgsV1WackedOrV2Quoted		830044	2					
ANR	830132	ParameterList	"char const * args , MyString * error_msg"		830044	3					
ANR	830133	Parameter	char const * args	279:38:5723:5738	830044	0	True				
ANR	830134	ParameterType	char const *		830044	0					
ANR	830135	Identifier	args		830044	1					
ANR	830136	Parameter	MyString * error_msg	279:55:5740:5758	830044	1	True				
ANR	830137	ParameterType	MyString *		830044	0					
ANR	830138	Identifier	error_msg		830044	1					
ANR	830139	CFGEntryNode	ENTRY		830044		True				
ANR	830140	CFGExitNode	EXIT		830044		True				
ANR	830141	Symbol	AppendArgsV2Raw		830044						
ANR	830142	Symbol	error_msg		830044						
ANR	830143	Symbol	AppendArgsV1Raw		830044						
ANR	830144	Symbol	& v1		830044						
ANR	830145	Symbol	v1 . Value		830044						
ANR	830146	Symbol	& v2		830044						
ANR	830147	Symbol	V1WackedToV1Raw		830044						
ANR	830148	Symbol	IsV2QuotedString		830044						
ANR	830149	Symbol	false		830044						
ANR	830150	Symbol	args		830044						
ANR	830151	Symbol	V2QuotedToV2Raw		830044						
ANR	830152	Symbol	v2 . Value		830044						
ANR	830153	Symbol	v1		830044						
ANR	830154	Symbol	v2		830044						
ANR	830155	Function	ArgList :: AppendArgsV2Quoted	300:0:6198:6528							
ANR	830156	FunctionDef	"ArgList :: AppendArgsV2Quoted (char const * args , MyString * error_msg)"		830155	0					
ANR	830157	CompoundStatement		302:0:6269:6528	830155	0					
ANR	830158	IfStatement	if ( ! IsV2QuotedString ( args ) )		830155	0					
ANR	830159	Condition	! IsV2QuotedString ( args )	303:4:6275:6297	830155	0	True				
ANR	830160	UnaryOperationExpression	! IsV2QuotedString ( args )		830155	0					
ANR	830161	UnaryOperator	!		830155	0					
ANR	830162	CallExpression	IsV2QuotedString ( args )		830155	1					
ANR	830163	Callee	IsV2QuotedString		830155	0					
ANR	830164	Identifier	IsV2QuotedString		830155	0					
ANR	830165	ArgumentList	args		830155	1					
ANR	830166	Argument	args		830155	0					
ANR	830167	Identifier	args		830155	0					
ANR	830168	CompoundStatement		2:29:30:30	830155	1					
ANR	830169	ExpressionStatement	"AddErrorMessage ( ""Expecting double-quoted input string (V2 format)."" , error_msg )"	304:2:6304:6382	830155	0	True				
ANR	830170	CallExpression	"AddErrorMessage ( ""Expecting double-quoted input string (V2 format)."" , error_msg )"		830155	0					
ANR	830171	Callee	AddErrorMessage		830155	0					
ANR	830172	Identifier	AddErrorMessage		830155	0					
ANR	830173	ArgumentList	"""Expecting double-quoted input string (V2 format)."""		830155	1					
ANR	830174	Argument	"""Expecting double-quoted input string (V2 format)."""		830155	0					
ANR	830175	PrimaryExpression	"""Expecting double-quoted input string (V2 format)."""		830155	0					
ANR	830176	Argument	error_msg		830155	1					
ANR	830177	Identifier	error_msg		830155	0					
ANR	830178	ReturnStatement	return false ;	305:2:6386:6398	830155	1	True				
ANR	830179	Identifier	false		830155	0					
ANR	830180	IdentifierDeclStatement	MyString v2 ;	308:1:6405:6416	830155	1	True				
ANR	830181	IdentifierDecl	v2		830155	0					
ANR	830182	IdentifierDeclType	MyString		830155	0					
ANR	830183	Identifier	v2		830155	1					
ANR	830184	IfStatement	"if ( ! V2QuotedToV2Raw ( args , & v2 , error_msg ) )"		830155	2					
ANR	830185	Condition	"! V2QuotedToV2Raw ( args , & v2 , error_msg )"	309:4:6422:6457	830155	0	True				
ANR	830186	UnaryOperationExpression	"! V2QuotedToV2Raw ( args , & v2 , error_msg )"		830155	0					
ANR	830187	UnaryOperator	!		830155	0					
ANR	830188	CallExpression	"V2QuotedToV2Raw ( args , & v2 , error_msg )"		830155	1					
ANR	830189	Callee	V2QuotedToV2Raw		830155	0					
ANR	830190	Identifier	V2QuotedToV2Raw		830155	0					
ANR	830191	ArgumentList	args		830155	1					
ANR	830192	Argument	args		830155	0					
ANR	830193	Identifier	args		830155	0					
ANR	830194	Argument	& v2		830155	1					
ANR	830195	UnaryOperationExpression	& v2		830155	0					
ANR	830196	UnaryOperator	&		830155	0					
ANR	830197	Identifier	v2		830155	1					
ANR	830198	Argument	error_msg		830155	2					
ANR	830199	Identifier	error_msg		830155	0					
ANR	830200	CompoundStatement		8:42:190:190	830155	1					
ANR	830201	ReturnStatement	return false ;	310:2:6464:6476	830155	0	True				
ANR	830202	Identifier	false		830155	0					
ANR	830203	ReturnStatement	"return AppendArgsV2Raw ( v2 . Value ( ) , error_msg ) ;"	312:1:6482:6526	830155	3	True				
ANR	830204	CallExpression	"AppendArgsV2Raw ( v2 . Value ( ) , error_msg )"		830155	0					
ANR	830205	Callee	AppendArgsV2Raw		830155	0					
ANR	830206	Identifier	AppendArgsV2Raw		830155	0					
ANR	830207	ArgumentList	v2 . Value ( )		830155	1					
ANR	830208	Argument	v2 . Value ( )		830155	0					
ANR	830209	CallExpression	v2 . Value ( )		830155	0					
ANR	830210	Callee	v2 . Value		830155	0					
ANR	830211	MemberAccess	v2 . Value		830155	0					
ANR	830212	Identifier	v2		830155	0					
ANR	830213	Identifier	Value		830155	1					
ANR	830214	ArgumentList			830155	1					
ANR	830215	Argument	error_msg		830155	1					
ANR	830216	Identifier	error_msg		830155	0					
ANR	830217	ReturnType	bool		830155	1					
ANR	830218	Identifier	ArgList :: AppendArgsV2Quoted		830155	2					
ANR	830219	ParameterList	"char const * args , MyString * error_msg"		830155	3					
ANR	830220	Parameter	char const * args	301:28:6231:6246	830155	0	True				
ANR	830221	ParameterType	char const *		830155	0					
ANR	830222	Identifier	args		830155	1					
ANR	830223	Parameter	MyString * error_msg	301:45:6248:6266	830155	1	True				
ANR	830224	ParameterType	MyString *		830155	0					
ANR	830225	Identifier	error_msg		830155	1					
ANR	830226	CFGEntryNode	ENTRY		830155		True				
ANR	830227	CFGExitNode	EXIT		830155		True				
ANR	830228	Symbol	args		830155						
ANR	830229	Symbol	AppendArgsV2Raw		830155						
ANR	830230	Symbol	V2QuotedToV2Raw		830155						
ANR	830231	Symbol	error_msg		830155						
ANR	830232	Symbol	& v2		830155						
ANR	830233	Symbol	IsV2QuotedString		830155						
ANR	830234	Symbol	false		830155						
ANR	830235	Symbol	v2 . Value		830155						
ANR	830236	Symbol	v2		830155						
ANR	830237	Function	ArgList :: AppendArgsV1Raw_win32	315:0:6531:8208							
ANR	830238	FunctionDef	"ArgList :: AppendArgsV1Raw_win32 (char const * args , MyString * error_msg)"		830237	0					
ANR	830239	CompoundStatement		317:0:6605:8208	830237	0					
ANR	830240	WhileStatement	while ( * args )		830237	0					
ANR	830241	Condition	* args	321:7:6712:6716	830237	0	True				
ANR	830242	UnaryOperationExpression	* args		830237	0					
ANR	830243	UnaryOperator	*		830237	0					
ANR	830244	Identifier	args		830237	1					
ANR	830245	CompoundStatement		7:2:149:166	830237	1					
ANR	830246	IdentifierDeclStatement	char const * begin_arg = args ;	322:2:6723:6751	830237	0	True				
ANR	830247	IdentifierDecl	* begin_arg = args		830237	0					
ANR	830248	IdentifierDeclType	char const *		830237	0					
ANR	830249	Identifier	begin_arg		830237	1					
ANR	830250	AssignmentExpression	* begin_arg = args		830237	2		=			
ANR	830251	Identifier	args		830237	0					
ANR	830252	Identifier	args		830237	1					
ANR	830253	IdentifierDeclStatement	"MyString buf = """" ;"	323:2:6755:6772	830237	1	True				
ANR	830254	IdentifierDecl	"buf = """""		830237	0					
ANR	830255	IdentifierDeclType	MyString		830237	0					
ANR	830256	Identifier	buf		830237	1					
ANR	830257	AssignmentExpression	"buf = """""		830237	2		=			
ANR	830258	Identifier	buf		830237	0					
ANR	830259	PrimaryExpression	""""""		830237	1					
ANR	830260	WhileStatement	while ( * args )		830237	2					
ANR	830261	Condition	* args	324:8:6782:6786	830237	0	True				
ANR	830262	UnaryOperationExpression	* args		830237	0					
ANR	830263	UnaryOperator	*		830237	0					
ANR	830264	Identifier	args		830237	1					
ANR	830265	CompoundStatement		8:15:183:183	830237	1					
ANR	830266	IfStatement	if ( * args == ' ' || * args == '\\t' || * args == '\\n' || * args == '\\r' )		830237	0					
ANR	830267	Condition	* args == ' ' || * args == '\\t' || * args == '\\n' || * args == '\\r'	325:6:6797:6867	830237	0	True				
ANR	830268	OrExpression	* args == ' ' || * args == '\\t' || * args == '\\n' || * args == '\\r'		830237	0		||			
ANR	830269	EqualityExpression	* args == ' '		830237	0		==			
ANR	830270	UnaryOperationExpression	* args		830237	0					
ANR	830271	UnaryOperator	*		830237	0					
ANR	830272	Identifier	args		830237	1					
ANR	830273	PrimaryExpression	' '		830237	1					
ANR	830274	OrExpression	* args == '\\t' || * args == '\\n' || * args == '\\r'		830237	1		||			
ANR	830275	EqualityExpression	* args == '\\t'		830237	0		==			
ANR	830276	UnaryOperationExpression	* args		830237	0					
ANR	830277	UnaryOperator	*		830237	0					
ANR	830278	Identifier	args		830237	1					
ANR	830279	PrimaryExpression	'\\t'		830237	1					
ANR	830280	OrExpression	* args == '\\n' || * args == '\\r'		830237	1		||			
ANR	830281	EqualityExpression	* args == '\\n'		830237	0		==			
ANR	830282	UnaryOperationExpression	* args		830237	0					
ANR	830283	UnaryOperator	*		830237	0					
ANR	830284	Identifier	args		830237	1					
ANR	830285	PrimaryExpression	'\\n'		830237	1					
ANR	830286	EqualityExpression	* args == '\\r'		830237	1		==			
ANR	830287	UnaryOperationExpression	* args		830237	0					
ANR	830288	UnaryOperator	*		830237	0					
ANR	830289	Identifier	args		830237	1					
ANR	830290	PrimaryExpression	'\\r'		830237	1					
ANR	830291	CompoundStatement		10:38:264:264	830237	1					
ANR	830292	BreakStatement	break ;	327:4:6876:6881	830237	0	True				
ANR	830293	ElseStatement	else		830237	0					
ANR	830294	IfStatement	"if ( * args != '""' )"		830237	0					
ANR	830295	Condition	"* args != '""'"	329:11:6899:6910	830237	0	True				
ANR	830296	EqualityExpression	"* args != '""'"		830237	0		!=			
ANR	830297	UnaryOperationExpression	* args		830237	0					
ANR	830298	UnaryOperator	*		830237	0					
ANR	830299	Identifier	args		830237	1					
ANR	830300	PrimaryExpression	"'""'"		830237	1					
ANR	830301	CompoundStatement		13:25:307:307	830237	1					
ANR	830302	ExpressionStatement	buf += * ( args ++ )	330:4:6919:6935	830237	0	True				
ANR	830303	AssignmentExpression	buf += * ( args ++ )		830237	0		+=			
ANR	830304	Identifier	buf		830237	0					
ANR	830305	UnaryOperationExpression	* ( args ++ )		830237	1					
ANR	830306	UnaryOperator	*		830237	0					
ANR	830307	PostIncDecOperationExpression	args ++		830237	1					
ANR	830308	Identifier	args		830237	0					
ANR	830309	IncDec	++		830237	1					
ANR	830310	ElseStatement	else		830237	0					
ANR	830311	CompoundStatement		18:4:373:403	830237	0					
ANR	830312	IdentifierDeclStatement	char const * begin_quote = args ;	334:4:6979:7009	830237	0	True				
ANR	830313	IdentifierDecl	* begin_quote = args		830237	0					
ANR	830314	IdentifierDeclType	char const *		830237	0					
ANR	830315	Identifier	begin_quote		830237	1					
ANR	830316	AssignmentExpression	* begin_quote = args		830237	2		=			
ANR	830317	Identifier	args		830237	0					
ANR	830318	Identifier	args		830237	1					
ANR	830319	ExpressionStatement	args ++	335:4:7015:7021	830237	1	True				
ANR	830320	PostIncDecOperationExpression	args ++		830237	0					
ANR	830321	Identifier	args		830237	0					
ANR	830322	IncDec	++		830237	1					
ANR	830323	WhileStatement	while ( * args )		830237	2					
ANR	830324	Condition	* args	337:10:7048:7052	830237	0	True				
ANR	830325	UnaryOperationExpression	* args		830237	0					
ANR	830326	UnaryOperator	*		830237	0					
ANR	830327	Identifier	args		830237	1					
ANR	830328	CompoundStatement		22:5:456:475	830237	1					
ANR	830329	IdentifierDeclStatement	int backslashes = 0 ;	338:5:7062:7081	830237	0	True				
ANR	830330	IdentifierDecl	backslashes = 0		830237	0					
ANR	830331	IdentifierDeclType	int		830237	0					
ANR	830332	Identifier	backslashes		830237	1					
ANR	830333	AssignmentExpression	backslashes = 0		830237	2		=			
ANR	830334	Identifier	backslashes		830237	0					
ANR	830335	PrimaryExpression	0		830237	1					
ANR	830336	WhileStatement	while ( * args == '\\\\' )		830237	1					
ANR	830337	Condition	* args == '\\\\'	339:11:7094:7106	830237	0	True				
ANR	830338	EqualityExpression	* args == '\\\\'		830237	0		==			
ANR	830339	UnaryOperationExpression	* args		830237	0					
ANR	830340	UnaryOperator	*		830237	0					
ANR	830341	Identifier	args		830237	1					
ANR	830342	PrimaryExpression	'\\\\'		830237	1					
ANR	830343	CompoundStatement		23:26:503:503	830237	1					
ANR	830344	ExpressionStatement	backslashes ++	340:6:7117:7130	830237	0	True				
ANR	830345	PostIncDecOperationExpression	backslashes ++		830237	0					
ANR	830346	Identifier	backslashes		830237	0					
ANR	830347	IncDec	++		830237	1					
ANR	830348	ExpressionStatement	args ++	341:6:7138:7144	830237	1	True				
ANR	830349	PostIncDecOperationExpression	args ++		830237	0					
ANR	830350	Identifier	args		830237	0					
ANR	830351	IncDec	++		830237	1					
ANR	830352	IfStatement	"if ( backslashes && * args == '""' )"		830237	2					
ANR	830353	Condition	"backslashes && * args == '""'"	343:8:7161:7187	830237	0	True				
ANR	830354	AndExpression	"backslashes && * args == '""'"		830237	0		&&			
ANR	830355	Identifier	backslashes		830237	0					
ANR	830356	EqualityExpression	"* args == '""'"		830237	1		==			
ANR	830357	UnaryOperationExpression	* args		830237	0					
ANR	830358	UnaryOperator	*		830237	0					
ANR	830359	Identifier	args		830237	1					
ANR	830360	PrimaryExpression	"'""'"		830237	1					
ANR	830361	CompoundStatement		27:37:584:584	830237	1					
ANR	830362	WhileStatement	while ( backslashes >= 2 )		830237	0					
ANR	830363	Condition	backslashes >= 2	348:12:7364:7379	830237	0	True				
ANR	830364	RelationalExpression	backslashes >= 2		830237	0		>=			
ANR	830365	Identifier	backslashes		830237	0					
ANR	830366	PrimaryExpression	2		830237	1					
ANR	830367	CompoundStatement		32:30:776:776	830237	1					
ANR	830368	ExpressionStatement	backslashes -= 2	349:7:7391:7407	830237	0	True				
ANR	830369	AssignmentExpression	backslashes -= 2		830237	0		-=			
ANR	830370	Identifier	backslashes		830237	0					
ANR	830371	PrimaryExpression	2		830237	1					
ANR	830372	ExpressionStatement	buf += '\\\\'	350:7:7416:7427	830237	1	True				
ANR	830373	AssignmentExpression	buf += '\\\\'		830237	0		+=			
ANR	830374	Identifier	buf		830237	0					
ANR	830375	PrimaryExpression	'\\\\'		830237	1					
ANR	830376	IfStatement	if ( backslashes )		830237	1					
ANR	830377	Condition	backslashes	352:9:7446:7456	830237	0	True				
ANR	830378	Identifier	backslashes		830237	0					
ANR	830379	CompoundStatement		36:22:853:853	830237	1					
ANR	830380	ExpressionStatement	buf += * ( args ++ )	353:7:7468:7484	830237	0	True				
ANR	830381	AssignmentExpression	buf += * ( args ++ )		830237	0		+=			
ANR	830382	Identifier	buf		830237	0					
ANR	830383	UnaryOperationExpression	* ( args ++ )		830237	1					
ANR	830384	UnaryOperator	*		830237	0					
ANR	830385	PostIncDecOperationExpression	args ++		830237	1					
ANR	830386	Identifier	args		830237	0					
ANR	830387	IncDec	++		830237	1					
ANR	830388	ElseStatement	else		830237	0					
ANR	830389	CompoundStatement		39:11:915:915	830237	0					
ANR	830390	BreakStatement	break ;	356:7:7530:7535	830237	0	True				
ANR	830391	ElseStatement	else		830237	0					
ANR	830392	IfStatement	if ( backslashes )		830237	0					
ANR	830393	Condition	backslashes	359:13:7582:7592	830237	0	True				
ANR	830394	Identifier	backslashes		830237	0					
ANR	830395	CompoundStatement		43:26:989:989	830237	1					
ANR	830396	WhileStatement	while ( backslashes -- )		830237	0					
ANR	830397	Condition	backslashes --	361:12:7638:7650	830237	0	True				
ANR	830398	PostIncDecOperationExpression	backslashes --		830237	0					
ANR	830399	Identifier	backslashes		830237	0					
ANR	830400	IncDec	--		830237	1					
ANR	830401	CompoundStatement		45:27:1047:1047	830237	1					
ANR	830402	ExpressionStatement	buf += '\\\\'	362:7:7662:7673	830237	0	True				
ANR	830403	AssignmentExpression	buf += '\\\\'		830237	0		+=			
ANR	830404	Identifier	buf		830237	0					
ANR	830405	PrimaryExpression	'\\\\'		830237	1					
ANR	830406	ElseStatement	else		830237	0					
ANR	830407	IfStatement	"if ( * args == '""' )"		830237	0					
ANR	830408	Condition	"* args == '""'"	365:13:7703:7714	830237	0	True				
ANR	830409	EqualityExpression	"* args == '""'"		830237	0		==			
ANR	830410	UnaryOperationExpression	* args		830237	0					
ANR	830411	UnaryOperator	*		830237	0					
ANR	830412	Identifier	args		830237	1					
ANR	830413	PrimaryExpression	"'""'"		830237	1					
ANR	830414	CompoundStatement		49:27:1111:1111	830237	1					
ANR	830415	BreakStatement	break ;	366:6:7725:7730	830237	0	True				
ANR	830416	ElseStatement	else		830237	0					
ANR	830417	CompoundStatement		52:10:1160:1160	830237	0					
ANR	830418	ExpressionStatement	buf += * ( args ++ )	369:6:7774:7790	830237	0	True				
ANR	830419	AssignmentExpression	buf += * ( args ++ )		830237	0		+=			
ANR	830420	Identifier	buf		830237	0					
ANR	830421	UnaryOperationExpression	* ( args ++ )		830237	1					
ANR	830422	UnaryOperator	*		830237	0					
ANR	830423	PostIncDecOperationExpression	args ++		830237	1					
ANR	830424	Identifier	args		830237	0					
ANR	830425	IncDec	++		830237	1					
ANR	830426	IfStatement	"if ( * args != '""' )"		830237	3					
ANR	830427	Condition	"* args != '""'"	373:7:7813:7824	830237	0	True				
ANR	830428	EqualityExpression	"* args != '""'"		830237	0		!=			
ANR	830429	UnaryOperationExpression	* args		830237	0					
ANR	830430	UnaryOperator	*		830237	0					
ANR	830431	Identifier	args		830237	1					
ANR	830432	PrimaryExpression	"'""'"		830237	1					
ANR	830433	CompoundStatement		58:5:1228:1240	830237	1					
ANR	830434	IdentifierDeclStatement	MyString msg ;	374:5:7834:7846	830237	0	True				
ANR	830435	IdentifierDecl	msg		830237	0					
ANR	830436	IdentifierDeclType	MyString		830237	0					
ANR	830437	Identifier	msg		830237	1					
ANR	830438	ExpressionStatement	"msg . sprintf ( ""Unterminated quote in windows argument string starting here: %s"" , begin_quote )"	375:5:7853:7943	830237	1	True				
ANR	830439	CallExpression	"msg . sprintf ( ""Unterminated quote in windows argument string starting here: %s"" , begin_quote )"		830237	0					
ANR	830440	Callee	msg . sprintf		830237	0					
ANR	830441	MemberAccess	msg . sprintf		830237	0					
ANR	830442	Identifier	msg		830237	0					
ANR	830443	Identifier	sprintf		830237	1					
ANR	830444	ArgumentList	"""Unterminated quote in windows argument string starting here: %s"""		830237	1					
ANR	830445	Argument	"""Unterminated quote in windows argument string starting here: %s"""		830237	0					
ANR	830446	PrimaryExpression	"""Unterminated quote in windows argument string starting here: %s"""		830237	0					
ANR	830447	Argument	begin_quote		830237	1					
ANR	830448	Identifier	begin_quote		830237	0					
ANR	830449	ExpressionStatement	"AddErrorMessage ( msg . Value ( ) , error_msg )"	376:5:7950:7988	830237	2	True				
ANR	830450	CallExpression	"AddErrorMessage ( msg . Value ( ) , error_msg )"		830237	0					
ANR	830451	Callee	AddErrorMessage		830237	0					
ANR	830452	Identifier	AddErrorMessage		830237	0					
ANR	830453	ArgumentList	msg . Value ( )		830237	1					
ANR	830454	Argument	msg . Value ( )		830237	0					
ANR	830455	CallExpression	msg . Value ( )		830237	0					
ANR	830456	Callee	msg . Value		830237	0					
ANR	830457	MemberAccess	msg . Value		830237	0					
ANR	830458	Identifier	msg		830237	0					
ANR	830459	Identifier	Value		830237	1					
ANR	830460	ArgumentList			830237	1					
ANR	830461	Argument	error_msg		830237	1					
ANR	830462	Identifier	error_msg		830237	0					
ANR	830463	ReturnStatement	return false ;	377:5:7995:8007	830237	3	True				
ANR	830464	Identifier	false		830237	0					
ANR	830465	ExpressionStatement	args ++	379:4:8019:8025	830237	4	True				
ANR	830466	PostIncDecOperationExpression	args ++		830237	0					
ANR	830467	Identifier	args		830237	0					
ANR	830468	IncDec	++		830237	1					
ANR	830469	IfStatement	if ( args > begin_arg )		830237	3					
ANR	830470	Condition	args > begin_arg	382:5:8041:8056	830237	0	True				
ANR	830471	RelationalExpression	args > begin_arg		830237	0		>			
ANR	830472	Identifier	args		830237	0					
ANR	830473	Identifier	begin_arg		830237	1					
ANR	830474	CompoundStatement		66:23:1453:1453	830237	1					
ANR	830475	ExpressionStatement	ASSERT ( args_list . Append ( buf ) )	383:3:8064:8093	830237	0	True				
ANR	830476	CallExpression	ASSERT ( args_list . Append ( buf ) )		830237	0					
ANR	830477	Callee	ASSERT		830237	0					
ANR	830478	Identifier	ASSERT		830237	0					
ANR	830479	ArgumentList	args_list . Append ( buf )		830237	1					
ANR	830480	Argument	args_list . Append ( buf )		830237	0					
ANR	830481	CallExpression	args_list . Append ( buf )		830237	0					
ANR	830482	Callee	args_list . Append		830237	0					
ANR	830483	MemberAccess	args_list . Append		830237	0					
ANR	830484	Identifier	args_list		830237	0					
ANR	830485	Identifier	Append		830237	1					
ANR	830486	ArgumentList	buf		830237	1					
ANR	830487	Argument	buf		830237	0					
ANR	830488	Identifier	buf		830237	0					
ANR	830489	WhileStatement	while ( * args == ' ' || * args == '\\t' || * args == '\\n' || * args == '\\r' )		830237	4					
ANR	830490	Condition	* args == ' ' || * args == '\\t' || * args == '\\n' || * args == '\\r'	385:8:8107:8169	830237	0	True				
ANR	830491	OrExpression	* args == ' ' || * args == '\\t' || * args == '\\n' || * args == '\\r'		830237	0		||			
ANR	830492	EqualityExpression	* args == ' '		830237	0		==			
ANR	830493	UnaryOperationExpression	* args		830237	0					
ANR	830494	UnaryOperator	*		830237	0					
ANR	830495	Identifier	args		830237	1					
ANR	830496	PrimaryExpression	' '		830237	1					
ANR	830497	OrExpression	* args == '\\t' || * args == '\\n' || * args == '\\r'		830237	1		||			
ANR	830498	EqualityExpression	* args == '\\t'		830237	0		==			
ANR	830499	UnaryOperationExpression	* args		830237	0					
ANR	830500	UnaryOperator	*		830237	0					
ANR	830501	Identifier	args		830237	1					
ANR	830502	PrimaryExpression	'\\t'		830237	1					
ANR	830503	OrExpression	* args == '\\n' || * args == '\\r'		830237	1		||			
ANR	830504	EqualityExpression	* args == '\\n'		830237	0		==			
ANR	830505	UnaryOperationExpression	* args		830237	0					
ANR	830506	UnaryOperator	*		830237	0					
ANR	830507	Identifier	args		830237	1					
ANR	830508	PrimaryExpression	'\\n'		830237	1					
ANR	830509	EqualityExpression	* args == '\\r'		830237	1		==			
ANR	830510	UnaryOperationExpression	* args		830237	0					
ANR	830511	UnaryOperator	*		830237	0					
ANR	830512	Identifier	args		830237	1					
ANR	830513	PrimaryExpression	'\\r'		830237	1					
ANR	830514	CompoundStatement		70:2:1568:1568	830237	1					
ANR	830515	ExpressionStatement	args ++	387:3:8179:8185	830237	0	True				
ANR	830516	PostIncDecOperationExpression	args ++		830237	0					
ANR	830517	Identifier	args		830237	0					
ANR	830518	IncDec	++		830237	1					
ANR	830519	ReturnStatement	return true ;	390:1:8195:8206	830237	1	True				
ANR	830520	Identifier	true		830237	0					
ANR	830521	ReturnType	bool		830237	1					
ANR	830522	Identifier	ArgList :: AppendArgsV1Raw_win32		830237	2					
ANR	830523	ParameterList	"char const * args , MyString * error_msg"		830237	3					
ANR	830524	Parameter	char const * args	316:31:6567:6582	830237	0	True				
ANR	830525	ParameterType	char const *		830237	0					
ANR	830526	Identifier	args		830237	1					
ANR	830527	Parameter	MyString * error_msg	316:48:6584:6602	830237	1	True				
ANR	830528	ParameterType	MyString *		830237	0					
ANR	830529	Identifier	error_msg		830237	1					
ANR	830530	CFGEntryNode	ENTRY		830237		True				
ANR	830531	CFGExitNode	EXIT		830237		True				
ANR	830532	Symbol	msg		830237						
ANR	830533	Symbol	args_list		830237						
ANR	830534	Symbol	error_msg		830237						
ANR	830535	Symbol	begin_quote		830237						
ANR	830536	Symbol	false		830237						
ANR	830537	Symbol	* args		830237						
ANR	830538	Symbol	msg . Value		830237						
ANR	830539	Symbol	args		830237						
ANR	830540	Symbol	begin_arg		830237						
ANR	830541	Symbol	buf		830237						
ANR	830542	Symbol	* ( args ++ )		830237						
ANR	830543	Symbol	true		830237						
ANR	830544	Symbol	args_list . Append		830237						
ANR	830545	Symbol	backslashes		830237						
ANR	830546	DeclStmt									
ANR	830547	Decl							MyString	MyString	buf
ANR	830548	DeclStmt									
ANR	830549	Decl							bool	bool	parsed_token
ANR	830550	Function	ArgList :: AppendArgsV1Raw	425:0:8711:10055							
ANR	830551	FunctionDef	"ArgList :: AppendArgsV1Raw (char const * args , MyString * error_msg)"		830550	0					
ANR	830552	CompoundStatement		427:0:8779:10055	830550	0					
ANR	830553	IfStatement	if ( ! args )		830550	0					
ANR	830554	Condition	! args	428:4:8785:8789	830550	0	True				
ANR	830555	UnaryOperationExpression	! args		830550	0					
ANR	830556	UnaryOperator	!		830550	0					
ANR	830557	Identifier	args		830550	1					
ANR	830558	ReturnStatement	return true ;	428:11:8792:8803	830550	1	True				
ANR	830559	Identifier	true		830550	0					
ANR	830560	IfStatement	if ( v1_syntax == WIN32_ARGV1_SYNTAX )		830550	1					
ANR	830561	Condition	v1_syntax == WIN32_ARGV1_SYNTAX	430:4:8810:8840	830550	0	True				
ANR	830562	EqualityExpression	v1_syntax == WIN32_ARGV1_SYNTAX		830550	0		==			
ANR	830563	Identifier	v1_syntax		830550	0					
ANR	830564	Identifier	WIN32_ARGV1_SYNTAX		830550	1					
ANR	830565	CompoundStatement		4:37:63:63	830550	1					
ANR	830566	ReturnStatement	"return AppendArgsV1Raw_win32 ( args , error_msg ) ;"	431:2:8847:8891	830550	0	True				
ANR	830567	CallExpression	"AppendArgsV1Raw_win32 ( args , error_msg )"		830550	0					
ANR	830568	Callee	AppendArgsV1Raw_win32		830550	0					
ANR	830569	Identifier	AppendArgsV1Raw_win32		830550	0					
ANR	830570	ArgumentList	args		830550	1					
ANR	830571	Argument	args		830550	0					
ANR	830572	Identifier	args		830550	0					
ANR	830573	Argument	error_msg		830550	1					
ANR	830574	Identifier	error_msg		830550	0					
ANR	830575	ElseStatement	else		830550	0					
ANR	830576	IfStatement	if ( v1_syntax == UNIX_ARGV1_SYNTAX )		830550	0					
ANR	830577	Condition	v1_syntax == UNIX_ARGV1_SYNTAX	433:9:8905:8934	830550	0	True				
ANR	830578	EqualityExpression	v1_syntax == UNIX_ARGV1_SYNTAX		830550	0		==			
ANR	830579	Identifier	v1_syntax		830550	0					
ANR	830580	Identifier	UNIX_ARGV1_SYNTAX		830550	1					
ANR	830581	CompoundStatement		7:41:157:157	830550	1					
ANR	830582	ReturnStatement	"return AppendArgsV1Raw_unix ( args , error_msg ) ;"	434:2:8941:8984	830550	0	True				
ANR	830583	CallExpression	"AppendArgsV1Raw_unix ( args , error_msg )"		830550	0					
ANR	830584	Callee	AppendArgsV1Raw_unix		830550	0					
ANR	830585	Identifier	AppendArgsV1Raw_unix		830550	0					
ANR	830586	ArgumentList	args		830550	1					
ANR	830587	Argument	args		830550	0					
ANR	830588	Identifier	args		830550	0					
ANR	830589	Argument	error_msg		830550	1					
ANR	830590	Identifier	error_msg		830550	0					
ANR	830591	ElseStatement	else		830550	0					
ANR	830592	IfStatement	if ( v1_syntax == UNKNOWN_ARGV1_SYNTAX )		830550	0					
ANR	830593	Condition	v1_syntax == UNKNOWN_ARGV1_SYNTAX	436:9:8998:9030	830550	0	True				
ANR	830594	EqualityExpression	v1_syntax == UNKNOWN_ARGV1_SYNTAX		830550	0		==			
ANR	830595	Identifier	v1_syntax		830550	0					
ANR	830596	Identifier	UNKNOWN_ARGV1_SYNTAX		830550	1					
ANR	830597	CompoundStatement		10:44:253:253	830550	1					
ANR	830598	ExpressionStatement	input_was_unknown_platform_v1 = true	454:2:9875:9911	830550	0	True				
ANR	830599	AssignmentExpression	input_was_unknown_platform_v1 = true		830550	0		=			
ANR	830600	Identifier	input_was_unknown_platform_v1		830550	0					
ANR	830601	Identifier	true		830550	1					
ANR	830602	ReturnStatement	"return AppendArgsV1Raw_unix ( args , error_msg ) ;"	455:2:9915:9958	830550	1	True				
ANR	830603	CallExpression	"AppendArgsV1Raw_unix ( args , error_msg )"		830550	0					
ANR	830604	Callee	AppendArgsV1Raw_unix		830550	0					
ANR	830605	Identifier	AppendArgsV1Raw_unix		830550	0					
ANR	830606	ArgumentList	args		830550	1					
ANR	830607	Argument	args		830550	0					
ANR	830608	Identifier	args		830550	0					
ANR	830609	Argument	error_msg		830550	1					
ANR	830610	Identifier	error_msg		830550	0					
ANR	830611	ElseStatement	else		830550	0					
ANR	830612	CompoundStatement		31:6:1189:1189	830550	0					
ANR	830613	ExpressionStatement	"EXCEPT ( ""Unexpected v1_syntax=%d in AppendArgsV1Raw"" , v1_syntax )"	458:2:9973:10035	830550	0	True				
ANR	830614	CallExpression	"EXCEPT ( ""Unexpected v1_syntax=%d in AppendArgsV1Raw"" , v1_syntax )"		830550	0					
ANR	830615	Callee	EXCEPT		830550	0					
ANR	830616	Identifier	EXCEPT		830550	0					
ANR	830617	ArgumentList	"""Unexpected v1_syntax=%d in AppendArgsV1Raw"""		830550	1					
ANR	830618	Argument	"""Unexpected v1_syntax=%d in AppendArgsV1Raw"""		830550	0					
ANR	830619	PrimaryExpression	"""Unexpected v1_syntax=%d in AppendArgsV1Raw"""		830550	0					
ANR	830620	Argument	v1_syntax		830550	1					
ANR	830621	Identifier	v1_syntax		830550	0					
ANR	830622	ReturnStatement	return false ;	460:1:10041:10053	830550	2	True				
ANR	830623	Identifier	false		830550	0					
ANR	830624	ReturnType	bool		830550	1					
ANR	830625	Identifier	ArgList :: AppendArgsV1Raw		830550	2					
ANR	830626	ParameterList	"char const * args , MyString * error_msg"		830550	3					
ANR	830627	Parameter	char const * args	426:25:8741:8756	830550	0	True				
ANR	830628	ParameterType	char const *		830550	0					
ANR	830629	Identifier	args		830550	1					
ANR	830630	Parameter	MyString * error_msg	426:42:8758:8776	830550	1	True				
ANR	830631	ParameterType	MyString *		830550	0					
ANR	830632	Identifier	error_msg		830550	1					
ANR	830633	CFGEntryNode	ENTRY		830550		True				
ANR	830634	CFGExitNode	EXIT		830550		True				
ANR	830635	Symbol	args		830550						
ANR	830636	Symbol	input_was_unknown_platform_v1		830550						
ANR	830637	Symbol	error_msg		830550						
ANR	830638	Symbol	AppendArgsV1Raw_win32		830550						
ANR	830639	Symbol	true		830550						
ANR	830640	Symbol	false		830550						
ANR	830641	Symbol	v1_syntax		830550						
ANR	830642	Symbol	UNIX_ARGV1_SYNTAX		830550						
ANR	830643	Symbol	UNKNOWN_ARGV1_SYNTAX		830550						
ANR	830644	Symbol	WIN32_ARGV1_SYNTAX		830550						
ANR	830645	Symbol	AppendArgsV1Raw_unix		830550						
ANR	830646	Function	ArgList :: AppendArgsV2Raw	463:0:10058:10175							
ANR	830647	FunctionDef	"ArgList :: AppendArgsV2Raw (char const * args , MyString * error_msg)"		830646	0					
ANR	830648	CompoundStatement		465:0:10126:10175	830646	0					
ANR	830649	ReturnStatement	"return split_args ( args , & args_list , error_msg ) ;"	466:1:10129:10173	830646	0	True				
ANR	830650	CallExpression	"split_args ( args , & args_list , error_msg )"		830646	0					
ANR	830651	Callee	split_args		830646	0					
ANR	830652	Identifier	split_args		830646	0					
ANR	830653	ArgumentList	args		830646	1					
ANR	830654	Argument	args		830646	0					
ANR	830655	Identifier	args		830646	0					
ANR	830656	Argument	& args_list		830646	1					
ANR	830657	UnaryOperationExpression	& args_list		830646	0					
ANR	830658	UnaryOperator	&		830646	0					
ANR	830659	Identifier	args_list		830646	1					
ANR	830660	Argument	error_msg		830646	2					
ANR	830661	Identifier	error_msg		830646	0					
ANR	830662	ReturnType	bool		830646	1					
ANR	830663	Identifier	ArgList :: AppendArgsV2Raw		830646	2					
ANR	830664	ParameterList	"char const * args , MyString * error_msg"		830646	3					
ANR	830665	Parameter	char const * args	464:25:10088:10103	830646	0	True				
ANR	830666	ParameterType	char const *		830646	0					
ANR	830667	Identifier	args		830646	1					
ANR	830668	Parameter	MyString * error_msg	464:42:10105:10123	830646	1	True				
ANR	830669	ParameterType	MyString *		830646	0					
ANR	830670	Identifier	error_msg		830646	1					
ANR	830671	CFGEntryNode	ENTRY		830646		True				
ANR	830672	CFGExitNode	EXIT		830646		True				
ANR	830673	Symbol	args		830646						
ANR	830674	Symbol	error_msg		830646						
ANR	830675	Symbol	split_args		830646						
ANR	830676	Symbol	& args_list		830646						
ANR	830677	DeclStmt									
ANR	830678	Decl							const char	const char	RAW_V2_ARGS_MARKER
ANR	830679	Function	ArgList :: AppendArgsV1or2Raw	475:0:10460:10692							
ANR	830680	FunctionDef	"ArgList :: AppendArgsV1or2Raw (char const * args , MyString * error_msg)"		830679	0					
ANR	830681	CompoundStatement		477:0:10531:10692	830679	0					
ANR	830682	IfStatement	if ( ! args )		830679	0					
ANR	830683	Condition	! args	478:4:10537:10541	830679	0	True				
ANR	830684	UnaryOperationExpression	! args		830679	0					
ANR	830685	UnaryOperator	!		830679	0					
ANR	830686	Identifier	args		830679	1					
ANR	830687	ReturnStatement	return true ;	478:11:10544:10555	830679	1	True				
ANR	830688	Identifier	true		830679	0					
ANR	830689	IfStatement	if ( * args == RAW_V2_ARGS_MARKER )		830679	1					
ANR	830690	Condition	* args == RAW_V2_ARGS_MARKER	479:4:10561:10587	830679	0	True				
ANR	830691	EqualityExpression	* args == RAW_V2_ARGS_MARKER		830679	0		==			
ANR	830692	UnaryOperationExpression	* args		830679	0					
ANR	830693	UnaryOperator	*		830679	0					
ANR	830694	Identifier	args		830679	1					
ANR	830695	Identifier	RAW_V2_ARGS_MARKER		830679	1					
ANR	830696	CompoundStatement		3:33:58:58	830679	1					
ANR	830697	ReturnStatement	"return AppendArgsV2Raw ( args + 1 , error_msg ) ;"	480:2:10594:10634	830679	0	True				
ANR	830698	CallExpression	"AppendArgsV2Raw ( args + 1 , error_msg )"		830679	0					
ANR	830699	Callee	AppendArgsV2Raw		830679	0					
ANR	830700	Identifier	AppendArgsV2Raw		830679	0					
ANR	830701	ArgumentList	args + 1		830679	1					
ANR	830702	Argument	args + 1		830679	0					
ANR	830703	AdditiveExpression	args + 1		830679	0		+			
ANR	830704	Identifier	args		830679	0					
ANR	830705	PrimaryExpression	1		830679	1					
ANR	830706	Argument	error_msg		830679	1					
ANR	830707	Identifier	error_msg		830679	0					
ANR	830708	ElseStatement	else		830679	0					
ANR	830709	CompoundStatement		6:6:113:113	830679	0					
ANR	830710	ReturnStatement	"return AppendArgsV1Raw ( args , error_msg ) ;"	483:2:10649:10687	830679	0	True				
ANR	830711	CallExpression	"AppendArgsV1Raw ( args , error_msg )"		830679	0					
ANR	830712	Callee	AppendArgsV1Raw		830679	0					
ANR	830713	Identifier	AppendArgsV1Raw		830679	0					
ANR	830714	ArgumentList	args		830679	1					
ANR	830715	Argument	args		830679	0					
ANR	830716	Identifier	args		830679	0					
ANR	830717	Argument	error_msg		830679	1					
ANR	830718	Identifier	error_msg		830679	0					
ANR	830719	ReturnType	bool		830679	1					
ANR	830720	Identifier	ArgList :: AppendArgsV1or2Raw		830679	2					
ANR	830721	ParameterList	"char const * args , MyString * error_msg"		830679	3					
ANR	830722	Parameter	char const * args	476:28:10493:10508	830679	0	True				
ANR	830723	ParameterType	char const *		830679	0					
ANR	830724	Identifier	args		830679	1					
ANR	830725	Parameter	MyString * error_msg	476:45:10510:10528	830679	1	True				
ANR	830726	ParameterType	MyString *		830679	0					
ANR	830727	Identifier	error_msg		830679	1					
ANR	830728	CFGEntryNode	ENTRY		830679		True				
ANR	830729	CFGExitNode	EXIT		830679		True				
ANR	830730	Symbol	args		830679						
ANR	830731	Symbol	AppendArgsV2Raw		830679						
ANR	830732	Symbol	error_msg		830679						
ANR	830733	Symbol	RAW_V2_ARGS_MARKER		830679						
ANR	830734	Symbol	AppendArgsV1Raw		830679						
ANR	830735	Symbol	true		830679						
ANR	830736	Symbol	* args		830679						
ANR	830737	Function	ArgList :: AppendArgsFromArgList	487:0:10695:10948							
ANR	830738	FunctionDef	ArgList :: AppendArgsFromArgList (ArgList const & args)		830737	0					
ANR	830739	CompoundStatement		489:0:10752:10948	830737	0					
ANR	830740	ExpressionStatement	input_was_unknown_platform_v1 = args . input_was_unknown_platform_v1	490:1:10755:10821	830737	0	True				
ANR	830741	AssignmentExpression	input_was_unknown_platform_v1 = args . input_was_unknown_platform_v1		830737	0		=			
ANR	830742	Identifier	input_was_unknown_platform_v1		830737	0					
ANR	830743	MemberAccess	args . input_was_unknown_platform_v1		830737	1					
ANR	830744	Identifier	args		830737	0					
ANR	830745	Identifier	input_was_unknown_platform_v1		830737	1					
ANR	830746	IdentifierDeclStatement	SimpleListIterator < MyString > it ( args . args_list ) ;	492:1:10825:10872	830737	1	True				
ANR	830747	IdentifierDecl	it ( args . args_list )		830737	0					
ANR	830748	IdentifierDeclType	SimpleListIterator < MyString >		830737	0					
ANR	830749	Identifier	it		830737	1					
ANR	830750	MemberAccess	args . args_list		830737	2					
ANR	830751	Identifier	args		830737	0					
ANR	830752	Identifier	args_list		830737	1					
ANR	830753	IdentifierDeclStatement	MyString * arg = NULL ;	493:1:10875:10893	830737	2	True				
ANR	830754	IdentifierDecl	* arg = NULL		830737	0					
ANR	830755	IdentifierDeclType	MyString *		830737	0					
ANR	830756	Identifier	arg		830737	1					
ANR	830757	AssignmentExpression	* arg = NULL		830737	2		=			
ANR	830758	Identifier	NULL		830737	0					
ANR	830759	Identifier	NULL		830737	1					
ANR	830760	WhileStatement	while ( it . Next ( arg ) )		830737	3					
ANR	830761	Condition	it . Next ( arg )	494:7:10902:10913	830737	0	True				
ANR	830762	CallExpression	it . Next ( arg )		830737	0					
ANR	830763	Callee	it . Next		830737	0					
ANR	830764	MemberAccess	it . Next		830737	0					
ANR	830765	Identifier	it		830737	0					
ANR	830766	Identifier	Next		830737	1					
ANR	830767	ArgumentList	arg		830737	1					
ANR	830768	Argument	arg		830737	0					
ANR	830769	Identifier	arg		830737	0					
ANR	830770	CompoundStatement		6:21:163:163	830737	1					
ANR	830771	ExpressionStatement	AppendArg ( arg -> Value ( ) )	495:2:10920:10943	830737	0	True				
ANR	830772	CallExpression	AppendArg ( arg -> Value ( ) )		830737	0					
ANR	830773	Callee	AppendArg		830737	0					
ANR	830774	Identifier	AppendArg		830737	0					
ANR	830775	ArgumentList	arg -> Value ( )		830737	1					
ANR	830776	Argument	arg -> Value ( )		830737	0					
ANR	830777	CallExpression	arg -> Value ( )		830737	0					
ANR	830778	Callee	arg -> Value		830737	0					
ANR	830779	PtrMemberAccess	arg -> Value		830737	0					
ANR	830780	Identifier	arg		830737	0					
ANR	830781	Identifier	Value		830737	1					
ANR	830782	ArgumentList			830737	1					
ANR	830783	ReturnType	void		830737	1					
ANR	830784	Identifier	ArgList :: AppendArgsFromArgList		830737	2					
ANR	830785	ParameterList	ArgList const & args		830737	3					
ANR	830786	Parameter	ArgList const & args	488:31:10731:10749	830737	0	True				
ANR	830787	ParameterType	ArgList const &		830737	0					
ANR	830788	Identifier	args		830737	1					
ANR	830789	CFGEntryNode	ENTRY		830737		True				
ANR	830790	CFGExitNode	EXIT		830737		True				
ANR	830791	Symbol	args		830737						
ANR	830792	Symbol	arg -> Value		830737						
ANR	830793	Symbol	input_was_unknown_platform_v1		830737						
ANR	830794	Symbol	it . Next		830737						
ANR	830795	Symbol	args . input_was_unknown_platform_v1		830737						
ANR	830796	Symbol	NULL		830737						
ANR	830797	Symbol	arg		830737						
ANR	830798	Symbol	it		830737						
ANR	830799	Symbol	* arg		830737						
ANR	830800	Function	ArgList :: GetArgsStringForDisplay	499:0:10951:11321							
ANR	830801	FunctionDef	"ArgList :: GetArgsStringForDisplay (ClassAd const * ad , MyString * result)"		830800	0					
ANR	830802	CompoundStatement		501:0:11025:11321	830800	0					
ANR	830803	IdentifierDeclStatement	char * args1 = NULL ;	502:1:11028:11046	830800	0	True				
ANR	830804	IdentifierDecl	* args1 = NULL		830800	0					
ANR	830805	IdentifierDeclType	char *		830800	0					
ANR	830806	Identifier	args1		830800	1					
ANR	830807	AssignmentExpression	* args1 = NULL		830800	2		=			
ANR	830808	Identifier	NULL		830800	0					
ANR	830809	Identifier	NULL		830800	1					
ANR	830810	IdentifierDeclStatement	char * args2 = NULL ;	503:1:11049:11067	830800	1	True				
ANR	830811	IdentifierDecl	* args2 = NULL		830800	0					
ANR	830812	IdentifierDeclType	char *		830800	0					
ANR	830813	Identifier	args2		830800	1					
ANR	830814	AssignmentExpression	* args2 = NULL		830800	2		=			
ANR	830815	Identifier	NULL		830800	0					
ANR	830816	Identifier	NULL		830800	1					
ANR	830817	ExpressionStatement	ASSERT ( result )	504:1:11070:11084	830800	2	True				
ANR	830818	CallExpression	ASSERT ( result )		830800	0					
ANR	830819	Callee	ASSERT		830800	0					
ANR	830820	Identifier	ASSERT		830800	0					
ANR	830821	ArgumentList	result		830800	1					
ANR	830822	Argument	result		830800	0					
ANR	830823	Identifier	result		830800	0					
ANR	830824	IfStatement	"if ( ad -> LookupString ( ATTR_JOB_ARGUMENTS2 , & args2 ) == 1 )"		830800	3					
ANR	830825	Condition	"ad -> LookupString ( ATTR_JOB_ARGUMENTS2 , & args2 ) == 1"	505:5:11091:11140	830800	0	True				
ANR	830826	EqualityExpression	"ad -> LookupString ( ATTR_JOB_ARGUMENTS2 , & args2 ) == 1"		830800	0		==			
ANR	830827	CallExpression	"ad -> LookupString ( ATTR_JOB_ARGUMENTS2 , & args2 )"		830800	0					
ANR	830828	Callee	ad -> LookupString		830800	0					
ANR	830829	PtrMemberAccess	ad -> LookupString		830800	0					
ANR	830830	Identifier	ad		830800	0					
ANR	830831	Identifier	LookupString		830800	1					
ANR	830832	ArgumentList	ATTR_JOB_ARGUMENTS2		830800	1					
ANR	830833	Argument	ATTR_JOB_ARGUMENTS2		830800	0					
ANR	830834	Identifier	ATTR_JOB_ARGUMENTS2		830800	0					
ANR	830835	Argument	& args2		830800	1					
ANR	830836	UnaryOperationExpression	& args2		830800	0					
ANR	830837	UnaryOperator	&		830800	0					
ANR	830838	Identifier	args2		830800	1					
ANR	830839	PrimaryExpression	1		830800	1					
ANR	830840	CompoundStatement		5:58:118:118	830800	1					
ANR	830841	ExpressionStatement	( * result ) = args2	506:2:11148:11165	830800	0	True				
ANR	830842	AssignmentExpression	( * result ) = args2		830800	0		=			
ANR	830843	UnaryOperationExpression	* result		830800	0					
ANR	830844	UnaryOperator	*		830800	0					
ANR	830845	Identifier	result		830800	1					
ANR	830846	Identifier	args2		830800	1					
ANR	830847	ElseStatement	else		830800	0					
ANR	830848	IfStatement	"if ( ad -> LookupString ( ATTR_JOB_ARGUMENTS1 , & args1 ) == 1 )"		830800	0					
ANR	830849	Condition	"ad -> LookupString ( ATTR_JOB_ARGUMENTS1 , & args1 ) == 1"	508:10:11180:11229	830800	0	True				
ANR	830850	EqualityExpression	"ad -> LookupString ( ATTR_JOB_ARGUMENTS1 , & args1 ) == 1"		830800	0		==			
ANR	830851	CallExpression	"ad -> LookupString ( ATTR_JOB_ARGUMENTS1 , & args1 )"		830800	0					
ANR	830852	Callee	ad -> LookupString		830800	0					
ANR	830853	PtrMemberAccess	ad -> LookupString		830800	0					
ANR	830854	Identifier	ad		830800	0					
ANR	830855	Identifier	LookupString		830800	1					
ANR	830856	ArgumentList	ATTR_JOB_ARGUMENTS1		830800	1					
ANR	830857	Argument	ATTR_JOB_ARGUMENTS1		830800	0					
ANR	830858	Identifier	ATTR_JOB_ARGUMENTS1		830800	0					
ANR	830859	Argument	& args1		830800	1					
ANR	830860	UnaryOperationExpression	& args1		830800	0					
ANR	830861	UnaryOperator	&		830800	0					
ANR	830862	Identifier	args1		830800	1					
ANR	830863	PrimaryExpression	1		830800	1					
ANR	830864	CompoundStatement		8:63:207:207	830800	1					
ANR	830865	ExpressionStatement	( * result ) = args1	509:2:11237:11254	830800	0	True				
ANR	830866	AssignmentExpression	( * result ) = args1		830800	0		=			
ANR	830867	UnaryOperationExpression	* result		830800	0					
ANR	830868	UnaryOperator	*		830800	0					
ANR	830869	Identifier	result		830800	1					
ANR	830870	Identifier	args1		830800	1					
ANR	830871	IfStatement	if ( args1 )		830800	4					
ANR	830872	Condition	args1	511:4:11263:11267	830800	0	True				
ANR	830873	Identifier	args1		830800	0					
ANR	830874	CompoundStatement		11:11:244:244	830800	1					
ANR	830875	ExpressionStatement	free ( args1 )	512:2:11274:11285	830800	0	True				
ANR	830876	CallExpression	free ( args1 )		830800	0					
ANR	830877	Callee	free		830800	0					
ANR	830878	Identifier	free		830800	0					
ANR	830879	ArgumentList	args1		830800	1					
ANR	830880	Argument	args1		830800	0					
ANR	830881	Identifier	args1		830800	0					
ANR	830882	IfStatement	if ( args2 )		830800	5					
ANR	830883	Condition	args2	514:4:11294:11298	830800	0	True				
ANR	830884	Identifier	args2		830800	0					
ANR	830885	CompoundStatement		14:11:275:275	830800	1					
ANR	830886	ExpressionStatement	free ( args2 )	515:2:11305:11316	830800	0	True				
ANR	830887	CallExpression	free ( args2 )		830800	0					
ANR	830888	Callee	free		830800	0					
ANR	830889	Identifier	free		830800	0					
ANR	830890	ArgumentList	args2		830800	1					
ANR	830891	Argument	args2		830800	0					
ANR	830892	Identifier	args2		830800	0					
ANR	830893	ReturnType	void		830800	1					
ANR	830894	Identifier	ArgList :: GetArgsStringForDisplay		830800	2					
ANR	830895	ParameterList	"ClassAd const * ad , MyString * result"		830800	3					
ANR	830896	Parameter	ClassAd const * ad	500:33:10989:11005	830800	0	True				
ANR	830897	ParameterType	ClassAd const *		830800	0					
ANR	830898	Identifier	ad		830800	1					
ANR	830899	Parameter	MyString * result	500:51:11007:11022	830800	1	True				
ANR	830900	ParameterType	MyString *		830800	0					
ANR	830901	Identifier	result		830800	1					
ANR	830902	CFGEntryNode	ENTRY		830800		True				
ANR	830903	CFGExitNode	EXIT		830800		True				
ANR	830904	Symbol	result		830800						
ANR	830905	Symbol	ad -> LookupString		830800						
ANR	830906	Symbol	ad		830800						
ANR	830907	Symbol	NULL		830800						
ANR	830908	Symbol	* result		830800						
ANR	830909	Symbol	args1		830800						
ANR	830910	Symbol	args2		830800						
ANR	830911	Symbol	* ad		830800						
ANR	830912	Symbol	ATTR_JOB_ARGUMENTS2		830800						
ANR	830913	Symbol	ATTR_JOB_ARGUMENTS1		830800						
ANR	830914	Symbol	& args1		830800						
ANR	830915	Symbol	& args2		830800						
ANR	830916	Function	ArgList :: AppendArgsFromClassAd	519:0:11324:11963							
ANR	830917	FunctionDef	"ArgList :: AppendArgsFromClassAd (ClassAd const * ad , MyString * error_msg)"		830916	0					
ANR	830918	CompoundStatement		521:0:11399:11963	830916	0					
ANR	830919	IdentifierDeclStatement	char * args1 = NULL ;	522:1:11402:11420	830916	0	True				
ANR	830920	IdentifierDecl	* args1 = NULL		830916	0					
ANR	830921	IdentifierDeclType	char *		830916	0					
ANR	830922	Identifier	args1		830916	1					
ANR	830923	AssignmentExpression	* args1 = NULL		830916	2		=			
ANR	830924	Identifier	NULL		830916	0					
ANR	830925	Identifier	NULL		830916	1					
ANR	830926	IdentifierDeclStatement	char * args2 = NULL ;	523:1:11423:11441	830916	1	True				
ANR	830927	IdentifierDecl	* args2 = NULL		830916	0					
ANR	830928	IdentifierDeclType	char *		830916	0					
ANR	830929	Identifier	args2		830916	1					
ANR	830930	AssignmentExpression	* args2 = NULL		830916	2		=			
ANR	830931	Identifier	NULL		830916	0					
ANR	830932	Identifier	NULL		830916	1					
ANR	830933	IdentifierDeclStatement	bool success = false ;	524:1:11444:11464	830916	2	True				
ANR	830934	IdentifierDecl	success = false		830916	0					
ANR	830935	IdentifierDeclType	bool		830916	0					
ANR	830936	Identifier	success		830916	1					
ANR	830937	AssignmentExpression	success = false		830916	2		=			
ANR	830938	Identifier	false		830916	0					
ANR	830939	Identifier	false		830916	1					
ANR	830940	IfStatement	"if ( ad -> LookupString ( ATTR_JOB_ARGUMENTS2 , & args2 ) == 1 )"		830916	3					
ANR	830941	Condition	"ad -> LookupString ( ATTR_JOB_ARGUMENTS2 , & args2 ) == 1"	526:5:11472:11521	830916	0	True				
ANR	830942	EqualityExpression	"ad -> LookupString ( ATTR_JOB_ARGUMENTS2 , & args2 ) == 1"		830916	0		==			
ANR	830943	CallExpression	"ad -> LookupString ( ATTR_JOB_ARGUMENTS2 , & args2 )"		830916	0					
ANR	830944	Callee	ad -> LookupString		830916	0					
ANR	830945	PtrMemberAccess	ad -> LookupString		830916	0					
ANR	830946	Identifier	ad		830916	0					
ANR	830947	Identifier	LookupString		830916	1					
ANR	830948	ArgumentList	ATTR_JOB_ARGUMENTS2		830916	1					
ANR	830949	Argument	ATTR_JOB_ARGUMENTS2		830916	0					
ANR	830950	Identifier	ATTR_JOB_ARGUMENTS2		830916	0					
ANR	830951	Argument	& args2		830916	1					
ANR	830952	UnaryOperationExpression	& args2		830916	0					
ANR	830953	UnaryOperator	&		830916	0					
ANR	830954	Identifier	args2		830916	1					
ANR	830955	PrimaryExpression	1		830916	1					
ANR	830956	CompoundStatement		6:58:125:125	830916	1					
ANR	830957	ExpressionStatement	"success = AppendArgsV2Raw ( args2 , error_msg )"	527:2:11529:11571	830916	0	True				
ANR	830958	AssignmentExpression	"success = AppendArgsV2Raw ( args2 , error_msg )"		830916	0		=			
ANR	830959	Identifier	success		830916	0					
ANR	830960	CallExpression	"AppendArgsV2Raw ( args2 , error_msg )"		830916	1					
ANR	830961	Callee	AppendArgsV2Raw		830916	0					
ANR	830962	Identifier	AppendArgsV2Raw		830916	0					
ANR	830963	ArgumentList	args2		830916	1					
ANR	830964	Argument	args2		830916	0					
ANR	830965	Identifier	args2		830916	0					
ANR	830966	Argument	error_msg		830916	1					
ANR	830967	Identifier	error_msg		830916	0					
ANR	830968	ElseStatement	else		830916	0					
ANR	830969	IfStatement	"if ( ad -> LookupString ( ATTR_JOB_ARGUMENTS1 , & args1 ) == 1 )"		830916	0					
ANR	830970	Condition	"ad -> LookupString ( ATTR_JOB_ARGUMENTS1 , & args1 ) == 1"	529:10:11586:11635	830916	0	True				
ANR	830971	EqualityExpression	"ad -> LookupString ( ATTR_JOB_ARGUMENTS1 , & args1 ) == 1"		830916	0		==			
ANR	830972	CallExpression	"ad -> LookupString ( ATTR_JOB_ARGUMENTS1 , & args1 )"		830916	0					
ANR	830973	Callee	ad -> LookupString		830916	0					
ANR	830974	PtrMemberAccess	ad -> LookupString		830916	0					
ANR	830975	Identifier	ad		830916	0					
ANR	830976	Identifier	LookupString		830916	1					
ANR	830977	ArgumentList	ATTR_JOB_ARGUMENTS1		830916	1					
ANR	830978	Argument	ATTR_JOB_ARGUMENTS1		830916	0					
ANR	830979	Identifier	ATTR_JOB_ARGUMENTS1		830916	0					
ANR	830980	Argument	& args1		830916	1					
ANR	830981	UnaryOperationExpression	& args1		830916	0					
ANR	830982	UnaryOperator	&		830916	0					
ANR	830983	Identifier	args1		830916	1					
ANR	830984	PrimaryExpression	1		830916	1					
ANR	830985	CompoundStatement		9:63:239:239	830916	1					
ANR	830986	ExpressionStatement	"success = AppendArgsV1Raw ( args1 , error_msg )"	530:2:11643:11685	830916	0	True				
ANR	830987	AssignmentExpression	"success = AppendArgsV1Raw ( args1 , error_msg )"		830916	0		=			
ANR	830988	Identifier	success		830916	0					
ANR	830989	CallExpression	"AppendArgsV1Raw ( args1 , error_msg )"		830916	1					
ANR	830990	Callee	AppendArgsV1Raw		830916	0					
ANR	830991	Identifier	AppendArgsV1Raw		830916	0					
ANR	830992	ArgumentList	args1		830916	1					
ANR	830993	Argument	args1		830916	0					
ANR	830994	Identifier	args1		830916	0					
ANR	830995	Argument	error_msg		830916	1					
ANR	830996	Identifier	error_msg		830916	0					
ANR	830997	ElseStatement	else		830916	0					
ANR	830998	CompoundStatement		12:6:296:296	830916	0					
ANR	830999	ExpressionStatement	success = true	536:2:11877:11891	830916	0	True				
ANR	831000	AssignmentExpression	success = true		830916	0		=			
ANR	831001	Identifier	success		830916	0					
ANR	831002	Identifier	true		830916	1					
ANR	831003	IfStatement	if ( args1 )		830916	4					
ANR	831004	Condition	args1	539:4:11901:11905	830916	0	True				
ANR	831005	Identifier	args1		830916	0					
ANR	831006	ExpressionStatement	free ( args1 )	539:11:11908:11919	830916	1	True				
ANR	831007	CallExpression	free ( args1 )		830916	0					
ANR	831008	Callee	free		830916	0					
ANR	831009	Identifier	free		830916	0					
ANR	831010	ArgumentList	args1		830916	1					
ANR	831011	Argument	args1		830916	0					
ANR	831012	Identifier	args1		830916	0					
ANR	831013	IfStatement	if ( args2 )		830916	5					
ANR	831014	Condition	args2	540:4:11925:11929	830916	0	True				
ANR	831015	Identifier	args2		830916	0					
ANR	831016	ExpressionStatement	free ( args2 )	540:11:11932:11943	830916	1	True				
ANR	831017	CallExpression	free ( args2 )		830916	0					
ANR	831018	Callee	free		830916	0					
ANR	831019	Identifier	free		830916	0					
ANR	831020	ArgumentList	args2		830916	1					
ANR	831021	Argument	args2		830916	0					
ANR	831022	Identifier	args2		830916	0					
ANR	831023	ReturnStatement	return success ;	542:1:11947:11961	830916	6	True				
ANR	831024	Identifier	success		830916	0					
ANR	831025	ReturnType	bool		830916	1					
ANR	831026	Identifier	ArgList :: AppendArgsFromClassAd		830916	2					
ANR	831027	ParameterList	"ClassAd const * ad , MyString * error_msg"		830916	3					
ANR	831028	Parameter	ClassAd const * ad	520:31:11360:11376	830916	0	True				
ANR	831029	ParameterType	ClassAd const *		830916	0					
ANR	831030	Identifier	ad		830916	1					
ANR	831031	Parameter	MyString * error_msg	520:49:11378:11396	830916	1	True				
ANR	831032	ParameterType	MyString *		830916	0					
ANR	831033	Identifier	error_msg		830916	1					
ANR	831034	CFGEntryNode	ENTRY		830916		True				
ANR	831035	CFGExitNode	EXIT		830916		True				
ANR	831036	Symbol	ad -> LookupString		830916						
ANR	831037	Symbol	AppendArgsV2Raw		830916						
ANR	831038	Symbol	ad		830916						
ANR	831039	Symbol	error_msg		830916						
ANR	831040	Symbol	NULL		830916						
ANR	831041	Symbol	AppendArgsV1Raw		830916						
ANR	831042	Symbol	false		830916						
ANR	831043	Symbol	ATTR_JOB_ARGUMENTS2		830916						
ANR	831044	Symbol	* ad		830916						
ANR	831045	Symbol	ATTR_JOB_ARGUMENTS1		830916						
ANR	831046	Symbol	& args1		830916						
ANR	831047	Symbol	& args2		830916						
ANR	831048	Symbol	success		830916						
ANR	831049	Symbol	args1		830916						
ANR	831050	Symbol	true		830916						
ANR	831051	Symbol	args2		830916						
ANR	831052	Function	ArgList :: CondorVersionRequiresV1	545:0:11966:12132							
ANR	831053	FunctionDef	ArgList :: CondorVersionRequiresV1 (CondorVersionInfo const & condor_version)		831052	0					
ANR	831054	CompoundStatement		547:0:12045:12132	831052	0					
ANR	831055	ReturnStatement	"return ! condor_version . built_since_version ( 6 , 7 , 15 ) ;"	549:1:12080:12130	831052	0	True				
ANR	831056	UnaryOperationExpression	"! condor_version . built_since_version ( 6 , 7 , 15 )"		831052	0					
ANR	831057	UnaryOperator	!		831052	0					
ANR	831058	CallExpression	"condor_version . built_since_version ( 6 , 7 , 15 )"		831052	1					
ANR	831059	Callee	condor_version . built_since_version		831052	0					
ANR	831060	MemberAccess	condor_version . built_since_version		831052	0					
ANR	831061	Identifier	condor_version		831052	0					
ANR	831062	Identifier	built_since_version		831052	1					
ANR	831063	ArgumentList	6		831052	1					
ANR	831064	Argument	6		831052	0					
ANR	831065	PrimaryExpression	6		831052	0					
ANR	831066	Argument	7		831052	1					
ANR	831067	PrimaryExpression	7		831052	0					
ANR	831068	Argument	15		831052	2					
ANR	831069	PrimaryExpression	15		831052	0					
ANR	831070	ReturnType	bool		831052	1					
ANR	831071	Identifier	ArgList :: CondorVersionRequiresV1		831052	2					
ANR	831072	ParameterList	CondorVersionInfo const & condor_version		831052	3					
ANR	831073	Parameter	CondorVersionInfo const & condor_version	546:33:12004:12042	831052	0	True				
ANR	831074	ParameterType	CondorVersionInfo const &		831052	0					
ANR	831075	Identifier	condor_version		831052	1					
ANR	831076	CFGEntryNode	ENTRY		831052		True				
ANR	831077	CFGExitNode	EXIT		831052		True				
ANR	831078	Symbol	condor_version		831052						
ANR	831079	Symbol	condor_version . built_since_version		831052						
ANR	831080	Function	ArgList :: InsertArgsIntoClassAd	552:0:12135:14306							
ANR	831081	FunctionDef	"ArgList :: InsertArgsIntoClassAd (ClassAd * ad , CondorVersionInfo * condor_version , MyString * error_msg)"		831080	0					
ANR	831082	CompoundStatement		554:0:12238:14306	831080	0					
ANR	831083	IdentifierDeclStatement	bool has_args1 = ad -> LookupExpr ( ATTR_JOB_ARGUMENTS1 ) != NULL ;	555:1:12241:12301	831080	0	True				
ANR	831084	IdentifierDecl	has_args1 = ad -> LookupExpr ( ATTR_JOB_ARGUMENTS1 ) != NULL		831080	0					
ANR	831085	IdentifierDeclType	bool		831080	0					
ANR	831086	Identifier	has_args1		831080	1					
ANR	831087	AssignmentExpression	has_args1 = ad -> LookupExpr ( ATTR_JOB_ARGUMENTS1 ) != NULL		831080	2		=			
ANR	831088	Identifier	has_args1		831080	0					
ANR	831089	EqualityExpression	ad -> LookupExpr ( ATTR_JOB_ARGUMENTS1 ) != NULL		831080	1		!=			
ANR	831090	CallExpression	ad -> LookupExpr ( ATTR_JOB_ARGUMENTS1 )		831080	0					
ANR	831091	Callee	ad -> LookupExpr		831080	0					
ANR	831092	PtrMemberAccess	ad -> LookupExpr		831080	0					
ANR	831093	Identifier	ad		831080	0					
ANR	831094	Identifier	LookupExpr		831080	1					
ANR	831095	ArgumentList	ATTR_JOB_ARGUMENTS1		831080	1					
ANR	831096	Argument	ATTR_JOB_ARGUMENTS1		831080	0					
ANR	831097	Identifier	ATTR_JOB_ARGUMENTS1		831080	0					
ANR	831098	Identifier	NULL		831080	1					
ANR	831099	IdentifierDeclStatement	bool has_args2 = ad -> LookupExpr ( ATTR_JOB_ARGUMENTS2 ) != NULL ;	556:1:12304:12364	831080	1	True				
ANR	831100	IdentifierDecl	has_args2 = ad -> LookupExpr ( ATTR_JOB_ARGUMENTS2 ) != NULL		831080	0					
ANR	831101	IdentifierDeclType	bool		831080	0					
ANR	831102	Identifier	has_args2		831080	1					
ANR	831103	AssignmentExpression	has_args2 = ad -> LookupExpr ( ATTR_JOB_ARGUMENTS2 ) != NULL		831080	2		=			
ANR	831104	Identifier	has_args2		831080	0					
ANR	831105	EqualityExpression	ad -> LookupExpr ( ATTR_JOB_ARGUMENTS2 ) != NULL		831080	1		!=			
ANR	831106	CallExpression	ad -> LookupExpr ( ATTR_JOB_ARGUMENTS2 )		831080	0					
ANR	831107	Callee	ad -> LookupExpr		831080	0					
ANR	831108	PtrMemberAccess	ad -> LookupExpr		831080	0					
ANR	831109	Identifier	ad		831080	0					
ANR	831110	Identifier	LookupExpr		831080	1					
ANR	831111	ArgumentList	ATTR_JOB_ARGUMENTS2		831080	1					
ANR	831112	Argument	ATTR_JOB_ARGUMENTS2		831080	0					
ANR	831113	Identifier	ATTR_JOB_ARGUMENTS2		831080	0					
ANR	831114	Identifier	NULL		831080	1					
ANR	831115	IdentifierDeclStatement	bool requires_v1 = false ;	558:1:12368:12392	831080	2	True				
ANR	831116	IdentifierDecl	requires_v1 = false		831080	0					
ANR	831117	IdentifierDeclType	bool		831080	0					
ANR	831118	Identifier	requires_v1		831080	1					
ANR	831119	AssignmentExpression	requires_v1 = false		831080	2		=			
ANR	831120	Identifier	false		831080	0					
ANR	831121	Identifier	false		831080	1					
ANR	831122	IdentifierDeclStatement	bool condor_version_requires_v1 = false ;	559:1:12395:12434	831080	3	True				
ANR	831123	IdentifierDecl	condor_version_requires_v1 = false		831080	0					
ANR	831124	IdentifierDeclType	bool		831080	0					
ANR	831125	Identifier	condor_version_requires_v1		831080	1					
ANR	831126	AssignmentExpression	condor_version_requires_v1 = false		831080	2		=			
ANR	831127	Identifier	false		831080	0					
ANR	831128	Identifier	false		831080	1					
ANR	831129	IfStatement	if ( condor_version )		831080	4					
ANR	831130	Condition	condor_version	560:4:12440:12453	831080	0	True				
ANR	831131	Identifier	condor_version		831080	0					
ANR	831132	CompoundStatement		7:20:217:217	831080	1					
ANR	831133	ExpressionStatement	requires_v1 = CondorVersionRequiresV1 ( * condor_version )	561:2:12460:12514	831080	0	True				
ANR	831134	AssignmentExpression	requires_v1 = CondorVersionRequiresV1 ( * condor_version )		831080	0		=			
ANR	831135	Identifier	requires_v1		831080	0					
ANR	831136	CallExpression	CondorVersionRequiresV1 ( * condor_version )		831080	1					
ANR	831137	Callee	CondorVersionRequiresV1		831080	0					
ANR	831138	Identifier	CondorVersionRequiresV1		831080	0					
ANR	831139	ArgumentList	* condor_version		831080	1					
ANR	831140	Argument	* condor_version		831080	0					
ANR	831141	UnaryOperationExpression	* condor_version		831080	0					
ANR	831142	UnaryOperator	*		831080	0					
ANR	831143	Identifier	condor_version		831080	1					
ANR	831144	ExpressionStatement	condor_version_requires_v1 = true	562:2:12518:12551	831080	1	True				
ANR	831145	AssignmentExpression	condor_version_requires_v1 = true		831080	0		=			
ANR	831146	Identifier	condor_version_requires_v1		831080	0					
ANR	831147	Identifier	true		831080	1					
ANR	831148	ElseStatement	else		831080	0					
ANR	831149	IfStatement	if ( input_was_unknown_platform_v1 )		831080	0					
ANR	831150	Condition	input_was_unknown_platform_v1	564:9:12565:12593	831080	0	True				
ANR	831151	Identifier	input_was_unknown_platform_v1		831080	0					
ANR	831152	CompoundStatement		11:40:357:357	831080	1					
ANR	831153	ExpressionStatement	requires_v1 = true	565:2:12600:12618	831080	0	True				
ANR	831154	AssignmentExpression	requires_v1 = true		831080	0		=			
ANR	831155	Identifier	requires_v1		831080	0					
ANR	831156	Identifier	true		831080	1					
ANR	831157	IfStatement	if ( ! requires_v1 )		831080	5					
ANR	831158	Condition	! requires_v1	568:5:12629:12640	831080	0	True				
ANR	831159	UnaryOperationExpression	! requires_v1		831080	0					
ANR	831160	UnaryOperator	!		831080	0					
ANR	831161	Identifier	requires_v1		831080	1					
ANR	831162	CompoundStatement		17:2:410:424	831080	1					
ANR	831163	IdentifierDeclStatement	MyString args2 ;	570:2:12649:12663	831080	0	True				
ANR	831164	IdentifierDecl	args2		831080	0					
ANR	831165	IdentifierDeclType	MyString		831080	0					
ANR	831166	Identifier	args2		831080	1					
ANR	831167	IfStatement	"if ( ! GetArgsStringV2Raw ( & args2 , error_msg ) )"		831080	1					
ANR	831168	Condition	"! GetArgsStringV2Raw ( & args2 , error_msg )"	571:5:12670:12706	831080	0	True				
ANR	831169	UnaryOperationExpression	"! GetArgsStringV2Raw ( & args2 , error_msg )"		831080	0					
ANR	831170	UnaryOperator	!		831080	0					
ANR	831171	CallExpression	"GetArgsStringV2Raw ( & args2 , error_msg )"		831080	1					
ANR	831172	Callee	GetArgsStringV2Raw		831080	0					
ANR	831173	Identifier	GetArgsStringV2Raw		831080	0					
ANR	831174	ArgumentList	& args2		831080	1					
ANR	831175	Argument	& args2		831080	0					
ANR	831176	UnaryOperationExpression	& args2		831080	0					
ANR	831177	UnaryOperator	&		831080	0					
ANR	831178	Identifier	args2		831080	1					
ANR	831179	Argument	error_msg		831080	1					
ANR	831180	Identifier	error_msg		831080	0					
ANR	831181	ReturnStatement	return false ;	571:44:12709:12721	831080	1	True				
ANR	831182	Identifier	false		831080	0					
ANR	831183	ExpressionStatement	"ad -> Assign ( ATTR_JOB_ARGUMENTS2 , args2 . Value ( ) )"	572:2:12725:12770	831080	2	True				
ANR	831184	CallExpression	"ad -> Assign ( ATTR_JOB_ARGUMENTS2 , args2 . Value ( ) )"		831080	0					
ANR	831185	Callee	ad -> Assign		831080	0					
ANR	831186	PtrMemberAccess	ad -> Assign		831080	0					
ANR	831187	Identifier	ad		831080	0					
ANR	831188	Identifier	Assign		831080	1					
ANR	831189	ArgumentList	ATTR_JOB_ARGUMENTS2		831080	1					
ANR	831190	Argument	ATTR_JOB_ARGUMENTS2		831080	0					
ANR	831191	Identifier	ATTR_JOB_ARGUMENTS2		831080	0					
ANR	831192	Argument	args2 . Value ( )		831080	1					
ANR	831193	CallExpression	args2 . Value ( )		831080	0					
ANR	831194	Callee	args2 . Value		831080	0					
ANR	831195	MemberAccess	args2 . Value		831080	0					
ANR	831196	Identifier	args2		831080	0					
ANR	831197	Identifier	Value		831080	1					
ANR	831198	ArgumentList			831080	1					
ANR	831199	ElseStatement	else		831080	0					
ANR	831200	IfStatement	if ( has_args2 )		831080	0					
ANR	831201	Condition	has_args2	574:9:12784:12792	831080	0	True				
ANR	831202	Identifier	has_args2		831080	0					
ANR	831203	CompoundStatement		21:20:556:556	831080	1					
ANR	831204	ExpressionStatement	ad -> Delete ( ATTR_JOB_ARGUMENTS2 )	575:2:12799:12830	831080	0	True				
ANR	831205	CallExpression	ad -> Delete ( ATTR_JOB_ARGUMENTS2 )		831080	0					
ANR	831206	Callee	ad -> Delete		831080	0					
ANR	831207	PtrMemberAccess	ad -> Delete		831080	0					
ANR	831208	Identifier	ad		831080	0					
ANR	831209	Identifier	Delete		831080	1					
ANR	831210	ArgumentList	ATTR_JOB_ARGUMENTS2		831080	1					
ANR	831211	Argument	ATTR_JOB_ARGUMENTS2		831080	0					
ANR	831212	Identifier	ATTR_JOB_ARGUMENTS2		831080	0					
ANR	831213	IfStatement	if ( requires_v1 )		831080	6					
ANR	831214	Condition	requires_v1	578:4:12840:12850	831080	0	True				
ANR	831215	Identifier	requires_v1		831080	0					
ANR	831216	CompoundStatement		26:2:618:632	831080	1					
ANR	831217	IdentifierDeclStatement	MyString args1 ;	579:2:12857:12871	831080	0	True				
ANR	831218	IdentifierDecl	args1		831080	0					
ANR	831219	IdentifierDeclType	MyString		831080	0					
ANR	831220	Identifier	args1		831080	1					
ANR	831221	IfStatement	"if ( GetArgsStringV1Raw ( & args1 , error_msg ) )"		831080	1					
ANR	831222	Condition	"GetArgsStringV1Raw ( & args1 , error_msg )"	581:5:12879:12914	831080	0	True				
ANR	831223	CallExpression	"GetArgsStringV1Raw ( & args1 , error_msg )"		831080	0					
ANR	831224	Callee	GetArgsStringV1Raw		831080	0					
ANR	831225	Identifier	GetArgsStringV1Raw		831080	0					
ANR	831226	ArgumentList	& args1		831080	1					
ANR	831227	Argument	& args1		831080	0					
ANR	831228	UnaryOperationExpression	& args1		831080	0					
ANR	831229	UnaryOperator	&		831080	0					
ANR	831230	Identifier	args1		831080	1					
ANR	831231	Argument	error_msg		831080	1					
ANR	831232	Identifier	error_msg		831080	0					
ANR	831233	CompoundStatement		28:43:678:678	831080	1					
ANR	831234	ExpressionStatement	"ad -> Assign ( ATTR_JOB_ARGUMENTS1 , args1 . Value ( ) )"	582:3:12922:12967	831080	0	True				
ANR	831235	CallExpression	"ad -> Assign ( ATTR_JOB_ARGUMENTS1 , args1 . Value ( ) )"		831080	0					
ANR	831236	Callee	ad -> Assign		831080	0					
ANR	831237	PtrMemberAccess	ad -> Assign		831080	0					
ANR	831238	Identifier	ad		831080	0					
ANR	831239	Identifier	Assign		831080	1					
ANR	831240	ArgumentList	ATTR_JOB_ARGUMENTS1		831080	1					
ANR	831241	Argument	ATTR_JOB_ARGUMENTS1		831080	0					
ANR	831242	Identifier	ATTR_JOB_ARGUMENTS1		831080	0					
ANR	831243	Argument	args1 . Value ( )		831080	1					
ANR	831244	CallExpression	args1 . Value ( )		831080	0					
ANR	831245	Callee	args1 . Value		831080	0					
ANR	831246	MemberAccess	args1 . Value		831080	0					
ANR	831247	Identifier	args1		831080	0					
ANR	831248	Identifier	Value		831080	1					
ANR	831249	ArgumentList			831080	1					
ANR	831250	ElseStatement	else		831080	0					
ANR	831251	CompoundStatement		31:7:741:741	831080	0					
ANR	831252	IfStatement	if ( condor_version_requires_v1 && ! input_was_unknown_platform_v1 )		831080	0					
ANR	831253	Condition	condor_version_requires_v1 && ! input_was_unknown_platform_v1	585:6:12988:13047	831080	0	True				
ANR	831254	AndExpression	condor_version_requires_v1 && ! input_was_unknown_platform_v1		831080	0		&&			
ANR	831255	Identifier	condor_version_requires_v1		831080	0					
ANR	831256	UnaryOperationExpression	! input_was_unknown_platform_v1		831080	1					
ANR	831257	UnaryOperator	!		831080	0					
ANR	831258	Identifier	input_was_unknown_platform_v1		831080	1					
ANR	831259	CompoundStatement		32:68:811:811	831080	1					
ANR	831260	ExpressionStatement	ad -> Delete ( ATTR_JOB_ARGUMENTS1 )	601:4:13789:13820	831080	0	True				
ANR	831261	CallExpression	ad -> Delete ( ATTR_JOB_ARGUMENTS1 )		831080	0					
ANR	831262	Callee	ad -> Delete		831080	0					
ANR	831263	PtrMemberAccess	ad -> Delete		831080	0					
ANR	831264	Identifier	ad		831080	0					
ANR	831265	Identifier	Delete		831080	1					
ANR	831266	ArgumentList	ATTR_JOB_ARGUMENTS1		831080	1					
ANR	831267	Argument	ATTR_JOB_ARGUMENTS1		831080	0					
ANR	831268	Identifier	ATTR_JOB_ARGUMENTS1		831080	0					
ANR	831269	ExpressionStatement	ad -> Delete ( ATTR_JOB_ARGUMENTS2 )	602:4:13826:13857	831080	1	True				
ANR	831270	CallExpression	ad -> Delete ( ATTR_JOB_ARGUMENTS2 )		831080	0					
ANR	831271	Callee	ad -> Delete		831080	0					
ANR	831272	PtrMemberAccess	ad -> Delete		831080	0					
ANR	831273	Identifier	ad		831080	0					
ANR	831274	Identifier	Delete		831080	1					
ANR	831275	ArgumentList	ATTR_JOB_ARGUMENTS2		831080	1					
ANR	831276	Argument	ATTR_JOB_ARGUMENTS2		831080	0					
ANR	831277	Identifier	ATTR_JOB_ARGUMENTS2		831080	0					
ANR	831278	IfStatement	if ( error_msg )		831080	2					
ANR	831279	Condition	error_msg	603:7:13866:13874	831080	0	True				
ANR	831280	Identifier	error_msg		831080	0					
ANR	831281	CompoundStatement		50:18:1638:1638	831080	1					
ANR	831282	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Failed to convert arguments to V1 syntax: %s\\n"" , error_msg -> Value ( ) )"	604:5:13884:13972	831080	0	True				
ANR	831283	CallExpression	"dprintf ( D_FULLDEBUG , ""Failed to convert arguments to V1 syntax: %s\\n"" , error_msg -> Value ( ) )"		831080	0					
ANR	831284	Callee	dprintf		831080	0					
ANR	831285	Identifier	dprintf		831080	0					
ANR	831286	ArgumentList	D_FULLDEBUG		831080	1					
ANR	831287	Argument	D_FULLDEBUG		831080	0					
ANR	831288	Identifier	D_FULLDEBUG		831080	0					
ANR	831289	Argument	"""Failed to convert arguments to V1 syntax: %s\\n"""		831080	1					
ANR	831290	PrimaryExpression	"""Failed to convert arguments to V1 syntax: %s\\n"""		831080	0					
ANR	831291	Argument	error_msg -> Value ( )		831080	2					
ANR	831292	CallExpression	error_msg -> Value ( )		831080	0					
ANR	831293	Callee	error_msg -> Value		831080	0					
ANR	831294	PtrMemberAccess	error_msg -> Value		831080	0					
ANR	831295	Identifier	error_msg		831080	0					
ANR	831296	Identifier	Value		831080	1					
ANR	831297	ArgumentList			831080	1					
ANR	831298	ElseStatement	else		831080	0					
ANR	831299	CompoundStatement		54:8:1754:1754	831080	0					
ANR	831300	ExpressionStatement	"AddErrorMessage ( ""Failed to convert arguments to V1 syntax."" , error_msg )"	611:4:14130:14200	831080	0	True				
ANR	831301	CallExpression	"AddErrorMessage ( ""Failed to convert arguments to V1 syntax."" , error_msg )"		831080	0					
ANR	831302	Callee	AddErrorMessage		831080	0					
ANR	831303	Identifier	AddErrorMessage		831080	0					
ANR	831304	ArgumentList	"""Failed to convert arguments to V1 syntax."""		831080	1					
ANR	831305	Argument	"""Failed to convert arguments to V1 syntax."""		831080	0					
ANR	831306	PrimaryExpression	"""Failed to convert arguments to V1 syntax."""		831080	0					
ANR	831307	Argument	error_msg		831080	1					
ANR	831308	Identifier	error_msg		831080	0					
ANR	831309	ReturnStatement	return false ;	612:4:14206:14218	831080	1	True				
ANR	831310	Identifier	false		831080	0					
ANR	831311	ElseStatement	else		831080	0					
ANR	831312	IfStatement	if ( has_args1 )		831080	0					
ANR	831313	Condition	has_args1	616:9:14241:14249	831080	0	True				
ANR	831314	Identifier	has_args1		831080	0					
ANR	831315	CompoundStatement		63:20:2013:2013	831080	1					
ANR	831316	ExpressionStatement	ad -> Delete ( ATTR_JOB_ARGUMENTS1 )	617:2:14256:14287	831080	0	True				
ANR	831317	CallExpression	ad -> Delete ( ATTR_JOB_ARGUMENTS1 )		831080	0					
ANR	831318	Callee	ad -> Delete		831080	0					
ANR	831319	PtrMemberAccess	ad -> Delete		831080	0					
ANR	831320	Identifier	ad		831080	0					
ANR	831321	Identifier	Delete		831080	1					
ANR	831322	ArgumentList	ATTR_JOB_ARGUMENTS1		831080	1					
ANR	831323	Argument	ATTR_JOB_ARGUMENTS1		831080	0					
ANR	831324	Identifier	ATTR_JOB_ARGUMENTS1		831080	0					
ANR	831325	ReturnStatement	return true ;	619:1:14293:14304	831080	7	True				
ANR	831326	Identifier	true		831080	0					
ANR	831327	ReturnType	bool		831080	1					
ANR	831328	Identifier	ArgList :: InsertArgsIntoClassAd		831080	2					
ANR	831329	ParameterList	"ClassAd * ad , CondorVersionInfo * condor_version , MyString * error_msg"		831080	3					
ANR	831330	Parameter	ClassAd * ad	553:31:12171:12181	831080	0	True				
ANR	831331	ParameterType	ClassAd *		831080	0					
ANR	831332	Identifier	ad		831080	1					
ANR	831333	Parameter	CondorVersionInfo * condor_version	553:43:12183:12215	831080	1	True				
ANR	831334	ParameterType	CondorVersionInfo *		831080	0					
ANR	831335	Identifier	condor_version		831080	1					
ANR	831336	Parameter	MyString * error_msg	553:77:12217:12235	831080	2	True				
ANR	831337	ParameterType	MyString *		831080	0					
ANR	831338	Identifier	error_msg		831080	1					
ANR	831339	CFGEntryNode	ENTRY		831080		True				
ANR	831340	CFGExitNode	EXIT		831080		True				
ANR	831341	Symbol	requires_v1		831080						
ANR	831342	Symbol	* error_msg		831080						
ANR	831343	Symbol	* ad		831080						
ANR	831344	Symbol	condor_version		831080						
ANR	831345	Symbol	condor_version_requires_v1		831080						
ANR	831346	Symbol	GetArgsStringV2Raw		831080						
ANR	831347	Symbol	args1 . Value		831080						
ANR	831348	Symbol	args2 . Value		831080						
ANR	831349	Symbol	CondorVersionRequiresV1		831080						
ANR	831350	Symbol	ad -> LookupExpr		831080						
ANR	831351	Symbol	input_was_unknown_platform_v1		831080						
ANR	831352	Symbol	ad		831080						
ANR	831353	Symbol	error_msg		831080						
ANR	831354	Symbol	NULL		831080						
ANR	831355	Symbol	has_args2		831080						
ANR	831356	Symbol	* condor_version		831080						
ANR	831357	Symbol	false		831080						
ANR	831358	Symbol	ATTR_JOB_ARGUMENTS2		831080						
ANR	831359	Symbol	D_FULLDEBUG		831080						
ANR	831360	Symbol	ATTR_JOB_ARGUMENTS1		831080						
ANR	831361	Symbol	& args1		831080						
ANR	831362	Symbol	& args2		831080						
ANR	831363	Symbol	true		831080						
ANR	831364	Symbol	args1		831080						
ANR	831365	Symbol	args2		831080						
ANR	831366	Symbol	has_args1		831080						
ANR	831367	Symbol	error_msg -> Value		831080						
ANR	831368	Symbol	GetArgsStringV1Raw		831080						
ANR	831369	Function	ArgList :: IsSafeArgV1Value	622:0:14309:14700							
ANR	831370	FunctionDef	ArgList :: IsSafeArgV1Value (char const * str)		831369	0					
ANR	831371	CompoundStatement		624:0:14363:14700	831369	0					
ANR	831372	IfStatement	if ( ! str )		831369	0					
ANR	831373	Condition	! str	628:4:14507:14510	831369	0	True				
ANR	831374	UnaryOperationExpression	! str		831369	0					
ANR	831375	UnaryOperator	!		831369	0					
ANR	831376	Identifier	str		831369	1					
ANR	831377	ReturnStatement	return false ;	628:10:14513:14525	831369	1	True				
ANR	831378	Identifier	false		831369	0					
ANR	831379	IdentifierDeclStatement	"const char * specials = "" \\t\\r\\n"" ;"	630:1:14529:14561	831369	1	True				
ANR	831380	IdentifierDecl	"* specials = "" \\t\\r\\n"""		831369	0					
ANR	831381	IdentifierDeclType	const char *		831369	0					
ANR	831382	Identifier	specials		831369	1					
ANR	831383	AssignmentExpression	"* specials = "" \\t\\r\\n"""		831369	2		=			
ANR	831384	Identifier	specials		831369	0					
ANR	831385	PrimaryExpression	""" \\t\\r\\n"""		831369	1					
ANR	831386	IdentifierDeclStatement	"size_t safe_length = strcspn ( str , specials ) ;"	632:1:14565:14607	831369	2	True				
ANR	831387	IdentifierDecl	"safe_length = strcspn ( str , specials )"		831369	0					
ANR	831388	IdentifierDeclType	size_t		831369	0					
ANR	831389	Identifier	safe_length		831369	1					
ANR	831390	AssignmentExpression	"safe_length = strcspn ( str , specials )"		831369	2		=			
ANR	831391	Identifier	safe_length		831369	0					
ANR	831392	CallExpression	"strcspn ( str , specials )"		831369	1					
ANR	831393	Callee	strcspn		831369	0					
ANR	831394	Identifier	strcspn		831369	0					
ANR	831395	ArgumentList	str		831369	1					
ANR	831396	Argument	str		831369	0					
ANR	831397	Identifier	str		831369	0					
ANR	831398	Argument	specials		831369	1					
ANR	831399	Identifier	specials		831369	0					
ANR	831400	ReturnStatement	return ! str [ safe_length ] ;	635:1:14674:14698	831369	3	True				
ANR	831401	UnaryOperationExpression	! str [ safe_length ]		831369	0					
ANR	831402	UnaryOperator	!		831369	0					
ANR	831403	ArrayIndexing	str [ safe_length ]		831369	1					
ANR	831404	Identifier	str		831369	0					
ANR	831405	Identifier	safe_length		831369	1					
ANR	831406	ReturnType	bool		831369	1					
ANR	831407	Identifier	ArgList :: IsSafeArgV1Value		831369	2					
ANR	831408	ParameterList	char const * str		831369	3					
ANR	831409	Parameter	char const * str	623:26:14340:14354	831369	0	True				
ANR	831410	ParameterType	char const *		831369	0					
ANR	831411	Identifier	str		831369	1					
ANR	831412	CFGEntryNode	ENTRY		831369		True				
ANR	831413	CFGExitNode	EXIT		831369		True				
ANR	831414	Symbol	str		831369						
ANR	831415	Symbol	safe_length		831369						
ANR	831416	Symbol	specials		831369						
ANR	831417	Symbol	false		831369						
ANR	831418	Symbol	* str		831369						
ANR	831419	Symbol	strcspn		831369						
ANR	831420	Symbol	* safe_length		831369						
ANR	831421	Function	ArgList :: GetArgsStringV1Raw	638:0:14703:15155							
ANR	831422	FunctionDef	"ArgList :: GetArgsStringV1Raw (MyString * result , MyString * error_msg)"		831421	0					
ANR	831423	CompoundStatement		640:0:14780:15155	831421	0					
ANR	831424	IdentifierDeclStatement	SimpleListIterator < MyString > it ( args_list ) ;	641:1:14783:14825	831421	0	True				
ANR	831425	IdentifierDecl	it ( args_list )		831421	0					
ANR	831426	IdentifierDeclType	SimpleListIterator < MyString >		831421	0					
ANR	831427	Identifier	it		831421	1					
ANR	831428	Identifier	args_list		831421	2					
ANR	831429	IdentifierDeclStatement	MyString * arg = NULL ;	642:1:14828:14846	831421	1	True				
ANR	831430	IdentifierDecl	* arg = NULL		831421	0					
ANR	831431	IdentifierDeclType	MyString *		831421	0					
ANR	831432	Identifier	arg		831421	1					
ANR	831433	AssignmentExpression	* arg = NULL		831421	2		=			
ANR	831434	Identifier	NULL		831421	0					
ANR	831435	Identifier	NULL		831421	1					
ANR	831436	ExpressionStatement	ASSERT ( result )	643:1:14849:14863	831421	2	True				
ANR	831437	CallExpression	ASSERT ( result )		831421	0					
ANR	831438	Callee	ASSERT		831421	0					
ANR	831439	Identifier	ASSERT		831421	0					
ANR	831440	ArgumentList	result		831421	1					
ANR	831441	Argument	result		831421	0					
ANR	831442	Identifier	result		831421	0					
ANR	831443	WhileStatement	while ( it . Next ( arg ) )		831421	3					
ANR	831444	Condition	it . Next ( arg )	644:7:14872:14883	831421	0	True				
ANR	831445	CallExpression	it . Next ( arg )		831421	0					
ANR	831446	Callee	it . Next		831421	0					
ANR	831447	MemberAccess	it . Next		831421	0					
ANR	831448	Identifier	it		831421	0					
ANR	831449	Identifier	Next		831421	1					
ANR	831450	ArgumentList	arg		831421	1					
ANR	831451	Argument	arg		831421	0					
ANR	831452	Identifier	arg		831421	0					
ANR	831453	CompoundStatement		5:21:105:105	831421	1					
ANR	831454	IfStatement	if ( ! IsSafeArgV1Value ( arg -> Value ( ) ) )		831421	0					
ANR	831455	Condition	! IsSafeArgV1Value ( arg -> Value ( ) )	645:5:14893:14923	831421	0	True				
ANR	831456	UnaryOperationExpression	! IsSafeArgV1Value ( arg -> Value ( ) )		831421	0					
ANR	831457	UnaryOperator	!		831421	0					
ANR	831458	CallExpression	IsSafeArgV1Value ( arg -> Value ( ) )		831421	1					
ANR	831459	Callee	IsSafeArgV1Value		831421	0					
ANR	831460	Identifier	IsSafeArgV1Value		831421	0					
ANR	831461	ArgumentList	arg -> Value ( )		831421	1					
ANR	831462	Argument	arg -> Value ( )		831421	0					
ANR	831463	CallExpression	arg -> Value ( )		831421	0					
ANR	831464	Callee	arg -> Value		831421	0					
ANR	831465	PtrMemberAccess	arg -> Value		831421	0					
ANR	831466	Identifier	arg		831421	0					
ANR	831467	Identifier	Value		831421	1					
ANR	831468	ArgumentList			831421	1					
ANR	831469	CompoundStatement		6:38:145:145	831421	1					
ANR	831470	IfStatement	if ( error_msg )		831421	0					
ANR	831471	Condition	error_msg	646:6:14934:14942	831421	0	True				
ANR	831472	Identifier	error_msg		831421	0					
ANR	831473	CompoundStatement		7:17:164:164	831421	1					
ANR	831474	ExpressionStatement	"error_msg -> sprintf ( ""Cannot represent '%s' in V1 arguments syntax."" , arg -> Value ( ) )"	647:4:14951:15031	831421	0	True				
ANR	831475	CallExpression	"error_msg -> sprintf ( ""Cannot represent '%s' in V1 arguments syntax."" , arg -> Value ( ) )"		831421	0					
ANR	831476	Callee	error_msg -> sprintf		831421	0					
ANR	831477	PtrMemberAccess	error_msg -> sprintf		831421	0					
ANR	831478	Identifier	error_msg		831421	0					
ANR	831479	Identifier	sprintf		831421	1					
ANR	831480	ArgumentList	"""Cannot represent '%s' in V1 arguments syntax."""		831421	1					
ANR	831481	Argument	"""Cannot represent '%s' in V1 arguments syntax."""		831421	0					
ANR	831482	PrimaryExpression	"""Cannot represent '%s' in V1 arguments syntax."""		831421	0					
ANR	831483	Argument	arg -> Value ( )		831421	1					
ANR	831484	CallExpression	arg -> Value ( )		831421	0					
ANR	831485	Callee	arg -> Value		831421	0					
ANR	831486	PtrMemberAccess	arg -> Value		831421	0					
ANR	831487	Identifier	arg		831421	0					
ANR	831488	Identifier	Value		831421	1					
ANR	831489	ArgumentList			831421	1					
ANR	831490	ReturnStatement	return false ;	649:3:15041:15053	831421	1	True				
ANR	831491	Identifier	false		831421	0					
ANR	831492	IfStatement	if ( result -> Length ( ) )		831421	1					
ANR	831493	Condition	result -> Length ( )	651:5:15064:15079	831421	0	True				
ANR	831494	CallExpression	result -> Length ( )		831421	0					
ANR	831495	Callee	result -> Length		831421	0					
ANR	831496	PtrMemberAccess	result -> Length		831421	0					
ANR	831497	Identifier	result		831421	0					
ANR	831498	Identifier	Length		831421	1					
ANR	831499	ArgumentList			831421	1					
ANR	831500	CompoundStatement		12:23:301:301	831421	1					
ANR	831501	ExpressionStatement	"( * result ) += "" """	652:3:15087:15103	831421	0	True				
ANR	831502	AssignmentExpression	"( * result ) += "" """		831421	0		+=			
ANR	831503	UnaryOperationExpression	* result		831421	0					
ANR	831504	UnaryOperator	*		831421	0					
ANR	831505	Identifier	result		831421	1					
ANR	831506	PrimaryExpression	""" """		831421	1					
ANR	831507	ExpressionStatement	( * result ) += arg -> Value ( )	654:2:15111:15136	831421	2	True				
ANR	831508	AssignmentExpression	( * result ) += arg -> Value ( )		831421	0		+=			
ANR	831509	UnaryOperationExpression	* result		831421	0					
ANR	831510	UnaryOperator	*		831421	0					
ANR	831511	Identifier	result		831421	1					
ANR	831512	CallExpression	arg -> Value ( )		831421	1					
ANR	831513	Callee	arg -> Value		831421	0					
ANR	831514	PtrMemberAccess	arg -> Value		831421	0					
ANR	831515	Identifier	arg		831421	0					
ANR	831516	Identifier	Value		831421	1					
ANR	831517	ArgumentList			831421	1					
ANR	831518	ReturnStatement	return true ;	656:1:15142:15153	831421	4	True				
ANR	831519	Identifier	true		831421	0					
ANR	831520	ReturnType	bool		831421	1					
ANR	831521	Identifier	ArgList :: GetArgsStringV1Raw		831421	2					
ANR	831522	ParameterList	"MyString * result , MyString * error_msg"		831421	3					
ANR	831523	Parameter	MyString * result	639:28:14736:14751	831421	0	True				
ANR	831524	ParameterType	MyString *		831421	0					
ANR	831525	Identifier	result		831421	1					
ANR	831526	Parameter	MyString * error_msg	639:45:14753:14771	831421	1	True				
ANR	831527	ParameterType	MyString *		831421	0					
ANR	831528	Identifier	error_msg		831421	1					
ANR	831529	CFGEntryNode	ENTRY		831421		True				
ANR	831530	CFGExitNode	EXIT		831421		True				
ANR	831531	Symbol	error_msg		831421						
ANR	831532	Symbol	NULL		831421						
ANR	831533	Symbol	IsSafeArgV1Value		831421						
ANR	831534	Symbol	result -> Length		831421						
ANR	831535	Symbol	false		831421						
ANR	831536	Symbol	it		831421						
ANR	831537	Symbol	result		831421						
ANR	831538	Symbol	arg -> Value		831421						
ANR	831539	Symbol	it . Next		831421						
ANR	831540	Symbol	* result		831421						
ANR	831541	Symbol	arg		831421						
ANR	831542	Symbol	true		831421						
ANR	831543	Symbol	* arg		831421						
ANR	831544	Function	ArgList :: GetArgsStringV2Quoted	659:0:15158:15364							
ANR	831545	FunctionDef	"ArgList :: GetArgsStringV2Quoted (MyString * result , MyString * error_msg)"		831544	0					
ANR	831546	CompoundStatement		661:0:15232:15364	831544	0					
ANR	831547	IdentifierDeclStatement	MyString v2_raw ;	662:1:15235:15250	831544	0	True				
ANR	831548	IdentifierDecl	v2_raw		831544	0					
ANR	831549	IdentifierDeclType	MyString		831544	0					
ANR	831550	Identifier	v2_raw		831544	1					
ANR	831551	IfStatement	"if ( ! GetArgsStringV2Raw ( & v2_raw , error_msg ) )"		831544	1					
ANR	831552	Condition	"! GetArgsStringV2Raw ( & v2_raw , error_msg )"	663:4:15256:15293	831544	0	True				
ANR	831553	UnaryOperationExpression	"! GetArgsStringV2Raw ( & v2_raw , error_msg )"		831544	0					
ANR	831554	UnaryOperator	!		831544	0					
ANR	831555	CallExpression	"GetArgsStringV2Raw ( & v2_raw , error_msg )"		831544	1					
ANR	831556	Callee	GetArgsStringV2Raw		831544	0					
ANR	831557	Identifier	GetArgsStringV2Raw		831544	0					
ANR	831558	ArgumentList	& v2_raw		831544	1					
ANR	831559	Argument	& v2_raw		831544	0					
ANR	831560	UnaryOperationExpression	& v2_raw		831544	0					
ANR	831561	UnaryOperator	&		831544	0					
ANR	831562	Identifier	v2_raw		831544	1					
ANR	831563	Argument	error_msg		831544	1					
ANR	831564	Identifier	error_msg		831544	0					
ANR	831565	CompoundStatement		3:44:63:63	831544	1					
ANR	831566	ReturnStatement	return false ;	664:2:15300:15312	831544	0	True				
ANR	831567	Identifier	false		831544	0					
ANR	831568	ExpressionStatement	"V2RawToV2Quoted ( v2_raw , result )"	666:1:15318:15348	831544	2	True				
ANR	831569	CallExpression	"V2RawToV2Quoted ( v2_raw , result )"		831544	0					
ANR	831570	Callee	V2RawToV2Quoted		831544	0					
ANR	831571	Identifier	V2RawToV2Quoted		831544	0					
ANR	831572	ArgumentList	v2_raw		831544	1					
ANR	831573	Argument	v2_raw		831544	0					
ANR	831574	Identifier	v2_raw		831544	0					
ANR	831575	Argument	result		831544	1					
ANR	831576	Identifier	result		831544	0					
ANR	831577	ReturnStatement	return true ;	667:1:15351:15362	831544	3	True				
ANR	831578	Identifier	true		831544	0					
ANR	831579	ReturnType	bool		831544	1					
ANR	831580	Identifier	ArgList :: GetArgsStringV2Quoted		831544	2					
ANR	831581	ParameterList	"MyString * result , MyString * error_msg"		831544	3					
ANR	831582	Parameter	MyString * result	660:31:15194:15209	831544	0	True				
ANR	831583	ParameterType	MyString *		831544	0					
ANR	831584	Identifier	result		831544	1					
ANR	831585	Parameter	MyString * error_msg	660:48:15211:15229	831544	1	True				
ANR	831586	ParameterType	MyString *		831544	0					
ANR	831587	Identifier	error_msg		831544	1					
ANR	831588	CFGEntryNode	ENTRY		831544		True				
ANR	831589	CFGExitNode	EXIT		831544		True				
ANR	831590	Symbol	result		831544						
ANR	831591	Symbol	GetArgsStringV2Raw		831544						
ANR	831592	Symbol	& v2_raw		831544						
ANR	831593	Symbol	error_msg		831544						
ANR	831594	Symbol	false		831544						
ANR	831595	Symbol	true		831544						
ANR	831596	Symbol	v2_raw		831544						
ANR	831597	Function	ArgList :: GetArgsStringV1WackedOrV2Quoted	670:0:15367:15624							
ANR	831598	FunctionDef	"ArgList :: GetArgsStringV1WackedOrV2Quoted (MyString * result , MyString * error_msg)"		831597	0					
ANR	831599	CompoundStatement		672:0:15451:15624	831597	0					
ANR	831600	IdentifierDeclStatement	MyString v1_raw ;	673:1:15454:15469	831597	0	True				
ANR	831601	IdentifierDecl	v1_raw		831597	0					
ANR	831602	IdentifierDeclType	MyString		831597	0					
ANR	831603	Identifier	v1_raw		831597	1					
ANR	831604	IfStatement	"if ( GetArgsStringV1Raw ( & v1_raw , NULL ) )"		831597	1					
ANR	831605	Condition	"GetArgsStringV1Raw ( & v1_raw , NULL )"	674:4:15475:15506	831597	0	True				
ANR	831606	CallExpression	"GetArgsStringV1Raw ( & v1_raw , NULL )"		831597	0					
ANR	831607	Callee	GetArgsStringV1Raw		831597	0					
ANR	831608	Identifier	GetArgsStringV1Raw		831597	0					
ANR	831609	ArgumentList	& v1_raw		831597	1					
ANR	831610	Argument	& v1_raw		831597	0					
ANR	831611	UnaryOperationExpression	& v1_raw		831597	0					
ANR	831612	UnaryOperator	&		831597	0					
ANR	831613	Identifier	v1_raw		831597	1					
ANR	831614	Argument	NULL		831597	1					
ANR	831615	Identifier	NULL		831597	0					
ANR	831616	CompoundStatement		3:38:57:57	831597	1					
ANR	831617	ExpressionStatement	"V1RawToV1Wacked ( v1_raw , result )"	675:2:15513:15543	831597	0	True				
ANR	831618	CallExpression	"V1RawToV1Wacked ( v1_raw , result )"		831597	0					
ANR	831619	Callee	V1RawToV1Wacked		831597	0					
ANR	831620	Identifier	V1RawToV1Wacked		831597	0					
ANR	831621	ArgumentList	v1_raw		831597	1					
ANR	831622	Argument	v1_raw		831597	0					
ANR	831623	Identifier	v1_raw		831597	0					
ANR	831624	Argument	result		831597	1					
ANR	831625	Identifier	result		831597	0					
ANR	831626	ReturnStatement	return true ;	676:2:15547:15558	831597	1	True				
ANR	831627	Identifier	true		831597	0					
ANR	831628	ElseStatement	else		831597	0					
ANR	831629	CompoundStatement		7:6:117:117	831597	0					
ANR	831630	ReturnStatement	"return GetArgsStringV2Quoted ( result , error_msg ) ;"	679:2:15573:15619	831597	0	True				
ANR	831631	CallExpression	"GetArgsStringV2Quoted ( result , error_msg )"		831597	0					
ANR	831632	Callee	GetArgsStringV2Quoted		831597	0					
ANR	831633	Identifier	GetArgsStringV2Quoted		831597	0					
ANR	831634	ArgumentList	result		831597	1					
ANR	831635	Argument	result		831597	0					
ANR	831636	Identifier	result		831597	0					
ANR	831637	Argument	error_msg		831597	1					
ANR	831638	Identifier	error_msg		831597	0					
ANR	831639	ReturnType	bool		831597	1					
ANR	831640	Identifier	ArgList :: GetArgsStringV1WackedOrV2Quoted		831597	2					
ANR	831641	ParameterList	"MyString * result , MyString * error_msg"		831597	3					
ANR	831642	Parameter	MyString * result	671:41:15413:15428	831597	0	True				
ANR	831643	ParameterType	MyString *		831597	0					
ANR	831644	Identifier	result		831597	1					
ANR	831645	Parameter	MyString * error_msg	671:58:15430:15448	831597	1	True				
ANR	831646	ParameterType	MyString *		831597	0					
ANR	831647	Identifier	error_msg		831597	1					
ANR	831648	CFGEntryNode	ENTRY		831597		True				
ANR	831649	CFGExitNode	EXIT		831597		True				
ANR	831650	Symbol	result		831597						
ANR	831651	Symbol	& v1_raw		831597						
ANR	831652	Symbol	error_msg		831597						
ANR	831653	Symbol	NULL		831597						
ANR	831654	Symbol	GetArgsStringV2Quoted		831597						
ANR	831655	Symbol	true		831597						
ANR	831656	Symbol	GetArgsStringV1Raw		831597						
ANR	831657	Symbol	v1_raw		831597						
ANR	831658	Function	ArgList :: V2RawToV2Quoted	683:0:15627:15770							
ANR	831659	FunctionDef	"ArgList :: V2RawToV2Quoted (MyString const & v2_raw , MyString * result)"		831658	0					
ANR	831660	CompoundStatement		685:0:15698:15770	831658	0					
ANR	831661	ExpressionStatement	"result -> sprintf_cat ( ""\\""%s\\"""" , v2_raw . EscapeChars ( ""\\"""" , '\\""' ) . Value ( ) )"	686:1:15701:15768	831658	0	True				
ANR	831662	CallExpression	"result -> sprintf_cat ( ""\\""%s\\"""" , v2_raw . EscapeChars ( ""\\"""" , '\\""' ) . Value ( ) )"		831658	0					
ANR	831663	Callee	result -> sprintf_cat		831658	0					
ANR	831664	PtrMemberAccess	result -> sprintf_cat		831658	0					
ANR	831665	Identifier	result		831658	0					
ANR	831666	Identifier	sprintf_cat		831658	1					
ANR	831667	ArgumentList	"""\\""%s\\"""""		831658	1					
ANR	831668	Argument	"""\\""%s\\"""""		831658	0					
ANR	831669	PrimaryExpression	"""\\""%s\\"""""		831658	0					
ANR	831670	Argument	"v2_raw . EscapeChars ( ""\\"""" , '\\""' ) . Value ( )"		831658	1					
ANR	831671	CallExpression	"v2_raw . EscapeChars ( ""\\"""" , '\\""' ) . Value ( )"		831658	0					
ANR	831672	Callee	"v2_raw . EscapeChars ( ""\\"""" , '\\""' ) . Value"		831658	0					
ANR	831673	MemberAccess	"v2_raw . EscapeChars ( ""\\"""" , '\\""' ) . Value"		831658	0					
ANR	831674	CallExpression	"v2_raw . EscapeChars ( ""\\"""" , '\\""' )"		831658	0					
ANR	831675	Callee	v2_raw . EscapeChars		831658	0					
ANR	831676	MemberAccess	v2_raw . EscapeChars		831658	0					
ANR	831677	Identifier	v2_raw		831658	0					
ANR	831678	Identifier	EscapeChars		831658	1					
ANR	831679	ArgumentList	"""\\"""""		831658	1					
ANR	831680	Argument	"""\\"""""		831658	0					
ANR	831681	PrimaryExpression	"""\\"""""		831658	0					
ANR	831682	Argument	"'\\""'"		831658	1					
ANR	831683	PrimaryExpression	"'\\""'"		831658	0					
ANR	831684	Identifier	Value		831658	1					
ANR	831685	ArgumentList			831658	1					
ANR	831686	ReturnType	void		831658	1					
ANR	831687	Identifier	ArgList :: V2RawToV2Quoted		831658	2					
ANR	831688	ParameterList	"MyString const & v2_raw , MyString * result"		831658	3					
ANR	831689	Parameter	MyString const & v2_raw	684:25:15657:15678	831658	0	True				
ANR	831690	ParameterType	MyString const &		831658	0					
ANR	831691	Identifier	v2_raw		831658	1					
ANR	831692	Parameter	MyString * result	684:48:15680:15695	831658	1	True				
ANR	831693	ParameterType	MyString *		831658	0					
ANR	831694	Identifier	result		831658	1					
ANR	831695	CFGEntryNode	ENTRY		831658		True				
ANR	831696	CFGExitNode	EXIT		831658		True				
ANR	831697	Symbol	result		831658						
ANR	831698	Symbol	v2_raw		831658						
ANR	831699	Symbol	v2_raw . EscapeChars		831658						
ANR	831700	Symbol	"v2_raw . EscapeChars ( ""\\"""" , '\\""' ) . Value"		831658						
ANR	831701	Function	ArgList :: V1RawToV1Wacked	689:0:15773:15891							
ANR	831702	FunctionDef	"ArgList :: V1RawToV1Wacked (MyString const & v1_raw , MyString * result)"		831701	0					
ANR	831703	CompoundStatement		691:0:15844:15891	831701	0					
ANR	831704	ExpressionStatement	"( * result ) += v1_raw . EscapeChars ( ""\\"""" , '\\\\' )"	692:1:15847:15889	831701	0	True				
ANR	831705	AssignmentExpression	"( * result ) += v1_raw . EscapeChars ( ""\\"""" , '\\\\' )"		831701	0		+=			
ANR	831706	UnaryOperationExpression	* result		831701	0					
ANR	831707	UnaryOperator	*		831701	0					
ANR	831708	Identifier	result		831701	1					
ANR	831709	CallExpression	"v1_raw . EscapeChars ( ""\\"""" , '\\\\' )"		831701	1					
ANR	831710	Callee	v1_raw . EscapeChars		831701	0					
ANR	831711	MemberAccess	v1_raw . EscapeChars		831701	0					
ANR	831712	Identifier	v1_raw		831701	0					
ANR	831713	Identifier	EscapeChars		831701	1					
ANR	831714	ArgumentList	"""\\"""""		831701	1					
ANR	831715	Argument	"""\\"""""		831701	0					
ANR	831716	PrimaryExpression	"""\\"""""		831701	0					
ANR	831717	Argument	'\\\\'		831701	1					
ANR	831718	PrimaryExpression	'\\\\'		831701	0					
ANR	831719	ReturnType	void		831701	1					
ANR	831720	Identifier	ArgList :: V1RawToV1Wacked		831701	2					
ANR	831721	ParameterList	"MyString const & v1_raw , MyString * result"		831701	3					
ANR	831722	Parameter	MyString const & v1_raw	690:25:15803:15824	831701	0	True				
ANR	831723	ParameterType	MyString const &		831701	0					
ANR	831724	Identifier	v1_raw		831701	1					
ANR	831725	Parameter	MyString * result	690:48:15826:15841	831701	1	True				
ANR	831726	ParameterType	MyString *		831701	0					
ANR	831727	Identifier	result		831701	1					
ANR	831728	CFGEntryNode	ENTRY		831701		True				
ANR	831729	CFGExitNode	EXIT		831701		True				
ANR	831730	Symbol	result		831701						
ANR	831731	Symbol	* result		831701						
ANR	831732	Symbol	v1_raw . EscapeChars		831701						
ANR	831733	Symbol	v1_raw		831701						
ANR	831734	Function	ArgList :: GetArgsStringForDisplay	702:0:16049:16171							
ANR	831735	FunctionDef	"ArgList :: GetArgsStringForDisplay (MyString * result , int start_arg)"		831734	0					
ANR	831736	CompoundStatement		704:0:16125:16171	831734	0					
ANR	831737	ExpressionStatement	"GetArgsStringV2Raw ( result , NULL , start_arg )"	705:1:16128:16169	831734	0	True				
ANR	831738	CallExpression	"GetArgsStringV2Raw ( result , NULL , start_arg )"		831734	0					
ANR	831739	Callee	GetArgsStringV2Raw		831734	0					
ANR	831740	Identifier	GetArgsStringV2Raw		831734	0					
ANR	831741	ArgumentList	result		831734	1					
ANR	831742	Argument	result		831734	0					
ANR	831743	Identifier	result		831734	0					
ANR	831744	Argument	NULL		831734	1					
ANR	831745	Identifier	NULL		831734	0					
ANR	831746	Argument	start_arg		831734	2					
ANR	831747	Identifier	start_arg		831734	0					
ANR	831748	ReturnType	void		831734	1					
ANR	831749	Identifier	ArgList :: GetArgsStringForDisplay		831734	2					
ANR	831750	ParameterList	"MyString * result , int start_arg"		831734	3					
ANR	831751	Parameter	MyString * result	703:33:16087:16102	831734	0	True				
ANR	831752	ParameterType	MyString *		831734	0					
ANR	831753	Identifier	result		831734	1					
ANR	831754	Parameter	int start_arg	703:50:16104:16116	831734	1	True				
ANR	831755	ParameterType	int		831734	0					
ANR	831756	Identifier	start_arg		831734	1					
ANR	831757	CFGEntryNode	ENTRY		831734		True				
ANR	831758	CFGExitNode	EXIT		831734		True				
ANR	831759	Symbol	result		831734						
ANR	831760	Symbol	start_arg		831734						
ANR	831761	Symbol	NULL		831734						
ANR	831762	Function	ArgList :: GetArgsStringV1or2Raw	709:0:16175:16616							
ANR	831763	FunctionDef	"ArgList :: GetArgsStringV1or2Raw (MyString * result , MyString * error_msg)"		831762	0					
ANR	831764	CompoundStatement		711:0:16255:16616	831762	0					
ANR	831765	ExpressionStatement	ASSERT ( result )	712:1:16258:16272	831762	0	True				
ANR	831766	CallExpression	ASSERT ( result )		831762	0					
ANR	831767	Callee	ASSERT		831762	0					
ANR	831768	Identifier	ASSERT		831762	0					
ANR	831769	ArgumentList	result		831762	1					
ANR	831770	Argument	result		831762	0					
ANR	831771	Identifier	result		831762	0					
ANR	831772	IdentifierDeclStatement	int old_len = result -> Length ( ) ;	713:1:16275:16305	831762	1	True				
ANR	831773	IdentifierDecl	old_len = result -> Length ( )		831762	0					
ANR	831774	IdentifierDeclType	int		831762	0					
ANR	831775	Identifier	old_len		831762	1					
ANR	831776	AssignmentExpression	old_len = result -> Length ( )		831762	2		=			
ANR	831777	Identifier	old_len		831762	0					
ANR	831778	CallExpression	result -> Length ( )		831762	1					
ANR	831779	Callee	result -> Length		831762	0					
ANR	831780	PtrMemberAccess	result -> Length		831762	0					
ANR	831781	Identifier	result		831762	0					
ANR	831782	Identifier	Length		831762	1					
ANR	831783	ArgumentList			831762	1					
ANR	831784	IfStatement	"if ( GetArgsStringV1Raw ( result , NULL ) )"		831762	2					
ANR	831785	Condition	"GetArgsStringV1Raw ( result , NULL )"	715:4:16312:16342	831762	0	True				
ANR	831786	CallExpression	"GetArgsStringV1Raw ( result , NULL )"		831762	0					
ANR	831787	Callee	GetArgsStringV1Raw		831762	0					
ANR	831788	Identifier	GetArgsStringV1Raw		831762	0					
ANR	831789	ArgumentList	result		831762	1					
ANR	831790	Argument	result		831762	0					
ANR	831791	Identifier	result		831762	0					
ANR	831792	Argument	NULL		831762	1					
ANR	831793	Identifier	NULL		831762	0					
ANR	831794	CompoundStatement		5:37:89:89	831762	1					
ANR	831795	ReturnStatement	return true ;	716:2:16349:16360	831762	0	True				
ANR	831796	Identifier	true		831762	0					
ANR	831797	IfStatement	if ( result -> Length ( ) > old_len )		831762	3					
ANR	831798	Condition	result -> Length ( ) > old_len	721:4:16410:16435	831762	0	True				
ANR	831799	RelationalExpression	result -> Length ( ) > old_len		831762	0		>			
ANR	831800	CallExpression	result -> Length ( )		831762	0					
ANR	831801	Callee	result -> Length		831762	0					
ANR	831802	PtrMemberAccess	result -> Length		831762	0					
ANR	831803	Identifier	result		831762	0					
ANR	831804	Identifier	Length		831762	1					
ANR	831805	ArgumentList			831762	1					
ANR	831806	Identifier	old_len		831762	1					
ANR	831807	CompoundStatement		11:32:182:182	831762	1					
ANR	831808	ExpressionStatement	"result -> setChar ( old_len , '\\0' )"	723:2:16501:16530	831762	0	True				
ANR	831809	CallExpression	"result -> setChar ( old_len , '\\0' )"		831762	0					
ANR	831810	Callee	result -> setChar		831762	0					
ANR	831811	PtrMemberAccess	result -> setChar		831762	0					
ANR	831812	Identifier	result		831762	0					
ANR	831813	Identifier	setChar		831762	1					
ANR	831814	ArgumentList	old_len		831762	1					
ANR	831815	Argument	old_len		831762	0					
ANR	831816	Identifier	old_len		831762	0					
ANR	831817	Argument	'\\0'		831762	1					
ANR	831818	PrimaryExpression	'\\0'		831762	0					
ANR	831819	ExpressionStatement	( * result ) += RAW_V2_ARGS_MARKER	726:1:16537:16568	831762	4	True				
ANR	831820	AssignmentExpression	( * result ) += RAW_V2_ARGS_MARKER		831762	0		+=			
ANR	831821	UnaryOperationExpression	* result		831762	0					
ANR	831822	UnaryOperator	*		831762	0					
ANR	831823	Identifier	result		831762	1					
ANR	831824	Identifier	RAW_V2_ARGS_MARKER		831762	1					
ANR	831825	ReturnStatement	"return GetArgsStringV2Raw ( result , error_msg ) ;"	727:1:16571:16614	831762	5	True				
ANR	831826	CallExpression	"GetArgsStringV2Raw ( result , error_msg )"		831762	0					
ANR	831827	Callee	GetArgsStringV2Raw		831762	0					
ANR	831828	Identifier	GetArgsStringV2Raw		831762	0					
ANR	831829	ArgumentList	result		831762	1					
ANR	831830	Argument	result		831762	0					
ANR	831831	Identifier	result		831762	0					
ANR	831832	Argument	error_msg		831762	1					
ANR	831833	Identifier	error_msg		831762	0					
ANR	831834	ReturnType	bool		831762	1					
ANR	831835	Identifier	ArgList :: GetArgsStringV1or2Raw		831762	2					
ANR	831836	ParameterList	"MyString * result , MyString * error_msg"		831762	3					
ANR	831837	Parameter	MyString * result	710:31:16211:16226	831762	0	True				
ANR	831838	ParameterType	MyString *		831762	0					
ANR	831839	Identifier	result		831762	1					
ANR	831840	Parameter	MyString * error_msg	710:48:16228:16246	831762	1	True				
ANR	831841	ParameterType	MyString *		831762	0					
ANR	831842	Identifier	error_msg		831762	1					
ANR	831843	CFGEntryNode	ENTRY		831762		True				
ANR	831844	CFGExitNode	EXIT		831762		True				
ANR	831845	Symbol	result		831762						
ANR	831846	Symbol	old_len		831762						
ANR	831847	Symbol	GetArgsStringV2Raw		831762						
ANR	831848	Symbol	error_msg		831762						
ANR	831849	Symbol	NULL		831762						
ANR	831850	Symbol	RAW_V2_ARGS_MARKER		831762						
ANR	831851	Symbol	* result		831762						
ANR	831852	Symbol	result -> Length		831762						
ANR	831853	Symbol	true		831762						
ANR	831854	Symbol	GetArgsStringV1Raw		831762						
ANR	831855	Function	ArgList :: GetArgsStringV1or2Raw	730:0:16619:16825							
ANR	831856	FunctionDef	"ArgList :: GetArgsStringV1or2Raw (ClassAd const * ad , MyString * result , MyString * error_msg)"		831855	0					
ANR	831857	CompoundStatement		732:0:16711:16825	831855	0					
ANR	831858	IfStatement	"if ( ! AppendArgsFromClassAd ( ad , error_msg ) )"		831855	0					
ANR	831859	Condition	"! AppendArgsFromClassAd ( ad , error_msg )"	733:4:16717:16752	831855	0	True				
ANR	831860	UnaryOperationExpression	"! AppendArgsFromClassAd ( ad , error_msg )"		831855	0					
ANR	831861	UnaryOperator	!		831855	0					
ANR	831862	CallExpression	"AppendArgsFromClassAd ( ad , error_msg )"		831855	1					
ANR	831863	Callee	AppendArgsFromClassAd		831855	0					
ANR	831864	Identifier	AppendArgsFromClassAd		831855	0					
ANR	831865	ArgumentList	ad		831855	1					
ANR	831866	Argument	ad		831855	0					
ANR	831867	Identifier	ad		831855	0					
ANR	831868	Argument	error_msg		831855	1					
ANR	831869	Identifier	error_msg		831855	0					
ANR	831870	CompoundStatement		2:42:43:43	831855	1					
ANR	831871	ReturnStatement	return false ;	734:2:16759:16771	831855	0	True				
ANR	831872	Identifier	false		831855	0					
ANR	831873	ReturnStatement	"return GetArgsStringV1or2Raw ( result , error_msg ) ;"	736:1:16777:16823	831855	1	True				
ANR	831874	CallExpression	"GetArgsStringV1or2Raw ( result , error_msg )"		831855	0					
ANR	831875	Callee	GetArgsStringV1or2Raw		831855	0					
ANR	831876	Identifier	GetArgsStringV1or2Raw		831855	0					
ANR	831877	ArgumentList	result		831855	1					
ANR	831878	Argument	result		831855	0					
ANR	831879	Identifier	result		831855	0					
ANR	831880	Argument	error_msg		831855	1					
ANR	831881	Identifier	error_msg		831855	0					
ANR	831882	ReturnType	bool		831855	1					
ANR	831883	Identifier	ArgList :: GetArgsStringV1or2Raw		831855	2					
ANR	831884	ParameterList	"ClassAd const * ad , MyString * result , MyString * error_msg"		831855	3					
ANR	831885	Parameter	ClassAd const * ad	731:31:16655:16671	831855	0	True				
ANR	831886	ParameterType	ClassAd const *		831855	0					
ANR	831887	Identifier	ad		831855	1					
ANR	831888	Parameter	MyString * result	731:49:16673:16688	831855	1	True				
ANR	831889	ParameterType	MyString *		831855	0					
ANR	831890	Identifier	result		831855	1					
ANR	831891	Parameter	MyString * error_msg	731:66:16690:16708	831855	2	True				
ANR	831892	ParameterType	MyString *		831855	0					
ANR	831893	Identifier	error_msg		831855	1					
ANR	831894	CFGEntryNode	ENTRY		831855		True				
ANR	831895	CFGExitNode	EXIT		831855		True				
ANR	831896	Symbol	result		831855						
ANR	831897	Symbol	ad		831855						
ANR	831898	Symbol	error_msg		831855						
ANR	831899	Symbol	false		831855						
ANR	831900	Symbol	GetArgsStringV1or2Raw		831855						
ANR	831901	Symbol	AppendArgsFromClassAd		831855						
ANR	831902	Function	ArgList :: AddErrorMessage	739:0:16828:17042							
ANR	831903	FunctionDef	"ArgList :: AddErrorMessage (char const * msg , MyString * error_buf)"		831902	0					
ANR	831904	CompoundStatement		741:0:16895:17042	831902	0					
ANR	831905	IfStatement	if ( ! error_buf )		831902	0					
ANR	831906	Condition	! error_buf	742:4:16901:16910	831902	0	True				
ANR	831907	UnaryOperationExpression	! error_buf		831902	0					
ANR	831908	UnaryOperator	!		831902	0					
ANR	831909	Identifier	error_buf		831902	1					
ANR	831910	ReturnStatement	return ;	742:16:16913:16919	831902	1	True				
ANR	831911	IfStatement	if ( error_buf -> Length ( ) )		831902	1					
ANR	831912	Condition	error_buf -> Length ( )	744:4:16926:16944	831902	0	True				
ANR	831913	CallExpression	error_buf -> Length ( )		831902	0					
ANR	831914	Callee	error_buf -> Length		831902	0					
ANR	831915	PtrMemberAccess	error_buf -> Length		831902	0					
ANR	831916	Identifier	error_buf		831902	0					
ANR	831917	Identifier	Length		831902	1					
ANR	831918	ArgumentList			831902	1					
ANR	831919	CompoundStatement		4:25:51:51	831902	1					
ANR	831920	ExpressionStatement	"( * error_buf ) += ""\\n"""	746:2:16995:17015	831902	0	True				
ANR	831921	AssignmentExpression	"( * error_buf ) += ""\\n"""		831902	0		+=			
ANR	831922	UnaryOperationExpression	* error_buf		831902	0					
ANR	831923	UnaryOperator	*		831902	0					
ANR	831924	Identifier	error_buf		831902	1					
ANR	831925	PrimaryExpression	"""\\n"""		831902	1					
ANR	831926	ExpressionStatement	( * error_buf ) += msg	748:1:17021:17040	831902	2	True				
ANR	831927	AssignmentExpression	( * error_buf ) += msg		831902	0		+=			
ANR	831928	UnaryOperationExpression	* error_buf		831902	0					
ANR	831929	UnaryOperator	*		831902	0					
ANR	831930	Identifier	error_buf		831902	1					
ANR	831931	Identifier	msg		831902	1					
ANR	831932	ReturnType	void		831902	1					
ANR	831933	Identifier	ArgList :: AddErrorMessage		831902	2					
ANR	831934	ParameterList	"char const * msg , MyString * error_buf"		831902	3					
ANR	831935	Parameter	char const * msg	740:25:16858:16872	831902	0	True				
ANR	831936	ParameterType	char const *		831902	0					
ANR	831937	Identifier	msg		831902	1					
ANR	831938	Parameter	MyString * error_buf	740:41:16874:16892	831902	1	True				
ANR	831939	ParameterType	MyString *		831902	0					
ANR	831940	Identifier	error_buf		831902	1					
ANR	831941	CFGEntryNode	ENTRY		831902		True				
ANR	831942	CFGExitNode	EXIT		831902		True				
ANR	831943	Symbol	msg		831902						
ANR	831944	Symbol	error_buf		831902						
ANR	831945	Symbol	error_buf -> Length		831902						
ANR	831946	Symbol	* error_buf		831902						
ANR	831947	Function	ArgList :: ArgList	751:0:17045:17141							
ANR	831948	FunctionDef	ArgList :: ArgList ()		831947	0					
ANR	831949	CompoundStatement		752:0:17064:17141	831947	0					
ANR	831950	ExpressionStatement	input_was_unknown_platform_v1 = false	753:1:17067:17104	831947	0	True				
ANR	831951	AssignmentExpression	input_was_unknown_platform_v1 = false		831947	0		=			
ANR	831952	Identifier	input_was_unknown_platform_v1		831947	0					
ANR	831953	Identifier	false		831947	1					
ANR	831954	ExpressionStatement	v1_syntax = UNKNOWN_ARGV1_SYNTAX	754:1:17107:17139	831947	1	True				
ANR	831955	AssignmentExpression	v1_syntax = UNKNOWN_ARGV1_SYNTAX		831947	0		=			
ANR	831956	Identifier	v1_syntax		831947	0					
ANR	831957	Identifier	UNKNOWN_ARGV1_SYNTAX		831947	1					
ANR	831958	Identifier	ArgList :: ArgList		831947	1					
ANR	831959	ParameterList			831947	2					
ANR	831960	CFGEntryNode	ENTRY		831947		True				
ANR	831961	CFGExitNode	EXIT		831947		True				
ANR	831962	Symbol	input_was_unknown_platform_v1		831947						
ANR	831963	Symbol	false		831947						
ANR	831964	Symbol	v1_syntax		831947						
ANR	831965	Symbol	UNKNOWN_ARGV1_SYNTAX		831947						
ANR	831966	Function	ArgList :: ~ArgList	757:0:17144:17166							
ANR	831967	FunctionDef	ArgList :: ~ArgList ()		831966	0					
ANR	831968	CompoundStatement		758:0:17164:17166	831966	0					
ANR	831969	Identifier	ArgList :: ~ArgList		831966	1					
ANR	831970	ParameterList			831966	2					
ANR	831971	CFGEntryNode	ENTRY		831966		True				
ANR	831972	CFGExitNode	EXIT		831966		True				
ANR	831973	DeclStmt									
ANR	831974	Decl							SimpleListIterator < MyString >	SimpleListIterator < MyString > ( args_list )	it
ANR	831975	DeclStmt									
ANR	831976	Decl							MyString	MyString *	arg
ANR	831977	DeclStmt									
ANR	831978	Decl							int	int	i
ANR	831979	DeclStmt									
ANR	831980	Decl							char const	char const *	argstr
ANR	831981	DeclStmt									
ANR	831982	Decl							int	int	n
ANR	831983	Function	ArgList :: IsV2QuotedString	830:0:18911:19074							
ANR	831984	FunctionDef	ArgList :: IsV2QuotedString (char const * str)		831983	0					
ANR	831985	CompoundStatement		832:0:18959:19074	831983	0					
ANR	831986	IfStatement	if ( ! str )		831983	0					
ANR	831987	Condition	! str	833:4:18965:18968	831983	0	True				
ANR	831988	UnaryOperationExpression	! str		831983	0					
ANR	831989	UnaryOperator	!		831983	0					
ANR	831990	Identifier	str		831983	1					
ANR	831991	ReturnStatement	return false ;	833:10:18971:18983	831983	1	True				
ANR	831992	Identifier	false		831983	0					
ANR	831993	WhileStatement	while ( isspace ( * str ) )		831983	1					
ANR	831994	Condition	isspace ( * str )	836:7:19023:19035	831983	0	True				
ANR	831995	CallExpression	isspace ( * str )		831983	0					
ANR	831996	Callee	isspace		831983	0					
ANR	831997	Identifier	isspace		831983	0					
ANR	831998	ArgumentList	* str		831983	1					
ANR	831999	Argument	* str		831983	0					
ANR	832000	UnaryOperationExpression	* str		831983	0					
ANR	832001	UnaryOperator	*		831983	0					
ANR	832002	Identifier	str		831983	1					
ANR	832003	CompoundStatement		5:22:78:78	831983	1					
ANR	832004	ExpressionStatement	str ++	837:2:19042:19047	831983	0	True				
ANR	832005	PostIncDecOperationExpression	str ++		831983	0					
ANR	832006	Identifier	str		831983	0					
ANR	832007	IncDec	++		831983	1					
ANR	832008	ReturnStatement	"return * str == '""' ;"	840:1:19054:19072	831983	2	True				
ANR	832009	EqualityExpression	"* str == '""'"		831983	0		==			
ANR	832010	UnaryOperationExpression	* str		831983	0					
ANR	832011	UnaryOperator	*		831983	0					
ANR	832012	Identifier	str		831983	1					
ANR	832013	PrimaryExpression	"'""'"		831983	1					
ANR	832014	ReturnType	bool		831983	1					
ANR	832015	Identifier	ArgList :: IsV2QuotedString		831983	2					
ANR	832016	ParameterList	char const * str		831983	3					
ANR	832017	Parameter	char const * str	831:26:18942:18956	831983	0	True				
ANR	832018	ParameterType	char const *		831983	0					
ANR	832019	Identifier	str		831983	1					
ANR	832020	CFGEntryNode	ENTRY		831983		True				
ANR	832021	CFGExitNode	EXIT		831983		True				
ANR	832022	Symbol	str		831983						
ANR	832023	Symbol	false		831983						
ANR	832024	Symbol	isspace		831983						
ANR	832025	Symbol	* str		831983						
ANR	832026	Function	ArgList :: V2QuotedToV2Raw	843:0:19077:20201							
ANR	832027	FunctionDef	"ArgList :: V2QuotedToV2Raw (char const * v1_input , MyString * v2_raw , MyString * errmsg)"		832026	0					
ANR	832028	CompoundStatement		845:0:19163:20201	832026	0					
ANR	832029	IfStatement	if ( ! v1_input )		832026	0					
ANR	832030	Condition	! v1_input	846:4:19169:19177	832026	0	True				
ANR	832031	UnaryOperationExpression	! v1_input		832026	0					
ANR	832032	UnaryOperator	!		832026	0					
ANR	832033	Identifier	v1_input		832026	1					
ANR	832034	ReturnStatement	return true ;	846:15:19180:19191	832026	1	True				
ANR	832035	Identifier	true		832026	0					
ANR	832036	ExpressionStatement	ASSERT ( v2_raw )	847:1:19194:19208	832026	1	True				
ANR	832037	CallExpression	ASSERT ( v2_raw )		832026	0					
ANR	832038	Callee	ASSERT		832026	0					
ANR	832039	Identifier	ASSERT		832026	0					
ANR	832040	ArgumentList	v2_raw		832026	1					
ANR	832041	Argument	v2_raw		832026	0					
ANR	832042	Identifier	v2_raw		832026	0					
ANR	832043	WhileStatement	while ( isspace ( * v1_input ) )		832026	2					
ANR	832044	Condition	isspace ( * v1_input )	850:7:19248:19265	832026	0	True				
ANR	832045	CallExpression	isspace ( * v1_input )		832026	0					
ANR	832046	Callee	isspace		832026	0					
ANR	832047	Identifier	isspace		832026	0					
ANR	832048	ArgumentList	* v1_input		832026	1					
ANR	832049	Argument	* v1_input		832026	0					
ANR	832050	UnaryOperationExpression	* v1_input		832026	0					
ANR	832051	UnaryOperator	*		832026	0					
ANR	832052	Identifier	v1_input		832026	1					
ANR	832053	CompoundStatement		6:27:104:104	832026	1					
ANR	832054	ExpressionStatement	v1_input ++	851:2:19272:19282	832026	0	True				
ANR	832055	PostIncDecOperationExpression	v1_input ++		832026	0					
ANR	832056	Identifier	v1_input		832026	0					
ANR	832057	IncDec	++		832026	1					
ANR	832058	ExpressionStatement	ASSERT ( IsV2QuotedString ( v1_input ) )	854:1:19289:19323	832026	3	True				
ANR	832059	CallExpression	ASSERT ( IsV2QuotedString ( v1_input ) )		832026	0					
ANR	832060	Callee	ASSERT		832026	0					
ANR	832061	Identifier	ASSERT		832026	0					
ANR	832062	ArgumentList	IsV2QuotedString ( v1_input )		832026	1					
ANR	832063	Argument	IsV2QuotedString ( v1_input )		832026	0					
ANR	832064	CallExpression	IsV2QuotedString ( v1_input )		832026	0					
ANR	832065	Callee	IsV2QuotedString		832026	0					
ANR	832066	Identifier	IsV2QuotedString		832026	0					
ANR	832067	ArgumentList	v1_input		832026	1					
ANR	832068	Argument	v1_input		832026	0					
ANR	832069	Identifier	v1_input		832026	0					
ANR	832070	ExpressionStatement	"ASSERT ( * v1_input == '""' )"	855:1:19326:19350	832026	4	True				
ANR	832071	CallExpression	"ASSERT ( * v1_input == '""' )"		832026	0					
ANR	832072	Callee	ASSERT		832026	0					
ANR	832073	Identifier	ASSERT		832026	0					
ANR	832074	ArgumentList	"* v1_input == '""'"		832026	1					
ANR	832075	Argument	"* v1_input == '""'"		832026	0					
ANR	832076	EqualityExpression	"* v1_input == '""'"		832026	0		==			
ANR	832077	UnaryOperationExpression	* v1_input		832026	0					
ANR	832078	UnaryOperator	*		832026	0					
ANR	832079	Identifier	v1_input		832026	1					
ANR	832080	PrimaryExpression	"'""'"		832026	1					
ANR	832081	ExpressionStatement	v1_input ++	856:1:19353:19363	832026	5	True				
ANR	832082	PostIncDecOperationExpression	v1_input ++		832026	0					
ANR	832083	Identifier	v1_input		832026	0					
ANR	832084	IncDec	++		832026	1					
ANR	832085	IdentifierDeclStatement	const char * quote_terminated = NULL ;	858:1:19367:19402	832026	6	True				
ANR	832086	IdentifierDecl	* quote_terminated = NULL		832026	0					
ANR	832087	IdentifierDeclType	const char *		832026	0					
ANR	832088	Identifier	quote_terminated		832026	1					
ANR	832089	AssignmentExpression	* quote_terminated = NULL		832026	2		=			
ANR	832090	Identifier	NULL		832026	0					
ANR	832091	Identifier	NULL		832026	1					
ANR	832092	WhileStatement	while ( * v1_input )		832026	7					
ANR	832093	Condition	* v1_input	859:7:19411:19419	832026	0	True				
ANR	832094	UnaryOperationExpression	* v1_input		832026	0					
ANR	832095	UnaryOperator	*		832026	0					
ANR	832096	Identifier	v1_input		832026	1					
ANR	832097	CompoundStatement		15:18:258:258	832026	1					
ANR	832098	IfStatement	"if ( * v1_input == '""' )"		832026	0					
ANR	832099	Condition	"* v1_input == '""'"	860:5:19429:19444	832026	0	True				
ANR	832100	EqualityExpression	"* v1_input == '""'"		832026	0		==			
ANR	832101	UnaryOperationExpression	* v1_input		832026	0					
ANR	832102	UnaryOperator	*		832026	0					
ANR	832103	Identifier	v1_input		832026	1					
ANR	832104	PrimaryExpression	"'""'"		832026	1					
ANR	832105	CompoundStatement		16:23:283:283	832026	1					
ANR	832106	ExpressionStatement	v1_input ++	861:3:19452:19462	832026	0	True				
ANR	832107	PostIncDecOperationExpression	v1_input ++		832026	0					
ANR	832108	Identifier	v1_input		832026	0					
ANR	832109	IncDec	++		832026	1					
ANR	832110	IfStatement	"if ( * v1_input == '""' )"		832026	1					
ANR	832111	Condition	"* v1_input == '""'"	862:6:19470:19485	832026	0	True				
ANR	832112	EqualityExpression	"* v1_input == '""'"		832026	0		==			
ANR	832113	UnaryOperationExpression	* v1_input		832026	0					
ANR	832114	UnaryOperator	*		832026	0					
ANR	832115	Identifier	v1_input		832026	1					
ANR	832116	PrimaryExpression	"'""'"		832026	1					
ANR	832117	CompoundStatement		18:24:324:324	832026	1					
ANR	832118	ExpressionStatement	( * v2_raw ) += * ( v1_input ++ )	864:4:19540:19566	832026	0	True				
ANR	832119	AssignmentExpression	( * v2_raw ) += * ( v1_input ++ )		832026	0		+=			
ANR	832120	UnaryOperationExpression	* v2_raw		832026	0					
ANR	832121	UnaryOperator	*		832026	0					
ANR	832122	Identifier	v2_raw		832026	1					
ANR	832123	UnaryOperationExpression	* ( v1_input ++ )		832026	1					
ANR	832124	UnaryOperator	*		832026	0					
ANR	832125	PostIncDecOperationExpression	v1_input ++		832026	1					
ANR	832126	Identifier	v1_input		832026	0					
ANR	832127	IncDec	++		832026	1					
ANR	832128	ElseStatement	else		832026	0					
ANR	832129	CompoundStatement		22:8:417:417	832026	0					
ANR	832130	ExpressionStatement	quote_terminated = v1_input - 1	867:4:19587:19616	832026	0	True				
ANR	832131	AssignmentExpression	quote_terminated = v1_input - 1		832026	0		=			
ANR	832132	Identifier	quote_terminated		832026	0					
ANR	832133	AdditiveExpression	v1_input - 1		832026	1		-			
ANR	832134	Identifier	v1_input		832026	0					
ANR	832135	PrimaryExpression	1		832026	1					
ANR	832136	BreakStatement	break ;	868:4:19622:19627	832026	1	True				
ANR	832137	ElseStatement	else		832026	0					
ANR	832138	CompoundStatement		27:7:481:481	832026	0					
ANR	832139	ExpressionStatement	( * v2_raw ) += * ( v1_input ++ )	872:3:19650:19676	832026	0	True				
ANR	832140	AssignmentExpression	( * v2_raw ) += * ( v1_input ++ )		832026	0		+=			
ANR	832141	UnaryOperationExpression	* v2_raw		832026	0					
ANR	832142	UnaryOperator	*		832026	0					
ANR	832143	Identifier	v2_raw		832026	1					
ANR	832144	UnaryOperationExpression	* ( v1_input ++ )		832026	1					
ANR	832145	UnaryOperator	*		832026	0					
ANR	832146	PostIncDecOperationExpression	v1_input ++		832026	1					
ANR	832147	Identifier	v1_input		832026	0					
ANR	832148	IncDec	++		832026	1					
ANR	832149	IfStatement	if ( ! quote_terminated )		832026	8					
ANR	832150	Condition	! quote_terminated	876:4:19690:19706	832026	0	True				
ANR	832151	UnaryOperationExpression	! quote_terminated		832026	0					
ANR	832152	UnaryOperator	!		832026	0					
ANR	832153	Identifier	quote_terminated		832026	1					
ANR	832154	CompoundStatement		32:23:545:545	832026	1					
ANR	832155	ExpressionStatement	"AddErrorMessage ( ""Unterminated double-quote."" , errmsg )"	877:2:19713:19765	832026	0	True				
ANR	832156	CallExpression	"AddErrorMessage ( ""Unterminated double-quote."" , errmsg )"		832026	0					
ANR	832157	Callee	AddErrorMessage		832026	0					
ANR	832158	Identifier	AddErrorMessage		832026	0					
ANR	832159	ArgumentList	"""Unterminated double-quote."""		832026	1					
ANR	832160	Argument	"""Unterminated double-quote."""		832026	0					
ANR	832161	PrimaryExpression	"""Unterminated double-quote."""		832026	0					
ANR	832162	Argument	errmsg		832026	1					
ANR	832163	Identifier	errmsg		832026	0					
ANR	832164	ReturnStatement	return false ;	878:2:19769:19781	832026	1	True				
ANR	832165	Identifier	false		832026	0					
ANR	832166	WhileStatement	while ( isspace ( * v1_input ) )		832026	9					
ANR	832167	Condition	isspace ( * v1_input )	882:7:19825:19842	832026	0	True				
ANR	832168	CallExpression	isspace ( * v1_input )		832026	0					
ANR	832169	Callee	isspace		832026	0					
ANR	832170	Identifier	isspace		832026	0					
ANR	832171	ArgumentList	* v1_input		832026	1					
ANR	832172	Argument	* v1_input		832026	0					
ANR	832173	UnaryOperationExpression	* v1_input		832026	0					
ANR	832174	UnaryOperator	*		832026	0					
ANR	832175	Identifier	v1_input		832026	1					
ANR	832176	CompoundStatement		38:27:681:681	832026	1					
ANR	832177	ExpressionStatement	v1_input ++	883:2:19849:19859	832026	0	True				
ANR	832178	PostIncDecOperationExpression	v1_input ++		832026	0					
ANR	832179	Identifier	v1_input		832026	0					
ANR	832180	IncDec	++		832026	1					
ANR	832181	IfStatement	if ( * v1_input )		832026	10					
ANR	832182	Condition	* v1_input	886:4:19869:19877	832026	0	True				
ANR	832183	UnaryOperationExpression	* v1_input		832026	0					
ANR	832184	UnaryOperator	*		832026	0					
ANR	832185	Identifier	v1_input		832026	1					
ANR	832186	CompoundStatement		42:15:716:716	832026	1					
ANR	832187	IfStatement	if ( errmsg )		832026	0					
ANR	832188	Condition	errmsg	887:5:19887:19892	832026	0	True				
ANR	832189	Identifier	errmsg		832026	0					
ANR	832190	CompoundStatement		44:3:736:748	832026	1					
ANR	832191	IdentifierDeclStatement	MyString msg ;	888:3:19900:19912	832026	0	True				
ANR	832192	IdentifierDecl	msg		832026	0					
ANR	832193	IdentifierDeclType	MyString		832026	0					
ANR	832194	Identifier	msg		832026	1					
ANR	832195	Statement	msg	889:3:19917:19919	832026	1	True				
ANR	832196	Statement	.	889:6:19920:19920	832026	2	True				
ANR	832197	Statement	sprintf	889:7:19921:19927	832026	3	True				
ANR	832198	Statement	(	889:14:19928:19928	832026	4	True				
ANR	832199	Statement	"""Unexpected characters following double-quote.  """	890:4:19934:19982	832026	5	True				
ANR	832200	Statement	"""Did you forget to escape the double-quote by repeating it?  """	891:4:19988:20049	832026	6	True				
ANR	832201	Statement	"""Here is the quote and trailing characters: %s\\n"""	892:4:20055:20103	832026	7	True				
ANR	832202	Statement	","	892:53:20104:20104	832026	8	True				
ANR	832203	Statement	quote_terminated	892:54:20105:20120	832026	9	True				
ANR	832204	Statement	)	892:70:20121:20121	832026	10	True				
ANR	832205	ExpressionStatement		892:71:20122:20122	832026	11	True				
ANR	832206	ExpressionStatement	"AddErrorMessage ( msg . Value ( ) , errmsg )"	893:3:20127:20162	832026	12	True				
ANR	832207	CallExpression	"AddErrorMessage ( msg . Value ( ) , errmsg )"		832026	0					
ANR	832208	Callee	AddErrorMessage		832026	0					
ANR	832209	Identifier	AddErrorMessage		832026	0					
ANR	832210	ArgumentList	msg . Value ( )		832026	1					
ANR	832211	Argument	msg . Value ( )		832026	0					
ANR	832212	CallExpression	msg . Value ( )		832026	0					
ANR	832213	Callee	msg . Value		832026	0					
ANR	832214	MemberAccess	msg . Value		832026	0					
ANR	832215	Identifier	msg		832026	0					
ANR	832216	Identifier	Value		832026	1					
ANR	832217	ArgumentList			832026	1					
ANR	832218	Argument	errmsg		832026	1					
ANR	832219	Identifier	errmsg		832026	0					
ANR	832220	ReturnStatement	return false ;	895:2:20170:20182	832026	1	True				
ANR	832221	Identifier	false		832026	0					
ANR	832222	ReturnStatement	return true ;	897:1:20188:20199	832026	11	True				
ANR	832223	Identifier	true		832026	0					
ANR	832224	ReturnType	bool		832026	1					
ANR	832225	Identifier	ArgList :: V2QuotedToV2Raw		832026	2					
ANR	832226	ParameterList	"char const * v1_input , MyString * v2_raw , MyString * errmsg"		832026	3					
ANR	832227	Parameter	char const * v1_input	844:25:19107:19126	832026	0	True				
ANR	832228	ParameterType	char const *		832026	0					
ANR	832229	Identifier	v1_input		832026	1					
ANR	832230	Parameter	MyString * v2_raw	844:46:19128:19143	832026	1	True				
ANR	832231	ParameterType	MyString *		832026	0					
ANR	832232	Identifier	v2_raw		832026	1					
ANR	832233	Parameter	MyString * errmsg	844:63:19145:19160	832026	2	True				
ANR	832234	ParameterType	MyString *		832026	0					
ANR	832235	Identifier	errmsg		832026	1					
ANR	832236	CFGEntryNode	ENTRY		832026		True				
ANR	832237	CFGExitNode	EXIT		832026		True				
ANR	832238	Symbol	msg		832026						
ANR	832239	Symbol	NULL		832026						
ANR	832240	Symbol	quote_terminated		832026						
ANR	832241	Symbol	isspace		832026						
ANR	832242	Symbol	IsV2QuotedString		832026						
ANR	832243	Symbol	false		832026						
ANR	832244	Symbol	errmsg		832026						
ANR	832245	Symbol	v2_raw		832026						
ANR	832246	Symbol	msg . Value		832026						
ANR	832247	Symbol	* v1_input		832026						
ANR	832248	Symbol	v1_input		832026						
ANR	832249	Symbol	true		832026						
ANR	832250	Symbol	* ( v1_input ++ )		832026						
ANR	832251	Symbol	* v2_raw		832026						
ANR	832252	Function	ArgList :: V1WackedToV1Raw	900:0:20204:20786							
ANR	832253	FunctionDef	"ArgList :: V1WackedToV1Raw (char const * v1_input , MyString * v1_raw , MyString * errmsg)"		832252	0					
ANR	832254	CompoundStatement		902:0:20290:20786	832252	0					
ANR	832255	IfStatement	if ( ! v1_input )		832252	0					
ANR	832256	Condition	! v1_input	903:4:20296:20304	832252	0	True				
ANR	832257	UnaryOperationExpression	! v1_input		832252	0					
ANR	832258	UnaryOperator	!		832252	0					
ANR	832259	Identifier	v1_input		832252	1					
ANR	832260	ReturnStatement	return true ;	903:15:20307:20318	832252	1	True				
ANR	832261	Identifier	true		832252	0					
ANR	832262	ExpressionStatement	ASSERT ( v1_raw )	904:1:20321:20335	832252	1	True				
ANR	832263	CallExpression	ASSERT ( v1_raw )		832252	0					
ANR	832264	Callee	ASSERT		832252	0					
ANR	832265	Identifier	ASSERT		832252	0					
ANR	832266	ArgumentList	v1_raw		832252	1					
ANR	832267	Argument	v1_raw		832252	0					
ANR	832268	Identifier	v1_raw		832252	0					
ANR	832269	ExpressionStatement	ASSERT ( ! IsV2QuotedString ( v1_input ) )	905:1:20338:20373	832252	2	True				
ANR	832270	CallExpression	ASSERT ( ! IsV2QuotedString ( v1_input ) )		832252	0					
ANR	832271	Callee	ASSERT		832252	0					
ANR	832272	Identifier	ASSERT		832252	0					
ANR	832273	ArgumentList	! IsV2QuotedString ( v1_input )		832252	1					
ANR	832274	Argument	! IsV2QuotedString ( v1_input )		832252	0					
ANR	832275	UnaryOperationExpression	! IsV2QuotedString ( v1_input )		832252	0					
ANR	832276	UnaryOperator	!		832252	0					
ANR	832277	CallExpression	IsV2QuotedString ( v1_input )		832252	1					
ANR	832278	Callee	IsV2QuotedString		832252	0					
ANR	832279	Identifier	IsV2QuotedString		832252	0					
ANR	832280	ArgumentList	v1_input		832252	1					
ANR	832281	Argument	v1_input		832252	0					
ANR	832282	Identifier	v1_input		832252	0					
ANR	832283	WhileStatement	while ( * v1_input )		832252	3					
ANR	832284	Condition	* v1_input	907:7:20383:20391	832252	0	True				
ANR	832285	UnaryOperationExpression	* v1_input		832252	0					
ANR	832286	UnaryOperator	*		832252	0					
ANR	832287	Identifier	v1_input		832252	1					
ANR	832288	CompoundStatement		6:18:103:103	832252	1					
ANR	832289	IfStatement	"if ( * v1_input == '""' )"		832252	0					
ANR	832290	Condition	"* v1_input == '""'"	908:5:20401:20416	832252	0	True				
ANR	832291	EqualityExpression	"* v1_input == '""'"		832252	0		==			
ANR	832292	UnaryOperationExpression	* v1_input		832252	0					
ANR	832293	UnaryOperator	*		832252	0					
ANR	832294	Identifier	v1_input		832252	1					
ANR	832295	PrimaryExpression	"'""'"		832252	1					
ANR	832296	CompoundStatement		7:23:128:128	832252	1					
ANR	832297	IfStatement	if ( errmsg )		832252	0					
ANR	832298	Condition	errmsg	909:6:20427:20432	832252	0	True				
ANR	832299	Identifier	errmsg		832252	0					
ANR	832300	CompoundStatement		9:4:150:162	832252	1					
ANR	832301	IdentifierDeclStatement	MyString msg ;	910:4:20441:20453	832252	0	True				
ANR	832302	IdentifierDecl	msg		832252	0					
ANR	832303	IdentifierDeclType	MyString		832252	0					
ANR	832304	Identifier	msg		832252	1					
ANR	832305	ExpressionStatement	"msg . sprintf ( ""Found illegal unescaped double-quote: %s"" , v1_input )"	911:4:20459:20523	832252	1	True				
ANR	832306	CallExpression	"msg . sprintf ( ""Found illegal unescaped double-quote: %s"" , v1_input )"		832252	0					
ANR	832307	Callee	msg . sprintf		832252	0					
ANR	832308	MemberAccess	msg . sprintf		832252	0					
ANR	832309	Identifier	msg		832252	0					
ANR	832310	Identifier	sprintf		832252	1					
ANR	832311	ArgumentList	"""Found illegal unescaped double-quote: %s"""		832252	1					
ANR	832312	Argument	"""Found illegal unescaped double-quote: %s"""		832252	0					
ANR	832313	PrimaryExpression	"""Found illegal unescaped double-quote: %s"""		832252	0					
ANR	832314	Argument	v1_input		832252	1					
ANR	832315	Identifier	v1_input		832252	0					
ANR	832316	ExpressionStatement	"AddErrorMessage ( msg . Value ( ) , errmsg )"	912:4:20529:20564	832252	2	True				
ANR	832317	CallExpression	"AddErrorMessage ( msg . Value ( ) , errmsg )"		832252	0					
ANR	832318	Callee	AddErrorMessage		832252	0					
ANR	832319	Identifier	AddErrorMessage		832252	0					
ANR	832320	ArgumentList	msg . Value ( )		832252	1					
ANR	832321	Argument	msg . Value ( )		832252	0					
ANR	832322	CallExpression	msg . Value ( )		832252	0					
ANR	832323	Callee	msg . Value		832252	0					
ANR	832324	MemberAccess	msg . Value		832252	0					
ANR	832325	Identifier	msg		832252	0					
ANR	832326	Identifier	Value		832252	1					
ANR	832327	ArgumentList			832252	1					
ANR	832328	Argument	errmsg		832252	1					
ANR	832329	Identifier	errmsg		832252	0					
ANR	832330	ReturnStatement	return false ;	914:3:20574:20586	832252	1	True				
ANR	832331	Identifier	false		832252	0					
ANR	832332	ElseStatement	else		832252	0					
ANR	832333	IfStatement	"if ( v1_input [ 0 ] == '\\\\' && v1_input [ 1 ] == '""' )"		832252	0					
ANR	832334	Condition	"v1_input [ 0 ] == '\\\\' && v1_input [ 1 ] == '""'"	916:10:20602:20642	832252	0	True				
ANR	832335	AndExpression	"v1_input [ 0 ] == '\\\\' && v1_input [ 1 ] == '""'"		832252	0		&&			
ANR	832336	EqualityExpression	v1_input [ 0 ] == '\\\\'		832252	0		==			
ANR	832337	ArrayIndexing	v1_input [ 0 ]		832252	0					
ANR	832338	Identifier	v1_input		832252	0					
ANR	832339	PrimaryExpression	0		832252	1					
ANR	832340	PrimaryExpression	'\\\\'		832252	1					
ANR	832341	EqualityExpression	"v1_input [ 1 ] == '""'"		832252	1		==			
ANR	832342	ArrayIndexing	v1_input [ 1 ]		832252	0					
ANR	832343	Identifier	v1_input		832252	0					
ANR	832344	PrimaryExpression	1		832252	1					
ANR	832345	PrimaryExpression	"'""'"		832252	1					
ANR	832346	CompoundStatement		15:53:354:354	832252	1					
ANR	832347	ExpressionStatement	v1_input ++	918:3:20678:20688	832252	0	True				
ANR	832348	PostIncDecOperationExpression	v1_input ++		832252	0					
ANR	832349	Identifier	v1_input		832252	0					
ANR	832350	IncDec	++		832252	1					
ANR	832351	ExpressionStatement	( * v1_raw ) += * ( v1_input ++ )	919:3:20693:20719	832252	1	True				
ANR	832352	AssignmentExpression	( * v1_raw ) += * ( v1_input ++ )		832252	0		+=			
ANR	832353	UnaryOperationExpression	* v1_raw		832252	0					
ANR	832354	UnaryOperator	*		832252	0					
ANR	832355	Identifier	v1_raw		832252	1					
ANR	832356	UnaryOperationExpression	* ( v1_input ++ )		832252	1					
ANR	832357	UnaryOperator	*		832252	0					
ANR	832358	PostIncDecOperationExpression	v1_input ++		832252	1					
ANR	832359	Identifier	v1_input		832252	0					
ANR	832360	IncDec	++		832252	1					
ANR	832361	ElseStatement	else		832252	0					
ANR	832362	CompoundStatement		20:7:441:441	832252	0					
ANR	832363	ExpressionStatement	( * v1_raw ) += * ( v1_input ++ )	922:3:20737:20763	832252	0	True				
ANR	832364	AssignmentExpression	( * v1_raw ) += * ( v1_input ++ )		832252	0		+=			
ANR	832365	UnaryOperationExpression	* v1_raw		832252	0					
ANR	832366	UnaryOperator	*		832252	0					
ANR	832367	Identifier	v1_raw		832252	1					
ANR	832368	UnaryOperationExpression	* ( v1_input ++ )		832252	1					
ANR	832369	UnaryOperator	*		832252	0					
ANR	832370	PostIncDecOperationExpression	v1_input ++		832252	1					
ANR	832371	Identifier	v1_input		832252	0					
ANR	832372	IncDec	++		832252	1					
ANR	832373	ReturnStatement	return true ;	925:1:20773:20784	832252	4	True				
ANR	832374	Identifier	true		832252	0					
ANR	832375	ReturnType	bool		832252	1					
ANR	832376	Identifier	ArgList :: V1WackedToV1Raw		832252	2					
ANR	832377	ParameterList	"char const * v1_input , MyString * v1_raw , MyString * errmsg"		832252	3					
ANR	832378	Parameter	char const * v1_input	901:25:20234:20253	832252	0	True				
ANR	832379	ParameterType	char const *		832252	0					
ANR	832380	Identifier	v1_input		832252	1					
ANR	832381	Parameter	MyString * v1_raw	901:46:20255:20270	832252	1	True				
ANR	832382	ParameterType	MyString *		832252	0					
ANR	832383	Identifier	v1_raw		832252	1					
ANR	832384	Parameter	MyString * errmsg	901:63:20272:20287	832252	2	True				
ANR	832385	ParameterType	MyString *		832252	0					
ANR	832386	Identifier	errmsg		832252	1					
ANR	832387	CFGEntryNode	ENTRY		832252		True				
ANR	832388	CFGExitNode	EXIT		832252		True				
ANR	832389	Symbol	msg		832252						
ANR	832390	Symbol	* v1_input		832252						
ANR	832391	Symbol	v1_input		832252						
ANR	832392	Symbol	true		832252						
ANR	832393	Symbol	IsV2QuotedString		832252						
ANR	832394	Symbol	false		832252						
ANR	832395	Symbol	* ( v1_input ++ )		832252						
ANR	832396	Symbol	errmsg		832252						
ANR	832397	Symbol	* v1_raw		832252						
ANR	832398	Symbol	v1_raw		832252						
ANR	832399	Symbol	msg . Value		832252						
ANR	832400	Function	ArgList :: SetArgV1Syntax	928:0:20789:20885							
ANR	832401	FunctionDef	ArgList :: SetArgV1Syntax (ArgV1Syntax v1_syntax_param)		832400	0					
ANR	832402	CompoundStatement		930:0:20847:20885	832400	0					
ANR	832403	ExpressionStatement	this -> v1_syntax = v1_syntax_param	931:1:20850:20883	832400	0	True				
ANR	832404	AssignmentExpression	this -> v1_syntax = v1_syntax_param		832400	0		=			
ANR	832405	PtrMemberAccess	this -> v1_syntax		832400	0					
ANR	832406	Identifier	this		832400	0					
ANR	832407	Identifier	v1_syntax		832400	1					
ANR	832408	Identifier	v1_syntax_param		832400	1					
ANR	832409	ReturnType	void		832400	1					
ANR	832410	Identifier	ArgList :: SetArgV1Syntax		832400	2					
ANR	832411	ParameterList	ArgV1Syntax v1_syntax_param		832400	3					
ANR	832412	Parameter	ArgV1Syntax v1_syntax_param	929:24:20818:20844	832400	0	True				
ANR	832413	ParameterType	ArgV1Syntax		832400	0					
ANR	832414	Identifier	v1_syntax_param		832400	1					
ANR	832415	CFGEntryNode	ENTRY		832400		True				
ANR	832416	CFGExitNode	EXIT		832400		True				
ANR	832417	Symbol	* this		832400						
ANR	832418	Symbol	this		832400						
ANR	832419	Symbol	v1_syntax_param		832400						
ANR	832420	Symbol	this -> v1_syntax		832400						
ANR	832421	Function	ArgList :: SetArgV1SyntaxToCurrentPlatform	934:0:20888:21029							
ANR	832422	FunctionDef	ArgList :: SetArgV1SyntaxToCurrentPlatform ()		832421	0					
ANR	832423	CompoundStatement		936:0:20936:21029	832421	0					
ANR	832424	ExpressionStatement	v1_syntax = WIN32_ARGV1_SYNTAX	938:1:20952:20982	832421	0	True				
ANR	832425	AssignmentExpression	v1_syntax = WIN32_ARGV1_SYNTAX		832421	0		=			
ANR	832426	Identifier	v1_syntax		832421	0					
ANR	832427	Identifier	WIN32_ARGV1_SYNTAX		832421	1					
ANR	832428	ReturnType	void		832421	1					
ANR	832429	Identifier	ArgList :: SetArgV1SyntaxToCurrentPlatform		832421	2					
ANR	832430	ParameterList			832421	3					
ANR	832431	CFGEntryNode	ENTRY		832421		True				
ANR	832432	CFGExitNode	EXIT		832421		True				
ANR	832433	Symbol	v1_syntax		832421						
ANR	832434	Symbol	WIN32_ARGV1_SYNTAX		832421						
ANR	832435	Function	ArgList :: GetArgsStringSystem	944:0:21032:21507							
ANR	832436	FunctionDef	"ArgList :: GetArgsStringSystem (MyString * result , int skip_args , MyString * error_msg)"		832435	0					
ANR	832437	CompoundStatement		946:0:21124:21507	832435	0					
ANR	832438	ReturnStatement	"return GetArgsStringWin32 ( result , skip_args , error_msg ) ;"	948:1:21140:21193	832435	0	True				
ANR	832439	CallExpression	"GetArgsStringWin32 ( result , skip_args , error_msg )"		832435	0					
ANR	832440	Callee	GetArgsStringWin32		832435	0					
ANR	832441	Identifier	GetArgsStringWin32		832435	0					
ANR	832442	ArgumentList	result		832435	1					
ANR	832443	Argument	result		832435	0					
ANR	832444	Identifier	result		832435	0					
ANR	832445	Argument	skip_args		832435	1					
ANR	832446	Identifier	skip_args		832435	0					
ANR	832447	Argument	error_msg		832435	2					
ANR	832448	Identifier	error_msg		832435	0					
ANR	832449	ReturnType	bool		832435	1					
ANR	832450	Identifier	ArgList :: GetArgsStringSystem		832435	2					
ANR	832451	ParameterList	"MyString * result , int skip_args , MyString * error_msg"		832435	3					
ANR	832452	Parameter	MyString * result	945:29:21066:21081	832435	0	True				
ANR	832453	ParameterType	MyString *		832435	0					
ANR	832454	Identifier	result		832435	1					
ANR	832455	Parameter	int skip_args	945:46:21083:21095	832435	1	True				
ANR	832456	ParameterType	int		832435	0					
ANR	832457	Identifier	skip_args		832435	1					
ANR	832458	Parameter	MyString * error_msg	945:60:21097:21115	832435	2	True				
ANR	832459	ParameterType	MyString *		832435	0					
ANR	832460	Identifier	error_msg		832435	1					
ANR	832461	CFGEntryNode	ENTRY		832435		True				
ANR	832462	CFGExitNode	EXIT		832435		True				
ANR	832463	Symbol	result		832435						
ANR	832464	Symbol	error_msg		832435						
ANR	832465	Symbol	GetArgsStringWin32		832435						
ANR	832466	Symbol	skip_args		832435						
