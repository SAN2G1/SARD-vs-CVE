command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1276763	File	data/converged/CVE-2011-4930_htcondor/driver.cpp								
ANR	1276764	Function	main	28:0:878:1509							
ANR	1276765	FunctionDef	"main (int argc , char * argv [ ])"		1276764	0					
ANR	1276766	CompoundStatement		29:0:909:1509	1276764	0					
ANR	1276767	IdentifierDeclStatement	char buf [ 1024 ] ;	30:1:912:926	1276764	0	True				
ANR	1276768	IdentifierDecl	buf [ 1024 ]		1276764	0					
ANR	1276769	IdentifierDeclType	char [ 1024 ]		1276764	0					
ANR	1276770	Identifier	buf		1276764	1					
ANR	1276771	PrimaryExpression	1024		1276764	2					
ANR	1276772	IdentifierDeclStatement	char * * vec ;	31:1:929:939	1276764	1	True				
ANR	1276773	IdentifierDecl	* * vec		1276764	0					
ANR	1276774	IdentifierDeclType	char * *		1276764	0					
ANR	1276775	Identifier	vec		1276764	1					
ANR	1276776	IdentifierDeclStatement	char * answer ;	32:1:942:954	1276764	2	True				
ANR	1276777	IdentifierDecl	* answer		1276764	0					
ANR	1276778	IdentifierDeclType	char *		1276764	0					
ANR	1276779	Identifier	answer		1276764	1					
ANR	1276780	IdentifierDeclStatement	Environ foo ;	33:1:957:968	1276764	3	True				
ANR	1276781	IdentifierDecl	foo		1276764	0					
ANR	1276782	IdentifierDeclType	Environ		1276764	0					
ANR	1276783	Identifier	foo		1276764	1					
ANR	1276784	IdentifierDeclStatement	Environ bar ;	34:1:971:982	1276764	4	True				
ANR	1276785	IdentifierDecl	bar		1276764	0					
ANR	1276786	IdentifierDeclType	Environ		1276764	0					
ANR	1276787	Identifier	bar		1276764	1					
ANR	1276788	IdentifierDeclStatement	FILE * fp ;	35:1:985:993	1276764	5	True				
ANR	1276789	IdentifierDecl	* fp		1276764	0					
ANR	1276790	IdentifierDeclType	FILE *		1276764	0					
ANR	1276791	Identifier	fp		1276764	1					
ANR	1276792	IfStatement	if ( argc != 2 )		1276764	6					
ANR	1276793	Condition	argc != 2	37:5:1001:1009	1276764	0	True				
ANR	1276794	EqualityExpression	argc != 2		1276764	0		!=			
ANR	1276795	Identifier	argc		1276764	0					
ANR	1276796	PrimaryExpression	2		1276764	1					
ANR	1276797	CompoundStatement		9:17:103:103	1276764	1					
ANR	1276798	ExpressionStatement	"printf ( ""Usage: %s filename\\n"" )"	38:2:1017:1049	1276764	0	True				
ANR	1276799	CallExpression	"printf ( ""Usage: %s filename\\n"" )"		1276764	0					
ANR	1276800	Callee	printf		1276764	0					
ANR	1276801	Identifier	printf		1276764	0					
ANR	1276802	ArgumentList	"""Usage: %s filename\\n"""		1276764	1					
ANR	1276803	Argument	"""Usage: %s filename\\n"""		1276764	0					
ANR	1276804	PrimaryExpression	"""Usage: %s filename\\n"""		1276764	0					
ANR	1276805	ReturnStatement	return 1 ;	39:2:1053:1061	1276764	1	True				
ANR	1276806	PrimaryExpression	1		1276764	0					
ANR	1276807	IfStatement	"if ( ( fp = fopen ( argv [ 1 ] , ""r"" ) ) == NULL )"		1276764	7					
ANR	1276808	Condition	"( fp = fopen ( argv [ 1 ] , ""r"" ) ) == NULL"	42:5:1072:1102	1276764	0	True				
ANR	1276809	EqualityExpression	"( fp = fopen ( argv [ 1 ] , ""r"" ) ) == NULL"		1276764	0		==			
ANR	1276810	AssignmentExpression	"fp = fopen ( argv [ 1 ] , ""r"" )"		1276764	0		=			
ANR	1276811	Identifier	fp		1276764	0					
ANR	1276812	CallExpression	"fopen ( argv [ 1 ] , ""r"" )"		1276764	1					
ANR	1276813	Callee	fopen		1276764	0					
ANR	1276814	Identifier	fopen		1276764	0					
ANR	1276815	ArgumentList	argv [ 1 ]		1276764	1					
ANR	1276816	Argument	argv [ 1 ]		1276764	0					
ANR	1276817	ArrayIndexing	argv [ 1 ]		1276764	0					
ANR	1276818	Identifier	argv		1276764	0					
ANR	1276819	PrimaryExpression	1		1276764	1					
ANR	1276820	Argument	"""r"""		1276764	1					
ANR	1276821	PrimaryExpression	"""r"""		1276764	0					
ANR	1276822	Identifier	NULL		1276764	1					
ANR	1276823	CompoundStatement		14:39:196:196	1276764	1					
ANR	1276824	ExpressionStatement	perror ( argv [ 1 ] )	43:2:1110:1127	1276764	0	True				
ANR	1276825	CallExpression	perror ( argv [ 1 ] )		1276764	0					
ANR	1276826	Callee	perror		1276764	0					
ANR	1276827	Identifier	perror		1276764	0					
ANR	1276828	ArgumentList	argv [ 1 ]		1276764	1					
ANR	1276829	Argument	argv [ 1 ]		1276764	0					
ANR	1276830	ArrayIndexing	argv [ 1 ]		1276764	0					
ANR	1276831	Identifier	argv		1276764	0					
ANR	1276832	PrimaryExpression	1		1276764	1					
ANR	1276833	ReturnStatement	return 1 ;	44:2:1131:1139	1276764	1	True				
ANR	1276834	PrimaryExpression	1		1276764	0					
ANR	1276835	ExpressionStatement	"foo . add_string ( ""FOO=bar"" )"	47:1:1146:1173	1276764	8	True				
ANR	1276836	CallExpression	"foo . add_string ( ""FOO=bar"" )"		1276764	0					
ANR	1276837	Callee	foo . add_string		1276764	0					
ANR	1276838	MemberAccess	foo . add_string		1276764	0					
ANR	1276839	Identifier	foo		1276764	0					
ANR	1276840	Identifier	add_string		1276764	1					
ANR	1276841	ArgumentList	"""FOO=bar"""		1276764	1					
ANR	1276842	Argument	"""FOO=bar"""		1276764	0					
ANR	1276843	PrimaryExpression	"""FOO=bar"""		1276764	0					
ANR	1276844	ExpressionStatement	"foo . add_string ( ""BAR=glarch"" )"	48:1:1176:1206	1276764	9	True				
ANR	1276845	CallExpression	"foo . add_string ( ""BAR=glarch"" )"		1276764	0					
ANR	1276846	Callee	foo . add_string		1276764	0					
ANR	1276847	MemberAccess	foo . add_string		1276764	0					
ANR	1276848	Identifier	foo		1276764	0					
ANR	1276849	Identifier	add_string		1276764	1					
ANR	1276850	ArgumentList	"""BAR=glarch"""		1276764	1					
ANR	1276851	Argument	"""BAR=glarch"""		1276764	0					
ANR	1276852	PrimaryExpression	"""BAR=glarch"""		1276764	0					
ANR	1276853	ExpressionStatement	foo . display ( )	49:1:1209:1222	1276764	10	True				
ANR	1276854	CallExpression	foo . display ( )		1276764	0					
ANR	1276855	Callee	foo . display		1276764	0					
ANR	1276856	MemberAccess	foo . display		1276764	0					
ANR	1276857	Identifier	foo		1276764	0					
ANR	1276858	Identifier	display		1276764	1					
ANR	1276859	ArgumentList			1276764	1					
ANR	1276860	WhileStatement	"while ( fgets ( buf , sizeof ( buf ) , fp ) )"		1276764	11					
ANR	1276861	Condition	"fgets ( buf , sizeof ( buf ) , fp )"	51:8:1233:1257	1276764	0	True				
ANR	1276862	CallExpression	"fgets ( buf , sizeof ( buf ) , fp )"		1276764	0					
ANR	1276863	Callee	fgets		1276764	0					
ANR	1276864	Identifier	fgets		1276764	0					
ANR	1276865	ArgumentList	buf		1276764	1					
ANR	1276866	Argument	buf		1276764	0					
ANR	1276867	Identifier	buf		1276764	0					
ANR	1276868	Argument	sizeof ( buf )		1276764	1					
ANR	1276869	SizeofExpression	sizeof ( buf )		1276764	0					
ANR	1276870	Sizeof	sizeof		1276764	0					
ANR	1276871	SizeofOperand	buf		1276764	1					
ANR	1276872	Argument	fp		1276764	2					
ANR	1276873	Identifier	fp		1276764	0					
ANR	1276874	CompoundStatement		23:36:351:351	1276764	1					
ANR	1276875	ExpressionStatement	bar . add_string ( buf )	52:2:1265:1286	1276764	0	True				
ANR	1276876	CallExpression	bar . add_string ( buf )		1276764	0					
ANR	1276877	Callee	bar . add_string		1276764	0					
ANR	1276878	MemberAccess	bar . add_string		1276764	0					
ANR	1276879	Identifier	bar		1276764	0					
ANR	1276880	Identifier	add_string		1276764	1					
ANR	1276881	ArgumentList	buf		1276764	1					
ANR	1276882	Argument	buf		1276764	0					
ANR	1276883	Identifier	buf		1276764	0					
ANR	1276884	ExpressionStatement	vec = bar . get_vector ( )	54:1:1292:1314	1276764	12	True				
ANR	1276885	AssignmentExpression	vec = bar . get_vector ( )		1276764	0		=			
ANR	1276886	Identifier	vec		1276764	0					
ANR	1276887	CallExpression	bar . get_vector ( )		1276764	1					
ANR	1276888	Callee	bar . get_vector		1276764	0					
ANR	1276889	MemberAccess	bar . get_vector		1276764	0					
ANR	1276890	Identifier	bar		1276764	0					
ANR	1276891	Identifier	get_vector		1276764	1					
ANR	1276892	ArgumentList			1276764	1					
ANR	1276893	ForStatement	for ( ; * vec ; vec ++ )		1276764	13					
ANR	1276894	Condition	* vec	55:8:1324:1327	1276764	0	True				
ANR	1276895	UnaryOperationExpression	* vec		1276764	0					
ANR	1276896	UnaryOperator	*		1276764	0					
ANR	1276897	Identifier	vec		1276764	1					
ANR	1276898	PostIncDecOperationExpression	vec ++	55:14:1330:1334	1276764	1	True				
ANR	1276899	Identifier	vec		1276764	0					
ANR	1276900	IncDec	++		1276764	1					
ANR	1276901	CompoundStatement		27:22:428:428	1276764	2					
ANR	1276902	ExpressionStatement	"printf ( ""%s\\n"" , * vec )"	56:2:1342:1364	1276764	0	True				
ANR	1276903	CallExpression	"printf ( ""%s\\n"" , * vec )"		1276764	0					
ANR	1276904	Callee	printf		1276764	0					
ANR	1276905	Identifier	printf		1276764	0					
ANR	1276906	ArgumentList	"""%s\\n"""		1276764	1					
ANR	1276907	Argument	"""%s\\n"""		1276764	0					
ANR	1276908	PrimaryExpression	"""%s\\n"""		1276764	0					
ANR	1276909	Argument	* vec		1276764	1					
ANR	1276910	UnaryOperationExpression	* vec		1276764	0					
ANR	1276911	UnaryOperator	*		1276764	0					
ANR	1276912	Identifier	vec		1276764	1					
ANR	1276913	WhileStatement	while ( gets ( buf ) )		1276764	14					
ANR	1276914	Condition	gets ( buf )	59:8:1378:1386	1276764	0	True				
ANR	1276915	CallExpression	gets ( buf )		1276764	0					
ANR	1276916	Callee	gets		1276764	0					
ANR	1276917	Identifier	gets		1276764	0					
ANR	1276918	ArgumentList	buf		1276764	1					
ANR	1276919	Argument	buf		1276764	0					
ANR	1276920	Identifier	buf		1276764	0					
ANR	1276921	CompoundStatement		31:20:480:480	1276764	1					
ANR	1276922	ExpressionStatement	answer = bar . getenv ( buf )	60:2:1394:1418	1276764	0	True				
ANR	1276923	AssignmentExpression	answer = bar . getenv ( buf )		1276764	0		=			
ANR	1276924	Identifier	answer		1276764	0					
ANR	1276925	CallExpression	bar . getenv ( buf )		1276764	1					
ANR	1276926	Callee	bar . getenv		1276764	0					
ANR	1276927	MemberAccess	bar . getenv		1276764	0					
ANR	1276928	Identifier	bar		1276764	0					
ANR	1276929	Identifier	getenv		1276764	1					
ANR	1276930	ArgumentList	buf		1276764	1					
ANR	1276931	Argument	buf		1276764	0					
ANR	1276932	Identifier	buf		1276764	0					
ANR	1276933	ExpressionStatement	"printf ( ""Variable \\""%s\\"" = \\""%s\\""\\n"" , buf , answer ? answer : ""(NULL)"" )"	61:2:1422:1493	1276764	1	True				
ANR	1276934	CallExpression	"printf ( ""Variable \\""%s\\"" = \\""%s\\""\\n"" , buf , answer ? answer : ""(NULL)"" )"		1276764	0					
ANR	1276935	Callee	printf		1276764	0					
ANR	1276936	Identifier	printf		1276764	0					
ANR	1276937	ArgumentList	"""Variable \\""%s\\"" = \\""%s\\""\\n"""		1276764	1					
ANR	1276938	Argument	"""Variable \\""%s\\"" = \\""%s\\""\\n"""		1276764	0					
ANR	1276939	PrimaryExpression	"""Variable \\""%s\\"" = \\""%s\\""\\n"""		1276764	0					
ANR	1276940	Argument	buf		1276764	1					
ANR	1276941	Identifier	buf		1276764	0					
ANR	1276942	Argument	"answer ? answer : ""(NULL)"""		1276764	2					
ANR	1276943	ConditionalExpression	"answer ? answer : ""(NULL)"""		1276764	0					
ANR	1276944	Condition	answer		1276764	0					
ANR	1276945	Identifier	answer		1276764	0					
ANR	1276946	Identifier	answer		1276764	1					
ANR	1276947	PrimaryExpression	"""(NULL)"""		1276764	2					
ANR	1276948	ReturnStatement	return 0 ;	63:1:1499:1507	1276764	15	True				
ANR	1276949	PrimaryExpression	0		1276764	0					
ANR	1276950	Identifier	main		1276764	1					
ANR	1276951	ParameterList	"int argc , char * argv [ ]"		1276764	2					
ANR	1276952	Parameter	int argc	28:6:884:891	1276764	0	True				
ANR	1276953	ParameterType	int		1276764	0					
ANR	1276954	Identifier	argc		1276764	1					
ANR	1276955	Parameter	char * argv [ ]	28:16:894:905	1276764	1	True				
ANR	1276956	ParameterType	char * [ ]		1276764	0					
ANR	1276957	Identifier	argv		1276764	1					
ANR	1276958	CFGEntryNode	ENTRY		1276764		True				
ANR	1276959	CFGExitNode	EXIT		1276764		True				
ANR	1276960	Symbol	argc		1276764						
ANR	1276961	Symbol	fopen		1276764						
ANR	1276962	Symbol	NULL		1276764						
ANR	1276963	Symbol	foo		1276764						
ANR	1276964	Symbol	bar . getenv		1276764						
ANR	1276965	Symbol	fp		1276764						
ANR	1276966	Symbol	* argv		1276764						
ANR	1276967	Symbol	argv		1276764						
ANR	1276968	Symbol	gets		1276764						
ANR	1276969	Symbol	fgets		1276764						
ANR	1276970	Symbol	buf		1276764						
ANR	1276971	Symbol	bar		1276764						
ANR	1276972	Symbol	answer		1276764						
ANR	1276973	Symbol	bar . get_vector		1276764						
ANR	1276974	Symbol	vec		1276764						
ANR	1276975	Symbol	* vec		1276764						
