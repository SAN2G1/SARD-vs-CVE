command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2463025	File	data/converged/CVE-2011-4930_htcondor/src_classad_analysis_boolExpr.cpp								
ANR	2463026	Function	BoolExpr :: BoolExpr	28:0:939:1002							
ANR	2463027	FunctionDef	BoolExpr :: BoolExpr ()		2463026	0					
ANR	2463028	CompoundStatement		30:0:962:1002	2463026	0					
ANR	2463029	ExpressionStatement	initialized = false	31:1:965:984	2463026	0	True				
ANR	2463030	AssignmentExpression	initialized = false		2463026	0		=			
ANR	2463031	Identifier	initialized		2463026	0					
ANR	2463032	Identifier	false		2463026	1					
ANR	2463033	ExpressionStatement	myTree = NULL	32:1:987:1000	2463026	1	True				
ANR	2463034	AssignmentExpression	myTree = NULL		2463026	0		=			
ANR	2463035	Identifier	myTree		2463026	0					
ANR	2463036	Identifier	NULL		2463026	1					
ANR	2463037	Identifier	BoolExpr :: BoolExpr		2463026	1					
ANR	2463038	ParameterList			2463026	2					
ANR	2463039	CFGEntryNode	ENTRY		2463026		True				
ANR	2463040	CFGExitNode	EXIT		2463026		True				
ANR	2463041	Symbol	NULL		2463026						
ANR	2463042	Symbol	false		2463026						
ANR	2463043	Symbol	initialized		2463026						
ANR	2463044	Symbol	myTree		2463026						
ANR	2463045	Function	BoolExpr :: ~BoolExpr	35:0:1005:1067							
ANR	2463046	FunctionDef	BoolExpr :: ~BoolExpr ()		2463045	0					
ANR	2463047	CompoundStatement		37:0:1029:1067	2463045	0					
ANR	2463048	IfStatement	if ( myTree )		2463045	0					
ANR	2463049	Condition	myTree	38:5:1036:1041	2463045	0	True				
ANR	2463050	Identifier	myTree		2463045	0					
ANR	2463051	CompoundStatement		2:14:15:15	2463045	1					
ANR	2463052	Statement	delete	39:2:1049:1054	2463045	0	True				
ANR	2463053	ExpressionStatement	myTree	39:9:1056:1062	2463045	1	True				
ANR	2463054	Identifier	myTree		2463045	0					
ANR	2463055	Identifier	BoolExpr :: ~BoolExpr		2463045	1					
ANR	2463056	ParameterList			2463045	2					
ANR	2463057	CFGEntryNode	ENTRY		2463045		True				
ANR	2463058	CFGExitNode	EXIT		2463045		True				
ANR	2463059	Symbol	myTree		2463045						
ANR	2463060	Function	BoolExpr :: ExprToMultiProfile	43:0:1070:3339							
ANR	2463061	FunctionDef	"BoolExpr :: ExprToMultiProfile (classad :: ExprTree * expr , MultiProfile * & mp)"		2463060	0					
ANR	2463062	CompoundStatement		45:0:1151:3339	2463060	0					
ANR	2463063	IfStatement	if ( expr == NULL )		2463060	0					
ANR	2463064	Condition	expr == NULL	46:5:1158:1169	2463060	0	True				
ANR	2463065	EqualityExpression	expr == NULL		2463060	0		==			
ANR	2463066	Identifier	expr		2463060	0					
ANR	2463067	Identifier	NULL		2463060	1					
ANR	2463068	CompoundStatement		2:20:21:21	2463060	1					
ANR	2463069	ExpressionStatement	"cerr << ""error: input ExprTree is null"" << endl"	47:2:1177:1224	2463060	0	True				
ANR	2463070	ShiftExpression	"cerr << ""error: input ExprTree is null"" << endl"		2463060	0		<<			
ANR	2463071	Identifier	cerr		2463060	0					
ANR	2463072	ShiftExpression	"""error: input ExprTree is null"" << endl"		2463060	1		<<			
ANR	2463073	PrimaryExpression	"""error: input ExprTree is null"""		2463060	0					
ANR	2463074	Identifier	endl		2463060	1					
ANR	2463075	ReturnStatement	return false ;	49:2:1265:1277	2463060	1	True				
ANR	2463076	Identifier	false		2463060	0					
ANR	2463077	IfStatement	if ( ! mp -> Init ( expr ) )		2463060	1					
ANR	2463078	Condition	! mp -> Init ( expr )	52:5:1288:1304	2463060	0	True				
ANR	2463079	UnaryOperationExpression	! mp -> Init ( expr )		2463060	0					
ANR	2463080	UnaryOperator	!		2463060	0					
ANR	2463081	CallExpression	mp -> Init ( expr )		2463060	1					
ANR	2463082	Callee	mp -> Init		2463060	0					
ANR	2463083	PtrMemberAccess	mp -> Init		2463060	0					
ANR	2463084	Identifier	mp		2463060	0					
ANR	2463085	Identifier	Init		2463060	1					
ANR	2463086	ArgumentList	expr		2463060	1					
ANR	2463087	Argument	expr		2463060	0					
ANR	2463088	Identifier	expr		2463060	0					
ANR	2463089	CompoundStatement		8:25:156:156	2463060	1					
ANR	2463090	ExpressionStatement	"cerr << ""error: problem with MultiProfile::Init"" << endl"	53:2:1312:1368	2463060	0	True				
ANR	2463091	ShiftExpression	"cerr << ""error: problem with MultiProfile::Init"" << endl"		2463060	0		<<			
ANR	2463092	Identifier	cerr		2463060	0					
ANR	2463093	ShiftExpression	"""error: problem with MultiProfile::Init"" << endl"		2463060	1		<<			
ANR	2463094	PrimaryExpression	"""error: problem with MultiProfile::Init"""		2463060	0					
ANR	2463095	Identifier	endl		2463060	1					
ANR	2463096	ReturnStatement	return false ;	54:2:1372:1384	2463060	1	True				
ANR	2463097	Identifier	false		2463060	0					
ANR	2463098	IdentifierDeclStatement	classad :: ExprTree :: NodeKind kind ;	57:1:1391:1423	2463060	2	True				
ANR	2463099	IdentifierDecl	kind		2463060	0					
ANR	2463100	IdentifierDeclType	classad :: ExprTree :: NodeKind		2463060	0					
ANR	2463101	Identifier	kind		2463060	1					
ANR	2463102	IdentifierDeclStatement	classad :: Operation :: OpKind op ;	58:1:1426:1455	2463060	3	True				
ANR	2463103	IdentifierDecl	op		2463060	0					
ANR	2463104	IdentifierDeclType	classad :: Operation :: OpKind		2463060	0					
ANR	2463105	Identifier	op		2463060	1					
ANR	2463106	IdentifierDeclStatement	"classad :: ExprTree * left , * right , * junk ;"	59:1:1458:1496	2463060	4	True				
ANR	2463107	IdentifierDecl	* left		2463060	0					
ANR	2463108	IdentifierDeclType	classad :: ExprTree *		2463060	0					
ANR	2463109	Identifier	left		2463060	1					
ANR	2463110	IdentifierDecl	* right		2463060	1					
ANR	2463111	IdentifierDeclType	classad :: ExprTree *		2463060	0					
ANR	2463112	Identifier	right		2463060	1					
ANR	2463113	IdentifierDecl	* junk		2463060	2					
ANR	2463114	IdentifierDeclType	classad :: ExprTree *		2463060	0					
ANR	2463115	Identifier	junk		2463060	1					
ANR	2463116	Statement	Profile	60:1:1499:1505	2463060	5	True				
ANR	2463117	Statement	*	60:9:1507:1507	2463060	6	True				
ANR	2463118	Statement	currentProfile	60:10:1508:1521	2463060	7	True				
ANR	2463119	Statement	=	60:25:1523:1523	2463060	8	True				
ANR	2463120	Statement	new	60:27:1525:1527	2463060	9	True				
ANR	2463121	ExpressionStatement	Profile	60:31:1529:1536	2463060	10	True				
ANR	2463122	Identifier	Profile		2463060	0					
ANR	2463123	IdentifierDeclStatement	Stack < Profile > profStack ;	61:1:1539:1563	2463060	11	True				
ANR	2463124	IdentifierDecl	profStack		2463060	0					
ANR	2463125	IdentifierDeclType	Stack < Profile >		2463060	0					
ANR	2463126	Identifier	profStack		2463060	1					
ANR	2463127	IdentifierDeclStatement	classad :: Value val ;	62:1:1566:1584	2463060	12	True				
ANR	2463128	IdentifierDecl	val		2463060	0					
ANR	2463129	IdentifierDeclType	classad :: Value		2463060	0					
ANR	2463130	Identifier	val		2463060	1					
ANR	2463131	IdentifierDeclStatement	classad :: ExprTree * currentTree = expr ;	64:1:1588:1625	2463060	13	True				
ANR	2463132	IdentifierDecl	* currentTree = expr		2463060	0					
ANR	2463133	IdentifierDeclType	classad :: ExprTree *		2463060	0					
ANR	2463134	Identifier	currentTree		2463060	1					
ANR	2463135	AssignmentExpression	* currentTree = expr		2463060	2		=			
ANR	2463136	Identifier	expr		2463060	0					
ANR	2463137	Identifier	expr		2463060	1					
ANR	2463138	IdentifierDeclStatement	bool atLeftMostProfile = false ;	65:1:1628:1658	2463060	14	True				
ANR	2463139	IdentifierDecl	atLeftMostProfile = false		2463060	0					
ANR	2463140	IdentifierDeclType	bool		2463060	0					
ANR	2463141	Identifier	atLeftMostProfile		2463060	1					
ANR	2463142	AssignmentExpression	atLeftMostProfile = false		2463060	2		=			
ANR	2463143	Identifier	false		2463060	0					
ANR	2463144	Identifier	false		2463060	1					
ANR	2463145	WhileStatement	while ( ! atLeftMostProfile )		2463060	15					
ANR	2463146	Condition	! atLeftMostProfile	66:8:1668:1685	2463060	0	True				
ANR	2463147	UnaryOperationExpression	! atLeftMostProfile		2463060	0					
ANR	2463148	UnaryOperator	!		2463060	0					
ANR	2463149	Identifier	atLeftMostProfile		2463060	1					
ANR	2463150	CompoundStatement		22:29:537:537	2463060	1					
ANR	2463151	ExpressionStatement	kind = currentTree -> GetKind ( )	68:2:1694:1724	2463060	0	True				
ANR	2463152	AssignmentExpression	kind = currentTree -> GetKind ( )		2463060	0		=			
ANR	2463153	Identifier	kind		2463060	0					
ANR	2463154	CallExpression	currentTree -> GetKind ( )		2463060	1					
ANR	2463155	Callee	currentTree -> GetKind		2463060	0					
ANR	2463156	PtrMemberAccess	currentTree -> GetKind		2463060	0					
ANR	2463157	Identifier	currentTree		2463060	0					
ANR	2463158	Identifier	GetKind		2463060	1					
ANR	2463159	ArgumentList			2463060	1					
ANR	2463160	IfStatement	if ( kind == classad :: ExprTree :: ATTRREF_NODE || kind == classad :: ExprTree :: FN_CALL_NODE )		2463060	1					
ANR	2463161	Condition	kind == classad :: ExprTree :: ATTRREF_NODE || kind == classad :: ExprTree :: FN_CALL_NODE	70:6:1736:1820	2463060	0	True				
ANR	2463162	OrExpression	kind == classad :: ExprTree :: ATTRREF_NODE || kind == classad :: ExprTree :: FN_CALL_NODE		2463060	0		||			
ANR	2463163	EqualityExpression	kind == classad :: ExprTree :: ATTRREF_NODE		2463060	0		==			
ANR	2463164	Identifier	kind		2463060	0					
ANR	2463165	Identifier	classad :: ExprTree :: ATTRREF_NODE		2463060	1					
ANR	2463166	EqualityExpression	kind == classad :: ExprTree :: FN_CALL_NODE		2463060	1		==			
ANR	2463167	Identifier	kind		2463060	0					
ANR	2463168	Identifier	classad :: ExprTree :: FN_CALL_NODE		2463060	1					
ANR	2463169	CompoundStatement		28:2:674:674	2463060	1					
ANR	2463170	ExpressionStatement	atLeftMostProfile = true	73:3:1831:1855	2463060	0	True				
ANR	2463171	AssignmentExpression	atLeftMostProfile = true		2463060	0		=			
ANR	2463172	Identifier	atLeftMostProfile		2463060	0					
ANR	2463173	Identifier	true		2463060	1					
ANR	2463174	ContinueStatement	continue ;	74:3:1860:1868	2463060	1	True				
ANR	2463175	IfStatement	if ( kind != classad :: ExprTree :: OP_NODE )		2463060	2					
ANR	2463176	Condition	kind != classad :: ExprTree :: OP_NODE	77:6:1881:1914	2463060	0	True				
ANR	2463177	EqualityExpression	kind != classad :: ExprTree :: OP_NODE		2463060	0		!=			
ANR	2463178	Identifier	kind		2463060	0					
ANR	2463179	Identifier	classad :: ExprTree :: OP_NODE		2463060	1					
ANR	2463180	CompoundStatement		33:43:766:766	2463060	1					
ANR	2463181	ExpressionStatement	"cerr << ""error: bad form"" << endl"	78:3:1923:1956	2463060	0	True				
ANR	2463182	ShiftExpression	"cerr << ""error: bad form"" << endl"		2463060	0		<<			
ANR	2463183	Identifier	cerr		2463060	0					
ANR	2463184	ShiftExpression	"""error: bad form"" << endl"		2463060	1		<<			
ANR	2463185	PrimaryExpression	"""error: bad form"""		2463060	0					
ANR	2463186	Identifier	endl		2463060	1					
ANR	2463187	ReturnStatement	return false ;	80:3:1984:1996	2463060	1	True				
ANR	2463188	Identifier	false		2463060	0					
ANR	2463189	ExpressionStatement	"( ( classad :: Operation * ) currentTree ) -> GetComponents ( op , left , right , junk )"	83:2:2005:2100	2463060	3	True				
ANR	2463190	CallExpression	"( ( classad :: Operation * ) currentTree ) -> GetComponents ( op , left , right , junk )"		2463060	0					
ANR	2463191	Callee	( ( classad :: Operation * ) currentTree ) -> GetComponents		2463060	0					
ANR	2463192	PtrMemberAccess	( ( classad :: Operation * ) currentTree ) -> GetComponents		2463060	0					
ANR	2463193	CastExpression	( classad :: Operation * ) currentTree		2463060	0					
ANR	2463194	CastTarget	classad :: Operation *		2463060	0					
ANR	2463195	Identifier	currentTree		2463060	1					
ANR	2463196	Identifier	GetComponents		2463060	1					
ANR	2463197	ArgumentList	op		2463060	1					
ANR	2463198	Argument	op		2463060	0					
ANR	2463199	Identifier	op		2463060	0					
ANR	2463200	Argument	left		2463060	1					
ANR	2463201	Identifier	left		2463060	0					
ANR	2463202	Argument	right		2463060	2					
ANR	2463203	Identifier	right		2463060	0					
ANR	2463204	Argument	junk		2463060	3					
ANR	2463205	Identifier	junk		2463060	0					
ANR	2463206	WhileStatement	while ( op == classad :: Operation :: PARENTHESES_OP )		2463060	4					
ANR	2463207	Condition	op == classad :: Operation :: PARENTHESES_OP	86:9:2112:2151	2463060	0	True				
ANR	2463208	EqualityExpression	op == classad :: Operation :: PARENTHESES_OP		2463060	0		==			
ANR	2463209	Identifier	op		2463060	0					
ANR	2463210	Identifier	classad :: Operation :: PARENTHESES_OP		2463060	1					
ANR	2463211	CompoundStatement		42:52:1003:1003	2463060	1					
ANR	2463212	IfStatement	if ( left -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE )		2463060	0					
ANR	2463213	Condition	left -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE	87:7:2164:2214	2463060	0	True				
ANR	2463214	EqualityExpression	left -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE		2463060	0		==			
ANR	2463215	CallExpression	left -> GetKind ( )		2463060	0					
ANR	2463216	Callee	left -> GetKind		2463060	0					
ANR	2463217	PtrMemberAccess	left -> GetKind		2463060	0					
ANR	2463218	Identifier	left		2463060	0					
ANR	2463219	Identifier	GetKind		2463060	1					
ANR	2463220	ArgumentList			2463060	1					
ANR	2463221	Identifier	classad :: ExprTree :: ATTRREF_NODE		2463060	1					
ANR	2463222	CompoundStatement		43:61:1066:1066	2463060	1					
ANR	2463223	ExpressionStatement	atLeftMostProfile = true	88:4:2224:2248	2463060	0	True				
ANR	2463224	AssignmentExpression	atLeftMostProfile = true		2463060	0		=			
ANR	2463225	Identifier	atLeftMostProfile		2463060	0					
ANR	2463226	Identifier	true		2463060	1					
ANR	2463227	BreakStatement	break ;	89:4:2254:2259	2463060	1	True				
ANR	2463228	ExpressionStatement	"( ( classad :: Operation * ) left ) -> GetComponents ( op , left , right , junk )"	91:3:2269:2357	2463060	1	True				
ANR	2463229	CallExpression	"( ( classad :: Operation * ) left ) -> GetComponents ( op , left , right , junk )"		2463060	0					
ANR	2463230	Callee	( ( classad :: Operation * ) left ) -> GetComponents		2463060	0					
ANR	2463231	PtrMemberAccess	( ( classad :: Operation * ) left ) -> GetComponents		2463060	0					
ANR	2463232	CastExpression	( classad :: Operation * ) left		2463060	0					
ANR	2463233	CastTarget	classad :: Operation *		2463060	0					
ANR	2463234	Identifier	left		2463060	1					
ANR	2463235	Identifier	GetComponents		2463060	1					
ANR	2463236	ArgumentList	op		2463060	1					
ANR	2463237	Argument	op		2463060	0					
ANR	2463238	Identifier	op		2463060	0					
ANR	2463239	Argument	left		2463060	1					
ANR	2463240	Identifier	left		2463060	0					
ANR	2463241	Argument	right		2463060	2					
ANR	2463242	Identifier	right		2463060	0					
ANR	2463243	Argument	junk		2463060	3					
ANR	2463244	Identifier	junk		2463060	0					
ANR	2463245	IfStatement	if ( atLeftMostProfile == true )		2463060	5					
ANR	2463246	Condition	atLeftMostProfile == true	95:6:2370:2394	2463060	0	True				
ANR	2463247	EqualityExpression	atLeftMostProfile == true		2463060	0		==			
ANR	2463248	Identifier	atLeftMostProfile		2463060	0					
ANR	2463249	Identifier	true		2463060	1					
ANR	2463250	CompoundStatement		51:34:1246:1246	2463060	1					
ANR	2463251	ContinueStatement	continue ;	96:3:2403:2411	2463060	0	True				
ANR	2463252	IfStatement	if ( op != classad :: Operation :: LOGICAL_OR_OP )		2463060	6					
ANR	2463253	Condition	op != classad :: Operation :: LOGICAL_OR_OP	100:6:2476:2514	2463060	0	True				
ANR	2463254	EqualityExpression	op != classad :: Operation :: LOGICAL_OR_OP		2463060	0		!=			
ANR	2463255	Identifier	op		2463060	0					
ANR	2463256	Identifier	classad :: Operation :: LOGICAL_OR_OP		2463060	1					
ANR	2463257	CompoundStatement		56:48:1366:1366	2463060	1					
ANR	2463258	ExpressionStatement	atLeftMostProfile = true	101:3:2523:2547	2463060	0	True				
ANR	2463259	AssignmentExpression	atLeftMostProfile = true		2463060	0		=			
ANR	2463260	Identifier	atLeftMostProfile		2463060	0					
ANR	2463261	Identifier	true		2463060	1					
ANR	2463262	ContinueStatement	continue ;	102:3:2552:2560	2463060	1	True				
ANR	2463263	IfStatement	"if ( ! ExprToProfile ( right , currentProfile ) )"		2463060	7					
ANR	2463264	Condition	"! ExprToProfile ( right , currentProfile )"	106:6:2609:2647	2463060	0	True				
ANR	2463265	UnaryOperationExpression	"! ExprToProfile ( right , currentProfile )"		2463060	0					
ANR	2463266	UnaryOperator	!		2463060	0					
ANR	2463267	CallExpression	"ExprToProfile ( right , currentProfile )"		2463060	1					
ANR	2463268	Callee	ExprToProfile		2463060	0					
ANR	2463269	Identifier	ExprToProfile		2463060	0					
ANR	2463270	ArgumentList	right		2463060	1					
ANR	2463271	Argument	right		2463060	0					
ANR	2463272	Identifier	right		2463060	0					
ANR	2463273	Argument	currentProfile		2463060	1					
ANR	2463274	Identifier	currentProfile		2463060	0					
ANR	2463275	CompoundStatement		62:48:1499:1499	2463060	1					
ANR	2463276	ExpressionStatement	"cerr << ""error: problem with ExprToProfile"" << endl"	107:3:2656:2707	2463060	0	True				
ANR	2463277	ShiftExpression	"cerr << ""error: problem with ExprToProfile"" << endl"		2463060	0		<<			
ANR	2463278	Identifier	cerr		2463060	0					
ANR	2463279	ShiftExpression	"""error: problem with ExprToProfile"" << endl"		2463060	1		<<			
ANR	2463280	PrimaryExpression	"""error: problem with ExprToProfile"""		2463060	0					
ANR	2463281	Identifier	endl		2463060	1					
ANR	2463282	ReturnStatement	return false ;	109:3:2753:2765	2463060	1	True				
ANR	2463283	Identifier	false		2463060	0					
ANR	2463284	ElseStatement	else		2463060	0					
ANR	2463285	CompoundStatement		67:7:1626:1626	2463060	0					
ANR	2463286	ExpressionStatement	profStack . Push ( currentProfile )	112:3:2783:2815	2463060	0	True				
ANR	2463287	CallExpression	profStack . Push ( currentProfile )		2463060	0					
ANR	2463288	Callee	profStack . Push		2463060	0					
ANR	2463289	MemberAccess	profStack . Push		2463060	0					
ANR	2463290	Identifier	profStack		2463060	0					
ANR	2463291	Identifier	Push		2463060	1					
ANR	2463292	ArgumentList	currentProfile		2463060	1					
ANR	2463293	Argument	currentProfile		2463060	0					
ANR	2463294	Identifier	currentProfile		2463060	0					
ANR	2463295	ExpressionStatement	currentTree = left	113:3:2820:2838	2463060	1	True				
ANR	2463296	AssignmentExpression	currentTree = left		2463060	0		=			
ANR	2463297	Identifier	currentTree		2463060	0					
ANR	2463298	Identifier	left		2463060	1					
ANR	2463299	Statement	currentProfile	115:2:2846:2859	2463060	8	True				
ANR	2463300	Statement	=	115:17:2861:2861	2463060	9	True				
ANR	2463301	Statement	new	115:19:2863:2865	2463060	10	True				
ANR	2463302	ExpressionStatement	Profile	115:23:2867:2874	2463060	11	True				
ANR	2463303	Identifier	Profile		2463060	0					
ANR	2463304	IfStatement	"if ( ! ExprToProfile ( currentTree , currentProfile ) )"		2463060	16					
ANR	2463305	Condition	"! ExprToProfile ( currentTree , currentProfile )"	119:5:2919:2963	2463060	0	True				
ANR	2463306	UnaryOperationExpression	"! ExprToProfile ( currentTree , currentProfile )"		2463060	0					
ANR	2463307	UnaryOperator	!		2463060	0					
ANR	2463308	CallExpression	"ExprToProfile ( currentTree , currentProfile )"		2463060	1					
ANR	2463309	Callee	ExprToProfile		2463060	0					
ANR	2463310	Identifier	ExprToProfile		2463060	0					
ANR	2463311	ArgumentList	currentTree		2463060	1					
ANR	2463312	Argument	currentTree		2463060	0					
ANR	2463313	Identifier	currentTree		2463060	0					
ANR	2463314	Argument	currentProfile		2463060	1					
ANR	2463315	Identifier	currentProfile		2463060	0					
ANR	2463316	CompoundStatement		75:53:1815:1815	2463060	1					
ANR	2463317	ExpressionStatement	"cerr << ""error: problem with ExprToProfile"" << endl"	120:2:2971:3022	2463060	0	True				
ANR	2463318	ShiftExpression	"cerr << ""error: problem with ExprToProfile"" << endl"		2463060	0		<<			
ANR	2463319	Identifier	cerr		2463060	0					
ANR	2463320	ShiftExpression	"""error: problem with ExprToProfile"" << endl"		2463060	1		<<			
ANR	2463321	PrimaryExpression	"""error: problem with ExprToProfile"""		2463060	0					
ANR	2463322	Identifier	endl		2463060	1					
ANR	2463323	Statement	delete	122:2:3066:3071	2463060	1	True				
ANR	2463324	ExpressionStatement	currentProfile	122:9:3073:3087	2463060	2	True				
ANR	2463325	Identifier	currentProfile		2463060	0					
ANR	2463326	ReturnStatement	return false ;	123:2:3091:3103	2463060	3	True				
ANR	2463327	Identifier	false		2463060	0					
ANR	2463328	ExpressionStatement	mp -> AppendProfile ( currentProfile )	127:1:3183:3218	2463060	17	True				
ANR	2463329	CallExpression	mp -> AppendProfile ( currentProfile )		2463060	0					
ANR	2463330	Callee	mp -> AppendProfile		2463060	0					
ANR	2463331	PtrMemberAccess	mp -> AppendProfile		2463060	0					
ANR	2463332	Identifier	mp		2463060	0					
ANR	2463333	Identifier	AppendProfile		2463060	1					
ANR	2463334	ArgumentList	currentProfile		2463060	1					
ANR	2463335	Argument	currentProfile		2463060	0					
ANR	2463336	Identifier	currentProfile		2463060	0					
ANR	2463337	WhileStatement	while ( ! profStack . IsEmpty ( ) )		2463060	18					
ANR	2463338	Condition	! profStack . IsEmpty ( )	129:8:3229:3249	2463060	0	True				
ANR	2463339	UnaryOperationExpression	! profStack . IsEmpty ( )		2463060	0					
ANR	2463340	UnaryOperator	!		2463060	0					
ANR	2463341	CallExpression	profStack . IsEmpty ( )		2463060	1					
ANR	2463342	Callee	profStack . IsEmpty		2463060	0					
ANR	2463343	MemberAccess	profStack . IsEmpty		2463060	0					
ANR	2463344	Identifier	profStack		2463060	0					
ANR	2463345	Identifier	IsEmpty		2463060	1					
ANR	2463346	ArgumentList			2463060	1					
ANR	2463347	CompoundStatement		85:32:2101:2101	2463060	1					
ANR	2463348	ExpressionStatement	mp -> AppendProfile ( profStack . Pop ( ) )	130:2:3257:3294	2463060	0	True				
ANR	2463349	CallExpression	mp -> AppendProfile ( profStack . Pop ( ) )		2463060	0					
ANR	2463350	Callee	mp -> AppendProfile		2463060	0					
ANR	2463351	PtrMemberAccess	mp -> AppendProfile		2463060	0					
ANR	2463352	Identifier	mp		2463060	0					
ANR	2463353	Identifier	AppendProfile		2463060	1					
ANR	2463354	ArgumentList	profStack . Pop ( )		2463060	1					
ANR	2463355	Argument	profStack . Pop ( )		2463060	0					
ANR	2463356	CallExpression	profStack . Pop ( )		2463060	0					
ANR	2463357	Callee	profStack . Pop		2463060	0					
ANR	2463358	MemberAccess	profStack . Pop		2463060	0					
ANR	2463359	Identifier	profStack		2463060	0					
ANR	2463360	Identifier	Pop		2463060	1					
ANR	2463361	ArgumentList			2463060	1					
ANR	2463362	ExpressionStatement	mp -> isLiteral = false	133:1:3301:3322	2463060	19	True				
ANR	2463363	AssignmentExpression	mp -> isLiteral = false		2463060	0		=			
ANR	2463364	PtrMemberAccess	mp -> isLiteral		2463060	0					
ANR	2463365	Identifier	mp		2463060	0					
ANR	2463366	Identifier	isLiteral		2463060	1					
ANR	2463367	Identifier	false		2463060	1					
ANR	2463368	ReturnStatement	return true ;	135:1:3326:3337	2463060	20	True				
ANR	2463369	Identifier	true		2463060	0					
ANR	2463370	ReturnType	bool		2463060	1					
ANR	2463371	Identifier	BoolExpr :: ExprToMultiProfile		2463060	2					
ANR	2463372	ParameterList	"classad :: ExprTree * expr , MultiProfile * & mp"		2463060	3					
ANR	2463373	Parameter	classad :: ExprTree * expr	44:20:1106:1128	2463060	0	True				
ANR	2463374	ParameterType	classad :: ExprTree *		2463060	0					
ANR	2463375	Identifier	expr		2463060	1					
ANR	2463376	Parameter	MultiProfile * & mp	44:45:1131:1147	2463060	1	True				
ANR	2463377	ParameterType	MultiProfile * &		2463060	0					
ANR	2463378	Identifier	mp		2463060	1					
ANR	2463379	CFGEntryNode	ENTRY		2463060		True				
ANR	2463380	CFGExitNode	EXIT		2463060		True				
ANR	2463381	Symbol	classad :: ExprTree :: OP_NODE		2463060						
ANR	2463382	Symbol	left -> GetKind		2463060						
ANR	2463383	Symbol	mp -> Init		2463060						
ANR	2463384	Symbol	* currentTree		2463060						
ANR	2463385	Symbol	classad :: Operation :: PARENTHESES_OP		2463060						
ANR	2463386	Symbol	* mp		2463060						
ANR	2463387	Symbol	profStack		2463060						
ANR	2463388	Symbol	atLeftMostProfile		2463060						
ANR	2463389	Symbol	expr		2463060						
ANR	2463390	Symbol	classad :: ExprTree :: ATTRREF_NODE		2463060						
ANR	2463391	Symbol	* left		2463060						
ANR	2463392	Symbol	profStack . IsEmpty		2463060						
ANR	2463393	Symbol	val		2463060						
ANR	2463394	Symbol	op		2463060						
ANR	2463395	Symbol	currentTree		2463060						
ANR	2463396	Symbol	mp -> isLiteral		2463060						
ANR	2463397	Symbol	mp		2463060						
ANR	2463398	Symbol	NULL		2463060						
ANR	2463399	Symbol	kind		2463060						
ANR	2463400	Symbol	false		2463060						
ANR	2463401	Symbol	right		2463060						
ANR	2463402	Symbol	classad :: Operation :: LOGICAL_OR_OP		2463060						
ANR	2463403	Symbol	ExprToProfile		2463060						
ANR	2463404	Symbol	currentTree -> GetKind		2463060						
ANR	2463405	Symbol	left		2463060						
ANR	2463406	Symbol	true		2463060						
ANR	2463407	Symbol	junk		2463060						
ANR	2463408	Symbol	profStack . Pop		2463060						
ANR	2463409	Symbol	currentProfile		2463060						
ANR	2463410	Symbol	classad :: ExprTree :: FN_CALL_NODE		2463060						
ANR	2463411	Function	BoolExpr :: ValToMultiProfile	138:0:3342:3543							
ANR	2463412	FunctionDef	"BoolExpr :: ValToMultiProfile (classad :: Value & val , MultiProfile * & mp)"		2463411	0					
ANR	2463413	CompoundStatement		140:0:3418:3543	2463411	0					
ANR	2463414	IfStatement	if ( ! mp -> InitVal ( val ) )		2463411	0					
ANR	2463415	Condition	! mp -> InitVal ( val )	141:5:3425:3443	2463411	0	True				
ANR	2463416	UnaryOperationExpression	! mp -> InitVal ( val )		2463411	0					
ANR	2463417	UnaryOperator	!		2463411	0					
ANR	2463418	CallExpression	mp -> InitVal ( val )		2463411	1					
ANR	2463419	Callee	mp -> InitVal		2463411	0					
ANR	2463420	PtrMemberAccess	mp -> InitVal		2463411	0					
ANR	2463421	Identifier	mp		2463411	0					
ANR	2463422	Identifier	InitVal		2463411	1					
ANR	2463423	ArgumentList	val		2463411	1					
ANR	2463424	Argument	val		2463411	0					
ANR	2463425	Identifier	val		2463411	0					
ANR	2463426	CompoundStatement		2:27:28:28	2463411	1					
ANR	2463427	ExpressionStatement	"cerr << ""error: problem with MultiProfile::Init"" << endl"	142:2:3451:3507	2463411	0	True				
ANR	2463428	ShiftExpression	"cerr << ""error: problem with MultiProfile::Init"" << endl"		2463411	0		<<			
ANR	2463429	Identifier	cerr		2463411	0					
ANR	2463430	ShiftExpression	"""error: problem with MultiProfile::Init"" << endl"		2463411	1		<<			
ANR	2463431	PrimaryExpression	"""error: problem with MultiProfile::Init"""		2463411	0					
ANR	2463432	Identifier	endl		2463411	1					
ANR	2463433	ReturnStatement	return false ;	143:2:3511:3523	2463411	1	True				
ANR	2463434	Identifier	false		2463411	0					
ANR	2463435	ReturnStatement	return true ;	145:1:3530:3541	2463411	1	True				
ANR	2463436	Identifier	true		2463411	0					
ANR	2463437	ReturnType	bool		2463411	1					
ANR	2463438	Identifier	BoolExpr :: ValToMultiProfile		2463411	2					
ANR	2463439	ParameterList	"classad :: Value & val , MultiProfile * & mp"		2463411	3					
ANR	2463440	Parameter	classad :: Value & val	139:19:3377:3395	2463411	0	True				
ANR	2463441	ParameterType	classad :: Value &		2463411	0					
ANR	2463442	Identifier	val		2463411	1					
ANR	2463443	Parameter	MultiProfile * & mp	139:40:3398:3414	2463411	1	True				
ANR	2463444	ParameterType	MultiProfile * &		2463411	0					
ANR	2463445	Identifier	mp		2463411	1					
ANR	2463446	CFGEntryNode	ENTRY		2463411		True				
ANR	2463447	CFGExitNode	EXIT		2463411		True				
ANR	2463448	Symbol	val		2463411						
ANR	2463449	Symbol	mp		2463411						
ANR	2463450	Symbol	false		2463411						
ANR	2463451	Symbol	true		2463411						
ANR	2463452	Symbol	* mp		2463411						
ANR	2463453	Symbol	mp -> InitVal		2463411						
ANR	2463454	Function	BoolExpr :: ExprToProfile	148:0:3546:5857							
ANR	2463455	FunctionDef	"BoolExpr :: ExprToProfile (classad :: ExprTree * expr , Profile * & p)"		2463454	0					
ANR	2463456	CompoundStatement		150:0:3616:5857	2463454	0					
ANR	2463457	IfStatement	if ( expr == NULL )		2463454	0					
ANR	2463458	Condition	expr == NULL	151:5:3623:3634	2463454	0	True				
ANR	2463459	EqualityExpression	expr == NULL		2463454	0		==			
ANR	2463460	Identifier	expr		2463454	0					
ANR	2463461	Identifier	NULL		2463454	1					
ANR	2463462	CompoundStatement		2:20:21:21	2463454	1					
ANR	2463463	ExpressionStatement	"cerr << ""error: input ExprTree is null"" << endl"	152:2:3642:3689	2463454	0	True				
ANR	2463464	ShiftExpression	"cerr << ""error: input ExprTree is null"" << endl"		2463454	0		<<			
ANR	2463465	Identifier	cerr		2463454	0					
ANR	2463466	ShiftExpression	"""error: input ExprTree is null"" << endl"		2463454	1		<<			
ANR	2463467	PrimaryExpression	"""error: input ExprTree is null"""		2463454	0					
ANR	2463468	Identifier	endl		2463454	1					
ANR	2463469	ReturnStatement	return false ;	154:2:3730:3742	2463454	1	True				
ANR	2463470	Identifier	false		2463454	0					
ANR	2463471	IfStatement	if ( ! p -> Init ( expr ) )		2463454	1					
ANR	2463472	Condition	! p -> Init ( expr )	158:5:3784:3799	2463454	0	True				
ANR	2463473	UnaryOperationExpression	! p -> Init ( expr )		2463454	0					
ANR	2463474	UnaryOperator	!		2463454	0					
ANR	2463475	CallExpression	p -> Init ( expr )		2463454	1					
ANR	2463476	Callee	p -> Init		2463454	0					
ANR	2463477	PtrMemberAccess	p -> Init		2463454	0					
ANR	2463478	Identifier	p		2463454	0					
ANR	2463479	Identifier	Init		2463454	1					
ANR	2463480	ArgumentList	expr		2463454	1					
ANR	2463481	Argument	expr		2463454	0					
ANR	2463482	Identifier	expr		2463454	0					
ANR	2463483	CompoundStatement		9:24:186:186	2463454	1					
ANR	2463484	ExpressionStatement	"cerr << ""error: problem with Profile::Init"" << endl"	159:2:3807:3858	2463454	0	True				
ANR	2463485	ShiftExpression	"cerr << ""error: problem with Profile::Init"" << endl"		2463454	0		<<			
ANR	2463486	Identifier	cerr		2463454	0					
ANR	2463487	ShiftExpression	"""error: problem with Profile::Init"" << endl"		2463454	1		<<			
ANR	2463488	PrimaryExpression	"""error: problem with Profile::Init"""		2463454	0					
ANR	2463489	Identifier	endl		2463454	1					
ANR	2463490	ReturnStatement	return false ;	160:2:3862:3874	2463454	1	True				
ANR	2463491	Identifier	false		2463454	0					
ANR	2463492	IdentifierDeclStatement	classad :: ExprTree :: NodeKind kind ;	163:1:3882:3914	2463454	2	True				
ANR	2463493	IdentifierDecl	kind		2463454	0					
ANR	2463494	IdentifierDeclType	classad :: ExprTree :: NodeKind		2463454	0					
ANR	2463495	Identifier	kind		2463454	1					
ANR	2463496	IdentifierDeclStatement	classad :: Operation :: OpKind op ;	164:1:3917:3946	2463454	3	True				
ANR	2463497	IdentifierDecl	op		2463454	0					
ANR	2463498	IdentifierDeclType	classad :: Operation :: OpKind		2463454	0					
ANR	2463499	Identifier	op		2463454	1					
ANR	2463500	IdentifierDeclStatement	"classad :: ExprTree * left , * right , * junk ;"	165:1:3949:3987	2463454	4	True				
ANR	2463501	IdentifierDecl	* left		2463454	0					
ANR	2463502	IdentifierDeclType	classad :: ExprTree *		2463454	0					
ANR	2463503	Identifier	left		2463454	1					
ANR	2463504	IdentifierDecl	* right		2463454	1					
ANR	2463505	IdentifierDeclType	classad :: ExprTree *		2463454	0					
ANR	2463506	Identifier	right		2463454	1					
ANR	2463507	IdentifierDecl	* junk		2463454	2					
ANR	2463508	IdentifierDeclType	classad :: ExprTree *		2463454	0					
ANR	2463509	Identifier	junk		2463454	1					
ANR	2463510	Statement	Condition	166:1:3990:3998	2463454	5	True				
ANR	2463511	Statement	*	166:11:4000:4000	2463454	6	True				
ANR	2463512	Statement	currentCondition	166:12:4001:4016	2463454	7	True				
ANR	2463513	Statement	=	166:29:4018:4018	2463454	8	True				
ANR	2463514	Statement	new	166:31:4020:4022	2463454	9	True				
ANR	2463515	ExpressionStatement	Condition	166:35:4024:4033	2463454	10	True				
ANR	2463516	Identifier	Condition		2463454	0					
ANR	2463517	IdentifierDeclStatement	Stack < Condition > condStack ;	167:1:4036:4062	2463454	11	True				
ANR	2463518	IdentifierDecl	condStack		2463454	0					
ANR	2463519	IdentifierDeclType	Stack < Condition >		2463454	0					
ANR	2463520	Identifier	condStack		2463454	1					
ANR	2463521	IdentifierDeclStatement	classad :: Value val ;	168:1:4065:4083	2463454	12	True				
ANR	2463522	IdentifierDecl	val		2463454	0					
ANR	2463523	IdentifierDeclType	classad :: Value		2463454	0					
ANR	2463524	Identifier	val		2463454	1					
ANR	2463525	IdentifierDeclStatement	classad :: ExprTree * currentTree = expr ;	170:1:4088:4125	2463454	13	True				
ANR	2463526	IdentifierDecl	* currentTree = expr		2463454	0					
ANR	2463527	IdentifierDeclType	classad :: ExprTree *		2463454	0					
ANR	2463528	Identifier	currentTree		2463454	1					
ANR	2463529	AssignmentExpression	* currentTree = expr		2463454	2		=			
ANR	2463530	Identifier	expr		2463454	0					
ANR	2463531	Identifier	expr		2463454	1					
ANR	2463532	IdentifierDeclStatement	bool atLeftMostCondition = false ;	171:1:4128:4160	2463454	14	True				
ANR	2463533	IdentifierDecl	atLeftMostCondition = false		2463454	0					
ANR	2463534	IdentifierDeclType	bool		2463454	0					
ANR	2463535	Identifier	atLeftMostCondition		2463454	1					
ANR	2463536	AssignmentExpression	atLeftMostCondition = false		2463454	2		=			
ANR	2463537	Identifier	false		2463454	0					
ANR	2463538	Identifier	false		2463454	1					
ANR	2463539	WhileStatement	while ( ! atLeftMostCondition )		2463454	15					
ANR	2463540	Condition	! atLeftMostCondition	173:8:4171:4190	2463454	0	True				
ANR	2463541	UnaryOperationExpression	! atLeftMostCondition		2463454	0					
ANR	2463542	UnaryOperator	!		2463454	0					
ANR	2463543	Identifier	atLeftMostCondition		2463454	1					
ANR	2463544	CompoundStatement		24:31:577:577	2463454	1					
ANR	2463545	ExpressionStatement	kind = currentTree -> GetKind ( )	175:2:4199:4229	2463454	0	True				
ANR	2463546	AssignmentExpression	kind = currentTree -> GetKind ( )		2463454	0		=			
ANR	2463547	Identifier	kind		2463454	0					
ANR	2463548	CallExpression	currentTree -> GetKind ( )		2463454	1					
ANR	2463549	Callee	currentTree -> GetKind		2463454	0					
ANR	2463550	PtrMemberAccess	currentTree -> GetKind		2463454	0					
ANR	2463551	Identifier	currentTree		2463454	0					
ANR	2463552	Identifier	GetKind		2463454	1					
ANR	2463553	ArgumentList			2463454	1					
ANR	2463554	IfStatement	if ( kind == classad :: ExprTree :: ATTRREF_NODE || kind == classad :: ExprTree :: FN_CALL_NODE )		2463454	1					
ANR	2463555	Condition	kind == classad :: ExprTree :: ATTRREF_NODE || kind == classad :: ExprTree :: FN_CALL_NODE	177:6:4238:4322	2463454	0	True				
ANR	2463556	OrExpression	kind == classad :: ExprTree :: ATTRREF_NODE || kind == classad :: ExprTree :: FN_CALL_NODE		2463454	0		||			
ANR	2463557	EqualityExpression	kind == classad :: ExprTree :: ATTRREF_NODE		2463454	0		==			
ANR	2463558	Identifier	kind		2463454	0					
ANR	2463559	Identifier	classad :: ExprTree :: ATTRREF_NODE		2463454	1					
ANR	2463560	EqualityExpression	kind == classad :: ExprTree :: FN_CALL_NODE		2463454	1		==			
ANR	2463561	Identifier	kind		2463454	0					
ANR	2463562	Identifier	classad :: ExprTree :: FN_CALL_NODE		2463454	1					
ANR	2463563	CompoundStatement		30:2:711:711	2463454	1					
ANR	2463564	ExpressionStatement	atLeftMostCondition = true	180:3:4333:4359	2463454	0	True				
ANR	2463565	AssignmentExpression	atLeftMostCondition = true		2463454	0		=			
ANR	2463566	Identifier	atLeftMostCondition		2463454	0					
ANR	2463567	Identifier	true		2463454	1					
ANR	2463568	ContinueStatement	continue ;	181:3:4364:4372	2463454	1	True				
ANR	2463569	IfStatement	if ( kind != classad :: ExprTree :: OP_NODE )		2463454	2					
ANR	2463570	Condition	kind != classad :: ExprTree :: OP_NODE	184:6:4385:4418	2463454	0	True				
ANR	2463571	EqualityExpression	kind != classad :: ExprTree :: OP_NODE		2463454	0		!=			
ANR	2463572	Identifier	kind		2463454	0					
ANR	2463573	Identifier	classad :: ExprTree :: OP_NODE		2463454	1					
ANR	2463574	CompoundStatement		35:43:805:805	2463454	1					
ANR	2463575	ExpressionStatement	"cerr << ""error: bad form"" << endl"	185:3:4427:4460	2463454	0	True				
ANR	2463576	ShiftExpression	"cerr << ""error: bad form"" << endl"		2463454	0		<<			
ANR	2463577	Identifier	cerr		2463454	0					
ANR	2463578	ShiftExpression	"""error: bad form"" << endl"		2463454	1		<<			
ANR	2463579	PrimaryExpression	"""error: bad form"""		2463454	0					
ANR	2463580	Identifier	endl		2463454	1					
ANR	2463581	ReturnStatement	return false ;	187:3:4488:4500	2463454	1	True				
ANR	2463582	Identifier	false		2463454	0					
ANR	2463583	ExpressionStatement	"( ( classad :: Operation * ) currentTree ) -> GetComponents ( op , left , right , junk )"	190:2:4509:4604	2463454	3	True				
ANR	2463584	CallExpression	"( ( classad :: Operation * ) currentTree ) -> GetComponents ( op , left , right , junk )"		2463454	0					
ANR	2463585	Callee	( ( classad :: Operation * ) currentTree ) -> GetComponents		2463454	0					
ANR	2463586	PtrMemberAccess	( ( classad :: Operation * ) currentTree ) -> GetComponents		2463454	0					
ANR	2463587	CastExpression	( classad :: Operation * ) currentTree		2463454	0					
ANR	2463588	CastTarget	classad :: Operation *		2463454	0					
ANR	2463589	Identifier	currentTree		2463454	1					
ANR	2463590	Identifier	GetComponents		2463454	1					
ANR	2463591	ArgumentList	op		2463454	1					
ANR	2463592	Argument	op		2463454	0					
ANR	2463593	Identifier	op		2463454	0					
ANR	2463594	Argument	left		2463454	1					
ANR	2463595	Identifier	left		2463454	0					
ANR	2463596	Argument	right		2463454	2					
ANR	2463597	Identifier	right		2463454	0					
ANR	2463598	Argument	junk		2463454	3					
ANR	2463599	Identifier	junk		2463454	0					
ANR	2463600	WhileStatement	while ( op == classad :: Operation :: PARENTHESES_OP )		2463454	4					
ANR	2463601	Condition	op == classad :: Operation :: PARENTHESES_OP	193:9:4616:4655	2463454	0	True				
ANR	2463602	EqualityExpression	op == classad :: Operation :: PARENTHESES_OP		2463454	0		==			
ANR	2463603	Identifier	op		2463454	0					
ANR	2463604	Identifier	classad :: Operation :: PARENTHESES_OP		2463454	1					
ANR	2463605	CompoundStatement		44:52:1042:1042	2463454	1					
ANR	2463606	IfStatement	if ( left -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE )		2463454	0					
ANR	2463607	Condition	left -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE	194:7:4668:4718	2463454	0	True				
ANR	2463608	EqualityExpression	left -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE		2463454	0		==			
ANR	2463609	CallExpression	left -> GetKind ( )		2463454	0					
ANR	2463610	Callee	left -> GetKind		2463454	0					
ANR	2463611	PtrMemberAccess	left -> GetKind		2463454	0					
ANR	2463612	Identifier	left		2463454	0					
ANR	2463613	Identifier	GetKind		2463454	1					
ANR	2463614	ArgumentList			2463454	1					
ANR	2463615	Identifier	classad :: ExprTree :: ATTRREF_NODE		2463454	1					
ANR	2463616	CompoundStatement		45:61:1105:1105	2463454	1					
ANR	2463617	ExpressionStatement	atLeftMostCondition = true	195:4:4728:4754	2463454	0	True				
ANR	2463618	AssignmentExpression	atLeftMostCondition = true		2463454	0		=			
ANR	2463619	Identifier	atLeftMostCondition		2463454	0					
ANR	2463620	Identifier	true		2463454	1					
ANR	2463621	BreakStatement	break ;	196:4:4760:4765	2463454	1	True				
ANR	2463622	ExpressionStatement	"( ( classad :: Operation * ) left ) -> GetComponents ( op , left , right , junk )"	198:3:4775:4863	2463454	1	True				
ANR	2463623	CallExpression	"( ( classad :: Operation * ) left ) -> GetComponents ( op , left , right , junk )"		2463454	0					
ANR	2463624	Callee	( ( classad :: Operation * ) left ) -> GetComponents		2463454	0					
ANR	2463625	PtrMemberAccess	( ( classad :: Operation * ) left ) -> GetComponents		2463454	0					
ANR	2463626	CastExpression	( classad :: Operation * ) left		2463454	0					
ANR	2463627	CastTarget	classad :: Operation *		2463454	0					
ANR	2463628	Identifier	left		2463454	1					
ANR	2463629	Identifier	GetComponents		2463454	1					
ANR	2463630	ArgumentList	op		2463454	1					
ANR	2463631	Argument	op		2463454	0					
ANR	2463632	Identifier	op		2463454	0					
ANR	2463633	Argument	left		2463454	1					
ANR	2463634	Identifier	left		2463454	0					
ANR	2463635	Argument	right		2463454	2					
ANR	2463636	Identifier	right		2463454	0					
ANR	2463637	Argument	junk		2463454	3					
ANR	2463638	Identifier	junk		2463454	0					
ANR	2463639	IfStatement	if ( atLeftMostCondition == true )		2463454	5					
ANR	2463640	Condition	atLeftMostCondition == true	202:6:4876:4902	2463454	0	True				
ANR	2463641	EqualityExpression	atLeftMostCondition == true		2463454	0		==			
ANR	2463642	Identifier	atLeftMostCondition		2463454	0					
ANR	2463643	Identifier	true		2463454	1					
ANR	2463644	CompoundStatement		53:36:1289:1289	2463454	1					
ANR	2463645	ContinueStatement	continue ;	203:3:4911:4919	2463454	0	True				
ANR	2463646	IfStatement	if ( op != classad :: Operation :: LOGICAL_AND_OP )		2463454	6					
ANR	2463647	Condition	op != classad :: Operation :: LOGICAL_AND_OP	207:6:4986:5025	2463454	0	True				
ANR	2463648	EqualityExpression	op != classad :: Operation :: LOGICAL_AND_OP		2463454	0		!=			
ANR	2463649	Identifier	op		2463454	0					
ANR	2463650	Identifier	classad :: Operation :: LOGICAL_AND_OP		2463454	1					
ANR	2463651	CompoundStatement		58:49:1412:1412	2463454	1					
ANR	2463652	ExpressionStatement	atLeftMostCondition = true	208:3:5034:5060	2463454	0	True				
ANR	2463653	AssignmentExpression	atLeftMostCondition = true		2463454	0		=			
ANR	2463654	Identifier	atLeftMostCondition		2463454	0					
ANR	2463655	Identifier	true		2463454	1					
ANR	2463656	ContinueStatement	continue ;	209:3:5065:5073	2463454	1	True				
ANR	2463657	IfStatement	"if ( ! ExprToCondition ( right , currentCondition ) )"		2463454	7					
ANR	2463658	Condition	"! ExprToCondition ( right , currentCondition )"	213:6:5124:5166	2463454	0	True				
ANR	2463659	UnaryOperationExpression	"! ExprToCondition ( right , currentCondition )"		2463454	0					
ANR	2463660	UnaryOperator	!		2463454	0					
ANR	2463661	CallExpression	"ExprToCondition ( right , currentCondition )"		2463454	1					
ANR	2463662	Callee	ExprToCondition		2463454	0					
ANR	2463663	Identifier	ExprToCondition		2463454	0					
ANR	2463664	ArgumentList	right		2463454	1					
ANR	2463665	Argument	right		2463454	0					
ANR	2463666	Identifier	right		2463454	0					
ANR	2463667	Argument	currentCondition		2463454	1					
ANR	2463668	Identifier	currentCondition		2463454	0					
ANR	2463669	CompoundStatement		64:52:1553:1553	2463454	1					
ANR	2463670	ExpressionStatement	"cerr << ""error: found NULL ptr in expr"" << endl"	214:3:5175:5222	2463454	0	True				
ANR	2463671	ShiftExpression	"cerr << ""error: found NULL ptr in expr"" << endl"		2463454	0		<<			
ANR	2463672	Identifier	cerr		2463454	0					
ANR	2463673	ShiftExpression	"""error: found NULL ptr in expr"" << endl"		2463454	1		<<			
ANR	2463674	PrimaryExpression	"""error: found NULL ptr in expr"""		2463454	0					
ANR	2463675	Identifier	endl		2463454	1					
ANR	2463676	Statement	delete	216:3:5264:5269	2463454	1	True				
ANR	2463677	ExpressionStatement	currentCondition	216:10:5271:5287	2463454	2	True				
ANR	2463678	Identifier	currentCondition		2463454	0					
ANR	2463679	ReturnStatement	return false ;	217:3:5292:5304	2463454	3	True				
ANR	2463680	Identifier	false		2463454	0					
ANR	2463681	ElseStatement	else		2463454	0					
ANR	2463682	CompoundStatement		70:7:1700:1700	2463454	0					
ANR	2463683	ExpressionStatement	condStack . Push ( currentCondition )	220:3:5322:5356	2463454	0	True				
ANR	2463684	CallExpression	condStack . Push ( currentCondition )		2463454	0					
ANR	2463685	Callee	condStack . Push		2463454	0					
ANR	2463686	MemberAccess	condStack . Push		2463454	0					
ANR	2463687	Identifier	condStack		2463454	0					
ANR	2463688	Identifier	Push		2463454	1					
ANR	2463689	ArgumentList	currentCondition		2463454	1					
ANR	2463690	Argument	currentCondition		2463454	0					
ANR	2463691	Identifier	currentCondition		2463454	0					
ANR	2463692	ExpressionStatement	currentTree = left	221:3:5361:5379	2463454	1	True				
ANR	2463693	AssignmentExpression	currentTree = left		2463454	0		=			
ANR	2463694	Identifier	currentTree		2463454	0					
ANR	2463695	Identifier	left		2463454	1					
ANR	2463696	Statement	currentCondition	224:2:5388:5403	2463454	8	True				
ANR	2463697	Statement	=	224:19:5405:5405	2463454	9	True				
ANR	2463698	Statement	new	224:21:5407:5409	2463454	10	True				
ANR	2463699	ExpressionStatement	Condition	224:25:5411:5420	2463454	11	True				
ANR	2463700	Identifier	Condition		2463454	0					
ANR	2463701	IfStatement	"if ( ! ExprToCondition ( currentTree , currentCondition ) )"		2463454	16					
ANR	2463702	Condition	"! ExprToCondition ( currentTree , currentCondition )"	228:5:5467:5515	2463454	0	True				
ANR	2463703	UnaryOperationExpression	"! ExprToCondition ( currentTree , currentCondition )"		2463454	0					
ANR	2463704	UnaryOperator	!		2463454	0					
ANR	2463705	CallExpression	"ExprToCondition ( currentTree , currentCondition )"		2463454	1					
ANR	2463706	Callee	ExprToCondition		2463454	0					
ANR	2463707	Identifier	ExprToCondition		2463454	0					
ANR	2463708	ArgumentList	currentTree		2463454	1					
ANR	2463709	Argument	currentTree		2463454	0					
ANR	2463710	Identifier	currentTree		2463454	0					
ANR	2463711	Argument	currentCondition		2463454	1					
ANR	2463712	Identifier	currentCondition		2463454	0					
ANR	2463713	CompoundStatement		79:57:1902:1902	2463454	1					
ANR	2463714	ExpressionStatement	"cerr << ""error: found NULL ptr in expr"" << endl"	229:2:5523:5570	2463454	0	True				
ANR	2463715	ShiftExpression	"cerr << ""error: found NULL ptr in expr"" << endl"		2463454	0		<<			
ANR	2463716	Identifier	cerr		2463454	0					
ANR	2463717	ShiftExpression	"""error: found NULL ptr in expr"" << endl"		2463454	1		<<			
ANR	2463718	PrimaryExpression	"""error: found NULL ptr in expr"""		2463454	0					
ANR	2463719	Identifier	endl		2463454	1					
ANR	2463720	Statement	delete	231:2:5610:5615	2463454	1	True				
ANR	2463721	ExpressionStatement	currentCondition	231:9:5617:5633	2463454	2	True				
ANR	2463722	Identifier	currentCondition		2463454	0					
ANR	2463723	ReturnStatement	return false ;	232:2:5637:5649	2463454	3	True				
ANR	2463724	Identifier	false		2463454	0					
ANR	2463725	ExpressionStatement	p -> AppendCondition ( currentCondition )	236:1:5723:5761	2463454	17	True				
ANR	2463726	CallExpression	p -> AppendCondition ( currentCondition )		2463454	0					
ANR	2463727	Callee	p -> AppendCondition		2463454	0					
ANR	2463728	PtrMemberAccess	p -> AppendCondition		2463454	0					
ANR	2463729	Identifier	p		2463454	0					
ANR	2463730	Identifier	AppendCondition		2463454	1					
ANR	2463731	ArgumentList	currentCondition		2463454	1					
ANR	2463732	Argument	currentCondition		2463454	0					
ANR	2463733	Identifier	currentCondition		2463454	0					
ANR	2463734	WhileStatement	while ( ! condStack . IsEmpty ( ) )		2463454	18					
ANR	2463735	Condition	! condStack . IsEmpty ( )	237:8:5771:5791	2463454	0	True				
ANR	2463736	UnaryOperationExpression	! condStack . IsEmpty ( )		2463454	0					
ANR	2463737	UnaryOperator	!		2463454	0					
ANR	2463738	CallExpression	condStack . IsEmpty ( )		2463454	1					
ANR	2463739	Callee	condStack . IsEmpty		2463454	0					
ANR	2463740	MemberAccess	condStack . IsEmpty		2463454	0					
ANR	2463741	Identifier	condStack		2463454	0					
ANR	2463742	Identifier	IsEmpty		2463454	1					
ANR	2463743	ArgumentList			2463454	1					
ANR	2463744	CompoundStatement		88:32:2178:2178	2463454	1					
ANR	2463745	ExpressionStatement	p -> AppendCondition ( condStack . Pop ( ) )	238:2:5799:5837	2463454	0	True				
ANR	2463746	CallExpression	p -> AppendCondition ( condStack . Pop ( ) )		2463454	0					
ANR	2463747	Callee	p -> AppendCondition		2463454	0					
ANR	2463748	PtrMemberAccess	p -> AppendCondition		2463454	0					
ANR	2463749	Identifier	p		2463454	0					
ANR	2463750	Identifier	AppendCondition		2463454	1					
ANR	2463751	ArgumentList	condStack . Pop ( )		2463454	1					
ANR	2463752	Argument	condStack . Pop ( )		2463454	0					
ANR	2463753	CallExpression	condStack . Pop ( )		2463454	0					
ANR	2463754	Callee	condStack . Pop		2463454	0					
ANR	2463755	MemberAccess	condStack . Pop		2463454	0					
ANR	2463756	Identifier	condStack		2463454	0					
ANR	2463757	Identifier	Pop		2463454	1					
ANR	2463758	ArgumentList			2463454	1					
ANR	2463759	ReturnStatement	return true ;	241:1:5844:5855	2463454	19	True				
ANR	2463760	Identifier	true		2463454	0					
ANR	2463761	ReturnType	bool		2463454	1					
ANR	2463762	Identifier	BoolExpr :: ExprToProfile		2463454	2					
ANR	2463763	ParameterList	"classad :: ExprTree * expr , Profile * & p"		2463454	3					
ANR	2463764	Parameter	classad :: ExprTree * expr	149:15:3577:3599	2463454	0	True				
ANR	2463765	ParameterType	classad :: ExprTree *		2463454	0					
ANR	2463766	Identifier	expr		2463454	1					
ANR	2463767	Parameter	Profile * & p	149:40:3602:3612	2463454	1	True				
ANR	2463768	ParameterType	Profile * &		2463454	0					
ANR	2463769	Identifier	p		2463454	1					
ANR	2463770	CFGEntryNode	ENTRY		2463454		True				
ANR	2463771	CFGExitNode	EXIT		2463454		True				
ANR	2463772	Symbol	atLeftMostCondition		2463454						
ANR	2463773	Symbol	classad :: ExprTree :: OP_NODE		2463454						
ANR	2463774	Symbol	left -> GetKind		2463454						
ANR	2463775	Symbol	* currentTree		2463454						
ANR	2463776	Symbol	classad :: Operation :: PARENTHESES_OP		2463454						
ANR	2463777	Symbol	ExprToCondition		2463454						
ANR	2463778	Symbol	p -> Init		2463454						
ANR	2463779	Symbol	expr		2463454						
ANR	2463780	Symbol	classad :: ExprTree :: ATTRREF_NODE		2463454						
ANR	2463781	Symbol	* left		2463454						
ANR	2463782	Symbol	val		2463454						
ANR	2463783	Symbol	op		2463454						
ANR	2463784	Symbol	currentTree		2463454						
ANR	2463785	Symbol	classad :: Operation :: LOGICAL_AND_OP		2463454						
ANR	2463786	Symbol	NULL		2463454						
ANR	2463787	Symbol	condStack . IsEmpty		2463454						
ANR	2463788	Symbol	kind		2463454						
ANR	2463789	Symbol	false		2463454						
ANR	2463790	Symbol	currentCondition		2463454						
ANR	2463791	Symbol	right		2463454						
ANR	2463792	Symbol	p		2463454						
ANR	2463793	Symbol	currentTree -> GetKind		2463454						
ANR	2463794	Symbol	left		2463454						
ANR	2463795	Symbol	condStack		2463454						
ANR	2463796	Symbol	condStack . Pop		2463454						
ANR	2463797	Symbol	true		2463454						
ANR	2463798	Symbol	junk		2463454						
ANR	2463799	Symbol	* p		2463454						
ANR	2463800	Symbol	classad :: ExprTree :: FN_CALL_NODE		2463454						
ANR	2463801	Function	BoolExpr :: ExprToCondition	244:0:5860:12366							
ANR	2463802	FunctionDef	"BoolExpr :: ExprToCondition (classad :: ExprTree * expr , Condition * & c)"		2463801	0					
ANR	2463803	CompoundStatement		246:0:5934:12366	2463801	0					
ANR	2463804	IfStatement	if ( expr == NULL )		2463801	0					
ANR	2463805	Condition	expr == NULL	247:5:5941:5952	2463801	0	True				
ANR	2463806	EqualityExpression	expr == NULL		2463801	0		==			
ANR	2463807	Identifier	expr		2463801	0					
ANR	2463808	Identifier	NULL		2463801	1					
ANR	2463809	CompoundStatement		2:20:21:21	2463801	1					
ANR	2463810	ExpressionStatement	"cerr << ""error: ExprToCondition given NULL ptr"" << endl"	248:2:5960:6015	2463801	0	True				
ANR	2463811	ShiftExpression	"cerr << ""error: ExprToCondition given NULL ptr"" << endl"		2463801	0		<<			
ANR	2463812	Identifier	cerr		2463801	0					
ANR	2463813	ShiftExpression	"""error: ExprToCondition given NULL ptr"" << endl"		2463801	1		<<			
ANR	2463814	PrimaryExpression	"""error: ExprToCondition given NULL ptr"""		2463801	0					
ANR	2463815	Identifier	endl		2463801	1					
ANR	2463816	ReturnStatement	return false ;	250:2:6063:6075	2463801	1	True				
ANR	2463817	Identifier	false		2463801	0					
ANR	2463818	IdentifierDeclStatement	classad :: ExprTree :: NodeKind kind ;	253:1:6082:6114	2463801	1	True				
ANR	2463819	IdentifierDecl	kind		2463801	0					
ANR	2463820	IdentifierDeclType	classad :: ExprTree :: NodeKind		2463801	0					
ANR	2463821	Identifier	kind		2463801	1					
ANR	2463822	IdentifierDeclStatement	classad :: Operation :: OpKind op = classad :: Operation :: __NO_OP__ ;	254:1:6118:6179	2463801	2	True				
ANR	2463823	IdentifierDecl	op = classad :: Operation :: __NO_OP__		2463801	0					
ANR	2463824	IdentifierDeclType	classad :: Operation :: OpKind		2463801	0					
ANR	2463825	Identifier	op		2463801	1					
ANR	2463826	AssignmentExpression	op = classad :: Operation :: __NO_OP__		2463801	2		=			
ANR	2463827	Identifier	classad :: Operation :: __NO_OP__		2463801	0					
ANR	2463828	Identifier	classad :: Operation :: __NO_OP__		2463801	1					
ANR	2463829	IdentifierDeclStatement	classad :: ExprTree * left = NULL ;	255:1:6182:6212	2463801	3	True				
ANR	2463830	IdentifierDecl	* left = NULL		2463801	0					
ANR	2463831	IdentifierDeclType	classad :: ExprTree *		2463801	0					
ANR	2463832	Identifier	left		2463801	1					
ANR	2463833	AssignmentExpression	* left = NULL		2463801	2		=			
ANR	2463834	Identifier	NULL		2463801	0					
ANR	2463835	Identifier	NULL		2463801	1					
ANR	2463836	IdentifierDeclStatement	classad :: ExprTree * right = NULL ;	256:1:6215:6246	2463801	4	True				
ANR	2463837	IdentifierDecl	* right = NULL		2463801	0					
ANR	2463838	IdentifierDeclType	classad :: ExprTree *		2463801	0					
ANR	2463839	Identifier	right		2463801	1					
ANR	2463840	AssignmentExpression	* right = NULL		2463801	2		=			
ANR	2463841	Identifier	NULL		2463801	0					
ANR	2463842	Identifier	NULL		2463801	1					
ANR	2463843	IdentifierDeclStatement	classad :: ExprTree * base = NULL ;	257:1:6249:6279	2463801	5	True				
ANR	2463844	IdentifierDecl	* base = NULL		2463801	0					
ANR	2463845	IdentifierDeclType	classad :: ExprTree *		2463801	0					
ANR	2463846	Identifier	base		2463801	1					
ANR	2463847	AssignmentExpression	* base = NULL		2463801	2		=			
ANR	2463848	Identifier	NULL		2463801	0					
ANR	2463849	Identifier	NULL		2463801	1					
ANR	2463850	IdentifierDeclStatement	classad :: ExprTree * junk = NULL ;	258:1:6282:6312	2463801	6	True				
ANR	2463851	IdentifierDecl	* junk = NULL		2463801	0					
ANR	2463852	IdentifierDeclType	classad :: ExprTree *		2463801	0					
ANR	2463853	Identifier	junk		2463801	1					
ANR	2463854	AssignmentExpression	* junk = NULL		2463801	2		=			
ANR	2463855	Identifier	NULL		2463801	0					
ANR	2463856	Identifier	NULL		2463801	1					
ANR	2463857	IdentifierDeclStatement	string attr ;	259:1:6315:6326	2463801	7	True				
ANR	2463858	IdentifierDecl	attr		2463801	0					
ANR	2463859	IdentifierDeclType	string		2463801	0					
ANR	2463860	Identifier	attr		2463801	1					
ANR	2463861	IdentifierDeclStatement	bool junkBool ;	260:1:6329:6342	2463801	8	True				
ANR	2463862	IdentifierDecl	junkBool		2463801	0					
ANR	2463863	IdentifierDeclType	bool		2463801	0					
ANR	2463864	Identifier	junkBool		2463801	1					
ANR	2463865	IdentifierDeclStatement	classad :: Value val ;	261:1:6345:6363	2463801	9	True				
ANR	2463866	IdentifierDecl	val		2463801	0					
ANR	2463867	IdentifierDeclType	classad :: Value		2463801	0					
ANR	2463868	Identifier	val		2463801	1					
ANR	2463869	ExpressionStatement	kind = expr -> GetKind ( )	264:1:6368:6391	2463801	10	True				
ANR	2463870	AssignmentExpression	kind = expr -> GetKind ( )		2463801	0		=			
ANR	2463871	Identifier	kind		2463801	0					
ANR	2463872	CallExpression	expr -> GetKind ( )		2463801	1					
ANR	2463873	Callee	expr -> GetKind		2463801	0					
ANR	2463874	PtrMemberAccess	expr -> GetKind		2463801	0					
ANR	2463875	Identifier	expr		2463801	0					
ANR	2463876	Identifier	GetKind		2463801	1					
ANR	2463877	ArgumentList			2463801	1					
ANR	2463878	IfStatement	if ( kind == classad :: ExprTree :: ATTRREF_NODE )		2463801	11					
ANR	2463879	Condition	kind == classad :: ExprTree :: ATTRREF_NODE	266:5:6399:6437	2463801	0	True				
ANR	2463880	EqualityExpression	kind == classad :: ExprTree :: ATTRREF_NODE		2463801	0		==			
ANR	2463881	Identifier	kind		2463801	0					
ANR	2463882	Identifier	classad :: ExprTree :: ATTRREF_NODE		2463801	1					
ANR	2463883	CompoundStatement		21:47:506:506	2463801	1					
ANR	2463884	ExpressionStatement	"( ( classad :: AttributeReference * ) expr ) -> GetComponents ( base , attr , junkBool )"	267:2:6445:6542	2463801	0	True				
ANR	2463885	CallExpression	"( ( classad :: AttributeReference * ) expr ) -> GetComponents ( base , attr , junkBool )"		2463801	0					
ANR	2463886	Callee	( ( classad :: AttributeReference * ) expr ) -> GetComponents		2463801	0					
ANR	2463887	PtrMemberAccess	( ( classad :: AttributeReference * ) expr ) -> GetComponents		2463801	0					
ANR	2463888	CastExpression	( classad :: AttributeReference * ) expr		2463801	0					
ANR	2463889	CastTarget	classad :: AttributeReference *		2463801	0					
ANR	2463890	Identifier	expr		2463801	1					
ANR	2463891	Identifier	GetComponents		2463801	1					
ANR	2463892	ArgumentList	base		2463801	1					
ANR	2463893	Argument	base		2463801	0					
ANR	2463894	Identifier	base		2463801	0					
ANR	2463895	Argument	attr		2463801	1					
ANR	2463896	Identifier	attr		2463801	0					
ANR	2463897	Argument	junkBool		2463801	2					
ANR	2463898	Identifier	junkBool		2463801	0					
ANR	2463899	IfStatement	"if ( ! c -> Init ( attr , expr -> Copy ( ) , true ) )"		2463801	1					
ANR	2463900	Condition	"! c -> Init ( attr , expr -> Copy ( ) , true )"	269:6:6550:6586	2463801	0	True				
ANR	2463901	UnaryOperationExpression	"! c -> Init ( attr , expr -> Copy ( ) , true )"		2463801	0					
ANR	2463902	UnaryOperator	!		2463801	0					
ANR	2463903	CallExpression	"c -> Init ( attr , expr -> Copy ( ) , true )"		2463801	1					
ANR	2463904	Callee	c -> Init		2463801	0					
ANR	2463905	PtrMemberAccess	c -> Init		2463801	0					
ANR	2463906	Identifier	c		2463801	0					
ANR	2463907	Identifier	Init		2463801	1					
ANR	2463908	ArgumentList	attr		2463801	1					
ANR	2463909	Argument	attr		2463801	0					
ANR	2463910	Identifier	attr		2463801	0					
ANR	2463911	Argument	expr -> Copy ( )		2463801	1					
ANR	2463912	CallExpression	expr -> Copy ( )		2463801	0					
ANR	2463913	Callee	expr -> Copy		2463801	0					
ANR	2463914	PtrMemberAccess	expr -> Copy		2463801	0					
ANR	2463915	Identifier	expr		2463801	0					
ANR	2463916	Identifier	Copy		2463801	1					
ANR	2463917	ArgumentList			2463801	1					
ANR	2463918	Argument	true		2463801	2					
ANR	2463919	Identifier	true		2463801	0					
ANR	2463920	CompoundStatement		24:46:655:655	2463801	1					
ANR	2463921	ExpressionStatement	"cerr << ""error: problem with Condition::Init"" << endl"	270:6:6598:6651	2463801	0	True				
ANR	2463922	ShiftExpression	"cerr << ""error: problem with Condition::Init"" << endl"		2463801	0		<<			
ANR	2463923	Identifier	cerr		2463801	0					
ANR	2463924	ShiftExpression	"""error: problem with Condition::Init"" << endl"		2463801	1		<<			
ANR	2463925	PrimaryExpression	"""error: problem with Condition::Init"""		2463801	0					
ANR	2463926	Identifier	endl		2463801	1					
ANR	2463927	ReturnStatement	return false ;	271:6:6659:6671	2463801	1	True				
ANR	2463928	Identifier	false		2463801	0					
ANR	2463929	ReturnStatement	return true ;	273:2:6679:6690	2463801	2	True				
ANR	2463930	Identifier	true		2463801	0					
ANR	2463931	IfStatement	if ( kind == classad :: ExprTree :: FN_CALL_NODE )		2463801	12					
ANR	2463932	Condition	kind == classad :: ExprTree :: FN_CALL_NODE	276:5:6701:6739	2463801	0	True				
ANR	2463933	EqualityExpression	kind == classad :: ExprTree :: FN_CALL_NODE		2463801	0		==			
ANR	2463934	Identifier	kind		2463801	0					
ANR	2463935	Identifier	classad :: ExprTree :: FN_CALL_NODE		2463801	1					
ANR	2463936	CompoundStatement		31:47:808:808	2463801	1					
ANR	2463937	IfStatement	if ( ! c -> InitComplex ( expr -> Copy ( ) ) )		2463801	0					
ANR	2463938	Condition	! c -> InitComplex ( expr -> Copy ( ) )	277:6:6751:6782	2463801	0	True				
ANR	2463939	UnaryOperationExpression	! c -> InitComplex ( expr -> Copy ( ) )		2463801	0					
ANR	2463940	UnaryOperator	!		2463801	0					
ANR	2463941	CallExpression	c -> InitComplex ( expr -> Copy ( ) )		2463801	1					
ANR	2463942	Callee	c -> InitComplex		2463801	0					
ANR	2463943	PtrMemberAccess	c -> InitComplex		2463801	0					
ANR	2463944	Identifier	c		2463801	0					
ANR	2463945	Identifier	InitComplex		2463801	1					
ANR	2463946	ArgumentList	expr -> Copy ( )		2463801	1					
ANR	2463947	Argument	expr -> Copy ( )		2463801	0					
ANR	2463948	CallExpression	expr -> Copy ( )		2463801	0					
ANR	2463949	Callee	expr -> Copy		2463801	0					
ANR	2463950	PtrMemberAccess	expr -> Copy		2463801	0					
ANR	2463951	Identifier	expr		2463801	0					
ANR	2463952	Identifier	Copy		2463801	1					
ANR	2463953	ArgumentList			2463801	1					
ANR	2463954	CompoundStatement		32:41:851:851	2463801	1					
ANR	2463955	ExpressionStatement	"cerr << ""error: problem with Condition::InitComplex"" << endl"	278:6:6794:6854	2463801	0	True				
ANR	2463956	ShiftExpression	"cerr << ""error: problem with Condition::InitComplex"" << endl"		2463801	0		<<			
ANR	2463957	Identifier	cerr		2463801	0					
ANR	2463958	ShiftExpression	"""error: problem with Condition::InitComplex"" << endl"		2463801	1		<<			
ANR	2463959	PrimaryExpression	"""error: problem with Condition::InitComplex"""		2463801	0					
ANR	2463960	Identifier	endl		2463801	1					
ANR	2463961	ReturnStatement	return false ;	279:6:6862:6874	2463801	1	True				
ANR	2463962	Identifier	false		2463801	0					
ANR	2463963	ReturnStatement	return true ;	281:2:6882:6893	2463801	1	True				
ANR	2463964	Identifier	true		2463801	0					
ANR	2463965	IfStatement	if ( kind != classad :: ExprTree :: OP_NODE )		2463801	13					
ANR	2463966	Condition	kind != classad :: ExprTree :: OP_NODE	284:5:6904:6937	2463801	0	True				
ANR	2463967	EqualityExpression	kind != classad :: ExprTree :: OP_NODE		2463801	0		!=			
ANR	2463968	Identifier	kind		2463801	0					
ANR	2463969	Identifier	classad :: ExprTree :: OP_NODE		2463801	1					
ANR	2463970	CompoundStatement		39:42:1006:1006	2463801	1					
ANR	2463971	ExpressionStatement	"cerr << ""error: no operator/attribute found"" << endl"	285:2:6945:6997	2463801	0	True				
ANR	2463972	ShiftExpression	"cerr << ""error: no operator/attribute found"" << endl"		2463801	0		<<			
ANR	2463973	Identifier	cerr		2463801	0					
ANR	2463974	ShiftExpression	"""error: no operator/attribute found"" << endl"		2463801	1		<<			
ANR	2463975	PrimaryExpression	"""error: no operator/attribute found"""		2463801	0					
ANR	2463976	Identifier	endl		2463801	1					
ANR	2463977	ReturnStatement	return false ;	287:2:7044:7056	2463801	1	True				
ANR	2463978	Identifier	false		2463801	0					
ANR	2463979	ExpressionStatement	"( ( classad :: Operation * ) expr ) -> GetComponents ( op , left , right , junk )"	290:1:7063:7135	2463801	14	True				
ANR	2463980	CallExpression	"( ( classad :: Operation * ) expr ) -> GetComponents ( op , left , right , junk )"		2463801	0					
ANR	2463981	Callee	( ( classad :: Operation * ) expr ) -> GetComponents		2463801	0					
ANR	2463982	PtrMemberAccess	( ( classad :: Operation * ) expr ) -> GetComponents		2463801	0					
ANR	2463983	CastExpression	( classad :: Operation * ) expr		2463801	0					
ANR	2463984	CastTarget	classad :: Operation *		2463801	0					
ANR	2463985	Identifier	expr		2463801	1					
ANR	2463986	Identifier	GetComponents		2463801	1					
ANR	2463987	ArgumentList	op		2463801	1					
ANR	2463988	Argument	op		2463801	0					
ANR	2463989	Identifier	op		2463801	0					
ANR	2463990	Argument	left		2463801	1					
ANR	2463991	Identifier	left		2463801	0					
ANR	2463992	Argument	right		2463801	2					
ANR	2463993	Identifier	right		2463801	0					
ANR	2463994	Argument	junk		2463801	3					
ANR	2463995	Identifier	junk		2463801	0					
ANR	2463996	WhileStatement	while ( op == classad :: Operation :: PARENTHESES_OP )		2463801	15					
ANR	2463997	Condition	op == classad :: Operation :: PARENTHESES_OP	292:8:7146:7185	2463801	0	True				
ANR	2463998	EqualityExpression	op == classad :: Operation :: PARENTHESES_OP		2463801	0		==			
ANR	2463999	Identifier	op		2463801	0					
ANR	2464000	Identifier	classad :: Operation :: PARENTHESES_OP		2463801	1					
ANR	2464001	CompoundStatement		47:51:1254:1254	2463801	1					
ANR	2464002	IfStatement	if ( left -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE )		2463801	0					
ANR	2464003	Condition	left -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE	293:6:7197:7247	2463801	0	True				
ANR	2464004	EqualityExpression	left -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE		2463801	0		==			
ANR	2464005	CallExpression	left -> GetKind ( )		2463801	0					
ANR	2464006	Callee	left -> GetKind		2463801	0					
ANR	2464007	PtrMemberAccess	left -> GetKind		2463801	0					
ANR	2464008	Identifier	left		2463801	0					
ANR	2464009	Identifier	GetKind		2463801	1					
ANR	2464010	ArgumentList			2463801	1					
ANR	2464011	Identifier	classad :: ExprTree :: ATTRREF_NODE		2463801	1					
ANR	2464012	CompoundStatement		48:60:1316:1316	2463801	1					
ANR	2464013	ExpressionStatement	"( ( classad :: AttributeReference * ) left ) -> GetComponents ( base , attr , junkBool )"	294:3:7256:7349	2463801	0	True				
ANR	2464014	CallExpression	"( ( classad :: AttributeReference * ) left ) -> GetComponents ( base , attr , junkBool )"		2463801	0					
ANR	2464015	Callee	( ( classad :: AttributeReference * ) left ) -> GetComponents		2463801	0					
ANR	2464016	PtrMemberAccess	( ( classad :: AttributeReference * ) left ) -> GetComponents		2463801	0					
ANR	2464017	CastExpression	( classad :: AttributeReference * ) left		2463801	0					
ANR	2464018	CastTarget	classad :: AttributeReference *		2463801	0					
ANR	2464019	Identifier	left		2463801	1					
ANR	2464020	Identifier	GetComponents		2463801	1					
ANR	2464021	ArgumentList	base		2463801	1					
ANR	2464022	Argument	base		2463801	0					
ANR	2464023	Identifier	base		2463801	0					
ANR	2464024	Argument	attr		2463801	1					
ANR	2464025	Identifier	attr		2463801	0					
ANR	2464026	Argument	junkBool		2463801	2					
ANR	2464027	Identifier	junkBool		2463801	0					
ANR	2464028	IfStatement	"if ( ! c -> Init ( attr , expr -> Copy ( ) , true ) )"		2463801	1					
ANR	2464029	Condition	"! c -> Init ( attr , expr -> Copy ( ) , true )"	296:7:7358:7394	2463801	0	True				
ANR	2464030	UnaryOperationExpression	"! c -> Init ( attr , expr -> Copy ( ) , true )"		2463801	0					
ANR	2464031	UnaryOperator	!		2463801	0					
ANR	2464032	CallExpression	"c -> Init ( attr , expr -> Copy ( ) , true )"		2463801	1					
ANR	2464033	Callee	c -> Init		2463801	0					
ANR	2464034	PtrMemberAccess	c -> Init		2463801	0					
ANR	2464035	Identifier	c		2463801	0					
ANR	2464036	Identifier	Init		2463801	1					
ANR	2464037	ArgumentList	attr		2463801	1					
ANR	2464038	Argument	attr		2463801	0					
ANR	2464039	Identifier	attr		2463801	0					
ANR	2464040	Argument	expr -> Copy ( )		2463801	1					
ANR	2464041	CallExpression	expr -> Copy ( )		2463801	0					
ANR	2464042	Callee	expr -> Copy		2463801	0					
ANR	2464043	PtrMemberAccess	expr -> Copy		2463801	0					
ANR	2464044	Identifier	expr		2463801	0					
ANR	2464045	Identifier	Copy		2463801	1					
ANR	2464046	ArgumentList			2463801	1					
ANR	2464047	Argument	true		2463801	2					
ANR	2464048	Identifier	true		2463801	0					
ANR	2464049	CompoundStatement		51:47:1463:1463	2463801	1					
ANR	2464050	ExpressionStatement	"cerr << ""error: problem with Condition::Init"" << endl"	297:6:7406:7459	2463801	0	True				
ANR	2464051	ShiftExpression	"cerr << ""error: problem with Condition::Init"" << endl"		2463801	0		<<			
ANR	2464052	Identifier	cerr		2463801	0					
ANR	2464053	ShiftExpression	"""error: problem with Condition::Init"" << endl"		2463801	1		<<			
ANR	2464054	PrimaryExpression	"""error: problem with Condition::Init"""		2463801	0					
ANR	2464055	Identifier	endl		2463801	1					
ANR	2464056	ReturnStatement	return false ;	298:6:7467:7479	2463801	1	True				
ANR	2464057	Identifier	false		2463801	0					
ANR	2464058	ReturnStatement	return true ;	300:3:7489:7500	2463801	2	True				
ANR	2464059	Identifier	true		2463801	0					
ANR	2464060	ExpressionStatement	"( ( classad :: Operation * ) left ) -> GetComponents ( op , left , right , junk )"	302:2:7509:7596	2463801	1	True				
ANR	2464061	CallExpression	"( ( classad :: Operation * ) left ) -> GetComponents ( op , left , right , junk )"		2463801	0					
ANR	2464062	Callee	( ( classad :: Operation * ) left ) -> GetComponents		2463801	0					
ANR	2464063	PtrMemberAccess	( ( classad :: Operation * ) left ) -> GetComponents		2463801	0					
ANR	2464064	CastExpression	( classad :: Operation * ) left		2463801	0					
ANR	2464065	CastTarget	classad :: Operation *		2463801	0					
ANR	2464066	Identifier	left		2463801	1					
ANR	2464067	Identifier	GetComponents		2463801	1					
ANR	2464068	ArgumentList	op		2463801	1					
ANR	2464069	Argument	op		2463801	0					
ANR	2464070	Identifier	op		2463801	0					
ANR	2464071	Argument	left		2463801	1					
ANR	2464072	Identifier	left		2463801	0					
ANR	2464073	Argument	right		2463801	2					
ANR	2464074	Identifier	right		2463801	0					
ANR	2464075	Argument	junk		2463801	3					
ANR	2464076	Identifier	junk		2463801	0					
ANR	2464077	IfStatement	if ( op == classad :: Operation :: LOGICAL_OR_OP )		2463801	16					
ANR	2464078	Condition	op == classad :: Operation :: LOGICAL_OR_OP	309:5:7742:7780	2463801	0	True				
ANR	2464079	EqualityExpression	op == classad :: Operation :: LOGICAL_OR_OP		2463801	0		==			
ANR	2464080	Identifier	op		2463801	0					
ANR	2464081	Identifier	classad :: Operation :: LOGICAL_OR_OP		2463801	1					
ANR	2464082	CompoundStatement		70:2:2041:2067	2463801	1					
ANR	2464083	IdentifierDeclStatement	"classad :: Operation :: OpKind leftOp , rightOp ;"	310:2:7788:7830	2463801	0	True				
ANR	2464084	IdentifierDecl	leftOp		2463801	0					
ANR	2464085	IdentifierDeclType	classad :: Operation :: OpKind		2463801	0					
ANR	2464086	Identifier	leftOp		2463801	1					
ANR	2464087	IdentifierDecl	rightOp		2463801	1					
ANR	2464088	IdentifierDeclType	classad :: Operation :: OpKind		2463801	0					
ANR	2464089	Identifier	rightOp		2463801	1					
ANR	2464090	IdentifierDeclStatement	classad :: ExprTree * left1 = NULL ;	311:2:7834:7865	2463801	1	True				
ANR	2464091	IdentifierDecl	* left1 = NULL		2463801	0					
ANR	2464092	IdentifierDeclType	classad :: ExprTree *		2463801	0					
ANR	2464093	Identifier	left1		2463801	1					
ANR	2464094	AssignmentExpression	* left1 = NULL		2463801	2		=			
ANR	2464095	Identifier	NULL		2463801	0					
ANR	2464096	Identifier	NULL		2463801	1					
ANR	2464097	IdentifierDeclStatement	classad :: ExprTree * right1 = NULL ;	312:2:7869:7901	2463801	2	True				
ANR	2464098	IdentifierDecl	* right1 = NULL		2463801	0					
ANR	2464099	IdentifierDeclType	classad :: ExprTree *		2463801	0					
ANR	2464100	Identifier	right1		2463801	1					
ANR	2464101	AssignmentExpression	* right1 = NULL		2463801	2		=			
ANR	2464102	Identifier	NULL		2463801	0					
ANR	2464103	Identifier	NULL		2463801	1					
ANR	2464104	IdentifierDeclStatement	classad :: ExprTree * left2 = NULL ;	313:2:7905:7936	2463801	3	True				
ANR	2464105	IdentifierDecl	* left2 = NULL		2463801	0					
ANR	2464106	IdentifierDeclType	classad :: ExprTree *		2463801	0					
ANR	2464107	Identifier	left2		2463801	1					
ANR	2464108	AssignmentExpression	* left2 = NULL		2463801	2		=			
ANR	2464109	Identifier	NULL		2463801	0					
ANR	2464110	Identifier	NULL		2463801	1					
ANR	2464111	IdentifierDeclStatement	classad :: ExprTree * right2 = NULL ;	314:2:7940:7972	2463801	4	True				
ANR	2464112	IdentifierDecl	* right2 = NULL		2463801	0					
ANR	2464113	IdentifierDeclType	classad :: ExprTree *		2463801	0					
ANR	2464114	Identifier	right2		2463801	1					
ANR	2464115	AssignmentExpression	* right2 = NULL		2463801	2		=			
ANR	2464116	Identifier	NULL		2463801	0					
ANR	2464117	Identifier	NULL		2463801	1					
ANR	2464118	IdentifierDeclStatement	"string leftAttr , rightAttr ;"	315:2:7976:8002	2463801	5	True				
ANR	2464119	IdentifierDecl	leftAttr		2463801	0					
ANR	2464120	IdentifierDeclType	string		2463801	0					
ANR	2464121	Identifier	leftAttr		2463801	1					
ANR	2464122	IdentifierDecl	rightAttr		2463801	1					
ANR	2464123	IdentifierDeclType	string		2463801	0					
ANR	2464124	Identifier	rightAttr		2463801	1					
ANR	2464125	IfStatement	if ( left != NULL && right != NULL && left -> GetKind ( ) == classad :: Operation :: OP_NODE && right -> GetKind ( ) == classad :: Operation :: OP_NODE )		2463801	6					
ANR	2464126	Condition	left != NULL && right != NULL && left -> GetKind ( ) == classad :: Operation :: OP_NODE && right -> GetKind ( ) == classad :: Operation :: OP_NODE	317:6:8011:8152	2463801	0	True				
ANR	2464127	AndExpression	left != NULL && right != NULL && left -> GetKind ( ) == classad :: Operation :: OP_NODE && right -> GetKind ( ) == classad :: Operation :: OP_NODE		2463801	0		&&			
ANR	2464128	EqualityExpression	left != NULL		2463801	0		!=			
ANR	2464129	Identifier	left		2463801	0					
ANR	2464130	Identifier	NULL		2463801	1					
ANR	2464131	AndExpression	right != NULL && left -> GetKind ( ) == classad :: Operation :: OP_NODE && right -> GetKind ( ) == classad :: Operation :: OP_NODE		2463801	1		&&			
ANR	2464132	EqualityExpression	right != NULL		2463801	0		!=			
ANR	2464133	Identifier	right		2463801	0					
ANR	2464134	Identifier	NULL		2463801	1					
ANR	2464135	AndExpression	left -> GetKind ( ) == classad :: Operation :: OP_NODE && right -> GetKind ( ) == classad :: Operation :: OP_NODE		2463801	1		&&			
ANR	2464136	EqualityExpression	left -> GetKind ( ) == classad :: Operation :: OP_NODE		2463801	0		==			
ANR	2464137	CallExpression	left -> GetKind ( )		2463801	0					
ANR	2464138	Callee	left -> GetKind		2463801	0					
ANR	2464139	PtrMemberAccess	left -> GetKind		2463801	0					
ANR	2464140	Identifier	left		2463801	0					
ANR	2464141	Identifier	GetKind		2463801	1					
ANR	2464142	ArgumentList			2463801	1					
ANR	2464143	Identifier	classad :: Operation :: OP_NODE		2463801	1					
ANR	2464144	EqualityExpression	right -> GetKind ( ) == classad :: Operation :: OP_NODE		2463801	1		==			
ANR	2464145	CallExpression	right -> GetKind ( )		2463801	0					
ANR	2464146	Callee	right -> GetKind		2463801	0					
ANR	2464147	PtrMemberAccess	right -> GetKind		2463801	0					
ANR	2464148	Identifier	right		2463801	0					
ANR	2464149	Identifier	GetKind		2463801	1					
ANR	2464150	ArgumentList			2463801	1					
ANR	2464151	Identifier	classad :: Operation :: OP_NODE		2463801	1					
ANR	2464152	CompoundStatement		75:54:2221:2221	2463801	1					
ANR	2464153	ExpressionStatement	"( ( classad :: Operation * ) left ) -> GetComponents ( leftOp , left1 , left2 , junk )"	321:3:8161:8254	2463801	0	True				
ANR	2464154	CallExpression	"( ( classad :: Operation * ) left ) -> GetComponents ( leftOp , left1 , left2 , junk )"		2463801	0					
ANR	2464155	Callee	( ( classad :: Operation * ) left ) -> GetComponents		2463801	0					
ANR	2464156	PtrMemberAccess	( ( classad :: Operation * ) left ) -> GetComponents		2463801	0					
ANR	2464157	CastExpression	( classad :: Operation * ) left		2463801	0					
ANR	2464158	CastTarget	classad :: Operation *		2463801	0					
ANR	2464159	Identifier	left		2463801	1					
ANR	2464160	Identifier	GetComponents		2463801	1					
ANR	2464161	ArgumentList	leftOp		2463801	1					
ANR	2464162	Argument	leftOp		2463801	0					
ANR	2464163	Identifier	leftOp		2463801	0					
ANR	2464164	Argument	left1		2463801	1					
ANR	2464165	Identifier	left1		2463801	0					
ANR	2464166	Argument	left2		2463801	2					
ANR	2464167	Identifier	left2		2463801	0					
ANR	2464168	Argument	junk		2463801	3					
ANR	2464169	Identifier	junk		2463801	0					
ANR	2464170	ExpressionStatement	"( ( classad :: Operation * ) right ) -> GetComponents ( rightOp , right1 , right2 , junk )"	323:3:8259:8357	2463801	1	True				
ANR	2464171	CallExpression	"( ( classad :: Operation * ) right ) -> GetComponents ( rightOp , right1 , right2 , junk )"		2463801	0					
ANR	2464172	Callee	( ( classad :: Operation * ) right ) -> GetComponents		2463801	0					
ANR	2464173	PtrMemberAccess	( ( classad :: Operation * ) right ) -> GetComponents		2463801	0					
ANR	2464174	CastExpression	( classad :: Operation * ) right		2463801	0					
ANR	2464175	CastTarget	classad :: Operation *		2463801	0					
ANR	2464176	Identifier	right		2463801	1					
ANR	2464177	Identifier	GetComponents		2463801	1					
ANR	2464178	ArgumentList	rightOp		2463801	1					
ANR	2464179	Argument	rightOp		2463801	0					
ANR	2464180	Identifier	rightOp		2463801	0					
ANR	2464181	Argument	right1		2463801	1					
ANR	2464182	Identifier	right1		2463801	0					
ANR	2464183	Argument	right2		2463801	2					
ANR	2464184	Identifier	right2		2463801	0					
ANR	2464185	Argument	junk		2463801	3					
ANR	2464186	Identifier	junk		2463801	0					
ANR	2464187	IfStatement	if ( leftOp == classad :: Operation :: PARENTHESES_OP && rightOp == classad :: Operation :: PARENTHESES_OP && left1 != NULL && right1 != NULL && left1 -> GetKind ( ) == classad :: Operation :: OP_NODE && right1 -> GetKind ( ) == classad :: Operation :: OP_NODE )		2463801	2					
ANR	2464188	Condition	leftOp == classad :: Operation :: PARENTHESES_OP && rightOp == classad :: Operation :: PARENTHESES_OP && left1 != NULL && right1 != NULL && left1 -> GetKind ( ) == classad :: Operation :: OP_NODE && right1 -> GetKind ( ) == classad :: Operation :: OP_NODE	325:7:8366:8619	2463801	0	True				
ANR	2464189	AndExpression	leftOp == classad :: Operation :: PARENTHESES_OP && rightOp == classad :: Operation :: PARENTHESES_OP && left1 != NULL && right1 != NULL && left1 -> GetKind ( ) == classad :: Operation :: OP_NODE && right1 -> GetKind ( ) == classad :: Operation :: OP_NODE		2463801	0		&&			
ANR	2464190	EqualityExpression	leftOp == classad :: Operation :: PARENTHESES_OP		2463801	0		==			
ANR	2464191	Identifier	leftOp		2463801	0					
ANR	2464192	Identifier	classad :: Operation :: PARENTHESES_OP		2463801	1					
ANR	2464193	AndExpression	rightOp == classad :: Operation :: PARENTHESES_OP && left1 != NULL && right1 != NULL && left1 -> GetKind ( ) == classad :: Operation :: OP_NODE && right1 -> GetKind ( ) == classad :: Operation :: OP_NODE		2463801	1		&&			
ANR	2464194	EqualityExpression	rightOp == classad :: Operation :: PARENTHESES_OP		2463801	0		==			
ANR	2464195	Identifier	rightOp		2463801	0					
ANR	2464196	Identifier	classad :: Operation :: PARENTHESES_OP		2463801	1					
ANR	2464197	AndExpression	left1 != NULL && right1 != NULL && left1 -> GetKind ( ) == classad :: Operation :: OP_NODE && right1 -> GetKind ( ) == classad :: Operation :: OP_NODE		2463801	1		&&			
ANR	2464198	EqualityExpression	left1 != NULL		2463801	0		!=			
ANR	2464199	Identifier	left1		2463801	0					
ANR	2464200	Identifier	NULL		2463801	1					
ANR	2464201	AndExpression	right1 != NULL && left1 -> GetKind ( ) == classad :: Operation :: OP_NODE && right1 -> GetKind ( ) == classad :: Operation :: OP_NODE		2463801	1		&&			
ANR	2464202	EqualityExpression	right1 != NULL		2463801	0		!=			
ANR	2464203	Identifier	right1		2463801	0					
ANR	2464204	Identifier	NULL		2463801	1					
ANR	2464205	AndExpression	left1 -> GetKind ( ) == classad :: Operation :: OP_NODE && right1 -> GetKind ( ) == classad :: Operation :: OP_NODE		2463801	1		&&			
ANR	2464206	EqualityExpression	left1 -> GetKind ( ) == classad :: Operation :: OP_NODE		2463801	0		==			
ANR	2464207	CallExpression	left1 -> GetKind ( )		2463801	0					
ANR	2464208	Callee	left1 -> GetKind		2463801	0					
ANR	2464209	PtrMemberAccess	left1 -> GetKind		2463801	0					
ANR	2464210	Identifier	left1		2463801	0					
ANR	2464211	Identifier	GetKind		2463801	1					
ANR	2464212	ArgumentList			2463801	1					
ANR	2464213	Identifier	classad :: Operation :: OP_NODE		2463801	1					
ANR	2464214	EqualityExpression	right1 -> GetKind ( ) == classad :: Operation :: OP_NODE		2463801	1		==			
ANR	2464215	CallExpression	right1 -> GetKind ( )		2463801	0					
ANR	2464216	Callee	right1 -> GetKind		2463801	0					
ANR	2464217	PtrMemberAccess	right1 -> GetKind		2463801	0					
ANR	2464218	Identifier	right1		2463801	0					
ANR	2464219	Identifier	GetKind		2463801	1					
ANR	2464220	ArgumentList			2463801	1					
ANR	2464221	Identifier	classad :: Operation :: OP_NODE		2463801	1					
ANR	2464222	CompoundStatement		85:56:2688:2688	2463801	1					
ANR	2464223	ExpressionStatement	"( ( classad :: Operation * ) left1 ) -> GetComponents ( leftOp , left1 , left2 , junk )"	331:4:8629:8744	2463801	0	True				
ANR	2464224	CallExpression	"( ( classad :: Operation * ) left1 ) -> GetComponents ( leftOp , left1 , left2 , junk )"		2463801	0					
ANR	2464225	Callee	( ( classad :: Operation * ) left1 ) -> GetComponents		2463801	0					
ANR	2464226	PtrMemberAccess	( ( classad :: Operation * ) left1 ) -> GetComponents		2463801	0					
ANR	2464227	CastExpression	( classad :: Operation * ) left1		2463801	0					
ANR	2464228	CastTarget	classad :: Operation *		2463801	0					
ANR	2464229	Identifier	left1		2463801	1					
ANR	2464230	Identifier	GetComponents		2463801	1					
ANR	2464231	ArgumentList	leftOp		2463801	1					
ANR	2464232	Argument	leftOp		2463801	0					
ANR	2464233	Identifier	leftOp		2463801	0					
ANR	2464234	Argument	left1		2463801	1					
ANR	2464235	Identifier	left1		2463801	0					
ANR	2464236	Argument	left2		2463801	2					
ANR	2464237	Identifier	left2		2463801	0					
ANR	2464238	Argument	junk		2463801	3					
ANR	2464239	Identifier	junk		2463801	0					
ANR	2464240	ExpressionStatement	"( ( classad :: Operation * ) right1 ) -> GetComponents ( rightOp , right1 , right2 , junk )"	334:4:8750:8889	2463801	1	True				
ANR	2464241	CallExpression	"( ( classad :: Operation * ) right1 ) -> GetComponents ( rightOp , right1 , right2 , junk )"		2463801	0					
ANR	2464242	Callee	( ( classad :: Operation * ) right1 ) -> GetComponents		2463801	0					
ANR	2464243	PtrMemberAccess	( ( classad :: Operation * ) right1 ) -> GetComponents		2463801	0					
ANR	2464244	CastExpression	( classad :: Operation * ) right1		2463801	0					
ANR	2464245	CastTarget	classad :: Operation *		2463801	0					
ANR	2464246	Identifier	right1		2463801	1					
ANR	2464247	Identifier	GetComponents		2463801	1					
ANR	2464248	ArgumentList	rightOp		2463801	1					
ANR	2464249	Argument	rightOp		2463801	0					
ANR	2464250	Identifier	rightOp		2463801	0					
ANR	2464251	Argument	right1		2463801	1					
ANR	2464252	Identifier	right1		2463801	0					
ANR	2464253	Argument	right2		2463801	2					
ANR	2464254	Identifier	right2		2463801	0					
ANR	2464255	Argument	junk		2463801	3					
ANR	2464256	Identifier	junk		2463801	0					
ANR	2464257	IfStatement	if ( left1 != NULL && right1 != NULL && leftOp >= classad :: Operation :: __COMPARISON_START__ && leftOp <= classad :: Operation :: __COMPARISON_END__ && rightOp >= classad :: Operation :: __COMPARISON_START__ && rightOp <= classad :: Operation :: __COMPARISON_END__ && left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE )		2463801	3					
ANR	2464258	Condition	left1 != NULL && right1 != NULL && leftOp >= classad :: Operation :: __COMPARISON_START__ && leftOp <= classad :: Operation :: __COMPARISON_END__ && rightOp >= classad :: Operation :: __COMPARISON_START__ && rightOp <= classad :: Operation :: __COMPARISON_END__ && left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE	339:10:8906:9415	2463801	0	True				
ANR	2464259	AndExpression	left1 != NULL && right1 != NULL && leftOp >= classad :: Operation :: __COMPARISON_START__ && leftOp <= classad :: Operation :: __COMPARISON_END__ && rightOp >= classad :: Operation :: __COMPARISON_START__ && rightOp <= classad :: Operation :: __COMPARISON_END__ && left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		2463801	0		&&			
ANR	2464260	EqualityExpression	left1 != NULL		2463801	0		!=			
ANR	2464261	Identifier	left1		2463801	0					
ANR	2464262	Identifier	NULL		2463801	1					
ANR	2464263	AndExpression	right1 != NULL && leftOp >= classad :: Operation :: __COMPARISON_START__ && leftOp <= classad :: Operation :: __COMPARISON_END__ && rightOp >= classad :: Operation :: __COMPARISON_START__ && rightOp <= classad :: Operation :: __COMPARISON_END__ && left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		2463801	1		&&			
ANR	2464264	EqualityExpression	right1 != NULL		2463801	0		!=			
ANR	2464265	Identifier	right1		2463801	0					
ANR	2464266	Identifier	NULL		2463801	1					
ANR	2464267	AndExpression	leftOp >= classad :: Operation :: __COMPARISON_START__ && leftOp <= classad :: Operation :: __COMPARISON_END__ && rightOp >= classad :: Operation :: __COMPARISON_START__ && rightOp <= classad :: Operation :: __COMPARISON_END__ && left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		2463801	1		&&			
ANR	2464268	RelationalExpression	leftOp >= classad :: Operation :: __COMPARISON_START__		2463801	0		>=			
ANR	2464269	Identifier	leftOp		2463801	0					
ANR	2464270	Identifier	classad :: Operation :: __COMPARISON_START__		2463801	1					
ANR	2464271	AndExpression	leftOp <= classad :: Operation :: __COMPARISON_END__ && rightOp >= classad :: Operation :: __COMPARISON_START__ && rightOp <= classad :: Operation :: __COMPARISON_END__ && left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		2463801	1		&&			
ANR	2464272	RelationalExpression	leftOp <= classad :: Operation :: __COMPARISON_END__		2463801	0		<=			
ANR	2464273	Identifier	leftOp		2463801	0					
ANR	2464274	Identifier	classad :: Operation :: __COMPARISON_END__		2463801	1					
ANR	2464275	AndExpression	rightOp >= classad :: Operation :: __COMPARISON_START__ && rightOp <= classad :: Operation :: __COMPARISON_END__ && left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		2463801	1		&&			
ANR	2464276	RelationalExpression	rightOp >= classad :: Operation :: __COMPARISON_START__		2463801	0		>=			
ANR	2464277	Identifier	rightOp		2463801	0					
ANR	2464278	Identifier	classad :: Operation :: __COMPARISON_START__		2463801	1					
ANR	2464279	AndExpression	rightOp <= classad :: Operation :: __COMPARISON_END__ && left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		2463801	1		&&			
ANR	2464280	RelationalExpression	rightOp <= classad :: Operation :: __COMPARISON_END__		2463801	0		<=			
ANR	2464281	Identifier	rightOp		2463801	0					
ANR	2464282	Identifier	classad :: Operation :: __COMPARISON_END__		2463801	1					
ANR	2464283	AndExpression	left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		2463801	1		&&			
ANR	2464284	EqualityExpression	left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE		2463801	0		==			
ANR	2464285	CallExpression	left1 -> GetKind ( )		2463801	0					
ANR	2464286	Callee	left1 -> GetKind		2463801	0					
ANR	2464287	PtrMemberAccess	left1 -> GetKind		2463801	0					
ANR	2464288	Identifier	left1		2463801	0					
ANR	2464289	Identifier	GetKind		2463801	1					
ANR	2464290	ArgumentList			2463801	1					
ANR	2464291	Identifier	classad :: ExprTree :: ATTRREF_NODE		2463801	1					
ANR	2464292	AndExpression	right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		2463801	1		&&			
ANR	2464293	EqualityExpression	right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE		2463801	0		==			
ANR	2464294	CallExpression	right1 -> GetKind ( )		2463801	0					
ANR	2464295	Callee	right1 -> GetKind		2463801	0					
ANR	2464296	PtrMemberAccess	right1 -> GetKind		2463801	0					
ANR	2464297	Identifier	right1		2463801	0					
ANR	2464298	Identifier	GetKind		2463801	1					
ANR	2464299	ArgumentList			2463801	1					
ANR	2464300	Identifier	classad :: ExprTree :: ATTRREF_NODE		2463801	1					
ANR	2464301	AndExpression	left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		2463801	1		&&			
ANR	2464302	EqualityExpression	left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		2463801	0		==			
ANR	2464303	CallExpression	left2 -> GetKind ( )		2463801	0					
ANR	2464304	Callee	left2 -> GetKind		2463801	0					
ANR	2464305	PtrMemberAccess	left2 -> GetKind		2463801	0					
ANR	2464306	Identifier	left2		2463801	0					
ANR	2464307	Identifier	GetKind		2463801	1					
ANR	2464308	ArgumentList			2463801	1					
ANR	2464309	Identifier	classad :: ExprTree :: LITERAL_NODE		2463801	1					
ANR	2464310	EqualityExpression	right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		2463801	1		==			
ANR	2464311	CallExpression	right2 -> GetKind ( )		2463801	0					
ANR	2464312	Callee	right2 -> GetKind		2463801	0					
ANR	2464313	PtrMemberAccess	right2 -> GetKind		2463801	0					
ANR	2464314	Identifier	right2		2463801	0					
ANR	2464315	Identifier	GetKind		2463801	1					
ANR	2464316	ArgumentList			2463801	1					
ANR	2464317	Identifier	classad :: ExprTree :: LITERAL_NODE		2463801	1					
ANR	2464318	CompoundStatement		103:60:3484:3484	2463801	1					
ANR	2464319	ExpressionStatement	"( ( classad :: AttributeReference * ) left1 ) -> GetComponents ( junk , leftAttr , junkBool )"	349:4:9425:9545	2463801	0	True				
ANR	2464320	CallExpression	"( ( classad :: AttributeReference * ) left1 ) -> GetComponents ( junk , leftAttr , junkBool )"		2463801	0					
ANR	2464321	Callee	( ( classad :: AttributeReference * ) left1 ) -> GetComponents		2463801	0					
ANR	2464322	PtrMemberAccess	( ( classad :: AttributeReference * ) left1 ) -> GetComponents		2463801	0					
ANR	2464323	CastExpression	( classad :: AttributeReference * ) left1		2463801	0					
ANR	2464324	CastTarget	classad :: AttributeReference *		2463801	0					
ANR	2464325	Identifier	left1		2463801	1					
ANR	2464326	Identifier	GetComponents		2463801	1					
ANR	2464327	ArgumentList	junk		2463801	1					
ANR	2464328	Argument	junk		2463801	0					
ANR	2464329	Identifier	junk		2463801	0					
ANR	2464330	Argument	leftAttr		2463801	1					
ANR	2464331	Identifier	leftAttr		2463801	0					
ANR	2464332	Argument	junkBool		2463801	2					
ANR	2464333	Identifier	junkBool		2463801	0					
ANR	2464334	ExpressionStatement	"( ( classad :: AttributeReference * ) right1 ) -> GetComponents ( junk , rightAttr , junkBool )"	352:4:9552:9676	2463801	1	True				
ANR	2464335	CallExpression	"( ( classad :: AttributeReference * ) right1 ) -> GetComponents ( junk , rightAttr , junkBool )"		2463801	0					
ANR	2464336	Callee	( ( classad :: AttributeReference * ) right1 ) -> GetComponents		2463801	0					
ANR	2464337	PtrMemberAccess	( ( classad :: AttributeReference * ) right1 ) -> GetComponents		2463801	0					
ANR	2464338	CastExpression	( classad :: AttributeReference * ) right1		2463801	0					
ANR	2464339	CastTarget	classad :: AttributeReference *		2463801	0					
ANR	2464340	Identifier	right1		2463801	1					
ANR	2464341	Identifier	GetComponents		2463801	1					
ANR	2464342	ArgumentList	junk		2463801	1					
ANR	2464343	Argument	junk		2463801	0					
ANR	2464344	Identifier	junk		2463801	0					
ANR	2464345	Argument	rightAttr		2463801	1					
ANR	2464346	Identifier	rightAttr		2463801	0					
ANR	2464347	Argument	junkBool		2463801	2					
ANR	2464348	Identifier	junkBool		2463801	0					
ANR	2464349	IfStatement	"if ( strcasecmp ( leftAttr . c_str ( ) , rightAttr . c_str ( ) ) == 0 )"		2463801	2					
ANR	2464350	Condition	"strcasecmp ( leftAttr . c_str ( ) , rightAttr . c_str ( ) ) == 0"	355:8:9686:9749	2463801	0	True				
ANR	2464351	EqualityExpression	"strcasecmp ( leftAttr . c_str ( ) , rightAttr . c_str ( ) ) == 0"		2463801	0		==			
ANR	2464352	CallExpression	"strcasecmp ( leftAttr . c_str ( ) , rightAttr . c_str ( ) )"		2463801	0					
ANR	2464353	Callee	strcasecmp		2463801	0					
ANR	2464354	Identifier	strcasecmp		2463801	0					
ANR	2464355	ArgumentList	leftAttr . c_str ( )		2463801	1					
ANR	2464356	Argument	leftAttr . c_str ( )		2463801	0					
ANR	2464357	CallExpression	leftAttr . c_str ( )		2463801	0					
ANR	2464358	Callee	leftAttr . c_str		2463801	0					
ANR	2464359	MemberAccess	leftAttr . c_str		2463801	0					
ANR	2464360	Identifier	leftAttr		2463801	0					
ANR	2464361	Identifier	c_str		2463801	1					
ANR	2464362	ArgumentList			2463801	1					
ANR	2464363	Argument	rightAttr . c_str ( )		2463801	1					
ANR	2464364	CallExpression	rightAttr . c_str ( )		2463801	0					
ANR	2464365	Callee	rightAttr . c_str		2463801	0					
ANR	2464366	MemberAccess	rightAttr . c_str		2463801	0					
ANR	2464367	Identifier	rightAttr		2463801	0					
ANR	2464368	Identifier	c_str		2463801	1					
ANR	2464369	ArgumentList			2463801	1					
ANR	2464370	PrimaryExpression	0		2463801	1					
ANR	2464371	CompoundStatement		112:5:3825:3857	2463801	1					
ANR	2464372	IdentifierDeclStatement	"classad :: Value leftVal , rightVal ;"	357:5:9760:9792	2463801	0	True				
ANR	2464373	IdentifierDecl	leftVal		2463801	0					
ANR	2464374	IdentifierDeclType	classad :: Value		2463801	0					
ANR	2464375	Identifier	leftVal		2463801	1					
ANR	2464376	IdentifierDecl	rightVal		2463801	1					
ANR	2464377	IdentifierDeclType	classad :: Value		2463801	0					
ANR	2464378	Identifier	rightVal		2463801	1					
ANR	2464379	ExpressionStatement	( ( classad :: Literal * ) left2 ) -> GetValue ( leftVal )	358:5:9799:9851	2463801	1	True				
ANR	2464380	CallExpression	( ( classad :: Literal * ) left2 ) -> GetValue ( leftVal )		2463801	0					
ANR	2464381	Callee	( ( classad :: Literal * ) left2 ) -> GetValue		2463801	0					
ANR	2464382	PtrMemberAccess	( ( classad :: Literal * ) left2 ) -> GetValue		2463801	0					
ANR	2464383	CastExpression	( classad :: Literal * ) left2		2463801	0					
ANR	2464384	CastTarget	classad :: Literal *		2463801	0					
ANR	2464385	Identifier	left2		2463801	1					
ANR	2464386	Identifier	GetValue		2463801	1					
ANR	2464387	ArgumentList	leftVal		2463801	1					
ANR	2464388	Argument	leftVal		2463801	0					
ANR	2464389	Identifier	leftVal		2463801	0					
ANR	2464390	ExpressionStatement	( ( classad :: Literal * ) right2 ) -> GetValue ( rightVal )	359:5:9858:9912	2463801	2	True				
ANR	2464391	CallExpression	( ( classad :: Literal * ) right2 ) -> GetValue ( rightVal )		2463801	0					
ANR	2464392	Callee	( ( classad :: Literal * ) right2 ) -> GetValue		2463801	0					
ANR	2464393	PtrMemberAccess	( ( classad :: Literal * ) right2 ) -> GetValue		2463801	0					
ANR	2464394	CastExpression	( classad :: Literal * ) right2		2463801	0					
ANR	2464395	CastTarget	classad :: Literal *		2463801	0					
ANR	2464396	Identifier	right2		2463801	1					
ANR	2464397	Identifier	GetValue		2463801	1					
ANR	2464398	ArgumentList	rightVal		2463801	1					
ANR	2464399	Argument	rightVal		2463801	0					
ANR	2464400	Identifier	rightVal		2463801	0					
ANR	2464401	IfStatement	"if ( ! c -> InitComplex ( leftAttr , leftOp , leftVal , rightOp , rightVal , expr ) )"		2463801	3					
ANR	2464402	Condition	"! c -> InitComplex ( leftAttr , leftOp , leftVal , rightOp , rightVal , expr )"	360:9:9923:10002	2463801	0	True				
ANR	2464403	UnaryOperationExpression	"! c -> InitComplex ( leftAttr , leftOp , leftVal , rightOp , rightVal , expr )"		2463801	0					
ANR	2464404	UnaryOperator	!		2463801	0					
ANR	2464405	CallExpression	"c -> InitComplex ( leftAttr , leftOp , leftVal , rightOp , rightVal , expr )"		2463801	1					
ANR	2464406	Callee	c -> InitComplex		2463801	0					
ANR	2464407	PtrMemberAccess	c -> InitComplex		2463801	0					
ANR	2464408	Identifier	c		2463801	0					
ANR	2464409	Identifier	InitComplex		2463801	1					
ANR	2464410	ArgumentList	leftAttr		2463801	1					
ANR	2464411	Argument	leftAttr		2463801	0					
ANR	2464412	Identifier	leftAttr		2463801	0					
ANR	2464413	Argument	leftOp		2463801	1					
ANR	2464414	Identifier	leftOp		2463801	0					
ANR	2464415	Argument	leftVal		2463801	2					
ANR	2464416	Identifier	leftVal		2463801	0					
ANR	2464417	Argument	rightOp		2463801	3					
ANR	2464418	Identifier	rightOp		2463801	0					
ANR	2464419	Argument	rightVal		2463801	4					
ANR	2464420	Identifier	rightVal		2463801	0					
ANR	2464421	Argument	expr		2463801	5					
ANR	2464422	Identifier	expr		2463801	0					
ANR	2464423	CompoundStatement		116:39:4071:4071	2463801	1					
ANR	2464424	ExpressionStatement	"cerr << ""error: problem with Condition:InitComplex"" << endl"	362:6:10014:10081	2463801	0	True				
ANR	2464425	ShiftExpression	"cerr << ""error: problem with Condition:InitComplex"" << endl"		2463801	0		<<			
ANR	2464426	Identifier	cerr		2463801	0					
ANR	2464427	ShiftExpression	"""error: problem with Condition:InitComplex"" << endl"		2463801	1		<<			
ANR	2464428	PrimaryExpression	"""error: problem with Condition:InitComplex"""		2463801	0					
ANR	2464429	Identifier	endl		2463801	1					
ANR	2464430	ReturnStatement	return false ;	364:6:10089:10101	2463801	1	True				
ANR	2464431	Identifier	false		2463801	0					
ANR	2464432	ReturnStatement	return true ;	366:5:10115:10126	2463801	4	True				
ANR	2464433	Identifier	true		2463801	0					
ANR	2464434	IfStatement	if ( op >= classad :: Operation :: __LOGIC_START__ && op <= classad :: Operation :: __LOGIC_END__ )		2463801	17					
ANR	2464435	Condition	op >= classad :: Operation :: __LOGIC_START__ && op <= classad :: Operation :: __LOGIC_END__	374:5:10154:10239	2463801	0	True				
ANR	2464436	AndExpression	op >= classad :: Operation :: __LOGIC_START__ && op <= classad :: Operation :: __LOGIC_END__		2463801	0		&&			
ANR	2464437	RelationalExpression	op >= classad :: Operation :: __LOGIC_START__		2463801	0		>=			
ANR	2464438	Identifier	op		2463801	0					
ANR	2464439	Identifier	classad :: Operation :: __LOGIC_START__		2463801	1					
ANR	2464440	RelationalExpression	op <= classad :: Operation :: __LOGIC_END__		2463801	1		<=			
ANR	2464441	Identifier	op		2463801	0					
ANR	2464442	Identifier	classad :: Operation :: __LOGIC_END__		2463801	1					
ANR	2464443	CompoundStatement		130:44:4308:4308	2463801	1					
ANR	2464444	IfStatement	if ( ! c -> InitComplex ( expr ) )		2463801	0					
ANR	2464445	Condition	! c -> InitComplex ( expr )	376:6:10251:10273	2463801	0	True				
ANR	2464446	UnaryOperationExpression	! c -> InitComplex ( expr )		2463801	0					
ANR	2464447	UnaryOperator	!		2463801	0					
ANR	2464448	CallExpression	c -> InitComplex ( expr )		2463801	1					
ANR	2464449	Callee	c -> InitComplex		2463801	0					
ANR	2464450	PtrMemberAccess	c -> InitComplex		2463801	0					
ANR	2464451	Identifier	c		2463801	0					
ANR	2464452	Identifier	InitComplex		2463801	1					
ANR	2464453	ArgumentList	expr		2463801	1					
ANR	2464454	Argument	expr		2463801	0					
ANR	2464455	Identifier	expr		2463801	0					
ANR	2464456	CompoundStatement		131:32:4342:4342	2463801	1					
ANR	2464457	ExpressionStatement	"cerr << ""error: problem with Condition:InitComplex"" << endl"	377:3:10282:10341	2463801	0	True				
ANR	2464458	ShiftExpression	"cerr << ""error: problem with Condition:InitComplex"" << endl"		2463801	0		<<			
ANR	2464459	Identifier	cerr		2463801	0					
ANR	2464460	ShiftExpression	"""error: problem with Condition:InitComplex"" << endl"		2463801	1		<<			
ANR	2464461	PrimaryExpression	"""error: problem with Condition:InitComplex"""		2463801	0					
ANR	2464462	Identifier	endl		2463801	1					
ANR	2464463	ReturnStatement	return false ;	378:3:10346:10358	2463801	1	True				
ANR	2464464	Identifier	false		2463801	0					
ANR	2464465	ReturnStatement	return true ;	380:2:10366:10377	2463801	1	True				
ANR	2464466	Identifier	true		2463801	0					
ANR	2464467	IfStatement	if ( ! ( op >= classad :: Operation :: __COMPARISON_START__ && op <= classad :: Operation :: __COMPARISON_END__ ) )		2463801	18					
ANR	2464468	Condition	! ( op >= classad :: Operation :: __COMPARISON_START__ && op <= classad :: Operation :: __COMPARISON_END__ )	383:5:10388:10491	2463801	0	True				
ANR	2464469	UnaryOperationExpression	! ( op >= classad :: Operation :: __COMPARISON_START__ && op <= classad :: Operation :: __COMPARISON_END__ )		2463801	0					
ANR	2464470	UnaryOperator	!		2463801	0					
ANR	2464471	AndExpression	op >= classad :: Operation :: __COMPARISON_START__ && op <= classad :: Operation :: __COMPARISON_END__		2463801	1		&&			
ANR	2464472	RelationalExpression	op >= classad :: Operation :: __COMPARISON_START__		2463801	0		>=			
ANR	2464473	Identifier	op		2463801	0					
ANR	2464474	Identifier	classad :: Operation :: __COMPARISON_START__		2463801	1					
ANR	2464475	RelationalExpression	op <= classad :: Operation :: __COMPARISON_END__		2463801	1		<=			
ANR	2464476	Identifier	op		2463801	0					
ANR	2464477	Identifier	classad :: Operation :: __COMPARISON_END__		2463801	1					
ANR	2464478	CompoundStatement		139:53:4560:4560	2463801	1					
ANR	2464479	IfStatement	if ( ! c -> InitComplex ( expr ) )		2463801	0					
ANR	2464480	Condition	! c -> InitComplex ( expr )	385:6:10503:10525	2463801	0	True				
ANR	2464481	UnaryOperationExpression	! c -> InitComplex ( expr )		2463801	0					
ANR	2464482	UnaryOperator	!		2463801	0					
ANR	2464483	CallExpression	c -> InitComplex ( expr )		2463801	1					
ANR	2464484	Callee	c -> InitComplex		2463801	0					
ANR	2464485	PtrMemberAccess	c -> InitComplex		2463801	0					
ANR	2464486	Identifier	c		2463801	0					
ANR	2464487	Identifier	InitComplex		2463801	1					
ANR	2464488	ArgumentList	expr		2463801	1					
ANR	2464489	Argument	expr		2463801	0					
ANR	2464490	Identifier	expr		2463801	0					
ANR	2464491	CompoundStatement		140:32:4594:4594	2463801	1					
ANR	2464492	ExpressionStatement	"cerr << ""error: operator not comparison: "" << ( int ) op << endl"	386:3:10534:10595	2463801	0	True				
ANR	2464493	ShiftExpression	"cerr << ""error: operator not comparison: "" << ( int ) op << endl"		2463801	0		<<			
ANR	2464494	Identifier	cerr		2463801	0					
ANR	2464495	ShiftExpression	"""error: operator not comparison: "" << ( int ) op << endl"		2463801	1		<<			
ANR	2464496	PrimaryExpression	"""error: operator not comparison: """		2463801	0					
ANR	2464497	ShiftExpression	( int ) op << endl		2463801	1		<<			
ANR	2464498	CastExpression	( int ) op		2463801	0					
ANR	2464499	CastTarget	int		2463801	0					
ANR	2464500	Identifier	op		2463801	1					
ANR	2464501	Identifier	endl		2463801	1					
ANR	2464502	ReturnStatement	return false ;	388:3:10638:10650	2463801	1	True				
ANR	2464503	Identifier	false		2463801	0					
ANR	2464504	ReturnStatement	return true ;	390:2:10658:10669	2463801	1	True				
ANR	2464505	Identifier	true		2463801	0					
ANR	2464506	IfStatement	if ( left == NULL || right == NULL )		2463801	19					
ANR	2464507	Condition	left == NULL || right == NULL	393:5:10680:10708	2463801	0	True				
ANR	2464508	OrExpression	left == NULL || right == NULL		2463801	0		||			
ANR	2464509	EqualityExpression	left == NULL		2463801	0		==			
ANR	2464510	Identifier	left		2463801	0					
ANR	2464511	Identifier	NULL		2463801	1					
ANR	2464512	EqualityExpression	right == NULL		2463801	1		==			
ANR	2464513	Identifier	right		2463801	0					
ANR	2464514	Identifier	NULL		2463801	1					
ANR	2464515	CompoundStatement		148:37:4777:4777	2463801	1					
ANR	2464516	ExpressionStatement	"cerr << ""error: NULL ptr in expr"" << endl"	394:2:10716:10757	2463801	0	True				
ANR	2464517	ShiftExpression	"cerr << ""error: NULL ptr in expr"" << endl"		2463801	0		<<			
ANR	2464518	Identifier	cerr		2463801	0					
ANR	2464519	ShiftExpression	"""error: NULL ptr in expr"" << endl"		2463801	1		<<			
ANR	2464520	PrimaryExpression	"""error: NULL ptr in expr"""		2463801	0					
ANR	2464521	Identifier	endl		2463801	1					
ANR	2464522	ReturnStatement	return false ;	396:2:10791:10803	2463801	1	True				
ANR	2464523	Identifier	false		2463801	0					
ANR	2464524	ExpressionStatement	kind = left -> GetKind ( )	399:1:10810:10833	2463801	20	True				
ANR	2464525	AssignmentExpression	kind = left -> GetKind ( )		2463801	0		=			
ANR	2464526	Identifier	kind		2463801	0					
ANR	2464527	CallExpression	left -> GetKind ( )		2463801	1					
ANR	2464528	Callee	left -> GetKind		2463801	0					
ANR	2464529	PtrMemberAccess	left -> GetKind		2463801	0					
ANR	2464530	Identifier	left		2463801	0					
ANR	2464531	Identifier	GetKind		2463801	1					
ANR	2464532	ArgumentList			2463801	1					
ANR	2464533	IfStatement	if ( kind == classad :: ExprTree :: ATTRREF_NODE )		2463801	21					
ANR	2464534	Condition	kind == classad :: ExprTree :: ATTRREF_NODE	401:5:10841:10879	2463801	0	True				
ANR	2464535	EqualityExpression	kind == classad :: ExprTree :: ATTRREF_NODE		2463801	0		==			
ANR	2464536	Identifier	kind		2463801	0					
ANR	2464537	Identifier	classad :: ExprTree :: ATTRREF_NODE		2463801	1					
ANR	2464538	CompoundStatement		156:47:4948:4948	2463801	1					
ANR	2464539	ExpressionStatement	kind = right -> GetKind ( )	402:2:10887:10911	2463801	0	True				
ANR	2464540	AssignmentExpression	kind = right -> GetKind ( )		2463801	0		=			
ANR	2464541	Identifier	kind		2463801	0					
ANR	2464542	CallExpression	right -> GetKind ( )		2463801	1					
ANR	2464543	Callee	right -> GetKind		2463801	0					
ANR	2464544	PtrMemberAccess	right -> GetKind		2463801	0					
ANR	2464545	Identifier	right		2463801	0					
ANR	2464546	Identifier	GetKind		2463801	1					
ANR	2464547	ArgumentList			2463801	1					
ANR	2464548	IfStatement	if ( kind == classad :: ExprTree :: LITERAL_NODE )		2463801	1					
ANR	2464549	Condition	kind == classad :: ExprTree :: LITERAL_NODE	403:6:10919:10957	2463801	0	True				
ANR	2464550	EqualityExpression	kind == classad :: ExprTree :: LITERAL_NODE		2463801	0		==			
ANR	2464551	Identifier	kind		2463801	0					
ANR	2464552	Identifier	classad :: ExprTree :: LITERAL_NODE		2463801	1					
ANR	2464553	CompoundStatement		158:48:5026:5026	2463801	1					
ANR	2464554	ExpressionStatement	"( ( classad :: AttributeReference * ) left ) -> GetComponents ( base , attr , junkBool )"	405:3:11026:11143	2463801	0	True				
ANR	2464555	CallExpression	"( ( classad :: AttributeReference * ) left ) -> GetComponents ( base , attr , junkBool )"		2463801	0					
ANR	2464556	Callee	( ( classad :: AttributeReference * ) left ) -> GetComponents		2463801	0					
ANR	2464557	PtrMemberAccess	( ( classad :: AttributeReference * ) left ) -> GetComponents		2463801	0					
ANR	2464558	CastExpression	( classad :: AttributeReference * ) left		2463801	0					
ANR	2464559	CastTarget	classad :: AttributeReference *		2463801	0					
ANR	2464560	Identifier	left		2463801	1					
ANR	2464561	Identifier	GetComponents		2463801	1					
ANR	2464562	ArgumentList	base		2463801	1					
ANR	2464563	Argument	base		2463801	0					
ANR	2464564	Identifier	base		2463801	0					
ANR	2464565	Argument	attr		2463801	1					
ANR	2464566	Identifier	attr		2463801	0					
ANR	2464567	Argument	junkBool		2463801	2					
ANR	2464568	Identifier	junkBool		2463801	0					
ANR	2464569	ExpressionStatement	( ( classad :: Literal * ) right ) -> GetValue ( val )	408:3:11148:11196	2463801	1	True				
ANR	2464570	CallExpression	( ( classad :: Literal * ) right ) -> GetValue ( val )		2463801	0					
ANR	2464571	Callee	( ( classad :: Literal * ) right ) -> GetValue		2463801	0					
ANR	2464572	PtrMemberAccess	( ( classad :: Literal * ) right ) -> GetValue		2463801	0					
ANR	2464573	CastExpression	( classad :: Literal * ) right		2463801	0					
ANR	2464574	CastTarget	classad :: Literal *		2463801	0					
ANR	2464575	Identifier	right		2463801	1					
ANR	2464576	Identifier	GetValue		2463801	1					
ANR	2464577	ArgumentList	val		2463801	1					
ANR	2464578	Argument	val		2463801	0					
ANR	2464579	Identifier	val		2463801	0					
ANR	2464580	IfStatement	"if ( ! c -> Init ( attr , op , val , expr -> Copy ( ) , Condition :: ATTR_POS_LEFT ) )"		2463801	2					
ANR	2464581	Condition	"! c -> Init ( attr , op , val , expr -> Copy ( ) , Condition :: ATTR_POS_LEFT )"	409:8:11207:11280	2463801	0	True				
ANR	2464582	UnaryOperationExpression	"! c -> Init ( attr , op , val , expr -> Copy ( ) , Condition :: ATTR_POS_LEFT )"		2463801	0					
ANR	2464583	UnaryOperator	!		2463801	0					
ANR	2464584	CallExpression	"c -> Init ( attr , op , val , expr -> Copy ( ) , Condition :: ATTR_POS_LEFT )"		2463801	1					
ANR	2464585	Callee	c -> Init		2463801	0					
ANR	2464586	PtrMemberAccess	c -> Init		2463801	0					
ANR	2464587	Identifier	c		2463801	0					
ANR	2464588	Identifier	Init		2463801	1					
ANR	2464589	ArgumentList	attr		2463801	1					
ANR	2464590	Argument	attr		2463801	0					
ANR	2464591	Identifier	attr		2463801	0					
ANR	2464592	Argument	op		2463801	1					
ANR	2464593	Identifier	op		2463801	0					
ANR	2464594	Argument	val		2463801	2					
ANR	2464595	Identifier	val		2463801	0					
ANR	2464596	Argument	expr -> Copy ( )		2463801	3					
ANR	2464597	CallExpression	expr -> Copy ( )		2463801	0					
ANR	2464598	Callee	expr -> Copy		2463801	0					
ANR	2464599	PtrMemberAccess	expr -> Copy		2463801	0					
ANR	2464600	Identifier	expr		2463801	0					
ANR	2464601	Identifier	Copy		2463801	1					
ANR	2464602	ArgumentList			2463801	1					
ANR	2464603	Argument	Condition :: ATTR_POS_LEFT		2463801	4					
ANR	2464604	Identifier	Condition :: ATTR_POS_LEFT		2463801	0					
ANR	2464605	CompoundStatement		165:37:5349:5349	2463801	1					
ANR	2464606	ExpressionStatement	"cerr << ""error: problem with Condition::Init"" << endl"	411:6:11292:11345	2463801	0	True				
ANR	2464607	ShiftExpression	"cerr << ""error: problem with Condition::Init"" << endl"		2463801	0		<<			
ANR	2464608	Identifier	cerr		2463801	0					
ANR	2464609	ShiftExpression	"""error: problem with Condition::Init"" << endl"		2463801	1		<<			
ANR	2464610	PrimaryExpression	"""error: problem with Condition::Init"""		2463801	0					
ANR	2464611	Identifier	endl		2463801	1					
ANR	2464612	ReturnStatement	return false ;	412:6:11353:11365	2463801	1	True				
ANR	2464613	Identifier	false		2463801	0					
ANR	2464614	ReturnStatement	return true ;	414:3:11377:11388	2463801	3	True				
ANR	2464615	Identifier	true		2463801	0					
ANR	2464616	IfStatement	if ( ! c -> InitComplex ( expr ) )		2463801	2					
ANR	2464617	Condition	! c -> InitComplex ( expr )	416:6:11400:11422	2463801	0	True				
ANR	2464618	UnaryOperationExpression	! c -> InitComplex ( expr )		2463801	0					
ANR	2464619	UnaryOperator	!		2463801	0					
ANR	2464620	CallExpression	c -> InitComplex ( expr )		2463801	1					
ANR	2464621	Callee	c -> InitComplex		2463801	0					
ANR	2464622	PtrMemberAccess	c -> InitComplex		2463801	0					
ANR	2464623	Identifier	c		2463801	0					
ANR	2464624	Identifier	InitComplex		2463801	1					
ANR	2464625	ArgumentList	expr		2463801	1					
ANR	2464626	Argument	expr		2463801	0					
ANR	2464627	Identifier	expr		2463801	0					
ANR	2464628	CompoundStatement		171:32:5491:5491	2463801	1					
ANR	2464629	ExpressionStatement	"cerr << ""error: problem with Condition:InitComplex"" << endl"	417:3:11431:11490	2463801	0	True				
ANR	2464630	ShiftExpression	"cerr << ""error: problem with Condition:InitComplex"" << endl"		2463801	0		<<			
ANR	2464631	Identifier	cerr		2463801	0					
ANR	2464632	ShiftExpression	"""error: problem with Condition:InitComplex"" << endl"		2463801	1		<<			
ANR	2464633	PrimaryExpression	"""error: problem with Condition:InitComplex"""		2463801	0					
ANR	2464634	Identifier	endl		2463801	1					
ANR	2464635	ReturnStatement	return false ;	418:3:11495:11507	2463801	1	True				
ANR	2464636	Identifier	false		2463801	0					
ANR	2464637	ReturnStatement	return true ;	420:2:11515:11526	2463801	3	True				
ANR	2464638	Identifier	true		2463801	0					
ANR	2464639	IfStatement	if ( kind == classad :: ExprTree :: LITERAL_NODE )		2463801	22					
ANR	2464640	Condition	kind == classad :: ExprTree :: LITERAL_NODE	423:5:11537:11575	2463801	0	True				
ANR	2464641	EqualityExpression	kind == classad :: ExprTree :: LITERAL_NODE		2463801	0		==			
ANR	2464642	Identifier	kind		2463801	0					
ANR	2464643	Identifier	classad :: ExprTree :: LITERAL_NODE		2463801	1					
ANR	2464644	CompoundStatement		178:47:5644:5644	2463801	1					
ANR	2464645	ExpressionStatement	kind = right -> GetKind ( )	424:2:11583:11607	2463801	0	True				
ANR	2464646	AssignmentExpression	kind = right -> GetKind ( )		2463801	0		=			
ANR	2464647	Identifier	kind		2463801	0					
ANR	2464648	CallExpression	right -> GetKind ( )		2463801	1					
ANR	2464649	Callee	right -> GetKind		2463801	0					
ANR	2464650	PtrMemberAccess	right -> GetKind		2463801	0					
ANR	2464651	Identifier	right		2463801	0					
ANR	2464652	Identifier	GetKind		2463801	1					
ANR	2464653	ArgumentList			2463801	1					
ANR	2464654	IfStatement	if ( kind == classad :: ExprTree :: ATTRREF_NODE )		2463801	1					
ANR	2464655	Condition	kind == classad :: ExprTree :: ATTRREF_NODE	425:6:11615:11653	2463801	0	True				
ANR	2464656	EqualityExpression	kind == classad :: ExprTree :: ATTRREF_NODE		2463801	0		==			
ANR	2464657	Identifier	kind		2463801	0					
ANR	2464658	Identifier	classad :: ExprTree :: ATTRREF_NODE		2463801	1					
ANR	2464659	CompoundStatement		180:48:5722:5722	2463801	1					
ANR	2464660	ExpressionStatement	"( ( classad :: AttributeReference * ) right ) -> GetComponents ( base , attr , junkBool )"	427:3:11730:11848	2463801	0	True				
ANR	2464661	CallExpression	"( ( classad :: AttributeReference * ) right ) -> GetComponents ( base , attr , junkBool )"		2463801	0					
ANR	2464662	Callee	( ( classad :: AttributeReference * ) right ) -> GetComponents		2463801	0					
ANR	2464663	PtrMemberAccess	( ( classad :: AttributeReference * ) right ) -> GetComponents		2463801	0					
ANR	2464664	CastExpression	( classad :: AttributeReference * ) right		2463801	0					
ANR	2464665	CastTarget	classad :: AttributeReference *		2463801	0					
ANR	2464666	Identifier	right		2463801	1					
ANR	2464667	Identifier	GetComponents		2463801	1					
ANR	2464668	ArgumentList	base		2463801	1					
ANR	2464669	Argument	base		2463801	0					
ANR	2464670	Identifier	base		2463801	0					
ANR	2464671	Argument	attr		2463801	1					
ANR	2464672	Identifier	attr		2463801	0					
ANR	2464673	Argument	junkBool		2463801	2					
ANR	2464674	Identifier	junkBool		2463801	0					
ANR	2464675	ExpressionStatement	( ( classad :: Literal * ) left ) -> GetValue ( val )	430:3:11853:11900	2463801	1	True				
ANR	2464676	CallExpression	( ( classad :: Literal * ) left ) -> GetValue ( val )		2463801	0					
ANR	2464677	Callee	( ( classad :: Literal * ) left ) -> GetValue		2463801	0					
ANR	2464678	PtrMemberAccess	( ( classad :: Literal * ) left ) -> GetValue		2463801	0					
ANR	2464679	CastExpression	( classad :: Literal * ) left		2463801	0					
ANR	2464680	CastTarget	classad :: Literal *		2463801	0					
ANR	2464681	Identifier	left		2463801	1					
ANR	2464682	Identifier	GetValue		2463801	1					
ANR	2464683	ArgumentList	val		2463801	1					
ANR	2464684	Argument	val		2463801	0					
ANR	2464685	Identifier	val		2463801	0					
ANR	2464686	IfStatement	"if ( ! c -> Init ( attr , op , val , expr -> Copy ( ) , Condition :: ATTR_POS_RIGHT ) )"		2463801	2					
ANR	2464687	Condition	"! c -> Init ( attr , op , val , expr -> Copy ( ) , Condition :: ATTR_POS_RIGHT )"	431:9:11911:11985	2463801	0	True				
ANR	2464688	UnaryOperationExpression	"! c -> Init ( attr , op , val , expr -> Copy ( ) , Condition :: ATTR_POS_RIGHT )"		2463801	0					
ANR	2464689	UnaryOperator	!		2463801	0					
ANR	2464690	CallExpression	"c -> Init ( attr , op , val , expr -> Copy ( ) , Condition :: ATTR_POS_RIGHT )"		2463801	1					
ANR	2464691	Callee	c -> Init		2463801	0					
ANR	2464692	PtrMemberAccess	c -> Init		2463801	0					
ANR	2464693	Identifier	c		2463801	0					
ANR	2464694	Identifier	Init		2463801	1					
ANR	2464695	ArgumentList	attr		2463801	1					
ANR	2464696	Argument	attr		2463801	0					
ANR	2464697	Identifier	attr		2463801	0					
ANR	2464698	Argument	op		2463801	1					
ANR	2464699	Identifier	op		2463801	0					
ANR	2464700	Argument	val		2463801	2					
ANR	2464701	Identifier	val		2463801	0					
ANR	2464702	Argument	expr -> Copy ( )		2463801	3					
ANR	2464703	CallExpression	expr -> Copy ( )		2463801	0					
ANR	2464704	Callee	expr -> Copy		2463801	0					
ANR	2464705	PtrMemberAccess	expr -> Copy		2463801	0					
ANR	2464706	Identifier	expr		2463801	0					
ANR	2464707	Identifier	Copy		2463801	1					
ANR	2464708	ArgumentList			2463801	1					
ANR	2464709	Argument	Condition :: ATTR_POS_RIGHT		2463801	4					
ANR	2464710	Identifier	Condition :: ATTR_POS_RIGHT		2463801	0					
ANR	2464711	CompoundStatement		187:38:6054:6054	2463801	1					
ANR	2464712	ExpressionStatement	"cerr << ""error: problem with Condition::Init"" << endl"	433:6:11997:12050	2463801	0	True				
ANR	2464713	ShiftExpression	"cerr << ""error: problem with Condition::Init"" << endl"		2463801	0		<<			
ANR	2464714	Identifier	cerr		2463801	0					
ANR	2464715	ShiftExpression	"""error: problem with Condition::Init"" << endl"		2463801	1		<<			
ANR	2464716	PrimaryExpression	"""error: problem with Condition::Init"""		2463801	0					
ANR	2464717	Identifier	endl		2463801	1					
ANR	2464718	ReturnStatement	return false ;	434:6:12058:12070	2463801	1	True				
ANR	2464719	Identifier	false		2463801	0					
ANR	2464720	ReturnStatement	return true ;	436:3:12082:12093	2463801	3	True				
ANR	2464721	Identifier	true		2463801	0					
ANR	2464722	IfStatement	if ( ! c -> InitComplex ( expr ) )		2463801	2					
ANR	2464723	Condition	! c -> InitComplex ( expr )	438:6:12105:12127	2463801	0	True				
ANR	2464724	UnaryOperationExpression	! c -> InitComplex ( expr )		2463801	0					
ANR	2464725	UnaryOperator	!		2463801	0					
ANR	2464726	CallExpression	c -> InitComplex ( expr )		2463801	1					
ANR	2464727	Callee	c -> InitComplex		2463801	0					
ANR	2464728	PtrMemberAccess	c -> InitComplex		2463801	0					
ANR	2464729	Identifier	c		2463801	0					
ANR	2464730	Identifier	InitComplex		2463801	1					
ANR	2464731	ArgumentList	expr		2463801	1					
ANR	2464732	Argument	expr		2463801	0					
ANR	2464733	Identifier	expr		2463801	0					
ANR	2464734	CompoundStatement		193:32:6196:6196	2463801	1					
ANR	2464735	ExpressionStatement	"cerr << ""error: problem with Condition:InitComplex"" << endl"	439:3:12136:12195	2463801	0	True				
ANR	2464736	ShiftExpression	"cerr << ""error: problem with Condition:InitComplex"" << endl"		2463801	0		<<			
ANR	2464737	Identifier	cerr		2463801	0					
ANR	2464738	ShiftExpression	"""error: problem with Condition:InitComplex"" << endl"		2463801	1		<<			
ANR	2464739	PrimaryExpression	"""error: problem with Condition:InitComplex"""		2463801	0					
ANR	2464740	Identifier	endl		2463801	1					
ANR	2464741	ReturnStatement	return false ;	440:3:12200:12212	2463801	1	True				
ANR	2464742	Identifier	false		2463801	0					
ANR	2464743	ReturnStatement	return true ;	442:2:12220:12231	2463801	3	True				
ANR	2464744	Identifier	true		2463801	0					
ANR	2464745	IfStatement	if ( ! c -> InitComplex ( expr ) )		2463801	23					
ANR	2464746	Condition	! c -> InitComplex ( expr )	445:5:12242:12264	2463801	0	True				
ANR	2464747	UnaryOperationExpression	! c -> InitComplex ( expr )		2463801	0					
ANR	2464748	UnaryOperator	!		2463801	0					
ANR	2464749	CallExpression	c -> InitComplex ( expr )		2463801	1					
ANR	2464750	Callee	c -> InitComplex		2463801	0					
ANR	2464751	PtrMemberAccess	c -> InitComplex		2463801	0					
ANR	2464752	Identifier	c		2463801	0					
ANR	2464753	Identifier	InitComplex		2463801	1					
ANR	2464754	ArgumentList	expr		2463801	1					
ANR	2464755	Argument	expr		2463801	0					
ANR	2464756	Identifier	expr		2463801	0					
ANR	2464757	CompoundStatement		200:31:6333:6333	2463801	1					
ANR	2464758	ExpressionStatement	"cerr << ""error: problem with Condition:InitComplex"" << endl"	446:2:12272:12331	2463801	0	True				
ANR	2464759	ShiftExpression	"cerr << ""error: problem with Condition:InitComplex"" << endl"		2463801	0		<<			
ANR	2464760	Identifier	cerr		2463801	0					
ANR	2464761	ShiftExpression	"""error: problem with Condition:InitComplex"" << endl"		2463801	1		<<			
ANR	2464762	PrimaryExpression	"""error: problem with Condition:InitComplex"""		2463801	0					
ANR	2464763	Identifier	endl		2463801	1					
ANR	2464764	ReturnStatement	return false ;	447:2:12335:12347	2463801	1	True				
ANR	2464765	Identifier	false		2463801	0					
ANR	2464766	ReturnStatement	return true ;	449:1:12353:12364	2463801	24	True				
ANR	2464767	Identifier	true		2463801	0					
ANR	2464768	ReturnType	bool		2463801	1					
ANR	2464769	Identifier	BoolExpr :: ExprToCondition		2463801	2					
ANR	2464770	ParameterList	"classad :: ExprTree * expr , Condition * & c"		2463801	3					
ANR	2464771	Parameter	classad :: ExprTree * expr	245:17:5893:5915	2463801	0	True				
ANR	2464772	ParameterType	classad :: ExprTree *		2463801	0					
ANR	2464773	Identifier	expr		2463801	1					
ANR	2464774	Parameter	Condition * & c	245:42:5918:5930	2463801	1	True				
ANR	2464775	ParameterType	Condition * &		2463801	0					
ANR	2464776	Identifier	c		2463801	1					
ANR	2464777	CFGEntryNode	ENTRY		2463801		True				
ANR	2464778	CFGExitNode	EXIT		2463801		True				
ANR	2464779	Symbol	classad :: ExprTree :: OP_NODE		2463801						
ANR	2464780	Symbol	left -> GetKind		2463801						
ANR	2464781	Symbol	rightVal		2463801						
ANR	2464782	Symbol	rightAttr . c_str		2463801						
ANR	2464783	Symbol	classad :: ExprTree :: LITERAL_NODE		2463801						
ANR	2464784	Symbol	rightOp		2463801						
ANR	2464785	Symbol	right1		2463801						
ANR	2464786	Symbol	right2		2463801						
ANR	2464787	Symbol	* left1		2463801						
ANR	2464788	Symbol	* left2		2463801						
ANR	2464789	Symbol	right2 -> GetKind		2463801						
ANR	2464790	Symbol	left1 -> GetKind		2463801						
ANR	2464791	Symbol	classad :: ExprTree :: ATTRREF_NODE		2463801						
ANR	2464792	Symbol	* left		2463801						
ANR	2464793	Symbol	strcasecmp		2463801						
ANR	2464794	Symbol	classad :: Operation :: __NO_OP__		2463801						
ANR	2464795	Symbol	val		2463801						
ANR	2464796	Symbol	NULL		2463801						
ANR	2464797	Symbol	right -> GetKind		2463801						
ANR	2464798	Symbol	classad :: Operation :: __COMPARISON_START__		2463801						
ANR	2464799	Symbol	kind		2463801						
ANR	2464800	Symbol	left2		2463801						
ANR	2464801	Symbol	classad :: Operation :: LOGICAL_OR_OP		2463801						
ANR	2464802	Symbol	left1		2463801						
ANR	2464803	Symbol	Condition :: ATTR_POS_RIGHT		2463801						
ANR	2464804	Symbol	left		2463801						
ANR	2464805	Symbol	* expr		2463801						
ANR	2464806	Symbol	true		2463801						
ANR	2464807	Symbol	leftOp		2463801						
ANR	2464808	Symbol	c -> Init		2463801						
ANR	2464809	Symbol	classad :: Operation :: OP_NODE		2463801						
ANR	2464810	Symbol	classad :: Operation :: PARENTHESES_OP		2463801						
ANR	2464811	Symbol	leftAttr . c_str		2463801						
ANR	2464812	Symbol	classad :: Operation :: __LOGIC_END__		2463801						
ANR	2464813	Symbol	right1 -> GetKind		2463801						
ANR	2464814	Symbol	expr -> Copy		2463801						
ANR	2464815	Symbol	c -> InitComplex		2463801						
ANR	2464816	Symbol	left2 -> GetKind		2463801						
ANR	2464817	Symbol	leftVal		2463801						
ANR	2464818	Symbol	classad :: Operation :: __COMPARISON_END__		2463801						
ANR	2464819	Symbol	expr		2463801						
ANR	2464820	Symbol	attr		2463801						
ANR	2464821	Symbol	rightAttr		2463801						
ANR	2464822	Symbol	op		2463801						
ANR	2464823	Symbol	expr -> GetKind		2463801						
ANR	2464824	Symbol	c		2463801						
ANR	2464825	Symbol	classad :: Operation :: __LOGIC_START__		2463801						
ANR	2464826	Symbol	false		2463801						
ANR	2464827	Symbol	right		2463801						
ANR	2464828	Symbol	* c		2463801						
ANR	2464829	Symbol	* right1		2463801						
ANR	2464830	Symbol	* right2		2463801						
ANR	2464831	Symbol	Condition :: ATTR_POS_LEFT		2463801						
ANR	2464832	Symbol	junk		2463801						
ANR	2464833	Symbol	junkBool		2463801						
ANR	2464834	Symbol	leftAttr		2463801						
ANR	2464835	Symbol	classad :: ExprTree :: FN_CALL_NODE		2463801						
ANR	2464836	Symbol	* right		2463801						
ANR	2464837	Symbol	base		2463801						
ANR	2464838	Function	BoolExpr :: EvalInContext	452:0:12369:13358							
ANR	2464839	FunctionDef	"BoolExpr :: EvalInContext (classad :: MatchClassAd & mad , classad :: ClassAd * context , BoolValue & result)"		2464838	0					
ANR	2464840	CompoundStatement		455:0:12481:13358	2464838	0					
ANR	2464841	IfStatement	if ( ! initialized || ! context )		2464838	0					
ANR	2464842	Condition	! initialized || ! context	456:5:12488:12511	2464838	0	True				
ANR	2464843	OrExpression	! initialized || ! context		2464838	0		||			
ANR	2464844	UnaryOperationExpression	! initialized		2464838	0					
ANR	2464845	UnaryOperator	!		2464838	0					
ANR	2464846	Identifier	initialized		2464838	1					
ANR	2464847	UnaryOperationExpression	! context		2464838	1					
ANR	2464848	UnaryOperator	!		2464838	0					
ANR	2464849	Identifier	context		2464838	1					
ANR	2464850	CompoundStatement		2:32:33:33	2464838	1					
ANR	2464851	ReturnStatement	return false ;	457:2:12519:12531	2464838	0	True				
ANR	2464852	Identifier	false		2464838	0					
ANR	2464853	IdentifierDeclStatement	classad :: ClassAd * emptyAd = new classad :: ClassAd ( ) ;	459:1:12537:12588	2464838	1	True				
ANR	2464854	IdentifierDecl	* emptyAd = new classad :: ClassAd ( )		2464838	0					
ANR	2464855	IdentifierDeclType	classad :: ClassAd *		2464838	0					
ANR	2464856	Identifier	emptyAd		2464838	1					
ANR	2464857	AssignmentExpression	* emptyAd = new classad :: ClassAd ( )		2464838	2		=			
ANR	2464858	Identifier	emptyAd		2464838	0					
ANR	2464859	UnaryExpression	new classad :: ClassAd ( )		2464838	1					
ANR	2464860	IdentifierDeclStatement	classad :: Value val ;	460:1:12591:12609	2464838	2	True				
ANR	2464861	IdentifierDecl	val		2464838	0					
ANR	2464862	IdentifierDeclType	classad :: Value		2464838	0					
ANR	2464863	Identifier	val		2464838	1					
ANR	2464864	IdentifierDeclStatement	bool b ;	461:1:12612:12618	2464838	3	True				
ANR	2464865	IdentifierDecl	b		2464838	0					
ANR	2464866	IdentifierDeclType	bool		2464838	0					
ANR	2464867	Identifier	b		2464838	1					
ANR	2464868	ExpressionStatement	mad . ReplaceLeftAd ( emptyAd )	462:1:12621:12649	2464838	4	True				
ANR	2464869	CallExpression	mad . ReplaceLeftAd ( emptyAd )		2464838	0					
ANR	2464870	Callee	mad . ReplaceLeftAd		2464838	0					
ANR	2464871	MemberAccess	mad . ReplaceLeftAd		2464838	0					
ANR	2464872	Identifier	mad		2464838	0					
ANR	2464873	Identifier	ReplaceLeftAd		2464838	1					
ANR	2464874	ArgumentList	emptyAd		2464838	1					
ANR	2464875	Argument	emptyAd		2464838	0					
ANR	2464876	Identifier	emptyAd		2464838	0					
ANR	2464877	ExpressionStatement	mad . ReplaceRightAd ( context )	463:1:12652:12681	2464838	5	True				
ANR	2464878	CallExpression	mad . ReplaceRightAd ( context )		2464838	0					
ANR	2464879	Callee	mad . ReplaceRightAd		2464838	0					
ANR	2464880	MemberAccess	mad . ReplaceRightAd		2464838	0					
ANR	2464881	Identifier	mad		2464838	0					
ANR	2464882	Identifier	ReplaceRightAd		2464838	1					
ANR	2464883	ArgumentList	context		2464838	1					
ANR	2464884	Argument	context		2464838	0					
ANR	2464885	Identifier	context		2464838	0					
ANR	2464886	ExpressionStatement	myTree -> SetParentScope ( emptyAd )	464:1:12684:12717	2464838	6	True				
ANR	2464887	CallExpression	myTree -> SetParentScope ( emptyAd )		2464838	0					
ANR	2464888	Callee	myTree -> SetParentScope		2464838	0					
ANR	2464889	PtrMemberAccess	myTree -> SetParentScope		2464838	0					
ANR	2464890	Identifier	myTree		2464838	0					
ANR	2464891	Identifier	SetParentScope		2464838	1					
ANR	2464892	ArgumentList	emptyAd		2464838	1					
ANR	2464893	Argument	emptyAd		2464838	0					
ANR	2464894	Identifier	emptyAd		2464838	0					
ANR	2464895	IfStatement	"if ( ! emptyAd -> EvaluateExpr ( myTree , val ) )"		2464838	7					
ANR	2464896	Condition	"! emptyAd -> EvaluateExpr ( myTree , val )"	465:5:12724:12760	2464838	0	True				
ANR	2464897	UnaryOperationExpression	"! emptyAd -> EvaluateExpr ( myTree , val )"		2464838	0					
ANR	2464898	UnaryOperator	!		2464838	0					
ANR	2464899	CallExpression	"emptyAd -> EvaluateExpr ( myTree , val )"		2464838	1					
ANR	2464900	Callee	emptyAd -> EvaluateExpr		2464838	0					
ANR	2464901	PtrMemberAccess	emptyAd -> EvaluateExpr		2464838	0					
ANR	2464902	Identifier	emptyAd		2464838	0					
ANR	2464903	Identifier	EvaluateExpr		2464838	1					
ANR	2464904	ArgumentList	myTree		2464838	1					
ANR	2464905	Argument	myTree		2464838	0					
ANR	2464906	Identifier	myTree		2464838	0					
ANR	2464907	Argument	val		2464838	1					
ANR	2464908	Identifier	val		2464838	0					
ANR	2464909	CompoundStatement		11:45:282:282	2464838	1					
ANR	2464910	ExpressionStatement	mad . RemoveLeftAd ( )	466:2:12768:12787	2464838	0	True				
ANR	2464911	CallExpression	mad . RemoveLeftAd ( )		2464838	0					
ANR	2464912	Callee	mad . RemoveLeftAd		2464838	0					
ANR	2464913	MemberAccess	mad . RemoveLeftAd		2464838	0					
ANR	2464914	Identifier	mad		2464838	0					
ANR	2464915	Identifier	RemoveLeftAd		2464838	1					
ANR	2464916	ArgumentList			2464838	1					
ANR	2464917	ExpressionStatement	mad . RemoveRightAd ( )	467:2:12791:12811	2464838	1	True				
ANR	2464918	CallExpression	mad . RemoveRightAd ( )		2464838	0					
ANR	2464919	Callee	mad . RemoveRightAd		2464838	0					
ANR	2464920	MemberAccess	mad . RemoveRightAd		2464838	0					
ANR	2464921	Identifier	mad		2464838	0					
ANR	2464922	Identifier	RemoveRightAd		2464838	1					
ANR	2464923	ArgumentList			2464838	1					
ANR	2464924	ExpressionStatement	myTree -> SetParentScope ( NULL )	468:2:12815:12845	2464838	2	True				
ANR	2464925	CallExpression	myTree -> SetParentScope ( NULL )		2464838	0					
ANR	2464926	Callee	myTree -> SetParentScope		2464838	0					
ANR	2464927	PtrMemberAccess	myTree -> SetParentScope		2464838	0					
ANR	2464928	Identifier	myTree		2464838	0					
ANR	2464929	Identifier	SetParentScope		2464838	1					
ANR	2464930	ArgumentList	NULL		2464838	1					
ANR	2464931	Argument	NULL		2464838	0					
ANR	2464932	Identifier	NULL		2464838	0					
ANR	2464933	Statement	delete	469:2:12849:12854	2464838	3	True				
ANR	2464934	ExpressionStatement	emptyAd	469:9:12856:12863	2464838	4	True				
ANR	2464935	Identifier	emptyAd		2464838	0					
ANR	2464936	ReturnStatement	return false ;	470:2:12867:12879	2464838	5	True				
ANR	2464937	Identifier	false		2464838	0					
ANR	2464938	IfStatement	if ( val . IsBooleanValue ( b ) )		2464838	8					
ANR	2464939	Condition	val . IsBooleanValue ( b )	472:5:12889:12911	2464838	0	True				
ANR	2464940	CallExpression	val . IsBooleanValue ( b )		2464838	0					
ANR	2464941	Callee	val . IsBooleanValue		2464838	0					
ANR	2464942	MemberAccess	val . IsBooleanValue		2464838	0					
ANR	2464943	Identifier	val		2464838	0					
ANR	2464944	Identifier	IsBooleanValue		2464838	1					
ANR	2464945	ArgumentList	b		2464838	1					
ANR	2464946	Argument	b		2464838	0					
ANR	2464947	Identifier	b		2464838	0					
ANR	2464948	CompoundStatement		18:31:433:433	2464838	1					
ANR	2464949	IfStatement	if ( b )		2464838	0					
ANR	2464950	Condition	b	473:6:12923:12923	2464838	0	True				
ANR	2464951	Identifier	b		2464838	0					
ANR	2464952	CompoundStatement		19:10:445:445	2464838	1					
ANR	2464953	ExpressionStatement	result = TRUE_VALUE	474:3:12932:12951	2464838	0	True				
ANR	2464954	AssignmentExpression	result = TRUE_VALUE		2464838	0		=			
ANR	2464955	Identifier	result		2464838	0					
ANR	2464956	Identifier	TRUE_VALUE		2464838	1					
ANR	2464957	ElseStatement	else		2464838	0					
ANR	2464958	CompoundStatement		21:9:480:480	2464838	0					
ANR	2464959	ExpressionStatement	result = FALSE_VALUE	476:3:12967:12987	2464838	0	True				
ANR	2464960	AssignmentExpression	result = FALSE_VALUE		2464838	0		=			
ANR	2464961	Identifier	result		2464838	0					
ANR	2464962	Identifier	FALSE_VALUE		2464838	1					
ANR	2464963	ElseStatement	else		2464838	0					
ANR	2464964	IfStatement	if ( val . IsUndefinedValue ( ) )		2464838	0					
ANR	2464965	Condition	val . IsUndefinedValue ( )	478:12:13005:13027	2464838	0	True				
ANR	2464966	CallExpression	val . IsUndefinedValue ( )		2464838	0					
ANR	2464967	Callee	val . IsUndefinedValue		2464838	0					
ANR	2464968	MemberAccess	val . IsUndefinedValue		2464838	0					
ANR	2464969	Identifier	val		2464838	0					
ANR	2464970	Identifier	IsUndefinedValue		2464838	1					
ANR	2464971	ArgumentList			2464838	1					
ANR	2464972	CompoundStatement		24:38:549:549	2464838	1					
ANR	2464973	ExpressionStatement	result = UNDEFINED_VALUE	479:2:13035:13059	2464838	0	True				
ANR	2464974	AssignmentExpression	result = UNDEFINED_VALUE		2464838	0		=			
ANR	2464975	Identifier	result		2464838	0					
ANR	2464976	Identifier	UNDEFINED_VALUE		2464838	1					
ANR	2464977	ElseStatement	else		2464838	0					
ANR	2464978	IfStatement	if ( val . IsErrorValue ( ) )		2464838	0					
ANR	2464979	Condition	val . IsErrorValue ( )	480:12:13073:13091	2464838	0	True				
ANR	2464980	CallExpression	val . IsErrorValue ( )		2464838	0					
ANR	2464981	Callee	val . IsErrorValue		2464838	0					
ANR	2464982	MemberAccess	val . IsErrorValue		2464838	0					
ANR	2464983	Identifier	val		2464838	0					
ANR	2464984	Identifier	IsErrorValue		2464838	1					
ANR	2464985	ArgumentList			2464838	1					
ANR	2464986	CompoundStatement		26:34:613:613	2464838	1					
ANR	2464987	ExpressionStatement	result = ERROR_VALUE	481:2:13099:13119	2464838	0	True				
ANR	2464988	AssignmentExpression	result = ERROR_VALUE		2464838	0		=			
ANR	2464989	Identifier	result		2464838	0					
ANR	2464990	Identifier	ERROR_VALUE		2464838	1					
ANR	2464991	ElseStatement	else		2464838	0					
ANR	2464992	CompoundStatement		28:8:647:647	2464838	0					
ANR	2464993	ExpressionStatement	mad . RemoveLeftAd ( )	483:2:13133:13152	2464838	0	True				
ANR	2464994	CallExpression	mad . RemoveLeftAd ( )		2464838	0					
ANR	2464995	Callee	mad . RemoveLeftAd		2464838	0					
ANR	2464996	MemberAccess	mad . RemoveLeftAd		2464838	0					
ANR	2464997	Identifier	mad		2464838	0					
ANR	2464998	Identifier	RemoveLeftAd		2464838	1					
ANR	2464999	ArgumentList			2464838	1					
ANR	2465000	ExpressionStatement	mad . RemoveRightAd ( )	484:2:13156:13176	2464838	1	True				
ANR	2465001	CallExpression	mad . RemoveRightAd ( )		2464838	0					
ANR	2465002	Callee	mad . RemoveRightAd		2464838	0					
ANR	2465003	MemberAccess	mad . RemoveRightAd		2464838	0					
ANR	2465004	Identifier	mad		2464838	0					
ANR	2465005	Identifier	RemoveRightAd		2464838	1					
ANR	2465006	ArgumentList			2464838	1					
ANR	2465007	ExpressionStatement	myTree -> SetParentScope ( NULL )	485:2:13180:13210	2464838	2	True				
ANR	2465008	CallExpression	myTree -> SetParentScope ( NULL )		2464838	0					
ANR	2465009	Callee	myTree -> SetParentScope		2464838	0					
ANR	2465010	PtrMemberAccess	myTree -> SetParentScope		2464838	0					
ANR	2465011	Identifier	myTree		2464838	0					
ANR	2465012	Identifier	SetParentScope		2464838	1					
ANR	2465013	ArgumentList	NULL		2464838	1					
ANR	2465014	Argument	NULL		2464838	0					
ANR	2465015	Identifier	NULL		2464838	0					
ANR	2465016	Statement	delete	486:2:13214:13219	2464838	3	True				
ANR	2465017	ExpressionStatement	emptyAd	486:9:13221:13228	2464838	4	True				
ANR	2465018	Identifier	emptyAd		2464838	0					
ANR	2465019	ReturnStatement	return false ;	487:2:13232:13244	2464838	5	True				
ANR	2465020	Identifier	false		2464838	0					
ANR	2465021	ExpressionStatement	mad . RemoveLeftAd ( )	489:1:13250:13269	2464838	9	True				
ANR	2465022	CallExpression	mad . RemoveLeftAd ( )		2464838	0					
ANR	2465023	Callee	mad . RemoveLeftAd		2464838	0					
ANR	2465024	MemberAccess	mad . RemoveLeftAd		2464838	0					
ANR	2465025	Identifier	mad		2464838	0					
ANR	2465026	Identifier	RemoveLeftAd		2464838	1					
ANR	2465027	ArgumentList			2464838	1					
ANR	2465028	ExpressionStatement	mad . RemoveRightAd ( )	490:1:13272:13292	2464838	10	True				
ANR	2465029	CallExpression	mad . RemoveRightAd ( )		2464838	0					
ANR	2465030	Callee	mad . RemoveRightAd		2464838	0					
ANR	2465031	MemberAccess	mad . RemoveRightAd		2464838	0					
ANR	2465032	Identifier	mad		2464838	0					
ANR	2465033	Identifier	RemoveRightAd		2464838	1					
ANR	2465034	ArgumentList			2464838	1					
ANR	2465035	ExpressionStatement	myTree -> SetParentScope ( NULL )	491:1:13295:13325	2464838	11	True				
ANR	2465036	CallExpression	myTree -> SetParentScope ( NULL )		2464838	0					
ANR	2465037	Callee	myTree -> SetParentScope		2464838	0					
ANR	2465038	PtrMemberAccess	myTree -> SetParentScope		2464838	0					
ANR	2465039	Identifier	myTree		2464838	0					
ANR	2465040	Identifier	SetParentScope		2464838	1					
ANR	2465041	ArgumentList	NULL		2464838	1					
ANR	2465042	Argument	NULL		2464838	0					
ANR	2465043	Identifier	NULL		2464838	0					
ANR	2465044	Statement	delete	492:1:13328:13333	2464838	12	True				
ANR	2465045	ExpressionStatement	emptyAd	492:8:13335:13342	2464838	13	True				
ANR	2465046	Identifier	emptyAd		2464838	0					
ANR	2465047	ReturnStatement	return true ;	493:1:13345:13356	2464838	14	True				
ANR	2465048	Identifier	true		2464838	0					
ANR	2465049	ReturnType	bool		2464838	1					
ANR	2465050	Identifier	BoolExpr :: EvalInContext		2464838	2					
ANR	2465051	ParameterList	"classad :: MatchClassAd & mad , classad :: ClassAd * context , BoolValue & result"		2464838	3					
ANR	2465052	Parameter	classad :: MatchClassAd & mad	453:15:12400:12425	2464838	0	True				
ANR	2465053	ParameterType	classad :: MatchClassAd &		2464838	0					
ANR	2465054	Identifier	mad		2464838	1					
ANR	2465055	Parameter	classad :: ClassAd * context	453:43:12428:12452	2464838	1	True				
ANR	2465056	ParameterType	classad :: ClassAd *		2464838	0					
ANR	2465057	Identifier	context		2464838	1					
ANR	2465058	Parameter	BoolValue & result	454:6:12461:12477	2464838	2	True				
ANR	2465059	ParameterType	BoolValue &		2464838	0					
ANR	2465060	Identifier	result		2464838	1					
ANR	2465061	CFGEntryNode	ENTRY		2464838		True				
ANR	2465062	CFGExitNode	EXIT		2464838		True				
ANR	2465063	Symbol	val		2464838						
ANR	2465064	Symbol	b		2464838						
ANR	2465065	Symbol	UNDEFINED_VALUE		2464838						
ANR	2465066	Symbol	NULL		2464838						
ANR	2465067	Symbol	emptyAd		2464838						
ANR	2465068	Symbol	val . IsErrorValue		2464838						
ANR	2465069	Symbol	false		2464838						
ANR	2465070	Symbol	* emptyAd		2464838						
ANR	2465071	Symbol	val . IsUndefinedValue		2464838						
ANR	2465072	Symbol	TRUE_VALUE		2464838						
ANR	2465073	Symbol	val . IsBooleanValue		2464838						
ANR	2465074	Symbol	result		2464838						
ANR	2465075	Symbol	mad		2464838						
ANR	2465076	Symbol	emptyAd -> EvaluateExpr		2464838						
ANR	2465077	Symbol	ERROR_VALUE		2464838						
ANR	2465078	Symbol	FALSE_VALUE		2464838						
ANR	2465079	Symbol	context		2464838						
ANR	2465080	Symbol	true		2464838						
ANR	2465081	Symbol	initialized		2464838						
ANR	2465082	Symbol	myTree		2464838						
ANR	2465083	Function	BoolExpr :: ToString	496:0:13361:13518							
ANR	2465084	FunctionDef	BoolExpr :: ToString (string & buffer)		2465083	0					
ANR	2465085	CompoundStatement		498:0:13404:13518	2465083	0					
ANR	2465086	IfStatement	if ( ! initialized )		2465083	0					
ANR	2465087	Condition	! initialized	499:5:13411:13422	2465083	0	True				
ANR	2465088	UnaryOperationExpression	! initialized		2465083	0					
ANR	2465089	UnaryOperator	!		2465083	0					
ANR	2465090	Identifier	initialized		2465083	1					
ANR	2465091	CompoundStatement		2:20:21:21	2465083	1					
ANR	2465092	ReturnStatement	return false ;	500:2:13430:13442	2465083	0	True				
ANR	2465093	Identifier	false		2465083	0					
ANR	2465094	IdentifierDeclStatement	classad :: PrettyPrint pp ;	502:1:13448:13471	2465083	1	True				
ANR	2465095	IdentifierDecl	pp		2465083	0					
ANR	2465096	IdentifierDeclType	classad :: PrettyPrint		2465083	0					
ANR	2465097	Identifier	pp		2465083	1					
ANR	2465098	ExpressionStatement	"pp . Unparse ( buffer , myTree )"	503:1:13474:13502	2465083	2	True				
ANR	2465099	CallExpression	"pp . Unparse ( buffer , myTree )"		2465083	0					
ANR	2465100	Callee	pp . Unparse		2465083	0					
ANR	2465101	MemberAccess	pp . Unparse		2465083	0					
ANR	2465102	Identifier	pp		2465083	0					
ANR	2465103	Identifier	Unparse		2465083	1					
ANR	2465104	ArgumentList	buffer		2465083	1					
ANR	2465105	Argument	buffer		2465083	0					
ANR	2465106	Identifier	buffer		2465083	0					
ANR	2465107	Argument	myTree		2465083	1					
ANR	2465108	Identifier	myTree		2465083	0					
ANR	2465109	ReturnStatement	return true ;	504:1:13505:13516	2465083	3	True				
ANR	2465110	Identifier	true		2465083	0					
ANR	2465111	ReturnType	bool		2465083	1					
ANR	2465112	Identifier	BoolExpr :: ToString		2465083	2					
ANR	2465113	ParameterList	string & buffer		2465083	3					
ANR	2465114	Parameter	string & buffer	497:10:13387:13400	2465083	0	True				
ANR	2465115	ParameterType	string &		2465083	0					
ANR	2465116	Identifier	buffer		2465083	1					
ANR	2465117	CFGEntryNode	ENTRY		2465083		True				
ANR	2465118	CFGExitNode	EXIT		2465083		True				
ANR	2465119	Symbol	pp		2465083						
ANR	2465120	Symbol	false		2465083						
ANR	2465121	Symbol	true		2465083						
ANR	2465122	Symbol	initialized		2465083						
ANR	2465123	Symbol	buffer		2465083						
ANR	2465124	Symbol	myTree		2465083						
ANR	2465125	Function	BoolExpr :: Init	507:0:13521:13702							
ANR	2465126	FunctionDef	BoolExpr :: Init (classad :: ExprTree * tree)		2465125	0					
ANR	2465127	CompoundStatement		509:0:13570:13702	2465125	0					
ANR	2465128	IfStatement	if ( ! tree )		2465125	0					
ANR	2465129	Condition	! tree	510:5:13577:13581	2465125	0	True				
ANR	2465130	UnaryOperationExpression	! tree		2465125	0					
ANR	2465131	UnaryOperator	!		2465125	0					
ANR	2465132	Identifier	tree		2465125	1					
ANR	2465133	CompoundStatement		2:13:14:14	2465125	1					
ANR	2465134	ReturnStatement	return false ;	511:2:13589:13601	2465125	0	True				
ANR	2465135	Identifier	false		2465125	0					
ANR	2465136	IfStatement	if ( myTree )		2465125	1					
ANR	2465137	Condition	myTree	513:5:13611:13616	2465125	0	True				
ANR	2465138	Identifier	myTree		2465125	0					
ANR	2465139	CompoundStatement		5:14:49:49	2465125	1					
ANR	2465140	Statement	delete	514:2:13624:13629	2465125	0	True				
ANR	2465141	ExpressionStatement	myTree	514:9:13631:13637	2465125	1	True				
ANR	2465142	Identifier	myTree		2465125	0					
ANR	2465143	ExpressionStatement	myTree = tree -> Copy ( )	516:1:13643:13665	2465125	2	True				
ANR	2465144	AssignmentExpression	myTree = tree -> Copy ( )		2465125	0		=			
ANR	2465145	Identifier	myTree		2465125	0					
ANR	2465146	CallExpression	tree -> Copy ( )		2465125	1					
ANR	2465147	Callee	tree -> Copy		2465125	0					
ANR	2465148	PtrMemberAccess	tree -> Copy		2465125	0					
ANR	2465149	Identifier	tree		2465125	0					
ANR	2465150	Identifier	Copy		2465125	1					
ANR	2465151	ArgumentList			2465125	1					
ANR	2465152	ExpressionStatement	initialized = true	517:1:13668:13686	2465125	3	True				
ANR	2465153	AssignmentExpression	initialized = true		2465125	0		=			
ANR	2465154	Identifier	initialized		2465125	0					
ANR	2465155	Identifier	true		2465125	1					
ANR	2465156	ReturnStatement	return true ;	518:1:13689:13700	2465125	4	True				
ANR	2465157	Identifier	true		2465125	0					
ANR	2465158	ReturnType	bool		2465125	1					
ANR	2465159	Identifier	BoolExpr :: Init		2465125	2					
ANR	2465160	ParameterList	classad :: ExprTree * tree		2465125	3					
ANR	2465161	Parameter	classad :: ExprTree * tree	508:6:13543:13566	2465125	0	True				
ANR	2465162	ParameterType	classad :: ExprTree *		2465125	0					
ANR	2465163	Identifier	tree		2465125	1					
ANR	2465164	CFGEntryNode	ENTRY		2465125		True				
ANR	2465165	CFGExitNode	EXIT		2465125		True				
ANR	2465166	Symbol	* tree		2465125						
ANR	2465167	Symbol	tree		2465125						
ANR	2465168	Symbol	false		2465125						
ANR	2465169	Symbol	true		2465125						
ANR	2465170	Symbol	initialized		2465125						
ANR	2465171	Symbol	myTree		2465125						
ANR	2465172	Symbol	tree -> Copy		2465125						
ANR	2465173	Function	BoolExpr :: GetExpr	522:0:13706:13765							
ANR	2465174	FunctionDef	BoolExpr :: GetExpr ()		2465173	0					
ANR	2465175	CompoundStatement		524:0:13747:13765	2465173	0					
ANR	2465176	ReturnStatement	return myTree ;	525:1:13750:13763	2465173	0	True				
ANR	2465177	Identifier	myTree		2465173	0					
ANR	2465178	ReturnType	classad :: ExprTree *		2465173	1					
ANR	2465179	Identifier	BoolExpr :: GetExpr		2465173	2					
ANR	2465180	ParameterList			2465173	3					
ANR	2465181	CFGEntryNode	ENTRY		2465173		True				
ANR	2465182	CFGExitNode	EXIT		2465173		True				
ANR	2465183	Symbol	myTree		2465173						
