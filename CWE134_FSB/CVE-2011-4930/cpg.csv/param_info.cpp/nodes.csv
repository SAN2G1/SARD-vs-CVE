command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1956166	File	data/converged/CVE-2011-4930_htcondor/param_info.cpp								
ANR	1956167	DeclStmt									
ANR	1956168	Decl							bucket_t	bucket_t * *	param_info
ANR	1956169	Function	param_info_init	44:0:1226:1954							
ANR	1956170	FunctionDef	param_info_init ()		1956169	0					
ANR	1956171	CompoundStatement		46:0:1250:1954	1956169	0					
ANR	1956172	Statement	static	47:1:1253:1258	1956169	0	True				
ANR	1956173	IdentifierDeclStatement	int done_once = 0 ;	47:8:1260:1277	1956169	1	True				
ANR	1956174	IdentifierDecl	done_once = 0		1956169	0					
ANR	1956175	IdentifierDeclType	int		1956169	0					
ANR	1956176	Identifier	done_once		1956169	1					
ANR	1956177	AssignmentExpression	done_once = 0		1956169	2		=			
ANR	1956178	Identifier	done_once		1956169	0					
ANR	1956179	PrimaryExpression	0		1956169	1					
ANR	1956180	IfStatement	if ( done_once == 1 )		1956169	2					
ANR	1956181	Condition	done_once == 1	50:5:1350:1363	1956169	0	True				
ANR	1956182	EqualityExpression	done_once == 1		1956169	0		==			
ANR	1956183	Identifier	done_once		1956169	0					
ANR	1956184	PrimaryExpression	1		1956169	1					
ANR	1956185	CompoundStatement		5:21:115:115	1956169	1					
ANR	1956186	ReturnStatement	return ;	51:2:1370:1376	1956169	0	True				
ANR	1956187	ExpressionStatement	done_once = 1	55:1:1428:1441	1956169	3	True				
ANR	1956188	AssignmentExpression	done_once = 1		1956169	0		=			
ANR	1956189	Identifier	done_once		1956169	0					
ANR	1956190	PrimaryExpression	1		1956169	1					
ANR	1956191	ExpressionStatement	param_info_hash_create ( & param_info )	57:1:1445:1480	1956169	4	True				
ANR	1956192	CallExpression	param_info_hash_create ( & param_info )		1956169	0					
ANR	1956193	Callee	param_info_hash_create		1956169	0					
ANR	1956194	Identifier	param_info_hash_create		1956169	0					
ANR	1956195	ArgumentList	& param_info		1956169	1					
ANR	1956196	Argument	& param_info		1956169	0					
ANR	1956197	UnaryOperationExpression	& param_info		1956169	0					
ANR	1956198	UnaryOperator	&		1956169	0					
ANR	1956199	Identifier	param_info		1956169	1					
ANR	1956200	ForStatement	for ( int ii = 0 ; ii < ( int ) ( sizeof ( g_param_info_init_table ) / sizeof ( g_param_info_init_table [ 0 ] ) ) ; ++ ii )		1956169	5					
ANR	1956201	ForInit	int ii = 0 ;	63:9:1765:1775	1956169	0	True				
ANR	1956202	IdentifierDeclStatement	int ii = 0 ;		1956169	0					
ANR	1956203	IdentifierDecl	ii = 0		1956169	0					
ANR	1956204	IdentifierDeclType	int		1956169	0					
ANR	1956205	Identifier	ii		1956169	1					
ANR	1956206	AssignmentExpression	ii = 0		1956169	2		=			
ANR	1956207	Identifier	ii		1956169	0					
ANR	1956208	PrimaryExpression	0		1956169	1					
ANR	1956209	Condition	ii < ( int ) ( sizeof ( g_param_info_init_table ) / sizeof ( g_param_info_init_table [ 0 ] ) )	63:21:1777:1854	1956169	1	True				
ANR	1956210	RelationalExpression	ii < ( int ) ( sizeof ( g_param_info_init_table ) / sizeof ( g_param_info_init_table [ 0 ] ) )		1956169	0		<			
ANR	1956211	Identifier	ii		1956169	0					
ANR	1956212	CastExpression	( int ) ( sizeof ( g_param_info_init_table ) / sizeof ( g_param_info_init_table [ 0 ] ) )		1956169	1					
ANR	1956213	CastTarget	int		1956169	0					
ANR	1956214	MultiplicativeExpression	sizeof ( g_param_info_init_table ) / sizeof ( g_param_info_init_table [ 0 ] )		1956169	1		/			
ANR	1956215	SizeofExpression	sizeof ( g_param_info_init_table )		1956169	0					
ANR	1956216	Sizeof	sizeof		1956169	0					
ANR	1956217	SizeofOperand	g_param_info_init_table		1956169	1					
ANR	1956218	SizeofExpression	sizeof ( g_param_info_init_table [ 0 ] )		1956169	1					
ANR	1956219	Sizeof	sizeof		1956169	0					
ANR	1956220	ArrayIndexing	g_param_info_init_table [ 0 ]		1956169	1					
ANR	1956221	Identifier	g_param_info_init_table		1956169	0					
ANR	1956222	PrimaryExpression	0		1956169	1					
ANR	1956223	UnaryExpression	++ ii	63:101:1857:1860	1956169	2	True				
ANR	1956224	IncDec	++		1956169	0					
ANR	1956225	Identifier	ii		1956169	1					
ANR	1956226	CompoundStatement		19:7:619:619	1956169	3					
ANR	1956227	ExpressionStatement	"param_info_hash_insert ( param_info , g_param_info_init_table [ ii ] )"	65:7:1879:1942	1956169	0	True				
ANR	1956228	CallExpression	"param_info_hash_insert ( param_info , g_param_info_init_table [ ii ] )"		1956169	0					
ANR	1956229	Callee	param_info_hash_insert		1956169	0					
ANR	1956230	Identifier	param_info_hash_insert		1956169	0					
ANR	1956231	ArgumentList	param_info		1956169	1					
ANR	1956232	Argument	param_info		1956169	0					
ANR	1956233	Identifier	param_info		1956169	0					
ANR	1956234	Argument	g_param_info_init_table [ ii ]		1956169	1					
ANR	1956235	ArrayIndexing	g_param_info_init_table [ ii ]		1956169	0					
ANR	1956236	Identifier	g_param_info_init_table		1956169	0					
ANR	1956237	Identifier	ii		1956169	1					
ANR	1956238	ReturnType	void		1956169	1					
ANR	1956239	Identifier	param_info_init		1956169	2					
ANR	1956240	ParameterList			1956169	3					
ANR	1956241	CFGEntryNode	ENTRY		1956169		True				
ANR	1956242	CFGExitNode	EXIT		1956169		True				
ANR	1956243	Symbol	ii		1956169						
ANR	1956244	Symbol	* g_param_info_init_table		1956169						
ANR	1956245	Symbol	g_param_info_init_table		1956169						
ANR	1956246	Symbol	* ii		1956169						
ANR	1956247	Symbol	& param_info		1956169						
ANR	1956248	Symbol	done_once		1956169						
ANR	1956249	Symbol	param_info		1956169						
ANR	1956250	Function	param_default_string	70:0:1957:2305							
ANR	1956251	FunctionDef	param_default_string (const char * param)		1956250	0					
ANR	1956252	CompoundStatement		72:0:2009:2305	1956250	0					
ANR	1956253	IdentifierDeclStatement	const param_info_t * p ;	73:1:2012:2033	1956250	0	True				
ANR	1956254	IdentifierDecl	* p		1956250	0					
ANR	1956255	IdentifierDeclType	const param_info_t *		1956250	0					
ANR	1956256	Identifier	p		1956250	1					
ANR	1956257	IdentifierDeclStatement	const char * ret = NULL ;	74:1:2036:2058	1956250	1	True				
ANR	1956258	IdentifierDecl	* ret = NULL		1956250	0					
ANR	1956259	IdentifierDeclType	const char *		1956250	0					
ANR	1956260	Identifier	ret		1956250	1					
ANR	1956261	AssignmentExpression	* ret = NULL		1956250	2		=			
ANR	1956262	Identifier	NULL		1956250	0					
ANR	1956263	Identifier	NULL		1956250	1					
ANR	1956264	ExpressionStatement	param_info_init ( )	76:1:2062:2079	1956250	2	True				
ANR	1956265	CallExpression	param_info_init ( )		1956250	0					
ANR	1956266	Callee	param_info_init		1956250	0					
ANR	1956267	Identifier	param_info_init		1956250	0					
ANR	1956268	ArgumentList			1956250	1					
ANR	1956269	ExpressionStatement	"p = param_info_hash_lookup ( param_info , param )"	77:1:2082:2127	1956250	3	True				
ANR	1956270	AssignmentExpression	"p = param_info_hash_lookup ( param_info , param )"		1956250	0		=			
ANR	1956271	Identifier	p		1956250	0					
ANR	1956272	CallExpression	"param_info_hash_lookup ( param_info , param )"		1956250	1					
ANR	1956273	Callee	param_info_hash_lookup		1956250	0					
ANR	1956274	Identifier	param_info_hash_lookup		1956250	0					
ANR	1956275	ArgumentList	param_info		1956250	1					
ANR	1956276	Argument	param_info		1956250	0					
ANR	1956277	Identifier	param_info		1956250	0					
ANR	1956278	Argument	param		1956250	1					
ANR	1956279	Identifier	param		1956250	0					
ANR	1956280	IfStatement	if ( p && p -> default_valid )		1956250	4					
ANR	1956281	Condition	p && p -> default_valid	81:5:2243:2263	1956250	0	True				
ANR	1956282	AndExpression	p && p -> default_valid		1956250	0		&&			
ANR	1956283	Identifier	p		1956250	0					
ANR	1956284	PtrMemberAccess	p -> default_valid		1956250	1					
ANR	1956285	Identifier	p		1956250	0					
ANR	1956286	Identifier	default_valid		1956250	1					
ANR	1956287	CompoundStatement		10:28:256:256	1956250	1					
ANR	1956288	ExpressionStatement	ret = p -> str_val	82:2:2270:2286	1956250	0	True				
ANR	1956289	AssignmentExpression	ret = p -> str_val		1956250	0		=			
ANR	1956290	Identifier	ret		1956250	0					
ANR	1956291	PtrMemberAccess	p -> str_val		1956250	1					
ANR	1956292	Identifier	p		1956250	0					
ANR	1956293	Identifier	str_val		1956250	1					
ANR	1956294	ReturnStatement	return ret ;	85:1:2293:2303	1956250	5	True				
ANR	1956295	Identifier	ret		1956250	0					
ANR	1956296	ReturnType	const char *		1956250	1					
ANR	1956297	Identifier	param_default_string		1956250	2					
ANR	1956298	ParameterList	const char * param		1956250	3					
ANR	1956299	Parameter	const char * param	71:21:1990:2006	1956250	0	True				
ANR	1956300	ParameterType	const char *		1956250	0					
ANR	1956301	Identifier	param		1956250	1					
ANR	1956302	CFGEntryNode	ENTRY		1956250		True				
ANR	1956303	CFGExitNode	EXIT		1956250		True				
ANR	1956304	Symbol	p		1956250						
ANR	1956305	Symbol	ret		1956250						
ANR	1956306	Symbol	NULL		1956250						
ANR	1956307	Symbol	param		1956250						
ANR	1956308	Symbol	p -> str_val		1956250						
ANR	1956309	Symbol	p -> default_valid		1956250						
ANR	1956310	Symbol	param_info_hash_lookup		1956250						
ANR	1956311	Symbol	* p		1956250						
ANR	1956312	Symbol	param_info		1956250						
ANR	1956313	Function	param_default_integer	88:0:2308:2725							
ANR	1956314	FunctionDef	"param_default_integer (const char * param , int * valid)"		1956313	0					
ANR	1956315	CompoundStatement		89:53:2365:2725	1956313	0					
ANR	1956316	IdentifierDeclStatement	const param_info_t * p ;	90:1:2368:2389	1956313	0	True				
ANR	1956317	IdentifierDecl	* p		1956313	0					
ANR	1956318	IdentifierDeclType	const param_info_t *		1956313	0					
ANR	1956319	Identifier	p		1956313	1					
ANR	1956320	IdentifierDeclStatement	int ret = 0 ;	91:1:2392:2403	1956313	1	True				
ANR	1956321	IdentifierDecl	ret = 0		1956313	0					
ANR	1956322	IdentifierDeclType	int		1956313	0					
ANR	1956323	Identifier	ret		1956313	1					
ANR	1956324	AssignmentExpression	ret = 0		1956313	2		=			
ANR	1956325	Identifier	ret		1956313	0					
ANR	1956326	PrimaryExpression	0		1956313	1					
ANR	1956327	ExpressionStatement	param_info_init ( )	93:1:2407:2424	1956313	2	True				
ANR	1956328	CallExpression	param_info_init ( )		1956313	0					
ANR	1956329	Callee	param_info_init		1956313	0					
ANR	1956330	Identifier	param_info_init		1956313	0					
ANR	1956331	ArgumentList			1956313	1					
ANR	1956332	ExpressionStatement	"p = param_info_hash_lookup ( param_info , param )"	95:1:2428:2473	1956313	3	True				
ANR	1956333	AssignmentExpression	"p = param_info_hash_lookup ( param_info , param )"		1956313	0		=			
ANR	1956334	Identifier	p		1956313	0					
ANR	1956335	CallExpression	"param_info_hash_lookup ( param_info , param )"		1956313	1					
ANR	1956336	Callee	param_info_hash_lookup		1956313	0					
ANR	1956337	Identifier	param_info_hash_lookup		1956313	0					
ANR	1956338	ArgumentList	param_info		1956313	1					
ANR	1956339	Argument	param_info		1956313	0					
ANR	1956340	Identifier	param_info		1956313	0					
ANR	1956341	Argument	param		1956313	1					
ANR	1956342	Identifier	param		1956313	0					
ANR	1956343	IfStatement	if ( p && ( p -> type == PARAM_TYPE_INT || p -> type == PARAM_TYPE_BOOL ) )		1956313	4					
ANR	1956344	Condition	p && ( p -> type == PARAM_TYPE_INT || p -> type == PARAM_TYPE_BOOL )	97:5:2481:2542	1956313	0	True				
ANR	1956345	AndExpression	p && ( p -> type == PARAM_TYPE_INT || p -> type == PARAM_TYPE_BOOL )		1956313	0		&&			
ANR	1956346	Identifier	p		1956313	0					
ANR	1956347	OrExpression	p -> type == PARAM_TYPE_INT || p -> type == PARAM_TYPE_BOOL		1956313	1		||			
ANR	1956348	EqualityExpression	p -> type == PARAM_TYPE_INT		1956313	0		==			
ANR	1956349	PtrMemberAccess	p -> type		1956313	0					
ANR	1956350	Identifier	p		1956313	0					
ANR	1956351	Identifier	type		1956313	1					
ANR	1956352	Identifier	PARAM_TYPE_INT		1956313	1					
ANR	1956353	EqualityExpression	p -> type == PARAM_TYPE_BOOL		1956313	1		==			
ANR	1956354	PtrMemberAccess	p -> type		1956313	0					
ANR	1956355	Identifier	p		1956313	0					
ANR	1956356	Identifier	type		1956313	1					
ANR	1956357	Identifier	PARAM_TYPE_BOOL		1956313	1					
ANR	1956358	CompoundStatement		9:69:179:179	1956313	1					
ANR	1956359	ExpressionStatement	* valid = p -> default_valid	98:8:2555:2580	1956313	0	True				
ANR	1956360	AssignmentExpression	* valid = p -> default_valid		1956313	0		=			
ANR	1956361	UnaryOperationExpression	* valid		1956313	0					
ANR	1956362	UnaryOperator	*		1956313	0					
ANR	1956363	Identifier	valid		1956313	1					
ANR	1956364	PtrMemberAccess	p -> default_valid		1956313	1					
ANR	1956365	Identifier	p		1956313	0					
ANR	1956366	Identifier	default_valid		1956313	1					
ANR	1956367	IfStatement	if ( * valid )		1956313	1					
ANR	1956368	Condition	* valid	99:12:2594:2599	1956313	0	True				
ANR	1956369	UnaryOperationExpression	* valid		1956313	0					
ANR	1956370	UnaryOperator	*		1956313	0					
ANR	1956371	Identifier	valid		1956313	1					
ANR	1956372	Statement	ret	100:12:2614:2616	1956313	1	True				
ANR	1956373	Statement	=	100:16:2618:2618	1956313	2	True				
ANR	1956374	Statement	reinterpret_cast	100:18:2620:2635	1956313	3	True				
ANR	1956375	Statement	<	100:34:2636:2636	1956313	4	True				
ANR	1956376	Statement	const	100:35:2637:2641	1956313	5	True				
ANR	1956377	Statement	param_info_PARAM_TYPE_INT	100:41:2643:2667	1956313	6	True				
ANR	1956378	Statement	*	100:66:2668:2668	1956313	7	True				
ANR	1956379	Statement	>	100:67:2669:2669	1956313	8	True				
ANR	1956380	ExpressionStatement	( p ) -> int_val	100:68:2670:2682	1956313	9	True				
ANR	1956381	PtrMemberAccess	( p ) -> int_val		1956313	0					
ANR	1956382	Identifier	p		1956313	0					
ANR	1956383	Identifier	int_val		1956313	1					
ANR	1956384	ElseStatement	else		1956313	0					
ANR	1956385	CompoundStatement		13:8:326:326	1956313	0					
ANR	1956386	ExpressionStatement	* valid = 0	102:2:2696:2706	1956313	0	True				
ANR	1956387	AssignmentExpression	* valid = 0		1956313	0		=			
ANR	1956388	UnaryOperationExpression	* valid		1956313	0					
ANR	1956389	UnaryOperator	*		1956313	0					
ANR	1956390	Identifier	valid		1956313	1					
ANR	1956391	PrimaryExpression	0		1956313	1					
ANR	1956392	ReturnStatement	return ret ;	105:1:2713:2723	1956313	5	True				
ANR	1956393	Identifier	ret		1956313	0					
ANR	1956394	ReturnType	int		1956313	1					
ANR	1956395	Identifier	param_default_integer		1956313	2					
ANR	1956396	ParameterList	"const char * param , int * valid"		1956313	3					
ANR	1956397	Parameter	const char * param	89:22:2334:2350	1956313	0	True				
ANR	1956398	ParameterType	const char *		1956313	0					
ANR	1956399	Identifier	param		1956313	1					
ANR	1956400	Parameter	int * valid	89:41:2353:2362	1956313	1	True				
ANR	1956401	ParameterType	int *		1956313	0					
ANR	1956402	Identifier	valid		1956313	1					
ANR	1956403	CFGEntryNode	ENTRY		1956313		True				
ANR	1956404	CFGExitNode	EXIT		1956313		True				
ANR	1956405	Symbol	valid		1956313						
ANR	1956406	Symbol	p		1956313						
ANR	1956407	Symbol	ret		1956313						
ANR	1956408	Symbol	param		1956313						
ANR	1956409	Symbol	p -> default_valid		1956313						
ANR	1956410	Symbol	param_info_hash_lookup		1956313						
ANR	1956411	Symbol	* p		1956313						
ANR	1956412	Symbol	PARAM_TYPE_BOOL		1956313						
ANR	1956413	Symbol	* valid		1956313						
ANR	1956414	Symbol	PARAM_TYPE_INT		1956313						
ANR	1956415	Symbol	p -> type		1956313						
ANR	1956416	Symbol	param_info		1956313						
ANR	1956417	Function	param_default_boolean	108:0:2728:2839							
ANR	1956418	FunctionDef	"param_default_boolean (const char * param , int * valid)"		1956417	0					
ANR	1956419	CompoundStatement		109:53:2785:2839	1956417	0					
ANR	1956420	ReturnStatement	"return ( param_default_integer ( param , valid ) != 0 ) ;"	110:1:2788:2837	1956417	0	True				
ANR	1956421	EqualityExpression	"param_default_integer ( param , valid ) != 0"		1956417	0		!=			
ANR	1956422	CallExpression	"param_default_integer ( param , valid )"		1956417	0					
ANR	1956423	Callee	param_default_integer		1956417	0					
ANR	1956424	Identifier	param_default_integer		1956417	0					
ANR	1956425	ArgumentList	param		1956417	1					
ANR	1956426	Argument	param		1956417	0					
ANR	1956427	Identifier	param		1956417	0					
ANR	1956428	Argument	valid		1956417	1					
ANR	1956429	Identifier	valid		1956417	0					
ANR	1956430	PrimaryExpression	0		1956417	1					
ANR	1956431	ReturnType	int		1956417	1					
ANR	1956432	Identifier	param_default_boolean		1956417	2					
ANR	1956433	ParameterList	"const char * param , int * valid"		1956417	3					
ANR	1956434	Parameter	const char * param	109:22:2754:2770	1956417	0	True				
ANR	1956435	ParameterType	const char *		1956417	0					
ANR	1956436	Identifier	param		1956417	1					
ANR	1956437	Parameter	int * valid	109:41:2773:2782	1956417	1	True				
ANR	1956438	ParameterType	int *		1956417	0					
ANR	1956439	Identifier	valid		1956417	1					
ANR	1956440	CFGEntryNode	ENTRY		1956417		True				
ANR	1956441	CFGExitNode	EXIT		1956417		True				
ANR	1956442	Symbol	valid		1956417						
ANR	1956443	Symbol	param		1956417						
ANR	1956444	Symbol	param_default_integer		1956417						
ANR	1956445	Function	param_default_double	113:0:2842:3232							
ANR	1956446	FunctionDef	"param_default_double (const char * param , int * valid)"		1956445	0					
ANR	1956447	CompoundStatement		114:52:2901:3232	1956445	0					
ANR	1956448	IdentifierDeclStatement	const param_info_t * p ;	117:1:2906:2927	1956445	0	True				
ANR	1956449	IdentifierDecl	* p		1956445	0					
ANR	1956450	IdentifierDeclType	const param_info_t *		1956445	0					
ANR	1956451	Identifier	p		1956445	1					
ANR	1956452	IdentifierDeclStatement	double ret = 0.0 ;	118:1:2930:2946	1956445	1	True				
ANR	1956453	IdentifierDecl	ret = 0.0		1956445	0					
ANR	1956454	IdentifierDeclType	double		1956445	0					
ANR	1956455	Identifier	ret		1956445	1					
ANR	1956456	AssignmentExpression	ret = 0.0		1956445	2		=			
ANR	1956457	Identifier	ret		1956445	0					
ANR	1956458	PrimaryExpression	0.0		1956445	1					
ANR	1956459	ExpressionStatement	param_info_init ( )	120:1:2950:2967	1956445	2	True				
ANR	1956460	CallExpression	param_info_init ( )		1956445	0					
ANR	1956461	Callee	param_info_init		1956445	0					
ANR	1956462	Identifier	param_info_init		1956445	0					
ANR	1956463	ArgumentList			1956445	1					
ANR	1956464	ExpressionStatement	"p = param_info_hash_lookup ( param_info , param )"	122:1:2971:3016	1956445	3	True				
ANR	1956465	AssignmentExpression	"p = param_info_hash_lookup ( param_info , param )"		1956445	0		=			
ANR	1956466	Identifier	p		1956445	0					
ANR	1956467	CallExpression	"param_info_hash_lookup ( param_info , param )"		1956445	1					
ANR	1956468	Callee	param_info_hash_lookup		1956445	0					
ANR	1956469	Identifier	param_info_hash_lookup		1956445	0					
ANR	1956470	ArgumentList	param_info		1956445	1					
ANR	1956471	Argument	param_info		1956445	0					
ANR	1956472	Identifier	param_info		1956445	0					
ANR	1956473	Argument	param		1956445	1					
ANR	1956474	Identifier	param		1956445	0					
ANR	1956475	IfStatement	if ( p && ( p -> type == PARAM_TYPE_DOUBLE ) )		1956445	4					
ANR	1956476	Condition	p && ( p -> type == PARAM_TYPE_DOUBLE )	124:5:3024:3058	1956445	0	True				
ANR	1956477	AndExpression	p && ( p -> type == PARAM_TYPE_DOUBLE )		1956445	0		&&			
ANR	1956478	Identifier	p		1956445	0					
ANR	1956479	EqualityExpression	p -> type == PARAM_TYPE_DOUBLE		1956445	1		==			
ANR	1956480	PtrMemberAccess	p -> type		1956445	0					
ANR	1956481	Identifier	p		1956445	0					
ANR	1956482	Identifier	type		1956445	1					
ANR	1956483	Identifier	PARAM_TYPE_DOUBLE		1956445	1					
ANR	1956484	CompoundStatement		11:42:159:159	1956445	1					
ANR	1956485	ExpressionStatement	* valid = p -> default_valid	125:2:3065:3090	1956445	0	True				
ANR	1956486	AssignmentExpression	* valid = p -> default_valid		1956445	0		=			
ANR	1956487	UnaryOperationExpression	* valid		1956445	0					
ANR	1956488	UnaryOperator	*		1956445	0					
ANR	1956489	Identifier	valid		1956445	1					
ANR	1956490	PtrMemberAccess	p -> default_valid		1956445	1					
ANR	1956491	Identifier	p		1956445	0					
ANR	1956492	Identifier	default_valid		1956445	1					
ANR	1956493	IfStatement	if ( * valid )		1956445	1					
ANR	1956494	Condition	* valid	126:12:3104:3109	1956445	0	True				
ANR	1956495	UnaryOperationExpression	* valid		1956445	0					
ANR	1956496	UnaryOperator	*		1956445	0					
ANR	1956497	Identifier	valid		1956445	1					
ANR	1956498	Statement	ret	127:6:3118:3120	1956445	1	True				
ANR	1956499	Statement	=	127:10:3122:3122	1956445	2	True				
ANR	1956500	Statement	reinterpret_cast	127:12:3124:3139	1956445	3	True				
ANR	1956501	Statement	<	127:28:3140:3140	1956445	4	True				
ANR	1956502	Statement	const	127:29:3141:3145	1956445	5	True				
ANR	1956503	Statement	param_info_PARAM_TYPE_DOUBLE	127:35:3147:3174	1956445	6	True				
ANR	1956504	Statement	*	127:63:3175:3175	1956445	7	True				
ANR	1956505	Statement	>	127:64:3176:3176	1956445	8	True				
ANR	1956506	ExpressionStatement	( p ) -> dbl_val	127:65:3177:3189	1956445	9	True				
ANR	1956507	PtrMemberAccess	( p ) -> dbl_val		1956445	0					
ANR	1956508	Identifier	p		1956445	0					
ANR	1956509	Identifier	dbl_val		1956445	1					
ANR	1956510	ElseStatement	else		1956445	0					
ANR	1956511	CompoundStatement		15:8:297:297	1956445	0					
ANR	1956512	ExpressionStatement	* valid = 0	129:2:3203:3213	1956445	0	True				
ANR	1956513	AssignmentExpression	* valid = 0		1956445	0		=			
ANR	1956514	UnaryOperationExpression	* valid		1956445	0					
ANR	1956515	UnaryOperator	*		1956445	0					
ANR	1956516	Identifier	valid		1956445	1					
ANR	1956517	PrimaryExpression	0		1956445	1					
ANR	1956518	ReturnStatement	return ret ;	132:1:3220:3230	1956445	5	True				
ANR	1956519	Identifier	ret		1956445	0					
ANR	1956520	ReturnType	double		1956445	1					
ANR	1956521	Identifier	param_default_double		1956445	2					
ANR	1956522	ParameterList	"const char * param , int * valid"		1956445	3					
ANR	1956523	Parameter	const char * param	114:21:2870:2886	1956445	0	True				
ANR	1956524	ParameterType	const char *		1956445	0					
ANR	1956525	Identifier	param		1956445	1					
ANR	1956526	Parameter	int * valid	114:40:2889:2898	1956445	1	True				
ANR	1956527	ParameterType	int *		1956445	0					
ANR	1956528	Identifier	valid		1956445	1					
ANR	1956529	CFGEntryNode	ENTRY		1956445		True				
ANR	1956530	CFGExitNode	EXIT		1956445		True				
ANR	1956531	Symbol	valid		1956445						
ANR	1956532	Symbol	p		1956445						
ANR	1956533	Symbol	ret		1956445						
ANR	1956534	Symbol	param		1956445						
ANR	1956535	Symbol	p -> default_valid		1956445						
ANR	1956536	Symbol	param_info_hash_lookup		1956445						
ANR	1956537	Symbol	PARAM_TYPE_DOUBLE		1956445						
ANR	1956538	Symbol	* p		1956445						
ANR	1956539	Symbol	* valid		1956445						
ANR	1956540	Symbol	p -> type		1956445						
ANR	1956541	Symbol	param_info		1956445						
ANR	1956542	Function	param_range_integer	135:0:3235:3897							
ANR	1956543	FunctionDef	"param_range_integer (const char * param , int * min , int * max)"		1956542	0					
ANR	1956544	CompoundStatement		136:59:3298:3897	1956542	0					
ANR	1956545	IdentifierDeclStatement	const param_info_t * p ;	138:1:3302:3323	1956542	0	True				
ANR	1956546	IdentifierDecl	* p		1956542	0					
ANR	1956547	IdentifierDeclType	const param_info_t *		1956542	0					
ANR	1956548	Identifier	p		1956542	1					
ANR	1956549	ExpressionStatement	"p = param_info_hash_lookup ( param_info , param )"	140:1:3327:3372	1956542	1	True				
ANR	1956550	AssignmentExpression	"p = param_info_hash_lookup ( param_info , param )"		1956542	0		=			
ANR	1956551	Identifier	p		1956542	0					
ANR	1956552	CallExpression	"param_info_hash_lookup ( param_info , param )"		1956542	1					
ANR	1956553	Callee	param_info_hash_lookup		1956542	0					
ANR	1956554	Identifier	param_info_hash_lookup		1956542	0					
ANR	1956555	ArgumentList	param_info		1956542	1					
ANR	1956556	Argument	param_info		1956542	0					
ANR	1956557	Identifier	param_info		1956542	0					
ANR	1956558	Argument	param		1956542	1					
ANR	1956559	Identifier	param		1956542	0					
ANR	1956560	IfStatement	if ( p )		1956542	2					
ANR	1956561	Condition	p	142:5:3380:3380	1956542	0	True				
ANR	1956562	Identifier	p		1956542	0					
ANR	1956563	CompoundStatement		7:8:84:84	1956542	1					
ANR	1956564	IfStatement	if ( p -> type != PARAM_TYPE_INT )		1956542	0					
ANR	1956565	Condition	p -> type != PARAM_TYPE_INT	143:6:3391:3415	1956542	0	True				
ANR	1956566	EqualityExpression	p -> type != PARAM_TYPE_INT		1956542	0		!=			
ANR	1956567	PtrMemberAccess	p -> type		1956542	0					
ANR	1956568	Identifier	p		1956542	0					
ANR	1956569	Identifier	type		1956542	1					
ANR	1956570	Identifier	PARAM_TYPE_INT		1956542	1					
ANR	1956571	CompoundStatement		8:33:119:119	1956542	1					
ANR	1956572	ReturnStatement	return - 1 ;	144:3:3423:3432	1956542	0	True				
ANR	1956573	UnaryOperationExpression	- 1		1956542	0					
ANR	1956574	UnaryOperator	-		1956542	0					
ANR	1956575	PrimaryExpression	1		1956542	1					
ANR	1956576	IfStatement	if ( ! p -> range_valid )		1956542	1					
ANR	1956577	Condition	! p -> range_valid	146:13:3451:3466	1956542	0	True				
ANR	1956578	UnaryOperationExpression	! p -> range_valid		1956542	0					
ANR	1956579	UnaryOperator	!		1956542	0					
ANR	1956580	PtrMemberAccess	p -> range_valid		1956542	1					
ANR	1956581	Identifier	p		1956542	0					
ANR	1956582	Identifier	range_valid		1956542	1					
ANR	1956583	CompoundStatement		11:31:170:170	1956542	1					
ANR	1956584	ExpressionStatement	* min = INT_MIN	147:12:3483:3497	1956542	0	True				
ANR	1956585	AssignmentExpression	* min = INT_MIN		1956542	0		=			
ANR	1956586	UnaryOperationExpression	* min		1956542	0					
ANR	1956587	UnaryOperator	*		1956542	0					
ANR	1956588	Identifier	min		1956542	1					
ANR	1956589	Identifier	INT_MIN		1956542	1					
ANR	1956590	ExpressionStatement	* max = INT_MAX	148:12:3511:3525	1956542	1	True				
ANR	1956591	AssignmentExpression	* max = INT_MAX		1956542	0		=			
ANR	1956592	UnaryOperationExpression	* max		1956542	0					
ANR	1956593	UnaryOperator	*		1956542	0					
ANR	1956594	Identifier	max		1956542	1					
ANR	1956595	Identifier	INT_MAX		1956542	1					
ANR	1956596	ElseStatement	else		1956542	0					
ANR	1956597	CompoundStatement		14:15:243:243	1956542	0					
ANR	1956598	Statement	*	150:6:3550:3550	1956542	0	True				
ANR	1956599	Statement	min	150:7:3551:3553	1956542	1	True				
ANR	1956600	Statement	=	150:11:3555:3555	1956542	2	True				
ANR	1956601	Statement	reinterpret_cast	150:13:3557:3572	1956542	3	True				
ANR	1956602	Statement	<	150:29:3573:3573	1956542	4	True				
ANR	1956603	Statement	const	150:30:3574:3578	1956542	5	True				
ANR	1956604	Statement	param_info_PARAM_TYPE_INT_ranged	150:36:3580:3611	1956542	6	True				
ANR	1956605	Statement	*	150:68:3612:3612	1956542	7	True				
ANR	1956606	Statement	>	150:69:3613:3613	1956542	8	True				
ANR	1956607	ExpressionStatement	( p ) -> int_min	150:70:3614:3626	1956542	9	True				
ANR	1956608	PtrMemberAccess	( p ) -> int_min		1956542	0					
ANR	1956609	Identifier	p		1956542	0					
ANR	1956610	Identifier	int_min		1956542	1					
ANR	1956611	Statement	*	151:6:3634:3634	1956542	10	True				
ANR	1956612	Statement	max	151:7:3635:3637	1956542	11	True				
ANR	1956613	Statement	=	151:11:3639:3639	1956542	12	True				
ANR	1956614	Statement	reinterpret_cast	151:13:3641:3656	1956542	13	True				
ANR	1956615	Statement	<	151:29:3657:3657	1956542	14	True				
ANR	1956616	Statement	const	151:30:3658:3662	1956542	15	True				
ANR	1956617	Statement	param_info_PARAM_TYPE_INT_ranged	151:36:3664:3695	1956542	16	True				
ANR	1956618	Statement	*	151:68:3696:3696	1956542	17	True				
ANR	1956619	Statement	>	151:69:3697:3697	1956542	18	True				
ANR	1956620	ExpressionStatement	( p ) -> int_max	151:70:3698:3710	1956542	19	True				
ANR	1956621	PtrMemberAccess	( p ) -> int_max		1956542	0					
ANR	1956622	Identifier	p		1956542	0					
ANR	1956623	Identifier	int_max		1956542	1					
ANR	1956624	ElseStatement	else		1956542	0					
ANR	1956625	CompoundStatement		18:8:431:431	1956542	0					
ANR	1956626	ReturnStatement	return - 1 ;	156:2:3872:3881	1956542	0	True				
ANR	1956627	UnaryOperationExpression	- 1		1956542	0					
ANR	1956628	UnaryOperator	-		1956542	0					
ANR	1956629	PrimaryExpression	1		1956542	1					
ANR	1956630	ReturnStatement	return 0 ;	158:1:3887:3895	1956542	3	True				
ANR	1956631	PrimaryExpression	0		1956542	0					
ANR	1956632	ReturnType	int		1956542	1					
ANR	1956633	Identifier	param_range_integer		1956542	2					
ANR	1956634	ParameterList	"const char * param , int * min , int * max"		1956542	3					
ANR	1956635	Parameter	const char * param	136:20:3259:3275	1956542	0	True				
ANR	1956636	ParameterType	const char *		1956542	0					
ANR	1956637	Identifier	param		1956542	1					
ANR	1956638	Parameter	int * min	136:39:3278:3285	1956542	1	True				
ANR	1956639	ParameterType	int *		1956542	0					
ANR	1956640	Identifier	min		1956542	1					
ANR	1956641	Parameter	int * max	136:49:3288:3295	1956542	2	True				
ANR	1956642	ParameterType	int *		1956542	0					
ANR	1956643	Identifier	max		1956542	1					
ANR	1956644	CFGEntryNode	ENTRY		1956542		True				
ANR	1956645	CFGExitNode	EXIT		1956542		True				
ANR	1956646	Symbol	max		1956542						
ANR	1956647	Symbol	p -> type		1956542						
ANR	1956648	Symbol	PARAM_TYPE_INT		1956542						
ANR	1956649	Symbol	p -> range_valid		1956542						
ANR	1956650	Symbol	INT_MIN		1956542						
ANR	1956651	Symbol	* max		1956542						
ANR	1956652	Symbol	p		1956542						
ANR	1956653	Symbol	min		1956542						
ANR	1956654	Symbol	param		1956542						
ANR	1956655	Symbol	param_info_hash_lookup		1956542						
ANR	1956656	Symbol	INT_MAX		1956542						
ANR	1956657	Symbol	* p		1956542						
ANR	1956658	Symbol	* min		1956542						
ANR	1956659	Symbol	param_info		1956542						
ANR	1956660	Function	param_range_double	161:0:3900:4573							
ANR	1956661	FunctionDef	"param_range_double (const char * param , double * min , double * max)"		1956660	0					
ANR	1956662	CompoundStatement		162:64:3968:4573	1956660	0					
ANR	1956663	IdentifierDeclStatement	const param_info_t * p ;	164:1:3972:3993	1956660	0	True				
ANR	1956664	IdentifierDecl	* p		1956660	0					
ANR	1956665	IdentifierDeclType	const param_info_t *		1956660	0					
ANR	1956666	Identifier	p		1956660	1					
ANR	1956667	ExpressionStatement	"p = param_info_hash_lookup ( param_info , param )"	166:1:3997:4042	1956660	1	True				
ANR	1956668	AssignmentExpression	"p = param_info_hash_lookup ( param_info , param )"		1956660	0		=			
ANR	1956669	Identifier	p		1956660	0					
ANR	1956670	CallExpression	"param_info_hash_lookup ( param_info , param )"		1956660	1					
ANR	1956671	Callee	param_info_hash_lookup		1956660	0					
ANR	1956672	Identifier	param_info_hash_lookup		1956660	0					
ANR	1956673	ArgumentList	param_info		1956660	1					
ANR	1956674	Argument	param_info		1956660	0					
ANR	1956675	Identifier	param_info		1956660	0					
ANR	1956676	Argument	param		1956660	1					
ANR	1956677	Identifier	param		1956660	0					
ANR	1956678	IfStatement	if ( p )		1956660	2					
ANR	1956679	Condition	p	168:5:4050:4050	1956660	0	True				
ANR	1956680	Identifier	p		1956660	0					
ANR	1956681	CompoundStatement		7:8:84:84	1956660	1					
ANR	1956682	IfStatement	if ( p -> type != PARAM_TYPE_DOUBLE )		1956660	0					
ANR	1956683	Condition	p -> type != PARAM_TYPE_DOUBLE	169:5:4060:4087	1956660	0	True				
ANR	1956684	EqualityExpression	p -> type != PARAM_TYPE_DOUBLE		1956660	0		!=			
ANR	1956685	PtrMemberAccess	p -> type		1956660	0					
ANR	1956686	Identifier	p		1956660	0					
ANR	1956687	Identifier	type		1956660	1					
ANR	1956688	Identifier	PARAM_TYPE_DOUBLE		1956660	1					
ANR	1956689	CompoundStatement		8:35:121:121	1956660	1					
ANR	1956690	ReturnStatement	return - 1 ;	170:3:4095:4104	1956660	0	True				
ANR	1956691	UnaryOperationExpression	- 1		1956660	0					
ANR	1956692	UnaryOperator	-		1956660	0					
ANR	1956693	PrimaryExpression	1		1956660	1					
ANR	1956694	IfStatement	if ( ! p -> range_valid )		1956660	1					
ANR	1956695	Condition	! p -> range_valid	172:13:4123:4138	1956660	0	True				
ANR	1956696	UnaryOperationExpression	! p -> range_valid		1956660	0					
ANR	1956697	UnaryOperator	!		1956660	0					
ANR	1956698	PtrMemberAccess	p -> range_valid		1956660	1					
ANR	1956699	Identifier	p		1956660	0					
ANR	1956700	Identifier	range_valid		1956660	1					
ANR	1956701	CompoundStatement		11:31:172:172	1956660	1					
ANR	1956702	ExpressionStatement	* min = DBL_MIN	173:12:4155:4169	1956660	0	True				
ANR	1956703	AssignmentExpression	* min = DBL_MIN		1956660	0		=			
ANR	1956704	UnaryOperationExpression	* min		1956660	0					
ANR	1956705	UnaryOperator	*		1956660	0					
ANR	1956706	Identifier	min		1956660	1					
ANR	1956707	Identifier	DBL_MIN		1956660	1					
ANR	1956708	ExpressionStatement	* max = DBL_MAX	174:12:4183:4197	1956660	1	True				
ANR	1956709	AssignmentExpression	* max = DBL_MAX		1956660	0		=			
ANR	1956710	UnaryOperationExpression	* max		1956660	0					
ANR	1956711	UnaryOperator	*		1956660	0					
ANR	1956712	Identifier	max		1956660	1					
ANR	1956713	Identifier	DBL_MAX		1956660	1					
ANR	1956714	ElseStatement	else		1956660	0					
ANR	1956715	CompoundStatement		14:15:245:245	1956660	0					
ANR	1956716	Statement	*	176:6:4222:4222	1956660	0	True				
ANR	1956717	Statement	min	176:7:4223:4225	1956660	1	True				
ANR	1956718	Statement	=	176:11:4227:4227	1956660	2	True				
ANR	1956719	Statement	reinterpret_cast	176:13:4229:4244	1956660	3	True				
ANR	1956720	Statement	<	176:29:4245:4245	1956660	4	True				
ANR	1956721	Statement	const	176:30:4246:4250	1956660	5	True				
ANR	1956722	Statement	param_info_PARAM_TYPE_DOUBLE_ranged	176:36:4252:4286	1956660	6	True				
ANR	1956723	Statement	*	176:71:4287:4287	1956660	7	True				
ANR	1956724	Statement	>	176:72:4288:4288	1956660	8	True				
ANR	1956725	ExpressionStatement	( p ) -> dbl_min	176:73:4289:4301	1956660	9	True				
ANR	1956726	PtrMemberAccess	( p ) -> dbl_min		1956660	0					
ANR	1956727	Identifier	p		1956660	0					
ANR	1956728	Identifier	dbl_min		1956660	1					
ANR	1956729	Statement	*	177:6:4309:4309	1956660	10	True				
ANR	1956730	Statement	max	177:7:4310:4312	1956660	11	True				
ANR	1956731	Statement	=	177:11:4314:4314	1956660	12	True				
ANR	1956732	Statement	reinterpret_cast	177:13:4316:4331	1956660	13	True				
ANR	1956733	Statement	<	177:29:4332:4332	1956660	14	True				
ANR	1956734	Statement	const	177:30:4333:4337	1956660	15	True				
ANR	1956735	Statement	param_info_PARAM_TYPE_DOUBLE_ranged	177:36:4339:4373	1956660	16	True				
ANR	1956736	Statement	*	177:71:4374:4374	1956660	17	True				
ANR	1956737	Statement	>	177:72:4375:4375	1956660	18	True				
ANR	1956738	ExpressionStatement	( p ) -> dbl_max	177:73:4376:4388	1956660	19	True				
ANR	1956739	PtrMemberAccess	( p ) -> dbl_max		1956660	0					
ANR	1956740	Identifier	p		1956660	0					
ANR	1956741	Identifier	dbl_max		1956660	1					
ANR	1956742	ElseStatement	else		1956660	0					
ANR	1956743	CompoundStatement		18:8:439:439	1956660	0					
ANR	1956744	ReturnStatement	return - 1 ;	182:2:4548:4557	1956660	0	True				
ANR	1956745	UnaryOperationExpression	- 1		1956660	0					
ANR	1956746	UnaryOperator	-		1956660	0					
ANR	1956747	PrimaryExpression	1		1956660	1					
ANR	1956748	ReturnStatement	return 0 ;	184:1:4563:4571	1956660	3	True				
ANR	1956749	PrimaryExpression	0		1956660	0					
ANR	1956750	ReturnType	int		1956660	1					
ANR	1956751	Identifier	param_range_double		1956660	2					
ANR	1956752	ParameterList	"const char * param , double * min , double * max"		1956660	3					
ANR	1956753	Parameter	const char * param	162:19:3923:3939	1956660	0	True				
ANR	1956754	ParameterType	const char *		1956660	0					
ANR	1956755	Identifier	param		1956660	1					
ANR	1956756	Parameter	double * min	162:38:3942:3952	1956660	1	True				
ANR	1956757	ParameterType	double *		1956660	0					
ANR	1956758	Identifier	min		1956660	1					
ANR	1956759	Parameter	double * max	162:51:3955:3965	1956660	2	True				
ANR	1956760	ParameterType	double *		1956660	0					
ANR	1956761	Identifier	max		1956660	1					
ANR	1956762	CFGEntryNode	ENTRY		1956660		True				
ANR	1956763	CFGExitNode	EXIT		1956660		True				
ANR	1956764	Symbol	DBL_MIN		1956660						
ANR	1956765	Symbol	max		1956660						
ANR	1956766	Symbol	PARAM_TYPE_DOUBLE		1956660						
ANR	1956767	Symbol	p -> type		1956660						
ANR	1956768	Symbol	p -> range_valid		1956660						
ANR	1956769	Symbol	* max		1956660						
ANR	1956770	Symbol	p		1956660						
ANR	1956771	Symbol	DBL_MAX		1956660						
ANR	1956772	Symbol	min		1956660						
ANR	1956773	Symbol	param		1956660						
ANR	1956774	Symbol	param_info_hash_lookup		1956660						
ANR	1956775	Symbol	* p		1956660						
ANR	1956776	Symbol	* min		1956660						
ANR	1956777	Symbol	param_info		1956660						
ANR	1956778	Function	compute_range	189:0:4636:5735							
ANR	1956779	FunctionDef	"compute_range (const char * range , char * * range_start , char * * range_end)"		1956778	0					
ANR	1956780	CompoundStatement		190:71:4719:5735	1956778	0					
ANR	1956781	IdentifierDeclStatement	"const char * c1 = NULL , * c2 = NULL , * c3 = NULL ;"	192:1:4723:4771	1956778	0	True				
ANR	1956782	IdentifierDecl	* c1 = NULL		1956778	0					
ANR	1956783	IdentifierDeclType	const char *		1956778	0					
ANR	1956784	Identifier	c1		1956778	1					
ANR	1956785	AssignmentExpression	* c1 = NULL		1956778	2		=			
ANR	1956786	Identifier	NULL		1956778	0					
ANR	1956787	Identifier	NULL		1956778	1					
ANR	1956788	IdentifierDecl	* c2 = NULL		1956778	1					
ANR	1956789	IdentifierDeclType	const char *		1956778	0					
ANR	1956790	Identifier	c2		1956778	1					
ANR	1956791	AssignmentExpression	* c2 = NULL		1956778	2		=			
ANR	1956792	Identifier	NULL		1956778	0					
ANR	1956793	Identifier	NULL		1956778	1					
ANR	1956794	IdentifierDecl	* c3 = NULL		1956778	2					
ANR	1956795	IdentifierDeclType	const char *		1956778	0					
ANR	1956796	Identifier	c3		1956778	1					
ANR	1956797	AssignmentExpression	* c3 = NULL		1956778	2		=			
ANR	1956798	Identifier	NULL		1956778	0					
ANR	1956799	Identifier	NULL		1956778	1					
ANR	1956800	ForStatement	for ( c1 = range ; isspace ( * c1 ) ; c1 ++ )		1956778	1					
ANR	1956801	ForInit	c1 = range ;	194:6:4780:4788	1956778	0	True				
ANR	1956802	AssignmentExpression	c1 = range		1956778	0		=			
ANR	1956803	Identifier	c1		1956778	0					
ANR	1956804	Identifier	range		1956778	1					
ANR	1956805	Condition	isspace ( * c1 )	194:16:4790:4801	1956778	1	True				
ANR	1956806	CallExpression	isspace ( * c1 )		1956778	0					
ANR	1956807	Callee	isspace		1956778	0					
ANR	1956808	Identifier	isspace		1956778	0					
ANR	1956809	ArgumentList	* c1		1956778	1					
ANR	1956810	Argument	* c1		1956778	0					
ANR	1956811	UnaryOperationExpression	* c1		1956778	0					
ANR	1956812	UnaryOperator	*		1956778	0					
ANR	1956813	Identifier	c1		1956778	1					
ANR	1956814	PostIncDecOperationExpression	c1 ++	194:30:4804:4807	1956778	2	True				
ANR	1956815	Identifier	c1		1956778	0					
ANR	1956816	IncDec	++		1956778	1					
ANR	1956817	ExpressionStatement		194:35:4809:4809	1956778	3	True				
ANR	1956818	ForStatement	"for ( c2 = c1 ; * c2 && * c2 != ',' ; c2 ++ )"		1956778	2					
ANR	1956819	ForInit	c2 = c1 ;	196:6:4847:4852	1956778	0	True				
ANR	1956820	AssignmentExpression	c2 = c1		1956778	0		=			
ANR	1956821	Identifier	c2		1956778	0					
ANR	1956822	Identifier	c1		1956778	1					
ANR	1956823	Condition	"* c2 && * c2 != ','"	196:13:4854:4868	1956778	1	True				
ANR	1956824	AndExpression	"* c2 && * c2 != ','"		1956778	0		&&			
ANR	1956825	UnaryOperationExpression	* c2		1956778	0					
ANR	1956826	UnaryOperator	*		1956778	0					
ANR	1956827	Identifier	c2		1956778	1					
ANR	1956828	EqualityExpression	"* c2 != ','"		1956778	1		!=			
ANR	1956829	UnaryOperationExpression	* c2		1956778	0					
ANR	1956830	UnaryOperator	*		1956778	0					
ANR	1956831	Identifier	c2		1956778	1					
ANR	1956832	PrimaryExpression	"','"		1956778	1					
ANR	1956833	PostIncDecOperationExpression	c2 ++	196:30:4871:4874	1956778	2	True				
ANR	1956834	Identifier	c2		1956778	0					
ANR	1956835	IncDec	++		1956778	1					
ANR	1956836	ExpressionStatement		196:35:4876:4876	1956778	3	True				
ANR	1956837	IfStatement	"if ( c1 == c2 || ( strcmp ( c1 , "".*"" ) == 0 ) )"		1956778	3					
ANR	1956838	Condition	"c1 == c2 || ( strcmp ( c1 , "".*"" ) == 0 )"	199:5:5012:5044	1956778	0	True				
ANR	1956839	OrExpression	"c1 == c2 || ( strcmp ( c1 , "".*"" ) == 0 )"		1956778	0		||			
ANR	1956840	EqualityExpression	c1 == c2		1956778	0		==			
ANR	1956841	Identifier	c1		1956778	0					
ANR	1956842	Identifier	c2		1956778	1					
ANR	1956843	EqualityExpression	"strcmp ( c1 , "".*"" ) == 0"		1956778	1		==			
ANR	1956844	CallExpression	"strcmp ( c1 , "".*"" )"		1956778	0					
ANR	1956845	Callee	strcmp		1956778	0					
ANR	1956846	Identifier	strcmp		1956778	0					
ANR	1956847	ArgumentList	c1		1956778	1					
ANR	1956848	Argument	c1		1956778	0					
ANR	1956849	Identifier	c1		1956778	0					
ANR	1956850	Argument	""".*"""		1956778	1					
ANR	1956851	PrimaryExpression	""".*"""		1956778	0					
ANR	1956852	PrimaryExpression	0		1956778	1					
ANR	1956853	CompoundStatement		10:40:327:327	1956778	1					
ANR	1956854	ExpressionStatement	* range_start = ( char * ) malloc ( sizeof ( char ) )	200:2:5051:5094	1956778	0	True				
ANR	1956855	AssignmentExpression	* range_start = ( char * ) malloc ( sizeof ( char ) )		1956778	0		=			
ANR	1956856	UnaryOperationExpression	* range_start		1956778	0					
ANR	1956857	UnaryOperator	*		1956778	0					
ANR	1956858	Identifier	range_start		1956778	1					
ANR	1956859	CastExpression	( char * ) malloc ( sizeof ( char ) )		1956778	1					
ANR	1956860	CastTarget	char *		1956778	0					
ANR	1956861	CallExpression	malloc ( sizeof ( char ) )		1956778	1					
ANR	1956862	Callee	malloc		1956778	0					
ANR	1956863	Identifier	malloc		1956778	0					
ANR	1956864	ArgumentList	sizeof ( char )		1956778	1					
ANR	1956865	Argument	sizeof ( char )		1956778	0					
ANR	1956866	SizeofExpression	sizeof ( char )		1956778	0					
ANR	1956867	Sizeof	sizeof		1956778	0					
ANR	1956868	SizeofOperand	char		1956778	1					
ANR	1956869	ExpressionStatement	* * range_start = '\\0'	201:2:5098:5118	1956778	1	True				
ANR	1956870	AssignmentExpression	* * range_start = '\\0'		1956778	0		=			
ANR	1956871	UnaryOperationExpression	* * range_start		1956778	0					
ANR	1956872	UnaryOperator	*		1956778	0					
ANR	1956873	UnaryOperationExpression	* range_start		1956778	1					
ANR	1956874	UnaryOperator	*		1956778	0					
ANR	1956875	Identifier	range_start		1956778	1					
ANR	1956876	PrimaryExpression	'\\0'		1956778	1					
ANR	1956877	ExpressionStatement	* range_end = ( char * ) malloc ( sizeof ( char ) )	202:2:5122:5162	1956778	2	True				
ANR	1956878	AssignmentExpression	* range_end = ( char * ) malloc ( sizeof ( char ) )		1956778	0		=			
ANR	1956879	UnaryOperationExpression	* range_end		1956778	0					
ANR	1956880	UnaryOperator	*		1956778	0					
ANR	1956881	Identifier	range_end		1956778	1					
ANR	1956882	CastExpression	( char * ) malloc ( sizeof ( char ) )		1956778	1					
ANR	1956883	CastTarget	char *		1956778	0					
ANR	1956884	CallExpression	malloc ( sizeof ( char ) )		1956778	1					
ANR	1956885	Callee	malloc		1956778	0					
ANR	1956886	Identifier	malloc		1956778	0					
ANR	1956887	ArgumentList	sizeof ( char )		1956778	1					
ANR	1956888	Argument	sizeof ( char )		1956778	0					
ANR	1956889	SizeofExpression	sizeof ( char )		1956778	0					
ANR	1956890	Sizeof	sizeof		1956778	0					
ANR	1956891	SizeofOperand	char		1956778	1					
ANR	1956892	ExpressionStatement	* * range_end = '\\0'	203:2:5166:5184	1956778	3	True				
ANR	1956893	AssignmentExpression	* * range_end = '\\0'		1956778	0		=			
ANR	1956894	UnaryOperationExpression	* * range_end		1956778	0					
ANR	1956895	UnaryOperator	*		1956778	0					
ANR	1956896	UnaryOperationExpression	* range_end		1956778	1					
ANR	1956897	UnaryOperator	*		1956778	0					
ANR	1956898	Identifier	range_end		1956778	1					
ANR	1956899	PrimaryExpression	'\\0'		1956778	1					
ANR	1956900	ElseStatement	else		1956778	0					
ANR	1956901	CompoundStatement		15:8:474:474	1956778	0					
ANR	1956902	ForStatement	for ( c3 = c2 - 1 ; isspace ( * c3 ) ; c3 -- )		1956778	0					
ANR	1956903	ForInit	c3 = c2 - 1 ;	207:7:5225:5232	1956778	0	True				
ANR	1956904	AssignmentExpression	c3 = c2 - 1		1956778	0		=			
ANR	1956905	Identifier	c3		1956778	0					
ANR	1956906	AdditiveExpression	c2 - 1		1956778	1		-			
ANR	1956907	Identifier	c2		1956778	0					
ANR	1956908	PrimaryExpression	1		1956778	1					
ANR	1956909	Condition	isspace ( * c3 )	207:16:5234:5245	1956778	1	True				
ANR	1956910	CallExpression	isspace ( * c3 )		1956778	0					
ANR	1956911	Callee	isspace		1956778	0					
ANR	1956912	Identifier	isspace		1956778	0					
ANR	1956913	ArgumentList	* c3		1956778	1					
ANR	1956914	Argument	* c3		1956778	0					
ANR	1956915	UnaryOperationExpression	* c3		1956778	0					
ANR	1956916	UnaryOperator	*		1956778	0					
ANR	1956917	Identifier	c3		1956778	1					
ANR	1956918	PostIncDecOperationExpression	c3 --	207:30:5248:5251	1956778	2	True				
ANR	1956919	Identifier	c3		1956778	0					
ANR	1956920	IncDec	--		1956778	1					
ANR	1956921	ExpressionStatement		207:35:5253:5253	1956778	3	True				
ANR	1956922	ExpressionStatement	"* range_start = ( char * ) calloc ( ( c3 - c1 + 2 ) , sizeof ( char ) )"	208:2:5294:5348	1956778	1	True				
ANR	1956923	AssignmentExpression	"* range_start = ( char * ) calloc ( ( c3 - c1 + 2 ) , sizeof ( char ) )"		1956778	0		=			
ANR	1956924	UnaryOperationExpression	* range_start		1956778	0					
ANR	1956925	UnaryOperator	*		1956778	0					
ANR	1956926	Identifier	range_start		1956778	1					
ANR	1956927	CastExpression	"( char * ) calloc ( ( c3 - c1 + 2 ) , sizeof ( char ) )"		1956778	1					
ANR	1956928	CastTarget	char *		1956778	0					
ANR	1956929	CallExpression	"calloc ( ( c3 - c1 + 2 ) , sizeof ( char ) )"		1956778	1					
ANR	1956930	Callee	calloc		1956778	0					
ANR	1956931	Identifier	calloc		1956778	0					
ANR	1956932	ArgumentList	c3 - c1 + 2		1956778	1					
ANR	1956933	Argument	c3 - c1 + 2		1956778	0					
ANR	1956934	AdditiveExpression	c3 - c1 + 2		1956778	0		-			
ANR	1956935	Identifier	c3		1956778	0					
ANR	1956936	AdditiveExpression	c1 + 2		1956778	1		+			
ANR	1956937	Identifier	c1		1956778	0					
ANR	1956938	PrimaryExpression	2		1956778	1					
ANR	1956939	Argument	sizeof ( char )		1956778	1					
ANR	1956940	SizeofExpression	sizeof ( char )		1956778	0					
ANR	1956941	Sizeof	sizeof		1956778	0					
ANR	1956942	SizeofOperand	char		1956778	1					
ANR	1956943	ExpressionStatement	"strncat ( * range_start , c1 , c3 - c1 + 1 )"	209:2:5352:5386	1956778	2	True				
ANR	1956944	CallExpression	"strncat ( * range_start , c1 , c3 - c1 + 1 )"		1956778	0					
ANR	1956945	Callee	strncat		1956778	0					
ANR	1956946	Identifier	strncat		1956778	0					
ANR	1956947	ArgumentList	* range_start		1956778	1					
ANR	1956948	Argument	* range_start		1956778	0					
ANR	1956949	UnaryOperationExpression	* range_start		1956778	0					
ANR	1956950	UnaryOperator	*		1956778	0					
ANR	1956951	Identifier	range_start		1956778	1					
ANR	1956952	Argument	c1		1956778	1					
ANR	1956953	Identifier	c1		1956778	0					
ANR	1956954	Argument	c3 - c1 + 1		1956778	2					
ANR	1956955	AdditiveExpression	c3 - c1 + 1		1956778	0		-			
ANR	1956956	Identifier	c3		1956778	0					
ANR	1956957	AdditiveExpression	c1 + 1		1956778	1		+			
ANR	1956958	Identifier	c1		1956778	0					
ANR	1956959	PrimaryExpression	1		1956778	1					
ANR	1956960	ForStatement	for ( c1 = c2 ; * c1 ; c1 ++ )		1956778	3					
ANR	1956961	ForInit	c1 = c2 ;	212:7:5415:5420	1956778	0	True				
ANR	1956962	AssignmentExpression	c1 = c2		1956778	0		=			
ANR	1956963	Identifier	c1		1956778	0					
ANR	1956964	Identifier	c2		1956778	1					
ANR	1956965	Condition	* c1	212:14:5422:5424	1956778	1	True				
ANR	1956966	UnaryOperationExpression	* c1		1956778	0					
ANR	1956967	UnaryOperator	*		1956778	0					
ANR	1956968	Identifier	c1		1956778	1					
ANR	1956969	PostIncDecOperationExpression	c1 ++	212:19:5427:5430	1956778	2	True				
ANR	1956970	Identifier	c1		1956778	0					
ANR	1956971	IncDec	++		1956778	1					
ANR	1956972	ExpressionStatement		212:24:5432:5432	1956778	3	True				
ANR	1956973	ForStatement	for ( c3 = c1 - 1 ; isspace ( * c3 ) ; c3 -- )		1956778	4					
ANR	1956974	ForInit	c3 = c1 - 1 ;	213:7:5502:5509	1956778	0	True				
ANR	1956975	AssignmentExpression	c3 = c1 - 1		1956778	0		=			
ANR	1956976	Identifier	c3		1956778	0					
ANR	1956977	AdditiveExpression	c1 - 1		1956778	1		-			
ANR	1956978	Identifier	c1		1956778	0					
ANR	1956979	PrimaryExpression	1		1956778	1					
ANR	1956980	Condition	isspace ( * c3 )	213:16:5511:5522	1956778	1	True				
ANR	1956981	CallExpression	isspace ( * c3 )		1956778	0					
ANR	1956982	Callee	isspace		1956778	0					
ANR	1956983	Identifier	isspace		1956778	0					
ANR	1956984	ArgumentList	* c3		1956778	1					
ANR	1956985	Argument	* c3		1956778	0					
ANR	1956986	UnaryOperationExpression	* c3		1956778	0					
ANR	1956987	UnaryOperator	*		1956778	0					
ANR	1956988	Identifier	c3		1956778	1					
ANR	1956989	PostIncDecOperationExpression	c3 --	213:30:5525:5528	1956778	2	True				
ANR	1956990	Identifier	c3		1956778	0					
ANR	1956991	IncDec	--		1956778	1					
ANR	1956992	ExpressionStatement		213:35:5530:5530	1956778	3	True				
ANR	1956993	ForStatement	for ( c2 ++ ; c2 <= c1 && isspace ( * c2 ) ; c2 ++ )		1956778	5					
ANR	1956994	ForInit	c2 ++ ;	214:7:5576:5580	1956778	0	True				
ANR	1956995	PostIncDecOperationExpression	c2 ++		1956778	0					
ANR	1956996	Identifier	c2		1956778	0					
ANR	1956997	IncDec	++		1956778	1					
ANR	1956998	Condition	c2 <= c1 && isspace ( * c2 )	214:13:5582:5603	1956778	1	True				
ANR	1956999	AndExpression	c2 <= c1 && isspace ( * c2 )		1956778	0		&&			
ANR	1957000	RelationalExpression	c2 <= c1		1956778	0		<=			
ANR	1957001	Identifier	c2		1956778	0					
ANR	1957002	Identifier	c1		1956778	1					
ANR	1957003	CallExpression	isspace ( * c2 )		1956778	1					
ANR	1957004	Callee	isspace		1956778	0					
ANR	1957005	Identifier	isspace		1956778	0					
ANR	1957006	ArgumentList	* c2		1956778	1					
ANR	1957007	Argument	* c2		1956778	0					
ANR	1957008	UnaryOperationExpression	* c2		1956778	0					
ANR	1957009	UnaryOperator	*		1956778	0					
ANR	1957010	Identifier	c2		1956778	1					
ANR	1957011	PostIncDecOperationExpression	c2 ++	214:37:5606:5609	1956778	2	True				
ANR	1957012	Identifier	c2		1956778	0					
ANR	1957013	IncDec	++		1956778	1					
ANR	1957014	ExpressionStatement		214:42:5611:5611	1956778	3	True				
ANR	1957015	ExpressionStatement	"* range_end = ( char * ) calloc ( ( c3 - c2 + 2 ) , sizeof ( char ) )"	215:2:5641:5693	1956778	6	True				
ANR	1957016	AssignmentExpression	"* range_end = ( char * ) calloc ( ( c3 - c2 + 2 ) , sizeof ( char ) )"		1956778	0		=			
ANR	1957017	UnaryOperationExpression	* range_end		1956778	0					
ANR	1957018	UnaryOperator	*		1956778	0					
ANR	1957019	Identifier	range_end		1956778	1					
ANR	1957020	CastExpression	"( char * ) calloc ( ( c3 - c2 + 2 ) , sizeof ( char ) )"		1956778	1					
ANR	1957021	CastTarget	char *		1956778	0					
ANR	1957022	CallExpression	"calloc ( ( c3 - c2 + 2 ) , sizeof ( char ) )"		1956778	1					
ANR	1957023	Callee	calloc		1956778	0					
ANR	1957024	Identifier	calloc		1956778	0					
ANR	1957025	ArgumentList	c3 - c2 + 2		1956778	1					
ANR	1957026	Argument	c3 - c2 + 2		1956778	0					
ANR	1957027	AdditiveExpression	c3 - c2 + 2		1956778	0		-			
ANR	1957028	Identifier	c3		1956778	0					
ANR	1957029	AdditiveExpression	c2 + 2		1956778	1		+			
ANR	1957030	Identifier	c2		1956778	0					
ANR	1957031	PrimaryExpression	2		1956778	1					
ANR	1957032	Argument	sizeof ( char )		1956778	1					
ANR	1957033	SizeofExpression	sizeof ( char )		1956778	0					
ANR	1957034	Sizeof	sizeof		1956778	0					
ANR	1957035	SizeofOperand	char		1956778	1					
ANR	1957036	ExpressionStatement	"strncat ( * range_end , c2 , c3 - c2 + 1 )"	216:2:5697:5729	1956778	7	True				
ANR	1957037	CallExpression	"strncat ( * range_end , c2 , c3 - c2 + 1 )"		1956778	0					
ANR	1957038	Callee	strncat		1956778	0					
ANR	1957039	Identifier	strncat		1956778	0					
ANR	1957040	ArgumentList	* range_end		1956778	1					
ANR	1957041	Argument	* range_end		1956778	0					
ANR	1957042	UnaryOperationExpression	* range_end		1956778	0					
ANR	1957043	UnaryOperator	*		1956778	0					
ANR	1957044	Identifier	range_end		1956778	1					
ANR	1957045	Argument	c2		1956778	1					
ANR	1957046	Identifier	c2		1956778	0					
ANR	1957047	Argument	c3 - c2 + 1		1956778	2					
ANR	1957048	AdditiveExpression	c3 - c2 + 1		1956778	0		-			
ANR	1957049	Identifier	c3		1956778	0					
ANR	1957050	AdditiveExpression	c2 + 1		1956778	1		+			
ANR	1957051	Identifier	c2		1956778	0					
ANR	1957052	PrimaryExpression	1		1956778	1					
ANR	1957053	ReturnType	static void		1956778	1					
ANR	1957054	Identifier	compute_range		1956778	2					
ANR	1957055	ParameterList	"const char * range , char * * range_start , char * * range_end"		1956778	3					
ANR	1957056	Parameter	const char * range	190:14:4662:4678	1956778	0	True				
ANR	1957057	ParameterType	const char *		1956778	0					
ANR	1957058	Identifier	range		1956778	1					
ANR	1957059	Parameter	char * * range_start	190:33:4681:4698	1956778	1	True				
ANR	1957060	ParameterType	char * *		1956778	0					
ANR	1957061	Identifier	range_start		1956778	1					
ANR	1957062	Parameter	char * * range_end	190:53:4701:4716	1956778	2	True				
ANR	1957063	ParameterType	char * *		1956778	0					
ANR	1957064	Identifier	range_end		1956778	1					
ANR	1957065	CFGEntryNode	ENTRY		1956778		True				
ANR	1957066	CFGExitNode	EXIT		1956778		True				
ANR	1957067	Symbol	strcmp		1956778						
ANR	1957068	Symbol	range_end		1956778						
ANR	1957069	Symbol	malloc		1956778						
ANR	1957070	Symbol	* * range_start		1956778						
ANR	1957071	Symbol	NULL		1956778						
ANR	1957072	Symbol	range_start		1956778						
ANR	1957073	Symbol	isspace		1956778						
ANR	1957074	Symbol	* range_end		1956778						
ANR	1957075	Symbol	range		1956778						
ANR	1957076	Symbol	calloc		1956778						
ANR	1957077	Symbol	c1		1956778						
ANR	1957078	Symbol	c2		1956778						
ANR	1957079	Symbol	c3		1956778						
ANR	1957080	Symbol	* * range_end		1956778						
ANR	1957081	Symbol	* c3		1956778						
ANR	1957082	Symbol	* c2		1956778						
ANR	1957083	Symbol	* range_start		1956778						
ANR	1957084	Symbol	* c1		1956778						
ANR	1957085	Function	validate_integer_range_lower_bound	221:0:5738:6269							
ANR	1957086	FunctionDef	"validate_integer_range_lower_bound (const char * range_start , int * min)"		1957085	0					
ANR	1957087	CompoundStatement		222:70:5819:6269	1957085	0					
ANR	1957088	IdentifierDeclStatement	char * end_ptr ;	224:1:5823:5836	1957085	0	True				
ANR	1957089	IdentifierDecl	* end_ptr		1957085	0					
ANR	1957090	IdentifierDeclType	char *		1957085	0					
ANR	1957091	Identifier	end_ptr		1957085	1					
ANR	1957092	IdentifierDeclStatement	int valid ;	225:1:5839:5848	1957085	1	True				
ANR	1957093	IdentifierDecl	valid		1957085	0					
ANR	1957094	IdentifierDeclType	int		1957085	0					
ANR	1957095	Identifier	valid		1957085	1					
ANR	1957096	IfStatement	if ( * range_start )		1957085	2					
ANR	1957097	Condition	* range_start	227:5:5856:5867	1957085	0	True				
ANR	1957098	UnaryOperationExpression	* range_start		1957085	0					
ANR	1957099	UnaryOperator	*		1957085	0					
ANR	1957100	Identifier	range_start		1957085	1					
ANR	1957101	CompoundStatement		6:19:50:50	1957085	1					
ANR	1957102	ExpressionStatement	"* min = strtol ( range_start , & end_ptr , 10 )"	228:2:5874:5912	1957085	0	True				
ANR	1957103	AssignmentExpression	"* min = strtol ( range_start , & end_ptr , 10 )"		1957085	0		=			
ANR	1957104	UnaryOperationExpression	* min		1957085	0					
ANR	1957105	UnaryOperator	*		1957085	0					
ANR	1957106	Identifier	min		1957085	1					
ANR	1957107	CallExpression	"strtol ( range_start , & end_ptr , 10 )"		1957085	1					
ANR	1957108	Callee	strtol		1957085	0					
ANR	1957109	Identifier	strtol		1957085	0					
ANR	1957110	ArgumentList	range_start		1957085	1					
ANR	1957111	Argument	range_start		1957085	0					
ANR	1957112	Identifier	range_start		1957085	0					
ANR	1957113	Argument	& end_ptr		1957085	1					
ANR	1957114	UnaryOperationExpression	& end_ptr		1957085	0					
ANR	1957115	UnaryOperator	&		1957085	0					
ANR	1957116	Identifier	end_ptr		1957085	1					
ANR	1957117	Argument	10		1957085	2					
ANR	1957118	PrimaryExpression	10		1957085	0					
ANR	1957119	IfStatement	if ( end_ptr != range_start )		1957085	1					
ANR	1957120	Condition	end_ptr != range_start	230:6:5964:5985	1957085	0	True				
ANR	1957121	EqualityExpression	end_ptr != range_start		1957085	0		!=			
ANR	1957122	Identifier	end_ptr		1957085	0					
ANR	1957123	Identifier	range_start		1957085	1					
ANR	1957124	CompoundStatement		9:30:168:168	1957085	1					
ANR	1957125	ForStatement	for ( ; isspace ( * end_ptr ) ; end_ptr ++ )		1957085	0					
ANR	1957126	Condition	isspace ( * end_ptr )	232:11:6066:6082	1957085	0	True				
ANR	1957127	CallExpression	isspace ( * end_ptr )		1957085	0					
ANR	1957128	Callee	isspace		1957085	0					
ANR	1957129	Identifier	isspace		1957085	0					
ANR	1957130	ArgumentList	* end_ptr		1957085	1					
ANR	1957131	Argument	* end_ptr		1957085	0					
ANR	1957132	UnaryOperationExpression	* end_ptr		1957085	0					
ANR	1957133	UnaryOperator	*		1957085	0					
ANR	1957134	Identifier	end_ptr		1957085	1					
ANR	1957135	PostIncDecOperationExpression	end_ptr ++	232:30:6085:6093	1957085	1	True				
ANR	1957136	Identifier	end_ptr		1957085	0					
ANR	1957137	IncDec	++		1957085	1					
ANR	1957138	ExpressionStatement		232:40:6095:6095	1957085	2	True				
ANR	1957139	ExpressionStatement	valid = ( * end_ptr == '\\0' )	233:3:6100:6126	1957085	1	True				
ANR	1957140	AssignmentExpression	valid = ( * end_ptr == '\\0' )		1957085	0		=			
ANR	1957141	Identifier	valid		1957085	0					
ANR	1957142	EqualityExpression	* end_ptr == '\\0'		1957085	1		==			
ANR	1957143	UnaryOperationExpression	* end_ptr		1957085	0					
ANR	1957144	UnaryOperator	*		1957085	0					
ANR	1957145	Identifier	end_ptr		1957085	1					
ANR	1957146	PrimaryExpression	'\\0'		1957085	1					
ANR	1957147	ElseStatement	else		1957085	0					
ANR	1957148	CompoundStatement		13:9:317:317	1957085	0					
ANR	1957149	ExpressionStatement	valid = 0	235:3:6142:6151	1957085	0	True				
ANR	1957150	AssignmentExpression	valid = 0		1957085	0		=			
ANR	1957151	Identifier	valid		1957085	0					
ANR	1957152	PrimaryExpression	0		1957085	1					
ANR	1957153	ElseStatement	else		1957085	0					
ANR	1957154	CompoundStatement		16:8:345:345	1957085	0					
ANR	1957155	ExpressionStatement	valid = 0	238:2:6169:6178	1957085	0	True				
ANR	1957156	AssignmentExpression	valid = 0		1957085	0		=			
ANR	1957157	Identifier	valid		1957085	0					
ANR	1957158	PrimaryExpression	0		1957085	1					
ANR	1957159	IfStatement	if ( ! valid )		1957085	3					
ANR	1957160	Condition	! valid	241:5:6189:6194	1957085	0	True				
ANR	1957161	UnaryOperationExpression	! valid		1957085	0					
ANR	1957162	UnaryOperator	!		1957085	0					
ANR	1957163	Identifier	valid		1957085	1					
ANR	1957164	CompoundStatement		20:13:377:377	1957085	1					
ANR	1957165	ExpressionStatement	* min = INT_MIN	243:2:6234:6248	1957085	0	True				
ANR	1957166	AssignmentExpression	* min = INT_MIN		1957085	0		=			
ANR	1957167	UnaryOperationExpression	* min		1957085	0					
ANR	1957168	UnaryOperator	*		1957085	0					
ANR	1957169	Identifier	min		1957085	1					
ANR	1957170	Identifier	INT_MIN		1957085	1					
ANR	1957171	ReturnStatement	return valid ;	246:1:6255:6267	1957085	4	True				
ANR	1957172	Identifier	valid		1957085	0					
ANR	1957173	ReturnType	static int		1957085	1					
ANR	1957174	Identifier	validate_integer_range_lower_bound		1957085	2					
ANR	1957175	ParameterList	"const char * range_start , int * min"		1957085	3					
ANR	1957176	Parameter	const char * range_start	222:35:5784:5806	1957085	0	True				
ANR	1957177	ParameterType	const char *		1957085	0					
ANR	1957178	Identifier	range_start		1957085	1					
ANR	1957179	Parameter	int * min	222:60:5809:5816	1957085	1	True				
ANR	1957180	ParameterType	int *		1957085	0					
ANR	1957181	Identifier	min		1957085	1					
ANR	1957182	CFGEntryNode	ENTRY		1957085		True				
ANR	1957183	CFGExitNode	EXIT		1957085		True				
ANR	1957184	Symbol	valid		1957085						
ANR	1957185	Symbol	end_ptr		1957085						
ANR	1957186	Symbol	min		1957085						
ANR	1957187	Symbol	strtol		1957085						
ANR	1957188	Symbol	* range_start		1957085						
ANR	1957189	Symbol	& end_ptr		1957085						
ANR	1957190	Symbol	range_start		1957085						
ANR	1957191	Symbol	isspace		1957085						
ANR	1957192	Symbol	* min		1957085						
ANR	1957193	Symbol	* end_ptr		1957085						
ANR	1957194	Symbol	INT_MIN		1957085						
ANR	1957195	Function	validate_integer_range_upper_bound	249:0:6272:6795							
ANR	1957196	FunctionDef	"validate_integer_range_upper_bound (const char * range_end , int * max)"		1957195	0					
ANR	1957197	CompoundStatement		250:68:6351:6795	1957195	0					
ANR	1957198	IdentifierDeclStatement	char * end_ptr ;	252:1:6355:6368	1957195	0	True				
ANR	1957199	IdentifierDecl	* end_ptr		1957195	0					
ANR	1957200	IdentifierDeclType	char *		1957195	0					
ANR	1957201	Identifier	end_ptr		1957195	1					
ANR	1957202	IdentifierDeclStatement	int valid ;	253:1:6371:6380	1957195	1	True				
ANR	1957203	IdentifierDecl	valid		1957195	0					
ANR	1957204	IdentifierDeclType	int		1957195	0					
ANR	1957205	Identifier	valid		1957195	1					
ANR	1957206	IfStatement	if ( * range_end )		1957195	2					
ANR	1957207	Condition	* range_end	255:5:6388:6397	1957195	0	True				
ANR	1957208	UnaryOperationExpression	* range_end		1957195	0					
ANR	1957209	UnaryOperator	*		1957195	0					
ANR	1957210	Identifier	range_end		1957195	1					
ANR	1957211	CompoundStatement		6:17:48:48	1957195	1					
ANR	1957212	ExpressionStatement	"* max = strtol ( range_end , & end_ptr , 10 )"	256:2:6404:6440	1957195	0	True				
ANR	1957213	AssignmentExpression	"* max = strtol ( range_end , & end_ptr , 10 )"		1957195	0		=			
ANR	1957214	UnaryOperationExpression	* max		1957195	0					
ANR	1957215	UnaryOperator	*		1957195	0					
ANR	1957216	Identifier	max		1957195	1					
ANR	1957217	CallExpression	"strtol ( range_end , & end_ptr , 10 )"		1957195	1					
ANR	1957218	Callee	strtol		1957195	0					
ANR	1957219	Identifier	strtol		1957195	0					
ANR	1957220	ArgumentList	range_end		1957195	1					
ANR	1957221	Argument	range_end		1957195	0					
ANR	1957222	Identifier	range_end		1957195	0					
ANR	1957223	Argument	& end_ptr		1957195	1					
ANR	1957224	UnaryOperationExpression	& end_ptr		1957195	0					
ANR	1957225	UnaryOperator	&		1957195	0					
ANR	1957226	Identifier	end_ptr		1957195	1					
ANR	1957227	Argument	10		1957195	2					
ANR	1957228	PrimaryExpression	10		1957195	0					
ANR	1957229	IfStatement	if ( end_ptr != range_end )		1957195	1					
ANR	1957230	Condition	end_ptr != range_end	258:6:6492:6511	1957195	0	True				
ANR	1957231	EqualityExpression	end_ptr != range_end		1957195	0		!=			
ANR	1957232	Identifier	end_ptr		1957195	0					
ANR	1957233	Identifier	range_end		1957195	1					
ANR	1957234	CompoundStatement		9:28:162:162	1957195	1					
ANR	1957235	ForStatement	for ( ; isspace ( * end_ptr ) ; end_ptr ++ )		1957195	0					
ANR	1957236	Condition	isspace ( * end_ptr )	260:11:6592:6608	1957195	0	True				
ANR	1957237	CallExpression	isspace ( * end_ptr )		1957195	0					
ANR	1957238	Callee	isspace		1957195	0					
ANR	1957239	Identifier	isspace		1957195	0					
ANR	1957240	ArgumentList	* end_ptr		1957195	1					
ANR	1957241	Argument	* end_ptr		1957195	0					
ANR	1957242	UnaryOperationExpression	* end_ptr		1957195	0					
ANR	1957243	UnaryOperator	*		1957195	0					
ANR	1957244	Identifier	end_ptr		1957195	1					
ANR	1957245	PostIncDecOperationExpression	end_ptr ++	260:30:6611:6619	1957195	1	True				
ANR	1957246	Identifier	end_ptr		1957195	0					
ANR	1957247	IncDec	++		1957195	1					
ANR	1957248	ExpressionStatement		260:40:6621:6621	1957195	2	True				
ANR	1957249	ExpressionStatement	valid = ( * end_ptr == '\\0' )	261:3:6626:6652	1957195	1	True				
ANR	1957250	AssignmentExpression	valid = ( * end_ptr == '\\0' )		1957195	0		=			
ANR	1957251	Identifier	valid		1957195	0					
ANR	1957252	EqualityExpression	* end_ptr == '\\0'		1957195	1		==			
ANR	1957253	UnaryOperationExpression	* end_ptr		1957195	0					
ANR	1957254	UnaryOperator	*		1957195	0					
ANR	1957255	Identifier	end_ptr		1957195	1					
ANR	1957256	PrimaryExpression	'\\0'		1957195	1					
ANR	1957257	ElseStatement	else		1957195	0					
ANR	1957258	CompoundStatement		13:9:311:311	1957195	0					
ANR	1957259	ExpressionStatement	valid = 0	263:3:6668:6677	1957195	0	True				
ANR	1957260	AssignmentExpression	valid = 0		1957195	0		=			
ANR	1957261	Identifier	valid		1957195	0					
ANR	1957262	PrimaryExpression	0		1957195	1					
ANR	1957263	ElseStatement	else		1957195	0					
ANR	1957264	CompoundStatement		16:8:339:339	1957195	0					
ANR	1957265	ExpressionStatement	valid = 0	266:2:6695:6704	1957195	0	True				
ANR	1957266	AssignmentExpression	valid = 0		1957195	0		=			
ANR	1957267	Identifier	valid		1957195	0					
ANR	1957268	PrimaryExpression	0		1957195	1					
ANR	1957269	IfStatement	if ( ! valid )		1957195	3					
ANR	1957270	Condition	! valid	269:5:6715:6720	1957195	0	True				
ANR	1957271	UnaryOperationExpression	! valid		1957195	0					
ANR	1957272	UnaryOperator	!		1957195	0					
ANR	1957273	Identifier	valid		1957195	1					
ANR	1957274	CompoundStatement		20:13:371:371	1957195	1					
ANR	1957275	ExpressionStatement	* max = INT_MAX	271:2:6760:6774	1957195	0	True				
ANR	1957276	AssignmentExpression	* max = INT_MAX		1957195	0		=			
ANR	1957277	UnaryOperationExpression	* max		1957195	0					
ANR	1957278	UnaryOperator	*		1957195	0					
ANR	1957279	Identifier	max		1957195	1					
ANR	1957280	Identifier	INT_MAX		1957195	1					
ANR	1957281	ReturnStatement	return valid ;	274:1:6781:6793	1957195	4	True				
ANR	1957282	Identifier	valid		1957195	0					
ANR	1957283	ReturnType	static int		1957195	1					
ANR	1957284	Identifier	validate_integer_range_upper_bound		1957195	2					
ANR	1957285	ParameterList	"const char * range_end , int * max"		1957195	3					
ANR	1957286	Parameter	const char * range_end	250:35:6318:6338	1957195	0	True				
ANR	1957287	ParameterType	const char *		1957195	0					
ANR	1957288	Identifier	range_end		1957195	1					
ANR	1957289	Parameter	int * max	250:58:6341:6348	1957195	1	True				
ANR	1957290	ParameterType	int *		1957195	0					
ANR	1957291	Identifier	max		1957195	1					
ANR	1957292	CFGEntryNode	ENTRY		1957195		True				
ANR	1957293	CFGExitNode	EXIT		1957195		True				
ANR	1957294	Symbol	valid		1957195						
ANR	1957295	Symbol	range_end		1957195						
ANR	1957296	Symbol	end_ptr		1957195						
ANR	1957297	Symbol	max		1957195						
ANR	1957298	Symbol	strtol		1957195						
ANR	1957299	Symbol	& end_ptr		1957195						
ANR	1957300	Symbol	* range_end		1957195						
ANR	1957301	Symbol	isspace		1957195						
ANR	1957302	Symbol	INT_MAX		1957195						
ANR	1957303	Symbol	* end_ptr		1957195						
ANR	1957304	Symbol	* max		1957195						
ANR	1957305	Function	validate_double_range_lower_bound	277:0:6798:7331							
ANR	1957306	FunctionDef	"validate_double_range_lower_bound (const char * range_start , double * min)"		1957305	0					
ANR	1957307	CompoundStatement		278:72:6881:7331	1957305	0					
ANR	1957308	IdentifierDeclStatement	char * end_ptr ;	280:1:6885:6898	1957305	0	True				
ANR	1957309	IdentifierDecl	* end_ptr		1957305	0					
ANR	1957310	IdentifierDeclType	char *		1957305	0					
ANR	1957311	Identifier	end_ptr		1957305	1					
ANR	1957312	IdentifierDeclStatement	int valid ;	281:1:6901:6910	1957305	1	True				
ANR	1957313	IdentifierDecl	valid		1957305	0					
ANR	1957314	IdentifierDeclType	int		1957305	0					
ANR	1957315	Identifier	valid		1957305	1					
ANR	1957316	IfStatement	if ( * range_start )		1957305	2					
ANR	1957317	Condition	* range_start	283:5:6918:6929	1957305	0	True				
ANR	1957318	UnaryOperationExpression	* range_start		1957305	0					
ANR	1957319	UnaryOperator	*		1957305	0					
ANR	1957320	Identifier	range_start		1957305	1					
ANR	1957321	CompoundStatement		6:19:50:50	1957305	1					
ANR	1957322	ExpressionStatement	"* min = strtol ( range_start , & end_ptr , 10 )"	284:2:6936:6974	1957305	0	True				
ANR	1957323	AssignmentExpression	"* min = strtol ( range_start , & end_ptr , 10 )"		1957305	0		=			
ANR	1957324	UnaryOperationExpression	* min		1957305	0					
ANR	1957325	UnaryOperator	*		1957305	0					
ANR	1957326	Identifier	min		1957305	1					
ANR	1957327	CallExpression	"strtol ( range_start , & end_ptr , 10 )"		1957305	1					
ANR	1957328	Callee	strtol		1957305	0					
ANR	1957329	Identifier	strtol		1957305	0					
ANR	1957330	ArgumentList	range_start		1957305	1					
ANR	1957331	Argument	range_start		1957305	0					
ANR	1957332	Identifier	range_start		1957305	0					
ANR	1957333	Argument	& end_ptr		1957305	1					
ANR	1957334	UnaryOperationExpression	& end_ptr		1957305	0					
ANR	1957335	UnaryOperator	&		1957305	0					
ANR	1957336	Identifier	end_ptr		1957305	1					
ANR	1957337	Argument	10		1957305	2					
ANR	1957338	PrimaryExpression	10		1957305	0					
ANR	1957339	IfStatement	if ( end_ptr != range_start )		1957305	1					
ANR	1957340	Condition	end_ptr != range_start	286:6:7026:7047	1957305	0	True				
ANR	1957341	EqualityExpression	end_ptr != range_start		1957305	0		!=			
ANR	1957342	Identifier	end_ptr		1957305	0					
ANR	1957343	Identifier	range_start		1957305	1					
ANR	1957344	CompoundStatement		9:30:168:168	1957305	1					
ANR	1957345	ForStatement	for ( ; isspace ( * end_ptr ) ; end_ptr ++ )		1957305	0					
ANR	1957346	Condition	isspace ( * end_ptr )	288:11:7128:7144	1957305	0	True				
ANR	1957347	CallExpression	isspace ( * end_ptr )		1957305	0					
ANR	1957348	Callee	isspace		1957305	0					
ANR	1957349	Identifier	isspace		1957305	0					
ANR	1957350	ArgumentList	* end_ptr		1957305	1					
ANR	1957351	Argument	* end_ptr		1957305	0					
ANR	1957352	UnaryOperationExpression	* end_ptr		1957305	0					
ANR	1957353	UnaryOperator	*		1957305	0					
ANR	1957354	Identifier	end_ptr		1957305	1					
ANR	1957355	PostIncDecOperationExpression	end_ptr ++	288:30:7147:7155	1957305	1	True				
ANR	1957356	Identifier	end_ptr		1957305	0					
ANR	1957357	IncDec	++		1957305	1					
ANR	1957358	ExpressionStatement		288:40:7157:7157	1957305	2	True				
ANR	1957359	ExpressionStatement	valid = ( * end_ptr == '\\0' )	289:3:7162:7188	1957305	1	True				
ANR	1957360	AssignmentExpression	valid = ( * end_ptr == '\\0' )		1957305	0		=			
ANR	1957361	Identifier	valid		1957305	0					
ANR	1957362	EqualityExpression	* end_ptr == '\\0'		1957305	1		==			
ANR	1957363	UnaryOperationExpression	* end_ptr		1957305	0					
ANR	1957364	UnaryOperator	*		1957305	0					
ANR	1957365	Identifier	end_ptr		1957305	1					
ANR	1957366	PrimaryExpression	'\\0'		1957305	1					
ANR	1957367	ElseStatement	else		1957305	0					
ANR	1957368	CompoundStatement		13:9:317:317	1957305	0					
ANR	1957369	ExpressionStatement	valid = 0	291:3:7204:7213	1957305	0	True				
ANR	1957370	AssignmentExpression	valid = 0		1957305	0		=			
ANR	1957371	Identifier	valid		1957305	0					
ANR	1957372	PrimaryExpression	0		1957305	1					
ANR	1957373	ElseStatement	else		1957305	0					
ANR	1957374	CompoundStatement		16:8:345:345	1957305	0					
ANR	1957375	ExpressionStatement	valid = 0	294:2:7231:7240	1957305	0	True				
ANR	1957376	AssignmentExpression	valid = 0		1957305	0		=			
ANR	1957377	Identifier	valid		1957305	0					
ANR	1957378	PrimaryExpression	0		1957305	1					
ANR	1957379	IfStatement	if ( ! valid )		1957305	3					
ANR	1957380	Condition	! valid	297:5:7251:7256	1957305	0	True				
ANR	1957381	UnaryOperationExpression	! valid		1957305	0					
ANR	1957382	UnaryOperator	!		1957305	0					
ANR	1957383	Identifier	valid		1957305	1					
ANR	1957384	CompoundStatement		20:13:377:377	1957305	1					
ANR	1957385	ExpressionStatement	* min = DBL_MIN	299:2:7296:7310	1957305	0	True				
ANR	1957386	AssignmentExpression	* min = DBL_MIN		1957305	0		=			
ANR	1957387	UnaryOperationExpression	* min		1957305	0					
ANR	1957388	UnaryOperator	*		1957305	0					
ANR	1957389	Identifier	min		1957305	1					
ANR	1957390	Identifier	DBL_MIN		1957305	1					
ANR	1957391	ReturnStatement	return valid ;	302:1:7317:7329	1957305	4	True				
ANR	1957392	Identifier	valid		1957305	0					
ANR	1957393	ReturnType	static int		1957305	1					
ANR	1957394	Identifier	validate_double_range_lower_bound		1957305	2					
ANR	1957395	ParameterList	"const char * range_start , double * min"		1957305	3					
ANR	1957396	Parameter	const char * range_start	278:34:6843:6865	1957305	0	True				
ANR	1957397	ParameterType	const char *		1957305	0					
ANR	1957398	Identifier	range_start		1957305	1					
ANR	1957399	Parameter	double * min	278:59:6868:6878	1957305	1	True				
ANR	1957400	ParameterType	double *		1957305	0					
ANR	1957401	Identifier	min		1957305	1					
ANR	1957402	CFGEntryNode	ENTRY		1957305		True				
ANR	1957403	CFGExitNode	EXIT		1957305		True				
ANR	1957404	Symbol	valid		1957305						
ANR	1957405	Symbol	end_ptr		1957305						
ANR	1957406	Symbol	min		1957305						
ANR	1957407	Symbol	DBL_MIN		1957305						
ANR	1957408	Symbol	strtol		1957305						
ANR	1957409	Symbol	* range_start		1957305						
ANR	1957410	Symbol	& end_ptr		1957305						
ANR	1957411	Symbol	range_start		1957305						
ANR	1957412	Symbol	isspace		1957305						
ANR	1957413	Symbol	* min		1957305						
ANR	1957414	Symbol	* end_ptr		1957305						
ANR	1957415	Function	validate_double_range_upper_bound	305:0:7334:7856							
ANR	1957416	FunctionDef	"validate_double_range_upper_bound (const char * range_end , double * max)"		1957415	0					
ANR	1957417	CompoundStatement		306:70:7415:7856	1957415	0					
ANR	1957418	IdentifierDeclStatement	char * end_ptr ;	308:1:7419:7432	1957415	0	True				
ANR	1957419	IdentifierDecl	* end_ptr		1957415	0					
ANR	1957420	IdentifierDeclType	char *		1957415	0					
ANR	1957421	Identifier	end_ptr		1957415	1					
ANR	1957422	IdentifierDeclStatement	int valid ;	309:1:7435:7444	1957415	1	True				
ANR	1957423	IdentifierDecl	valid		1957415	0					
ANR	1957424	IdentifierDeclType	int		1957415	0					
ANR	1957425	Identifier	valid		1957415	1					
ANR	1957426	IfStatement	if ( * range_end )		1957415	2					
ANR	1957427	Condition	* range_end	311:5:7452:7461	1957415	0	True				
ANR	1957428	UnaryOperationExpression	* range_end		1957415	0					
ANR	1957429	UnaryOperator	*		1957415	0					
ANR	1957430	Identifier	range_end		1957415	1					
ANR	1957431	CompoundStatement		6:17:48:48	1957415	1					
ANR	1957432	ExpressionStatement	"* max = strtod ( range_end , & end_ptr )"	312:2:7468:7501	1957415	0	True				
ANR	1957433	AssignmentExpression	"* max = strtod ( range_end , & end_ptr )"		1957415	0		=			
ANR	1957434	UnaryOperationExpression	* max		1957415	0					
ANR	1957435	UnaryOperator	*		1957415	0					
ANR	1957436	Identifier	max		1957415	1					
ANR	1957437	CallExpression	"strtod ( range_end , & end_ptr )"		1957415	1					
ANR	1957438	Callee	strtod		1957415	0					
ANR	1957439	Identifier	strtod		1957415	0					
ANR	1957440	ArgumentList	range_end		1957415	1					
ANR	1957441	Argument	range_end		1957415	0					
ANR	1957442	Identifier	range_end		1957415	0					
ANR	1957443	Argument	& end_ptr		1957415	1					
ANR	1957444	UnaryOperationExpression	& end_ptr		1957415	0					
ANR	1957445	UnaryOperator	&		1957415	0					
ANR	1957446	Identifier	end_ptr		1957415	1					
ANR	1957447	IfStatement	if ( end_ptr != range_end )		1957415	1					
ANR	1957448	Condition	end_ptr != range_end	314:6:7553:7572	1957415	0	True				
ANR	1957449	EqualityExpression	end_ptr != range_end		1957415	0		!=			
ANR	1957450	Identifier	end_ptr		1957415	0					
ANR	1957451	Identifier	range_end		1957415	1					
ANR	1957452	CompoundStatement		9:28:159:159	1957415	1					
ANR	1957453	ForStatement	for ( ; isspace ( * end_ptr ) ; end_ptr ++ )		1957415	0					
ANR	1957454	Condition	isspace ( * end_ptr )	316:11:7653:7669	1957415	0	True				
ANR	1957455	CallExpression	isspace ( * end_ptr )		1957415	0					
ANR	1957456	Callee	isspace		1957415	0					
ANR	1957457	Identifier	isspace		1957415	0					
ANR	1957458	ArgumentList	* end_ptr		1957415	1					
ANR	1957459	Argument	* end_ptr		1957415	0					
ANR	1957460	UnaryOperationExpression	* end_ptr		1957415	0					
ANR	1957461	UnaryOperator	*		1957415	0					
ANR	1957462	Identifier	end_ptr		1957415	1					
ANR	1957463	PostIncDecOperationExpression	end_ptr ++	316:30:7672:7680	1957415	1	True				
ANR	1957464	Identifier	end_ptr		1957415	0					
ANR	1957465	IncDec	++		1957415	1					
ANR	1957466	ExpressionStatement		316:40:7682:7682	1957415	2	True				
ANR	1957467	ExpressionStatement	valid = ( * end_ptr == '\\0' )	317:3:7687:7713	1957415	1	True				
ANR	1957468	AssignmentExpression	valid = ( * end_ptr == '\\0' )		1957415	0		=			
ANR	1957469	Identifier	valid		1957415	0					
ANR	1957470	EqualityExpression	* end_ptr == '\\0'		1957415	1		==			
ANR	1957471	UnaryOperationExpression	* end_ptr		1957415	0					
ANR	1957472	UnaryOperator	*		1957415	0					
ANR	1957473	Identifier	end_ptr		1957415	1					
ANR	1957474	PrimaryExpression	'\\0'		1957415	1					
ANR	1957475	ElseStatement	else		1957415	0					
ANR	1957476	CompoundStatement		13:9:308:308	1957415	0					
ANR	1957477	ExpressionStatement	valid = 0	319:3:7729:7738	1957415	0	True				
ANR	1957478	AssignmentExpression	valid = 0		1957415	0		=			
ANR	1957479	Identifier	valid		1957415	0					
ANR	1957480	PrimaryExpression	0		1957415	1					
ANR	1957481	ElseStatement	else		1957415	0					
ANR	1957482	CompoundStatement		16:8:336:336	1957415	0					
ANR	1957483	ExpressionStatement	valid = 0	322:2:7756:7765	1957415	0	True				
ANR	1957484	AssignmentExpression	valid = 0		1957415	0		=			
ANR	1957485	Identifier	valid		1957415	0					
ANR	1957486	PrimaryExpression	0		1957415	1					
ANR	1957487	IfStatement	if ( ! valid )		1957415	3					
ANR	1957488	Condition	! valid	325:5:7776:7781	1957415	0	True				
ANR	1957489	UnaryOperationExpression	! valid		1957415	0					
ANR	1957490	UnaryOperator	!		1957415	0					
ANR	1957491	Identifier	valid		1957415	1					
ANR	1957492	CompoundStatement		20:13:368:368	1957415	1					
ANR	1957493	ExpressionStatement	* max = DBL_MAX	327:2:7821:7835	1957415	0	True				
ANR	1957494	AssignmentExpression	* max = DBL_MAX		1957415	0		=			
ANR	1957495	UnaryOperationExpression	* max		1957415	0					
ANR	1957496	UnaryOperator	*		1957415	0					
ANR	1957497	Identifier	max		1957415	1					
ANR	1957498	Identifier	DBL_MAX		1957415	1					
ANR	1957499	ReturnStatement	return valid ;	330:1:7842:7854	1957415	4	True				
ANR	1957500	Identifier	valid		1957415	0					
ANR	1957501	ReturnType	static int		1957415	1					
ANR	1957502	Identifier	validate_double_range_upper_bound		1957415	2					
ANR	1957503	ParameterList	"const char * range_end , double * max"		1957415	3					
ANR	1957504	Parameter	const char * range_end	306:34:7379:7399	1957415	0	True				
ANR	1957505	ParameterType	const char *		1957415	0					
ANR	1957506	Identifier	range_end		1957415	1					
ANR	1957507	Parameter	double * max	306:57:7402:7412	1957415	1	True				
ANR	1957508	ParameterType	double *		1957415	0					
ANR	1957509	Identifier	max		1957415	1					
ANR	1957510	CFGEntryNode	ENTRY		1957415		True				
ANR	1957511	CFGExitNode	EXIT		1957415		True				
ANR	1957512	Symbol	valid		1957415						
ANR	1957513	Symbol	range_end		1957415						
ANR	1957514	Symbol	DBL_MAX		1957415						
ANR	1957515	Symbol	end_ptr		1957415						
ANR	1957516	Symbol	max		1957415						
ANR	1957517	Symbol	& end_ptr		1957415						
ANR	1957518	Symbol	* range_end		1957415						
ANR	1957519	Symbol	isspace		1957415						
ANR	1957520	Symbol	* end_ptr		1957415						
ANR	1957521	Symbol	strtod		1957415						
ANR	1957522	Symbol	* max		1957415						
ANR	1957523	Function	validate_regex	333:0:7859:8907							
ANR	1957524	FunctionDef	"validate_regex (const char * pattern , const char * subject)"		1957523	0					
ANR	1957525	CompoundStatement		334:57:7927:8907	1957523	0					
ANR	1957526	IdentifierDeclStatement	pcre * re ;	336:1:7931:7939	1957523	0	True				
ANR	1957527	IdentifierDecl	* re		1957523	0					
ANR	1957528	IdentifierDeclType	pcre *		1957523	0					
ANR	1957529	Identifier	re		1957523	1					
ANR	1957530	IdentifierDeclStatement	const char * err ;	337:1:7942:7957	1957523	1	True				
ANR	1957531	IdentifierDecl	* err		1957523	0					
ANR	1957532	IdentifierDeclType	const char *		1957523	0					
ANR	1957533	Identifier	err		1957523	1					
ANR	1957534	IdentifierDeclStatement	int err_index ;	338:1:7960:7973	1957523	2	True				
ANR	1957535	IdentifierDecl	err_index		1957523	0					
ANR	1957536	IdentifierDeclType	int		1957523	0					
ANR	1957537	Identifier	err_index		1957523	1					
ANR	1957538	IdentifierDeclStatement	int group_count ;	339:4:7979:7994	1957523	3	True				
ANR	1957539	IdentifierDecl	group_count		1957523	0					
ANR	1957540	IdentifierDeclType	int		1957523	0					
ANR	1957541	Identifier	group_count		1957523	1					
ANR	1957542	IdentifierDeclStatement	int oveccount ;	340:1:7997:8010	1957523	4	True				
ANR	1957543	IdentifierDecl	oveccount		1957523	0					
ANR	1957544	IdentifierDeclType	int		1957523	0					
ANR	1957545	Identifier	oveccount		1957523	1					
ANR	1957546	IdentifierDeclStatement	int * ovector ;	341:1:8013:8025	1957523	5	True				
ANR	1957547	IdentifierDecl	* ovector		1957523	0					
ANR	1957548	IdentifierDeclType	int *		1957523	0					
ANR	1957549	Identifier	ovector		1957523	1					
ANR	1957550	IdentifierDeclStatement	int matches ;	342:1:8028:8039	1957523	6	True				
ANR	1957551	IdentifierDecl	matches		1957523	0					
ANR	1957552	IdentifierDeclType	int		1957523	0					
ANR	1957553	Identifier	matches		1957523	1					
ANR	1957554	IdentifierDeclStatement	int i ;	343:1:8042:8047	1957523	7	True				
ANR	1957555	IdentifierDecl	i		1957523	0					
ANR	1957556	IdentifierDeclType	int		1957523	0					
ANR	1957557	Identifier	i		1957523	1					
ANR	1957558	IdentifierDeclStatement	int is_valid = 0 ;	344:1:8050:8066	1957523	8	True				
ANR	1957559	IdentifierDecl	is_valid = 0		1957523	0					
ANR	1957560	IdentifierDeclType	int		1957523	0					
ANR	1957561	Identifier	is_valid		1957523	1					
ANR	1957562	AssignmentExpression	is_valid = 0		1957523	2		=			
ANR	1957563	Identifier	is_valid		1957523	0					
ANR	1957564	PrimaryExpression	0		1957523	1					
ANR	1957565	IdentifierDeclStatement	int subject_len ;	345:1:8069:8084	1957523	9	True				
ANR	1957566	IdentifierDecl	subject_len		1957523	0					
ANR	1957567	IdentifierDeclType	int		1957523	0					
ANR	1957568	Identifier	subject_len		1957523	1					
ANR	1957569	ExpressionStatement	"re = pcre_compile ( pattern , 0 , & err , & err_index , NULL )"	348:1:8130:8183	1957523	10	True				
ANR	1957570	AssignmentExpression	"re = pcre_compile ( pattern , 0 , & err , & err_index , NULL )"		1957523	0		=			
ANR	1957571	Identifier	re		1957523	0					
ANR	1957572	CallExpression	"pcre_compile ( pattern , 0 , & err , & err_index , NULL )"		1957523	1					
ANR	1957573	Callee	pcre_compile		1957523	0					
ANR	1957574	Identifier	pcre_compile		1957523	0					
ANR	1957575	ArgumentList	pattern		1957523	1					
ANR	1957576	Argument	pattern		1957523	0					
ANR	1957577	Identifier	pattern		1957523	0					
ANR	1957578	Argument	0		1957523	1					
ANR	1957579	PrimaryExpression	0		1957523	0					
ANR	1957580	Argument	& err		1957523	2					
ANR	1957581	UnaryOperationExpression	& err		1957523	0					
ANR	1957582	UnaryOperator	&		1957523	0					
ANR	1957583	Identifier	err		1957523	1					
ANR	1957584	Argument	& err_index		1957523	3					
ANR	1957585	UnaryOperationExpression	& err_index		1957523	0					
ANR	1957586	UnaryOperator	&		1957523	0					
ANR	1957587	Identifier	err_index		1957523	1					
ANR	1957588	Argument	NULL		1957523	4					
ANR	1957589	Identifier	NULL		1957523	0					
ANR	1957590	ExpressionStatement	"pcre_fullinfo ( re , NULL , PCRE_INFO_CAPTURECOUNT , & group_count )"	351:1:8264:8325	1957523	11	True				
ANR	1957591	CallExpression	"pcre_fullinfo ( re , NULL , PCRE_INFO_CAPTURECOUNT , & group_count )"		1957523	0					
ANR	1957592	Callee	pcre_fullinfo		1957523	0					
ANR	1957593	Identifier	pcre_fullinfo		1957523	0					
ANR	1957594	ArgumentList	re		1957523	1					
ANR	1957595	Argument	re		1957523	0					
ANR	1957596	Identifier	re		1957523	0					
ANR	1957597	Argument	NULL		1957523	1					
ANR	1957598	Identifier	NULL		1957523	0					
ANR	1957599	Argument	PCRE_INFO_CAPTURECOUNT		1957523	2					
ANR	1957600	Identifier	PCRE_INFO_CAPTURECOUNT		1957523	0					
ANR	1957601	Argument	& group_count		1957523	3					
ANR	1957602	UnaryOperationExpression	& group_count		1957523	0					
ANR	1957603	UnaryOperator	&		1957523	0					
ANR	1957604	Identifier	group_count		1957523	1					
ANR	1957605	ExpressionStatement	oveccount = 2 * ( group_count + 1 )	352:1:8328:8361	1957523	12	True				
ANR	1957606	AssignmentExpression	oveccount = 2 * ( group_count + 1 )		1957523	0		=			
ANR	1957607	Identifier	oveccount		1957523	0					
ANR	1957608	MultiplicativeExpression	2 * ( group_count + 1 )		1957523	1		*			
ANR	1957609	PrimaryExpression	2		1957523	0					
ANR	1957610	AdditiveExpression	group_count + 1		1957523	1		+			
ANR	1957611	Identifier	group_count		1957523	0					
ANR	1957612	PrimaryExpression	1		1957523	1					
ANR	1957613	ExpressionStatement	ovector = ( int * ) malloc ( oveccount * sizeof ( int ) )	353:1:8392:8440	1957523	13	True				
ANR	1957614	AssignmentExpression	ovector = ( int * ) malloc ( oveccount * sizeof ( int ) )		1957523	0		=			
ANR	1957615	Identifier	ovector		1957523	0					
ANR	1957616	CastExpression	( int * ) malloc ( oveccount * sizeof ( int ) )		1957523	1					
ANR	1957617	CastTarget	int *		1957523	0					
ANR	1957618	CallExpression	malloc ( oveccount * sizeof ( int ) )		1957523	1					
ANR	1957619	Callee	malloc		1957523	0					
ANR	1957620	Identifier	malloc		1957523	0					
ANR	1957621	ArgumentList	oveccount * sizeof ( int )		1957523	1					
ANR	1957622	Argument	oveccount * sizeof ( int )		1957523	0					
ANR	1957623	MultiplicativeExpression	oveccount * sizeof ( int )		1957523	0		*			
ANR	1957624	Identifier	oveccount		1957523	0					
ANR	1957625	SizeofExpression	sizeof ( int )		1957523	1					
ANR	1957626	Sizeof	sizeof		1957523	0					
ANR	1957627	SizeofOperand	int		1957523	1					
ANR	1957628	IfStatement	if ( ! ovector )		1957523	14					
ANR	1957629	Condition	! ovector	355:5:8448:8455	1957523	0	True				
ANR	1957630	UnaryOperationExpression	! ovector		1957523	0					
ANR	1957631	UnaryOperator	!		1957523	0					
ANR	1957632	Identifier	ovector		1957523	1					
ANR	1957633	CompoundStatement		22:15:530:530	1957523	1					
ANR	1957634	ExpressionStatement	"EXCEPT ( ""unable to allocated memory for regex group info in validate_regex"" )"	356:2:8462:8537	1957523	0	True				
ANR	1957635	CallExpression	"EXCEPT ( ""unable to allocated memory for regex group info in validate_regex"" )"		1957523	0					
ANR	1957636	Callee	EXCEPT		1957523	0					
ANR	1957637	Identifier	EXCEPT		1957523	0					
ANR	1957638	ArgumentList	"""unable to allocated memory for regex group info in validate_regex"""		1957523	1					
ANR	1957639	Argument	"""unable to allocated memory for regex group info in validate_regex"""		1957523	0					
ANR	1957640	PrimaryExpression	"""unable to allocated memory for regex group info in validate_regex"""		1957523	0					
ANR	1957641	ExpressionStatement	subject_len = strlen ( subject )	359:1:8544:8573	1957523	15	True				
ANR	1957642	AssignmentExpression	subject_len = strlen ( subject )		1957523	0		=			
ANR	1957643	Identifier	subject_len		1957523	0					
ANR	1957644	CallExpression	strlen ( subject )		1957523	1					
ANR	1957645	Callee	strlen		1957523	0					
ANR	1957646	Identifier	strlen		1957523	0					
ANR	1957647	ArgumentList	subject		1957523	1					
ANR	1957648	Argument	subject		1957523	0					
ANR	1957649	Identifier	subject		1957523	0					
ANR	1957650	ExpressionStatement	"matches = pcre_exec ( re , NULL , subject , subject_len , 0 , 0 , ovector , oveccount )"	362:1:8594:8671	1957523	16	True				
ANR	1957651	AssignmentExpression	"matches = pcre_exec ( re , NULL , subject , subject_len , 0 , 0 , ovector , oveccount )"		1957523	0		=			
ANR	1957652	Identifier	matches		1957523	0					
ANR	1957653	CallExpression	"pcre_exec ( re , NULL , subject , subject_len , 0 , 0 , ovector , oveccount )"		1957523	1					
ANR	1957654	Callee	pcre_exec		1957523	0					
ANR	1957655	Identifier	pcre_exec		1957523	0					
ANR	1957656	ArgumentList	re		1957523	1					
ANR	1957657	Argument	re		1957523	0					
ANR	1957658	Identifier	re		1957523	0					
ANR	1957659	Argument	NULL		1957523	1					
ANR	1957660	Identifier	NULL		1957523	0					
ANR	1957661	Argument	subject		1957523	2					
ANR	1957662	Identifier	subject		1957523	0					
ANR	1957663	Argument	subject_len		1957523	3					
ANR	1957664	Identifier	subject_len		1957523	0					
ANR	1957665	Argument	0		1957523	4					
ANR	1957666	PrimaryExpression	0		1957523	0					
ANR	1957667	Argument	0		1957523	5					
ANR	1957668	PrimaryExpression	0		1957523	0					
ANR	1957669	Argument	ovector		1957523	6					
ANR	1957670	Identifier	ovector		1957523	0					
ANR	1957671	Argument	oveccount		1957523	7					
ANR	1957672	Identifier	oveccount		1957523	0					
ANR	1957673	ForStatement	for ( i = 0 ; i < matches ; i ++ )		1957523	17					
ANR	1957674	ForInit	i = 0 ;	365:6:8737:8740	1957523	0	True				
ANR	1957675	AssignmentExpression	i = 0		1957523	0		=			
ANR	1957676	Identifier	i		1957523	0					
ANR	1957677	PrimaryExpression	0		1957523	1					
ANR	1957678	Condition	i < matches	365:11:8742:8750	1957523	1	True				
ANR	1957679	RelationalExpression	i < matches		1957523	0		<			
ANR	1957680	Identifier	i		1957523	0					
ANR	1957681	Identifier	matches		1957523	1					
ANR	1957682	PostIncDecOperationExpression	i ++	365:22:8753:8755	1957523	2	True				
ANR	1957683	Identifier	i		1957523	0					
ANR	1957684	IncDec	++		1957523	1					
ANR	1957685	CompoundStatement		32:27:830:830	1957523	3					
ANR	1957686	IfStatement	if ( ovector [ i * 2 ] == 0 && ovector [ i * 2 + 1 ] == subject_len )		1957523	0					
ANR	1957687	Condition	ovector [ i * 2 ] == 0 && ovector [ i * 2 + 1 ] == subject_len	366:6:8766:8815	1957523	0	True				
ANR	1957688	AndExpression	ovector [ i * 2 ] == 0 && ovector [ i * 2 + 1 ] == subject_len		1957523	0		&&			
ANR	1957689	EqualityExpression	ovector [ i * 2 ] == 0		1957523	0		==			
ANR	1957690	ArrayIndexing	ovector [ i * 2 ]		1957523	0					
ANR	1957691	Identifier	ovector		1957523	0					
ANR	1957692	MultiplicativeExpression	i * 2		1957523	1		*			
ANR	1957693	Identifier	i		1957523	0					
ANR	1957694	PrimaryExpression	2		1957523	1					
ANR	1957695	PrimaryExpression	0		1957523	1					
ANR	1957696	EqualityExpression	ovector [ i * 2 + 1 ] == subject_len		1957523	1		==			
ANR	1957697	ArrayIndexing	ovector [ i * 2 + 1 ]		1957523	0					
ANR	1957698	Identifier	ovector		1957523	0					
ANR	1957699	AdditiveExpression	i * 2 + 1		1957523	1		+			
ANR	1957700	MultiplicativeExpression	i * 2		1957523	0		*			
ANR	1957701	Identifier	i		1957523	0					
ANR	1957702	PrimaryExpression	2		1957523	1					
ANR	1957703	PrimaryExpression	1		1957523	1					
ANR	1957704	Identifier	subject_len		1957523	1					
ANR	1957705	CompoundStatement		33:58:890:890	1957523	1					
ANR	1957706	ExpressionStatement	is_valid = 1	367:3:8823:8835	1957523	0	True				
ANR	1957707	AssignmentExpression	is_valid = 1		1957523	0		=			
ANR	1957708	Identifier	is_valid		1957523	0					
ANR	1957709	PrimaryExpression	1		1957523	1					
ANR	1957710	BreakStatement	break ;	368:3:8840:8845	1957523	1	True				
ANR	1957711	ExpressionStatement	free ( ovector )	372:1:8856:8869	1957523	18	True				
ANR	1957712	CallExpression	free ( ovector )		1957523	0					
ANR	1957713	Callee	free		1957523	0					
ANR	1957714	Identifier	free		1957523	0					
ANR	1957715	ArgumentList	ovector		1957523	1					
ANR	1957716	Argument	ovector		1957523	0					
ANR	1957717	Identifier	ovector		1957523	0					
ANR	1957718	ExpressionStatement	pcre_free ( re )	374:1:8873:8886	1957523	19	True				
ANR	1957719	CallExpression	pcre_free ( re )		1957523	0					
ANR	1957720	Callee	pcre_free		1957523	0					
ANR	1957721	Identifier	pcre_free		1957523	0					
ANR	1957722	ArgumentList	re		1957523	1					
ANR	1957723	Argument	re		1957523	0					
ANR	1957724	Identifier	re		1957523	0					
ANR	1957725	ReturnStatement	return is_valid ;	376:1:8890:8905	1957523	20	True				
ANR	1957726	Identifier	is_valid		1957523	0					
ANR	1957727	ReturnType	static int		1957523	1					
ANR	1957728	Identifier	validate_regex		1957523	2					
ANR	1957729	ParameterList	"const char * pattern , const char * subject"		1957523	3					
ANR	1957730	Parameter	const char * pattern	334:15:7885:7903	1957523	0	True				
ANR	1957731	ParameterType	const char *		1957523	0					
ANR	1957732	Identifier	pattern		1957523	1					
ANR	1957733	Parameter	const char * subject	334:36:7906:7924	1957523	1	True				
ANR	1957734	ParameterType	const char *		1957523	0					
ANR	1957735	Identifier	subject		1957523	1					
ANR	1957736	CFGEntryNode	ENTRY		1957523		True				
ANR	1957737	CFGExitNode	EXIT		1957523		True				
ANR	1957738	Symbol	malloc		1957523						
ANR	1957739	Symbol	NULL		1957523						
ANR	1957740	Symbol	err		1957523						
ANR	1957741	Symbol	group_count		1957523						
ANR	1957742	Symbol	pcre_exec		1957523						
ANR	1957743	Symbol	subject		1957523						
ANR	1957744	Symbol	& group_count		1957523						
ANR	1957745	Symbol	pattern		1957523						
ANR	1957746	Symbol	oveccount		1957523						
ANR	1957747	Symbol	i		1957523						
ANR	1957748	Symbol	& err		1957523						
ANR	1957749	Symbol	matches		1957523						
ANR	1957750	Symbol	pcre_compile		1957523						
ANR	1957751	Symbol	strlen		1957523						
ANR	1957752	Symbol	* ovector		1957523						
ANR	1957753	Symbol	subject_len		1957523						
ANR	1957754	Symbol	re		1957523						
ANR	1957755	Symbol	* i		1957523						
ANR	1957756	Symbol	is_valid		1957523						
ANR	1957757	Symbol	PCRE_INFO_CAPTURECOUNT		1957523						
ANR	1957758	Symbol	& err_index		1957523						
ANR	1957759	Symbol	err_index		1957523						
ANR	1957760	Symbol	ovector		1957523						
ANR	1957761	Function	iterate_params	380:0:8917:9105							
ANR	1957762	FunctionDef	"iterate_params (int ( * callPerElement ) ( const param_info_t * , void * ) , void * user_data)"		1957761	0					
ANR	1957763	CompoundStatement		383:21:9038:9105	1957761	0					
ANR	1957764	ExpressionStatement	"param_info_hash_iterate ( param_info , callPerElement , user_data )"	384:1:9041:9103	1957761	0	True				
ANR	1957765	CallExpression	"param_info_hash_iterate ( param_info , callPerElement , user_data )"		1957761	0					
ANR	1957766	Callee	param_info_hash_iterate		1957761	0					
ANR	1957767	Identifier	param_info_hash_iterate		1957761	0					
ANR	1957768	ArgumentList	param_info		1957761	1					
ANR	1957769	Argument	param_info		1957761	0					
ANR	1957770	Identifier	param_info		1957761	0					
ANR	1957771	Argument	callPerElement		1957761	1					
ANR	1957772	Identifier	callPerElement		1957761	0					
ANR	1957773	Argument	user_data		1957761	2					
ANR	1957774	Identifier	user_data		1957761	0					
ANR	1957775	ReturnType	void		1957761	1					
ANR	1957776	Identifier	iterate_params		1957761	2					
ANR	1957777	ParameterList	"int ( * callPerElement ) ( const param_info_t * , void * ) , void * user_data"		1957761	3					
ANR	1957778	Parameter	"int ( * callPerElement ) ( const param_info_t * , void * )"	381:15:8937:9014	1957761	0	True				
ANR	1957779	ParameterType	"(( const param_info_t * , void * ) int) *"		1957761	0					
ANR	1957780	Identifier	callPerElement		1957761	1					
ANR	1957781	Parameter	void * user_data	383:4:9021:9035	1957761	1	True				
ANR	1957782	ParameterType	void *		1957761	0					
ANR	1957783	Identifier	user_data		1957761	1					
ANR	1957784	CFGEntryNode	ENTRY		1957761		True				
ANR	1957785	CFGExitNode	EXIT		1957761		True				
ANR	1957786	Symbol	callPerElement		1957761						
ANR	1957787	Symbol	user_data		1957761						
ANR	1957788	Symbol	param_info		1957761						
