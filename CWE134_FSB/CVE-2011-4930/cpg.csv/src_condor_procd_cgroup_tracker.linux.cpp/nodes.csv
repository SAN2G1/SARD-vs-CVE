command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3611011	File	data/converged/CVE-2011-4930_htcondor/src_condor_procd_cgroup_tracker.linux.cpp								
ANR	3611012	Function	CGroupTracker :: CGroupTracker	26:0:935:1016							
ANR	3611013	FunctionDef	CGroupTracker :: CGroupTracker (ProcFamilyMonitor * pfm)		3611012	0					
ANR	3611014	CompoundStatement		28:0:1014:1016	3611012	0					
ANR	3611015	Identifier	CGroupTracker :: CGroupTracker		3611012	1					
ANR	3611016	ParameterList	ProcFamilyMonitor * pfm		3611012	2					
ANR	3611017	Parameter	ProcFamilyMonitor * pfm	26:29:964:985	3611012	0	True				
ANR	3611018	ParameterType	ProcFamilyMonitor *		3611012	0					
ANR	3611019	Identifier	pfm		3611012	1					
ANR	3611020	CFGEntryNode	ENTRY		3611012		True				
ANR	3611021	CFGExitNode	EXIT		3611012		True				
ANR	3611022	Symbol	pfm		3611012						
ANR	3611023	Function	CGroupTracker :: add_mapping	31:0:1019:1213							
ANR	3611024	FunctionDef	"CGroupTracker :: add_mapping (ProcFamily * family , const char * cgroup)"		3611023	0					
ANR	3611025	CompoundStatement		33:0:1092:1213	3611023	0					
ANR	3611026	IdentifierDeclStatement	int err = family -> set_cgroup ( cgroup ) ;	34:1:1095:1131	3611023	0	True				
ANR	3611027	IdentifierDecl	err = family -> set_cgroup ( cgroup )		3611023	0					
ANR	3611028	IdentifierDeclType	int		3611023	0					
ANR	3611029	Identifier	err		3611023	1					
ANR	3611030	AssignmentExpression	err = family -> set_cgroup ( cgroup )		3611023	2		=			
ANR	3611031	Identifier	err		3611023	0					
ANR	3611032	CallExpression	family -> set_cgroup ( cgroup )		3611023	1					
ANR	3611033	Callee	family -> set_cgroup		3611023	0					
ANR	3611034	PtrMemberAccess	family -> set_cgroup		3611023	0					
ANR	3611035	Identifier	family		3611023	0					
ANR	3611036	Identifier	set_cgroup		3611023	1					
ANR	3611037	ArgumentList	cgroup		3611023	1					
ANR	3611038	Argument	cgroup		3611023	0					
ANR	3611039	Identifier	cgroup		3611023	0					
ANR	3611040	IfStatement	if ( ! err )		3611023	1					
ANR	3611041	Condition	! err	35:5:1138:1141	3611023	0	True				
ANR	3611042	UnaryOperationExpression	! err		3611023	0					
ANR	3611043	UnaryOperator	!		3611023	0					
ANR	3611044	Identifier	err		3611023	1					
ANR	3611045	CompoundStatement		3:11:51:51	3611023	1					
ANR	3611046	ExpressionStatement	m_cgroup_pool [ cgroup ] = family	36:2:1148:1178	3611023	0	True				
ANR	3611047	AssignmentExpression	m_cgroup_pool [ cgroup ] = family		3611023	0		=			
ANR	3611048	ArrayIndexing	m_cgroup_pool [ cgroup ]		3611023	0					
ANR	3611049	Identifier	m_cgroup_pool		3611023	0					
ANR	3611050	Identifier	cgroup		3611023	1					
ANR	3611051	Identifier	family		3611023	1					
ANR	3611052	ReturnStatement	return true ;	37:2:1182:1193	3611023	1	True				
ANR	3611053	Identifier	true		3611023	0					
ANR	3611054	ReturnStatement	return false ;	39:1:1199:1211	3611023	2	True				
ANR	3611055	Identifier	false		3611023	0					
ANR	3611056	ReturnType	bool		3611023	1					
ANR	3611057	Identifier	CGroupTracker :: add_mapping		3611023	2					
ANR	3611058	ParameterList	"ProcFamily * family , const char * cgroup"		3611023	3					
ANR	3611059	Parameter	ProcFamily * family	32:27:1051:1068	3611023	0	True				
ANR	3611060	ParameterType	ProcFamily *		3611023	0					
ANR	3611061	Identifier	family		3611023	1					
ANR	3611062	Parameter	const char * cgroup	32:47:1071:1089	3611023	1	True				
ANR	3611063	ParameterType	const char *		3611023	0					
ANR	3611064	Identifier	cgroup		3611023	1					
ANR	3611065	CFGEntryNode	ENTRY		3611023		True				
ANR	3611066	CFGExitNode	EXIT		3611023		True				
ANR	3611067	Symbol	err		3611023						
ANR	3611068	Symbol	* m_cgroup_pool		3611023						
ANR	3611069	Symbol	true		3611023						
ANR	3611070	Symbol	false		3611023						
ANR	3611071	Symbol	* family		3611023						
ANR	3611072	Symbol	family -> set_cgroup		3611023						
ANR	3611073	Symbol	* cgroup		3611023						
ANR	3611074	Symbol	m_cgroup_pool		3611023						
ANR	3611075	Symbol	family		3611023						
ANR	3611076	Symbol	cgroup		3611023						
ANR	3611077	Function	CGroupTracker :: remove_mapping	42:0:1216:1594							
ANR	3611078	FunctionDef	CGroupTracker :: remove_mapping (ProcFamily * family)		3611077	0					
ANR	3611079	CompoundStatement		44:0:1271:1594	3611077	0					
ANR	3611080	IdentifierDeclStatement	"std :: map < std :: string , ProcFamily * > :: const_iterator end = m_cgroup_pool . end ( ) ;"	46:1:1309:1385	3611077	0	True				
ANR	3611081	IdentifierDecl	end = m_cgroup_pool . end ( )		3611077	0					
ANR	3611082	IdentifierDeclType	"std :: map < std :: string , ProcFamily * > :: const_iterator"		3611077	0					
ANR	3611083	Identifier	end		3611077	1					
ANR	3611084	AssignmentExpression	end = m_cgroup_pool . end ( )		3611077	2		=			
ANR	3611085	Identifier	end		3611077	0					
ANR	3611086	CallExpression	m_cgroup_pool . end ( )		3611077	1					
ANR	3611087	Callee	m_cgroup_pool . end		3611077	0					
ANR	3611088	MemberAccess	m_cgroup_pool . end		3611077	0					
ANR	3611089	Identifier	m_cgroup_pool		3611077	0					
ANR	3611090	Identifier	end		3611077	1					
ANR	3611091	ArgumentList			3611077	1					
ANR	3611092	ForStatement	"for ( std :: map < std :: string , ProcFamily * > :: const_iterator it = m_cgroup_pool . begin ( ) ; it != end ; ++ it )"		3611077	1					
ANR	3611093	ForInit	"std :: map < std :: string , ProcFamily * > :: const_iterator it = m_cgroup_pool . begin ( ) ;"	47:6:1393:1470	3611077	0	True				
ANR	3611094	IdentifierDeclStatement	"std :: map < std :: string , ProcFamily * > :: const_iterator it = m_cgroup_pool . begin ( ) ;"		3611077	0					
ANR	3611095	IdentifierDecl	it = m_cgroup_pool . begin ( )		3611077	0					
ANR	3611096	IdentifierDeclType	"std :: map < std :: string , ProcFamily * > :: const_iterator"		3611077	0					
ANR	3611097	Identifier	it		3611077	1					
ANR	3611098	AssignmentExpression	it = m_cgroup_pool . begin ( )		3611077	2		=			
ANR	3611099	Identifier	it		3611077	0					
ANR	3611100	CallExpression	m_cgroup_pool . begin ( )		3611077	1					
ANR	3611101	Callee	m_cgroup_pool . begin		3611077	0					
ANR	3611102	MemberAccess	m_cgroup_pool . begin		3611077	0					
ANR	3611103	Identifier	m_cgroup_pool		3611077	0					
ANR	3611104	Identifier	begin		3611077	1					
ANR	3611105	ArgumentList			3611077	1					
ANR	3611106	Condition	it != end	47:85:1472:1480	3611077	1	True				
ANR	3611107	EqualityExpression	it != end		3611077	0		!=			
ANR	3611108	Identifier	it		3611077	0					
ANR	3611109	Identifier	end		3611077	1					
ANR	3611110	UnaryExpression	++ it	47:96:1483:1486	3611077	2	True				
ANR	3611111	IncDec	++		3611077	0					
ANR	3611112	Identifier	it		3611077	1					
ANR	3611113	CompoundStatement		4:102:217:217	3611077	3					
ANR	3611114	IfStatement	if ( it -> second == family )		3611077	0					
ANR	3611115	Condition	it -> second == family	48:6:1497:1516	3611077	0	True				
ANR	3611116	EqualityExpression	it -> second == family		3611077	0		==			
ANR	3611117	PtrMemberAccess	it -> second		3611077	0					
ANR	3611118	Identifier	it		3611077	0					
ANR	3611119	Identifier	second		3611077	1					
ANR	3611120	Identifier	family		3611077	1					
ANR	3611121	CompoundStatement		5:28:247:247	3611077	1					
ANR	3611122	ExpressionStatement	m_cgroup_pool . erase ( it -> first )	49:3:1524:1554	3611077	0	True				
ANR	3611123	CallExpression	m_cgroup_pool . erase ( it -> first )		3611077	0					
ANR	3611124	Callee	m_cgroup_pool . erase		3611077	0					
ANR	3611125	MemberAccess	m_cgroup_pool . erase		3611077	0					
ANR	3611126	Identifier	m_cgroup_pool		3611077	0					
ANR	3611127	Identifier	erase		3611077	1					
ANR	3611128	ArgumentList	it -> first		3611077	1					
ANR	3611129	Argument	it -> first		3611077	0					
ANR	3611130	PtrMemberAccess	it -> first		3611077	0					
ANR	3611131	Identifier	it		3611077	0					
ANR	3611132	Identifier	first		3611077	1					
ANR	3611133	ReturnStatement	return true ;	50:3:1559:1570	3611077	1	True				
ANR	3611134	Identifier	true		3611077	0					
ANR	3611135	ReturnStatement	return false ;	53:1:1580:1592	3611077	2	True				
ANR	3611136	Identifier	false		3611077	0					
ANR	3611137	ReturnType	bool		3611077	1					
ANR	3611138	Identifier	CGroupTracker :: remove_mapping		3611077	2					
ANR	3611139	ParameterList	ProcFamily * family		3611077	3					
ANR	3611140	Parameter	ProcFamily * family	43:30:1251:1268	3611077	0	True				
ANR	3611141	ParameterType	ProcFamily *		3611077	0					
ANR	3611142	Identifier	family		3611077	1					
ANR	3611143	CFGEntryNode	ENTRY		3611077		True				
ANR	3611144	CFGExitNode	EXIT		3611077		True				
ANR	3611145	Symbol	m_cgroup_pool . begin		3611077						
ANR	3611146	Symbol	it -> second		3611077						
ANR	3611147	Symbol	* it		3611077						
ANR	3611148	Symbol	it -> first		3611077						
ANR	3611149	Symbol	true		3611077						
ANR	3611150	Symbol	false		3611077						
ANR	3611151	Symbol	end		3611077						
ANR	3611152	Symbol	m_cgroup_pool . end		3611077						
ANR	3611153	Symbol	m_cgroup_pool		3611077						
ANR	3611154	Symbol	it		3611077						
ANR	3611155	Symbol	family		3611077						
ANR	3611156	Function	CGroupTracker :: check_process	56:0:1597:3491							
ANR	3611157	FunctionDef	CGroupTracker :: check_process (procInfo * pi)		3611156	0					
ANR	3611158	CompoundStatement		58:0:1645:3491	3611156	0					
ANR	3611159	IdentifierDeclStatement	char path [ 32 ] ;	66:1:1919:1932	3611156	0	True				
ANR	3611160	IdentifierDecl	path [ 32 ]		3611156	0					
ANR	3611161	IdentifierDeclType	char [ 32 ]		3611156	0					
ANR	3611162	Identifier	path		3611156	1					
ANR	3611163	PrimaryExpression	32		3611156	2					
ANR	3611164	IdentifierDeclStatement	"int ret = snprintf ( path , 32 , ""/proc/%u/cgroup"" , pi -> pid ) ;"	67:1:1935:1991	3611156	1	True				
ANR	3611165	IdentifierDecl	"ret = snprintf ( path , 32 , ""/proc/%u/cgroup"" , pi -> pid )"		3611156	0					
ANR	3611166	IdentifierDeclType	int		3611156	0					
ANR	3611167	Identifier	ret		3611156	1					
ANR	3611168	AssignmentExpression	"ret = snprintf ( path , 32 , ""/proc/%u/cgroup"" , pi -> pid )"		3611156	2		=			
ANR	3611169	Identifier	ret		3611156	0					
ANR	3611170	CallExpression	"snprintf ( path , 32 , ""/proc/%u/cgroup"" , pi -> pid )"		3611156	1					
ANR	3611171	Callee	snprintf		3611156	0					
ANR	3611172	Identifier	snprintf		3611156	0					
ANR	3611173	ArgumentList	path		3611156	1					
ANR	3611174	Argument	path		3611156	0					
ANR	3611175	Identifier	path		3611156	0					
ANR	3611176	Argument	32		3611156	1					
ANR	3611177	PrimaryExpression	32		3611156	0					
ANR	3611178	Argument	"""/proc/%u/cgroup"""		3611156	2					
ANR	3611179	PrimaryExpression	"""/proc/%u/cgroup"""		3611156	0					
ANR	3611180	Argument	pi -> pid		3611156	3					
ANR	3611181	PtrMemberAccess	pi -> pid		3611156	0					
ANR	3611182	Identifier	pi		3611156	0					
ANR	3611183	Identifier	pid		3611156	1					
ANR	3611184	IfStatement	if ( ret < 0 )		3611156	2					
ANR	3611185	Condition	ret < 0	68:5:1998:2004	3611156	0	True				
ANR	3611186	RelationalExpression	ret < 0		3611156	0		<			
ANR	3611187	Identifier	ret		3611156	0					
ANR	3611188	PrimaryExpression	0		3611156	1					
ANR	3611189	CompoundStatement		11:14:361:361	3611156	1					
ANR	3611190	ExpressionStatement	"dprintf ( D_ALWAYS , ""GroupTracker (pid = %u): snprintf error: %s (%d)\\n"" , pi -> pid , strerror ( errno ) , errno )"	69:2:2011:2127	3611156	0	True				
ANR	3611191	CallExpression	"dprintf ( D_ALWAYS , ""GroupTracker (pid = %u): snprintf error: %s (%d)\\n"" , pi -> pid , strerror ( errno ) , errno )"		3611156	0					
ANR	3611192	Callee	dprintf		3611156	0					
ANR	3611193	Identifier	dprintf		3611156	0					
ANR	3611194	ArgumentList	D_ALWAYS		3611156	1					
ANR	3611195	Argument	D_ALWAYS		3611156	0					
ANR	3611196	Identifier	D_ALWAYS		3611156	0					
ANR	3611197	Argument	"""GroupTracker (pid = %u): snprintf error: %s (%d)\\n"""		3611156	1					
ANR	3611198	PrimaryExpression	"""GroupTracker (pid = %u): snprintf error: %s (%d)\\n"""		3611156	0					
ANR	3611199	Argument	pi -> pid		3611156	2					
ANR	3611200	PtrMemberAccess	pi -> pid		3611156	0					
ANR	3611201	Identifier	pi		3611156	0					
ANR	3611202	Identifier	pid		3611156	1					
ANR	3611203	Argument	strerror ( errno )		3611156	3					
ANR	3611204	CallExpression	strerror ( errno )		3611156	0					
ANR	3611205	Callee	strerror		3611156	0					
ANR	3611206	Identifier	strerror		3611156	0					
ANR	3611207	ArgumentList	errno		3611156	1					
ANR	3611208	Argument	errno		3611156	0					
ANR	3611209	Identifier	errno		3611156	0					
ANR	3611210	Argument	errno		3611156	4					
ANR	3611211	Identifier	errno		3611156	0					
ANR	3611212	ReturnStatement	return false ;	74:2:2131:2143	3611156	1	True				
ANR	3611213	Identifier	false		3611156	0					
ANR	3611214	IfStatement	if ( ret >= 32 )		3611156	3					
ANR	3611215	Condition	ret >= 32	76:5:2160:2168	3611156	0	True				
ANR	3611216	RelationalExpression	ret >= 32		3611156	0		>=			
ANR	3611217	Identifier	ret		3611156	0					
ANR	3611218	PrimaryExpression	32		3611156	1					
ANR	3611219	CompoundStatement		19:16:525:525	3611156	1					
ANR	3611220	ExpressionStatement	"dprintf ( D_ALWAYS , ""GroupTracker (pid = %u): error: path buffer too small\\n"" , pi -> pid )"	77:2:2175:2266	3611156	0	True				
ANR	3611221	CallExpression	"dprintf ( D_ALWAYS , ""GroupTracker (pid = %u): error: path buffer too small\\n"" , pi -> pid )"		3611156	0					
ANR	3611222	Callee	dprintf		3611156	0					
ANR	3611223	Identifier	dprintf		3611156	0					
ANR	3611224	ArgumentList	D_ALWAYS		3611156	1					
ANR	3611225	Argument	D_ALWAYS		3611156	0					
ANR	3611226	Identifier	D_ALWAYS		3611156	0					
ANR	3611227	Argument	"""GroupTracker (pid = %u): error: path buffer too small\\n"""		3611156	1					
ANR	3611228	PrimaryExpression	"""GroupTracker (pid = %u): error: path buffer too small\\n"""		3611156	0					
ANR	3611229	Argument	pi -> pid		3611156	2					
ANR	3611230	PtrMemberAccess	pi -> pid		3611156	0					
ANR	3611231	Identifier	pi		3611156	0					
ANR	3611232	Identifier	pid		3611156	1					
ANR	3611233	ReturnStatement	return false ;	80:2:2270:2282	3611156	1	True				
ANR	3611234	Identifier	false		3611156	0					
ANR	3611235	IdentifierDeclStatement	"FILE * fp = safe_fopen_wrapper ( path , ""r"" ) ;"	85:1:2310:2350	3611156	4	True				
ANR	3611236	IdentifierDecl	"* fp = safe_fopen_wrapper ( path , ""r"" )"		3611156	0					
ANR	3611237	IdentifierDeclType	FILE *		3611156	0					
ANR	3611238	Identifier	fp		3611156	1					
ANR	3611239	AssignmentExpression	"* fp = safe_fopen_wrapper ( path , ""r"" )"		3611156	2		=			
ANR	3611240	Identifier	fp		3611156	0					
ANR	3611241	CallExpression	"safe_fopen_wrapper ( path , ""r"" )"		3611156	1					
ANR	3611242	Callee	safe_fopen_wrapper		3611156	0					
ANR	3611243	Identifier	safe_fopen_wrapper		3611156	0					
ANR	3611244	ArgumentList	path		3611156	1					
ANR	3611245	Argument	path		3611156	0					
ANR	3611246	Identifier	path		3611156	0					
ANR	3611247	Argument	"""r"""		3611156	1					
ANR	3611248	PrimaryExpression	"""r"""		3611156	0					
ANR	3611249	IfStatement	if ( fp == NULL )		3611156	5					
ANR	3611250	Condition	fp == NULL	86:5:2357:2366	3611156	0	True				
ANR	3611251	EqualityExpression	fp == NULL		3611156	0		==			
ANR	3611252	Identifier	fp		3611156	0					
ANR	3611253	Identifier	NULL		3611156	1					
ANR	3611254	CompoundStatement		29:17:723:723	3611156	1					
ANR	3611255	ExpressionStatement	"dprintf ( D_ALWAYS , ""GroupTracker (pid = %u): fopen error: Failed to open file '%s'. Error %s (%d)\\n"" , pi -> pid , path , strerror ( errno ) , errno )"	87:2:2373:2527	3611156	0	True				
ANR	3611256	CallExpression	"dprintf ( D_ALWAYS , ""GroupTracker (pid = %u): fopen error: Failed to open file '%s'. Error %s (%d)\\n"" , pi -> pid , path , strerror ( errno ) , errno )"		3611156	0					
ANR	3611257	Callee	dprintf		3611156	0					
ANR	3611258	Identifier	dprintf		3611156	0					
ANR	3611259	ArgumentList	D_ALWAYS		3611156	1					
ANR	3611260	Argument	D_ALWAYS		3611156	0					
ANR	3611261	Identifier	D_ALWAYS		3611156	0					
ANR	3611262	Argument	"""GroupTracker (pid = %u): fopen error: Failed to open file '%s'. Error %s (%d)\\n"""		3611156	1					
ANR	3611263	PrimaryExpression	"""GroupTracker (pid = %u): fopen error: Failed to open file '%s'. Error %s (%d)\\n"""		3611156	0					
ANR	3611264	Argument	pi -> pid		3611156	2					
ANR	3611265	PtrMemberAccess	pi -> pid		3611156	0					
ANR	3611266	Identifier	pi		3611156	0					
ANR	3611267	Identifier	pid		3611156	1					
ANR	3611268	Argument	path		3611156	3					
ANR	3611269	Identifier	path		3611156	0					
ANR	3611270	Argument	strerror ( errno )		3611156	4					
ANR	3611271	CallExpression	strerror ( errno )		3611156	0					
ANR	3611272	Callee	strerror		3611156	0					
ANR	3611273	Identifier	strerror		3611156	0					
ANR	3611274	ArgumentList	errno		3611156	1					
ANR	3611275	Argument	errno		3611156	0					
ANR	3611276	Identifier	errno		3611156	0					
ANR	3611277	Argument	errno		3611156	5					
ANR	3611278	Identifier	errno		3611156	0					
ANR	3611279	ReturnStatement	return false ;	93:2:2531:2543	3611156	1	True				
ANR	3611280	Identifier	false		3611156	0					
ANR	3611281	IdentifierDeclStatement	char buffer [ 1024 ] ;	96:1:2550:2567	3611156	6	True				
ANR	3611282	IdentifierDecl	buffer [ 1024 ]		3611156	0					
ANR	3611283	IdentifierDeclType	char [ 1024 ]		3611156	0					
ANR	3611284	Identifier	buffer		3611156	1					
ANR	3611285	PrimaryExpression	1024		3611156	2					
ANR	3611286	IdentifierDeclStatement	bool found_cgroup = false ;	97:1:2570:2595	3611156	7	True				
ANR	3611287	IdentifierDecl	found_cgroup = false		3611156	0					
ANR	3611288	IdentifierDeclType	bool		3611156	0					
ANR	3611289	Identifier	found_cgroup		3611156	1					
ANR	3611290	AssignmentExpression	found_cgroup = false		3611156	2		=			
ANR	3611291	Identifier	false		3611156	0					
ANR	3611292	Identifier	false		3611156	1					
ANR	3611293	IdentifierDeclStatement	"std :: map < std :: string , ProcFamily * > :: const_iterator end = m_cgroup_pool . end ( ) ;"	98:1:2598:2674	3611156	8	True				
ANR	3611294	IdentifierDecl	end = m_cgroup_pool . end ( )		3611156	0					
ANR	3611295	IdentifierDeclType	"std :: map < std :: string , ProcFamily * > :: const_iterator"		3611156	0					
ANR	3611296	Identifier	end		3611156	1					
ANR	3611297	AssignmentExpression	end = m_cgroup_pool . end ( )		3611156	2		=			
ANR	3611298	Identifier	end		3611156	0					
ANR	3611299	CallExpression	m_cgroup_pool . end ( )		3611156	1					
ANR	3611300	Callee	m_cgroup_pool . end		3611156	0					
ANR	3611301	MemberAccess	m_cgroup_pool . end		3611156	0					
ANR	3611302	Identifier	m_cgroup_pool		3611156	0					
ANR	3611303	Identifier	end		3611156	1					
ANR	3611304	ArgumentList			3611156	1					
ANR	3611305	WhileStatement	"while ( fgets ( buffer , 1024 , fp ) )"		3611156	9					
ANR	3611306	Condition	"fgets ( buffer , 1024 , fp )"	99:8:2684:2706	3611156	0	True				
ANR	3611307	CallExpression	"fgets ( buffer , 1024 , fp )"		3611156	0					
ANR	3611308	Callee	fgets		3611156	0					
ANR	3611309	Identifier	fgets		3611156	0					
ANR	3611310	ArgumentList	buffer		3611156	1					
ANR	3611311	Argument	buffer		3611156	0					
ANR	3611312	Identifier	buffer		3611156	0					
ANR	3611313	Argument	1024		3611156	1					
ANR	3611314	PrimaryExpression	1024		3611156	0					
ANR	3611315	Argument	fp		3611156	2					
ANR	3611316	Identifier	fp		3611156	0					
ANR	3611317	CompoundStatement		42:33:1063:1063	3611156	1					
ANR	3611318	ForStatement	"for ( std :: map < std :: string , ProcFamily * > :: const_iterator it = m_cgroup_pool . begin ( ) ; it != end ; ++ it )"		3611156	0					
ANR	3611319	ForInit	"std :: map < std :: string , ProcFamily * > :: const_iterator it = m_cgroup_pool . begin ( ) ;"	101:7:2752:2829	3611156	0	True				
ANR	3611320	IdentifierDeclStatement	"std :: map < std :: string , ProcFamily * > :: const_iterator it = m_cgroup_pool . begin ( ) ;"		3611156	0					
ANR	3611321	IdentifierDecl	it = m_cgroup_pool . begin ( )		3611156	0					
ANR	3611322	IdentifierDeclType	"std :: map < std :: string , ProcFamily * > :: const_iterator"		3611156	0					
ANR	3611323	Identifier	it		3611156	1					
ANR	3611324	AssignmentExpression	it = m_cgroup_pool . begin ( )		3611156	2		=			
ANR	3611325	Identifier	it		3611156	0					
ANR	3611326	CallExpression	m_cgroup_pool . begin ( )		3611156	1					
ANR	3611327	Callee	m_cgroup_pool . begin		3611156	0					
ANR	3611328	MemberAccess	m_cgroup_pool . begin		3611156	0					
ANR	3611329	Identifier	m_cgroup_pool		3611156	0					
ANR	3611330	Identifier	begin		3611156	1					
ANR	3611331	ArgumentList			3611156	1					
ANR	3611332	Condition	it != end	101:86:2831:2839	3611156	1	True				
ANR	3611333	EqualityExpression	it != end		3611156	0		!=			
ANR	3611334	Identifier	it		3611156	0					
ANR	3611335	Identifier	end		3611156	1					
ANR	3611336	UnaryExpression	++ it	101:97:2842:2845	3611156	2	True				
ANR	3611337	IncDec	++		3611156	0					
ANR	3611338	Identifier	it		3611156	1					
ANR	3611339	CompoundStatement		44:103:1202:1202	3611156	3					
ANR	3611340	IfStatement	"if ( strstr ( buffer , it -> first . c_str ( ) ) )"		3611156	0					
ANR	3611341	Condition	"strstr ( buffer , it -> first . c_str ( ) )"	102:7:2857:2889	3611156	0	True				
ANR	3611342	CallExpression	"strstr ( buffer , it -> first . c_str ( ) )"		3611156	0					
ANR	3611343	Callee	strstr		3611156	0					
ANR	3611344	Identifier	strstr		3611156	0					
ANR	3611345	ArgumentList	buffer		3611156	1					
ANR	3611346	Argument	buffer		3611156	0					
ANR	3611347	Identifier	buffer		3611156	0					
ANR	3611348	Argument	it -> first . c_str ( )		3611156	1					
ANR	3611349	CallExpression	it -> first . c_str ( )		3611156	0					
ANR	3611350	Callee	it -> first . c_str		3611156	0					
ANR	3611351	MemberAccess	it -> first . c_str		3611156	0					
ANR	3611352	PtrMemberAccess	it -> first		3611156	0					
ANR	3611353	Identifier	it		3611156	0					
ANR	3611354	Identifier	first		3611156	1					
ANR	3611355	Identifier	c_str		3611156	1					
ANR	3611356	ArgumentList			3611156	1					
ANR	3611357	CompoundStatement		45:42:1246:1246	3611156	1					
ANR	3611358	ExpressionStatement	"m_monitor -> add_member_to_family ( it -> second , pi , ""CGROUP"" )"	103:4:2898:2955	3611156	0	True				
ANR	3611359	CallExpression	"m_monitor -> add_member_to_family ( it -> second , pi , ""CGROUP"" )"		3611156	0					
ANR	3611360	Callee	m_monitor -> add_member_to_family		3611156	0					
ANR	3611361	PtrMemberAccess	m_monitor -> add_member_to_family		3611156	0					
ANR	3611362	Identifier	m_monitor		3611156	0					
ANR	3611363	Identifier	add_member_to_family		3611156	1					
ANR	3611364	ArgumentList	it -> second		3611156	1					
ANR	3611365	Argument	it -> second		3611156	0					
ANR	3611366	PtrMemberAccess	it -> second		3611156	0					
ANR	3611367	Identifier	it		3611156	0					
ANR	3611368	Identifier	second		3611156	1					
ANR	3611369	Argument	pi		3611156	1					
ANR	3611370	Identifier	pi		3611156	0					
ANR	3611371	Argument	"""CGROUP"""		3611156	2					
ANR	3611372	PrimaryExpression	"""CGROUP"""		3611156	0					
ANR	3611373	ExpressionStatement	found_cgroup = true	104:4:2961:2980	3611156	1	True				
ANR	3611374	AssignmentExpression	found_cgroup = true		3611156	0		=			
ANR	3611375	Identifier	found_cgroup		3611156	0					
ANR	3611376	Identifier	true		3611156	1					
ANR	3611377	IfStatement	if ( ! found_cgroup )		3611156	10					
ANR	3611378	Condition	! found_cgroup	108:5:2999:3011	3611156	0	True				
ANR	3611379	UnaryOperationExpression	! found_cgroup		3611156	0					
ANR	3611380	UnaryOperator	!		3611156	0					
ANR	3611381	Identifier	found_cgroup		3611156	1					
ANR	3611382	CompoundStatement		51:20:1368:1368	3611156	1					
ANR	3611383	IfStatement	if ( ! feof ( fp ) )		3611156	0					
ANR	3611384	Condition	! feof ( fp )	109:6:3022:3030	3611156	0	True				
ANR	3611385	UnaryOperationExpression	! feof ( fp )		3611156	0					
ANR	3611386	UnaryOperator	!		3611156	0					
ANR	3611387	CallExpression	feof ( fp )		3611156	1					
ANR	3611388	Callee	feof		3611156	0					
ANR	3611389	Identifier	feof		3611156	0					
ANR	3611390	ArgumentList	fp		3611156	1					
ANR	3611391	Argument	fp		3611156	0					
ANR	3611392	Identifier	fp		3611156	0					
ANR	3611393	CompoundStatement		52:17:1387:1387	3611156	1					
ANR	3611394	Statement	dprintf	110:3:3038:3044	3611156	0	True				
ANR	3611395	Statement	(	110:10:3045:3045	3611156	1	True				
ANR	3611396	Statement	D_ALWAYS	110:11:3046:3053	3611156	2	True				
ANR	3611397	Statement	","	110:19:3054:3054	3611156	3	True				
ANR	3611398	Statement	"""CGroupTracker (pid = %u): """	111:4:3060:3087	3611156	4	True				
ANR	3611399	Statement	"""error reading from status file: %s (%d)\\n"""	112:4:3093:3135	3611156	5	True				
ANR	3611400	Statement	","	112:47:3136:3136	3611156	6	True				
ANR	3611401	Statement	pi	113:4:3142:3143	3611156	7	True				
ANR	3611402	Statement	->	113:6:3144:3145	3611156	8	True				
ANR	3611403	Statement	pid	113:8:3146:3148	3611156	9	True				
ANR	3611404	Statement	","	113:11:3149:3149	3611156	10	True				
ANR	3611405	Statement	strerror	114:4:3155:3162	3611156	11	True				
ANR	3611406	Statement	(	114:12:3163:3163	3611156	12	True				
ANR	3611407	Statement	errno	114:13:3164:3168	3611156	13	True				
ANR	3611408	Statement	)	114:18:3169:3169	3611156	14	True				
ANR	3611409	Statement	","	114:19:3170:3170	3611156	15	True				
ANR	3611410	Statement	errno	115:4:3176:3180	3611156	16	True				
ANR	3611411	Statement	)	115:9:3181:3181	3611156	17	True				
ANR	3611412	ExpressionStatement		115:10:3182:3182	3611156	18	True				
ANR	3611413	ExpressionStatement	fclose ( fp )	117:2:3190:3200	3611156	1	True				
ANR	3611414	CallExpression	fclose ( fp )		3611156	0					
ANR	3611415	Callee	fclose		3611156	0					
ANR	3611416	Identifier	fclose		3611156	0					
ANR	3611417	ArgumentList	fp		3611156	1					
ANR	3611418	Argument	fp		3611156	0					
ANR	3611419	Identifier	fp		3611156	0					
ANR	3611420	ReturnStatement	return false ;	118:2:3204:3216	3611156	2	True				
ANR	3611421	Identifier	false		3611156	0					
ANR	3611422	ExpressionStatement	fclose ( fp )	120:1:3222:3232	3611156	11	True				
ANR	3611423	CallExpression	fclose ( fp )		3611156	0					
ANR	3611424	Callee	fclose		3611156	0					
ANR	3611425	Identifier	fclose		3611156	0					
ANR	3611426	ArgumentList	fp		3611156	1					
ANR	3611427	Argument	fp		3611156	0					
ANR	3611428	Identifier	fp		3611156	0					
ANR	3611429	IdentifierDeclStatement	int line_len = strlen ( buffer ) ;	124:1:3283:3312	3611156	12	True				
ANR	3611430	IdentifierDecl	line_len = strlen ( buffer )		3611156	0					
ANR	3611431	IdentifierDeclType	int		3611156	0					
ANR	3611432	Identifier	line_len		3611156	1					
ANR	3611433	AssignmentExpression	line_len = strlen ( buffer )		3611156	2		=			
ANR	3611434	Identifier	line_len		3611156	0					
ANR	3611435	CallExpression	strlen ( buffer )		3611156	1					
ANR	3611436	Callee	strlen		3611156	0					
ANR	3611437	Identifier	strlen		3611156	0					
ANR	3611438	ArgumentList	buffer		3611156	1					
ANR	3611439	Argument	buffer		3611156	0					
ANR	3611440	Identifier	buffer		3611156	0					
ANR	3611441	IfStatement	if ( buffer [ line_len - 1 ] != '\\n' )		3611156	13					
ANR	3611442	Condition	buffer [ line_len - 1 ] != '\\n'	125:5:3319:3346	3611156	0	True				
ANR	3611443	EqualityExpression	buffer [ line_len - 1 ] != '\\n'		3611156	0		!=			
ANR	3611444	ArrayIndexing	buffer [ line_len - 1 ]		3611156	0					
ANR	3611445	Identifier	buffer		3611156	0					
ANR	3611446	AdditiveExpression	line_len - 1		3611156	1		-			
ANR	3611447	Identifier	line_len		3611156	0					
ANR	3611448	PrimaryExpression	1		3611156	1					
ANR	3611449	PrimaryExpression	'\\n'		3611156	1					
ANR	3611450	CompoundStatement		68:35:1703:1703	3611156	1					
ANR	3611451	Statement	dprintf	126:2:3353:3359	3611156	0	True				
ANR	3611452	Statement	(	126:9:3360:3360	3611156	1	True				
ANR	3611453	Statement	D_ALWAYS	126:10:3361:3368	3611156	2	True				
ANR	3611454	Statement	","	126:18:3369:3369	3611156	3	True				
ANR	3611455	Statement	"""GroupTracker (pid = %u): """	127:3:3374:3400	3611156	4	True				
ANR	3611456	Statement	"""read partial line from status file\\n"""	128:3:3405:3442	3611156	5	True				
ANR	3611457	Statement	","	128:41:3443:3443	3611156	6	True				
ANR	3611458	Statement	pi	129:3:3448:3449	3611156	7	True				
ANR	3611459	Statement	->	129:5:3450:3451	3611156	8	True				
ANR	3611460	Statement	pid	129:7:3452:3454	3611156	9	True				
ANR	3611461	Statement	)	129:10:3455:3455	3611156	10	True				
ANR	3611462	ExpressionStatement		129:11:3456:3456	3611156	11	True				
ANR	3611463	ReturnStatement	return false ;	130:2:3460:3472	3611156	12	True				
ANR	3611464	Identifier	false		3611156	0					
ANR	3611465	ReturnStatement	return true ;	132:1:3478:3489	3611156	14	True				
ANR	3611466	Identifier	true		3611156	0					
ANR	3611467	ReturnType	bool		3611156	1					
ANR	3611468	Identifier	CGroupTracker :: check_process		3611156	2					
ANR	3611469	ParameterList	procInfo * pi		3611156	3					
ANR	3611470	Parameter	procInfo * pi	57:29:1631:1642	3611156	0	True				
ANR	3611471	ParameterType	procInfo *		3611156	0					
ANR	3611472	Identifier	pi		3611156	1					
ANR	3611473	CFGEntryNode	ENTRY		3611156		True				
ANR	3611474	CFGExitNode	EXIT		3611156		True				
ANR	3611475	Symbol	fp		3611156						
ANR	3611476	Symbol	fgets		3611156						
ANR	3611477	Symbol	path		3611156						
ANR	3611478	Symbol	strlen		3611156						
ANR	3611479	Symbol	line_len		3611156						
ANR	3611480	Symbol	end		3611156						
ANR	3611481	Symbol	m_cgroup_pool . end		3611156						
ANR	3611482	Symbol	buffer		3611156						
ANR	3611483	Symbol	snprintf		3611156						
ANR	3611484	Symbol	ret		3611156						
ANR	3611485	Symbol	m_cgroup_pool . begin		3611156						
ANR	3611486	Symbol	errno		3611156						
ANR	3611487	Symbol	* buffer		3611156						
ANR	3611488	Symbol	NULL		3611156						
ANR	3611489	Symbol	safe_fopen_wrapper		3611156						
ANR	3611490	Symbol	D_ALWAYS		3611156						
ANR	3611491	Symbol	false		3611156						
ANR	3611492	Symbol	it		3611156						
ANR	3611493	Symbol	m_monitor		3611156						
ANR	3611494	Symbol	strerror		3611156						
ANR	3611495	Symbol	it -> second		3611156						
ANR	3611496	Symbol	* it		3611156						
ANR	3611497	Symbol	pi -> pid		3611156						
ANR	3611498	Symbol	it -> first		3611156						
ANR	3611499	Symbol	strstr		3611156						
ANR	3611500	Symbol	it -> first . c_str		3611156						
ANR	3611501	Symbol	true		3611156						
ANR	3611502	Symbol	* line_len		3611156						
ANR	3611503	Symbol	pi		3611156						
ANR	3611504	Symbol	found_cgroup		3611156						
ANR	3611505	Symbol	feof		3611156						
ANR	3611506	Symbol	m_cgroup_pool		3611156						
ANR	3611507	Symbol	* pi		3611156						
