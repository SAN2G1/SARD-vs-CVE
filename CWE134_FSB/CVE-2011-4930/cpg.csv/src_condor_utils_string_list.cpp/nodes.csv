command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4903753	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_string_list.cpp								
ANR	4903754	DeclStmt									
ANR	4903755	Decl							char	char * ( const char * )	strnewp
ANR	4903756	Function	StringList :: isSeparator	36:0:1227:1372							
ANR	4903757	FunctionDef	StringList :: isSeparator (char x)		4903756	0					
ANR	4903758	CompoundStatement		38:0:1265:1372	4903756	0					
ANR	4903759	ForStatement	for ( char * sep = m_delimiters ; * sep ; sep ++ )		4903756	0					
ANR	4903760	ForInit	char * sep = m_delimiters ;	39:7:1274:1298	4903756	0	True				
ANR	4903761	IdentifierDeclStatement	char * sep = m_delimiters ;		4903756	0					
ANR	4903762	IdentifierDecl	* sep = m_delimiters		4903756	0					
ANR	4903763	IdentifierDeclType	char *		4903756	0					
ANR	4903764	Identifier	sep		4903756	1					
ANR	4903765	AssignmentExpression	* sep = m_delimiters		4903756	2		=			
ANR	4903766	Identifier	m_delimiters		4903756	0					
ANR	4903767	Identifier	m_delimiters		4903756	1					
ANR	4903768	Condition	* sep	39:33:1300:1303	4903756	1	True				
ANR	4903769	UnaryOperationExpression	* sep		4903756	0					
ANR	4903770	UnaryOperator	*		4903756	0					
ANR	4903771	Identifier	sep		4903756	1					
ANR	4903772	PostIncDecOperationExpression	sep ++	39:39:1306:1310	4903756	2	True				
ANR	4903773	Identifier	sep		4903756	0					
ANR	4903774	IncDec	++		4903756	1					
ANR	4903775	CompoundStatement		2:47:48:48	4903756	3					
ANR	4903776	IfStatement	if ( x == ( * sep ) )		4903756	0					
ANR	4903777	Condition	x == ( * sep )	40:7:1323:1335	4903756	0	True				
ANR	4903778	EqualityExpression	x == ( * sep )		4903756	0		==			
ANR	4903779	Identifier	x		4903756	0					
ANR	4903780	UnaryOperationExpression	* sep		4903756	1					
ANR	4903781	UnaryOperator	*		4903756	0					
ANR	4903782	Identifier	sep		4903756	1					
ANR	4903783	CompoundStatement		3:23:73:73	4903756	1					
ANR	4903784	ReturnStatement	return 1 ;	41:3:1344:1352	4903756	0	True				
ANR	4903785	PrimaryExpression	1		4903756	0					
ANR	4903786	ReturnStatement	return 0 ;	44:1:1362:1370	4903756	1	True				
ANR	4903787	PrimaryExpression	0		4903756	0					
ANR	4903788	ReturnType	int		4903756	1					
ANR	4903789	Identifier	StringList :: isSeparator		4903756	2					
ANR	4903790	ParameterList	char x		4903756	3					
ANR	4903791	Parameter	char x	37:25:1256:1261	4903756	0	True				
ANR	4903792	ParameterType	char		4903756	0					
ANR	4903793	Identifier	x		4903756	1					
ANR	4903794	CFGEntryNode	ENTRY		4903756		True				
ANR	4903795	CFGExitNode	EXIT		4903756		True				
ANR	4903796	Symbol	m_delimiters		4903756						
ANR	4903797	Symbol	x		4903756						
ANR	4903798	Symbol	* sep		4903756						
ANR	4903799	Symbol	sep		4903756						
ANR	4903800	Function	StringList :: StringList	47:0:1375:1574							
ANR	4903801	FunctionDef	"StringList :: StringList (const char * s , const char * delim)"		4903800	0					
ANR	4903802	CompoundStatement		48:0:1434:1574	4903800	0					
ANR	4903803	IfStatement	if ( delim )		4903800	0					
ANR	4903804	Condition	delim	49:6:1442:1446	4903800	0	True				
ANR	4903805	Identifier	delim		4903800	0					
ANR	4903806	CompoundStatement		2:14:15:15	4903800	1					
ANR	4903807	ExpressionStatement	m_delimiters = strnewp ( delim )	50:2:1454:1485	4903800	0	True				
ANR	4903808	AssignmentExpression	m_delimiters = strnewp ( delim )		4903800	0		=			
ANR	4903809	Identifier	m_delimiters		4903800	0					
ANR	4903810	CallExpression	strnewp ( delim )		4903800	1					
ANR	4903811	Callee	strnewp		4903800	0					
ANR	4903812	Identifier	strnewp		4903800	0					
ANR	4903813	ArgumentList	delim		4903800	1					
ANR	4903814	Argument	delim		4903800	0					
ANR	4903815	Identifier	delim		4903800	0					
ANR	4903816	ElseStatement	else		4903800	0					
ANR	4903817	CompoundStatement		4:8:60:60	4903800	0					
ANR	4903818	ExpressionStatement	"m_delimiters = strnewp ( """" )"	52:2:1499:1527	4903800	0	True				
ANR	4903819	AssignmentExpression	"m_delimiters = strnewp ( """" )"		4903800	0		=			
ANR	4903820	Identifier	m_delimiters		4903800	0					
ANR	4903821	CallExpression	"strnewp ( """" )"		4903800	1					
ANR	4903822	Callee	strnewp		4903800	0					
ANR	4903823	Identifier	strnewp		4903800	0					
ANR	4903824	ArgumentList	""""""		4903800	1					
ANR	4903825	Argument	""""""		4903800	0					
ANR	4903826	PrimaryExpression	""""""		4903800	0					
ANR	4903827	IfStatement	if ( s )		4903800	1					
ANR	4903828	Condition	s	54:6:1538:1538	4903800	0	True				
ANR	4903829	Identifier	s		4903800	0					
ANR	4903830	CompoundStatement		7:10:107:107	4903800	1					
ANR	4903831	ExpressionStatement	initializeFromString ( s )	55:2:1546:1569	4903800	0	True				
ANR	4903832	CallExpression	initializeFromString ( s )		4903800	0					
ANR	4903833	Callee	initializeFromString		4903800	0					
ANR	4903834	Identifier	initializeFromString		4903800	0					
ANR	4903835	ArgumentList	s		4903800	1					
ANR	4903836	Argument	s		4903800	0					
ANR	4903837	Identifier	s		4903800	0					
ANR	4903838	Identifier	StringList :: StringList		4903800	1					
ANR	4903839	ParameterList	"const char * s , const char * delim"		4903800	2					
ANR	4903840	Parameter	const char * s	47:23:1398:1410	4903800	0	True				
ANR	4903841	ParameterType	const char *		4903800	0					
ANR	4903842	Identifier	s		4903800	1					
ANR	4903843	Parameter	const char * delim	47:38:1413:1429	4903800	1	True				
ANR	4903844	ParameterType	const char *		4903800	0					
ANR	4903845	Identifier	delim		4903800	1					
ANR	4903846	CFGEntryNode	ENTRY		4903800		True				
ANR	4903847	CFGExitNode	EXIT		4903800		True				
ANR	4903848	Symbol	s		4903800						
ANR	4903849	Symbol	m_delimiters		4903800						
ANR	4903850	Symbol	strnewp		4903800						
ANR	4903851	Symbol	delim		4903800						
ANR	4903852	Function	StringList :: StringList	59:0:1577:2118							
ANR	4903853	FunctionDef	StringList :: StringList (const StringList & other)		4903852	0					
ANR	4903854	CompoundStatement		61:0:1652:2118	4903852	0					
ANR	4903855	IdentifierDeclStatement	char * str ;	62:1:1655:1667	4903852	0	True				
ANR	4903856	IdentifierDecl	* str		4903852	0					
ANR	4903857	IdentifierDeclType	char *		4903852	0					
ANR	4903858	Identifier	str		4903852	1					
ANR	4903859	IdentifierDeclStatement	ListIterator < char > iter ;	63:1:1670:1694	4903852	1	True				
ANR	4903860	IdentifierDecl	iter		4903852	0					
ANR	4903861	IdentifierDeclType	ListIterator < char >		4903852	0					
ANR	4903862	Identifier	iter		4903852	1					
ANR	4903863	IdentifierDeclStatement	const char * delim = other . getDelimiters ( ) ;	65:1:1698:1739	4903852	2	True				
ANR	4903864	IdentifierDecl	* delim = other . getDelimiters ( )		4903852	0					
ANR	4903865	IdentifierDeclType	const char *		4903852	0					
ANR	4903866	Identifier	delim		4903852	1					
ANR	4903867	AssignmentExpression	* delim = other . getDelimiters ( )		4903852	2		=			
ANR	4903868	Identifier	delim		4903852	0					
ANR	4903869	CallExpression	other . getDelimiters ( )		4903852	1					
ANR	4903870	Callee	other . getDelimiters		4903852	0					
ANR	4903871	MemberAccess	other . getDelimiters		4903852	0					
ANR	4903872	Identifier	other		4903852	0					
ANR	4903873	Identifier	getDelimiters		4903852	1					
ANR	4903874	ArgumentList			4903852	1					
ANR	4903875	IfStatement	if ( delim )		4903852	3					
ANR	4903876	Condition	delim	66:6:1747:1751	4903852	0	True				
ANR	4903877	Identifier	delim		4903852	0					
ANR	4903878	CompoundStatement		6:14:102:102	4903852	1					
ANR	4903879	ExpressionStatement	m_delimiters = strnewp ( delim )	67:2:1759:1790	4903852	0	True				
ANR	4903880	AssignmentExpression	m_delimiters = strnewp ( delim )		4903852	0		=			
ANR	4903881	Identifier	m_delimiters		4903852	0					
ANR	4903882	CallExpression	strnewp ( delim )		4903852	1					
ANR	4903883	Callee	strnewp		4903852	0					
ANR	4903884	Identifier	strnewp		4903852	0					
ANR	4903885	ArgumentList	delim		4903852	1					
ANR	4903886	Argument	delim		4903852	0					
ANR	4903887	Identifier	delim		4903852	0					
ANR	4903888	ExpressionStatement	iter . Initialize ( other . getList ( ) )	71:1:1867:1901	4903852	4	True				
ANR	4903889	CallExpression	iter . Initialize ( other . getList ( ) )		4903852	0					
ANR	4903890	Callee	iter . Initialize		4903852	0					
ANR	4903891	MemberAccess	iter . Initialize		4903852	0					
ANR	4903892	Identifier	iter		4903852	0					
ANR	4903893	Identifier	Initialize		4903852	1					
ANR	4903894	ArgumentList	other . getList ( )		4903852	1					
ANR	4903895	Argument	other . getList ( )		4903852	0					
ANR	4903896	CallExpression	other . getList ( )		4903852	0					
ANR	4903897	Callee	other . getList		4903852	0					
ANR	4903898	MemberAccess	other . getList		4903852	0					
ANR	4903899	Identifier	other		4903852	0					
ANR	4903900	Identifier	getList		4903852	1					
ANR	4903901	ArgumentList			4903852	1					
ANR	4903902	ExpressionStatement	iter . ToBeforeFirst ( )	72:1:1904:1925	4903852	5	True				
ANR	4903903	CallExpression	iter . ToBeforeFirst ( )		4903852	0					
ANR	4903904	Callee	iter . ToBeforeFirst		4903852	0					
ANR	4903905	MemberAccess	iter . ToBeforeFirst		4903852	0					
ANR	4903906	Identifier	iter		4903852	0					
ANR	4903907	Identifier	ToBeforeFirst		4903852	1					
ANR	4903908	ArgumentList			4903852	1					
ANR	4903909	WhileStatement	while ( iter . Next ( str ) )		4903852	6					
ANR	4903910	Condition	iter . Next ( str )	73:9:1936:1949	4903852	0	True				
ANR	4903911	CallExpression	iter . Next ( str )		4903852	0					
ANR	4903912	Callee	iter . Next		4903852	0					
ANR	4903913	MemberAccess	iter . Next		4903852	0					
ANR	4903914	Identifier	iter		4903852	0					
ANR	4903915	Identifier	Next		4903852	1					
ANR	4903916	ArgumentList	str		4903852	1					
ANR	4903917	Argument	str		4903852	0					
ANR	4903918	Identifier	str		4903852	0					
ANR	4903919	CompoundStatement		14:2:304:329	4903852	1					
ANR	4903920	IdentifierDeclStatement	char * dup = strdup ( str ) ;	74:2:1957:1982	4903852	0	True				
ANR	4903921	IdentifierDecl	* dup = strdup ( str )		4903852	0					
ANR	4903922	IdentifierDeclType	char *		4903852	0					
ANR	4903923	Identifier	dup		4903852	1					
ANR	4903924	AssignmentExpression	* dup = strdup ( str )		4903852	2		=			
ANR	4903925	Identifier	dup		4903852	0					
ANR	4903926	CallExpression	strdup ( str )		4903852	1					
ANR	4903927	Callee	strdup		4903852	0					
ANR	4903928	Identifier	strdup		4903852	0					
ANR	4903929	ArgumentList	str		4903852	1					
ANR	4903930	Argument	str		4903852	0					
ANR	4903931	Identifier	str		4903852	0					
ANR	4903932	ExpressionStatement	ASSERT ( dup )	75:2:1986:1999	4903852	1	True				
ANR	4903933	CallExpression	ASSERT ( dup )		4903852	0					
ANR	4903934	Callee	ASSERT		4903852	0					
ANR	4903935	Identifier	ASSERT		4903852	0					
ANR	4903936	ArgumentList	dup		4903852	1					
ANR	4903937	Argument	dup		4903852	0					
ANR	4903938	Identifier	dup		4903852	0					
ANR	4903939	ExpressionStatement	m_strings . Append ( dup )	76:2:2003:2026	4903852	2	True				
ANR	4903940	CallExpression	m_strings . Append ( dup )		4903852	0					
ANR	4903941	Callee	m_strings . Append		4903852	0					
ANR	4903942	MemberAccess	m_strings . Append		4903852	0					
ANR	4903943	Identifier	m_strings		4903852	0					
ANR	4903944	Identifier	Append		4903852	1					
ANR	4903945	ArgumentList	dup		4903852	1					
ANR	4903946	Argument	dup		4903852	0					
ANR	4903947	Identifier	dup		4903852	0					
ANR	4903948	IfStatement	if ( other . getDelimiters ( ) )		4903852	7					
ANR	4903949	Condition	other . getDelimiters ( )	78:6:2037:2058	4903852	0	True				
ANR	4903950	CallExpression	other . getDelimiters ( )		4903852	0					
ANR	4903951	Callee	other . getDelimiters		4903852	0					
ANR	4903952	MemberAccess	other . getDelimiters		4903852	0					
ANR	4903953	Identifier	other		4903852	0					
ANR	4903954	Identifier	getDelimiters		4903852	1					
ANR	4903955	ArgumentList			4903852	1					
ANR	4903956	CompoundStatement		18:31:409:409	4903852	1					
ANR	4903957	ExpressionStatement	m_delimiters = strnewp ( other . getDelimiters ( ) )	79:2:2066:2113	4903852	0	True				
ANR	4903958	AssignmentExpression	m_delimiters = strnewp ( other . getDelimiters ( ) )		4903852	0		=			
ANR	4903959	Identifier	m_delimiters		4903852	0					
ANR	4903960	CallExpression	strnewp ( other . getDelimiters ( ) )		4903852	1					
ANR	4903961	Callee	strnewp		4903852	0					
ANR	4903962	Identifier	strnewp		4903852	0					
ANR	4903963	ArgumentList	other . getDelimiters ( )		4903852	1					
ANR	4903964	Argument	other . getDelimiters ( )		4903852	0					
ANR	4903965	CallExpression	other . getDelimiters ( )		4903852	0					
ANR	4903966	Callee	other . getDelimiters		4903852	0					
ANR	4903967	MemberAccess	other . getDelimiters		4903852	0					
ANR	4903968	Identifier	other		4903852	0					
ANR	4903969	Identifier	getDelimiters		4903852	1					
ANR	4903970	ArgumentList			4903852	1					
ANR	4903971	Identifier	StringList :: StringList		4903852	1					
ANR	4903972	ParameterList	const StringList & other		4903852	2					
ANR	4903973	Parameter	const StringList & other	59:24:1601:1623	4903852	0	True				
ANR	4903974	ParameterType	const StringList &		4903852	0					
ANR	4903975	Identifier	other		4903852	1					
ANR	4903976	CFGEntryNode	ENTRY		4903852		True				
ANR	4903977	CFGExitNode	EXIT		4903852		True				
ANR	4903978	Symbol	str		4903852						
ANR	4903979	Symbol	other . getDelimiters		4903852						
ANR	4903980	Symbol	other		4903852						
ANR	4903981	Symbol	m_delimiters		4903852						
ANR	4903982	Symbol	iter . Next		4903852						
ANR	4903983	Symbol	iter		4903852						
ANR	4903984	Symbol	strnewp		4903852						
ANR	4903985	Symbol	m_strings		4903852						
ANR	4903986	Symbol	strdup		4903852						
ANR	4903987	Symbol	other . getList		4903852						
ANR	4903988	Symbol	dup		4903852						
ANR	4903989	Symbol	delim		4903852						
ANR	4903990	Function	StringList :: initializeFromString	83:0:2121:3206							
ANR	4903991	FunctionDef	StringList :: initializeFromString (const char * s)		4903990	0					
ANR	4903992	CompoundStatement		85:0:2175:3206	4903990	0					
ANR	4903993	IfStatement	if ( ! s )		4903990	0					
ANR	4903994	Condition	! s	86:4:2181:2182	4903990	0	True				
ANR	4903995	UnaryOperationExpression	! s		4903990	0					
ANR	4903996	UnaryOperator	!		4903990	0					
ANR	4903997	Identifier	s		4903990	1					
ANR	4903998	CompoundStatement		3:1:11:11	4903990	1					
ANR	4903999	ExpressionStatement	"EXCEPT ( ""StringList::initializeFromString passed a null pointer"" )"	88:2:2191:2255	4903990	0	True				
ANR	4904000	CallExpression	"EXCEPT ( ""StringList::initializeFromString passed a null pointer"" )"		4903990	0					
ANR	4904001	Callee	EXCEPT		4903990	0					
ANR	4904002	Identifier	EXCEPT		4903990	0					
ANR	4904003	ArgumentList	"""StringList::initializeFromString passed a null pointer"""		4903990	1					
ANR	4904004	Argument	"""StringList::initializeFromString passed a null pointer"""		4903990	0					
ANR	4904005	PrimaryExpression	"""StringList::initializeFromString passed a null pointer"""		4903990	0					
ANR	4904006	IdentifierDeclStatement	const char * walk_ptr = s ;	97:1:2503:2527	4903990	1	True				
ANR	4904007	IdentifierDecl	* walk_ptr = s		4903990	0					
ANR	4904008	IdentifierDeclType	const char *		4903990	0					
ANR	4904009	Identifier	walk_ptr		4903990	1					
ANR	4904010	AssignmentExpression	* walk_ptr = s		4903990	2		=			
ANR	4904011	Identifier	s		4903990	0					
ANR	4904012	Identifier	s		4903990	1					
ANR	4904013	WhileStatement	while ( * walk_ptr != '\\0' )		4903990	2					
ANR	4904014	Condition	* walk_ptr != '\\0'	99:8:2538:2554	4903990	0	True				
ANR	4904015	EqualityExpression	* walk_ptr != '\\0'		4903990	0		!=			
ANR	4904016	UnaryOperationExpression	* walk_ptr		4903990	0					
ANR	4904017	UnaryOperator	*		4903990	0					
ANR	4904018	Identifier	walk_ptr		4903990	1					
ANR	4904019	PrimaryExpression	'\\0'		4903990	1					
ANR	4904020	CompoundStatement		34:2:840:883	4903990	1					
ANR	4904021	WhileStatement	while ( ( isSeparator ( * walk_ptr ) || isspace ( * walk_ptr ) ) && * walk_ptr != '\\0' )		4903990	0					
ANR	4904022	Condition	( isSeparator ( * walk_ptr ) || isspace ( * walk_ptr ) ) && * walk_ptr != '\\0'	102:9:2611:2684	4903990	0	True				
ANR	4904023	AndExpression	( isSeparator ( * walk_ptr ) || isspace ( * walk_ptr ) ) && * walk_ptr != '\\0'		4903990	0		&&			
ANR	4904024	OrExpression	isSeparator ( * walk_ptr ) || isspace ( * walk_ptr )		4903990	0		||			
ANR	4904025	CallExpression	isSeparator ( * walk_ptr )		4903990	0					
ANR	4904026	Callee	isSeparator		4903990	0					
ANR	4904027	Identifier	isSeparator		4903990	0					
ANR	4904028	ArgumentList	* walk_ptr		4903990	1					
ANR	4904029	Argument	* walk_ptr		4903990	0					
ANR	4904030	UnaryOperationExpression	* walk_ptr		4903990	0					
ANR	4904031	UnaryOperator	*		4903990	0					
ANR	4904032	Identifier	walk_ptr		4903990	1					
ANR	4904033	CallExpression	isspace ( * walk_ptr )		4903990	1					
ANR	4904034	Callee	isspace		4903990	0					
ANR	4904035	Identifier	isspace		4903990	0					
ANR	4904036	ArgumentList	* walk_ptr		4903990	1					
ANR	4904037	Argument	* walk_ptr		4903990	0					
ANR	4904038	UnaryOperationExpression	* walk_ptr		4903990	0					
ANR	4904039	UnaryOperator	*		4903990	0					
ANR	4904040	Identifier	walk_ptr		4903990	1					
ANR	4904041	EqualityExpression	* walk_ptr != '\\0'		4903990	1		!=			
ANR	4904042	UnaryOperationExpression	* walk_ptr		4903990	0					
ANR	4904043	UnaryOperator	*		4903990	0					
ANR	4904044	Identifier	walk_ptr		4903990	1					
ANR	4904045	PrimaryExpression	'\\0'		4903990	1					
ANR	4904046	ExpressionStatement	walk_ptr ++	104:3:2691:2701	4903990	1	True				
ANR	4904047	PostIncDecOperationExpression	walk_ptr ++		4903990	0					
ANR	4904048	Identifier	walk_ptr		4903990	0					
ANR	4904049	IncDec	++		4903990	1					
ANR	4904050	IfStatement	if ( * walk_ptr == '\\0' )		4903990	1					
ANR	4904051	Condition	* walk_ptr == '\\0'	106:6:2710:2726	4903990	0	True				
ANR	4904052	EqualityExpression	* walk_ptr == '\\0'		4903990	0		==			
ANR	4904053	UnaryOperationExpression	* walk_ptr		4903990	0					
ANR	4904054	UnaryOperator	*		4903990	0					
ANR	4904055	Identifier	walk_ptr		4903990	1					
ANR	4904056	PrimaryExpression	'\\0'		4903990	1					
ANR	4904057	BreakStatement	break ;	107:3:2732:2737	4903990	1	True				
ANR	4904058	IdentifierDeclStatement	const char * begin_ptr = walk_ptr ;	110:2:2794:2826	4903990	2	True				
ANR	4904059	IdentifierDecl	* begin_ptr = walk_ptr		4903990	0					
ANR	4904060	IdentifierDeclType	const char *		4903990	0					
ANR	4904061	Identifier	begin_ptr		4903990	1					
ANR	4904062	AssignmentExpression	* begin_ptr = walk_ptr		4903990	2		=			
ANR	4904063	Identifier	walk_ptr		4903990	0					
ANR	4904064	Identifier	walk_ptr		4903990	1					
ANR	4904065	WhileStatement	while ( ! isSeparator ( * walk_ptr ) && * walk_ptr != '\\0' )		4903990	3					
ANR	4904066	Condition	! isSeparator ( * walk_ptr ) && * walk_ptr != '\\0'	113:9:2874:2918	4903990	0	True				
ANR	4904067	AndExpression	! isSeparator ( * walk_ptr ) && * walk_ptr != '\\0'		4903990	0		&&			
ANR	4904068	UnaryOperationExpression	! isSeparator ( * walk_ptr )		4903990	0					
ANR	4904069	UnaryOperator	!		4903990	0					
ANR	4904070	CallExpression	isSeparator ( * walk_ptr )		4903990	1					
ANR	4904071	Callee	isSeparator		4903990	0					
ANR	4904072	Identifier	isSeparator		4903990	0					
ANR	4904073	ArgumentList	* walk_ptr		4903990	1					
ANR	4904074	Argument	* walk_ptr		4903990	0					
ANR	4904075	UnaryOperationExpression	* walk_ptr		4903990	0					
ANR	4904076	UnaryOperator	*		4903990	0					
ANR	4904077	Identifier	walk_ptr		4903990	1					
ANR	4904078	EqualityExpression	* walk_ptr != '\\0'		4903990	1		!=			
ANR	4904079	UnaryOperationExpression	* walk_ptr		4903990	0					
ANR	4904080	UnaryOperator	*		4903990	0					
ANR	4904081	Identifier	walk_ptr		4903990	1					
ANR	4904082	PrimaryExpression	'\\0'		4903990	1					
ANR	4904083	ExpressionStatement	walk_ptr ++	114:3:2924:2934	4903990	1	True				
ANR	4904084	PostIncDecOperationExpression	walk_ptr ++		4903990	0					
ANR	4904085	Identifier	walk_ptr		4903990	0					
ANR	4904086	IncDec	++		4903990	1					
ANR	4904087	IdentifierDeclStatement	int len = ( walk_ptr - begin_ptr ) ;	117:2:2980:3012	4903990	4	True				
ANR	4904088	IdentifierDecl	len = ( walk_ptr - begin_ptr )		4903990	0					
ANR	4904089	IdentifierDeclType	int		4903990	0					
ANR	4904090	Identifier	len		4903990	1					
ANR	4904091	AssignmentExpression	len = ( walk_ptr - begin_ptr )		4903990	2		=			
ANR	4904092	Identifier	len		4903990	0					
ANR	4904093	AdditiveExpression	walk_ptr - begin_ptr		4903990	1		-			
ANR	4904094	Identifier	walk_ptr		4903990	0					
ANR	4904095	Identifier	begin_ptr		4903990	1					
ANR	4904096	IdentifierDeclStatement	char * tmp_string = ( char * ) malloc ( 1 + len ) ;	118:2:3016:3059	4903990	5	True				
ANR	4904097	IdentifierDecl	* tmp_string = ( char * ) malloc ( 1 + len )		4903990	0					
ANR	4904098	IdentifierDeclType	char *		4903990	0					
ANR	4904099	Identifier	tmp_string		4903990	1					
ANR	4904100	AssignmentExpression	* tmp_string = ( char * ) malloc ( 1 + len )		4903990	2		=			
ANR	4904101	Identifier	tmp_string		4903990	0					
ANR	4904102	CastExpression	( char * ) malloc ( 1 + len )		4903990	1					
ANR	4904103	CastTarget	char *		4903990	0					
ANR	4904104	CallExpression	malloc ( 1 + len )		4903990	1					
ANR	4904105	Callee	malloc		4903990	0					
ANR	4904106	Identifier	malloc		4903990	0					
ANR	4904107	ArgumentList	1 + len		4903990	1					
ANR	4904108	Argument	1 + len		4903990	0					
ANR	4904109	AdditiveExpression	1 + len		4903990	0		+			
ANR	4904110	PrimaryExpression	1		4903990	0					
ANR	4904111	Identifier	len		4903990	1					
ANR	4904112	ExpressionStatement	"strncpy ( tmp_string , begin_ptr , len )"	119:2:3063:3099	4903990	6	True				
ANR	4904113	CallExpression	"strncpy ( tmp_string , begin_ptr , len )"		4903990	0					
ANR	4904114	Callee	strncpy		4903990	0					
ANR	4904115	Identifier	strncpy		4903990	0					
ANR	4904116	ArgumentList	tmp_string		4903990	1					
ANR	4904117	Argument	tmp_string		4903990	0					
ANR	4904118	Identifier	tmp_string		4903990	0					
ANR	4904119	Argument	begin_ptr		4903990	1					
ANR	4904120	Identifier	begin_ptr		4903990	0					
ANR	4904121	Argument	len		4903990	2					
ANR	4904122	Identifier	len		4903990	0					
ANR	4904123	ExpressionStatement	tmp_string [ len ] = '\\0'	120:2:3103:3125	4903990	7	True				
ANR	4904124	AssignmentExpression	tmp_string [ len ] = '\\0'		4903990	0		=			
ANR	4904125	ArrayIndexing	tmp_string [ len ]		4903990	0					
ANR	4904126	Identifier	tmp_string		4903990	0					
ANR	4904127	Identifier	len		4903990	1					
ANR	4904128	PrimaryExpression	'\\0'		4903990	1					
ANR	4904129	ExpressionStatement	m_strings . Append ( tmp_string )	123:2:3172:3201	4903990	8	True				
ANR	4904130	CallExpression	m_strings . Append ( tmp_string )		4903990	0					
ANR	4904131	Callee	m_strings . Append		4903990	0					
ANR	4904132	MemberAccess	m_strings . Append		4903990	0					
ANR	4904133	Identifier	m_strings		4903990	0					
ANR	4904134	Identifier	Append		4903990	1					
ANR	4904135	ArgumentList	tmp_string		4903990	1					
ANR	4904136	Argument	tmp_string		4903990	0					
ANR	4904137	Identifier	tmp_string		4903990	0					
ANR	4904138	ReturnType	void		4903990	1					
ANR	4904139	Identifier	StringList :: initializeFromString		4903990	2					
ANR	4904140	ParameterList	const char * s		4903990	3					
ANR	4904141	Parameter	const char * s	84:34:2160:2172	4903990	0	True				
ANR	4904142	ParameterType	const char *		4903990	0					
ANR	4904143	Identifier	s		4903990	1					
ANR	4904144	CFGEntryNode	ENTRY		4903990		True				
ANR	4904145	CFGExitNode	EXIT		4903990		True				
ANR	4904146	Symbol	* walk_ptr		4903990						
ANR	4904147	Symbol	malloc		4903990						
ANR	4904148	Symbol	* tmp_string		4903990						
ANR	4904149	Symbol	s		4903990						
ANR	4904150	Symbol	len		4903990						
ANR	4904151	Symbol	isspace		4903990						
ANR	4904152	Symbol	m_strings		4903990						
ANR	4904153	Symbol	begin_ptr		4903990						
ANR	4904154	Symbol	tmp_string		4903990						
ANR	4904155	Symbol	walk_ptr		4903990						
ANR	4904156	Symbol	isSeparator		4903990						
ANR	4904157	Symbol	* len		4903990						
ANR	4904158	Function	StringList :: print	127:0:3209:3330							
ANR	4904159	FunctionDef	StringList :: print ()		4904158	0					
ANR	4904160	CompoundStatement		129:0:3239:3330	4904158	0					
ANR	4904161	IdentifierDeclStatement	char * x ;	130:1:3242:3249	4904158	0	True				
ANR	4904162	IdentifierDecl	* x		4904158	0					
ANR	4904163	IdentifierDeclType	char *		4904158	0					
ANR	4904164	Identifier	x		4904158	1					
ANR	4904165	ExpressionStatement	m_strings . Rewind ( )	131:1:3252:3271	4904158	1	True				
ANR	4904166	CallExpression	m_strings . Rewind ( )		4904158	0					
ANR	4904167	Callee	m_strings . Rewind		4904158	0					
ANR	4904168	MemberAccess	m_strings . Rewind		4904158	0					
ANR	4904169	Identifier	m_strings		4904158	0					
ANR	4904170	Identifier	Rewind		4904158	1					
ANR	4904171	ArgumentList			4904158	1					
ANR	4904172	WhileStatement	while ( ( x = m_strings . Next ( ) ) )		4904158	2					
ANR	4904173	Condition	x = m_strings . Next ( )	132:8:3281:3303	4904158	0	True				
ANR	4904174	AssignmentExpression	x = m_strings . Next ( )		4904158	0		=			
ANR	4904175	Identifier	x		4904158	0					
ANR	4904176	CallExpression	m_strings . Next ( )		4904158	1					
ANR	4904177	Callee	m_strings . Next		4904158	0					
ANR	4904178	MemberAccess	m_strings . Next		4904158	0					
ANR	4904179	Identifier	m_strings		4904158	0					
ANR	4904180	Identifier	Next		4904158	1					
ANR	4904181	ArgumentList			4904158	1					
ANR	4904182	ExpressionStatement	"printf ( ""[%s]\\n"" , x )"	133:2:3308:3328	4904158	1	True				
ANR	4904183	CallExpression	"printf ( ""[%s]\\n"" , x )"		4904158	0					
ANR	4904184	Callee	printf		4904158	0					
ANR	4904185	Identifier	printf		4904158	0					
ANR	4904186	ArgumentList	"""[%s]\\n"""		4904158	1					
ANR	4904187	Argument	"""[%s]\\n"""		4904158	0					
ANR	4904188	PrimaryExpression	"""[%s]\\n"""		4904158	0					
ANR	4904189	Argument	x		4904158	1					
ANR	4904190	Identifier	x		4904158	0					
ANR	4904191	ReturnType	void		4904158	1					
ANR	4904192	Identifier	StringList :: print		4904158	2					
ANR	4904193	ParameterList			4904158	3					
ANR	4904194	CFGEntryNode	ENTRY		4904158		True				
ANR	4904195	CFGExitNode	EXIT		4904158		True				
ANR	4904196	Symbol	x		4904158						
ANR	4904197	Symbol	m_strings		4904158						
ANR	4904198	Symbol	m_strings . Next		4904158						
ANR	4904199	Function	StringList :: clearAll	136:0:3333:3453							
ANR	4904200	FunctionDef	StringList :: clearAll ()		4904199	0					
ANR	4904201	CompoundStatement		138:0:3361:3453	4904199	0					
ANR	4904202	IdentifierDeclStatement	char * x ;	139:1:3364:3371	4904199	0	True				
ANR	4904203	IdentifierDecl	* x		4904199	0					
ANR	4904204	IdentifierDeclType	char *		4904199	0					
ANR	4904205	Identifier	x		4904199	1					
ANR	4904206	ExpressionStatement	m_strings . Rewind ( )	140:1:3374:3393	4904199	1	True				
ANR	4904207	CallExpression	m_strings . Rewind ( )		4904199	0					
ANR	4904208	Callee	m_strings . Rewind		4904199	0					
ANR	4904209	MemberAccess	m_strings . Rewind		4904199	0					
ANR	4904210	Identifier	m_strings		4904199	0					
ANR	4904211	Identifier	Rewind		4904199	1					
ANR	4904212	ArgumentList			4904199	1					
ANR	4904213	WhileStatement	while ( ( x = m_strings . Next ( ) ) )		4904199	2					
ANR	4904214	Condition	x = m_strings . Next ( )	141:8:3403:3425	4904199	0	True				
ANR	4904215	AssignmentExpression	x = m_strings . Next ( )		4904199	0		=			
ANR	4904216	Identifier	x		4904199	0					
ANR	4904217	CallExpression	m_strings . Next ( )		4904199	1					
ANR	4904218	Callee	m_strings . Next		4904199	0					
ANR	4904219	MemberAccess	m_strings . Next		4904199	0					
ANR	4904220	Identifier	m_strings		4904199	0					
ANR	4904221	Identifier	Next		4904199	1					
ANR	4904222	ArgumentList			4904199	1					
ANR	4904223	CompoundStatement		5:1:67:67	4904199	1					
ANR	4904224	ExpressionStatement	deleteCurrent ( )	143:2:3433:3448	4904199	0	True				
ANR	4904225	CallExpression	deleteCurrent ( )		4904199	0					
ANR	4904226	Callee	deleteCurrent		4904199	0					
ANR	4904227	Identifier	deleteCurrent		4904199	0					
ANR	4904228	ArgumentList			4904199	1					
ANR	4904229	ReturnType	void		4904199	1					
ANR	4904230	Identifier	StringList :: clearAll		4904199	2					
ANR	4904231	ParameterList			4904199	3					
ANR	4904232	CFGEntryNode	ENTRY		4904199		True				
ANR	4904233	CFGExitNode	EXIT		4904199		True				
ANR	4904234	Symbol	x		4904199						
ANR	4904235	Symbol	m_strings		4904199						
ANR	4904236	Symbol	m_strings . Next		4904199						
ANR	4904237	Function	StringList :: ~StringList	147:0:3456:3545							
ANR	4904238	FunctionDef	StringList :: ~StringList ()		4904237	0					
ANR	4904239	CompoundStatement		148:0:3483:3545	4904237	0					
ANR	4904240	ExpressionStatement	clearAll ( )	149:1:3486:3496	4904237	0	True				
ANR	4904241	CallExpression	clearAll ( )		4904237	0					
ANR	4904242	Callee	clearAll		4904237	0					
ANR	4904243	Identifier	clearAll		4904237	0					
ANR	4904244	ArgumentList			4904237	1					
ANR	4904245	IfStatement	if ( m_delimiters )		4904237	1					
ANR	4904246	Condition	m_delimiters	150:6:3504:3515	4904237	0	True				
ANR	4904247	Identifier	m_delimiters		4904237	0					
ANR	4904248	Statement	delete	151:2:3521:3526	4904237	1	True				
ANR	4904249	Statement	[	151:9:3528:3528	4904237	2	True				
ANR	4904250	Statement	]	151:10:3529:3529	4904237	3	True				
ANR	4904251	ExpressionStatement	m_delimiters	151:12:3531:3543	4904237	4	True				
ANR	4904252	Identifier	m_delimiters		4904237	0					
ANR	4904253	Identifier	StringList :: ~StringList		4904237	1					
ANR	4904254	ParameterList			4904237	2					
ANR	4904255	CFGEntryNode	ENTRY		4904237		True				
ANR	4904256	CFGExitNode	EXIT		4904237		True				
ANR	4904257	Symbol	m_delimiters		4904237						
ANR	4904258	Function	StringList :: create_union	155:0:3549:3951							
ANR	4904259	FunctionDef	"StringList :: create_union (StringList & subset , bool anycase)"		4904258	0					
ANR	4904260	CompoundStatement		157:0:3614:3951	4904258	0					
ANR	4904261	IdentifierDeclStatement	char * x ;	158:1:3617:3624	4904258	0	True				
ANR	4904262	IdentifierDecl	* x		4904258	0					
ANR	4904263	IdentifierDeclType	char *		4904258	0					
ANR	4904264	Identifier	x		4904258	1					
ANR	4904265	IdentifierDeclStatement	BOOLEAN ret_val = TRUE ;	159:1:3627:3649	4904258	1	True				
ANR	4904266	IdentifierDecl	ret_val = TRUE		4904258	0					
ANR	4904267	IdentifierDeclType	BOOLEAN		4904258	0					
ANR	4904268	Identifier	ret_val		4904258	1					
ANR	4904269	AssignmentExpression	ret_val = TRUE		4904258	2		=			
ANR	4904270	Identifier	TRUE		4904258	0					
ANR	4904271	Identifier	TRUE		4904258	1					
ANR	4904272	IdentifierDeclStatement	bool result = false ;	160:1:3652:3671	4904258	2	True				
ANR	4904273	IdentifierDecl	result = false		4904258	0					
ANR	4904274	IdentifierDeclType	bool		4904258	0					
ANR	4904275	Identifier	result		4904258	1					
ANR	4904276	AssignmentExpression	result = false		4904258	2		=			
ANR	4904277	Identifier	false		4904258	0					
ANR	4904278	Identifier	false		4904258	1					
ANR	4904279	ExpressionStatement	subset . rewind ( )	162:1:3700:3716	4904258	3	True				
ANR	4904280	CallExpression	subset . rewind ( )		4904258	0					
ANR	4904281	Callee	subset . rewind		4904258	0					
ANR	4904282	MemberAccess	subset . rewind		4904258	0					
ANR	4904283	Identifier	subset		4904258	0					
ANR	4904284	Identifier	rewind		4904258	1					
ANR	4904285	ArgumentList			4904258	1					
ANR	4904286	WhileStatement	while ( ( x = subset . next ( ) ) )		4904258	4					
ANR	4904287	Condition	x = subset . next ( )	163:8:3726:3745	4904258	0	True				
ANR	4904288	AssignmentExpression	x = subset . next ( )		4904258	0		=			
ANR	4904289	Identifier	x		4904258	0					
ANR	4904290	CallExpression	subset . next ( )		4904258	1					
ANR	4904291	Callee	subset . next		4904258	0					
ANR	4904292	MemberAccess	subset . next		4904258	0					
ANR	4904293	Identifier	subset		4904258	0					
ANR	4904294	Identifier	next		4904258	1					
ANR	4904295	ArgumentList			4904258	1					
ANR	4904296	CompoundStatement		7:30:133:133	4904258	1					
ANR	4904297	IfStatement	if ( anycase )		4904258	0					
ANR	4904298	Condition	anycase	164:7:3757:3763	4904258	0	True				
ANR	4904299	Identifier	anycase		4904258	0					
ANR	4904300	CompoundStatement		8:17:152:152	4904258	1					
ANR	4904301	ExpressionStatement	ret_val = contains_anycase ( x )	165:3:3772:3801	4904258	0	True				
ANR	4904302	AssignmentExpression	ret_val = contains_anycase ( x )		4904258	0		=			
ANR	4904303	Identifier	ret_val		4904258	0					
ANR	4904304	CallExpression	contains_anycase ( x )		4904258	1					
ANR	4904305	Callee	contains_anycase		4904258	0					
ANR	4904306	Identifier	contains_anycase		4904258	0					
ANR	4904307	ArgumentList	x		4904258	1					
ANR	4904308	Argument	x		4904258	0					
ANR	4904309	Identifier	x		4904258	0					
ANR	4904310	ElseStatement	else		4904258	0					
ANR	4904311	CompoundStatement		10:9:197:197	4904258	0					
ANR	4904312	ExpressionStatement	ret_val = contains ( x )	167:3:3817:3838	4904258	0	True				
ANR	4904313	AssignmentExpression	ret_val = contains ( x )		4904258	0		=			
ANR	4904314	Identifier	ret_val		4904258	0					
ANR	4904315	CallExpression	contains ( x )		4904258	1					
ANR	4904316	Callee	contains		4904258	0					
ANR	4904317	Identifier	contains		4904258	0					
ANR	4904318	ArgumentList	x		4904258	1					
ANR	4904319	Argument	x		4904258	0					
ANR	4904320	Identifier	x		4904258	0					
ANR	4904321	IfStatement	if ( ret_val == FALSE )		4904258	1					
ANR	4904322	Condition	ret_val == FALSE	170:6:3875:3890	4904258	0	True				
ANR	4904323	EqualityExpression	ret_val == FALSE		4904258	0		==			
ANR	4904324	Identifier	ret_val		4904258	0					
ANR	4904325	Identifier	FALSE		4904258	1					
ANR	4904326	CompoundStatement		14:25:279:279	4904258	1					
ANR	4904327	ExpressionStatement	result = true	171:3:3899:3912	4904258	0	True				
ANR	4904328	AssignmentExpression	result = true		4904258	0		=			
ANR	4904329	Identifier	result		4904258	0					
ANR	4904330	Identifier	true		4904258	1					
ANR	4904331	ExpressionStatement	append ( x )	172:3:3917:3926	4904258	1	True				
ANR	4904332	CallExpression	append ( x )		4904258	0					
ANR	4904333	Callee	append		4904258	0					
ANR	4904334	Identifier	append		4904258	0					
ANR	4904335	ArgumentList	x		4904258	1					
ANR	4904336	Argument	x		4904258	0					
ANR	4904337	Identifier	x		4904258	0					
ANR	4904338	ReturnStatement	return result ;	175:1:3936:3949	4904258	5	True				
ANR	4904339	Identifier	result		4904258	0					
ANR	4904340	ReturnType	bool		4904258	1					
ANR	4904341	Identifier	StringList :: create_union		4904258	2					
ANR	4904342	ParameterList	"StringList & subset , bool anycase"		4904258	3					
ANR	4904343	Parameter	StringList & subset	156:25:3579:3597	4904258	0	True				
ANR	4904344	ParameterType	StringList &		4904258	0					
ANR	4904345	Identifier	subset		4904258	1					
ANR	4904346	Parameter	bool anycase	156:46:3600:3611	4904258	1	True				
ANR	4904347	ParameterType	bool		4904258	0					
ANR	4904348	Identifier	anycase		4904258	1					
ANR	4904349	CFGEntryNode	ENTRY		4904258		True				
ANR	4904350	CFGExitNode	EXIT		4904258		True				
ANR	4904351	Symbol	result		4904258						
ANR	4904352	Symbol	contains		4904258						
ANR	4904353	Symbol	anycase		4904258						
ANR	4904354	Symbol	contains_anycase		4904258						
ANR	4904355	Symbol	x		4904258						
ANR	4904356	Symbol	false		4904258						
ANR	4904357	Symbol	subset . next		4904258						
ANR	4904358	Symbol	true		4904258						
ANR	4904359	Symbol	TRUE		4904258						
ANR	4904360	Symbol	FALSE		4904258						
ANR	4904361	Symbol	ret_val		4904258						
ANR	4904362	Symbol	subset		4904258						
ANR	4904363	Function	StringList :: contains_list	179:0:3955:4262							
ANR	4904364	FunctionDef	"StringList :: contains_list (StringList & subset , bool anycase)"		4904363	0					
ANR	4904365	CompoundStatement		181:0:4021:4262	4904363	0					
ANR	4904366	IdentifierDeclStatement	char * x ;	182:1:4024:4031	4904363	0	True				
ANR	4904367	IdentifierDecl	* x		4904363	0					
ANR	4904368	IdentifierDeclType	char *		4904363	0					
ANR	4904369	Identifier	x		4904363	1					
ANR	4904370	IdentifierDeclStatement	BOOLEAN ret_val ;	183:1:4034:4049	4904363	1	True				
ANR	4904371	IdentifierDecl	ret_val		4904363	0					
ANR	4904372	IdentifierDeclType	BOOLEAN		4904363	0					
ANR	4904373	Identifier	ret_val		4904363	1					
ANR	4904374	ExpressionStatement	subset . rewind ( )	185:1:4053:4069	4904363	2	True				
ANR	4904375	CallExpression	subset . rewind ( )		4904363	0					
ANR	4904376	Callee	subset . rewind		4904363	0					
ANR	4904377	MemberAccess	subset . rewind		4904363	0					
ANR	4904378	Identifier	subset		4904363	0					
ANR	4904379	Identifier	rewind		4904363	1					
ANR	4904380	ArgumentList			4904363	1					
ANR	4904381	WhileStatement	while ( ( x = subset . next ( ) ) )		4904363	3					
ANR	4904382	Condition	x = subset . next ( )	186:8:4079:4098	4904363	0	True				
ANR	4904383	AssignmentExpression	x = subset . next ( )		4904363	0		=			
ANR	4904384	Identifier	x		4904363	0					
ANR	4904385	CallExpression	subset . next ( )		4904363	1					
ANR	4904386	Callee	subset . next		4904363	0					
ANR	4904387	MemberAccess	subset . next		4904363	0					
ANR	4904388	Identifier	subset		4904363	0					
ANR	4904389	Identifier	next		4904363	1					
ANR	4904390	ArgumentList			4904363	1					
ANR	4904391	CompoundStatement		6:30:79:79	4904363	1					
ANR	4904392	IfStatement	if ( anycase )		4904363	0					
ANR	4904393	Condition	anycase	187:7:4110:4116	4904363	0	True				
ANR	4904394	Identifier	anycase		4904363	0					
ANR	4904395	CompoundStatement		7:17:98:98	4904363	1					
ANR	4904396	ExpressionStatement	ret_val = contains_anycase ( x )	188:3:4125:4154	4904363	0	True				
ANR	4904397	AssignmentExpression	ret_val = contains_anycase ( x )		4904363	0		=			
ANR	4904398	Identifier	ret_val		4904363	0					
ANR	4904399	CallExpression	contains_anycase ( x )		4904363	1					
ANR	4904400	Callee	contains_anycase		4904363	0					
ANR	4904401	Identifier	contains_anycase		4904363	0					
ANR	4904402	ArgumentList	x		4904363	1					
ANR	4904403	Argument	x		4904363	0					
ANR	4904404	Identifier	x		4904363	0					
ANR	4904405	ElseStatement	else		4904363	0					
ANR	4904406	CompoundStatement		9:9:143:143	4904363	0					
ANR	4904407	ExpressionStatement	ret_val = contains ( x )	190:3:4170:4191	4904363	0	True				
ANR	4904408	AssignmentExpression	ret_val = contains ( x )		4904363	0		=			
ANR	4904409	Identifier	ret_val		4904363	0					
ANR	4904410	CallExpression	contains ( x )		4904363	1					
ANR	4904411	Callee	contains		4904363	0					
ANR	4904412	Identifier	contains		4904363	0					
ANR	4904413	ArgumentList	x		4904363	1					
ANR	4904414	Argument	x		4904363	0					
ANR	4904415	Identifier	x		4904363	0					
ANR	4904416	IfStatement	if ( ret_val == FALSE )		4904363	1					
ANR	4904417	Condition	ret_val == FALSE	192:6:4203:4218	4904363	0	True				
ANR	4904418	EqualityExpression	ret_val == FALSE		4904363	0		==			
ANR	4904419	Identifier	ret_val		4904363	0					
ANR	4904420	Identifier	FALSE		4904363	1					
ANR	4904421	CompoundStatement		12:25:200:200	4904363	1					
ANR	4904422	ReturnStatement	return false ;	193:3:4227:4239	4904363	0	True				
ANR	4904423	Identifier	false		4904363	0					
ANR	4904424	ReturnStatement	return true ;	196:1:4249:4260	4904363	4	True				
ANR	4904425	Identifier	true		4904363	0					
ANR	4904426	ReturnType	bool		4904363	1					
ANR	4904427	Identifier	StringList :: contains_list		4904363	2					
ANR	4904428	ParameterList	"StringList & subset , bool anycase"		4904363	3					
ANR	4904429	Parameter	StringList & subset	180:26:3986:4004	4904363	0	True				
ANR	4904430	ParameterType	StringList &		4904363	0					
ANR	4904431	Identifier	subset		4904363	1					
ANR	4904432	Parameter	bool anycase	180:47:4007:4018	4904363	1	True				
ANR	4904433	ParameterType	bool		4904363	0					
ANR	4904434	Identifier	anycase		4904363	1					
ANR	4904435	CFGEntryNode	ENTRY		4904363		True				
ANR	4904436	CFGExitNode	EXIT		4904363		True				
ANR	4904437	Symbol	contains		4904363						
ANR	4904438	Symbol	anycase		4904363						
ANR	4904439	Symbol	contains_anycase		4904363						
ANR	4904440	Symbol	x		4904363						
ANR	4904441	Symbol	subset . next		4904363						
ANR	4904442	Symbol	false		4904363						
ANR	4904443	Symbol	true		4904363						
ANR	4904444	Symbol	FALSE		4904363						
ANR	4904445	Symbol	ret_val		4904363						
ANR	4904446	Symbol	subset		4904363						
ANR	4904447	Function	StringList :: contains	200:0:4266:4454							
ANR	4904448	FunctionDef	StringList :: contains (const char * st)		4904447	0					
ANR	4904449	CompoundStatement		202:0:4313:4454	4904447	0					
ANR	4904450	IdentifierDeclStatement	char * x ;	203:1:4316:4323	4904447	0	True				
ANR	4904451	IdentifierDecl	* x		4904447	0					
ANR	4904452	IdentifierDeclType	char *		4904447	0					
ANR	4904453	Identifier	x		4904447	1					
ANR	4904454	ExpressionStatement	m_strings . Rewind ( )	205:1:4327:4346	4904447	1	True				
ANR	4904455	CallExpression	m_strings . Rewind ( )		4904447	0					
ANR	4904456	Callee	m_strings . Rewind		4904447	0					
ANR	4904457	MemberAccess	m_strings . Rewind		4904447	0					
ANR	4904458	Identifier	m_strings		4904447	0					
ANR	4904459	Identifier	Rewind		4904447	1					
ANR	4904460	ArgumentList			4904447	1					
ANR	4904461	WhileStatement	while ( ( x = m_strings . Next ( ) ) )		4904447	2					
ANR	4904462	Condition	x = m_strings . Next ( )	206:8:4356:4378	4904447	0	True				
ANR	4904463	AssignmentExpression	x = m_strings . Next ( )		4904447	0		=			
ANR	4904464	Identifier	x		4904447	0					
ANR	4904465	CallExpression	m_strings . Next ( )		4904447	1					
ANR	4904466	Callee	m_strings . Next		4904447	0					
ANR	4904467	MemberAccess	m_strings . Next		4904447	0					
ANR	4904468	Identifier	m_strings		4904447	0					
ANR	4904469	Identifier	Next		4904447	1					
ANR	4904470	ArgumentList			4904447	1					
ANR	4904471	CompoundStatement		5:33:67:67	4904447	1					
ANR	4904472	IfStatement	"if ( strcmp ( st , x ) == MATCH )"		4904447	0					
ANR	4904473	Condition	"strcmp ( st , x ) == MATCH"	207:6:4389:4410	4904447	0	True				
ANR	4904474	EqualityExpression	"strcmp ( st , x ) == MATCH"		4904447	0		==			
ANR	4904475	CallExpression	"strcmp ( st , x )"		4904447	0					
ANR	4904476	Callee	strcmp		4904447	0					
ANR	4904477	Identifier	strcmp		4904447	0					
ANR	4904478	ArgumentList	st		4904447	1					
ANR	4904479	Argument	st		4904447	0					
ANR	4904480	Identifier	st		4904447	0					
ANR	4904481	Argument	x		4904447	1					
ANR	4904482	Identifier	x		4904447	0					
ANR	4904483	Identifier	MATCH		4904447	1					
ANR	4904484	CompoundStatement		6:31:100:100	4904447	1					
ANR	4904485	ReturnStatement	return TRUE ;	208:3:4419:4430	4904447	0	True				
ANR	4904486	Identifier	TRUE		4904447	0					
ANR	4904487	ReturnStatement	return FALSE ;	211:1:4440:4452	4904447	3	True				
ANR	4904488	Identifier	FALSE		4904447	0					
ANR	4904489	ReturnType	BOOLEAN		4904447	1					
ANR	4904490	Identifier	StringList :: contains		4904447	2					
ANR	4904491	ParameterList	const char * st		4904447	3					
ANR	4904492	Parameter	const char * st	201:22:4296:4309	4904447	0	True				
ANR	4904493	ParameterType	const char *		4904447	0					
ANR	4904494	Identifier	st		4904447	1					
ANR	4904495	CFGEntryNode	ENTRY		4904447		True				
ANR	4904496	CFGExitNode	EXIT		4904447		True				
ANR	4904497	Symbol	strcmp		4904447						
ANR	4904498	Symbol	st		4904447						
ANR	4904499	Symbol	x		4904447						
ANR	4904500	Symbol	m_strings		4904447						
ANR	4904501	Symbol	TRUE		4904447						
ANR	4904502	Symbol	FALSE		4904447						
ANR	4904503	Symbol	m_strings . Next		4904447						
ANR	4904504	Symbol	MATCH		4904447						
ANR	4904505	Function	StringList :: contains_anycase	215:0:4458:4658							
ANR	4904506	FunctionDef	StringList :: contains_anycase (const char * st)		4904505	0					
ANR	4904507	CompoundStatement		217:0:4513:4658	4904505	0					
ANR	4904508	IdentifierDeclStatement	char * x ;	218:1:4516:4523	4904505	0	True				
ANR	4904509	IdentifierDecl	* x		4904505	0					
ANR	4904510	IdentifierDeclType	char *		4904505	0					
ANR	4904511	Identifier	x		4904505	1					
ANR	4904512	ExpressionStatement	m_strings . Rewind ( )	220:1:4527:4546	4904505	1	True				
ANR	4904513	CallExpression	m_strings . Rewind ( )		4904505	0					
ANR	4904514	Callee	m_strings . Rewind		4904505	0					
ANR	4904515	MemberAccess	m_strings . Rewind		4904505	0					
ANR	4904516	Identifier	m_strings		4904505	0					
ANR	4904517	Identifier	Rewind		4904505	1					
ANR	4904518	ArgumentList			4904505	1					
ANR	4904519	WhileStatement	while ( ( x = m_strings . Next ( ) ) )		4904505	2					
ANR	4904520	Condition	x = m_strings . Next ( )	221:8:4556:4578	4904505	0	True				
ANR	4904521	AssignmentExpression	x = m_strings . Next ( )		4904505	0		=			
ANR	4904522	Identifier	x		4904505	0					
ANR	4904523	CallExpression	m_strings . Next ( )		4904505	1					
ANR	4904524	Callee	m_strings . Next		4904505	0					
ANR	4904525	MemberAccess	m_strings . Next		4904505	0					
ANR	4904526	Identifier	m_strings		4904505	0					
ANR	4904527	Identifier	Next		4904505	1					
ANR	4904528	ArgumentList			4904505	1					
ANR	4904529	CompoundStatement		5:33:67:67	4904505	1					
ANR	4904530	IfStatement	"if ( strcasecmp ( st , x ) == MATCH )"		4904505	0					
ANR	4904531	Condition	"strcasecmp ( st , x ) == MATCH"	222:6:4589:4614	4904505	0	True				
ANR	4904532	EqualityExpression	"strcasecmp ( st , x ) == MATCH"		4904505	0		==			
ANR	4904533	CallExpression	"strcasecmp ( st , x )"		4904505	0					
ANR	4904534	Callee	strcasecmp		4904505	0					
ANR	4904535	Identifier	strcasecmp		4904505	0					
ANR	4904536	ArgumentList	st		4904505	1					
ANR	4904537	Argument	st		4904505	0					
ANR	4904538	Identifier	st		4904505	0					
ANR	4904539	Argument	x		4904505	1					
ANR	4904540	Identifier	x		4904505	0					
ANR	4904541	Identifier	MATCH		4904505	1					
ANR	4904542	CompoundStatement		6:35:104:104	4904505	1					
ANR	4904543	ReturnStatement	return TRUE ;	223:3:4623:4634	4904505	0	True				
ANR	4904544	Identifier	TRUE		4904505	0					
ANR	4904545	ReturnStatement	return FALSE ;	226:1:4644:4656	4904505	3	True				
ANR	4904546	Identifier	FALSE		4904505	0					
ANR	4904547	ReturnType	BOOLEAN		4904505	1					
ANR	4904548	Identifier	StringList :: contains_anycase		4904505	2					
ANR	4904549	ParameterList	const char * st		4904505	3					
ANR	4904550	Parameter	const char * st	216:30:4496:4509	4904505	0	True				
ANR	4904551	ParameterType	const char *		4904505	0					
ANR	4904552	Identifier	st		4904505	1					
ANR	4904553	CFGEntryNode	ENTRY		4904505		True				
ANR	4904554	CFGExitNode	EXIT		4904505		True				
ANR	4904555	Symbol	st		4904505						
ANR	4904556	Symbol	x		4904505						
ANR	4904557	Symbol	m_strings		4904505						
ANR	4904558	Symbol	TRUE		4904505						
ANR	4904559	Symbol	FALSE		4904505						
ANR	4904560	Symbol	m_strings . Next		4904505						
ANR	4904561	Symbol	strcasecmp		4904505						
ANR	4904562	Symbol	MATCH		4904505						
ANR	4904563	Function	StringList :: remove	230:0:4662:4831							
ANR	4904564	FunctionDef	StringList :: remove (const char * str)		4904563	0					
ANR	4904565	CompoundStatement		232:0:4703:4831	4904563	0					
ANR	4904566	IdentifierDeclStatement	char * x ;	233:1:4706:4713	4904563	0	True				
ANR	4904567	IdentifierDecl	* x		4904563	0					
ANR	4904568	IdentifierDeclType	char *		4904563	0					
ANR	4904569	Identifier	x		4904563	1					
ANR	4904570	ExpressionStatement	m_strings . Rewind ( )	235:1:4717:4735	4904563	1	True				
ANR	4904571	CallExpression	m_strings . Rewind ( )		4904563	0					
ANR	4904572	Callee	m_strings . Rewind		4904563	0					
ANR	4904573	MemberAccess	m_strings . Rewind		4904563	0					
ANR	4904574	Identifier	m_strings		4904563	0					
ANR	4904575	Identifier	Rewind		4904563	1					
ANR	4904576	ArgumentList			4904563	1					
ANR	4904577	WhileStatement	while ( ( x = m_strings . Next ( ) ) )		4904563	2					
ANR	4904578	Condition	x = m_strings . Next ( )	236:8:4745:4766	4904563	0	True				
ANR	4904579	AssignmentExpression	x = m_strings . Next ( )		4904563	0		=			
ANR	4904580	Identifier	x		4904563	0					
ANR	4904581	CallExpression	m_strings . Next ( )		4904563	1					
ANR	4904582	Callee	m_strings . Next		4904563	0					
ANR	4904583	MemberAccess	m_strings . Next		4904563	0					
ANR	4904584	Identifier	m_strings		4904563	0					
ANR	4904585	Identifier	Next		4904563	1					
ANR	4904586	ArgumentList			4904563	1					
ANR	4904587	CompoundStatement		5:32:65:65	4904563	1					
ANR	4904588	IfStatement	"if ( strcmp ( str , x ) == MATCH )"		4904563	0					
ANR	4904589	Condition	"strcmp ( str , x ) == MATCH"	237:6:4777:4799	4904563	0	True				
ANR	4904590	EqualityExpression	"strcmp ( str , x ) == MATCH"		4904563	0		==			
ANR	4904591	CallExpression	"strcmp ( str , x )"		4904563	0					
ANR	4904592	Callee	strcmp		4904563	0					
ANR	4904593	Identifier	strcmp		4904563	0					
ANR	4904594	ArgumentList	str		4904563	1					
ANR	4904595	Argument	str		4904563	0					
ANR	4904596	Identifier	str		4904563	0					
ANR	4904597	Argument	x		4904563	1					
ANR	4904598	Identifier	x		4904563	0					
ANR	4904599	Identifier	MATCH		4904563	1					
ANR	4904600	CompoundStatement		6:31:98:98	4904563	1					
ANR	4904601	ExpressionStatement	deleteCurrent ( )	238:3:4807:4822	4904563	0	True				
ANR	4904602	CallExpression	deleteCurrent ( )		4904563	0					
ANR	4904603	Callee	deleteCurrent		4904563	0					
ANR	4904604	Identifier	deleteCurrent		4904563	0					
ANR	4904605	ArgumentList			4904563	1					
ANR	4904606	ReturnType	void		4904563	1					
ANR	4904607	Identifier	StringList :: remove		4904563	2					
ANR	4904608	ParameterList	const char * str		4904563	3					
ANR	4904609	Parameter	const char * str	231:19:4686:4700	4904563	0	True				
ANR	4904610	ParameterType	const char *		4904563	0					
ANR	4904611	Identifier	str		4904563	1					
ANR	4904612	CFGEntryNode	ENTRY		4904563		True				
ANR	4904613	CFGExitNode	EXIT		4904563		True				
ANR	4904614	Symbol	str		4904563						
ANR	4904615	Symbol	strcmp		4904563						
ANR	4904616	Symbol	x		4904563						
ANR	4904617	Symbol	m_strings		4904563						
ANR	4904618	Symbol	m_strings . Next		4904563						
ANR	4904619	Symbol	MATCH		4904563						
ANR	4904620	Function	StringList :: remove_anycase	243:0:4834:5015							
ANR	4904621	FunctionDef	StringList :: remove_anycase (const char * str)		4904620	0					
ANR	4904622	CompoundStatement		245:0:4883:5015	4904620	0					
ANR	4904623	IdentifierDeclStatement	char * x ;	246:1:4886:4893	4904620	0	True				
ANR	4904624	IdentifierDecl	* x		4904620	0					
ANR	4904625	IdentifierDeclType	char *		4904620	0					
ANR	4904626	Identifier	x		4904620	1					
ANR	4904627	ExpressionStatement	m_strings . Rewind ( )	248:1:4897:4915	4904620	1	True				
ANR	4904628	CallExpression	m_strings . Rewind ( )		4904620	0					
ANR	4904629	Callee	m_strings . Rewind		4904620	0					
ANR	4904630	MemberAccess	m_strings . Rewind		4904620	0					
ANR	4904631	Identifier	m_strings		4904620	0					
ANR	4904632	Identifier	Rewind		4904620	1					
ANR	4904633	ArgumentList			4904620	1					
ANR	4904634	WhileStatement	while ( ( x = m_strings . Next ( ) ) )		4904620	2					
ANR	4904635	Condition	x = m_strings . Next ( )	249:8:4925:4946	4904620	0	True				
ANR	4904636	AssignmentExpression	x = m_strings . Next ( )		4904620	0		=			
ANR	4904637	Identifier	x		4904620	0					
ANR	4904638	CallExpression	m_strings . Next ( )		4904620	1					
ANR	4904639	Callee	m_strings . Next		4904620	0					
ANR	4904640	MemberAccess	m_strings . Next		4904620	0					
ANR	4904641	Identifier	m_strings		4904620	0					
ANR	4904642	Identifier	Next		4904620	1					
ANR	4904643	ArgumentList			4904620	1					
ANR	4904644	CompoundStatement		5:32:65:65	4904620	1					
ANR	4904645	IfStatement	"if ( strcasecmp ( str , x ) == MATCH )"		4904620	0					
ANR	4904646	Condition	"strcasecmp ( str , x ) == MATCH"	250:6:4957:4983	4904620	0	True				
ANR	4904647	EqualityExpression	"strcasecmp ( str , x ) == MATCH"		4904620	0		==			
ANR	4904648	CallExpression	"strcasecmp ( str , x )"		4904620	0					
ANR	4904649	Callee	strcasecmp		4904620	0					
ANR	4904650	Identifier	strcasecmp		4904620	0					
ANR	4904651	ArgumentList	str		4904620	1					
ANR	4904652	Argument	str		4904620	0					
ANR	4904653	Identifier	str		4904620	0					
ANR	4904654	Argument	x		4904620	1					
ANR	4904655	Identifier	x		4904620	0					
ANR	4904656	Identifier	MATCH		4904620	1					
ANR	4904657	CompoundStatement		6:35:102:102	4904620	1					
ANR	4904658	ExpressionStatement	deleteCurrent ( )	251:3:4991:5006	4904620	0	True				
ANR	4904659	CallExpression	deleteCurrent ( )		4904620	0					
ANR	4904660	Callee	deleteCurrent		4904620	0					
ANR	4904661	Identifier	deleteCurrent		4904620	0					
ANR	4904662	ArgumentList			4904620	1					
ANR	4904663	ReturnType	void		4904620	1					
ANR	4904664	Identifier	StringList :: remove_anycase		4904620	2					
ANR	4904665	ParameterList	const char * str		4904620	3					
ANR	4904666	Parameter	const char * str	244:27:4866:4880	4904620	0	True				
ANR	4904667	ParameterType	const char *		4904620	0					
ANR	4904668	Identifier	str		4904620	1					
ANR	4904669	CFGEntryNode	ENTRY		4904620		True				
ANR	4904670	CFGExitNode	EXIT		4904620		True				
ANR	4904671	Symbol	str		4904620						
ANR	4904672	Symbol	x		4904620						
ANR	4904673	Symbol	m_strings		4904620						
ANR	4904674	Symbol	m_strings . Next		4904620						
ANR	4904675	Symbol	strcasecmp		4904620						
ANR	4904676	Symbol	MATCH		4904620						
ANR	4904677	Function	StringList :: substring	256:0:5018:5246							
ANR	4904678	FunctionDef	StringList :: substring (const char * st)		4904677	0					
ANR	4904679	CompoundStatement		258:0:5066:5246	4904677	0					
ANR	4904680	IdentifierDeclStatement	char * x ;	259:1:5069:5079	4904677	0	True				
ANR	4904681	IdentifierDecl	* x		4904677	0					
ANR	4904682	IdentifierDeclType	char *		4904677	0					
ANR	4904683	Identifier	x		4904677	1					
ANR	4904684	IdentifierDeclStatement	int len ;	260:1:5082:5089	4904677	1	True				
ANR	4904685	IdentifierDecl	len		4904677	0					
ANR	4904686	IdentifierDeclType	int		4904677	0					
ANR	4904687	Identifier	len		4904677	1					
ANR	4904688	ExpressionStatement	m_strings . Rewind ( )	262:1:5094:5113	4904677	2	True				
ANR	4904689	CallExpression	m_strings . Rewind ( )		4904677	0					
ANR	4904690	Callee	m_strings . Rewind		4904677	0					
ANR	4904691	MemberAccess	m_strings . Rewind		4904677	0					
ANR	4904692	Identifier	m_strings		4904677	0					
ANR	4904693	Identifier	Rewind		4904677	1					
ANR	4904694	ArgumentList			4904677	1					
ANR	4904695	WhileStatement	while ( ( x = m_strings . Next ( ) ) )		4904677	3					
ANR	4904696	Condition	x = m_strings . Next ( )	263:8:5123:5144	4904677	0	True				
ANR	4904697	AssignmentExpression	x = m_strings . Next ( )		4904677	0		=			
ANR	4904698	Identifier	x		4904677	0					
ANR	4904699	CallExpression	m_strings . Next ( )		4904677	1					
ANR	4904700	Callee	m_strings . Next		4904677	0					
ANR	4904701	MemberAccess	m_strings . Next		4904677	0					
ANR	4904702	Identifier	m_strings		4904677	0					
ANR	4904703	Identifier	Next		4904677	1					
ANR	4904704	ArgumentList			4904677	1					
ANR	4904705	CompoundStatement		6:33:81:81	4904677	1					
ANR	4904706	ExpressionStatement	len = strlen ( x )	264:2:5152:5167	4904677	0	True				
ANR	4904707	AssignmentExpression	len = strlen ( x )		4904677	0		=			
ANR	4904708	Identifier	len		4904677	0					
ANR	4904709	CallExpression	strlen ( x )		4904677	1					
ANR	4904710	Callee	strlen		4904677	0					
ANR	4904711	Identifier	strlen		4904677	0					
ANR	4904712	ArgumentList	x		4904677	1					
ANR	4904713	Argument	x		4904677	0					
ANR	4904714	Identifier	x		4904677	0					
ANR	4904715	IfStatement	"if ( strncmp ( st , x , len ) == MATCH )"		4904677	1					
ANR	4904716	Condition	"strncmp ( st , x , len ) == MATCH"	265:6:5175:5202	4904677	0	True				
ANR	4904717	EqualityExpression	"strncmp ( st , x , len ) == MATCH"		4904677	0		==			
ANR	4904718	CallExpression	"strncmp ( st , x , len )"		4904677	0					
ANR	4904719	Callee	strncmp		4904677	0					
ANR	4904720	Identifier	strncmp		4904677	0					
ANR	4904721	ArgumentList	st		4904677	1					
ANR	4904722	Argument	st		4904677	0					
ANR	4904723	Identifier	st		4904677	0					
ANR	4904724	Argument	x		4904677	1					
ANR	4904725	Identifier	x		4904677	0					
ANR	4904726	Argument	len		4904677	2					
ANR	4904727	Identifier	len		4904677	0					
ANR	4904728	Identifier	MATCH		4904677	1					
ANR	4904729	CompoundStatement		8:37:139:139	4904677	1					
ANR	4904730	ReturnStatement	return TRUE ;	266:3:5211:5222	4904677	0	True				
ANR	4904731	Identifier	TRUE		4904677	0					
ANR	4904732	ReturnStatement	return FALSE ;	269:1:5232:5244	4904677	4	True				
ANR	4904733	Identifier	FALSE		4904677	0					
ANR	4904734	ReturnType	BOOLEAN		4904677	1					
ANR	4904735	Identifier	StringList :: substring		4904677	2					
ANR	4904736	ParameterList	const char * st		4904677	3					
ANR	4904737	Parameter	const char * st	257:23:5049:5062	4904677	0	True				
ANR	4904738	ParameterType	const char *		4904677	0					
ANR	4904739	Identifier	st		4904677	1					
ANR	4904740	CFGEntryNode	ENTRY		4904677		True				
ANR	4904741	CFGExitNode	EXIT		4904677		True				
ANR	4904742	Symbol	st		4904677						
ANR	4904743	Symbol	strlen		4904677						
ANR	4904744	Symbol	strncmp		4904677						
ANR	4904745	Symbol	len		4904677						
ANR	4904746	Symbol	x		4904677						
ANR	4904747	Symbol	m_strings		4904677						
ANR	4904748	Symbol	TRUE		4904677						
ANR	4904749	Symbol	FALSE		4904677						
ANR	4904750	Symbol	m_strings . Next		4904677						
ANR	4904751	Symbol	MATCH		4904677						
ANR	4904752	Function	StringList :: contains_withwildcard	272:0:5249:5369							
ANR	4904753	FunctionDef	StringList :: contains_withwildcard (const char * string)		4904752	0					
ANR	4904754	CompoundStatement		274:0:5311:5369	4904752	0					
ANR	4904755	ReturnStatement	"return ( contains_withwildcard ( string , false ) != NULL ) ;"	275:1:5314:5367	4904752	0	True				
ANR	4904756	EqualityExpression	"contains_withwildcard ( string , false ) != NULL"		4904752	0		!=			
ANR	4904757	CallExpression	"contains_withwildcard ( string , false )"		4904752	0					
ANR	4904758	Callee	contains_withwildcard		4904752	0					
ANR	4904759	Identifier	contains_withwildcard		4904752	0					
ANR	4904760	ArgumentList	string		4904752	1					
ANR	4904761	Argument	string		4904752	0					
ANR	4904762	Identifier	string		4904752	0					
ANR	4904763	Argument	false		4904752	1					
ANR	4904764	Identifier	false		4904752	0					
ANR	4904765	Identifier	NULL		4904752	1					
ANR	4904766	ReturnType	BOOLEAN		4904752	1					
ANR	4904767	Identifier	StringList :: contains_withwildcard		4904752	2					
ANR	4904768	ParameterList	const char * string		4904752	3					
ANR	4904769	Parameter	const char * string	273:34:5291:5308	4904752	0	True				
ANR	4904770	ParameterType	const char *		4904752	0					
ANR	4904771	Identifier	string		4904752	1					
ANR	4904772	CFGEntryNode	ENTRY		4904752		True				
ANR	4904773	CFGExitNode	EXIT		4904752		True				
ANR	4904774	Symbol	NULL		4904752						
ANR	4904775	Symbol	string		4904752						
ANR	4904776	Symbol	contains_withwildcard		4904752						
ANR	4904777	Symbol	false		4904752						
ANR	4904778	Function	StringList :: contains_anycase_withwildcard	278:0:5372:5499							
ANR	4904779	FunctionDef	StringList :: contains_anycase_withwildcard (const char * string)		4904778	0					
ANR	4904780	CompoundStatement		280:0:5442:5499	4904778	0					
ANR	4904781	ReturnStatement	"return ( contains_withwildcard ( string , true ) != NULL ) ;"	281:1:5445:5497	4904778	0	True				
ANR	4904782	EqualityExpression	"contains_withwildcard ( string , true ) != NULL"		4904778	0		!=			
ANR	4904783	CallExpression	"contains_withwildcard ( string , true )"		4904778	0					
ANR	4904784	Callee	contains_withwildcard		4904778	0					
ANR	4904785	Identifier	contains_withwildcard		4904778	0					
ANR	4904786	ArgumentList	string		4904778	1					
ANR	4904787	Argument	string		4904778	0					
ANR	4904788	Identifier	string		4904778	0					
ANR	4904789	Argument	true		4904778	1					
ANR	4904790	Identifier	true		4904778	0					
ANR	4904791	Identifier	NULL		4904778	1					
ANR	4904792	ReturnType	BOOLEAN		4904778	1					
ANR	4904793	Identifier	StringList :: contains_anycase_withwildcard		4904778	2					
ANR	4904794	ParameterList	const char * string		4904778	3					
ANR	4904795	Parameter	const char * string	279:42:5422:5439	4904778	0	True				
ANR	4904796	ParameterType	const char *		4904778	0					
ANR	4904797	Identifier	string		4904778	1					
ANR	4904798	CFGEntryNode	ENTRY		4904778		True				
ANR	4904799	CFGExitNode	EXIT		4904778		True				
ANR	4904800	Symbol	NULL		4904778						
ANR	4904801	Symbol	string		4904778						
ANR	4904802	Symbol	contains_withwildcard		4904778						
ANR	4904803	Symbol	true		4904778						
ANR	4904804	Function	StringList :: find_matches_anycase_withwildcard	285:0:5503:5662							
ANR	4904805	FunctionDef	"StringList :: find_matches_anycase_withwildcard (const char * string , StringList * matches)"		4904804	0					
ANR	4904806	CompoundStatement		287:0:5597:5662	4904804	0					
ANR	4904807	ReturnStatement	"return contains_withwildcard ( string , true , matches ) != NULL ;"	288:4:5603:5660	4904804	0	True				
ANR	4904808	EqualityExpression	"contains_withwildcard ( string , true , matches ) != NULL"		4904804	0		!=			
ANR	4904809	CallExpression	"contains_withwildcard ( string , true , matches )"		4904804	0					
ANR	4904810	Callee	contains_withwildcard		4904804	0					
ANR	4904811	Identifier	contains_withwildcard		4904804	0					
ANR	4904812	ArgumentList	string		4904804	1					
ANR	4904813	Argument	string		4904804	0					
ANR	4904814	Identifier	string		4904804	0					
ANR	4904815	Argument	true		4904804	1					
ANR	4904816	Identifier	true		4904804	0					
ANR	4904817	Argument	matches		4904804	2					
ANR	4904818	Identifier	matches		4904804	0					
ANR	4904819	Identifier	NULL		4904804	1					
ANR	4904820	ReturnType	bool		4904804	1					
ANR	4904821	Identifier	StringList :: find_matches_anycase_withwildcard		4904804	2					
ANR	4904822	ParameterList	"const char * string , StringList * matches"		4904804	3					
ANR	4904823	Parameter	const char * string	286:47:5555:5573	4904804	0	True				
ANR	4904824	ParameterType	const char *		4904804	0					
ANR	4904825	Identifier	string		4904804	1					
ANR	4904826	Parameter	StringList * matches	286:68:5576:5594	4904804	1	True				
ANR	4904827	ParameterType	StringList *		4904804	0					
ANR	4904828	Identifier	matches		4904804	1					
ANR	4904829	CFGEntryNode	ENTRY		4904804		True				
ANR	4904830	CFGExitNode	EXIT		4904804		True				
ANR	4904831	Symbol	NULL		4904804						
ANR	4904832	Symbol	string		4904804						
ANR	4904833	Symbol	contains_withwildcard		4904804						
ANR	4904834	Symbol	true		4904804						
ANR	4904835	Symbol	matches		4904804						
ANR	4904836	Function	StringList :: contains_withwildcard	296:0:5923:8889							
ANR	4904837	FunctionDef	"StringList :: contains_withwildcard (const char * string , bool anycase , StringList * matches)"		4904836	0					
ANR	4904838	CompoundStatement		298:0:6025:8889	4904836	0					
ANR	4904839	IdentifierDeclStatement	char * x ;	299:1:6028:6035	4904836	0	True				
ANR	4904840	IdentifierDecl	* x		4904836	0					
ANR	4904841	IdentifierDeclType	char *		4904836	0					
ANR	4904842	Identifier	x		4904836	1					
ANR	4904843	IdentifierDeclStatement	char * matchstart ;	300:1:6038:6054	4904836	1	True				
ANR	4904844	IdentifierDecl	* matchstart		4904836	0					
ANR	4904845	IdentifierDeclType	char *		4904836	0					
ANR	4904846	Identifier	matchstart		4904836	1					
ANR	4904847	IdentifierDeclStatement	char * matchend ;	301:1:6057:6071	4904836	2	True				
ANR	4904848	IdentifierDecl	* matchend		4904836	0					
ANR	4904849	IdentifierDeclType	char *		4904836	0					
ANR	4904850	Identifier	matchend		4904836	1					
ANR	4904851	IdentifierDeclStatement	char * asterisk ;	302:1:6074:6088	4904836	3	True				
ANR	4904852	IdentifierDecl	* asterisk		4904836	0					
ANR	4904853	IdentifierDeclType	char *		4904836	0					
ANR	4904854	Identifier	asterisk		4904836	1					
ANR	4904855	IdentifierDeclStatement	"int matchendlen , len ;"	303:1:6091:6111	4904836	4	True				
ANR	4904856	IdentifierDecl	matchendlen		4904836	0					
ANR	4904857	IdentifierDeclType	int		4904836	0					
ANR	4904858	Identifier	matchendlen		4904836	1					
ANR	4904859	IdentifierDecl	len		4904836	1					
ANR	4904860	IdentifierDeclType	int		4904836	0					
ANR	4904861	Identifier	len		4904836	1					
ANR	4904862	IdentifierDeclStatement	BOOLEAN result ;	304:4:6117:6131	4904836	5	True				
ANR	4904863	IdentifierDecl	result		4904836	0					
ANR	4904864	IdentifierDeclType	BOOLEAN		4904836	0					
ANR	4904865	Identifier	result		4904836	1					
ANR	4904866	IdentifierDeclStatement	int temp ;	305:1:6135:6143	4904836	6	True				
ANR	4904867	IdentifierDecl	temp		4904836	0					
ANR	4904868	IdentifierDeclType	int		4904836	0					
ANR	4904869	Identifier	temp		4904836	1					
ANR	4904870	IfStatement	if ( ! string )		4904836	7					
ANR	4904871	Condition	! string	307:6:6153:6159	4904836	0	True				
ANR	4904872	UnaryOperationExpression	! string		4904836	0					
ANR	4904873	UnaryOperator	!		4904836	0					
ANR	4904874	Identifier	string		4904836	1					
ANR	4904875	ReturnStatement	return NULL ;	308:2:6165:6176	4904836	1	True				
ANR	4904876	Identifier	NULL		4904836	0					
ANR	4904877	ExpressionStatement	m_strings . Rewind ( )	310:1:6180:6198	4904836	8	True				
ANR	4904878	CallExpression	m_strings . Rewind ( )		4904836	0					
ANR	4904879	Callee	m_strings . Rewind		4904836	0					
ANR	4904880	MemberAccess	m_strings . Rewind		4904836	0					
ANR	4904881	Identifier	m_strings		4904836	0					
ANR	4904882	Identifier	Rewind		4904836	1					
ANR	4904883	ArgumentList			4904836	1					
ANR	4904884	WhileStatement	while ( ( x = m_strings . Next ( ) ) )		4904836	9					
ANR	4904885	Condition	x = m_strings . Next ( )	312:9:6210:6229	4904836	0	True				
ANR	4904886	AssignmentExpression	x = m_strings . Next ( )		4904836	0		=			
ANR	4904887	Identifier	x		4904836	0					
ANR	4904888	CallExpression	m_strings . Next ( )		4904836	1					
ANR	4904889	Callee	m_strings . Next		4904836	0					
ANR	4904890	MemberAccess	m_strings . Next		4904836	0					
ANR	4904891	Identifier	m_strings		4904836	0					
ANR	4904892	Identifier	Next		4904836	1					
ANR	4904893	ArgumentList			4904836	1					
ANR	4904894	CompoundStatement		15:32:207:207	4904836	1					
ANR	4904895	IfStatement	"if ( ( asterisk = strchr ( x , '*' ) ) == NULL )"		4904836	0					
ANR	4904896	Condition	"( asterisk = strchr ( x , '*' ) ) == NULL"	314:7:6243:6276	4904836	0	True				
ANR	4904897	EqualityExpression	"( asterisk = strchr ( x , '*' ) ) == NULL"		4904836	0		==			
ANR	4904898	AssignmentExpression	"asterisk = strchr ( x , '*' )"		4904836	0		=			
ANR	4904899	Identifier	asterisk		4904836	0					
ANR	4904900	CallExpression	"strchr ( x , '*' )"		4904836	1					
ANR	4904901	Callee	strchr		4904836	0					
ANR	4904902	Identifier	strchr		4904836	0					
ANR	4904903	ArgumentList	x		4904836	1					
ANR	4904904	Argument	x		4904836	0					
ANR	4904905	Identifier	x		4904836	0					
ANR	4904906	Argument	'*'		4904836	1					
ANR	4904907	PrimaryExpression	'*'		4904836	0					
ANR	4904908	Identifier	NULL		4904836	1					
ANR	4904909	CompoundStatement		17:44:254:254	4904836	1					
ANR	4904910	IfStatement	if ( anycase )		4904836	0					
ANR	4904911	Condition	anycase	316:7:6344:6350	4904836	0	True				
ANR	4904912	Identifier	anycase		4904836	0					
ANR	4904913	CompoundStatement		19:16:327:327	4904836	1					
ANR	4904914	ExpressionStatement	"temp = strcasecmp ( x , string )"	317:4:6359:6386	4904836	0	True				
ANR	4904915	AssignmentExpression	"temp = strcasecmp ( x , string )"		4904836	0		=			
ANR	4904916	Identifier	temp		4904836	0					
ANR	4904917	CallExpression	"strcasecmp ( x , string )"		4904836	1					
ANR	4904918	Callee	strcasecmp		4904836	0					
ANR	4904919	Identifier	strcasecmp		4904836	0					
ANR	4904920	ArgumentList	x		4904836	1					
ANR	4904921	Argument	x		4904836	0					
ANR	4904922	Identifier	x		4904836	0					
ANR	4904923	Argument	string		4904836	1					
ANR	4904924	Identifier	string		4904836	0					
ANR	4904925	ElseStatement	else		4904836	0					
ANR	4904926	CompoundStatement		21:10:372:372	4904836	0					
ANR	4904927	ExpressionStatement	"temp = strcmp ( x , string )"	319:4:6404:6427	4904836	0	True				
ANR	4904928	AssignmentExpression	"temp = strcmp ( x , string )"		4904836	0		=			
ANR	4904929	Identifier	temp		4904836	0					
ANR	4904930	CallExpression	"strcmp ( x , string )"		4904836	1					
ANR	4904931	Callee	strcmp		4904836	0					
ANR	4904932	Identifier	strcmp		4904836	0					
ANR	4904933	ArgumentList	x		4904836	1					
ANR	4904934	Argument	x		4904836	0					
ANR	4904935	Identifier	x		4904836	0					
ANR	4904936	Argument	string		4904836	1					
ANR	4904937	Identifier	string		4904836	0					
ANR	4904938	IfStatement	if ( temp == MATCH )		4904836	1					
ANR	4904939	Condition	temp == MATCH	321:8:6442:6454	4904836	0	True				
ANR	4904940	EqualityExpression	temp == MATCH		4904836	0		==			
ANR	4904941	Identifier	temp		4904836	0					
ANR	4904942	Identifier	MATCH		4904836	1					
ANR	4904943	CompoundStatement		24:24:432:432	4904836	1					
ANR	4904944	IfStatement	if ( matches )		4904836	0					
ANR	4904945	Condition	matches	322:8:6468:6474	4904836	0	True				
ANR	4904946	Identifier	matches		4904836	0					
ANR	4904947	CompoundStatement		25:18:452:452	4904836	1					
ANR	4904948	ExpressionStatement	matches -> append ( x )	323:5:6485:6503	4904836	0	True				
ANR	4904949	CallExpression	matches -> append ( x )		4904836	0					
ANR	4904950	Callee	matches -> append		4904836	0					
ANR	4904951	PtrMemberAccess	matches -> append		4904836	0					
ANR	4904952	Identifier	matches		4904836	0					
ANR	4904953	Identifier	append		4904836	1					
ANR	4904954	ArgumentList	x		4904836	1					
ANR	4904955	Argument	x		4904836	0					
ANR	4904956	Identifier	x		4904836	0					
ANR	4904957	ElseStatement	else		4904836	0					
ANR	4904958	CompoundStatement		28:9:494:494	4904836	0					
ANR	4904959	ReturnStatement	return x ;	326:5:6527:6535	4904836	0	True				
ANR	4904960	Identifier	x		4904836	0					
ANR	4904961	ContinueStatement	continue ;	329:3:6551:6559	4904836	2	True				
ANR	4904962	IfStatement	if ( asterisk == x )		4904836	1					
ANR	4904963	Condition	asterisk == x	332:7:6573:6585	4904836	0	True				
ANR	4904964	EqualityExpression	asterisk == x		4904836	0		==			
ANR	4904965	Identifier	asterisk		4904836	0					
ANR	4904966	Identifier	x		4904836	1					
ANR	4904967	CompoundStatement		36:3:568:600	4904836	1					
ANR	4904968	IdentifierDeclStatement	"char * asterisk2 = strrchr ( x , '*' ) ;"	333:3:6594:6626	4904836	0	True				
ANR	4904969	IdentifierDecl	"* asterisk2 = strrchr ( x , '*' )"		4904836	0					
ANR	4904970	IdentifierDeclType	char *		4904836	0					
ANR	4904971	Identifier	asterisk2		4904836	1					
ANR	4904972	AssignmentExpression	"* asterisk2 = strrchr ( x , '*' )"		4904836	2		=			
ANR	4904973	Identifier	asterisk2		4904836	0					
ANR	4904974	CallExpression	"strrchr ( x , '*' )"		4904836	1					
ANR	4904975	Callee	strrchr		4904836	0					
ANR	4904976	Identifier	strrchr		4904836	0					
ANR	4904977	ArgumentList	x		4904836	1					
ANR	4904978	Argument	x		4904836	0					
ANR	4904979	Identifier	x		4904836	0					
ANR	4904980	Argument	'*'		4904836	1					
ANR	4904981	PrimaryExpression	'*'		4904836	0					
ANR	4904982	IfStatement	if ( asterisk2 && asterisk2 [ 1 ] == '\\0' && asterisk2 != asterisk )		4904836	1					
ANR	4904983	Condition	asterisk2 && asterisk2 [ 1 ] == '\\0' && asterisk2 != asterisk	334:8:6636:6693	4904836	0	True				
ANR	4904984	AndExpression	asterisk2 && asterisk2 [ 1 ] == '\\0' && asterisk2 != asterisk		4904836	0		&&			
ANR	4904985	Identifier	asterisk2		4904836	0					
ANR	4904986	AndExpression	asterisk2 [ 1 ] == '\\0' && asterisk2 != asterisk		4904836	1		&&			
ANR	4904987	EqualityExpression	asterisk2 [ 1 ] == '\\0'		4904836	0		==			
ANR	4904988	ArrayIndexing	asterisk2 [ 1 ]		4904836	0					
ANR	4904989	Identifier	asterisk2		4904836	0					
ANR	4904990	PrimaryExpression	1		4904836	1					
ANR	4904991	PrimaryExpression	'\\0'		4904836	1					
ANR	4904992	EqualityExpression	asterisk2 != asterisk		4904836	1		!=			
ANR	4904993	Identifier	asterisk2		4904836	0					
ANR	4904994	Identifier	asterisk		4904836	1					
ANR	4904995	CompoundStatement		39:4:719:734	4904836	1					
ANR	4904996	IdentifierDeclStatement	const char * pos ;	336:4:6745:6760	4904836	0	True				
ANR	4904997	IdentifierDecl	* pos		4904836	0					
ANR	4904998	IdentifierDeclType	const char *		4904836	0					
ANR	4904999	Identifier	pos		4904836	1					
ANR	4905000	ExpressionStatement	* asterisk2 = '\\0'	337:4:6766:6783	4904836	1	True				
ANR	4905001	AssignmentExpression	* asterisk2 = '\\0'		4904836	0		=			
ANR	4905002	UnaryOperationExpression	* asterisk2		4904836	0					
ANR	4905003	UnaryOperator	*		4904836	0					
ANR	4905004	Identifier	asterisk2		4904836	1					
ANR	4905005	PrimaryExpression	'\\0'		4904836	1					
ANR	4905006	IfStatement	if ( anycase )		4904836	2					
ANR	4905007	Condition	anycase	338:8:6793:6799	4904836	0	True				
ANR	4905008	Identifier	anycase		4904836	0					
ANR	4905009	CompoundStatement		41:17:776:776	4904836	1					
ANR	4905010	ExpressionStatement	"pos = strcasestr ( string , & x [ 1 ] )"	339:5:6809:6839	4904836	0	True				
ANR	4905011	AssignmentExpression	"pos = strcasestr ( string , & x [ 1 ] )"		4904836	0		=			
ANR	4905012	Identifier	pos		4904836	0					
ANR	4905013	CallExpression	"strcasestr ( string , & x [ 1 ] )"		4904836	1					
ANR	4905014	Callee	strcasestr		4904836	0					
ANR	4905015	Identifier	strcasestr		4904836	0					
ANR	4905016	ArgumentList	string		4904836	1					
ANR	4905017	Argument	string		4904836	0					
ANR	4905018	Identifier	string		4904836	0					
ANR	4905019	Argument	& x [ 1 ]		4904836	1					
ANR	4905020	UnaryOperationExpression	& x [ 1 ]		4904836	0					
ANR	4905021	UnaryOperator	&		4904836	0					
ANR	4905022	ArrayIndexing	x [ 1 ]		4904836	1					
ANR	4905023	Identifier	x		4904836	0					
ANR	4905024	PrimaryExpression	1		4904836	1					
ANR	4905025	ElseStatement	else		4904836	0					
ANR	4905026	CompoundStatement		43:11:826:826	4904836	0					
ANR	4905027	ExpressionStatement	"pos = strstr ( string , & x [ 1 ] )"	341:5:6859:6885	4904836	0	True				
ANR	4905028	AssignmentExpression	"pos = strstr ( string , & x [ 1 ] )"		4904836	0		=			
ANR	4905029	Identifier	pos		4904836	0					
ANR	4905030	CallExpression	"strstr ( string , & x [ 1 ] )"		4904836	1					
ANR	4905031	Callee	strstr		4904836	0					
ANR	4905032	Identifier	strstr		4904836	0					
ANR	4905033	ArgumentList	string		4904836	1					
ANR	4905034	Argument	string		4904836	0					
ANR	4905035	Identifier	string		4904836	0					
ANR	4905036	Argument	& x [ 1 ]		4904836	1					
ANR	4905037	UnaryOperationExpression	& x [ 1 ]		4904836	0					
ANR	4905038	UnaryOperator	&		4904836	0					
ANR	4905039	ArrayIndexing	x [ 1 ]		4904836	1					
ANR	4905040	Identifier	x		4904836	0					
ANR	4905041	PrimaryExpression	1		4904836	1					
ANR	4905042	ExpressionStatement	* asterisk2 = '*'	343:4:6897:6913	4904836	3	True				
ANR	4905043	AssignmentExpression	* asterisk2 = '*'		4904836	0		=			
ANR	4905044	UnaryOperationExpression	* asterisk2		4904836	0					
ANR	4905045	UnaryOperator	*		4904836	0					
ANR	4905046	Identifier	asterisk2		4904836	1					
ANR	4905047	PrimaryExpression	'*'		4904836	1					
ANR	4905048	IfStatement	if ( pos )		4904836	4					
ANR	4905049	Condition	pos	344:9:6924:6926	4904836	0	True				
ANR	4905050	Identifier	pos		4904836	0					
ANR	4905051	CompoundStatement		47:15:904:904	4904836	1					
ANR	4905052	IfStatement	if ( matches )		4904836	0					
ANR	4905053	Condition	matches	345:9:6941:6947	4904836	0	True				
ANR	4905054	Identifier	matches		4904836	0					
ANR	4905055	CompoundStatement		48:19:925:925	4904836	1					
ANR	4905056	ExpressionStatement	matches -> append ( x )	346:6:6959:6979	4904836	0	True				
ANR	4905057	CallExpression	matches -> append ( x )		4904836	0					
ANR	4905058	Callee	matches -> append		4904836	0					
ANR	4905059	PtrMemberAccess	matches -> append		4904836	0					
ANR	4905060	Identifier	matches		4904836	0					
ANR	4905061	Identifier	append		4904836	1					
ANR	4905062	ArgumentList	x		4904836	1					
ANR	4905063	Argument	x		4904836	0					
ANR	4905064	Identifier	x		4904836	0					
ANR	4905065	ElseStatement	else		4904836	0					
ANR	4905066	CompoundStatement		51:10:972:972	4904836	0					
ANR	4905067	ReturnStatement	return x ;	349:6:7006:7014	4904836	0	True				
ANR	4905068	Identifier	x		4904836	0					
ANR	4905069	ContinueStatement	continue ;	352:4:7033:7041	4904836	5	True				
ANR	4905070	ExpressionStatement	matchstart = NULL	355:3:7088:7105	4904836	2	True				
ANR	4905071	AssignmentExpression	matchstart = NULL		4904836	0		=			
ANR	4905072	Identifier	matchstart		4904836	0					
ANR	4905073	Identifier	NULL		4904836	1					
ANR	4905074	ExpressionStatement	matchend = & ( x [ 1 ] )	356:3:7110:7128	4904836	3	True				
ANR	4905075	AssignmentExpression	matchend = & ( x [ 1 ] )		4904836	0		=			
ANR	4905076	Identifier	matchend		4904836	0					
ANR	4905077	UnaryOperationExpression	& ( x [ 1 ] )		4904836	1					
ANR	4905078	UnaryOperator	&		4904836	0					
ANR	4905079	ArrayIndexing	x [ 1 ]		4904836	1					
ANR	4905080	Identifier	x		4904836	0					
ANR	4905081	PrimaryExpression	1		4904836	1					
ANR	4905082	ElseStatement	else		4904836	0					
ANR	4905083	CompoundStatement		60:9:1113:1113	4904836	0					
ANR	4905084	IfStatement	if ( asterisk [ 1 ] == '\\0' )		4904836	0					
ANR	4905085	Condition	asterisk [ 1 ] == '\\0'	358:8:7149:7167	4904836	0	True				
ANR	4905086	EqualityExpression	asterisk [ 1 ] == '\\0'		4904836	0		==			
ANR	4905087	ArrayIndexing	asterisk [ 1 ]		4904836	0					
ANR	4905088	Identifier	asterisk		4904836	0					
ANR	4905089	PrimaryExpression	1		4904836	1					
ANR	4905090	PrimaryExpression	'\\0'		4904836	1					
ANR	4905091	CompoundStatement		61:30:1145:1145	4904836	1					
ANR	4905092	ExpressionStatement	* asterisk = '\\0'	360:4:7214:7230	4904836	0	True				
ANR	4905093	AssignmentExpression	* asterisk = '\\0'		4904836	0		=			
ANR	4905094	UnaryOperationExpression	* asterisk		4904836	0					
ANR	4905095	UnaryOperator	*		4904836	0					
ANR	4905096	Identifier	asterisk		4904836	1					
ANR	4905097	PrimaryExpression	'\\0'		4904836	1					
ANR	4905098	IfStatement	if ( anycase )		4904836	1					
ANR	4905099	Condition	anycase	361:8:7259:7265	4904836	0	True				
ANR	4905100	Identifier	anycase		4904836	0					
ANR	4905101	CompoundStatement		64:17:1242:1242	4904836	1					
ANR	4905102	ExpressionStatement	"temp = strncasecmp ( x , string , strlen ( x ) )"	362:5:7275:7313	4904836	0	True				
ANR	4905103	AssignmentExpression	"temp = strncasecmp ( x , string , strlen ( x ) )"		4904836	0		=			
ANR	4905104	Identifier	temp		4904836	0					
ANR	4905105	CallExpression	"strncasecmp ( x , string , strlen ( x ) )"		4904836	1					
ANR	4905106	Callee	strncasecmp		4904836	0					
ANR	4905107	Identifier	strncasecmp		4904836	0					
ANR	4905108	ArgumentList	x		4904836	1					
ANR	4905109	Argument	x		4904836	0					
ANR	4905110	Identifier	x		4904836	0					
ANR	4905111	Argument	string		4904836	1					
ANR	4905112	Identifier	string		4904836	0					
ANR	4905113	Argument	strlen ( x )		4904836	2					
ANR	4905114	CallExpression	strlen ( x )		4904836	0					
ANR	4905115	Callee	strlen		4904836	0					
ANR	4905116	Identifier	strlen		4904836	0					
ANR	4905117	ArgumentList	x		4904836	1					
ANR	4905118	Argument	x		4904836	0					
ANR	4905119	Identifier	x		4904836	0					
ANR	4905120	ElseStatement	else		4904836	0					
ANR	4905121	CompoundStatement		66:11:1300:1300	4904836	0					
ANR	4905122	ExpressionStatement	"temp = strncmp ( x , string , strlen ( x ) )"	364:5:7333:7367	4904836	0	True				
ANR	4905123	AssignmentExpression	"temp = strncmp ( x , string , strlen ( x ) )"		4904836	0		=			
ANR	4905124	Identifier	temp		4904836	0					
ANR	4905125	CallExpression	"strncmp ( x , string , strlen ( x ) )"		4904836	1					
ANR	4905126	Callee	strncmp		4904836	0					
ANR	4905127	Identifier	strncmp		4904836	0					
ANR	4905128	ArgumentList	x		4904836	1					
ANR	4905129	Argument	x		4904836	0					
ANR	4905130	Identifier	x		4904836	0					
ANR	4905131	Argument	string		4904836	1					
ANR	4905132	Identifier	string		4904836	0					
ANR	4905133	Argument	strlen ( x )		4904836	2					
ANR	4905134	CallExpression	strlen ( x )		4904836	0					
ANR	4905135	Callee	strlen		4904836	0					
ANR	4905136	Identifier	strlen		4904836	0					
ANR	4905137	ArgumentList	x		4904836	1					
ANR	4905138	Argument	x		4904836	0					
ANR	4905139	Identifier	x		4904836	0					
ANR	4905140	ExpressionStatement	* asterisk = '*'	366:4:7379:7394	4904836	2	True				
ANR	4905141	AssignmentExpression	* asterisk = '*'		4904836	0		=			
ANR	4905142	UnaryOperationExpression	* asterisk		4904836	0					
ANR	4905143	UnaryOperator	*		4904836	0					
ANR	4905144	Identifier	asterisk		4904836	1					
ANR	4905145	PrimaryExpression	'*'		4904836	1					
ANR	4905146	IfStatement	if ( temp == MATCH )		4904836	3					
ANR	4905147	Condition	temp == MATCH	367:9:7425:7437	4904836	0	True				
ANR	4905148	EqualityExpression	temp == MATCH		4904836	0		==			
ANR	4905149	Identifier	temp		4904836	0					
ANR	4905150	Identifier	MATCH		4904836	1					
ANR	4905151	CompoundStatement		70:25:1415:1415	4904836	1					
ANR	4905152	IfStatement	if ( matches )		4904836	0					
ANR	4905153	Condition	matches	368:9:7452:7458	4904836	0	True				
ANR	4905154	Identifier	matches		4904836	0					
ANR	4905155	CompoundStatement		71:19:1436:1436	4904836	1					
ANR	4905156	ExpressionStatement	matches -> append ( x )	369:6:7470:7490	4904836	0	True				
ANR	4905157	CallExpression	matches -> append ( x )		4904836	0					
ANR	4905158	Callee	matches -> append		4904836	0					
ANR	4905159	PtrMemberAccess	matches -> append		4904836	0					
ANR	4905160	Identifier	matches		4904836	0					
ANR	4905161	Identifier	append		4904836	1					
ANR	4905162	ArgumentList	x		4904836	1					
ANR	4905163	Argument	x		4904836	0					
ANR	4905164	Identifier	x		4904836	0					
ANR	4905165	ElseStatement	else		4904836	0					
ANR	4905166	CompoundStatement		74:10:1483:1483	4904836	0					
ANR	4905167	ReturnStatement	return x ;	372:6:7517:7525	4904836	0	True				
ANR	4905168	Identifier	x		4904836	0					
ANR	4905169	ContinueStatement	continue ;	375:4:7544:7552	4904836	4	True				
ANR	4905170	ElseStatement	else		4904836	0					
ANR	4905171	CompoundStatement		79:10:1538:1538	4904836	0					
ANR	4905172	ExpressionStatement	matchstart = x	378:4:7622:7636	4904836	0	True				
ANR	4905173	AssignmentExpression	matchstart = x		4904836	0		=			
ANR	4905174	Identifier	matchstart		4904836	0					
ANR	4905175	Identifier	x		4904836	1					
ANR	4905176	ExpressionStatement	matchend = & ( asterisk [ 1 ] )	379:4:7642:7667	4904836	1	True				
ANR	4905177	AssignmentExpression	matchend = & ( asterisk [ 1 ] )		4904836	0		=			
ANR	4905178	Identifier	matchend		4904836	0					
ANR	4905179	UnaryOperationExpression	& ( asterisk [ 1 ] )		4904836	1					
ANR	4905180	UnaryOperator	&		4904836	0					
ANR	4905181	ArrayIndexing	asterisk [ 1 ]		4904836	1					
ANR	4905182	Identifier	asterisk		4904836	0					
ANR	4905183	PrimaryExpression	1		4904836	1					
ANR	4905184	ExpressionStatement	result = TRUE	387:2:7868:7881	4904836	2	True				
ANR	4905185	AssignmentExpression	result = TRUE		4904836	0		=			
ANR	4905186	Identifier	result		4904836	0					
ANR	4905187	Identifier	TRUE		4904836	1					
ANR	4905188	ExpressionStatement	* asterisk = '\\0'	388:2:7885:7901	4904836	3	True				
ANR	4905189	AssignmentExpression	* asterisk = '\\0'		4904836	0		=			
ANR	4905190	UnaryOperationExpression	* asterisk		4904836	0					
ANR	4905191	UnaryOperator	*		4904836	0					
ANR	4905192	Identifier	asterisk		4904836	1					
ANR	4905193	PrimaryExpression	'\\0'		4904836	1					
ANR	4905194	IfStatement	if ( matchstart )		4904836	4					
ANR	4905195	Condition	matchstart	389:7:7942:7951	4904836	0	True				
ANR	4905196	Identifier	matchstart		4904836	0					
ANR	4905197	CompoundStatement		92:20:1929:1929	4904836	1					
ANR	4905198	IfStatement	if ( anycase )		4904836	0					
ANR	4905199	Condition	anycase	390:8:7965:7971	4904836	0	True				
ANR	4905200	Identifier	anycase		4904836	0					
ANR	4905201	CompoundStatement		93:18:1949:1949	4904836	1					
ANR	4905202	ExpressionStatement	"temp = strncasecmp ( matchstart , string , strlen ( matchstart ) )"	391:4:7981:8037	4904836	0	True				
ANR	4905203	AssignmentExpression	"temp = strncasecmp ( matchstart , string , strlen ( matchstart ) )"		4904836	0		=			
ANR	4905204	Identifier	temp		4904836	0					
ANR	4905205	CallExpression	"strncasecmp ( matchstart , string , strlen ( matchstart ) )"		4904836	1					
ANR	4905206	Callee	strncasecmp		4904836	0					
ANR	4905207	Identifier	strncasecmp		4904836	0					
ANR	4905208	ArgumentList	matchstart		4904836	1					
ANR	4905209	Argument	matchstart		4904836	0					
ANR	4905210	Identifier	matchstart		4904836	0					
ANR	4905211	Argument	string		4904836	1					
ANR	4905212	Identifier	string		4904836	0					
ANR	4905213	Argument	strlen ( matchstart )		4904836	2					
ANR	4905214	CallExpression	strlen ( matchstart )		4904836	0					
ANR	4905215	Callee	strlen		4904836	0					
ANR	4905216	Identifier	strlen		4904836	0					
ANR	4905217	ArgumentList	matchstart		4904836	1					
ANR	4905218	Argument	matchstart		4904836	0					
ANR	4905219	Identifier	matchstart		4904836	0					
ANR	4905220	ElseStatement	else		4904836	0					
ANR	4905221	CompoundStatement		95:10:2023:2023	4904836	0					
ANR	4905222	ExpressionStatement	"temp = strncmp ( matchstart , string , strlen ( matchstart ) )"	393:4:8055:8107	4904836	0	True				
ANR	4905223	AssignmentExpression	"temp = strncmp ( matchstart , string , strlen ( matchstart ) )"		4904836	0		=			
ANR	4905224	Identifier	temp		4904836	0					
ANR	4905225	CallExpression	"strncmp ( matchstart , string , strlen ( matchstart ) )"		4904836	1					
ANR	4905226	Callee	strncmp		4904836	0					
ANR	4905227	Identifier	strncmp		4904836	0					
ANR	4905228	ArgumentList	matchstart		4904836	1					
ANR	4905229	Argument	matchstart		4904836	0					
ANR	4905230	Identifier	matchstart		4904836	0					
ANR	4905231	Argument	string		4904836	1					
ANR	4905232	Identifier	string		4904836	0					
ANR	4905233	Argument	strlen ( matchstart )		4904836	2					
ANR	4905234	CallExpression	strlen ( matchstart )		4904836	0					
ANR	4905235	Callee	strlen		4904836	0					
ANR	4905236	Identifier	strlen		4904836	0					
ANR	4905237	ArgumentList	matchstart		4904836	1					
ANR	4905238	Argument	matchstart		4904836	0					
ANR	4905239	Identifier	matchstart		4904836	0					
ANR	4905240	IfStatement	if ( temp != MATCH )		4904836	1					
ANR	4905241	Condition	temp != MATCH	395:8:8122:8134	4904836	0	True				
ANR	4905242	EqualityExpression	temp != MATCH		4904836	0		!=			
ANR	4905243	Identifier	temp		4904836	0					
ANR	4905244	Identifier	MATCH		4904836	1					
ANR	4905245	ExpressionStatement	result = FALSE	396:4:8143:8157	4904836	1	True				
ANR	4905246	AssignmentExpression	result = FALSE		4904836	0		=			
ANR	4905247	Identifier	result		4904836	0					
ANR	4905248	Identifier	FALSE		4904836	1					
ANR	4905249	IfStatement	if ( matchend && result == TRUE )		4904836	5					
ANR	4905250	Condition	matchend && result == TRUE	398:7:8170:8195	4904836	0	True				
ANR	4905251	AndExpression	matchend && result == TRUE		4904836	0		&&			
ANR	4905252	Identifier	matchend		4904836	0					
ANR	4905253	EqualityExpression	result == TRUE		4904836	1		==			
ANR	4905254	Identifier	result		4904836	0					
ANR	4905255	Identifier	TRUE		4904836	1					
ANR	4905256	CompoundStatement		101:35:2172:2172	4904836	1					
ANR	4905257	ExpressionStatement	len = strlen ( string )	399:3:8203:8223	4904836	0	True				
ANR	4905258	AssignmentExpression	len = strlen ( string )		4904836	0		=			
ANR	4905259	Identifier	len		4904836	0					
ANR	4905260	CallExpression	strlen ( string )		4904836	1					
ANR	4905261	Callee	strlen		4904836	0					
ANR	4905262	Identifier	strlen		4904836	0					
ANR	4905263	ArgumentList	string		4904836	1					
ANR	4905264	Argument	string		4904836	0					
ANR	4905265	Identifier	string		4904836	0					
ANR	4905266	ExpressionStatement	matchendlen = strlen ( matchend )	400:3:8228:8258	4904836	1	True				
ANR	4905267	AssignmentExpression	matchendlen = strlen ( matchend )		4904836	0		=			
ANR	4905268	Identifier	matchendlen		4904836	0					
ANR	4905269	CallExpression	strlen ( matchend )		4904836	1					
ANR	4905270	Callee	strlen		4904836	0					
ANR	4905271	Identifier	strlen		4904836	0					
ANR	4905272	ArgumentList	matchend		4904836	1					
ANR	4905273	Argument	matchend		4904836	0					
ANR	4905274	Identifier	matchend		4904836	0					
ANR	4905275	IfStatement	if ( matchendlen > len )		4904836	2					
ANR	4905276	Condition	matchendlen > len	401:8:8268:8284	4904836	0	True				
ANR	4905277	RelationalExpression	matchendlen > len		4904836	0		>			
ANR	4905278	Identifier	matchendlen		4904836	0					
ANR	4905279	Identifier	len		4904836	1					
ANR	4905280	ExpressionStatement	result = FALSE	402:4:8329:8343	4904836	1	True				
ANR	4905281	AssignmentExpression	result = FALSE		4904836	0		=			
ANR	4905282	Identifier	result		4904836	0					
ANR	4905283	Identifier	FALSE		4904836	1					
ANR	4905284	IfStatement	if ( result == TRUE )		4904836	3					
ANR	4905285	Condition	result == TRUE	403:8:8353:8366	4904836	0	True				
ANR	4905286	EqualityExpression	result == TRUE		4904836	0		==			
ANR	4905287	Identifier	result		4904836	0					
ANR	4905288	Identifier	TRUE		4904836	1					
ANR	4905289	CompoundStatement		106:25:2344:2344	4904836	1					
ANR	4905290	IfStatement	if ( anycase )		4904836	0					
ANR	4905291	Condition	anycase	404:8:8380:8386	4904836	0	True				
ANR	4905292	Identifier	anycase		4904836	0					
ANR	4905293	CompoundStatement		107:17:2363:2363	4904836	1					
ANR	4905294	ExpressionStatement	"temp = strcasecmp ( & ( string [ len - matchendlen ] ) , matchend )"	405:5:8396:8450	4904836	0	True				
ANR	4905295	AssignmentExpression	"temp = strcasecmp ( & ( string [ len - matchendlen ] ) , matchend )"		4904836	0		=			
ANR	4905296	Identifier	temp		4904836	0					
ANR	4905297	CallExpression	"strcasecmp ( & ( string [ len - matchendlen ] ) , matchend )"		4904836	1					
ANR	4905298	Callee	strcasecmp		4904836	0					
ANR	4905299	Identifier	strcasecmp		4904836	0					
ANR	4905300	ArgumentList	& ( string [ len - matchendlen ] )		4904836	1					
ANR	4905301	Argument	& ( string [ len - matchendlen ] )		4904836	0					
ANR	4905302	UnaryOperationExpression	& ( string [ len - matchendlen ] )		4904836	0					
ANR	4905303	UnaryOperator	&		4904836	0					
ANR	4905304	ArrayIndexing	string [ len - matchendlen ]		4904836	1					
ANR	4905305	Identifier	string		4904836	0					
ANR	4905306	AdditiveExpression	len - matchendlen		4904836	1		-			
ANR	4905307	Identifier	len		4904836	0					
ANR	4905308	Identifier	matchendlen		4904836	1					
ANR	4905309	Argument	matchend		4904836	1					
ANR	4905310	Identifier	matchend		4904836	0					
ANR	4905311	ElseStatement	else		4904836	0					
ANR	4905312	CompoundStatement		109:11:2437:2437	4904836	0					
ANR	4905313	ExpressionStatement	"temp = strcmp ( & ( string [ len - matchendlen ] ) , matchend )"	407:5:8470:8520	4904836	0	True				
ANR	4905314	AssignmentExpression	"temp = strcmp ( & ( string [ len - matchendlen ] ) , matchend )"		4904836	0		=			
ANR	4905315	Identifier	temp		4904836	0					
ANR	4905316	CallExpression	"strcmp ( & ( string [ len - matchendlen ] ) , matchend )"		4904836	1					
ANR	4905317	Callee	strcmp		4904836	0					
ANR	4905318	Identifier	strcmp		4904836	0					
ANR	4905319	ArgumentList	& ( string [ len - matchendlen ] )		4904836	1					
ANR	4905320	Argument	& ( string [ len - matchendlen ] )		4904836	0					
ANR	4905321	UnaryOperationExpression	& ( string [ len - matchendlen ] )		4904836	0					
ANR	4905322	UnaryOperator	&		4904836	0					
ANR	4905323	ArrayIndexing	string [ len - matchendlen ]		4904836	1					
ANR	4905324	Identifier	string		4904836	0					
ANR	4905325	AdditiveExpression	len - matchendlen		4904836	1		-			
ANR	4905326	Identifier	len		4904836	0					
ANR	4905327	Identifier	matchendlen		4904836	1					
ANR	4905328	Argument	matchend		4904836	1					
ANR	4905329	Identifier	matchend		4904836	0					
ANR	4905330	IfStatement	if ( temp != MATCH )		4904836	1					
ANR	4905331	Condition	temp != MATCH	409:9:8537:8549	4904836	0	True				
ANR	4905332	EqualityExpression	temp != MATCH		4904836	0		!=			
ANR	4905333	Identifier	temp		4904836	0					
ANR	4905334	Identifier	MATCH		4904836	1					
ANR	4905335	ExpressionStatement	result = FALSE	410:5:8558:8572	4904836	1	True				
ANR	4905336	AssignmentExpression	result = FALSE		4904836	0		=			
ANR	4905337	Identifier	result		4904836	0					
ANR	4905338	Identifier	FALSE		4904836	1					
ANR	4905339	ExpressionStatement	* asterisk = '*'	413:2:8585:8600	4904836	6	True				
ANR	4905340	AssignmentExpression	* asterisk = '*'		4904836	0		=			
ANR	4905341	UnaryOperationExpression	* asterisk		4904836	0					
ANR	4905342	UnaryOperator	*		4904836	0					
ANR	4905343	Identifier	asterisk		4904836	1					
ANR	4905344	PrimaryExpression	'*'		4904836	1					
ANR	4905345	IfStatement	if ( result == TRUE )		4904836	7					
ANR	4905346	Condition	result == TRUE	414:7:8656:8669	4904836	0	True				
ANR	4905347	EqualityExpression	result == TRUE		4904836	0		==			
ANR	4905348	Identifier	result		4904836	0					
ANR	4905349	Identifier	TRUE		4904836	1					
ANR	4905350	CompoundStatement		117:24:2647:2647	4904836	1					
ANR	4905351	IfStatement	if ( matches )		4904836	0					
ANR	4905352	Condition	matches	415:7:8682:8688	4904836	0	True				
ANR	4905353	Identifier	matches		4904836	0					
ANR	4905354	CompoundStatement		118:17:2666:2666	4904836	1					
ANR	4905355	ExpressionStatement	matches -> append ( x )	416:4:8698:8718	4904836	0	True				
ANR	4905356	CallExpression	matches -> append ( x )		4904836	0					
ANR	4905357	Callee	matches -> append		4904836	0					
ANR	4905358	PtrMemberAccess	matches -> append		4904836	0					
ANR	4905359	Identifier	matches		4904836	0					
ANR	4905360	Identifier	append		4904836	1					
ANR	4905361	ArgumentList	x		4904836	1					
ANR	4905362	Argument	x		4904836	0					
ANR	4905363	Identifier	x		4904836	0					
ANR	4905364	ElseStatement	else		4904836	0					
ANR	4905365	CompoundStatement		121:8:2707:2707	4904836	0					
ANR	4905366	ReturnStatement	return x ;	419:4:8739:8747	4904836	0	True				
ANR	4905367	Identifier	x		4904836	0					
ANR	4905368	IfStatement	if ( matches && ! matches -> isEmpty ( ) )		4904836	10					
ANR	4905369	Condition	matches && ! matches -> isEmpty ( )	425:5:8790:8819	4904836	0	True				
ANR	4905370	AndExpression	matches && ! matches -> isEmpty ( )		4904836	0		&&			
ANR	4905371	Identifier	matches		4904836	0					
ANR	4905372	UnaryOperationExpression	! matches -> isEmpty ( )		4904836	1					
ANR	4905373	UnaryOperator	!		4904836	0					
ANR	4905374	CallExpression	matches -> isEmpty ( )		4904836	1					
ANR	4905375	Callee	matches -> isEmpty		4904836	0					
ANR	4905376	PtrMemberAccess	matches -> isEmpty		4904836	0					
ANR	4905377	Identifier	matches		4904836	0					
ANR	4905378	Identifier	isEmpty		4904836	1					
ANR	4905379	ArgumentList			4904836	1					
ANR	4905380	CompoundStatement		128:38:2797:2797	4904836	1					
ANR	4905381	ExpressionStatement	matches -> rewind ( )	426:2:8827:8844	4904836	0	True				
ANR	4905382	CallExpression	matches -> rewind ( )		4904836	0					
ANR	4905383	Callee	matches -> rewind		4904836	0					
ANR	4905384	PtrMemberAccess	matches -> rewind		4904836	0					
ANR	4905385	Identifier	matches		4904836	0					
ANR	4905386	Identifier	rewind		4904836	1					
ANR	4905387	ArgumentList			4904836	1					
ANR	4905388	ReturnStatement	return matches -> next ( ) ;	427:2:8848:8870	4904836	1	True				
ANR	4905389	CallExpression	matches -> next ( )		4904836	0					
ANR	4905390	Callee	matches -> next		4904836	0					
ANR	4905391	PtrMemberAccess	matches -> next		4904836	0					
ANR	4905392	Identifier	matches		4904836	0					
ANR	4905393	Identifier	next		4904836	1					
ANR	4905394	ArgumentList			4904836	1					
ANR	4905395	ReturnStatement	return NULL ;	429:1:8876:8887	4904836	11	True				
ANR	4905396	Identifier	NULL		4904836	0					
ANR	4905397	ReturnType	const char *		4904836	1					
ANR	4905398	Identifier	StringList :: contains_withwildcard		4904836	2					
ANR	4905399	ParameterList	"const char * string , bool anycase , StringList * matches"		4904836	3					
ANR	4905400	Parameter	const char * string	297:34:5970:5987	4904836	0	True				
ANR	4905401	ParameterType	const char *		4904836	0					
ANR	4905402	Identifier	string		4904836	1					
ANR	4905403	Parameter	bool anycase	297:54:5990:6001	4904836	1	True				
ANR	4905404	ParameterType	bool		4904836	0					
ANR	4905405	Identifier	anycase		4904836	1					
ANR	4905406	Parameter	StringList * matches	297:68:6004:6022	4904836	2	True				
ANR	4905407	ParameterType	StringList *		4904836	0					
ANR	4905408	Identifier	matches		4904836	1					
ANR	4905409	CFGEntryNode	ENTRY		4904836		True				
ANR	4905410	CFGExitNode	EXIT		4904836		True				
ANR	4905411	Symbol	* matches		4904836						
ANR	4905412	Symbol	string		4904836						
ANR	4905413	Symbol	matchend		4904836						
ANR	4905414	Symbol	asterisk		4904836						
ANR	4905415	Symbol	strncasecmp		4904836						
ANR	4905416	Symbol	strchr		4904836						
ANR	4905417	Symbol	matches -> isEmpty		4904836						
ANR	4905418	Symbol	result		4904836						
ANR	4905419	Symbol	strlen		4904836						
ANR	4905420	Symbol	strncmp		4904836						
ANR	4905421	Symbol	len		4904836						
ANR	4905422	Symbol	anycase		4904836						
ANR	4905423	Symbol	pos		4904836						
ANR	4905424	Symbol	strcasecmp		4904836						
ANR	4905425	Symbol	matches -> next		4904836						
ANR	4905426	Symbol	strcmp		4904836						
ANR	4905427	Symbol	temp		4904836						
ANR	4905428	Symbol	NULL		4904836						
ANR	4905429	Symbol	* asterisk2		4904836						
ANR	4905430	Symbol	* asterisk		4904836						
ANR	4905431	Symbol	strcasestr		4904836						
ANR	4905432	Symbol	TRUE		4904836						
ANR	4905433	Symbol	m_strings . Next		4904836						
ANR	4905434	Symbol	matches		4904836						
ANR	4905435	Symbol	strstr		4904836						
ANR	4905436	Symbol	matchendlen		4904836						
ANR	4905437	Symbol	strrchr		4904836						
ANR	4905438	Symbol	x		4904836						
ANR	4905439	Symbol	m_strings		4904836						
ANR	4905440	Symbol	asterisk2		4904836						
ANR	4905441	Symbol	matchstart		4904836						
ANR	4905442	Symbol	FALSE		4904836						
ANR	4905443	Symbol	MATCH		4904836						
ANR	4905444	Function	StringList :: find	432:0:8892:9230							
ANR	4905445	FunctionDef	"StringList :: find (const char * str , bool anycase)"		4905444	0					
ANR	4905446	CompoundStatement		434:0:8953:9230	4905444	0					
ANR	4905447	IdentifierDeclStatement	char * x ;	435:1:8956:8963	4905444	0	True				
ANR	4905448	IdentifierDecl	* x		4905444	0					
ANR	4905449	IdentifierDeclType	char *		4905444	0					
ANR	4905450	Identifier	x		4905444	1					
ANR	4905451	IdentifierDeclStatement	ListIterator < char > iter ( m_strings ) ;	437:4:8970:9007	4905444	1	True				
ANR	4905452	IdentifierDecl	iter ( m_strings )		4905444	0					
ANR	4905453	IdentifierDeclType	ListIterator < char >		4905444	0					
ANR	4905454	Identifier	iter		4905444	1					
ANR	4905455	Identifier	m_strings		4905444	2					
ANR	4905456	ExpressionStatement	iter . ToBeforeFirst ( )	438:4:9013:9034	4905444	2	True				
ANR	4905457	CallExpression	iter . ToBeforeFirst ( )		4905444	0					
ANR	4905458	Callee	iter . ToBeforeFirst		4905444	0					
ANR	4905459	MemberAccess	iter . ToBeforeFirst		4905444	0					
ANR	4905460	Identifier	iter		4905444	0					
ANR	4905461	Identifier	ToBeforeFirst		4905444	1					
ANR	4905462	ArgumentList			4905444	1					
ANR	4905463	WhileStatement	while ( iter . Next ( x ) )		4905444	3					
ANR	4905464	Condition	iter . Next ( x )	439:9:9045:9056	4905444	0	True				
ANR	4905465	CallExpression	iter . Next ( x )		4905444	0					
ANR	4905466	Callee	iter . Next		4905444	0					
ANR	4905467	MemberAccess	iter . Next		4905444	0					
ANR	4905468	Identifier	iter		4905444	0					
ANR	4905469	Identifier	Next		4905444	1					
ANR	4905470	ArgumentList	x		4905444	1					
ANR	4905471	Argument	x		4905444	0					
ANR	4905472	Identifier	x		4905444	0					
ANR	4905473	CompoundStatement		6:24:106:106	4905444	1					
ANR	4905474	IfStatement	"if ( ( anycase ) && ( strcasecmp ( str , x ) == MATCH ) )"		4905444	0					
ANR	4905475	Condition	"( anycase ) && ( strcasecmp ( str , x ) == MATCH )"	440:6:9068:9111	4905444	0	True				
ANR	4905476	AndExpression	"( anycase ) && ( strcasecmp ( str , x ) == MATCH )"		4905444	0		&&			
ANR	4905477	Identifier	anycase		4905444	0					
ANR	4905478	EqualityExpression	"strcasecmp ( str , x ) == MATCH"		4905444	1		==			
ANR	4905479	CallExpression	"strcasecmp ( str , x )"		4905444	0					
ANR	4905480	Callee	strcasecmp		4905444	0					
ANR	4905481	Identifier	strcasecmp		4905444	0					
ANR	4905482	ArgumentList	str		4905444	1					
ANR	4905483	Argument	str		4905444	0					
ANR	4905484	Identifier	str		4905444	0					
ANR	4905485	Argument	x		4905444	1					
ANR	4905486	Identifier	x		4905444	0					
ANR	4905487	Identifier	MATCH		4905444	1					
ANR	4905488	CompoundStatement		7:53:161:161	4905444	1					
ANR	4905489	ReturnStatement	return true ;	441:3:9120:9131	4905444	0	True				
ANR	4905490	Identifier	true		4905444	0					
ANR	4905491	ElseStatement	else		4905444	0					
ANR	4905492	IfStatement	"if ( ( ! anycase ) && ( strcmp ( str , x ) == MATCH ) )"		4905444	0					
ANR	4905493	Condition	"( ! anycase ) && ( strcmp ( str , x ) == MATCH )"	443:11:9148:9186	4905444	0	True				
ANR	4905494	AndExpression	"( ! anycase ) && ( strcmp ( str , x ) == MATCH )"		4905444	0		&&			
ANR	4905495	UnaryOperationExpression	! anycase		4905444	0					
ANR	4905496	UnaryOperator	!		4905444	0					
ANR	4905497	Identifier	anycase		4905444	1					
ANR	4905498	EqualityExpression	"strcmp ( str , x ) == MATCH"		4905444	1		==			
ANR	4905499	CallExpression	"strcmp ( str , x )"		4905444	0					
ANR	4905500	Callee	strcmp		4905444	0					
ANR	4905501	Identifier	strcmp		4905444	0					
ANR	4905502	ArgumentList	str		4905444	1					
ANR	4905503	Argument	str		4905444	0					
ANR	4905504	Identifier	str		4905444	0					
ANR	4905505	Argument	x		4905444	1					
ANR	4905506	Identifier	x		4905444	0					
ANR	4905507	Identifier	MATCH		4905444	1					
ANR	4905508	CompoundStatement		10:53:236:236	4905444	1					
ANR	4905509	ReturnStatement	return true ;	444:3:9195:9206	4905444	0	True				
ANR	4905510	Identifier	true		4905444	0					
ANR	4905511	ReturnStatement	return false ;	447:1:9216:9228	4905444	4	True				
ANR	4905512	Identifier	false		4905444	0					
ANR	4905513	ReturnType	bool		4905444	1					
ANR	4905514	Identifier	StringList :: find		4905444	2					
ANR	4905515	ParameterList	"const char * str , bool anycase"		4905444	3					
ANR	4905516	Parameter	const char * str	433:18:8915:8929	4905444	0	True				
ANR	4905517	ParameterType	const char *		4905444	0					
ANR	4905518	Identifier	str		4905444	1					
ANR	4905519	Parameter	bool anycase	433:35:8932:8943	4905444	1	True				
ANR	4905520	ParameterType	bool		4905444	0					
ANR	4905521	Identifier	anycase		4905444	1					
ANR	4905522	CFGEntryNode	ENTRY		4905444		True				
ANR	4905523	CFGExitNode	EXIT		4905444		True				
ANR	4905524	Symbol	str		4905444						
ANR	4905525	Symbol	strcmp		4905444						
ANR	4905526	Symbol	anycase		4905444						
ANR	4905527	Symbol	iter . Next		4905444						
ANR	4905528	Symbol	x		4905444						
ANR	4905529	Symbol	true		4905444						
ANR	4905530	Symbol	false		4905444						
ANR	4905531	Symbol	iter		4905444						
ANR	4905532	Symbol	strcasecmp		4905444						
ANR	4905533	Symbol	MATCH		4905444						
ANR	4905534	Function	StringList :: identical	450:0:9233:9895							
ANR	4905535	FunctionDef	"StringList :: identical (const StringList & other , bool anycase)"		4905534	0					
ANR	4905536	CompoundStatement		452:0:9307:9895	4905534	0					
ANR	4905537	IdentifierDeclStatement	char * x ;	453:1:9310:9317	4905534	0	True				
ANR	4905538	IdentifierDecl	* x		4905534	0					
ANR	4905539	IdentifierDeclType	char *		4905534	0					
ANR	4905540	Identifier	x		4905534	1					
ANR	4905541	IdentifierDeclStatement	ListIterator < char > iter ;	454:1:9320:9343	4905534	1	True				
ANR	4905542	IdentifierDecl	iter		4905534	0					
ANR	4905543	IdentifierDeclType	ListIterator < char >		4905534	0					
ANR	4905544	Identifier	iter		4905534	1					
ANR	4905545	IfStatement	if ( other . number ( ) != this -> number ( ) )		4905534	2					
ANR	4905546	Condition	other . number ( ) != this -> number ( )	457:6:9396:9427	4905534	0	True				
ANR	4905547	EqualityExpression	other . number ( ) != this -> number ( )		4905534	0		!=			
ANR	4905548	CallExpression	other . number ( )		4905534	0					
ANR	4905549	Callee	other . number		4905534	0					
ANR	4905550	MemberAccess	other . number		4905534	0					
ANR	4905551	Identifier	other		4905534	0					
ANR	4905552	Identifier	number		4905534	1					
ANR	4905553	ArgumentList			4905534	1					
ANR	4905554	CallExpression	this -> number ( )		4905534	1					
ANR	4905555	Callee	this -> number		4905534	0					
ANR	4905556	PtrMemberAccess	this -> number		4905534	0					
ANR	4905557	Identifier	this		4905534	0					
ANR	4905558	Identifier	number		4905534	1					
ANR	4905559	ArgumentList			4905534	1					
ANR	4905560	CompoundStatement		6:41:123:123	4905534	1					
ANR	4905561	ReturnStatement	return false ;	458:2:9435:9447	4905534	0	True				
ANR	4905562	Identifier	false		4905534	0					
ANR	4905563	ExpressionStatement	iter . Initialize ( other . getList ( ) )	462:1:9524:9559	4905534	3	True				
ANR	4905564	CallExpression	iter . Initialize ( other . getList ( ) )		4905534	0					
ANR	4905565	Callee	iter . Initialize		4905534	0					
ANR	4905566	MemberAccess	iter . Initialize		4905534	0					
ANR	4905567	Identifier	iter		4905534	0					
ANR	4905568	Identifier	Initialize		4905534	1					
ANR	4905569	ArgumentList	other . getList ( )		4905534	1					
ANR	4905570	Argument	other . getList ( )		4905534	0					
ANR	4905571	CallExpression	other . getList ( )		4905534	0					
ANR	4905572	Callee	other . getList		4905534	0					
ANR	4905573	MemberAccess	other . getList		4905534	0					
ANR	4905574	Identifier	other		4905534	0					
ANR	4905575	Identifier	getList		4905534	1					
ANR	4905576	ArgumentList			4905534	1					
ANR	4905577	ExpressionStatement	iter . ToBeforeFirst ( )	463:1:9562:9583	4905534	4	True				
ANR	4905578	CallExpression	iter . ToBeforeFirst ( )		4905534	0					
ANR	4905579	Callee	iter . ToBeforeFirst		4905534	0					
ANR	4905580	MemberAccess	iter . ToBeforeFirst		4905534	0					
ANR	4905581	Identifier	iter		4905534	0					
ANR	4905582	Identifier	ToBeforeFirst		4905534	1					
ANR	4905583	ArgumentList			4905534	1					
ANR	4905584	WhileStatement	while ( iter . Next ( x ) )		4905534	5					
ANR	4905585	Condition	iter . Next ( x )	464:9:9594:9605	4905534	0	True				
ANR	4905586	CallExpression	iter . Next ( x )		4905534	0					
ANR	4905587	Callee	iter . Next		4905534	0					
ANR	4905588	MemberAccess	iter . Next		4905534	0					
ANR	4905589	Identifier	iter		4905534	0					
ANR	4905590	Identifier	Next		4905534	1					
ANR	4905591	ArgumentList	x		4905534	1					
ANR	4905592	Argument	x		4905534	0					
ANR	4905593	Identifier	x		4905534	0					
ANR	4905594	CompoundStatement		13:24:301:301	4905534	1					
ANR	4905595	IfStatement	"if ( ! find ( x , anycase ) )"		4905534	0					
ANR	4905596	Condition	"! find ( x , anycase )"	465:7:9618:9636	4905534	0	True				
ANR	4905597	UnaryOperationExpression	"! find ( x , anycase )"		4905534	0					
ANR	4905598	UnaryOperator	!		4905534	0					
ANR	4905599	CallExpression	"find ( x , anycase )"		4905534	1					
ANR	4905600	Callee	find		4905534	0					
ANR	4905601	Identifier	find		4905534	0					
ANR	4905602	ArgumentList	x		4905534	1					
ANR	4905603	Argument	x		4905534	0					
ANR	4905604	Identifier	x		4905534	0					
ANR	4905605	Argument	anycase		4905534	1					
ANR	4905606	Identifier	anycase		4905534	0					
ANR	4905607	CompoundStatement		14:29:332:332	4905534	1					
ANR	4905608	ReturnStatement	return false ;	466:3:9645:9657	4905534	0	True				
ANR	4905609	Identifier	false		4905534	0					
ANR	4905610	ExpressionStatement	iter . Initialize ( m_strings )	471:1:9738:9767	4905534	6	True				
ANR	4905611	CallExpression	iter . Initialize ( m_strings )		4905534	0					
ANR	4905612	Callee	iter . Initialize		4905534	0					
ANR	4905613	MemberAccess	iter . Initialize		4905534	0					
ANR	4905614	Identifier	iter		4905534	0					
ANR	4905615	Identifier	Initialize		4905534	1					
ANR	4905616	ArgumentList	m_strings		4905534	1					
ANR	4905617	Argument	m_strings		4905534	0					
ANR	4905618	Identifier	m_strings		4905534	0					
ANR	4905619	ExpressionStatement	iter . ToBeforeFirst ( )	472:1:9770:9791	4905534	7	True				
ANR	4905620	CallExpression	iter . ToBeforeFirst ( )		4905534	0					
ANR	4905621	Callee	iter . ToBeforeFirst		4905534	0					
ANR	4905622	MemberAccess	iter . ToBeforeFirst		4905534	0					
ANR	4905623	Identifier	iter		4905534	0					
ANR	4905624	Identifier	ToBeforeFirst		4905534	1					
ANR	4905625	ArgumentList			4905534	1					
ANR	4905626	WhileStatement	while ( iter . Next ( x ) )		4905534	8					
ANR	4905627	Condition	iter . Next ( x )	473:9:9802:9813	4905534	0	True				
ANR	4905628	CallExpression	iter . Next ( x )		4905534	0					
ANR	4905629	Callee	iter . Next		4905534	0					
ANR	4905630	MemberAccess	iter . Next		4905534	0					
ANR	4905631	Identifier	iter		4905534	0					
ANR	4905632	Identifier	Next		4905534	1					
ANR	4905633	ArgumentList	x		4905534	1					
ANR	4905634	Argument	x		4905534	0					
ANR	4905635	Identifier	x		4905534	0					
ANR	4905636	CompoundStatement		22:24:509:509	4905534	1					
ANR	4905637	IfStatement	"if ( ! other . find ( x , anycase ) )"		4905534	0					
ANR	4905638	Condition	"! other . find ( x , anycase )"	474:7:9826:9850	4905534	0	True				
ANR	4905639	UnaryOperationExpression	"! other . find ( x , anycase )"		4905534	0					
ANR	4905640	UnaryOperator	!		4905534	0					
ANR	4905641	CallExpression	"other . find ( x , anycase )"		4905534	1					
ANR	4905642	Callee	other . find		4905534	0					
ANR	4905643	MemberAccess	other . find		4905534	0					
ANR	4905644	Identifier	other		4905534	0					
ANR	4905645	Identifier	find		4905534	1					
ANR	4905646	ArgumentList	x		4905534	1					
ANR	4905647	Argument	x		4905534	0					
ANR	4905648	Identifier	x		4905534	0					
ANR	4905649	Argument	anycase		4905534	1					
ANR	4905650	Identifier	anycase		4905534	0					
ANR	4905651	CompoundStatement		23:35:546:546	4905534	1					
ANR	4905652	ReturnStatement	return false ;	475:3:9859:9871	4905534	0	True				
ANR	4905653	Identifier	false		4905534	0					
ANR	4905654	ReturnStatement	return true ;	479:1:9882:9893	4905534	9	True				
ANR	4905655	Identifier	true		4905534	0					
ANR	4905656	ReturnType	bool		4905534	1					
ANR	4905657	Identifier	StringList :: identical		4905534	2					
ANR	4905658	ParameterList	"const StringList & other , bool anycase"		4905534	3					
ANR	4905659	Parameter	const StringList & other	451:23:9261:9283	4905534	0	True				
ANR	4905660	ParameterType	const StringList &		4905534	0					
ANR	4905661	Identifier	other		4905534	1					
ANR	4905662	Parameter	bool anycase	451:48:9286:9297	4905534	1	True				
ANR	4905663	ParameterType	bool		4905534	0					
ANR	4905664	Identifier	anycase		4905534	1					
ANR	4905665	CFGEntryNode	ENTRY		4905534		True				
ANR	4905666	CFGExitNode	EXIT		4905534		True				
ANR	4905667	Symbol	other		4905534						
ANR	4905668	Symbol	iter . Next		4905534						
ANR	4905669	Symbol	this -> number		4905534						
ANR	4905670	Symbol	other . find		4905534						
ANR	4905671	Symbol	this		4905534						
ANR	4905672	Symbol	false		4905534						
ANR	4905673	Symbol	iter		4905534						
ANR	4905674	Symbol	other . number		4905534						
ANR	4905675	Symbol	* this		4905534						
ANR	4905676	Symbol	anycase		4905534						
ANR	4905677	Symbol	find		4905534						
ANR	4905678	Symbol	x		4905534						
ANR	4905679	Symbol	true		4905534						
ANR	4905680	Symbol	m_strings		4905534						
ANR	4905681	Symbol	other . getList		4905534						
ANR	4905682	Function	StringList :: print_to_string	484:0:10005:10091							
ANR	4905683	FunctionDef	StringList :: print_to_string ()		4905682	0					
ANR	4905684	CompoundStatement		486:0:10051:10091	4905682	0					
ANR	4905685	ReturnStatement	"return print_to_delimed_string ( "","" ) ;"	487:1:10054:10089	4905682	0	True				
ANR	4905686	CallExpression	"print_to_delimed_string ( "","" )"		4905682	0					
ANR	4905687	Callee	print_to_delimed_string		4905682	0					
ANR	4905688	Identifier	print_to_delimed_string		4905682	0					
ANR	4905689	ArgumentList	""","""		4905682	1					
ANR	4905690	Argument	""","""		4905682	0					
ANR	4905691	PrimaryExpression	""","""		4905682	0					
ANR	4905692	ReturnType	char *		4905682	1					
ANR	4905693	Identifier	StringList :: print_to_string		4905682	2					
ANR	4905694	ParameterList			4905682	3					
ANR	4905695	CFGEntryNode	ENTRY		4905682		True				
ANR	4905696	CFGExitNode	EXIT		4905682		True				
ANR	4905697	Symbol	print_to_delimed_string		4905682						
ANR	4905698	Function	StringList :: print_to_delimed_string	490:0:10094:11032							
ANR	4905699	FunctionDef	StringList :: print_to_delimed_string (const char * delim)		4905698	0					
ANR	4905700	CompoundStatement		492:0:10162:11032	4905698	0					
ANR	4905701	IdentifierDeclStatement	ListIterator < char > iter ;	494:4:10169:10193	4905698	0	True				
ANR	4905702	IdentifierDecl	iter		4905698	0					
ANR	4905703	IdentifierDeclType	ListIterator < char >		4905698	0					
ANR	4905704	Identifier	iter		4905698	1					
ANR	4905705	IdentifierDeclStatement	char * tmp ;	495:1:10196:10208	4905698	1	True				
ANR	4905706	IdentifierDecl	* tmp		4905698	0					
ANR	4905707	IdentifierDeclType	char *		4905698	0					
ANR	4905708	Identifier	tmp		4905698	1					
ANR	4905709	IfStatement	if ( delim == NULL )		4905698	2					
ANR	4905710	Condition	delim == NULL	497:6:10217:10229	4905698	0	True				
ANR	4905711	EqualityExpression	delim == NULL		4905698	0		==			
ANR	4905712	Identifier	delim		4905698	0					
ANR	4905713	Identifier	NULL		4905698	1					
ANR	4905714	CompoundStatement		6:22:70:70	4905698	1					
ANR	4905715	ExpressionStatement	delim = m_delimiters	498:2:10237:10257	4905698	0	True				
ANR	4905716	AssignmentExpression	delim = m_delimiters		4905698	0		=			
ANR	4905717	Identifier	delim		4905698	0					
ANR	4905718	Identifier	m_delimiters		4905698	1					
ANR	4905719	IdentifierDeclStatement	int num = m_strings . Number ( ) ;	502:1:10318:10346	4905698	3	True				
ANR	4905720	IdentifierDecl	num = m_strings . Number ( )		4905698	0					
ANR	4905721	IdentifierDeclType	int		4905698	0					
ANR	4905722	Identifier	num		4905698	1					
ANR	4905723	AssignmentExpression	num = m_strings . Number ( )		4905698	2		=			
ANR	4905724	Identifier	num		4905698	0					
ANR	4905725	CallExpression	m_strings . Number ( )		4905698	1					
ANR	4905726	Callee	m_strings . Number		4905698	0					
ANR	4905727	MemberAccess	m_strings . Number		4905698	0					
ANR	4905728	Identifier	m_strings		4905698	0					
ANR	4905729	Identifier	Number		4905698	1					
ANR	4905730	ArgumentList			4905698	1					
ANR	4905731	IfStatement	if ( num == 0 )		4905698	4					
ANR	4905732	Condition	num == 0	503:4:10352:10359	4905698	0	True				
ANR	4905733	EqualityExpression	num == 0		4905698	0		==			
ANR	4905734	Identifier	num		4905698	0					
ANR	4905735	PrimaryExpression	0		4905698	1					
ANR	4905736	CompoundStatement		12:14:199:199	4905698	1					
ANR	4905737	ReturnStatement	return NULL ;	504:2:10366:10377	4905698	0	True				
ANR	4905738	Identifier	NULL		4905698	0					
ANR	4905739	ExpressionStatement	iter . Initialize ( m_strings )	507:4:10387:10415	4905698	5	True				
ANR	4905740	CallExpression	iter . Initialize ( m_strings )		4905698	0					
ANR	4905741	Callee	iter . Initialize		4905698	0					
ANR	4905742	MemberAccess	iter . Initialize		4905698	0					
ANR	4905743	Identifier	iter		4905698	0					
ANR	4905744	Identifier	Initialize		4905698	1					
ANR	4905745	ArgumentList	m_strings		4905698	1					
ANR	4905746	Argument	m_strings		4905698	0					
ANR	4905747	Identifier	m_strings		4905698	0					
ANR	4905748	ExpressionStatement	iter . ToBeforeFirst ( )	508:4:10421:10442	4905698	6	True				
ANR	4905749	CallExpression	iter . ToBeforeFirst ( )		4905698	0					
ANR	4905750	Callee	iter . ToBeforeFirst		4905698	0					
ANR	4905751	MemberAccess	iter . ToBeforeFirst		4905698	0					
ANR	4905752	Identifier	iter		4905698	0					
ANR	4905753	Identifier	ToBeforeFirst		4905698	1					
ANR	4905754	ArgumentList			4905698	1					
ANR	4905755	IdentifierDeclStatement	int len = 1 ;	509:1:10445:10457	4905698	7	True				
ANR	4905756	IdentifierDecl	len = 1		4905698	0					
ANR	4905757	IdentifierDeclType	int		4905698	0					
ANR	4905758	Identifier	len		4905698	1					
ANR	4905759	AssignmentExpression	len = 1		4905698	2		=			
ANR	4905760	Identifier	len		4905698	0					
ANR	4905761	PrimaryExpression	1		4905698	1					
ANR	4905762	WhileStatement	while ( iter . Next ( tmp ) )		4905698	8					
ANR	4905763	Condition	iter . Next ( tmp )	510:9:10468:10481	4905698	0	True				
ANR	4905764	CallExpression	iter . Next ( tmp )		4905698	0					
ANR	4905765	Callee	iter . Next		4905698	0					
ANR	4905766	MemberAccess	iter . Next		4905698	0					
ANR	4905767	Identifier	iter		4905698	0					
ANR	4905768	Identifier	Next		4905698	1					
ANR	4905769	ArgumentList	tmp		4905698	1					
ANR	4905770	Argument	tmp		4905698	0					
ANR	4905771	Identifier	tmp		4905698	0					
ANR	4905772	CompoundStatement		19:26:322:322	4905698	1					
ANR	4905773	ExpressionStatement	len += ( strlen ( tmp ) + strlen ( delim ) )	511:2:10489:10527	4905698	0	True				
ANR	4905774	AssignmentExpression	len += ( strlen ( tmp ) + strlen ( delim ) )		4905698	0		+=			
ANR	4905775	Identifier	len		4905698	0					
ANR	4905776	AdditiveExpression	strlen ( tmp ) + strlen ( delim )		4905698	1		+			
ANR	4905777	CallExpression	strlen ( tmp )		4905698	0					
ANR	4905778	Callee	strlen		4905698	0					
ANR	4905779	Identifier	strlen		4905698	0					
ANR	4905780	ArgumentList	tmp		4905698	1					
ANR	4905781	Argument	tmp		4905698	0					
ANR	4905782	Identifier	tmp		4905698	0					
ANR	4905783	CallExpression	strlen ( delim )		4905698	1					
ANR	4905784	Callee	strlen		4905698	0					
ANR	4905785	Identifier	strlen		4905698	0					
ANR	4905786	ArgumentList	delim		4905698	1					
ANR	4905787	Argument	delim		4905698	0					
ANR	4905788	Identifier	delim		4905698	0					
ANR	4905789	IdentifierDeclStatement	"char * buf = ( char * ) calloc ( len , 1 ) ;"	516:1:10649:10683	4905698	9	True				
ANR	4905790	IdentifierDecl	"* buf = ( char * ) calloc ( len , 1 )"		4905698	0					
ANR	4905791	IdentifierDeclType	char *		4905698	0					
ANR	4905792	Identifier	buf		4905698	1					
ANR	4905793	AssignmentExpression	"* buf = ( char * ) calloc ( len , 1 )"		4905698	2		=			
ANR	4905794	Identifier	buf		4905698	0					
ANR	4905795	CastExpression	"( char * ) calloc ( len , 1 )"		4905698	1					
ANR	4905796	CastTarget	char *		4905698	0					
ANR	4905797	CallExpression	"calloc ( len , 1 )"		4905698	1					
ANR	4905798	Callee	calloc		4905698	0					
ANR	4905799	Identifier	calloc		4905698	0					
ANR	4905800	ArgumentList	len		4905698	1					
ANR	4905801	Argument	len		4905698	0					
ANR	4905802	Identifier	len		4905698	0					
ANR	4905803	Argument	1		4905698	1					
ANR	4905804	PrimaryExpression	1		4905698	0					
ANR	4905805	IfStatement	if ( buf == NULL )		4905698	10					
ANR	4905806	Condition	buf == NULL	517:5:10690:10700	4905698	0	True				
ANR	4905807	EqualityExpression	buf == NULL		4905698	0		==			
ANR	4905808	Identifier	buf		4905698	0					
ANR	4905809	Identifier	NULL		4905698	1					
ANR	4905810	CompoundStatement		26:18:540:540	4905698	1					
ANR	4905811	ExpressionStatement	"EXCEPT ( ""Out of memory in StringList::print_to_string"" )"	518:2:10707:10761	4905698	0	True				
ANR	4905812	CallExpression	"EXCEPT ( ""Out of memory in StringList::print_to_string"" )"		4905698	0					
ANR	4905813	Callee	EXCEPT		4905698	0					
ANR	4905814	Identifier	EXCEPT		4905698	0					
ANR	4905815	ArgumentList	"""Out of memory in StringList::print_to_string"""		4905698	1					
ANR	4905816	Argument	"""Out of memory in StringList::print_to_string"""		4905698	0					
ANR	4905817	PrimaryExpression	"""Out of memory in StringList::print_to_string"""		4905698	0					
ANR	4905818	ExpressionStatement	* buf = '\\0'	520:1:10767:10778	4905698	11	True				
ANR	4905819	AssignmentExpression	* buf = '\\0'		4905698	0		=			
ANR	4905820	UnaryOperationExpression	* buf		4905698	0					
ANR	4905821	UnaryOperator	*		4905698	0					
ANR	4905822	Identifier	buf		4905698	1					
ANR	4905823	PrimaryExpression	'\\0'		4905698	1					
ANR	4905824	ExpressionStatement	iter . Initialize ( m_strings )	522:4:10785:10813	4905698	12	True				
ANR	4905825	CallExpression	iter . Initialize ( m_strings )		4905698	0					
ANR	4905826	Callee	iter . Initialize		4905698	0					
ANR	4905827	MemberAccess	iter . Initialize		4905698	0					
ANR	4905828	Identifier	iter		4905698	0					
ANR	4905829	Identifier	Initialize		4905698	1					
ANR	4905830	ArgumentList	m_strings		4905698	1					
ANR	4905831	Argument	m_strings		4905698	0					
ANR	4905832	Identifier	m_strings		4905698	0					
ANR	4905833	ExpressionStatement	iter . ToBeforeFirst ( )	523:4:10819:10840	4905698	13	True				
ANR	4905834	CallExpression	iter . ToBeforeFirst ( )		4905698	0					
ANR	4905835	Callee	iter . ToBeforeFirst		4905698	0					
ANR	4905836	MemberAccess	iter . ToBeforeFirst		4905698	0					
ANR	4905837	Identifier	iter		4905698	0					
ANR	4905838	Identifier	ToBeforeFirst		4905698	1					
ANR	4905839	ArgumentList			4905698	1					
ANR	4905840	IdentifierDeclStatement	int n = 0 ;	524:1:10843:10853	4905698	14	True				
ANR	4905841	IdentifierDecl	n = 0		4905698	0					
ANR	4905842	IdentifierDeclType	int		4905698	0					
ANR	4905843	Identifier	n		4905698	1					
ANR	4905844	AssignmentExpression	n = 0		4905698	2		=			
ANR	4905845	Identifier	n		4905698	0					
ANR	4905846	PrimaryExpression	0		4905698	1					
ANR	4905847	WhileStatement	while ( iter . Next ( tmp ) )		4905698	15					
ANR	4905848	Condition	iter . Next ( tmp )	525:9:10864:10877	4905698	0	True				
ANR	4905849	CallExpression	iter . Next ( tmp )		4905698	0					
ANR	4905850	Callee	iter . Next		4905698	0					
ANR	4905851	MemberAccess	iter . Next		4905698	0					
ANR	4905852	Identifier	iter		4905698	0					
ANR	4905853	Identifier	Next		4905698	1					
ANR	4905854	ArgumentList	tmp		4905698	1					
ANR	4905855	Argument	tmp		4905698	0					
ANR	4905856	Identifier	tmp		4905698	0					
ANR	4905857	CompoundStatement		34:26:718:718	4905698	1					
ANR	4905858	ExpressionStatement	"strcat ( buf , tmp )"	526:2:10885:10903	4905698	0	True				
ANR	4905859	CallExpression	"strcat ( buf , tmp )"		4905698	0					
ANR	4905860	Callee	strcat		4905698	0					
ANR	4905861	Identifier	strcat		4905698	0					
ANR	4905862	ArgumentList	buf		4905698	1					
ANR	4905863	Argument	buf		4905698	0					
ANR	4905864	Identifier	buf		4905698	0					
ANR	4905865	Argument	tmp		4905698	1					
ANR	4905866	Identifier	tmp		4905698	0					
ANR	4905867	IfStatement	if ( ++ n < num )		4905698	1					
ANR	4905868	Condition	++ n < num	529:7:10974:10982	4905698	0	True				
ANR	4905869	RelationalExpression	++ n < num		4905698	0		<			
ANR	4905870	UnaryExpression	++ n		4905698	0					
ANR	4905871	IncDec	++		4905698	0					
ANR	4905872	Identifier	n		4905698	1					
ANR	4905873	Identifier	num		4905698	1					
ANR	4905874	CompoundStatement		38:19:823:823	4905698	1					
ANR	4905875	ExpressionStatement	"strcat ( buf , delim )"	530:3:10991:11009	4905698	0	True				
ANR	4905876	CallExpression	"strcat ( buf , delim )"		4905698	0					
ANR	4905877	Callee	strcat		4905698	0					
ANR	4905878	Identifier	strcat		4905698	0					
ANR	4905879	ArgumentList	buf		4905698	1					
ANR	4905880	Argument	buf		4905698	0					
ANR	4905881	Identifier	buf		4905698	0					
ANR	4905882	Argument	delim		4905698	1					
ANR	4905883	Identifier	delim		4905698	0					
ANR	4905884	ReturnStatement	return buf ;	534:1:11020:11030	4905698	16	True				
ANR	4905885	Identifier	buf		4905698	0					
ANR	4905886	ReturnType	char *		4905698	1					
ANR	4905887	Identifier	StringList :: print_to_delimed_string		4905698	2					
ANR	4905888	ParameterList	const char * delim		4905698	3					
ANR	4905889	Parameter	const char * delim	491:36:10137:10153	4905698	0	True				
ANR	4905890	ParameterType	const char *		4905698	0					
ANR	4905891	Identifier	delim		4905698	1					
ANR	4905892	CFGEntryNode	ENTRY		4905698		True				
ANR	4905893	CFGExitNode	EXIT		4905698		True				
ANR	4905894	Symbol	* buf		4905698						
ANR	4905895	Symbol	NULL		4905698						
ANR	4905896	Symbol	m_delimiters		4905698						
ANR	4905897	Symbol	iter . Next		4905698						
ANR	4905898	Symbol	num		4905698						
ANR	4905899	Symbol	iter		4905698						
ANR	4905900	Symbol	calloc		4905698						
ANR	4905901	Symbol	n		4905698						
ANR	4905902	Symbol	m_strings . Number		4905698						
ANR	4905903	Symbol	strlen		4905698						
ANR	4905904	Symbol	buf		4905698						
ANR	4905905	Symbol	len		4905698						
ANR	4905906	Symbol	tmp		4905698						
ANR	4905907	Symbol	m_strings		4905698						
ANR	4905908	Symbol	delim		4905698						
ANR	4905909	Function	StringList :: deleteCurrent	537:0:11035:11161							
ANR	4905910	FunctionDef	StringList :: deleteCurrent ()		4905909	0					
ANR	4905911	CompoundStatement		538:28:11068:11161	4905909	0					
ANR	4905912	IfStatement	if ( m_strings . Current ( ) )		4905909	0					
ANR	4905913	Condition	m_strings . Current ( )	539:5:11075:11093	4905909	0	True				
ANR	4905914	CallExpression	m_strings . Current ( )		4905909	0					
ANR	4905915	Callee	m_strings . Current		4905909	0					
ANR	4905916	MemberAccess	m_strings . Current		4905909	0					
ANR	4905917	Identifier	m_strings		4905909	0					
ANR	4905918	Identifier	Current		4905909	1					
ANR	4905919	ArgumentList			4905909	1					
ANR	4905920	CompoundStatement		2:27:28:28	4905909	1					
ANR	4905921	ExpressionStatement	FREE ( m_strings . Current ( ) )	540:2:11101:11128	4905909	0	True				
ANR	4905922	CallExpression	FREE ( m_strings . Current ( ) )		4905909	0					
ANR	4905923	Callee	FREE		4905909	0					
ANR	4905924	Identifier	FREE		4905909	0					
ANR	4905925	ArgumentList	m_strings . Current ( )		4905909	1					
ANR	4905926	Argument	m_strings . Current ( )		4905909	0					
ANR	4905927	CallExpression	m_strings . Current ( )		4905909	0					
ANR	4905928	Callee	m_strings . Current		4905909	0					
ANR	4905929	MemberAccess	m_strings . Current		4905909	0					
ANR	4905930	Identifier	m_strings		4905909	0					
ANR	4905931	Identifier	Current		4905909	1					
ANR	4905932	ArgumentList			4905909	1					
ANR	4905933	ExpressionStatement	m_strings . DeleteCurrent ( )	542:1:11134:11159	4905909	1	True				
ANR	4905934	CallExpression	m_strings . DeleteCurrent ( )		4905909	0					
ANR	4905935	Callee	m_strings . DeleteCurrent		4905909	0					
ANR	4905936	MemberAccess	m_strings . DeleteCurrent		4905909	0					
ANR	4905937	Identifier	m_strings		4905909	0					
ANR	4905938	Identifier	DeleteCurrent		4905909	1					
ANR	4905939	ArgumentList			4905909	1					
ANR	4905940	ReturnType	void		4905909	1					
ANR	4905941	Identifier	StringList :: deleteCurrent		4905909	2					
ANR	4905942	ParameterList			4905909	3					
ANR	4905943	CFGEntryNode	ENTRY		4905909		True				
ANR	4905944	CFGExitNode	EXIT		4905909		True				
ANR	4905945	Symbol	m_strings		4905909						
ANR	4905946	Symbol	m_strings . Current		4905909						
ANR	4905947	Function	string_compare	546:0:11165:11281							
ANR	4905948	FunctionDef	"string_compare (const void * x , const void * y)"		4905947	0					
ANR	4905949	CompoundStatement		546:56:11221:11281	4905947	0					
ANR	4905950	Statement	return	547:1:11224:11229	4905947	0	True				
ANR	4905951	Statement	strcmp	547:8:11231:11236	4905947	1	True				
ANR	4905952	Statement	(	547:14:11237:11237	4905947	2	True				
ANR	4905953	Statement	*	547:15:11238:11238	4905947	3	True				
ANR	4905954	Statement	(	547:16:11239:11239	4905947	4	True				
ANR	4905955	Statement	char	547:17:11240:11243	4905947	5	True				
ANR	4905956	Statement	*	547:22:11245:11245	4905947	6	True				
ANR	4905957	Statement	const	547:24:11247:11251	4905947	7	True				
ANR	4905958	Statement	*	547:30:11253:11253	4905947	8	True				
ANR	4905959	Statement	)	547:31:11254:11254	4905947	9	True				
ANR	4905960	Statement	x	547:33:11256:11256	4905947	10	True				
ANR	4905961	Statement	","	547:34:11257:11257	4905947	11	True				
ANR	4905962	Statement	*	547:36:11259:11259	4905947	12	True				
ANR	4905963	Statement	(	547:37:11260:11260	4905947	13	True				
ANR	4905964	Statement	char	547:38:11261:11264	4905947	14	True				
ANR	4905965	Statement	*	547:43:11266:11266	4905947	15	True				
ANR	4905966	Statement	const	547:45:11268:11272	4905947	16	True				
ANR	4905967	Statement	*	547:51:11274:11274	4905947	17	True				
ANR	4905968	Statement	)	547:52:11275:11275	4905947	18	True				
ANR	4905969	Statement	y	547:54:11277:11277	4905947	19	True				
ANR	4905970	Statement	)	547:55:11278:11278	4905947	20	True				
ANR	4905971	ExpressionStatement		547:56:11279:11279	4905947	21	True				
ANR	4905972	ReturnType	static int		4905947	1					
ANR	4905973	Identifier	string_compare		4905947	2					
ANR	4905974	ParameterList	"const void * x , const void * y"		4905947	3					
ANR	4905975	Parameter	const void * x	546:26:11191:11203	4905947	0	True				
ANR	4905976	ParameterType	const void *		4905947	0					
ANR	4905977	Identifier	x		4905947	1					
ANR	4905978	Parameter	const void * y	546:41:11206:11218	4905947	1	True				
ANR	4905979	ParameterType	const void *		4905947	0					
ANR	4905980	Identifier	y		4905947	1					
ANR	4905981	CFGEntryNode	ENTRY		4905947		True				
ANR	4905982	CFGExitNode	EXIT		4905947		True				
ANR	4905983	Symbol	x		4905947						
ANR	4905984	Symbol	y		4905947						
ANR	4905985	Function	StringList :: qsort	550:0:11284:11700							
ANR	4905986	FunctionDef	StringList :: qsort ()		4905985	0					
ANR	4905987	CompoundStatement		551:20:11309:11700	4905985	0					
ANR	4905988	IdentifierDeclStatement	char * str ;	552:1:11312:11321	4905985	0	True				
ANR	4905989	IdentifierDecl	* str		4905985	0					
ANR	4905990	IdentifierDeclType	char *		4905985	0					
ANR	4905991	Identifier	str		4905985	1					
ANR	4905992	IdentifierDeclStatement	int i ;	553:2:11325:11330	4905985	1	True				
ANR	4905993	IdentifierDecl	i		4905985	0					
ANR	4905994	IdentifierDeclType	int		4905985	0					
ANR	4905995	Identifier	i		4905985	1					
ANR	4905996	IdentifierDeclStatement	int count = m_strings . Length ( ) ;	554:1:11333:11363	4905985	2	True				
ANR	4905997	IdentifierDecl	count = m_strings . Length ( )		4905985	0					
ANR	4905998	IdentifierDeclType	int		4905985	0					
ANR	4905999	Identifier	count		4905985	1					
ANR	4906000	AssignmentExpression	count = m_strings . Length ( )		4905985	2		=			
ANR	4906001	Identifier	count		4905985	0					
ANR	4906002	CallExpression	m_strings . Length ( )		4905985	1					
ANR	4906003	Callee	m_strings . Length		4905985	0					
ANR	4906004	MemberAccess	m_strings . Length		4905985	0					
ANR	4906005	Identifier	m_strings		4905985	0					
ANR	4906006	Identifier	Length		4905985	1					
ANR	4906007	ArgumentList			4905985	1					
ANR	4906008	IdentifierDeclStatement	"char * * list = ( char * * ) calloc ( count , sizeof ( char * ) ) ;"	555:1:11366:11419	4905985	3	True				
ANR	4906009	IdentifierDecl	"* * list = ( char * * ) calloc ( count , sizeof ( char * ) )"		4905985	0					
ANR	4906010	IdentifierDeclType	char * *		4905985	0					
ANR	4906011	Identifier	list		4905985	1					
ANR	4906012	AssignmentExpression	"* * list = ( char * * ) calloc ( count , sizeof ( char * ) )"		4905985	2		=			
ANR	4906013	Identifier	list		4905985	0					
ANR	4906014	CastExpression	"( char * * ) calloc ( count , sizeof ( char * ) )"		4905985	1					
ANR	4906015	CastTarget	char * *		4905985	0					
ANR	4906016	CallExpression	"calloc ( count , sizeof ( char * ) )"		4905985	1					
ANR	4906017	Callee	calloc		4905985	0					
ANR	4906018	Identifier	calloc		4905985	0					
ANR	4906019	ArgumentList	count		4905985	1					
ANR	4906020	Argument	count		4905985	0					
ANR	4906021	Identifier	count		4905985	0					
ANR	4906022	Argument	sizeof ( char * )		4905985	1					
ANR	4906023	SizeofExpression	sizeof ( char * )		4905985	0					
ANR	4906024	Sizeof	sizeof		4905985	0					
ANR	4906025	SizeofOperand	char *		4905985	1					
ANR	4906026	ForStatement	"for ( i = 0 , m_strings . Rewind ( ) ; ( str = m_strings . Next ( ) ) ; i ++ )"		4905985	4					
ANR	4906027	ForInit	"i = 0 , m_strings . Rewind ( ) ;"	557:6:11428:11453	4905985	0	True				
ANR	4906028	Expression	"i = 0 , m_strings . Rewind ( )"		4905985	0					
ANR	4906029	AssignmentExpression	i = 0		4905985	0		=			
ANR	4906030	Identifier	i		4905985	0					
ANR	4906031	PrimaryExpression	0		4905985	1					
ANR	4906032	CallExpression	m_strings . Rewind ( )		4905985	1					
ANR	4906033	Callee	m_strings . Rewind		4905985	0					
ANR	4906034	MemberAccess	m_strings . Rewind		4905985	0					
ANR	4906035	Identifier	m_strings		4905985	0					
ANR	4906036	Identifier	Rewind		4905985	1					
ANR	4906037	ArgumentList			4905985	1					
ANR	4906038	Condition	str = m_strings . Next ( )	557:33:11455:11478	4905985	1	True				
ANR	4906039	AssignmentExpression	str = m_strings . Next ( )		4905985	0		=			
ANR	4906040	Identifier	str		4905985	0					
ANR	4906041	CallExpression	m_strings . Next ( )		4905985	1					
ANR	4906042	Callee	m_strings . Next		4905985	0					
ANR	4906043	MemberAccess	m_strings . Next		4905985	0					
ANR	4906044	Identifier	m_strings		4905985	0					
ANR	4906045	Identifier	Next		4905985	1					
ANR	4906046	ArgumentList			4905985	1					
ANR	4906047	PostIncDecOperationExpression	i ++	557:59:11481:11483	4905985	2	True				
ANR	4906048	Identifier	i		4905985	0					
ANR	4906049	IncDec	++		4905985	1					
ANR	4906050	CompoundStatement		7:64:176:176	4905985	3					
ANR	4906051	ExpressionStatement	list [ i ] = strdup ( str )	558:2:11490:11511	4905985	0	True				
ANR	4906052	AssignmentExpression	list [ i ] = strdup ( str )		4905985	0		=			
ANR	4906053	ArrayIndexing	list [ i ]		4905985	0					
ANR	4906054	Identifier	list		4905985	0					
ANR	4906055	Identifier	i		4905985	1					
ANR	4906056	CallExpression	strdup ( str )		4905985	1					
ANR	4906057	Callee	strdup		4905985	0					
ANR	4906058	Identifier	strdup		4905985	0					
ANR	4906059	ArgumentList	str		4905985	1					
ANR	4906060	Argument	str		4905985	0					
ANR	4906061	Identifier	str		4905985	0					
ANR	4906062	Statement	::	561:1:11556:11557	4905985	5	True				
ANR	4906063	ExpressionStatement	"qsort ( list , count , sizeof ( char * ) , string_compare )"	561:3:11558:11608	4905985	6	True				
ANR	4906064	CallExpression	"qsort ( list , count , sizeof ( char * ) , string_compare )"		4905985	0					
ANR	4906065	Callee	qsort		4905985	0					
ANR	4906066	Identifier	qsort		4905985	0					
ANR	4906067	ArgumentList	list		4905985	1					
ANR	4906068	Argument	list		4905985	0					
ANR	4906069	Identifier	list		4905985	0					
ANR	4906070	Argument	count		4905985	1					
ANR	4906071	Identifier	count		4905985	0					
ANR	4906072	Argument	sizeof ( char * )		4905985	2					
ANR	4906073	SizeofExpression	sizeof ( char * )		4905985	0					
ANR	4906074	Sizeof	sizeof		4905985	0					
ANR	4906075	SizeofOperand	char *		4905985	1					
ANR	4906076	Argument	string_compare		4905985	3					
ANR	4906077	Identifier	string_compare		4905985	0					
ANR	4906078	ForStatement	"for ( i = 0 , clearAll ( ) ; i < count ; i ++ )"		4905985	7					
ANR	4906079	ForInit	"i = 0 , clearAll ( ) ;"	563:6:11617:11634	4905985	0	True				
ANR	4906080	Expression	"i = 0 , clearAll ( )"		4905985	0					
ANR	4906081	AssignmentExpression	i = 0		4905985	0		=			
ANR	4906082	Identifier	i		4905985	0					
ANR	4906083	PrimaryExpression	0		4905985	1					
ANR	4906084	CallExpression	clearAll ( )		4905985	1					
ANR	4906085	Callee	clearAll		4905985	0					
ANR	4906086	Identifier	clearAll		4905985	0					
ANR	4906087	ArgumentList			4905985	1					
ANR	4906088	Condition	i < count	563:25:11636:11644	4905985	1	True				
ANR	4906089	RelationalExpression	i < count		4905985	0		<			
ANR	4906090	Identifier	i		4905985	0					
ANR	4906091	Identifier	count		4905985	1					
ANR	4906092	PostIncDecOperationExpression	i ++	563:36:11647:11649	4905985	2	True				
ANR	4906093	Identifier	i		4905985	0					
ANR	4906094	IncDec	++		4905985	1					
ANR	4906095	CompoundStatement		13:41:342:342	4905985	3					
ANR	4906096	ExpressionStatement	m_strings . Append ( list [ i ] )	564:2:11656:11681	4905985	0	True				
ANR	4906097	CallExpression	m_strings . Append ( list [ i ] )		4905985	0					
ANR	4906098	Callee	m_strings . Append		4905985	0					
ANR	4906099	MemberAccess	m_strings . Append		4905985	0					
ANR	4906100	Identifier	m_strings		4905985	0					
ANR	4906101	Identifier	Append		4905985	1					
ANR	4906102	ArgumentList	list [ i ]		4905985	1					
ANR	4906103	Argument	list [ i ]		4905985	0					
ANR	4906104	ArrayIndexing	list [ i ]		4905985	0					
ANR	4906105	Identifier	list		4905985	0					
ANR	4906106	Identifier	i		4905985	1					
ANR	4906107	ExpressionStatement	free ( list )	567:1:11688:11698	4905985	8	True				
ANR	4906108	CallExpression	free ( list )		4905985	0					
ANR	4906109	Callee	free		4905985	0					
ANR	4906110	Identifier	free		4905985	0					
ANR	4906111	ArgumentList	list		4905985	1					
ANR	4906112	Argument	list		4905985	0					
ANR	4906113	Identifier	list		4905985	0					
ANR	4906114	ReturnType	void		4905985	1					
ANR	4906115	Identifier	StringList :: qsort		4905985	2					
ANR	4906116	ParameterList			4905985	3					
ANR	4906117	CFGEntryNode	ENTRY		4905985		True				
ANR	4906118	CFGExitNode	EXIT		4905985		True				
ANR	4906119	Symbol	str		4905985						
ANR	4906120	Symbol	string_compare		4905985						
ANR	4906121	Symbol	* i		4905985						
ANR	4906122	Symbol	* list		4905985						
ANR	4906123	Symbol	m_strings . Length		4905985						
ANR	4906124	Symbol	count		4905985						
ANR	4906125	Symbol	i		4905985						
ANR	4906126	Symbol	m_strings		4905985						
ANR	4906127	Symbol	calloc		4905985						
ANR	4906128	Symbol	m_strings . Next		4905985						
ANR	4906129	Symbol	strdup		4905985						
ANR	4906130	Symbol	list		4905985						
ANR	4906131	Function	StringList :: shuffle	570:0:11703:12241							
ANR	4906132	FunctionDef	StringList :: shuffle ()		4906131	0					
ANR	4906133	CompoundStatement		571:22:11730:12241	4906131	0					
ANR	4906134	IdentifierDeclStatement	char * str ;	572:1:11733:11742	4906131	0	True				
ANR	4906135	IdentifierDecl	* str		4906131	0					
ANR	4906136	IdentifierDeclType	char *		4906131	0					
ANR	4906137	Identifier	str		4906131	1					
ANR	4906138	IdentifierDeclStatement	unsigned int i ;	573:2:11746:11760	4906131	1	True				
ANR	4906139	IdentifierDecl	i		4906131	0					
ANR	4906140	IdentifierDeclType	unsigned int		4906131	0					
ANR	4906141	Identifier	i		4906131	1					
ANR	4906142	IdentifierDeclStatement	unsigned int count = m_strings . Length ( ) ;	574:1:11763:11802	4906131	2	True				
ANR	4906143	IdentifierDecl	count = m_strings . Length ( )		4906131	0					
ANR	4906144	IdentifierDeclType	unsigned int		4906131	0					
ANR	4906145	Identifier	count		4906131	1					
ANR	4906146	AssignmentExpression	count = m_strings . Length ( )		4906131	2		=			
ANR	4906147	Identifier	count		4906131	0					
ANR	4906148	CallExpression	m_strings . Length ( )		4906131	1					
ANR	4906149	Callee	m_strings . Length		4906131	0					
ANR	4906150	MemberAccess	m_strings . Length		4906131	0					
ANR	4906151	Identifier	m_strings		4906131	0					
ANR	4906152	Identifier	Length		4906131	1					
ANR	4906153	ArgumentList			4906131	1					
ANR	4906154	IdentifierDeclStatement	"char * * list = ( char * * ) calloc ( count , sizeof ( char * ) ) ;"	575:1:11805:11858	4906131	3	True				
ANR	4906155	IdentifierDecl	"* * list = ( char * * ) calloc ( count , sizeof ( char * ) )"		4906131	0					
ANR	4906156	IdentifierDeclType	char * *		4906131	0					
ANR	4906157	Identifier	list		4906131	1					
ANR	4906158	AssignmentExpression	"* * list = ( char * * ) calloc ( count , sizeof ( char * ) )"		4906131	2		=			
ANR	4906159	Identifier	list		4906131	0					
ANR	4906160	CastExpression	"( char * * ) calloc ( count , sizeof ( char * ) )"		4906131	1					
ANR	4906161	CastTarget	char * *		4906131	0					
ANR	4906162	CallExpression	"calloc ( count , sizeof ( char * ) )"		4906131	1					
ANR	4906163	Callee	calloc		4906131	0					
ANR	4906164	Identifier	calloc		4906131	0					
ANR	4906165	ArgumentList	count		4906131	1					
ANR	4906166	Argument	count		4906131	0					
ANR	4906167	Identifier	count		4906131	0					
ANR	4906168	Argument	sizeof ( char * )		4906131	1					
ANR	4906169	SizeofExpression	sizeof ( char * )		4906131	0					
ANR	4906170	Sizeof	sizeof		4906131	0					
ANR	4906171	SizeofOperand	char *		4906131	1					
ANR	4906172	ForStatement	"for ( i = 0 , m_strings . Rewind ( ) ; ( str = m_strings . Next ( ) ) ; i ++ )"		4906131	4					
ANR	4906173	ForInit	"i = 0 , m_strings . Rewind ( ) ;"	577:6:11867:11892	4906131	0	True				
ANR	4906174	Expression	"i = 0 , m_strings . Rewind ( )"		4906131	0					
ANR	4906175	AssignmentExpression	i = 0		4906131	0		=			
ANR	4906176	Identifier	i		4906131	0					
ANR	4906177	PrimaryExpression	0		4906131	1					
ANR	4906178	CallExpression	m_strings . Rewind ( )		4906131	1					
ANR	4906179	Callee	m_strings . Rewind		4906131	0					
ANR	4906180	MemberAccess	m_strings . Rewind		4906131	0					
ANR	4906181	Identifier	m_strings		4906131	0					
ANR	4906182	Identifier	Rewind		4906131	1					
ANR	4906183	ArgumentList			4906131	1					
ANR	4906184	Condition	str = m_strings . Next ( )	577:33:11894:11917	4906131	1	True				
ANR	4906185	AssignmentExpression	str = m_strings . Next ( )		4906131	0		=			
ANR	4906186	Identifier	str		4906131	0					
ANR	4906187	CallExpression	m_strings . Next ( )		4906131	1					
ANR	4906188	Callee	m_strings . Next		4906131	0					
ANR	4906189	MemberAccess	m_strings . Next		4906131	0					
ANR	4906190	Identifier	m_strings		4906131	0					
ANR	4906191	Identifier	Next		4906131	1					
ANR	4906192	ArgumentList			4906131	1					
ANR	4906193	PostIncDecOperationExpression	i ++	577:59:11920:11922	4906131	2	True				
ANR	4906194	Identifier	i		4906131	0					
ANR	4906195	IncDec	++		4906131	1					
ANR	4906196	CompoundStatement		7:64:194:194	4906131	3					
ANR	4906197	ExpressionStatement	list [ i ] = strdup ( str )	578:2:11929:11950	4906131	0	True				
ANR	4906198	AssignmentExpression	list [ i ] = strdup ( str )		4906131	0		=			
ANR	4906199	ArrayIndexing	list [ i ]		4906131	0					
ANR	4906200	Identifier	list		4906131	0					
ANR	4906201	Identifier	i		4906131	1					
ANR	4906202	CallExpression	strdup ( str )		4906131	1					
ANR	4906203	Callee	strdup		4906131	0					
ANR	4906204	Identifier	strdup		4906131	0					
ANR	4906205	ArgumentList	str		4906131	1					
ANR	4906206	Argument	str		4906131	0					
ANR	4906207	Identifier	str		4906131	0					
ANR	4906208	ForStatement	for ( i = 0 ; i + 1 < count ; i ++ )		4906131	5					
ANR	4906209	ForInit	i = 0 ;	581:6:11962:11967	4906131	0	True				
ANR	4906210	AssignmentExpression	i = 0		4906131	0		=			
ANR	4906211	Identifier	i		4906131	0					
ANR	4906212	PrimaryExpression	0		4906131	1					
ANR	4906213	Condition	i + 1 < count	581:13:11969:11979	4906131	1	True				
ANR	4906214	RelationalExpression	i + 1 < count		4906131	0		<			
ANR	4906215	AdditiveExpression	i + 1		4906131	0		+			
ANR	4906216	Identifier	i		4906131	0					
ANR	4906217	PrimaryExpression	1		4906131	1					
ANR	4906218	Identifier	count		4906131	1					
ANR	4906219	PostIncDecOperationExpression	i ++	581:26:11982:11984	4906131	2	True				
ANR	4906220	Identifier	i		4906131	0					
ANR	4906221	IncDec	++		4906131	1					
ANR	4906222	CompoundStatement		12:2:260:329	4906131	3					
ANR	4906223	IdentifierDeclStatement	unsigned int j = ( unsigned int ) ( i + ( get_random_float ( ) * ( count - i ) ) ) ;	582:2:11991:12060	4906131	0	True				
ANR	4906224	IdentifierDecl	j = ( unsigned int ) ( i + ( get_random_float ( ) * ( count - i ) ) )		4906131	0					
ANR	4906225	IdentifierDeclType	unsigned int		4906131	0					
ANR	4906226	Identifier	j		4906131	1					
ANR	4906227	AssignmentExpression	j = ( unsigned int ) ( i + ( get_random_float ( ) * ( count - i ) ) )		4906131	2		=			
ANR	4906228	Identifier	j		4906131	0					
ANR	4906229	CastExpression	( unsigned int ) ( i + ( get_random_float ( ) * ( count - i ) ) )		4906131	1					
ANR	4906230	CastTarget	unsigned int		4906131	0					
ANR	4906231	AdditiveExpression	i + ( get_random_float ( ) * ( count - i ) )		4906131	1		+			
ANR	4906232	Identifier	i		4906131	0					
ANR	4906233	MultiplicativeExpression	get_random_float ( ) * ( count - i )		4906131	1		*			
ANR	4906234	CallExpression	get_random_float ( )		4906131	0					
ANR	4906235	Callee	get_random_float		4906131	0					
ANR	4906236	Identifier	get_random_float		4906131	0					
ANR	4906237	ArgumentList			4906131	1					
ANR	4906238	AdditiveExpression	count - i		4906131	1		-			
ANR	4906239	Identifier	count		4906131	0					
ANR	4906240	Identifier	i		4906131	1					
ANR	4906241	ExpressionStatement	str = list [ i ]	584:2:12095:12108	4906131	1	True				
ANR	4906242	AssignmentExpression	str = list [ i ]		4906131	0		=			
ANR	4906243	Identifier	str		4906131	0					
ANR	4906244	ArrayIndexing	list [ i ]		4906131	1					
ANR	4906245	Identifier	list		4906131	0					
ANR	4906246	Identifier	i		4906131	1					
ANR	4906247	ExpressionStatement	list [ i ] = list [ j ]	585:2:12112:12129	4906131	2	True				
ANR	4906248	AssignmentExpression	list [ i ] = list [ j ]		4906131	0		=			
ANR	4906249	ArrayIndexing	list [ i ]		4906131	0					
ANR	4906250	Identifier	list		4906131	0					
ANR	4906251	Identifier	i		4906131	1					
ANR	4906252	ArrayIndexing	list [ j ]		4906131	1					
ANR	4906253	Identifier	list		4906131	0					
ANR	4906254	Identifier	j		4906131	1					
ANR	4906255	ExpressionStatement	list [ j ] = str	586:2:12133:12146	4906131	3	True				
ANR	4906256	AssignmentExpression	list [ j ] = str		4906131	0		=			
ANR	4906257	ArrayIndexing	list [ j ]		4906131	0					
ANR	4906258	Identifier	list		4906131	0					
ANR	4906259	Identifier	j		4906131	1					
ANR	4906260	Identifier	str		4906131	1					
ANR	4906261	ForStatement	"for ( i = 0 , clearAll ( ) ; i < count ; i ++ )"		4906131	6					
ANR	4906262	ForInit	"i = 0 , clearAll ( ) ;"	589:6:12158:12175	4906131	0	True				
ANR	4906263	Expression	"i = 0 , clearAll ( )"		4906131	0					
ANR	4906264	AssignmentExpression	i = 0		4906131	0		=			
ANR	4906265	Identifier	i		4906131	0					
ANR	4906266	PrimaryExpression	0		4906131	1					
ANR	4906267	CallExpression	clearAll ( )		4906131	1					
ANR	4906268	Callee	clearAll		4906131	0					
ANR	4906269	Identifier	clearAll		4906131	0					
ANR	4906270	ArgumentList			4906131	1					
ANR	4906271	Condition	i < count	589:25:12177:12185	4906131	1	True				
ANR	4906272	RelationalExpression	i < count		4906131	0		<			
ANR	4906273	Identifier	i		4906131	0					
ANR	4906274	Identifier	count		4906131	1					
ANR	4906275	PostIncDecOperationExpression	i ++	589:36:12188:12190	4906131	2	True				
ANR	4906276	Identifier	i		4906131	0					
ANR	4906277	IncDec	++		4906131	1					
ANR	4906278	CompoundStatement		19:41:462:462	4906131	3					
ANR	4906279	ExpressionStatement	m_strings . Append ( list [ i ] )	590:2:12197:12222	4906131	0	True				
ANR	4906280	CallExpression	m_strings . Append ( list [ i ] )		4906131	0					
ANR	4906281	Callee	m_strings . Append		4906131	0					
ANR	4906282	MemberAccess	m_strings . Append		4906131	0					
ANR	4906283	Identifier	m_strings		4906131	0					
ANR	4906284	Identifier	Append		4906131	1					
ANR	4906285	ArgumentList	list [ i ]		4906131	1					
ANR	4906286	Argument	list [ i ]		4906131	0					
ANR	4906287	ArrayIndexing	list [ i ]		4906131	0					
ANR	4906288	Identifier	list		4906131	0					
ANR	4906289	Identifier	i		4906131	1					
ANR	4906290	ExpressionStatement	free ( list )	593:1:12229:12239	4906131	7	True				
ANR	4906291	CallExpression	free ( list )		4906131	0					
ANR	4906292	Callee	free		4906131	0					
ANR	4906293	Identifier	free		4906131	0					
ANR	4906294	ArgumentList	list		4906131	1					
ANR	4906295	Argument	list		4906131	0					
ANR	4906296	Identifier	list		4906131	0					
ANR	4906297	ReturnType	void		4906131	1					
ANR	4906298	Identifier	StringList :: shuffle		4906131	2					
ANR	4906299	ParameterList			4906131	3					
ANR	4906300	CFGEntryNode	ENTRY		4906131		True				
ANR	4906301	CFGExitNode	EXIT		4906131		True				
ANR	4906302	Symbol	count		4906131						
ANR	4906303	Symbol	i		4906131						
ANR	4906304	Symbol	j		4906131						
ANR	4906305	Symbol	get_random_float		4906131						
ANR	4906306	Symbol	calloc		4906131						
ANR	4906307	Symbol	m_strings . Next		4906131						
ANR	4906308	Symbol	list		4906131						
ANR	4906309	Symbol	str		4906131						
ANR	4906310	Symbol	* i		4906131						
ANR	4906311	Symbol	* j		4906131						
ANR	4906312	Symbol	* list		4906131						
ANR	4906313	Symbol	m_strings . Length		4906131						
ANR	4906314	Symbol	m_strings		4906131						
ANR	4906315	Symbol	strdup		4906131						
