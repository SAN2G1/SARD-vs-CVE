command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4858927	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_read_user_log.cpp								
ANR	4858928	DeclStmt									
ANR	4858929	Decl							const char	const char [ ]	SynchDelimiter
ANR	4858930	DeclStmt									
ANR	4858931	Decl							const int	const int	SCORE_THRESH_RESTORE
ANR	4858932	DeclStmt									
ANR	4858933	Decl							const int	const int	SCORE_THRESH_FWSEARCH
ANR	4858934	DeclStmt									
ANR	4858935	Decl							const int	const int	SCORE_THRESH_NONROT
ANR	4858936	DeclStmt									
ANR	4858937	Decl							const int	const int	SCORE_MIN_MATCH
ANR	4858938	DeclStmt									
ANR	4858939	Decl							const int	const int	SCORE_FACTOR_UNIQ_MATCH
ANR	4858940	DeclStmt									
ANR	4858941	Decl							const int	const int	SCORE_FACTOR_CTIME
ANR	4858942	DeclStmt									
ANR	4858943	Decl							const int	const int	SCORE_FACTOR_INODE
ANR	4858944	DeclStmt									
ANR	4858945	Decl							const int	const int	SCORE_FACTOR_CTIME
ANR	4858946	DeclStmt									
ANR	4858947	Decl							const int	const int	SCORE_FACTOR_INODE
ANR	4858948	DeclStmt									
ANR	4858949	Decl							const int	const int	SCORE_FACTOR_SAME_SIZE
ANR	4858950	DeclStmt									
ANR	4858951	Decl							const int	const int	SCORE_FACTOR_GROWN
ANR	4858952	DeclStmt									
ANR	4858953	Decl							const int	const int	SCORE_FACTOR_SHRUNK
ANR	4858954	DeclStmt									
ANR	4858955	Decl							const int	const int	SCORE_RECENT_THRESH
ANR	4858956	ClassDef	ReadUserLogMatch	74:0:2402:3564							
ANR	4858957	Function	ReadUserLogMatch	79:1:2466:2532							
ANR	4858958	FunctionDef	ReadUserLogMatch (ReadUserLogState * state)		4858957	0					
ANR	4858959	CompoundStatement		79:45:2510:2532	4858957	0					
ANR	4858960	ExpressionStatement	m_state = state	80:2:2514:2529	4858957	0	True				
ANR	4858961	AssignmentExpression	m_state = state		4858957	0		=			
ANR	4858962	Identifier	m_state		4858957	0					
ANR	4858963	Identifier	state		4858957	1					
ANR	4858964	Identifier	ReadUserLogMatch		4858957	1					
ANR	4858965	ParameterList	ReadUserLogState * state		4858957	2					
ANR	4858966	Parameter	ReadUserLogState * state	79:19:2484:2506	4858957	0	True				
ANR	4858967	ParameterType	ReadUserLogState *		4858957	0					
ANR	4858968	Identifier	state		4858957	1					
ANR	4858969	CFGEntryNode	ENTRY		4858957		True				
ANR	4858970	CFGExitNode	EXIT		4858957		True				
ANR	4858971	Symbol	m_state		4858957						
ANR	4858972	Symbol	state		4858957						
ANR	4858973	Function	~ReadUserLogMatch	83:1:2594:2622							
ANR	4858974	FunctionDef	~ReadUserLogMatch ()		4858973	1					
ANR	4858975	CompoundStatement		83:27:2620:2622	4858973	0					
ANR	4858976	Identifier	~ReadUserLogMatch		4858973	1					
ANR	4858977	ParameterList			4858973	2					
ANR	4858978	CFGEntryNode	ENTRY		4858973		True				
ANR	4858979	CFGExitNode	EXIT		4858973		True				
ANR	4858980	ClassDef	MatchResult	86:1:2655:2724							
ANR	4858981	DeclStmt									
ANR	4858982	Decl							ReadUserLogState	ReadUserLogState *	m_state
ANR	4858983	Function	ReadUserLog :: ReadUserLog	128:0:3674:3772							
ANR	4858984	FunctionDef	ReadUserLog :: ReadUserLog (bool isEventLog)		4858983	0					
ANR	4858985	CompoundStatement		129:0:3719:3772	4858983	0					
ANR	4858986	ExpressionStatement	clear ( )	130:1:3722:3729	4858983	0	True				
ANR	4858987	CallExpression	clear ( )		4858983	0					
ANR	4858988	Callee	clear		4858983	0					
ANR	4858989	Identifier	clear		4858983	0					
ANR	4858990	ArgumentList			4858983	1					
ANR	4858991	IfStatement	if ( isEventLog )		4858983	1					
ANR	4858992	Condition	isEventLog	131:6:3737:3746	4858983	0	True				
ANR	4858993	Identifier	isEventLog		4858983	0					
ANR	4858994	CompoundStatement		3:19:30:30	4858983	1					
ANR	4858995	ExpressionStatement	initialize ( )	132:2:3754:3767	4858983	0	True				
ANR	4858996	CallExpression	initialize ( )		4858983	0					
ANR	4858997	Callee	initialize		4858983	0					
ANR	4858998	Identifier	initialize		4858983	0					
ANR	4858999	ArgumentList			4858983	1					
ANR	4859000	Identifier	ReadUserLog :: ReadUserLog		4858983	1					
ANR	4859001	ParameterList	bool isEventLog		4858983	2					
ANR	4859002	Parameter	bool isEventLog	128:27:3701:3715	4858983	0	True				
ANR	4859003	ParameterType	bool		4858983	0					
ANR	4859004	Identifier	isEventLog		4858983	1					
ANR	4859005	CFGEntryNode	ENTRY		4858983		True				
ANR	4859006	CFGExitNode	EXIT		4858983		True				
ANR	4859007	Symbol	isEventLog		4858983						
ANR	4859008	Function	ReadUserLog :: ReadUserLog	136:0:3775:3973							
ANR	4859009	FunctionDef	"ReadUserLog :: ReadUserLog (const char * filename , bool read_only)"		4859008	0					
ANR	4859010	CompoundStatement		137:0:3841:3973	4859008	0					
ANR	4859011	ExpressionStatement	clear ( )	138:1:3844:3851	4859008	0	True				
ANR	4859012	CallExpression	clear ( )		4859008	0					
ANR	4859013	Callee	clear		4859008	0					
ANR	4859014	Identifier	clear		4859008	0					
ANR	4859015	ArgumentList			4859008	1					
ANR	4859016	IfStatement	"if ( ! initialize ( filename , false , false , read_only ) )"		4859008	1					
ANR	4859017	Condition	"! initialize ( filename , false , false , read_only )"	140:8:3862:3908	4859008	0	True				
ANR	4859018	UnaryOperationExpression	"! initialize ( filename , false , false , read_only )"		4859008	0					
ANR	4859019	UnaryOperator	!		4859008	0					
ANR	4859020	CallExpression	"initialize ( filename , false , false , read_only )"		4859008	1					
ANR	4859021	Callee	initialize		4859008	0					
ANR	4859022	Identifier	initialize		4859008	0					
ANR	4859023	ArgumentList	filename		4859008	1					
ANR	4859024	Argument	filename		4859008	0					
ANR	4859025	Identifier	filename		4859008	0					
ANR	4859026	Argument	false		4859008	1					
ANR	4859027	Identifier	false		4859008	0					
ANR	4859028	Argument	false		4859008	2					
ANR	4859029	Identifier	false		4859008	0					
ANR	4859030	Argument	read_only		4859008	3					
ANR	4859031	Identifier	read_only		4859008	0					
ANR	4859032	CompoundStatement		4:57:69:69	4859008	1					
ANR	4859033	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to open %s\\n"" , filename )"	141:2:3915:3965	4859008	0	True				
ANR	4859034	CallExpression	"dprintf ( D_ALWAYS , ""Failed to open %s\\n"" , filename )"		4859008	0					
ANR	4859035	Callee	dprintf		4859008	0					
ANR	4859036	Identifier	dprintf		4859008	0					
ANR	4859037	ArgumentList	D_ALWAYS		4859008	1					
ANR	4859038	Argument	D_ALWAYS		4859008	0					
ANR	4859039	Identifier	D_ALWAYS		4859008	0					
ANR	4859040	Argument	"""Failed to open %s\\n"""		4859008	1					
ANR	4859041	PrimaryExpression	"""Failed to open %s\\n"""		4859008	0					
ANR	4859042	Argument	filename		4859008	2					
ANR	4859043	Identifier	filename		4859008	0					
ANR	4859044	Identifier	ReadUserLog :: ReadUserLog		4859008	1					
ANR	4859045	ParameterList	"const char * filename , bool read_only"		4859008	2					
ANR	4859046	Parameter	const char * filename	136:26:3801:3821	4859008	0	True				
ANR	4859047	ParameterType	const char *		4859008	0					
ANR	4859048	Identifier	filename		4859008	1					
ANR	4859049	Parameter	bool read_only	136:49:3824:3837	4859008	1	True				
ANR	4859050	ParameterType	bool		4859008	0					
ANR	4859051	Identifier	read_only		4859008	1					
ANR	4859052	CFGEntryNode	ENTRY		4859008		True				
ANR	4859053	CFGExitNode	EXIT		4859008		True				
ANR	4859054	Symbol	filename		4859008						
ANR	4859055	Symbol	read_only		4859008						
ANR	4859056	Symbol	false		4859008						
ANR	4859057	Symbol	D_ALWAYS		4859008						
ANR	4859058	Symbol	initialize		4859008						
ANR	4859059	Function	ReadUserLog :: ReadUserLog	146:0:4010:4196							
ANR	4859060	FunctionDef	"ReadUserLog :: ReadUserLog (const FileState & state , bool read_only)"		4859059	0					
ANR	4859061	CompoundStatement		147:0:4077:4196	4859059	0					
ANR	4859062	ExpressionStatement	clear ( )	148:1:4080:4087	4859059	0	True				
ANR	4859063	CallExpression	clear ( )		4859059	0					
ANR	4859064	Callee	clear		4859059	0					
ANR	4859065	Identifier	clear		4859059	0					
ANR	4859066	ArgumentList			4859059	1					
ANR	4859067	IfStatement	"if ( ! initialize ( state , read_only ) )"		4859059	1					
ANR	4859068	Condition	"! initialize ( state , read_only )"	150:8:4098:4127	4859059	0	True				
ANR	4859069	UnaryOperationExpression	"! initialize ( state , read_only )"		4859059	0					
ANR	4859070	UnaryOperator	!		4859059	0					
ANR	4859071	CallExpression	"initialize ( state , read_only )"		4859059	1					
ANR	4859072	Callee	initialize		4859059	0					
ANR	4859073	Identifier	initialize		4859059	0					
ANR	4859074	ArgumentList	state		4859059	1					
ANR	4859075	Argument	state		4859059	0					
ANR	4859076	Identifier	state		4859059	0					
ANR	4859077	Argument	read_only		4859059	1					
ANR	4859078	Identifier	read_only		4859059	0					
ANR	4859079	CompoundStatement		4:40:52:52	4859059	1					
ANR	4859080	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to initialize from state\\n"" )"	151:2:4134:4188	4859059	0	True				
ANR	4859081	CallExpression	"dprintf ( D_ALWAYS , ""Failed to initialize from state\\n"" )"		4859059	0					
ANR	4859082	Callee	dprintf		4859059	0					
ANR	4859083	Identifier	dprintf		4859059	0					
ANR	4859084	ArgumentList	D_ALWAYS		4859059	1					
ANR	4859085	Argument	D_ALWAYS		4859059	0					
ANR	4859086	Identifier	D_ALWAYS		4859059	0					
ANR	4859087	Argument	"""Failed to initialize from state\\n"""		4859059	1					
ANR	4859088	PrimaryExpression	"""Failed to initialize from state\\n"""		4859059	0					
ANR	4859089	Identifier	ReadUserLog :: ReadUserLog		4859059	1					
ANR	4859090	ParameterList	"const FileState & state , bool read_only"		4859059	2					
ANR	4859091	Parameter	const FileState & state	146:26:4036:4057	4859059	0	True				
ANR	4859092	ParameterType	const FileState &		4859059	0					
ANR	4859093	Identifier	state		4859059	1					
ANR	4859094	Parameter	bool read_only	146:50:4060:4073	4859059	1	True				
ANR	4859095	ParameterType	bool		4859059	0					
ANR	4859096	Identifier	read_only		4859059	1					
ANR	4859097	CFGEntryNode	ENTRY		4859059		True				
ANR	4859098	CFGExitNode	EXIT		4859059		True				
ANR	4859099	Symbol	read_only		4859059						
ANR	4859100	Symbol	D_ALWAYS		4859059						
ANR	4859101	Symbol	state		4859059						
ANR	4859102	Symbol	initialize		4859059						
ANR	4859103	Function	ReadUserLog :: ReadUserLog	157:0:4316:4654							
ANR	4859104	FunctionDef	"ReadUserLog :: ReadUserLog (FILE * fp , bool is_xml , bool enable_close)"		4859103	0					
ANR	4859105	CompoundStatement		158:0:4386:4654	4859103	0					
ANR	4859106	ExpressionStatement	clear ( )	159:1:4389:4396	4859103	0	True				
ANR	4859107	CallExpression	clear ( )		4859103	0					
ANR	4859108	Callee	clear		4859103	0					
ANR	4859109	Identifier	clear		4859103	0					
ANR	4859110	ArgumentList			4859103	1					
ANR	4859111	IfStatement	if ( ! fp )		4859103	1					
ANR	4859112	Condition	! fp	160:6:4404:4407	4859103	0	True				
ANR	4859113	UnaryOperationExpression	! fp		4859103	0					
ANR	4859114	UnaryOperator	!		4859103	0					
ANR	4859115	Identifier	fp		4859103	1					
ANR	4859116	CompoundStatement		3:13:24:24	4859103	1					
ANR	4859117	ReturnStatement	return ;	161:2:4415:4421	4859103	0	True				
ANR	4859118	ExpressionStatement	m_fp = fp	163:1:4427:4436	4859103	2	True				
ANR	4859119	AssignmentExpression	m_fp = fp		4859103	0		=			
ANR	4859120	Identifier	m_fp		4859103	0					
ANR	4859121	Identifier	fp		4859103	1					
ANR	4859122	ExpressionStatement	m_fd = fileno ( fp )	164:1:4439:4458	4859103	3	True				
ANR	4859123	AssignmentExpression	m_fd = fileno ( fp )		4859103	0		=			
ANR	4859124	Identifier	m_fd		4859103	0					
ANR	4859125	CallExpression	fileno ( fp )		4859103	1					
ANR	4859126	Callee	fileno		4859103	0					
ANR	4859127	Identifier	fileno		4859103	0					
ANR	4859128	ArgumentList	fp		4859103	1					
ANR	4859129	Argument	fp		4859103	0					
ANR	4859130	Identifier	fp		4859103	0					
ANR	4859131	ExpressionStatement	m_enable_close = enable_close	165:1:4461:4490	4859103	4	True				
ANR	4859132	AssignmentExpression	m_enable_close = enable_close		4859103	0		=			
ANR	4859133	Identifier	m_enable_close		4859103	0					
ANR	4859134	Identifier	enable_close		4859103	1					
ANR	4859135	ExpressionStatement	m_lock = new FakeFileLock ( )	167:1:4494:4522	4859103	5	True				
ANR	4859136	AssignmentExpression	m_lock = new FakeFileLock ( )		4859103	0		=			
ANR	4859137	Identifier	m_lock		4859103	0					
ANR	4859138	UnaryExpression	new FakeFileLock ( )		4859103	1					
ANR	4859139	ExpressionStatement	m_state = new ReadUserLogState ( )	169:1:4526:4559	4859103	6	True				
ANR	4859140	AssignmentExpression	m_state = new ReadUserLogState ( )		4859103	0		=			
ANR	4859141	Identifier	m_state		4859103	0					
ANR	4859142	UnaryExpression	new ReadUserLogState ( )		4859103	1					
ANR	4859143	ExpressionStatement	m_match = new ReadUserLogMatch ( m_state )	170:1:4562:4603	4859103	7	True				
ANR	4859144	AssignmentExpression	m_match = new ReadUserLogMatch ( m_state )		4859103	0		=			
ANR	4859145	Identifier	m_match		4859103	0					
ANR	4859146	Identifier	m_state		4859103	1					
ANR	4859147	ExpressionStatement	m_initialized = true	172:1:4607:4627	4859103	8	True				
ANR	4859148	AssignmentExpression	m_initialized = true		4859103	0		=			
ANR	4859149	Identifier	m_initialized		4859103	0					
ANR	4859150	Identifier	true		4859103	1					
ANR	4859151	ExpressionStatement	setIsXMLLog ( is_xml )	174:1:4631:4652	4859103	9	True				
ANR	4859152	CallExpression	setIsXMLLog ( is_xml )		4859103	0					
ANR	4859153	Callee	setIsXMLLog		4859103	0					
ANR	4859154	Identifier	setIsXMLLog		4859103	0					
ANR	4859155	ArgumentList	is_xml		4859103	1					
ANR	4859156	Argument	is_xml		4859103	0					
ANR	4859157	Identifier	is_xml		4859103	0					
ANR	4859158	Identifier	ReadUserLog :: ReadUserLog		4859103	1					
ANR	4859159	ParameterList	"FILE * fp , bool is_xml , bool enable_close"		4859103	2					
ANR	4859160	Parameter	FILE * fp	157:27:4343:4350	4859103	0	True				
ANR	4859161	ParameterType	FILE *		4859103	0					
ANR	4859162	Identifier	fp		4859103	1					
ANR	4859163	Parameter	bool is_xml	157:37:4353:4363	4859103	1	True				
ANR	4859164	ParameterType	bool		4859103	0					
ANR	4859165	Identifier	is_xml		4859103	1					
ANR	4859166	Parameter	bool enable_close	157:50:4366:4382	4859103	2	True				
ANR	4859167	ParameterType	bool		4859103	0					
ANR	4859168	Identifier	enable_close		4859103	1					
ANR	4859169	CFGEntryNode	ENTRY		4859103		True				
ANR	4859170	CFGExitNode	EXIT		4859103		True				
ANR	4859171	Symbol	m_lock		4859103						
ANR	4859172	Symbol	m_state		4859103						
ANR	4859173	Symbol	m_initialized		4859103						
ANR	4859174	Symbol	m_fd		4859103						
ANR	4859175	Symbol	m_match		4859103						
ANR	4859176	Symbol	fileno		4859103						
ANR	4859177	Symbol	m_enable_close		4859103						
ANR	4859178	Symbol	true		4859103						
ANR	4859179	Symbol	fp		4859103						
ANR	4859180	Symbol	enable_close		4859103						
ANR	4859181	Symbol	is_xml		4859103						
ANR	4859182	Symbol	m_fp		4859103						
ANR	4859183	Function	ReadUserLog :: initialize	183:0:4829:5150							
ANR	4859184	FunctionDef	ReadUserLog :: initialize ()		4859183	0					
ANR	4859185	CompoundStatement		185:0:4866:5150	4859183	0					
ANR	4859186	IdentifierDeclStatement	"char * path = param ( ""EVENT_LOG"" ) ;"	186:1:4869:4902	4859183	0	True				
ANR	4859187	IdentifierDecl	"* path = param ( ""EVENT_LOG"" )"		4859183	0					
ANR	4859188	IdentifierDeclType	char *		4859183	0					
ANR	4859189	Identifier	path		4859183	1					
ANR	4859190	AssignmentExpression	"* path = param ( ""EVENT_LOG"" )"		4859183	2		=			
ANR	4859191	Identifier	path		4859183	0					
ANR	4859192	CallExpression	"param ( ""EVENT_LOG"" )"		4859183	1					
ANR	4859193	Callee	param		4859183	0					
ANR	4859194	Identifier	param		4859183	0					
ANR	4859195	ArgumentList	"""EVENT_LOG"""		4859183	1					
ANR	4859196	Argument	"""EVENT_LOG"""		4859183	0					
ANR	4859197	PrimaryExpression	"""EVENT_LOG"""		4859183	0					
ANR	4859198	IfStatement	if ( NULL == path )		4859183	1					
ANR	4859199	Condition	NULL == path	187:6:4910:4921	4859183	0	True				
ANR	4859200	EqualityExpression	NULL == path		4859183	0		==			
ANR	4859201	Identifier	NULL		4859183	0					
ANR	4859202	Identifier	path		4859183	1					
ANR	4859203	CompoundStatement		3:21:58:58	4859183	1					
ANR	4859204	ExpressionStatement	"Error ( LOG_ERROR_FILE_NOT_FOUND , __LINE__ )"	188:2:4929:4971	4859183	0	True				
ANR	4859205	CallExpression	"Error ( LOG_ERROR_FILE_NOT_FOUND , __LINE__ )"		4859183	0					
ANR	4859206	Callee	Error		4859183	0					
ANR	4859207	Identifier	Error		4859183	0					
ANR	4859208	ArgumentList	LOG_ERROR_FILE_NOT_FOUND		4859183	1					
ANR	4859209	Argument	LOG_ERROR_FILE_NOT_FOUND		4859183	0					
ANR	4859210	Identifier	LOG_ERROR_FILE_NOT_FOUND		4859183	0					
ANR	4859211	Argument	__LINE__		4859183	1					
ANR	4859212	Identifier	__LINE__		4859183	0					
ANR	4859213	ReturnStatement	return false ;	189:2:4975:4987	4859183	1	True				
ANR	4859214	Identifier	false		4859183	0					
ANR	4859215	IdentifierDeclStatement	"int max_rotations = param_integer ( ""EVENT_LOG_MAX_ROTATIONS"" , 1 , 0 ) ;"	191:1:4993:5061	4859183	2	True				
ANR	4859216	IdentifierDecl	"max_rotations = param_integer ( ""EVENT_LOG_MAX_ROTATIONS"" , 1 , 0 )"		4859183	0					
ANR	4859217	IdentifierDeclType	int		4859183	0					
ANR	4859218	Identifier	max_rotations		4859183	1					
ANR	4859219	AssignmentExpression	"max_rotations = param_integer ( ""EVENT_LOG_MAX_ROTATIONS"" , 1 , 0 )"		4859183	2		=			
ANR	4859220	Identifier	max_rotations		4859183	0					
ANR	4859221	CallExpression	"param_integer ( ""EVENT_LOG_MAX_ROTATIONS"" , 1 , 0 )"		4859183	1					
ANR	4859222	Callee	param_integer		4859183	0					
ANR	4859223	Identifier	param_integer		4859183	0					
ANR	4859224	ArgumentList	"""EVENT_LOG_MAX_ROTATIONS"""		4859183	1					
ANR	4859225	Argument	"""EVENT_LOG_MAX_ROTATIONS"""		4859183	0					
ANR	4859226	PrimaryExpression	"""EVENT_LOG_MAX_ROTATIONS"""		4859183	0					
ANR	4859227	Argument	1		4859183	1					
ANR	4859228	PrimaryExpression	1		4859183	0					
ANR	4859229	Argument	0		4859183	2					
ANR	4859230	PrimaryExpression	0		4859183	0					
ANR	4859231	IdentifierDeclStatement	"bool status = initialize ( path , max_rotations , true ) ;"	192:1:5064:5117	4859183	3	True				
ANR	4859232	IdentifierDecl	"status = initialize ( path , max_rotations , true )"		4859183	0					
ANR	4859233	IdentifierDeclType	bool		4859183	0					
ANR	4859234	Identifier	status		4859183	1					
ANR	4859235	AssignmentExpression	"status = initialize ( path , max_rotations , true )"		4859183	2		=			
ANR	4859236	Identifier	status		4859183	0					
ANR	4859237	CallExpression	"initialize ( path , max_rotations , true )"		4859183	1					
ANR	4859238	Callee	initialize		4859183	0					
ANR	4859239	Identifier	initialize		4859183	0					
ANR	4859240	ArgumentList	path		4859183	1					
ANR	4859241	Argument	path		4859183	0					
ANR	4859242	Identifier	path		4859183	0					
ANR	4859243	Argument	max_rotations		4859183	1					
ANR	4859244	Identifier	max_rotations		4859183	0					
ANR	4859245	Argument	true		4859183	2					
ANR	4859246	Identifier	true		4859183	0					
ANR	4859247	ExpressionStatement	free ( path )	193:1:5120:5132	4859183	4	True				
ANR	4859248	CallExpression	free ( path )		4859183	0					
ANR	4859249	Callee	free		4859183	0					
ANR	4859250	Identifier	free		4859183	0					
ANR	4859251	ArgumentList	path		4859183	1					
ANR	4859252	Argument	path		4859183	0					
ANR	4859253	Identifier	path		4859183	0					
ANR	4859254	ReturnStatement	return status ;	194:1:5135:5148	4859183	5	True				
ANR	4859255	Identifier	status		4859183	0					
ANR	4859256	ReturnType	bool		4859183	1					
ANR	4859257	Identifier	ReadUserLog :: initialize		4859183	2					
ANR	4859258	ParameterList			4859183	3					
ANR	4859259	CFGEntryNode	ENTRY		4859183		True				
ANR	4859260	CFGExitNode	EXIT		4859183		True				
ANR	4859261	Symbol	path		4859183						
ANR	4859262	Symbol	NULL		4859183						
ANR	4859263	Symbol	param		4859183						
ANR	4859264	Symbol	false		4859183						
ANR	4859265	Symbol	true		4859183						
ANR	4859266	Symbol	param_integer		4859183						
ANR	4859267	Symbol	LOG_ERROR_FILE_NOT_FOUND		4859183						
ANR	4859268	Symbol	initialize		4859183						
ANR	4859269	Symbol	__LINE__		4859183						
ANR	4859270	Symbol	max_rotations		4859183						
ANR	4859271	Symbol	status		4859183						
ANR	4859272	Function	ReadUserLog :: initialize	198:0:5176:5417							
ANR	4859273	FunctionDef	"ReadUserLog :: initialize (const char * filename , bool handle_rotation , bool check_for_old , bool read_only)"		4859272	0					
ANR	4859274	CompoundStatement		203:0:5308:5417	4859272	0					
ANR	4859275	ReturnStatement	"return initialize ( filename , handle_rotation ? 1 : 0 , check_for_old , read_only ) ;"	204:1:5311:5415	4859272	0	True				
ANR	4859276	CallExpression	"initialize ( filename , handle_rotation ? 1 : 0 , check_for_old , read_only )"		4859272	0					
ANR	4859277	Callee	initialize		4859272	0					
ANR	4859278	Identifier	initialize		4859272	0					
ANR	4859279	ArgumentList	filename		4859272	1					
ANR	4859280	Argument	filename		4859272	0					
ANR	4859281	Identifier	filename		4859272	0					
ANR	4859282	Argument	handle_rotation ? 1 : 0		4859272	1					
ANR	4859283	ConditionalExpression	handle_rotation ? 1 : 0		4859272	0					
ANR	4859284	Condition	handle_rotation		4859272	0					
ANR	4859285	Identifier	handle_rotation		4859272	0					
ANR	4859286	PrimaryExpression	1		4859272	1					
ANR	4859287	PrimaryExpression	0		4859272	2					
ANR	4859288	Argument	check_for_old		4859272	2					
ANR	4859289	Identifier	check_for_old		4859272	0					
ANR	4859290	Argument	read_only		4859272	3					
ANR	4859291	Identifier	read_only		4859272	0					
ANR	4859292	ReturnType	bool		4859272	1					
ANR	4859293	Identifier	ReadUserLog :: initialize		4859272	2					
ANR	4859294	ParameterList	"const char * filename , bool handle_rotation , bool check_for_old , bool read_only"		4859272	3					
ANR	4859295	Parameter	const char * filename	199:25:5206:5225	4859272	0	True				
ANR	4859296	ParameterType	const char *		4859272	0					
ANR	4859297	Identifier	filename		4859272	1					
ANR	4859298	Parameter	bool handle_rotation	200:7:5235:5254	4859272	1	True				
ANR	4859299	ParameterType	bool		4859272	0					
ANR	4859300	Identifier	handle_rotation		4859272	1					
ANR	4859301	Parameter	bool check_for_old	201:7:5264:5281	4859272	2	True				
ANR	4859302	ParameterType	bool		4859272	0					
ANR	4859303	Identifier	check_for_old		4859272	1					
ANR	4859304	Parameter	bool read_only	202:7:5291:5304	4859272	3	True				
ANR	4859305	ParameterType	bool		4859272	0					
ANR	4859306	Identifier	read_only		4859272	1					
ANR	4859307	CFGEntryNode	ENTRY		4859272		True				
ANR	4859308	CFGExitNode	EXIT		4859272		True				
ANR	4859309	Symbol	check_for_old		4859272						
ANR	4859310	Symbol	filename		4859272						
ANR	4859311	Symbol	handle_rotation		4859272						
ANR	4859312	Symbol	read_only		4859272						
ANR	4859313	Symbol	initialize		4859272						
ANR	4859314	Function	ReadUserLog :: initialize	211:0:5489:6161							
ANR	4859315	FunctionDef	"ReadUserLog :: initialize (const char * filename , int max_rotations , bool check_for_old , bool read_only)"		4859314	0					
ANR	4859316	CompoundStatement		216:0:5618:6161	4859314	0					
ANR	4859317	IfStatement	if ( m_initialized )		4859314	0					
ANR	4859318	Condition	m_initialized	217:6:5626:5638	4859314	0	True				
ANR	4859319	Identifier	m_initialized		4859314	0					
ANR	4859320	CompoundStatement		2:22:23:23	4859314	1					
ANR	4859321	ExpressionStatement	"Error ( LOG_ERROR_RE_INITIALIZE , __LINE__ )"	218:2:5646:5688	4859314	0	True				
ANR	4859322	CallExpression	"Error ( LOG_ERROR_RE_INITIALIZE , __LINE__ )"		4859314	0					
ANR	4859323	Callee	Error		4859314	0					
ANR	4859324	Identifier	Error		4859314	0					
ANR	4859325	ArgumentList	LOG_ERROR_RE_INITIALIZE		4859314	1					
ANR	4859326	Argument	LOG_ERROR_RE_INITIALIZE		4859314	0					
ANR	4859327	Identifier	LOG_ERROR_RE_INITIALIZE		4859314	0					
ANR	4859328	Argument	__LINE__		4859314	1					
ANR	4859329	Identifier	__LINE__		4859314	0					
ANR	4859330	ReturnStatement	return false ;	219:2:5692:5704	4859314	1	True				
ANR	4859331	Identifier	false		4859314	0					
ANR	4859332	IdentifierDeclStatement	bool handle_rotation = ( max_rotations > 0 ) ;	222:1:5711:5755	4859314	1	True				
ANR	4859333	IdentifierDecl	handle_rotation = ( max_rotations > 0 )		4859314	0					
ANR	4859334	IdentifierDeclType	bool		4859314	0					
ANR	4859335	Identifier	handle_rotation		4859314	1					
ANR	4859336	AssignmentExpression	handle_rotation = ( max_rotations > 0 )		4859314	2		=			
ANR	4859337	Identifier	handle_rotation		4859314	0					
ANR	4859338	RelationalExpression	max_rotations > 0		4859314	1		>			
ANR	4859339	Identifier	max_rotations		4859314	0					
ANR	4859340	PrimaryExpression	0		4859314	1					
ANR	4859341	ExpressionStatement	"m_state = new ReadUserLogState ( filename , max_rotations , SCORE_RECENT_THRESH )"	223:1:5758:5845	4859314	2	True				
ANR	4859342	AssignmentExpression	"m_state = new ReadUserLogState ( filename , max_rotations , SCORE_RECENT_THRESH )"		4859314	0		=			
ANR	4859343	Identifier	m_state		4859314	0					
ANR	4859344	Expression	"filename , max_rotations , SCORE_RECENT_THRESH"		4859314	1					
ANR	4859345	Identifier	filename		4859314	0					
ANR	4859346	Expression	"max_rotations , SCORE_RECENT_THRESH"		4859314	1					
ANR	4859347	Identifier	max_rotations		4859314	0					
ANR	4859348	Identifier	SCORE_RECENT_THRESH		4859314	1					
ANR	4859349	IfStatement	if ( ! m_state -> Initialized ( ) )		4859314	3					
ANR	4859350	Condition	! m_state -> Initialized ( )	225:6:5853:5876	4859314	0	True				
ANR	4859351	UnaryOperationExpression	! m_state -> Initialized ( )		4859314	0					
ANR	4859352	UnaryOperator	!		4859314	0					
ANR	4859353	CallExpression	m_state -> Initialized ( )		4859314	1					
ANR	4859354	Callee	m_state -> Initialized		4859314	0					
ANR	4859355	PtrMemberAccess	m_state -> Initialized		4859314	0					
ANR	4859356	Identifier	m_state		4859314	0					
ANR	4859357	Identifier	Initialized		4859314	1					
ANR	4859358	ArgumentList			4859314	1					
ANR	4859359	CompoundStatement		10:33:261:261	4859314	1					
ANR	4859360	ExpressionStatement	"Error ( LOG_ERROR_NOT_INITIALIZED , __LINE__ )"	226:2:5884:5928	4859314	0	True				
ANR	4859361	CallExpression	"Error ( LOG_ERROR_NOT_INITIALIZED , __LINE__ )"		4859314	0					
ANR	4859362	Callee	Error		4859314	0					
ANR	4859363	Identifier	Error		4859314	0					
ANR	4859364	ArgumentList	LOG_ERROR_NOT_INITIALIZED		4859314	1					
ANR	4859365	Argument	LOG_ERROR_NOT_INITIALIZED		4859314	0					
ANR	4859366	Identifier	LOG_ERROR_NOT_INITIALIZED		4859314	0					
ANR	4859367	Argument	__LINE__		4859314	1					
ANR	4859368	Identifier	__LINE__		4859314	0					
ANR	4859369	ReturnStatement	return false ;	227:2:5932:5944	4859314	1	True				
ANR	4859370	Identifier	false		4859314	0					
ANR	4859371	ExpressionStatement	m_match = new ReadUserLogMatch ( m_state )	229:1:5950:5991	4859314	4	True				
ANR	4859372	AssignmentExpression	m_match = new ReadUserLogMatch ( m_state )		4859314	0		=			
ANR	4859373	Identifier	m_match		4859314	0					
ANR	4859374	Identifier	m_state		4859314	1					
ANR	4859375	IfStatement	"if ( ! InternalInitialize ( max_rotations , check_for_old , false , handle_rotation , read_only ) )"		4859314	5					
ANR	4859376	Condition	"! InternalInitialize ( max_rotations , check_for_old , false , handle_rotation , read_only )"	231:5:5999:6121	4859314	0	True				
ANR	4859377	UnaryOperationExpression	"! InternalInitialize ( max_rotations , check_for_old , false , handle_rotation , read_only )"		4859314	0					
ANR	4859378	UnaryOperator	!		4859314	0					
ANR	4859379	CallExpression	"InternalInitialize ( max_rotations , check_for_old , false , handle_rotation , read_only )"		4859314	1					
ANR	4859380	Callee	InternalInitialize		4859314	0					
ANR	4859381	Identifier	InternalInitialize		4859314	0					
ANR	4859382	ArgumentList	max_rotations		4859314	1					
ANR	4859383	Argument	max_rotations		4859314	0					
ANR	4859384	Identifier	max_rotations		4859314	0					
ANR	4859385	Argument	check_for_old		4859314	1					
ANR	4859386	Identifier	check_for_old		4859314	0					
ANR	4859387	Argument	false		4859314	2					
ANR	4859388	Identifier	false		4859314	0					
ANR	4859389	Argument	handle_rotation		4859314	3					
ANR	4859390	Identifier	handle_rotation		4859314	0					
ANR	4859391	Argument	read_only		4859314	4					
ANR	4859392	Identifier	read_only		4859314	0					
ANR	4859393	CompoundStatement		20:23:506:506	4859314	1					
ANR	4859394	ReturnStatement	return false ;	236:2:6129:6141	4859314	0	True				
ANR	4859395	Identifier	false		4859314	0					
ANR	4859396	ReturnStatement	return true ;	239:1:6148:6159	4859314	6	True				
ANR	4859397	Identifier	true		4859314	0					
ANR	4859398	ReturnType	bool		4859314	1					
ANR	4859399	Identifier	ReadUserLog :: initialize		4859314	2					
ANR	4859400	ParameterList	"const char * filename , int max_rotations , bool check_for_old , bool read_only"		4859314	3					
ANR	4859401	Parameter	const char * filename	212:25:5519:5538	4859314	0	True				
ANR	4859402	ParameterType	const char *		4859314	0					
ANR	4859403	Identifier	filename		4859314	1					
ANR	4859404	Parameter	int max_rotations	213:7:5548:5564	4859314	1	True				
ANR	4859405	ParameterType	int		4859314	0					
ANR	4859406	Identifier	max_rotations		4859314	1					
ANR	4859407	Parameter	bool check_for_old	214:7:5574:5591	4859314	2	True				
ANR	4859408	ParameterType	bool		4859314	0					
ANR	4859409	Identifier	check_for_old		4859314	1					
ANR	4859410	Parameter	bool read_only	215:7:5601:5614	4859314	3	True				
ANR	4859411	ParameterType	bool		4859314	0					
ANR	4859412	Identifier	read_only		4859314	1					
ANR	4859413	CFGEntryNode	ENTRY		4859314		True				
ANR	4859414	CFGExitNode	EXIT		4859314		True				
ANR	4859415	Symbol	check_for_old		4859314						
ANR	4859416	Symbol	m_initialized		4859314						
ANR	4859417	Symbol	m_match		4859314						
ANR	4859418	Symbol	handle_rotation		4859314						
ANR	4859419	Symbol	LOG_ERROR_RE_INITIALIZE		4859314						
ANR	4859420	Symbol	* m_state		4859314						
ANR	4859421	Symbol	false		4859314						
ANR	4859422	Symbol	LOG_ERROR_NOT_INITIALIZED		4859314						
ANR	4859423	Symbol	max_rotations		4859314						
ANR	4859424	Symbol	__LINE__		4859314						
ANR	4859425	Symbol	m_state		4859314						
ANR	4859426	Symbol	SCORE_RECENT_THRESH		4859314						
ANR	4859427	Symbol	filename		4859314						
ANR	4859428	Symbol	InternalInitialize		4859314						
ANR	4859429	Symbol	read_only		4859314						
ANR	4859430	Symbol	true		4859314						
ANR	4859431	Symbol	m_state -> Initialized		4859314						
ANR	4859432	Function	ReadUserLog :: initialize	247:0:6352:6503							
ANR	4859433	FunctionDef	"ReadUserLog :: initialize (const ReadUserLog :: FileState & state , bool read_only)"		4859432	0					
ANR	4859434	CompoundStatement		250:0:6443:6503	4859432	0					
ANR	4859435	ReturnStatement	"return InternalInitialize ( state , false , 0 , read_only ) ;"	251:1:6446:6501	4859432	0	True				
ANR	4859436	CallExpression	"InternalInitialize ( state , false , 0 , read_only )"		4859432	0					
ANR	4859437	Callee	InternalInitialize		4859432	0					
ANR	4859438	Identifier	InternalInitialize		4859432	0					
ANR	4859439	ArgumentList	state		4859432	1					
ANR	4859440	Argument	state		4859432	0					
ANR	4859441	Identifier	state		4859432	0					
ANR	4859442	Argument	false		4859432	1					
ANR	4859443	Identifier	false		4859432	0					
ANR	4859444	Argument	0		4859432	2					
ANR	4859445	PrimaryExpression	0		4859432	0					
ANR	4859446	Argument	read_only		4859432	3					
ANR	4859447	Identifier	read_only		4859432	0					
ANR	4859448	ReturnType	bool		4859432	1					
ANR	4859449	Identifier	ReadUserLog :: initialize		4859432	2					
ANR	4859450	ParameterList	"const ReadUserLog :: FileState & state , bool read_only"		4859432	3					
ANR	4859451	Parameter	const ReadUserLog :: FileState & state	248:25:6382:6416	4859432	0	True				
ANR	4859452	ParameterType	const ReadUserLog :: FileState &		4859432	0					
ANR	4859453	Identifier	state		4859432	1					
ANR	4859454	Parameter	bool read_only	249:7:6426:6439	4859432	1	True				
ANR	4859455	ParameterType	bool		4859432	0					
ANR	4859456	Identifier	read_only		4859432	1					
ANR	4859457	CFGEntryNode	ENTRY		4859432		True				
ANR	4859458	CFGExitNode	EXIT		4859432		True				
ANR	4859459	Symbol	InternalInitialize		4859432						
ANR	4859460	Symbol	read_only		4859432						
ANR	4859461	Symbol	false		4859432						
ANR	4859462	Symbol	state		4859432						
ANR	4859463	Function	ReadUserLog :: initialize	255:0:6561:6749							
ANR	4859464	FunctionDef	"ReadUserLog :: initialize (const ReadUserLog :: FileState & state , int max_rotations , bool read_only)"		4859463	0					
ANR	4859465	CompoundStatement		259:0:6678:6749	4859463	0					
ANR	4859466	ReturnStatement	"return InternalInitialize ( state , true , max_rotations , read_only ) ;"	260:1:6681:6747	4859463	0	True				
ANR	4859467	CallExpression	"InternalInitialize ( state , true , max_rotations , read_only )"		4859463	0					
ANR	4859468	Callee	InternalInitialize		4859463	0					
ANR	4859469	Identifier	InternalInitialize		4859463	0					
ANR	4859470	ArgumentList	state		4859463	1					
ANR	4859471	Argument	state		4859463	0					
ANR	4859472	Identifier	state		4859463	0					
ANR	4859473	Argument	true		4859463	1					
ANR	4859474	Identifier	true		4859463	0					
ANR	4859475	Argument	max_rotations		4859463	2					
ANR	4859476	Identifier	max_rotations		4859463	0					
ANR	4859477	Argument	read_only		4859463	3					
ANR	4859478	Identifier	read_only		4859463	0					
ANR	4859479	ReturnType	bool		4859463	1					
ANR	4859480	Identifier	ReadUserLog :: initialize		4859463	2					
ANR	4859481	ParameterList	"const ReadUserLog :: FileState & state , int max_rotations , bool read_only"		4859463	3					
ANR	4859482	Parameter	const ReadUserLog :: FileState & state	256:25:6591:6625	4859463	0	True				
ANR	4859483	ParameterType	const ReadUserLog :: FileState &		4859463	0					
ANR	4859484	Identifier	state		4859463	1					
ANR	4859485	Parameter	int max_rotations	257:7:6635:6651	4859463	1	True				
ANR	4859486	ParameterType	int		4859463	0					
ANR	4859487	Identifier	max_rotations		4859463	1					
ANR	4859488	Parameter	bool read_only	258:7:6661:6674	4859463	2	True				
ANR	4859489	ParameterType	bool		4859463	0					
ANR	4859490	Identifier	read_only		4859463	1					
ANR	4859491	CFGEntryNode	ENTRY		4859463		True				
ANR	4859492	CFGExitNode	EXIT		4859463		True				
ANR	4859493	Symbol	InternalInitialize		4859463						
ANR	4859494	Symbol	read_only		4859463						
ANR	4859495	Symbol	true		4859463						
ANR	4859496	Symbol	state		4859463						
ANR	4859497	Symbol	max_rotations		4859463						
ANR	4859498	Function	ReadUserLog :: getMaxRot	264:0:6785:6873							
ANR	4859499	FunctionDef	ReadUserLog :: getMaxRot (bool handle_rotation)		4859498	0					
ANR	4859500	CompoundStatement		266:0:6836:6873	4859498	0					
ANR	4859501	ReturnStatement	return ( handle_rotation ? 1 : 0 ) ;	267:1:6839:6871	4859498	0	True				
ANR	4859502	ConditionalExpression	handle_rotation ? 1 : 0		4859498	0					
ANR	4859503	Condition	handle_rotation		4859498	0					
ANR	4859504	Identifier	handle_rotation		4859498	0					
ANR	4859505	PrimaryExpression	1		4859498	1					
ANR	4859506	PrimaryExpression	0		4859498	2					
ANR	4859507	ReturnType	int		4859498	1					
ANR	4859508	Identifier	ReadUserLog :: getMaxRot		4859498	2					
ANR	4859509	ParameterList	bool handle_rotation		4859498	3					
ANR	4859510	Parameter	bool handle_rotation	265:24:6813:6832	4859498	0	True				
ANR	4859511	ParameterType	bool		4859498	0					
ANR	4859512	Identifier	handle_rotation		4859498	1					
ANR	4859513	CFGEntryNode	ENTRY		4859498		True				
ANR	4859514	CFGExitNode	EXIT		4859498		True				
ANR	4859515	Symbol	handle_rotation		4859498						
ANR	4859516	Function	ReadUserLog :: initRotParms	270:0:6876:7007							
ANR	4859517	FunctionDef	ReadUserLog :: initRotParms (int max_rotation)		4859516	0					
ANR	4859518	CompoundStatement		272:0:6927:7007	4859516	0					
ANR	4859519	ExpressionStatement	m_handle_rot = max_rotation ? true : false	273:1:6930:6972	4859516	0	True				
ANR	4859520	AssignmentExpression	m_handle_rot = max_rotation ? true : false		4859516	0		=			
ANR	4859521	Identifier	m_handle_rot		4859516	0					
ANR	4859522	ConditionalExpression	max_rotation ? true : false		4859516	1					
ANR	4859523	Condition	max_rotation		4859516	0					
ANR	4859524	Identifier	max_rotation		4859516	0					
ANR	4859525	Identifier	true		4859516	1					
ANR	4859526	Identifier	false		4859516	2					
ANR	4859527	ExpressionStatement	m_max_rotations = max_rotation	274:1:6975:7005	4859516	1	True				
ANR	4859528	AssignmentExpression	m_max_rotations = max_rotation		4859516	0		=			
ANR	4859529	Identifier	m_max_rotations		4859516	0					
ANR	4859530	Identifier	max_rotation		4859516	1					
ANR	4859531	ReturnType	void		4859516	1					
ANR	4859532	Identifier	ReadUserLog :: initRotParms		4859516	2					
ANR	4859533	ParameterList	int max_rotation		4859516	3					
ANR	4859534	Parameter	int max_rotation	271:27:6908:6923	4859516	0	True				
ANR	4859535	ParameterType	int		4859516	0					
ANR	4859536	Identifier	max_rotation		4859516	1					
ANR	4859537	CFGEntryNode	ENTRY		4859516		True				
ANR	4859538	CFGExitNode	EXIT		4859516		True				
ANR	4859539	Symbol	false		4859516						
ANR	4859540	Symbol	true		4859516						
ANR	4859541	Symbol	m_max_rotations		4859516						
ANR	4859542	Symbol	max_rotation		4859516						
ANR	4859543	Symbol	m_handle_rot		4859516						
ANR	4859544	Function	ReadUserLog :: InternalInitialize	284:0:7281:8022							
ANR	4859545	FunctionDef	"ReadUserLog :: InternalInitialize (const ReadUserLog :: FileState & state , bool set_rotations , int max_rotations , bool read_only)"		4859544	0					
ANR	4859546	CompoundStatement		289:0:7439:8022	4859544	0					
ANR	4859547	IfStatement	if ( m_initialized )		4859544	0					
ANR	4859548	Condition	m_initialized	290:6:7447:7459	4859544	0	True				
ANR	4859549	Identifier	m_initialized		4859544	0					
ANR	4859550	CompoundStatement		2:22:23:23	4859544	1					
ANR	4859551	ExpressionStatement	"Error ( LOG_ERROR_RE_INITIALIZE , __LINE__ )"	291:2:7467:7509	4859544	0	True				
ANR	4859552	CallExpression	"Error ( LOG_ERROR_RE_INITIALIZE , __LINE__ )"		4859544	0					
ANR	4859553	Callee	Error		4859544	0					
ANR	4859554	Identifier	Error		4859544	0					
ANR	4859555	ArgumentList	LOG_ERROR_RE_INITIALIZE		4859544	1					
ANR	4859556	Argument	LOG_ERROR_RE_INITIALIZE		4859544	0					
ANR	4859557	Identifier	LOG_ERROR_RE_INITIALIZE		4859544	0					
ANR	4859558	Argument	__LINE__		4859544	1					
ANR	4859559	Identifier	__LINE__		4859544	0					
ANR	4859560	ReturnStatement	return false ;	292:2:7513:7525	4859544	1	True				
ANR	4859561	Identifier	false		4859544	0					
ANR	4859562	ExpressionStatement	"m_state = new ReadUserLogState ( state , SCORE_RECENT_THRESH )"	295:1:7532:7592	4859544	1	True				
ANR	4859563	AssignmentExpression	"m_state = new ReadUserLogState ( state , SCORE_RECENT_THRESH )"		4859544	0		=			
ANR	4859564	Identifier	m_state		4859544	0					
ANR	4859565	Expression	"state , SCORE_RECENT_THRESH"		4859544	1					
ANR	4859566	Identifier	state		4859544	0					
ANR	4859567	Identifier	SCORE_RECENT_THRESH		4859544	1					
ANR	4859568	IfStatement	if ( ( m_state -> InitializeError ( ) ) || ( ! m_state -> Initialized ( ) ) )		4859544	2					
ANR	4859569	Condition	( m_state -> InitializeError ( ) ) || ( ! m_state -> Initialized ( ) )	296:7:7601:7661	4859544	0	True				
ANR	4859570	OrExpression	( m_state -> InitializeError ( ) ) || ( ! m_state -> Initialized ( ) )		4859544	0		||			
ANR	4859571	CallExpression	m_state -> InitializeError ( )		4859544	0					
ANR	4859572	Callee	m_state -> InitializeError		4859544	0					
ANR	4859573	PtrMemberAccess	m_state -> InitializeError		4859544	0					
ANR	4859574	Identifier	m_state		4859544	0					
ANR	4859575	Identifier	InitializeError		4859544	1					
ANR	4859576	ArgumentList			4859544	1					
ANR	4859577	UnaryOperationExpression	! m_state -> Initialized ( )		4859544	1					
ANR	4859578	UnaryOperator	!		4859544	0					
ANR	4859579	CallExpression	m_state -> Initialized ( )		4859544	1					
ANR	4859580	Callee	m_state -> Initialized		4859544	0					
ANR	4859581	PtrMemberAccess	m_state -> Initialized		4859544	0					
ANR	4859582	Identifier	m_state		4859544	0					
ANR	4859583	Identifier	Initialized		4859544	1					
ANR	4859584	ArgumentList			4859544	1					
ANR	4859585	CompoundStatement		8:72:226:226	4859544	1					
ANR	4859586	ExpressionStatement	"Error ( LOG_ERROR_STATE_ERROR , __LINE__ )"	297:2:7670:7710	4859544	0	True				
ANR	4859587	CallExpression	"Error ( LOG_ERROR_STATE_ERROR , __LINE__ )"		4859544	0					
ANR	4859588	Callee	Error		4859544	0					
ANR	4859589	Identifier	Error		4859544	0					
ANR	4859590	ArgumentList	LOG_ERROR_STATE_ERROR		4859544	1					
ANR	4859591	Argument	LOG_ERROR_STATE_ERROR		4859544	0					
ANR	4859592	Identifier	LOG_ERROR_STATE_ERROR		4859544	0					
ANR	4859593	Argument	__LINE__		4859544	1					
ANR	4859594	Identifier	__LINE__		4859544	0					
ANR	4859595	ReturnStatement	return false ;	298:2:7714:7726	4859544	1	True				
ANR	4859596	Identifier	false		4859544	0					
ANR	4859597	IfStatement	if ( set_rotations )		4859544	3					
ANR	4859598	Condition	set_rotations	302:6:7784:7796	4859544	0	True				
ANR	4859599	Identifier	set_rotations		4859544	0					
ANR	4859600	CompoundStatement		14:22:360:360	4859544	1					
ANR	4859601	ExpressionStatement	m_state -> MaxRotations ( max_rotations )	303:2:7804:7842	4859544	0	True				
ANR	4859602	CallExpression	m_state -> MaxRotations ( max_rotations )		4859544	0					
ANR	4859603	Callee	m_state -> MaxRotations		4859544	0					
ANR	4859604	PtrMemberAccess	m_state -> MaxRotations		4859544	0					
ANR	4859605	Identifier	m_state		4859544	0					
ANR	4859606	Identifier	MaxRotations		4859544	1					
ANR	4859607	ArgumentList	max_rotations		4859544	1					
ANR	4859608	Argument	max_rotations		4859544	0					
ANR	4859609	Identifier	max_rotations		4859544	0					
ANR	4859610	ElseStatement	else		4859544	0					
ANR	4859611	CompoundStatement		17:6:413:413	4859544	0					
ANR	4859612	ExpressionStatement	max_rotations = m_state -> MaxRotations ( )	306:2:7857:7897	4859544	0	True				
ANR	4859613	AssignmentExpression	max_rotations = m_state -> MaxRotations ( )		4859544	0		=			
ANR	4859614	Identifier	max_rotations		4859544	0					
ANR	4859615	CallExpression	m_state -> MaxRotations ( )		4859544	1					
ANR	4859616	Callee	m_state -> MaxRotations		4859544	0					
ANR	4859617	PtrMemberAccess	m_state -> MaxRotations		4859544	0					
ANR	4859618	Identifier	m_state		4859544	0					
ANR	4859619	Identifier	MaxRotations		4859544	1					
ANR	4859620	ArgumentList			4859544	1					
ANR	4859621	ExpressionStatement	m_match = new ReadUserLogMatch ( m_state )	309:1:7904:7945	4859544	4	True				
ANR	4859622	AssignmentExpression	m_match = new ReadUserLogMatch ( m_state )		4859544	0		=			
ANR	4859623	Identifier	m_match		4859544	0					
ANR	4859624	Identifier	m_state		4859544	1					
ANR	4859625	ReturnStatement	"return InternalInitialize ( max_rotations , false , true , true , read_only ) ;"	310:1:7948:8020	4859544	5	True				
ANR	4859626	CallExpression	"InternalInitialize ( max_rotations , false , true , true , read_only )"		4859544	0					
ANR	4859627	Callee	InternalInitialize		4859544	0					
ANR	4859628	Identifier	InternalInitialize		4859544	0					
ANR	4859629	ArgumentList	max_rotations		4859544	1					
ANR	4859630	Argument	max_rotations		4859544	0					
ANR	4859631	Identifier	max_rotations		4859544	0					
ANR	4859632	Argument	false		4859544	1					
ANR	4859633	Identifier	false		4859544	0					
ANR	4859634	Argument	true		4859544	2					
ANR	4859635	Identifier	true		4859544	0					
ANR	4859636	Argument	true		4859544	3					
ANR	4859637	Identifier	true		4859544	0					
ANR	4859638	Argument	read_only		4859544	4					
ANR	4859639	Identifier	read_only		4859544	0					
ANR	4859640	ReturnType	bool		4859544	1					
ANR	4859641	Identifier	ReadUserLog :: InternalInitialize		4859544	2					
ANR	4859642	ParameterList	"const ReadUserLog :: FileState & state , bool set_rotations , int max_rotations , bool read_only"		4859544	3					
ANR	4859643	Parameter	const ReadUserLog :: FileState & state	285:33:7319:7353	4859544	0	True				
ANR	4859644	ParameterType	const ReadUserLog :: FileState &		4859544	0					
ANR	4859645	Identifier	state		4859544	1					
ANR	4859646	Parameter	bool set_rotations	286:9:7365:7382	4859544	1	True				
ANR	4859647	ParameterType	bool		4859544	0					
ANR	4859648	Identifier	set_rotations		4859544	1					
ANR	4859649	Parameter	int max_rotations	287:9:7394:7410	4859544	2	True				
ANR	4859650	ParameterType	int		4859544	0					
ANR	4859651	Identifier	max_rotations		4859544	1					
ANR	4859652	Parameter	bool read_only	288:9:7422:7435	4859544	3	True				
ANR	4859653	ParameterType	bool		4859544	0					
ANR	4859654	Identifier	read_only		4859544	1					
ANR	4859655	CFGEntryNode	ENTRY		4859544		True				
ANR	4859656	CFGExitNode	EXIT		4859544		True				
ANR	4859657	Symbol	m_initialized		4859544						
ANR	4859658	Symbol	m_match		4859544						
ANR	4859659	Symbol	m_state -> MaxRotations		4859544						
ANR	4859660	Symbol	set_rotations		4859544						
ANR	4859661	Symbol	LOG_ERROR_RE_INITIALIZE		4859544						
ANR	4859662	Symbol	* m_state		4859544						
ANR	4859663	Symbol	false		4859544						
ANR	4859664	Symbol	max_rotations		4859544						
ANR	4859665	Symbol	__LINE__		4859544						
ANR	4859666	Symbol	SCORE_RECENT_THRESH		4859544						
ANR	4859667	Symbol	m_state		4859544						
ANR	4859668	Symbol	LOG_ERROR_STATE_ERROR		4859544						
ANR	4859669	Symbol	InternalInitialize		4859544						
ANR	4859670	Symbol	read_only		4859544						
ANR	4859671	Symbol	true		4859544						
ANR	4859672	Symbol	m_state -> InitializeError		4859544						
ANR	4859673	Symbol	state		4859544						
ANR	4859674	Symbol	m_state -> Initialized		4859544						
ANR	4859675	Function	ReadUserLog :: InternalInitialize	314:0:8057:10816							
ANR	4859676	FunctionDef	"ReadUserLog :: InternalInitialize (int max_rotations , bool check_for_rotation , bool restore , bool enable_header_read , bool read_only)"		4859675	0					
ANR	4859677	CompoundStatement		320:0:8236:10816	4859675	0					
ANR	4859678	IfStatement	if ( m_initialized )		4859675	0					
ANR	4859679	Condition	m_initialized	321:6:8244:8256	4859675	0	True				
ANR	4859680	Identifier	m_initialized		4859675	0					
ANR	4859681	CompoundStatement		2:22:23:23	4859675	1					
ANR	4859682	ExpressionStatement	"Error ( LOG_ERROR_RE_INITIALIZE , __LINE__ )"	322:2:8264:8306	4859675	0	True				
ANR	4859683	CallExpression	"Error ( LOG_ERROR_RE_INITIALIZE , __LINE__ )"		4859675	0					
ANR	4859684	Callee	Error		4859675	0					
ANR	4859685	Identifier	Error		4859675	0					
ANR	4859686	ArgumentList	LOG_ERROR_RE_INITIALIZE		4859675	1					
ANR	4859687	Argument	LOG_ERROR_RE_INITIALIZE		4859675	0					
ANR	4859688	Identifier	LOG_ERROR_RE_INITIALIZE		4859675	0					
ANR	4859689	Argument	__LINE__		4859675	1					
ANR	4859690	Identifier	__LINE__		4859675	0					
ANR	4859691	ReturnStatement	return false ;	323:2:8310:8322	4859675	1	True				
ANR	4859692	Identifier	false		4859675	0					
ANR	4859693	ExpressionStatement	m_handle_rot = ( max_rotations > 0 )	326:1:8329:8365	4859675	1	True				
ANR	4859694	AssignmentExpression	m_handle_rot = ( max_rotations > 0 )		4859675	0		=			
ANR	4859695	Identifier	m_handle_rot		4859675	0					
ANR	4859696	RelationalExpression	max_rotations > 0		4859675	1		>			
ANR	4859697	Identifier	max_rotations		4859675	0					
ANR	4859698	PrimaryExpression	0		4859675	1					
ANR	4859699	ExpressionStatement	m_max_rotations = max_rotations	327:1:8368:8399	4859675	2	True				
ANR	4859700	AssignmentExpression	m_max_rotations = max_rotations		4859675	0		=			
ANR	4859701	Identifier	m_max_rotations		4859675	0					
ANR	4859702	Identifier	max_rotations		4859675	1					
ANR	4859703	ExpressionStatement	m_read_header = enable_header_read	328:1:8402:8436	4859675	3	True				
ANR	4859704	AssignmentExpression	m_read_header = enable_header_read		4859675	0		=			
ANR	4859705	Identifier	m_read_header		4859675	0					
ANR	4859706	Identifier	enable_header_read		4859675	1					
ANR	4859707	ExpressionStatement	m_lock = NULL	329:1:8439:8452	4859675	4	True				
ANR	4859708	AssignmentExpression	m_lock = NULL		4859675	0		=			
ANR	4859709	Identifier	m_lock		4859675	0					
ANR	4859710	Identifier	NULL		4859675	1					
ANR	4859711	ExpressionStatement	m_read_only = read_only	330:1:8455:8478	4859675	5	True				
ANR	4859712	AssignmentExpression	m_read_only = read_only		4859675	0		=			
ANR	4859713	Identifier	m_read_only		4859675	0					
ANR	4859714	Identifier	read_only		4859675	1					
ANR	4859715	ExpressionStatement	"m_state -> SetScoreFactor ( ReadUserLogState :: SCORE_CTIME , SCORE_FACTOR_CTIME )"	333:1:8533:8617	4859675	6	True				
ANR	4859716	CallExpression	"m_state -> SetScoreFactor ( ReadUserLogState :: SCORE_CTIME , SCORE_FACTOR_CTIME )"		4859675	0					
ANR	4859717	Callee	m_state -> SetScoreFactor		4859675	0					
ANR	4859718	PtrMemberAccess	m_state -> SetScoreFactor		4859675	0					
ANR	4859719	Identifier	m_state		4859675	0					
ANR	4859720	Identifier	SetScoreFactor		4859675	1					
ANR	4859721	ArgumentList	ReadUserLogState :: SCORE_CTIME		4859675	1					
ANR	4859722	Argument	ReadUserLogState :: SCORE_CTIME		4859675	0					
ANR	4859723	Identifier	ReadUserLogState :: SCORE_CTIME		4859675	0					
ANR	4859724	Argument	SCORE_FACTOR_CTIME		4859675	1					
ANR	4859725	Identifier	SCORE_FACTOR_CTIME		4859675	0					
ANR	4859726	ExpressionStatement	"m_state -> SetScoreFactor ( ReadUserLogState :: SCORE_INODE , SCORE_FACTOR_INODE )"	335:1:8620:8704	4859675	7	True				
ANR	4859727	CallExpression	"m_state -> SetScoreFactor ( ReadUserLogState :: SCORE_INODE , SCORE_FACTOR_INODE )"		4859675	0					
ANR	4859728	Callee	m_state -> SetScoreFactor		4859675	0					
ANR	4859729	PtrMemberAccess	m_state -> SetScoreFactor		4859675	0					
ANR	4859730	Identifier	m_state		4859675	0					
ANR	4859731	Identifier	SetScoreFactor		4859675	1					
ANR	4859732	ArgumentList	ReadUserLogState :: SCORE_INODE		4859675	1					
ANR	4859733	Argument	ReadUserLogState :: SCORE_INODE		4859675	0					
ANR	4859734	Identifier	ReadUserLogState :: SCORE_INODE		4859675	0					
ANR	4859735	Argument	SCORE_FACTOR_INODE		4859675	1					
ANR	4859736	Identifier	SCORE_FACTOR_INODE		4859675	0					
ANR	4859737	ExpressionStatement	"m_state -> SetScoreFactor ( ReadUserLogState :: SCORE_SAME_SIZE , SCORE_FACTOR_SAME_SIZE )"	337:1:8707:8799	4859675	8	True				
ANR	4859738	CallExpression	"m_state -> SetScoreFactor ( ReadUserLogState :: SCORE_SAME_SIZE , SCORE_FACTOR_SAME_SIZE )"		4859675	0					
ANR	4859739	Callee	m_state -> SetScoreFactor		4859675	0					
ANR	4859740	PtrMemberAccess	m_state -> SetScoreFactor		4859675	0					
ANR	4859741	Identifier	m_state		4859675	0					
ANR	4859742	Identifier	SetScoreFactor		4859675	1					
ANR	4859743	ArgumentList	ReadUserLogState :: SCORE_SAME_SIZE		4859675	1					
ANR	4859744	Argument	ReadUserLogState :: SCORE_SAME_SIZE		4859675	0					
ANR	4859745	Identifier	ReadUserLogState :: SCORE_SAME_SIZE		4859675	0					
ANR	4859746	Argument	SCORE_FACTOR_SAME_SIZE		4859675	1					
ANR	4859747	Identifier	SCORE_FACTOR_SAME_SIZE		4859675	0					
ANR	4859748	ExpressionStatement	"m_state -> SetScoreFactor ( ReadUserLogState :: SCORE_GROWN , SCORE_FACTOR_GROWN )"	339:1:8802:8886	4859675	9	True				
ANR	4859749	CallExpression	"m_state -> SetScoreFactor ( ReadUserLogState :: SCORE_GROWN , SCORE_FACTOR_GROWN )"		4859675	0					
ANR	4859750	Callee	m_state -> SetScoreFactor		4859675	0					
ANR	4859751	PtrMemberAccess	m_state -> SetScoreFactor		4859675	0					
ANR	4859752	Identifier	m_state		4859675	0					
ANR	4859753	Identifier	SetScoreFactor		4859675	1					
ANR	4859754	ArgumentList	ReadUserLogState :: SCORE_GROWN		4859675	1					
ANR	4859755	Argument	ReadUserLogState :: SCORE_GROWN		4859675	0					
ANR	4859756	Identifier	ReadUserLogState :: SCORE_GROWN		4859675	0					
ANR	4859757	Argument	SCORE_FACTOR_GROWN		4859675	1					
ANR	4859758	Identifier	SCORE_FACTOR_GROWN		4859675	0					
ANR	4859759	ExpressionStatement	"m_state -> SetScoreFactor ( ReadUserLogState :: SCORE_SHRUNK , SCORE_FACTOR_SHRUNK )"	341:1:8889:8975	4859675	10	True				
ANR	4859760	CallExpression	"m_state -> SetScoreFactor ( ReadUserLogState :: SCORE_SHRUNK , SCORE_FACTOR_SHRUNK )"		4859675	0					
ANR	4859761	Callee	m_state -> SetScoreFactor		4859675	0					
ANR	4859762	PtrMemberAccess	m_state -> SetScoreFactor		4859675	0					
ANR	4859763	Identifier	m_state		4859675	0					
ANR	4859764	Identifier	SetScoreFactor		4859675	1					
ANR	4859765	ArgumentList	ReadUserLogState :: SCORE_SHRUNK		4859675	1					
ANR	4859766	Argument	ReadUserLogState :: SCORE_SHRUNK		4859675	0					
ANR	4859767	Identifier	ReadUserLogState :: SCORE_SHRUNK		4859675	0					
ANR	4859768	Argument	SCORE_FACTOR_SHRUNK		4859675	1					
ANR	4859769	Identifier	SCORE_FACTOR_SHRUNK		4859675	0					
ANR	4859770	IfStatement	if ( restore )		4859675	11					
ANR	4859771	Condition	restore	344:6:8984:8990	4859675	0	True				
ANR	4859772	Identifier	restore		4859675	0					
ANR	4859773	CompoundStatement		25:16:757:757	4859675	1					
ANR	4859774	ElseStatement	else		4859675	0					
ANR	4859775	IfStatement	if ( m_handle_rot && check_for_rotation )		4859675	0					
ANR	4859776	Condition	m_handle_rot && check_for_rotation	347:11:9026:9059	4859675	0	True				
ANR	4859777	AndExpression	m_handle_rot && check_for_rotation		4859675	0		&&			
ANR	4859778	Identifier	m_handle_rot		4859675	0					
ANR	4859779	Identifier	check_for_rotation		4859675	1					
ANR	4859780	CompoundStatement		28:48:826:826	4859675	1					
ANR	4859781	IfStatement	"if ( ! FindPrevFile ( m_max_rotations , 0 , true ) )"		4859675	0					
ANR	4859782	Condition	"! FindPrevFile ( m_max_rotations , 0 , true )"	348:6:9071:9112	4859675	0	True				
ANR	4859783	UnaryOperationExpression	"! FindPrevFile ( m_max_rotations , 0 , true )"		4859675	0					
ANR	4859784	UnaryOperator	!		4859675	0					
ANR	4859785	CallExpression	"FindPrevFile ( m_max_rotations , 0 , true )"		4859675	1					
ANR	4859786	Callee	FindPrevFile		4859675	0					
ANR	4859787	Identifier	FindPrevFile		4859675	0					
ANR	4859788	ArgumentList	m_max_rotations		4859675	1					
ANR	4859789	Argument	m_max_rotations		4859675	0					
ANR	4859790	Identifier	m_max_rotations		4859675	0					
ANR	4859791	Argument	0		4859675	1					
ANR	4859792	PrimaryExpression	0		4859675	0					
ANR	4859793	Argument	true		4859675	2					
ANR	4859794	Identifier	true		4859675	0					
ANR	4859795	CompoundStatement		29:51:879:879	4859675	1					
ANR	4859796	ExpressionStatement	releaseResources ( )	349:3:9121:9139	4859675	0	True				
ANR	4859797	CallExpression	releaseResources ( )		4859675	0					
ANR	4859798	Callee	releaseResources		4859675	0					
ANR	4859799	Identifier	releaseResources		4859675	0					
ANR	4859800	ArgumentList			4859675	1					
ANR	4859801	ExpressionStatement	"Error ( LOG_ERROR_FILE_NOT_FOUND , __LINE__ )"	350:3:9144:9187	4859675	1	True				
ANR	4859802	CallExpression	"Error ( LOG_ERROR_FILE_NOT_FOUND , __LINE__ )"		4859675	0					
ANR	4859803	Callee	Error		4859675	0					
ANR	4859804	Identifier	Error		4859675	0					
ANR	4859805	ArgumentList	LOG_ERROR_FILE_NOT_FOUND		4859675	1					
ANR	4859806	Argument	LOG_ERROR_FILE_NOT_FOUND		4859675	0					
ANR	4859807	Identifier	LOG_ERROR_FILE_NOT_FOUND		4859675	0					
ANR	4859808	Argument	__LINE__		4859675	1					
ANR	4859809	Identifier	__LINE__		4859675	0					
ANR	4859810	ReturnStatement	return false ;	351:3:9192:9204	4859675	2	True				
ANR	4859811	Identifier	false		4859675	0					
ANR	4859812	ElseStatement	else		4859675	0					
ANR	4859813	CompoundStatement		35:6:982:982	4859675	0					
ANR	4859814	ExpressionStatement	m_max_rotations = 0	355:2:9223:9242	4859675	0	True				
ANR	4859815	AssignmentExpression	m_max_rotations = 0		4859675	0		=			
ANR	4859816	Identifier	m_max_rotations		4859675	0					
ANR	4859817	PrimaryExpression	0		4859675	1					
ANR	4859818	IfStatement	"if ( m_state -> Rotation ( 0 , true ) )"		4859675	1					
ANR	4859819	Condition	"m_state -> Rotation ( 0 , true )"	356:7:9251:9278	4859675	0	True				
ANR	4859820	CallExpression	"m_state -> Rotation ( 0 , true )"		4859675	0					
ANR	4859821	Callee	m_state -> Rotation		4859675	0					
ANR	4859822	PtrMemberAccess	m_state -> Rotation		4859675	0					
ANR	4859823	Identifier	m_state		4859675	0					
ANR	4859824	Identifier	Rotation		4859675	1					
ANR	4859825	ArgumentList	0		4859675	1					
ANR	4859826	Argument	0		4859675	0					
ANR	4859827	PrimaryExpression	0		4859675	0					
ANR	4859828	Argument	true		4859675	1					
ANR	4859829	Identifier	true		4859675	0					
ANR	4859830	CompoundStatement		37:38:1045:1045	4859675	1					
ANR	4859831	ExpressionStatement	releaseResources ( )	357:3:9287:9305	4859675	0	True				
ANR	4859832	CallExpression	releaseResources ( )		4859675	0					
ANR	4859833	Callee	releaseResources		4859675	0					
ANR	4859834	Identifier	releaseResources		4859675	0					
ANR	4859835	ArgumentList			4859675	1					
ANR	4859836	ExpressionStatement	"Error ( LOG_ERROR_FILE_NOT_FOUND , __LINE__ )"	358:3:9310:9353	4859675	1	True				
ANR	4859837	CallExpression	"Error ( LOG_ERROR_FILE_NOT_FOUND , __LINE__ )"		4859675	0					
ANR	4859838	Callee	Error		4859675	0					
ANR	4859839	Identifier	Error		4859675	0					
ANR	4859840	ArgumentList	LOG_ERROR_FILE_NOT_FOUND		4859675	1					
ANR	4859841	Argument	LOG_ERROR_FILE_NOT_FOUND		4859675	0					
ANR	4859842	Identifier	LOG_ERROR_FILE_NOT_FOUND		4859675	0					
ANR	4859843	Argument	__LINE__		4859675	1					
ANR	4859844	Identifier	__LINE__		4859675	0					
ANR	4859845	ReturnStatement	return false ;	359:3:9358:9370	4859675	2	True				
ANR	4859846	Identifier	false		4859675	0					
ANR	4859847	IfStatement	if ( read_only )		4859675	12					
ANR	4859848	Condition	read_only	364:6:9412:9420	4859675	0	True				
ANR	4859849	Identifier	read_only		4859675	0					
ANR	4859850	CompoundStatement		45:18:1187:1187	4859675	1					
ANR	4859851	ExpressionStatement	m_lock_enable = false	365:2:9428:9449	4859675	0	True				
ANR	4859852	AssignmentExpression	m_lock_enable = false		4859675	0		=			
ANR	4859853	Identifier	m_lock_enable		4859675	0					
ANR	4859854	Identifier	false		4859675	1					
ANR	4859855	ElseStatement	else		4859675	0					
ANR	4859856	CompoundStatement		47:8:1222:1222	4859675	0					
ANR	4859857	ExpressionStatement	"m_lock_enable = param_boolean ( ""ENABLE_USERLOG_LOCKING"" , true )"	367:2:9463:9526	4859675	0	True				
ANR	4859858	AssignmentExpression	"m_lock_enable = param_boolean ( ""ENABLE_USERLOG_LOCKING"" , true )"		4859675	0		=			
ANR	4859859	Identifier	m_lock_enable		4859675	0					
ANR	4859860	CallExpression	"param_boolean ( ""ENABLE_USERLOG_LOCKING"" , true )"		4859675	1					
ANR	4859861	Callee	param_boolean		4859675	0					
ANR	4859862	Identifier	param_boolean		4859675	0					
ANR	4859863	ArgumentList	"""ENABLE_USERLOG_LOCKING"""		4859675	1					
ANR	4859864	Argument	"""ENABLE_USERLOG_LOCKING"""		4859675	0					
ANR	4859865	PrimaryExpression	"""ENABLE_USERLOG_LOCKING"""		4859675	0					
ANR	4859866	Argument	true		4859675	1					
ANR	4859867	Identifier	true		4859675	0					
ANR	4859868	ExpressionStatement	"m_close_file = param_boolean ( ""ALWAYS_CLOSE_USERLOG"" , false )"	371:1:9582:9643	4859675	13	True				
ANR	4859869	AssignmentExpression	"m_close_file = param_boolean ( ""ALWAYS_CLOSE_USERLOG"" , false )"		4859675	0		=			
ANR	4859870	Identifier	m_close_file		4859675	0					
ANR	4859871	CallExpression	"param_boolean ( ""ALWAYS_CLOSE_USERLOG"" , false )"		4859675	1					
ANR	4859872	Callee	param_boolean		4859675	0					
ANR	4859873	Identifier	param_boolean		4859675	0					
ANR	4859874	ArgumentList	"""ALWAYS_CLOSE_USERLOG"""		4859675	1					
ANR	4859875	Argument	"""ALWAYS_CLOSE_USERLOG"""		4859675	0					
ANR	4859876	PrimaryExpression	"""ALWAYS_CLOSE_USERLOG"""		4859675	0					
ANR	4859877	Argument	false		4859675	1					
ANR	4859878	Identifier	false		4859675	0					
ANR	4859879	Statement	if	372:2:9647:9648	4859675	14	True				
ANR	4859880	Statement	defined	372:5:9650:9656	4859675	15	True				
ANR	4859881	Statement	(	372:12:9657:9657	4859675	16	True				
ANR	4859882	Statement	WIN32	372:13:9658:9662	4859675	17	True				
ANR	4859883	Statement	)	372:18:9663:9663	4859675	18	True				
ANR	4859884	IfStatement	if ( m_handle_rot )		4859675	19					
ANR	4859885	Condition	m_handle_rot	373:6:9671:9682	4859675	0	True				
ANR	4859886	Identifier	m_handle_rot		4859675	0					
ANR	4859887	CompoundStatement		54:21:1449:1449	4859675	1					
ANR	4859888	ExpressionStatement	m_close_file = true	374:2:9690:9709	4859675	0	True				
ANR	4859889	AssignmentExpression	m_close_file = true		4859675	0		=			
ANR	4859890	Identifier	m_close_file		4859675	0					
ANR	4859891	Identifier	true		4859675	1					
ANR	4859892	Statement	endif	376:2:9762:9766	4859675	20	True				
ANR	4859893	IfStatement	if ( restore )		4859675	21					
ANR	4859894	Condition	restore	379:6:9834:9840	4859675	0	True				
ANR	4859895	Identifier	restore		4859675	0					
ANR	4859896	CompoundStatement		63:2:1691:1738	4859675	1					
ANR	4859897	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""init: ReOpening file %s\\n"" , m_state -> CurPath ( ) )"	380:2:9848:9924	4859675	0	True				
ANR	4859898	CallExpression	"dprintf ( D_FULLDEBUG , ""init: ReOpening file %s\\n"" , m_state -> CurPath ( ) )"		4859675	0					
ANR	4859899	Callee	dprintf		4859675	0					
ANR	4859900	Identifier	dprintf		4859675	0					
ANR	4859901	ArgumentList	D_FULLDEBUG		4859675	1					
ANR	4859902	Argument	D_FULLDEBUG		4859675	0					
ANR	4859903	Identifier	D_FULLDEBUG		4859675	0					
ANR	4859904	Argument	"""init: ReOpening file %s\\n"""		4859675	1					
ANR	4859905	PrimaryExpression	"""init: ReOpening file %s\\n"""		4859675	0					
ANR	4859906	Argument	m_state -> CurPath ( )		4859675	2					
ANR	4859907	CallExpression	m_state -> CurPath ( )		4859675	0					
ANR	4859908	Callee	m_state -> CurPath		4859675	0					
ANR	4859909	PtrMemberAccess	m_state -> CurPath		4859675	0					
ANR	4859910	Identifier	m_state		4859675	0					
ANR	4859911	Identifier	CurPath		4859675	1					
ANR	4859912	ArgumentList			4859675	1					
ANR	4859913	IdentifierDeclStatement	ULogEventOutcome status = ReopenLogFile ( true ) ;	382:2:9928:9975	4859675	1	True				
ANR	4859914	IdentifierDecl	status = ReopenLogFile ( true )		4859675	0					
ANR	4859915	IdentifierDeclType	ULogEventOutcome		4859675	0					
ANR	4859916	Identifier	status		4859675	1					
ANR	4859917	AssignmentExpression	status = ReopenLogFile ( true )		4859675	2		=			
ANR	4859918	Identifier	status		4859675	0					
ANR	4859919	CallExpression	ReopenLogFile ( true )		4859675	1					
ANR	4859920	Callee	ReopenLogFile		4859675	0					
ANR	4859921	Identifier	ReopenLogFile		4859675	0					
ANR	4859922	ArgumentList	true		4859675	1					
ANR	4859923	Argument	true		4859675	0					
ANR	4859924	Identifier	true		4859675	0					
ANR	4859925	IfStatement	if ( ULOG_MISSED_EVENT == status )		4859675	2					
ANR	4859926	Condition	ULOG_MISSED_EVENT == status	383:7:9984:10010	4859675	0	True				
ANR	4859927	EqualityExpression	ULOG_MISSED_EVENT == status		4859675	0		==			
ANR	4859928	Identifier	ULOG_MISSED_EVENT		4859675	0					
ANR	4859929	Identifier	status		4859675	1					
ANR	4859930	CompoundStatement		64:37:1777:1777	4859675	1					
ANR	4859931	ExpressionStatement	m_missed_event = true	384:3:10019:10040	4859675	0	True				
ANR	4859932	AssignmentExpression	m_missed_event = true		4859675	0		=			
ANR	4859933	Identifier	m_missed_event		4859675	0					
ANR	4859934	Identifier	true		4859675	1					
ANR	4859935	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""ReadUserLog::initialize: Missed event\\n"" )"	385:3:10084:10155	4859675	1	True				
ANR	4859936	CallExpression	"dprintf ( D_FULLDEBUG , ""ReadUserLog::initialize: Missed event\\n"" )"		4859675	0					
ANR	4859937	Callee	dprintf		4859675	0					
ANR	4859938	Identifier	dprintf		4859675	0					
ANR	4859939	ArgumentList	D_FULLDEBUG		4859675	1					
ANR	4859940	Argument	D_FULLDEBUG		4859675	0					
ANR	4859941	Identifier	D_FULLDEBUG		4859675	0					
ANR	4859942	Argument	"""ReadUserLog::initialize: Missed event\\n"""		4859675	1					
ANR	4859943	PrimaryExpression	"""ReadUserLog::initialize: Missed event\\n"""		4859675	0					
ANR	4859944	ElseStatement	else		4859675	0					
ANR	4859945	IfStatement	if ( status != ULOG_OK )		4859675	0					
ANR	4859946	Condition	status != ULOG_OK	388:12:10173:10189	4859675	0	True				
ANR	4859947	EqualityExpression	status != ULOG_OK		4859675	0		!=			
ANR	4859948	Identifier	status		4859675	0					
ANR	4859949	Identifier	ULOG_OK		4859675	1					
ANR	4859950	CompoundStatement		69:32:1956:1956	4859675	1					
ANR	4859951	ExpressionStatement	"dprintf ( D_ALWAYS , ""ReadUserLog::initialize: error re-opening file: %d (%d @ %d)\\n"" , status , m_error , m_line_num )"	389:3:10198:10318	4859675	0	True				
ANR	4859952	CallExpression	"dprintf ( D_ALWAYS , ""ReadUserLog::initialize: error re-opening file: %d (%d @ %d)\\n"" , status , m_error , m_line_num )"		4859675	0					
ANR	4859953	Callee	dprintf		4859675	0					
ANR	4859954	Identifier	dprintf		4859675	0					
ANR	4859955	ArgumentList	D_ALWAYS		4859675	1					
ANR	4859956	Argument	D_ALWAYS		4859675	0					
ANR	4859957	Identifier	D_ALWAYS		4859675	0					
ANR	4859958	Argument	"""ReadUserLog::initialize: error re-opening file: %d (%d @ %d)\\n"""		4859675	1					
ANR	4859959	PrimaryExpression	"""ReadUserLog::initialize: error re-opening file: %d (%d @ %d)\\n"""		4859675	0					
ANR	4859960	Argument	status		4859675	2					
ANR	4859961	Identifier	status		4859675	0					
ANR	4859962	Argument	m_error		4859675	3					
ANR	4859963	Identifier	m_error		4859675	0					
ANR	4859964	Argument	m_line_num		4859675	4					
ANR	4859965	Identifier	m_line_num		4859675	0					
ANR	4859966	ExpressionStatement	releaseResources ( )	391:3:10323:10341	4859675	1	True				
ANR	4859967	CallExpression	releaseResources ( )		4859675	0					
ANR	4859968	Callee	releaseResources		4859675	0					
ANR	4859969	Identifier	releaseResources		4859675	0					
ANR	4859970	ArgumentList			4859675	1					
ANR	4859971	ExpressionStatement	"Error ( LOG_ERROR_FILE_NOT_FOUND , __LINE__ )"	392:3:10346:10389	4859675	2	True				
ANR	4859972	CallExpression	"Error ( LOG_ERROR_FILE_NOT_FOUND , __LINE__ )"		4859675	0					
ANR	4859973	Callee	Error		4859675	0					
ANR	4859974	Identifier	Error		4859675	0					
ANR	4859975	ArgumentList	LOG_ERROR_FILE_NOT_FOUND		4859675	1					
ANR	4859976	Argument	LOG_ERROR_FILE_NOT_FOUND		4859675	0					
ANR	4859977	Identifier	LOG_ERROR_FILE_NOT_FOUND		4859675	0					
ANR	4859978	Argument	__LINE__		4859675	1					
ANR	4859979	Identifier	__LINE__		4859675	0					
ANR	4859980	ReturnStatement	return false ;	393:3:10394:10406	4859675	3	True				
ANR	4859981	Identifier	false		4859675	0					
ANR	4859982	ElseStatement	else		4859675	0					
ANR	4859983	CompoundStatement		77:6:2184:2184	4859675	0					
ANR	4859984	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""init: Opening file %s\\n"" , m_state -> CurPath ( ) )"	397:2:10425:10494	4859675	0	True				
ANR	4859985	CallExpression	"dprintf ( D_FULLDEBUG , ""init: Opening file %s\\n"" , m_state -> CurPath ( ) )"		4859675	0					
ANR	4859986	Callee	dprintf		4859675	0					
ANR	4859987	Identifier	dprintf		4859675	0					
ANR	4859988	ArgumentList	D_FULLDEBUG		4859675	1					
ANR	4859989	Argument	D_FULLDEBUG		4859675	0					
ANR	4859990	Identifier	D_FULLDEBUG		4859675	0					
ANR	4859991	Argument	"""init: Opening file %s\\n"""		4859675	1					
ANR	4859992	PrimaryExpression	"""init: Opening file %s\\n"""		4859675	0					
ANR	4859993	Argument	m_state -> CurPath ( )		4859675	2					
ANR	4859994	CallExpression	m_state -> CurPath ( )		4859675	0					
ANR	4859995	Callee	m_state -> CurPath		4859675	0					
ANR	4859996	PtrMemberAccess	m_state -> CurPath		4859675	0					
ANR	4859997	Identifier	m_state		4859675	0					
ANR	4859998	Identifier	CurPath		4859675	1					
ANR	4859999	ArgumentList			4859675	1					
ANR	4860000	IfStatement	if ( ULOG_OK != OpenLogFile ( restore ) )		4859675	1					
ANR	4860001	Condition	ULOG_OK != OpenLogFile ( restore )	398:7:10503:10535	4859675	0	True				
ANR	4860002	EqualityExpression	ULOG_OK != OpenLogFile ( restore )		4859675	0		!=			
ANR	4860003	Identifier	ULOG_OK		4859675	0					
ANR	4860004	CallExpression	OpenLogFile ( restore )		4859675	1					
ANR	4860005	Callee	OpenLogFile		4859675	0					
ANR	4860006	Identifier	OpenLogFile		4859675	0					
ANR	4860007	ArgumentList	restore		4859675	1					
ANR	4860008	Argument	restore		4859675	0					
ANR	4860009	Identifier	restore		4859675	0					
ANR	4860010	CompoundStatement		79:43:2302:2302	4859675	1					
ANR	4860011	ExpressionStatement	"dprintf ( D_ALWAYS , ""ReadUserLog::initialize: error opening file\\n"" )"	399:3:10544:10618	4859675	0	True				
ANR	4860012	CallExpression	"dprintf ( D_ALWAYS , ""ReadUserLog::initialize: error opening file\\n"" )"		4859675	0					
ANR	4860013	Callee	dprintf		4859675	0					
ANR	4860014	Identifier	dprintf		4859675	0					
ANR	4860015	ArgumentList	D_ALWAYS		4859675	1					
ANR	4860016	Argument	D_ALWAYS		4859675	0					
ANR	4860017	Identifier	D_ALWAYS		4859675	0					
ANR	4860018	Argument	"""ReadUserLog::initialize: error opening file\\n"""		4859675	1					
ANR	4860019	PrimaryExpression	"""ReadUserLog::initialize: error opening file\\n"""		4859675	0					
ANR	4860020	ExpressionStatement	releaseResources ( )	401:3:10623:10641	4859675	1	True				
ANR	4860021	CallExpression	releaseResources ( )		4859675	0					
ANR	4860022	Callee	releaseResources		4859675	0					
ANR	4860023	Identifier	releaseResources		4859675	0					
ANR	4860024	ArgumentList			4859675	1					
ANR	4860025	ExpressionStatement	"Error ( LOG_ERROR_FILE_NOT_FOUND , __LINE__ )"	402:3:10646:10689	4859675	2	True				
ANR	4860026	CallExpression	"Error ( LOG_ERROR_FILE_NOT_FOUND , __LINE__ )"		4859675	0					
ANR	4860027	Callee	Error		4859675	0					
ANR	4860028	Identifier	Error		4859675	0					
ANR	4860029	ArgumentList	LOG_ERROR_FILE_NOT_FOUND		4859675	1					
ANR	4860030	Argument	LOG_ERROR_FILE_NOT_FOUND		4859675	0					
ANR	4860031	Identifier	LOG_ERROR_FILE_NOT_FOUND		4859675	0					
ANR	4860032	Argument	__LINE__		4859675	1					
ANR	4860033	Identifier	__LINE__		4859675	0					
ANR	4860034	ReturnStatement	return false ;	403:3:10694:10706	4859675	3	True				
ANR	4860035	Identifier	false		4859675	0					
ANR	4860036	ExpressionStatement	CloseLogFile ( false )	408:1:10755:10776	4859675	22	True				
ANR	4860037	CallExpression	CloseLogFile ( false )		4859675	0					
ANR	4860038	Callee	CloseLogFile		4859675	0					
ANR	4860039	Identifier	CloseLogFile		4859675	0					
ANR	4860040	ArgumentList	false		4859675	1					
ANR	4860041	Argument	false		4859675	0					
ANR	4860042	Identifier	false		4859675	0					
ANR	4860043	ExpressionStatement	m_initialized = true	409:1:10779:10799	4859675	23	True				
ANR	4860044	AssignmentExpression	m_initialized = true		4859675	0		=			
ANR	4860045	Identifier	m_initialized		4859675	0					
ANR	4860046	Identifier	true		4859675	1					
ANR	4860047	ReturnStatement	return true ;	410:1:10802:10813	4859675	24	True				
ANR	4860048	Identifier	true		4859675	0					
ANR	4860049	ReturnType	bool		4859675	1					
ANR	4860050	Identifier	ReadUserLog :: InternalInitialize		4859675	2					
ANR	4860051	ParameterList	"int max_rotations , bool check_for_rotation , bool restore , bool enable_header_read , bool read_only"		4859675	3					
ANR	4860052	Parameter	int max_rotations	315:34:8096:8112	4859675	0	True				
ANR	4860053	ParameterType	int		4859675	0					
ANR	4860054	Identifier	max_rotations		4859675	1					
ANR	4860055	Parameter	bool check_for_rotation	316:10:8125:8147	4859675	1	True				
ANR	4860056	ParameterType	bool		4859675	0					
ANR	4860057	Identifier	check_for_rotation		4859675	1					
ANR	4860058	Parameter	bool restore	317:10:8160:8171	4859675	2	True				
ANR	4860059	ParameterType	bool		4859675	0					
ANR	4860060	Identifier	restore		4859675	1					
ANR	4860061	Parameter	bool enable_header_read	318:10:8184:8206	4859675	3	True				
ANR	4860062	ParameterType	bool		4859675	0					
ANR	4860063	Identifier	enable_header_read		4859675	1					
ANR	4860064	Parameter	bool read_only	319:10:8219:8232	4859675	4	True				
ANR	4860065	ParameterType	bool		4859675	0					
ANR	4860066	Identifier	read_only		4859675	1					
ANR	4860067	CFGEntryNode	ENTRY		4859675		True				
ANR	4860068	CFGExitNode	EXIT		4859675		True				
ANR	4860069	Symbol	FindPrevFile		4859675						
ANR	4860070	Symbol	m_initialized		4859675						
ANR	4860071	Symbol	SCORE_FACTOR_SAME_SIZE		4859675						
ANR	4860072	Symbol	check_for_rotation		4859675						
ANR	4860073	Symbol	LOG_ERROR_RE_INITIALIZE		4859675						
ANR	4860074	Symbol	ReadUserLogState :: SCORE_CTIME		4859675						
ANR	4860075	Symbol	m_line_num		4859675						
ANR	4860076	Symbol	* m_state		4859675						
ANR	4860077	Symbol	m_read_header		4859675						
ANR	4860078	Symbol	max_rotations		4859675						
ANR	4860079	Symbol	SCORE_FACTOR_INODE		4859675						
ANR	4860080	Symbol	m_lock		4859675						
ANR	4860081	Symbol	m_state -> Rotation		4859675						
ANR	4860082	Symbol	OpenLogFile		4859675						
ANR	4860083	Symbol	m_state		4859675						
ANR	4860084	Symbol	m_state -> CurPath		4859675						
ANR	4860085	Symbol	read_only		4859675						
ANR	4860086	Symbol	m_max_rotations		4859675						
ANR	4860087	Symbol	enable_header_read		4859675						
ANR	4860088	Symbol	m_error		4859675						
ANR	4860089	Symbol	m_read_only		4859675						
ANR	4860090	Symbol	NULL		4859675						
ANR	4860091	Symbol	restore		4859675						
ANR	4860092	Symbol	m_lock_enable		4859675						
ANR	4860093	Symbol	ReadUserLogState :: SCORE_GROWN		4859675						
ANR	4860094	Symbol	false		4859675						
ANR	4860095	Symbol	D_ALWAYS		4859675						
ANR	4860096	Symbol	ReopenLogFile		4859675						
ANR	4860097	Symbol	SCORE_FACTOR_SHRUNK		4859675						
ANR	4860098	Symbol	param_boolean		4859675						
ANR	4860099	Symbol	D_FULLDEBUG		4859675						
ANR	4860100	Symbol	m_missed_event		4859675						
ANR	4860101	Symbol	ReadUserLogState :: SCORE_SHRUNK		4859675						
ANR	4860102	Symbol	__LINE__		4859675						
ANR	4860103	Symbol	m_handle_rot		4859675						
ANR	4860104	Symbol	m_close_file		4859675						
ANR	4860105	Symbol	ULOG_OK		4859675						
ANR	4860106	Symbol	ReadUserLogState :: SCORE_INODE		4859675						
ANR	4860107	Symbol	SCORE_FACTOR_GROWN		4859675						
ANR	4860108	Symbol	true		4859675						
ANR	4860109	Symbol	SCORE_FACTOR_CTIME		4859675						
ANR	4860110	Symbol	ReadUserLogState :: SCORE_SAME_SIZE		4859675						
ANR	4860111	Symbol	LOG_ERROR_FILE_NOT_FOUND		4859675						
ANR	4860112	Symbol	ULOG_MISSED_EVENT		4859675						
ANR	4860113	Symbol	status		4859675						
ANR	4860114	Function	ReadUserLog :: CheckFileStatus	414:0:10843:11037							
ANR	4860115	FunctionDef	ReadUserLog :: CheckFileStatus ()		4860114	0					
ANR	4860116	CompoundStatement		416:0:10904:11037	4860114	0					
ANR	4860117	IdentifierDeclStatement	bool is_empty ;	417:1:10907:10921	4860114	0	True				
ANR	4860118	IdentifierDecl	is_empty		4860114	0					
ANR	4860119	IdentifierDeclType	bool		4860114	0					
ANR	4860120	Identifier	is_empty		4860114	1					
ANR	4860121	IfStatement	if ( ! m_state )		4860114	1					
ANR	4860122	Condition	! m_state	418:6:10929:10936	4860114	0	True				
ANR	4860123	UnaryOperationExpression	! m_state		4860114	0					
ANR	4860124	UnaryOperator	!		4860114	0					
ANR	4860125	Identifier	m_state		4860114	1					
ANR	4860126	CompoundStatement		3:17:35:35	4860114	1					
ANR	4860127	ReturnStatement	return ReadUserLog :: LOG_STATUS_ERROR ;	419:2:10944:10980	4860114	0	True				
ANR	4860128	Identifier	ReadUserLog :: LOG_STATUS_ERROR		4860114	0					
ANR	4860129	ReturnStatement	"return m_state -> CheckFileStatus ( m_fd , is_empty ) ;"	421:1:10986:11035	4860114	2	True				
ANR	4860130	CallExpression	"m_state -> CheckFileStatus ( m_fd , is_empty )"		4860114	0					
ANR	4860131	Callee	m_state -> CheckFileStatus		4860114	0					
ANR	4860132	PtrMemberAccess	m_state -> CheckFileStatus		4860114	0					
ANR	4860133	Identifier	m_state		4860114	0					
ANR	4860134	Identifier	CheckFileStatus		4860114	1					
ANR	4860135	ArgumentList	m_fd		4860114	1					
ANR	4860136	Argument	m_fd		4860114	0					
ANR	4860137	Identifier	m_fd		4860114	0					
ANR	4860138	Argument	is_empty		4860114	1					
ANR	4860139	Identifier	is_empty		4860114	0					
ANR	4860140	ReturnType	ReadUserLog :: FileStatus		4860114	1					
ANR	4860141	Identifier	ReadUserLog :: CheckFileStatus		4860114	2					
ANR	4860142	ParameterList			4860114	3					
ANR	4860143	CFGEntryNode	ENTRY		4860114		True				
ANR	4860144	CFGExitNode	EXIT		4860114		True				
ANR	4860145	Symbol	m_state		4860114						
ANR	4860146	Symbol	m_fd		4860114						
ANR	4860147	Symbol	* m_state		4860114						
ANR	4860148	Symbol	ReadUserLog :: LOG_STATUS_ERROR		4860114						
ANR	4860149	Symbol	is_empty		4860114						
ANR	4860150	Symbol	m_state -> CheckFileStatus		4860114						
ANR	4860151	Function	ReadUserLog :: CheckFileStatus	424:0:11040:11227							
ANR	4860152	FunctionDef	ReadUserLog :: CheckFileStatus (bool & is_empty)		4860151	0					
ANR	4860153	CompoundStatement		426:0:11111:11227	4860151	0					
ANR	4860154	IfStatement	if ( ! m_state )		4860151	0					
ANR	4860155	Condition	! m_state	427:6:11119:11126	4860151	0	True				
ANR	4860156	UnaryOperationExpression	! m_state		4860151	0					
ANR	4860157	UnaryOperator	!		4860151	0					
ANR	4860158	Identifier	m_state		4860151	1					
ANR	4860159	CompoundStatement		2:17:18:18	4860151	1					
ANR	4860160	ReturnStatement	return ReadUserLog :: LOG_STATUS_ERROR ;	428:2:11134:11170	4860151	0	True				
ANR	4860161	Identifier	ReadUserLog :: LOG_STATUS_ERROR		4860151	0					
ANR	4860162	ReturnStatement	"return m_state -> CheckFileStatus ( m_fd , is_empty ) ;"	430:1:11176:11225	4860151	1	True				
ANR	4860163	CallExpression	"m_state -> CheckFileStatus ( m_fd , is_empty )"		4860151	0					
ANR	4860164	Callee	m_state -> CheckFileStatus		4860151	0					
ANR	4860165	PtrMemberAccess	m_state -> CheckFileStatus		4860151	0					
ANR	4860166	Identifier	m_state		4860151	0					
ANR	4860167	Identifier	CheckFileStatus		4860151	1					
ANR	4860168	ArgumentList	m_fd		4860151	1					
ANR	4860169	Argument	m_fd		4860151	0					
ANR	4860170	Identifier	m_fd		4860151	0					
ANR	4860171	Argument	is_empty		4860151	1					
ANR	4860172	Identifier	is_empty		4860151	0					
ANR	4860173	ReturnType	ReadUserLog :: FileStatus		4860151	1					
ANR	4860174	Identifier	ReadUserLog :: CheckFileStatus		4860151	2					
ANR	4860175	ParameterList	bool & is_empty		4860151	3					
ANR	4860176	Parameter	bool & is_empty	425:30:11094:11107	4860151	0	True				
ANR	4860177	ParameterType	bool &		4860151	0					
ANR	4860178	Identifier	is_empty		4860151	1					
ANR	4860179	CFGEntryNode	ENTRY		4860151		True				
ANR	4860180	CFGExitNode	EXIT		4860151		True				
ANR	4860181	Symbol	m_state		4860151						
ANR	4860182	Symbol	m_fd		4860151						
ANR	4860183	Symbol	* m_state		4860151						
ANR	4860184	Symbol	ReadUserLog :: LOG_STATUS_ERROR		4860151						
ANR	4860185	Symbol	is_empty		4860151						
ANR	4860186	Symbol	m_state -> CheckFileStatus		4860151						
ANR	4860187	Function	ReadUserLog :: CloseLogFile	433:0:11230:11583							
ANR	4860188	FunctionDef	ReadUserLog :: CloseLogFile (bool force)		4860187	0					
ANR	4860189	CompoundStatement		435:0:11275:11583	4860187	0					
ANR	4860190	IfStatement	if ( force || m_close_file )		4860187	0					
ANR	4860191	Condition	force || m_close_file	436:6:11283:11303	4860187	0	True				
ANR	4860192	OrExpression	force || m_close_file		4860187	0		||			
ANR	4860193	Identifier	force		4860187	0					
ANR	4860194	Identifier	m_close_file		4860187	1					
ANR	4860195	CompoundStatement		2:30:31:31	4860187	1					
ANR	4860196	IfStatement	if ( m_lock && m_lock -> isLocked ( ) )		4860187	0					
ANR	4860197	Condition	m_lock && m_lock -> isLocked ( )	438:7:11317:11344	4860187	0	True				
ANR	4860198	AndExpression	m_lock && m_lock -> isLocked ( )		4860187	0		&&			
ANR	4860199	Identifier	m_lock		4860187	0					
ANR	4860200	CallExpression	m_lock -> isLocked ( )		4860187	1					
ANR	4860201	Callee	m_lock -> isLocked		4860187	0					
ANR	4860202	PtrMemberAccess	m_lock -> isLocked		4860187	0					
ANR	4860203	Identifier	m_lock		4860187	0					
ANR	4860204	Identifier	isLocked		4860187	1					
ANR	4860205	ArgumentList			4860187	1					
ANR	4860206	CompoundStatement		4:38:72:72	4860187	1					
ANR	4860207	ExpressionStatement	m_lock -> release ( )	439:3:11353:11370	4860187	0	True				
ANR	4860208	CallExpression	m_lock -> release ( )		4860187	0					
ANR	4860209	Callee	m_lock -> release		4860187	0					
ANR	4860210	PtrMemberAccess	m_lock -> release		4860187	0					
ANR	4860211	Identifier	m_lock		4860187	0					
ANR	4860212	Identifier	release		4860187	1					
ANR	4860213	ArgumentList			4860187	1					
ANR	4860214	ExpressionStatement	m_lock_rot = - 1	440:3:11375:11390	4860187	1	True				
ANR	4860215	AssignmentExpression	m_lock_rot = - 1		4860187	0		=			
ANR	4860216	Identifier	m_lock_rot		4860187	0					
ANR	4860217	UnaryOperationExpression	- 1		4860187	1					
ANR	4860218	UnaryOperator	-		4860187	0					
ANR	4860219	PrimaryExpression	1		4860187	1					
ANR	4860220	IfStatement	if ( m_enable_close )		4860187	1					
ANR	4860221	Condition	m_enable_close	443:7:11404:11417	4860187	0	True				
ANR	4860222	Identifier	m_enable_close		4860187	0					
ANR	4860223	CompoundStatement		9:24:145:145	4860187	1					
ANR	4860224	IfStatement	if ( m_fp )		4860187	0					
ANR	4860225	Condition	m_fp	444:8:11431:11434	4860187	0	True				
ANR	4860226	Identifier	m_fp		4860187	0					
ANR	4860227	CompoundStatement		10:15:162:162	4860187	1					
ANR	4860228	ExpressionStatement	fclose ( m_fp )	445:4:11444:11458	4860187	0	True				
ANR	4860229	CallExpression	fclose ( m_fp )		4860187	0					
ANR	4860230	Callee	fclose		4860187	0					
ANR	4860231	Identifier	fclose		4860187	0					
ANR	4860232	ArgumentList	m_fp		4860187	1					
ANR	4860233	Argument	m_fp		4860187	0					
ANR	4860234	Identifier	m_fp		4860187	0					
ANR	4860235	ExpressionStatement	m_fp = NULL	446:4:11464:11475	4860187	1	True				
ANR	4860236	AssignmentExpression	m_fp = NULL		4860187	0		=			
ANR	4860237	Identifier	m_fp		4860187	0					
ANR	4860238	Identifier	NULL		4860187	1					
ANR	4860239	ExpressionStatement	m_fd = - 1	447:4:11481:11490	4860187	2	True				
ANR	4860240	AssignmentExpression	m_fd = - 1		4860187	0		=			
ANR	4860241	Identifier	m_fd		4860187	0					
ANR	4860242	UnaryOperationExpression	- 1		4860187	1					
ANR	4860243	UnaryOperator	-		4860187	0					
ANR	4860244	PrimaryExpression	1		4860187	1					
ANR	4860245	ElseStatement	else		4860187	0					
ANR	4860246	IfStatement	if ( m_fd >= 0 )		4860187	0					
ANR	4860247	Condition	m_fd >= 0	449:13:11510:11518	4860187	0	True				
ANR	4860248	RelationalExpression	m_fd >= 0		4860187	0		>=			
ANR	4860249	Identifier	m_fd		4860187	0					
ANR	4860250	PrimaryExpression	0		4860187	1					
ANR	4860251	CompoundStatement		15:25:246:246	4860187	1					
ANR	4860252	ExpressionStatement	close ( m_fd )	450:4:11528:11539	4860187	0	True				
ANR	4860253	CallExpression	close ( m_fd )		4860187	0					
ANR	4860254	Callee	close		4860187	0					
ANR	4860255	Identifier	close		4860187	0					
ANR	4860256	ArgumentList	m_fd		4860187	1					
ANR	4860257	Argument	m_fd		4860187	0					
ANR	4860258	Identifier	m_fd		4860187	0					
ANR	4860259	ExpressionStatement	m_fd = - 1	451:4:11545:11554	4860187	1	True				
ANR	4860260	AssignmentExpression	m_fd = - 1		4860187	0		=			
ANR	4860261	Identifier	m_fd		4860187	0					
ANR	4860262	UnaryOperationExpression	- 1		4860187	1					
ANR	4860263	UnaryOperator	-		4860187	0					
ANR	4860264	PrimaryExpression	1		4860187	1					
ANR	4860265	ReturnStatement	return true ;	456:1:11570:11581	4860187	1	True				
ANR	4860266	Identifier	true		4860187	0					
ANR	4860267	ReturnType	bool		4860187	1					
ANR	4860268	Identifier	ReadUserLog :: CloseLogFile		4860187	2					
ANR	4860269	ParameterList	bool force		4860187	3					
ANR	4860270	Parameter	bool force	434:27:11262:11271	4860187	0	True				
ANR	4860271	ParameterType	bool		4860187	0					
ANR	4860272	Identifier	force		4860187	1					
ANR	4860273	CFGEntryNode	ENTRY		4860187		True				
ANR	4860274	CFGExitNode	EXIT		4860187		True				
ANR	4860275	Symbol	m_lock		4860187						
ANR	4860276	Symbol	m_fd		4860187						
ANR	4860277	Symbol	NULL		4860187						
ANR	4860278	Symbol	* m_lock		4860187						
ANR	4860279	Symbol	m_lock_rot		4860187						
ANR	4860280	Symbol	m_enable_close		4860187						
ANR	4860281	Symbol	true		4860187						
ANR	4860282	Symbol	force		4860187						
ANR	4860283	Symbol	m_lock -> isLocked		4860187						
ANR	4860284	Symbol	m_fp		4860187						
ANR	4860285	Symbol	m_close_file		4860187						
ANR	4860286	Function	ReadUserLog :: OpenLogFile	459:0:11586:15869							
ANR	4860287	FunctionDef	"ReadUserLog :: OpenLogFile (bool do_seek , bool read_header)"		4860286	0					
ANR	4860288	CompoundStatement		461:0:11662:15869	4860286	0					
ANR	4860289	IdentifierDeclStatement	bool is_lock_current = ( m_state -> Rotation ( ) == m_lock_rot ) ;	471:1:12050:12110	4860286	0	True				
ANR	4860290	IdentifierDecl	is_lock_current = ( m_state -> Rotation ( ) == m_lock_rot )		4860286	0					
ANR	4860291	IdentifierDeclType	bool		4860286	0					
ANR	4860292	Identifier	is_lock_current		4860286	1					
ANR	4860293	AssignmentExpression	is_lock_current = ( m_state -> Rotation ( ) == m_lock_rot )		4860286	2		=			
ANR	4860294	Identifier	is_lock_current		4860286	0					
ANR	4860295	EqualityExpression	m_state -> Rotation ( ) == m_lock_rot		4860286	1		==			
ANR	4860296	CallExpression	m_state -> Rotation ( )		4860286	0					
ANR	4860297	Callee	m_state -> Rotation		4860286	0					
ANR	4860298	PtrMemberAccess	m_state -> Rotation		4860286	0					
ANR	4860299	Identifier	m_state		4860286	0					
ANR	4860300	Identifier	Rotation		4860286	1					
ANR	4860301	ArgumentList			4860286	1					
ANR	4860302	Identifier	m_lock_rot		4860286	1					
ANR	4860303	Statement	dprintf	473:1:12114:12120	4860286	1	True				
ANR	4860304	Statement	(	473:8:12121:12121	4860286	2	True				
ANR	4860305	Statement	D_FULLDEBUG	473:10:12123:12133	4860286	3	True				
ANR	4860306	Statement	","	473:21:12134:12134	4860286	4	True				
ANR	4860307	Statement	"""Opening log file #%d '%s'"""	473:23:12136:12162	4860286	5	True				
ANR	4860308	Statement	"""(is_lock_cur=%s,seek=%s,read_header=%s)\\n"""	474:4:12168:12210	4860286	6	True				
ANR	4860309	Statement	","	474:47:12211:12211	4860286	7	True				
ANR	4860310	Statement	m_state	475:4:12217:12223	4860286	8	True				
ANR	4860311	Statement	->	475:11:12224:12225	4860286	9	True				
ANR	4860312	Statement	Rotation	475:13:12226:12233	4860286	10	True				
ANR	4860313	Statement	(	475:21:12234:12234	4860286	11	True				
ANR	4860314	Statement	)	475:22:12235:12235	4860286	12	True				
ANR	4860315	Statement	","	475:23:12236:12236	4860286	13	True				
ANR	4860316	Statement	m_state	475:25:12238:12244	4860286	14	True				
ANR	4860317	Statement	->	475:32:12245:12246	4860286	15	True				
ANR	4860318	Statement	CurPath	475:34:12247:12253	4860286	16	True				
ANR	4860319	Statement	(	475:41:12254:12254	4860286	17	True				
ANR	4860320	Statement	)	475:42:12255:12255	4860286	18	True				
ANR	4860321	Statement	","	475:43:12256:12256	4860286	19	True				
ANR	4860322	Statement	is_lock_current	476:4:12262:12276	4860286	20	True				
ANR	4860323	Statement	?	476:20:12278:12278	4860286	21	True				
ANR	4860324	Statement	"""true"""	476:22:12280:12285	4860286	22	True				
ANR	4860325	Statement	:	476:29:12287:12287	4860286	23	True				
ANR	4860326	Statement	"""false"""	476:31:12289:12295	4860286	24	True				
ANR	4860327	Statement	","	476:38:12296:12296	4860286	25	True				
ANR	4860328	Statement	do_seek	477:4:12302:12308	4860286	26	True				
ANR	4860329	Statement	?	477:12:12310:12310	4860286	27	True				
ANR	4860330	Statement	"""true"""	477:14:12312:12317	4860286	28	True				
ANR	4860331	Statement	:	477:21:12319:12319	4860286	29	True				
ANR	4860332	Statement	"""false"""	477:23:12321:12327	4860286	30	True				
ANR	4860333	Statement	","	477:30:12328:12328	4860286	31	True				
ANR	4860334	Statement	read_header	478:4:12334:12344	4860286	32	True				
ANR	4860335	Statement	?	478:16:12346:12346	4860286	33	True				
ANR	4860336	Statement	"""true"""	478:18:12348:12353	4860286	34	True				
ANR	4860337	Statement	:	478:25:12355:12355	4860286	35	True				
ANR	4860338	Statement	"""false"""	478:27:12357:12363	4860286	36	True				
ANR	4860339	Statement	)	478:35:12365:12365	4860286	37	True				
ANR	4860340	ExpressionStatement		478:36:12366:12366	4860286	38	True				
ANR	4860341	IfStatement	if ( m_state -> Rotation ( ) < 0 )		4860286	39					
ANR	4860342	Condition	m_state -> Rotation ( ) < 0	479:6:12374:12396	4860286	0	True				
ANR	4860343	RelationalExpression	m_state -> Rotation ( ) < 0		4860286	0		<			
ANR	4860344	CallExpression	m_state -> Rotation ( )		4860286	0					
ANR	4860345	Callee	m_state -> Rotation		4860286	0					
ANR	4860346	PtrMemberAccess	m_state -> Rotation		4860286	0					
ANR	4860347	Identifier	m_state		4860286	0					
ANR	4860348	Identifier	Rotation		4860286	1					
ANR	4860349	ArgumentList			4860286	1					
ANR	4860350	PrimaryExpression	0		4860286	1					
ANR	4860351	CompoundStatement		19:32:737:737	4860286	1					
ANR	4860352	IfStatement	if ( m_state -> Rotation ( - 1 ) < 0 )		4860286	0					
ANR	4860353	Condition	m_state -> Rotation ( - 1 ) < 0	480:7:12409:12433	4860286	0	True				
ANR	4860354	RelationalExpression	m_state -> Rotation ( - 1 ) < 0		4860286	0		<			
ANR	4860355	CallExpression	m_state -> Rotation ( - 1 )		4860286	0					
ANR	4860356	Callee	m_state -> Rotation		4860286	0					
ANR	4860357	PtrMemberAccess	m_state -> Rotation		4860286	0					
ANR	4860358	Identifier	m_state		4860286	0					
ANR	4860359	Identifier	Rotation		4860286	1					
ANR	4860360	ArgumentList	- 1		4860286	1					
ANR	4860361	Argument	- 1		4860286	0					
ANR	4860362	UnaryOperationExpression	- 1		4860286	0					
ANR	4860363	UnaryOperator	-		4860286	0					
ANR	4860364	PrimaryExpression	1		4860286	1					
ANR	4860365	PrimaryExpression	0		4860286	1					
ANR	4860366	CompoundStatement		20:35:774:774	4860286	1					
ANR	4860367	ReturnStatement	return ULOG_RD_ERROR ;	481:3:12442:12462	4860286	0	True				
ANR	4860368	Identifier	ULOG_RD_ERROR		4860286	0					
ANR	4860369	ExpressionStatement	"m_fd = safe_open_wrapper_follow ( m_state -> CurPath ( ) , m_read_only ? O_RDONLY : O_RDWR , 0 )"	485:1:12473:12580	4860286	40	True				
ANR	4860370	AssignmentExpression	"m_fd = safe_open_wrapper_follow ( m_state -> CurPath ( ) , m_read_only ? O_RDONLY : O_RDWR , 0 )"		4860286	0		=			
ANR	4860371	Identifier	m_fd		4860286	0					
ANR	4860372	CallExpression	"safe_open_wrapper_follow ( m_state -> CurPath ( ) , m_read_only ? O_RDONLY : O_RDWR , 0 )"		4860286	1					
ANR	4860373	Callee	safe_open_wrapper_follow		4860286	0					
ANR	4860374	Identifier	safe_open_wrapper_follow		4860286	0					
ANR	4860375	ArgumentList	m_state -> CurPath ( )		4860286	1					
ANR	4860376	Argument	m_state -> CurPath ( )		4860286	0					
ANR	4860377	CallExpression	m_state -> CurPath ( )		4860286	0					
ANR	4860378	Callee	m_state -> CurPath		4860286	0					
ANR	4860379	PtrMemberAccess	m_state -> CurPath		4860286	0					
ANR	4860380	Identifier	m_state		4860286	0					
ANR	4860381	Identifier	CurPath		4860286	1					
ANR	4860382	ArgumentList			4860286	1					
ANR	4860383	Argument	m_read_only ? O_RDONLY : O_RDWR		4860286	1					
ANR	4860384	ConditionalExpression	m_read_only ? O_RDONLY : O_RDWR		4860286	0					
ANR	4860385	Condition	m_read_only		4860286	0					
ANR	4860386	Identifier	m_read_only		4860286	0					
ANR	4860387	Identifier	O_RDONLY		4860286	1					
ANR	4860388	Identifier	O_RDWR		4860286	2					
ANR	4860389	Argument	0		4860286	2					
ANR	4860390	PrimaryExpression	0		4860286	0					
ANR	4860391	IfStatement	if ( m_fd < 0 )		4860286	41					
ANR	4860392	Condition	m_fd < 0	488:6:12588:12595	4860286	0	True				
ANR	4860393	RelationalExpression	m_fd < 0		4860286	0		<			
ANR	4860394	Identifier	m_fd		4860286	0					
ANR	4860395	PrimaryExpression	0		4860286	1					
ANR	4860396	CompoundStatement		28:17:936:936	4860286	1					
ANR	4860397	ExpressionStatement	"dprintf ( D_ALWAYS , ""ReadUserLog::OpenLogFile safe_open_wrapper on %s returns %d: error %d(%s)\\n"" , m_state -> CurPath ( ) , m_fd , errno , strerror ( errno ) )"	489:2:12603:12749	4860286	0	True				
ANR	4860398	CallExpression	"dprintf ( D_ALWAYS , ""ReadUserLog::OpenLogFile safe_open_wrapper on %s returns %d: error %d(%s)\\n"" , m_state -> CurPath ( ) , m_fd , errno , strerror ( errno ) )"		4860286	0					
ANR	4860399	Callee	dprintf		4860286	0					
ANR	4860400	Identifier	dprintf		4860286	0					
ANR	4860401	ArgumentList	D_ALWAYS		4860286	1					
ANR	4860402	Argument	D_ALWAYS		4860286	0					
ANR	4860403	Identifier	D_ALWAYS		4860286	0					
ANR	4860404	Argument	"""ReadUserLog::OpenLogFile safe_open_wrapper on %s returns %d: error %d(%s)\\n"""		4860286	1					
ANR	4860405	PrimaryExpression	"""ReadUserLog::OpenLogFile safe_open_wrapper on %s returns %d: error %d(%s)\\n"""		4860286	0					
ANR	4860406	Argument	m_state -> CurPath ( )		4860286	2					
ANR	4860407	CallExpression	m_state -> CurPath ( )		4860286	0					
ANR	4860408	Callee	m_state -> CurPath		4860286	0					
ANR	4860409	PtrMemberAccess	m_state -> CurPath		4860286	0					
ANR	4860410	Identifier	m_state		4860286	0					
ANR	4860411	Identifier	CurPath		4860286	1					
ANR	4860412	ArgumentList			4860286	1					
ANR	4860413	Argument	m_fd		4860286	3					
ANR	4860414	Identifier	m_fd		4860286	0					
ANR	4860415	Argument	errno		4860286	4					
ANR	4860416	Identifier	errno		4860286	0					
ANR	4860417	Argument	strerror ( errno )		4860286	5					
ANR	4860418	CallExpression	strerror ( errno )		4860286	0					
ANR	4860419	Callee	strerror		4860286	0					
ANR	4860420	Identifier	strerror		4860286	0					
ANR	4860421	ArgumentList	errno		4860286	1					
ANR	4860422	Argument	errno		4860286	0					
ANR	4860423	Identifier	errno		4860286	0					
ANR	4860424	ReturnStatement	return ULOG_RD_ERROR ;	490:2:12753:12773	4860286	1	True				
ANR	4860425	Identifier	ULOG_RD_ERROR		4860286	0					
ANR	4860426	ExpressionStatement	"m_fp = fdopen ( m_fd , ""r"" )"	493:1:12780:12806	4860286	42	True				
ANR	4860427	AssignmentExpression	"m_fp = fdopen ( m_fd , ""r"" )"		4860286	0		=			
ANR	4860428	Identifier	m_fp		4860286	0					
ANR	4860429	CallExpression	"fdopen ( m_fd , ""r"" )"		4860286	1					
ANR	4860430	Callee	fdopen		4860286	0					
ANR	4860431	Identifier	fdopen		4860286	0					
ANR	4860432	ArgumentList	m_fd		4860286	1					
ANR	4860433	Argument	m_fd		4860286	0					
ANR	4860434	Identifier	m_fd		4860286	0					
ANR	4860435	Argument	"""r"""		4860286	1					
ANR	4860436	PrimaryExpression	"""r"""		4860286	0					
ANR	4860437	IfStatement	if ( m_fp == NULL )		4860286	43					
ANR	4860438	Condition	m_fp == NULL	494:6:12814:12825	4860286	0	True				
ANR	4860439	EqualityExpression	m_fp == NULL		4860286	0		==			
ANR	4860440	Identifier	m_fp		4860286	0					
ANR	4860441	Identifier	NULL		4860286	1					
ANR	4860442	CompoundStatement		34:21:1166:1166	4860286	1					
ANR	4860443	ExpressionStatement	CloseLogFile ( true )	495:2:12833:12853	4860286	0	True				
ANR	4860444	CallExpression	CloseLogFile ( true )		4860286	0					
ANR	4860445	Callee	CloseLogFile		4860286	0					
ANR	4860446	Identifier	CloseLogFile		4860286	0					
ANR	4860447	ArgumentList	true		4860286	1					
ANR	4860448	Argument	true		4860286	0					
ANR	4860449	Identifier	true		4860286	0					
ANR	4860450	ExpressionStatement	"dprintf ( D_ALWAYS , ""ReadUserLog::OpenLogFile fdopen returns NULL\\n"" )"	496:2:12857:12924	4860286	1	True				
ANR	4860451	CallExpression	"dprintf ( D_ALWAYS , ""ReadUserLog::OpenLogFile fdopen returns NULL\\n"" )"		4860286	0					
ANR	4860452	Callee	dprintf		4860286	0					
ANR	4860453	Identifier	dprintf		4860286	0					
ANR	4860454	ArgumentList	D_ALWAYS		4860286	1					
ANR	4860455	Argument	D_ALWAYS		4860286	0					
ANR	4860456	Identifier	D_ALWAYS		4860286	0					
ANR	4860457	Argument	"""ReadUserLog::OpenLogFile fdopen returns NULL\\n"""		4860286	1					
ANR	4860458	PrimaryExpression	"""ReadUserLog::OpenLogFile fdopen returns NULL\\n"""		4860286	0					
ANR	4860459	ReturnStatement	return ULOG_RD_ERROR ;	497:5:12931:12951	4860286	2	True				
ANR	4860460	Identifier	ULOG_RD_ERROR		4860286	0					
ANR	4860461	IfStatement	if ( do_seek && m_state -> Offset ( ) )		4860286	44					
ANR	4860462	Condition	do_seek && m_state -> Offset ( )	501:6:12997:13024	4860286	0	True				
ANR	4860463	AndExpression	do_seek && m_state -> Offset ( )		4860286	0		&&			
ANR	4860464	Identifier	do_seek		4860286	0					
ANR	4860465	CallExpression	m_state -> Offset ( )		4860286	1					
ANR	4860466	Callee	m_state -> Offset		4860286	0					
ANR	4860467	PtrMemberAccess	m_state -> Offset		4860286	0					
ANR	4860468	Identifier	m_state		4860286	0					
ANR	4860469	Identifier	Offset		4860286	1					
ANR	4860470	ArgumentList			4860286	1					
ANR	4860471	CompoundStatement		41:37:1365:1365	4860286	1					
ANR	4860472	IfStatement	"if ( fseek ( m_fp , m_state -> Offset ( ) , SEEK_SET ) )"		4860286	0					
ANR	4860473	Condition	"fseek ( m_fp , m_state -> Offset ( ) , SEEK_SET )"	502:6:13036:13076	4860286	0	True				
ANR	4860474	CallExpression	"fseek ( m_fp , m_state -> Offset ( ) , SEEK_SET )"		4860286	0					
ANR	4860475	Callee	fseek		4860286	0					
ANR	4860476	Identifier	fseek		4860286	0					
ANR	4860477	ArgumentList	m_fp		4860286	1					
ANR	4860478	Argument	m_fp		4860286	0					
ANR	4860479	Identifier	m_fp		4860286	0					
ANR	4860480	Argument	m_state -> Offset ( )		4860286	1					
ANR	4860481	CallExpression	m_state -> Offset ( )		4860286	0					
ANR	4860482	Callee	m_state -> Offset		4860286	0					
ANR	4860483	PtrMemberAccess	m_state -> Offset		4860286	0					
ANR	4860484	Identifier	m_state		4860286	0					
ANR	4860485	Identifier	Offset		4860286	1					
ANR	4860486	ArgumentList			4860286	1					
ANR	4860487	Argument	SEEK_SET		4860286	2					
ANR	4860488	Identifier	SEEK_SET		4860286	0					
ANR	4860489	CompoundStatement		42:50:1417:1417	4860286	1					
ANR	4860490	ExpressionStatement	CloseLogFile ( true )	503:3:13085:13105	4860286	0	True				
ANR	4860491	CallExpression	CloseLogFile ( true )		4860286	0					
ANR	4860492	Callee	CloseLogFile		4860286	0					
ANR	4860493	Identifier	CloseLogFile		4860286	0					
ANR	4860494	ArgumentList	true		4860286	1					
ANR	4860495	Argument	true		4860286	0					
ANR	4860496	Identifier	true		4860286	0					
ANR	4860497	ExpressionStatement	"dprintf ( D_ALWAYS , ""ReadUserLog::OpenLogFile fseek returns NULL\\n"" )"	504:3:13110:13176	4860286	1	True				
ANR	4860498	CallExpression	"dprintf ( D_ALWAYS , ""ReadUserLog::OpenLogFile fseek returns NULL\\n"" )"		4860286	0					
ANR	4860499	Callee	dprintf		4860286	0					
ANR	4860500	Identifier	dprintf		4860286	0					
ANR	4860501	ArgumentList	D_ALWAYS		4860286	1					
ANR	4860502	Argument	D_ALWAYS		4860286	0					
ANR	4860503	Identifier	D_ALWAYS		4860286	0					
ANR	4860504	Argument	"""ReadUserLog::OpenLogFile fseek returns NULL\\n"""		4860286	1					
ANR	4860505	PrimaryExpression	"""ReadUserLog::OpenLogFile fseek returns NULL\\n"""		4860286	0					
ANR	4860506	ReturnStatement	return ULOG_RD_ERROR ;	505:3:13181:13201	4860286	2	True				
ANR	4860507	Identifier	ULOG_RD_ERROR		4860286	0					
ANR	4860508	IfStatement	if ( m_lock_enable )		4860286	45					
ANR	4860509	Condition	m_lock_enable	510:6:13246:13258	4860286	0	True				
ANR	4860510	Identifier	m_lock_enable		4860286	0					
ANR	4860511	CompoundStatement		50:22:1599:1599	4860286	1					
ANR	4860512	IfStatement	if ( ( ! is_lock_current ) && m_lock )		4860286	0					
ANR	4860513	Condition	( ! is_lock_current ) && m_lock	513:7:13341:13370	4860286	0	True				
ANR	4860514	AndExpression	( ! is_lock_current ) && m_lock		4860286	0		&&			
ANR	4860515	UnaryOperationExpression	! is_lock_current		4860286	0					
ANR	4860516	UnaryOperator	!		4860286	0					
ANR	4860517	Identifier	is_lock_current		4860286	1					
ANR	4860518	Identifier	m_lock		4860286	1					
ANR	4860519	CompoundStatement		53:40:1711:1711	4860286	1					
ANR	4860520	Statement	delete	514:3:13379:13384	4860286	0	True				
ANR	4860521	ExpressionStatement	m_lock	514:10:13386:13392	4860286	1	True				
ANR	4860522	Identifier	m_lock		4860286	0					
ANR	4860523	ExpressionStatement	m_lock = NULL	515:3:13397:13410	4860286	2	True				
ANR	4860524	AssignmentExpression	m_lock = NULL		4860286	0		=			
ANR	4860525	Identifier	m_lock		4860286	0					
ANR	4860526	Identifier	NULL		4860286	1					
ANR	4860527	ExpressionStatement	m_lock_rot = - 1	516:3:13415:13430	4860286	3	True				
ANR	4860528	AssignmentExpression	m_lock_rot = - 1		4860286	0		=			
ANR	4860529	Identifier	m_lock_rot		4860286	0					
ANR	4860530	UnaryOperationExpression	- 1		4860286	1					
ANR	4860531	UnaryOperator	-		4860286	0					
ANR	4860532	PrimaryExpression	1		4860286	1					
ANR	4860533	IfStatement	if ( ! m_lock )		4860286	1					
ANR	4860534	Condition	! m_lock	521:7:13520:13527	4860286	0	True				
ANR	4860535	UnaryOperationExpression	! m_lock		4860286	0					
ANR	4860536	UnaryOperator	!		4860286	0					
ANR	4860537	Identifier	m_lock		4860286	1					
ANR	4860538	CompoundStatement		64:3:1972:2040	4860286	1					
ANR	4860539	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Creating file lock(%d,%p,%s)\\n"" , m_fd , m_fp , m_state -> CurPath ( ) )"	522:3:13536:13630	4860286	0	True				
ANR	4860540	CallExpression	"dprintf ( D_FULLDEBUG , ""Creating file lock(%d,%p,%s)\\n"" , m_fd , m_fp , m_state -> CurPath ( ) )"		4860286	0					
ANR	4860541	Callee	dprintf		4860286	0					
ANR	4860542	Identifier	dprintf		4860286	0					
ANR	4860543	ArgumentList	D_FULLDEBUG		4860286	1					
ANR	4860544	Argument	D_FULLDEBUG		4860286	0					
ANR	4860545	Identifier	D_FULLDEBUG		4860286	0					
ANR	4860546	Argument	"""Creating file lock(%d,%p,%s)\\n"""		4860286	1					
ANR	4860547	PrimaryExpression	"""Creating file lock(%d,%p,%s)\\n"""		4860286	0					
ANR	4860548	Argument	m_fd		4860286	2					
ANR	4860549	Identifier	m_fd		4860286	0					
ANR	4860550	Argument	m_fp		4860286	3					
ANR	4860551	Identifier	m_fp		4860286	0					
ANR	4860552	Argument	m_state -> CurPath ( )		4860286	4					
ANR	4860553	CallExpression	m_state -> CurPath ( )		4860286	0					
ANR	4860554	Callee	m_state -> CurPath		4860286	0					
ANR	4860555	PtrMemberAccess	m_state -> CurPath		4860286	0					
ANR	4860556	Identifier	m_state		4860286	0					
ANR	4860557	Identifier	CurPath		4860286	1					
ANR	4860558	ArgumentList			4860286	1					
ANR	4860559	IdentifierDeclStatement	"bool new_locking = param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true ) ;"	524:3:13635:13703	4860286	1	True				
ANR	4860560	IdentifierDecl	"new_locking = param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true )"		4860286	0					
ANR	4860561	IdentifierDeclType	bool		4860286	0					
ANR	4860562	Identifier	new_locking		4860286	1					
ANR	4860563	AssignmentExpression	"new_locking = param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true )"		4860286	2		=			
ANR	4860564	Identifier	new_locking		4860286	0					
ANR	4860565	CallExpression	"param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true )"		4860286	1					
ANR	4860566	Callee	param_boolean		4860286	0					
ANR	4860567	Identifier	param_boolean		4860286	0					
ANR	4860568	ArgumentList	"""CREATE_LOCKS_ON_LOCAL_DISK"""		4860286	1					
ANR	4860569	Argument	"""CREATE_LOCKS_ON_LOCAL_DISK"""		4860286	0					
ANR	4860570	PrimaryExpression	"""CREATE_LOCKS_ON_LOCAL_DISK"""		4860286	0					
ANR	4860571	Argument	true		4860286	1					
ANR	4860572	Identifier	true		4860286	0					
ANR	4860573	ExpressionStatement	new_locking = false	526:3:13727:13746	4860286	2	True				
ANR	4860574	AssignmentExpression	new_locking = false		4860286	0		=			
ANR	4860575	Identifier	new_locking		4860286	0					
ANR	4860576	Identifier	false		4860286	1					
ANR	4860577	IfStatement	if ( new_locking )		4860286	3					
ANR	4860578	Condition	new_locking	528:7:13762:13772	4860286	0	True				
ANR	4860579	Identifier	new_locking		4860286	0					
ANR	4860580	CompoundStatement		68:20:2112:2112	4860286	1					
ANR	4860581	ExpressionStatement	"m_lock = new FileLock ( m_state -> CurPath ( ) , true , false )"	529:4:13781:13835	4860286	0	True				
ANR	4860582	AssignmentExpression	"m_lock = new FileLock ( m_state -> CurPath ( ) , true , false )"		4860286	0		=			
ANR	4860583	Identifier	m_lock		4860286	0					
ANR	4860584	Expression	"m_state -> CurPath ( ) , true , false"		4860286	1					
ANR	4860585	CallExpression	m_state -> CurPath ( )		4860286	0					
ANR	4860586	Callee	m_state -> CurPath		4860286	0					
ANR	4860587	PtrMemberAccess	m_state -> CurPath		4860286	0					
ANR	4860588	Identifier	m_state		4860286	0					
ANR	4860589	Identifier	CurPath		4860286	1					
ANR	4860590	ArgumentList			4860286	1					
ANR	4860591	Expression	"true , false"		4860286	1					
ANR	4860592	Identifier	true		4860286	0					
ANR	4860593	Identifier	false		4860286	1					
ANR	4860594	IfStatement	if ( ! m_lock -> initSucceeded ( ) )		4860286	1					
ANR	4860595	Condition	! m_lock -> initSucceeded ( )	530:8:13845:13869	4860286	0	True				
ANR	4860596	UnaryOperationExpression	! m_lock -> initSucceeded ( )		4860286	0					
ANR	4860597	UnaryOperator	!		4860286	0					
ANR	4860598	CallExpression	m_lock -> initSucceeded ( )		4860286	1					
ANR	4860599	Callee	m_lock -> initSucceeded		4860286	0					
ANR	4860600	PtrMemberAccess	m_lock -> initSucceeded		4860286	0					
ANR	4860601	Identifier	m_lock		4860286	0					
ANR	4860602	Identifier	initSucceeded		4860286	1					
ANR	4860603	ArgumentList			4860286	1					
ANR	4860604	CompoundStatement		70:36:2210:2210	4860286	1					
ANR	4860605	Statement	delete	531:5:13880:13885	4860286	0	True				
ANR	4860606	ExpressionStatement	m_lock	531:12:13887:13893	4860286	1	True				
ANR	4860607	Identifier	m_lock		4860286	0					
ANR	4860608	ExpressionStatement	"m_lock = new FileLock ( m_fd , m_fp , m_state -> CurPath ( ) )"	532:5:13900:13955	4860286	2	True				
ANR	4860609	AssignmentExpression	"m_lock = new FileLock ( m_fd , m_fp , m_state -> CurPath ( ) )"		4860286	0		=			
ANR	4860610	Identifier	m_lock		4860286	0					
ANR	4860611	Expression	"m_fd , m_fp , m_state -> CurPath ( )"		4860286	1					
ANR	4860612	Identifier	m_fd		4860286	0					
ANR	4860613	Expression	"m_fp , m_state -> CurPath ( )"		4860286	1					
ANR	4860614	Identifier	m_fp		4860286	0					
ANR	4860615	CallExpression	m_state -> CurPath ( )		4860286	1					
ANR	4860616	Callee	m_state -> CurPath		4860286	0					
ANR	4860617	PtrMemberAccess	m_state -> CurPath		4860286	0					
ANR	4860618	Identifier	m_state		4860286	0					
ANR	4860619	Identifier	CurPath		4860286	1					
ANR	4860620	ArgumentList			4860286	1					
ANR	4860621	ElseStatement	else		4860286	0					
ANR	4860622	CompoundStatement		74:10:2310:2310	4860286	0					
ANR	4860623	ExpressionStatement	"m_lock = new FileLock ( m_fd , m_fp , m_state -> CurPath ( ) )"	535:4:13979:14034	4860286	0	True				
ANR	4860624	AssignmentExpression	"m_lock = new FileLock ( m_fd , m_fp , m_state -> CurPath ( ) )"		4860286	0		=			
ANR	4860625	Identifier	m_lock		4860286	0					
ANR	4860626	Expression	"m_fd , m_fp , m_state -> CurPath ( )"		4860286	1					
ANR	4860627	Identifier	m_fd		4860286	0					
ANR	4860628	Expression	"m_fp , m_state -> CurPath ( )"		4860286	1					
ANR	4860629	Identifier	m_fp		4860286	0					
ANR	4860630	CallExpression	m_state -> CurPath ( )		4860286	1					
ANR	4860631	Callee	m_state -> CurPath		4860286	0					
ANR	4860632	PtrMemberAccess	m_state -> CurPath		4860286	0					
ANR	4860633	Identifier	m_state		4860286	0					
ANR	4860634	Identifier	CurPath		4860286	1					
ANR	4860635	ArgumentList			4860286	1					
ANR	4860636	IfStatement	if ( ! m_lock )		4860286	4					
ANR	4860637	Condition	! m_lock	537:7:14048:14055	4860286	0	True				
ANR	4860638	UnaryOperationExpression	! m_lock		4860286	0					
ANR	4860639	UnaryOperator	!		4860286	0					
ANR	4860640	Identifier	m_lock		4860286	1					
ANR	4860641	CompoundStatement		77:18:2396:2396	4860286	1					
ANR	4860642	ExpressionStatement	CloseLogFile ( true )	538:4:14065:14085	4860286	0	True				
ANR	4860643	CallExpression	CloseLogFile ( true )		4860286	0					
ANR	4860644	Callee	CloseLogFile		4860286	0					
ANR	4860645	Identifier	CloseLogFile		4860286	0					
ANR	4860646	ArgumentList	true		4860286	1					
ANR	4860647	Argument	true		4860286	0					
ANR	4860648	Identifier	true		4860286	0					
ANR	4860649	ExpressionStatement	"dprintf ( D_ALWAYS , ""ReadUserLog::OpenLogFile FileLock returns NULL\\n"" )"	539:4:14091:14160	4860286	1	True				
ANR	4860650	CallExpression	"dprintf ( D_ALWAYS , ""ReadUserLog::OpenLogFile FileLock returns NULL\\n"" )"		4860286	0					
ANR	4860651	Callee	dprintf		4860286	0					
ANR	4860652	Identifier	dprintf		4860286	0					
ANR	4860653	ArgumentList	D_ALWAYS		4860286	1					
ANR	4860654	Argument	D_ALWAYS		4860286	0					
ANR	4860655	Identifier	D_ALWAYS		4860286	0					
ANR	4860656	Argument	"""ReadUserLog::OpenLogFile FileLock returns NULL\\n"""		4860286	1					
ANR	4860657	PrimaryExpression	"""ReadUserLog::OpenLogFile FileLock returns NULL\\n"""		4860286	0					
ANR	4860658	ReturnStatement	return ULOG_RD_ERROR ;	540:4:14166:14186	4860286	2	True				
ANR	4860659	Identifier	ULOG_RD_ERROR		4860286	0					
ANR	4860660	ExpressionStatement	m_lock_rot = m_state -> Rotation ( )	542:3:14196:14229	4860286	5	True				
ANR	4860661	AssignmentExpression	m_lock_rot = m_state -> Rotation ( )		4860286	0		=			
ANR	4860662	Identifier	m_lock_rot		4860286	0					
ANR	4860663	CallExpression	m_state -> Rotation ( )		4860286	1					
ANR	4860664	Callee	m_state -> Rotation		4860286	0					
ANR	4860665	PtrMemberAccess	m_state -> Rotation		4860286	0					
ANR	4860666	Identifier	m_state		4860286	0					
ANR	4860667	Identifier	Rotation		4860286	1					
ANR	4860668	ArgumentList			4860286	1					
ANR	4860669	ElseStatement	else		4860286	0					
ANR	4860670	CompoundStatement		84:7:2579:2579	4860286	0					
ANR	4860671	ExpressionStatement	"m_lock -> SetFdFpFile ( m_fd , m_fp , m_state -> CurPath ( ) )"	545:3:14247:14300	4860286	0	True				
ANR	4860672	CallExpression	"m_lock -> SetFdFpFile ( m_fd , m_fp , m_state -> CurPath ( ) )"		4860286	0					
ANR	4860673	Callee	m_lock -> SetFdFpFile		4860286	0					
ANR	4860674	PtrMemberAccess	m_lock -> SetFdFpFile		4860286	0					
ANR	4860675	Identifier	m_lock		4860286	0					
ANR	4860676	Identifier	SetFdFpFile		4860286	1					
ANR	4860677	ArgumentList	m_fd		4860286	1					
ANR	4860678	Argument	m_fd		4860286	0					
ANR	4860679	Identifier	m_fd		4860286	0					
ANR	4860680	Argument	m_fp		4860286	1					
ANR	4860681	Identifier	m_fp		4860286	0					
ANR	4860682	Argument	m_state -> CurPath ( )		4860286	2					
ANR	4860683	CallExpression	m_state -> CurPath ( )		4860286	0					
ANR	4860684	Callee	m_state -> CurPath		4860286	0					
ANR	4860685	PtrMemberAccess	m_state -> CurPath		4860286	0					
ANR	4860686	Identifier	m_state		4860286	0					
ANR	4860687	Identifier	CurPath		4860286	1					
ANR	4860688	ArgumentList			4860286	1					
ANR	4860689	ElseStatement	else		4860286	0					
ANR	4860690	CompoundStatement		88:6:2652:2652	4860286	0					
ANR	4860691	IfStatement	if ( m_lock )		4860286	0					
ANR	4860692	Condition	m_lock	549:7:14324:14329	4860286	0	True				
ANR	4860693	Identifier	m_lock		4860286	0					
ANR	4860694	CompoundStatement		89:16:2670:2670	4860286	1					
ANR	4860695	Statement	delete	550:3:14338:14343	4860286	0	True				
ANR	4860696	ExpressionStatement	m_lock	550:10:14345:14351	4860286	1	True				
ANR	4860697	Identifier	m_lock		4860286	0					
ANR	4860698	ExpressionStatement	m_lock = NULL	551:3:14356:14369	4860286	2	True				
ANR	4860699	AssignmentExpression	m_lock = NULL		4860286	0		=			
ANR	4860700	Identifier	m_lock		4860286	0					
ANR	4860701	Identifier	NULL		4860286	1					
ANR	4860702	ExpressionStatement	m_lock_rot = - 1	552:3:14374:14389	4860286	3	True				
ANR	4860703	AssignmentExpression	m_lock_rot = - 1		4860286	0		=			
ANR	4860704	Identifier	m_lock_rot		4860286	0					
ANR	4860705	UnaryOperationExpression	- 1		4860286	1					
ANR	4860706	UnaryOperator	-		4860286	0					
ANR	4860707	PrimaryExpression	1		4860286	1					
ANR	4860708	Statement	m_lock	554:2:14397:14402	4860286	1	True				
ANR	4860709	Statement	=	554:9:14404:14404	4860286	2	True				
ANR	4860710	Statement	new	554:11:14406:14408	4860286	3	True				
ANR	4860711	ExpressionStatement	FakeFileLock	554:15:14410:14422	4860286	4	True				
ANR	4860712	Identifier	FakeFileLock		4860286	0					
ANR	4860713	IfStatement	if ( m_state -> IsLogType ( ReadUserLogState :: LOG_TYPE_UNKNOWN ) )		4860286	46					
ANR	4860714	Condition	m_state -> IsLogType ( ReadUserLogState :: LOG_TYPE_UNKNOWN )	558:6:14485:14539	4860286	0	True				
ANR	4860715	CallExpression	m_state -> IsLogType ( ReadUserLogState :: LOG_TYPE_UNKNOWN )		4860286	0					
ANR	4860716	Callee	m_state -> IsLogType		4860286	0					
ANR	4860717	PtrMemberAccess	m_state -> IsLogType		4860286	0					
ANR	4860718	Identifier	m_state		4860286	0					
ANR	4860719	Identifier	IsLogType		4860286	1					
ANR	4860720	ArgumentList	ReadUserLogState :: LOG_TYPE_UNKNOWN		4860286	1					
ANR	4860721	Argument	ReadUserLogState :: LOG_TYPE_UNKNOWN		4860286	0					
ANR	4860722	Identifier	ReadUserLogState :: LOG_TYPE_UNKNOWN		4860286	0					
ANR	4860723	CompoundStatement		98:64:2880:2880	4860286	1					
ANR	4860724	IfStatement	if ( ! determineLogType ( ) )		4860286	0					
ANR	4860725	Condition	! determineLogType ( )	559:7:14552:14570	4860286	0	True				
ANR	4860726	UnaryOperationExpression	! determineLogType ( )		4860286	0					
ANR	4860727	UnaryOperator	!		4860286	0					
ANR	4860728	CallExpression	determineLogType ( )		4860286	1					
ANR	4860729	Callee	determineLogType		4860286	0					
ANR	4860730	Identifier	determineLogType		4860286	0					
ANR	4860731	ArgumentList			4860286	1					
ANR	4860732	CompoundStatement		99:29:2911:2911	4860286	1					
ANR	4860733	ExpressionStatement	"dprintf ( D_ALWAYS , ""ReadUserLog::OpenLogFile(): Can't log type\\n"" )"	560:3:14579:14652	4860286	0	True				
ANR	4860734	CallExpression	"dprintf ( D_ALWAYS , ""ReadUserLog::OpenLogFile(): Can't log type\\n"" )"		4860286	0					
ANR	4860735	Callee	dprintf		4860286	0					
ANR	4860736	Identifier	dprintf		4860286	0					
ANR	4860737	ArgumentList	D_ALWAYS		4860286	1					
ANR	4860738	Argument	D_ALWAYS		4860286	0					
ANR	4860739	Identifier	D_ALWAYS		4860286	0					
ANR	4860740	Argument	"""ReadUserLog::OpenLogFile(): Can't log type\\n"""		4860286	1					
ANR	4860741	PrimaryExpression	"""ReadUserLog::OpenLogFile(): Can't log type\\n"""		4860286	0					
ANR	4860742	ExpressionStatement	releaseResources ( )	562:3:14657:14675	4860286	1	True				
ANR	4860743	CallExpression	releaseResources ( )		4860286	0					
ANR	4860744	Callee	releaseResources		4860286	0					
ANR	4860745	Identifier	releaseResources		4860286	0					
ANR	4860746	ArgumentList			4860286	1					
ANR	4860747	ReturnStatement	return ULOG_RD_ERROR ;	563:3:14680:14700	4860286	2	True				
ANR	4860748	Identifier	ULOG_RD_ERROR		4860286	0					
ANR	4860749	IfStatement	if ( read_header && m_read_header && ( ! m_state -> ValidUniqId ( ) ) )		4860286	47					
ANR	4860750	Condition	read_header && m_read_header && ( ! m_state -> ValidUniqId ( ) )	568:6:14749:14806	4860286	0	True				
ANR	4860751	AndExpression	read_header && m_read_header && ( ! m_state -> ValidUniqId ( ) )		4860286	0		&&			
ANR	4860752	Identifier	read_header		4860286	0					
ANR	4860753	AndExpression	m_read_header && ( ! m_state -> ValidUniqId ( ) )		4860286	1		&&			
ANR	4860754	Identifier	m_read_header		4860286	0					
ANR	4860755	UnaryOperationExpression	! m_state -> ValidUniqId ( )		4860286	1					
ANR	4860756	UnaryOperator	!		4860286	0					
ANR	4860757	CallExpression	m_state -> ValidUniqId ( )		4860286	1					
ANR	4860758	Callee	m_state -> ValidUniqId		4860286	0					
ANR	4860759	PtrMemberAccess	m_state -> ValidUniqId		4860286	0					
ANR	4860760	Identifier	m_state		4860286	0					
ANR	4860761	Identifier	ValidUniqId		4860286	1					
ANR	4860762	ArgumentList			4860286	1					
ANR	4860763	CompoundStatement		120:2:3433:3464	4860286	1					
ANR	4860764	IdentifierDeclStatement	const char * path = m_state -> CurPath ( ) ;	569:2:14814:14852	4860286	0	True				
ANR	4860765	IdentifierDecl	* path = m_state -> CurPath ( )		4860286	0					
ANR	4860766	IdentifierDeclType	const char *		4860286	0					
ANR	4860767	Identifier	path		4860286	1					
ANR	4860768	AssignmentExpression	* path = m_state -> CurPath ( )		4860286	2		=			
ANR	4860769	Identifier	path		4860286	0					
ANR	4860770	CallExpression	m_state -> CurPath ( )		4860286	1					
ANR	4860771	Callee	m_state -> CurPath		4860286	0					
ANR	4860772	PtrMemberAccess	m_state -> CurPath		4860286	0					
ANR	4860773	Identifier	m_state		4860286	0					
ANR	4860774	Identifier	CurPath		4860286	1					
ANR	4860775	ArgumentList			4860286	1					
ANR	4860776	IdentifierDeclStatement	MyString temp_path ;	572:2:14896:14914	4860286	1	True				
ANR	4860777	IdentifierDecl	temp_path		4860286	0					
ANR	4860778	IdentifierDeclType	MyString		4860286	0					
ANR	4860779	Identifier	temp_path		4860286	1					
ANR	4860780	IfStatement	if ( NULL == path )		4860286	2					
ANR	4860781	Condition	NULL == path	573:8:14924:14935	4860286	0	True				
ANR	4860782	EqualityExpression	NULL == path		4860286	0		==			
ANR	4860783	Identifier	NULL		4860286	0					
ANR	4860784	Identifier	path		4860286	1					
ANR	4860785	CompoundStatement		113:23:3276:3276	4860286	1					
ANR	4860786	ExpressionStatement	"m_state -> GeneratePath ( m_state -> Rotation ( ) , temp_path )"	574:3:14944:14999	4860286	0	True				
ANR	4860787	CallExpression	"m_state -> GeneratePath ( m_state -> Rotation ( ) , temp_path )"		4860286	0					
ANR	4860788	Callee	m_state -> GeneratePath		4860286	0					
ANR	4860789	PtrMemberAccess	m_state -> GeneratePath		4860286	0					
ANR	4860790	Identifier	m_state		4860286	0					
ANR	4860791	Identifier	GeneratePath		4860286	1					
ANR	4860792	ArgumentList	m_state -> Rotation ( )		4860286	1					
ANR	4860793	Argument	m_state -> Rotation ( )		4860286	0					
ANR	4860794	CallExpression	m_state -> Rotation ( )		4860286	0					
ANR	4860795	Callee	m_state -> Rotation		4860286	0					
ANR	4860796	PtrMemberAccess	m_state -> Rotation		4860286	0					
ANR	4860797	Identifier	m_state		4860286	0					
ANR	4860798	Identifier	Rotation		4860286	1					
ANR	4860799	ArgumentList			4860286	1					
ANR	4860800	Argument	temp_path		4860286	1					
ANR	4860801	Identifier	temp_path		4860286	0					
ANR	4860802	ExpressionStatement	path = temp_path . Value ( )	575:3:15004:15029	4860286	1	True				
ANR	4860803	AssignmentExpression	path = temp_path . Value ( )		4860286	0		=			
ANR	4860804	Identifier	path		4860286	0					
ANR	4860805	CallExpression	temp_path . Value ( )		4860286	1					
ANR	4860806	Callee	temp_path . Value		4860286	0					
ANR	4860807	MemberAccess	temp_path . Value		4860286	0					
ANR	4860808	Identifier	temp_path		4860286	0					
ANR	4860809	Identifier	Value		4860286	1					
ANR	4860810	ArgumentList			4860286	1					
ANR	4860811	IdentifierDeclStatement	ReadUserLog log_reader ;	579:2:15068:15092	4860286	3	True				
ANR	4860812	IdentifierDecl	log_reader		4860286	0					
ANR	4860813	IdentifierDeclType	ReadUserLog		4860286	0					
ANR	4860814	Identifier	log_reader		4860286	1					
ANR	4860815	IdentifierDeclStatement	ReadUserLogHeader header_reader ;	580:2:15096:15127	4860286	4	True				
ANR	4860816	IdentifierDecl	header_reader		4860286	0					
ANR	4860817	IdentifierDeclType	ReadUserLogHeader		4860286	0					
ANR	4860818	Identifier	header_reader		4860286	1					
ANR	4860819	IfStatement	"if ( ( path ) && ( log_reader . initialize ( path , false , false , true ) ) && ( header_reader . Read ( log_reader ) == ULOG_OK ) )"		4860286	5					
ANR	4860820	Condition	"( path ) && ( log_reader . initialize ( path , false , false , true ) ) && ( header_reader . Read ( log_reader ) == ULOG_OK )"	581:8:15137:15262	4860286	0	True				
ANR	4860821	AndExpression	"( path ) && ( log_reader . initialize ( path , false , false , true ) ) && ( header_reader . Read ( log_reader ) == ULOG_OK )"		4860286	0		&&			
ANR	4860822	Identifier	path		4860286	0					
ANR	4860823	AndExpression	"( log_reader . initialize ( path , false , false , true ) ) && ( header_reader . Read ( log_reader ) == ULOG_OK )"		4860286	1		&&			
ANR	4860824	CallExpression	"log_reader . initialize ( path , false , false , true )"		4860286	0					
ANR	4860825	Callee	log_reader . initialize		4860286	0					
ANR	4860826	MemberAccess	log_reader . initialize		4860286	0					
ANR	4860827	Identifier	log_reader		4860286	0					
ANR	4860828	Identifier	initialize		4860286	1					
ANR	4860829	ArgumentList	path		4860286	1					
ANR	4860830	Argument	path		4860286	0					
ANR	4860831	Identifier	path		4860286	0					
ANR	4860832	Argument	false		4860286	1					
ANR	4860833	Identifier	false		4860286	0					
ANR	4860834	Argument	false		4860286	2					
ANR	4860835	Identifier	false		4860286	0					
ANR	4860836	Argument	true		4860286	3					
ANR	4860837	Identifier	true		4860286	0					
ANR	4860838	EqualityExpression	header_reader . Read ( log_reader ) == ULOG_OK		4860286	1		==			
ANR	4860839	CallExpression	header_reader . Read ( log_reader )		4860286	0					
ANR	4860840	Callee	header_reader . Read		4860286	0					
ANR	4860841	MemberAccess	header_reader . Read		4860286	0					
ANR	4860842	Identifier	header_reader		4860286	0					
ANR	4860843	Identifier	Read		4860286	1					
ANR	4860844	ArgumentList	log_reader		4860286	1					
ANR	4860845	Argument	log_reader		4860286	0					
ANR	4860846	Identifier	log_reader		4860286	0					
ANR	4860847	Identifier	ULOG_OK		4860286	1					
ANR	4860848	CompoundStatement		123:56:3604:3604	4860286	1					
ANR	4860849	ExpressionStatement	m_state -> UniqId ( header_reader . getId ( ) )	584:3:15272:15312	4860286	0	True				
ANR	4860850	CallExpression	m_state -> UniqId ( header_reader . getId ( ) )		4860286	0					
ANR	4860851	Callee	m_state -> UniqId		4860286	0					
ANR	4860852	PtrMemberAccess	m_state -> UniqId		4860286	0					
ANR	4860853	Identifier	m_state		4860286	0					
ANR	4860854	Identifier	UniqId		4860286	1					
ANR	4860855	ArgumentList	header_reader . getId ( )		4860286	1					
ANR	4860856	Argument	header_reader . getId ( )		4860286	0					
ANR	4860857	CallExpression	header_reader . getId ( )		4860286	0					
ANR	4860858	Callee	header_reader . getId		4860286	0					
ANR	4860859	MemberAccess	header_reader . getId		4860286	0					
ANR	4860860	Identifier	header_reader		4860286	0					
ANR	4860861	Identifier	getId		4860286	1					
ANR	4860862	ArgumentList			4860286	1					
ANR	4860863	ExpressionStatement	m_state -> Sequence ( header_reader . getSequence ( ) )	585:3:15317:15365	4860286	1	True				
ANR	4860864	CallExpression	m_state -> Sequence ( header_reader . getSequence ( ) )		4860286	0					
ANR	4860865	Callee	m_state -> Sequence		4860286	0					
ANR	4860866	PtrMemberAccess	m_state -> Sequence		4860286	0					
ANR	4860867	Identifier	m_state		4860286	0					
ANR	4860868	Identifier	Sequence		4860286	1					
ANR	4860869	ArgumentList	header_reader . getSequence ( )		4860286	1					
ANR	4860870	Argument	header_reader . getSequence ( )		4860286	0					
ANR	4860871	CallExpression	header_reader . getSequence ( )		4860286	0					
ANR	4860872	Callee	header_reader . getSequence		4860286	0					
ANR	4860873	MemberAccess	header_reader . getSequence		4860286	0					
ANR	4860874	Identifier	header_reader		4860286	0					
ANR	4860875	Identifier	getSequence		4860286	1					
ANR	4860876	ArgumentList			4860286	1					
ANR	4860877	ExpressionStatement	m_state -> LogPosition ( header_reader . getFileOffset ( ) )	586:3:15370:15423	4860286	2	True				
ANR	4860878	CallExpression	m_state -> LogPosition ( header_reader . getFileOffset ( ) )		4860286	0					
ANR	4860879	Callee	m_state -> LogPosition		4860286	0					
ANR	4860880	PtrMemberAccess	m_state -> LogPosition		4860286	0					
ANR	4860881	Identifier	m_state		4860286	0					
ANR	4860882	Identifier	LogPosition		4860286	1					
ANR	4860883	ArgumentList	header_reader . getFileOffset ( )		4860286	1					
ANR	4860884	Argument	header_reader . getFileOffset ( )		4860286	0					
ANR	4860885	CallExpression	header_reader . getFileOffset ( )		4860286	0					
ANR	4860886	Callee	header_reader . getFileOffset		4860286	0					
ANR	4860887	MemberAccess	header_reader . getFileOffset		4860286	0					
ANR	4860888	Identifier	header_reader		4860286	0					
ANR	4860889	Identifier	getFileOffset		4860286	1					
ANR	4860890	ArgumentList			4860286	1					
ANR	4860891	IfStatement	if ( header_reader . getEventOffset ( ) )		4860286	3					
ANR	4860892	Condition	header_reader . getEventOffset ( )	587:8:15433:15462	4860286	0	True				
ANR	4860893	CallExpression	header_reader . getEventOffset ( )		4860286	0					
ANR	4860894	Callee	header_reader . getEventOffset		4860286	0					
ANR	4860895	MemberAccess	header_reader . getEventOffset		4860286	0					
ANR	4860896	Identifier	header_reader		4860286	0					
ANR	4860897	Identifier	getEventOffset		4860286	1					
ANR	4860898	ArgumentList			4860286	1					
ANR	4860899	CompoundStatement		127:41:3803:3803	4860286	1					
ANR	4860900	ExpressionStatement	m_state -> LogRecordNo ( header_reader . getEventOffset ( ) )	588:4:15472:15526	4860286	0	True				
ANR	4860901	CallExpression	m_state -> LogRecordNo ( header_reader . getEventOffset ( ) )		4860286	0					
ANR	4860902	Callee	m_state -> LogRecordNo		4860286	0					
ANR	4860903	PtrMemberAccess	m_state -> LogRecordNo		4860286	0					
ANR	4860904	Identifier	m_state		4860286	0					
ANR	4860905	Identifier	LogRecordNo		4860286	1					
ANR	4860906	ArgumentList	header_reader . getEventOffset ( )		4860286	1					
ANR	4860907	Argument	header_reader . getEventOffset ( )		4860286	0					
ANR	4860908	CallExpression	header_reader . getEventOffset ( )		4860286	0					
ANR	4860909	Callee	header_reader . getEventOffset		4860286	0					
ANR	4860910	MemberAccess	header_reader . getEventOffset		4860286	0					
ANR	4860911	Identifier	header_reader		4860286	0					
ANR	4860912	Identifier	getEventOffset		4860286	1					
ANR	4860913	ArgumentList			4860286	1					
ANR	4860914	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""%s: Set UniqId to '%s', sequence to %d\\n"" , m_state -> CurPath ( ) , header_reader . getId ( ) . Value ( ) , header_reader . getSequence ( ) )"	590:3:15536:15706	4860286	4	True				
ANR	4860915	CallExpression	"dprintf ( D_FULLDEBUG , ""%s: Set UniqId to '%s', sequence to %d\\n"" , m_state -> CurPath ( ) , header_reader . getId ( ) . Value ( ) , header_reader . getSequence ( ) )"		4860286	0					
ANR	4860916	Callee	dprintf		4860286	0					
ANR	4860917	Identifier	dprintf		4860286	0					
ANR	4860918	ArgumentList	D_FULLDEBUG		4860286	1					
ANR	4860919	Argument	D_FULLDEBUG		4860286	0					
ANR	4860920	Identifier	D_FULLDEBUG		4860286	0					
ANR	4860921	Argument	"""%s: Set UniqId to '%s', sequence to %d\\n"""		4860286	1					
ANR	4860922	PrimaryExpression	"""%s: Set UniqId to '%s', sequence to %d\\n"""		4860286	0					
ANR	4860923	Argument	m_state -> CurPath ( )		4860286	2					
ANR	4860924	CallExpression	m_state -> CurPath ( )		4860286	0					
ANR	4860925	Callee	m_state -> CurPath		4860286	0					
ANR	4860926	PtrMemberAccess	m_state -> CurPath		4860286	0					
ANR	4860927	Identifier	m_state		4860286	0					
ANR	4860928	Identifier	CurPath		4860286	1					
ANR	4860929	ArgumentList			4860286	1					
ANR	4860930	Argument	header_reader . getId ( ) . Value ( )		4860286	3					
ANR	4860931	CallExpression	header_reader . getId ( ) . Value ( )		4860286	0					
ANR	4860932	Callee	header_reader . getId ( ) . Value		4860286	0					
ANR	4860933	MemberAccess	header_reader . getId ( ) . Value		4860286	0					
ANR	4860934	CallExpression	header_reader . getId ( )		4860286	0					
ANR	4860935	Callee	header_reader . getId		4860286	0					
ANR	4860936	MemberAccess	header_reader . getId		4860286	0					
ANR	4860937	Identifier	header_reader		4860286	0					
ANR	4860938	Identifier	getId		4860286	1					
ANR	4860939	ArgumentList			4860286	1					
ANR	4860940	Identifier	Value		4860286	1					
ANR	4860941	ArgumentList			4860286	1					
ANR	4860942	Argument	header_reader . getSequence ( )		4860286	4					
ANR	4860943	CallExpression	header_reader . getSequence ( )		4860286	0					
ANR	4860944	Callee	header_reader . getSequence		4860286	0					
ANR	4860945	MemberAccess	header_reader . getSequence		4860286	0					
ANR	4860946	Identifier	header_reader		4860286	0					
ANR	4860947	Identifier	getSequence		4860286	1					
ANR	4860948	ArgumentList			4860286	1					
ANR	4860949	ElseStatement	else		4860286	0					
ANR	4860950	CompoundStatement		138:7:4090:4090	4860286	0					
ANR	4860951	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""%s: Failed to read file header\\n"" , m_state -> CurPath ( ) )"	599:3:15758:15842	4860286	0	True				
ANR	4860952	CallExpression	"dprintf ( D_FULLDEBUG , ""%s: Failed to read file header\\n"" , m_state -> CurPath ( ) )"		4860286	0					
ANR	4860953	Callee	dprintf		4860286	0					
ANR	4860954	Identifier	dprintf		4860286	0					
ANR	4860955	ArgumentList	D_FULLDEBUG		4860286	1					
ANR	4860956	Argument	D_FULLDEBUG		4860286	0					
ANR	4860957	Identifier	D_FULLDEBUG		4860286	0					
ANR	4860958	Argument	"""%s: Failed to read file header\\n"""		4860286	1					
ANR	4860959	PrimaryExpression	"""%s: Failed to read file header\\n"""		4860286	0					
ANR	4860960	Argument	m_state -> CurPath ( )		4860286	2					
ANR	4860961	CallExpression	m_state -> CurPath ( )		4860286	0					
ANR	4860962	Callee	m_state -> CurPath		4860286	0					
ANR	4860963	PtrMemberAccess	m_state -> CurPath		4860286	0					
ANR	4860964	Identifier	m_state		4860286	0					
ANR	4860965	Identifier	CurPath		4860286	1					
ANR	4860966	ArgumentList			4860286	1					
ANR	4860967	ReturnStatement	return ULOG_OK ;	604:1:15853:15867	4860286	48	True				
ANR	4860968	Identifier	ULOG_OK		4860286	0					
ANR	4860969	ReturnType	ULogEventOutcome		4860286	1					
ANR	4860970	Identifier	ReadUserLog :: OpenLogFile		4860286	2					
ANR	4860971	ParameterList	"bool do_seek , bool read_header"		4860286	3					
ANR	4860972	Parameter	bool do_seek	460:26:11629:11640	4860286	0	True				
ANR	4860973	ParameterType	bool		4860286	0					
ANR	4860974	Identifier	do_seek		4860286	1					
ANR	4860975	Parameter	bool read_header	460:40:11643:11658	4860286	1	True				
ANR	4860976	ParameterType	bool		4860286	0					
ANR	4860977	Identifier	read_header		4860286	1					
ANR	4860978	CFGEntryNode	ENTRY		4860286		True				
ANR	4860979	CFGExitNode	EXIT		4860286		True				
ANR	4860980	Symbol	m_lock -> initSucceeded		4860286						
ANR	4860981	Symbol	m_read_header		4860286						
ANR	4860982	Symbol	fseek		4860286						
ANR	4860983	Symbol	read_header		4860286						
ANR	4860984	Symbol	m_state		4860286						
ANR	4860985	Symbol	path		4860286						
ANR	4860986	Symbol	header_reader		4860286						
ANR	4860987	Symbol	m_read_only		4860286						
ANR	4860988	Symbol	errno		4860286						
ANR	4860989	Symbol	NULL		4860286						
ANR	4860990	Symbol	header_reader . getId ( ) . Value		4860286						
ANR	4860991	Symbol	m_lock_rot		4860286						
ANR	4860992	Symbol	D_FULLDEBUG		4860286						
ANR	4860993	Symbol	param_boolean		4860286						
ANR	4860994	Symbol	strerror		4860286						
ANR	4860995	Symbol	true		4860286						
ANR	4860996	Symbol	header_reader . getId		4860286						
ANR	4860997	Symbol	safe_open_wrapper_follow		4860286						
ANR	4860998	Symbol	m_state -> IsLogType		4860286						
ANR	4860999	Symbol	* m_state		4860286						
ANR	4861000	Symbol	ULOG_RD_ERROR		4860286						
ANR	4861001	Symbol	fdopen		4860286						
ANR	4861002	Symbol	is_lock_current		4860286						
ANR	4861003	Symbol	m_state -> Rotation		4860286						
ANR	4861004	Symbol	m_lock		4860286						
ANR	4861005	Symbol	O_RDWR		4860286						
ANR	4861006	Symbol	m_state -> CurPath		4860286						
ANR	4861007	Symbol	* m_lock		4860286						
ANR	4861008	Symbol	header_reader . Read		4860286						
ANR	4861009	Symbol	m_state -> ValidUniqId		4860286						
ANR	4861010	Symbol	header_reader . getEventOffset		4860286						
ANR	4861011	Symbol	header_reader . getFileOffset		4860286						
ANR	4861012	Symbol	temp_path		4860286						
ANR	4861013	Symbol	SEEK_SET		4860286						
ANR	4861014	Symbol	m_fd		4860286						
ANR	4861015	Symbol	do_seek		4860286						
ANR	4861016	Symbol	m_lock_enable		4860286						
ANR	4861017	Symbol	determineLogType		4860286						
ANR	4861018	Symbol	m_state -> Offset		4860286						
ANR	4861019	Symbol	D_ALWAYS		4860286						
ANR	4861020	Symbol	false		4860286						
ANR	4861021	Symbol	log_reader		4860286						
ANR	4861022	Symbol	m_fp		4860286						
ANR	4861023	Symbol	log_reader . initialize		4860286						
ANR	4861024	Symbol	ULOG_OK		4860286						
ANR	4861025	Symbol	header_reader . getSequence		4860286						
ANR	4861026	Symbol	O_RDONLY		4860286						
ANR	4861027	Symbol	new_locking		4860286						
ANR	4861028	Symbol	temp_path . Value		4860286						
ANR	4861029	Symbol	ReadUserLogState :: LOG_TYPE_UNKNOWN		4860286						
ANR	4861030	Function	ReadUserLog :: determineLogType	607:0:15872:18003							
ANR	4861031	FunctionDef	ReadUserLog :: determineLogType ()		4861030	0					
ANR	4861032	CompoundStatement		609:0:15915:18003	4861030	0					
ANR	4861033	ExpressionStatement	Lock ( false )	616:1:16180:16193	4861030	0	True				
ANR	4861034	CallExpression	Lock ( false )		4861030	0					
ANR	4861035	Callee	Lock		4861030	0					
ANR	4861036	Identifier	Lock		4861030	0					
ANR	4861037	ArgumentList	false		4861030	1					
ANR	4861038	Argument	false		4861030	0					
ANR	4861039	Identifier	false		4861030	0					
ANR	4861040	IdentifierDeclStatement	long filepos = ftell ( m_fp ) ;	619:1:16255:16283	4861030	1	True				
ANR	4861041	IdentifierDecl	filepos = ftell ( m_fp )		4861030	0					
ANR	4861042	IdentifierDeclType	long		4861030	0					
ANR	4861043	Identifier	filepos		4861030	1					
ANR	4861044	AssignmentExpression	filepos = ftell ( m_fp )		4861030	2		=			
ANR	4861045	Identifier	filepos		4861030	0					
ANR	4861046	CallExpression	ftell ( m_fp )		4861030	1					
ANR	4861047	Callee	ftell		4861030	0					
ANR	4861048	Identifier	ftell		4861030	0					
ANR	4861049	ArgumentList	m_fp		4861030	1					
ANR	4861050	Argument	m_fp		4861030	0					
ANR	4861051	Identifier	m_fp		4861030	0					
ANR	4861052	IfStatement	if ( filepos < 0 )		4861030	2					
ANR	4861053	Condition	filepos < 0	620:5:16290:16300	4861030	0	True				
ANR	4861054	RelationalExpression	filepos < 0		4861030	0		<			
ANR	4861055	Identifier	filepos		4861030	0					
ANR	4861056	PrimaryExpression	0		4861030	1					
ANR	4861057	CompoundStatement		12:19:388:388	4861030	1					
ANR	4861058	ExpressionStatement	"dprintf ( D_ALWAYS , ""ftell failed in ReadUserLog::determineLogType\\n"" )"	621:2:16308:16376	4861030	0	True				
ANR	4861059	CallExpression	"dprintf ( D_ALWAYS , ""ftell failed in ReadUserLog::determineLogType\\n"" )"		4861030	0					
ANR	4861060	Callee	dprintf		4861030	0					
ANR	4861061	Identifier	dprintf		4861030	0					
ANR	4861062	ArgumentList	D_ALWAYS		4861030	1					
ANR	4861063	Argument	D_ALWAYS		4861030	0					
ANR	4861064	Identifier	D_ALWAYS		4861030	0					
ANR	4861065	Argument	"""ftell failed in ReadUserLog::determineLogType\\n"""		4861030	1					
ANR	4861066	PrimaryExpression	"""ftell failed in ReadUserLog::determineLogType\\n"""		4861030	0					
ANR	4861067	ExpressionStatement	Unlock ( false )	622:2:16380:16395	4861030	1	True				
ANR	4861068	CallExpression	Unlock ( false )		4861030	0					
ANR	4861069	Callee	Unlock		4861030	0					
ANR	4861070	Identifier	Unlock		4861030	0					
ANR	4861071	ArgumentList	false		4861030	1					
ANR	4861072	Argument	false		4861030	0					
ANR	4861073	Identifier	false		4861030	0					
ANR	4861074	ExpressionStatement	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"	623:2:16399:16438	4861030	2	True				
ANR	4861075	CallExpression	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"		4861030	0					
ANR	4861076	Callee	Error		4861030	0					
ANR	4861077	Identifier	Error		4861030	0					
ANR	4861078	ArgumentList	LOG_ERROR_FILE_OTHER		4861030	1					
ANR	4861079	Argument	LOG_ERROR_FILE_OTHER		4861030	0					
ANR	4861080	Identifier	LOG_ERROR_FILE_OTHER		4861030	0					
ANR	4861081	Argument	__LINE__		4861030	1					
ANR	4861082	Identifier	__LINE__		4861030	0					
ANR	4861083	ReturnStatement	return false ;	624:2:16442:16454	4861030	3	True				
ANR	4861084	Identifier	false		4861030	0					
ANR	4861085	ExpressionStatement	m_state -> Offset ( filepos )	626:1:16460:16486	4861030	3	True				
ANR	4861086	CallExpression	m_state -> Offset ( filepos )		4861030	0					
ANR	4861087	Callee	m_state -> Offset		4861030	0					
ANR	4861088	PtrMemberAccess	m_state -> Offset		4861030	0					
ANR	4861089	Identifier	m_state		4861030	0					
ANR	4861090	Identifier	Offset		4861030	1					
ANR	4861091	ArgumentList	filepos		4861030	1					
ANR	4861092	Argument	filepos		4861030	0					
ANR	4861093	Identifier	filepos		4861030	0					
ANR	4861094	IdentifierDeclStatement	char afterangle ;	628:1:16490:16505	4861030	4	True				
ANR	4861095	IdentifierDecl	afterangle		4861030	0					
ANR	4861096	IdentifierDeclType	char		4861030	0					
ANR	4861097	Identifier	afterangle		4861030	1					
ANR	4861098	IfStatement	"if ( fseek ( m_fp , 0 , SEEK_SET ) < 0 )"		4861030	5					
ANR	4861099	Condition	"fseek ( m_fp , 0 , SEEK_SET ) < 0"	629:6:16513:16542	4861030	0	True				
ANR	4861100	RelationalExpression	"fseek ( m_fp , 0 , SEEK_SET ) < 0"		4861030	0		<			
ANR	4861101	CallExpression	"fseek ( m_fp , 0 , SEEK_SET )"		4861030	0					
ANR	4861102	Callee	fseek		4861030	0					
ANR	4861103	Identifier	fseek		4861030	0					
ANR	4861104	ArgumentList	m_fp		4861030	1					
ANR	4861105	Argument	m_fp		4861030	0					
ANR	4861106	Identifier	m_fp		4861030	0					
ANR	4861107	Argument	0		4861030	1					
ANR	4861108	PrimaryExpression	0		4861030	0					
ANR	4861109	Argument	SEEK_SET		4861030	2					
ANR	4861110	Identifier	SEEK_SET		4861030	0					
ANR	4861111	PrimaryExpression	0		4861030	1					
ANR	4861112	CompoundStatement		21:39:630:630	4861030	1					
ANR	4861113	ExpressionStatement	"dprintf ( D_ALWAYS , ""fseek(0) failed in ReadUserLog::determineLogType\\n"" )"	630:2:16550:16625	4861030	0	True				
ANR	4861114	CallExpression	"dprintf ( D_ALWAYS , ""fseek(0) failed in ReadUserLog::determineLogType\\n"" )"		4861030	0					
ANR	4861115	Callee	dprintf		4861030	0					
ANR	4861116	Identifier	dprintf		4861030	0					
ANR	4861117	ArgumentList	D_ALWAYS		4861030	1					
ANR	4861118	Argument	D_ALWAYS		4861030	0					
ANR	4861119	Identifier	D_ALWAYS		4861030	0					
ANR	4861120	Argument	"""fseek(0) failed in ReadUserLog::determineLogType\\n"""		4861030	1					
ANR	4861121	PrimaryExpression	"""fseek(0) failed in ReadUserLog::determineLogType\\n"""		4861030	0					
ANR	4861122	ExpressionStatement	Unlock ( false )	632:2:16629:16644	4861030	1	True				
ANR	4861123	CallExpression	Unlock ( false )		4861030	0					
ANR	4861124	Callee	Unlock		4861030	0					
ANR	4861125	Identifier	Unlock		4861030	0					
ANR	4861126	ArgumentList	false		4861030	1					
ANR	4861127	Argument	false		4861030	0					
ANR	4861128	Identifier	false		4861030	0					
ANR	4861129	ExpressionStatement	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"	633:2:16648:16687	4861030	2	True				
ANR	4861130	CallExpression	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"		4861030	0					
ANR	4861131	Callee	Error		4861030	0					
ANR	4861132	Identifier	Error		4861030	0					
ANR	4861133	ArgumentList	LOG_ERROR_FILE_OTHER		4861030	1					
ANR	4861134	Argument	LOG_ERROR_FILE_OTHER		4861030	0					
ANR	4861135	Identifier	LOG_ERROR_FILE_OTHER		4861030	0					
ANR	4861136	Argument	__LINE__		4861030	1					
ANR	4861137	Identifier	__LINE__		4861030	0					
ANR	4861138	ReturnStatement	return false ;	634:2:16691:16703	4861030	3	True				
ANR	4861139	Identifier	false		4861030	0					
ANR	4861140	IdentifierDeclStatement	"int scanf_result = fscanf ( m_fp , "" <%c"" , & afterangle ) ;"	636:1:16709:16761	4861030	6	True				
ANR	4861141	IdentifierDecl	"scanf_result = fscanf ( m_fp , "" <%c"" , & afterangle )"		4861030	0					
ANR	4861142	IdentifierDeclType	int		4861030	0					
ANR	4861143	Identifier	scanf_result		4861030	1					
ANR	4861144	AssignmentExpression	"scanf_result = fscanf ( m_fp , "" <%c"" , & afterangle )"		4861030	2		=			
ANR	4861145	Identifier	scanf_result		4861030	0					
ANR	4861146	CallExpression	"fscanf ( m_fp , "" <%c"" , & afterangle )"		4861030	1					
ANR	4861147	Callee	fscanf		4861030	0					
ANR	4861148	Identifier	fscanf		4861030	0					
ANR	4861149	ArgumentList	m_fp		4861030	1					
ANR	4861150	Argument	m_fp		4861030	0					
ANR	4861151	Identifier	m_fp		4861030	0					
ANR	4861152	Argument	""" <%c"""		4861030	1					
ANR	4861153	PrimaryExpression	""" <%c"""		4861030	0					
ANR	4861154	Argument	& afterangle		4861030	2					
ANR	4861155	UnaryOperationExpression	& afterangle		4861030	0					
ANR	4861156	UnaryOperator	&		4861030	0					
ANR	4861157	Identifier	afterangle		4861030	1					
ANR	4861158	IfStatement	if ( scanf_result > 0 )		4861030	7					
ANR	4861159	Condition	scanf_result > 0	638:5:16769:16784	4861030	0	True				
ANR	4861160	RelationalExpression	scanf_result > 0		4861030	0		>			
ANR	4861161	Identifier	scanf_result		4861030	0					
ANR	4861162	PrimaryExpression	0		4861030	1					
ANR	4861163	CompoundStatement		30:24:872:872	4861030	1					
ANR	4861164	ExpressionStatement	m_state -> LogType ( ReadUserLogState :: LOG_TYPE_XML )	639:2:16792:16842	4861030	0	True				
ANR	4861165	CallExpression	m_state -> LogType ( ReadUserLogState :: LOG_TYPE_XML )		4861030	0					
ANR	4861166	Callee	m_state -> LogType		4861030	0					
ANR	4861167	PtrMemberAccess	m_state -> LogType		4861030	0					
ANR	4861168	Identifier	m_state		4861030	0					
ANR	4861169	Identifier	LogType		4861030	1					
ANR	4861170	ArgumentList	ReadUserLogState :: LOG_TYPE_XML		4861030	1					
ANR	4861171	Argument	ReadUserLogState :: LOG_TYPE_XML		4861030	0					
ANR	4861172	Identifier	ReadUserLogState :: LOG_TYPE_XML		4861030	0					
ANR	4861173	IfStatement	if ( filepos == 0 )		4861030	1					
ANR	4861174	Condition	filepos == 0	642:7:16908:16919	4861030	0	True				
ANR	4861175	EqualityExpression	filepos == 0		4861030	0		==			
ANR	4861176	Identifier	filepos		4861030	0					
ANR	4861177	PrimaryExpression	0		4861030	1					
ANR	4861178	CompoundStatement		34:22:1007:1007	4861030	1					
ANR	4861179	IfStatement	"if ( ! skipXMLHeader ( afterangle , filepos ) )"		4861030	0					
ANR	4861180	Condition	"! skipXMLHeader ( afterangle , filepos )"	643:7:16932:16966	4861030	0	True				
ANR	4861181	UnaryOperationExpression	"! skipXMLHeader ( afterangle , filepos )"		4861030	0					
ANR	4861182	UnaryOperator	!		4861030	0					
ANR	4861183	CallExpression	"skipXMLHeader ( afterangle , filepos )"		4861030	1					
ANR	4861184	Callee	skipXMLHeader		4861030	0					
ANR	4861185	Identifier	skipXMLHeader		4861030	0					
ANR	4861186	ArgumentList	afterangle		4861030	1					
ANR	4861187	Argument	afterangle		4861030	0					
ANR	4861188	Identifier	afterangle		4861030	0					
ANR	4861189	Argument	filepos		4861030	1					
ANR	4861190	Identifier	filepos		4861030	0					
ANR	4861191	CompoundStatement		35:45:1054:1054	4861030	1					
ANR	4861192	ExpressionStatement	m_state -> LogType ( ReadUserLogState :: LOG_TYPE_UNKNOWN )	644:4:16976:17030	4861030	0	True				
ANR	4861193	CallExpression	m_state -> LogType ( ReadUserLogState :: LOG_TYPE_UNKNOWN )		4861030	0					
ANR	4861194	Callee	m_state -> LogType		4861030	0					
ANR	4861195	PtrMemberAccess	m_state -> LogType		4861030	0					
ANR	4861196	Identifier	m_state		4861030	0					
ANR	4861197	Identifier	LogType		4861030	1					
ANR	4861198	ArgumentList	ReadUserLogState :: LOG_TYPE_UNKNOWN		4861030	1					
ANR	4861199	Argument	ReadUserLogState :: LOG_TYPE_UNKNOWN		4861030	0					
ANR	4861200	Identifier	ReadUserLogState :: LOG_TYPE_UNKNOWN		4861030	0					
ANR	4861201	ExpressionStatement	Unlock ( false )	645:4:17036:17051	4861030	1	True				
ANR	4861202	CallExpression	Unlock ( false )		4861030	0					
ANR	4861203	Callee	Unlock		4861030	0					
ANR	4861204	Identifier	Unlock		4861030	0					
ANR	4861205	ArgumentList	false		4861030	1					
ANR	4861206	Argument	false		4861030	0					
ANR	4861207	Identifier	false		4861030	0					
ANR	4861208	ExpressionStatement	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"	646:4:17057:17096	4861030	2	True				
ANR	4861209	CallExpression	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"		4861030	0					
ANR	4861210	Callee	Error		4861030	0					
ANR	4861211	Identifier	Error		4861030	0					
ANR	4861212	ArgumentList	LOG_ERROR_FILE_OTHER		4861030	1					
ANR	4861213	Argument	LOG_ERROR_FILE_OTHER		4861030	0					
ANR	4861214	Identifier	LOG_ERROR_FILE_OTHER		4861030	0					
ANR	4861215	Argument	__LINE__		4861030	1					
ANR	4861216	Identifier	__LINE__		4861030	0					
ANR	4861217	ReturnStatement	return false ;	647:4:17102:17114	4861030	3	True				
ANR	4861218	Identifier	false		4861030	0					
ANR	4861219	ExpressionStatement	Unlock ( false )	652:2:17164:17179	4861030	2	True				
ANR	4861220	CallExpression	Unlock ( false )		4861030	0					
ANR	4861221	Callee	Unlock		4861030	0					
ANR	4861222	Identifier	Unlock		4861030	0					
ANR	4861223	ArgumentList	false		4861030	1					
ANR	4861224	Argument	false		4861030	0					
ANR	4861225	Identifier	false		4861030	0					
ANR	4861226	ReturnStatement	return true ;	653:2:17183:17194	4861030	3	True				
ANR	4861227	Identifier	true		4861030	0					
ANR	4861228	IdentifierDeclStatement	int nothing ;	658:1:17327:17338	4861030	8	True				
ANR	4861229	IdentifierDecl	nothing		4861030	0					
ANR	4861230	IdentifierDeclType	int		4861030	0					
ANR	4861231	Identifier	nothing		4861030	1					
ANR	4861232	IfStatement	"if ( fseek ( m_fp , 0 , SEEK_SET ) )"		4861030	9					
ANR	4861233	Condition	"fseek ( m_fp , 0 , SEEK_SET )"	659:5:17345:17369	4861030	0	True				
ANR	4861234	CallExpression	"fseek ( m_fp , 0 , SEEK_SET )"		4861030	0					
ANR	4861235	Callee	fseek		4861030	0					
ANR	4861236	Identifier	fseek		4861030	0					
ANR	4861237	ArgumentList	m_fp		4861030	1					
ANR	4861238	Argument	m_fp		4861030	0					
ANR	4861239	Identifier	m_fp		4861030	0					
ANR	4861240	Argument	0		4861030	1					
ANR	4861241	PrimaryExpression	0		4861030	0					
ANR	4861242	Argument	SEEK_SET		4861030	2					
ANR	4861243	Identifier	SEEK_SET		4861030	0					
ANR	4861244	CompoundStatement		51:33:1457:1457	4861030	1					
ANR	4861245	ExpressionStatement	"dprintf ( D_ALWAYS , ""fseek failed in ReadUserLog::determineLogType"" )"	660:2:17377:17447	4861030	0	True				
ANR	4861246	CallExpression	"dprintf ( D_ALWAYS , ""fseek failed in ReadUserLog::determineLogType"" )"		4861030	0					
ANR	4861247	Callee	dprintf		4861030	0					
ANR	4861248	Identifier	dprintf		4861030	0					
ANR	4861249	ArgumentList	D_ALWAYS		4861030	1					
ANR	4861250	Argument	D_ALWAYS		4861030	0					
ANR	4861251	Identifier	D_ALWAYS		4861030	0					
ANR	4861252	Argument	"""fseek failed in ReadUserLog::determineLogType"""		4861030	1					
ANR	4861253	PrimaryExpression	"""fseek failed in ReadUserLog::determineLogType"""		4861030	0					
ANR	4861254	ExpressionStatement	Unlock ( false )	662:2:17451:17466	4861030	1	True				
ANR	4861255	CallExpression	Unlock ( false )		4861030	0					
ANR	4861256	Callee	Unlock		4861030	0					
ANR	4861257	Identifier	Unlock		4861030	0					
ANR	4861258	ArgumentList	false		4861030	1					
ANR	4861259	Argument	false		4861030	0					
ANR	4861260	Identifier	false		4861030	0					
ANR	4861261	ExpressionStatement	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"	663:2:17470:17509	4861030	2	True				
ANR	4861262	CallExpression	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"		4861030	0					
ANR	4861263	Callee	Error		4861030	0					
ANR	4861264	Identifier	Error		4861030	0					
ANR	4861265	ArgumentList	LOG_ERROR_FILE_OTHER		4861030	1					
ANR	4861266	Argument	LOG_ERROR_FILE_OTHER		4861030	0					
ANR	4861267	Identifier	LOG_ERROR_FILE_OTHER		4861030	0					
ANR	4861268	Argument	__LINE__		4861030	1					
ANR	4861269	Identifier	__LINE__		4861030	0					
ANR	4861270	ReturnStatement	return false ;	664:2:17513:17525	4861030	3	True				
ANR	4861271	Identifier	false		4861030	0					
ANR	4861272	IfStatement	"if ( fscanf ( m_fp , "" %d"" , & nothing ) > 0 )"		4861030	10					
ANR	4861273	Condition	"fscanf ( m_fp , "" %d"" , & nothing ) > 0"	666:5:17535:17569	4861030	0	True				
ANR	4861274	RelationalExpression	"fscanf ( m_fp , "" %d"" , & nothing ) > 0"		4861030	0		>			
ANR	4861275	CallExpression	"fscanf ( m_fp , "" %d"" , & nothing )"		4861030	0					
ANR	4861276	Callee	fscanf		4861030	0					
ANR	4861277	Identifier	fscanf		4861030	0					
ANR	4861278	ArgumentList	m_fp		4861030	1					
ANR	4861279	Argument	m_fp		4861030	0					
ANR	4861280	Identifier	m_fp		4861030	0					
ANR	4861281	Argument	""" %d"""		4861030	1					
ANR	4861282	PrimaryExpression	""" %d"""		4861030	0					
ANR	4861283	Argument	& nothing		4861030	2					
ANR	4861284	UnaryOperationExpression	& nothing		4861030	0					
ANR	4861285	UnaryOperator	&		4861030	0					
ANR	4861286	Identifier	nothing		4861030	1					
ANR	4861287	PrimaryExpression	0		4861030	1					
ANR	4861288	CompoundStatement		58:43:1657:1657	4861030	1					
ANR	4861289	ExpressionStatement	setIsOldLog ( true )	667:2:17577:17594	4861030	0	True				
ANR	4861290	CallExpression	setIsOldLog ( true )		4861030	0					
ANR	4861291	Callee	setIsOldLog		4861030	0					
ANR	4861292	Identifier	setIsOldLog		4861030	0					
ANR	4861293	ArgumentList	true		4861030	1					
ANR	4861294	Argument	true		4861030	0					
ANR	4861295	Identifier	true		4861030	0					
ANR	4861296	ElseStatement	else		4861030	0					
ANR	4861297	CompoundStatement		61:6:1689:1689	4861030	0					
ANR	4861298	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Error, apparently invalid user log file\\n"" )"	671:2:17642:17707	4861030	0	True				
ANR	4861299	CallExpression	"dprintf ( D_FULLDEBUG , ""Error, apparently invalid user log file\\n"" )"		4861030	0					
ANR	4861300	Callee	dprintf		4861030	0					
ANR	4861301	Identifier	dprintf		4861030	0					
ANR	4861302	ArgumentList	D_FULLDEBUG		4861030	1					
ANR	4861303	Argument	D_FULLDEBUG		4861030	0					
ANR	4861304	Identifier	D_FULLDEBUG		4861030	0					
ANR	4861305	Argument	"""Error, apparently invalid user log file\\n"""		4861030	1					
ANR	4861306	PrimaryExpression	"""Error, apparently invalid user log file\\n"""		4861030	0					
ANR	4861307	ExpressionStatement	m_state -> LogType ( ReadUserLogState :: LOG_TYPE_UNKNOWN )	672:2:17711:17765	4861030	1	True				
ANR	4861308	CallExpression	m_state -> LogType ( ReadUserLogState :: LOG_TYPE_UNKNOWN )		4861030	0					
ANR	4861309	Callee	m_state -> LogType		4861030	0					
ANR	4861310	PtrMemberAccess	m_state -> LogType		4861030	0					
ANR	4861311	Identifier	m_state		4861030	0					
ANR	4861312	Identifier	LogType		4861030	1					
ANR	4861313	ArgumentList	ReadUserLogState :: LOG_TYPE_UNKNOWN		4861030	1					
ANR	4861314	Argument	ReadUserLogState :: LOG_TYPE_UNKNOWN		4861030	0					
ANR	4861315	Identifier	ReadUserLogState :: LOG_TYPE_UNKNOWN		4861030	0					
ANR	4861316	IfStatement	"if ( fseek ( m_fp , filepos , SEEK_SET ) )"		4861030	11					
ANR	4861317	Condition	"fseek ( m_fp , filepos , SEEK_SET )"	675:5:17776:17807	4861030	0	True				
ANR	4861318	CallExpression	"fseek ( m_fp , filepos , SEEK_SET )"		4861030	0					
ANR	4861319	Callee	fseek		4861030	0					
ANR	4861320	Identifier	fseek		4861030	0					
ANR	4861321	ArgumentList	m_fp		4861030	1					
ANR	4861322	Argument	m_fp		4861030	0					
ANR	4861323	Identifier	m_fp		4861030	0					
ANR	4861324	Argument	filepos		4861030	1					
ANR	4861325	Identifier	filepos		4861030	0					
ANR	4861326	Argument	SEEK_SET		4861030	2					
ANR	4861327	Identifier	SEEK_SET		4861030	0					
ANR	4861328	CompoundStatement		67:40:1895:1895	4861030	1					
ANR	4861329	ExpressionStatement	"dprintf ( D_ALWAYS , ""fseek failed in ReadUserLog::determineLogType"" )"	676:2:17815:17887	4861030	0	True				
ANR	4861330	CallExpression	"dprintf ( D_ALWAYS , ""fseek failed in ReadUserLog::determineLogType"" )"		4861030	0					
ANR	4861331	Callee	dprintf		4861030	0					
ANR	4861332	Identifier	dprintf		4861030	0					
ANR	4861333	ArgumentList	D_ALWAYS		4861030	1					
ANR	4861334	Argument	D_ALWAYS		4861030	0					
ANR	4861335	Identifier	D_ALWAYS		4861030	0					
ANR	4861336	Argument	"""fseek failed in ReadUserLog::determineLogType"""		4861030	1					
ANR	4861337	PrimaryExpression	"""fseek failed in ReadUserLog::determineLogType"""		4861030	0					
ANR	4861338	ExpressionStatement	Unlock ( false )	678:2:17891:17906	4861030	1	True				
ANR	4861339	CallExpression	Unlock ( false )		4861030	0					
ANR	4861340	Callee	Unlock		4861030	0					
ANR	4861341	Identifier	Unlock		4861030	0					
ANR	4861342	ArgumentList	false		4861030	1					
ANR	4861343	Argument	false		4861030	0					
ANR	4861344	Identifier	false		4861030	0					
ANR	4861345	ExpressionStatement	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"	679:2:17910:17949	4861030	2	True				
ANR	4861346	CallExpression	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"		4861030	0					
ANR	4861347	Callee	Error		4861030	0					
ANR	4861348	Identifier	Error		4861030	0					
ANR	4861349	ArgumentList	LOG_ERROR_FILE_OTHER		4861030	1					
ANR	4861350	Argument	LOG_ERROR_FILE_OTHER		4861030	0					
ANR	4861351	Identifier	LOG_ERROR_FILE_OTHER		4861030	0					
ANR	4861352	Argument	__LINE__		4861030	1					
ANR	4861353	Identifier	__LINE__		4861030	0					
ANR	4861354	ReturnStatement	return false ;	680:2:17953:17965	4861030	3	True				
ANR	4861355	Identifier	false		4861030	0					
ANR	4861356	ExpressionStatement	Unlock ( false )	683:1:17972:17987	4861030	12	True				
ANR	4861357	CallExpression	Unlock ( false )		4861030	0					
ANR	4861358	Callee	Unlock		4861030	0					
ANR	4861359	Identifier	Unlock		4861030	0					
ANR	4861360	ArgumentList	false		4861030	1					
ANR	4861361	Argument	false		4861030	0					
ANR	4861362	Identifier	false		4861030	0					
ANR	4861363	ReturnStatement	return true ;	684:1:17990:18001	4861030	13	True				
ANR	4861364	Identifier	true		4861030	0					
ANR	4861365	ReturnType	bool		4861030	1					
ANR	4861366	Identifier	ReadUserLog :: determineLogType		4861030	2					
ANR	4861367	ParameterList			4861030	3					
ANR	4861368	CFGEntryNode	ENTRY		4861030		True				
ANR	4861369	CFGExitNode	EXIT		4861030		True				
ANR	4861370	Symbol	SEEK_SET		4861030						
ANR	4861371	Symbol	ftell		4861030						
ANR	4861372	Symbol	nothing		4861030						
ANR	4861373	Symbol	false		4861030						
ANR	4861374	Symbol	D_ALWAYS		4861030						
ANR	4861375	Symbol	D_FULLDEBUG		4861030						
ANR	4861376	Symbol	ReadUserLogState :: LOG_TYPE_XML		4861030						
ANR	4861377	Symbol	& nothing		4861030						
ANR	4861378	Symbol	LOG_ERROR_FILE_OTHER		4861030						
ANR	4861379	Symbol	& afterangle		4861030						
ANR	4861380	Symbol	__LINE__		4861030						
ANR	4861381	Symbol	fseek		4861030						
ANR	4861382	Symbol	m_fp		4861030						
ANR	4861383	Symbol	filepos		4861030						
ANR	4861384	Symbol	m_state		4861030						
ANR	4861385	Symbol	fscanf		4861030						
ANR	4861386	Symbol	true		4861030						
ANR	4861387	Symbol	skipXMLHeader		4861030						
ANR	4861388	Symbol	scanf_result		4861030						
ANR	4861389	Symbol	ReadUserLogState :: LOG_TYPE_UNKNOWN		4861030						
ANR	4861390	Symbol	afterangle		4861030						
ANR	4861391	Function	ReadUserLog :: skipXMLHeader	687:0:18006:19470							
ANR	4861392	FunctionDef	"ReadUserLog :: skipXMLHeader (char afterangle , long filepos)"		4861391	0					
ANR	4861393	CompoundStatement		689:0:18069:19470	4861391	0					
ANR	4861394	IdentifierDeclStatement	int nextchar = afterangle ;	692:1:18170:18195	4861391	0	True				
ANR	4861395	IdentifierDecl	nextchar = afterangle		4861391	0					
ANR	4861396	IdentifierDeclType	int		4861391	0					
ANR	4861397	Identifier	nextchar		4861391	1					
ANR	4861398	AssignmentExpression	nextchar = afterangle		4861391	2		=			
ANR	4861399	Identifier	afterangle		4861391	0					
ANR	4861400	Identifier	afterangle		4861391	1					
ANR	4861401	IfStatement	if ( nextchar == '?' || nextchar == '!' )		4861391	1					
ANR	4861402	Condition	nextchar == '?' || nextchar == '!'	693:5:18202:18235	4861391	0	True				
ANR	4861403	OrExpression	nextchar == '?' || nextchar == '!'		4861391	0		||			
ANR	4861404	EqualityExpression	nextchar == '?'		4861391	0		==			
ANR	4861405	Identifier	nextchar		4861391	0					
ANR	4861406	PrimaryExpression	'?'		4861391	1					
ANR	4861407	EqualityExpression	nextchar == '!'		4861391	1		==			
ANR	4861408	Identifier	nextchar		4861391	0					
ANR	4861409	PrimaryExpression	'!'		4861391	1					
ANR	4861410	CompoundStatement		5:42:169:169	4861391	1					
ANR	4861411	WhileStatement	while ( nextchar == '?' || nextchar == '!' )		4861391	0					
ANR	4861412	Condition	nextchar == '?' || nextchar == '!'	695:9:18293:18326	4861391	0	True				
ANR	4861413	OrExpression	nextchar == '?' || nextchar == '!'		4861391	0		||			
ANR	4861414	EqualityExpression	nextchar == '?'		4861391	0		==			
ANR	4861415	Identifier	nextchar		4861391	0					
ANR	4861416	PrimaryExpression	'?'		4861391	1					
ANR	4861417	EqualityExpression	nextchar == '!'		4861391	1		==			
ANR	4861418	Identifier	nextchar		4861391	0					
ANR	4861419	PrimaryExpression	'!'		4861391	1					
ANR	4861420	CompoundStatement		7:46:260:260	4861391	1					
ANR	4861421	ExpressionStatement	nextchar = fgetc ( m_fp )	697:3:18375:18397	4861391	0	True				
ANR	4861422	AssignmentExpression	nextchar = fgetc ( m_fp )		4861391	0		=			
ANR	4861423	Identifier	nextchar		4861391	0					
ANR	4861424	CallExpression	fgetc ( m_fp )		4861391	1					
ANR	4861425	Callee	fgetc		4861391	0					
ANR	4861426	Identifier	fgetc		4861391	0					
ANR	4861427	ArgumentList	m_fp		4861391	1					
ANR	4861428	Argument	m_fp		4861391	0					
ANR	4861429	Identifier	m_fp		4861391	0					
ANR	4861430	WhileStatement	while ( nextchar != EOF && nextchar != '>' )		4861391	1					
ANR	4861431	Condition	nextchar != EOF && nextchar != '>'	698:10:18409:18442	4861391	0	True				
ANR	4861432	AndExpression	nextchar != EOF && nextchar != '>'		4861391	0		&&			
ANR	4861433	EqualityExpression	nextchar != EOF		4861391	0		!=			
ANR	4861434	Identifier	nextchar		4861391	0					
ANR	4861435	Identifier	EOF		4861391	1					
ANR	4861436	EqualityExpression	nextchar != '>'		4861391	1		!=			
ANR	4861437	Identifier	nextchar		4861391	0					
ANR	4861438	PrimaryExpression	'>'		4861391	1					
ANR	4861439	CompoundStatement		10:47:376:376	4861391	1					
ANR	4861440	ExpressionStatement	nextchar = fgetc ( m_fp )	699:4:18452:18474	4861391	0	True				
ANR	4861441	AssignmentExpression	nextchar = fgetc ( m_fp )		4861391	0		=			
ANR	4861442	Identifier	nextchar		4861391	0					
ANR	4861443	CallExpression	fgetc ( m_fp )		4861391	1					
ANR	4861444	Callee	fgetc		4861391	0					
ANR	4861445	Identifier	fgetc		4861391	0					
ANR	4861446	ArgumentList	m_fp		4861391	1					
ANR	4861447	Argument	m_fp		4861391	0					
ANR	4861448	Identifier	m_fp		4861391	0					
ANR	4861449	IfStatement	if ( nextchar == EOF )		4861391	2					
ANR	4861450	Condition	nextchar == EOF	702:7:18489:18503	4861391	0	True				
ANR	4861451	EqualityExpression	nextchar == EOF		4861391	0		==			
ANR	4861452	Identifier	nextchar		4861391	0					
ANR	4861453	Identifier	EOF		4861391	1					
ANR	4861454	CompoundStatement		14:25:437:437	4861391	1					
ANR	4861455	ExpressionStatement	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"	703:4:18513:18552	4861391	0	True				
ANR	4861456	CallExpression	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"		4861391	0					
ANR	4861457	Callee	Error		4861391	0					
ANR	4861458	Identifier	Error		4861391	0					
ANR	4861459	ArgumentList	LOG_ERROR_FILE_OTHER		4861391	1					
ANR	4861460	Argument	LOG_ERROR_FILE_OTHER		4861391	0					
ANR	4861461	Identifier	LOG_ERROR_FILE_OTHER		4861391	0					
ANR	4861462	Argument	__LINE__		4861391	1					
ANR	4861463	Identifier	__LINE__		4861391	0					
ANR	4861464	ReturnStatement	return false ;	704:4:18558:18570	4861391	1	True				
ANR	4861465	Identifier	false		4861391	0					
ANR	4861466	WhileStatement	while ( nextchar != EOF && nextchar != '<' )		4861391	3					
ANR	4861467	Condition	nextchar != EOF && nextchar != '<'	709:10:18700:18733	4861391	0	True				
ANR	4861468	AndExpression	nextchar != EOF && nextchar != '<'		4861391	0		&&			
ANR	4861469	EqualityExpression	nextchar != EOF		4861391	0		!=			
ANR	4861470	Identifier	nextchar		4861391	0					
ANR	4861471	Identifier	EOF		4861391	1					
ANR	4861472	EqualityExpression	nextchar != '<'		4861391	1		!=			
ANR	4861473	Identifier	nextchar		4861391	0					
ANR	4861474	PrimaryExpression	'<'		4861391	1					
ANR	4861475	CompoundStatement		21:47:667:667	4861391	1					
ANR	4861476	ExpressionStatement	filepos = ftell ( m_fp )	710:4:18743:18764	4861391	0	True				
ANR	4861477	AssignmentExpression	filepos = ftell ( m_fp )		4861391	0		=			
ANR	4861478	Identifier	filepos		4861391	0					
ANR	4861479	CallExpression	ftell ( m_fp )		4861391	1					
ANR	4861480	Callee	ftell		4861391	0					
ANR	4861481	Identifier	ftell		4861391	0					
ANR	4861482	ArgumentList	m_fp		4861391	1					
ANR	4861483	Argument	m_fp		4861391	0					
ANR	4861484	Identifier	m_fp		4861391	0					
ANR	4861485	ExpressionStatement	nextchar = fgetc ( m_fp )	711:4:18770:18792	4861391	1	True				
ANR	4861486	AssignmentExpression	nextchar = fgetc ( m_fp )		4861391	0		=			
ANR	4861487	Identifier	nextchar		4861391	0					
ANR	4861488	CallExpression	fgetc ( m_fp )		4861391	1					
ANR	4861489	Callee	fgetc		4861391	0					
ANR	4861490	Identifier	fgetc		4861391	0					
ANR	4861491	ArgumentList	m_fp		4861391	1					
ANR	4861492	Argument	m_fp		4861391	0					
ANR	4861493	Identifier	m_fp		4861391	0					
ANR	4861494	IfStatement	if ( nextchar == EOF )		4861391	4					
ANR	4861495	Condition	nextchar == EOF	713:7:18806:18820	4861391	0	True				
ANR	4861496	EqualityExpression	nextchar == EOF		4861391	0		==			
ANR	4861497	Identifier	nextchar		4861391	0					
ANR	4861498	Identifier	EOF		4861391	1					
ANR	4861499	CompoundStatement		25:25:754:754	4861391	1					
ANR	4861500	ExpressionStatement	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"	714:4:18830:18869	4861391	0	True				
ANR	4861501	CallExpression	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"		4861391	0					
ANR	4861502	Callee	Error		4861391	0					
ANR	4861503	Identifier	Error		4861391	0					
ANR	4861504	ArgumentList	LOG_ERROR_FILE_OTHER		4861391	1					
ANR	4861505	Argument	LOG_ERROR_FILE_OTHER		4861391	0					
ANR	4861506	Identifier	LOG_ERROR_FILE_OTHER		4861391	0					
ANR	4861507	Argument	__LINE__		4861391	1					
ANR	4861508	Identifier	__LINE__		4861391	0					
ANR	4861509	ReturnStatement	return false ;	715:4:18875:18887	4861391	1	True				
ANR	4861510	Identifier	false		4861391	0					
ANR	4861511	ExpressionStatement	nextchar = fgetc ( m_fp )	717:3:18897:18919	4861391	5	True				
ANR	4861512	AssignmentExpression	nextchar = fgetc ( m_fp )		4861391	0		=			
ANR	4861513	Identifier	nextchar		4861391	0					
ANR	4861514	CallExpression	fgetc ( m_fp )		4861391	1					
ANR	4861515	Callee	fgetc		4861391	0					
ANR	4861516	Identifier	fgetc		4861391	0					
ANR	4861517	ArgumentList	m_fp		4861391	1					
ANR	4861518	Argument	m_fp		4861391	0					
ANR	4861519	Identifier	m_fp		4861391	0					
ANR	4861520	IfStatement	"if ( fseek ( m_fp , filepos , SEEK_SET ) )"		4861391	1					
ANR	4861521	Condition	"fseek ( m_fp , filepos , SEEK_SET )"	722:6:19016:19045	4861391	0	True				
ANR	4861522	CallExpression	"fseek ( m_fp , filepos , SEEK_SET )"		4861391	0					
ANR	4861523	Callee	fseek		4861391	0					
ANR	4861524	Identifier	fseek		4861391	0					
ANR	4861525	ArgumentList	m_fp		4861391	1					
ANR	4861526	Argument	m_fp		4861391	0					
ANR	4861527	Identifier	m_fp		4861391	0					
ANR	4861528	Argument	filepos		4861391	1					
ANR	4861529	Identifier	filepos		4861391	0					
ANR	4861530	Argument	SEEK_SET		4861391	2					
ANR	4861531	Identifier	SEEK_SET		4861391	0					
ANR	4861532	CompoundStatement		34:39:979:979	4861391	1					
ANR	4861533	ExpressionStatement	"dprintf ( D_ALWAYS , ""fseek failed in ReadUserLog::skipXMLHeader"" )"	723:3:19054:19117	4861391	0	True				
ANR	4861534	CallExpression	"dprintf ( D_ALWAYS , ""fseek failed in ReadUserLog::skipXMLHeader"" )"		4861391	0					
ANR	4861535	Callee	dprintf		4861391	0					
ANR	4861536	Identifier	dprintf		4861391	0					
ANR	4861537	ArgumentList	D_ALWAYS		4861391	1					
ANR	4861538	Argument	D_ALWAYS		4861391	0					
ANR	4861539	Identifier	D_ALWAYS		4861391	0					
ANR	4861540	Argument	"""fseek failed in ReadUserLog::skipXMLHeader"""		4861391	1					
ANR	4861541	PrimaryExpression	"""fseek failed in ReadUserLog::skipXMLHeader"""		4861391	0					
ANR	4861542	ExpressionStatement	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"	724:3:19122:19161	4861391	1	True				
ANR	4861543	CallExpression	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"		4861391	0					
ANR	4861544	Callee	Error		4861391	0					
ANR	4861545	Identifier	Error		4861391	0					
ANR	4861546	ArgumentList	LOG_ERROR_FILE_OTHER		4861391	1					
ANR	4861547	Argument	LOG_ERROR_FILE_OTHER		4861391	0					
ANR	4861548	Identifier	LOG_ERROR_FILE_OTHER		4861391	0					
ANR	4861549	Argument	__LINE__		4861391	1					
ANR	4861550	Identifier	__LINE__		4861391	0					
ANR	4861551	ReturnStatement	return false ;	725:3:19166:19178	4861391	2	True				
ANR	4861552	Identifier	false		4861391	0					
ANR	4861553	ElseStatement	else		4861391	0					
ANR	4861554	CompoundStatement		39:8:1122:1122	4861391	0					
ANR	4861555	IfStatement	"if ( fseek ( m_fp , filepos , SEEK_SET ) )"		4861391	0					
ANR	4861556	Condition	"fseek ( m_fp , filepos , SEEK_SET )"	729:6:19254:19283	4861391	0	True				
ANR	4861557	CallExpression	"fseek ( m_fp , filepos , SEEK_SET )"		4861391	0					
ANR	4861558	Callee	fseek		4861391	0					
ANR	4861559	Identifier	fseek		4861391	0					
ANR	4861560	ArgumentList	m_fp		4861391	1					
ANR	4861561	Argument	m_fp		4861391	0					
ANR	4861562	Identifier	m_fp		4861391	0					
ANR	4861563	Argument	filepos		4861391	1					
ANR	4861564	Identifier	filepos		4861391	0					
ANR	4861565	Argument	SEEK_SET		4861391	2					
ANR	4861566	Identifier	SEEK_SET		4861391	0					
ANR	4861567	CompoundStatement		41:39:1217:1217	4861391	1					
ANR	4861568	ExpressionStatement	"dprintf ( D_ALWAYS , ""fseek failed in ReadUserLog::skipXMLHeader"" )"	730:3:19292:19355	4861391	0	True				
ANR	4861569	CallExpression	"dprintf ( D_ALWAYS , ""fseek failed in ReadUserLog::skipXMLHeader"" )"		4861391	0					
ANR	4861570	Callee	dprintf		4861391	0					
ANR	4861571	Identifier	dprintf		4861391	0					
ANR	4861572	ArgumentList	D_ALWAYS		4861391	1					
ANR	4861573	Argument	D_ALWAYS		4861391	0					
ANR	4861574	Identifier	D_ALWAYS		4861391	0					
ANR	4861575	Argument	"""fseek failed in ReadUserLog::skipXMLHeader"""		4861391	1					
ANR	4861576	PrimaryExpression	"""fseek failed in ReadUserLog::skipXMLHeader"""		4861391	0					
ANR	4861577	ExpressionStatement	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"	731:3:19360:19399	4861391	1	True				
ANR	4861578	CallExpression	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"		4861391	0					
ANR	4861579	Callee	Error		4861391	0					
ANR	4861580	Identifier	Error		4861391	0					
ANR	4861581	ArgumentList	LOG_ERROR_FILE_OTHER		4861391	1					
ANR	4861582	Argument	LOG_ERROR_FILE_OTHER		4861391	0					
ANR	4861583	Identifier	LOG_ERROR_FILE_OTHER		4861391	0					
ANR	4861584	Argument	__LINE__		4861391	1					
ANR	4861585	Identifier	__LINE__		4861391	0					
ANR	4861586	ReturnStatement	return false ;	732:3:19404:19416	4861391	2	True				
ANR	4861587	Identifier	false		4861391	0					
ANR	4861588	ExpressionStatement	m_state -> Offset ( filepos )	736:1:19427:19453	4861391	2	True				
ANR	4861589	CallExpression	m_state -> Offset ( filepos )		4861391	0					
ANR	4861590	Callee	m_state -> Offset		4861391	0					
ANR	4861591	PtrMemberAccess	m_state -> Offset		4861391	0					
ANR	4861592	Identifier	m_state		4861391	0					
ANR	4861593	Identifier	Offset		4861391	1					
ANR	4861594	ArgumentList	filepos		4861391	1					
ANR	4861595	Argument	filepos		4861391	0					
ANR	4861596	Identifier	filepos		4861391	0					
ANR	4861597	ReturnStatement	return true ;	738:1:19457:19468	4861391	3	True				
ANR	4861598	Identifier	true		4861391	0					
ANR	4861599	ReturnType	bool		4861391	1					
ANR	4861600	Identifier	ReadUserLog :: skipXMLHeader		4861391	2					
ANR	4861601	ParameterList	"char afterangle , long filepos"		4861391	3					
ANR	4861602	Parameter	char afterangle	688:27:18038:18052	4861391	0	True				
ANR	4861603	ParameterType	char		4861391	0					
ANR	4861604	Identifier	afterangle		4861391	1					
ANR	4861605	Parameter	long filepos	688:44:18055:18066	4861391	1	True				
ANR	4861606	ParameterType	long		4861391	0					
ANR	4861607	Identifier	filepos		4861391	1					
ANR	4861608	CFGEntryNode	ENTRY		4861391		True				
ANR	4861609	CFGExitNode	EXIT		4861391		True				
ANR	4861610	Symbol	SEEK_SET		4861391						
ANR	4861611	Symbol	nextchar		4861391						
ANR	4861612	Symbol	ftell		4861391						
ANR	4861613	Symbol	false		4861391						
ANR	4861614	Symbol	D_ALWAYS		4861391						
ANR	4861615	Symbol	LOG_ERROR_FILE_OTHER		4861391						
ANR	4861616	Symbol	__LINE__		4861391						
ANR	4861617	Symbol	fseek		4861391						
ANR	4861618	Symbol	m_fp		4861391						
ANR	4861619	Symbol	filepos		4861391						
ANR	4861620	Symbol	m_state		4861391						
ANR	4861621	Symbol	true		4861391						
ANR	4861622	Symbol	EOF		4861391						
ANR	4861623	Symbol	fgetc		4861391						
ANR	4861624	Symbol	afterangle		4861391						
ANR	4861625	Function	ReadUserLog :: FindPrevFile	741:0:19473:20022							
ANR	4861626	FunctionDef	"ReadUserLog :: FindPrevFile (int start , int num , bool store_stat)"		4861625	0					
ANR	4861627	CompoundStatement		743:0:19543:20022	4861625	0					
ANR	4861628	IfStatement	if ( ! m_handle_rot )		4861625	0					
ANR	4861629	Condition	! m_handle_rot	744:6:19551:19563	4861625	0	True				
ANR	4861630	UnaryOperationExpression	! m_handle_rot		4861625	0					
ANR	4861631	UnaryOperator	!		4861625	0					
ANR	4861632	Identifier	m_handle_rot		4861625	1					
ANR	4861633	CompoundStatement		2:22:23:23	4861625	1					
ANR	4861634	ReturnStatement	return true ;	745:2:19571:19582	4861625	0	True				
ANR	4861635	Identifier	true		4861625	0					
ANR	4861636	IdentifierDeclStatement	int end ;	749:1:19623:19633	4861625	1	True				
ANR	4861637	IdentifierDecl	end		4861625	0					
ANR	4861638	IdentifierDeclType	int		4861625	0					
ANR	4861639	Identifier	end		4861625	1					
ANR	4861640	IfStatement	if ( 0 == num )		4861625	2					
ANR	4861641	Condition	0 == num	750:6:19641:19648	4861625	0	True				
ANR	4861642	EqualityExpression	0 == num		4861625	0		==			
ANR	4861643	PrimaryExpression	0		4861625	0					
ANR	4861644	Identifier	num		4861625	1					
ANR	4861645	CompoundStatement		8:17:108:108	4861625	1					
ANR	4861646	ExpressionStatement	end = 0	751:2:19656:19663	4861625	0	True				
ANR	4861647	AssignmentExpression	end = 0		4861625	0		=			
ANR	4861648	Identifier	end		4861625	0					
ANR	4861649	PrimaryExpression	0		4861625	1					
ANR	4861650	ElseStatement	else		4861625	0					
ANR	4861651	CompoundStatement		10:8:129:129	4861625	0					
ANR	4861652	ExpressionStatement	end = start - num + 1	753:2:19677:19698	4861625	0	True				
ANR	4861653	AssignmentExpression	end = start - num + 1		4861625	0		=			
ANR	4861654	Identifier	end		4861625	0					
ANR	4861655	AdditiveExpression	start - num + 1		4861625	1		-			
ANR	4861656	Identifier	start		4861625	0					
ANR	4861657	AdditiveExpression	num + 1		4861625	1		+			
ANR	4861658	Identifier	num		4861625	0					
ANR	4861659	PrimaryExpression	1		4861625	1					
ANR	4861660	IfStatement	if ( end < 0 )		4861625	1					
ANR	4861661	Condition	end < 0	754:7:19707:19713	4861625	0	True				
ANR	4861662	RelationalExpression	end < 0		4861625	0		<			
ANR	4861663	Identifier	end		4861625	0					
ANR	4861664	PrimaryExpression	0		4861625	1					
ANR	4861665	CompoundStatement		12:17:173:173	4861625	1					
ANR	4861666	ExpressionStatement	end = 0	755:3:19722:19729	4861625	0	True				
ANR	4861667	AssignmentExpression	end = 0		4861625	0		=			
ANR	4861668	Identifier	end		4861625	0					
ANR	4861669	PrimaryExpression	0		4861625	1					
ANR	4861670	ForStatement	for ( int rot = start ; rot >= end ; rot -- )		4861625	3					
ANR	4861671	ForInit	int rot = start ;	760:7:19779:19794	4861625	0	True				
ANR	4861672	IdentifierDeclStatement	int rot = start ;		4861625	0					
ANR	4861673	IdentifierDecl	rot = start		4861625	0					
ANR	4861674	IdentifierDeclType	int		4861625	0					
ANR	4861675	Identifier	rot		4861625	1					
ANR	4861676	AssignmentExpression	rot = start		4861625	2		=			
ANR	4861677	Identifier	start		4861625	0					
ANR	4861678	Identifier	start		4861625	1					
ANR	4861679	Condition	rot >= end	760:25:19797:19806	4861625	1	True				
ANR	4861680	RelationalExpression	rot >= end		4861625	0		>=			
ANR	4861681	Identifier	rot		4861625	0					
ANR	4861682	Identifier	end		4861625	1					
ANR	4861683	PostIncDecOperationExpression	rot --	760:38:19810:19814	4861625	2	True				
ANR	4861684	Identifier	rot		4861625	0					
ANR	4861685	IncDec	--		4861625	1					
ANR	4861686	CompoundStatement		18:46:274:274	4861625	3					
ANR	4861687	IfStatement	"if ( 0 == m_state -> Rotation ( rot , store_stat ) )"		4861625	0					
ANR	4861688	Condition	"0 == m_state -> Rotation ( rot , store_stat )"	761:7:19827:19867	4861625	0	True				
ANR	4861689	EqualityExpression	"0 == m_state -> Rotation ( rot , store_stat )"		4861625	0		==			
ANR	4861690	PrimaryExpression	0		4861625	0					
ANR	4861691	CallExpression	"m_state -> Rotation ( rot , store_stat )"		4861625	1					
ANR	4861692	Callee	m_state -> Rotation		4861625	0					
ANR	4861693	PtrMemberAccess	m_state -> Rotation		4861625	0					
ANR	4861694	Identifier	m_state		4861625	0					
ANR	4861695	Identifier	Rotation		4861625	1					
ANR	4861696	ArgumentList	rot		4861625	1					
ANR	4861697	Argument	rot		4861625	0					
ANR	4861698	Identifier	rot		4861625	0					
ANR	4861699	Argument	store_stat		4861625	1					
ANR	4861700	Identifier	store_stat		4861625	0					
ANR	4861701	CompoundStatement		19:52:328:328	4861625	1					
ANR	4861702	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Found: '%s'\\n"" , m_state -> CurPath ( ) )"	762:3:19877:19936	4861625	0	True				
ANR	4861703	CallExpression	"dprintf ( D_FULLDEBUG , ""Found: '%s'\\n"" , m_state -> CurPath ( ) )"		4861625	0					
ANR	4861704	Callee	dprintf		4861625	0					
ANR	4861705	Identifier	dprintf		4861625	0					
ANR	4861706	ArgumentList	D_FULLDEBUG		4861625	1					
ANR	4861707	Argument	D_FULLDEBUG		4861625	0					
ANR	4861708	Identifier	D_FULLDEBUG		4861625	0					
ANR	4861709	Argument	"""Found: '%s'\\n"""		4861625	1					
ANR	4861710	PrimaryExpression	"""Found: '%s'\\n"""		4861625	0					
ANR	4861711	Argument	m_state -> CurPath ( )		4861625	2					
ANR	4861712	CallExpression	m_state -> CurPath ( )		4861625	0					
ANR	4861713	Callee	m_state -> CurPath		4861625	0					
ANR	4861714	PtrMemberAccess	m_state -> CurPath		4861625	0					
ANR	4861715	Identifier	m_state		4861625	0					
ANR	4861716	Identifier	CurPath		4861625	1					
ANR	4861717	ArgumentList			4861625	1					
ANR	4861718	ReturnStatement	return true ;	763:3:19941:19952	4861625	1	True				
ANR	4861719	Identifier	true		4861625	0					
ANR	4861720	ExpressionStatement	"Error ( LOG_ERROR_FILE_NOT_FOUND , __LINE__ )"	766:1:19962:20005	4861625	4	True				
ANR	4861721	CallExpression	"Error ( LOG_ERROR_FILE_NOT_FOUND , __LINE__ )"		4861625	0					
ANR	4861722	Callee	Error		4861625	0					
ANR	4861723	Identifier	Error		4861625	0					
ANR	4861724	ArgumentList	LOG_ERROR_FILE_NOT_FOUND		4861625	1					
ANR	4861725	Argument	LOG_ERROR_FILE_NOT_FOUND		4861625	0					
ANR	4861726	Identifier	LOG_ERROR_FILE_NOT_FOUND		4861625	0					
ANR	4861727	Argument	__LINE__		4861625	1					
ANR	4861728	Identifier	__LINE__		4861625	0					
ANR	4861729	ReturnStatement	return false ;	767:1:20008:20020	4861625	5	True				
ANR	4861730	Identifier	false		4861625	0					
ANR	4861731	ReturnType	bool		4861625	1					
ANR	4861732	Identifier	ReadUserLog :: FindPrevFile		4861625	2					
ANR	4861733	ParameterList	"int start , int num , bool store_stat"		4861625	3					
ANR	4861734	Parameter	int start	742:27:19505:19513	4861625	0	True				
ANR	4861735	ParameterType	int		4861625	0					
ANR	4861736	Identifier	start		4861625	1					
ANR	4861737	Parameter	int num	742:38:19516:19522	4861625	1	True				
ANR	4861738	ParameterType	int		4861625	0					
ANR	4861739	Identifier	num		4861625	1					
ANR	4861740	Parameter	bool store_stat	742:47:19525:19539	4861625	2	True				
ANR	4861741	ParameterType	bool		4861625	0					
ANR	4861742	Identifier	store_stat		4861625	1					
ANR	4861743	CFGEntryNode	ENTRY		4861625		True				
ANR	4861744	CFGExitNode	EXIT		4861625		True				
ANR	4861745	Symbol	store_stat		4861625						
ANR	4861746	Symbol	num		4861625						
ANR	4861747	Symbol	* m_state		4861625						
ANR	4861748	Symbol	start		4861625						
ANR	4861749	Symbol	false		4861625						
ANR	4861750	Symbol	D_FULLDEBUG		4861625						
ANR	4861751	Symbol	__LINE__		4861625						
ANR	4861752	Symbol	m_handle_rot		4861625						
ANR	4861753	Symbol	m_state -> Rotation		4861625						
ANR	4861754	Symbol	m_state		4861625						
ANR	4861755	Symbol	m_state -> CurPath		4861625						
ANR	4861756	Symbol	rot		4861625						
ANR	4861757	Symbol	true		4861625						
ANR	4861758	Symbol	end		4861625						
ANR	4861759	Symbol	LOG_ERROR_FILE_NOT_FOUND		4861625						
ANR	4861760	Function	ReadUserLog :: ReopenLogFile	770:0:20025:22186							
ANR	4861761	FunctionDef	ReadUserLog :: ReopenLogFile (bool restore)		4861760	0					
ANR	4861762	CompoundStatement		772:0:20085:22186	4861760	0					
ANR	4861763	IfStatement	if ( m_fp )		4861760	0					
ANR	4861764	Condition	m_fp	775:6:20141:20144	4861760	0	True				
ANR	4861765	Identifier	m_fp		4861760	0					
ANR	4861766	CompoundStatement		4:13:62:62	4861760	1					
ANR	4861767	ReturnStatement	return ULOG_OK ;	776:2:20152:20166	4861760	0	True				
ANR	4861768	Identifier	ULOG_OK		4861760	0					
ANR	4861769	IfStatement	if ( ! m_handle_rot )		4861760	1					
ANR	4861770	Condition	! m_handle_rot	780:6:20242:20255	4861760	0	True				
ANR	4861771	UnaryOperationExpression	! m_handle_rot		4861760	0					
ANR	4861772	UnaryOperator	!		4861760	0					
ANR	4861773	Identifier	m_handle_rot		4861760	1					
ANR	4861774	CompoundStatement		9:23:173:173	4861760	1					
ANR	4861775	ReturnStatement	return OpenLogFile ( true ) ;	781:2:20263:20289	4861760	0	True				
ANR	4861776	CallExpression	OpenLogFile ( true )		4861760	0					
ANR	4861777	Callee	OpenLogFile		4861760	0					
ANR	4861778	Identifier	OpenLogFile		4861760	0					
ANR	4861779	ArgumentList	true		4861760	1					
ANR	4861780	Argument	true		4861760	0					
ANR	4861781	Identifier	true		4861760	0					
ANR	4861782	IfStatement	if ( ! m_state -> IsValid ( ) )		4861760	2					
ANR	4861783	Condition	! m_state -> IsValid ( )	785:6:20371:20390	4861760	0	True				
ANR	4861784	UnaryOperationExpression	! m_state -> IsValid ( )		4861760	0					
ANR	4861785	UnaryOperator	!		4861760	0					
ANR	4861786	CallExpression	m_state -> IsValid ( )		4861760	1					
ANR	4861787	Callee	m_state -> IsValid		4861760	0					
ANR	4861788	PtrMemberAccess	m_state -> IsValid		4861760	0					
ANR	4861789	Identifier	m_state		4861760	0					
ANR	4861790	Identifier	IsValid		4861760	1					
ANR	4861791	ArgumentList			4861760	1					
ANR	4861792	CompoundStatement		14:29:308:308	4861760	1					
ANR	4861793	IfStatement	if ( m_handle_rot )		4861760	0					
ANR	4861794	Condition	m_handle_rot	786:7:20403:20414	4861760	0	True				
ANR	4861795	Identifier	m_handle_rot		4861760	0					
ANR	4861796	CompoundStatement		15:22:332:332	4861760	1					
ANR	4861797	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""reopen: looking for previous file...\\n"" )"	787:3:20423:20487	4861760	0	True				
ANR	4861798	CallExpression	"dprintf ( D_FULLDEBUG , ""reopen: looking for previous file...\\n"" )"		4861760	0					
ANR	4861799	Callee	dprintf		4861760	0					
ANR	4861800	Identifier	dprintf		4861760	0					
ANR	4861801	ArgumentList	D_FULLDEBUG		4861760	1					
ANR	4861802	Argument	D_FULLDEBUG		4861760	0					
ANR	4861803	Identifier	D_FULLDEBUG		4861760	0					
ANR	4861804	Argument	"""reopen: looking for previous file...\\n"""		4861760	1					
ANR	4861805	PrimaryExpression	"""reopen: looking for previous file...\\n"""		4861760	0					
ANR	4861806	IfStatement	"if ( ! FindPrevFile ( m_max_rotations , 0 , true ) )"		4861760	1					
ANR	4861807	Condition	"! FindPrevFile ( m_max_rotations , 0 , true )"	788:7:20496:20537	4861760	0	True				
ANR	4861808	UnaryOperationExpression	"! FindPrevFile ( m_max_rotations , 0 , true )"		4861760	0					
ANR	4861809	UnaryOperator	!		4861760	0					
ANR	4861810	CallExpression	"FindPrevFile ( m_max_rotations , 0 , true )"		4861760	1					
ANR	4861811	Callee	FindPrevFile		4861760	0					
ANR	4861812	Identifier	FindPrevFile		4861760	0					
ANR	4861813	ArgumentList	m_max_rotations		4861760	1					
ANR	4861814	Argument	m_max_rotations		4861760	0					
ANR	4861815	Identifier	m_max_rotations		4861760	0					
ANR	4861816	Argument	0		4861760	1					
ANR	4861817	PrimaryExpression	0		4861760	0					
ANR	4861818	Argument	true		4861760	2					
ANR	4861819	Identifier	true		4861760	0					
ANR	4861820	CompoundStatement		17:52:455:455	4861760	1					
ANR	4861821	ExpressionStatement	"Error ( LOG_ERROR_FILE_NOT_FOUND , __LINE__ )"	789:4:20547:20590	4861760	0	True				
ANR	4861822	CallExpression	"Error ( LOG_ERROR_FILE_NOT_FOUND , __LINE__ )"		4861760	0					
ANR	4861823	Callee	Error		4861760	0					
ANR	4861824	Identifier	Error		4861760	0					
ANR	4861825	ArgumentList	LOG_ERROR_FILE_NOT_FOUND		4861760	1					
ANR	4861826	Argument	LOG_ERROR_FILE_NOT_FOUND		4861760	0					
ANR	4861827	Identifier	LOG_ERROR_FILE_NOT_FOUND		4861760	0					
ANR	4861828	Argument	__LINE__		4861760	1					
ANR	4861829	Identifier	__LINE__		4861760	0					
ANR	4861830	ReturnStatement	return ULOG_NO_EVENT ;	790:4:20596:20616	4861760	1	True				
ANR	4861831	Identifier	ULOG_NO_EVENT		4861760	0					
ANR	4861832	ElseStatement	else		4861760	0					
ANR	4861833	CompoundStatement		22:7:548:548	4861760	0					
ANR	4861834	IfStatement	"if ( m_state -> Rotation ( 0 , true ) )"		4861760	0					
ANR	4861835	Condition	"m_state -> Rotation ( 0 , true )"	794:8:20644:20671	4861760	0	True				
ANR	4861836	CallExpression	"m_state -> Rotation ( 0 , true )"		4861760	0					
ANR	4861837	Callee	m_state -> Rotation		4861760	0					
ANR	4861838	PtrMemberAccess	m_state -> Rotation		4861760	0					
ANR	4861839	Identifier	m_state		4861760	0					
ANR	4861840	Identifier	Rotation		4861760	1					
ANR	4861841	ArgumentList	0		4861760	1					
ANR	4861842	Argument	0		4861760	0					
ANR	4861843	PrimaryExpression	0		4861760	0					
ANR	4861844	Argument	true		4861760	1					
ANR	4861845	Identifier	true		4861760	0					
ANR	4861846	CompoundStatement		23:39:589:589	4861760	1					
ANR	4861847	ExpressionStatement	"Error ( LOG_ERROR_FILE_NOT_FOUND , __LINE__ )"	795:4:20681:20724	4861760	0	True				
ANR	4861848	CallExpression	"Error ( LOG_ERROR_FILE_NOT_FOUND , __LINE__ )"		4861760	0					
ANR	4861849	Callee	Error		4861760	0					
ANR	4861850	Identifier	Error		4861760	0					
ANR	4861851	ArgumentList	LOG_ERROR_FILE_NOT_FOUND		4861760	1					
ANR	4861852	Argument	LOG_ERROR_FILE_NOT_FOUND		4861760	0					
ANR	4861853	Identifier	LOG_ERROR_FILE_NOT_FOUND		4861760	0					
ANR	4861854	Argument	__LINE__		4861760	1					
ANR	4861855	Identifier	__LINE__		4861760	0					
ANR	4861856	ReturnStatement	return ULOG_NO_EVENT ;	796:4:20730:20750	4861760	1	True				
ANR	4861857	Identifier	ULOG_NO_EVENT		4861760	0					
ANR	4861858	ReturnStatement	return OpenLogFile ( false ) ;	799:2:20763:20790	4861760	1	True				
ANR	4861859	CallExpression	OpenLogFile ( false )		4861760	0					
ANR	4861860	Callee	OpenLogFile		4861760	0					
ANR	4861861	Identifier	OpenLogFile		4861760	0					
ANR	4861862	ArgumentList	false		4861760	1					
ANR	4861863	Argument	false		4861760	0					
ANR	4861864	Identifier	false		4861760	0					
ANR	4861865	IdentifierDeclStatement	int new_rot = - 1 ;	804:1:20923:20939	4861760	3	True				
ANR	4861866	IdentifierDecl	new_rot = - 1		4861760	0					
ANR	4861867	IdentifierDeclType	int		4861760	0					
ANR	4861868	Identifier	new_rot		4861760	1					
ANR	4861869	AssignmentExpression	new_rot = - 1		4861760	2		=			
ANR	4861870	Identifier	new_rot		4861760	0					
ANR	4861871	UnaryOperationExpression	- 1		4861760	1					
ANR	4861872	UnaryOperator	-		4861760	0					
ANR	4861873	PrimaryExpression	1		4861760	1					
ANR	4861874	IdentifierDeclStatement	int max_score = - 1 ;	805:1:20942:20960	4861760	4	True				
ANR	4861875	IdentifierDecl	max_score = - 1		4861760	0					
ANR	4861876	IdentifierDeclType	int		4861760	0					
ANR	4861877	Identifier	max_score		4861760	1					
ANR	4861878	AssignmentExpression	max_score = - 1		4861760	2		=			
ANR	4861879	Identifier	max_score		4861760	0					
ANR	4861880	UnaryOperationExpression	- 1		4861760	1					
ANR	4861881	UnaryOperator	-		4861760	0					
ANR	4861882	PrimaryExpression	1		4861760	1					
ANR	4861883	IdentifierDeclStatement	int max_score_rot = - 1 ;	806:1:20963:20985	4861760	5	True				
ANR	4861884	IdentifierDecl	max_score_rot = - 1		4861760	0					
ANR	4861885	IdentifierDeclType	int		4861760	0					
ANR	4861886	Identifier	max_score_rot		4861760	1					
ANR	4861887	AssignmentExpression	max_score_rot = - 1		4861760	2		=			
ANR	4861888	Identifier	max_score_rot		4861760	0					
ANR	4861889	UnaryOperationExpression	- 1		4861760	1					
ANR	4861890	UnaryOperator	-		4861760	0					
ANR	4861891	PrimaryExpression	1		4861760	1					
ANR	4861892	IdentifierDeclStatement	int * scores = new int [ m_max_rotations + 1 ] ;	807:1:20988:21028	4861760	6	True				
ANR	4861893	IdentifierDecl	* scores = new int [ m_max_rotations + 1 ]		4861760	0					
ANR	4861894	IdentifierDeclType	int *		4861760	0					
ANR	4861895	Identifier	scores		4861760	1					
ANR	4861896	AssignmentExpression	* scores = new int [ m_max_rotations + 1 ]		4861760	2		=			
ANR	4861897	Identifier	scores		4861760	0					
ANR	4861898	AdditiveExpression	m_max_rotations + 1		4861760	1		+			
ANR	4861899	Identifier	m_max_rotations		4861760	0					
ANR	4861900	PrimaryExpression	1		4861760	1					
ANR	4861901	IdentifierDeclStatement	int start = m_state -> Rotation ( ) ;	808:1:21031:21062	4861760	7	True				
ANR	4861902	IdentifierDecl	start = m_state -> Rotation ( )		4861760	0					
ANR	4861903	IdentifierDeclType	int		4861760	0					
ANR	4861904	Identifier	start		4861760	1					
ANR	4861905	AssignmentExpression	start = m_state -> Rotation ( )		4861760	2		=			
ANR	4861906	Identifier	start		4861760	0					
ANR	4861907	CallExpression	m_state -> Rotation ( )		4861760	1					
ANR	4861908	Callee	m_state -> Rotation		4861760	0					
ANR	4861909	PtrMemberAccess	m_state -> Rotation		4861760	0					
ANR	4861910	Identifier	m_state		4861760	0					
ANR	4861911	Identifier	Rotation		4861760	1					
ANR	4861912	ArgumentList			4861760	1					
ANR	4861913	IdentifierDeclStatement	int thresh = restore ? SCORE_THRESH_RESTORE : SCORE_THRESH_FWSEARCH ;	809:1:21065:21132	4861760	8	True				
ANR	4861914	IdentifierDecl	thresh = restore ? SCORE_THRESH_RESTORE : SCORE_THRESH_FWSEARCH		4861760	0					
ANR	4861915	IdentifierDeclType	int		4861760	0					
ANR	4861916	Identifier	thresh		4861760	1					
ANR	4861917	AssignmentExpression	thresh = restore ? SCORE_THRESH_RESTORE : SCORE_THRESH_FWSEARCH		4861760	2		=			
ANR	4861918	Identifier	thresh		4861760	0					
ANR	4861919	ConditionalExpression	restore ? SCORE_THRESH_RESTORE : SCORE_THRESH_FWSEARCH		4861760	1					
ANR	4861920	Condition	restore		4861760	0					
ANR	4861921	Identifier	restore		4861760	0					
ANR	4861922	Identifier	SCORE_THRESH_RESTORE		4861760	1					
ANR	4861923	Identifier	SCORE_THRESH_FWSEARCH		4861760	2					
ANR	4861924	ForStatement	for ( int rot = start ; ( rot <= m_max_rotations ) && ( new_rot < 0 ) ; rot ++ )		4861760	9					
ANR	4861925	ForInit	int rot = start ;	810:6:21140:21155	4861760	0	True				
ANR	4861926	IdentifierDeclStatement	int rot = start ;		4861760	0					
ANR	4861927	IdentifierDecl	rot = start		4861760	0					
ANR	4861928	IdentifierDeclType	int		4861760	0					
ANR	4861929	Identifier	rot		4861760	1					
ANR	4861930	AssignmentExpression	rot = start		4861760	2		=			
ANR	4861931	Identifier	start		4861760	0					
ANR	4861932	Identifier	start		4861760	1					
ANR	4861933	Condition	( rot <= m_max_rotations ) && ( new_rot < 0 )	810:23:21157:21197	4861760	1	True				
ANR	4861934	AndExpression	( rot <= m_max_rotations ) && ( new_rot < 0 )		4861760	0		&&			
ANR	4861935	RelationalExpression	rot <= m_max_rotations		4861760	0		<=			
ANR	4861936	Identifier	rot		4861760	0					
ANR	4861937	Identifier	m_max_rotations		4861760	1					
ANR	4861938	RelationalExpression	new_rot < 0		4861760	1		<			
ANR	4861939	Identifier	new_rot		4861760	0					
ANR	4861940	PrimaryExpression	0		4861760	1					
ANR	4861941	PostIncDecOperationExpression	rot ++	810:66:21200:21204	4861760	2	True				
ANR	4861942	Identifier	rot		4861760	0					
ANR	4861943	IncDec	++		4861760	1					
ANR	4861944	CompoundStatement		42:2:1141:1220	4861760	3					
ANR	4861945	IdentifierDeclStatement	int score ;	811:2:21212:21222	4861760	0	True				
ANR	4861946	IdentifierDecl	score		4861760	0					
ANR	4861947	IdentifierDeclType	int		4861760	0					
ANR	4861948	Identifier	score		4861760	1					
ANR	4861949	IdentifierDeclStatement	"ReadUserLogMatch :: MatchResult result = m_match -> Match ( rot , thresh , & score ) ;"	813:2:21227:21306	4861760	1	True				
ANR	4861950	IdentifierDecl	"result = m_match -> Match ( rot , thresh , & score )"		4861760	0					
ANR	4861951	IdentifierDeclType	ReadUserLogMatch :: MatchResult		4861760	0					
ANR	4861952	Identifier	result		4861760	1					
ANR	4861953	AssignmentExpression	"result = m_match -> Match ( rot , thresh , & score )"		4861760	2		=			
ANR	4861954	Identifier	result		4861760	0					
ANR	4861955	CallExpression	"m_match -> Match ( rot , thresh , & score )"		4861760	1					
ANR	4861956	Callee	m_match -> Match		4861760	0					
ANR	4861957	PtrMemberAccess	m_match -> Match		4861760	0					
ANR	4861958	Identifier	m_match		4861760	0					
ANR	4861959	Identifier	Match		4861760	1					
ANR	4861960	ArgumentList	rot		4861760	1					
ANR	4861961	Argument	rot		4861760	0					
ANR	4861962	Identifier	rot		4861760	0					
ANR	4861963	Argument	thresh		4861760	1					
ANR	4861964	Identifier	thresh		4861760	0					
ANR	4861965	Argument	& score		4861760	2					
ANR	4861966	UnaryOperationExpression	& score		4861760	0					
ANR	4861967	UnaryOperator	&		4861760	0					
ANR	4861968	Identifier	score		4861760	1					
ANR	4861969	IfStatement	if ( ReadUserLogMatch :: MATCH_ERROR == result )		4861760	2					
ANR	4861970	Condition	ReadUserLogMatch :: MATCH_ERROR == result	815:7:21315:21353	4861760	0	True				
ANR	4861971	EqualityExpression	ReadUserLogMatch :: MATCH_ERROR == result		4861760	0		==			
ANR	4861972	Identifier	ReadUserLogMatch :: MATCH_ERROR		4861760	0					
ANR	4861973	Identifier	result		4861760	1					
ANR	4861974	CompoundStatement		44:49:1271:1271	4861760	1					
ANR	4861975	ExpressionStatement	scores [ rot ] = - 1	816:3:21362:21378	4861760	0	True				
ANR	4861976	AssignmentExpression	scores [ rot ] = - 1		4861760	0		=			
ANR	4861977	ArrayIndexing	scores [ rot ]		4861760	0					
ANR	4861978	Identifier	scores		4861760	0					
ANR	4861979	Identifier	rot		4861760	1					
ANR	4861980	UnaryOperationExpression	- 1		4861760	1					
ANR	4861981	UnaryOperator	-		4861760	0					
ANR	4861982	PrimaryExpression	1		4861760	1					
ANR	4861983	ElseStatement	else		4861760	0					
ANR	4861984	IfStatement	if ( ReadUserLogMatch :: MATCH == result )		4861760	0					
ANR	4861985	Condition	ReadUserLogMatch :: MATCH == result	818:12:21396:21428	4861760	0	True				
ANR	4861986	EqualityExpression	ReadUserLogMatch :: MATCH == result		4861760	0		==			
ANR	4861987	Identifier	ReadUserLogMatch :: MATCH		4861760	0					
ANR	4861988	Identifier	result		4861760	1					
ANR	4861989	CompoundStatement		47:48:1346:1346	4861760	1					
ANR	4861990	ExpressionStatement	new_rot = rot	819:3:21437:21450	4861760	0	True				
ANR	4861991	AssignmentExpression	new_rot = rot		4861760	0		=			
ANR	4861992	Identifier	new_rot		4861760	0					
ANR	4861993	Identifier	rot		4861760	1					
ANR	4861994	ElseStatement	else		4861760	0					
ANR	4861995	IfStatement	if ( ReadUserLogMatch :: UNKNOWN == result )		4861760	0					
ANR	4861996	Condition	ReadUserLogMatch :: UNKNOWN == result	821:12:21468:21502	4861760	0	True				
ANR	4861997	EqualityExpression	ReadUserLogMatch :: UNKNOWN == result		4861760	0		==			
ANR	4861998	Identifier	ReadUserLogMatch :: UNKNOWN		4861760	0					
ANR	4861999	Identifier	result		4861760	1					
ANR	4862000	CompoundStatement		50:50:1420:1420	4861760	1					
ANR	4862001	ExpressionStatement	scores [ rot ] = score	822:3:21511:21530	4861760	0	True				
ANR	4862002	AssignmentExpression	scores [ rot ] = score		4861760	0		=			
ANR	4862003	ArrayIndexing	scores [ rot ]		4861760	0					
ANR	4862004	Identifier	scores		4861760	0					
ANR	4862005	Identifier	rot		4861760	1					
ANR	4862006	Identifier	score		4861760	1					
ANR	4862007	IfStatement	if ( score > max_score )		4861760	1					
ANR	4862008	Condition	score > max_score	823:8:21540:21556	4861760	0	True				
ANR	4862009	RelationalExpression	score > max_score		4861760	0		>			
ANR	4862010	Identifier	score		4861760	0					
ANR	4862011	Identifier	max_score		4861760	1					
ANR	4862012	CompoundStatement		52:28:1474:1474	4861760	1					
ANR	4862013	ExpressionStatement	max_score_rot = rot	824:4:21566:21585	4861760	0	True				
ANR	4862014	AssignmentExpression	max_score_rot = rot		4861760	0		=			
ANR	4862015	Identifier	max_score_rot		4861760	0					
ANR	4862016	Identifier	rot		4861760	1					
ANR	4862017	ExpressionStatement	max_score = score	825:4:21591:21608	4861760	1	True				
ANR	4862018	AssignmentExpression	max_score = score		4861760	0		=			
ANR	4862019	Identifier	max_score		4861760	0					
ANR	4862020	Identifier	score		4861760	1					
ANR	4862021	Statement	delete	829:1:21623:21628	4861760	10	True				
ANR	4862022	Statement	[	829:8:21630:21630	4861760	11	True				
ANR	4862023	Statement	]	829:9:21631:21631	4861760	12	True				
ANR	4862024	ExpressionStatement	scores	829:11:21633:21639	4861760	13	True				
ANR	4862025	Identifier	scores		4861760	0					
ANR	4862026	IfStatement	if ( ( new_rot < 0 ) && ( max_score > 0 ) )		4861760	14					
ANR	4862027	Condition	( new_rot < 0 ) && ( max_score > 0 )	832:6:21700:21737	4861760	0	True				
ANR	4862028	AndExpression	( new_rot < 0 ) && ( max_score > 0 )		4861760	0		&&			
ANR	4862029	RelationalExpression	new_rot < 0		4861760	0		<			
ANR	4862030	Identifier	new_rot		4861760	0					
ANR	4862031	PrimaryExpression	0		4861760	1					
ANR	4862032	RelationalExpression	max_score > 0		4861760	1		>			
ANR	4862033	Identifier	max_score		4861760	0					
ANR	4862034	PrimaryExpression	0		4861760	1					
ANR	4862035	CompoundStatement		61:48:1656:1656	4861760	1					
ANR	4862036	IfStatement	if ( restore )		4861760	0					
ANR	4862037	Condition	restore	833:7:21751:21757	4861760	0	True				
ANR	4862038	Identifier	restore		4861760	0					
ANR	4862039	CompoundStatement		62:17:1675:1675	4861760	1					
ANR	4862040	ReturnStatement	return ULOG_MISSED_EVENT ;	834:3:21766:21790	4861760	0	True				
ANR	4862041	Identifier	ULOG_MISSED_EVENT		4861760	0					
ANR	4862042	ExpressionStatement	new_rot = max_score_rot	836:2:21798:21821	4861760	1	True				
ANR	4862043	AssignmentExpression	new_rot = max_score_rot		4861760	0		=			
ANR	4862044	Identifier	new_rot		4861760	0					
ANR	4862045	Identifier	max_score_rot		4861760	1					
ANR	4862046	IfStatement	if ( new_rot >= 0 )		4861760	15					
ANR	4862047	Condition	new_rot >= 0	840:6:21889:21900	4861760	0	True				
ANR	4862048	RelationalExpression	new_rot >= 0		4861760	0		>=			
ANR	4862049	Identifier	new_rot		4861760	0					
ANR	4862050	PrimaryExpression	0		4861760	1					
ANR	4862051	CompoundStatement		69:21:1818:1818	4861760	1					
ANR	4862052	IfStatement	if ( m_state -> Rotation ( new_rot ) )		4861760	0					
ANR	4862053	Condition	m_state -> Rotation ( new_rot )	841:7:21913:21940	4861760	0	True				
ANR	4862054	CallExpression	m_state -> Rotation ( new_rot )		4861760	0					
ANR	4862055	Callee	m_state -> Rotation		4861760	0					
ANR	4862056	PtrMemberAccess	m_state -> Rotation		4861760	0					
ANR	4862057	Identifier	m_state		4861760	0					
ANR	4862058	Identifier	Rotation		4861760	1					
ANR	4862059	ArgumentList	new_rot		4861760	1					
ANR	4862060	Argument	new_rot		4861760	0					
ANR	4862061	Identifier	new_rot		4861760	0					
ANR	4862062	CompoundStatement		70:38:1858:1858	4861760	1					
ANR	4862063	ExpressionStatement	"Error ( LOG_ERROR_FILE_NOT_FOUND , __LINE__ )"	842:3:21949:21992	4861760	0	True				
ANR	4862064	CallExpression	"Error ( LOG_ERROR_FILE_NOT_FOUND , __LINE__ )"		4861760	0					
ANR	4862065	Callee	Error		4861760	0					
ANR	4862066	Identifier	Error		4861760	0					
ANR	4862067	ArgumentList	LOG_ERROR_FILE_NOT_FOUND		4861760	1					
ANR	4862068	Argument	LOG_ERROR_FILE_NOT_FOUND		4861760	0					
ANR	4862069	Identifier	LOG_ERROR_FILE_NOT_FOUND		4861760	0					
ANR	4862070	Argument	__LINE__		4861760	1					
ANR	4862071	Identifier	__LINE__		4861760	0					
ANR	4862072	ReturnStatement	return ULOG_RD_ERROR ;	843:3:21997:22017	4861760	1	True				
ANR	4862073	Identifier	ULOG_RD_ERROR		4861760	0					
ANR	4862074	ReturnStatement	return OpenLogFile ( true ) ;	845:2:22025:22051	4861760	1	True				
ANR	4862075	CallExpression	OpenLogFile ( true )		4861760	0					
ANR	4862076	Callee	OpenLogFile		4861760	0					
ANR	4862077	Identifier	OpenLogFile		4861760	0					
ANR	4862078	ArgumentList	true		4861760	1					
ANR	4862079	Argument	true		4861760	0					
ANR	4862080	Identifier	true		4861760	0					
ANR	4862081	ExpressionStatement	m_state -> Reset ( )	849:1:22098:22115	4861760	16	True				
ANR	4862082	CallExpression	m_state -> Reset ( )		4861760	0					
ANR	4862083	Callee	m_state -> Reset		4861760	0					
ANR	4862084	PtrMemberAccess	m_state -> Reset		4861760	0					
ANR	4862085	Identifier	m_state		4861760	0					
ANR	4862086	Identifier	Reset		4861760	1					
ANR	4862087	ArgumentList			4861760	1					
ANR	4862088	ReturnStatement	return ULOG_MISSED_EVENT ;	850:1:22160:22184	4861760	17	True				
ANR	4862089	Identifier	ULOG_MISSED_EVENT		4861760	0					
ANR	4862090	ReturnType	ULogEventOutcome		4861760	1					
ANR	4862091	Identifier	ReadUserLog :: ReopenLogFile		4861760	2					
ANR	4862092	ParameterList	bool restore		4861760	3					
ANR	4862093	Parameter	bool restore	771:28:20070:20081	4861760	0	True				
ANR	4862094	ParameterType	bool		4861760	0					
ANR	4862095	Identifier	restore		4861760	1					
ANR	4862096	CFGEntryNode	ENTRY		4861760		True				
ANR	4862097	CFGExitNode	EXIT		4861760		True				
ANR	4862098	Symbol	FindPrevFile		4861760						
ANR	4862099	Symbol	ULOG_NO_EVENT		4861760						
ANR	4862100	Symbol	* rot		4861760						
ANR	4862101	Symbol	ReadUserLogMatch :: UNKNOWN		4861760						
ANR	4862102	Symbol	scores		4861760						
ANR	4862103	Symbol	* m_state		4861760						
ANR	4862104	Symbol	ULOG_RD_ERROR		4861760						
ANR	4862105	Symbol	ReadUserLogMatch :: MATCH_ERROR		4861760						
ANR	4862106	Symbol	* scores		4861760						
ANR	4862107	Symbol	* m_match		4861760						
ANR	4862108	Symbol	m_match -> Match		4861760						
ANR	4862109	Symbol	OpenLogFile		4861760						
ANR	4862110	Symbol	m_state -> Rotation		4861760						
ANR	4862111	Symbol	result		4861760						
ANR	4862112	Symbol	m_state		4861760						
ANR	4862113	Symbol	score		4861760						
ANR	4862114	Symbol	ReadUserLogMatch :: MATCH		4861760						
ANR	4862115	Symbol	& score		4861760						
ANR	4862116	Symbol	rot		4861760						
ANR	4862117	Symbol	m_max_rotations		4861760						
ANR	4862118	Symbol	thresh		4861760						
ANR	4862119	Symbol	m_match		4861760						
ANR	4862120	Symbol	SCORE_THRESH_RESTORE		4861760						
ANR	4862121	Symbol	restore		4861760						
ANR	4862122	Symbol	false		4861760						
ANR	4862123	Symbol	start		4861760						
ANR	4862124	Symbol	D_FULLDEBUG		4861760						
ANR	4862125	Symbol	__LINE__		4861760						
ANR	4862126	Symbol	m_fp		4861760						
ANR	4862127	Symbol	m_handle_rot		4861760						
ANR	4862128	Symbol	ULOG_OK		4861760						
ANR	4862129	Symbol	max_score		4861760						
ANR	4862130	Symbol	max_score_rot		4861760						
ANR	4862131	Symbol	true		4861760						
ANR	4862132	Symbol	new_rot		4861760						
ANR	4862133	Symbol	m_state -> IsValid		4861760						
ANR	4862134	Symbol	SCORE_THRESH_FWSEARCH		4861760						
ANR	4862135	Symbol	LOG_ERROR_FILE_NOT_FOUND		4861760						
ANR	4862136	Symbol	ULOG_MISSED_EVENT		4861760						
ANR	4862137	Function	ReadUserLog :: readEvent	853:0:22189:22287							
ANR	4862138	FunctionDef	ReadUserLog :: readEvent (ULogEvent * & event)		4862137	0					
ANR	4862139	CompoundStatement		855:0:22251:22287	4862137	0					
ANR	4862140	ReturnStatement	"return readEvent ( event , true ) ;"	856:1:22254:22285	4862137	0	True				
ANR	4862141	CallExpression	"readEvent ( event , true )"		4862137	0					
ANR	4862142	Callee	readEvent		4862137	0					
ANR	4862143	Identifier	readEvent		4862137	0					
ANR	4862144	ArgumentList	event		4862137	1					
ANR	4862145	Argument	event		4862137	0					
ANR	4862146	Identifier	event		4862137	0					
ANR	4862147	Argument	true		4862137	1					
ANR	4862148	Identifier	true		4862137	0					
ANR	4862149	ReturnType	ULogEventOutcome		4862137	1					
ANR	4862150	Identifier	ReadUserLog :: readEvent		4862137	2					
ANR	4862151	ParameterList	ULogEvent * & event		4862137	3					
ANR	4862152	Parameter	ULogEvent * & event	854:24:22230:22247	4862137	0	True				
ANR	4862153	ParameterType	ULogEvent * &		4862137	0					
ANR	4862154	Identifier	event		4862137	1					
ANR	4862155	CFGEntryNode	ENTRY		4862137		True				
ANR	4862156	CFGExitNode	EXIT		4862137		True				
ANR	4862157	Symbol	readEvent		4862137						
ANR	4862158	Symbol	true		4862137						
ANR	4862159	Symbol	event		4862137						
ANR	4862160	Function	ReadUserLog :: readEvent	859:0:22290:25988							
ANR	4862161	FunctionDef	"ReadUserLog :: readEvent (ULogEvent * & event , bool store_state)"		4862160	0					
ANR	4862162	CompoundStatement		861:0:22370:25988	4862160	0					
ANR	4862163	IfStatement	if ( ! m_initialized )		4862160	0					
ANR	4862164	Condition	! m_initialized	862:6:22378:22391	4862160	0	True				
ANR	4862165	UnaryOperationExpression	! m_initialized		4862160	0					
ANR	4862166	UnaryOperator	!		4862160	0					
ANR	4862167	Identifier	m_initialized		4862160	1					
ANR	4862168	CompoundStatement		2:23:24:24	4862160	1					
ANR	4862169	ExpressionStatement	"Error ( LOG_ERROR_NOT_INITIALIZED , __LINE__ )"	863:2:22399:22443	4862160	0	True				
ANR	4862170	CallExpression	"Error ( LOG_ERROR_NOT_INITIALIZED , __LINE__ )"		4862160	0					
ANR	4862171	Callee	Error		4862160	0					
ANR	4862172	Identifier	Error		4862160	0					
ANR	4862173	ArgumentList	LOG_ERROR_NOT_INITIALIZED		4862160	1					
ANR	4862174	Argument	LOG_ERROR_NOT_INITIALIZED		4862160	0					
ANR	4862175	Identifier	LOG_ERROR_NOT_INITIALIZED		4862160	0					
ANR	4862176	Argument	__LINE__		4862160	1					
ANR	4862177	Identifier	__LINE__		4862160	0					
ANR	4862178	ReturnStatement	return ULOG_RD_ERROR ;	864:2:22447:22467	4862160	1	True				
ANR	4862179	Identifier	ULOG_RD_ERROR		4862160	0					
ANR	4862180	IfStatement	if ( m_missed_event )		4862160	1					
ANR	4862181	Condition	m_missed_event	870:6:22658:22671	4862160	0	True				
ANR	4862182	Identifier	m_missed_event		4862160	0					
ANR	4862183	CompoundStatement		10:23:304:304	4862160	1					
ANR	4862184	ExpressionStatement	m_missed_event = false	871:2:22679:22701	4862160	0	True				
ANR	4862185	AssignmentExpression	m_missed_event = false		4862160	0		=			
ANR	4862186	Identifier	m_missed_event		4862160	0					
ANR	4862187	Identifier	false		4862160	1					
ANR	4862188	ReturnStatement	return ULOG_MISSED_EVENT ;	872:2:22705:22729	4862160	1	True				
ANR	4862189	Identifier	ULOG_MISSED_EVENT		4862160	0					
ANR	4862190	IdentifierDeclStatement	int starting_seq = m_state -> Sequence ( ) ;	875:1:22736:22775	4862160	2	True				
ANR	4862191	IdentifierDecl	starting_seq = m_state -> Sequence ( )		4862160	0					
ANR	4862192	IdentifierDeclType	int		4862160	0					
ANR	4862193	Identifier	starting_seq		4862160	1					
ANR	4862194	AssignmentExpression	starting_seq = m_state -> Sequence ( )		4862160	2		=			
ANR	4862195	Identifier	starting_seq		4862160	0					
ANR	4862196	CallExpression	m_state -> Sequence ( )		4862160	1					
ANR	4862197	Callee	m_state -> Sequence		4862160	0					
ANR	4862198	PtrMemberAccess	m_state -> Sequence		4862160	0					
ANR	4862199	Identifier	m_state		4862160	0					
ANR	4862200	Identifier	Sequence		4862160	1					
ANR	4862201	ArgumentList			4862160	1					
ANR	4862202	IdentifierDeclStatement	int starting_event = ( int ) m_state -> EventNum ( ) ;	876:1:22778:22825	4862160	3	True				
ANR	4862203	IdentifierDecl	starting_event = ( int ) m_state -> EventNum ( )		4862160	0					
ANR	4862204	IdentifierDeclType	int		4862160	0					
ANR	4862205	Identifier	starting_event		4862160	1					
ANR	4862206	AssignmentExpression	starting_event = ( int ) m_state -> EventNum ( )		4862160	2		=			
ANR	4862207	Identifier	starting_event		4862160	0					
ANR	4862208	CastExpression	( int ) m_state -> EventNum ( )		4862160	1					
ANR	4862209	CastTarget	int		4862160	0					
ANR	4862210	CallExpression	m_state -> EventNum ( )		4862160	1					
ANR	4862211	Callee	m_state -> EventNum		4862160	0					
ANR	4862212	PtrMemberAccess	m_state -> EventNum		4862160	0					
ANR	4862213	Identifier	m_state		4862160	0					
ANR	4862214	Identifier	EventNum		4862160	1					
ANR	4862215	ArgumentList			4862160	1					
ANR	4862216	IdentifierDeclStatement	filesize_t starting_recno = m_state -> LogRecordNo ( ) ;	877:1:22828:22878	4862160	4	True				
ANR	4862217	IdentifierDecl	starting_recno = m_state -> LogRecordNo ( )		4862160	0					
ANR	4862218	IdentifierDeclType	filesize_t		4862160	0					
ANR	4862219	Identifier	starting_recno		4862160	1					
ANR	4862220	AssignmentExpression	starting_recno = m_state -> LogRecordNo ( )		4862160	2		=			
ANR	4862221	Identifier	starting_recno		4862160	0					
ANR	4862222	CallExpression	m_state -> LogRecordNo ( )		4862160	1					
ANR	4862223	Callee	m_state -> LogRecordNo		4862160	0					
ANR	4862224	PtrMemberAccess	m_state -> LogRecordNo		4862160	0					
ANR	4862225	Identifier	m_state		4862160	0					
ANR	4862226	Identifier	LogRecordNo		4862160	1					
ANR	4862227	ArgumentList			4862160	1					
ANR	4862228	IfStatement	if ( ! m_fp )		4862160	5					
ANR	4862229	Condition	! m_fp	881:6:22939:22943	4862160	0	True				
ANR	4862230	UnaryOperationExpression	! m_fp		4862160	0					
ANR	4862231	UnaryOperator	!		4862160	0					
ANR	4862232	Identifier	m_fp		4862160	1					
ANR	4862233	CompoundStatement		22:2:580:622	4862160	1					
ANR	4862234	IdentifierDeclStatement	ULogEventOutcome status = ReopenLogFile ( ) ;	882:2:22951:22993	4862160	0	True				
ANR	4862235	IdentifierDecl	status = ReopenLogFile ( )		4862160	0					
ANR	4862236	IdentifierDeclType	ULogEventOutcome		4862160	0					
ANR	4862237	Identifier	status		4862160	1					
ANR	4862238	AssignmentExpression	status = ReopenLogFile ( )		4862160	2		=			
ANR	4862239	Identifier	status		4862160	0					
ANR	4862240	CallExpression	ReopenLogFile ( )		4862160	1					
ANR	4862241	Callee	ReopenLogFile		4862160	0					
ANR	4862242	Identifier	ReopenLogFile		4862160	0					
ANR	4862243	ArgumentList			4862160	1					
ANR	4862244	IfStatement	if ( ULOG_OK != status )		4862160	1					
ANR	4862245	Condition	ULOG_OK != status	883:7:23002:23018	4862160	0	True				
ANR	4862246	EqualityExpression	ULOG_OK != status		4862160	0		!=			
ANR	4862247	Identifier	ULOG_OK		4862160	0					
ANR	4862248	Identifier	status		4862160	1					
ANR	4862249	CompoundStatement		23:27:651:651	4862160	1					
ANR	4862250	ReturnStatement	return status ;	884:3:23027:23040	4862160	0	True				
ANR	4862251	Identifier	status		4862160	0					
ANR	4862252	IfStatement	if ( ! m_fp )		4862160	6					
ANR	4862253	Condition	! m_fp	888:6:23056:23060	4862160	0	True				
ANR	4862254	UnaryOperationExpression	! m_fp		4862160	0					
ANR	4862255	UnaryOperator	!		4862160	0					
ANR	4862256	Identifier	m_fp		4862160	1					
ANR	4862257	CompoundStatement		28:14:693:693	4862160	1					
ANR	4862258	ReturnStatement	return ULOG_NO_EVENT ;	889:2:23068:23088	4862160	0	True				
ANR	4862259	Identifier	ULOG_NO_EVENT		4862160	0					
ANR	4862260	IfStatement	if ( feof ( m_fp ) )		4862160	7					
ANR	4862261	Condition	feof ( m_fp )	901:6:23606:23615	4862160	0	True				
ANR	4862262	CallExpression	feof ( m_fp )		4862160	0					
ANR	4862263	Callee	feof		4862160	0					
ANR	4862264	Identifier	feof		4862160	0					
ANR	4862265	ArgumentList	m_fp		4862160	1					
ANR	4862266	Argument	m_fp		4862160	0					
ANR	4862267	Identifier	m_fp		4862160	0					
ANR	4862268	CompoundStatement		41:19:1248:1248	4862160	1					
ANR	4862269	ExpressionStatement	clearerr ( m_fp )	902:2:23623:23637	4862160	0	True				
ANR	4862270	CallExpression	clearerr ( m_fp )		4862160	0					
ANR	4862271	Callee	clearerr		4862160	0					
ANR	4862272	Identifier	clearerr		4862160	0					
ANR	4862273	ArgumentList	m_fp		4862160	1					
ANR	4862274	Argument	m_fp		4862160	0					
ANR	4862275	Identifier	m_fp		4862160	0					
ANR	4862276	IdentifierDeclStatement	ULogEventOutcome outcome = ULOG_OK ;	905:1:23645:23679	4862160	8	True				
ANR	4862277	IdentifierDecl	outcome = ULOG_OK		4862160	0					
ANR	4862278	IdentifierDeclType	ULogEventOutcome		4862160	0					
ANR	4862279	Identifier	outcome		4862160	1					
ANR	4862280	AssignmentExpression	outcome = ULOG_OK		4862160	2		=			
ANR	4862281	Identifier	ULOG_OK		4862160	0					
ANR	4862282	Identifier	ULOG_OK		4862160	1					
ANR	4862283	IdentifierDeclStatement	bool try_again = false ;	906:1:23682:23704	4862160	9	True				
ANR	4862284	IdentifierDecl	try_again = false		4862160	0					
ANR	4862285	IdentifierDeclType	bool		4862160	0					
ANR	4862286	Identifier	try_again		4862160	1					
ANR	4862287	AssignmentExpression	try_again = false		4862160	2		=			
ANR	4862288	Identifier	false		4862160	0					
ANR	4862289	Identifier	false		4862160	1					
ANR	4862290	IfStatement	if ( m_state -> IsLogType ( ReadUserLogState :: LOG_TYPE_UNKNOWN ) )		4862160	10					
ANR	4862291	Condition	m_state -> IsLogType ( ReadUserLogState :: LOG_TYPE_UNKNOWN )	907:5:23711:23766	4862160	0	True				
ANR	4862292	CallExpression	m_state -> IsLogType ( ReadUserLogState :: LOG_TYPE_UNKNOWN )		4862160	0					
ANR	4862293	Callee	m_state -> IsLogType		4862160	0					
ANR	4862294	PtrMemberAccess	m_state -> IsLogType		4862160	0					
ANR	4862295	Identifier	m_state		4862160	0					
ANR	4862296	Identifier	IsLogType		4862160	1					
ANR	4862297	ArgumentList	ReadUserLogState :: LOG_TYPE_UNKNOWN		4862160	1					
ANR	4862298	Argument	ReadUserLogState :: LOG_TYPE_UNKNOWN		4862160	0					
ANR	4862299	Identifier	ReadUserLogState :: LOG_TYPE_UNKNOWN		4862160	0					
ANR	4862300	CompoundStatement		47:64:1399:1399	4862160	1					
ANR	4862301	IfStatement	if ( ! determineLogType ( ) )		4862160	0					
ANR	4862302	Condition	! determineLogType ( )	908:9:23781:23799	4862160	0	True				
ANR	4862303	UnaryOperationExpression	! determineLogType ( )		4862160	0					
ANR	4862304	UnaryOperator	!		4862160	0					
ANR	4862305	CallExpression	determineLogType ( )		4862160	1					
ANR	4862306	Callee	determineLogType		4862160	0					
ANR	4862307	Identifier	determineLogType		4862160	0					
ANR	4862308	ArgumentList			4862160	1					
ANR	4862309	CompoundStatement		48:31:1432:1432	4862160	1					
ANR	4862310	ExpressionStatement	outcome = ULOG_RD_ERROR	909:3:23808:23831	4862160	0	True				
ANR	4862311	AssignmentExpression	outcome = ULOG_RD_ERROR		4862160	0		=			
ANR	4862312	Identifier	outcome		4862160	0					
ANR	4862313	Identifier	ULOG_RD_ERROR		4862160	1					
ANR	4862314	ExpressionStatement	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"	910:3:23836:23875	4862160	1	True				
ANR	4862315	CallExpression	"Error ( LOG_ERROR_FILE_OTHER , __LINE__ )"		4862160	0					
ANR	4862316	Callee	Error		4862160	0					
ANR	4862317	Identifier	Error		4862160	0					
ANR	4862318	ArgumentList	LOG_ERROR_FILE_OTHER		4862160	1					
ANR	4862319	Argument	LOG_ERROR_FILE_OTHER		4862160	0					
ANR	4862320	Identifier	LOG_ERROR_FILE_OTHER		4862160	0					
ANR	4862321	Argument	__LINE__		4862160	1					
ANR	4862322	Identifier	__LINE__		4862160	0					
ANR	4862323	GotoStatement	goto CLEANUP ;	911:3:23880:23892	4862160	2	True				
ANR	4862324	Identifier	CLEANUP		4862160	0					
ANR	4862325	ExpressionStatement	"outcome = readEvent ( event , & try_again )"	916:1:23963:24003	4862160	11	True				
ANR	4862326	AssignmentExpression	"outcome = readEvent ( event , & try_again )"		4862160	0		=			
ANR	4862327	Identifier	outcome		4862160	0					
ANR	4862328	CallExpression	"readEvent ( event , & try_again )"		4862160	1					
ANR	4862329	Callee	readEvent		4862160	0					
ANR	4862330	Identifier	readEvent		4862160	0					
ANR	4862331	ArgumentList	event		4862160	1					
ANR	4862332	Argument	event		4862160	0					
ANR	4862333	Identifier	event		4862160	0					
ANR	4862334	Argument	& try_again		4862160	1					
ANR	4862335	UnaryOperationExpression	& try_again		4862160	0					
ANR	4862336	UnaryOperator	&		4862160	0					
ANR	4862337	Identifier	try_again		4862160	1					
ANR	4862338	IfStatement	if ( ! m_handle_rot )		4862160	12					
ANR	4862339	Condition	! m_handle_rot	917:6:24011:24024	4862160	0	True				
ANR	4862340	UnaryOperationExpression	! m_handle_rot		4862160	0					
ANR	4862341	UnaryOperator	!		4862160	0					
ANR	4862342	Identifier	m_handle_rot		4862160	1					
ANR	4862343	CompoundStatement		57:23:1657:1657	4862160	1					
ANR	4862344	ExpressionStatement	try_again = false	918:2:24032:24049	4862160	0	True				
ANR	4862345	AssignmentExpression	try_again = false		4862160	0		=			
ANR	4862346	Identifier	try_again		4862160	0					
ANR	4862347	Identifier	false		4862160	1					
ANR	4862348	IfStatement	if ( try_again )		4862160	13					
ANR	4862349	Condition	try_again	922:6:24123:24131	4862160	0	True				
ANR	4862350	Identifier	try_again		4862160	0					
ANR	4862351	CompoundStatement		62:18:1764:1764	4862160	1					
ANR	4862352	IfStatement	if ( m_state -> Rotation ( ) < 0 )		4862160	0					
ANR	4862353	Condition	m_state -> Rotation ( ) < 0	926:7:24247:24269	4862160	0	True				
ANR	4862354	RelationalExpression	m_state -> Rotation ( ) < 0		4862160	0		<			
ANR	4862355	CallExpression	m_state -> Rotation ( )		4862160	0					
ANR	4862356	Callee	m_state -> Rotation		4862160	0					
ANR	4862357	PtrMemberAccess	m_state -> Rotation		4862160	0					
ANR	4862358	Identifier	m_state		4862160	0					
ANR	4862359	Identifier	Rotation		4862160	1					
ANR	4862360	ArgumentList			4862160	1					
ANR	4862361	PrimaryExpression	0		4862160	1					
ANR	4862362	CompoundStatement		66:33:1902:1902	4862160	1					
ANR	4862363	ReturnStatement	return ULOG_MISSED_EVENT ;	927:3:24278:24302	4862160	0	True				
ANR	4862364	Identifier	ULOG_MISSED_EVENT		4862160	0					
ANR	4862365	ElseStatement	else		4862160	0					
ANR	4862366	IfStatement	if ( m_state -> Rotation ( ) == 0 )		4862160	0					
ANR	4862367	Condition	m_state -> Rotation ( ) == 0	932:12:24414:24437	4862160	0	True				
ANR	4862368	EqualityExpression	m_state -> Rotation ( ) == 0		4862160	0		==			
ANR	4862369	CallExpression	m_state -> Rotation ( )		4862160	0					
ANR	4862370	Callee	m_state -> Rotation		4862160	0					
ANR	4862371	PtrMemberAccess	m_state -> Rotation		4862160	0					
ANR	4862372	Identifier	m_state		4862160	0					
ANR	4862373	Identifier	Rotation		4862160	1					
ANR	4862374	ArgumentList			4862160	1					
ANR	4862375	PrimaryExpression	0		4862160	1					
ANR	4862376	CompoundStatement		74:3:2092:2128	4862160	1					
ANR	4862377	IdentifierDeclStatement	ReadUserLogMatch :: MatchResult result ;	934:3:24463:24499	4862160	0	True				
ANR	4862378	IdentifierDecl	result		4862160	0					
ANR	4862379	IdentifierDeclType	ReadUserLogMatch :: MatchResult		4862160	0					
ANR	4862380	Identifier	result		4862160	1					
ANR	4862381	ExpressionStatement	"result = m_match -> Match ( m_state -> CurPath ( ) , m_state -> Rotation ( ) , SCORE_THRESH_NONROT )"	935:3:24504:24611	4862160	1	True				
ANR	4862382	AssignmentExpression	"result = m_match -> Match ( m_state -> CurPath ( ) , m_state -> Rotation ( ) , SCORE_THRESH_NONROT )"		4862160	0		=			
ANR	4862383	Identifier	result		4862160	0					
ANR	4862384	CallExpression	"m_match -> Match ( m_state -> CurPath ( ) , m_state -> Rotation ( ) , SCORE_THRESH_NONROT )"		4862160	1					
ANR	4862385	Callee	m_match -> Match		4862160	0					
ANR	4862386	PtrMemberAccess	m_match -> Match		4862160	0					
ANR	4862387	Identifier	m_match		4862160	0					
ANR	4862388	Identifier	Match		4862160	1					
ANR	4862389	ArgumentList	m_state -> CurPath ( )		4862160	1					
ANR	4862390	Argument	m_state -> CurPath ( )		4862160	0					
ANR	4862391	CallExpression	m_state -> CurPath ( )		4862160	0					
ANR	4862392	Callee	m_state -> CurPath		4862160	0					
ANR	4862393	PtrMemberAccess	m_state -> CurPath		4862160	0					
ANR	4862394	Identifier	m_state		4862160	0					
ANR	4862395	Identifier	CurPath		4862160	1					
ANR	4862396	ArgumentList			4862160	1					
ANR	4862397	Argument	m_state -> Rotation ( )		4862160	1					
ANR	4862398	CallExpression	m_state -> Rotation ( )		4862160	0					
ANR	4862399	Callee	m_state -> Rotation		4862160	0					
ANR	4862400	PtrMemberAccess	m_state -> Rotation		4862160	0					
ANR	4862401	Identifier	m_state		4862160	0					
ANR	4862402	Identifier	Rotation		4862160	1					
ANR	4862403	ArgumentList			4862160	1					
ANR	4862404	Argument	SCORE_THRESH_NONROT		4862160	2					
ANR	4862405	Identifier	SCORE_THRESH_NONROT		4862160	0					
ANR	4862406	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""readEvent: checking to see if file (%s) matches: %s\\n"" , m_state -> CurPath ( ) , m_match -> MatchStr ( result ) )"	938:3:24616:24754	4862160	2	True				
ANR	4862407	CallExpression	"dprintf ( D_FULLDEBUG , ""readEvent: checking to see if file (%s) matches: %s\\n"" , m_state -> CurPath ( ) , m_match -> MatchStr ( result ) )"		4862160	0					
ANR	4862408	Callee	dprintf		4862160	0					
ANR	4862409	Identifier	dprintf		4862160	0					
ANR	4862410	ArgumentList	D_FULLDEBUG		4862160	1					
ANR	4862411	Argument	D_FULLDEBUG		4862160	0					
ANR	4862412	Identifier	D_FULLDEBUG		4862160	0					
ANR	4862413	Argument	"""readEvent: checking to see if file (%s) matches: %s\\n"""		4862160	1					
ANR	4862414	PrimaryExpression	"""readEvent: checking to see if file (%s) matches: %s\\n"""		4862160	0					
ANR	4862415	Argument	m_state -> CurPath ( )		4862160	2					
ANR	4862416	CallExpression	m_state -> CurPath ( )		4862160	0					
ANR	4862417	Callee	m_state -> CurPath		4862160	0					
ANR	4862418	PtrMemberAccess	m_state -> CurPath		4862160	0					
ANR	4862419	Identifier	m_state		4862160	0					
ANR	4862420	Identifier	CurPath		4862160	1					
ANR	4862421	ArgumentList			4862160	1					
ANR	4862422	Argument	m_match -> MatchStr ( result )		4862160	3					
ANR	4862423	CallExpression	m_match -> MatchStr ( result )		4862160	0					
ANR	4862424	Callee	m_match -> MatchStr		4862160	0					
ANR	4862425	PtrMemberAccess	m_match -> MatchStr		4862160	0					
ANR	4862426	Identifier	m_match		4862160	0					
ANR	4862427	Identifier	MatchStr		4862160	1					
ANR	4862428	ArgumentList	result		4862160	1					
ANR	4862429	Argument	result		4862160	0					
ANR	4862430	Identifier	result		4862160	0					
ANR	4862431	IfStatement	if ( result == ReadUserLogMatch :: NOMATCH )		4862160	3					
ANR	4862432	Condition	result == ReadUserLogMatch :: NOMATCH	941:8:24764:24798	4862160	0	True				
ANR	4862433	EqualityExpression	result == ReadUserLogMatch :: NOMATCH		4862160	0		==			
ANR	4862434	Identifier	result		4862160	0					
ANR	4862435	Identifier	ReadUserLogMatch :: NOMATCH		4862160	1					
ANR	4862436	CompoundStatement		81:46:2431:2431	4862160	1					
ANR	4862437	ExpressionStatement	CloseLogFile ( true )	942:4:24808:24828	4862160	0	True				
ANR	4862438	CallExpression	CloseLogFile ( true )		4862160	0					
ANR	4862439	Callee	CloseLogFile		4862160	0					
ANR	4862440	Identifier	CloseLogFile		4862160	0					
ANR	4862441	ArgumentList	true		4862160	1					
ANR	4862442	Argument	true		4862160	0					
ANR	4862443	Identifier	true		4862160	0					
ANR	4862444	ElseStatement	else		4862160	0					
ANR	4862445	CompoundStatement		84:8:2472:2472	4862160	0					
ANR	4862446	ExpressionStatement	try_again = false	945:4:24849:24866	4862160	0	True				
ANR	4862447	AssignmentExpression	try_again = false		4862160	0		=			
ANR	4862448	Identifier	try_again		4862160	0					
ANR	4862449	Identifier	false		4862160	1					
ANR	4862450	ElseStatement	else		4862160	0					
ANR	4862451	CompoundStatement		93:3:2603:2664	4862160	0					
ANR	4862452	ExpressionStatement	CloseLogFile ( true )	951:3:24948:24968	4862160	0	True				
ANR	4862453	CallExpression	CloseLogFile ( true )		4862160	0					
ANR	4862454	Callee	CloseLogFile		4862160	0					
ANR	4862455	Identifier	CloseLogFile		4862160	0					
ANR	4862456	ArgumentList	true		4862160	1					
ANR	4862457	Argument	true		4862160	0					
ANR	4862458	Identifier	true		4862160	0					
ANR	4862459	IdentifierDeclStatement	"bool found = FindPrevFile ( m_state -> Rotation ( ) - 1 , 1 , true ) ;"	953:3:24974:25035	4862160	1	True				
ANR	4862460	IdentifierDecl	"found = FindPrevFile ( m_state -> Rotation ( ) - 1 , 1 , true )"		4862160	0					
ANR	4862461	IdentifierDeclType	bool		4862160	0					
ANR	4862462	Identifier	found		4862160	1					
ANR	4862463	AssignmentExpression	"found = FindPrevFile ( m_state -> Rotation ( ) - 1 , 1 , true )"		4862160	2		=			
ANR	4862464	Identifier	found		4862160	0					
ANR	4862465	CallExpression	"FindPrevFile ( m_state -> Rotation ( ) - 1 , 1 , true )"		4862160	1					
ANR	4862466	Callee	FindPrevFile		4862160	0					
ANR	4862467	Identifier	FindPrevFile		4862160	0					
ANR	4862468	ArgumentList	m_state -> Rotation ( ) - 1		4862160	1					
ANR	4862469	Argument	m_state -> Rotation ( ) - 1		4862160	0					
ANR	4862470	AdditiveExpression	m_state -> Rotation ( ) - 1		4862160	0		-			
ANR	4862471	CallExpression	m_state -> Rotation ( )		4862160	0					
ANR	4862472	Callee	m_state -> Rotation		4862160	0					
ANR	4862473	PtrMemberAccess	m_state -> Rotation		4862160	0					
ANR	4862474	Identifier	m_state		4862160	0					
ANR	4862475	Identifier	Rotation		4862160	1					
ANR	4862476	ArgumentList			4862160	1					
ANR	4862477	PrimaryExpression	1		4862160	1					
ANR	4862478	Argument	1		4862160	1					
ANR	4862479	PrimaryExpression	1		4862160	0					
ANR	4862480	Argument	true		4862160	2					
ANR	4862481	Identifier	true		4862160	0					
ANR	4862482	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""readEvent: checking for previous file (# %d): %s\\n"" , m_state -> Rotation ( ) , found ? ""Found"" : ""Not found"" )"	954:3:25040:25180	4862160	2	True				
ANR	4862483	CallExpression	"dprintf ( D_FULLDEBUG , ""readEvent: checking for previous file (# %d): %s\\n"" , m_state -> Rotation ( ) , found ? ""Found"" : ""Not found"" )"		4862160	0					
ANR	4862484	Callee	dprintf		4862160	0					
ANR	4862485	Identifier	dprintf		4862160	0					
ANR	4862486	ArgumentList	D_FULLDEBUG		4862160	1					
ANR	4862487	Argument	D_FULLDEBUG		4862160	0					
ANR	4862488	Identifier	D_FULLDEBUG		4862160	0					
ANR	4862489	Argument	"""readEvent: checking for previous file (# %d): %s\\n"""		4862160	1					
ANR	4862490	PrimaryExpression	"""readEvent: checking for previous file (# %d): %s\\n"""		4862160	0					
ANR	4862491	Argument	m_state -> Rotation ( )		4862160	2					
ANR	4862492	CallExpression	m_state -> Rotation ( )		4862160	0					
ANR	4862493	Callee	m_state -> Rotation		4862160	0					
ANR	4862494	PtrMemberAccess	m_state -> Rotation		4862160	0					
ANR	4862495	Identifier	m_state		4862160	0					
ANR	4862496	Identifier	Rotation		4862160	1					
ANR	4862497	ArgumentList			4862160	1					
ANR	4862498	Argument	"found ? ""Found"" : ""Not found"""		4862160	3					
ANR	4862499	ConditionalExpression	"found ? ""Found"" : ""Not found"""		4862160	0					
ANR	4862500	Condition	found		4862160	0					
ANR	4862501	Identifier	found		4862160	0					
ANR	4862502	PrimaryExpression	"""Found"""		4862160	1					
ANR	4862503	PrimaryExpression	"""Not found"""		4862160	2					
ANR	4862504	IfStatement	if ( found )		4862160	3					
ANR	4862505	Condition	found	957:8:25190:25194	4862160	0	True				
ANR	4862506	Identifier	found		4862160	0					
ANR	4862507	CompoundStatement		97:16:2827:2827	4862160	1					
ANR	4862508	ExpressionStatement	CloseLogFile ( true )	958:4:25204:25224	4862160	0	True				
ANR	4862509	CallExpression	CloseLogFile ( true )		4862160	0					
ANR	4862510	Callee	CloseLogFile		4862160	0					
ANR	4862511	Identifier	CloseLogFile		4862160	0					
ANR	4862512	ArgumentList	true		4862160	1					
ANR	4862513	Argument	true		4862160	0					
ANR	4862514	Identifier	true		4862160	0					
ANR	4862515	ElseStatement	else		4862160	0					
ANR	4862516	CompoundStatement		100:8:2868:2868	4862160	0					
ANR	4862517	ExpressionStatement	try_again = false	961:4:25245:25262	4862160	0	True				
ANR	4862518	AssignmentExpression	try_again = false		4862160	0		=			
ANR	4862519	Identifier	try_again		4862160	0					
ANR	4862520	Identifier	false		4862160	1					
ANR	4862521	IfStatement	if ( try_again )		4862160	14					
ANR	4862522	Condition	try_again	967:6:25330:25338	4862160	0	True				
ANR	4862523	Identifier	try_again		4862160	0					
ANR	4862524	CompoundStatement		107:18:2971:2971	4862160	1					
ANR	4862525	ExpressionStatement	outcome = ReopenLogFile ( )	968:2:25346:25371	4862160	0	True				
ANR	4862526	AssignmentExpression	outcome = ReopenLogFile ( )		4862160	0		=			
ANR	4862527	Identifier	outcome		4862160	0					
ANR	4862528	CallExpression	ReopenLogFile ( )		4862160	1					
ANR	4862529	Callee	ReopenLogFile		4862160	0					
ANR	4862530	Identifier	ReopenLogFile		4862160	0					
ANR	4862531	ArgumentList			4862160	1					
ANR	4862532	IfStatement	if ( ULOG_OK == outcome )		4862160	1					
ANR	4862533	Condition	ULOG_OK == outcome	969:7:25380:25397	4862160	0	True				
ANR	4862534	EqualityExpression	ULOG_OK == outcome		4862160	0		==			
ANR	4862535	Identifier	ULOG_OK		4862160	0					
ANR	4862536	Identifier	outcome		4862160	1					
ANR	4862537	CompoundStatement		109:28:3030:3030	4862160	1					
ANR	4862538	ExpressionStatement	"outcome = readEvent ( event , ( bool * ) NULL )"	970:3:25406:25447	4862160	0	True				
ANR	4862539	AssignmentExpression	"outcome = readEvent ( event , ( bool * ) NULL )"		4862160	0		=			
ANR	4862540	Identifier	outcome		4862160	0					
ANR	4862541	CallExpression	"readEvent ( event , ( bool * ) NULL )"		4862160	1					
ANR	4862542	Callee	readEvent		4862160	0					
ANR	4862543	Identifier	readEvent		4862160	0					
ANR	4862544	ArgumentList	event		4862160	1					
ANR	4862545	Argument	event		4862160	0					
ANR	4862546	Identifier	event		4862160	0					
ANR	4862547	Argument	( bool * ) NULL		4862160	1					
ANR	4862548	CastExpression	( bool * ) NULL		4862160	0					
ANR	4862549	CastTarget	bool *		4862160	0					
ANR	4862550	Identifier	NULL		4862160	1					
ANR	4862551	IfStatement	if ( ( ULOG_OK == outcome ) && ( store_state ) )		4862160	15					
ANR	4862552	Condition	( ULOG_OK == outcome ) && ( store_state )	975:7:25497:25537	4862160	0	True				
ANR	4862553	AndExpression	( ULOG_OK == outcome ) && ( store_state )		4862160	0		&&			
ANR	4862554	EqualityExpression	ULOG_OK == outcome		4862160	0		==			
ANR	4862555	Identifier	ULOG_OK		4862160	0					
ANR	4862556	Identifier	outcome		4862160	1					
ANR	4862557	Identifier	store_state		4862160	1					
ANR	4862558	CompoundStatement		116:2:3176:3200	4862160	1					
ANR	4862559	IdentifierDeclStatement	long pos = ftell ( m_fp ) ;	976:2:25547:25571	4862160	0	True				
ANR	4862560	IdentifierDecl	pos = ftell ( m_fp )		4862160	0					
ANR	4862561	IdentifierDeclType	long		4862160	0					
ANR	4862562	Identifier	pos		4862160	1					
ANR	4862563	AssignmentExpression	pos = ftell ( m_fp )		4862160	2		=			
ANR	4862564	Identifier	pos		4862160	0					
ANR	4862565	CallExpression	ftell ( m_fp )		4862160	1					
ANR	4862566	Callee	ftell		4862160	0					
ANR	4862567	Identifier	ftell		4862160	0					
ANR	4862568	ArgumentList	m_fp		4862160	1					
ANR	4862569	Argument	m_fp		4862160	0					
ANR	4862570	Identifier	m_fp		4862160	0					
ANR	4862571	IfStatement	if ( pos > 0 )		4862160	1					
ANR	4862572	Condition	pos > 0	977:7:25580:25586	4862160	0	True				
ANR	4862573	RelationalExpression	pos > 0		4862160	0		>			
ANR	4862574	Identifier	pos		4862160	0					
ANR	4862575	PrimaryExpression	0		4862160	1					
ANR	4862576	CompoundStatement		117:17:3219:3219	4862160	1					
ANR	4862577	ExpressionStatement	m_state -> Offset ( pos )	978:3:25595:25617	4862160	0	True				
ANR	4862578	CallExpression	m_state -> Offset ( pos )		4862160	0					
ANR	4862579	Callee	m_state -> Offset		4862160	0					
ANR	4862580	PtrMemberAccess	m_state -> Offset		4862160	0					
ANR	4862581	Identifier	m_state		4862160	0					
ANR	4862582	Identifier	Offset		4862160	1					
ANR	4862583	ArgumentList	pos		4862160	1					
ANR	4862584	Argument	pos		4862160	0					
ANR	4862585	Identifier	pos		4862160	0					
ANR	4862586	IfStatement	if ( ( m_state -> Sequence ( ) != starting_seq ) && ( 0 == m_state -> LogRecordNo ( ) ) )		4862160	2					
ANR	4862587	Condition	( m_state -> Sequence ( ) != starting_seq ) && ( 0 == m_state -> LogRecordNo ( ) )	981:7:25631:25708	4862160	0	True				
ANR	4862588	AndExpression	( m_state -> Sequence ( ) != starting_seq ) && ( 0 == m_state -> LogRecordNo ( ) )		4862160	0		&&			
ANR	4862589	EqualityExpression	m_state -> Sequence ( ) != starting_seq		4862160	0		!=			
ANR	4862590	CallExpression	m_state -> Sequence ( )		4862160	0					
ANR	4862591	Callee	m_state -> Sequence		4862160	0					
ANR	4862592	PtrMemberAccess	m_state -> Sequence		4862160	0					
ANR	4862593	Identifier	m_state		4862160	0					
ANR	4862594	Identifier	Sequence		4862160	1					
ANR	4862595	ArgumentList			4862160	1					
ANR	4862596	Identifier	starting_seq		4862160	1					
ANR	4862597	EqualityExpression	0 == m_state -> LogRecordNo ( )		4862160	1		==			
ANR	4862598	PrimaryExpression	0		4862160	0					
ANR	4862599	CallExpression	m_state -> LogRecordNo ( )		4862160	1					
ANR	4862600	Callee	m_state -> LogRecordNo		4862160	0					
ANR	4862601	PtrMemberAccess	m_state -> LogRecordNo		4862160	0					
ANR	4862602	Identifier	m_state		4862160	0					
ANR	4862603	Identifier	LogRecordNo		4862160	1					
ANR	4862604	ArgumentList			4862160	1					
ANR	4862605	CompoundStatement		122:38:3341:3341	4862160	1					
ANR	4862606	ExpressionStatement	m_state -> LogRecordNo ( starting_recno + starting_event - 1 )	984:3:25772:25831	4862160	0	True				
ANR	4862607	CallExpression	m_state -> LogRecordNo ( starting_recno + starting_event - 1 )		4862160	0					
ANR	4862608	Callee	m_state -> LogRecordNo		4862160	0					
ANR	4862609	PtrMemberAccess	m_state -> LogRecordNo		4862160	0					
ANR	4862610	Identifier	m_state		4862160	0					
ANR	4862611	Identifier	LogRecordNo		4862160	1					
ANR	4862612	ArgumentList	starting_recno + starting_event - 1		4862160	1					
ANR	4862613	Argument	starting_recno + starting_event - 1		4862160	0					
ANR	4862614	AdditiveExpression	starting_recno + starting_event - 1		4862160	0		+			
ANR	4862615	Identifier	starting_recno		4862160	0					
ANR	4862616	AdditiveExpression	starting_event - 1		4862160	1		-			
ANR	4862617	Identifier	starting_event		4862160	0					
ANR	4862618	PrimaryExpression	1		4862160	1					
ANR	4862619	ExpressionStatement	m_state -> EventNumInc ( )	986:2:25839:25861	4862160	3	True				
ANR	4862620	CallExpression	m_state -> EventNumInc ( )		4862160	0					
ANR	4862621	Callee	m_state -> EventNumInc		4862160	0					
ANR	4862622	PtrMemberAccess	m_state -> EventNumInc		4862160	0					
ANR	4862623	Identifier	m_state		4862160	0					
ANR	4862624	Identifier	EventNumInc		4862160	1					
ANR	4862625	ArgumentList			4862160	1					
ANR	4862626	ExpressionStatement	m_state -> StatFile ( m_fd )	987:2:25865:25890	4862160	4	True				
ANR	4862627	CallExpression	m_state -> StatFile ( m_fd )		4862160	0					
ANR	4862628	Callee	m_state -> StatFile		4862160	0					
ANR	4862629	PtrMemberAccess	m_state -> StatFile		4862160	0					
ANR	4862630	Identifier	m_state		4862160	0					
ANR	4862631	Identifier	StatFile		4862160	1					
ANR	4862632	ArgumentList	m_fd		4862160	1					
ANR	4862633	Argument	m_fd		4862160	0					
ANR	4862634	Identifier	m_fd		4862160	0					
ANR	4862635	Label	CLEANUP :	991:2:25936:25943	4862160	16	True				
ANR	4862636	Identifier	CLEANUP		4862160	0					
ANR	4862637	ExpressionStatement	CloseLogFile ( false )	992:1:25946:25967	4862160	17	True				
ANR	4862638	CallExpression	CloseLogFile ( false )		4862160	0					
ANR	4862639	Callee	CloseLogFile		4862160	0					
ANR	4862640	Identifier	CloseLogFile		4862160	0					
ANR	4862641	ArgumentList	false		4862160	1					
ANR	4862642	Argument	false		4862160	0					
ANR	4862643	Identifier	false		4862160	0					
ANR	4862644	ReturnStatement	return outcome ;	994:1:25971:25985	4862160	18	True				
ANR	4862645	Identifier	outcome		4862160	0					
ANR	4862646	ReturnType	ULogEventOutcome		4862160	1					
ANR	4862647	Identifier	ReadUserLog :: readEvent		4862160	2					
ANR	4862648	ParameterList	"ULogEvent * & event , bool store_state"		4862160	3					
ANR	4862649	Parameter	ULogEvent * & event	860:24:22331:22348	4862160	0	True				
ANR	4862650	ParameterType	ULogEvent * &		4862160	0					
ANR	4862651	Identifier	event		4862160	1					
ANR	4862652	Parameter	bool store_state	860:44:22351:22366	4862160	1	True				
ANR	4862653	ParameterType	bool		4862160	0					
ANR	4862654	Identifier	store_state		4862160	1					
ANR	4862655	CFGEntryNode	ENTRY		4862160		True				
ANR	4862656	CFGExitNode	EXIT		4862160		True				
ANR	4862657	Symbol	LOG_ERROR_NOT_INITIALIZED		4862160						
ANR	4862658	Symbol	readEvent		4862160						
ANR	4862659	Symbol	m_state		4862160						
ANR	4862660	Symbol	starting_event		4862160						
ANR	4862661	Symbol	m_match		4862160						
ANR	4862662	Symbol	NULL		4862160						
ANR	4862663	Symbol	ReopenLogFile		4862160						
ANR	4862664	Symbol	D_FULLDEBUG		4862160						
ANR	4862665	Symbol	ReadUserLogMatch :: NOMATCH		4862160						
ANR	4862666	Symbol	m_handle_rot		4862160						
ANR	4862667	Symbol	true		4862160						
ANR	4862668	Symbol	& try_again		4862160						
ANR	4862669	Symbol	status		4862160						
ANR	4862670	Symbol	FindPrevFile		4862160						
ANR	4862671	Symbol	store_state		4862160						
ANR	4862672	Symbol	m_initialized		4862160						
ANR	4862673	Symbol	ULOG_NO_EVENT		4862160						
ANR	4862674	Symbol	ftell		4862160						
ANR	4862675	Symbol	m_state -> IsLogType		4862160						
ANR	4862676	Symbol	ULOG_RD_ERROR		4862160						
ANR	4862677	Symbol	* m_state		4862160						
ANR	4862678	Symbol	LOG_ERROR_FILE_OTHER		4862160						
ANR	4862679	Symbol	* m_match		4862160						
ANR	4862680	Symbol	m_state -> EventNum		4862160						
ANR	4862681	Symbol	m_match -> Match		4862160						
ANR	4862682	Symbol	SCORE_THRESH_NONROT		4862160						
ANR	4862683	Symbol	m_state -> Rotation		4862160						
ANR	4862684	Symbol	result		4862160						
ANR	4862685	Symbol	m_match -> MatchStr		4862160						
ANR	4862686	Symbol	m_state -> CurPath		4862160						
ANR	4862687	Symbol	found		4862160						
ANR	4862688	Symbol	pos		4862160						
ANR	4862689	Symbol	event		4862160						
ANR	4862690	Symbol	outcome		4862160						
ANR	4862691	Symbol	starting_seq		4862160						
ANR	4862692	Symbol	try_again		4862160						
ANR	4862693	Symbol	m_fd		4862160						
ANR	4862694	Symbol	determineLogType		4862160						
ANR	4862695	Symbol	starting_recno		4862160						
ANR	4862696	Symbol	false		4862160						
ANR	4862697	Symbol	m_missed_event		4862160						
ANR	4862698	Symbol	__LINE__		4862160						
ANR	4862699	Symbol	m_fp		4862160						
ANR	4862700	Symbol	ULOG_OK		4862160						
ANR	4862701	Symbol	m_state -> LogRecordNo		4862160						
ANR	4862702	Symbol	feof		4862160						
ANR	4862703	Symbol	m_state -> Sequence		4862160						
ANR	4862704	Symbol	ReadUserLogState :: LOG_TYPE_UNKNOWN		4862160						
ANR	4862705	Symbol	ULOG_MISSED_EVENT		4862160						
ANR	4862706	Function	ReadUserLog :: readEvent	998:0:25991:26545							
ANR	4862707	FunctionDef	"ReadUserLog :: readEvent (ULogEvent * & event , bool * try_again)"		4862706	0					
ANR	4862708	CompoundStatement		1000:0:26070:26545	4862706	0					
ANR	4862709	IdentifierDeclStatement	ULogEventOutcome outcome ;	1001:1:26073:26097	4862706	0	True				
ANR	4862710	IdentifierDecl	outcome		4862706	0					
ANR	4862711	IdentifierDeclType	ULogEventOutcome		4862706	0					
ANR	4862712	Identifier	outcome		4862706	1					
ANR	4862713	IfStatement	if ( m_state -> IsLogType ( ReadUserLogState :: LOG_TYPE_XML ) )		4862706	1					
ANR	4862714	Condition	m_state -> IsLogType ( ReadUserLogState :: LOG_TYPE_XML )	1003:5:26105:26156	4862706	0	True				
ANR	4862715	CallExpression	m_state -> IsLogType ( ReadUserLogState :: LOG_TYPE_XML )		4862706	0					
ANR	4862716	Callee	m_state -> IsLogType		4862706	0					
ANR	4862717	PtrMemberAccess	m_state -> IsLogType		4862706	0					
ANR	4862718	Identifier	m_state		4862706	0					
ANR	4862719	Identifier	IsLogType		4862706	1					
ANR	4862720	ArgumentList	ReadUserLogState :: LOG_TYPE_XML		4862706	1					
ANR	4862721	Argument	ReadUserLogState :: LOG_TYPE_XML		4862706	0					
ANR	4862722	Identifier	ReadUserLogState :: LOG_TYPE_XML		4862706	0					
ANR	4862723	CompoundStatement		4:60:89:89	4862706	1					
ANR	4862724	ExpressionStatement	outcome = readEventXML ( event )	1004:2:26164:26195	4862706	0	True				
ANR	4862725	AssignmentExpression	outcome = readEventXML ( event )		4862706	0		=			
ANR	4862726	Identifier	outcome		4862706	0					
ANR	4862727	CallExpression	readEventXML ( event )		4862706	1					
ANR	4862728	Callee	readEventXML		4862706	0					
ANR	4862729	Identifier	readEventXML		4862706	0					
ANR	4862730	ArgumentList	event		4862706	1					
ANR	4862731	Argument	event		4862706	0					
ANR	4862732	Identifier	event		4862706	0					
ANR	4862733	IfStatement	if ( try_again )		4862706	1					
ANR	4862734	Condition	try_again	1005:7:26204:26212	4862706	0	True				
ANR	4862735	Identifier	try_again		4862706	0					
ANR	4862736	CompoundStatement		6:19:145:145	4862706	1					
ANR	4862737	ExpressionStatement	* try_again = ( outcome == ULOG_NO_EVENT )	1006:3:26221:26261	4862706	0	True				
ANR	4862738	AssignmentExpression	* try_again = ( outcome == ULOG_NO_EVENT )		4862706	0		=			
ANR	4862739	UnaryOperationExpression	* try_again		4862706	0					
ANR	4862740	UnaryOperator	*		4862706	0					
ANR	4862741	Identifier	try_again		4862706	1					
ANR	4862742	EqualityExpression	outcome == ULOG_NO_EVENT		4862706	1		==			
ANR	4862743	Identifier	outcome		4862706	0					
ANR	4862744	Identifier	ULOG_NO_EVENT		4862706	1					
ANR	4862745	ElseStatement	else		4862706	0					
ANR	4862746	IfStatement	if ( m_state -> IsLogType ( ReadUserLogState :: LOG_TYPE_OLD ) )		4862706	0					
ANR	4862747	Condition	m_state -> IsLogType ( ReadUserLogState :: LOG_TYPE_OLD )	1008:12:26279:26330	4862706	0	True				
ANR	4862748	CallExpression	m_state -> IsLogType ( ReadUserLogState :: LOG_TYPE_OLD )		4862706	0					
ANR	4862749	Callee	m_state -> IsLogType		4862706	0					
ANR	4862750	PtrMemberAccess	m_state -> IsLogType		4862706	0					
ANR	4862751	Identifier	m_state		4862706	0					
ANR	4862752	Identifier	IsLogType		4862706	1					
ANR	4862753	ArgumentList	ReadUserLogState :: LOG_TYPE_OLD		4862706	1					
ANR	4862754	Argument	ReadUserLogState :: LOG_TYPE_OLD		4862706	0					
ANR	4862755	Identifier	ReadUserLogState :: LOG_TYPE_OLD		4862706	0					
ANR	4862756	CompoundStatement		9:67:263:263	4862706	1					
ANR	4862757	ExpressionStatement	outcome = readEventOld ( event )	1009:2:26338:26369	4862706	0	True				
ANR	4862758	AssignmentExpression	outcome = readEventOld ( event )		4862706	0		=			
ANR	4862759	Identifier	outcome		4862706	0					
ANR	4862760	CallExpression	readEventOld ( event )		4862706	1					
ANR	4862761	Callee	readEventOld		4862706	0					
ANR	4862762	Identifier	readEventOld		4862706	0					
ANR	4862763	ArgumentList	event		4862706	1					
ANR	4862764	Argument	event		4862706	0					
ANR	4862765	Identifier	event		4862706	0					
ANR	4862766	IfStatement	if ( try_again )		4862706	1					
ANR	4862767	Condition	try_again	1010:7:26378:26386	4862706	0	True				
ANR	4862768	Identifier	try_again		4862706	0					
ANR	4862769	CompoundStatement		11:19:319:319	4862706	1					
ANR	4862770	ExpressionStatement	* try_again = ( outcome == ULOG_NO_EVENT )	1011:3:26395:26435	4862706	0	True				
ANR	4862771	AssignmentExpression	* try_again = ( outcome == ULOG_NO_EVENT )		4862706	0		=			
ANR	4862772	UnaryOperationExpression	* try_again		4862706	0					
ANR	4862773	UnaryOperator	*		4862706	0					
ANR	4862774	Identifier	try_again		4862706	1					
ANR	4862775	EqualityExpression	outcome == ULOG_NO_EVENT		4862706	1		==			
ANR	4862776	Identifier	outcome		4862706	0					
ANR	4862777	Identifier	ULOG_NO_EVENT		4862706	1					
ANR	4862778	ElseStatement	else		4862706	0					
ANR	4862779	CompoundStatement		14:8:378:378	4862706	0					
ANR	4862780	ExpressionStatement	outcome = ULOG_NO_EVENT	1014:2:26453:26476	4862706	0	True				
ANR	4862781	AssignmentExpression	outcome = ULOG_NO_EVENT		4862706	0		=			
ANR	4862782	Identifier	outcome		4862706	0					
ANR	4862783	Identifier	ULOG_NO_EVENT		4862706	1					
ANR	4862784	IfStatement	if ( try_again )		4862706	1					
ANR	4862785	Condition	try_again	1015:7:26485:26493	4862706	0	True				
ANR	4862786	Identifier	try_again		4862706	0					
ANR	4862787	CompoundStatement		16:19:426:426	4862706	1					
ANR	4862788	ExpressionStatement	try_again = false	1016:3:26502:26519	4862706	0	True				
ANR	4862789	AssignmentExpression	try_again = false		4862706	0		=			
ANR	4862790	Identifier	try_again		4862706	0					
ANR	4862791	Identifier	false		4862706	1					
ANR	4862792	ReturnStatement	return outcome ;	1019:1:26529:26543	4862706	2	True				
ANR	4862793	Identifier	outcome		4862706	0					
ANR	4862794	ReturnType	ULogEventOutcome		4862706	1					
ANR	4862795	Identifier	ReadUserLog :: readEvent		4862706	2					
ANR	4862796	ParameterList	"ULogEvent * & event , bool * try_again"		4862706	3					
ANR	4862797	Parameter	ULogEvent * & event	999:24:26032:26049	4862706	0	True				
ANR	4862798	ParameterType	ULogEvent * &		4862706	0					
ANR	4862799	Identifier	event		4862706	1					
ANR	4862800	Parameter	bool * try_again	999:44:26052:26066	4862706	1	True				
ANR	4862801	ParameterType	bool *		4862706	0					
ANR	4862802	Identifier	try_again		4862706	1					
ANR	4862803	CFGEntryNode	ENTRY		4862706		True				
ANR	4862804	CFGExitNode	EXIT		4862706		True				
ANR	4862805	Symbol	readEventXML		4862706						
ANR	4862806	Symbol	try_again		4862706						
ANR	4862807	Symbol	ULOG_NO_EVENT		4862706						
ANR	4862808	Symbol	m_state -> IsLogType		4862706						
ANR	4862809	Symbol	* m_state		4862706						
ANR	4862810	Symbol	false		4862706						
ANR	4862811	Symbol	ReadUserLogState :: LOG_TYPE_XML		4862706						
ANR	4862812	Symbol	readEventOld		4862706						
ANR	4862813	Symbol	m_state		4862706						
ANR	4862814	Symbol	* try_again		4862706						
ANR	4862815	Symbol	ReadUserLogState :: LOG_TYPE_OLD		4862706						
ANR	4862816	Symbol	event		4862706						
ANR	4862817	Symbol	outcome		4862706						
ANR	4862818	Function	ReadUserLog :: readEventXML	1022:0:26548:27773							
ANR	4862819	FunctionDef	ReadUserLog :: readEventXML (ULogEvent * & event)		4862818	0					
ANR	4862820	CompoundStatement		1024:0:26613:27773	4862818	0					
ANR	4862821	IdentifierDeclStatement	ClassAdXMLParser xmlp ;	1025:1:26616:26637	4862818	0	True				
ANR	4862822	IdentifierDecl	xmlp		4862818	0					
ANR	4862823	IdentifierDeclType	ClassAdXMLParser		4862818	0					
ANR	4862824	Identifier	xmlp		4862818	1					
ANR	4862825	ExpressionStatement	Lock ( true )	1030:1:26801:26813	4862818	1	True				
ANR	4862826	CallExpression	Lock ( true )		4862818	0					
ANR	4862827	Callee	Lock		4862818	0					
ANR	4862828	Identifier	Lock		4862818	0					
ANR	4862829	ArgumentList	true		4862818	1					
ANR	4862830	Argument	true		4862818	0					
ANR	4862831	Identifier	true		4862818	0					
ANR	4862832	IdentifierDeclStatement	long filepos ;	1034:3:26922:26938	4862818	2	True				
ANR	4862833	IdentifierDecl	filepos		4862818	0					
ANR	4862834	IdentifierDeclType	long		4862818	0					
ANR	4862835	Identifier	filepos		4862818	1					
ANR	4862836	IfStatement	if ( ! m_fp || ( ( filepos = ftell ( m_fp ) ) == - 1L ) )		4862818	3					
ANR	4862837	Condition	! m_fp || ( ( filepos = ftell ( m_fp ) ) == - 1L )	1035:7:26947:26987	4862818	0	True				
ANR	4862838	OrExpression	! m_fp || ( ( filepos = ftell ( m_fp ) ) == - 1L )		4862818	0		||			
ANR	4862839	UnaryOperationExpression	! m_fp		4862818	0					
ANR	4862840	UnaryOperator	!		4862818	0					
ANR	4862841	Identifier	m_fp		4862818	1					
ANR	4862842	EqualityExpression	( filepos = ftell ( m_fp ) ) == - 1L		4862818	1		==			
ANR	4862843	AssignmentExpression	filepos = ftell ( m_fp )		4862818	0		=			
ANR	4862844	Identifier	filepos		4862818	0					
ANR	4862845	CallExpression	ftell ( m_fp )		4862818	1					
ANR	4862846	Callee	ftell		4862818	0					
ANR	4862847	Identifier	ftell		4862818	0					
ANR	4862848	ArgumentList	m_fp		4862818	1					
ANR	4862849	Argument	m_fp		4862818	0					
ANR	4862850	Identifier	m_fp		4862818	0					
ANR	4862851	UnaryOperationExpression	- 1L		4862818	1					
ANR	4862852	UnaryOperator	-		4862818	0					
ANR	4862853	PrimaryExpression	1L		4862818	1					
ANR	4862854	CompoundStatement		13:3:379:379	4862818	1					
ANR	4862855	ExpressionStatement	Unlock ( true )	1037:4:26999:27013	4862818	0	True				
ANR	4862856	CallExpression	Unlock ( true )		4862818	0					
ANR	4862857	Callee	Unlock		4862818	0					
ANR	4862858	Identifier	Unlock		4862818	0					
ANR	4862859	ArgumentList	true		4862818	1					
ANR	4862860	Argument	true		4862818	0					
ANR	4862861	Identifier	true		4862818	0					
ANR	4862862	ExpressionStatement	event = NULL	1038:2:27017:27029	4862818	1	True				
ANR	4862863	AssignmentExpression	event = NULL		4862818	0		=			
ANR	4862864	Identifier	event		4862818	0					
ANR	4862865	Identifier	NULL		4862818	1					
ANR	4862866	ReturnStatement	return ULOG_UNK_ERROR ;	1039:4:27035:27056	4862818	2	True				
ANR	4862867	Identifier	ULOG_UNK_ERROR		4862818	0					
ANR	4862868	IdentifierDeclStatement	ClassAd * eventad ;	1042:1:27065:27081	4862818	4	True				
ANR	4862869	IdentifierDecl	* eventad		4862818	0					
ANR	4862870	IdentifierDeclType	ClassAd *		4862818	0					
ANR	4862871	Identifier	eventad		4862818	1					
ANR	4862872	ExpressionStatement	eventad = xmlp . ParseClassAd ( m_fp )	1043:1:27084:27117	4862818	5	True				
ANR	4862873	AssignmentExpression	eventad = xmlp . ParseClassAd ( m_fp )		4862818	0		=			
ANR	4862874	Identifier	eventad		4862818	0					
ANR	4862875	CallExpression	xmlp . ParseClassAd ( m_fp )		4862818	1					
ANR	4862876	Callee	xmlp . ParseClassAd		4862818	0					
ANR	4862877	MemberAccess	xmlp . ParseClassAd		4862818	0					
ANR	4862878	Identifier	xmlp		4862818	0					
ANR	4862879	Identifier	ParseClassAd		4862818	1					
ANR	4862880	ArgumentList	m_fp		4862818	1					
ANR	4862881	Argument	m_fp		4862818	0					
ANR	4862882	Identifier	m_fp		4862818	0					
ANR	4862883	ExpressionStatement	Unlock ( true )	1045:1:27121:27135	4862818	6	True				
ANR	4862884	CallExpression	Unlock ( true )		4862818	0					
ANR	4862885	Callee	Unlock		4862818	0					
ANR	4862886	Identifier	Unlock		4862818	0					
ANR	4862887	ArgumentList	true		4862818	1					
ANR	4862888	Argument	true		4862818	0					
ANR	4862889	Identifier	true		4862818	0					
ANR	4862890	IfStatement	if ( ! eventad )		4862818	7					
ANR	4862891	Condition	! eventad	1047:5:27143:27150	4862818	0	True				
ANR	4862892	UnaryOperationExpression	! eventad		4862818	0					
ANR	4862893	UnaryOperator	!		4862818	0					
ANR	4862894	Identifier	eventad		4862818	1					
ANR	4862895	CompoundStatement		24:16:540:540	4862818	1					
ANR	4862896	IfStatement	"if ( fseek ( m_fp , filepos , SEEK_SET ) )"		4862818	0					
ANR	4862897	Condition	"fseek ( m_fp , filepos , SEEK_SET )"	1050:6:27253:27282	4862818	0	True				
ANR	4862898	CallExpression	"fseek ( m_fp , filepos , SEEK_SET )"		4862818	0					
ANR	4862899	Callee	fseek		4862818	0					
ANR	4862900	Identifier	fseek		4862818	0					
ANR	4862901	ArgumentList	m_fp		4862818	1					
ANR	4862902	Argument	m_fp		4862818	0					
ANR	4862903	Identifier	m_fp		4862818	0					
ANR	4862904	Argument	filepos		4862818	1					
ANR	4862905	Identifier	filepos		4862818	0					
ANR	4862906	Argument	SEEK_SET		4862818	2					
ANR	4862907	Identifier	SEEK_SET		4862818	0					
ANR	4862908	CompoundStatement		27:39:672:672	4862818	1					
ANR	4862909	ExpressionStatement	"dprintf ( D_ALWAYS , ""fseek() failed in ReadUserLog::readEvent"" )"	1051:3:27291:27352	4862818	0	True				
ANR	4862910	CallExpression	"dprintf ( D_ALWAYS , ""fseek() failed in ReadUserLog::readEvent"" )"		4862818	0					
ANR	4862911	Callee	dprintf		4862818	0					
ANR	4862912	Identifier	dprintf		4862818	0					
ANR	4862913	ArgumentList	D_ALWAYS		4862818	1					
ANR	4862914	Argument	D_ALWAYS		4862818	0					
ANR	4862915	Identifier	D_ALWAYS		4862818	0					
ANR	4862916	Argument	"""fseek() failed in ReadUserLog::readEvent"""		4862818	1					
ANR	4862917	PrimaryExpression	"""fseek() failed in ReadUserLog::readEvent"""		4862818	0					
ANR	4862918	ReturnStatement	return ULOG_UNK_ERROR ;	1052:3:27357:27378	4862818	1	True				
ANR	4862919	Identifier	ULOG_UNK_ERROR		4862818	0					
ANR	4862920	ExpressionStatement	clearerr ( m_fp )	1054:2:27386:27400	4862818	1	True				
ANR	4862921	CallExpression	clearerr ( m_fp )		4862818	0					
ANR	4862922	Callee	clearerr		4862818	0					
ANR	4862923	Identifier	clearerr		4862818	0					
ANR	4862924	ArgumentList	m_fp		4862818	1					
ANR	4862925	Argument	m_fp		4862818	0					
ANR	4862926	Identifier	m_fp		4862818	0					
ANR	4862927	ExpressionStatement	event = NULL	1055:2:27404:27416	4862818	2	True				
ANR	4862928	AssignmentExpression	event = NULL		4862818	0		=			
ANR	4862929	Identifier	event		4862818	0					
ANR	4862930	Identifier	NULL		4862818	1					
ANR	4862931	ReturnStatement	return ULOG_NO_EVENT ;	1056:2:27420:27440	4862818	3	True				
ANR	4862932	Identifier	ULOG_NO_EVENT		4862818	0					
ANR	4862933	IdentifierDeclStatement	int enmbr ;	1059:1:27447:27456	4862818	8	True				
ANR	4862934	IdentifierDecl	enmbr		4862818	0					
ANR	4862935	IdentifierDeclType	int		4862818	0					
ANR	4862936	Identifier	enmbr		4862818	1					
ANR	4862937	IfStatement	"if ( ! eventad -> LookupInteger ( ""EventTypeNumber"" , enmbr ) )"		4862818	9					
ANR	4862938	Condition	"! eventad -> LookupInteger ( ""EventTypeNumber"" , enmbr )"	1060:5:27463:27511	4862818	0	True				
ANR	4862939	UnaryOperationExpression	"! eventad -> LookupInteger ( ""EventTypeNumber"" , enmbr )"		4862818	0					
ANR	4862940	UnaryOperator	!		4862818	0					
ANR	4862941	CallExpression	"eventad -> LookupInteger ( ""EventTypeNumber"" , enmbr )"		4862818	1					
ANR	4862942	Callee	eventad -> LookupInteger		4862818	0					
ANR	4862943	PtrMemberAccess	eventad -> LookupInteger		4862818	0					
ANR	4862944	Identifier	eventad		4862818	0					
ANR	4862945	Identifier	LookupInteger		4862818	1					
ANR	4862946	ArgumentList	"""EventTypeNumber"""		4862818	1					
ANR	4862947	Argument	"""EventTypeNumber"""		4862818	0					
ANR	4862948	PrimaryExpression	"""EventTypeNumber"""		4862818	0					
ANR	4862949	Argument	enmbr		4862818	1					
ANR	4862950	Identifier	enmbr		4862818	0					
ANR	4862951	CompoundStatement		37:57:901:901	4862818	1					
ANR	4862952	ExpressionStatement	event = NULL	1061:2:27519:27531	4862818	0	True				
ANR	4862953	AssignmentExpression	event = NULL		4862818	0		=			
ANR	4862954	Identifier	event		4862818	0					
ANR	4862955	Identifier	NULL		4862818	1					
ANR	4862956	Statement	delete	1062:2:27535:27540	4862818	1	True				
ANR	4862957	ExpressionStatement	eventad	1062:9:27542:27549	4862818	2	True				
ANR	4862958	Identifier	eventad		4862818	0					
ANR	4862959	ReturnStatement	return ULOG_NO_EVENT ;	1063:2:27553:27573	4862818	3	True				
ANR	4862960	Identifier	ULOG_NO_EVENT		4862818	0					
ANR	4862961	IfStatement	if ( ! ( event = instantiateEvent ( ( ULogEventNumber ) enmbr ) ) )		4862818	10					
ANR	4862962	Condition	! ( event = instantiateEvent ( ( ULogEventNumber ) enmbr ) )	1066:5:27584:27635	4862818	0	True				
ANR	4862963	UnaryOperationExpression	! ( event = instantiateEvent ( ( ULogEventNumber ) enmbr ) )		4862818	0					
ANR	4862964	UnaryOperator	!		4862818	0					
ANR	4862965	AssignmentExpression	event = instantiateEvent ( ( ULogEventNumber ) enmbr )		4862818	1		=			
ANR	4862966	Identifier	event		4862818	0					
ANR	4862967	CallExpression	instantiateEvent ( ( ULogEventNumber ) enmbr )		4862818	1					
ANR	4862968	Callee	instantiateEvent		4862818	0					
ANR	4862969	Identifier	instantiateEvent		4862818	0					
ANR	4862970	ArgumentList	( ULogEventNumber ) enmbr		4862818	1					
ANR	4862971	Argument	( ULogEventNumber ) enmbr		4862818	0					
ANR	4862972	CastExpression	( ULogEventNumber ) enmbr		4862818	0					
ANR	4862973	CastTarget	ULogEventNumber		4862818	0					
ANR	4862974	Identifier	enmbr		4862818	1					
ANR	4862975	CompoundStatement		43:60:1025:1025	4862818	1					
ANR	4862976	ExpressionStatement	event = NULL	1067:2:27643:27655	4862818	0	True				
ANR	4862977	AssignmentExpression	event = NULL		4862818	0		=			
ANR	4862978	Identifier	event		4862818	0					
ANR	4862979	Identifier	NULL		4862818	1					
ANR	4862980	Statement	delete	1068:2:27659:27664	4862818	1	True				
ANR	4862981	ExpressionStatement	eventad	1068:9:27666:27673	4862818	2	True				
ANR	4862982	Identifier	eventad		4862818	0					
ANR	4862983	ReturnStatement	return ULOG_UNK_ERROR ;	1069:2:27677:27698	4862818	3	True				
ANR	4862984	Identifier	ULOG_UNK_ERROR		4862818	0					
ANR	4862985	ExpressionStatement	event -> initFromClassAd ( eventad )	1072:1:27705:27736	4862818	11	True				
ANR	4862986	CallExpression	event -> initFromClassAd ( eventad )		4862818	0					
ANR	4862987	Callee	event -> initFromClassAd		4862818	0					
ANR	4862988	PtrMemberAccess	event -> initFromClassAd		4862818	0					
ANR	4862989	Identifier	event		4862818	0					
ANR	4862990	Identifier	initFromClassAd		4862818	1					
ANR	4862991	ArgumentList	eventad		4862818	1					
ANR	4862992	Argument	eventad		4862818	0					
ANR	4862993	Identifier	eventad		4862818	0					
ANR	4862994	Statement	delete	1074:1:27740:27745	4862818	12	True				
ANR	4862995	ExpressionStatement	eventad	1074:8:27747:27754	4862818	13	True				
ANR	4862996	Identifier	eventad		4862818	0					
ANR	4862997	ReturnStatement	return ULOG_OK ;	1075:1:27757:27771	4862818	14	True				
ANR	4862998	Identifier	ULOG_OK		4862818	0					
ANR	4862999	ReturnType	ULogEventOutcome		4862818	1					
ANR	4863000	Identifier	ReadUserLog :: readEventXML		4862818	2					
ANR	4863001	ParameterList	ULogEvent * & event		4862818	3					
ANR	4863002	Parameter	ULogEvent * & event	1023:27:26592:26609	4862818	0	True				
ANR	4863003	ParameterType	ULogEvent * &		4862818	0					
ANR	4863004	Identifier	event		4862818	1					
ANR	4863005	CFGEntryNode	ENTRY		4862818		True				
ANR	4863006	CFGExitNode	EXIT		4862818		True				
ANR	4863007	Symbol	SEEK_SET		4862818						
ANR	4863008	Symbol	xmlp		4862818						
ANR	4863009	Symbol	ULOG_NO_EVENT		4862818						
ANR	4863010	Symbol	NULL		4862818						
ANR	4863011	Symbol	ftell		4862818						
ANR	4863012	Symbol	D_ALWAYS		4862818						
ANR	4863013	Symbol	eventad		4862818						
ANR	4863014	Symbol	ULOG_UNK_ERROR		4862818						
ANR	4863015	Symbol	eventad -> LookupInteger		4862818						
ANR	4863016	Symbol	xmlp . ParseClassAd		4862818						
ANR	4863017	Symbol	fseek		4862818						
ANR	4863018	Symbol	m_fp		4862818						
ANR	4863019	Symbol	ULOG_OK		4862818						
ANR	4863020	Symbol	filepos		4862818						
ANR	4863021	Symbol	* eventad		4862818						
ANR	4863022	Symbol	enmbr		4862818						
ANR	4863023	Symbol	true		4862818						
ANR	4863024	Symbol	instantiateEvent		4862818						
ANR	4863025	Symbol	event		4862818						
ANR	4863026	Function	ReadUserLog :: readEventOld	1078:0:27776:34101							
ANR	4863027	FunctionDef	ReadUserLog :: readEventOld (ULogEvent * & event)		4863026	0					
ANR	4863028	CompoundStatement		1080:0:27841:34101	4863026	0					
ANR	4863029	IdentifierDeclStatement	long filepos ;	1081:1:27844:27858	4863026	0	True				
ANR	4863030	IdentifierDecl	filepos		4863026	0					
ANR	4863031	IdentifierDeclType	long		4863026	0					
ANR	4863032	Identifier	filepos		4863026	1					
ANR	4863033	IdentifierDeclStatement	int eventnumber ;	1082:1:27861:27879	4863026	1	True				
ANR	4863034	IdentifierDecl	eventnumber		4863026	0					
ANR	4863035	IdentifierDeclType	int		4863026	0					
ANR	4863036	Identifier	eventnumber		4863026	1					
ANR	4863037	IdentifierDeclStatement	"int retval1 , retval2 ;"	1083:1:27882:27905	4863026	2	True				
ANR	4863038	IdentifierDecl	retval1		4863026	0					
ANR	4863039	IdentifierDeclType	int		4863026	0					
ANR	4863040	Identifier	retval1		4863026	1					
ANR	4863041	IdentifierDecl	retval2		4863026	1					
ANR	4863042	IdentifierDeclType	int		4863026	0					
ANR	4863043	Identifier	retval2		4863026	1					
ANR	4863044	IfStatement	if ( m_lock -> isUnlocked ( ) )		4863026	3					
ANR	4863045	Condition	m_lock -> isUnlocked ( )	1088:6:28074:28093	4863026	0	True				
ANR	4863046	CallExpression	m_lock -> isUnlocked ( )		4863026	0					
ANR	4863047	Callee	m_lock -> isUnlocked		4863026	0					
ANR	4863048	PtrMemberAccess	m_lock -> isUnlocked		4863026	0					
ANR	4863049	Identifier	m_lock		4863026	0					
ANR	4863050	Identifier	isUnlocked		4863026	1					
ANR	4863051	ArgumentList			4863026	1					
ANR	4863052	CompoundStatement		9:29:255:255	4863026	1					
ANR	4863053	ExpressionStatement	m_lock -> obtain ( WRITE_LOCK )	1089:2:28101:28129	4863026	0	True				
ANR	4863054	CallExpression	m_lock -> obtain ( WRITE_LOCK )		4863026	0					
ANR	4863055	Callee	m_lock -> obtain		4863026	0					
ANR	4863056	PtrMemberAccess	m_lock -> obtain		4863026	0					
ANR	4863057	Identifier	m_lock		4863026	0					
ANR	4863058	Identifier	obtain		4863026	1					
ANR	4863059	ArgumentList	WRITE_LOCK		4863026	1					
ANR	4863060	Argument	WRITE_LOCK		4863026	0					
ANR	4863061	Identifier	WRITE_LOCK		4863026	0					
ANR	4863062	IfStatement	if ( ! m_fp || ( ( filepos = ftell ( m_fp ) ) == - 1L ) )		4863026	4					
ANR	4863063	Condition	! m_fp || ( ( filepos = ftell ( m_fp ) ) == - 1L )	1094:5:28243:28283	4863026	0	True				
ANR	4863064	OrExpression	! m_fp || ( ( filepos = ftell ( m_fp ) ) == - 1L )		4863026	0		||			
ANR	4863065	UnaryOperationExpression	! m_fp		4863026	0					
ANR	4863066	UnaryOperator	!		4863026	0					
ANR	4863067	Identifier	m_fp		4863026	1					
ANR	4863068	EqualityExpression	( filepos = ftell ( m_fp ) ) == - 1L		4863026	1		==			
ANR	4863069	AssignmentExpression	filepos = ftell ( m_fp )		4863026	0		=			
ANR	4863070	Identifier	filepos		4863026	0					
ANR	4863071	CallExpression	ftell ( m_fp )		4863026	1					
ANR	4863072	Callee	ftell		4863026	0					
ANR	4863073	Identifier	ftell		4863026	0					
ANR	4863074	ArgumentList	m_fp		4863026	1					
ANR	4863075	Argument	m_fp		4863026	0					
ANR	4863076	Identifier	m_fp		4863026	0					
ANR	4863077	UnaryOperationExpression	- 1L		4863026	1					
ANR	4863078	UnaryOperator	-		4863026	0					
ANR	4863079	PrimaryExpression	1L		4863026	1					
ANR	4863080	CompoundStatement		16:1:445:445	4863026	1					
ANR	4863081	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""ReadUserLog: invalid m_fp, or ftell() failed\\n"" )"	1096:2:28291:28368	4863026	0	True				
ANR	4863082	CallExpression	"dprintf ( D_FULLDEBUG , ""ReadUserLog: invalid m_fp, or ftell() failed\\n"" )"		4863026	0					
ANR	4863083	Callee	dprintf		4863026	0					
ANR	4863084	Identifier	dprintf		4863026	0					
ANR	4863085	ArgumentList	D_FULLDEBUG		4863026	1					
ANR	4863086	Argument	D_FULLDEBUG		4863026	0					
ANR	4863087	Identifier	D_FULLDEBUG		4863026	0					
ANR	4863088	Argument	"""ReadUserLog: invalid m_fp, or ftell() failed\\n"""		4863026	1					
ANR	4863089	PrimaryExpression	"""ReadUserLog: invalid m_fp, or ftell() failed\\n"""		4863026	0					
ANR	4863090	IfStatement	if ( m_lock -> isLocked ( ) )		4863026	1					
ANR	4863091	Condition	m_lock -> isLocked ( )	1098:7:28377:28394	4863026	0	True				
ANR	4863092	CallExpression	m_lock -> isLocked ( )		4863026	0					
ANR	4863093	Callee	m_lock -> isLocked		4863026	0					
ANR	4863094	PtrMemberAccess	m_lock -> isLocked		4863026	0					
ANR	4863095	Identifier	m_lock		4863026	0					
ANR	4863096	Identifier	isLocked		4863026	1					
ANR	4863097	ArgumentList			4863026	1					
ANR	4863098	CompoundStatement		19:28:556:556	4863026	1					
ANR	4863099	ExpressionStatement	m_lock -> release ( )	1099:3:28403:28420	4863026	0	True				
ANR	4863100	CallExpression	m_lock -> release ( )		4863026	0					
ANR	4863101	Callee	m_lock -> release		4863026	0					
ANR	4863102	PtrMemberAccess	m_lock -> release		4863026	0					
ANR	4863103	Identifier	m_lock		4863026	0					
ANR	4863104	Identifier	release		4863026	1					
ANR	4863105	ArgumentList			4863026	1					
ANR	4863106	ReturnStatement	return ULOG_UNK_ERROR ;	1101:2:28428:28449	4863026	2	True				
ANR	4863107	Identifier	ULOG_UNK_ERROR		4863026	0					
ANR	4863108	ExpressionStatement	"retval1 = fscanf ( m_fp , ""%d"" , & eventnumber )"	1104:1:28456:28499	4863026	5	True				
ANR	4863109	AssignmentExpression	"retval1 = fscanf ( m_fp , ""%d"" , & eventnumber )"		4863026	0		=			
ANR	4863110	Identifier	retval1		4863026	0					
ANR	4863111	CallExpression	"fscanf ( m_fp , ""%d"" , & eventnumber )"		4863026	1					
ANR	4863112	Callee	fscanf		4863026	0					
ANR	4863113	Identifier	fscanf		4863026	0					
ANR	4863114	ArgumentList	m_fp		4863026	1					
ANR	4863115	Argument	m_fp		4863026	0					
ANR	4863116	Identifier	m_fp		4863026	0					
ANR	4863117	Argument	"""%d"""		4863026	1					
ANR	4863118	PrimaryExpression	"""%d"""		4863026	0					
ANR	4863119	Argument	& eventnumber		4863026	2					
ANR	4863120	UnaryOperationExpression	& eventnumber		4863026	0					
ANR	4863121	UnaryOperator	&		4863026	0					
ANR	4863122	Identifier	eventnumber		4863026	1					
ANR	4863123	IfStatement	if ( retval1 != 1 )		4863026	6					
ANR	4863124	Condition	retval1 != 1	1107:5:28560:28571	4863026	0	True				
ANR	4863125	EqualityExpression	retval1 != 1		4863026	0		!=			
ANR	4863126	Identifier	retval1		4863026	0					
ANR	4863127	PrimaryExpression	1		4863026	1					
ANR	4863128	CompoundStatement		28:19:732:732	4863026	1					
ANR	4863129	ExpressionStatement	eventnumber = 1	1108:2:28578:28593	4863026	0	True				
ANR	4863130	AssignmentExpression	eventnumber = 1		4863026	0		=			
ANR	4863131	Identifier	eventnumber		4863026	0					
ANR	4863132	PrimaryExpression	1		4863026	1					
ANR	4863133	IfStatement	if ( feof ( m_fp ) )		4863026	1					
ANR	4863134	Condition	feof ( m_fp )	1119:6:29154:29165	4863026	0	True				
ANR	4863135	CallExpression	feof ( m_fp )		4863026	0					
ANR	4863136	Callee	feof		4863026	0					
ANR	4863137	Identifier	feof		4863026	0					
ANR	4863138	ArgumentList	m_fp		4863026	1					
ANR	4863139	Argument	m_fp		4863026	0					
ANR	4863140	Identifier	m_fp		4863026	0					
ANR	4863141	CompoundStatement		40:21:1327:1327	4863026	1					
ANR	4863142	ExpressionStatement	event = NULL	1120:3:29174:29186	4863026	0	True				
ANR	4863143	AssignmentExpression	event = NULL		4863026	0		=			
ANR	4863144	Identifier	event		4863026	0					
ANR	4863145	Identifier	NULL		4863026	1					
ANR	4863146	ExpressionStatement	clearerr ( m_fp )	1121:3:29228:29244	4863026	1	True				
ANR	4863147	CallExpression	clearerr ( m_fp )		4863026	0					
ANR	4863148	Callee	clearerr		4863026	0					
ANR	4863149	Identifier	clearerr		4863026	0					
ANR	4863150	ArgumentList	m_fp		4863026	1					
ANR	4863151	Argument	m_fp		4863026	0					
ANR	4863152	Identifier	m_fp		4863026	0					
ANR	4863153	IfStatement	if ( m_lock -> isLocked ( ) )		4863026	2					
ANR	4863154	Condition	m_lock -> isLocked ( )	1122:7:29253:29270	4863026	0	True				
ANR	4863155	CallExpression	m_lock -> isLocked ( )		4863026	0					
ANR	4863156	Callee	m_lock -> isLocked		4863026	0					
ANR	4863157	PtrMemberAccess	m_lock -> isLocked		4863026	0					
ANR	4863158	Identifier	m_lock		4863026	0					
ANR	4863159	Identifier	isLocked		4863026	1					
ANR	4863160	ArgumentList			4863026	1					
ANR	4863161	CompoundStatement		43:28:1432:1432	4863026	1					
ANR	4863162	ExpressionStatement	m_lock -> release ( )	1123:4:29280:29297	4863026	0	True				
ANR	4863163	CallExpression	m_lock -> release ( )		4863026	0					
ANR	4863164	Callee	m_lock -> release		4863026	0					
ANR	4863165	PtrMemberAccess	m_lock -> release		4863026	0					
ANR	4863166	Identifier	m_lock		4863026	0					
ANR	4863167	Identifier	release		4863026	1					
ANR	4863168	ArgumentList			4863026	1					
ANR	4863169	ReturnStatement	return ULOG_NO_EVENT ;	1125:3:29307:29327	4863026	3	True				
ANR	4863170	Identifier	ULOG_NO_EVENT		4863026	0					
ANR	4863171	Statement	dprintf	1127:2:29335:29341	4863026	2	True				
ANR	4863172	Statement	(	1127:9:29342:29342	4863026	3	True				
ANR	4863173	Statement	D_FULLDEBUG	1127:11:29344:29354	4863026	4	True				
ANR	4863174	Statement	","	1127:22:29355:29355	4863026	5	True				
ANR	4863175	Statement	"""ReadUserLog: error (not EOF) reading """	1127:24:29357:29395	4863026	6	True				
ANR	4863176	Statement	"""event number\\n"""	1128:5:29402:29417	4863026	7	True				
ANR	4863177	Statement	)	1128:22:29419:29419	4863026	8	True				
ANR	4863178	ExpressionStatement		1128:23:29420:29420	4863026	9	True				
ANR	4863179	ExpressionStatement	event = instantiateEvent ( ( ULogEventNumber ) eventnumber )	1132:1:29486:29542	4863026	7	True				
ANR	4863180	AssignmentExpression	event = instantiateEvent ( ( ULogEventNumber ) eventnumber )		4863026	0		=			
ANR	4863181	Identifier	event		4863026	0					
ANR	4863182	CallExpression	instantiateEvent ( ( ULogEventNumber ) eventnumber )		4863026	1					
ANR	4863183	Callee	instantiateEvent		4863026	0					
ANR	4863184	Identifier	instantiateEvent		4863026	0					
ANR	4863185	ArgumentList	( ULogEventNumber ) eventnumber		4863026	1					
ANR	4863186	Argument	( ULogEventNumber ) eventnumber		4863026	0					
ANR	4863187	CastExpression	( ULogEventNumber ) eventnumber		4863026	0					
ANR	4863188	CastTarget	ULogEventNumber		4863026	0					
ANR	4863189	Identifier	eventnumber		4863026	1					
ANR	4863190	IfStatement	if ( ! event )		4863026	8					
ANR	4863191	Condition	! event	1133:5:29549:29554	4863026	0	True				
ANR	4863192	UnaryOperationExpression	! event		4863026	0					
ANR	4863193	UnaryOperator	!		4863026	0					
ANR	4863194	Identifier	event		4863026	1					
ANR	4863195	CompoundStatement		54:13:1715:1715	4863026	1					
ANR	4863196	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""ReadUserLog: unable to instantiate event\\n"" )"	1134:2:29561:29629	4863026	0	True				
ANR	4863197	CallExpression	"dprintf ( D_FULLDEBUG , ""ReadUserLog: unable to instantiate event\\n"" )"		4863026	0					
ANR	4863198	Callee	dprintf		4863026	0					
ANR	4863199	Identifier	dprintf		4863026	0					
ANR	4863200	ArgumentList	D_FULLDEBUG		4863026	1					
ANR	4863201	Argument	D_FULLDEBUG		4863026	0					
ANR	4863202	Identifier	D_FULLDEBUG		4863026	0					
ANR	4863203	Argument	"""ReadUserLog: unable to instantiate event\\n"""		4863026	1					
ANR	4863204	PrimaryExpression	"""ReadUserLog: unable to instantiate event\\n"""		4863026	0					
ANR	4863205	IfStatement	if ( m_lock -> isLocked ( ) )		4863026	1					
ANR	4863206	Condition	m_lock -> isLocked ( )	1135:7:29638:29655	4863026	0	True				
ANR	4863207	CallExpression	m_lock -> isLocked ( )		4863026	0					
ANR	4863208	Callee	m_lock -> isLocked		4863026	0					
ANR	4863209	PtrMemberAccess	m_lock -> isLocked		4863026	0					
ANR	4863210	Identifier	m_lock		4863026	0					
ANR	4863211	Identifier	isLocked		4863026	1					
ANR	4863212	ArgumentList			4863026	1					
ANR	4863213	CompoundStatement		56:27:1816:1816	4863026	1					
ANR	4863214	ExpressionStatement	m_lock -> release ( )	1136:3:29663:29680	4863026	0	True				
ANR	4863215	CallExpression	m_lock -> release ( )		4863026	0					
ANR	4863216	Callee	m_lock -> release		4863026	0					
ANR	4863217	PtrMemberAccess	m_lock -> release		4863026	0					
ANR	4863218	Identifier	m_lock		4863026	0					
ANR	4863219	Identifier	release		4863026	1					
ANR	4863220	ArgumentList			4863026	1					
ANR	4863221	ReturnStatement	return ULOG_UNK_ERROR ;	1138:2:29688:29709	4863026	2	True				
ANR	4863222	Identifier	ULOG_UNK_ERROR		4863026	0					
ANR	4863223	ExpressionStatement	retval2 = event -> getEvent ( m_fp )	1142:1:29759:29791	4863026	9	True				
ANR	4863224	AssignmentExpression	retval2 = event -> getEvent ( m_fp )		4863026	0		=			
ANR	4863225	Identifier	retval2		4863026	0					
ANR	4863226	CallExpression	event -> getEvent ( m_fp )		4863026	1					
ANR	4863227	Callee	event -> getEvent		4863026	0					
ANR	4863228	PtrMemberAccess	event -> getEvent		4863026	0					
ANR	4863229	Identifier	event		4863026	0					
ANR	4863230	Identifier	getEvent		4863026	1					
ANR	4863231	ArgumentList	m_fp		4863026	1					
ANR	4863232	Argument	m_fp		4863026	0					
ANR	4863233	Identifier	m_fp		4863026	0					
ANR	4863234	IfStatement	if ( ! retval1 || ! retval2 )		4863026	10					
ANR	4863235	Condition	! retval1 || ! retval2	1145:5:29835:29854	4863026	0	True				
ANR	4863236	OrExpression	! retval1 || ! retval2		4863026	0		||			
ANR	4863237	UnaryOperationExpression	! retval1		4863026	0					
ANR	4863238	UnaryOperator	!		4863026	0					
ANR	4863239	Identifier	retval1		4863026	1					
ANR	4863240	UnaryOperationExpression	! retval2		4863026	1					
ANR	4863241	UnaryOperator	!		4863026	0					
ANR	4863242	Identifier	retval2		4863026	1					
ANR	4863243	CompoundStatement		67:1:2016:2016	4863026	1					
ANR	4863244	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""ReadUserLog: error reading event; re-trying\\n"" )"	1147:2:29862:29938	4863026	0	True				
ANR	4863245	CallExpression	"dprintf ( D_FULLDEBUG , ""ReadUserLog: error reading event; re-trying\\n"" )"		4863026	0					
ANR	4863246	Callee	dprintf		4863026	0					
ANR	4863247	Identifier	dprintf		4863026	0					
ANR	4863248	ArgumentList	D_FULLDEBUG		4863026	1					
ANR	4863249	Argument	D_FULLDEBUG		4863026	0					
ANR	4863250	Identifier	D_FULLDEBUG		4863026	0					
ANR	4863251	Argument	"""ReadUserLog: error reading event; re-trying\\n"""		4863026	1					
ANR	4863252	PrimaryExpression	"""ReadUserLog: error reading event; re-trying\\n"""		4863026	0					
ANR	4863253	IfStatement	if ( m_lock -> isLocked ( ) )		4863026	1					
ANR	4863254	Condition	m_lock -> isLocked ( )	1161:6:30492:30509	4863026	0	True				
ANR	4863255	CallExpression	m_lock -> isLocked ( )		4863026	0					
ANR	4863256	Callee	m_lock -> isLocked		4863026	0					
ANR	4863257	PtrMemberAccess	m_lock -> isLocked		4863026	0					
ANR	4863258	Identifier	m_lock		4863026	0					
ANR	4863259	Identifier	isLocked		4863026	1					
ANR	4863260	ArgumentList			4863026	1					
ANR	4863261	CompoundStatement		82:27:2671:2671	4863026	1					
ANR	4863262	ExpressionStatement	m_lock -> release ( )	1162:3:30518:30535	4863026	0	True				
ANR	4863263	CallExpression	m_lock -> release ( )		4863026	0					
ANR	4863264	Callee	m_lock -> release		4863026	0					
ANR	4863265	PtrMemberAccess	m_lock -> release		4863026	0					
ANR	4863266	Identifier	m_lock		4863026	0					
ANR	4863267	Identifier	release		4863026	1					
ANR	4863268	ArgumentList			4863026	1					
ANR	4863269	ExpressionStatement	sleep ( 1 )	1164:2:30543:30553	4863026	2	True				
ANR	4863270	CallExpression	sleep ( 1 )		4863026	0					
ANR	4863271	Callee	sleep		4863026	0					
ANR	4863272	Identifier	sleep		4863026	0					
ANR	4863273	ArgumentList	1		4863026	1					
ANR	4863274	Argument	1		4863026	0					
ANR	4863275	PrimaryExpression	1		4863026	0					
ANR	4863276	IfStatement	if ( m_lock -> isUnlocked ( ) )		4863026	3					
ANR	4863277	Condition	m_lock -> isUnlocked ( )	1165:6:30561:30580	4863026	0	True				
ANR	4863278	CallExpression	m_lock -> isUnlocked ( )		4863026	0					
ANR	4863279	Callee	m_lock -> isUnlocked		4863026	0					
ANR	4863280	PtrMemberAccess	m_lock -> isUnlocked		4863026	0					
ANR	4863281	Identifier	m_lock		4863026	0					
ANR	4863282	Identifier	isUnlocked		4863026	1					
ANR	4863283	ArgumentList			4863026	1					
ANR	4863284	CompoundStatement		86:29:2742:2742	4863026	1					
ANR	4863285	ExpressionStatement	m_lock -> obtain ( WRITE_LOCK )	1166:3:30589:30617	4863026	0	True				
ANR	4863286	CallExpression	m_lock -> obtain ( WRITE_LOCK )		4863026	0					
ANR	4863287	Callee	m_lock -> obtain		4863026	0					
ANR	4863288	PtrMemberAccess	m_lock -> obtain		4863026	0					
ANR	4863289	Identifier	m_lock		4863026	0					
ANR	4863290	Identifier	obtain		4863026	1					
ANR	4863291	ArgumentList	WRITE_LOCK		4863026	1					
ANR	4863292	Argument	WRITE_LOCK		4863026	0					
ANR	4863293	Identifier	WRITE_LOCK		4863026	0					
ANR	4863294	IfStatement	"if ( fseek ( m_fp , filepos , SEEK_SET ) )"		4863026	4					
ANR	4863295	Condition	"fseek ( m_fp , filepos , SEEK_SET )"	1168:6:30629:30659	4863026	0	True				
ANR	4863296	CallExpression	"fseek ( m_fp , filepos , SEEK_SET )"		4863026	0					
ANR	4863297	Callee	fseek		4863026	0					
ANR	4863298	Identifier	fseek		4863026	0					
ANR	4863299	ArgumentList	m_fp		4863026	1					
ANR	4863300	Argument	m_fp		4863026	0					
ANR	4863301	Identifier	m_fp		4863026	0					
ANR	4863302	Argument	filepos		4863026	1					
ANR	4863303	Identifier	filepos		4863026	0					
ANR	4863304	Argument	SEEK_SET		4863026	2					
ANR	4863305	Identifier	SEEK_SET		4863026	0					
ANR	4863306	CompoundStatement		89:39:2820:2820	4863026	1					
ANR	4863307	ExpressionStatement	"dprintf ( D_ALWAYS , ""fseek() failed in %s:%d"" , __FILE__ , __LINE__ )"	1169:3:30667:30733	4863026	0	True				
ANR	4863308	CallExpression	"dprintf ( D_ALWAYS , ""fseek() failed in %s:%d"" , __FILE__ , __LINE__ )"		4863026	0					
ANR	4863309	Callee	dprintf		4863026	0					
ANR	4863310	Identifier	dprintf		4863026	0					
ANR	4863311	ArgumentList	D_ALWAYS		4863026	1					
ANR	4863312	Argument	D_ALWAYS		4863026	0					
ANR	4863313	Identifier	D_ALWAYS		4863026	0					
ANR	4863314	Argument	"""fseek() failed in %s:%d"""		4863026	1					
ANR	4863315	PrimaryExpression	"""fseek() failed in %s:%d"""		4863026	0					
ANR	4863316	Argument	__FILE__		4863026	2					
ANR	4863317	Identifier	__FILE__		4863026	0					
ANR	4863318	Argument	__LINE__		4863026	3					
ANR	4863319	Identifier	__LINE__		4863026	0					
ANR	4863320	IfStatement	if ( m_lock -> isLocked ( ) )		4863026	1					
ANR	4863321	Condition	m_lock -> isLocked ( )	1170:8:30743:30760	4863026	0	True				
ANR	4863322	CallExpression	m_lock -> isLocked ( )		4863026	0					
ANR	4863323	Callee	m_lock -> isLocked		4863026	0					
ANR	4863324	PtrMemberAccess	m_lock -> isLocked		4863026	0					
ANR	4863325	Identifier	m_lock		4863026	0					
ANR	4863326	Identifier	isLocked		4863026	1					
ANR	4863327	ArgumentList			4863026	1					
ANR	4863328	CompoundStatement		91:29:2922:2922	4863026	1					
ANR	4863329	ExpressionStatement	m_lock -> release ( )	1171:4:30770:30787	4863026	0	True				
ANR	4863330	CallExpression	m_lock -> release ( )		4863026	0					
ANR	4863331	Callee	m_lock -> release		4863026	0					
ANR	4863332	PtrMemberAccess	m_lock -> release		4863026	0					
ANR	4863333	Identifier	m_lock		4863026	0					
ANR	4863334	Identifier	release		4863026	1					
ANR	4863335	ArgumentList			4863026	1					
ANR	4863336	ReturnStatement	return ULOG_UNK_ERROR ;	1173:3:30797:30818	4863026	2	True				
ANR	4863337	Identifier	ULOG_UNK_ERROR		4863026	0					
ANR	4863338	IfStatement	if ( synchronize ( ) )		4863026	5					
ANR	4863339	Condition	synchronize ( )	1175:6:30830:30842	4863026	0	True				
ANR	4863340	CallExpression	synchronize ( )		4863026	0					
ANR	4863341	Callee	synchronize		4863026	0					
ANR	4863342	Identifier	synchronize		4863026	0					
ANR	4863343	ArgumentList			4863026	1					
ANR	4863344	CompoundStatement		110:3:3349:3381	4863026	1					
ANR	4863345	IfStatement	"if ( fseek ( m_fp , filepos , SEEK_SET ) )"		4863026	0					
ANR	4863346	Condition	"fseek ( m_fp , filepos , SEEK_SET )"	1178:7:30926:30956	4863026	0	True				
ANR	4863347	CallExpression	"fseek ( m_fp , filepos , SEEK_SET )"		4863026	0					
ANR	4863348	Callee	fseek		4863026	0					
ANR	4863349	Identifier	fseek		4863026	0					
ANR	4863350	ArgumentList	m_fp		4863026	1					
ANR	4863351	Argument	m_fp		4863026	0					
ANR	4863352	Identifier	m_fp		4863026	0					
ANR	4863353	Argument	filepos		4863026	1					
ANR	4863354	Identifier	filepos		4863026	0					
ANR	4863355	Argument	SEEK_SET		4863026	2					
ANR	4863356	Identifier	SEEK_SET		4863026	0					
ANR	4863357	CompoundStatement		100:3:3120:3120	4863026	1					
ANR	4863358	ExpressionStatement	"dprintf ( D_ALWAYS , ""fseek() failed in ReadUserLog::readEvent"" )"	1180:4:30968:31029	4863026	0	True				
ANR	4863359	CallExpression	"dprintf ( D_ALWAYS , ""fseek() failed in ReadUserLog::readEvent"" )"		4863026	0					
ANR	4863360	Callee	dprintf		4863026	0					
ANR	4863361	Identifier	dprintf		4863026	0					
ANR	4863362	ArgumentList	D_ALWAYS		4863026	1					
ANR	4863363	Argument	D_ALWAYS		4863026	0					
ANR	4863364	Identifier	D_ALWAYS		4863026	0					
ANR	4863365	Argument	"""fseek() failed in ReadUserLog::readEvent"""		4863026	1					
ANR	4863366	PrimaryExpression	"""fseek() failed in ReadUserLog::readEvent"""		4863026	0					
ANR	4863367	IfStatement	if ( m_lock -> isLocked ( ) )		4863026	1					
ANR	4863368	Condition	m_lock -> isLocked ( )	1181:9:31040:31057	4863026	0	True				
ANR	4863369	CallExpression	m_lock -> isLocked ( )		4863026	0					
ANR	4863370	Callee	m_lock -> isLocked		4863026	0					
ANR	4863371	PtrMemberAccess	m_lock -> isLocked		4863026	0					
ANR	4863372	Identifier	m_lock		4863026	0					
ANR	4863373	Identifier	isLocked		4863026	1					
ANR	4863374	ArgumentList			4863026	1					
ANR	4863375	CompoundStatement		102:30:3219:3219	4863026	1					
ANR	4863376	ExpressionStatement	m_lock -> release ( )	1182:5:31068:31085	4863026	0	True				
ANR	4863377	CallExpression	m_lock -> release ( )		4863026	0					
ANR	4863378	Callee	m_lock -> release		4863026	0					
ANR	4863379	PtrMemberAccess	m_lock -> release		4863026	0					
ANR	4863380	Identifier	m_lock		4863026	0					
ANR	4863381	Identifier	release		4863026	1					
ANR	4863382	ArgumentList			4863026	1					
ANR	4863383	ReturnStatement	return ULOG_UNK_ERROR ;	1184:4:31097:31118	4863026	2	True				
ANR	4863384	Identifier	ULOG_UNK_ERROR		4863026	0					
ANR	4863385	ExpressionStatement	clearerr ( m_fp )	1188:3:31171:31186	4863026	1	True				
ANR	4863386	CallExpression	clearerr ( m_fp )		4863026	0					
ANR	4863387	Callee	clearerr		4863026	0					
ANR	4863388	Identifier	clearerr		4863026	0					
ANR	4863389	ArgumentList	m_fp		4863026	1					
ANR	4863390	Argument	m_fp		4863026	0					
ANR	4863391	Identifier	m_fp		4863026	0					
ANR	4863392	IdentifierDeclStatement	int oldeventnumber = eventnumber ;	1189:3:31191:31223	4863026	2	True				
ANR	4863393	IdentifierDecl	oldeventnumber = eventnumber		4863026	0					
ANR	4863394	IdentifierDeclType	int		4863026	0					
ANR	4863395	Identifier	oldeventnumber		4863026	1					
ANR	4863396	AssignmentExpression	oldeventnumber = eventnumber		4863026	2		=			
ANR	4863397	Identifier	eventnumber		4863026	0					
ANR	4863398	Identifier	eventnumber		4863026	1					
ANR	4863399	ExpressionStatement	eventnumber = - 1	1190:3:31228:31244	4863026	3	True				
ANR	4863400	AssignmentExpression	eventnumber = - 1		4863026	0		=			
ANR	4863401	Identifier	eventnumber		4863026	0					
ANR	4863402	UnaryOperationExpression	- 1		4863026	1					
ANR	4863403	UnaryOperator	-		4863026	0					
ANR	4863404	PrimaryExpression	1		4863026	1					
ANR	4863405	ExpressionStatement	"retval1 = fscanf ( m_fp , ""%d"" , & eventnumber )"	1191:3:31249:31292	4863026	4	True				
ANR	4863406	AssignmentExpression	"retval1 = fscanf ( m_fp , ""%d"" , & eventnumber )"		4863026	0		=			
ANR	4863407	Identifier	retval1		4863026	0					
ANR	4863408	CallExpression	"fscanf ( m_fp , ""%d"" , & eventnumber )"		4863026	1					
ANR	4863409	Callee	fscanf		4863026	0					
ANR	4863410	Identifier	fscanf		4863026	0					
ANR	4863411	ArgumentList	m_fp		4863026	1					
ANR	4863412	Argument	m_fp		4863026	0					
ANR	4863413	Identifier	m_fp		4863026	0					
ANR	4863414	Argument	"""%d"""		4863026	1					
ANR	4863415	PrimaryExpression	"""%d"""		4863026	0					
ANR	4863416	Argument	& eventnumber		4863026	2					
ANR	4863417	UnaryOperationExpression	& eventnumber		4863026	0					
ANR	4863418	UnaryOperator	&		4863026	0					
ANR	4863419	Identifier	eventnumber		4863026	1					
ANR	4863420	IfStatement	if ( retval1 == 1 )		4863026	5					
ANR	4863421	Condition	retval1 == 1	1192:7:31301:31312	4863026	0	True				
ANR	4863422	EqualityExpression	retval1 == 1		4863026	0		==			
ANR	4863423	Identifier	retval1		4863026	0					
ANR	4863424	PrimaryExpression	1		4863026	1					
ANR	4863425	CompoundStatement		113:22:3474:3474	4863026	1					
ANR	4863426	IfStatement	if ( eventnumber != oldeventnumber )		4863026	0					
ANR	4863427	Condition	eventnumber != oldeventnumber	1193:8:31326:31354	4863026	0	True				
ANR	4863428	EqualityExpression	eventnumber != oldeventnumber		4863026	0		!=			
ANR	4863429	Identifier	eventnumber		4863026	0					
ANR	4863430	Identifier	oldeventnumber		4863026	1					
ANR	4863431	CompoundStatement		114:40:3516:3516	4863026	1					
ANR	4863432	IfStatement	if ( event )		4863026	0					
ANR	4863433	Condition	event	1194:9:31369:31373	4863026	0	True				
ANR	4863434	Identifier	event		4863026	0					
ANR	4863435	CompoundStatement		115:17:3535:3535	4863026	1					
ANR	4863436	Statement	delete	1195:6:31385:31390	4863026	0	True				
ANR	4863437	ExpressionStatement	event	1195:13:31392:31397	4863026	1	True				
ANR	4863438	Identifier	event		4863026	0					
ANR	4863439	ExpressionStatement	event = instantiateEvent ( ( ULogEventNumber ) eventnumber )	1200:5:31483:31539	4863026	1	True				
ANR	4863440	AssignmentExpression	event = instantiateEvent ( ( ULogEventNumber ) eventnumber )		4863026	0		=			
ANR	4863441	Identifier	event		4863026	0					
ANR	4863442	CallExpression	instantiateEvent ( ( ULogEventNumber ) eventnumber )		4863026	1					
ANR	4863443	Callee	instantiateEvent		4863026	0					
ANR	4863444	Identifier	instantiateEvent		4863026	0					
ANR	4863445	ArgumentList	( ULogEventNumber ) eventnumber		4863026	1					
ANR	4863446	Argument	( ULogEventNumber ) eventnumber		4863026	0					
ANR	4863447	CastExpression	( ULogEventNumber ) eventnumber		4863026	0					
ANR	4863448	CastTarget	ULogEventNumber		4863026	0					
ANR	4863449	Identifier	eventnumber		4863026	1					
ANR	4863450	IfStatement	if ( ! event )		4863026	2					
ANR	4863451	Condition	! event	1201:9:31550:31555	4863026	0	True				
ANR	4863452	UnaryOperationExpression	! event		4863026	0					
ANR	4863453	UnaryOperator	!		4863026	0					
ANR	4863454	Identifier	event		4863026	1					
ANR	4863455	CompoundStatement		122:18:3717:3717	4863026	1					
ANR	4863456	Statement	dprintf	1202:6:31567:31573	4863026	0	True				
ANR	4863457	Statement	(	1202:13:31574:31574	4863026	1	True				
ANR	4863458	Statement	D_FULLDEBUG	1202:15:31576:31586	4863026	2	True				
ANR	4863459	Statement	","	1202:26:31587:31587	4863026	3	True				
ANR	4863460	Statement	"""ReadUserLog: unable to """	1202:28:31589:31613	4863026	4	True				
ANR	4863461	Statement	"""instantiate event\\n"""	1203:9:31624:31644	4863026	5	True				
ANR	4863462	Statement	)	1203:31:31646:31646	4863026	6	True				
ANR	4863463	ExpressionStatement		1203:32:31647:31647	4863026	7	True				
ANR	4863464	IfStatement	if ( m_lock -> isLocked ( ) )		4863026	8					
ANR	4863465	Condition	m_lock -> isLocked ( )	1204:10:31659:31676	4863026	0	True				
ANR	4863466	CallExpression	m_lock -> isLocked ( )		4863026	0					
ANR	4863467	Callee	m_lock -> isLocked		4863026	0					
ANR	4863468	PtrMemberAccess	m_lock -> isLocked		4863026	0					
ANR	4863469	Identifier	m_lock		4863026	0					
ANR	4863470	Identifier	isLocked		4863026	1					
ANR	4863471	ArgumentList			4863026	1					
ANR	4863472	CompoundStatement		125:31:3838:3838	4863026	1					
ANR	4863473	ExpressionStatement	m_lock -> release ( )	1205:7:31689:31706	4863026	0	True				
ANR	4863474	CallExpression	m_lock -> release ( )		4863026	0					
ANR	4863475	Callee	m_lock -> release		4863026	0					
ANR	4863476	PtrMemberAccess	m_lock -> release		4863026	0					
ANR	4863477	Identifier	m_lock		4863026	0					
ANR	4863478	Identifier	release		4863026	1					
ANR	4863479	ArgumentList			4863026	1					
ANR	4863480	ReturnStatement	return ULOG_UNK_ERROR ;	1207:6:31722:31743	4863026	9	True				
ANR	4863481	Identifier	ULOG_UNK_ERROR		4863026	0					
ANR	4863482	ExpressionStatement	retval2 = event -> getEvent ( m_fp )	1210:4:31762:31795	4863026	1	True				
ANR	4863483	AssignmentExpression	retval2 = event -> getEvent ( m_fp )		4863026	0		=			
ANR	4863484	Identifier	retval2		4863026	0					
ANR	4863485	CallExpression	event -> getEvent ( m_fp )		4863026	1					
ANR	4863486	Callee	event -> getEvent		4863026	0					
ANR	4863487	PtrMemberAccess	event -> getEvent		4863026	0					
ANR	4863488	Identifier	event		4863026	0					
ANR	4863489	Identifier	getEvent		4863026	1					
ANR	4863490	ArgumentList	m_fp		4863026	1					
ANR	4863491	Argument	m_fp		4863026	0					
ANR	4863492	Identifier	m_fp		4863026	0					
ANR	4863493	IfStatement	if ( ! retval1 != 1 || ! retval2 )		4863026	6					
ANR	4863494	Condition	! retval1 != 1 || ! retval2	1214:7:31855:31879	4863026	0	True				
ANR	4863495	OrExpression	! retval1 != 1 || ! retval2		4863026	0		||			
ANR	4863496	EqualityExpression	! retval1 != 1		4863026	0		!=			
ANR	4863497	UnaryOperationExpression	! retval1		4863026	0					
ANR	4863498	UnaryOperator	!		4863026	0					
ANR	4863499	Identifier	retval1		4863026	1					
ANR	4863500	PrimaryExpression	1		4863026	1					
ANR	4863501	UnaryOperationExpression	! retval2		4863026	1					
ANR	4863502	UnaryOperator	!		4863026	0					
ANR	4863503	Identifier	retval2		4863026	1					
ANR	4863504	CompoundStatement		136:3:4043:4043	4863026	1					
ANR	4863505	Statement	dprintf	1216:4:31891:31897	4863026	0	True				
ANR	4863506	Statement	(	1216:11:31898:31898	4863026	1	True				
ANR	4863507	Statement	D_FULLDEBUG	1216:13:31900:31910	4863026	2	True				
ANR	4863508	Statement	","	1216:24:31911:31911	4863026	3	True				
ANR	4863509	Statement	"""ReadUserLog: error reading event """	1216:26:31913:31947	4863026	4	True				
ANR	4863510	Statement	"""on second try\\n"""	1217:7:31956:31972	4863026	5	True				
ANR	4863511	Statement	)	1217:24:31973:31973	4863026	6	True				
ANR	4863512	ExpressionStatement		1217:25:31974:31974	4863026	7	True				
ANR	4863513	Statement	delete	1218:4:31980:31985	4863026	8	True				
ANR	4863514	ExpressionStatement	event	1218:11:31987:31992	4863026	9	True				
ANR	4863515	Identifier	event		4863026	0					
ANR	4863516	ExpressionStatement	event = NULL	1219:4:31998:32010	4863026	10	True				
ANR	4863517	AssignmentExpression	event = NULL		4863026	0		=			
ANR	4863518	Identifier	event		4863026	0					
ANR	4863519	Identifier	NULL		4863026	1					
ANR	4863520	ExpressionStatement	synchronize ( )	1220:4:32053:32067	4863026	11	True				
ANR	4863521	CallExpression	synchronize ( )		4863026	0					
ANR	4863522	Callee	synchronize		4863026	0					
ANR	4863523	Identifier	synchronize		4863026	0					
ANR	4863524	ArgumentList			4863026	1					
ANR	4863525	IfStatement	if ( m_lock -> isLocked ( ) )		4863026	12					
ANR	4863526	Condition	m_lock -> isLocked ( )	1221:8:32077:32094	4863026	0	True				
ANR	4863527	CallExpression	m_lock -> isLocked ( )		4863026	0					
ANR	4863528	Callee	m_lock -> isLocked		4863026	0					
ANR	4863529	PtrMemberAccess	m_lock -> isLocked		4863026	0					
ANR	4863530	Identifier	m_lock		4863026	0					
ANR	4863531	Identifier	isLocked		4863026	1					
ANR	4863532	ArgumentList			4863026	1					
ANR	4863533	CompoundStatement		142:28:4255:4255	4863026	1					
ANR	4863534	ExpressionStatement	m_lock -> release ( )	1222:5:32104:32121	4863026	0	True				
ANR	4863535	CallExpression	m_lock -> release ( )		4863026	0					
ANR	4863536	Callee	m_lock -> release		4863026	0					
ANR	4863537	PtrMemberAccess	m_lock -> release		4863026	0					
ANR	4863538	Identifier	m_lock		4863026	0					
ANR	4863539	Identifier	release		4863026	1					
ANR	4863540	ArgumentList			4863026	1					
ANR	4863541	ReturnStatement	return ULOG_RD_ERROR ;	1224:4:32133:32153	4863026	13	True				
ANR	4863542	Identifier	ULOG_RD_ERROR		4863026	0					
ANR	4863543	ElseStatement	else		4863026	0					
ANR	4863544	CompoundStatement		148:3:4329:4329	4863026	0					
ANR	4863545	IfStatement	if ( synchronize ( ) )		4863026	0					
ANR	4863546	Condition	synchronize ( )	1230:8:32253:32265	4863026	0	True				
ANR	4863547	CallExpression	synchronize ( )		4863026	0					
ANR	4863548	Callee	synchronize		4863026	0					
ANR	4863549	Identifier	synchronize		4863026	0					
ANR	4863550	ArgumentList			4863026	1					
ANR	4863551	CompoundStatement		151:24:4427:4427	4863026	1					
ANR	4863552	IfStatement	if ( m_lock -> isLocked ( ) )		4863026	0					
ANR	4863553	Condition	m_lock -> isLocked ( )	1231:9:32280:32297	4863026	0	True				
ANR	4863554	CallExpression	m_lock -> isLocked ( )		4863026	0					
ANR	4863555	Callee	m_lock -> isLocked		4863026	0					
ANR	4863556	PtrMemberAccess	m_lock -> isLocked		4863026	0					
ANR	4863557	Identifier	m_lock		4863026	0					
ANR	4863558	Identifier	isLocked		4863026	1					
ANR	4863559	ArgumentList			4863026	1					
ANR	4863560	CompoundStatement		152:30:4459:4459	4863026	1					
ANR	4863561	ExpressionStatement	m_lock -> release ( )	1232:6:32309:32326	4863026	0	True				
ANR	4863562	CallExpression	m_lock -> release ( )		4863026	0					
ANR	4863563	Callee	m_lock -> release		4863026	0					
ANR	4863564	PtrMemberAccess	m_lock -> release		4863026	0					
ANR	4863565	Identifier	m_lock		4863026	0					
ANR	4863566	Identifier	release		4863026	1					
ANR	4863567	ArgumentList			4863026	1					
ANR	4863568	ReturnStatement	return ULOG_OK ;	1234:5:32340:32354	4863026	1	True				
ANR	4863569	Identifier	ULOG_OK		4863026	0					
ANR	4863570	ElseStatement	else		4863026	0					
ANR	4863571	CompoundStatement		158:4:4533:4533	4863026	0					
ANR	4863572	Statement	dprintf	1240:5:32467:32473	4863026	0	True				
ANR	4863573	Statement	(	1240:12:32474:32474	4863026	1	True				
ANR	4863574	Statement	D_FULLDEBUG	1240:14:32476:32486	4863026	2	True				
ANR	4863575	Statement	","	1240:25:32487:32487	4863026	3	True				
ANR	4863576	Statement	"""ReadUserLog: got event on second try """	1241:8:32497:32535	4863026	4	True				
ANR	4863577	Statement	"""but synchronize() failed\\n"""	1242:8:32545:32572	4863026	5	True				
ANR	4863578	Statement	)	1242:36:32573:32573	4863026	6	True				
ANR	4863579	ExpressionStatement		1242:37:32574:32574	4863026	7	True				
ANR	4863580	Statement	delete	1243:5:32581:32586	4863026	8	True				
ANR	4863581	ExpressionStatement	event	1243:12:32588:32593	4863026	9	True				
ANR	4863582	Identifier	event		4863026	0					
ANR	4863583	ExpressionStatement	event = NULL	1244:5:32600:32612	4863026	10	True				
ANR	4863584	AssignmentExpression	event = NULL		4863026	0		=			
ANR	4863585	Identifier	event		4863026	0					
ANR	4863586	Identifier	NULL		4863026	1					
ANR	4863587	ExpressionStatement	clearerr ( m_fp )	1245:5:32656:32672	4863026	11	True				
ANR	4863588	CallExpression	clearerr ( m_fp )		4863026	0					
ANR	4863589	Callee	clearerr		4863026	0					
ANR	4863590	Identifier	clearerr		4863026	0					
ANR	4863591	ArgumentList	m_fp		4863026	1					
ANR	4863592	Argument	m_fp		4863026	0					
ANR	4863593	Identifier	m_fp		4863026	0					
ANR	4863594	IfStatement	if ( m_lock -> isLocked ( ) )		4863026	12					
ANR	4863595	Condition	m_lock -> isLocked ( )	1246:9:32683:32700	4863026	0	True				
ANR	4863596	CallExpression	m_lock -> isLocked ( )		4863026	0					
ANR	4863597	Callee	m_lock -> isLocked		4863026	0					
ANR	4863598	PtrMemberAccess	m_lock -> isLocked		4863026	0					
ANR	4863599	Identifier	m_lock		4863026	0					
ANR	4863600	Identifier	isLocked		4863026	1					
ANR	4863601	ArgumentList			4863026	1					
ANR	4863602	CompoundStatement		167:30:4862:4862	4863026	1					
ANR	4863603	ExpressionStatement	m_lock -> release ( )	1247:6:32712:32729	4863026	0	True				
ANR	4863604	CallExpression	m_lock -> release ( )		4863026	0					
ANR	4863605	Callee	m_lock -> release		4863026	0					
ANR	4863606	PtrMemberAccess	m_lock -> release		4863026	0					
ANR	4863607	Identifier	m_lock		4863026	0					
ANR	4863608	Identifier	release		4863026	1					
ANR	4863609	ArgumentList			4863026	1					
ANR	4863610	ReturnStatement	return ULOG_NO_EVENT ;	1249:5:32743:32763	4863026	13	True				
ANR	4863611	Identifier	ULOG_NO_EVENT		4863026	0					
ANR	4863612	ElseStatement	else		4863026	0					
ANR	4863613	CompoundStatement		175:2:4947:4947	4863026	0					
ANR	4863614	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""ReadUserLog: syncronize() failed\\n"" )"	1257:3:32924:32983	4863026	0	True				
ANR	4863615	CallExpression	"dprintf ( D_FULLDEBUG , ""ReadUserLog: syncronize() failed\\n"" )"		4863026	0					
ANR	4863616	Callee	dprintf		4863026	0					
ANR	4863617	Identifier	dprintf		4863026	0					
ANR	4863618	ArgumentList	D_FULLDEBUG		4863026	1					
ANR	4863619	Argument	D_FULLDEBUG		4863026	0					
ANR	4863620	Identifier	D_FULLDEBUG		4863026	0					
ANR	4863621	Argument	"""ReadUserLog: syncronize() failed\\n"""		4863026	1					
ANR	4863622	PrimaryExpression	"""ReadUserLog: syncronize() failed\\n"""		4863026	0					
ANR	4863623	IfStatement	"if ( fseek ( m_fp , filepos , SEEK_SET ) )"		4863026	1					
ANR	4863624	Condition	"fseek ( m_fp , filepos , SEEK_SET )"	1258:7:32992:33022	4863026	0	True				
ANR	4863625	CallExpression	"fseek ( m_fp , filepos , SEEK_SET )"		4863026	0					
ANR	4863626	Callee	fseek		4863026	0					
ANR	4863627	Identifier	fseek		4863026	0					
ANR	4863628	ArgumentList	m_fp		4863026	1					
ANR	4863629	Argument	m_fp		4863026	0					
ANR	4863630	Identifier	m_fp		4863026	0					
ANR	4863631	Argument	filepos		4863026	1					
ANR	4863632	Identifier	filepos		4863026	0					
ANR	4863633	Argument	SEEK_SET		4863026	2					
ANR	4863634	Identifier	SEEK_SET		4863026	0					
ANR	4863635	CompoundStatement		180:3:5186:5186	4863026	1					
ANR	4863636	ExpressionStatement	"dprintf ( D_ALWAYS , ""fseek() failed in ReadUserLog::readEvent"" )"	1260:4:33034:33095	4863026	0	True				
ANR	4863637	CallExpression	"dprintf ( D_ALWAYS , ""fseek() failed in ReadUserLog::readEvent"" )"		4863026	0					
ANR	4863638	Callee	dprintf		4863026	0					
ANR	4863639	Identifier	dprintf		4863026	0					
ANR	4863640	ArgumentList	D_ALWAYS		4863026	1					
ANR	4863641	Argument	D_ALWAYS		4863026	0					
ANR	4863642	Identifier	D_ALWAYS		4863026	0					
ANR	4863643	Argument	"""fseek() failed in ReadUserLog::readEvent"""		4863026	1					
ANR	4863644	PrimaryExpression	"""fseek() failed in ReadUserLog::readEvent"""		4863026	0					
ANR	4863645	IfStatement	if ( m_lock -> isLocked ( ) )		4863026	1					
ANR	4863646	Condition	m_lock -> isLocked ( )	1261:8:33105:33122	4863026	0	True				
ANR	4863647	CallExpression	m_lock -> isLocked ( )		4863026	0					
ANR	4863648	Callee	m_lock -> isLocked		4863026	0					
ANR	4863649	PtrMemberAccess	m_lock -> isLocked		4863026	0					
ANR	4863650	Identifier	m_lock		4863026	0					
ANR	4863651	Identifier	isLocked		4863026	1					
ANR	4863652	ArgumentList			4863026	1					
ANR	4863653	CompoundStatement		182:28:5283:5283	4863026	1					
ANR	4863654	ExpressionStatement	m_lock -> release ( )	1262:5:33132:33149	4863026	0	True				
ANR	4863655	CallExpression	m_lock -> release ( )		4863026	0					
ANR	4863656	Callee	m_lock -> release		4863026	0					
ANR	4863657	PtrMemberAccess	m_lock -> release		4863026	0					
ANR	4863658	Identifier	m_lock		4863026	0					
ANR	4863659	Identifier	release		4863026	1					
ANR	4863660	ArgumentList			4863026	1					
ANR	4863661	ReturnStatement	return ULOG_UNK_ERROR ;	1264:4:33161:33182	4863026	2	True				
ANR	4863662	Identifier	ULOG_UNK_ERROR		4863026	0					
ANR	4863663	ExpressionStatement	clearerr ( m_fp )	1266:3:33192:33207	4863026	2	True				
ANR	4863664	CallExpression	clearerr ( m_fp )		4863026	0					
ANR	4863665	Callee	clearerr		4863026	0					
ANR	4863666	Identifier	clearerr		4863026	0					
ANR	4863667	ArgumentList	m_fp		4863026	1					
ANR	4863668	Argument	m_fp		4863026	0					
ANR	4863669	Identifier	m_fp		4863026	0					
ANR	4863670	Statement	delete	1267:3:33212:33217	4863026	3	True				
ANR	4863671	ExpressionStatement	event	1267:10:33219:33224	4863026	4	True				
ANR	4863672	Identifier	event		4863026	0					
ANR	4863673	ExpressionStatement	event = NULL	1268:3:33229:33241	4863026	5	True				
ANR	4863674	AssignmentExpression	event = NULL		4863026	0		=			
ANR	4863675	Identifier	event		4863026	0					
ANR	4863676	Identifier	NULL		4863026	1					
ANR	4863677	IfStatement	if ( m_lock -> isLocked ( ) )		4863026	6					
ANR	4863678	Condition	m_lock -> isLocked ( )	1269:7:33287:33304	4863026	0	True				
ANR	4863679	CallExpression	m_lock -> isLocked ( )		4863026	0					
ANR	4863680	Callee	m_lock -> isLocked		4863026	0					
ANR	4863681	PtrMemberAccess	m_lock -> isLocked		4863026	0					
ANR	4863682	Identifier	m_lock		4863026	0					
ANR	4863683	Identifier	isLocked		4863026	1					
ANR	4863684	ArgumentList			4863026	1					
ANR	4863685	CompoundStatement		190:27:5465:5465	4863026	1					
ANR	4863686	ExpressionStatement	m_lock -> release ( )	1270:4:33313:33330	4863026	0	True				
ANR	4863687	CallExpression	m_lock -> release ( )		4863026	0					
ANR	4863688	Callee	m_lock -> release		4863026	0					
ANR	4863689	PtrMemberAccess	m_lock -> release		4863026	0					
ANR	4863690	Identifier	m_lock		4863026	0					
ANR	4863691	Identifier	release		4863026	1					
ANR	4863692	ArgumentList			4863026	1					
ANR	4863693	ReturnStatement	return ULOG_NO_EVENT ;	1272:3:33340:33360	4863026	7	True				
ANR	4863694	Identifier	ULOG_NO_EVENT		4863026	0					
ANR	4863695	ElseStatement	else		4863026	0					
ANR	4863696	CompoundStatement		197:1:5534:5534	4863026	0					
ANR	4863697	IfStatement	if ( synchronize ( ) )		4863026	0					
ANR	4863698	Condition	synchronize ( )	1278:6:33439:33452	4863026	0	True				
ANR	4863699	CallExpression	synchronize ( )		4863026	0					
ANR	4863700	Callee	synchronize		4863026	0					
ANR	4863701	Identifier	synchronize		4863026	0					
ANR	4863702	ArgumentList			4863026	1					
ANR	4863703	CompoundStatement		200:2:5615:5615	4863026	1					
ANR	4863704	IfStatement	if ( m_lock -> isLocked ( ) )		4863026	0					
ANR	4863705	Condition	m_lock -> isLocked ( )	1280:7:33466:33483	4863026	0	True				
ANR	4863706	CallExpression	m_lock -> isLocked ( )		4863026	0					
ANR	4863707	Callee	m_lock -> isLocked		4863026	0					
ANR	4863708	PtrMemberAccess	m_lock -> isLocked		4863026	0					
ANR	4863709	Identifier	m_lock		4863026	0					
ANR	4863710	Identifier	isLocked		4863026	1					
ANR	4863711	ArgumentList			4863026	1					
ANR	4863712	CompoundStatement		201:27:5644:5644	4863026	1					
ANR	4863713	ExpressionStatement	m_lock -> release ( )	1281:4:33492:33509	4863026	0	True				
ANR	4863714	CallExpression	m_lock -> release ( )		4863026	0					
ANR	4863715	Callee	m_lock -> release		4863026	0					
ANR	4863716	PtrMemberAccess	m_lock -> release		4863026	0					
ANR	4863717	Identifier	m_lock		4863026	0					
ANR	4863718	Identifier	release		4863026	1					
ANR	4863719	ArgumentList			4863026	1					
ANR	4863720	ReturnStatement	return ULOG_OK ;	1283:3:33519:33533	4863026	1	True				
ANR	4863721	Identifier	ULOG_OK		4863026	0					
ANR	4863722	ElseStatement	else		4863026	0					
ANR	4863723	CompoundStatement		207:2:5706:5706	4863026	0					
ANR	4863724	Statement	dprintf	1289:3:33635:33641	4863026	0	True				
ANR	4863725	Statement	(	1289:10:33642:33642	4863026	1	True				
ANR	4863726	Statement	D_FULLDEBUG	1289:12:33644:33654	4863026	2	True				
ANR	4863727	Statement	","	1289:23:33655:33655	4863026	3	True				
ANR	4863728	Statement	"""ReadUserLog: got event on first try """	1289:25:33657:33694	4863026	4	True				
ANR	4863729	Statement	"""but synchronize() failed\\n"""	1290:5:33701:33728	4863026	5	True				
ANR	4863730	Statement	)	1290:33:33729:33729	4863026	6	True				
ANR	4863731	ExpressionStatement		1290:34:33730:33730	4863026	7	True				
ANR	4863732	Statement	delete	1292:3:33736:33741	4863026	8	True				
ANR	4863733	ExpressionStatement	event	1292:10:33743:33748	4863026	9	True				
ANR	4863734	Identifier	event		4863026	0					
ANR	4863735	ExpressionStatement	event = NULL	1293:3:33753:33765	4863026	10	True				
ANR	4863736	AssignmentExpression	event = NULL		4863026	0		=			
ANR	4863737	Identifier	event		4863026	0					
ANR	4863738	Identifier	NULL		4863026	1					
ANR	4863739	ExpressionStatement	clearerr ( m_fp )	1294:3:33807:33822	4863026	11	True				
ANR	4863740	CallExpression	clearerr ( m_fp )		4863026	0					
ANR	4863741	Callee	clearerr		4863026	0					
ANR	4863742	Identifier	clearerr		4863026	0					
ANR	4863743	ArgumentList	m_fp		4863026	1					
ANR	4863744	Argument	m_fp		4863026	0					
ANR	4863745	Identifier	m_fp		4863026	0					
ANR	4863746	IfStatement	if ( m_lock -> isLocked ( ) )		4863026	12					
ANR	4863747	Condition	m_lock -> isLocked ( )	1295:7:33831:33848	4863026	0	True				
ANR	4863748	CallExpression	m_lock -> isLocked ( )		4863026	0					
ANR	4863749	Callee	m_lock -> isLocked		4863026	0					
ANR	4863750	PtrMemberAccess	m_lock -> isLocked		4863026	0					
ANR	4863751	Identifier	m_lock		4863026	0					
ANR	4863752	Identifier	isLocked		4863026	1					
ANR	4863753	ArgumentList			4863026	1					
ANR	4863754	CompoundStatement		216:28:6010:6010	4863026	1					
ANR	4863755	ExpressionStatement	m_lock -> release ( )	1296:4:33858:33875	4863026	0	True				
ANR	4863756	CallExpression	m_lock -> release ( )		4863026	0					
ANR	4863757	Callee	m_lock -> release		4863026	0					
ANR	4863758	PtrMemberAccess	m_lock -> release		4863026	0					
ANR	4863759	Identifier	m_lock		4863026	0					
ANR	4863760	Identifier	release		4863026	1					
ANR	4863761	ArgumentList			4863026	1					
ANR	4863762	ReturnStatement	return ULOG_NO_EVENT ;	1298:3:33885:33905	4863026	13	True				
ANR	4863763	Identifier	ULOG_NO_EVENT		4863026	0					
ANR	4863764	IfStatement	if ( m_lock -> isLocked ( ) )		4863026	11					
ANR	4863765	Condition	m_lock -> isLocked ( )	1303:5:33944:33961	4863026	0	True				
ANR	4863766	CallExpression	m_lock -> isLocked ( )		4863026	0					
ANR	4863767	Callee	m_lock -> isLocked		4863026	0					
ANR	4863768	PtrMemberAccess	m_lock -> isLocked		4863026	0					
ANR	4863769	Identifier	m_lock		4863026	0					
ANR	4863770	Identifier	isLocked		4863026	1					
ANR	4863771	ArgumentList			4863026	1					
ANR	4863772	CompoundStatement		224:25:6122:6122	4863026	1					
ANR	4863773	ExpressionStatement	m_lock -> release ( )	1304:2:33968:33985	4863026	0	True				
ANR	4863774	CallExpression	m_lock -> release ( )		4863026	0					
ANR	4863775	Callee	m_lock -> release		4863026	0					
ANR	4863776	PtrMemberAccess	m_lock -> release		4863026	0					
ANR	4863777	Identifier	m_lock		4863026	0					
ANR	4863778	Identifier	release		4863026	1					
ANR	4863779	ArgumentList			4863026	1					
ANR	4863780	Statement	dprintf	1307:1:33992:33998	4863026	12	True				
ANR	4863781	Statement	(	1307:8:33999:33999	4863026	13	True				
ANR	4863782	Statement	D_ALWAYS	1307:10:34001:34008	4863026	14	True				
ANR	4863783	Statement	","	1307:18:34009:34009	4863026	15	True				
ANR	4863784	Statement	"""Error: got to the end of """	1307:20:34011:34037	4863026	16	True				
ANR	4863785	Statement	"""ReadUserLog::readEventOld()\\n"""	1308:3:34042:34072	4863026	17	True				
ANR	4863786	Statement	)	1308:34:34073:34073	4863026	18	True				
ANR	4863787	ExpressionStatement		1308:35:34074:34074	4863026	19	True				
ANR	4863788	ReturnStatement	return ULOG_UNK_ERROR ;	1310:1:34078:34099	4863026	20	True				
ANR	4863789	Identifier	ULOG_UNK_ERROR		4863026	0					
ANR	4863790	ReturnType	ULogEventOutcome		4863026	1					
ANR	4863791	Identifier	ReadUserLog :: readEventOld		4863026	2					
ANR	4863792	ParameterList	ULogEvent * & event		4863026	3					
ANR	4863793	Parameter	ULogEvent * & event	1079:27:27820:27837	4863026	0	True				
ANR	4863794	ParameterType	ULogEvent * &		4863026	0					
ANR	4863795	Identifier	event		4863026	1					
ANR	4863796	CFGEntryNode	ENTRY		4863026		True				
ANR	4863797	CFGExitNode	EXIT		4863026		True				
ANR	4863798	Symbol	& eventnumber		4863026						
ANR	4863799	Symbol	ULOG_NO_EVENT		4863026						
ANR	4863800	Symbol	* event		4863026						
ANR	4863801	Symbol	ftell		4863026						
ANR	4863802	Symbol	ULOG_RD_ERROR		4863026						
ANR	4863803	Symbol	ULOG_UNK_ERROR		4863026						
ANR	4863804	Symbol	oldeventnumber		4863026						
ANR	4863805	Symbol	event -> getEvent		4863026						
ANR	4863806	Symbol	fseek		4863026						
ANR	4863807	Symbol	m_lock		4863026						
ANR	4863808	Symbol	filepos		4863026						
ANR	4863809	Symbol	WRITE_LOCK		4863026						
ANR	4863810	Symbol	* m_lock		4863026						
ANR	4863811	Symbol	instantiateEvent		4863026						
ANR	4863812	Symbol	event		4863026						
ANR	4863813	Symbol	m_lock -> isLocked		4863026						
ANR	4863814	Symbol	synchronize		4863026						
ANR	4863815	Symbol	SEEK_SET		4863026						
ANR	4863816	Symbol	eventnumber		4863026						
ANR	4863817	Symbol	NULL		4863026						
ANR	4863818	Symbol	__FILE__		4863026						
ANR	4863819	Symbol	retval1		4863026						
ANR	4863820	Symbol	D_ALWAYS		4863026						
ANR	4863821	Symbol	D_FULLDEBUG		4863026						
ANR	4863822	Symbol	retval2		4863026						
ANR	4863823	Symbol	m_lock -> isUnlocked		4863026						
ANR	4863824	Symbol	__LINE__		4863026						
ANR	4863825	Symbol	m_fp		4863026						
ANR	4863826	Symbol	ULOG_OK		4863026						
ANR	4863827	Symbol	fscanf		4863026						
ANR	4863828	Symbol	feof		4863026						
ANR	4863829	Function	ReadUserLog :: InitFileState	1314:0:34151:34264							
ANR	4863830	FunctionDef	ReadUserLog :: InitFileState (ReadUserLog :: FileState & state)		4863829	0					
ANR	4863831	CompoundStatement		1316:0:34216:34264	4863829	0					
ANR	4863832	ReturnStatement	return ReadUserLogState :: InitState ( state ) ;	1317:1:34219:34262	4863829	0	True				
ANR	4863833	CallExpression	ReadUserLogState :: InitState ( state )		4863829	0					
ANR	4863834	Callee	ReadUserLogState :: InitState		4863829	0					
ANR	4863835	Identifier	ReadUserLogState :: InitState		4863829	0					
ANR	4863836	ArgumentList	state		4863829	1					
ANR	4863837	Argument	state		4863829	0					
ANR	4863838	Identifier	state		4863829	0					
ANR	4863839	ReturnType	bool		4863829	1					
ANR	4863840	Identifier	ReadUserLog :: InitFileState		4863829	2					
ANR	4863841	ParameterList	ReadUserLog :: FileState & state		4863829	3					
ANR	4863842	Parameter	ReadUserLog :: FileState & state	1315:28:34184:34212	4863829	0	True				
ANR	4863843	ParameterType	ReadUserLog :: FileState &		4863829	0					
ANR	4863844	Identifier	state		4863829	1					
ANR	4863845	CFGEntryNode	ENTRY		4863829		True				
ANR	4863846	CFGExitNode	EXIT		4863829		True				
ANR	4863847	Symbol	ReadUserLogState :: InitState		4863829						
ANR	4863848	Symbol	state		4863829						
ANR	4863849	Function	ReadUserLog :: UninitFileState	1321:0:34317:34434							
ANR	4863850	FunctionDef	ReadUserLog :: UninitFileState (ReadUserLog :: FileState & state)		4863849	0					
ANR	4863851	CompoundStatement		1323:0:34384:34434	4863849	0					
ANR	4863852	ReturnStatement	return ReadUserLogState :: UninitState ( state ) ;	1324:1:34387:34432	4863849	0	True				
ANR	4863853	CallExpression	ReadUserLogState :: UninitState ( state )		4863849	0					
ANR	4863854	Callee	ReadUserLogState :: UninitState		4863849	0					
ANR	4863855	Identifier	ReadUserLogState :: UninitState		4863849	0					
ANR	4863856	ArgumentList	state		4863849	1					
ANR	4863857	Argument	state		4863849	0					
ANR	4863858	Identifier	state		4863849	0					
ANR	4863859	ReturnType	bool		4863849	1					
ANR	4863860	Identifier	ReadUserLog :: UninitFileState		4863849	2					
ANR	4863861	ParameterList	ReadUserLog :: FileState & state		4863849	3					
ANR	4863862	Parameter	ReadUserLog :: FileState & state	1322:30:34352:34380	4863849	0	True				
ANR	4863863	ParameterType	ReadUserLog :: FileState &		4863849	0					
ANR	4863864	Identifier	state		4863849	1					
ANR	4863865	CFGEntryNode	ENTRY		4863849		True				
ANR	4863866	CFGExitNode	EXIT		4863849		True				
ANR	4863867	Symbol	ReadUserLogState :: UninitState		4863849						
ANR	4863868	Symbol	state		4863849						
ANR	4863869	Function	ReadUserLog :: GetFileState	1327:0:34437:34637							
ANR	4863870	FunctionDef	ReadUserLog :: GetFileState (ReadUserLog :: FileState & state)		4863869	0					
ANR	4863871	CompoundStatement		1329:0:34507:34637	4863869	0					
ANR	4863872	IfStatement	if ( ! m_initialized )		4863869	0					
ANR	4863873	Condition	! m_initialized	1330:6:34515:34528	4863869	0	True				
ANR	4863874	UnaryOperationExpression	! m_initialized		4863869	0					
ANR	4863875	UnaryOperator	!		4863869	0					
ANR	4863876	Identifier	m_initialized		4863869	1					
ANR	4863877	CompoundStatement		2:23:24:24	4863869	1					
ANR	4863878	ExpressionStatement	"Error ( LOG_ERROR_NOT_INITIALIZED , __LINE__ )"	1331:2:34536:34580	4863869	0	True				
ANR	4863879	CallExpression	"Error ( LOG_ERROR_NOT_INITIALIZED , __LINE__ )"		4863869	0					
ANR	4863880	Callee	Error		4863869	0					
ANR	4863881	Identifier	Error		4863869	0					
ANR	4863882	ArgumentList	LOG_ERROR_NOT_INITIALIZED		4863869	1					
ANR	4863883	Argument	LOG_ERROR_NOT_INITIALIZED		4863869	0					
ANR	4863884	Identifier	LOG_ERROR_NOT_INITIALIZED		4863869	0					
ANR	4863885	Argument	__LINE__		4863869	1					
ANR	4863886	Identifier	__LINE__		4863869	0					
ANR	4863887	ReturnStatement	return false ;	1332:2:34584:34596	4863869	1	True				
ANR	4863888	Identifier	false		4863869	0					
ANR	4863889	ReturnStatement	return m_state -> GetState ( state ) ;	1334:1:34602:34635	4863869	1	True				
ANR	4863890	CallExpression	m_state -> GetState ( state )		4863869	0					
ANR	4863891	Callee	m_state -> GetState		4863869	0					
ANR	4863892	PtrMemberAccess	m_state -> GetState		4863869	0					
ANR	4863893	Identifier	m_state		4863869	0					
ANR	4863894	Identifier	GetState		4863869	1					
ANR	4863895	ArgumentList	state		4863869	1					
ANR	4863896	Argument	state		4863869	0					
ANR	4863897	Identifier	state		4863869	0					
ANR	4863898	ReturnType	bool		4863869	1					
ANR	4863899	Identifier	ReadUserLog :: GetFileState		4863869	2					
ANR	4863900	ParameterList	ReadUserLog :: FileState & state		4863869	3					
ANR	4863901	Parameter	ReadUserLog :: FileState & state	1328:27:34469:34497	4863869	0	True				
ANR	4863902	ParameterType	ReadUserLog :: FileState &		4863869	0					
ANR	4863903	Identifier	state		4863869	1					
ANR	4863904	CFGEntryNode	ENTRY		4863869		True				
ANR	4863905	CFGExitNode	EXIT		4863869		True				
ANR	4863906	Symbol	m_initialized		4863869						
ANR	4863907	Symbol	m_state		4863869						
ANR	4863908	Symbol	m_state -> GetState		4863869						
ANR	4863909	Symbol	* m_state		4863869						
ANR	4863910	Symbol	LOG_ERROR_NOT_INITIALIZED		4863869						
ANR	4863911	Symbol	false		4863869						
ANR	4863912	Symbol	state		4863869						
ANR	4863913	Symbol	__LINE__		4863869						
ANR	4863914	Function	ReadUserLog :: SetFileState	1337:0:34640:34840							
ANR	4863915	FunctionDef	ReadUserLog :: SetFileState (const ReadUserLog :: FileState & state)		4863914	0					
ANR	4863916	CompoundStatement		1339:0:34710:34840	4863914	0					
ANR	4863917	IfStatement	if ( ! m_initialized )		4863914	0					
ANR	4863918	Condition	! m_initialized	1340:6:34718:34731	4863914	0	True				
ANR	4863919	UnaryOperationExpression	! m_initialized		4863914	0					
ANR	4863920	UnaryOperator	!		4863914	0					
ANR	4863921	Identifier	m_initialized		4863914	1					
ANR	4863922	CompoundStatement		2:23:24:24	4863914	1					
ANR	4863923	ExpressionStatement	"Error ( LOG_ERROR_NOT_INITIALIZED , __LINE__ )"	1341:2:34739:34783	4863914	0	True				
ANR	4863924	CallExpression	"Error ( LOG_ERROR_NOT_INITIALIZED , __LINE__ )"		4863914	0					
ANR	4863925	Callee	Error		4863914	0					
ANR	4863926	Identifier	Error		4863914	0					
ANR	4863927	ArgumentList	LOG_ERROR_NOT_INITIALIZED		4863914	1					
ANR	4863928	Argument	LOG_ERROR_NOT_INITIALIZED		4863914	0					
ANR	4863929	Identifier	LOG_ERROR_NOT_INITIALIZED		4863914	0					
ANR	4863930	Argument	__LINE__		4863914	1					
ANR	4863931	Identifier	__LINE__		4863914	0					
ANR	4863932	ReturnStatement	return false ;	1342:2:34787:34799	4863914	1	True				
ANR	4863933	Identifier	false		4863914	0					
ANR	4863934	ReturnStatement	return m_state -> SetState ( state ) ;	1344:1:34805:34838	4863914	1	True				
ANR	4863935	CallExpression	m_state -> SetState ( state )		4863914	0					
ANR	4863936	Callee	m_state -> SetState		4863914	0					
ANR	4863937	PtrMemberAccess	m_state -> SetState		4863914	0					
ANR	4863938	Identifier	m_state		4863914	0					
ANR	4863939	Identifier	SetState		4863914	1					
ANR	4863940	ArgumentList	state		4863914	1					
ANR	4863941	Argument	state		4863914	0					
ANR	4863942	Identifier	state		4863914	0					
ANR	4863943	ReturnType	bool		4863914	1					
ANR	4863944	Identifier	ReadUserLog :: SetFileState		4863914	2					
ANR	4863945	ParameterList	const ReadUserLog :: FileState & state		4863914	3					
ANR	4863946	Parameter	const ReadUserLog :: FileState & state	1338:27:34672:34706	4863914	0	True				
ANR	4863947	ParameterType	const ReadUserLog :: FileState &		4863914	0					
ANR	4863948	Identifier	state		4863914	1					
ANR	4863949	CFGEntryNode	ENTRY		4863914		True				
ANR	4863950	CFGExitNode	EXIT		4863914		True				
ANR	4863951	Symbol	m_initialized		4863914						
ANR	4863952	Symbol	m_state		4863914						
ANR	4863953	Symbol	m_state -> SetState		4863914						
ANR	4863954	Symbol	* m_state		4863914						
ANR	4863955	Symbol	LOG_ERROR_NOT_INITIALIZED		4863914						
ANR	4863956	Symbol	false		4863914						
ANR	4863957	Symbol	state		4863914						
ANR	4863958	Symbol	__LINE__		4863914						
ANR	4863959	Function	ReadUserLog :: Lock	1348:0:34844:35038							
ANR	4863960	FunctionDef	ReadUserLog :: Lock (bool verify_init)		4863959	0					
ANR	4863961	CompoundStatement		1350:0:34887:35038	4863959	0					
ANR	4863962	IfStatement	if ( verify_init )		4863959	0					
ANR	4863963	Condition	verify_init	1351:5:34894:34904	4863959	0	True				
ANR	4863964	Identifier	verify_init		4863959	0					
ANR	4863965	CompoundStatement		2:19:20:20	4863959	1					
ANR	4863966	ExpressionStatement	ASSERT ( m_initialized )	1352:2:34912:34936	4863959	0	True				
ANR	4863967	CallExpression	ASSERT ( m_initialized )		4863959	0					
ANR	4863968	Callee	ASSERT		4863959	0					
ANR	4863969	Identifier	ASSERT		4863959	0					
ANR	4863970	ArgumentList	m_initialized		4863959	1					
ANR	4863971	Argument	m_initialized		4863959	0					
ANR	4863972	Identifier	m_initialized		4863959	0					
ANR	4863973	IfStatement	if ( m_lock -> isUnlocked ( ) )		4863959	1					
ANR	4863974	Condition	m_lock -> isUnlocked ( )	1354:6:34947:34966	4863959	0	True				
ANR	4863975	CallExpression	m_lock -> isUnlocked ( )		4863959	0					
ANR	4863976	Callee	m_lock -> isUnlocked		4863959	0					
ANR	4863977	PtrMemberAccess	m_lock -> isUnlocked		4863959	0					
ANR	4863978	Identifier	m_lock		4863959	0					
ANR	4863979	Identifier	isUnlocked		4863959	1					
ANR	4863980	ArgumentList			4863959	1					
ANR	4863981	CompoundStatement		5:29:82:82	4863959	1					
ANR	4863982	ExpressionStatement	m_lock -> obtain ( WRITE_LOCK )	1355:2:34974:35002	4863959	0	True				
ANR	4863983	CallExpression	m_lock -> obtain ( WRITE_LOCK )		4863959	0					
ANR	4863984	Callee	m_lock -> obtain		4863959	0					
ANR	4863985	PtrMemberAccess	m_lock -> obtain		4863959	0					
ANR	4863986	Identifier	m_lock		4863959	0					
ANR	4863987	Identifier	obtain		4863959	1					
ANR	4863988	ArgumentList	WRITE_LOCK		4863959	1					
ANR	4863989	Argument	WRITE_LOCK		4863959	0					
ANR	4863990	Identifier	WRITE_LOCK		4863959	0					
ANR	4863991	ExpressionStatement	ASSERT ( m_lock -> isLocked ( ) )	1357:1:35008:35036	4863959	2	True				
ANR	4863992	CallExpression	ASSERT ( m_lock -> isLocked ( ) )		4863959	0					
ANR	4863993	Callee	ASSERT		4863959	0					
ANR	4863994	Identifier	ASSERT		4863959	0					
ANR	4863995	ArgumentList	m_lock -> isLocked ( )		4863959	1					
ANR	4863996	Argument	m_lock -> isLocked ( )		4863959	0					
ANR	4863997	CallExpression	m_lock -> isLocked ( )		4863959	0					
ANR	4863998	Callee	m_lock -> isLocked		4863959	0					
ANR	4863999	PtrMemberAccess	m_lock -> isLocked		4863959	0					
ANR	4864000	Identifier	m_lock		4863959	0					
ANR	4864001	Identifier	isLocked		4863959	1					
ANR	4864002	ArgumentList			4863959	1					
ANR	4864003	ReturnType	void		4863959	1					
ANR	4864004	Identifier	ReadUserLog :: Lock		4863959	2					
ANR	4864005	ParameterList	bool verify_init		4863959	3					
ANR	4864006	Parameter	bool verify_init	1349:19:34868:34883	4863959	0	True				
ANR	4864007	ParameterType	bool		4863959	0					
ANR	4864008	Identifier	verify_init		4863959	1					
ANR	4864009	CFGEntryNode	ENTRY		4863959		True				
ANR	4864010	CFGExitNode	EXIT		4863959		True				
ANR	4864011	Symbol	m_lock		4863959						
ANR	4864012	Symbol	m_initialized		4863959						
ANR	4864013	Symbol	WRITE_LOCK		4863959						
ANR	4864014	Symbol	* m_lock		4863959						
ANR	4864015	Symbol	verify_init		4863959						
ANR	4864016	Symbol	m_lock -> isUnlocked		4863959						
ANR	4864017	Symbol	m_lock -> isLocked		4863959						
ANR	4864018	Function	ReadUserLog :: Unlock	1360:0:35041:35228							
ANR	4864019	FunctionDef	ReadUserLog :: Unlock (bool verify_init)		4864018	0					
ANR	4864020	CompoundStatement		1362:0:35086:35228	4864018	0					
ANR	4864021	IfStatement	if ( verify_init )		4864018	0					
ANR	4864022	Condition	verify_init	1363:5:35093:35103	4864018	0	True				
ANR	4864023	Identifier	verify_init		4864018	0					
ANR	4864024	CompoundStatement		2:19:20:20	4864018	1					
ANR	4864025	ExpressionStatement	ASSERT ( m_initialized )	1364:2:35111:35135	4864018	0	True				
ANR	4864026	CallExpression	ASSERT ( m_initialized )		4864018	0					
ANR	4864027	Callee	ASSERT		4864018	0					
ANR	4864028	Identifier	ASSERT		4864018	0					
ANR	4864029	ArgumentList	m_initialized		4864018	1					
ANR	4864030	Argument	m_initialized		4864018	0					
ANR	4864031	Identifier	m_initialized		4864018	0					
ANR	4864032	IfStatement	if ( m_lock -> isLocked ( ) )		4864018	1					
ANR	4864033	Condition	m_lock -> isLocked ( )	1366:6:35146:35164	4864018	0	True				
ANR	4864034	CallExpression	m_lock -> isLocked ( )		4864018	0					
ANR	4864035	Callee	m_lock -> isLocked		4864018	0					
ANR	4864036	PtrMemberAccess	m_lock -> isLocked		4864018	0					
ANR	4864037	Identifier	m_lock		4864018	0					
ANR	4864038	Identifier	isLocked		4864018	1					
ANR	4864039	ArgumentList			4864018	1					
ANR	4864040	CompoundStatement		5:28:81:81	4864018	1					
ANR	4864041	ExpressionStatement	m_lock -> release ( )	1367:2:35172:35190	4864018	0	True				
ANR	4864042	CallExpression	m_lock -> release ( )		4864018	0					
ANR	4864043	Callee	m_lock -> release		4864018	0					
ANR	4864044	PtrMemberAccess	m_lock -> release		4864018	0					
ANR	4864045	Identifier	m_lock		4864018	0					
ANR	4864046	Identifier	release		4864018	1					
ANR	4864047	ArgumentList			4864018	1					
ANR	4864048	ExpressionStatement	ASSERT ( m_lock -> isUnlocked ( ) )	1369:1:35196:35226	4864018	2	True				
ANR	4864049	CallExpression	ASSERT ( m_lock -> isUnlocked ( ) )		4864018	0					
ANR	4864050	Callee	ASSERT		4864018	0					
ANR	4864051	Identifier	ASSERT		4864018	0					
ANR	4864052	ArgumentList	m_lock -> isUnlocked ( )		4864018	1					
ANR	4864053	Argument	m_lock -> isUnlocked ( )		4864018	0					
ANR	4864054	CallExpression	m_lock -> isUnlocked ( )		4864018	0					
ANR	4864055	Callee	m_lock -> isUnlocked		4864018	0					
ANR	4864056	PtrMemberAccess	m_lock -> isUnlocked		4864018	0					
ANR	4864057	Identifier	m_lock		4864018	0					
ANR	4864058	Identifier	isUnlocked		4864018	1					
ANR	4864059	ArgumentList			4864018	1					
ANR	4864060	ReturnType	void		4864018	1					
ANR	4864061	Identifier	ReadUserLog :: Unlock		4864018	2					
ANR	4864062	ParameterList	bool verify_init		4864018	3					
ANR	4864063	Parameter	bool verify_init	1361:21:35067:35082	4864018	0	True				
ANR	4864064	ParameterType	bool		4864018	0					
ANR	4864065	Identifier	verify_init		4864018	1					
ANR	4864066	CFGEntryNode	ENTRY		4864018		True				
ANR	4864067	CFGExitNode	EXIT		4864018		True				
ANR	4864068	Symbol	m_lock		4864018						
ANR	4864069	Symbol	m_initialized		4864018						
ANR	4864070	Symbol	* m_lock		4864018						
ANR	4864071	Symbol	verify_init		4864018						
ANR	4864072	Symbol	m_lock -> isUnlocked		4864018						
ANR	4864073	Symbol	m_lock -> isLocked		4864018						
ANR	4864074	Function	ReadUserLog :: synchronize	1372:0:35231:35577							
ANR	4864075	FunctionDef	ReadUserLog :: synchronize ()		4864074	0					
ANR	4864076	CompoundStatement		1374:0:35270:35577	4864074	0					
ANR	4864077	IfStatement	if ( ! m_initialized )		4864074	0					
ANR	4864078	Condition	! m_initialized	1375:6:35278:35291	4864074	0	True				
ANR	4864079	UnaryOperationExpression	! m_initialized		4864074	0					
ANR	4864080	UnaryOperator	!		4864074	0					
ANR	4864081	Identifier	m_initialized		4864074	1					
ANR	4864082	CompoundStatement		2:23:24:24	4864074	1					
ANR	4864083	ExpressionStatement	"Error ( LOG_ERROR_NOT_INITIALIZED , __LINE__ )"	1376:2:35299:35343	4864074	0	True				
ANR	4864084	CallExpression	"Error ( LOG_ERROR_NOT_INITIALIZED , __LINE__ )"		4864074	0					
ANR	4864085	Callee	Error		4864074	0					
ANR	4864086	Identifier	Error		4864074	0					
ANR	4864087	ArgumentList	LOG_ERROR_NOT_INITIALIZED		4864074	1					
ANR	4864088	Argument	LOG_ERROR_NOT_INITIALIZED		4864074	0					
ANR	4864089	Identifier	LOG_ERROR_NOT_INITIALIZED		4864074	0					
ANR	4864090	Argument	__LINE__		4864074	1					
ANR	4864091	Identifier	__LINE__		4864074	0					
ANR	4864092	ReturnStatement	return false ;	1377:2:35347:35359	4864074	1	True				
ANR	4864093	Identifier	false		4864074	0					
ANR	4864094	IdentifierDeclStatement	const int bufSize = 512 ;	1380:1:35366:35389	4864074	1	True				
ANR	4864095	IdentifierDecl	bufSize = 512		4864074	0					
ANR	4864096	IdentifierDeclType	const int		4864074	0					
ANR	4864097	Identifier	bufSize		4864074	1					
ANR	4864098	AssignmentExpression	bufSize = 512		4864074	2		=			
ANR	4864099	Identifier	bufSize		4864074	0					
ANR	4864100	PrimaryExpression	512		4864074	1					
ANR	4864101	IdentifierDeclStatement	char buffer [ bufSize ] ;	1381:4:35395:35415	4864074	2	True				
ANR	4864102	IdentifierDecl	buffer [ bufSize ]		4864074	0					
ANR	4864103	IdentifierDeclType	char [ bufSize ]		4864074	0					
ANR	4864104	Identifier	buffer		4864074	1					
ANR	4864105	Identifier	bufSize		4864074	2					
ANR	4864106	WhileStatement	"while ( fgets ( buffer , bufSize , m_fp ) != NULL )"		4864074	3					
ANR	4864107	Condition	"fgets ( buffer , bufSize , m_fp ) != NULL"	1382:11:35428:35465	4864074	0	True				
ANR	4864108	EqualityExpression	"fgets ( buffer , bufSize , m_fp ) != NULL"		4864074	0		!=			
ANR	4864109	CallExpression	"fgets ( buffer , bufSize , m_fp )"		4864074	0					
ANR	4864110	Callee	fgets		4864074	0					
ANR	4864111	Identifier	fgets		4864074	0					
ANR	4864112	ArgumentList	buffer		4864074	1					
ANR	4864113	Argument	buffer		4864074	0					
ANR	4864114	Identifier	buffer		4864074	0					
ANR	4864115	Argument	bufSize		4864074	1					
ANR	4864116	Identifier	bufSize		4864074	0					
ANR	4864117	Argument	m_fp		4864074	2					
ANR	4864118	Identifier	m_fp		4864074	0					
ANR	4864119	Identifier	NULL		4864074	1					
ANR	4864120	CompoundStatement		9:52:198:198	4864074	1					
ANR	4864121	IfStatement	"if ( strcmp ( buffer , SynchDelimiter ) == 0 )"		4864074	0					
ANR	4864122	Condition	"strcmp ( buffer , SynchDelimiter ) == 0"	1383:6:35477:35512	4864074	0	True				
ANR	4864123	EqualityExpression	"strcmp ( buffer , SynchDelimiter ) == 0"		4864074	0		==			
ANR	4864124	CallExpression	"strcmp ( buffer , SynchDelimiter )"		4864074	0					
ANR	4864125	Callee	strcmp		4864074	0					
ANR	4864126	Identifier	strcmp		4864074	0					
ANR	4864127	ArgumentList	buffer		4864074	1					
ANR	4864128	Argument	buffer		4864074	0					
ANR	4864129	Identifier	buffer		4864074	0					
ANR	4864130	Argument	SynchDelimiter		4864074	1					
ANR	4864131	Identifier	SynchDelimiter		4864074	0					
ANR	4864132	PrimaryExpression	0		4864074	1					
ANR	4864133	CompoundStatement		10:45:245:245	4864074	1					
ANR	4864134	ReturnStatement	return true ;	1384:12:35530:35541	4864074	0	True				
ANR	4864135	Identifier	true		4864074	0					
ANR	4864136	ReturnStatement	return false ;	1387:4:35563:35575	4864074	4	True				
ANR	4864137	Identifier	false		4864074	0					
ANR	4864138	ReturnType	bool		4864074	1					
ANR	4864139	Identifier	ReadUserLog :: synchronize		4864074	2					
ANR	4864140	ParameterList			4864074	3					
ANR	4864141	CFGEntryNode	ENTRY		4864074		True				
ANR	4864142	CFGExitNode	EXIT		4864074		True				
ANR	4864143	Symbol	strcmp		4864074						
ANR	4864144	Symbol	m_initialized		4864074						
ANR	4864145	Symbol	NULL		4864074						
ANR	4864146	Symbol	LOG_ERROR_NOT_INITIALIZED		4864074						
ANR	4864147	Symbol	false		4864074						
ANR	4864148	Symbol	true		4864074						
ANR	4864149	Symbol	bufSize		4864074						
ANR	4864150	Symbol	buffer		4864074						
ANR	4864151	Symbol	SynchDelimiter		4864074						
ANR	4864152	Symbol	__LINE__		4864074						
ANR	4864153	Symbol	m_fp		4864074						
ANR	4864154	Symbol	fgets		4864074						
ANR	4864155	Function	ReadUserLog :: outputFilePos	1390:0:35580:35745							
ANR	4864156	FunctionDef	ReadUserLog :: outputFilePos (const char * pszWhereAmI)		4864155	0					
ANR	4864157	CompoundStatement		1392:0:35639:35745	4864155	0					
ANR	4864158	ExpressionStatement	ASSERT ( m_initialized )	1393:1:35642:35666	4864155	0	True				
ANR	4864159	CallExpression	ASSERT ( m_initialized )		4864155	0					
ANR	4864160	Callee	ASSERT		4864155	0					
ANR	4864161	Identifier	ASSERT		4864155	0					
ANR	4864162	ArgumentList	m_initialized		4864155	1					
ANR	4864163	Argument	m_initialized		4864155	0					
ANR	4864164	Identifier	m_initialized		4864155	0					
ANR	4864165	ExpressionStatement	"dprintf ( D_ALWAYS , ""Filepos: %ld, context: %s\\n"" , ftell ( m_fp ) , pszWhereAmI )"	1394:1:35669:35743	4864155	1	True				
ANR	4864166	CallExpression	"dprintf ( D_ALWAYS , ""Filepos: %ld, context: %s\\n"" , ftell ( m_fp ) , pszWhereAmI )"		4864155	0					
ANR	4864167	Callee	dprintf		4864155	0					
ANR	4864168	Identifier	dprintf		4864155	0					
ANR	4864169	ArgumentList	D_ALWAYS		4864155	1					
ANR	4864170	Argument	D_ALWAYS		4864155	0					
ANR	4864171	Identifier	D_ALWAYS		4864155	0					
ANR	4864172	Argument	"""Filepos: %ld, context: %s\\n"""		4864155	1					
ANR	4864173	PrimaryExpression	"""Filepos: %ld, context: %s\\n"""		4864155	0					
ANR	4864174	Argument	ftell ( m_fp )		4864155	2					
ANR	4864175	CallExpression	ftell ( m_fp )		4864155	0					
ANR	4864176	Callee	ftell		4864155	0					
ANR	4864177	Identifier	ftell		4864155	0					
ANR	4864178	ArgumentList	m_fp		4864155	1					
ANR	4864179	Argument	m_fp		4864155	0					
ANR	4864180	Identifier	m_fp		4864155	0					
ANR	4864181	Argument	pszWhereAmI		4864155	3					
ANR	4864182	Identifier	pszWhereAmI		4864155	0					
ANR	4864183	ReturnType	void		4864155	1					
ANR	4864184	Identifier	ReadUserLog :: outputFilePos		4864155	2					
ANR	4864185	ParameterList	const char * pszWhereAmI		4864155	3					
ANR	4864186	Parameter	const char * pszWhereAmI	1391:28:35613:35635	4864155	0	True				
ANR	4864187	ParameterType	const char *		4864155	0					
ANR	4864188	Identifier	pszWhereAmI		4864155	1					
ANR	4864189	CFGEntryNode	ENTRY		4864155		True				
ANR	4864190	CFGExitNode	EXIT		4864155		True				
ANR	4864191	Symbol	m_initialized		4864155						
ANR	4864192	Symbol	ftell		4864155						
ANR	4864193	Symbol	D_ALWAYS		4864155						
ANR	4864194	Symbol	pszWhereAmI		4864155						
ANR	4864195	Symbol	m_fp		4864155						
ANR	4864196	Function	ReadUserLog :: setIsXMLLog	1397:0:35748:35938							
ANR	4864197	FunctionDef	ReadUserLog :: setIsXMLLog (bool is_xml)		4864196	0					
ANR	4864198	CompoundStatement		1399:0:35793:35938	4864196	0					
ANR	4864199	IfStatement	if ( is_xml )		4864196	0					
ANR	4864200	Condition	is_xml	1400:5:35800:35805	4864196	0	True				
ANR	4864201	Identifier	is_xml		4864196	0					
ANR	4864202	CompoundStatement		2:14:15:15	4864196	1					
ANR	4864203	ExpressionStatement	m_state -> LogType ( ReadUserLogState :: LOG_TYPE_XML )	1401:5:35816:35866	4864196	0	True				
ANR	4864204	CallExpression	m_state -> LogType ( ReadUserLogState :: LOG_TYPE_XML )		4864196	0					
ANR	4864205	Callee	m_state -> LogType		4864196	0					
ANR	4864206	PtrMemberAccess	m_state -> LogType		4864196	0					
ANR	4864207	Identifier	m_state		4864196	0					
ANR	4864208	Identifier	LogType		4864196	1					
ANR	4864209	ArgumentList	ReadUserLogState :: LOG_TYPE_XML		4864196	1					
ANR	4864210	Argument	ReadUserLogState :: LOG_TYPE_XML		4864196	0					
ANR	4864211	Identifier	ReadUserLogState :: LOG_TYPE_XML		4864196	0					
ANR	4864212	ElseStatement	else		4864196	0					
ANR	4864213	CompoundStatement		4:8:82:82	4864196	0					
ANR	4864214	ExpressionStatement	m_state -> LogType ( ReadUserLogState :: LOG_TYPE_OLD )	1403:5:35883:35933	4864196	0	True				
ANR	4864215	CallExpression	m_state -> LogType ( ReadUserLogState :: LOG_TYPE_OLD )		4864196	0					
ANR	4864216	Callee	m_state -> LogType		4864196	0					
ANR	4864217	PtrMemberAccess	m_state -> LogType		4864196	0					
ANR	4864218	Identifier	m_state		4864196	0					
ANR	4864219	Identifier	LogType		4864196	1					
ANR	4864220	ArgumentList	ReadUserLogState :: LOG_TYPE_OLD		4864196	1					
ANR	4864221	Argument	ReadUserLogState :: LOG_TYPE_OLD		4864196	0					
ANR	4864222	Identifier	ReadUserLogState :: LOG_TYPE_OLD		4864196	0					
ANR	4864223	ReturnType	void		4864196	1					
ANR	4864224	Identifier	ReadUserLog :: setIsXMLLog		4864196	2					
ANR	4864225	ParameterList	bool is_xml		4864196	3					
ANR	4864226	Parameter	bool is_xml	1398:26:35779:35789	4864196	0	True				
ANR	4864227	ParameterType	bool		4864196	0					
ANR	4864228	Identifier	is_xml		4864196	1					
ANR	4864229	CFGEntryNode	ENTRY		4864196		True				
ANR	4864230	CFGExitNode	EXIT		4864196		True				
ANR	4864231	Symbol	m_state		4864196						
ANR	4864232	Symbol	ReadUserLogState :: LOG_TYPE_XML		4864196						
ANR	4864233	Symbol	ReadUserLogState :: LOG_TYPE_OLD		4864196						
ANR	4864234	Symbol	is_xml		4864196						
ANR	4864235	Function	ReadUserLog :: getIsXMLLog	1407:0:35941:36053							
ANR	4864236	FunctionDef	ReadUserLog :: getIsXMLLog ()		4864235	0					
ANR	4864237	CompoundStatement		1409:0:35985:36053	4864235	0					
ANR	4864238	ReturnStatement	return ( m_state -> IsLogType ( ReadUserLogState :: LOG_TYPE_XML ) ) ;	1410:1:35988:36051	4864235	0	True				
ANR	4864239	CallExpression	m_state -> IsLogType ( ReadUserLogState :: LOG_TYPE_XML )		4864235	0					
ANR	4864240	Callee	m_state -> IsLogType		4864235	0					
ANR	4864241	PtrMemberAccess	m_state -> IsLogType		4864235	0					
ANR	4864242	Identifier	m_state		4864235	0					
ANR	4864243	Identifier	IsLogType		4864235	1					
ANR	4864244	ArgumentList	ReadUserLogState :: LOG_TYPE_XML		4864235	1					
ANR	4864245	Argument	ReadUserLogState :: LOG_TYPE_XML		4864235	0					
ANR	4864246	Identifier	ReadUserLogState :: LOG_TYPE_XML		4864235	0					
ANR	4864247	ReturnType	bool		4864235	1					
ANR	4864248	Identifier	ReadUserLog :: getIsXMLLog		4864235	2					
ANR	4864249	ParameterList			4864235	3					
ANR	4864250	CFGEntryNode	ENTRY		4864235		True				
ANR	4864251	CFGExitNode	EXIT		4864235		True				
ANR	4864252	Symbol	m_state		4864235						
ANR	4864253	Symbol	m_state -> IsLogType		4864235						
ANR	4864254	Symbol	* m_state		4864235						
ANR	4864255	Symbol	ReadUserLogState :: LOG_TYPE_XML		4864235						
ANR	4864256	Function	ReadUserLog :: setIsOldLog	1413:0:36056:36250							
ANR	4864257	FunctionDef	ReadUserLog :: setIsOldLog (bool is_old)		4864256	0					
ANR	4864258	CompoundStatement		1415:0:36101:36250	4864256	0					
ANR	4864259	IfStatement	if ( is_old )		4864256	0					
ANR	4864260	Condition	is_old	1416:5:36108:36113	4864256	0	True				
ANR	4864261	Identifier	is_old		4864256	0					
ANR	4864262	CompoundStatement		2:14:15:15	4864256	1					
ANR	4864263	ExpressionStatement	m_state -> LogType ( ReadUserLogState :: LOG_TYPE_OLD )	1417:5:36124:36174	4864256	0	True				
ANR	4864264	CallExpression	m_state -> LogType ( ReadUserLogState :: LOG_TYPE_OLD )		4864256	0					
ANR	4864265	Callee	m_state -> LogType		4864256	0					
ANR	4864266	PtrMemberAccess	m_state -> LogType		4864256	0					
ANR	4864267	Identifier	m_state		4864256	0					
ANR	4864268	Identifier	LogType		4864256	1					
ANR	4864269	ArgumentList	ReadUserLogState :: LOG_TYPE_OLD		4864256	1					
ANR	4864270	Argument	ReadUserLogState :: LOG_TYPE_OLD		4864256	0					
ANR	4864271	Identifier	ReadUserLogState :: LOG_TYPE_OLD		4864256	0					
ANR	4864272	ElseStatement	else		4864256	0					
ANR	4864273	CompoundStatement		4:8:82:82	4864256	0					
ANR	4864274	ExpressionStatement	m_state -> LogType ( ReadUserLogState :: LOG_TYPE_UNKNOWN )	1419:5:36191:36245	4864256	0	True				
ANR	4864275	CallExpression	m_state -> LogType ( ReadUserLogState :: LOG_TYPE_UNKNOWN )		4864256	0					
ANR	4864276	Callee	m_state -> LogType		4864256	0					
ANR	4864277	PtrMemberAccess	m_state -> LogType		4864256	0					
ANR	4864278	Identifier	m_state		4864256	0					
ANR	4864279	Identifier	LogType		4864256	1					
ANR	4864280	ArgumentList	ReadUserLogState :: LOG_TYPE_UNKNOWN		4864256	1					
ANR	4864281	Argument	ReadUserLogState :: LOG_TYPE_UNKNOWN		4864256	0					
ANR	4864282	Identifier	ReadUserLogState :: LOG_TYPE_UNKNOWN		4864256	0					
ANR	4864283	ReturnType	void		4864256	1					
ANR	4864284	Identifier	ReadUserLog :: setIsOldLog		4864256	2					
ANR	4864285	ParameterList	bool is_old		4864256	3					
ANR	4864286	Parameter	bool is_old	1414:26:36087:36097	4864256	0	True				
ANR	4864287	ParameterType	bool		4864256	0					
ANR	4864288	Identifier	is_old		4864256	1					
ANR	4864289	CFGEntryNode	ENTRY		4864256		True				
ANR	4864290	CFGExitNode	EXIT		4864256		True				
ANR	4864291	Symbol	m_state		4864256						
ANR	4864292	Symbol	ReadUserLogState :: LOG_TYPE_OLD		4864256						
ANR	4864293	Symbol	is_old		4864256						
ANR	4864294	Symbol	ReadUserLogState :: LOG_TYPE_UNKNOWN		4864256						
ANR	4864295	Function	ReadUserLog :: getIsOldLog	1423:0:36253:36365							
ANR	4864296	FunctionDef	ReadUserLog :: getIsOldLog ()		4864295	0					
ANR	4864297	CompoundStatement		1425:0:36297:36365	4864295	0					
ANR	4864298	ReturnStatement	return ( m_state -> IsLogType ( ReadUserLogState :: LOG_TYPE_OLD ) ) ;	1426:1:36300:36363	4864295	0	True				
ANR	4864299	CallExpression	m_state -> IsLogType ( ReadUserLogState :: LOG_TYPE_OLD )		4864295	0					
ANR	4864300	Callee	m_state -> IsLogType		4864295	0					
ANR	4864301	PtrMemberAccess	m_state -> IsLogType		4864295	0					
ANR	4864302	Identifier	m_state		4864295	0					
ANR	4864303	Identifier	IsLogType		4864295	1					
ANR	4864304	ArgumentList	ReadUserLogState :: LOG_TYPE_OLD		4864295	1					
ANR	4864305	Argument	ReadUserLogState :: LOG_TYPE_OLD		4864295	0					
ANR	4864306	Identifier	ReadUserLogState :: LOG_TYPE_OLD		4864295	0					
ANR	4864307	ReturnType	bool		4864295	1					
ANR	4864308	Identifier	ReadUserLog :: getIsOldLog		4864295	2					
ANR	4864309	ParameterList			4864295	3					
ANR	4864310	CFGEntryNode	ENTRY		4864295		True				
ANR	4864311	CFGExitNode	EXIT		4864295		True				
ANR	4864312	Symbol	m_state		4864295						
ANR	4864313	Symbol	m_state -> IsLogType		4864295						
ANR	4864314	Symbol	* m_state		4864295						
ANR	4864315	Symbol	ReadUserLogState :: LOG_TYPE_OLD		4864295						
ANR	4864316	Function	ReadUserLog :: clear	1429:0:36368:36756							
ANR	4864317	FunctionDef	ReadUserLog :: clear ()		4864316	0					
ANR	4864318	CompoundStatement		1431:0:36400:36756	4864316	0					
ANR	4864319	ExpressionStatement	m_initialized = false	1432:1:36403:36424	4864316	0	True				
ANR	4864320	AssignmentExpression	m_initialized = false		4864316	0		=			
ANR	4864321	Identifier	m_initialized		4864316	0					
ANR	4864322	Identifier	false		4864316	1					
ANR	4864323	ExpressionStatement	m_missed_event = false	1433:1:36427:36449	4864316	1	True				
ANR	4864324	AssignmentExpression	m_missed_event = false		4864316	0		=			
ANR	4864325	Identifier	m_missed_event		4864316	0					
ANR	4864326	Identifier	false		4864316	1					
ANR	4864327	ExpressionStatement	m_state = NULL	1434:1:36452:36466	4864316	2	True				
ANR	4864328	AssignmentExpression	m_state = NULL		4864316	0		=			
ANR	4864329	Identifier	m_state		4864316	0					
ANR	4864330	Identifier	NULL		4864316	1					
ANR	4864331	ExpressionStatement	m_match = NULL	1435:1:36469:36483	4864316	3	True				
ANR	4864332	AssignmentExpression	m_match = NULL		4864316	0		=			
ANR	4864333	Identifier	m_match		4864316	0					
ANR	4864334	Identifier	NULL		4864316	1					
ANR	4864335	ExpressionStatement	m_fd = - 1	1436:4:36489:36498	4864316	4	True				
ANR	4864336	AssignmentExpression	m_fd = - 1		4864316	0		=			
ANR	4864337	Identifier	m_fd		4864316	0					
ANR	4864338	UnaryOperationExpression	- 1		4864316	1					
ANR	4864339	UnaryOperator	-		4864316	0					
ANR	4864340	PrimaryExpression	1		4864316	1					
ANR	4864341	ExpressionStatement	m_fp = NULL	1437:1:36501:36512	4864316	5	True				
ANR	4864342	AssignmentExpression	m_fp = NULL		4864316	0		=			
ANR	4864343	Identifier	m_fp		4864316	0					
ANR	4864344	Identifier	NULL		4864316	1					
ANR	4864345	ExpressionStatement	m_lock = NULL	1438:1:36515:36528	4864316	6	True				
ANR	4864346	AssignmentExpression	m_lock = NULL		4864316	0		=			
ANR	4864347	Identifier	m_lock		4864316	0					
ANR	4864348	Identifier	NULL		4864316	1					
ANR	4864349	ExpressionStatement	m_lock_rot = - 1	1439:1:36531:36546	4864316	7	True				
ANR	4864350	AssignmentExpression	m_lock_rot = - 1		4864316	0		=			
ANR	4864351	Identifier	m_lock_rot		4864316	0					
ANR	4864352	UnaryOperationExpression	- 1		4864316	1					
ANR	4864353	UnaryOperator	-		4864316	0					
ANR	4864354	PrimaryExpression	1		4864316	1					
ANR	4864355	ExpressionStatement	m_close_file = false	1441:1:36550:36570	4864316	8	True				
ANR	4864356	AssignmentExpression	m_close_file = false		4864316	0		=			
ANR	4864357	Identifier	m_close_file		4864316	0					
ANR	4864358	Identifier	false		4864316	1					
ANR	4864359	ExpressionStatement	m_read_only = false	1442:1:36573:36592	4864316	9	True				
ANR	4864360	AssignmentExpression	m_read_only = false		4864316	0		=			
ANR	4864361	Identifier	m_read_only		4864316	0					
ANR	4864362	Identifier	false		4864316	1					
ANR	4864363	ExpressionStatement	m_enable_close = true	1443:1:36595:36616	4864316	10	True				
ANR	4864364	AssignmentExpression	m_enable_close = true		4864316	0		=			
ANR	4864365	Identifier	m_enable_close		4864316	0					
ANR	4864366	Identifier	true		4864316	1					
ANR	4864367	ExpressionStatement	m_handle_rot = false	1444:1:36619:36639	4864316	11	True				
ANR	4864368	AssignmentExpression	m_handle_rot = false		4864316	0		=			
ANR	4864369	Identifier	m_handle_rot		4864316	0					
ANR	4864370	Identifier	false		4864316	1					
ANR	4864371	ExpressionStatement	m_lock_enable = false	1445:1:36642:36663	4864316	12	True				
ANR	4864372	AssignmentExpression	m_lock_enable = false		4864316	0		=			
ANR	4864373	Identifier	m_lock_enable		4864316	0					
ANR	4864374	Identifier	false		4864316	1					
ANR	4864375	ExpressionStatement	m_max_rotations = 0	1446:1:36666:36685	4864316	13	True				
ANR	4864376	AssignmentExpression	m_max_rotations = 0		4864316	0		=			
ANR	4864377	Identifier	m_max_rotations		4864316	0					
ANR	4864378	PrimaryExpression	0		4864316	1					
ANR	4864379	ExpressionStatement	m_read_header = false	1447:1:36688:36709	4864316	14	True				
ANR	4864380	AssignmentExpression	m_read_header = false		4864316	0		=			
ANR	4864381	Identifier	m_read_header		4864316	0					
ANR	4864382	Identifier	false		4864316	1					
ANR	4864383	ExpressionStatement	m_error = LOG_ERROR_NONE	1449:1:36713:36737	4864316	15	True				
ANR	4864384	AssignmentExpression	m_error = LOG_ERROR_NONE		4864316	0		=			
ANR	4864385	Identifier	m_error		4864316	0					
ANR	4864386	Identifier	LOG_ERROR_NONE		4864316	1					
ANR	4864387	ExpressionStatement	m_line_num = 0	1450:1:36740:36754	4864316	16	True				
ANR	4864388	AssignmentExpression	m_line_num = 0		4864316	0		=			
ANR	4864389	Identifier	m_line_num		4864316	0					
ANR	4864390	PrimaryExpression	0		4864316	1					
ANR	4864391	ReturnType	void		4864316	1					
ANR	4864392	Identifier	ReadUserLog :: clear		4864316	2					
ANR	4864393	ParameterList			4864316	3					
ANR	4864394	CFGEntryNode	ENTRY		4864316		True				
ANR	4864395	CFGExitNode	EXIT		4864316		True				
ANR	4864396	Symbol	m_initialized		4864316						
ANR	4864397	Symbol	m_match		4864316						
ANR	4864398	Symbol	m_fd		4864316						
ANR	4864399	Symbol	m_read_only		4864316						
ANR	4864400	Symbol	NULL		4864316						
ANR	4864401	Symbol	m_line_num		4864316						
ANR	4864402	Symbol	m_lock_enable		4864316						
ANR	4864403	Symbol	false		4864316						
ANR	4864404	Symbol	m_lock_rot		4864316						
ANR	4864405	Symbol	m_enable_close		4864316						
ANR	4864406	Symbol	m_missed_event		4864316						
ANR	4864407	Symbol	m_read_header		4864316						
ANR	4864408	Symbol	m_fp		4864316						
ANR	4864409	Symbol	m_close_file		4864316						
ANR	4864410	Symbol	m_handle_rot		4864316						
ANR	4864411	Symbol	m_lock		4864316						
ANR	4864412	Symbol	LOG_ERROR_NONE		4864316						
ANR	4864413	Symbol	m_state		4864316						
ANR	4864414	Symbol	true		4864316						
ANR	4864415	Symbol	m_max_rotations		4864316						
ANR	4864416	Symbol	m_error		4864316						
ANR	4864417	Function	ReadUserLog :: releaseResources	1453:0:36759:36976							
ANR	4864418	FunctionDef	ReadUserLog :: releaseResources ()		4864417	0					
ANR	4864419	CompoundStatement		1455:0:36802:36976	4864417	0					
ANR	4864420	IfStatement	if ( m_match )		4864417	0					
ANR	4864421	Condition	m_match	1456:6:36810:36816	4864417	0	True				
ANR	4864422	Identifier	m_match		4864417	0					
ANR	4864423	CompoundStatement		2:16:17:17	4864417	1					
ANR	4864424	Statement	delete	1457:2:36824:36829	4864417	0	True				
ANR	4864425	ExpressionStatement	m_match	1457:9:36831:36838	4864417	1	True				
ANR	4864426	Identifier	m_match		4864417	0					
ANR	4864427	ExpressionStatement	m_match = NULL	1458:2:36842:36856	4864417	2	True				
ANR	4864428	AssignmentExpression	m_match = NULL		4864417	0		=			
ANR	4864429	Identifier	m_match		4864417	0					
ANR	4864430	Identifier	NULL		4864417	1					
ANR	4864431	IfStatement	if ( m_state )		4864417	1					
ANR	4864432	Condition	m_state	1461:6:36868:36874	4864417	0	True				
ANR	4864433	Identifier	m_state		4864417	0					
ANR	4864434	CompoundStatement		7:16:75:75	4864417	1					
ANR	4864435	Statement	delete	1462:2:36882:36887	4864417	0	True				
ANR	4864436	ExpressionStatement	m_state	1462:9:36889:36896	4864417	1	True				
ANR	4864437	Identifier	m_state		4864417	0					
ANR	4864438	ExpressionStatement	m_state = NULL	1463:2:36900:36914	4864417	2	True				
ANR	4864439	AssignmentExpression	m_state = NULL		4864417	0		=			
ANR	4864440	Identifier	m_state		4864417	0					
ANR	4864441	Identifier	NULL		4864417	1					
ANR	4864442	ExpressionStatement	CloseLogFile ( true )	1466:1:36921:36941	4864417	2	True				
ANR	4864443	CallExpression	CloseLogFile ( true )		4864417	0					
ANR	4864444	Callee	CloseLogFile		4864417	0					
ANR	4864445	Identifier	CloseLogFile		4864417	0					
ANR	4864446	ArgumentList	true		4864417	1					
ANR	4864447	Argument	true		4864417	0					
ANR	4864448	Identifier	true		4864417	0					
ANR	4864449	Statement	delete	1468:1:36945:36950	4864417	3	True				
ANR	4864450	ExpressionStatement	m_lock	1468:8:36952:36958	4864417	4	True				
ANR	4864451	Identifier	m_lock		4864417	0					
ANR	4864452	ExpressionStatement	m_lock = NULL	1469:1:36961:36974	4864417	5	True				
ANR	4864453	AssignmentExpression	m_lock = NULL		4864417	0		=			
ANR	4864454	Identifier	m_lock		4864417	0					
ANR	4864455	Identifier	NULL		4864417	1					
ANR	4864456	ReturnType	void		4864417	1					
ANR	4864457	Identifier	ReadUserLog :: releaseResources		4864417	2					
ANR	4864458	ParameterList			4864417	3					
ANR	4864459	CFGEntryNode	ENTRY		4864417		True				
ANR	4864460	CFGExitNode	EXIT		4864417		True				
ANR	4864461	Symbol	m_lock		4864417						
ANR	4864462	Symbol	m_state		4864417						
ANR	4864463	Symbol	m_match		4864417						
ANR	4864464	Symbol	NULL		4864417						
ANR	4864465	Symbol	true		4864417						
ANR	4864466	Function	ReadUserLog :: getErrorInfo	1472:0:36979:37503							
ANR	4864467	FunctionDef	"ReadUserLog :: getErrorInfo (ErrorType & error , const char * & error_str , unsigned & line_num)"		4864466	0					
ANR	4864468	CompoundStatement		1476:0:37096:37503	4864466	0					
ANR	4864469	Statement	const	1477:1:37099:37103	4864466	0	True				
ANR	4864470	Statement	char	1477:7:37105:37108	4864466	1	True				
ANR	4864471	Statement	*	1477:12:37110:37110	4864466	2	True				
ANR	4864472	Statement	strings	1477:13:37111:37117	4864466	3	True				
ANR	4864473	Statement	[	1477:20:37118:37118	4864466	4	True				
ANR	4864474	Statement	]	1477:21:37119:37119	4864466	5	True				
ANR	4864475	Statement	=	1477:23:37121:37121	4864466	6	True				
ANR	4864476	CompoundStatement		2:25:26:26	4864466	7					
ANR	4864477	Statement	"""None"""	1478:2:37127:37132	4864466	0	True				
ANR	4864478	Statement	","	1478:8:37133:37133	4864466	1	True				
ANR	4864479	Statement	"""Reader not initialized"""	1479:2:37137:37160	4864466	2	True				
ANR	4864480	Statement	","	1479:26:37161:37161	4864466	3	True				
ANR	4864481	Statement	"""Attempt to re-initialize reader"""	1480:2:37165:37197	4864466	4	True				
ANR	4864482	Statement	","	1480:35:37198:37198	4864466	5	True				
ANR	4864483	Statement	"""File not found"""	1481:2:37202:37217	4864466	6	True				
ANR	4864484	Statement	","	1481:18:37218:37218	4864466	7	True				
ANR	4864485	Statement	"""Other file error"""	1482:2:37222:37239	4864466	8	True				
ANR	4864486	Statement	","	1482:20:37240:37240	4864466	9	True				
ANR	4864487	Statement	"""Invalid state buffer"""	1483:2:37244:37265	4864466	10	True				
ANR	4864488	Statement	","	1483:24:37266:37266	4864466	11	True				
ANR	4864489	ExpressionStatement		1484:2:37270:37270	4864466	8	True				
ANR	4864490	ExpressionStatement	error = m_error	1485:1:37273:37288	4864466	9	True				
ANR	4864491	AssignmentExpression	error = m_error		4864466	0		=			
ANR	4864492	Identifier	error		4864466	0					
ANR	4864493	Identifier	m_error		4864466	1					
ANR	4864494	ExpressionStatement	line_num = m_line_num	1486:1:37291:37312	4864466	10	True				
ANR	4864495	AssignmentExpression	line_num = m_line_num		4864466	0		=			
ANR	4864496	Identifier	line_num		4864466	0					
ANR	4864497	Identifier	m_line_num		4864466	1					
ANR	4864498	IdentifierDeclStatement	unsigned eint = ( unsigned ) m_error ;	1488:1:37316:37350	4864466	11	True				
ANR	4864499	IdentifierDecl	eint = ( unsigned ) m_error		4864466	0					
ANR	4864500	IdentifierDeclType	unsigned		4864466	0					
ANR	4864501	Identifier	eint		4864466	1					
ANR	4864502	AssignmentExpression	eint = ( unsigned ) m_error		4864466	2		=			
ANR	4864503	Identifier	eint		4864466	0					
ANR	4864504	CastExpression	( unsigned ) m_error		4864466	1					
ANR	4864505	CastTarget	unsigned		4864466	0					
ANR	4864506	Identifier	m_error		4864466	1					
ANR	4864507	IdentifierDeclStatement	unsigned num = ( sizeof ( strings ) / sizeof ( const char * ) ) ;	1489:1:37353:37410	4864466	12	True				
ANR	4864508	IdentifierDecl	num = ( sizeof ( strings ) / sizeof ( const char * ) )		4864466	0					
ANR	4864509	IdentifierDeclType	unsigned		4864466	0					
ANR	4864510	Identifier	num		4864466	1					
ANR	4864511	AssignmentExpression	num = ( sizeof ( strings ) / sizeof ( const char * ) )		4864466	2		=			
ANR	4864512	Identifier	num		4864466	0					
ANR	4864513	MultiplicativeExpression	sizeof ( strings ) / sizeof ( const char * )		4864466	1		/			
ANR	4864514	SizeofExpression	sizeof ( strings )		4864466	0					
ANR	4864515	Sizeof	sizeof		4864466	0					
ANR	4864516	SizeofOperand	strings		4864466	1					
ANR	4864517	SizeofExpression	sizeof ( const char * )		4864466	1					
ANR	4864518	Sizeof	sizeof		4864466	0					
ANR	4864519	SizeofOperand	const char *		4864466	1					
ANR	4864520	IfStatement	if ( eint >= num )		4864466	13					
ANR	4864521	Condition	eint >= num	1490:6:37418:37428	4864466	0	True				
ANR	4864522	RelationalExpression	eint >= num		4864466	0		>=			
ANR	4864523	Identifier	eint		4864466	0					
ANR	4864524	Identifier	num		4864466	1					
ANR	4864525	CompoundStatement		15:20:335:335	4864466	1					
ANR	4864526	ExpressionStatement	"error_str = ""Unknown"""	1491:2:37436:37457	4864466	0	True				
ANR	4864527	AssignmentExpression	"error_str = ""Unknown"""		4864466	0		=			
ANR	4864528	Identifier	error_str		4864466	0					
ANR	4864529	PrimaryExpression	"""Unknown"""		4864466	1					
ANR	4864530	ElseStatement	else		4864466	0					
ANR	4864531	CompoundStatement		18:6:371:371	4864466	0					
ANR	4864532	ExpressionStatement	error_str = strings [ eint ]	1494:2:37472:37497	4864466	0	True				
ANR	4864533	AssignmentExpression	error_str = strings [ eint ]		4864466	0		=			
ANR	4864534	Identifier	error_str		4864466	0					
ANR	4864535	ArrayIndexing	strings [ eint ]		4864466	1					
ANR	4864536	Identifier	strings		4864466	0					
ANR	4864537	Identifier	eint		4864466	1					
ANR	4864538	ReturnType	void		4864466	1					
ANR	4864539	Identifier	ReadUserLog :: getErrorInfo		4864466	2					
ANR	4864540	ParameterList	"ErrorType & error , const char * & error_str , unsigned & line_num"		4864466	3					
ANR	4864541	Parameter	ErrorType & error	1473:28:37012:37027	4864466	0	True				
ANR	4864542	ParameterType	ErrorType &		4864466	0					
ANR	4864543	Identifier	error		4864466	1					
ANR	4864544	Parameter	const char * & error_str	1474:7:37037:37059	4864466	1	True				
ANR	4864545	ParameterType	const char * &		4864466	0					
ANR	4864546	Identifier	error_str		4864466	1					
ANR	4864547	Parameter	unsigned & line_num	1475:7:37069:37086	4864466	2	True				
ANR	4864548	ParameterType	unsigned &		4864466	0					
ANR	4864549	Identifier	line_num		4864466	1					
ANR	4864550	CFGEntryNode	ENTRY		4864466		True				
ANR	4864551	CFGExitNode	EXIT		4864466		True				
ANR	4864552	Symbol	error_str		4864466						
ANR	4864553	Symbol	strings		4864466						
ANR	4864554	Symbol	line_num		4864466						
ANR	4864555	Symbol	m_line_num		4864466						
ANR	4864556	Symbol	eint		4864466						
ANR	4864557	Symbol	num		4864466						
ANR	4864558	Symbol	* strings		4864466						
ANR	4864559	Symbol	error		4864466						
ANR	4864560	Symbol	* eint		4864466						
ANR	4864561	Symbol	m_error		4864466						
ANR	4864562	Function	ReadUserLogMatch :: Match	1505:0:37664:38060							
ANR	4864563	FunctionDef	"ReadUserLogMatch :: Match (int rot , int match_thresh , int * score_ptr)"		4864562	0					
ANR	4864564	CompoundStatement		1510:0:37783:38060	4864562	0					
ANR	4864565	IdentifierDeclStatement	int local_score ;	1512:1:37827:37842	4864562	0	True				
ANR	4864566	IdentifierDecl	local_score		4864562	0					
ANR	4864567	IdentifierDeclType	int		4864562	0					
ANR	4864568	Identifier	local_score		4864562	1					
ANR	4864569	IfStatement	if ( NULL == score_ptr )		4864562	1					
ANR	4864570	Condition	NULL == score_ptr	1513:6:37850:37866	4864562	0	True				
ANR	4864571	EqualityExpression	NULL == score_ptr		4864562	0		==			
ANR	4864572	Identifier	NULL		4864562	0					
ANR	4864573	Identifier	score_ptr		4864562	1					
ANR	4864574	CompoundStatement		4:26:86:86	4864562	1					
ANR	4864575	ExpressionStatement	score_ptr = & local_score	1514:2:37874:37898	4864562	0	True				
ANR	4864576	AssignmentExpression	score_ptr = & local_score		4864562	0		=			
ANR	4864577	Identifier	score_ptr		4864562	0					
ANR	4864578	UnaryOperationExpression	& local_score		4864562	1					
ANR	4864579	UnaryOperator	&		4864562	0					
ANR	4864580	Identifier	local_score		4864562	1					
ANR	4864581	ExpressionStatement	* score_ptr = m_state -> ScoreFile ( rot )	1516:1:37904:37942	4864562	2	True				
ANR	4864582	AssignmentExpression	* score_ptr = m_state -> ScoreFile ( rot )		4864562	0		=			
ANR	4864583	UnaryOperationExpression	* score_ptr		4864562	0					
ANR	4864584	UnaryOperator	*		4864562	0					
ANR	4864585	Identifier	score_ptr		4864562	1					
ANR	4864586	CallExpression	m_state -> ScoreFile ( rot )		4864562	1					
ANR	4864587	Callee	m_state -> ScoreFile		4864562	0					
ANR	4864588	PtrMemberAccess	m_state -> ScoreFile		4864562	0					
ANR	4864589	Identifier	m_state		4864562	0					
ANR	4864590	Identifier	ScoreFile		4864562	1					
ANR	4864591	ArgumentList	rot		4864562	1					
ANR	4864592	Argument	rot		4864562	0					
ANR	4864593	Identifier	rot		4864562	0					
ANR	4864594	ReturnStatement	"return MatchInternal ( rot , NULL , match_thresh , score_ptr ) ;"	1519:1:38000:38058	4864562	3	True				
ANR	4864595	CallExpression	"MatchInternal ( rot , NULL , match_thresh , score_ptr )"		4864562	0					
ANR	4864596	Callee	MatchInternal		4864562	0					
ANR	4864597	Identifier	MatchInternal		4864562	0					
ANR	4864598	ArgumentList	rot		4864562	1					
ANR	4864599	Argument	rot		4864562	0					
ANR	4864600	Identifier	rot		4864562	0					
ANR	4864601	Argument	NULL		4864562	1					
ANR	4864602	Identifier	NULL		4864562	0					
ANR	4864603	Argument	match_thresh		4864562	2					
ANR	4864604	Identifier	match_thresh		4864562	0					
ANR	4864605	Argument	score_ptr		4864562	3					
ANR	4864606	Identifier	score_ptr		4864562	0					
ANR	4864607	ReturnType	ReadUserLogMatch :: MatchResult		4864562	1					
ANR	4864608	Identifier	ReadUserLogMatch :: Match		4864562	2					
ANR	4864609	ParameterList	"int rot , int match_thresh , int * score_ptr"		4864562	3					
ANR	4864610	Parameter	int rot	1507:1:37720:37730	4864562	0	True				
ANR	4864611	ParameterType	int		4864562	0					
ANR	4864612	Identifier	rot		4864562	1					
ANR	4864613	Parameter	int match_thresh	1508:1:37734:37753	4864562	1	True				
ANR	4864614	ParameterType	int		4864562	0					
ANR	4864615	Identifier	match_thresh		4864562	1					
ANR	4864616	Parameter	int * score_ptr	1509:1:37757:37773	4864562	2	True				
ANR	4864617	ParameterType	int *		4864562	0					
ANR	4864618	Identifier	score_ptr		4864562	1					
ANR	4864619	CFGEntryNode	ENTRY		4864562		True				
ANR	4864620	CFGExitNode	EXIT		4864562		True				
ANR	4864621	Symbol	& local_score		4864562						
ANR	4864622	Symbol	m_state		4864562						
ANR	4864623	Symbol	match_thresh		4864562						
ANR	4864624	Symbol	m_state -> ScoreFile		4864562						
ANR	4864625	Symbol	local_score		4864562						
ANR	4864626	Symbol	NULL		4864562						
ANR	4864627	Symbol	MatchInternal		4864562						
ANR	4864628	Symbol	rot		4864562						
ANR	4864629	Symbol	* score_ptr		4864562						
ANR	4864630	Symbol	* m_state		4864562						
ANR	4864631	Symbol	score_ptr		4864562						
ANR	4864632	Function	ReadUserLogMatch :: Match	1523:0:38112:38534							
ANR	4864633	FunctionDef	"ReadUserLogMatch :: Match (const char * path , int rot , int match_thresh , int * score_ptr)"		4864632	0					
ANR	4864634	CompoundStatement		1529:0:38251:38534	4864632	0					
ANR	4864635	IdentifierDeclStatement	int local_score ;	1531:1:38295:38310	4864632	0	True				
ANR	4864636	IdentifierDecl	local_score		4864632	0					
ANR	4864637	IdentifierDeclType	int		4864632	0					
ANR	4864638	Identifier	local_score		4864632	1					
ANR	4864639	IfStatement	if ( NULL == score_ptr )		4864632	1					
ANR	4864640	Condition	NULL == score_ptr	1532:6:38318:38334	4864632	0	True				
ANR	4864641	EqualityExpression	NULL == score_ptr		4864632	0		==			
ANR	4864642	Identifier	NULL		4864632	0					
ANR	4864643	Identifier	score_ptr		4864632	1					
ANR	4864644	CompoundStatement		4:26:86:86	4864632	1					
ANR	4864645	ExpressionStatement	score_ptr = & local_score	1533:2:38342:38366	4864632	0	True				
ANR	4864646	AssignmentExpression	score_ptr = & local_score		4864632	0		=			
ANR	4864647	Identifier	score_ptr		4864632	0					
ANR	4864648	UnaryOperationExpression	& local_score		4864632	1					
ANR	4864649	UnaryOperator	&		4864632	0					
ANR	4864650	Identifier	local_score		4864632	1					
ANR	4864651	ExpressionStatement	"* score_ptr = m_state -> ScoreFile ( path , rot )"	1535:1:38372:38416	4864632	2	True				
ANR	4864652	AssignmentExpression	"* score_ptr = m_state -> ScoreFile ( path , rot )"		4864632	0		=			
ANR	4864653	UnaryOperationExpression	* score_ptr		4864632	0					
ANR	4864654	UnaryOperator	*		4864632	0					
ANR	4864655	Identifier	score_ptr		4864632	1					
ANR	4864656	CallExpression	"m_state -> ScoreFile ( path , rot )"		4864632	1					
ANR	4864657	Callee	m_state -> ScoreFile		4864632	0					
ANR	4864658	PtrMemberAccess	m_state -> ScoreFile		4864632	0					
ANR	4864659	Identifier	m_state		4864632	0					
ANR	4864660	Identifier	ScoreFile		4864632	1					
ANR	4864661	ArgumentList	path		4864632	1					
ANR	4864662	Argument	path		4864632	0					
ANR	4864663	Identifier	path		4864632	0					
ANR	4864664	Argument	rot		4864632	1					
ANR	4864665	Identifier	rot		4864632	0					
ANR	4864666	ReturnStatement	"return MatchInternal ( rot , path , match_thresh , score_ptr ) ;"	1538:1:38474:38532	4864632	3	True				
ANR	4864667	CallExpression	"MatchInternal ( rot , path , match_thresh , score_ptr )"		4864632	0					
ANR	4864668	Callee	MatchInternal		4864632	0					
ANR	4864669	Identifier	MatchInternal		4864632	0					
ANR	4864670	ArgumentList	rot		4864632	1					
ANR	4864671	Argument	rot		4864632	0					
ANR	4864672	Identifier	rot		4864632	0					
ANR	4864673	Argument	path		4864632	1					
ANR	4864674	Identifier	path		4864632	0					
ANR	4864675	Argument	match_thresh		4864632	2					
ANR	4864676	Identifier	match_thresh		4864632	0					
ANR	4864677	Argument	score_ptr		4864632	3					
ANR	4864678	Identifier	score_ptr		4864632	0					
ANR	4864679	ReturnType	ReadUserLogMatch :: MatchResult		4864632	1					
ANR	4864680	Identifier	ReadUserLogMatch :: Match		4864632	2					
ANR	4864681	ParameterList	"const char * path , int rot , int match_thresh , int * score_ptr"		4864632	3					
ANR	4864682	Parameter	const char * path	1525:1:38168:38184	4864632	0	True				
ANR	4864683	ParameterType	const char *		4864632	0					
ANR	4864684	Identifier	path		4864632	1					
ANR	4864685	Parameter	int rot	1526:1:38188:38198	4864632	1	True				
ANR	4864686	ParameterType	int		4864632	0					
ANR	4864687	Identifier	rot		4864632	1					
ANR	4864688	Parameter	int match_thresh	1527:1:38202:38221	4864632	2	True				
ANR	4864689	ParameterType	int		4864632	0					
ANR	4864690	Identifier	match_thresh		4864632	1					
ANR	4864691	Parameter	int * score_ptr	1528:1:38225:38241	4864632	3	True				
ANR	4864692	ParameterType	int *		4864632	0					
ANR	4864693	Identifier	score_ptr		4864632	1					
ANR	4864694	CFGEntryNode	ENTRY		4864632		True				
ANR	4864695	CFGExitNode	EXIT		4864632		True				
ANR	4864696	Symbol	& local_score		4864632						
ANR	4864697	Symbol	path		4864632						
ANR	4864698	Symbol	m_state		4864632						
ANR	4864699	Symbol	match_thresh		4864632						
ANR	4864700	Symbol	m_state -> ScoreFile		4864632						
ANR	4864701	Symbol	local_score		4864632						
ANR	4864702	Symbol	NULL		4864632						
ANR	4864703	Symbol	MatchInternal		4864632						
ANR	4864704	Symbol	rot		4864632						
ANR	4864705	Symbol	* score_ptr		4864632						
ANR	4864706	Symbol	* m_state		4864632						
ANR	4864707	Symbol	score_ptr		4864632						
ANR	4864708	Function	ReadUserLogMatch :: Match	1542:0:38591:39023							
ANR	4864709	FunctionDef	"ReadUserLogMatch :: Match (StatStructType & statbuf , int rot , int match_thresh , int * score_ptr)"		4864708	0					
ANR	4864710	CompoundStatement		1548:0:38737:39023	4864708	0					
ANR	4864711	IdentifierDeclStatement	int local_score ;	1550:1:38781:38796	4864708	0	True				
ANR	4864712	IdentifierDecl	local_score		4864708	0					
ANR	4864713	IdentifierDeclType	int		4864708	0					
ANR	4864714	Identifier	local_score		4864708	1					
ANR	4864715	IfStatement	if ( NULL == score_ptr )		4864708	1					
ANR	4864716	Condition	NULL == score_ptr	1551:6:38804:38820	4864708	0	True				
ANR	4864717	EqualityExpression	NULL == score_ptr		4864708	0		==			
ANR	4864718	Identifier	NULL		4864708	0					
ANR	4864719	Identifier	score_ptr		4864708	1					
ANR	4864720	CompoundStatement		4:26:86:86	4864708	1					
ANR	4864721	ExpressionStatement	score_ptr = & local_score	1552:2:38828:38852	4864708	0	True				
ANR	4864722	AssignmentExpression	score_ptr = & local_score		4864708	0		=			
ANR	4864723	Identifier	score_ptr		4864708	0					
ANR	4864724	UnaryOperationExpression	& local_score		4864708	1					
ANR	4864725	UnaryOperator	&		4864708	0					
ANR	4864726	Identifier	local_score		4864708	1					
ANR	4864727	ExpressionStatement	"* score_ptr = m_state -> ScoreFile ( statbuf , rot )"	1554:1:38858:38905	4864708	2	True				
ANR	4864728	AssignmentExpression	"* score_ptr = m_state -> ScoreFile ( statbuf , rot )"		4864708	0		=			
ANR	4864729	UnaryOperationExpression	* score_ptr		4864708	0					
ANR	4864730	UnaryOperator	*		4864708	0					
ANR	4864731	Identifier	score_ptr		4864708	1					
ANR	4864732	CallExpression	"m_state -> ScoreFile ( statbuf , rot )"		4864708	1					
ANR	4864733	Callee	m_state -> ScoreFile		4864708	0					
ANR	4864734	PtrMemberAccess	m_state -> ScoreFile		4864708	0					
ANR	4864735	Identifier	m_state		4864708	0					
ANR	4864736	Identifier	ScoreFile		4864708	1					
ANR	4864737	ArgumentList	statbuf		4864708	1					
ANR	4864738	Argument	statbuf		4864708	0					
ANR	4864739	Identifier	statbuf		4864708	0					
ANR	4864740	Argument	rot		4864708	1					
ANR	4864741	Identifier	rot		4864708	0					
ANR	4864742	ReturnStatement	"return MatchInternal ( rot , NULL , match_thresh , score_ptr ) ;"	1557:1:38963:39021	4864708	3	True				
ANR	4864743	CallExpression	"MatchInternal ( rot , NULL , match_thresh , score_ptr )"		4864708	0					
ANR	4864744	Callee	MatchInternal		4864708	0					
ANR	4864745	Identifier	MatchInternal		4864708	0					
ANR	4864746	ArgumentList	rot		4864708	1					
ANR	4864747	Argument	rot		4864708	0					
ANR	4864748	Identifier	rot		4864708	0					
ANR	4864749	Argument	NULL		4864708	1					
ANR	4864750	Identifier	NULL		4864708	0					
ANR	4864751	Argument	match_thresh		4864708	2					
ANR	4864752	Identifier	match_thresh		4864708	0					
ANR	4864753	Argument	score_ptr		4864708	3					
ANR	4864754	Identifier	score_ptr		4864708	0					
ANR	4864755	ReturnType	ReadUserLogMatch :: MatchResult		4864708	1					
ANR	4864756	Identifier	ReadUserLogMatch :: Match		4864708	2					
ANR	4864757	ParameterList	"StatStructType & statbuf , int rot , int match_thresh , int * score_ptr"		4864708	3					
ANR	4864758	Parameter	StatStructType & statbuf	1544:1:38647:38670	4864708	0	True				
ANR	4864759	ParameterType	StatStructType &		4864708	0					
ANR	4864760	Identifier	statbuf		4864708	1					
ANR	4864761	Parameter	int rot	1545:1:38674:38684	4864708	1	True				
ANR	4864762	ParameterType	int		4864708	0					
ANR	4864763	Identifier	rot		4864708	1					
ANR	4864764	Parameter	int match_thresh	1546:1:38688:38707	4864708	2	True				
ANR	4864765	ParameterType	int		4864708	0					
ANR	4864766	Identifier	match_thresh		4864708	1					
ANR	4864767	Parameter	int * score_ptr	1547:1:38711:38727	4864708	3	True				
ANR	4864768	ParameterType	int *		4864708	0					
ANR	4864769	Identifier	score_ptr		4864708	1					
ANR	4864770	CFGEntryNode	ENTRY		4864708		True				
ANR	4864771	CFGExitNode	EXIT		4864708		True				
ANR	4864772	Symbol	& local_score		4864708						
ANR	4864773	Symbol	m_state		4864708						
ANR	4864774	Symbol	match_thresh		4864708						
ANR	4864775	Symbol	m_state -> ScoreFile		4864708						
ANR	4864776	Symbol	local_score		4864708						
ANR	4864777	Symbol	NULL		4864708						
ANR	4864778	Symbol	statbuf		4864708						
ANR	4864779	Symbol	MatchInternal		4864708						
ANR	4864780	Symbol	rot		4864708						
ANR	4864781	Symbol	* score_ptr		4864708						
ANR	4864782	Symbol	* m_state		4864708						
ANR	4864783	Symbol	score_ptr		4864708						
ANR	4864784	Function	ReadUserLogMatch :: MatchInternal	1561:0:39044:40984							
ANR	4864785	FunctionDef	"ReadUserLogMatch :: MatchInternal (int rot , const char * path , int match_thresh , int * score_ptr)"		4864784	0					
ANR	4864786	CompoundStatement		1567:0:39191:40984	4864784	0					
ANR	4864787	IdentifierDeclStatement	int score = * score_ptr ;	1568:1:39194:39217	4864784	0	True				
ANR	4864788	IdentifierDecl	score = * score_ptr		4864784	0					
ANR	4864789	IdentifierDeclType	int		4864784	0					
ANR	4864790	Identifier	score		4864784	1					
ANR	4864791	AssignmentExpression	score = * score_ptr		4864784	2		=			
ANR	4864792	Identifier	score		4864784	0					
ANR	4864793	UnaryOperationExpression	* score_ptr		4864784	1					
ANR	4864794	UnaryOperator	*		4864784	0					
ANR	4864795	Identifier	score_ptr		4864784	1					
ANR	4864796	IdentifierDeclStatement	MyString path_str ;	1571:1:39259:39276	4864784	1	True				
ANR	4864797	IdentifierDecl	path_str		4864784	0					
ANR	4864798	IdentifierDeclType	MyString		4864784	0					
ANR	4864799	Identifier	path_str		4864784	1					
ANR	4864800	IfStatement	if ( NULL == path )		4864784	2					
ANR	4864801	Condition	NULL == path	1572:6:39284:39295	4864784	0	True				
ANR	4864802	EqualityExpression	NULL == path		4864784	0		==			
ANR	4864803	Identifier	NULL		4864784	0					
ANR	4864804	Identifier	path		4864784	1					
ANR	4864805	CompoundStatement		6:21:107:107	4864784	1					
ANR	4864806	ExpressionStatement	"m_state -> GeneratePath ( rot , path_str )"	1573:2:39303:39341	4864784	0	True				
ANR	4864807	CallExpression	"m_state -> GeneratePath ( rot , path_str )"		4864784	0					
ANR	4864808	Callee	m_state -> GeneratePath		4864784	0					
ANR	4864809	PtrMemberAccess	m_state -> GeneratePath		4864784	0					
ANR	4864810	Identifier	m_state		4864784	0					
ANR	4864811	Identifier	GeneratePath		4864784	1					
ANR	4864812	ArgumentList	rot		4864784	1					
ANR	4864813	Argument	rot		4864784	0					
ANR	4864814	Identifier	rot		4864784	0					
ANR	4864815	Argument	path_str		4864784	1					
ANR	4864816	Identifier	path_str		4864784	0					
ANR	4864817	ElseStatement	else		4864784	0					
ANR	4864818	CompoundStatement		8:8:159:159	4864784	0					
ANR	4864819	ExpressionStatement	path_str = path	1575:2:39355:39370	4864784	0	True				
ANR	4864820	AssignmentExpression	path_str = path		4864784	0		=			
ANR	4864821	Identifier	path_str		4864784	0					
ANR	4864822	Identifier	path		4864784	1					
ANR	4864823	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Match: score of '%s' = %d\\n"" , path_str . Value ( ) , score )"	1577:1:39376:39458	4864784	3	True				
ANR	4864824	CallExpression	"dprintf ( D_FULLDEBUG , ""Match: score of '%s' = %d\\n"" , path_str . Value ( ) , score )"		4864784	0					
ANR	4864825	Callee	dprintf		4864784	0					
ANR	4864826	Identifier	dprintf		4864784	0					
ANR	4864827	ArgumentList	D_FULLDEBUG		4864784	1					
ANR	4864828	Argument	D_FULLDEBUG		4864784	0					
ANR	4864829	Identifier	D_FULLDEBUG		4864784	0					
ANR	4864830	Argument	"""Match: score of '%s' = %d\\n"""		4864784	1					
ANR	4864831	PrimaryExpression	"""Match: score of '%s' = %d\\n"""		4864784	0					
ANR	4864832	Argument	path_str . Value ( )		4864784	2					
ANR	4864833	CallExpression	path_str . Value ( )		4864784	0					
ANR	4864834	Callee	path_str . Value		4864784	0					
ANR	4864835	MemberAccess	path_str . Value		4864784	0					
ANR	4864836	Identifier	path_str		4864784	0					
ANR	4864837	Identifier	Value		4864784	1					
ANR	4864838	ArgumentList			4864784	1					
ANR	4864839	Argument	score		4864784	3					
ANR	4864840	Identifier	score		4864784	0					
ANR	4864841	IdentifierDeclStatement	"MatchResult result = EvalScore ( match_thresh , score ) ;"	1583:1:39571:39624	4864784	4	True				
ANR	4864842	IdentifierDecl	"result = EvalScore ( match_thresh , score )"		4864784	0					
ANR	4864843	IdentifierDeclType	MatchResult		4864784	0					
ANR	4864844	Identifier	result		4864784	1					
ANR	4864845	AssignmentExpression	"result = EvalScore ( match_thresh , score )"		4864784	2		=			
ANR	4864846	Identifier	result		4864784	0					
ANR	4864847	CallExpression	"EvalScore ( match_thresh , score )"		4864784	1					
ANR	4864848	Callee	EvalScore		4864784	0					
ANR	4864849	Identifier	EvalScore		4864784	0					
ANR	4864850	ArgumentList	match_thresh		4864784	1					
ANR	4864851	Argument	match_thresh		4864784	0					
ANR	4864852	Identifier	match_thresh		4864784	0					
ANR	4864853	Argument	score		4864784	1					
ANR	4864854	Identifier	score		4864784	0					
ANR	4864855	IfStatement	if ( UNKNOWN != result )		4864784	5					
ANR	4864856	Condition	UNKNOWN != result	1584:6:39632:39648	4864784	0	True				
ANR	4864857	EqualityExpression	UNKNOWN != result		4864784	0		!=			
ANR	4864858	Identifier	UNKNOWN		4864784	0					
ANR	4864859	Identifier	result		4864784	1					
ANR	4864860	CompoundStatement		18:26:460:460	4864784	1					
ANR	4864861	ReturnStatement	return result ;	1585:2:39656:39669	4864784	0	True				
ANR	4864862	Identifier	result		4864784	0					
ANR	4864863	IdentifierDeclStatement	ReadUserLog log_reader ;	1594:1:39884:39909	4864784	6	True				
ANR	4864864	IdentifierDecl	log_reader		4864784	0					
ANR	4864865	IdentifierDeclType	ReadUserLog		4864784	0					
ANR	4864866	Identifier	log_reader		4864784	1					
ANR	4864867	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Match: reading file %s\\n"" , path_str . Value ( ) )"	1595:1:39912:39980	4864784	7	True				
ANR	4864868	CallExpression	"dprintf ( D_FULLDEBUG , ""Match: reading file %s\\n"" , path_str . Value ( ) )"		4864784	0					
ANR	4864869	Callee	dprintf		4864784	0					
ANR	4864870	Identifier	dprintf		4864784	0					
ANR	4864871	ArgumentList	D_FULLDEBUG		4864784	1					
ANR	4864872	Argument	D_FULLDEBUG		4864784	0					
ANR	4864873	Identifier	D_FULLDEBUG		4864784	0					
ANR	4864874	Argument	"""Match: reading file %s\\n"""		4864784	1					
ANR	4864875	PrimaryExpression	"""Match: reading file %s\\n"""		4864784	0					
ANR	4864876	Argument	path_str . Value ( )		4864784	2					
ANR	4864877	CallExpression	path_str . Value ( )		4864784	0					
ANR	4864878	Callee	path_str . Value		4864784	0					
ANR	4864879	MemberAccess	path_str . Value		4864784	0					
ANR	4864880	Identifier	path_str		4864784	0					
ANR	4864881	Identifier	Value		4864784	1					
ANR	4864882	ArgumentList			4864784	1					
ANR	4864883	IfStatement	"if ( ! log_reader . initialize ( path_str . Value ( ) , false , false ) )"		4864784	8					
ANR	4864884	Condition	"! log_reader . initialize ( path_str . Value ( ) , false , false )"	1598:6:40015:40070	4864784	0	True				
ANR	4864885	UnaryOperationExpression	"! log_reader . initialize ( path_str . Value ( ) , false , false )"		4864784	0					
ANR	4864886	UnaryOperator	!		4864784	0					
ANR	4864887	CallExpression	"log_reader . initialize ( path_str . Value ( ) , false , false )"		4864784	1					
ANR	4864888	Callee	log_reader . initialize		4864784	0					
ANR	4864889	MemberAccess	log_reader . initialize		4864784	0					
ANR	4864890	Identifier	log_reader		4864784	0					
ANR	4864891	Identifier	initialize		4864784	1					
ANR	4864892	ArgumentList	path_str . Value ( )		4864784	1					
ANR	4864893	Argument	path_str . Value ( )		4864784	0					
ANR	4864894	CallExpression	path_str . Value ( )		4864784	0					
ANR	4864895	Callee	path_str . Value		4864784	0					
ANR	4864896	MemberAccess	path_str . Value		4864784	0					
ANR	4864897	Identifier	path_str		4864784	0					
ANR	4864898	Identifier	Value		4864784	1					
ANR	4864899	ArgumentList			4864784	1					
ANR	4864900	Argument	false		4864784	1					
ANR	4864901	Identifier	false		4864784	0					
ANR	4864902	Argument	false		4864784	2					
ANR	4864903	Identifier	false		4864784	0					
ANR	4864904	CompoundStatement		32:65:882:882	4864784	1					
ANR	4864905	ReturnStatement	return MATCH_ERROR ;	1599:2:40078:40096	4864784	0	True				
ANR	4864906	Identifier	MATCH_ERROR		4864784	0					
ANR	4864907	IdentifierDeclStatement	ReadUserLogHeader header_reader ;	1603:1:40135:40166	4864784	9	True				
ANR	4864908	IdentifierDecl	header_reader		4864784	0					
ANR	4864909	IdentifierDeclType	ReadUserLogHeader		4864784	0					
ANR	4864910	Identifier	header_reader		4864784	1					
ANR	4864911	IdentifierDeclStatement	int status = header_reader . Read ( log_reader ) ;	1604:1:40169:40214	4864784	10	True				
ANR	4864912	IdentifierDecl	status = header_reader . Read ( log_reader )		4864784	0					
ANR	4864913	IdentifierDeclType	int		4864784	0					
ANR	4864914	Identifier	status		4864784	1					
ANR	4864915	AssignmentExpression	status = header_reader . Read ( log_reader )		4864784	2		=			
ANR	4864916	Identifier	status		4864784	0					
ANR	4864917	CallExpression	header_reader . Read ( log_reader )		4864784	1					
ANR	4864918	Callee	header_reader . Read		4864784	0					
ANR	4864919	MemberAccess	header_reader . Read		4864784	0					
ANR	4864920	Identifier	header_reader		4864784	0					
ANR	4864921	Identifier	Read		4864784	1					
ANR	4864922	ArgumentList	log_reader		4864784	1					
ANR	4864923	Argument	log_reader		4864784	0					
ANR	4864924	Identifier	log_reader		4864784	0					
ANR	4864925	IfStatement	if ( ULOG_OK == status )		4864784	11					
ANR	4864926	Condition	ULOG_OK == status	1605:6:40222:40238	4864784	0	True				
ANR	4864927	EqualityExpression	ULOG_OK == status		4864784	0		==			
ANR	4864928	Identifier	ULOG_OK		4864784	0					
ANR	4864929	Identifier	status		4864784	1					
ANR	4864930	CompoundStatement		39:26:1050:1050	4864784	1					
ANR	4864931	ElseStatement	else		4864784	0					
ANR	4864932	IfStatement	if ( ULOG_NO_EVENT == status )		4864784	0					
ANR	4864933	Condition	ULOG_NO_EVENT == status	1608:11:40274:40296	4864784	0	True				
ANR	4864934	EqualityExpression	ULOG_NO_EVENT == status		4864784	0		==			
ANR	4864935	Identifier	ULOG_NO_EVENT		4864784	0					
ANR	4864936	Identifier	status		4864784	1					
ANR	4864937	CompoundStatement		42:37:1108:1108	4864784	1					
ANR	4864938	ReturnStatement	"return EvalScore ( match_thresh , score ) ;"	1609:2:40304:40343	4864784	0	True				
ANR	4864939	CallExpression	"EvalScore ( match_thresh , score )"		4864784	0					
ANR	4864940	Callee	EvalScore		4864784	0					
ANR	4864941	Identifier	EvalScore		4864784	0					
ANR	4864942	ArgumentList	match_thresh		4864784	1					
ANR	4864943	Argument	match_thresh		4864784	0					
ANR	4864944	Identifier	match_thresh		4864784	0					
ANR	4864945	Argument	score		4864784	1					
ANR	4864946	Identifier	score		4864784	0					
ANR	4864947	ElseStatement	else		4864784	0					
ANR	4864948	CompoundStatement		45:6:1162:1162	4864784	0					
ANR	4864949	ReturnStatement	return MATCH_ERROR ;	1612:2:40358:40376	4864784	0	True				
ANR	4864950	Identifier	MATCH_ERROR		4864784	0					
ANR	4864951	IdentifierDeclStatement	int id_result = m_state -> CompareUniqId ( header_reader . getId ( ) ) ;	1616:1:40422:40485	4864784	12	True				
ANR	4864952	IdentifierDecl	id_result = m_state -> CompareUniqId ( header_reader . getId ( ) )		4864784	0					
ANR	4864953	IdentifierDeclType	int		4864784	0					
ANR	4864954	Identifier	id_result		4864784	1					
ANR	4864955	AssignmentExpression	id_result = m_state -> CompareUniqId ( header_reader . getId ( ) )		4864784	2		=			
ANR	4864956	Identifier	id_result		4864784	0					
ANR	4864957	CallExpression	m_state -> CompareUniqId ( header_reader . getId ( ) )		4864784	1					
ANR	4864958	Callee	m_state -> CompareUniqId		4864784	0					
ANR	4864959	PtrMemberAccess	m_state -> CompareUniqId		4864784	0					
ANR	4864960	Identifier	m_state		4864784	0					
ANR	4864961	Identifier	CompareUniqId		4864784	1					
ANR	4864962	ArgumentList	header_reader . getId ( )		4864784	1					
ANR	4864963	Argument	header_reader . getId ( )		4864784	0					
ANR	4864964	CallExpression	header_reader . getId ( )		4864784	0					
ANR	4864965	Callee	header_reader . getId		4864784	0					
ANR	4864966	MemberAccess	header_reader . getId		4864784	0					
ANR	4864967	Identifier	header_reader		4864784	0					
ANR	4864968	Identifier	getId		4864784	1					
ANR	4864969	ArgumentList			4864784	1					
ANR	4864970	IdentifierDeclStatement	"const char * result_str = ""unknown"" ;"	1617:1:40488:40522	4864784	13	True				
ANR	4864971	IdentifierDecl	"* result_str = ""unknown"""		4864784	0					
ANR	4864972	IdentifierDeclType	const char *		4864784	0					
ANR	4864973	Identifier	result_str		4864784	1					
ANR	4864974	AssignmentExpression	"* result_str = ""unknown"""		4864784	2		=			
ANR	4864975	Identifier	result_str		4864784	0					
ANR	4864976	PrimaryExpression	"""unknown"""		4864784	1					
ANR	4864977	IfStatement	if ( id_result > 0 )		4864784	14					
ANR	4864978	Condition	id_result > 0	1618:6:40530:40542	4864784	0	True				
ANR	4864979	RelationalExpression	id_result > 0		4864784	0		>			
ANR	4864980	Identifier	id_result		4864784	0					
ANR	4864981	PrimaryExpression	0		4864784	1					
ANR	4864982	CompoundStatement		52:22:1354:1354	4864784	1					
ANR	4864983	ExpressionStatement	score += SCORE_FACTOR_UNIQ_MATCH	1619:2:40550:40582	4864784	0	True				
ANR	4864984	AssignmentExpression	score += SCORE_FACTOR_UNIQ_MATCH		4864784	0		+=			
ANR	4864985	Identifier	score		4864784	0					
ANR	4864986	Identifier	SCORE_FACTOR_UNIQ_MATCH		4864784	1					
ANR	4864987	ExpressionStatement	"result_str = ""match"""	1620:2:40586:40606	4864784	1	True				
ANR	4864988	AssignmentExpression	"result_str = ""match"""		4864784	0		=			
ANR	4864989	Identifier	result_str		4864784	0					
ANR	4864990	PrimaryExpression	"""match"""		4864784	1					
ANR	4864991	ElseStatement	else		4864784	0					
ANR	4864992	IfStatement	if ( id_result < 0 )		4864784	0					
ANR	4864993	Condition	id_result < 0	1622:11:40622:40634	4864784	0	True				
ANR	4864994	RelationalExpression	id_result < 0		4864784	0		<			
ANR	4864995	Identifier	id_result		4864784	0					
ANR	4864996	PrimaryExpression	0		4864784	1					
ANR	4864997	CompoundStatement		56:27:1446:1446	4864784	1					
ANR	4864998	ExpressionStatement	score = 0	1623:2:40642:40651	4864784	0	True				
ANR	4864999	AssignmentExpression	score = 0		4864784	0		=			
ANR	4865000	Identifier	score		4864784	0					
ANR	4865001	PrimaryExpression	0		4864784	1					
ANR	4865002	ExpressionStatement	"result_str = ""no match"""	1624:2:40655:40678	4864784	1	True				
ANR	4865003	AssignmentExpression	"result_str = ""no match"""		4864784	0		=			
ANR	4865004	Identifier	result_str		4864784	0					
ANR	4865005	PrimaryExpression	"""no match"""		4864784	1					
ANR	4865006	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Read ID from '%s' as '%s': %d (%s)\\n"" , path_str . Value ( ) , header_reader . getId ( ) . Value ( ) , id_result , result_str )"	1626:1:40684:40826	4864784	15	True				
ANR	4865007	CallExpression	"dprintf ( D_FULLDEBUG , ""Read ID from '%s' as '%s': %d (%s)\\n"" , path_str . Value ( ) , header_reader . getId ( ) . Value ( ) , id_result , result_str )"		4864784	0					
ANR	4865008	Callee	dprintf		4864784	0					
ANR	4865009	Identifier	dprintf		4864784	0					
ANR	4865010	ArgumentList	D_FULLDEBUG		4864784	1					
ANR	4865011	Argument	D_FULLDEBUG		4864784	0					
ANR	4865012	Identifier	D_FULLDEBUG		4864784	0					
ANR	4865013	Argument	"""Read ID from '%s' as '%s': %d (%s)\\n"""		4864784	1					
ANR	4865014	PrimaryExpression	"""Read ID from '%s' as '%s': %d (%s)\\n"""		4864784	0					
ANR	4865015	Argument	path_str . Value ( )		4864784	2					
ANR	4865016	CallExpression	path_str . Value ( )		4864784	0					
ANR	4865017	Callee	path_str . Value		4864784	0					
ANR	4865018	MemberAccess	path_str . Value		4864784	0					
ANR	4865019	Identifier	path_str		4864784	0					
ANR	4865020	Identifier	Value		4864784	1					
ANR	4865021	ArgumentList			4864784	1					
ANR	4865022	Argument	header_reader . getId ( ) . Value ( )		4864784	3					
ANR	4865023	CallExpression	header_reader . getId ( ) . Value ( )		4864784	0					
ANR	4865024	Callee	header_reader . getId ( ) . Value		4864784	0					
ANR	4865025	MemberAccess	header_reader . getId ( ) . Value		4864784	0					
ANR	4865026	CallExpression	header_reader . getId ( )		4864784	0					
ANR	4865027	Callee	header_reader . getId		4864784	0					
ANR	4865028	MemberAccess	header_reader . getId		4864784	0					
ANR	4865029	Identifier	header_reader		4864784	0					
ANR	4865030	Identifier	getId		4864784	1					
ANR	4865031	ArgumentList			4864784	1					
ANR	4865032	Identifier	Value		4864784	1					
ANR	4865033	ArgumentList			4864784	1					
ANR	4865034	Argument	id_result		4864784	4					
ANR	4865035	Identifier	id_result		4864784	0					
ANR	4865036	Argument	result_str		4864784	5					
ANR	4865037	Identifier	result_str		4864784	0					
ANR	4865038	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Match: Final score is %d\\n"" , score )"	1631:1:40881:40940	4864784	16	True				
ANR	4865039	CallExpression	"dprintf ( D_FULLDEBUG , ""Match: Final score is %d\\n"" , score )"		4864784	0					
ANR	4865040	Callee	dprintf		4864784	0					
ANR	4865041	Identifier	dprintf		4864784	0					
ANR	4865042	ArgumentList	D_FULLDEBUG		4864784	1					
ANR	4865043	Argument	D_FULLDEBUG		4864784	0					
ANR	4865044	Identifier	D_FULLDEBUG		4864784	0					
ANR	4865045	Argument	"""Match: Final score is %d\\n"""		4864784	1					
ANR	4865046	PrimaryExpression	"""Match: Final score is %d\\n"""		4864784	0					
ANR	4865047	Argument	score		4864784	2					
ANR	4865048	Identifier	score		4864784	0					
ANR	4865049	ReturnStatement	"return EvalScore ( match_thresh , score ) ;"	1632:1:40943:40982	4864784	17	True				
ANR	4865050	CallExpression	"EvalScore ( match_thresh , score )"		4864784	0					
ANR	4865051	Callee	EvalScore		4864784	0					
ANR	4865052	Identifier	EvalScore		4864784	0					
ANR	4865053	ArgumentList	match_thresh		4864784	1					
ANR	4865054	Argument	match_thresh		4864784	0					
ANR	4865055	Identifier	match_thresh		4864784	0					
ANR	4865056	Argument	score		4864784	1					
ANR	4865057	Identifier	score		4864784	0					
ANR	4865058	ReturnType	ReadUserLogMatch :: MatchResult		4864784	1					
ANR	4865059	Identifier	ReadUserLogMatch :: MatchInternal		4864784	2					
ANR	4865060	ParameterList	"int rot , const char * path , int match_thresh , int * score_ptr"		4864784	3					
ANR	4865061	Parameter	int rot	1563:1:39108:39118	4864784	0	True				
ANR	4865062	ParameterType	int		4864784	0					
ANR	4865063	Identifier	rot		4864784	1					
ANR	4865064	Parameter	const char * path	1564:1:39122:39138	4864784	1	True				
ANR	4865065	ParameterType	const char *		4864784	0					
ANR	4865066	Identifier	path		4864784	1					
ANR	4865067	Parameter	int match_thresh	1565:1:39142:39161	4864784	2	True				
ANR	4865068	ParameterType	int		4864784	0					
ANR	4865069	Identifier	match_thresh		4864784	1					
ANR	4865070	Parameter	int * score_ptr	1566:1:39165:39181	4864784	3	True				
ANR	4865071	ParameterType	int *		4864784	0					
ANR	4865072	Identifier	score_ptr		4864784	1					
ANR	4865073	CFGEntryNode	ENTRY		4864784		True				
ANR	4865074	CFGExitNode	EXIT		4864784		True				
ANR	4865075	Symbol	ULOG_NO_EVENT		4864784						
ANR	4865076	Symbol	header_reader . getId		4864784						
ANR	4865077	Symbol	id_result		4864784						
ANR	4865078	Symbol	* m_state		4864784						
ANR	4865079	Symbol	path_str		4864784						
ANR	4865080	Symbol	result		4864784						
ANR	4865081	Symbol	path		4864784						
ANR	4865082	Symbol	score		4864784						
ANR	4865083	Symbol	m_state		4864784						
ANR	4865084	Symbol	rot		4864784						
ANR	4865085	Symbol	* score_ptr		4864784						
ANR	4865086	Symbol	header_reader		4864784						
ANR	4865087	Symbol	header_reader . Read		4864784						
ANR	4865088	Symbol	m_state -> CompareUniqId		4864784						
ANR	4865089	Symbol	SCORE_FACTOR_UNIQ_MATCH		4864784						
ANR	4865090	Symbol	result_str		4864784						
ANR	4865091	Symbol	match_thresh		4864784						
ANR	4865092	Symbol	NULL		4864784						
ANR	4865093	Symbol	header_reader . getId ( ) . Value		4864784						
ANR	4865094	Symbol	log_reader		4864784						
ANR	4865095	Symbol	false		4864784						
ANR	4865096	Symbol	D_FULLDEBUG		4864784						
ANR	4865097	Symbol	score_ptr		4864784						
ANR	4865098	Symbol	MATCH_ERROR		4864784						
ANR	4865099	Symbol	log_reader . initialize		4864784						
ANR	4865100	Symbol	ULOG_OK		4864784						
ANR	4865101	Symbol	EvalScore		4864784						
ANR	4865102	Symbol	path_str . Value		4864784						
ANR	4865103	Symbol	UNKNOWN		4864784						
ANR	4865104	Symbol	status		4864784						
ANR	4865105	Function	ReadUserLogMatch :: EvalScore	1635:0:40987:41412							
ANR	4865106	FunctionDef	"ReadUserLogMatch :: EvalScore (int match_thresh , int score)"		4865105	0					
ANR	4865107	CompoundStatement		1639:0:41090:41412	4865105	0					
ANR	4865108	IfStatement	if ( score < 0 )		4865105	0					
ANR	4865109	Condition	score < 0	1642:6:41119:41127	4865105	0	True				
ANR	4865110	RelationalExpression	score < 0		4865105	0		<			
ANR	4865111	Identifier	score		4865105	0					
ANR	4865112	PrimaryExpression	0		4865105	1					
ANR	4865113	CompoundStatement		4:18:40:40	4865105	1					
ANR	4865114	ReturnStatement	return MATCH_ERROR ;	1643:2:41135:41153	4865105	0	True				
ANR	4865115	Identifier	MATCH_ERROR		4865105	0					
ANR	4865116	ElseStatement	else		4865105	0					
ANR	4865117	IfStatement	if ( score < SCORE_MIN_MATCH )		4865105	0					
ANR	4865118	Condition	score < SCORE_MIN_MATCH	1646:11:41231:41253	4865105	0	True				
ANR	4865119	RelationalExpression	score < SCORE_MIN_MATCH		4865105	0		<			
ANR	4865120	Identifier	score		4865105	0					
ANR	4865121	Identifier	SCORE_MIN_MATCH		4865105	1					
ANR	4865122	CompoundStatement		8:37:166:166	4865105	1					
ANR	4865123	ReturnStatement	return NOMATCH ;	1647:2:41261:41275	4865105	0	True				
ANR	4865124	Identifier	NOMATCH		4865105	0					
ANR	4865125	ElseStatement	else		4865105	0					
ANR	4865126	IfStatement	if ( score >= match_thresh )		4865105	0					
ANR	4865127	Condition	score >= match_thresh	1650:11:41338:41358	4865105	0	True				
ANR	4865128	RelationalExpression	score >= match_thresh		4865105	0		>=			
ANR	4865129	Identifier	score		4865105	0					
ANR	4865130	Identifier	match_thresh		4865105	1					
ANR	4865131	CompoundStatement		12:35:271:271	4865105	1					
ANR	4865132	ReturnStatement	return MATCH ;	1651:2:41366:41378	4865105	0	True				
ANR	4865133	Identifier	MATCH		4865105	0					
ANR	4865134	ElseStatement	else		4865105	0					
ANR	4865135	CompoundStatement		15:6:298:298	4865105	0					
ANR	4865136	ReturnStatement	return UNKNOWN ;	1654:2:41393:41407	4865105	0	True				
ANR	4865137	Identifier	UNKNOWN		4865105	0					
ANR	4865138	ReturnType	ReadUserLogMatch :: MatchResult		4865105	1					
ANR	4865139	Identifier	ReadUserLogMatch :: EvalScore		4865105	2					
ANR	4865140	ParameterList	"int match_thresh , int score"		4865105	3					
ANR	4865141	Parameter	int match_thresh	1637:1:41047:41065	4865105	0	True				
ANR	4865142	ParameterType	int		4865105	0					
ANR	4865143	Identifier	match_thresh		4865105	1					
ANR	4865144	Parameter	int score	1638:1:41069:41080	4865105	1	True				
ANR	4865145	ParameterType	int		4865105	0					
ANR	4865146	Identifier	score		4865105	1					
ANR	4865147	CFGEntryNode	ENTRY		4865105		True				
ANR	4865148	CFGExitNode	EXIT		4865105		True				
ANR	4865149	Symbol	score		4865105						
ANR	4865150	Symbol	match_thresh		4865105						
ANR	4865151	Symbol	NOMATCH		4865105						
ANR	4865152	Symbol	SCORE_MIN_MATCH		4865105						
ANR	4865153	Symbol	UNKNOWN		4865105						
ANR	4865154	Symbol	MATCH_ERROR		4865105						
ANR	4865155	Symbol	MATCH		4865105						
ANR	4865156	Function	ReadUserLogMatch :: MatchStr	1658:0:41415:41696							
ANR	4865157	FunctionDef	ReadUserLogMatch :: MatchStr (ReadUserLogMatch :: MatchResult value)		4865156	0					
ANR	4865158	CompoundStatement		1660:0:41500:41696	4865156	0					
ANR	4865159	SwitchStatement	switch ( value )		4865156	0					
ANR	4865160	Condition	value	1661:9:41511:41515	4865156	0	True				
ANR	4865161	Identifier	value		4865156	0					
ANR	4865162	CompoundStatement		2:17:18:18	4865156	1					
ANR	4865163	Label	case MATCH_ERROR :	1662:1:41522:41538	4865156	0	True				
ANR	4865164	Identifier	MATCH_ERROR		4865156	0					
ANR	4865165	ReturnStatement	"return ""ERROR"" ;"	1663:2:41542:41556	4865156	1	True				
ANR	4865166	PrimaryExpression	"""ERROR"""		4865156	0					
ANR	4865167	Label	case MATCH :	1664:1:41559:41569	4865156	2	True				
ANR	4865168	Identifier	MATCH		4865156	0					
ANR	4865169	ReturnStatement	"return ""MATCH"" ;"	1665:2:41573:41587	4865156	3	True				
ANR	4865170	PrimaryExpression	"""MATCH"""		4865156	0					
ANR	4865171	Label	case UNKNOWN :	1666:1:41590:41602	4865156	4	True				
ANR	4865172	Identifier	UNKNOWN		4865156	0					
ANR	4865173	ReturnStatement	"return ""UNKNOWN"" ;"	1667:2:41606:41622	4865156	5	True				
ANR	4865174	PrimaryExpression	"""UNKNOWN"""		4865156	0					
ANR	4865175	Label	case NOMATCH :	1668:1:41625:41637	4865156	6	True				
ANR	4865176	Identifier	NOMATCH		4865156	0					
ANR	4865177	ReturnStatement	"return ""NOMATCH"" ;"	1669:2:41641:41657	4865156	7	True				
ANR	4865178	PrimaryExpression	"""NOMATCH"""		4865156	0					
ANR	4865179	Label	default :	1670:1:41660:41667	4865156	8	True				
ANR	4865180	Identifier	default		4865156	0					
ANR	4865181	ReturnStatement	"return ""<invalid>"" ;"	1671:2:41671:41689	4865156	9	True				
ANR	4865182	PrimaryExpression	"""<invalid>"""		4865156	0					
ANR	4865183	ExpressionStatement		1672:2:41693:41693	4865156	1	True				
ANR	4865184	ReturnType	const char *		4865156	1					
ANR	4865185	Identifier	ReadUserLogMatch :: MatchStr		4865156	2					
ANR	4865186	ParameterList	ReadUserLogMatch :: MatchResult value		4865156	3					
ANR	4865187	Parameter	ReadUserLogMatch :: MatchResult value	1659:28:41456:41490	4865156	0	True				
ANR	4865188	ParameterType	ReadUserLogMatch :: MatchResult		4865156	0					
ANR	4865189	Identifier	value		4865156	1					
ANR	4865190	CFGEntryNode	ENTRY		4865156		True				
ANR	4865191	CFGExitNode	EXIT		4865156		True				
ANR	4865192	Symbol	value		4865156						
