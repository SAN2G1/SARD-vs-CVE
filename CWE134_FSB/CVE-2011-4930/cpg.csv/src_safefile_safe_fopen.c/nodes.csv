command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5208843	File	data/converged/CVE-2011-4930_htcondor/src_safefile_safe_fopen.c								
ANR	5208844	DeclStmt									
ANR	5208845	Decl							int	"int ( const char * flags , int * mode , int create_file )"	stdio_mode_to_open_flag
ANR	5208846	DeclStmt									
ANR	5208847	Decl							FILE	"FILE * ( int fd , const char * flags )"	safe_fdopen
ANR	5208848	DeclStmt									
ANR	5208849	Decl							char	char * ( const char * flags )	fix_stdio_fdopen_mode_on_windows
ANR	5208850	DeclStmt									
ANR	5208851	Decl							const char	const char [ ]	ccsStr
ANR	5208852	DeclStmt									
ANR	5208853	Decl							const char	const char [ ]	unicodeStr
ANR	5208854	DeclStmt									
ANR	5208855	Decl							const char	const char [ ]	utf8Str
ANR	5208856	DeclStmt									
ANR	5208857	Decl							const char	const char [ ]	utf16Str
ANR	5208858	DeclStmt									
ANR	5208859	Decl							const size_t	const size_t	ccsStrLen
ANR	5208860	DeclStmt									
ANR	5208861	Decl							const size_t	const size_t	unicodeStrLen
ANR	5208862	DeclStmt									
ANR	5208863	Decl							const size_t	const size_t	utf8StrLen
ANR	5208864	DeclStmt									
ANR	5208865	Decl							const size_t	const size_t	utf16StrLen
ANR	5208866	Function	safe_fopen_no_create	76:0:2365:2725							
ANR	5208867	FunctionDef	"safe_fopen_no_create (const char * fn , const char * flags)"		5208866	0					
ANR	5208868	CompoundStatement		77:0:2427:2725	5208866	0					
ANR	5208869	IdentifierDeclStatement	int open_flags ;	78:4:2433:2447	5208866	0	True				
ANR	5208870	IdentifierDecl	open_flags		5208866	0					
ANR	5208871	IdentifierDeclType	int		5208866	0					
ANR	5208872	Identifier	open_flags		5208866	1					
ANR	5208873	IdentifierDeclStatement	"int r = stdio_mode_to_open_flag ( flags , & open_flags , 0 ) ;"	79:4:2453:2507	5208866	1	True				
ANR	5208874	IdentifierDecl	"r = stdio_mode_to_open_flag ( flags , & open_flags , 0 )"		5208866	0					
ANR	5208875	IdentifierDeclType	int		5208866	0					
ANR	5208876	Identifier	r		5208866	1					
ANR	5208877	AssignmentExpression	"r = stdio_mode_to_open_flag ( flags , & open_flags , 0 )"		5208866	2		=			
ANR	5208878	Identifier	r		5208866	0					
ANR	5208879	CallExpression	"stdio_mode_to_open_flag ( flags , & open_flags , 0 )"		5208866	1					
ANR	5208880	Callee	stdio_mode_to_open_flag		5208866	0					
ANR	5208881	Identifier	stdio_mode_to_open_flag		5208866	0					
ANR	5208882	ArgumentList	flags		5208866	1					
ANR	5208883	Argument	flags		5208866	0					
ANR	5208884	Identifier	flags		5208866	0					
ANR	5208885	Argument	& open_flags		5208866	1					
ANR	5208886	UnaryOperationExpression	& open_flags		5208866	0					
ANR	5208887	UnaryOperator	&		5208866	0					
ANR	5208888	Identifier	open_flags		5208866	1					
ANR	5208889	Argument	0		5208866	2					
ANR	5208890	PrimaryExpression	0		5208866	0					
ANR	5208891	IdentifierDeclStatement	int f ;	80:4:2513:2518	5208866	2	True				
ANR	5208892	IdentifierDecl	f		5208866	0					
ANR	5208893	IdentifierDeclType	int		5208866	0					
ANR	5208894	Identifier	f		5208866	1					
ANR	5208895	IfStatement	if ( r != 0 )		5208866	3					
ANR	5208896	Condition	r != 0	82:8:2529:2534	5208866	0	True				
ANR	5208897	EqualityExpression	r != 0		5208866	0		!=			
ANR	5208898	Identifier	r		5208866	0					
ANR	5208899	PrimaryExpression	0		5208866	1					
ANR	5208900	CompoundStatement		6:17:110:110	5208866	1					
ANR	5208901	ReturnStatement	return NULL ;	83:1:2541:2552	5208866	0	True				
ANR	5208902	Identifier	NULL		5208866	0					
ANR	5208903	ExpressionStatement	open_flags &= ~O_CREAT	87:4:2620:2642	5208866	4	True				
ANR	5208904	AssignmentExpression	open_flags &= ~O_CREAT		5208866	0		&=			
ANR	5208905	Identifier	open_flags		5208866	0					
ANR	5208906	Identifier	~O_CREAT		5208866	1					
ANR	5208907	ExpressionStatement	"f = safe_open_no_create ( fn , open_flags )"	89:4:2649:2688	5208866	5	True				
ANR	5208908	AssignmentExpression	"f = safe_open_no_create ( fn , open_flags )"		5208866	0		=			
ANR	5208909	Identifier	f		5208866	0					
ANR	5208910	CallExpression	"safe_open_no_create ( fn , open_flags )"		5208866	1					
ANR	5208911	Callee	safe_open_no_create		5208866	0					
ANR	5208912	Identifier	safe_open_no_create		5208866	0					
ANR	5208913	ArgumentList	fn		5208866	1					
ANR	5208914	Argument	fn		5208866	0					
ANR	5208915	Identifier	fn		5208866	0					
ANR	5208916	Argument	open_flags		5208866	1					
ANR	5208917	Identifier	open_flags		5208866	0					
ANR	5208918	ReturnStatement	"return safe_fdopen ( f , flags ) ;"	91:4:2695:2723	5208866	6	True				
ANR	5208919	CallExpression	"safe_fdopen ( f , flags )"		5208866	0					
ANR	5208920	Callee	safe_fdopen		5208866	0					
ANR	5208921	Identifier	safe_fdopen		5208866	0					
ANR	5208922	ArgumentList	f		5208866	1					
ANR	5208923	Argument	f		5208866	0					
ANR	5208924	Identifier	f		5208866	0					
ANR	5208925	Argument	flags		5208866	1					
ANR	5208926	Identifier	flags		5208866	0					
ANR	5208927	ReturnType	FILE *		5208866	1					
ANR	5208928	Identifier	safe_fopen_no_create		5208866	2					
ANR	5208929	ParameterList	"const char * fn , const char * flags"		5208866	3					
ANR	5208930	Parameter	const char * fn	76:27:2392:2405	5208866	0	True				
ANR	5208931	ParameterType	const char *		5208866	0					
ANR	5208932	Identifier	fn		5208866	1					
ANR	5208933	Parameter	const char * flags	76:43:2408:2424	5208866	1	True				
ANR	5208934	ParameterType	const char *		5208866	0					
ANR	5208935	Identifier	flags		5208866	1					
ANR	5208936	CFGEntryNode	ENTRY		5208866		True				
ANR	5208937	CFGExitNode	EXIT		5208866		True				
ANR	5208938	Symbol	& open_flags		5208866						
ANR	5208939	Symbol	r		5208866						
ANR	5208940	Symbol	NULL		5208866						
ANR	5208941	Symbol	safe_fdopen		5208866						
ANR	5208942	Symbol	f		5208866						
ANR	5208943	Symbol	safe_open_no_create		5208866						
ANR	5208944	Symbol	fn		5208866						
ANR	5208945	Symbol	flags		5208866						
ANR	5208946	Symbol	stdio_mode_to_open_flag		5208866						
ANR	5208947	Symbol	~O_CREAT		5208866						
ANR	5208948	Symbol	open_flags		5208866						
ANR	5208949	Function	safe_fcreate_fail_if_exists	96:0:2788:3097							
ANR	5208950	FunctionDef	"safe_fcreate_fail_if_exists (const char * fn , const char * flags , mode_t mode)"		5208949	0					
ANR	5208951	CompoundStatement		97:0:2870:3097	5208949	0					
ANR	5208952	IdentifierDeclStatement	int open_flags ;	98:4:2876:2890	5208949	0	True				
ANR	5208953	IdentifierDecl	open_flags		5208949	0					
ANR	5208954	IdentifierDeclType	int		5208949	0					
ANR	5208955	Identifier	open_flags		5208949	1					
ANR	5208956	IdentifierDeclStatement	"int r = stdio_mode_to_open_flag ( flags , & open_flags , 1 ) ;"	99:4:2896:2950	5208949	1	True				
ANR	5208957	IdentifierDecl	"r = stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		5208949	0					
ANR	5208958	IdentifierDeclType	int		5208949	0					
ANR	5208959	Identifier	r		5208949	1					
ANR	5208960	AssignmentExpression	"r = stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		5208949	2		=			
ANR	5208961	Identifier	r		5208949	0					
ANR	5208962	CallExpression	"stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		5208949	1					
ANR	5208963	Callee	stdio_mode_to_open_flag		5208949	0					
ANR	5208964	Identifier	stdio_mode_to_open_flag		5208949	0					
ANR	5208965	ArgumentList	flags		5208949	1					
ANR	5208966	Argument	flags		5208949	0					
ANR	5208967	Identifier	flags		5208949	0					
ANR	5208968	Argument	& open_flags		5208949	1					
ANR	5208969	UnaryOperationExpression	& open_flags		5208949	0					
ANR	5208970	UnaryOperator	&		5208949	0					
ANR	5208971	Identifier	open_flags		5208949	1					
ANR	5208972	Argument	1		5208949	2					
ANR	5208973	PrimaryExpression	1		5208949	0					
ANR	5208974	IdentifierDeclStatement	int f ;	100:4:2956:2961	5208949	2	True				
ANR	5208975	IdentifierDecl	f		5208949	0					
ANR	5208976	IdentifierDeclType	int		5208949	0					
ANR	5208977	Identifier	f		5208949	1					
ANR	5208978	IfStatement	if ( r != 0 )		5208949	3					
ANR	5208979	Condition	r != 0	102:8:2972:2977	5208949	0	True				
ANR	5208980	EqualityExpression	r != 0		5208949	0		!=			
ANR	5208981	Identifier	r		5208949	0					
ANR	5208982	PrimaryExpression	0		5208949	1					
ANR	5208983	CompoundStatement		6:17:110:110	5208949	1					
ANR	5208984	ReturnStatement	return NULL ;	103:1:2984:2995	5208949	0	True				
ANR	5208985	Identifier	NULL		5208949	0					
ANR	5208986	ExpressionStatement	"f = safe_create_fail_if_exists ( fn , open_flags , mode )"	106:4:3008:3060	5208949	4	True				
ANR	5208987	AssignmentExpression	"f = safe_create_fail_if_exists ( fn , open_flags , mode )"		5208949	0		=			
ANR	5208988	Identifier	f		5208949	0					
ANR	5208989	CallExpression	"safe_create_fail_if_exists ( fn , open_flags , mode )"		5208949	1					
ANR	5208990	Callee	safe_create_fail_if_exists		5208949	0					
ANR	5208991	Identifier	safe_create_fail_if_exists		5208949	0					
ANR	5208992	ArgumentList	fn		5208949	1					
ANR	5208993	Argument	fn		5208949	0					
ANR	5208994	Identifier	fn		5208949	0					
ANR	5208995	Argument	open_flags		5208949	1					
ANR	5208996	Identifier	open_flags		5208949	0					
ANR	5208997	Argument	mode		5208949	2					
ANR	5208998	Identifier	mode		5208949	0					
ANR	5208999	ReturnStatement	"return safe_fdopen ( f , flags ) ;"	108:4:3067:3095	5208949	5	True				
ANR	5209000	CallExpression	"safe_fdopen ( f , flags )"		5208949	0					
ANR	5209001	Callee	safe_fdopen		5208949	0					
ANR	5209002	Identifier	safe_fdopen		5208949	0					
ANR	5209003	ArgumentList	f		5208949	1					
ANR	5209004	Argument	f		5208949	0					
ANR	5209005	Identifier	f		5208949	0					
ANR	5209006	Argument	flags		5208949	1					
ANR	5209007	Identifier	flags		5208949	0					
ANR	5209008	ReturnType	FILE *		5208949	1					
ANR	5209009	Identifier	safe_fcreate_fail_if_exists		5208949	2					
ANR	5209010	ParameterList	"const char * fn , const char * flags , mode_t mode"		5208949	3					
ANR	5209011	Parameter	const char * fn	96:34:2822:2835	5208949	0	True				
ANR	5209012	ParameterType	const char *		5208949	0					
ANR	5209013	Identifier	fn		5208949	1					
ANR	5209014	Parameter	const char * flags	96:50:2838:2854	5208949	1	True				
ANR	5209015	ParameterType	const char *		5208949	0					
ANR	5209016	Identifier	flags		5208949	1					
ANR	5209017	Parameter	mode_t mode	96:69:2857:2867	5208949	2	True				
ANR	5209018	ParameterType	mode_t		5208949	0					
ANR	5209019	Identifier	mode		5208949	1					
ANR	5209020	CFGEntryNode	ENTRY		5208949		True				
ANR	5209021	CFGExitNode	EXIT		5208949		True				
ANR	5209022	Symbol	mode		5208949						
ANR	5209023	Symbol	& open_flags		5208949						
ANR	5209024	Symbol	r		5208949						
ANR	5209025	Symbol	NULL		5208949						
ANR	5209026	Symbol	safe_fdopen		5208949						
ANR	5209027	Symbol	f		5208949						
ANR	5209028	Symbol	fn		5208949						
ANR	5209029	Symbol	flags		5208949						
ANR	5209030	Symbol	stdio_mode_to_open_flag		5208949						
ANR	5209031	Symbol	open_flags		5208949						
ANR	5209032	Symbol	safe_create_fail_if_exists		5208949						
ANR	5209033	Function	safe_fcreate_keep_if_exists	113:0:3162:3471							
ANR	5209034	FunctionDef	"safe_fcreate_keep_if_exists (const char * fn , const char * flags , mode_t mode)"		5209033	0					
ANR	5209035	CompoundStatement		114:0:3244:3471	5209033	0					
ANR	5209036	IdentifierDeclStatement	int open_flags ;	115:4:3250:3264	5209033	0	True				
ANR	5209037	IdentifierDecl	open_flags		5209033	0					
ANR	5209038	IdentifierDeclType	int		5209033	0					
ANR	5209039	Identifier	open_flags		5209033	1					
ANR	5209040	IdentifierDeclStatement	"int r = stdio_mode_to_open_flag ( flags , & open_flags , 1 ) ;"	116:4:3270:3324	5209033	1	True				
ANR	5209041	IdentifierDecl	"r = stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		5209033	0					
ANR	5209042	IdentifierDeclType	int		5209033	0					
ANR	5209043	Identifier	r		5209033	1					
ANR	5209044	AssignmentExpression	"r = stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		5209033	2		=			
ANR	5209045	Identifier	r		5209033	0					
ANR	5209046	CallExpression	"stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		5209033	1					
ANR	5209047	Callee	stdio_mode_to_open_flag		5209033	0					
ANR	5209048	Identifier	stdio_mode_to_open_flag		5209033	0					
ANR	5209049	ArgumentList	flags		5209033	1					
ANR	5209050	Argument	flags		5209033	0					
ANR	5209051	Identifier	flags		5209033	0					
ANR	5209052	Argument	& open_flags		5209033	1					
ANR	5209053	UnaryOperationExpression	& open_flags		5209033	0					
ANR	5209054	UnaryOperator	&		5209033	0					
ANR	5209055	Identifier	open_flags		5209033	1					
ANR	5209056	Argument	1		5209033	2					
ANR	5209057	PrimaryExpression	1		5209033	0					
ANR	5209058	IdentifierDeclStatement	int f ;	117:4:3330:3335	5209033	2	True				
ANR	5209059	IdentifierDecl	f		5209033	0					
ANR	5209060	IdentifierDeclType	int		5209033	0					
ANR	5209061	Identifier	f		5209033	1					
ANR	5209062	IfStatement	if ( r != 0 )		5209033	3					
ANR	5209063	Condition	r != 0	119:8:3346:3351	5209033	0	True				
ANR	5209064	EqualityExpression	r != 0		5209033	0		!=			
ANR	5209065	Identifier	r		5209033	0					
ANR	5209066	PrimaryExpression	0		5209033	1					
ANR	5209067	CompoundStatement		6:17:110:110	5209033	1					
ANR	5209068	ReturnStatement	return NULL ;	120:1:3358:3369	5209033	0	True				
ANR	5209069	Identifier	NULL		5209033	0					
ANR	5209070	ExpressionStatement	"f = safe_create_keep_if_exists ( fn , open_flags , mode )"	123:4:3382:3434	5209033	4	True				
ANR	5209071	AssignmentExpression	"f = safe_create_keep_if_exists ( fn , open_flags , mode )"		5209033	0		=			
ANR	5209072	Identifier	f		5209033	0					
ANR	5209073	CallExpression	"safe_create_keep_if_exists ( fn , open_flags , mode )"		5209033	1					
ANR	5209074	Callee	safe_create_keep_if_exists		5209033	0					
ANR	5209075	Identifier	safe_create_keep_if_exists		5209033	0					
ANR	5209076	ArgumentList	fn		5209033	1					
ANR	5209077	Argument	fn		5209033	0					
ANR	5209078	Identifier	fn		5209033	0					
ANR	5209079	Argument	open_flags		5209033	1					
ANR	5209080	Identifier	open_flags		5209033	0					
ANR	5209081	Argument	mode		5209033	2					
ANR	5209082	Identifier	mode		5209033	0					
ANR	5209083	ReturnStatement	"return safe_fdopen ( f , flags ) ;"	125:4:3441:3469	5209033	5	True				
ANR	5209084	CallExpression	"safe_fdopen ( f , flags )"		5209033	0					
ANR	5209085	Callee	safe_fdopen		5209033	0					
ANR	5209086	Identifier	safe_fdopen		5209033	0					
ANR	5209087	ArgumentList	f		5209033	1					
ANR	5209088	Argument	f		5209033	0					
ANR	5209089	Identifier	f		5209033	0					
ANR	5209090	Argument	flags		5209033	1					
ANR	5209091	Identifier	flags		5209033	0					
ANR	5209092	ReturnType	FILE *		5209033	1					
ANR	5209093	Identifier	safe_fcreate_keep_if_exists		5209033	2					
ANR	5209094	ParameterList	"const char * fn , const char * flags , mode_t mode"		5209033	3					
ANR	5209095	Parameter	const char * fn	113:34:3196:3209	5209033	0	True				
ANR	5209096	ParameterType	const char *		5209033	0					
ANR	5209097	Identifier	fn		5209033	1					
ANR	5209098	Parameter	const char * flags	113:50:3212:3228	5209033	1	True				
ANR	5209099	ParameterType	const char *		5209033	0					
ANR	5209100	Identifier	flags		5209033	1					
ANR	5209101	Parameter	mode_t mode	113:69:3231:3241	5209033	2	True				
ANR	5209102	ParameterType	mode_t		5209033	0					
ANR	5209103	Identifier	mode		5209033	1					
ANR	5209104	CFGEntryNode	ENTRY		5209033		True				
ANR	5209105	CFGExitNode	EXIT		5209033		True				
ANR	5209106	Symbol	mode		5209033						
ANR	5209107	Symbol	& open_flags		5209033						
ANR	5209108	Symbol	r		5209033						
ANR	5209109	Symbol	NULL		5209033						
ANR	5209110	Symbol	safe_fdopen		5209033						
ANR	5209111	Symbol	safe_create_keep_if_exists		5209033						
ANR	5209112	Symbol	f		5209033						
ANR	5209113	Symbol	fn		5209033						
ANR	5209114	Symbol	flags		5209033						
ANR	5209115	Symbol	stdio_mode_to_open_flag		5209033						
ANR	5209116	Symbol	open_flags		5209033						
ANR	5209117	Function	safe_fcreate_replace_if_exists	130:0:3517:3832							
ANR	5209118	FunctionDef	"safe_fcreate_replace_if_exists (const char * fn , const char * flags , mode_t mode)"		5209117	0					
ANR	5209119	CompoundStatement		131:0:3602:3832	5209117	0					
ANR	5209120	IdentifierDeclStatement	int open_flags ;	132:4:3608:3622	5209117	0	True				
ANR	5209121	IdentifierDecl	open_flags		5209117	0					
ANR	5209122	IdentifierDeclType	int		5209117	0					
ANR	5209123	Identifier	open_flags		5209117	1					
ANR	5209124	IdentifierDeclStatement	"int r = stdio_mode_to_open_flag ( flags , & open_flags , 1 ) ;"	133:4:3628:3682	5209117	1	True				
ANR	5209125	IdentifierDecl	"r = stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		5209117	0					
ANR	5209126	IdentifierDeclType	int		5209117	0					
ANR	5209127	Identifier	r		5209117	1					
ANR	5209128	AssignmentExpression	"r = stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		5209117	2		=			
ANR	5209129	Identifier	r		5209117	0					
ANR	5209130	CallExpression	"stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		5209117	1					
ANR	5209131	Callee	stdio_mode_to_open_flag		5209117	0					
ANR	5209132	Identifier	stdio_mode_to_open_flag		5209117	0					
ANR	5209133	ArgumentList	flags		5209117	1					
ANR	5209134	Argument	flags		5209117	0					
ANR	5209135	Identifier	flags		5209117	0					
ANR	5209136	Argument	& open_flags		5209117	1					
ANR	5209137	UnaryOperationExpression	& open_flags		5209117	0					
ANR	5209138	UnaryOperator	&		5209117	0					
ANR	5209139	Identifier	open_flags		5209117	1					
ANR	5209140	Argument	1		5209117	2					
ANR	5209141	PrimaryExpression	1		5209117	0					
ANR	5209142	IdentifierDeclStatement	int f ;	134:4:3688:3693	5209117	2	True				
ANR	5209143	IdentifierDecl	f		5209117	0					
ANR	5209144	IdentifierDeclType	int		5209117	0					
ANR	5209145	Identifier	f		5209117	1					
ANR	5209146	IfStatement	if ( r != 0 )		5209117	3					
ANR	5209147	Condition	r != 0	136:8:3704:3709	5209117	0	True				
ANR	5209148	EqualityExpression	r != 0		5209117	0		!=			
ANR	5209149	Identifier	r		5209117	0					
ANR	5209150	PrimaryExpression	0		5209117	1					
ANR	5209151	CompoundStatement		6:17:110:110	5209117	1					
ANR	5209152	ReturnStatement	return NULL ;	137:1:3716:3727	5209117	0	True				
ANR	5209153	Identifier	NULL		5209117	0					
ANR	5209154	ExpressionStatement	"f = safe_create_replace_if_exists ( fn , open_flags , mode )"	140:4:3740:3795	5209117	4	True				
ANR	5209155	AssignmentExpression	"f = safe_create_replace_if_exists ( fn , open_flags , mode )"		5209117	0		=			
ANR	5209156	Identifier	f		5209117	0					
ANR	5209157	CallExpression	"safe_create_replace_if_exists ( fn , open_flags , mode )"		5209117	1					
ANR	5209158	Callee	safe_create_replace_if_exists		5209117	0					
ANR	5209159	Identifier	safe_create_replace_if_exists		5209117	0					
ANR	5209160	ArgumentList	fn		5209117	1					
ANR	5209161	Argument	fn		5209117	0					
ANR	5209162	Identifier	fn		5209117	0					
ANR	5209163	Argument	open_flags		5209117	1					
ANR	5209164	Identifier	open_flags		5209117	0					
ANR	5209165	Argument	mode		5209117	2					
ANR	5209166	Identifier	mode		5209117	0					
ANR	5209167	ReturnStatement	"return safe_fdopen ( f , flags ) ;"	142:4:3802:3830	5209117	5	True				
ANR	5209168	CallExpression	"safe_fdopen ( f , flags )"		5209117	0					
ANR	5209169	Callee	safe_fdopen		5209117	0					
ANR	5209170	Identifier	safe_fdopen		5209117	0					
ANR	5209171	ArgumentList	f		5209117	1					
ANR	5209172	Argument	f		5209117	0					
ANR	5209173	Identifier	f		5209117	0					
ANR	5209174	Argument	flags		5209117	1					
ANR	5209175	Identifier	flags		5209117	0					
ANR	5209176	ReturnType	FILE *		5209117	1					
ANR	5209177	Identifier	safe_fcreate_replace_if_exists		5209117	2					
ANR	5209178	ParameterList	"const char * fn , const char * flags , mode_t mode"		5209117	3					
ANR	5209179	Parameter	const char * fn	130:37:3554:3567	5209117	0	True				
ANR	5209180	ParameterType	const char *		5209117	0					
ANR	5209181	Identifier	fn		5209117	1					
ANR	5209182	Parameter	const char * flags	130:53:3570:3586	5209117	1	True				
ANR	5209183	ParameterType	const char *		5209117	0					
ANR	5209184	Identifier	flags		5209117	1					
ANR	5209185	Parameter	mode_t mode	130:72:3589:3599	5209117	2	True				
ANR	5209186	ParameterType	mode_t		5209117	0					
ANR	5209187	Identifier	mode		5209117	1					
ANR	5209188	CFGEntryNode	ENTRY		5209117		True				
ANR	5209189	CFGExitNode	EXIT		5209117		True				
ANR	5209190	Symbol	mode		5209117						
ANR	5209191	Symbol	& open_flags		5209117						
ANR	5209192	Symbol	r		5209117						
ANR	5209193	Symbol	NULL		5209117						
ANR	5209194	Symbol	safe_fdopen		5209117						
ANR	5209195	Symbol	f		5209117						
ANR	5209196	Symbol	fn		5209117						
ANR	5209197	Symbol	flags		5209117						
ANR	5209198	Symbol	stdio_mode_to_open_flag		5209117						
ANR	5209199	Symbol	safe_create_replace_if_exists		5209117						
ANR	5209200	Symbol	open_flags		5209117						
ANR	5209201	Function	safe_fopen_no_create_follow	147:0:3861:4235							
ANR	5209202	FunctionDef	"safe_fopen_no_create_follow (const char * fn , const char * flags)"		5209201	0					
ANR	5209203	CompoundStatement		148:0:3930:4235	5209201	0					
ANR	5209204	IdentifierDeclStatement	int open_flags ;	149:4:3936:3950	5209201	0	True				
ANR	5209205	IdentifierDecl	open_flags		5209201	0					
ANR	5209206	IdentifierDeclType	int		5209201	0					
ANR	5209207	Identifier	open_flags		5209201	1					
ANR	5209208	IdentifierDeclStatement	"int r = stdio_mode_to_open_flag ( flags , & open_flags , 0 ) ;"	150:4:3956:4010	5209201	1	True				
ANR	5209209	IdentifierDecl	"r = stdio_mode_to_open_flag ( flags , & open_flags , 0 )"		5209201	0					
ANR	5209210	IdentifierDeclType	int		5209201	0					
ANR	5209211	Identifier	r		5209201	1					
ANR	5209212	AssignmentExpression	"r = stdio_mode_to_open_flag ( flags , & open_flags , 0 )"		5209201	2		=			
ANR	5209213	Identifier	r		5209201	0					
ANR	5209214	CallExpression	"stdio_mode_to_open_flag ( flags , & open_flags , 0 )"		5209201	1					
ANR	5209215	Callee	stdio_mode_to_open_flag		5209201	0					
ANR	5209216	Identifier	stdio_mode_to_open_flag		5209201	0					
ANR	5209217	ArgumentList	flags		5209201	1					
ANR	5209218	Argument	flags		5209201	0					
ANR	5209219	Identifier	flags		5209201	0					
ANR	5209220	Argument	& open_flags		5209201	1					
ANR	5209221	UnaryOperationExpression	& open_flags		5209201	0					
ANR	5209222	UnaryOperator	&		5209201	0					
ANR	5209223	Identifier	open_flags		5209201	1					
ANR	5209224	Argument	0		5209201	2					
ANR	5209225	PrimaryExpression	0		5209201	0					
ANR	5209226	IdentifierDeclStatement	int f ;	151:4:4016:4021	5209201	2	True				
ANR	5209227	IdentifierDecl	f		5209201	0					
ANR	5209228	IdentifierDeclType	int		5209201	0					
ANR	5209229	Identifier	f		5209201	1					
ANR	5209230	IfStatement	if ( r != 0 )		5209201	3					
ANR	5209231	Condition	r != 0	153:8:4032:4037	5209201	0	True				
ANR	5209232	EqualityExpression	r != 0		5209201	0		!=			
ANR	5209233	Identifier	r		5209201	0					
ANR	5209234	PrimaryExpression	0		5209201	1					
ANR	5209235	CompoundStatement		6:17:110:110	5209201	1					
ANR	5209236	ReturnStatement	return NULL ;	154:1:4044:4055	5209201	0	True				
ANR	5209237	Identifier	NULL		5209201	0					
ANR	5209238	ExpressionStatement	open_flags &= ~O_CREAT	158:4:4123:4145	5209201	4	True				
ANR	5209239	AssignmentExpression	open_flags &= ~O_CREAT		5209201	0		&=			
ANR	5209240	Identifier	open_flags		5209201	0					
ANR	5209241	Identifier	~O_CREAT		5209201	1					
ANR	5209242	ExpressionStatement	"f = safe_open_no_create_follow ( fn , open_flags )"	160:4:4152:4198	5209201	5	True				
ANR	5209243	AssignmentExpression	"f = safe_open_no_create_follow ( fn , open_flags )"		5209201	0		=			
ANR	5209244	Identifier	f		5209201	0					
ANR	5209245	CallExpression	"safe_open_no_create_follow ( fn , open_flags )"		5209201	1					
ANR	5209246	Callee	safe_open_no_create_follow		5209201	0					
ANR	5209247	Identifier	safe_open_no_create_follow		5209201	0					
ANR	5209248	ArgumentList	fn		5209201	1					
ANR	5209249	Argument	fn		5209201	0					
ANR	5209250	Identifier	fn		5209201	0					
ANR	5209251	Argument	open_flags		5209201	1					
ANR	5209252	Identifier	open_flags		5209201	0					
ANR	5209253	ReturnStatement	"return safe_fdopen ( f , flags ) ;"	162:4:4205:4233	5209201	6	True				
ANR	5209254	CallExpression	"safe_fdopen ( f , flags )"		5209201	0					
ANR	5209255	Callee	safe_fdopen		5209201	0					
ANR	5209256	Identifier	safe_fdopen		5209201	0					
ANR	5209257	ArgumentList	f		5209201	1					
ANR	5209258	Argument	f		5209201	0					
ANR	5209259	Identifier	f		5209201	0					
ANR	5209260	Argument	flags		5209201	1					
ANR	5209261	Identifier	flags		5209201	0					
ANR	5209262	ReturnType	FILE *		5209201	1					
ANR	5209263	Identifier	safe_fopen_no_create_follow		5209201	2					
ANR	5209264	ParameterList	"const char * fn , const char * flags"		5209201	3					
ANR	5209265	Parameter	const char * fn	147:34:3895:3908	5209201	0	True				
ANR	5209266	ParameterType	const char *		5209201	0					
ANR	5209267	Identifier	fn		5209201	1					
ANR	5209268	Parameter	const char * flags	147:50:3911:3927	5209201	1	True				
ANR	5209269	ParameterType	const char *		5209201	0					
ANR	5209270	Identifier	flags		5209201	1					
ANR	5209271	CFGEntryNode	ENTRY		5209201		True				
ANR	5209272	CFGExitNode	EXIT		5209201		True				
ANR	5209273	Symbol	safe_open_no_create_follow		5209201						
ANR	5209274	Symbol	& open_flags		5209201						
ANR	5209275	Symbol	r		5209201						
ANR	5209276	Symbol	NULL		5209201						
ANR	5209277	Symbol	safe_fdopen		5209201						
ANR	5209278	Symbol	f		5209201						
ANR	5209279	Symbol	fn		5209201						
ANR	5209280	Symbol	flags		5209201						
ANR	5209281	Symbol	stdio_mode_to_open_flag		5209201						
ANR	5209282	Symbol	~O_CREAT		5209201						
ANR	5209283	Symbol	open_flags		5209201						
ANR	5209284	Function	safe_fcreate_keep_if_exists_follow	167:0:4300:4623							
ANR	5209285	FunctionDef	"safe_fcreate_keep_if_exists_follow (const char * fn , const char * flags , mode_t mode)"		5209284	0					
ANR	5209286	CompoundStatement		168:0:4389:4623	5209284	0					
ANR	5209287	IdentifierDeclStatement	int open_flags ;	169:4:4395:4409	5209284	0	True				
ANR	5209288	IdentifierDecl	open_flags		5209284	0					
ANR	5209289	IdentifierDeclType	int		5209284	0					
ANR	5209290	Identifier	open_flags		5209284	1					
ANR	5209291	IdentifierDeclStatement	"int r = stdio_mode_to_open_flag ( flags , & open_flags , 1 ) ;"	170:4:4415:4469	5209284	1	True				
ANR	5209292	IdentifierDecl	"r = stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		5209284	0					
ANR	5209293	IdentifierDeclType	int		5209284	0					
ANR	5209294	Identifier	r		5209284	1					
ANR	5209295	AssignmentExpression	"r = stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		5209284	2		=			
ANR	5209296	Identifier	r		5209284	0					
ANR	5209297	CallExpression	"stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		5209284	1					
ANR	5209298	Callee	stdio_mode_to_open_flag		5209284	0					
ANR	5209299	Identifier	stdio_mode_to_open_flag		5209284	0					
ANR	5209300	ArgumentList	flags		5209284	1					
ANR	5209301	Argument	flags		5209284	0					
ANR	5209302	Identifier	flags		5209284	0					
ANR	5209303	Argument	& open_flags		5209284	1					
ANR	5209304	UnaryOperationExpression	& open_flags		5209284	0					
ANR	5209305	UnaryOperator	&		5209284	0					
ANR	5209306	Identifier	open_flags		5209284	1					
ANR	5209307	Argument	1		5209284	2					
ANR	5209308	PrimaryExpression	1		5209284	0					
ANR	5209309	IdentifierDeclStatement	int f ;	171:4:4475:4480	5209284	2	True				
ANR	5209310	IdentifierDecl	f		5209284	0					
ANR	5209311	IdentifierDeclType	int		5209284	0					
ANR	5209312	Identifier	f		5209284	1					
ANR	5209313	IfStatement	if ( r != 0 )		5209284	3					
ANR	5209314	Condition	r != 0	173:8:4491:4496	5209284	0	True				
ANR	5209315	EqualityExpression	r != 0		5209284	0		!=			
ANR	5209316	Identifier	r		5209284	0					
ANR	5209317	PrimaryExpression	0		5209284	1					
ANR	5209318	CompoundStatement		6:17:110:110	5209284	1					
ANR	5209319	ReturnStatement	return NULL ;	174:1:4503:4514	5209284	0	True				
ANR	5209320	Identifier	NULL		5209284	0					
ANR	5209321	ExpressionStatement	"f = safe_create_keep_if_exists_follow ( fn , open_flags , mode )"	177:4:4527:4586	5209284	4	True				
ANR	5209322	AssignmentExpression	"f = safe_create_keep_if_exists_follow ( fn , open_flags , mode )"		5209284	0		=			
ANR	5209323	Identifier	f		5209284	0					
ANR	5209324	CallExpression	"safe_create_keep_if_exists_follow ( fn , open_flags , mode )"		5209284	1					
ANR	5209325	Callee	safe_create_keep_if_exists_follow		5209284	0					
ANR	5209326	Identifier	safe_create_keep_if_exists_follow		5209284	0					
ANR	5209327	ArgumentList	fn		5209284	1					
ANR	5209328	Argument	fn		5209284	0					
ANR	5209329	Identifier	fn		5209284	0					
ANR	5209330	Argument	open_flags		5209284	1					
ANR	5209331	Identifier	open_flags		5209284	0					
ANR	5209332	Argument	mode		5209284	2					
ANR	5209333	Identifier	mode		5209284	0					
ANR	5209334	ReturnStatement	"return safe_fdopen ( f , flags ) ;"	179:4:4593:4621	5209284	5	True				
ANR	5209335	CallExpression	"safe_fdopen ( f , flags )"		5209284	0					
ANR	5209336	Callee	safe_fdopen		5209284	0					
ANR	5209337	Identifier	safe_fdopen		5209284	0					
ANR	5209338	ArgumentList	f		5209284	1					
ANR	5209339	Argument	f		5209284	0					
ANR	5209340	Identifier	f		5209284	0					
ANR	5209341	Argument	flags		5209284	1					
ANR	5209342	Identifier	flags		5209284	0					
ANR	5209343	ReturnType	FILE *		5209284	1					
ANR	5209344	Identifier	safe_fcreate_keep_if_exists_follow		5209284	2					
ANR	5209345	ParameterList	"const char * fn , const char * flags , mode_t mode"		5209284	3					
ANR	5209346	Parameter	const char * fn	167:41:4341:4354	5209284	0	True				
ANR	5209347	ParameterType	const char *		5209284	0					
ANR	5209348	Identifier	fn		5209284	1					
ANR	5209349	Parameter	const char * flags	167:57:4357:4373	5209284	1	True				
ANR	5209350	ParameterType	const char *		5209284	0					
ANR	5209351	Identifier	flags		5209284	1					
ANR	5209352	Parameter	mode_t mode	167:76:4376:4386	5209284	2	True				
ANR	5209353	ParameterType	mode_t		5209284	0					
ANR	5209354	Identifier	mode		5209284	1					
ANR	5209355	CFGEntryNode	ENTRY		5209284		True				
ANR	5209356	CFGExitNode	EXIT		5209284		True				
ANR	5209357	Symbol	mode		5209284						
ANR	5209358	Symbol	safe_create_keep_if_exists_follow		5209284						
ANR	5209359	Symbol	& open_flags		5209284						
ANR	5209360	Symbol	r		5209284						
ANR	5209361	Symbol	NULL		5209284						
ANR	5209362	Symbol	safe_fdopen		5209284						
ANR	5209363	Symbol	f		5209284						
ANR	5209364	Symbol	fn		5209284						
ANR	5209365	Symbol	flags		5209284						
ANR	5209366	Symbol	stdio_mode_to_open_flag		5209284						
ANR	5209367	Symbol	open_flags		5209284						
ANR	5209368	Function	stdio_mode_to_open_flag	194:0:5021:8288							
ANR	5209369	FunctionDef	"stdio_mode_to_open_flag (const char * flags , int * mode , int create_file)"		5209368	0					
ANR	5209370	CompoundStatement		195:0:5096:8288	5209368	0					
ANR	5209371	IdentifierDeclStatement	int plus_flag = 0 ;	196:4:5102:5120	5209368	0	True				
ANR	5209372	IdentifierDecl	plus_flag = 0		5209368	0					
ANR	5209373	IdentifierDeclType	int		5209368	0					
ANR	5209374	Identifier	plus_flag		5209368	1					
ANR	5209375	AssignmentExpression	plus_flag = 0		5209368	2		=			
ANR	5209376	Identifier	plus_flag		5209368	0					
ANR	5209377	PrimaryExpression	0		5209368	1					
ANR	5209378	IdentifierDeclStatement	char mode_char ;	197:4:5126:5140	5209368	1	True				
ANR	5209379	IdentifierDecl	mode_char		5209368	0					
ANR	5209380	IdentifierDeclType	char		5209368	0					
ANR	5209381	Identifier	mode_char		5209368	1					
ANR	5209382	IfStatement	if ( ! flags || ! mode )		5209368	2					
ANR	5209383	Condition	! flags || ! mode	199:8:5151:5165	5209368	0	True				
ANR	5209384	OrExpression	! flags || ! mode		5209368	0		||			
ANR	5209385	UnaryOperationExpression	! flags		5209368	0					
ANR	5209386	UnaryOperator	!		5209368	0					
ANR	5209387	Identifier	flags		5209368	1					
ANR	5209388	UnaryOperationExpression	! mode		5209368	1					
ANR	5209389	UnaryOperator	!		5209368	0					
ANR	5209390	Identifier	mode		5209368	1					
ANR	5209391	CompoundStatement		5:26:72:72	5209368	1					
ANR	5209392	ExpressionStatement	errno = EINVAL	200:1:5172:5186	5209368	0	True				
ANR	5209393	AssignmentExpression	errno = EINVAL		5209368	0		=			
ANR	5209394	Identifier	errno		5209368	0					
ANR	5209395	Identifier	EINVAL		5209368	1					
ANR	5209396	ReturnStatement	return - 1 ;	201:1:5189:5198	5209368	1	True				
ANR	5209397	UnaryOperationExpression	- 1		5209368	0					
ANR	5209398	UnaryOperator	-		5209368	0					
ANR	5209399	PrimaryExpression	1		5209368	1					
ANR	5209400	ExpressionStatement	* mode = 0	204:4:5211:5220	5209368	3	True				
ANR	5209401	AssignmentExpression	* mode = 0		5209368	0		=			
ANR	5209402	UnaryOperationExpression	* mode		5209368	0					
ANR	5209403	UnaryOperator	*		5209368	0					
ANR	5209404	Identifier	mode		5209368	1					
ANR	5209405	PrimaryExpression	0		5209368	1					
ANR	5209406	ExpressionStatement	mode_char = flags [ 0 ]	205:4:5226:5246	5209368	4	True				
ANR	5209407	AssignmentExpression	mode_char = flags [ 0 ]		5209368	0		=			
ANR	5209408	Identifier	mode_char		5209368	0					
ANR	5209409	ArrayIndexing	flags [ 0 ]		5209368	1					
ANR	5209410	Identifier	flags		5209368	0					
ANR	5209411	PrimaryExpression	0		5209368	1					
ANR	5209412	IfStatement	if ( mode_char == 'r' || mode_char == 'w' || mode_char == 'a' )		5209368	5					
ANR	5209413	Condition	mode_char == 'r' || mode_char == 'w' || mode_char == 'a'	207:8:5257:5312	5209368	0	True				
ANR	5209414	OrExpression	mode_char == 'r' || mode_char == 'w' || mode_char == 'a'		5209368	0		||			
ANR	5209415	EqualityExpression	mode_char == 'r'		5209368	0		==			
ANR	5209416	Identifier	mode_char		5209368	0					
ANR	5209417	PrimaryExpression	'r'		5209368	1					
ANR	5209418	OrExpression	mode_char == 'w' || mode_char == 'a'		5209368	1		||			
ANR	5209419	EqualityExpression	mode_char == 'w'		5209368	0		==			
ANR	5209420	Identifier	mode_char		5209368	0					
ANR	5209421	PrimaryExpression	'w'		5209368	1					
ANR	5209422	EqualityExpression	mode_char == 'a'		5209368	1		==			
ANR	5209423	Identifier	mode_char		5209368	0					
ANR	5209424	PrimaryExpression	'a'		5209368	1					
ANR	5209425	CompoundStatement		13:67:219:219	5209368	1					
ANR	5209426	IfStatement	if ( flags [ 1 ] == 'b' )		5209368	0					
ANR	5209427	Condition	flags [ 1 ] == 'b'	208:5:5323:5337	5209368	0	True				
ANR	5209428	EqualityExpression	flags [ 1 ] == 'b'		5209368	0		==			
ANR	5209429	ArrayIndexing	flags [ 1 ]		5209368	0					
ANR	5209430	Identifier	flags		5209368	0					
ANR	5209431	PrimaryExpression	1		5209368	1					
ANR	5209432	PrimaryExpression	'b'		5209368	1					
ANR	5209433	CompoundStatement		14:23:244:244	5209368	1					
ANR	5209434	ExpressionStatement	plus_flag = flags [ 2 ] == '+'	209:5:5348:5375	5209368	0	True				
ANR	5209435	AssignmentExpression	plus_flag = flags [ 2 ] == '+'		5209368	0		=			
ANR	5209436	Identifier	plus_flag		5209368	0					
ANR	5209437	EqualityExpression	flags [ 2 ] == '+'		5209368	1		==			
ANR	5209438	ArrayIndexing	flags [ 2 ]		5209368	0					
ANR	5209439	Identifier	flags		5209368	0					
ANR	5209440	PrimaryExpression	2		5209368	1					
ANR	5209441	PrimaryExpression	'+'		5209368	1					
ANR	5209442	ElseStatement	else		5209368	0					
ANR	5209443	CompoundStatement		16:10:290:290	5209368	0					
ANR	5209444	ExpressionStatement	plus_flag = flags [ 1 ] == '+'	211:5:5394:5421	5209368	0	True				
ANR	5209445	AssignmentExpression	plus_flag = flags [ 1 ] == '+'		5209368	0		=			
ANR	5209446	Identifier	plus_flag		5209368	0					
ANR	5209447	EqualityExpression	flags [ 1 ] == '+'		5209368	1		==			
ANR	5209448	ArrayIndexing	flags [ 1 ]		5209368	0					
ANR	5209449	Identifier	flags		5209368	0					
ANR	5209450	PrimaryExpression	1		5209368	1					
ANR	5209451	PrimaryExpression	'+'		5209368	1					
ANR	5209452	ElseStatement	else		5209368	0					
ANR	5209453	CompoundStatement		19:13:342:342	5209368	0					
ANR	5209454	ExpressionStatement	errno = EINVAL	215:1:5463:5477	5209368	0	True				
ANR	5209455	AssignmentExpression	errno = EINVAL		5209368	0		=			
ANR	5209456	Identifier	errno		5209368	0					
ANR	5209457	Identifier	EINVAL		5209368	1					
ANR	5209458	ReturnStatement	return - 1 ;	216:1:5480:5489	5209368	1	True				
ANR	5209459	UnaryOperationExpression	- 1		5209368	0					
ANR	5209460	UnaryOperator	-		5209368	0					
ANR	5209461	PrimaryExpression	1		5209368	1					
ANR	5209462	IfStatement	if ( create_file && mode_char == 'r' )		5209368	6					
ANR	5209463	Condition	create_file && mode_char == 'r'	220:8:5580:5610	5209368	0	True				
ANR	5209464	AndExpression	create_file && mode_char == 'r'		5209368	0		&&			
ANR	5209465	Identifier	create_file		5209368	0					
ANR	5209466	EqualityExpression	mode_char == 'r'		5209368	1		==			
ANR	5209467	Identifier	mode_char		5209368	0					
ANR	5209468	PrimaryExpression	'r'		5209368	1					
ANR	5209469	CompoundStatement		26:42:517:517	5209368	1					
ANR	5209470	ExpressionStatement	errno = EINVAL	221:1:5617:5631	5209368	0	True				
ANR	5209471	AssignmentExpression	errno = EINVAL		5209368	0		=			
ANR	5209472	Identifier	errno		5209368	0					
ANR	5209473	Identifier	EINVAL		5209368	1					
ANR	5209474	ReturnStatement	return - 1 ;	222:1:5634:5643	5209368	1	True				
ANR	5209475	UnaryOperationExpression	- 1		5209368	0					
ANR	5209476	UnaryOperator	-		5209368	0					
ANR	5209477	PrimaryExpression	1		5209368	1					
ANR	5209478	IfStatement	if ( mode_char != 'r' )		5209368	7					
ANR	5209479	Condition	mode_char != 'r'	226:8:5696:5711	5209368	0	True				
ANR	5209480	EqualityExpression	mode_char != 'r'		5209368	0		!=			
ANR	5209481	Identifier	mode_char		5209368	0					
ANR	5209482	PrimaryExpression	'r'		5209368	1					
ANR	5209483	CompoundStatement		32:27:618:618	5209368	1					
ANR	5209484	ExpressionStatement	* mode |= O_CREAT	227:1:5718:5734	5209368	0	True				
ANR	5209485	AssignmentExpression	* mode |= O_CREAT		5209368	0		|=			
ANR	5209486	UnaryOperationExpression	* mode		5209368	0					
ANR	5209487	UnaryOperator	*		5209368	0					
ANR	5209488	Identifier	mode		5209368	1					
ANR	5209489	Identifier	O_CREAT		5209368	1					
ANR	5209490	IfStatement	if ( plus_flag )		5209368	8					
ANR	5209491	Condition	plus_flag	230:8:5751:5759	5209368	0	True				
ANR	5209492	Identifier	plus_flag		5209368	0					
ANR	5209493	CompoundStatement		36:20:666:666	5209368	1					
ANR	5209494	ExpressionStatement	* mode |= O_RDWR	231:1:5766:5781	5209368	0	True				
ANR	5209495	AssignmentExpression	* mode |= O_RDWR		5209368	0		|=			
ANR	5209496	UnaryOperationExpression	* mode		5209368	0					
ANR	5209497	UnaryOperator	*		5209368	0					
ANR	5209498	Identifier	mode		5209368	1					
ANR	5209499	Identifier	O_RDWR		5209368	1					
ANR	5209500	ElseStatement	else		5209368	0					
ANR	5209501	IfStatement	if ( mode_char == 'r' )		5209368	0					
ANR	5209502	Condition	mode_char == 'r'	232:16:5799:5814	5209368	0	True				
ANR	5209503	EqualityExpression	mode_char == 'r'		5209368	0		==			
ANR	5209504	Identifier	mode_char		5209368	0					
ANR	5209505	PrimaryExpression	'r'		5209368	1					
ANR	5209506	CompoundStatement		38:35:721:721	5209368	1					
ANR	5209507	ExpressionStatement	* mode |= O_RDONLY	233:1:5821:5838	5209368	0	True				
ANR	5209508	AssignmentExpression	* mode |= O_RDONLY		5209368	0		|=			
ANR	5209509	UnaryOperationExpression	* mode		5209368	0					
ANR	5209510	UnaryOperator	*		5209368	0					
ANR	5209511	Identifier	mode		5209368	1					
ANR	5209512	Identifier	O_RDONLY		5209368	1					
ANR	5209513	ElseStatement	else		5209368	0					
ANR	5209514	CompoundStatement		40:14:757:757	5209368	0					
ANR	5209515	ExpressionStatement	* mode |= O_WRONLY	235:1:5888:5905	5209368	0	True				
ANR	5209516	AssignmentExpression	* mode |= O_WRONLY		5209368	0		|=			
ANR	5209517	UnaryOperationExpression	* mode		5209368	0					
ANR	5209518	UnaryOperator	*		5209368	0					
ANR	5209519	Identifier	mode		5209368	1					
ANR	5209520	Identifier	O_WRONLY		5209368	1					
ANR	5209521	IfStatement	if ( mode_char == 'a' )		5209368	9					
ANR	5209522	Condition	mode_char == 'a'	238:8:5922:5937	5209368	0	True				
ANR	5209523	EqualityExpression	mode_char == 'a'		5209368	0		==			
ANR	5209524	Identifier	mode_char		5209368	0					
ANR	5209525	PrimaryExpression	'a'		5209368	1					
ANR	5209526	CompoundStatement		44:27:844:844	5209368	1					
ANR	5209527	ExpressionStatement	* mode |= O_APPEND	239:1:5944:5961	5209368	0	True				
ANR	5209528	AssignmentExpression	* mode |= O_APPEND		5209368	0		|=			
ANR	5209529	UnaryOperationExpression	* mode		5209368	0					
ANR	5209530	UnaryOperator	*		5209368	0					
ANR	5209531	Identifier	mode		5209368	1					
ANR	5209532	Identifier	O_APPEND		5209368	1					
ANR	5209533	ElseStatement	else		5209368	0					
ANR	5209534	IfStatement	if ( mode_char == 'w' )		5209368	0					
ANR	5209535	Condition	mode_char == 'w'	240:16:5979:5994	5209368	0	True				
ANR	5209536	EqualityExpression	mode_char == 'w'		5209368	0		==			
ANR	5209537	Identifier	mode_char		5209368	0					
ANR	5209538	PrimaryExpression	'w'		5209368	1					
ANR	5209539	CompoundStatement		46:35:901:901	5209368	1					
ANR	5209540	ExpressionStatement	* mode |= O_TRUNC	241:1:6001:6017	5209368	0	True				
ANR	5209541	AssignmentExpression	* mode |= O_TRUNC		5209368	0		|=			
ANR	5209542	UnaryOperationExpression	* mode		5209368	0					
ANR	5209543	UnaryOperator	*		5209368	0					
ANR	5209544	Identifier	mode		5209368	1					
ANR	5209545	Identifier	O_TRUNC		5209368	1					
ANR	5209546	CompoundStatement		55:1:1056:1081	5209368	10					
ANR	5209547	IdentifierDeclStatement	const char * f = & flags [ 1 ] ;	249:1:6153:6178	5209368	0	True				
ANR	5209548	IdentifierDecl	* f = & flags [ 1 ]		5209368	0					
ANR	5209549	IdentifierDeclType	const char *		5209368	0					
ANR	5209550	Identifier	f		5209368	1					
ANR	5209551	AssignmentExpression	* f = & flags [ 1 ]		5209368	2		=			
ANR	5209552	Identifier	f		5209368	0					
ANR	5209553	UnaryOperationExpression	& flags [ 1 ]		5209368	1					
ANR	5209554	UnaryOperator	&		5209368	0					
ANR	5209555	ArrayIndexing	flags [ 1 ]		5209368	1					
ANR	5209556	Identifier	flags		5209368	0					
ANR	5209557	PrimaryExpression	1		5209368	1					
ANR	5209558	WhileStatement	while ( * f )		5209368	1					
ANR	5209559	Condition	* f	255:8:6356:6357	5209368	0	True				
ANR	5209560	UnaryOperationExpression	* f		5209368	0					
ANR	5209561	UnaryOperator	*		5209368	0					
ANR	5209562	Identifier	f		5209368	1					
ANR	5209563	CompoundStatement		61:13:1264:1264	5209368	1					
ANR	5209564	SwitchStatement	switch ( * f )		5209368	0					
ANR	5209565	Condition	* f	256:13:6376:6377	5209368	0	True				
ANR	5209566	UnaryOperationExpression	* f		5209368	0					
ANR	5209567	UnaryOperator	*		5209368	0					
ANR	5209568	Identifier	f		5209368	1					
ANR	5209569	CompoundStatement		62:18:1284:1284	5209368	1					
ANR	5209570	Label	case '+' :	257:5:6388:6396	5209368	0	True				
ANR	5209571	BreakStatement	break ;	259:2:6431:6436	5209368	1	True				
ANR	5209572	Label	case 'b' :	261:5:6444:6452	5209368	2	True				
ANR	5209573	ExpressionStatement	* mode |= _O_BINARY	263:2:6473:6491	5209368	3	True				
ANR	5209574	AssignmentExpression	* mode |= _O_BINARY		5209368	0		|=			
ANR	5209575	UnaryOperationExpression	* mode		5209368	0					
ANR	5209576	UnaryOperator	*		5209368	0					
ANR	5209577	Identifier	mode		5209368	1					
ANR	5209578	Identifier	_O_BINARY		5209368	1					
ANR	5209579	BreakStatement	break ;	267:2:6573:6578	5209368	4	True				
ANR	5209580	Label	case 't' :	270:5:6601:6609	5209368	5	True				
ANR	5209581	ExpressionStatement	* mode |= _O_TEXT	271:2:6613:6629	5209368	6	True				
ANR	5209582	AssignmentExpression	* mode |= _O_TEXT		5209368	0		|=			
ANR	5209583	UnaryOperationExpression	* mode		5209368	0					
ANR	5209584	UnaryOperator	*		5209368	0					
ANR	5209585	Identifier	mode		5209368	1					
ANR	5209586	Identifier	_O_TEXT		5209368	1					
ANR	5209587	BreakStatement	break ;	272:2:6633:6638	5209368	7	True				
ANR	5209588	Label	case 'S' :	276:5:6674:6682	5209368	8	True				
ANR	5209589	ExpressionStatement	* mode |= _O_SEQUENTIAL	277:2:6686:6708	5209368	9	True				
ANR	5209590	AssignmentExpression	* mode |= _O_SEQUENTIAL		5209368	0		|=			
ANR	5209591	UnaryOperationExpression	* mode		5209368	0					
ANR	5209592	UnaryOperator	*		5209368	0					
ANR	5209593	Identifier	mode		5209368	1					
ANR	5209594	Identifier	_O_SEQUENTIAL		5209368	1					
ANR	5209595	BreakStatement	break ;	278:2:6712:6717	5209368	10	True				
ANR	5209596	Label	case 'R' :	282:5:6749:6757	5209368	11	True				
ANR	5209597	ExpressionStatement	* mode |= _O_RANDOM	283:2:6761:6779	5209368	12	True				
ANR	5209598	AssignmentExpression	* mode |= _O_RANDOM		5209368	0		|=			
ANR	5209599	UnaryOperationExpression	* mode		5209368	0					
ANR	5209600	UnaryOperator	*		5209368	0					
ANR	5209601	Identifier	mode		5209368	1					
ANR	5209602	Identifier	_O_RANDOM		5209368	1					
ANR	5209603	BreakStatement	break ;	284:2:6783:6788	5209368	13	True				
ANR	5209604	Label	case 'T' :	288:5:6825:6833	5209368	14	True				
ANR	5209605	ExpressionStatement	* mode |= _O_SHORT_LIVED	289:2:6837:6860	5209368	15	True				
ANR	5209606	AssignmentExpression	* mode |= _O_SHORT_LIVED		5209368	0		|=			
ANR	5209607	UnaryOperationExpression	* mode		5209368	0					
ANR	5209608	UnaryOperator	*		5209368	0					
ANR	5209609	Identifier	mode		5209368	1					
ANR	5209610	Identifier	_O_SHORT_LIVED		5209368	1					
ANR	5209611	BreakStatement	break ;	290:2:6864:6869	5209368	16	True				
ANR	5209612	Label	case 'D' :	294:5:6904:6912	5209368	17	True				
ANR	5209613	ExpressionStatement	* mode |= _O_TEMPORARY	295:2:6916:6937	5209368	18	True				
ANR	5209614	AssignmentExpression	* mode |= _O_TEMPORARY		5209368	0		|=			
ANR	5209615	UnaryOperationExpression	* mode		5209368	0					
ANR	5209616	UnaryOperator	*		5209368	0					
ANR	5209617	Identifier	mode		5209368	1					
ANR	5209618	Identifier	_O_TEMPORARY		5209368	1					
ANR	5209619	BreakStatement	break ;	296:2:6941:6946	5209368	19	True				
ANR	5209620	Label	case 'N' :	300:5:6981:6989	5209368	20	True				
ANR	5209621	ExpressionStatement	* mode |= _O_NOINHERIT	301:2:6993:7014	5209368	21	True				
ANR	5209622	AssignmentExpression	* mode |= _O_NOINHERIT		5209368	0		|=			
ANR	5209623	UnaryOperationExpression	* mode		5209368	0					
ANR	5209624	UnaryOperator	*		5209368	0					
ANR	5209625	Identifier	mode		5209368	1					
ANR	5209626	Identifier	_O_NOINHERIT		5209368	1					
ANR	5209627	BreakStatement	break ;	302:2:7018:7023	5209368	22	True				
ANR	5209628	Label	case 'n' :	305:5:7038:7046	5209368	23	True				
ANR	5209629	BreakStatement	break ;	307:2:7093:7098	5209368	24	True				
ANR	5209630	Label	case 'c' :	309:5:7106:7114	5209368	25	True				
ANR	5209631	IfStatement	"if ( strncmp ( f , ccsStr , ccsStrLen ) != 0 )"		5209368	26					
ANR	5209632	Condition	"strncmp ( f , ccsStr , ccsStrLen ) != 0"	311:6:7185:7218	5209368	0	True				
ANR	5209633	EqualityExpression	"strncmp ( f , ccsStr , ccsStrLen ) != 0"		5209368	0		!=			
ANR	5209634	CallExpression	"strncmp ( f , ccsStr , ccsStrLen )"		5209368	0					
ANR	5209635	Callee	strncmp		5209368	0					
ANR	5209636	Identifier	strncmp		5209368	0					
ANR	5209637	ArgumentList	f		5209368	1					
ANR	5209638	Argument	f		5209368	0					
ANR	5209639	Identifier	f		5209368	0					
ANR	5209640	Argument	ccsStr		5209368	1					
ANR	5209641	Identifier	ccsStr		5209368	0					
ANR	5209642	Argument	ccsStrLen		5209368	2					
ANR	5209643	Identifier	ccsStrLen		5209368	0					
ANR	5209644	PrimaryExpression	0		5209368	1					
ANR	5209645	CompoundStatement		117:43:2125:2125	5209368	1					
ANR	5209646	BreakStatement	break ;	314:6:7284:7289	5209368	0	True				
ANR	5209647	ElseStatement	else		5209368	0					
ANR	5209648	CompoundStatement		122:11:2268:2268	5209368	0					
ANR	5209649	ExpressionStatement	f += ccsStrLen	318:6:7405:7419	5209368	0	True				
ANR	5209650	AssignmentExpression	f += ccsStrLen		5209368	0		+=			
ANR	5209651	Identifier	f		5209368	0					
ANR	5209652	Identifier	ccsStrLen		5209368	1					
ANR	5209653	IfStatement	"if ( strncmp ( f , unicodeStr , unicodeStrLen ) == 0 )"		5209368	1					
ANR	5209654	Condition	"strncmp ( f , unicodeStr , unicodeStrLen ) == 0"	320:10:7447:7488	5209368	0	True				
ANR	5209655	EqualityExpression	"strncmp ( f , unicodeStr , unicodeStrLen ) == 0"		5209368	0		==			
ANR	5209656	CallExpression	"strncmp ( f , unicodeStr , unicodeStrLen )"		5209368	0					
ANR	5209657	Callee	strncmp		5209368	0					
ANR	5209658	Identifier	strncmp		5209368	0					
ANR	5209659	ArgumentList	f		5209368	1					
ANR	5209660	Argument	f		5209368	0					
ANR	5209661	Identifier	f		5209368	0					
ANR	5209662	Argument	unicodeStr		5209368	1					
ANR	5209663	Identifier	unicodeStr		5209368	0					
ANR	5209664	Argument	unicodeStrLen		5209368	2					
ANR	5209665	Identifier	unicodeStrLen		5209368	0					
ANR	5209666	PrimaryExpression	0		5209368	1					
ANR	5209667	CompoundStatement		126:55:2395:2395	5209368	1					
ANR	5209668	ExpressionStatement	f += unicodeStrLen - 1	322:3:7533:7555	5209368	0	True				
ANR	5209669	AssignmentExpression	f += unicodeStrLen - 1		5209368	0		+=			
ANR	5209670	Identifier	f		5209368	0					
ANR	5209671	AdditiveExpression	unicodeStrLen - 1		5209368	1		-			
ANR	5209672	Identifier	unicodeStrLen		5209368	0					
ANR	5209673	PrimaryExpression	1		5209368	1					
ANR	5209674	ExpressionStatement	* mode |= _O_WTEXT	323:3:7560:7577	5209368	1	True				
ANR	5209675	AssignmentExpression	* mode |= _O_WTEXT		5209368	0		|=			
ANR	5209676	UnaryOperationExpression	* mode		5209368	0					
ANR	5209677	UnaryOperator	*		5209368	0					
ANR	5209678	Identifier	mode		5209368	1					
ANR	5209679	Identifier	_O_WTEXT		5209368	1					
ANR	5209680	BreakStatement	break ;	324:3:7582:7587	5209368	2	True				
ANR	5209681	IfStatement	"if ( strncmp ( f , utf8Str , utf8StrLen ) == 0 )"		5209368	2					
ANR	5209682	Condition	"strncmp ( f , utf8Str , utf8StrLen ) == 0"	328:10:7629:7664	5209368	0	True				
ANR	5209683	EqualityExpression	"strncmp ( f , utf8Str , utf8StrLen ) == 0"		5209368	0		==			
ANR	5209684	CallExpression	"strncmp ( f , utf8Str , utf8StrLen )"		5209368	0					
ANR	5209685	Callee	strncmp		5209368	0					
ANR	5209686	Identifier	strncmp		5209368	0					
ANR	5209687	ArgumentList	f		5209368	1					
ANR	5209688	Argument	f		5209368	0					
ANR	5209689	Identifier	f		5209368	0					
ANR	5209690	Argument	utf8Str		5209368	1					
ANR	5209691	Identifier	utf8Str		5209368	0					
ANR	5209692	Argument	utf8StrLen		5209368	2					
ANR	5209693	Identifier	utf8StrLen		5209368	0					
ANR	5209694	PrimaryExpression	0		5209368	1					
ANR	5209695	CompoundStatement		134:49:2571:2571	5209368	1					
ANR	5209696	ExpressionStatement	f += utf8StrLen - 1	330:3:7706:7725	5209368	0	True				
ANR	5209697	AssignmentExpression	f += utf8StrLen - 1		5209368	0		+=			
ANR	5209698	Identifier	f		5209368	0					
ANR	5209699	AdditiveExpression	utf8StrLen - 1		5209368	1		-			
ANR	5209700	Identifier	utf8StrLen		5209368	0					
ANR	5209701	PrimaryExpression	1		5209368	1					
ANR	5209702	ExpressionStatement	* mode |= _O_UTF8	331:3:7730:7746	5209368	1	True				
ANR	5209703	AssignmentExpression	* mode |= _O_UTF8		5209368	0		|=			
ANR	5209704	UnaryOperationExpression	* mode		5209368	0					
ANR	5209705	UnaryOperator	*		5209368	0					
ANR	5209706	Identifier	mode		5209368	1					
ANR	5209707	Identifier	_O_UTF8		5209368	1					
ANR	5209708	BreakStatement	break ;	332:3:7751:7756	5209368	2	True				
ANR	5209709	IfStatement	"if ( strncmp ( f , utf16Str , utf16StrLen ) == 0 )"		5209368	3					
ANR	5209710	Condition	"strncmp ( f , utf16Str , utf16StrLen ) == 0"	336:10:7799:7836	5209368	0	True				
ANR	5209711	EqualityExpression	"strncmp ( f , utf16Str , utf16StrLen ) == 0"		5209368	0		==			
ANR	5209712	CallExpression	"strncmp ( f , utf16Str , utf16StrLen )"		5209368	0					
ANR	5209713	Callee	strncmp		5209368	0					
ANR	5209714	Identifier	strncmp		5209368	0					
ANR	5209715	ArgumentList	f		5209368	1					
ANR	5209716	Argument	f		5209368	0					
ANR	5209717	Identifier	f		5209368	0					
ANR	5209718	Argument	utf16Str		5209368	1					
ANR	5209719	Identifier	utf16Str		5209368	0					
ANR	5209720	Argument	utf16StrLen		5209368	2					
ANR	5209721	Identifier	utf16StrLen		5209368	0					
ANR	5209722	PrimaryExpression	0		5209368	1					
ANR	5209723	CompoundStatement		142:51:2743:2743	5209368	1					
ANR	5209724	ExpressionStatement	f += utf16StrLen - 1	338:3:7881:7901	5209368	0	True				
ANR	5209725	AssignmentExpression	f += utf16StrLen - 1		5209368	0		+=			
ANR	5209726	Identifier	f		5209368	0					
ANR	5209727	AdditiveExpression	utf16StrLen - 1		5209368	1		-			
ANR	5209728	Identifier	utf16StrLen		5209368	0					
ANR	5209729	PrimaryExpression	1		5209368	1					
ANR	5209730	ExpressionStatement	* mode |= _O_UTF16	339:3:7906:7923	5209368	1	True				
ANR	5209731	AssignmentExpression	* mode |= _O_UTF16		5209368	0		|=			
ANR	5209732	UnaryOperationExpression	* mode		5209368	0					
ANR	5209733	UnaryOperator	*		5209368	0					
ANR	5209734	Identifier	mode		5209368	1					
ANR	5209735	Identifier	_O_UTF16		5209368	1					
ANR	5209736	BreakStatement	break ;	340:3:7928:7933	5209368	2	True				
ANR	5209737	ExpressionStatement	errno = EINVAL	344:6:7996:8010	5209368	4	True				
ANR	5209738	AssignmentExpression	errno = EINVAL		5209368	0		=			
ANR	5209739	Identifier	errno		5209368	0					
ANR	5209740	Identifier	EINVAL		5209368	1					
ANR	5209741	ReturnStatement	return - 1 ;	345:6:8018:8027	5209368	5	True				
ANR	5209742	UnaryOperationExpression	- 1		5209368	0					
ANR	5209743	UnaryOperator	-		5209368	0					
ANR	5209744	PrimaryExpression	1		5209368	1					
ANR	5209745	ExpressionStatement	errno = EINVAL	348:2:8071:8085	5209368	27	True				
ANR	5209746	AssignmentExpression	errno = EINVAL		5209368	0		=			
ANR	5209747	Identifier	errno		5209368	0					
ANR	5209748	Identifier	EINVAL		5209368	1					
ANR	5209749	ReturnStatement	return - 1 ;	349:2:8089:8098	5209368	28	True				
ANR	5209750	UnaryOperationExpression	- 1		5209368	0					
ANR	5209751	UnaryOperator	-		5209368	0					
ANR	5209752	PrimaryExpression	1		5209368	1					
ANR	5209753	Label	"case ',' :"	352:5:8113:8121	5209368	29	True				
ANR	5209754	BreakStatement	break ;	354:2:8190:8195	5209368	30	True				
ANR	5209755	Label	default :	356:5:8203:8210	5209368	31	True				
ANR	5209756	Identifier	default		5209368	0					
ANR	5209757	ExpressionStatement	errno = EINVAL	357:2:8214:8228	5209368	32	True				
ANR	5209758	AssignmentExpression	errno = EINVAL		5209368	0		=			
ANR	5209759	Identifier	errno		5209368	0					
ANR	5209760	Identifier	EINVAL		5209368	1					
ANR	5209761	ReturnStatement	return - 1 ;	358:2:8232:8241	5209368	33	True				
ANR	5209762	UnaryOperationExpression	- 1		5209368	0					
ANR	5209763	UnaryOperator	-		5209368	0					
ANR	5209764	PrimaryExpression	1		5209368	1					
ANR	5209765	ExpressionStatement	++ f	361:1:8252:8255	5209368	1	True				
ANR	5209766	UnaryExpression	++ f		5209368	0					
ANR	5209767	IncDec	++		5209368	0					
ANR	5209768	Identifier	f		5209368	1					
ANR	5209769	ReturnStatement	return 0 ;	366:4:8278:8286	5209368	11	True				
ANR	5209770	PrimaryExpression	0		5209368	0					
ANR	5209771	ReturnType	int		5209368	1					
ANR	5209772	Identifier	stdio_mode_to_open_flag		5209368	2					
ANR	5209773	ParameterList	"const char * flags , int * mode , int create_file"		5209368	3					
ANR	5209774	Parameter	const char * flags	194:28:5049:5065	5209368	0	True				
ANR	5209775	ParameterType	const char *		5209368	0					
ANR	5209776	Identifier	flags		5209368	1					
ANR	5209777	Parameter	int * mode	194:47:5068:5076	5209368	1	True				
ANR	5209778	ParameterType	int *		5209368	0					
ANR	5209779	Identifier	mode		5209368	1					
ANR	5209780	Parameter	int create_file	194:58:5079:5093	5209368	2	True				
ANR	5209781	ParameterType	int		5209368	0					
ANR	5209782	Identifier	create_file		5209368	1					
ANR	5209783	CFGEntryNode	ENTRY		5209368		True				
ANR	5209784	CFGExitNode	EXIT		5209368		True				
ANR	5209785	Symbol	_O_UTF8		5209368						
ANR	5209786	Symbol	mode_char		5209368						
ANR	5209787	Symbol	O_CREAT		5209368						
ANR	5209788	Symbol	ccsStr		5209368						
ANR	5209789	Symbol	flags		5209368						
ANR	5209790	Symbol	_O_BINARY		5209368						
ANR	5209791	Symbol	mode		5209368						
ANR	5209792	Symbol	create_file		5209368						
ANR	5209793	Symbol	strncmp		5209368						
ANR	5209794	Symbol	O_RDWR		5209368						
ANR	5209795	Symbol	utf16Str		5209368						
ANR	5209796	Symbol	utf8StrLen		5209368						
ANR	5209797	Symbol	_O_TEXT		5209368						
ANR	5209798	Symbol	plus_flag		5209368						
ANR	5209799	Symbol	* flags		5209368						
ANR	5209800	Symbol	errno		5209368						
ANR	5209801	Symbol	unicodeStr		5209368						
ANR	5209802	Symbol	utf8Str		5209368						
ANR	5209803	Symbol	_O_NOINHERIT		5209368						
ANR	5209804	Symbol	_O_RANDOM		5209368						
ANR	5209805	Symbol	utf16StrLen		5209368						
ANR	5209806	Symbol	f		5209368						
ANR	5209807	Symbol	ccsStrLen		5209368						
ANR	5209808	Symbol	_O_SHORT_LIVED		5209368						
ANR	5209809	Symbol	_O_TEMPORARY		5209368						
ANR	5209810	Symbol	O_APPEND		5209368						
ANR	5209811	Symbol	EINVAL		5209368						
ANR	5209812	Symbol	* f		5209368						
ANR	5209813	Symbol	_O_UTF16		5209368						
ANR	5209814	Symbol	O_TRUNC		5209368						
ANR	5209815	Symbol	O_RDONLY		5209368						
ANR	5209816	Symbol	* mode		5209368						
ANR	5209817	Symbol	unicodeStrLen		5209368						
ANR	5209818	Symbol	O_WRONLY		5209368						
ANR	5209819	Symbol	_O_WTEXT		5209368						
ANR	5209820	Symbol	_O_SEQUENTIAL		5209368						
ANR	5209821	Function	fix_stdio_fdopen_mode_on_windows	375:0:8427:10190							
ANR	5209822	FunctionDef	fix_stdio_fdopen_mode_on_windows (const char * flags)		5209821	0					
ANR	5209823	CompoundStatement		376:0:8485:10190	5209821	0					
ANR	5209824	IdentifierDeclStatement	const char * from ;	377:4:8491:8507	5209821	0	True				
ANR	5209825	IdentifierDecl	* from		5209821	0					
ANR	5209826	IdentifierDeclType	const char *		5209821	0					
ANR	5209827	Identifier	from		5209821	1					
ANR	5209828	IdentifierDeclStatement	char * new_flags ;	378:4:8513:8528	5209821	1	True				
ANR	5209829	IdentifierDecl	* new_flags		5209821	0					
ANR	5209830	IdentifierDeclType	char *		5209821	0					
ANR	5209831	Identifier	new_flags		5209821	1					
ANR	5209832	IdentifierDeclStatement	char * to ;	379:4:8534:8542	5209821	2	True				
ANR	5209833	IdentifierDecl	* to		5209821	0					
ANR	5209834	IdentifierDeclType	char *		5209821	0					
ANR	5209835	Identifier	to		5209821	1					
ANR	5209836	IfStatement	if ( flags == NULL )		5209821	3					
ANR	5209837	Condition	flags == NULL	381:8:8553:8565	5209821	0	True				
ANR	5209838	EqualityExpression	flags == NULL		5209821	0		==			
ANR	5209839	Identifier	flags		5209821	0					
ANR	5209840	Identifier	NULL		5209821	1					
ANR	5209841	CompoundStatement		6:24:83:83	5209821	1					
ANR	5209842	ExpressionStatement	errno = EINVAL	382:1:8572:8586	5209821	0	True				
ANR	5209843	AssignmentExpression	errno = EINVAL		5209821	0		=			
ANR	5209844	Identifier	errno		5209821	0					
ANR	5209845	Identifier	EINVAL		5209821	1					
ANR	5209846	ReturnStatement	return NULL ;	383:1:8589:8600	5209821	1	True				
ANR	5209847	Identifier	NULL		5209821	0					
ANR	5209848	ExpressionStatement	new_flags = malloc ( strlen ( flags ) + 1 )	386:4:8613:8650	5209821	4	True				
ANR	5209849	AssignmentExpression	new_flags = malloc ( strlen ( flags ) + 1 )		5209821	0		=			
ANR	5209850	Identifier	new_flags		5209821	0					
ANR	5209851	CallExpression	malloc ( strlen ( flags ) + 1 )		5209821	1					
ANR	5209852	Callee	malloc		5209821	0					
ANR	5209853	Identifier	malloc		5209821	0					
ANR	5209854	ArgumentList	strlen ( flags ) + 1		5209821	1					
ANR	5209855	Argument	strlen ( flags ) + 1		5209821	0					
ANR	5209856	AdditiveExpression	strlen ( flags ) + 1		5209821	0		+			
ANR	5209857	CallExpression	strlen ( flags )		5209821	0					
ANR	5209858	Callee	strlen		5209821	0					
ANR	5209859	Identifier	strlen		5209821	0					
ANR	5209860	ArgumentList	flags		5209821	1					
ANR	5209861	Argument	flags		5209821	0					
ANR	5209862	Identifier	flags		5209821	0					
ANR	5209863	PrimaryExpression	1		5209821	1					
ANR	5209864	IfStatement	if ( new_flags == NULL )		5209821	5					
ANR	5209865	Condition	new_flags == NULL	387:8:8660:8676	5209821	0	True				
ANR	5209866	EqualityExpression	new_flags == NULL		5209821	0		==			
ANR	5209867	Identifier	new_flags		5209821	0					
ANR	5209868	Identifier	NULL		5209821	1					
ANR	5209869	CompoundStatement		12:28:194:194	5209821	1					
ANR	5209870	ReturnStatement	return NULL ;	388:1:8683:8694	5209821	0	True				
ANR	5209871	Identifier	NULL		5209821	0					
ANR	5209872	ExpressionStatement	from = flags	391:4:8707:8719	5209821	6	True				
ANR	5209873	AssignmentExpression	from = flags		5209821	0		=			
ANR	5209874	Identifier	from		5209821	0					
ANR	5209875	Identifier	flags		5209821	1					
ANR	5209876	ExpressionStatement	to = new_flags	392:4:8725:8739	5209821	7	True				
ANR	5209877	AssignmentExpression	to = new_flags		5209821	0		=			
ANR	5209878	Identifier	to		5209821	0					
ANR	5209879	Identifier	new_flags		5209821	1					
ANR	5209880	DoStatement	do		5209821	8					
ANR	5209881	CompoundStatement		19:8:264:264	5209821	0					
ANR	5209882	SwitchStatement	switch ( * from )		5209821	0					
ANR	5209883	Condition	* from	395:9:8761:8765	5209821	0	True				
ANR	5209884	UnaryOperationExpression	* from		5209821	0					
ANR	5209885	UnaryOperator	*		5209821	0					
ANR	5209886	Identifier	from		5209821	1					
ANR	5209887	CompoundStatement		20:17:283:283	5209821	1					
ANR	5209888	Label	case 'N' :	396:1:8772:8780	5209821	0	True				
ANR	5209889	ExpressionStatement	++ from	398:5:8834:8840	5209821	1	True				
ANR	5209890	UnaryExpression	++ from		5209821	0					
ANR	5209891	IncDec	++		5209821	0					
ANR	5209892	Identifier	from		5209821	1					
ANR	5209893	BreakStatement	break ;	399:5:8847:8852	5209821	2	True				
ANR	5209894	Label	case 'c' :	401:1:8856:8864	5209821	3	True				
ANR	5209895	IfStatement	"if ( strncmp ( from , ccsStr , ccsStrLen ) != 0 )"		5209821	4					
ANR	5209896	Condition	"strncmp ( from , ccsStr , ccsStrLen ) != 0"	403:9:8938:8974	5209821	0	True				
ANR	5209897	EqualityExpression	"strncmp ( from , ccsStr , ccsStrLen ) != 0"		5209821	0		!=			
ANR	5209898	CallExpression	"strncmp ( from , ccsStr , ccsStrLen )"		5209821	0					
ANR	5209899	Callee	strncmp		5209821	0					
ANR	5209900	Identifier	strncmp		5209821	0					
ANR	5209901	ArgumentList	from		5209821	1					
ANR	5209902	Argument	from		5209821	0					
ANR	5209903	Identifier	from		5209821	0					
ANR	5209904	Argument	ccsStr		5209821	1					
ANR	5209905	Identifier	ccsStr		5209821	0					
ANR	5209906	Argument	ccsStrLen		5209821	2					
ANR	5209907	Identifier	ccsStrLen		5209821	0					
ANR	5209908	PrimaryExpression	0		5209821	1					
ANR	5209909	CompoundStatement		28:49:492:492	5209821	1					
ANR	5209910	ExpressionStatement	* to ++ = * from ++	406:2:9032:9047	5209821	0	True				
ANR	5209911	AssignmentExpression	* to ++ = * from ++		5209821	0		=			
ANR	5209912	UnaryOperationExpression	* to ++		5209821	0					
ANR	5209913	UnaryOperator	*		5209821	0					
ANR	5209914	PostIncDecOperationExpression	to ++		5209821	1					
ANR	5209915	Identifier	to		5209821	0					
ANR	5209916	IncDec	++		5209821	1					
ANR	5209917	UnaryOperationExpression	* from ++		5209821	1					
ANR	5209918	UnaryOperator	*		5209821	0					
ANR	5209919	PostIncDecOperationExpression	from ++		5209821	1					
ANR	5209920	Identifier	from		5209821	0					
ANR	5209921	IncDec	++		5209821	1					
ANR	5209922	BreakStatement	break ;	407:2:9051:9056	5209821	1	True				
ANR	5209923	ElseStatement	else		5209821	0					
ANR	5209924	CompoundStatement		34:14:649:649	5209821	0					
ANR	5209925	ExpressionStatement	"memcpy ( to , ccsStr , ccsStrLen )"	411:2:9167:9196	5209821	0	True				
ANR	5209926	CallExpression	"memcpy ( to , ccsStr , ccsStrLen )"		5209821	0					
ANR	5209927	Callee	memcpy		5209821	0					
ANR	5209928	Identifier	memcpy		5209821	0					
ANR	5209929	ArgumentList	to		5209821	1					
ANR	5209930	Argument	to		5209821	0					
ANR	5209931	Identifier	to		5209821	0					
ANR	5209932	Argument	ccsStr		5209821	1					
ANR	5209933	Identifier	ccsStr		5209821	0					
ANR	5209934	Argument	ccsStrLen		5209821	2					
ANR	5209935	Identifier	ccsStrLen		5209821	0					
ANR	5209936	ExpressionStatement	from += ccsStrLen	412:2:9200:9217	5209821	1	True				
ANR	5209937	AssignmentExpression	from += ccsStrLen		5209821	0		+=			
ANR	5209938	Identifier	from		5209821	0					
ANR	5209939	Identifier	ccsStrLen		5209821	1					
ANR	5209940	ExpressionStatement	to += ccsStrLen	413:2:9221:9236	5209821	2	True				
ANR	5209941	AssignmentExpression	to += ccsStrLen		5209821	0		+=			
ANR	5209942	Identifier	to		5209821	0					
ANR	5209943	Identifier	ccsStrLen		5209821	1					
ANR	5209944	IfStatement	"if ( strncmp ( from , unicodeStr , unicodeStrLen ) == 0 )"		5209821	3					
ANR	5209945	Condition	"strncmp ( from , unicodeStr , unicodeStrLen ) == 0"	415:6:9260:9304	5209821	0	True				
ANR	5209946	EqualityExpression	"strncmp ( from , unicodeStr , unicodeStrLen ) == 0"		5209821	0		==			
ANR	5209947	CallExpression	"strncmp ( from , unicodeStr , unicodeStrLen )"		5209821	0					
ANR	5209948	Callee	strncmp		5209821	0					
ANR	5209949	Identifier	strncmp		5209821	0					
ANR	5209950	ArgumentList	from		5209821	1					
ANR	5209951	Argument	from		5209821	0					
ANR	5209952	Identifier	from		5209821	0					
ANR	5209953	Argument	unicodeStr		5209821	1					
ANR	5209954	Identifier	unicodeStr		5209821	0					
ANR	5209955	Argument	unicodeStrLen		5209821	2					
ANR	5209956	Identifier	unicodeStrLen		5209821	0					
ANR	5209957	PrimaryExpression	0		5209821	1					
ANR	5209958	CompoundStatement		40:54:822:822	5209821	1					
ANR	5209959	ExpressionStatement	"memcpy ( to , unicodeStr , unicodeStrLen )"	417:6:9355:9392	5209821	0	True				
ANR	5209960	CallExpression	"memcpy ( to , unicodeStr , unicodeStrLen )"		5209821	0					
ANR	5209961	Callee	memcpy		5209821	0					
ANR	5209962	Identifier	memcpy		5209821	0					
ANR	5209963	ArgumentList	to		5209821	1					
ANR	5209964	Argument	to		5209821	0					
ANR	5209965	Identifier	to		5209821	0					
ANR	5209966	Argument	unicodeStr		5209821	1					
ANR	5209967	Identifier	unicodeStr		5209821	0					
ANR	5209968	Argument	unicodeStrLen		5209821	2					
ANR	5209969	Identifier	unicodeStrLen		5209821	0					
ANR	5209970	ExpressionStatement	from += unicodeStrLen	418:6:9400:9421	5209821	1	True				
ANR	5209971	AssignmentExpression	from += unicodeStrLen		5209821	0		+=			
ANR	5209972	Identifier	from		5209821	0					
ANR	5209973	Identifier	unicodeStrLen		5209821	1					
ANR	5209974	ExpressionStatement	to += unicodeStrLen	419:6:9429:9448	5209821	2	True				
ANR	5209975	AssignmentExpression	to += unicodeStrLen		5209821	0		+=			
ANR	5209976	Identifier	to		5209821	0					
ANR	5209977	Identifier	unicodeStrLen		5209821	1					
ANR	5209978	IfStatement	"if ( strncmp ( from , utf8Str , utf8StrLen ) == 0 )"		5209821	4					
ANR	5209979	Condition	"strncmp ( from , utf8Str , utf8StrLen ) == 0"	423:6:9482:9520	5209821	0	True				
ANR	5209980	EqualityExpression	"strncmp ( from , utf8Str , utf8StrLen ) == 0"		5209821	0		==			
ANR	5209981	CallExpression	"strncmp ( from , utf8Str , utf8StrLen )"		5209821	0					
ANR	5209982	Callee	strncmp		5209821	0					
ANR	5209983	Identifier	strncmp		5209821	0					
ANR	5209984	ArgumentList	from		5209821	1					
ANR	5209985	Argument	from		5209821	0					
ANR	5209986	Identifier	from		5209821	0					
ANR	5209987	Argument	utf8Str		5209821	1					
ANR	5209988	Identifier	utf8Str		5209821	0					
ANR	5209989	Argument	utf8StrLen		5209821	2					
ANR	5209990	Identifier	utf8StrLen		5209821	0					
ANR	5209991	PrimaryExpression	0		5209821	1					
ANR	5209992	CompoundStatement		48:48:1038:1038	5209821	1					
ANR	5209993	ExpressionStatement	"memcpy ( to , utf8Str , utf8StrLen )"	425:6:9568:9599	5209821	0	True				
ANR	5209994	CallExpression	"memcpy ( to , utf8Str , utf8StrLen )"		5209821	0					
ANR	5209995	Callee	memcpy		5209821	0					
ANR	5209996	Identifier	memcpy		5209821	0					
ANR	5209997	ArgumentList	to		5209821	1					
ANR	5209998	Argument	to		5209821	0					
ANR	5209999	Identifier	to		5209821	0					
ANR	5210000	Argument	utf8Str		5209821	1					
ANR	5210001	Identifier	utf8Str		5209821	0					
ANR	5210002	Argument	utf8StrLen		5209821	2					
ANR	5210003	Identifier	utf8StrLen		5209821	0					
ANR	5210004	ExpressionStatement	from += utf8StrLen	426:6:9607:9625	5209821	1	True				
ANR	5210005	AssignmentExpression	from += utf8StrLen		5209821	0		+=			
ANR	5210006	Identifier	from		5209821	0					
ANR	5210007	Identifier	utf8StrLen		5209821	1					
ANR	5210008	ExpressionStatement	to += utf8StrLen	427:6:9633:9649	5209821	2	True				
ANR	5210009	AssignmentExpression	to += utf8StrLen		5209821	0		+=			
ANR	5210010	Identifier	to		5209821	0					
ANR	5210011	Identifier	utf8StrLen		5209821	1					
ANR	5210012	BreakStatement	break ;	428:6:9657:9662	5209821	3	True				
ANR	5210013	IfStatement	"if ( strncmp ( from , utf16Str , utf16StrLen ) == 0 )"		5209821	5					
ANR	5210014	Condition	"strncmp ( from , utf16Str , utf16StrLen ) == 0"	432:6:9697:9737	5209821	0	True				
ANR	5210015	EqualityExpression	"strncmp ( from , utf16Str , utf16StrLen ) == 0"		5209821	0		==			
ANR	5210016	CallExpression	"strncmp ( from , utf16Str , utf16StrLen )"		5209821	0					
ANR	5210017	Callee	strncmp		5209821	0					
ANR	5210018	Identifier	strncmp		5209821	0					
ANR	5210019	ArgumentList	from		5209821	1					
ANR	5210020	Argument	from		5209821	0					
ANR	5210021	Identifier	from		5209821	0					
ANR	5210022	Argument	utf16Str		5209821	1					
ANR	5210023	Identifier	utf16Str		5209821	0					
ANR	5210024	Argument	utf16StrLen		5209821	2					
ANR	5210025	Identifier	utf16StrLen		5209821	0					
ANR	5210026	PrimaryExpression	0		5209821	1					
ANR	5210027	CompoundStatement		57:50:1255:1255	5209821	1					
ANR	5210028	ExpressionStatement	"memcpy ( to , utf16Str , utf16StrLen )"	434:6:9788:9821	5209821	0	True				
ANR	5210029	CallExpression	"memcpy ( to , utf16Str , utf16StrLen )"		5209821	0					
ANR	5210030	Callee	memcpy		5209821	0					
ANR	5210031	Identifier	memcpy		5209821	0					
ANR	5210032	ArgumentList	to		5209821	1					
ANR	5210033	Argument	to		5209821	0					
ANR	5210034	Identifier	to		5209821	0					
ANR	5210035	Argument	utf16Str		5209821	1					
ANR	5210036	Identifier	utf16Str		5209821	0					
ANR	5210037	Argument	utf16StrLen		5209821	2					
ANR	5210038	Identifier	utf16StrLen		5209821	0					
ANR	5210039	ExpressionStatement	from += utf16StrLen	435:6:9829:9848	5209821	1	True				
ANR	5210040	AssignmentExpression	from += utf16StrLen		5209821	0		+=			
ANR	5210041	Identifier	from		5209821	0					
ANR	5210042	Identifier	utf16StrLen		5209821	1					
ANR	5210043	ExpressionStatement	to += utf16StrLen	436:6:9856:9873	5209821	2	True				
ANR	5210044	AssignmentExpression	to += utf16StrLen		5209821	0		+=			
ANR	5210045	Identifier	to		5209821	0					
ANR	5210046	Identifier	utf16StrLen		5209821	1					
ANR	5210047	BreakStatement	break ;	437:6:9881:9886	5209821	3	True				
ANR	5210048	ExpressionStatement	errno = EINVAL	441:2:9937:9951	5209821	6	True				
ANR	5210049	AssignmentExpression	errno = EINVAL		5209821	0		=			
ANR	5210050	Identifier	errno		5209821	0					
ANR	5210051	Identifier	EINVAL		5209821	1					
ANR	5210052	ExpressionStatement	free ( new_flags )	442:2:9955:9970	5209821	7	True				
ANR	5210053	CallExpression	free ( new_flags )		5209821	0					
ANR	5210054	Callee	free		5209821	0					
ANR	5210055	Identifier	free		5209821	0					
ANR	5210056	ArgumentList	new_flags		5209821	1					
ANR	5210057	Argument	new_flags		5209821	0					
ANR	5210058	Identifier	new_flags		5209821	0					
ANR	5210059	ReturnStatement	return NULL ;	443:2:9974:9985	5209821	8	True				
ANR	5210060	Identifier	NULL		5209821	0					
ANR	5210061	Label	default :	446:1:10002:10009	5209821	5	True				
ANR	5210062	Identifier	default		5209821	0					
ANR	5210063	ExpressionStatement	* to ++ = * from ++	448:5:10053:10068	5209821	6	True				
ANR	5210064	AssignmentExpression	* to ++ = * from ++		5209821	0		=			
ANR	5210065	UnaryOperationExpression	* to ++		5209821	0					
ANR	5210066	UnaryOperator	*		5209821	0					
ANR	5210067	PostIncDecOperationExpression	to ++		5209821	1					
ANR	5210068	Identifier	to		5209821	0					
ANR	5210069	IncDec	++		5209821	1					
ANR	5210070	UnaryOperationExpression	* from ++		5209821	1					
ANR	5210071	UnaryOperator	*		5209821	0					
ANR	5210072	PostIncDecOperationExpression	from ++		5209821	1					
ANR	5210073	Identifier	from		5209821	0					
ANR	5210074	IncDec	++		5209821	1					
ANR	5210075	BreakStatement	break ;	449:5:10075:10080	5209821	7	True				
ANR	5210076	Condition	* from	451:14:10099:10103	5209821	1	True				
ANR	5210077	UnaryOperationExpression	* from		5209821	0					
ANR	5210078	UnaryOperator	*		5209821	0					
ANR	5210079	Identifier	from		5209821	1					
ANR	5210080	ExpressionStatement	* to = 0	454:4:10158:10165	5209821	9	True				
ANR	5210081	AssignmentExpression	* to = 0		5209821	0		=			
ANR	5210082	UnaryOperationExpression	* to		5209821	0					
ANR	5210083	UnaryOperator	*		5209821	0					
ANR	5210084	Identifier	to		5209821	1					
ANR	5210085	PrimaryExpression	0		5209821	1					
ANR	5210086	ReturnStatement	return new_flags ;	456:4:10172:10188	5209821	10	True				
ANR	5210087	Identifier	new_flags		5209821	0					
ANR	5210088	ReturnType	char *		5209821	1					
ANR	5210089	Identifier	fix_stdio_fdopen_mode_on_windows		5209821	2					
ANR	5210090	ParameterList	const char * flags		5209821	3					
ANR	5210091	Parameter	const char * flags	375:39:8466:8482	5209821	0	True				
ANR	5210092	ParameterType	const char *		5209821	0					
ANR	5210093	Identifier	flags		5209821	1					
ANR	5210094	CFGEntryNode	ENTRY		5209821		True				
ANR	5210095	CFGExitNode	EXIT		5209821		True				
ANR	5210096	Symbol	malloc		5209821						
ANR	5210097	Symbol	errno		5209821						
ANR	5210098	Symbol	* to		5209821						
ANR	5210099	Symbol	NULL		5209821						
ANR	5210100	Symbol	unicodeStr		5209821						
ANR	5210101	Symbol	utf8Str		5209821						
ANR	5210102	Symbol	utf16StrLen		5209821						
ANR	5210103	Symbol	ccsStr		5209821						
ANR	5210104	Symbol	ccsStrLen		5209821						
ANR	5210105	Symbol	flags		5209821						
ANR	5210106	Symbol	EINVAL		5209821						
ANR	5210107	Symbol	strlen		5209821						
ANR	5210108	Symbol	strncmp		5209821						
ANR	5210109	Symbol	* from ++		5209821						
ANR	5210110	Symbol	utf16Str		5209821						
ANR	5210111	Symbol	utf8StrLen		5209821						
ANR	5210112	Symbol	new_flags		5209821						
ANR	5210113	Symbol	* to ++		5209821						
ANR	5210114	Symbol	from		5209821						
ANR	5210115	Symbol	unicodeStrLen		5209821						
ANR	5210116	Symbol	to		5209821						
ANR	5210117	Symbol	* from		5209821						
ANR	5210118	Function	safe_fdopen	465:0:10326:10779							
ANR	5210119	FunctionDef	"safe_fdopen (int fd , const char * flags)"		5210118	0					
ANR	5210120	CompoundStatement		466:0:10371:10779	5210118	0					
ANR	5210121	IdentifierDeclStatement	FILE * F ;	467:4:10377:10384	5210118	0	True				
ANR	5210122	IdentifierDecl	* F		5210118	0					
ANR	5210123	IdentifierDeclType	FILE *		5210118	0					
ANR	5210124	Identifier	F		5210118	1					
ANR	5210125	IdentifierDeclStatement	char * new_flags ;	469:4:10403:10418	5210118	1	True				
ANR	5210126	IdentifierDecl	* new_flags		5210118	0					
ANR	5210127	IdentifierDeclType	char *		5210118	0					
ANR	5210128	Identifier	new_flags		5210118	1					
ANR	5210129	IfStatement	if ( fd == - 1 )		5210118	2					
ANR	5210130	Condition	fd == - 1	472:8:10436:10443	5210118	0	True				
ANR	5210131	EqualityExpression	fd == - 1		5210118	0		==			
ANR	5210132	Identifier	fd		5210118	0					
ANR	5210133	UnaryOperationExpression	- 1		5210118	1					
ANR	5210134	UnaryOperator	-		5210118	0					
ANR	5210135	PrimaryExpression	1		5210118	1					
ANR	5210136	CompoundStatement		7:19:75:75	5210118	1					
ANR	5210137	ReturnStatement	return NULL ;	473:1:10450:10461	5210118	0	True				
ANR	5210138	Identifier	NULL		5210118	0					
ANR	5210139	ExpressionStatement	new_flags = fix_stdio_fdopen_mode_on_windows ( flags )	477:4:10487:10538	5210118	3	True				
ANR	5210140	AssignmentExpression	new_flags = fix_stdio_fdopen_mode_on_windows ( flags )		5210118	0		=			
ANR	5210141	Identifier	new_flags		5210118	0					
ANR	5210142	CallExpression	fix_stdio_fdopen_mode_on_windows ( flags )		5210118	1					
ANR	5210143	Callee	fix_stdio_fdopen_mode_on_windows		5210118	0					
ANR	5210144	Identifier	fix_stdio_fdopen_mode_on_windows		5210118	0					
ANR	5210145	ArgumentList	flags		5210118	1					
ANR	5210146	Argument	flags		5210118	0					
ANR	5210147	Identifier	flags		5210118	0					
ANR	5210148	IfStatement	if ( new_flags == NULL )		5210118	4					
ANR	5210149	Condition	new_flags == NULL	478:8:10548:10564	5210118	0	True				
ANR	5210150	EqualityExpression	new_flags == NULL		5210118	0		==			
ANR	5210151	Identifier	new_flags		5210118	0					
ANR	5210152	Identifier	NULL		5210118	1					
ANR	5210153	CompoundStatement		13:28:196:196	5210118	1					
ANR	5210154	ExpressionStatement	( void ) close ( fd )	479:1:10571:10586	5210118	0	True				
ANR	5210155	CastExpression	( void ) close ( fd )		5210118	0					
ANR	5210156	CastTarget	void		5210118	0					
ANR	5210157	CallExpression	close ( fd )		5210118	1					
ANR	5210158	Callee	close		5210118	0					
ANR	5210159	Identifier	close		5210118	0					
ANR	5210160	ArgumentList	fd		5210118	1					
ANR	5210161	Argument	fd		5210118	0					
ANR	5210162	Identifier	fd		5210118	0					
ANR	5210163	ExpressionStatement	errno = EINVAL	480:1:10589:10603	5210118	1	True				
ANR	5210164	AssignmentExpression	errno = EINVAL		5210118	0		=			
ANR	5210165	Identifier	errno		5210118	0					
ANR	5210166	Identifier	EINVAL		5210118	1					
ANR	5210167	ReturnStatement	return NULL ;	481:1:10606:10617	5210118	2	True				
ANR	5210168	Identifier	NULL		5210118	0					
ANR	5210169	ExpressionStatement	flags = new_flags	483:4:10629:10646	5210118	5	True				
ANR	5210170	AssignmentExpression	flags = new_flags		5210118	0		=			
ANR	5210171	Identifier	flags		5210118	0					
ANR	5210172	Identifier	new_flags		5210118	1					
ANR	5210173	ExpressionStatement	"F = fdopen ( fd , flags )"	486:4:10660:10681	5210118	6	True				
ANR	5210174	AssignmentExpression	"F = fdopen ( fd , flags )"		5210118	0		=			
ANR	5210175	Identifier	F		5210118	0					
ANR	5210176	CallExpression	"fdopen ( fd , flags )"		5210118	1					
ANR	5210177	Callee	fdopen		5210118	0					
ANR	5210178	Identifier	fdopen		5210118	0					
ANR	5210179	ArgumentList	fd		5210118	1					
ANR	5210180	Argument	fd		5210118	0					
ANR	5210181	Identifier	fd		5210118	0					
ANR	5210182	Argument	flags		5210118	1					
ANR	5210183	Identifier	flags		5210118	0					
ANR	5210184	IfStatement	if ( ! F )		5210118	7					
ANR	5210185	Condition	! F	487:8:10691:10692	5210118	0	True				
ANR	5210186	UnaryOperationExpression	! F		5210118	0					
ANR	5210187	UnaryOperator	!		5210118	0					
ANR	5210188	Identifier	F		5210118	1					
ANR	5210189	CompoundStatement		22:13:324:324	5210118	1					
ANR	5210190	ExpressionStatement	( void ) close ( fd )	488:1:10699:10714	5210118	0	True				
ANR	5210191	CastExpression	( void ) close ( fd )		5210118	0					
ANR	5210192	CastTarget	void		5210118	0					
ANR	5210193	CallExpression	close ( fd )		5210118	1					
ANR	5210194	Callee	close		5210118	0					
ANR	5210195	Identifier	close		5210118	0					
ANR	5210196	ArgumentList	fd		5210118	1					
ANR	5210197	Argument	fd		5210118	0					
ANR	5210198	Identifier	fd		5210118	0					
ANR	5210199	ExpressionStatement	free ( new_flags )	492:4:10740:10755	5210118	8	True				
ANR	5210200	CallExpression	free ( new_flags )		5210118	0					
ANR	5210201	Callee	free		5210118	0					
ANR	5210202	Identifier	free		5210118	0					
ANR	5210203	ArgumentList	new_flags		5210118	1					
ANR	5210204	Argument	new_flags		5210118	0					
ANR	5210205	Identifier	new_flags		5210118	0					
ANR	5210206	ReturnStatement	return F ;	495:4:10769:10777	5210118	9	True				
ANR	5210207	Identifier	F		5210118	0					
ANR	5210208	ReturnType	FILE *		5210118	1					
ANR	5210209	Identifier	safe_fdopen		5210118	2					
ANR	5210210	ParameterList	"int fd , const char * flags"		5210118	3					
ANR	5210211	Parameter	int fd	465:18:10344:10349	5210118	0	True				
ANR	5210212	ParameterType	int		5210118	0					
ANR	5210213	Identifier	fd		5210118	1					
ANR	5210214	Parameter	const char * flags	465:26:10352:10368	5210118	1	True				
ANR	5210215	ParameterType	const char *		5210118	0					
ANR	5210216	Identifier	flags		5210118	1					
ANR	5210217	CFGEntryNode	ENTRY		5210118		True				
ANR	5210218	CFGExitNode	EXIT		5210118		True				
ANR	5210219	Symbol	EINVAL		5210118						
ANR	5210220	Symbol	fix_stdio_fdopen_mode_on_windows		5210118						
ANR	5210221	Symbol	errno		5210118						
ANR	5210222	Symbol	NULL		5210118						
ANR	5210223	Symbol	F		5210118						
ANR	5210224	Symbol	flags		5210118						
ANR	5210225	Symbol	new_flags		5210118						
ANR	5210226	Symbol	fdopen		5210118						
ANR	5210227	Symbol	fd		5210118						
ANR	5210228	Function	safe_fopen_wrapper	509:0:11054:11509							
ANR	5210229	FunctionDef	"safe_fopen_wrapper (const char * fn , const char * flags , mode_t mode)"		5210228	0					
ANR	5210230	CompoundStatement		510:0:11127:11509	5210228	0					
ANR	5210231	IdentifierDeclStatement	int create_file ;	511:4:11133:11148	5210228	0	True				
ANR	5210232	IdentifierDecl	create_file		5210228	0					
ANR	5210233	IdentifierDeclType	int		5210228	0					
ANR	5210234	Identifier	create_file		5210228	1					
ANR	5210235	IdentifierDeclStatement	int r ;	512:4:11154:11159	5210228	1	True				
ANR	5210236	IdentifierDecl	r		5210228	0					
ANR	5210237	IdentifierDeclType	int		5210228	0					
ANR	5210238	Identifier	r		5210228	1					
ANR	5210239	IdentifierDeclStatement	int open_flags ;	513:4:11165:11179	5210228	2	True				
ANR	5210240	IdentifierDecl	open_flags		5210228	0					
ANR	5210241	IdentifierDeclType	int		5210228	0					
ANR	5210242	Identifier	open_flags		5210228	1					
ANR	5210243	IdentifierDeclStatement	int f ;	514:4:11185:11190	5210228	3	True				
ANR	5210244	IdentifierDecl	f		5210228	0					
ANR	5210245	IdentifierDeclType	int		5210228	0					
ANR	5210246	Identifier	f		5210228	1					
ANR	5210247	ExpressionStatement	create_file = ( flags != NULL && flags [ 0 ] != 'r' )	517:4:11269:11317	5210228	4	True				
ANR	5210248	AssignmentExpression	create_file = ( flags != NULL && flags [ 0 ] != 'r' )		5210228	0		=			
ANR	5210249	Identifier	create_file		5210228	0					
ANR	5210250	AndExpression	flags != NULL && flags [ 0 ] != 'r'		5210228	1		&&			
ANR	5210251	EqualityExpression	flags != NULL		5210228	0		!=			
ANR	5210252	Identifier	flags		5210228	0					
ANR	5210253	Identifier	NULL		5210228	1					
ANR	5210254	EqualityExpression	flags [ 0 ] != 'r'		5210228	1		!=			
ANR	5210255	ArrayIndexing	flags [ 0 ]		5210228	0					
ANR	5210256	Identifier	flags		5210228	0					
ANR	5210257	PrimaryExpression	0		5210228	1					
ANR	5210258	PrimaryExpression	'r'		5210228	1					
ANR	5210259	ExpressionStatement	"r = stdio_mode_to_open_flag ( flags , & open_flags , create_file )"	518:4:11323:11383	5210228	5	True				
ANR	5210260	AssignmentExpression	"r = stdio_mode_to_open_flag ( flags , & open_flags , create_file )"		5210228	0		=			
ANR	5210261	Identifier	r		5210228	0					
ANR	5210262	CallExpression	"stdio_mode_to_open_flag ( flags , & open_flags , create_file )"		5210228	1					
ANR	5210263	Callee	stdio_mode_to_open_flag		5210228	0					
ANR	5210264	Identifier	stdio_mode_to_open_flag		5210228	0					
ANR	5210265	ArgumentList	flags		5210228	1					
ANR	5210266	Argument	flags		5210228	0					
ANR	5210267	Identifier	flags		5210228	0					
ANR	5210268	Argument	& open_flags		5210228	1					
ANR	5210269	UnaryOperationExpression	& open_flags		5210228	0					
ANR	5210270	UnaryOperator	&		5210228	0					
ANR	5210271	Identifier	open_flags		5210228	1					
ANR	5210272	Argument	create_file		5210228	2					
ANR	5210273	Identifier	create_file		5210228	0					
ANR	5210274	IfStatement	if ( r != 0 )		5210228	6					
ANR	5210275	Condition	r != 0	520:8:11394:11399	5210228	0	True				
ANR	5210276	EqualityExpression	r != 0		5210228	0		!=			
ANR	5210277	Identifier	r		5210228	0					
ANR	5210278	PrimaryExpression	0		5210228	1					
ANR	5210279	CompoundStatement		11:16:274:274	5210228	1					
ANR	5210280	ReturnStatement	return NULL ;	521:1:11405:11416	5210228	0	True				
ANR	5210281	Identifier	NULL		5210228	0					
ANR	5210282	ExpressionStatement	"f = safe_open_wrapper ( fn , open_flags , mode )"	524:4:11429:11472	5210228	7	True				
ANR	5210283	AssignmentExpression	"f = safe_open_wrapper ( fn , open_flags , mode )"		5210228	0		=			
ANR	5210284	Identifier	f		5210228	0					
ANR	5210285	CallExpression	"safe_open_wrapper ( fn , open_flags , mode )"		5210228	1					
ANR	5210286	Callee	safe_open_wrapper		5210228	0					
ANR	5210287	Identifier	safe_open_wrapper		5210228	0					
ANR	5210288	ArgumentList	fn		5210228	1					
ANR	5210289	Argument	fn		5210228	0					
ANR	5210290	Identifier	fn		5210228	0					
ANR	5210291	Argument	open_flags		5210228	1					
ANR	5210292	Identifier	open_flags		5210228	0					
ANR	5210293	Argument	mode		5210228	2					
ANR	5210294	Identifier	mode		5210228	0					
ANR	5210295	ReturnStatement	"return safe_fdopen ( f , flags ) ;"	526:4:11479:11507	5210228	8	True				
ANR	5210296	CallExpression	"safe_fdopen ( f , flags )"		5210228	0					
ANR	5210297	Callee	safe_fdopen		5210228	0					
ANR	5210298	Identifier	safe_fdopen		5210228	0					
ANR	5210299	ArgumentList	f		5210228	1					
ANR	5210300	Argument	f		5210228	0					
ANR	5210301	Identifier	f		5210228	0					
ANR	5210302	Argument	flags		5210228	1					
ANR	5210303	Identifier	flags		5210228	0					
ANR	5210304	ReturnType	FILE *		5210228	1					
ANR	5210305	Identifier	safe_fopen_wrapper		5210228	2					
ANR	5210306	ParameterList	"const char * fn , const char * flags , mode_t mode"		5210228	3					
ANR	5210307	Parameter	const char * fn	509:25:11079:11092	5210228	0	True				
ANR	5210308	ParameterType	const char *		5210228	0					
ANR	5210309	Identifier	fn		5210228	1					
ANR	5210310	Parameter	const char * flags	509:41:11095:11111	5210228	1	True				
ANR	5210311	ParameterType	const char *		5210228	0					
ANR	5210312	Identifier	flags		5210228	1					
ANR	5210313	Parameter	mode_t mode	509:60:11114:11124	5210228	2	True				
ANR	5210314	ParameterType	mode_t		5210228	0					
ANR	5210315	Identifier	mode		5210228	1					
ANR	5210316	CFGEntryNode	ENTRY		5210228		True				
ANR	5210317	CFGExitNode	EXIT		5210228		True				
ANR	5210318	Symbol	* flags		5210228						
ANR	5210319	Symbol	& open_flags		5210228						
ANR	5210320	Symbol	NULL		5210228						
ANR	5210321	Symbol	safe_fdopen		5210228						
ANR	5210322	Symbol	f		5210228						
ANR	5210323	Symbol	fn		5210228						
ANR	5210324	Symbol	flags		5210228						
ANR	5210325	Symbol	open_flags		5210228						
ANR	5210326	Symbol	safe_open_wrapper		5210228						
ANR	5210327	Symbol	mode		5210228						
ANR	5210328	Symbol	create_file		5210228						
ANR	5210329	Symbol	r		5210228						
ANR	5210330	Symbol	stdio_mode_to_open_flag		5210228						
ANR	5210331	Function	safe_fopen_wrapper_follow	531:0:11583:12052							
ANR	5210332	FunctionDef	"safe_fopen_wrapper_follow (const char * fn , const char * flags , mode_t mode)"		5210331	0					
ANR	5210333	CompoundStatement		532:0:11663:12052	5210331	0					
ANR	5210334	IdentifierDeclStatement	int create_file ;	533:4:11669:11684	5210331	0	True				
ANR	5210335	IdentifierDecl	create_file		5210331	0					
ANR	5210336	IdentifierDeclType	int		5210331	0					
ANR	5210337	Identifier	create_file		5210331	1					
ANR	5210338	IdentifierDeclStatement	int r ;	534:4:11690:11695	5210331	1	True				
ANR	5210339	IdentifierDecl	r		5210331	0					
ANR	5210340	IdentifierDeclType	int		5210331	0					
ANR	5210341	Identifier	r		5210331	1					
ANR	5210342	IdentifierDeclStatement	int open_flags ;	535:4:11701:11715	5210331	2	True				
ANR	5210343	IdentifierDecl	open_flags		5210331	0					
ANR	5210344	IdentifierDeclType	int		5210331	0					
ANR	5210345	Identifier	open_flags		5210331	1					
ANR	5210346	IdentifierDeclStatement	int f ;	536:4:11721:11726	5210331	3	True				
ANR	5210347	IdentifierDecl	f		5210331	0					
ANR	5210348	IdentifierDeclType	int		5210331	0					
ANR	5210349	Identifier	f		5210331	1					
ANR	5210350	ExpressionStatement	create_file = ( flags != NULL && flags [ 0 ] != 'r' )	539:4:11805:11853	5210331	4	True				
ANR	5210351	AssignmentExpression	create_file = ( flags != NULL && flags [ 0 ] != 'r' )		5210331	0		=			
ANR	5210352	Identifier	create_file		5210331	0					
ANR	5210353	AndExpression	flags != NULL && flags [ 0 ] != 'r'		5210331	1		&&			
ANR	5210354	EqualityExpression	flags != NULL		5210331	0		!=			
ANR	5210355	Identifier	flags		5210331	0					
ANR	5210356	Identifier	NULL		5210331	1					
ANR	5210357	EqualityExpression	flags [ 0 ] != 'r'		5210331	1		!=			
ANR	5210358	ArrayIndexing	flags [ 0 ]		5210331	0					
ANR	5210359	Identifier	flags		5210331	0					
ANR	5210360	PrimaryExpression	0		5210331	1					
ANR	5210361	PrimaryExpression	'r'		5210331	1					
ANR	5210362	ExpressionStatement	"r = stdio_mode_to_open_flag ( flags , & open_flags , create_file )"	540:4:11859:11919	5210331	5	True				
ANR	5210363	AssignmentExpression	"r = stdio_mode_to_open_flag ( flags , & open_flags , create_file )"		5210331	0		=			
ANR	5210364	Identifier	r		5210331	0					
ANR	5210365	CallExpression	"stdio_mode_to_open_flag ( flags , & open_flags , create_file )"		5210331	1					
ANR	5210366	Callee	stdio_mode_to_open_flag		5210331	0					
ANR	5210367	Identifier	stdio_mode_to_open_flag		5210331	0					
ANR	5210368	ArgumentList	flags		5210331	1					
ANR	5210369	Argument	flags		5210331	0					
ANR	5210370	Identifier	flags		5210331	0					
ANR	5210371	Argument	& open_flags		5210331	1					
ANR	5210372	UnaryOperationExpression	& open_flags		5210331	0					
ANR	5210373	UnaryOperator	&		5210331	0					
ANR	5210374	Identifier	open_flags		5210331	1					
ANR	5210375	Argument	create_file		5210331	2					
ANR	5210376	Identifier	create_file		5210331	0					
ANR	5210377	IfStatement	if ( r != 0 )		5210331	6					
ANR	5210378	Condition	r != 0	542:8:11930:11935	5210331	0	True				
ANR	5210379	EqualityExpression	r != 0		5210331	0		!=			
ANR	5210380	Identifier	r		5210331	0					
ANR	5210381	PrimaryExpression	0		5210331	1					
ANR	5210382	CompoundStatement		11:16:274:274	5210331	1					
ANR	5210383	ReturnStatement	return NULL ;	543:1:11941:11952	5210331	0	True				
ANR	5210384	Identifier	NULL		5210331	0					
ANR	5210385	ExpressionStatement	"f = safe_open_wrapper_follow ( fn , open_flags , mode )"	546:4:11965:12015	5210331	7	True				
ANR	5210386	AssignmentExpression	"f = safe_open_wrapper_follow ( fn , open_flags , mode )"		5210331	0		=			
ANR	5210387	Identifier	f		5210331	0					
ANR	5210388	CallExpression	"safe_open_wrapper_follow ( fn , open_flags , mode )"		5210331	1					
ANR	5210389	Callee	safe_open_wrapper_follow		5210331	0					
ANR	5210390	Identifier	safe_open_wrapper_follow		5210331	0					
ANR	5210391	ArgumentList	fn		5210331	1					
ANR	5210392	Argument	fn		5210331	0					
ANR	5210393	Identifier	fn		5210331	0					
ANR	5210394	Argument	open_flags		5210331	1					
ANR	5210395	Identifier	open_flags		5210331	0					
ANR	5210396	Argument	mode		5210331	2					
ANR	5210397	Identifier	mode		5210331	0					
ANR	5210398	ReturnStatement	"return safe_fdopen ( f , flags ) ;"	548:4:12022:12050	5210331	8	True				
ANR	5210399	CallExpression	"safe_fdopen ( f , flags )"		5210331	0					
ANR	5210400	Callee	safe_fdopen		5210331	0					
ANR	5210401	Identifier	safe_fdopen		5210331	0					
ANR	5210402	ArgumentList	f		5210331	1					
ANR	5210403	Argument	f		5210331	0					
ANR	5210404	Identifier	f		5210331	0					
ANR	5210405	Argument	flags		5210331	1					
ANR	5210406	Identifier	flags		5210331	0					
ANR	5210407	ReturnType	FILE *		5210331	1					
ANR	5210408	Identifier	safe_fopen_wrapper_follow		5210331	2					
ANR	5210409	ParameterList	"const char * fn , const char * flags , mode_t mode"		5210331	3					
ANR	5210410	Parameter	const char * fn	531:32:11615:11628	5210331	0	True				
ANR	5210411	ParameterType	const char *		5210331	0					
ANR	5210412	Identifier	fn		5210331	1					
ANR	5210413	Parameter	const char * flags	531:48:11631:11647	5210331	1	True				
ANR	5210414	ParameterType	const char *		5210331	0					
ANR	5210415	Identifier	flags		5210331	1					
ANR	5210416	Parameter	mode_t mode	531:67:11650:11660	5210331	2	True				
ANR	5210417	ParameterType	mode_t		5210331	0					
ANR	5210418	Identifier	mode		5210331	1					
ANR	5210419	CFGEntryNode	ENTRY		5210331		True				
ANR	5210420	CFGExitNode	EXIT		5210331		True				
ANR	5210421	Symbol	* flags		5210331						
ANR	5210422	Symbol	& open_flags		5210331						
ANR	5210423	Symbol	NULL		5210331						
ANR	5210424	Symbol	safe_open_wrapper_follow		5210331						
ANR	5210425	Symbol	safe_fdopen		5210331						
ANR	5210426	Symbol	f		5210331						
ANR	5210427	Symbol	fn		5210331						
ANR	5210428	Symbol	flags		5210331						
ANR	5210429	Symbol	open_flags		5210331						
ANR	5210430	Symbol	mode		5210331						
ANR	5210431	Symbol	create_file		5210331						
ANR	5210432	Symbol	r		5210331						
ANR	5210433	Symbol	stdio_mode_to_open_flag		5210331						
