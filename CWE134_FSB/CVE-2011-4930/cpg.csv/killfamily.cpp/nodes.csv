command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1766962	File	data/converged/CVE-2011-4930_htcondor/killfamily.cpp								
ANR	1766963	DeclStmt									
ANR	1766964	Decl							extern dynuser	extern dynuser *	myDynuser
ANR	1766965	Function	KillFamily :: KillFamily	30:0:971:1517							
ANR	1766966	FunctionDef	"KillFamily :: KillFamily (pid_t pid , priv_state priv , int test_only)"		1766965	0					
ANR	1766967	CompoundStatement		31:0:1039:1517	1766965	0					
ANR	1766968	ExpressionStatement	daddy_pid = pid	32:1:1042:1057	1766965	0	True				
ANR	1766969	AssignmentExpression	daddy_pid = pid		1766965	0		=			
ANR	1766970	Identifier	daddy_pid		1766965	0					
ANR	1766971	Identifier	pid		1766965	1					
ANR	1766972	ExpressionStatement	old_pids = NULL	33:1:1060:1075	1766965	1	True				
ANR	1766973	AssignmentExpression	old_pids = NULL		1766965	0		=			
ANR	1766974	Identifier	old_pids		1766965	0					
ANR	1766975	Identifier	NULL		1766965	1					
ANR	1766976	ExpressionStatement	mypriv = priv	34:1:1078:1091	1766965	2	True				
ANR	1766977	AssignmentExpression	mypriv = priv		1766965	0		=			
ANR	1766978	Identifier	mypriv		1766965	0					
ANR	1766979	Identifier	priv		1766965	1					
ANR	1766980	ExpressionStatement	test_only_flag = test_only	35:1:1094:1120	1766965	3	True				
ANR	1766981	AssignmentExpression	test_only_flag = test_only		1766965	0		=			
ANR	1766982	Identifier	test_only_flag		1766965	0					
ANR	1766983	Identifier	test_only		1766965	1					
ANR	1766984	ExpressionStatement	family_size = 0	36:1:1123:1138	1766965	4	True				
ANR	1766985	AssignmentExpression	family_size = 0		1766965	0		=			
ANR	1766986	Identifier	family_size		1766965	0					
ANR	1766987	PrimaryExpression	0		1766965	1					
ANR	1766988	ExpressionStatement	exited_cpu_user_time = 0	37:1:1141:1165	1766965	5	True				
ANR	1766989	AssignmentExpression	exited_cpu_user_time = 0		1766965	0		=			
ANR	1766990	Identifier	exited_cpu_user_time		1766965	0					
ANR	1766991	PrimaryExpression	0		1766965	1					
ANR	1766992	ExpressionStatement	exited_cpu_sys_time = 0	38:1:1168:1191	1766965	6	True				
ANR	1766993	AssignmentExpression	exited_cpu_sys_time = 0		1766965	0		=			
ANR	1766994	Identifier	exited_cpu_sys_time		1766965	0					
ANR	1766995	PrimaryExpression	0		1766965	1					
ANR	1766996	ExpressionStatement	max_image_size = 0	39:1:1194:1212	1766965	7	True				
ANR	1766997	AssignmentExpression	max_image_size = 0		1766965	0		=			
ANR	1766998	Identifier	max_image_size		1766965	0					
ANR	1766999	PrimaryExpression	0		1766965	1					
ANR	1767000	ExpressionStatement	alive_cpu_sys_time = 0	41:1:1216:1238	1766965	8	True				
ANR	1767001	AssignmentExpression	alive_cpu_sys_time = 0		1766965	0		=			
ANR	1767002	Identifier	alive_cpu_sys_time		1766965	0					
ANR	1767003	PrimaryExpression	0		1766965	1					
ANR	1767004	ExpressionStatement	alive_cpu_user_time = 0	42:1:1241:1264	1766965	9	True				
ANR	1767005	AssignmentExpression	alive_cpu_user_time = 0		1766965	0		=			
ANR	1767006	Identifier	alive_cpu_user_time		1766965	0					
ANR	1767007	PrimaryExpression	0		1766965	1					
ANR	1767008	ExpressionStatement	pidenvid_init ( & m_penvid )	44:1:1268:1292	1766965	10	True				
ANR	1767009	CallExpression	pidenvid_init ( & m_penvid )		1766965	0					
ANR	1767010	Callee	pidenvid_init		1766965	0					
ANR	1767011	Identifier	pidenvid_init		1766965	0					
ANR	1767012	ArgumentList	& m_penvid		1766965	1					
ANR	1767013	Argument	& m_penvid		1766965	0					
ANR	1767014	UnaryOperationExpression	& m_penvid		1766965	0					
ANR	1767015	UnaryOperator	&		1766965	0					
ANR	1767016	Identifier	m_penvid		1766965	1					
ANR	1767017	ExpressionStatement	searchLogin = NULL	45:1:1295:1313	1766965	11	True				
ANR	1767018	AssignmentExpression	searchLogin = NULL		1766965	0		=			
ANR	1767019	Identifier	searchLogin		1766965	0					
ANR	1767020	Identifier	NULL		1766965	1					
ANR	1767021	ExpressionStatement	mypriv = PRIV_ROOT	49:1:1400:1418	1766965	12	True				
ANR	1767022	AssignmentExpression	mypriv = PRIV_ROOT		1766965	0		=			
ANR	1767023	Identifier	mypriv		1766965	0					
ANR	1767024	Identifier	PRIV_ROOT		1766965	1					
ANR	1767025	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Created new KillFamily w/ pid %d as parent\\n"" , daddy_pid )"	52:1:1429:1515	1766965	13	True				
ANR	1767026	CallExpression	"dprintf ( D_PROCFAMILY , ""Created new KillFamily w/ pid %d as parent\\n"" , daddy_pid )"		1766965	0					
ANR	1767027	Callee	dprintf		1766965	0					
ANR	1767028	Identifier	dprintf		1766965	0					
ANR	1767029	ArgumentList	D_PROCFAMILY		1766965	1					
ANR	1767030	Argument	D_PROCFAMILY		1766965	0					
ANR	1767031	Identifier	D_PROCFAMILY		1766965	0					
ANR	1767032	Argument	"""Created new KillFamily w/ pid %d as parent\\n"""		1766965	1					
ANR	1767033	PrimaryExpression	"""Created new KillFamily w/ pid %d as parent\\n"""		1766965	0					
ANR	1767034	Argument	daddy_pid		1766965	2					
ANR	1767035	Identifier	daddy_pid		1766965	0					
ANR	1767036	Identifier	KillFamily :: KillFamily		1766965	1					
ANR	1767037	ParameterList	"pid_t pid , priv_state priv , int test_only"		1766965	2					
ANR	1767038	Parameter	pid_t pid	30:24:995:1003	1766965	0	True				
ANR	1767039	ParameterType	pid_t		1766965	0					
ANR	1767040	Identifier	pid		1766965	1					
ANR	1767041	Parameter	priv_state priv	30:35:1006:1020	1766965	1	True				
ANR	1767042	ParameterType	priv_state		1766965	0					
ANR	1767043	Identifier	priv		1766965	1					
ANR	1767044	Parameter	int test_only	30:52:1023:1035	1766965	2	True				
ANR	1767045	ParameterType	int		1766965	0					
ANR	1767046	Identifier	test_only		1766965	1					
ANR	1767047	CFGEntryNode	ENTRY		1766965		True				
ANR	1767048	CFGExitNode	EXIT		1766965		True				
ANR	1767049	Symbol	test_only_flag		1766965						
ANR	1767050	Symbol	family_size		1766965						
ANR	1767051	Symbol	& m_penvid		1766965						
ANR	1767052	Symbol	NULL		1766965						
ANR	1767053	Symbol	D_PROCFAMILY		1766965						
ANR	1767054	Symbol	mypriv		1766965						
ANR	1767055	Symbol	exited_cpu_sys_time		1766965						
ANR	1767056	Symbol	pid		1766965						
ANR	1767057	Symbol	searchLogin		1766965						
ANR	1767058	Symbol	alive_cpu_sys_time		1766965						
ANR	1767059	Symbol	alive_cpu_user_time		1766965						
ANR	1767060	Symbol	exited_cpu_user_time		1766965						
ANR	1767061	Symbol	old_pids		1766965						
ANR	1767062	Symbol	max_image_size		1766965						
ANR	1767063	Symbol	PRIV_ROOT		1766965						
ANR	1767064	Symbol	priv		1766965						
ANR	1767065	Symbol	test_only		1766965						
ANR	1767066	Symbol	daddy_pid		1766965						
ANR	1767067	Function	KillFamily :: ~KillFamily	57:0:1521:1721							
ANR	1767068	FunctionDef	KillFamily :: ~KillFamily ()		1767067	0					
ANR	1767069	CompoundStatement		58:0:1547:1721	1767067	0					
ANR	1767070	IfStatement	if ( old_pids )		1767067	0					
ANR	1767071	Condition	old_pids	59:6:1555:1562	1767067	0	True				
ANR	1767072	Identifier	old_pids		1767067	0					
ANR	1767073	CompoundStatement		2:17:18:18	1767067	1					
ANR	1767074	Statement	delete	60:2:1570:1575	1767067	0	True				
ANR	1767075	ExpressionStatement	old_pids	60:9:1577:1585	1767067	1	True				
ANR	1767076	Identifier	old_pids		1767067	0					
ANR	1767077	IfStatement	if ( searchLogin )		1767067	1					
ANR	1767078	Condition	searchLogin	62:6:1596:1606	1767067	0	True				
ANR	1767079	Identifier	searchLogin		1767067	0					
ANR	1767080	CompoundStatement		5:20:62:62	1767067	1					
ANR	1767081	ExpressionStatement	free ( searchLogin )	63:2:1614:1631	1767067	0	True				
ANR	1767082	CallExpression	free ( searchLogin )		1767067	0					
ANR	1767083	Callee	free		1767067	0					
ANR	1767084	Identifier	free		1767067	0					
ANR	1767085	ArgumentList	searchLogin		1767067	1					
ANR	1767086	Argument	searchLogin		1767067	0					
ANR	1767087	Identifier	searchLogin		1767067	0					
ANR	1767088	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Deleted KillFamily w/ pid %d as parent\\n"" , daddy_pid )"	65:1:1637:1719	1767067	2	True				
ANR	1767089	CallExpression	"dprintf ( D_PROCFAMILY , ""Deleted KillFamily w/ pid %d as parent\\n"" , daddy_pid )"		1767067	0					
ANR	1767090	Callee	dprintf		1767067	0					
ANR	1767091	Identifier	dprintf		1767067	0					
ANR	1767092	ArgumentList	D_PROCFAMILY		1767067	1					
ANR	1767093	Argument	D_PROCFAMILY		1767067	0					
ANR	1767094	Identifier	D_PROCFAMILY		1767067	0					
ANR	1767095	Argument	"""Deleted KillFamily w/ pid %d as parent\\n"""		1767067	1					
ANR	1767096	PrimaryExpression	"""Deleted KillFamily w/ pid %d as parent\\n"""		1767067	0					
ANR	1767097	Argument	daddy_pid		1767067	2					
ANR	1767098	Identifier	daddy_pid		1767067	0					
ANR	1767099	Identifier	KillFamily :: ~KillFamily		1767067	1					
ANR	1767100	ParameterList			1767067	2					
ANR	1767101	CFGEntryNode	ENTRY		1767067		True				
ANR	1767102	CFGExitNode	EXIT		1767067		True				
ANR	1767103	Symbol	D_PROCFAMILY		1767067						
ANR	1767104	Symbol	old_pids		1767067						
ANR	1767105	Symbol	searchLogin		1767067						
ANR	1767106	Symbol	daddy_pid		1767067						
ANR	1767107	Function	KillFamily :: setFamilyEnvironmentID	69:0:1724:1848							
ANR	1767108	FunctionDef	KillFamily :: setFamilyEnvironmentID (PidEnvID * penvid)		1767107	0					
ANR	1767109	CompoundStatement		71:0:1784:1848	1767107	0					
ANR	1767110	IfStatement	if ( penvid != NULL )		1767107	0					
ANR	1767111	Condition	penvid != NULL	72:5:1791:1804	1767107	0	True				
ANR	1767112	EqualityExpression	penvid != NULL		1767107	0		!=			
ANR	1767113	Identifier	penvid		1767107	0					
ANR	1767114	Identifier	NULL		1767107	1					
ANR	1767115	CompoundStatement		2:21:22:22	1767107	1					
ANR	1767116	ExpressionStatement	"pidenvid_copy ( & m_penvid , penvid )"	73:2:1811:1843	1767107	0	True				
ANR	1767117	CallExpression	"pidenvid_copy ( & m_penvid , penvid )"		1767107	0					
ANR	1767118	Callee	pidenvid_copy		1767107	0					
ANR	1767119	Identifier	pidenvid_copy		1767107	0					
ANR	1767120	ArgumentList	& m_penvid		1767107	1					
ANR	1767121	Argument	& m_penvid		1767107	0					
ANR	1767122	UnaryOperationExpression	& m_penvid		1767107	0					
ANR	1767123	UnaryOperator	&		1767107	0					
ANR	1767124	Identifier	m_penvid		1767107	1					
ANR	1767125	Argument	penvid		1767107	1					
ANR	1767126	Identifier	penvid		1767107	0					
ANR	1767127	ReturnType	void		1767107	1					
ANR	1767128	Identifier	KillFamily :: setFamilyEnvironmentID		1767107	2					
ANR	1767129	ParameterList	PidEnvID * penvid		1767107	3					
ANR	1767130	Parameter	PidEnvID * penvid	70:36:1765:1780	1767107	0	True				
ANR	1767131	ParameterType	PidEnvID *		1767107	0					
ANR	1767132	Identifier	penvid		1767107	1					
ANR	1767133	CFGEntryNode	ENTRY		1767107		True				
ANR	1767134	CFGExitNode	EXIT		1767107		True				
ANR	1767135	Symbol	& m_penvid		1767107						
ANR	1767136	Symbol	NULL		1767107						
ANR	1767137	Symbol	penvid		1767107						
ANR	1767138	Function	KillFamily :: setFamilyLogin	77:0:1851:1999							
ANR	1767139	FunctionDef	KillFamily :: setFamilyLogin (const char * login)		1767138	0					
ANR	1767140	CompoundStatement		79:0:1904:1999	1767138	0					
ANR	1767141	IfStatement	if ( login )		1767138	0					
ANR	1767142	Condition	login	80:6:1912:1916	1767138	0	True				
ANR	1767143	Identifier	login		1767138	0					
ANR	1767144	CompoundStatement		2:14:15:15	1767138	1					
ANR	1767145	IfStatement	if ( searchLogin )		1767138	0					
ANR	1767146	Condition	searchLogin	81:7:1929:1939	1767138	0	True				
ANR	1767147	Identifier	searchLogin		1767138	0					
ANR	1767148	ExpressionStatement	free ( searchLogin )	82:3:1946:1963	1767138	1	True				
ANR	1767149	CallExpression	free ( searchLogin )		1767138	0					
ANR	1767150	Callee	free		1767138	0					
ANR	1767151	Identifier	free		1767138	0					
ANR	1767152	ArgumentList	searchLogin		1767138	1					
ANR	1767153	Argument	searchLogin		1767138	0					
ANR	1767154	Identifier	searchLogin		1767138	0					
ANR	1767155	ExpressionStatement	searchLogin = strdup ( login )	83:2:1967:1994	1767138	1	True				
ANR	1767156	AssignmentExpression	searchLogin = strdup ( login )		1767138	0		=			
ANR	1767157	Identifier	searchLogin		1767138	0					
ANR	1767158	CallExpression	strdup ( login )		1767138	1					
ANR	1767159	Callee	strdup		1767138	0					
ANR	1767160	Identifier	strdup		1767138	0					
ANR	1767161	ArgumentList	login		1767138	1					
ANR	1767162	Argument	login		1767138	0					
ANR	1767163	Identifier	login		1767138	0					
ANR	1767164	ReturnType	void		1767138	1					
ANR	1767165	Identifier	KillFamily :: setFamilyLogin		1767138	2					
ANR	1767166	ParameterList	const char * login		1767138	3					
ANR	1767167	Parameter	const char * login	78:28:1884:1900	1767138	0	True				
ANR	1767168	ParameterType	const char *		1767138	0					
ANR	1767169	Identifier	login		1767138	1					
ANR	1767170	CFGEntryNode	ENTRY		1767138		True				
ANR	1767171	CFGExitNode	EXIT		1767138		True				
ANR	1767172	Symbol	strdup		1767138						
ANR	1767173	Symbol	login		1767138						
ANR	1767174	Symbol	searchLogin		1767138						
ANR	1767175	Function	KillFamily :: hardkill	87:0:2002:2137							
ANR	1767176	FunctionDef	KillFamily :: hardkill ()		1767175	0					
ANR	1767177	CompoundStatement		89:0:2030:2137	1767175	0					
ANR	1767178	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Entering KillFamily::hardkill\\n"" )"	90:1:2033:2088	1767175	0	True				
ANR	1767179	CallExpression	"dprintf ( D_PROCFAMILY , ""Entering KillFamily::hardkill\\n"" )"		1767175	0					
ANR	1767180	Callee	dprintf		1767175	0					
ANR	1767181	Identifier	dprintf		1767175	0					
ANR	1767182	ArgumentList	D_PROCFAMILY		1767175	1					
ANR	1767183	Argument	D_PROCFAMILY		1767175	0					
ANR	1767184	Identifier	D_PROCFAMILY		1767175	0					
ANR	1767185	Argument	"""Entering KillFamily::hardkill\\n"""		1767175	1					
ANR	1767186	PrimaryExpression	"""Entering KillFamily::hardkill\\n"""		1767175	0					
ANR	1767187	ExpressionStatement	takesnapshot ( )	91:1:2091:2105	1767175	1	True				
ANR	1767188	CallExpression	takesnapshot ( )		1767175	0					
ANR	1767189	Callee	takesnapshot		1767175	0					
ANR	1767190	Identifier	takesnapshot		1767175	0					
ANR	1767191	ArgumentList			1767175	1					
ANR	1767192	ExpressionStatement	"spree ( SIGKILL , INFANTICIDE )"	92:1:2108:2135	1767175	2	True				
ANR	1767193	CallExpression	"spree ( SIGKILL , INFANTICIDE )"		1767175	0					
ANR	1767194	Callee	spree		1767175	0					
ANR	1767195	Identifier	spree		1767175	0					
ANR	1767196	ArgumentList	SIGKILL		1767175	1					
ANR	1767197	Argument	SIGKILL		1767175	0					
ANR	1767198	Identifier	SIGKILL		1767175	0					
ANR	1767199	Argument	INFANTICIDE		1767175	1					
ANR	1767200	Identifier	INFANTICIDE		1767175	0					
ANR	1767201	ReturnType	void		1767175	1					
ANR	1767202	Identifier	KillFamily :: hardkill		1767175	2					
ANR	1767203	ParameterList			1767175	3					
ANR	1767204	CFGEntryNode	ENTRY		1767175		True				
ANR	1767205	CFGExitNode	EXIT		1767175		True				
ANR	1767206	Symbol	INFANTICIDE		1767175						
ANR	1767207	Symbol	D_PROCFAMILY		1767175						
ANR	1767208	Symbol	SIGKILL		1767175						
ANR	1767209	Function	KillFamily :: suspend	95:0:2140:2271							
ANR	1767210	FunctionDef	KillFamily :: suspend ()		1767209	0					
ANR	1767211	CompoundStatement		97:0:2167:2271	1767209	0					
ANR	1767212	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Entering KillFamily::suspend\\n"" )"	98:1:2170:2224	1767209	0	True				
ANR	1767213	CallExpression	"dprintf ( D_PROCFAMILY , ""Entering KillFamily::suspend\\n"" )"		1767209	0					
ANR	1767214	Callee	dprintf		1767209	0					
ANR	1767215	Identifier	dprintf		1767209	0					
ANR	1767216	ArgumentList	D_PROCFAMILY		1767209	1					
ANR	1767217	Argument	D_PROCFAMILY		1767209	0					
ANR	1767218	Identifier	D_PROCFAMILY		1767209	0					
ANR	1767219	Argument	"""Entering KillFamily::suspend\\n"""		1767209	1					
ANR	1767220	PrimaryExpression	"""Entering KillFamily::suspend\\n"""		1767209	0					
ANR	1767221	ExpressionStatement	takesnapshot ( )	99:1:2227:2241	1767209	1	True				
ANR	1767222	CallExpression	takesnapshot ( )		1767209	0					
ANR	1767223	Callee	takesnapshot		1767209	0					
ANR	1767224	Identifier	takesnapshot		1767209	0					
ANR	1767225	ArgumentList			1767209	1					
ANR	1767226	ExpressionStatement	"spree ( SIGSTOP , PATRICIDE )"	100:1:2244:2269	1767209	2	True				
ANR	1767227	CallExpression	"spree ( SIGSTOP , PATRICIDE )"		1767209	0					
ANR	1767228	Callee	spree		1767209	0					
ANR	1767229	Identifier	spree		1767209	0					
ANR	1767230	ArgumentList	SIGSTOP		1767209	1					
ANR	1767231	Argument	SIGSTOP		1767209	0					
ANR	1767232	Identifier	SIGSTOP		1767209	0					
ANR	1767233	Argument	PATRICIDE		1767209	1					
ANR	1767234	Identifier	PATRICIDE		1767209	0					
ANR	1767235	ReturnType	void		1767209	1					
ANR	1767236	Identifier	KillFamily :: suspend		1767209	2					
ANR	1767237	ParameterList			1767209	3					
ANR	1767238	CFGEntryNode	ENTRY		1767209		True				
ANR	1767239	CFGExitNode	EXIT		1767209		True				
ANR	1767240	Symbol	D_PROCFAMILY		1767209						
ANR	1767241	Symbol	SIGSTOP		1767209						
ANR	1767242	Symbol	PATRICIDE		1767209						
ANR	1767243	Function	KillFamily :: resume	103:0:2274:2492							
ANR	1767244	FunctionDef	KillFamily :: resume ()		1767243	0					
ANR	1767245	CompoundStatement		105:0:2300:2492	1767243	0					
ANR	1767246	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Entering KillFamily::resume\\n"" )"	108:1:2407:2460	1767243	0	True				
ANR	1767247	CallExpression	"dprintf ( D_PROCFAMILY , ""Entering KillFamily::resume\\n"" )"		1767243	0					
ANR	1767248	Callee	dprintf		1767243	0					
ANR	1767249	Identifier	dprintf		1767243	0					
ANR	1767250	ArgumentList	D_PROCFAMILY		1767243	1					
ANR	1767251	Argument	D_PROCFAMILY		1767243	0					
ANR	1767252	Identifier	D_PROCFAMILY		1767243	0					
ANR	1767253	Argument	"""Entering KillFamily::resume\\n"""		1767243	1					
ANR	1767254	PrimaryExpression	"""Entering KillFamily::resume\\n"""		1767243	0					
ANR	1767255	ExpressionStatement	"spree ( SIGCONT , INFANTICIDE )"	109:1:2463:2490	1767243	1	True				
ANR	1767256	CallExpression	"spree ( SIGCONT , INFANTICIDE )"		1767243	0					
ANR	1767257	Callee	spree		1767243	0					
ANR	1767258	Identifier	spree		1767243	0					
ANR	1767259	ArgumentList	SIGCONT		1767243	1					
ANR	1767260	Argument	SIGCONT		1767243	0					
ANR	1767261	Identifier	SIGCONT		1767243	0					
ANR	1767262	Argument	INFANTICIDE		1767243	1					
ANR	1767263	Identifier	INFANTICIDE		1767243	0					
ANR	1767264	ReturnType	void		1767243	1					
ANR	1767265	Identifier	KillFamily :: resume		1767243	2					
ANR	1767266	ParameterList			1767243	3					
ANR	1767267	CFGEntryNode	ENTRY		1767243		True				
ANR	1767268	CFGExitNode	EXIT		1767243		True				
ANR	1767269	Symbol	INFANTICIDE		1767243						
ANR	1767270	Symbol	D_PROCFAMILY		1767243						
ANR	1767271	Symbol	SIGCONT		1767243						
ANR	1767272	Function	KillFamily :: softkill	112:0:2495:2676							
ANR	1767273	FunctionDef	KillFamily :: softkill (int sig)		1767272	0					
ANR	1767274	CompoundStatement		114:0:2532:2676	1767272	0					
ANR	1767275	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Entering KillFamily::softkill sig=%d\\n"" , sig )"	115:1:2535:2601	1767272	0	True				
ANR	1767276	CallExpression	"dprintf ( D_PROCFAMILY , ""Entering KillFamily::softkill sig=%d\\n"" , sig )"		1767272	0					
ANR	1767277	Callee	dprintf		1767272	0					
ANR	1767278	Identifier	dprintf		1767272	0					
ANR	1767279	ArgumentList	D_PROCFAMILY		1767272	1					
ANR	1767280	Argument	D_PROCFAMILY		1767272	0					
ANR	1767281	Identifier	D_PROCFAMILY		1767272	0					
ANR	1767282	Argument	"""Entering KillFamily::softkill sig=%d\\n"""		1767272	1					
ANR	1767283	PrimaryExpression	"""Entering KillFamily::softkill sig=%d\\n"""		1767272	0					
ANR	1767284	Argument	sig		1767272	2					
ANR	1767285	Identifier	sig		1767272	0					
ANR	1767286	ExpressionStatement	takesnapshot ( )	116:1:2604:2618	1767272	1	True				
ANR	1767287	CallExpression	takesnapshot ( )		1767272	0					
ANR	1767288	Callee	takesnapshot		1767272	0					
ANR	1767289	Identifier	takesnapshot		1767272	0					
ANR	1767290	ArgumentList			1767272	1					
ANR	1767291	ExpressionStatement	"spree ( SIGCONT , INFANTICIDE )"	117:1:2621:2648	1767272	2	True				
ANR	1767292	CallExpression	"spree ( SIGCONT , INFANTICIDE )"		1767272	0					
ANR	1767293	Callee	spree		1767272	0					
ANR	1767294	Identifier	spree		1767272	0					
ANR	1767295	ArgumentList	SIGCONT		1767272	1					
ANR	1767296	Argument	SIGCONT		1767272	0					
ANR	1767297	Identifier	SIGCONT		1767272	0					
ANR	1767298	Argument	INFANTICIDE		1767272	1					
ANR	1767299	Identifier	INFANTICIDE		1767272	0					
ANR	1767300	ExpressionStatement	"spree ( sig , INFANTICIDE )"	118:1:2651:2674	1767272	3	True				
ANR	1767301	CallExpression	"spree ( sig , INFANTICIDE )"		1767272	0					
ANR	1767302	Callee	spree		1767272	0					
ANR	1767303	Identifier	spree		1767272	0					
ANR	1767304	ArgumentList	sig		1767272	1					
ANR	1767305	Argument	sig		1767272	0					
ANR	1767306	Identifier	sig		1767272	0					
ANR	1767307	Argument	INFANTICIDE		1767272	1					
ANR	1767308	Identifier	INFANTICIDE		1767272	0					
ANR	1767309	ReturnType	void		1767272	1					
ANR	1767310	Identifier	KillFamily :: softkill		1767272	2					
ANR	1767311	ParameterList	int sig		1767272	3					
ANR	1767312	Parameter	int sig	113:22:2522:2528	1767272	0	True				
ANR	1767313	ParameterType	int		1767272	0					
ANR	1767314	Identifier	sig		1767272	1					
ANR	1767315	CFGEntryNode	ENTRY		1767272		True				
ANR	1767316	CFGExitNode	EXIT		1767272		True				
ANR	1767317	Symbol	sig		1767272						
ANR	1767318	Symbol	INFANTICIDE		1767272						
ANR	1767319	Symbol	D_PROCFAMILY		1767272						
ANR	1767320	Symbol	SIGCONT		1767272						
ANR	1767321	Function	KillFamily :: get_cpu_usage	121:0:2679:2875							
ANR	1767322	FunctionDef	"KillFamily :: get_cpu_usage (long & sys_time , long & user_time)"		1767321	0					
ANR	1767323	CompoundStatement		123:0:2745:2875	1767321	0					
ANR	1767324	ExpressionStatement	takesnapshot ( )	124:1:2748:2762	1767321	0	True				
ANR	1767325	CallExpression	takesnapshot ( )		1767321	0					
ANR	1767326	Callee	takesnapshot		1767321	0					
ANR	1767327	Identifier	takesnapshot		1767321	0					
ANR	1767328	ArgumentList			1767321	1					
ANR	1767329	ExpressionStatement	sys_time = exited_cpu_sys_time + alive_cpu_sys_time	125:1:2765:2816	1767321	1	True				
ANR	1767330	AssignmentExpression	sys_time = exited_cpu_sys_time + alive_cpu_sys_time		1767321	0		=			
ANR	1767331	Identifier	sys_time		1767321	0					
ANR	1767332	AdditiveExpression	exited_cpu_sys_time + alive_cpu_sys_time		1767321	1		+			
ANR	1767333	Identifier	exited_cpu_sys_time		1767321	0					
ANR	1767334	Identifier	alive_cpu_sys_time		1767321	1					
ANR	1767335	ExpressionStatement	user_time = exited_cpu_user_time + alive_cpu_user_time	126:1:2819:2873	1767321	2	True				
ANR	1767336	AssignmentExpression	user_time = exited_cpu_user_time + alive_cpu_user_time		1767321	0		=			
ANR	1767337	Identifier	user_time		1767321	0					
ANR	1767338	AdditiveExpression	exited_cpu_user_time + alive_cpu_user_time		1767321	1		+			
ANR	1767339	Identifier	exited_cpu_user_time		1767321	0					
ANR	1767340	Identifier	alive_cpu_user_time		1767321	1					
ANR	1767341	ReturnType	void		1767321	1					
ANR	1767342	Identifier	KillFamily :: get_cpu_usage		1767321	2					
ANR	1767343	ParameterList	"long & sys_time , long & user_time"		1767321	3					
ANR	1767344	Parameter	long & sys_time	122:26:2710:2724	1767321	0	True				
ANR	1767345	ParameterType	long &		1767321	0					
ANR	1767346	Identifier	sys_time		1767321	1					
ANR	1767347	Parameter	long & user_time	122:43:2727:2742	1767321	1	True				
ANR	1767348	ParameterType	long &		1767321	0					
ANR	1767349	Identifier	user_time		1767321	1					
ANR	1767350	CFGEntryNode	ENTRY		1767321		True				
ANR	1767351	CFGExitNode	EXIT		1767321		True				
ANR	1767352	Symbol	alive_cpu_user_time		1767321						
ANR	1767353	Symbol	exited_cpu_user_time		1767321						
ANR	1767354	Symbol	sys_time		1767321						
ANR	1767355	Symbol	exited_cpu_sys_time		1767321						
ANR	1767356	Symbol	user_time		1767321						
ANR	1767357	Symbol	alive_cpu_sys_time		1767321						
ANR	1767358	Function	KillFamily :: get_max_imagesize	129:0:2878:2972							
ANR	1767359	FunctionDef	KillFamily :: get_max_imagesize (unsigned long & max_image)		1767358	0					
ANR	1767360	CompoundStatement		131:0:2941:2972	1767358	0					
ANR	1767361	ExpressionStatement	max_image = max_image_size	132:1:2944:2970	1767358	0	True				
ANR	1767362	AssignmentExpression	max_image = max_image_size		1767358	0		=			
ANR	1767363	Identifier	max_image		1767358	0					
ANR	1767364	Identifier	max_image_size		1767358	1					
ANR	1767365	ReturnType	void		1767358	1					
ANR	1767366	Identifier	KillFamily :: get_max_imagesize		1767358	2					
ANR	1767367	ParameterList	unsigned long & max_image		1767358	3					
ANR	1767368	Parameter	unsigned long & max_image	130:30:2913:2937	1767358	0	True				
ANR	1767369	ParameterType	unsigned long &		1767358	0					
ANR	1767370	Identifier	max_image		1767358	1					
ANR	1767371	CFGEntryNode	ENTRY		1767358		True				
ANR	1767372	CFGExitNode	EXIT		1767358		True				
ANR	1767373	Symbol	max_image		1767358						
ANR	1767374	Symbol	max_image_size		1767358						
ANR	1767375	Function	KillFamily :: safe_kill	135:0:2975:4789							
ANR	1767376	FunctionDef	"KillFamily :: safe_kill (a_pid * pid , int sig)"		1767375	0					
ANR	1767377	CompoundStatement		137:0:3023:4789	1767375	0					
ANR	1767378	IdentifierDeclStatement	priv_state priv ;	138:1:3026:3041	1767375	0	True				
ANR	1767379	IdentifierDecl	priv		1767375	0					
ANR	1767380	IdentifierDeclType	priv_state		1767375	0					
ANR	1767381	Identifier	priv		1767375	1					
ANR	1767382	IdentifierDeclStatement	pid_t inpid ;	139:1:3044:3055	1767375	1	True				
ANR	1767383	IdentifierDecl	inpid		1767375	0					
ANR	1767384	IdentifierDeclType	pid_t		1767375	0					
ANR	1767385	Identifier	inpid		1767375	1					
ANR	1767386	ExpressionStatement	inpid = pid -> pid	141:1:3059:3075	1767375	2	True				
ANR	1767387	AssignmentExpression	inpid = pid -> pid		1767375	0		=			
ANR	1767388	Identifier	inpid		1767375	0					
ANR	1767389	PtrMemberAccess	pid -> pid		1767375	1					
ANR	1767390	Identifier	pid		1767375	0					
ANR	1767391	Identifier	pid		1767375	1					
ANR	1767392	IfStatement	if ( inpid < 2 || daddy_pid < 2 )		1767375	3					
ANR	1767393	Condition	inpid < 2 || daddy_pid < 2	144:6:3131:3156	1767375	0	True				
ANR	1767394	OrExpression	inpid < 2 || daddy_pid < 2		1767375	0		||			
ANR	1767395	RelationalExpression	inpid < 2		1767375	0		<			
ANR	1767396	Identifier	inpid		1767375	0					
ANR	1767397	PrimaryExpression	2		1767375	1					
ANR	1767398	RelationalExpression	daddy_pid < 2		1767375	1		<			
ANR	1767399	Identifier	daddy_pid		1767375	0					
ANR	1767400	PrimaryExpression	2		1767375	1					
ANR	1767401	CompoundStatement		8:35:136:136	1767375	1					
ANR	1767402	IfStatement	if ( test_only_flag )		1767375	0					
ANR	1767403	Condition	test_only_flag	145:7:3169:3182	1767375	0	True				
ANR	1767404	Identifier	test_only_flag		1767375	0					
ANR	1767405	CompoundStatement		9:24:162:162	1767375	1					
ANR	1767406	ExpressionStatement	"printf ( ""KillFamily::safe_kill: attempt to kill pid %d!\\n"" , inpid )"	146:3:3191:3260	1767375	0	True				
ANR	1767407	CallExpression	"printf ( ""KillFamily::safe_kill: attempt to kill pid %d!\\n"" , inpid )"		1767375	0					
ANR	1767408	Callee	printf		1767375	0					
ANR	1767409	Identifier	printf		1767375	0					
ANR	1767410	ArgumentList	"""KillFamily::safe_kill: attempt to kill pid %d!\\n"""		1767375	1					
ANR	1767411	Argument	"""KillFamily::safe_kill: attempt to kill pid %d!\\n"""		1767375	0					
ANR	1767412	PrimaryExpression	"""KillFamily::safe_kill: attempt to kill pid %d!\\n"""		1767375	0					
ANR	1767413	Argument	inpid		1767375	1					
ANR	1767414	Identifier	inpid		1767375	0					
ANR	1767415	ElseStatement	else		1767375	0					
ANR	1767416	CompoundStatement		12:10:248:248	1767375	0					
ANR	1767417	ExpressionStatement	"dprintf ( D_ALWAYS , ""KillFamily::safe_kill: attempt to kill pid %d!\\n"" , inpid )"	149:3:3277:3356	1767375	0	True				
ANR	1767418	CallExpression	"dprintf ( D_ALWAYS , ""KillFamily::safe_kill: attempt to kill pid %d!\\n"" , inpid )"		1767375	0					
ANR	1767419	Callee	dprintf		1767375	0					
ANR	1767420	Identifier	dprintf		1767375	0					
ANR	1767421	ArgumentList	D_ALWAYS		1767375	1					
ANR	1767422	Argument	D_ALWAYS		1767375	0					
ANR	1767423	Identifier	D_ALWAYS		1767375	0					
ANR	1767424	Argument	"""KillFamily::safe_kill: attempt to kill pid %d!\\n"""		1767375	1					
ANR	1767425	PrimaryExpression	"""KillFamily::safe_kill: attempt to kill pid %d!\\n"""		1767375	0					
ANR	1767426	Argument	inpid		1767375	2					
ANR	1767427	Identifier	inpid		1767375	0					
ANR	1767428	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""KillFamily::safe_kill: attempt to kill pid %d!\\n"" , inpid )"	151:3:3361:3444	1767375	1	True				
ANR	1767429	CallExpression	"dprintf ( D_PROCFAMILY , ""KillFamily::safe_kill: attempt to kill pid %d!\\n"" , inpid )"		1767375	0					
ANR	1767430	Callee	dprintf		1767375	0					
ANR	1767431	Identifier	dprintf		1767375	0					
ANR	1767432	ArgumentList	D_PROCFAMILY		1767375	1					
ANR	1767433	Argument	D_PROCFAMILY		1767375	0					
ANR	1767434	Identifier	D_PROCFAMILY		1767375	0					
ANR	1767435	Argument	"""KillFamily::safe_kill: attempt to kill pid %d!\\n"""		1767375	1					
ANR	1767436	PrimaryExpression	"""KillFamily::safe_kill: attempt to kill pid %d!\\n"""		1767375	0					
ANR	1767437	Argument	inpid		1767375	2					
ANR	1767438	Identifier	inpid		1767375	0					
ANR	1767439	ReturnStatement	return ;	155:2:3454:3460	1767375	1	True				
ANR	1767440	ExpressionStatement	priv = set_priv ( mypriv )	158:1:3467:3490	1767375	4	True				
ANR	1767441	AssignmentExpression	priv = set_priv ( mypriv )		1767375	0		=			
ANR	1767442	Identifier	priv		1767375	0					
ANR	1767443	CallExpression	set_priv ( mypriv )		1767375	1					
ANR	1767444	Callee	set_priv		1767375	0					
ANR	1767445	Identifier	set_priv		1767375	0					
ANR	1767446	ArgumentList	mypriv		1767375	1					
ANR	1767447	Argument	mypriv		1767375	0					
ANR	1767448	Identifier	mypriv		1767375	0					
ANR	1767449	IfStatement	if ( test_only_flag )		1767375	5					
ANR	1767450	Condition	test_only_flag	160:6:3499:3512	1767375	0	True				
ANR	1767451	Identifier	test_only_flag		1767375	0					
ANR	1767452	CompoundStatement		24:23:492:492	1767375	1					
ANR	1767453	ExpressionStatement	"printf ( ""KillFamily::safe_kill: about to kill pid %d with sig %d\\n"" , inpid , sig )"	161:2:3520:3606	1767375	0	True				
ANR	1767454	CallExpression	"printf ( ""KillFamily::safe_kill: about to kill pid %d with sig %d\\n"" , inpid , sig )"		1767375	0					
ANR	1767455	Callee	printf		1767375	0					
ANR	1767456	Identifier	printf		1767375	0					
ANR	1767457	ArgumentList	"""KillFamily::safe_kill: about to kill pid %d with sig %d\\n"""		1767375	1					
ANR	1767458	Argument	"""KillFamily::safe_kill: about to kill pid %d with sig %d\\n"""		1767375	0					
ANR	1767459	PrimaryExpression	"""KillFamily::safe_kill: about to kill pid %d with sig %d\\n"""		1767375	0					
ANR	1767460	Argument	inpid		1767375	1					
ANR	1767461	Identifier	inpid		1767375	0					
ANR	1767462	Argument	sig		1767375	2					
ANR	1767463	Identifier	sig		1767375	0					
ANR	1767464	ElseStatement	else		1767375	0					
ANR	1767465	CompoundStatement		28:8:592:592	1767375	0					
ANR	1767466	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""KillFamily::safe_kill: about to kill pid %d with sig %d\\n"" , inpid , sig )"	165:2:3620:3720	1767375	0	True				
ANR	1767467	CallExpression	"dprintf ( D_PROCFAMILY , ""KillFamily::safe_kill: about to kill pid %d with sig %d\\n"" , inpid , sig )"		1767375	0					
ANR	1767468	Callee	dprintf		1767375	0					
ANR	1767469	Identifier	dprintf		1767375	0					
ANR	1767470	ArgumentList	D_PROCFAMILY		1767375	1					
ANR	1767471	Argument	D_PROCFAMILY		1767375	0					
ANR	1767472	Identifier	D_PROCFAMILY		1767375	0					
ANR	1767473	Argument	"""KillFamily::safe_kill: about to kill pid %d with sig %d\\n"""		1767375	1					
ANR	1767474	PrimaryExpression	"""KillFamily::safe_kill: about to kill pid %d with sig %d\\n"""		1767375	0					
ANR	1767475	Argument	inpid		1767375	2					
ANR	1767476	Identifier	inpid		1767375	0					
ANR	1767477	Argument	sig		1767375	3					
ANR	1767478	Identifier	sig		1767375	0					
ANR	1767479	IfStatement	if ( ! test_only_flag )		1767375	6					
ANR	1767480	Condition	! test_only_flag	170:6:3732:3746	1767375	0	True				
ANR	1767481	UnaryOperationExpression	! test_only_flag		1767375	0					
ANR	1767482	UnaryOperator	!		1767375	0					
ANR	1767483	Identifier	test_only_flag		1767375	1					
ANR	1767484	CompoundStatement		40:2:772:782	1767375	1					
ANR	1767485	IdentifierDeclStatement	HANDLE pHnd ;	174:2:3769:3780	1767375	0	True				
ANR	1767486	IdentifierDecl	pHnd		1767375	0					
ANR	1767487	IdentifierDeclType	HANDLE		1767375	0					
ANR	1767488	Identifier	pHnd		1767375	1					
ANR	1767489	IdentifierDeclStatement	piPTR pi ;	175:2:3784:3792	1767375	1	True				
ANR	1767490	IdentifierDecl	pi		1767375	0					
ANR	1767491	IdentifierDeclType	piPTR		1767375	0					
ANR	1767492	Identifier	pi		1767375	1					
ANR	1767493	IdentifierDeclStatement	int status ;	176:2:3796:3806	1767375	2	True				
ANR	1767494	IdentifierDecl	status		1767375	0					
ANR	1767495	IdentifierDeclType	int		1767375	0					
ANR	1767496	Identifier	status		1767375	1					
ANR	1767497	ExpressionStatement	pi = NULL	178:2:3811:3820	1767375	3	True				
ANR	1767498	AssignmentExpression	pi = NULL		1767375	0		=			
ANR	1767499	Identifier	pi		1767375	0					
ANR	1767500	Identifier	NULL		1767375	1					
ANR	1767501	ExpressionStatement	"pHnd = OpenProcess ( PROCESS_QUERY_INFORMATION , FALSE , inpid )"	180:2:3825:3884	1767375	4	True				
ANR	1767502	AssignmentExpression	"pHnd = OpenProcess ( PROCESS_QUERY_INFORMATION , FALSE , inpid )"		1767375	0		=			
ANR	1767503	Identifier	pHnd		1767375	0					
ANR	1767504	CallExpression	"OpenProcess ( PROCESS_QUERY_INFORMATION , FALSE , inpid )"		1767375	1					
ANR	1767505	Callee	OpenProcess		1767375	0					
ANR	1767506	Identifier	OpenProcess		1767375	0					
ANR	1767507	ArgumentList	PROCESS_QUERY_INFORMATION		1767375	1					
ANR	1767508	Argument	PROCESS_QUERY_INFORMATION		1767375	0					
ANR	1767509	Identifier	PROCESS_QUERY_INFORMATION		1767375	0					
ANR	1767510	Argument	FALSE		1767375	1					
ANR	1767511	Identifier	FALSE		1767375	0					
ANR	1767512	Argument	inpid		1767375	2					
ANR	1767513	Identifier	inpid		1767375	0					
ANR	1767514	IfStatement	if ( pHnd == NULL )		1767375	5					
ANR	1767515	Condition	pHnd == NULL	182:7:3894:3905	1767375	0	True				
ANR	1767516	EqualityExpression	pHnd == NULL		1767375	0		==			
ANR	1767517	Identifier	pHnd		1767375	0					
ANR	1767518	Identifier	NULL		1767375	1					
ANR	1767519	CompoundStatement		46:22:885:885	1767375	1					
ANR	1767520	Statement	dprintf	183:3:3914:3920	1767375	0	True				
ANR	1767521	Statement	(	183:10:3921:3921	1767375	1	True				
ANR	1767522	Statement	D_ALWAYS	183:11:3922:3929	1767375	2	True				
ANR	1767523	Statement	","	183:19:3930:3930	1767375	3	True				
ANR	1767524	Statement	"""Procfamily: ERROR: Could not open pid %d """	183:21:3932:3974	1767375	4	True				
ANR	1767525	Statement	"""(err=%d). Maybe it exited already?\\n"""	184:4:3980:4017	1767375	5	True				
ANR	1767526	Statement	","	184:42:4018:4018	1767375	6	True				
ANR	1767527	Statement	inpid	184:44:4020:4024	1767375	7	True				
ANR	1767528	Statement	","	184:49:4025:4025	1767375	8	True				
ANR	1767529	Statement	GetLastError	184:51:4027:4038	1767375	9	True				
ANR	1767530	Statement	(	184:63:4039:4039	1767375	10	True				
ANR	1767531	Statement	)	184:64:4040:4040	1767375	11	True				
ANR	1767532	Statement	)	184:65:4041:4041	1767375	12	True				
ANR	1767533	ExpressionStatement		184:66:4042:4042	1767375	13	True				
ANR	1767534	IfStatement	"if ( ProcAPI :: getProcInfo ( inpid , pi , status ) == PROCAPI_SUCCESS )"		1767375	6					
ANR	1767535	Condition	"ProcAPI :: getProcInfo ( inpid , pi , status ) == PROCAPI_SUCCESS"	187:7:4056:4113	1767375	0	True				
ANR	1767536	EqualityExpression	"ProcAPI :: getProcInfo ( inpid , pi , status ) == PROCAPI_SUCCESS"		1767375	0		==			
ANR	1767537	CallExpression	"ProcAPI :: getProcInfo ( inpid , pi , status )"		1767375	0					
ANR	1767538	Callee	ProcAPI :: getProcInfo		1767375	0					
ANR	1767539	Identifier	ProcAPI :: getProcInfo		1767375	0					
ANR	1767540	ArgumentList	inpid		1767375	1					
ANR	1767541	Argument	inpid		1767375	0					
ANR	1767542	Identifier	inpid		1767375	0					
ANR	1767543	Argument	pi		1767375	1					
ANR	1767544	Identifier	pi		1767375	0					
ANR	1767545	Argument	status		1767375	2					
ANR	1767546	Identifier	status		1767375	0					
ANR	1767547	Identifier	PROCAPI_SUCCESS		1767375	1					
ANR	1767548	CompoundStatement		51:68:1093:1093	1767375	1					
ANR	1767549	IfStatement	"if ( daemonCore -> Send_Signal ( inpid , sig ) == FALSE )"		1767375	0					
ANR	1767550	Condition	"daemonCore -> Send_Signal ( inpid , sig ) == FALSE"	189:8:4128:4170	1767375	0	True				
ANR	1767551	EqualityExpression	"daemonCore -> Send_Signal ( inpid , sig ) == FALSE"		1767375	0		==			
ANR	1767552	CallExpression	"daemonCore -> Send_Signal ( inpid , sig )"		1767375	0					
ANR	1767553	Callee	daemonCore -> Send_Signal		1767375	0					
ANR	1767554	PtrMemberAccess	daemonCore -> Send_Signal		1767375	0					
ANR	1767555	Identifier	daemonCore		1767375	0					
ANR	1767556	Identifier	Send_Signal		1767375	1					
ANR	1767557	ArgumentList	inpid		1767375	1					
ANR	1767558	Argument	inpid		1767375	0					
ANR	1767559	Identifier	inpid		1767375	0					
ANR	1767560	Argument	sig		1767375	1					
ANR	1767561	Identifier	sig		1767375	0					
ANR	1767562	Identifier	FALSE		1767375	1					
ANR	1767563	CompoundStatement		53:54:1150:1150	1767375	1					
ANR	1767564	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""KillFamily::safe_kill: Send_Signal(%d,%d) failed\\n"" , inpid , sig )"	190:4:4180:4276	1767375	0	True				
ANR	1767565	CallExpression	"dprintf ( D_PROCFAMILY , ""KillFamily::safe_kill: Send_Signal(%d,%d) failed\\n"" , inpid , sig )"		1767375	0					
ANR	1767566	Callee	dprintf		1767375	0					
ANR	1767567	Identifier	dprintf		1767375	0					
ANR	1767568	ArgumentList	D_PROCFAMILY		1767375	1					
ANR	1767569	Argument	D_PROCFAMILY		1767375	0					
ANR	1767570	Identifier	D_PROCFAMILY		1767375	0					
ANR	1767571	Argument	"""KillFamily::safe_kill: Send_Signal(%d,%d) failed\\n"""		1767375	1					
ANR	1767572	PrimaryExpression	"""KillFamily::safe_kill: Send_Signal(%d,%d) failed\\n"""		1767375	0					
ANR	1767573	Argument	inpid		1767375	2					
ANR	1767574	Identifier	inpid		1767375	0					
ANR	1767575	Argument	sig		1767375	3					
ANR	1767576	Identifier	sig		1767375	0					
ANR	1767577	ElseStatement	else		1767375	0					
ANR	1767578	CompoundStatement		59:9:1269:1269	1767375	0					
ANR	1767579	Statement	dprintf	200:3:4396:4402	1767375	0	True				
ANR	1767580	Statement	(	200:10:4403:4403	1767375	1	True				
ANR	1767581	Statement	D_PROCFAMILY	200:11:4404:4415	1767375	2	True				
ANR	1767582	Statement	","	200:23:4416:4416	1767375	3	True				
ANR	1767583	Statement	"""Procfamily: getProcInfo() failed to """	200:25:4418:4455	1767375	4	True				
ANR	1767584	Statement	"""get info for pid %d, so it is presumed dead.\\n"""	201:5:4462:4509	1767375	5	True				
ANR	1767585	Statement	","	201:53:4510:4510	1767375	6	True				
ANR	1767586	Statement	inpid	201:55:4512:4516	1767375	7	True				
ANR	1767587	Statement	)	201:60:4517:4517	1767375	8	True				
ANR	1767588	ExpressionStatement		201:61:4518:4518	1767375	9	True				
ANR	1767589	IfStatement	if ( pi )		1767375	7					
ANR	1767590	Condition	pi	204:7:4532:4533	1767375	0	True				
ANR	1767591	Identifier	pi		1767375	0					
ANR	1767592	CompoundStatement		68:12:1513:1513	1767375	1					
ANR	1767593	Statement	delete	205:3:4542:4547	1767375	0	True				
ANR	1767594	ExpressionStatement	pi	205:10:4549:4551	1767375	1	True				
ANR	1767595	Identifier	pi		1767375	0					
ANR	1767596	IfStatement	if ( pHnd )		1767375	8					
ANR	1767597	Condition	pHnd	208:7:4565:4568	1767375	0	True				
ANR	1767598	Identifier	pHnd		1767375	0					
ANR	1767599	CompoundStatement		72:13:1547:1547	1767375	1					
ANR	1767600	ExpressionStatement	CloseHandle ( pHnd )	209:6:4579:4596	1767375	0	True				
ANR	1767601	CallExpression	CloseHandle ( pHnd )		1767375	0					
ANR	1767602	Callee	CloseHandle		1767375	0					
ANR	1767603	Identifier	CloseHandle		1767375	0					
ANR	1767604	ArgumentList	pHnd		1767375	1					
ANR	1767605	Argument	pHnd		1767375	0					
ANR	1767606	Identifier	pHnd		1767375	0					
ANR	1767607	ExpressionStatement	set_priv ( priv )	221:1:4773:4787	1767375	7	True				
ANR	1767608	CallExpression	set_priv ( priv )		1767375	0					
ANR	1767609	Callee	set_priv		1767375	0					
ANR	1767610	Identifier	set_priv		1767375	0					
ANR	1767611	ArgumentList	priv		1767375	1					
ANR	1767612	Argument	priv		1767375	0					
ANR	1767613	Identifier	priv		1767375	0					
ANR	1767614	ReturnType	void		1767375	1					
ANR	1767615	Identifier	KillFamily :: safe_kill		1767375	2					
ANR	1767616	ParameterList	"a_pid * pid , int sig"		1767375	3					
ANR	1767617	Parameter	a_pid * pid	136:22:3002:3011	1767375	0	True				
ANR	1767618	ParameterType	a_pid *		1767375	0					
ANR	1767619	Identifier	pid		1767375	1					
ANR	1767620	Parameter	int sig	136:34:3014:3020	1767375	1	True				
ANR	1767621	ParameterType	int		1767375	0					
ANR	1767622	Identifier	sig		1767375	1					
ANR	1767623	CFGEntryNode	ENTRY		1767375		True				
ANR	1767624	CFGExitNode	EXIT		1767375		True				
ANR	1767625	Symbol	test_only_flag		1767375						
ANR	1767626	Symbol	pid -> pid		1767375						
ANR	1767627	Symbol	D_PROCFAMILY		1767375						
ANR	1767628	Symbol	NULL		1767375						
ANR	1767629	Symbol	mypriv		1767375						
ANR	1767630	Symbol	D_ALWAYS		1767375						
ANR	1767631	Symbol	PROCAPI_SUCCESS		1767375						
ANR	1767632	Symbol	pid		1767375						
ANR	1767633	Symbol	sig		1767375						
ANR	1767634	Symbol	set_priv		1767375						
ANR	1767635	Symbol	ProcAPI :: getProcInfo		1767375						
ANR	1767636	Symbol	daemonCore -> Send_Signal		1767375						
ANR	1767637	Symbol	* pid		1767375						
ANR	1767638	Symbol	* daemonCore		1767375						
ANR	1767639	Symbol	daemonCore		1767375						
ANR	1767640	Symbol	pi		1767375						
ANR	1767641	Symbol	pHnd		1767375						
ANR	1767642	Symbol	FALSE		1767375						
ANR	1767643	Symbol	priv		1767375						
ANR	1767644	Symbol	PROCESS_QUERY_INFORMATION		1767375						
ANR	1767645	Symbol	inpid		1767375						
ANR	1767646	Symbol	OpenProcess		1767375						
ANR	1767647	Symbol	daddy_pid		1767375						
ANR	1767648	Symbol	status		1767375						
ANR	1767649	Function	KillFamily :: spree	225:0:4793:5291							
ANR	1767650	FunctionDef	"KillFamily :: spree (int sig , KILLFAMILY_DIRECTION direction)"		1767649	0					
ANR	1767651	CompoundStatement		227:0:4856:5291	1767649	0					
ANR	1767652	IdentifierDeclStatement	int start = 0 ;	228:1:4859:4872	1767649	0	True				
ANR	1767653	IdentifierDecl	start = 0		1767649	0					
ANR	1767654	IdentifierDeclType	int		1767649	0					
ANR	1767655	Identifier	start		1767649	1					
ANR	1767656	AssignmentExpression	start = 0		1767649	2		=			
ANR	1767657	Identifier	start		1767649	0					
ANR	1767658	PrimaryExpression	0		1767649	1					
ANR	1767659	IdentifierDeclStatement	int i = - 1 ;	229:1:4875:4885	1767649	1	True				
ANR	1767660	IdentifierDecl	i = - 1		1767649	0					
ANR	1767661	IdentifierDeclType	int		1767649	0					
ANR	1767662	Identifier	i		1767649	1					
ANR	1767663	AssignmentExpression	i = - 1		1767649	2		=			
ANR	1767664	Identifier	i		1767649	0					
ANR	1767665	UnaryOperationExpression	- 1		1767649	1					
ANR	1767666	UnaryOperator	-		1767649	0					
ANR	1767667	PrimaryExpression	1		1767649	1					
ANR	1767668	IdentifierDeclStatement	int j ;	230:1:4888:4893	1767649	2	True				
ANR	1767669	IdentifierDecl	j		1767649	0					
ANR	1767670	IdentifierDeclType	int		1767649	0					
ANR	1767671	Identifier	j		1767649	1					
ANR	1767672	DoStatement	do		1767649	3					
ANR	1767673	CompoundStatement		6:4:43:43	1767649	0					
ANR	1767674	ExpressionStatement	i ++	233:2:4904:4907	1767649	0	True				
ANR	1767675	PostIncDecOperationExpression	i ++		1767649	0					
ANR	1767676	Identifier	i		1767649	0					
ANR	1767677	IncDec	++		1767649	1					
ANR	1767678	IfStatement	if ( ( * old_pids ) [ i ] . ppid == 1 || ( * old_pids ) [ i ] . pid == 0 )		1767649	1					
ANR	1767679	Condition	( * old_pids ) [ i ] . ppid == 1 || ( * old_pids ) [ i ] . pid == 0	234:7:4916:4966	1767649	0	True				
ANR	1767680	OrExpression	( * old_pids ) [ i ] . ppid == 1 || ( * old_pids ) [ i ] . pid == 0		1767649	0		||			
ANR	1767681	EqualityExpression	( * old_pids ) [ i ] . ppid == 1		1767649	0		==			
ANR	1767682	MemberAccess	( * old_pids ) [ i ] . ppid		1767649	0					
ANR	1767683	ArrayIndexing	( * old_pids ) [ i ]		1767649	0					
ANR	1767684	UnaryOperationExpression	* old_pids		1767649	0					
ANR	1767685	UnaryOperator	*		1767649	0					
ANR	1767686	Identifier	old_pids		1767649	1					
ANR	1767687	Identifier	i		1767649	1					
ANR	1767688	Identifier	ppid		1767649	1					
ANR	1767689	PrimaryExpression	1		1767649	1					
ANR	1767690	EqualityExpression	( * old_pids ) [ i ] . pid == 0		1767649	1		==			
ANR	1767691	MemberAccess	( * old_pids ) [ i ] . pid		1767649	0					
ANR	1767692	ArrayIndexing	( * old_pids ) [ i ]		1767649	0					
ANR	1767693	UnaryOperationExpression	* old_pids		1767649	0					
ANR	1767694	UnaryOperator	*		1767649	0					
ANR	1767695	Identifier	old_pids		1767649	1					
ANR	1767696	Identifier	i		1767649	1					
ANR	1767697	Identifier	pid		1767649	1					
ANR	1767698	PrimaryExpression	0		1767649	1					
ANR	1767699	CompoundStatement		8:61:113:113	1767649	1					
ANR	1767700	IfStatement	if ( direction == PATRICIDE )		1767649	0					
ANR	1767701	Condition	direction == PATRICIDE	235:8:4980:5001	1767649	0	True				
ANR	1767702	EqualityExpression	direction == PATRICIDE		1767649	0		==			
ANR	1767703	Identifier	direction		1767649	0					
ANR	1767704	Identifier	PATRICIDE		1767649	1					
ANR	1767705	CompoundStatement		9:33:148:148	1767649	1					
ANR	1767706	ForStatement	for ( j = start ; j < i ; j ++ )		1767649	0					
ANR	1767707	ForInit	j = start ;	237:9:5051:5058	1767649	0	True				
ANR	1767708	AssignmentExpression	j = start		1767649	0		=			
ANR	1767709	Identifier	j		1767649	0					
ANR	1767710	Identifier	start		1767649	1					
ANR	1767711	Condition	j < i	237:17:5059:5061	1767649	1	True				
ANR	1767712	RelationalExpression	j < i		1767649	0		<			
ANR	1767713	Identifier	j		1767649	0					
ANR	1767714	Identifier	i		1767649	1					
ANR	1767715	PostIncDecOperationExpression	j ++	237:21:5063:5065	1767649	2	True				
ANR	1767716	Identifier	j		1767649	0					
ANR	1767717	IncDec	++		1767649	1					
ANR	1767718	CompoundStatement		11:26:211:211	1767649	3					
ANR	1767719	ExpressionStatement	"safe_kill ( & ( * old_pids ) [ j ] , sig )"	238:5:5075:5106	1767649	0	True				
ANR	1767720	CallExpression	"safe_kill ( & ( * old_pids ) [ j ] , sig )"		1767649	0					
ANR	1767721	Callee	safe_kill		1767649	0					
ANR	1767722	Identifier	safe_kill		1767649	0					
ANR	1767723	ArgumentList	& ( * old_pids ) [ j ]		1767649	1					
ANR	1767724	Argument	& ( * old_pids ) [ j ]		1767649	0					
ANR	1767725	UnaryOperationExpression	& ( * old_pids ) [ j ]		1767649	0					
ANR	1767726	UnaryOperator	&		1767649	0					
ANR	1767727	ArrayIndexing	( * old_pids ) [ j ]		1767649	1					
ANR	1767728	UnaryOperationExpression	* old_pids		1767649	0					
ANR	1767729	UnaryOperator	*		1767649	0					
ANR	1767730	Identifier	old_pids		1767649	1					
ANR	1767731	Identifier	j		1767649	1					
ANR	1767732	Argument	sig		1767649	1					
ANR	1767733	Identifier	sig		1767649	0					
ANR	1767734	ElseStatement	else		1767649	0					
ANR	1767735	CompoundStatement		14:10:267:267	1767649	0					
ANR	1767736	ForStatement	for ( j = i - 1 ; j >= start ; j -- )		1767649	0					
ANR	1767737	ForInit	j = i - 1 ;	242:9:5169:5174	1767649	0	True				
ANR	1767738	AssignmentExpression	j = i - 1		1767649	0		=			
ANR	1767739	Identifier	j		1767649	0					
ANR	1767740	AdditiveExpression	i - 1		1767649	1		-			
ANR	1767741	Identifier	i		1767649	0					
ANR	1767742	PrimaryExpression	1		1767649	1					
ANR	1767743	Condition	j >= start	242:15:5175:5182	1767649	1	True				
ANR	1767744	RelationalExpression	j >= start		1767649	0		>=			
ANR	1767745	Identifier	j		1767649	0					
ANR	1767746	Identifier	start		1767649	1					
ANR	1767747	PostIncDecOperationExpression	j --	242:24:5184:5186	1767649	2	True				
ANR	1767748	Identifier	j		1767649	0					
ANR	1767749	IncDec	--		1767649	1					
ANR	1767750	CompoundStatement		16:29:332:332	1767649	3					
ANR	1767751	ExpressionStatement	"safe_kill ( & ( * old_pids ) [ j ] , sig )"	243:5:5196:5227	1767649	0	True				
ANR	1767752	CallExpression	"safe_kill ( & ( * old_pids ) [ j ] , sig )"		1767649	0					
ANR	1767753	Callee	safe_kill		1767649	0					
ANR	1767754	Identifier	safe_kill		1767649	0					
ANR	1767755	ArgumentList	& ( * old_pids ) [ j ]		1767649	1					
ANR	1767756	Argument	& ( * old_pids ) [ j ]		1767649	0					
ANR	1767757	UnaryOperationExpression	& ( * old_pids ) [ j ]		1767649	0					
ANR	1767758	UnaryOperator	&		1767649	0					
ANR	1767759	ArrayIndexing	( * old_pids ) [ j ]		1767649	1					
ANR	1767760	UnaryOperationExpression	* old_pids		1767649	0					
ANR	1767761	UnaryOperator	*		1767649	0					
ANR	1767762	Identifier	old_pids		1767649	1					
ANR	1767763	Identifier	j		1767649	1					
ANR	1767764	Argument	sig		1767649	1					
ANR	1767765	Identifier	sig		1767649	0					
ANR	1767766	ExpressionStatement	start = i	246:3:5243:5252	1767649	1	True				
ANR	1767767	AssignmentExpression	start = i		1767649	0		=			
ANR	1767768	Identifier	start		1767649	0					
ANR	1767769	Identifier	i		1767649	1					
ANR	1767770	Condition	( * old_pids ) [ i ] . pid	248:11:5269:5286	1767649	1	True				
ANR	1767771	MemberAccess	( * old_pids ) [ i ] . pid		1767649	0					
ANR	1767772	ArrayIndexing	( * old_pids ) [ i ]		1767649	0					
ANR	1767773	UnaryOperationExpression	* old_pids		1767649	0					
ANR	1767774	UnaryOperator	*		1767649	0					
ANR	1767775	Identifier	old_pids		1767649	1					
ANR	1767776	Identifier	i		1767649	1					
ANR	1767777	Identifier	pid		1767649	1					
ANR	1767778	ReturnType	void		1767649	1					
ANR	1767779	Identifier	KillFamily :: spree		1767649	2					
ANR	1767780	ParameterList	"int sig , KILLFAMILY_DIRECTION direction"		1767649	3					
ANR	1767781	Parameter	int sig	226:18:4816:4822	1767649	0	True				
ANR	1767782	ParameterType	int		1767649	0					
ANR	1767783	Identifier	sig		1767649	1					
ANR	1767784	Parameter	KILLFAMILY_DIRECTION direction	226:26:4824:4853	1767649	1	True				
ANR	1767785	ParameterType	KILLFAMILY_DIRECTION		1767649	0					
ANR	1767786	Identifier	direction		1767649	1					
ANR	1767787	CFGEntryNode	ENTRY		1767649		True				
ANR	1767788	CFGExitNode	EXIT		1767649		True				
ANR	1767789	Symbol	sig		1767649						
ANR	1767790	Symbol	* * old_pids		1767649						
ANR	1767791	Symbol	( * old_pids ) [ i ] . ppid		1767649						
ANR	1767792	Symbol	* i		1767649						
ANR	1767793	Symbol	( * old_pids ) [ i ] . pid		1767649						
ANR	1767794	Symbol	* old_pids		1767649						
ANR	1767795	Symbol	old_pids		1767649						
ANR	1767796	Symbol	start		1767649						
ANR	1767797	Symbol	i		1767649						
ANR	1767798	Symbol	j		1767649						
ANR	1767799	Symbol	PATRICIDE		1767649						
ANR	1767800	Symbol	direction		1767649						
ANR	1767801	Function	KillFamily :: takesnapshot	251:0:5294:13025							
ANR	1767802	FunctionDef	KillFamily :: takesnapshot ()		1767801	0					
ANR	1767803	CompoundStatement		253:0:5326:13025	1767801	0					
ANR	1767804	IdentifierDeclStatement	ExtArray < a_pid > * new_pids ;	254:1:5329:5354	1767801	0	True				
ANR	1767805	IdentifierDecl	* new_pids		1767801	0					
ANR	1767806	IdentifierDeclType	ExtArray < a_pid > *		1767801	0					
ANR	1767807	Identifier	new_pids		1767801	1					
ANR	1767808	IdentifierDeclStatement	struct procInfo * pinfo = NULL ;	255:1:5357:5386	1767801	1	True				
ANR	1767809	IdentifierDecl	* pinfo = NULL		1767801	0					
ANR	1767810	IdentifierDeclType	struct procInfo *		1767801	0					
ANR	1767811	Identifier	pinfo		1767801	1					
ANR	1767812	AssignmentExpression	* pinfo = NULL		1767801	2		=			
ANR	1767813	Identifier	NULL		1767801	0					
ANR	1767814	Identifier	NULL		1767801	1					
ANR	1767815	IdentifierDeclStatement	"int i , j , newpidindex ;"	256:1:5389:5408	1767801	2	True				
ANR	1767816	IdentifierDecl	i		1767801	0					
ANR	1767817	IdentifierDeclType	int		1767801	0					
ANR	1767818	Identifier	i		1767801	1					
ANR	1767819	IdentifierDecl	j		1767801	1					
ANR	1767820	IdentifierDeclType	int		1767801	0					
ANR	1767821	Identifier	j		1767801	1					
ANR	1767822	IdentifierDecl	newpidindex		1767801	2					
ANR	1767823	IdentifierDeclType	int		1767801	0					
ANR	1767824	Identifier	newpidindex		1767801	1					
ANR	1767825	IdentifierDeclStatement	pid_t currpid ;	257:1:5411:5424	1767801	3	True				
ANR	1767826	IdentifierDecl	currpid		1767801	0					
ANR	1767827	IdentifierDeclType	pid_t		1767801	0					
ANR	1767828	Identifier	currpid		1767801	1					
ANR	1767829	IdentifierDeclStatement	priv_state priv ;	258:1:5427:5442	1767801	4	True				
ANR	1767830	IdentifierDecl	priv		1767801	0					
ANR	1767831	IdentifierDeclType	priv_state		1767801	0					
ANR	1767832	Identifier	priv		1767801	1					
ANR	1767833	IdentifierDeclStatement	bool currpid_exited ;	259:1:5445:5464	1767801	5	True				
ANR	1767834	IdentifierDecl	currpid_exited		1767801	0					
ANR	1767835	IdentifierDeclType	bool		1767801	0					
ANR	1767836	Identifier	currpid_exited		1767801	1					
ANR	1767837	IdentifierDeclStatement	bool found_it ;	260:1:5467:5480	1767801	6	True				
ANR	1767838	IdentifierDecl	found_it		1767801	0					
ANR	1767839	IdentifierDeclType	bool		1767801	0					
ANR	1767840	Identifier	found_it		1767801	1					
ANR	1767841	IdentifierDeclStatement	int ret_val ;	261:1:5483:5494	1767801	7	True				
ANR	1767842	IdentifierDecl	ret_val		1767801	0					
ANR	1767843	IdentifierDeclType	int		1767801	0					
ANR	1767844	Identifier	ret_val		1767801	1					
ANR	1767845	IdentifierDeclStatement	int fam_status ;	262:1:5497:5511	1767801	8	True				
ANR	1767846	IdentifierDecl	fam_status		1767801	0					
ANR	1767847	IdentifierDeclType	int		1767801	0					
ANR	1767848	Identifier	fam_status		1767801	1					
ANR	1767849	IdentifierDeclStatement	int info_status ;	263:1:5514:5529	1767801	9	True				
ANR	1767850	IdentifierDecl	info_status		1767801	0					
ANR	1767851	IdentifierDeclType	int		1767801	0					
ANR	1767852	Identifier	info_status		1767801	1					
ANR	1767853	IdentifierDeclStatement	int ignore_status ;	264:1:5532:5549	1767801	10	True				
ANR	1767854	IdentifierDecl	ignore_status		1767801	0					
ANR	1767855	IdentifierDeclType	int		1767801	0					
ANR	1767856	Identifier	ignore_status		1767801	1					
ANR	1767857	IdentifierDeclStatement	ExtArray < pid_t > pidfamily ;	266:1:5553:5578	1767801	11	True				
ANR	1767858	IdentifierDecl	pidfamily		1767801	0					
ANR	1767859	IdentifierDeclType	ExtArray < pid_t >		1767801	0					
ANR	1767860	Identifier	pidfamily		1767801	1					
ANR	1767861	Statement	new_pids	268:1:5582:5589	1767801	12	True				
ANR	1767862	Statement	=	268:10:5591:5591	1767801	13	True				
ANR	1767863	Statement	new	268:12:5593:5595	1767801	14	True				
ANR	1767864	Statement	ExtArray	268:16:5597:5604	1767801	15	True				
ANR	1767865	Statement	<	268:24:5605:5605	1767801	16	True				
ANR	1767866	Statement	a_pid	268:25:5606:5610	1767801	17	True				
ANR	1767867	Statement	>	268:30:5611:5611	1767801	18	True				
ANR	1767868	ExpressionStatement		268:31:5612:5612	1767801	19	True				
ANR	1767869	ExpressionStatement	newpidindex = 0	269:1:5615:5630	1767801	20	True				
ANR	1767870	AssignmentExpression	newpidindex = 0		1767801	0		=			
ANR	1767871	Identifier	newpidindex		1767801	0					
ANR	1767872	PrimaryExpression	0		1767801	1					
ANR	1767873	ExpressionStatement	priv = set_root_priv ( )	279:1:6213:6235	1767801	21	True				
ANR	1767874	AssignmentExpression	priv = set_root_priv ( )		1767801	0		=			
ANR	1767875	Identifier	priv		1767801	0					
ANR	1767876	CallExpression	set_root_priv ( )		1767801	1					
ANR	1767877	Callee	set_root_priv		1767801	0					
ANR	1767878	Identifier	set_root_priv		1767801	0					
ANR	1767879	ArgumentList			1767801	1					
ANR	1767880	IfStatement	if ( searchLogin )		1767801	22					
ANR	1767881	Condition	searchLogin	282:6:6291:6301	1767801	0	True				
ANR	1767882	Identifier	searchLogin		1767801	0					
ANR	1767883	CompoundStatement		30:20:978:978	1767801	1					
ANR	1767884	ExpressionStatement	"ret_val = ProcAPI :: getPidFamilyByLogin ( searchLogin , pidfamily )"	283:2:6309:6370	1767801	0	True				
ANR	1767885	AssignmentExpression	"ret_val = ProcAPI :: getPidFamilyByLogin ( searchLogin , pidfamily )"		1767801	0		=			
ANR	1767886	Identifier	ret_val		1767801	0					
ANR	1767887	CallExpression	"ProcAPI :: getPidFamilyByLogin ( searchLogin , pidfamily )"		1767801	1					
ANR	1767888	Callee	ProcAPI :: getPidFamilyByLogin		1767801	0					
ANR	1767889	Identifier	ProcAPI :: getPidFamilyByLogin		1767801	0					
ANR	1767890	ArgumentList	searchLogin		1767801	1					
ANR	1767891	Argument	searchLogin		1767801	0					
ANR	1767892	Identifier	searchLogin		1767801	0					
ANR	1767893	Argument	pidfamily		1767801	1					
ANR	1767894	Identifier	pidfamily		1767801	0					
ANR	1767895	ElseStatement	else		1767801	0					
ANR	1767896	CompoundStatement		32:8:1053:1053	1767801	0					
ANR	1767897	ExpressionStatement	"ret_val = ProcAPI :: getPidFamily ( daddy_pid , & m_penvid , pidfamily , fam_status )"	285:2:6384:6457	1767801	0	True				
ANR	1767898	AssignmentExpression	"ret_val = ProcAPI :: getPidFamily ( daddy_pid , & m_penvid , pidfamily , fam_status )"		1767801	0		=			
ANR	1767899	Identifier	ret_val		1767801	0					
ANR	1767900	CallExpression	"ProcAPI :: getPidFamily ( daddy_pid , & m_penvid , pidfamily , fam_status )"		1767801	1					
ANR	1767901	Callee	ProcAPI :: getPidFamily		1767801	0					
ANR	1767902	Identifier	ProcAPI :: getPidFamily		1767801	0					
ANR	1767903	ArgumentList	daddy_pid		1767801	1					
ANR	1767904	Argument	daddy_pid		1767801	0					
ANR	1767905	Identifier	daddy_pid		1767801	0					
ANR	1767906	Argument	& m_penvid		1767801	1					
ANR	1767907	UnaryOperationExpression	& m_penvid		1767801	0					
ANR	1767908	UnaryOperator	&		1767801	0					
ANR	1767909	Identifier	m_penvid		1767801	1					
ANR	1767910	Argument	pidfamily		1767801	2					
ANR	1767911	Identifier	pidfamily		1767801	0					
ANR	1767912	Argument	fam_status		1767801	3					
ANR	1767913	Identifier	fam_status		1767801	0					
ANR	1767914	IfStatement	if ( ret_val == PROCAPI_FAILURE )		1767801	23					
ANR	1767915	Condition	ret_val == PROCAPI_FAILURE	288:6:6469:6494	1767801	0	True				
ANR	1767916	EqualityExpression	ret_val == PROCAPI_FAILURE		1767801	0		==			
ANR	1767917	Identifier	ret_val		1767801	0					
ANR	1767918	Identifier	PROCAPI_FAILURE		1767801	1					
ANR	1767919	CompoundStatement		36:35:1171:1171	1767801	1					
ANR	1767920	Statement	dprintf	290:2:6570:6576	1767801	0	True				
ANR	1767921	Statement	(	290:9:6577:6577	1767801	1	True				
ANR	1767922	Statement	D_PROCFAMILY	290:11:6579:6590	1767801	2	True				
ANR	1767923	Statement	","	290:23:6591:6591	1767801	3	True				
ANR	1767924	Statement	"""KillFamily::takesnapshot: getPidFamily(%d) failed. """	291:5:6598:6650	1767801	4	True				
ANR	1767925	Statement	"""Could not find the pid or any family members.\\n"""	292:5:6657:6705	1767801	5	True				
ANR	1767926	Statement	","	292:54:6706:6706	1767801	6	True				
ANR	1767927	Statement	daddy_pid	293:5:6713:6721	1767801	7	True				
ANR	1767928	Statement	)	293:15:6723:6723	1767801	8	True				
ANR	1767929	ExpressionStatement		293:16:6724:6724	1767801	9	True				
ANR	1767930	ExpressionStatement	pidfamily [ 0 ] = 0	294:2:6728:6744	1767801	10	True				
ANR	1767931	AssignmentExpression	pidfamily [ 0 ] = 0		1767801	0		=			
ANR	1767932	ArrayIndexing	pidfamily [ 0 ]		1767801	0					
ANR	1767933	Identifier	pidfamily		1767801	0					
ANR	1767934	PrimaryExpression	0		1767801	1					
ANR	1767935	PrimaryExpression	0		1767801	1					
ANR	1767936	IfStatement	if ( old_pids )		1767801	24					
ANR	1767937	Condition	old_pids	303:6:7034:7041	1767801	0	True				
ANR	1767938	Identifier	old_pids		1767801	0					
ANR	1767939	CompoundStatement		51:17:1718:1718	1767801	1					
ANR	1767940	ForStatement	for ( i = 0 ; ( * old_pids ) [ i ] . pid ; i ++ )		1767801	0					
ANR	1767941	ForInit	i = 0 ;	306:7:7083:7086	1767801	0	True				
ANR	1767942	AssignmentExpression	i = 0		1767801	0		=			
ANR	1767943	Identifier	i		1767801	0					
ANR	1767944	PrimaryExpression	0		1767801	1					
ANR	1767945	Condition	( * old_pids ) [ i ] . pid	306:11:7087:7104	1767801	1	True				
ANR	1767946	MemberAccess	( * old_pids ) [ i ] . pid		1767801	0					
ANR	1767947	ArrayIndexing	( * old_pids ) [ i ]		1767801	0					
ANR	1767948	UnaryOperationExpression	* old_pids		1767801	0					
ANR	1767949	UnaryOperator	*		1767801	0					
ANR	1767950	Identifier	old_pids		1767801	1					
ANR	1767951	Identifier	i		1767801	1					
ANR	1767952	Identifier	pid		1767801	1					
ANR	1767953	PostIncDecOperationExpression	i ++	306:30:7106:7108	1767801	2	True				
ANR	1767954	Identifier	i		1767801	0					
ANR	1767955	IncDec	++		1767801	1					
ANR	1767956	CompoundStatement		54:35:1784:1784	1767801	3					
ANR	1767957	ExpressionStatement	currpid = ( * old_pids ) [ i ] . pid	308:3:7117:7145	1767801	0	True				
ANR	1767958	AssignmentExpression	currpid = ( * old_pids ) [ i ] . pid		1767801	0		=			
ANR	1767959	Identifier	currpid		1767801	0					
ANR	1767960	MemberAccess	( * old_pids ) [ i ] . pid		1767801	1					
ANR	1767961	ArrayIndexing	( * old_pids ) [ i ]		1767801	0					
ANR	1767962	UnaryOperationExpression	* old_pids		1767801	0					
ANR	1767963	UnaryOperator	*		1767801	0					
ANR	1767964	Identifier	old_pids		1767801	1					
ANR	1767965	Identifier	i		1767801	1					
ANR	1767966	Identifier	pid		1767801	1					
ANR	1767967	ExpressionStatement	currpid_exited = true	311:3:7212:7233	1767801	1	True				
ANR	1767968	AssignmentExpression	currpid_exited = true		1767801	0		=			
ANR	1767969	Identifier	currpid_exited		1767801	0					
ANR	1767970	Identifier	true		1767801	1					
ANR	1767971	ExpressionStatement	found_it = false	312:3:7238:7254	1767801	2	True				
ANR	1767972	AssignmentExpression	found_it = false		1767801	0		=			
ANR	1767973	Identifier	found_it		1767801	0					
ANR	1767974	Identifier	false		1767801	1					
ANR	1767975	ForStatement	for ( j = 0 ; ; j ++ )		1767801	3					
ANR	1767976	ForInit	j = 0 ;	315:8:7309:7313	1767801	0	True				
ANR	1767977	AssignmentExpression	j = 0		1767801	0		=			
ANR	1767978	Identifier	j		1767801	0					
ANR	1767979	PrimaryExpression	0		1767801	1					
ANR	1767980	PostIncDecOperationExpression	j ++	315:15:7316:7318	1767801	1	True				
ANR	1767981	Identifier	j		1767801	0					
ANR	1767982	IncDec	++		1767801	1					
ANR	1767983	CompoundStatement		63:21:1995:1995	1767801	2					
ANR	1767984	IfStatement	if ( pidfamily [ j ] == currpid )		1767801	0					
ANR	1767985	Condition	pidfamily [ j ] == currpid	316:8:7332:7354	1767801	0	True				
ANR	1767986	EqualityExpression	pidfamily [ j ] == currpid		1767801	0		==			
ANR	1767987	ArrayIndexing	pidfamily [ j ]		1767801	0					
ANR	1767988	Identifier	pidfamily		1767801	0					
ANR	1767989	Identifier	j		1767801	1					
ANR	1767990	Identifier	currpid		1767801	1					
ANR	1767991	CompoundStatement		64:34:2031:2031	1767801	1					
ANR	1767992	ExpressionStatement	currpid_exited = false	318:5:7413:7435	1767801	0	True				
ANR	1767993	AssignmentExpression	currpid_exited = false		1767801	0		=			
ANR	1767994	Identifier	currpid_exited		1767801	0					
ANR	1767995	Identifier	false		1767801	1					
ANR	1767996	ExpressionStatement	found_it = true	319:5:7442:7457	1767801	1	True				
ANR	1767997	AssignmentExpression	found_it = true		1767801	0		=			
ANR	1767998	Identifier	found_it		1767801	0					
ANR	1767999	Identifier	true		1767801	1					
ANR	1768000	BreakStatement	break ;	322:5:7565:7570	1767801	2	True				
ANR	1768001	IfStatement	if ( pidfamily [ j ] == 0 )		1767801	1					
ANR	1768002	Condition	pidfamily [ j ] == 0	324:8:7586:7602	1767801	0	True				
ANR	1768003	EqualityExpression	pidfamily [ j ] == 0		1767801	0		==			
ANR	1768004	ArrayIndexing	pidfamily [ j ]		1767801	0					
ANR	1768005	Identifier	pidfamily		1767801	0					
ANR	1768006	Identifier	j		1767801	1					
ANR	1768007	PrimaryExpression	0		1767801	1					
ANR	1768008	CompoundStatement		72:28:2279:2279	1767801	1					
ANR	1768009	ExpressionStatement	found_it = false	327:5:7673:7689	1767801	0	True				
ANR	1768010	AssignmentExpression	found_it = false		1767801	0		=			
ANR	1768011	Identifier	found_it		1767801	0					
ANR	1768012	Identifier	false		1767801	1					
ANR	1768013	IfStatement	"if ( ProcAPI :: getProcInfo ( currpid , pinfo , info_status ) == PROCAPI_SUCCESS )"		1767801	1					
ANR	1768014	Condition	"ProcAPI :: getProcInfo ( currpid , pinfo , info_status ) == PROCAPI_SUCCESS"	338:10:8104:8176	1767801	0	True				
ANR	1768015	EqualityExpression	"ProcAPI :: getProcInfo ( currpid , pinfo , info_status ) == PROCAPI_SUCCESS"		1767801	0		==			
ANR	1768016	CallExpression	"ProcAPI :: getProcInfo ( currpid , pinfo , info_status )"		1767801	0					
ANR	1768017	Callee	ProcAPI :: getProcInfo		1767801	0					
ANR	1768018	Identifier	ProcAPI :: getProcInfo		1767801	0					
ANR	1768019	ArgumentList	currpid		1767801	1					
ANR	1768020	Argument	currpid		1767801	0					
ANR	1768021	Identifier	currpid		1767801	0					
ANR	1768022	Argument	pinfo		1767801	1					
ANR	1768023	Identifier	pinfo		1767801	0					
ANR	1768024	Argument	info_status		1767801	2					
ANR	1768025	Identifier	info_status		1767801	0					
ANR	1768026	Identifier	PROCAPI_SUCCESS		1767801	1					
ANR	1768027	CompoundStatement		88:5:2858:2858	1767801	1					
ANR	1768028	IfStatement	if ( pinfo -> birthday == ( * old_pids ) [ i ] . birthday )		1767801	0					
ANR	1768029	Condition	pinfo -> birthday == ( * old_pids ) [ i ] . birthday	342:11:8225:8266	1767801	0	True				
ANR	1768030	EqualityExpression	pinfo -> birthday == ( * old_pids ) [ i ] . birthday		1767801	0		==			
ANR	1768031	PtrMemberAccess	pinfo -> birthday		1767801	0					
ANR	1768032	Identifier	pinfo		1767801	0					
ANR	1768033	Identifier	birthday		1767801	1					
ANR	1768034	MemberAccess	( * old_pids ) [ i ] . birthday		1767801	1					
ANR	1768035	ArrayIndexing	( * old_pids ) [ i ]		1767801	0					
ANR	1768036	UnaryOperationExpression	* old_pids		1767801	0					
ANR	1768037	UnaryOperator	*		1767801	0					
ANR	1768038	Identifier	old_pids		1767801	1					
ANR	1768039	Identifier	i		1767801	1					
ANR	1768040	Identifier	birthday		1767801	1					
ANR	1768041	CompoundStatement		90:56:2943:2943	1767801	1					
ANR	1768042	ExpressionStatement	pidfamily [ j ] = currpid	346:7:8378:8400	1767801	0	True				
ANR	1768043	AssignmentExpression	pidfamily [ j ] = currpid		1767801	0		=			
ANR	1768044	ArrayIndexing	pidfamily [ j ]		1767801	0					
ANR	1768045	Identifier	pidfamily		1767801	0					
ANR	1768046	Identifier	j		1767801	1					
ANR	1768047	Identifier	currpid		1767801	1					
ANR	1768048	ExpressionStatement	j ++	347:7:8409:8412	1767801	1	True				
ANR	1768049	PostIncDecOperationExpression	j ++		1767801	0					
ANR	1768050	Identifier	j		1767801	0					
ANR	1768051	IncDec	++		1767801	1					
ANR	1768052	IfStatement	if ( ! searchLogin )		1767801	2					
ANR	1768053	Condition	! searchLogin	351:12:8519:8530	1767801	0	True				
ANR	1768054	UnaryOperationExpression	! searchLogin		1767801	0					
ANR	1768055	UnaryOperator	!		1767801	0					
ANR	1768056	Identifier	searchLogin		1767801	1					
ANR	1768057	CompoundStatement		100:8:3217:3248	1767801	1					
ANR	1768058	IdentifierDeclStatement	ExtArray < pid_t > detached_family ;	352:8:8544:8575	1767801	0	True				
ANR	1768059	IdentifierDecl	detached_family		1767801	0					
ANR	1768060	IdentifierDeclType	ExtArray < pid_t >		1767801	0					
ANR	1768061	Identifier	detached_family		1767801	1					
ANR	1768062	ExpressionStatement	detached_family [ 0 ] = 0	353:8:8585:8607	1767801	1	True				
ANR	1768063	AssignmentExpression	detached_family [ 0 ] = 0		1767801	0		=			
ANR	1768064	ArrayIndexing	detached_family [ 0 ]		1767801	0					
ANR	1768065	Identifier	detached_family		1767801	0					
ANR	1768066	PrimaryExpression	0		1767801	1					
ANR	1768067	PrimaryExpression	0		1767801	1					
ANR	1768068	IfStatement	"if ( ProcAPI :: getPidFamily ( currpid , & m_penvid , detached_family , ignore_status ) != PROCAPI_FAILURE )"		1767801	2					
ANR	1768069	Condition	"ProcAPI :: getPidFamily ( currpid , & m_penvid , detached_family , ignore_status ) != PROCAPI_FAILURE"	354:12:8621:8709	1767801	0	True				
ANR	1768070	EqualityExpression	"ProcAPI :: getPidFamily ( currpid , & m_penvid , detached_family , ignore_status ) != PROCAPI_FAILURE"		1767801	0		!=			
ANR	1768071	CallExpression	"ProcAPI :: getPidFamily ( currpid , & m_penvid , detached_family , ignore_status )"		1767801	0					
ANR	1768072	Callee	ProcAPI :: getPidFamily		1767801	0					
ANR	1768073	Identifier	ProcAPI :: getPidFamily		1767801	0					
ANR	1768074	ArgumentList	currpid		1767801	1					
ANR	1768075	Argument	currpid		1767801	0					
ANR	1768076	Identifier	currpid		1767801	0					
ANR	1768077	Argument	& m_penvid		1767801	1					
ANR	1768078	UnaryOperationExpression	& m_penvid		1767801	0					
ANR	1768079	UnaryOperator	&		1767801	0					
ANR	1768080	Identifier	m_penvid		1767801	1					
ANR	1768081	Argument	detached_family		1767801	2					
ANR	1768082	Identifier	detached_family		1767801	0					
ANR	1768083	Argument	ignore_status		1767801	3					
ANR	1768084	Identifier	ignore_status		1767801	0					
ANR	1768085	Identifier	PROCAPI_FAILURE		1767801	1					
ANR	1768086	CompoundStatement		102:103:3385:3385	1767801	1					
ANR	1768087	ForStatement	for ( int k = 0 ; detached_family [ k ] != 0 ; k ++ )		1767801	0					
ANR	1768088	ForInit	int k = 0 ;	355:14:8728:8737	1767801	0	True				
ANR	1768089	IdentifierDeclStatement	int k = 0 ;		1767801	0					
ANR	1768090	IdentifierDecl	k = 0		1767801	0					
ANR	1768091	IdentifierDeclType	int		1767801	0					
ANR	1768092	Identifier	k		1767801	1					
ANR	1768093	AssignmentExpression	k = 0		1767801	2		=			
ANR	1768094	Identifier	k		1767801	0					
ANR	1768095	PrimaryExpression	0		1767801	1					
ANR	1768096	Condition	detached_family [ k ] != 0	355:25:8739:8761	1767801	1	True				
ANR	1768097	EqualityExpression	detached_family [ k ] != 0		1767801	0		!=			
ANR	1768098	ArrayIndexing	detached_family [ k ]		1767801	0					
ANR	1768099	Identifier	detached_family		1767801	0					
ANR	1768100	Identifier	k		1767801	1					
ANR	1768101	PrimaryExpression	0		1767801	1					
ANR	1768102	PostIncDecOperationExpression	k ++	355:50:8764:8766	1767801	2	True				
ANR	1768103	Identifier	k		1767801	0					
ANR	1768104	IncDec	++		1767801	1					
ANR	1768105	CompoundStatement		103:55:3442:3442	1767801	3					
ANR	1768106	IfStatement	if ( detached_family [ k ] != currpid )		1767801	0					
ANR	1768107	Condition	detached_family [ k ] != currpid	356:14:8785:8813	1767801	0	True				
ANR	1768108	EqualityExpression	detached_family [ k ] != currpid		1767801	0		!=			
ANR	1768109	ArrayIndexing	detached_family [ k ]		1767801	0					
ANR	1768110	Identifier	detached_family		1767801	0					
ANR	1768111	Identifier	k		1767801	1					
ANR	1768112	Identifier	currpid		1767801	1					
ANR	1768113	CompoundStatement		104:45:3489:3489	1767801	1					
ANR	1768114	ExpressionStatement	pidfamily [ j ] = detached_family [ k ]	357:11:8829:8862	1767801	0	True				
ANR	1768115	AssignmentExpression	pidfamily [ j ] = detached_family [ k ]		1767801	0		=			
ANR	1768116	ArrayIndexing	pidfamily [ j ]		1767801	0					
ANR	1768117	Identifier	pidfamily		1767801	0					
ANR	1768118	Identifier	j		1767801	1					
ANR	1768119	ArrayIndexing	detached_family [ k ]		1767801	1					
ANR	1768120	Identifier	detached_family		1767801	0					
ANR	1768121	Identifier	k		1767801	1					
ANR	1768122	ExpressionStatement	j ++	358:11:8875:8878	1767801	1	True				
ANR	1768123	PostIncDecOperationExpression	j ++		1767801	0					
ANR	1768124	Identifier	j		1767801	0					
ANR	1768125	IncDec	++		1767801	1					
ANR	1768126	ExpressionStatement	currpid_exited = false	363:9:8986:9008	1767801	1	True				
ANR	1768127	AssignmentExpression	currpid_exited = false		1767801	0		=			
ANR	1768128	Identifier	currpid_exited		1767801	0					
ANR	1768129	Identifier	false		1767801	1					
ANR	1768130	ElseStatement	else		1767801	0					
ANR	1768131	CompoundStatement		112:15:3698:3698	1767801	0					
ANR	1768132	ExpressionStatement	currpid_exited = true	367:9:9127:9148	1767801	0	True				
ANR	1768133	AssignmentExpression	currpid_exited = true		1767801	0		=			
ANR	1768134	Identifier	currpid_exited		1767801	0					
ANR	1768135	Identifier	true		1767801	1					
ANR	1768136	ElseStatement	else		1767801	0					
ANR	1768137	CompoundStatement		117:14:3847:3847	1767801	0					
ANR	1768138	ExpressionStatement	currpid_exited = false	372:8:9280:9302	1767801	0	True				
ANR	1768139	AssignmentExpression	currpid_exited = false		1767801	0		=			
ANR	1768140	Identifier	currpid_exited		1767801	0					
ANR	1768141	Identifier	false		1767801	1					
ANR	1768142	ExpressionStatement	pidfamily [ j ] = 0	374:7:9320:9336	1767801	3	True				
ANR	1768143	AssignmentExpression	pidfamily [ j ] = 0		1767801	0		=			
ANR	1768144	ArrayIndexing	pidfamily [ j ]		1767801	0					
ANR	1768145	Identifier	pidfamily		1767801	0					
ANR	1768146	Identifier	j		1767801	1					
ANR	1768147	PrimaryExpression	0		1767801	1					
ANR	1768148	BreakStatement	break ;	379:5:9420:9425	1767801	2	True				
ANR	1768149	IfStatement	if ( found_it )		1767801	4					
ANR	1768150	Condition	found_it	396:8:10257:10264	1767801	0	True				
ANR	1768151	Identifier	found_it		1767801	0					
ANR	1768152	CompoundStatement		144:19:4941:4941	1767801	1					
ANR	1768153	IfStatement	"if ( ProcAPI :: getProcInfo ( currpid , pinfo , ignore_status ) == PROCAPI_SUCCESS )"		1767801	0					
ANR	1768154	Condition	"ProcAPI :: getProcInfo ( currpid , pinfo , ignore_status ) == PROCAPI_SUCCESS"	397:9:10279:10352	1767801	0	True				
ANR	1768155	EqualityExpression	"ProcAPI :: getProcInfo ( currpid , pinfo , ignore_status ) == PROCAPI_SUCCESS"		1767801	0		==			
ANR	1768156	CallExpression	"ProcAPI :: getProcInfo ( currpid , pinfo , ignore_status )"		1767801	0					
ANR	1768157	Callee	ProcAPI :: getProcInfo		1767801	0					
ANR	1768158	Identifier	ProcAPI :: getProcInfo		1767801	0					
ANR	1768159	ArgumentList	currpid		1767801	1					
ANR	1768160	Argument	currpid		1767801	0					
ANR	1768161	Identifier	currpid		1767801	0					
ANR	1768162	Argument	pinfo		1767801	1					
ANR	1768163	Identifier	pinfo		1767801	0					
ANR	1768164	Argument	ignore_status		1767801	2					
ANR	1768165	Identifier	ignore_status		1767801	0					
ANR	1768166	Identifier	PROCAPI_SUCCESS		1767801	1					
ANR	1768167	CompoundStatement		147:3:5032:5032	1767801	1					
ANR	1768168	IfStatement	if ( pinfo -> birthday != ( * old_pids ) [ i ] . birthday )		1767801	0					
ANR	1768169	Condition	pinfo -> birthday != ( * old_pids ) [ i ] . birthday	400:10:10371:10412	1767801	0	True				
ANR	1768170	EqualityExpression	pinfo -> birthday != ( * old_pids ) [ i ] . birthday		1767801	0		!=			
ANR	1768171	PtrMemberAccess	pinfo -> birthday		1767801	0					
ANR	1768172	Identifier	pinfo		1767801	0					
ANR	1768173	Identifier	birthday		1767801	1					
ANR	1768174	MemberAccess	( * old_pids ) [ i ] . birthday		1767801	1					
ANR	1768175	ArrayIndexing	( * old_pids ) [ i ]		1767801	0					
ANR	1768176	UnaryOperationExpression	* old_pids		1767801	0					
ANR	1768177	UnaryOperator	*		1767801	0					
ANR	1768178	Identifier	old_pids		1767801	1					
ANR	1768179	Identifier	i		1767801	1					
ANR	1768180	Identifier	birthday		1767801	1					
ANR	1768181	CompoundStatement		148:55:5089:5089	1767801	1					
ANR	1768182	ExpressionStatement	currpid_exited = true	404:6:10563:10584	1767801	0	True				
ANR	1768183	AssignmentExpression	currpid_exited = true		1767801	0		=			
ANR	1768184	Identifier	currpid_exited		1767801	0					
ANR	1768185	Identifier	true		1767801	1					
ANR	1768186	IfStatement	if ( currpid_exited )		1767801	5					
ANR	1768187	Condition	currpid_exited	416:8:10930:10943	1767801	0	True				
ANR	1768188	Identifier	currpid_exited		1767801	0					
ANR	1768189	CompoundStatement		164:24:5619:5619	1767801	1					
ANR	1768190	ExpressionStatement	exited_cpu_sys_time += ( * old_pids ) [ i ] . cpu_sys_time	418:4:11013:11063	1767801	0	True				
ANR	1768191	AssignmentExpression	exited_cpu_sys_time += ( * old_pids ) [ i ] . cpu_sys_time		1767801	0		+=			
ANR	1768192	Identifier	exited_cpu_sys_time		1767801	0					
ANR	1768193	MemberAccess	( * old_pids ) [ i ] . cpu_sys_time		1767801	1					
ANR	1768194	ArrayIndexing	( * old_pids ) [ i ]		1767801	0					
ANR	1768195	UnaryOperationExpression	* old_pids		1767801	0					
ANR	1768196	UnaryOperator	*		1767801	0					
ANR	1768197	Identifier	old_pids		1767801	1					
ANR	1768198	Identifier	i		1767801	1					
ANR	1768199	Identifier	cpu_sys_time		1767801	1					
ANR	1768200	ExpressionStatement	exited_cpu_user_time += ( * old_pids ) [ i ] . cpu_user_time	419:4:11069:11121	1767801	1	True				
ANR	1768201	AssignmentExpression	exited_cpu_user_time += ( * old_pids ) [ i ] . cpu_user_time		1767801	0		+=			
ANR	1768202	Identifier	exited_cpu_user_time		1767801	0					
ANR	1768203	MemberAccess	( * old_pids ) [ i ] . cpu_user_time		1767801	1					
ANR	1768204	ArrayIndexing	( * old_pids ) [ i ]		1767801	0					
ANR	1768205	UnaryOperationExpression	* old_pids		1767801	0					
ANR	1768206	UnaryOperator	*		1767801	0					
ANR	1768207	Identifier	old_pids		1767801	1					
ANR	1768208	Identifier	i		1767801	1					
ANR	1768209	Identifier	cpu_user_time		1767801	1					
ANR	1768210	ExpressionStatement	alive_cpu_sys_time = 0	429:1:11348:11370	1767801	25	True				
ANR	1768211	AssignmentExpression	alive_cpu_sys_time = 0		1767801	0		=			
ANR	1768212	Identifier	alive_cpu_sys_time		1767801	0					
ANR	1768213	PrimaryExpression	0		1767801	1					
ANR	1768214	ExpressionStatement	alive_cpu_user_time = 0	430:1:11373:11396	1767801	26	True				
ANR	1768215	AssignmentExpression	alive_cpu_user_time = 0		1767801	0		=			
ANR	1768216	Identifier	alive_cpu_user_time		1767801	0					
ANR	1768217	PrimaryExpression	0		1767801	1					
ANR	1768218	IdentifierDeclStatement	unsigned long curr_image_size = 0 ;	431:1:11399:11432	1767801	27	True				
ANR	1768219	IdentifierDecl	curr_image_size = 0		1767801	0					
ANR	1768220	IdentifierDeclType	unsigned long		1767801	0					
ANR	1768221	Identifier	curr_image_size		1767801	1					
ANR	1768222	AssignmentExpression	curr_image_size = 0		1767801	2		=			
ANR	1768223	Identifier	curr_image_size		1767801	0					
ANR	1768224	PrimaryExpression	0		1767801	1					
ANR	1768225	ForStatement	for ( j = 0 ; pidfamily [ j ] ; j ++ )		1767801	28					
ANR	1768226	ForInit	j = 0 ;	432:7:11441:11444	1767801	0	True				
ANR	1768227	AssignmentExpression	j = 0		1767801	0		=			
ANR	1768228	Identifier	j		1767801	0					
ANR	1768229	PrimaryExpression	0		1767801	1					
ANR	1768230	Condition	pidfamily [ j ]	432:12:11446:11457	1767801	1	True				
ANR	1768231	ArrayIndexing	pidfamily [ j ]		1767801	0					
ANR	1768232	Identifier	pidfamily		1767801	0					
ANR	1768233	Identifier	j		1767801	1					
ANR	1768234	PostIncDecOperationExpression	j ++	432:26:11460:11462	1767801	2	True				
ANR	1768235	Identifier	j		1767801	0					
ANR	1768236	IncDec	++		1767801	1					
ANR	1768237	CompoundStatement		180:32:6139:6139	1767801	3					
ANR	1768238	IfStatement	"if ( ProcAPI :: getProcInfo ( pidfamily [ j ] , pinfo , ignore_status ) == PROCAPI_SUCCESS )"		1767801	0					
ANR	1768239	Condition	"ProcAPI :: getProcInfo ( pidfamily [ j ] , pinfo , ignore_status ) == PROCAPI_SUCCESS"	433:7:11475:11551	1767801	0	True				
ANR	1768240	EqualityExpression	"ProcAPI :: getProcInfo ( pidfamily [ j ] , pinfo , ignore_status ) == PROCAPI_SUCCESS"		1767801	0		==			
ANR	1768241	CallExpression	"ProcAPI :: getProcInfo ( pidfamily [ j ] , pinfo , ignore_status )"		1767801	0					
ANR	1768242	Callee	ProcAPI :: getProcInfo		1767801	0					
ANR	1768243	Identifier	ProcAPI :: getProcInfo		1767801	0					
ANR	1768244	ArgumentList	pidfamily [ j ]		1767801	1					
ANR	1768245	Argument	pidfamily [ j ]		1767801	0					
ANR	1768246	ArrayIndexing	pidfamily [ j ]		1767801	0					
ANR	1768247	Identifier	pidfamily		1767801	0					
ANR	1768248	Identifier	j		1767801	1					
ANR	1768249	Argument	pinfo		1767801	1					
ANR	1768250	Identifier	pinfo		1767801	0					
ANR	1768251	Argument	ignore_status		1767801	2					
ANR	1768252	Identifier	ignore_status		1767801	0					
ANR	1768253	Identifier	PROCAPI_SUCCESS		1767801	1					
ANR	1768254	CompoundStatement		183:2:6230:6230	1767801	1					
ANR	1768255	ExpressionStatement	( * new_pids ) [ newpidindex ] . pid = pinfo -> pid	436:3:11562:11603	1767801	0	True				
ANR	1768256	AssignmentExpression	( * new_pids ) [ newpidindex ] . pid = pinfo -> pid		1767801	0		=			
ANR	1768257	MemberAccess	( * new_pids ) [ newpidindex ] . pid		1767801	0					
ANR	1768258	ArrayIndexing	( * new_pids ) [ newpidindex ]		1767801	0					
ANR	1768259	UnaryOperationExpression	* new_pids		1767801	0					
ANR	1768260	UnaryOperator	*		1767801	0					
ANR	1768261	Identifier	new_pids		1767801	1					
ANR	1768262	Identifier	newpidindex		1767801	1					
ANR	1768263	Identifier	pid		1767801	1					
ANR	1768264	PtrMemberAccess	pinfo -> pid		1767801	1					
ANR	1768265	Identifier	pinfo		1767801	0					
ANR	1768266	Identifier	pid		1767801	1					
ANR	1768267	ExpressionStatement	( * new_pids ) [ newpidindex ] . ppid = pinfo -> ppid	437:3:11608:11651	1767801	1	True				
ANR	1768268	AssignmentExpression	( * new_pids ) [ newpidindex ] . ppid = pinfo -> ppid		1767801	0		=			
ANR	1768269	MemberAccess	( * new_pids ) [ newpidindex ] . ppid		1767801	0					
ANR	1768270	ArrayIndexing	( * new_pids ) [ newpidindex ]		1767801	0					
ANR	1768271	UnaryOperationExpression	* new_pids		1767801	0					
ANR	1768272	UnaryOperator	*		1767801	0					
ANR	1768273	Identifier	new_pids		1767801	1					
ANR	1768274	Identifier	newpidindex		1767801	1					
ANR	1768275	Identifier	ppid		1767801	1					
ANR	1768276	PtrMemberAccess	pinfo -> ppid		1767801	1					
ANR	1768277	Identifier	pinfo		1767801	0					
ANR	1768278	Identifier	ppid		1767801	1					
ANR	1768279	ExpressionStatement	( * new_pids ) [ newpidindex ] . birthday = pinfo -> birthday	438:3:11656:11707	1767801	2	True				
ANR	1768280	AssignmentExpression	( * new_pids ) [ newpidindex ] . birthday = pinfo -> birthday		1767801	0		=			
ANR	1768281	MemberAccess	( * new_pids ) [ newpidindex ] . birthday		1767801	0					
ANR	1768282	ArrayIndexing	( * new_pids ) [ newpidindex ]		1767801	0					
ANR	1768283	UnaryOperationExpression	* new_pids		1767801	0					
ANR	1768284	UnaryOperator	*		1767801	0					
ANR	1768285	Identifier	new_pids		1767801	1					
ANR	1768286	Identifier	newpidindex		1767801	1					
ANR	1768287	Identifier	birthday		1767801	1					
ANR	1768288	PtrMemberAccess	pinfo -> birthday		1767801	1					
ANR	1768289	Identifier	pinfo		1767801	0					
ANR	1768290	Identifier	birthday		1767801	1					
ANR	1768291	ExpressionStatement	( * new_pids ) [ newpidindex ] . cpu_sys_time = pinfo -> sys_time	439:3:11712:11767	1767801	3	True				
ANR	1768292	AssignmentExpression	( * new_pids ) [ newpidindex ] . cpu_sys_time = pinfo -> sys_time		1767801	0		=			
ANR	1768293	MemberAccess	( * new_pids ) [ newpidindex ] . cpu_sys_time		1767801	0					
ANR	1768294	ArrayIndexing	( * new_pids ) [ newpidindex ]		1767801	0					
ANR	1768295	UnaryOperationExpression	* new_pids		1767801	0					
ANR	1768296	UnaryOperator	*		1767801	0					
ANR	1768297	Identifier	new_pids		1767801	1					
ANR	1768298	Identifier	newpidindex		1767801	1					
ANR	1768299	Identifier	cpu_sys_time		1767801	1					
ANR	1768300	PtrMemberAccess	pinfo -> sys_time		1767801	1					
ANR	1768301	Identifier	pinfo		1767801	0					
ANR	1768302	Identifier	sys_time		1767801	1					
ANR	1768303	ExpressionStatement	( * new_pids ) [ newpidindex ] . cpu_user_time = pinfo -> user_time	440:3:11772:11829	1767801	4	True				
ANR	1768304	AssignmentExpression	( * new_pids ) [ newpidindex ] . cpu_user_time = pinfo -> user_time		1767801	0		=			
ANR	1768305	MemberAccess	( * new_pids ) [ newpidindex ] . cpu_user_time		1767801	0					
ANR	1768306	ArrayIndexing	( * new_pids ) [ newpidindex ]		1767801	0					
ANR	1768307	UnaryOperationExpression	* new_pids		1767801	0					
ANR	1768308	UnaryOperator	*		1767801	0					
ANR	1768309	Identifier	new_pids		1767801	1					
ANR	1768310	Identifier	newpidindex		1767801	1					
ANR	1768311	Identifier	cpu_user_time		1767801	1					
ANR	1768312	PtrMemberAccess	pinfo -> user_time		1767801	1					
ANR	1768313	Identifier	pinfo		1767801	0					
ANR	1768314	Identifier	user_time		1767801	1					
ANR	1768315	ExpressionStatement	alive_cpu_sys_time += pinfo -> sys_time	441:3:11834:11871	1767801	5	True				
ANR	1768316	AssignmentExpression	alive_cpu_sys_time += pinfo -> sys_time		1767801	0		+=			
ANR	1768317	Identifier	alive_cpu_sys_time		1767801	0					
ANR	1768318	PtrMemberAccess	pinfo -> sys_time		1767801	1					
ANR	1768319	Identifier	pinfo		1767801	0					
ANR	1768320	Identifier	sys_time		1767801	1					
ANR	1768321	ExpressionStatement	alive_cpu_user_time += pinfo -> user_time	442:3:11876:11915	1767801	6	True				
ANR	1768322	AssignmentExpression	alive_cpu_user_time += pinfo -> user_time		1767801	0		+=			
ANR	1768323	Identifier	alive_cpu_user_time		1767801	0					
ANR	1768324	PtrMemberAccess	pinfo -> user_time		1767801	1					
ANR	1768325	Identifier	pinfo		1767801	0					
ANR	1768326	Identifier	user_time		1767801	1					
ANR	1768327	ExpressionStatement	curr_image_size += pinfo -> rssize	450:3:12277:12309	1767801	7	True				
ANR	1768328	AssignmentExpression	curr_image_size += pinfo -> rssize		1767801	0		+=			
ANR	1768329	Identifier	curr_image_size		1767801	0					
ANR	1768330	PtrMemberAccess	pinfo -> rssize		1767801	1					
ANR	1768331	Identifier	pinfo		1767801	0					
ANR	1768332	Identifier	rssize		1767801	1					
ANR	1768333	ExpressionStatement	newpidindex ++	454:3:12365:12378	1767801	8	True				
ANR	1768334	PostIncDecOperationExpression	newpidindex ++		1767801	0					
ANR	1768335	Identifier	newpidindex		1767801	0					
ANR	1768336	IncDec	++		1767801	1					
ANR	1768337	IfStatement	if ( curr_image_size > max_image_size )		1767801	29					
ANR	1768338	Condition	curr_image_size > max_image_size	457:6:12393:12424	1767801	0	True				
ANR	1768339	RelationalExpression	curr_image_size > max_image_size		1767801	0		>			
ANR	1768340	Identifier	curr_image_size		1767801	0					
ANR	1768341	Identifier	max_image_size		1767801	1					
ANR	1768342	CompoundStatement		205:41:7101:7101	1767801	1					
ANR	1768343	ExpressionStatement	max_image_size = curr_image_size	458:2:12432:12464	1767801	0	True				
ANR	1768344	AssignmentExpression	max_image_size = curr_image_size		1767801	0		=			
ANR	1768345	Identifier	max_image_size		1767801	0					
ANR	1768346	Identifier	curr_image_size		1767801	1					
ANR	1768347	IfStatement	if ( old_pids )		1767801	30					
ANR	1768348	Condition	old_pids	463:6:12599:12606	1767801	0	True				
ANR	1768349	Identifier	old_pids		1767801	0					
ANR	1768350	CompoundStatement		211:17:7283:7283	1767801	1					
ANR	1768351	Statement	delete	464:2:12614:12619	1767801	0	True				
ANR	1768352	ExpressionStatement	old_pids	464:9:12621:12629	1767801	1	True				
ANR	1768353	Identifier	old_pids		1767801	0					
ANR	1768354	ExpressionStatement	old_pids = new_pids	466:1:12635:12654	1767801	31	True				
ANR	1768355	AssignmentExpression	old_pids = new_pids		1767801	0		=			
ANR	1768356	Identifier	old_pids		1767801	0					
ANR	1768357	Identifier	new_pids		1767801	1					
ANR	1768358	ExpressionStatement	family_size = newpidindex	470:1:12762:12787	1767801	32	True				
ANR	1768359	AssignmentExpression	family_size = newpidindex		1767801	0		=			
ANR	1768360	Identifier	family_size		1767801	0					
ANR	1768361	Identifier	newpidindex		1767801	1					
ANR	1768362	IfStatement	if ( pinfo )		1767801	33					
ANR	1768363	Condition	pinfo	473:6:12840:12844	1767801	0	True				
ANR	1768364	Identifier	pinfo		1767801	0					
ANR	1768365	CompoundStatement		221:14:7521:7521	1767801	1					
ANR	1768366	Statement	delete	474:2:12852:12857	1767801	0	True				
ANR	1768367	ExpressionStatement	pinfo	474:9:12859:12864	1767801	1	True				
ANR	1768368	Identifier	pinfo		1767801	0					
ANR	1768369	IfStatement	if ( ( DebugFlags & D_PROCFAMILY ) && ( DebugFlags & D_FULLDEBUG ) )		1767801	34					
ANR	1768370	Condition	( DebugFlags & D_PROCFAMILY ) && ( DebugFlags & D_FULLDEBUG )	477:5:12875:12931	1767801	0	True				
ANR	1768371	AndExpression	( DebugFlags & D_PROCFAMILY ) && ( DebugFlags & D_FULLDEBUG )		1767801	0		&&			
ANR	1768372	BitAndExpression	DebugFlags & D_PROCFAMILY		1767801	0		&			
ANR	1768373	Identifier	DebugFlags		1767801	0					
ANR	1768374	Identifier	D_PROCFAMILY		1767801	1					
ANR	1768375	BitAndExpression	DebugFlags & D_FULLDEBUG		1767801	1		&			
ANR	1768376	Identifier	DebugFlags		1767801	0					
ANR	1768377	Identifier	D_FULLDEBUG		1767801	1					
ANR	1768378	CompoundStatement		225:65:7608:7608	1767801	1					
ANR	1768379	ExpressionStatement	display ( )	478:2:12939:12948	1767801	0	True				
ANR	1768380	CallExpression	display ( )		1767801	0					
ANR	1768381	Callee	display		1767801	0					
ANR	1768382	Identifier	display		1767801	0					
ANR	1768383	ArgumentList			1767801	1					
ANR	1768384	ExpressionStatement	set_priv ( priv )	482:1:13009:13023	1767801	35	True				
ANR	1768385	CallExpression	set_priv ( priv )		1767801	0					
ANR	1768386	Callee	set_priv		1767801	0					
ANR	1768387	Identifier	set_priv		1767801	0					
ANR	1768388	ArgumentList	priv		1767801	1					
ANR	1768389	Argument	priv		1767801	0					
ANR	1768390	Identifier	priv		1767801	0					
ANR	1768391	ReturnType	void		1767801	1					
ANR	1768392	Identifier	KillFamily :: takesnapshot		1767801	2					
ANR	1768393	ParameterList			1767801	3					
ANR	1768394	CFGEntryNode	ENTRY		1767801		True				
ANR	1768395	CFGExitNode	EXIT		1767801		True				
ANR	1768396	InfiniteForNode	true		1767801		True				
ANR	1768397	Symbol	family_size		1767801						
ANR	1768398	Symbol	& m_penvid		1767801						
ANR	1768399	Symbol	* newpidindex		1767801						
ANR	1768400	Symbol	( * old_pids ) [ i ] . cpu_user_time		1767801						
ANR	1768401	Symbol	* new_pids		1767801						
ANR	1768402	Symbol	alive_cpu_sys_time		1767801						
ANR	1768403	Symbol	pinfo -> sys_time		1767801						
ANR	1768404	Symbol	new_pids		1767801						
ANR	1768405	Symbol	( * old_pids ) [ i ] . cpu_sys_time		1767801						
ANR	1768406	Symbol	( * new_pids ) [ newpidindex ] . ppid		1767801						
ANR	1768407	Symbol	* pinfo		1767801						
ANR	1768408	Symbol	exited_cpu_user_time		1767801						
ANR	1768409	Symbol	( * new_pids ) [ newpidindex ] . cpu_sys_time		1767801						
ANR	1768410	Symbol	* detached_family		1767801						
ANR	1768411	Symbol	curr_image_size		1767801						
ANR	1768412	Symbol	max_image_size		1767801						
ANR	1768413	Symbol	priv		1767801						
ANR	1768414	Symbol	pinfo -> birthday		1767801						
ANR	1768415	Symbol	ignore_status		1767801						
ANR	1768416	Symbol	* * new_pids		1767801						
ANR	1768417	Symbol	NULL		1767801						
ANR	1768418	Symbol	info_status		1767801						
ANR	1768419	Symbol	PROCAPI_FAILURE		1767801						
ANR	1768420	Symbol	PROCAPI_SUCCESS		1767801						
ANR	1768421	Symbol	D_FULLDEBUG		1767801						
ANR	1768422	Symbol	DebugFlags		1767801						
ANR	1768423	Symbol	alive_cpu_user_time		1767801						
ANR	1768424	Symbol	currpid		1767801						
ANR	1768425	Symbol	ProcAPI :: getProcInfo		1767801						
ANR	1768426	Symbol	( * old_pids ) [ i ] . pid		1767801						
ANR	1768427	Symbol	old_pids		1767801						
ANR	1768428	Symbol	true		1767801						
ANR	1768429	Symbol	* pidfamily		1767801						
ANR	1768430	Symbol	pinfo -> rssize		1767801						
ANR	1768431	Symbol	D_PROCFAMILY		1767801						
ANR	1768432	Symbol	pinfo		1767801						
ANR	1768433	Symbol	( * new_pids ) [ newpidindex ] . pid		1767801						
ANR	1768434	Symbol	newpidindex		1767801						
ANR	1768435	Symbol	pinfo -> pid		1767801						
ANR	1768436	Symbol	daddy_pid		1767801						
ANR	1768437	Symbol	* * old_pids		1767801						
ANR	1768438	Symbol	found_it		1767801						
ANR	1768439	Symbol	ProcAPI :: getPidFamilyByLogin		1767801						
ANR	1768440	Symbol	* old_pids		1767801						
ANR	1768441	Symbol	false		1767801						
ANR	1768442	Symbol	exited_cpu_sys_time		1767801						
ANR	1768443	Symbol	i		1767801						
ANR	1768444	Symbol	j		1767801						
ANR	1768445	Symbol	set_root_priv		1767801						
ANR	1768446	Symbol	ProcAPI :: getPidFamily		1767801						
ANR	1768447	Symbol	k		1767801						
ANR	1768448	Symbol	ret_val		1767801						
ANR	1768449	Symbol	searchLogin		1767801						
ANR	1768450	Symbol	( * old_pids ) [ i ] . birthday		1767801						
ANR	1768451	Symbol	pinfo -> ppid		1767801						
ANR	1768452	Symbol	( * new_pids ) [ newpidindex ] . birthday		1767801						
ANR	1768453	Symbol	( * new_pids ) [ newpidindex ] . cpu_user_time		1767801						
ANR	1768454	Symbol	fam_status		1767801						
ANR	1768455	Symbol	* i		1767801						
ANR	1768456	Symbol	* j		1767801						
ANR	1768457	Symbol	* k		1767801						
ANR	1768458	Symbol	detached_family		1767801						
ANR	1768459	Symbol	pinfo -> user_time		1767801						
ANR	1768460	Symbol	currpid_exited		1767801						
ANR	1768461	Symbol	pidfamily		1767801						
ANR	1768462	Function	KillFamily :: currentfamily	486:0:13029:13829							
ANR	1768463	FunctionDef	KillFamily :: currentfamily (pid_t * & ptr)		1768462	0					
ANR	1768464	CompoundStatement		488:0:13076:13829	1768462	0					
ANR	1768465	IdentifierDeclStatement	pid_t * tmp ;	489:1:13079:13089	1768462	0	True				
ANR	1768466	IdentifierDecl	* tmp		1768462	0					
ANR	1768467	IdentifierDeclType	pid_t *		1768462	0					
ANR	1768468	Identifier	tmp		1768462	1					
ANR	1768469	IdentifierDeclStatement	int i ;	490:1:13092:13097	1768462	1	True				
ANR	1768470	IdentifierDecl	i		1768462	0					
ANR	1768471	IdentifierDeclType	int		1768462	0					
ANR	1768472	Identifier	i		1768462	1					
ANR	1768473	IfStatement	if ( family_size <= 0 )		1768462	2					
ANR	1768474	Condition	family_size <= 0	492:5:13105:13120	1768462	0	True				
ANR	1768475	RelationalExpression	family_size <= 0		1768462	0		<=			
ANR	1768476	Identifier	family_size		1768462	0					
ANR	1768477	PrimaryExpression	0		1768462	1					
ANR	1768478	CompoundStatement		5:24:47:47	1768462	1					
ANR	1768479	ExpressionStatement	"dprintf ( D_ALWAYS , ""KillFamily::currentfamily: WARNING: family_size is non-positive (%d)\\n"" , family_size )"	500:2:13507:13617	1768462	0	True				
ANR	1768480	CallExpression	"dprintf ( D_ALWAYS , ""KillFamily::currentfamily: WARNING: family_size is non-positive (%d)\\n"" , family_size )"		1768462	0					
ANR	1768481	Callee	dprintf		1768462	0					
ANR	1768482	Identifier	dprintf		1768462	0					
ANR	1768483	ArgumentList	D_ALWAYS		1768462	1					
ANR	1768484	Argument	D_ALWAYS		1768462	0					
ANR	1768485	Identifier	D_ALWAYS		1768462	0					
ANR	1768486	Argument	"""KillFamily::currentfamily: WARNING: family_size is non-positive (%d)\\n"""		1768462	1					
ANR	1768487	PrimaryExpression	"""KillFamily::currentfamily: WARNING: family_size is non-positive (%d)\\n"""		1768462	0					
ANR	1768488	Argument	family_size		1768462	2					
ANR	1768489	Identifier	family_size		1768462	0					
ANR	1768490	ExpressionStatement	ptr = NULL	502:2:13621:13631	1768462	1	True				
ANR	1768491	AssignmentExpression	ptr = NULL		1768462	0		=			
ANR	1768492	Identifier	ptr		1768462	0					
ANR	1768493	Identifier	NULL		1768462	1					
ANR	1768494	ReturnStatement	return 0 ;	503:2:13635:13643	1768462	2	True				
ANR	1768495	PrimaryExpression	0		1768462	0					
ANR	1768496	ExpressionStatement	tmp = new pid_t [ family_size ]	505:1:13649:13679	1768462	3	True				
ANR	1768497	AssignmentExpression	tmp = new pid_t [ family_size ]		1768462	0		=			
ANR	1768498	Identifier	tmp		1768462	0					
ANR	1768499	Identifier	family_size		1768462	1					
ANR	1768500	IfStatement	if ( ! tmp )		1768462	4					
ANR	1768501	Condition	! tmp	506:5:13686:13689	1768462	0	True				
ANR	1768502	UnaryOperationExpression	! tmp		1768462	0					
ANR	1768503	UnaryOperator	!		1768462	0					
ANR	1768504	Identifier	tmp		1768462	1					
ANR	1768505	CompoundStatement		19:12:616:616	1768462	1					
ANR	1768506	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	507:2:13697:13723	1768462	0	True				
ANR	1768507	CallExpression	"EXCEPT ( ""Out of memory!"" )"		1768462	0					
ANR	1768508	Callee	EXCEPT		1768462	0					
ANR	1768509	Identifier	EXCEPT		1768462	0					
ANR	1768510	ArgumentList	"""Out of memory!"""		1768462	1					
ANR	1768511	Argument	"""Out of memory!"""		1768462	0					
ANR	1768512	PrimaryExpression	"""Out of memory!"""		1768462	0					
ANR	1768513	ForStatement	for ( i = 0 ; i < family_size ; i ++ )		1768462	5					
ANR	1768514	ForInit	i = 0 ;	509:6:13734:13737	1768462	0	True				
ANR	1768515	AssignmentExpression	i = 0		1768462	0		=			
ANR	1768516	Identifier	i		1768462	0					
ANR	1768517	PrimaryExpression	0		1768462	1					
ANR	1768518	Condition	i < family_size	509:11:13739:13751	1768462	1	True				
ANR	1768519	RelationalExpression	i < family_size		1768462	0		<			
ANR	1768520	Identifier	i		1768462	0					
ANR	1768521	Identifier	family_size		1768462	1					
ANR	1768522	PostIncDecOperationExpression	i ++	509:26:13754:13756	1768462	2	True				
ANR	1768523	Identifier	i		1768462	0					
ANR	1768524	IncDec	++		1768462	1					
ANR	1768525	CompoundStatement		22:32:683:683	1768462	3					
ANR	1768526	ExpressionStatement	tmp [ i ] = ( * old_pids ) [ i ] . pid	510:2:13764:13791	1768462	0	True				
ANR	1768527	AssignmentExpression	tmp [ i ] = ( * old_pids ) [ i ] . pid		1768462	0		=			
ANR	1768528	ArrayIndexing	tmp [ i ]		1768462	0					
ANR	1768529	Identifier	tmp		1768462	0					
ANR	1768530	Identifier	i		1768462	1					
ANR	1768531	MemberAccess	( * old_pids ) [ i ] . pid		1768462	1					
ANR	1768532	ArrayIndexing	( * old_pids ) [ i ]		1768462	0					
ANR	1768533	UnaryOperationExpression	* old_pids		1768462	0					
ANR	1768534	UnaryOperator	*		1768462	0					
ANR	1768535	Identifier	old_pids		1768462	1					
ANR	1768536	Identifier	i		1768462	1					
ANR	1768537	Identifier	pid		1768462	1					
ANR	1768538	ExpressionStatement	ptr = tmp	512:1:13797:13806	1768462	6	True				
ANR	1768539	AssignmentExpression	ptr = tmp		1768462	0		=			
ANR	1768540	Identifier	ptr		1768462	0					
ANR	1768541	Identifier	tmp		1768462	1					
ANR	1768542	ReturnStatement	return family_size ;	513:1:13809:13827	1768462	7	True				
ANR	1768543	Identifier	family_size		1768462	0					
ANR	1768544	ReturnType	int		1768462	1					
ANR	1768545	Identifier	KillFamily :: currentfamily		1768462	2					
ANR	1768546	ParameterList	pid_t * & ptr		1768462	3					
ANR	1768547	Parameter	pid_t * & ptr	487:27:13060:13071	1768462	0	True				
ANR	1768548	ParameterType	pid_t * &		1768462	0					
ANR	1768549	Identifier	ptr		1768462	1					
ANR	1768550	CFGEntryNode	ENTRY		1768462		True				
ANR	1768551	CFGExitNode	EXIT		1768462		True				
ANR	1768552	Symbol	family_size		1768462						
ANR	1768553	Symbol	* tmp		1768462						
ANR	1768554	Symbol	* * old_pids		1768462						
ANR	1768555	Symbol	NULL		1768462						
ANR	1768556	Symbol	* i		1768462						
ANR	1768557	Symbol	( * old_pids ) [ i ] . pid		1768462						
ANR	1768558	Symbol	tmp		1768462						
ANR	1768559	Symbol	old_pids		1768462						
ANR	1768560	Symbol	* old_pids		1768462						
ANR	1768561	Symbol	D_ALWAYS		1768462						
ANR	1768562	Symbol	i		1768462						
ANR	1768563	Symbol	ptr		1768462						
ANR	1768564	Function	KillFamily :: display	517:0:13833:14253							
ANR	1768565	FunctionDef	KillFamily :: display ()		1768564	0					
ANR	1768566	CompoundStatement		519:0:13860:14253	1768564	0					
ANR	1768567	IdentifierDeclStatement	int i ;	520:1:13863:13868	1768564	0	True				
ANR	1768568	IdentifierDecl	i		1768564	0					
ANR	1768569	IdentifierDeclType	int		1768564	0					
ANR	1768570	Identifier	i		1768564	1					
ANR	1768571	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""KillFamily: parent: %d family:"" , daddy_pid )"	521:1:13871:13939	1768564	1	True				
ANR	1768572	CallExpression	"dprintf ( D_PROCFAMILY , ""KillFamily: parent: %d family:"" , daddy_pid )"		1768564	0					
ANR	1768573	Callee	dprintf		1768564	0					
ANR	1768574	Identifier	dprintf		1768564	0					
ANR	1768575	ArgumentList	D_PROCFAMILY		1768564	1					
ANR	1768576	Argument	D_PROCFAMILY		1768564	0					
ANR	1768577	Identifier	D_PROCFAMILY		1768564	0					
ANR	1768578	Argument	"""KillFamily: parent: %d family:"""		1768564	1					
ANR	1768579	PrimaryExpression	"""KillFamily: parent: %d family:"""		1768564	0					
ANR	1768580	Argument	daddy_pid		1768564	2					
ANR	1768581	Identifier	daddy_pid		1768564	0					
ANR	1768582	ForStatement	for ( i = 0 ; i < family_size ; i ++ )		1768564	2					
ANR	1768583	ForInit	i = 0 ;	522:6:13947:13950	1768564	0	True				
ANR	1768584	AssignmentExpression	i = 0		1768564	0		=			
ANR	1768585	Identifier	i		1768564	0					
ANR	1768586	PrimaryExpression	0		1768564	1					
ANR	1768587	Condition	i < family_size	522:11:13952:13964	1768564	1	True				
ANR	1768588	RelationalExpression	i < family_size		1768564	0		<			
ANR	1768589	Identifier	i		1768564	0					
ANR	1768590	Identifier	family_size		1768564	1					
ANR	1768591	PostIncDecOperationExpression	i ++	522:26:13967:13969	1768564	2	True				
ANR	1768592	Identifier	i		1768564	0					
ANR	1768593	IncDec	++		1768564	1					
ANR	1768594	CompoundStatement		4:32:112:112	1768564	3					
ANR	1768595	ExpressionStatement	"dprintf ( D_PROCFAMILY | D_NOHEADER , "" %d"" , ( * old_pids ) [ i ] . pid )"	523:2:13977:14040	1768564	0	True				
ANR	1768596	CallExpression	"dprintf ( D_PROCFAMILY | D_NOHEADER , "" %d"" , ( * old_pids ) [ i ] . pid )"		1768564	0					
ANR	1768597	Callee	dprintf		1768564	0					
ANR	1768598	Identifier	dprintf		1768564	0					
ANR	1768599	ArgumentList	D_PROCFAMILY | D_NOHEADER		1768564	1					
ANR	1768600	Argument	D_PROCFAMILY | D_NOHEADER		1768564	0					
ANR	1768601	InclusiveOrExpression	D_PROCFAMILY | D_NOHEADER		1768564	0		|			
ANR	1768602	Identifier	D_PROCFAMILY		1768564	0					
ANR	1768603	Identifier	D_NOHEADER		1768564	1					
ANR	1768604	Argument	""" %d"""		1768564	1					
ANR	1768605	PrimaryExpression	""" %d"""		1768564	0					
ANR	1768606	Argument	( * old_pids ) [ i ] . pid		1768564	2					
ANR	1768607	MemberAccess	( * old_pids ) [ i ] . pid		1768564	0					
ANR	1768608	ArrayIndexing	( * old_pids ) [ i ]		1768564	0					
ANR	1768609	UnaryOperationExpression	* old_pids		1768564	0					
ANR	1768610	UnaryOperator	*		1768564	0					
ANR	1768611	Identifier	old_pids		1768564	1					
ANR	1768612	Identifier	i		1768564	1					
ANR	1768613	Identifier	pid		1768564	1					
ANR	1768614	ExpressionStatement	"dprintf ( D_PROCFAMILY | D_NOHEADER , ""\\n"" )"	525:1:14046:14088	1768564	3	True				
ANR	1768615	CallExpression	"dprintf ( D_PROCFAMILY | D_NOHEADER , ""\\n"" )"		1768564	0					
ANR	1768616	Callee	dprintf		1768564	0					
ANR	1768617	Identifier	dprintf		1768564	0					
ANR	1768618	ArgumentList	D_PROCFAMILY | D_NOHEADER		1768564	1					
ANR	1768619	Argument	D_PROCFAMILY | D_NOHEADER		1768564	0					
ANR	1768620	InclusiveOrExpression	D_PROCFAMILY | D_NOHEADER		1768564	0		|			
ANR	1768621	Identifier	D_PROCFAMILY		1768564	0					
ANR	1768622	Identifier	D_NOHEADER		1768564	1					
ANR	1768623	Argument	"""\\n"""		1768564	1					
ANR	1768624	PrimaryExpression	"""\\n"""		1768564	0					
ANR	1768625	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""KillFamily: alive_cpu_user = %ld, exited_cpu = %ld, max_image = %luk\\n"" , alive_cpu_user_time , exited_cpu_user_time , max_image_size )"	527:1:14092:14251	1768564	4	True				
ANR	1768626	CallExpression	"dprintf ( D_PROCFAMILY , ""KillFamily: alive_cpu_user = %ld, exited_cpu = %ld, max_image = %luk\\n"" , alive_cpu_user_time , exited_cpu_user_time , max_image_size )"		1768564	0					
ANR	1768627	Callee	dprintf		1768564	0					
ANR	1768628	Identifier	dprintf		1768564	0					
ANR	1768629	ArgumentList	D_PROCFAMILY		1768564	1					
ANR	1768630	Argument	D_PROCFAMILY		1768564	0					
ANR	1768631	Identifier	D_PROCFAMILY		1768564	0					
ANR	1768632	Argument	"""KillFamily: alive_cpu_user = %ld, exited_cpu = %ld, max_image = %luk\\n"""		1768564	1					
ANR	1768633	PrimaryExpression	"""KillFamily: alive_cpu_user = %ld, exited_cpu = %ld, max_image = %luk\\n"""		1768564	0					
ANR	1768634	Argument	alive_cpu_user_time		1768564	2					
ANR	1768635	Identifier	alive_cpu_user_time		1768564	0					
ANR	1768636	Argument	exited_cpu_user_time		1768564	3					
ANR	1768637	Identifier	exited_cpu_user_time		1768564	0					
ANR	1768638	Argument	max_image_size		1768564	4					
ANR	1768639	Identifier	max_image_size		1768564	0					
ANR	1768640	ReturnType	void		1768564	1					
ANR	1768641	Identifier	KillFamily :: display		1768564	2					
ANR	1768642	ParameterList			1768564	3					
ANR	1768643	CFGEntryNode	ENTRY		1768564		True				
ANR	1768644	CFGExitNode	EXIT		1768564		True				
ANR	1768645	Symbol	family_size		1768564						
ANR	1768646	Symbol	* * old_pids		1768564						
ANR	1768647	Symbol	D_PROCFAMILY		1768564						
ANR	1768648	Symbol	* old_pids		1768564						
ANR	1768649	Symbol	i		1768564						
ANR	1768650	Symbol	alive_cpu_user_time		1768564						
ANR	1768651	Symbol	* i		1768564						
ANR	1768652	Symbol	exited_cpu_user_time		1768564						
ANR	1768653	Symbol	( * old_pids ) [ i ] . pid		1768564						
ANR	1768654	Symbol	old_pids		1768564						
ANR	1768655	Symbol	max_image_size		1768564						
ANR	1768656	Symbol	D_NOHEADER		1768564						
ANR	1768657	Symbol	daddy_pid		1768564						
