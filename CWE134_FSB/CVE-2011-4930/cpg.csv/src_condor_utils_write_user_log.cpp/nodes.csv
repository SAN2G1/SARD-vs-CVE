command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5008864	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_write_user_log.cpp								
ANR	5008865	DeclStmt									
ANR	5008866	Decl							const char	const char [ ]	SynchDelimiter
ANR	5008867	ClassDef	UserLogInt64_t	59:0:1959:2427							
ANR	5008868	Function	UserLogInt64_t	62:1:1991:2031							
ANR	5008869	FunctionDef	UserLogInt64_t ()		5008868	0					
ANR	5008870	CompoundStatement		63:2:2016:2031	5008868	0					
ANR	5008871	ExpressionStatement	m_value = 0	63:1:2018:2029	5008868	0	True				
ANR	5008872	AssignmentExpression	m_value = 0		5008868	0		=			
ANR	5008873	Identifier	m_value		5008868	0					
ANR	5008874	PrimaryExpression	0		5008868	1					
ANR	5008875	Identifier	UserLogInt64_t		5008868	1					
ANR	5008876	ParameterList			5008868	2					
ANR	5008877	CFGEntryNode	ENTRY		5008868		True				
ANR	5008878	CFGExitNode	EXIT		5008868		True				
ANR	5008879	Symbol	m_value		5008868						
ANR	5008880	Function	UserLogInt64_t	64:1:2035:2088							
ANR	5008881	FunctionDef	UserLogInt64_t (int64_t value)		5008880	1					
ANR	5008882	CompoundStatement		65:2:2069:2088	5008880	0					
ANR	5008883	ExpressionStatement	m_value = value	65:1:2071:2086	5008880	0	True				
ANR	5008884	AssignmentExpression	m_value = value		5008880	0		=			
ANR	5008885	Identifier	m_value		5008880	0					
ANR	5008886	Identifier	value		5008880	1					
ANR	5008887	Identifier	UserLogInt64_t		5008880	1					
ANR	5008888	ParameterList	int64_t value		5008880	2					
ANR	5008889	Parameter	int64_t value	64:17:2051:2063	5008880	0	True				
ANR	5008890	ParameterType	int64_t		5008880	0					
ANR	5008891	Identifier	value		5008880	1					
ANR	5008892	CFGEntryNode	ENTRY		5008880		True				
ANR	5008893	CFGExitNode	EXIT		5008880		True				
ANR	5008894	Symbol	value		5008880						
ANR	5008895	Symbol	m_value		5008880						
ANR	5008896	Function	Set	68:1:2119:2176							
ANR	5008897	FunctionDef	Set (int64_t value)		5008896	2					
ANR	5008898	CompoundStatement		69:2:2150:2176	5008896	0					
ANR	5008899	ReturnStatement	return m_value = value ;	69:1:2152:2174	5008896	0	True				
ANR	5008900	AssignmentExpression	m_value = value		5008896	0		=			
ANR	5008901	Identifier	m_value		5008896	0					
ANR	5008902	Identifier	value		5008896	1					
ANR	5008903	ReturnType	int64_t		5008896	1					
ANR	5008904	Identifier	Set		5008896	2					
ANR	5008905	ParameterList	int64_t value		5008896	3					
ANR	5008906	Parameter	int64_t value	68:14:2132:2144	5008896	0	True				
ANR	5008907	ParameterType	int64_t		5008896	0					
ANR	5008908	Identifier	value		5008896	1					
ANR	5008909	CFGEntryNode	ENTRY		5008896		True				
ANR	5008910	CFGExitNode	EXIT		5008896		True				
ANR	5008911	Symbol	value		5008896						
ANR	5008912	Symbol	m_value		5008896						
ANR	5008913	Function	Get	70:1:2180:2226							
ANR	5008914	FunctionDef	Get ()		5008913	3					
ANR	5008915	CompoundStatement		71:2:2208:2226	5008913	0					
ANR	5008916	ReturnStatement	return m_value ;	71:1:2210:2224	5008913	0	True				
ANR	5008917	Identifier	m_value		5008913	0					
ANR	5008918	ReturnType	int64_t		5008913	1					
ANR	5008919	Identifier	Get		5008913	2					
ANR	5008920	ParameterList			5008913	3					
ANR	5008921	CFGEntryNode	ENTRY		5008913		True				
ANR	5008922	CFGExitNode	EXIT		5008913		True				
ANR	5008923	Symbol	m_value		5008913						
ANR	5008924	Function	operator =	72:1:2230:2309							
ANR	5008925	FunctionDef	operator = (int64_t value)		5008924	4					
ANR	5008926	CompoundStatement		73:2:2276:2309	5008924	0					
ANR	5008927	ExpressionStatement	m_value = value	73:1:2278:2293	5008924	0	True				
ANR	5008928	AssignmentExpression	m_value = value		5008924	0		=			
ANR	5008929	Identifier	m_value		5008924	0					
ANR	5008930	Identifier	value		5008924	1					
ANR	5008931	ReturnStatement	return * this ;	73:18:2295:2307	5008924	1	True				
ANR	5008932	UnaryOperationExpression	* this		5008924	0					
ANR	5008933	UnaryOperator	*		5008924	0					
ANR	5008934	Identifier	this		5008924	1					
ANR	5008935	ReturnType	UserLogInt64_t &		5008924	1					
ANR	5008936	Identifier	operator =		5008924	2					
ANR	5008937	ParameterList	int64_t value		5008924	3					
ANR	5008938	Parameter	int64_t value	72:29:2258:2270	5008924	0	True				
ANR	5008939	ParameterType	int64_t		5008924	0					
ANR	5008940	Identifier	value		5008924	1					
ANR	5008941	CFGEntryNode	ENTRY		5008924		True				
ANR	5008942	CFGExitNode	EXIT		5008924		True				
ANR	5008943	Symbol	* this		5008924						
ANR	5008944	Symbol	this		5008924						
ANR	5008945	Symbol	value		5008924						
ANR	5008946	Symbol	m_value		5008924						
ANR	5008947	Function	operator +=	74:1:2313:2394							
ANR	5008948	FunctionDef	operator += (int64_t value)		5008947	5					
ANR	5008949	CompoundStatement		75:2:2360:2394	5008947	0					
ANR	5008950	ExpressionStatement	m_value += value	75:1:2362:2378	5008947	0	True				
ANR	5008951	AssignmentExpression	m_value += value		5008947	0		+=			
ANR	5008952	Identifier	m_value		5008947	0					
ANR	5008953	Identifier	value		5008947	1					
ANR	5008954	ReturnStatement	return * this ;	75:19:2380:2392	5008947	1	True				
ANR	5008955	UnaryOperationExpression	* this		5008947	0					
ANR	5008956	UnaryOperator	*		5008947	0					
ANR	5008957	Identifier	this		5008947	1					
ANR	5008958	ReturnType	UserLogInt64_t &		5008947	1					
ANR	5008959	Identifier	operator +=		5008947	2					
ANR	5008960	ParameterList	int64_t value		5008947	3					
ANR	5008961	Parameter	int64_t value	74:30:2342:2354	5008947	0	True				
ANR	5008962	ParameterType	int64_t		5008947	0					
ANR	5008963	Identifier	value		5008947	1					
ANR	5008964	CFGEntryNode	ENTRY		5008947		True				
ANR	5008965	CFGExitNode	EXIT		5008947		True				
ANR	5008966	Symbol	* this		5008947						
ANR	5008967	Symbol	this		5008947						
ANR	5008968	Symbol	value		5008947						
ANR	5008969	Symbol	m_value		5008947						
ANR	5008970	DeclStmt									
ANR	5008971	Decl							int64_t	int64_t	m_value
ANR	5008972	ClassDef	UserLogFilesize_t	81:0:2430:2480							
ANR	5008973	Function	WriteUserLog :: WriteUserLog	89:0:2577:2682							
ANR	5008974	FunctionDef	WriteUserLog :: WriteUserLog (bool disable_event_log)		5008973	0					
ANR	5008975	CompoundStatement		90:0:2630:2682	5008973	0					
ANR	5008976	ExpressionStatement	Reset ( )	91:1:2633:2641	5008973	0	True				
ANR	5008977	CallExpression	Reset ( )		5008973	0					
ANR	5008978	Callee	Reset		5008973	0					
ANR	5008979	Identifier	Reset		5008973	0					
ANR	5008980	ArgumentList			5008973	1					
ANR	5008981	ExpressionStatement	m_global_disable = disable_event_log	92:1:2644:2680	5008973	1	True				
ANR	5008982	AssignmentExpression	m_global_disable = disable_event_log		5008973	0		=			
ANR	5008983	Identifier	m_global_disable		5008973	0					
ANR	5008984	Identifier	disable_event_log		5008973	1					
ANR	5008985	Identifier	WriteUserLog :: WriteUserLog		5008973	1					
ANR	5008986	ParameterList	bool disable_event_log		5008973	2					
ANR	5008987	Parameter	bool disable_event_log	89:28:2605:2626	5008973	0	True				
ANR	5008988	ParameterType	bool		5008973	0					
ANR	5008989	Identifier	disable_event_log		5008973	1					
ANR	5008990	CFGEntryNode	ENTRY		5008973		True				
ANR	5008991	CFGExitNode	EXIT		5008973		True				
ANR	5008992	Symbol	m_global_disable		5008973						
ANR	5008993	Symbol	disable_event_log		5008973						
ANR	5008994	Function	WriteUserLog :: WriteUserLog	99:0:2965:3262							
ANR	5008995	FunctionDef	"WriteUserLog :: WriteUserLog (const char * owner , const char * file , int c , int p , int s , bool xml)"		5008994	0					
ANR	5008996	CompoundStatement		105:0:3096:3262	5008994	0					
ANR	5008997	ExpressionStatement	Reset ( )	106:1:3099:3107	5008994	0	True				
ANR	5008998	CallExpression	Reset ( )		5008994	0					
ANR	5008999	Callee	Reset		5008994	0					
ANR	5009000	Identifier	Reset		5008994	0					
ANR	5009001	ArgumentList			5008994	1					
ANR	5009002	ExpressionStatement	m_use_xml = xml	107:1:3110:3125	5008994	1	True				
ANR	5009003	AssignmentExpression	m_use_xml = xml		5008994	0		=			
ANR	5009004	Identifier	m_use_xml		5008994	0					
ANR	5009005	Identifier	xml		5008994	1					
ANR	5009006	ExpressionStatement	m_privsep_uid = 0	111:1:3167:3184	5008994	2	True				
ANR	5009007	AssignmentExpression	m_privsep_uid = 0		5008994	0		=			
ANR	5009008	Identifier	m_privsep_uid		5008994	0					
ANR	5009009	PrimaryExpression	0		5008994	1					
ANR	5009010	ExpressionStatement	m_privsep_gid = 0	112:1:3187:3204	5008994	3	True				
ANR	5009011	AssignmentExpression	m_privsep_gid = 0		5008994	0		=			
ANR	5009012	Identifier	m_privsep_gid		5008994	0					
ANR	5009013	PrimaryExpression	0		5008994	1					
ANR	5009014	ExpressionStatement	"initialize ( owner , NULL , file , c , p , s , NULL )"	115:1:3215:3260	5008994	4	True				
ANR	5009015	CallExpression	"initialize ( owner , NULL , file , c , p , s , NULL )"		5008994	0					
ANR	5009016	Callee	initialize		5008994	0					
ANR	5009017	Identifier	initialize		5008994	0					
ANR	5009018	ArgumentList	owner		5008994	1					
ANR	5009019	Argument	owner		5008994	0					
ANR	5009020	Identifier	owner		5008994	0					
ANR	5009021	Argument	NULL		5008994	1					
ANR	5009022	Identifier	NULL		5008994	0					
ANR	5009023	Argument	file		5008994	2					
ANR	5009024	Identifier	file		5008994	0					
ANR	5009025	Argument	c		5008994	3					
ANR	5009026	Identifier	c		5008994	0					
ANR	5009027	Argument	p		5008994	4					
ANR	5009028	Identifier	p		5008994	0					
ANR	5009029	Argument	s		5008994	5					
ANR	5009030	Identifier	s		5008994	0					
ANR	5009031	Argument	NULL		5008994	6					
ANR	5009032	Identifier	NULL		5008994	0					
ANR	5009033	Identifier	WriteUserLog :: WriteUserLog		5008994	1					
ANR	5009034	ParameterList	"const char * owner , const char * file , int c , int p , int s , bool xml"		5008994	2					
ANR	5009035	Parameter	const char * owner	99:28:2993:3009	5008994	0	True				
ANR	5009036	ParameterType	const char *		5008994	0					
ANR	5009037	Identifier	owner		5008994	1					
ANR	5009038	Parameter	const char * file	100:7:3019:3034	5008994	1	True				
ANR	5009039	ParameterType	const char *		5008994	0					
ANR	5009040	Identifier	file		5008994	1					
ANR	5009041	Parameter	int c	101:7:3044:3048	5008994	2	True				
ANR	5009042	ParameterType	int		5008994	0					
ANR	5009043	Identifier	c		5008994	1					
ANR	5009044	Parameter	int p	102:7:3058:3062	5008994	3	True				
ANR	5009045	ParameterType	int		5008994	0					
ANR	5009046	Identifier	p		5008994	1					
ANR	5009047	Parameter	int s	103:7:3072:3076	5008994	4	True				
ANR	5009048	ParameterType	int		5008994	0					
ANR	5009049	Identifier	s		5008994	1					
ANR	5009050	Parameter	bool xml	104:7:3086:3093	5008994	5	True				
ANR	5009051	ParameterType	bool		5008994	0					
ANR	5009052	Identifier	xml		5008994	1					
ANR	5009053	CFGEntryNode	ENTRY		5008994		True				
ANR	5009054	CFGExitNode	EXIT		5008994		True				
ANR	5009055	Symbol	owner		5008994						
ANR	5009056	Symbol	p		5008994						
ANR	5009057	Symbol	m_privsep_gid		5008994						
ANR	5009058	Symbol	file		5008994						
ANR	5009059	Symbol	c		5008994						
ANR	5009060	Symbol	s		5008994						
ANR	5009061	Symbol	NULL		5008994						
ANR	5009062	Symbol	xml		5008994						
ANR	5009063	Symbol	m_use_xml		5008994						
ANR	5009064	Symbol	m_privsep_uid		5008994						
ANR	5009065	Function	WriteUserLog :: WriteUserLog	118:0:3265:3614							
ANR	5009066	FunctionDef	"WriteUserLog :: WriteUserLog (const char * owner , const char * domain , const char * file , int c , int p , int s , bool xml , const char * gjid)"		5009065	0					
ANR	5009067	CompoundStatement		126:0:3448:3614	5009065	0					
ANR	5009068	ExpressionStatement	Reset ( )	127:1:3451:3458	5009065	0	True				
ANR	5009069	CallExpression	Reset ( )		5009065	0					
ANR	5009070	Callee	Reset		5009065	0					
ANR	5009071	Identifier	Reset		5009065	0					
ANR	5009072	ArgumentList			5009065	1					
ANR	5009073	ExpressionStatement	m_use_xml = xml	128:1:3461:3476	5009065	1	True				
ANR	5009074	AssignmentExpression	m_use_xml = xml		5009065	0		=			
ANR	5009075	Identifier	m_use_xml		5009065	0					
ANR	5009076	Identifier	xml		5009065	1					
ANR	5009077	ExpressionStatement	m_privsep_uid = 0	132:1:3517:3534	5009065	2	True				
ANR	5009078	AssignmentExpression	m_privsep_uid = 0		5009065	0		=			
ANR	5009079	Identifier	m_privsep_uid		5009065	0					
ANR	5009080	PrimaryExpression	0		5009065	1					
ANR	5009081	ExpressionStatement	m_privsep_gid = 0	133:1:3537:3554	5009065	3	True				
ANR	5009082	AssignmentExpression	m_privsep_gid = 0		5009065	0		=			
ANR	5009083	Identifier	m_privsep_gid		5009065	0					
ANR	5009084	PrimaryExpression	0		5009065	1					
ANR	5009085	ExpressionStatement	"initialize ( owner , domain , file , c , p , s , gjid )"	136:1:3565:3612	5009065	4	True				
ANR	5009086	CallExpression	"initialize ( owner , domain , file , c , p , s , gjid )"		5009065	0					
ANR	5009087	Callee	initialize		5009065	0					
ANR	5009088	Identifier	initialize		5009065	0					
ANR	5009089	ArgumentList	owner		5009065	1					
ANR	5009090	Argument	owner		5009065	0					
ANR	5009091	Identifier	owner		5009065	0					
ANR	5009092	Argument	domain		5009065	1					
ANR	5009093	Identifier	domain		5009065	0					
ANR	5009094	Argument	file		5009065	2					
ANR	5009095	Identifier	file		5009065	0					
ANR	5009096	Argument	c		5009065	3					
ANR	5009097	Identifier	c		5009065	0					
ANR	5009098	Argument	p		5009065	4					
ANR	5009099	Identifier	p		5009065	0					
ANR	5009100	Argument	s		5009065	5					
ANR	5009101	Identifier	s		5009065	0					
ANR	5009102	Argument	gjid		5009065	6					
ANR	5009103	Identifier	gjid		5009065	0					
ANR	5009104	Identifier	WriteUserLog :: WriteUserLog		5009065	1					
ANR	5009105	ParameterList	"const char * owner , const char * domain , const char * file , int c , int p , int s , bool xml , const char * gjid"		5009065	2					
ANR	5009106	Parameter	const char * owner	118:28:3293:3309	5009065	0	True				
ANR	5009107	ParameterType	const char *		5009065	0					
ANR	5009108	Identifier	owner		5009065	1					
ANR	5009109	Parameter	const char * domain	119:7:3319:3336	5009065	1	True				
ANR	5009110	ParameterType	const char *		5009065	0					
ANR	5009111	Identifier	domain		5009065	1					
ANR	5009112	Parameter	const char * file	120:7:3346:3361	5009065	2	True				
ANR	5009113	ParameterType	const char *		5009065	0					
ANR	5009114	Identifier	file		5009065	1					
ANR	5009115	Parameter	int c	121:7:3371:3375	5009065	3	True				
ANR	5009116	ParameterType	int		5009065	0					
ANR	5009117	Identifier	c		5009065	1					
ANR	5009118	Parameter	int p	122:7:3385:3389	5009065	4	True				
ANR	5009119	ParameterType	int		5009065	0					
ANR	5009120	Identifier	p		5009065	1					
ANR	5009121	Parameter	int s	123:7:3399:3403	5009065	5	True				
ANR	5009122	ParameterType	int		5009065	0					
ANR	5009123	Identifier	s		5009065	1					
ANR	5009124	Parameter	bool xml	124:7:3413:3420	5009065	6	True				
ANR	5009125	ParameterType	bool		5009065	0					
ANR	5009126	Identifier	xml		5009065	1					
ANR	5009127	Parameter	const char * gjid	125:7:3430:3445	5009065	7	True				
ANR	5009128	ParameterType	const char *		5009065	0					
ANR	5009129	Identifier	gjid		5009065	1					
ANR	5009130	CFGEntryNode	ENTRY		5009065		True				
ANR	5009131	CFGExitNode	EXIT		5009065		True				
ANR	5009132	Symbol	owner		5009065						
ANR	5009133	Symbol	p		5009065						
ANR	5009134	Symbol	m_privsep_gid		5009065						
ANR	5009135	Symbol	file		5009065						
ANR	5009136	Symbol	c		5009065						
ANR	5009137	Symbol	s		5009065						
ANR	5009138	Symbol	xml		5009065						
ANR	5009139	Symbol	domain		5009065						
ANR	5009140	Symbol	m_use_xml		5009065						
ANR	5009141	Symbol	m_privsep_uid		5009065						
ANR	5009142	Symbol	gjid		5009065						
ANR	5009143	Function	WriteUserLog :: ~WriteUserLog	140:0:3631:3717							
ANR	5009144	FunctionDef	WriteUserLog :: ~WriteUserLog ()		5009143	0					
ANR	5009145	CompoundStatement		141:0:3661:3717	5009143	0					
ANR	5009146	ExpressionStatement	FreeGlobalResources ( true )	142:1:3664:3691	5009143	0	True				
ANR	5009147	CallExpression	FreeGlobalResources ( true )		5009143	0					
ANR	5009148	Callee	FreeGlobalResources		5009143	0					
ANR	5009149	Identifier	FreeGlobalResources		5009143	0					
ANR	5009150	ArgumentList	true		5009143	1					
ANR	5009151	Argument	true		5009143	0					
ANR	5009152	Identifier	true		5009143	0					
ANR	5009153	ExpressionStatement	FreeLocalResources ( )	143:1:3694:3715	5009143	1	True				
ANR	5009154	CallExpression	FreeLocalResources ( )		5009143	0					
ANR	5009155	Callee	FreeLocalResources		5009143	0					
ANR	5009156	Identifier	FreeLocalResources		5009143	0					
ANR	5009157	ArgumentList			5009143	1					
ANR	5009158	Identifier	WriteUserLog :: ~WriteUserLog		5009143	1					
ANR	5009159	ParameterList			5009143	2					
ANR	5009160	CFGEntryNode	ENTRY		5009143		True				
ANR	5009161	CFGExitNode	EXIT		5009143		True				
ANR	5009162	Symbol	true		5009143						
ANR	5009163	Function	WriteUserLog :: initialize	151:0:3838:4399							
ANR	5009164	FunctionDef	"WriteUserLog :: initialize (const char * owner , const char * domain , const char * file , int c , int p , int s , const char * gjid)"		5009163	0					
ANR	5009165	CompoundStatement		155:0:3982:4399	5009163	0					
ANR	5009166	IdentifierDeclStatement	priv_state priv ;	156:1:3985:4001	5009163	0	True				
ANR	5009167	IdentifierDecl	priv		5009163	0					
ANR	5009168	IdentifierDeclType	priv_state		5009163	0					
ANR	5009169	Identifier	priv		5009163	1					
ANR	5009170	ExpressionStatement	uninit_user_ids ( )	158:1:4005:4022	5009163	1	True				
ANR	5009171	CallExpression	uninit_user_ids ( )		5009163	0					
ANR	5009172	Callee	uninit_user_ids		5009163	0					
ANR	5009173	Identifier	uninit_user_ids		5009163	0					
ANR	5009174	ArgumentList			5009163	1					
ANR	5009175	IfStatement	"if ( ! init_user_ids ( owner , domain ) )"		5009163	2					
ANR	5009176	Condition	"! init_user_ids ( owner , domain )"	159:5:4029:4059	5009163	0	True				
ANR	5009177	UnaryOperationExpression	"! init_user_ids ( owner , domain )"		5009163	0					
ANR	5009178	UnaryOperator	!		5009163	0					
ANR	5009179	CallExpression	"init_user_ids ( owner , domain )"		5009163	1					
ANR	5009180	Callee	init_user_ids		5009163	0					
ANR	5009181	Identifier	init_user_ids		5009163	0					
ANR	5009182	ArgumentList	owner		5009163	1					
ANR	5009183	Argument	owner		5009163	0					
ANR	5009184	Identifier	owner		5009163	0					
ANR	5009185	Argument	domain		5009163	1					
ANR	5009186	Identifier	domain		5009163	0					
ANR	5009187	CompoundStatement		5:39:80:80	5009163	1					
ANR	5009188	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog::initialize: init_user_ids() failed!\\n"" )"	160:2:4067:4143	5009163	0	True				
ANR	5009189	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog::initialize: init_user_ids() failed!\\n"" )"		5009163	0					
ANR	5009190	Callee	dprintf		5009163	0					
ANR	5009191	Identifier	dprintf		5009163	0					
ANR	5009192	ArgumentList	D_ALWAYS		5009163	1					
ANR	5009193	Argument	D_ALWAYS		5009163	0					
ANR	5009194	Identifier	D_ALWAYS		5009163	0					
ANR	5009195	Argument	"""WriteUserLog::initialize: init_user_ids() failed!\\n"""		5009163	1					
ANR	5009196	PrimaryExpression	"""WriteUserLog::initialize: init_user_ids() failed!\\n"""		5009163	0					
ANR	5009197	ReturnStatement	return false ;	162:2:4147:4159	5009163	1	True				
ANR	5009198	Identifier	false		5009163	0					
ANR	5009199	ExpressionStatement	priv = set_user_priv ( )	166:1:4216:4238	5009163	3	True				
ANR	5009200	AssignmentExpression	priv = set_user_priv ( )		5009163	0		=			
ANR	5009201	Identifier	priv		5009163	0					
ANR	5009202	CallExpression	set_user_priv ( )		5009163	1					
ANR	5009203	Callee	set_user_priv		5009163	0					
ANR	5009204	Identifier	set_user_priv		5009163	0					
ANR	5009205	ArgumentList			5009163	1					
ANR	5009206	IdentifierDeclStatement	"bool res = initialize ( file , c , p , s , gjid ) ;"	169:1:4267:4311	5009163	4	True				
ANR	5009207	IdentifierDecl	"res = initialize ( file , c , p , s , gjid )"		5009163	0					
ANR	5009208	IdentifierDeclType	bool		5009163	0					
ANR	5009209	Identifier	res		5009163	1					
ANR	5009210	AssignmentExpression	"res = initialize ( file , c , p , s , gjid )"		5009163	2		=			
ANR	5009211	Identifier	res		5009163	0					
ANR	5009212	CallExpression	"initialize ( file , c , p , s , gjid )"		5009163	1					
ANR	5009213	Callee	initialize		5009163	0					
ANR	5009214	Identifier	initialize		5009163	0					
ANR	5009215	ArgumentList	file		5009163	1					
ANR	5009216	Argument	file		5009163	0					
ANR	5009217	Identifier	file		5009163	0					
ANR	5009218	Argument	c		5009163	1					
ANR	5009219	Identifier	c		5009163	0					
ANR	5009220	Argument	p		5009163	2					
ANR	5009221	Identifier	p		5009163	0					
ANR	5009222	Argument	s		5009163	3					
ANR	5009223	Identifier	s		5009163	0					
ANR	5009224	Argument	gjid		5009163	4					
ANR	5009225	Identifier	gjid		5009163	0					
ANR	5009226	ExpressionStatement	set_priv ( priv )	172:1:4369:4383	5009163	5	True				
ANR	5009227	CallExpression	set_priv ( priv )		5009163	0					
ANR	5009228	Callee	set_priv		5009163	0					
ANR	5009229	Identifier	set_priv		5009163	0					
ANR	5009230	ArgumentList	priv		5009163	1					
ANR	5009231	Argument	priv		5009163	0					
ANR	5009232	Identifier	priv		5009163	0					
ANR	5009233	ReturnStatement	return res ;	174:1:4387:4397	5009163	6	True				
ANR	5009234	Identifier	res		5009163	0					
ANR	5009235	ReturnType	bool		5009163	1					
ANR	5009236	Identifier	WriteUserLog :: initialize		5009163	2					
ANR	5009237	ParameterList	"const char * owner , const char * domain , const char * file , int c , int p , int s , const char * gjid"		5009163	3					
ANR	5009238	Parameter	const char * owner	152:26:3869:3885	5009163	0	True				
ANR	5009239	ParameterType	const char *		5009163	0					
ANR	5009240	Identifier	owner		5009163	1					
ANR	5009241	Parameter	const char * domain	152:45:3888:3905	5009163	1	True				
ANR	5009242	ParameterType	const char *		5009163	0					
ANR	5009243	Identifier	domain		5009163	1					
ANR	5009244	Parameter	const char * file	153:8:3916:3931	5009163	2	True				
ANR	5009245	ParameterType	const char *		5009163	0					
ANR	5009246	Identifier	file		5009163	1					
ANR	5009247	Parameter	int c	154:8:3942:3946	5009163	3	True				
ANR	5009248	ParameterType	int		5009163	0					
ANR	5009249	Identifier	c		5009163	1					
ANR	5009250	Parameter	int p	154:15:3949:3953	5009163	4	True				
ANR	5009251	ParameterType	int		5009163	0					
ANR	5009252	Identifier	p		5009163	1					
ANR	5009253	Parameter	int s	154:22:3956:3960	5009163	5	True				
ANR	5009254	ParameterType	int		5009163	0					
ANR	5009255	Identifier	s		5009163	1					
ANR	5009256	Parameter	const char * gjid	154:29:3963:3978	5009163	6	True				
ANR	5009257	ParameterType	const char *		5009163	0					
ANR	5009258	Identifier	gjid		5009163	1					
ANR	5009259	CFGEntryNode	ENTRY		5009163		True				
ANR	5009260	CFGExitNode	EXIT		5009163		True				
ANR	5009261	Symbol	owner		5009163						
ANR	5009262	Symbol	res		5009163						
ANR	5009263	Symbol	c		5009163						
ANR	5009264	Symbol	D_ALWAYS		5009163						
ANR	5009265	Symbol	false		5009163						
ANR	5009266	Symbol	set_user_priv		5009163						
ANR	5009267	Symbol	gjid		5009163						
ANR	5009268	Symbol	p		5009163						
ANR	5009269	Symbol	file		5009163						
ANR	5009270	Symbol	s		5009163						
ANR	5009271	Symbol	domain		5009163						
ANR	5009272	Symbol	priv		5009163						
ANR	5009273	Symbol	initialize		5009163						
ANR	5009274	Symbol	init_user_ids		5009163						
ANR	5009275	Function	WriteUserLog :: initialize	177:0:4402:4824							
ANR	5009276	FunctionDef	"WriteUserLog :: initialize (const char * file , int c , int p , int s , const char * gjid)"		5009275	0					
ANR	5009277	CompoundStatement		180:0:4498:4824	5009275	0					
ANR	5009278	ExpressionStatement	FreeLocalResources ( )	182:1:4526:4547	5009275	0	True				
ANR	5009279	CallExpression	FreeLocalResources ( )		5009275	0					
ANR	5009280	Callee	FreeLocalResources		5009275	0					
ANR	5009281	Identifier	FreeLocalResources		5009275	0					
ANR	5009282	ArgumentList			5009275	1					
ANR	5009283	ExpressionStatement	m_path = strdup ( file )	183:1:4550:4573	5009275	1	True				
ANR	5009284	AssignmentExpression	m_path = strdup ( file )		5009275	0		=			
ANR	5009285	Identifier	m_path		5009275	0					
ANR	5009286	CallExpression	strdup ( file )		5009275	1					
ANR	5009287	Callee	strdup		5009275	0					
ANR	5009288	Identifier	strdup		5009275	0					
ANR	5009289	ArgumentList	file		5009275	1					
ANR	5009290	Argument	file		5009275	0					
ANR	5009291	Identifier	file		5009275	0					
ANR	5009292	ExpressionStatement	Configure ( false )	184:1:4576:4592	5009275	2	True				
ANR	5009293	CallExpression	Configure ( false )		5009275	0					
ANR	5009294	Callee	Configure		5009275	0					
ANR	5009295	Identifier	Configure		5009275	0					
ANR	5009296	ArgumentList	false		5009275	1					
ANR	5009297	Argument	false		5009275	0					
ANR	5009298	Identifier	false		5009275	0					
ANR	5009299	IfStatement	"if ( m_userlog_enable && ! openFile ( file , true , m_enable_locking , true , m_lock , m_fp ) )"		5009275	3					
ANR	5009300	Condition	"m_userlog_enable && ! openFile ( file , true , m_enable_locking , true , m_lock , m_fp )"	185:6:4600:4681	5009275	0	True				
ANR	5009301	AndExpression	"m_userlog_enable && ! openFile ( file , true , m_enable_locking , true , m_lock , m_fp )"		5009275	0		&&			
ANR	5009302	Identifier	m_userlog_enable		5009275	0					
ANR	5009303	UnaryOperationExpression	"! openFile ( file , true , m_enable_locking , true , m_lock , m_fp )"		5009275	1					
ANR	5009304	UnaryOperator	!		5009275	0					
ANR	5009305	CallExpression	"openFile ( file , true , m_enable_locking , true , m_lock , m_fp )"		5009275	1					
ANR	5009306	Callee	openFile		5009275	0					
ANR	5009307	Identifier	openFile		5009275	0					
ANR	5009308	ArgumentList	file		5009275	1					
ANR	5009309	Argument	file		5009275	0					
ANR	5009310	Identifier	file		5009275	0					
ANR	5009311	Argument	true		5009275	1					
ANR	5009312	Identifier	true		5009275	0					
ANR	5009313	Argument	m_enable_locking		5009275	2					
ANR	5009314	Identifier	m_enable_locking		5009275	0					
ANR	5009315	Argument	true		5009275	3					
ANR	5009316	Identifier	true		5009275	0					
ANR	5009317	Argument	m_lock		5009275	4					
ANR	5009318	Identifier	m_lock		5009275	0					
ANR	5009319	Argument	m_fp		5009275	5					
ANR	5009320	Identifier	m_fp		5009275	0					
ANR	5009321	CompoundStatement		7:65:186:186	5009275	1					
ANR	5009322	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog::initialize: failed to open file\\n"" )"	187:2:4689:4757	5009275	0	True				
ANR	5009323	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog::initialize: failed to open file\\n"" )"		5009275	0					
ANR	5009324	Callee	dprintf		5009275	0					
ANR	5009325	Identifier	dprintf		5009275	0					
ANR	5009326	ArgumentList	D_ALWAYS		5009275	1					
ANR	5009327	Argument	D_ALWAYS		5009275	0					
ANR	5009328	Identifier	D_ALWAYS		5009275	0					
ANR	5009329	Argument	"""WriteUserLog::initialize: failed to open file\\n"""		5009275	1					
ANR	5009330	PrimaryExpression	"""WriteUserLog::initialize: failed to open file\\n"""		5009275	0					
ANR	5009331	ReturnStatement	return false ;	188:2:4761:4773	5009275	1	True				
ANR	5009332	Identifier	false		5009275	0					
ANR	5009333	ReturnStatement	"return internalInitialize ( c , p , s , gjid ) ;"	191:1:4780:4822	5009275	4	True				
ANR	5009334	CallExpression	"internalInitialize ( c , p , s , gjid )"		5009275	0					
ANR	5009335	Callee	internalInitialize		5009275	0					
ANR	5009336	Identifier	internalInitialize		5009275	0					
ANR	5009337	ArgumentList	c		5009275	1					
ANR	5009338	Argument	c		5009275	0					
ANR	5009339	Identifier	c		5009275	0					
ANR	5009340	Argument	p		5009275	1					
ANR	5009341	Identifier	p		5009275	0					
ANR	5009342	Argument	s		5009275	2					
ANR	5009343	Identifier	s		5009275	0					
ANR	5009344	Argument	gjid		5009275	3					
ANR	5009345	Identifier	gjid		5009275	0					
ANR	5009346	ReturnType	bool		5009275	1					
ANR	5009347	Identifier	WriteUserLog :: initialize		5009275	2					
ANR	5009348	ParameterList	"const char * file , int c , int p , int s , const char * gjid"		5009275	3					
ANR	5009349	Parameter	const char * file	178:26:4433:4448	5009275	0	True				
ANR	5009350	ParameterType	const char *		5009275	0					
ANR	5009351	Identifier	file		5009275	1					
ANR	5009352	Parameter	int c	178:44:4451:4455	5009275	1	True				
ANR	5009353	ParameterType	int		5009275	0					
ANR	5009354	Identifier	c		5009275	1					
ANR	5009355	Parameter	int p	178:51:4458:4462	5009275	2	True				
ANR	5009356	ParameterType	int		5009275	0					
ANR	5009357	Identifier	p		5009275	1					
ANR	5009358	Parameter	int s	178:58:4465:4469	5009275	3	True				
ANR	5009359	ParameterType	int		5009275	0					
ANR	5009360	Identifier	s		5009275	1					
ANR	5009361	Parameter	const char * gjid	179:8:4480:4495	5009275	4	True				
ANR	5009362	ParameterType	const char *		5009275	0					
ANR	5009363	Identifier	gjid		5009275	1					
ANR	5009364	CFGEntryNode	ENTRY		5009275		True				
ANR	5009365	CFGExitNode	EXIT		5009275		True				
ANR	5009366	Symbol	m_enable_locking		5009275						
ANR	5009367	Symbol	c		5009275						
ANR	5009368	Symbol	openFile		5009275						
ANR	5009369	Symbol	false		5009275						
ANR	5009370	Symbol	D_ALWAYS		5009275						
ANR	5009371	Symbol	gjid		5009275						
ANR	5009372	Symbol	m_fp		5009275						
ANR	5009373	Symbol	m_userlog_enable		5009275						
ANR	5009374	Symbol	p		5009275						
ANR	5009375	Symbol	m_lock		5009275						
ANR	5009376	Symbol	file		5009275						
ANR	5009377	Symbol	s		5009275						
ANR	5009378	Symbol	m_path		5009275						
ANR	5009379	Symbol	true		5009275						
ANR	5009380	Symbol	internalInitialize		5009275						
ANR	5009381	Symbol	strdup		5009275						
ANR	5009382	Function	WriteUserLog :: initialize	194:0:4827:4964							
ANR	5009383	FunctionDef	"WriteUserLog :: initialize (int c , int p , int s , const char * gjid)"		5009382	0					
ANR	5009384	CompoundStatement		196:0:4898:4964	5009382	0					
ANR	5009385	ExpressionStatement	Configure ( false )	197:1:4901:4917	5009382	0	True				
ANR	5009386	CallExpression	Configure ( false )		5009382	0					
ANR	5009387	Callee	Configure		5009382	0					
ANR	5009388	Identifier	Configure		5009382	0					
ANR	5009389	ArgumentList	false		5009382	1					
ANR	5009390	Argument	false		5009382	0					
ANR	5009391	Identifier	false		5009382	0					
ANR	5009392	ReturnStatement	"return internalInitialize ( c , p , s , gjid ) ;"	198:1:4920:4962	5009382	1	True				
ANR	5009393	CallExpression	"internalInitialize ( c , p , s , gjid )"		5009382	0					
ANR	5009394	Callee	internalInitialize		5009382	0					
ANR	5009395	Identifier	internalInitialize		5009382	0					
ANR	5009396	ArgumentList	c		5009382	1					
ANR	5009397	Argument	c		5009382	0					
ANR	5009398	Identifier	c		5009382	0					
ANR	5009399	Argument	p		5009382	1					
ANR	5009400	Identifier	p		5009382	0					
ANR	5009401	Argument	s		5009382	2					
ANR	5009402	Identifier	s		5009382	0					
ANR	5009403	Argument	gjid		5009382	3					
ANR	5009404	Identifier	gjid		5009382	0					
ANR	5009405	ReturnType	bool		5009382	1					
ANR	5009406	Identifier	WriteUserLog :: initialize		5009382	2					
ANR	5009407	ParameterList	"int c , int p , int s , const char * gjid"		5009382	3					
ANR	5009408	Parameter	int c	195:26:4858:4862	5009382	0	True				
ANR	5009409	ParameterType	int		5009382	0					
ANR	5009410	Identifier	c		5009382	1					
ANR	5009411	Parameter	int p	195:33:4865:4869	5009382	1	True				
ANR	5009412	ParameterType	int		5009382	0					
ANR	5009413	Identifier	p		5009382	1					
ANR	5009414	Parameter	int s	195:40:4872:4876	5009382	2	True				
ANR	5009415	ParameterType	int		5009382	0					
ANR	5009416	Identifier	s		5009382	1					
ANR	5009417	Parameter	const char * gjid	195:47:4879:4894	5009382	3	True				
ANR	5009418	ParameterType	const char *		5009382	0					
ANR	5009419	Identifier	gjid		5009382	1					
ANR	5009420	CFGEntryNode	ENTRY		5009382		True				
ANR	5009421	CFGExitNode	EXIT		5009382		True				
ANR	5009422	Symbol	p		5009382						
ANR	5009423	Symbol	c		5009382						
ANR	5009424	Symbol	s		5009382						
ANR	5009425	Symbol	false		5009382						
ANR	5009426	Symbol	internalInitialize		5009382						
ANR	5009427	Symbol	gjid		5009382						
ANR	5009428	Function	WriteUserLog :: internalInitialize	202:0:5026:5513							
ANR	5009429	FunctionDef	"WriteUserLog :: internalInitialize (int c , int p , int s , const char * gjid)"		5009428	0					
ANR	5009430	CompoundStatement		204:0:5105:5513	5009428	0					
ANR	5009431	ExpressionStatement	m_cluster = c	206:1:5109:5122	5009428	0	True				
ANR	5009432	AssignmentExpression	m_cluster = c		5009428	0		=			
ANR	5009433	Identifier	m_cluster		5009428	0					
ANR	5009434	Identifier	c		5009428	1					
ANR	5009435	ExpressionStatement	m_proc = p	207:1:5125:5135	5009428	1	True				
ANR	5009436	AssignmentExpression	m_proc = p		5009428	0		=			
ANR	5009437	Identifier	m_proc		5009428	0					
ANR	5009438	Identifier	p		5009428	1					
ANR	5009439	ExpressionStatement	m_subproc = s	208:1:5138:5151	5009428	2	True				
ANR	5009440	AssignmentExpression	m_subproc = s		5009428	0		=			
ANR	5009441	Identifier	m_subproc		5009428	0					
ANR	5009442	Identifier	s		5009428	1					
ANR	5009443	IfStatement	if ( ! m_global_disable && m_global_path && ! m_global_fp )		5009428	3					
ANR	5009444	Condition	! m_global_disable && m_global_path && ! m_global_fp	212:6:5292:5341	5009428	0	True				
ANR	5009445	AndExpression	! m_global_disable && m_global_path && ! m_global_fp		5009428	0		&&			
ANR	5009446	UnaryOperationExpression	! m_global_disable		5009428	0					
ANR	5009447	UnaryOperator	!		5009428	0					
ANR	5009448	Identifier	m_global_disable		5009428	1					
ANR	5009449	AndExpression	m_global_path && ! m_global_fp		5009428	1		&&			
ANR	5009450	Identifier	m_global_path		5009428	0					
ANR	5009451	UnaryOperationExpression	! m_global_fp		5009428	1					
ANR	5009452	UnaryOperator	!		5009428	0					
ANR	5009453	Identifier	m_global_fp		5009428	1					
ANR	5009454	CompoundStatement		10:2:243:278	5009428	1					
ANR	5009455	IdentifierDeclStatement	priv_state priv = set_condor_priv ( ) ;	213:2:5349:5384	5009428	0	True				
ANR	5009456	IdentifierDecl	priv = set_condor_priv ( )		5009428	0					
ANR	5009457	IdentifierDeclType	priv_state		5009428	0					
ANR	5009458	Identifier	priv		5009428	1					
ANR	5009459	AssignmentExpression	priv = set_condor_priv ( )		5009428	2		=			
ANR	5009460	Identifier	priv		5009428	0					
ANR	5009461	CallExpression	set_condor_priv ( )		5009428	1					
ANR	5009462	Callee	set_condor_priv		5009428	0					
ANR	5009463	Identifier	set_condor_priv		5009428	0					
ANR	5009464	ArgumentList			5009428	1					
ANR	5009465	ExpressionStatement	openGlobalLog ( true )	214:2:5388:5409	5009428	1	True				
ANR	5009466	CallExpression	openGlobalLog ( true )		5009428	0					
ANR	5009467	Callee	openGlobalLog		5009428	0					
ANR	5009468	Identifier	openGlobalLog		5009428	0					
ANR	5009469	ArgumentList	true		5009428	1					
ANR	5009470	Argument	true		5009428	0					
ANR	5009471	Identifier	true		5009428	0					
ANR	5009472	ExpressionStatement	set_priv ( priv )	215:2:5413:5429	5009428	2	True				
ANR	5009473	CallExpression	set_priv ( priv )		5009428	0					
ANR	5009474	Callee	set_priv		5009428	0					
ANR	5009475	Identifier	set_priv		5009428	0					
ANR	5009476	ArgumentList	priv		5009428	1					
ANR	5009477	Argument	priv		5009428	0					
ANR	5009478	Identifier	priv		5009428	0					
ANR	5009479	IfStatement	if ( gjid )		5009428	4					
ANR	5009480	Condition	gjid	218:4:5439:5442	5009428	0	True				
ANR	5009481	Identifier	gjid		5009428	0					
ANR	5009482	CompoundStatement		15:10:339:339	5009428	1					
ANR	5009483	ExpressionStatement	m_gjid = strdup ( gjid )	219:2:5449:5470	5009428	0	True				
ANR	5009484	AssignmentExpression	m_gjid = strdup ( gjid )		5009428	0		=			
ANR	5009485	Identifier	m_gjid		5009428	0					
ANR	5009486	CallExpression	strdup ( gjid )		5009428	1					
ANR	5009487	Callee	strdup		5009428	0					
ANR	5009488	Identifier	strdup		5009428	0					
ANR	5009489	ArgumentList	gjid		5009428	1					
ANR	5009490	Argument	gjid		5009428	0					
ANR	5009491	Identifier	gjid		5009428	0					
ANR	5009492	ExpressionStatement	m_initialized = true	222:1:5477:5497	5009428	5	True				
ANR	5009493	AssignmentExpression	m_initialized = true		5009428	0		=			
ANR	5009494	Identifier	m_initialized		5009428	0					
ANR	5009495	Identifier	true		5009428	1					
ANR	5009496	ReturnStatement	return true ;	223:1:5500:5511	5009428	6	True				
ANR	5009497	Identifier	true		5009428	0					
ANR	5009498	ReturnType	bool		5009428	1					
ANR	5009499	Identifier	WriteUserLog :: internalInitialize		5009428	2					
ANR	5009500	ParameterList	"int c , int p , int s , const char * gjid"		5009428	3					
ANR	5009501	Parameter	int c	203:34:5065:5069	5009428	0	True				
ANR	5009502	ParameterType	int		5009428	0					
ANR	5009503	Identifier	c		5009428	1					
ANR	5009504	Parameter	int p	203:41:5072:5076	5009428	1	True				
ANR	5009505	ParameterType	int		5009428	0					
ANR	5009506	Identifier	p		5009428	1					
ANR	5009507	Parameter	int s	203:48:5079:5083	5009428	2	True				
ANR	5009508	ParameterType	int		5009428	0					
ANR	5009509	Identifier	s		5009428	1					
ANR	5009510	Parameter	const char * gjid	203:55:5086:5101	5009428	3	True				
ANR	5009511	ParameterType	const char *		5009428	0					
ANR	5009512	Identifier	gjid		5009428	1					
ANR	5009513	CFGEntryNode	ENTRY		5009428		True				
ANR	5009514	CFGExitNode	EXIT		5009428		True				
ANR	5009515	Symbol	m_global_disable		5009428						
ANR	5009516	Symbol	m_initialized		5009428						
ANR	5009517	Symbol	set_condor_priv		5009428						
ANR	5009518	Symbol	c		5009428						
ANR	5009519	Symbol	m_global_path		5009428						
ANR	5009520	Symbol	m_subproc		5009428						
ANR	5009521	Symbol	m_cluster		5009428						
ANR	5009522	Symbol	m_proc		5009428						
ANR	5009523	Symbol	gjid		5009428						
ANR	5009524	Symbol	p		5009428						
ANR	5009525	Symbol	s		5009428						
ANR	5009526	Symbol	m_global_fp		5009428						
ANR	5009527	Symbol	true		5009428						
ANR	5009528	Symbol	priv		5009428						
ANR	5009529	Symbol	m_gjid		5009428						
ANR	5009530	Symbol	strdup		5009428						
ANR	5009531	Function	WriteUserLog :: Configure	227:0:5557:8599							
ANR	5009532	FunctionDef	WriteUserLog :: Configure (bool force)		5009531	0					
ANR	5009533	CompoundStatement		229:0:5600:8599	5009531	0					
ANR	5009534	IdentifierDeclStatement	bool doLocalLocking = false ;	232:1:5699:5726	5009531	0	True				
ANR	5009535	IdentifierDecl	doLocalLocking = false		5009531	0					
ANR	5009536	IdentifierDeclType	bool		5009531	0					
ANR	5009537	Identifier	doLocalLocking		5009531	1					
ANR	5009538	AssignmentExpression	doLocalLocking = false		5009531	2		=			
ANR	5009539	Identifier	false		5009531	0					
ANR	5009540	Identifier	false		5009531	1					
ANR	5009541	IdentifierDeclStatement	priv_state previous ;	233:1:5729:5748	5009531	1	True				
ANR	5009542	IdentifierDecl	previous		5009531	0					
ANR	5009543	IdentifierDeclType	priv_state		5009531	0					
ANR	5009544	Identifier	previous		5009531	1					
ANR	5009545	IfStatement	if ( m_configured && ( ! force ) )		5009531	2					
ANR	5009546	Condition	m_configured && ( ! force )	235:7:5825:5850	5009531	0	True				
ANR	5009547	AndExpression	m_configured && ( ! force )		5009531	0		&&			
ANR	5009548	Identifier	m_configured		5009531	0					
ANR	5009549	UnaryOperationExpression	! force		5009531	1					
ANR	5009550	UnaryOperator	!		5009531	0					
ANR	5009551	Identifier	force		5009531	1					
ANR	5009552	CompoundStatement		7:37:254:254	5009531	1					
ANR	5009553	ReturnStatement	return true ;	236:2:5859:5870	5009531	0	True				
ANR	5009554	Identifier	true		5009531	0					
ANR	5009555	ExpressionStatement	FreeGlobalResources ( false )	238:1:5876:5904	5009531	3	True				
ANR	5009556	CallExpression	FreeGlobalResources ( false )		5009531	0					
ANR	5009557	Callee	FreeGlobalResources		5009531	0					
ANR	5009558	Identifier	FreeGlobalResources		5009531	0					
ANR	5009559	ArgumentList	false		5009531	1					
ANR	5009560	Argument	false		5009531	0					
ANR	5009561	Identifier	false		5009531	0					
ANR	5009562	ExpressionStatement	m_configured = true	239:1:5907:5926	5009531	4	True				
ANR	5009563	AssignmentExpression	m_configured = true		5009531	0		=			
ANR	5009564	Identifier	m_configured		5009531	0					
ANR	5009565	Identifier	true		5009531	1					
ANR	5009566	ExpressionStatement	"m_enable_fsync = param_boolean ( ""ENABLE_USERLOG_FSYNC"" , true )"	241:1:5930:5992	5009531	5	True				
ANR	5009567	AssignmentExpression	"m_enable_fsync = param_boolean ( ""ENABLE_USERLOG_FSYNC"" , true )"		5009531	0		=			
ANR	5009568	Identifier	m_enable_fsync		5009531	0					
ANR	5009569	CallExpression	"param_boolean ( ""ENABLE_USERLOG_FSYNC"" , true )"		5009531	1					
ANR	5009570	Callee	param_boolean		5009531	0					
ANR	5009571	Identifier	param_boolean		5009531	0					
ANR	5009572	ArgumentList	"""ENABLE_USERLOG_FSYNC"""		5009531	1					
ANR	5009573	Argument	"""ENABLE_USERLOG_FSYNC"""		5009531	0					
ANR	5009574	PrimaryExpression	"""ENABLE_USERLOG_FSYNC"""		5009531	0					
ANR	5009575	Argument	true		5009531	1					
ANR	5009576	Identifier	true		5009531	0					
ANR	5009577	ExpressionStatement	"m_enable_locking = param_boolean ( ""ENABLE_USERLOG_LOCKING"" , true )"	242:1:5995:6061	5009531	6	True				
ANR	5009578	AssignmentExpression	"m_enable_locking = param_boolean ( ""ENABLE_USERLOG_LOCKING"" , true )"		5009531	0		=			
ANR	5009579	Identifier	m_enable_locking		5009531	0					
ANR	5009580	CallExpression	"param_boolean ( ""ENABLE_USERLOG_LOCKING"" , true )"		5009531	1					
ANR	5009581	Callee	param_boolean		5009531	0					
ANR	5009582	Identifier	param_boolean		5009531	0					
ANR	5009583	ArgumentList	"""ENABLE_USERLOG_LOCKING"""		5009531	1					
ANR	5009584	Argument	"""ENABLE_USERLOG_LOCKING"""		5009531	0					
ANR	5009585	PrimaryExpression	"""ENABLE_USERLOG_LOCKING"""		5009531	0					
ANR	5009586	Argument	true		5009531	1					
ANR	5009587	Identifier	true		5009531	0					
ANR	5009588	ExpressionStatement	"m_global_path = param ( ""EVENT_LOG"" )"	244:1:6065:6101	5009531	7	True				
ANR	5009589	AssignmentExpression	"m_global_path = param ( ""EVENT_LOG"" )"		5009531	0		=			
ANR	5009590	Identifier	m_global_path		5009531	0					
ANR	5009591	CallExpression	"param ( ""EVENT_LOG"" )"		5009531	1					
ANR	5009592	Callee	param		5009531	0					
ANR	5009593	Identifier	param		5009531	0					
ANR	5009594	ArgumentList	"""EVENT_LOG"""		5009531	1					
ANR	5009595	Argument	"""EVENT_LOG"""		5009531	0					
ANR	5009596	PrimaryExpression	"""EVENT_LOG"""		5009531	0					
ANR	5009597	IfStatement	if ( NULL == m_global_path )		5009531	8					
ANR	5009598	Condition	NULL == m_global_path	245:6:6109:6129	5009531	0	True				
ANR	5009599	EqualityExpression	NULL == m_global_path		5009531	0		==			
ANR	5009600	Identifier	NULL		5009531	0					
ANR	5009601	Identifier	m_global_path		5009531	1					
ANR	5009602	CompoundStatement		17:30:532:532	5009531	1					
ANR	5009603	ReturnStatement	return true ;	246:2:6137:6148	5009531	0	True				
ANR	5009604	Identifier	true		5009531	0					
ANR	5009605	ExpressionStatement	"m_global_stat = new StatWrapper ( m_global_path , StatWrapper :: STATOP_NONE )"	248:1:6154:6228	5009531	9	True				
ANR	5009606	AssignmentExpression	"m_global_stat = new StatWrapper ( m_global_path , StatWrapper :: STATOP_NONE )"		5009531	0		=			
ANR	5009607	Identifier	m_global_stat		5009531	0					
ANR	5009608	Expression	"m_global_path , StatWrapper :: STATOP_NONE"		5009531	1					
ANR	5009609	Identifier	m_global_path		5009531	0					
ANR	5009610	Identifier	StatWrapper :: STATOP_NONE		5009531	1					
ANR	5009611	ExpressionStatement	m_global_state = new WriteUserLogState ( )	249:1:6231:6272	5009531	10	True				
ANR	5009612	AssignmentExpression	m_global_state = new WriteUserLogState ( )		5009531	0		=			
ANR	5009613	Identifier	m_global_state		5009531	0					
ANR	5009614	UnaryExpression	new WriteUserLogState ( )		5009531	1					
ANR	5009615	ExpressionStatement	"m_rotation_lock_path = param ( ""EVENT_LOG_ROTATION_LOCK"" )"	252:1:6277:6334	5009531	11	True				
ANR	5009616	AssignmentExpression	"m_rotation_lock_path = param ( ""EVENT_LOG_ROTATION_LOCK"" )"		5009531	0		=			
ANR	5009617	Identifier	m_rotation_lock_path		5009531	0					
ANR	5009618	CallExpression	"param ( ""EVENT_LOG_ROTATION_LOCK"" )"		5009531	1					
ANR	5009619	Callee	param		5009531	0					
ANR	5009620	Identifier	param		5009531	0					
ANR	5009621	ArgumentList	"""EVENT_LOG_ROTATION_LOCK"""		5009531	1					
ANR	5009622	Argument	"""EVENT_LOG_ROTATION_LOCK"""		5009531	0					
ANR	5009623	PrimaryExpression	"""EVENT_LOG_ROTATION_LOCK"""		5009531	0					
ANR	5009624	IfStatement	if ( NULL == m_rotation_lock_path )		5009531	12					
ANR	5009625	Condition	NULL == m_rotation_lock_path	253:6:6342:6369	5009531	0	True				
ANR	5009626	EqualityExpression	NULL == m_rotation_lock_path		5009531	0		==			
ANR	5009627	Identifier	NULL		5009531	0					
ANR	5009628	Identifier	m_rotation_lock_path		5009531	1					
ANR	5009629	CompoundStatement		28:2:800:868	5009531	1					
ANR	5009630	IdentifierDeclStatement	"bool new_locking = param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true ) ;"	256:2:6401:6469	5009531	0	True				
ANR	5009631	IdentifierDecl	"new_locking = param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true )"		5009531	0					
ANR	5009632	IdentifierDeclType	bool		5009531	0					
ANR	5009633	Identifier	new_locking		5009531	1					
ANR	5009634	AssignmentExpression	"new_locking = param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true )"		5009531	2		=			
ANR	5009635	Identifier	new_locking		5009531	0					
ANR	5009636	CallExpression	"param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true )"		5009531	1					
ANR	5009637	Callee	param_boolean		5009531	0					
ANR	5009638	Identifier	param_boolean		5009531	0					
ANR	5009639	ArgumentList	"""CREATE_LOCKS_ON_LOCAL_DISK"""		5009531	1					
ANR	5009640	Argument	"""CREATE_LOCKS_ON_LOCAL_DISK"""		5009531	0					
ANR	5009641	PrimaryExpression	"""CREATE_LOCKS_ON_LOCAL_DISK"""		5009531	0					
ANR	5009642	Argument	true		5009531	1					
ANR	5009643	Identifier	true		5009531	0					
ANR	5009644	IfStatement	if ( new_locking )		5009531	1					
ANR	5009645	Condition	new_locking	257:6:6477:6487	5009531	0	True				
ANR	5009646	Identifier	new_locking		5009531	0					
ANR	5009647	CompoundStatement		29:18:888:888	5009531	1					
ANR	5009648	ExpressionStatement	previous = set_priv ( PRIV_CONDOR )	258:3:6494:6526	5009531	0	True				
ANR	5009649	AssignmentExpression	previous = set_priv ( PRIV_CONDOR )		5009531	0		=			
ANR	5009650	Identifier	previous		5009531	0					
ANR	5009651	CallExpression	set_priv ( PRIV_CONDOR )		5009531	1					
ANR	5009652	Callee	set_priv		5009531	0					
ANR	5009653	Identifier	set_priv		5009531	0					
ANR	5009654	ArgumentList	PRIV_CONDOR		5009531	1					
ANR	5009655	Argument	PRIV_CONDOR		5009531	0					
ANR	5009656	Identifier	PRIV_CONDOR		5009531	0					
ANR	5009657	ExpressionStatement	"m_rotation_lock = new FileLock ( m_global_path , true , false )"	259:3:6531:6589	5009531	1	True				
ANR	5009658	AssignmentExpression	"m_rotation_lock = new FileLock ( m_global_path , true , false )"		5009531	0		=			
ANR	5009659	Identifier	m_rotation_lock		5009531	0					
ANR	5009660	Expression	"m_global_path , true , false"		5009531	1					
ANR	5009661	Identifier	m_global_path		5009531	0					
ANR	5009662	Expression	"true , false"		5009531	1					
ANR	5009663	Identifier	true		5009531	0					
ANR	5009664	Identifier	false		5009531	1					
ANR	5009665	IfStatement	if ( m_rotation_lock -> initSucceeded ( ) )		5009531	2					
ANR	5009666	Condition	m_rotation_lock -> initSucceeded ( )	260:7:6598:6629	5009531	0	True				
ANR	5009667	CallExpression	m_rotation_lock -> initSucceeded ( )		5009531	0					
ANR	5009668	Callee	m_rotation_lock -> initSucceeded		5009531	0					
ANR	5009669	PtrMemberAccess	m_rotation_lock -> initSucceeded		5009531	0					
ANR	5009670	Identifier	m_rotation_lock		5009531	0					
ANR	5009671	Identifier	initSucceeded		5009531	1					
ANR	5009672	ArgumentList			5009531	1					
ANR	5009673	CompoundStatement		32:41:1031:1031	5009531	1					
ANR	5009674	ExpressionStatement	doLocalLocking = true	261:4:6638:6659	5009531	0	True				
ANR	5009675	AssignmentExpression	doLocalLocking = true		5009531	0		=			
ANR	5009676	Identifier	doLocalLocking		5009531	0					
ANR	5009677	Identifier	true		5009531	1					
ANR	5009678	ElseStatement	else		5009531	0					
ANR	5009679	CompoundStatement		34:10:1072:1072	5009531	0					
ANR	5009680	Statement	delete	263:4:6679:6684	5009531	0	True				
ANR	5009681	ExpressionStatement	m_rotation_lock	263:11:6686:6701	5009531	1	True				
ANR	5009682	Identifier	m_rotation_lock		5009531	0					
ANR	5009683	ExpressionStatement	set_priv ( previous )	265:3:6711:6729	5009531	3	True				
ANR	5009684	CallExpression	set_priv ( previous )		5009531	0					
ANR	5009685	Callee	set_priv		5009531	0					
ANR	5009686	Identifier	set_priv		5009531	0					
ANR	5009687	ArgumentList	previous		5009531	1					
ANR	5009688	Argument	previous		5009531	0					
ANR	5009689	Identifier	previous		5009531	0					
ANR	5009690	IfStatement	if ( ! doLocalLocking )		5009531	2					
ANR	5009691	Condition	! doLocalLocking	268:6:6749:6763	5009531	0	True				
ANR	5009692	UnaryOperationExpression	! doLocalLocking		5009531	0					
ANR	5009693	UnaryOperator	!		5009531	0					
ANR	5009694	Identifier	doLocalLocking		5009531	1					
ANR	5009695	CompoundStatement		42:3:1210:1241	5009531	1					
ANR	5009696	IdentifierDeclStatement	int len = strlen ( m_global_path ) + 6 ;	269:3:6771:6806	5009531	0	True				
ANR	5009697	IdentifierDecl	len = strlen ( m_global_path ) + 6		5009531	0					
ANR	5009698	IdentifierDeclType	int		5009531	0					
ANR	5009699	Identifier	len		5009531	1					
ANR	5009700	AssignmentExpression	len = strlen ( m_global_path ) + 6		5009531	2		=			
ANR	5009701	Identifier	len		5009531	0					
ANR	5009702	AdditiveExpression	strlen ( m_global_path ) + 6		5009531	1		+			
ANR	5009703	CallExpression	strlen ( m_global_path )		5009531	0					
ANR	5009704	Callee	strlen		5009531	0					
ANR	5009705	Identifier	strlen		5009531	0					
ANR	5009706	ArgumentList	m_global_path		5009531	1					
ANR	5009707	Argument	m_global_path		5009531	0					
ANR	5009708	Identifier	m_global_path		5009531	0					
ANR	5009709	PrimaryExpression	6		5009531	1					
ANR	5009710	IdentifierDeclStatement	char * tmp = ( char * ) malloc ( len ) ;	270:3:6811:6842	5009531	1	True				
ANR	5009711	IdentifierDecl	* tmp = ( char * ) malloc ( len )		5009531	0					
ANR	5009712	IdentifierDeclType	char *		5009531	0					
ANR	5009713	Identifier	tmp		5009531	1					
ANR	5009714	AssignmentExpression	* tmp = ( char * ) malloc ( len )		5009531	2		=			
ANR	5009715	Identifier	tmp		5009531	0					
ANR	5009716	CastExpression	( char * ) malloc ( len )		5009531	1					
ANR	5009717	CastTarget	char *		5009531	0					
ANR	5009718	CallExpression	malloc ( len )		5009531	1					
ANR	5009719	Callee	malloc		5009531	0					
ANR	5009720	Identifier	malloc		5009531	0					
ANR	5009721	ArgumentList	len		5009531	1					
ANR	5009722	Argument	len		5009531	0					
ANR	5009723	Identifier	len		5009531	0					
ANR	5009724	ExpressionStatement	"snprintf ( tmp , len , ""%s.lock"" , m_global_path )"	271:3:6847:6893	5009531	2	True				
ANR	5009725	CallExpression	"snprintf ( tmp , len , ""%s.lock"" , m_global_path )"		5009531	0					
ANR	5009726	Callee	snprintf		5009531	0					
ANR	5009727	Identifier	snprintf		5009531	0					
ANR	5009728	ArgumentList	tmp		5009531	1					
ANR	5009729	Argument	tmp		5009531	0					
ANR	5009730	Identifier	tmp		5009531	0					
ANR	5009731	Argument	len		5009531	1					
ANR	5009732	Identifier	len		5009531	0					
ANR	5009733	Argument	"""%s.lock"""		5009531	2					
ANR	5009734	PrimaryExpression	"""%s.lock"""		5009531	0					
ANR	5009735	Argument	m_global_path		5009531	3					
ANR	5009736	Identifier	m_global_path		5009531	0					
ANR	5009737	ExpressionStatement	m_rotation_lock_path = tmp	272:3:6898:6924	5009531	3	True				
ANR	5009738	AssignmentExpression	m_rotation_lock_path = tmp		5009531	0		=			
ANR	5009739	Identifier	m_rotation_lock_path		5009531	0					
ANR	5009740	Identifier	tmp		5009531	1					
ANR	5009741	IfStatement	if ( ! doLocalLocking )		5009531	13					
ANR	5009742	Condition	! doLocalLocking	275:5:6938:6952	5009531	0	True				
ANR	5009743	UnaryOperationExpression	! doLocalLocking		5009531	0					
ANR	5009744	UnaryOperator	!		5009531	0					
ANR	5009745	Identifier	doLocalLocking		5009531	1					
ANR	5009746	CompoundStatement		47:22:1354:1354	5009531	1					
ANR	5009747	ExpressionStatement	previous = set_priv ( PRIV_CONDOR )	277:2:6997:7029	5009531	0	True				
ANR	5009748	AssignmentExpression	previous = set_priv ( PRIV_CONDOR )		5009531	0		=			
ANR	5009749	Identifier	previous		5009531	0					
ANR	5009750	CallExpression	set_priv ( PRIV_CONDOR )		5009531	1					
ANR	5009751	Callee	set_priv		5009531	0					
ANR	5009752	Identifier	set_priv		5009531	0					
ANR	5009753	ArgumentList	PRIV_CONDOR		5009531	1					
ANR	5009754	Argument	PRIV_CONDOR		5009531	0					
ANR	5009755	Identifier	PRIV_CONDOR		5009531	0					
ANR	5009756	ExpressionStatement	"m_rotation_lock_fd = open ( m_rotation_lock_path , O_WRONLY | O_CREAT , 0666 )"	278:2:7033:7106	5009531	1	True				
ANR	5009757	AssignmentExpression	"m_rotation_lock_fd = open ( m_rotation_lock_path , O_WRONLY | O_CREAT , 0666 )"		5009531	0		=			
ANR	5009758	Identifier	m_rotation_lock_fd		5009531	0					
ANR	5009759	CallExpression	"open ( m_rotation_lock_path , O_WRONLY | O_CREAT , 0666 )"		5009531	1					
ANR	5009760	Callee	open		5009531	0					
ANR	5009761	Identifier	open		5009531	0					
ANR	5009762	ArgumentList	m_rotation_lock_path		5009531	1					
ANR	5009763	Argument	m_rotation_lock_path		5009531	0					
ANR	5009764	Identifier	m_rotation_lock_path		5009531	0					
ANR	5009765	Argument	O_WRONLY | O_CREAT		5009531	1					
ANR	5009766	InclusiveOrExpression	O_WRONLY | O_CREAT		5009531	0		|			
ANR	5009767	Identifier	O_WRONLY		5009531	0					
ANR	5009768	Identifier	O_CREAT		5009531	1					
ANR	5009769	Argument	0666		5009531	2					
ANR	5009770	PrimaryExpression	0666		5009531	0					
ANR	5009771	IfStatement	if ( m_rotation_lock_fd < 0 )		5009531	2					
ANR	5009772	Condition	m_rotation_lock_fd < 0	279:7:7115:7136	5009531	0	True				
ANR	5009773	RelationalExpression	m_rotation_lock_fd < 0		5009531	0		<			
ANR	5009774	Identifier	m_rotation_lock_fd		5009531	0					
ANR	5009775	PrimaryExpression	0		5009531	1					
ANR	5009776	CompoundStatement		51:32:1539:1539	5009531	1					
ANR	5009777	Statement	dprintf	280:3:7145:7151	5009531	0	True				
ANR	5009778	Statement	(	280:10:7152:7152	5009531	1	True				
ANR	5009779	Statement	D_ALWAYS	280:12:7154:7161	5009531	2	True				
ANR	5009780	Statement	","	280:20:7162:7162	5009531	3	True				
ANR	5009781	Statement	"""Warning: WriteUserLog Failed to open event rotation lock file %s:"""	281:5:7169:7235	5009531	4	True				
ANR	5009782	Statement	""" %d (%s)\\n"""	282:5:7242:7253	5009531	5	True				
ANR	5009783	Statement	","	282:17:7254:7254	5009531	6	True				
ANR	5009784	Statement	m_rotation_lock_path	283:5:7261:7280	5009531	7	True				
ANR	5009785	Statement	","	283:25:7281:7281	5009531	8	True				
ANR	5009786	Statement	errno	283:27:7283:7287	5009531	9	True				
ANR	5009787	Statement	","	283:32:7288:7288	5009531	10	True				
ANR	5009788	Statement	strerror	283:34:7290:7297	5009531	11	True				
ANR	5009789	Statement	(	283:42:7298:7298	5009531	12	True				
ANR	5009790	Statement	errno	283:43:7299:7303	5009531	13	True				
ANR	5009791	Statement	)	283:48:7304:7304	5009531	14	True				
ANR	5009792	Statement	)	283:50:7306:7306	5009531	15	True				
ANR	5009793	ExpressionStatement		283:51:7307:7307	5009531	16	True				
ANR	5009794	ExpressionStatement	m_rotation_lock = new FakeFileLock ( )	284:3:7312:7349	5009531	17	True				
ANR	5009795	AssignmentExpression	m_rotation_lock = new FakeFileLock ( )		5009531	0		=			
ANR	5009796	Identifier	m_rotation_lock		5009531	0					
ANR	5009797	UnaryExpression	new FakeFileLock ( )		5009531	1					
ANR	5009798	ElseStatement	else		5009531	0					
ANR	5009799	CompoundStatement		58:7:1761:1761	5009531	0					
ANR	5009800	ExpressionStatement	"m_rotation_lock = new FileLock ( m_rotation_lock_fd , NULL , m_rotation_lock_path )"	287:3:7367:7467	5009531	0	True				
ANR	5009801	AssignmentExpression	"m_rotation_lock = new FileLock ( m_rotation_lock_fd , NULL , m_rotation_lock_path )"		5009531	0		=			
ANR	5009802	Identifier	m_rotation_lock		5009531	0					
ANR	5009803	Expression	"m_rotation_lock_fd , NULL , m_rotation_lock_path"		5009531	1					
ANR	5009804	Identifier	m_rotation_lock_fd		5009531	0					
ANR	5009805	Expression	"NULL , m_rotation_lock_path"		5009531	1					
ANR	5009806	Identifier	NULL		5009531	0					
ANR	5009807	Identifier	m_rotation_lock_path		5009531	1					
ANR	5009808	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""WriteUserLog Created rotation lock %s @ %p\\n"" , m_rotation_lock_path , m_rotation_lock )"	290:3:7472:7586	5009531	1	True				
ANR	5009809	CallExpression	"dprintf ( D_FULLDEBUG , ""WriteUserLog Created rotation lock %s @ %p\\n"" , m_rotation_lock_path , m_rotation_lock )"		5009531	0					
ANR	5009810	Callee	dprintf		5009531	0					
ANR	5009811	Identifier	dprintf		5009531	0					
ANR	5009812	ArgumentList	D_FULLDEBUG		5009531	1					
ANR	5009813	Argument	D_FULLDEBUG		5009531	0					
ANR	5009814	Identifier	D_FULLDEBUG		5009531	0					
ANR	5009815	Argument	"""WriteUserLog Created rotation lock %s @ %p\\n"""		5009531	1					
ANR	5009816	PrimaryExpression	"""WriteUserLog Created rotation lock %s @ %p\\n"""		5009531	0					
ANR	5009817	Argument	m_rotation_lock_path		5009531	2					
ANR	5009818	Identifier	m_rotation_lock_path		5009531	0					
ANR	5009819	Argument	m_rotation_lock		5009531	3					
ANR	5009820	Identifier	m_rotation_lock		5009531	0					
ANR	5009821	ExpressionStatement	set_priv ( previous )	293:2:7594:7612	5009531	3	True				
ANR	5009822	CallExpression	set_priv ( previous )		5009531	0					
ANR	5009823	Callee	set_priv		5009531	0					
ANR	5009824	Identifier	set_priv		5009531	0					
ANR	5009825	ArgumentList	previous		5009531	1					
ANR	5009826	Argument	previous		5009531	0					
ANR	5009827	Identifier	previous		5009531	0					
ANR	5009828	ExpressionStatement	"m_global_use_xml = param_boolean ( ""EVENT_LOG_USE_XML"" , false )"	297:1:7620:7682	5009531	14	True				
ANR	5009829	AssignmentExpression	"m_global_use_xml = param_boolean ( ""EVENT_LOG_USE_XML"" , false )"		5009531	0		=			
ANR	5009830	Identifier	m_global_use_xml		5009531	0					
ANR	5009831	CallExpression	"param_boolean ( ""EVENT_LOG_USE_XML"" , false )"		5009531	1					
ANR	5009832	Callee	param_boolean		5009531	0					
ANR	5009833	Identifier	param_boolean		5009531	0					
ANR	5009834	ArgumentList	"""EVENT_LOG_USE_XML"""		5009531	1					
ANR	5009835	Argument	"""EVENT_LOG_USE_XML"""		5009531	0					
ANR	5009836	PrimaryExpression	"""EVENT_LOG_USE_XML"""		5009531	0					
ANR	5009837	Argument	false		5009531	1					
ANR	5009838	Identifier	false		5009531	0					
ANR	5009839	ExpressionStatement	"m_global_count_events = param_boolean ( ""EVENT_LOG_COUNT_EVENTS"" , false )"	298:1:7685:7757	5009531	15	True				
ANR	5009840	AssignmentExpression	"m_global_count_events = param_boolean ( ""EVENT_LOG_COUNT_EVENTS"" , false )"		5009531	0		=			
ANR	5009841	Identifier	m_global_count_events		5009531	0					
ANR	5009842	CallExpression	"param_boolean ( ""EVENT_LOG_COUNT_EVENTS"" , false )"		5009531	1					
ANR	5009843	Callee	param_boolean		5009531	0					
ANR	5009844	Identifier	param_boolean		5009531	0					
ANR	5009845	ArgumentList	"""EVENT_LOG_COUNT_EVENTS"""		5009531	1					
ANR	5009846	Argument	"""EVENT_LOG_COUNT_EVENTS"""		5009531	0					
ANR	5009847	PrimaryExpression	"""EVENT_LOG_COUNT_EVENTS"""		5009531	0					
ANR	5009848	Argument	false		5009531	1					
ANR	5009849	Identifier	false		5009531	0					
ANR	5009850	ExpressionStatement	"m_global_max_rotations = param_integer ( ""EVENT_LOG_MAX_ROTATIONS"" , 1 , 0 )"	299:1:7760:7833	5009531	16	True				
ANR	5009851	AssignmentExpression	"m_global_max_rotations = param_integer ( ""EVENT_LOG_MAX_ROTATIONS"" , 1 , 0 )"		5009531	0		=			
ANR	5009852	Identifier	m_global_max_rotations		5009531	0					
ANR	5009853	CallExpression	"param_integer ( ""EVENT_LOG_MAX_ROTATIONS"" , 1 , 0 )"		5009531	1					
ANR	5009854	Callee	param_integer		5009531	0					
ANR	5009855	Identifier	param_integer		5009531	0					
ANR	5009856	ArgumentList	"""EVENT_LOG_MAX_ROTATIONS"""		5009531	1					
ANR	5009857	Argument	"""EVENT_LOG_MAX_ROTATIONS"""		5009531	0					
ANR	5009858	PrimaryExpression	"""EVENT_LOG_MAX_ROTATIONS"""		5009531	0					
ANR	5009859	Argument	1		5009531	1					
ANR	5009860	PrimaryExpression	1		5009531	0					
ANR	5009861	Argument	0		5009531	2					
ANR	5009862	PrimaryExpression	0		5009531	0					
ANR	5009863	ExpressionStatement	"m_global_fsync_enable = param_boolean ( ""EVENT_LOG_FSYNC"" , false )"	300:1:7836:7901	5009531	17	True				
ANR	5009864	AssignmentExpression	"m_global_fsync_enable = param_boolean ( ""EVENT_LOG_FSYNC"" , false )"		5009531	0		=			
ANR	5009865	Identifier	m_global_fsync_enable		5009531	0					
ANR	5009866	CallExpression	"param_boolean ( ""EVENT_LOG_FSYNC"" , false )"		5009531	1					
ANR	5009867	Callee	param_boolean		5009531	0					
ANR	5009868	Identifier	param_boolean		5009531	0					
ANR	5009869	ArgumentList	"""EVENT_LOG_FSYNC"""		5009531	1					
ANR	5009870	Argument	"""EVENT_LOG_FSYNC"""		5009531	0					
ANR	5009871	PrimaryExpression	"""EVENT_LOG_FSYNC"""		5009531	0					
ANR	5009872	Argument	false		5009531	1					
ANR	5009873	Identifier	false		5009531	0					
ANR	5009874	ExpressionStatement	"m_global_lock_enable = param_boolean ( ""EVENT_LOG_LOCKING"" , true )"	301:1:7904:7969	5009531	18	True				
ANR	5009875	AssignmentExpression	"m_global_lock_enable = param_boolean ( ""EVENT_LOG_LOCKING"" , true )"		5009531	0		=			
ANR	5009876	Identifier	m_global_lock_enable		5009531	0					
ANR	5009877	CallExpression	"param_boolean ( ""EVENT_LOG_LOCKING"" , true )"		5009531	1					
ANR	5009878	Callee	param_boolean		5009531	0					
ANR	5009879	Identifier	param_boolean		5009531	0					
ANR	5009880	ArgumentList	"""EVENT_LOG_LOCKING"""		5009531	1					
ANR	5009881	Argument	"""EVENT_LOG_LOCKING"""		5009531	0					
ANR	5009882	PrimaryExpression	"""EVENT_LOG_LOCKING"""		5009531	0					
ANR	5009883	Argument	true		5009531	1					
ANR	5009884	Identifier	true		5009531	0					
ANR	5009885	ExpressionStatement	"m_global_max_filesize = param_integer ( ""EVENT_LOG_MAX_SIZE"" , - 1 )"	302:1:7972:8037	5009531	19	True				
ANR	5009886	AssignmentExpression	"m_global_max_filesize = param_integer ( ""EVENT_LOG_MAX_SIZE"" , - 1 )"		5009531	0		=			
ANR	5009887	Identifier	m_global_max_filesize		5009531	0					
ANR	5009888	CallExpression	"param_integer ( ""EVENT_LOG_MAX_SIZE"" , - 1 )"		5009531	1					
ANR	5009889	Callee	param_integer		5009531	0					
ANR	5009890	Identifier	param_integer		5009531	0					
ANR	5009891	ArgumentList	"""EVENT_LOG_MAX_SIZE"""		5009531	1					
ANR	5009892	Argument	"""EVENT_LOG_MAX_SIZE"""		5009531	0					
ANR	5009893	PrimaryExpression	"""EVENT_LOG_MAX_SIZE"""		5009531	0					
ANR	5009894	Argument	- 1		5009531	1					
ANR	5009895	UnaryOperationExpression	- 1		5009531	0					
ANR	5009896	UnaryOperator	-		5009531	0					
ANR	5009897	PrimaryExpression	1		5009531	1					
ANR	5009898	IfStatement	if ( m_global_max_filesize < 0 )		5009531	20					
ANR	5009899	Condition	m_global_max_filesize < 0	303:6:8045:8069	5009531	0	True				
ANR	5009900	RelationalExpression	m_global_max_filesize < 0		5009531	0		<			
ANR	5009901	Identifier	m_global_max_filesize		5009531	0					
ANR	5009902	PrimaryExpression	0		5009531	1					
ANR	5009903	CompoundStatement		75:34:2472:2472	5009531	1					
ANR	5009904	ExpressionStatement	"m_global_max_filesize = param_integer ( ""MAX_EVENT_LOG"" , 1000000 , 0 )"	304:2:8077:8145	5009531	0	True				
ANR	5009905	AssignmentExpression	"m_global_max_filesize = param_integer ( ""MAX_EVENT_LOG"" , 1000000 , 0 )"		5009531	0		=			
ANR	5009906	Identifier	m_global_max_filesize		5009531	0					
ANR	5009907	CallExpression	"param_integer ( ""MAX_EVENT_LOG"" , 1000000 , 0 )"		5009531	1					
ANR	5009908	Callee	param_integer		5009531	0					
ANR	5009909	Identifier	param_integer		5009531	0					
ANR	5009910	ArgumentList	"""MAX_EVENT_LOG"""		5009531	1					
ANR	5009911	Argument	"""MAX_EVENT_LOG"""		5009531	0					
ANR	5009912	PrimaryExpression	"""MAX_EVENT_LOG"""		5009531	0					
ANR	5009913	Argument	1000000		5009531	1					
ANR	5009914	PrimaryExpression	1000000		5009531	0					
ANR	5009915	Argument	0		5009531	2					
ANR	5009916	PrimaryExpression	0		5009531	0					
ANR	5009917	IfStatement	if ( m_global_max_filesize == 0 )		5009531	21					
ANR	5009918	Condition	m_global_max_filesize == 0	306:6:8156:8181	5009531	0	True				
ANR	5009919	EqualityExpression	m_global_max_filesize == 0		5009531	0		==			
ANR	5009920	Identifier	m_global_max_filesize		5009531	0					
ANR	5009921	PrimaryExpression	0		5009531	1					
ANR	5009922	CompoundStatement		78:35:2584:2584	5009531	1					
ANR	5009923	ExpressionStatement	m_global_max_rotations = 0	307:2:8189:8215	5009531	0	True				
ANR	5009924	AssignmentExpression	m_global_max_rotations = 0		5009531	0		=			
ANR	5009925	Identifier	m_global_max_rotations		5009531	0					
ANR	5009926	PrimaryExpression	0		5009531	1					
ANR	5009927	ElseStatement	else		5009531	0					
ANR	5009928	IdentifierDeclStatement	bool default_close = false ;	316:1:8473:8499	5009531	0	True				
ANR	5009929	IdentifierDecl	default_close = false		5009531	0					
ANR	5009930	IdentifierDeclType	bool		5009531	0					
ANR	5009931	Identifier	default_close		5009531	1					
ANR	5009932	AssignmentExpression	default_close = false		5009531	2		=			
ANR	5009933	Identifier	false		5009531	0					
ANR	5009934	Identifier	false		5009531	1					
ANR	5009935	Statement	if	313:2:8419:8420	5009531	22	True				
ANR	5009936	Statement	defined	313:5:8422:8428	5009531	23	True				
ANR	5009937	Statement	(	313:12:8429:8429	5009531	24	True				
ANR	5009938	Statement	WIN32	313:13:8430:8434	5009531	25	True				
ANR	5009939	Statement	)	313:18:8435:8435	5009531	26	True				
ANR	5009940	IdentifierDeclStatement	bool default_close = true ;	314:1:8438:8463	5009531	27	True				
ANR	5009941	IdentifierDecl	default_close = true		5009531	0					
ANR	5009942	IdentifierDeclType	bool		5009531	0					
ANR	5009943	Identifier	default_close		5009531	1					
ANR	5009944	AssignmentExpression	default_close = true		5009531	2		=			
ANR	5009945	Identifier	true		5009531	0					
ANR	5009946	Identifier	true		5009531	1					
ANR	5009947	IdentifierDeclStatement	"endif m_global_close = param_boolean ( ""EVENT_LOG_FORCE_CLOSE"" , default_close ) ;"	317:2:8503:8582	5009531	28	True				
ANR	5009948	IdentifierDecl	"m_global_close = param_boolean ( ""EVENT_LOG_FORCE_CLOSE"" , default_close )"		5009531	0					
ANR	5009949	IdentifierDeclType	endif		5009531	0					
ANR	5009950	Identifier	m_global_close		5009531	1					
ANR	5009951	AssignmentExpression	"m_global_close = param_boolean ( ""EVENT_LOG_FORCE_CLOSE"" , default_close )"		5009531	2		=			
ANR	5009952	Identifier	m_global_close		5009531	0					
ANR	5009953	CallExpression	"param_boolean ( ""EVENT_LOG_FORCE_CLOSE"" , default_close )"		5009531	1					
ANR	5009954	Callee	param_boolean		5009531	0					
ANR	5009955	Identifier	param_boolean		5009531	0					
ANR	5009956	ArgumentList	"""EVENT_LOG_FORCE_CLOSE"""		5009531	1					
ANR	5009957	Argument	"""EVENT_LOG_FORCE_CLOSE"""		5009531	0					
ANR	5009958	PrimaryExpression	"""EVENT_LOG_FORCE_CLOSE"""		5009531	0					
ANR	5009959	Argument	default_close		5009531	1					
ANR	5009960	Identifier	default_close		5009531	0					
ANR	5009961	ReturnStatement	return true ;	320:1:8586:8597	5009531	29	True				
ANR	5009962	Identifier	true		5009531	0					
ANR	5009963	ReturnType	bool		5009531	1					
ANR	5009964	Identifier	WriteUserLog :: Configure		5009531	2					
ANR	5009965	ParameterList	bool force		5009531	3					
ANR	5009966	Parameter	bool force	228:25:5587:5596	5009531	0	True				
ANR	5009967	ParameterType	bool		5009531	0					
ANR	5009968	Identifier	force		5009531	1					
ANR	5009969	CFGEntryNode	ENTRY		5009531		True				
ANR	5009970	CFGExitNode	EXIT		5009531		True				
ANR	5009971	Symbol	m_enable_locking		5009531						
ANR	5009972	Symbol	doLocalLocking		5009531						
ANR	5009973	Symbol	O_CREAT		5009531						
ANR	5009974	Symbol	StatWrapper :: STATOP_NONE		5009531						
ANR	5009975	Symbol	m_global_use_xml		5009531						
ANR	5009976	Symbol	m_rotation_lock_fd		5009531						
ANR	5009977	Symbol	strlen		5009531						
ANR	5009978	Symbol	m_global_stat		5009531						
ANR	5009979	Symbol	len		5009531						
ANR	5009980	Symbol	param		5009531						
ANR	5009981	Symbol	tmp		5009531						
ANR	5009982	Symbol	m_rotation_lock		5009531						
ANR	5009983	Symbol	m_global_fsync_enable		5009531						
ANR	5009984	Symbol	m_rotation_lock_path		5009531						
ANR	5009985	Symbol	m_global_state		5009531						
ANR	5009986	Symbol	malloc		5009531						
ANR	5009987	Symbol	m_global_path		5009531						
ANR	5009988	Symbol	NULL		5009531						
ANR	5009989	Symbol	previous		5009531						
ANR	5009990	Symbol	m_enable_fsync		5009531						
ANR	5009991	Symbol	m_global_max_rotations		5009531						
ANR	5009992	Symbol	false		5009531						
ANR	5009993	Symbol	m_global_lock_enable		5009531						
ANR	5009994	Symbol	default_close		5009531						
ANR	5009995	Symbol	param_boolean		5009531						
ANR	5009996	Symbol	D_FULLDEBUG		5009531						
ANR	5009997	Symbol	m_global_close		5009531						
ANR	5009998	Symbol	m_global_max_filesize		5009531						
ANR	5009999	Symbol	m_configured		5009531						
ANR	5010000	Symbol	set_priv		5009531						
ANR	5010001	Symbol	new_locking		5009531						
ANR	5010002	Symbol	true		5009531						
ANR	5010003	Symbol	* m_rotation_lock		5009531						
ANR	5010004	Symbol	m_rotation_lock -> initSucceeded		5009531						
ANR	5010005	Symbol	force		5009531						
ANR	5010006	Symbol	param_integer		5009531						
ANR	5010007	Symbol	PRIV_CONDOR		5009531						
ANR	5010008	Symbol	O_WRONLY		5009531						
ANR	5010009	Symbol	m_global_count_events		5009531						
ANR	5010010	Symbol	open		5009531						
ANR	5010011	Function	WriteUserLog :: Reset	323:0:8602:9683							
ANR	5010012	FunctionDef	WriteUserLog :: Reset ()		5010011	0					
ANR	5010013	CompoundStatement		325:0:8635:9683	5010011	0					
ANR	5010014	ExpressionStatement	m_initialized = false	326:1:8638:8659	5010011	0	True				
ANR	5010015	AssignmentExpression	m_initialized = false		5010011	0		=			
ANR	5010016	Identifier	m_initialized		5010011	0					
ANR	5010017	Identifier	false		5010011	1					
ANR	5010018	ExpressionStatement	m_configured = false	327:1:8662:8682	5010011	1	True				
ANR	5010019	AssignmentExpression	m_configured = false		5010011	0		=			
ANR	5010020	Identifier	m_configured		5010011	0					
ANR	5010021	Identifier	false		5010011	1					
ANR	5010022	ExpressionStatement	m_cluster = - 1	329:1:8686:8700	5010011	2	True				
ANR	5010023	AssignmentExpression	m_cluster = - 1		5010011	0		=			
ANR	5010024	Identifier	m_cluster		5010011	0					
ANR	5010025	UnaryOperationExpression	- 1		5010011	1					
ANR	5010026	UnaryOperator	-		5010011	0					
ANR	5010027	PrimaryExpression	1		5010011	1					
ANR	5010028	ExpressionStatement	m_proc = - 1	330:1:8703:8714	5010011	3	True				
ANR	5010029	AssignmentExpression	m_proc = - 1		5010011	0		=			
ANR	5010030	Identifier	m_proc		5010011	0					
ANR	5010031	UnaryOperationExpression	- 1		5010011	1					
ANR	5010032	UnaryOperator	-		5010011	0					
ANR	5010033	PrimaryExpression	1		5010011	1					
ANR	5010034	ExpressionStatement	m_subproc = - 1	331:1:8717:8731	5010011	4	True				
ANR	5010035	AssignmentExpression	m_subproc = - 1		5010011	0		=			
ANR	5010036	Identifier	m_subproc		5010011	0					
ANR	5010037	UnaryOperationExpression	- 1		5010011	1					
ANR	5010038	UnaryOperator	-		5010011	0					
ANR	5010039	PrimaryExpression	1		5010011	1					
ANR	5010040	ExpressionStatement	m_userlog_enable = true	333:1:8735:8758	5010011	5	True				
ANR	5010041	AssignmentExpression	m_userlog_enable = true		5010011	0		=			
ANR	5010042	Identifier	m_userlog_enable		5010011	0					
ANR	5010043	Identifier	true		5010011	1					
ANR	5010044	ExpressionStatement	m_path = NULL	334:1:8761:8774	5010011	6	True				
ANR	5010045	AssignmentExpression	m_path = NULL		5010011	0		=			
ANR	5010046	Identifier	m_path		5010011	0					
ANR	5010047	Identifier	NULL		5010011	1					
ANR	5010048	ExpressionStatement	m_fp = NULL	335:1:8777:8788	5010011	7	True				
ANR	5010049	AssignmentExpression	m_fp = NULL		5010011	0		=			
ANR	5010050	Identifier	m_fp		5010011	0					
ANR	5010051	Identifier	NULL		5010011	1					
ANR	5010052	ExpressionStatement	m_lock = NULL	336:1:8791:8804	5010011	8	True				
ANR	5010053	AssignmentExpression	m_lock = NULL		5010011	0		=			
ANR	5010054	Identifier	m_lock		5010011	0					
ANR	5010055	Identifier	NULL		5010011	1					
ANR	5010056	ExpressionStatement	m_enable_fsync = true	337:1:8807:8828	5010011	9	True				
ANR	5010057	AssignmentExpression	m_enable_fsync = true		5010011	0		=			
ANR	5010058	Identifier	m_enable_fsync		5010011	0					
ANR	5010059	Identifier	true		5010011	1					
ANR	5010060	ExpressionStatement	m_enable_locking = true	338:1:8831:8854	5010011	10	True				
ANR	5010061	AssignmentExpression	m_enable_locking = true		5010011	0		=			
ANR	5010062	Identifier	m_enable_locking		5010011	0					
ANR	5010063	Identifier	true		5010011	1					
ANR	5010064	ExpressionStatement	m_global_path = NULL	340:1:8858:8878	5010011	11	True				
ANR	5010065	AssignmentExpression	m_global_path = NULL		5010011	0		=			
ANR	5010066	Identifier	m_global_path		5010011	0					
ANR	5010067	Identifier	NULL		5010011	1					
ANR	5010068	ExpressionStatement	m_global_fp = NULL	341:1:8881:8899	5010011	12	True				
ANR	5010069	AssignmentExpression	m_global_fp = NULL		5010011	0		=			
ANR	5010070	Identifier	m_global_fp		5010011	0					
ANR	5010071	Identifier	NULL		5010011	1					
ANR	5010072	ExpressionStatement	m_global_lock = NULL	342:1:8902:8922	5010011	13	True				
ANR	5010073	AssignmentExpression	m_global_lock = NULL		5010011	0		=			
ANR	5010074	Identifier	m_global_lock		5010011	0					
ANR	5010075	Identifier	NULL		5010011	1					
ANR	5010076	ExpressionStatement	m_global_stat = NULL	343:1:8925:8945	5010011	14	True				
ANR	5010077	AssignmentExpression	m_global_stat = NULL		5010011	0		=			
ANR	5010078	Identifier	m_global_stat		5010011	0					
ANR	5010079	Identifier	NULL		5010011	1					
ANR	5010080	ExpressionStatement	m_global_state = NULL	344:1:8948:8969	5010011	15	True				
ANR	5010081	AssignmentExpression	m_global_state = NULL		5010011	0		=			
ANR	5010082	Identifier	m_global_state		5010011	0					
ANR	5010083	Identifier	NULL		5010011	1					
ANR	5010084	ExpressionStatement	m_rotation_lock = NULL	346:1:8973:8995	5010011	16	True				
ANR	5010085	AssignmentExpression	m_rotation_lock = NULL		5010011	0		=			
ANR	5010086	Identifier	m_rotation_lock		5010011	0					
ANR	5010087	Identifier	NULL		5010011	1					
ANR	5010088	ExpressionStatement	m_rotation_lock_fd = - 1	347:1:8998:9021	5010011	17	True				
ANR	5010089	AssignmentExpression	m_rotation_lock_fd = - 1		5010011	0		=			
ANR	5010090	Identifier	m_rotation_lock_fd		5010011	0					
ANR	5010091	UnaryOperationExpression	- 1		5010011	1					
ANR	5010092	UnaryOperator	-		5010011	0					
ANR	5010093	PrimaryExpression	1		5010011	1					
ANR	5010094	ExpressionStatement	m_rotation_lock_path = NULL	348:1:9024:9051	5010011	18	True				
ANR	5010095	AssignmentExpression	m_rotation_lock_path = NULL		5010011	0		=			
ANR	5010096	Identifier	m_rotation_lock_path		5010011	0					
ANR	5010097	Identifier	NULL		5010011	1					
ANR	5010098	ExpressionStatement	m_use_xml = XML_USERLOG_DEFAULT	350:1:9055:9086	5010011	19	True				
ANR	5010099	AssignmentExpression	m_use_xml = XML_USERLOG_DEFAULT		5010011	0		=			
ANR	5010100	Identifier	m_use_xml		5010011	0					
ANR	5010101	Identifier	XML_USERLOG_DEFAULT		5010011	1					
ANR	5010102	ExpressionStatement	m_gjid = NULL	351:1:9089:9102	5010011	20	True				
ANR	5010103	AssignmentExpression	m_gjid = NULL		5010011	0		=			
ANR	5010104	Identifier	m_gjid		5010011	0					
ANR	5010105	Identifier	NULL		5010011	1					
ANR	5010106	ExpressionStatement	m_creator_name = NULL	353:1:9106:9127	5010011	21	True				
ANR	5010107	AssignmentExpression	m_creator_name = NULL		5010011	0		=			
ANR	5010108	Identifier	m_creator_name		5010011	0					
ANR	5010109	Identifier	NULL		5010011	1					
ANR	5010110	ExpressionStatement	m_global_disable = false	355:1:9131:9155	5010011	22	True				
ANR	5010111	AssignmentExpression	m_global_disable = false		5010011	0		=			
ANR	5010112	Identifier	m_global_disable		5010011	0					
ANR	5010113	Identifier	false		5010011	1					
ANR	5010114	ExpressionStatement	m_global_use_xml = false	356:1:9158:9182	5010011	23	True				
ANR	5010115	AssignmentExpression	m_global_use_xml = false		5010011	0		=			
ANR	5010116	Identifier	m_global_use_xml		5010011	0					
ANR	5010117	Identifier	false		5010011	1					
ANR	5010118	ExpressionStatement	m_global_count_events = false	357:1:9185:9214	5010011	24	True				
ANR	5010119	AssignmentExpression	m_global_count_events = false		5010011	0		=			
ANR	5010120	Identifier	m_global_count_events		5010011	0					
ANR	5010121	Identifier	false		5010011	1					
ANR	5010122	ExpressionStatement	m_global_max_filesize = 1000000	358:1:9217:9248	5010011	25	True				
ANR	5010123	AssignmentExpression	m_global_max_filesize = 1000000		5010011	0		=			
ANR	5010124	Identifier	m_global_max_filesize		5010011	0					
ANR	5010125	PrimaryExpression	1000000		5010011	1					
ANR	5010126	ExpressionStatement	m_global_max_rotations = 1	359:1:9251:9277	5010011	26	True				
ANR	5010127	AssignmentExpression	m_global_max_rotations = 1		5010011	0		=			
ANR	5010128	Identifier	m_global_max_rotations		5010011	0					
ANR	5010129	PrimaryExpression	1		5010011	1					
ANR	5010130	ExpressionStatement	m_global_lock_enable = true	360:1:9280:9307	5010011	27	True				
ANR	5010131	AssignmentExpression	m_global_lock_enable = true		5010011	0		=			
ANR	5010132	Identifier	m_global_lock_enable		5010011	0					
ANR	5010133	Identifier	true		5010011	1					
ANR	5010134	ExpressionStatement	m_global_fsync_enable = false	361:1:9310:9339	5010011	28	True				
ANR	5010135	AssignmentExpression	m_global_fsync_enable = false		5010011	0		=			
ANR	5010136	Identifier	m_global_fsync_enable		5010011	0					
ANR	5010137	Identifier	false		5010011	1					
ANR	5010138	Statement	if	365:2:9437:9438	5010011	29	True				
ANR	5010139	Statement	defined	365:5:9440:9446	5010011	30	True				
ANR	5010140	ExpressionStatement	( WIN32 ) m_global_close = true	365:12:9447:9477	5010011	31	True				
ANR	5010141	AssignmentExpression	( WIN32 ) m_global_close = true		5010011	0		=			
ANR	5010142	CastExpression	( WIN32 ) m_global_close		5010011	0					
ANR	5010143	CastTarget	WIN32		5010011	0					
ANR	5010144	Identifier	m_global_close		5010011	1					
ANR	5010145	Identifier	true		5010011	1					
ANR	5010146	ReturnType	void		5010011	1					
ANR	5010147	Identifier	WriteUserLog :: Reset		5010011	2					
ANR	5010148	ParameterList			5010011	3					
ANR	5010149	CFGEntryNode	ENTRY		5010011		True				
ANR	5010150	CFGExitNode	EXIT		5010011		True				
ANR	5010151	Symbol	m_initialized		5010011						
ANR	5010152	Symbol	m_enable_locking		5010011						
ANR	5010153	Symbol	m_creator_name		5010011						
ANR	5010154	Symbol	m_cluster		5010011						
ANR	5010155	Symbol	m_proc		5010011						
ANR	5010156	Symbol	m_global_use_xml		5010011						
ANR	5010157	Symbol	m_rotation_lock_fd		5010011						
ANR	5010158	Symbol	m_userlog_enable		5010011						
ANR	5010159	Symbol	m_lock		5010011						
ANR	5010160	Symbol	m_global_stat		5010011						
ANR	5010161	Symbol	m_global_fp		5010011						
ANR	5010162	Symbol	m_path		5010011						
ANR	5010163	Symbol	m_rotation_lock		5010011						
ANR	5010164	Symbol	m_global_fsync_enable		5010011						
ANR	5010165	Symbol	m_rotation_lock_path		5010011						
ANR	5010166	Symbol	m_global_state		5010011						
ANR	5010167	Symbol	m_global_disable		5010011						
ANR	5010168	Symbol	NULL		5010011						
ANR	5010169	Symbol	m_global_path		5010011						
ANR	5010170	Symbol	m_subproc		5010011						
ANR	5010171	Symbol	m_enable_fsync		5010011						
ANR	5010172	Symbol	m_global_max_rotations		5010011						
ANR	5010173	Symbol	XML_USERLOG_DEFAULT		5010011						
ANR	5010174	Symbol	false		5010011						
ANR	5010175	Symbol	m_use_xml		5010011						
ANR	5010176	Symbol	m_global_lock_enable		5010011						
ANR	5010177	Symbol	m_global_close		5010011						
ANR	5010178	Symbol	m_fp		5010011						
ANR	5010179	Symbol	m_global_max_filesize		5010011						
ANR	5010180	Symbol	m_configured		5010011						
ANR	5010181	Symbol	true		5010011						
ANR	5010182	Symbol	m_gjid		5010011						
ANR	5010183	Symbol	m_global_count_events		5010011						
ANR	5010184	Symbol	m_global_lock		5010011						
ANR	5010185	Function	WriteUserLog :: FreeGlobalResources	382:0:9686:10414							
ANR	5010186	FunctionDef	WriteUserLog :: FreeGlobalResources (bool final)		5010185	0					
ANR	5010187	CompoundStatement		384:0:9739:10414	5010185	0					
ANR	5010188	IfStatement	if ( m_global_path )		5010185	0					
ANR	5010189	Condition	m_global_path	386:5:9747:9759	5010185	0	True				
ANR	5010190	Identifier	m_global_path		5010185	0					
ANR	5010191	CompoundStatement		3:20:22:22	5010185	1					
ANR	5010192	ExpressionStatement	free ( m_global_path )	387:2:9766:9785	5010185	0	True				
ANR	5010193	CallExpression	free ( m_global_path )		5010185	0					
ANR	5010194	Callee	free		5010185	0					
ANR	5010195	Identifier	free		5010185	0					
ANR	5010196	ArgumentList	m_global_path		5010185	1					
ANR	5010197	Argument	m_global_path		5010185	0					
ANR	5010198	Identifier	m_global_path		5010185	0					
ANR	5010199	ExpressionStatement	m_global_path = NULL	388:2:9789:9809	5010185	1	True				
ANR	5010200	AssignmentExpression	m_global_path = NULL		5010185	0		=			
ANR	5010201	Identifier	m_global_path		5010185	0					
ANR	5010202	Identifier	NULL		5010185	1					
ANR	5010203	ExpressionStatement	closeGlobalLog ( )	391:1:9816:9832	5010185	1	True				
ANR	5010204	CallExpression	closeGlobalLog ( )		5010185	0					
ANR	5010205	Callee	closeGlobalLog		5010185	0					
ANR	5010206	Identifier	closeGlobalLog		5010185	0					
ANR	5010207	ArgumentList			5010185	1					
ANR	5010208	IfStatement	if ( final && ( m_global_id_base != NULL ) )		5010185	2					
ANR	5010209	Condition	final && ( m_global_id_base != NULL )	393:6:9886:9920	5010185	0	True				
ANR	5010210	AndExpression	final && ( m_global_id_base != NULL )		5010185	0		&&			
ANR	5010211	Identifier	final		5010185	0					
ANR	5010212	EqualityExpression	m_global_id_base != NULL		5010185	1		!=			
ANR	5010213	Identifier	m_global_id_base		5010185	0					
ANR	5010214	Identifier	NULL		5010185	1					
ANR	5010215	CompoundStatement		10:44:184:184	5010185	1					
ANR	5010216	ExpressionStatement	free ( m_global_id_base )	394:2:9928:9952	5010185	0	True				
ANR	5010217	CallExpression	free ( m_global_id_base )		5010185	0					
ANR	5010218	Callee	free		5010185	0					
ANR	5010219	Identifier	free		5010185	0					
ANR	5010220	ArgumentList	m_global_id_base		5010185	1					
ANR	5010221	Argument	m_global_id_base		5010185	0					
ANR	5010222	Identifier	m_global_id_base		5010185	0					
ANR	5010223	ExpressionStatement	m_global_id_base = NULL	395:2:9956:9979	5010185	1	True				
ANR	5010224	AssignmentExpression	m_global_id_base = NULL		5010185	0		=			
ANR	5010225	Identifier	m_global_id_base		5010185	0					
ANR	5010226	Identifier	NULL		5010185	1					
ANR	5010227	IfStatement	if ( m_global_stat != NULL )		5010185	3					
ANR	5010228	Condition	m_global_stat != NULL	397:5:9989:10009	5010185	0	True				
ANR	5010229	EqualityExpression	m_global_stat != NULL		5010185	0		!=			
ANR	5010230	Identifier	m_global_stat		5010185	0					
ANR	5010231	Identifier	NULL		5010185	1					
ANR	5010232	CompoundStatement		14:28:272:272	5010185	1					
ANR	5010233	Statement	delete	398:2:10016:10021	5010185	0	True				
ANR	5010234	ExpressionStatement	m_global_stat	398:9:10023:10036	5010185	1	True				
ANR	5010235	Identifier	m_global_stat		5010185	0					
ANR	5010236	ExpressionStatement	m_global_stat = NULL	399:2:10040:10060	5010185	2	True				
ANR	5010237	AssignmentExpression	m_global_stat = NULL		5010185	0		=			
ANR	5010238	Identifier	m_global_stat		5010185	0					
ANR	5010239	Identifier	NULL		5010185	1					
ANR	5010240	IfStatement	if ( m_global_state != NULL )		5010185	4					
ANR	5010241	Condition	m_global_state != NULL	401:5:10070:10091	5010185	0	True				
ANR	5010242	EqualityExpression	m_global_state != NULL		5010185	0		!=			
ANR	5010243	Identifier	m_global_state		5010185	0					
ANR	5010244	Identifier	NULL		5010185	1					
ANR	5010245	CompoundStatement		18:29:354:354	5010185	1					
ANR	5010246	Statement	delete	402:2:10098:10103	5010185	0	True				
ANR	5010247	ExpressionStatement	m_global_state	402:9:10105:10119	5010185	1	True				
ANR	5010248	Identifier	m_global_state		5010185	0					
ANR	5010249	ExpressionStatement	m_global_state = NULL	403:2:10123:10144	5010185	2	True				
ANR	5010250	AssignmentExpression	m_global_state = NULL		5010185	0		=			
ANR	5010251	Identifier	m_global_state		5010185	0					
ANR	5010252	Identifier	NULL		5010185	1					
ANR	5010253	IfStatement	if ( m_rotation_lock_path )		5010185	5					
ANR	5010254	Condition	m_rotation_lock_path	406:5:10155:10174	5010185	0	True				
ANR	5010255	Identifier	m_rotation_lock_path		5010185	0					
ANR	5010256	CompoundStatement		23:27:437:437	5010185	1					
ANR	5010257	ExpressionStatement	free ( m_rotation_lock_path )	407:2:10181:10207	5010185	0	True				
ANR	5010258	CallExpression	free ( m_rotation_lock_path )		5010185	0					
ANR	5010259	Callee	free		5010185	0					
ANR	5010260	Identifier	free		5010185	0					
ANR	5010261	ArgumentList	m_rotation_lock_path		5010185	1					
ANR	5010262	Argument	m_rotation_lock_path		5010185	0					
ANR	5010263	Identifier	m_rotation_lock_path		5010185	0					
ANR	5010264	ExpressionStatement	m_rotation_lock_path = NULL	408:2:10211:10238	5010185	1	True				
ANR	5010265	AssignmentExpression	m_rotation_lock_path = NULL		5010185	0		=			
ANR	5010266	Identifier	m_rotation_lock_path		5010185	0					
ANR	5010267	Identifier	NULL		5010185	1					
ANR	5010268	IfStatement	if ( m_rotation_lock_fd >= 0 )		5010185	6					
ANR	5010269	Condition	m_rotation_lock_fd >= 0	410:5:10248:10270	5010185	0	True				
ANR	5010270	RelationalExpression	m_rotation_lock_fd >= 0		5010185	0		>=			
ANR	5010271	Identifier	m_rotation_lock_fd		5010185	0					
ANR	5010272	PrimaryExpression	0		5010185	1					
ANR	5010273	CompoundStatement		27:30:533:533	5010185	1					
ANR	5010274	ExpressionStatement	close ( m_rotation_lock_fd )	411:2:10277:10302	5010185	0	True				
ANR	5010275	CallExpression	close ( m_rotation_lock_fd )		5010185	0					
ANR	5010276	Callee	close		5010185	0					
ANR	5010277	Identifier	close		5010185	0					
ANR	5010278	ArgumentList	m_rotation_lock_fd		5010185	1					
ANR	5010279	Argument	m_rotation_lock_fd		5010185	0					
ANR	5010280	Identifier	m_rotation_lock_fd		5010185	0					
ANR	5010281	ExpressionStatement	m_rotation_lock_fd = - 1	412:2:10306:10329	5010185	1	True				
ANR	5010282	AssignmentExpression	m_rotation_lock_fd = - 1		5010185	0		=			
ANR	5010283	Identifier	m_rotation_lock_fd		5010185	0					
ANR	5010284	UnaryOperationExpression	- 1		5010185	1					
ANR	5010285	UnaryOperator	-		5010185	0					
ANR	5010286	PrimaryExpression	1		5010185	1					
ANR	5010287	IfStatement	if ( m_rotation_lock )		5010185	7					
ANR	5010288	Condition	m_rotation_lock	414:5:10339:10353	5010185	0	True				
ANR	5010289	Identifier	m_rotation_lock		5010185	0					
ANR	5010290	CompoundStatement		31:22:616:616	5010185	1					
ANR	5010291	Statement	delete	415:2:10360:10365	5010185	0	True				
ANR	5010292	ExpressionStatement	m_rotation_lock	415:9:10367:10382	5010185	1	True				
ANR	5010293	Identifier	m_rotation_lock		5010185	0					
ANR	5010294	ExpressionStatement	m_rotation_lock = NULL	416:2:10386:10408	5010185	2	True				
ANR	5010295	AssignmentExpression	m_rotation_lock = NULL		5010185	0		=			
ANR	5010296	Identifier	m_rotation_lock		5010185	0					
ANR	5010297	Identifier	NULL		5010185	1					
ANR	5010298	ReturnType	void		5010185	1					
ANR	5010299	Identifier	WriteUserLog :: FreeGlobalResources		5010185	2					
ANR	5010300	ParameterList	bool final		5010185	3					
ANR	5010301	Parameter	bool final	383:35:9726:9735	5010185	0	True				
ANR	5010302	ParameterType	bool		5010185	0					
ANR	5010303	Identifier	final		5010185	1					
ANR	5010304	CFGEntryNode	ENTRY		5010185		True				
ANR	5010305	CFGExitNode	EXIT		5010185		True				
ANR	5010306	Symbol	m_global_id_base		5010185						
ANR	5010307	Symbol	m_global_state		5010185						
ANR	5010308	Symbol	m_global_path		5010185						
ANR	5010309	Symbol	NULL		5010185						
ANR	5010310	Symbol	m_global_stat		5010185						
ANR	5010311	Symbol	final		5010185						
ANR	5010312	Symbol	m_rotation_lock		5010185						
ANR	5010313	Symbol	m_rotation_lock_fd		5010185						
ANR	5010314	Symbol	m_rotation_lock_path		5010185						
ANR	5010315	Function	WriteUserLog :: FreeLocalResources	421:0:10417:10916							
ANR	5010316	FunctionDef	WriteUserLog :: FreeLocalResources ()		5010315	0					
ANR	5010317	CompoundStatement		423:0:10463:10916	5010315	0					
ANR	5010318	IfStatement	if ( m_path )		5010315	0					
ANR	5010319	Condition	m_path	425:5:10471:10476	5010315	0	True				
ANR	5010320	Identifier	m_path		5010315	0					
ANR	5010321	CompoundStatement		3:13:15:15	5010315	1					
ANR	5010322	ExpressionStatement	free ( m_path )	426:2:10483:10497	5010315	0	True				
ANR	5010323	CallExpression	free ( m_path )		5010315	0					
ANR	5010324	Callee	free		5010315	0					
ANR	5010325	Identifier	free		5010315	0					
ANR	5010326	ArgumentList	m_path		5010315	1					
ANR	5010327	Argument	m_path		5010315	0					
ANR	5010328	Identifier	m_path		5010315	0					
ANR	5010329	ExpressionStatement	m_path = NULL	427:2:10501:10514	5010315	1	True				
ANR	5010330	AssignmentExpression	m_path = NULL		5010315	0		=			
ANR	5010331	Identifier	m_path		5010315	0					
ANR	5010332	Identifier	NULL		5010315	1					
ANR	5010333	IfStatement	if ( m_gjid )		5010315	1					
ANR	5010334	Condition	m_gjid	429:5:10524:10529	5010315	0	True				
ANR	5010335	Identifier	m_gjid		5010315	0					
ANR	5010336	CompoundStatement		7:13:68:68	5010315	1					
ANR	5010337	ExpressionStatement	free ( m_gjid )	430:2:10536:10548	5010315	0	True				
ANR	5010338	CallExpression	free ( m_gjid )		5010315	0					
ANR	5010339	Callee	free		5010315	0					
ANR	5010340	Identifier	free		5010315	0					
ANR	5010341	ArgumentList	m_gjid		5010315	1					
ANR	5010342	Argument	m_gjid		5010315	0					
ANR	5010343	Identifier	m_gjid		5010315	0					
ANR	5010344	ExpressionStatement	m_gjid = NULL	431:2:10552:10565	5010315	1	True				
ANR	5010345	AssignmentExpression	m_gjid = NULL		5010315	0		=			
ANR	5010346	Identifier	m_gjid		5010315	0					
ANR	5010347	Identifier	NULL		5010315	1					
ANR	5010348	IfStatement	if ( m_fp != NULL )		5010315	2					
ANR	5010349	Condition	m_fp != NULL	433:5:10575:10586	5010315	0	True				
ANR	5010350	EqualityExpression	m_fp != NULL		5010315	0		!=			
ANR	5010351	Identifier	m_fp		5010315	0					
ANR	5010352	Identifier	NULL		5010315	1					
ANR	5010353	CompoundStatement		11:19:125:125	5010315	1					
ANR	5010354	IfStatement	if ( fclose ( m_fp ) != 0 )		5010315	0					
ANR	5010355	Condition	fclose ( m_fp ) != 0	434:7:10598:10616	5010315	0	True				
ANR	5010356	EqualityExpression	fclose ( m_fp ) != 0		5010315	0		!=			
ANR	5010357	CallExpression	fclose ( m_fp )		5010315	0					
ANR	5010358	Callee	fclose		5010315	0					
ANR	5010359	Identifier	fclose		5010315	0					
ANR	5010360	ArgumentList	m_fp		5010315	1					
ANR	5010361	Argument	m_fp		5010315	0					
ANR	5010362	Identifier	m_fp		5010315	0					
ANR	5010363	PrimaryExpression	0		5010315	1					
ANR	5010364	CompoundStatement		12:29:156:156	5010315	1					
ANR	5010365	Statement	dprintf	435:3:10625:10631	5010315	0	True				
ANR	5010366	Statement	(	435:10:10632:10632	5010315	1	True				
ANR	5010367	Statement	D_ALWAYS	435:12:10634:10641	5010315	2	True				
ANR	5010368	Statement	","	435:20:10642:10642	5010315	3	True				
ANR	5010369	Statement	"""WriteUserLog::FreeLocalResources(): """	436:6:10650:10687	5010315	4	True				
ANR	5010370	Statement	"""fclose() failed - errno %d (%s)\\n"""	437:6:10695:10729	5010315	5	True				
ANR	5010371	Statement	","	437:41:10730:10730	5010315	6	True				
ANR	5010372	Statement	errno	438:6:10738:10742	5010315	7	True				
ANR	5010373	Statement	","	438:11:10743:10743	5010315	8	True				
ANR	5010374	Statement	strerror	438:13:10745:10752	5010315	9	True				
ANR	5010375	Statement	(	438:21:10753:10753	5010315	10	True				
ANR	5010376	Statement	errno	438:22:10754:10758	5010315	11	True				
ANR	5010377	Statement	)	438:27:10759:10759	5010315	12	True				
ANR	5010378	Statement	)	438:29:10761:10761	5010315	13	True				
ANR	5010379	ExpressionStatement		438:30:10762:10762	5010315	14	True				
ANR	5010380	ExpressionStatement	m_fp = NULL	440:2:10770:10781	5010315	1	True				
ANR	5010381	AssignmentExpression	m_fp = NULL		5010315	0		=			
ANR	5010382	Identifier	m_fp		5010315	0					
ANR	5010383	Identifier	NULL		5010315	1					
ANR	5010384	IfStatement	if ( m_lock )		5010315	3					
ANR	5010385	Condition	m_lock	442:5:10791:10796	5010315	0	True				
ANR	5010386	Identifier	m_lock		5010315	0					
ANR	5010387	CompoundStatement		20:13:335:335	5010315	1					
ANR	5010388	Statement	delete	443:2:10803:10808	5010315	0	True				
ANR	5010389	ExpressionStatement	m_lock	443:9:10810:10816	5010315	1	True				
ANR	5010390	Identifier	m_lock		5010315	0					
ANR	5010391	ExpressionStatement	m_lock = NULL	444:2:10820:10833	5010315	2	True				
ANR	5010392	AssignmentExpression	m_lock = NULL		5010315	0		=			
ANR	5010393	Identifier	m_lock		5010315	0					
ANR	5010394	Identifier	NULL		5010315	1					
ANR	5010395	IfStatement	if ( m_creator_name )		5010315	4					
ANR	5010396	Condition	m_creator_name	447:5:10844:10857	5010315	0	True				
ANR	5010397	Identifier	m_creator_name		5010315	0					
ANR	5010398	CompoundStatement		25:21:396:396	5010315	1					
ANR	5010399	ExpressionStatement	free ( m_creator_name )	448:2:10864:10886	5010315	0	True				
ANR	5010400	CallExpression	free ( m_creator_name )		5010315	0					
ANR	5010401	Callee	free		5010315	0					
ANR	5010402	Identifier	free		5010315	0					
ANR	5010403	ArgumentList	m_creator_name		5010315	1					
ANR	5010404	Argument	m_creator_name		5010315	0					
ANR	5010405	Identifier	m_creator_name		5010315	0					
ANR	5010406	ExpressionStatement	m_creator_name = NULL	449:2:10890:10911	5010315	1	True				
ANR	5010407	AssignmentExpression	m_creator_name = NULL		5010315	0		=			
ANR	5010408	Identifier	m_creator_name		5010315	0					
ANR	5010409	Identifier	NULL		5010315	1					
ANR	5010410	ReturnType	void		5010315	1					
ANR	5010411	Identifier	WriteUserLog :: FreeLocalResources		5010315	2					
ANR	5010412	ParameterList			5010315	3					
ANR	5010413	CFGEntryNode	ENTRY		5010315		True				
ANR	5010414	CFGExitNode	EXIT		5010315		True				
ANR	5010415	Symbol	m_lock		5010315						
ANR	5010416	Symbol	NULL		5010315						
ANR	5010417	Symbol	m_creator_name		5010315						
ANR	5010418	Symbol	fclose		5010315						
ANR	5010419	Symbol	m_path		5010315						
ANR	5010420	Symbol	m_gjid		5010315						
ANR	5010421	Symbol	m_fp		5010315						
ANR	5010422	Function	WriteUserLog :: setCreatorName	453:0:10919:11130							
ANR	5010423	FunctionDef	WriteUserLog :: setCreatorName (const char * name)		5010422	0					
ANR	5010424	CompoundStatement		455:0:10973:11130	5010422	0					
ANR	5010425	IfStatement	if ( name )		5010422	0					
ANR	5010426	Condition	name	456:6:10981:10984	5010422	0	True				
ANR	5010427	Identifier	name		5010422	0					
ANR	5010428	CompoundStatement		2:13:14:14	5010422	1					
ANR	5010429	IfStatement	if ( m_creator_name )		5010422	0					
ANR	5010430	Condition	m_creator_name	457:7:10997:11010	5010422	0	True				
ANR	5010431	Identifier	m_creator_name		5010422	0					
ANR	5010432	CompoundStatement		3:24:40:40	5010422	1					
ANR	5010433	Statement	free	458:3:11019:11022	5010422	0	True				
ANR	5010434	Statement	(	458:7:11023:11023	5010422	1	True				
ANR	5010435	Statement	const_cast	458:9:11025:11034	5010422	2	True				
ANR	5010436	Statement	<	458:19:11035:11035	5010422	3	True				
ANR	5010437	Statement	char	458:20:11036:11039	5010422	4	True				
ANR	5010438	Statement	*	458:24:11040:11040	5010422	5	True				
ANR	5010439	Statement	>	458:25:11041:11041	5010422	6	True				
ANR	5010440	Statement	(	458:26:11042:11042	5010422	7	True				
ANR	5010441	Statement	m_creator_name	458:27:11043:11056	5010422	8	True				
ANR	5010442	Statement	)	458:41:11057:11057	5010422	9	True				
ANR	5010443	Statement	)	458:43:11059:11059	5010422	10	True				
ANR	5010444	ExpressionStatement		458:44:11060:11060	5010422	11	True				
ANR	5010445	ExpressionStatement	m_creator_name = NULL	459:3:11065:11086	5010422	12	True				
ANR	5010446	AssignmentExpression	m_creator_name = NULL		5010422	0		=			
ANR	5010447	Identifier	m_creator_name		5010422	0					
ANR	5010448	Identifier	NULL		5010422	1					
ANR	5010449	ExpressionStatement	m_creator_name = strdup ( name )	461:2:11094:11125	5010422	1	True				
ANR	5010450	AssignmentExpression	m_creator_name = strdup ( name )		5010422	0		=			
ANR	5010451	Identifier	m_creator_name		5010422	0					
ANR	5010452	CallExpression	strdup ( name )		5010422	1					
ANR	5010453	Callee	strdup		5010422	0					
ANR	5010454	Identifier	strdup		5010422	0					
ANR	5010455	ArgumentList	name		5010422	1					
ANR	5010456	Argument	name		5010422	0					
ANR	5010457	Identifier	name		5010422	0					
ANR	5010458	ReturnType	void		5010422	1					
ANR	5010459	Identifier	WriteUserLog :: setCreatorName		5010422	2					
ANR	5010460	ParameterList	const char * name		5010422	3					
ANR	5010461	Parameter	const char * name	454:30:10954:10969	5010422	0	True				
ANR	5010462	ParameterType	const char *		5010422	0					
ANR	5010463	Identifier	name		5010422	1					
ANR	5010464	CFGEntryNode	ENTRY		5010422		True				
ANR	5010465	CFGExitNode	EXIT		5010422		True				
ANR	5010466	Symbol	m_creator_name		5010422						
ANR	5010467	Symbol	NULL		5010422						
ANR	5010468	Symbol	name		5010422						
ANR	5010469	Symbol	strdup		5010422						
ANR	5010470	Function	WriteUserLog :: openFile	465:0:11133:13400							
ANR	5010471	FunctionDef	"WriteUserLog :: openFile (const char * file , bool log_as_user , bool use_lock , bool append , FileLockBase * & lock , FILE * & fp)"		5010470	0					
ANR	5010472	CompoundStatement		473:0:11358:13400	5010470	0					
ANR	5010473	ExpressionStatement	( void ) log_as_user	474:1:11361:11380	5010470	0	True				
ANR	5010474	CastExpression	( void ) log_as_user		5010470	0					
ANR	5010475	CastTarget	void		5010470	0					
ANR	5010476	Identifier	log_as_user		5010470	1					
ANR	5010477	IdentifierDeclStatement	int fd = 0 ;	475:1:11400:11411	5010470	1	True				
ANR	5010478	IdentifierDecl	fd = 0		5010470	0					
ANR	5010479	IdentifierDeclType	int		5010470	0					
ANR	5010480	Identifier	fd		5010470	1					
ANR	5010481	AssignmentExpression	fd = 0		5010470	2		=			
ANR	5010482	Identifier	fd		5010470	0					
ANR	5010483	PrimaryExpression	0		5010470	1					
ANR	5010484	IfStatement	if ( file == NULL )		5010470	2					
ANR	5010485	Condition	file == NULL	477:6:11420:11431	5010470	0	True				
ANR	5010486	EqualityExpression	file == NULL		5010470	0		==			
ANR	5010487	Identifier	file		5010470	0					
ANR	5010488	Identifier	NULL		5010470	1					
ANR	5010489	CompoundStatement		5:21:76:76	5010470	1					
ANR	5010490	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog::openFile: NULL filename!\\n"" )"	478:2:11439:11502	5010470	0	True				
ANR	5010491	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog::openFile: NULL filename!\\n"" )"		5010470	0					
ANR	5010492	Callee	dprintf		5010470	0					
ANR	5010493	Identifier	dprintf		5010470	0					
ANR	5010494	ArgumentList	D_ALWAYS		5010470	1					
ANR	5010495	Argument	D_ALWAYS		5010470	0					
ANR	5010496	Identifier	D_ALWAYS		5010470	0					
ANR	5010497	Argument	"""WriteUserLog::openFile: NULL filename!\\n"""		5010470	1					
ANR	5010498	PrimaryExpression	"""WriteUserLog::openFile: NULL filename!\\n"""		5010470	0					
ANR	5010499	ReturnStatement	return false ;	479:2:11506:11518	5010470	1	True				
ANR	5010500	Identifier	false		5010470	0					
ANR	5010501	IfStatement	"if ( strcmp ( file , UNIX_NULL_FILE ) == 0 )"		5010470	3					
ANR	5010502	Condition	"strcmp ( file , UNIX_NULL_FILE ) == 0"	482:6:11530:11559	5010470	0	True				
ANR	5010503	EqualityExpression	"strcmp ( file , UNIX_NULL_FILE ) == 0"		5010470	0		==			
ANR	5010504	CallExpression	"strcmp ( file , UNIX_NULL_FILE )"		5010470	0					
ANR	5010505	Callee	strcmp		5010470	0					
ANR	5010506	Identifier	strcmp		5010470	0					
ANR	5010507	ArgumentList	file		5010470	1					
ANR	5010508	Argument	file		5010470	0					
ANR	5010509	Identifier	file		5010470	0					
ANR	5010510	Argument	UNIX_NULL_FILE		5010470	1					
ANR	5010511	Identifier	UNIX_NULL_FILE		5010470	0					
ANR	5010512	PrimaryExpression	0		5010470	1					
ANR	5010513	CompoundStatement		10:39:204:204	5010470	1					
ANR	5010514	ExpressionStatement	fp = NULL	489:2:11910:11919	5010470	0	True				
ANR	5010515	AssignmentExpression	fp = NULL		5010470	0		=			
ANR	5010516	Identifier	fp		5010470	0					
ANR	5010517	Identifier	NULL		5010470	1					
ANR	5010518	ExpressionStatement	lock = NULL	490:2:11923:11934	5010470	1	True				
ANR	5010519	AssignmentExpression	lock = NULL		5010470	0		=			
ANR	5010520	Identifier	lock		5010470	0					
ANR	5010521	Identifier	NULL		5010470	1					
ANR	5010522	ReturnStatement	return true ;	491:2:11938:11949	5010470	2	True				
ANR	5010523	Identifier	true		5010470	0					
ANR	5010524	Statement	if	494:2:11957:11958	5010470	4	True				
ANR	5010525	Statement	!	494:5:11960:11960	5010470	5	True				
ANR	5010526	Statement	defined	494:6:11961:11967	5010470	6	True				
ANR	5010527	Statement	(	494:13:11968:11968	5010470	7	True				
ANR	5010528	Statement	WIN32	494:14:11969:11973	5010470	8	True				
ANR	5010529	Statement	)	494:19:11974:11974	5010470	9	True				
ANR	5010530	IdentifierDeclStatement	int flags = O_WRONLY | O_CREAT ;	496:1:11986:12016	5010470	10	True				
ANR	5010531	IdentifierDecl	flags = O_WRONLY | O_CREAT		5010470	0					
ANR	5010532	IdentifierDeclType	int		5010470	0					
ANR	5010533	Identifier	flags		5010470	1					
ANR	5010534	AssignmentExpression	flags = O_WRONLY | O_CREAT		5010470	2		=			
ANR	5010535	Identifier	flags		5010470	0					
ANR	5010536	InclusiveOrExpression	O_WRONLY | O_CREAT		5010470	1		|			
ANR	5010537	Identifier	O_WRONLY		5010470	0					
ANR	5010538	Identifier	O_CREAT		5010470	1					
ANR	5010539	IfStatement	if ( append )		5010470	11					
ANR	5010540	Condition	append	497:6:12024:12029	5010470	0	True				
ANR	5010541	Identifier	append		5010470	0					
ANR	5010542	CompoundStatement		25:15:674:674	5010470	1					
ANR	5010543	ExpressionStatement	flags |= O_APPEND	498:2:12037:12054	5010470	0	True				
ANR	5010544	AssignmentExpression	flags |= O_APPEND		5010470	0		|=			
ANR	5010545	Identifier	flags		5010470	0					
ANR	5010546	Identifier	O_APPEND		5010470	1					
ANR	5010547	IdentifierDeclStatement	mode_t mode = 0664 ;	500:1:12060:12078	5010470	12	True				
ANR	5010548	IdentifierDecl	mode = 0664		5010470	0					
ANR	5010549	IdentifierDeclType	mode_t		5010470	0					
ANR	5010550	Identifier	mode		5010470	1					
ANR	5010551	AssignmentExpression	mode = 0664		5010470	2		=			
ANR	5010552	Identifier	mode		5010470	0					
ANR	5010553	PrimaryExpression	0664		5010470	1					
ANR	5010554	ExpressionStatement	"fd = safe_open_wrapper_follow ( file , flags , mode )"	501:1:12081:12131	5010470	13	True				
ANR	5010555	AssignmentExpression	"fd = safe_open_wrapper_follow ( file , flags , mode )"		5010470	0		=			
ANR	5010556	Identifier	fd		5010470	0					
ANR	5010557	CallExpression	"safe_open_wrapper_follow ( file , flags , mode )"		5010470	1					
ANR	5010558	Callee	safe_open_wrapper_follow		5010470	0					
ANR	5010559	Identifier	safe_open_wrapper_follow		5010470	0					
ANR	5010560	ArgumentList	file		5010470	1					
ANR	5010561	Argument	file		5010470	0					
ANR	5010562	Identifier	file		5010470	0					
ANR	5010563	Argument	flags		5010470	1					
ANR	5010564	Identifier	flags		5010470	0					
ANR	5010565	Argument	mode		5010470	2					
ANR	5010566	Identifier	mode		5010470	0					
ANR	5010567	IfStatement	if ( fd < 0 )		5010470	14					
ANR	5010568	Condition	fd < 0	502:5:12138:12143	5010470	0	True				
ANR	5010569	RelationalExpression	fd < 0		5010470	0		<			
ANR	5010570	Identifier	fd		5010470	0					
ANR	5010571	PrimaryExpression	0		5010470	1					
ANR	5010572	CompoundStatement		30:14:788:788	5010470	1					
ANR	5010573	Statement	dprintf	503:2:12151:12157	5010470	0	True				
ANR	5010574	Statement	(	503:9:12158:12158	5010470	1	True				
ANR	5010575	Statement	D_ALWAYS	503:11:12160:12167	5010470	2	True				
ANR	5010576	Statement	","	503:19:12168:12168	5010470	3	True				
ANR	5010577	Statement	"""WriteUserLog::initialize: """	504:11:12181:12208	5010470	4	True				
ANR	5010578	Statement	"""safe_open_wrapper(\\""%s\\"") failed - errno %d (%s)\\n"""	505:15:12225:12276	5010470	5	True				
ANR	5010579	Statement	","	505:67:12277:12277	5010470	6	True				
ANR	5010580	Statement	file	506:11:12290:12293	5010470	7	True				
ANR	5010581	Statement	","	506:15:12294:12294	5010470	8	True				
ANR	5010582	Statement	errno	507:11:12307:12311	5010470	9	True				
ANR	5010583	Statement	","	507:16:12312:12312	5010470	10	True				
ANR	5010584	Statement	strerror	508:11:12325:12332	5010470	11	True				
ANR	5010585	Statement	(	508:19:12333:12333	5010470	12	True				
ANR	5010586	Statement	errno	508:20:12334:12338	5010470	13	True				
ANR	5010587	Statement	)	508:25:12339:12339	5010470	14	True				
ANR	5010588	Statement	)	508:27:12341:12341	5010470	15	True				
ANR	5010589	ExpressionStatement		508:28:12342:12342	5010470	16	True				
ANR	5010590	ReturnStatement	return false ;	509:2:12346:12358	5010470	17	True				
ANR	5010591	Identifier	false		5010470	0					
ANR	5010592	IdentifierDeclStatement	"const char * fmode = append ? ""a"" : ""w"" ;"	513:1:12396:12434	5010470	15	True				
ANR	5010593	IdentifierDecl	"* fmode = append ? ""a"" : ""w"""		5010470	0					
ANR	5010594	IdentifierDeclType	const char *		5010470	0					
ANR	5010595	Identifier	fmode		5010470	1					
ANR	5010596	AssignmentExpression	"* fmode = append ? ""a"" : ""w"""		5010470	2		=			
ANR	5010597	Identifier	fmode		5010470	0					
ANR	5010598	ConditionalExpression	"append ? ""a"" : ""w"""		5010470	1					
ANR	5010599	Condition	append		5010470	0					
ANR	5010600	Identifier	append		5010470	0					
ANR	5010601	PrimaryExpression	"""a"""		5010470	1					
ANR	5010602	PrimaryExpression	"""w"""		5010470	2					
ANR	5010603	ExpressionStatement	"fp = fdopen ( fd , fmode )"	514:1:12437:12461	5010470	16	True				
ANR	5010604	AssignmentExpression	"fp = fdopen ( fd , fmode )"		5010470	0		=			
ANR	5010605	Identifier	fp		5010470	0					
ANR	5010606	CallExpression	"fdopen ( fd , fmode )"		5010470	1					
ANR	5010607	Callee	fdopen		5010470	0					
ANR	5010608	Identifier	fdopen		5010470	0					
ANR	5010609	ArgumentList	fd		5010470	1					
ANR	5010610	Argument	fd		5010470	0					
ANR	5010611	Identifier	fd		5010470	0					
ANR	5010612	Argument	fmode		5010470	1					
ANR	5010613	Identifier	fmode		5010470	0					
ANR	5010614	IfStatement	if ( NULL == fp )		5010470	17					
ANR	5010615	Condition	NULL == fp	515:5:12468:12477	5010470	0	True				
ANR	5010616	EqualityExpression	NULL == fp		5010470	0		==			
ANR	5010617	Identifier	NULL		5010470	0					
ANR	5010618	Identifier	fp		5010470	1					
ANR	5010619	CompoundStatement		43:18:1122:1122	5010470	1					
ANR	5010620	Statement	dprintf	516:2:12485:12491	5010470	0	True				
ANR	5010621	Statement	(	516:9:12492:12492	5010470	1	True				
ANR	5010622	Statement	D_ALWAYS	516:11:12494:12501	5010470	2	True				
ANR	5010623	Statement	","	516:19:12502:12502	5010470	3	True				
ANR	5010624	Statement	"""WriteUserLog::initialize: """	516:21:12504:12531	5010470	4	True				
ANR	5010625	Statement	"""fdopen(%i,%s) failed - errno %d (%s)\\n"""	517:5:12538:12577	5010470	5	True				
ANR	5010626	Statement	","	517:45:12578:12578	5010470	6	True				
ANR	5010627	Statement	fd	518:5:12585:12586	5010470	7	True				
ANR	5010628	Statement	","	518:7:12587:12587	5010470	8	True				
ANR	5010629	Statement	fmode	518:9:12589:12593	5010470	9	True				
ANR	5010630	Statement	","	518:14:12594:12594	5010470	10	True				
ANR	5010631	Statement	errno	518:16:12596:12600	5010470	11	True				
ANR	5010632	Statement	","	518:21:12601:12601	5010470	12	True				
ANR	5010633	Statement	strerror	518:23:12603:12610	5010470	13	True				
ANR	5010634	Statement	(	518:31:12611:12611	5010470	14	True				
ANR	5010635	Statement	errno	518:32:12612:12616	5010470	15	True				
ANR	5010636	Statement	)	518:37:12617:12617	5010470	16	True				
ANR	5010637	Statement	)	518:39:12619:12619	5010470	17	True				
ANR	5010638	ExpressionStatement		518:40:12620:12620	5010470	18	True				
ANR	5010639	ExpressionStatement	close ( fd )	519:2:12624:12635	5010470	19	True				
ANR	5010640	CallExpression	close ( fd )		5010470	0					
ANR	5010641	Callee	close		5010470	0					
ANR	5010642	Identifier	close		5010470	0					
ANR	5010643	ArgumentList	fd		5010470	1					
ANR	5010644	Argument	fd		5010470	0					
ANR	5010645	Identifier	fd		5010470	0					
ANR	5010646	ReturnStatement	return false ;	520:2:12639:12651	5010470	20	True				
ANR	5010647	Identifier	false		5010470	0					
ANR	5010648	ElseStatement	else		5010470	0					
ANR	5010649	IdentifierDeclStatement	"const char * fmode = append ? ""a+tc"" : ""w+tc"" ;"	524:1:12689:12733	5010470	0	True				
ANR	5010650	IdentifierDecl	"* fmode = append ? ""a+tc"" : ""w+tc"""		5010470	0					
ANR	5010651	IdentifierDeclType	const char *		5010470	0					
ANR	5010652	Identifier	fmode		5010470	1					
ANR	5010653	AssignmentExpression	"* fmode = append ? ""a+tc"" : ""w+tc"""		5010470	2		=			
ANR	5010654	Identifier	fmode		5010470	0					
ANR	5010655	ConditionalExpression	"append ? ""a+tc"" : ""w+tc"""		5010470	1					
ANR	5010656	Condition	append		5010470	0					
ANR	5010657	Identifier	append		5010470	0					
ANR	5010658	PrimaryExpression	"""a+tc"""		5010470	1					
ANR	5010659	PrimaryExpression	"""w+tc"""		5010470	2					
ANR	5010660	ExpressionStatement	"fp = safe_fopen_wrapper_follow ( file , fmode )"	525:1:12736:12781	5010470	18	True				
ANR	5010661	AssignmentExpression	"fp = safe_fopen_wrapper_follow ( file , fmode )"		5010470	0		=			
ANR	5010662	Identifier	fp		5010470	0					
ANR	5010663	CallExpression	"safe_fopen_wrapper_follow ( file , fmode )"		5010470	1					
ANR	5010664	Callee	safe_fopen_wrapper_follow		5010470	0					
ANR	5010665	Identifier	safe_fopen_wrapper_follow		5010470	0					
ANR	5010666	ArgumentList	file		5010470	1					
ANR	5010667	Argument	file		5010470	0					
ANR	5010668	Identifier	file		5010470	0					
ANR	5010669	Argument	fmode		5010470	1					
ANR	5010670	Identifier	fmode		5010470	0					
ANR	5010671	IfStatement	if ( NULL == fp )		5010470	19					
ANR	5010672	Condition	NULL == fp	526:5:12788:12797	5010470	0	True				
ANR	5010673	EqualityExpression	NULL == fp		5010470	0		==			
ANR	5010674	Identifier	NULL		5010470	0					
ANR	5010675	Identifier	fp		5010470	1					
ANR	5010676	CompoundStatement		54:18:1442:1442	5010470	1					
ANR	5010677	Statement	dprintf	527:2:12805:12811	5010470	0	True				
ANR	5010678	Statement	(	527:9:12812:12812	5010470	1	True				
ANR	5010679	Statement	D_ALWAYS	527:11:12814:12821	5010470	2	True				
ANR	5010680	Statement	","	527:19:12822:12822	5010470	3	True				
ANR	5010681	Statement	"""WriteUserLog::initialize: """	527:21:12824:12851	5010470	4	True				
ANR	5010682	Statement	"""safe_fopen_wrapper_follow(\\""%s\\"",%s) failed - errno %d (%s)\\n"""	528:5:12858:12920	5010470	5	True				
ANR	5010683	Statement	","	528:68:12921:12921	5010470	6	True				
ANR	5010684	Statement	file	529:5:12928:12931	5010470	7	True				
ANR	5010685	Statement	","	529:9:12932:12932	5010470	8	True				
ANR	5010686	Statement	fmode	529:11:12934:12938	5010470	9	True				
ANR	5010687	Statement	","	529:16:12939:12939	5010470	10	True				
ANR	5010688	Statement	errno	529:18:12941:12945	5010470	11	True				
ANR	5010689	Statement	","	529:23:12946:12946	5010470	12	True				
ANR	5010690	Statement	strerror	529:25:12948:12955	5010470	13	True				
ANR	5010691	Statement	(	529:33:12956:12956	5010470	14	True				
ANR	5010692	Statement	errno	529:34:12957:12961	5010470	15	True				
ANR	5010693	Statement	)	529:39:12962:12962	5010470	16	True				
ANR	5010694	Statement	)	529:41:12964:12964	5010470	17	True				
ANR	5010695	ExpressionStatement		529:42:12965:12965	5010470	18	True				
ANR	5010696	ReturnStatement	return false ;	530:2:12969:12981	5010470	19	True				
ANR	5010697	Identifier	false		5010470	0					
ANR	5010698	ExpressionStatement	fd = _fileno ( fp )	533:1:12988:13004	5010470	20	True				
ANR	5010699	AssignmentExpression	fd = _fileno ( fp )		5010470	0		=			
ANR	5010700	Identifier	fd		5010470	0					
ANR	5010701	CallExpression	_fileno ( fp )		5010470	1					
ANR	5010702	Callee	_fileno		5010470	0					
ANR	5010703	Identifier	_fileno		5010470	0					
ANR	5010704	ArgumentList	fp		5010470	1					
ANR	5010705	Argument	fp		5010470	0					
ANR	5010706	Identifier	fp		5010470	0					
ANR	5010707	Statement	endif	534:2:13008:13012	5010470	21	True				
ANR	5010708	IfStatement	if ( use_lock )		5010470	22					
ANR	5010709	Condition	use_lock	537:6:13051:13058	5010470	0	True				
ANR	5010710	Identifier	use_lock		5010470	0					
ANR	5010711	CompoundStatement		67:2:1727:1795	5010470	1					
ANR	5010712	IdentifierDeclStatement	"bool new_locking = param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true ) ;"	539:2:13086:13154	5010470	0	True				
ANR	5010713	IdentifierDecl	"new_locking = param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true )"		5010470	0					
ANR	5010714	IdentifierDeclType	bool		5010470	0					
ANR	5010715	Identifier	new_locking		5010470	1					
ANR	5010716	AssignmentExpression	"new_locking = param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true )"		5010470	2		=			
ANR	5010717	Identifier	new_locking		5010470	0					
ANR	5010718	CallExpression	"param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true )"		5010470	1					
ANR	5010719	Callee	param_boolean		5010470	0					
ANR	5010720	Identifier	param_boolean		5010470	0					
ANR	5010721	ArgumentList	"""CREATE_LOCKS_ON_LOCAL_DISK"""		5010470	1					
ANR	5010722	Argument	"""CREATE_LOCKS_ON_LOCAL_DISK"""		5010470	0					
ANR	5010723	PrimaryExpression	"""CREATE_LOCKS_ON_LOCAL_DISK"""		5010470	0					
ANR	5010724	Argument	true		5010470	1					
ANR	5010725	Identifier	true		5010470	0					
ANR	5010726	IfStatement	if ( new_locking )		5010470	1					
ANR	5010727	Condition	new_locking	541:6:13166:13176	5010470	0	True				
ANR	5010728	Identifier	new_locking		5010470	0					
ANR	5010729	CompoundStatement		69:19:1820:1820	5010470	1					
ANR	5010730	ExpressionStatement	"lock = new FileLock ( file , true , false )"	542:3:13184:13222	5010470	0	True				
ANR	5010731	AssignmentExpression	"lock = new FileLock ( file , true , false )"		5010470	0		=			
ANR	5010732	Identifier	lock		5010470	0					
ANR	5010733	Expression	"file , true , false"		5010470	1					
ANR	5010734	Identifier	file		5010470	0					
ANR	5010735	Expression	"true , false"		5010470	1					
ANR	5010736	Identifier	true		5010470	0					
ANR	5010737	Identifier	false		5010470	1					
ANR	5010738	IfStatement	if ( lock -> initSucceeded ( ) )		5010470	1					
ANR	5010739	Condition	lock -> initSucceeded ( )	543:8:13232:13252	5010470	0	True				
ANR	5010740	CallExpression	lock -> initSucceeded ( )		5010470	0					
ANR	5010741	Callee	lock -> initSucceeded		5010470	0					
ANR	5010742	PtrMemberAccess	lock -> initSucceeded		5010470	0					
ANR	5010743	Identifier	lock		5010470	0					
ANR	5010744	Identifier	initSucceeded		5010470	1					
ANR	5010745	ArgumentList			5010470	1					
ANR	5010746	ReturnStatement	return true ;	544:4:13260:13271	5010470	1	True				
ANR	5010747	Identifier	true		5010470	0					
ANR	5010748	Statement	delete	545:3:13276:13281	5010470	2	True				
ANR	5010749	ExpressionStatement	lock	545:10:13283:13287	5010470	3	True				
ANR	5010750	Identifier	lock		5010470	0					
ANR	5010751	ExpressionStatement	"lock = new FileLock ( fd , fp , file )"	548:2:13305:13340	5010470	2	True				
ANR	5010752	AssignmentExpression	"lock = new FileLock ( fd , fp , file )"		5010470	0		=			
ANR	5010753	Identifier	lock		5010470	0					
ANR	5010754	Expression	"fd , fp , file"		5010470	1					
ANR	5010755	Identifier	fd		5010470	0					
ANR	5010756	Expression	"fp , file"		5010470	1					
ANR	5010757	Identifier	fp		5010470	0					
ANR	5010758	Identifier	file		5010470	1					
ANR	5010759	ElseStatement	else		5010470	0					
ANR	5010760	CompoundStatement		77:8:1991:1991	5010470	0					
ANR	5010761	ExpressionStatement	lock = new FakeFileLock ( )	550:2:13354:13380	5010470	0	True				
ANR	5010762	AssignmentExpression	lock = new FakeFileLock ( )		5010470	0		=			
ANR	5010763	Identifier	lock		5010470	0					
ANR	5010764	UnaryExpression	new FakeFileLock ( )		5010470	1					
ANR	5010765	ReturnStatement	return true ;	553:1:13387:13398	5010470	23	True				
ANR	5010766	Identifier	true		5010470	0					
ANR	5010767	ReturnType	bool		5010470	1					
ANR	5010768	Identifier	WriteUserLog :: openFile		5010470	2					
ANR	5010769	ParameterList	"const char * file , bool log_as_user , bool use_lock , bool append , FileLockBase * & lock , FILE * & fp"		5010470	3					
ANR	5010770	Parameter	const char * file	467:1:11163:11179	5010470	0	True				
ANR	5010771	ParameterType	const char *		5010470	0					
ANR	5010772	Identifier	file		5010470	1					
ANR	5010773	Parameter	bool log_as_user	468:1:11183:11201	5010470	1	True				
ANR	5010774	ParameterType	bool		5010470	0					
ANR	5010775	Identifier	log_as_user		5010470	1					
ANR	5010776	Parameter	bool use_lock	469:1:11252:11267	5010470	2	True				
ANR	5010777	ParameterType	bool		5010470	0					
ANR	5010778	Identifier	use_lock		5010470	1					
ANR	5010779	Parameter	bool append	470:1:11288:11301	5010470	3	True				
ANR	5010780	ParameterType	bool		5010470	0					
ANR	5010781	Identifier	append		5010470	1					
ANR	5010782	Parameter	FileLockBase * & lock	471:1:11322:11340	5010470	4	True				
ANR	5010783	ParameterType	FileLockBase * &		5010470	0					
ANR	5010784	Identifier	lock		5010470	1					
ANR	5010785	Parameter	FILE * & fp	472:1:11344:11354	5010470	5	True				
ANR	5010786	ParameterType	FILE * &		5010470	0					
ANR	5010787	Identifier	fp		5010470	1					
ANR	5010788	CFGEntryNode	ENTRY		5010470		True				
ANR	5010789	CFGExitNode	EXIT		5010470		True				
ANR	5010790	Symbol	* lock		5010470						
ANR	5010791	Symbol	safe_open_wrapper_follow		5010470						
ANR	5010792	Symbol	O_CREAT		5010470						
ANR	5010793	Symbol	flags		5010470						
ANR	5010794	Symbol	fp		5010470						
ANR	5010795	Symbol	fdopen		5010470						
ANR	5010796	Symbol	mode		5010470						
ANR	5010797	Symbol	lock -> initSucceeded		5010470						
ANR	5010798	Symbol	file		5010470						
ANR	5010799	Symbol	lock		5010470						
ANR	5010800	Symbol	fmode		5010470						
ANR	5010801	Symbol	safe_fopen_wrapper_follow		5010470						
ANR	5010802	Symbol	strcmp		5010470						
ANR	5010803	Symbol	NULL		5010470						
ANR	5010804	Symbol	UNIX_NULL_FILE		5010470						
ANR	5010805	Symbol	_fileno		5010470						
ANR	5010806	Symbol	D_ALWAYS		5010470						
ANR	5010807	Symbol	false		5010470						
ANR	5010808	Symbol	log_as_user		5010470						
ANR	5010809	Symbol	param_boolean		5010470						
ANR	5010810	Symbol	O_APPEND		5010470						
ANR	5010811	Symbol	new_locking		5010470						
ANR	5010812	Symbol	true		5010470						
ANR	5010813	Symbol	O_WRONLY		5010470						
ANR	5010814	Symbol	use_lock		5010470						
ANR	5010815	Symbol	append		5010470						
ANR	5010816	Symbol	fd		5010470						
ANR	5010817	Function	WriteUserLog :: openGlobalLog	556:0:13403:13517							
ANR	5010818	FunctionDef	WriteUserLog :: openGlobalLog (bool reopen)		5010817	0					
ANR	5010819	CompoundStatement		558:0:13451:13517	5010817	0					
ANR	5010820	IdentifierDeclStatement	UserLogHeader header ;	559:1:13454:13474	5010817	0	True				
ANR	5010821	IdentifierDecl	header		5010817	0					
ANR	5010822	IdentifierDeclType	UserLogHeader		5010817	0					
ANR	5010823	Identifier	header		5010817	1					
ANR	5010824	ReturnStatement	"return openGlobalLog ( reopen , header ) ;"	560:1:13477:13515	5010817	1	True				
ANR	5010825	CallExpression	"openGlobalLog ( reopen , header )"		5010817	0					
ANR	5010826	Callee	openGlobalLog		5010817	0					
ANR	5010827	Identifier	openGlobalLog		5010817	0					
ANR	5010828	ArgumentList	reopen		5010817	1					
ANR	5010829	Argument	reopen		5010817	0					
ANR	5010830	Identifier	reopen		5010817	0					
ANR	5010831	Argument	header		5010817	1					
ANR	5010832	Identifier	header		5010817	0					
ANR	5010833	ReturnType	bool		5010817	1					
ANR	5010834	Identifier	WriteUserLog :: openGlobalLog		5010817	2					
ANR	5010835	ParameterList	bool reopen		5010817	3					
ANR	5010836	Parameter	bool reopen	557:29:13437:13447	5010817	0	True				
ANR	5010837	ParameterType	bool		5010817	0					
ANR	5010838	Identifier	reopen		5010817	1					
ANR	5010839	CFGEntryNode	ENTRY		5010817		True				
ANR	5010840	CFGExitNode	EXIT		5010817		True				
ANR	5010841	Symbol	openGlobalLog		5010817						
ANR	5010842	Symbol	reopen		5010817						
ANR	5010843	Symbol	header		5010817						
ANR	5010844	Function	WriteUserLog :: openGlobalLog	563:0:13520:15598							
ANR	5010845	FunctionDef	"WriteUserLog :: openGlobalLog (bool reopen , const UserLogHeader & header)"		5010844	0					
ANR	5010846	CompoundStatement		565:0:13597:15598	5010844	0					
ANR	5010847	IfStatement	if ( m_global_disable || ( NULL == m_global_path ) )		5010844	0					
ANR	5010848	Condition	m_global_disable || ( NULL == m_global_path )	566:6:13605:13645	5010844	0	True				
ANR	5010849	OrExpression	m_global_disable || ( NULL == m_global_path )		5010844	0		||			
ANR	5010850	Identifier	m_global_disable		5010844	0					
ANR	5010851	EqualityExpression	NULL == m_global_path		5010844	1		==			
ANR	5010852	Identifier	NULL		5010844	0					
ANR	5010853	Identifier	m_global_path		5010844	1					
ANR	5010854	CompoundStatement		2:50:51:51	5010844	1					
ANR	5010855	ReturnStatement	return true ;	567:2:13653:13664	5010844	0	True				
ANR	5010856	Identifier	true		5010844	0					
ANR	5010857	IfStatement	if ( reopen && m_global_fp )		5010844	1					
ANR	5010858	Condition	reopen && m_global_fp	571:5:13709:13729	5010844	0	True				
ANR	5010859	AndExpression	reopen && m_global_fp		5010844	0		&&			
ANR	5010860	Identifier	reopen		5010844	0					
ANR	5010861	Identifier	m_global_fp		5010844	1					
ANR	5010862	CompoundStatement		7:29:135:135	5010844	1					
ANR	5010863	ExpressionStatement	closeGlobalLog ( )	572:2:13737:13753	5010844	0	True				
ANR	5010864	CallExpression	closeGlobalLog ( )		5010844	0					
ANR	5010865	Callee	closeGlobalLog		5010844	0					
ANR	5010866	Identifier	closeGlobalLog		5010844	0					
ANR	5010867	ArgumentList			5010844	1					
ANR	5010868	ElseStatement	else		5010844	0					
ANR	5010869	IfStatement	if ( m_global_fp )		5010844	0					
ANR	5010870	Condition	m_global_fp	574:11:13769:13779	5010844	0	True				
ANR	5010871	Identifier	m_global_fp		5010844	0					
ANR	5010872	CompoundStatement		10:25:185:185	5010844	1					
ANR	5010873	ReturnStatement	return true ;	575:2:13787:13798	5010844	0	True				
ANR	5010874	Identifier	true		5010844	0					
ANR	5010875	IdentifierDeclStatement	bool ret_val = true ;	578:1:13805:13824	5010844	2	True				
ANR	5010876	IdentifierDecl	ret_val = true		5010844	0					
ANR	5010877	IdentifierDeclType	bool		5010844	0					
ANR	5010878	Identifier	ret_val		5010844	1					
ANR	5010879	AssignmentExpression	ret_val = true		5010844	2		=			
ANR	5010880	Identifier	true		5010844	0					
ANR	5010881	Identifier	true		5010844	1					
ANR	5010882	IdentifierDeclStatement	priv_state priv = set_condor_priv ( ) ;	579:1:13827:13862	5010844	3	True				
ANR	5010883	IdentifierDecl	priv = set_condor_priv ( )		5010844	0					
ANR	5010884	IdentifierDeclType	priv_state		5010844	0					
ANR	5010885	Identifier	priv		5010844	1					
ANR	5010886	AssignmentExpression	priv = set_condor_priv ( )		5010844	2		=			
ANR	5010887	Identifier	priv		5010844	0					
ANR	5010888	CallExpression	set_condor_priv ( )		5010844	1					
ANR	5010889	Callee	set_condor_priv		5010844	0					
ANR	5010890	Identifier	set_condor_priv		5010844	0					
ANR	5010891	ArgumentList			5010844	1					
ANR	5010892	ExpressionStatement	"ret_val = openFile ( m_global_path , false , m_global_lock_enable , true , m_global_lock , m_global_fp )"	580:1:13865:13968	5010844	4	True				
ANR	5010893	AssignmentExpression	"ret_val = openFile ( m_global_path , false , m_global_lock_enable , true , m_global_lock , m_global_fp )"		5010844	0		=			
ANR	5010894	Identifier	ret_val		5010844	0					
ANR	5010895	CallExpression	"openFile ( m_global_path , false , m_global_lock_enable , true , m_global_lock , m_global_fp )"		5010844	1					
ANR	5010896	Callee	openFile		5010844	0					
ANR	5010897	Identifier	openFile		5010844	0					
ANR	5010898	ArgumentList	m_global_path		5010844	1					
ANR	5010899	Argument	m_global_path		5010844	0					
ANR	5010900	Identifier	m_global_path		5010844	0					
ANR	5010901	Argument	false		5010844	1					
ANR	5010902	Identifier	false		5010844	0					
ANR	5010903	Argument	m_global_lock_enable		5010844	2					
ANR	5010904	Identifier	m_global_lock_enable		5010844	0					
ANR	5010905	Argument	true		5010844	3					
ANR	5010906	Identifier	true		5010844	0					
ANR	5010907	Argument	m_global_lock		5010844	4					
ANR	5010908	Identifier	m_global_lock		5010844	0					
ANR	5010909	Argument	m_global_fp		5010844	5					
ANR	5010910	Identifier	m_global_fp		5010844	0					
ANR	5010911	IfStatement	if ( ! ret_val )		5010844	5					
ANR	5010912	Condition	! ret_val	583:6:13977:13985	5010844	0	True				
ANR	5010913	UnaryOperationExpression	! ret_val		5010844	0					
ANR	5010914	UnaryOperator	!		5010844	0					
ANR	5010915	Identifier	ret_val		5010844	1					
ANR	5010916	CompoundStatement		19:18:391:391	5010844	1					
ANR	5010917	ExpressionStatement	set_priv ( priv )	584:2:13993:14009	5010844	0	True				
ANR	5010918	CallExpression	set_priv ( priv )		5010844	0					
ANR	5010919	Callee	set_priv		5010844	0					
ANR	5010920	Identifier	set_priv		5010844	0					
ANR	5010921	ArgumentList	priv		5010844	1					
ANR	5010922	Argument	priv		5010844	0					
ANR	5010923	Identifier	priv		5010844	0					
ANR	5010924	ReturnStatement	return false ;	585:2:14013:14025	5010844	1	True				
ANR	5010925	Identifier	false		5010844	0					
ANR	5010926	IfStatement	if ( ! m_global_lock -> obtain ( WRITE_LOCK ) )		5010844	6					
ANR	5010927	Condition	! m_global_lock -> obtain ( WRITE_LOCK )	587:5:14035:14068	5010844	0	True				
ANR	5010928	UnaryOperationExpression	! m_global_lock -> obtain ( WRITE_LOCK )		5010844	0					
ANR	5010929	UnaryOperator	!		5010844	0					
ANR	5010930	CallExpression	m_global_lock -> obtain ( WRITE_LOCK )		5010844	1					
ANR	5010931	Callee	m_global_lock -> obtain		5010844	0					
ANR	5010932	PtrMemberAccess	m_global_lock -> obtain		5010844	0					
ANR	5010933	Identifier	m_global_lock		5010844	0					
ANR	5010934	Identifier	obtain		5010844	1					
ANR	5010935	ArgumentList	WRITE_LOCK		5010844	1					
ANR	5010936	Argument	WRITE_LOCK		5010844	0					
ANR	5010937	Identifier	WRITE_LOCK		5010844	0					
ANR	5010938	CompoundStatement		23:42:474:474	5010844	1					
ANR	5010939	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR WriteUserLog Failed to grab global event log lock\\n"" )"	588:2:14076:14156	5010844	0	True				
ANR	5010940	CallExpression	"dprintf ( D_ALWAYS , ""ERROR WriteUserLog Failed to grab global event log lock\\n"" )"		5010844	0					
ANR	5010941	Callee	dprintf		5010844	0					
ANR	5010942	Identifier	dprintf		5010844	0					
ANR	5010943	ArgumentList	D_ALWAYS		5010844	1					
ANR	5010944	Argument	D_ALWAYS		5010844	0					
ANR	5010945	Identifier	D_ALWAYS		5010844	0					
ANR	5010946	Argument	"""ERROR WriteUserLog Failed to grab global event log lock\\n"""		5010844	1					
ANR	5010947	PrimaryExpression	"""ERROR WriteUserLog Failed to grab global event log lock\\n"""		5010844	0					
ANR	5010948	ReturnStatement	return false ;	589:2:14160:14172	5010844	1	True				
ANR	5010949	Identifier	false		5010844	0					
ANR	5010950	IdentifierDeclStatement	StatWrapper statinfo ;	592:1:14179:14200	5010844	7	True				
ANR	5010951	IdentifierDecl	statinfo		5010844	0					
ANR	5010952	IdentifierDeclType	StatWrapper		5010844	0					
ANR	5010953	Identifier	statinfo		5010844	1					
ANR	5010954	IfStatement	if ( ( ! ( statinfo . Stat ( m_global_path ) ) ) && ( 0 == statinfo . GetBuf ( ) -> st_size ) )		5010844	8					
ANR	5010955	Condition	( ! ( statinfo . Stat ( m_global_path ) ) ) && ( 0 == statinfo . GetBuf ( ) -> st_size )	593:7:14209:14290	5010844	0	True				
ANR	5010956	AndExpression	( ! ( statinfo . Stat ( m_global_path ) ) ) && ( 0 == statinfo . GetBuf ( ) -> st_size )		5010844	0		&&			
ANR	5010957	UnaryOperationExpression	! ( statinfo . Stat ( m_global_path ) )		5010844	0					
ANR	5010958	UnaryOperator	!		5010844	0					
ANR	5010959	CallExpression	statinfo . Stat ( m_global_path )		5010844	1					
ANR	5010960	Callee	statinfo . Stat		5010844	0					
ANR	5010961	MemberAccess	statinfo . Stat		5010844	0					
ANR	5010962	Identifier	statinfo		5010844	0					
ANR	5010963	Identifier	Stat		5010844	1					
ANR	5010964	ArgumentList	m_global_path		5010844	1					
ANR	5010965	Argument	m_global_path		5010844	0					
ANR	5010966	Identifier	m_global_path		5010844	0					
ANR	5010967	EqualityExpression	0 == statinfo . GetBuf ( ) -> st_size		5010844	1		==			
ANR	5010968	PrimaryExpression	0		5010844	0					
ANR	5010969	PtrMemberAccess	statinfo . GetBuf ( ) -> st_size		5010844	1					
ANR	5010970	CallExpression	statinfo . GetBuf ( )		5010844	0					
ANR	5010971	Callee	statinfo . GetBuf		5010844	0					
ANR	5010972	MemberAccess	statinfo . GetBuf		5010844	0					
ANR	5010973	Identifier	statinfo		5010844	0					
ANR	5010974	Identifier	GetBuf		5010844	1					
ANR	5010975	ArgumentList			5010844	1					
ANR	5010976	Identifier	st_size		5010844	1					
ANR	5010977	CompoundStatement		56:2:1240:1250	5010844	1					
ANR	5010978	IdentifierDeclStatement	WriteUserLogHeader writer ( header ) ;	597:2:14330:14365	5010844	0	True				
ANR	5010979	IdentifierDecl	writer ( header )		5010844	0					
ANR	5010980	IdentifierDeclType	WriteUserLogHeader		5010844	0					
ANR	5010981	Identifier	writer		5010844	1					
ANR	5010982	Identifier	header		5010844	2					
ANR	5010983	ExpressionStatement	m_global_sequence = writer . incSequence ( )	599:2:14370:14411	5010844	1	True				
ANR	5010984	AssignmentExpression	m_global_sequence = writer . incSequence ( )		5010844	0		=			
ANR	5010985	Identifier	m_global_sequence		5010844	0					
ANR	5010986	CallExpression	writer . incSequence ( )		5010844	1					
ANR	5010987	Callee	writer . incSequence		5010844	0					
ANR	5010988	MemberAccess	writer . incSequence		5010844	0					
ANR	5010989	Identifier	writer		5010844	0					
ANR	5010990	Identifier	incSequence		5010844	1					
ANR	5010991	ArgumentList			5010844	1					
ANR	5010992	IdentifierDeclStatement	MyString file_id ;	601:2:14416:14432	5010844	2	True				
ANR	5010993	IdentifierDecl	file_id		5010844	0					
ANR	5010994	IdentifierDeclType	MyString		5010844	0					
ANR	5010995	Identifier	file_id		5010844	1					
ANR	5010996	ExpressionStatement	GenerateGlobalId ( file_id )	602:2:14436:14463	5010844	3	True				
ANR	5010997	CallExpression	GenerateGlobalId ( file_id )		5010844	0					
ANR	5010998	Callee	GenerateGlobalId		5010844	0					
ANR	5010999	Identifier	GenerateGlobalId		5010844	0					
ANR	5011000	ArgumentList	file_id		5010844	1					
ANR	5011001	Argument	file_id		5010844	0					
ANR	5011002	Identifier	file_id		5010844	0					
ANR	5011003	ExpressionStatement	writer . setId ( file_id )	603:2:14467:14490	5010844	4	True				
ANR	5011004	CallExpression	writer . setId ( file_id )		5010844	0					
ANR	5011005	Callee	writer . setId		5010844	0					
ANR	5011006	MemberAccess	writer . setId		5010844	0					
ANR	5011007	Identifier	writer		5010844	0					
ANR	5011008	Identifier	setId		5010844	1					
ANR	5011009	ArgumentList	file_id		5010844	1					
ANR	5011010	Argument	file_id		5010844	0					
ANR	5011011	Identifier	file_id		5010844	0					
ANR	5011012	ExpressionStatement	writer . addFileOffset ( writer . getSize ( ) )	605:2:14495:14535	5010844	5	True				
ANR	5011013	CallExpression	writer . addFileOffset ( writer . getSize ( ) )		5010844	0					
ANR	5011014	Callee	writer . addFileOffset		5010844	0					
ANR	5011015	MemberAccess	writer . addFileOffset		5010844	0					
ANR	5011016	Identifier	writer		5010844	0					
ANR	5011017	Identifier	addFileOffset		5010844	1					
ANR	5011018	ArgumentList	writer . getSize ( )		5010844	1					
ANR	5011019	Argument	writer . getSize ( )		5010844	0					
ANR	5011020	CallExpression	writer . getSize ( )		5010844	0					
ANR	5011021	Callee	writer . getSize		5010844	0					
ANR	5011022	MemberAccess	writer . getSize		5010844	0					
ANR	5011023	Identifier	writer		5010844	0					
ANR	5011024	Identifier	getSize		5010844	1					
ANR	5011025	ArgumentList			5010844	1					
ANR	5011026	ExpressionStatement	writer . setSize ( 0 )	606:2:14539:14558	5010844	6	True				
ANR	5011027	CallExpression	writer . setSize ( 0 )		5010844	0					
ANR	5011028	Callee	writer . setSize		5010844	0					
ANR	5011029	MemberAccess	writer . setSize		5010844	0					
ANR	5011030	Identifier	writer		5010844	0					
ANR	5011031	Identifier	setSize		5010844	1					
ANR	5011032	ArgumentList	0		5010844	1					
ANR	5011033	Argument	0		5010844	0					
ANR	5011034	PrimaryExpression	0		5010844	0					
ANR	5011035	ExpressionStatement	writer . addEventOffset ( writer . getNumEvents ( ) )	608:2:14563:14609	5010844	7	True				
ANR	5011036	CallExpression	writer . addEventOffset ( writer . getNumEvents ( ) )		5010844	0					
ANR	5011037	Callee	writer . addEventOffset		5010844	0					
ANR	5011038	MemberAccess	writer . addEventOffset		5010844	0					
ANR	5011039	Identifier	writer		5010844	0					
ANR	5011040	Identifier	addEventOffset		5010844	1					
ANR	5011041	ArgumentList	writer . getNumEvents ( )		5010844	1					
ANR	5011042	Argument	writer . getNumEvents ( )		5010844	0					
ANR	5011043	CallExpression	writer . getNumEvents ( )		5010844	0					
ANR	5011044	Callee	writer . getNumEvents		5010844	0					
ANR	5011045	MemberAccess	writer . getNumEvents		5010844	0					
ANR	5011046	Identifier	writer		5010844	0					
ANR	5011047	Identifier	getNumEvents		5010844	1					
ANR	5011048	ArgumentList			5010844	1					
ANR	5011049	ExpressionStatement	writer . setNumEvents ( 0 )	609:2:14613:14637	5010844	8	True				
ANR	5011050	CallExpression	writer . setNumEvents ( 0 )		5010844	0					
ANR	5011051	Callee	writer . setNumEvents		5010844	0					
ANR	5011052	MemberAccess	writer . setNumEvents		5010844	0					
ANR	5011053	Identifier	writer		5010844	0					
ANR	5011054	Identifier	setNumEvents		5010844	1					
ANR	5011055	ArgumentList	0		5010844	1					
ANR	5011056	Argument	0		5010844	0					
ANR	5011057	PrimaryExpression	0		5010844	0					
ANR	5011058	ExpressionStatement	writer . setCtime ( time ( NULL ) )	610:2:14641:14670	5010844	9	True				
ANR	5011059	CallExpression	writer . setCtime ( time ( NULL ) )		5010844	0					
ANR	5011060	Callee	writer . setCtime		5010844	0					
ANR	5011061	MemberAccess	writer . setCtime		5010844	0					
ANR	5011062	Identifier	writer		5010844	0					
ANR	5011063	Identifier	setCtime		5010844	1					
ANR	5011064	ArgumentList	time ( NULL )		5010844	1					
ANR	5011065	Argument	time ( NULL )		5010844	0					
ANR	5011066	CallExpression	time ( NULL )		5010844	0					
ANR	5011067	Callee	time		5010844	0					
ANR	5011068	Identifier	time		5010844	0					
ANR	5011069	ArgumentList	NULL		5010844	1					
ANR	5011070	Argument	NULL		5010844	0					
ANR	5011071	Identifier	NULL		5010844	0					
ANR	5011072	ExpressionStatement	writer . setMaxRotation ( m_global_max_rotations )	612:2:14675:14722	5010844	10	True				
ANR	5011073	CallExpression	writer . setMaxRotation ( m_global_max_rotations )		5010844	0					
ANR	5011074	Callee	writer . setMaxRotation		5010844	0					
ANR	5011075	MemberAccess	writer . setMaxRotation		5010844	0					
ANR	5011076	Identifier	writer		5010844	0					
ANR	5011077	Identifier	setMaxRotation		5010844	1					
ANR	5011078	ArgumentList	m_global_max_rotations		5010844	1					
ANR	5011079	Argument	m_global_max_rotations		5010844	0					
ANR	5011080	Identifier	m_global_max_rotations		5010844	0					
ANR	5011081	IfStatement	if ( m_creator_name )		5010844	11					
ANR	5011082	Condition	m_creator_name	614:7:14732:14745	5010844	0	True				
ANR	5011083	Identifier	m_creator_name		5010844	0					
ANR	5011084	CompoundStatement		50:24:1151:1151	5010844	1					
ANR	5011085	ExpressionStatement	writer . setCreatorName ( m_creator_name )	615:3:14754:14793	5010844	0	True				
ANR	5011086	CallExpression	writer . setCreatorName ( m_creator_name )		5010844	0					
ANR	5011087	Callee	writer . setCreatorName		5010844	0					
ANR	5011088	MemberAccess	writer . setCreatorName		5010844	0					
ANR	5011089	Identifier	writer		5010844	0					
ANR	5011090	Identifier	setCreatorName		5010844	1					
ANR	5011091	ArgumentList	m_creator_name		5010844	1					
ANR	5011092	Argument	m_creator_name		5010844	0					
ANR	5011093	Identifier	m_creator_name		5010844	0					
ANR	5011094	ExpressionStatement	ret_val = writer . Write ( * this )	618:2:14802:14833	5010844	12	True				
ANR	5011095	AssignmentExpression	ret_val = writer . Write ( * this )		5010844	0		=			
ANR	5011096	Identifier	ret_val		5010844	0					
ANR	5011097	CallExpression	writer . Write ( * this )		5010844	1					
ANR	5011098	Callee	writer . Write		5010844	0					
ANR	5011099	MemberAccess	writer . Write		5010844	0					
ANR	5011100	Identifier	writer		5010844	0					
ANR	5011101	Identifier	Write		5010844	1					
ANR	5011102	ArgumentList	* this		5010844	1					
ANR	5011103	Argument	* this		5010844	0					
ANR	5011104	UnaryOperationExpression	* this		5010844	0					
ANR	5011105	UnaryOperator	*		5010844	0					
ANR	5011106	Identifier	this		5010844	1					
ANR	5011107	IdentifierDeclStatement	MyString s ;	620:2:14838:14848	5010844	13	True				
ANR	5011108	IdentifierDecl	s		5010844	0					
ANR	5011109	IdentifierDeclType	MyString		5010844	0					
ANR	5011110	Identifier	s		5010844	1					
ANR	5011111	ExpressionStatement	"s . sprintf ( ""openGlobalLog: header: %s"" , m_global_path )"	621:2:14852:14907	5010844	14	True				
ANR	5011112	CallExpression	"s . sprintf ( ""openGlobalLog: header: %s"" , m_global_path )"		5010844	0					
ANR	5011113	Callee	s . sprintf		5010844	0					
ANR	5011114	MemberAccess	s . sprintf		5010844	0					
ANR	5011115	Identifier	s		5010844	0					
ANR	5011116	Identifier	sprintf		5010844	1					
ANR	5011117	ArgumentList	"""openGlobalLog: header: %s"""		5010844	1					
ANR	5011118	Argument	"""openGlobalLog: header: %s"""		5010844	0					
ANR	5011119	PrimaryExpression	"""openGlobalLog: header: %s"""		5010844	0					
ANR	5011120	Argument	m_global_path		5010844	1					
ANR	5011121	Identifier	m_global_path		5010844	0					
ANR	5011122	ExpressionStatement	"writer . dprint ( D_FULLDEBUG , s )"	622:2:14911:14942	5010844	15	True				
ANR	5011123	CallExpression	"writer . dprint ( D_FULLDEBUG , s )"		5010844	0					
ANR	5011124	Callee	writer . dprint		5010844	0					
ANR	5011125	MemberAccess	writer . dprint		5010844	0					
ANR	5011126	Identifier	writer		5010844	0					
ANR	5011127	Identifier	dprint		5010844	1					
ANR	5011128	ArgumentList	D_FULLDEBUG		5010844	1					
ANR	5011129	Argument	D_FULLDEBUG		5010844	0					
ANR	5011130	Identifier	D_FULLDEBUG		5010844	0					
ANR	5011131	Argument	s		5010844	1					
ANR	5011132	Identifier	s		5010844	0					
ANR	5011133	IfStatement	if ( ! updateGlobalStat ( ) )		5010844	16					
ANR	5011134	Condition	! updateGlobalStat ( )	631:6:15259:15277	5010844	0	True				
ANR	5011135	UnaryOperationExpression	! updateGlobalStat ( )		5010844	0					
ANR	5011136	UnaryOperator	!		5010844	0					
ANR	5011137	CallExpression	updateGlobalStat ( )		5010844	1					
ANR	5011138	Callee	updateGlobalStat		5010844	0					
ANR	5011139	Identifier	updateGlobalStat		5010844	0					
ANR	5011140	ArgumentList			5010844	1					
ANR	5011141	CompoundStatement		67:28:1683:1683	5010844	1					
ANR	5011142	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog Failed to update global stat after header write\\n"" )"	632:3:15286:15377	5010844	0	True				
ANR	5011143	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog Failed to update global stat after header write\\n"" )"		5010844	0					
ANR	5011144	Callee	dprintf		5010844	0					
ANR	5011145	Identifier	dprintf		5010844	0					
ANR	5011146	ArgumentList	D_ALWAYS		5010844	1					
ANR	5011147	Argument	D_ALWAYS		5010844	0					
ANR	5011148	Identifier	D_ALWAYS		5010844	0					
ANR	5011149	Argument	"""WriteUserLog Failed to update global stat after header write\\n"""		5010844	1					
ANR	5011150	PrimaryExpression	"""WriteUserLog Failed to update global stat after header write\\n"""		5010844	0					
ANR	5011151	ElseStatement	else		5010844	0					
ANR	5011152	CompoundStatement		71:7:1792:1792	5010844	0					
ANR	5011153	ExpressionStatement	m_global_state -> Update ( * m_global_stat )	636:3:15395:15435	5010844	0	True				
ANR	5011154	CallExpression	m_global_state -> Update ( * m_global_stat )		5010844	0					
ANR	5011155	Callee	m_global_state -> Update		5010844	0					
ANR	5011156	PtrMemberAccess	m_global_state -> Update		5010844	0					
ANR	5011157	Identifier	m_global_state		5010844	0					
ANR	5011158	Identifier	Update		5010844	1					
ANR	5011159	ArgumentList	* m_global_stat		5010844	1					
ANR	5011160	Argument	* m_global_stat		5010844	0					
ANR	5011161	UnaryOperationExpression	* m_global_stat		5010844	0					
ANR	5011162	UnaryOperator	*		5010844	0					
ANR	5011163	Identifier	m_global_stat		5010844	1					
ANR	5011164	IfStatement	if ( ! m_global_lock -> release ( ) )		5010844	9					
ANR	5011165	Condition	! m_global_lock -> release ( )	641:5:15451:15475	5010844	0	True				
ANR	5011166	UnaryOperationExpression	! m_global_lock -> release ( )		5010844	0					
ANR	5011167	UnaryOperator	!		5010844	0					
ANR	5011168	CallExpression	m_global_lock -> release ( )		5010844	1					
ANR	5011169	Callee	m_global_lock -> release		5010844	0					
ANR	5011170	PtrMemberAccess	m_global_lock -> release		5010844	0					
ANR	5011171	Identifier	m_global_lock		5010844	0					
ANR	5011172	Identifier	release		5010844	1					
ANR	5011173	ArgumentList			5010844	1					
ANR	5011174	CompoundStatement		77:33:1881:1881	5010844	1					
ANR	5011175	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR WriteUserLog Failed to release global lock\\n"" )"	642:2:15483:15556	5010844	0	True				
ANR	5011176	CallExpression	"dprintf ( D_ALWAYS , ""ERROR WriteUserLog Failed to release global lock\\n"" )"		5010844	0					
ANR	5011177	Callee	dprintf		5010844	0					
ANR	5011178	Identifier	dprintf		5010844	0					
ANR	5011179	ArgumentList	D_ALWAYS		5010844	1					
ANR	5011180	Argument	D_ALWAYS		5010844	0					
ANR	5011181	Identifier	D_ALWAYS		5010844	0					
ANR	5011182	Argument	"""ERROR WriteUserLog Failed to release global lock\\n"""		5010844	1					
ANR	5011183	PrimaryExpression	"""ERROR WriteUserLog Failed to release global lock\\n"""		5010844	0					
ANR	5011184	ExpressionStatement	set_priv ( priv )	645:1:15563:15579	5010844	10	True				
ANR	5011185	CallExpression	set_priv ( priv )		5010844	0					
ANR	5011186	Callee	set_priv		5010844	0					
ANR	5011187	Identifier	set_priv		5010844	0					
ANR	5011188	ArgumentList	priv		5010844	1					
ANR	5011189	Argument	priv		5010844	0					
ANR	5011190	Identifier	priv		5010844	0					
ANR	5011191	ReturnStatement	return ret_val ;	646:1:15582:15596	5010844	11	True				
ANR	5011192	Identifier	ret_val		5010844	0					
ANR	5011193	ReturnType	bool		5010844	1					
ANR	5011194	Identifier	WriteUserLog :: openGlobalLog		5010844	2					
ANR	5011195	ParameterList	"bool reopen , const UserLogHeader & header"		5010844	3					
ANR	5011196	Parameter	bool reopen	564:29:13554:13564	5010844	0	True				
ANR	5011197	ParameterType	bool		5010844	0					
ANR	5011198	Identifier	reopen		5010844	1					
ANR	5011199	Parameter	const UserLogHeader & header	564:42:13567:13593	5010844	1	True				
ANR	5011200	ParameterType	const UserLogHeader &		5010844	0					
ANR	5011201	Identifier	header		5010844	1					
ANR	5011202	CFGEntryNode	ENTRY		5010844		True				
ANR	5011203	CFGExitNode	EXIT		5010844		True				
ANR	5011204	Symbol	set_condor_priv		5010844						
ANR	5011205	Symbol	openFile		5010844						
ANR	5011206	Symbol	m_creator_name		5010844						
ANR	5011207	Symbol	* statinfo . GetBuf		5010844						
ANR	5011208	Symbol	updateGlobalStat		5010844						
ANR	5011209	Symbol	m_global_stat		5010844						
ANR	5011210	Symbol	m_global_fp		5010844						
ANR	5011211	Symbol	WRITE_LOCK		5010844						
ANR	5011212	Symbol	statinfo		5010844						
ANR	5011213	Symbol	* statinfo		5010844						
ANR	5011214	Symbol	m_global_lock -> obtain		5010844						
ANR	5011215	Symbol	priv		5010844						
ANR	5011216	Symbol	m_global_sequence		5010844						
ANR	5011217	Symbol	m_global_lock -> release		5010844						
ANR	5011218	Symbol	m_global_disable		5010844						
ANR	5011219	Symbol	m_global_state		5010844						
ANR	5011220	Symbol	statinfo . GetBuf		5010844						
ANR	5011221	Symbol	writer . incSequence		5010844						
ANR	5011222	Symbol	writer . Write		5010844						
ANR	5011223	Symbol	NULL		5010844						
ANR	5011224	Symbol	m_global_path		5010844						
ANR	5011225	Symbol	statinfo . Stat		5010844						
ANR	5011226	Symbol	m_global_max_rotations		5010844						
ANR	5011227	Symbol	false		5010844						
ANR	5011228	Symbol	m_global_lock_enable		5010844						
ANR	5011229	Symbol	D_ALWAYS		5010844						
ANR	5011230	Symbol	this		5010844						
ANR	5011231	Symbol	statinfo . GetBuf ( ) -> st_size		5010844						
ANR	5011232	Symbol	D_FULLDEBUG		5010844						
ANR	5011233	Symbol	ret_val		5010844						
ANR	5011234	Symbol	* m_global_stat		5010844						
ANR	5011235	Symbol	* this		5010844						
ANR	5011236	Symbol	s		5010844						
ANR	5011237	Symbol	writer . getSize		5010844						
ANR	5011238	Symbol	writer . getNumEvents		5010844						
ANR	5011239	Symbol	reopen		5010844						
ANR	5011240	Symbol	file_id		5010844						
ANR	5011241	Symbol	true		5010844						
ANR	5011242	Symbol	header		5010844						
ANR	5011243	Symbol	writer		5010844						
ANR	5011244	Symbol	time		5010844						
ANR	5011245	Symbol	* m_global_lock		5010844						
ANR	5011246	Symbol	m_global_lock		5010844						
ANR	5011247	Function	WriteUserLog :: closeGlobalLog	649:0:15601:15808							
ANR	5011248	FunctionDef	WriteUserLog :: closeGlobalLog ()		5011247	0					
ANR	5011249	CompoundStatement		651:0:15643:15808	5011247	0					
ANR	5011250	IfStatement	if ( m_global_lock )		5011247	0					
ANR	5011251	Condition	m_global_lock	652:5:15650:15662	5011247	0	True				
ANR	5011252	Identifier	m_global_lock		5011247	0					
ANR	5011253	CompoundStatement		2:20:21:21	5011247	1					
ANR	5011254	Statement	delete	653:2:15669:15674	5011247	0	True				
ANR	5011255	ExpressionStatement	m_global_lock	653:9:15676:15689	5011247	1	True				
ANR	5011256	Identifier	m_global_lock		5011247	0					
ANR	5011257	ExpressionStatement	m_global_lock = NULL	654:2:15693:15713	5011247	2	True				
ANR	5011258	AssignmentExpression	m_global_lock = NULL		5011247	0		=			
ANR	5011259	Identifier	m_global_lock		5011247	0					
ANR	5011260	Identifier	NULL		5011247	1					
ANR	5011261	IfStatement	if ( m_global_fp != NULL )		5011247	1					
ANR	5011262	Condition	m_global_fp != NULL	656:5:15723:15741	5011247	0	True				
ANR	5011263	EqualityExpression	m_global_fp != NULL		5011247	0		!=			
ANR	5011264	Identifier	m_global_fp		5011247	0					
ANR	5011265	Identifier	NULL		5011247	1					
ANR	5011266	CompoundStatement		6:26:100:100	5011247	1					
ANR	5011267	ExpressionStatement	fclose ( m_global_fp )	657:2:15748:15767	5011247	0	True				
ANR	5011268	CallExpression	fclose ( m_global_fp )		5011247	0					
ANR	5011269	Callee	fclose		5011247	0					
ANR	5011270	Identifier	fclose		5011247	0					
ANR	5011271	ArgumentList	m_global_fp		5011247	1					
ANR	5011272	Argument	m_global_fp		5011247	0					
ANR	5011273	Identifier	m_global_fp		5011247	0					
ANR	5011274	ExpressionStatement	m_global_fp = NULL	658:2:15771:15789	5011247	1	True				
ANR	5011275	AssignmentExpression	m_global_fp = NULL		5011247	0		=			
ANR	5011276	Identifier	m_global_fp		5011247	0					
ANR	5011277	Identifier	NULL		5011247	1					
ANR	5011278	ReturnStatement	return true ;	660:1:15795:15806	5011247	2	True				
ANR	5011279	Identifier	true		5011247	0					
ANR	5011280	ReturnType	bool		5011247	1					
ANR	5011281	Identifier	WriteUserLog :: closeGlobalLog		5011247	2					
ANR	5011282	ParameterList			5011247	3					
ANR	5011283	CFGEntryNode	ENTRY		5011247		True				
ANR	5011284	CFGExitNode	EXIT		5011247		True				
ANR	5011285	Symbol	NULL		5011247						
ANR	5011286	Symbol	m_global_fp		5011247						
ANR	5011287	Symbol	true		5011247						
ANR	5011288	Symbol	m_global_lock		5011247						
ANR	5011289	Function	WriteUserLog :: checkGlobalLogRotation	666:0:16019:22487							
ANR	5011290	FunctionDef	WriteUserLog :: checkGlobalLogRotation ()		5011289	0					
ANR	5011291	CompoundStatement		668:0:16069:22487	5011289	0					
ANR	5011292	IfStatement	if ( ! m_global_fp )		5011289	0					
ANR	5011293	Condition	! m_global_fp	669:5:16076:16087	5011289	0	True				
ANR	5011294	UnaryOperationExpression	! m_global_fp		5011289	0					
ANR	5011295	UnaryOperator	!		5011289	0					
ANR	5011296	Identifier	m_global_fp		5011289	1					
ANR	5011297	CompoundStatement		2:19:20:20	5011289	1					
ANR	5011298	ReturnStatement	return false ;	670:2:16094:16106	5011289	0	True				
ANR	5011299	Identifier	false		5011289	0					
ANR	5011300	IfStatement	if ( m_global_disable || ( NULL == m_global_path ) )		5011289	1					
ANR	5011301	Condition	m_global_disable || ( NULL == m_global_path )	672:6:16117:16157	5011289	0	True				
ANR	5011302	OrExpression	m_global_disable || ( NULL == m_global_path )		5011289	0		||			
ANR	5011303	Identifier	m_global_disable		5011289	0					
ANR	5011304	EqualityExpression	NULL == m_global_path		5011289	1		==			
ANR	5011305	Identifier	NULL		5011289	0					
ANR	5011306	Identifier	m_global_path		5011289	1					
ANR	5011307	CompoundStatement		5:50:91:91	5011289	1					
ANR	5011308	ReturnStatement	return false ;	673:2:16165:16177	5011289	0	True				
ANR	5011309	Identifier	false		5011289	0					
ANR	5011310	IfStatement	if ( ! m_global_lock || m_global_lock -> isFakeLock ( ) || m_global_lock -> isUnlocked ( ) )		5011289	2					
ANR	5011311	Condition	! m_global_lock || m_global_lock -> isFakeLock ( ) || m_global_lock -> isUnlocked ( )	675:6:16188:16269	5011289	0	True				
ANR	5011312	OrExpression	! m_global_lock || m_global_lock -> isFakeLock ( ) || m_global_lock -> isUnlocked ( )		5011289	0		||			
ANR	5011313	UnaryOperationExpression	! m_global_lock		5011289	0					
ANR	5011314	UnaryOperator	!		5011289	0					
ANR	5011315	Identifier	m_global_lock		5011289	1					
ANR	5011316	OrExpression	m_global_lock -> isFakeLock ( ) || m_global_lock -> isUnlocked ( )		5011289	1		||			
ANR	5011317	CallExpression	m_global_lock -> isFakeLock ( )		5011289	0					
ANR	5011318	Callee	m_global_lock -> isFakeLock		5011289	0					
ANR	5011319	PtrMemberAccess	m_global_lock -> isFakeLock		5011289	0					
ANR	5011320	Identifier	m_global_lock		5011289	0					
ANR	5011321	Identifier	isFakeLock		5011289	1					
ANR	5011322	ArgumentList			5011289	1					
ANR	5011323	CallExpression	m_global_lock -> isUnlocked ( )		5011289	1					
ANR	5011324	Callee	m_global_lock -> isUnlocked		5011289	0					
ANR	5011325	PtrMemberAccess	m_global_lock -> isUnlocked		5011289	0					
ANR	5011326	Identifier	m_global_lock		5011289	0					
ANR	5011327	Identifier	isUnlocked		5011289	1					
ANR	5011328	ArgumentList			5011289	1					
ANR	5011329	CompoundStatement		10:33:203:203	5011289	1					
ANR	5011330	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog checking for event log rotation, but no lock\\n"" )"	678:2:16277:16359	5011289	0	True				
ANR	5011331	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog checking for event log rotation, but no lock\\n"" )"		5011289	0					
ANR	5011332	Callee	dprintf		5011289	0					
ANR	5011333	Identifier	dprintf		5011289	0					
ANR	5011334	ArgumentList	D_ALWAYS		5011289	1					
ANR	5011335	Argument	D_ALWAYS		5011289	0					
ANR	5011336	Identifier	D_ALWAYS		5011289	0					
ANR	5011337	Argument	"""WriteUserLog checking for event log rotation, but no lock\\n"""		5011289	1					
ANR	5011338	PrimaryExpression	"""WriteUserLog checking for event log rotation, but no lock\\n"""		5011289	0					
ANR	5011339	IfStatement	if ( 0 == m_global_max_rotations )		5011289	3					
ANR	5011340	Condition	0 == m_global_max_rotations	682:6:16420:16446	5011289	0	True				
ANR	5011341	EqualityExpression	0 == m_global_max_rotations		5011289	0		==			
ANR	5011342	PrimaryExpression	0		5011289	0					
ANR	5011343	Identifier	m_global_max_rotations		5011289	1					
ANR	5011344	CompoundStatement		15:36:380:380	5011289	1					
ANR	5011345	ReturnStatement	return false ;	683:2:16454:16466	5011289	0	True				
ANR	5011346	Identifier	false		5011289	0					
ANR	5011347	IfStatement	if ( ! updateGlobalStat ( ) )		5011289	4					
ANR	5011348	Condition	! updateGlobalStat ( )	687:6:16513:16531	5011289	0	True				
ANR	5011349	UnaryOperationExpression	! updateGlobalStat ( )		5011289	0					
ANR	5011350	UnaryOperator	!		5011289	0					
ANR	5011351	CallExpression	updateGlobalStat ( )		5011289	1					
ANR	5011352	Callee	updateGlobalStat		5011289	0					
ANR	5011353	Identifier	updateGlobalStat		5011289	0					
ANR	5011354	ArgumentList			5011289	1					
ANR	5011355	CompoundStatement		20:28:465:465	5011289	1					
ANR	5011356	ReturnStatement	return false ;	688:2:16539:16551	5011289	0	True				
ANR	5011357	Identifier	false		5011289	0					
ANR	5011358	IdentifierDeclStatement	ReadUserLogHeader header_reader ;	692:1:16622:16653	5011289	5	True				
ANR	5011359	IdentifierDecl	header_reader		5011289	0					
ANR	5011360	IdentifierDeclType	ReadUserLogHeader		5011289	0					
ANR	5011361	Identifier	header_reader		5011289	1					
ANR	5011362	IfStatement	if ( m_global_state -> isNewFile ( * m_global_stat ) )		5011289	6					
ANR	5011363	Condition	m_global_state -> isNewFile ( * m_global_stat )	695:6:16704:16744	5011289	0	True				
ANR	5011364	CallExpression	m_global_state -> isNewFile ( * m_global_stat )		5011289	0					
ANR	5011365	Callee	m_global_state -> isNewFile		5011289	0					
ANR	5011366	PtrMemberAccess	m_global_state -> isNewFile		5011289	0					
ANR	5011367	Identifier	m_global_state		5011289	0					
ANR	5011368	Identifier	isNewFile		5011289	1					
ANR	5011369	ArgumentList	* m_global_stat		5011289	1					
ANR	5011370	Argument	* m_global_stat		5011289	0					
ANR	5011371	UnaryOperationExpression	* m_global_stat		5011289	0					
ANR	5011372	UnaryOperator	*		5011289	0					
ANR	5011373	Identifier	m_global_stat		5011289	1					
ANR	5011374	CompoundStatement		28:50:678:678	5011289	1					
ANR	5011375	ExpressionStatement	globalLogRotated ( header_reader )	696:2:16752:16785	5011289	0	True				
ANR	5011376	CallExpression	globalLogRotated ( header_reader )		5011289	0					
ANR	5011377	Callee	globalLogRotated		5011289	0					
ANR	5011378	Identifier	globalLogRotated		5011289	0					
ANR	5011379	ArgumentList	header_reader		5011289	1					
ANR	5011380	Argument	header_reader		5011289	0					
ANR	5011381	Identifier	header_reader		5011289	0					
ANR	5011382	ReturnStatement	return true ;	697:2:16789:16800	5011289	1	True				
ANR	5011383	Identifier	true		5011289	0					
ANR	5011384	ExpressionStatement	m_global_state -> Update ( * m_global_stat )	699:1:16806:16846	5011289	7	True				
ANR	5011385	CallExpression	m_global_state -> Update ( * m_global_stat )		5011289	0					
ANR	5011386	Callee	m_global_state -> Update		5011289	0					
ANR	5011387	PtrMemberAccess	m_global_state -> Update		5011289	0					
ANR	5011388	Identifier	m_global_state		5011289	0					
ANR	5011389	Identifier	Update		5011289	1					
ANR	5011390	ArgumentList	* m_global_stat		5011289	1					
ANR	5011391	Argument	* m_global_stat		5011289	0					
ANR	5011392	UnaryOperationExpression	* m_global_stat		5011289	0					
ANR	5011393	UnaryOperator	*		5011289	0					
ANR	5011394	Identifier	m_global_stat		5011289	1					
ANR	5011395	IfStatement	if ( ! m_global_state -> isOverSize ( m_global_max_filesize ) )		5011289	8					
ANR	5011396	Condition	! m_global_state -> isOverSize ( m_global_max_filesize )	702:6:16901:16950	5011289	0	True				
ANR	5011397	UnaryOperationExpression	! m_global_state -> isOverSize ( m_global_max_filesize )		5011289	0					
ANR	5011398	UnaryOperator	!		5011289	0					
ANR	5011399	CallExpression	m_global_state -> isOverSize ( m_global_max_filesize )		5011289	1					
ANR	5011400	Callee	m_global_state -> isOverSize		5011289	0					
ANR	5011401	PtrMemberAccess	m_global_state -> isOverSize		5011289	0					
ANR	5011402	Identifier	m_global_state		5011289	0					
ANR	5011403	Identifier	isOverSize		5011289	1					
ANR	5011404	ArgumentList	m_global_max_filesize		5011289	1					
ANR	5011405	Argument	m_global_max_filesize		5011289	0					
ANR	5011406	Identifier	m_global_max_filesize		5011289	0					
ANR	5011407	CompoundStatement		35:59:884:884	5011289	1					
ANR	5011408	ReturnStatement	return false ;	703:2:16958:16970	5011289	0	True				
ANR	5011409	Identifier	false		5011289	0					
ANR	5011410	IfStatement	if ( ! m_rotation_lock -> obtain ( WRITE_LOCK ) )		5011289	9					
ANR	5011411	Condition	! m_rotation_lock -> obtain ( WRITE_LOCK )	710:6:17105:17142	5011289	0	True				
ANR	5011412	UnaryOperationExpression	! m_rotation_lock -> obtain ( WRITE_LOCK )		5011289	0					
ANR	5011413	UnaryOperator	!		5011289	0					
ANR	5011414	CallExpression	m_rotation_lock -> obtain ( WRITE_LOCK )		5011289	1					
ANR	5011415	Callee	m_rotation_lock -> obtain		5011289	0					
ANR	5011416	PtrMemberAccess	m_rotation_lock -> obtain		5011289	0					
ANR	5011417	Identifier	m_rotation_lock		5011289	0					
ANR	5011418	Identifier	obtain		5011289	1					
ANR	5011419	ArgumentList	WRITE_LOCK		5011289	1					
ANR	5011420	Argument	WRITE_LOCK		5011289	0					
ANR	5011421	Identifier	WRITE_LOCK		5011289	0					
ANR	5011422	CompoundStatement		43:47:1076:1076	5011289	1					
ANR	5011423	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR WriteUserLog Failed to get rotation lock\\n"" )"	711:2:17150:17221	5011289	0	True				
ANR	5011424	CallExpression	"dprintf ( D_ALWAYS , ""ERROR WriteUserLog Failed to get rotation lock\\n"" )"		5011289	0					
ANR	5011425	Callee	dprintf		5011289	0					
ANR	5011426	Identifier	dprintf		5011289	0					
ANR	5011427	ArgumentList	D_ALWAYS		5011289	1					
ANR	5011428	Argument	D_ALWAYS		5011289	0					
ANR	5011429	Identifier	D_ALWAYS		5011289	0					
ANR	5011430	Argument	"""ERROR WriteUserLog Failed to get rotation lock\\n"""		5011289	1					
ANR	5011431	PrimaryExpression	"""ERROR WriteUserLog Failed to get rotation lock\\n"""		5011289	0					
ANR	5011432	ReturnStatement	return false ;	712:2:17225:17237	5011289	1	True				
ANR	5011433	Identifier	false		5011289	0					
ANR	5011434	IdentifierDeclStatement	UtcTime stat_time ( true ) ;	717:1:17298:17323	5011289	10	True				
ANR	5011435	IdentifierDecl	stat_time ( true )		5011289	0					
ANR	5011436	IdentifierDeclType	UtcTime		5011289	0					
ANR	5011437	Identifier	stat_time		5011289	1					
ANR	5011438	Identifier	true		5011289	2					
ANR	5011439	IfStatement	if ( ! updateGlobalStat ( ) )		5011289	11					
ANR	5011440	Condition	! updateGlobalStat ( )	719:6:17338:17356	5011289	0	True				
ANR	5011441	UnaryOperationExpression	! updateGlobalStat ( )		5011289	0					
ANR	5011442	UnaryOperator	!		5011289	0					
ANR	5011443	CallExpression	updateGlobalStat ( )		5011289	1					
ANR	5011444	Callee	updateGlobalStat		5011289	0					
ANR	5011445	Identifier	updateGlobalStat		5011289	0					
ANR	5011446	ArgumentList			5011289	1					
ANR	5011447	CompoundStatement		52:28:1290:1290	5011289	1					
ANR	5011448	ReturnStatement	return false ;	720:2:17364:17376	5011289	0	True				
ANR	5011449	Identifier	false		5011289	0					
ANR	5011450	IfStatement	if ( m_global_state -> isNewFile ( * m_global_stat ) )		5011289	12					
ANR	5011451	Condition	m_global_state -> isNewFile ( * m_global_stat )	724:6:17462:17502	5011289	0	True				
ANR	5011452	CallExpression	m_global_state -> isNewFile ( * m_global_stat )		5011289	0					
ANR	5011453	Callee	m_global_state -> isNewFile		5011289	0					
ANR	5011454	PtrMemberAccess	m_global_state -> isNewFile		5011289	0					
ANR	5011455	Identifier	m_global_state		5011289	0					
ANR	5011456	Identifier	isNewFile		5011289	1					
ANR	5011457	ArgumentList	* m_global_stat		5011289	1					
ANR	5011458	Argument	* m_global_stat		5011289	0					
ANR	5011459	UnaryOperationExpression	* m_global_stat		5011289	0					
ANR	5011460	UnaryOperator	*		5011289	0					
ANR	5011461	Identifier	m_global_stat		5011289	1					
ANR	5011462	CompoundStatement		57:50:1436:1436	5011289	1					
ANR	5011463	ExpressionStatement	m_rotation_lock -> release ( )	725:2:17510:17537	5011289	0	True				
ANR	5011464	CallExpression	m_rotation_lock -> release ( )		5011289	0					
ANR	5011465	Callee	m_rotation_lock -> release		5011289	0					
ANR	5011466	PtrMemberAccess	m_rotation_lock -> release		5011289	0					
ANR	5011467	Identifier	m_rotation_lock		5011289	0					
ANR	5011468	Identifier	release		5011289	1					
ANR	5011469	ArgumentList			5011289	1					
ANR	5011470	ExpressionStatement	globalLogRotated ( header_reader )	726:2:17541:17574	5011289	1	True				
ANR	5011471	CallExpression	globalLogRotated ( header_reader )		5011289	0					
ANR	5011472	Callee	globalLogRotated		5011289	0					
ANR	5011473	Identifier	globalLogRotated		5011289	0					
ANR	5011474	ArgumentList	header_reader		5011289	1					
ANR	5011475	Argument	header_reader		5011289	0					
ANR	5011476	Identifier	header_reader		5011289	0					
ANR	5011477	ReturnStatement	return true ;	727:2:17578:17589	5011289	2	True				
ANR	5011478	Identifier	true		5011289	0					
ANR	5011479	ExpressionStatement	m_global_state -> Update ( * m_global_stat )	729:1:17595:17635	5011289	13	True				
ANR	5011480	CallExpression	m_global_state -> Update ( * m_global_stat )		5011289	0					
ANR	5011481	Callee	m_global_state -> Update		5011289	0					
ANR	5011482	PtrMemberAccess	m_global_state -> Update		5011289	0					
ANR	5011483	Identifier	m_global_state		5011289	0					
ANR	5011484	Identifier	Update		5011289	1					
ANR	5011485	ArgumentList	* m_global_stat		5011289	1					
ANR	5011486	Argument	* m_global_stat		5011289	0					
ANR	5011487	UnaryOperationExpression	* m_global_stat		5011289	0					
ANR	5011488	UnaryOperator	*		5011289	0					
ANR	5011489	Identifier	m_global_stat		5011289	1					
ANR	5011490	IfStatement	if ( ! m_global_state -> isOverSize ( m_global_max_filesize ) )		5011289	14					
ANR	5011491	Condition	! m_global_state -> isOverSize ( m_global_max_filesize )	733:6:17753:17802	5011289	0	True				
ANR	5011492	UnaryOperationExpression	! m_global_state -> isOverSize ( m_global_max_filesize )		5011289	0					
ANR	5011493	UnaryOperator	!		5011289	0					
ANR	5011494	CallExpression	m_global_state -> isOverSize ( m_global_max_filesize )		5011289	1					
ANR	5011495	Callee	m_global_state -> isOverSize		5011289	0					
ANR	5011496	PtrMemberAccess	m_global_state -> isOverSize		5011289	0					
ANR	5011497	Identifier	m_global_state		5011289	0					
ANR	5011498	Identifier	isOverSize		5011289	1					
ANR	5011499	ArgumentList	m_global_max_filesize		5011289	1					
ANR	5011500	Argument	m_global_max_filesize		5011289	0					
ANR	5011501	Identifier	m_global_max_filesize		5011289	0					
ANR	5011502	CompoundStatement		66:59:1736:1736	5011289	1					
ANR	5011503	ExpressionStatement	m_rotation_lock -> release ( )	734:2:17810:17837	5011289	0	True				
ANR	5011504	CallExpression	m_rotation_lock -> release ( )		5011289	0					
ANR	5011505	Callee	m_rotation_lock -> release		5011289	0					
ANR	5011506	PtrMemberAccess	m_rotation_lock -> release		5011289	0					
ANR	5011507	Identifier	m_rotation_lock		5011289	0					
ANR	5011508	Identifier	release		5011289	1					
ANR	5011509	ArgumentList			5011289	1					
ANR	5011510	ReturnStatement	return false ;	735:2:17841:17853	5011289	1	True				
ANR	5011511	Identifier	false		5011289	0					
ANR	5011512	IdentifierDeclStatement	filesize_t current_filesize = 0 ;	741:1:17979:18010	5011289	15	True				
ANR	5011513	IdentifierDecl	current_filesize = 0		5011289	0					
ANR	5011514	IdentifierDeclType	filesize_t		5011289	0					
ANR	5011515	Identifier	current_filesize		5011289	1					
ANR	5011516	AssignmentExpression	current_filesize = 0		5011289	2		=			
ANR	5011517	Identifier	current_filesize		5011289	0					
ANR	5011518	PrimaryExpression	0		5011289	1					
ANR	5011519	IdentifierDeclStatement	StatWrapper sbuf ;	742:1:18013:18029	5011289	16	True				
ANR	5011520	IdentifierDecl	sbuf		5011289	0					
ANR	5011521	IdentifierDeclType	StatWrapper		5011289	0					
ANR	5011522	Identifier	sbuf		5011289	1					
ANR	5011523	IfStatement	if ( sbuf . Stat ( fileno ( m_global_fp ) ) )		5011289	17					
ANR	5011524	Condition	sbuf . Stat ( fileno ( m_global_fp ) )	743:6:18037:18068	5011289	0	True				
ANR	5011525	CallExpression	sbuf . Stat ( fileno ( m_global_fp ) )		5011289	0					
ANR	5011526	Callee	sbuf . Stat		5011289	0					
ANR	5011527	MemberAccess	sbuf . Stat		5011289	0					
ANR	5011528	Identifier	sbuf		5011289	0					
ANR	5011529	Identifier	Stat		5011289	1					
ANR	5011530	ArgumentList	fileno ( m_global_fp )		5011289	1					
ANR	5011531	Argument	fileno ( m_global_fp )		5011289	0					
ANR	5011532	CallExpression	fileno ( m_global_fp )		5011289	0					
ANR	5011533	Callee	fileno		5011289	0					
ANR	5011534	Identifier	fileno		5011289	0					
ANR	5011535	ArgumentList	m_global_fp		5011289	1					
ANR	5011536	Argument	m_global_fp		5011289	0					
ANR	5011537	Identifier	m_global_fp		5011289	0					
ANR	5011538	CompoundStatement		76:41:2002:2002	5011289	1					
ANR	5011539	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog Failed to stat file handle\\n"" )"	744:2:18076:18140	5011289	0	True				
ANR	5011540	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog Failed to stat file handle\\n"" )"		5011289	0					
ANR	5011541	Callee	dprintf		5011289	0					
ANR	5011542	Identifier	dprintf		5011289	0					
ANR	5011543	ArgumentList	D_ALWAYS		5011289	1					
ANR	5011544	Argument	D_ALWAYS		5011289	0					
ANR	5011545	Identifier	D_ALWAYS		5011289	0					
ANR	5011546	Argument	"""WriteUserLog Failed to stat file handle\\n"""		5011289	1					
ANR	5011547	PrimaryExpression	"""WriteUserLog Failed to stat file handle\\n"""		5011289	0					
ANR	5011548	ElseStatement	else		5011289	0					
ANR	5011549	CompoundStatement		79:6:2081:2081	5011289	0					
ANR	5011550	ExpressionStatement	current_filesize = sbuf . GetBuf ( ) -> st_size	747:2:18155:18196	5011289	0	True				
ANR	5011551	AssignmentExpression	current_filesize = sbuf . GetBuf ( ) -> st_size		5011289	0		=			
ANR	5011552	Identifier	current_filesize		5011289	0					
ANR	5011553	PtrMemberAccess	sbuf . GetBuf ( ) -> st_size		5011289	1					
ANR	5011554	CallExpression	sbuf . GetBuf ( )		5011289	0					
ANR	5011555	Callee	sbuf . GetBuf		5011289	0					
ANR	5011556	MemberAccess	sbuf . GetBuf		5011289	0					
ANR	5011557	Identifier	sbuf		5011289	0					
ANR	5011558	Identifier	GetBuf		5011289	1					
ANR	5011559	ArgumentList			5011289	1					
ANR	5011560	Identifier	st_size		5011289	1					
ANR	5011561	IfStatement	if ( ! globalRotationStarting ( ( unsigned long ) current_filesize ) )		5011289	18					
ANR	5011562	Condition	! globalRotationStarting ( ( unsigned long ) current_filesize )	752:6:18256:18314	5011289	0	True				
ANR	5011563	UnaryOperationExpression	! globalRotationStarting ( ( unsigned long ) current_filesize )		5011289	0					
ANR	5011564	UnaryOperator	!		5011289	0					
ANR	5011565	CallExpression	globalRotationStarting ( ( unsigned long ) current_filesize )		5011289	1					
ANR	5011566	Callee	globalRotationStarting		5011289	0					
ANR	5011567	Identifier	globalRotationStarting		5011289	0					
ANR	5011568	ArgumentList	( unsigned long ) current_filesize		5011289	1					
ANR	5011569	Argument	( unsigned long ) current_filesize		5011289	0					
ANR	5011570	CastExpression	( unsigned long ) current_filesize		5011289	0					
ANR	5011571	CastTarget	unsigned long		5011289	0					
ANR	5011572	Identifier	current_filesize		5011289	1					
ANR	5011573	CompoundStatement		85:68:2248:2248	5011289	1					
ANR	5011574	ExpressionStatement	m_rotation_lock -> release ( )	753:2:18322:18349	5011289	0	True				
ANR	5011575	CallExpression	m_rotation_lock -> release ( )		5011289	0					
ANR	5011576	Callee	m_rotation_lock -> release		5011289	0					
ANR	5011577	PtrMemberAccess	m_rotation_lock -> release		5011289	0					
ANR	5011578	Identifier	m_rotation_lock		5011289	0					
ANR	5011579	Identifier	release		5011289	1					
ANR	5011580	ArgumentList			5011289	1					
ANR	5011581	ReturnStatement	return false ;	754:2:18353:18365	5011289	1	True				
ANR	5011582	Identifier	false		5011289	0					
ANR	5011583	CompoundStatement		93:2:2363:2389	5011289	19					
ANR	5011584	IdentifierDeclStatement	StatWrapper swrap ( m_global_path ) ;	759:2:18395:18429	5011289	0	True				
ANR	5011585	IdentifierDecl	swrap ( m_global_path )		5011289	0					
ANR	5011586	IdentifierDeclType	StatWrapper		5011289	0					
ANR	5011587	Identifier	swrap		5011289	1					
ANR	5011588	Identifier	m_global_path		5011289	2					
ANR	5011589	IdentifierDeclStatement	UtcTime start_time ( true ) ;	760:2:18433:18459	5011289	1	True				
ANR	5011590	IdentifierDecl	start_time ( true )		5011289	0					
ANR	5011591	IdentifierDeclType	UtcTime		5011289	0					
ANR	5011592	Identifier	start_time		5011289	1					
ANR	5011593	Identifier	true		5011289	2					
ANR	5011594	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Rotating inode #%ld @ %.6f (stat @ %.6f)\\n"" , ( long ) swrap . GetBuf ( ) -> st_ino , start_time . combined ( ) , stat_time . combined ( ) )"	761:2:18463:18616	5011289	2	True				
ANR	5011595	CallExpression	"dprintf ( D_FULLDEBUG , ""Rotating inode #%ld @ %.6f (stat @ %.6f)\\n"" , ( long ) swrap . GetBuf ( ) -> st_ino , start_time . combined ( ) , stat_time . combined ( ) )"		5011289	0					
ANR	5011596	Callee	dprintf		5011289	0					
ANR	5011597	Identifier	dprintf		5011289	0					
ANR	5011598	ArgumentList	D_FULLDEBUG		5011289	1					
ANR	5011599	Argument	D_FULLDEBUG		5011289	0					
ANR	5011600	Identifier	D_FULLDEBUG		5011289	0					
ANR	5011601	Argument	"""Rotating inode #%ld @ %.6f (stat @ %.6f)\\n"""		5011289	1					
ANR	5011602	PrimaryExpression	"""Rotating inode #%ld @ %.6f (stat @ %.6f)\\n"""		5011289	0					
ANR	5011603	Argument	( long ) swrap . GetBuf ( ) -> st_ino		5011289	2					
ANR	5011604	CastExpression	( long ) swrap . GetBuf ( ) -> st_ino		5011289	0					
ANR	5011605	CastTarget	long		5011289	0					
ANR	5011606	PtrMemberAccess	swrap . GetBuf ( ) -> st_ino		5011289	1					
ANR	5011607	CallExpression	swrap . GetBuf ( )		5011289	0					
ANR	5011608	Callee	swrap . GetBuf		5011289	0					
ANR	5011609	MemberAccess	swrap . GetBuf		5011289	0					
ANR	5011610	Identifier	swrap		5011289	0					
ANR	5011611	Identifier	GetBuf		5011289	1					
ANR	5011612	ArgumentList			5011289	1					
ANR	5011613	Identifier	st_ino		5011289	1					
ANR	5011614	Argument	start_time . combined ( )		5011289	3					
ANR	5011615	CallExpression	start_time . combined ( )		5011289	0					
ANR	5011616	Callee	start_time . combined		5011289	0					
ANR	5011617	MemberAccess	start_time . combined		5011289	0					
ANR	5011618	Identifier	start_time		5011289	0					
ANR	5011619	Identifier	combined		5011289	1					
ANR	5011620	ArgumentList			5011289	1					
ANR	5011621	Argument	stat_time . combined ( )		5011289	4					
ANR	5011622	CallExpression	stat_time . combined ( )		5011289	0					
ANR	5011623	Callee	stat_time . combined		5011289	0					
ANR	5011624	MemberAccess	stat_time . combined		5011289	0					
ANR	5011625	Identifier	stat_time		5011289	0					
ANR	5011626	Identifier	combined		5011289	1					
ANR	5011627	ArgumentList			5011289	1					
ANR	5011628	ExpressionStatement	m_global_lock -> display ( )	764:2:18620:18644	5011289	3	True				
ANR	5011629	CallExpression	m_global_lock -> display ( )		5011289	0					
ANR	5011630	Callee	m_global_lock -> display		5011289	0					
ANR	5011631	PtrMemberAccess	m_global_lock -> display		5011289	0					
ANR	5011632	Identifier	m_global_lock		5011289	0					
ANR	5011633	Identifier	display		5011289	1					
ANR	5011634	ArgumentList			5011289	1					
ANR	5011635	IdentifierDeclStatement	"FILE * fp = safe_fopen_wrapper_follow ( m_global_path , ""r"" ) ;"	769:1:18714:18772	5011289	20	True				
ANR	5011636	IdentifierDecl	"* fp = safe_fopen_wrapper_follow ( m_global_path , ""r"" )"		5011289	0					
ANR	5011637	IdentifierDeclType	FILE *		5011289	0					
ANR	5011638	Identifier	fp		5011289	1					
ANR	5011639	AssignmentExpression	"* fp = safe_fopen_wrapper_follow ( m_global_path , ""r"" )"		5011289	2		=			
ANR	5011640	Identifier	fp		5011289	0					
ANR	5011641	CallExpression	"safe_fopen_wrapper_follow ( m_global_path , ""r"" )"		5011289	1					
ANR	5011642	Callee	safe_fopen_wrapper_follow		5011289	0					
ANR	5011643	Identifier	safe_fopen_wrapper_follow		5011289	0					
ANR	5011644	ArgumentList	m_global_path		5011289	1					
ANR	5011645	Argument	m_global_path		5011289	0					
ANR	5011646	Identifier	m_global_path		5011289	0					
ANR	5011647	Argument	"""r"""		5011289	1					
ANR	5011648	PrimaryExpression	"""r"""		5011289	0					
ANR	5011649	IfStatement	if ( ! fp )		5011289	21					
ANR	5011650	Condition	! fp	770:6:18780:18782	5011289	0	True				
ANR	5011651	UnaryOperationExpression	! fp		5011289	0					
ANR	5011652	UnaryOperator	!		5011289	0					
ANR	5011653	Identifier	fp		5011289	1					
ANR	5011654	CompoundStatement		103:12:2716:2716	5011289	1					
ANR	5011655	Statement	dprintf	771:2:18790:18796	5011289	0	True				
ANR	5011656	Statement	(	771:9:18797:18797	5011289	1	True				
ANR	5011657	Statement	D_ALWAYS	771:11:18799:18806	5011289	2	True				
ANR	5011658	Statement	","	771:19:18807:18807	5011289	3	True				
ANR	5011659	Statement	"""WriteUserLog: """	772:5:18814:18829	5011289	4	True				
ANR	5011660	Statement	"""safe_fopen_wrapper_follow(\\""%s\\"") failed - errno %d (%s)\\n"""	773:5:18836:18895	5011289	5	True				
ANR	5011661	Statement	","	773:65:18896:18896	5011289	6	True				
ANR	5011662	Statement	m_global_path	774:5:18903:18915	5011289	7	True				
ANR	5011663	Statement	","	774:18:18916:18916	5011289	8	True				
ANR	5011664	Statement	errno	774:20:18918:18922	5011289	9	True				
ANR	5011665	Statement	","	774:25:18923:18923	5011289	10	True				
ANR	5011666	Statement	strerror	774:27:18925:18932	5011289	11	True				
ANR	5011667	Statement	(	774:35:18933:18933	5011289	12	True				
ANR	5011668	Statement	errno	774:36:18934:18938	5011289	13	True				
ANR	5011669	Statement	)	774:41:18939:18939	5011289	14	True				
ANR	5011670	Statement	)	774:43:18941:18941	5011289	15	True				
ANR	5011671	ExpressionStatement		774:44:18942:18942	5011289	16	True				
ANR	5011672	ElseStatement	else		5011289	0					
ANR	5011673	CompoundStatement		110:2:2887:2940	5011289	0					
ANR	5011674	IdentifierDeclStatement	"ReadUserLog log_reader ( fp , m_global_use_xml , false ) ;"	777:2:18957:19010	5011289	0	True				
ANR	5011675	IdentifierDecl	"log_reader ( fp , m_global_use_xml , false )"		5011289	0					
ANR	5011676	IdentifierDeclType	ReadUserLog		5011289	0					
ANR	5011677	Identifier	log_reader		5011289	1					
ANR	5011678	Expression	"fp , m_global_use_xml , false"		5011289	2					
ANR	5011679	Identifier	fp		5011289	0					
ANR	5011680	Expression	"m_global_use_xml , false"		5011289	1					
ANR	5011681	Identifier	m_global_use_xml		5011289	0					
ANR	5011682	Identifier	false		5011289	1					
ANR	5011683	IfStatement	if ( header_reader . Read ( log_reader ) != ULOG_OK )		5011289	1					
ANR	5011684	Condition	header_reader . Read ( log_reader ) != ULOG_OK	778:7:19019:19061	5011289	0	True				
ANR	5011685	EqualityExpression	header_reader . Read ( log_reader ) != ULOG_OK		5011289	0		!=			
ANR	5011686	CallExpression	header_reader . Read ( log_reader )		5011289	0					
ANR	5011687	Callee	header_reader . Read		5011289	0					
ANR	5011688	MemberAccess	header_reader . Read		5011289	0					
ANR	5011689	Identifier	header_reader		5011289	0					
ANR	5011690	Identifier	Read		5011289	1					
ANR	5011691	ArgumentList	log_reader		5011289	1					
ANR	5011692	Argument	log_reader		5011289	0					
ANR	5011693	Identifier	log_reader		5011289	0					
ANR	5011694	Identifier	ULOG_OK		5011289	1					
ANR	5011695	CompoundStatement		111:53:2995:2995	5011289	1					
ANR	5011696	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog: Error reading header of \\""%s\\""\\n"" , m_global_path )"	779:3:19070:19166	5011289	0	True				
ANR	5011697	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog: Error reading header of \\""%s\\""\\n"" , m_global_path )"		5011289	0					
ANR	5011698	Callee	dprintf		5011289	0					
ANR	5011699	Identifier	dprintf		5011289	0					
ANR	5011700	ArgumentList	D_ALWAYS		5011289	1					
ANR	5011701	Argument	D_ALWAYS		5011289	0					
ANR	5011702	Identifier	D_ALWAYS		5011289	0					
ANR	5011703	Argument	"""WriteUserLog: Error reading header of \\""%s\\""\\n"""		5011289	1					
ANR	5011704	PrimaryExpression	"""WriteUserLog: Error reading header of \\""%s\\""\\n"""		5011289	0					
ANR	5011705	Argument	m_global_path		5011289	2					
ANR	5011706	Identifier	m_global_path		5011289	0					
ANR	5011707	ElseStatement	else		5011289	0					
ANR	5011708	CompoundStatement		117:3:3114:3124	5011289	0					
ANR	5011709	IdentifierDeclStatement	MyString s ;	784:3:19184:19194	5011289	0	True				
ANR	5011710	IdentifierDecl	s		5011289	0					
ANR	5011711	IdentifierDeclType	MyString		5011289	0					
ANR	5011712	Identifier	s		5011289	1					
ANR	5011713	ExpressionStatement	"s . sprintf ( ""read %s header:"" , m_global_path )"	785:3:19199:19244	5011289	1	True				
ANR	5011714	CallExpression	"s . sprintf ( ""read %s header:"" , m_global_path )"		5011289	0					
ANR	5011715	Callee	s . sprintf		5011289	0					
ANR	5011716	MemberAccess	s . sprintf		5011289	0					
ANR	5011717	Identifier	s		5011289	0					
ANR	5011718	Identifier	sprintf		5011289	1					
ANR	5011719	ArgumentList	"""read %s header:"""		5011289	1					
ANR	5011720	Argument	"""read %s header:"""		5011289	0					
ANR	5011721	PrimaryExpression	"""read %s header:"""		5011289	0					
ANR	5011722	Argument	m_global_path		5011289	1					
ANR	5011723	Identifier	m_global_path		5011289	0					
ANR	5011724	ExpressionStatement	"header_reader . dprint ( D_FULLDEBUG , s )"	786:3:19249:19287	5011289	2	True				
ANR	5011725	CallExpression	"header_reader . dprint ( D_FULLDEBUG , s )"		5011289	0					
ANR	5011726	Callee	header_reader . dprint		5011289	0					
ANR	5011727	MemberAccess	header_reader . dprint		5011289	0					
ANR	5011728	Identifier	header_reader		5011289	0					
ANR	5011729	Identifier	dprint		5011289	1					
ANR	5011730	ArgumentList	D_FULLDEBUG		5011289	1					
ANR	5011731	Argument	D_FULLDEBUG		5011289	0					
ANR	5011732	Identifier	D_FULLDEBUG		5011289	0					
ANR	5011733	Argument	s		5011289	1					
ANR	5011734	Identifier	s		5011289	0					
ANR	5011735	IfStatement	if ( m_global_count_events )		5011289	2					
ANR	5011736	Condition	m_global_count_events	789:7:19301:19321	5011289	0	True				
ANR	5011737	Identifier	m_global_count_events		5011289	0					
ANR	5011738	CompoundStatement		144:13:3787:3913	5011289	1					
ANR	5011739	IdentifierDeclStatement	int events = 0 ;	790:3:19330:19345	5011289	0	True				
ANR	5011740	IdentifierDecl	events = 0		5011289	0					
ANR	5011741	IdentifierDeclType	int		5011289	0					
ANR	5011742	Identifier	events		5011289	1					
ANR	5011743	AssignmentExpression	events = 0		5011289	2		=			
ANR	5011744	Identifier	events		5011289	0					
ANR	5011745	PrimaryExpression	0		5011289	1					
ANR	5011746	Statement	if	791:10:19357:19358	5011289	1	True				
ANR	5011747	IdentifierDeclStatement	ROTATION_TRACE UtcTime time1 ( true ) ;	791:13:19360:19399	5011289	2	True				
ANR	5011748	IdentifierDecl	time1 ( true )		5011289	0					
ANR	5011749	IdentifierDeclType	ROTATION_TRACE UtcTime		5011289	0					
ANR	5011750	Identifier	time1		5011289	1					
ANR	5011751	Identifier	true		5011289	2					
ANR	5011752	Statement	endif	793:10:19411:19415	5011289	3	True				
ANR	5011753	WhileStatement	while ( 1 )		5011289	4					
ANR	5011754	Condition	1	794:10:19427:19427	5011289	0	True				
ANR	5011755	PrimaryExpression	1		5011289	0					
ANR	5011756	CompoundStatement		129:4:3397:3453	5011289	1					
ANR	5011757	IdentifierDeclStatement	ULogEvent * event = NULL ;	795:4:19437:19461	5011289	0	True				
ANR	5011758	IdentifierDecl	* event = NULL		5011289	0					
ANR	5011759	IdentifierDeclType	ULogEvent *		5011289	0					
ANR	5011760	Identifier	event		5011289	1					
ANR	5011761	AssignmentExpression	* event = NULL		5011289	2		=			
ANR	5011762	Identifier	NULL		5011289	0					
ANR	5011763	Identifier	NULL		5011289	1					
ANR	5011764	IdentifierDeclStatement	ULogEventOutcome outcome = log_reader . readEvent ( event ) ;	796:4:19467:19523	5011289	1	True				
ANR	5011765	IdentifierDecl	outcome = log_reader . readEvent ( event )		5011289	0					
ANR	5011766	IdentifierDeclType	ULogEventOutcome		5011289	0					
ANR	5011767	Identifier	outcome		5011289	1					
ANR	5011768	AssignmentExpression	outcome = log_reader . readEvent ( event )		5011289	2		=			
ANR	5011769	Identifier	outcome		5011289	0					
ANR	5011770	CallExpression	log_reader . readEvent ( event )		5011289	1					
ANR	5011771	Callee	log_reader . readEvent		5011289	0					
ANR	5011772	MemberAccess	log_reader . readEvent		5011289	0					
ANR	5011773	Identifier	log_reader		5011289	0					
ANR	5011774	Identifier	readEvent		5011289	1					
ANR	5011775	ArgumentList	event		5011289	1					
ANR	5011776	Argument	event		5011289	0					
ANR	5011777	Identifier	event		5011289	0					
ANR	5011778	IfStatement	if ( ULOG_OK != outcome )		5011289	2					
ANR	5011779	Condition	ULOG_OK != outcome	797:9:19534:19551	5011289	0	True				
ANR	5011780	EqualityExpression	ULOG_OK != outcome		5011289	0		!=			
ANR	5011781	Identifier	ULOG_OK		5011289	0					
ANR	5011782	Identifier	outcome		5011289	1					
ANR	5011783	CompoundStatement		130:30:3485:3485	5011289	1					
ANR	5011784	BreakStatement	break ;	798:5:19562:19567	5011289	0	True				
ANR	5011785	ExpressionStatement	events ++	800:4:19579:19587	5011289	3	True				
ANR	5011786	PostIncDecOperationExpression	events ++		5011289	0					
ANR	5011787	Identifier	events		5011289	0					
ANR	5011788	IncDec	++		5011289	1					
ANR	5011789	Statement	delete	801:4:19593:19598	5011289	4	True				
ANR	5011790	ExpressionStatement	event	801:11:19600:19605	5011289	5	True				
ANR	5011791	Identifier	event		5011289	0					
ANR	5011792	Statement	if	803:10:19622:19623	5011289	5	True				
ANR	5011793	IdentifierDeclStatement	ROTATION_TRACE UtcTime time2 ( true ) ;	803:13:19625:19664	5011289	6	True				
ANR	5011794	IdentifierDecl	time2 ( true )		5011289	0					
ANR	5011795	IdentifierDeclType	ROTATION_TRACE UtcTime		5011289	0					
ANR	5011796	Identifier	time2		5011289	1					
ANR	5011797	Identifier	true		5011289	2					
ANR	5011798	IdentifierDeclStatement	double elapsed = time2 . difference ( time1 ) ;	805:3:19669:19711	5011289	7	True				
ANR	5011799	IdentifierDecl	elapsed = time2 . difference ( time1 )		5011289	0					
ANR	5011800	IdentifierDeclType	double		5011289	0					
ANR	5011801	Identifier	elapsed		5011289	1					
ANR	5011802	AssignmentExpression	elapsed = time2 . difference ( time1 )		5011289	2		=			
ANR	5011803	Identifier	elapsed		5011289	0					
ANR	5011804	CallExpression	time2 . difference ( time1 )		5011289	1					
ANR	5011805	Callee	time2 . difference		5011289	0					
ANR	5011806	MemberAccess	time2 . difference		5011289	0					
ANR	5011807	Identifier	time2		5011289	0					
ANR	5011808	Identifier	difference		5011289	1					
ANR	5011809	ArgumentList	time1		5011289	1					
ANR	5011810	Argument	time1		5011289	0					
ANR	5011811	Identifier	time1		5011289	0					
ANR	5011812	IdentifierDeclStatement	double eps = ( events / elapsed ) ;	806:3:19716:19749	5011289	8	True				
ANR	5011813	IdentifierDecl	eps = ( events / elapsed )		5011289	0					
ANR	5011814	IdentifierDeclType	double		5011289	0					
ANR	5011815	Identifier	eps		5011289	1					
ANR	5011816	AssignmentExpression	eps = ( events / elapsed )		5011289	2		=			
ANR	5011817	Identifier	eps		5011289	0					
ANR	5011818	MultiplicativeExpression	events / elapsed		5011289	1		/			
ANR	5011819	Identifier	events		5011289	0					
ANR	5011820	Identifier	elapsed		5011289	1					
ANR	5011821	IdentifierDeclStatement	endif globalRotationEvents ( events ) ;	807:10:19761:19801	5011289	9	True				
ANR	5011822	IdentifierDecl	globalRotationEvents ( events )		5011289	0					
ANR	5011823	IdentifierDeclType	endif		5011289	0					
ANR	5011824	Identifier	globalRotationEvents		5011289	1					
ANR	5011825	Identifier	events		5011289	2					
ANR	5011826	ExpressionStatement	header_reader . setNumEvents ( events )	810:3:19806:19842	5011289	10	True				
ANR	5011827	CallExpression	header_reader . setNumEvents ( events )		5011289	0					
ANR	5011828	Callee	header_reader . setNumEvents		5011289	0					
ANR	5011829	MemberAccess	header_reader . setNumEvents		5011289	0					
ANR	5011830	Identifier	header_reader		5011289	0					
ANR	5011831	Identifier	setNumEvents		5011289	1					
ANR	5011832	ArgumentList	events		5011289	1					
ANR	5011833	Argument	events		5011289	0					
ANR	5011834	Identifier	events		5011289	0					
ANR	5011835	Statement	if	811:10:19854:19855	5011289	11	True				
ANR	5011836	IdentifierDeclStatement	"ROTATION_TRACE dprintf ( D_FULLDEBUG , ""WriteUserLog: Read %d events in %.4fs = %.0f/s\\n"" , events , elapsed , eps ) ;"	811:13:19857:19983	5011289	12	True				
ANR	5011837	IdentifierDecl	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Read %d events in %.4fs = %.0f/s\\n"" , events , elapsed , eps )"		5011289	0					
ANR	5011838	IdentifierDeclType	ROTATION_TRACE		5011289	0					
ANR	5011839	Identifier	dprintf		5011289	1					
ANR	5011840	Expression	"D_FULLDEBUG , ""WriteUserLog: Read %d events in %.4fs = %.0f/s\\n"" , events , elapsed , eps"		5011289	2					
ANR	5011841	Identifier	D_FULLDEBUG		5011289	0					
ANR	5011842	Expression	"""WriteUserLog: Read %d events in %.4fs = %.0f/s\\n"" , events , elapsed , eps"		5011289	1					
ANR	5011843	PrimaryExpression	"""WriteUserLog: Read %d events in %.4fs = %.0f/s\\n"""		5011289	0					
ANR	5011844	Expression	"events , elapsed , eps"		5011289	1					
ANR	5011845	Identifier	events		5011289	0					
ANR	5011846	Expression	"elapsed , eps"		5011289	1					
ANR	5011847	Identifier	elapsed		5011289	0					
ANR	5011848	Identifier	eps		5011289	1					
ANR	5011849	Statement	endif	815:10:19995:19999	5011289	13	True				
ANR	5011850	ExpressionStatement	fclose ( fp )	817:2:20007:20019	5011289	3	True				
ANR	5011851	CallExpression	fclose ( fp )		5011289	0					
ANR	5011852	Callee	fclose		5011289	0					
ANR	5011853	Identifier	fclose		5011289	0					
ANR	5011854	ArgumentList	fp		5011289	1					
ANR	5011855	Argument	fp		5011289	0					
ANR	5011856	Identifier	fp		5011289	0					
ANR	5011857	ExpressionStatement	header_reader . setSize ( current_filesize )	819:1:20025:20066	5011289	22	True				
ANR	5011858	CallExpression	header_reader . setSize ( current_filesize )		5011289	0					
ANR	5011859	Callee	header_reader . setSize		5011289	0					
ANR	5011860	MemberAccess	header_reader . setSize		5011289	0					
ANR	5011861	Identifier	header_reader		5011289	0					
ANR	5011862	Identifier	setSize		5011289	1					
ANR	5011863	ArgumentList	current_filesize		5011289	1					
ANR	5011864	Argument	current_filesize		5011289	0					
ANR	5011865	Identifier	current_filesize		5011289	0					
ANR	5011866	IdentifierDeclStatement	FILE * header_fp = NULL ;	822:1:20126:20150	5011289	23	True				
ANR	5011867	IdentifierDecl	* header_fp = NULL		5011289	0					
ANR	5011868	IdentifierDeclType	FILE *		5011289	0					
ANR	5011869	Identifier	header_fp		5011289	1					
ANR	5011870	AssignmentExpression	* header_fp = NULL		5011289	2		=			
ANR	5011871	Identifier	NULL		5011289	0					
ANR	5011872	Identifier	NULL		5011289	1					
ANR	5011873	IdentifierDeclStatement	FileLockBase * fake_lock = NULL ;	823:1:20153:20183	5011289	24	True				
ANR	5011874	IdentifierDecl	* fake_lock = NULL		5011289	0					
ANR	5011875	IdentifierDeclType	FileLockBase *		5011289	0					
ANR	5011876	Identifier	fake_lock		5011289	1					
ANR	5011877	AssignmentExpression	* fake_lock = NULL		5011289	2		=			
ANR	5011878	Identifier	NULL		5011289	0					
ANR	5011879	Identifier	NULL		5011289	1					
ANR	5011880	IfStatement	"if ( ! openFile ( m_global_path , false , false , false , fake_lock , header_fp ) )"		5011289	25					
ANR	5011881	Condition	"! openFile ( m_global_path , false , false , false , fake_lock , header_fp )"	824:5:20190:20256	5011289	0	True				
ANR	5011882	UnaryOperationExpression	"! openFile ( m_global_path , false , false , false , fake_lock , header_fp )"		5011289	0					
ANR	5011883	UnaryOperator	!		5011289	0					
ANR	5011884	CallExpression	"openFile ( m_global_path , false , false , false , fake_lock , header_fp )"		5011289	1					
ANR	5011885	Callee	openFile		5011289	0					
ANR	5011886	Identifier	openFile		5011289	0					
ANR	5011887	ArgumentList	m_global_path		5011289	1					
ANR	5011888	Argument	m_global_path		5011289	0					
ANR	5011889	Identifier	m_global_path		5011289	0					
ANR	5011890	Argument	false		5011289	1					
ANR	5011891	Identifier	false		5011289	0					
ANR	5011892	Argument	false		5011289	2					
ANR	5011893	Identifier	false		5011289	0					
ANR	5011894	Argument	false		5011289	3					
ANR	5011895	Identifier	false		5011289	0					
ANR	5011896	Argument	fake_lock		5011289	4					
ANR	5011897	Identifier	fake_lock		5011289	0					
ANR	5011898	Argument	header_fp		5011289	5					
ANR	5011899	Identifier	header_fp		5011289	0					
ANR	5011900	CompoundStatement		157:75:4190:4190	5011289	1					
ANR	5011901	Statement	dprintf	825:2:20264:20270	5011289	0	True				
ANR	5011902	Statement	(	825:9:20271:20271	5011289	1	True				
ANR	5011903	Statement	D_ALWAYS	825:11:20273:20280	5011289	2	True				
ANR	5011904	Statement	","	825:19:20281:20281	5011289	3	True				
ANR	5011905	Statement	"""WriteUserLog: """	826:5:20288:20303	5011289	4	True				
ANR	5011906	Statement	"""failed to open %s for header rewrite: %d (%s)\\n"""	827:5:20310:20358	5011289	5	True				
ANR	5011907	Statement	","	827:54:20359:20359	5011289	6	True				
ANR	5011908	Statement	m_global_path	828:5:20366:20378	5011289	7	True				
ANR	5011909	Statement	","	828:18:20379:20379	5011289	8	True				
ANR	5011910	Statement	errno	828:20:20381:20385	5011289	9	True				
ANR	5011911	Statement	","	828:25:20386:20386	5011289	10	True				
ANR	5011912	Statement	strerror	828:27:20388:20395	5011289	11	True				
ANR	5011913	Statement	(	828:35:20396:20396	5011289	12	True				
ANR	5011914	Statement	errno	828:36:20397:20401	5011289	13	True				
ANR	5011915	Statement	)	828:41:20402:20402	5011289	14	True				
ANR	5011916	Statement	)	828:43:20404:20404	5011289	15	True				
ANR	5011917	ExpressionStatement		828:44:20405:20405	5011289	16	True				
ANR	5011918	IdentifierDeclStatement	WriteUserLogHeader header_writer ( header_reader ) ;	830:1:20411:20460	5011289	26	True				
ANR	5011919	IdentifierDecl	header_writer ( header_reader )		5011289	0					
ANR	5011920	IdentifierDeclType	WriteUserLogHeader		5011289	0					
ANR	5011921	Identifier	header_writer		5011289	1					
ANR	5011922	Identifier	header_reader		5011289	2					
ANR	5011923	ExpressionStatement	header_writer . setMaxRotation ( m_global_max_rotations )	831:1:20463:20517	5011289	27	True				
ANR	5011924	CallExpression	header_writer . setMaxRotation ( m_global_max_rotations )		5011289	0					
ANR	5011925	Callee	header_writer . setMaxRotation		5011289	0					
ANR	5011926	MemberAccess	header_writer . setMaxRotation		5011289	0					
ANR	5011927	Identifier	header_writer		5011289	0					
ANR	5011928	Identifier	setMaxRotation		5011289	1					
ANR	5011929	ArgumentList	m_global_max_rotations		5011289	1					
ANR	5011930	Argument	m_global_max_rotations		5011289	0					
ANR	5011931	Identifier	m_global_max_rotations		5011289	0					
ANR	5011932	IfStatement	if ( m_creator_name )		5011289	28					
ANR	5011933	Condition	m_creator_name	832:6:20525:20538	5011289	0	True				
ANR	5011934	Identifier	m_creator_name		5011289	0					
ANR	5011935	CompoundStatement		165:23:4472:4472	5011289	1					
ANR	5011936	ExpressionStatement	header_writer . setCreatorName ( m_creator_name )	833:2:20546:20592	5011289	0	True				
ANR	5011937	CallExpression	header_writer . setCreatorName ( m_creator_name )		5011289	0					
ANR	5011938	Callee	header_writer . setCreatorName		5011289	0					
ANR	5011939	MemberAccess	header_writer . setCreatorName		5011289	0					
ANR	5011940	Identifier	header_writer		5011289	0					
ANR	5011941	Identifier	setCreatorName		5011289	1					
ANR	5011942	ArgumentList	m_creator_name		5011289	1					
ANR	5011943	Argument	m_creator_name		5011289	0					
ANR	5011944	Identifier	m_creator_name		5011289	0					
ANR	5011945	IdentifierDeclStatement	MyString s ;	836:1:20599:20609	5011289	29	True				
ANR	5011946	IdentifierDecl	s		5011289	0					
ANR	5011947	IdentifierDeclType	MyString		5011289	0					
ANR	5011948	Identifier	s		5011289	1					
ANR	5011949	ExpressionStatement	"s . sprintf ( ""checkGlobalLogRotation(): %s"" , m_global_path )"	837:1:20612:20670	5011289	30	True				
ANR	5011950	CallExpression	"s . sprintf ( ""checkGlobalLogRotation(): %s"" , m_global_path )"		5011289	0					
ANR	5011951	Callee	s . sprintf		5011289	0					
ANR	5011952	MemberAccess	s . sprintf		5011289	0					
ANR	5011953	Identifier	s		5011289	0					
ANR	5011954	Identifier	sprintf		5011289	1					
ANR	5011955	ArgumentList	"""checkGlobalLogRotation(): %s"""		5011289	1					
ANR	5011956	Argument	"""checkGlobalLogRotation(): %s"""		5011289	0					
ANR	5011957	PrimaryExpression	"""checkGlobalLogRotation(): %s"""		5011289	0					
ANR	5011958	Argument	m_global_path		5011289	1					
ANR	5011959	Identifier	m_global_path		5011289	0					
ANR	5011960	ExpressionStatement	"header_writer . dprint ( D_FULLDEBUG , s )"	838:1:20673:20711	5011289	31	True				
ANR	5011961	CallExpression	"header_writer . dprint ( D_FULLDEBUG , s )"		5011289	0					
ANR	5011962	Callee	header_writer . dprint		5011289	0					
ANR	5011963	MemberAccess	header_writer . dprint		5011289	0					
ANR	5011964	Identifier	header_writer		5011289	0					
ANR	5011965	Identifier	dprint		5011289	1					
ANR	5011966	ArgumentList	D_FULLDEBUG		5011289	1					
ANR	5011967	Argument	D_FULLDEBUG		5011289	0					
ANR	5011968	Identifier	D_FULLDEBUG		5011289	0					
ANR	5011969	Argument	s		5011289	1					
ANR	5011970	Identifier	s		5011289	0					
ANR	5011971	Statement	if	841:2:20749:20750	5011289	32	True				
ANR	5011972	IdentifierDeclStatement	ROTATION_TRACE UtcTime now ( true ) ;	841:5:20752:20787	5011289	33	True				
ANR	5011973	IdentifierDecl	now ( true )		5011289	0					
ANR	5011974	IdentifierDeclType	ROTATION_TRACE UtcTime		5011289	0					
ANR	5011975	Identifier	now		5011289	1					
ANR	5011976	Identifier	true		5011289	2					
ANR	5011977	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Writing header to %s (%p) @ %.6f\\n"" , m_global_path , header_fp , now . combined ( ) )"	843:1:20790:20910	5011289	34	True				
ANR	5011978	CallExpression	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Writing header to %s (%p) @ %.6f\\n"" , m_global_path , header_fp , now . combined ( ) )"		5011289	0					
ANR	5011979	Callee	dprintf		5011289	0					
ANR	5011980	Identifier	dprintf		5011289	0					
ANR	5011981	ArgumentList	D_FULLDEBUG		5011289	1					
ANR	5011982	Argument	D_FULLDEBUG		5011289	0					
ANR	5011983	Identifier	D_FULLDEBUG		5011289	0					
ANR	5011984	Argument	"""WriteUserLog: Writing header to %s (%p) @ %.6f\\n"""		5011289	1					
ANR	5011985	PrimaryExpression	"""WriteUserLog: Writing header to %s (%p) @ %.6f\\n"""		5011289	0					
ANR	5011986	Argument	m_global_path		5011289	2					
ANR	5011987	Identifier	m_global_path		5011289	0					
ANR	5011988	Argument	header_fp		5011289	3					
ANR	5011989	Identifier	header_fp		5011289	0					
ANR	5011990	Argument	now . combined ( )		5011289	4					
ANR	5011991	CallExpression	now . combined ( )		5011289	0					
ANR	5011992	Callee	now . combined		5011289	0					
ANR	5011993	MemberAccess	now . combined		5011289	0					
ANR	5011994	Identifier	now		5011289	0					
ANR	5011995	Identifier	combined		5011289	1					
ANR	5011996	ArgumentList			5011289	1					
ANR	5011997	Statement	endif	845:2:20914:20918	5011289	35	True				
ANR	5011998	IfStatement	if ( header_fp )		5011289	36					
ANR	5011999	Condition	header_fp	846:6:20926:20934	5011289	0	True				
ANR	5012000	Identifier	header_fp		5011289	0					
ANR	5012001	CompoundStatement		184:2:4962:4975	5011289	1					
ANR	5012002	ExpressionStatement	rewind ( header_fp )	847:2:20942:20961	5011289	0	True				
ANR	5012003	CallExpression	rewind ( header_fp )		5011289	0					
ANR	5012004	Callee	rewind		5011289	0					
ANR	5012005	Identifier	rewind		5011289	0					
ANR	5012006	ArgumentList	header_fp		5011289	1					
ANR	5012007	Argument	header_fp		5011289	0					
ANR	5012008	Identifier	header_fp		5011289	0					
ANR	5012009	ExpressionStatement	"header_writer . Write ( * this , header_fp )"	848:2:20965:21004	5011289	1	True				
ANR	5012010	CallExpression	"header_writer . Write ( * this , header_fp )"		5011289	0					
ANR	5012011	Callee	header_writer . Write		5011289	0					
ANR	5012012	MemberAccess	header_writer . Write		5011289	0					
ANR	5012013	Identifier	header_writer		5011289	0					
ANR	5012014	Identifier	Write		5011289	1					
ANR	5012015	ArgumentList	* this		5011289	1					
ANR	5012016	Argument	* this		5011289	0					
ANR	5012017	UnaryOperationExpression	* this		5011289	0					
ANR	5012018	UnaryOperator	*		5011289	0					
ANR	5012019	Identifier	this		5011289	1					
ANR	5012020	Argument	header_fp		5011289	1					
ANR	5012021	Identifier	header_fp		5011289	0					
ANR	5012022	ExpressionStatement	fclose ( header_fp )	849:2:21008:21027	5011289	2	True				
ANR	5012023	CallExpression	fclose ( header_fp )		5011289	0					
ANR	5012024	Callee	fclose		5011289	0					
ANR	5012025	Identifier	fclose		5011289	0					
ANR	5012026	ArgumentList	header_fp		5011289	1					
ANR	5012027	Argument	header_fp		5011289	0					
ANR	5012028	Identifier	header_fp		5011289	0					
ANR	5012029	IdentifierDeclStatement	MyString tmps ;	851:2:21032:21045	5011289	3	True				
ANR	5012030	IdentifierDecl	tmps		5011289	0					
ANR	5012031	IdentifierDeclType	MyString		5011289	0					
ANR	5012032	Identifier	tmps		5011289	1					
ANR	5012033	ExpressionStatement	"tmps . sprintf ( ""WriteUserLog: Wrote header to %s"" , m_global_path )"	852:2:21049:21114	5011289	4	True				
ANR	5012034	CallExpression	"tmps . sprintf ( ""WriteUserLog: Wrote header to %s"" , m_global_path )"		5011289	0					
ANR	5012035	Callee	tmps . sprintf		5011289	0					
ANR	5012036	MemberAccess	tmps . sprintf		5011289	0					
ANR	5012037	Identifier	tmps		5011289	0					
ANR	5012038	Identifier	sprintf		5011289	1					
ANR	5012039	ArgumentList	"""WriteUserLog: Wrote header to %s"""		5011289	1					
ANR	5012040	Argument	"""WriteUserLog: Wrote header to %s"""		5011289	0					
ANR	5012041	PrimaryExpression	"""WriteUserLog: Wrote header to %s"""		5011289	0					
ANR	5012042	Argument	m_global_path		5011289	1					
ANR	5012043	Identifier	m_global_path		5011289	0					
ANR	5012044	ExpressionStatement	"header_writer . dprint ( D_FULLDEBUG , tmps )"	853:2:21118:21159	5011289	5	True				
ANR	5012045	CallExpression	"header_writer . dprint ( D_FULLDEBUG , tmps )"		5011289	0					
ANR	5012046	Callee	header_writer . dprint		5011289	0					
ANR	5012047	MemberAccess	header_writer . dprint		5011289	0					
ANR	5012048	Identifier	header_writer		5011289	0					
ANR	5012049	Identifier	dprint		5011289	1					
ANR	5012050	ArgumentList	D_FULLDEBUG		5011289	1					
ANR	5012051	Argument	D_FULLDEBUG		5011289	0					
ANR	5012052	Identifier	D_FULLDEBUG		5011289	0					
ANR	5012053	Argument	tmps		5011289	1					
ANR	5012054	Identifier	tmps		5011289	0					
ANR	5012055	IfStatement	if ( fake_lock )		5011289	37					
ANR	5012056	Condition	fake_lock	855:6:21170:21178	5011289	0	True				
ANR	5012057	Identifier	fake_lock		5011289	0					
ANR	5012058	CompoundStatement		188:18:5112:5112	5011289	1					
ANR	5012059	Statement	delete	856:2:21186:21191	5011289	0	True				
ANR	5012060	ExpressionStatement	fake_lock	856:9:21193:21202	5011289	1	True				
ANR	5012061	Identifier	fake_lock		5011289	0					
ANR	5012062	Statement	if	860:2:21232:21233	5011289	38	True				
ANR	5012063	IdentifierDeclStatement	ROTATION_TRACE UtcTime time1 ( true ) ;	860:5:21235:21272	5011289	39	True				
ANR	5012064	IdentifierDecl	time1 ( true )		5011289	0					
ANR	5012065	IdentifierDeclType	ROTATION_TRACE UtcTime		5011289	0					
ANR	5012066	Identifier	time1		5011289	1					
ANR	5012067	Identifier	true		5011289	2					
ANR	5012068	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Starting bulk rotation @ %.6f\\n"" , time1 . combined ( ) )"	862:1:21275:21372	5011289	40	True				
ANR	5012069	CallExpression	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Starting bulk rotation @ %.6f\\n"" , time1 . combined ( ) )"		5011289	0					
ANR	5012070	Callee	dprintf		5011289	0					
ANR	5012071	Identifier	dprintf		5011289	0					
ANR	5012072	ArgumentList	D_FULLDEBUG		5011289	1					
ANR	5012073	Argument	D_FULLDEBUG		5011289	0					
ANR	5012074	Identifier	D_FULLDEBUG		5011289	0					
ANR	5012075	Argument	"""WriteUserLog: Starting bulk rotation @ %.6f\\n"""		5011289	1					
ANR	5012076	PrimaryExpression	"""WriteUserLog: Starting bulk rotation @ %.6f\\n"""		5011289	0					
ANR	5012077	Argument	time1 . combined ( )		5011289	2					
ANR	5012078	CallExpression	time1 . combined ( )		5011289	0					
ANR	5012079	Callee	time1 . combined		5011289	0					
ANR	5012080	MemberAccess	time1 . combined		5011289	0					
ANR	5012081	Identifier	time1		5011289	0					
ANR	5012082	Identifier	combined		5011289	1					
ANR	5012083	ArgumentList			5011289	1					
ANR	5012084	IdentifierDeclStatement	endif MyString rotated ;	865:2:21376:21400	5011289	41	True				
ANR	5012085	IdentifierDecl	rotated		5011289	0					
ANR	5012086	IdentifierDeclType	endif MyString		5011289	0					
ANR	5012087	Identifier	rotated		5011289	1					
ANR	5012088	IdentifierDeclStatement	"int num_rotations = doRotation ( m_global_path , m_global_fp , rotated , m_global_max_rotations ) ;"	868:1:21403:21505	5011289	42	True				
ANR	5012089	IdentifierDecl	"num_rotations = doRotation ( m_global_path , m_global_fp , rotated , m_global_max_rotations )"		5011289	0					
ANR	5012090	IdentifierDeclType	int		5011289	0					
ANR	5012091	Identifier	num_rotations		5011289	1					
ANR	5012092	AssignmentExpression	"num_rotations = doRotation ( m_global_path , m_global_fp , rotated , m_global_max_rotations )"		5011289	2		=			
ANR	5012093	Identifier	num_rotations		5011289	0					
ANR	5012094	CallExpression	"doRotation ( m_global_path , m_global_fp , rotated , m_global_max_rotations )"		5011289	1					
ANR	5012095	Callee	doRotation		5011289	0					
ANR	5012096	Identifier	doRotation		5011289	0					
ANR	5012097	ArgumentList	m_global_path		5011289	1					
ANR	5012098	Argument	m_global_path		5011289	0					
ANR	5012099	Identifier	m_global_path		5011289	0					
ANR	5012100	Argument	m_global_fp		5011289	1					
ANR	5012101	Identifier	m_global_fp		5011289	0					
ANR	5012102	Argument	rotated		5011289	2					
ANR	5012103	Identifier	rotated		5011289	0					
ANR	5012104	Argument	m_global_max_rotations		5011289	3					
ANR	5012105	Identifier	m_global_max_rotations		5011289	0					
ANR	5012106	IfStatement	if ( num_rotations )		5011289	43					
ANR	5012107	Condition	num_rotations	870:6:21513:21525	5011289	0	True				
ANR	5012108	Identifier	num_rotations		5011289	0					
ANR	5012109	CompoundStatement		203:22:5459:5459	5011289	1					
ANR	5012110	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Rotated event log %s to %s at size %lu bytes\\n"" , m_global_path , rotated . Value ( ) , ( unsigned long ) current_filesize )"	871:2:21533:21695	5011289	0	True				
ANR	5012111	CallExpression	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Rotated event log %s to %s at size %lu bytes\\n"" , m_global_path , rotated . Value ( ) , ( unsigned long ) current_filesize )"		5011289	0					
ANR	5012112	Callee	dprintf		5011289	0					
ANR	5012113	Identifier	dprintf		5011289	0					
ANR	5012114	ArgumentList	D_FULLDEBUG		5011289	1					
ANR	5012115	Argument	D_FULLDEBUG		5011289	0					
ANR	5012116	Identifier	D_FULLDEBUG		5011289	0					
ANR	5012117	Argument	"""WriteUserLog: Rotated event log %s to %s at size %lu bytes\\n"""		5011289	1					
ANR	5012118	PrimaryExpression	"""WriteUserLog: Rotated event log %s to %s at size %lu bytes\\n"""		5011289	0					
ANR	5012119	Argument	m_global_path		5011289	2					
ANR	5012120	Identifier	m_global_path		5011289	0					
ANR	5012121	Argument	rotated . Value ( )		5011289	3					
ANR	5012122	CallExpression	rotated . Value ( )		5011289	0					
ANR	5012123	Callee	rotated . Value		5011289	0					
ANR	5012124	MemberAccess	rotated . Value		5011289	0					
ANR	5012125	Identifier	rotated		5011289	0					
ANR	5012126	Identifier	Value		5011289	1					
ANR	5012127	ArgumentList			5011289	1					
ANR	5012128	Argument	( unsigned long ) current_filesize		5011289	4					
ANR	5012129	CastExpression	( unsigned long ) current_filesize		5011289	0					
ANR	5012130	CastTarget	unsigned long		5011289	0					
ANR	5012131	Identifier	current_filesize		5011289	1					
ANR	5012132	Statement	if	877:2:21703:21704	5011289	44	True				
ANR	5012133	IdentifierDeclStatement	ROTATION_TRACE UtcTime end_time ( true ) ;	877:5:21706:21746	5011289	45	True				
ANR	5012134	IdentifierDecl	end_time ( true )		5011289	0					
ANR	5012135	IdentifierDeclType	ROTATION_TRACE UtcTime		5011289	0					
ANR	5012136	Identifier	end_time		5011289	1					
ANR	5012137	Identifier	true		5011289	2					
ANR	5012138	IfStatement	if ( num_rotations )		5011289	46					
ANR	5012139	Condition	num_rotations	879:6:21754:21766	5011289	0	True				
ANR	5012140	Identifier	num_rotations		5011289	0					
ANR	5012141	CompoundStatement		212:22:5700:5700	5011289	1					
ANR	5012142	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Done rotating files (inode = %ld) @ %.6f\\n"" , ( long ) swrap . GetBuf ( ) -> st_ino , end_time . combined ( ) )"	880:2:21774:21917	5011289	0	True				
ANR	5012143	CallExpression	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Done rotating files (inode = %ld) @ %.6f\\n"" , ( long ) swrap . GetBuf ( ) -> st_ino , end_time . combined ( ) )"		5011289	0					
ANR	5012144	Callee	dprintf		5011289	0					
ANR	5012145	Identifier	dprintf		5011289	0					
ANR	5012146	ArgumentList	D_FULLDEBUG		5011289	1					
ANR	5012147	Argument	D_FULLDEBUG		5011289	0					
ANR	5012148	Identifier	D_FULLDEBUG		5011289	0					
ANR	5012149	Argument	"""WriteUserLog: Done rotating files (inode = %ld) @ %.6f\\n"""		5011289	1					
ANR	5012150	PrimaryExpression	"""WriteUserLog: Done rotating files (inode = %ld) @ %.6f\\n"""		5011289	0					
ANR	5012151	Argument	( long ) swrap . GetBuf ( ) -> st_ino		5011289	2					
ANR	5012152	CastExpression	( long ) swrap . GetBuf ( ) -> st_ino		5011289	0					
ANR	5012153	CastTarget	long		5011289	0					
ANR	5012154	PtrMemberAccess	swrap . GetBuf ( ) -> st_ino		5011289	1					
ANR	5012155	CallExpression	swrap . GetBuf ( )		5011289	0					
ANR	5012156	Callee	swrap . GetBuf		5011289	0					
ANR	5012157	MemberAccess	swrap . GetBuf		5011289	0					
ANR	5012158	Identifier	swrap		5011289	0					
ANR	5012159	Identifier	GetBuf		5011289	1					
ANR	5012160	ArgumentList			5011289	1					
ANR	5012161	Identifier	st_ino		5011289	1					
ANR	5012162	Argument	end_time . combined ( )		5011289	3					
ANR	5012163	CallExpression	end_time . combined ( )		5011289	0					
ANR	5012164	Callee	end_time . combined		5011289	0					
ANR	5012165	MemberAccess	end_time . combined		5011289	0					
ANR	5012166	Identifier	end_time		5011289	0					
ANR	5012167	Identifier	combined		5011289	1					
ANR	5012168	ArgumentList			5011289	1					
ANR	5012169	IdentifierDeclStatement	double elapsed = end_time . difference ( time1 ) ;	884:1:21923:21968	5011289	47	True				
ANR	5012170	IdentifierDecl	elapsed = end_time . difference ( time1 )		5011289	0					
ANR	5012171	IdentifierDeclType	double		5011289	0					
ANR	5012172	Identifier	elapsed		5011289	1					
ANR	5012173	AssignmentExpression	elapsed = end_time . difference ( time1 )		5011289	2		=			
ANR	5012174	Identifier	elapsed		5011289	0					
ANR	5012175	CallExpression	end_time . difference ( time1 )		5011289	1					
ANR	5012176	Callee	end_time . difference		5011289	0					
ANR	5012177	MemberAccess	end_time . difference		5011289	0					
ANR	5012178	Identifier	end_time		5011289	0					
ANR	5012179	Identifier	difference		5011289	1					
ANR	5012180	ArgumentList	time1		5011289	1					
ANR	5012181	Argument	time1		5011289	0					
ANR	5012182	Identifier	time1		5011289	0					
ANR	5012183	IdentifierDeclStatement	double rps = ( num_rotations / elapsed ) ;	885:1:21971:22011	5011289	48	True				
ANR	5012184	IdentifierDecl	rps = ( num_rotations / elapsed )		5011289	0					
ANR	5012185	IdentifierDeclType	double		5011289	0					
ANR	5012186	Identifier	rps		5011289	1					
ANR	5012187	AssignmentExpression	rps = ( num_rotations / elapsed )		5011289	2		=			
ANR	5012188	Identifier	rps		5011289	0					
ANR	5012189	MultiplicativeExpression	num_rotations / elapsed		5011289	1		/			
ANR	5012190	Identifier	num_rotations		5011289	0					
ANR	5012191	Identifier	elapsed		5011289	1					
ANR	5012192	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Rotated %d files in %.4fs = %.0f/s\\n"" , num_rotations , elapsed , rps )"	886:1:22014:22127	5011289	49	True				
ANR	5012193	CallExpression	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Rotated %d files in %.4fs = %.0f/s\\n"" , num_rotations , elapsed , rps )"		5011289	0					
ANR	5012194	Callee	dprintf		5011289	0					
ANR	5012195	Identifier	dprintf		5011289	0					
ANR	5012196	ArgumentList	D_FULLDEBUG		5011289	1					
ANR	5012197	Argument	D_FULLDEBUG		5011289	0					
ANR	5012198	Identifier	D_FULLDEBUG		5011289	0					
ANR	5012199	Argument	"""WriteUserLog: Rotated %d files in %.4fs = %.0f/s\\n"""		5011289	1					
ANR	5012200	PrimaryExpression	"""WriteUserLog: Rotated %d files in %.4fs = %.0f/s\\n"""		5011289	0					
ANR	5012201	Argument	num_rotations		5011289	2					
ANR	5012202	Identifier	num_rotations		5011289	0					
ANR	5012203	Argument	elapsed		5011289	3					
ANR	5012204	Identifier	elapsed		5011289	0					
ANR	5012205	Argument	rps		5011289	4					
ANR	5012206	Identifier	rps		5011289	0					
ANR	5012207	IdentifierDeclStatement	endif globalLogRotated ( header_reader ) ;	889:2:22131:22241	5011289	50	True				
ANR	5012208	IdentifierDecl	globalLogRotated ( header_reader )		5011289	0					
ANR	5012209	IdentifierDeclType	endif		5011289	0					
ANR	5012210	Identifier	globalLogRotated		5011289	1					
ANR	5012211	Identifier	header_reader		5011289	2					
ANR	5012212	ExpressionStatement	"globalRotationComplete ( num_rotations , header_reader . getSequence ( ) , header_reader . getId ( ) )"	895:1:22294:22399	5011289	51	True				
ANR	5012213	CallExpression	"globalRotationComplete ( num_rotations , header_reader . getSequence ( ) , header_reader . getId ( ) )"		5011289	0					
ANR	5012214	Callee	globalRotationComplete		5011289	0					
ANR	5012215	Identifier	globalRotationComplete		5011289	0					
ANR	5012216	ArgumentList	num_rotations		5011289	1					
ANR	5012217	Argument	num_rotations		5011289	0					
ANR	5012218	Identifier	num_rotations		5011289	0					
ANR	5012219	Argument	header_reader . getSequence ( )		5011289	1					
ANR	5012220	CallExpression	header_reader . getSequence ( )		5011289	0					
ANR	5012221	Callee	header_reader . getSequence		5011289	0					
ANR	5012222	MemberAccess	header_reader . getSequence		5011289	0					
ANR	5012223	Identifier	header_reader		5011289	0					
ANR	5012224	Identifier	getSequence		5011289	1					
ANR	5012225	ArgumentList			5011289	1					
ANR	5012226	Argument	header_reader . getId ( )		5011289	2					
ANR	5012227	CallExpression	header_reader . getId ( )		5011289	0					
ANR	5012228	Callee	header_reader . getId		5011289	0					
ANR	5012229	MemberAccess	header_reader . getId		5011289	0					
ANR	5012230	Identifier	header_reader		5011289	0					
ANR	5012231	Identifier	getId		5011289	1					
ANR	5012232	ArgumentList			5011289	1					
ANR	5012233	ExpressionStatement	m_rotation_lock -> release ( )	900:1:22442:22469	5011289	52	True				
ANR	5012234	CallExpression	m_rotation_lock -> release ( )		5011289	0					
ANR	5012235	Callee	m_rotation_lock -> release		5011289	0					
ANR	5012236	PtrMemberAccess	m_rotation_lock -> release		5011289	0					
ANR	5012237	Identifier	m_rotation_lock		5011289	0					
ANR	5012238	Identifier	release		5011289	1					
ANR	5012239	ArgumentList			5011289	1					
ANR	5012240	ReturnStatement	return true ;	902:1:22473:22484	5011289	53	True				
ANR	5012241	Identifier	true		5011289	0					
ANR	5012242	ReturnType	bool		5011289	1					
ANR	5012243	Identifier	WriteUserLog :: checkGlobalLogRotation		5011289	2					
ANR	5012244	ParameterList			5011289	3					
ANR	5012245	CFGEntryNode	ENTRY		5011289		True				
ANR	5012246	CFGExitNode	EXIT		5011289		True				
ANR	5012247	Symbol	time2 . difference		5011289						
ANR	5012248	Symbol	header_writer		5011289						
ANR	5012249	Symbol	openFile		5011289						
ANR	5012250	Symbol	m_creator_name		5011289						
ANR	5012251	Symbol	current_filesize		5011289						
ANR	5012252	Symbol	tmps		5011289						
ANR	5012253	Symbol	updateGlobalStat		5011289						
ANR	5012254	Symbol	* sbuf . GetBuf		5011289						
ANR	5012255	Symbol	time1		5011289						
ANR	5012256	Symbol	time2		5011289						
ANR	5012257	Symbol	m_global_stat		5011289						
ANR	5012258	Symbol	WRITE_LOCK		5011289						
ANR	5012259	Symbol	sbuf		5011289						
ANR	5012260	Symbol	header_reader		5011289						
ANR	5012261	Symbol	m_rotation_lock -> obtain		5011289						
ANR	5012262	Symbol	m_rotation_lock		5011289						
ANR	5012263	Symbol	num_rotations		5011289						
ANR	5012264	Symbol	stat_time . combined		5011289						
ANR	5012265	Symbol	events		5011289						
ANR	5012266	Symbol	m_global_disable		5011289						
ANR	5012267	Symbol	m_global_state		5011289						
ANR	5012268	Symbol	NULL		5011289						
ANR	5012269	Symbol	log_reader . readEvent		5011289						
ANR	5012270	Symbol	globalLogRotated		5011289						
ANR	5012271	Symbol	m_global_max_rotations		5011289						
ANR	5012272	Symbol	this		5011289						
ANR	5012273	Symbol	eps		5011289						
ANR	5012274	Symbol	sbuf . GetBuf ( ) -> st_size		5011289						
ANR	5012275	Symbol	D_FULLDEBUG		5011289						
ANR	5012276	Symbol	* swrap		5011289						
ANR	5012277	Symbol	m_global_lock -> isUnlocked		5011289						
ANR	5012278	Symbol	m_global_state -> isOverSize		5011289						
ANR	5012279	Symbol	sbuf . Stat		5011289						
ANR	5012280	Symbol	globalRotationStarting		5011289						
ANR	5012281	Symbol	m_global_max_filesize		5011289						
ANR	5012282	Symbol	swrap		5011289						
ANR	5012283	Symbol	start_time		5011289						
ANR	5012284	Symbol	swrap . GetBuf		5011289						
ANR	5012285	Symbol	fileno		5011289						
ANR	5012286	Symbol	true		5011289						
ANR	5012287	Symbol	dprintf		5011289						
ANR	5012288	Symbol	* m_global_lock		5011289						
ANR	5012289	Symbol	swrap . GetBuf ( ) -> st_ino		5011289						
ANR	5012290	Symbol	stat_time		5011289						
ANR	5012291	Symbol	* m_global_state		5011289						
ANR	5012292	Symbol	m_global_lock -> isFakeLock		5011289						
ANR	5012293	Symbol	fake_lock		5011289						
ANR	5012294	Symbol	header_reader . getId		5011289						
ANR	5012295	Symbol	now . combined		5011289						
ANR	5012296	Symbol	rotated . Value		5011289						
ANR	5012297	Symbol	globalRotationEvents		5011289						
ANR	5012298	Symbol	start_time . combined		5011289						
ANR	5012299	Symbol	* swrap . GetBuf		5011289						
ANR	5012300	Symbol	fp		5011289						
ANR	5012301	Symbol	end_time . difference		5011289						
ANR	5012302	Symbol	elapsed		5011289						
ANR	5012303	Symbol	sbuf . GetBuf		5011289						
ANR	5012304	Symbol	m_global_state -> isNewFile		5011289						
ANR	5012305	Symbol	m_global_fp		5011289						
ANR	5012306	Symbol	header_reader . Read		5011289						
ANR	5012307	Symbol	now		5011289						
ANR	5012308	Symbol	event		5011289						
ANR	5012309	Symbol	safe_fopen_wrapper_follow		5011289						
ANR	5012310	Symbol	outcome		5011289						
ANR	5012311	Symbol	time1 . combined		5011289						
ANR	5012312	Symbol	m_global_path		5011289						
ANR	5012313	Symbol	doRotation		5011289						
ANR	5012314	Symbol	false		5011289						
ANR	5012315	Symbol	D_ALWAYS		5011289						
ANR	5012316	Symbol	log_reader		5011289						
ANR	5012317	Symbol	end_time		5011289						
ANR	5012318	Symbol	rotated		5011289						
ANR	5012319	Symbol	* m_global_stat		5011289						
ANR	5012320	Symbol	ULOG_OK		5011289						
ANR	5012321	Symbol	* this		5011289						
ANR	5012322	Symbol	* sbuf		5011289						
ANR	5012323	Symbol	header_reader . getSequence		5011289						
ANR	5012324	Symbol	s		5011289						
ANR	5012325	Symbol	rps		5011289						
ANR	5012326	Symbol	header_fp		5011289						
ANR	5012327	Symbol	* m_rotation_lock		5011289						
ANR	5012328	Symbol	end_time . combined		5011289						
ANR	5012329	Symbol	m_global_count_events		5011289						
ANR	5012330	Symbol	m_global_lock		5011289						
ANR	5012331	Function	WriteUserLog :: updateGlobalStat	906:0:22490:22691							
ANR	5012332	FunctionDef	WriteUserLog :: updateGlobalStat ()		5012331	0					
ANR	5012333	CompoundStatement		908:0:22534:22691	5012331	0					
ANR	5012334	IfStatement	if ( ( NULL == m_global_stat ) || ( m_global_stat -> Stat ( ) ) )		5012331	0					
ANR	5012335	Condition	( NULL == m_global_stat ) || ( m_global_stat -> Stat ( ) )	909:6:22542:22591	5012331	0	True				
ANR	5012336	OrExpression	( NULL == m_global_stat ) || ( m_global_stat -> Stat ( ) )		5012331	0		||			
ANR	5012337	EqualityExpression	NULL == m_global_stat		5012331	0		==			
ANR	5012338	Identifier	NULL		5012331	0					
ANR	5012339	Identifier	m_global_stat		5012331	1					
ANR	5012340	CallExpression	m_global_stat -> Stat ( )		5012331	1					
ANR	5012341	Callee	m_global_stat -> Stat		5012331	0					
ANR	5012342	PtrMemberAccess	m_global_stat -> Stat		5012331	0					
ANR	5012343	Identifier	m_global_stat		5012331	0					
ANR	5012344	Identifier	Stat		5012331	1					
ANR	5012345	ArgumentList			5012331	1					
ANR	5012346	CompoundStatement		2:59:60:60	5012331	1					
ANR	5012347	ReturnStatement	return false ;	910:2:22599:22611	5012331	0	True				
ANR	5012348	Identifier	false		5012331	0					
ANR	5012349	IfStatement	if ( NULL == m_global_stat -> GetBuf ( ) )		5012331	1					
ANR	5012350	Condition	NULL == m_global_stat -> GetBuf ( )	912:6:22622:22652	5012331	0	True				
ANR	5012351	EqualityExpression	NULL == m_global_stat -> GetBuf ( )		5012331	0		==			
ANR	5012352	Identifier	NULL		5012331	0					
ANR	5012353	CallExpression	m_global_stat -> GetBuf ( )		5012331	1					
ANR	5012354	Callee	m_global_stat -> GetBuf		5012331	0					
ANR	5012355	PtrMemberAccess	m_global_stat -> GetBuf		5012331	0					
ANR	5012356	Identifier	m_global_stat		5012331	0					
ANR	5012357	Identifier	GetBuf		5012331	1					
ANR	5012358	ArgumentList			5012331	1					
ANR	5012359	CompoundStatement		5:40:121:121	5012331	1					
ANR	5012360	ReturnStatement	return false ;	913:2:22660:22672	5012331	0	True				
ANR	5012361	Identifier	false		5012331	0					
ANR	5012362	ReturnStatement	return true ;	915:1:22678:22689	5012331	2	True				
ANR	5012363	Identifier	true		5012331	0					
ANR	5012364	ReturnType	bool		5012331	1					
ANR	5012365	Identifier	WriteUserLog :: updateGlobalStat		5012331	2					
ANR	5012366	ParameterList			5012331	3					
ANR	5012367	CFGEntryNode	ENTRY		5012331		True				
ANR	5012368	CFGExitNode	EXIT		5012331		True				
ANR	5012369	Symbol	m_global_stat -> Stat		5012331						
ANR	5012370	Symbol	m_global_stat		5012331						
ANR	5012371	Symbol	NULL		5012331						
ANR	5012372	Symbol	false		5012331						
ANR	5012373	Symbol	true		5012331						
ANR	5012374	Symbol	m_global_stat -> GetBuf		5012331						
ANR	5012375	Symbol	* m_global_stat		5012331						
ANR	5012376	Function	WriteUserLog :: getGlobalLogSize	918:0:22694:23107							
ANR	5012377	FunctionDef	"WriteUserLog :: getGlobalLogSize (unsigned long & size , bool use_fp)"		5012376	0					
ANR	5012378	CompoundStatement		920:0:22766:23107	5012376	0					
ANR	5012379	IdentifierDeclStatement	StatWrapper stat ;	921:1:22769:22785	5012376	0	True				
ANR	5012380	IdentifierDecl	stat		5012376	0					
ANR	5012381	IdentifierDeclType	StatWrapper		5012376	0					
ANR	5012382	Identifier	stat		5012376	1					
ANR	5012383	IfStatement	if ( m_global_close && ! m_global_fp )		5012376	1					
ANR	5012384	Condition	m_global_close && ! m_global_fp	922:6:22793:22822	5012376	0	True				
ANR	5012385	AndExpression	m_global_close && ! m_global_fp		5012376	0		&&			
ANR	5012386	Identifier	m_global_close		5012376	0					
ANR	5012387	UnaryOperationExpression	! m_global_fp		5012376	1					
ANR	5012388	UnaryOperator	!		5012376	0					
ANR	5012389	Identifier	m_global_fp		5012376	1					
ANR	5012390	CompoundStatement		3:39:59:59	5012376	1					
ANR	5012391	ExpressionStatement	use_fp = false	923:2:22830:22844	5012376	0	True				
ANR	5012392	AssignmentExpression	use_fp = false		5012376	0		=			
ANR	5012393	Identifier	use_fp		5012376	0					
ANR	5012394	Identifier	false		5012376	1					
ANR	5012395	IfStatement	if ( use_fp )		5012376	2					
ANR	5012396	Condition	use_fp	925:6:22855:22860	5012376	0	True				
ANR	5012397	Identifier	use_fp		5012376	0					
ANR	5012398	CompoundStatement		6:15:97:97	5012376	1					
ANR	5012399	IfStatement	if ( ! m_global_fp )		5012376	0					
ANR	5012400	Condition	! m_global_fp	926:7:22873:22884	5012376	0	True				
ANR	5012401	UnaryOperationExpression	! m_global_fp		5012376	0					
ANR	5012402	UnaryOperator	!		5012376	0					
ANR	5012403	Identifier	m_global_fp		5012376	1					
ANR	5012404	CompoundStatement		7:22:121:121	5012376	1					
ANR	5012405	ReturnStatement	return false ;	927:3:22893:22905	5012376	0	True				
ANR	5012406	Identifier	false		5012376	0					
ANR	5012407	IfStatement	if ( stat . Stat ( fileno ( m_global_fp ) ) )		5012376	1					
ANR	5012408	Condition	stat . Stat ( fileno ( m_global_fp ) )	929:7:22918:22947	5012376	0	True				
ANR	5012409	CallExpression	stat . Stat ( fileno ( m_global_fp ) )		5012376	0					
ANR	5012410	Callee	stat . Stat		5012376	0					
ANR	5012411	MemberAccess	stat . Stat		5012376	0					
ANR	5012412	Identifier	stat		5012376	0					
ANR	5012413	Identifier	Stat		5012376	1					
ANR	5012414	ArgumentList	fileno ( m_global_fp )		5012376	1					
ANR	5012415	Argument	fileno ( m_global_fp )		5012376	0					
ANR	5012416	CallExpression	fileno ( m_global_fp )		5012376	0					
ANR	5012417	Callee	fileno		5012376	0					
ANR	5012418	Identifier	fileno		5012376	0					
ANR	5012419	ArgumentList	m_global_fp		5012376	1					
ANR	5012420	Argument	m_global_fp		5012376	0					
ANR	5012421	Identifier	m_global_fp		5012376	0					
ANR	5012422	CompoundStatement		10:40:184:184	5012376	1					
ANR	5012423	ReturnStatement	return false ;	930:3:22956:22968	5012376	0	True				
ANR	5012424	Identifier	false		5012376	0					
ANR	5012425	ElseStatement	else		5012376	0					
ANR	5012426	CompoundStatement		14:6:216:216	5012376	0					
ANR	5012427	IfStatement	if ( stat . Stat ( m_global_path ) )		5012376	0					
ANR	5012428	Condition	stat . Stat ( m_global_path )	934:7:22992:23015	5012376	0	True				
ANR	5012429	CallExpression	stat . Stat ( m_global_path )		5012376	0					
ANR	5012430	Callee	stat . Stat		5012376	0					
ANR	5012431	MemberAccess	stat . Stat		5012376	0					
ANR	5012432	Identifier	stat		5012376	0					
ANR	5012433	Identifier	Stat		5012376	1					
ANR	5012434	ArgumentList	m_global_path		5012376	1					
ANR	5012435	Argument	m_global_path		5012376	0					
ANR	5012436	Identifier	m_global_path		5012376	0					
ANR	5012437	CompoundStatement		15:34:252:252	5012376	1					
ANR	5012438	ReturnStatement	return false ;	935:3:23024:23036	5012376	0	True				
ANR	5012439	Identifier	false		5012376	0					
ANR	5012440	ExpressionStatement	size = ( unsigned long ) stat . GetBuf ( ) -> st_size	938:1:23046:23091	5012376	3	True				
ANR	5012441	AssignmentExpression	size = ( unsigned long ) stat . GetBuf ( ) -> st_size		5012376	0		=			
ANR	5012442	Identifier	size		5012376	0					
ANR	5012443	CastExpression	( unsigned long ) stat . GetBuf ( ) -> st_size		5012376	1					
ANR	5012444	CastTarget	unsigned long		5012376	0					
ANR	5012445	PtrMemberAccess	stat . GetBuf ( ) -> st_size		5012376	1					
ANR	5012446	CallExpression	stat . GetBuf ( )		5012376	0					
ANR	5012447	Callee	stat . GetBuf		5012376	0					
ANR	5012448	MemberAccess	stat . GetBuf		5012376	0					
ANR	5012449	Identifier	stat		5012376	0					
ANR	5012450	Identifier	GetBuf		5012376	1					
ANR	5012451	ArgumentList			5012376	1					
ANR	5012452	Identifier	st_size		5012376	1					
ANR	5012453	ReturnStatement	return true ;	939:1:23094:23105	5012376	4	True				
ANR	5012454	Identifier	true		5012376	0					
ANR	5012455	ReturnType	bool		5012376	1					
ANR	5012456	Identifier	WriteUserLog :: getGlobalLogSize		5012376	2					
ANR	5012457	ParameterList	"unsigned long & size , bool use_fp"		5012376	3					
ANR	5012458	Parameter	unsigned long & size	919:32:22731:22749	5012376	0	True				
ANR	5012459	ParameterType	unsigned long &		5012376	0					
ANR	5012460	Identifier	size		5012376	1					
ANR	5012461	Parameter	bool use_fp	919:53:22752:22762	5012376	1	True				
ANR	5012462	ParameterType	bool		5012376	0					
ANR	5012463	Identifier	use_fp		5012376	1					
ANR	5012464	CFGEntryNode	ENTRY		5012376		True				
ANR	5012465	CFGExitNode	EXIT		5012376		True				
ANR	5012466	Symbol	stat		5012376						
ANR	5012467	Symbol	m_global_path		5012376						
ANR	5012468	Symbol	use_fp		5012376						
ANR	5012469	Symbol	false		5012376						
ANR	5012470	Symbol	m_global_close		5012376						
ANR	5012471	Symbol	* stat		5012376						
ANR	5012472	Symbol	stat . GetBuf ( ) -> st_size		5012376						
ANR	5012473	Symbol	size		5012376						
ANR	5012474	Symbol	m_global_fp		5012376						
ANR	5012475	Symbol	fileno		5012376						
ANR	5012476	Symbol	stat . Stat		5012376						
ANR	5012477	Symbol	true		5012376						
ANR	5012478	Symbol	stat . GetBuf		5012376						
ANR	5012479	Symbol	* stat . GetBuf		5012376						
ANR	5012480	Function	WriteUserLog :: globalLogRotated	942:0:23110:23536							
ANR	5012481	FunctionDef	WriteUserLog :: globalLogRotated (ReadUserLogHeader & reader)		5012480	0					
ANR	5012482	CompoundStatement		944:0:23175:23536	5012480	0					
ANR	5012483	ExpressionStatement	"openGlobalLog ( true , reader )"	949:1:23305:23334	5012480	0	True				
ANR	5012484	CallExpression	"openGlobalLog ( true , reader )"		5012480	0					
ANR	5012485	Callee	openGlobalLog		5012480	0					
ANR	5012486	Identifier	openGlobalLog		5012480	0					
ANR	5012487	ArgumentList	true		5012480	1					
ANR	5012488	Argument	true		5012480	0					
ANR	5012489	Identifier	true		5012480	0					
ANR	5012490	Argument	reader		5012480	1					
ANR	5012491	Identifier	reader		5012480	0					
ANR	5012492	IfStatement	if ( m_global_lock )		5012480	1					
ANR	5012493	Condition	m_global_lock	950:6:23342:23354	5012480	0	True				
ANR	5012494	Identifier	m_global_lock		5012480	0					
ANR	5012495	CompoundStatement		7:22:182:182	5012480	1					
ANR	5012496	ExpressionStatement	m_global_lock -> obtain ( WRITE_LOCK )	951:2:23362:23395	5012480	0	True				
ANR	5012497	CallExpression	m_global_lock -> obtain ( WRITE_LOCK )		5012480	0					
ANR	5012498	Callee	m_global_lock -> obtain		5012480	0					
ANR	5012499	PtrMemberAccess	m_global_lock -> obtain		5012480	0					
ANR	5012500	Identifier	m_global_lock		5012480	0					
ANR	5012501	Identifier	obtain		5012480	1					
ANR	5012502	ArgumentList	WRITE_LOCK		5012480	1					
ANR	5012503	Argument	WRITE_LOCK		5012480	0					
ANR	5012504	Identifier	WRITE_LOCK		5012480	0					
ANR	5012505	IfStatement	if ( ! updateGlobalStat ( ) )		5012480	1					
ANR	5012506	Condition	! updateGlobalStat ( )	952:7:23404:23422	5012480	0	True				
ANR	5012507	UnaryOperationExpression	! updateGlobalStat ( )		5012480	0					
ANR	5012508	UnaryOperator	!		5012480	0					
ANR	5012509	CallExpression	updateGlobalStat ( )		5012480	1					
ANR	5012510	Callee	updateGlobalStat		5012480	0					
ANR	5012511	Identifier	updateGlobalStat		5012480	0					
ANR	5012512	ArgumentList			5012480	1					
ANR	5012513	CompoundStatement		9:29:250:250	5012480	1					
ANR	5012514	ExpressionStatement	m_global_state -> Clear ( )	953:3:23431:23455	5012480	0	True				
ANR	5012515	CallExpression	m_global_state -> Clear ( )		5012480	0					
ANR	5012516	Callee	m_global_state -> Clear		5012480	0					
ANR	5012517	PtrMemberAccess	m_global_state -> Clear		5012480	0					
ANR	5012518	Identifier	m_global_state		5012480	0					
ANR	5012519	Identifier	Clear		5012480	1					
ANR	5012520	ArgumentList			5012480	1					
ANR	5012521	ElseStatement	else		5012480	0					
ANR	5012522	CompoundStatement		12:7:292:292	5012480	0					
ANR	5012523	ExpressionStatement	m_global_state -> Update ( * m_global_stat )	956:3:23473:23513	5012480	0	True				
ANR	5012524	CallExpression	m_global_state -> Update ( * m_global_stat )		5012480	0					
ANR	5012525	Callee	m_global_state -> Update		5012480	0					
ANR	5012526	PtrMemberAccess	m_global_state -> Update		5012480	0					
ANR	5012527	Identifier	m_global_state		5012480	0					
ANR	5012528	Identifier	Update		5012480	1					
ANR	5012529	ArgumentList	* m_global_stat		5012480	1					
ANR	5012530	Argument	* m_global_stat		5012480	0					
ANR	5012531	UnaryOperationExpression	* m_global_stat		5012480	0					
ANR	5012532	UnaryOperator	*		5012480	0					
ANR	5012533	Identifier	m_global_stat		5012480	1					
ANR	5012534	ReturnStatement	return true ;	959:1:23523:23534	5012480	2	True				
ANR	5012535	Identifier	true		5012480	0					
ANR	5012536	ReturnType	bool		5012480	1					
ANR	5012537	Identifier	WriteUserLog :: globalLogRotated		5012480	2					
ANR	5012538	ParameterList	ReadUserLogHeader & reader		5012480	3					
ANR	5012539	Parameter	ReadUserLogHeader & reader	943:32:23147:23171	5012480	0	True				
ANR	5012540	ParameterType	ReadUserLogHeader &		5012480	0					
ANR	5012541	Identifier	reader		5012480	1					
ANR	5012542	CFGEntryNode	ENTRY		5012480		True				
ANR	5012543	CFGExitNode	EXIT		5012480		True				
ANR	5012544	Symbol	m_global_state		5012480						
ANR	5012545	Symbol	m_global_stat		5012480						
ANR	5012546	Symbol	WRITE_LOCK		5012480						
ANR	5012547	Symbol	reader		5012480						
ANR	5012548	Symbol	true		5012480						
ANR	5012549	Symbol	updateGlobalStat		5012480						
ANR	5012550	Symbol	* m_global_stat		5012480						
ANR	5012551	Symbol	m_global_lock		5012480						
ANR	5012552	Function	WriteUserLog :: doRotation	962:0:23539:24566							
ANR	5012553	FunctionDef	"WriteUserLog :: doRotation (const char * path , FILE * & fp , MyString & rotated , int max_rotations)"		5012552	0					
ANR	5012554	CompoundStatement		965:0:23645:24566	5012552	0					
ANR	5012555	IdentifierDeclStatement	int num_rotations = 0 ;	967:1:23649:23671	5012552	0	True				
ANR	5012556	IdentifierDecl	num_rotations = 0		5012552	0					
ANR	5012557	IdentifierDeclType	int		5012552	0					
ANR	5012558	Identifier	num_rotations		5012552	1					
ANR	5012559	AssignmentExpression	num_rotations = 0		5012552	2		=			
ANR	5012560	Identifier	num_rotations		5012552	0					
ANR	5012561	PrimaryExpression	0		5012552	1					
ANR	5012562	ExpressionStatement	rotated = path	968:1:23674:23688	5012552	1	True				
ANR	5012563	AssignmentExpression	rotated = path		5012552	0		=			
ANR	5012564	Identifier	rotated		5012552	0					
ANR	5012565	Identifier	path		5012552	1					
ANR	5012566	IfStatement	if ( 1 == max_rotations )		5012552	2					
ANR	5012567	Condition	1 == max_rotations	969:6:23696:23713	5012552	0	True				
ANR	5012568	EqualityExpression	1 == max_rotations		5012552	0		==			
ANR	5012569	PrimaryExpression	1		5012552	0					
ANR	5012570	Identifier	max_rotations		5012552	1					
ANR	5012571	CompoundStatement		5:27:71:71	5012552	1					
ANR	5012572	ExpressionStatement	"rotated += "".old"""	970:2:23721:23738	5012552	0	True				
ANR	5012573	AssignmentExpression	"rotated += "".old"""		5012552	0		+=			
ANR	5012574	Identifier	rotated		5012552	0					
ANR	5012575	PrimaryExpression	""".old"""		5012552	1					
ANR	5012576	ElseStatement	else		5012552	0					
ANR	5012577	CompoundStatement		8:6:103:103	5012552	0					
ANR	5012578	ExpressionStatement	"rotated += "".1"""	973:2:23753:23768	5012552	0	True				
ANR	5012579	AssignmentExpression	"rotated += "".1"""		5012552	0		+=			
ANR	5012580	Identifier	rotated		5012552	0					
ANR	5012581	PrimaryExpression	""".1"""		5012552	1					
ANR	5012582	ForStatement	for ( int i = max_rotations ; i > 1 ; i -- )		5012552	1					
ANR	5012583	ForInit	int i = max_rotations ;	974:7:23777:23796	5012552	0	True				
ANR	5012584	IdentifierDeclStatement	int i = max_rotations ;		5012552	0					
ANR	5012585	IdentifierDecl	i = max_rotations		5012552	0					
ANR	5012586	IdentifierDeclType	int		5012552	0					
ANR	5012587	Identifier	i		5012552	1					
ANR	5012588	AssignmentExpression	i = max_rotations		5012552	2		=			
ANR	5012589	Identifier	max_rotations		5012552	0					
ANR	5012590	Identifier	max_rotations		5012552	1					
ANR	5012591	Condition	i > 1	974:29:23799:23801	5012552	1	True				
ANR	5012592	RelationalExpression	i > 1		5012552	0		>			
ANR	5012593	Identifier	i		5012552	0					
ANR	5012594	PrimaryExpression	1		5012552	1					
ANR	5012595	PostIncDecOperationExpression	i --	974:35:23805:23807	5012552	2	True				
ANR	5012596	Identifier	i		5012552	0					
ANR	5012597	IncDec	--		5012552	1					
ANR	5012598	CompoundStatement		14:3:230:277	5012552	3					
ANR	5012599	IdentifierDeclStatement	MyString old1 ( path ) ;	975:3:23815:23836	5012552	0	True				
ANR	5012600	IdentifierDecl	old1 ( path )		5012552	0					
ANR	5012601	IdentifierDeclType	MyString		5012552	0					
ANR	5012602	Identifier	old1		5012552	1					
ANR	5012603	Identifier	path		5012552	2					
ANR	5012604	ExpressionStatement	"old1 . sprintf_cat ( "".%d"" , i - 1 )"	976:3:23841:23870	5012552	1	True				
ANR	5012605	CallExpression	"old1 . sprintf_cat ( "".%d"" , i - 1 )"		5012552	0					
ANR	5012606	Callee	old1 . sprintf_cat		5012552	0					
ANR	5012607	MemberAccess	old1 . sprintf_cat		5012552	0					
ANR	5012608	Identifier	old1		5012552	0					
ANR	5012609	Identifier	sprintf_cat		5012552	1					
ANR	5012610	ArgumentList	""".%d"""		5012552	1					
ANR	5012611	Argument	""".%d"""		5012552	0					
ANR	5012612	PrimaryExpression	""".%d"""		5012552	0					
ANR	5012613	Argument	i - 1		5012552	1					
ANR	5012614	AdditiveExpression	i - 1		5012552	0		-			
ANR	5012615	Identifier	i		5012552	0					
ANR	5012616	PrimaryExpression	1		5012552	1					
ANR	5012617	IdentifierDeclStatement	"StatWrapper s ( old1 , StatWrapper :: STATOP_STAT ) ;"	978:3:23876:23923	5012552	2	True				
ANR	5012618	IdentifierDecl	"s ( old1 , StatWrapper :: STATOP_STAT )"		5012552	0					
ANR	5012619	IdentifierDeclType	StatWrapper		5012552	0					
ANR	5012620	Identifier	s		5012552	1					
ANR	5012621	Expression	"old1 , StatWrapper :: STATOP_STAT"		5012552	2					
ANR	5012622	Identifier	old1		5012552	0					
ANR	5012623	Identifier	StatWrapper :: STATOP_STAT		5012552	1					
ANR	5012624	IfStatement	if ( 0 == s . GetRc ( ) )		5012552	3					
ANR	5012625	Condition	0 == s . GetRc ( )	979:8:23933:23946	5012552	0	True				
ANR	5012626	EqualityExpression	0 == s . GetRc ( )		5012552	0		==			
ANR	5012627	PrimaryExpression	0		5012552	0					
ANR	5012628	CallExpression	s . GetRc ( )		5012552	1					
ANR	5012629	Callee	s . GetRc		5012552	0					
ANR	5012630	MemberAccess	s . GetRc		5012552	0					
ANR	5012631	Identifier	s		5012552	0					
ANR	5012632	Identifier	GetRc		5012552	1					
ANR	5012633	ArgumentList			5012552	1					
ANR	5012634	CompoundStatement		16:4:310:331	5012552	1					
ANR	5012635	IdentifierDeclStatement	MyString old2 ( path ) ;	980:4:23956:23977	5012552	0	True				
ANR	5012636	IdentifierDecl	old2 ( path )		5012552	0					
ANR	5012637	IdentifierDeclType	MyString		5012552	0					
ANR	5012638	Identifier	old2		5012552	1					
ANR	5012639	Identifier	path		5012552	2					
ANR	5012640	ExpressionStatement	"old2 . sprintf_cat ( "".%d"" , i )"	981:4:23983:24010	5012552	1	True				
ANR	5012641	CallExpression	"old2 . sprintf_cat ( "".%d"" , i )"		5012552	0					
ANR	5012642	Callee	old2 . sprintf_cat		5012552	0					
ANR	5012643	MemberAccess	old2 . sprintf_cat		5012552	0					
ANR	5012644	Identifier	old2		5012552	0					
ANR	5012645	Identifier	sprintf_cat		5012552	1					
ANR	5012646	ArgumentList	""".%d"""		5012552	1					
ANR	5012647	Argument	""".%d"""		5012552	0					
ANR	5012648	PrimaryExpression	""".%d"""		5012552	0					
ANR	5012649	Argument	i		5012552	1					
ANR	5012650	Identifier	i		5012552	0					
ANR	5012651	ExpressionStatement	"rename ( old1 . Value ( ) , old2 . Value ( ) )"	982:4:24016:24052	5012552	2	True				
ANR	5012652	CallExpression	"rename ( old1 . Value ( ) , old2 . Value ( ) )"		5012552	0					
ANR	5012653	Callee	rename		5012552	0					
ANR	5012654	Identifier	rename		5012552	0					
ANR	5012655	ArgumentList	old1 . Value ( )		5012552	1					
ANR	5012656	Argument	old1 . Value ( )		5012552	0					
ANR	5012657	CallExpression	old1 . Value ( )		5012552	0					
ANR	5012658	Callee	old1 . Value		5012552	0					
ANR	5012659	MemberAccess	old1 . Value		5012552	0					
ANR	5012660	Identifier	old1		5012552	0					
ANR	5012661	Identifier	Value		5012552	1					
ANR	5012662	ArgumentList			5012552	1					
ANR	5012663	Argument	old2 . Value ( )		5012552	1					
ANR	5012664	CallExpression	old2 . Value ( )		5012552	0					
ANR	5012665	Callee	old2 . Value		5012552	0					
ANR	5012666	MemberAccess	old2 . Value		5012552	0					
ANR	5012667	Identifier	old2		5012552	0					
ANR	5012668	Identifier	Value		5012552	1					
ANR	5012669	ArgumentList			5012552	1					
ANR	5012670	ExpressionStatement	num_rotations ++	983:4:24058:24073	5012552	3	True				
ANR	5012671	PostIncDecOperationExpression	num_rotations ++		5012552	0					
ANR	5012672	Identifier	num_rotations		5012552	0					
ANR	5012673	IncDec	++		5012552	1					
ANR	5012674	Statement	ifdef	988:2:24090:24094	5012552	3	True				
ANR	5012675	Statement	WIN32	988:8:24096:24100	5012552	4	True				
ANR	5012676	IfStatement	if ( fp )		5012552	5					
ANR	5012677	Condition	fp	990:6:24149:24150	5012552	0	True				
ANR	5012678	Identifier	fp		5012552	0					
ANR	5012679	CompoundStatement		26:10:507:507	5012552	1					
ANR	5012680	ExpressionStatement	fclose ( fp )	991:2:24157:24169	5012552	0	True				
ANR	5012681	CallExpression	fclose ( fp )		5012552	0					
ANR	5012682	Callee	fclose		5012552	0					
ANR	5012683	Identifier	fclose		5012552	0					
ANR	5012684	ArgumentList	fp		5012552	1					
ANR	5012685	Argument	fp		5012552	0					
ANR	5012686	Identifier	fp		5012552	0					
ANR	5012687	ExpressionStatement	fp = NULL	992:2:24173:24182	5012552	1	True				
ANR	5012688	AssignmentExpression	fp = NULL		5012552	0		=			
ANR	5012689	Identifier	fp		5012552	0					
ANR	5012690	Identifier	NULL		5012552	1					
ANR	5012691	ElseStatement	else		5012552	0					
ANR	5012692	ExpressionStatement	( void ) fp	995:1:24195:24204	5012552	0	True				
ANR	5012693	CastExpression	( void ) fp		5012552	0					
ANR	5012694	CastTarget	void		5012552	0					
ANR	5012695	Identifier	fp		5012552	1					
ANR	5012696	IdentifierDeclStatement	endif UtcTime before ( true ) ;	996:2:24236:24280	5012552	6	True				
ANR	5012697	IdentifierDecl	before ( true )		5012552	0					
ANR	5012698	IdentifierDeclType	endif UtcTime		5012552	0					
ANR	5012699	Identifier	before		5012552	1					
ANR	5012700	Identifier	true		5012552	2					
ANR	5012701	IfStatement	"if ( rotate_file ( path , rotated . Value ( ) ) == 0 )"		5012552	7					
ANR	5012702	Condition	"rotate_file ( path , rotated . Value ( ) ) == 0"	1001:6:24289:24328	5012552	0	True				
ANR	5012703	EqualityExpression	"rotate_file ( path , rotated . Value ( ) ) == 0"		5012552	0		==			
ANR	5012704	CallExpression	"rotate_file ( path , rotated . Value ( ) )"		5012552	0					
ANR	5012705	Callee	rotate_file		5012552	0					
ANR	5012706	Identifier	rotate_file		5012552	0					
ANR	5012707	ArgumentList	path		5012552	1					
ANR	5012708	Argument	path		5012552	0					
ANR	5012709	Identifier	path		5012552	0					
ANR	5012710	Argument	rotated . Value ( )		5012552	1					
ANR	5012711	CallExpression	rotated . Value ( )		5012552	0					
ANR	5012712	Callee	rotated . Value		5012552	0					
ANR	5012713	MemberAccess	rotated . Value		5012552	0					
ANR	5012714	Identifier	rotated		5012552	0					
ANR	5012715	Identifier	Value		5012552	1					
ANR	5012716	ArgumentList			5012552	1					
ANR	5012717	PrimaryExpression	0		5012552	1					
ANR	5012718	CompoundStatement		38:2:690:709	5012552	1					
ANR	5012719	IdentifierDeclStatement	UtcTime after ( true ) ;	1002:2:24336:24355	5012552	0	True				
ANR	5012720	IdentifierDecl	after ( true )		5012552	0					
ANR	5012721	IdentifierDeclType	UtcTime		5012552	0					
ANR	5012722	Identifier	after		5012552	1					
ANR	5012723	Identifier	true		5012552	2					
ANR	5012724	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""WriteUserLog before .1 rot: %.6f\\n"" , before . combined ( ) )"	1003:2:24359:24437	5012552	1	True				
ANR	5012725	CallExpression	"dprintf ( D_FULLDEBUG , ""WriteUserLog before .1 rot: %.6f\\n"" , before . combined ( ) )"		5012552	0					
ANR	5012726	Callee	dprintf		5012552	0					
ANR	5012727	Identifier	dprintf		5012552	0					
ANR	5012728	ArgumentList	D_FULLDEBUG		5012552	1					
ANR	5012729	Argument	D_FULLDEBUG		5012552	0					
ANR	5012730	Identifier	D_FULLDEBUG		5012552	0					
ANR	5012731	Argument	"""WriteUserLog before .1 rot: %.6f\\n"""		5012552	1					
ANR	5012732	PrimaryExpression	"""WriteUserLog before .1 rot: %.6f\\n"""		5012552	0					
ANR	5012733	Argument	before . combined ( )		5012552	2					
ANR	5012734	CallExpression	before . combined ( )		5012552	0					
ANR	5012735	Callee	before . combined		5012552	0					
ANR	5012736	MemberAccess	before . combined		5012552	0					
ANR	5012737	Identifier	before		5012552	0					
ANR	5012738	Identifier	combined		5012552	1					
ANR	5012739	ArgumentList			5012552	1					
ANR	5012740	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""WriteUserLog after  .1 rot: %.6f\\n"" , after . combined ( ) )"	1004:2:24441:24518	5012552	2	True				
ANR	5012741	CallExpression	"dprintf ( D_FULLDEBUG , ""WriteUserLog after  .1 rot: %.6f\\n"" , after . combined ( ) )"		5012552	0					
ANR	5012742	Callee	dprintf		5012552	0					
ANR	5012743	Identifier	dprintf		5012552	0					
ANR	5012744	ArgumentList	D_FULLDEBUG		5012552	1					
ANR	5012745	Argument	D_FULLDEBUG		5012552	0					
ANR	5012746	Identifier	D_FULLDEBUG		5012552	0					
ANR	5012747	Argument	"""WriteUserLog after  .1 rot: %.6f\\n"""		5012552	1					
ANR	5012748	PrimaryExpression	"""WriteUserLog after  .1 rot: %.6f\\n"""		5012552	0					
ANR	5012749	Argument	after . combined ( )		5012552	2					
ANR	5012750	CallExpression	after . combined ( )		5012552	0					
ANR	5012751	Callee	after . combined		5012552	0					
ANR	5012752	MemberAccess	after . combined		5012552	0					
ANR	5012753	Identifier	after		5012552	0					
ANR	5012754	Identifier	combined		5012552	1					
ANR	5012755	ArgumentList			5012552	1					
ANR	5012756	ExpressionStatement	num_rotations ++	1005:2:24522:24537	5012552	3	True				
ANR	5012757	PostIncDecOperationExpression	num_rotations ++		5012552	0					
ANR	5012758	Identifier	num_rotations		5012552	0					
ANR	5012759	IncDec	++		5012552	1					
ANR	5012760	ReturnStatement	return num_rotations ;	1008:1:24544:24564	5012552	8	True				
ANR	5012761	Identifier	num_rotations		5012552	0					
ANR	5012762	ReturnType	int		5012552	1					
ANR	5012763	Identifier	WriteUserLog :: doRotation		5012552	2					
ANR	5012764	ParameterList	"const char * path , FILE * & fp , MyString & rotated , int max_rotations"		5012552	3					
ANR	5012765	Parameter	const char * path	963:26:23569:23584	5012552	0	True				
ANR	5012766	ParameterType	const char *		5012552	0					
ANR	5012767	Identifier	path		5012552	1					
ANR	5012768	Parameter	FILE * & fp	963:44:23587:23595	5012552	1	True				
ANR	5012769	ParameterType	FILE * &		5012552	0					
ANR	5012770	Identifier	fp		5012552	1					
ANR	5012771	Parameter	MyString & rotated	964:8:23606:23622	5012552	2	True				
ANR	5012772	ParameterType	MyString &		5012552	0					
ANR	5012773	Identifier	rotated		5012552	1					
ANR	5012774	Parameter	int max_rotations	964:27:23625:23641	5012552	3	True				
ANR	5012775	ParameterType	int		5012552	0					
ANR	5012776	Identifier	max_rotations		5012552	1					
ANR	5012777	CFGEntryNode	ENTRY		5012552		True				
ANR	5012778	CFGExitNode	EXIT		5012552		True				
ANR	5012779	Symbol	NULL		5012552						
ANR	5012780	Symbol	before		5012552						
ANR	5012781	Symbol	rotated . Value		5012552						
ANR	5012782	Symbol	after . combined		5012552						
ANR	5012783	Symbol	rotated		5012552						
ANR	5012784	Symbol	i		5012552						
ANR	5012785	Symbol	fp		5012552						
ANR	5012786	Symbol	D_FULLDEBUG		5012552						
ANR	5012787	Symbol	max_rotations		5012552						
ANR	5012788	Symbol	path		5012552						
ANR	5012789	Symbol	old2 . Value		5012552						
ANR	5012790	Symbol	s		5012552						
ANR	5012791	Symbol	before . combined		5012552						
ANR	5012792	Symbol	rotate_file		5012552						
ANR	5012793	Symbol	num_rotations		5012552						
ANR	5012794	Symbol	after		5012552						
ANR	5012795	Symbol	s . GetRc		5012552						
ANR	5012796	Symbol	old1 . Value		5012552						
ANR	5012797	Symbol	old1		5012552						
ANR	5012798	Symbol	old2		5012552						
ANR	5012799	Function	WriteUserLog :: writeGlobalEvent	1012:0:24570:24820							
ANR	5012800	FunctionDef	"WriteUserLog :: writeGlobalEvent (ULogEvent & event , FILE * fp , bool is_header_event)"		5012799	0					
ANR	5012801	CompoundStatement		1016:0:24673:24820	5012799	0					
ANR	5012802	IfStatement	if ( NULL == fp )		5012799	0					
ANR	5012803	Condition	NULL == fp	1017:6:24681:24690	5012799	0	True				
ANR	5012804	EqualityExpression	NULL == fp		5012799	0		==			
ANR	5012805	Identifier	NULL		5012799	0					
ANR	5012806	Identifier	fp		5012799	1					
ANR	5012807	CompoundStatement		2:19:20:20	5012799	1					
ANR	5012808	ExpressionStatement	fp = m_global_fp	1018:2:24698:24714	5012799	0	True				
ANR	5012809	AssignmentExpression	fp = m_global_fp		5012799	0		=			
ANR	5012810	Identifier	fp		5012799	0					
ANR	5012811	Identifier	m_global_fp		5012799	1					
ANR	5012812	IfStatement	if ( is_header_event )		5012799	1					
ANR	5012813	Condition	is_header_event	1021:6:24726:24740	5012799	0	True				
ANR	5012814	Identifier	is_header_event		5012799	0					
ANR	5012815	CompoundStatement		6:24:70:70	5012799	1					
ANR	5012816	ExpressionStatement	rewind ( fp )	1022:2:24748:24760	5012799	0	True				
ANR	5012817	CallExpression	rewind ( fp )		5012799	0					
ANR	5012818	Callee	rewind		5012799	0					
ANR	5012819	Identifier	rewind		5012799	0					
ANR	5012820	ArgumentList	fp		5012799	1					
ANR	5012821	Argument	fp		5012799	0					
ANR	5012822	Identifier	fp		5012799	0					
ANR	5012823	ReturnStatement	"return doWriteEvent ( fp , & event , m_global_use_xml ) ;"	1025:1:24767:24818	5012799	2	True				
ANR	5012824	CallExpression	"doWriteEvent ( fp , & event , m_global_use_xml )"		5012799	0					
ANR	5012825	Callee	doWriteEvent		5012799	0					
ANR	5012826	Identifier	doWriteEvent		5012799	0					
ANR	5012827	ArgumentList	fp		5012799	1					
ANR	5012828	Argument	fp		5012799	0					
ANR	5012829	Identifier	fp		5012799	0					
ANR	5012830	Argument	& event		5012799	1					
ANR	5012831	UnaryOperationExpression	& event		5012799	0					
ANR	5012832	UnaryOperator	&		5012799	0					
ANR	5012833	Identifier	event		5012799	1					
ANR	5012834	Argument	m_global_use_xml		5012799	2					
ANR	5012835	Identifier	m_global_use_xml		5012799	0					
ANR	5012836	ReturnType	int		5012799	1					
ANR	5012837	Identifier	WriteUserLog :: writeGlobalEvent		5012799	2					
ANR	5012838	ParameterList	"ULogEvent & event , FILE * fp , bool is_header_event"		5012799	3					
ANR	5012839	Parameter	ULogEvent & event	1013:32:24606:24621	5012799	0	True				
ANR	5012840	ParameterType	ULogEvent &		5012799	0					
ANR	5012841	Identifier	event		5012799	1					
ANR	5012842	Parameter	FILE * fp	1014:8:24632:24639	5012799	1	True				
ANR	5012843	ParameterType	FILE *		5012799	0					
ANR	5012844	Identifier	fp		5012799	1					
ANR	5012845	Parameter	bool is_header_event	1015:8:24650:24669	5012799	2	True				
ANR	5012846	ParameterType	bool		5012799	0					
ANR	5012847	Identifier	is_header_event		5012799	1					
ANR	5012848	CFGEntryNode	ENTRY		5012799		True				
ANR	5012849	CFGExitNode	EXIT		5012799		True				
ANR	5012850	Symbol	NULL		5012799						
ANR	5012851	Symbol	m_global_fp		5012799						
ANR	5012852	Symbol	m_global_use_xml		5012799						
ANR	5012853	Symbol	is_header_event		5012799						
ANR	5012854	Symbol	fp		5012799						
ANR	5012855	Symbol	event		5012799						
ANR	5012856	Symbol	& event		5012799						
ANR	5012857	Symbol	doWriteEvent		5012799						
ANR	5012858	DeclStmt									
ANR	5012859	Decl							int	int	success
ANR	5012860	DeclStmt									
ANR	5012861	Decl							FILE	FILE *	fp
ANR	5012862	DeclStmt									
ANR	5012863	Decl							FileLockBase	FileLockBase *	lock
ANR	5012864	DeclStmt									
ANR	5012865	Decl							bool	bool	use_xml
ANR	5012866	DeclStmt									
ANR	5012867	Decl							priv_state	priv_state	priv
ANR	5012868	DeclStmt									
ANR	5012869	Decl							time_t	time_t	before
ANR	5012870	DeclStmt									
ANR	5012871	Decl							time_t	time_t	after
ANR	5012872	DeclStmt									
ANR	5012873	Decl							int	int	status
ANR	5012874	DeclStmt									
ANR	5012875	Decl							const char	const char *	whence
ANR	5012876	DeclStmt									
ANR	5012877	Decl							char	char *	fname
ANR	5012878	Function	WriteUserLog :: doWriteEvent	1154:0:28116:29131							
ANR	5012879	FunctionDef	"WriteUserLog :: doWriteEvent (FILE * fp , ULogEvent * event , bool use_xml)"		5012878	0					
ANR	5012880	CompoundStatement		1156:0:28192:29131	5012878	0					
ANR	5012881	IdentifierDeclStatement	ClassAd * eventAd = NULL ;	1157:1:28195:28218	5012878	0	True				
ANR	5012882	IdentifierDecl	* eventAd = NULL		5012878	0					
ANR	5012883	IdentifierDeclType	ClassAd *		5012878	0					
ANR	5012884	Identifier	eventAd		5012878	1					
ANR	5012885	AssignmentExpression	* eventAd = NULL		5012878	2		=			
ANR	5012886	Identifier	NULL		5012878	0					
ANR	5012887	Identifier	NULL		5012878	1					
ANR	5012888	IdentifierDeclStatement	bool success = true ;	1158:1:28221:28240	5012878	1	True				
ANR	5012889	IdentifierDecl	success = true		5012878	0					
ANR	5012890	IdentifierDeclType	bool		5012878	0					
ANR	5012891	Identifier	success		5012878	1					
ANR	5012892	AssignmentExpression	success = true		5012878	2		=			
ANR	5012893	Identifier	true		5012878	0					
ANR	5012894	Identifier	true		5012878	1					
ANR	5012895	IfStatement	if ( use_xml )		5012878	2					
ANR	5012896	Condition	use_xml	1160:5:28248:28254	5012878	0	True				
ANR	5012897	Identifier	use_xml		5012878	0					
ANR	5012898	CompoundStatement		5:15:65:65	5012878	1					
ANR	5012899	ExpressionStatement	eventAd = event -> toClassAd ( )	1162:2:28263:28291	5012878	0	True				
ANR	5012900	AssignmentExpression	eventAd = event -> toClassAd ( )		5012878	0		=			
ANR	5012901	Identifier	eventAd		5012878	0					
ANR	5012902	CallExpression	event -> toClassAd ( )		5012878	1					
ANR	5012903	Callee	event -> toClassAd		5012878	0					
ANR	5012904	PtrMemberAccess	event -> toClassAd		5012878	0					
ANR	5012905	Identifier	event		5012878	0					
ANR	5012906	Identifier	toClassAd		5012878	1					
ANR	5012907	ArgumentList			5012878	1					
ANR	5012908	IfStatement	if ( ! eventAd )		5012878	1					
ANR	5012909	Condition	! eventAd	1163:6:28333:28340	5012878	0	True				
ANR	5012910	UnaryOperationExpression	! eventAd		5012878	0					
ANR	5012911	UnaryOperator	!		5012878	0					
ANR	5012912	Identifier	eventAd		5012878	1					
ANR	5012913	CompoundStatement		8:16:150:150	5012878	1					
ANR	5012914	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog Failed to convert event type # %d to classAd.\\n"" , event -> eventNumber )"	1164:3:28348:28462	5012878	0	True				
ANR	5012915	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog Failed to convert event type # %d to classAd.\\n"" , event -> eventNumber )"		5012878	0					
ANR	5012916	Callee	dprintf		5012878	0					
ANR	5012917	Identifier	dprintf		5012878	0					
ANR	5012918	ArgumentList	D_ALWAYS		5012878	1					
ANR	5012919	Argument	D_ALWAYS		5012878	0					
ANR	5012920	Identifier	D_ALWAYS		5012878	0					
ANR	5012921	Argument	"""WriteUserLog Failed to convert event type # %d to classAd.\\n"""		5012878	1					
ANR	5012922	PrimaryExpression	"""WriteUserLog Failed to convert event type # %d to classAd.\\n"""		5012878	0					
ANR	5012923	Argument	event -> eventNumber		5012878	2					
ANR	5012924	PtrMemberAccess	event -> eventNumber		5012878	0					
ANR	5012925	Identifier	event		5012878	0					
ANR	5012926	Identifier	eventNumber		5012878	1					
ANR	5012927	ExpressionStatement	success = false	1167:3:28467:28482	5012878	1	True				
ANR	5012928	AssignmentExpression	success = false		5012878	0		=			
ANR	5012929	Identifier	success		5012878	0					
ANR	5012930	Identifier	false		5012878	1					
ANR	5012931	ElseStatement	else		5012878	0					
ANR	5012932	CompoundStatement		15:3:324:349	5012878	0					
ANR	5012933	IdentifierDeclStatement	MyString adXML ;	1169:3:28498:28512	5012878	0	True				
ANR	5012934	IdentifierDecl	adXML		5012878	0					
ANR	5012935	IdentifierDeclType	MyString		5012878	0					
ANR	5012936	Identifier	adXML		5012878	1					
ANR	5012937	IdentifierDeclStatement	ClassAdXMLUnparser xmlunp ;	1170:3:28517:28542	5012878	1	True				
ANR	5012938	IdentifierDecl	xmlunp		5012878	0					
ANR	5012939	IdentifierDeclType	ClassAdXMLUnparser		5012878	0					
ANR	5012940	Identifier	xmlunp		5012878	1					
ANR	5012941	ExpressionStatement	xmlunp . SetUseCompactSpacing ( false )	1171:3:28547:28581	5012878	2	True				
ANR	5012942	CallExpression	xmlunp . SetUseCompactSpacing ( false )		5012878	0					
ANR	5012943	Callee	xmlunp . SetUseCompactSpacing		5012878	0					
ANR	5012944	MemberAccess	xmlunp . SetUseCompactSpacing		5012878	0					
ANR	5012945	Identifier	xmlunp		5012878	0					
ANR	5012946	Identifier	SetUseCompactSpacing		5012878	1					
ANR	5012947	ArgumentList	false		5012878	1					
ANR	5012948	Argument	false		5012878	0					
ANR	5012949	Identifier	false		5012878	0					
ANR	5012950	ExpressionStatement	xmlunp . SetOutputTargetType ( false )	1172:3:28586:28619	5012878	3	True				
ANR	5012951	CallExpression	xmlunp . SetOutputTargetType ( false )		5012878	0					
ANR	5012952	Callee	xmlunp . SetOutputTargetType		5012878	0					
ANR	5012953	MemberAccess	xmlunp . SetOutputTargetType		5012878	0					
ANR	5012954	Identifier	xmlunp		5012878	0					
ANR	5012955	Identifier	SetOutputTargetType		5012878	1					
ANR	5012956	ArgumentList	false		5012878	1					
ANR	5012957	Argument	false		5012878	0					
ANR	5012958	Identifier	false		5012878	0					
ANR	5012959	ExpressionStatement	"xmlunp . Unparse ( eventAd , adXML )"	1173:3:28624:28654	5012878	4	True				
ANR	5012960	CallExpression	"xmlunp . Unparse ( eventAd , adXML )"		5012878	0					
ANR	5012961	Callee	xmlunp . Unparse		5012878	0					
ANR	5012962	MemberAccess	xmlunp . Unparse		5012878	0					
ANR	5012963	Identifier	xmlunp		5012878	0					
ANR	5012964	Identifier	Unparse		5012878	1					
ANR	5012965	ArgumentList	eventAd		5012878	1					
ANR	5012966	Argument	eventAd		5012878	0					
ANR	5012967	Identifier	eventAd		5012878	0					
ANR	5012968	Argument	adXML		5012878	1					
ANR	5012969	Identifier	adXML		5012878	0					
ANR	5012970	IfStatement	if ( adXML . Length ( ) < 1 )		5012878	5					
ANR	5012971	Condition	adXML . Length ( ) < 1	1174:8:28664:28681	5012878	0	True				
ANR	5012972	RelationalExpression	adXML . Length ( ) < 1		5012878	0		<			
ANR	5012973	CallExpression	adXML . Length ( )		5012878	0					
ANR	5012974	Callee	adXML . Length		5012878	0					
ANR	5012975	MemberAccess	adXML . Length		5012878	0					
ANR	5012976	Identifier	adXML		5012878	0					
ANR	5012977	Identifier	Length		5012878	1					
ANR	5012978	ArgumentList			5012878	1					
ANR	5012979	PrimaryExpression	1		5012878	1					
ANR	5012980	CompoundStatement		19:29:492:492	5012878	1					
ANR	5012981	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog Failed to convert event type # %d to XML.\\n"" , event -> eventNumber )"	1175:4:28691:28803	5012878	0	True				
ANR	5012982	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog Failed to convert event type # %d to XML.\\n"" , event -> eventNumber )"		5012878	0					
ANR	5012983	Callee	dprintf		5012878	0					
ANR	5012984	Identifier	dprintf		5012878	0					
ANR	5012985	ArgumentList	D_ALWAYS		5012878	1					
ANR	5012986	Argument	D_ALWAYS		5012878	0					
ANR	5012987	Identifier	D_ALWAYS		5012878	0					
ANR	5012988	Argument	"""WriteUserLog Failed to convert event type # %d to XML.\\n"""		5012878	1					
ANR	5012989	PrimaryExpression	"""WriteUserLog Failed to convert event type # %d to XML.\\n"""		5012878	0					
ANR	5012990	Argument	event -> eventNumber		5012878	2					
ANR	5012991	PtrMemberAccess	event -> eventNumber		5012878	0					
ANR	5012992	Identifier	event		5012878	0					
ANR	5012993	Identifier	eventNumber		5012878	1					
ANR	5012994	IfStatement	"if ( fprintf ( fp , adXML . Value ( ) ) < 0 )"		5012878	6					
ANR	5012995	Condition	"fprintf ( fp , adXML . Value ( ) ) < 0"	1179:7:28817:28848	5012878	0	True				
ANR	5012996	RelationalExpression	"fprintf ( fp , adXML . Value ( ) ) < 0"		5012878	0		<			
ANR	5012997	CallExpression	"fprintf ( fp , adXML . Value ( ) )"		5012878	0					
ANR	5012998	Callee	fprintf		5012878	0					
ANR	5012999	Identifier	fprintf		5012878	0					
ANR	5013000	ArgumentList	fp		5012878	1					
ANR	5013001	Argument	fp		5012878	0					
ANR	5013002	Identifier	fp		5012878	0					
ANR	5013003	Argument	adXML . Value ( )		5012878	1					
ANR	5013004	CallExpression	adXML . Value ( )		5012878	0					
ANR	5013005	Callee	adXML . Value		5012878	0					
ANR	5013006	MemberAccess	adXML . Value		5012878	0					
ANR	5013007	Identifier	adXML		5012878	0					
ANR	5013008	Identifier	Value		5012878	1					
ANR	5013009	ArgumentList			5012878	1					
ANR	5013010	PrimaryExpression	0		5012878	1					
ANR	5013011	CompoundStatement		24:41:658:658	5012878	1					
ANR	5013012	ExpressionStatement	success = false	1180:4:28857:28872	5012878	0	True				
ANR	5013013	AssignmentExpression	success = false		5012878	0		=			
ANR	5013014	Identifier	success		5012878	0					
ANR	5013015	Identifier	false		5012878	1					
ANR	5013016	ElseStatement	else		5012878	0					
ANR	5013017	CompoundStatement		26:10:691:691	5012878	0					
ANR	5013018	ExpressionStatement	success = true	1182:4:28890:28904	5012878	0	True				
ANR	5013019	AssignmentExpression	success = true		5012878	0		=			
ANR	5013020	Identifier	success		5012878	0					
ANR	5013021	Identifier	true		5012878	1					
ANR	5013022	ElseStatement	else		5012878	0					
ANR	5013023	CompoundStatement		30:8:730:730	5012878	0					
ANR	5013024	ExpressionStatement	success = event -> putEvent ( fp )	1186:2:28927:28958	5012878	0	True				
ANR	5013025	AssignmentExpression	success = event -> putEvent ( fp )		5012878	0		=			
ANR	5013026	Identifier	success		5012878	0					
ANR	5013027	CallExpression	event -> putEvent ( fp )		5012878	1					
ANR	5013028	Callee	event -> putEvent		5012878	0					
ANR	5013029	PtrMemberAccess	event -> putEvent		5012878	0					
ANR	5013030	Identifier	event		5012878	0					
ANR	5013031	Identifier	putEvent		5012878	1					
ANR	5013032	ArgumentList	fp		5012878	1					
ANR	5013033	Argument	fp		5012878	0					
ANR	5013034	Identifier	fp		5012878	0					
ANR	5013035	IfStatement	if ( ! success )		5012878	1					
ANR	5013036	Condition	! success	1187:6:28966:28973	5012878	0	True				
ANR	5013037	UnaryOperationExpression	! success		5012878	0					
ANR	5013038	UnaryOperator	!		5012878	0					
ANR	5013039	Identifier	success		5012878	1					
ANR	5013040	CompoundStatement		32:16:783:783	5012878	1					
ANR	5013041	ExpressionStatement	"fputc ( '\\n' , fp )"	1188:3:28981:28997	5012878	0	True				
ANR	5013042	CallExpression	"fputc ( '\\n' , fp )"		5012878	0					
ANR	5013043	Callee	fputc		5012878	0					
ANR	5013044	Identifier	fputc		5012878	0					
ANR	5013045	ArgumentList	'\\n'		5012878	1					
ANR	5013046	Argument	'\\n'		5012878	0					
ANR	5013047	PrimaryExpression	'\\n'		5012878	0					
ANR	5013048	Argument	fp		5012878	1					
ANR	5013049	Identifier	fp		5012878	0					
ANR	5013050	IfStatement	"if ( fprintf ( fp , SynchDelimiter ) < 0 )"		5012878	2					
ANR	5013051	Condition	"fprintf ( fp , SynchDelimiter ) < 0"	1190:6:29009:29041	5012878	0	True				
ANR	5013052	RelationalExpression	"fprintf ( fp , SynchDelimiter ) < 0"		5012878	0		<			
ANR	5013053	CallExpression	"fprintf ( fp , SynchDelimiter )"		5012878	0					
ANR	5013054	Callee	fprintf		5012878	0					
ANR	5013055	Identifier	fprintf		5012878	0					
ANR	5013056	ArgumentList	fp		5012878	1					
ANR	5013057	Argument	fp		5012878	0					
ANR	5013058	Identifier	fp		5012878	0					
ANR	5013059	Argument	SynchDelimiter		5012878	1					
ANR	5013060	Identifier	SynchDelimiter		5012878	0					
ANR	5013061	PrimaryExpression	0		5012878	1					
ANR	5013062	CompoundStatement		35:41:851:851	5012878	1					
ANR	5013063	ExpressionStatement	success = false	1191:3:29049:29064	5012878	0	True				
ANR	5013064	AssignmentExpression	success = false		5012878	0		=			
ANR	5013065	Identifier	success		5012878	0					
ANR	5013066	Identifier	false		5012878	1					
ANR	5013067	IfStatement	if ( eventAd )		5012878	3					
ANR	5013068	Condition	eventAd	1195:6:29080:29086	5012878	0	True				
ANR	5013069	Identifier	eventAd		5012878	0					
ANR	5013070	CompoundStatement		40:16:897:897	5012878	1					
ANR	5013071	Statement	delete	1196:2:29094:29099	5012878	0	True				
ANR	5013072	ExpressionStatement	eventAd	1196:9:29101:29108	5012878	1	True				
ANR	5013073	Identifier	eventAd		5012878	0					
ANR	5013074	ReturnStatement	return success ;	1199:1:29115:29129	5012878	4	True				
ANR	5013075	Identifier	success		5012878	0					
ANR	5013076	ReturnType	bool		5012878	1					
ANR	5013077	Identifier	WriteUserLog :: doWriteEvent		5012878	2					
ANR	5013078	ParameterList	"FILE * fp , ULogEvent * event , bool use_xml"		5012878	3					
ANR	5013079	Parameter	FILE * fp	1155:28:28149:28156	5012878	0	True				
ANR	5013080	ParameterType	FILE *		5012878	0					
ANR	5013081	Identifier	fp		5012878	1					
ANR	5013082	Parameter	ULogEvent * event	1155:38:28159:28174	5012878	1	True				
ANR	5013083	ParameterType	ULogEvent *		5012878	0					
ANR	5013084	Identifier	event		5012878	1					
ANR	5013085	Parameter	bool use_xml	1155:56:28177:28188	5012878	2	True				
ANR	5013086	ParameterType	bool		5012878	0					
ANR	5013087	Identifier	use_xml		5012878	1					
ANR	5013088	CFGEntryNode	ENTRY		5012878		True				
ANR	5013089	CFGExitNode	EXIT		5012878		True				
ANR	5013090	Symbol	NULL		5012878						
ANR	5013091	Symbol	* event		5012878						
ANR	5013092	Symbol	D_ALWAYS		5012878						
ANR	5013093	Symbol	false		5012878						
ANR	5013094	Symbol	eventAd		5012878						
ANR	5013095	Symbol	fp		5012878						
ANR	5013096	Symbol	adXML . Value		5012878						
ANR	5013097	Symbol	SynchDelimiter		5012878						
ANR	5013098	Symbol	use_xml		5012878						
ANR	5013099	Symbol	fprintf		5012878						
ANR	5013100	Symbol	event -> toClassAd		5012878						
ANR	5013101	Symbol	adXML		5012878						
ANR	5013102	Symbol	success		5012878						
ANR	5013103	Symbol	true		5012878						
ANR	5013104	Symbol	xmlunp		5012878						
ANR	5013105	Symbol	adXML . Length		5012878						
ANR	5013106	Symbol	event -> putEvent		5012878						
ANR	5013107	Symbol	event		5012878						
ANR	5013108	Symbol	event -> eventNumber		5012878						
ANR	5013109	Function	WriteUserLog :: writeEvent	1205:0:29179:31199							
ANR	5013110	FunctionDef	"WriteUserLog :: writeEvent (ULogEvent * event , ClassAd * param_jobad , bool * written)"		5013109	0					
ANR	5013111	CompoundStatement		1209:0:29285:31199	5013109	0					
ANR	5013112	IfStatement	if ( written )		5013109	0					
ANR	5013113	Condition	written	1211:6:29326:29332	5013109	0	True				
ANR	5013114	Identifier	written		5013109	0					
ANR	5013115	CompoundStatement		3:16:50:50	5013109	1					
ANR	5013116	ExpressionStatement	* written = false	1212:2:29340:29356	5013109	0	True				
ANR	5013117	AssignmentExpression	* written = false		5013109	0		=			
ANR	5013118	UnaryOperationExpression	* written		5013109	0					
ANR	5013119	UnaryOperator	*		5013109	0					
ANR	5013120	Identifier	written		5013109	1					
ANR	5013121	Identifier	false		5013109	1					
ANR	5013122	IfStatement	if ( ! m_initialized )		5013109	1					
ANR	5013123	Condition	! m_initialized	1216:6:29436:29449	5013109	0	True				
ANR	5013124	UnaryOperationExpression	! m_initialized		5013109	0					
ANR	5013125	UnaryOperator	!		5013109	0					
ANR	5013126	Identifier	m_initialized		5013109	1					
ANR	5013127	CompoundStatement		8:23:167:167	5013109	1					
ANR	5013128	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""WriteUserLog: not initialized @ writeEvent()\\n"" )"	1217:2:29457:29534	5013109	0	True				
ANR	5013129	CallExpression	"dprintf ( D_FULLDEBUG , ""WriteUserLog: not initialized @ writeEvent()\\n"" )"		5013109	0					
ANR	5013130	Callee	dprintf		5013109	0					
ANR	5013131	Identifier	dprintf		5013109	0					
ANR	5013132	ArgumentList	D_FULLDEBUG		5013109	1					
ANR	5013133	Argument	D_FULLDEBUG		5013109	0					
ANR	5013134	Identifier	D_FULLDEBUG		5013109	0					
ANR	5013135	Argument	"""WriteUserLog: not initialized @ writeEvent()\\n"""		5013109	1					
ANR	5013136	PrimaryExpression	"""WriteUserLog: not initialized @ writeEvent()\\n"""		5013109	0					
ANR	5013137	ReturnStatement	return true ;	1219:2:29538:29549	5013109	1	True				
ANR	5013138	Identifier	true		5013109	0					
ANR	5013139	IfStatement	if ( ! event )		5013109	2					
ANR	5013140	Condition	! event	1223:5:29622:29627	5013109	0	True				
ANR	5013141	UnaryOperationExpression	! event		5013109	0					
ANR	5013142	UnaryOperator	!		5013109	0					
ANR	5013143	Identifier	event		5013109	1					
ANR	5013144	CompoundStatement		15:13:344:344	5013109	1					
ANR	5013145	ReturnStatement	return false ;	1224:2:29634:29646	5013109	0	True				
ANR	5013146	Identifier	false		5013109	0					
ANR	5013147	IfStatement	if ( m_fp )		5013109	3					
ANR	5013148	Condition	m_fp	1226:5:29656:29659	5013109	0	True				
ANR	5013149	Identifier	m_fp		5013109	0					
ANR	5013150	CompoundStatement		18:11:376:376	5013109	1					
ANR	5013151	IfStatement	if ( ! m_lock )		5013109	0					
ANR	5013152	Condition	! m_lock	1227:6:29670:29676	5013109	0	True				
ANR	5013153	UnaryOperationExpression	! m_lock		5013109	0					
ANR	5013154	UnaryOperator	!		5013109	0					
ANR	5013155	Identifier	m_lock		5013109	1					
ANR	5013156	CompoundStatement		19:15:393:393	5013109	1					
ANR	5013157	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog: No user log lock!\\n"" )"	1228:3:29684:29740	5013109	0	True				
ANR	5013158	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog: No user log lock!\\n"" )"		5013109	0					
ANR	5013159	Callee	dprintf		5013109	0					
ANR	5013160	Identifier	dprintf		5013109	0					
ANR	5013161	ArgumentList	D_ALWAYS		5013109	1					
ANR	5013162	Argument	D_ALWAYS		5013109	0					
ANR	5013163	Identifier	D_ALWAYS		5013109	0					
ANR	5013164	Argument	"""WriteUserLog: No user log lock!\\n"""		5013109	1					
ANR	5013165	PrimaryExpression	"""WriteUserLog: No user log lock!\\n"""		5013109	0					
ANR	5013166	ReturnStatement	return false ;	1229:3:29745:29757	5013109	1	True				
ANR	5013167	Identifier	false		5013109	0					
ANR	5013168	IfStatement	if ( ! openGlobalLog ( false ) )		5013109	4					
ANR	5013169	Condition	! openGlobalLog ( false )	1234:6:29797:29817	5013109	0	True				
ANR	5013170	UnaryOperationExpression	! openGlobalLog ( false )		5013109	0					
ANR	5013171	UnaryOperator	!		5013109	0					
ANR	5013172	CallExpression	openGlobalLog ( false )		5013109	1					
ANR	5013173	Callee	openGlobalLog		5013109	0					
ANR	5013174	Identifier	openGlobalLog		5013109	0					
ANR	5013175	ArgumentList	false		5013109	1					
ANR	5013176	Argument	false		5013109	0					
ANR	5013177	Identifier	false		5013109	0					
ANR	5013178	CompoundStatement		26:30:535:535	5013109	1					
ANR	5013179	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog: Failed to open global log!\\n"" )"	1235:2:29825:29890	5013109	0	True				
ANR	5013180	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog: Failed to open global log!\\n"" )"		5013109	0					
ANR	5013181	Callee	dprintf		5013109	0					
ANR	5013182	Identifier	dprintf		5013109	0					
ANR	5013183	ArgumentList	D_ALWAYS		5013109	1					
ANR	5013184	Argument	D_ALWAYS		5013109	0					
ANR	5013185	Identifier	D_ALWAYS		5013109	0					
ANR	5013186	Argument	"""WriteUserLog: Failed to open global log!\\n"""		5013109	1					
ANR	5013187	PrimaryExpression	"""WriteUserLog: Failed to open global log!\\n"""		5013109	0					
ANR	5013188	ReturnStatement	return false ;	1236:2:29894:29906	5013109	1	True				
ANR	5013189	Identifier	false		5013109	0					
ANR	5013190	ExpressionStatement	event -> cluster = m_cluster	1240:1:29939:29965	5013109	5	True				
ANR	5013191	AssignmentExpression	event -> cluster = m_cluster		5013109	0		=			
ANR	5013192	PtrMemberAccess	event -> cluster		5013109	0					
ANR	5013193	Identifier	event		5013109	0					
ANR	5013194	Identifier	cluster		5013109	1					
ANR	5013195	Identifier	m_cluster		5013109	1					
ANR	5013196	ExpressionStatement	event -> proc = m_proc	1241:1:29968:29988	5013109	6	True				
ANR	5013197	AssignmentExpression	event -> proc = m_proc		5013109	0		=			
ANR	5013198	PtrMemberAccess	event -> proc		5013109	0					
ANR	5013199	Identifier	event		5013109	0					
ANR	5013200	Identifier	proc		5013109	1					
ANR	5013201	Identifier	m_proc		5013109	1					
ANR	5013202	ExpressionStatement	event -> subproc = m_subproc	1242:1:29991:30017	5013109	7	True				
ANR	5013203	AssignmentExpression	event -> subproc = m_subproc		5013109	0		=			
ANR	5013204	PtrMemberAccess	event -> subproc		5013109	0					
ANR	5013205	Identifier	event		5013109	0					
ANR	5013206	Identifier	subproc		5013109	1					
ANR	5013207	Identifier	m_subproc		5013109	1					
ANR	5013208	ExpressionStatement	event -> setGlobalJobId ( m_gjid )	1243:1:30020:30049	5013109	8	True				
ANR	5013209	CallExpression	event -> setGlobalJobId ( m_gjid )		5013109	0					
ANR	5013210	Callee	event -> setGlobalJobId		5013109	0					
ANR	5013211	PtrMemberAccess	event -> setGlobalJobId		5013109	0					
ANR	5013212	Identifier	event		5013109	0					
ANR	5013213	Identifier	setGlobalJobId		5013109	1					
ANR	5013214	ArgumentList	m_gjid		5013109	1					
ANR	5013215	Argument	m_gjid		5013109	0					
ANR	5013216	Identifier	m_gjid		5013109	0					
ANR	5013217	IfStatement	if ( ! m_global_disable && m_global_path )		5013109	9					
ANR	5013218	Condition	! m_global_disable && m_global_path	1246:6:30081:30114	5013109	0	True				
ANR	5013219	AndExpression	! m_global_disable && m_global_path		5013109	0		&&			
ANR	5013220	UnaryOperationExpression	! m_global_disable		5013109	0					
ANR	5013221	UnaryOperator	!		5013109	0					
ANR	5013222	Identifier	m_global_disable		5013109	1					
ANR	5013223	Identifier	m_global_path		5013109	1					
ANR	5013224	CompoundStatement		43:2:983:1047	5013109	1					
ANR	5013225	IfStatement	"if ( ! doWriteEvent ( event , true , false , param_jobad ) )"		5013109	0					
ANR	5013226	Condition	"! doWriteEvent ( event , true , false , param_jobad )"	1247:7:30127:30173	5013109	0	True				
ANR	5013227	UnaryOperationExpression	"! doWriteEvent ( event , true , false , param_jobad )"		5013109	0					
ANR	5013228	UnaryOperator	!		5013109	0					
ANR	5013229	CallExpression	"doWriteEvent ( event , true , false , param_jobad )"		5013109	1					
ANR	5013230	Callee	doWriteEvent		5013109	0					
ANR	5013231	Identifier	doWriteEvent		5013109	0					
ANR	5013232	ArgumentList	event		5013109	1					
ANR	5013233	Argument	event		5013109	0					
ANR	5013234	Identifier	event		5013109	0					
ANR	5013235	Argument	true		5013109	1					
ANR	5013236	Identifier	true		5013109	0					
ANR	5013237	Argument	false		5013109	2					
ANR	5013238	Identifier	false		5013109	0					
ANR	5013239	Argument	param_jobad		5013109	3					
ANR	5013240	Identifier	param_jobad		5013109	0					
ANR	5013241	CompoundStatement		39:58:892:892	5013109	1					
ANR	5013242	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog: global doWriteEvent()!\\n"" )"	1248:3:30183:30244	5013109	0	True				
ANR	5013243	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog: global doWriteEvent()!\\n"" )"		5013109	0					
ANR	5013244	Callee	dprintf		5013109	0					
ANR	5013245	Identifier	dprintf		5013109	0					
ANR	5013246	ArgumentList	D_ALWAYS		5013109	1					
ANR	5013247	Argument	D_ALWAYS		5013109	0					
ANR	5013248	Identifier	D_ALWAYS		5013109	0					
ANR	5013249	Argument	"""WriteUserLog: global doWriteEvent()!\\n"""		5013109	1					
ANR	5013250	PrimaryExpression	"""WriteUserLog: global doWriteEvent()!\\n"""		5013109	0					
ANR	5013251	ReturnStatement	return false ;	1249:3:30249:30261	5013109	1	True				
ANR	5013252	Identifier	false		5013109	0					
ANR	5013253	IdentifierDeclStatement	"char * attrsToWrite = param ( ""EVENT_LOG_JOB_AD_INFORMATION_ATTRS"" ) ;"	1251:2:30269:30333	5013109	1	True				
ANR	5013254	IdentifierDecl	"* attrsToWrite = param ( ""EVENT_LOG_JOB_AD_INFORMATION_ATTRS"" )"		5013109	0					
ANR	5013255	IdentifierDeclType	char *		5013109	0					
ANR	5013256	Identifier	attrsToWrite		5013109	1					
ANR	5013257	AssignmentExpression	"* attrsToWrite = param ( ""EVENT_LOG_JOB_AD_INFORMATION_ATTRS"" )"		5013109	2		=			
ANR	5013258	Identifier	attrsToWrite		5013109	0					
ANR	5013259	CallExpression	"param ( ""EVENT_LOG_JOB_AD_INFORMATION_ATTRS"" )"		5013109	1					
ANR	5013260	Callee	param		5013109	0					
ANR	5013261	Identifier	param		5013109	0					
ANR	5013262	ArgumentList	"""EVENT_LOG_JOB_AD_INFORMATION_ATTRS"""		5013109	1					
ANR	5013263	Argument	"""EVENT_LOG_JOB_AD_INFORMATION_ATTRS"""		5013109	0					
ANR	5013264	PrimaryExpression	"""EVENT_LOG_JOB_AD_INFORMATION_ATTRS"""		5013109	0					
ANR	5013265	IfStatement	if ( attrsToWrite && * attrsToWrite )		5013109	2					
ANR	5013266	Condition	attrsToWrite && * attrsToWrite	1252:6:30341:30369	5013109	0	True				
ANR	5013267	AndExpression	attrsToWrite && * attrsToWrite		5013109	0		&&			
ANR	5013268	Identifier	attrsToWrite		5013109	0					
ANR	5013269	UnaryOperationExpression	* attrsToWrite		5013109	1					
ANR	5013270	UnaryOperator	*		5013109	0					
ANR	5013271	Identifier	attrsToWrite		5013109	1					
ANR	5013272	CompoundStatement		44:38:1087:1087	5013109	1					
ANR	5013273	ExpressionStatement	"writeJobAdInfoEvent ( attrsToWrite , event , param_jobad , true )"	1253:3:30378:30439	5013109	0	True				
ANR	5013274	CallExpression	"writeJobAdInfoEvent ( attrsToWrite , event , param_jobad , true )"		5013109	0					
ANR	5013275	Callee	writeJobAdInfoEvent		5013109	0					
ANR	5013276	Identifier	writeJobAdInfoEvent		5013109	0					
ANR	5013277	ArgumentList	attrsToWrite		5013109	1					
ANR	5013278	Argument	attrsToWrite		5013109	0					
ANR	5013279	Identifier	attrsToWrite		5013109	0					
ANR	5013280	Argument	event		5013109	1					
ANR	5013281	Identifier	event		5013109	0					
ANR	5013282	Argument	param_jobad		5013109	2					
ANR	5013283	Identifier	param_jobad		5013109	0					
ANR	5013284	Argument	true		5013109	3					
ANR	5013285	Identifier	true		5013109	0					
ANR	5013286	ExpressionStatement	free ( attrsToWrite )	1255:2:30447:30467	5013109	3	True				
ANR	5013287	CallExpression	free ( attrsToWrite )		5013109	0					
ANR	5013288	Callee	free		5013109	0					
ANR	5013289	Identifier	free		5013109	0					
ANR	5013290	ArgumentList	attrsToWrite		5013109	1					
ANR	5013291	Argument	attrsToWrite		5013109	0					
ANR	5013292	Identifier	attrsToWrite		5013109	0					
ANR	5013293	IfStatement	if ( m_global_close )		5013109	10					
ANR	5013294	Condition	m_global_close	1258:6:30479:30492	5013109	0	True				
ANR	5013295	Identifier	m_global_close		5013109	0					
ANR	5013296	CompoundStatement		50:23:1210:1210	5013109	1					
ANR	5013297	ExpressionStatement	closeGlobalLog ( )	1259:2:30500:30517	5013109	0	True				
ANR	5013298	CallExpression	closeGlobalLog ( )		5013109	0					
ANR	5013299	Callee	closeGlobalLog		5013109	0					
ANR	5013300	Identifier	closeGlobalLog		5013109	0					
ANR	5013301	ArgumentList			5013109	1					
ANR	5013302	IfStatement	if ( m_userlog_enable && m_fp )		5013109	11					
ANR	5013303	Condition	m_userlog_enable && m_fp	1263:6:30550:30573	5013109	0	True				
ANR	5013304	AndExpression	m_userlog_enable && m_fp		5013109	0		&&			
ANR	5013305	Identifier	m_userlog_enable		5013109	0					
ANR	5013306	Identifier	m_fp		5013109	1					
ANR	5013307	CompoundStatement		55:33:1291:1291	5013109	1					
ANR	5013308	IfStatement	"if ( ! doWriteEvent ( event , false , false , param_jobad ) )"		5013109	0					
ANR	5013309	Condition	"! doWriteEvent ( event , false , false , param_jobad )"	1264:7:30586:30633	5013109	0	True				
ANR	5013310	UnaryOperationExpression	"! doWriteEvent ( event , false , false , param_jobad )"		5013109	0					
ANR	5013311	UnaryOperator	!		5013109	0					
ANR	5013312	CallExpression	"doWriteEvent ( event , false , false , param_jobad )"		5013109	1					
ANR	5013313	Callee	doWriteEvent		5013109	0					
ANR	5013314	Identifier	doWriteEvent		5013109	0					
ANR	5013315	ArgumentList	event		5013109	1					
ANR	5013316	Argument	event		5013109	0					
ANR	5013317	Identifier	event		5013109	0					
ANR	5013318	Argument	false		5013109	1					
ANR	5013319	Identifier	false		5013109	0					
ANR	5013320	Argument	false		5013109	2					
ANR	5013321	Identifier	false		5013109	0					
ANR	5013322	Argument	param_jobad		5013109	3					
ANR	5013323	Identifier	param_jobad		5013109	0					
ANR	5013324	CompoundStatement		56:58:1351:1351	5013109	1					
ANR	5013325	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog: user doWriteEvent()!\\n"" )"	1265:3:30642:30701	5013109	0	True				
ANR	5013326	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog: user doWriteEvent()!\\n"" )"		5013109	0					
ANR	5013327	Callee	dprintf		5013109	0					
ANR	5013328	Identifier	dprintf		5013109	0					
ANR	5013329	ArgumentList	D_ALWAYS		5013109	1					
ANR	5013330	Argument	D_ALWAYS		5013109	0					
ANR	5013331	Identifier	D_ALWAYS		5013109	0					
ANR	5013332	Argument	"""WriteUserLog: user doWriteEvent()!\\n"""		5013109	1					
ANR	5013333	PrimaryExpression	"""WriteUserLog: user doWriteEvent()!\\n"""		5013109	0					
ANR	5013334	ReturnStatement	return false ;	1266:3:30706:30718	5013109	1	True				
ANR	5013335	Identifier	false		5013109	0					
ANR	5013336	IfStatement	if ( param_jobad )		5013109	1					
ANR	5013337	Condition	param_jobad	1269:6:30731:30741	5013109	0	True				
ANR	5013338	Identifier	param_jobad		5013109	0					
ANR	5013339	CompoundStatement		65:3:1616:1641	5013109	1					
ANR	5013340	IdentifierDeclStatement	char * attrsToWrite = NULL ;	1273:3:30902:30927	5013109	0	True				
ANR	5013341	IdentifierDecl	* attrsToWrite = NULL		5013109	0					
ANR	5013342	IdentifierDeclType	char *		5013109	0					
ANR	5013343	Identifier	attrsToWrite		5013109	1					
ANR	5013344	AssignmentExpression	* attrsToWrite = NULL		5013109	2		=			
ANR	5013345	Identifier	NULL		5013109	0					
ANR	5013346	Identifier	NULL		5013109	1					
ANR	5013347	ExpressionStatement	"param_jobad -> LookupString ( ""JobAdInformationAttrs"" , & attrsToWrite )"	1274:3:30932:30996	5013109	1	True				
ANR	5013348	CallExpression	"param_jobad -> LookupString ( ""JobAdInformationAttrs"" , & attrsToWrite )"		5013109	0					
ANR	5013349	Callee	param_jobad -> LookupString		5013109	0					
ANR	5013350	PtrMemberAccess	param_jobad -> LookupString		5013109	0					
ANR	5013351	Identifier	param_jobad		5013109	0					
ANR	5013352	Identifier	LookupString		5013109	1					
ANR	5013353	ArgumentList	"""JobAdInformationAttrs"""		5013109	1					
ANR	5013354	Argument	"""JobAdInformationAttrs"""		5013109	0					
ANR	5013355	PrimaryExpression	"""JobAdInformationAttrs"""		5013109	0					
ANR	5013356	Argument	& attrsToWrite		5013109	1					
ANR	5013357	UnaryOperationExpression	& attrsToWrite		5013109	0					
ANR	5013358	UnaryOperator	&		5013109	0					
ANR	5013359	Identifier	attrsToWrite		5013109	1					
ANR	5013360	IfStatement	if ( attrsToWrite && * attrsToWrite )		5013109	2					
ANR	5013361	Condition	attrsToWrite && * attrsToWrite	1275:7:31005:31033	5013109	0	True				
ANR	5013362	AndExpression	attrsToWrite && * attrsToWrite		5013109	0		&&			
ANR	5013363	Identifier	attrsToWrite		5013109	0					
ANR	5013364	UnaryOperationExpression	* attrsToWrite		5013109	1					
ANR	5013365	UnaryOperator	*		5013109	0					
ANR	5013366	Identifier	attrsToWrite		5013109	1					
ANR	5013367	CompoundStatement		67:39:1751:1751	5013109	1					
ANR	5013368	ExpressionStatement	"writeJobAdInfoEvent ( attrsToWrite , event , param_jobad , false )"	1276:4:31043:31105	5013109	0	True				
ANR	5013369	CallExpression	"writeJobAdInfoEvent ( attrsToWrite , event , param_jobad , false )"		5013109	0					
ANR	5013370	Callee	writeJobAdInfoEvent		5013109	0					
ANR	5013371	Identifier	writeJobAdInfoEvent		5013109	0					
ANR	5013372	ArgumentList	attrsToWrite		5013109	1					
ANR	5013373	Argument	attrsToWrite		5013109	0					
ANR	5013374	Identifier	attrsToWrite		5013109	0					
ANR	5013375	Argument	event		5013109	1					
ANR	5013376	Identifier	event		5013109	0					
ANR	5013377	Argument	param_jobad		5013109	2					
ANR	5013378	Identifier	param_jobad		5013109	0					
ANR	5013379	Argument	false		5013109	3					
ANR	5013380	Identifier	false		5013109	0					
ANR	5013381	ExpressionStatement	free ( attrsToWrite )	1278:3:31115:31135	5013109	3	True				
ANR	5013382	CallExpression	free ( attrsToWrite )		5013109	0					
ANR	5013383	Callee	free		5013109	0					
ANR	5013384	Identifier	free		5013109	0					
ANR	5013385	ArgumentList	attrsToWrite		5013109	1					
ANR	5013386	Argument	attrsToWrite		5013109	0					
ANR	5013387	Identifier	attrsToWrite		5013109	0					
ANR	5013388	IfStatement	if ( written )		5013109	12					
ANR	5013389	Condition	written	1282:6:31151:31157	5013109	0	True				
ANR	5013390	Identifier	written		5013109	0					
ANR	5013391	CompoundStatement		74:16:1875:1875	5013109	1					
ANR	5013392	ExpressionStatement	* written = true	1283:2:31165:31180	5013109	0	True				
ANR	5013393	AssignmentExpression	* written = true		5013109	0		=			
ANR	5013394	UnaryOperationExpression	* written		5013109	0					
ANR	5013395	UnaryOperator	*		5013109	0					
ANR	5013396	Identifier	written		5013109	1					
ANR	5013397	Identifier	true		5013109	1					
ANR	5013398	ReturnStatement	return true ;	1285:1:31186:31197	5013109	13	True				
ANR	5013399	Identifier	true		5013109	0					
ANR	5013400	ReturnType	bool		5013109	1					
ANR	5013401	Identifier	WriteUserLog :: writeEvent		5013109	2					
ANR	5013402	ParameterList	"ULogEvent * event , ClassAd * param_jobad , bool * written"		5013109	3					
ANR	5013403	Parameter	ULogEvent * event	1206:27:29211:29226	5013109	0	True				
ANR	5013404	ParameterType	ULogEvent *		5013109	0					
ANR	5013405	Identifier	event		5013109	1					
ANR	5013406	Parameter	ClassAd * param_jobad	1207:9:29238:29257	5013109	1	True				
ANR	5013407	ParameterType	ClassAd *		5013109	0					
ANR	5013408	Identifier	param_jobad		5013109	1					
ANR	5013409	Parameter	bool * written	1208:9:29269:29281	5013109	2	True				
ANR	5013410	ParameterType	bool *		5013109	0					
ANR	5013411	Identifier	written		5013109	1					
ANR	5013412	CFGEntryNode	ENTRY		5013109		True				
ANR	5013413	CFGExitNode	EXIT		5013109		True				
ANR	5013414	Symbol	m_initialized		5013109						
ANR	5013415	Symbol	* event		5013109						
ANR	5013416	Symbol	m_cluster		5013109						
ANR	5013417	Symbol	& attrsToWrite		5013109						
ANR	5013418	Symbol	m_proc		5013109						
ANR	5013419	Symbol	* attrsToWrite		5013109						
ANR	5013420	Symbol	* written		5013109						
ANR	5013421	Symbol	event -> subproc		5013109						
ANR	5013422	Symbol	m_userlog_enable		5013109						
ANR	5013423	Symbol	m_lock		5013109						
ANR	5013424	Symbol	openGlobalLog		5013109						
ANR	5013425	Symbol	param		5013109						
ANR	5013426	Symbol	written		5013109						
ANR	5013427	Symbol	event		5013109						
ANR	5013428	Symbol	event -> proc		5013109						
ANR	5013429	Symbol	m_global_disable		5013109						
ANR	5013430	Symbol	m_global_path		5013109						
ANR	5013431	Symbol	NULL		5013109						
ANR	5013432	Symbol	m_subproc		5013109						
ANR	5013433	Symbol	false		5013109						
ANR	5013434	Symbol	D_ALWAYS		5013109						
ANR	5013435	Symbol	D_FULLDEBUG		5013109						
ANR	5013436	Symbol	m_global_close		5013109						
ANR	5013437	Symbol	m_fp		5013109						
ANR	5013438	Symbol	doWriteEvent		5013109						
ANR	5013439	Symbol	attrsToWrite		5013109						
ANR	5013440	Symbol	param_jobad		5013109						
ANR	5013441	Symbol	true		5013109						
ANR	5013442	Symbol	m_gjid		5013109						
ANR	5013443	Symbol	event -> cluster		5013109						
ANR	5013444	Function	WriteUserLog :: writeJobAdInfoEvent	1288:0:31202:32799							
ANR	5013445	FunctionDef	"WriteUserLog :: writeJobAdInfoEvent (char const * attrsToWrite , ULogEvent * event , ClassAd * param_jobad , bool is_global_event)"		5013444	0					
ANR	5013446	CompoundStatement		1290:0:31330:32799	5013444	0					
ANR	5013447	IdentifierDeclStatement	ExprTree * tree ;	1291:1:31333:31347	5013444	0	True				
ANR	5013448	IdentifierDecl	* tree		5013444	0					
ANR	5013449	IdentifierDeclType	ExprTree *		5013444	0					
ANR	5013450	Identifier	tree		5013444	1					
ANR	5013451	IdentifierDeclStatement	EvalResult result ;	1292:1:31350:31367	5013444	1	True				
ANR	5013452	IdentifierDecl	result		5013444	0					
ANR	5013453	IdentifierDeclType	EvalResult		5013444	0					
ANR	5013454	Identifier	result		5013444	1					
ANR	5013455	IdentifierDeclStatement	char * curr ;	1293:1:31370:31380	5013444	2	True				
ANR	5013456	IdentifierDecl	* curr		5013444	0					
ANR	5013457	IdentifierDeclType	char *		5013444	0					
ANR	5013458	Identifier	curr		5013444	1					
ANR	5013459	IdentifierDeclStatement	ClassAd * eventAd = event -> toClassAd ( ) ;	1295:1:31384:31421	5013444	3	True				
ANR	5013460	IdentifierDecl	* eventAd = event -> toClassAd ( )		5013444	0					
ANR	5013461	IdentifierDeclType	ClassAd *		5013444	0					
ANR	5013462	Identifier	eventAd		5013444	1					
ANR	5013463	AssignmentExpression	* eventAd = event -> toClassAd ( )		5013444	2		=			
ANR	5013464	Identifier	eventAd		5013444	0					
ANR	5013465	CallExpression	event -> toClassAd ( )		5013444	1					
ANR	5013466	Callee	event -> toClassAd		5013444	0					
ANR	5013467	PtrMemberAccess	event -> toClassAd		5013444	0					
ANR	5013468	Identifier	event		5013444	0					
ANR	5013469	Identifier	toClassAd		5013444	1					
ANR	5013470	ArgumentList			5013444	1					
ANR	5013471	IdentifierDeclStatement	StringList attrs ( attrsToWrite ) ;	1297:1:31425:31455	5013444	4	True				
ANR	5013472	IdentifierDecl	attrs ( attrsToWrite )		5013444	0					
ANR	5013473	IdentifierDeclType	StringList		5013444	0					
ANR	5013474	Identifier	attrs		5013444	1					
ANR	5013475	Identifier	attrsToWrite		5013444	2					
ANR	5013476	ExpressionStatement	attrs . rewind ( )	1298:1:31458:31472	5013444	5	True				
ANR	5013477	CallExpression	attrs . rewind ( )		5013444	0					
ANR	5013478	Callee	attrs . rewind		5013444	0					
ANR	5013479	MemberAccess	attrs . rewind		5013444	0					
ANR	5013480	Identifier	attrs		5013444	0					
ANR	5013481	Identifier	rewind		5013444	1					
ANR	5013482	ArgumentList			5013444	1					
ANR	5013483	WhileStatement	while ( eventAd && param_jobad && ( curr = attrs . next ( ) ) )		5013444	6					
ANR	5013484	Condition	eventAd && param_jobad && ( curr = attrs . next ( ) )	1299:9:31483:31527	5013444	0	True				
ANR	5013485	AndExpression	eventAd && param_jobad && ( curr = attrs . next ( ) )		5013444	0		&&			
ANR	5013486	Identifier	eventAd		5013444	0					
ANR	5013487	AndExpression	param_jobad && ( curr = attrs . next ( ) )		5013444	1		&&			
ANR	5013488	Identifier	param_jobad		5013444	0					
ANR	5013489	AssignmentExpression	curr = attrs . next ( )		5013444	1		=			
ANR	5013490	Identifier	curr		5013444	0					
ANR	5013491	CallExpression	attrs . next ( )		5013444	1					
ANR	5013492	Callee	attrs . next		5013444	0					
ANR	5013493	MemberAccess	attrs . next		5013444	0					
ANR	5013494	Identifier	attrs		5013444	0					
ANR	5013495	Identifier	next		5013444	1					
ANR	5013496	ArgumentList			5013444	1					
ANR	5013497	CompoundStatement		11:1:201:201	5013444	1					
ANR	5013498	IfStatement	if ( ( tree = param_jobad -> LookupExpr ( curr ) ) )		5013444	0					
ANR	5013499	Condition	tree = param_jobad -> LookupExpr ( curr )	1301:7:31541:31576	5013444	0	True				
ANR	5013500	AssignmentExpression	tree = param_jobad -> LookupExpr ( curr )		5013444	0		=			
ANR	5013501	Identifier	tree		5013444	0					
ANR	5013502	CallExpression	param_jobad -> LookupExpr ( curr )		5013444	1					
ANR	5013503	Callee	param_jobad -> LookupExpr		5013444	0					
ANR	5013504	PtrMemberAccess	param_jobad -> LookupExpr		5013444	0					
ANR	5013505	Identifier	param_jobad		5013444	0					
ANR	5013506	Identifier	LookupExpr		5013444	1					
ANR	5013507	ArgumentList	curr		5013444	1					
ANR	5013508	Argument	curr		5013444	0					
ANR	5013509	Identifier	curr		5013444	0					
ANR	5013510	CompoundStatement		12:46:249:249	5013444	1					
ANR	5013511	IfStatement	"if ( EvalExprTree ( tree , param_jobad , NULL , & result ) )"		5013444	0					
ANR	5013512	Condition	"EvalExprTree ( tree , param_jobad , NULL , & result )"	1304:8:31677:31719	5013444	0	True				
ANR	5013513	CallExpression	"EvalExprTree ( tree , param_jobad , NULL , & result )"		5013444	0					
ANR	5013514	Callee	EvalExprTree		5013444	0					
ANR	5013515	Identifier	EvalExprTree		5013444	0					
ANR	5013516	ArgumentList	tree		5013444	1					
ANR	5013517	Argument	tree		5013444	0					
ANR	5013518	Identifier	tree		5013444	0					
ANR	5013519	Argument	param_jobad		5013444	1					
ANR	5013520	Identifier	param_jobad		5013444	0					
ANR	5013521	Argument	NULL		5013444	2					
ANR	5013522	Identifier	NULL		5013444	0					
ANR	5013523	Argument	& result		5013444	3					
ANR	5013524	UnaryOperationExpression	& result		5013444	0					
ANR	5013525	UnaryOperator	&		5013444	0					
ANR	5013526	Identifier	result		5013444	1					
ANR	5013527	CompoundStatement		15:54:392:392	5013444	1					
ANR	5013528	SwitchStatement	switch ( result . type )		5013444	0					
ANR	5013529	Condition	result . type	1306:12:31773:31783	5013444	0	True				
ANR	5013530	MemberAccess	result . type		5013444	0					
ANR	5013531	Identifier	result		5013444	0					
ANR	5013532	Identifier	type		5013444	1					
ANR	5013533	CompoundStatement		17:25:455:455	5013444	1					
ANR	5013534	Label	case LX_BOOL :	1307:4:31792:31804	5013444	0	True				
ANR	5013535	Identifier	LX_BOOL		5013444	0					
ANR	5013536	Label	case LX_INTEGER :	1308:4:31810:31825	5013444	1	True				
ANR	5013537	Identifier	LX_INTEGER		5013444	0					
ANR	5013538	ExpressionStatement	"eventAd -> Assign ( curr , result . i )"	1309:5:31832:31864	5013444	2	True				
ANR	5013539	CallExpression	"eventAd -> Assign ( curr , result . i )"		5013444	0					
ANR	5013540	Callee	eventAd -> Assign		5013444	0					
ANR	5013541	PtrMemberAccess	eventAd -> Assign		5013444	0					
ANR	5013542	Identifier	eventAd		5013444	0					
ANR	5013543	Identifier	Assign		5013444	1					
ANR	5013544	ArgumentList	curr		5013444	1					
ANR	5013545	Argument	curr		5013444	0					
ANR	5013546	Identifier	curr		5013444	0					
ANR	5013547	Argument	result . i		5013444	1					
ANR	5013548	MemberAccess	result . i		5013444	0					
ANR	5013549	Identifier	result		5013444	0					
ANR	5013550	Identifier	i		5013444	1					
ANR	5013551	BreakStatement	break ;	1310:5:31871:31876	5013444	3	True				
ANR	5013552	Label	case LX_FLOAT :	1311:4:31882:31895	5013444	4	True				
ANR	5013553	Identifier	LX_FLOAT		5013444	0					
ANR	5013554	ExpressionStatement	"eventAd -> Assign ( curr , result . f )"	1312:5:31902:31934	5013444	5	True				
ANR	5013555	CallExpression	"eventAd -> Assign ( curr , result . f )"		5013444	0					
ANR	5013556	Callee	eventAd -> Assign		5013444	0					
ANR	5013557	PtrMemberAccess	eventAd -> Assign		5013444	0					
ANR	5013558	Identifier	eventAd		5013444	0					
ANR	5013559	Identifier	Assign		5013444	1					
ANR	5013560	ArgumentList	curr		5013444	1					
ANR	5013561	Argument	curr		5013444	0					
ANR	5013562	Identifier	curr		5013444	0					
ANR	5013563	Argument	result . f		5013444	1					
ANR	5013564	MemberAccess	result . f		5013444	0					
ANR	5013565	Identifier	result		5013444	0					
ANR	5013566	Identifier	f		5013444	1					
ANR	5013567	BreakStatement	break ;	1313:5:31941:31946	5013444	6	True				
ANR	5013568	Label	case LX_STRING :	1314:4:31952:31966	5013444	7	True				
ANR	5013569	Identifier	LX_STRING		5013444	0					
ANR	5013570	ExpressionStatement	"eventAd -> Assign ( curr , result . s )"	1315:5:31973:32005	5013444	8	True				
ANR	5013571	CallExpression	"eventAd -> Assign ( curr , result . s )"		5013444	0					
ANR	5013572	Callee	eventAd -> Assign		5013444	0					
ANR	5013573	PtrMemberAccess	eventAd -> Assign		5013444	0					
ANR	5013574	Identifier	eventAd		5013444	0					
ANR	5013575	Identifier	Assign		5013444	1					
ANR	5013576	ArgumentList	curr		5013444	1					
ANR	5013577	Argument	curr		5013444	0					
ANR	5013578	Identifier	curr		5013444	0					
ANR	5013579	Argument	result . s		5013444	1					
ANR	5013580	MemberAccess	result . s		5013444	0					
ANR	5013581	Identifier	result		5013444	0					
ANR	5013582	Identifier	s		5013444	1					
ANR	5013583	BreakStatement	break ;	1316:5:32012:32017	5013444	9	True				
ANR	5013584	Label	default :	1317:4:32023:32030	5013444	10	True				
ANR	5013585	Identifier	default		5013444	0					
ANR	5013586	BreakStatement	break ;	1318:5:32037:32042	5013444	11	True				
ANR	5013587	IfStatement	if ( eventAd )		5013444	7					
ANR	5013588	Condition	eventAd	1328:6:32280:32286	5013444	0	True				
ANR	5013589	Identifier	eventAd		5013444	0					
ANR	5013590	CompoundStatement		43:2:1151:1183	5013444	1					
ANR	5013591	ExpressionStatement	"eventAd -> Assign ( ""TriggerEventTypeNumber"" , event -> eventNumber )"	1329:2:32295:32355	5013444	0	True				
ANR	5013592	CallExpression	"eventAd -> Assign ( ""TriggerEventTypeNumber"" , event -> eventNumber )"		5013444	0					
ANR	5013593	Callee	eventAd -> Assign		5013444	0					
ANR	5013594	PtrMemberAccess	eventAd -> Assign		5013444	0					
ANR	5013595	Identifier	eventAd		5013444	0					
ANR	5013596	Identifier	Assign		5013444	1					
ANR	5013597	ArgumentList	"""TriggerEventTypeNumber"""		5013444	1					
ANR	5013598	Argument	"""TriggerEventTypeNumber"""		5013444	0					
ANR	5013599	PrimaryExpression	"""TriggerEventTypeNumber"""		5013444	0					
ANR	5013600	Argument	event -> eventNumber		5013444	1					
ANR	5013601	PtrMemberAccess	event -> eventNumber		5013444	0					
ANR	5013602	Identifier	event		5013444	0					
ANR	5013603	Identifier	eventNumber		5013444	1					
ANR	5013604	ExpressionStatement	"eventAd -> Assign ( ""TriggerEventTypeName"" , event -> eventName ( ) )"	1330:2:32359:32417	5013444	1	True				
ANR	5013605	CallExpression	"eventAd -> Assign ( ""TriggerEventTypeName"" , event -> eventName ( ) )"		5013444	0					
ANR	5013606	Callee	eventAd -> Assign		5013444	0					
ANR	5013607	PtrMemberAccess	eventAd -> Assign		5013444	0					
ANR	5013608	Identifier	eventAd		5013444	0					
ANR	5013609	Identifier	Assign		5013444	1					
ANR	5013610	ArgumentList	"""TriggerEventTypeName"""		5013444	1					
ANR	5013611	Argument	"""TriggerEventTypeName"""		5013444	0					
ANR	5013612	PrimaryExpression	"""TriggerEventTypeName"""		5013444	0					
ANR	5013613	Argument	event -> eventName ( )		5013444	1					
ANR	5013614	CallExpression	event -> eventName ( )		5013444	0					
ANR	5013615	Callee	event -> eventName		5013444	0					
ANR	5013616	PtrMemberAccess	event -> eventName		5013444	0					
ANR	5013617	Identifier	event		5013444	0					
ANR	5013618	Identifier	eventName		5013444	1					
ANR	5013619	ArgumentList			5013444	1					
ANR	5013620	IdentifierDeclStatement	JobAdInformationEvent info_event ;	1332:2:32482:32514	5013444	2	True				
ANR	5013621	IdentifierDecl	info_event		5013444	0					
ANR	5013622	IdentifierDeclType	JobAdInformationEvent		5013444	0					
ANR	5013623	Identifier	info_event		5013444	1					
ANR	5013624	ExpressionStatement	"eventAd -> Assign ( ""EventTypeNumber"" , info_event . eventNumber )"	1333:2:32518:32575	5013444	3	True				
ANR	5013625	CallExpression	"eventAd -> Assign ( ""EventTypeNumber"" , info_event . eventNumber )"		5013444	0					
ANR	5013626	Callee	eventAd -> Assign		5013444	0					
ANR	5013627	PtrMemberAccess	eventAd -> Assign		5013444	0					
ANR	5013628	Identifier	eventAd		5013444	0					
ANR	5013629	Identifier	Assign		5013444	1					
ANR	5013630	ArgumentList	"""EventTypeNumber"""		5013444	1					
ANR	5013631	Argument	"""EventTypeNumber"""		5013444	0					
ANR	5013632	PrimaryExpression	"""EventTypeNumber"""		5013444	0					
ANR	5013633	Argument	info_event . eventNumber		5013444	1					
ANR	5013634	MemberAccess	info_event . eventNumber		5013444	0					
ANR	5013635	Identifier	info_event		5013444	0					
ANR	5013636	Identifier	eventNumber		5013444	1					
ANR	5013637	ExpressionStatement	info_event . initFromClassAd ( eventAd )	1334:2:32579:32614	5013444	4	True				
ANR	5013638	CallExpression	info_event . initFromClassAd ( eventAd )		5013444	0					
ANR	5013639	Callee	info_event . initFromClassAd		5013444	0					
ANR	5013640	MemberAccess	info_event . initFromClassAd		5013444	0					
ANR	5013641	Identifier	info_event		5013444	0					
ANR	5013642	Identifier	initFromClassAd		5013444	1					
ANR	5013643	ArgumentList	eventAd		5013444	1					
ANR	5013644	Argument	eventAd		5013444	0					
ANR	5013645	Identifier	eventAd		5013444	0					
ANR	5013646	ExpressionStatement	info_event . cluster = m_cluster	1335:2:32618:32648	5013444	5	True				
ANR	5013647	AssignmentExpression	info_event . cluster = m_cluster		5013444	0		=			
ANR	5013648	MemberAccess	info_event . cluster		5013444	0					
ANR	5013649	Identifier	info_event		5013444	0					
ANR	5013650	Identifier	cluster		5013444	1					
ANR	5013651	Identifier	m_cluster		5013444	1					
ANR	5013652	ExpressionStatement	info_event . proc = m_proc	1336:2:32652:32676	5013444	6	True				
ANR	5013653	AssignmentExpression	info_event . proc = m_proc		5013444	0		=			
ANR	5013654	MemberAccess	info_event . proc		5013444	0					
ANR	5013655	Identifier	info_event		5013444	0					
ANR	5013656	Identifier	proc		5013444	1					
ANR	5013657	Identifier	m_proc		5013444	1					
ANR	5013658	ExpressionStatement	info_event . subproc = m_subproc	1337:2:32680:32710	5013444	7	True				
ANR	5013659	AssignmentExpression	info_event . subproc = m_subproc		5013444	0		=			
ANR	5013660	MemberAccess	info_event . subproc		5013444	0					
ANR	5013661	Identifier	info_event		5013444	0					
ANR	5013662	Identifier	subproc		5013444	1					
ANR	5013663	Identifier	m_subproc		5013444	1					
ANR	5013664	ExpressionStatement	"doWriteEvent ( & info_event , is_global_event , false , param_jobad )"	1338:2:32714:32776	5013444	8	True				
ANR	5013665	CallExpression	"doWriteEvent ( & info_event , is_global_event , false , param_jobad )"		5013444	0					
ANR	5013666	Callee	doWriteEvent		5013444	0					
ANR	5013667	Identifier	doWriteEvent		5013444	0					
ANR	5013668	ArgumentList	& info_event		5013444	1					
ANR	5013669	Argument	& info_event		5013444	0					
ANR	5013670	UnaryOperationExpression	& info_event		5013444	0					
ANR	5013671	UnaryOperator	&		5013444	0					
ANR	5013672	Identifier	info_event		5013444	1					
ANR	5013673	Argument	is_global_event		5013444	1					
ANR	5013674	Identifier	is_global_event		5013444	0					
ANR	5013675	Argument	false		5013444	2					
ANR	5013676	Identifier	false		5013444	0					
ANR	5013677	Argument	param_jobad		5013444	3					
ANR	5013678	Identifier	param_jobad		5013444	0					
ANR	5013679	Statement	delete	1339:2:32780:32785	5013444	9	True				
ANR	5013680	ExpressionStatement	eventAd	1339:9:32787:32794	5013444	10	True				
ANR	5013681	Identifier	eventAd		5013444	0					
ANR	5013682	ReturnType	void		5013444	1					
ANR	5013683	Identifier	WriteUserLog :: writeJobAdInfoEvent		5013444	2					
ANR	5013684	ParameterList	"char const * attrsToWrite , ULogEvent * event , ClassAd * param_jobad , bool is_global_event"		5013444	3					
ANR	5013685	Parameter	char const * attrsToWrite	1289:34:31241:31264	5013444	0	True				
ANR	5013686	ParameterType	char const *		5013444	0					
ANR	5013687	Identifier	attrsToWrite		5013444	1					
ANR	5013688	Parameter	ULogEvent * event	1289:60:31267:31282	5013444	1	True				
ANR	5013689	ParameterType	ULogEvent *		5013444	0					
ANR	5013690	Identifier	event		5013444	1					
ANR	5013691	Parameter	ClassAd * param_jobad	1289:78:31285:31304	5013444	2	True				
ANR	5013692	ParameterType	ClassAd *		5013444	0					
ANR	5013693	Identifier	param_jobad		5013444	1					
ANR	5013694	Parameter	bool is_global_event	1289:100:31307:31326	5013444	3	True				
ANR	5013695	ParameterType	bool		5013444	0					
ANR	5013696	Identifier	is_global_event		5013444	1					
ANR	5013697	CFGEntryNode	ENTRY		5013444		True				
ANR	5013698	CFGExitNode	EXIT		5013444		True				
ANR	5013699	Symbol	* event		5013444						
ANR	5013700	Symbol	m_cluster		5013444						
ANR	5013701	Symbol	m_proc		5013444						
ANR	5013702	Symbol	info_event . proc		5013444						
ANR	5013703	Symbol	info_event . subproc		5013444						
ANR	5013704	Symbol	event -> toClassAd		5013444						
ANR	5013705	Symbol	result		5013444						
ANR	5013706	Symbol	& result		5013444						
ANR	5013707	Symbol	event		5013444						
ANR	5013708	Symbol	curr		5013444						
ANR	5013709	Symbol	event -> eventNumber		5013444						
ANR	5013710	Symbol	result . f		5013444						
ANR	5013711	Symbol	NULL		5013444						
ANR	5013712	Symbol	m_subproc		5013444						
ANR	5013713	Symbol	result . i		5013444						
ANR	5013714	Symbol	is_global_event		5013444						
ANR	5013715	Symbol	EvalExprTree		5013444						
ANR	5013716	Symbol	tree		5013444						
ANR	5013717	Symbol	false		5013444						
ANR	5013718	Symbol	eventAd		5013444						
ANR	5013719	Symbol	& info_event		5013444						
ANR	5013720	Symbol	event -> eventName		5013444						
ANR	5013721	Symbol	info_event . eventNumber		5013444						
ANR	5013722	Symbol	param_jobad -> LookupExpr		5013444						
ANR	5013723	Symbol	result . type		5013444						
ANR	5013724	Symbol	attrsToWrite		5013444						
ANR	5013725	Symbol	attrs		5013444						
ANR	5013726	Symbol	result . s		5013444						
ANR	5013727	Symbol	param_jobad		5013444						
ANR	5013728	Symbol	attrs . next		5013444						
ANR	5013729	Symbol	* param_jobad		5013444						
ANR	5013730	Symbol	info_event		5013444						
ANR	5013731	Symbol	info_event . cluster		5013444						
ANR	5013732	Function	WriteUserLog :: writeEventNoFsync	1343:0:32802:33081							
ANR	5013733	FunctionDef	"WriteUserLog :: writeEventNoFsync (ULogEvent * event , ClassAd * jobad , bool * written)"		5013732	0					
ANR	5013734	CompoundStatement		1346:0:32899:33081	5013732	0					
ANR	5013735	IdentifierDeclStatement	bool saved_fsync_setting = getEnableFsync ( ) ;	1347:1:32902:32945	5013732	0	True				
ANR	5013736	IdentifierDecl	saved_fsync_setting = getEnableFsync ( )		5013732	0					
ANR	5013737	IdentifierDeclType	bool		5013732	0					
ANR	5013738	Identifier	saved_fsync_setting		5013732	1					
ANR	5013739	AssignmentExpression	saved_fsync_setting = getEnableFsync ( )		5013732	2		=			
ANR	5013740	Identifier	saved_fsync_setting		5013732	0					
ANR	5013741	CallExpression	getEnableFsync ( )		5013732	1					
ANR	5013742	Callee	getEnableFsync		5013732	0					
ANR	5013743	Identifier	getEnableFsync		5013732	0					
ANR	5013744	ArgumentList			5013732	1					
ANR	5013745	ExpressionStatement	setEnableFsync ( false )	1348:1:32948:32971	5013732	1	True				
ANR	5013746	CallExpression	setEnableFsync ( false )		5013732	0					
ANR	5013747	Callee	setEnableFsync		5013732	0					
ANR	5013748	Identifier	setEnableFsync		5013732	0					
ANR	5013749	ArgumentList	false		5013732	1					
ANR	5013750	Argument	false		5013732	0					
ANR	5013751	Identifier	false		5013732	0					
ANR	5013752	IdentifierDeclStatement	"bool retval = writeEvent ( event , jobad , written ) ;"	1349:1:32974:33023	5013732	2	True				
ANR	5013753	IdentifierDecl	"retval = writeEvent ( event , jobad , written )"		5013732	0					
ANR	5013754	IdentifierDeclType	bool		5013732	0					
ANR	5013755	Identifier	retval		5013732	1					
ANR	5013756	AssignmentExpression	"retval = writeEvent ( event , jobad , written )"		5013732	2		=			
ANR	5013757	Identifier	retval		5013732	0					
ANR	5013758	CallExpression	"writeEvent ( event , jobad , written )"		5013732	1					
ANR	5013759	Callee	writeEvent		5013732	0					
ANR	5013760	Identifier	writeEvent		5013732	0					
ANR	5013761	ArgumentList	event		5013732	1					
ANR	5013762	Argument	event		5013732	0					
ANR	5013763	Identifier	event		5013732	0					
ANR	5013764	Argument	jobad		5013732	1					
ANR	5013765	Identifier	jobad		5013732	0					
ANR	5013766	Argument	written		5013732	2					
ANR	5013767	Identifier	written		5013732	0					
ANR	5013768	ExpressionStatement	setEnableFsync ( saved_fsync_setting )	1350:1:33026:33063	5013732	3	True				
ANR	5013769	CallExpression	setEnableFsync ( saved_fsync_setting )		5013732	0					
ANR	5013770	Callee	setEnableFsync		5013732	0					
ANR	5013771	Identifier	setEnableFsync		5013732	0					
ANR	5013772	ArgumentList	saved_fsync_setting		5013732	1					
ANR	5013773	Argument	saved_fsync_setting		5013732	0					
ANR	5013774	Identifier	saved_fsync_setting		5013732	0					
ANR	5013775	ReturnStatement	return retval ;	1351:1:33066:33079	5013732	4	True				
ANR	5013776	Identifier	retval		5013732	0					
ANR	5013777	ReturnType	bool		5013732	1					
ANR	5013778	Identifier	WriteUserLog :: writeEventNoFsync		5013732	2					
ANR	5013779	ParameterList	"ULogEvent * event , ClassAd * jobad , bool * written"		5013732	3					
ANR	5013780	Parameter	ULogEvent * event	1344:33:32840:32855	5013732	0	True				
ANR	5013781	ParameterType	ULogEvent *		5013732	0					
ANR	5013782	Identifier	event		5013732	1					
ANR	5013783	Parameter	ClassAd * jobad	1344:51:32858:32871	5013732	1	True				
ANR	5013784	ParameterType	ClassAd *		5013732	0					
ANR	5013785	Identifier	jobad		5013732	1					
ANR	5013786	Parameter	bool * written	1345:9:32883:32895	5013732	2	True				
ANR	5013787	ParameterType	bool *		5013732	0					
ANR	5013788	Identifier	written		5013732	1					
ANR	5013789	CFGEntryNode	ENTRY		5013732		True				
ANR	5013790	CFGExitNode	EXIT		5013732		True				
ANR	5013791	Symbol	saved_fsync_setting		5013732						
ANR	5013792	Symbol	getEnableFsync		5013732						
ANR	5013793	Symbol	writeEvent		5013732						
ANR	5013794	Symbol	false		5013732						
ANR	5013795	Symbol	jobad		5013732						
ANR	5013796	Symbol	written		5013732						
ANR	5013797	Symbol	event		5013732						
ANR	5013798	Symbol	retval		5013732						
ANR	5013799	Function	WriteUserLog :: GetGlobalIdBase	1355:0:33122:33510							
ANR	5013800	FunctionDef	WriteUserLog :: GetGlobalIdBase ()		5013799	0					
ANR	5013801	CompoundStatement		1357:0:33173:33510	5013799	0					
ANR	5013802	IfStatement	if ( m_global_id_base )		5013799	0					
ANR	5013803	Condition	m_global_id_base	1358:6:33181:33196	5013799	0	True				
ANR	5013804	Identifier	m_global_id_base		5013799	0					
ANR	5013805	CompoundStatement		2:25:26:26	5013799	1					
ANR	5013806	ReturnStatement	return m_global_id_base ;	1359:2:33204:33227	5013799	0	True				
ANR	5013807	Identifier	m_global_id_base		5013799	0					
ANR	5013808	IdentifierDeclStatement	MyString base ;	1361:1:33233:33246	5013799	1	True				
ANR	5013809	IdentifierDecl	base		5013799	0					
ANR	5013810	IdentifierDeclType	MyString		5013799	0					
ANR	5013811	Identifier	base		5013799	1					
ANR	5013812	ExpressionStatement	"base = """""	1362:1:33249:33258	5013799	2	True				
ANR	5013813	AssignmentExpression	"base = """""		5013799	0		=			
ANR	5013814	Identifier	base		5013799	0					
ANR	5013815	PrimaryExpression	""""""		5013799	1					
ANR	5013816	ExpressionStatement	base += getuid ( )	1363:1:33261:33277	5013799	3	True				
ANR	5013817	AssignmentExpression	base += getuid ( )		5013799	0		+=			
ANR	5013818	Identifier	base		5013799	0					
ANR	5013819	CallExpression	getuid ( )		5013799	1					
ANR	5013820	Callee	getuid		5013799	0					
ANR	5013821	Identifier	getuid		5013799	0					
ANR	5013822	ArgumentList			5013799	1					
ANR	5013823	ExpressionStatement	base += '.'	1364:1:33280:33291	5013799	4	True				
ANR	5013824	AssignmentExpression	base += '.'		5013799	0		+=			
ANR	5013825	Identifier	base		5013799	0					
ANR	5013826	PrimaryExpression	'.'		5013799	1					
ANR	5013827	ExpressionStatement	base += getpid ( )	1365:1:33294:33310	5013799	5	True				
ANR	5013828	AssignmentExpression	base += getpid ( )		5013799	0		+=			
ANR	5013829	Identifier	base		5013799	0					
ANR	5013830	CallExpression	getpid ( )		5013799	1					
ANR	5013831	Callee	getpid		5013799	0					
ANR	5013832	Identifier	getpid		5013799	0					
ANR	5013833	ArgumentList			5013799	1					
ANR	5013834	ExpressionStatement	base += '.'	1366:1:33313:33324	5013799	6	True				
ANR	5013835	AssignmentExpression	base += '.'		5013799	0		+=			
ANR	5013836	Identifier	base		5013799	0					
ANR	5013837	PrimaryExpression	'.'		5013799	1					
ANR	5013838	IdentifierDeclStatement	UtcTime utc ;	1368:1:33328:33339	5013799	7	True				
ANR	5013839	IdentifierDecl	utc		5013799	0					
ANR	5013840	IdentifierDeclType	UtcTime		5013799	0					
ANR	5013841	Identifier	utc		5013799	1					
ANR	5013842	ExpressionStatement	utc . getTime ( )	1369:1:33342:33355	5013799	8	True				
ANR	5013843	CallExpression	utc . getTime ( )		5013799	0					
ANR	5013844	Callee	utc . getTime		5013799	0					
ANR	5013845	MemberAccess	utc . getTime		5013799	0					
ANR	5013846	Identifier	utc		5013799	0					
ANR	5013847	Identifier	getTime		5013799	1					
ANR	5013848	ArgumentList			5013799	1					
ANR	5013849	ExpressionStatement	base += utc . seconds ( )	1370:1:33358:33379	5013799	9	True				
ANR	5013850	AssignmentExpression	base += utc . seconds ( )		5013799	0		+=			
ANR	5013851	Identifier	base		5013799	0					
ANR	5013852	CallExpression	utc . seconds ( )		5013799	1					
ANR	5013853	Callee	utc . seconds		5013799	0					
ANR	5013854	MemberAccess	utc . seconds		5013799	0					
ANR	5013855	Identifier	utc		5013799	0					
ANR	5013856	Identifier	seconds		5013799	1					
ANR	5013857	ArgumentList			5013799	1					
ANR	5013858	ExpressionStatement	base += '.'	1371:1:33382:33393	5013799	10	True				
ANR	5013859	AssignmentExpression	base += '.'		5013799	0		+=			
ANR	5013860	Identifier	base		5013799	0					
ANR	5013861	PrimaryExpression	'.'		5013799	1					
ANR	5013862	ExpressionStatement	base += utc . microseconds ( )	1372:1:33396:33422	5013799	11	True				
ANR	5013863	AssignmentExpression	base += utc . microseconds ( )		5013799	0		+=			
ANR	5013864	Identifier	base		5013799	0					
ANR	5013865	CallExpression	utc . microseconds ( )		5013799	1					
ANR	5013866	Callee	utc . microseconds		5013799	0					
ANR	5013867	MemberAccess	utc . microseconds		5013799	0					
ANR	5013868	Identifier	utc		5013799	0					
ANR	5013869	Identifier	microseconds		5013799	1					
ANR	5013870	ArgumentList			5013799	1					
ANR	5013871	ExpressionStatement	base += '.'	1373:1:33425:33436	5013799	12	True				
ANR	5013872	AssignmentExpression	base += '.'		5013799	0		+=			
ANR	5013873	Identifier	base		5013799	0					
ANR	5013874	PrimaryExpression	'.'		5013799	1					
ANR	5013875	ExpressionStatement	m_global_id_base = strdup ( base . Value ( ) )	1375:1:33440:33482	5013799	13	True				
ANR	5013876	AssignmentExpression	m_global_id_base = strdup ( base . Value ( ) )		5013799	0		=			
ANR	5013877	Identifier	m_global_id_base		5013799	0					
ANR	5013878	CallExpression	strdup ( base . Value ( ) )		5013799	1					
ANR	5013879	Callee	strdup		5013799	0					
ANR	5013880	Identifier	strdup		5013799	0					
ANR	5013881	ArgumentList	base . Value ( )		5013799	1					
ANR	5013882	Argument	base . Value ( )		5013799	0					
ANR	5013883	CallExpression	base . Value ( )		5013799	0					
ANR	5013884	Callee	base . Value		5013799	0					
ANR	5013885	MemberAccess	base . Value		5013799	0					
ANR	5013886	Identifier	base		5013799	0					
ANR	5013887	Identifier	Value		5013799	1					
ANR	5013888	ArgumentList			5013799	1					
ANR	5013889	ReturnStatement	return m_global_id_base ;	1376:1:33485:33508	5013799	14	True				
ANR	5013890	Identifier	m_global_id_base		5013799	0					
ANR	5013891	ReturnType	const char *		5013799	1					
ANR	5013892	Identifier	WriteUserLog :: GetGlobalIdBase		5013799	2					
ANR	5013893	ParameterList			5013799	3					
ANR	5013894	CFGEntryNode	ENTRY		5013799		True				
ANR	5013895	CFGExitNode	EXIT		5013799		True				
ANR	5013896	Symbol	m_global_id_base		5013799						
ANR	5013897	Symbol	getuid		5013799						
ANR	5013898	Symbol	utc		5013799						
ANR	5013899	Symbol	strdup		5013799						
ANR	5013900	Symbol	getpid		5013799						
ANR	5013901	Symbol	utc . seconds		5013799						
ANR	5013902	Symbol	base		5013799						
ANR	5013903	Symbol	utc . microseconds		5013799						
ANR	5013904	Symbol	base . Value		5013799						
ANR	5013905	Function	WriteUserLog :: GenerateGlobalId	1380:0:33548:33970							
ANR	5013906	FunctionDef	WriteUserLog :: GenerateGlobalId (MyString & id)		5013905	0					
ANR	5013907	CompoundStatement		1382:0:33600:33970	5013905	0					
ANR	5013908	IdentifierDeclStatement	UtcTime utc ;	1383:1:33603:33614	5013905	0	True				
ANR	5013909	IdentifierDecl	utc		5013905	0					
ANR	5013910	IdentifierDeclType	UtcTime		5013905	0					
ANR	5013911	Identifier	utc		5013905	1					
ANR	5013912	ExpressionStatement	utc . getTime ( )	1384:1:33617:33630	5013905	1	True				
ANR	5013913	CallExpression	utc . getTime ( )		5013905	0					
ANR	5013914	Callee	utc . getTime		5013905	0					
ANR	5013915	MemberAccess	utc . getTime		5013905	0					
ANR	5013916	Identifier	utc		5013905	0					
ANR	5013917	Identifier	getTime		5013905	1					
ANR	5013918	ArgumentList			5013905	1					
ANR	5013919	ExpressionStatement	"id = """""	1386:1:33634:33641	5013905	2	True				
ANR	5013920	AssignmentExpression	"id = """""		5013905	0		=			
ANR	5013921	Identifier	id		5013905	0					
ANR	5013922	PrimaryExpression	""""""		5013905	1					
ANR	5013923	IfStatement	if ( m_creator_name )		5013905	3					
ANR	5013924	Condition	m_creator_name	1389:6:33678:33691	5013905	0	True				
ANR	5013925	Identifier	m_creator_name		5013905	0					
ANR	5013926	CompoundStatement		8:23:94:94	5013905	1					
ANR	5013927	ExpressionStatement	id += m_creator_name	1390:2:33699:33719	5013905	0	True				
ANR	5013928	AssignmentExpression	id += m_creator_name		5013905	0		+=			
ANR	5013929	Identifier	id		5013905	0					
ANR	5013930	Identifier	m_creator_name		5013905	1					
ANR	5013931	ExpressionStatement	"id += ""."""	1391:2:33723:33732	5013905	1	True				
ANR	5013932	AssignmentExpression	"id += ""."""		5013905	0		+=			
ANR	5013933	Identifier	id		5013905	0					
ANR	5013934	PrimaryExpression	"""."""		5013905	1					
ANR	5013935	ExpressionStatement	id += GetGlobalIdBase ( )	1394:1:33739:33763	5013905	4	True				
ANR	5013936	AssignmentExpression	id += GetGlobalIdBase ( )		5013905	0		+=			
ANR	5013937	Identifier	id		5013905	0					
ANR	5013938	CallExpression	GetGlobalIdBase ( )		5013905	1					
ANR	5013939	Callee	GetGlobalIdBase		5013905	0					
ANR	5013940	Identifier	GetGlobalIdBase		5013905	0					
ANR	5013941	ArgumentList			5013905	1					
ANR	5013942	IfStatement	if ( m_global_sequence == 0 )		5013905	5					
ANR	5013943	Condition	m_global_sequence == 0	1397:6:33816:33837	5013905	0	True				
ANR	5013944	EqualityExpression	m_global_sequence == 0		5013905	0		==			
ANR	5013945	Identifier	m_global_sequence		5013905	0					
ANR	5013946	PrimaryExpression	0		5013905	1					
ANR	5013947	CompoundStatement		16:31:240:240	5013905	1					
ANR	5013948	ExpressionStatement	m_global_sequence = 1	1398:2:33845:33866	5013905	0	True				
ANR	5013949	AssignmentExpression	m_global_sequence = 1		5013905	0		=			
ANR	5013950	Identifier	m_global_sequence		5013905	0					
ANR	5013951	PrimaryExpression	1		5013905	1					
ANR	5013952	ExpressionStatement	id += m_global_sequence	1400:1:33872:33895	5013905	6	True				
ANR	5013953	AssignmentExpression	id += m_global_sequence		5013905	0		+=			
ANR	5013954	Identifier	id		5013905	0					
ANR	5013955	Identifier	m_global_sequence		5013905	1					
ANR	5013956	ExpressionStatement	id += '.'	1401:1:33898:33907	5013905	7	True				
ANR	5013957	AssignmentExpression	id += '.'		5013905	0		+=			
ANR	5013958	Identifier	id		5013905	0					
ANR	5013959	PrimaryExpression	'.'		5013905	1					
ANR	5013960	ExpressionStatement	id += utc . seconds ( )	1402:1:33910:33929	5013905	8	True				
ANR	5013961	AssignmentExpression	id += utc . seconds ( )		5013905	0		+=			
ANR	5013962	Identifier	id		5013905	0					
ANR	5013963	CallExpression	utc . seconds ( )		5013905	1					
ANR	5013964	Callee	utc . seconds		5013905	0					
ANR	5013965	MemberAccess	utc . seconds		5013905	0					
ANR	5013966	Identifier	utc		5013905	0					
ANR	5013967	Identifier	seconds		5013905	1					
ANR	5013968	ArgumentList			5013905	1					
ANR	5013969	ExpressionStatement	id += '.'	1403:1:33932:33941	5013905	9	True				
ANR	5013970	AssignmentExpression	id += '.'		5013905	0		+=			
ANR	5013971	Identifier	id		5013905	0					
ANR	5013972	PrimaryExpression	'.'		5013905	1					
ANR	5013973	ExpressionStatement	id += utc . microseconds ( )	1404:1:33944:33968	5013905	10	True				
ANR	5013974	AssignmentExpression	id += utc . microseconds ( )		5013905	0		+=			
ANR	5013975	Identifier	id		5013905	0					
ANR	5013976	CallExpression	utc . microseconds ( )		5013905	1					
ANR	5013977	Callee	utc . microseconds		5013905	0					
ANR	5013978	MemberAccess	utc . microseconds		5013905	0					
ANR	5013979	Identifier	utc		5013905	0					
ANR	5013980	Identifier	microseconds		5013905	1					
ANR	5013981	ArgumentList			5013905	1					
ANR	5013982	ReturnType	void		5013905	1					
ANR	5013983	Identifier	WriteUserLog :: GenerateGlobalId		5013905	2					
ANR	5013984	ParameterList	MyString & id		5013905	3					
ANR	5013985	Parameter	MyString & id	1381:32:33585:33596	5013905	0	True				
ANR	5013986	ParameterType	MyString &		5013905	0					
ANR	5013987	Identifier	id		5013905	1					
ANR	5013988	CFGEntryNode	ENTRY		5013905		True				
ANR	5013989	CFGExitNode	EXIT		5013905		True				
ANR	5013990	Symbol	m_creator_name		5013905						
ANR	5013991	Symbol	utc		5013905						
ANR	5013992	Symbol	id		5013905						
ANR	5013993	Symbol	m_global_sequence		5013905						
ANR	5013994	Symbol	utc . seconds		5013905						
ANR	5013995	Symbol	GetGlobalIdBase		5013905						
ANR	5013996	Symbol	utc . microseconds		5013905						
ANR	5013997	Function	WriteUserLog :: setEnableFsync	1413:0:34054:34131							
ANR	5013998	FunctionDef	WriteUserLog :: setEnableFsync (bool enabled)		5013997	0					
ANR	5013999	CompoundStatement		1414:43:34102:34131	5013997	0					
ANR	5014000	ExpressionStatement	m_enable_fsync = enabled	1415:1:34105:34129	5013997	0	True				
ANR	5014001	AssignmentExpression	m_enable_fsync = enabled		5013997	0		=			
ANR	5014002	Identifier	m_enable_fsync		5013997	0					
ANR	5014003	Identifier	enabled		5013997	1					
ANR	5014004	ReturnType	void		5013997	1					
ANR	5014005	Identifier	WriteUserLog :: setEnableFsync		5013997	2					
ANR	5014006	ParameterList	bool enabled		5013997	3					
ANR	5014007	Parameter	bool enabled	1414:29:34088:34099	5013997	0	True				
ANR	5014008	ParameterType	bool		5013997	0					
ANR	5014009	Identifier	enabled		5013997	1					
ANR	5014010	CFGEntryNode	ENTRY		5013997		True				
ANR	5014011	CFGExitNode	EXIT		5013997		True				
ANR	5014012	Symbol	m_enable_fsync		5013997						
ANR	5014013	Symbol	enabled		5013997						
ANR	5014014	Function	WriteUserLog :: getEnableFsync	1418:0:34134:34196							
ANR	5014015	FunctionDef	WriteUserLog :: getEnableFsync ()		5014014	0					
ANR	5014016	CompoundStatement		1419:31:34170:34196	5014014	0					
ANR	5014017	ReturnStatement	return m_enable_fsync ;	1420:1:34173:34194	5014014	0	True				
ANR	5014018	Identifier	m_enable_fsync		5014014	0					
ANR	5014019	ReturnType	bool		5014014	1					
ANR	5014020	Identifier	WriteUserLog :: getEnableFsync		5014014	2					
ANR	5014021	ParameterList			5014014	3					
ANR	5014022	CFGEntryNode	ENTRY		5014014		True				
ANR	5014023	CFGExitNode	EXIT		5014014		True				
ANR	5014024	Symbol	m_enable_fsync		5014014						
