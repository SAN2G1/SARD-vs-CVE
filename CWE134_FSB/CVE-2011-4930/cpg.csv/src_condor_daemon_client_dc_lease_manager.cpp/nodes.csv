command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3005944	File	data/converged/CVE-2011-4930_htcondor/src_condor_daemon_client_dc_lease_manager.cpp								
ANR	3005945	Function	DCLeaseManager :: DCLeaseManager	37:0:1190:1326							
ANR	3005946	FunctionDef	"DCLeaseManager :: DCLeaseManager (const char * daemon_name , const char * pool_name)"		3005945	0					
ANR	3005947	CompoundStatement		39:0:1324:1326	3005945	0					
ANR	3005948	Identifier	DCLeaseManager :: DCLeaseManager		3005945	1					
ANR	3005949	ParameterList	"const char * daemon_name , const char * pool_name"		3005945	2					
ANR	3005950	Parameter	const char * daemon_name	37:31:1221:1243	3005945	0	True				
ANR	3005951	ParameterType	const char *		3005945	0					
ANR	3005952	Identifier	daemon_name		3005945	1					
ANR	3005953	Parameter	const char * pool_name	37:56:1246:1266	3005945	1	True				
ANR	3005954	ParameterType	const char *		3005945	0					
ANR	3005955	Identifier	pool_name		3005945	1					
ANR	3005956	CFGEntryNode	ENTRY		3005945		True				
ANR	3005957	CFGExitNode	EXIT		3005945		True				
ANR	3005958	Symbol	daemon_name		3005945						
ANR	3005959	Symbol	pool_name		3005945						
ANR	3005960	Function	DCLeaseManager :: ~DCLeaseManager	43:0:1330:1372							
ANR	3005961	FunctionDef	DCLeaseManager :: ~DCLeaseManager ()		3005960	0					
ANR	3005962	CompoundStatement		44:0:1370:1372	3005960	0					
ANR	3005963	Identifier	DCLeaseManager :: ~DCLeaseManager		3005960	1					
ANR	3005964	ParameterList			3005960	2					
ANR	3005965	CFGEntryNode	ENTRY		3005960		True				
ANR	3005966	CFGExitNode	EXIT		3005960		True				
ANR	3005967	Function	DCLeaseManager :: getLeases	48:0:1376:2451							
ANR	3005968	FunctionDef	"DCLeaseManager :: getLeases (const classad :: ClassAd & request_ad , list < DCLeaseManagerLease * > & leases)"		3005967	0					
ANR	3005969	CompoundStatement		51:0:1492:2451	3005967	0					
ANR	3005970	IdentifierDeclStatement	CondorError errstack ;	53:1:1520:1540	3005967	0	True				
ANR	3005971	IdentifierDecl	errstack		3005967	0					
ANR	3005972	IdentifierDeclType	CondorError		3005967	0					
ANR	3005973	Identifier	errstack		3005967	1					
ANR	3005974	IdentifierDeclStatement	"ReliSock * rsock = ( ReliSock * ) startCommand ( LEASE_MANAGER_GET_LEASES , Stream :: reli_sock , 20 ) ;"	54:1:1543:1638	3005967	1	True				
ANR	3005975	IdentifierDecl	"* rsock = ( ReliSock * ) startCommand ( LEASE_MANAGER_GET_LEASES , Stream :: reli_sock , 20 )"		3005967	0					
ANR	3005976	IdentifierDeclType	ReliSock *		3005967	0					
ANR	3005977	Identifier	rsock		3005967	1					
ANR	3005978	AssignmentExpression	"* rsock = ( ReliSock * ) startCommand ( LEASE_MANAGER_GET_LEASES , Stream :: reli_sock , 20 )"		3005967	2		=			
ANR	3005979	Identifier	rsock		3005967	0					
ANR	3005980	CastExpression	"( ReliSock * ) startCommand ( LEASE_MANAGER_GET_LEASES , Stream :: reli_sock , 20 )"		3005967	1					
ANR	3005981	CastTarget	ReliSock *		3005967	0					
ANR	3005982	CallExpression	"startCommand ( LEASE_MANAGER_GET_LEASES , Stream :: reli_sock , 20 )"		3005967	1					
ANR	3005983	Callee	startCommand		3005967	0					
ANR	3005984	Identifier	startCommand		3005967	0					
ANR	3005985	ArgumentList	LEASE_MANAGER_GET_LEASES		3005967	1					
ANR	3005986	Argument	LEASE_MANAGER_GET_LEASES		3005967	0					
ANR	3005987	Identifier	LEASE_MANAGER_GET_LEASES		3005967	0					
ANR	3005988	Argument	Stream :: reli_sock		3005967	1					
ANR	3005989	Identifier	Stream :: reli_sock		3005967	0					
ANR	3005990	Argument	20		3005967	2					
ANR	3005991	PrimaryExpression	20		3005967	0					
ANR	3005992	IfStatement	if ( ! rsock )		3005967	2					
ANR	3005993	Condition	! rsock	56:6:1646:1652	3005967	0	True				
ANR	3005994	UnaryOperationExpression	! rsock		3005967	0					
ANR	3005995	UnaryOperator	!		3005967	0					
ANR	3005996	Identifier	rsock		3005967	1					
ANR	3005997	CompoundStatement		6:16:163:163	3005967	1					
ANR	3005998	ReturnStatement	return false ;	57:2:1660:1672	3005967	0	True				
ANR	3005999	Identifier	false		3005967	0					
ANR	3006000	IfStatement	"if ( ! StreamPut ( rsock , request_ad ) )"		3005967	3					
ANR	3006001	Condition	"! StreamPut ( rsock , request_ad )"	61:6:1725:1755	3005967	0	True				
ANR	3006002	UnaryOperationExpression	"! StreamPut ( rsock , request_ad )"		3005967	0					
ANR	3006003	UnaryOperator	!		3005967	0					
ANR	3006004	CallExpression	"StreamPut ( rsock , request_ad )"		3005967	1					
ANR	3006005	Callee	StreamPut		3005967	0					
ANR	3006006	Identifier	StreamPut		3005967	0					
ANR	3006007	ArgumentList	rsock		3005967	1					
ANR	3006008	Argument	rsock		3005967	0					
ANR	3006009	Identifier	rsock		3005967	0					
ANR	3006010	Argument	request_ad		3005967	1					
ANR	3006011	Identifier	request_ad		3005967	0					
ANR	3006012	CompoundStatement		11:40:266:266	3005967	1					
ANR	3006013	Statement	delete	62:2:1763:1768	3005967	0	True				
ANR	3006014	ExpressionStatement	rsock	62:9:1770:1775	3005967	1	True				
ANR	3006015	Identifier	rsock		3005967	0					
ANR	3006016	ReturnStatement	return false ;	63:2:1779:1791	3005967	2	True				
ANR	3006017	Identifier	false		3005967	0					
ANR	3006018	ExpressionStatement	rsock -> end_of_message ( )	66:1:1798:1821	3005967	4	True				
ANR	3006019	CallExpression	rsock -> end_of_message ( )		3005967	0					
ANR	3006020	Callee	rsock -> end_of_message		3005967	0					
ANR	3006021	PtrMemberAccess	rsock -> end_of_message		3005967	0					
ANR	3006022	Identifier	rsock		3005967	0					
ANR	3006023	Identifier	end_of_message		3005967	1					
ANR	3006024	ArgumentList			3005967	1					
ANR	3006025	ExpressionStatement	rsock -> decode ( )	69:1:1854:1869	3005967	5	True				
ANR	3006026	CallExpression	rsock -> decode ( )		3005967	0					
ANR	3006027	Callee	rsock -> decode		3005967	0					
ANR	3006028	PtrMemberAccess	rsock -> decode		3005967	0					
ANR	3006029	Identifier	rsock		3005967	0					
ANR	3006030	Identifier	decode		3005967	1					
ANR	3006031	ArgumentList			3005967	1					
ANR	3006032	IdentifierDeclStatement	int rc = 0 ;	71:1:1873:1884	3005967	6	True				
ANR	3006033	IdentifierDecl	rc = 0		3005967	0					
ANR	3006034	IdentifierDeclType	int		3005967	0					
ANR	3006035	Identifier	rc		3005967	1					
ANR	3006036	AssignmentExpression	rc = 0		3005967	2		=			
ANR	3006037	Identifier	rc		3005967	0					
ANR	3006038	PrimaryExpression	0		3005967	1					
ANR	3006039	IfStatement	if ( ! rsock -> code ( rc ) || ( rc != OK ) )		3005967	7					
ANR	3006040	Condition	! rsock -> code ( rc ) || ( rc != OK )	72:6:1892:1925	3005967	0	True				
ANR	3006041	OrExpression	! rsock -> code ( rc ) || ( rc != OK )		3005967	0		||			
ANR	3006042	UnaryOperationExpression	! rsock -> code ( rc )		3005967	0					
ANR	3006043	UnaryOperator	!		3005967	0					
ANR	3006044	CallExpression	rsock -> code ( rc )		3005967	1					
ANR	3006045	Callee	rsock -> code		3005967	0					
ANR	3006046	PtrMemberAccess	rsock -> code		3005967	0					
ANR	3006047	Identifier	rsock		3005967	0					
ANR	3006048	Identifier	code		3005967	1					
ANR	3006049	ArgumentList	rc		3005967	1					
ANR	3006050	Argument	rc		3005967	0					
ANR	3006051	Identifier	rc		3005967	0					
ANR	3006052	EqualityExpression	rc != OK		3005967	1		!=			
ANR	3006053	Identifier	rc		3005967	0					
ANR	3006054	Identifier	OK		3005967	1					
ANR	3006055	CompoundStatement		22:43:436:436	3005967	1					
ANR	3006056	ReturnStatement	return false ;	73:2:1933:1945	3005967	0	True				
ANR	3006057	Identifier	false		3005967	0					
ANR	3006058	IdentifierDeclStatement	int num_matches ;	76:1:1952:1968	3005967	8	True				
ANR	3006059	IdentifierDecl	num_matches		3005967	0					
ANR	3006060	IdentifierDeclType	int		3005967	0					
ANR	3006061	Identifier	num_matches		3005967	1					
ANR	3006062	IfStatement	if ( ! rsock -> code ( num_matches ) )		3005967	9					
ANR	3006063	Condition	! rsock -> code ( num_matches )	77:6:1976:2002	3005967	0	True				
ANR	3006064	UnaryOperationExpression	! rsock -> code ( num_matches )		3005967	0					
ANR	3006065	UnaryOperator	!		3005967	0					
ANR	3006066	CallExpression	rsock -> code ( num_matches )		3005967	1					
ANR	3006067	Callee	rsock -> code		3005967	0					
ANR	3006068	PtrMemberAccess	rsock -> code		3005967	0					
ANR	3006069	Identifier	rsock		3005967	0					
ANR	3006070	Identifier	code		3005967	1					
ANR	3006071	ArgumentList	num_matches		3005967	1					
ANR	3006072	Argument	num_matches		3005967	0					
ANR	3006073	Identifier	num_matches		3005967	0					
ANR	3006074	CompoundStatement		27:36:513:513	3005967	1					
ANR	3006075	Statement	delete	78:2:2010:2015	3005967	0	True				
ANR	3006076	ExpressionStatement	rsock	78:9:2017:2022	3005967	1	True				
ANR	3006077	Identifier	rsock		3005967	0					
ANR	3006078	ReturnStatement	return false ;	79:2:2026:2038	3005967	2	True				
ANR	3006079	Identifier	false		3005967	0					
ANR	3006080	IfStatement	if ( num_matches < 0 )		3005967	10					
ANR	3006081	Condition	num_matches < 0	81:6:2049:2063	3005967	0	True				
ANR	3006082	RelationalExpression	num_matches < 0		3005967	0		<			
ANR	3006083	Identifier	num_matches		3005967	0					
ANR	3006084	PrimaryExpression	0		3005967	1					
ANR	3006085	CompoundStatement		31:24:574:574	3005967	1					
ANR	3006086	ExpressionStatement	rsock -> close ( )	82:2:2071:2086	3005967	0	True				
ANR	3006087	CallExpression	rsock -> close ( )		3005967	0					
ANR	3006088	Callee	rsock -> close		3005967	0					
ANR	3006089	PtrMemberAccess	rsock -> close		3005967	0					
ANR	3006090	Identifier	rsock		3005967	0					
ANR	3006091	Identifier	close		3005967	1					
ANR	3006092	ArgumentList			3005967	1					
ANR	3006093	Statement	delete	83:2:2090:2095	3005967	1	True				
ANR	3006094	ExpressionStatement	rsock	83:9:2097:2102	3005967	2	True				
ANR	3006095	Identifier	rsock		3005967	0					
ANR	3006096	ReturnStatement	return true ;	84:2:2106:2117	3005967	3	True				
ANR	3006097	Identifier	true		3005967	0					
ANR	3006098	ForStatement	for ( int num = 0 ; num < num_matches ; num ++ )		3005967	11					
ANR	3006099	ForInit	int num = 0 ;	86:6:2128:2139	3005967	0	True				
ANR	3006100	IdentifierDeclStatement	int num = 0 ;		3005967	0					
ANR	3006101	IdentifierDecl	num = 0		3005967	0					
ANR	3006102	IdentifierDeclType	int		3005967	0					
ANR	3006103	Identifier	num		3005967	1					
ANR	3006104	AssignmentExpression	num = 0		3005967	2		=			
ANR	3006105	Identifier	num		3005967	0					
ANR	3006106	PrimaryExpression	0		3005967	1					
ANR	3006107	Condition	num < num_matches	86:20:2142:2158	3005967	1	True				
ANR	3006108	RelationalExpression	num < num_matches		3005967	0		<			
ANR	3006109	Identifier	num		3005967	0					
ANR	3006110	Identifier	num_matches		3005967	1					
ANR	3006111	PostIncDecOperationExpression	num ++	86:40:2162:2166	3005967	2	True				
ANR	3006112	Identifier	num		3005967	0					
ANR	3006113	IncDec	++		3005967	1					
ANR	3006114	CompoundStatement		43:2:819:877	3005967	3					
ANR	3006115	IdentifierDeclStatement	classad :: ClassAd * ad = new classad :: ClassAd ( ) ;	87:2:2174:2220	3005967	0	True				
ANR	3006116	IdentifierDecl	* ad = new classad :: ClassAd ( )		3005967	0					
ANR	3006117	IdentifierDeclType	classad :: ClassAd *		3005967	0					
ANR	3006118	Identifier	ad		3005967	1					
ANR	3006119	AssignmentExpression	* ad = new classad :: ClassAd ( )		3005967	2		=			
ANR	3006120	Identifier	ad		3005967	0					
ANR	3006121	UnaryExpression	new classad :: ClassAd ( )		3005967	1					
ANR	3006122	IfStatement	"if ( ! StreamGet ( rsock , * ad ) )"		3005967	1					
ANR	3006123	Condition	"! StreamGet ( rsock , * ad )"	88:7:2229:2252	3005967	0	True				
ANR	3006124	UnaryOperationExpression	"! StreamGet ( rsock , * ad )"		3005967	0					
ANR	3006125	UnaryOperator	!		3005967	0					
ANR	3006126	CallExpression	"StreamGet ( rsock , * ad )"		3005967	1					
ANR	3006127	Callee	StreamGet		3005967	0					
ANR	3006128	Identifier	StreamGet		3005967	0					
ANR	3006129	ArgumentList	rsock		3005967	1					
ANR	3006130	Argument	rsock		3005967	0					
ANR	3006131	Identifier	rsock		3005967	0					
ANR	3006132	Argument	* ad		3005967	1					
ANR	3006133	UnaryOperationExpression	* ad		3005967	0					
ANR	3006134	UnaryOperator	*		3005967	0					
ANR	3006135	Identifier	ad		3005967	1					
ANR	3006136	CompoundStatement		38:34:763:763	3005967	1					
ANR	3006137	Statement	delete	89:3:2261:2266	3005967	0	True				
ANR	3006138	ExpressionStatement	rsock	89:10:2268:2273	3005967	1	True				
ANR	3006139	Identifier	rsock		3005967	0					
ANR	3006140	Statement	delete	90:3:2278:2283	3005967	2	True				
ANR	3006141	ExpressionStatement	ad	90:10:2285:2287	3005967	3	True				
ANR	3006142	Identifier	ad		3005967	0					
ANR	3006143	ReturnStatement	return false ;	91:3:2292:2304	3005967	4	True				
ANR	3006144	Identifier	false		3005967	0					
ANR	3006145	IdentifierDeclStatement	DCLeaseManagerLease * lease = new DCLeaseManagerLease ( ad ) ;	93:2:2312:2370	3005967	2	True				
ANR	3006146	IdentifierDecl	* lease = new DCLeaseManagerLease ( ad )		3005967	0					
ANR	3006147	IdentifierDeclType	DCLeaseManagerLease *		3005967	0					
ANR	3006148	Identifier	lease		3005967	1					
ANR	3006149	AssignmentExpression	* lease = new DCLeaseManagerLease ( ad )		3005967	2		=			
ANR	3006150	Identifier	ad		3005967	0					
ANR	3006151	Identifier	ad		3005967	1					
ANR	3006152	ExpressionStatement	leases . push_back ( lease )	94:2:2374:2399	3005967	3	True				
ANR	3006153	CallExpression	leases . push_back ( lease )		3005967	0					
ANR	3006154	Callee	leases . push_back		3005967	0					
ANR	3006155	MemberAccess	leases . push_back		3005967	0					
ANR	3006156	Identifier	leases		3005967	0					
ANR	3006157	Identifier	push_back		3005967	1					
ANR	3006158	ArgumentList	lease		3005967	1					
ANR	3006159	Argument	lease		3005967	0					
ANR	3006160	Identifier	lease		3005967	0					
ANR	3006161	ExpressionStatement	rsock -> close ( )	97:1:2406:2420	3005967	12	True				
ANR	3006162	CallExpression	rsock -> close ( )		3005967	0					
ANR	3006163	Callee	rsock -> close		3005967	0					
ANR	3006164	PtrMemberAccess	rsock -> close		3005967	0					
ANR	3006165	Identifier	rsock		3005967	0					
ANR	3006166	Identifier	close		3005967	1					
ANR	3006167	ArgumentList			3005967	1					
ANR	3006168	Statement	delete	98:1:2423:2428	3005967	13	True				
ANR	3006169	ExpressionStatement	rsock	98:8:2430:2435	3005967	14	True				
ANR	3006170	Identifier	rsock		3005967	0					
ANR	3006171	ReturnStatement	return true ;	99:1:2438:2449	3005967	15	True				
ANR	3006172	Identifier	true		3005967	0					
ANR	3006173	ReturnType	bool		3005967	1					
ANR	3006174	Identifier	DCLeaseManager :: getLeases		3005967	2					
ANR	3006175	ParameterList	"const classad :: ClassAd & request_ad , list < DCLeaseManagerLease * > & leases"		3005967	3					
ANR	3006176	Parameter	const classad :: ClassAd & request_ad	49:27:1408:1441	3005967	0	True				
ANR	3006177	ParameterType	const classad :: ClassAd &		3005967	0					
ANR	3006178	Identifier	request_ad		3005967	1					
ANR	3006179	Parameter	list < DCLeaseManagerLease * > & leases	50:9:1453:1488	3005967	1	True				
ANR	3006180	ParameterType	list < DCLeaseManagerLease * > &		3005967	0					
ANR	3006181	Identifier	leases		3005967	1					
ANR	3006182	CFGEntryNode	ENTRY		3005967		True				
ANR	3006183	CFGExitNode	EXIT		3005967		True				
ANR	3006184	Symbol	LEASE_MANAGER_GET_LEASES		3005967						
ANR	3006185	Symbol	ad		3005967						
ANR	3006186	Symbol	request_ad		3005967						
ANR	3006187	Symbol	num		3005967						
ANR	3006188	Symbol	false		3005967						
ANR	3006189	Symbol	rsock		3005967						
ANR	3006190	Symbol	* ad		3005967						
ANR	3006191	Symbol	startCommand		3005967						
ANR	3006192	Symbol	StreamPut		3005967						
ANR	3006193	Symbol	leases		3005967						
ANR	3006194	Symbol	rc		3005967						
ANR	3006195	Symbol	errstack		3005967						
ANR	3006196	Symbol	StreamGet		3005967						
ANR	3006197	Symbol	true		3005967						
ANR	3006198	Symbol	Stream :: reli_sock		3005967						
ANR	3006199	Symbol	lease		3005967						
ANR	3006200	Symbol	OK		3005967						
ANR	3006201	Symbol	num_matches		3005967						
ANR	3006202	Symbol	* rsock		3005967						
ANR	3006203	Symbol	rsock -> code		3005967						
ANR	3006204	Function	DCLeaseManager :: getLeases	102:0:2454:3195							
ANR	3006205	FunctionDef	"DCLeaseManager :: getLeases (const char * requestor_name , int number_requested , int duration , const char * requirements , const char * rank , list < DCLeaseManagerLease * > & leases)"		3006204	0					
ANR	3006206	CompoundStatement		109:0:2678:3195	3006204	0					
ANR	3006207	IfStatement	if ( ( ! requestor_name ) || ( number_requested < 0 ) || ( duration < 0 ) )		3006204	0					
ANR	3006208	Condition	( ! requestor_name ) || ( number_requested < 0 ) || ( duration < 0 )	110:6:2686:2759	3006204	0	True				
ANR	3006209	OrExpression	( ! requestor_name ) || ( number_requested < 0 ) || ( duration < 0 )		3006204	0		||			
ANR	3006210	UnaryOperationExpression	! requestor_name		3006204	0					
ANR	3006211	UnaryOperator	!		3006204	0					
ANR	3006212	Identifier	requestor_name		3006204	1					
ANR	3006213	OrExpression	( number_requested < 0 ) || ( duration < 0 )		3006204	1		||			
ANR	3006214	RelationalExpression	number_requested < 0		3006204	0		<			
ANR	3006215	Identifier	number_requested		3006204	0					
ANR	3006216	PrimaryExpression	0		3006204	1					
ANR	3006217	RelationalExpression	duration < 0		3006204	1		<			
ANR	3006218	Identifier	duration		3006204	0					
ANR	3006219	PrimaryExpression	0		3006204	1					
ANR	3006220	CompoundStatement		4:22:84:84	3006204	1					
ANR	3006221	ReturnStatement	return false ;	113:2:2767:2779	3006204	0	True				
ANR	3006222	Identifier	false		3006204	0					
ANR	3006223	IdentifierDeclStatement	classad :: ClassAd ad ;	116:1:2786:2805	3006204	1	True				
ANR	3006224	IdentifierDecl	ad		3006204	0					
ANR	3006225	IdentifierDeclType	classad :: ClassAd		3006204	0					
ANR	3006226	Identifier	ad		3006204	1					
ANR	3006227	ExpressionStatement	"ad . InsertAttr ( ""Name"" , requestor_name )"	117:1:2808:2847	3006204	2	True				
ANR	3006228	CallExpression	"ad . InsertAttr ( ""Name"" , requestor_name )"		3006204	0					
ANR	3006229	Callee	ad . InsertAttr		3006204	0					
ANR	3006230	MemberAccess	ad . InsertAttr		3006204	0					
ANR	3006231	Identifier	ad		3006204	0					
ANR	3006232	Identifier	InsertAttr		3006204	1					
ANR	3006233	ArgumentList	"""Name"""		3006204	1					
ANR	3006234	Argument	"""Name"""		3006204	0					
ANR	3006235	PrimaryExpression	"""Name"""		3006204	0					
ANR	3006236	Argument	requestor_name		3006204	1					
ANR	3006237	Identifier	requestor_name		3006204	0					
ANR	3006238	ExpressionStatement	"ad . InsertAttr ( ""RequestCount"" , number_requested )"	118:1:2850:2899	3006204	3	True				
ANR	3006239	CallExpression	"ad . InsertAttr ( ""RequestCount"" , number_requested )"		3006204	0					
ANR	3006240	Callee	ad . InsertAttr		3006204	0					
ANR	3006241	MemberAccess	ad . InsertAttr		3006204	0					
ANR	3006242	Identifier	ad		3006204	0					
ANR	3006243	Identifier	InsertAttr		3006204	1					
ANR	3006244	ArgumentList	"""RequestCount"""		3006204	1					
ANR	3006245	Argument	"""RequestCount"""		3006204	0					
ANR	3006246	PrimaryExpression	"""RequestCount"""		3006204	0					
ANR	3006247	Argument	number_requested		3006204	1					
ANR	3006248	Identifier	number_requested		3006204	0					
ANR	3006249	ExpressionStatement	"ad . InsertAttr ( ""LeaseDuration"" , duration )"	119:1:2902:2944	3006204	4	True				
ANR	3006250	CallExpression	"ad . InsertAttr ( ""LeaseDuration"" , duration )"		3006204	0					
ANR	3006251	Callee	ad . InsertAttr		3006204	0					
ANR	3006252	MemberAccess	ad . InsertAttr		3006204	0					
ANR	3006253	Identifier	ad		3006204	0					
ANR	3006254	Identifier	InsertAttr		3006204	1					
ANR	3006255	ArgumentList	"""LeaseDuration"""		3006204	1					
ANR	3006256	Argument	"""LeaseDuration"""		3006204	0					
ANR	3006257	PrimaryExpression	"""LeaseDuration"""		3006204	0					
ANR	3006258	Argument	duration		3006204	1					
ANR	3006259	Identifier	duration		3006204	0					
ANR	3006260	IfStatement	if ( requirements )		3006204	5					
ANR	3006261	Condition	requirements	120:6:2952:2963	3006204	0	True				
ANR	3006262	Identifier	requirements		3006204	0					
ANR	3006263	CompoundStatement		14:2:325:389	3006204	1					
ANR	3006264	IdentifierDeclStatement	classad :: ClassAdParser parser ;	121:2:2971:3000	3006204	0	True				
ANR	3006265	IdentifierDecl	parser		3006204	0					
ANR	3006266	IdentifierDeclType	classad :: ClassAdParser		3006204	0					
ANR	3006267	Identifier	parser		3006204	1					
ANR	3006268	IdentifierDeclStatement	classad :: ExprTree * expr = parser . ParseExpression ( requirements ) ;	122:2:3004:3068	3006204	1	True				
ANR	3006269	IdentifierDecl	* expr = parser . ParseExpression ( requirements )		3006204	0					
ANR	3006270	IdentifierDeclType	classad :: ExprTree *		3006204	0					
ANR	3006271	Identifier	expr		3006204	1					
ANR	3006272	AssignmentExpression	* expr = parser . ParseExpression ( requirements )		3006204	2		=			
ANR	3006273	Identifier	expr		3006204	0					
ANR	3006274	CallExpression	parser . ParseExpression ( requirements )		3006204	1					
ANR	3006275	Callee	parser . ParseExpression		3006204	0					
ANR	3006276	MemberAccess	parser . ParseExpression		3006204	0					
ANR	3006277	Identifier	parser		3006204	0					
ANR	3006278	Identifier	ParseExpression		3006204	1					
ANR	3006279	ArgumentList	requirements		3006204	1					
ANR	3006280	Argument	requirements		3006204	0					
ANR	3006281	Identifier	requirements		3006204	0					
ANR	3006282	ExpressionStatement	"ad . Insert ( ""Requirements"" , expr )"	123:2:3072:3105	3006204	2	True				
ANR	3006283	CallExpression	"ad . Insert ( ""Requirements"" , expr )"		3006204	0					
ANR	3006284	Callee	ad . Insert		3006204	0					
ANR	3006285	MemberAccess	ad . Insert		3006204	0					
ANR	3006286	Identifier	ad		3006204	0					
ANR	3006287	Identifier	Insert		3006204	1					
ANR	3006288	ArgumentList	"""Requirements"""		3006204	1					
ANR	3006289	Argument	"""Requirements"""		3006204	0					
ANR	3006290	PrimaryExpression	"""Requirements"""		3006204	0					
ANR	3006291	Argument	expr		3006204	1					
ANR	3006292	Identifier	expr		3006204	0					
ANR	3006293	IfStatement	if ( rank )		3006204	6					
ANR	3006294	Condition	rank	125:6:3116:3119	3006204	0	True				
ANR	3006295	Identifier	rank		3006204	0					
ANR	3006296	CompoundStatement		17:13:444:444	3006204	1					
ANR	3006297	ExpressionStatement	"ad . InsertAttr ( ""Rank"" , rank )"	126:2:3127:3156	3006204	0	True				
ANR	3006298	CallExpression	"ad . InsertAttr ( ""Rank"" , rank )"		3006204	0					
ANR	3006299	Callee	ad . InsertAttr		3006204	0					
ANR	3006300	MemberAccess	ad . InsertAttr		3006204	0					
ANR	3006301	Identifier	ad		3006204	0					
ANR	3006302	Identifier	InsertAttr		3006204	1					
ANR	3006303	ArgumentList	"""Rank"""		3006204	1					
ANR	3006304	Argument	"""Rank"""		3006204	0					
ANR	3006305	PrimaryExpression	"""Rank"""		3006204	0					
ANR	3006306	Argument	rank		3006204	1					
ANR	3006307	Identifier	rank		3006204	0					
ANR	3006308	ReturnStatement	"return getLeases ( ad , leases ) ;"	129:1:3163:3193	3006204	7	True				
ANR	3006309	CallExpression	"getLeases ( ad , leases )"		3006204	0					
ANR	3006310	Callee	getLeases		3006204	0					
ANR	3006311	Identifier	getLeases		3006204	0					
ANR	3006312	ArgumentList	ad		3006204	1					
ANR	3006313	Argument	ad		3006204	0					
ANR	3006314	Identifier	ad		3006204	0					
ANR	3006315	Argument	leases		3006204	1					
ANR	3006316	Identifier	leases		3006204	0					
ANR	3006317	ReturnType	bool		3006204	1					
ANR	3006318	Identifier	DCLeaseManager :: getLeases		3006204	2					
ANR	3006319	ParameterList	"const char * requestor_name , int number_requested , int duration , const char * requirements , const char * rank , list < DCLeaseManagerLease * > & leases"		3006204	3					
ANR	3006320	Parameter	const char * requestor_name	103:27:2486:2511	3006204	0	True				
ANR	3006321	ParameterType	const char *		3006204	0					
ANR	3006322	Identifier	requestor_name		3006204	1					
ANR	3006323	Parameter	int number_requested	104:9:2523:2542	3006204	1	True				
ANR	3006324	ParameterType	int		3006204	0					
ANR	3006325	Identifier	number_requested		3006204	1					
ANR	3006326	Parameter	int duration	105:9:2554:2565	3006204	2	True				
ANR	3006327	ParameterType	int		3006204	0					
ANR	3006328	Identifier	duration		3006204	1					
ANR	3006329	Parameter	const char * requirements	106:9:2577:2600	3006204	3	True				
ANR	3006330	ParameterType	const char *		3006204	0					
ANR	3006331	Identifier	requirements		3006204	1					
ANR	3006332	Parameter	const char * rank	107:9:2612:2627	3006204	4	True				
ANR	3006333	ParameterType	const char *		3006204	0					
ANR	3006334	Identifier	rank		3006204	1					
ANR	3006335	Parameter	list < DCLeaseManagerLease * > & leases	108:9:2639:2674	3006204	5	True				
ANR	3006336	ParameterType	list < DCLeaseManagerLease * > &		3006204	0					
ANR	3006337	Identifier	leases		3006204	1					
ANR	3006338	CFGEntryNode	ENTRY		3006204		True				
ANR	3006339	CFGExitNode	EXIT		3006204		True				
ANR	3006340	Symbol	duration		3006204						
ANR	3006341	Symbol	getLeases		3006204						
ANR	3006342	Symbol	leases		3006204						
ANR	3006343	Symbol	requirements		3006204						
ANR	3006344	Symbol	ad		3006204						
ANR	3006345	Symbol	parser		3006204						
ANR	3006346	Symbol	parser . ParseExpression		3006204						
ANR	3006347	Symbol	requestor_name		3006204						
ANR	3006348	Symbol	false		3006204						
ANR	3006349	Symbol	rank		3006204						
ANR	3006350	Symbol	expr		3006204						
ANR	3006351	Symbol	number_requested		3006204						
ANR	3006352	Function	DCLeaseManager :: renewLeases	132:0:3198:3945							
ANR	3006353	FunctionDef	"DCLeaseManager :: renewLeases (list < const DCLeaseManagerLease * > & leases , list < DCLeaseManagerLease * > & out_leases)"		3006352	0					
ANR	3006354	CompoundStatement		136:0:3321:3945	3006352	0					
ANR	3006355	IdentifierDeclStatement	"ReliSock * rsock = ( ReliSock * ) startCommand ( LEASE_MANAGER_RENEW_LEASE , Stream :: reli_sock , 20 ) ;"	138:1:3349:3445	3006352	0	True				
ANR	3006356	IdentifierDecl	"* rsock = ( ReliSock * ) startCommand ( LEASE_MANAGER_RENEW_LEASE , Stream :: reli_sock , 20 )"		3006352	0					
ANR	3006357	IdentifierDeclType	ReliSock *		3006352	0					
ANR	3006358	Identifier	rsock		3006352	1					
ANR	3006359	AssignmentExpression	"* rsock = ( ReliSock * ) startCommand ( LEASE_MANAGER_RENEW_LEASE , Stream :: reli_sock , 20 )"		3006352	2		=			
ANR	3006360	Identifier	rsock		3006352	0					
ANR	3006361	CastExpression	"( ReliSock * ) startCommand ( LEASE_MANAGER_RENEW_LEASE , Stream :: reli_sock , 20 )"		3006352	1					
ANR	3006362	CastTarget	ReliSock *		3006352	0					
ANR	3006363	CallExpression	"startCommand ( LEASE_MANAGER_RENEW_LEASE , Stream :: reli_sock , 20 )"		3006352	1					
ANR	3006364	Callee	startCommand		3006352	0					
ANR	3006365	Identifier	startCommand		3006352	0					
ANR	3006366	ArgumentList	LEASE_MANAGER_RENEW_LEASE		3006352	1					
ANR	3006367	Argument	LEASE_MANAGER_RENEW_LEASE		3006352	0					
ANR	3006368	Identifier	LEASE_MANAGER_RENEW_LEASE		3006352	0					
ANR	3006369	Argument	Stream :: reli_sock		3006352	1					
ANR	3006370	Identifier	Stream :: reli_sock		3006352	0					
ANR	3006371	Argument	20		3006352	2					
ANR	3006372	PrimaryExpression	20		3006352	0					
ANR	3006373	IfStatement	if ( ! rsock )		3006352	1					
ANR	3006374	Condition	! rsock	140:6:3453:3459	3006352	0	True				
ANR	3006375	UnaryOperationExpression	! rsock		3006352	0					
ANR	3006376	UnaryOperator	!		3006352	0					
ANR	3006377	Identifier	rsock		3006352	1					
ANR	3006378	CompoundStatement		5:16:141:141	3006352	1					
ANR	3006379	ReturnStatement	return false ;	141:2:3467:3479	3006352	0	True				
ANR	3006380	Identifier	false		3006352	0					
ANR	3006381	IfStatement	"if ( ! SendLeases ( rsock , leases ) )"		3006352	2					
ANR	3006382	Condition	"! SendLeases ( rsock , leases )"	145:6:3511:3538	3006352	0	True				
ANR	3006383	UnaryOperationExpression	"! SendLeases ( rsock , leases )"		3006352	0					
ANR	3006384	UnaryOperator	!		3006352	0					
ANR	3006385	CallExpression	"SendLeases ( rsock , leases )"		3006352	1					
ANR	3006386	Callee	SendLeases		3006352	0					
ANR	3006387	Identifier	SendLeases		3006352	0					
ANR	3006388	ArgumentList	rsock		3006352	1					
ANR	3006389	Argument	rsock		3006352	0					
ANR	3006390	Identifier	rsock		3006352	0					
ANR	3006391	Argument	leases		3006352	1					
ANR	3006392	Identifier	leases		3006352	0					
ANR	3006393	CompoundStatement		10:37:220:220	3006352	1					
ANR	3006394	Statement	delete	146:2:3546:3551	3006352	0	True				
ANR	3006395	ExpressionStatement	rsock	146:9:3553:3558	3006352	1	True				
ANR	3006396	Identifier	rsock		3006352	0					
ANR	3006397	ReturnStatement	return false ;	147:2:3562:3574	3006352	2	True				
ANR	3006398	Identifier	false		3006352	0					
ANR	3006399	ExpressionStatement	rsock -> end_of_message ( )	150:1:3581:3604	3006352	3	True				
ANR	3006400	CallExpression	rsock -> end_of_message ( )		3006352	0					
ANR	3006401	Callee	rsock -> end_of_message		3006352	0					
ANR	3006402	PtrMemberAccess	rsock -> end_of_message		3006352	0					
ANR	3006403	Identifier	rsock		3006352	0					
ANR	3006404	Identifier	end_of_message		3006352	1					
ANR	3006405	ArgumentList			3006352	1					
ANR	3006406	IdentifierDeclStatement	int rc ;	153:1:3637:3644	3006352	4	True				
ANR	3006407	IdentifierDecl	rc		3006352	0					
ANR	3006408	IdentifierDeclType	int		3006352	0					
ANR	3006409	Identifier	rc		3006352	1					
ANR	3006410	ExpressionStatement	rsock -> decode ( )	154:1:3647:3662	3006352	5	True				
ANR	3006411	CallExpression	rsock -> decode ( )		3006352	0					
ANR	3006412	Callee	rsock -> decode		3006352	0					
ANR	3006413	PtrMemberAccess	rsock -> decode		3006352	0					
ANR	3006414	Identifier	rsock		3006352	0					
ANR	3006415	Identifier	decode		3006352	1					
ANR	3006416	ArgumentList			3006352	1					
ANR	3006417	IfStatement	if ( ! rsock -> get ( rc ) )		3006352	6					
ANR	3006418	Condition	! rsock -> get ( rc )	155:6:3670:3686	3006352	0	True				
ANR	3006419	UnaryOperationExpression	! rsock -> get ( rc )		3006352	0					
ANR	3006420	UnaryOperator	!		3006352	0					
ANR	3006421	CallExpression	rsock -> get ( rc )		3006352	1					
ANR	3006422	Callee	rsock -> get		3006352	0					
ANR	3006423	PtrMemberAccess	rsock -> get		3006352	0					
ANR	3006424	Identifier	rsock		3006352	0					
ANR	3006425	Identifier	get		3006352	1					
ANR	3006426	ArgumentList	rc		3006352	1					
ANR	3006427	Argument	rc		3006352	0					
ANR	3006428	Identifier	rc		3006352	0					
ANR	3006429	CompoundStatement		20:26:368:368	3006352	1					
ANR	3006430	Statement	delete	156:2:3694:3699	3006352	0	True				
ANR	3006431	ExpressionStatement	rsock	156:9:3701:3706	3006352	1	True				
ANR	3006432	Identifier	rsock		3006352	0					
ANR	3006433	ReturnStatement	return false ;	157:2:3710:3722	3006352	2	True				
ANR	3006434	Identifier	false		3006352	0					
ANR	3006435	IfStatement	if ( rc != OK )		3006352	7					
ANR	3006436	Condition	rc != OK	159:6:3733:3740	3006352	0	True				
ANR	3006437	EqualityExpression	rc != OK		3006352	0		!=			
ANR	3006438	Identifier	rc		3006352	0					
ANR	3006439	Identifier	OK		3006352	1					
ANR	3006440	CompoundStatement		24:17:422:422	3006352	1					
ANR	3006441	Statement	delete	160:2:3748:3753	3006352	0	True				
ANR	3006442	ExpressionStatement	rsock	160:9:3755:3760	3006352	1	True				
ANR	3006443	Identifier	rsock		3006352	0					
ANR	3006444	ReturnStatement	return false ;	161:2:3764:3776	3006352	2	True				
ANR	3006445	Identifier	false		3006352	0					
ANR	3006446	IfStatement	"if ( ! GetLeases ( rsock , out_leases ) )"		3006352	8					
ANR	3006447	Condition	"! GetLeases ( rsock , out_leases )"	165:6:3827:3857	3006352	0	True				
ANR	3006448	UnaryOperationExpression	"! GetLeases ( rsock , out_leases )"		3006352	0					
ANR	3006449	UnaryOperator	!		3006352	0					
ANR	3006450	CallExpression	"GetLeases ( rsock , out_leases )"		3006352	1					
ANR	3006451	Callee	GetLeases		3006352	0					
ANR	3006452	Identifier	GetLeases		3006352	0					
ANR	3006453	ArgumentList	rsock		3006352	1					
ANR	3006454	Argument	rsock		3006352	0					
ANR	3006455	Identifier	rsock		3006352	0					
ANR	3006456	Argument	out_leases		3006352	1					
ANR	3006457	Identifier	out_leases		3006352	0					
ANR	3006458	CompoundStatement		30:40:539:539	3006352	1					
ANR	3006459	Statement	delete	166:2:3865:3870	3006352	0	True				
ANR	3006460	ExpressionStatement	rsock	166:9:3872:3877	3006352	1	True				
ANR	3006461	Identifier	rsock		3006352	0					
ANR	3006462	ReturnStatement	return false ;	167:2:3881:3893	3006352	2	True				
ANR	3006463	Identifier	false		3006352	0					
ANR	3006464	ExpressionStatement	rsock -> close ( )	170:1:3900:3914	3006352	9	True				
ANR	3006465	CallExpression	rsock -> close ( )		3006352	0					
ANR	3006466	Callee	rsock -> close		3006352	0					
ANR	3006467	PtrMemberAccess	rsock -> close		3006352	0					
ANR	3006468	Identifier	rsock		3006352	0					
ANR	3006469	Identifier	close		3006352	1					
ANR	3006470	ArgumentList			3006352	1					
ANR	3006471	Statement	delete	171:1:3917:3922	3006352	10	True				
ANR	3006472	ExpressionStatement	rsock	171:8:3924:3929	3006352	11	True				
ANR	3006473	Identifier	rsock		3006352	0					
ANR	3006474	ReturnStatement	return true ;	172:1:3932:3943	3006352	12	True				
ANR	3006475	Identifier	true		3006352	0					
ANR	3006476	ReturnType	bool		3006352	1					
ANR	3006477	Identifier	DCLeaseManager :: renewLeases		3006352	2					
ANR	3006478	ParameterList	"list < const DCLeaseManagerLease * > & leases , list < DCLeaseManagerLease * > & out_leases"		3006352	3					
ANR	3006479	Parameter	list < const DCLeaseManagerLease * > & leases	134:1:3233:3274	3006352	0	True				
ANR	3006480	ParameterType	list < const DCLeaseManagerLease * > &		3006352	0					
ANR	3006481	Identifier	leases		3006352	1					
ANR	3006482	Parameter	list < DCLeaseManagerLease * > & out_leases	135:1:3278:3317	3006352	1	True				
ANR	3006483	ParameterType	list < DCLeaseManagerLease * > &		3006352	0					
ANR	3006484	Identifier	out_leases		3006352	1					
ANR	3006485	CFGEntryNode	ENTRY		3006352		True				
ANR	3006486	CFGExitNode	EXIT		3006352		True				
ANR	3006487	Symbol	false		3006352						
ANR	3006488	Symbol	LEASE_MANAGER_RENEW_LEASE		3006352						
ANR	3006489	Symbol	rsock		3006352						
ANR	3006490	Symbol	startCommand		3006352						
ANR	3006491	Symbol	SendLeases		3006352						
ANR	3006492	Symbol	leases		3006352						
ANR	3006493	Symbol	rc		3006352						
ANR	3006494	Symbol	out_leases		3006352						
ANR	3006495	Symbol	true		3006352						
ANR	3006496	Symbol	Stream :: reli_sock		3006352						
ANR	3006497	Symbol	OK		3006352						
ANR	3006498	Symbol	* rsock		3006352						
ANR	3006499	Symbol	rsock -> get		3006352						
ANR	3006500	Symbol	GetLeases		3006352						
ANR	3006501	Function	DCLeaseManager :: releaseLeases	175:0:3948:4712							
ANR	3006502	FunctionDef	DCLeaseManager :: releaseLeases (list < DCLeaseManagerLease * > & leases)		3006501	0					
ANR	3006503	CompoundStatement		178:0:4023:4712	3006501	0					
ANR	3006504	IdentifierDeclStatement	"ReliSock * rsock = ( ReliSock * ) startCommand ( LEASE_MANAGER_RELEASE_LEASE , Stream :: reli_sock , 20 ) ;"	180:1:4051:4149	3006501	0	True				
ANR	3006505	IdentifierDecl	"* rsock = ( ReliSock * ) startCommand ( LEASE_MANAGER_RELEASE_LEASE , Stream :: reli_sock , 20 )"		3006501	0					
ANR	3006506	IdentifierDeclType	ReliSock *		3006501	0					
ANR	3006507	Identifier	rsock		3006501	1					
ANR	3006508	AssignmentExpression	"* rsock = ( ReliSock * ) startCommand ( LEASE_MANAGER_RELEASE_LEASE , Stream :: reli_sock , 20 )"		3006501	2		=			
ANR	3006509	Identifier	rsock		3006501	0					
ANR	3006510	CastExpression	"( ReliSock * ) startCommand ( LEASE_MANAGER_RELEASE_LEASE , Stream :: reli_sock , 20 )"		3006501	1					
ANR	3006511	CastTarget	ReliSock *		3006501	0					
ANR	3006512	CallExpression	"startCommand ( LEASE_MANAGER_RELEASE_LEASE , Stream :: reli_sock , 20 )"		3006501	1					
ANR	3006513	Callee	startCommand		3006501	0					
ANR	3006514	Identifier	startCommand		3006501	0					
ANR	3006515	ArgumentList	LEASE_MANAGER_RELEASE_LEASE		3006501	1					
ANR	3006516	Argument	LEASE_MANAGER_RELEASE_LEASE		3006501	0					
ANR	3006517	Identifier	LEASE_MANAGER_RELEASE_LEASE		3006501	0					
ANR	3006518	Argument	Stream :: reli_sock		3006501	1					
ANR	3006519	Identifier	Stream :: reli_sock		3006501	0					
ANR	3006520	Argument	20		3006501	2					
ANR	3006521	PrimaryExpression	20		3006501	0					
ANR	3006522	IfStatement	if ( ! rsock )		3006501	1					
ANR	3006523	Condition	! rsock	182:6:4157:4163	3006501	0	True				
ANR	3006524	UnaryOperationExpression	! rsock		3006501	0					
ANR	3006525	UnaryOperator	!		3006501	0					
ANR	3006526	Identifier	rsock		3006501	1					
ANR	3006527	CompoundStatement		5:16:143:143	3006501	1					
ANR	3006528	ReturnStatement	return false ;	183:2:4171:4183	3006501	0	True				
ANR	3006529	Identifier	false		3006501	0					
ANR	3006530	IfStatement	"if ( ! SendLeases ( rsock , DCLeaseManagerLease_getConstList ( leases ) ) )"		3006501	2					
ANR	3006531	Condition	"! SendLeases ( rsock , DCLeaseManagerLease_getConstList ( leases ) )"	187:6:4215:4275	3006501	0	True				
ANR	3006532	UnaryOperationExpression	"! SendLeases ( rsock , DCLeaseManagerLease_getConstList ( leases ) )"		3006501	0					
ANR	3006533	UnaryOperator	!		3006501	0					
ANR	3006534	CallExpression	"SendLeases ( rsock , DCLeaseManagerLease_getConstList ( leases ) )"		3006501	1					
ANR	3006535	Callee	SendLeases		3006501	0					
ANR	3006536	Identifier	SendLeases		3006501	0					
ANR	3006537	ArgumentList	rsock		3006501	1					
ANR	3006538	Argument	rsock		3006501	0					
ANR	3006539	Identifier	rsock		3006501	0					
ANR	3006540	Argument	DCLeaseManagerLease_getConstList ( leases )		3006501	1					
ANR	3006541	CallExpression	DCLeaseManagerLease_getConstList ( leases )		3006501	0					
ANR	3006542	Callee	DCLeaseManagerLease_getConstList		3006501	0					
ANR	3006543	Identifier	DCLeaseManagerLease_getConstList		3006501	0					
ANR	3006544	ArgumentList	leases		3006501	1					
ANR	3006545	Argument	leases		3006501	0					
ANR	3006546	Identifier	leases		3006501	0					
ANR	3006547	CompoundStatement		10:70:255:255	3006501	1					
ANR	3006548	Statement	delete	188:2:4283:4288	3006501	0	True				
ANR	3006549	ExpressionStatement	rsock	188:9:4290:4295	3006501	1	True				
ANR	3006550	Identifier	rsock		3006501	0					
ANR	3006551	ReturnStatement	return false ;	189:2:4299:4311	3006501	2	True				
ANR	3006552	Identifier	false		3006501	0					
ANR	3006553	ExpressionStatement	rsock -> end_of_message ( )	192:1:4318:4341	3006501	3	True				
ANR	3006554	CallExpression	rsock -> end_of_message ( )		3006501	0					
ANR	3006555	Callee	rsock -> end_of_message		3006501	0					
ANR	3006556	PtrMemberAccess	rsock -> end_of_message		3006501	0					
ANR	3006557	Identifier	rsock		3006501	0					
ANR	3006558	Identifier	end_of_message		3006501	1					
ANR	3006559	ArgumentList			3006501	1					
ANR	3006560	IdentifierDeclStatement	int rc ;	195:1:4374:4381	3006501	4	True				
ANR	3006561	IdentifierDecl	rc		3006501	0					
ANR	3006562	IdentifierDeclType	int		3006501	0					
ANR	3006563	Identifier	rc		3006501	1					
ANR	3006564	ExpressionStatement	rsock -> decode ( )	196:1:4384:4399	3006501	5	True				
ANR	3006565	CallExpression	rsock -> decode ( )		3006501	0					
ANR	3006566	Callee	rsock -> decode		3006501	0					
ANR	3006567	PtrMemberAccess	rsock -> decode		3006501	0					
ANR	3006568	Identifier	rsock		3006501	0					
ANR	3006569	Identifier	decode		3006501	1					
ANR	3006570	ArgumentList			3006501	1					
ANR	3006571	IfStatement	if ( ! rsock -> get ( rc ) )		3006501	6					
ANR	3006572	Condition	! rsock -> get ( rc )	197:6:4407:4423	3006501	0	True				
ANR	3006573	UnaryOperationExpression	! rsock -> get ( rc )		3006501	0					
ANR	3006574	UnaryOperator	!		3006501	0					
ANR	3006575	CallExpression	rsock -> get ( rc )		3006501	1					
ANR	3006576	Callee	rsock -> get		3006501	0					
ANR	3006577	PtrMemberAccess	rsock -> get		3006501	0					
ANR	3006578	Identifier	rsock		3006501	0					
ANR	3006579	Identifier	get		3006501	1					
ANR	3006580	ArgumentList	rc		3006501	1					
ANR	3006581	Argument	rc		3006501	0					
ANR	3006582	Identifier	rc		3006501	0					
ANR	3006583	CompoundStatement		20:26:403:403	3006501	1					
ANR	3006584	Statement	delete	198:2:4431:4436	3006501	0	True				
ANR	3006585	ExpressionStatement	rsock	198:9:4438:4443	3006501	1	True				
ANR	3006586	Identifier	rsock		3006501	0					
ANR	3006587	ReturnStatement	return false ;	199:2:4447:4459	3006501	2	True				
ANR	3006588	Identifier	false		3006501	0					
ANR	3006589	IdentifierDeclStatement	list < DCLeaseManagerLease * > :: iterator iter ;	203:1:4491:4534	3006501	7	True				
ANR	3006590	IdentifierDecl	iter		3006501	0					
ANR	3006591	IdentifierDeclType	list < DCLeaseManagerLease * > :: iterator		3006501	0					
ANR	3006592	Identifier	iter		3006501	1					
ANR	3006593	ForStatement	for ( iter = leases . begin ( ) ; iter != leases . end ( ) ; iter ++ )		3006501	8					
ANR	3006594	ForInit	iter = leases . begin ( ) ;	204:6:4542:4563	3006501	0	True				
ANR	3006595	AssignmentExpression	iter = leases . begin ( )		3006501	0		=			
ANR	3006596	Identifier	iter		3006501	0					
ANR	3006597	CallExpression	leases . begin ( )		3006501	1					
ANR	3006598	Callee	leases . begin		3006501	0					
ANR	3006599	MemberAccess	leases . begin		3006501	0					
ANR	3006600	Identifier	leases		3006501	0					
ANR	3006601	Identifier	begin		3006501	1					
ANR	3006602	ArgumentList			3006501	1					
ANR	3006603	Condition	iter != leases . end ( )	204:29:4565:4584	3006501	1	True				
ANR	3006604	EqualityExpression	iter != leases . end ( )		3006501	0		!=			
ANR	3006605	Identifier	iter		3006501	0					
ANR	3006606	CallExpression	leases . end ( )		3006501	1					
ANR	3006607	Callee	leases . end		3006501	0					
ANR	3006608	MemberAccess	leases . end		3006501	0					
ANR	3006609	Identifier	leases		3006501	0					
ANR	3006610	Identifier	end		3006501	1					
ANR	3006611	ArgumentList			3006501	1					
ANR	3006612	PostIncDecOperationExpression	iter ++	204:51:4587:4592	3006501	2	True				
ANR	3006613	Identifier	iter		3006501	0					
ANR	3006614	IncDec	++		3006501	1					
ANR	3006615	CompoundStatement		28:2:576:610	3006501	3					
ANR	3006616	IdentifierDeclStatement	DCLeaseManagerLease * lease = * iter ;	205:2:4600:4634	3006501	0	True				
ANR	3006617	IdentifierDecl	* lease = * iter		3006501	0					
ANR	3006618	IdentifierDeclType	DCLeaseManagerLease *		3006501	0					
ANR	3006619	Identifier	lease		3006501	1					
ANR	3006620	AssignmentExpression	* lease = * iter		3006501	2		=			
ANR	3006621	Identifier	lease		3006501	0					
ANR	3006622	UnaryOperationExpression	* iter		3006501	1					
ANR	3006623	UnaryOperator	*		3006501	0					
ANR	3006624	Identifier	iter		3006501	1					
ANR	3006625	ExpressionStatement	lease -> setDead ( true )	206:2:4638:4660	3006501	1	True				
ANR	3006626	CallExpression	lease -> setDead ( true )		3006501	0					
ANR	3006627	Callee	lease -> setDead		3006501	0					
ANR	3006628	PtrMemberAccess	lease -> setDead		3006501	0					
ANR	3006629	Identifier	lease		3006501	0					
ANR	3006630	Identifier	setDead		3006501	1					
ANR	3006631	ArgumentList	true		3006501	1					
ANR	3006632	Argument	true		3006501	0					
ANR	3006633	Identifier	true		3006501	0					
ANR	3006634	ExpressionStatement	rsock -> close ( )	209:1:4667:4681	3006501	9	True				
ANR	3006635	CallExpression	rsock -> close ( )		3006501	0					
ANR	3006636	Callee	rsock -> close		3006501	0					
ANR	3006637	PtrMemberAccess	rsock -> close		3006501	0					
ANR	3006638	Identifier	rsock		3006501	0					
ANR	3006639	Identifier	close		3006501	1					
ANR	3006640	ArgumentList			3006501	1					
ANR	3006641	Statement	delete	210:1:4684:4689	3006501	10	True				
ANR	3006642	ExpressionStatement	rsock	210:8:4691:4696	3006501	11	True				
ANR	3006643	Identifier	rsock		3006501	0					
ANR	3006644	ReturnStatement	return true ;	211:1:4699:4710	3006501	12	True				
ANR	3006645	Identifier	true		3006501	0					
ANR	3006646	ReturnType	bool		3006501	1					
ANR	3006647	Identifier	DCLeaseManager :: releaseLeases		3006501	2					
ANR	3006648	ParameterList	list < DCLeaseManagerLease * > & leases		3006501	3					
ANR	3006649	Parameter	list < DCLeaseManagerLease * > & leases	177:1:3985:4019	3006501	0	True				
ANR	3006650	ParameterType	list < DCLeaseManagerLease * > &		3006501	0					
ANR	3006651	Identifier	leases		3006501	1					
ANR	3006652	CFGEntryNode	ENTRY		3006501		True				
ANR	3006653	CFGExitNode	EXIT		3006501		True				
ANR	3006654	Symbol	DCLeaseManagerLease_getConstList		3006501						
ANR	3006655	Symbol	false		3006501						
ANR	3006656	Symbol	iter		3006501						
ANR	3006657	Symbol	leases . begin		3006501						
ANR	3006658	Symbol	rsock		3006501						
ANR	3006659	Symbol	startCommand		3006501						
ANR	3006660	Symbol	SendLeases		3006501						
ANR	3006661	Symbol	leases		3006501						
ANR	3006662	Symbol	rc		3006501						
ANR	3006663	Symbol	* iter		3006501						
ANR	3006664	Symbol	LEASE_MANAGER_RELEASE_LEASE		3006501						
ANR	3006665	Symbol	leases . end		3006501						
ANR	3006666	Symbol	true		3006501						
ANR	3006667	Symbol	Stream :: reli_sock		3006501						
ANR	3006668	Symbol	lease		3006501						
ANR	3006669	Symbol	* rsock		3006501						
ANR	3006670	Symbol	rsock -> get		3006501						
ANR	3006671	Function	DCLeaseManager :: SendLeases	214:0:4715:5271							
ANR	3006672	FunctionDef	"DCLeaseManager :: SendLeases (Stream * stream , list < const DCLeaseManagerLease * > & l_list)"		3006671	0					
ANR	3006673	CompoundStatement		218:0:4818:5271	3006671	0					
ANR	3006674	IfStatement	if ( ! stream -> put ( l_list . size ( ) ) )		3006671	0					
ANR	3006675	Condition	! stream -> put ( l_list . size ( ) )	219:6:4826:4854	3006671	0	True				
ANR	3006676	UnaryOperationExpression	! stream -> put ( l_list . size ( ) )		3006671	0					
ANR	3006677	UnaryOperator	!		3006671	0					
ANR	3006678	CallExpression	stream -> put ( l_list . size ( ) )		3006671	1					
ANR	3006679	Callee	stream -> put		3006671	0					
ANR	3006680	PtrMemberAccess	stream -> put		3006671	0					
ANR	3006681	Identifier	stream		3006671	0					
ANR	3006682	Identifier	put		3006671	1					
ANR	3006683	ArgumentList	l_list . size ( )		3006671	1					
ANR	3006684	Argument	l_list . size ( )		3006671	0					
ANR	3006685	CallExpression	l_list . size ( )		3006671	0					
ANR	3006686	Callee	l_list . size		3006671	0					
ANR	3006687	MemberAccess	l_list . size		3006671	0					
ANR	3006688	Identifier	l_list		3006671	0					
ANR	3006689	Identifier	size		3006671	1					
ANR	3006690	ArgumentList			3006671	1					
ANR	3006691	CompoundStatement		2:38:39:39	3006671	1					
ANR	3006692	ReturnStatement	return false ;	220:2:4862:4874	3006671	0	True				
ANR	3006693	Identifier	false		3006671	0					
ANR	3006694	IdentifierDeclStatement	list < const DCLeaseManagerLease * > :: iterator iter ;	223:1:4881:4930	3006671	1	True				
ANR	3006695	IdentifierDecl	iter		3006671	0					
ANR	3006696	IdentifierDeclType	list < const DCLeaseManagerLease * > :: iterator		3006671	0					
ANR	3006697	Identifier	iter		3006671	1					
ANR	3006698	ForStatement	for ( iter = l_list . begin ( ) ; iter != l_list . end ( ) ; iter ++ )		3006671	2					
ANR	3006699	ForInit	iter = l_list . begin ( ) ;	224:6:4938:4959	3006671	0	True				
ANR	3006700	AssignmentExpression	iter = l_list . begin ( )		3006671	0		=			
ANR	3006701	Identifier	iter		3006671	0					
ANR	3006702	CallExpression	l_list . begin ( )		3006671	1					
ANR	3006703	Callee	l_list . begin		3006671	0					
ANR	3006704	MemberAccess	l_list . begin		3006671	0					
ANR	3006705	Identifier	l_list		3006671	0					
ANR	3006706	Identifier	begin		3006671	1					
ANR	3006707	ArgumentList			3006671	1					
ANR	3006708	Condition	iter != l_list . end ( )	224:29:4961:4980	3006671	1	True				
ANR	3006709	EqualityExpression	iter != l_list . end ( )		3006671	0		!=			
ANR	3006710	Identifier	iter		3006671	0					
ANR	3006711	CallExpression	l_list . end ( )		3006671	1					
ANR	3006712	Callee	l_list . end		3006671	0					
ANR	3006713	MemberAccess	l_list . end		3006671	0					
ANR	3006714	Identifier	l_list		3006671	0					
ANR	3006715	Identifier	end		3006671	1					
ANR	3006716	ArgumentList			3006671	1					
ANR	3006717	PostIncDecOperationExpression	iter ++	224:51:4983:4988	3006671	2	True				
ANR	3006718	Identifier	iter		3006671	0					
ANR	3006719	IncDec	++		3006671	1					
ANR	3006720	CompoundStatement		9:2:221:272	3006671	3					
ANR	3006721	IdentifierDeclStatement	const DCLeaseManagerLease * lease = * iter ;	225:2:4996:5036	3006671	0	True				
ANR	3006722	IdentifierDecl	* lease = * iter		3006671	0					
ANR	3006723	IdentifierDeclType	const DCLeaseManagerLease *		3006671	0					
ANR	3006724	Identifier	lease		3006671	1					
ANR	3006725	AssignmentExpression	* lease = * iter		3006671	2		=			
ANR	3006726	Identifier	lease		3006671	0					
ANR	3006727	UnaryOperationExpression	* iter		3006671	1					
ANR	3006728	UnaryOperator	*		3006671	0					
ANR	3006729	Identifier	iter		3006671	1					
ANR	3006730	IdentifierDeclStatement	const char * lease_id_str = lease -> leaseId ( ) . c_str ( ) ;	226:2:5040:5091	3006671	1	True				
ANR	3006731	IdentifierDecl	* lease_id_str = lease -> leaseId ( ) . c_str ( )		3006671	0					
ANR	3006732	IdentifierDeclType	const char *		3006671	0					
ANR	3006733	Identifier	lease_id_str		3006671	1					
ANR	3006734	AssignmentExpression	* lease_id_str = lease -> leaseId ( ) . c_str ( )		3006671	2		=			
ANR	3006735	Identifier	lease_id_str		3006671	0					
ANR	3006736	CallExpression	lease -> leaseId ( ) . c_str ( )		3006671	1					
ANR	3006737	Callee	lease -> leaseId ( ) . c_str		3006671	0					
ANR	3006738	MemberAccess	lease -> leaseId ( ) . c_str		3006671	0					
ANR	3006739	CallExpression	lease -> leaseId ( )		3006671	0					
ANR	3006740	Callee	lease -> leaseId		3006671	0					
ANR	3006741	PtrMemberAccess	lease -> leaseId		3006671	0					
ANR	3006742	Identifier	lease		3006671	0					
ANR	3006743	Identifier	leaseId		3006671	1					
ANR	3006744	ArgumentList			3006671	1					
ANR	3006745	Identifier	c_str		3006671	1					
ANR	3006746	ArgumentList			3006671	1					
ANR	3006747	IfStatement	if ( ! stream -> put ( lease_id_str ) || ! stream -> put ( lease -> leaseDuration ( ) ) || ! stream -> put ( lease -> releaseLeaseWhenDone ( ) ) )		3006671	2					
ANR	3006748	Condition	! stream -> put ( lease_id_str ) || ! stream -> put ( lease -> leaseDuration ( ) ) || ! stream -> put ( lease -> releaseLeaseWhenDone ( ) )	227:7:5100:5226	3006671	0	True				
ANR	3006749	OrExpression	! stream -> put ( lease_id_str ) || ! stream -> put ( lease -> leaseDuration ( ) ) || ! stream -> put ( lease -> releaseLeaseWhenDone ( ) )		3006671	0		||			
ANR	3006750	UnaryOperationExpression	! stream -> put ( lease_id_str )		3006671	0					
ANR	3006751	UnaryOperator	!		3006671	0					
ANR	3006752	CallExpression	stream -> put ( lease_id_str )		3006671	1					
ANR	3006753	Callee	stream -> put		3006671	0					
ANR	3006754	PtrMemberAccess	stream -> put		3006671	0					
ANR	3006755	Identifier	stream		3006671	0					
ANR	3006756	Identifier	put		3006671	1					
ANR	3006757	ArgumentList	lease_id_str		3006671	1					
ANR	3006758	Argument	lease_id_str		3006671	0					
ANR	3006759	Identifier	lease_id_str		3006671	0					
ANR	3006760	OrExpression	! stream -> put ( lease -> leaseDuration ( ) ) || ! stream -> put ( lease -> releaseLeaseWhenDone ( ) )		3006671	1		||			
ANR	3006761	UnaryOperationExpression	! stream -> put ( lease -> leaseDuration ( ) )		3006671	0					
ANR	3006762	UnaryOperator	!		3006671	0					
ANR	3006763	CallExpression	stream -> put ( lease -> leaseDuration ( ) )		3006671	1					
ANR	3006764	Callee	stream -> put		3006671	0					
ANR	3006765	PtrMemberAccess	stream -> put		3006671	0					
ANR	3006766	Identifier	stream		3006671	0					
ANR	3006767	Identifier	put		3006671	1					
ANR	3006768	ArgumentList	lease -> leaseDuration ( )		3006671	1					
ANR	3006769	Argument	lease -> leaseDuration ( )		3006671	0					
ANR	3006770	CallExpression	lease -> leaseDuration ( )		3006671	0					
ANR	3006771	Callee	lease -> leaseDuration		3006671	0					
ANR	3006772	PtrMemberAccess	lease -> leaseDuration		3006671	0					
ANR	3006773	Identifier	lease		3006671	0					
ANR	3006774	Identifier	leaseDuration		3006671	1					
ANR	3006775	ArgumentList			3006671	1					
ANR	3006776	UnaryOperationExpression	! stream -> put ( lease -> releaseLeaseWhenDone ( ) )		3006671	1					
ANR	3006777	UnaryOperator	!		3006671	0					
ANR	3006778	CallExpression	stream -> put ( lease -> releaseLeaseWhenDone ( ) )		3006671	1					
ANR	3006779	Callee	stream -> put		3006671	0					
ANR	3006780	PtrMemberAccess	stream -> put		3006671	0					
ANR	3006781	Identifier	stream		3006671	0					
ANR	3006782	Identifier	put		3006671	1					
ANR	3006783	ArgumentList	lease -> releaseLeaseWhenDone ( )		3006671	1					
ANR	3006784	Argument	lease -> releaseLeaseWhenDone ( )		3006671	0					
ANR	3006785	CallExpression	lease -> releaseLeaseWhenDone ( )		3006671	0					
ANR	3006786	Callee	lease -> releaseLeaseWhenDone		3006671	0					
ANR	3006787	PtrMemberAccess	lease -> releaseLeaseWhenDone		3006671	0					
ANR	3006788	Identifier	lease		3006671	0					
ANR	3006789	Identifier	releaseLeaseWhenDone		3006671	1					
ANR	3006790	ArgumentList			3006671	1					
ANR	3006791	CompoundStatement		12:53:412:412	3006671	1					
ANR	3006792	ReturnStatement	return false ;	230:3:5236:5248	3006671	0	True				
ANR	3006793	Identifier	false		3006671	0					
ANR	3006794	ReturnStatement	return true ;	233:1:5258:5269	3006671	3	True				
ANR	3006795	Identifier	true		3006671	0					
ANR	3006796	ReturnType	bool		3006671	1					
ANR	3006797	Identifier	DCLeaseManager :: SendLeases		3006671	2					
ANR	3006798	ParameterList	"Stream * stream , list < const DCLeaseManagerLease * > & l_list"		3006671	3					
ANR	3006799	Parameter	Stream * stream	216:1:4749:4769	3006671	0	True				
ANR	3006800	ParameterType	Stream *		3006671	0					
ANR	3006801	Identifier	stream		3006671	1					
ANR	3006802	Parameter	list < const DCLeaseManagerLease * > & l_list	217:1:4773:4814	3006671	1	True				
ANR	3006803	ParameterType	list < const DCLeaseManagerLease * > &		3006671	0					
ANR	3006804	Identifier	l_list		3006671	1					
ANR	3006805	CFGEntryNode	ENTRY		3006671		True				
ANR	3006806	CFGExitNode	EXIT		3006671		True				
ANR	3006807	Symbol	stream -> put		3006671						
ANR	3006808	Symbol	* lease		3006671						
ANR	3006809	Symbol	false		3006671						
ANR	3006810	Symbol	l_list		3006671						
ANR	3006811	Symbol	iter		3006671						
ANR	3006812	Symbol	l_list . begin		3006671						
ANR	3006813	Symbol	lease_id_str		3006671						
ANR	3006814	Symbol	lease -> leaseDuration		3006671						
ANR	3006815	Symbol	l_list . end		3006671						
ANR	3006816	Symbol	l_list . size		3006671						
ANR	3006817	Symbol	* iter		3006671						
ANR	3006818	Symbol	lease -> leaseId ( ) . c_str		3006671						
ANR	3006819	Symbol	stream		3006671						
ANR	3006820	Symbol	* stream		3006671						
ANR	3006821	Symbol	lease -> leaseId		3006671						
ANR	3006822	Symbol	true		3006671						
ANR	3006823	Symbol	lease		3006671						
ANR	3006824	Symbol	lease -> releaseLeaseWhenDone		3006671						
ANR	3006825	Function	DCLeaseManager :: GetLeases	236:0:5274:6061							
ANR	3006826	FunctionDef	"DCLeaseManager :: GetLeases (Stream * stream , std :: list < DCLeaseManagerLease * > & l_list)"		3006825	0					
ANR	3006827	CompoundStatement		240:0:5374:6061	3006825	0					
ANR	3006828	IdentifierDeclStatement	int num_leases ;	241:1:5377:5392	3006825	0	True				
ANR	3006829	IdentifierDecl	num_leases		3006825	0					
ANR	3006830	IdentifierDeclType	int		3006825	0					
ANR	3006831	Identifier	num_leases		3006825	1					
ANR	3006832	IfStatement	if ( ! stream -> get ( num_leases ) )		3006825	1					
ANR	3006833	Condition	! stream -> get ( num_leases )	242:6:5400:5425	3006825	0	True				
ANR	3006834	UnaryOperationExpression	! stream -> get ( num_leases )		3006825	0					
ANR	3006835	UnaryOperator	!		3006825	0					
ANR	3006836	CallExpression	stream -> get ( num_leases )		3006825	1					
ANR	3006837	Callee	stream -> get		3006825	0					
ANR	3006838	PtrMemberAccess	stream -> get		3006825	0					
ANR	3006839	Identifier	stream		3006825	0					
ANR	3006840	Identifier	get		3006825	1					
ANR	3006841	ArgumentList	num_leases		3006825	1					
ANR	3006842	Argument	num_leases		3006825	0					
ANR	3006843	Identifier	num_leases		3006825	0					
ANR	3006844	CompoundStatement		3:35:54:54	3006825	1					
ANR	3006845	ReturnStatement	return false ;	243:2:5433:5445	3006825	0	True				
ANR	3006846	Identifier	false		3006825	0					
ANR	3006847	ForStatement	for ( int num = 0 ; num < num_leases ; num ++ )		3006825	2					
ANR	3006848	ForInit	int num = 0 ;	246:6:5457:5468	3006825	0	True				
ANR	3006849	IdentifierDeclStatement	int num = 0 ;		3006825	0					
ANR	3006850	IdentifierDecl	num = 0		3006825	0					
ANR	3006851	IdentifierDeclType	int		3006825	0					
ANR	3006852	Identifier	num		3006825	1					
ANR	3006853	AssignmentExpression	num = 0		3006825	2		=			
ANR	3006854	Identifier	num		3006825	0					
ANR	3006855	PrimaryExpression	0		3006825	1					
ANR	3006856	Condition	num < num_leases	246:20:5471:5486	3006825	1	True				
ANR	3006857	RelationalExpression	num < num_leases		3006825	0		<			
ANR	3006858	Identifier	num		3006825	0					
ANR	3006859	Identifier	num_leases		3006825	1					
ANR	3006860	PostIncDecOperationExpression	num ++	246:39:5490:5494	3006825	2	True				
ANR	3006861	Identifier	num		3006825	0					
ANR	3006862	IncDec	++		3006825	1					
ANR	3006863	CompoundStatement		22:2:509:638	3006825	3					
ANR	3006864	IdentifierDeclStatement	char * lease_id_cstr = NULL ;	247:2:5502:5528	3006825	0	True				
ANR	3006865	IdentifierDecl	* lease_id_cstr = NULL		3006825	0					
ANR	3006866	IdentifierDeclType	char *		3006825	0					
ANR	3006867	Identifier	lease_id_cstr		3006825	1					
ANR	3006868	AssignmentExpression	* lease_id_cstr = NULL		3006825	2		=			
ANR	3006869	Identifier	NULL		3006825	0					
ANR	3006870	Identifier	NULL		3006825	1					
ANR	3006871	IdentifierDeclStatement	int lease_duration ;	248:2:5532:5551	3006825	1	True				
ANR	3006872	IdentifierDecl	lease_duration		3006825	0					
ANR	3006873	IdentifierDeclType	int		3006825	0					
ANR	3006874	Identifier	lease_duration		3006825	1					
ANR	3006875	IdentifierDeclStatement	int release_when_done ;	249:2:5555:5577	3006825	2	True				
ANR	3006876	IdentifierDecl	release_when_done		3006825	0					
ANR	3006877	IdentifierDeclType	int		3006825	0					
ANR	3006878	Identifier	release_when_done		3006825	1					
ANR	3006879	IfStatement	if ( ! stream -> get ( lease_id_cstr ) || ! stream -> get ( lease_duration ) || ! stream -> get ( release_when_done ) )		3006825	3					
ANR	3006880	Condition	! stream -> get ( lease_id_cstr ) || ! stream -> get ( lease_duration ) || ! stream -> get ( release_when_done )	250:7:5586:5693	3006825	0	True				
ANR	3006881	OrExpression	! stream -> get ( lease_id_cstr ) || ! stream -> get ( lease_duration ) || ! stream -> get ( release_when_done )		3006825	0		||			
ANR	3006882	UnaryOperationExpression	! stream -> get ( lease_id_cstr )		3006825	0					
ANR	3006883	UnaryOperator	!		3006825	0					
ANR	3006884	CallExpression	stream -> get ( lease_id_cstr )		3006825	1					
ANR	3006885	Callee	stream -> get		3006825	0					
ANR	3006886	PtrMemberAccess	stream -> get		3006825	0					
ANR	3006887	Identifier	stream		3006825	0					
ANR	3006888	Identifier	get		3006825	1					
ANR	3006889	ArgumentList	lease_id_cstr		3006825	1					
ANR	3006890	Argument	lease_id_cstr		3006825	0					
ANR	3006891	Identifier	lease_id_cstr		3006825	0					
ANR	3006892	OrExpression	! stream -> get ( lease_duration ) || ! stream -> get ( release_when_done )		3006825	1		||			
ANR	3006893	UnaryOperationExpression	! stream -> get ( lease_duration )		3006825	0					
ANR	3006894	UnaryOperator	!		3006825	0					
ANR	3006895	CallExpression	stream -> get ( lease_duration )		3006825	1					
ANR	3006896	Callee	stream -> get		3006825	0					
ANR	3006897	PtrMemberAccess	stream -> get		3006825	0					
ANR	3006898	Identifier	stream		3006825	0					
ANR	3006899	Identifier	get		3006825	1					
ANR	3006900	ArgumentList	lease_duration		3006825	1					
ANR	3006901	Argument	lease_duration		3006825	0					
ANR	3006902	Identifier	lease_duration		3006825	0					
ANR	3006903	UnaryOperationExpression	! stream -> get ( release_when_done )		3006825	1					
ANR	3006904	UnaryOperator	!		3006825	0					
ANR	3006905	CallExpression	stream -> get ( release_when_done )		3006825	1					
ANR	3006906	Callee	stream -> get		3006825	0					
ANR	3006907	PtrMemberAccess	stream -> get		3006825	0					
ANR	3006908	Identifier	stream		3006825	0					
ANR	3006909	Identifier	get		3006825	1					
ANR	3006910	ArgumentList	release_when_done		3006825	1					
ANR	3006911	Argument	release_when_done		3006825	0					
ANR	3006912	Identifier	release_when_done		3006825	0					
ANR	3006913	CompoundStatement		13:40:322:322	3006825	1					
ANR	3006914	ExpressionStatement	DCLeaseManagerLease_freeList ( l_list )	253:3:5702:5740	3006825	0	True				
ANR	3006915	CallExpression	DCLeaseManagerLease_freeList ( l_list )		3006825	0					
ANR	3006916	Callee	DCLeaseManagerLease_freeList		3006825	0					
ANR	3006917	Identifier	DCLeaseManagerLease_freeList		3006825	0					
ANR	3006918	ArgumentList	l_list		3006825	1					
ANR	3006919	Argument	l_list		3006825	0					
ANR	3006920	Identifier	l_list		3006825	0					
ANR	3006921	IfStatement	if ( lease_id_cstr )		3006825	1					
ANR	3006922	Condition	lease_id_cstr	254:8:5750:5762	3006825	0	True				
ANR	3006923	Identifier	lease_id_cstr		3006825	0					
ANR	3006924	CompoundStatement		15:24:391:391	3006825	1					
ANR	3006925	ExpressionStatement	free ( lease_id_cstr )	255:4:5772:5793	3006825	0	True				
ANR	3006926	CallExpression	free ( lease_id_cstr )		3006825	0					
ANR	3006927	Callee	free		3006825	0					
ANR	3006928	Identifier	free		3006825	0					
ANR	3006929	ArgumentList	lease_id_cstr		3006825	1					
ANR	3006930	Argument	lease_id_cstr		3006825	0					
ANR	3006931	Identifier	lease_id_cstr		3006825	0					
ANR	3006932	ReturnStatement	return false ;	257:3:5803:5815	3006825	2	True				
ANR	3006933	Identifier	false		3006825	0					
ANR	3006934	IdentifierDeclStatement	string lease_id ( lease_id_cstr ) ;	259:2:5823:5855	3006825	4	True				
ANR	3006935	IdentifierDecl	lease_id ( lease_id_cstr )		3006825	0					
ANR	3006936	IdentifierDeclType	string		3006825	0					
ANR	3006937	Identifier	lease_id		3006825	1					
ANR	3006938	Identifier	lease_id_cstr		3006825	2					
ANR	3006939	ExpressionStatement	free ( lease_id_cstr )	260:2:5859:5880	3006825	5	True				
ANR	3006940	CallExpression	free ( lease_id_cstr )		3006825	0					
ANR	3006941	Callee	free		3006825	0					
ANR	3006942	Identifier	free		3006825	0					
ANR	3006943	ArgumentList	lease_id_cstr		3006825	1					
ANR	3006944	Argument	lease_id_cstr		3006825	0					
ANR	3006945	Identifier	lease_id_cstr		3006825	0					
ANR	3006946	IdentifierDeclStatement	"DCLeaseManagerLease * lease = new DCLeaseManagerLease ( lease_id , lease_duration , ( bool ) release_when_done ) ;"	261:2:5884:6013	3006825	6	True				
ANR	3006947	IdentifierDecl	"* lease = new DCLeaseManagerLease ( lease_id , lease_duration , ( bool ) release_when_done )"		3006825	0					
ANR	3006948	IdentifierDeclType	DCLeaseManagerLease *		3006825	0					
ANR	3006949	Identifier	lease		3006825	1					
ANR	3006950	AssignmentExpression	"* lease = new DCLeaseManagerLease ( lease_id , lease_duration , ( bool ) release_when_done )"		3006825	2		=			
ANR	3006951	Identifier	lease		3006825	0					
ANR	3006952	Expression	"lease_id , lease_duration , ( bool ) release_when_done"		3006825	1					
ANR	3006953	Identifier	lease_id		3006825	0					
ANR	3006954	Expression	"lease_duration , ( bool ) release_when_done"		3006825	1					
ANR	3006955	Identifier	lease_duration		3006825	0					
ANR	3006956	CastExpression	( bool ) release_when_done		3006825	1					
ANR	3006957	CastTarget	bool		3006825	0					
ANR	3006958	Identifier	release_when_done		3006825	1					
ANR	3006959	ExpressionStatement	l_list . push_back ( lease )	265:2:6017:6042	3006825	7	True				
ANR	3006960	CallExpression	l_list . push_back ( lease )		3006825	0					
ANR	3006961	Callee	l_list . push_back		3006825	0					
ANR	3006962	MemberAccess	l_list . push_back		3006825	0					
ANR	3006963	Identifier	l_list		3006825	0					
ANR	3006964	Identifier	push_back		3006825	1					
ANR	3006965	ArgumentList	lease		3006825	1					
ANR	3006966	Argument	lease		3006825	0					
ANR	3006967	Identifier	lease		3006825	0					
ANR	3006968	ReturnStatement	return true ;	267:1:6048:6059	3006825	3	True				
ANR	3006969	Identifier	true		3006825	0					
ANR	3006970	ReturnType	bool		3006825	1					
ANR	3006971	Identifier	DCLeaseManager :: GetLeases		3006825	2					
ANR	3006972	ParameterList	"Stream * stream , std :: list < DCLeaseManagerLease * > & l_list"		3006825	3					
ANR	3006973	Parameter	Stream * stream	238:1:5307:5326	3006825	0	True				
ANR	3006974	ParameterType	Stream *		3006825	0					
ANR	3006975	Identifier	stream		3006825	1					
ANR	3006976	Parameter	std :: list < DCLeaseManagerLease * > & l_list	239:1:5330:5370	3006825	1	True				
ANR	3006977	ParameterType	std :: list < DCLeaseManagerLease * > &		3006825	0					
ANR	3006978	Identifier	l_list		3006825	1					
ANR	3006979	CFGEntryNode	ENTRY		3006825		True				
ANR	3006980	CFGExitNode	EXIT		3006825		True				
ANR	3006981	Symbol	release_when_done		3006825						
ANR	3006982	Symbol	stream -> get		3006825						
ANR	3006983	Symbol	NULL		3006825						
ANR	3006984	Symbol	lease_id_cstr		3006825						
ANR	3006985	Symbol	num		3006825						
ANR	3006986	Symbol	false		3006825						
ANR	3006987	Symbol	lease_duration		3006825						
ANR	3006988	Symbol	l_list		3006825						
ANR	3006989	Symbol	stream		3006825						
ANR	3006990	Symbol	* stream		3006825						
ANR	3006991	Symbol	true		3006825						
ANR	3006992	Symbol	lease		3006825						
ANR	3006993	Symbol	lease_id		3006825						
ANR	3006994	Symbol	num_leases		3006825						
