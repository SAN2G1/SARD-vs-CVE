command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	826006	File	data/converged/CVE-2011-4930_htcondor/compat_classad_util.cpp								
ANR	826007	Function	Parse	28:0:998:1827							
ANR	826008	FunctionDef	"Parse (const char * str , MyString & name , classad :: ExprTree * & tree , int * pos)"		826007	0					
ANR	826009	CompoundStatement		29:0:1075:1827	826007	0					
ANR	826010	IdentifierDeclStatement	classad :: ClassAdParser parser ;	30:1:1078:1107	826007	0	True				
ANR	826011	IdentifierDecl	parser		826007	0					
ANR	826012	IdentifierDeclType	classad :: ClassAdParser		826007	0					
ANR	826013	Identifier	parser		826007	1					
ANR	826014	IdentifierDeclStatement	classad :: ClassAd * newAd ;	31:1:1110:1133	826007	1	True				
ANR	826015	IdentifierDecl	* newAd		826007	0					
ANR	826016	IdentifierDeclType	classad :: ClassAd *		826007	0					
ANR	826017	Identifier	newAd		826007	1					
ANR	826018	IfStatement	if ( pos )		826007	2					
ANR	826019	Condition	pos	34:6:1196:1198	826007	0	True				
ANR	826020	Identifier	pos		826007	0					
ANR	826021	CompoundStatement		6:12:126:126	826007	1					
ANR	826022	ExpressionStatement	* pos = 0	35:2:1206:1214	826007	0	True				
ANR	826023	AssignmentExpression	* pos = 0		826007	0		=			
ANR	826024	UnaryOperationExpression	* pos		826007	0					
ANR	826025	UnaryOperator	*		826007	0					
ANR	826026	Identifier	pos		826007	1					
ANR	826027	PrimaryExpression	0		826007	1					
ANR	826028	IdentifierDeclStatement	"std :: string newAdStr = ""["" ;"	41:1:1407:1433	826007	3	True				
ANR	826029	IdentifierDecl	"newAdStr = ""["""		826007	0					
ANR	826030	IdentifierDeclType	std :: string		826007	0					
ANR	826031	Identifier	newAdStr		826007	1					
ANR	826032	AssignmentExpression	"newAdStr = ""["""		826007	2		=			
ANR	826033	Identifier	newAdStr		826007	0					
ANR	826034	PrimaryExpression	"""["""		826007	1					
ANR	826035	ExpressionStatement	newAdStr . append ( compat_classad :: ConvertEscapingOldToNew ( str ) )	42:1:1436:1501	826007	4	True				
ANR	826036	CallExpression	newAdStr . append ( compat_classad :: ConvertEscapingOldToNew ( str ) )		826007	0					
ANR	826037	Callee	newAdStr . append		826007	0					
ANR	826038	MemberAccess	newAdStr . append		826007	0					
ANR	826039	Identifier	newAdStr		826007	0					
ANR	826040	Identifier	append		826007	1					
ANR	826041	ArgumentList	compat_classad :: ConvertEscapingOldToNew ( str )		826007	1					
ANR	826042	Argument	compat_classad :: ConvertEscapingOldToNew ( str )		826007	0					
ANR	826043	CallExpression	compat_classad :: ConvertEscapingOldToNew ( str )		826007	0					
ANR	826044	Callee	compat_classad :: ConvertEscapingOldToNew		826007	0					
ANR	826045	Identifier	compat_classad :: ConvertEscapingOldToNew		826007	0					
ANR	826046	ArgumentList	str		826007	1					
ANR	826047	Argument	str		826007	0					
ANR	826048	Identifier	str		826007	0					
ANR	826049	ExpressionStatement	"newAdStr += ""]"""	43:1:1504:1519	826007	5	True				
ANR	826050	AssignmentExpression	"newAdStr += ""]"""		826007	0		+=			
ANR	826051	Identifier	newAdStr		826007	0					
ANR	826052	PrimaryExpression	"""]"""		826007	1					
ANR	826053	ExpressionStatement	newAd = parser . ParseClassAd ( newAdStr )	44:1:1522:1561	826007	6	True				
ANR	826054	AssignmentExpression	newAd = parser . ParseClassAd ( newAdStr )		826007	0		=			
ANR	826055	Identifier	newAd		826007	0					
ANR	826056	CallExpression	parser . ParseClassAd ( newAdStr )		826007	1					
ANR	826057	Callee	parser . ParseClassAd		826007	0					
ANR	826058	MemberAccess	parser . ParseClassAd		826007	0					
ANR	826059	Identifier	parser		826007	0					
ANR	826060	Identifier	ParseClassAd		826007	1					
ANR	826061	ArgumentList	newAdStr		826007	1					
ANR	826062	Argument	newAdStr		826007	0					
ANR	826063	Identifier	newAdStr		826007	0					
ANR	826064	IfStatement	if ( newAd == NULL )		826007	7					
ANR	826065	Condition	newAd == NULL	45:6:1569:1581	826007	0	True				
ANR	826066	EqualityExpression	newAd == NULL		826007	0		==			
ANR	826067	Identifier	newAd		826007	0					
ANR	826068	Identifier	NULL		826007	1					
ANR	826069	CompoundStatement		17:22:509:509	826007	1					
ANR	826070	ExpressionStatement	tree = NULL	46:2:1589:1600	826007	0	True				
ANR	826071	AssignmentExpression	tree = NULL		826007	0		=			
ANR	826072	Identifier	tree		826007	0					
ANR	826073	Identifier	NULL		826007	1					
ANR	826074	ReturnStatement	return 1 ;	47:2:1604:1612	826007	1	True				
ANR	826075	PrimaryExpression	1		826007	0					
ANR	826076	IfStatement	if ( newAd -> size ( ) != 1 )		826007	8					
ANR	826077	Condition	newAd -> size ( ) != 1	49:6:1623:1640	826007	0	True				
ANR	826078	EqualityExpression	newAd -> size ( ) != 1		826007	0		!=			
ANR	826079	CallExpression	newAd -> size ( )		826007	0					
ANR	826080	Callee	newAd -> size		826007	0					
ANR	826081	PtrMemberAccess	newAd -> size		826007	0					
ANR	826082	Identifier	newAd		826007	0					
ANR	826083	Identifier	size		826007	1					
ANR	826084	ArgumentList			826007	1					
ANR	826085	PrimaryExpression	1		826007	1					
ANR	826086	CompoundStatement		21:27:568:568	826007	1					
ANR	826087	Statement	delete	50:2:1648:1653	826007	0	True				
ANR	826088	ExpressionStatement	newAd	50:9:1655:1660	826007	1	True				
ANR	826089	Identifier	newAd		826007	0					
ANR	826090	ExpressionStatement	tree = NULL	51:2:1664:1675	826007	2	True				
ANR	826091	AssignmentExpression	tree = NULL		826007	0		=			
ANR	826092	Identifier	tree		826007	0					
ANR	826093	Identifier	NULL		826007	1					
ANR	826094	ReturnStatement	return 1 ;	52:2:1679:1687	826007	3	True				
ANR	826095	PrimaryExpression	1		826007	0					
ANR	826096	IdentifierDeclStatement	classad :: ClassAd :: iterator itr = newAd -> begin ( ) ;	55:1:1695:1742	826007	9	True				
ANR	826097	IdentifierDecl	itr = newAd -> begin ( )		826007	0					
ANR	826098	IdentifierDeclType	classad :: ClassAd :: iterator		826007	0					
ANR	826099	Identifier	itr		826007	1					
ANR	826100	AssignmentExpression	itr = newAd -> begin ( )		826007	2		=			
ANR	826101	Identifier	itr		826007	0					
ANR	826102	CallExpression	newAd -> begin ( )		826007	1					
ANR	826103	Callee	newAd -> begin		826007	0					
ANR	826104	PtrMemberAccess	newAd -> begin		826007	0					
ANR	826105	Identifier	newAd		826007	0					
ANR	826106	Identifier	begin		826007	1					
ANR	826107	ArgumentList			826007	1					
ANR	826108	ExpressionStatement	name = itr -> first . c_str ( )	56:1:1745:1770	826007	10	True				
ANR	826109	AssignmentExpression	name = itr -> first . c_str ( )		826007	0		=			
ANR	826110	Identifier	name		826007	0					
ANR	826111	CallExpression	itr -> first . c_str ( )		826007	1					
ANR	826112	Callee	itr -> first . c_str		826007	0					
ANR	826113	MemberAccess	itr -> first . c_str		826007	0					
ANR	826114	PtrMemberAccess	itr -> first		826007	0					
ANR	826115	Identifier	itr		826007	0					
ANR	826116	Identifier	first		826007	1					
ANR	826117	Identifier	c_str		826007	1					
ANR	826118	ArgumentList			826007	1					
ANR	826119	ExpressionStatement	tree = itr -> second -> Copy ( )	57:1:1773:1799	826007	11	True				
ANR	826120	AssignmentExpression	tree = itr -> second -> Copy ( )		826007	0		=			
ANR	826121	Identifier	tree		826007	0					
ANR	826122	CallExpression	itr -> second -> Copy ( )		826007	1					
ANR	826123	Callee	itr -> second -> Copy		826007	0					
ANR	826124	PtrMemberAccess	itr -> second -> Copy		826007	0					
ANR	826125	PtrMemberAccess	itr -> second		826007	0					
ANR	826126	Identifier	itr		826007	0					
ANR	826127	Identifier	second		826007	1					
ANR	826128	Identifier	Copy		826007	1					
ANR	826129	ArgumentList			826007	1					
ANR	826130	Statement	delete	58:1:1802:1807	826007	12	True				
ANR	826131	ExpressionStatement	newAd	58:8:1809:1814	826007	13	True				
ANR	826132	Identifier	newAd		826007	0					
ANR	826133	ReturnStatement	return 0 ;	59:1:1817:1825	826007	14	True				
ANR	826134	PrimaryExpression	0		826007	0					
ANR	826135	ReturnType	int		826007	1					
ANR	826136	Identifier	Parse		826007	2					
ANR	826137	ParameterList	"const char * str , MyString & name , classad :: ExprTree * & tree , int * pos"		826007	3					
ANR	826138	Parameter	const char * str	28:10:1008:1021	826007	0	True				
ANR	826139	ParameterType	const char *		826007	0					
ANR	826140	Identifier	str		826007	1					
ANR	826141	Parameter	MyString & name	28:26:1024:1037	826007	1	True				
ANR	826142	ParameterType	MyString &		826007	0					
ANR	826143	Identifier	name		826007	1					
ANR	826144	Parameter	classad :: ExprTree * & tree	28:42:1040:1063	826007	2	True				
ANR	826145	ParameterType	classad :: ExprTree * &		826007	0					
ANR	826146	Identifier	tree		826007	1					
ANR	826147	Parameter	int * pos	28:68:1066:1072	826007	3	True				
ANR	826148	ParameterType	int *		826007	0					
ANR	826149	Identifier	pos		826007	1					
ANR	826150	CFGEntryNode	ENTRY		826007		True				
ANR	826151	CFGExitNode	EXIT		826007		True				
ANR	826152	Symbol	NULL		826007						
ANR	826153	Symbol	newAdStr		826007						
ANR	826154	Symbol	newAd -> size		826007						
ANR	826155	Symbol	itr		826007						
ANR	826156	Symbol	tree		826007						
ANR	826157	Symbol	compat_classad :: ConvertEscapingOldToNew		826007						
ANR	826158	Symbol	itr -> first . c_str		826007						
ANR	826159	Symbol	parser . ParseClassAd		826007						
ANR	826160	Symbol	* itr		826007						
ANR	826161	Symbol	str		826007						
ANR	826162	Symbol	* newAd		826007						
ANR	826163	Symbol	parser		826007						
ANR	826164	Symbol	pos		826007						
ANR	826165	Symbol	name		826007						
ANR	826166	Symbol	* itr -> second		826007						
ANR	826167	Symbol	itr -> first		826007						
ANR	826168	Symbol	* * itr		826007						
ANR	826169	Symbol	newAd		826007						
ANR	826170	Symbol	* pos		826007						
ANR	826171	Symbol	newAd -> begin		826007						
ANR	826172	Symbol	itr -> second		826007						
ANR	826173	Symbol	itr -> second -> Copy		826007						
ANR	826174	Function	ParseClassAdRvalExpr	64:0:1876:2184							
ANR	826175	FunctionDef	"ParseClassAdRvalExpr (const char * s , classad :: ExprTree * & tree , int * pos)"		826174	0					
ANR	826176	CompoundStatement		65:0:1949:2184	826174	0					
ANR	826177	IdentifierDeclStatement	classad :: ClassAdParser parser ;	66:1:1952:1981	826174	0	True				
ANR	826178	IdentifierDecl	parser		826174	0					
ANR	826179	IdentifierDeclType	classad :: ClassAdParser		826174	0					
ANR	826180	Identifier	parser		826174	1					
ANR	826181	IdentifierDeclStatement	std :: string str = compat_classad :: ConvertEscapingOldToNew ( s ) ;	67:1:1984:2046	826174	1	True				
ANR	826182	IdentifierDecl	str = compat_classad :: ConvertEscapingOldToNew ( s )		826174	0					
ANR	826183	IdentifierDeclType	std :: string		826174	0					
ANR	826184	Identifier	str		826174	1					
ANR	826185	AssignmentExpression	str = compat_classad :: ConvertEscapingOldToNew ( s )		826174	2		=			
ANR	826186	Identifier	str		826174	0					
ANR	826187	CallExpression	compat_classad :: ConvertEscapingOldToNew ( s )		826174	1					
ANR	826188	Callee	compat_classad :: ConvertEscapingOldToNew		826174	0					
ANR	826189	Identifier	compat_classad :: ConvertEscapingOldToNew		826174	0					
ANR	826190	ArgumentList	s		826174	1					
ANR	826191	Argument	s		826174	0					
ANR	826192	Identifier	s		826174	0					
ANR	826193	IfStatement	"if ( parser . ParseExpression ( str , tree , true ) )"		826174	2					
ANR	826194	Condition	"parser . ParseExpression ( str , tree , true )"	68:6:2054:2094	826174	0	True				
ANR	826195	CallExpression	"parser . ParseExpression ( str , tree , true )"		826174	0					
ANR	826196	Callee	parser . ParseExpression		826174	0					
ANR	826197	MemberAccess	parser . ParseExpression		826174	0					
ANR	826198	Identifier	parser		826174	0					
ANR	826199	Identifier	ParseExpression		826174	1					
ANR	826200	ArgumentList	str		826174	1					
ANR	826201	Argument	str		826174	0					
ANR	826202	Identifier	str		826174	0					
ANR	826203	Argument	tree		826174	1					
ANR	826204	Identifier	tree		826174	0					
ANR	826205	Argument	true		826174	2					
ANR	826206	Identifier	true		826174	0					
ANR	826207	CompoundStatement		4:50:148:148	826174	1					
ANR	826208	ReturnStatement	return 0 ;	69:2:2102:2110	826174	0	True				
ANR	826209	PrimaryExpression	0		826174	0					
ANR	826210	ElseStatement	else		826174	0					
ANR	826211	CompoundStatement		6:8:170:170	826174	0					
ANR	826212	ExpressionStatement	tree = NULL	71:2:2124:2135	826174	0	True				
ANR	826213	AssignmentExpression	tree = NULL		826174	0		=			
ANR	826214	Identifier	tree		826174	0					
ANR	826215	Identifier	NULL		826174	1					
ANR	826216	IfStatement	if ( pos )		826174	1					
ANR	826217	Condition	pos	72:7:2144:2146	826174	0	True				
ANR	826218	Identifier	pos		826174	0					
ANR	826219	CompoundStatement		8:13:200:200	826174	1					
ANR	826220	ExpressionStatement	* pos = 0	73:3:2155:2163	826174	0	True				
ANR	826221	AssignmentExpression	* pos = 0		826174	0		=			
ANR	826222	UnaryOperationExpression	* pos		826174	0					
ANR	826223	UnaryOperator	*		826174	0					
ANR	826224	Identifier	pos		826174	1					
ANR	826225	PrimaryExpression	0		826174	1					
ANR	826226	ReturnStatement	return 1 ;	75:2:2171:2179	826174	2	True				
ANR	826227	PrimaryExpression	1		826174	0					
ANR	826228	ReturnType	int		826174	1					
ANR	826229	Identifier	ParseClassAdRvalExpr		826174	2					
ANR	826230	ParameterList	"const char * s , classad :: ExprTree * & tree , int * pos"		826174	3					
ANR	826231	Parameter	const char * s	64:25:1901:1912	826174	0	True				
ANR	826232	ParameterType	const char *		826174	0					
ANR	826233	Identifier	s		826174	1					
ANR	826234	Parameter	classad :: ExprTree * & tree	64:39:1915:1937	826174	1	True				
ANR	826235	ParameterType	classad :: ExprTree * &		826174	0					
ANR	826236	Identifier	tree		826174	1					
ANR	826237	Parameter	int * pos	64:64:1940:1946	826174	2	True				
ANR	826238	ParameterType	int *		826174	0					
ANR	826239	Identifier	pos		826174	1					
ANR	826240	CFGEntryNode	ENTRY		826174		True				
ANR	826241	CFGExitNode	EXIT		826174		True				
ANR	826242	Symbol	str		826174						
ANR	826243	Symbol	s		826174						
ANR	826244	Symbol	NULL		826174						
ANR	826245	Symbol	parser		826174						
ANR	826246	Symbol	parser . ParseExpression		826174						
ANR	826247	Symbol	pos		826174						
ANR	826248	Symbol	tree		826174						
ANR	826249	Symbol	true		826174						
ANR	826250	Symbol	compat_classad :: ConvertEscapingOldToNew		826174						
ANR	826251	Symbol	* pos		826174						
ANR	826252	Function	ExprTreeToString	81:0:2233:2463							
ANR	826253	FunctionDef	ExprTreeToString (classad :: ExprTree * expr)		826252	0					
ANR	826254	CompoundStatement		82:0:2289:2463	826252	0					
ANR	826255	Statement	static	83:1:2292:2297	826252	0	True				
ANR	826256	IdentifierDeclStatement	std :: string buffer ;	83:8:2299:2317	826252	1	True				
ANR	826257	IdentifierDecl	buffer		826252	0					
ANR	826258	IdentifierDeclType	std :: string		826252	0					
ANR	826259	Identifier	buffer		826252	1					
ANR	826260	IdentifierDeclStatement	classad :: ClassAdUnParser unparser ;	84:1:2320:2353	826252	2	True				
ANR	826261	IdentifierDecl	unparser		826252	0					
ANR	826262	IdentifierDeclType	classad :: ClassAdUnParser		826252	0					
ANR	826263	Identifier	unparser		826252	1					
ANR	826264	ExpressionStatement	"buffer = """""	86:1:2357:2368	826252	3	True				
ANR	826265	AssignmentExpression	"buffer = """""		826252	0		=			
ANR	826266	Identifier	buffer		826252	0					
ANR	826267	PrimaryExpression	""""""		826252	1					
ANR	826268	ExpressionStatement	unparser . SetOldClassAd ( true )	87:1:2371:2401	826252	4	True				
ANR	826269	CallExpression	unparser . SetOldClassAd ( true )		826252	0					
ANR	826270	Callee	unparser . SetOldClassAd		826252	0					
ANR	826271	MemberAccess	unparser . SetOldClassAd		826252	0					
ANR	826272	Identifier	unparser		826252	0					
ANR	826273	Identifier	SetOldClassAd		826252	1					
ANR	826274	ArgumentList	true		826252	1					
ANR	826275	Argument	true		826252	0					
ANR	826276	Identifier	true		826252	0					
ANR	826277	ExpressionStatement	"unparser . Unparse ( buffer , expr )"	88:1:2404:2436	826252	5	True				
ANR	826278	CallExpression	"unparser . Unparse ( buffer , expr )"		826252	0					
ANR	826279	Callee	unparser . Unparse		826252	0					
ANR	826280	MemberAccess	unparser . Unparse		826252	0					
ANR	826281	Identifier	unparser		826252	0					
ANR	826282	Identifier	Unparse		826252	1					
ANR	826283	ArgumentList	buffer		826252	1					
ANR	826284	Argument	buffer		826252	0					
ANR	826285	Identifier	buffer		826252	0					
ANR	826286	Argument	expr		826252	1					
ANR	826287	Identifier	expr		826252	0					
ANR	826288	ReturnStatement	return buffer . c_str ( ) ;	90:1:2440:2461	826252	6	True				
ANR	826289	CallExpression	buffer . c_str ( )		826252	0					
ANR	826290	Callee	buffer . c_str		826252	0					
ANR	826291	MemberAccess	buffer . c_str		826252	0					
ANR	826292	Identifier	buffer		826252	0					
ANR	826293	Identifier	c_str		826252	1					
ANR	826294	ArgumentList			826252	1					
ANR	826295	ReturnType	const char *		826252	1					
ANR	826296	Identifier	ExprTreeToString		826252	2					
ANR	826297	ParameterList	classad :: ExprTree * expr		826252	3					
ANR	826298	Parameter	classad :: ExprTree * expr	81:30:2263:2285	826252	0	True				
ANR	826299	ParameterType	classad :: ExprTree *		826252	0					
ANR	826300	Identifier	expr		826252	1					
ANR	826301	CFGEntryNode	ENTRY		826252		True				
ANR	826302	CFGExitNode	EXIT		826252		True				
ANR	826303	Symbol	buffer . c_str		826252						
ANR	826304	Symbol	true		826252						
ANR	826305	Symbol	expr		826252						
ANR	826306	Symbol	unparser		826252						
ANR	826307	Symbol	buffer		826252						
ANR	826308	Function	EvalBool	93:0:2466:3799							
ANR	826309	FunctionDef	"EvalBool (compat_classad :: ClassAd * ad , const char * constraint)"		826308	0					
ANR	826310	CompoundStatement		94:0:2533:3799	826308	0					
ANR	826311	Statement	static	95:1:2536:2541	826308	0	True				
ANR	826312	IdentifierDeclStatement	classad :: ExprTree * tree = NULL ;	95:8:2543:2573	826308	1	True				
ANR	826313	IdentifierDecl	* tree = NULL		826308	0					
ANR	826314	IdentifierDeclType	classad :: ExprTree *		826308	0					
ANR	826315	Identifier	tree		826308	1					
ANR	826316	AssignmentExpression	* tree = NULL		826308	2		=			
ANR	826317	Identifier	NULL		826308	0					
ANR	826318	Identifier	NULL		826308	1					
ANR	826319	Statement	static	96:1:2576:2581	826308	2	True				
ANR	826320	IdentifierDeclStatement	char * saved_constraint = NULL ;	96:8:2583:2613	826308	3	True				
ANR	826321	IdentifierDecl	* saved_constraint = NULL		826308	0					
ANR	826322	IdentifierDeclType	char *		826308	0					
ANR	826323	Identifier	saved_constraint		826308	1					
ANR	826324	AssignmentExpression	* saved_constraint = NULL		826308	2		=			
ANR	826325	Identifier	NULL		826308	0					
ANR	826326	Identifier	NULL		826308	1					
ANR	826327	IdentifierDeclStatement	compat_classad :: EvalResult result ;	97:1:2616:2649	826308	4	True				
ANR	826328	IdentifierDecl	result		826308	0					
ANR	826329	IdentifierDeclType	compat_classad :: EvalResult		826308	0					
ANR	826330	Identifier	result		826308	1					
ANR	826331	IdentifierDeclStatement	bool constraint_changed = true ;	98:1:2652:2682	826308	5	True				
ANR	826332	IdentifierDecl	constraint_changed = true		826308	0					
ANR	826333	IdentifierDeclType	bool		826308	0					
ANR	826334	Identifier	constraint_changed		826308	1					
ANR	826335	AssignmentExpression	constraint_changed = true		826308	2		=			
ANR	826336	Identifier	true		826308	0					
ANR	826337	Identifier	true		826308	1					
ANR	826338	IfStatement	if ( saved_constraint )		826308	6					
ANR	826339	Condition	saved_constraint	100:6:2691:2706	826308	0	True				
ANR	826340	Identifier	saved_constraint		826308	0					
ANR	826341	CompoundStatement		7:25:176:176	826308	1					
ANR	826342	IfStatement	"if ( strcmp ( saved_constraint , constraint ) == 0 )"		826308	0					
ANR	826343	Condition	"strcmp ( saved_constraint , constraint ) == 0"	101:7:2719:2758	826308	0	True				
ANR	826344	EqualityExpression	"strcmp ( saved_constraint , constraint ) == 0"		826308	0		==			
ANR	826345	CallExpression	"strcmp ( saved_constraint , constraint )"		826308	0					
ANR	826346	Callee	strcmp		826308	0					
ANR	826347	Identifier	strcmp		826308	0					
ANR	826348	ArgumentList	saved_constraint		826308	1					
ANR	826349	Argument	saved_constraint		826308	0					
ANR	826350	Identifier	saved_constraint		826308	0					
ANR	826351	Argument	constraint		826308	1					
ANR	826352	Identifier	constraint		826308	0					
ANR	826353	PrimaryExpression	0		826308	1					
ANR	826354	CompoundStatement		8:50:228:228	826308	1					
ANR	826355	ExpressionStatement	constraint_changed = false	102:3:2767:2793	826308	0	True				
ANR	826356	AssignmentExpression	constraint_changed = false		826308	0		=			
ANR	826357	Identifier	constraint_changed		826308	0					
ANR	826358	Identifier	false		826308	1					
ANR	826359	IfStatement	if ( constraint_changed )		826308	7					
ANR	826360	Condition	constraint_changed	106:6:2809:2826	826308	0	True				
ANR	826361	Identifier	constraint_changed		826308	0					
ANR	826362	CompoundStatement		23:2:496:530	826308	1					
ANR	826363	IfStatement	if ( saved_constraint )		826308	0					
ANR	826364	Condition	saved_constraint	108:7:2896:2911	826308	0	True				
ANR	826365	Identifier	saved_constraint		826308	0					
ANR	826366	CompoundStatement		15:26:381:381	826308	1					
ANR	826367	ExpressionStatement	free ( saved_constraint )	109:3:2920:2942	826308	0	True				
ANR	826368	CallExpression	free ( saved_constraint )		826308	0					
ANR	826369	Callee	free		826308	0					
ANR	826370	Identifier	free		826308	0					
ANR	826371	ArgumentList	saved_constraint		826308	1					
ANR	826372	Argument	saved_constraint		826308	0					
ANR	826373	Identifier	saved_constraint		826308	0					
ANR	826374	ExpressionStatement	saved_constraint = NULL	110:3:2947:2970	826308	1	True				
ANR	826375	AssignmentExpression	saved_constraint = NULL		826308	0		=			
ANR	826376	Identifier	saved_constraint		826308	0					
ANR	826377	Identifier	NULL		826308	1					
ANR	826378	IfStatement	if ( tree )		826308	1					
ANR	826379	Condition	tree	112:7:2983:2986	826308	0	True				
ANR	826380	Identifier	tree		826308	0					
ANR	826381	CompoundStatement		19:14:456:456	826308	1					
ANR	826382	Statement	delete	113:3:2995:3000	826308	0	True				
ANR	826383	ExpressionStatement	tree	113:10:3002:3006	826308	1	True				
ANR	826384	Identifier	tree		826308	0					
ANR	826385	ExpressionStatement	tree = NULL	114:3:3011:3022	826308	2	True				
ANR	826386	AssignmentExpression	tree = NULL		826308	0		=			
ANR	826387	Identifier	tree		826308	0					
ANR	826388	Identifier	NULL		826308	1					
ANR	826389	IdentifierDeclStatement	classad :: ExprTree * tmp_tree = NULL ;	116:2:3030:3064	826308	2	True				
ANR	826390	IdentifierDecl	* tmp_tree = NULL		826308	0					
ANR	826391	IdentifierDeclType	classad :: ExprTree *		826308	0					
ANR	826392	Identifier	tmp_tree		826308	1					
ANR	826393	AssignmentExpression	* tmp_tree = NULL		826308	2		=			
ANR	826394	Identifier	NULL		826308	0					
ANR	826395	Identifier	NULL		826308	1					
ANR	826396	IfStatement	"if ( ParseClassAdRvalExpr ( constraint , tmp_tree ) != 0 )"		826308	3					
ANR	826397	Condition	"ParseClassAdRvalExpr ( constraint , tmp_tree ) != 0"	117:7:3073:3121	826308	0	True				
ANR	826398	EqualityExpression	"ParseClassAdRvalExpr ( constraint , tmp_tree ) != 0"		826308	0		!=			
ANR	826399	CallExpression	"ParseClassAdRvalExpr ( constraint , tmp_tree )"		826308	0					
ANR	826400	Callee	ParseClassAdRvalExpr		826308	0					
ANR	826401	Identifier	ParseClassAdRvalExpr		826308	0					
ANR	826402	ArgumentList	constraint		826308	1					
ANR	826403	Argument	constraint		826308	0					
ANR	826404	Identifier	constraint		826308	0					
ANR	826405	Argument	tmp_tree		826308	1					
ANR	826406	Identifier	tmp_tree		826308	0					
ANR	826407	PrimaryExpression	0		826308	1					
ANR	826408	CompoundStatement		24:59:591:591	826308	1					
ANR	826409	ExpressionStatement	"dprintf ( D_ALWAYS , ""can't parse constraint: %s\\n"" , constraint )"	118:3:3130:3197	826308	0	True				
ANR	826410	CallExpression	"dprintf ( D_ALWAYS , ""can't parse constraint: %s\\n"" , constraint )"		826308	0					
ANR	826411	Callee	dprintf		826308	0					
ANR	826412	Identifier	dprintf		826308	0					
ANR	826413	ArgumentList	D_ALWAYS		826308	1					
ANR	826414	Argument	D_ALWAYS		826308	0					
ANR	826415	Identifier	D_ALWAYS		826308	0					
ANR	826416	Argument	"""can't parse constraint: %s\\n"""		826308	1					
ANR	826417	PrimaryExpression	"""can't parse constraint: %s\\n"""		826308	0					
ANR	826418	Argument	constraint		826308	2					
ANR	826419	Identifier	constraint		826308	0					
ANR	826420	ReturnStatement	return false ;	120:3:3202:3214	826308	1	True				
ANR	826421	Identifier	false		826308	0					
ANR	826422	ExpressionStatement	tree = compat_classad :: RemoveExplicitTargetRefs ( tmp_tree )	122:2:3222:3281	826308	4	True				
ANR	826423	AssignmentExpression	tree = compat_classad :: RemoveExplicitTargetRefs ( tmp_tree )		826308	0		=			
ANR	826424	Identifier	tree		826308	0					
ANR	826425	CallExpression	compat_classad :: RemoveExplicitTargetRefs ( tmp_tree )		826308	1					
ANR	826426	Callee	compat_classad :: RemoveExplicitTargetRefs		826308	0					
ANR	826427	Identifier	compat_classad :: RemoveExplicitTargetRefs		826308	0					
ANR	826428	ArgumentList	tmp_tree		826308	1					
ANR	826429	Argument	tmp_tree		826308	0					
ANR	826430	Identifier	tmp_tree		826308	0					
ANR	826431	Statement	delete	123:2:3285:3290	826308	5	True				
ANR	826432	ExpressionStatement	tmp_tree	123:9:3292:3300	826308	6	True				
ANR	826433	Identifier	tmp_tree		826308	0					
ANR	826434	ExpressionStatement	saved_constraint = strdup ( constraint )	124:2:3304:3343	826308	7	True				
ANR	826435	AssignmentExpression	saved_constraint = strdup ( constraint )		826308	0		=			
ANR	826436	Identifier	saved_constraint		826308	0					
ANR	826437	CallExpression	strdup ( constraint )		826308	1					
ANR	826438	Callee	strdup		826308	0					
ANR	826439	Identifier	strdup		826308	0					
ANR	826440	ArgumentList	constraint		826308	1					
ANR	826441	Argument	constraint		826308	0					
ANR	826442	Identifier	constraint		826308	0					
ANR	826443	IfStatement	"if ( ! EvalExprTree ( tree , ad , NULL , & result ) )"		826308	8					
ANR	826444	Condition	"! EvalExprTree ( tree , ad , NULL , & result )"	129:6:3487:3526	826308	0	True				
ANR	826445	UnaryOperationExpression	"! EvalExprTree ( tree , ad , NULL , & result )"		826308	0					
ANR	826446	UnaryOperator	!		826308	0					
ANR	826447	CallExpression	"EvalExprTree ( tree , ad , NULL , & result )"		826308	1					
ANR	826448	Callee	EvalExprTree		826308	0					
ANR	826449	Identifier	EvalExprTree		826308	0					
ANR	826450	ArgumentList	tree		826308	1					
ANR	826451	Argument	tree		826308	0					
ANR	826452	Identifier	tree		826308	0					
ANR	826453	Argument	ad		826308	1					
ANR	826454	Identifier	ad		826308	0					
ANR	826455	Argument	NULL		826308	2					
ANR	826456	Identifier	NULL		826308	0					
ANR	826457	Argument	& result		826308	3					
ANR	826458	UnaryOperationExpression	& result		826308	0					
ANR	826459	UnaryOperator	&		826308	0					
ANR	826460	Identifier	result		826308	1					
ANR	826461	CompoundStatement		36:49:996:996	826308	1					
ANR	826462	ExpressionStatement	"dprintf ( D_ALWAYS , ""can't evaluate constraint: %s\\n"" , constraint )"	130:2:3534:3600	826308	0	True				
ANR	826463	CallExpression	"dprintf ( D_ALWAYS , ""can't evaluate constraint: %s\\n"" , constraint )"		826308	0					
ANR	826464	Callee	dprintf		826308	0					
ANR	826465	Identifier	dprintf		826308	0					
ANR	826466	ArgumentList	D_ALWAYS		826308	1					
ANR	826467	Argument	D_ALWAYS		826308	0					
ANR	826468	Identifier	D_ALWAYS		826308	0					
ANR	826469	Argument	"""can't evaluate constraint: %s\\n"""		826308	1					
ANR	826470	PrimaryExpression	"""can't evaluate constraint: %s\\n"""		826308	0					
ANR	826471	Argument	constraint		826308	2					
ANR	826472	Identifier	constraint		826308	0					
ANR	826473	ReturnStatement	return false ;	131:2:3604:3616	826308	1	True				
ANR	826474	Identifier	false		826308	0					
ANR	826475	IfStatement	if ( result . type == compat_classad :: LX_INTEGER )		826308	9					
ANR	826476	Condition	result . type == compat_classad :: LX_INTEGER	133:6:3627:3667	826308	0	True				
ANR	826477	EqualityExpression	result . type == compat_classad :: LX_INTEGER		826308	0		==			
ANR	826478	MemberAccess	result . type		826308	0					
ANR	826479	Identifier	result		826308	0					
ANR	826480	Identifier	type		826308	1					
ANR	826481	Identifier	compat_classad :: LX_INTEGER		826308	1					
ANR	826482	CompoundStatement		40:50:1137:1137	826308	1					
ANR	826483	ReturnStatement	return ( bool ) result . i ;	134:2:3675:3696	826308	0	True				
ANR	826484	CastExpression	( bool ) result . i		826308	0					
ANR	826485	CastTarget	bool		826308	0					
ANR	826486	MemberAccess	result . i		826308	1					
ANR	826487	Identifier	result		826308	0					
ANR	826488	Identifier	i		826308	1					
ANR	826489	ExpressionStatement	"dprintf ( D_ALWAYS , ""constraint (%s) does not evaluate to bool\\n"" , constraint )"	136:1:3702:3782	826308	10	True				
ANR	826490	CallExpression	"dprintf ( D_ALWAYS , ""constraint (%s) does not evaluate to bool\\n"" , constraint )"		826308	0					
ANR	826491	Callee	dprintf		826308	0					
ANR	826492	Identifier	dprintf		826308	0					
ANR	826493	ArgumentList	D_ALWAYS		826308	1					
ANR	826494	Argument	D_ALWAYS		826308	0					
ANR	826495	Identifier	D_ALWAYS		826308	0					
ANR	826496	Argument	"""constraint (%s) does not evaluate to bool\\n"""		826308	1					
ANR	826497	PrimaryExpression	"""constraint (%s) does not evaluate to bool\\n"""		826308	0					
ANR	826498	Argument	constraint		826308	2					
ANR	826499	Identifier	constraint		826308	0					
ANR	826500	ReturnStatement	return false ;	138:1:3785:3797	826308	11	True				
ANR	826501	Identifier	false		826308	0					
ANR	826502	ReturnType	bool		826308	1					
ANR	826503	Identifier	EvalBool		826308	2					
ANR	826504	ParameterList	"compat_classad :: ClassAd * ad , const char * constraint"		826308	3					
ANR	826505	Parameter	compat_classad :: ClassAd * ad	93:14:2480:2506	826308	0	True				
ANR	826506	ParameterType	compat_classad :: ClassAd *		826308	0					
ANR	826507	Identifier	ad		826308	1					
ANR	826508	Parameter	const char * constraint	93:43:2509:2530	826308	1	True				
ANR	826509	ParameterType	const char *		826308	0					
ANR	826510	Identifier	constraint		826308	1					
ANR	826511	CFGEntryNode	ENTRY		826308		True				
ANR	826512	CFGExitNode	EXIT		826308		True				
ANR	826513	Symbol	strcmp		826308						
ANR	826514	Symbol	compat_classad :: LX_INTEGER		826308						
ANR	826515	Symbol	constraint_changed		826308						
ANR	826516	Symbol	ad		826308						
ANR	826517	Symbol	NULL		826308						
ANR	826518	Symbol	result . i		826308						
ANR	826519	Symbol	EvalExprTree		826308						
ANR	826520	Symbol	tree		826308						
ANR	826521	Symbol	false		826308						
ANR	826522	Symbol	D_ALWAYS		826308						
ANR	826523	Symbol	result . type		826308						
ANR	826524	Symbol	result		826308						
ANR	826525	Symbol	saved_constraint		826308						
ANR	826526	Symbol	ParseClassAdRvalExpr		826308						
ANR	826527	Symbol	& result		826308						
ANR	826528	Symbol	true		826308						
ANR	826529	Symbol	tmp_tree		826308						
ANR	826530	Symbol	constraint		826308						
ANR	826531	Symbol	strdup		826308						
ANR	826532	Symbol	compat_classad :: RemoveExplicitTargetRefs		826308						
ANR	826533	Function	EvalBool	141:0:3802:4216							
ANR	826534	FunctionDef	"EvalBool (compat_classad :: ClassAd * ad , classad :: ExprTree * tree)"		826533	0					
ANR	826535	CompoundStatement		142:0:3870:4216	826533	0					
ANR	826536	IdentifierDeclStatement	compat_classad :: EvalResult result ;	143:1:3873:3906	826533	0	True				
ANR	826537	IdentifierDecl	result		826533	0					
ANR	826538	IdentifierDeclType	compat_classad :: EvalResult		826533	0					
ANR	826539	Identifier	result		826533	1					
ANR	826540	IfStatement	"if ( ! EvalExprTree ( tree , ad , NULL , & result ) )"		826533	1					
ANR	826541	Condition	"! EvalExprTree ( tree , ad , NULL , & result )"	147:6:4047:4086	826533	0	True				
ANR	826542	UnaryOperationExpression	"! EvalExprTree ( tree , ad , NULL , & result )"		826533	0					
ANR	826543	UnaryOperator	!		826533	0					
ANR	826544	CallExpression	"EvalExprTree ( tree , ad , NULL , & result )"		826533	1					
ANR	826545	Callee	EvalExprTree		826533	0					
ANR	826546	Identifier	EvalExprTree		826533	0					
ANR	826547	ArgumentList	tree		826533	1					
ANR	826548	Argument	tree		826533	0					
ANR	826549	Identifier	tree		826533	0					
ANR	826550	Argument	ad		826533	1					
ANR	826551	Identifier	ad		826533	0					
ANR	826552	Argument	NULL		826533	2					
ANR	826553	Identifier	NULL		826533	0					
ANR	826554	Argument	& result		826533	3					
ANR	826555	UnaryOperationExpression	& result		826533	0					
ANR	826556	UnaryOperator	&		826533	0					
ANR	826557	Identifier	result		826533	1					
ANR	826558	CompoundStatement		6:49:219:219	826533	1					
ANR	826559	ReturnStatement	return false ;	148:2:4102:4114	826533	0	True				
ANR	826560	Identifier	false		826533	0					
ANR	826561	IfStatement	if ( result . type == compat_classad :: LX_INTEGER )		826533	2					
ANR	826562	Condition	result . type == compat_classad :: LX_INTEGER	151:6:4126:4166	826533	0	True				
ANR	826563	EqualityExpression	result . type == compat_classad :: LX_INTEGER		826533	0		==			
ANR	826564	MemberAccess	result . type		826533	0					
ANR	826565	Identifier	result		826533	0					
ANR	826566	Identifier	type		826533	1					
ANR	826567	Identifier	compat_classad :: LX_INTEGER		826533	1					
ANR	826568	CompoundStatement		10:50:299:299	826533	1					
ANR	826569	ReturnStatement	return ( bool ) result . i ;	152:2:4174:4195	826533	0	True				
ANR	826570	CastExpression	( bool ) result . i		826533	0					
ANR	826571	CastTarget	bool		826533	0					
ANR	826572	MemberAccess	result . i		826533	1					
ANR	826573	Identifier	result		826533	0					
ANR	826574	Identifier	i		826533	1					
ANR	826575	ReturnStatement	return false ;	155:1:4202:4214	826533	3	True				
ANR	826576	Identifier	false		826533	0					
ANR	826577	ReturnType	bool		826533	1					
ANR	826578	Identifier	EvalBool		826533	2					
ANR	826579	ParameterList	"compat_classad :: ClassAd * ad , classad :: ExprTree * tree"		826533	3					
ANR	826580	Parameter	compat_classad :: ClassAd * ad	141:14:3816:3842	826533	0	True				
ANR	826581	ParameterType	compat_classad :: ClassAd *		826533	0					
ANR	826582	Identifier	ad		826533	1					
ANR	826583	Parameter	classad :: ExprTree * tree	141:43:3845:3867	826533	1	True				
ANR	826584	ParameterType	classad :: ExprTree *		826533	0					
ANR	826585	Identifier	tree		826533	1					
ANR	826586	CFGEntryNode	ENTRY		826533		True				
ANR	826587	CFGExitNode	EXIT		826533		True				
ANR	826588	Symbol	result		826533						
ANR	826589	Symbol	compat_classad :: LX_INTEGER		826533						
ANR	826590	Symbol	ad		826533						
ANR	826591	Symbol	NULL		826533						
ANR	826592	Symbol	result . i		826533						
ANR	826593	Symbol	& result		826533						
ANR	826594	Symbol	EvalExprTree		826533						
ANR	826595	Symbol	tree		826533						
ANR	826596	Symbol	false		826533						
ANR	826597	Symbol	result . type		826533						
ANR	826598	Function	ClassAdsAreSame	158:0:4219:5412							
ANR	826599	FunctionDef	"ClassAdsAreSame (compat_classad :: ClassAd * ad1 , compat_classad :: ClassAd * ad2 , StringList * ignored_attrs , bool verbose)"		826598	0					
ANR	826600	CompoundStatement		159:0:4344:5412	826598	0					
ANR	826601	IdentifierDeclStatement	"classad :: ExprTree * ad1_expr , * ad2_expr ;"	160:1:4347:4385	826598	0	True				
ANR	826602	IdentifierDecl	* ad1_expr		826598	0					
ANR	826603	IdentifierDeclType	classad :: ExprTree *		826598	0					
ANR	826604	Identifier	ad1_expr		826598	1					
ANR	826605	IdentifierDecl	* ad2_expr		826598	1					
ANR	826606	IdentifierDeclType	classad :: ExprTree *		826598	0					
ANR	826607	Identifier	ad2_expr		826598	1					
ANR	826608	IdentifierDeclStatement	const char * attr_name ;	161:1:4388:4409	826598	1	True				
ANR	826609	IdentifierDecl	* attr_name		826598	0					
ANR	826610	IdentifierDeclType	const char *		826598	0					
ANR	826611	Identifier	attr_name		826598	1					
ANR	826612	ExpressionStatement	ad2 -> ResetExpr ( )	162:1:4412:4428	826598	2	True				
ANR	826613	CallExpression	ad2 -> ResetExpr ( )		826598	0					
ANR	826614	Callee	ad2 -> ResetExpr		826598	0					
ANR	826615	PtrMemberAccess	ad2 -> ResetExpr		826598	0					
ANR	826616	Identifier	ad2		826598	0					
ANR	826617	Identifier	ResetExpr		826598	1					
ANR	826618	ArgumentList			826598	1					
ANR	826619	IdentifierDeclStatement	bool found_diff = false ;	163:1:4431:4454	826598	3	True				
ANR	826620	IdentifierDecl	found_diff = false		826598	0					
ANR	826621	IdentifierDeclType	bool		826598	0					
ANR	826622	Identifier	found_diff		826598	1					
ANR	826623	AssignmentExpression	found_diff = false		826598	2		=			
ANR	826624	Identifier	false		826598	0					
ANR	826625	Identifier	false		826598	1					
ANR	826626	WhileStatement	"while ( ad2 -> NextExpr ( attr_name , ad2_expr ) && ! found_diff )"		826598	4					
ANR	826627	Condition	"ad2 -> NextExpr ( attr_name , ad2_expr ) && ! found_diff"	164:8:4464:4513	826598	0	True				
ANR	826628	AndExpression	"ad2 -> NextExpr ( attr_name , ad2_expr ) && ! found_diff"		826598	0		&&			
ANR	826629	CallExpression	"ad2 -> NextExpr ( attr_name , ad2_expr )"		826598	0					
ANR	826630	Callee	ad2 -> NextExpr		826598	0					
ANR	826631	PtrMemberAccess	ad2 -> NextExpr		826598	0					
ANR	826632	Identifier	ad2		826598	0					
ANR	826633	Identifier	NextExpr		826598	1					
ANR	826634	ArgumentList	attr_name		826598	1					
ANR	826635	Argument	attr_name		826598	0					
ANR	826636	Identifier	attr_name		826598	0					
ANR	826637	Argument	ad2_expr		826598	1					
ANR	826638	Identifier	ad2_expr		826598	0					
ANR	826639	UnaryOperationExpression	! found_diff		826598	1					
ANR	826640	UnaryOperator	!		826598	0					
ANR	826641	Identifier	found_diff		826598	1					
ANR	826642	CompoundStatement		6:61:172:172	826598	1					
ANR	826643	IfStatement	if ( ignored_attrs && ignored_attrs -> contains_anycase ( attr_name ) )		826598	0					
ANR	826644	Condition	ignored_attrs && ignored_attrs -> contains_anycase ( attr_name )	165:6:4525:4583	826598	0	True				
ANR	826645	AndExpression	ignored_attrs && ignored_attrs -> contains_anycase ( attr_name )		826598	0		&&			
ANR	826646	Identifier	ignored_attrs		826598	0					
ANR	826647	CallExpression	ignored_attrs -> contains_anycase ( attr_name )		826598	1					
ANR	826648	Callee	ignored_attrs -> contains_anycase		826598	0					
ANR	826649	PtrMemberAccess	ignored_attrs -> contains_anycase		826598	0					
ANR	826650	Identifier	ignored_attrs		826598	0					
ANR	826651	Identifier	contains_anycase		826598	1					
ANR	826652	ArgumentList	attr_name		826598	1					
ANR	826653	Argument	attr_name		826598	0					
ANR	826654	Identifier	attr_name		826598	0					
ANR	826655	CompoundStatement		7:68:242:242	826598	1					
ANR	826656	IfStatement	if ( verbose )		826598	0					
ANR	826657	Condition	verbose	166:7:4596:4602	826598	0	True				
ANR	826658	Identifier	verbose		826598	0					
ANR	826659	CompoundStatement		8:17:261:261	826598	1					
ANR	826660	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""ClassAdsAreSame(): skipping \\""%s\\""\\n"" , attr_name )"	167:4:4612:4692	826598	0	True				
ANR	826661	CallExpression	"dprintf ( D_FULLDEBUG , ""ClassAdsAreSame(): skipping \\""%s\\""\\n"" , attr_name )"		826598	0					
ANR	826662	Callee	dprintf		826598	0					
ANR	826663	Identifier	dprintf		826598	0					
ANR	826664	ArgumentList	D_FULLDEBUG		826598	1					
ANR	826665	Argument	D_FULLDEBUG		826598	0					
ANR	826666	Identifier	D_FULLDEBUG		826598	0					
ANR	826667	Argument	"""ClassAdsAreSame(): skipping \\""%s\\""\\n"""		826598	1					
ANR	826668	PrimaryExpression	"""ClassAdsAreSame(): skipping \\""%s\\""\\n"""		826598	0					
ANR	826669	Argument	attr_name		826598	2					
ANR	826670	Identifier	attr_name		826598	0					
ANR	826671	ContinueStatement	continue ;	170:3:4702:4710	826598	1	True				
ANR	826672	ExpressionStatement	ad1_expr = ad1 -> LookupExpr ( attr_name )	172:2:4718:4757	826598	1	True				
ANR	826673	AssignmentExpression	ad1_expr = ad1 -> LookupExpr ( attr_name )		826598	0		=			
ANR	826674	Identifier	ad1_expr		826598	0					
ANR	826675	CallExpression	ad1 -> LookupExpr ( attr_name )		826598	1					
ANR	826676	Callee	ad1 -> LookupExpr		826598	0					
ANR	826677	PtrMemberAccess	ad1 -> LookupExpr		826598	0					
ANR	826678	Identifier	ad1		826598	0					
ANR	826679	Identifier	LookupExpr		826598	1					
ANR	826680	ArgumentList	attr_name		826598	1					
ANR	826681	Argument	attr_name		826598	0					
ANR	826682	Identifier	attr_name		826598	0					
ANR	826683	IfStatement	if ( ! ad1_expr )		826598	2					
ANR	826684	Condition	! ad1_expr	173:6:4765:4774	826598	0	True				
ANR	826685	UnaryOperationExpression	! ad1_expr		826598	0					
ANR	826686	UnaryOperator	!		826598	0					
ANR	826687	Identifier	ad1_expr		826598	1					
ANR	826688	CompoundStatement		15:19:433:433	826598	1					
ANR	826689	IfStatement	if ( verbose )		826598	0					
ANR	826690	Condition	verbose	176:7:4864:4870	826598	0	True				
ANR	826691	Identifier	verbose		826598	0					
ANR	826692	CompoundStatement		18:17:529:529	826598	1					
ANR	826693	Statement	dprintf	177:4:4880:4886	826598	0	True				
ANR	826694	Statement	(	177:11:4887:4887	826598	1	True				
ANR	826695	Statement	D_FULLDEBUG	177:13:4889:4899	826598	2	True				
ANR	826696	Statement	","	177:24:4900:4900	826598	3	True				
ANR	826697	Statement	"""ClassAdsAreSame(): """	177:26:4902:4922	826598	4	True				
ANR	826698	Statement	"""ad2 contains %s and ad1 does not\\n"""	178:7:4931:4966	826598	5	True				
ANR	826699	Statement	","	178:43:4967:4967	826598	6	True				
ANR	826700	Statement	attr_name	178:45:4969:4977	826598	7	True				
ANR	826701	Statement	)	178:55:4979:4979	826598	8	True				
ANR	826702	ExpressionStatement		178:56:4980:4980	826598	9	True				
ANR	826703	ExpressionStatement	found_diff = true	180:3:4990:5007	826598	1	True				
ANR	826704	AssignmentExpression	found_diff = true		826598	0		=			
ANR	826705	Identifier	found_diff		826598	0					
ANR	826706	Identifier	true		826598	1					
ANR	826707	BreakStatement	break ;	181:3:5012:5017	826598	2	True				
ANR	826708	IfStatement	if ( ad1_expr -> SameAs ( ad2_expr ) )		826598	3					
ANR	826709	Condition	ad1_expr -> SameAs ( ad2_expr )	183:6:5029:5056	826598	0	True				
ANR	826710	CallExpression	ad1_expr -> SameAs ( ad2_expr )		826598	0					
ANR	826711	Callee	ad1_expr -> SameAs		826598	0					
ANR	826712	PtrMemberAccess	ad1_expr -> SameAs		826598	0					
ANR	826713	Identifier	ad1_expr		826598	0					
ANR	826714	Identifier	SameAs		826598	1					
ANR	826715	ArgumentList	ad2_expr		826598	1					
ANR	826716	Argument	ad2_expr		826598	0					
ANR	826717	Identifier	ad2_expr		826598	0					
ANR	826718	CompoundStatement		25:37:715:715	826598	1					
ANR	826719	IfStatement	if ( verbose )		826598	0					
ANR	826720	Condition	verbose	184:7:5069:5075	826598	0	True				
ANR	826721	Identifier	verbose		826598	0					
ANR	826722	CompoundStatement		26:17:734:734	826598	1					
ANR	826723	Statement	dprintf	185:4:5085:5091	826598	0	True				
ANR	826724	Statement	(	185:11:5092:5092	826598	1	True				
ANR	826725	Statement	D_FULLDEBUG	185:13:5094:5104	826598	2	True				
ANR	826726	Statement	","	185:24:5105:5105	826598	3	True				
ANR	826727	Statement	"""ClassAdsAreSame(): value of %s in """	185:26:5107:5142	826598	4	True				
ANR	826728	Statement	"""ad1 matches value in ad2\\n"""	186:7:5151:5178	826598	5	True				
ANR	826729	Statement	","	186:35:5179:5179	826598	6	True				
ANR	826730	Statement	attr_name	186:37:5181:5189	826598	7	True				
ANR	826731	Statement	)	186:47:5191:5191	826598	8	True				
ANR	826732	ExpressionStatement		186:48:5192:5192	826598	9	True				
ANR	826733	ElseStatement	else		826598	0					
ANR	826734	CompoundStatement		30:9:863:863	826598	0					
ANR	826735	IfStatement	if ( verbose )		826598	0					
ANR	826736	Condition	verbose	189:7:5217:5223	826598	0	True				
ANR	826737	Identifier	verbose		826598	0					
ANR	826738	CompoundStatement		31:17:882:882	826598	1					
ANR	826739	Statement	dprintf	190:4:5233:5239	826598	0	True				
ANR	826740	Statement	(	190:11:5240:5240	826598	1	True				
ANR	826741	Statement	D_FULLDEBUG	190:13:5242:5252	826598	2	True				
ANR	826742	Statement	","	190:24:5253:5253	826598	3	True				
ANR	826743	Statement	"""ClassAdsAreSame(): value of %s in """	190:26:5255:5290	826598	4	True				
ANR	826744	Statement	"""ad1 is different than in ad2\\n"""	191:7:5299:5330	826598	5	True				
ANR	826745	Statement	","	191:39:5331:5331	826598	6	True				
ANR	826746	Statement	attr_name	191:41:5333:5341	826598	7	True				
ANR	826747	Statement	)	191:51:5343:5343	826598	8	True				
ANR	826748	ExpressionStatement		191:52:5344:5344	826598	9	True				
ANR	826749	ExpressionStatement	found_diff = true	193:3:5354:5371	826598	1	True				
ANR	826750	AssignmentExpression	found_diff = true		826598	0		=			
ANR	826751	Identifier	found_diff		826598	0					
ANR	826752	Identifier	true		826598	1					
ANR	826753	BreakStatement	break ;	194:3:5376:5381	826598	2	True				
ANR	826754	ReturnStatement	return ! found_diff ;	197:1:5391:5410	826598	5	True				
ANR	826755	UnaryOperationExpression	! found_diff		826598	0					
ANR	826756	UnaryOperator	!		826598	0					
ANR	826757	Identifier	found_diff		826598	1					
ANR	826758	ReturnType	bool		826598	1					
ANR	826759	Identifier	ClassAdsAreSame		826598	2					
ANR	826760	ParameterList	"compat_classad :: ClassAd * ad1 , compat_classad :: ClassAd * ad2 , StringList * ignored_attrs , bool verbose"		826598	3					
ANR	826761	Parameter	compat_classad :: ClassAd * ad1	158:22:4241:4268	826598	0	True				
ANR	826762	ParameterType	compat_classad :: ClassAd *		826598	0					
ANR	826763	Identifier	ad1		826598	1					
ANR	826764	Parameter	compat_classad :: ClassAd * ad2	158:52:4271:4299	826598	1	True				
ANR	826765	ParameterType	compat_classad :: ClassAd *		826598	0					
ANR	826766	Identifier	ad2		826598	1					
ANR	826767	Parameter	StringList * ignored_attrs	158:83:4302:4326	826598	2	True				
ANR	826768	ParameterType	StringList *		826598	0					
ANR	826769	Identifier	ignored_attrs		826598	1					
ANR	826770	Parameter	bool verbose	158:110:4329:4340	826598	3	True				
ANR	826771	ParameterType	bool		826598	0					
ANR	826772	Identifier	verbose		826598	1					
ANR	826773	CFGEntryNode	ENTRY		826598		True				
ANR	826774	CFGExitNode	EXIT		826598		True				
ANR	826775	Symbol	attr_name		826598						
ANR	826776	Symbol	* ad2		826598						
ANR	826777	Symbol	* ad1		826598						
ANR	826778	Symbol	ignored_attrs		826598						
ANR	826779	Symbol	false		826598						
ANR	826780	Symbol	* ignored_attrs		826598						
ANR	826781	Symbol	D_FULLDEBUG		826598						
ANR	826782	Symbol	ad1_expr -> SameAs		826598						
ANR	826783	Symbol	ad2		826598						
ANR	826784	Symbol	ad1		826598						
ANR	826785	Symbol	verbose		826598						
ANR	826786	Symbol	ad1_expr		826598						
ANR	826787	Symbol	ad2 -> NextExpr		826598						
ANR	826788	Symbol	ad1 -> LookupExpr		826598						
ANR	826789	Symbol	found_diff		826598						
ANR	826790	Symbol	ad2_expr		826598						
ANR	826791	Symbol	true		826598						
ANR	826792	Symbol	ignored_attrs -> contains_anycase		826598						
ANR	826793	Symbol	* ad1_expr		826598						
ANR	826794	Function	EvalExprTree	200:0:5415:7048							
ANR	826795	FunctionDef	"EvalExprTree (classad :: ExprTree * expr , compat_classad :: ClassAd * source , compat_classad :: ClassAd * target , compat_classad :: EvalResult * result)"		826794	0					
ANR	826796	CompoundStatement		202:0:5567:7048	826794	0					
ANR	826797	IdentifierDeclStatement	int rc = TRUE ;	203:1:5570:5583	826794	0	True				
ANR	826798	IdentifierDecl	rc = TRUE		826794	0					
ANR	826799	IdentifierDeclType	int		826794	0					
ANR	826800	Identifier	rc		826794	1					
ANR	826801	AssignmentExpression	rc = TRUE		826794	2		=			
ANR	826802	Identifier	TRUE		826794	0					
ANR	826803	Identifier	TRUE		826794	1					
ANR	826804	IfStatement	if ( ! expr || ! source || ! result )		826794	1					
ANR	826805	Condition	! expr || ! source || ! result	204:6:5591:5617	826794	0	True				
ANR	826806	OrExpression	! expr || ! source || ! result		826794	0		||			
ANR	826807	UnaryOperationExpression	! expr		826794	0					
ANR	826808	UnaryOperator	!		826794	0					
ANR	826809	Identifier	expr		826794	1					
ANR	826810	OrExpression	! source || ! result		826794	1		||			
ANR	826811	UnaryOperationExpression	! source		826794	0					
ANR	826812	UnaryOperator	!		826794	0					
ANR	826813	Identifier	source		826794	1					
ANR	826814	UnaryOperationExpression	! result		826794	1					
ANR	826815	UnaryOperator	!		826794	0					
ANR	826816	Identifier	result		826794	1					
ANR	826817	CompoundStatement		3:36:53:53	826794	1					
ANR	826818	ReturnStatement	return FALSE ;	205:2:5625:5637	826794	0	True				
ANR	826819	Identifier	FALSE		826794	0					
ANR	826820	IdentifierDeclStatement	classad :: Value val ;	208:1:5644:5662	826794	2	True				
ANR	826821	IdentifierDecl	val		826794	0					
ANR	826822	IdentifierDeclType	classad :: Value		826794	0					
ANR	826823	Identifier	val		826794	1					
ANR	826824	IdentifierDeclStatement	const classad :: ClassAd * old_scope = expr -> GetParentScope ( ) ;	209:1:5665:5723	826794	3	True				
ANR	826825	IdentifierDecl	* old_scope = expr -> GetParentScope ( )		826794	0					
ANR	826826	IdentifierDeclType	const classad :: ClassAd *		826794	0					
ANR	826827	Identifier	old_scope		826794	1					
ANR	826828	AssignmentExpression	* old_scope = expr -> GetParentScope ( )		826794	2		=			
ANR	826829	Identifier	old_scope		826794	0					
ANR	826830	CallExpression	expr -> GetParentScope ( )		826794	1					
ANR	826831	Callee	expr -> GetParentScope		826794	0					
ANR	826832	PtrMemberAccess	expr -> GetParentScope		826794	0					
ANR	826833	Identifier	expr		826794	0					
ANR	826834	Identifier	GetParentScope		826794	1					
ANR	826835	ArgumentList			826794	1					
ANR	826836	IdentifierDeclStatement	classad :: MatchClassAd * mad = NULL ;	210:1:5726:5759	826794	4	True				
ANR	826837	IdentifierDecl	* mad = NULL		826794	0					
ANR	826838	IdentifierDeclType	classad :: MatchClassAd *		826794	0					
ANR	826839	Identifier	mad		826794	1					
ANR	826840	AssignmentExpression	* mad = NULL		826794	2		=			
ANR	826841	Identifier	NULL		826794	0					
ANR	826842	Identifier	NULL		826794	1					
ANR	826843	ExpressionStatement	expr -> SetParentScope ( source )	212:1:5763:5793	826794	5	True				
ANR	826844	CallExpression	expr -> SetParentScope ( source )		826794	0					
ANR	826845	Callee	expr -> SetParentScope		826794	0					
ANR	826846	PtrMemberAccess	expr -> SetParentScope		826794	0					
ANR	826847	Identifier	expr		826794	0					
ANR	826848	Identifier	SetParentScope		826794	1					
ANR	826849	ArgumentList	source		826794	1					
ANR	826850	Argument	source		826794	0					
ANR	826851	Identifier	source		826794	0					
ANR	826852	IfStatement	if ( target && target != source )		826794	6					
ANR	826853	Condition	target && target != source	213:6:5801:5826	826794	0	True				
ANR	826854	AndExpression	target && target != source		826794	0		&&			
ANR	826855	Identifier	target		826794	0					
ANR	826856	EqualityExpression	target != source		826794	1		!=			
ANR	826857	Identifier	target		826794	0					
ANR	826858	Identifier	source		826794	1					
ANR	826859	CompoundStatement		12:35:262:262	826794	1					
ANR	826860	ExpressionStatement	"mad = compat_classad :: getTheMatchAd ( source , target )"	214:2:5834:5887	826794	0	True				
ANR	826861	AssignmentExpression	"mad = compat_classad :: getTheMatchAd ( source , target )"		826794	0		=			
ANR	826862	Identifier	mad		826794	0					
ANR	826863	CallExpression	"compat_classad :: getTheMatchAd ( source , target )"		826794	1					
ANR	826864	Callee	compat_classad :: getTheMatchAd		826794	0					
ANR	826865	Identifier	compat_classad :: getTheMatchAd		826794	0					
ANR	826866	ArgumentList	source		826794	1					
ANR	826867	Argument	source		826794	0					
ANR	826868	Identifier	source		826794	0					
ANR	826869	Argument	target		826794	1					
ANR	826870	Identifier	target		826794	0					
ANR	826871	ElseStatement	else		826794	0					
ANR	826872	CompoundStatement		14:8:329:329	826794	0					
ANR	826873	ExpressionStatement	compat_classad :: getTheMyRef ( source )	216:2:5901:5938	826794	0	True				
ANR	826874	CallExpression	compat_classad :: getTheMyRef ( source )		826794	0					
ANR	826875	Callee	compat_classad :: getTheMyRef		826794	0					
ANR	826876	Identifier	compat_classad :: getTheMyRef		826794	0					
ANR	826877	ArgumentList	source		826794	1					
ANR	826878	Argument	source		826794	0					
ANR	826879	Identifier	source		826794	0					
ANR	826880	IfStatement	"if ( source -> EvaluateExpr ( expr , val ) )"		826794	7					
ANR	826881	Condition	"source -> EvaluateExpr ( expr , val )"	218:6:5949:5981	826794	0	True				
ANR	826882	CallExpression	"source -> EvaluateExpr ( expr , val )"		826794	0					
ANR	826883	Callee	source -> EvaluateExpr		826794	0					
ANR	826884	PtrMemberAccess	source -> EvaluateExpr		826794	0					
ANR	826885	Identifier	source		826794	0					
ANR	826886	Identifier	EvaluateExpr		826794	1					
ANR	826887	ArgumentList	expr		826794	1					
ANR	826888	Argument	expr		826794	0					
ANR	826889	Identifier	expr		826794	0					
ANR	826890	Argument	val		826794	1					
ANR	826891	Identifier	val		826794	0					
ANR	826892	CompoundStatement		17:42:417:417	826794	1					
ANR	826893	SwitchStatement	switch ( val . GetType ( ) )		826794	0					
ANR	826894	Condition	val . GetType ( )	219:11:5998:6010	826794	0	True				
ANR	826895	CallExpression	val . GetType ( )		826794	0					
ANR	826896	Callee	val . GetType		826794	0					
ANR	826897	MemberAccess	val . GetType		826794	0					
ANR	826898	Identifier	val		826794	0					
ANR	826899	Identifier	GetType		826794	1					
ANR	826900	ArgumentList			826794	1					
ANR	826901	CompoundStatement		18:27:446:446	826794	1					
ANR	826902	Label	case classad :: Value :: ERROR_VALUE :	220:2:6018:6050	826794	0	True				
ANR	826903	Identifier	classad :: Value :: ERROR_VALUE		826794	0					
ANR	826904	ExpressionStatement	result -> type = compat_classad :: LX_ERROR	221:3:6055:6094	826794	1	True				
ANR	826905	AssignmentExpression	result -> type = compat_classad :: LX_ERROR		826794	0		=			
ANR	826906	PtrMemberAccess	result -> type		826794	0					
ANR	826907	Identifier	result		826794	0					
ANR	826908	Identifier	type		826794	1					
ANR	826909	Identifier	compat_classad :: LX_ERROR		826794	1					
ANR	826910	BreakStatement	break ;	222:3:6099:6104	826794	2	True				
ANR	826911	Label	case classad :: Value :: UNDEFINED_VALUE :	223:2:6108:6144	826794	3	True				
ANR	826912	Identifier	classad :: Value :: UNDEFINED_VALUE		826794	0					
ANR	826913	ExpressionStatement	result -> type = compat_classad :: LX_UNDEFINED	224:3:6149:6192	826794	4	True				
ANR	826914	AssignmentExpression	result -> type = compat_classad :: LX_UNDEFINED		826794	0		=			
ANR	826915	PtrMemberAccess	result -> type		826794	0					
ANR	826916	Identifier	result		826794	0					
ANR	826917	Identifier	type		826794	1					
ANR	826918	Identifier	compat_classad :: LX_UNDEFINED		826794	1					
ANR	826919	BreakStatement	break ;	225:3:6197:6202	826794	5	True				
ANR	826920	Label	case classad :: Value :: BOOLEAN_VALUE :	226:2:6206:6240	826794	6	True				
ANR	826921	Identifier	classad :: Value :: BOOLEAN_VALUE		826794	0					
ANR	826922	CompoundStatement		27:3:725:731	826794	7					
ANR	826923	ExpressionStatement	result -> type = compat_classad :: LX_INTEGER	227:3:6247:6288	826794	0	True				
ANR	826924	AssignmentExpression	result -> type = compat_classad :: LX_INTEGER		826794	0		=			
ANR	826925	PtrMemberAccess	result -> type		826794	0					
ANR	826926	Identifier	result		826794	0					
ANR	826927	Identifier	type		826794	1					
ANR	826928	Identifier	compat_classad :: LX_INTEGER		826794	1					
ANR	826929	IdentifierDeclStatement	bool v ;	228:3:6293:6299	826794	1	True				
ANR	826930	IdentifierDecl	v		826794	0					
ANR	826931	IdentifierDeclType	bool		826794	0					
ANR	826932	Identifier	v		826794	1					
ANR	826933	ExpressionStatement	val . IsBooleanValue ( v )	229:3:6304:6327	826794	2	True				
ANR	826934	CallExpression	val . IsBooleanValue ( v )		826794	0					
ANR	826935	Callee	val . IsBooleanValue		826794	0					
ANR	826936	MemberAccess	val . IsBooleanValue		826794	0					
ANR	826937	Identifier	val		826794	0					
ANR	826938	Identifier	IsBooleanValue		826794	1					
ANR	826939	ArgumentList	v		826794	1					
ANR	826940	Argument	v		826794	0					
ANR	826941	Identifier	v		826794	0					
ANR	826942	ExpressionStatement	result -> i = v ? 1 : 0	230:3:6332:6353	826794	3	True				
ANR	826943	AssignmentExpression	result -> i = v ? 1 : 0		826794	0		=			
ANR	826944	PtrMemberAccess	result -> i		826794	0					
ANR	826945	Identifier	result		826794	0					
ANR	826946	Identifier	i		826794	1					
ANR	826947	ConditionalExpression	v ? 1 : 0		826794	1					
ANR	826948	Condition	v		826794	0					
ANR	826949	Identifier	v		826794	0					
ANR	826950	PrimaryExpression	1		826794	1					
ANR	826951	PrimaryExpression	0		826794	2					
ANR	826952	BreakStatement	break ;	231:3:6358:6363	826794	4	True				
ANR	826953	Label	case classad :: Value :: INTEGER_VALUE :	233:2:6371:6405	826794	8	True				
ANR	826954	Identifier	classad :: Value :: INTEGER_VALUE		826794	0					
ANR	826955	ExpressionStatement	result -> type = compat_classad :: LX_INTEGER	234:3:6410:6451	826794	9	True				
ANR	826956	AssignmentExpression	result -> type = compat_classad :: LX_INTEGER		826794	0		=			
ANR	826957	PtrMemberAccess	result -> type		826794	0					
ANR	826958	Identifier	result		826794	0					
ANR	826959	Identifier	type		826794	1					
ANR	826960	Identifier	compat_classad :: LX_INTEGER		826794	1					
ANR	826961	ExpressionStatement	val . IsIntegerValue ( result -> i )	235:3:6456:6487	826794	10	True				
ANR	826962	CallExpression	val . IsIntegerValue ( result -> i )		826794	0					
ANR	826963	Callee	val . IsIntegerValue		826794	0					
ANR	826964	MemberAccess	val . IsIntegerValue		826794	0					
ANR	826965	Identifier	val		826794	0					
ANR	826966	Identifier	IsIntegerValue		826794	1					
ANR	826967	ArgumentList	result -> i		826794	1					
ANR	826968	Argument	result -> i		826794	0					
ANR	826969	PtrMemberAccess	result -> i		826794	0					
ANR	826970	Identifier	result		826794	0					
ANR	826971	Identifier	i		826794	1					
ANR	826972	BreakStatement	break ;	236:3:6492:6497	826794	11	True				
ANR	826973	Label	case classad :: Value :: REAL_VALUE :	237:2:6501:6532	826794	12	True				
ANR	826974	Identifier	classad :: Value :: REAL_VALUE		826794	0					
ANR	826975	CompoundStatement		38:3:1015:1023	826794	13					
ANR	826976	ExpressionStatement	result -> type = compat_classad :: LX_FLOAT	238:3:6539:6578	826794	0	True				
ANR	826977	AssignmentExpression	result -> type = compat_classad :: LX_FLOAT		826794	0		=			
ANR	826978	PtrMemberAccess	result -> type		826794	0					
ANR	826979	Identifier	result		826794	0					
ANR	826980	Identifier	type		826794	1					
ANR	826981	Identifier	compat_classad :: LX_FLOAT		826794	1					
ANR	826982	IdentifierDeclStatement	double d ;	239:3:6583:6591	826794	1	True				
ANR	826983	IdentifierDecl	d		826794	0					
ANR	826984	IdentifierDeclType	double		826794	0					
ANR	826985	Identifier	d		826794	1					
ANR	826986	ExpressionStatement	val . IsRealValue ( d )	240:3:6596:6616	826794	2	True				
ANR	826987	CallExpression	val . IsRealValue ( d )		826794	0					
ANR	826988	Callee	val . IsRealValue		826794	0					
ANR	826989	MemberAccess	val . IsRealValue		826794	0					
ANR	826990	Identifier	val		826794	0					
ANR	826991	Identifier	IsRealValue		826794	1					
ANR	826992	ArgumentList	d		826794	1					
ANR	826993	Argument	d		826794	0					
ANR	826994	Identifier	d		826794	0					
ANR	826995	ExpressionStatement	result -> f = d	241:3:6621:6634	826794	3	True				
ANR	826996	AssignmentExpression	result -> f = d		826794	0		=			
ANR	826997	PtrMemberAccess	result -> f		826794	0					
ANR	826998	Identifier	result		826794	0					
ANR	826999	Identifier	f		826794	1					
ANR	827000	Identifier	d		826794	1					
ANR	827001	BreakStatement	break ;	242:3:6639:6644	826794	4	True				
ANR	827002	Label	case classad :: Value :: STRING_VALUE :	244:2:6652:6685	826794	14	True				
ANR	827003	Identifier	classad :: Value :: STRING_VALUE		826794	0					
ANR	827004	CompoundStatement		45:3:1169:1182	826794	15					
ANR	827005	ExpressionStatement	result -> type = compat_classad :: LX_STRING	245:3:6692:6732	826794	0	True				
ANR	827006	AssignmentExpression	result -> type = compat_classad :: LX_STRING		826794	0		=			
ANR	827007	PtrMemberAccess	result -> type		826794	0					
ANR	827008	Identifier	result		826794	0					
ANR	827009	Identifier	type		826794	1					
ANR	827010	Identifier	compat_classad :: LX_STRING		826794	1					
ANR	827011	IdentifierDeclStatement	std :: string s ;	246:3:6737:6750	826794	1	True				
ANR	827012	IdentifierDecl	s		826794	0					
ANR	827013	IdentifierDeclType	std :: string		826794	0					
ANR	827014	Identifier	s		826794	1					
ANR	827015	ExpressionStatement	val . IsStringValue ( s )	247:3:6755:6777	826794	2	True				
ANR	827016	CallExpression	val . IsStringValue ( s )		826794	0					
ANR	827017	Callee	val . IsStringValue		826794	0					
ANR	827018	MemberAccess	val . IsStringValue		826794	0					
ANR	827019	Identifier	val		826794	0					
ANR	827020	Identifier	IsStringValue		826794	1					
ANR	827021	ArgumentList	s		826794	1					
ANR	827022	Argument	s		826794	0					
ANR	827023	Identifier	s		826794	0					
ANR	827024	ExpressionStatement	result -> s = strnewp ( s . c_str ( ) )	248:3:6782:6814	826794	3	True				
ANR	827025	AssignmentExpression	result -> s = strnewp ( s . c_str ( ) )		826794	0		=			
ANR	827026	PtrMemberAccess	result -> s		826794	0					
ANR	827027	Identifier	result		826794	0					
ANR	827028	Identifier	s		826794	1					
ANR	827029	CallExpression	strnewp ( s . c_str ( ) )		826794	1					
ANR	827030	Callee	strnewp		826794	0					
ANR	827031	Identifier	strnewp		826794	0					
ANR	827032	ArgumentList	s . c_str ( )		826794	1					
ANR	827033	Argument	s . c_str ( )		826794	0					
ANR	827034	CallExpression	s . c_str ( )		826794	0					
ANR	827035	Callee	s . c_str		826794	0					
ANR	827036	MemberAccess	s . c_str		826794	0					
ANR	827037	Identifier	s		826794	0					
ANR	827038	Identifier	c_str		826794	1					
ANR	827039	ArgumentList			826794	1					
ANR	827040	BreakStatement	break ;	249:3:6819:6824	826794	4	True				
ANR	827041	Label	default :	251:2:6832:6839	826794	16	True				
ANR	827042	Identifier	default		826794	0					
ANR	827043	ExpressionStatement	rc = FALSE	252:3:6844:6854	826794	17	True				
ANR	827044	AssignmentExpression	rc = FALSE		826794	0		=			
ANR	827045	Identifier	rc		826794	0					
ANR	827046	Identifier	FALSE		826794	1					
ANR	827047	ElseStatement	else		826794	0					
ANR	827048	CompoundStatement		53:8:1300:1300	826794	0					
ANR	827049	ExpressionStatement	rc = FALSE	255:2:6872:6882	826794	0	True				
ANR	827050	AssignmentExpression	rc = FALSE		826794	0		=			
ANR	827051	Identifier	rc		826794	0					
ANR	827052	Identifier	FALSE		826794	1					
ANR	827053	IfStatement	if ( mad )		826794	8					
ANR	827054	Condition	mad	258:6:6894:6896	826794	0	True				
ANR	827055	Identifier	mad		826794	0					
ANR	827056	CompoundStatement		57:12:1332:1332	826794	1					
ANR	827057	ExpressionStatement	compat_classad :: releaseTheMatchAd ( )	259:2:6904:6939	826794	0	True				
ANR	827058	CallExpression	compat_classad :: releaseTheMatchAd ( )		826794	0					
ANR	827059	Callee	compat_classad :: releaseTheMatchAd		826794	0					
ANR	827060	Identifier	compat_classad :: releaseTheMatchAd		826794	0					
ANR	827061	ArgumentList			826794	1					
ANR	827062	ElseStatement	else		826794	0					
ANR	827063	CompoundStatement		59:8:1381:1381	826794	0					
ANR	827064	ExpressionStatement	compat_classad :: releaseTheMyRef ( source )	261:2:6953:6994	826794	0	True				
ANR	827065	CallExpression	compat_classad :: releaseTheMyRef ( source )		826794	0					
ANR	827066	Callee	compat_classad :: releaseTheMyRef		826794	0					
ANR	827067	Identifier	compat_classad :: releaseTheMyRef		826794	0					
ANR	827068	ArgumentList	source		826794	1					
ANR	827069	Argument	source		826794	0					
ANR	827070	Identifier	source		826794	0					
ANR	827071	ExpressionStatement	expr -> SetParentScope ( old_scope )	263:1:7000:7033	826794	9	True				
ANR	827072	CallExpression	expr -> SetParentScope ( old_scope )		826794	0					
ANR	827073	Callee	expr -> SetParentScope		826794	0					
ANR	827074	PtrMemberAccess	expr -> SetParentScope		826794	0					
ANR	827075	Identifier	expr		826794	0					
ANR	827076	Identifier	SetParentScope		826794	1					
ANR	827077	ArgumentList	old_scope		826794	1					
ANR	827078	Argument	old_scope		826794	0					
ANR	827079	Identifier	old_scope		826794	0					
ANR	827080	ReturnStatement	return rc ;	265:1:7037:7046	826794	10	True				
ANR	827081	Identifier	rc		826794	0					
ANR	827082	ReturnType	int		826794	1					
ANR	827083	Identifier	EvalExprTree		826794	2					
ANR	827084	ParameterList	"classad :: ExprTree * expr , compat_classad :: ClassAd * source , compat_classad :: ClassAd * target , compat_classad :: EvalResult * result"		826794	3					
ANR	827085	Parameter	classad :: ExprTree * expr	200:18:5433:5455	826794	0	True				
ANR	827086	ParameterType	classad :: ExprTree *		826794	0					
ANR	827087	Identifier	expr		826794	1					
ANR	827088	Parameter	compat_classad :: ClassAd * source	200:43:5458:5488	826794	1	True				
ANR	827089	ParameterType	compat_classad :: ClassAd *		826794	0					
ANR	827090	Identifier	source		826794	1					
ANR	827091	Parameter	compat_classad :: ClassAd * target	201:6:5497:5527	826794	2	True				
ANR	827092	ParameterType	compat_classad :: ClassAd *		826794	0					
ANR	827093	Identifier	target		826794	1					
ANR	827094	Parameter	compat_classad :: EvalResult * result	201:39:5530:5563	826794	3	True				
ANR	827095	ParameterType	compat_classad :: EvalResult *		826794	0					
ANR	827096	Identifier	result		826794	1					
ANR	827097	CFGEntryNode	ENTRY		826794		True				
ANR	827098	CFGExitNode	EXIT		826794		True				
ANR	827099	Symbol	compat_classad :: LX_INTEGER		826794						
ANR	827100	Symbol	result -> s		826794						
ANR	827101	Symbol	old_scope		826794						
ANR	827102	Symbol	compat_classad :: LX_STRING		826794						
ANR	827103	Symbol	source		826794						
ANR	827104	Symbol	s . c_str		826794						
ANR	827105	Symbol	source -> EvaluateExpr		826794						
ANR	827106	Symbol	result		826794						
ANR	827107	Symbol	mad		826794						
ANR	827108	Symbol	val . GetType		826794						
ANR	827109	Symbol	compat_classad :: LX_ERROR		826794						
ANR	827110	Symbol	* result		826794						
ANR	827111	Symbol	* source		826794						
ANR	827112	Symbol	compat_classad :: LX_UNDEFINED		826794						
ANR	827113	Symbol	strnewp		826794						
ANR	827114	Symbol	expr		826794						
ANR	827115	Symbol	val		826794						
ANR	827116	Symbol	NULL		826794						
ANR	827117	Symbol	d		826794						
ANR	827118	Symbol	TRUE		826794						
ANR	827119	Symbol	compat_classad :: LX_FLOAT		826794						
ANR	827120	Symbol	result -> type		826794						
ANR	827121	Symbol	target		826794						
ANR	827122	Symbol	rc		826794						
ANR	827123	Symbol	expr -> GetParentScope		826794						
ANR	827124	Symbol	s		826794						
ANR	827125	Symbol	* expr		826794						
ANR	827126	Symbol	compat_classad :: getTheMatchAd		826794						
ANR	827127	Symbol	v		826794						
ANR	827128	Symbol	result -> i		826794						
ANR	827129	Symbol	FALSE		826794						
ANR	827130	Symbol	result -> f		826794						
ANR	827131	Function	IsAMatch	268:0:7051:7296							
ANR	827132	FunctionDef	"IsAMatch (compat_classad :: ClassAd * ad1 , compat_classad :: ClassAd * ad2)"		827131	0					
ANR	827133	CompoundStatement		269:0:7127:7296	827131	0					
ANR	827134	IdentifierDeclStatement	"classad :: MatchClassAd * mad = compat_classad :: getTheMatchAd ( ad1 , ad2 ) ;"	270:1:7130:7200	827131	0	True				
ANR	827135	IdentifierDecl	"* mad = compat_classad :: getTheMatchAd ( ad1 , ad2 )"		827131	0					
ANR	827136	IdentifierDeclType	classad :: MatchClassAd *		827131	0					
ANR	827137	Identifier	mad		827131	1					
ANR	827138	AssignmentExpression	"* mad = compat_classad :: getTheMatchAd ( ad1 , ad2 )"		827131	2		=			
ANR	827139	Identifier	mad		827131	0					
ANR	827140	CallExpression	"compat_classad :: getTheMatchAd ( ad1 , ad2 )"		827131	1					
ANR	827141	Callee	compat_classad :: getTheMatchAd		827131	0					
ANR	827142	Identifier	compat_classad :: getTheMatchAd		827131	0					
ANR	827143	ArgumentList	ad1		827131	1					
ANR	827144	Argument	ad1		827131	0					
ANR	827145	Identifier	ad1		827131	0					
ANR	827146	Argument	ad2		827131	1					
ANR	827147	Identifier	ad2		827131	0					
ANR	827148	IdentifierDeclStatement	bool result = mad -> symmetricMatch ( ) ;	272:1:7204:7239	827131	1	True				
ANR	827149	IdentifierDecl	result = mad -> symmetricMatch ( )		827131	0					
ANR	827150	IdentifierDeclType	bool		827131	0					
ANR	827151	Identifier	result		827131	1					
ANR	827152	AssignmentExpression	result = mad -> symmetricMatch ( )		827131	2		=			
ANR	827153	Identifier	result		827131	0					
ANR	827154	CallExpression	mad -> symmetricMatch ( )		827131	1					
ANR	827155	Callee	mad -> symmetricMatch		827131	0					
ANR	827156	PtrMemberAccess	mad -> symmetricMatch		827131	0					
ANR	827157	Identifier	mad		827131	0					
ANR	827158	Identifier	symmetricMatch		827131	1					
ANR	827159	ArgumentList			827131	1					
ANR	827160	ExpressionStatement	compat_classad :: releaseTheMatchAd ( )	274:1:7243:7278	827131	2	True				
ANR	827161	CallExpression	compat_classad :: releaseTheMatchAd ( )		827131	0					
ANR	827162	Callee	compat_classad :: releaseTheMatchAd		827131	0					
ANR	827163	Identifier	compat_classad :: releaseTheMatchAd		827131	0					
ANR	827164	ArgumentList			827131	1					
ANR	827165	ReturnStatement	return result ;	275:1:7281:7294	827131	3	True				
ANR	827166	Identifier	result		827131	0					
ANR	827167	ReturnType	bool		827131	1					
ANR	827168	Identifier	IsAMatch		827131	2					
ANR	827169	ParameterList	"compat_classad :: ClassAd * ad1 , compat_classad :: ClassAd * ad2"		827131	3					
ANR	827170	Parameter	compat_classad :: ClassAd * ad1	268:15:7066:7093	827131	0	True				
ANR	827171	ParameterType	compat_classad :: ClassAd *		827131	0					
ANR	827172	Identifier	ad1		827131	1					
ANR	827173	Parameter	compat_classad :: ClassAd * ad2	268:45:7096:7123	827131	1	True				
ANR	827174	ParameterType	compat_classad :: ClassAd *		827131	0					
ANR	827175	Identifier	ad2		827131	1					
ANR	827176	CFGEntryNode	ENTRY		827131		True				
ANR	827177	CFGExitNode	EXIT		827131		True				
ANR	827178	Symbol	result		827131						
ANR	827179	Symbol	mad		827131						
ANR	827180	Symbol	compat_classad :: getTheMatchAd		827131						
ANR	827181	Symbol	mad -> symmetricMatch		827131						
ANR	827182	Symbol	* mad		827131						
ANR	827183	Symbol	ad2		827131						
ANR	827184	Symbol	ad1		827131						
ANR	827185	Function	IsAHalfMatch	278:0:7299:8049							
ANR	827186	FunctionDef	"IsAHalfMatch (compat_classad :: ClassAd * my , compat_classad :: ClassAd * target)"		827185	0					
ANR	827187	CompoundStatement		279:0:7381:8049	827185	0					
ANR	827188	IdentifierDeclStatement	char const * my_target_type = my -> GetTargetTypeName ( ) ;	283:1:7564:7616	827185	0	True				
ANR	827189	IdentifierDecl	* my_target_type = my -> GetTargetTypeName ( )		827185	0					
ANR	827190	IdentifierDeclType	char const *		827185	0					
ANR	827191	Identifier	my_target_type		827185	1					
ANR	827192	AssignmentExpression	* my_target_type = my -> GetTargetTypeName ( )		827185	2		=			
ANR	827193	Identifier	my_target_type		827185	0					
ANR	827194	CallExpression	my -> GetTargetTypeName ( )		827185	1					
ANR	827195	Callee	my -> GetTargetTypeName		827185	0					
ANR	827196	PtrMemberAccess	my -> GetTargetTypeName		827185	0					
ANR	827197	Identifier	my		827185	0					
ANR	827198	Identifier	GetTargetTypeName		827185	1					
ANR	827199	ArgumentList			827185	1					
ANR	827200	IdentifierDeclStatement	char const * target_type = target -> GetMyTypeName ( ) ;	284:1:7619:7668	827185	1	True				
ANR	827201	IdentifierDecl	* target_type = target -> GetMyTypeName ( )		827185	0					
ANR	827202	IdentifierDeclType	char const *		827185	0					
ANR	827203	Identifier	target_type		827185	1					
ANR	827204	AssignmentExpression	* target_type = target -> GetMyTypeName ( )		827185	2		=			
ANR	827205	Identifier	target_type		827185	0					
ANR	827206	CallExpression	target -> GetMyTypeName ( )		827185	1					
ANR	827207	Callee	target -> GetMyTypeName		827185	0					
ANR	827208	PtrMemberAccess	target -> GetMyTypeName		827185	0					
ANR	827209	Identifier	target		827185	0					
ANR	827210	Identifier	GetMyTypeName		827185	1					
ANR	827211	ArgumentList			827185	1					
ANR	827212	IfStatement	if ( ! my_target_type )		827185	2					
ANR	827213	Condition	! my_target_type	285:5:7675:7689	827185	0	True				
ANR	827214	UnaryOperationExpression	! my_target_type		827185	0					
ANR	827215	UnaryOperator	!		827185	0					
ANR	827216	Identifier	my_target_type		827185	1					
ANR	827217	CompoundStatement		7:23:311:311	827185	1					
ANR	827218	ExpressionStatement	"my_target_type = """""	286:2:7697:7716	827185	0	True				
ANR	827219	AssignmentExpression	"my_target_type = """""		827185	0		=			
ANR	827220	Identifier	my_target_type		827185	0					
ANR	827221	PrimaryExpression	""""""		827185	1					
ANR	827222	IfStatement	if ( ! target_type )		827185	3					
ANR	827223	Condition	! target_type	288:5:7726:7737	827185	0	True				
ANR	827224	UnaryOperationExpression	! target_type		827185	0					
ANR	827225	UnaryOperator	!		827185	0					
ANR	827226	Identifier	target_type		827185	1					
ANR	827227	CompoundStatement		10:20:359:359	827185	1					
ANR	827228	ExpressionStatement	"target_type = """""	289:2:7745:7761	827185	0	True				
ANR	827229	AssignmentExpression	"target_type = """""		827185	0		=			
ANR	827230	Identifier	target_type		827185	0					
ANR	827231	PrimaryExpression	""""""		827185	1					
ANR	827232	IfStatement	"if ( strcasecmp ( target_type , my_target_type ) && strcasecmp ( my_target_type , ANY_ADTYPE ) )"		827185	4					
ANR	827233	Condition	"strcasecmp ( target_type , my_target_type ) && strcasecmp ( my_target_type , ANY_ADTYPE )"	291:5:7771:7851	827185	0	True				
ANR	827234	AndExpression	"strcasecmp ( target_type , my_target_type ) && strcasecmp ( my_target_type , ANY_ADTYPE )"		827185	0		&&			
ANR	827235	CallExpression	"strcasecmp ( target_type , my_target_type )"		827185	0					
ANR	827236	Callee	strcasecmp		827185	0					
ANR	827237	Identifier	strcasecmp		827185	0					
ANR	827238	ArgumentList	target_type		827185	1					
ANR	827239	Argument	target_type		827185	0					
ANR	827240	Identifier	target_type		827185	0					
ANR	827241	Argument	my_target_type		827185	1					
ANR	827242	Identifier	my_target_type		827185	0					
ANR	827243	CallExpression	"strcasecmp ( my_target_type , ANY_ADTYPE )"		827185	1					
ANR	827244	Callee	strcasecmp		827185	0					
ANR	827245	Identifier	strcasecmp		827185	0					
ANR	827246	ArgumentList	my_target_type		827185	1					
ANR	827247	Argument	my_target_type		827185	0					
ANR	827248	Identifier	my_target_type		827185	0					
ANR	827249	Argument	ANY_ADTYPE		827185	1					
ANR	827250	Identifier	ANY_ADTYPE		827185	0					
ANR	827251	CompoundStatement		15:1:474:474	827185	1					
ANR	827252	ReturnStatement	return false ;	294:2:7860:7872	827185	0	True				
ANR	827253	Identifier	false		827185	0					
ANR	827254	IdentifierDeclStatement	"classad :: MatchClassAd * mad = compat_classad :: getTheMatchAd ( my , target ) ;"	297:1:7879:7951	827185	5	True				
ANR	827255	IdentifierDecl	"* mad = compat_classad :: getTheMatchAd ( my , target )"		827185	0					
ANR	827256	IdentifierDeclType	classad :: MatchClassAd *		827185	0					
ANR	827257	Identifier	mad		827185	1					
ANR	827258	AssignmentExpression	"* mad = compat_classad :: getTheMatchAd ( my , target )"		827185	2		=			
ANR	827259	Identifier	mad		827185	0					
ANR	827260	CallExpression	"compat_classad :: getTheMatchAd ( my , target )"		827185	1					
ANR	827261	Callee	compat_classad :: getTheMatchAd		827185	0					
ANR	827262	Identifier	compat_classad :: getTheMatchAd		827185	0					
ANR	827263	ArgumentList	my		827185	1					
ANR	827264	Argument	my		827185	0					
ANR	827265	Identifier	my		827185	0					
ANR	827266	Argument	target		827185	1					
ANR	827267	Identifier	target		827185	0					
ANR	827268	IdentifierDeclStatement	bool result = mad -> rightMatchesLeft ( ) ;	299:1:7955:7992	827185	6	True				
ANR	827269	IdentifierDecl	result = mad -> rightMatchesLeft ( )		827185	0					
ANR	827270	IdentifierDeclType	bool		827185	0					
ANR	827271	Identifier	result		827185	1					
ANR	827272	AssignmentExpression	result = mad -> rightMatchesLeft ( )		827185	2		=			
ANR	827273	Identifier	result		827185	0					
ANR	827274	CallExpression	mad -> rightMatchesLeft ( )		827185	1					
ANR	827275	Callee	mad -> rightMatchesLeft		827185	0					
ANR	827276	PtrMemberAccess	mad -> rightMatchesLeft		827185	0					
ANR	827277	Identifier	mad		827185	0					
ANR	827278	Identifier	rightMatchesLeft		827185	1					
ANR	827279	ArgumentList			827185	1					
ANR	827280	ExpressionStatement	compat_classad :: releaseTheMatchAd ( )	301:1:7996:8031	827185	7	True				
ANR	827281	CallExpression	compat_classad :: releaseTheMatchAd ( )		827185	0					
ANR	827282	Callee	compat_classad :: releaseTheMatchAd		827185	0					
ANR	827283	Identifier	compat_classad :: releaseTheMatchAd		827185	0					
ANR	827284	ArgumentList			827185	1					
ANR	827285	ReturnStatement	return result ;	302:1:8034:8047	827185	8	True				
ANR	827286	Identifier	result		827185	0					
ANR	827287	ReturnType	bool		827185	1					
ANR	827288	Identifier	IsAHalfMatch		827185	2					
ANR	827289	ParameterList	"compat_classad :: ClassAd * my , compat_classad :: ClassAd * target"		827185	3					
ANR	827290	Parameter	compat_classad :: ClassAd * my	278:19:7318:7344	827185	0	True				
ANR	827291	ParameterType	compat_classad :: ClassAd *		827185	0					
ANR	827292	Identifier	my		827185	1					
ANR	827293	Parameter	compat_classad :: ClassAd * target	278:48:7347:7377	827185	1	True				
ANR	827294	ParameterType	compat_classad :: ClassAd *		827185	0					
ANR	827295	Identifier	target		827185	1					
ANR	827296	CFGEntryNode	ENTRY		827185		True				
ANR	827297	CFGExitNode	EXIT		827185		True				
ANR	827298	Symbol	mad -> rightMatchesLeft		827185						
ANR	827299	Symbol	target_type		827185						
ANR	827300	Symbol	false		827185						
ANR	827301	Symbol	my		827185						
ANR	827302	Symbol	target		827185						
ANR	827303	Symbol	* target		827185						
ANR	827304	Symbol	result		827185						
ANR	827305	Symbol	* my		827185						
ANR	827306	Symbol	mad		827185						
ANR	827307	Symbol	target -> GetMyTypeName		827185						
ANR	827308	Symbol	compat_classad :: getTheMatchAd		827185						
ANR	827309	Symbol	ANY_ADTYPE		827185						
ANR	827310	Symbol	my -> GetTargetTypeName		827185						
ANR	827311	Symbol	* mad		827185						
ANR	827312	Symbol	my_target_type		827185						
ANR	827313	Symbol	strcasecmp		827185						
ANR	827314	Function	AttrList_setPublishServerTime	305:0:8052:8155							
ANR	827315	FunctionDef	AttrList_setPublishServerTime (bool publish)		827314	0					
ANR	827316	CompoundStatement		306:0:8103:8155	827314	0					
ANR	827317	ExpressionStatement	AttrList_setPublishServerTimeMangled ( publish )	307:1:8106:8153	827314	0	True				
ANR	827318	CallExpression	AttrList_setPublishServerTimeMangled ( publish )		827314	0					
ANR	827319	Callee	AttrList_setPublishServerTimeMangled		827314	0					
ANR	827320	Identifier	AttrList_setPublishServerTimeMangled		827314	0					
ANR	827321	ArgumentList	publish		827314	1					
ANR	827322	Argument	publish		827314	0					
ANR	827323	Identifier	publish		827314	0					
ANR	827324	ReturnType	void		827314	1					
ANR	827325	Identifier	AttrList_setPublishServerTime		827314	2					
ANR	827326	ParameterList	bool publish		827314	3					
ANR	827327	Parameter	bool publish	305:36:8088:8099	827314	0	True				
ANR	827328	ParameterType	bool		827314	0					
ANR	827329	Identifier	publish		827314	1					
ANR	827330	CFGEntryNode	ENTRY		827314		True				
ANR	827331	CFGExitNode	EXIT		827314		True				
ANR	827332	Symbol	publish		827314						
