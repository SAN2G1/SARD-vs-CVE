command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5426941	File	data/converged/CVE-2011-4930_htcondor/test_stat_wrapper.cpp								
ANR	5426942	ClassDef	StatOp	23:0:864:934							
ANR	5426943	DeclStmt									
ANR	5426944	Decl							const char	const char *	str
ANR	5426945	DeclStmt									
ANR	5426946	Decl							StatWrapper :: StatOpType	StatWrapper :: StatOpType	type
ANR	5426947	DeclStmt									
ANR	5426948	Decl							void	void ( const char * argv0 )	Help
ANR	5426949	DeclStmt									
ANR	5426950	Decl							const StatOp	const StatOp * ( const char * name )	get_op
ANR	5426951	DeclStmt									
ANR	5426952	Decl							const char	const char * ( StatWrapper :: StatOpType which )	get_op_name
ANR	5426953	DeclStmt									
ANR	5426954	Decl							void	"void ( StatWrapper & stat , const char * label )"	dump_status
ANR	5426955	DeclStmt									
ANR	5426956	Decl							const StatOp	const StatOp [ ]	Ops
ANR	5426957	Function	main	44:0:1508:9024							
ANR	5426958	FunctionDef	"main (int argc , const char * argv [ ])"		5426957	0					
ANR	5426959	CompoundStatement		46:0:1549:9024	5426957	0					
ANR	5426960	IdentifierDeclStatement	int fd ;	47:1:1552:1562	5426957	0	True				
ANR	5426961	IdentifierDecl	fd		5426957	0					
ANR	5426962	IdentifierDeclType	int		5426957	0					
ANR	5426963	Identifier	fd		5426957	1					
ANR	5426964	IdentifierDeclStatement	const char * path ;	48:1:1565:1582	5426957	1	True				
ANR	5426965	IdentifierDecl	* path		5426957	0					
ANR	5426966	IdentifierDeclType	const char *		5426957	0					
ANR	5426967	Identifier	path		5426957	1					
ANR	5426968	IdentifierDeclStatement	StatWrapper * wrapper = NULL ;	49:1:1585:1613	5426957	2	True				
ANR	5426969	IdentifierDecl	* wrapper = NULL		5426957	0					
ANR	5426970	IdentifierDeclType	StatWrapper *		5426957	0					
ANR	5426971	Identifier	wrapper		5426957	1					
ANR	5426972	AssignmentExpression	* wrapper = NULL		5426957	2		=			
ANR	5426973	Identifier	NULL		5426957	0					
ANR	5426974	Identifier	NULL		5426957	1					
ANR	5426975	IdentifierDeclStatement	"const char * usage = ""test [-h|--help] <file> [operations]"" ;"	50:1:1616:1676	5426957	3	True				
ANR	5426976	IdentifierDecl	"* usage = ""test [-h|--help] <file> [operations]"""		5426957	0					
ANR	5426977	IdentifierDeclType	const char *		5426957	0					
ANR	5426978	Identifier	usage		5426957	1					
ANR	5426979	AssignmentExpression	"* usage = ""test [-h|--help] <file> [operations]"""		5426957	2		=			
ANR	5426980	Identifier	usage		5426957	0					
ANR	5426981	PrimaryExpression	"""test [-h|--help] <file> [operations]"""		5426957	1					
ANR	5426982	IfStatement	if ( argc < 2 )		5426957	4					
ANR	5426983	Condition	argc < 2	53:6:1685:1692	5426957	0	True				
ANR	5426984	RelationalExpression	argc < 2		5426957	0		<			
ANR	5426985	Identifier	argc		5426957	0					
ANR	5426986	PrimaryExpression	2		5426957	1					
ANR	5426987	CompoundStatement		8:17:146:146	5426957	1					
ANR	5426988	ExpressionStatement	"fprintf ( stderr , ""no file specified\\n"" )"	54:2:1700:1740	5426957	0	True				
ANR	5426989	CallExpression	"fprintf ( stderr , ""no file specified\\n"" )"		5426957	0					
ANR	5426990	Callee	fprintf		5426957	0					
ANR	5426991	Identifier	fprintf		5426957	0					
ANR	5426992	ArgumentList	stderr		5426957	1					
ANR	5426993	Argument	stderr		5426957	0					
ANR	5426994	Identifier	stderr		5426957	0					
ANR	5426995	Argument	"""no file specified\\n"""		5426957	1					
ANR	5426996	PrimaryExpression	"""no file specified\\n"""		5426957	0					
ANR	5426997	ExpressionStatement	"fprintf ( stderr , ""%s\\n"" , usage )"	55:2:1744:1776	5426957	1	True				
ANR	5426998	CallExpression	"fprintf ( stderr , ""%s\\n"" , usage )"		5426957	0					
ANR	5426999	Callee	fprintf		5426957	0					
ANR	5427000	Identifier	fprintf		5426957	0					
ANR	5427001	ArgumentList	stderr		5426957	1					
ANR	5427002	Argument	stderr		5426957	0					
ANR	5427003	Identifier	stderr		5426957	0					
ANR	5427004	Argument	"""%s\\n"""		5426957	1					
ANR	5427005	PrimaryExpression	"""%s\\n"""		5426957	0					
ANR	5427006	Argument	usage		5426957	2					
ANR	5427007	Identifier	usage		5426957	0					
ANR	5427008	ExpressionStatement	exit ( 1 )	56:2:1780:1789	5426957	2	True				
ANR	5427009	CallExpression	exit ( 1 )		5426957	0					
ANR	5427010	Callee	exit		5426957	0					
ANR	5427011	Identifier	exit		5426957	0					
ANR	5427012	ArgumentList	1		5426957	1					
ANR	5427013	Argument	1		5426957	0					
ANR	5427014	PrimaryExpression	1		5426957	0					
ANR	5427015	ExpressionStatement	path = argv [ 1 ]	58:1:1795:1809	5426957	5	True				
ANR	5427016	AssignmentExpression	path = argv [ 1 ]		5426957	0		=			
ANR	5427017	Identifier	path		5426957	0					
ANR	5427018	ArrayIndexing	argv [ 1 ]		5426957	1					
ANR	5427019	Identifier	argv		5426957	0					
ANR	5427020	PrimaryExpression	1		5426957	1					
ANR	5427021	IfStatement	if ( * path == '-' )		5426957	6					
ANR	5427022	Condition	* path == '-'	59:6:1817:1828	5426957	0	True				
ANR	5427023	EqualityExpression	* path == '-'		5426957	0		==			
ANR	5427024	UnaryOperationExpression	* path		5426957	0					
ANR	5427025	UnaryOperator	*		5426957	0					
ANR	5427026	Identifier	path		5426957	1					
ANR	5427027	PrimaryExpression	'-'		5426957	1					
ANR	5427028	CompoundStatement		14:21:282:282	5426957	1					
ANR	5427029	ExpressionStatement	"fprintf ( stderr , ""no file specified\\n"" )"	60:2:1836:1876	5426957	0	True				
ANR	5427030	CallExpression	"fprintf ( stderr , ""no file specified\\n"" )"		5426957	0					
ANR	5427031	Callee	fprintf		5426957	0					
ANR	5427032	Identifier	fprintf		5426957	0					
ANR	5427033	ArgumentList	stderr		5426957	1					
ANR	5427034	Argument	stderr		5426957	0					
ANR	5427035	Identifier	stderr		5426957	0					
ANR	5427036	Argument	"""no file specified\\n"""		5426957	1					
ANR	5427037	PrimaryExpression	"""no file specified\\n"""		5426957	0					
ANR	5427038	ExpressionStatement	"fprintf ( stderr , ""%s\\n"" , usage )"	61:2:1880:1912	5426957	1	True				
ANR	5427039	CallExpression	"fprintf ( stderr , ""%s\\n"" , usage )"		5426957	0					
ANR	5427040	Callee	fprintf		5426957	0					
ANR	5427041	Identifier	fprintf		5426957	0					
ANR	5427042	ArgumentList	stderr		5426957	1					
ANR	5427043	Argument	stderr		5426957	0					
ANR	5427044	Identifier	stderr		5426957	0					
ANR	5427045	Argument	"""%s\\n"""		5426957	1					
ANR	5427046	PrimaryExpression	"""%s\\n"""		5426957	0					
ANR	5427047	Argument	usage		5426957	2					
ANR	5427048	Identifier	usage		5426957	0					
ANR	5427049	ExpressionStatement	Help ( argv [ 0 ] )	62:2:1916:1931	5426957	2	True				
ANR	5427050	CallExpression	Help ( argv [ 0 ] )		5426957	0					
ANR	5427051	Callee	Help		5426957	0					
ANR	5427052	Identifier	Help		5426957	0					
ANR	5427053	ArgumentList	argv [ 0 ]		5426957	1					
ANR	5427054	Argument	argv [ 0 ]		5426957	0					
ANR	5427055	ArrayIndexing	argv [ 0 ]		5426957	0					
ANR	5427056	Identifier	argv		5426957	0					
ANR	5427057	PrimaryExpression	0		5426957	1					
ANR	5427058	ExpressionStatement	exit ( 1 )	63:2:1935:1944	5426957	3	True				
ANR	5427059	CallExpression	exit ( 1 )		5426957	0					
ANR	5427060	Callee	exit		5426957	0					
ANR	5427061	Identifier	exit		5426957	0					
ANR	5427062	ArgumentList	1		5426957	1					
ANR	5427063	Argument	1		5426957	0					
ANR	5427064	PrimaryExpression	1		5426957	0					
ANR	5427065	ExpressionStatement	"fd = safe_open_wrapper_follow ( path , O_RDONLY )"	65:1:1950:1997	5426957	7	True				
ANR	5427066	AssignmentExpression	"fd = safe_open_wrapper_follow ( path , O_RDONLY )"		5426957	0		=			
ANR	5427067	Identifier	fd		5426957	0					
ANR	5427068	CallExpression	"safe_open_wrapper_follow ( path , O_RDONLY )"		5426957	1					
ANR	5427069	Callee	safe_open_wrapper_follow		5426957	0					
ANR	5427070	Identifier	safe_open_wrapper_follow		5426957	0					
ANR	5427071	ArgumentList	path		5426957	1					
ANR	5427072	Argument	path		5426957	0					
ANR	5427073	Identifier	path		5426957	0					
ANR	5427074	Argument	O_RDONLY		5426957	1					
ANR	5427075	Identifier	O_RDONLY		5426957	0					
ANR	5427076	ExpressionStatement	"printf ( ""path set to '%s', fd to %d\\n"" , path , fd )"	66:1:2000:2050	5426957	8	True				
ANR	5427077	CallExpression	"printf ( ""path set to '%s', fd to %d\\n"" , path , fd )"		5426957	0					
ANR	5427078	Callee	printf		5426957	0					
ANR	5427079	Identifier	printf		5426957	0					
ANR	5427080	ArgumentList	"""path set to '%s', fd to %d\\n"""		5426957	1					
ANR	5427081	Argument	"""path set to '%s', fd to %d\\n"""		5426957	0					
ANR	5427082	PrimaryExpression	"""path set to '%s', fd to %d\\n"""		5426957	0					
ANR	5427083	Argument	path		5426957	1					
ANR	5427084	Identifier	path		5426957	0					
ANR	5427085	Argument	fd		5426957	2					
ANR	5427086	Identifier	fd		5426957	0					
ANR	5427087	IdentifierDeclStatement	int argno ;	68:1:2054:2064	5426957	9	True				
ANR	5427088	IdentifierDecl	argno		5426957	0					
ANR	5427089	IdentifierDeclType	int		5426957	0					
ANR	5427090	Identifier	argno		5426957	1					
ANR	5427091	IdentifierDeclStatement	int skip = 0 ;	69:1:2067:2080	5426957	10	True				
ANR	5427092	IdentifierDecl	skip = 0		5426957	0					
ANR	5427093	IdentifierDeclType	int		5426957	0					
ANR	5427094	Identifier	skip		5426957	1					
ANR	5427095	AssignmentExpression	skip = 0		5426957	2		=			
ANR	5427096	Identifier	skip		5426957	0					
ANR	5427097	PrimaryExpression	0		5426957	1					
ANR	5427098	ForStatement	for ( argno = 2 ; argno < argc ; argno ++ )		5426957	11					
ANR	5427099	ForInit	argno = 2 ;	70:6:2088:2097	5426957	0	True				
ANR	5427100	AssignmentExpression	argno = 2		5426957	0		=			
ANR	5427101	Identifier	argno		5426957	0					
ANR	5427102	PrimaryExpression	2		5426957	1					
ANR	5427103	Condition	argno < argc	70:17:2099:2110	5426957	1	True				
ANR	5427104	RelationalExpression	argno < argc		5426957	0		<			
ANR	5427105	Identifier	argno		5426957	0					
ANR	5427106	Identifier	argc		5426957	1					
ANR	5427107	PostIncDecOperationExpression	argno ++	70:32:2114:2120	5426957	2	True				
ANR	5427108	Identifier	argno		5426957	0					
ANR	5427109	IncDec	++		5426957	1					
ANR	5427110	CompoundStatement		33:2:709:732	5426957	3					
ANR	5427111	IfStatement	if ( skip )		5426957	0					
ANR	5427112	Condition	skip	71:7:2133:2136	5426957	0	True				
ANR	5427113	Identifier	skip		5426957	0					
ANR	5427114	CompoundStatement		26:14:590:590	5426957	1					
ANR	5427115	ExpressionStatement	skip --	72:3:2145:2151	5426957	0	True				
ANR	5427116	PostIncDecOperationExpression	skip --		5426957	0					
ANR	5427117	Identifier	skip		5426957	0					
ANR	5427118	IncDec	--		5426957	1					
ANR	5427119	ContinueStatement	continue ;	73:3:2156:2164	5426957	1	True				
ANR	5427120	IdentifierDeclStatement	const char * arg = argv [ argno ] ;	75:2:2172:2201	5426957	1	True				
ANR	5427121	IdentifierDecl	* arg = argv [ argno ]		5426957	0					
ANR	5427122	IdentifierDeclType	const char *		5426957	0					
ANR	5427123	Identifier	arg		5426957	1					
ANR	5427124	AssignmentExpression	* arg = argv [ argno ]		5426957	2		=			
ANR	5427125	Identifier	arg		5426957	0					
ANR	5427126	ArrayIndexing	argv [ argno ]		5426957	1					
ANR	5427127	Identifier	argv		5426957	0					
ANR	5427128	Identifier	argno		5426957	1					
ANR	5427129	IdentifierDeclStatement	const char * arg1 = NULL ;	76:2:2205:2228	5426957	2	True				
ANR	5427130	IdentifierDecl	* arg1 = NULL		5426957	0					
ANR	5427131	IdentifierDeclType	const char *		5426957	0					
ANR	5427132	Identifier	arg1		5426957	1					
ANR	5427133	AssignmentExpression	* arg1 = NULL		5426957	2		=			
ANR	5427134	Identifier	NULL		5426957	0					
ANR	5427135	Identifier	NULL		5426957	1					
ANR	5427136	IdentifierDeclStatement	const char * arg2 = NULL ;	77:2:2232:2255	5426957	3	True				
ANR	5427137	IdentifierDecl	* arg2 = NULL		5426957	0					
ANR	5427138	IdentifierDeclType	const char *		5426957	0					
ANR	5427139	Identifier	arg2		5426957	1					
ANR	5427140	AssignmentExpression	* arg2 = NULL		5426957	2		=			
ANR	5427141	Identifier	NULL		5426957	0					
ANR	5427142	Identifier	NULL		5426957	1					
ANR	5427143	IdentifierDeclStatement	const char * arg3 = NULL ;	78:2:2259:2282	5426957	4	True				
ANR	5427144	IdentifierDecl	* arg3 = NULL		5426957	0					
ANR	5427145	IdentifierDeclType	const char *		5426957	0					
ANR	5427146	Identifier	arg3		5426957	1					
ANR	5427147	AssignmentExpression	* arg3 = NULL		5426957	2		=			
ANR	5427148	Identifier	NULL		5426957	0					
ANR	5427149	Identifier	NULL		5426957	1					
ANR	5427150	IfStatement	if ( arg && ( argc > ( argno + 1 ) ) && ( * argv [ argno + 1 ] != '-' ) )		5426957	5					
ANR	5427151	Condition	arg && ( argc > ( argno + 1 ) ) && ( * argv [ argno + 1 ] != '-' )	79:7:2291:2343	5426957	0	True				
ANR	5427152	AndExpression	arg && ( argc > ( argno + 1 ) ) && ( * argv [ argno + 1 ] != '-' )		5426957	0		&&			
ANR	5427153	Identifier	arg		5426957	0					
ANR	5427154	AndExpression	( argc > ( argno + 1 ) ) && ( * argv [ argno + 1 ] != '-' )		5426957	1		&&			
ANR	5427155	RelationalExpression	argc > ( argno + 1 )		5426957	0		>			
ANR	5427156	Identifier	argc		5426957	0					
ANR	5427157	AdditiveExpression	argno + 1		5426957	1		+			
ANR	5427158	Identifier	argno		5426957	0					
ANR	5427159	PrimaryExpression	1		5426957	1					
ANR	5427160	EqualityExpression	* argv [ argno + 1 ] != '-'		5426957	1		!=			
ANR	5427161	UnaryOperationExpression	* argv [ argno + 1 ]		5426957	0					
ANR	5427162	UnaryOperator	*		5426957	0					
ANR	5427163	ArrayIndexing	argv [ argno + 1 ]		5426957	1					
ANR	5427164	Identifier	argv		5426957	0					
ANR	5427165	AdditiveExpression	argno + 1		5426957	1		+			
ANR	5427166	Identifier	argno		5426957	0					
ANR	5427167	PrimaryExpression	1		5426957	1					
ANR	5427168	PrimaryExpression	'-'		5426957	1					
ANR	5427169	CompoundStatement		34:64:798:798	5426957	1					
ANR	5427170	ExpressionStatement	arg1 = argv [ argno + 1 ]	80:3:2353:2373	5426957	0	True				
ANR	5427171	AssignmentExpression	arg1 = argv [ argno + 1 ]		5426957	0		=			
ANR	5427172	Identifier	arg1		5426957	0					
ANR	5427173	ArrayIndexing	argv [ argno + 1 ]		5426957	1					
ANR	5427174	Identifier	argv		5426957	0					
ANR	5427175	AdditiveExpression	argno + 1		5426957	1		+			
ANR	5427176	Identifier	argno		5426957	0					
ANR	5427177	PrimaryExpression	1		5426957	1					
ANR	5427178	IfStatement	if ( arg1 && ( argc > ( argno + 2 ) ) && ( * argv [ argno + 2 ] != '-' ) )		5426957	6					
ANR	5427179	Condition	arg1 && ( argc > ( argno + 2 ) ) && ( * argv [ argno + 2 ] != '-' )	82:7:2386:2438	5426957	0	True				
ANR	5427180	AndExpression	arg1 && ( argc > ( argno + 2 ) ) && ( * argv [ argno + 2 ] != '-' )		5426957	0		&&			
ANR	5427181	Identifier	arg1		5426957	0					
ANR	5427182	AndExpression	( argc > ( argno + 2 ) ) && ( * argv [ argno + 2 ] != '-' )		5426957	1		&&			
ANR	5427183	RelationalExpression	argc > ( argno + 2 )		5426957	0		>			
ANR	5427184	Identifier	argc		5426957	0					
ANR	5427185	AdditiveExpression	argno + 2		5426957	1		+			
ANR	5427186	Identifier	argno		5426957	0					
ANR	5427187	PrimaryExpression	2		5426957	1					
ANR	5427188	EqualityExpression	* argv [ argno + 2 ] != '-'		5426957	1		!=			
ANR	5427189	UnaryOperationExpression	* argv [ argno + 2 ]		5426957	0					
ANR	5427190	UnaryOperator	*		5426957	0					
ANR	5427191	ArrayIndexing	argv [ argno + 2 ]		5426957	1					
ANR	5427192	Identifier	argv		5426957	0					
ANR	5427193	AdditiveExpression	argno + 2		5426957	1		+			
ANR	5427194	Identifier	argno		5426957	0					
ANR	5427195	PrimaryExpression	2		5426957	1					
ANR	5427196	PrimaryExpression	'-'		5426957	1					
ANR	5427197	CompoundStatement		37:64:893:893	5426957	1					
ANR	5427198	ExpressionStatement	arg2 = argv [ argno + 2 ]	83:3:2448:2468	5426957	0	True				
ANR	5427199	AssignmentExpression	arg2 = argv [ argno + 2 ]		5426957	0		=			
ANR	5427200	Identifier	arg2		5426957	0					
ANR	5427201	ArrayIndexing	argv [ argno + 2 ]		5426957	1					
ANR	5427202	Identifier	argv		5426957	0					
ANR	5427203	AdditiveExpression	argno + 2		5426957	1		+			
ANR	5427204	Identifier	argno		5426957	0					
ANR	5427205	PrimaryExpression	2		5426957	1					
ANR	5427206	IfStatement	if ( arg2 && ( argc > ( argno + 3 ) ) && ( * argv [ argno + 3 ] != '-' ) )		5426957	7					
ANR	5427207	Condition	arg2 && ( argc > ( argno + 3 ) ) && ( * argv [ argno + 3 ] != '-' )	85:7:2481:2533	5426957	0	True				
ANR	5427208	AndExpression	arg2 && ( argc > ( argno + 3 ) ) && ( * argv [ argno + 3 ] != '-' )		5426957	0		&&			
ANR	5427209	Identifier	arg2		5426957	0					
ANR	5427210	AndExpression	( argc > ( argno + 3 ) ) && ( * argv [ argno + 3 ] != '-' )		5426957	1		&&			
ANR	5427211	RelationalExpression	argc > ( argno + 3 )		5426957	0		>			
ANR	5427212	Identifier	argc		5426957	0					
ANR	5427213	AdditiveExpression	argno + 3		5426957	1		+			
ANR	5427214	Identifier	argno		5426957	0					
ANR	5427215	PrimaryExpression	3		5426957	1					
ANR	5427216	EqualityExpression	* argv [ argno + 3 ] != '-'		5426957	1		!=			
ANR	5427217	UnaryOperationExpression	* argv [ argno + 3 ]		5426957	0					
ANR	5427218	UnaryOperator	*		5426957	0					
ANR	5427219	ArrayIndexing	argv [ argno + 3 ]		5426957	1					
ANR	5427220	Identifier	argv		5426957	0					
ANR	5427221	AdditiveExpression	argno + 3		5426957	1		+			
ANR	5427222	Identifier	argno		5426957	0					
ANR	5427223	PrimaryExpression	3		5426957	1					
ANR	5427224	PrimaryExpression	'-'		5426957	1					
ANR	5427225	CompoundStatement		40:64:988:988	5426957	1					
ANR	5427226	ExpressionStatement	arg3 = argv [ argno + 3 ]	86:3:2543:2563	5426957	0	True				
ANR	5427227	AssignmentExpression	arg3 = argv [ argno + 3 ]		5426957	0		=			
ANR	5427228	Identifier	arg3		5426957	0					
ANR	5427229	ArrayIndexing	argv [ argno + 3 ]		5426957	1					
ANR	5427230	Identifier	argv		5426957	0					
ANR	5427231	AdditiveExpression	argno + 3		5426957	1		+			
ANR	5427232	Identifier	argno		5426957	0					
ANR	5427233	PrimaryExpression	3		5426957	1					
ANR	5427234	IfStatement	"if ( ( ! strcmp ( arg , ""--help"" ) ) || ( ! strcmp ( arg , ""-h"" ) ) )"		5426957	8					
ANR	5427235	Condition	"( ! strcmp ( arg , ""--help"" ) ) || ( ! strcmp ( arg , ""-h"" ) )"	89:7:2577:2627	5426957	0	True				
ANR	5427236	OrExpression	"( ! strcmp ( arg , ""--help"" ) ) || ( ! strcmp ( arg , ""-h"" ) )"		5426957	0		||			
ANR	5427237	UnaryOperationExpression	"! strcmp ( arg , ""--help"" )"		5426957	0					
ANR	5427238	UnaryOperator	!		5426957	0					
ANR	5427239	CallExpression	"strcmp ( arg , ""--help"" )"		5426957	1					
ANR	5427240	Callee	strcmp		5426957	0					
ANR	5427241	Identifier	strcmp		5426957	0					
ANR	5427242	ArgumentList	arg		5426957	1					
ANR	5427243	Argument	arg		5426957	0					
ANR	5427244	Identifier	arg		5426957	0					
ANR	5427245	Argument	"""--help"""		5426957	1					
ANR	5427246	PrimaryExpression	"""--help"""		5426957	0					
ANR	5427247	UnaryOperationExpression	"! strcmp ( arg , ""-h"" )"		5426957	1					
ANR	5427248	UnaryOperator	!		5426957	0					
ANR	5427249	CallExpression	"strcmp ( arg , ""-h"" )"		5426957	1					
ANR	5427250	Callee	strcmp		5426957	0					
ANR	5427251	Identifier	strcmp		5426957	0					
ANR	5427252	ArgumentList	arg		5426957	1					
ANR	5427253	Argument	arg		5426957	0					
ANR	5427254	Identifier	arg		5426957	0					
ANR	5427255	Argument	"""-h"""		5426957	1					
ANR	5427256	PrimaryExpression	"""-h"""		5426957	0					
ANR	5427257	CompoundStatement		44:61:1081:1081	5426957	1					
ANR	5427258	ExpressionStatement	Help ( argv [ 0 ] )	90:3:2636:2651	5426957	0	True				
ANR	5427259	CallExpression	Help ( argv [ 0 ] )		5426957	0					
ANR	5427260	Callee	Help		5426957	0					
ANR	5427261	Identifier	Help		5426957	0					
ANR	5427262	ArgumentList	argv [ 0 ]		5426957	1					
ANR	5427263	Argument	argv [ 0 ]		5426957	0					
ANR	5427264	ArrayIndexing	argv [ 0 ]		5426957	0					
ANR	5427265	Identifier	argv		5426957	0					
ANR	5427266	PrimaryExpression	0		5426957	1					
ANR	5427267	ExpressionStatement	exit ( 0 )	91:3:2656:2665	5426957	1	True				
ANR	5427268	CallExpression	exit ( 0 )		5426957	0					
ANR	5427269	Callee	exit		5426957	0					
ANR	5427270	Identifier	exit		5426957	0					
ANR	5427271	ArgumentList	0		5426957	1					
ANR	5427272	Argument	0		5426957	0					
ANR	5427273	PrimaryExpression	0		5426957	0					
ANR	5427274	ElseStatement	else		5426957	0					
ANR	5427275	IfStatement	"if ( ( ! strcmp ( arg , ""--path"" ) ) || ( ! strcmp ( arg , ""-p"" ) ) )"		5426957	0					
ANR	5427276	Condition	"( ! strcmp ( arg , ""--path"" ) ) || ( ! strcmp ( arg , ""-p"" ) )"	94:12:2684:2734	5426957	0	True				
ANR	5427277	OrExpression	"( ! strcmp ( arg , ""--path"" ) ) || ( ! strcmp ( arg , ""-p"" ) )"		5426957	0		||			
ANR	5427278	UnaryOperationExpression	"! strcmp ( arg , ""--path"" )"		5426957	0					
ANR	5427279	UnaryOperator	!		5426957	0					
ANR	5427280	CallExpression	"strcmp ( arg , ""--path"" )"		5426957	1					
ANR	5427281	Callee	strcmp		5426957	0					
ANR	5427282	Identifier	strcmp		5426957	0					
ANR	5427283	ArgumentList	arg		5426957	1					
ANR	5427284	Argument	arg		5426957	0					
ANR	5427285	Identifier	arg		5426957	0					
ANR	5427286	Argument	"""--path"""		5426957	1					
ANR	5427287	PrimaryExpression	"""--path"""		5426957	0					
ANR	5427288	UnaryOperationExpression	"! strcmp ( arg , ""-p"" )"		5426957	1					
ANR	5427289	UnaryOperator	!		5426957	0					
ANR	5427290	CallExpression	"strcmp ( arg , ""-p"" )"		5426957	1					
ANR	5427291	Callee	strcmp		5426957	0					
ANR	5427292	Identifier	strcmp		5426957	0					
ANR	5427293	ArgumentList	arg		5426957	1					
ANR	5427294	Argument	arg		5426957	0					
ANR	5427295	Identifier	arg		5426957	0					
ANR	5427296	Argument	"""-p"""		5426957	1					
ANR	5427297	PrimaryExpression	"""-p"""		5426957	0					
ANR	5427298	CompoundStatement		49:66:1188:1188	5426957	1					
ANR	5427299	IfStatement	if ( ! arg1 )		5426957	0					
ANR	5427300	Condition	! arg1	95:8:2748:2752	5426957	0	True				
ANR	5427301	UnaryOperationExpression	! arg1		5426957	0					
ANR	5427302	UnaryOperator	!		5426957	0					
ANR	5427303	Identifier	arg1		5426957	1					
ANR	5427304	CompoundStatement		50:16:1206:1206	5426957	1					
ANR	5427305	ExpressionStatement	"fprintf ( stderr , ""--path usage: --path <path>\\n"" )"	96:4:2762:2812	5426957	0	True				
ANR	5427306	CallExpression	"fprintf ( stderr , ""--path usage: --path <path>\\n"" )"		5426957	0					
ANR	5427307	Callee	fprintf		5426957	0					
ANR	5427308	Identifier	fprintf		5426957	0					
ANR	5427309	ArgumentList	stderr		5426957	1					
ANR	5427310	Argument	stderr		5426957	0					
ANR	5427311	Identifier	stderr		5426957	0					
ANR	5427312	Argument	"""--path usage: --path <path>\\n"""		5426957	1					
ANR	5427313	PrimaryExpression	"""--path usage: --path <path>\\n"""		5426957	0					
ANR	5427314	ExpressionStatement	exit ( 1 )	97:4:2818:2827	5426957	1	True				
ANR	5427315	CallExpression	exit ( 1 )		5426957	0					
ANR	5427316	Callee	exit		5426957	0					
ANR	5427317	Identifier	exit		5426957	0					
ANR	5427318	ArgumentList	1		5426957	1					
ANR	5427319	Argument	1		5426957	0					
ANR	5427320	PrimaryExpression	1		5426957	0					
ANR	5427321	ExpressionStatement	path = arg1	99:3:2837:2848	5426957	1	True				
ANR	5427322	AssignmentExpression	path = arg1		5426957	0		=			
ANR	5427323	Identifier	path		5426957	0					
ANR	5427324	Identifier	arg1		5426957	1					
ANR	5427325	ExpressionStatement	"fd = safe_open_wrapper_follow ( path , O_RDONLY )"	100:3:2853:2900	5426957	2	True				
ANR	5427326	AssignmentExpression	"fd = safe_open_wrapper_follow ( path , O_RDONLY )"		5426957	0		=			
ANR	5427327	Identifier	fd		5426957	0					
ANR	5427328	CallExpression	"safe_open_wrapper_follow ( path , O_RDONLY )"		5426957	1					
ANR	5427329	Callee	safe_open_wrapper_follow		5426957	0					
ANR	5427330	Identifier	safe_open_wrapper_follow		5426957	0					
ANR	5427331	ArgumentList	path		5426957	1					
ANR	5427332	Argument	path		5426957	0					
ANR	5427333	Identifier	path		5426957	0					
ANR	5427334	Argument	O_RDONLY		5426957	1					
ANR	5427335	Identifier	O_RDONLY		5426957	0					
ANR	5427336	ExpressionStatement	skip = 1	101:3:2905:2913	5426957	3	True				
ANR	5427337	AssignmentExpression	skip = 1		5426957	0		=			
ANR	5427338	Identifier	skip		5426957	0					
ANR	5427339	PrimaryExpression	1		5426957	1					
ANR	5427340	ExpressionStatement	"printf ( ""path set to '%s', fd to %d\\n"" , path , fd )"	102:3:2918:2968	5426957	4	True				
ANR	5427341	CallExpression	"printf ( ""path set to '%s', fd to %d\\n"" , path , fd )"		5426957	0					
ANR	5427342	Callee	printf		5426957	0					
ANR	5427343	Identifier	printf		5426957	0					
ANR	5427344	ArgumentList	"""path set to '%s', fd to %d\\n"""		5426957	1					
ANR	5427345	Argument	"""path set to '%s', fd to %d\\n"""		5426957	0					
ANR	5427346	PrimaryExpression	"""path set to '%s', fd to %d\\n"""		5426957	0					
ANR	5427347	Argument	path		5426957	1					
ANR	5427348	Identifier	path		5426957	0					
ANR	5427349	Argument	fd		5426957	2					
ANR	5427350	Identifier	fd		5426957	0					
ANR	5427351	ElseStatement	else		5426957	0					
ANR	5427352	IfStatement	"if ( ( ! strcmp ( arg , ""--create"" ) ) || ( ! strcmp ( arg , ""-c"" ) ) )"		5426957	0					
ANR	5427353	Condition	"( ! strcmp ( arg , ""--create"" ) ) || ( ! strcmp ( arg , ""-c"" ) )"	105:12:2987:3039	5426957	0	True				
ANR	5427354	OrExpression	"( ! strcmp ( arg , ""--create"" ) ) || ( ! strcmp ( arg , ""-c"" ) )"		5426957	0		||			
ANR	5427355	UnaryOperationExpression	"! strcmp ( arg , ""--create"" )"		5426957	0					
ANR	5427356	UnaryOperator	!		5426957	0					
ANR	5427357	CallExpression	"strcmp ( arg , ""--create"" )"		5426957	1					
ANR	5427358	Callee	strcmp		5426957	0					
ANR	5427359	Identifier	strcmp		5426957	0					
ANR	5427360	ArgumentList	arg		5426957	1					
ANR	5427361	Argument	arg		5426957	0					
ANR	5427362	Identifier	arg		5426957	0					
ANR	5427363	Argument	"""--create"""		5426957	1					
ANR	5427364	PrimaryExpression	"""--create"""		5426957	0					
ANR	5427365	UnaryOperationExpression	"! strcmp ( arg , ""-c"" )"		5426957	1					
ANR	5427366	UnaryOperator	!		5426957	0					
ANR	5427367	CallExpression	"strcmp ( arg , ""-c"" )"		5426957	1					
ANR	5427368	Callee	strcmp		5426957	0					
ANR	5427369	Identifier	strcmp		5426957	0					
ANR	5427370	ArgumentList	arg		5426957	1					
ANR	5427371	Argument	arg		5426957	0					
ANR	5427372	Identifier	arg		5426957	0					
ANR	5427373	Argument	"""-c"""		5426957	1					
ANR	5427374	PrimaryExpression	"""-c"""		5426957	0					
ANR	5427375	CompoundStatement		111:3:2992:3002	5426957	1					
ANR	5427376	IfStatement	if ( ! arg1 || ! arg2 )		5426957	0					
ANR	5427377	Condition	! arg1 || ! arg2	107:8:3054:3067	5426957	0	True				
ANR	5427378	OrExpression	! arg1 || ! arg2		5426957	0		||			
ANR	5427379	UnaryOperationExpression	! arg1		5426957	0					
ANR	5427380	UnaryOperator	!		5426957	0					
ANR	5427381	Identifier	arg1		5426957	1					
ANR	5427382	UnaryOperationExpression	! arg2		5426957	1					
ANR	5427383	UnaryOperator	!		5426957	0					
ANR	5427384	Identifier	arg2		5426957	1					
ANR	5427385	CompoundStatement		62:25:1521:1521	5426957	1					
ANR	5427386	ExpressionStatement	"fprintf ( stderr , ""--create usage: --create <op> <which>\\n"" )"	108:4:3077:3137	5426957	0	True				
ANR	5427387	CallExpression	"fprintf ( stderr , ""--create usage: --create <op> <which>\\n"" )"		5426957	0					
ANR	5427388	Callee	fprintf		5426957	0					
ANR	5427389	Identifier	fprintf		5426957	0					
ANR	5427390	ArgumentList	stderr		5426957	1					
ANR	5427391	Argument	stderr		5426957	0					
ANR	5427392	Identifier	stderr		5426957	0					
ANR	5427393	Argument	"""--create usage: --create <op> <which>\\n"""		5426957	1					
ANR	5427394	PrimaryExpression	"""--create usage: --create <op> <which>\\n"""		5426957	0					
ANR	5427395	ExpressionStatement	exit ( 1 )	109:4:3143:3152	5426957	1	True				
ANR	5427396	CallExpression	exit ( 1 )		5426957	0					
ANR	5427397	Callee	exit		5426957	0					
ANR	5427398	Identifier	exit		5426957	0					
ANR	5427399	ArgumentList	1		5426957	1					
ANR	5427400	Argument	1		5426957	0					
ANR	5427401	PrimaryExpression	1		5426957	0					
ANR	5427402	ExpressionStatement	skip = 2	112:3:3163:3171	5426957	1	True				
ANR	5427403	AssignmentExpression	skip = 2		5426957	0		=			
ANR	5427404	Identifier	skip		5426957	0					
ANR	5427405	PrimaryExpression	2		5426957	1					
ANR	5427406	IdentifierDeclStatement	const StatOp * op = get_op ( arg1 ) ;	113:3:3176:3212	5426957	2	True				
ANR	5427407	IdentifierDecl	* op = get_op ( arg1 )		5426957	0					
ANR	5427408	IdentifierDeclType	const StatOp *		5426957	0					
ANR	5427409	Identifier	op		5426957	1					
ANR	5427410	AssignmentExpression	* op = get_op ( arg1 )		5426957	2		=			
ANR	5427411	Identifier	op		5426957	0					
ANR	5427412	CallExpression	get_op ( arg1 )		5426957	1					
ANR	5427413	Callee	get_op		5426957	0					
ANR	5427414	Identifier	get_op		5426957	0					
ANR	5427415	ArgumentList	arg1		5426957	1					
ANR	5427416	Argument	arg1		5426957	0					
ANR	5427417	Identifier	arg1		5426957	0					
ANR	5427418	IdentifierDeclStatement	const StatOp * which = get_op ( arg1 ) ;	114:3:3217:3253	5426957	3	True				
ANR	5427419	IdentifierDecl	* which = get_op ( arg1 )		5426957	0					
ANR	5427420	IdentifierDeclType	const StatOp *		5426957	0					
ANR	5427421	Identifier	which		5426957	1					
ANR	5427422	AssignmentExpression	* which = get_op ( arg1 )		5426957	2		=			
ANR	5427423	Identifier	which		5426957	0					
ANR	5427424	CallExpression	get_op ( arg1 )		5426957	1					
ANR	5427425	Callee	get_op		5426957	0					
ANR	5427426	Identifier	get_op		5426957	0					
ANR	5427427	ArgumentList	arg1		5426957	1					
ANR	5427428	Argument	arg1		5426957	0					
ANR	5427429	Identifier	arg1		5426957	0					
ANR	5427430	IdentifierDeclStatement	"const char * n = """" ;"	115:3:3258:3276	5426957	4	True				
ANR	5427431	IdentifierDecl	"* n = """""		5426957	0					
ANR	5427432	IdentifierDeclType	const char *		5426957	0					
ANR	5427433	Identifier	n		5426957	1					
ANR	5427434	AssignmentExpression	"* n = """""		5426957	2		=			
ANR	5427435	Identifier	n		5426957	0					
ANR	5427436	PrimaryExpression	""""""		5426957	1					
ANR	5427437	IdentifierDeclStatement	bool auto_stat = false ;	116:3:3281:3303	5426957	5	True				
ANR	5427438	IdentifierDecl	auto_stat = false		5426957	0					
ANR	5427439	IdentifierDeclType	bool		5426957	0					
ANR	5427440	Identifier	auto_stat		5426957	1					
ANR	5427441	AssignmentExpression	auto_stat = false		5426957	2		=			
ANR	5427442	Identifier	false		5426957	0					
ANR	5427443	Identifier	false		5426957	1					
ANR	5427444	SwitchStatement	switch ( op -> type )		5426957	6					
ANR	5427445	Condition	op -> type	119:12:3342:3349	5426957	0	True				
ANR	5427446	PtrMemberAccess	op -> type		5426957	0					
ANR	5427447	Identifier	op		5426957	0					
ANR	5427448	Identifier	type		5426957	1					
ANR	5427449	CompoundStatement		74:23:1803:1803	5426957	1					
ANR	5427450	Label	case StatWrapper :: STATOP_STAT :	120:3:3358:3387	5426957	0	True				
ANR	5427451	Identifier	StatWrapper :: STATOP_STAT		5426957	0					
ANR	5427452	Label	case StatWrapper :: STATOP_LSTAT :	121:3:3392:3422	5426957	1	True				
ANR	5427453	Identifier	StatWrapper :: STATOP_LSTAT		5426957	0					
ANR	5427454	Label	case StatWrapper :: STATOP_BOTH :	122:3:3427:3456	5426957	2	True				
ANR	5427455	Identifier	StatWrapper :: STATOP_BOTH		5426957	0					
ANR	5427456	ExpressionStatement	"n = ""StatWrapper(path,which)"""	123:4:3462:3491	5426957	3	True				
ANR	5427457	AssignmentExpression	"n = ""StatWrapper(path,which)"""		5426957	0		=			
ANR	5427458	Identifier	n		5426957	0					
ANR	5427459	PrimaryExpression	"""StatWrapper(path,which)"""		5426957	1					
ANR	5427460	ExpressionStatement	auto_stat = ( ( which -> type == StatWrapper :: STATOP_STAT ) || ( which -> type == StatWrapper :: STATOP_LSTAT ) || ( which -> type == StatWrapper :: STATOP_BOTH ) || ( which -> type == StatWrapper :: STATOP_ALL ) )	124:4:3497:3712	5426957	4	True				
ANR	5427461	AssignmentExpression	auto_stat = ( ( which -> type == StatWrapper :: STATOP_STAT ) || ( which -> type == StatWrapper :: STATOP_LSTAT ) || ( which -> type == StatWrapper :: STATOP_BOTH ) || ( which -> type == StatWrapper :: STATOP_ALL ) )		5426957	0		=			
ANR	5427462	Identifier	auto_stat		5426957	0					
ANR	5427463	OrExpression	( which -> type == StatWrapper :: STATOP_STAT ) || ( which -> type == StatWrapper :: STATOP_LSTAT ) || ( which -> type == StatWrapper :: STATOP_BOTH ) || ( which -> type == StatWrapper :: STATOP_ALL )		5426957	1		||			
ANR	5427464	EqualityExpression	which -> type == StatWrapper :: STATOP_STAT		5426957	0		==			
ANR	5427465	PtrMemberAccess	which -> type		5426957	0					
ANR	5427466	Identifier	which		5426957	0					
ANR	5427467	Identifier	type		5426957	1					
ANR	5427468	Identifier	StatWrapper :: STATOP_STAT		5426957	1					
ANR	5427469	OrExpression	( which -> type == StatWrapper :: STATOP_LSTAT ) || ( which -> type == StatWrapper :: STATOP_BOTH ) || ( which -> type == StatWrapper :: STATOP_ALL )		5426957	1		||			
ANR	5427470	EqualityExpression	which -> type == StatWrapper :: STATOP_LSTAT		5426957	0		==			
ANR	5427471	PtrMemberAccess	which -> type		5426957	0					
ANR	5427472	Identifier	which		5426957	0					
ANR	5427473	Identifier	type		5426957	1					
ANR	5427474	Identifier	StatWrapper :: STATOP_LSTAT		5426957	1					
ANR	5427475	OrExpression	( which -> type == StatWrapper :: STATOP_BOTH ) || ( which -> type == StatWrapper :: STATOP_ALL )		5426957	1		||			
ANR	5427476	EqualityExpression	which -> type == StatWrapper :: STATOP_BOTH		5426957	0		==			
ANR	5427477	PtrMemberAccess	which -> type		5426957	0					
ANR	5427478	Identifier	which		5426957	0					
ANR	5427479	Identifier	type		5426957	1					
ANR	5427480	Identifier	StatWrapper :: STATOP_BOTH		5426957	1					
ANR	5427481	EqualityExpression	which -> type == StatWrapper :: STATOP_ALL		5426957	1		==			
ANR	5427482	PtrMemberAccess	which -> type		5426957	0					
ANR	5427483	Identifier	which		5426957	0					
ANR	5427484	Identifier	type		5426957	1					
ANR	5427485	Identifier	StatWrapper :: STATOP_ALL		5426957	1					
ANR	5427486	ExpressionStatement	"wrapper = new StatWrapper ( path , which -> type )"	128:4:3718:3764	5426957	5	True				
ANR	5427487	AssignmentExpression	"wrapper = new StatWrapper ( path , which -> type )"		5426957	0		=			
ANR	5427488	Identifier	wrapper		5426957	0					
ANR	5427489	Expression	"path , which -> type"		5426957	1					
ANR	5427490	Identifier	path		5426957	0					
ANR	5427491	PtrMemberAccess	which -> type		5426957	1					
ANR	5427492	Identifier	which		5426957	0					
ANR	5427493	Identifier	type		5426957	1					
ANR	5427494	BreakStatement	break ;	129:4:3770:3775	5426957	6	True				
ANR	5427495	Label	case StatWrapper :: STATOP_FSTAT :	130:3:3780:3810	5426957	7	True				
ANR	5427496	Identifier	StatWrapper :: STATOP_FSTAT		5426957	0					
ANR	5427497	ExpressionStatement	"n = ""StatWrapper(fd,which)"""	131:4:3816:3843	5426957	8	True				
ANR	5427498	AssignmentExpression	"n = ""StatWrapper(fd,which)"""		5426957	0		=			
ANR	5427499	Identifier	n		5426957	0					
ANR	5427500	PrimaryExpression	"""StatWrapper(fd,which)"""		5426957	1					
ANR	5427501	ExpressionStatement	"wrapper = new StatWrapper ( fd , which -> type )"	132:4:3849:3893	5426957	9	True				
ANR	5427502	AssignmentExpression	"wrapper = new StatWrapper ( fd , which -> type )"		5426957	0		=			
ANR	5427503	Identifier	wrapper		5426957	0					
ANR	5427504	Expression	"fd , which -> type"		5426957	1					
ANR	5427505	Identifier	fd		5426957	0					
ANR	5427506	PtrMemberAccess	which -> type		5426957	1					
ANR	5427507	Identifier	which		5426957	0					
ANR	5427508	Identifier	type		5426957	1					
ANR	5427509	ExpressionStatement	auto_stat = ( ( which -> type == StatWrapper :: STATOP_FSTAT ) || ( which -> type == StatWrapper :: STATOP_ALL ) )	133:4:3899:4008	5426957	10	True				
ANR	5427510	AssignmentExpression	auto_stat = ( ( which -> type == StatWrapper :: STATOP_FSTAT ) || ( which -> type == StatWrapper :: STATOP_ALL ) )		5426957	0		=			
ANR	5427511	Identifier	auto_stat		5426957	0					
ANR	5427512	OrExpression	( which -> type == StatWrapper :: STATOP_FSTAT ) || ( which -> type == StatWrapper :: STATOP_ALL )		5426957	1		||			
ANR	5427513	EqualityExpression	which -> type == StatWrapper :: STATOP_FSTAT		5426957	0		==			
ANR	5427514	PtrMemberAccess	which -> type		5426957	0					
ANR	5427515	Identifier	which		5426957	0					
ANR	5427516	Identifier	type		5426957	1					
ANR	5427517	Identifier	StatWrapper :: STATOP_FSTAT		5426957	1					
ANR	5427518	EqualityExpression	which -> type == StatWrapper :: STATOP_ALL		5426957	1		==			
ANR	5427519	PtrMemberAccess	which -> type		5426957	0					
ANR	5427520	Identifier	which		5426957	0					
ANR	5427521	Identifier	type		5426957	1					
ANR	5427522	Identifier	StatWrapper :: STATOP_ALL		5426957	1					
ANR	5427523	BreakStatement	break ;	135:4:4014:4019	5426957	11	True				
ANR	5427524	Label	case StatWrapper :: STATOP_NONE :	136:3:4024:4053	5426957	12	True				
ANR	5427525	Identifier	StatWrapper :: STATOP_NONE		5426957	0					
ANR	5427526	ExpressionStatement	"n = ""StatWrapper(void)"""	137:4:4059:4082	5426957	13	True				
ANR	5427527	AssignmentExpression	"n = ""StatWrapper(void)"""		5426957	0		=			
ANR	5427528	Identifier	n		5426957	0					
ANR	5427529	PrimaryExpression	"""StatWrapper(void)"""		5426957	1					
ANR	5427530	Statement	wrapper	138:4:4088:4094	5426957	14	True				
ANR	5427531	Statement	=	138:12:4096:4096	5426957	15	True				
ANR	5427532	Statement	new	138:14:4098:4100	5426957	16	True				
ANR	5427533	ExpressionStatement	StatWrapper	138:18:4102:4113	5426957	17	True				
ANR	5427534	Identifier	StatWrapper		5426957	0					
ANR	5427535	BreakStatement	break ;	139:4:4119:4124	5426957	18	True				
ANR	5427536	Label	case StatWrapper :: STATOP_ALL :	140:3:4129:4157	5426957	19	True				
ANR	5427537	Identifier	StatWrapper :: STATOP_ALL		5426957	0					
ANR	5427538	Label	case StatWrapper :: STATOP_LAST :	141:3:4162:4191	5426957	20	True				
ANR	5427539	Identifier	StatWrapper :: STATOP_LAST		5426957	0					
ANR	5427540	Label	default :	142:3:4196:4203	5426957	21	True				
ANR	5427541	Identifier	default		5426957	0					
ANR	5427542	ExpressionStatement	"fprintf ( stderr , ""%s (%d) doesn't make sense for create\\n"" , op -> str , op -> type )"	143:4:4209:4295	5426957	22	True				
ANR	5427543	CallExpression	"fprintf ( stderr , ""%s (%d) doesn't make sense for create\\n"" , op -> str , op -> type )"		5426957	0					
ANR	5427544	Callee	fprintf		5426957	0					
ANR	5427545	Identifier	fprintf		5426957	0					
ANR	5427546	ArgumentList	stderr		5426957	1					
ANR	5427547	Argument	stderr		5426957	0					
ANR	5427548	Identifier	stderr		5426957	0					
ANR	5427549	Argument	"""%s (%d) doesn't make sense for create\\n"""		5426957	1					
ANR	5427550	PrimaryExpression	"""%s (%d) doesn't make sense for create\\n"""		5426957	0					
ANR	5427551	Argument	op -> str		5426957	2					
ANR	5427552	PtrMemberAccess	op -> str		5426957	0					
ANR	5427553	Identifier	op		5426957	0					
ANR	5427554	Identifier	str		5426957	1					
ANR	5427555	Argument	op -> type		5426957	3					
ANR	5427556	PtrMemberAccess	op -> type		5426957	0					
ANR	5427557	Identifier	op		5426957	0					
ANR	5427558	Identifier	type		5426957	1					
ANR	5427559	ExpressionStatement	exit ( 1 )	145:4:4301:4310	5426957	23	True				
ANR	5427560	CallExpression	exit ( 1 )		5426957	0					
ANR	5427561	Callee	exit		5426957	0					
ANR	5427562	Identifier	exit		5426957	0					
ANR	5427563	ArgumentList	1		5426957	1					
ANR	5427564	Argument	1		5426957	0					
ANR	5427565	PrimaryExpression	1		5426957	0					
ANR	5427566	BreakStatement	break ;	146:4:4316:4321	5426957	24	True				
ANR	5427567	IfStatement	if ( ! wrapper )		5426957	7					
ANR	5427568	Condition	! wrapper	148:8:4336:4343	5426957	0	True				
ANR	5427569	UnaryOperationExpression	! wrapper		5426957	0					
ANR	5427570	UnaryOperator	!		5426957	0					
ANR	5427571	Identifier	wrapper		5426957	1					
ANR	5427572	CompoundStatement		103:19:2797:2797	5426957	1					
ANR	5427573	ExpressionStatement	"fprintf ( stderr , ""Failed to create StatWrapper (%s) object!\\n"" , n )"	149:4:4353:4427	5426957	0	True				
ANR	5427574	CallExpression	"fprintf ( stderr , ""Failed to create StatWrapper (%s) object!\\n"" , n )"		5426957	0					
ANR	5427575	Callee	fprintf		5426957	0					
ANR	5427576	Identifier	fprintf		5426957	0					
ANR	5427577	ArgumentList	stderr		5426957	1					
ANR	5427578	Argument	stderr		5426957	0					
ANR	5427579	Identifier	stderr		5426957	0					
ANR	5427580	Argument	"""Failed to create StatWrapper (%s) object!\\n"""		5426957	1					
ANR	5427581	PrimaryExpression	"""Failed to create StatWrapper (%s) object!\\n"""		5426957	0					
ANR	5427582	Argument	n		5426957	2					
ANR	5427583	Identifier	n		5426957	0					
ANR	5427584	ExpressionStatement	exit ( 1 )	151:4:4433:4442	5426957	1	True				
ANR	5427585	CallExpression	exit ( 1 )		5426957	0					
ANR	5427586	Callee	exit		5426957	0					
ANR	5427587	Identifier	exit		5426957	0					
ANR	5427588	ArgumentList	1		5426957	1					
ANR	5427589	Argument	1		5426957	0					
ANR	5427590	PrimaryExpression	1		5426957	0					
ANR	5427591	ExpressionStatement	"printf ( ""Created StatWrapper object via %s\\n"" , n )"	153:3:4452:4502	5426957	8	True				
ANR	5427592	CallExpression	"printf ( ""Created StatWrapper object via %s\\n"" , n )"		5426957	0					
ANR	5427593	Callee	printf		5426957	0					
ANR	5427594	Identifier	printf		5426957	0					
ANR	5427595	ArgumentList	"""Created StatWrapper object via %s\\n"""		5426957	1					
ANR	5427596	Argument	"""Created StatWrapper object via %s\\n"""		5426957	0					
ANR	5427597	PrimaryExpression	"""Created StatWrapper object via %s\\n"""		5426957	0					
ANR	5427598	Argument	n		5426957	1					
ANR	5427599	Identifier	n		5426957	0					
ANR	5427600	ExpressionStatement	"printf ( ""Stat Functions:\\n"" )"	155:3:4508:4537	5426957	9	True				
ANR	5427601	CallExpression	"printf ( ""Stat Functions:\\n"" )"		5426957	0					
ANR	5427602	Callee	printf		5426957	0					
ANR	5427603	Identifier	printf		5426957	0					
ANR	5427604	ArgumentList	"""Stat Functions:\\n"""		5426957	1					
ANR	5427605	Argument	"""Stat Functions:\\n"""		5426957	0					
ANR	5427606	PrimaryExpression	"""Stat Functions:\\n"""		5426957	0					
ANR	5427607	IdentifierDeclStatement	int opint ;	156:3:4542:4552	5426957	10	True				
ANR	5427608	IdentifierDecl	opint		5426957	0					
ANR	5427609	IdentifierDeclType	int		5426957	0					
ANR	5427610	Identifier	opint		5426957	1					
ANR	5427611	ForStatement	for ( opint = ( int ) StatWrapper :: STATOP_MIN ; opint <= ( int ) StatWrapper :: STATOP_MAX ; opint ++ )		5426957	11					
ANR	5427612	ForInit	opint = ( int ) StatWrapper :: STATOP_MIN ;	157:8:4562:4598	5426957	0	True				
ANR	5427613	AssignmentExpression	opint = ( int ) StatWrapper :: STATOP_MIN		5426957	0		=			
ANR	5427614	Identifier	opint		5426957	0					
ANR	5427615	CastExpression	( int ) StatWrapper :: STATOP_MIN		5426957	1					
ANR	5427616	CastTarget	int		5426957	0					
ANR	5427617	Identifier	StatWrapper :: STATOP_MIN		5426957	1					
ANR	5427618	Condition	opint <= ( int ) StatWrapper :: STATOP_MAX	158:5:4605:4641	5426957	1	True				
ANR	5427619	RelationalExpression	opint <= ( int ) StatWrapper :: STATOP_MAX		5426957	0		<=			
ANR	5427620	Identifier	opint		5426957	0					
ANR	5427621	CastExpression	( int ) StatWrapper :: STATOP_MAX		5426957	1					
ANR	5427622	CastTarget	int		5426957	0					
ANR	5427623	Identifier	StatWrapper :: STATOP_MAX		5426957	1					
ANR	5427624	PostIncDecOperationExpression	opint ++	159:5:4649:4655	5426957	2	True				
ANR	5427625	Identifier	opint		5426957	0					
ANR	5427626	IncDec	++		5426957	1					
ANR	5427627	CompoundStatement		120:4:3282:3320	5426957	3					
ANR	5427628	IdentifierDeclStatement	StatWrapper :: StatOpType opno = ( StatWrapper :: StatOpType ) opint ;	160:4:4665:4727	5426957	0	True				
ANR	5427629	IdentifierDecl	opno = ( StatWrapper :: StatOpType ) opint		5426957	0					
ANR	5427630	IdentifierDeclType	StatWrapper :: StatOpType		5426957	0					
ANR	5427631	Identifier	opno		5426957	1					
ANR	5427632	AssignmentExpression	opno = ( StatWrapper :: StatOpType ) opint		5426957	2		=			
ANR	5427633	Identifier	opno		5426957	0					
ANR	5427634	CastExpression	( StatWrapper :: StatOpType ) opint		5426957	1					
ANR	5427635	CastTarget	StatWrapper :: StatOpType		5426957	0					
ANR	5427636	Identifier	opint		5426957	1					
ANR	5427637	IdentifierDeclStatement	const char * fn = wrapper -> GetStatFn ( opno ) ;	161:4:4733:4776	5426957	1	True				
ANR	5427638	IdentifierDecl	* fn = wrapper -> GetStatFn ( opno )		5426957	0					
ANR	5427639	IdentifierDeclType	const char *		5426957	0					
ANR	5427640	Identifier	fn		5426957	1					
ANR	5427641	AssignmentExpression	* fn = wrapper -> GetStatFn ( opno )		5426957	2		=			
ANR	5427642	Identifier	fn		5426957	0					
ANR	5427643	CallExpression	wrapper -> GetStatFn ( opno )		5426957	1					
ANR	5427644	Callee	wrapper -> GetStatFn		5426957	0					
ANR	5427645	PtrMemberAccess	wrapper -> GetStatFn		5426957	0					
ANR	5427646	Identifier	wrapper		5426957	0					
ANR	5427647	Identifier	GetStatFn		5426957	1					
ANR	5427648	ArgumentList	opno		5426957	1					
ANR	5427649	Argument	opno		5426957	0					
ANR	5427650	Identifier	opno		5426957	0					
ANR	5427651	IfStatement	if ( NULL == fn )		5426957	2					
ANR	5427652	Condition	NULL == fn	162:9:4787:4796	5426957	0	True				
ANR	5427653	EqualityExpression	NULL == fn		5426957	0		==			
ANR	5427654	Identifier	NULL		5426957	0					
ANR	5427655	Identifier	fn		5426957	1					
ANR	5427656	CompoundStatement		117:22:3250:3250	5426957	1					
ANR	5427657	ExpressionStatement	"fn = ""<NULL>"""	163:5:4807:4820	5426957	0	True				
ANR	5427658	AssignmentExpression	"fn = ""<NULL>"""		5426957	0		=			
ANR	5427659	Identifier	fn		5426957	0					
ANR	5427660	PrimaryExpression	"""<NULL>"""		5426957	1					
ANR	5427661	IdentifierDeclStatement	const char * name = get_op_name ( opno ) ;	165:4:4832:4870	5426957	3	True				
ANR	5427662	IdentifierDecl	* name = get_op_name ( opno )		5426957	0					
ANR	5427663	IdentifierDeclType	const char *		5426957	0					
ANR	5427664	Identifier	name		5426957	1					
ANR	5427665	AssignmentExpression	* name = get_op_name ( opno )		5426957	2		=			
ANR	5427666	Identifier	name		5426957	0					
ANR	5427667	CallExpression	get_op_name ( opno )		5426957	1					
ANR	5427668	Callee	get_op_name		5426957	0					
ANR	5427669	Identifier	get_op_name		5426957	0					
ANR	5427670	ArgumentList	opno		5426957	1					
ANR	5427671	Argument	opno		5426957	0					
ANR	5427672	Identifier	opno		5426957	0					
ANR	5427673	ExpressionStatement	"printf ( ""  %s = %s\\n"" , name , fn )"	166:4:4876:4909	5426957	4	True				
ANR	5427674	CallExpression	"printf ( ""  %s = %s\\n"" , name , fn )"		5426957	0					
ANR	5427675	Callee	printf		5426957	0					
ANR	5427676	Identifier	printf		5426957	0					
ANR	5427677	ArgumentList	"""  %s = %s\\n"""		5426957	1					
ANR	5427678	Argument	"""  %s = %s\\n"""		5426957	0					
ANR	5427679	PrimaryExpression	"""  %s = %s\\n"""		5426957	0					
ANR	5427680	Argument	name		5426957	1					
ANR	5427681	Identifier	name		5426957	0					
ANR	5427682	Argument	fn		5426957	2					
ANR	5427683	Identifier	fn		5426957	0					
ANR	5427684	IfStatement	if ( auto_stat )		5426957	12					
ANR	5427685	Condition	auto_stat	169:8:4925:4933	5426957	0	True				
ANR	5427686	Identifier	auto_stat		5426957	0					
ANR	5427687	CompoundStatement		124:20:3387:3387	5426957	1					
ANR	5427688	ExpressionStatement	"dump_status ( * wrapper , ""Stat results"" )"	170:4:4943:4982	5426957	0	True				
ANR	5427689	CallExpression	"dump_status ( * wrapper , ""Stat results"" )"		5426957	0					
ANR	5427690	Callee	dump_status		5426957	0					
ANR	5427691	Identifier	dump_status		5426957	0					
ANR	5427692	ArgumentList	* wrapper		5426957	1					
ANR	5427693	Argument	* wrapper		5426957	0					
ANR	5427694	UnaryOperationExpression	* wrapper		5426957	0					
ANR	5427695	UnaryOperator	*		5426957	0					
ANR	5427696	Identifier	wrapper		5426957	1					
ANR	5427697	Argument	"""Stat results"""		5426957	1					
ANR	5427698	PrimaryExpression	"""Stat results"""		5426957	0					
ANR	5427699	ElseStatement	else		5426957	0					
ANR	5427700	IfStatement	"if ( ! strcmp ( arg , ""--set"" ) )"		5426957	0					
ANR	5427701	Condition	"! strcmp ( arg , ""--set"" )"	174:12:5006:5028	5426957	0	True				
ANR	5427702	UnaryOperationExpression	"! strcmp ( arg , ""--set"" )"		5426957	0					
ANR	5427703	UnaryOperator	!		5426957	0					
ANR	5427704	CallExpression	"strcmp ( arg , ""--set"" )"		5426957	1					
ANR	5427705	Callee	strcmp		5426957	0					
ANR	5427706	Identifier	strcmp		5426957	0					
ANR	5427707	ArgumentList	arg		5426957	1					
ANR	5427708	Argument	arg		5426957	0					
ANR	5427709	Identifier	arg		5426957	0					
ANR	5427710	Argument	"""--set"""		5426957	1					
ANR	5427711	PrimaryExpression	"""--set"""		5426957	0					
ANR	5427712	CompoundStatement		145:3:3781:3810	5426957	1					
ANR	5427713	ExpressionStatement	skip = 1	175:3:5037:5045	5426957	0	True				
ANR	5427714	AssignmentExpression	skip = 1		5426957	0		=			
ANR	5427715	Identifier	skip		5426957	0					
ANR	5427716	PrimaryExpression	1		5426957	1					
ANR	5427717	IfStatement	if ( ! arg1 )		5426957	1					
ANR	5427718	Condition	! arg1	177:8:5056:5060	5426957	0	True				
ANR	5427719	UnaryOperationExpression	! arg1		5426957	0					
ANR	5427720	UnaryOperator	!		5426957	0					
ANR	5427721	Identifier	arg1		5426957	1					
ANR	5427722	CompoundStatement		132:16:3514:3514	5426957	1					
ANR	5427723	ExpressionStatement	"fprintf ( stderr , ""--set usage: --set <op>\\n"" )"	178:4:5070:5116	5426957	0	True				
ANR	5427724	CallExpression	"fprintf ( stderr , ""--set usage: --set <op>\\n"" )"		5426957	0					
ANR	5427725	Callee	fprintf		5426957	0					
ANR	5427726	Identifier	fprintf		5426957	0					
ANR	5427727	ArgumentList	stderr		5426957	1					
ANR	5427728	Argument	stderr		5426957	0					
ANR	5427729	Identifier	stderr		5426957	0					
ANR	5427730	Argument	"""--set usage: --set <op>\\n"""		5426957	1					
ANR	5427731	PrimaryExpression	"""--set usage: --set <op>\\n"""		5426957	0					
ANR	5427732	ExpressionStatement	exit ( 1 )	179:4:5122:5131	5426957	1	True				
ANR	5427733	CallExpression	exit ( 1 )		5426957	0					
ANR	5427734	Callee	exit		5426957	0					
ANR	5427735	Identifier	exit		5426957	0					
ANR	5427736	ArgumentList	1		5426957	1					
ANR	5427737	Argument	1		5426957	0					
ANR	5427738	PrimaryExpression	1		5426957	0					
ANR	5427739	IdentifierDeclStatement	const StatOp * op = get_op ( arg1 ) ;	181:3:5141:5174	5426957	2	True				
ANR	5427740	IdentifierDecl	* op = get_op ( arg1 )		5426957	0					
ANR	5427741	IdentifierDeclType	const StatOp *		5426957	0					
ANR	5427742	Identifier	op		5426957	1					
ANR	5427743	AssignmentExpression	* op = get_op ( arg1 )		5426957	2		=			
ANR	5427744	Identifier	op		5426957	0					
ANR	5427745	CallExpression	get_op ( arg1 )		5426957	1					
ANR	5427746	Callee	get_op		5426957	0					
ANR	5427747	Identifier	get_op		5426957	0					
ANR	5427748	ArgumentList	arg1		5426957	1					
ANR	5427749	Argument	arg1		5426957	0					
ANR	5427750	Identifier	arg1		5426957	0					
ANR	5427751	IfStatement	if ( ! wrapper )		5426957	3					
ANR	5427752	Condition	! wrapper	183:8:5185:5192	5426957	0	True				
ANR	5427753	UnaryOperationExpression	! wrapper		5426957	0					
ANR	5427754	UnaryOperator	!		5426957	0					
ANR	5427755	Identifier	wrapper		5426957	1					
ANR	5427756	CompoundStatement		138:19:3646:3646	5426957	1					
ANR	5427757	ExpressionStatement	"fprintf ( stderr , ""--set: no wrapper object!\\n"" )"	184:4:5202:5250	5426957	0	True				
ANR	5427758	CallExpression	"fprintf ( stderr , ""--set: no wrapper object!\\n"" )"		5426957	0					
ANR	5427759	Callee	fprintf		5426957	0					
ANR	5427760	Identifier	fprintf		5426957	0					
ANR	5427761	ArgumentList	stderr		5426957	1					
ANR	5427762	Argument	stderr		5426957	0					
ANR	5427763	Identifier	stderr		5426957	0					
ANR	5427764	Argument	"""--set: no wrapper object!\\n"""		5426957	1					
ANR	5427765	PrimaryExpression	"""--set: no wrapper object!\\n"""		5426957	0					
ANR	5427766	ExpressionStatement	exit ( 1 )	185:4:5256:5265	5426957	1	True				
ANR	5427767	CallExpression	exit ( 1 )		5426957	0					
ANR	5427768	Callee	exit		5426957	0					
ANR	5427769	Identifier	exit		5426957	0					
ANR	5427770	ArgumentList	1		5426957	1					
ANR	5427771	Argument	1		5426957	0					
ANR	5427772	PrimaryExpression	1		5426957	0					
ANR	5427773	IdentifierDeclStatement	"bool rc1 = false , rc2 = false ;"	189:3:5297:5326	5426957	4	True				
ANR	5427774	IdentifierDecl	rc1 = false		5426957	0					
ANR	5427775	IdentifierDeclType	bool		5426957	0					
ANR	5427776	Identifier	rc1		5426957	1					
ANR	5427777	AssignmentExpression	rc1 = false		5426957	2		=			
ANR	5427778	Identifier	false		5426957	0					
ANR	5427779	Identifier	false		5426957	1					
ANR	5427780	IdentifierDecl	rc2 = false		5426957	1					
ANR	5427781	IdentifierDeclType	bool		5426957	0					
ANR	5427782	Identifier	rc2		5426957	1					
ANR	5427783	AssignmentExpression	rc2 = false		5426957	2		=			
ANR	5427784	Identifier	false		5426957	0					
ANR	5427785	Identifier	false		5426957	1					
ANR	5427786	IdentifierDeclStatement	"const char * n1 = """" , * n2 = """" ;"	190:3:5331:5360	5426957	5	True				
ANR	5427787	IdentifierDecl	"* n1 = """""		5426957	0					
ANR	5427788	IdentifierDeclType	const char *		5426957	0					
ANR	5427789	Identifier	n1		5426957	1					
ANR	5427790	AssignmentExpression	"* n1 = """""		5426957	2		=			
ANR	5427791	Identifier	n1		5426957	0					
ANR	5427792	PrimaryExpression	""""""		5426957	1					
ANR	5427793	IdentifierDecl	"* n2 = """""		5426957	1					
ANR	5427794	IdentifierDeclType	const char *		5426957	0					
ANR	5427795	Identifier	n2		5426957	1					
ANR	5427796	AssignmentExpression	"* n2 = """""		5426957	2		=			
ANR	5427797	Identifier	n2		5426957	0					
ANR	5427798	PrimaryExpression	""""""		5426957	1					
ANR	5427799	SwitchStatement	switch ( op -> type )		5426957	6					
ANR	5427800	Condition	op -> type	191:12:5374:5381	5426957	0	True				
ANR	5427801	PtrMemberAccess	op -> type		5426957	0					
ANR	5427802	Identifier	op		5426957	0					
ANR	5427803	Identifier	type		5426957	1					
ANR	5427804	CompoundStatement		146:23:3835:3835	5426957	1					
ANR	5427805	Label	case StatWrapper :: STATOP_STAT :	192:3:5390:5419	5426957	0	True				
ANR	5427806	Identifier	StatWrapper :: STATOP_STAT		5426957	0					
ANR	5427807	Label	case StatWrapper :: STATOP_LSTAT :	193:3:5424:5454	5426957	1	True				
ANR	5427808	Identifier	StatWrapper :: STATOP_LSTAT		5426957	0					
ANR	5427809	Label	case StatWrapper :: STATOP_BOTH :	194:3:5459:5488	5426957	2	True				
ANR	5427810	Identifier	StatWrapper :: STATOP_BOTH		5426957	0					
ANR	5427811	ExpressionStatement	"n1 = ""SetPath"""	195:4:5494:5508	5426957	3	True				
ANR	5427812	AssignmentExpression	"n1 = ""SetPath"""		5426957	0		=			
ANR	5427813	Identifier	n1		5426957	0					
ANR	5427814	PrimaryExpression	"""SetPath"""		5426957	1					
ANR	5427815	ExpressionStatement	rc1 = wrapper -> SetPath ( path )	196:4:5514:5544	5426957	4	True				
ANR	5427816	AssignmentExpression	rc1 = wrapper -> SetPath ( path )		5426957	0		=			
ANR	5427817	Identifier	rc1		5426957	0					
ANR	5427818	CallExpression	wrapper -> SetPath ( path )		5426957	1					
ANR	5427819	Callee	wrapper -> SetPath		5426957	0					
ANR	5427820	PtrMemberAccess	wrapper -> SetPath		5426957	0					
ANR	5427821	Identifier	wrapper		5426957	0					
ANR	5427822	Identifier	SetPath		5426957	1					
ANR	5427823	ArgumentList	path		5426957	1					
ANR	5427824	Argument	path		5426957	0					
ANR	5427825	Identifier	path		5426957	0					
ANR	5427826	BreakStatement	break ;	197:4:5550:5555	5426957	5	True				
ANR	5427827	Label	case StatWrapper :: STATOP_FSTAT :	198:3:5560:5590	5426957	6	True				
ANR	5427828	Identifier	StatWrapper :: STATOP_FSTAT		5426957	0					
ANR	5427829	ExpressionStatement	"n1 = ""SetFd"""	199:4:5596:5608	5426957	7	True				
ANR	5427830	AssignmentExpression	"n1 = ""SetFd"""		5426957	0		=			
ANR	5427831	Identifier	n1		5426957	0					
ANR	5427832	PrimaryExpression	"""SetFd"""		5426957	1					
ANR	5427833	ExpressionStatement	rc1 = wrapper -> SetFD ( fd )	200:4:5614:5640	5426957	8	True				
ANR	5427834	AssignmentExpression	rc1 = wrapper -> SetFD ( fd )		5426957	0		=			
ANR	5427835	Identifier	rc1		5426957	0					
ANR	5427836	CallExpression	wrapper -> SetFD ( fd )		5426957	1					
ANR	5427837	Callee	wrapper -> SetFD		5426957	0					
ANR	5427838	PtrMemberAccess	wrapper -> SetFD		5426957	0					
ANR	5427839	Identifier	wrapper		5426957	0					
ANR	5427840	Identifier	SetFD		5426957	1					
ANR	5427841	ArgumentList	fd		5426957	1					
ANR	5427842	Argument	fd		5426957	0					
ANR	5427843	Identifier	fd		5426957	0					
ANR	5427844	BreakStatement	break ;	201:4:5646:5651	5426957	9	True				
ANR	5427845	Label	case StatWrapper :: STATOP_NONE :	202:3:5656:5685	5426957	10	True				
ANR	5427846	Identifier	StatWrapper :: STATOP_NONE		5426957	0					
ANR	5427847	BreakStatement	break ;	203:4:5691:5696	5426957	11	True				
ANR	5427848	Label	case StatWrapper :: STATOP_ALL :	204:3:5701:5729	5426957	12	True				
ANR	5427849	Identifier	StatWrapper :: STATOP_ALL		5426957	0					
ANR	5427850	ExpressionStatement	"n1 = ""SetPath"""	205:4:5735:5749	5426957	13	True				
ANR	5427851	AssignmentExpression	"n1 = ""SetPath"""		5426957	0		=			
ANR	5427852	Identifier	n1		5426957	0					
ANR	5427853	PrimaryExpression	"""SetPath"""		5426957	1					
ANR	5427854	ExpressionStatement	rc1 = wrapper -> SetPath ( path )	206:4:5755:5785	5426957	14	True				
ANR	5427855	AssignmentExpression	rc1 = wrapper -> SetPath ( path )		5426957	0		=			
ANR	5427856	Identifier	rc1		5426957	0					
ANR	5427857	CallExpression	wrapper -> SetPath ( path )		5426957	1					
ANR	5427858	Callee	wrapper -> SetPath		5426957	0					
ANR	5427859	PtrMemberAccess	wrapper -> SetPath		5426957	0					
ANR	5427860	Identifier	wrapper		5426957	0					
ANR	5427861	Identifier	SetPath		5426957	1					
ANR	5427862	ArgumentList	path		5426957	1					
ANR	5427863	Argument	path		5426957	0					
ANR	5427864	Identifier	path		5426957	0					
ANR	5427865	ExpressionStatement	"n2 = ""SetFD"""	207:4:5791:5803	5426957	15	True				
ANR	5427866	AssignmentExpression	"n2 = ""SetFD"""		5426957	0		=			
ANR	5427867	Identifier	n2		5426957	0					
ANR	5427868	PrimaryExpression	"""SetFD"""		5426957	1					
ANR	5427869	ExpressionStatement	rc2 = wrapper -> SetFD ( fd )	208:4:5809:5835	5426957	16	True				
ANR	5427870	AssignmentExpression	rc2 = wrapper -> SetFD ( fd )		5426957	0		=			
ANR	5427871	Identifier	rc2		5426957	0					
ANR	5427872	CallExpression	wrapper -> SetFD ( fd )		5426957	1					
ANR	5427873	Callee	wrapper -> SetFD		5426957	0					
ANR	5427874	PtrMemberAccess	wrapper -> SetFD		5426957	0					
ANR	5427875	Identifier	wrapper		5426957	0					
ANR	5427876	Identifier	SetFD		5426957	1					
ANR	5427877	ArgumentList	fd		5426957	1					
ANR	5427878	Argument	fd		5426957	0					
ANR	5427879	Identifier	fd		5426957	0					
ANR	5427880	BreakStatement	break ;	209:4:5841:5846	5426957	17	True				
ANR	5427881	Label	case StatWrapper :: STATOP_LAST :	210:3:5851:5880	5426957	18	True				
ANR	5427882	Identifier	StatWrapper :: STATOP_LAST		5426957	0					
ANR	5427883	Label	default :	211:3:5885:5892	5426957	19	True				
ANR	5427884	Identifier	default		5426957	0					
ANR	5427885	ExpressionStatement	"fprintf ( stderr , ""%s (%d) doesn't make sense for set\\n"" , op -> str , op -> type )"	212:4:5898:5981	5426957	20	True				
ANR	5427886	CallExpression	"fprintf ( stderr , ""%s (%d) doesn't make sense for set\\n"" , op -> str , op -> type )"		5426957	0					
ANR	5427887	Callee	fprintf		5426957	0					
ANR	5427888	Identifier	fprintf		5426957	0					
ANR	5427889	ArgumentList	stderr		5426957	1					
ANR	5427890	Argument	stderr		5426957	0					
ANR	5427891	Identifier	stderr		5426957	0					
ANR	5427892	Argument	"""%s (%d) doesn't make sense for set\\n"""		5426957	1					
ANR	5427893	PrimaryExpression	"""%s (%d) doesn't make sense for set\\n"""		5426957	0					
ANR	5427894	Argument	op -> str		5426957	2					
ANR	5427895	PtrMemberAccess	op -> str		5426957	0					
ANR	5427896	Identifier	op		5426957	0					
ANR	5427897	Identifier	str		5426957	1					
ANR	5427898	Argument	op -> type		5426957	3					
ANR	5427899	PtrMemberAccess	op -> type		5426957	0					
ANR	5427900	Identifier	op		5426957	0					
ANR	5427901	Identifier	type		5426957	1					
ANR	5427902	ExpressionStatement	exit ( 1 )	214:4:5987:5996	5426957	21	True				
ANR	5427903	CallExpression	exit ( 1 )		5426957	0					
ANR	5427904	Callee	exit		5426957	0					
ANR	5427905	Identifier	exit		5426957	0					
ANR	5427906	ArgumentList	1		5426957	1					
ANR	5427907	Argument	1		5426957	0					
ANR	5427908	PrimaryExpression	1		5426957	0					
ANR	5427909	BreakStatement	break ;	215:4:6002:6007	5426957	22	True				
ANR	5427910	IfStatement	if ( rc1 || rc2 )		5426957	7					
ANR	5427911	Condition	rc1 || rc2	217:8:6022:6031	5426957	0	True				
ANR	5427912	OrExpression	rc1 || rc2		5426957	0		||			
ANR	5427913	Identifier	rc1		5426957	0					
ANR	5427914	Identifier	rc2		5426957	1					
ANR	5427915	CompoundStatement		172:21:4485:4485	5426957	1					
ANR	5427916	ExpressionStatement	"printf ( ""set via %s [%s/%s] OK\\n"" , op -> str , n1 , n2 )"	218:4:6041:6099	5426957	0	True				
ANR	5427917	CallExpression	"printf ( ""set via %s [%s/%s] OK\\n"" , op -> str , n1 , n2 )"		5426957	0					
ANR	5427918	Callee	printf		5426957	0					
ANR	5427919	Identifier	printf		5426957	0					
ANR	5427920	ArgumentList	"""set via %s [%s/%s] OK\\n"""		5426957	1					
ANR	5427921	Argument	"""set via %s [%s/%s] OK\\n"""		5426957	0					
ANR	5427922	PrimaryExpression	"""set via %s [%s/%s] OK\\n"""		5426957	0					
ANR	5427923	Argument	op -> str		5426957	1					
ANR	5427924	PtrMemberAccess	op -> str		5426957	0					
ANR	5427925	Identifier	op		5426957	0					
ANR	5427926	Identifier	str		5426957	1					
ANR	5427927	Argument	n1		5426957	2					
ANR	5427928	Identifier	n1		5426957	0					
ANR	5427929	Argument	n2		5426957	3					
ANR	5427930	Identifier	n2		5426957	0					
ANR	5427931	ElseStatement	else		5426957	0					
ANR	5427932	CompoundStatement		175:10:4561:4561	5426957	0					
ANR	5427933	ExpressionStatement	"fprintf ( stderr , ""set via %s [%s/%s] FAILED\\n"" , op -> str , n1 , n2 )"	221:4:6117:6189	5426957	0	True				
ANR	5427934	CallExpression	"fprintf ( stderr , ""set via %s [%s/%s] FAILED\\n"" , op -> str , n1 , n2 )"		5426957	0					
ANR	5427935	Callee	fprintf		5426957	0					
ANR	5427936	Identifier	fprintf		5426957	0					
ANR	5427937	ArgumentList	stderr		5426957	1					
ANR	5427938	Argument	stderr		5426957	0					
ANR	5427939	Identifier	stderr		5426957	0					
ANR	5427940	Argument	"""set via %s [%s/%s] FAILED\\n"""		5426957	1					
ANR	5427941	PrimaryExpression	"""set via %s [%s/%s] FAILED\\n"""		5426957	0					
ANR	5427942	Argument	op -> str		5426957	2					
ANR	5427943	PtrMemberAccess	op -> str		5426957	0					
ANR	5427944	Identifier	op		5426957	0					
ANR	5427945	Identifier	str		5426957	1					
ANR	5427946	Argument	n1		5426957	3					
ANR	5427947	Identifier	n1		5426957	0					
ANR	5427948	Argument	n2		5426957	4					
ANR	5427949	Identifier	n2		5426957	0					
ANR	5427950	ExpressionStatement	exit ( 1 )	223:4:6195:6204	5426957	1	True				
ANR	5427951	CallExpression	exit ( 1 )		5426957	0					
ANR	5427952	Callee	exit		5426957	0					
ANR	5427953	Identifier	exit		5426957	0					
ANR	5427954	ArgumentList	1		5426957	1					
ANR	5427955	Argument	1		5426957	0					
ANR	5427956	PrimaryExpression	1		5426957	0					
ANR	5427957	ElseStatement	else		5426957	0					
ANR	5427958	IfStatement	"if ( ( ! strcmp ( arg , ""--stat"" ) ) || ( ! strcmp ( arg , ""-s"" ) ) )"		5426957	0					
ANR	5427959	Condition	"( ! strcmp ( arg , ""--stat"" ) ) || ( ! strcmp ( arg , ""-s"" ) )"	227:12:6228:6278	5426957	0	True				
ANR	5427960	OrExpression	"( ! strcmp ( arg , ""--stat"" ) ) || ( ! strcmp ( arg , ""-s"" ) )"		5426957	0		||			
ANR	5427961	UnaryOperationExpression	"! strcmp ( arg , ""--stat"" )"		5426957	0					
ANR	5427962	UnaryOperator	!		5426957	0					
ANR	5427963	CallExpression	"strcmp ( arg , ""--stat"" )"		5426957	1					
ANR	5427964	Callee	strcmp		5426957	0					
ANR	5427965	Identifier	strcmp		5426957	0					
ANR	5427966	ArgumentList	arg		5426957	1					
ANR	5427967	Argument	arg		5426957	0					
ANR	5427968	Identifier	arg		5426957	0					
ANR	5427969	Argument	"""--stat"""		5426957	1					
ANR	5427970	PrimaryExpression	"""--stat"""		5426957	0					
ANR	5427971	UnaryOperationExpression	"! strcmp ( arg , ""-s"" )"		5426957	1					
ANR	5427972	UnaryOperator	!		5426957	0					
ANR	5427973	CallExpression	"strcmp ( arg , ""-s"" )"		5426957	1					
ANR	5427974	Callee	strcmp		5426957	0					
ANR	5427975	Identifier	strcmp		5426957	0					
ANR	5427976	ArgumentList	arg		5426957	1					
ANR	5427977	Argument	arg		5426957	0					
ANR	5427978	Identifier	arg		5426957	0					
ANR	5427979	Argument	"""-s"""		5426957	1					
ANR	5427980	PrimaryExpression	"""-s"""		5426957	0					
ANR	5427981	CompoundStatement		211:3:5320:5343	5426957	1					
ANR	5427982	IfStatement	if ( ! arg2 )		5426957	0					
ANR	5427983	Condition	! arg2	228:8:6292:6296	5426957	0	True				
ANR	5427984	UnaryOperationExpression	! arg2		5426957	0					
ANR	5427985	UnaryOperator	!		5426957	0					
ANR	5427986	Identifier	arg2		5426957	1					
ANR	5427987	CompoundStatement		183:16:4750:4750	5426957	1					
ANR	5427988	ExpressionStatement	"fprintf ( stderr , ""--stat usage: --stat <op> <which> [f[orce]|[no]]\\n"" )"	229:4:6306:6383	5426957	0	True				
ANR	5427989	CallExpression	"fprintf ( stderr , ""--stat usage: --stat <op> <which> [f[orce]|[no]]\\n"" )"		5426957	0					
ANR	5427990	Callee	fprintf		5426957	0					
ANR	5427991	Identifier	fprintf		5426957	0					
ANR	5427992	ArgumentList	stderr		5426957	1					
ANR	5427993	Argument	stderr		5426957	0					
ANR	5427994	Identifier	stderr		5426957	0					
ANR	5427995	Argument	"""--stat usage: --stat <op> <which> [f[orce]|[no]]\\n"""		5426957	1					
ANR	5427996	PrimaryExpression	"""--stat usage: --stat <op> <which> [f[orce]|[no]]\\n"""		5426957	0					
ANR	5427997	ExpressionStatement	exit ( 1 )	231:4:6389:6398	5426957	1	True				
ANR	5427998	CallExpression	exit ( 1 )		5426957	0					
ANR	5427999	Callee	exit		5426957	0					
ANR	5428000	Identifier	exit		5426957	0					
ANR	5428001	ArgumentList	1		5426957	1					
ANR	5428002	Argument	1		5426957	0					
ANR	5428003	PrimaryExpression	1		5426957	0					
ANR	5428004	IdentifierDeclStatement	const StatOp * op = get_op ( arg1 ) ;	233:3:6408:6444	5426957	1	True				
ANR	5428005	IdentifierDecl	* op = get_op ( arg1 )		5426957	0					
ANR	5428006	IdentifierDeclType	const StatOp *		5426957	0					
ANR	5428007	Identifier	op		5426957	1					
ANR	5428008	AssignmentExpression	* op = get_op ( arg1 )		5426957	2		=			
ANR	5428009	Identifier	op		5426957	0					
ANR	5428010	CallExpression	get_op ( arg1 )		5426957	1					
ANR	5428011	Callee	get_op		5426957	0					
ANR	5428012	Identifier	get_op		5426957	0					
ANR	5428013	ArgumentList	arg1		5426957	1					
ANR	5428014	Argument	arg1		5426957	0					
ANR	5428015	Identifier	arg1		5426957	0					
ANR	5428016	IdentifierDeclStatement	const StatOp * which = get_op ( arg2 ) ;	234:3:6449:6485	5426957	2	True				
ANR	5428017	IdentifierDecl	* which = get_op ( arg2 )		5426957	0					
ANR	5428018	IdentifierDeclType	const StatOp *		5426957	0					
ANR	5428019	Identifier	which		5426957	1					
ANR	5428020	AssignmentExpression	* which = get_op ( arg2 )		5426957	2		=			
ANR	5428021	Identifier	which		5426957	0					
ANR	5428022	CallExpression	get_op ( arg2 )		5426957	1					
ANR	5428023	Callee	get_op		5426957	0					
ANR	5428024	Identifier	get_op		5426957	0					
ANR	5428025	ArgumentList	arg2		5426957	1					
ANR	5428026	Argument	arg2		5426957	0					
ANR	5428027	Identifier	arg2		5426957	0					
ANR	5428028	IdentifierDeclStatement	bool force = true ;	235:3:6490:6507	5426957	3	True				
ANR	5428029	IdentifierDecl	force = true		5426957	0					
ANR	5428030	IdentifierDeclType	bool		5426957	0					
ANR	5428031	Identifier	force		5426957	1					
ANR	5428032	AssignmentExpression	force = true		5426957	2		=			
ANR	5428033	Identifier	true		5426957	0					
ANR	5428034	Identifier	true		5426957	1					
ANR	5428035	IdentifierDeclStatement	bool force_set ;	236:3:6512:6526	5426957	4	True				
ANR	5428036	IdentifierDecl	force_set		5426957	0					
ANR	5428037	IdentifierDeclType	bool		5426957	0					
ANR	5428038	Identifier	force_set		5426957	1					
ANR	5428039	IfStatement	if ( arg3 )		5426957	5					
ANR	5428040	Condition	arg3	238:8:6537:6540	5426957	0	True				
ANR	5428041	Identifier	arg3		5426957	0					
ANR	5428042	CompoundStatement		193:15:4994:4994	5426957	1					
ANR	5428043	ExpressionStatement	skip = 3	239:4:6550:6558	5426957	0	True				
ANR	5428044	AssignmentExpression	skip = 3		5426957	0		=			
ANR	5428045	Identifier	skip		5426957	0					
ANR	5428046	PrimaryExpression	3		5426957	1					
ANR	5428047	ExpressionStatement	"force = ( ( ! strcasecmp ( arg3 , ""f"" ) ) || ( ! strcasecmp ( arg3 , ""force"" ) ) )"	240:4:6564:6641	5426957	1	True				
ANR	5428048	AssignmentExpression	"force = ( ( ! strcasecmp ( arg3 , ""f"" ) ) || ( ! strcasecmp ( arg3 , ""force"" ) ) )"		5426957	0		=			
ANR	5428049	Identifier	force		5426957	0					
ANR	5428050	OrExpression	"( ! strcasecmp ( arg3 , ""f"" ) ) || ( ! strcasecmp ( arg3 , ""force"" ) )"		5426957	1		||			
ANR	5428051	UnaryOperationExpression	"! strcasecmp ( arg3 , ""f"" )"		5426957	0					
ANR	5428052	UnaryOperator	!		5426957	0					
ANR	5428053	CallExpression	"strcasecmp ( arg3 , ""f"" )"		5426957	1					
ANR	5428054	Callee	strcasecmp		5426957	0					
ANR	5428055	Identifier	strcasecmp		5426957	0					
ANR	5428056	ArgumentList	arg3		5426957	1					
ANR	5428057	Argument	arg3		5426957	0					
ANR	5428058	Identifier	arg3		5426957	0					
ANR	5428059	Argument	"""f"""		5426957	1					
ANR	5428060	PrimaryExpression	"""f"""		5426957	0					
ANR	5428061	UnaryOperationExpression	"! strcasecmp ( arg3 , ""force"" )"		5426957	1					
ANR	5428062	UnaryOperator	!		5426957	0					
ANR	5428063	CallExpression	"strcasecmp ( arg3 , ""force"" )"		5426957	1					
ANR	5428064	Callee	strcasecmp		5426957	0					
ANR	5428065	Identifier	strcasecmp		5426957	0					
ANR	5428066	ArgumentList	arg3		5426957	1					
ANR	5428067	Argument	arg3		5426957	0					
ANR	5428068	Identifier	arg3		5426957	0					
ANR	5428069	Argument	"""force"""		5426957	1					
ANR	5428070	PrimaryExpression	"""force"""		5426957	0					
ANR	5428071	ElseStatement	else		5426957	0					
ANR	5428072	CompoundStatement		198:8:5106:5106	5426957	0					
ANR	5428073	ExpressionStatement	skip = 2	244:4:6662:6670	5426957	0	True				
ANR	5428074	AssignmentExpression	skip = 2		5426957	0		=			
ANR	5428075	Identifier	skip		5426957	0					
ANR	5428076	PrimaryExpression	2		5426957	1					
ANR	5428077	ExpressionStatement	force_set = false	245:4:6676:6693	5426957	1	True				
ANR	5428078	AssignmentExpression	force_set = false		5426957	0		=			
ANR	5428079	Identifier	force_set		5426957	0					
ANR	5428080	Identifier	false		5426957	1					
ANR	5428081	IfStatement	if ( ! wrapper )		5426957	6					
ANR	5428082	Condition	! wrapper	248:8:6709:6716	5426957	0	True				
ANR	5428083	UnaryOperationExpression	! wrapper		5426957	0					
ANR	5428084	UnaryOperator	!		5426957	0					
ANR	5428085	Identifier	wrapper		5426957	1					
ANR	5428086	CompoundStatement		203:19:5170:5170	5426957	1					
ANR	5428087	ExpressionStatement	"fprintf ( stderr , ""--stat: no wrapper object!\\n"" )"	249:4:6726:6775	5426957	0	True				
ANR	5428088	CallExpression	"fprintf ( stderr , ""--stat: no wrapper object!\\n"" )"		5426957	0					
ANR	5428089	Callee	fprintf		5426957	0					
ANR	5428090	Identifier	fprintf		5426957	0					
ANR	5428091	ArgumentList	stderr		5426957	1					
ANR	5428092	Argument	stderr		5426957	0					
ANR	5428093	Identifier	stderr		5426957	0					
ANR	5428094	Argument	"""--stat: no wrapper object!\\n"""		5426957	1					
ANR	5428095	PrimaryExpression	"""--stat: no wrapper object!\\n"""		5426957	0					
ANR	5428096	ExpressionStatement	exit ( 1 )	250:4:6781:6790	5426957	1	True				
ANR	5428097	CallExpression	exit ( 1 )		5426957	0					
ANR	5428098	Callee	exit		5426957	0					
ANR	5428099	Identifier	exit		5426957	0					
ANR	5428100	ArgumentList	1		5426957	1					
ANR	5428101	Argument	1		5426957	0					
ANR	5428102	PrimaryExpression	1		5426957	0					
ANR	5428103	IdentifierDeclStatement	"int rc1 = 0 , rc2 = 0 ;"	254:3:6823:6844	5426957	7	True				
ANR	5428104	IdentifierDecl	rc1 = 0		5426957	0					
ANR	5428105	IdentifierDeclType	int		5426957	0					
ANR	5428106	Identifier	rc1		5426957	1					
ANR	5428107	AssignmentExpression	rc1 = 0		5426957	2		=			
ANR	5428108	Identifier	rc1		5426957	0					
ANR	5428109	PrimaryExpression	0		5426957	1					
ANR	5428110	IdentifierDecl	rc2 = 0		5426957	1					
ANR	5428111	IdentifierDeclType	int		5426957	0					
ANR	5428112	Identifier	rc2		5426957	1					
ANR	5428113	AssignmentExpression	rc2 = 0		5426957	2		=			
ANR	5428114	Identifier	rc2		5426957	0					
ANR	5428115	PrimaryExpression	0		5426957	1					
ANR	5428116	IdentifierDeclStatement	bool op2 = false ;	255:3:6849:6865	5426957	8	True				
ANR	5428117	IdentifierDecl	op2 = false		5426957	0					
ANR	5428118	IdentifierDeclType	bool		5426957	0					
ANR	5428119	Identifier	op2		5426957	1					
ANR	5428120	AssignmentExpression	op2 = false		5426957	2		=			
ANR	5428121	Identifier	false		5426957	0					
ANR	5428122	Identifier	false		5426957	1					
ANR	5428123	IdentifierDeclStatement	"char * n1 = """" , * n2 = """" ;"	256:3:6870:6893	5426957	9	True				
ANR	5428124	IdentifierDecl	"* n1 = """""		5426957	0					
ANR	5428125	IdentifierDeclType	char *		5426957	0					
ANR	5428126	Identifier	n1		5426957	1					
ANR	5428127	AssignmentExpression	"* n1 = """""		5426957	2		=			
ANR	5428128	Identifier	n1		5426957	0					
ANR	5428129	PrimaryExpression	""""""		5426957	1					
ANR	5428130	IdentifierDecl	"* n2 = """""		5426957	1					
ANR	5428131	IdentifierDeclType	char *		5426957	0					
ANR	5428132	Identifier	n2		5426957	1					
ANR	5428133	AssignmentExpression	"* n2 = """""		5426957	2		=			
ANR	5428134	Identifier	n2		5426957	0					
ANR	5428135	PrimaryExpression	""""""		5426957	1					
ANR	5428136	SwitchStatement	switch ( op -> type )		5426957	10					
ANR	5428137	Condition	op -> type	257:12:6907:6914	5426957	0	True				
ANR	5428138	PtrMemberAccess	op -> type		5426957	0					
ANR	5428139	Identifier	op		5426957	0					
ANR	5428140	Identifier	type		5426957	1					
ANR	5428141	CompoundStatement		212:23:5368:5368	5426957	1					
ANR	5428142	Label	case StatWrapper :: STATOP_NONE :	258:3:6923:6952	5426957	0	True				
ANR	5428143	Identifier	StatWrapper :: STATOP_NONE		5426957	0					
ANR	5428144	Label	case StatWrapper :: STATOP_LAST :	259:3:6957:6986	5426957	1	True				
ANR	5428145	Identifier	StatWrapper :: STATOP_LAST		5426957	0					
ANR	5428146	IfStatement	if ( force_set )		5426957	2					
ANR	5428147	Condition	force_set	260:9:6997:7005	5426957	0	True				
ANR	5428148	Identifier	force_set		5426957	0					
ANR	5428149	CompoundStatement		215:21:5459:5459	5426957	1					
ANR	5428150	ExpressionStatement	"n1 = ""Stat(which,force)"""	261:5:7016:7040	5426957	0	True				
ANR	5428151	AssignmentExpression	"n1 = ""Stat(which,force)"""		5426957	0		=			
ANR	5428152	Identifier	n1		5426957	0					
ANR	5428153	PrimaryExpression	"""Stat(which,force)"""		5426957	1					
ANR	5428154	ExpressionStatement	"rc1 = wrapper -> Stat ( which -> type , force )"	262:5:7047:7088	5426957	1	True				
ANR	5428155	AssignmentExpression	"rc1 = wrapper -> Stat ( which -> type , force )"		5426957	0		=			
ANR	5428156	Identifier	rc1		5426957	0					
ANR	5428157	CallExpression	"wrapper -> Stat ( which -> type , force )"		5426957	1					
ANR	5428158	Callee	wrapper -> Stat		5426957	0					
ANR	5428159	PtrMemberAccess	wrapper -> Stat		5426957	0					
ANR	5428160	Identifier	wrapper		5426957	0					
ANR	5428161	Identifier	Stat		5426957	1					
ANR	5428162	ArgumentList	which -> type		5426957	1					
ANR	5428163	Argument	which -> type		5426957	0					
ANR	5428164	PtrMemberAccess	which -> type		5426957	0					
ANR	5428165	Identifier	which		5426957	0					
ANR	5428166	Identifier	type		5426957	1					
ANR	5428167	Argument	force		5426957	1					
ANR	5428168	Identifier	force		5426957	0					
ANR	5428169	ElseStatement	else		5426957	0					
ANR	5428170	CompoundStatement		218:11:5551:5551	5426957	0					
ANR	5428171	ExpressionStatement	"n1 = ""Stat(which)"""	264:5:7108:7126	5426957	0	True				
ANR	5428172	AssignmentExpression	"n1 = ""Stat(which)"""		5426957	0		=			
ANR	5428173	Identifier	n1		5426957	0					
ANR	5428174	PrimaryExpression	"""Stat(which)"""		5426957	1					
ANR	5428175	ExpressionStatement	rc1 = wrapper -> Stat ( which -> type )	265:5:7133:7167	5426957	1	True				
ANR	5428176	AssignmentExpression	rc1 = wrapper -> Stat ( which -> type )		5426957	0		=			
ANR	5428177	Identifier	rc1		5426957	0					
ANR	5428178	CallExpression	wrapper -> Stat ( which -> type )		5426957	1					
ANR	5428179	Callee	wrapper -> Stat		5426957	0					
ANR	5428180	PtrMemberAccess	wrapper -> Stat		5426957	0					
ANR	5428181	Identifier	wrapper		5426957	0					
ANR	5428182	Identifier	Stat		5426957	1					
ANR	5428183	ArgumentList	which -> type		5426957	1					
ANR	5428184	Argument	which -> type		5426957	0					
ANR	5428185	PtrMemberAccess	which -> type		5426957	0					
ANR	5428186	Identifier	which		5426957	0					
ANR	5428187	Identifier	type		5426957	1					
ANR	5428188	BreakStatement	break ;	267:4:7179:7184	5426957	3	True				
ANR	5428189	Label	case StatWrapper :: STATOP_STAT :	268:3:7189:7218	5426957	4	True				
ANR	5428190	Identifier	StatWrapper :: STATOP_STAT		5426957	0					
ANR	5428191	Label	case StatWrapper :: STATOP_LSTAT :	269:3:7223:7253	5426957	5	True				
ANR	5428192	Identifier	StatWrapper :: STATOP_LSTAT		5426957	0					
ANR	5428193	Label	case StatWrapper :: STATOP_BOTH :	270:3:7258:7287	5426957	6	True				
ANR	5428194	Identifier	StatWrapper :: STATOP_BOTH		5426957	0					
ANR	5428195	IfStatement	if ( force_set )		5426957	7					
ANR	5428196	Condition	force_set	271:9:7298:7306	5426957	0	True				
ANR	5428197	Identifier	force_set		5426957	0					
ANR	5428198	CompoundStatement		226:21:5760:5760	5426957	1					
ANR	5428199	ExpressionStatement	"n1 = ""Stat(path,which,force)"""	272:5:7317:7346	5426957	0	True				
ANR	5428200	AssignmentExpression	"n1 = ""Stat(path,which,force)"""		5426957	0		=			
ANR	5428201	Identifier	n1		5426957	0					
ANR	5428202	PrimaryExpression	"""Stat(path,which,force)"""		5426957	1					
ANR	5428203	ExpressionStatement	"rc1 = wrapper -> Stat ( path , which -> type , force )"	273:5:7353:7400	5426957	1	True				
ANR	5428204	AssignmentExpression	"rc1 = wrapper -> Stat ( path , which -> type , force )"		5426957	0		=			
ANR	5428205	Identifier	rc1		5426957	0					
ANR	5428206	CallExpression	"wrapper -> Stat ( path , which -> type , force )"		5426957	1					
ANR	5428207	Callee	wrapper -> Stat		5426957	0					
ANR	5428208	PtrMemberAccess	wrapper -> Stat		5426957	0					
ANR	5428209	Identifier	wrapper		5426957	0					
ANR	5428210	Identifier	Stat		5426957	1					
ANR	5428211	ArgumentList	path		5426957	1					
ANR	5428212	Argument	path		5426957	0					
ANR	5428213	Identifier	path		5426957	0					
ANR	5428214	Argument	which -> type		5426957	1					
ANR	5428215	PtrMemberAccess	which -> type		5426957	0					
ANR	5428216	Identifier	which		5426957	0					
ANR	5428217	Identifier	type		5426957	1					
ANR	5428218	Argument	force		5426957	2					
ANR	5428219	Identifier	force		5426957	0					
ANR	5428220	ElseStatement	else		5426957	0					
ANR	5428221	CompoundStatement		229:11:5863:5863	5426957	0					
ANR	5428222	ExpressionStatement	"n1 = ""Stat(path,which)"""	275:5:7420:7443	5426957	0	True				
ANR	5428223	AssignmentExpression	"n1 = ""Stat(path,which)"""		5426957	0		=			
ANR	5428224	Identifier	n1		5426957	0					
ANR	5428225	PrimaryExpression	"""Stat(path,which)"""		5426957	1					
ANR	5428226	ExpressionStatement	"rc1 = wrapper -> Stat ( path , which -> type )"	276:5:7450:7490	5426957	1	True				
ANR	5428227	AssignmentExpression	"rc1 = wrapper -> Stat ( path , which -> type )"		5426957	0		=			
ANR	5428228	Identifier	rc1		5426957	0					
ANR	5428229	CallExpression	"wrapper -> Stat ( path , which -> type )"		5426957	1					
ANR	5428230	Callee	wrapper -> Stat		5426957	0					
ANR	5428231	PtrMemberAccess	wrapper -> Stat		5426957	0					
ANR	5428232	Identifier	wrapper		5426957	0					
ANR	5428233	Identifier	Stat		5426957	1					
ANR	5428234	ArgumentList	path		5426957	1					
ANR	5428235	Argument	path		5426957	0					
ANR	5428236	Identifier	path		5426957	0					
ANR	5428237	Argument	which -> type		5426957	1					
ANR	5428238	PtrMemberAccess	which -> type		5426957	0					
ANR	5428239	Identifier	which		5426957	0					
ANR	5428240	Identifier	type		5426957	1					
ANR	5428241	BreakStatement	break ;	278:4:7502:7507	5426957	8	True				
ANR	5428242	Label	case StatWrapper :: STATOP_FSTAT :	279:3:7512:7542	5426957	9	True				
ANR	5428243	Identifier	StatWrapper :: STATOP_FSTAT		5426957	0					
ANR	5428244	IfStatement	if ( force_set )		5426957	10					
ANR	5428245	Condition	force_set	280:9:7553:7561	5426957	0	True				
ANR	5428246	Identifier	force_set		5426957	0					
ANR	5428247	CompoundStatement		235:21:6015:6015	5426957	1					
ANR	5428248	ExpressionStatement	"n1 = ""Stat(fd,force)"""	281:5:7572:7593	5426957	0	True				
ANR	5428249	AssignmentExpression	"n1 = ""Stat(fd,force)"""		5426957	0		=			
ANR	5428250	Identifier	n1		5426957	0					
ANR	5428251	PrimaryExpression	"""Stat(fd,force)"""		5426957	1					
ANR	5428252	ExpressionStatement	"rc1 = wrapper -> Stat ( fd , which -> type , force )"	282:5:7600:7645	5426957	1	True				
ANR	5428253	AssignmentExpression	"rc1 = wrapper -> Stat ( fd , which -> type , force )"		5426957	0		=			
ANR	5428254	Identifier	rc1		5426957	0					
ANR	5428255	CallExpression	"wrapper -> Stat ( fd , which -> type , force )"		5426957	1					
ANR	5428256	Callee	wrapper -> Stat		5426957	0					
ANR	5428257	PtrMemberAccess	wrapper -> Stat		5426957	0					
ANR	5428258	Identifier	wrapper		5426957	0					
ANR	5428259	Identifier	Stat		5426957	1					
ANR	5428260	ArgumentList	fd		5426957	1					
ANR	5428261	Argument	fd		5426957	0					
ANR	5428262	Identifier	fd		5426957	0					
ANR	5428263	Argument	which -> type		5426957	1					
ANR	5428264	PtrMemberAccess	which -> type		5426957	0					
ANR	5428265	Identifier	which		5426957	0					
ANR	5428266	Identifier	type		5426957	1					
ANR	5428267	Argument	force		5426957	2					
ANR	5428268	Identifier	force		5426957	0					
ANR	5428269	ElseStatement	else		5426957	0					
ANR	5428270	CompoundStatement		238:11:6108:6108	5426957	0					
ANR	5428271	ExpressionStatement	"n1 = ""Stat(fd)"""	284:5:7665:7680	5426957	0	True				
ANR	5428272	AssignmentExpression	"n1 = ""Stat(fd)"""		5426957	0		=			
ANR	5428273	Identifier	n1		5426957	0					
ANR	5428274	PrimaryExpression	"""Stat(fd)"""		5426957	1					
ANR	5428275	ExpressionStatement	rc1 = wrapper -> Stat ( fd )	285:5:7687:7712	5426957	1	True				
ANR	5428276	AssignmentExpression	rc1 = wrapper -> Stat ( fd )		5426957	0		=			
ANR	5428277	Identifier	rc1		5426957	0					
ANR	5428278	CallExpression	wrapper -> Stat ( fd )		5426957	1					
ANR	5428279	Callee	wrapper -> Stat		5426957	0					
ANR	5428280	PtrMemberAccess	wrapper -> Stat		5426957	0					
ANR	5428281	Identifier	wrapper		5426957	0					
ANR	5428282	Identifier	Stat		5426957	1					
ANR	5428283	ArgumentList	fd		5426957	1					
ANR	5428284	Argument	fd		5426957	0					
ANR	5428285	Identifier	fd		5426957	0					
ANR	5428286	BreakStatement	break ;	287:4:7724:7729	5426957	11	True				
ANR	5428287	Label	case StatWrapper :: STATOP_ALL :	288:3:7734:7762	5426957	12	True				
ANR	5428288	Identifier	StatWrapper :: STATOP_ALL		5426957	0					
ANR	5428289	IfStatement	if ( force_set )		5426957	13					
ANR	5428290	Condition	force_set	289:9:7773:7781	5426957	0	True				
ANR	5428291	Identifier	force_set		5426957	0					
ANR	5428292	CompoundStatement		244:21:6235:6235	5426957	1					
ANR	5428293	ExpressionStatement	"n1 = ""Stat(path,which,force)"""	290:5:7792:7821	5426957	0	True				
ANR	5428294	AssignmentExpression	"n1 = ""Stat(path,which,force)"""		5426957	0		=			
ANR	5428295	Identifier	n1		5426957	0					
ANR	5428296	PrimaryExpression	"""Stat(path,which,force)"""		5426957	1					
ANR	5428297	ExpressionStatement	"rc1 = wrapper -> Stat ( path , which -> type , force )"	291:5:7828:7876	5426957	1	True				
ANR	5428298	AssignmentExpression	"rc1 = wrapper -> Stat ( path , which -> type , force )"		5426957	0		=			
ANR	5428299	Identifier	rc1		5426957	0					
ANR	5428300	CallExpression	"wrapper -> Stat ( path , which -> type , force )"		5426957	1					
ANR	5428301	Callee	wrapper -> Stat		5426957	0					
ANR	5428302	PtrMemberAccess	wrapper -> Stat		5426957	0					
ANR	5428303	Identifier	wrapper		5426957	0					
ANR	5428304	Identifier	Stat		5426957	1					
ANR	5428305	ArgumentList	path		5426957	1					
ANR	5428306	Argument	path		5426957	0					
ANR	5428307	Identifier	path		5426957	0					
ANR	5428308	Argument	which -> type		5426957	1					
ANR	5428309	PtrMemberAccess	which -> type		5426957	0					
ANR	5428310	Identifier	which		5426957	0					
ANR	5428311	Identifier	type		5426957	1					
ANR	5428312	Argument	force		5426957	2					
ANR	5428313	Identifier	force		5426957	0					
ANR	5428314	ExpressionStatement	"n2 = ""Stat(fd,force)"""	292:5:7883:7904	5426957	2	True				
ANR	5428315	AssignmentExpression	"n2 = ""Stat(fd,force)"""		5426957	0		=			
ANR	5428316	Identifier	n2		5426957	0					
ANR	5428317	PrimaryExpression	"""Stat(fd,force)"""		5426957	1					
ANR	5428318	ExpressionStatement	"rc2 = wrapper -> Stat ( fd , force )"	293:5:7911:7943	5426957	3	True				
ANR	5428319	AssignmentExpression	"rc2 = wrapper -> Stat ( fd , force )"		5426957	0		=			
ANR	5428320	Identifier	rc2		5426957	0					
ANR	5428321	CallExpression	"wrapper -> Stat ( fd , force )"		5426957	1					
ANR	5428322	Callee	wrapper -> Stat		5426957	0					
ANR	5428323	PtrMemberAccess	wrapper -> Stat		5426957	0					
ANR	5428324	Identifier	wrapper		5426957	0					
ANR	5428325	Identifier	Stat		5426957	1					
ANR	5428326	ArgumentList	fd		5426957	1					
ANR	5428327	Argument	fd		5426957	0					
ANR	5428328	Identifier	fd		5426957	0					
ANR	5428329	Argument	force		5426957	1					
ANR	5428330	Identifier	force		5426957	0					
ANR	5428331	ElseStatement	else		5426957	0					
ANR	5428332	CompoundStatement		249:11:6406:6406	5426957	0					
ANR	5428333	ExpressionStatement	"n1 = ""Stat(path,which)"""	295:5:7963:7986	5426957	0	True				
ANR	5428334	AssignmentExpression	"n1 = ""Stat(path,which)"""		5426957	0		=			
ANR	5428335	Identifier	n1		5426957	0					
ANR	5428336	PrimaryExpression	"""Stat(path,which)"""		5426957	1					
ANR	5428337	ExpressionStatement	"rc1 = wrapper -> Stat ( path , which -> type )"	296:5:7993:8034	5426957	1	True				
ANR	5428338	AssignmentExpression	"rc1 = wrapper -> Stat ( path , which -> type )"		5426957	0		=			
ANR	5428339	Identifier	rc1		5426957	0					
ANR	5428340	CallExpression	"wrapper -> Stat ( path , which -> type )"		5426957	1					
ANR	5428341	Callee	wrapper -> Stat		5426957	0					
ANR	5428342	PtrMemberAccess	wrapper -> Stat		5426957	0					
ANR	5428343	Identifier	wrapper		5426957	0					
ANR	5428344	Identifier	Stat		5426957	1					
ANR	5428345	ArgumentList	path		5426957	1					
ANR	5428346	Argument	path		5426957	0					
ANR	5428347	Identifier	path		5426957	0					
ANR	5428348	Argument	which -> type		5426957	1					
ANR	5428349	PtrMemberAccess	which -> type		5426957	0					
ANR	5428350	Identifier	which		5426957	0					
ANR	5428351	Identifier	type		5426957	1					
ANR	5428352	ExpressionStatement	"n2 = ""Stat(fd)"""	297:5:8041:8056	5426957	2	True				
ANR	5428353	AssignmentExpression	"n2 = ""Stat(fd)"""		5426957	0		=			
ANR	5428354	Identifier	n2		5426957	0					
ANR	5428355	PrimaryExpression	"""Stat(fd)"""		5426957	1					
ANR	5428356	ExpressionStatement	rc2 = wrapper -> Stat ( fd )	298:5:8063:8088	5426957	3	True				
ANR	5428357	AssignmentExpression	rc2 = wrapper -> Stat ( fd )		5426957	0		=			
ANR	5428358	Identifier	rc2		5426957	0					
ANR	5428359	CallExpression	wrapper -> Stat ( fd )		5426957	1					
ANR	5428360	Callee	wrapper -> Stat		5426957	0					
ANR	5428361	PtrMemberAccess	wrapper -> Stat		5426957	0					
ANR	5428362	Identifier	wrapper		5426957	0					
ANR	5428363	Identifier	Stat		5426957	1					
ANR	5428364	ArgumentList	fd		5426957	1					
ANR	5428365	Argument	fd		5426957	0					
ANR	5428366	Identifier	fd		5426957	0					
ANR	5428367	ExpressionStatement	op2 = true	300:4:8100:8110	5426957	14	True				
ANR	5428368	AssignmentExpression	op2 = true		5426957	0		=			
ANR	5428369	Identifier	op2		5426957	0					
ANR	5428370	Identifier	true		5426957	1					
ANR	5428371	BreakStatement	break ;	301:4:8116:8121	5426957	15	True				
ANR	5428372	Label	default :	302:3:8126:8133	5426957	16	True				
ANR	5428373	Identifier	default		5426957	0					
ANR	5428374	ExpressionStatement	"fprintf ( stderr , ""%s (%d) doesn't make sense for create\\n"" , op -> str , op -> type )"	303:4:8139:8225	5426957	17	True				
ANR	5428375	CallExpression	"fprintf ( stderr , ""%s (%d) doesn't make sense for create\\n"" , op -> str , op -> type )"		5426957	0					
ANR	5428376	Callee	fprintf		5426957	0					
ANR	5428377	Identifier	fprintf		5426957	0					
ANR	5428378	ArgumentList	stderr		5426957	1					
ANR	5428379	Argument	stderr		5426957	0					
ANR	5428380	Identifier	stderr		5426957	0					
ANR	5428381	Argument	"""%s (%d) doesn't make sense for create\\n"""		5426957	1					
ANR	5428382	PrimaryExpression	"""%s (%d) doesn't make sense for create\\n"""		5426957	0					
ANR	5428383	Argument	op -> str		5426957	2					
ANR	5428384	PtrMemberAccess	op -> str		5426957	0					
ANR	5428385	Identifier	op		5426957	0					
ANR	5428386	Identifier	str		5426957	1					
ANR	5428387	Argument	op -> type		5426957	3					
ANR	5428388	PtrMemberAccess	op -> type		5426957	0					
ANR	5428389	Identifier	op		5426957	0					
ANR	5428390	Identifier	type		5426957	1					
ANR	5428391	ExpressionStatement	"printf ( ""%s %s (%d)\\n"" , n1 , rc1 ? ""Failed"" : ""OK"" , rc1 )"	306:3:8235:8289	5426957	11	True				
ANR	5428392	CallExpression	"printf ( ""%s %s (%d)\\n"" , n1 , rc1 ? ""Failed"" : ""OK"" , rc1 )"		5426957	0					
ANR	5428393	Callee	printf		5426957	0					
ANR	5428394	Identifier	printf		5426957	0					
ANR	5428395	ArgumentList	"""%s %s (%d)\\n"""		5426957	1					
ANR	5428396	Argument	"""%s %s (%d)\\n"""		5426957	0					
ANR	5428397	PrimaryExpression	"""%s %s (%d)\\n"""		5426957	0					
ANR	5428398	Argument	n1		5426957	1					
ANR	5428399	Identifier	n1		5426957	0					
ANR	5428400	Argument	"rc1 ? ""Failed"" : ""OK"""		5426957	2					
ANR	5428401	ConditionalExpression	"rc1 ? ""Failed"" : ""OK"""		5426957	0					
ANR	5428402	Condition	rc1		5426957	0					
ANR	5428403	Identifier	rc1		5426957	0					
ANR	5428404	PrimaryExpression	"""Failed"""		5426957	1					
ANR	5428405	PrimaryExpression	"""OK"""		5426957	2					
ANR	5428406	Argument	rc1		5426957	3					
ANR	5428407	Identifier	rc1		5426957	0					
ANR	5428408	IfStatement	if ( op2 )		5426957	12					
ANR	5428409	Condition	op2	307:8:8299:8301	5426957	0	True				
ANR	5428410	Identifier	op2		5426957	0					
ANR	5428411	CompoundStatement		262:14:6755:6755	5426957	1					
ANR	5428412	ExpressionStatement	"printf ( ""%s %s (%d)\\n"" , n2 , rc2 ? ""Failed"" : ""OK"" , rc2 )"	308:4:8311:8365	5426957	0	True				
ANR	5428413	CallExpression	"printf ( ""%s %s (%d)\\n"" , n2 , rc2 ? ""Failed"" : ""OK"" , rc2 )"		5426957	0					
ANR	5428414	Callee	printf		5426957	0					
ANR	5428415	Identifier	printf		5426957	0					
ANR	5428416	ArgumentList	"""%s %s (%d)\\n"""		5426957	1					
ANR	5428417	Argument	"""%s %s (%d)\\n"""		5426957	0					
ANR	5428418	PrimaryExpression	"""%s %s (%d)\\n"""		5426957	0					
ANR	5428419	Argument	n2		5426957	1					
ANR	5428420	Identifier	n2		5426957	0					
ANR	5428421	Argument	"rc2 ? ""Failed"" : ""OK"""		5426957	2					
ANR	5428422	ConditionalExpression	"rc2 ? ""Failed"" : ""OK"""		5426957	0					
ANR	5428423	Condition	rc2		5426957	0					
ANR	5428424	Identifier	rc2		5426957	0					
ANR	5428425	PrimaryExpression	"""Failed"""		5426957	1					
ANR	5428426	PrimaryExpression	"""OK"""		5426957	2					
ANR	5428427	Argument	rc2		5426957	3					
ANR	5428428	Identifier	rc2		5426957	0					
ANR	5428429	ExpressionStatement	"dump_status ( * wrapper , ""Stat results"" )"	311:3:8377:8416	5426957	13	True				
ANR	5428430	CallExpression	"dump_status ( * wrapper , ""Stat results"" )"		5426957	0					
ANR	5428431	Callee	dump_status		5426957	0					
ANR	5428432	Identifier	dump_status		5426957	0					
ANR	5428433	ArgumentList	* wrapper		5426957	1					
ANR	5428434	Argument	* wrapper		5426957	0					
ANR	5428435	UnaryOperationExpression	* wrapper		5426957	0					
ANR	5428436	UnaryOperator	*		5426957	0					
ANR	5428437	Identifier	wrapper		5426957	1					
ANR	5428438	Argument	"""Stat results"""		5426957	1					
ANR	5428439	PrimaryExpression	"""Stat results"""		5426957	0					
ANR	5428440	ElseStatement	else		5426957	0					
ANR	5428441	IfStatement	"if ( ( ! strcmp ( arg , ""--retry"" ) ) || ( ! strcmp ( arg , ""-r"" ) ) )"		5426957	0					
ANR	5428442	Condition	"( ! strcmp ( arg , ""--retry"" ) ) || ( ! strcmp ( arg , ""-r"" ) )"	314:12:8435:8486	5426957	0	True				
ANR	5428443	OrExpression	"( ! strcmp ( arg , ""--retry"" ) ) || ( ! strcmp ( arg , ""-r"" ) )"		5426957	0		||			
ANR	5428444	UnaryOperationExpression	"! strcmp ( arg , ""--retry"" )"		5426957	0					
ANR	5428445	UnaryOperator	!		5426957	0					
ANR	5428446	CallExpression	"strcmp ( arg , ""--retry"" )"		5426957	1					
ANR	5428447	Callee	strcmp		5426957	0					
ANR	5428448	Identifier	strcmp		5426957	0					
ANR	5428449	ArgumentList	arg		5426957	1					
ANR	5428450	Argument	arg		5426957	0					
ANR	5428451	Identifier	arg		5426957	0					
ANR	5428452	Argument	"""--retry"""		5426957	1					
ANR	5428453	PrimaryExpression	"""--retry"""		5426957	0					
ANR	5428454	UnaryOperationExpression	"! strcmp ( arg , ""-r"" )"		5426957	1					
ANR	5428455	UnaryOperator	!		5426957	0					
ANR	5428456	CallExpression	"strcmp ( arg , ""-r"" )"		5426957	1					
ANR	5428457	Callee	strcmp		5426957	0					
ANR	5428458	Identifier	strcmp		5426957	0					
ANR	5428459	ArgumentList	arg		5426957	1					
ANR	5428460	Argument	arg		5426957	0					
ANR	5428461	Identifier	arg		5426957	0					
ANR	5428462	Argument	"""-r"""		5426957	1					
ANR	5428463	PrimaryExpression	"""-r"""		5426957	0					
ANR	5428464	CompoundStatement		275:3:7043:7070	5426957	1					
ANR	5428465	IfStatement	if ( ! wrapper )		5426957	0					
ANR	5428466	Condition	! wrapper	315:8:8500:8507	5426957	0	True				
ANR	5428467	UnaryOperationExpression	! wrapper		5426957	0					
ANR	5428468	UnaryOperator	!		5426957	0					
ANR	5428469	Identifier	wrapper		5426957	1					
ANR	5428470	CompoundStatement		270:19:6961:6961	5426957	1					
ANR	5428471	ExpressionStatement	"fprintf ( stderr , ""--retry: no wrapper object!\\n"" )"	316:4:8517:8567	5426957	0	True				
ANR	5428472	CallExpression	"fprintf ( stderr , ""--retry: no wrapper object!\\n"" )"		5426957	0					
ANR	5428473	Callee	fprintf		5426957	0					
ANR	5428474	Identifier	fprintf		5426957	0					
ANR	5428475	ArgumentList	stderr		5426957	1					
ANR	5428476	Argument	stderr		5426957	0					
ANR	5428477	Identifier	stderr		5426957	0					
ANR	5428478	Argument	"""--retry: no wrapper object!\\n"""		5426957	1					
ANR	5428479	PrimaryExpression	"""--retry: no wrapper object!\\n"""		5426957	0					
ANR	5428480	ExpressionStatement	exit ( 1 )	317:4:8573:8582	5426957	1	True				
ANR	5428481	CallExpression	exit ( 1 )		5426957	0					
ANR	5428482	Callee	exit		5426957	0					
ANR	5428483	Identifier	exit		5426957	0					
ANR	5428484	ArgumentList	1		5426957	1					
ANR	5428485	Argument	1		5426957	0					
ANR	5428486	PrimaryExpression	1		5426957	0					
ANR	5428487	IdentifierDeclStatement	int rc = wrapper -> Retry ( ) ;	320:3:8593:8620	5426957	1	True				
ANR	5428488	IdentifierDecl	rc = wrapper -> Retry ( )		5426957	0					
ANR	5428489	IdentifierDeclType	int		5426957	0					
ANR	5428490	Identifier	rc		5426957	1					
ANR	5428491	AssignmentExpression	rc = wrapper -> Retry ( )		5426957	2		=			
ANR	5428492	Identifier	rc		5426957	0					
ANR	5428493	CallExpression	wrapper -> Retry ( )		5426957	1					
ANR	5428494	Callee	wrapper -> Retry		5426957	0					
ANR	5428495	PtrMemberAccess	wrapper -> Retry		5426957	0					
ANR	5428496	Identifier	wrapper		5426957	0					
ANR	5428497	Identifier	Retry		5426957	1					
ANR	5428498	ArgumentList			5426957	1					
ANR	5428499	ExpressionStatement	"printf ( ""Retry %s: %d\\n"" , rc ? ""Failed"" : ""OK"" , rc )"	321:3:8625:8675	5426957	2	True				
ANR	5428500	CallExpression	"printf ( ""Retry %s: %d\\n"" , rc ? ""Failed"" : ""OK"" , rc )"		5426957	0					
ANR	5428501	Callee	printf		5426957	0					
ANR	5428502	Identifier	printf		5426957	0					
ANR	5428503	ArgumentList	"""Retry %s: %d\\n"""		5426957	1					
ANR	5428504	Argument	"""Retry %s: %d\\n"""		5426957	0					
ANR	5428505	PrimaryExpression	"""Retry %s: %d\\n"""		5426957	0					
ANR	5428506	Argument	"rc ? ""Failed"" : ""OK"""		5426957	1					
ANR	5428507	ConditionalExpression	"rc ? ""Failed"" : ""OK"""		5426957	0					
ANR	5428508	Condition	rc		5426957	0					
ANR	5428509	Identifier	rc		5426957	0					
ANR	5428510	PrimaryExpression	"""Failed"""		5426957	1					
ANR	5428511	PrimaryExpression	"""OK"""		5426957	2					
ANR	5428512	Argument	rc		5426957	2					
ANR	5428513	Identifier	rc		5426957	0					
ANR	5428514	ExpressionStatement	"dump_status ( * wrapper , ""Retry results"" )"	323:3:8681:8721	5426957	3	True				
ANR	5428515	CallExpression	"dump_status ( * wrapper , ""Retry results"" )"		5426957	0					
ANR	5428516	Callee	dump_status		5426957	0					
ANR	5428517	Identifier	dump_status		5426957	0					
ANR	5428518	ArgumentList	* wrapper		5426957	1					
ANR	5428519	Argument	* wrapper		5426957	0					
ANR	5428520	UnaryOperationExpression	* wrapper		5426957	0					
ANR	5428521	UnaryOperator	*		5426957	0					
ANR	5428522	Identifier	wrapper		5426957	1					
ANR	5428523	Argument	"""Retry results"""		5426957	1					
ANR	5428524	PrimaryExpression	"""Retry results"""		5426957	0					
ANR	5428525	ElseStatement	else		5426957	0					
ANR	5428526	IfStatement	"if ( ( ! strcmp ( arg , ""--query"" ) ) || ( ! strcmp ( arg , ""-q"" ) ) )"		5426957	0					
ANR	5428527	Condition	"( ! strcmp ( arg , ""--query"" ) ) || ( ! strcmp ( arg , ""-q"" ) )"	326:12:8740:8791	5426957	0	True				
ANR	5428528	OrExpression	"( ! strcmp ( arg , ""--query"" ) ) || ( ! strcmp ( arg , ""-q"" ) )"		5426957	0		||			
ANR	5428529	UnaryOperationExpression	"! strcmp ( arg , ""--query"" )"		5426957	0					
ANR	5428530	UnaryOperator	!		5426957	0					
ANR	5428531	CallExpression	"strcmp ( arg , ""--query"" )"		5426957	1					
ANR	5428532	Callee	strcmp		5426957	0					
ANR	5428533	Identifier	strcmp		5426957	0					
ANR	5428534	ArgumentList	arg		5426957	1					
ANR	5428535	Argument	arg		5426957	0					
ANR	5428536	Identifier	arg		5426957	0					
ANR	5428537	Argument	"""--query"""		5426957	1					
ANR	5428538	PrimaryExpression	"""--query"""		5426957	0					
ANR	5428539	UnaryOperationExpression	"! strcmp ( arg , ""-q"" )"		5426957	1					
ANR	5428540	UnaryOperator	!		5426957	0					
ANR	5428541	CallExpression	"strcmp ( arg , ""-q"" )"		5426957	1					
ANR	5428542	Callee	strcmp		5426957	0					
ANR	5428543	Identifier	strcmp		5426957	0					
ANR	5428544	ArgumentList	arg		5426957	1					
ANR	5428545	Argument	arg		5426957	0					
ANR	5428546	Identifier	arg		5426957	0					
ANR	5428547	Argument	"""-q"""		5426957	1					
ANR	5428548	PrimaryExpression	"""-q"""		5426957	0					
ANR	5428549	CompoundStatement		281:67:7245:7245	5426957	1					
ANR	5428550	IfStatement	if ( ! wrapper )		5426957	0					
ANR	5428551	Condition	! wrapper	327:8:8805:8812	5426957	0	True				
ANR	5428552	UnaryOperationExpression	! wrapper		5426957	0					
ANR	5428553	UnaryOperator	!		5426957	0					
ANR	5428554	Identifier	wrapper		5426957	1					
ANR	5428555	CompoundStatement		282:19:7266:7266	5426957	1					
ANR	5428556	ExpressionStatement	"fprintf ( stderr , ""--query: no wrapper object!\\n"" )"	328:4:8822:8872	5426957	0	True				
ANR	5428557	CallExpression	"fprintf ( stderr , ""--query: no wrapper object!\\n"" )"		5426957	0					
ANR	5428558	Callee	fprintf		5426957	0					
ANR	5428559	Identifier	fprintf		5426957	0					
ANR	5428560	ArgumentList	stderr		5426957	1					
ANR	5428561	Argument	stderr		5426957	0					
ANR	5428562	Identifier	stderr		5426957	0					
ANR	5428563	Argument	"""--query: no wrapper object!\\n"""		5426957	1					
ANR	5428564	PrimaryExpression	"""--query: no wrapper object!\\n"""		5426957	0					
ANR	5428565	ExpressionStatement	exit ( 1 )	329:4:8878:8887	5426957	1	True				
ANR	5428566	CallExpression	exit ( 1 )		5426957	0					
ANR	5428567	Callee	exit		5426957	0					
ANR	5428568	Identifier	exit		5426957	0					
ANR	5428569	ArgumentList	1		5426957	1					
ANR	5428570	Argument	1		5426957	0					
ANR	5428571	PrimaryExpression	1		5426957	0					
ANR	5428572	ExpressionStatement	"dump_status ( * wrapper , ""Query results"" )"	332:3:8898:8938	5426957	1	True				
ANR	5428573	CallExpression	"dump_status ( * wrapper , ""Query results"" )"		5426957	0					
ANR	5428574	Callee	dump_status		5426957	0					
ANR	5428575	Identifier	dump_status		5426957	0					
ANR	5428576	ArgumentList	* wrapper		5426957	1					
ANR	5428577	Argument	* wrapper		5426957	0					
ANR	5428578	UnaryOperationExpression	* wrapper		5426957	0					
ANR	5428579	UnaryOperator	*		5426957	0					
ANR	5428580	Identifier	wrapper		5426957	1					
ANR	5428581	Argument	"""Query results"""		5426957	1					
ANR	5428582	PrimaryExpression	"""Query results"""		5426957	0					
ANR	5428583	ElseStatement	else		5426957	0					
ANR	5428584	CompoundStatement		290:7:7402:7402	5426957	0					
ANR	5428585	ExpressionStatement	"fprintf ( stderr , ""Unknown command %s\\n"" , arg )"	336:3:8957:9003	5426957	0	True				
ANR	5428586	CallExpression	"fprintf ( stderr , ""Unknown command %s\\n"" , arg )"		5426957	0					
ANR	5428587	Callee	fprintf		5426957	0					
ANR	5428588	Identifier	fprintf		5426957	0					
ANR	5428589	ArgumentList	stderr		5426957	1					
ANR	5428590	Argument	stderr		5426957	0					
ANR	5428591	Identifier	stderr		5426957	0					
ANR	5428592	Argument	"""Unknown command %s\\n"""		5426957	1					
ANR	5428593	PrimaryExpression	"""Unknown command %s\\n"""		5426957	0					
ANR	5428594	Argument	arg		5426957	2					
ANR	5428595	Identifier	arg		5426957	0					
ANR	5428596	ReturnStatement	return 0 ;	340:1:9014:9022	5426957	12	True				
ANR	5428597	PrimaryExpression	0		5426957	0					
ANR	5428598	ReturnType	int		5426957	1					
ANR	5428599	Identifier	main		5426957	2					
ANR	5428600	ParameterList	"int argc , const char * argv [ ]"		5426957	3					
ANR	5428601	Parameter	int argc	45:6:1518:1525	5426957	0	True				
ANR	5428602	ParameterType	int		5426957	0					
ANR	5428603	Identifier	argc		5426957	1					
ANR	5428604	Parameter	const char * argv [ ]	45:16:1528:1545	5426957	1	True				
ANR	5428605	ParameterType	const char * [ ]		5426957	0					
ANR	5428606	Identifier	argv		5426957	1					
ANR	5428607	CFGEntryNode	ENTRY		5426957		True				
ANR	5428608	CFGExitNode	EXIT		5426957		True				
ANR	5428609	Symbol	wrapper -> Stat		5426957						
ANR	5428610	Symbol	n1		5426957						
ANR	5428611	Symbol	* op		5426957						
ANR	5428612	Symbol	n2		5426957						
ANR	5428613	Symbol	usage		5426957						
ANR	5428614	Symbol	wrapper -> SetPath		5426957						
ANR	5428615	Symbol	wrapper		5426957						
ANR	5428616	Symbol	* argv		5426957						
ANR	5428617	Symbol	StatWrapper :: STATOP_LSTAT		5426957						
ANR	5428618	Symbol	wrapper -> GetStatFn		5426957						
ANR	5428619	Symbol	path		5426957						
ANR	5428620	Symbol	force_set		5426957						
ANR	5428621	Symbol	* * argv		5426957						
ANR	5428622	Symbol	argno		5426957						
ANR	5428623	Symbol	strcasecmp		5426957						
ANR	5428624	Symbol	strcmp		5426957						
ANR	5428625	Symbol	which		5426957						
ANR	5428626	Symbol	rc2		5426957						
ANR	5428627	Symbol	rc1		5426957						
ANR	5428628	Symbol	NULL		5426957						
ANR	5428629	Symbol	op -> type		5426957						
ANR	5428630	Symbol	StatWrapper :: STATOP_ALL		5426957						
ANR	5428631	Symbol	stderr		5426957						
ANR	5428632	Symbol	arg3		5426957						
ANR	5428633	Symbol	get_op_name		5426957						
ANR	5428634	Symbol	arg2		5426957						
ANR	5428635	Symbol	rc		5426957						
ANR	5428636	Symbol	StatWrapper :: STATOP_BOTH		5426957						
ANR	5428637	Symbol	arg1		5426957						
ANR	5428638	Symbol	* argv [ argno + 3 ]		5426957						
ANR	5428639	Symbol	name		5426957						
ANR	5428640	Symbol	true		5426957						
ANR	5428641	Symbol	* which		5426957						
ANR	5428642	Symbol	* argv [ argno + 1 ]		5426957						
ANR	5428643	Symbol	force		5426957						
ANR	5428644	Symbol	fd		5426957						
ANR	5428645	Symbol	which -> type		5426957						
ANR	5428646	Symbol	opint		5426957						
ANR	5428647	Symbol	safe_open_wrapper_follow		5426957						
ANR	5428648	Symbol	StatWrapper :: STATOP_FSTAT		5426957						
ANR	5428649	Symbol	StatWrapper :: STATOP_MIN		5426957						
ANR	5428650	Symbol	fn		5426957						
ANR	5428651	Symbol	skip		5426957						
ANR	5428652	Symbol	* argno		5426957						
ANR	5428653	Symbol	argv		5426957						
ANR	5428654	Symbol	opno		5426957						
ANR	5428655	Symbol	arg		5426957						
ANR	5428656	Symbol	StatWrapper :: STATOP_STAT		5426957						
ANR	5428657	Symbol	StatWrapper :: STATOP_MAX		5426957						
ANR	5428658	Symbol	op -> str		5426957						
ANR	5428659	Symbol	argc		5426957						
ANR	5428660	Symbol	op		5426957						
ANR	5428661	Symbol	auto_stat		5426957						
ANR	5428662	Symbol	get_op		5426957						
ANR	5428663	Symbol	* wrapper		5426957						
ANR	5428664	Symbol	* * argno		5426957						
ANR	5428665	Symbol	false		5426957						
ANR	5428666	Symbol	n		5426957						
ANR	5428667	Symbol	op2		5426957						
ANR	5428668	Symbol	O_RDONLY		5426957						
ANR	5428669	Symbol	wrapper -> SetFD		5426957						
ANR	5428670	Symbol	* path		5426957						
ANR	5428671	Symbol	* argv [ argno + 2 ]		5426957						
ANR	5428672	Symbol	wrapper -> Retry		5426957						
ANR	5428673	Function	Help	343:0:9027:9784							
ANR	5428674	FunctionDef	Help (const char * argv0)		5428673	0					
ANR	5428675	CompoundStatement		345:0:9065:9784	5428673	0					
ANR	5428676	Statement	printf	346:1:9068:9073	5428673	0	True				
ANR	5428677	Statement	(	346:7:9074:9074	5428673	1	True				
ANR	5428678	Statement	"""usage: %s <file> [-command <flags>] [..]\\n"""	346:9:9076:9119	5428673	2	True				
ANR	5428679	Statement	"""  commands:\\n"""	347:3:9124:9138	5428673	3	True				
ANR	5428680	Statement	"""  --create|-c <op> <which>         """	348:3:9143:9179	5428673	4	True				
ANR	5428681	Statement	"""Create a StatWrapper object\\n"""	349:3:9184:9214	5428673	5	True				
ANR	5428682	Statement	"""  --set|-c <op>                    """	350:3:9219:9255	5428673	6	True				
ANR	5428683	Statement	"""Setup a StatWrapper object\\n"""	351:3:9260:9289	5428673	7	True				
ANR	5428684	Statement	"""  --stat|-s <op> <which> [f[orce]|no]"""	352:3:9294:9332	5428673	8	True				
ANR	5428685	Statement	"""Do the actual stat (optional force) \\n"""	353:3:9337:9376	5428673	9	True				
ANR	5428686	Statement	"""  --retry                          """	354:3:9381:9417	5428673	10	True				
ANR	5428687	Statement	"""Retry last operation\\n"""	355:3:9422:9445	5428673	11	True				
ANR	5428688	Statement	"""  --query                          """	356:3:9450:9486	5428673	12	True				
ANR	5428689	Statement	"""Query status of object\\n"""	357:3:9491:9516	5428673	13	True				
ANR	5428690	Statement	"""  <op>: Type of operation:         """	358:3:9521:9557	5428673	14	True				
ANR	5428691	Statement	"""NONE,STAT,LSTAT,BOTH,FSTAT,ALL,LAST\\n"""	359:3:9562:9600	5428673	15	True				
ANR	5428692	Statement	"""  <which>: Which for operation:    """	360:3:9605:9641	5428673	16	True				
ANR	5428693	Statement	"""NONE,STAT,LSTAT,BOTH,FSTAT,ALL,LAST\\n"""	361:3:9646:9684	5428673	17	True				
ANR	5428694	Statement	"""  --path <path>                    """	362:3:9689:9725	5428673	18	True				
ANR	5428695	Statement	"""  <path> specify a new path\\n"""	363:3:9730:9760	5428673	19	True				
ANR	5428696	Statement	""""""	364:3:9765:9766	5428673	20	True				
ANR	5428697	Statement	","	364:5:9767:9767	5428673	21	True				
ANR	5428698	Statement	argv0	365:3:9772:9776	5428673	22	True				
ANR	5428699	Statement	)	366:3:9781:9781	5428673	23	True				
ANR	5428700	ExpressionStatement		366:4:9782:9782	5428673	24	True				
ANR	5428701	ReturnType	static void		5428673	1					
ANR	5428702	Identifier	Help		5428673	2					
ANR	5428703	ParameterList	const char * argv0		5428673	3					
ANR	5428704	Parameter	const char * argv0	344:6:9045:9061	5428673	0	True				
ANR	5428705	ParameterType	const char *		5428673	0					
ANR	5428706	Identifier	argv0		5428673	1					
ANR	5428707	CFGEntryNode	ENTRY		5428673		True				
ANR	5428708	CFGExitNode	EXIT		5428673		True				
ANR	5428709	Symbol	argv0		5428673						
ANR	5428710	Function	dump_status	369:0:9788:10941							
ANR	5428711	FunctionDef	"dump_status (StatWrapper & stat , const char * label)"		5428710	0					
ANR	5428712	CompoundStatement		371:0:9852:10941	5428710	0					
ANR	5428713	IdentifierDeclStatement	int opint ;	372:1:9855:9864	5428710	0	True				
ANR	5428714	IdentifierDecl	opint		5428710	0					
ANR	5428715	IdentifierDeclType	int		5428710	0					
ANR	5428716	Identifier	opint		5428710	1					
ANR	5428717	ForStatement	for ( opint = StatWrapper :: STATOP_MIN ; opint <= StatWrapper :: STATOP_MAX ; opint ++ )		5428710	1					
ANR	5428718	ForInit	opint = StatWrapper :: STATOP_MIN ;	373:6:9872:9903	5428710	0	True				
ANR	5428719	AssignmentExpression	opint = StatWrapper :: STATOP_MIN		5428710	0		=			
ANR	5428720	Identifier	opint		5428710	0					
ANR	5428721	Identifier	StatWrapper :: STATOP_MIN		5428710	1					
ANR	5428722	Condition	opint <= StatWrapper :: STATOP_MAX	374:3:9908:9939	5428710	1	True				
ANR	5428723	RelationalExpression	opint <= StatWrapper :: STATOP_MAX		5428710	0		<=			
ANR	5428724	Identifier	opint		5428710	0					
ANR	5428725	Identifier	StatWrapper :: STATOP_MAX		5428710	1					
ANR	5428726	PostIncDecOperationExpression	opint ++	375:3:9945:9951	5428710	2	True				
ANR	5428727	Identifier	opint		5428710	0					
ANR	5428728	IncDec	++		5428710	1					
ANR	5428729	CompoundStatement		19:2:398:425	5428710	3					
ANR	5428730	IdentifierDeclStatement	StatWrapper :: StatOpType opno = ( StatWrapper :: StatOpType ) opint ;	377:2:9960:10022	5428710	0	True				
ANR	5428731	IdentifierDecl	opno = ( StatWrapper :: StatOpType ) opint		5428710	0					
ANR	5428732	IdentifierDeclType	StatWrapper :: StatOpType		5428710	0					
ANR	5428733	Identifier	opno		5428710	1					
ANR	5428734	AssignmentExpression	opno = ( StatWrapper :: StatOpType ) opint		5428710	2		=			
ANR	5428735	Identifier	opno		5428710	0					
ANR	5428736	CastExpression	( StatWrapper :: StatOpType ) opint		5428710	1					
ANR	5428737	CastTarget	StatWrapper :: StatOpType		5428710	0					
ANR	5428738	Identifier	opint		5428710	1					
ANR	5428739	IdentifierDeclStatement	const char * fn = stat . GetStatFn ( opno ) ;	379:2:10027:10066	5428710	1	True				
ANR	5428740	IdentifierDecl	* fn = stat . GetStatFn ( opno )		5428710	0					
ANR	5428741	IdentifierDeclType	const char *		5428710	0					
ANR	5428742	Identifier	fn		5428710	1					
ANR	5428743	AssignmentExpression	* fn = stat . GetStatFn ( opno )		5428710	2		=			
ANR	5428744	Identifier	fn		5428710	0					
ANR	5428745	CallExpression	stat . GetStatFn ( opno )		5428710	1					
ANR	5428746	Callee	stat . GetStatFn		5428710	0					
ANR	5428747	MemberAccess	stat . GetStatFn		5428710	0					
ANR	5428748	Identifier	stat		5428710	0					
ANR	5428749	Identifier	GetStatFn		5428710	1					
ANR	5428750	ArgumentList	opno		5428710	1					
ANR	5428751	Argument	opno		5428710	0					
ANR	5428752	Identifier	opno		5428710	0					
ANR	5428753	IfStatement	if ( NULL == fn )		5428710	2					
ANR	5428754	Condition	NULL == fn	380:7:10075:10084	5428710	0	True				
ANR	5428755	EqualityExpression	NULL == fn		5428710	0		==			
ANR	5428756	Identifier	NULL		5428710	0					
ANR	5428757	Identifier	fn		5428710	1					
ANR	5428758	CompoundStatement		10:20:235:235	5428710	1					
ANR	5428759	ExpressionStatement	"fn = ""<NULL>"""	381:3:10093:10106	5428710	0	True				
ANR	5428760	AssignmentExpression	"fn = ""<NULL>"""		5428710	0		=			
ANR	5428761	Identifier	fn		5428710	0					
ANR	5428762	PrimaryExpression	"""<NULL>"""		5428710	1					
ANR	5428763	IdentifierDeclStatement	const char * name = get_op_name ( opno ) ;	383:2:10114:10153	5428710	3	True				
ANR	5428764	IdentifierDecl	* name = get_op_name ( opno )		5428710	0					
ANR	5428765	IdentifierDeclType	const char *		5428710	0					
ANR	5428766	Identifier	name		5428710	1					
ANR	5428767	AssignmentExpression	* name = get_op_name ( opno )		5428710	2		=			
ANR	5428768	Identifier	name		5428710	0					
ANR	5428769	CallExpression	get_op_name ( opno )		5428710	1					
ANR	5428770	Callee	get_op_name		5428710	0					
ANR	5428771	Identifier	get_op_name		5428710	0					
ANR	5428772	ArgumentList	opno		5428710	1					
ANR	5428773	Argument	opno		5428710	0					
ANR	5428774	Identifier	opno		5428710	0					
ANR	5428775	IdentifierDeclStatement	StatStructType buf ;	384:2:10157:10176	5428710	4	True				
ANR	5428776	IdentifierDecl	buf		5428710	0					
ANR	5428777	IdentifierDeclType	StatStructType		5428710	0					
ANR	5428778	Identifier	buf		5428710	1					
ANR	5428779	IdentifierDeclStatement	int err = 0 ;	385:2:10180:10195	5428710	5	True				
ANR	5428780	IdentifierDecl	err = 0		5428710	0					
ANR	5428781	IdentifierDeclType	int		5428710	0					
ANR	5428782	Identifier	err		5428710	1					
ANR	5428783	AssignmentExpression	err = 0		5428710	2		=			
ANR	5428784	Identifier	err		5428710	0					
ANR	5428785	PrimaryExpression	0		5428710	1					
ANR	5428786	IdentifierDeclStatement	bool valid = false ;	386:2:10199:10220	5428710	6	True				
ANR	5428787	IdentifierDecl	valid = false		5428710	0					
ANR	5428788	IdentifierDeclType	bool		5428710	0					
ANR	5428789	Identifier	valid		5428710	1					
ANR	5428790	AssignmentExpression	valid = false		5428710	2		=			
ANR	5428791	Identifier	false		5428710	0					
ANR	5428792	Identifier	false		5428710	1					
ANR	5428793	IdentifierDeclStatement	bool getbuf = false ;	387:2:10224:10246	5428710	7	True				
ANR	5428794	IdentifierDecl	getbuf = false		5428710	0					
ANR	5428795	IdentifierDeclType	bool		5428710	0					
ANR	5428796	Identifier	getbuf		5428710	1					
ANR	5428797	AssignmentExpression	getbuf = false		5428710	2		=			
ANR	5428798	Identifier	false		5428710	0					
ANR	5428799	Identifier	false		5428710	1					
ANR	5428800	IdentifierDeclStatement	int rc = stat . GetRc ( opno ) ;	389:2:10251:10278	5428710	8	True				
ANR	5428801	IdentifierDecl	rc = stat . GetRc ( opno )		5428710	0					
ANR	5428802	IdentifierDeclType	int		5428710	0					
ANR	5428803	Identifier	rc		5428710	1					
ANR	5428804	AssignmentExpression	rc = stat . GetRc ( opno )		5428710	2		=			
ANR	5428805	Identifier	rc		5428710	0					
ANR	5428806	CallExpression	stat . GetRc ( opno )		5428710	1					
ANR	5428807	Callee	stat . GetRc		5428710	0					
ANR	5428808	MemberAccess	stat . GetRc		5428710	0					
ANR	5428809	Identifier	stat		5428710	0					
ANR	5428810	Identifier	GetRc		5428710	1					
ANR	5428811	ArgumentList	opno		5428710	1					
ANR	5428812	Argument	opno		5428710	0					
ANR	5428813	Identifier	opno		5428710	0					
ANR	5428814	IfStatement	if ( rc )		5428710	9					
ANR	5428815	Condition	rc	390:7:10287:10288	5428710	0	True				
ANR	5428816	Identifier	rc		5428710	0					
ANR	5428817	CompoundStatement		20:12:439:439	5428710	1					
ANR	5428818	ExpressionStatement	err = stat . GetErrno ( opno )	391:3:10297:10324	5428710	0	True				
ANR	5428819	AssignmentExpression	err = stat . GetErrno ( opno )		5428710	0		=			
ANR	5428820	Identifier	err		5428710	0					
ANR	5428821	CallExpression	stat . GetErrno ( opno )		5428710	1					
ANR	5428822	Callee	stat . GetErrno		5428710	0					
ANR	5428823	MemberAccess	stat . GetErrno		5428710	0					
ANR	5428824	Identifier	stat		5428710	0					
ANR	5428825	Identifier	GetErrno		5428710	1					
ANR	5428826	ArgumentList	opno		5428710	1					
ANR	5428827	Argument	opno		5428710	0					
ANR	5428828	Identifier	opno		5428710	0					
ANR	5428829	ExpressionStatement	valid = stat . IsBufValid ( opno )	393:2:10332:10363	5428710	10	True				
ANR	5428830	AssignmentExpression	valid = stat . IsBufValid ( opno )		5428710	0		=			
ANR	5428831	Identifier	valid		5428710	0					
ANR	5428832	CallExpression	stat . IsBufValid ( opno )		5428710	1					
ANR	5428833	Callee	stat . IsBufValid		5428710	0					
ANR	5428834	MemberAccess	stat . IsBufValid		5428710	0					
ANR	5428835	Identifier	stat		5428710	0					
ANR	5428836	Identifier	IsBufValid		5428710	1					
ANR	5428837	ArgumentList	opno		5428710	1					
ANR	5428838	Argument	opno		5428710	0					
ANR	5428839	Identifier	opno		5428710	0					
ANR	5428840	IfStatement	if ( valid )		5428710	11					
ANR	5428841	Condition	valid	394:6:10371:10375	5428710	0	True				
ANR	5428842	Identifier	valid		5428710	0					
ANR	5428843	CompoundStatement		24:14:526:526	5428710	1					
ANR	5428844	ExpressionStatement	"getbuf = stat . GetBuf ( buf , opno )"	395:3:10384:10417	5428710	0	True				
ANR	5428845	AssignmentExpression	"getbuf = stat . GetBuf ( buf , opno )"		5428710	0		=			
ANR	5428846	Identifier	getbuf		5428710	0					
ANR	5428847	CallExpression	"stat . GetBuf ( buf , opno )"		5428710	1					
ANR	5428848	Callee	stat . GetBuf		5428710	0					
ANR	5428849	MemberAccess	stat . GetBuf		5428710	0					
ANR	5428850	Identifier	stat		5428710	0					
ANR	5428851	Identifier	GetBuf		5428710	1					
ANR	5428852	ArgumentList	buf		5428710	1					
ANR	5428853	Argument	buf		5428710	0					
ANR	5428854	Identifier	buf		5428710	0					
ANR	5428855	Argument	opno		5428710	1					
ANR	5428856	Identifier	opno		5428710	0					
ANR	5428857	ExpressionStatement	"printf ( ""  %s %s: fn=%s; rc=%d errno=%d valid=%s getbuf=%s\\n"" , label , name , fn , rc , err , valid ? ""true"" : ""false"" , getbuf ? ""true"" : ""false"" )"	398:2:10426:10572	5428710	12	True				
ANR	5428858	CallExpression	"printf ( ""  %s %s: fn=%s; rc=%d errno=%d valid=%s getbuf=%s\\n"" , label , name , fn , rc , err , valid ? ""true"" : ""false"" , getbuf ? ""true"" : ""false"" )"		5428710	0					
ANR	5428859	Callee	printf		5428710	0					
ANR	5428860	Identifier	printf		5428710	0					
ANR	5428861	ArgumentList	"""  %s %s: fn=%s; rc=%d errno=%d valid=%s getbuf=%s\\n"""		5428710	1					
ANR	5428862	Argument	"""  %s %s: fn=%s; rc=%d errno=%d valid=%s getbuf=%s\\n"""		5428710	0					
ANR	5428863	PrimaryExpression	"""  %s %s: fn=%s; rc=%d errno=%d valid=%s getbuf=%s\\n"""		5428710	0					
ANR	5428864	Argument	label		5428710	1					
ANR	5428865	Identifier	label		5428710	0					
ANR	5428866	Argument	name		5428710	2					
ANR	5428867	Identifier	name		5428710	0					
ANR	5428868	Argument	fn		5428710	3					
ANR	5428869	Identifier	fn		5428710	0					
ANR	5428870	Argument	rc		5428710	4					
ANR	5428871	Identifier	rc		5428710	0					
ANR	5428872	Argument	err		5428710	5					
ANR	5428873	Identifier	err		5428710	0					
ANR	5428874	Argument	"valid ? ""true"" : ""false"""		5428710	6					
ANR	5428875	ConditionalExpression	"valid ? ""true"" : ""false"""		5428710	0					
ANR	5428876	Condition	valid		5428710	0					
ANR	5428877	Identifier	valid		5428710	0					
ANR	5428878	PrimaryExpression	"""true"""		5428710	1					
ANR	5428879	PrimaryExpression	"""false"""		5428710	2					
ANR	5428880	Argument	"getbuf ? ""true"" : ""false"""		5428710	7					
ANR	5428881	ConditionalExpression	"getbuf ? ""true"" : ""false"""		5428710	0					
ANR	5428882	Condition	getbuf		5428710	0					
ANR	5428883	Identifier	getbuf		5428710	0					
ANR	5428884	PrimaryExpression	"""true"""		5428710	1					
ANR	5428885	PrimaryExpression	"""false"""		5428710	2					
ANR	5428886	IfStatement	if ( valid )		5428710	13					
ANR	5428887	Condition	valid	401:7:10581:10585	5428710	0	True				
ANR	5428888	Identifier	valid		5428710	0					
ANR	5428889	CompoundStatement		31:15:736:736	5428710	1					
ANR	5428890	Statement	printf	402:3:10594:10599	5428710	0	True				
ANR	5428891	Statement	(	402:9:10600:10600	5428710	1	True				
ANR	5428892	Statement	"""    buf: dev=%d ino=%u mode=%03o nlink=%d ids=%d/%d\\n"""	402:11:10602:10656	5428710	2	True				
ANR	5428893	Statement	"""         size=%lld a/m/ctime=%d/%d/%d\\n"""	403:5:10663:10703	5428710	3	True				
ANR	5428894	Statement	","	403:46:10704:10704	5428710	4	True				
ANR	5428895	Statement	(	404:5:10711:10711	5428710	5	True				
ANR	5428896	Statement	int	404:6:10712:10714	5428710	6	True				
ANR	5428897	Statement	)	404:9:10715:10715	5428710	7	True				
ANR	5428898	Statement	buf	404:10:10716:10718	5428710	8	True				
ANR	5428899	Statement	.	404:13:10719:10719	5428710	9	True				
ANR	5428900	Statement	st_dev	404:14:10720:10725	5428710	10	True				
ANR	5428901	Statement	","	404:20:10726:10726	5428710	11	True				
ANR	5428902	Statement	(	405:5:10733:10733	5428710	12	True				
ANR	5428903	Statement	unsigned	405:6:10734:10741	5428710	13	True				
ANR	5428904	Statement	)	405:14:10742:10742	5428710	14	True				
ANR	5428905	Statement	buf	405:15:10743:10745	5428710	15	True				
ANR	5428906	Statement	.	405:18:10746:10746	5428710	16	True				
ANR	5428907	Statement	st_ino	405:19:10747:10752	5428710	17	True				
ANR	5428908	Statement	","	405:25:10753:10753	5428710	18	True				
ANR	5428909	Statement	(	405:27:10755:10755	5428710	19	True				
ANR	5428910	Statement	unsigned	405:28:10756:10763	5428710	20	True				
ANR	5428911	Statement	)	405:36:10764:10764	5428710	21	True				
ANR	5428912	Statement	buf	405:37:10765:10767	5428710	22	True				
ANR	5428913	Statement	.	405:40:10768:10768	5428710	23	True				
ANR	5428914	Statement	st_mode	405:41:10769:10775	5428710	24	True				
ANR	5428915	Statement	","	405:48:10776:10776	5428710	25	True				
ANR	5428916	Statement	(	406:5:10783:10783	5428710	26	True				
ANR	5428917	Statement	int	406:6:10784:10786	5428710	27	True				
ANR	5428918	Statement	)	406:9:10787:10787	5428710	28	True				
ANR	5428919	Statement	buf	406:10:10788:10790	5428710	29	True				
ANR	5428920	Statement	.	406:13:10791:10791	5428710	30	True				
ANR	5428921	Statement	st_nlink	406:14:10792:10799	5428710	31	True				
ANR	5428922	Statement	","	406:22:10800:10800	5428710	32	True				
ANR	5428923	Statement	(	407:5:10807:10807	5428710	33	True				
ANR	5428924	Statement	int	407:6:10808:10810	5428710	34	True				
ANR	5428925	Statement	)	407:9:10811:10811	5428710	35	True				
ANR	5428926	Statement	buf	407:10:10812:10814	5428710	36	True				
ANR	5428927	Statement	.	407:13:10815:10815	5428710	37	True				
ANR	5428928	Statement	st_uid	407:14:10816:10821	5428710	38	True				
ANR	5428929	Statement	","	407:20:10822:10822	5428710	39	True				
ANR	5428930	Statement	(	407:22:10824:10824	5428710	40	True				
ANR	5428931	Statement	int	407:23:10825:10827	5428710	41	True				
ANR	5428932	Statement	)	407:26:10828:10828	5428710	42	True				
ANR	5428933	Statement	buf	407:27:10829:10831	5428710	43	True				
ANR	5428934	Statement	.	407:30:10832:10832	5428710	44	True				
ANR	5428935	Statement	st_gid	407:31:10833:10838	5428710	45	True				
ANR	5428936	Statement	","	407:37:10839:10839	5428710	46	True				
ANR	5428937	Statement	(	408:5:10846:10846	5428710	47	True				
ANR	5428938	Statement	long	408:6:10847:10850	5428710	48	True				
ANR	5428939	Statement	long	408:11:10852:10855	5428710	49	True				
ANR	5428940	Statement	)	408:15:10856:10856	5428710	50	True				
ANR	5428941	Statement	buf	408:16:10857:10859	5428710	51	True				
ANR	5428942	Statement	.	408:19:10860:10860	5428710	52	True				
ANR	5428943	Statement	st_size	408:20:10861:10867	5428710	53	True				
ANR	5428944	Statement	","	408:27:10868:10868	5428710	54	True				
ANR	5428945	Statement	(	409:5:10875:10875	5428710	55	True				
ANR	5428946	Statement	int	409:6:10876:10878	5428710	56	True				
ANR	5428947	Statement	)	409:9:10879:10879	5428710	57	True				
ANR	5428948	Statement	buf	409:10:10880:10882	5428710	58	True				
ANR	5428949	Statement	.	409:13:10883:10883	5428710	59	True				
ANR	5428950	Statement	st_atime	409:14:10884:10891	5428710	60	True				
ANR	5428951	Statement	","	409:22:10892:10892	5428710	61	True				
ANR	5428952	Statement	(	409:24:10894:10894	5428710	62	True				
ANR	5428953	Statement	int	409:25:10895:10897	5428710	63	True				
ANR	5428954	Statement	)	409:28:10898:10898	5428710	64	True				
ANR	5428955	Statement	buf	409:29:10899:10901	5428710	65	True				
ANR	5428956	Statement	.	409:32:10902:10902	5428710	66	True				
ANR	5428957	Statement	st_mtime	409:33:10903:10910	5428710	67	True				
ANR	5428958	Statement	","	409:41:10911:10911	5428710	68	True				
ANR	5428959	Statement	(	409:43:10913:10913	5428710	69	True				
ANR	5428960	Statement	int	409:44:10914:10916	5428710	70	True				
ANR	5428961	Statement	)	409:47:10917:10917	5428710	71	True				
ANR	5428962	Statement	buf	409:48:10918:10920	5428710	72	True				
ANR	5428963	Statement	.	409:51:10921:10921	5428710	73	True				
ANR	5428964	Statement	st_ctime	409:52:10922:10929	5428710	74	True				
ANR	5428965	Statement	)	409:61:10931:10931	5428710	75	True				
ANR	5428966	ExpressionStatement		409:62:10932:10932	5428710	76	True				
ANR	5428967	ReturnType	static void		5428710	1					
ANR	5428968	Identifier	dump_status		5428710	2					
ANR	5428969	ParameterList	"StatWrapper & stat , const char * label"		5428710	3					
ANR	5428970	Parameter	StatWrapper & stat	370:13:9813:9829	5428710	0	True				
ANR	5428971	ParameterType	StatWrapper &		5428710	0					
ANR	5428972	Identifier	stat		5428710	1					
ANR	5428973	Parameter	const char * label	370:32:9832:9848	5428710	1	True				
ANR	5428974	ParameterType	const char *		5428710	0					
ANR	5428975	Identifier	label		5428710	1					
ANR	5428976	CFGEntryNode	ENTRY		5428710		True				
ANR	5428977	CFGExitNode	EXIT		5428710		True				
ANR	5428978	Symbol	stat		5428710						
ANR	5428979	Symbol	NULL		5428710						
ANR	5428980	Symbol	err		5428710						
ANR	5428981	Symbol	StatWrapper :: STATOP_MIN		5428710						
ANR	5428982	Symbol	fn		5428710						
ANR	5428983	Symbol	false		5428710						
ANR	5428984	Symbol	stat . GetErrno		5428710						
ANR	5428985	Symbol	label		5428710						
ANR	5428986	Symbol	stat . IsBufValid		5428710						
ANR	5428987	Symbol	get_op_name		5428710						
ANR	5428988	Symbol	valid		5428710						
ANR	5428989	Symbol	rc		5428710						
ANR	5428990	Symbol	buf		5428710						
ANR	5428991	Symbol	stat . GetRc		5428710						
ANR	5428992	Symbol	getbuf		5428710						
ANR	5428993	Symbol	opno		5428710						
ANR	5428994	Symbol	name		5428710						
ANR	5428995	Symbol	StatWrapper :: STATOP_MAX		5428710						
ANR	5428996	Symbol	stat . GetStatFn		5428710						
ANR	5428997	Symbol	stat . GetBuf		5428710						
ANR	5428998	Symbol	opint		5428710						
ANR	5428999	Function	get_op	414:0:10944:11165							
ANR	5429000	FunctionDef	get_op (const char * str)		5428999	0					
ANR	5429001	CompoundStatement		416:0:10992:11165	5428999	0					
ANR	5429002	IfStatement	if ( NULL == str )		5428999	0					
ANR	5429003	Condition	NULL == str	418:6:11001:11011	5428999	0	True				
ANR	5429004	EqualityExpression	NULL == str		5428999	0		==			
ANR	5429005	Identifier	NULL		5428999	0					
ANR	5429006	Identifier	str		5428999	1					
ANR	5429007	CompoundStatement		3:20:22:22	5428999	1					
ANR	5429008	ReturnStatement	return & Ops [ 0 ] ;	419:2:11019:11033	5428999	0	True				
ANR	5429009	UnaryOperationExpression	& Ops [ 0 ]		5428999	0					
ANR	5429010	UnaryOperator	&		5428999	0					
ANR	5429011	ArrayIndexing	Ops [ 0 ]		5428999	1					
ANR	5429012	Identifier	Ops		5428999	0					
ANR	5429013	PrimaryExpression	0		5428999	1					
ANR	5429014	ForStatement	for ( const StatOp * op = Ops ; op -> str ; op ++ )		5428999	1					
ANR	5429015	ForInit	const StatOp * op = Ops ;	422:6:11045:11067	5428999	0	True				
ANR	5429016	IdentifierDeclStatement	const StatOp * op = Ops ;		5428999	0					
ANR	5429017	IdentifierDecl	* op = Ops		5428999	0					
ANR	5429018	IdentifierDeclType	const StatOp *		5428999	0					
ANR	5429019	Identifier	op		5428999	1					
ANR	5429020	AssignmentExpression	* op = Ops		5428999	2		=			
ANR	5429021	Identifier	Ops		5428999	0					
ANR	5429022	Identifier	Ops		5428999	1					
ANR	5429023	Condition	op -> str	422:30:11069:11075	5428999	1	True				
ANR	5429024	PtrMemberAccess	op -> str		5428999	0					
ANR	5429025	Identifier	op		5428999	0					
ANR	5429026	Identifier	str		5428999	1					
ANR	5429027	PostIncDecOperationExpression	op ++	422:40:11079:11082	5428999	2	True				
ANR	5429028	Identifier	op		5428999	0					
ANR	5429029	IncDec	++		5428999	1					
ANR	5429030	CompoundStatement		7:47:93:93	5428999	3					
ANR	5429031	IfStatement	"if ( ! strcasecmp ( op -> str , str ) )"		5428999	0					
ANR	5429032	Condition	"! strcasecmp ( op -> str , str )"	423:7:11095:11121	5428999	0	True				
ANR	5429033	UnaryOperationExpression	"! strcasecmp ( op -> str , str )"		5428999	0					
ANR	5429034	UnaryOperator	!		5428999	0					
ANR	5429035	CallExpression	"strcasecmp ( op -> str , str )"		5428999	1					
ANR	5429036	Callee	strcasecmp		5428999	0					
ANR	5429037	Identifier	strcasecmp		5428999	0					
ANR	5429038	ArgumentList	op -> str		5428999	1					
ANR	5429039	Argument	op -> str		5428999	0					
ANR	5429040	PtrMemberAccess	op -> str		5428999	0					
ANR	5429041	Identifier	op		5428999	0					
ANR	5429042	Identifier	str		5428999	1					
ANR	5429043	Argument	str		5428999	1					
ANR	5429044	Identifier	str		5428999	0					
ANR	5429045	CompoundStatement		8:37:132:132	5428999	1					
ANR	5429046	ReturnStatement	return op ;	424:3:11130:11139	5428999	0	True				
ANR	5429047	Identifier	op		5428999	0					
ANR	5429048	ReturnStatement	return & Ops [ 0 ] ;	427:1:11149:11163	5428999	2	True				
ANR	5429049	UnaryOperationExpression	& Ops [ 0 ]		5428999	0					
ANR	5429050	UnaryOperator	&		5428999	0					
ANR	5429051	ArrayIndexing	Ops [ 0 ]		5428999	1					
ANR	5429052	Identifier	Ops		5428999	0					
ANR	5429053	PrimaryExpression	0		5428999	1					
ANR	5429054	ReturnType	static const StatOp *		5428999	1					
ANR	5429055	Identifier	get_op		5428999	2					
ANR	5429056	ParameterList	const char * str		5428999	3					
ANR	5429057	Parameter	const char * str	415:8:10974:10988	5428999	0	True				
ANR	5429058	ParameterType	const char *		5428999	0					
ANR	5429059	Identifier	str		5428999	1					
ANR	5429060	CFGEntryNode	ENTRY		5428999		True				
ANR	5429061	CFGExitNode	EXIT		5428999		True				
ANR	5429062	Symbol	str		5428999						
ANR	5429063	Symbol	op		5428999						
ANR	5429064	Symbol	NULL		5428999						
ANR	5429065	Symbol	Ops		5428999						
ANR	5429066	Symbol	* op		5428999						
ANR	5429067	Symbol	op -> str		5428999						
ANR	5429068	Symbol	strcasecmp		5428999						
ANR	5429069	Function	get_op_name	430:0:11169:11368							
ANR	5429070	FunctionDef	get_op_name (StatWrapper :: StatOpType which)		5429069	0					
ANR	5429071	CompoundStatement		432:0:11234:11368	5429069	0					
ANR	5429072	IfStatement	if ( ( which < StatWrapper :: STATOP_MIN ) || ( which > StatWrapper :: STATOP_MAX ) )		5429069	0					
ANR	5429073	Condition	( which < StatWrapper :: STATOP_MIN ) || ( which > StatWrapper :: STATOP_MAX )	433:6:11242:11318	5429069	0	True				
ANR	5429074	OrExpression	( which < StatWrapper :: STATOP_MIN ) || ( which > StatWrapper :: STATOP_MAX )		5429069	0		||			
ANR	5429075	RelationalExpression	which < StatWrapper :: STATOP_MIN		5429069	0		<			
ANR	5429076	Identifier	which		5429069	0					
ANR	5429077	Identifier	StatWrapper :: STATOP_MIN		5429069	1					
ANR	5429078	RelationalExpression	which > StatWrapper :: STATOP_MAX		5429069	1		>			
ANR	5429079	Identifier	which		5429069	0					
ANR	5429080	Identifier	StatWrapper :: STATOP_MAX		5429069	1					
ANR	5429081	CompoundStatement		3:41:87:87	5429069	1					
ANR	5429082	ReturnStatement	"return ""NONE"" ;"	435:2:11326:11339	5429069	0	True				
ANR	5429083	PrimaryExpression	"""NONE"""		5429069	0					
ANR	5429084	ReturnStatement	return Ops [ which ] . str ;	437:1:11345:11366	5429069	1	True				
ANR	5429085	MemberAccess	Ops [ which ] . str		5429069	0					
ANR	5429086	ArrayIndexing	Ops [ which ]		5429069	0					
ANR	5429087	Identifier	Ops		5429069	0					
ANR	5429088	Identifier	which		5429069	1					
ANR	5429089	Identifier	str		5429069	1					
ANR	5429090	ReturnType	static const char *		5429069	1					
ANR	5429091	Identifier	get_op_name		5429069	2					
ANR	5429092	ParameterList	StatWrapper :: StatOpType which		5429069	3					
ANR	5429093	Parameter	StatWrapper :: StatOpType which	431:13:11202:11230	5429069	0	True				
ANR	5429094	ParameterType	StatWrapper :: StatOpType		5429069	0					
ANR	5429095	Identifier	which		5429069	1					
ANR	5429096	CFGEntryNode	ENTRY		5429069		True				
ANR	5429097	CFGExitNode	EXIT		5429069		True				
ANR	5429098	Symbol	which		5429069						
ANR	5429099	Symbol	* Ops		5429069						
ANR	5429100	Symbol	Ops		5429069						
ANR	5429101	Symbol	StatWrapper :: STATOP_MIN		5429069						
ANR	5429102	Symbol	StatWrapper :: STATOP_MAX		5429069						
ANR	5429103	Symbol	* which		5429069						
ANR	5429104	Symbol	Ops [ which ] . str		5429069						
