command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4652679	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_condor_netaddr.cpp								
ANR	4652680	Function	condor_netaddr :: condor_netaddr	5:0:78:142							
ANR	4652681	FunctionDef	condor_netaddr :: condor_netaddr ()		4652680	0					
ANR	4652682	CompoundStatement		5:62:140:142	4652680	0					
ANR	4652683	Identifier	condor_netaddr :: condor_netaddr		4652680	1					
ANR	4652684	ParameterList			4652680	2					
ANR	4652685	CFGEntryNode	ENTRY		4652680		True				
ANR	4652686	CFGExitNode	EXIT		4652680		True				
ANR	4652687	Function	condor_netaddr :: condor_netaddr	8:0:145:264							
ANR	4652688	FunctionDef	"condor_netaddr :: condor_netaddr (const condor_sockaddr & base , unsigned int maskbit)"		4652687	0					
ANR	4652689	CompoundStatement		10:33:262:264	4652687	0					
ANR	4652690	Identifier	condor_netaddr :: condor_netaddr		4652687	1					
ANR	4652691	ParameterList	"const condor_sockaddr & base , unsigned int maskbit"		4652687	2					
ANR	4652692	Parameter	const condor_sockaddr & base	8:31:176:202	4652687	0	True				
ANR	4652693	ParameterType	const condor_sockaddr &		4652687	0					
ANR	4652694	Identifier	base		4652687	1					
ANR	4652695	Parameter	unsigned int maskbit	9:2:207:226	4652687	1	True				
ANR	4652696	ParameterType	unsigned int		4652687	0					
ANR	4652697	Identifier	maskbit		4652687	1					
ANR	4652698	CFGEntryNode	ENTRY		4652687		True				
ANR	4652699	CFGExitNode	EXIT		4652687		True				
ANR	4652700	Symbol	maskbit		4652687						
ANR	4652701	Symbol	base		4652687						
ANR	4652702	Function	condor_netaddr :: match	13:0:267:1175							
ANR	4652703	FunctionDef	condor_netaddr :: match (const condor_sockaddr & target)		4652702	0					
ANR	4652704	CompoundStatement		13:64:331:1175	4652702	0					
ANR	4652705	IfStatement	if ( maskbit_ == ( unsigned int ) - 1 )		4652702	0					
ANR	4652706	Condition	maskbit_ == ( unsigned int ) - 1	14:5:338:365	4652702	0	True				
ANR	4652707	EqualityExpression	maskbit_ == ( unsigned int ) - 1		4652702	0		==			
ANR	4652708	Identifier	maskbit_		4652702	0					
ANR	4652709	CastExpression	( unsigned int ) - 1		4652702	1					
ANR	4652710	CastTarget	unsigned int		4652702	0					
ANR	4652711	UnaryOperationExpression	- 1		4652702	1					
ANR	4652712	UnaryOperator	-		4652702	0					
ANR	4652713	PrimaryExpression	1		4652702	1					
ANR	4652714	CompoundStatement		2:35:36:36	4652702	1					
ANR	4652715	ReturnStatement	return false ;	15:2:372:384	4652702	0	True				
ANR	4652716	Identifier	false		4652702	0					
ANR	4652717	IfStatement	if ( base_ . get_aftype ( ) != target . get_aftype ( ) )		4652702	1					
ANR	4652718	Condition	base_ . get_aftype ( ) != target . get_aftype ( )	22:5:545:585	4652702	0	True				
ANR	4652719	EqualityExpression	base_ . get_aftype ( ) != target . get_aftype ( )		4652702	0		!=			
ANR	4652720	CallExpression	base_ . get_aftype ( )		4652702	0					
ANR	4652721	Callee	base_ . get_aftype		4652702	0					
ANR	4652722	MemberAccess	base_ . get_aftype		4652702	0					
ANR	4652723	Identifier	base_		4652702	0					
ANR	4652724	Identifier	get_aftype		4652702	1					
ANR	4652725	ArgumentList			4652702	1					
ANR	4652726	CallExpression	target . get_aftype ( )		4652702	1					
ANR	4652727	Callee	target . get_aftype		4652702	0					
ANR	4652728	MemberAccess	target . get_aftype		4652702	0					
ANR	4652729	Identifier	target		4652702	0					
ANR	4652730	Identifier	get_aftype		4652702	1					
ANR	4652731	ArgumentList			4652702	1					
ANR	4652732	CompoundStatement		10:48:256:256	4652702	1					
ANR	4652733	ReturnStatement	return false ;	23:2:592:604	4652702	0	True				
ANR	4652734	Identifier	false		4652702	0					
ANR	4652735	IdentifierDeclStatement	const uint32_t * baseaddr = base_ . get_address ( ) ;	26:1:611:657	4652702	2	True				
ANR	4652736	IdentifierDecl	* baseaddr = base_ . get_address ( )		4652702	0					
ANR	4652737	IdentifierDeclType	const uint32_t *		4652702	0					
ANR	4652738	Identifier	baseaddr		4652702	1					
ANR	4652739	AssignmentExpression	* baseaddr = base_ . get_address ( )		4652702	2		=			
ANR	4652740	Identifier	baseaddr		4652702	0					
ANR	4652741	CallExpression	base_ . get_address ( )		4652702	1					
ANR	4652742	Callee	base_ . get_address		4652702	0					
ANR	4652743	MemberAccess	base_ . get_address		4652702	0					
ANR	4652744	Identifier	base_		4652702	0					
ANR	4652745	Identifier	get_address		4652702	1					
ANR	4652746	ArgumentList			4652702	1					
ANR	4652747	IdentifierDeclStatement	const uint32_t * targetaddr = target . get_address ( ) ;	27:1:660:709	4652702	3	True				
ANR	4652748	IdentifierDecl	* targetaddr = target . get_address ( )		4652702	0					
ANR	4652749	IdentifierDeclType	const uint32_t *		4652702	0					
ANR	4652750	Identifier	targetaddr		4652702	1					
ANR	4652751	AssignmentExpression	* targetaddr = target . get_address ( )		4652702	2		=			
ANR	4652752	Identifier	targetaddr		4652702	0					
ANR	4652753	CallExpression	target . get_address ( )		4652702	1					
ANR	4652754	Callee	target . get_address		4652702	0					
ANR	4652755	MemberAccess	target . get_address		4652702	0					
ANR	4652756	Identifier	target		4652702	0					
ANR	4652757	Identifier	get_address		4652702	1					
ANR	4652758	ArgumentList			4652702	1					
ANR	4652759	IfStatement	if ( ! baseaddr || ! targetaddr )		4652702	4					
ANR	4652760	Condition	! baseaddr || ! targetaddr	29:5:717:740	4652702	0	True				
ANR	4652761	OrExpression	! baseaddr || ! targetaddr		4652702	0		||			
ANR	4652762	UnaryOperationExpression	! baseaddr		4652702	0					
ANR	4652763	UnaryOperator	!		4652702	0					
ANR	4652764	Identifier	baseaddr		4652702	1					
ANR	4652765	UnaryOperationExpression	! targetaddr		4652702	1					
ANR	4652766	UnaryOperator	!		4652702	0					
ANR	4652767	Identifier	targetaddr		4652702	1					
ANR	4652768	CompoundStatement		17:31:411:411	4652702	1					
ANR	4652769	ReturnStatement	return false ;	30:2:747:759	4652702	0	True				
ANR	4652770	Identifier	false		4652702	0					
ANR	4652771	IdentifierDeclStatement	int addr_len = base_ . get_address_len ( ) ;	32:1:765:803	4652702	5	True				
ANR	4652772	IdentifierDecl	addr_len = base_ . get_address_len ( )		4652702	0					
ANR	4652773	IdentifierDeclType	int		4652702	0					
ANR	4652774	Identifier	addr_len		4652702	1					
ANR	4652775	AssignmentExpression	addr_len = base_ . get_address_len ( )		4652702	2		=			
ANR	4652776	Identifier	addr_len		4652702	0					
ANR	4652777	CallExpression	base_ . get_address_len ( )		4652702	1					
ANR	4652778	Callee	base_ . get_address_len		4652702	0					
ANR	4652779	MemberAccess	base_ . get_address_len		4652702	0					
ANR	4652780	Identifier	base_		4652702	0					
ANR	4652781	Identifier	get_address_len		4652702	1					
ANR	4652782	ArgumentList			4652702	1					
ANR	4652783	IdentifierDeclStatement	int curmaskbit = maskbit_ ;	34:1:807:832	4652702	6	True				
ANR	4652784	IdentifierDecl	curmaskbit = maskbit_		4652702	0					
ANR	4652785	IdentifierDeclType	int		4652702	0					
ANR	4652786	Identifier	curmaskbit		4652702	1					
ANR	4652787	AssignmentExpression	curmaskbit = maskbit_		4652702	2		=			
ANR	4652788	Identifier	maskbit_		4652702	0					
ANR	4652789	Identifier	maskbit_		4652702	1					
ANR	4652790	ForStatement	for ( int i = 0 ; i < addr_len ; ++ i )		4652702	7					
ANR	4652791	ForInit	int i = 0 ;	35:6:840:849	4652702	0	True				
ANR	4652792	IdentifierDeclStatement	int i = 0 ;		4652702	0					
ANR	4652793	IdentifierDecl	i = 0		4652702	0					
ANR	4652794	IdentifierDeclType	int		4652702	0					
ANR	4652795	Identifier	i		4652702	1					
ANR	4652796	AssignmentExpression	i = 0		4652702	2		=			
ANR	4652797	Identifier	i		4652702	0					
ANR	4652798	PrimaryExpression	0		4652702	1					
ANR	4652799	Condition	i < addr_len	35:17:851:862	4652702	1	True				
ANR	4652800	RelationalExpression	i < addr_len		4652702	0		<			
ANR	4652801	Identifier	i		4652702	0					
ANR	4652802	Identifier	addr_len		4652702	1					
ANR	4652803	UnaryExpression	++ i	35:31:865:867	4652702	2	True				
ANR	4652804	IncDec	++		4652702	0					
ANR	4652805	Identifier	i		4652702	1					
ANR	4652806	CompoundStatement		25:2:576:589	4652702	3					
ANR	4652807	IfStatement	if ( curmaskbit <= 0 )		4652702	0					
ANR	4652808	Condition	curmaskbit <= 0	36:6:878:892	4652702	0	True				
ANR	4652809	RelationalExpression	curmaskbit <= 0		4652702	0		<=			
ANR	4652810	Identifier	curmaskbit		4652702	0					
ANR	4652811	PrimaryExpression	0		4652702	1					
ANR	4652812	CompoundStatement		24:23:563:563	4652702	1					
ANR	4652813	BreakStatement	break ;	36:25:897:902	4652702	0	True				
ANR	4652814	IdentifierDeclStatement	uint32_t mask ;	37:2:908:921	4652702	1	True				
ANR	4652815	IdentifierDecl	mask		4652702	0					
ANR	4652816	IdentifierDeclType	uint32_t		4652702	0					
ANR	4652817	Identifier	mask		4652702	1					
ANR	4652818	IfStatement	if ( curmaskbit >= 32 )		4652702	2					
ANR	4652819	Condition	curmaskbit >= 32	38:6:929:944	4652702	0	True				
ANR	4652820	RelationalExpression	curmaskbit >= 32		4652702	0		>=			
ANR	4652821	Identifier	curmaskbit		4652702	0					
ANR	4652822	PrimaryExpression	32		4652702	1					
ANR	4652823	CompoundStatement		26:24:615:615	4652702	1					
ANR	4652824	ExpressionStatement	mask = 0xffffffff	39:3:952:969	4652702	0	True				
ANR	4652825	AssignmentExpression	mask = 0xffffffff		4652702	0		=			
ANR	4652826	Identifier	mask		4652702	0					
ANR	4652827	PrimaryExpression	0xffffffff		4652702	1					
ANR	4652828	ElseStatement	else		4652702	0					
ANR	4652829	CompoundStatement		28:9:648:648	4652702	0					
ANR	4652830	ExpressionStatement	mask = htonl ( ~ ( 0xffffffff >> curmaskbit ) )	41:3:985:1026	4652702	0	True				
ANR	4652831	AssignmentExpression	mask = htonl ( ~ ( 0xffffffff >> curmaskbit ) )		4652702	0		=			
ANR	4652832	Identifier	mask		4652702	0					
ANR	4652833	CallExpression	htonl ( ~ ( 0xffffffff >> curmaskbit ) )		4652702	1					
ANR	4652834	Callee	htonl		4652702	0					
ANR	4652835	Identifier	htonl		4652702	0					
ANR	4652836	ArgumentList	~ ( 0xffffffff >> curmaskbit )		4652702	1					
ANR	4652837	Argument	~ ( 0xffffffff >> curmaskbit )		4652702	0					
ANR	4652838	UnaryOperationExpression	~ ( 0xffffffff >> curmaskbit )		4652702	0					
ANR	4652839	UnaryOperator	~		4652702	0					
ANR	4652840	ShiftExpression	0xffffffff >> curmaskbit		4652702	1		>>			
ANR	4652841	PrimaryExpression	0xffffffff		4652702	0					
ANR	4652842	Identifier	curmaskbit		4652702	1					
ANR	4652843	IfStatement	if ( ( * baseaddr & mask ) != ( * targetaddr & mask ) )		4652702	3					
ANR	4652844	Condition	( * baseaddr & mask ) != ( * targetaddr & mask )	44:6:1039:1080	4652702	0	True				
ANR	4652845	EqualityExpression	( * baseaddr & mask ) != ( * targetaddr & mask )		4652702	0		!=			
ANR	4652846	BitAndExpression	* baseaddr & mask		4652702	0		&			
ANR	4652847	UnaryOperationExpression	* baseaddr		4652702	0					
ANR	4652848	UnaryOperator	*		4652702	0					
ANR	4652849	Identifier	baseaddr		4652702	1					
ANR	4652850	Identifier	mask		4652702	1					
ANR	4652851	BitAndExpression	* targetaddr & mask		4652702	1		&			
ANR	4652852	UnaryOperationExpression	* targetaddr		4652702	0					
ANR	4652853	UnaryOperator	*		4652702	0					
ANR	4652854	Identifier	targetaddr		4652702	1					
ANR	4652855	Identifier	mask		4652702	1					
ANR	4652856	CompoundStatement		32:50:751:751	4652702	1					
ANR	4652857	ReturnStatement	return false ;	45:3:1088:1100	4652702	0	True				
ANR	4652858	Identifier	false		4652702	0					
ANR	4652859	ExpressionStatement	curmaskbit -= 32	48:2:1109:1125	4652702	4	True				
ANR	4652860	AssignmentExpression	curmaskbit -= 32		4652702	0		-=			
ANR	4652861	Identifier	curmaskbit		4652702	0					
ANR	4652862	PrimaryExpression	32		4652702	1					
ANR	4652863	ExpressionStatement	baseaddr ++	49:2:1129:1139	4652702	5	True				
ANR	4652864	PostIncDecOperationExpression	baseaddr ++		4652702	0					
ANR	4652865	Identifier	baseaddr		4652702	0					
ANR	4652866	IncDec	++		4652702	1					
ANR	4652867	ExpressionStatement	targetaddr ++	50:2:1143:1155	4652702	6	True				
ANR	4652868	PostIncDecOperationExpression	targetaddr ++		4652702	0					
ANR	4652869	Identifier	targetaddr		4652702	0					
ANR	4652870	IncDec	++		4652702	1					
ANR	4652871	ReturnStatement	return true ;	53:1:1162:1173	4652702	8	True				
ANR	4652872	Identifier	true		4652702	0					
ANR	4652873	ReturnType	bool		4652702	1					
ANR	4652874	Identifier	condor_netaddr :: match		4652702	2					
ANR	4652875	ParameterList	const condor_sockaddr & target		4652702	3					
ANR	4652876	Parameter	const condor_sockaddr & target	13:27:294:322	4652702	0	True				
ANR	4652877	ParameterType	const condor_sockaddr &		4652702	0					
ANR	4652878	Identifier	target		4652702	1					
ANR	4652879	CFGEntryNode	ENTRY		4652702		True				
ANR	4652880	CFGExitNode	EXIT		4652702		True				
ANR	4652881	Symbol	base_ . get_address		4652702						
ANR	4652882	Symbol	targetaddr		4652702						
ANR	4652883	Symbol	target . get_address		4652702						
ANR	4652884	Symbol	curmaskbit		4652702						
ANR	4652885	Symbol	false		4652702						
ANR	4652886	Symbol	target . get_aftype		4652702						
ANR	4652887	Symbol	i		4652702						
ANR	4652888	Symbol	baseaddr		4652702						
ANR	4652889	Symbol	base_ . get_address_len		4652702						
ANR	4652890	Symbol	htonl		4652702						
ANR	4652891	Symbol	target		4652702						
ANR	4652892	Symbol	base_ . get_aftype		4652702						
ANR	4652893	Symbol	maskbit_		4652702						
ANR	4652894	Symbol	true		4652702						
ANR	4652895	Symbol	* targetaddr		4652702						
ANR	4652896	Symbol	base_		4652702						
ANR	4652897	Symbol	* baseaddr		4652702						
ANR	4652898	Symbol	addr_len		4652702						
ANR	4652899	Symbol	mask		4652702						
ANR	4652900	Function	convert_maskaddr_to_maskbit	56:0:1178:1684							
ANR	4652901	FunctionDef	convert_maskaddr_to_maskbit (uint32_t mask_value)		4652900	0					
ANR	4652902	CompoundStatement		56:60:1238:1684	4652900	0					
ANR	4652903	IdentifierDeclStatement	int maskbit = 0 ;	57:1:1241:1256	4652900	0	True				
ANR	4652904	IdentifierDecl	maskbit = 0		4652900	0					
ANR	4652905	IdentifierDeclType	int		4652900	0					
ANR	4652906	Identifier	maskbit		4652900	1					
ANR	4652907	AssignmentExpression	maskbit = 0		4652900	2		=			
ANR	4652908	Identifier	maskbit		4652900	0					
ANR	4652909	PrimaryExpression	0		4652900	1					
ANR	4652910	ExpressionStatement	mask_value = ntohl ( mask_value )	59:1:1260:1290	4652900	1	True				
ANR	4652911	AssignmentExpression	mask_value = ntohl ( mask_value )		4652900	0		=			
ANR	4652912	Identifier	mask_value		4652900	0					
ANR	4652913	CallExpression	ntohl ( mask_value )		4652900	1					
ANR	4652914	Callee	ntohl		4652900	0					
ANR	4652915	Identifier	ntohl		4652900	0					
ANR	4652916	ArgumentList	mask_value		4652900	1					
ANR	4652917	Argument	mask_value		4652900	0					
ANR	4652918	Identifier	mask_value		4652900	0					
ANR	4652919	WhileStatement	while ( mask_value > 0 && ( mask_value & 1 ) == 0 )		4652900	2					
ANR	4652920	Condition	mask_value > 0 && ( mask_value & 1 ) == 0	62:8:1345:1383	4652900	0	True				
ANR	4652921	AndExpression	mask_value > 0 && ( mask_value & 1 ) == 0		4652900	0		&&			
ANR	4652922	RelationalExpression	mask_value > 0		4652900	0		>			
ANR	4652923	Identifier	mask_value		4652900	0					
ANR	4652924	PrimaryExpression	0		4652900	1					
ANR	4652925	EqualityExpression	( mask_value & 1 ) == 0		4652900	1		==			
ANR	4652926	BitAndExpression	mask_value & 1		4652900	0		&			
ANR	4652927	Identifier	mask_value		4652900	0					
ANR	4652928	PrimaryExpression	1		4652900	1					
ANR	4652929	PrimaryExpression	0		4652900	1					
ANR	4652930	ExpressionStatement	mask_value >>= 1	63:2:1388:1404	4652900	1	True				
ANR	4652931	AssignmentExpression	mask_value >>= 1		4652900	0		>>=			
ANR	4652932	Identifier	mask_value		4652900	0					
ANR	4652933	PrimaryExpression	1		4652900	1					
ANR	4652934	WhileStatement	while ( mask_value > 0 && ( mask_value & 1 ) == 1 )		4652900	3					
ANR	4652935	Condition	mask_value > 0 && ( mask_value & 1 ) == 1	65:8:1415:1453	4652900	0	True				
ANR	4652936	AndExpression	mask_value > 0 && ( mask_value & 1 ) == 1		4652900	0		&&			
ANR	4652937	RelationalExpression	mask_value > 0		4652900	0		>			
ANR	4652938	Identifier	mask_value		4652900	0					
ANR	4652939	PrimaryExpression	0		4652900	1					
ANR	4652940	EqualityExpression	( mask_value & 1 ) == 1		4652900	1		==			
ANR	4652941	BitAndExpression	mask_value & 1		4652900	0		&			
ANR	4652942	Identifier	mask_value		4652900	0					
ANR	4652943	PrimaryExpression	1		4652900	1					
ANR	4652944	PrimaryExpression	1		4652900	1					
ANR	4652945	CompoundStatement		10:49:217:217	4652900	1					
ANR	4652946	ExpressionStatement	maskbit ++	66:2:1460:1469	4652900	0	True				
ANR	4652947	PostIncDecOperationExpression	maskbit ++		4652900	0					
ANR	4652948	Identifier	maskbit		4652900	0					
ANR	4652949	IncDec	++		4652900	1					
ANR	4652950	ExpressionStatement	mask_value >>= 1	67:2:1473:1489	4652900	1	True				
ANR	4652951	AssignmentExpression	mask_value >>= 1		4652900	0		>>=			
ANR	4652952	Identifier	mask_value		4652900	0					
ANR	4652953	PrimaryExpression	1		4652900	1					
ANR	4652954	IfStatement	if ( mask_value != 0 )		4652900	4					
ANR	4652955	Condition	mask_value != 0	70:5:1500:1514	4652900	0	True				
ANR	4652956	EqualityExpression	mask_value != 0		4652900	0		!=			
ANR	4652957	Identifier	mask_value		4652900	0					
ANR	4652958	PrimaryExpression	0		4652900	1					
ANR	4652959	CompoundStatement		15:22:278:278	4652900	1					
ANR	4652960	ReturnStatement	return - 1 ;	74:2:1652:1661	4652900	0	True				
ANR	4652961	UnaryOperationExpression	- 1		4652900	0					
ANR	4652962	UnaryOperator	-		4652900	0					
ANR	4652963	PrimaryExpression	1		4652900	1					
ANR	4652964	ReturnStatement	return maskbit ;	77:1:1668:1682	4652900	5	True				
ANR	4652965	Identifier	maskbit		4652900	0					
ANR	4652966	ReturnType	static int		4652900	1					
ANR	4652967	Identifier	convert_maskaddr_to_maskbit		4652900	2					
ANR	4652968	ParameterList	uint32_t mask_value		4652900	3					
ANR	4652969	Parameter	uint32_t mask_value	56:39:1217:1235	4652900	0	True				
ANR	4652970	ParameterType	uint32_t		4652900	0					
ANR	4652971	Identifier	mask_value		4652900	1					
ANR	4652972	CFGEntryNode	ENTRY		4652900		True				
ANR	4652973	CFGExitNode	EXIT		4652900		True				
ANR	4652974	Symbol	mask_value		4652900						
ANR	4652975	Symbol	maskbit		4652900						
ANR	4652976	Symbol	ntohl		4652900						
ANR	4652977	Function	condor_netaddr :: from_net_string	80:0:1687:3167							
ANR	4652978	FunctionDef	condor_netaddr :: from_net_string (const char * net)		4652977	0					
ANR	4652979	CompoundStatement		80:54:1741:3167	4652977	0					
ANR	4652980	IdentifierDeclStatement	"const char * slash = strchr ( net , '/' ) ;"	81:1:1744:1780	4652977	0	True				
ANR	4652981	IdentifierDecl	"* slash = strchr ( net , '/' )"		4652977	0					
ANR	4652982	IdentifierDeclType	const char *		4652977	0					
ANR	4652983	Identifier	slash		4652977	1					
ANR	4652984	AssignmentExpression	"* slash = strchr ( net , '/' )"		4652977	2		=			
ANR	4652985	Identifier	slash		4652977	0					
ANR	4652986	CallExpression	"strchr ( net , '/' )"		4652977	1					
ANR	4652987	Callee	strchr		4652977	0					
ANR	4652988	Identifier	strchr		4652977	0					
ANR	4652989	ArgumentList	net		4652977	1					
ANR	4652990	Argument	net		4652977	0					
ANR	4652991	Identifier	net		4652977	0					
ANR	4652992	Argument	'/'		4652977	1					
ANR	4652993	PrimaryExpression	'/'		4652977	0					
ANR	4652994	IdentifierDeclStatement	const char * net_end = net + strlen ( net ) ;	82:1:1783:1822	4652977	1	True				
ANR	4652995	IdentifierDecl	* net_end = net + strlen ( net )		4652977	0					
ANR	4652996	IdentifierDeclType	const char *		4652977	0					
ANR	4652997	Identifier	net_end		4652977	1					
ANR	4652998	AssignmentExpression	* net_end = net + strlen ( net )		4652977	2		=			
ANR	4652999	Identifier	net_end		4652977	0					
ANR	4653000	AdditiveExpression	net + strlen ( net )		4652977	1		+			
ANR	4653001	Identifier	net		4652977	0					
ANR	4653002	CallExpression	strlen ( net )		4652977	1					
ANR	4653003	Callee	strlen		4652977	0					
ANR	4653004	Identifier	strlen		4652977	0					
ANR	4653005	ArgumentList	net		4652977	1					
ANR	4653006	Argument	net		4652977	0					
ANR	4653007	Identifier	net		4652977	0					
ANR	4653008	IfStatement	if ( slash )		4652977	2					
ANR	4653009	Condition	slash	83:5:1829:1833	4652977	0	True				
ANR	4653010	Identifier	slash		4652977	0					
ANR	4653011	CompoundStatement		11:2:265:325	4652977	1					
ANR	4653012	IdentifierDeclStatement	"std :: string base ( net , slash - net ) ;"	84:2:1840:1874	4652977	0	True				
ANR	4653013	IdentifierDecl	"base ( net , slash - net )"		4652977	0					
ANR	4653014	IdentifierDeclType	std :: string		4652977	0					
ANR	4653015	Identifier	base		4652977	1					
ANR	4653016	Expression	"net , slash - net"		4652977	2					
ANR	4653017	Identifier	net		4652977	0					
ANR	4653018	AdditiveExpression	slash - net		4652977	1		-			
ANR	4653019	Identifier	slash		4652977	0					
ANR	4653020	Identifier	net		4652977	1					
ANR	4653021	IfStatement	if ( ! base_ . from_ip_string ( base . c_str ( ) ) )		4652977	1					
ANR	4653022	Condition	! base_ . from_ip_string ( base . c_str ( ) )	85:6:1882:1916	4652977	0	True				
ANR	4653023	UnaryOperationExpression	! base_ . from_ip_string ( base . c_str ( ) )		4652977	0					
ANR	4653024	UnaryOperator	!		4652977	0					
ANR	4653025	CallExpression	base_ . from_ip_string ( base . c_str ( ) )		4652977	1					
ANR	4653026	Callee	base_ . from_ip_string		4652977	0					
ANR	4653027	MemberAccess	base_ . from_ip_string		4652977	0					
ANR	4653028	Identifier	base_		4652977	0					
ANR	4653029	Identifier	from_ip_string		4652977	1					
ANR	4653030	ArgumentList	base . c_str ( )		4652977	1					
ANR	4653031	Argument	base . c_str ( )		4652977	0					
ANR	4653032	CallExpression	base . c_str ( )		4652977	0					
ANR	4653033	Callee	base . c_str		4652977	0					
ANR	4653034	MemberAccess	base . c_str		4652977	0					
ANR	4653035	Identifier	base		4652977	0					
ANR	4653036	Identifier	c_str		4652977	1					
ANR	4653037	ArgumentList			4652977	1					
ANR	4653038	ReturnStatement	return false ;	86:3:1922:1934	4652977	1	True				
ANR	4653039	Identifier	false		4652977	0					
ANR	4653040	IdentifierDeclStatement	char * end_ptr = NULL ;	89:2:1983:2003	4652977	2	True				
ANR	4653041	IdentifierDecl	* end_ptr = NULL		4652977	0					
ANR	4653042	IdentifierDeclType	char *		4652977	0					
ANR	4653043	Identifier	end_ptr		4652977	1					
ANR	4653044	AssignmentExpression	* end_ptr = NULL		4652977	2		=			
ANR	4653045	Identifier	NULL		4652977	0					
ANR	4653046	Identifier	NULL		4652977	1					
ANR	4653047	IdentifierDeclStatement	"unsigned long int maskbit = strtoul ( slash + 1 , & end_ptr , 10 ) ;"	90:2:2007:2067	4652977	3	True				
ANR	4653048	IdentifierDecl	"maskbit = strtoul ( slash + 1 , & end_ptr , 10 )"		4652977	0					
ANR	4653049	IdentifierDeclType	unsigned long int		4652977	0					
ANR	4653050	Identifier	maskbit		4652977	1					
ANR	4653051	AssignmentExpression	"maskbit = strtoul ( slash + 1 , & end_ptr , 10 )"		4652977	2		=			
ANR	4653052	Identifier	maskbit		4652977	0					
ANR	4653053	CallExpression	"strtoul ( slash + 1 , & end_ptr , 10 )"		4652977	1					
ANR	4653054	Callee	strtoul		4652977	0					
ANR	4653055	Identifier	strtoul		4652977	0					
ANR	4653056	ArgumentList	slash + 1		4652977	1					
ANR	4653057	Argument	slash + 1		4652977	0					
ANR	4653058	AdditiveExpression	slash + 1		4652977	0		+			
ANR	4653059	Identifier	slash		4652977	0					
ANR	4653060	PrimaryExpression	1		4652977	1					
ANR	4653061	Argument	& end_ptr		4652977	1					
ANR	4653062	UnaryOperationExpression	& end_ptr		4652977	0					
ANR	4653063	UnaryOperator	&		4652977	0					
ANR	4653064	Identifier	end_ptr		4652977	1					
ANR	4653065	Argument	10		4652977	2					
ANR	4653066	PrimaryExpression	10		4652977	0					
ANR	4653067	IfStatement	if ( end_ptr == net_end )		4652977	4					
ANR	4653068	Condition	end_ptr == net_end	94:6:2180:2197	4652977	0	True				
ANR	4653069	EqualityExpression	end_ptr == net_end		4652977	0		==			
ANR	4653070	Identifier	end_ptr		4652977	0					
ANR	4653071	Identifier	net_end		4652977	1					
ANR	4653072	CompoundStatement		15:26:458:458	4652977	1					
ANR	4653073	ExpressionStatement	maskbit_ = maskbit	95:3:2205:2223	4652977	0	True				
ANR	4653074	AssignmentExpression	maskbit_ = maskbit		4652977	0		=			
ANR	4653075	Identifier	maskbit_		4652977	0					
ANR	4653076	Identifier	maskbit		4652977	1					
ANR	4653077	ElseStatement	else		4652977	0					
ANR	4653078	CompoundStatement		17:9:492:492	4652977	0					
ANR	4653079	IfStatement	if ( base_ . is_ipv4 ( ) )		4652977	0					
ANR	4653080	Condition	base_ . is_ipv4 ( )	99:7:2335:2349	4652977	0	True				
ANR	4653081	CallExpression	base_ . is_ipv4 ( )		4652977	0					
ANR	4653082	Callee	base_ . is_ipv4		4652977	0					
ANR	4653083	MemberAccess	base_ . is_ipv4		4652977	0					
ANR	4653084	Identifier	base_		4652977	0					
ANR	4653085	Identifier	is_ipv4		4652977	1					
ANR	4653086	ArgumentList			4652977	1					
ANR	4653087	CompoundStatement		30:4:868:923	4652977	1					
ANR	4653088	IdentifierDeclStatement	"std :: string mask ( slash + 1 , net_end - slash - 1 ) ;"	100:4:2358:2406	4652977	0	True				
ANR	4653089	IdentifierDecl	"mask ( slash + 1 , net_end - slash - 1 )"		4652977	0					
ANR	4653090	IdentifierDeclType	std :: string		4652977	0					
ANR	4653091	Identifier	mask		4652977	1					
ANR	4653092	Expression	"slash + 1 , net_end - slash - 1"		4652977	2					
ANR	4653093	AdditiveExpression	slash + 1		4652977	0		+			
ANR	4653094	Identifier	slash		4652977	0					
ANR	4653095	PrimaryExpression	1		4652977	1					
ANR	4653096	AdditiveExpression	net_end - slash - 1		4652977	1		-			
ANR	4653097	Identifier	net_end		4652977	0					
ANR	4653098	AdditiveExpression	slash - 1		4652977	1		-			
ANR	4653099	Identifier	slash		4652977	0					
ANR	4653100	PrimaryExpression	1		4652977	1					
ANR	4653101	IdentifierDeclStatement	condor_sockaddr maskaddr ;	101:4:2412:2436	4652977	1	True				
ANR	4653102	IdentifierDecl	maskaddr		4652977	0					
ANR	4653103	IdentifierDeclType	condor_sockaddr		4652977	0					
ANR	4653104	Identifier	maskaddr		4652977	1					
ANR	4653105	IfStatement	if ( ! maskaddr . from_ip_string ( mask . c_str ( ) ) || ! maskaddr . is_ipv4 ( ) )		4652977	2					
ANR	4653106	Condition	! maskaddr . from_ip_string ( mask . c_str ( ) ) || ! maskaddr . is_ipv4 ( )	104:8:2490:2556	4652977	0	True				
ANR	4653107	OrExpression	! maskaddr . from_ip_string ( mask . c_str ( ) ) || ! maskaddr . is_ipv4 ( )		4652977	0		||			
ANR	4653108	UnaryOperationExpression	! maskaddr . from_ip_string ( mask . c_str ( ) )		4652977	0					
ANR	4653109	UnaryOperator	!		4652977	0					
ANR	4653110	CallExpression	maskaddr . from_ip_string ( mask . c_str ( ) )		4652977	1					
ANR	4653111	Callee	maskaddr . from_ip_string		4652977	0					
ANR	4653112	MemberAccess	maskaddr . from_ip_string		4652977	0					
ANR	4653113	Identifier	maskaddr		4652977	0					
ANR	4653114	Identifier	from_ip_string		4652977	1					
ANR	4653115	ArgumentList	mask . c_str ( )		4652977	1					
ANR	4653116	Argument	mask . c_str ( )		4652977	0					
ANR	4653117	CallExpression	mask . c_str ( )		4652977	0					
ANR	4653118	Callee	mask . c_str		4652977	0					
ANR	4653119	MemberAccess	mask . c_str		4652977	0					
ANR	4653120	Identifier	mask		4652977	0					
ANR	4653121	Identifier	c_str		4652977	1					
ANR	4653122	ArgumentList			4652977	1					
ANR	4653123	UnaryOperationExpression	! maskaddr . is_ipv4 ( )		4652977	1					
ANR	4653124	UnaryOperator	!		4652977	0					
ANR	4653125	CallExpression	maskaddr . is_ipv4 ( )		4652977	1					
ANR	4653126	Callee	maskaddr . is_ipv4		4652977	0					
ANR	4653127	MemberAccess	maskaddr . is_ipv4		4652977	0					
ANR	4653128	Identifier	maskaddr		4652977	0					
ANR	4653129	Identifier	is_ipv4		4652977	1					
ANR	4653130	ArgumentList			4652977	1					
ANR	4653131	ReturnStatement	return false ;	106:5:2564:2576	4652977	1	True				
ANR	4653132	Identifier	false		4652977	0					
ANR	4653133	IdentifierDeclStatement	const uint32_t * maskaddr_array = maskaddr . get_address ( ) ;	109:4:2610:2665	4652977	3	True				
ANR	4653134	IdentifierDecl	* maskaddr_array = maskaddr . get_address ( )		4652977	0					
ANR	4653135	IdentifierDeclType	const uint32_t *		4652977	0					
ANR	4653136	Identifier	maskaddr_array		4652977	1					
ANR	4653137	AssignmentExpression	* maskaddr_array = maskaddr . get_address ( )		4652977	2		=			
ANR	4653138	Identifier	maskaddr_array		4652977	0					
ANR	4653139	CallExpression	maskaddr . get_address ( )		4652977	1					
ANR	4653140	Callee	maskaddr . get_address		4652977	0					
ANR	4653141	MemberAccess	maskaddr . get_address		4652977	0					
ANR	4653142	Identifier	maskaddr		4652977	0					
ANR	4653143	Identifier	get_address		4652977	1					
ANR	4653144	ArgumentList			4652977	1					
ANR	4653145	ExpressionStatement	maskbit_ = convert_maskaddr_to_maskbit ( * maskaddr_array )	110:4:2671:2726	4652977	4	True				
ANR	4653146	AssignmentExpression	maskbit_ = convert_maskaddr_to_maskbit ( * maskaddr_array )		4652977	0		=			
ANR	4653147	Identifier	maskbit_		4652977	0					
ANR	4653148	CallExpression	convert_maskaddr_to_maskbit ( * maskaddr_array )		4652977	1					
ANR	4653149	Callee	convert_maskaddr_to_maskbit		4652977	0					
ANR	4653150	Identifier	convert_maskaddr_to_maskbit		4652977	0					
ANR	4653151	ArgumentList	* maskaddr_array		4652977	1					
ANR	4653152	Argument	* maskaddr_array		4652977	0					
ANR	4653153	UnaryOperationExpression	* maskaddr_array		4652977	0					
ANR	4653154	UnaryOperator	*		4652977	0					
ANR	4653155	Identifier	maskaddr_array		4652977	1					
ANR	4653156	IfStatement	if ( maskbit_ == ( unsigned int ) - 1 )		4652977	5					
ANR	4653157	Condition	maskbit_ == ( unsigned int ) - 1	111:8:2736:2763	4652977	0	True				
ANR	4653158	EqualityExpression	maskbit_ == ( unsigned int ) - 1		4652977	0		==			
ANR	4653159	Identifier	maskbit_		4652977	0					
ANR	4653160	CastExpression	( unsigned int ) - 1		4652977	1					
ANR	4653161	CastTarget	unsigned int		4652977	0					
ANR	4653162	UnaryOperationExpression	- 1		4652977	1					
ANR	4653163	UnaryOperator	-		4652977	0					
ANR	4653164	PrimaryExpression	1		4652977	1					
ANR	4653165	ReturnStatement	return false ;	112:5:2771:2783	4652977	1	True				
ANR	4653166	Identifier	false		4652977	0					
ANR	4653167	ElseStatement	else		4652977	0					
ANR	4653168	CompoundStatement		43:2:1182:1194	4652977	0					
ANR	4653169	IdentifierDeclStatement	in_addr base ;	121:2:2908:2920	4652977	0	True				
ANR	4653170	IdentifierDecl	base		4652977	0					
ANR	4653171	IdentifierDeclType	in_addr		4652977	0					
ANR	4653172	Identifier	base		4652977	1					
ANR	4653173	IdentifierDeclStatement	in_addr mask ;	122:2:2924:2936	4652977	1	True				
ANR	4653174	IdentifierDecl	mask		4652977	0					
ANR	4653175	IdentifierDeclType	in_addr		4652977	0					
ANR	4653176	Identifier	mask		4652977	1					
ANR	4653177	IfStatement	"if ( ! is_ipv4_addr_implementation ( net , & base , & mask , 1 ) )"		4652977	2					
ANR	4653178	Condition	"! is_ipv4_addr_implementation ( net , & base , & mask , 1 )"	123:6:2944:2993	4652977	0	True				
ANR	4653179	UnaryOperationExpression	"! is_ipv4_addr_implementation ( net , & base , & mask , 1 )"		4652977	0					
ANR	4653180	UnaryOperator	!		4652977	0					
ANR	4653181	CallExpression	"is_ipv4_addr_implementation ( net , & base , & mask , 1 )"		4652977	1					
ANR	4653182	Callee	is_ipv4_addr_implementation		4652977	0					
ANR	4653183	Identifier	is_ipv4_addr_implementation		4652977	0					
ANR	4653184	ArgumentList	net		4652977	1					
ANR	4653185	Argument	net		4652977	0					
ANR	4653186	Identifier	net		4652977	0					
ANR	4653187	Argument	& base		4652977	1					
ANR	4653188	UnaryOperationExpression	& base		4652977	0					
ANR	4653189	UnaryOperator	&		4652977	0					
ANR	4653190	Identifier	base		4652977	1					
ANR	4653191	Argument	& mask		4652977	2					
ANR	4653192	UnaryOperationExpression	& mask		4652977	0					
ANR	4653193	UnaryOperator	&		4652977	0					
ANR	4653194	Identifier	mask		4652977	1					
ANR	4653195	Argument	1		4652977	3					
ANR	4653196	PrimaryExpression	1		4652977	0					
ANR	4653197	ReturnStatement	return false ;	124:3:2999:3011	4652977	1	True				
ANR	4653198	Identifier	false		4652977	0					
ANR	4653199	ExpressionStatement	"base_ = condor_sockaddr ( base , 0 )"	126:2:3016:3048	4652977	3	True				
ANR	4653200	AssignmentExpression	"base_ = condor_sockaddr ( base , 0 )"		4652977	0		=			
ANR	4653201	Identifier	base_		4652977	0					
ANR	4653202	CallExpression	"condor_sockaddr ( base , 0 )"		4652977	1					
ANR	4653203	Callee	condor_sockaddr		4652977	0					
ANR	4653204	Identifier	condor_sockaddr		4652977	0					
ANR	4653205	ArgumentList	base		4652977	1					
ANR	4653206	Argument	base		4652977	0					
ANR	4653207	Identifier	base		4652977	0					
ANR	4653208	Argument	0		4652977	1					
ANR	4653209	PrimaryExpression	0		4652977	0					
ANR	4653210	ExpressionStatement	maskbit_ = convert_maskaddr_to_maskbit ( * ( uint32_t * ) & mask )	127:2:3052:3109	4652977	4	True				
ANR	4653211	AssignmentExpression	maskbit_ = convert_maskaddr_to_maskbit ( * ( uint32_t * ) & mask )		4652977	0		=			
ANR	4653212	Identifier	maskbit_		4652977	0					
ANR	4653213	CallExpression	convert_maskaddr_to_maskbit ( * ( uint32_t * ) & mask )		4652977	1					
ANR	4653214	Callee	convert_maskaddr_to_maskbit		4652977	0					
ANR	4653215	Identifier	convert_maskaddr_to_maskbit		4652977	0					
ANR	4653216	ArgumentList	* ( uint32_t * ) & mask		4652977	1					
ANR	4653217	Argument	* ( uint32_t * ) & mask		4652977	0					
ANR	4653218	UnaryOperationExpression	* ( uint32_t * ) & mask		4652977	0					
ANR	4653219	UnaryOperator	*		4652977	0					
ANR	4653220	CastExpression	( uint32_t * ) & mask		4652977	1					
ANR	4653221	CastTarget	uint32_t *		4652977	0					
ANR	4653222	UnaryOperationExpression	& mask		4652977	1					
ANR	4653223	UnaryOperator	&		4652977	0					
ANR	4653224	Identifier	mask		4652977	1					
ANR	4653225	IfStatement	if ( maskbit_ == - 1 )		4652977	5					
ANR	4653226	Condition	maskbit_ == - 1	128:6:3117:3130	4652977	0	True				
ANR	4653227	EqualityExpression	maskbit_ == - 1		4652977	0		==			
ANR	4653228	Identifier	maskbit_		4652977	0					
ANR	4653229	UnaryOperationExpression	- 1		4652977	1					
ANR	4653230	UnaryOperator	-		4652977	0					
ANR	4653231	PrimaryExpression	1		4652977	1					
ANR	4653232	ReturnStatement	return false ;	129:3:3136:3148	4652977	1	True				
ANR	4653233	Identifier	false		4652977	0					
ANR	4653234	ReturnStatement	return true ;	131:1:3154:3165	4652977	3	True				
ANR	4653235	Identifier	true		4652977	0					
ANR	4653236	ReturnType	bool		4652977	1					
ANR	4653237	Identifier	condor_netaddr :: from_net_string		4652977	2					
ANR	4653238	ParameterList	const char * net		4652977	3					
ANR	4653239	Parameter	const char * net	80:37:1724:1738	4652977	0	True				
ANR	4653240	ParameterType	const char *		4652977	0					
ANR	4653241	Identifier	net		4652977	1					
ANR	4653242	CFGEntryNode	ENTRY		4652977		True				
ANR	4653243	CFGExitNode	EXIT		4652977		True				
ANR	4653244	Symbol	& base		4652977						
ANR	4653245	Symbol	maskaddr . is_ipv4		4652977						
ANR	4653246	Symbol	strchr		4652977						
ANR	4653247	Symbol	mask . c_str		4652977						
ANR	4653248	Symbol	strlen		4652977						
ANR	4653249	Symbol	& end_ptr		4652977						
ANR	4653250	Symbol	maskaddr . get_address		4652977						
ANR	4653251	Symbol	strtoul		4652977						
ANR	4653252	Symbol	condor_sockaddr		4652977						
ANR	4653253	Symbol	maskaddr_array		4652977						
ANR	4653254	Symbol	convert_maskaddr_to_maskbit		4652977						
ANR	4653255	Symbol	net		4652977						
ANR	4653256	Symbol	mask		4652977						
ANR	4653257	Symbol	is_ipv4_addr_implementation		4652977						
ANR	4653258	Symbol	NULL		4652977						
ANR	4653259	Symbol	base_ . is_ipv4		4652977						
ANR	4653260	Symbol	false		4652977						
ANR	4653261	Symbol	& mask		4652977						
ANR	4653262	Symbol	* maskaddr_array		4652977						
ANR	4653263	Symbol	net_end		4652977						
ANR	4653264	Symbol	base . c_str		4652977						
ANR	4653265	Symbol	end_ptr		4652977						
ANR	4653266	Symbol	maskbit		4652977						
ANR	4653267	Symbol	base_ . from_ip_string		4652977						
ANR	4653268	Symbol	maskbit_		4652977						
ANR	4653269	Symbol	* ( uint32_t * ) & mask		4652977						
ANR	4653270	Symbol	maskaddr		4652977						
ANR	4653271	Symbol	maskaddr . from_ip_string		4652977						
ANR	4653272	Symbol	true		4652977						
ANR	4653273	Symbol	slash		4652977						
ANR	4653274	Symbol	base_		4652977						
ANR	4653275	Symbol	base		4652977						
