command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	148496	File	data/converged/CVE-2011-4930_htcondor/BTree.cpp								
ANR	148497	Function	BTree :: BTree	40:0:806:841							
ANR	148498	FunctionDef	BTree :: BTree ()		148497	0					
ANR	148499	CompoundStatement		41:0:825:841	148497	0					
ANR	148500	ExpressionStatement	root = NULL	42:1:828:839	148497	0	True				
ANR	148501	AssignmentExpression	root = NULL		148497	0		=			
ANR	148502	Identifier	root		148497	0					
ANR	148503	Identifier	NULL		148497	1					
ANR	148504	Identifier	BTree :: BTree		148497	1					
ANR	148505	ParameterList			148497	2					
ANR	148506	CFGEntryNode	ENTRY		148497		True				
ANR	148507	CFGExitNode	EXIT		148497		True				
ANR	148508	Symbol	NULL		148497						
ANR	148509	Symbol	root		148497						
ANR	148510	Function	BTree :: ~BTree	59:0:1021:1081							
ANR	148511	FunctionDef	BTree :: ~BTree ()		148510	0					
ANR	148512	CompoundStatement		60:0:1041:1081	148510	0					
ANR	148513	ExpressionStatement	deleteRecursive ( root )	61:1:1044:1065	148510	0	True				
ANR	148514	CallExpression	deleteRecursive ( root )		148510	0					
ANR	148515	Callee	deleteRecursive		148510	0					
ANR	148516	Identifier	deleteRecursive		148510	0					
ANR	148517	ArgumentList	root		148510	1					
ANR	148518	Argument	root		148510	0					
ANR	148519	Identifier	root		148510	0					
ANR	148520	ExpressionStatement	root = NULL	62:1:1068:1079	148510	1	True				
ANR	148521	AssignmentExpression	root = NULL		148510	0		=			
ANR	148522	Identifier	root		148510	0					
ANR	148523	Identifier	NULL		148510	1					
ANR	148524	Identifier	BTree :: ~BTree		148510	1					
ANR	148525	ParameterList			148510	2					
ANR	148526	CFGEntryNode	ENTRY		148510		True				
ANR	148527	CFGExitNode	EXIT		148510		True				
ANR	148528	Symbol	NULL		148510						
ANR	148529	Symbol	root		148510						
ANR	148530	Function	BTree :: isEmpty	80:0:1268:1324							
ANR	148531	FunctionDef	BTree :: isEmpty ()		148530	0					
ANR	148532	CompoundStatement		81:0:1300:1324	148530	0					
ANR	148533	ReturnStatement	return NULL == root ;	82:1:1303:1322	148530	0	True				
ANR	148534	EqualityExpression	NULL == root		148530	0		==			
ANR	148535	Identifier	NULL		148530	0					
ANR	148536	Identifier	root		148530	1					
ANR	148537	ReturnType	bool		148530	1					
ANR	148538	Identifier	BTree :: isEmpty		148530	2					
ANR	148539	ParameterList			148530	3					
ANR	148540	CFGEntryNode	ENTRY		148530		True				
ANR	148541	CFGExitNode	EXIT		148530		True				
ANR	148542	Symbol	NULL		148530						
ANR	148543	Symbol	root		148530						
ANR	148544	Function	BTree :: deleteRecursive	99:0:1589:1770							
ANR	148545	FunctionDef	BTree :: deleteRecursive (Btree_Node * pNode)		148544	0					
ANR	148546	CompoundStatement		100:0:1636:1770	148544	0					
ANR	148547	IfStatement	if ( NULL == pNode )		148544	0					
ANR	148548	Condition	NULL == pNode	101:5:1643:1653	148544	0	True				
ANR	148549	EqualityExpression	NULL == pNode		148544	0		==			
ANR	148550	Identifier	NULL		148544	0					
ANR	148551	Identifier	pNode		148544	1					
ANR	148552	ReturnStatement	return ;	102:2:1659:1665	148544	1	True				
ANR	148553	ForStatement	for ( int i = 0 ; i <= pNode -> nkeys ; i ++ )		148544	1					
ANR	148554	ForInit	int i = 0 ;	104:6:1674:1681	148544	0	True				
ANR	148555	IdentifierDeclStatement	int i = 0 ;		148544	0					
ANR	148556	IdentifierDecl	i = 0		148544	0					
ANR	148557	IdentifierDeclType	int		148544	0					
ANR	148558	Identifier	i		148544	1					
ANR	148559	AssignmentExpression	i = 0		148544	2		=			
ANR	148560	Identifier	i		148544	0					
ANR	148561	PrimaryExpression	0		148544	1					
ANR	148562	Condition	i <= pNode -> nkeys	104:15:1683:1697	148544	1	True				
ANR	148563	RelationalExpression	i <= pNode -> nkeys		148544	0		<=			
ANR	148564	Identifier	i		148544	0					
ANR	148565	PtrMemberAccess	pNode -> nkeys		148544	1					
ANR	148566	Identifier	pNode		148544	0					
ANR	148567	Identifier	nkeys		148544	1					
ANR	148568	PostIncDecOperationExpression	i ++	104:32:1700:1702	148544	2	True				
ANR	148569	Identifier	i		148544	0					
ANR	148570	IncDec	++		148544	1					
ANR	148571	ExpressionStatement	deleteRecursive ( ( pNode -> child ) [ i ] )	105:2:1708:1744	148544	3	True				
ANR	148572	CallExpression	deleteRecursive ( ( pNode -> child ) [ i ] )		148544	0					
ANR	148573	Callee	deleteRecursive		148544	0					
ANR	148574	Identifier	deleteRecursive		148544	0					
ANR	148575	ArgumentList	( pNode -> child ) [ i ]		148544	1					
ANR	148576	Argument	( pNode -> child ) [ i ]		148544	0					
ANR	148577	ArrayIndexing	( pNode -> child ) [ i ]		148544	0					
ANR	148578	PtrMemberAccess	pNode -> child		148544	0					
ANR	148579	Identifier	pNode		148544	0					
ANR	148580	Identifier	child		148544	1					
ANR	148581	Identifier	i		148544	1					
ANR	148582	Statement	delete	106:1:1747:1752	148544	2	True				
ANR	148583	ExpressionStatement	pNode	106:8:1754:1759	148544	3	True				
ANR	148584	Identifier	pNode		148544	0					
ANR	148585	ReturnStatement	return ;	107:1:1762:1768	148544	4	True				
ANR	148586	ReturnType	void		148544	1					
ANR	148587	Identifier	BTree :: deleteRecursive		148544	2					
ANR	148588	ParameterList	Btree_Node * pNode		148544	3					
ANR	148589	Parameter	Btree_Node * pNode	99:28:1617:1633	148544	0	True				
ANR	148590	ParameterType	Btree_Node *		148544	0					
ANR	148591	Identifier	pNode		148544	1					
ANR	148592	CFGEntryNode	ENTRY		148544		True				
ANR	148593	CFGExitNode	EXIT		148544		True				
ANR	148594	Symbol	NULL		148544						
ANR	148595	Symbol	* i		148544						
ANR	148596	Symbol	pNode -> child		148544						
ANR	148597	Symbol	* * pNode		148544						
ANR	148598	Symbol	i		148544						
ANR	148599	Symbol	pNode -> nkeys		148544						
ANR	148600	Symbol	* pNode -> child		148544						
ANR	148601	Symbol	* pNode		148544						
ANR	148602	Symbol	pNode		148544						
ANR	148603	Function	BTree :: detachSibling	169:0:5357:6281							
ANR	148604	FunctionDef	"BTree :: detachSibling (Btree_Node * pNode , Btree_Node * * ppSibling , Btree_Pair * pPairUp)"		148603	0					
ANR	148605	CompoundStatement		170:0:5447:6281	148603	0					
ANR	148606	IfStatement	if ( NULL == pNode )		148603	0					
ANR	148607	Condition	NULL == pNode	171:4:5453:5463	148603	0	True				
ANR	148608	EqualityExpression	NULL == pNode		148603	0		==			
ANR	148609	Identifier	NULL		148603	0					
ANR	148610	Identifier	pNode		148603	1					
ANR	148611	ThrowStatement	"throw ""BTree::detachSibling, pNode is NULL"" ;"	171:17:5466:5509	148603	1	True				
ANR	148612	PrimaryExpression	"""BTree::detachSibling, pNode is NULL"""		148603	0					
ANR	148613	IfStatement	if ( NULL == ppSibling )		148603	1					
ANR	148614	Condition	NULL == ppSibling	172:4:5515:5529	148603	0	True				
ANR	148615	EqualityExpression	NULL == ppSibling		148603	0		==			
ANR	148616	Identifier	NULL		148603	0					
ANR	148617	Identifier	ppSibling		148603	1					
ANR	148618	ThrowStatement	"throw ""BTree::detachSibling, ppSIBLING is NULL"" ;"	172:21:5532:5579	148603	1	True				
ANR	148619	PrimaryExpression	"""BTree::detachSibling, ppSIBLING is NULL"""		148603	0					
ANR	148620	IfStatement	if ( NULL == pPairUp )		148603	2					
ANR	148621	Condition	NULL == pPairUp	173:4:5585:5597	148603	0	True				
ANR	148622	EqualityExpression	NULL == pPairUp		148603	0		==			
ANR	148623	Identifier	NULL		148603	0					
ANR	148624	Identifier	pPairUp		148603	1					
ANR	148625	ThrowStatement	"throw ""BTree::detachSibling, pPairUp is NULL"" ;"	173:19:5600:5645	148603	1	True				
ANR	148626	PrimaryExpression	"""BTree::detachSibling, pPairUp is NULL"""		148603	0					
ANR	148627	IdentifierDeclStatement	int i ;	175:1:5649:5654	148603	3	True				
ANR	148628	IdentifierDecl	i		148603	0					
ANR	148629	IdentifierDeclType	int		148603	0					
ANR	148630	Identifier	i		148603	1					
ANR	148631	IfStatement	if ( 2 * t != pNode -> nkeys )		148603	4					
ANR	148632	Condition	2 * t != pNode -> nkeys	178:5:5699:5717	148603	0	True				
ANR	148633	EqualityExpression	2 * t != pNode -> nkeys		148603	0		!=			
ANR	148634	MultiplicativeExpression	2 * t		148603	0		*			
ANR	148635	PrimaryExpression	2		148603	0					
ANR	148636	Identifier	t		148603	1					
ANR	148637	PtrMemberAccess	pNode -> nkeys		148603	1					
ANR	148638	Identifier	pNode		148603	0					
ANR	148639	Identifier	nkeys		148603	1					
ANR	148640	CompoundStatement		9:27:273:273	148603	1					
ANR	148641	ExpressionStatement	* ppSibling = NULL	179:2:5725:5742	148603	0	True				
ANR	148642	AssignmentExpression	* ppSibling = NULL		148603	0		=			
ANR	148643	UnaryOperationExpression	* ppSibling		148603	0					
ANR	148644	UnaryOperator	*		148603	0					
ANR	148645	Identifier	ppSibling		148603	1					
ANR	148646	Identifier	NULL		148603	1					
ANR	148647	ReturnStatement	return ;	180:2:5746:5752	148603	1	True				
ANR	148648	ExpressionStatement		181:2:5756:5756	148603	5	True				
ANR	148649	ExpressionStatement	* pPairUp = ( pNode -> pair ) [ t ]	183:1:5760:5787	148603	6	True				
ANR	148650	AssignmentExpression	* pPairUp = ( pNode -> pair ) [ t ]		148603	0		=			
ANR	148651	UnaryOperationExpression	* pPairUp		148603	0					
ANR	148652	UnaryOperator	*		148603	0					
ANR	148653	Identifier	pPairUp		148603	1					
ANR	148654	ArrayIndexing	( pNode -> pair ) [ t ]		148603	1					
ANR	148655	PtrMemberAccess	pNode -> pair		148603	0					
ANR	148656	Identifier	pNode		148603	0					
ANR	148657	Identifier	pair		148603	1					
ANR	148658	Identifier	t		148603	1					
ANR	148659	Statement	*	185:1:5791:5791	148603	7	True				
ANR	148660	Statement	ppSibling	185:2:5792:5800	148603	8	True				
ANR	148661	Statement	=	185:12:5802:5802	148603	9	True				
ANR	148662	Statement	new	185:14:5804:5806	148603	10	True				
ANR	148663	ExpressionStatement	Btree_Node	185:18:5808:5818	148603	11	True				
ANR	148664	Identifier	Btree_Node		148603	0					
ANR	148665	IfStatement	if ( NULL == * ppSibling )		148603	12					
ANR	148666	Condition	NULL == * ppSibling	186:5:5825:5840	148603	0	True				
ANR	148667	EqualityExpression	NULL == * ppSibling		148603	0		==			
ANR	148668	Identifier	NULL		148603	0					
ANR	148669	UnaryOperationExpression	* ppSibling		148603	1					
ANR	148670	UnaryOperator	*		148603	0					
ANR	148671	Identifier	ppSibling		148603	1					
ANR	148672	ThrowStatement	"throw ""BTree::detachSibling, *ppSibling is NULL"" ;"	187:2:5846:5894	148603	1	True				
ANR	148673	PrimaryExpression	"""BTree::detachSibling, *ppSibling is NULL"""		148603	0					
ANR	148674	ExpressionStatement	( * ppSibling ) -> p = pNode -> p	189:1:5898:5924	148603	13	True				
ANR	148675	AssignmentExpression	( * ppSibling ) -> p = pNode -> p		148603	0		=			
ANR	148676	PtrMemberAccess	( * ppSibling ) -> p		148603	0					
ANR	148677	UnaryOperationExpression	* ppSibling		148603	0					
ANR	148678	UnaryOperator	*		148603	0					
ANR	148679	Identifier	ppSibling		148603	1					
ANR	148680	Identifier	p		148603	1					
ANR	148681	PtrMemberAccess	pNode -> p		148603	1					
ANR	148682	Identifier	pNode		148603	0					
ANR	148683	Identifier	p		148603	1					
ANR	148684	ExpressionStatement	( * ppSibling ) -> nkeys = t - 1	191:1:5928:5953	148603	14	True				
ANR	148685	AssignmentExpression	( * ppSibling ) -> nkeys = t - 1		148603	0		=			
ANR	148686	PtrMemberAccess	( * ppSibling ) -> nkeys		148603	0					
ANR	148687	UnaryOperationExpression	* ppSibling		148603	0					
ANR	148688	UnaryOperator	*		148603	0					
ANR	148689	Identifier	ppSibling		148603	1					
ANR	148690	Identifier	nkeys		148603	1					
ANR	148691	AdditiveExpression	t - 1		148603	1		-			
ANR	148692	Identifier	t		148603	0					
ANR	148693	PrimaryExpression	1		148603	1					
ANR	148694	ExpressionStatement	pNode -> nkeys = t	192:1:5956:5972	148603	15	True				
ANR	148695	AssignmentExpression	pNode -> nkeys = t		148603	0		=			
ANR	148696	PtrMemberAccess	pNode -> nkeys		148603	0					
ANR	148697	Identifier	pNode		148603	0					
ANR	148698	Identifier	nkeys		148603	1					
ANR	148699	Identifier	t		148603	1					
ANR	148700	ForStatement	for ( i = t + 1 ; i <= 2 * t - 1 ; i ++ )		148603	16					
ANR	148701	ForInit	i = t + 1 ;	194:6:5981:5986	148603	0	True				
ANR	148702	AssignmentExpression	i = t + 1		148603	0		=			
ANR	148703	Identifier	i		148603	0					
ANR	148704	AdditiveExpression	t + 1		148603	1		+			
ANR	148705	Identifier	t		148603	0					
ANR	148706	PrimaryExpression	1		148603	1					
ANR	148707	Condition	i <= 2 * t - 1	194:13:5988:5995	148603	1	True				
ANR	148708	RelationalExpression	i <= 2 * t - 1		148603	0		<=			
ANR	148709	Identifier	i		148603	0					
ANR	148710	AdditiveExpression	2 * t - 1		148603	1		-			
ANR	148711	MultiplicativeExpression	2 * t		148603	0		*			
ANR	148712	PrimaryExpression	2		148603	0					
ANR	148713	Identifier	t		148603	1					
ANR	148714	PrimaryExpression	1		148603	1					
ANR	148715	PostIncDecOperationExpression	i ++	194:23:5998:6000	148603	2	True				
ANR	148716	Identifier	i		148603	0					
ANR	148717	IncDec	++		148603	1					
ANR	148718	CompoundStatement		25:29:556:556	148603	3					
ANR	148719	ExpressionStatement	( ( * ppSibling ) -> pair ) [ i - t - 1 ] = ( pNode -> pair ) [ i ]	195:2:6008:6054	148603	0	True				
ANR	148720	AssignmentExpression	( ( * ppSibling ) -> pair ) [ i - t - 1 ] = ( pNode -> pair ) [ i ]		148603	0		=			
ANR	148721	ArrayIndexing	( ( * ppSibling ) -> pair ) [ i - t - 1 ]		148603	0					
ANR	148722	PtrMemberAccess	( * ppSibling ) -> pair		148603	0					
ANR	148723	UnaryOperationExpression	* ppSibling		148603	0					
ANR	148724	UnaryOperator	*		148603	0					
ANR	148725	Identifier	ppSibling		148603	1					
ANR	148726	Identifier	pair		148603	1					
ANR	148727	AdditiveExpression	i - t - 1		148603	1		-			
ANR	148728	Identifier	i		148603	0					
ANR	148729	AdditiveExpression	t - 1		148603	1		-			
ANR	148730	Identifier	t		148603	0					
ANR	148731	PrimaryExpression	1		148603	1					
ANR	148732	ArrayIndexing	( pNode -> pair ) [ i ]		148603	1					
ANR	148733	PtrMemberAccess	pNode -> pair		148603	0					
ANR	148734	Identifier	pNode		148603	0					
ANR	148735	Identifier	pair		148603	1					
ANR	148736	Identifier	i		148603	1					
ANR	148737	ExpressionStatement	( ( * ppSibling ) -> child ) [ i - t - 1 ] = ( pNode -> child ) [ i ]	196:2:6058:6106	148603	1	True				
ANR	148738	AssignmentExpression	( ( * ppSibling ) -> child ) [ i - t - 1 ] = ( pNode -> child ) [ i ]		148603	0		=			
ANR	148739	ArrayIndexing	( ( * ppSibling ) -> child ) [ i - t - 1 ]		148603	0					
ANR	148740	PtrMemberAccess	( * ppSibling ) -> child		148603	0					
ANR	148741	UnaryOperationExpression	* ppSibling		148603	0					
ANR	148742	UnaryOperator	*		148603	0					
ANR	148743	Identifier	ppSibling		148603	1					
ANR	148744	Identifier	child		148603	1					
ANR	148745	AdditiveExpression	i - t - 1		148603	1		-			
ANR	148746	Identifier	i		148603	0					
ANR	148747	AdditiveExpression	t - 1		148603	1		-			
ANR	148748	Identifier	t		148603	0					
ANR	148749	PrimaryExpression	1		148603	1					
ANR	148750	ArrayIndexing	( pNode -> child ) [ i ]		148603	1					
ANR	148751	PtrMemberAccess	pNode -> child		148603	0					
ANR	148752	Identifier	pNode		148603	0					
ANR	148753	Identifier	child		148603	1					
ANR	148754	Identifier	i		148603	1					
ANR	148755	ExpressionStatement		197:2:6110:6110	148603	17	True				
ANR	148756	ExpressionStatement	( ( * ppSibling ) -> child ) [ t - 1 ] = ( pNode -> child ) [ 2 * t ]	198:1:6113:6161	148603	18	True				
ANR	148757	AssignmentExpression	( ( * ppSibling ) -> child ) [ t - 1 ] = ( pNode -> child ) [ 2 * t ]		148603	0		=			
ANR	148758	ArrayIndexing	( ( * ppSibling ) -> child ) [ t - 1 ]		148603	0					
ANR	148759	PtrMemberAccess	( * ppSibling ) -> child		148603	0					
ANR	148760	UnaryOperationExpression	* ppSibling		148603	0					
ANR	148761	UnaryOperator	*		148603	0					
ANR	148762	Identifier	ppSibling		148603	1					
ANR	148763	Identifier	child		148603	1					
ANR	148764	AdditiveExpression	t - 1		148603	1		-			
ANR	148765	Identifier	t		148603	0					
ANR	148766	PrimaryExpression	1		148603	1					
ANR	148767	ArrayIndexing	( pNode -> child ) [ 2 * t ]		148603	1					
ANR	148768	PtrMemberAccess	pNode -> child		148603	0					
ANR	148769	Identifier	pNode		148603	0					
ANR	148770	Identifier	child		148603	1					
ANR	148771	MultiplicativeExpression	2 * t		148603	1		*			
ANR	148772	PrimaryExpression	2		148603	0					
ANR	148773	Identifier	t		148603	1					
ANR	148774	ForStatement	for ( i = 0 ; i <= t - 1 ; i ++ )		148603	19					
ANR	148775	ForInit	i = 0 ;	200:6:6170:6173	148603	0	True				
ANR	148776	AssignmentExpression	i = 0		148603	0		=			
ANR	148777	Identifier	i		148603	0					
ANR	148778	PrimaryExpression	0		148603	1					
ANR	148779	Condition	i <= t - 1	200:11:6175:6180	148603	1	True				
ANR	148780	RelationalExpression	i <= t - 1		148603	0		<=			
ANR	148781	Identifier	i		148603	0					
ANR	148782	AdditiveExpression	t - 1		148603	1		-			
ANR	148783	Identifier	t		148603	0					
ANR	148784	PrimaryExpression	1		148603	1					
ANR	148785	PostIncDecOperationExpression	i ++	200:19:6183:6185	148603	2	True				
ANR	148786	Identifier	i		148603	0					
ANR	148787	IncDec	++		148603	1					
ANR	148788	CompoundStatement		31:25:741:741	148603	3					
ANR	148789	IfStatement	if ( ( ( * ppSibling ) -> child ) [ i ] )		148603	0					
ANR	148790	Condition	( ( * ppSibling ) -> child ) [ i ]	201:6:6197:6220	148603	0	True				
ANR	148791	ArrayIndexing	( ( * ppSibling ) -> child ) [ i ]		148603	0					
ANR	148792	PtrMemberAccess	( * ppSibling ) -> child		148603	0					
ANR	148793	UnaryOperationExpression	* ppSibling		148603	0					
ANR	148794	UnaryOperator	*		148603	0					
ANR	148795	Identifier	ppSibling		148603	1					
ANR	148796	Identifier	child		148603	1					
ANR	148797	Identifier	i		148603	1					
ANR	148798	CompoundStatement		32:33:776:776	148603	1					
ANR	148799	ExpressionStatement	( ( * ppSibling ) -> child ) [ i ] -> p = * ppSibling	202:3:6229:6269	148603	0	True				
ANR	148800	AssignmentExpression	( ( * ppSibling ) -> child ) [ i ] -> p = * ppSibling		148603	0		=			
ANR	148801	PtrMemberAccess	( ( * ppSibling ) -> child ) [ i ] -> p		148603	0					
ANR	148802	ArrayIndexing	( ( * ppSibling ) -> child ) [ i ]		148603	0					
ANR	148803	PtrMemberAccess	( * ppSibling ) -> child		148603	0					
ANR	148804	UnaryOperationExpression	* ppSibling		148603	0					
ANR	148805	UnaryOperator	*		148603	0					
ANR	148806	Identifier	ppSibling		148603	1					
ANR	148807	Identifier	child		148603	1					
ANR	148808	Identifier	i		148603	1					
ANR	148809	Identifier	p		148603	1					
ANR	148810	UnaryOperationExpression	* ppSibling		148603	1					
ANR	148811	UnaryOperator	*		148603	0					
ANR	148812	Identifier	ppSibling		148603	1					
ANR	148813	ExpressionStatement		203:3:6274:6274	148603	1	True				
ANR	148814	ExpressionStatement		204:2:6278:6278	148603	20	True				
ANR	148815	ReturnType	void		148603	1					
ANR	148816	Identifier	BTree :: detachSibling		148603	2					
ANR	148817	ParameterList	"Btree_Node * pNode , Btree_Node * * ppSibling , Btree_Pair * pPairUp"		148603	3					
ANR	148818	Parameter	Btree_Node * pNode	169:26:5383:5399	148603	0	True				
ANR	148819	ParameterType	Btree_Node *		148603	0					
ANR	148820	Identifier	pNode		148603	1					
ANR	148821	Parameter	Btree_Node * * ppSibling	169:45:5402:5423	148603	1	True				
ANR	148822	ParameterType	Btree_Node * *		148603	0					
ANR	148823	Identifier	ppSibling		148603	1					
ANR	148824	Parameter	Btree_Pair * pPairUp	169:69:5426:5444	148603	2	True				
ANR	148825	ParameterType	Btree_Pair *		148603	0					
ANR	148826	Identifier	pPairUp		148603	1					
ANR	148827	CFGEntryNode	ENTRY		148603		True				
ANR	148828	CFGExitNode	EXIT		148603		True				
ANR	148829	CFGExceptionNode	EXCEPTION		148603		True				
ANR	148830	CFGExceptionNode	EXCEPTION		148603		True				
ANR	148831	CFGExceptionNode	EXCEPTION		148603		True				
ANR	148832	CFGExceptionNode	EXCEPTION		148603		True				
ANR	148833	CFGExceptionNode	EXCEPTION		148603		True				
ANR	148834	CFGExceptionNode	EXCEPTION		148603		True				
ANR	148835	CFGExceptionNode	EXCEPTION		148603		True				
ANR	148836	Symbol	* ( * ppSibling ) -> child		148603						
ANR	148837	Symbol	* pNode -> pair		148603						
ANR	148838	Symbol	( * ppSibling ) -> child		148603						
ANR	148839	Symbol	* ( * ppSibling ) -> pair		148603						
ANR	148840	Symbol	* pPairUp		148603						
ANR	148841	Symbol	pNode -> nkeys		148603						
ANR	148842	Symbol	* * ( * ppSibling ) -> child		148603						
ANR	148843	Symbol	pNode -> child		148603						
ANR	148844	Symbol	pNode		148603						
ANR	148845	Symbol	* * * * ppSibling		148603						
ANR	148846	Symbol	( ( * ppSibling ) -> child ) [ i ] -> p		148603						
ANR	148847	Symbol	pPairUp		148603						
ANR	148848	Symbol	* * i		148603						
ANR	148849	Symbol	NULL		148603						
ANR	148850	Symbol	( * ppSibling ) -> nkeys		148603						
ANR	148851	Symbol	i		148603						
ANR	148852	Symbol	* pNode		148603						
ANR	148853	Symbol	( * ppSibling ) -> p		148603						
ANR	148854	Symbol	pNode -> p		148603						
ANR	148855	Symbol	* * ppSibling		148603						
ANR	148856	Symbol	* i		148603						
ANR	148857	Symbol	t		148603						
ANR	148858	Symbol	pNode -> pair		148603						
ANR	148859	Symbol	* * pNode		148603						
ANR	148860	Symbol	* pNode -> child		148603						
ANR	148861	Symbol	* ppSibling		148603						
ANR	148862	Symbol	* * * ppSibling		148603						
ANR	148863	Symbol	( * ppSibling ) -> pair		148603						
ANR	148864	Symbol	* t		148603						
ANR	148865	Symbol	ppSibling		148603						
ANR	148866	Function	BTree :: attachSibling	267:0:9550:11442							
ANR	148867	FunctionDef	"BTree :: attachSibling (Btree_Node * pNode , Btree_Node * pRightSibling)"		148866	0					
ANR	148868	CompoundStatement		268:0:9622:11442	148866	0					
ANR	148869	IfStatement	if ( NULL == pNode )		148866	0					
ANR	148870	Condition	NULL == pNode	269:4:9628:9638	148866	0	True				
ANR	148871	EqualityExpression	NULL == pNode		148866	0		==			
ANR	148872	Identifier	NULL		148866	0					
ANR	148873	Identifier	pNode		148866	1					
ANR	148874	ThrowStatement	"throw ""BTree::attachSibling, pNode is NULL"" ;"	269:17:9641:9684	148866	1	True				
ANR	148875	PrimaryExpression	"""BTree::attachSibling, pNode is NULL"""		148866	0					
ANR	148876	IfStatement	if ( NULL == pRightSibling )		148866	1					
ANR	148877	Condition	NULL == pRightSibling	270:4:9690:9708	148866	0	True				
ANR	148878	EqualityExpression	NULL == pRightSibling		148866	0		==			
ANR	148879	Identifier	NULL		148866	0					
ANR	148880	Identifier	pRightSibling		148866	1					
ANR	148881	ThrowStatement	"throw ""BTree::attachSibling, pRightSibling is NULL"" ;"	270:25:9711:9762	148866	1	True				
ANR	148882	PrimaryExpression	"""BTree::attachSibling, pRightSibling is NULL"""		148866	0					
ANR	148883	IfStatement	if ( pNode -> nkeys + pRightSibling -> nkeys > 2 * t - 2 )		148866	2					
ANR	148884	Condition	pNode -> nkeys + pRightSibling -> nkeys > 2 * t - 2	271:5:9769:9811	148866	0	True				
ANR	148885	RelationalExpression	pNode -> nkeys + pRightSibling -> nkeys > 2 * t - 2		148866	0		>			
ANR	148886	AdditiveExpression	pNode -> nkeys + pRightSibling -> nkeys		148866	0		+			
ANR	148887	PtrMemberAccess	pNode -> nkeys		148866	0					
ANR	148888	Identifier	pNode		148866	0					
ANR	148889	Identifier	nkeys		148866	1					
ANR	148890	PtrMemberAccess	pRightSibling -> nkeys		148866	1					
ANR	148891	Identifier	pRightSibling		148866	0					
ANR	148892	Identifier	nkeys		148866	1					
ANR	148893	AdditiveExpression	2 * t - 2		148866	1		-			
ANR	148894	MultiplicativeExpression	2 * t		148866	0		*			
ANR	148895	PrimaryExpression	2		148866	0					
ANR	148896	Identifier	t		148866	1					
ANR	148897	PrimaryExpression	2		148866	1					
ANR	148898	ThrowStatement	"throw ""BTree::attachSibling, too many keys"" ;"	271:51:9815:9858	148866	1	True				
ANR	148899	PrimaryExpression	"""BTree::attachSibling, too many keys"""		148866	0					
ANR	148900	IdentifierDeclStatement	Btree_Node * pParent ;	273:1:9879:9898	148866	3	True				
ANR	148901	IdentifierDecl	* pParent		148866	0					
ANR	148902	IdentifierDeclType	Btree_Node *		148866	0					
ANR	148903	Identifier	pParent		148866	1					
ANR	148904	IdentifierDeclStatement	"int i , j , h ;"	274:1:9901:9910	148866	4	True				
ANR	148905	IdentifierDecl	i		148866	0					
ANR	148906	IdentifierDeclType	int		148866	0					
ANR	148907	Identifier	i		148866	1					
ANR	148908	IdentifierDecl	j		148866	1					
ANR	148909	IdentifierDeclType	int		148866	0					
ANR	148910	Identifier	j		148866	1					
ANR	148911	IdentifierDecl	h		148866	2					
ANR	148912	IdentifierDeclType	int		148866	0					
ANR	148913	Identifier	h		148866	1					
ANR	148914	ExpressionStatement	pParent = pNode -> p	277:1:10006:10024	148866	5	True				
ANR	148915	AssignmentExpression	pParent = pNode -> p		148866	0		=			
ANR	148916	Identifier	pParent		148866	0					
ANR	148917	PtrMemberAccess	pNode -> p		148866	1					
ANR	148918	Identifier	pNode		148866	0					
ANR	148919	Identifier	p		148866	1					
ANR	148920	IfStatement	if ( NULL == pParent )		148866	6					
ANR	148921	Condition	NULL == pParent	278:5:10031:10045	148866	0	True				
ANR	148922	EqualityExpression	NULL == pParent		148866	0		==			
ANR	148923	Identifier	NULL		148866	0					
ANR	148924	Identifier	pParent		148866	1					
ANR	148925	CompoundStatement		11:23:426:426	148866	1					
ANR	148926	ExpressionStatement	"printf ( ""cannot happen, because pNode has a sibling\\n"" )"	278:25:10051:10105	148866	0	True				
ANR	148927	CallExpression	"printf ( ""cannot happen, because pNode has a sibling\\n"" )"		148866	0					
ANR	148928	Callee	printf		148866	0					
ANR	148929	Identifier	printf		148866	0					
ANR	148930	ArgumentList	"""cannot happen, because pNode has a sibling\\n"""		148866	1					
ANR	148931	Argument	"""cannot happen, because pNode has a sibling\\n"""		148866	0					
ANR	148932	PrimaryExpression	"""cannot happen, because pNode has a sibling\\n"""		148866	0					
ANR	148933	ReturnStatement	return ;	278:81:10107:10113	148866	1	True				
ANR	148934	ForStatement	for ( i = 0 ; i < pParent -> nkeys ; i ++ )		148866	7					
ANR	148935	ForInit	i = 0 ;	279:6:10123:10126	148866	0	True				
ANR	148936	AssignmentExpression	i = 0		148866	0		=			
ANR	148937	Identifier	i		148866	0					
ANR	148938	PrimaryExpression	0		148866	1					
ANR	148939	Condition	i < pParent -> nkeys	279:11:10128:10143	148866	1	True				
ANR	148940	RelationalExpression	i < pParent -> nkeys		148866	0		<			
ANR	148941	Identifier	i		148866	0					
ANR	148942	PtrMemberAccess	pParent -> nkeys		148866	1					
ANR	148943	Identifier	pParent		148866	0					
ANR	148944	Identifier	nkeys		148866	1					
ANR	148945	PostIncDecOperationExpression	i ++	279:29:10146:10148	148866	2	True				
ANR	148946	Identifier	i		148866	0					
ANR	148947	IncDec	++		148866	1					
ANR	148948	IfStatement	if ( ( pParent -> child ) [ i ] == pNode )		148866	3					
ANR	148949	Condition	( pParent -> child ) [ i ] == pNode	280:6:10206:10233	148866	0	True				
ANR	148950	EqualityExpression	( pParent -> child ) [ i ] == pNode		148866	0		==			
ANR	148951	ArrayIndexing	( pParent -> child ) [ i ]		148866	0					
ANR	148952	PtrMemberAccess	pParent -> child		148866	0					
ANR	148953	Identifier	pParent		148866	0					
ANR	148954	Identifier	child		148866	1					
ANR	148955	Identifier	i		148866	1					
ANR	148956	Identifier	pNode		148866	1					
ANR	148957	BreakStatement	break ;	280:37:10237:10242	148866	1	True				
ANR	148958	IfStatement	if ( i == pParent -> nkeys )		148866	8					
ANR	148959	Condition	i == pParent -> nkeys	281:5:10249:10267	148866	0	True				
ANR	148960	EqualityExpression	i == pParent -> nkeys		148866	0		==			
ANR	148961	Identifier	i		148866	0					
ANR	148962	PtrMemberAccess	pParent -> nkeys		148866	1					
ANR	148963	Identifier	pParent		148866	0					
ANR	148964	Identifier	nkeys		148866	1					
ANR	148965	CompoundStatement		14:27:648:648	148866	1					
ANR	148966	ExpressionStatement	"printf ( ""cannot happen, because pNode has a sibling on the right\\n"" )"	281:29:10273:10340	148866	0	True				
ANR	148967	CallExpression	"printf ( ""cannot happen, because pNode has a sibling on the right\\n"" )"		148866	0					
ANR	148968	Callee	printf		148866	0					
ANR	148969	Identifier	printf		148866	0					
ANR	148970	ArgumentList	"""cannot happen, because pNode has a sibling on the right\\n"""		148866	1					
ANR	148971	Argument	"""cannot happen, because pNode has a sibling on the right\\n"""		148866	0					
ANR	148972	PrimaryExpression	"""cannot happen, because pNode has a sibling on the right\\n"""		148866	0					
ANR	148973	ReturnStatement	return ;	281:98:10342:10348	148866	1	True				
ANR	148974	ExpressionStatement	j = pNode -> nkeys	284:1:10392:10408	148866	9	True				
ANR	148975	AssignmentExpression	j = pNode -> nkeys		148866	0		=			
ANR	148976	Identifier	j		148866	0					
ANR	148977	PtrMemberAccess	pNode -> nkeys		148866	1					
ANR	148978	Identifier	pNode		148866	0					
ANR	148979	Identifier	nkeys		148866	1					
ANR	148980	ExpressionStatement	( pNode -> pair ) [ j ] = ( pParent -> pair ) [ i ]	285:1:10411:10448	148866	10	True				
ANR	148981	AssignmentExpression	( pNode -> pair ) [ j ] = ( pParent -> pair ) [ i ]		148866	0		=			
ANR	148982	ArrayIndexing	( pNode -> pair ) [ j ]		148866	0					
ANR	148983	PtrMemberAccess	pNode -> pair		148866	0					
ANR	148984	Identifier	pNode		148866	0					
ANR	148985	Identifier	pair		148866	1					
ANR	148986	Identifier	j		148866	1					
ANR	148987	ArrayIndexing	( pParent -> pair ) [ i ]		148866	1					
ANR	148988	PtrMemberAccess	pParent -> pair		148866	0					
ANR	148989	Identifier	pParent		148866	0					
ANR	148990	Identifier	pair		148866	1					
ANR	148991	Identifier	i		148866	1					
ANR	148992	ExpressionStatement	j ++	286:1:10451:10454	148866	11	True				
ANR	148993	PostIncDecOperationExpression	j ++		148866	0					
ANR	148994	Identifier	j		148866	0					
ANR	148995	IncDec	++		148866	1					
ANR	148996	ForStatement	"for ( h = 0 ; h < pRightSibling -> nkeys ; h ++ , j ++ )"		148866	12					
ANR	148997	ForInit	h = 0 ;	289:6:10539:10542	148866	0	True				
ANR	148998	AssignmentExpression	h = 0		148866	0		=			
ANR	148999	Identifier	h		148866	0					
ANR	149000	PrimaryExpression	0		148866	1					
ANR	149001	Condition	h < pRightSibling -> nkeys	289:11:10544:10565	148866	1	True				
ANR	149002	RelationalExpression	h < pRightSibling -> nkeys		148866	0		<			
ANR	149003	Identifier	h		148866	0					
ANR	149004	PtrMemberAccess	pRightSibling -> nkeys		148866	1					
ANR	149005	Identifier	pRightSibling		148866	0					
ANR	149006	Identifier	nkeys		148866	1					
ANR	149007	Expression	"h ++ , j ++"	289:35:10568:10574	148866	2	True				
ANR	149008	PostIncDecOperationExpression	h ++		148866	0					
ANR	149009	Identifier	h		148866	0					
ANR	149010	IncDec	++		148866	1					
ANR	149011	PostIncDecOperationExpression	j ++		148866	1					
ANR	149012	Identifier	j		148866	0					
ANR	149013	IncDec	++		148866	1					
ANR	149014	CompoundStatement		22:44:954:954	148866	3					
ANR	149015	ExpressionStatement	( pNode -> pair ) [ j ] = ( pRightSibling -> pair ) [ h ]	290:2:10581:10624	148866	0	True				
ANR	149016	AssignmentExpression	( pNode -> pair ) [ j ] = ( pRightSibling -> pair ) [ h ]		148866	0		=			
ANR	149017	ArrayIndexing	( pNode -> pair ) [ j ]		148866	0					
ANR	149018	PtrMemberAccess	pNode -> pair		148866	0					
ANR	149019	Identifier	pNode		148866	0					
ANR	149020	Identifier	pair		148866	1					
ANR	149021	Identifier	j		148866	1					
ANR	149022	ArrayIndexing	( pRightSibling -> pair ) [ h ]		148866	1					
ANR	149023	PtrMemberAccess	pRightSibling -> pair		148866	0					
ANR	149024	Identifier	pRightSibling		148866	0					
ANR	149025	Identifier	pair		148866	1					
ANR	149026	Identifier	h		148866	1					
ANR	149027	ExpressionStatement	( pNode -> child ) [ j ] = ( pRightSibling -> child ) [ h ]	291:2:10628:10673	148866	1	True				
ANR	149028	AssignmentExpression	( pNode -> child ) [ j ] = ( pRightSibling -> child ) [ h ]		148866	0		=			
ANR	149029	ArrayIndexing	( pNode -> child ) [ j ]		148866	0					
ANR	149030	PtrMemberAccess	pNode -> child		148866	0					
ANR	149031	Identifier	pNode		148866	0					
ANR	149032	Identifier	child		148866	1					
ANR	149033	Identifier	j		148866	1					
ANR	149034	ArrayIndexing	( pRightSibling -> child ) [ h ]		148866	1					
ANR	149035	PtrMemberAccess	pRightSibling -> child		148866	0					
ANR	149036	Identifier	pRightSibling		148866	0					
ANR	149037	Identifier	child		148866	1					
ANR	149038	Identifier	h		148866	1					
ANR	149039	ExpressionStatement		292:2:10677:10677	148866	13	True				
ANR	149040	ExpressionStatement	( pNode -> child ) [ j ] = ( pRightSibling -> child ) [ h ]	293:1:10680:10725	148866	14	True				
ANR	149041	AssignmentExpression	( pNode -> child ) [ j ] = ( pRightSibling -> child ) [ h ]		148866	0		=			
ANR	149042	ArrayIndexing	( pNode -> child ) [ j ]		148866	0					
ANR	149043	PtrMemberAccess	pNode -> child		148866	0					
ANR	149044	Identifier	pNode		148866	0					
ANR	149045	Identifier	child		148866	1					
ANR	149046	Identifier	j		148866	1					
ANR	149047	ArrayIndexing	( pRightSibling -> child ) [ h ]		148866	1					
ANR	149048	PtrMemberAccess	pRightSibling -> child		148866	0					
ANR	149049	Identifier	pRightSibling		148866	0					
ANR	149050	Identifier	child		148866	1					
ANR	149051	Identifier	h		148866	1					
ANR	149052	ForStatement	for ( h = 0 ; h <= pRightSibling -> nkeys ; h ++ )		148866	15					
ANR	149053	ForInit	h = 0 ;	296:6:10848:10851	148866	0	True				
ANR	149054	AssignmentExpression	h = 0		148866	0		=			
ANR	149055	Identifier	h		148866	0					
ANR	149056	PrimaryExpression	0		148866	1					
ANR	149057	Condition	h <= pRightSibling -> nkeys	296:11:10853:10875	148866	1	True				
ANR	149058	RelationalExpression	h <= pRightSibling -> nkeys		148866	0		<=			
ANR	149059	Identifier	h		148866	0					
ANR	149060	PtrMemberAccess	pRightSibling -> nkeys		148866	1					
ANR	149061	Identifier	pRightSibling		148866	0					
ANR	149062	Identifier	nkeys		148866	1					
ANR	149063	PostIncDecOperationExpression	h ++	296:36:10878:10880	148866	2	True				
ANR	149064	Identifier	h		148866	0					
ANR	149065	IncDec	++		148866	1					
ANR	149066	CompoundStatement		29:41:1260:1260	148866	3					
ANR	149067	IfStatement	if ( NULL != ( pRightSibling -> child ) [ h ] )		148866	0					
ANR	149068	Condition	NULL != ( pRightSibling -> child ) [ h ]	297:6:10891:10923	148866	0	True				
ANR	149069	EqualityExpression	NULL != ( pRightSibling -> child ) [ h ]		148866	0		!=			
ANR	149070	Identifier	NULL		148866	0					
ANR	149071	ArrayIndexing	( pRightSibling -> child ) [ h ]		148866	1					
ANR	149072	PtrMemberAccess	pRightSibling -> child		148866	0					
ANR	149073	Identifier	pRightSibling		148866	0					
ANR	149074	Identifier	child		148866	1					
ANR	149075	Identifier	h		148866	1					
ANR	149076	ExpressionStatement	( ( pRightSibling -> child ) [ h ] ) -> p = pNode	298:3:10930:10968	148866	1	True				
ANR	149077	AssignmentExpression	( ( pRightSibling -> child ) [ h ] ) -> p = pNode		148866	0		=			
ANR	149078	PtrMemberAccess	( ( pRightSibling -> child ) [ h ] ) -> p		148866	0					
ANR	149079	ArrayIndexing	( pRightSibling -> child ) [ h ]		148866	0					
ANR	149080	PtrMemberAccess	pRightSibling -> child		148866	0					
ANR	149081	Identifier	pRightSibling		148866	0					
ANR	149082	Identifier	child		148866	1					
ANR	149083	Identifier	h		148866	1					
ANR	149084	Identifier	p		148866	1					
ANR	149085	Identifier	pNode		148866	1					
ANR	149086	ExpressionStatement		299:2:10972:10972	148866	16	True				
ANR	149087	ForStatement	for ( h = i + 1 ; h < pParent -> nkeys ; h ++ )		148866	17					
ANR	149088	ForInit	h = i + 1 ;	302:6:11074:11079	148866	0	True				
ANR	149089	AssignmentExpression	h = i + 1		148866	0		=			
ANR	149090	Identifier	h		148866	0					
ANR	149091	AdditiveExpression	i + 1		148866	1		+			
ANR	149092	Identifier	i		148866	0					
ANR	149093	PrimaryExpression	1		148866	1					
ANR	149094	Condition	h < pParent -> nkeys	302:13:11081:11096	148866	1	True				
ANR	149095	RelationalExpression	h < pParent -> nkeys		148866	0		<			
ANR	149096	Identifier	h		148866	0					
ANR	149097	PtrMemberAccess	pParent -> nkeys		148866	1					
ANR	149098	Identifier	pParent		148866	0					
ANR	149099	Identifier	nkeys		148866	1					
ANR	149100	PostIncDecOperationExpression	h ++	302:31:11099:11101	148866	2	True				
ANR	149101	Identifier	h		148866	0					
ANR	149102	IncDec	++		148866	1					
ANR	149103	CompoundStatement		35:37:1482:1482	148866	3					
ANR	149104	ExpressionStatement	( pParent -> pair ) [ h - 1 ] = ( pParent -> pair ) [ h ]	303:2:11109:11150	148866	0	True				
ANR	149105	AssignmentExpression	( pParent -> pair ) [ h - 1 ] = ( pParent -> pair ) [ h ]		148866	0		=			
ANR	149106	ArrayIndexing	( pParent -> pair ) [ h - 1 ]		148866	0					
ANR	149107	PtrMemberAccess	pParent -> pair		148866	0					
ANR	149108	Identifier	pParent		148866	0					
ANR	149109	Identifier	pair		148866	1					
ANR	149110	AdditiveExpression	h - 1		148866	1		-			
ANR	149111	Identifier	h		148866	0					
ANR	149112	PrimaryExpression	1		148866	1					
ANR	149113	ArrayIndexing	( pParent -> pair ) [ h ]		148866	1					
ANR	149114	PtrMemberAccess	pParent -> pair		148866	0					
ANR	149115	Identifier	pParent		148866	0					
ANR	149116	Identifier	pair		148866	1					
ANR	149117	Identifier	h		148866	1					
ANR	149118	ExpressionStatement	( pParent -> child ) [ h ] = ( pParent -> child ) [ h + 1 ]	304:2:11154:11197	148866	1	True				
ANR	149119	AssignmentExpression	( pParent -> child ) [ h ] = ( pParent -> child ) [ h + 1 ]		148866	0		=			
ANR	149120	ArrayIndexing	( pParent -> child ) [ h ]		148866	0					
ANR	149121	PtrMemberAccess	pParent -> child		148866	0					
ANR	149122	Identifier	pParent		148866	0					
ANR	149123	Identifier	child		148866	1					
ANR	149124	Identifier	h		148866	1					
ANR	149125	ArrayIndexing	( pParent -> child ) [ h + 1 ]		148866	1					
ANR	149126	PtrMemberAccess	pParent -> child		148866	0					
ANR	149127	Identifier	pParent		148866	0					
ANR	149128	Identifier	child		148866	1					
ANR	149129	AdditiveExpression	h + 1		148866	1		+			
ANR	149130	Identifier	h		148866	0					
ANR	149131	PrimaryExpression	1		148866	1					
ANR	149132	ExpressionStatement		305:2:11201:11201	148866	18	True				
ANR	149133	ExpressionStatement	( pParent -> nkeys ) --	306:1:11204:11222	148866	19	True				
ANR	149134	PostIncDecOperationExpression	( pParent -> nkeys ) --		148866	0					
ANR	149135	PtrMemberAccess	pParent -> nkeys		148866	0					
ANR	149136	Identifier	pParent		148866	0					
ANR	149137	Identifier	nkeys		148866	1					
ANR	149138	IncDec	--		148866	1					
ANR	149139	ExpressionStatement	( pNode -> nkeys ) += ( pRightSibling -> nkeys ) + 1	309:1:11333:11377	148866	20	True				
ANR	149140	AssignmentExpression	( pNode -> nkeys ) += ( pRightSibling -> nkeys ) + 1		148866	0		+=			
ANR	149141	PtrMemberAccess	pNode -> nkeys		148866	0					
ANR	149142	Identifier	pNode		148866	0					
ANR	149143	Identifier	nkeys		148866	1					
ANR	149144	AdditiveExpression	( pRightSibling -> nkeys ) + 1		148866	1		+			
ANR	149145	PtrMemberAccess	pRightSibling -> nkeys		148866	0					
ANR	149146	Identifier	pRightSibling		148866	0					
ANR	149147	Identifier	nkeys		148866	1					
ANR	149148	PrimaryExpression	1		148866	1					
ANR	149149	Statement	delete	312:1:11420:11425	148866	21	True				
ANR	149150	ExpressionStatement	pRightSibling	312:8:11427:11440	148866	22	True				
ANR	149151	Identifier	pRightSibling		148866	0					
ANR	149152	ReturnType	void		148866	1					
ANR	149153	Identifier	BTree :: attachSibling		148866	2					
ANR	149154	ParameterList	"Btree_Node * pNode , Btree_Node * pRightSibling"		148866	3					
ANR	149155	Parameter	Btree_Node * pNode	267:26:9576:9592	148866	0	True				
ANR	149156	ParameterType	Btree_Node *		148866	0					
ANR	149157	Identifier	pNode		148866	1					
ANR	149158	Parameter	Btree_Node * pRightSibling	267:45:9595:9619	148866	1	True				
ANR	149159	ParameterType	Btree_Node *		148866	0					
ANR	149160	Identifier	pRightSibling		148866	1					
ANR	149161	CFGEntryNode	ENTRY		148866		True				
ANR	149162	CFGExitNode	EXIT		148866		True				
ANR	149163	CFGExceptionNode	EXCEPTION		148866		True				
ANR	149164	CFGExceptionNode	EXCEPTION		148866		True				
ANR	149165	CFGExceptionNode	EXCEPTION		148866		True				
ANR	149166	CFGExceptionNode	EXCEPTION		148866		True				
ANR	149167	CFGExceptionNode	EXCEPTION		148866		True				
ANR	149168	Symbol	* pNode -> pair		148866						
ANR	149169	Symbol	pRightSibling -> child		148866						
ANR	149170	Symbol	pRightSibling		148866						
ANR	149171	Symbol	* pRightSibling -> child		148866						
ANR	149172	Symbol	pNode -> nkeys		148866						
ANR	149173	Symbol	( ( pRightSibling -> child ) [ h ] ) -> p		148866						
ANR	149174	Symbol	* * pRightSibling		148866						
ANR	149175	Symbol	* * pParent		148866						
ANR	149176	Symbol	pNode -> child		148866						
ANR	149177	Symbol	pParent -> child		148866						
ANR	149178	Symbol	* pParent -> pair		148866						
ANR	149179	Symbol	pNode		148866						
ANR	149180	Symbol	* * * pRightSibling		148866						
ANR	149181	Symbol	NULL		148866						
ANR	149182	Symbol	* * h		148866						
ANR	149183	Symbol	h		148866						
ANR	149184	Symbol	i		148866						
ANR	149185	Symbol	j		148866						
ANR	149186	Symbol	* pRightSibling		148866						
ANR	149187	Symbol	pRightSibling -> nkeys		148866						
ANR	149188	Symbol	* pNode		148866						
ANR	149189	Symbol	* pParent		148866						
ANR	149190	Symbol	* pRightSibling -> pair		148866						
ANR	149191	Symbol	pNode -> p		148866						
ANR	149192	Symbol	* h		148866						
ANR	149193	Symbol	pParent		148866						
ANR	149194	Symbol	* i		148866						
ANR	149195	Symbol	pRightSibling -> pair		148866						
ANR	149196	Symbol	t		148866						
ANR	149197	Symbol	* j		148866						
ANR	149198	Symbol	pNode -> pair		148866						
ANR	149199	Symbol	* * pNode		148866						
ANR	149200	Symbol	pParent -> pair		148866						
ANR	149201	Symbol	* * pRightSibling -> child		148866						
ANR	149202	Symbol	* pNode -> child		148866						
ANR	149203	Symbol	* pParent -> child		148866						
ANR	149204	Symbol	pParent -> nkeys		148866						
ANR	149205	Function	BTree :: leftSibling	330:0:11718:12423							
ANR	149206	FunctionDef	BTree :: leftSibling (Btree_Node * pNode)		149205	0					
ANR	149207	CompoundStatement		331:0:11768:12423	149205	0					
ANR	149208	IfStatement	if ( NULL == pNode )		149205	0					
ANR	149209	Condition	NULL == pNode	332:4:11774:11784	149205	0	True				
ANR	149210	EqualityExpression	NULL == pNode		149205	0		==			
ANR	149211	Identifier	NULL		149205	0					
ANR	149212	Identifier	pNode		149205	1					
ANR	149213	ThrowStatement	"throw ""BTree::leftSibling, pNode is NULL"" ;"	332:17:11787:11828	149205	1	True				
ANR	149214	PrimaryExpression	"""BTree::leftSibling, pNode is NULL"""		149205	0					
ANR	149215	IdentifierDeclStatement	Btree_Node * pParent ;	334:1:11832:11851	149205	1	True				
ANR	149216	IdentifierDecl	* pParent		149205	0					
ANR	149217	IdentifierDeclType	Btree_Node *		149205	0					
ANR	149218	Identifier	pParent		149205	1					
ANR	149219	IdentifierDeclStatement	int i ;	335:1:11854:11859	149205	2	True				
ANR	149220	IdentifierDecl	i		149205	0					
ANR	149221	IdentifierDeclType	int		149205	0					
ANR	149222	Identifier	i		149205	1					
ANR	149223	ExpressionStatement	pParent = pNode -> p	338:1:11925:11943	149205	3	True				
ANR	149224	AssignmentExpression	pParent = pNode -> p		149205	0		=			
ANR	149225	Identifier	pParent		149205	0					
ANR	149226	PtrMemberAccess	pNode -> p		149205	1					
ANR	149227	Identifier	pNode		149205	0					
ANR	149228	Identifier	p		149205	1					
ANR	149229	IfStatement	if ( NULL == pParent )		149205	4					
ANR	149230	Condition	NULL == pParent	339:5:11950:11964	149205	0	True				
ANR	149231	EqualityExpression	NULL == pParent		149205	0		==			
ANR	149232	Identifier	NULL		149205	0					
ANR	149233	Identifier	pParent		149205	1					
ANR	149234	ReturnStatement	return NULL ;	340:2:11970:11981	149205	1	True				
ANR	149235	Identifier	NULL		149205	0					
ANR	149236	ForStatement	for ( i = 0 ; i <= pParent -> nkeys ; i ++ )		149205	5					
ANR	149237	ForInit	i = 0 ;	343:6:12078:12081	149205	0	True				
ANR	149238	AssignmentExpression	i = 0		149205	0		=			
ANR	149239	Identifier	i		149205	0					
ANR	149240	PrimaryExpression	0		149205	1					
ANR	149241	Condition	i <= pParent -> nkeys	343:11:12083:12099	149205	1	True				
ANR	149242	RelationalExpression	i <= pParent -> nkeys		149205	0		<=			
ANR	149243	Identifier	i		149205	0					
ANR	149244	PtrMemberAccess	pParent -> nkeys		149205	1					
ANR	149245	Identifier	pParent		149205	0					
ANR	149246	Identifier	nkeys		149205	1					
ANR	149247	PostIncDecOperationExpression	i ++	343:30:12102:12104	149205	2	True				
ANR	149248	Identifier	i		149205	0					
ANR	149249	IncDec	++		149205	1					
ANR	149250	CompoundStatement		13:36:339:339	149205	3					
ANR	149251	IfStatement	if ( ( pParent -> child ) [ i ] == pNode )		149205	0					
ANR	149252	Condition	( pParent -> child ) [ i ] == pNode	344:6:12116:12143	149205	0	True				
ANR	149253	EqualityExpression	( pParent -> child ) [ i ] == pNode		149205	0		==			
ANR	149254	ArrayIndexing	( pParent -> child ) [ i ]		149205	0					
ANR	149255	PtrMemberAccess	pParent -> child		149205	0					
ANR	149256	Identifier	pParent		149205	0					
ANR	149257	Identifier	child		149205	1					
ANR	149258	Identifier	i		149205	1					
ANR	149259	Identifier	pNode		149205	1					
ANR	149260	BreakStatement	break ;	344:37:12147:12152	149205	1	True				
ANR	149261	IfStatement	if ( i == pParent -> nkeys + 1 )		149205	6					
ANR	149262	Condition	i == pParent -> nkeys + 1	346:5:12162:12183	149205	0	True				
ANR	149263	EqualityExpression	i == pParent -> nkeys + 1		149205	0		==			
ANR	149264	Identifier	i		149205	0					
ANR	149265	AdditiveExpression	pParent -> nkeys + 1		149205	1		+			
ANR	149266	PtrMemberAccess	pParent -> nkeys		149205	0					
ANR	149267	Identifier	pParent		149205	0					
ANR	149268	Identifier	nkeys		149205	1					
ANR	149269	PrimaryExpression	1		149205	1					
ANR	149270	CompoundStatement		16:30:418:418	149205	1					
ANR	149271	ExpressionStatement	"printf ( ""this cannot happen becasue pNode is a child of pParent\\n"" )"	346:31:12188:12254	149205	0	True				
ANR	149272	CallExpression	"printf ( ""this cannot happen becasue pNode is a child of pParent\\n"" )"		149205	0					
ANR	149273	Callee	printf		149205	0					
ANR	149274	Identifier	printf		149205	0					
ANR	149275	ArgumentList	"""this cannot happen becasue pNode is a child of pParent\\n"""		149205	1					
ANR	149276	Argument	"""this cannot happen becasue pNode is a child of pParent\\n"""		149205	0					
ANR	149277	PrimaryExpression	"""this cannot happen becasue pNode is a child of pParent\\n"""		149205	0					
ANR	149278	ReturnStatement	return NULL ;	346:99:12256:12267	149205	1	True				
ANR	149279	Identifier	NULL		149205	0					
ANR	149280	ExpressionStatement		346:113:12270:12270	149205	7	True				
ANR	149281	IfStatement	if ( i == 0 )		149205	8					
ANR	149282	Condition	i == 0	349:5:12363:12366	149205	0	True				
ANR	149283	EqualityExpression	i == 0		149205	0		==			
ANR	149284	Identifier	i		149205	0					
ANR	149285	PrimaryExpression	0		149205	1					
ANR	149286	ReturnStatement	return NULL ;	350:2:12372:12383	149205	1	True				
ANR	149287	Identifier	NULL		149205	0					
ANR	149288	ElseStatement	else		149205	0					
ANR	149289	ReturnStatement	return ( pParent -> child ) [ i - 1 ] ;	352:2:12393:12421	149205	0	True				
ANR	149290	ArrayIndexing	( pParent -> child ) [ i - 1 ]		149205	0					
ANR	149291	PtrMemberAccess	pParent -> child		149205	0					
ANR	149292	Identifier	pParent		149205	0					
ANR	149293	Identifier	child		149205	1					
ANR	149294	AdditiveExpression	i - 1		149205	1		-			
ANR	149295	Identifier	i		149205	0					
ANR	149296	PrimaryExpression	1		149205	1					
ANR	149297	ReturnType	Btree_Node *		149205	1					
ANR	149298	Identifier	BTree :: leftSibling		149205	2					
ANR	149299	ParameterList	Btree_Node * pNode		149205	3					
ANR	149300	Parameter	Btree_Node * pNode	330:31:11749:11765	149205	0	True				
ANR	149301	ParameterType	Btree_Node *		149205	0					
ANR	149302	Identifier	pNode		149205	1					
ANR	149303	CFGEntryNode	ENTRY		149205		True				
ANR	149304	CFGExitNode	EXIT		149205		True				
ANR	149305	CFGExceptionNode	EXCEPTION		149205		True				
ANR	149306	Symbol	pNode -> p		149205						
ANR	149307	Symbol	NULL		149205						
ANR	149308	Symbol	pParent		149205						
ANR	149309	Symbol	* * pParent		149205						
ANR	149310	Symbol	* i		149205						
ANR	149311	Symbol	pParent -> child		149205						
ANR	149312	Symbol	i		149205						
ANR	149313	Symbol	* pNode		149205						
ANR	149314	Symbol	* pParent -> child		149205						
ANR	149315	Symbol	pNode		149205						
ANR	149316	Symbol	* pParent		149205						
ANR	149317	Symbol	pParent -> nkeys		149205						
ANR	149318	Function	BTree :: rightSibling	370:0:12703:13427							
ANR	149319	FunctionDef	BTree :: rightSibling (Btree_Node * pNode)		149318	0					
ANR	149320	CompoundStatement		371:0:12754:13427	149318	0					
ANR	149321	IfStatement	if ( NULL == pNode )		149318	0					
ANR	149322	Condition	NULL == pNode	372:4:12760:12770	149318	0	True				
ANR	149323	EqualityExpression	NULL == pNode		149318	0		==			
ANR	149324	Identifier	NULL		149318	0					
ANR	149325	Identifier	pNode		149318	1					
ANR	149326	ThrowStatement	"throw ""BTree::rightSibling, pNode is NULL"" ;"	372:17:12773:12815	149318	1	True				
ANR	149327	PrimaryExpression	"""BTree::rightSibling, pNode is NULL"""		149318	0					
ANR	149328	IdentifierDeclStatement	Btree_Node * pParent ;	374:1:12819:12838	149318	1	True				
ANR	149329	IdentifierDecl	* pParent		149318	0					
ANR	149330	IdentifierDeclType	Btree_Node *		149318	0					
ANR	149331	Identifier	pParent		149318	1					
ANR	149332	IdentifierDeclStatement	int i ;	375:1:12841:12846	149318	2	True				
ANR	149333	IdentifierDecl	i		149318	0					
ANR	149334	IdentifierDeclType	int		149318	0					
ANR	149335	Identifier	i		149318	1					
ANR	149336	ExpressionStatement	pParent = pNode -> p	378:1:12912:12930	149318	3	True				
ANR	149337	AssignmentExpression	pParent = pNode -> p		149318	0		=			
ANR	149338	Identifier	pParent		149318	0					
ANR	149339	PtrMemberAccess	pNode -> p		149318	1					
ANR	149340	Identifier	pNode		149318	0					
ANR	149341	Identifier	p		149318	1					
ANR	149342	IfStatement	if ( NULL == pParent )		149318	4					
ANR	149343	Condition	NULL == pParent	379:5:12937:12951	149318	0	True				
ANR	149344	EqualityExpression	NULL == pParent		149318	0		==			
ANR	149345	Identifier	NULL		149318	0					
ANR	149346	Identifier	pParent		149318	1					
ANR	149347	ReturnStatement	return NULL ;	380:2:12957:12968	149318	1	True				
ANR	149348	Identifier	NULL		149318	0					
ANR	149349	ForStatement	for ( i = 0 ; i <= pParent -> nkeys ; i ++ )		149318	5					
ANR	149350	ForInit	i = 0 ;	383:6:13065:13068	149318	0	True				
ANR	149351	AssignmentExpression	i = 0		149318	0		=			
ANR	149352	Identifier	i		149318	0					
ANR	149353	PrimaryExpression	0		149318	1					
ANR	149354	Condition	i <= pParent -> nkeys	383:11:13070:13086	149318	1	True				
ANR	149355	RelationalExpression	i <= pParent -> nkeys		149318	0		<=			
ANR	149356	Identifier	i		149318	0					
ANR	149357	PtrMemberAccess	pParent -> nkeys		149318	1					
ANR	149358	Identifier	pParent		149318	0					
ANR	149359	Identifier	nkeys		149318	1					
ANR	149360	PostIncDecOperationExpression	i ++	383:30:13089:13091	149318	2	True				
ANR	149361	Identifier	i		149318	0					
ANR	149362	IncDec	++		149318	1					
ANR	149363	CompoundStatement		13:36:340:340	149318	3					
ANR	149364	IfStatement	if ( ( pParent -> child ) [ i ] == pNode )		149318	0					
ANR	149365	Condition	( pParent -> child ) [ i ] == pNode	384:6:13103:13130	149318	0	True				
ANR	149366	EqualityExpression	( pParent -> child ) [ i ] == pNode		149318	0		==			
ANR	149367	ArrayIndexing	( pParent -> child ) [ i ]		149318	0					
ANR	149368	PtrMemberAccess	pParent -> child		149318	0					
ANR	149369	Identifier	pParent		149318	0					
ANR	149370	Identifier	child		149318	1					
ANR	149371	Identifier	i		149318	1					
ANR	149372	Identifier	pNode		149318	1					
ANR	149373	BreakStatement	break ;	384:37:13134:13139	149318	1	True				
ANR	149374	IfStatement	if ( i == pParent -> nkeys + 1 )		149318	6					
ANR	149375	Condition	i == pParent -> nkeys + 1	386:5:13149:13170	149318	0	True				
ANR	149376	EqualityExpression	i == pParent -> nkeys + 1		149318	0		==			
ANR	149377	Identifier	i		149318	0					
ANR	149378	AdditiveExpression	pParent -> nkeys + 1		149318	1		+			
ANR	149379	PtrMemberAccess	pParent -> nkeys		149318	0					
ANR	149380	Identifier	pParent		149318	0					
ANR	149381	Identifier	nkeys		149318	1					
ANR	149382	PrimaryExpression	1		149318	1					
ANR	149383	CompoundStatement		16:30:419:419	149318	1					
ANR	149384	ExpressionStatement	"printf ( ""this cannot happen becasue pNode is a child of pParent\\n"" )"	386:31:13175:13241	149318	0	True				
ANR	149385	CallExpression	"printf ( ""this cannot happen becasue pNode is a child of pParent\\n"" )"		149318	0					
ANR	149386	Callee	printf		149318	0					
ANR	149387	Identifier	printf		149318	0					
ANR	149388	ArgumentList	"""this cannot happen becasue pNode is a child of pParent\\n"""		149318	1					
ANR	149389	Argument	"""this cannot happen becasue pNode is a child of pParent\\n"""		149318	0					
ANR	149390	PrimaryExpression	"""this cannot happen becasue pNode is a child of pParent\\n"""		149318	0					
ANR	149391	ReturnStatement	return NULL ;	386:99:13243:13254	149318	1	True				
ANR	149392	Identifier	NULL		149318	0					
ANR	149393	ExpressionStatement		386:113:13257:13257	149318	7	True				
ANR	149394	IfStatement	if ( i == pParent -> nkeys )		149318	8					
ANR	149395	Condition	i == pParent -> nkeys	389:5:13352:13370	149318	0	True				
ANR	149396	EqualityExpression	i == pParent -> nkeys		149318	0		==			
ANR	149397	Identifier	i		149318	0					
ANR	149398	PtrMemberAccess	pParent -> nkeys		149318	1					
ANR	149399	Identifier	pParent		149318	0					
ANR	149400	Identifier	nkeys		149318	1					
ANR	149401	ReturnStatement	return NULL ;	390:2:13376:13387	149318	1	True				
ANR	149402	Identifier	NULL		149318	0					
ANR	149403	ElseStatement	else		149318	0					
ANR	149404	ReturnStatement	return ( pParent -> child ) [ i + 1 ] ;	392:2:13397:13425	149318	0	True				
ANR	149405	ArrayIndexing	( pParent -> child ) [ i + 1 ]		149318	0					
ANR	149406	PtrMemberAccess	pParent -> child		149318	0					
ANR	149407	Identifier	pParent		149318	0					
ANR	149408	Identifier	child		149318	1					
ANR	149409	AdditiveExpression	i + 1		149318	1		+			
ANR	149410	Identifier	i		149318	0					
ANR	149411	PrimaryExpression	1		149318	1					
ANR	149412	ReturnType	Btree_Node *		149318	1					
ANR	149413	Identifier	BTree :: rightSibling		149318	2					
ANR	149414	ParameterList	Btree_Node * pNode		149318	3					
ANR	149415	Parameter	Btree_Node * pNode	370:32:12735:12751	149318	0	True				
ANR	149416	ParameterType	Btree_Node *		149318	0					
ANR	149417	Identifier	pNode		149318	1					
ANR	149418	CFGEntryNode	ENTRY		149318		True				
ANR	149419	CFGExitNode	EXIT		149318		True				
ANR	149420	CFGExceptionNode	EXCEPTION		149318		True				
ANR	149421	Symbol	pNode -> p		149318						
ANR	149422	Symbol	NULL		149318						
ANR	149423	Symbol	pParent		149318						
ANR	149424	Symbol	* * pParent		149318						
ANR	149425	Symbol	* i		149318						
ANR	149426	Symbol	pParent -> child		149318						
ANR	149427	Symbol	i		149318						
ANR	149428	Symbol	* pNode		149318						
ANR	149429	Symbol	* pParent -> child		149318						
ANR	149430	Symbol	pNode		149318						
ANR	149431	Symbol	* pParent		149318						
ANR	149432	Symbol	pParent -> nkeys		149318						
ANR	149433	Function	BTree :: insert	410:0:13698:16905							
ANR	149434	FunctionDef	"BTree :: insert (unsigned long key , unsigned long val)"		149433	0					
ANR	149435	CompoundStatement		411:0:13755:16905	149433	0					
ANR	149436	IdentifierDeclStatement	Btree_Node * pLeaf ;	412:1:13758:13775	149433	0	True				
ANR	149437	IdentifierDecl	* pLeaf		149433	0					
ANR	149438	IdentifierDeclType	Btree_Node *		149433	0					
ANR	149439	Identifier	pLeaf		149433	1					
ANR	149440	IdentifierDeclStatement	Btree_Node * pNode ;	413:1:13778:13795	149433	1	True				
ANR	149441	IdentifierDecl	* pNode		149433	0					
ANR	149442	IdentifierDeclType	Btree_Node *		149433	0					
ANR	149443	Identifier	pNode		149433	1					
ANR	149444	IdentifierDeclStatement	Btree_Node * pSibling ;	414:1:13798:13818	149433	2	True				
ANR	149445	IdentifierDecl	* pSibling		149433	0					
ANR	149446	IdentifierDeclType	Btree_Node *		149433	0					
ANR	149447	Identifier	pSibling		149433	1					
ANR	149448	IdentifierDeclStatement	Btree_Node * pParent ;	415:1:13821:13840	149433	3	True				
ANR	149449	IdentifierDecl	* pParent		149433	0					
ANR	149450	IdentifierDeclType	Btree_Node *		149433	0					
ANR	149451	Identifier	pParent		149433	1					
ANR	149452	IdentifierDeclStatement	Btree_Pair pairUp ;	416:1:13843:13860	149433	4	True				
ANR	149453	IdentifierDecl	pairUp		149433	0					
ANR	149454	IdentifierDeclType	Btree_Pair		149433	0					
ANR	149455	Identifier	pairUp		149433	1					
ANR	149456	IfStatement	if ( NULL == root )		149433	5					
ANR	149457	Condition	NULL == root	426:5:14067:14078	149433	0	True				
ANR	149458	EqualityExpression	NULL == root		149433	0		==			
ANR	149459	Identifier	NULL		149433	0					
ANR	149460	Identifier	root		149433	1					
ANR	149461	CompoundStatement		16:20:326:326	149433	1					
ANR	149462	Statement	root	427:2:14086:14089	149433	0	True				
ANR	149463	Statement	=	427:7:14091:14091	149433	1	True				
ANR	149464	Statement	new	427:9:14093:14095	149433	2	True				
ANR	149465	ExpressionStatement	Btree_Node	427:13:14097:14107	149433	3	True				
ANR	149466	Identifier	Btree_Node		149433	0					
ANR	149467	IfStatement	if ( NULL == root )		149433	4					
ANR	149468	Condition	NULL == root	428:6:14115:14124	149433	0	True				
ANR	149469	EqualityExpression	NULL == root		149433	0		==			
ANR	149470	Identifier	NULL		149433	0					
ANR	149471	Identifier	root		149433	1					
ANR	149472	ThrowStatement	"throw ""BTree::insert, root is NULL"" ;"	429:3:14131:14166	149433	1	True				
ANR	149473	PrimaryExpression	"""BTree::insert, root is NULL"""		149433	0					
ANR	149474	ExpressionStatement	root -> p = NULL	430:2:14170:14184	149433	5	True				
ANR	149475	AssignmentExpression	root -> p = NULL		149433	0		=			
ANR	149476	PtrMemberAccess	root -> p		149433	0					
ANR	149477	Identifier	root		149433	0					
ANR	149478	Identifier	p		149433	1					
ANR	149479	Identifier	NULL		149433	1					
ANR	149480	ExpressionStatement	root -> nkeys = 1	431:2:14188:14203	149433	6	True				
ANR	149481	AssignmentExpression	root -> nkeys = 1		149433	0		=			
ANR	149482	PtrMemberAccess	root -> nkeys		149433	0					
ANR	149483	Identifier	root		149433	0					
ANR	149484	Identifier	nkeys		149433	1					
ANR	149485	PrimaryExpression	1		149433	1					
ANR	149486	ExpressionStatement	( root -> pair ) [ 0 ] . key = key	432:2:14207:14232	149433	7	True				
ANR	149487	AssignmentExpression	( root -> pair ) [ 0 ] . key = key		149433	0		=			
ANR	149488	MemberAccess	( root -> pair ) [ 0 ] . key		149433	0					
ANR	149489	ArrayIndexing	( root -> pair ) [ 0 ]		149433	0					
ANR	149490	PtrMemberAccess	root -> pair		149433	0					
ANR	149491	Identifier	root		149433	0					
ANR	149492	Identifier	pair		149433	1					
ANR	149493	PrimaryExpression	0		149433	1					
ANR	149494	Identifier	key		149433	1					
ANR	149495	Identifier	key		149433	1					
ANR	149496	ExpressionStatement	( root -> pair ) [ 0 ] . val = val	433:2:14236:14261	149433	8	True				
ANR	149497	AssignmentExpression	( root -> pair ) [ 0 ] . val = val		149433	0		=			
ANR	149498	MemberAccess	( root -> pair ) [ 0 ] . val		149433	0					
ANR	149499	ArrayIndexing	( root -> pair ) [ 0 ]		149433	0					
ANR	149500	PtrMemberAccess	root -> pair		149433	0					
ANR	149501	Identifier	root		149433	0					
ANR	149502	Identifier	pair		149433	1					
ANR	149503	PrimaryExpression	0		149433	1					
ANR	149504	Identifier	val		149433	1					
ANR	149505	Identifier	val		149433	1					
ANR	149506	ExpressionStatement	( root -> child ) [ 0 ] = NULL	434:2:14265:14288	149433	9	True				
ANR	149507	AssignmentExpression	( root -> child ) [ 0 ] = NULL		149433	0		=			
ANR	149508	ArrayIndexing	( root -> child ) [ 0 ]		149433	0					
ANR	149509	PtrMemberAccess	root -> child		149433	0					
ANR	149510	Identifier	root		149433	0					
ANR	149511	Identifier	child		149433	1					
ANR	149512	PrimaryExpression	0		149433	1					
ANR	149513	Identifier	NULL		149433	1					
ANR	149514	ExpressionStatement	( root -> child ) [ 1 ] = NULL	435:2:14292:14315	149433	10	True				
ANR	149515	AssignmentExpression	( root -> child ) [ 1 ] = NULL		149433	0		=			
ANR	149516	ArrayIndexing	( root -> child ) [ 1 ]		149433	0					
ANR	149517	PtrMemberAccess	root -> child		149433	0					
ANR	149518	Identifier	root		149433	0					
ANR	149519	Identifier	child		149433	1					
ANR	149520	PrimaryExpression	1		149433	1					
ANR	149521	Identifier	NULL		149433	1					
ANR	149522	ReturnStatement	return ;	436:2:14319:14325	149433	11	True				
ANR	149523	ExpressionStatement		437:2:14329:14329	149433	6	True				
ANR	149524	ExpressionStatement	pLeaf = root	440:4:14409:14421	149433	7	True				
ANR	149525	AssignmentExpression	pLeaf = root		149433	0		=			
ANR	149526	Identifier	pLeaf		149433	0					
ANR	149527	Identifier	root		149433	1					
ANR	149528	IdentifierDeclStatement	int i ;	441:1:14424:14429	149433	8	True				
ANR	149529	IdentifierDecl	i		149433	0					
ANR	149530	IdentifierDeclType	int		149433	0					
ANR	149531	Identifier	i		149433	1					
ANR	149532	WhileStatement	while ( NULL != ( pLeaf -> child ) [ 0 ] )		149433	9					
ANR	149533	Condition	NULL != ( pLeaf -> child ) [ 0 ]	442:8:14439:14463	149433	0	True				
ANR	149534	EqualityExpression	NULL != ( pLeaf -> child ) [ 0 ]		149433	0		!=			
ANR	149535	Identifier	NULL		149433	0					
ANR	149536	ArrayIndexing	( pLeaf -> child ) [ 0 ]		149433	1					
ANR	149537	PtrMemberAccess	pLeaf -> child		149433	0					
ANR	149538	Identifier	pLeaf		149433	0					
ANR	149539	Identifier	child		149433	1					
ANR	149540	PrimaryExpression	0		149433	1					
ANR	149541	CompoundStatement		32:36:711:711	149433	1					
ANR	149542	ForStatement	for ( i = 0 ; i < ( pLeaf -> nkeys ) ; i ++ )		149433	0					
ANR	149543	ForInit	i = 0 ;	446:7:14629:14632	149433	0	True				
ANR	149544	AssignmentExpression	i = 0		149433	0		=			
ANR	149545	Identifier	i		149433	0					
ANR	149546	PrimaryExpression	0		149433	1					
ANR	149547	Condition	i < ( pLeaf -> nkeys )	446:12:14634:14649	149433	1	True				
ANR	149548	RelationalExpression	i < ( pLeaf -> nkeys )		149433	0		<			
ANR	149549	Identifier	i		149433	0					
ANR	149550	PtrMemberAccess	pLeaf -> nkeys		149433	1					
ANR	149551	Identifier	pLeaf		149433	0					
ANR	149552	Identifier	nkeys		149433	1					
ANR	149553	PostIncDecOperationExpression	i ++	446:30:14652:14654	149433	2	True				
ANR	149554	Identifier	i		149433	0					
ANR	149555	IncDec	++		149433	1					
ANR	149556	IfStatement	if ( key < ( pLeaf -> pair ) [ i ] . key )		149433	3					
ANR	149557	Condition	key < ( pLeaf -> pair ) [ i ] . key	447:7:14665:14690	149433	0	True				
ANR	149558	RelationalExpression	key < ( pLeaf -> pair ) [ i ] . key		149433	0		<			
ANR	149559	Identifier	key		149433	0					
ANR	149560	MemberAccess	( pLeaf -> pair ) [ i ] . key		149433	1					
ANR	149561	ArrayIndexing	( pLeaf -> pair ) [ i ]		149433	0					
ANR	149562	PtrMemberAccess	pLeaf -> pair		149433	0					
ANR	149563	Identifier	pLeaf		149433	0					
ANR	149564	Identifier	pair		149433	1					
ANR	149565	Identifier	i		149433	1					
ANR	149566	Identifier	key		149433	1					
ANR	149567	BreakStatement	break ;	447:36:14694:14699	149433	1	True				
ANR	149568	ExpressionStatement	pLeaf = ( pLeaf -> child ) [ i ]	457:2:15011:15036	149433	1	True				
ANR	149569	AssignmentExpression	pLeaf = ( pLeaf -> child ) [ i ]		149433	0		=			
ANR	149570	Identifier	pLeaf		149433	0					
ANR	149571	ArrayIndexing	( pLeaf -> child ) [ i ]		149433	1					
ANR	149572	PtrMemberAccess	pLeaf -> child		149433	0					
ANR	149573	Identifier	pLeaf		149433	0					
ANR	149574	Identifier	child		149433	1					
ANR	149575	Identifier	i		149433	1					
ANR	149576	ExpressionStatement		458:2:15040:15040	149433	10	True				
ANR	149577	ExpressionStatement	i = ( pLeaf -> nkeys ) - 1	462:1:15216:15236	149433	11	True				
ANR	149578	AssignmentExpression	i = ( pLeaf -> nkeys ) - 1		149433	0		=			
ANR	149579	Identifier	i		149433	0					
ANR	149580	AdditiveExpression	( pLeaf -> nkeys ) - 1		149433	1		-			
ANR	149581	PtrMemberAccess	pLeaf -> nkeys		149433	0					
ANR	149582	Identifier	pLeaf		149433	0					
ANR	149583	Identifier	nkeys		149433	1					
ANR	149584	PrimaryExpression	1		149433	1					
ANR	149585	WhileStatement	while ( i >= 0 && ( pLeaf -> pair ) [ i ] . key > key )		149433	12					
ANR	149586	Condition	i >= 0 && ( pLeaf -> pair ) [ i ] . key > key	463:8:15246:15279	149433	0	True				
ANR	149587	AndExpression	i >= 0 && ( pLeaf -> pair ) [ i ] . key > key		149433	0		&&			
ANR	149588	RelationalExpression	i >= 0		149433	0		>=			
ANR	149589	Identifier	i		149433	0					
ANR	149590	PrimaryExpression	0		149433	1					
ANR	149591	RelationalExpression	( pLeaf -> pair ) [ i ] . key > key		149433	1		>			
ANR	149592	MemberAccess	( pLeaf -> pair ) [ i ] . key		149433	0					
ANR	149593	ArrayIndexing	( pLeaf -> pair ) [ i ]		149433	0					
ANR	149594	PtrMemberAccess	pLeaf -> pair		149433	0					
ANR	149595	Identifier	pLeaf		149433	0					
ANR	149596	Identifier	pair		149433	1					
ANR	149597	Identifier	i		149433	1					
ANR	149598	Identifier	key		149433	1					
ANR	149599	Identifier	key		149433	1					
ANR	149600	CompoundStatement		53:45:1527:1527	149433	1					
ANR	149601	ExpressionStatement	( pLeaf -> pair ) [ i + 1 ] = ( pLeaf -> pair ) [ i ]	464:2:15287:15324	149433	0	True				
ANR	149602	AssignmentExpression	( pLeaf -> pair ) [ i + 1 ] = ( pLeaf -> pair ) [ i ]		149433	0		=			
ANR	149603	ArrayIndexing	( pLeaf -> pair ) [ i + 1 ]		149433	0					
ANR	149604	PtrMemberAccess	pLeaf -> pair		149433	0					
ANR	149605	Identifier	pLeaf		149433	0					
ANR	149606	Identifier	pair		149433	1					
ANR	149607	AdditiveExpression	i + 1		149433	1		+			
ANR	149608	Identifier	i		149433	0					
ANR	149609	PrimaryExpression	1		149433	1					
ANR	149610	ArrayIndexing	( pLeaf -> pair ) [ i ]		149433	1					
ANR	149611	PtrMemberAccess	pLeaf -> pair		149433	0					
ANR	149612	Identifier	pLeaf		149433	0					
ANR	149613	Identifier	pair		149433	1					
ANR	149614	Identifier	i		149433	1					
ANR	149615	ExpressionStatement	i --	465:2:15328:15331	149433	1	True				
ANR	149616	PostIncDecOperationExpression	i --		149433	0					
ANR	149617	Identifier	i		149433	0					
ANR	149618	IncDec	--		149433	1					
ANR	149619	ExpressionStatement		466:2:15335:15335	149433	13	True				
ANR	149620	ExpressionStatement	( pLeaf -> pair ) [ i + 1 ] . key = key	467:1:15338:15366	149433	14	True				
ANR	149621	AssignmentExpression	( pLeaf -> pair ) [ i + 1 ] . key = key		149433	0		=			
ANR	149622	MemberAccess	( pLeaf -> pair ) [ i + 1 ] . key		149433	0					
ANR	149623	ArrayIndexing	( pLeaf -> pair ) [ i + 1 ]		149433	0					
ANR	149624	PtrMemberAccess	pLeaf -> pair		149433	0					
ANR	149625	Identifier	pLeaf		149433	0					
ANR	149626	Identifier	pair		149433	1					
ANR	149627	AdditiveExpression	i + 1		149433	1		+			
ANR	149628	Identifier	i		149433	0					
ANR	149629	PrimaryExpression	1		149433	1					
ANR	149630	Identifier	key		149433	1					
ANR	149631	Identifier	key		149433	1					
ANR	149632	ExpressionStatement	( pLeaf -> pair ) [ i + 1 ] . val = val	468:1:15369:15397	149433	15	True				
ANR	149633	AssignmentExpression	( pLeaf -> pair ) [ i + 1 ] . val = val		149433	0		=			
ANR	149634	MemberAccess	( pLeaf -> pair ) [ i + 1 ] . val		149433	0					
ANR	149635	ArrayIndexing	( pLeaf -> pair ) [ i + 1 ]		149433	0					
ANR	149636	PtrMemberAccess	pLeaf -> pair		149433	0					
ANR	149637	Identifier	pLeaf		149433	0					
ANR	149638	Identifier	pair		149433	1					
ANR	149639	AdditiveExpression	i + 1		149433	1		+			
ANR	149640	Identifier	i		149433	0					
ANR	149641	PrimaryExpression	1		149433	1					
ANR	149642	Identifier	val		149433	1					
ANR	149643	Identifier	val		149433	1					
ANR	149644	ExpressionStatement	( pLeaf -> nkeys ) ++	469:1:15400:15416	149433	16	True				
ANR	149645	PostIncDecOperationExpression	( pLeaf -> nkeys ) ++		149433	0					
ANR	149646	PtrMemberAccess	pLeaf -> nkeys		149433	0					
ANR	149647	Identifier	pLeaf		149433	0					
ANR	149648	Identifier	nkeys		149433	1					
ANR	149649	IncDec	++		149433	1					
ANR	149650	ExpressionStatement	( pLeaf -> child ) [ pLeaf -> nkeys ] = NULL	471:1:15474:15511	149433	17	True				
ANR	149651	AssignmentExpression	( pLeaf -> child ) [ pLeaf -> nkeys ] = NULL		149433	0		=			
ANR	149652	ArrayIndexing	( pLeaf -> child ) [ pLeaf -> nkeys ]		149433	0					
ANR	149653	PtrMemberAccess	pLeaf -> child		149433	0					
ANR	149654	Identifier	pLeaf		149433	0					
ANR	149655	Identifier	child		149433	1					
ANR	149656	PtrMemberAccess	pLeaf -> nkeys		149433	1					
ANR	149657	Identifier	pLeaf		149433	0					
ANR	149658	Identifier	nkeys		149433	1					
ANR	149659	Identifier	NULL		149433	1					
ANR	149660	ExpressionStatement	pNode = pLeaf	473:1:15515:15528	149433	18	True				
ANR	149661	AssignmentExpression	pNode = pLeaf		149433	0		=			
ANR	149662	Identifier	pNode		149433	0					
ANR	149663	Identifier	pLeaf		149433	1					
ANR	149664	WhileStatement	while ( 2 * t == pNode -> nkeys )		149433	19					
ANR	149665	Condition	2 * t == pNode -> nkeys	474:8:15538:15556	149433	0	True				
ANR	149666	EqualityExpression	2 * t == pNode -> nkeys		149433	0		==			
ANR	149667	MultiplicativeExpression	2 * t		149433	0		*			
ANR	149668	PrimaryExpression	2		149433	0					
ANR	149669	Identifier	t		149433	1					
ANR	149670	PtrMemberAccess	pNode -> nkeys		149433	1					
ANR	149671	Identifier	pNode		149433	0					
ANR	149672	Identifier	nkeys		149433	1					
ANR	149673	CompoundStatement		64:30:1804:1804	149433	1					
ANR	149674	ExpressionStatement	"detachSibling ( pNode , & pSibling , & pairUp )"	477:2:15673:15711	149433	0	True				
ANR	149675	CallExpression	"detachSibling ( pNode , & pSibling , & pairUp )"		149433	0					
ANR	149676	Callee	detachSibling		149433	0					
ANR	149677	Identifier	detachSibling		149433	0					
ANR	149678	ArgumentList	pNode		149433	1					
ANR	149679	Argument	pNode		149433	0					
ANR	149680	Identifier	pNode		149433	0					
ANR	149681	Argument	& pSibling		149433	1					
ANR	149682	UnaryOperationExpression	& pSibling		149433	0					
ANR	149683	UnaryOperator	&		149433	0					
ANR	149684	Identifier	pSibling		149433	1					
ANR	149685	Argument	& pairUp		149433	2					
ANR	149686	UnaryOperationExpression	& pairUp		149433	0					
ANR	149687	UnaryOperator	&		149433	0					
ANR	149688	Identifier	pairUp		149433	1					
ANR	149689	IfStatement	if ( NULL == pNode -> p )		149433	1					
ANR	149690	Condition	NULL == pNode -> p	480:6:15806:15821	149433	0	True				
ANR	149691	EqualityExpression	NULL == pNode -> p		149433	0		==			
ANR	149692	Identifier	NULL		149433	0					
ANR	149693	PtrMemberAccess	pNode -> p		149433	1					
ANR	149694	Identifier	pNode		149433	0					
ANR	149695	Identifier	p		149433	1					
ANR	149696	CompoundStatement		70:25:2069:2069	149433	1					
ANR	149697	Statement	root	481:3:15830:15833	149433	0	True				
ANR	149698	Statement	=	481:8:15835:15835	149433	1	True				
ANR	149699	Statement	new	481:10:15837:15839	149433	2	True				
ANR	149700	ExpressionStatement	Btree_Node	481:14:15841:15851	149433	3	True				
ANR	149701	Identifier	Btree_Node		149433	0					
ANR	149702	IfStatement	if ( NULL == root )		149433	4					
ANR	149703	Condition	NULL == root	482:7:15860:15869	149433	0	True				
ANR	149704	EqualityExpression	NULL == root		149433	0		==			
ANR	149705	Identifier	NULL		149433	0					
ANR	149706	Identifier	root		149433	1					
ANR	149707	ThrowStatement	"throw ""BTree::insert, root is NULL 2"" ;"	483:4:15877:15914	149433	1	True				
ANR	149708	PrimaryExpression	"""BTree::insert, root is NULL 2"""		149433	0					
ANR	149709	ExpressionStatement	root -> p = NULL	484:3:15919:15933	149433	5	True				
ANR	149710	AssignmentExpression	root -> p = NULL		149433	0		=			
ANR	149711	PtrMemberAccess	root -> p		149433	0					
ANR	149712	Identifier	root		149433	0					
ANR	149713	Identifier	p		149433	1					
ANR	149714	Identifier	NULL		149433	1					
ANR	149715	ExpressionStatement	root -> nkeys = 1	485:3:15938:15953	149433	6	True				
ANR	149716	AssignmentExpression	root -> nkeys = 1		149433	0		=			
ANR	149717	PtrMemberAccess	root -> nkeys		149433	0					
ANR	149718	Identifier	root		149433	0					
ANR	149719	Identifier	nkeys		149433	1					
ANR	149720	PrimaryExpression	1		149433	1					
ANR	149721	ExpressionStatement	( root -> pair ) [ 0 ] = pairUp	486:3:15958:15982	149433	7	True				
ANR	149722	AssignmentExpression	( root -> pair ) [ 0 ] = pairUp		149433	0		=			
ANR	149723	ArrayIndexing	( root -> pair ) [ 0 ]		149433	0					
ANR	149724	PtrMemberAccess	root -> pair		149433	0					
ANR	149725	Identifier	root		149433	0					
ANR	149726	Identifier	pair		149433	1					
ANR	149727	PrimaryExpression	0		149433	1					
ANR	149728	Identifier	pairUp		149433	1					
ANR	149729	ExpressionStatement	( root -> child ) [ 0 ] = pNode	487:3:15987:16011	149433	8	True				
ANR	149730	AssignmentExpression	( root -> child ) [ 0 ] = pNode		149433	0		=			
ANR	149731	ArrayIndexing	( root -> child ) [ 0 ]		149433	0					
ANR	149732	PtrMemberAccess	root -> child		149433	0					
ANR	149733	Identifier	root		149433	0					
ANR	149734	Identifier	child		149433	1					
ANR	149735	PrimaryExpression	0		149433	1					
ANR	149736	Identifier	pNode		149433	1					
ANR	149737	ExpressionStatement	( root -> child ) [ 1 ] = pSibling	488:3:16016:16043	149433	9	True				
ANR	149738	AssignmentExpression	( root -> child ) [ 1 ] = pSibling		149433	0		=			
ANR	149739	ArrayIndexing	( root -> child ) [ 1 ]		149433	0					
ANR	149740	PtrMemberAccess	root -> child		149433	0					
ANR	149741	Identifier	root		149433	0					
ANR	149742	Identifier	child		149433	1					
ANR	149743	PrimaryExpression	1		149433	1					
ANR	149744	Identifier	pSibling		149433	1					
ANR	149745	ExpressionStatement	pNode -> p = root	489:3:16048:16063	149433	10	True				
ANR	149746	AssignmentExpression	pNode -> p = root		149433	0		=			
ANR	149747	PtrMemberAccess	pNode -> p		149433	0					
ANR	149748	Identifier	pNode		149433	0					
ANR	149749	Identifier	p		149433	1					
ANR	149750	Identifier	root		149433	1					
ANR	149751	ExpressionStatement	pSibling -> p = root	490:3:16068:16086	149433	11	True				
ANR	149752	AssignmentExpression	pSibling -> p = root		149433	0		=			
ANR	149753	PtrMemberAccess	pSibling -> p		149433	0					
ANR	149754	Identifier	pSibling		149433	0					
ANR	149755	Identifier	p		149433	1					
ANR	149756	Identifier	root		149433	1					
ANR	149757	ReturnStatement	return ;	491:3:16091:16097	149433	12	True				
ANR	149758	ExpressionStatement		492:3:16102:16102	149433	2	True				
ANR	149759	ExpressionStatement	pParent = pNode -> p	503:2:16537:16555	149433	3	True				
ANR	149760	AssignmentExpression	pParent = pNode -> p		149433	0		=			
ANR	149761	Identifier	pParent		149433	0					
ANR	149762	PtrMemberAccess	pNode -> p		149433	1					
ANR	149763	Identifier	pNode		149433	0					
ANR	149764	Identifier	p		149433	1					
ANR	149765	ExpressionStatement	i = pParent -> nkeys	504:2:16559:16577	149433	4	True				
ANR	149766	AssignmentExpression	i = pParent -> nkeys		149433	0		=			
ANR	149767	Identifier	i		149433	0					
ANR	149768	PtrMemberAccess	pParent -> nkeys		149433	1					
ANR	149769	Identifier	pParent		149433	0					
ANR	149770	Identifier	nkeys		149433	1					
ANR	149771	WhileStatement	while ( i >= 0 && ( pParent -> child ) [ i ] != pNode )		149433	5					
ANR	149772	Condition	i >= 0 && ( pParent -> child ) [ i ] != pNode	505:9:16588:16623	149433	0	True				
ANR	149773	AndExpression	i >= 0 && ( pParent -> child ) [ i ] != pNode		149433	0		&&			
ANR	149774	RelationalExpression	i >= 0		149433	0		>=			
ANR	149775	Identifier	i		149433	0					
ANR	149776	PrimaryExpression	0		149433	1					
ANR	149777	EqualityExpression	( pParent -> child ) [ i ] != pNode		149433	1		!=			
ANR	149778	ArrayIndexing	( pParent -> child ) [ i ]		149433	0					
ANR	149779	PtrMemberAccess	pParent -> child		149433	0					
ANR	149780	Identifier	pParent		149433	0					
ANR	149781	Identifier	child		149433	1					
ANR	149782	Identifier	i		149433	1					
ANR	149783	Identifier	pNode		149433	1					
ANR	149784	CompoundStatement		95:48:2871:2871	149433	1					
ANR	149785	ExpressionStatement	( pParent -> child ) [ i + 1 ] = ( pParent -> child ) [ i ]	506:3:16632:16675	149433	0	True				
ANR	149786	AssignmentExpression	( pParent -> child ) [ i + 1 ] = ( pParent -> child ) [ i ]		149433	0		=			
ANR	149787	ArrayIndexing	( pParent -> child ) [ i + 1 ]		149433	0					
ANR	149788	PtrMemberAccess	pParent -> child		149433	0					
ANR	149789	Identifier	pParent		149433	0					
ANR	149790	Identifier	child		149433	1					
ANR	149791	AdditiveExpression	i + 1		149433	1		+			
ANR	149792	Identifier	i		149433	0					
ANR	149793	PrimaryExpression	1		149433	1					
ANR	149794	ArrayIndexing	( pParent -> child ) [ i ]		149433	1					
ANR	149795	PtrMemberAccess	pParent -> child		149433	0					
ANR	149796	Identifier	pParent		149433	0					
ANR	149797	Identifier	child		149433	1					
ANR	149798	Identifier	i		149433	1					
ANR	149799	ExpressionStatement	( pParent -> pair ) [ i ] = ( pParent -> pair ) [ i - 1 ]	507:3:16680:16721	149433	1	True				
ANR	149800	AssignmentExpression	( pParent -> pair ) [ i ] = ( pParent -> pair ) [ i - 1 ]		149433	0		=			
ANR	149801	ArrayIndexing	( pParent -> pair ) [ i ]		149433	0					
ANR	149802	PtrMemberAccess	pParent -> pair		149433	0					
ANR	149803	Identifier	pParent		149433	0					
ANR	149804	Identifier	pair		149433	1					
ANR	149805	Identifier	i		149433	1					
ANR	149806	ArrayIndexing	( pParent -> pair ) [ i - 1 ]		149433	1					
ANR	149807	PtrMemberAccess	pParent -> pair		149433	0					
ANR	149808	Identifier	pParent		149433	0					
ANR	149809	Identifier	pair		149433	1					
ANR	149810	AdditiveExpression	i - 1		149433	1		-			
ANR	149811	Identifier	i		149433	0					
ANR	149812	PrimaryExpression	1		149433	1					
ANR	149813	ExpressionStatement	i --	508:3:16726:16729	149433	2	True				
ANR	149814	PostIncDecOperationExpression	i --		149433	0					
ANR	149815	Identifier	i		149433	0					
ANR	149816	IncDec	--		149433	1					
ANR	149817	ExpressionStatement		509:3:16734:16734	149433	6	True				
ANR	149818	IfStatement	if ( i == - 1 )		149433	7					
ANR	149819	Condition	i == - 1	510:6:16742:16748	149433	0	True				
ANR	149820	EqualityExpression	i == - 1		149433	0		==			
ANR	149821	Identifier	i		149433	0					
ANR	149822	UnaryOperationExpression	- 1		149433	1					
ANR	149823	UnaryOperator	-		149433	0					
ANR	149824	PrimaryExpression	1		149433	1					
ANR	149825	ExpressionStatement	"printf ( ""cannot happen\\n"" )"	510:16:16752:16777	149433	1	True				
ANR	149826	CallExpression	"printf ( ""cannot happen\\n"" )"		149433	0					
ANR	149827	Callee	printf		149433	0					
ANR	149828	Identifier	printf		149433	0					
ANR	149829	ArgumentList	"""cannot happen\\n"""		149433	1					
ANR	149830	Argument	"""cannot happen\\n"""		149433	0					
ANR	149831	PrimaryExpression	"""cannot happen\\n"""		149433	0					
ANR	149832	ExpressionStatement	( pParent -> child ) [ i + 1 ] = pSibling	511:2:16781:16813	149433	8	True				
ANR	149833	AssignmentExpression	( pParent -> child ) [ i + 1 ] = pSibling		149433	0		=			
ANR	149834	ArrayIndexing	( pParent -> child ) [ i + 1 ]		149433	0					
ANR	149835	PtrMemberAccess	pParent -> child		149433	0					
ANR	149836	Identifier	pParent		149433	0					
ANR	149837	Identifier	child		149433	1					
ANR	149838	AdditiveExpression	i + 1		149433	1		+			
ANR	149839	Identifier	i		149433	0					
ANR	149840	PrimaryExpression	1		149433	1					
ANR	149841	Identifier	pSibling		149433	1					
ANR	149842	ExpressionStatement	( pParent -> pair ) [ i ] = pairUp	512:2:16817:16844	149433	9	True				
ANR	149843	AssignmentExpression	( pParent -> pair ) [ i ] = pairUp		149433	0		=			
ANR	149844	ArrayIndexing	( pParent -> pair ) [ i ]		149433	0					
ANR	149845	PtrMemberAccess	pParent -> pair		149433	0					
ANR	149846	Identifier	pParent		149433	0					
ANR	149847	Identifier	pair		149433	1					
ANR	149848	Identifier	i		149433	1					
ANR	149849	Identifier	pairUp		149433	1					
ANR	149850	ExpressionStatement	( pParent -> nkeys ) ++	513:2:16848:16867	149433	10	True				
ANR	149851	PostIncDecOperationExpression	( pParent -> nkeys ) ++		149433	0					
ANR	149852	PtrMemberAccess	pParent -> nkeys		149433	0					
ANR	149853	Identifier	pParent		149433	0					
ANR	149854	Identifier	nkeys		149433	1					
ANR	149855	IncDec	++		149433	1					
ANR	149856	ExpressionStatement	pNode = pNode -> p	516:2:16883:16899	149433	11	True				
ANR	149857	AssignmentExpression	pNode = pNode -> p		149433	0		=			
ANR	149858	Identifier	pNode		149433	0					
ANR	149859	PtrMemberAccess	pNode -> p		149433	1					
ANR	149860	Identifier	pNode		149433	0					
ANR	149861	Identifier	p		149433	1					
ANR	149862	ExpressionStatement		517:2:16903:16903	149433	20	True				
ANR	149863	ReturnType	void		149433	1					
ANR	149864	Identifier	BTree :: insert		149433	2					
ANR	149865	ParameterList	"unsigned long key , unsigned long val"		149433	3					
ANR	149866	Parameter	unsigned long key	410:19:13717:13733	149433	0	True				
ANR	149867	ParameterType	unsigned long		149433	0					
ANR	149868	Identifier	key		149433	1					
ANR	149869	Parameter	unsigned long val	410:38:13736:13752	149433	1	True				
ANR	149870	ParameterType	unsigned long		149433	0					
ANR	149871	Identifier	val		149433	1					
ANR	149872	CFGEntryNode	ENTRY		149433		True				
ANR	149873	CFGExitNode	EXIT		149433		True				
ANR	149874	CFGExceptionNode	EXCEPTION		149433		True				
ANR	149875	CFGExceptionNode	EXCEPTION		149433		True				
ANR	149876	CFGExceptionNode	EXCEPTION		149433		True				
ANR	149877	Symbol	root -> p		149433						
ANR	149878	Symbol	pLeaf -> nkeys		149433						
ANR	149879	Symbol	pNode -> nkeys		149433						
ANR	149880	Symbol	* * pLeaf		149433						
ANR	149881	Symbol	pLeaf -> child		149433						
ANR	149882	Symbol	& pSibling		149433						
ANR	149883	Symbol	* pLeaf -> nkeys		149433						
ANR	149884	Symbol	* * root		149433						
ANR	149885	Symbol	( pLeaf -> pair ) [ i ] . key		149433						
ANR	149886	Symbol	* * pParent		149433						
ANR	149887	Symbol	& pairUp		149433						
ANR	149888	Symbol	root		149433						
ANR	149889	Symbol	* pLeaf		149433						
ANR	149890	Symbol	* root -> child		149433						
ANR	149891	Symbol	pParent -> child		149433						
ANR	149892	Symbol	* pParent -> pair		149433						
ANR	149893	Symbol	pNode		149433						
ANR	149894	Symbol	key		149433						
ANR	149895	Symbol	pSibling		149433						
ANR	149896	Symbol	root -> child		149433						
ANR	149897	Symbol	val		149433						
ANR	149898	Symbol	pLeaf		149433						
ANR	149899	Symbol	root -> nkeys		149433						
ANR	149900	Symbol	( pLeaf -> pair ) [ i + 1 ] . val		149433						
ANR	149901	Symbol	NULL		149433						
ANR	149902	Symbol	* root -> pair		149433						
ANR	149903	Symbol	( pLeaf -> pair ) [ i + 1 ] . key		149433						
ANR	149904	Symbol	i		149433						
ANR	149905	Symbol	root -> pair		149433						
ANR	149906	Symbol	* pNode		149433						
ANR	149907	Symbol	* pParent		149433						
ANR	149908	Symbol	* pSibling		149433						
ANR	149909	Symbol	( root -> pair ) [ 0 ] . key		149433						
ANR	149910	Symbol	pNode -> p		149433						
ANR	149911	Symbol	pairUp		149433						
ANR	149912	Symbol	( root -> pair ) [ 0 ] . val		149433						
ANR	149913	Symbol	pParent		149433						
ANR	149914	Symbol	* i		149433						
ANR	149915	Symbol	pLeaf -> pair		149433						
ANR	149916	Symbol	t		149433						
ANR	149917	Symbol	pSibling -> p		149433						
ANR	149918	Symbol	pParent -> pair		149433						
ANR	149919	Symbol	* pLeaf -> child		149433						
ANR	149920	Symbol	* root		149433						
ANR	149921	Symbol	* pLeaf -> pair		149433						
ANR	149922	Symbol	* pParent -> child		149433						
ANR	149923	Symbol	pParent -> nkeys		149433						
ANR	149924	Function	BTree :: keyTransferRight	568:0:18388:19627							
ANR	149925	FunctionDef	"BTree :: keyTransferRight (Btree_Node * pLeft , Btree_Node * pRight)"		149924	0					
ANR	149926	CompoundStatement		569:0:18456:19627	149924	0					
ANR	149927	IfStatement	if ( NULL == pLeft )		149924	0					
ANR	149928	Condition	NULL == pLeft	570:4:18462:18472	149924	0	True				
ANR	149929	EqualityExpression	NULL == pLeft		149924	0		==			
ANR	149930	Identifier	NULL		149924	0					
ANR	149931	Identifier	pLeft		149924	1					
ANR	149932	ThrowStatement	"throw ""BTree::keyTransferRight, pLeft is NULL"" ;"	570:17:18475:18521	149924	1	True				
ANR	149933	PrimaryExpression	"""BTree::keyTransferRight, pLeft is NULL"""		149924	0					
ANR	149934	IfStatement	if ( NULL == pRight )		149924	1					
ANR	149935	Condition	NULL == pRight	571:4:18527:18538	149924	0	True				
ANR	149936	EqualityExpression	NULL == pRight		149924	0		==			
ANR	149937	Identifier	NULL		149924	0					
ANR	149938	Identifier	pRight		149924	1					
ANR	149939	ThrowStatement	"throw ""BTree::keyTransferRight, pRight is NULL"" ;"	571:18:18541:18588	149924	1	True				
ANR	149940	PrimaryExpression	"""BTree::keyTransferRight, pRight is NULL"""		149924	0					
ANR	149941	IfStatement	if ( pLeft -> nkeys <= t - 1 )		149924	2					
ANR	149942	Condition	pLeft -> nkeys <= t - 1	572:5:18595:18613	149924	0	True				
ANR	149943	RelationalExpression	pLeft -> nkeys <= t - 1		149924	0		<=			
ANR	149944	PtrMemberAccess	pLeft -> nkeys		149924	0					
ANR	149945	Identifier	pLeft		149924	0					
ANR	149946	Identifier	nkeys		149924	1					
ANR	149947	AdditiveExpression	t - 1		149924	1		-			
ANR	149948	Identifier	t		149924	0					
ANR	149949	PrimaryExpression	1		149924	1					
ANR	149950	ThrowStatement	"throw ""BTree::keyTransferRight, not enough keys"" ;"	572:27:18617:18665	149924	1	True				
ANR	149951	PrimaryExpression	"""BTree::keyTransferRight, not enough keys"""		149924	0					
ANR	149952	IfStatement	if ( pRight -> nkeys >= 2 * t - 1 )		149924	3					
ANR	149953	Condition	pRight -> nkeys >= 2 * t - 1	573:5:18700:18721	149924	0	True				
ANR	149954	RelationalExpression	pRight -> nkeys >= 2 * t - 1		149924	0		>=			
ANR	149955	PtrMemberAccess	pRight -> nkeys		149924	0					
ANR	149956	Identifier	pRight		149924	0					
ANR	149957	Identifier	nkeys		149924	1					
ANR	149958	AdditiveExpression	2 * t - 1		149924	1		-			
ANR	149959	MultiplicativeExpression	2 * t		149924	0		*			
ANR	149960	PrimaryExpression	2		149924	0					
ANR	149961	Identifier	t		149924	1					
ANR	149962	PrimaryExpression	1		149924	1					
ANR	149963	ThrowStatement	"throw ""BTree::keyTransferRight, too many keys"" ;"	573:30:18725:18771	149924	1	True				
ANR	149964	PrimaryExpression	"""BTree::keyTransferRight, too many keys"""		149924	0					
ANR	149965	IdentifierDeclStatement	"int i , j ;"	575:1:18818:18825	149924	4	True				
ANR	149966	IdentifierDecl	i		149924	0					
ANR	149967	IdentifierDeclType	int		149924	0					
ANR	149968	Identifier	i		149924	1					
ANR	149969	IdentifierDecl	j		149924	1					
ANR	149970	IdentifierDeclType	int		149924	0					
ANR	149971	Identifier	j		149924	1					
ANR	149972	IdentifierDeclStatement	Btree_Node * pParent ;	576:1:18828:18847	149924	5	True				
ANR	149973	IdentifierDecl	* pParent		149924	0					
ANR	149974	IdentifierDeclType	Btree_Node *		149924	0					
ANR	149975	Identifier	pParent		149924	1					
ANR	149976	ExpressionStatement	pParent = pLeft -> p	579:1:18948:18966	149924	6	True				
ANR	149977	AssignmentExpression	pParent = pLeft -> p		149924	0		=			
ANR	149978	Identifier	pParent		149924	0					
ANR	149979	PtrMemberAccess	pLeft -> p		149924	1					
ANR	149980	Identifier	pLeft		149924	0					
ANR	149981	Identifier	p		149924	1					
ANR	149982	ForStatement	for ( i = 0 ; i < pParent -> nkeys ; i ++ )		149924	7					
ANR	149983	ForInit	i = 0 ;	580:5:18973:18976	149924	0	True				
ANR	149984	AssignmentExpression	i = 0		149924	0		=			
ANR	149985	Identifier	i		149924	0					
ANR	149986	PrimaryExpression	0		149924	1					
ANR	149987	Condition	i < pParent -> nkeys	580:10:18978:18993	149924	1	True				
ANR	149988	RelationalExpression	i < pParent -> nkeys		149924	0		<			
ANR	149989	Identifier	i		149924	0					
ANR	149990	PtrMemberAccess	pParent -> nkeys		149924	1					
ANR	149991	Identifier	pParent		149924	0					
ANR	149992	Identifier	nkeys		149924	1					
ANR	149993	PostIncDecOperationExpression	i ++	580:28:18996:18998	149924	2	True				
ANR	149994	Identifier	i		149924	0					
ANR	149995	IncDec	++		149924	1					
ANR	149996	CompoundStatement		12:34:545:545	149924	3					
ANR	149997	IfStatement	if ( ( pParent -> child ) [ i ] == pLeft )		149924	0					
ANR	149998	Condition	( pParent -> child ) [ i ] == pLeft	581:6:19010:19037	149924	0	True				
ANR	149999	EqualityExpression	( pParent -> child ) [ i ] == pLeft		149924	0		==			
ANR	150000	ArrayIndexing	( pParent -> child ) [ i ]		149924	0					
ANR	150001	PtrMemberAccess	pParent -> child		149924	0					
ANR	150002	Identifier	pParent		149924	0					
ANR	150003	Identifier	child		149924	1					
ANR	150004	Identifier	i		149924	1					
ANR	150005	Identifier	pLeft		149924	1					
ANR	150006	BreakStatement	break ;	581:37:19041:19046	149924	1	True				
ANR	150007	ExpressionStatement		582:2:19050:19050	149924	8	True				
ANR	150008	IfStatement	if ( i == pParent -> nkeys )		149924	9					
ANR	150009	Condition	i == pParent -> nkeys	583:5:19057:19073	149924	0	True				
ANR	150010	EqualityExpression	i == pParent -> nkeys		149924	0		==			
ANR	150011	Identifier	i		149924	0					
ANR	150012	PtrMemberAccess	pParent -> nkeys		149924	1					
ANR	150013	Identifier	pParent		149924	0					
ANR	150014	Identifier	nkeys		149924	1					
ANR	150015	ExpressionStatement	"printf ( ""not possible"" )"	583:25:19077:19099	149924	1	True				
ANR	150016	CallExpression	"printf ( ""not possible"" )"		149924	0					
ANR	150017	Callee	printf		149924	0					
ANR	150018	Identifier	printf		149924	0					
ANR	150019	ArgumentList	"""not possible"""		149924	1					
ANR	150020	Argument	"""not possible"""		149924	0					
ANR	150021	PrimaryExpression	"""not possible"""		149924	0					
ANR	150022	ExpressionStatement	j = pRight -> nkeys	586:1:19184:19201	149924	10	True				
ANR	150023	AssignmentExpression	j = pRight -> nkeys		149924	0		=			
ANR	150024	Identifier	j		149924	0					
ANR	150025	PtrMemberAccess	pRight -> nkeys		149924	1					
ANR	150026	Identifier	pRight		149924	0					
ANR	150027	Identifier	nkeys		149924	1					
ANR	150028	ExpressionStatement	( pRight -> child ) [ j + 1 ] = ( pRight -> child ) [ j ]	587:1:19204:19245	149924	11	True				
ANR	150029	AssignmentExpression	( pRight -> child ) [ j + 1 ] = ( pRight -> child ) [ j ]		149924	0		=			
ANR	150030	ArrayIndexing	( pRight -> child ) [ j + 1 ]		149924	0					
ANR	150031	PtrMemberAccess	pRight -> child		149924	0					
ANR	150032	Identifier	pRight		149924	0					
ANR	150033	Identifier	child		149924	1					
ANR	150034	AdditiveExpression	j + 1		149924	1		+			
ANR	150035	Identifier	j		149924	0					
ANR	150036	PrimaryExpression	1		149924	1					
ANR	150037	ArrayIndexing	( pRight -> child ) [ j ]		149924	1					
ANR	150038	PtrMemberAccess	pRight -> child		149924	0					
ANR	150039	Identifier	pRight		149924	0					
ANR	150040	Identifier	child		149924	1					
ANR	150041	Identifier	j		149924	1					
ANR	150042	ForStatement	for ( j -- ; j >= 0 ; j -- )		149924	12					
ANR	150043	ForInit	j -- ;	588:5:19252:19255	149924	0	True				
ANR	150044	PostIncDecOperationExpression	j --		149924	0					
ANR	150045	Identifier	j		149924	0					
ANR	150046	IncDec	--		149924	1					
ANR	150047	Condition	j >= 0	588:9:19256:19259	149924	1	True				
ANR	150048	RelationalExpression	j >= 0		149924	0		>=			
ANR	150049	Identifier	j		149924	0					
ANR	150050	PrimaryExpression	0		149924	1					
ANR	150051	PostIncDecOperationExpression	j --	588:14:19261:19263	149924	2	True				
ANR	150052	Identifier	j		149924	0					
ANR	150053	IncDec	--		149924	1					
ANR	150054	CompoundStatement		20:19:809:809	149924	3					
ANR	150055	ExpressionStatement	( pRight -> pair ) [ j + 1 ] = ( pRight -> pair ) [ j ]	589:2:19270:19309	149924	0	True				
ANR	150056	AssignmentExpression	( pRight -> pair ) [ j + 1 ] = ( pRight -> pair ) [ j ]		149924	0		=			
ANR	150057	ArrayIndexing	( pRight -> pair ) [ j + 1 ]		149924	0					
ANR	150058	PtrMemberAccess	pRight -> pair		149924	0					
ANR	150059	Identifier	pRight		149924	0					
ANR	150060	Identifier	pair		149924	1					
ANR	150061	AdditiveExpression	j + 1		149924	1		+			
ANR	150062	Identifier	j		149924	0					
ANR	150063	PrimaryExpression	1		149924	1					
ANR	150064	ArrayIndexing	( pRight -> pair ) [ j ]		149924	1					
ANR	150065	PtrMemberAccess	pRight -> pair		149924	0					
ANR	150066	Identifier	pRight		149924	0					
ANR	150067	Identifier	pair		149924	1					
ANR	150068	Identifier	j		149924	1					
ANR	150069	ExpressionStatement	( pRight -> child ) [ j + 1 ] = ( pRight -> child ) [ j ]	590:2:19313:19354	149924	1	True				
ANR	150070	AssignmentExpression	( pRight -> child ) [ j + 1 ] = ( pRight -> child ) [ j ]		149924	0		=			
ANR	150071	ArrayIndexing	( pRight -> child ) [ j + 1 ]		149924	0					
ANR	150072	PtrMemberAccess	pRight -> child		149924	0					
ANR	150073	Identifier	pRight		149924	0					
ANR	150074	Identifier	child		149924	1					
ANR	150075	AdditiveExpression	j + 1		149924	1		+			
ANR	150076	Identifier	j		149924	0					
ANR	150077	PrimaryExpression	1		149924	1					
ANR	150078	ArrayIndexing	( pRight -> child ) [ j ]		149924	1					
ANR	150079	PtrMemberAccess	pRight -> child		149924	0					
ANR	150080	Identifier	pRight		149924	0					
ANR	150081	Identifier	child		149924	1					
ANR	150082	Identifier	j		149924	1					
ANR	150083	ExpressionStatement		591:2:19358:19358	149924	13	True				
ANR	150084	ExpressionStatement	( pRight -> pair ) [ 0 ] = ( pParent -> pair ) [ i ]	594:1:19385:19423	149924	14	True				
ANR	150085	AssignmentExpression	( pRight -> pair ) [ 0 ] = ( pParent -> pair ) [ i ]		149924	0		=			
ANR	150086	ArrayIndexing	( pRight -> pair ) [ 0 ]		149924	0					
ANR	150087	PtrMemberAccess	pRight -> pair		149924	0					
ANR	150088	Identifier	pRight		149924	0					
ANR	150089	Identifier	pair		149924	1					
ANR	150090	PrimaryExpression	0		149924	1					
ANR	150091	ArrayIndexing	( pParent -> pair ) [ i ]		149924	1					
ANR	150092	PtrMemberAccess	pParent -> pair		149924	0					
ANR	150093	Identifier	pParent		149924	0					
ANR	150094	Identifier	pair		149924	1					
ANR	150095	Identifier	i		149924	1					
ANR	150096	ExpressionStatement	( pRight -> child ) [ 0 ] = ( pLeft -> child ) [ pLeft -> nkeys ]	595:1:19426:19475	149924	15	True				
ANR	150097	AssignmentExpression	( pRight -> child ) [ 0 ] = ( pLeft -> child ) [ pLeft -> nkeys ]		149924	0		=			
ANR	150098	ArrayIndexing	( pRight -> child ) [ 0 ]		149924	0					
ANR	150099	PtrMemberAccess	pRight -> child		149924	0					
ANR	150100	Identifier	pRight		149924	0					
ANR	150101	Identifier	child		149924	1					
ANR	150102	PrimaryExpression	0		149924	1					
ANR	150103	ArrayIndexing	( pLeft -> child ) [ pLeft -> nkeys ]		149924	1					
ANR	150104	PtrMemberAccess	pLeft -> child		149924	0					
ANR	150105	Identifier	pLeft		149924	0					
ANR	150106	Identifier	child		149924	1					
ANR	150107	PtrMemberAccess	pLeft -> nkeys		149924	1					
ANR	150108	Identifier	pLeft		149924	0					
ANR	150109	Identifier	nkeys		149924	1					
ANR	150110	ExpressionStatement	( pRight -> nkeys ) ++	596:1:19478:19495	149924	16	True				
ANR	150111	PostIncDecOperationExpression	( pRight -> nkeys ) ++		149924	0					
ANR	150112	PtrMemberAccess	pRight -> nkeys		149924	0					
ANR	150113	Identifier	pRight		149924	0					
ANR	150114	Identifier	nkeys		149924	1					
ANR	150115	IncDec	++		149924	1					
ANR	150116	ExpressionStatement	( pParent -> pair ) [ i ] = ( pLeft -> pair ) [ pLeft -> nkeys - 1 ]	599:1:19523:19573	149924	17	True				
ANR	150117	AssignmentExpression	( pParent -> pair ) [ i ] = ( pLeft -> pair ) [ pLeft -> nkeys - 1 ]		149924	0		=			
ANR	150118	ArrayIndexing	( pParent -> pair ) [ i ]		149924	0					
ANR	150119	PtrMemberAccess	pParent -> pair		149924	0					
ANR	150120	Identifier	pParent		149924	0					
ANR	150121	Identifier	pair		149924	1					
ANR	150122	Identifier	i		149924	1					
ANR	150123	ArrayIndexing	( pLeft -> pair ) [ pLeft -> nkeys - 1 ]		149924	1					
ANR	150124	PtrMemberAccess	pLeft -> pair		149924	0					
ANR	150125	Identifier	pLeft		149924	0					
ANR	150126	Identifier	pair		149924	1					
ANR	150127	AdditiveExpression	pLeft -> nkeys - 1		149924	1		-			
ANR	150128	PtrMemberAccess	pLeft -> nkeys		149924	0					
ANR	150129	Identifier	pLeft		149924	0					
ANR	150130	Identifier	nkeys		149924	1					
ANR	150131	PrimaryExpression	1		149924	1					
ANR	150132	ExpressionStatement	( pLeft -> nkeys ) --	602:1:19609:19625	149924	18	True				
ANR	150133	PostIncDecOperationExpression	( pLeft -> nkeys ) --		149924	0					
ANR	150134	PtrMemberAccess	pLeft -> nkeys		149924	0					
ANR	150135	Identifier	pLeft		149924	0					
ANR	150136	Identifier	nkeys		149924	1					
ANR	150137	IncDec	--		149924	1					
ANR	150138	ReturnType	void		149924	1					
ANR	150139	Identifier	BTree :: keyTransferRight		149924	2					
ANR	150140	ParameterList	"Btree_Node * pLeft , Btree_Node * pRight"		149924	3					
ANR	150141	Parameter	Btree_Node * pLeft	568:29:18417:18433	149924	0	True				
ANR	150142	ParameterType	Btree_Node *		149924	0					
ANR	150143	Identifier	pLeft		149924	1					
ANR	150144	Parameter	Btree_Node * pRight	568:48:18436:18453	149924	1	True				
ANR	150145	ParameterType	Btree_Node *		149924	0					
ANR	150146	Identifier	pRight		149924	1					
ANR	150147	CFGEntryNode	ENTRY		149924		True				
ANR	150148	CFGExitNode	EXIT		149924		True				
ANR	150149	CFGExceptionNode	EXCEPTION		149924		True				
ANR	150150	CFGExceptionNode	EXCEPTION		149924		True				
ANR	150151	CFGExceptionNode	EXCEPTION		149924		True				
ANR	150152	CFGExceptionNode	EXCEPTION		149924		True				
ANR	150153	CFGExceptionNode	EXCEPTION		149924		True				
ANR	150154	CFGExceptionNode	EXCEPTION		149924		True				
ANR	150155	CFGExceptionNode	EXCEPTION		149924		True				
ANR	150156	Symbol	* pLeft -> pair		149924						
ANR	150157	Symbol	* pLeft		149924						
ANR	150158	Symbol	* pRight		149924						
ANR	150159	Symbol	pRight -> pair		149924						
ANR	150160	Symbol	pLeft -> pair		149924						
ANR	150161	Symbol	* * pParent		149924						
ANR	150162	Symbol	pRight -> child		149924						
ANR	150163	Symbol	* pLeft -> nkeys		149924						
ANR	150164	Symbol	pParent -> child		149924						
ANR	150165	Symbol	* pParent -> pair		149924						
ANR	150166	Symbol	pLeft		149924						
ANR	150167	Symbol	pLeft -> child		149924						
ANR	150168	Symbol	* * pRight		149924						
ANR	150169	Symbol	pRight		149924						
ANR	150170	Symbol	NULL		149924						
ANR	150171	Symbol	pLeft -> p		149924						
ANR	150172	Symbol	* pRight -> child		149924						
ANR	150173	Symbol	* * pLeft		149924						
ANR	150174	Symbol	* pLeft -> child		149924						
ANR	150175	Symbol	i		149924						
ANR	150176	Symbol	j		149924						
ANR	150177	Symbol	* pParent		149924						
ANR	150178	Symbol	pParent		149924						
ANR	150179	Symbol	* i		149924						
ANR	150180	Symbol	t		149924						
ANR	150181	Symbol	* j		149924						
ANR	150182	Symbol	pLeft -> nkeys		149924						
ANR	150183	Symbol	pRight -> nkeys		149924						
ANR	150184	Symbol	pParent -> pair		149924						
ANR	150185	Symbol	* pParent -> child		149924						
ANR	150186	Symbol	* pRight -> pair		149924						
ANR	150187	Symbol	pParent -> nkeys		149924						
ANR	150188	Function	BTree :: keyTransferLeft	653:0:21113:22287							
ANR	150189	FunctionDef	"BTree :: keyTransferLeft (Btree_Node * pLeft , Btree_Node * pRight)"		150188	0					
ANR	150190	CompoundStatement		654:0:21180:22287	150188	0					
ANR	150191	IfStatement	if ( NULL == pLeft )		150188	0					
ANR	150192	Condition	NULL == pLeft	655:4:21186:21196	150188	0	True				
ANR	150193	EqualityExpression	NULL == pLeft		150188	0		==			
ANR	150194	Identifier	NULL		150188	0					
ANR	150195	Identifier	pLeft		150188	1					
ANR	150196	ThrowStatement	"throw ""BTree::keyTransferLeft, pLeft is NULL"" ;"	655:17:21199:21244	150188	1	True				
ANR	150197	PrimaryExpression	"""BTree::keyTransferLeft, pLeft is NULL"""		150188	0					
ANR	150198	IfStatement	if ( NULL == pRight )		150188	1					
ANR	150199	Condition	NULL == pRight	656:4:21250:21261	150188	0	True				
ANR	150200	EqualityExpression	NULL == pRight		150188	0		==			
ANR	150201	Identifier	NULL		150188	0					
ANR	150202	Identifier	pRight		150188	1					
ANR	150203	ThrowStatement	"throw ""BTree::keyTransferLeft, pRight is NULL"" ;"	656:18:21264:21310	150188	1	True				
ANR	150204	PrimaryExpression	"""BTree::keyTransferLeft, pRight is NULL"""		150188	0					
ANR	150205	IfStatement	if ( pRight -> nkeys <= t - 1 )		150188	2					
ANR	150206	Condition	pRight -> nkeys <= t - 1	657:5:21317:21336	150188	0	True				
ANR	150207	RelationalExpression	pRight -> nkeys <= t - 1		150188	0		<=			
ANR	150208	PtrMemberAccess	pRight -> nkeys		150188	0					
ANR	150209	Identifier	pRight		150188	0					
ANR	150210	Identifier	nkeys		150188	1					
ANR	150211	AdditiveExpression	t - 1		150188	1		-			
ANR	150212	Identifier	t		150188	0					
ANR	150213	PrimaryExpression	1		150188	1					
ANR	150214	ThrowStatement	"throw ""BTree::keyTransferLeft, not enough keys"" ;"	657:28:21340:21387	150188	1	True				
ANR	150215	PrimaryExpression	"""BTree::keyTransferLeft, not enough keys"""		150188	0					
ANR	150216	IfStatement	if ( pLeft -> nkeys >= 2 * t - 1 )		150188	3					
ANR	150217	Condition	pLeft -> nkeys >= 2 * t - 1	658:5:21423:21443	150188	0	True				
ANR	150218	RelationalExpression	pLeft -> nkeys >= 2 * t - 1		150188	0		>=			
ANR	150219	PtrMemberAccess	pLeft -> nkeys		150188	0					
ANR	150220	Identifier	pLeft		150188	0					
ANR	150221	Identifier	nkeys		150188	1					
ANR	150222	AdditiveExpression	2 * t - 1		150188	1		-			
ANR	150223	MultiplicativeExpression	2 * t		150188	0		*			
ANR	150224	PrimaryExpression	2		150188	0					
ANR	150225	Identifier	t		150188	1					
ANR	150226	PrimaryExpression	1		150188	1					
ANR	150227	ThrowStatement	"throw ""BTree::keyTransferLeft, too many keys"" ;"	658:29:21447:21492	150188	1	True				
ANR	150228	PrimaryExpression	"""BTree::keyTransferLeft, too many keys"""		150188	0					
ANR	150229	IdentifierDeclStatement	"int i , j ;"	660:1:21539:21546	150188	4	True				
ANR	150230	IdentifierDecl	i		150188	0					
ANR	150231	IdentifierDeclType	int		150188	0					
ANR	150232	Identifier	i		150188	1					
ANR	150233	IdentifierDecl	j		150188	1					
ANR	150234	IdentifierDeclType	int		150188	0					
ANR	150235	Identifier	j		150188	1					
ANR	150236	IdentifierDeclStatement	Btree_Node * pParent ;	661:1:21549:21568	150188	5	True				
ANR	150237	IdentifierDecl	* pParent		150188	0					
ANR	150238	IdentifierDeclType	Btree_Node *		150188	0					
ANR	150239	Identifier	pParent		150188	1					
ANR	150240	ExpressionStatement	pParent = pLeft -> p	664:1:21669:21687	150188	6	True				
ANR	150241	AssignmentExpression	pParent = pLeft -> p		150188	0		=			
ANR	150242	Identifier	pParent		150188	0					
ANR	150243	PtrMemberAccess	pLeft -> p		150188	1					
ANR	150244	Identifier	pLeft		150188	0					
ANR	150245	Identifier	p		150188	1					
ANR	150246	ForStatement	for ( i = 0 ; i < pParent -> nkeys ; i ++ )		150188	7					
ANR	150247	ForInit	i = 0 ;	665:5:21694:21697	150188	0	True				
ANR	150248	AssignmentExpression	i = 0		150188	0		=			
ANR	150249	Identifier	i		150188	0					
ANR	150250	PrimaryExpression	0		150188	1					
ANR	150251	Condition	i < pParent -> nkeys	665:10:21699:21714	150188	1	True				
ANR	150252	RelationalExpression	i < pParent -> nkeys		150188	0		<			
ANR	150253	Identifier	i		150188	0					
ANR	150254	PtrMemberAccess	pParent -> nkeys		150188	1					
ANR	150255	Identifier	pParent		150188	0					
ANR	150256	Identifier	nkeys		150188	1					
ANR	150257	PostIncDecOperationExpression	i ++	665:28:21717:21719	150188	2	True				
ANR	150258	Identifier	i		150188	0					
ANR	150259	IncDec	++		150188	1					
ANR	150260	CompoundStatement		12:34:542:542	150188	3					
ANR	150261	IfStatement	if ( ( pParent -> child ) [ i ] == pLeft )		150188	0					
ANR	150262	Condition	( pParent -> child ) [ i ] == pLeft	666:6:21731:21758	150188	0	True				
ANR	150263	EqualityExpression	( pParent -> child ) [ i ] == pLeft		150188	0		==			
ANR	150264	ArrayIndexing	( pParent -> child ) [ i ]		150188	0					
ANR	150265	PtrMemberAccess	pParent -> child		150188	0					
ANR	150266	Identifier	pParent		150188	0					
ANR	150267	Identifier	child		150188	1					
ANR	150268	Identifier	i		150188	1					
ANR	150269	Identifier	pLeft		150188	1					
ANR	150270	BreakStatement	break ;	666:37:21762:21767	150188	1	True				
ANR	150271	ExpressionStatement		667:2:21771:21771	150188	8	True				
ANR	150272	IfStatement	if ( i == i < pParent -> nkeys )		150188	9					
ANR	150273	Condition	i == i < pParent -> nkeys	668:5:21778:21796	150188	0	True				
ANR	150274	EqualityExpression	i == i < pParent -> nkeys		150188	0		==			
ANR	150275	Identifier	i		150188	0					
ANR	150276	RelationalExpression	i < pParent -> nkeys		150188	1		<			
ANR	150277	Identifier	i		150188	0					
ANR	150278	PtrMemberAccess	pParent -> nkeys		150188	1					
ANR	150279	Identifier	pParent		150188	0					
ANR	150280	Identifier	nkeys		150188	1					
ANR	150281	ExpressionStatement	"printf ( ""not possible"" )"	668:27:21800:21822	150188	1	True				
ANR	150282	CallExpression	"printf ( ""not possible"" )"		150188	0					
ANR	150283	Callee	printf		150188	0					
ANR	150284	Identifier	printf		150188	0					
ANR	150285	ArgumentList	"""not possible"""		150188	1					
ANR	150286	Argument	"""not possible"""		150188	0					
ANR	150287	PrimaryExpression	"""not possible"""		150188	0					
ANR	150288	ExpressionStatement	( pLeft -> pair ) [ pLeft -> nkeys ] = ( pParent -> pair ) [ i ]	671:1:21871:21919	150188	10	True				
ANR	150289	AssignmentExpression	( pLeft -> pair ) [ pLeft -> nkeys ] = ( pParent -> pair ) [ i ]		150188	0		=			
ANR	150290	ArrayIndexing	( pLeft -> pair ) [ pLeft -> nkeys ]		150188	0					
ANR	150291	PtrMemberAccess	pLeft -> pair		150188	0					
ANR	150292	Identifier	pLeft		150188	0					
ANR	150293	Identifier	pair		150188	1					
ANR	150294	PtrMemberAccess	pLeft -> nkeys		150188	1					
ANR	150295	Identifier	pLeft		150188	0					
ANR	150296	Identifier	nkeys		150188	1					
ANR	150297	ArrayIndexing	( pParent -> pair ) [ i ]		150188	1					
ANR	150298	PtrMemberAccess	pParent -> pair		150188	0					
ANR	150299	Identifier	pParent		150188	0					
ANR	150300	Identifier	pair		150188	1					
ANR	150301	Identifier	i		150188	1					
ANR	150302	ExpressionStatement	( pLeft -> child ) [ pLeft -> nkeys + 1 ] = ( pRight -> child ) [ 0 ]	672:1:21922:21973	150188	11	True				
ANR	150303	AssignmentExpression	( pLeft -> child ) [ pLeft -> nkeys + 1 ] = ( pRight -> child ) [ 0 ]		150188	0		=			
ANR	150304	ArrayIndexing	( pLeft -> child ) [ pLeft -> nkeys + 1 ]		150188	0					
ANR	150305	PtrMemberAccess	pLeft -> child		150188	0					
ANR	150306	Identifier	pLeft		150188	0					
ANR	150307	Identifier	child		150188	1					
ANR	150308	AdditiveExpression	pLeft -> nkeys + 1		150188	1		+			
ANR	150309	PtrMemberAccess	pLeft -> nkeys		150188	0					
ANR	150310	Identifier	pLeft		150188	0					
ANR	150311	Identifier	nkeys		150188	1					
ANR	150312	PrimaryExpression	1		150188	1					
ANR	150313	ArrayIndexing	( pRight -> child ) [ 0 ]		150188	1					
ANR	150314	PtrMemberAccess	pRight -> child		150188	0					
ANR	150315	Identifier	pRight		150188	0					
ANR	150316	Identifier	child		150188	1					
ANR	150317	PrimaryExpression	0		150188	1					
ANR	150318	ExpressionStatement	( pLeft -> nkeys ) ++	673:1:21976:21992	150188	12	True				
ANR	150319	PostIncDecOperationExpression	( pLeft -> nkeys ) ++		150188	0					
ANR	150320	PtrMemberAccess	pLeft -> nkeys		150188	0					
ANR	150321	Identifier	pLeft		150188	0					
ANR	150322	Identifier	nkeys		150188	1					
ANR	150323	IncDec	++		150188	1					
ANR	150324	ExpressionStatement	( pParent -> pair ) [ i ] = ( pRight -> pair ) [ 0 ]	676:1:22020:22058	150188	13	True				
ANR	150325	AssignmentExpression	( pParent -> pair ) [ i ] = ( pRight -> pair ) [ 0 ]		150188	0		=			
ANR	150326	ArrayIndexing	( pParent -> pair ) [ i ]		150188	0					
ANR	150327	PtrMemberAccess	pParent -> pair		150188	0					
ANR	150328	Identifier	pParent		150188	0					
ANR	150329	Identifier	pair		150188	1					
ANR	150330	Identifier	i		150188	1					
ANR	150331	ArrayIndexing	( pRight -> pair ) [ 0 ]		150188	1					
ANR	150332	PtrMemberAccess	pRight -> pair		150188	0					
ANR	150333	Identifier	pRight		150188	0					
ANR	150334	Identifier	pair		150188	1					
ANR	150335	PrimaryExpression	0		150188	1					
ANR	150336	ForStatement	for ( j = 0 ; j < pRight -> nkeys ; j ++ )		150188	14					
ANR	150337	ForInit	j = 0 ;	679:5:22104:22107	150188	0	True				
ANR	150338	AssignmentExpression	j = 0		150188	0		=			
ANR	150339	Identifier	j		150188	0					
ANR	150340	PrimaryExpression	0		150188	1					
ANR	150341	Condition	j < pRight -> nkeys	679:9:22108:22122	150188	1	True				
ANR	150342	RelationalExpression	j < pRight -> nkeys		150188	0		<			
ANR	150343	Identifier	j		150188	0					
ANR	150344	PtrMemberAccess	pRight -> nkeys		150188	1					
ANR	150345	Identifier	pRight		150188	0					
ANR	150346	Identifier	nkeys		150188	1					
ANR	150347	PostIncDecOperationExpression	j ++	679:25:22124:22126	150188	2	True				
ANR	150348	Identifier	j		150188	0					
ANR	150349	IncDec	++		150188	1					
ANR	150350	CompoundStatement		26:30:948:948	150188	3					
ANR	150351	ExpressionStatement	( pRight -> pair ) [ j ] = ( pRight -> pair ) [ j + 1 ]	680:2:22133:22172	150188	0	True				
ANR	150352	AssignmentExpression	( pRight -> pair ) [ j ] = ( pRight -> pair ) [ j + 1 ]		150188	0		=			
ANR	150353	ArrayIndexing	( pRight -> pair ) [ j ]		150188	0					
ANR	150354	PtrMemberAccess	pRight -> pair		150188	0					
ANR	150355	Identifier	pRight		150188	0					
ANR	150356	Identifier	pair		150188	1					
ANR	150357	Identifier	j		150188	1					
ANR	150358	ArrayIndexing	( pRight -> pair ) [ j + 1 ]		150188	1					
ANR	150359	PtrMemberAccess	pRight -> pair		150188	0					
ANR	150360	Identifier	pRight		150188	0					
ANR	150361	Identifier	pair		150188	1					
ANR	150362	AdditiveExpression	j + 1		150188	1		+			
ANR	150363	Identifier	j		150188	0					
ANR	150364	PrimaryExpression	1		150188	1					
ANR	150365	ExpressionStatement	( pRight -> child ) [ j ] = ( pRight -> child ) [ j + 1 ]	681:2:22176:22217	150188	1	True				
ANR	150366	AssignmentExpression	( pRight -> child ) [ j ] = ( pRight -> child ) [ j + 1 ]		150188	0		=			
ANR	150367	ArrayIndexing	( pRight -> child ) [ j ]		150188	0					
ANR	150368	PtrMemberAccess	pRight -> child		150188	0					
ANR	150369	Identifier	pRight		150188	0					
ANR	150370	Identifier	child		150188	1					
ANR	150371	Identifier	j		150188	1					
ANR	150372	ArrayIndexing	( pRight -> child ) [ j + 1 ]		150188	1					
ANR	150373	PtrMemberAccess	pRight -> child		150188	0					
ANR	150374	Identifier	pRight		150188	0					
ANR	150375	Identifier	child		150188	1					
ANR	150376	AdditiveExpression	j + 1		150188	1		+			
ANR	150377	Identifier	j		150188	0					
ANR	150378	PrimaryExpression	1		150188	1					
ANR	150379	ExpressionStatement		682:2:22221:22221	150188	15	True				
ANR	150380	ExpressionStatement	( pRight -> child ) [ j ] = ( pRight -> child ) [ j + 1 ]	683:1:22224:22265	150188	16	True				
ANR	150381	AssignmentExpression	( pRight -> child ) [ j ] = ( pRight -> child ) [ j + 1 ]		150188	0		=			
ANR	150382	ArrayIndexing	( pRight -> child ) [ j ]		150188	0					
ANR	150383	PtrMemberAccess	pRight -> child		150188	0					
ANR	150384	Identifier	pRight		150188	0					
ANR	150385	Identifier	child		150188	1					
ANR	150386	Identifier	j		150188	1					
ANR	150387	ArrayIndexing	( pRight -> child ) [ j + 1 ]		150188	1					
ANR	150388	PtrMemberAccess	pRight -> child		150188	0					
ANR	150389	Identifier	pRight		150188	0					
ANR	150390	Identifier	child		150188	1					
ANR	150391	AdditiveExpression	j + 1		150188	1		+			
ANR	150392	Identifier	j		150188	0					
ANR	150393	PrimaryExpression	1		150188	1					
ANR	150394	ExpressionStatement	( pRight -> nkeys ) --	684:1:22268:22285	150188	17	True				
ANR	150395	PostIncDecOperationExpression	( pRight -> nkeys ) --		150188	0					
ANR	150396	PtrMemberAccess	pRight -> nkeys		150188	0					
ANR	150397	Identifier	pRight		150188	0					
ANR	150398	Identifier	nkeys		150188	1					
ANR	150399	IncDec	--		150188	1					
ANR	150400	ReturnType	void		150188	1					
ANR	150401	Identifier	BTree :: keyTransferLeft		150188	2					
ANR	150402	ParameterList	"Btree_Node * pLeft , Btree_Node * pRight"		150188	3					
ANR	150403	Parameter	Btree_Node * pLeft	653:28:21141:21157	150188	0	True				
ANR	150404	ParameterType	Btree_Node *		150188	0					
ANR	150405	Identifier	pLeft		150188	1					
ANR	150406	Parameter	Btree_Node * pRight	653:47:21160:21177	150188	1	True				
ANR	150407	ParameterType	Btree_Node *		150188	0					
ANR	150408	Identifier	pRight		150188	1					
ANR	150409	CFGEntryNode	ENTRY		150188		True				
ANR	150410	CFGExitNode	EXIT		150188		True				
ANR	150411	CFGExceptionNode	EXCEPTION		150188		True				
ANR	150412	CFGExceptionNode	EXCEPTION		150188		True				
ANR	150413	CFGExceptionNode	EXCEPTION		150188		True				
ANR	150414	CFGExceptionNode	EXCEPTION		150188		True				
ANR	150415	CFGExceptionNode	EXCEPTION		150188		True				
ANR	150416	CFGExceptionNode	EXCEPTION		150188		True				
ANR	150417	CFGExceptionNode	EXCEPTION		150188		True				
ANR	150418	Symbol	* pLeft -> pair		150188						
ANR	150419	Symbol	* pRight		150188						
ANR	150420	Symbol	* pLeft		150188						
ANR	150421	Symbol	pRight -> pair		150188						
ANR	150422	Symbol	pLeft -> pair		150188						
ANR	150423	Symbol	* * pParent		150188						
ANR	150424	Symbol	* pLeft -> nkeys		150188						
ANR	150425	Symbol	pRight -> child		150188						
ANR	150426	Symbol	pParent -> child		150188						
ANR	150427	Symbol	* pParent -> pair		150188						
ANR	150428	Symbol	pLeft		150188						
ANR	150429	Symbol	pLeft -> child		150188						
ANR	150430	Symbol	* * pRight		150188						
ANR	150431	Symbol	pRight		150188						
ANR	150432	Symbol	NULL		150188						
ANR	150433	Symbol	pLeft -> p		150188						
ANR	150434	Symbol	* * pLeft		150188						
ANR	150435	Symbol	* pRight -> child		150188						
ANR	150436	Symbol	* pLeft -> child		150188						
ANR	150437	Symbol	i		150188						
ANR	150438	Symbol	j		150188						
ANR	150439	Symbol	* pParent		150188						
ANR	150440	Symbol	pParent		150188						
ANR	150441	Symbol	* i		150188						
ANR	150442	Symbol	t		150188						
ANR	150443	Symbol	* j		150188						
ANR	150444	Symbol	pRight -> nkeys		150188						
ANR	150445	Symbol	pLeft -> nkeys		150188						
ANR	150446	Symbol	pParent -> pair		150188						
ANR	150447	Symbol	* pParent -> child		150188						
ANR	150448	Symbol	* pRight -> pair		150188						
ANR	150449	Symbol	pParent -> nkeys		150188						
ANR	150450	Function	BTree :: searchKey	706:0:22848:24148							
ANR	150451	FunctionDef	"BTree :: searchKey (unsigned long key , Btree_Node * * ppNode , int * pIndex)"		150450	0					
ANR	150452	CompoundStatement		707:0:22929:24148	150450	0					
ANR	150453	IfStatement	if ( NULL == ppNode )		150450	0					
ANR	150454	Condition	NULL == ppNode	708:4:22935:22946	150450	0	True				
ANR	150455	EqualityExpression	NULL == ppNode		150450	0		==			
ANR	150456	Identifier	NULL		150450	0					
ANR	150457	Identifier	ppNode		150450	1					
ANR	150458	ThrowStatement	"throw ""BTree::searchKey, ppNode is NULL"" ;"	708:18:22949:22989	150450	1	True				
ANR	150459	PrimaryExpression	"""BTree::searchKey, ppNode is NULL"""		150450	0					
ANR	150460	IfStatement	if ( NULL == pIndex )		150450	1					
ANR	150461	Condition	NULL == pIndex	709:4:22995:23006	150450	0	True				
ANR	150462	EqualityExpression	NULL == pIndex		150450	0		==			
ANR	150463	Identifier	NULL		150450	0					
ANR	150464	Identifier	pIndex		150450	1					
ANR	150465	ThrowStatement	"throw ""BTree::searchKey, pIndex is NULL"" ;"	709:18:23009:23049	150450	1	True				
ANR	150466	PrimaryExpression	"""BTree::searchKey, pIndex is NULL"""		150450	0					
ANR	150467	IdentifierDeclStatement	Btree_Node * pNode ;	711:1:23053:23070	150450	2	True				
ANR	150468	IdentifierDecl	* pNode		150450	0					
ANR	150469	IdentifierDeclType	Btree_Node *		150450	0					
ANR	150470	Identifier	pNode		150450	1					
ANR	150471	IdentifierDeclStatement	int i ;	712:1:23073:23078	150450	3	True				
ANR	150472	IdentifierDecl	i		150450	0					
ANR	150473	IdentifierDeclType	int		150450	0					
ANR	150474	Identifier	i		150450	1					
ANR	150475	ExpressionStatement	pNode = root	714:1:23082:23094	150450	4	True				
ANR	150476	AssignmentExpression	pNode = root		150450	0		=			
ANR	150477	Identifier	pNode		150450	0					
ANR	150478	Identifier	root		150450	1					
ANR	150479	WhileStatement	while ( pNode )		150450	5					
ANR	150480	Condition	pNode	715:8:23104:23108	150450	0	True				
ANR	150481	Identifier	pNode		150450	0					
ANR	150482	CompoundStatement		9:16:182:182	150450	1					
ANR	150483	ForStatement	for ( i = 0 ; i < pNode -> nkeys ; i ++ )		150450	0					
ANR	150484	ForInit	i = 0 ;	718:6:23185:23188	150450	0	True				
ANR	150485	AssignmentExpression	i = 0		150450	0		=			
ANR	150486	Identifier	i		150450	0					
ANR	150487	PrimaryExpression	0		150450	1					
ANR	150488	Condition	i < pNode -> nkeys	718:11:23190:23203	150450	1	True				
ANR	150489	RelationalExpression	i < pNode -> nkeys		150450	0		<			
ANR	150490	Identifier	i		150450	0					
ANR	150491	PtrMemberAccess	pNode -> nkeys		150450	1					
ANR	150492	Identifier	pNode		150450	0					
ANR	150493	Identifier	nkeys		150450	1					
ANR	150494	PostIncDecOperationExpression	i ++	718:27:23206:23208	150450	2	True				
ANR	150495	Identifier	i		150450	0					
ANR	150496	IncDec	++		150450	1					
ANR	150497	CompoundStatement		12:32:281:281	150450	3					
ANR	150498	IfStatement	if ( ( pNode -> pair ) [ i ] . key == key )		150450	0					
ANR	150499	Condition	( pNode -> pair ) [ i ] . key == key	719:7:23220:23246	150450	0	True				
ANR	150500	EqualityExpression	( pNode -> pair ) [ i ] . key == key		150450	0		==			
ANR	150501	MemberAccess	( pNode -> pair ) [ i ] . key		150450	0					
ANR	150502	ArrayIndexing	( pNode -> pair ) [ i ]		150450	0					
ANR	150503	PtrMemberAccess	pNode -> pair		150450	0					
ANR	150504	Identifier	pNode		150450	0					
ANR	150505	Identifier	pair		150450	1					
ANR	150506	Identifier	i		150450	1					
ANR	150507	Identifier	key		150450	1					
ANR	150508	Identifier	key		150450	1					
ANR	150509	CompoundStatement		13:37:320:320	150450	1					
ANR	150510	ExpressionStatement	* ppNode = pNode	720:4:23256:23271	150450	0	True				
ANR	150511	AssignmentExpression	* ppNode = pNode		150450	0		=			
ANR	150512	UnaryOperationExpression	* ppNode		150450	0					
ANR	150513	UnaryOperator	*		150450	0					
ANR	150514	Identifier	ppNode		150450	1					
ANR	150515	Identifier	pNode		150450	1					
ANR	150516	ExpressionStatement	* pIndex = i	721:4:23277:23288	150450	1	True				
ANR	150517	AssignmentExpression	* pIndex = i		150450	0		=			
ANR	150518	UnaryOperationExpression	* pIndex		150450	0					
ANR	150519	UnaryOperator	*		150450	0					
ANR	150520	Identifier	pIndex		150450	1					
ANR	150521	Identifier	i		150450	1					
ANR	150522	ReturnStatement	return ;	722:4:23294:23300	150450	2	True				
ANR	150523	ExpressionStatement		723:4:23306:23306	150450	1	True				
ANR	150524	ExpressionStatement		724:3:23311:23311	150450	1	True				
ANR	150525	ExpressionStatement	i = 0	730:2:23655:23658	150450	2	True				
ANR	150526	AssignmentExpression	i = 0		150450	0		=			
ANR	150527	Identifier	i		150450	0					
ANR	150528	PrimaryExpression	0		150450	1					
ANR	150529	WhileStatement	while ( i < pNode -> nkeys && ( pNode -> pair ) [ i ] . key < key )		150450	3					
ANR	150530	Condition	i < pNode -> nkeys && ( pNode -> pair ) [ i ] . key < key	731:9:23669:23712	150450	0	True				
ANR	150531	AndExpression	i < pNode -> nkeys && ( pNode -> pair ) [ i ] . key < key		150450	0		&&			
ANR	150532	RelationalExpression	i < pNode -> nkeys		150450	0		<			
ANR	150533	Identifier	i		150450	0					
ANR	150534	PtrMemberAccess	pNode -> nkeys		150450	1					
ANR	150535	Identifier	pNode		150450	0					
ANR	150536	Identifier	nkeys		150450	1					
ANR	150537	RelationalExpression	( pNode -> pair ) [ i ] . key < key		150450	1		<			
ANR	150538	MemberAccess	( pNode -> pair ) [ i ] . key		150450	0					
ANR	150539	ArrayIndexing	( pNode -> pair ) [ i ]		150450	0					
ANR	150540	PtrMemberAccess	pNode -> pair		150450	0					
ANR	150541	Identifier	pNode		150450	0					
ANR	150542	Identifier	pair		150450	1					
ANR	150543	Identifier	i		150450	1					
ANR	150544	Identifier	key		150450	1					
ANR	150545	Identifier	key		150450	1					
ANR	150546	ExpressionStatement	i ++	731:56:23716:23719	150450	1	True				
ANR	150547	PostIncDecOperationExpression	i ++		150450	0					
ANR	150548	Identifier	i		150450	0					
ANR	150549	IncDec	++		150450	1					
ANR	150550	ExpressionStatement	pNode = ( pNode -> child ) [ i ]	738:2:24059:24084	150450	4	True				
ANR	150551	AssignmentExpression	pNode = ( pNode -> child ) [ i ]		150450	0		=			
ANR	150552	Identifier	pNode		150450	0					
ANR	150553	ArrayIndexing	( pNode -> child ) [ i ]		150450	1					
ANR	150554	PtrMemberAccess	pNode -> child		150450	0					
ANR	150555	Identifier	pNode		150450	0					
ANR	150556	Identifier	child		150450	1					
ANR	150557	Identifier	i		150450	1					
ANR	150558	ExpressionStatement		739:2:24088:24088	150450	6	True				
ANR	150559	ExpressionStatement	* ppNode = NULL	742:1:24132:24146	150450	7	True				
ANR	150560	AssignmentExpression	* ppNode = NULL		150450	0		=			
ANR	150561	UnaryOperationExpression	* ppNode		150450	0					
ANR	150562	UnaryOperator	*		150450	0					
ANR	150563	Identifier	ppNode		150450	1					
ANR	150564	Identifier	NULL		150450	1					
ANR	150565	ReturnType	void		150450	1					
ANR	150566	Identifier	BTree :: searchKey		150450	2					
ANR	150567	ParameterList	"unsigned long key , Btree_Node * * ppNode , int * pIndex"		150450	3					
ANR	150568	Parameter	unsigned long key	706:22:22870:22886	150450	0	True				
ANR	150569	ParameterType	unsigned long		150450	0					
ANR	150570	Identifier	key		150450	1					
ANR	150571	Parameter	Btree_Node * * ppNode	706:41:22889:22907	150450	1	True				
ANR	150572	ParameterType	Btree_Node * *		150450	0					
ANR	150573	Identifier	ppNode		150450	1					
ANR	150574	Parameter	int * pIndex	706:62:22910:22920	150450	2	True				
ANR	150575	ParameterType	int *		150450	0					
ANR	150576	Identifier	pIndex		150450	1					
ANR	150577	CFGEntryNode	ENTRY		150450		True				
ANR	150578	CFGExitNode	EXIT		150450		True				
ANR	150579	CFGExceptionNode	EXCEPTION		150450		True				
ANR	150580	CFGExceptionNode	EXCEPTION		150450		True				
ANR	150581	CFGExceptionNode	EXCEPTION		150450		True				
ANR	150582	Symbol	* pNode -> pair		150450						
ANR	150583	Symbol	NULL		150450						
ANR	150584	Symbol	i		150450						
ANR	150585	Symbol	pNode -> nkeys		150450						
ANR	150586	Symbol	ppNode		150450						
ANR	150587	Symbol	* pNode		150450						
ANR	150588	Symbol	* i		150450						
ANR	150589	Symbol	pIndex		150450						
ANR	150590	Symbol	pNode -> pair		150450						
ANR	150591	Symbol	pNode -> child		150450						
ANR	150592	Symbol	* * pNode		150450						
ANR	150593	Symbol	root		150450						
ANR	150594	Symbol	( pNode -> pair ) [ i ] . key		150450						
ANR	150595	Symbol	* pIndex		150450						
ANR	150596	Symbol	* pNode -> child		150450						
ANR	150597	Symbol	pNode		150450						
ANR	150598	Symbol	key		150450						
ANR	150599	Symbol	* ppNode		150450						
ANR	150600	Function	BTree :: exists	760:0:24383:24514							
ANR	150601	FunctionDef	BTree :: exists (unsigned long key)		150600	0					
ANR	150602	CompoundStatement		761:0:24427:24514	150600	0					
ANR	150603	IdentifierDeclStatement	Btree_Node * pNode = NULL ;	762:1:24430:24452	150600	0	True				
ANR	150604	IdentifierDecl	* pNode = NULL		150600	0					
ANR	150605	IdentifierDeclType	Btree_Node *		150600	0					
ANR	150606	Identifier	pNode		150600	1					
ANR	150607	AssignmentExpression	* pNode = NULL		150600	2		=			
ANR	150608	Identifier	NULL		150600	0					
ANR	150609	Identifier	NULL		150600	1					
ANR	150610	IdentifierDeclStatement	int idx ;	763:1:24455:24462	150600	1	True				
ANR	150611	IdentifierDecl	idx		150600	0					
ANR	150612	IdentifierDeclType	int		150600	0					
ANR	150613	Identifier	idx		150600	1					
ANR	150614	ExpressionStatement	"searchKey ( key , & pNode , & idx )"	764:1:24465:24491	150600	2	True				
ANR	150615	CallExpression	"searchKey ( key , & pNode , & idx )"		150600	0					
ANR	150616	Callee	searchKey		150600	0					
ANR	150617	Identifier	searchKey		150600	0					
ANR	150618	ArgumentList	key		150600	1					
ANR	150619	Argument	key		150600	0					
ANR	150620	Identifier	key		150600	0					
ANR	150621	Argument	& pNode		150600	1					
ANR	150622	UnaryOperationExpression	& pNode		150600	0					
ANR	150623	UnaryOperator	&		150600	0					
ANR	150624	Identifier	pNode		150600	1					
ANR	150625	Argument	& idx		150600	2					
ANR	150626	UnaryOperationExpression	& idx		150600	0					
ANR	150627	UnaryOperator	&		150600	0					
ANR	150628	Identifier	idx		150600	1					
ANR	150629	ReturnStatement	return NULL != pNode ;	765:1:24494:24512	150600	3	True				
ANR	150630	EqualityExpression	NULL != pNode		150600	0		!=			
ANR	150631	Identifier	NULL		150600	0					
ANR	150632	Identifier	pNode		150600	1					
ANR	150633	ReturnType	bool		150600	1					
ANR	150634	Identifier	BTree :: exists		150600	2					
ANR	150635	ParameterList	unsigned long key		150600	3					
ANR	150636	Parameter	unsigned long key	760:19:24402:24418	150600	0	True				
ANR	150637	ParameterType	unsigned long		150600	0					
ANR	150638	Identifier	key		150600	1					
ANR	150639	CFGEntryNode	ENTRY		150600		True				
ANR	150640	CFGExitNode	EXIT		150600		True				
ANR	150641	Symbol	NULL		150600						
ANR	150642	Symbol	& idx		150600						
ANR	150643	Symbol	idx		150600						
ANR	150644	Symbol	pNode		150600						
ANR	150645	Symbol	key		150600						
ANR	150646	Symbol	& pNode		150600						
ANR	150647	Function	BTree :: findVal	783:0:24800:25025							
ANR	150648	FunctionDef	BTree :: findVal (unsigned long key)		150647	0					
ANR	150649	CompoundStatement		784:0:24854:25025	150647	0					
ANR	150650	IdentifierDeclStatement	Btree_Node * pNode = NULL ;	785:1:24857:24879	150647	0	True				
ANR	150651	IdentifierDecl	* pNode = NULL		150647	0					
ANR	150652	IdentifierDeclType	Btree_Node *		150647	0					
ANR	150653	Identifier	pNode		150647	1					
ANR	150654	AssignmentExpression	* pNode = NULL		150647	2		=			
ANR	150655	Identifier	NULL		150647	0					
ANR	150656	Identifier	NULL		150647	1					
ANR	150657	IdentifierDeclStatement	int Index ;	786:1:24882:24891	150647	1	True				
ANR	150658	IdentifierDecl	Index		150647	0					
ANR	150659	IdentifierDeclType	int		150647	0					
ANR	150660	Identifier	Index		150647	1					
ANR	150661	ExpressionStatement	"searchKey ( key , & pNode , & Index )"	788:1:24895:24923	150647	2	True				
ANR	150662	CallExpression	"searchKey ( key , & pNode , & Index )"		150647	0					
ANR	150663	Callee	searchKey		150647	0					
ANR	150664	Identifier	searchKey		150647	0					
ANR	150665	ArgumentList	key		150647	1					
ANR	150666	Argument	key		150647	0					
ANR	150667	Identifier	key		150647	0					
ANR	150668	Argument	& pNode		150647	1					
ANR	150669	UnaryOperationExpression	& pNode		150647	0					
ANR	150670	UnaryOperator	&		150647	0					
ANR	150671	Identifier	pNode		150647	1					
ANR	150672	Argument	& Index		150647	2					
ANR	150673	UnaryOperationExpression	& Index		150647	0					
ANR	150674	UnaryOperator	&		150647	0					
ANR	150675	Identifier	Index		150647	1					
ANR	150676	IfStatement	if ( NULL == pNode )		150647	3					
ANR	150677	Condition	NULL == pNode	789:5:24930:24940	150647	0	True				
ANR	150678	EqualityExpression	NULL == pNode		150647	0		==			
ANR	150679	Identifier	NULL		150647	0					
ANR	150680	Identifier	pNode		150647	1					
ANR	150681	ThrowStatement	"throw ""BTree::findVal, key does not exist"" ;"	790:2:24946:24988	150647	1	True				
ANR	150682	PrimaryExpression	"""BTree::findVal, key does not exist"""		150647	0					
ANR	150683	ReturnStatement	return ( pNode -> pair ) [ Index ] . val ;	792:1:24992:25023	150647	4	True				
ANR	150684	MemberAccess	( pNode -> pair ) [ Index ] . val		150647	0					
ANR	150685	ArrayIndexing	( pNode -> pair ) [ Index ]		150647	0					
ANR	150686	PtrMemberAccess	pNode -> pair		150647	0					
ANR	150687	Identifier	pNode		150647	0					
ANR	150688	Identifier	pair		150647	1					
ANR	150689	Identifier	Index		150647	1					
ANR	150690	Identifier	val		150647	1					
ANR	150691	ReturnType	unsigned long		150647	1					
ANR	150692	Identifier	BTree :: findVal		150647	2					
ANR	150693	ParameterList	unsigned long key		150647	3					
ANR	150694	Parameter	unsigned long key	783:29:24829:24845	150647	0	True				
ANR	150695	ParameterType	unsigned long		150647	0					
ANR	150696	Identifier	key		150647	1					
ANR	150697	CFGEntryNode	ENTRY		150647		True				
ANR	150698	CFGExitNode	EXIT		150647		True				
ANR	150699	CFGExceptionNode	EXCEPTION		150647		True				
ANR	150700	Symbol	* pNode -> pair		150647						
ANR	150701	Symbol	NULL		150647						
ANR	150702	Symbol	( pNode -> pair ) [ Index ] . val		150647						
ANR	150703	Symbol	pNode -> pair		150647						
ANR	150704	Symbol	* Index		150647						
ANR	150705	Symbol	* * pNode		150647						
ANR	150706	Symbol	& Index		150647						
ANR	150707	Symbol	Index		150647						
ANR	150708	Symbol	* pNode		150647						
ANR	150709	Symbol	pNode		150647						
ANR	150710	Symbol	key		150647						
ANR	150711	Symbol	& pNode		150647						
ANR	150712	Function	BTree :: removeAtLeaf	810:0:25288:28075							
ANR	150713	FunctionDef	"BTree :: removeAtLeaf (Btree_Node * pNode , int i)"		150712	0					
ANR	150714	CompoundStatement		811:0:25341:28075	150712	0					
ANR	150715	IdentifierDeclStatement	Btree_Node * pLeftSibling ;	812:1:25344:25368	150712	0	True				
ANR	150716	IdentifierDecl	* pLeftSibling		150712	0					
ANR	150717	IdentifierDeclType	Btree_Node *		150712	0					
ANR	150718	Identifier	pLeftSibling		150712	1					
ANR	150719	IdentifierDeclStatement	Btree_Node * pRightSibling ;	813:1:25371:25396	150712	1	True				
ANR	150720	IdentifierDecl	* pRightSibling		150712	0					
ANR	150721	IdentifierDeclType	Btree_Node *		150712	0					
ANR	150722	Identifier	pRightSibling		150712	1					
ANR	150723	IdentifierDeclStatement	int h ;	814:1:25399:25404	150712	2	True				
ANR	150724	IdentifierDecl	h		150712	0					
ANR	150725	IdentifierDeclType	int		150712	0					
ANR	150726	Identifier	h		150712	1					
ANR	150727	IfStatement	if ( NULL == pNode )		150712	3					
ANR	150728	Condition	NULL == pNode	817:5:25427:25437	150712	0	True				
ANR	150729	EqualityExpression	NULL == pNode		150712	0		==			
ANR	150730	Identifier	NULL		150712	0					
ANR	150731	Identifier	pNode		150712	1					
ANR	150732	ThrowStatement	"throw ""removeAtLeaf, pNode is NULL"" ;"	818:2:25443:25478	150712	1	True				
ANR	150733	PrimaryExpression	"""removeAtLeaf, pNode is NULL"""		150712	0					
ANR	150734	IfStatement	if ( NULL != ( pNode -> child ) [ 0 ] )		150712	4					
ANR	150735	Condition	NULL != ( pNode -> child ) [ 0 ]	821:5:25504:25528	150712	0	True				
ANR	150736	EqualityExpression	NULL != ( pNode -> child ) [ 0 ]		150712	0		!=			
ANR	150737	Identifier	NULL		150712	0					
ANR	150738	ArrayIndexing	( pNode -> child ) [ 0 ]		150712	1					
ANR	150739	PtrMemberAccess	pNode -> child		150712	0					
ANR	150740	Identifier	pNode		150712	0					
ANR	150741	Identifier	child		150712	1					
ANR	150742	PrimaryExpression	0		150712	1					
ANR	150743	ThrowStatement	"throw ""removeAtLeaf, not a leaf"" ;"	822:2:25534:25566	150712	1	True				
ANR	150744	PrimaryExpression	"""removeAtLeaf, not a leaf"""		150712	0					
ANR	150745	IfStatement	if ( i < 0 || i >= pNode -> nkeys )		150712	5					
ANR	150746	Condition	i < 0 || i >= pNode -> nkeys	825:5:25612:25633	150712	0	True				
ANR	150747	OrExpression	i < 0 || i >= pNode -> nkeys		150712	0		||			
ANR	150748	RelationalExpression	i < 0		150712	0		<			
ANR	150749	Identifier	i		150712	0					
ANR	150750	PrimaryExpression	0		150712	1					
ANR	150751	RelationalExpression	i >= pNode -> nkeys		150712	1		>=			
ANR	150752	Identifier	i		150712	0					
ANR	150753	PtrMemberAccess	pNode -> nkeys		150712	1					
ANR	150754	Identifier	pNode		150712	0					
ANR	150755	Identifier	nkeys		150712	1					
ANR	150756	ThrowStatement	"throw ""removeAtLeaf, i out of bound"" ;"	826:2:25639:25675	150712	1	True				
ANR	150757	PrimaryExpression	"""removeAtLeaf, i out of bound"""		150712	0					
ANR	150758	ForStatement	for ( h = i + 1 ; h < pNode -> nkeys ; h ++ )		150712	6					
ANR	150759	ForInit	h = i + 1 ;	831:6:25829:25834	150712	0	True				
ANR	150760	AssignmentExpression	h = i + 1		150712	0		=			
ANR	150761	Identifier	h		150712	0					
ANR	150762	AdditiveExpression	i + 1		150712	1		+			
ANR	150763	Identifier	i		150712	0					
ANR	150764	PrimaryExpression	1		150712	1					
ANR	150765	Condition	h < pNode -> nkeys	831:13:25836:25849	150712	1	True				
ANR	150766	RelationalExpression	h < pNode -> nkeys		150712	0		<			
ANR	150767	Identifier	h		150712	0					
ANR	150768	PtrMemberAccess	pNode -> nkeys		150712	1					
ANR	150769	Identifier	pNode		150712	0					
ANR	150770	Identifier	nkeys		150712	1					
ANR	150771	PostIncDecOperationExpression	h ++	831:29:25852:25854	150712	2	True				
ANR	150772	Identifier	h		150712	0					
ANR	150773	IncDec	++		150712	1					
ANR	150774	ExpressionStatement	( pNode -> pair ) [ h - 1 ] = ( pNode -> pair ) [ h ]	832:2:25860:25897	150712	3	True				
ANR	150775	AssignmentExpression	( pNode -> pair ) [ h - 1 ] = ( pNode -> pair ) [ h ]		150712	0		=			
ANR	150776	ArrayIndexing	( pNode -> pair ) [ h - 1 ]		150712	0					
ANR	150777	PtrMemberAccess	pNode -> pair		150712	0					
ANR	150778	Identifier	pNode		150712	0					
ANR	150779	Identifier	pair		150712	1					
ANR	150780	AdditiveExpression	h - 1		150712	1		-			
ANR	150781	Identifier	h		150712	0					
ANR	150782	PrimaryExpression	1		150712	1					
ANR	150783	ArrayIndexing	( pNode -> pair ) [ h ]		150712	1					
ANR	150784	PtrMemberAccess	pNode -> pair		150712	0					
ANR	150785	Identifier	pNode		150712	0					
ANR	150786	Identifier	pair		150712	1					
ANR	150787	Identifier	h		150712	1					
ANR	150788	ExpressionStatement	( pNode -> nkeys ) --	833:1:25900:25918	150712	7	True				
ANR	150789	PostIncDecOperationExpression	( pNode -> nkeys ) --		150712	0					
ANR	150790	PtrMemberAccess	pNode -> nkeys		150712	0					
ANR	150791	Identifier	pNode		150712	0					
ANR	150792	Identifier	nkeys		150712	1					
ANR	150793	IncDec	--		150712	1					
ANR	150794	IfStatement	if ( NULL == ( pNode -> p ) && 0 == ( pNode -> nkeys ) )		150712	8					
ANR	150795	Condition	NULL == ( pNode -> p ) && 0 == ( pNode -> nkeys )	836:5:26011:26047	150712	0	True				
ANR	150796	AndExpression	NULL == ( pNode -> p ) && 0 == ( pNode -> nkeys )		150712	0		&&			
ANR	150797	EqualityExpression	NULL == ( pNode -> p )		150712	0		==			
ANR	150798	Identifier	NULL		150712	0					
ANR	150799	PtrMemberAccess	pNode -> p		150712	1					
ANR	150800	Identifier	pNode		150712	0					
ANR	150801	Identifier	p		150712	1					
ANR	150802	EqualityExpression	0 == ( pNode -> nkeys )		150712	1		==			
ANR	150803	PrimaryExpression	0		150712	0					
ANR	150804	PtrMemberAccess	pNode -> nkeys		150712	1					
ANR	150805	Identifier	pNode		150712	0					
ANR	150806	Identifier	nkeys		150712	1					
ANR	150807	CompoundStatement		26:45:709:709	150712	1					
ANR	150808	Statement	delete	837:2:26055:26060	150712	0	True				
ANR	150809	ExpressionStatement	root	837:9:26062:26066	150712	1	True				
ANR	150810	Identifier	root		150712	0					
ANR	150811	ExpressionStatement	root = NULL	838:2:26070:26081	150712	2	True				
ANR	150812	AssignmentExpression	root = NULL		150712	0		=			
ANR	150813	Identifier	root		150712	0					
ANR	150814	Identifier	NULL		150712	1					
ANR	150815	ReturnStatement	return ;	839:2:26085:26091	150712	3	True				
ANR	150816	ExpressionStatement		840:2:26095:26095	150712	9	True				
ANR	150817	WhileStatement	while ( ( pNode -> nkeys ) < t - 1 && NULL != pNode -> p )		150712	10					
ANR	150818	Condition	( pNode -> nkeys ) < t - 1 && NULL != pNode -> p	843:8:26168:26205	150712	0	True				
ANR	150819	AndExpression	( pNode -> nkeys ) < t - 1 && NULL != pNode -> p		150712	0		&&			
ANR	150820	RelationalExpression	( pNode -> nkeys ) < t - 1		150712	0		<			
ANR	150821	PtrMemberAccess	pNode -> nkeys		150712	0					
ANR	150822	Identifier	pNode		150712	0					
ANR	150823	Identifier	nkeys		150712	1					
ANR	150824	AdditiveExpression	t - 1		150712	1		-			
ANR	150825	Identifier	t		150712	0					
ANR	150826	PrimaryExpression	1		150712	1					
ANR	150827	EqualityExpression	NULL != pNode -> p		150712	1		!=			
ANR	150828	Identifier	NULL		150712	0					
ANR	150829	PtrMemberAccess	pNode -> p		150712	1					
ANR	150830	Identifier	pNode		150712	0					
ANR	150831	Identifier	p		150712	1					
ANR	150832	CompoundStatement		33:49:867:867	150712	1					
ANR	150833	ExpressionStatement	pLeftSibling = leftSibling ( pNode )	845:2:26258:26291	150712	0	True				
ANR	150834	AssignmentExpression	pLeftSibling = leftSibling ( pNode )		150712	0		=			
ANR	150835	Identifier	pLeftSibling		150712	0					
ANR	150836	CallExpression	leftSibling ( pNode )		150712	1					
ANR	150837	Callee	leftSibling		150712	0					
ANR	150838	Identifier	leftSibling		150712	0					
ANR	150839	ArgumentList	pNode		150712	1					
ANR	150840	Argument	pNode		150712	0					
ANR	150841	Identifier	pNode		150712	0					
ANR	150842	IfStatement	if ( NULL != pLeftSibling )		150712	1					
ANR	150843	Condition	NULL != pLeftSibling	846:6:26299:26316	150712	0	True				
ANR	150844	EqualityExpression	NULL != pLeftSibling		150712	0		!=			
ANR	150845	Identifier	NULL		150712	0					
ANR	150846	Identifier	pLeftSibling		150712	1					
ANR	150847	CompoundStatement		36:27:978:978	150712	1					
ANR	150848	IfStatement	if ( pLeftSibling -> nkeys >= t )		150712	0					
ANR	150849	Condition	pLeftSibling -> nkeys >= t	848:7:26428:26449	150712	0	True				
ANR	150850	RelationalExpression	pLeftSibling -> nkeys >= t		150712	0		>=			
ANR	150851	PtrMemberAccess	pLeftSibling -> nkeys		150712	0					
ANR	150852	Identifier	pLeftSibling		150712	0					
ANR	150853	Identifier	nkeys		150712	1					
ANR	150854	Identifier	t		150712	1					
ANR	150855	CompoundStatement		38:32:1111:1111	150712	1					
ANR	150856	ExpressionStatement	"keyTransferRight ( pLeftSibling , pNode )"	849:4:26459:26495	150712	0	True				
ANR	150857	CallExpression	"keyTransferRight ( pLeftSibling , pNode )"		150712	0					
ANR	150858	Callee	keyTransferRight		150712	0					
ANR	150859	Identifier	keyTransferRight		150712	0					
ANR	150860	ArgumentList	pLeftSibling		150712	1					
ANR	150861	Argument	pLeftSibling		150712	0					
ANR	150862	Identifier	pLeftSibling		150712	0					
ANR	150863	Argument	pNode		150712	1					
ANR	150864	Identifier	pNode		150712	0					
ANR	150865	ReturnStatement	return ;	850:4:26501:26507	150712	1	True				
ANR	150866	ElseStatement	else		150712	0					
ANR	150867	CompoundStatement		42:8:1180:1180	150712	0					
ANR	150868	ExpressionStatement	"attachSibling ( pLeftSibling , pNode )"	857:4:26808:26841	150712	0	True				
ANR	150869	CallExpression	"attachSibling ( pLeftSibling , pNode )"		150712	0					
ANR	150870	Callee	attachSibling		150712	0					
ANR	150871	Identifier	attachSibling		150712	0					
ANR	150872	ArgumentList	pLeftSibling		150712	1					
ANR	150873	Argument	pLeftSibling		150712	0					
ANR	150874	Identifier	pLeftSibling		150712	0					
ANR	150875	Argument	pNode		150712	1					
ANR	150876	Identifier	pNode		150712	0					
ANR	150877	ExpressionStatement	pNode = pLeftSibling -> p	862:4:27055:27078	150712	1	True				
ANR	150878	AssignmentExpression	pNode = pLeftSibling -> p		150712	0		=			
ANR	150879	Identifier	pNode		150712	0					
ANR	150880	PtrMemberAccess	pLeftSibling -> p		150712	1					
ANR	150881	Identifier	pLeftSibling		150712	0					
ANR	150882	Identifier	p		150712	1					
ANR	150883	IfStatement	if ( NULL == pNode -> p && 0 == pNode -> nkeys )		150712	2					
ANR	150884	Condition	NULL == pNode -> p && 0 == pNode -> nkeys	865:8:27165:27197	150712	0	True				
ANR	150885	AndExpression	NULL == pNode -> p && 0 == pNode -> nkeys		150712	0		&&			
ANR	150886	EqualityExpression	NULL == pNode -> p		150712	0		==			
ANR	150887	Identifier	NULL		150712	0					
ANR	150888	PtrMemberAccess	pNode -> p		150712	1					
ANR	150889	Identifier	pNode		150712	0					
ANR	150890	Identifier	p		150712	1					
ANR	150891	EqualityExpression	0 == pNode -> nkeys		150712	1		==			
ANR	150892	PrimaryExpression	0		150712	0					
ANR	150893	PtrMemberAccess	pNode -> nkeys		150712	1					
ANR	150894	Identifier	pNode		150712	0					
ANR	150895	Identifier	nkeys		150712	1					
ANR	150896	CompoundStatement		55:44:1859:1859	150712	1					
ANR	150897	ExpressionStatement	root = pLeftSibling	866:5:27208:27227	150712	0	True				
ANR	150898	AssignmentExpression	root = pLeftSibling		150712	0		=			
ANR	150899	Identifier	root		150712	0					
ANR	150900	Identifier	pLeftSibling		150712	1					
ANR	150901	ExpressionStatement	root -> p = NULL	867:5:27234:27248	150712	1	True				
ANR	150902	AssignmentExpression	root -> p = NULL		150712	0		=			
ANR	150903	PtrMemberAccess	root -> p		150712	0					
ANR	150904	Identifier	root		150712	0					
ANR	150905	Identifier	p		150712	1					
ANR	150906	Identifier	NULL		150712	1					
ANR	150907	Statement	delete	868:5:27255:27260	150712	2	True				
ANR	150908	ExpressionStatement	pNode	868:12:27262:27267	150712	3	True				
ANR	150909	Identifier	pNode		150712	0					
ANR	150910	ReturnStatement	return ;	869:5:27274:27280	150712	4	True				
ANR	150911	ExpressionStatement		870:5:27287:27287	150712	3	True				
ANR	150912	ExpressionStatement		871:4:27293:27293	150712	1	True				
ANR	150913	ElseStatement	else		150712	0					
ANR	150914	CompoundStatement		63:7:1964:1964	150712	0					
ANR	150915	ExpressionStatement	pRightSibling = rightSibling ( pNode )	875:3:27414:27449	150712	0	True				
ANR	150916	AssignmentExpression	pRightSibling = rightSibling ( pNode )		150712	0		=			
ANR	150917	Identifier	pRightSibling		150712	0					
ANR	150918	CallExpression	rightSibling ( pNode )		150712	1					
ANR	150919	Callee	rightSibling		150712	0					
ANR	150920	Identifier	rightSibling		150712	0					
ANR	150921	ArgumentList	pNode		150712	1					
ANR	150922	Argument	pNode		150712	0					
ANR	150923	Identifier	pNode		150712	0					
ANR	150924	IfStatement	if ( NULL == pRightSibling )		150712	1					
ANR	150925	Condition	NULL == pRightSibling	876:7:27458:27476	150712	0	True				
ANR	150926	EqualityExpression	NULL == pRightSibling		150712	0		==			
ANR	150927	Identifier	NULL		150712	0					
ANR	150928	Identifier	pRightSibling		150712	1					
ANR	150929	CompoundStatement		66:29:2138:2138	150712	1					
ANR	150930	ExpressionStatement	"printf ( ""not possible, must have right sibling\\n"" )"	876:30:27481:27530	150712	0	True				
ANR	150931	CallExpression	"printf ( ""not possible, must have right sibling\\n"" )"		150712	0					
ANR	150932	Callee	printf		150712	0					
ANR	150933	Identifier	printf		150712	0					
ANR	150934	ArgumentList	"""not possible, must have right sibling\\n"""		150712	1					
ANR	150935	Argument	"""not possible, must have right sibling\\n"""		150712	0					
ANR	150936	PrimaryExpression	"""not possible, must have right sibling\\n"""		150712	0					
ANR	150937	ReturnStatement	return ;	876:81:27532:27538	150712	1	True				
ANR	150938	IfStatement	if ( pRightSibling -> nkeys >= t )		150712	2					
ANR	150939	Condition	pRightSibling -> nkeys >= t	879:7:27626:27650	150712	0	True				
ANR	150940	RelationalExpression	pRightSibling -> nkeys >= t		150712	0		>=			
ANR	150941	PtrMemberAccess	pRightSibling -> nkeys		150712	0					
ANR	150942	Identifier	pRightSibling		150712	0					
ANR	150943	Identifier	nkeys		150712	1					
ANR	150944	Identifier	t		150712	1					
ANR	150945	CompoundStatement		69:35:2312:2312	150712	1					
ANR	150946	ExpressionStatement	"keyTransferLeft ( pNode , pRightSibling )"	880:4:27660:27696	150712	0	True				
ANR	150947	CallExpression	"keyTransferLeft ( pNode , pRightSibling )"		150712	0					
ANR	150948	Callee	keyTransferLeft		150712	0					
ANR	150949	Identifier	keyTransferLeft		150712	0					
ANR	150950	ArgumentList	pNode		150712	1					
ANR	150951	Argument	pNode		150712	0					
ANR	150952	Identifier	pNode		150712	0					
ANR	150953	Argument	pRightSibling		150712	1					
ANR	150954	Identifier	pRightSibling		150712	0					
ANR	150955	ReturnStatement	return ;	881:4:27702:27708	150712	1	True				
ANR	150956	ExpressionStatement		882:4:27714:27714	150712	3	True				
ANR	150957	ExpressionStatement	"attachSibling ( pNode , pRightSibling )"	885:3:27795:27829	150712	4	True				
ANR	150958	CallExpression	"attachSibling ( pNode , pRightSibling )"		150712	0					
ANR	150959	Callee	attachSibling		150712	0					
ANR	150960	Identifier	attachSibling		150712	0					
ANR	150961	ArgumentList	pNode		150712	1					
ANR	150962	Argument	pNode		150712	0					
ANR	150963	Identifier	pNode		150712	0					
ANR	150964	Argument	pRightSibling		150712	1					
ANR	150965	Identifier	pRightSibling		150712	0					
ANR	150966	ExpressionStatement	pNode = pNode -> p	887:3:27835:27851	150712	5	True				
ANR	150967	AssignmentExpression	pNode = pNode -> p		150712	0		=			
ANR	150968	Identifier	pNode		150712	0					
ANR	150969	PtrMemberAccess	pNode -> p		150712	1					
ANR	150970	Identifier	pNode		150712	0					
ANR	150971	Identifier	p		150712	1					
ANR	150972	IfStatement	if ( NULL == pNode -> p && 0 == pNode -> nkeys )		150712	6					
ANR	150973	Condition	NULL == pNode -> p && 0 == pNode -> nkeys	890:7:27941:27973	150712	0	True				
ANR	150974	AndExpression	NULL == pNode -> p && 0 == pNode -> nkeys		150712	0		&&			
ANR	150975	EqualityExpression	NULL == pNode -> p		150712	0		==			
ANR	150976	Identifier	NULL		150712	0					
ANR	150977	PtrMemberAccess	pNode -> p		150712	1					
ANR	150978	Identifier	pNode		150712	0					
ANR	150979	Identifier	p		150712	1					
ANR	150980	EqualityExpression	0 == pNode -> nkeys		150712	1		==			
ANR	150981	PrimaryExpression	0		150712	0					
ANR	150982	PtrMemberAccess	pNode -> nkeys		150712	1					
ANR	150983	Identifier	pNode		150712	0					
ANR	150984	Identifier	nkeys		150712	1					
ANR	150985	CompoundStatement		80:43:2635:2635	150712	1					
ANR	150986	ExpressionStatement	root = ( pNode -> child ) [ 0 ]	891:4:27983:28007	150712	0	True				
ANR	150987	AssignmentExpression	root = ( pNode -> child ) [ 0 ]		150712	0		=			
ANR	150988	Identifier	root		150712	0					
ANR	150989	ArrayIndexing	( pNode -> child ) [ 0 ]		150712	1					
ANR	150990	PtrMemberAccess	pNode -> child		150712	0					
ANR	150991	Identifier	pNode		150712	0					
ANR	150992	Identifier	child		150712	1					
ANR	150993	PrimaryExpression	0		150712	1					
ANR	150994	ExpressionStatement	root -> p = NULL	892:4:28013:28027	150712	1	True				
ANR	150995	AssignmentExpression	root -> p = NULL		150712	0		=			
ANR	150996	PtrMemberAccess	root -> p		150712	0					
ANR	150997	Identifier	root		150712	0					
ANR	150998	Identifier	p		150712	1					
ANR	150999	Identifier	NULL		150712	1					
ANR	151000	Statement	delete	893:4:28033:28038	150712	2	True				
ANR	151001	ExpressionStatement	pNode	893:11:28040:28045	150712	3	True				
ANR	151002	Identifier	pNode		150712	0					
ANR	151003	ReturnStatement	return ;	894:4:28051:28057	150712	4	True				
ANR	151004	ExpressionStatement		895:4:28063:28063	150712	7	True				
ANR	151005	ExpressionStatement		896:3:28068:28068	150712	2	True				
ANR	151006	ExpressionStatement		898:2:28073:28073	150712	11	True				
ANR	151007	ReturnType	void		150712	1					
ANR	151008	Identifier	BTree :: removeAtLeaf		150712	2					
ANR	151009	ParameterList	"Btree_Node * pNode , int i"		150712	3					
ANR	151010	Parameter	Btree_Node * pNode	810:26:25314:25330	150712	0	True				
ANR	151011	ParameterType	Btree_Node *		150712	0					
ANR	151012	Identifier	pNode		150712	1					
ANR	151013	Parameter	int i	810:45:25333:25337	150712	1	True				
ANR	151014	ParameterType	int		150712	0					
ANR	151015	Identifier	i		150712	1					
ANR	151016	CFGEntryNode	ENTRY		150712		True				
ANR	151017	CFGExitNode	EXIT		150712		True				
ANR	151018	CFGExceptionNode	EXCEPTION		150712		True				
ANR	151019	CFGExceptionNode	EXCEPTION		150712		True				
ANR	151020	CFGExceptionNode	EXCEPTION		150712		True				
ANR	151021	CFGExceptionNode	EXCEPTION		150712		True				
ANR	151022	CFGExceptionNode	EXCEPTION		150712		True				
ANR	151023	Symbol	* pNode -> pair		150712						
ANR	151024	Symbol	pRightSibling		150712						
ANR	151025	Symbol	root -> p		150712						
ANR	151026	Symbol	pNode -> nkeys		150712						
ANR	151027	Symbol	leftSibling		150712						
ANR	151028	Symbol	pNode -> child		150712						
ANR	151029	Symbol	root		150712						
ANR	151030	Symbol	pNode		150712						
ANR	151031	Symbol	NULL		150712						
ANR	151032	Symbol	pLeftSibling -> p		150712						
ANR	151033	Symbol	pLeftSibling		150712						
ANR	151034	Symbol	pLeftSibling -> nkeys		150712						
ANR	151035	Symbol	h		150712						
ANR	151036	Symbol	i		150712						
ANR	151037	Symbol	* pRightSibling		150712						
ANR	151038	Symbol	* pNode		150712						
ANR	151039	Symbol	pRightSibling -> nkeys		150712						
ANR	151040	Symbol	* pLeftSibling		150712						
ANR	151041	Symbol	pNode -> p		150712						
ANR	151042	Symbol	* h		150712						
ANR	151043	Symbol	rightSibling		150712						
ANR	151044	Symbol	t		150712						
ANR	151045	Symbol	pNode -> pair		150712						
ANR	151046	Symbol	* * pNode		150712						
ANR	151047	Symbol	* pNode -> child		150712						
ANR	151048	Symbol	* root		150712						
ANR	151049	Function	BTree :: remove	916:0:28342:29531							
ANR	151050	FunctionDef	BTree :: remove (unsigned long key)		151049	0					
ANR	151051	CompoundStatement		917:0:28380:29531	151049	0					
ANR	151052	IdentifierDeclStatement	Btree_Node * pLeaf ;	918:1:28383:28400	151049	0	True				
ANR	151053	IdentifierDecl	* pLeaf		151049	0					
ANR	151054	IdentifierDeclType	Btree_Node *		151049	0					
ANR	151055	Identifier	pLeaf		151049	1					
ANR	151056	IdentifierDeclStatement	int idx ;	919:1:28403:28410	151049	1	True				
ANR	151057	IdentifierDecl	idx		151049	0					
ANR	151058	IdentifierDeclType	int		151049	0					
ANR	151059	Identifier	idx		151049	1					
ANR	151060	IdentifierDeclStatement	Btree_Node * pNode = NULL ;	922:1:28446:28468	151049	2	True				
ANR	151061	IdentifierDecl	* pNode = NULL		151049	0					
ANR	151062	IdentifierDeclType	Btree_Node *		151049	0					
ANR	151063	Identifier	pNode		151049	1					
ANR	151064	AssignmentExpression	* pNode = NULL		151049	2		=			
ANR	151065	Identifier	NULL		151049	0					
ANR	151066	Identifier	NULL		151049	1					
ANR	151067	ExpressionStatement	"searchKey ( key , & pNode , & idx )"	923:1:28471:28497	151049	3	True				
ANR	151068	CallExpression	"searchKey ( key , & pNode , & idx )"		151049	0					
ANR	151069	Callee	searchKey		151049	0					
ANR	151070	Identifier	searchKey		151049	0					
ANR	151071	ArgumentList	key		151049	1					
ANR	151072	Argument	key		151049	0					
ANR	151073	Identifier	key		151049	0					
ANR	151074	Argument	& pNode		151049	1					
ANR	151075	UnaryOperationExpression	& pNode		151049	0					
ANR	151076	UnaryOperator	&		151049	0					
ANR	151077	Identifier	pNode		151049	1					
ANR	151078	Argument	& idx		151049	2					
ANR	151079	UnaryOperationExpression	& idx		151049	0					
ANR	151080	UnaryOperator	&		151049	0					
ANR	151081	Identifier	idx		151049	1					
ANR	151082	IfStatement	if ( NULL == pNode )		151049	4					
ANR	151083	Condition	NULL == pNode	925:5:28505:28517	151049	0	True				
ANR	151084	EqualityExpression	NULL == pNode		151049	0		==			
ANR	151085	Identifier	NULL		151049	0					
ANR	151086	Identifier	pNode		151049	1					
ANR	151087	ReturnStatement	return false ;	927:2:28564:28576	151049	1	True				
ANR	151088	Identifier	false		151049	0					
ANR	151089	IfStatement	if ( NULL != ( pNode -> child ) [ 0 ] )		151049	5					
ANR	151090	Condition	NULL != ( pNode -> child ) [ 0 ]	937:5:29060:29084	151049	0	True				
ANR	151091	EqualityExpression	NULL != ( pNode -> child ) [ 0 ]		151049	0		!=			
ANR	151092	Identifier	NULL		151049	0					
ANR	151093	ArrayIndexing	( pNode -> child ) [ 0 ]		151049	1					
ANR	151094	PtrMemberAccess	pNode -> child		151049	0					
ANR	151095	Identifier	pNode		151049	0					
ANR	151096	Identifier	child		151049	1					
ANR	151097	PrimaryExpression	0		151049	1					
ANR	151098	CompoundStatement		21:33:707:707	151049	1					
ANR	151099	ExpressionStatement	pLeaf = ( pNode -> child ) [ idx + 1 ]	941:2:29202:29231	151049	0	True				
ANR	151100	AssignmentExpression	pLeaf = ( pNode -> child ) [ idx + 1 ]		151049	0		=			
ANR	151101	Identifier	pLeaf		151049	0					
ANR	151102	ArrayIndexing	( pNode -> child ) [ idx + 1 ]		151049	1					
ANR	151103	PtrMemberAccess	pNode -> child		151049	0					
ANR	151104	Identifier	pNode		151049	0					
ANR	151105	Identifier	child		151049	1					
ANR	151106	AdditiveExpression	idx + 1		151049	1		+			
ANR	151107	Identifier	idx		151049	0					
ANR	151108	PrimaryExpression	1		151049	1					
ANR	151109	WhileStatement	while ( NULL != ( pLeaf -> child ) [ 0 ] )		151049	1					
ANR	151110	Condition	NULL != ( pLeaf -> child ) [ 0 ]	942:9:29242:29266	151049	0	True				
ANR	151111	EqualityExpression	NULL != ( pLeaf -> child ) [ 0 ]		151049	0		!=			
ANR	151112	Identifier	NULL		151049	0					
ANR	151113	ArrayIndexing	( pLeaf -> child ) [ 0 ]		151049	1					
ANR	151114	PtrMemberAccess	pLeaf -> child		151049	0					
ANR	151115	Identifier	pLeaf		151049	0					
ANR	151116	Identifier	child		151049	1					
ANR	151117	PrimaryExpression	0		151049	1					
ANR	151118	ExpressionStatement	pLeaf = ( pLeaf -> child ) [ 0 ]	943:3:29273:29298	151049	1	True				
ANR	151119	AssignmentExpression	pLeaf = ( pLeaf -> child ) [ 0 ]		151049	0		=			
ANR	151120	Identifier	pLeaf		151049	0					
ANR	151121	ArrayIndexing	( pLeaf -> child ) [ 0 ]		151049	1					
ANR	151122	PtrMemberAccess	pLeaf -> child		151049	0					
ANR	151123	Identifier	pLeaf		151049	0					
ANR	151124	Identifier	child		151049	1					
ANR	151125	PrimaryExpression	0		151049	1					
ANR	151126	ExpressionStatement	( pNode -> pair ) [ idx ] = ( pLeaf -> pair ) [ 0 ]	944:2:29302:29339	151049	2	True				
ANR	151127	AssignmentExpression	( pNode -> pair ) [ idx ] = ( pLeaf -> pair ) [ 0 ]		151049	0		=			
ANR	151128	ArrayIndexing	( pNode -> pair ) [ idx ]		151049	0					
ANR	151129	PtrMemberAccess	pNode -> pair		151049	0					
ANR	151130	Identifier	pNode		151049	0					
ANR	151131	Identifier	pair		151049	1					
ANR	151132	Identifier	idx		151049	1					
ANR	151133	ArrayIndexing	( pLeaf -> pair ) [ 0 ]		151049	1					
ANR	151134	PtrMemberAccess	pLeaf -> pair		151049	0					
ANR	151135	Identifier	pLeaf		151049	0					
ANR	151136	Identifier	pair		151049	1					
ANR	151137	PrimaryExpression	0		151049	1					
ANR	151138	ExpressionStatement	pNode = pLeaf	947:2:29383:29396	151049	3	True				
ANR	151139	AssignmentExpression	pNode = pLeaf		151049	0		=			
ANR	151140	Identifier	pNode		151049	0					
ANR	151141	Identifier	pLeaf		151049	1					
ANR	151142	ExpressionStatement	idx = 0	948:2:29400:29407	151049	4	True				
ANR	151143	AssignmentExpression	idx = 0		151049	0		=			
ANR	151144	Identifier	idx		151049	0					
ANR	151145	PrimaryExpression	0		151049	1					
ANR	151146	ExpressionStatement		949:2:29411:29411	151049	6	True				
ANR	151147	ExpressionStatement	"removeAtLeaf ( pNode , idx )"	952:1:29491:29514	151049	7	True				
ANR	151148	CallExpression	"removeAtLeaf ( pNode , idx )"		151049	0					
ANR	151149	Callee	removeAtLeaf		151049	0					
ANR	151150	Identifier	removeAtLeaf		151049	0					
ANR	151151	ArgumentList	pNode		151049	1					
ANR	151152	Argument	pNode		151049	0					
ANR	151153	Identifier	pNode		151049	0					
ANR	151154	Argument	idx		151049	1					
ANR	151155	Identifier	idx		151049	0					
ANR	151156	ReturnStatement	return true ;	954:1:29518:29529	151049	8	True				
ANR	151157	Identifier	true		151049	0					
ANR	151158	ReturnType	bool		151049	1					
ANR	151159	Identifier	BTree :: remove		151049	2					
ANR	151160	ParameterList	unsigned long key		151049	3					
ANR	151161	Parameter	unsigned long key	916:19:28361:28377	151049	0	True				
ANR	151162	ParameterType	unsigned long		151049	0					
ANR	151163	Identifier	key		151049	1					
ANR	151164	CFGEntryNode	ENTRY		151049		True				
ANR	151165	CFGExitNode	EXIT		151049		True				
ANR	151166	Symbol	pLeaf		151049						
ANR	151167	Symbol	* pNode -> pair		151049						
ANR	151168	Symbol	NULL		151049						
ANR	151169	Symbol	& idx		151049						
ANR	151170	Symbol	false		151049						
ANR	151171	Symbol	* pNode		151049						
ANR	151172	Symbol	pLeaf -> child		151049						
ANR	151173	Symbol	* * pLeaf		151049						
ANR	151174	Symbol	& pNode		151049						
ANR	151175	Symbol	pLeaf -> pair		151049						
ANR	151176	Symbol	pNode -> child		151049						
ANR	151177	Symbol	pNode -> pair		151049						
ANR	151178	Symbol	* * pNode		151049						
ANR	151179	Symbol	* pLeaf		151049						
ANR	151180	Symbol	* idx		151049						
ANR	151181	Symbol	true		151049						
ANR	151182	Symbol	* pLeaf -> child		151049						
ANR	151183	Symbol	* pNode -> child		151049						
ANR	151184	Symbol	idx		151049						
ANR	151185	Symbol	* pLeaf -> pair		151049						
ANR	151186	Symbol	pNode		151049						
ANR	151187	Symbol	key		151049						
ANR	151188	Function	BTree :: searchMax	973:0:29837:30279							
ANR	151189	FunctionDef	"BTree :: searchMax (Btree_Node * * ppNode , int * pIdx)"		151188	0					
ANR	151190	CompoundStatement		974:0:29897:30279	151188	0					
ANR	151191	IfStatement	if ( NULL == ppNode )		151188	0					
ANR	151192	Condition	NULL == ppNode	975:5:29904:29915	151188	0	True				
ANR	151193	EqualityExpression	NULL == ppNode		151188	0		==			
ANR	151194	Identifier	NULL		151188	0					
ANR	151195	Identifier	ppNode		151188	1					
ANR	151196	ThrowStatement	"throw ""BTree::searchMax, ppNode is NULL"" ;"	976:2:29921:29961	151188	1	True				
ANR	151197	PrimaryExpression	"""BTree::searchMax, ppNode is NULL"""		151188	0					
ANR	151198	IfStatement	if ( NULL == pIdx )		151188	1					
ANR	151199	Condition	NULL == pIdx	977:5:29968:29977	151188	0	True				
ANR	151200	EqualityExpression	NULL == pIdx		151188	0		==			
ANR	151201	Identifier	NULL		151188	0					
ANR	151202	Identifier	pIdx		151188	1					
ANR	151203	ThrowStatement	"throw ""BTree::searchMax, pIdx is NULL"" ;"	978:2:29982:30020	151188	1	True				
ANR	151204	PrimaryExpression	"""BTree::searchMax, pIdx is NULL"""		151188	0					
ANR	151205	IfStatement	if ( NULL == root )		151188	2					
ANR	151206	Condition	NULL == root	979:5:30027:30036	151188	0	True				
ANR	151207	EqualityExpression	NULL == root		151188	0		==			
ANR	151208	Identifier	NULL		151188	0					
ANR	151209	Identifier	root		151188	1					
ANR	151210	ThrowStatement	"throw ""BTree::searchMax, BTree is empty"" ;"	980:2:30042:30082	151188	1	True				
ANR	151211	PrimaryExpression	"""BTree::searchMax, BTree is empty"""		151188	0					
ANR	151212	IdentifierDeclStatement	Btree_Node * node ;	983:1:30119:30135	151188	3	True				
ANR	151213	IdentifierDecl	* node		151188	0					
ANR	151214	IdentifierDeclType	Btree_Node *		151188	0					
ANR	151215	Identifier	node		151188	1					
ANR	151216	ExpressionStatement	node = root	984:1:30138:30149	151188	4	True				
ANR	151217	AssignmentExpression	node = root		151188	0		=			
ANR	151218	Identifier	node		151188	0					
ANR	151219	Identifier	root		151188	1					
ANR	151220	WhileStatement	while ( NULL != ( node -> child ) [ node -> nkeys ] )		151188	5					
ANR	151221	Condition	NULL != ( node -> child ) [ node -> nkeys ]	985:8:30159:30192	151188	0	True				
ANR	151222	EqualityExpression	NULL != ( node -> child ) [ node -> nkeys ]		151188	0		!=			
ANR	151223	Identifier	NULL		151188	0					
ANR	151224	ArrayIndexing	( node -> child ) [ node -> nkeys ]		151188	1					
ANR	151225	PtrMemberAccess	node -> child		151188	0					
ANR	151226	Identifier	node		151188	0					
ANR	151227	Identifier	child		151188	1					
ANR	151228	PtrMemberAccess	node -> nkeys		151188	1					
ANR	151229	Identifier	node		151188	0					
ANR	151230	Identifier	nkeys		151188	1					
ANR	151231	ExpressionStatement	node = ( node -> child ) [ node -> nkeys ]	986:2:30198:30231	151188	1	True				
ANR	151232	AssignmentExpression	node = ( node -> child ) [ node -> nkeys ]		151188	0		=			
ANR	151233	Identifier	node		151188	0					
ANR	151234	ArrayIndexing	( node -> child ) [ node -> nkeys ]		151188	1					
ANR	151235	PtrMemberAccess	node -> child		151188	0					
ANR	151236	Identifier	node		151188	0					
ANR	151237	Identifier	child		151188	1					
ANR	151238	PtrMemberAccess	node -> nkeys		151188	1					
ANR	151239	Identifier	node		151188	0					
ANR	151240	Identifier	nkeys		151188	1					
ANR	151241	ExpressionStatement	* ppNode = node	988:1:30235:30249	151188	6	True				
ANR	151242	AssignmentExpression	* ppNode = node		151188	0		=			
ANR	151243	UnaryOperationExpression	* ppNode		151188	0					
ANR	151244	UnaryOperator	*		151188	0					
ANR	151245	Identifier	ppNode		151188	1					
ANR	151246	Identifier	node		151188	1					
ANR	151247	ExpressionStatement	* pIdx = ( node -> nkeys ) - 1	989:1:30252:30277	151188	7	True				
ANR	151248	AssignmentExpression	* pIdx = ( node -> nkeys ) - 1		151188	0		=			
ANR	151249	UnaryOperationExpression	* pIdx		151188	0					
ANR	151250	UnaryOperator	*		151188	0					
ANR	151251	Identifier	pIdx		151188	1					
ANR	151252	AdditiveExpression	( node -> nkeys ) - 1		151188	1		-			
ANR	151253	PtrMemberAccess	node -> nkeys		151188	0					
ANR	151254	Identifier	node		151188	0					
ANR	151255	Identifier	nkeys		151188	1					
ANR	151256	PrimaryExpression	1		151188	1					
ANR	151257	ReturnType	void		151188	1					
ANR	151258	Identifier	BTree :: searchMax		151188	2					
ANR	151259	ParameterList	"Btree_Node * * ppNode , int * pIdx"		151188	3					
ANR	151260	Parameter	Btree_Node * * ppNode	973:22:29859:29877	151188	0	True				
ANR	151261	ParameterType	Btree_Node * *		151188	0					
ANR	151262	Identifier	ppNode		151188	1					
ANR	151263	Parameter	int * pIdx	973:43:29880:29888	151188	1	True				
ANR	151264	ParameterType	int *		151188	0					
ANR	151265	Identifier	pIdx		151188	1					
ANR	151266	CFGEntryNode	ENTRY		151188		True				
ANR	151267	CFGExitNode	EXIT		151188		True				
ANR	151268	CFGExceptionNode	EXCEPTION		151188		True				
ANR	151269	CFGExceptionNode	EXCEPTION		151188		True				
ANR	151270	CFGExceptionNode	EXCEPTION		151188		True				
ANR	151271	CFGExceptionNode	EXCEPTION		151188		True				
ANR	151272	CFGExceptionNode	EXCEPTION		151188		True				
ANR	151273	Symbol	* pIdx		151188						
ANR	151274	Symbol	NULL		151188						
ANR	151275	Symbol	* node -> nkeys		151188						
ANR	151276	Symbol	* node -> child		151188						
ANR	151277	Symbol	ppNode		151188						
ANR	151278	Symbol	node -> child		151188						
ANR	151279	Symbol	node		151188						
ANR	151280	Symbol	node -> nkeys		151188						
ANR	151281	Symbol	* * node		151188						
ANR	151282	Symbol	root		151188						
ANR	151283	Symbol	pIdx		151188						
ANR	151284	Symbol	* node		151188						
ANR	151285	Symbol	* ppNode		151188						
ANR	151286	Function	BTree :: searchMin	1008:0:30585:30990							
ANR	151287	FunctionDef	"BTree :: searchMin (Btree_Node * * ppNode , int * pIdx)"		151286	0					
ANR	151288	CompoundStatement		1009:0:30645:30990	151286	0					
ANR	151289	IfStatement	if ( NULL == ppNode )		151286	0					
ANR	151290	Condition	NULL == ppNode	1010:5:30652:30663	151286	0	True				
ANR	151291	EqualityExpression	NULL == ppNode		151286	0		==			
ANR	151292	Identifier	NULL		151286	0					
ANR	151293	Identifier	ppNode		151286	1					
ANR	151294	ThrowStatement	"throw ""BTree::searchMax, ppNode is NULL"" ;"	1011:2:30669:30709	151286	1	True				
ANR	151295	PrimaryExpression	"""BTree::searchMax, ppNode is NULL"""		151286	0					
ANR	151296	IfStatement	if ( NULL == pIdx )		151286	1					
ANR	151297	Condition	NULL == pIdx	1012:5:30716:30725	151286	0	True				
ANR	151298	EqualityExpression	NULL == pIdx		151286	0		==			
ANR	151299	Identifier	NULL		151286	0					
ANR	151300	Identifier	pIdx		151286	1					
ANR	151301	ThrowStatement	"throw ""BTree::searchMax, pIdx is NULL"" ;"	1013:2:30730:30768	151286	1	True				
ANR	151302	PrimaryExpression	"""BTree::searchMax, pIdx is NULL"""		151286	0					
ANR	151303	IfStatement	if ( NULL == root )		151286	2					
ANR	151304	Condition	NULL == root	1014:5:30775:30784	151286	0	True				
ANR	151305	EqualityExpression	NULL == root		151286	0		==			
ANR	151306	Identifier	NULL		151286	0					
ANR	151307	Identifier	root		151286	1					
ANR	151308	ThrowStatement	"throw ""BTree::searchMax, BTree is empty"" ;"	1015:2:30790:30830	151286	1	True				
ANR	151309	PrimaryExpression	"""BTree::searchMax, BTree is empty"""		151286	0					
ANR	151310	IdentifierDeclStatement	Btree_Node * node ;	1018:1:30866:30882	151286	3	True				
ANR	151311	IdentifierDecl	* node		151286	0					
ANR	151312	IdentifierDeclType	Btree_Node *		151286	0					
ANR	151313	Identifier	node		151286	1					
ANR	151314	ExpressionStatement	node = root	1019:1:30885:30896	151286	4	True				
ANR	151315	AssignmentExpression	node = root		151286	0		=			
ANR	151316	Identifier	node		151286	0					
ANR	151317	Identifier	root		151286	1					
ANR	151318	WhileStatement	while ( NULL != ( node -> child ) [ 0 ] )		151286	5					
ANR	151319	Condition	NULL != ( node -> child ) [ 0 ]	1020:8:30906:30929	151286	0	True				
ANR	151320	EqualityExpression	NULL != ( node -> child ) [ 0 ]		151286	0		!=			
ANR	151321	Identifier	NULL		151286	0					
ANR	151322	ArrayIndexing	( node -> child ) [ 0 ]		151286	1					
ANR	151323	PtrMemberAccess	node -> child		151286	0					
ANR	151324	Identifier	node		151286	0					
ANR	151325	Identifier	child		151286	1					
ANR	151326	PrimaryExpression	0		151286	1					
ANR	151327	ExpressionStatement	node = ( node -> child ) [ 0 ]	1021:2:30935:30958	151286	1	True				
ANR	151328	AssignmentExpression	node = ( node -> child ) [ 0 ]		151286	0		=			
ANR	151329	Identifier	node		151286	0					
ANR	151330	ArrayIndexing	( node -> child ) [ 0 ]		151286	1					
ANR	151331	PtrMemberAccess	node -> child		151286	0					
ANR	151332	Identifier	node		151286	0					
ANR	151333	Identifier	child		151286	1					
ANR	151334	PrimaryExpression	0		151286	1					
ANR	151335	ExpressionStatement	* ppNode = node	1023:1:30962:30976	151286	6	True				
ANR	151336	AssignmentExpression	* ppNode = node		151286	0		=			
ANR	151337	UnaryOperationExpression	* ppNode		151286	0					
ANR	151338	UnaryOperator	*		151286	0					
ANR	151339	Identifier	ppNode		151286	1					
ANR	151340	Identifier	node		151286	1					
ANR	151341	ExpressionStatement	* pIdx = 0	1024:1:30979:30988	151286	7	True				
ANR	151342	AssignmentExpression	* pIdx = 0		151286	0		=			
ANR	151343	UnaryOperationExpression	* pIdx		151286	0					
ANR	151344	UnaryOperator	*		151286	0					
ANR	151345	Identifier	pIdx		151286	1					
ANR	151346	PrimaryExpression	0		151286	1					
ANR	151347	ReturnType	void		151286	1					
ANR	151348	Identifier	BTree :: searchMin		151286	2					
ANR	151349	ParameterList	"Btree_Node * * ppNode , int * pIdx"		151286	3					
ANR	151350	Parameter	Btree_Node * * ppNode	1008:22:30607:30625	151286	0	True				
ANR	151351	ParameterType	Btree_Node * *		151286	0					
ANR	151352	Identifier	ppNode		151286	1					
ANR	151353	Parameter	int * pIdx	1008:43:30628:30636	151286	1	True				
ANR	151354	ParameterType	int *		151286	0					
ANR	151355	Identifier	pIdx		151286	1					
ANR	151356	CFGEntryNode	ENTRY		151286		True				
ANR	151357	CFGExitNode	EXIT		151286		True				
ANR	151358	CFGExceptionNode	EXCEPTION		151286		True				
ANR	151359	CFGExceptionNode	EXCEPTION		151286		True				
ANR	151360	CFGExceptionNode	EXCEPTION		151286		True				
ANR	151361	CFGExceptionNode	EXCEPTION		151286		True				
ANR	151362	CFGExceptionNode	EXCEPTION		151286		True				
ANR	151363	Symbol	node		151286						
ANR	151364	Symbol	* pIdx		151286						
ANR	151365	Symbol	NULL		151286						
ANR	151366	Symbol	* * node		151286						
ANR	151367	Symbol	root		151286						
ANR	151368	Symbol	pIdx		151286						
ANR	151369	Symbol	* node -> child		151286						
ANR	151370	Symbol	* node		151286						
ANR	151371	Symbol	ppNode		151286						
ANR	151372	Symbol	node -> child		151286						
ANR	151373	Symbol	* ppNode		151286						
ANR	151374	Function	BTree :: findMaxKey	1042:0:31209:31344							
ANR	151375	FunctionDef	BTree :: findMaxKey ()		151374	0					
ANR	151376	CompoundStatement		1043:0:31253:31344	151374	0					
ANR	151377	IdentifierDeclStatement	Btree_Node * node = NULL ;	1044:1:31256:31277	151374	0	True				
ANR	151378	IdentifierDecl	* node = NULL		151374	0					
ANR	151379	IdentifierDeclType	Btree_Node *		151374	0					
ANR	151380	Identifier	node		151374	1					
ANR	151381	AssignmentExpression	* node = NULL		151374	2		=			
ANR	151382	Identifier	NULL		151374	0					
ANR	151383	Identifier	NULL		151374	1					
ANR	151384	IdentifierDeclStatement	int idx ;	1045:1:31280:31287	151374	1	True				
ANR	151385	IdentifierDecl	idx		151374	0					
ANR	151386	IdentifierDeclType	int		151374	0					
ANR	151387	Identifier	idx		151374	1					
ANR	151388	ExpressionStatement	"searchMax ( & node , & idx )"	1046:1:31290:31311	151374	2	True				
ANR	151389	CallExpression	"searchMax ( & node , & idx )"		151374	0					
ANR	151390	Callee	searchMax		151374	0					
ANR	151391	Identifier	searchMax		151374	0					
ANR	151392	ArgumentList	& node		151374	1					
ANR	151393	Argument	& node		151374	0					
ANR	151394	UnaryOperationExpression	& node		151374	0					
ANR	151395	UnaryOperator	&		151374	0					
ANR	151396	Identifier	node		151374	1					
ANR	151397	Argument	& idx		151374	1					
ANR	151398	UnaryOperationExpression	& idx		151374	0					
ANR	151399	UnaryOperator	&		151374	0					
ANR	151400	Identifier	idx		151374	1					
ANR	151401	ReturnStatement	return ( node -> pair ) [ idx ] . key ;	1047:1:31314:31342	151374	3	True				
ANR	151402	MemberAccess	( node -> pair ) [ idx ] . key		151374	0					
ANR	151403	ArrayIndexing	( node -> pair ) [ idx ]		151374	0					
ANR	151404	PtrMemberAccess	node -> pair		151374	0					
ANR	151405	Identifier	node		151374	0					
ANR	151406	Identifier	pair		151374	1					
ANR	151407	Identifier	idx		151374	1					
ANR	151408	Identifier	key		151374	1					
ANR	151409	ReturnType	unsigned long		151374	1					
ANR	151410	Identifier	BTree :: findMaxKey		151374	2					
ANR	151411	ParameterList			151374	3					
ANR	151412	CFGEntryNode	ENTRY		151374		True				
ANR	151413	CFGExitNode	EXIT		151374		True				
ANR	151414	Symbol	node		151374						
ANR	151415	Symbol	& node		151374						
ANR	151416	Symbol	NULL		151374						
ANR	151417	Symbol	& idx		151374						
ANR	151418	Symbol	* * node		151374						
ANR	151419	Symbol	* node -> pair		151374						
ANR	151420	Symbol	* idx		151374						
ANR	151421	Symbol	* node		151374						
ANR	151422	Symbol	node -> pair		151374						
ANR	151423	Symbol	idx		151374						
ANR	151424	Symbol	( node -> pair ) [ idx ] . key		151374						
ANR	151425	Function	BTree :: findMinKey	1065:0:31565:31700							
ANR	151426	FunctionDef	BTree :: findMinKey ()		151425	0					
ANR	151427	CompoundStatement		1066:0:31609:31700	151425	0					
ANR	151428	IdentifierDeclStatement	Btree_Node * node = NULL ;	1067:1:31612:31633	151425	0	True				
ANR	151429	IdentifierDecl	* node = NULL		151425	0					
ANR	151430	IdentifierDeclType	Btree_Node *		151425	0					
ANR	151431	Identifier	node		151425	1					
ANR	151432	AssignmentExpression	* node = NULL		151425	2		=			
ANR	151433	Identifier	NULL		151425	0					
ANR	151434	Identifier	NULL		151425	1					
ANR	151435	IdentifierDeclStatement	int idx ;	1068:1:31636:31643	151425	1	True				
ANR	151436	IdentifierDecl	idx		151425	0					
ANR	151437	IdentifierDeclType	int		151425	0					
ANR	151438	Identifier	idx		151425	1					
ANR	151439	ExpressionStatement	"searchMin ( & node , & idx )"	1069:1:31646:31667	151425	2	True				
ANR	151440	CallExpression	"searchMin ( & node , & idx )"		151425	0					
ANR	151441	Callee	searchMin		151425	0					
ANR	151442	Identifier	searchMin		151425	0					
ANR	151443	ArgumentList	& node		151425	1					
ANR	151444	Argument	& node		151425	0					
ANR	151445	UnaryOperationExpression	& node		151425	0					
ANR	151446	UnaryOperator	&		151425	0					
ANR	151447	Identifier	node		151425	1					
ANR	151448	Argument	& idx		151425	1					
ANR	151449	UnaryOperationExpression	& idx		151425	0					
ANR	151450	UnaryOperator	&		151425	0					
ANR	151451	Identifier	idx		151425	1					
ANR	151452	ReturnStatement	return ( node -> pair ) [ idx ] . key ;	1070:1:31670:31698	151425	3	True				
ANR	151453	MemberAccess	( node -> pair ) [ idx ] . key		151425	0					
ANR	151454	ArrayIndexing	( node -> pair ) [ idx ]		151425	0					
ANR	151455	PtrMemberAccess	node -> pair		151425	0					
ANR	151456	Identifier	node		151425	0					
ANR	151457	Identifier	pair		151425	1					
ANR	151458	Identifier	idx		151425	1					
ANR	151459	Identifier	key		151425	1					
ANR	151460	ReturnType	unsigned long		151425	1					
ANR	151461	Identifier	BTree :: findMinKey		151425	2					
ANR	151462	ParameterList			151425	3					
ANR	151463	CFGEntryNode	ENTRY		151425		True				
ANR	151464	CFGExitNode	EXIT		151425		True				
ANR	151465	Symbol	node		151425						
ANR	151466	Symbol	& node		151425						
ANR	151467	Symbol	NULL		151425						
ANR	151468	Symbol	& idx		151425						
ANR	151469	Symbol	* * node		151425						
ANR	151470	Symbol	* node -> pair		151425						
ANR	151471	Symbol	* idx		151425						
ANR	151472	Symbol	* node		151425						
ANR	151473	Symbol	node -> pair		151425						
ANR	151474	Symbol	idx		151425						
ANR	151475	Symbol	( node -> pair ) [ idx ] . key		151425						
ANR	151476	Function	BTree :: findValForMaxKey	1089:0:31953:32094							
ANR	151477	FunctionDef	BTree :: findValForMaxKey ()		151476	0					
ANR	151478	CompoundStatement		1090:0:32003:32094	151476	0					
ANR	151479	IdentifierDeclStatement	Btree_Node * node = NULL ;	1091:1:32006:32027	151476	0	True				
ANR	151480	IdentifierDecl	* node = NULL		151476	0					
ANR	151481	IdentifierDeclType	Btree_Node *		151476	0					
ANR	151482	Identifier	node		151476	1					
ANR	151483	AssignmentExpression	* node = NULL		151476	2		=			
ANR	151484	Identifier	NULL		151476	0					
ANR	151485	Identifier	NULL		151476	1					
ANR	151486	IdentifierDeclStatement	int idx ;	1092:1:32030:32037	151476	1	True				
ANR	151487	IdentifierDecl	idx		151476	0					
ANR	151488	IdentifierDeclType	int		151476	0					
ANR	151489	Identifier	idx		151476	1					
ANR	151490	ExpressionStatement	"searchMax ( & node , & idx )"	1093:1:32040:32061	151476	2	True				
ANR	151491	CallExpression	"searchMax ( & node , & idx )"		151476	0					
ANR	151492	Callee	searchMax		151476	0					
ANR	151493	Identifier	searchMax		151476	0					
ANR	151494	ArgumentList	& node		151476	1					
ANR	151495	Argument	& node		151476	0					
ANR	151496	UnaryOperationExpression	& node		151476	0					
ANR	151497	UnaryOperator	&		151476	0					
ANR	151498	Identifier	node		151476	1					
ANR	151499	Argument	& idx		151476	1					
ANR	151500	UnaryOperationExpression	& idx		151476	0					
ANR	151501	UnaryOperator	&		151476	0					
ANR	151502	Identifier	idx		151476	1					
ANR	151503	ReturnStatement	return ( node -> pair ) [ idx ] . val ;	1094:1:32064:32092	151476	3	True				
ANR	151504	MemberAccess	( node -> pair ) [ idx ] . val		151476	0					
ANR	151505	ArrayIndexing	( node -> pair ) [ idx ]		151476	0					
ANR	151506	PtrMemberAccess	node -> pair		151476	0					
ANR	151507	Identifier	node		151476	0					
ANR	151508	Identifier	pair		151476	1					
ANR	151509	Identifier	idx		151476	1					
ANR	151510	Identifier	val		151476	1					
ANR	151511	ReturnType	unsigned long		151476	1					
ANR	151512	Identifier	BTree :: findValForMaxKey		151476	2					
ANR	151513	ParameterList			151476	3					
ANR	151514	CFGEntryNode	ENTRY		151476		True				
ANR	151515	CFGExitNode	EXIT		151476		True				
ANR	151516	Symbol	node		151476						
ANR	151517	Symbol	& node		151476						
ANR	151518	Symbol	NULL		151476						
ANR	151519	Symbol	& idx		151476						
ANR	151520	Symbol	* * node		151476						
ANR	151521	Symbol	( node -> pair ) [ idx ] . val		151476						
ANR	151522	Symbol	* node -> pair		151476						
ANR	151523	Symbol	* idx		151476						
ANR	151524	Symbol	* node		151476						
ANR	151525	Symbol	node -> pair		151476						
ANR	151526	Symbol	idx		151476						
ANR	151527	Function	BTree :: findValForMinKey	1113:0:32349:32490							
ANR	151528	FunctionDef	BTree :: findValForMinKey ()		151527	0					
ANR	151529	CompoundStatement		1114:0:32399:32490	151527	0					
ANR	151530	IdentifierDeclStatement	Btree_Node * node = NULL ;	1115:1:32402:32423	151527	0	True				
ANR	151531	IdentifierDecl	* node = NULL		151527	0					
ANR	151532	IdentifierDeclType	Btree_Node *		151527	0					
ANR	151533	Identifier	node		151527	1					
ANR	151534	AssignmentExpression	* node = NULL		151527	2		=			
ANR	151535	Identifier	NULL		151527	0					
ANR	151536	Identifier	NULL		151527	1					
ANR	151537	IdentifierDeclStatement	int idx ;	1116:1:32426:32433	151527	1	True				
ANR	151538	IdentifierDecl	idx		151527	0					
ANR	151539	IdentifierDeclType	int		151527	0					
ANR	151540	Identifier	idx		151527	1					
ANR	151541	ExpressionStatement	"searchMin ( & node , & idx )"	1117:1:32436:32457	151527	2	True				
ANR	151542	CallExpression	"searchMin ( & node , & idx )"		151527	0					
ANR	151543	Callee	searchMin		151527	0					
ANR	151544	Identifier	searchMin		151527	0					
ANR	151545	ArgumentList	& node		151527	1					
ANR	151546	Argument	& node		151527	0					
ANR	151547	UnaryOperationExpression	& node		151527	0					
ANR	151548	UnaryOperator	&		151527	0					
ANR	151549	Identifier	node		151527	1					
ANR	151550	Argument	& idx		151527	1					
ANR	151551	UnaryOperationExpression	& idx		151527	0					
ANR	151552	UnaryOperator	&		151527	0					
ANR	151553	Identifier	idx		151527	1					
ANR	151554	ReturnStatement	return ( node -> pair ) [ idx ] . val ;	1118:1:32460:32488	151527	3	True				
ANR	151555	MemberAccess	( node -> pair ) [ idx ] . val		151527	0					
ANR	151556	ArrayIndexing	( node -> pair ) [ idx ]		151527	0					
ANR	151557	PtrMemberAccess	node -> pair		151527	0					
ANR	151558	Identifier	node		151527	0					
ANR	151559	Identifier	pair		151527	1					
ANR	151560	Identifier	idx		151527	1					
ANR	151561	Identifier	val		151527	1					
ANR	151562	ReturnType	unsigned long		151527	1					
ANR	151563	Identifier	BTree :: findValForMinKey		151527	2					
ANR	151564	ParameterList			151527	3					
ANR	151565	CFGEntryNode	ENTRY		151527		True				
ANR	151566	CFGExitNode	EXIT		151527		True				
ANR	151567	Symbol	node		151527						
ANR	151568	Symbol	& node		151527						
ANR	151569	Symbol	NULL		151527						
ANR	151570	Symbol	& idx		151527						
ANR	151571	Symbol	* * node		151527						
ANR	151572	Symbol	( node -> pair ) [ idx ] . val		151527						
ANR	151573	Symbol	* node -> pair		151527						
ANR	151574	Symbol	* idx		151527						
ANR	151575	Symbol	* node		151527						
ANR	151576	Symbol	node -> pair		151527						
ANR	151577	Symbol	idx		151527						
ANR	151578	Function	BTree :: removeMax	1137:0:32732:32845							
ANR	151579	FunctionDef	BTree :: removeMax ()		151578	0					
ANR	151580	CompoundStatement		1138:0:32760:32845	151578	0					
ANR	151581	IdentifierDeclStatement	Btree_Node * node = NULL ;	1139:1:32763:32784	151578	0	True				
ANR	151582	IdentifierDecl	* node = NULL		151578	0					
ANR	151583	IdentifierDeclType	Btree_Node *		151578	0					
ANR	151584	Identifier	node		151578	1					
ANR	151585	AssignmentExpression	* node = NULL		151578	2		=			
ANR	151586	Identifier	NULL		151578	0					
ANR	151587	Identifier	NULL		151578	1					
ANR	151588	IdentifierDeclStatement	int idx ;	1140:1:32787:32794	151578	1	True				
ANR	151589	IdentifierDecl	idx		151578	0					
ANR	151590	IdentifierDeclType	int		151578	0					
ANR	151591	Identifier	idx		151578	1					
ANR	151592	ExpressionStatement	"searchMax ( & node , & idx )"	1141:1:32797:32818	151578	2	True				
ANR	151593	CallExpression	"searchMax ( & node , & idx )"		151578	0					
ANR	151594	Callee	searchMax		151578	0					
ANR	151595	Identifier	searchMax		151578	0					
ANR	151596	ArgumentList	& node		151578	1					
ANR	151597	Argument	& node		151578	0					
ANR	151598	UnaryOperationExpression	& node		151578	0					
ANR	151599	UnaryOperator	&		151578	0					
ANR	151600	Identifier	node		151578	1					
ANR	151601	Argument	& idx		151578	1					
ANR	151602	UnaryOperationExpression	& idx		151578	0					
ANR	151603	UnaryOperator	&		151578	0					
ANR	151604	Identifier	idx		151578	1					
ANR	151605	ExpressionStatement	"removeAtLeaf ( node , idx )"	1142:1:32821:32843	151578	3	True				
ANR	151606	CallExpression	"removeAtLeaf ( node , idx )"		151578	0					
ANR	151607	Callee	removeAtLeaf		151578	0					
ANR	151608	Identifier	removeAtLeaf		151578	0					
ANR	151609	ArgumentList	node		151578	1					
ANR	151610	Argument	node		151578	0					
ANR	151611	Identifier	node		151578	0					
ANR	151612	Argument	idx		151578	1					
ANR	151613	Identifier	idx		151578	0					
ANR	151614	ReturnType	void		151578	1					
ANR	151615	Identifier	BTree :: removeMax		151578	2					
ANR	151616	ParameterList			151578	3					
ANR	151617	CFGEntryNode	ENTRY		151578		True				
ANR	151618	CFGExitNode	EXIT		151578		True				
ANR	151619	Symbol	node		151578						
ANR	151620	Symbol	& node		151578						
ANR	151621	Symbol	NULL		151578						
ANR	151622	Symbol	& idx		151578						
ANR	151623	Symbol	idx		151578						
ANR	151624	Function	BTree :: removeMin	1161:0:33088:33201							
ANR	151625	FunctionDef	BTree :: removeMin ()		151624	0					
ANR	151626	CompoundStatement		1162:0:33116:33201	151624	0					
ANR	151627	IdentifierDeclStatement	Btree_Node * node = NULL ;	1163:1:33119:33140	151624	0	True				
ANR	151628	IdentifierDecl	* node = NULL		151624	0					
ANR	151629	IdentifierDeclType	Btree_Node *		151624	0					
ANR	151630	Identifier	node		151624	1					
ANR	151631	AssignmentExpression	* node = NULL		151624	2		=			
ANR	151632	Identifier	NULL		151624	0					
ANR	151633	Identifier	NULL		151624	1					
ANR	151634	IdentifierDeclStatement	int idx ;	1164:1:33143:33150	151624	1	True				
ANR	151635	IdentifierDecl	idx		151624	0					
ANR	151636	IdentifierDeclType	int		151624	0					
ANR	151637	Identifier	idx		151624	1					
ANR	151638	ExpressionStatement	"searchMin ( & node , & idx )"	1165:1:33153:33174	151624	2	True				
ANR	151639	CallExpression	"searchMin ( & node , & idx )"		151624	0					
ANR	151640	Callee	searchMin		151624	0					
ANR	151641	Identifier	searchMin		151624	0					
ANR	151642	ArgumentList	& node		151624	1					
ANR	151643	Argument	& node		151624	0					
ANR	151644	UnaryOperationExpression	& node		151624	0					
ANR	151645	UnaryOperator	&		151624	0					
ANR	151646	Identifier	node		151624	1					
ANR	151647	Argument	& idx		151624	1					
ANR	151648	UnaryOperationExpression	& idx		151624	0					
ANR	151649	UnaryOperator	&		151624	0					
ANR	151650	Identifier	idx		151624	1					
ANR	151651	ExpressionStatement	"removeAtLeaf ( node , idx )"	1166:1:33177:33199	151624	3	True				
ANR	151652	CallExpression	"removeAtLeaf ( node , idx )"		151624	0					
ANR	151653	Callee	removeAtLeaf		151624	0					
ANR	151654	Identifier	removeAtLeaf		151624	0					
ANR	151655	ArgumentList	node		151624	1					
ANR	151656	Argument	node		151624	0					
ANR	151657	Identifier	node		151624	0					
ANR	151658	Argument	idx		151624	1					
ANR	151659	Identifier	idx		151624	0					
ANR	151660	ReturnType	void		151624	1					
ANR	151661	Identifier	BTree :: removeMin		151624	2					
ANR	151662	ParameterList			151624	3					
ANR	151663	CFGEntryNode	ENTRY		151624		True				
ANR	151664	CFGExitNode	EXIT		151624		True				
ANR	151665	Symbol	node		151624						
ANR	151666	Symbol	& node		151624						
ANR	151667	Symbol	NULL		151624						
ANR	151668	Symbol	& idx		151624						
ANR	151669	Symbol	idx		151624						
ANR	151670	Function	BTree :: printInd	1184:0:33413:33739							
ANR	151671	FunctionDef	"BTree :: printInd (Btree_Node * pNode , int iTab)"		151670	0					
ANR	151672	CompoundStatement		1185:0:33469:33739	151670	0					
ANR	151673	IfStatement	if ( NULL != pNode )		151670	0					
ANR	151674	Condition	NULL != pNode	1186:5:33476:33486	151670	0	True				
ANR	151675	EqualityExpression	NULL != pNode		151670	0		!=			
ANR	151676	Identifier	NULL		151670	0					
ANR	151677	Identifier	pNode		151670	1					
ANR	151678	CompoundStatement		2:19:20:20	151670	1					
ANR	151679	ForStatement	for ( int j = pNode -> nkeys ; j > 0 ; j -- )		151670	0					
ANR	151680	ForInit	int j = pNode -> nkeys ;	1187:6:33498:33516	151670	0	True				
ANR	151681	IdentifierDeclStatement	int j = pNode -> nkeys ;		151670	0					
ANR	151682	IdentifierDecl	j = pNode -> nkeys		151670	0					
ANR	151683	IdentifierDeclType	int		151670	0					
ANR	151684	Identifier	j		151670	1					
ANR	151685	AssignmentExpression	j = pNode -> nkeys		151670	2		=			
ANR	151686	Identifier	j		151670	0					
ANR	151687	PtrMemberAccess	pNode -> nkeys		151670	1					
ANR	151688	Identifier	pNode		151670	0					
ANR	151689	Identifier	nkeys		151670	1					
ANR	151690	Condition	j > 0	1187:26:33518:33520	151670	1	True				
ANR	151691	RelationalExpression	j > 0		151670	0		>			
ANR	151692	Identifier	j		151670	0					
ANR	151693	PrimaryExpression	0		151670	1					
ANR	151694	PostIncDecOperationExpression	j --	1187:31:33523:33525	151670	2	True				
ANR	151695	Identifier	j		151670	0					
ANR	151696	IncDec	--		151670	1					
ANR	151697	CompoundStatement		3:37:59:59	151670	3					
ANR	151698	ExpressionStatement	"printInd ( ( pNode -> child ) [ j ] , iTab + 3 )"	1188:3:33534:33569	151670	0	True				
ANR	151699	CallExpression	"printInd ( ( pNode -> child ) [ j ] , iTab + 3 )"		151670	0					
ANR	151700	Callee	printInd		151670	0					
ANR	151701	Identifier	printInd		151670	0					
ANR	151702	ArgumentList	( pNode -> child ) [ j ]		151670	1					
ANR	151703	Argument	( pNode -> child ) [ j ]		151670	0					
ANR	151704	ArrayIndexing	( pNode -> child ) [ j ]		151670	0					
ANR	151705	PtrMemberAccess	pNode -> child		151670	0					
ANR	151706	Identifier	pNode		151670	0					
ANR	151707	Identifier	child		151670	1					
ANR	151708	Identifier	j		151670	1					
ANR	151709	Argument	iTab + 3		151670	1					
ANR	151710	AdditiveExpression	iTab + 3		151670	0		+			
ANR	151711	Identifier	iTab		151670	0					
ANR	151712	PrimaryExpression	3		151670	1					
ANR	151713	ForStatement	for ( int i = 0 ; i < iTab ; i ++ )		151670	1					
ANR	151714	ForInit	int i = 0 ;	1189:7:33578:33585	151670	0	True				
ANR	151715	IdentifierDeclStatement	int i = 0 ;		151670	0					
ANR	151716	IdentifierDecl	i = 0		151670	0					
ANR	151717	IdentifierDeclType	int		151670	0					
ANR	151718	Identifier	i		151670	1					
ANR	151719	AssignmentExpression	i = 0		151670	2		=			
ANR	151720	Identifier	i		151670	0					
ANR	151721	PrimaryExpression	0		151670	1					
ANR	151722	Condition	i < iTab	1189:15:33586:33591	151670	1	True				
ANR	151723	RelationalExpression	i < iTab		151670	0		<			
ANR	151724	Identifier	i		151670	0					
ANR	151725	Identifier	iTab		151670	1					
ANR	151726	PostIncDecOperationExpression	i ++	1189:22:33593:33595	151670	2	True				
ANR	151727	Identifier	i		151670	0					
ANR	151728	IncDec	++		151670	1					
ANR	151729	ExpressionStatement	"printf ( "" "" )"	1189:27:33598:33609	151670	3	True				
ANR	151730	CallExpression	"printf ( "" "" )"		151670	0					
ANR	151731	Callee	printf		151670	0					
ANR	151732	Identifier	printf		151670	0					
ANR	151733	ArgumentList	""" """		151670	1					
ANR	151734	Argument	""" """		151670	0					
ANR	151735	PrimaryExpression	""" """		151670	0					
ANR	151736	ExpressionStatement	"printf ( ""key %d, val %d \\n"" , ( pNode -> pair ) [ j - 1 ] . key , ( pNode -> pair ) [ j - 1 ] . val )"	1190:3:33614:33689	151670	2	True				
ANR	151737	CallExpression	"printf ( ""key %d, val %d \\n"" , ( pNode -> pair ) [ j - 1 ] . key , ( pNode -> pair ) [ j - 1 ] . val )"		151670	0					
ANR	151738	Callee	printf		151670	0					
ANR	151739	Identifier	printf		151670	0					
ANR	151740	ArgumentList	"""key %d, val %d \\n"""		151670	1					
ANR	151741	Argument	"""key %d, val %d \\n"""		151670	0					
ANR	151742	PrimaryExpression	"""key %d, val %d \\n"""		151670	0					
ANR	151743	Argument	( pNode -> pair ) [ j - 1 ] . key		151670	1					
ANR	151744	MemberAccess	( pNode -> pair ) [ j - 1 ] . key		151670	0					
ANR	151745	ArrayIndexing	( pNode -> pair ) [ j - 1 ]		151670	0					
ANR	151746	PtrMemberAccess	pNode -> pair		151670	0					
ANR	151747	Identifier	pNode		151670	0					
ANR	151748	Identifier	pair		151670	1					
ANR	151749	AdditiveExpression	j - 1		151670	1		-			
ANR	151750	Identifier	j		151670	0					
ANR	151751	PrimaryExpression	1		151670	1					
ANR	151752	Identifier	key		151670	1					
ANR	151753	Argument	( pNode -> pair ) [ j - 1 ] . val		151670	2					
ANR	151754	MemberAccess	( pNode -> pair ) [ j - 1 ] . val		151670	0					
ANR	151755	ArrayIndexing	( pNode -> pair ) [ j - 1 ]		151670	0					
ANR	151756	PtrMemberAccess	pNode -> pair		151670	0					
ANR	151757	Identifier	pNode		151670	0					
ANR	151758	Identifier	pair		151670	1					
ANR	151759	AdditiveExpression	j - 1		151670	1		-			
ANR	151760	Identifier	j		151670	0					
ANR	151761	PrimaryExpression	1		151670	1					
ANR	151762	Identifier	val		151670	1					
ANR	151763	ExpressionStatement		1191:3:33694:33694	151670	1	True				
ANR	151764	ExpressionStatement	"printInd ( ( pNode -> child ) [ 0 ] , iTab + 3 )"	1192:2:33698:33733	151670	2	True				
ANR	151765	CallExpression	"printInd ( ( pNode -> child ) [ 0 ] , iTab + 3 )"		151670	0					
ANR	151766	Callee	printInd		151670	0					
ANR	151767	Identifier	printInd		151670	0					
ANR	151768	ArgumentList	( pNode -> child ) [ 0 ]		151670	1					
ANR	151769	Argument	( pNode -> child ) [ 0 ]		151670	0					
ANR	151770	ArrayIndexing	( pNode -> child ) [ 0 ]		151670	0					
ANR	151771	PtrMemberAccess	pNode -> child		151670	0					
ANR	151772	Identifier	pNode		151670	0					
ANR	151773	Identifier	child		151670	1					
ANR	151774	PrimaryExpression	0		151670	1					
ANR	151775	Argument	iTab + 3		151670	1					
ANR	151776	AdditiveExpression	iTab + 3		151670	0		+			
ANR	151777	Identifier	iTab		151670	0					
ANR	151778	PrimaryExpression	3		151670	1					
ANR	151779	ExpressionStatement		1193:2:33737:33737	151670	1	True				
ANR	151780	ReturnType	void		151670	1					
ANR	151781	Identifier	BTree :: printInd		151670	2					
ANR	151782	ParameterList	"Btree_Node * pNode , int iTab"		151670	3					
ANR	151783	Parameter	Btree_Node * pNode	1184:21:33434:33450	151670	0	True				
ANR	151784	ParameterType	Btree_Node *		151670	0					
ANR	151785	Identifier	pNode		151670	1					
ANR	151786	Parameter	int iTab	1184:40:33453:33460	151670	1	True				
ANR	151787	ParameterType	int		151670	0					
ANR	151788	Identifier	iTab		151670	1					
ANR	151789	CFGEntryNode	ENTRY		151670		True				
ANR	151790	CFGExitNode	EXIT		151670		True				
ANR	151791	Symbol	* pNode -> pair		151670						
ANR	151792	Symbol	( pNode -> pair ) [ j - 1 ] . key		151670						
ANR	151793	Symbol	NULL		151670						
ANR	151794	Symbol	( pNode -> pair ) [ j - 1 ] . val		151670						
ANR	151795	Symbol	i		151670						
ANR	151796	Symbol	j		151670						
ANR	151797	Symbol	pNode -> nkeys		151670						
ANR	151798	Symbol	* pNode		151670						
ANR	151799	Symbol	* j		151670						
ANR	151800	Symbol	pNode -> child		151670						
ANR	151801	Symbol	pNode -> pair		151670						
ANR	151802	Symbol	* * pNode		151670						
ANR	151803	Symbol	* pNode -> child		151670						
ANR	151804	Symbol	pNode		151670						
ANR	151805	Symbol	iTab		151670						
ANR	151806	Function	BTree :: print	1210:0:33870:34007							
ANR	151807	FunctionDef	BTree :: print ()		151806	0					
ANR	151808	CompoundStatement		1211:0:33900:34007	151806	0					
ANR	151809	ExpressionStatement	"printf ( ""-----------------------\\n"" )"	1212:1:33903:33938	151806	0	True				
ANR	151810	CallExpression	"printf ( ""-----------------------\\n"" )"		151806	0					
ANR	151811	Callee	printf		151806	0					
ANR	151812	Identifier	printf		151806	0					
ANR	151813	ArgumentList	"""-----------------------\\n"""		151806	1					
ANR	151814	Argument	"""-----------------------\\n"""		151806	0					
ANR	151815	PrimaryExpression	"""-----------------------\\n"""		151806	0					
ANR	151816	IfStatement	if ( NULL == root )		151806	1					
ANR	151817	Condition	NULL == root	1213:5:33945:33956	151806	0	True				
ANR	151818	EqualityExpression	NULL == root		151806	0		==			
ANR	151819	Identifier	NULL		151806	0					
ANR	151820	Identifier	root		151806	1					
ANR	151821	ExpressionStatement	"printf ( ""empty\\n"" )"	1214:2:33962:33979	151806	1	True				
ANR	151822	CallExpression	"printf ( ""empty\\n"" )"		151806	0					
ANR	151823	Callee	printf		151806	0					
ANR	151824	Identifier	printf		151806	0					
ANR	151825	ArgumentList	"""empty\\n"""		151806	1					
ANR	151826	Argument	"""empty\\n"""		151806	0					
ANR	151827	PrimaryExpression	"""empty\\n"""		151806	0					
ANR	151828	ElseStatement	else		151806	0					
ANR	151829	ExpressionStatement	"printInd ( root , 0 )"	1216:2:33989:34005	151806	0	True				
ANR	151830	CallExpression	"printInd ( root , 0 )"		151806	0					
ANR	151831	Callee	printInd		151806	0					
ANR	151832	Identifier	printInd		151806	0					
ANR	151833	ArgumentList	root		151806	1					
ANR	151834	Argument	root		151806	0					
ANR	151835	Identifier	root		151806	0					
ANR	151836	Argument	0		151806	1					
ANR	151837	PrimaryExpression	0		151806	0					
ANR	151838	ReturnType	void		151806	1					
ANR	151839	Identifier	BTree :: print		151806	2					
ANR	151840	ParameterList			151806	3					
ANR	151841	CFGEntryNode	ENTRY		151806		True				
ANR	151842	CFGExitNode	EXIT		151806		True				
ANR	151843	Symbol	NULL		151806						
ANR	151844	Symbol	root		151806						
ANR	151845	Function	Btree_test	1233:0:34155:35659							
ANR	151846	FunctionDef	Btree_test ()		151845	0					
ANR	151847	CompoundStatement		1234:0:34177:35659	151845	0					
ANR	151848	IdentifierDeclStatement	BTree * bt ;	1235:1:34180:34190	151845	0	True				
ANR	151849	IdentifierDecl	* bt		151845	0					
ANR	151850	IdentifierDeclType	BTree *		151845	0					
ANR	151851	Identifier	bt		151845	1					
ANR	151852	ExpressionStatement	bt = new BTree ( )	1237:1:34194:34210	151845	1	True				
ANR	151853	AssignmentExpression	bt = new BTree ( )		151845	0		=			
ANR	151854	Identifier	bt		151845	0					
ANR	151855	UnaryExpression	new BTree ( )		151845	1					
ANR	151856	IfStatement	if ( NULL == bt )		151845	2					
ANR	151857	Condition	NULL == bt	1238:5:34217:34224	151845	0	True				
ANR	151858	EqualityExpression	NULL == bt		151845	0		==			
ANR	151859	Identifier	NULL		151845	0					
ANR	151860	Identifier	bt		151845	1					
ANR	151861	ThrowStatement	"throw ""Btree_test, 1"" ;"	1239:2:34230:34251	151845	1	True				
ANR	151862	PrimaryExpression	"""Btree_test, 1"""		151845	0					
ANR	151863	ExpressionStatement	bt -> print ( )	1241:1:34255:34266	151845	3	True				
ANR	151864	CallExpression	bt -> print ( )		151845	0					
ANR	151865	Callee	bt -> print		151845	0					
ANR	151866	PtrMemberAccess	bt -> print		151845	0					
ANR	151867	Identifier	bt		151845	0					
ANR	151868	Identifier	print		151845	1					
ANR	151869	ArgumentList			151845	1					
ANR	151870	IfStatement	if ( false == bt -> isEmpty ( ) )		151845	4					
ANR	151871	Condition	false == bt -> isEmpty ( )	1242:5:34273:34294	151845	0	True				
ANR	151872	EqualityExpression	false == bt -> isEmpty ( )		151845	0		==			
ANR	151873	Identifier	false		151845	0					
ANR	151874	CallExpression	bt -> isEmpty ( )		151845	1					
ANR	151875	Callee	bt -> isEmpty		151845	0					
ANR	151876	PtrMemberAccess	bt -> isEmpty		151845	0					
ANR	151877	Identifier	bt		151845	0					
ANR	151878	Identifier	isEmpty		151845	1					
ANR	151879	ArgumentList			151845	1					
ANR	151880	ThrowStatement	"throw ""Btree_test, 2"" ;"	1243:2:34300:34321	151845	1	True				
ANR	151881	PrimaryExpression	"""Btree_test, 2"""		151845	0					
ANR	151882	ExpressionStatement	"bt -> insert ( 10 , 1 )"	1244:1:34324:34340	151845	5	True				
ANR	151883	CallExpression	"bt -> insert ( 10 , 1 )"		151845	0					
ANR	151884	Callee	bt -> insert		151845	0					
ANR	151885	PtrMemberAccess	bt -> insert		151845	0					
ANR	151886	Identifier	bt		151845	0					
ANR	151887	Identifier	insert		151845	1					
ANR	151888	ArgumentList	10		151845	1					
ANR	151889	Argument	10		151845	0					
ANR	151890	PrimaryExpression	10		151845	0					
ANR	151891	Argument	1		151845	1					
ANR	151892	PrimaryExpression	1		151845	0					
ANR	151893	IfStatement	if ( true == bt -> isEmpty ( ) )		151845	6					
ANR	151894	Condition	true == bt -> isEmpty ( )	1245:5:34347:34367	151845	0	True				
ANR	151895	EqualityExpression	true == bt -> isEmpty ( )		151845	0		==			
ANR	151896	Identifier	true		151845	0					
ANR	151897	CallExpression	bt -> isEmpty ( )		151845	1					
ANR	151898	Callee	bt -> isEmpty		151845	0					
ANR	151899	PtrMemberAccess	bt -> isEmpty		151845	0					
ANR	151900	Identifier	bt		151845	0					
ANR	151901	Identifier	isEmpty		151845	1					
ANR	151902	ArgumentList			151845	1					
ANR	151903	ThrowStatement	"throw ""Btree_test, 3"" ;"	1246:2:34373:34394	151845	1	True				
ANR	151904	PrimaryExpression	"""Btree_test, 3"""		151845	0					
ANR	151905	ExpressionStatement	"bt -> insert ( 10 , 2 )"	1247:1:34397:34413	151845	7	True				
ANR	151906	CallExpression	"bt -> insert ( 10 , 2 )"		151845	0					
ANR	151907	Callee	bt -> insert		151845	0					
ANR	151908	PtrMemberAccess	bt -> insert		151845	0					
ANR	151909	Identifier	bt		151845	0					
ANR	151910	Identifier	insert		151845	1					
ANR	151911	ArgumentList	10		151845	1					
ANR	151912	Argument	10		151845	0					
ANR	151913	PrimaryExpression	10		151845	0					
ANR	151914	Argument	2		151845	1					
ANR	151915	PrimaryExpression	2		151845	0					
ANR	151916	ExpressionStatement	"bt -> insert ( 11 , 3 )"	1248:1:34416:34432	151845	8	True				
ANR	151917	CallExpression	"bt -> insert ( 11 , 3 )"		151845	0					
ANR	151918	Callee	bt -> insert		151845	0					
ANR	151919	PtrMemberAccess	bt -> insert		151845	0					
ANR	151920	Identifier	bt		151845	0					
ANR	151921	Identifier	insert		151845	1					
ANR	151922	ArgumentList	11		151845	1					
ANR	151923	Argument	11		151845	0					
ANR	151924	PrimaryExpression	11		151845	0					
ANR	151925	Argument	3		151845	1					
ANR	151926	PrimaryExpression	3		151845	0					
ANR	151927	ExpressionStatement	"bt -> insert ( 7 , 4 )"	1249:1:34435:34450	151845	9	True				
ANR	151928	CallExpression	"bt -> insert ( 7 , 4 )"		151845	0					
ANR	151929	Callee	bt -> insert		151845	0					
ANR	151930	PtrMemberAccess	bt -> insert		151845	0					
ANR	151931	Identifier	bt		151845	0					
ANR	151932	Identifier	insert		151845	1					
ANR	151933	ArgumentList	7		151845	1					
ANR	151934	Argument	7		151845	0					
ANR	151935	PrimaryExpression	7		151845	0					
ANR	151936	Argument	4		151845	1					
ANR	151937	PrimaryExpression	4		151845	0					
ANR	151938	ExpressionStatement	"bt -> insert ( 9 , 5 )"	1250:1:34453:34468	151845	10	True				
ANR	151939	CallExpression	"bt -> insert ( 9 , 5 )"		151845	0					
ANR	151940	Callee	bt -> insert		151845	0					
ANR	151941	PtrMemberAccess	bt -> insert		151845	0					
ANR	151942	Identifier	bt		151845	0					
ANR	151943	Identifier	insert		151845	1					
ANR	151944	ArgumentList	9		151845	1					
ANR	151945	Argument	9		151845	0					
ANR	151946	PrimaryExpression	9		151845	0					
ANR	151947	Argument	5		151845	1					
ANR	151948	PrimaryExpression	5		151845	0					
ANR	151949	ExpressionStatement	"bt -> insert ( 2 , 6 )"	1251:1:34471:34486	151845	11	True				
ANR	151950	CallExpression	"bt -> insert ( 2 , 6 )"		151845	0					
ANR	151951	Callee	bt -> insert		151845	0					
ANR	151952	PtrMemberAccess	bt -> insert		151845	0					
ANR	151953	Identifier	bt		151845	0					
ANR	151954	Identifier	insert		151845	1					
ANR	151955	ArgumentList	2		151845	1					
ANR	151956	Argument	2		151845	0					
ANR	151957	PrimaryExpression	2		151845	0					
ANR	151958	Argument	6		151845	1					
ANR	151959	PrimaryExpression	6		151845	0					
ANR	151960	ExpressionStatement	"bt -> insert ( 5 , 7 )"	1252:1:34489:34504	151845	12	True				
ANR	151961	CallExpression	"bt -> insert ( 5 , 7 )"		151845	0					
ANR	151962	Callee	bt -> insert		151845	0					
ANR	151963	PtrMemberAccess	bt -> insert		151845	0					
ANR	151964	Identifier	bt		151845	0					
ANR	151965	Identifier	insert		151845	1					
ANR	151966	ArgumentList	5		151845	1					
ANR	151967	Argument	5		151845	0					
ANR	151968	PrimaryExpression	5		151845	0					
ANR	151969	Argument	7		151845	1					
ANR	151970	PrimaryExpression	7		151845	0					
ANR	151971	ExpressionStatement	bt -> print ( )	1253:1:34507:34518	151845	13	True				
ANR	151972	CallExpression	bt -> print ( )		151845	0					
ANR	151973	Callee	bt -> print		151845	0					
ANR	151974	PtrMemberAccess	bt -> print		151845	0					
ANR	151975	Identifier	bt		151845	0					
ANR	151976	Identifier	print		151845	1					
ANR	151977	ArgumentList			151845	1					
ANR	151978	ExpressionStatement	"bt -> insert ( 0 , 8 )"	1254:1:34521:34536	151845	14	True				
ANR	151979	CallExpression	"bt -> insert ( 0 , 8 )"		151845	0					
ANR	151980	Callee	bt -> insert		151845	0					
ANR	151981	PtrMemberAccess	bt -> insert		151845	0					
ANR	151982	Identifier	bt		151845	0					
ANR	151983	Identifier	insert		151845	1					
ANR	151984	ArgumentList	0		151845	1					
ANR	151985	Argument	0		151845	0					
ANR	151986	PrimaryExpression	0		151845	0					
ANR	151987	Argument	8		151845	1					
ANR	151988	PrimaryExpression	8		151845	0					
ANR	151989	ExpressionStatement	bt -> print ( )	1255:1:34539:34550	151845	15	True				
ANR	151990	CallExpression	bt -> print ( )		151845	0					
ANR	151991	Callee	bt -> print		151845	0					
ANR	151992	PtrMemberAccess	bt -> print		151845	0					
ANR	151993	Identifier	bt		151845	0					
ANR	151994	Identifier	print		151845	1					
ANR	151995	ArgumentList			151845	1					
ANR	151996	ExpressionStatement	"bt -> insert ( 1 , 9 )"	1256:1:34553:34568	151845	16	True				
ANR	151997	CallExpression	"bt -> insert ( 1 , 9 )"		151845	0					
ANR	151998	Callee	bt -> insert		151845	0					
ANR	151999	PtrMemberAccess	bt -> insert		151845	0					
ANR	152000	Identifier	bt		151845	0					
ANR	152001	Identifier	insert		151845	1					
ANR	152002	ArgumentList	1		151845	1					
ANR	152003	Argument	1		151845	0					
ANR	152004	PrimaryExpression	1		151845	0					
ANR	152005	Argument	9		151845	1					
ANR	152006	PrimaryExpression	9		151845	0					
ANR	152007	ExpressionStatement	bt -> print ( )	1257:1:34571:34582	151845	17	True				
ANR	152008	CallExpression	bt -> print ( )		151845	0					
ANR	152009	Callee	bt -> print		151845	0					
ANR	152010	PtrMemberAccess	bt -> print		151845	0					
ANR	152011	Identifier	bt		151845	0					
ANR	152012	Identifier	print		151845	1					
ANR	152013	ArgumentList			151845	1					
ANR	152014	ExpressionStatement	"bt -> insert ( 3 , 10 )"	1258:1:34585:34601	151845	18	True				
ANR	152015	CallExpression	"bt -> insert ( 3 , 10 )"		151845	0					
ANR	152016	Callee	bt -> insert		151845	0					
ANR	152017	PtrMemberAccess	bt -> insert		151845	0					
ANR	152018	Identifier	bt		151845	0					
ANR	152019	Identifier	insert		151845	1					
ANR	152020	ArgumentList	3		151845	1					
ANR	152021	Argument	3		151845	0					
ANR	152022	PrimaryExpression	3		151845	0					
ANR	152023	Argument	10		151845	1					
ANR	152024	PrimaryExpression	10		151845	0					
ANR	152025	ExpressionStatement	bt -> print ( )	1259:1:34604:34615	151845	19	True				
ANR	152026	CallExpression	bt -> print ( )		151845	0					
ANR	152027	Callee	bt -> print		151845	0					
ANR	152028	PtrMemberAccess	bt -> print		151845	0					
ANR	152029	Identifier	bt		151845	0					
ANR	152030	Identifier	print		151845	1					
ANR	152031	ArgumentList			151845	1					
ANR	152032	ExpressionStatement	"bt -> insert ( 100 , 11 )"	1260:1:34618:34636	151845	20	True				
ANR	152033	CallExpression	"bt -> insert ( 100 , 11 )"		151845	0					
ANR	152034	Callee	bt -> insert		151845	0					
ANR	152035	PtrMemberAccess	bt -> insert		151845	0					
ANR	152036	Identifier	bt		151845	0					
ANR	152037	Identifier	insert		151845	1					
ANR	152038	ArgumentList	100		151845	1					
ANR	152039	Argument	100		151845	0					
ANR	152040	PrimaryExpression	100		151845	0					
ANR	152041	Argument	11		151845	1					
ANR	152042	PrimaryExpression	11		151845	0					
ANR	152043	ExpressionStatement	bt -> print ( )	1261:1:34639:34650	151845	21	True				
ANR	152044	CallExpression	bt -> print ( )		151845	0					
ANR	152045	Callee	bt -> print		151845	0					
ANR	152046	PtrMemberAccess	bt -> print		151845	0					
ANR	152047	Identifier	bt		151845	0					
ANR	152048	Identifier	print		151845	1					
ANR	152049	ArgumentList			151845	1					
ANR	152050	ExpressionStatement	"bt -> insert ( 50 , 12 )"	1262:1:34653:34670	151845	22	True				
ANR	152051	CallExpression	"bt -> insert ( 50 , 12 )"		151845	0					
ANR	152052	Callee	bt -> insert		151845	0					
ANR	152053	PtrMemberAccess	bt -> insert		151845	0					
ANR	152054	Identifier	bt		151845	0					
ANR	152055	Identifier	insert		151845	1					
ANR	152056	ArgumentList	50		151845	1					
ANR	152057	Argument	50		151845	0					
ANR	152058	PrimaryExpression	50		151845	0					
ANR	152059	Argument	12		151845	1					
ANR	152060	PrimaryExpression	12		151845	0					
ANR	152061	ExpressionStatement	bt -> print ( )	1263:1:34673:34684	151845	23	True				
ANR	152062	CallExpression	bt -> print ( )		151845	0					
ANR	152063	Callee	bt -> print		151845	0					
ANR	152064	PtrMemberAccess	bt -> print		151845	0					
ANR	152065	Identifier	bt		151845	0					
ANR	152066	Identifier	print		151845	1					
ANR	152067	ArgumentList			151845	1					
ANR	152068	ExpressionStatement	"bt -> insert ( 30 , 13 )"	1264:1:34687:34704	151845	24	True				
ANR	152069	CallExpression	"bt -> insert ( 30 , 13 )"		151845	0					
ANR	152070	Callee	bt -> insert		151845	0					
ANR	152071	PtrMemberAccess	bt -> insert		151845	0					
ANR	152072	Identifier	bt		151845	0					
ANR	152073	Identifier	insert		151845	1					
ANR	152074	ArgumentList	30		151845	1					
ANR	152075	Argument	30		151845	0					
ANR	152076	PrimaryExpression	30		151845	0					
ANR	152077	Argument	13		151845	1					
ANR	152078	PrimaryExpression	13		151845	0					
ANR	152079	ExpressionStatement	bt -> print ( )	1265:1:34707:34718	151845	25	True				
ANR	152080	CallExpression	bt -> print ( )		151845	0					
ANR	152081	Callee	bt -> print		151845	0					
ANR	152082	PtrMemberAccess	bt -> print		151845	0					
ANR	152083	Identifier	bt		151845	0					
ANR	152084	Identifier	print		151845	1					
ANR	152085	ArgumentList			151845	1					
ANR	152086	ExpressionStatement	"bt -> insert ( 6 , 14 )"	1266:1:34721:34737	151845	26	True				
ANR	152087	CallExpression	"bt -> insert ( 6 , 14 )"		151845	0					
ANR	152088	Callee	bt -> insert		151845	0					
ANR	152089	PtrMemberAccess	bt -> insert		151845	0					
ANR	152090	Identifier	bt		151845	0					
ANR	152091	Identifier	insert		151845	1					
ANR	152092	ArgumentList	6		151845	1					
ANR	152093	Argument	6		151845	0					
ANR	152094	PrimaryExpression	6		151845	0					
ANR	152095	Argument	14		151845	1					
ANR	152096	PrimaryExpression	14		151845	0					
ANR	152097	ExpressionStatement	"bt -> insert ( 6 , 15 )"	1267:1:34740:34756	151845	27	True				
ANR	152098	CallExpression	"bt -> insert ( 6 , 15 )"		151845	0					
ANR	152099	Callee	bt -> insert		151845	0					
ANR	152100	PtrMemberAccess	bt -> insert		151845	0					
ANR	152101	Identifier	bt		151845	0					
ANR	152102	Identifier	insert		151845	1					
ANR	152103	ArgumentList	6		151845	1					
ANR	152104	Argument	6		151845	0					
ANR	152105	PrimaryExpression	6		151845	0					
ANR	152106	Argument	15		151845	1					
ANR	152107	PrimaryExpression	15		151845	0					
ANR	152108	ExpressionStatement	bt -> print ( )	1268:1:34759:34770	151845	28	True				
ANR	152109	CallExpression	bt -> print ( )		151845	0					
ANR	152110	Callee	bt -> print		151845	0					
ANR	152111	PtrMemberAccess	bt -> print		151845	0					
ANR	152112	Identifier	bt		151845	0					
ANR	152113	Identifier	print		151845	1					
ANR	152114	ArgumentList			151845	1					
ANR	152115	ExpressionStatement	"bt -> insert ( 8 , 16 )"	1269:1:34773:34789	151845	29	True				
ANR	152116	CallExpression	"bt -> insert ( 8 , 16 )"		151845	0					
ANR	152117	Callee	bt -> insert		151845	0					
ANR	152118	PtrMemberAccess	bt -> insert		151845	0					
ANR	152119	Identifier	bt		151845	0					
ANR	152120	Identifier	insert		151845	1					
ANR	152121	ArgumentList	8		151845	1					
ANR	152122	Argument	8		151845	0					
ANR	152123	PrimaryExpression	8		151845	0					
ANR	152124	Argument	16		151845	1					
ANR	152125	PrimaryExpression	16		151845	0					
ANR	152126	ExpressionStatement	"bt -> insert ( 8 , 17 )"	1270:1:34792:34808	151845	30	True				
ANR	152127	CallExpression	"bt -> insert ( 8 , 17 )"		151845	0					
ANR	152128	Callee	bt -> insert		151845	0					
ANR	152129	PtrMemberAccess	bt -> insert		151845	0					
ANR	152130	Identifier	bt		151845	0					
ANR	152131	Identifier	insert		151845	1					
ANR	152132	ArgumentList	8		151845	1					
ANR	152133	Argument	8		151845	0					
ANR	152134	PrimaryExpression	8		151845	0					
ANR	152135	Argument	17		151845	1					
ANR	152136	PrimaryExpression	17		151845	0					
ANR	152137	ExpressionStatement	bt -> print ( )	1271:1:34811:34822	151845	31	True				
ANR	152138	CallExpression	bt -> print ( )		151845	0					
ANR	152139	Callee	bt -> print		151845	0					
ANR	152140	PtrMemberAccess	bt -> print		151845	0					
ANR	152141	Identifier	bt		151845	0					
ANR	152142	Identifier	print		151845	1					
ANR	152143	ArgumentList			151845	1					
ANR	152144	ExpressionStatement	"bt -> insert ( 4 , 18 )"	1272:1:34825:34841	151845	32	True				
ANR	152145	CallExpression	"bt -> insert ( 4 , 18 )"		151845	0					
ANR	152146	Callee	bt -> insert		151845	0					
ANR	152147	PtrMemberAccess	bt -> insert		151845	0					
ANR	152148	Identifier	bt		151845	0					
ANR	152149	Identifier	insert		151845	1					
ANR	152150	ArgumentList	4		151845	1					
ANR	152151	Argument	4		151845	0					
ANR	152152	PrimaryExpression	4		151845	0					
ANR	152153	Argument	18		151845	1					
ANR	152154	PrimaryExpression	18		151845	0					
ANR	152155	ExpressionStatement	"bt -> insert ( 5 , 19 )"	1273:1:34844:34860	151845	33	True				
ANR	152156	CallExpression	"bt -> insert ( 5 , 19 )"		151845	0					
ANR	152157	Callee	bt -> insert		151845	0					
ANR	152158	PtrMemberAccess	bt -> insert		151845	0					
ANR	152159	Identifier	bt		151845	0					
ANR	152160	Identifier	insert		151845	1					
ANR	152161	ArgumentList	5		151845	1					
ANR	152162	Argument	5		151845	0					
ANR	152163	PrimaryExpression	5		151845	0					
ANR	152164	Argument	19		151845	1					
ANR	152165	PrimaryExpression	19		151845	0					
ANR	152166	ExpressionStatement	"bt -> insert ( 5 , 20 )"	1274:1:34863:34879	151845	34	True				
ANR	152167	CallExpression	"bt -> insert ( 5 , 20 )"		151845	0					
ANR	152168	Callee	bt -> insert		151845	0					
ANR	152169	PtrMemberAccess	bt -> insert		151845	0					
ANR	152170	Identifier	bt		151845	0					
ANR	152171	Identifier	insert		151845	1					
ANR	152172	ArgumentList	5		151845	1					
ANR	152173	Argument	5		151845	0					
ANR	152174	PrimaryExpression	5		151845	0					
ANR	152175	Argument	20		151845	1					
ANR	152176	PrimaryExpression	20		151845	0					
ANR	152177	ExpressionStatement	"bt -> insert ( 20 , 21 )"	1276:1:34883:34900	151845	35	True				
ANR	152178	CallExpression	"bt -> insert ( 20 , 21 )"		151845	0					
ANR	152179	Callee	bt -> insert		151845	0					
ANR	152180	PtrMemberAccess	bt -> insert		151845	0					
ANR	152181	Identifier	bt		151845	0					
ANR	152182	Identifier	insert		151845	1					
ANR	152183	ArgumentList	20		151845	1					
ANR	152184	Argument	20		151845	0					
ANR	152185	PrimaryExpression	20		151845	0					
ANR	152186	Argument	21		151845	1					
ANR	152187	PrimaryExpression	21		151845	0					
ANR	152188	ExpressionStatement	"bt -> insert ( 15 , 22 )"	1277:1:34903:34920	151845	36	True				
ANR	152189	CallExpression	"bt -> insert ( 15 , 22 )"		151845	0					
ANR	152190	Callee	bt -> insert		151845	0					
ANR	152191	PtrMemberAccess	bt -> insert		151845	0					
ANR	152192	Identifier	bt		151845	0					
ANR	152193	Identifier	insert		151845	1					
ANR	152194	ArgumentList	15		151845	1					
ANR	152195	Argument	15		151845	0					
ANR	152196	PrimaryExpression	15		151845	0					
ANR	152197	Argument	22		151845	1					
ANR	152198	PrimaryExpression	22		151845	0					
ANR	152199	ExpressionStatement	bt -> print ( )	1278:1:34923:34934	151845	37	True				
ANR	152200	CallExpression	bt -> print ( )		151845	0					
ANR	152201	Callee	bt -> print		151845	0					
ANR	152202	PtrMemberAccess	bt -> print		151845	0					
ANR	152203	Identifier	bt		151845	0					
ANR	152204	Identifier	print		151845	1					
ANR	152205	ArgumentList			151845	1					
ANR	152206	ExpressionStatement	"bt -> insert ( 17 , 23 )"	1279:1:34937:34954	151845	38	True				
ANR	152207	CallExpression	"bt -> insert ( 17 , 23 )"		151845	0					
ANR	152208	Callee	bt -> insert		151845	0					
ANR	152209	PtrMemberAccess	bt -> insert		151845	0					
ANR	152210	Identifier	bt		151845	0					
ANR	152211	Identifier	insert		151845	1					
ANR	152212	ArgumentList	17		151845	1					
ANR	152213	Argument	17		151845	0					
ANR	152214	PrimaryExpression	17		151845	0					
ANR	152215	Argument	23		151845	1					
ANR	152216	PrimaryExpression	23		151845	0					
ANR	152217	ExpressionStatement	bt -> print ( )	1280:1:34957:34968	151845	39	True				
ANR	152218	CallExpression	bt -> print ( )		151845	0					
ANR	152219	Callee	bt -> print		151845	0					
ANR	152220	PtrMemberAccess	bt -> print		151845	0					
ANR	152221	Identifier	bt		151845	0					
ANR	152222	Identifier	print		151845	1					
ANR	152223	ArgumentList			151845	1					
ANR	152224	IfStatement	if ( bt -> exists ( 120 ) )		151845	40					
ANR	152225	Condition	bt -> exists ( 120 )	1282:5:34976:34990	151845	0	True				
ANR	152226	CallExpression	bt -> exists ( 120 )		151845	0					
ANR	152227	Callee	bt -> exists		151845	0					
ANR	152228	PtrMemberAccess	bt -> exists		151845	0					
ANR	152229	Identifier	bt		151845	0					
ANR	152230	Identifier	exists		151845	1					
ANR	152231	ArgumentList	120		151845	1					
ANR	152232	Argument	120		151845	0					
ANR	152233	PrimaryExpression	120		151845	0					
ANR	152234	ThrowStatement	"throw ""Btree_test, 4"" ;"	1283:2:34996:35017	151845	1	True				
ANR	152235	PrimaryExpression	"""Btree_test, 4"""		151845	0					
ANR	152236	IfStatement	if ( ! bt -> exists ( 20 ) )		151845	41					
ANR	152237	Condition	! bt -> exists ( 20 )	1284:5:35024:35038	151845	0	True				
ANR	152238	UnaryOperationExpression	! bt -> exists ( 20 )		151845	0					
ANR	152239	UnaryOperator	!		151845	0					
ANR	152240	CallExpression	bt -> exists ( 20 )		151845	1					
ANR	152241	Callee	bt -> exists		151845	0					
ANR	152242	PtrMemberAccess	bt -> exists		151845	0					
ANR	152243	Identifier	bt		151845	0					
ANR	152244	Identifier	exists		151845	1					
ANR	152245	ArgumentList	20		151845	1					
ANR	152246	Argument	20		151845	0					
ANR	152247	PrimaryExpression	20		151845	0					
ANR	152248	ThrowStatement	"throw ""Btree_test, 5"" ;"	1285:2:35044:35065	151845	1	True				
ANR	152249	PrimaryExpression	"""Btree_test, 5"""		151845	0					
ANR	152250	IfStatement	if ( 16 != bt -> findVal ( 8 ) )		151845	42					
ANR	152251	Condition	16 != bt -> findVal ( 8 )	1287:5:35073:35092	151845	0	True				
ANR	152252	EqualityExpression	16 != bt -> findVal ( 8 )		151845	0		!=			
ANR	152253	PrimaryExpression	16		151845	0					
ANR	152254	CallExpression	bt -> findVal ( 8 )		151845	1					
ANR	152255	Callee	bt -> findVal		151845	0					
ANR	152256	PtrMemberAccess	bt -> findVal		151845	0					
ANR	152257	Identifier	bt		151845	0					
ANR	152258	Identifier	findVal		151845	1					
ANR	152259	ArgumentList	8		151845	1					
ANR	152260	Argument	8		151845	0					
ANR	152261	PrimaryExpression	8		151845	0					
ANR	152262	ThrowStatement	"throw ""Btree_test, 6"" ;"	1288:2:35126:35147	151845	1	True				
ANR	152263	PrimaryExpression	"""Btree_test, 6"""		151845	0					
ANR	152264	ExpressionStatement	bt -> remove ( 8 )	1289:1:35150:35163	151845	43	True				
ANR	152265	CallExpression	bt -> remove ( 8 )		151845	0					
ANR	152266	Callee	bt -> remove		151845	0					
ANR	152267	PtrMemberAccess	bt -> remove		151845	0					
ANR	152268	Identifier	bt		151845	0					
ANR	152269	Identifier	remove		151845	1					
ANR	152270	ArgumentList	8		151845	1					
ANR	152271	Argument	8		151845	0					
ANR	152272	PrimaryExpression	8		151845	0					
ANR	152273	ExpressionStatement	bt -> print ( )	1290:1:35166:35177	151845	44	True				
ANR	152274	CallExpression	bt -> print ( )		151845	0					
ANR	152275	Callee	bt -> print		151845	0					
ANR	152276	PtrMemberAccess	bt -> print		151845	0					
ANR	152277	Identifier	bt		151845	0					
ANR	152278	Identifier	print		151845	1					
ANR	152279	ArgumentList			151845	1					
ANR	152280	ExpressionStatement	"bt -> insert ( 100 , 12 )"	1292:1:35181:35199	151845	45	True				
ANR	152281	CallExpression	"bt -> insert ( 100 , 12 )"		151845	0					
ANR	152282	Callee	bt -> insert		151845	0					
ANR	152283	PtrMemberAccess	bt -> insert		151845	0					
ANR	152284	Identifier	bt		151845	0					
ANR	152285	Identifier	insert		151845	1					
ANR	152286	ArgumentList	100		151845	1					
ANR	152287	Argument	100		151845	0					
ANR	152288	PrimaryExpression	100		151845	0					
ANR	152289	Argument	12		151845	1					
ANR	152290	PrimaryExpression	12		151845	0					
ANR	152291	ExpressionStatement	bt -> print ( )	1293:1:35202:35213	151845	46	True				
ANR	152292	CallExpression	bt -> print ( )		151845	0					
ANR	152293	Callee	bt -> print		151845	0					
ANR	152294	PtrMemberAccess	bt -> print		151845	0					
ANR	152295	Identifier	bt		151845	0					
ANR	152296	Identifier	print		151845	1					
ANR	152297	ArgumentList			151845	1					
ANR	152298	IfStatement	if ( 100 != bt -> findMaxKey ( ) )		151845	47					
ANR	152299	Condition	100 != bt -> findMaxKey ( )	1294:5:35220:35240	151845	0	True				
ANR	152300	EqualityExpression	100 != bt -> findMaxKey ( )		151845	0		!=			
ANR	152301	PrimaryExpression	100		151845	0					
ANR	152302	CallExpression	bt -> findMaxKey ( )		151845	1					
ANR	152303	Callee	bt -> findMaxKey		151845	0					
ANR	152304	PtrMemberAccess	bt -> findMaxKey		151845	0					
ANR	152305	Identifier	bt		151845	0					
ANR	152306	Identifier	findMaxKey		151845	1					
ANR	152307	ArgumentList			151845	1					
ANR	152308	ThrowStatement	"throw ""Btree_test, 7"" ;"	1295:2:35246:35267	151845	1	True				
ANR	152309	PrimaryExpression	"""Btree_test, 7"""		151845	0					
ANR	152310	IfStatement	if ( 12 != bt -> findValForMaxKey ( ) )		151845	48					
ANR	152311	Condition	12 != bt -> findValForMaxKey ( )	1296:5:35274:35299	151845	0	True				
ANR	152312	EqualityExpression	12 != bt -> findValForMaxKey ( )		151845	0		!=			
ANR	152313	PrimaryExpression	12		151845	0					
ANR	152314	CallExpression	bt -> findValForMaxKey ( )		151845	1					
ANR	152315	Callee	bt -> findValForMaxKey		151845	0					
ANR	152316	PtrMemberAccess	bt -> findValForMaxKey		151845	0					
ANR	152317	Identifier	bt		151845	0					
ANR	152318	Identifier	findValForMaxKey		151845	1					
ANR	152319	ArgumentList			151845	1					
ANR	152320	ThrowStatement	"throw ""Btree_test, 8"" ;"	1297:2:35305:35326	151845	1	True				
ANR	152321	PrimaryExpression	"""Btree_test, 8"""		151845	0					
ANR	152322	ExpressionStatement	bt -> removeMax ( )	1298:1:35329:35344	151845	49	True				
ANR	152323	CallExpression	bt -> removeMax ( )		151845	0					
ANR	152324	Callee	bt -> removeMax		151845	0					
ANR	152325	PtrMemberAccess	bt -> removeMax		151845	0					
ANR	152326	Identifier	bt		151845	0					
ANR	152327	Identifier	removeMax		151845	1					
ANR	152328	ArgumentList			151845	1					
ANR	152329	ExpressionStatement	"bt -> insert ( 0 , 9 )"	1299:1:35347:35362	151845	50	True				
ANR	152330	CallExpression	"bt -> insert ( 0 , 9 )"		151845	0					
ANR	152331	Callee	bt -> insert		151845	0					
ANR	152332	PtrMemberAccess	bt -> insert		151845	0					
ANR	152333	Identifier	bt		151845	0					
ANR	152334	Identifier	insert		151845	1					
ANR	152335	ArgumentList	0		151845	1					
ANR	152336	Argument	0		151845	0					
ANR	152337	PrimaryExpression	0		151845	0					
ANR	152338	Argument	9		151845	1					
ANR	152339	PrimaryExpression	9		151845	0					
ANR	152340	ExpressionStatement	bt -> print ( )	1300:1:35365:35376	151845	51	True				
ANR	152341	CallExpression	bt -> print ( )		151845	0					
ANR	152342	Callee	bt -> print		151845	0					
ANR	152343	PtrMemberAccess	bt -> print		151845	0					
ANR	152344	Identifier	bt		151845	0					
ANR	152345	Identifier	print		151845	1					
ANR	152346	ArgumentList			151845	1					
ANR	152347	IfStatement	if ( 0 != bt -> findMinKey ( ) )		151845	52					
ANR	152348	Condition	0 != bt -> findMinKey ( )	1301:5:35383:35401	151845	0	True				
ANR	152349	EqualityExpression	0 != bt -> findMinKey ( )		151845	0		!=			
ANR	152350	PrimaryExpression	0		151845	0					
ANR	152351	CallExpression	bt -> findMinKey ( )		151845	1					
ANR	152352	Callee	bt -> findMinKey		151845	0					
ANR	152353	PtrMemberAccess	bt -> findMinKey		151845	0					
ANR	152354	Identifier	bt		151845	0					
ANR	152355	Identifier	findMinKey		151845	1					
ANR	152356	ArgumentList			151845	1					
ANR	152357	ThrowStatement	"throw ""Btree_test, 9"" ;"	1302:2:35407:35428	151845	1	True				
ANR	152358	PrimaryExpression	"""Btree_test, 9"""		151845	0					
ANR	152359	IfStatement	if ( 8 != bt -> findValForMinKey ( ) )		151845	53					
ANR	152360	Condition	8 != bt -> findValForMinKey ( )	1303:5:35435:35459	151845	0	True				
ANR	152361	EqualityExpression	8 != bt -> findValForMinKey ( )		151845	0		!=			
ANR	152362	PrimaryExpression	8		151845	0					
ANR	152363	CallExpression	bt -> findValForMinKey ( )		151845	1					
ANR	152364	Callee	bt -> findValForMinKey		151845	0					
ANR	152365	PtrMemberAccess	bt -> findValForMinKey		151845	0					
ANR	152366	Identifier	bt		151845	0					
ANR	152367	Identifier	findValForMinKey		151845	1					
ANR	152368	ArgumentList			151845	1					
ANR	152369	ThrowStatement	"throw ""Btree_test, 10"" ;"	1304:2:35465:35487	151845	1	True				
ANR	152370	PrimaryExpression	"""Btree_test, 10"""		151845	0					
ANR	152371	ExpressionStatement	bt -> removeMin ( )	1305:1:35490:35505	151845	54	True				
ANR	152372	CallExpression	bt -> removeMin ( )		151845	0					
ANR	152373	Callee	bt -> removeMin		151845	0					
ANR	152374	PtrMemberAccess	bt -> removeMin		151845	0					
ANR	152375	Identifier	bt		151845	0					
ANR	152376	Identifier	removeMin		151845	1					
ANR	152377	ArgumentList			151845	1					
ANR	152378	ExpressionStatement	bt -> print ( )	1306:1:35508:35519	151845	55	True				
ANR	152379	CallExpression	bt -> print ( )		151845	0					
ANR	152380	Callee	bt -> print		151845	0					
ANR	152381	PtrMemberAccess	bt -> print		151845	0					
ANR	152382	Identifier	bt		151845	0					
ANR	152383	Identifier	print		151845	1					
ANR	152384	ArgumentList			151845	1					
ANR	152385	ExpressionStatement	"printf ( "">>>>> %d\\n"" , bt -> findMaxKey ( ) )"	1308:1:35523:35562	151845	56	True				
ANR	152386	CallExpression	"printf ( "">>>>> %d\\n"" , bt -> findMaxKey ( ) )"		151845	0					
ANR	152387	Callee	printf		151845	0					
ANR	152388	Identifier	printf		151845	0					
ANR	152389	ArgumentList	""">>>>> %d\\n"""		151845	1					
ANR	152390	Argument	""">>>>> %d\\n"""		151845	0					
ANR	152391	PrimaryExpression	""">>>>> %d\\n"""		151845	0					
ANR	152392	Argument	bt -> findMaxKey ( )		151845	1					
ANR	152393	CallExpression	bt -> findMaxKey ( )		151845	0					
ANR	152394	Callee	bt -> findMaxKey		151845	0					
ANR	152395	PtrMemberAccess	bt -> findMaxKey		151845	0					
ANR	152396	Identifier	bt		151845	0					
ANR	152397	Identifier	findMaxKey		151845	1					
ANR	152398	ArgumentList			151845	1					
ANR	152399	ExpressionStatement	"printf ( "">>>>> %d\\n"" , bt -> findMinKey ( ) )"	1309:1:35565:35604	151845	57	True				
ANR	152400	CallExpression	"printf ( "">>>>> %d\\n"" , bt -> findMinKey ( ) )"		151845	0					
ANR	152401	Callee	printf		151845	0					
ANR	152402	Identifier	printf		151845	0					
ANR	152403	ArgumentList	""">>>>> %d\\n"""		151845	1					
ANR	152404	Argument	""">>>>> %d\\n"""		151845	0					
ANR	152405	PrimaryExpression	""">>>>> %d\\n"""		151845	0					
ANR	152406	Argument	bt -> findMinKey ( )		151845	1					
ANR	152407	CallExpression	bt -> findMinKey ( )		151845	0					
ANR	152408	Callee	bt -> findMinKey		151845	0					
ANR	152409	PtrMemberAccess	bt -> findMinKey		151845	0					
ANR	152410	Identifier	bt		151845	0					
ANR	152411	Identifier	findMinKey		151845	1					
ANR	152412	ArgumentList			151845	1					
ANR	152413	ExpressionStatement	"printf ( "">>>>> %d\\n"" , bt -> findVal ( 15 ) )"	1310:1:35607:35645	151845	58	True				
ANR	152414	CallExpression	"printf ( "">>>>> %d\\n"" , bt -> findVal ( 15 ) )"		151845	0					
ANR	152415	Callee	printf		151845	0					
ANR	152416	Identifier	printf		151845	0					
ANR	152417	ArgumentList	""">>>>> %d\\n"""		151845	1					
ANR	152418	Argument	""">>>>> %d\\n"""		151845	0					
ANR	152419	PrimaryExpression	""">>>>> %d\\n"""		151845	0					
ANR	152420	Argument	bt -> findVal ( 15 )		151845	1					
ANR	152421	CallExpression	bt -> findVal ( 15 )		151845	0					
ANR	152422	Callee	bt -> findVal		151845	0					
ANR	152423	PtrMemberAccess	bt -> findVal		151845	0					
ANR	152424	Identifier	bt		151845	0					
ANR	152425	Identifier	findVal		151845	1					
ANR	152426	ArgumentList	15		151845	1					
ANR	152427	Argument	15		151845	0					
ANR	152428	PrimaryExpression	15		151845	0					
ANR	152429	Statement	delete	1311:1:35648:35653	151845	59	True				
ANR	152430	ExpressionStatement	bt	1311:8:35655:35657	151845	60	True				
ANR	152431	Identifier	bt		151845	0					
ANR	152432	ReturnType	void		151845	1					
ANR	152433	Identifier	Btree_test		151845	2					
ANR	152434	ParameterList			151845	3					
ANR	152435	CFGEntryNode	ENTRY		151845		True				
ANR	152436	CFGExitNode	EXIT		151845		True				
ANR	152437	CFGExceptionNode	EXCEPTION		151845		True				
ANR	152438	CFGExceptionNode	EXCEPTION		151845		True				
ANR	152439	CFGExceptionNode	EXCEPTION		151845		True				
ANR	152440	CFGExceptionNode	EXCEPTION		151845		True				
ANR	152441	CFGExceptionNode	EXCEPTION		151845		True				
ANR	152442	CFGExceptionNode	EXCEPTION		151845		True				
ANR	152443	CFGExceptionNode	EXCEPTION		151845		True				
ANR	152444	CFGExceptionNode	EXCEPTION		151845		True				
ANR	152445	CFGExceptionNode	EXCEPTION		151845		True				
ANR	152446	CFGExceptionNode	EXCEPTION		151845		True				
ANR	152447	CFGExceptionNode	EXCEPTION		151845		True				
ANR	152448	CFGExceptionNode	EXCEPTION		151845		True				
ANR	152449	CFGExceptionNode	EXCEPTION		151845		True				
ANR	152450	CFGExceptionNode	EXCEPTION		151845		True				
ANR	152451	CFGExceptionNode	EXCEPTION		151845		True				
ANR	152452	CFGExceptionNode	EXCEPTION		151845		True				
ANR	152453	CFGExceptionNode	EXCEPTION		151845		True				
ANR	152454	CFGExceptionNode	EXCEPTION		151845		True				
ANR	152455	CFGExceptionNode	EXCEPTION		151845		True				
ANR	152456	Symbol	bt		151845						
ANR	152457	Symbol	bt -> findMinKey		151845						
ANR	152458	Symbol	NULL		151845						
ANR	152459	Symbol	bt -> exists		151845						
ANR	152460	Symbol	bt -> findVal		151845						
ANR	152461	Symbol	bt -> findValForMaxKey		151845						
ANR	152462	Symbol	false		151845						
ANR	152463	Symbol	bt -> isEmpty		151845						
ANR	152464	Symbol	true		151845						
ANR	152465	Symbol	bt -> findValForMinKey		151845						
ANR	152466	Symbol	* bt		151845						
ANR	152467	Symbol	bt -> findMaxKey		151845						
