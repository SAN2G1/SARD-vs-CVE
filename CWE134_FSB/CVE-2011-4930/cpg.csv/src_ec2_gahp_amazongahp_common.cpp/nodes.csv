command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5078625	File	data/converged/CVE-2011-4930_htcondor/src_ec2_gahp_amazongahp_common.cpp								
ANR	5078626	DeclStmt									
ANR	5078627	Decl							std :: string	std :: string	amazon_proxy_host
ANR	5078628	DeclStmt									
ANR	5078629	Decl							int	int	amazon_proxy_port
ANR	5078630	DeclStmt									
ANR	5078631	Decl							std :: string	std :: string	amazon_proxy_user
ANR	5078632	DeclStmt									
ANR	5078633	Decl							std :: string	std :: string	amazon_proxy_passwd
ANR	5078634	DeclStmt									
ANR	5078635	Decl							SimpleList < AmazonGahpCommand * >	SimpleList < AmazonGahpCommand * >	amazon_gahp_commands
ANR	5078636	Function	set_amazon_proxy_server	35:0:1214:2786							
ANR	5078637	FunctionDef	set_amazon_proxy_server (const char * url)		5078636	0					
ANR	5078638	CompoundStatement		36:0:1261:2786	5078636	0					
ANR	5078639	IfStatement	if ( ! url )		5078636	0					
ANR	5078640	Condition	! url	37:5:1268:1271	5078636	0	True				
ANR	5078641	UnaryOperationExpression	! url		5078636	0					
ANR	5078642	UnaryOperator	!		5078636	0					
ANR	5078643	Identifier	url		5078636	1					
ANR	5078644	CompoundStatement		2:12:13:13	5078636	1					
ANR	5078645	ReturnStatement	return ;	38:2:1279:1285	5078636	0	True				
ANR	5078646	IfStatement	"if ( ! strncasecmp ( ""http://"" , url , strlen ( ""http://"" ) ) )"		5078636	1					
ANR	5078647	Condition	"! strncasecmp ( ""http://"" , url , strlen ( ""http://"" ) )"	42:5:1333:1379	5078636	0	True				
ANR	5078648	UnaryOperationExpression	"! strncasecmp ( ""http://"" , url , strlen ( ""http://"" ) )"		5078636	0					
ANR	5078649	UnaryOperator	!		5078636	0					
ANR	5078650	CallExpression	"strncasecmp ( ""http://"" , url , strlen ( ""http://"" ) )"		5078636	1					
ANR	5078651	Callee	strncasecmp		5078636	0					
ANR	5078652	Identifier	strncasecmp		5078636	0					
ANR	5078653	ArgumentList	"""http://"""		5078636	1					
ANR	5078654	Argument	"""http://"""		5078636	0					
ANR	5078655	PrimaryExpression	"""http://"""		5078636	0					
ANR	5078656	Argument	url		5078636	1					
ANR	5078657	Identifier	url		5078636	0					
ANR	5078658	Argument	"strlen ( ""http://"" )"		5078636	2					
ANR	5078659	CallExpression	"strlen ( ""http://"" )"		5078636	0					
ANR	5078660	Callee	strlen		5078636	0					
ANR	5078661	Identifier	strlen		5078636	0					
ANR	5078662	ArgumentList	"""http://"""		5078636	1					
ANR	5078663	Argument	"""http://"""		5078636	0					
ANR	5078664	PrimaryExpression	"""http://"""		5078636	0					
ANR	5078665	CompoundStatement		7:54:120:120	5078636	1					
ANR	5078666	ExpressionStatement	"amazon_proxy_host = url + strlen ( ""http://"" )"	43:2:1386:1430	5078636	0	True				
ANR	5078667	AssignmentExpression	"amazon_proxy_host = url + strlen ( ""http://"" )"		5078636	0		=			
ANR	5078668	Identifier	amazon_proxy_host		5078636	0					
ANR	5078669	AdditiveExpression	"url + strlen ( ""http://"" )"		5078636	1		+			
ANR	5078670	Identifier	url		5078636	0					
ANR	5078671	CallExpression	"strlen ( ""http://"" )"		5078636	1					
ANR	5078672	Callee	strlen		5078636	0					
ANR	5078673	Identifier	strlen		5078636	0					
ANR	5078674	ArgumentList	"""http://"""		5078636	1					
ANR	5078675	Argument	"""http://"""		5078636	0					
ANR	5078676	PrimaryExpression	"""http://"""		5078636	0					
ANR	5078677	ExpressionStatement	amazon_proxy_port = 80	44:2:1434:1456	5078636	1	True				
ANR	5078678	AssignmentExpression	amazon_proxy_port = 80		5078636	0		=			
ANR	5078679	Identifier	amazon_proxy_port		5078636	0					
ANR	5078680	PrimaryExpression	80		5078636	1					
ANR	5078681	ElseStatement	else		5078636	0					
ANR	5078682	IfStatement	"if ( ! strncasecmp ( ""https://"" , url , strlen ( ""https://"" ) ) )"		5078636	0					
ANR	5078683	Condition	"! strncasecmp ( ""https://"" , url , strlen ( ""https://"" ) )"	45:11:1469:1517	5078636	0	True				
ANR	5078684	UnaryOperationExpression	"! strncasecmp ( ""https://"" , url , strlen ( ""https://"" ) )"		5078636	0					
ANR	5078685	UnaryOperator	!		5078636	0					
ANR	5078686	CallExpression	"strncasecmp ( ""https://"" , url , strlen ( ""https://"" ) )"		5078636	1					
ANR	5078687	Callee	strncasecmp		5078636	0					
ANR	5078688	Identifier	strncasecmp		5078636	0					
ANR	5078689	ArgumentList	"""https://"""		5078636	1					
ANR	5078690	Argument	"""https://"""		5078636	0					
ANR	5078691	PrimaryExpression	"""https://"""		5078636	0					
ANR	5078692	Argument	url		5078636	1					
ANR	5078693	Identifier	url		5078636	0					
ANR	5078694	Argument	"strlen ( ""https://"" )"		5078636	2					
ANR	5078695	CallExpression	"strlen ( ""https://"" )"		5078636	0					
ANR	5078696	Callee	strlen		5078636	0					
ANR	5078697	Identifier	strlen		5078636	0					
ANR	5078698	ArgumentList	"""https://"""		5078636	1					
ANR	5078699	Argument	"""https://"""		5078636	0					
ANR	5078700	PrimaryExpression	"""https://"""		5078636	0					
ANR	5078701	CompoundStatement		10:63:259:259	5078636	1					
ANR	5078702	ExpressionStatement	"amazon_proxy_host = url + strlen ( ""https://"" )"	46:2:1526:1571	5078636	0	True				
ANR	5078703	AssignmentExpression	"amazon_proxy_host = url + strlen ( ""https://"" )"		5078636	0		=			
ANR	5078704	Identifier	amazon_proxy_host		5078636	0					
ANR	5078705	AdditiveExpression	"url + strlen ( ""https://"" )"		5078636	1		+			
ANR	5078706	Identifier	url		5078636	0					
ANR	5078707	CallExpression	"strlen ( ""https://"" )"		5078636	1					
ANR	5078708	Callee	strlen		5078636	0					
ANR	5078709	Identifier	strlen		5078636	0					
ANR	5078710	ArgumentList	"""https://"""		5078636	1					
ANR	5078711	Argument	"""https://"""		5078636	0					
ANR	5078712	PrimaryExpression	"""https://"""		5078636	0					
ANR	5078713	ExpressionStatement	amazon_proxy_port = 443	47:2:1575:1598	5078636	1	True				
ANR	5078714	AssignmentExpression	amazon_proxy_port = 443		5078636	0		=			
ANR	5078715	Identifier	amazon_proxy_port		5078636	0					
ANR	5078716	PrimaryExpression	443		5078636	1					
ANR	5078717	ElseStatement	else		5078636	0					
ANR	5078718	CompoundStatement		13:7:345:345	5078636	0					
ANR	5078719	ExpressionStatement	amazon_proxy_host = url	49:2:1611:1634	5078636	0	True				
ANR	5078720	AssignmentExpression	amazon_proxy_host = url		5078636	0		=			
ANR	5078721	Identifier	amazon_proxy_host		5078636	0					
ANR	5078722	Identifier	url		5078636	1					
ANR	5078723	ExpressionStatement	amazon_proxy_port = 80	50:2:1638:1660	5078636	1	True				
ANR	5078724	AssignmentExpression	amazon_proxy_port = 80		5078636	0		=			
ANR	5078725	Identifier	amazon_proxy_port		5078636	0					
ANR	5078726	PrimaryExpression	80		5078636	1					
ANR	5078727	IdentifierDeclStatement	size_t pos = amazon_proxy_host . find ( '@' ) ;	56:4:1876:1916	5078636	2	True				
ANR	5078728	IdentifierDecl	pos = amazon_proxy_host . find ( '@' )		5078636	0					
ANR	5078729	IdentifierDeclType	size_t		5078636	0					
ANR	5078730	Identifier	pos		5078636	1					
ANR	5078731	AssignmentExpression	pos = amazon_proxy_host . find ( '@' )		5078636	2		=			
ANR	5078732	Identifier	pos		5078636	0					
ANR	5078733	CallExpression	amazon_proxy_host . find ( '@' )		5078636	1					
ANR	5078734	Callee	amazon_proxy_host . find		5078636	0					
ANR	5078735	MemberAccess	amazon_proxy_host . find		5078636	0					
ANR	5078736	Identifier	amazon_proxy_host		5078636	0					
ANR	5078737	Identifier	find		5078636	1					
ANR	5078738	ArgumentList	'@'		5078636	1					
ANR	5078739	Argument	'@'		5078636	0					
ANR	5078740	PrimaryExpression	'@'		5078636	0					
ANR	5078741	IfStatement	if ( std :: string :: npos != pos )		5078636	3					
ANR	5078742	Condition	std :: string :: npos != pos	57:5:1923:1946	5078636	0	True				
ANR	5078743	EqualityExpression	std :: string :: npos != pos		5078636	0		!=			
ANR	5078744	Identifier	std :: string :: npos		5078636	0					
ANR	5078745	Identifier	pos		5078636	1					
ANR	5078746	CompoundStatement		22:32:688:688	5078636	1					
ANR	5078747	ExpressionStatement	"amazon_proxy_user = amazon_proxy_host . substr ( 0 , pos )"	58:3:1955:2007	5078636	0	True				
ANR	5078748	AssignmentExpression	"amazon_proxy_user = amazon_proxy_host . substr ( 0 , pos )"		5078636	0		=			
ANR	5078749	Identifier	amazon_proxy_user		5078636	0					
ANR	5078750	CallExpression	"amazon_proxy_host . substr ( 0 , pos )"		5078636	1					
ANR	5078751	Callee	amazon_proxy_host . substr		5078636	0					
ANR	5078752	MemberAccess	amazon_proxy_host . substr		5078636	0					
ANR	5078753	Identifier	amazon_proxy_host		5078636	0					
ANR	5078754	Identifier	substr		5078636	1					
ANR	5078755	ArgumentList	0		5078636	1					
ANR	5078756	Argument	0		5078636	0					
ANR	5078757	PrimaryExpression	0		5078636	0					
ANR	5078758	Argument	pos		5078636	1					
ANR	5078759	Identifier	pos		5078636	0					
ANR	5078760	ExpressionStatement	"amazon_proxy_host = amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) )"	60:3:2016:2101	5078636	1	True				
ANR	5078761	AssignmentExpression	"amazon_proxy_host = amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) )"		5078636	0		=			
ANR	5078762	Identifier	amazon_proxy_host		5078636	0					
ANR	5078763	CallExpression	"amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) )"		5078636	1					
ANR	5078764	Callee	amazon_proxy_host . substr		5078636	0					
ANR	5078765	MemberAccess	amazon_proxy_host . substr		5078636	0					
ANR	5078766	Identifier	amazon_proxy_host		5078636	0					
ANR	5078767	Identifier	substr		5078636	1					
ANR	5078768	ArgumentList	pos + 1		5078636	1					
ANR	5078769	Argument	pos + 1		5078636	0					
ANR	5078770	AdditiveExpression	pos + 1		5078636	0		+			
ANR	5078771	Identifier	pos		5078636	0					
ANR	5078772	PrimaryExpression	1		5078636	1					
ANR	5078773	Argument	amazon_proxy_host . length ( )		5078636	1					
ANR	5078774	CallExpression	amazon_proxy_host . length ( )		5078636	0					
ANR	5078775	Callee	amazon_proxy_host . length		5078636	0					
ANR	5078776	MemberAccess	amazon_proxy_host . length		5078636	0					
ANR	5078777	Identifier	amazon_proxy_host		5078636	0					
ANR	5078778	Identifier	length		5078636	1					
ANR	5078779	ArgumentList			5078636	1					
ANR	5078780	ExpressionStatement	pos = amazon_proxy_user . find ( ':' )	63:6:2110:2143	5078636	2	True				
ANR	5078781	AssignmentExpression	pos = amazon_proxy_user . find ( ':' )		5078636	0		=			
ANR	5078782	Identifier	pos		5078636	0					
ANR	5078783	CallExpression	amazon_proxy_user . find ( ':' )		5078636	1					
ANR	5078784	Callee	amazon_proxy_user . find		5078636	0					
ANR	5078785	MemberAccess	amazon_proxy_user . find		5078636	0					
ANR	5078786	Identifier	amazon_proxy_user		5078636	0					
ANR	5078787	Identifier	find		5078636	1					
ANR	5078788	ArgumentList	':'		5078636	1					
ANR	5078789	Argument	':'		5078636	0					
ANR	5078790	PrimaryExpression	':'		5078636	0					
ANR	5078791	IfStatement	if ( std :: string :: npos != pos )		5078636	3					
ANR	5078792	Condition	std :: string :: npos != pos	64:7:2152:2175	5078636	0	True				
ANR	5078793	EqualityExpression	std :: string :: npos != pos		5078636	0		!=			
ANR	5078794	Identifier	std :: string :: npos		5078636	0					
ANR	5078795	Identifier	pos		5078636	1					
ANR	5078796	CompoundStatement		29:34:917:917	5078636	1					
ANR	5078797	ExpressionStatement	"amazon_proxy_passwd = amazon_proxy_user . substr ( pos + 1 , amazon_proxy_user . length ( ) )"	65:2:2183:2269	5078636	0	True				
ANR	5078798	AssignmentExpression	"amazon_proxy_passwd = amazon_proxy_user . substr ( pos + 1 , amazon_proxy_user . length ( ) )"		5078636	0		=			
ANR	5078799	Identifier	amazon_proxy_passwd		5078636	0					
ANR	5078800	CallExpression	"amazon_proxy_user . substr ( pos + 1 , amazon_proxy_user . length ( ) )"		5078636	1					
ANR	5078801	Callee	amazon_proxy_user . substr		5078636	0					
ANR	5078802	MemberAccess	amazon_proxy_user . substr		5078636	0					
ANR	5078803	Identifier	amazon_proxy_user		5078636	0					
ANR	5078804	Identifier	substr		5078636	1					
ANR	5078805	ArgumentList	pos + 1		5078636	1					
ANR	5078806	Argument	pos + 1		5078636	0					
ANR	5078807	AdditiveExpression	pos + 1		5078636	0		+			
ANR	5078808	Identifier	pos		5078636	0					
ANR	5078809	PrimaryExpression	1		5078636	1					
ANR	5078810	Argument	amazon_proxy_user . length ( )		5078636	1					
ANR	5078811	CallExpression	amazon_proxy_user . length ( )		5078636	0					
ANR	5078812	Callee	amazon_proxy_user . length		5078636	0					
ANR	5078813	MemberAccess	amazon_proxy_user . length		5078636	0					
ANR	5078814	Identifier	amazon_proxy_user		5078636	0					
ANR	5078815	Identifier	length		5078636	1					
ANR	5078816	ArgumentList			5078636	1					
ANR	5078817	ExpressionStatement	"amazon_proxy_user = amazon_proxy_user . substr ( 0 , pos )"	67:2:2273:2325	5078636	1	True				
ANR	5078818	AssignmentExpression	"amazon_proxy_user = amazon_proxy_user . substr ( 0 , pos )"		5078636	0		=			
ANR	5078819	Identifier	amazon_proxy_user		5078636	0					
ANR	5078820	CallExpression	"amazon_proxy_user . substr ( 0 , pos )"		5078636	1					
ANR	5078821	Callee	amazon_proxy_user . substr		5078636	0					
ANR	5078822	MemberAccess	amazon_proxy_user . substr		5078636	0					
ANR	5078823	Identifier	amazon_proxy_user		5078636	0					
ANR	5078824	Identifier	substr		5078636	1					
ANR	5078825	ArgumentList	0		5078636	1					
ANR	5078826	Argument	0		5078636	0					
ANR	5078827	PrimaryExpression	0		5078636	0					
ANR	5078828	Argument	pos		5078636	1					
ANR	5078829	Identifier	pos		5078636	0					
ANR	5078830	ExpressionStatement	pos = amazon_proxy_host . find ( ':' )	71:4:2340:2373	5078636	4	True				
ANR	5078831	AssignmentExpression	pos = amazon_proxy_host . find ( ':' )		5078636	0		=			
ANR	5078832	Identifier	pos		5078636	0					
ANR	5078833	CallExpression	amazon_proxy_host . find ( ':' )		5078636	1					
ANR	5078834	Callee	amazon_proxy_host . find		5078636	0					
ANR	5078835	MemberAccess	amazon_proxy_host . find		5078636	0					
ANR	5078836	Identifier	amazon_proxy_host		5078636	0					
ANR	5078837	Identifier	find		5078636	1					
ANR	5078838	ArgumentList	':'		5078636	1					
ANR	5078839	Argument	':'		5078636	0					
ANR	5078840	PrimaryExpression	':'		5078636	0					
ANR	5078841	IfStatement	if ( std :: string :: npos != pos )		5078636	5					
ANR	5078842	Condition	std :: string :: npos != pos	72:5:2380:2403	5078636	0	True				
ANR	5078843	EqualityExpression	std :: string :: npos != pos		5078636	0		!=			
ANR	5078844	Identifier	std :: string :: npos		5078636	0					
ANR	5078845	Identifier	pos		5078636	1					
ANR	5078846	CompoundStatement		38:2:1149:1250	5078636	1					
ANR	5078847	IdentifierDeclStatement	"int port = atoi ( amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str ( ) ) ;"	73:2:2411:2512	5078636	0	True				
ANR	5078848	IdentifierDecl	"port = atoi ( amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str ( ) )"		5078636	0					
ANR	5078849	IdentifierDeclType	int		5078636	0					
ANR	5078850	Identifier	port		5078636	1					
ANR	5078851	AssignmentExpression	"port = atoi ( amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str ( ) )"		5078636	2		=			
ANR	5078852	Identifier	port		5078636	0					
ANR	5078853	CallExpression	"atoi ( amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str ( ) )"		5078636	1					
ANR	5078854	Callee	atoi		5078636	0					
ANR	5078855	Identifier	atoi		5078636	0					
ANR	5078856	ArgumentList	"amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str ( )"		5078636	1					
ANR	5078857	Argument	"amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str ( )"		5078636	0					
ANR	5078858	CallExpression	"amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str ( )"		5078636	0					
ANR	5078859	Callee	"amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str"		5078636	0					
ANR	5078860	MemberAccess	"amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str"		5078636	0					
ANR	5078861	CallExpression	"amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) )"		5078636	0					
ANR	5078862	Callee	amazon_proxy_host . substr		5078636	0					
ANR	5078863	MemberAccess	amazon_proxy_host . substr		5078636	0					
ANR	5078864	Identifier	amazon_proxy_host		5078636	0					
ANR	5078865	Identifier	substr		5078636	1					
ANR	5078866	ArgumentList	pos + 1		5078636	1					
ANR	5078867	Argument	pos + 1		5078636	0					
ANR	5078868	AdditiveExpression	pos + 1		5078636	0		+			
ANR	5078869	Identifier	pos		5078636	0					
ANR	5078870	PrimaryExpression	1		5078636	1					
ANR	5078871	Argument	amazon_proxy_host . length ( )		5078636	1					
ANR	5078872	CallExpression	amazon_proxy_host . length ( )		5078636	0					
ANR	5078873	Callee	amazon_proxy_host . length		5078636	0					
ANR	5078874	MemberAccess	amazon_proxy_host . length		5078636	0					
ANR	5078875	Identifier	amazon_proxy_host		5078636	0					
ANR	5078876	Identifier	length		5078636	1					
ANR	5078877	ArgumentList			5078636	1					
ANR	5078878	Identifier	c_str		5078636	1					
ANR	5078879	ArgumentList			5078636	1					
ANR	5078880	IfStatement	if ( port > 0 )		5078636	1					
ANR	5078881	Condition	port > 0	77:6:2521:2528	5078636	0	True				
ANR	5078882	RelationalExpression	port > 0		5078636	0		>			
ANR	5078883	Identifier	port		5078636	0					
ANR	5078884	PrimaryExpression	0		5078636	1					
ANR	5078885	CompoundStatement		42:17:1270:1270	5078636	1					
ANR	5078886	ExpressionStatement	amazon_proxy_port = port	78:3:2537:2561	5078636	0	True				
ANR	5078887	AssignmentExpression	amazon_proxy_port = port		5078636	0		=			
ANR	5078888	Identifier	amazon_proxy_port		5078636	0					
ANR	5078889	Identifier	port		5078636	1					
ANR	5078890	ExpressionStatement	"amazon_proxy_host = amazon_proxy_host . substr ( 0 , pos )"	81:2:2570:2622	5078636	2	True				
ANR	5078891	AssignmentExpression	"amazon_proxy_host = amazon_proxy_host . substr ( 0 , pos )"		5078636	0		=			
ANR	5078892	Identifier	amazon_proxy_host		5078636	0					
ANR	5078893	CallExpression	"amazon_proxy_host . substr ( 0 , pos )"		5078636	1					
ANR	5078894	Callee	amazon_proxy_host . substr		5078636	0					
ANR	5078895	MemberAccess	amazon_proxy_host . substr		5078636	0					
ANR	5078896	Identifier	amazon_proxy_host		5078636	0					
ANR	5078897	Identifier	substr		5078636	1					
ANR	5078898	ArgumentList	0		5078636	1					
ANR	5078899	Argument	0		5078636	0					
ANR	5078900	PrimaryExpression	0		5078636	0					
ANR	5078901	Argument	pos		5078636	1					
ANR	5078902	Identifier	pos		5078636	0					
ANR	5078903	ExpressionStatement	"dprintf ( D_ALWAYS , ""Using proxy server, host=%s, port=%d user=%s\\n"" , amazon_proxy_host . c_str ( ) , amazon_proxy_port , amazon_proxy_user . c_str ( ) )"	84:1:2638:2784	5078636	6	True				
ANR	5078904	CallExpression	"dprintf ( D_ALWAYS , ""Using proxy server, host=%s, port=%d user=%s\\n"" , amazon_proxy_host . c_str ( ) , amazon_proxy_port , amazon_proxy_user . c_str ( ) )"		5078636	0					
ANR	5078905	Callee	dprintf		5078636	0					
ANR	5078906	Identifier	dprintf		5078636	0					
ANR	5078907	ArgumentList	D_ALWAYS		5078636	1					
ANR	5078908	Argument	D_ALWAYS		5078636	0					
ANR	5078909	Identifier	D_ALWAYS		5078636	0					
ANR	5078910	Argument	"""Using proxy server, host=%s, port=%d user=%s\\n"""		5078636	1					
ANR	5078911	PrimaryExpression	"""Using proxy server, host=%s, port=%d user=%s\\n"""		5078636	0					
ANR	5078912	Argument	amazon_proxy_host . c_str ( )		5078636	2					
ANR	5078913	CallExpression	amazon_proxy_host . c_str ( )		5078636	0					
ANR	5078914	Callee	amazon_proxy_host . c_str		5078636	0					
ANR	5078915	MemberAccess	amazon_proxy_host . c_str		5078636	0					
ANR	5078916	Identifier	amazon_proxy_host		5078636	0					
ANR	5078917	Identifier	c_str		5078636	1					
ANR	5078918	ArgumentList			5078636	1					
ANR	5078919	Argument	amazon_proxy_port		5078636	3					
ANR	5078920	Identifier	amazon_proxy_port		5078636	0					
ANR	5078921	Argument	amazon_proxy_user . c_str ( )		5078636	4					
ANR	5078922	CallExpression	amazon_proxy_user . c_str ( )		5078636	0					
ANR	5078923	Callee	amazon_proxy_user . c_str		5078636	0					
ANR	5078924	MemberAccess	amazon_proxy_user . c_str		5078636	0					
ANR	5078925	Identifier	amazon_proxy_user		5078636	0					
ANR	5078926	Identifier	c_str		5078636	1					
ANR	5078927	ArgumentList			5078636	1					
ANR	5078928	ReturnType	void		5078636	1					
ANR	5078929	Identifier	set_amazon_proxy_server		5078636	2					
ANR	5078930	ParameterList	const char * url		5078636	3					
ANR	5078931	Parameter	const char * url	35:29:1243:1257	5078636	0	True				
ANR	5078932	ParameterType	const char *		5078636	0					
ANR	5078933	Identifier	url		5078636	1					
ANR	5078934	CFGEntryNode	ENTRY		5078636		True				
ANR	5078935	CFGExitNode	EXIT		5078636		True				
ANR	5078936	Symbol	atoi		5078636						
ANR	5078937	Symbol	strncasecmp		5078636						
ANR	5078938	Symbol	amazon_proxy_passwd		5078636						
ANR	5078939	Symbol	D_ALWAYS		5078636						
ANR	5078940	Symbol	amazon_proxy_port		5078636						
ANR	5078941	Symbol	amazon_proxy_user . length		5078636						
ANR	5078942	Symbol	amazon_proxy_user . c_str		5078636						
ANR	5078943	Symbol	url		5078636						
ANR	5078944	Symbol	amazon_proxy_host . substr		5078636						
ANR	5078945	Symbol	strlen		5078636						
ANR	5078946	Symbol	std :: string :: npos		5078636						
ANR	5078947	Symbol	amazon_proxy_user		5078636						
ANR	5078948	Symbol	amazon_proxy_host . find		5078636						
ANR	5078949	Symbol	amazon_proxy_user . find		5078636						
ANR	5078950	Symbol	"amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str"		5078636						
ANR	5078951	Symbol	amazon_proxy_host		5078636						
ANR	5078952	Symbol	pos		5078636						
ANR	5078953	Symbol	amazon_proxy_host . length		5078636						
ANR	5078954	Symbol	amazon_proxy_user . substr		5078636						
ANR	5078955	Symbol	port		5078636						
ANR	5078956	Symbol	amazon_proxy_host . c_str		5078636						
ANR	5078957	Function	get_amazon_proxy_server	89:0:2789:3129							
ANR	5078958	FunctionDef	"get_amazon_proxy_server (const char * & host_name , int & port , const char * & user_name , const char * & passwd)"		5078957	0					
ANR	5078959	CompoundStatement		90:0:2899:3129	5078957	0					
ANR	5078960	IfStatement	if ( amazon_proxy_host . empty ( ) == false )		5078957	0					
ANR	5078961	Condition	amazon_proxy_host . empty ( ) == false	91:5:2906:2939	5078957	0	True				
ANR	5078962	EqualityExpression	amazon_proxy_host . empty ( ) == false		5078957	0		==			
ANR	5078963	CallExpression	amazon_proxy_host . empty ( )		5078957	0					
ANR	5078964	Callee	amazon_proxy_host . empty		5078957	0					
ANR	5078965	MemberAccess	amazon_proxy_host . empty		5078957	0					
ANR	5078966	Identifier	amazon_proxy_host		5078957	0					
ANR	5078967	Identifier	empty		5078957	1					
ANR	5078968	ArgumentList			5078957	1					
ANR	5078969	Identifier	false		5078957	1					
ANR	5078970	CompoundStatement		2:42:43:43	5078957	1					
ANR	5078971	ExpressionStatement	host_name = amazon_proxy_host . c_str ( )	92:2:2947:2984	5078957	0	True				
ANR	5078972	AssignmentExpression	host_name = amazon_proxy_host . c_str ( )		5078957	0		=			
ANR	5078973	Identifier	host_name		5078957	0					
ANR	5078974	CallExpression	amazon_proxy_host . c_str ( )		5078957	1					
ANR	5078975	Callee	amazon_proxy_host . c_str		5078957	0					
ANR	5078976	MemberAccess	amazon_proxy_host . c_str		5078957	0					
ANR	5078977	Identifier	amazon_proxy_host		5078957	0					
ANR	5078978	Identifier	c_str		5078957	1					
ANR	5078979	ArgumentList			5078957	1					
ANR	5078980	ExpressionStatement	port = amazon_proxy_port	93:2:2988:3012	5078957	1	True				
ANR	5078981	AssignmentExpression	port = amazon_proxy_port		5078957	0		=			
ANR	5078982	Identifier	port		5078957	0					
ANR	5078983	Identifier	amazon_proxy_port		5078957	1					
ANR	5078984	ExpressionStatement	user_name = amazon_proxy_user . c_str ( )	94:2:3016:3053	5078957	2	True				
ANR	5078985	AssignmentExpression	user_name = amazon_proxy_user . c_str ( )		5078957	0		=			
ANR	5078986	Identifier	user_name		5078957	0					
ANR	5078987	CallExpression	amazon_proxy_user . c_str ( )		5078957	1					
ANR	5078988	Callee	amazon_proxy_user . c_str		5078957	0					
ANR	5078989	MemberAccess	amazon_proxy_user . c_str		5078957	0					
ANR	5078990	Identifier	amazon_proxy_user		5078957	0					
ANR	5078991	Identifier	c_str		5078957	1					
ANR	5078992	ArgumentList			5078957	1					
ANR	5078993	ExpressionStatement	passwd = amazon_proxy_passwd . c_str ( )	95:2:3057:3093	5078957	3	True				
ANR	5078994	AssignmentExpression	passwd = amazon_proxy_passwd . c_str ( )		5078957	0		=			
ANR	5078995	Identifier	passwd		5078957	0					
ANR	5078996	CallExpression	amazon_proxy_passwd . c_str ( )		5078957	1					
ANR	5078997	Callee	amazon_proxy_passwd . c_str		5078957	0					
ANR	5078998	MemberAccess	amazon_proxy_passwd . c_str		5078957	0					
ANR	5078999	Identifier	amazon_proxy_passwd		5078957	0					
ANR	5079000	Identifier	c_str		5078957	1					
ANR	5079001	ArgumentList			5078957	1					
ANR	5079002	ReturnStatement	return true ;	96:2:3097:3108	5078957	4	True				
ANR	5079003	Identifier	true		5078957	0					
ANR	5079004	ReturnStatement	return false ;	99:1:3115:3127	5078957	1	True				
ANR	5079005	Identifier	false		5078957	0					
ANR	5079006	ReturnType	bool		5078957	1					
ANR	5079007	Identifier	get_amazon_proxy_server		5078957	2					
ANR	5079008	ParameterList	"const char * & host_name , int & port , const char * & user_name , const char * & passwd"		5078957	3					
ANR	5079009	Parameter	const char * & host_name	89:29:2818:2839	5078957	0	True				
ANR	5079010	ParameterType	const char * &		5078957	0					
ANR	5079011	Identifier	host_name		5078957	1					
ANR	5079012	Parameter	int & port	89:53:2842:2850	5078957	1	True				
ANR	5079013	ParameterType	int &		5078957	0					
ANR	5079014	Identifier	port		5078957	1					
ANR	5079015	Parameter	const char * & user_name	89:64:2853:2874	5078957	2	True				
ANR	5079016	ParameterType	const char * &		5078957	0					
ANR	5079017	Identifier	user_name		5078957	1					
ANR	5079018	Parameter	const char * & passwd	89:88:2877:2895	5078957	3	True				
ANR	5079019	ParameterType	const char * &		5078957	0					
ANR	5079020	Identifier	passwd		5078957	1					
ANR	5079021	CFGEntryNode	ENTRY		5078957		True				
ANR	5079022	CFGExitNode	EXIT		5078957		True				
ANR	5079023	Symbol	amazon_proxy_host . empty		5078957						
ANR	5079024	Symbol	amazon_proxy_passwd . c_str		5078957						
ANR	5079025	Symbol	user_name		5078957						
ANR	5079026	Symbol	false		5078957						
ANR	5079027	Symbol	amazon_proxy_passwd		5078957						
ANR	5079028	Symbol	amazon_proxy_port		5078957						
ANR	5079029	Symbol	amazon_proxy_user . c_str		5078957						
ANR	5079030	Symbol	amazon_proxy_user		5078957						
ANR	5079031	Symbol	amazon_proxy_host		5078957						
ANR	5079032	Symbol	port		5078957						
ANR	5079033	Symbol	passwd		5078957						
ANR	5079034	Symbol	true		5078957						
ANR	5079035	Symbol	amazon_proxy_host . c_str		5078957						
ANR	5079036	Symbol	host_name		5078957						
ANR	5079037	Function	AmazonGahpCommand :: AmazonGahpCommand	102:0:3132:3300							
ANR	5079038	FunctionDef	"AmazonGahpCommand :: AmazonGahpCommand (const char * cmd , ioCheckfn iofunc , workerfn workerfunc)"		5079037	0					
ANR	5079039	CompoundStatement		103:0:3225:3300	5079037	0					
ANR	5079040	ExpressionStatement	command = cmd	104:1:3228:3241	5079037	0	True				
ANR	5079041	AssignmentExpression	command = cmd		5079037	0		=			
ANR	5079042	Identifier	command		5079037	0					
ANR	5079043	Identifier	cmd		5079037	1					
ANR	5079044	ExpressionStatement	iocheckfunction = iofunc	105:1:3244:3268	5079037	1	True				
ANR	5079045	AssignmentExpression	iocheckfunction = iofunc		5079037	0		=			
ANR	5079046	Identifier	iocheckfunction		5079037	0					
ANR	5079047	Identifier	iofunc		5079037	1					
ANR	5079048	ExpressionStatement	workerfunction = workerfunc	106:1:3271:3298	5079037	2	True				
ANR	5079049	AssignmentExpression	workerfunction = workerfunc		5079037	0		=			
ANR	5079050	Identifier	workerfunction		5079037	0					
ANR	5079051	Identifier	workerfunc		5079037	1					
ANR	5079052	Identifier	AmazonGahpCommand :: AmazonGahpCommand		5079037	1					
ANR	5079053	ParameterList	"const char * cmd , ioCheckfn iofunc , workerfn workerfunc"		5079037	2					
ANR	5079054	Parameter	const char * cmd	102:37:3169:3183	5079037	0	True				
ANR	5079055	ParameterType	const char *		5079037	0					
ANR	5079056	Identifier	cmd		5079037	1					
ANR	5079057	Parameter	ioCheckfn iofunc	102:54:3186:3201	5079037	1	True				
ANR	5079058	ParameterType	ioCheckfn		5079037	0					
ANR	5079059	Identifier	iofunc		5079037	1					
ANR	5079060	Parameter	workerfn workerfunc	102:72:3204:3222	5079037	2	True				
ANR	5079061	ParameterType	workerfn		5079037	0					
ANR	5079062	Identifier	workerfunc		5079037	1					
ANR	5079063	CFGEntryNode	ENTRY		5079037		True				
ANR	5079064	CFGExitNode	EXIT		5079037		True				
ANR	5079065	Symbol	iocheckfunction		5079037						
ANR	5079066	Symbol	workerfunc		5079037						
ANR	5079067	Symbol	iofunc		5079037						
ANR	5079068	Symbol	cmd		5079037						
ANR	5079069	Symbol	workerfunction		5079037						
ANR	5079070	Symbol	command		5079037						
ANR	5079071	Function	registerAmazonGahpCommand	109:0:3303:3577							
ANR	5079072	FunctionDef	"registerAmazonGahpCommand (const char * command , ioCheckfn iofunc , workerfn workerfunc)"		5079071	0					
ANR	5079073	CompoundStatement		111:0:3394:3577	5079071	0					
ANR	5079074	IfStatement	if ( ! command )		5079071	0					
ANR	5079075	Condition	! command	112:5:3401:3408	5079071	0	True				
ANR	5079076	UnaryOperationExpression	! command		5079071	0					
ANR	5079077	UnaryOperator	!		5079071	0					
ANR	5079078	Identifier	command		5079071	1					
ANR	5079079	CompoundStatement		2:16:17:17	5079071	1					
ANR	5079080	ReturnStatement	return ;	113:2:3416:3422	5079071	0	True				
ANR	5079081	IdentifierDeclStatement	"AmazonGahpCommand * newcommand = new AmazonGahpCommand ( command , iofunc , workerfunc ) ;"	116:1:3429:3511	5079071	1	True				
ANR	5079082	IdentifierDecl	"* newcommand = new AmazonGahpCommand ( command , iofunc , workerfunc )"		5079071	0					
ANR	5079083	IdentifierDeclType	AmazonGahpCommand *		5079071	0					
ANR	5079084	Identifier	newcommand		5079071	1					
ANR	5079085	AssignmentExpression	"* newcommand = new AmazonGahpCommand ( command , iofunc , workerfunc )"		5079071	2		=			
ANR	5079086	Identifier	newcommand		5079071	0					
ANR	5079087	Expression	"command , iofunc , workerfunc"		5079071	1					
ANR	5079088	Identifier	command		5079071	0					
ANR	5079089	Expression	"iofunc , workerfunc"		5079071	1					
ANR	5079090	Identifier	iofunc		5079071	0					
ANR	5079091	Identifier	workerfunc		5079071	1					
ANR	5079092	ExpressionStatement	ASSERT ( newcommand )	117:1:3514:3532	5079071	2	True				
ANR	5079093	CallExpression	ASSERT ( newcommand )		5079071	0					
ANR	5079094	Callee	ASSERT		5079071	0					
ANR	5079095	Identifier	ASSERT		5079071	0					
ANR	5079096	ArgumentList	newcommand		5079071	1					
ANR	5079097	Argument	newcommand		5079071	0					
ANR	5079098	Identifier	newcommand		5079071	0					
ANR	5079099	ExpressionStatement	amazon_gahp_commands . Append ( newcommand )	119:1:3536:3575	5079071	3	True				
ANR	5079100	CallExpression	amazon_gahp_commands . Append ( newcommand )		5079071	0					
ANR	5079101	Callee	amazon_gahp_commands . Append		5079071	0					
ANR	5079102	MemberAccess	amazon_gahp_commands . Append		5079071	0					
ANR	5079103	Identifier	amazon_gahp_commands		5079071	0					
ANR	5079104	Identifier	Append		5079071	1					
ANR	5079105	ArgumentList	newcommand		5079071	1					
ANR	5079106	Argument	newcommand		5079071	0					
ANR	5079107	Identifier	newcommand		5079071	0					
ANR	5079108	ReturnType	void		5079071	1					
ANR	5079109	Identifier	registerAmazonGahpCommand		5079071	2					
ANR	5079110	ParameterList	"const char * command , ioCheckfn iofunc , workerfn workerfunc"		5079071	3					
ANR	5079111	Parameter	const char * command	110:26:3334:3352	5079071	0	True				
ANR	5079112	ParameterType	const char *		5079071	0					
ANR	5079113	Identifier	command		5079071	1					
ANR	5079114	Parameter	ioCheckfn iofunc	110:47:3355:3370	5079071	1	True				
ANR	5079115	ParameterType	ioCheckfn		5079071	0					
ANR	5079116	Identifier	iofunc		5079071	1					
ANR	5079117	Parameter	workerfn workerfunc	110:65:3373:3391	5079071	2	True				
ANR	5079118	ParameterType	workerfn		5079071	0					
ANR	5079119	Identifier	workerfunc		5079071	1					
ANR	5079120	CFGEntryNode	ENTRY		5079071		True				
ANR	5079121	CFGExitNode	EXIT		5079071		True				
ANR	5079122	Symbol	workerfunc		5079071						
ANR	5079123	Symbol	iofunc		5079071						
ANR	5079124	Symbol	amazon_gahp_commands		5079071						
ANR	5079125	Symbol	newcommand		5079071						
ANR	5079126	Symbol	command		5079071						
ANR	5079127	Function	numofAmazonCommands	122:0:3580:3651							
ANR	5079128	FunctionDef	numofAmazonCommands ()		5079127	0					
ANR	5079129	CompoundStatement		124:0:3610:3651	5079127	0					
ANR	5079130	ReturnStatement	return amazon_gahp_commands . Number ( ) ;	125:1:3613:3649	5079127	0	True				
ANR	5079131	CallExpression	amazon_gahp_commands . Number ( )		5079127	0					
ANR	5079132	Callee	amazon_gahp_commands . Number		5079127	0					
ANR	5079133	MemberAccess	amazon_gahp_commands . Number		5079127	0					
ANR	5079134	Identifier	amazon_gahp_commands		5079127	0					
ANR	5079135	Identifier	Number		5079127	1					
ANR	5079136	ArgumentList			5079127	1					
ANR	5079137	ReturnType	int		5079127	1					
ANR	5079138	Identifier	numofAmazonCommands		5079127	2					
ANR	5079139	ParameterList			5079127	3					
ANR	5079140	CFGEntryNode	ENTRY		5079127		True				
ANR	5079141	CFGExitNode	EXIT		5079127		True				
ANR	5079142	Symbol	amazon_gahp_commands		5079127						
ANR	5079143	Symbol	amazon_gahp_commands . Number		5079127						
ANR	5079144	Function	allAmazonCommands	128:0:3654:3901							
ANR	5079145	FunctionDef	allAmazonCommands (StringList & output)		5079144	0					
ANR	5079146	CompoundStatement		130:0:3697:3901	5079144	0					
ANR	5079147	IdentifierDeclStatement	AmazonGahpCommand * one_cmd = NULL ;	131:1:3700:3733	5079144	0	True				
ANR	5079148	IdentifierDecl	* one_cmd = NULL		5079144	0					
ANR	5079149	IdentifierDeclType	AmazonGahpCommand *		5079144	0					
ANR	5079150	Identifier	one_cmd		5079144	1					
ANR	5079151	AssignmentExpression	* one_cmd = NULL		5079144	2		=			
ANR	5079152	Identifier	NULL		5079144	0					
ANR	5079153	Identifier	NULL		5079144	1					
ANR	5079154	ExpressionStatement	amazon_gahp_commands . Rewind ( )	133:1:3737:3766	5079144	1	True				
ANR	5079155	CallExpression	amazon_gahp_commands . Rewind ( )		5079144	0					
ANR	5079156	Callee	amazon_gahp_commands . Rewind		5079144	0					
ANR	5079157	MemberAccess	amazon_gahp_commands . Rewind		5079144	0					
ANR	5079158	Identifier	amazon_gahp_commands		5079144	0					
ANR	5079159	Identifier	Rewind		5079144	1					
ANR	5079160	ArgumentList			5079144	1					
ANR	5079161	WhileStatement	while ( amazon_gahp_commands . Next ( one_cmd ) )		5079144	2					
ANR	5079162	Condition	amazon_gahp_commands . Next ( one_cmd )	134:8:3776:3809	5079144	0	True				
ANR	5079163	CallExpression	amazon_gahp_commands . Next ( one_cmd )		5079144	0					
ANR	5079164	Callee	amazon_gahp_commands . Next		5079144	0					
ANR	5079165	MemberAccess	amazon_gahp_commands . Next		5079144	0					
ANR	5079166	Identifier	amazon_gahp_commands		5079144	0					
ANR	5079167	Identifier	Next		5079144	1					
ANR	5079168	ArgumentList	one_cmd		5079144	1					
ANR	5079169	Argument	one_cmd		5079144	0					
ANR	5079170	Identifier	one_cmd		5079144	0					
ANR	5079171	CompoundStatement		5:45:115:115	5079144	1					
ANR	5079172	ExpressionStatement	output . append ( one_cmd -> command . c_str ( ) )	135:2:3817:3856	5079144	0	True				
ANR	5079173	CallExpression	output . append ( one_cmd -> command . c_str ( ) )		5079144	0					
ANR	5079174	Callee	output . append		5079144	0					
ANR	5079175	MemberAccess	output . append		5079144	0					
ANR	5079176	Identifier	output		5079144	0					
ANR	5079177	Identifier	append		5079144	1					
ANR	5079178	ArgumentList	one_cmd -> command . c_str ( )		5079144	1					
ANR	5079179	Argument	one_cmd -> command . c_str ( )		5079144	0					
ANR	5079180	CallExpression	one_cmd -> command . c_str ( )		5079144	0					
ANR	5079181	Callee	one_cmd -> command . c_str		5079144	0					
ANR	5079182	MemberAccess	one_cmd -> command . c_str		5079144	0					
ANR	5079183	PtrMemberAccess	one_cmd -> command		5079144	0					
ANR	5079184	Identifier	one_cmd		5079144	0					
ANR	5079185	Identifier	command		5079144	1					
ANR	5079186	Identifier	c_str		5079144	1					
ANR	5079187	ArgumentList			5079144	1					
ANR	5079188	ReturnStatement	return amazon_gahp_commands . Number ( ) ;	138:1:3863:3899	5079144	3	True				
ANR	5079189	CallExpression	amazon_gahp_commands . Number ( )		5079144	0					
ANR	5079190	Callee	amazon_gahp_commands . Number		5079144	0					
ANR	5079191	MemberAccess	amazon_gahp_commands . Number		5079144	0					
ANR	5079192	Identifier	amazon_gahp_commands		5079144	0					
ANR	5079193	Identifier	Number		5079144	1					
ANR	5079194	ArgumentList			5079144	1					
ANR	5079195	ReturnType	int		5079144	1					
ANR	5079196	Identifier	allAmazonCommands		5079144	2					
ANR	5079197	ParameterList	StringList & output		5079144	3					
ANR	5079198	Parameter	StringList & output	129:18:3677:3694	5079144	0	True				
ANR	5079199	ParameterType	StringList &		5079144	0					
ANR	5079200	Identifier	output		5079144	1					
ANR	5079201	CFGEntryNode	ENTRY		5079144		True				
ANR	5079202	CFGExitNode	EXIT		5079144		True				
ANR	5079203	Symbol	output		5079144						
ANR	5079204	Symbol	NULL		5079144						
ANR	5079205	Symbol	amazon_gahp_commands		5079144						
ANR	5079206	Symbol	one_cmd -> command		5079144						
ANR	5079207	Symbol	amazon_gahp_commands . Number		5079144						
ANR	5079208	Symbol	one_cmd		5079144						
ANR	5079209	Symbol	amazon_gahp_commands . Next		5079144						
ANR	5079210	Symbol	one_cmd -> command . c_str		5079144						
ANR	5079211	Symbol	* one_cmd		5079144						
ANR	5079212	Function	executeIOCheckFunc	141:0:3904:4325							
ANR	5079213	FunctionDef	"executeIOCheckFunc (const char * cmd , char * * argv , int argc)"		5079212	0					
ANR	5079214	CompoundStatement		143:0:3968:4325	5079212	0					
ANR	5079215	IfStatement	if ( ! cmd )		5079212	0					
ANR	5079216	Condition	! cmd	144:4:3974:3977	5079212	0	True				
ANR	5079217	UnaryOperationExpression	! cmd		5079212	0					
ANR	5079218	UnaryOperator	!		5079212	0					
ANR	5079219	Identifier	cmd		5079212	1					
ANR	5079220	CompoundStatement		2:10:11:11	5079212	1					
ANR	5079221	ReturnStatement	return false ;	145:2:3984:3996	5079212	0	True				
ANR	5079222	Identifier	false		5079212	0					
ANR	5079223	IdentifierDeclStatement	AmazonGahpCommand * one_cmd = NULL ;	148:1:4003:4036	5079212	1	True				
ANR	5079224	IdentifierDecl	* one_cmd = NULL		5079212	0					
ANR	5079225	IdentifierDeclType	AmazonGahpCommand *		5079212	0					
ANR	5079226	Identifier	one_cmd		5079212	1					
ANR	5079227	AssignmentExpression	* one_cmd = NULL		5079212	2		=			
ANR	5079228	Identifier	NULL		5079212	0					
ANR	5079229	Identifier	NULL		5079212	1					
ANR	5079230	ExpressionStatement	amazon_gahp_commands . Rewind ( )	150:1:4040:4069	5079212	2	True				
ANR	5079231	CallExpression	amazon_gahp_commands . Rewind ( )		5079212	0					
ANR	5079232	Callee	amazon_gahp_commands . Rewind		5079212	0					
ANR	5079233	MemberAccess	amazon_gahp_commands . Rewind		5079212	0					
ANR	5079234	Identifier	amazon_gahp_commands		5079212	0					
ANR	5079235	Identifier	Rewind		5079212	1					
ANR	5079236	ArgumentList			5079212	1					
ANR	5079237	WhileStatement	while ( amazon_gahp_commands . Next ( one_cmd ) )		5079212	3					
ANR	5079238	Condition	amazon_gahp_commands . Next ( one_cmd )	151:8:4079:4112	5079212	0	True				
ANR	5079239	CallExpression	amazon_gahp_commands . Next ( one_cmd )		5079212	0					
ANR	5079240	Callee	amazon_gahp_commands . Next		5079212	0					
ANR	5079241	MemberAccess	amazon_gahp_commands . Next		5079212	0					
ANR	5079242	Identifier	amazon_gahp_commands		5079212	0					
ANR	5079243	Identifier	Next		5079212	1					
ANR	5079244	ArgumentList	one_cmd		5079212	1					
ANR	5079245	Argument	one_cmd		5079212	0					
ANR	5079246	Identifier	one_cmd		5079212	0					
ANR	5079247	CompoundStatement		9:45:147:147	5079212	1					
ANR	5079248	IfStatement	"if ( ! strcasecmp ( one_cmd -> command . c_str ( ) , cmd ) && one_cmd -> iocheckfunction )"		5079212	0					
ANR	5079249	Condition	"! strcasecmp ( one_cmd -> command . c_str ( ) , cmd ) && one_cmd -> iocheckfunction"	152:6:4124:4198	5079212	0	True				
ANR	5079250	AndExpression	"! strcasecmp ( one_cmd -> command . c_str ( ) , cmd ) && one_cmd -> iocheckfunction"		5079212	0		&&			
ANR	5079251	UnaryOperationExpression	"! strcasecmp ( one_cmd -> command . c_str ( ) , cmd )"		5079212	0					
ANR	5079252	UnaryOperator	!		5079212	0					
ANR	5079253	CallExpression	"strcasecmp ( one_cmd -> command . c_str ( ) , cmd )"		5079212	1					
ANR	5079254	Callee	strcasecmp		5079212	0					
ANR	5079255	Identifier	strcasecmp		5079212	0					
ANR	5079256	ArgumentList	one_cmd -> command . c_str ( )		5079212	1					
ANR	5079257	Argument	one_cmd -> command . c_str ( )		5079212	0					
ANR	5079258	CallExpression	one_cmd -> command . c_str ( )		5079212	0					
ANR	5079259	Callee	one_cmd -> command . c_str		5079212	0					
ANR	5079260	MemberAccess	one_cmd -> command . c_str		5079212	0					
ANR	5079261	PtrMemberAccess	one_cmd -> command		5079212	0					
ANR	5079262	Identifier	one_cmd		5079212	0					
ANR	5079263	Identifier	command		5079212	1					
ANR	5079264	Identifier	c_str		5079212	1					
ANR	5079265	ArgumentList			5079212	1					
ANR	5079266	Argument	cmd		5079212	1					
ANR	5079267	Identifier	cmd		5079212	0					
ANR	5079268	PtrMemberAccess	one_cmd -> iocheckfunction		5079212	1					
ANR	5079269	Identifier	one_cmd		5079212	0					
ANR	5079270	Identifier	iocheckfunction		5079212	1					
ANR	5079271	CompoundStatement		11:31:233:233	5079212	1					
ANR	5079272	ReturnStatement	"return one_cmd -> iocheckfunction ( argv , argc ) ;"	154:3:4207:4250	5079212	0	True				
ANR	5079273	CallExpression	"one_cmd -> iocheckfunction ( argv , argc )"		5079212	0					
ANR	5079274	Callee	one_cmd -> iocheckfunction		5079212	0					
ANR	5079275	PtrMemberAccess	one_cmd -> iocheckfunction		5079212	0					
ANR	5079276	Identifier	one_cmd		5079212	0					
ANR	5079277	Identifier	iocheckfunction		5079212	1					
ANR	5079278	ArgumentList	argv		5079212	1					
ANR	5079279	Argument	argv		5079212	0					
ANR	5079280	Identifier	argv		5079212	0					
ANR	5079281	Argument	argc		5079212	1					
ANR	5079282	Identifier	argc		5079212	0					
ANR	5079283	ExpressionStatement	"dprintf ( D_ALWAYS , ""Unknown command %s\\n"" , cmd )"	158:1:4261:4308	5079212	4	True				
ANR	5079284	CallExpression	"dprintf ( D_ALWAYS , ""Unknown command %s\\n"" , cmd )"		5079212	0					
ANR	5079285	Callee	dprintf		5079212	0					
ANR	5079286	Identifier	dprintf		5079212	0					
ANR	5079287	ArgumentList	D_ALWAYS		5079212	1					
ANR	5079288	Argument	D_ALWAYS		5079212	0					
ANR	5079289	Identifier	D_ALWAYS		5079212	0					
ANR	5079290	Argument	"""Unknown command %s\\n"""		5079212	1					
ANR	5079291	PrimaryExpression	"""Unknown command %s\\n"""		5079212	0					
ANR	5079292	Argument	cmd		5079212	2					
ANR	5079293	Identifier	cmd		5079212	0					
ANR	5079294	ReturnStatement	return false ;	159:1:4311:4323	5079212	5	True				
ANR	5079295	Identifier	false		5079212	0					
ANR	5079296	ReturnType	bool		5079212	1					
ANR	5079297	Identifier	executeIOCheckFunc		5079212	2					
ANR	5079298	ParameterList	"const char * cmd , char * * argv , int argc"		5079212	3					
ANR	5079299	Parameter	const char * cmd	142:19:3928:3942	5079212	0	True				
ANR	5079300	ParameterType	const char *		5079212	0					
ANR	5079301	Identifier	cmd		5079212	1					
ANR	5079302	Parameter	char * * argv	142:36:3945:3955	5079212	1	True				
ANR	5079303	ParameterType	char * *		5079212	0					
ANR	5079304	Identifier	argv		5079212	1					
ANR	5079305	Parameter	int argc	142:49:3958:3965	5079212	2	True				
ANR	5079306	ParameterType	int		5079212	0					
ANR	5079307	Identifier	argc		5079212	1					
ANR	5079308	CFGEntryNode	ENTRY		5079212		True				
ANR	5079309	CFGExitNode	EXIT		5079212		True				
ANR	5079310	Symbol	argc		5079212						
ANR	5079311	Symbol	NULL		5079212						
ANR	5079312	Symbol	one_cmd		5079212						
ANR	5079313	Symbol	one_cmd -> iocheckfunction		5079212						
ANR	5079314	Symbol	false		5079212						
ANR	5079315	Symbol	D_ALWAYS		5079212						
ANR	5079316	Symbol	argv		5079212						
ANR	5079317	Symbol	* one_cmd		5079212						
ANR	5079318	Symbol	amazon_gahp_commands		5079212						
ANR	5079319	Symbol	one_cmd -> command		5079212						
ANR	5079320	Symbol	amazon_gahp_commands . Next		5079212						
ANR	5079321	Symbol	one_cmd -> command . c_str		5079212						
ANR	5079322	Symbol	cmd		5079212						
ANR	5079323	Symbol	strcasecmp		5079212						
ANR	5079324	Function	executeWorkerFunc	162:0:4328:4787							
ANR	5079325	FunctionDef	"executeWorkerFunc (const char * cmd , char * * argv , int argc , std :: string & output_string)"		5079324	0					
ANR	5079326	CompoundStatement		164:0:4419:4787	5079324	0					
ANR	5079327	IfStatement	if ( ! cmd )		5079324	0					
ANR	5079328	Condition	! cmd	165:4:4425:4428	5079324	0	True				
ANR	5079329	UnaryOperationExpression	! cmd		5079324	0					
ANR	5079330	UnaryOperator	!		5079324	0					
ANR	5079331	Identifier	cmd		5079324	1					
ANR	5079332	CompoundStatement		2:10:11:11	5079324	1					
ANR	5079333	ReturnStatement	return false ;	166:2:4435:4447	5079324	0	True				
ANR	5079334	Identifier	false		5079324	0					
ANR	5079335	IdentifierDeclStatement	AmazonGahpCommand * one_cmd = NULL ;	169:1:4454:4487	5079324	1	True				
ANR	5079336	IdentifierDecl	* one_cmd = NULL		5079324	0					
ANR	5079337	IdentifierDeclType	AmazonGahpCommand *		5079324	0					
ANR	5079338	Identifier	one_cmd		5079324	1					
ANR	5079339	AssignmentExpression	* one_cmd = NULL		5079324	2		=			
ANR	5079340	Identifier	NULL		5079324	0					
ANR	5079341	Identifier	NULL		5079324	1					
ANR	5079342	ExpressionStatement	amazon_gahp_commands . Rewind ( )	171:1:4491:4520	5079324	2	True				
ANR	5079343	CallExpression	amazon_gahp_commands . Rewind ( )		5079324	0					
ANR	5079344	Callee	amazon_gahp_commands . Rewind		5079324	0					
ANR	5079345	MemberAccess	amazon_gahp_commands . Rewind		5079324	0					
ANR	5079346	Identifier	amazon_gahp_commands		5079324	0					
ANR	5079347	Identifier	Rewind		5079324	1					
ANR	5079348	ArgumentList			5079324	1					
ANR	5079349	WhileStatement	while ( amazon_gahp_commands . Next ( one_cmd ) )		5079324	3					
ANR	5079350	Condition	amazon_gahp_commands . Next ( one_cmd )	172:8:4530:4563	5079324	0	True				
ANR	5079351	CallExpression	amazon_gahp_commands . Next ( one_cmd )		5079324	0					
ANR	5079352	Callee	amazon_gahp_commands . Next		5079324	0					
ANR	5079353	MemberAccess	amazon_gahp_commands . Next		5079324	0					
ANR	5079354	Identifier	amazon_gahp_commands		5079324	0					
ANR	5079355	Identifier	Next		5079324	1					
ANR	5079356	ArgumentList	one_cmd		5079324	1					
ANR	5079357	Argument	one_cmd		5079324	0					
ANR	5079358	Identifier	one_cmd		5079324	0					
ANR	5079359	CompoundStatement		9:45:147:147	5079324	1					
ANR	5079360	IfStatement	"if ( ! strcasecmp ( one_cmd -> command . c_str ( ) , cmd ) && one_cmd -> workerfunction )"		5079324	0					
ANR	5079361	Condition	"! strcasecmp ( one_cmd -> command . c_str ( ) , cmd ) && one_cmd -> workerfunction"	173:6:4575:4647	5079324	0	True				
ANR	5079362	AndExpression	"! strcasecmp ( one_cmd -> command . c_str ( ) , cmd ) && one_cmd -> workerfunction"		5079324	0		&&			
ANR	5079363	UnaryOperationExpression	"! strcasecmp ( one_cmd -> command . c_str ( ) , cmd )"		5079324	0					
ANR	5079364	UnaryOperator	!		5079324	0					
ANR	5079365	CallExpression	"strcasecmp ( one_cmd -> command . c_str ( ) , cmd )"		5079324	1					
ANR	5079366	Callee	strcasecmp		5079324	0					
ANR	5079367	Identifier	strcasecmp		5079324	0					
ANR	5079368	ArgumentList	one_cmd -> command . c_str ( )		5079324	1					
ANR	5079369	Argument	one_cmd -> command . c_str ( )		5079324	0					
ANR	5079370	CallExpression	one_cmd -> command . c_str ( )		5079324	0					
ANR	5079371	Callee	one_cmd -> command . c_str		5079324	0					
ANR	5079372	MemberAccess	one_cmd -> command . c_str		5079324	0					
ANR	5079373	PtrMemberAccess	one_cmd -> command		5079324	0					
ANR	5079374	Identifier	one_cmd		5079324	0					
ANR	5079375	Identifier	command		5079324	1					
ANR	5079376	Identifier	c_str		5079324	1					
ANR	5079377	ArgumentList			5079324	1					
ANR	5079378	Argument	cmd		5079324	1					
ANR	5079379	Identifier	cmd		5079324	0					
ANR	5079380	PtrMemberAccess	one_cmd -> workerfunction		5079324	1					
ANR	5079381	Identifier	one_cmd		5079324	0					
ANR	5079382	Identifier	workerfunction		5079324	1					
ANR	5079383	CompoundStatement		11:29:231:231	5079324	1					
ANR	5079384	ReturnStatement	"return one_cmd -> workerfunction ( argv , argc , output_string ) ;"	175:3:4656:4713	5079324	0	True				
ANR	5079385	CallExpression	"one_cmd -> workerfunction ( argv , argc , output_string )"		5079324	0					
ANR	5079386	Callee	one_cmd -> workerfunction		5079324	0					
ANR	5079387	PtrMemberAccess	one_cmd -> workerfunction		5079324	0					
ANR	5079388	Identifier	one_cmd		5079324	0					
ANR	5079389	Identifier	workerfunction		5079324	1					
ANR	5079390	ArgumentList	argv		5079324	1					
ANR	5079391	Argument	argv		5079324	0					
ANR	5079392	Identifier	argv		5079324	0					
ANR	5079393	Argument	argc		5079324	1					
ANR	5079394	Identifier	argc		5079324	0					
ANR	5079395	Argument	output_string		5079324	2					
ANR	5079396	Identifier	output_string		5079324	0					
ANR	5079397	ExpressionStatement	"dprintf ( D_ALWAYS , ""Unknown command %s\\n"" , cmd )"	178:1:4723:4770	5079324	4	True				
ANR	5079398	CallExpression	"dprintf ( D_ALWAYS , ""Unknown command %s\\n"" , cmd )"		5079324	0					
ANR	5079399	Callee	dprintf		5079324	0					
ANR	5079400	Identifier	dprintf		5079324	0					
ANR	5079401	ArgumentList	D_ALWAYS		5079324	1					
ANR	5079402	Argument	D_ALWAYS		5079324	0					
ANR	5079403	Identifier	D_ALWAYS		5079324	0					
ANR	5079404	Argument	"""Unknown command %s\\n"""		5079324	1					
ANR	5079405	PrimaryExpression	"""Unknown command %s\\n"""		5079324	0					
ANR	5079406	Argument	cmd		5079324	2					
ANR	5079407	Identifier	cmd		5079324	0					
ANR	5079408	ReturnStatement	return false ;	179:1:4773:4785	5079324	5	True				
ANR	5079409	Identifier	false		5079324	0					
ANR	5079410	ReturnType	bool		5079324	1					
ANR	5079411	Identifier	executeWorkerFunc		5079324	2					
ANR	5079412	ParameterList	"const char * cmd , char * * argv , int argc , std :: string & output_string"		5079324	3					
ANR	5079413	Parameter	const char * cmd	163:18:4351:4365	5079324	0	True				
ANR	5079414	ParameterType	const char *		5079324	0					
ANR	5079415	Identifier	cmd		5079324	1					
ANR	5079416	Parameter	char * * argv	163:35:4368:4378	5079324	1	True				
ANR	5079417	ParameterType	char * *		5079324	0					
ANR	5079418	Identifier	argv		5079324	1					
ANR	5079419	Parameter	int argc	163:48:4381:4388	5079324	2	True				
ANR	5079420	ParameterType	int		5079324	0					
ANR	5079421	Identifier	argc		5079324	1					
ANR	5079422	Parameter	std :: string & output_string	163:58:4391:4416	5079324	3	True				
ANR	5079423	ParameterType	std :: string &		5079324	0					
ANR	5079424	Identifier	output_string		5079324	1					
ANR	5079425	CFGEntryNode	ENTRY		5079324		True				
ANR	5079426	CFGExitNode	EXIT		5079324		True				
ANR	5079427	Symbol	argc		5079324						
ANR	5079428	Symbol	NULL		5079324						
ANR	5079429	Symbol	one_cmd -> workerfunction		5079324						
ANR	5079430	Symbol	one_cmd		5079324						
ANR	5079431	Symbol	false		5079324						
ANR	5079432	Symbol	D_ALWAYS		5079324						
ANR	5079433	Symbol	argv		5079324						
ANR	5079434	Symbol	* one_cmd		5079324						
ANR	5079435	Symbol	amazon_gahp_commands		5079324						
ANR	5079436	Symbol	one_cmd -> command		5079324						
ANR	5079437	Symbol	output_string		5079324						
ANR	5079438	Symbol	amazon_gahp_commands . Next		5079324						
ANR	5079439	Symbol	one_cmd -> command . c_str		5079324						
ANR	5079440	Symbol	cmd		5079324						
ANR	5079441	Symbol	strcasecmp		5079324						
ANR	5079442	Function	parse_gahp_command	182:0:4790:5844							
ANR	5079443	FunctionDef	"parse_gahp_command (const char * raw , Gahp_Args * args)"		5079442	0					
ANR	5079444	CompoundStatement		183:54:4848:5844	5079442	0					
ANR	5079445	IfStatement	if ( ! raw )		5079442	0					
ANR	5079446	Condition	! raw	185:5:4856:4859	5079442	0	True				
ANR	5079447	UnaryOperationExpression	! raw		5079442	0					
ANR	5079448	UnaryOperator	!		5079442	0					
ANR	5079449	Identifier	raw		5079442	1					
ANR	5079450	CompoundStatement		3:11:13:13	5079442	1					
ANR	5079451	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR parse_gahp_command: empty command\\n"" )"	186:2:4866:4927	5079442	0	True				
ANR	5079452	CallExpression	"dprintf ( D_ALWAYS , ""ERROR parse_gahp_command: empty command\\n"" )"		5079442	0					
ANR	5079453	Callee	dprintf		5079442	0					
ANR	5079454	Identifier	dprintf		5079442	0					
ANR	5079455	ArgumentList	D_ALWAYS		5079442	1					
ANR	5079456	Argument	D_ALWAYS		5079442	0					
ANR	5079457	Identifier	D_ALWAYS		5079442	0					
ANR	5079458	Argument	"""ERROR parse_gahp_command: empty command\\n"""		5079442	1					
ANR	5079459	PrimaryExpression	"""ERROR parse_gahp_command: empty command\\n"""		5079442	0					
ANR	5079460	ReturnStatement	return FALSE ;	187:2:4931:4943	5079442	1	True				
ANR	5079461	Identifier	FALSE		5079442	0					
ANR	5079462	ExpressionStatement	args -> reset ( )	190:1:4950:4963	5079442	1	True				
ANR	5079463	CallExpression	args -> reset ( )		5079442	0					
ANR	5079464	Callee	args -> reset		5079442	0					
ANR	5079465	PtrMemberAccess	args -> reset		5079442	0					
ANR	5079466	Identifier	args		5079442	0					
ANR	5079467	Identifier	reset		5079442	1					
ANR	5079468	ArgumentList			5079442	1					
ANR	5079469	IdentifierDeclStatement	int beginning = 0 ;	192:1:4967:4984	5079442	2	True				
ANR	5079470	IdentifierDecl	beginning = 0		5079442	0					
ANR	5079471	IdentifierDeclType	int		5079442	0					
ANR	5079472	Identifier	beginning		5079442	1					
ANR	5079473	AssignmentExpression	beginning = 0		5079442	2		=			
ANR	5079474	Identifier	beginning		5079442	0					
ANR	5079475	PrimaryExpression	0		5079442	1					
ANR	5079476	IdentifierDeclStatement	int len = strlen ( raw ) ;	194:1:4988:5007	5079442	3	True				
ANR	5079477	IdentifierDecl	len = strlen ( raw )		5079442	0					
ANR	5079478	IdentifierDeclType	int		5079442	0					
ANR	5079479	Identifier	len		5079442	1					
ANR	5079480	AssignmentExpression	len = strlen ( raw )		5079442	2		=			
ANR	5079481	Identifier	len		5079442	0					
ANR	5079482	CallExpression	strlen ( raw )		5079442	1					
ANR	5079483	Callee	strlen		5079442	0					
ANR	5079484	Identifier	strlen		5079442	0					
ANR	5079485	ArgumentList	raw		5079442	1					
ANR	5079486	Argument	raw		5079442	0					
ANR	5079487	Identifier	raw		5079442	0					
ANR	5079488	IdentifierDeclStatement	char * buff = ( char * ) malloc ( len + 1 ) ;	196:1:5011:5045	5079442	4	True				
ANR	5079489	IdentifierDecl	* buff = ( char * ) malloc ( len + 1 )		5079442	0					
ANR	5079490	IdentifierDeclType	char *		5079442	0					
ANR	5079491	Identifier	buff		5079442	1					
ANR	5079492	AssignmentExpression	* buff = ( char * ) malloc ( len + 1 )		5079442	2		=			
ANR	5079493	Identifier	buff		5079442	0					
ANR	5079494	CastExpression	( char * ) malloc ( len + 1 )		5079442	1					
ANR	5079495	CastTarget	char *		5079442	0					
ANR	5079496	CallExpression	malloc ( len + 1 )		5079442	1					
ANR	5079497	Callee	malloc		5079442	0					
ANR	5079498	Identifier	malloc		5079442	0					
ANR	5079499	ArgumentList	len + 1		5079442	1					
ANR	5079500	Argument	len + 1		5079442	0					
ANR	5079501	AdditiveExpression	len + 1		5079442	0		+			
ANR	5079502	Identifier	len		5079442	0					
ANR	5079503	PrimaryExpression	1		5079442	1					
ANR	5079504	IdentifierDeclStatement	int buff_len = 0 ;	197:1:5048:5064	5079442	5	True				
ANR	5079505	IdentifierDecl	buff_len = 0		5079442	0					
ANR	5079506	IdentifierDeclType	int		5079442	0					
ANR	5079507	Identifier	buff_len		5079442	1					
ANR	5079508	AssignmentExpression	buff_len = 0		5079442	2		=			
ANR	5079509	Identifier	buff_len		5079442	0					
ANR	5079510	PrimaryExpression	0		5079442	1					
ANR	5079511	ForStatement	for ( int i = 0 ; i < len ; i ++ )		5079442	6					
ANR	5079512	ForInit	int i = 0 ;	199:6:5073:5082	5079442	0	True				
ANR	5079513	IdentifierDeclStatement	int i = 0 ;		5079442	0					
ANR	5079514	IdentifierDecl	i = 0		5079442	0					
ANR	5079515	IdentifierDeclType	int		5079442	0					
ANR	5079516	Identifier	i		5079442	1					
ANR	5079517	AssignmentExpression	i = 0		5079442	2		=			
ANR	5079518	Identifier	i		5079442	0					
ANR	5079519	PrimaryExpression	0		5079442	1					
ANR	5079520	Condition	i < len	199:17:5084:5088	5079442	1	True				
ANR	5079521	RelationalExpression	i < len		5079442	0		<			
ANR	5079522	Identifier	i		5079442	0					
ANR	5079523	Identifier	len		5079442	1					
ANR	5079524	PostIncDecOperationExpression	i ++	199:24:5091:5093	5079442	2	True				
ANR	5079525	Identifier	i		5079442	0					
ANR	5079526	IncDec	++		5079442	1					
ANR	5079527	CompoundStatement		17:29:247:247	5079442	3					
ANR	5079528	IfStatement	if ( raw [ i ] == '\\\\' )		5079442	0					
ANR	5079529	Condition	raw [ i ] == '\\\\'	201:7:5106:5119	5079442	0	True				
ANR	5079530	EqualityExpression	raw [ i ] == '\\\\'		5079442	0		==			
ANR	5079531	ArrayIndexing	raw [ i ]		5079442	0					
ANR	5079532	Identifier	raw		5079442	0					
ANR	5079533	Identifier	i		5079442	1					
ANR	5079534	PrimaryExpression	'\\\\'		5079442	1					
ANR	5079535	CompoundStatement		19:24:274:274	5079442	1					
ANR	5079536	ExpressionStatement	i ++	202:3:5128:5131	5079442	0	True				
ANR	5079537	PostIncDecOperationExpression	i ++		5079442	0					
ANR	5079538	Identifier	i		5079442	0					
ANR	5079539	IncDec	++		5079442	1					
ANR	5079540	IfStatement	if ( i < ( len - 1 ) )		5079442	1					
ANR	5079541	Condition	i < ( len - 1 )	203:7:5160:5168	5079442	0	True				
ANR	5079542	RelationalExpression	i < ( len - 1 )		5079442	0		<			
ANR	5079543	Identifier	i		5079442	0					
ANR	5079544	AdditiveExpression	len - 1		5079442	1		-			
ANR	5079545	Identifier	len		5079442	0					
ANR	5079546	PrimaryExpression	1		5079442	1					
ANR	5079547	ExpressionStatement	buff [ buff_len ++ ] = raw [ i ]	204:4:5175:5200	5079442	1	True				
ANR	5079548	AssignmentExpression	buff [ buff_len ++ ] = raw [ i ]		5079442	0		=			
ANR	5079549	ArrayIndexing	buff [ buff_len ++ ]		5079442	0					
ANR	5079550	Identifier	buff		5079442	0					
ANR	5079551	PostIncDecOperationExpression	buff_len ++		5079442	1					
ANR	5079552	Identifier	buff_len		5079442	0					
ANR	5079553	IncDec	++		5079442	1					
ANR	5079554	ArrayIndexing	raw [ i ]		5079442	1					
ANR	5079555	Identifier	raw		5079442	0					
ANR	5079556	Identifier	i		5079442	1					
ANR	5079557	ContinueStatement	continue ;	205:3:5205:5213	5079442	2	True				
ANR	5079558	IfStatement	if ( raw [ i ] == ' ' || raw [ i ] == '\\t' || raw [ i ] == '\\r' || raw [ i ] == '\\n' )		5079442	1					
ANR	5079559	Condition	raw [ i ] == ' ' || raw [ i ] == '\\t' || raw [ i ] == '\\r' || raw [ i ] == '\\n'	209:7:5274:5334	5079442	0	True				
ANR	5079560	OrExpression	raw [ i ] == ' ' || raw [ i ] == '\\t' || raw [ i ] == '\\r' || raw [ i ] == '\\n'		5079442	0		||			
ANR	5079561	EqualityExpression	raw [ i ] == ' '		5079442	0		==			
ANR	5079562	ArrayIndexing	raw [ i ]		5079442	0					
ANR	5079563	Identifier	raw		5079442	0					
ANR	5079564	Identifier	i		5079442	1					
ANR	5079565	PrimaryExpression	' '		5079442	1					
ANR	5079566	OrExpression	raw [ i ] == '\\t' || raw [ i ] == '\\r' || raw [ i ] == '\\n'		5079442	1		||			
ANR	5079567	EqualityExpression	raw [ i ] == '\\t'		5079442	0		==			
ANR	5079568	ArrayIndexing	raw [ i ]		5079442	0					
ANR	5079569	Identifier	raw		5079442	0					
ANR	5079570	Identifier	i		5079442	1					
ANR	5079571	PrimaryExpression	'\\t'		5079442	1					
ANR	5079572	OrExpression	raw [ i ] == '\\r' || raw [ i ] == '\\n'		5079442	1		||			
ANR	5079573	EqualityExpression	raw [ i ] == '\\r'		5079442	0		==			
ANR	5079574	ArrayIndexing	raw [ i ]		5079442	0					
ANR	5079575	Identifier	raw		5079442	0					
ANR	5079576	Identifier	i		5079442	1					
ANR	5079577	PrimaryExpression	'\\r'		5079442	1					
ANR	5079578	EqualityExpression	raw [ i ] == '\\n'		5079442	1		==			
ANR	5079579	ArrayIndexing	raw [ i ]		5079442	0					
ANR	5079580	Identifier	raw		5079442	0					
ANR	5079581	Identifier	i		5079442	1					
ANR	5079582	PrimaryExpression	'\\n'		5079442	1					
ANR	5079583	CompoundStatement		27:70:488:488	5079442	1					
ANR	5079584	ExpressionStatement	buff [ buff_len ++ ] = '\\0'	214:3:5466:5489	5079442	0	True				
ANR	5079585	AssignmentExpression	buff [ buff_len ++ ] = '\\0'		5079442	0		=			
ANR	5079586	ArrayIndexing	buff [ buff_len ++ ]		5079442	0					
ANR	5079587	Identifier	buff		5079442	0					
ANR	5079588	PostIncDecOperationExpression	buff_len ++		5079442	1					
ANR	5079589	Identifier	buff_len		5079442	0					
ANR	5079590	IncDec	++		5079442	1					
ANR	5079591	PrimaryExpression	'\\0'		5079442	1					
ANR	5079592	ExpressionStatement	args -> add_arg ( strdup ( buff ) )	215:3:5494:5523	5079442	1	True				
ANR	5079593	CallExpression	args -> add_arg ( strdup ( buff ) )		5079442	0					
ANR	5079594	Callee	args -> add_arg		5079442	0					
ANR	5079595	PtrMemberAccess	args -> add_arg		5079442	0					
ANR	5079596	Identifier	args		5079442	0					
ANR	5079597	Identifier	add_arg		5079442	1					
ANR	5079598	ArgumentList	strdup ( buff )		5079442	1					
ANR	5079599	Argument	strdup ( buff )		5079442	0					
ANR	5079600	CallExpression	strdup ( buff )		5079442	0					
ANR	5079601	Callee	strdup		5079442	0					
ANR	5079602	Identifier	strdup		5079442	0					
ANR	5079603	ArgumentList	buff		5079442	1					
ANR	5079604	Argument	buff		5079442	0					
ANR	5079605	Identifier	buff		5079442	0					
ANR	5079606	ExpressionStatement	buff_len = 0	216:3:5528:5540	5079442	2	True				
ANR	5079607	AssignmentExpression	buff_len = 0		5079442	0		=			
ANR	5079608	Identifier	buff_len		5079442	0					
ANR	5079609	PrimaryExpression	0		5079442	1					
ANR	5079610	ExpressionStatement	beginning = i + 1	218:3:5573:5588	5079442	3	True				
ANR	5079611	AssignmentExpression	beginning = i + 1		5079442	0		=			
ANR	5079612	Identifier	beginning		5079442	0					
ANR	5079613	AdditiveExpression	i + 1		5079442	1		+			
ANR	5079614	Identifier	i		5079442	0					
ANR	5079615	PrimaryExpression	1		5079442	1					
ANR	5079616	ElseStatement	else		5079442	0					
ANR	5079617	CompoundStatement		38:7:794:794	5079442	0					
ANR	5079618	ExpressionStatement	buff [ buff_len ++ ] = raw [ i ]	222:3:5693:5718	5079442	0	True				
ANR	5079619	AssignmentExpression	buff [ buff_len ++ ] = raw [ i ]		5079442	0		=			
ANR	5079620	ArrayIndexing	buff [ buff_len ++ ]		5079442	0					
ANR	5079621	Identifier	buff		5079442	0					
ANR	5079622	PostIncDecOperationExpression	buff_len ++		5079442	1					
ANR	5079623	Identifier	buff_len		5079442	0					
ANR	5079624	IncDec	++		5079442	1					
ANR	5079625	ArrayIndexing	raw [ i ]		5079442	1					
ANR	5079626	Identifier	raw		5079442	0					
ANR	5079627	Identifier	i		5079442	1					
ANR	5079628	ExpressionStatement	buff [ buff_len ++ ] = '\\0'	227:1:5758:5781	5079442	7	True				
ANR	5079629	AssignmentExpression	buff [ buff_len ++ ] = '\\0'		5079442	0		=			
ANR	5079630	ArrayIndexing	buff [ buff_len ++ ]		5079442	0					
ANR	5079631	Identifier	buff		5079442	0					
ANR	5079632	PostIncDecOperationExpression	buff_len ++		5079442	1					
ANR	5079633	Identifier	buff_len		5079442	0					
ANR	5079634	IncDec	++		5079442	1					
ANR	5079635	PrimaryExpression	'\\0'		5079442	1					
ANR	5079636	ExpressionStatement	args -> add_arg ( strdup ( buff ) )	228:1:5784:5813	5079442	8	True				
ANR	5079637	CallExpression	args -> add_arg ( strdup ( buff ) )		5079442	0					
ANR	5079638	Callee	args -> add_arg		5079442	0					
ANR	5079639	PtrMemberAccess	args -> add_arg		5079442	0					
ANR	5079640	Identifier	args		5079442	0					
ANR	5079641	Identifier	add_arg		5079442	1					
ANR	5079642	ArgumentList	strdup ( buff )		5079442	1					
ANR	5079643	Argument	strdup ( buff )		5079442	0					
ANR	5079644	CallExpression	strdup ( buff )		5079442	0					
ANR	5079645	Callee	strdup		5079442	0					
ANR	5079646	Identifier	strdup		5079442	0					
ANR	5079647	ArgumentList	buff		5079442	1					
ANR	5079648	Argument	buff		5079442	0					
ANR	5079649	Identifier	buff		5079442	0					
ANR	5079650	ExpressionStatement	free ( buff )	230:1:5817:5828	5079442	9	True				
ANR	5079651	CallExpression	free ( buff )		5079442	0					
ANR	5079652	Callee	free		5079442	0					
ANR	5079653	Identifier	free		5079442	0					
ANR	5079654	ArgumentList	buff		5079442	1					
ANR	5079655	Argument	buff		5079442	0					
ANR	5079656	Identifier	buff		5079442	0					
ANR	5079657	ReturnStatement	return TRUE ;	231:1:5831:5842	5079442	10	True				
ANR	5079658	Identifier	TRUE		5079442	0					
ANR	5079659	ReturnType	int		5079442	1					
ANR	5079660	Identifier	parse_gahp_command		5079442	2					
ANR	5079661	ParameterList	"const char * raw , Gahp_Args * args"		5079442	3					
ANR	5079662	Parameter	const char * raw	183:20:4814:4828	5079442	0	True				
ANR	5079663	ParameterType	const char *		5079442	0					
ANR	5079664	Identifier	raw		5079442	1					
ANR	5079665	Parameter	Gahp_Args * args	183:37:4831:4845	5079442	1	True				
ANR	5079666	ParameterType	Gahp_Args *		5079442	0					
ANR	5079667	Identifier	args		5079442	1					
ANR	5079668	CFGEntryNode	ENTRY		5079442		True				
ANR	5079669	CFGExitNode	EXIT		5079442		True				
ANR	5079670	Symbol	malloc		5079442						
ANR	5079671	Symbol	beginning		5079442						
ANR	5079672	Symbol	D_ALWAYS		5079442						
ANR	5079673	Symbol	raw		5079442						
ANR	5079674	Symbol	i		5079442						
ANR	5079675	Symbol	TRUE		5079442						
ANR	5079676	Symbol	buff_len		5079442						
ANR	5079677	Symbol	args		5079442						
ANR	5079678	Symbol	strlen		5079442						
ANR	5079679	Symbol	* raw		5079442						
ANR	5079680	Symbol	* i		5079442						
ANR	5079681	Symbol	len		5079442						
ANR	5079682	Symbol	* buff		5079442						
ANR	5079683	Symbol	FALSE		5079442						
ANR	5079684	Symbol	strdup		5079442						
ANR	5079685	Symbol	buff		5079442						
ANR	5079686	Function	check_read_access_file	234:0:5847:6086							
ANR	5079687	FunctionDef	check_read_access_file (const char * file)		5079686	0					
ANR	5079688	CompoundStatement		236:0:5893:6086	5079686	0					
ANR	5079689	IfStatement	if ( ! file || file [ 0 ] == '\\0' )		5079686	0					
ANR	5079690	Condition	! file || file [ 0 ] == '\\0'	237:5:5900:5923	5079686	0	True				
ANR	5079691	OrExpression	! file || file [ 0 ] == '\\0'		5079686	0		||			
ANR	5079692	UnaryOperationExpression	! file		5079686	0					
ANR	5079693	UnaryOperator	!		5079686	0					
ANR	5079694	Identifier	file		5079686	1					
ANR	5079695	EqualityExpression	file [ 0 ] == '\\0'		5079686	1		==			
ANR	5079696	ArrayIndexing	file [ 0 ]		5079686	0					
ANR	5079697	Identifier	file		5079686	0					
ANR	5079698	PrimaryExpression	0		5079686	1					
ANR	5079699	PrimaryExpression	'\\0'		5079686	1					
ANR	5079700	CompoundStatement		2:32:33:33	5079686	1					
ANR	5079701	ReturnStatement	return false ;	238:2:5931:5943	5079686	0	True				
ANR	5079702	Identifier	false		5079686	0					
ANR	5079703	IdentifierDeclStatement	"int ret = access ( file , R_OK ) ;"	241:1:5950:5978	5079686	1	True				
ANR	5079704	IdentifierDecl	"ret = access ( file , R_OK )"		5079686	0					
ANR	5079705	IdentifierDeclType	int		5079686	0					
ANR	5079706	Identifier	ret		5079686	1					
ANR	5079707	AssignmentExpression	"ret = access ( file , R_OK )"		5079686	2		=			
ANR	5079708	Identifier	ret		5079686	0					
ANR	5079709	CallExpression	"access ( file , R_OK )"		5079686	1					
ANR	5079710	Callee	access		5079686	0					
ANR	5079711	Identifier	access		5079686	0					
ANR	5079712	ArgumentList	file		5079686	1					
ANR	5079713	Argument	file		5079686	0					
ANR	5079714	Identifier	file		5079686	0					
ANR	5079715	Argument	R_OK		5079686	1					
ANR	5079716	Identifier	R_OK		5079686	0					
ANR	5079717	IfStatement	if ( ret < 0 )		5079686	2					
ANR	5079718	Condition	ret < 0	243:4:5985:5991	5079686	0	True				
ANR	5079719	RelationalExpression	ret < 0		5079686	0		<			
ANR	5079720	Identifier	ret		5079686	0					
ANR	5079721	PrimaryExpression	0		5079686	1					
ANR	5079722	CompoundStatement		8:14:101:101	5079686	1					
ANR	5079723	ExpressionStatement	"dprintf ( D_ALWAYS , ""File(%s) can't be read\\n"" , file )"	244:2:5999:6050	5079686	0	True				
ANR	5079724	CallExpression	"dprintf ( D_ALWAYS , ""File(%s) can't be read\\n"" , file )"		5079686	0					
ANR	5079725	Callee	dprintf		5079686	0					
ANR	5079726	Identifier	dprintf		5079686	0					
ANR	5079727	ArgumentList	D_ALWAYS		5079686	1					
ANR	5079728	Argument	D_ALWAYS		5079686	0					
ANR	5079729	Identifier	D_ALWAYS		5079686	0					
ANR	5079730	Argument	"""File(%s) can't be read\\n"""		5079686	1					
ANR	5079731	PrimaryExpression	"""File(%s) can't be read\\n"""		5079686	0					
ANR	5079732	Argument	file		5079686	2					
ANR	5079733	Identifier	file		5079686	0					
ANR	5079734	ReturnStatement	return false ;	245:2:6054:6066	5079686	1	True				
ANR	5079735	Identifier	false		5079686	0					
ANR	5079736	ReturnStatement	return true ;	248:1:6073:6084	5079686	3	True				
ANR	5079737	Identifier	true		5079686	0					
ANR	5079738	ReturnType	bool		5079686	1					
ANR	5079739	Identifier	check_read_access_file		5079686	2					
ANR	5079740	ParameterList	const char * file		5079686	3					
ANR	5079741	Parameter	const char * file	235:23:5875:5890	5079686	0	True				
ANR	5079742	ParameterType	const char *		5079686	0					
ANR	5079743	Identifier	file		5079686	1					
ANR	5079744	CFGEntryNode	ENTRY		5079686		True				
ANR	5079745	CFGExitNode	EXIT		5079686		True				
ANR	5079746	Symbol	ret		5079686						
ANR	5079747	Symbol	file		5079686						
ANR	5079748	Symbol	access		5079686						
ANR	5079749	Symbol	false		5079686						
ANR	5079750	Symbol	D_ALWAYS		5079686						
ANR	5079751	Symbol	true		5079686						
ANR	5079752	Symbol	* file		5079686						
ANR	5079753	Symbol	R_OK		5079686						
ANR	5079754	Function	check_create_file	251:0:6089:6454							
ANR	5079755	FunctionDef	"check_create_file (const char * file , mode_t mode)"		5079754	0					
ANR	5079756	CompoundStatement		253:0:6143:6454	5079754	0					
ANR	5079757	IfStatement	if ( ! file || file [ 0 ] == '\\0' )		5079754	0					
ANR	5079758	Condition	! file || file [ 0 ] == '\\0'	254:5:6150:6173	5079754	0	True				
ANR	5079759	OrExpression	! file || file [ 0 ] == '\\0'		5079754	0		||			
ANR	5079760	UnaryOperationExpression	! file		5079754	0					
ANR	5079761	UnaryOperator	!		5079754	0					
ANR	5079762	Identifier	file		5079754	1					
ANR	5079763	EqualityExpression	file [ 0 ] == '\\0'		5079754	1		==			
ANR	5079764	ArrayIndexing	file [ 0 ]		5079754	0					
ANR	5079765	Identifier	file		5079754	0					
ANR	5079766	PrimaryExpression	0		5079754	1					
ANR	5079767	PrimaryExpression	'\\0'		5079754	1					
ANR	5079768	CompoundStatement		2:32:33:33	5079754	1					
ANR	5079769	ReturnStatement	return false ;	255:2:6181:6193	5079754	0	True				
ANR	5079770	Identifier	false		5079754	0					
ANR	5079771	IdentifierDeclStatement	FILE * fp = NULL ;	258:1:6200:6215	5079754	1	True				
ANR	5079772	IdentifierDecl	* fp = NULL		5079754	0					
ANR	5079773	IdentifierDeclType	FILE *		5079754	0					
ANR	5079774	Identifier	fp		5079754	1					
ANR	5079775	AssignmentExpression	* fp = NULL		5079754	2		=			
ANR	5079776	Identifier	NULL		5079754	0					
ANR	5079777	Identifier	NULL		5079754	1					
ANR	5079778	ExpressionStatement	"fp = safe_fopen_wrapper ( file , ""w"" , mode )"	260:1:6219:6259	5079754	2	True				
ANR	5079779	AssignmentExpression	"fp = safe_fopen_wrapper ( file , ""w"" , mode )"		5079754	0		=			
ANR	5079780	Identifier	fp		5079754	0					
ANR	5079781	CallExpression	"safe_fopen_wrapper ( file , ""w"" , mode )"		5079754	1					
ANR	5079782	Callee	safe_fopen_wrapper		5079754	0					
ANR	5079783	Identifier	safe_fopen_wrapper		5079754	0					
ANR	5079784	ArgumentList	file		5079754	1					
ANR	5079785	Argument	file		5079754	0					
ANR	5079786	Identifier	file		5079754	0					
ANR	5079787	Argument	"""w"""		5079754	1					
ANR	5079788	PrimaryExpression	"""w"""		5079754	0					
ANR	5079789	Argument	mode		5079754	2					
ANR	5079790	Identifier	mode		5079754	0					
ANR	5079791	IfStatement	if ( ! fp )		5079754	3					
ANR	5079792	Condition	! fp	261:5:6266:6268	5079754	0	True				
ANR	5079793	UnaryOperationExpression	! fp		5079754	0					
ANR	5079794	UnaryOperator	!		5079754	0					
ANR	5079795	Identifier	fp		5079754	1					
ANR	5079796	CompoundStatement		9:11:128:128	5079754	1					
ANR	5079797	Statement	dprintf	262:2:6276:6282	5079754	0	True				
ANR	5079798	Statement	(	262:9:6283:6283	5079754	1	True				
ANR	5079799	Statement	D_ALWAYS	262:10:6284:6291	5079754	2	True				
ANR	5079800	Statement	","	262:18:6292:6292	5079754	3	True				
ANR	5079801	Statement	"""failed to safe_fopen_wrapper %s in write mode: """	262:20:6294:6342	5079754	4	True				
ANR	5079802	Statement	"""safe_fopen_wrapper returns %s\\n"""	263:4:6348:6380	5079754	5	True				
ANR	5079803	Statement	","	263:37:6381:6381	5079754	6	True				
ANR	5079804	Statement	file	263:39:6383:6386	5079754	7	True				
ANR	5079805	Statement	","	263:43:6387:6387	5079754	8	True				
ANR	5079806	Statement	strerror	263:45:6389:6396	5079754	9	True				
ANR	5079807	Statement	(	263:53:6397:6397	5079754	10	True				
ANR	5079808	Statement	errno	263:54:6398:6402	5079754	11	True				
ANR	5079809	Statement	)	263:59:6403:6403	5079754	12	True				
ANR	5079810	Statement	)	263:60:6404:6404	5079754	13	True				
ANR	5079811	ExpressionStatement		263:61:6405:6405	5079754	14	True				
ANR	5079812	ReturnStatement	return false ;	264:2:6409:6421	5079754	15	True				
ANR	5079813	Identifier	false		5079754	0					
ANR	5079814	ExpressionStatement	fclose ( fp )	267:1:6428:6438	5079754	4	True				
ANR	5079815	CallExpression	fclose ( fp )		5079754	0					
ANR	5079816	Callee	fclose		5079754	0					
ANR	5079817	Identifier	fclose		5079754	0					
ANR	5079818	ArgumentList	fp		5079754	1					
ANR	5079819	Argument	fp		5079754	0					
ANR	5079820	Identifier	fp		5079754	0					
ANR	5079821	ReturnStatement	return true ;	268:1:6441:6452	5079754	5	True				
ANR	5079822	Identifier	true		5079754	0					
ANR	5079823	ReturnType	bool		5079754	1					
ANR	5079824	Identifier	check_create_file		5079754	2					
ANR	5079825	ParameterList	"const char * file , mode_t mode"		5079754	3					
ANR	5079826	Parameter	const char * file	252:18:6112:6127	5079754	0	True				
ANR	5079827	ParameterType	const char *		5079754	0					
ANR	5079828	Identifier	file		5079754	1					
ANR	5079829	Parameter	mode_t mode	252:36:6130:6140	5079754	1	True				
ANR	5079830	ParameterType	mode_t		5079754	0					
ANR	5079831	Identifier	mode		5079754	1					
ANR	5079832	CFGEntryNode	ENTRY		5079754		True				
ANR	5079833	CFGExitNode	EXIT		5079754		True				
ANR	5079834	Symbol	mode		5079754						
ANR	5079835	Symbol	file		5079754						
ANR	5079836	Symbol	NULL		5079754						
ANR	5079837	Symbol	safe_fopen_wrapper		5079754						
ANR	5079838	Symbol	false		5079754						
ANR	5079839	Symbol	true		5079754						
ANR	5079840	Symbol	fp		5079754						
ANR	5079841	Symbol	* file		5079754						
ANR	5079842	Function	verify_number_args	271:0:6457:6650							
ANR	5079843	FunctionDef	"verify_number_args (const int is , const int should_be)"		5079842	0					
ANR	5079844	CompoundStatement		272:55:6516:6650	5079842	0					
ANR	5079845	IfStatement	if ( is != should_be )		5079842	0					
ANR	5079846	Condition	is != should_be	273:5:6523:6537	5079842	0	True				
ANR	5079847	EqualityExpression	is != should_be		5079842	0		!=			
ANR	5079848	Identifier	is		5079842	0					
ANR	5079849	Identifier	should_be		5079842	1					
ANR	5079850	CompoundStatement		2:22:23:23	5079842	1					
ANR	5079851	ExpressionStatement	"dprintf ( D_ALWAYS , ""Wrong # of args %d, should be %d\\n"" , is , should_be )"	274:2:6544:6615	5079842	0	True				
ANR	5079852	CallExpression	"dprintf ( D_ALWAYS , ""Wrong # of args %d, should be %d\\n"" , is , should_be )"		5079842	0					
ANR	5079853	Callee	dprintf		5079842	0					
ANR	5079854	Identifier	dprintf		5079842	0					
ANR	5079855	ArgumentList	D_ALWAYS		5079842	1					
ANR	5079856	Argument	D_ALWAYS		5079842	0					
ANR	5079857	Identifier	D_ALWAYS		5079842	0					
ANR	5079858	Argument	"""Wrong # of args %d, should be %d\\n"""		5079842	1					
ANR	5079859	PrimaryExpression	"""Wrong # of args %d, should be %d\\n"""		5079842	0					
ANR	5079860	Argument	is		5079842	2					
ANR	5079861	Identifier	is		5079842	0					
ANR	5079862	Argument	should_be		5079842	3					
ANR	5079863	Identifier	should_be		5079842	0					
ANR	5079864	ReturnStatement	return FALSE ;	275:2:6619:6631	5079842	1	True				
ANR	5079865	Identifier	FALSE		5079842	0					
ANR	5079866	ReturnStatement	return TRUE ;	277:1:6637:6648	5079842	1	True				
ANR	5079867	Identifier	TRUE		5079842	0					
ANR	5079868	ReturnType	int		5079842	1					
ANR	5079869	Identifier	verify_number_args		5079842	2					
ANR	5079870	ParameterList	"const int is , const int should_be"		5079842	3					
ANR	5079871	Parameter	const int is	272:20:6481:6492	5079842	0	True				
ANR	5079872	ParameterType	const int		5079842	0					
ANR	5079873	Identifier	is		5079842	1					
ANR	5079874	Parameter	const int should_be	272:34:6495:6513	5079842	1	True				
ANR	5079875	ParameterType	const int		5079842	0					
ANR	5079876	Identifier	should_be		5079842	1					
ANR	5079877	CFGEntryNode	ENTRY		5079842		True				
ANR	5079878	CFGExitNode	EXIT		5079842		True				
ANR	5079879	Symbol	D_ALWAYS		5079842						
ANR	5079880	Symbol	TRUE		5079842						
ANR	5079881	Symbol	is		5079842						
ANR	5079882	Symbol	FALSE		5079842						
ANR	5079883	Symbol	should_be		5079842						
ANR	5079884	Function	verify_min_number_args	280:0:6653:6866							
ANR	5079885	FunctionDef	"verify_min_number_args (const int is , const int minimum)"		5079884	0					
ANR	5079886	CompoundStatement		281:57:6714:6866	5079884	0					
ANR	5079887	IfStatement	if ( is < minimum )		5079884	0					
ANR	5079888	Condition	is < minimum	282:5:6721:6732	5079884	0	True				
ANR	5079889	RelationalExpression	is < minimum		5079884	0		<			
ANR	5079890	Identifier	is		5079884	0					
ANR	5079891	Identifier	minimum		5079884	1					
ANR	5079892	CompoundStatement		2:20:21:21	5079884	1					
ANR	5079893	ExpressionStatement	"dprintf ( D_ALWAYS , ""Wrong # of args %d, should be more than or equal to %d\\n"" , is , minimum )"	283:2:6740:6831	5079884	0	True				
ANR	5079894	CallExpression	"dprintf ( D_ALWAYS , ""Wrong # of args %d, should be more than or equal to %d\\n"" , is , minimum )"		5079884	0					
ANR	5079895	Callee	dprintf		5079884	0					
ANR	5079896	Identifier	dprintf		5079884	0					
ANR	5079897	ArgumentList	D_ALWAYS		5079884	1					
ANR	5079898	Argument	D_ALWAYS		5079884	0					
ANR	5079899	Identifier	D_ALWAYS		5079884	0					
ANR	5079900	Argument	"""Wrong # of args %d, should be more than or equal to %d\\n"""		5079884	1					
ANR	5079901	PrimaryExpression	"""Wrong # of args %d, should be more than or equal to %d\\n"""		5079884	0					
ANR	5079902	Argument	is		5079884	2					
ANR	5079903	Identifier	is		5079884	0					
ANR	5079904	Argument	minimum		5079884	3					
ANR	5079905	Identifier	minimum		5079884	0					
ANR	5079906	ReturnStatement	return FALSE ;	284:2:6835:6847	5079884	1	True				
ANR	5079907	Identifier	FALSE		5079884	0					
ANR	5079908	ReturnStatement	return TRUE ;	286:1:6853:6864	5079884	1	True				
ANR	5079909	Identifier	TRUE		5079884	0					
ANR	5079910	ReturnType	int		5079884	1					
ANR	5079911	Identifier	verify_min_number_args		5079884	2					
ANR	5079912	ParameterList	"const int is , const int minimum"		5079884	3					
ANR	5079913	Parameter	const int is	281:24:6681:6692	5079884	0	True				
ANR	5079914	ParameterType	const int		5079884	0					
ANR	5079915	Identifier	is		5079884	1					
ANR	5079916	Parameter	const int minimum	281:38:6695:6711	5079884	1	True				
ANR	5079917	ParameterType	const int		5079884	0					
ANR	5079918	Identifier	minimum		5079884	1					
ANR	5079919	CFGEntryNode	ENTRY		5079884		True				
ANR	5079920	CFGExitNode	EXIT		5079884		True				
ANR	5079921	Symbol	D_ALWAYS		5079884						
ANR	5079922	Symbol	TRUE		5079884						
ANR	5079923	Symbol	is		5079884						
ANR	5079924	Symbol	FALSE		5079884						
ANR	5079925	Symbol	minimum		5079884						
ANR	5079926	Function	verify_request_id	289:0:6869:7073							
ANR	5079927	FunctionDef	verify_request_id (const char * s)		5079926	0					
ANR	5079928	CompoundStatement		290:35:6908:7073	5079926	0					
ANR	5079929	IdentifierDeclStatement	unsigned int i ;	291:4:6914:6928	5079926	0	True				
ANR	5079930	IdentifierDecl	i		5079926	0					
ANR	5079931	IdentifierDeclType	unsigned int		5079926	0					
ANR	5079932	Identifier	i		5079926	1					
ANR	5079933	ForStatement	for ( i = 0 ; i < strlen ( s ) ; i ++ )		5079926	1					
ANR	5079934	ForInit	i = 0 ;	292:6:6936:6939	5079926	0	True				
ANR	5079935	AssignmentExpression	i = 0		5079926	0		=			
ANR	5079936	Identifier	i		5079926	0					
ANR	5079937	PrimaryExpression	0		5079926	1					
ANR	5079938	Condition	i < strlen ( s )	292:11:6941:6951	5079926	1	True				
ANR	5079939	RelationalExpression	i < strlen ( s )		5079926	0		<			
ANR	5079940	Identifier	i		5079926	0					
ANR	5079941	CallExpression	strlen ( s )		5079926	1					
ANR	5079942	Callee	strlen		5079926	0					
ANR	5079943	Identifier	strlen		5079926	0					
ANR	5079944	ArgumentList	s		5079926	1					
ANR	5079945	Argument	s		5079926	0					
ANR	5079946	Identifier	s		5079926	0					
ANR	5079947	PostIncDecOperationExpression	i ++	292:24:6954:6956	5079926	2	True				
ANR	5079948	Identifier	i		5079926	0					
ANR	5079949	IncDec	++		5079926	1					
ANR	5079950	CompoundStatement		3:29:50:50	5079926	3					
ANR	5079951	IfStatement	if ( ! isdigit ( s [ i ] ) )		5079926	0					
ANR	5079952	Condition	! isdigit ( s [ i ] )	293:6:6967:6980	5079926	0	True				
ANR	5079953	UnaryOperationExpression	! isdigit ( s [ i ] )		5079926	0					
ANR	5079954	UnaryOperator	!		5079926	0					
ANR	5079955	CallExpression	isdigit ( s [ i ] )		5079926	1					
ANR	5079956	Callee	isdigit		5079926	0					
ANR	5079957	Identifier	isdigit		5079926	0					
ANR	5079958	ArgumentList	s [ i ]		5079926	1					
ANR	5079959	Argument	s [ i ]		5079926	0					
ANR	5079960	ArrayIndexing	s [ i ]		5079926	0					
ANR	5079961	Identifier	s		5079926	0					
ANR	5079962	Identifier	i		5079926	1					
ANR	5079963	CompoundStatement		4:22:74:74	5079926	1					
ANR	5079964	ExpressionStatement	"dprintf ( D_ALWAYS , ""Bad request id %s\\n"" , s )"	294:3:6988:7032	5079926	0	True				
ANR	5079965	CallExpression	"dprintf ( D_ALWAYS , ""Bad request id %s\\n"" , s )"		5079926	0					
ANR	5079966	Callee	dprintf		5079926	0					
ANR	5079967	Identifier	dprintf		5079926	0					
ANR	5079968	ArgumentList	D_ALWAYS		5079926	1					
ANR	5079969	Argument	D_ALWAYS		5079926	0					
ANR	5079970	Identifier	D_ALWAYS		5079926	0					
ANR	5079971	Argument	"""Bad request id %s\\n"""		5079926	1					
ANR	5079972	PrimaryExpression	"""Bad request id %s\\n"""		5079926	0					
ANR	5079973	Argument	s		5079926	2					
ANR	5079974	Identifier	s		5079926	0					
ANR	5079975	ReturnStatement	return FALSE ;	295:3:7037:7049	5079926	1	True				
ANR	5079976	Identifier	FALSE		5079926	0					
ANR	5079977	ReturnStatement	return TRUE ;	299:1:7060:7071	5079926	2	True				
ANR	5079978	Identifier	TRUE		5079926	0					
ANR	5079979	ReturnType	int		5079926	1					
ANR	5079980	Identifier	verify_request_id		5079926	2					
ANR	5079981	ParameterList	const char * s		5079926	3					
ANR	5079982	Parameter	const char * s	290:19:6892:6905	5079926	0	True				
ANR	5079983	ParameterType	const char *		5079926	0					
ANR	5079984	Identifier	s		5079926	1					
ANR	5079985	CFGEntryNode	ENTRY		5079926		True				
ANR	5079986	CFGExitNode	EXIT		5079926		True				
ANR	5079987	Symbol	strlen		5079926						
ANR	5079988	Symbol	s		5079926						
ANR	5079989	Symbol	* i		5079926						
ANR	5079990	Symbol	D_ALWAYS		5079926						
ANR	5079991	Symbol	i		5079926						
ANR	5079992	Symbol	TRUE		5079926						
ANR	5079993	Symbol	FALSE		5079926						
ANR	5079994	Symbol	* s		5079926						
ANR	5079995	Symbol	isdigit		5079926						
ANR	5079996	Function	verify_string_name	302:0:7076:7390							
ANR	5079997	FunctionDef	verify_string_name (const char * s)		5079996	0					
ANR	5079998	CompoundStatement		303:35:7115:7390	5079996	0					
ANR	5079999	IfStatement	if ( s == NULL )		5079996	0					
ANR	5080000	Condition	s == NULL	304:8:7125:7133	5079996	0	True				
ANR	5080001	EqualityExpression	s == NULL		5079996	0		==			
ANR	5080002	Identifier	s		5079996	0					
ANR	5080003	Identifier	NULL		5079996	1					
ANR	5080004	CompoundStatement		2:20:21:21	5079996	1					
ANR	5080005	ExpressionStatement	"dprintf ( D_ALWAYS , ""verify_string_name() failed: string is NULL.\\n"" )"	305:8:7147:7216	5079996	0	True				
ANR	5080006	CallExpression	"dprintf ( D_ALWAYS , ""verify_string_name() failed: string is NULL.\\n"" )"		5079996	0					
ANR	5080007	Callee	dprintf		5079996	0					
ANR	5080008	Identifier	dprintf		5079996	0					
ANR	5080009	ArgumentList	D_ALWAYS		5079996	1					
ANR	5080010	Argument	D_ALWAYS		5079996	0					
ANR	5080011	Identifier	D_ALWAYS		5079996	0					
ANR	5080012	Argument	"""verify_string_name() failed: string is NULL.\\n"""		5079996	1					
ANR	5080013	PrimaryExpression	"""verify_string_name() failed: string is NULL.\\n"""		5079996	0					
ANR	5080014	ReturnStatement	return false ;	306:8:7226:7238	5079996	1	True				
ANR	5080015	Identifier	false		5079996	0					
ANR	5080016	IfStatement	if ( strlen ( s ) <= 0 )		5079996	1					
ANR	5080017	Condition	strlen ( s ) <= 0	308:8:7254:7267	5079996	0	True				
ANR	5080018	RelationalExpression	strlen ( s ) <= 0		5079996	0		<=			
ANR	5080019	CallExpression	strlen ( s )		5079996	0					
ANR	5080020	Callee	strlen		5079996	0					
ANR	5080021	Identifier	strlen		5079996	0					
ANR	5080022	ArgumentList	s		5079996	1					
ANR	5080023	Argument	s		5079996	0					
ANR	5080024	Identifier	s		5079996	0					
ANR	5080025	PrimaryExpression	0		5079996	1					
ANR	5080026	CompoundStatement		6:25:155:155	5079996	1					
ANR	5080027	ExpressionStatement	"dprintf ( D_ALWAYS , ""verify_string_name() failed: string is zero-length.\\n"" )"	309:8:7281:7357	5079996	0	True				
ANR	5080028	CallExpression	"dprintf ( D_ALWAYS , ""verify_string_name() failed: string is zero-length.\\n"" )"		5079996	0					
ANR	5080029	Callee	dprintf		5079996	0					
ANR	5080030	Identifier	dprintf		5079996	0					
ANR	5080031	ArgumentList	D_ALWAYS		5079996	1					
ANR	5080032	Argument	D_ALWAYS		5079996	0					
ANR	5080033	Identifier	D_ALWAYS		5079996	0					
ANR	5080034	Argument	"""verify_string_name() failed: string is zero-length.\\n"""		5079996	1					
ANR	5080035	PrimaryExpression	"""verify_string_name() failed: string is zero-length.\\n"""		5079996	0					
ANR	5080036	ReturnStatement	return true ;	311:4:7377:7388	5079996	2	True				
ANR	5080037	Identifier	true		5079996	0					
ANR	5080038	ReturnType	int		5079996	1					
ANR	5080039	Identifier	verify_string_name		5079996	2					
ANR	5080040	ParameterList	const char * s		5079996	3					
ANR	5080041	Parameter	const char * s	303:19:7099:7112	5079996	0	True				
ANR	5080042	ParameterType	const char *		5079996	0					
ANR	5080043	Identifier	s		5079996	1					
ANR	5080044	CFGEntryNode	ENTRY		5079996		True				
ANR	5080045	CFGExitNode	EXIT		5079996		True				
ANR	5080046	Symbol	strlen		5079996						
ANR	5080047	Symbol	s		5079996						
ANR	5080048	Symbol	NULL		5079996						
ANR	5080049	Symbol	D_ALWAYS		5079996						
ANR	5080050	Symbol	false		5079996						
ANR	5080051	Symbol	true		5079996						
ANR	5080052	Function	verify_number	314:0:7393:7670							
ANR	5080053	FunctionDef	verify_number (const char * s)		5080052	0					
ANR	5080054	CompoundStatement		315:31:7428:7670	5080052	0					
ANR	5080055	IfStatement	if ( ! s || ! ( * s ) )		5080052	0					
ANR	5080056	Condition	! s || ! ( * s )	316:5:7435:7445	5080052	0	True				
ANR	5080057	OrExpression	! s || ! ( * s )		5080052	0		||			
ANR	5080058	UnaryOperationExpression	! s		5080052	0					
ANR	5080059	UnaryOperator	!		5080052	0					
ANR	5080060	Identifier	s		5080052	1					
ANR	5080061	UnaryOperationExpression	! ( * s )		5080052	1					
ANR	5080062	UnaryOperator	!		5080052	0					
ANR	5080063	UnaryOperationExpression	* s		5080052	1					
ANR	5080064	UnaryOperator	*		5080052	0					
ANR	5080065	Identifier	s		5080052	1					
ANR	5080066	CompoundStatement		2:18:19:19	5080052	1					
ANR	5080067	ExpressionStatement	"dprintf ( D_ALWAYS , ""No digit number\\n"" )"	317:2:7452:7491	5080052	0	True				
ANR	5080068	CallExpression	"dprintf ( D_ALWAYS , ""No digit number\\n"" )"		5080052	0					
ANR	5080069	Callee	dprintf		5080052	0					
ANR	5080070	Identifier	dprintf		5080052	0					
ANR	5080071	ArgumentList	D_ALWAYS		5080052	1					
ANR	5080072	Argument	D_ALWAYS		5080052	0					
ANR	5080073	Identifier	D_ALWAYS		5080052	0					
ANR	5080074	Argument	"""No digit number\\n"""		5080052	1					
ANR	5080075	PrimaryExpression	"""No digit number\\n"""		5080052	0					
ANR	5080076	ReturnStatement	return FALSE ;	318:2:7495:7507	5080052	1	True				
ANR	5080077	Identifier	FALSE		5080052	0					
ANR	5080078	IdentifierDeclStatement	int i = 0 ;	321:1:7515:7522	5080052	1	True				
ANR	5080079	IdentifierDecl	i = 0		5080052	0					
ANR	5080080	IdentifierDeclType	int		5080052	0					
ANR	5080081	Identifier	i		5080052	1					
ANR	5080082	AssignmentExpression	i = 0		5080052	2		=			
ANR	5080083	Identifier	i		5080052	0					
ANR	5080084	PrimaryExpression	0		5080052	1					
ANR	5080085	DoStatement	do		5080052	2					
ANR	5080086	CompoundStatement		9:4:103:103	5080052	0					
ANR	5080087	IfStatement	if ( s [ i ] < '0' || s [ i ] > '9' )		5080052	0					
ANR	5080088	Condition	s [ i ] < '0' || s [ i ] > '9'	324:6:7540:7559	5080052	0	True				
ANR	5080089	OrExpression	s [ i ] < '0' || s [ i ] > '9'		5080052	0		||			
ANR	5080090	RelationalExpression	s [ i ] < '0'		5080052	0		<			
ANR	5080091	ArrayIndexing	s [ i ]		5080052	0					
ANR	5080092	Identifier	s		5080052	0					
ANR	5080093	Identifier	i		5080052	1					
ANR	5080094	PrimaryExpression	'0'		5080052	1					
ANR	5080095	RelationalExpression	s [ i ] > '9'		5080052	1		>			
ANR	5080096	ArrayIndexing	s [ i ]		5080052	0					
ANR	5080097	Identifier	s		5080052	0					
ANR	5080098	Identifier	i		5080052	1					
ANR	5080099	PrimaryExpression	'9'		5080052	1					
ANR	5080100	CompoundStatement		10:28:133:133	5080052	1					
ANR	5080101	ExpressionStatement	"dprintf ( D_ALWAYS , ""Bad digit number %s\\n"" , s )"	325:3:7567:7613	5080052	0	True				
ANR	5080102	CallExpression	"dprintf ( D_ALWAYS , ""Bad digit number %s\\n"" , s )"		5080052	0					
ANR	5080103	Callee	dprintf		5080052	0					
ANR	5080104	Identifier	dprintf		5080052	0					
ANR	5080105	ArgumentList	D_ALWAYS		5080052	1					
ANR	5080106	Argument	D_ALWAYS		5080052	0					
ANR	5080107	Identifier	D_ALWAYS		5080052	0					
ANR	5080108	Argument	"""Bad digit number %s\\n"""		5080052	1					
ANR	5080109	PrimaryExpression	"""Bad digit number %s\\n"""		5080052	0					
ANR	5080110	Argument	s		5080052	2					
ANR	5080111	Identifier	s		5080052	0					
ANR	5080112	ReturnStatement	return FALSE ;	326:3:7618:7630	5080052	1	True				
ANR	5080113	Identifier	FALSE		5080052	0					
ANR	5080114	Condition	s [ ++ i ]	328:10:7646:7651	5080052	1	True				
ANR	5080115	ArrayIndexing	s [ ++ i ]		5080052	0					
ANR	5080116	Identifier	s		5080052	0					
ANR	5080117	UnaryExpression	++ i		5080052	1					
ANR	5080118	IncDec	++		5080052	0					
ANR	5080119	Identifier	i		5080052	1					
ANR	5080120	ReturnStatement	return TRUE ;	330:1:7657:7668	5080052	3	True				
ANR	5080121	Identifier	TRUE		5080052	0					
ANR	5080122	ReturnType	int		5080052	1					
ANR	5080123	Identifier	verify_number		5080052	2					
ANR	5080124	ParameterList	const char * s		5080052	3					
ANR	5080125	Parameter	const char * s	315:15:7412:7425	5080052	0	True				
ANR	5080126	ParameterType	const char *		5080052	0					
ANR	5080127	Identifier	s		5080052	1					
ANR	5080128	CFGEntryNode	ENTRY		5080052		True				
ANR	5080129	CFGExitNode	EXIT		5080052		True				
ANR	5080130	Symbol	s		5080052						
ANR	5080131	Symbol	* i		5080052						
ANR	5080132	Symbol	D_ALWAYS		5080052						
ANR	5080133	Symbol	i		5080052						
ANR	5080134	Symbol	TRUE		5080052						
ANR	5080135	Symbol	FALSE		5080052						
ANR	5080136	Symbol	* s		5080052						
ANR	5080137	Function	check_access_and_secret_key_file	333:0:7673:8297							
ANR	5080138	FunctionDef	"check_access_and_secret_key_file (const char * accesskeyfile , const char * secretkeyfile , std :: string & err_msg)"		5080137	0					
ANR	5080139	CompoundStatement		334:0:7787:8297	5080137	0					
ANR	5080140	IfStatement	if ( ! check_read_access_file ( accesskeyfile ) )		5080137	0					
ANR	5080141	Condition	! check_read_access_file ( accesskeyfile )	336:5:7822:7859	5080137	0	True				
ANR	5080142	UnaryOperationExpression	! check_read_access_file ( accesskeyfile )		5080137	0					
ANR	5080143	UnaryOperator	!		5080137	0					
ANR	5080144	CallExpression	check_read_access_file ( accesskeyfile )		5080137	1					
ANR	5080145	Callee	check_read_access_file		5080137	0					
ANR	5080146	Identifier	check_read_access_file		5080137	0					
ANR	5080147	ArgumentList	accesskeyfile		5080137	1					
ANR	5080148	Argument	accesskeyfile		5080137	0					
ANR	5080149	Identifier	accesskeyfile		5080137	0					
ANR	5080150	CompoundStatement		3:46:75:75	5080137	1					
ANR	5080151	ExpressionStatement	"sprintf ( err_msg , ""Cannot_read_access_key_file(%s)"" , accesskeyfile ? accesskeyfile : """" )"	337:2:7867:7951	5080137	0	True				
ANR	5080152	CallExpression	"sprintf ( err_msg , ""Cannot_read_access_key_file(%s)"" , accesskeyfile ? accesskeyfile : """" )"		5080137	0					
ANR	5080153	Callee	sprintf		5080137	0					
ANR	5080154	Identifier	sprintf		5080137	0					
ANR	5080155	ArgumentList	err_msg		5080137	1					
ANR	5080156	Argument	err_msg		5080137	0					
ANR	5080157	Identifier	err_msg		5080137	0					
ANR	5080158	Argument	"""Cannot_read_access_key_file(%s)"""		5080137	1					
ANR	5080159	PrimaryExpression	"""Cannot_read_access_key_file(%s)"""		5080137	0					
ANR	5080160	Argument	"accesskeyfile ? accesskeyfile : """""		5080137	2					
ANR	5080161	ConditionalExpression	"accesskeyfile ? accesskeyfile : """""		5080137	0					
ANR	5080162	Condition	accesskeyfile		5080137	0					
ANR	5080163	Identifier	accesskeyfile		5080137	0					
ANR	5080164	Identifier	accesskeyfile		5080137	1					
ANR	5080165	PrimaryExpression	""""""		5080137	2					
ANR	5080166	ExpressionStatement	"dprintf ( D_ALWAYS , ""Error: %s\\n"" , err_msg . c_str ( ) )"	338:2:7955:8005	5080137	1	True				
ANR	5080167	CallExpression	"dprintf ( D_ALWAYS , ""Error: %s\\n"" , err_msg . c_str ( ) )"		5080137	0					
ANR	5080168	Callee	dprintf		5080137	0					
ANR	5080169	Identifier	dprintf		5080137	0					
ANR	5080170	ArgumentList	D_ALWAYS		5080137	1					
ANR	5080171	Argument	D_ALWAYS		5080137	0					
ANR	5080172	Identifier	D_ALWAYS		5080137	0					
ANR	5080173	Argument	"""Error: %s\\n"""		5080137	1					
ANR	5080174	PrimaryExpression	"""Error: %s\\n"""		5080137	0					
ANR	5080175	Argument	err_msg . c_str ( )		5080137	2					
ANR	5080176	CallExpression	err_msg . c_str ( )		5080137	0					
ANR	5080177	Callee	err_msg . c_str		5080137	0					
ANR	5080178	MemberAccess	err_msg . c_str		5080137	0					
ANR	5080179	Identifier	err_msg		5080137	0					
ANR	5080180	Identifier	c_str		5080137	1					
ANR	5080181	ArgumentList			5080137	1					
ANR	5080182	ReturnStatement	return false ;	339:2:8009:8021	5080137	2	True				
ANR	5080183	Identifier	false		5080137	0					
ANR	5080184	IfStatement	if ( ! check_read_access_file ( secretkeyfile ) )		5080137	1					
ANR	5080185	Condition	! check_read_access_file ( secretkeyfile )	343:5:8078:8115	5080137	0	True				
ANR	5080186	UnaryOperationExpression	! check_read_access_file ( secretkeyfile )		5080137	0					
ANR	5080187	UnaryOperator	!		5080137	0					
ANR	5080188	CallExpression	check_read_access_file ( secretkeyfile )		5080137	1					
ANR	5080189	Callee	check_read_access_file		5080137	0					
ANR	5080190	Identifier	check_read_access_file		5080137	0					
ANR	5080191	ArgumentList	secretkeyfile		5080137	1					
ANR	5080192	Argument	secretkeyfile		5080137	0					
ANR	5080193	Identifier	secretkeyfile		5080137	0					
ANR	5080194	CompoundStatement		10:46:331:331	5080137	1					
ANR	5080195	ExpressionStatement	"sprintf ( err_msg , ""Cannot_read_secret_key_file(%s)"" , secretkeyfile ? secretkeyfile : """" )"	344:2:8123:8207	5080137	0	True				
ANR	5080196	CallExpression	"sprintf ( err_msg , ""Cannot_read_secret_key_file(%s)"" , secretkeyfile ? secretkeyfile : """" )"		5080137	0					
ANR	5080197	Callee	sprintf		5080137	0					
ANR	5080198	Identifier	sprintf		5080137	0					
ANR	5080199	ArgumentList	err_msg		5080137	1					
ANR	5080200	Argument	err_msg		5080137	0					
ANR	5080201	Identifier	err_msg		5080137	0					
ANR	5080202	Argument	"""Cannot_read_secret_key_file(%s)"""		5080137	1					
ANR	5080203	PrimaryExpression	"""Cannot_read_secret_key_file(%s)"""		5080137	0					
ANR	5080204	Argument	"secretkeyfile ? secretkeyfile : """""		5080137	2					
ANR	5080205	ConditionalExpression	"secretkeyfile ? secretkeyfile : """""		5080137	0					
ANR	5080206	Condition	secretkeyfile		5080137	0					
ANR	5080207	Identifier	secretkeyfile		5080137	0					
ANR	5080208	Identifier	secretkeyfile		5080137	1					
ANR	5080209	PrimaryExpression	""""""		5080137	2					
ANR	5080210	ExpressionStatement	"dprintf ( D_ALWAYS , ""Error: %s\\n"" , err_msg . c_str ( ) )"	345:2:8211:8261	5080137	1	True				
ANR	5080211	CallExpression	"dprintf ( D_ALWAYS , ""Error: %s\\n"" , err_msg . c_str ( ) )"		5080137	0					
ANR	5080212	Callee	dprintf		5080137	0					
ANR	5080213	Identifier	dprintf		5080137	0					
ANR	5080214	ArgumentList	D_ALWAYS		5080137	1					
ANR	5080215	Argument	D_ALWAYS		5080137	0					
ANR	5080216	Identifier	D_ALWAYS		5080137	0					
ANR	5080217	Argument	"""Error: %s\\n"""		5080137	1					
ANR	5080218	PrimaryExpression	"""Error: %s\\n"""		5080137	0					
ANR	5080219	Argument	err_msg . c_str ( )		5080137	2					
ANR	5080220	CallExpression	err_msg . c_str ( )		5080137	0					
ANR	5080221	Callee	err_msg . c_str		5080137	0					
ANR	5080222	MemberAccess	err_msg . c_str		5080137	0					
ANR	5080223	Identifier	err_msg		5080137	0					
ANR	5080224	Identifier	c_str		5080137	1					
ANR	5080225	ArgumentList			5080137	1					
ANR	5080226	ReturnStatement	return false ;	346:2:8265:8277	5080137	2	True				
ANR	5080227	Identifier	false		5080137	0					
ANR	5080228	ReturnStatement	return true ;	349:1:8284:8295	5080137	2	True				
ANR	5080229	Identifier	true		5080137	0					
ANR	5080230	ReturnType	bool		5080137	1					
ANR	5080231	Identifier	check_access_and_secret_key_file		5080137	2					
ANR	5080232	ParameterList	"const char * accesskeyfile , const char * secretkeyfile , std :: string & err_msg"		5080137	3					
ANR	5080233	Parameter	const char * accesskeyfile	333:38:7711:7735	5080137	0	True				
ANR	5080234	ParameterType	const char *		5080137	0					
ANR	5080235	Identifier	accesskeyfile		5080137	1					
ANR	5080236	Parameter	const char * secretkeyfile	333:65:7738:7762	5080137	1	True				
ANR	5080237	ParameterType	const char *		5080137	0					
ANR	5080238	Identifier	secretkeyfile		5080137	1					
ANR	5080239	Parameter	std :: string & err_msg	333:92:7765:7784	5080137	2	True				
ANR	5080240	ParameterType	std :: string &		5080137	0					
ANR	5080241	Identifier	err_msg		5080137	1					
ANR	5080242	CFGEntryNode	ENTRY		5080137		True				
ANR	5080243	CFGExitNode	EXIT		5080137		True				
ANR	5080244	Symbol	check_read_access_file		5080137						
ANR	5080245	Symbol	accesskeyfile		5080137						
ANR	5080246	Symbol	err_msg . c_str		5080137						
ANR	5080247	Symbol	secretkeyfile		5080137						
ANR	5080248	Symbol	err_msg		5080137						
ANR	5080249	Symbol	D_ALWAYS		5080137						
ANR	5080250	Symbol	false		5080137						
ANR	5080251	Symbol	true		5080137						
ANR	5080252	Function	get_int	353:0:8317:8392							
ANR	5080253	FunctionDef	"get_int (const char * blah , int * s)"		5080252	0					
ANR	5080254	CompoundStatement		354:37:8358:8392	5080252	0					
ANR	5080255	ExpressionStatement	* s = atoi ( blah )	355:1:8361:8376	5080252	0	True				
ANR	5080256	AssignmentExpression	* s = atoi ( blah )		5080252	0		=			
ANR	5080257	UnaryOperationExpression	* s		5080252	0					
ANR	5080258	UnaryOperator	*		5080252	0					
ANR	5080259	Identifier	s		5080252	1					
ANR	5080260	CallExpression	atoi ( blah )		5080252	1					
ANR	5080261	Callee	atoi		5080252	0					
ANR	5080262	Identifier	atoi		5080252	0					
ANR	5080263	ArgumentList	blah		5080252	1					
ANR	5080264	Argument	blah		5080252	0					
ANR	5080265	Identifier	blah		5080252	0					
ANR	5080266	ReturnStatement	return TRUE ;	356:1:8379:8390	5080252	1	True				
ANR	5080267	Identifier	TRUE		5080252	0					
ANR	5080268	ReturnType	int		5080252	1					
ANR	5080269	Identifier	get_int		5080252	2					
ANR	5080270	ParameterList	"const char * blah , int * s"		5080252	3					
ANR	5080271	Parameter	const char * blah	354:9:8330:8346	5080252	0	True				
ANR	5080272	ParameterType	const char *		5080252	0					
ANR	5080273	Identifier	blah		5080252	1					
ANR	5080274	Parameter	int * s	354:28:8349:8355	5080252	1	True				
ANR	5080275	ParameterType	int *		5080252	0					
ANR	5080276	Identifier	s		5080252	1					
ANR	5080277	CFGEntryNode	ENTRY		5080252		True				
ANR	5080278	CFGExitNode	EXIT		5080252		True				
ANR	5080279	Symbol	atoi		5080252						
ANR	5080280	Symbol	s		5080252						
ANR	5080281	Symbol	TRUE		5080252						
ANR	5080282	Symbol	* s		5080252						
ANR	5080283	Symbol	blah		5080252						
ANR	5080284	Function	get_ulong	359:0:8395:8495							
ANR	5080285	FunctionDef	"get_ulong (const char * blah , unsigned long * s)"		5080284	0					
ANR	5080286	CompoundStatement		360:49:8448:8495	5080284	0					
ANR	5080287	ExpressionStatement	* s = ( unsigned long ) atol ( blah )	361:1:8451:8479	5080284	0	True				
ANR	5080288	AssignmentExpression	* s = ( unsigned long ) atol ( blah )		5080284	0		=			
ANR	5080289	UnaryOperationExpression	* s		5080284	0					
ANR	5080290	UnaryOperator	*		5080284	0					
ANR	5080291	Identifier	s		5080284	1					
ANR	5080292	CastExpression	( unsigned long ) atol ( blah )		5080284	1					
ANR	5080293	CastTarget	unsigned long		5080284	0					
ANR	5080294	CallExpression	atol ( blah )		5080284	1					
ANR	5080295	Callee	atol		5080284	0					
ANR	5080296	Identifier	atol		5080284	0					
ANR	5080297	ArgumentList	blah		5080284	1					
ANR	5080298	Argument	blah		5080284	0					
ANR	5080299	Identifier	blah		5080284	0					
ANR	5080300	ReturnStatement	return TRUE ;	362:1:8482:8493	5080284	1	True				
ANR	5080301	Identifier	TRUE		5080284	0					
ANR	5080302	ReturnType	int		5080284	1					
ANR	5080303	Identifier	get_ulong		5080284	2					
ANR	5080304	ParameterList	"const char * blah , unsigned long * s"		5080284	3					
ANR	5080305	Parameter	const char * blah	360:11:8410:8426	5080284	0	True				
ANR	5080306	ParameterType	const char *		5080284	0					
ANR	5080307	Identifier	blah		5080284	1					
ANR	5080308	Parameter	unsigned long * s	360:30:8429:8445	5080284	1	True				
ANR	5080309	ParameterType	unsigned long *		5080284	0					
ANR	5080310	Identifier	s		5080284	1					
ANR	5080311	CFGEntryNode	ENTRY		5080284		True				
ANR	5080312	CFGExitNode	EXIT		5080284		True				
ANR	5080313	Symbol	s		5080284						
ANR	5080314	Symbol	TRUE		5080284						
ANR	5080315	Symbol	atol		5080284						
ANR	5080316	Symbol	* s		5080284						
ANR	5080317	Symbol	blah		5080284						
ANR	5080318	Function	create_output_string	365:0:8498:9014							
ANR	5080319	FunctionDef	"create_output_string (int req_id , const char * * results , const int argc)"		5080318	0					
ANR	5080320	CompoundStatement		367:0:8583:9014	5080318	0					
ANR	5080321	IdentifierDeclStatement	std :: string buffer ;	368:1:8586:8604	5080318	0	True				
ANR	5080322	IdentifierDecl	buffer		5080318	0					
ANR	5080323	IdentifierDeclType	std :: string		5080318	0					
ANR	5080324	Identifier	buffer		5080318	1					
ANR	5080325	ExpressionStatement	"sprintf ( buffer , ""%d"" , req_id )"	370:1:8608:8639	5080318	1	True				
ANR	5080326	CallExpression	"sprintf ( buffer , ""%d"" , req_id )"		5080318	0					
ANR	5080327	Callee	sprintf		5080318	0					
ANR	5080328	Identifier	sprintf		5080318	0					
ANR	5080329	ArgumentList	buffer		5080318	1					
ANR	5080330	Argument	buffer		5080318	0					
ANR	5080331	Identifier	buffer		5080318	0					
ANR	5080332	Argument	"""%d"""		5080318	1					
ANR	5080333	PrimaryExpression	"""%d"""		5080318	0					
ANR	5080334	Argument	req_id		5080318	2					
ANR	5080335	Identifier	req_id		5080318	0					
ANR	5080336	ForStatement	for ( int i = 0 ; i < argc ; i ++ )		5080318	2					
ANR	5080337	ForInit	int i = 0 ;	372:7:8649:8658	5080318	0	True				
ANR	5080338	IdentifierDeclStatement	int i = 0 ;		5080318	0					
ANR	5080339	IdentifierDecl	i = 0		5080318	0					
ANR	5080340	IdentifierDeclType	int		5080318	0					
ANR	5080341	Identifier	i		5080318	1					
ANR	5080342	AssignmentExpression	i = 0		5080318	2		=			
ANR	5080343	Identifier	i		5080318	0					
ANR	5080344	PrimaryExpression	0		5080318	1					
ANR	5080345	Condition	i < argc	372:18:8660:8667	5080318	1	True				
ANR	5080346	RelationalExpression	i < argc		5080318	0		<			
ANR	5080347	Identifier	i		5080318	0					
ANR	5080348	Identifier	argc		5080318	1					
ANR	5080349	PostIncDecOperationExpression	i ++	372:28:8670:8672	5080318	2	True				
ANR	5080350	Identifier	i		5080318	0					
ANR	5080351	IncDec	++		5080318	1					
ANR	5080352	CompoundStatement		6:34:92:92	5080318	3					
ANR	5080353	ExpressionStatement	buffer += ' '	373:2:8680:8693	5080318	0	True				
ANR	5080354	AssignmentExpression	buffer += ' '		5080318	0		+=			
ANR	5080355	Identifier	buffer		5080318	0					
ANR	5080356	PrimaryExpression	' '		5080318	1					
ANR	5080357	IfStatement	if ( results [ i ] == NULL )		5080318	1					
ANR	5080358	Condition	results [ i ] == NULL	374:7:8702:8719	5080318	0	True				
ANR	5080359	EqualityExpression	results [ i ] == NULL		5080318	0		==			
ANR	5080360	ArrayIndexing	results [ i ]		5080318	0					
ANR	5080361	Identifier	results		5080318	0					
ANR	5080362	Identifier	i		5080318	1					
ANR	5080363	Identifier	NULL		5080318	1					
ANR	5080364	CompoundStatement		8:28:139:139	5080318	1					
ANR	5080365	ExpressionStatement	"buffer += ""NULL"""	375:3:8728:8744	5080318	0	True				
ANR	5080366	AssignmentExpression	"buffer += ""NULL"""		5080318	0		+=			
ANR	5080367	Identifier	buffer		5080318	0					
ANR	5080368	PrimaryExpression	"""NULL"""		5080318	1					
ANR	5080369	ElseStatement	else		5080318	0					
ANR	5080370	CompoundStatement		10:9:171:171	5080318	0					
ANR	5080371	ForStatement	for ( int j = 0 ; results [ i ] [ j ] != '\\0' ; j ++ )		5080318	0					
ANR	5080372	ForInit	int j = 0 ;	377:9:8766:8775	5080318	0	True				
ANR	5080373	IdentifierDeclStatement	int j = 0 ;		5080318	0					
ANR	5080374	IdentifierDecl	j = 0		5080318	0					
ANR	5080375	IdentifierDeclType	int		5080318	0					
ANR	5080376	Identifier	j		5080318	1					
ANR	5080377	AssignmentExpression	j = 0		5080318	2		=			
ANR	5080378	Identifier	j		5080318	0					
ANR	5080379	PrimaryExpression	0		5080318	1					
ANR	5080380	Condition	results [ i ] [ j ] != '\\0'	377:20:8777:8797	5080318	1	True				
ANR	5080381	EqualityExpression	results [ i ] [ j ] != '\\0'		5080318	0		!=			
ANR	5080382	ArrayIndexing	results [ i ] [ j ]		5080318	0					
ANR	5080383	ArrayIndexing	results [ i ]		5080318	0					
ANR	5080384	Identifier	results		5080318	0					
ANR	5080385	Identifier	i		5080318	1					
ANR	5080386	Identifier	j		5080318	1					
ANR	5080387	PrimaryExpression	'\\0'		5080318	1					
ANR	5080388	PostIncDecOperationExpression	j ++	377:43:8800:8802	5080318	2	True				
ANR	5080389	Identifier	j		5080318	0					
ANR	5080390	IncDec	++		5080318	1					
ANR	5080391	CompoundStatement		11:49:222:222	5080318	3					
ANR	5080392	SwitchStatement	switch ( results [ i ] [ j ] )		5080318	0					
ANR	5080393	Condition	results [ i ] [ j ]	378:13:8821:8833	5080318	0	True				
ANR	5080394	ArrayIndexing	results [ i ] [ j ]		5080318	0					
ANR	5080395	ArrayIndexing	results [ i ]		5080318	0					
ANR	5080396	Identifier	results		5080318	0					
ANR	5080397	Identifier	i		5080318	1					
ANR	5080398	Identifier	j		5080318	1					
ANR	5080399	CompoundStatement		12:29:253:253	5080318	1					
ANR	5080400	Label	case ' ' :	379:4:8843:8851	5080318	0	True				
ANR	5080401	Label	case '\\\\' :	380:4:8857:8866	5080318	1	True				
ANR	5080402	Label	case '\\r' :	381:4:8872:8881	5080318	2	True				
ANR	5080403	Label	case '\\n' :	382:4:8887:8896	5080318	3	True				
ANR	5080404	ExpressionStatement	buffer += '\\\\'	383:5:8903:8917	5080318	4	True				
ANR	5080405	AssignmentExpression	buffer += '\\\\'		5080318	0		+=			
ANR	5080406	Identifier	buffer		5080318	0					
ANR	5080407	PrimaryExpression	'\\\\'		5080318	1					
ANR	5080408	Label	default :	384:4:8923:8930	5080318	5	True				
ANR	5080409	Identifier	default		5080318	0					
ANR	5080410	ExpressionStatement	buffer += results [ i ] [ j ]	385:5:8937:8960	5080318	6	True				
ANR	5080411	AssignmentExpression	buffer += results [ i ] [ j ]		5080318	0		+=			
ANR	5080412	Identifier	buffer		5080318	0					
ANR	5080413	ArrayIndexing	results [ i ] [ j ]		5080318	1					
ANR	5080414	ArrayIndexing	results [ i ]		5080318	0					
ANR	5080415	Identifier	results		5080318	0					
ANR	5080416	Identifier	i		5080318	1					
ANR	5080417	Identifier	j		5080318	1					
ANR	5080418	ExpressionStatement	buffer += '\\n'	391:1:8982:8996	5080318	3	True				
ANR	5080419	AssignmentExpression	buffer += '\\n'		5080318	0		+=			
ANR	5080420	Identifier	buffer		5080318	0					
ANR	5080421	PrimaryExpression	'\\n'		5080318	1					
ANR	5080422	ReturnStatement	return buffer ;	392:1:8999:9012	5080318	4	True				
ANR	5080423	Identifier	buffer		5080318	0					
ANR	5080424	ReturnType	std :: string		5080318	1					
ANR	5080425	Identifier	create_output_string		5080318	2					
ANR	5080426	ParameterList	"int req_id , const char * * results , const int argc"		5080318	3					
ANR	5080427	Parameter	int req_id	366:22:8532:8541	5080318	0	True				
ANR	5080428	ParameterType	int		5080318	0					
ANR	5080429	Identifier	req_id		5080318	1					
ANR	5080430	Parameter	const char * * results	366:34:8544:8564	5080318	1	True				
ANR	5080431	ParameterType	const char * *		5080318	0					
ANR	5080432	Identifier	results		5080318	1					
ANR	5080433	Parameter	const int argc	366:57:8567:8580	5080318	2	True				
ANR	5080434	ParameterType	const int		5080318	0					
ANR	5080435	Identifier	argc		5080318	1					
ANR	5080436	CFGEntryNode	ENTRY		5080318		True				
ANR	5080437	CFGExitNode	EXIT		5080318		True				
ANR	5080438	Symbol	req_id		5080318						
ANR	5080439	Symbol	argc		5080318						
ANR	5080440	Symbol	* * i		5080318						
ANR	5080441	Symbol	* i		5080318						
ANR	5080442	Symbol	NULL		5080318						
ANR	5080443	Symbol	* j		5080318						
ANR	5080444	Symbol	* * results		5080318						
ANR	5080445	Symbol	i		5080318						
ANR	5080446	Symbol	j		5080318						
ANR	5080447	Symbol	buffer		5080318						
ANR	5080448	Symbol	* results		5080318						
ANR	5080449	Symbol	results		5080318						
ANR	5080450	Function	create_success_result	395:0:9017:9598							
ANR	5080451	FunctionDef	"create_success_result (int req_id , StringList * result_list)"		5080450	0					
ANR	5080452	CompoundStatement		397:0:9089:9598	5080450	0					
ANR	5080453	IdentifierDeclStatement	int index_count = 1 ;	398:1:9092:9111	5080450	0	True				
ANR	5080454	IdentifierDecl	index_count = 1		5080450	0					
ANR	5080455	IdentifierDeclType	int		5080450	0					
ANR	5080456	Identifier	index_count		5080450	1					
ANR	5080457	AssignmentExpression	index_count = 1		5080450	2		=			
ANR	5080458	Identifier	index_count		5080450	0					
ANR	5080459	PrimaryExpression	1		5080450	1					
ANR	5080460	IfStatement	if ( ! result_list || ( result_list -> number ( ) == 0 ) )		5080450	1					
ANR	5080461	Condition	! result_list || ( result_list -> number ( ) == 0 )	399:5:9118:9161	5080450	0	True				
ANR	5080462	OrExpression	! result_list || ( result_list -> number ( ) == 0 )		5080450	0		||			
ANR	5080463	UnaryOperationExpression	! result_list		5080450	0					
ANR	5080464	UnaryOperator	!		5080450	0					
ANR	5080465	Identifier	result_list		5080450	1					
ANR	5080466	EqualityExpression	result_list -> number ( ) == 0		5080450	1		==			
ANR	5080467	CallExpression	result_list -> number ( )		5080450	0					
ANR	5080468	Callee	result_list -> number		5080450	0					
ANR	5080469	PtrMemberAccess	result_list -> number		5080450	0					
ANR	5080470	Identifier	result_list		5080450	0					
ANR	5080471	Identifier	number		5080450	1					
ANR	5080472	ArgumentList			5080450	1					
ANR	5080473	PrimaryExpression	0		5080450	1					
ANR	5080474	CompoundStatement		3:52:75:75	5080450	1					
ANR	5080475	ExpressionStatement	index_count = 1	400:2:9169:9184	5080450	0	True				
ANR	5080476	AssignmentExpression	index_count = 1		5080450	0		=			
ANR	5080477	Identifier	index_count		5080450	0					
ANR	5080478	PrimaryExpression	1		5080450	1					
ANR	5080479	ElseStatement	else		5080450	0					
ANR	5080480	CompoundStatement		5:7:103:103	5080450	0					
ANR	5080481	ExpressionStatement	index_count = result_list -> number ( )	402:2:9197:9232	5080450	0	True				
ANR	5080482	AssignmentExpression	index_count = result_list -> number ( )		5080450	0		=			
ANR	5080483	Identifier	index_count		5080450	0					
ANR	5080484	CallExpression	result_list -> number ( )		5080450	1					
ANR	5080485	Callee	result_list -> number		5080450	0					
ANR	5080486	PtrMemberAccess	result_list -> number		5080450	0					
ANR	5080487	Identifier	result_list		5080450	0					
ANR	5080488	Identifier	number		5080450	1					
ANR	5080489	ArgumentList			5080450	1					
ANR	5080490	IdentifierDeclStatement	const char * tmp_result [ index_count ] ;	405:1:9239:9274	5080450	2	True				
ANR	5080491	IdentifierDecl	* tmp_result [ index_count ]		5080450	0					
ANR	5080492	IdentifierDeclType	const char * [ index_count ]		5080450	0					
ANR	5080493	Identifier	tmp_result		5080450	1					
ANR	5080494	Identifier	index_count		5080450	2					
ANR	5080495	ExpressionStatement	tmp_result [ 0 ] = AMAZON_COMMAND_SUCCESS_OUTPUT	407:1:9278:9323	5080450	3	True				
ANR	5080496	AssignmentExpression	tmp_result [ 0 ] = AMAZON_COMMAND_SUCCESS_OUTPUT		5080450	0		=			
ANR	5080497	ArrayIndexing	tmp_result [ 0 ]		5080450	0					
ANR	5080498	Identifier	tmp_result		5080450	0					
ANR	5080499	PrimaryExpression	0		5080450	1					
ANR	5080500	Identifier	AMAZON_COMMAND_SUCCESS_OUTPUT		5080450	1					
ANR	5080501	IdentifierDeclStatement	int i = 1 ;	409:1:9327:9336	5080450	4	True				
ANR	5080502	IdentifierDecl	i = 1		5080450	0					
ANR	5080503	IdentifierDeclType	int		5080450	0					
ANR	5080504	Identifier	i		5080450	1					
ANR	5080505	AssignmentExpression	i = 1		5080450	2		=			
ANR	5080506	Identifier	i		5080450	0					
ANR	5080507	PrimaryExpression	1		5080450	1					
ANR	5080508	IfStatement	if ( result_list && ( result_list -> number ( ) > 0 ) )		5080450	5					
ANR	5080509	Condition	result_list && ( result_list -> number ( ) > 0 )	410:5:9343:9384	5080450	0	True				
ANR	5080510	AndExpression	result_list && ( result_list -> number ( ) > 0 )		5080450	0		&&			
ANR	5080511	Identifier	result_list		5080450	0					
ANR	5080512	RelationalExpression	result_list -> number ( ) > 0		5080450	1		>			
ANR	5080513	CallExpression	result_list -> number ( )		5080450	0					
ANR	5080514	Callee	result_list -> number		5080450	0					
ANR	5080515	PtrMemberAccess	result_list -> number		5080450	0					
ANR	5080516	Identifier	result_list		5080450	0					
ANR	5080517	Identifier	number		5080450	1					
ANR	5080518	ArgumentList			5080450	1					
ANR	5080519	PrimaryExpression	0		5080450	1					
ANR	5080520	CompoundStatement		15:2:302:325	5080450	1					
ANR	5080521	IdentifierDeclStatement	char * one_result = NULL ;	411:2:9392:9415	5080450	0	True				
ANR	5080522	IdentifierDecl	* one_result = NULL		5080450	0					
ANR	5080523	IdentifierDeclType	char *		5080450	0					
ANR	5080524	Identifier	one_result		5080450	1					
ANR	5080525	AssignmentExpression	* one_result = NULL		5080450	2		=			
ANR	5080526	Identifier	NULL		5080450	0					
ANR	5080527	Identifier	NULL		5080450	1					
ANR	5080528	ExpressionStatement	result_list -> rewind ( )	412:2:9419:9440	5080450	1	True				
ANR	5080529	CallExpression	result_list -> rewind ( )		5080450	0					
ANR	5080530	Callee	result_list -> rewind		5080450	0					
ANR	5080531	PtrMemberAccess	result_list -> rewind		5080450	0					
ANR	5080532	Identifier	result_list		5080450	0					
ANR	5080533	Identifier	rewind		5080450	1					
ANR	5080534	ArgumentList			5080450	1					
ANR	5080535	WhileStatement	while ( ( one_result = result_list -> next ( ) ) != NULL )		5080450	2					
ANR	5080536	Condition	( one_result = result_list -> next ( ) ) != NULL	413:8:9450:9491	5080450	0	True				
ANR	5080537	EqualityExpression	( one_result = result_list -> next ( ) ) != NULL		5080450	0		!=			
ANR	5080538	AssignmentExpression	one_result = result_list -> next ( )		5080450	0		=			
ANR	5080539	Identifier	one_result		5080450	0					
ANR	5080540	CallExpression	result_list -> next ( )		5080450	1					
ANR	5080541	Callee	result_list -> next		5080450	0					
ANR	5080542	PtrMemberAccess	result_list -> next		5080450	0					
ANR	5080543	Identifier	result_list		5080450	0					
ANR	5080544	Identifier	next		5080450	1					
ANR	5080545	ArgumentList			5080450	1					
ANR	5080546	Identifier	NULL		5080450	1					
ANR	5080547	CompoundStatement		17:53:405:405	5080450	1					
ANR	5080548	ExpressionStatement	tmp_result [ i ] = one_result	414:3:9500:9526	5080450	0	True				
ANR	5080549	AssignmentExpression	tmp_result [ i ] = one_result		5080450	0		=			
ANR	5080550	ArrayIndexing	tmp_result [ i ]		5080450	0					
ANR	5080551	Identifier	tmp_result		5080450	0					
ANR	5080552	Identifier	i		5080450	1					
ANR	5080553	Identifier	one_result		5080450	1					
ANR	5080554	ExpressionStatement	i ++	415:3:9531:9534	5080450	1	True				
ANR	5080555	PostIncDecOperationExpression	i ++		5080450	0					
ANR	5080556	Identifier	i		5080450	0					
ANR	5080557	IncDec	++		5080450	1					
ANR	5080558	ReturnStatement	"return create_output_string ( req_id , tmp_result , i ) ;"	419:1:9545:9596	5080450	6	True				
ANR	5080559	CallExpression	"create_output_string ( req_id , tmp_result , i )"		5080450	0					
ANR	5080560	Callee	create_output_string		5080450	0					
ANR	5080561	Identifier	create_output_string		5080450	0					
ANR	5080562	ArgumentList	req_id		5080450	1					
ANR	5080563	Argument	req_id		5080450	0					
ANR	5080564	Identifier	req_id		5080450	0					
ANR	5080565	Argument	tmp_result		5080450	1					
ANR	5080566	Identifier	tmp_result		5080450	0					
ANR	5080567	Argument	i		5080450	2					
ANR	5080568	Identifier	i		5080450	0					
ANR	5080569	ReturnType	std :: string		5080450	1					
ANR	5080570	Identifier	create_success_result		5080450	2					
ANR	5080571	ParameterList	"int req_id , StringList * result_list"		5080450	3					
ANR	5080572	Parameter	int req_id	396:23:9052:9061	5080450	0	True				
ANR	5080573	ParameterType	int		5080450	0					
ANR	5080574	Identifier	req_id		5080450	1					
ANR	5080575	Parameter	StringList * result_list	396:35:9064:9086	5080450	1	True				
ANR	5080576	ParameterType	StringList *		5080450	0					
ANR	5080577	Identifier	result_list		5080450	1					
ANR	5080578	CFGEntryNode	ENTRY		5080450		True				
ANR	5080579	CFGExitNode	EXIT		5080450		True				
ANR	5080580	Symbol	one_result		5080450						
ANR	5080581	Symbol	NULL		5080450						
ANR	5080582	Symbol	create_output_string		5080450						
ANR	5080583	Symbol	* result_list		5080450						
ANR	5080584	Symbol	i		5080450						
ANR	5080585	Symbol	tmp_result		5080450						
ANR	5080586	Symbol	result_list -> number		5080450						
ANR	5080587	Symbol	req_id		5080450						
ANR	5080588	Symbol	* i		5080450						
ANR	5080589	Symbol	result_list -> next		5080450						
ANR	5080590	Symbol	AMAZON_COMMAND_SUCCESS_OUTPUT		5080450						
ANR	5080591	Symbol	result_list		5080450						
ANR	5080592	Symbol	* tmp_result		5080450						
ANR	5080593	Symbol	index_count		5080450						
ANR	5080594	Function	create_failure_result	422:0:9601:9992							
ANR	5080595	FunctionDef	"create_failure_result (int req_id , const char * err_msg , const char * err_code)"		5080594	0					
ANR	5080596	CompoundStatement		424:0:9691:9992	5080594	0					
ANR	5080597	IdentifierDeclStatement	const char * tmp_result [ 3 ] ;	425:1:9694:9719	5080594	0	True				
ANR	5080598	IdentifierDecl	* tmp_result [ 3 ]		5080594	0					
ANR	5080599	IdentifierDeclType	const char * [ 3 ]		5080594	0					
ANR	5080600	Identifier	tmp_result		5080594	1					
ANR	5080601	PrimaryExpression	3		5080594	2					
ANR	5080602	ExpressionStatement	tmp_result [ 0 ] = AMAZON_COMMAND_ERROR_OUTPUT	426:1:9722:9765	5080594	1	True				
ANR	5080603	AssignmentExpression	tmp_result [ 0 ] = AMAZON_COMMAND_ERROR_OUTPUT		5080594	0		=			
ANR	5080604	ArrayIndexing	tmp_result [ 0 ]		5080594	0					
ANR	5080605	Identifier	tmp_result		5080594	0					
ANR	5080606	PrimaryExpression	0		5080594	1					
ANR	5080607	Identifier	AMAZON_COMMAND_ERROR_OUTPUT		5080594	1					
ANR	5080608	IfStatement	if ( ! err_code )		5080594	2					
ANR	5080609	Condition	! err_code	428:5:9773:9781	5080594	0	True				
ANR	5080610	UnaryOperationExpression	! err_code		5080594	0					
ANR	5080611	UnaryOperator	!		5080594	0					
ANR	5080612	Identifier	err_code		5080594	1					
ANR	5080613	CompoundStatement		5:17:93:93	5080594	1					
ANR	5080614	ExpressionStatement	err_code = GENERAL_GAHP_ERROR_CODE	429:2:9789:9823	5080594	0	True				
ANR	5080615	AssignmentExpression	err_code = GENERAL_GAHP_ERROR_CODE		5080594	0		=			
ANR	5080616	Identifier	err_code		5080594	0					
ANR	5080617	Identifier	GENERAL_GAHP_ERROR_CODE		5080594	1					
ANR	5080618	IfStatement	if ( ! err_msg )		5080594	3					
ANR	5080619	Condition	! err_msg	431:5:9833:9840	5080594	0	True				
ANR	5080620	UnaryOperationExpression	! err_msg		5080594	0					
ANR	5080621	UnaryOperator	!		5080594	0					
ANR	5080622	Identifier	err_msg		5080594	1					
ANR	5080623	CompoundStatement		8:16:152:152	5080594	1					
ANR	5080624	ExpressionStatement	err_msg = GENERAL_GAHP_ERROR_MSG	432:2:9848:9880	5080594	0	True				
ANR	5080625	AssignmentExpression	err_msg = GENERAL_GAHP_ERROR_MSG		5080594	0		=			
ANR	5080626	Identifier	err_msg		5080594	0					
ANR	5080627	Identifier	GENERAL_GAHP_ERROR_MSG		5080594	1					
ANR	5080628	ExpressionStatement	tmp_result [ 1 ] = err_code	434:1:9886:9910	5080594	4	True				
ANR	5080629	AssignmentExpression	tmp_result [ 1 ] = err_code		5080594	0		=			
ANR	5080630	ArrayIndexing	tmp_result [ 1 ]		5080594	0					
ANR	5080631	Identifier	tmp_result		5080594	0					
ANR	5080632	PrimaryExpression	1		5080594	1					
ANR	5080633	Identifier	err_code		5080594	1					
ANR	5080634	ExpressionStatement	tmp_result [ 2 ] = err_msg	435:1:9913:9936	5080594	5	True				
ANR	5080635	AssignmentExpression	tmp_result [ 2 ] = err_msg		5080594	0		=			
ANR	5080636	ArrayIndexing	tmp_result [ 2 ]		5080594	0					
ANR	5080637	Identifier	tmp_result		5080594	0					
ANR	5080638	PrimaryExpression	2		5080594	1					
ANR	5080639	Identifier	err_msg		5080594	1					
ANR	5080640	ReturnStatement	"return create_output_string ( req_id , tmp_result , 3 ) ;"	437:1:9940:9990	5080594	6	True				
ANR	5080641	CallExpression	"create_output_string ( req_id , tmp_result , 3 )"		5080594	0					
ANR	5080642	Callee	create_output_string		5080594	0					
ANR	5080643	Identifier	create_output_string		5080594	0					
ANR	5080644	ArgumentList	req_id		5080594	1					
ANR	5080645	Argument	req_id		5080594	0					
ANR	5080646	Identifier	req_id		5080594	0					
ANR	5080647	Argument	tmp_result		5080594	1					
ANR	5080648	Identifier	tmp_result		5080594	0					
ANR	5080649	Argument	3		5080594	2					
ANR	5080650	PrimaryExpression	3		5080594	0					
ANR	5080651	ReturnType	std :: string		5080594	1					
ANR	5080652	Identifier	create_failure_result		5080594	2					
ANR	5080653	ParameterList	"int req_id , const char * err_msg , const char * err_code"		5080594	3					
ANR	5080654	Parameter	int req_id	423:23:9636:9645	5080594	0	True				
ANR	5080655	ParameterType	int		5080594	0					
ANR	5080656	Identifier	req_id		5080594	1					
ANR	5080657	Parameter	const char * err_msg	423:35:9648:9666	5080594	1	True				
ANR	5080658	ParameterType	const char *		5080594	0					
ANR	5080659	Identifier	err_msg		5080594	1					
ANR	5080660	Parameter	const char * err_code	423:56:9669:9688	5080594	2	True				
ANR	5080661	ParameterType	const char *		5080594	0					
ANR	5080662	Identifier	err_code		5080594	1					
ANR	5080663	CFGEntryNode	ENTRY		5080594		True				
ANR	5080664	CFGExitNode	EXIT		5080594		True				
ANR	5080665	Symbol	req_id		5080594						
ANR	5080666	Symbol	create_output_string		5080594						
ANR	5080667	Symbol	AMAZON_COMMAND_ERROR_OUTPUT		5080594						
ANR	5080668	Symbol	err_msg		5080594						
ANR	5080669	Symbol	err_code		5080594						
ANR	5080670	Symbol	* tmp_result		5080594						
ANR	5080671	Symbol	GENERAL_GAHP_ERROR_MSG		5080594						
ANR	5080672	Symbol	tmp_result		5080594						
ANR	5080673	Symbol	GENERAL_GAHP_ERROR_CODE		5080594						
