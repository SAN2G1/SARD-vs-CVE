command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	927478	File	data/converged/CVE-2011-4930_htcondor/condor_netaddr.cpp								
ANR	927479	Function	condor_netaddr :: condor_netaddr	5:0:78:142							
ANR	927480	FunctionDef	condor_netaddr :: condor_netaddr ()		927479	0					
ANR	927481	CompoundStatement		5:62:140:142	927479	0					
ANR	927482	Identifier	condor_netaddr :: condor_netaddr		927479	1					
ANR	927483	ParameterList			927479	2					
ANR	927484	CFGEntryNode	ENTRY		927479		True				
ANR	927485	CFGExitNode	EXIT		927479		True				
ANR	927486	Function	condor_netaddr :: condor_netaddr	8:0:145:264							
ANR	927487	FunctionDef	"condor_netaddr :: condor_netaddr (const condor_sockaddr & base , unsigned int maskbit)"		927486	0					
ANR	927488	CompoundStatement		10:33:262:264	927486	0					
ANR	927489	Identifier	condor_netaddr :: condor_netaddr		927486	1					
ANR	927490	ParameterList	"const condor_sockaddr & base , unsigned int maskbit"		927486	2					
ANR	927491	Parameter	const condor_sockaddr & base	8:31:176:202	927486	0	True				
ANR	927492	ParameterType	const condor_sockaddr &		927486	0					
ANR	927493	Identifier	base		927486	1					
ANR	927494	Parameter	unsigned int maskbit	9:2:207:226	927486	1	True				
ANR	927495	ParameterType	unsigned int		927486	0					
ANR	927496	Identifier	maskbit		927486	1					
ANR	927497	CFGEntryNode	ENTRY		927486		True				
ANR	927498	CFGExitNode	EXIT		927486		True				
ANR	927499	Symbol	maskbit		927486						
ANR	927500	Symbol	base		927486						
ANR	927501	Function	condor_netaddr :: match	13:0:267:1175							
ANR	927502	FunctionDef	condor_netaddr :: match (const condor_sockaddr & target)		927501	0					
ANR	927503	CompoundStatement		13:64:331:1175	927501	0					
ANR	927504	IfStatement	if ( maskbit_ == ( unsigned int ) - 1 )		927501	0					
ANR	927505	Condition	maskbit_ == ( unsigned int ) - 1	14:5:338:365	927501	0	True				
ANR	927506	EqualityExpression	maskbit_ == ( unsigned int ) - 1		927501	0		==			
ANR	927507	Identifier	maskbit_		927501	0					
ANR	927508	CastExpression	( unsigned int ) - 1		927501	1					
ANR	927509	CastTarget	unsigned int		927501	0					
ANR	927510	UnaryOperationExpression	- 1		927501	1					
ANR	927511	UnaryOperator	-		927501	0					
ANR	927512	PrimaryExpression	1		927501	1					
ANR	927513	CompoundStatement		2:35:36:36	927501	1					
ANR	927514	ReturnStatement	return false ;	15:2:372:384	927501	0	True				
ANR	927515	Identifier	false		927501	0					
ANR	927516	IfStatement	if ( base_ . get_aftype ( ) != target . get_aftype ( ) )		927501	1					
ANR	927517	Condition	base_ . get_aftype ( ) != target . get_aftype ( )	22:5:545:585	927501	0	True				
ANR	927518	EqualityExpression	base_ . get_aftype ( ) != target . get_aftype ( )		927501	0		!=			
ANR	927519	CallExpression	base_ . get_aftype ( )		927501	0					
ANR	927520	Callee	base_ . get_aftype		927501	0					
ANR	927521	MemberAccess	base_ . get_aftype		927501	0					
ANR	927522	Identifier	base_		927501	0					
ANR	927523	Identifier	get_aftype		927501	1					
ANR	927524	ArgumentList			927501	1					
ANR	927525	CallExpression	target . get_aftype ( )		927501	1					
ANR	927526	Callee	target . get_aftype		927501	0					
ANR	927527	MemberAccess	target . get_aftype		927501	0					
ANR	927528	Identifier	target		927501	0					
ANR	927529	Identifier	get_aftype		927501	1					
ANR	927530	ArgumentList			927501	1					
ANR	927531	CompoundStatement		10:48:256:256	927501	1					
ANR	927532	ReturnStatement	return false ;	23:2:592:604	927501	0	True				
ANR	927533	Identifier	false		927501	0					
ANR	927534	IdentifierDeclStatement	const uint32_t * baseaddr = base_ . get_address ( ) ;	26:1:611:657	927501	2	True				
ANR	927535	IdentifierDecl	* baseaddr = base_ . get_address ( )		927501	0					
ANR	927536	IdentifierDeclType	const uint32_t *		927501	0					
ANR	927537	Identifier	baseaddr		927501	1					
ANR	927538	AssignmentExpression	* baseaddr = base_ . get_address ( )		927501	2		=			
ANR	927539	Identifier	baseaddr		927501	0					
ANR	927540	CallExpression	base_ . get_address ( )		927501	1					
ANR	927541	Callee	base_ . get_address		927501	0					
ANR	927542	MemberAccess	base_ . get_address		927501	0					
ANR	927543	Identifier	base_		927501	0					
ANR	927544	Identifier	get_address		927501	1					
ANR	927545	ArgumentList			927501	1					
ANR	927546	IdentifierDeclStatement	const uint32_t * targetaddr = target . get_address ( ) ;	27:1:660:709	927501	3	True				
ANR	927547	IdentifierDecl	* targetaddr = target . get_address ( )		927501	0					
ANR	927548	IdentifierDeclType	const uint32_t *		927501	0					
ANR	927549	Identifier	targetaddr		927501	1					
ANR	927550	AssignmentExpression	* targetaddr = target . get_address ( )		927501	2		=			
ANR	927551	Identifier	targetaddr		927501	0					
ANR	927552	CallExpression	target . get_address ( )		927501	1					
ANR	927553	Callee	target . get_address		927501	0					
ANR	927554	MemberAccess	target . get_address		927501	0					
ANR	927555	Identifier	target		927501	0					
ANR	927556	Identifier	get_address		927501	1					
ANR	927557	ArgumentList			927501	1					
ANR	927558	IfStatement	if ( ! baseaddr || ! targetaddr )		927501	4					
ANR	927559	Condition	! baseaddr || ! targetaddr	29:5:717:740	927501	0	True				
ANR	927560	OrExpression	! baseaddr || ! targetaddr		927501	0		||			
ANR	927561	UnaryOperationExpression	! baseaddr		927501	0					
ANR	927562	UnaryOperator	!		927501	0					
ANR	927563	Identifier	baseaddr		927501	1					
ANR	927564	UnaryOperationExpression	! targetaddr		927501	1					
ANR	927565	UnaryOperator	!		927501	0					
ANR	927566	Identifier	targetaddr		927501	1					
ANR	927567	CompoundStatement		17:31:411:411	927501	1					
ANR	927568	ReturnStatement	return false ;	30:2:747:759	927501	0	True				
ANR	927569	Identifier	false		927501	0					
ANR	927570	IdentifierDeclStatement	int addr_len = base_ . get_address_len ( ) ;	32:1:765:803	927501	5	True				
ANR	927571	IdentifierDecl	addr_len = base_ . get_address_len ( )		927501	0					
ANR	927572	IdentifierDeclType	int		927501	0					
ANR	927573	Identifier	addr_len		927501	1					
ANR	927574	AssignmentExpression	addr_len = base_ . get_address_len ( )		927501	2		=			
ANR	927575	Identifier	addr_len		927501	0					
ANR	927576	CallExpression	base_ . get_address_len ( )		927501	1					
ANR	927577	Callee	base_ . get_address_len		927501	0					
ANR	927578	MemberAccess	base_ . get_address_len		927501	0					
ANR	927579	Identifier	base_		927501	0					
ANR	927580	Identifier	get_address_len		927501	1					
ANR	927581	ArgumentList			927501	1					
ANR	927582	IdentifierDeclStatement	int curmaskbit = maskbit_ ;	34:1:807:832	927501	6	True				
ANR	927583	IdentifierDecl	curmaskbit = maskbit_		927501	0					
ANR	927584	IdentifierDeclType	int		927501	0					
ANR	927585	Identifier	curmaskbit		927501	1					
ANR	927586	AssignmentExpression	curmaskbit = maskbit_		927501	2		=			
ANR	927587	Identifier	maskbit_		927501	0					
ANR	927588	Identifier	maskbit_		927501	1					
ANR	927589	ForStatement	for ( int i = 0 ; i < addr_len ; ++ i )		927501	7					
ANR	927590	ForInit	int i = 0 ;	35:6:840:849	927501	0	True				
ANR	927591	IdentifierDeclStatement	int i = 0 ;		927501	0					
ANR	927592	IdentifierDecl	i = 0		927501	0					
ANR	927593	IdentifierDeclType	int		927501	0					
ANR	927594	Identifier	i		927501	1					
ANR	927595	AssignmentExpression	i = 0		927501	2		=			
ANR	927596	Identifier	i		927501	0					
ANR	927597	PrimaryExpression	0		927501	1					
ANR	927598	Condition	i < addr_len	35:17:851:862	927501	1	True				
ANR	927599	RelationalExpression	i < addr_len		927501	0		<			
ANR	927600	Identifier	i		927501	0					
ANR	927601	Identifier	addr_len		927501	1					
ANR	927602	UnaryExpression	++ i	35:31:865:867	927501	2	True				
ANR	927603	IncDec	++		927501	0					
ANR	927604	Identifier	i		927501	1					
ANR	927605	CompoundStatement		25:2:576:589	927501	3					
ANR	927606	IfStatement	if ( curmaskbit <= 0 )		927501	0					
ANR	927607	Condition	curmaskbit <= 0	36:6:878:892	927501	0	True				
ANR	927608	RelationalExpression	curmaskbit <= 0		927501	0		<=			
ANR	927609	Identifier	curmaskbit		927501	0					
ANR	927610	PrimaryExpression	0		927501	1					
ANR	927611	CompoundStatement		24:23:563:563	927501	1					
ANR	927612	BreakStatement	break ;	36:25:897:902	927501	0	True				
ANR	927613	IdentifierDeclStatement	uint32_t mask ;	37:2:908:921	927501	1	True				
ANR	927614	IdentifierDecl	mask		927501	0					
ANR	927615	IdentifierDeclType	uint32_t		927501	0					
ANR	927616	Identifier	mask		927501	1					
ANR	927617	IfStatement	if ( curmaskbit >= 32 )		927501	2					
ANR	927618	Condition	curmaskbit >= 32	38:6:929:944	927501	0	True				
ANR	927619	RelationalExpression	curmaskbit >= 32		927501	0		>=			
ANR	927620	Identifier	curmaskbit		927501	0					
ANR	927621	PrimaryExpression	32		927501	1					
ANR	927622	CompoundStatement		26:24:615:615	927501	1					
ANR	927623	ExpressionStatement	mask = 0xffffffff	39:3:952:969	927501	0	True				
ANR	927624	AssignmentExpression	mask = 0xffffffff		927501	0		=			
ANR	927625	Identifier	mask		927501	0					
ANR	927626	PrimaryExpression	0xffffffff		927501	1					
ANR	927627	ElseStatement	else		927501	0					
ANR	927628	CompoundStatement		28:9:648:648	927501	0					
ANR	927629	ExpressionStatement	mask = htonl ( ~ ( 0xffffffff >> curmaskbit ) )	41:3:985:1026	927501	0	True				
ANR	927630	AssignmentExpression	mask = htonl ( ~ ( 0xffffffff >> curmaskbit ) )		927501	0		=			
ANR	927631	Identifier	mask		927501	0					
ANR	927632	CallExpression	htonl ( ~ ( 0xffffffff >> curmaskbit ) )		927501	1					
ANR	927633	Callee	htonl		927501	0					
ANR	927634	Identifier	htonl		927501	0					
ANR	927635	ArgumentList	~ ( 0xffffffff >> curmaskbit )		927501	1					
ANR	927636	Argument	~ ( 0xffffffff >> curmaskbit )		927501	0					
ANR	927637	UnaryOperationExpression	~ ( 0xffffffff >> curmaskbit )		927501	0					
ANR	927638	UnaryOperator	~		927501	0					
ANR	927639	ShiftExpression	0xffffffff >> curmaskbit		927501	1		>>			
ANR	927640	PrimaryExpression	0xffffffff		927501	0					
ANR	927641	Identifier	curmaskbit		927501	1					
ANR	927642	IfStatement	if ( ( * baseaddr & mask ) != ( * targetaddr & mask ) )		927501	3					
ANR	927643	Condition	( * baseaddr & mask ) != ( * targetaddr & mask )	44:6:1039:1080	927501	0	True				
ANR	927644	EqualityExpression	( * baseaddr & mask ) != ( * targetaddr & mask )		927501	0		!=			
ANR	927645	BitAndExpression	* baseaddr & mask		927501	0		&			
ANR	927646	UnaryOperationExpression	* baseaddr		927501	0					
ANR	927647	UnaryOperator	*		927501	0					
ANR	927648	Identifier	baseaddr		927501	1					
ANR	927649	Identifier	mask		927501	1					
ANR	927650	BitAndExpression	* targetaddr & mask		927501	1		&			
ANR	927651	UnaryOperationExpression	* targetaddr		927501	0					
ANR	927652	UnaryOperator	*		927501	0					
ANR	927653	Identifier	targetaddr		927501	1					
ANR	927654	Identifier	mask		927501	1					
ANR	927655	CompoundStatement		32:50:751:751	927501	1					
ANR	927656	ReturnStatement	return false ;	45:3:1088:1100	927501	0	True				
ANR	927657	Identifier	false		927501	0					
ANR	927658	ExpressionStatement	curmaskbit -= 32	48:2:1109:1125	927501	4	True				
ANR	927659	AssignmentExpression	curmaskbit -= 32		927501	0		-=			
ANR	927660	Identifier	curmaskbit		927501	0					
ANR	927661	PrimaryExpression	32		927501	1					
ANR	927662	ExpressionStatement	baseaddr ++	49:2:1129:1139	927501	5	True				
ANR	927663	PostIncDecOperationExpression	baseaddr ++		927501	0					
ANR	927664	Identifier	baseaddr		927501	0					
ANR	927665	IncDec	++		927501	1					
ANR	927666	ExpressionStatement	targetaddr ++	50:2:1143:1155	927501	6	True				
ANR	927667	PostIncDecOperationExpression	targetaddr ++		927501	0					
ANR	927668	Identifier	targetaddr		927501	0					
ANR	927669	IncDec	++		927501	1					
ANR	927670	ReturnStatement	return true ;	53:1:1162:1173	927501	8	True				
ANR	927671	Identifier	true		927501	0					
ANR	927672	ReturnType	bool		927501	1					
ANR	927673	Identifier	condor_netaddr :: match		927501	2					
ANR	927674	ParameterList	const condor_sockaddr & target		927501	3					
ANR	927675	Parameter	const condor_sockaddr & target	13:27:294:322	927501	0	True				
ANR	927676	ParameterType	const condor_sockaddr &		927501	0					
ANR	927677	Identifier	target		927501	1					
ANR	927678	CFGEntryNode	ENTRY		927501		True				
ANR	927679	CFGExitNode	EXIT		927501		True				
ANR	927680	Symbol	base_ . get_address		927501						
ANR	927681	Symbol	targetaddr		927501						
ANR	927682	Symbol	target . get_address		927501						
ANR	927683	Symbol	curmaskbit		927501						
ANR	927684	Symbol	false		927501						
ANR	927685	Symbol	target . get_aftype		927501						
ANR	927686	Symbol	i		927501						
ANR	927687	Symbol	baseaddr		927501						
ANR	927688	Symbol	base_ . get_address_len		927501						
ANR	927689	Symbol	htonl		927501						
ANR	927690	Symbol	target		927501						
ANR	927691	Symbol	base_ . get_aftype		927501						
ANR	927692	Symbol	maskbit_		927501						
ANR	927693	Symbol	true		927501						
ANR	927694	Symbol	* targetaddr		927501						
ANR	927695	Symbol	base_		927501						
ANR	927696	Symbol	* baseaddr		927501						
ANR	927697	Symbol	addr_len		927501						
ANR	927698	Symbol	mask		927501						
ANR	927699	Function	convert_maskaddr_to_maskbit	56:0:1178:1684							
ANR	927700	FunctionDef	convert_maskaddr_to_maskbit (uint32_t mask_value)		927699	0					
ANR	927701	CompoundStatement		56:60:1238:1684	927699	0					
ANR	927702	IdentifierDeclStatement	int maskbit = 0 ;	57:1:1241:1256	927699	0	True				
ANR	927703	IdentifierDecl	maskbit = 0		927699	0					
ANR	927704	IdentifierDeclType	int		927699	0					
ANR	927705	Identifier	maskbit		927699	1					
ANR	927706	AssignmentExpression	maskbit = 0		927699	2		=			
ANR	927707	Identifier	maskbit		927699	0					
ANR	927708	PrimaryExpression	0		927699	1					
ANR	927709	ExpressionStatement	mask_value = ntohl ( mask_value )	59:1:1260:1290	927699	1	True				
ANR	927710	AssignmentExpression	mask_value = ntohl ( mask_value )		927699	0		=			
ANR	927711	Identifier	mask_value		927699	0					
ANR	927712	CallExpression	ntohl ( mask_value )		927699	1					
ANR	927713	Callee	ntohl		927699	0					
ANR	927714	Identifier	ntohl		927699	0					
ANR	927715	ArgumentList	mask_value		927699	1					
ANR	927716	Argument	mask_value		927699	0					
ANR	927717	Identifier	mask_value		927699	0					
ANR	927718	WhileStatement	while ( mask_value > 0 && ( mask_value & 1 ) == 0 )		927699	2					
ANR	927719	Condition	mask_value > 0 && ( mask_value & 1 ) == 0	62:8:1345:1383	927699	0	True				
ANR	927720	AndExpression	mask_value > 0 && ( mask_value & 1 ) == 0		927699	0		&&			
ANR	927721	RelationalExpression	mask_value > 0		927699	0		>			
ANR	927722	Identifier	mask_value		927699	0					
ANR	927723	PrimaryExpression	0		927699	1					
ANR	927724	EqualityExpression	( mask_value & 1 ) == 0		927699	1		==			
ANR	927725	BitAndExpression	mask_value & 1		927699	0		&			
ANR	927726	Identifier	mask_value		927699	0					
ANR	927727	PrimaryExpression	1		927699	1					
ANR	927728	PrimaryExpression	0		927699	1					
ANR	927729	ExpressionStatement	mask_value >>= 1	63:2:1388:1404	927699	1	True				
ANR	927730	AssignmentExpression	mask_value >>= 1		927699	0		>>=			
ANR	927731	Identifier	mask_value		927699	0					
ANR	927732	PrimaryExpression	1		927699	1					
ANR	927733	WhileStatement	while ( mask_value > 0 && ( mask_value & 1 ) == 1 )		927699	3					
ANR	927734	Condition	mask_value > 0 && ( mask_value & 1 ) == 1	65:8:1415:1453	927699	0	True				
ANR	927735	AndExpression	mask_value > 0 && ( mask_value & 1 ) == 1		927699	0		&&			
ANR	927736	RelationalExpression	mask_value > 0		927699	0		>			
ANR	927737	Identifier	mask_value		927699	0					
ANR	927738	PrimaryExpression	0		927699	1					
ANR	927739	EqualityExpression	( mask_value & 1 ) == 1		927699	1		==			
ANR	927740	BitAndExpression	mask_value & 1		927699	0		&			
ANR	927741	Identifier	mask_value		927699	0					
ANR	927742	PrimaryExpression	1		927699	1					
ANR	927743	PrimaryExpression	1		927699	1					
ANR	927744	CompoundStatement		10:49:217:217	927699	1					
ANR	927745	ExpressionStatement	maskbit ++	66:2:1460:1469	927699	0	True				
ANR	927746	PostIncDecOperationExpression	maskbit ++		927699	0					
ANR	927747	Identifier	maskbit		927699	0					
ANR	927748	IncDec	++		927699	1					
ANR	927749	ExpressionStatement	mask_value >>= 1	67:2:1473:1489	927699	1	True				
ANR	927750	AssignmentExpression	mask_value >>= 1		927699	0		>>=			
ANR	927751	Identifier	mask_value		927699	0					
ANR	927752	PrimaryExpression	1		927699	1					
ANR	927753	IfStatement	if ( mask_value != 0 )		927699	4					
ANR	927754	Condition	mask_value != 0	70:5:1500:1514	927699	0	True				
ANR	927755	EqualityExpression	mask_value != 0		927699	0		!=			
ANR	927756	Identifier	mask_value		927699	0					
ANR	927757	PrimaryExpression	0		927699	1					
ANR	927758	CompoundStatement		15:22:278:278	927699	1					
ANR	927759	ReturnStatement	return - 1 ;	74:2:1652:1661	927699	0	True				
ANR	927760	UnaryOperationExpression	- 1		927699	0					
ANR	927761	UnaryOperator	-		927699	0					
ANR	927762	PrimaryExpression	1		927699	1					
ANR	927763	ReturnStatement	return maskbit ;	77:1:1668:1682	927699	5	True				
ANR	927764	Identifier	maskbit		927699	0					
ANR	927765	ReturnType	static int		927699	1					
ANR	927766	Identifier	convert_maskaddr_to_maskbit		927699	2					
ANR	927767	ParameterList	uint32_t mask_value		927699	3					
ANR	927768	Parameter	uint32_t mask_value	56:39:1217:1235	927699	0	True				
ANR	927769	ParameterType	uint32_t		927699	0					
ANR	927770	Identifier	mask_value		927699	1					
ANR	927771	CFGEntryNode	ENTRY		927699		True				
ANR	927772	CFGExitNode	EXIT		927699		True				
ANR	927773	Symbol	mask_value		927699						
ANR	927774	Symbol	maskbit		927699						
ANR	927775	Symbol	ntohl		927699						
ANR	927776	Function	condor_netaddr :: from_net_string	80:0:1687:3167							
ANR	927777	FunctionDef	condor_netaddr :: from_net_string (const char * net)		927776	0					
ANR	927778	CompoundStatement		80:54:1741:3167	927776	0					
ANR	927779	IdentifierDeclStatement	"const char * slash = strchr ( net , '/' ) ;"	81:1:1744:1780	927776	0	True				
ANR	927780	IdentifierDecl	"* slash = strchr ( net , '/' )"		927776	0					
ANR	927781	IdentifierDeclType	const char *		927776	0					
ANR	927782	Identifier	slash		927776	1					
ANR	927783	AssignmentExpression	"* slash = strchr ( net , '/' )"		927776	2		=			
ANR	927784	Identifier	slash		927776	0					
ANR	927785	CallExpression	"strchr ( net , '/' )"		927776	1					
ANR	927786	Callee	strchr		927776	0					
ANR	927787	Identifier	strchr		927776	0					
ANR	927788	ArgumentList	net		927776	1					
ANR	927789	Argument	net		927776	0					
ANR	927790	Identifier	net		927776	0					
ANR	927791	Argument	'/'		927776	1					
ANR	927792	PrimaryExpression	'/'		927776	0					
ANR	927793	IdentifierDeclStatement	const char * net_end = net + strlen ( net ) ;	82:1:1783:1822	927776	1	True				
ANR	927794	IdentifierDecl	* net_end = net + strlen ( net )		927776	0					
ANR	927795	IdentifierDeclType	const char *		927776	0					
ANR	927796	Identifier	net_end		927776	1					
ANR	927797	AssignmentExpression	* net_end = net + strlen ( net )		927776	2		=			
ANR	927798	Identifier	net_end		927776	0					
ANR	927799	AdditiveExpression	net + strlen ( net )		927776	1		+			
ANR	927800	Identifier	net		927776	0					
ANR	927801	CallExpression	strlen ( net )		927776	1					
ANR	927802	Callee	strlen		927776	0					
ANR	927803	Identifier	strlen		927776	0					
ANR	927804	ArgumentList	net		927776	1					
ANR	927805	Argument	net		927776	0					
ANR	927806	Identifier	net		927776	0					
ANR	927807	IfStatement	if ( slash )		927776	2					
ANR	927808	Condition	slash	83:5:1829:1833	927776	0	True				
ANR	927809	Identifier	slash		927776	0					
ANR	927810	CompoundStatement		11:2:265:325	927776	1					
ANR	927811	IdentifierDeclStatement	"std :: string base ( net , slash - net ) ;"	84:2:1840:1874	927776	0	True				
ANR	927812	IdentifierDecl	"base ( net , slash - net )"		927776	0					
ANR	927813	IdentifierDeclType	std :: string		927776	0					
ANR	927814	Identifier	base		927776	1					
ANR	927815	Expression	"net , slash - net"		927776	2					
ANR	927816	Identifier	net		927776	0					
ANR	927817	AdditiveExpression	slash - net		927776	1		-			
ANR	927818	Identifier	slash		927776	0					
ANR	927819	Identifier	net		927776	1					
ANR	927820	IfStatement	if ( ! base_ . from_ip_string ( base . c_str ( ) ) )		927776	1					
ANR	927821	Condition	! base_ . from_ip_string ( base . c_str ( ) )	85:6:1882:1916	927776	0	True				
ANR	927822	UnaryOperationExpression	! base_ . from_ip_string ( base . c_str ( ) )		927776	0					
ANR	927823	UnaryOperator	!		927776	0					
ANR	927824	CallExpression	base_ . from_ip_string ( base . c_str ( ) )		927776	1					
ANR	927825	Callee	base_ . from_ip_string		927776	0					
ANR	927826	MemberAccess	base_ . from_ip_string		927776	0					
ANR	927827	Identifier	base_		927776	0					
ANR	927828	Identifier	from_ip_string		927776	1					
ANR	927829	ArgumentList	base . c_str ( )		927776	1					
ANR	927830	Argument	base . c_str ( )		927776	0					
ANR	927831	CallExpression	base . c_str ( )		927776	0					
ANR	927832	Callee	base . c_str		927776	0					
ANR	927833	MemberAccess	base . c_str		927776	0					
ANR	927834	Identifier	base		927776	0					
ANR	927835	Identifier	c_str		927776	1					
ANR	927836	ArgumentList			927776	1					
ANR	927837	ReturnStatement	return false ;	86:3:1922:1934	927776	1	True				
ANR	927838	Identifier	false		927776	0					
ANR	927839	IdentifierDeclStatement	char * end_ptr = NULL ;	89:2:1983:2003	927776	2	True				
ANR	927840	IdentifierDecl	* end_ptr = NULL		927776	0					
ANR	927841	IdentifierDeclType	char *		927776	0					
ANR	927842	Identifier	end_ptr		927776	1					
ANR	927843	AssignmentExpression	* end_ptr = NULL		927776	2		=			
ANR	927844	Identifier	NULL		927776	0					
ANR	927845	Identifier	NULL		927776	1					
ANR	927846	IdentifierDeclStatement	"unsigned long int maskbit = strtoul ( slash + 1 , & end_ptr , 10 ) ;"	90:2:2007:2067	927776	3	True				
ANR	927847	IdentifierDecl	"maskbit = strtoul ( slash + 1 , & end_ptr , 10 )"		927776	0					
ANR	927848	IdentifierDeclType	unsigned long int		927776	0					
ANR	927849	Identifier	maskbit		927776	1					
ANR	927850	AssignmentExpression	"maskbit = strtoul ( slash + 1 , & end_ptr , 10 )"		927776	2		=			
ANR	927851	Identifier	maskbit		927776	0					
ANR	927852	CallExpression	"strtoul ( slash + 1 , & end_ptr , 10 )"		927776	1					
ANR	927853	Callee	strtoul		927776	0					
ANR	927854	Identifier	strtoul		927776	0					
ANR	927855	ArgumentList	slash + 1		927776	1					
ANR	927856	Argument	slash + 1		927776	0					
ANR	927857	AdditiveExpression	slash + 1		927776	0		+			
ANR	927858	Identifier	slash		927776	0					
ANR	927859	PrimaryExpression	1		927776	1					
ANR	927860	Argument	& end_ptr		927776	1					
ANR	927861	UnaryOperationExpression	& end_ptr		927776	0					
ANR	927862	UnaryOperator	&		927776	0					
ANR	927863	Identifier	end_ptr		927776	1					
ANR	927864	Argument	10		927776	2					
ANR	927865	PrimaryExpression	10		927776	0					
ANR	927866	IfStatement	if ( end_ptr == net_end )		927776	4					
ANR	927867	Condition	end_ptr == net_end	94:6:2180:2197	927776	0	True				
ANR	927868	EqualityExpression	end_ptr == net_end		927776	0		==			
ANR	927869	Identifier	end_ptr		927776	0					
ANR	927870	Identifier	net_end		927776	1					
ANR	927871	CompoundStatement		15:26:458:458	927776	1					
ANR	927872	ExpressionStatement	maskbit_ = maskbit	95:3:2205:2223	927776	0	True				
ANR	927873	AssignmentExpression	maskbit_ = maskbit		927776	0		=			
ANR	927874	Identifier	maskbit_		927776	0					
ANR	927875	Identifier	maskbit		927776	1					
ANR	927876	ElseStatement	else		927776	0					
ANR	927877	CompoundStatement		17:9:492:492	927776	0					
ANR	927878	IfStatement	if ( base_ . is_ipv4 ( ) )		927776	0					
ANR	927879	Condition	base_ . is_ipv4 ( )	99:7:2335:2349	927776	0	True				
ANR	927880	CallExpression	base_ . is_ipv4 ( )		927776	0					
ANR	927881	Callee	base_ . is_ipv4		927776	0					
ANR	927882	MemberAccess	base_ . is_ipv4		927776	0					
ANR	927883	Identifier	base_		927776	0					
ANR	927884	Identifier	is_ipv4		927776	1					
ANR	927885	ArgumentList			927776	1					
ANR	927886	CompoundStatement		30:4:868:923	927776	1					
ANR	927887	IdentifierDeclStatement	"std :: string mask ( slash + 1 , net_end - slash - 1 ) ;"	100:4:2358:2406	927776	0	True				
ANR	927888	IdentifierDecl	"mask ( slash + 1 , net_end - slash - 1 )"		927776	0					
ANR	927889	IdentifierDeclType	std :: string		927776	0					
ANR	927890	Identifier	mask		927776	1					
ANR	927891	Expression	"slash + 1 , net_end - slash - 1"		927776	2					
ANR	927892	AdditiveExpression	slash + 1		927776	0		+			
ANR	927893	Identifier	slash		927776	0					
ANR	927894	PrimaryExpression	1		927776	1					
ANR	927895	AdditiveExpression	net_end - slash - 1		927776	1		-			
ANR	927896	Identifier	net_end		927776	0					
ANR	927897	AdditiveExpression	slash - 1		927776	1		-			
ANR	927898	Identifier	slash		927776	0					
ANR	927899	PrimaryExpression	1		927776	1					
ANR	927900	IdentifierDeclStatement	condor_sockaddr maskaddr ;	101:4:2412:2436	927776	1	True				
ANR	927901	IdentifierDecl	maskaddr		927776	0					
ANR	927902	IdentifierDeclType	condor_sockaddr		927776	0					
ANR	927903	Identifier	maskaddr		927776	1					
ANR	927904	IfStatement	if ( ! maskaddr . from_ip_string ( mask . c_str ( ) ) || ! maskaddr . is_ipv4 ( ) )		927776	2					
ANR	927905	Condition	! maskaddr . from_ip_string ( mask . c_str ( ) ) || ! maskaddr . is_ipv4 ( )	104:8:2490:2556	927776	0	True				
ANR	927906	OrExpression	! maskaddr . from_ip_string ( mask . c_str ( ) ) || ! maskaddr . is_ipv4 ( )		927776	0		||			
ANR	927907	UnaryOperationExpression	! maskaddr . from_ip_string ( mask . c_str ( ) )		927776	0					
ANR	927908	UnaryOperator	!		927776	0					
ANR	927909	CallExpression	maskaddr . from_ip_string ( mask . c_str ( ) )		927776	1					
ANR	927910	Callee	maskaddr . from_ip_string		927776	0					
ANR	927911	MemberAccess	maskaddr . from_ip_string		927776	0					
ANR	927912	Identifier	maskaddr		927776	0					
ANR	927913	Identifier	from_ip_string		927776	1					
ANR	927914	ArgumentList	mask . c_str ( )		927776	1					
ANR	927915	Argument	mask . c_str ( )		927776	0					
ANR	927916	CallExpression	mask . c_str ( )		927776	0					
ANR	927917	Callee	mask . c_str		927776	0					
ANR	927918	MemberAccess	mask . c_str		927776	0					
ANR	927919	Identifier	mask		927776	0					
ANR	927920	Identifier	c_str		927776	1					
ANR	927921	ArgumentList			927776	1					
ANR	927922	UnaryOperationExpression	! maskaddr . is_ipv4 ( )		927776	1					
ANR	927923	UnaryOperator	!		927776	0					
ANR	927924	CallExpression	maskaddr . is_ipv4 ( )		927776	1					
ANR	927925	Callee	maskaddr . is_ipv4		927776	0					
ANR	927926	MemberAccess	maskaddr . is_ipv4		927776	0					
ANR	927927	Identifier	maskaddr		927776	0					
ANR	927928	Identifier	is_ipv4		927776	1					
ANR	927929	ArgumentList			927776	1					
ANR	927930	ReturnStatement	return false ;	106:5:2564:2576	927776	1	True				
ANR	927931	Identifier	false		927776	0					
ANR	927932	IdentifierDeclStatement	const uint32_t * maskaddr_array = maskaddr . get_address ( ) ;	109:4:2610:2665	927776	3	True				
ANR	927933	IdentifierDecl	* maskaddr_array = maskaddr . get_address ( )		927776	0					
ANR	927934	IdentifierDeclType	const uint32_t *		927776	0					
ANR	927935	Identifier	maskaddr_array		927776	1					
ANR	927936	AssignmentExpression	* maskaddr_array = maskaddr . get_address ( )		927776	2		=			
ANR	927937	Identifier	maskaddr_array		927776	0					
ANR	927938	CallExpression	maskaddr . get_address ( )		927776	1					
ANR	927939	Callee	maskaddr . get_address		927776	0					
ANR	927940	MemberAccess	maskaddr . get_address		927776	0					
ANR	927941	Identifier	maskaddr		927776	0					
ANR	927942	Identifier	get_address		927776	1					
ANR	927943	ArgumentList			927776	1					
ANR	927944	ExpressionStatement	maskbit_ = convert_maskaddr_to_maskbit ( * maskaddr_array )	110:4:2671:2726	927776	4	True				
ANR	927945	AssignmentExpression	maskbit_ = convert_maskaddr_to_maskbit ( * maskaddr_array )		927776	0		=			
ANR	927946	Identifier	maskbit_		927776	0					
ANR	927947	CallExpression	convert_maskaddr_to_maskbit ( * maskaddr_array )		927776	1					
ANR	927948	Callee	convert_maskaddr_to_maskbit		927776	0					
ANR	927949	Identifier	convert_maskaddr_to_maskbit		927776	0					
ANR	927950	ArgumentList	* maskaddr_array		927776	1					
ANR	927951	Argument	* maskaddr_array		927776	0					
ANR	927952	UnaryOperationExpression	* maskaddr_array		927776	0					
ANR	927953	UnaryOperator	*		927776	0					
ANR	927954	Identifier	maskaddr_array		927776	1					
ANR	927955	IfStatement	if ( maskbit_ == ( unsigned int ) - 1 )		927776	5					
ANR	927956	Condition	maskbit_ == ( unsigned int ) - 1	111:8:2736:2763	927776	0	True				
ANR	927957	EqualityExpression	maskbit_ == ( unsigned int ) - 1		927776	0		==			
ANR	927958	Identifier	maskbit_		927776	0					
ANR	927959	CastExpression	( unsigned int ) - 1		927776	1					
ANR	927960	CastTarget	unsigned int		927776	0					
ANR	927961	UnaryOperationExpression	- 1		927776	1					
ANR	927962	UnaryOperator	-		927776	0					
ANR	927963	PrimaryExpression	1		927776	1					
ANR	927964	ReturnStatement	return false ;	112:5:2771:2783	927776	1	True				
ANR	927965	Identifier	false		927776	0					
ANR	927966	ElseStatement	else		927776	0					
ANR	927967	CompoundStatement		43:2:1182:1194	927776	0					
ANR	927968	IdentifierDeclStatement	in_addr base ;	121:2:2908:2920	927776	0	True				
ANR	927969	IdentifierDecl	base		927776	0					
ANR	927970	IdentifierDeclType	in_addr		927776	0					
ANR	927971	Identifier	base		927776	1					
ANR	927972	IdentifierDeclStatement	in_addr mask ;	122:2:2924:2936	927776	1	True				
ANR	927973	IdentifierDecl	mask		927776	0					
ANR	927974	IdentifierDeclType	in_addr		927776	0					
ANR	927975	Identifier	mask		927776	1					
ANR	927976	IfStatement	"if ( ! is_ipv4_addr_implementation ( net , & base , & mask , 1 ) )"		927776	2					
ANR	927977	Condition	"! is_ipv4_addr_implementation ( net , & base , & mask , 1 )"	123:6:2944:2993	927776	0	True				
ANR	927978	UnaryOperationExpression	"! is_ipv4_addr_implementation ( net , & base , & mask , 1 )"		927776	0					
ANR	927979	UnaryOperator	!		927776	0					
ANR	927980	CallExpression	"is_ipv4_addr_implementation ( net , & base , & mask , 1 )"		927776	1					
ANR	927981	Callee	is_ipv4_addr_implementation		927776	0					
ANR	927982	Identifier	is_ipv4_addr_implementation		927776	0					
ANR	927983	ArgumentList	net		927776	1					
ANR	927984	Argument	net		927776	0					
ANR	927985	Identifier	net		927776	0					
ANR	927986	Argument	& base		927776	1					
ANR	927987	UnaryOperationExpression	& base		927776	0					
ANR	927988	UnaryOperator	&		927776	0					
ANR	927989	Identifier	base		927776	1					
ANR	927990	Argument	& mask		927776	2					
ANR	927991	UnaryOperationExpression	& mask		927776	0					
ANR	927992	UnaryOperator	&		927776	0					
ANR	927993	Identifier	mask		927776	1					
ANR	927994	Argument	1		927776	3					
ANR	927995	PrimaryExpression	1		927776	0					
ANR	927996	ReturnStatement	return false ;	124:3:2999:3011	927776	1	True				
ANR	927997	Identifier	false		927776	0					
ANR	927998	ExpressionStatement	"base_ = condor_sockaddr ( base , 0 )"	126:2:3016:3048	927776	3	True				
ANR	927999	AssignmentExpression	"base_ = condor_sockaddr ( base , 0 )"		927776	0		=			
ANR	928000	Identifier	base_		927776	0					
ANR	928001	CallExpression	"condor_sockaddr ( base , 0 )"		927776	1					
ANR	928002	Callee	condor_sockaddr		927776	0					
ANR	928003	Identifier	condor_sockaddr		927776	0					
ANR	928004	ArgumentList	base		927776	1					
ANR	928005	Argument	base		927776	0					
ANR	928006	Identifier	base		927776	0					
ANR	928007	Argument	0		927776	1					
ANR	928008	PrimaryExpression	0		927776	0					
ANR	928009	ExpressionStatement	maskbit_ = convert_maskaddr_to_maskbit ( * ( uint32_t * ) & mask )	127:2:3052:3109	927776	4	True				
ANR	928010	AssignmentExpression	maskbit_ = convert_maskaddr_to_maskbit ( * ( uint32_t * ) & mask )		927776	0		=			
ANR	928011	Identifier	maskbit_		927776	0					
ANR	928012	CallExpression	convert_maskaddr_to_maskbit ( * ( uint32_t * ) & mask )		927776	1					
ANR	928013	Callee	convert_maskaddr_to_maskbit		927776	0					
ANR	928014	Identifier	convert_maskaddr_to_maskbit		927776	0					
ANR	928015	ArgumentList	* ( uint32_t * ) & mask		927776	1					
ANR	928016	Argument	* ( uint32_t * ) & mask		927776	0					
ANR	928017	UnaryOperationExpression	* ( uint32_t * ) & mask		927776	0					
ANR	928018	UnaryOperator	*		927776	0					
ANR	928019	CastExpression	( uint32_t * ) & mask		927776	1					
ANR	928020	CastTarget	uint32_t *		927776	0					
ANR	928021	UnaryOperationExpression	& mask		927776	1					
ANR	928022	UnaryOperator	&		927776	0					
ANR	928023	Identifier	mask		927776	1					
ANR	928024	IfStatement	if ( maskbit_ == - 1 )		927776	5					
ANR	928025	Condition	maskbit_ == - 1	128:6:3117:3130	927776	0	True				
ANR	928026	EqualityExpression	maskbit_ == - 1		927776	0		==			
ANR	928027	Identifier	maskbit_		927776	0					
ANR	928028	UnaryOperationExpression	- 1		927776	1					
ANR	928029	UnaryOperator	-		927776	0					
ANR	928030	PrimaryExpression	1		927776	1					
ANR	928031	ReturnStatement	return false ;	129:3:3136:3148	927776	1	True				
ANR	928032	Identifier	false		927776	0					
ANR	928033	ReturnStatement	return true ;	131:1:3154:3165	927776	3	True				
ANR	928034	Identifier	true		927776	0					
ANR	928035	ReturnType	bool		927776	1					
ANR	928036	Identifier	condor_netaddr :: from_net_string		927776	2					
ANR	928037	ParameterList	const char * net		927776	3					
ANR	928038	Parameter	const char * net	80:37:1724:1738	927776	0	True				
ANR	928039	ParameterType	const char *		927776	0					
ANR	928040	Identifier	net		927776	1					
ANR	928041	CFGEntryNode	ENTRY		927776		True				
ANR	928042	CFGExitNode	EXIT		927776		True				
ANR	928043	Symbol	& base		927776						
ANR	928044	Symbol	maskaddr . is_ipv4		927776						
ANR	928045	Symbol	strchr		927776						
ANR	928046	Symbol	mask . c_str		927776						
ANR	928047	Symbol	strlen		927776						
ANR	928048	Symbol	& end_ptr		927776						
ANR	928049	Symbol	maskaddr . get_address		927776						
ANR	928050	Symbol	strtoul		927776						
ANR	928051	Symbol	condor_sockaddr		927776						
ANR	928052	Symbol	maskaddr_array		927776						
ANR	928053	Symbol	convert_maskaddr_to_maskbit		927776						
ANR	928054	Symbol	net		927776						
ANR	928055	Symbol	mask		927776						
ANR	928056	Symbol	is_ipv4_addr_implementation		927776						
ANR	928057	Symbol	NULL		927776						
ANR	928058	Symbol	base_ . is_ipv4		927776						
ANR	928059	Symbol	false		927776						
ANR	928060	Symbol	& mask		927776						
ANR	928061	Symbol	* maskaddr_array		927776						
ANR	928062	Symbol	net_end		927776						
ANR	928063	Symbol	base . c_str		927776						
ANR	928064	Symbol	end_ptr		927776						
ANR	928065	Symbol	maskbit		927776						
ANR	928066	Symbol	base_ . from_ip_string		927776						
ANR	928067	Symbol	maskbit_		927776						
ANR	928068	Symbol	* ( uint32_t * ) & mask		927776						
ANR	928069	Symbol	maskaddr		927776						
ANR	928070	Symbol	maskaddr . from_ip_string		927776						
ANR	928071	Symbol	true		927776						
ANR	928072	Symbol	slash		927776						
ANR	928073	Symbol	base_		927776						
ANR	928074	Symbol	base		927776						
