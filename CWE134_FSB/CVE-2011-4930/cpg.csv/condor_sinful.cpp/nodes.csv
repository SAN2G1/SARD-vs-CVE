command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	961227	File	data/converged/CVE-2011-4930_htcondor/condor_sinful.cpp								
ANR	961228	Function	urlDecode	29:0:1009:1743							
ANR	961229	FunctionDef	"urlDecode (char const * str , size_t max , std :: string & result)"		961228	0					
ANR	961230	CompoundStatement		31:0:1079:1743	961228	0					
ANR	961231	IdentifierDeclStatement	size_t consumed = 0 ;	32:1:1082:1101	961228	0	True				
ANR	961232	IdentifierDecl	consumed = 0		961228	0					
ANR	961233	IdentifierDeclType	size_t		961228	0					
ANR	961234	Identifier	consumed		961228	1					
ANR	961235	AssignmentExpression	consumed = 0		961228	2		=			
ANR	961236	Identifier	consumed		961228	0					
ANR	961237	PrimaryExpression	0		961228	1					
ANR	961238	WhileStatement	while ( * str )		961228	1					
ANR	961239	Condition	* str	33:7:1110:1113	961228	0	True				
ANR	961240	UnaryOperationExpression	* str		961228	0					
ANR	961241	UnaryOperator	*		961228	0					
ANR	961242	Identifier	str		961228	1					
ANR	961243	CompoundStatement		4:2:40:69	961228	1					
ANR	961244	IdentifierDeclStatement	"size_t len = strcspn ( str , ""%"" ) ;"	34:2:1120:1149	961228	0	True				
ANR	961245	IdentifierDecl	"len = strcspn ( str , ""%"" )"		961228	0					
ANR	961246	IdentifierDeclType	size_t		961228	0					
ANR	961247	Identifier	len		961228	1					
ANR	961248	AssignmentExpression	"len = strcspn ( str , ""%"" )"		961228	2		=			
ANR	961249	Identifier	len		961228	0					
ANR	961250	CallExpression	"strcspn ( str , ""%"" )"		961228	1					
ANR	961251	Callee	strcspn		961228	0					
ANR	961252	Identifier	strcspn		961228	0					
ANR	961253	ArgumentList	str		961228	1					
ANR	961254	Argument	str		961228	0					
ANR	961255	Identifier	str		961228	0					
ANR	961256	Argument	"""%"""		961228	1					
ANR	961257	PrimaryExpression	"""%"""		961228	0					
ANR	961258	IfStatement	if ( len + consumed > max )		961228	1					
ANR	961259	Condition	len + consumed > max	35:6:1157:1176	961228	0	True				
ANR	961260	RelationalExpression	len + consumed > max		961228	0		>			
ANR	961261	AdditiveExpression	len + consumed		961228	0		+			
ANR	961262	Identifier	len		961228	0					
ANR	961263	Identifier	consumed		961228	1					
ANR	961264	Identifier	max		961228	1					
ANR	961265	CompoundStatement		5:29:100:100	961228	1					
ANR	961266	ExpressionStatement	len = max - consumed	36:3:1185:1205	961228	0	True				
ANR	961267	AssignmentExpression	len = max - consumed		961228	0		=			
ANR	961268	Identifier	len		961228	0					
ANR	961269	AdditiveExpression	max - consumed		961228	1		-			
ANR	961270	Identifier	max		961228	0					
ANR	961271	Identifier	consumed		961228	1					
ANR	961272	ExpressionStatement	"result . append ( str , 0 , len )"	38:2:1213:1237	961228	2	True				
ANR	961273	CallExpression	"result . append ( str , 0 , len )"		961228	0					
ANR	961274	Callee	result . append		961228	0					
ANR	961275	MemberAccess	result . append		961228	0					
ANR	961276	Identifier	result		961228	0					
ANR	961277	Identifier	append		961228	1					
ANR	961278	ArgumentList	str		961228	1					
ANR	961279	Argument	str		961228	0					
ANR	961280	Identifier	str		961228	0					
ANR	961281	Argument	0		961228	1					
ANR	961282	PrimaryExpression	0		961228	0					
ANR	961283	Argument	len		961228	2					
ANR	961284	Identifier	len		961228	0					
ANR	961285	ExpressionStatement	str += len	39:2:1241:1251	961228	3	True				
ANR	961286	AssignmentExpression	str += len		961228	0		+=			
ANR	961287	Identifier	str		961228	0					
ANR	961288	Identifier	len		961228	1					
ANR	961289	ExpressionStatement	consumed += len	40:2:1255:1270	961228	4	True				
ANR	961290	AssignmentExpression	consumed += len		961228	0		+=			
ANR	961291	Identifier	consumed		961228	0					
ANR	961292	Identifier	len		961228	1					
ANR	961293	IfStatement	if ( consumed == max )		961228	5					
ANR	961294	Condition	consumed == max	41:6:1278:1292	961228	0	True				
ANR	961295	EqualityExpression	consumed == max		961228	0		==			
ANR	961296	Identifier	consumed		961228	0					
ANR	961297	Identifier	max		961228	1					
ANR	961298	CompoundStatement		11:24:216:216	961228	1					
ANR	961299	BreakStatement	break ;	42:3:1301:1306	961228	0	True				
ANR	961300	IfStatement	if ( * str == '%' )		961228	6					
ANR	961301	Condition	* str == '%'	44:6:1318:1328	961228	0	True				
ANR	961302	EqualityExpression	* str == '%'		961228	0		==			
ANR	961303	UnaryOperationExpression	* str		961228	0					
ANR	961304	UnaryOperator	*		961228	0					
ANR	961305	Identifier	str		961228	1					
ANR	961306	PrimaryExpression	'%'		961228	1					
ANR	961307	CompoundStatement		16:3:273:278	961228	1					
ANR	961308	IdentifierDeclStatement	char ch = 0 ;	45:3:1337:1348	961228	0	True				
ANR	961309	IdentifierDecl	ch = 0		961228	0					
ANR	961310	IdentifierDeclType	char		961228	0					
ANR	961311	Identifier	ch		961228	1					
ANR	961312	AssignmentExpression	ch = 0		961228	2		=			
ANR	961313	Identifier	ch		961228	0					
ANR	961314	PrimaryExpression	0		961228	1					
ANR	961315	IdentifierDeclStatement	int i ;	46:3:1353:1358	961228	1	True				
ANR	961316	IdentifierDecl	i		961228	0					
ANR	961317	IdentifierDeclType	int		961228	0					
ANR	961318	Identifier	i		961228	1					
ANR	961319	ExpressionStatement	str ++	47:3:1363:1368	961228	2	True				
ANR	961320	PostIncDecOperationExpression	str ++		961228	0					
ANR	961321	Identifier	str		961228	0					
ANR	961322	IncDec	++		961228	1					
ANR	961323	ExpressionStatement	consumed ++	48:3:1373:1383	961228	3	True				
ANR	961324	PostIncDecOperationExpression	consumed ++		961228	0					
ANR	961325	Identifier	consumed		961228	0					
ANR	961326	IncDec	++		961228	1					
ANR	961327	ForStatement	"for ( i = 0 ; i < 2 ; i ++ , str ++ , consumed ++ )"		961228	4					
ANR	961328	ForInit	i = 0 ;	49:7:1392:1395	961228	0	True				
ANR	961329	AssignmentExpression	i = 0		961228	0		=			
ANR	961330	Identifier	i		961228	0					
ANR	961331	PrimaryExpression	0		961228	1					
ANR	961332	Condition	i < 2	49:11:1396:1398	961228	1	True				
ANR	961333	RelationalExpression	i < 2		961228	0		<			
ANR	961334	Identifier	i		961228	0					
ANR	961335	PrimaryExpression	2		961228	1					
ANR	961336	Expression	"i ++ , str ++ , consumed ++"	49:15:1400:1419	961228	2	True				
ANR	961337	PostIncDecOperationExpression	i ++		961228	0					
ANR	961338	Identifier	i		961228	0					
ANR	961339	IncDec	++		961228	1					
ANR	961340	Expression	"str ++ , consumed ++"		961228	1					
ANR	961341	PostIncDecOperationExpression	str ++		961228	0					
ANR	961342	Identifier	str		961228	0					
ANR	961343	IncDec	++		961228	1					
ANR	961344	PostIncDecOperationExpression	consumed ++		961228	1					
ANR	961345	Identifier	consumed		961228	0					
ANR	961346	IncDec	++		961228	1					
ANR	961347	CompoundStatement		19:37:342:342	961228	3					
ANR	961348	ExpressionStatement	ch = ch << 4	50:4:1428:1438	961228	0	True				
ANR	961349	AssignmentExpression	ch = ch << 4		961228	0		=			
ANR	961350	Identifier	ch		961228	0					
ANR	961351	ShiftExpression	ch << 4		961228	1		<<			
ANR	961352	Identifier	ch		961228	0					
ANR	961353	PrimaryExpression	4		961228	1					
ANR	961354	IfStatement	if ( * str >= '0' && * str <= '9' )		961228	1					
ANR	961355	Condition	* str >= '0' && * str <= '9'	51:8:1448:1473	961228	0	True				
ANR	961356	AndExpression	* str >= '0' && * str <= '9'		961228	0		&&			
ANR	961357	RelationalExpression	* str >= '0'		961228	0		>=			
ANR	961358	UnaryOperationExpression	* str		961228	0					
ANR	961359	UnaryOperator	*		961228	0					
ANR	961360	Identifier	str		961228	1					
ANR	961361	PrimaryExpression	'0'		961228	1					
ANR	961362	RelationalExpression	* str <= '9'		961228	1		<=			
ANR	961363	UnaryOperationExpression	* str		961228	0					
ANR	961364	UnaryOperator	*		961228	0					
ANR	961365	Identifier	str		961228	1					
ANR	961366	PrimaryExpression	'9'		961228	1					
ANR	961367	CompoundStatement		21:37:397:397	961228	1					
ANR	961368	ExpressionStatement	ch |= * str - '0'	52:5:1484:1500	961228	0	True				
ANR	961369	AssignmentExpression	ch |= * str - '0'		961228	0		|=			
ANR	961370	Identifier	ch		961228	0					
ANR	961371	AdditiveExpression	* str - '0'		961228	1		-			
ANR	961372	UnaryOperationExpression	* str		961228	0					
ANR	961373	UnaryOperator	*		961228	0					
ANR	961374	Identifier	str		961228	1					
ANR	961375	PrimaryExpression	'0'		961228	1					
ANR	961376	ElseStatement	else		961228	0					
ANR	961377	IfStatement	if ( * str >= 'a' && * str <= 'f' )		961228	0					
ANR	961378	Condition	* str >= 'a' && * str <= 'f'	54:13:1521:1546	961228	0	True				
ANR	961379	AndExpression	* str >= 'a' && * str <= 'f'		961228	0		&&			
ANR	961380	RelationalExpression	* str >= 'a'		961228	0		>=			
ANR	961381	UnaryOperationExpression	* str		961228	0					
ANR	961382	UnaryOperator	*		961228	0					
ANR	961383	Identifier	str		961228	1					
ANR	961384	PrimaryExpression	'a'		961228	1					
ANR	961385	RelationalExpression	* str <= 'f'		961228	1		<=			
ANR	961386	UnaryOperationExpression	* str		961228	0					
ANR	961387	UnaryOperator	*		961228	0					
ANR	961388	Identifier	str		961228	1					
ANR	961389	PrimaryExpression	'f'		961228	1					
ANR	961390	CompoundStatement		24:42:470:470	961228	1					
ANR	961391	ExpressionStatement	ch |= * str - 'a' + 10	55:5:1557:1578	961228	0	True				
ANR	961392	AssignmentExpression	ch |= * str - 'a' + 10		961228	0		|=			
ANR	961393	Identifier	ch		961228	0					
ANR	961394	AdditiveExpression	* str - 'a' + 10		961228	1		-			
ANR	961395	UnaryOperationExpression	* str		961228	0					
ANR	961396	UnaryOperator	*		961228	0					
ANR	961397	Identifier	str		961228	1					
ANR	961398	AdditiveExpression	'a' + 10		961228	1		+			
ANR	961399	PrimaryExpression	'a'		961228	0					
ANR	961400	PrimaryExpression	10		961228	1					
ANR	961401	ElseStatement	else		961228	0					
ANR	961402	IfStatement	if ( * str >= 'A' && * str <= 'F' )		961228	0					
ANR	961403	Condition	* str >= 'A' && * str <= 'F'	57:13:1599:1624	961228	0	True				
ANR	961404	AndExpression	* str >= 'A' && * str <= 'F'		961228	0		&&			
ANR	961405	RelationalExpression	* str >= 'A'		961228	0		>=			
ANR	961406	UnaryOperationExpression	* str		961228	0					
ANR	961407	UnaryOperator	*		961228	0					
ANR	961408	Identifier	str		961228	1					
ANR	961409	PrimaryExpression	'A'		961228	1					
ANR	961410	RelationalExpression	* str <= 'F'		961228	1		<=			
ANR	961411	UnaryOperationExpression	* str		961228	0					
ANR	961412	UnaryOperator	*		961228	0					
ANR	961413	Identifier	str		961228	1					
ANR	961414	PrimaryExpression	'F'		961228	1					
ANR	961415	CompoundStatement		27:42:548:548	961228	1					
ANR	961416	ExpressionStatement	ch |= * str - 'A' + 10	58:5:1635:1656	961228	0	True				
ANR	961417	AssignmentExpression	ch |= * str - 'A' + 10		961228	0		|=			
ANR	961418	Identifier	ch		961228	0					
ANR	961419	AdditiveExpression	* str - 'A' + 10		961228	1		-			
ANR	961420	UnaryOperationExpression	* str		961228	0					
ANR	961421	UnaryOperator	*		961228	0					
ANR	961422	Identifier	str		961228	1					
ANR	961423	AdditiveExpression	'A' + 10		961228	1		+			
ANR	961424	PrimaryExpression	'A'		961228	0					
ANR	961425	PrimaryExpression	10		961228	1					
ANR	961426	ElseStatement	else		961228	0					
ANR	961427	CompoundStatement		30:9:593:593	961228	0					
ANR	961428	ReturnStatement	return false ;	61:5:1680:1692	961228	0	True				
ANR	961429	Identifier	false		961228	0					
ANR	961430	ExpressionStatement	result += ch	64:3:1708:1720	961228	5	True				
ANR	961431	AssignmentExpression	result += ch		961228	0		+=			
ANR	961432	Identifier	result		961228	0					
ANR	961433	Identifier	ch		961228	1					
ANR	961434	ReturnStatement	return true ;	67:1:1730:1741	961228	2	True				
ANR	961435	Identifier	true		961228	0					
ANR	961436	ReturnType	static bool		961228	1					
ANR	961437	Identifier	urlDecode		961228	2					
ANR	961438	ParameterList	"char const * str , size_t max , std :: string & result"		961228	3					
ANR	961439	Parameter	char const * str	30:10:1031:1045	961228	0	True				
ANR	961440	ParameterType	char const *		961228	0					
ANR	961441	Identifier	str		961228	1					
ANR	961442	Parameter	size_t max	30:26:1047:1056	961228	1	True				
ANR	961443	ParameterType	size_t		961228	0					
ANR	961444	Identifier	max		961228	1					
ANR	961445	Parameter	std :: string & result	30:37:1058:1076	961228	2	True				
ANR	961446	ParameterType	std :: string &		961228	0					
ANR	961447	Identifier	result		961228	1					
ANR	961448	CFGEntryNode	ENTRY		961228		True				
ANR	961449	CFGExitNode	EXIT		961228		True				
ANR	961450	Symbol	str		961228						
ANR	961451	Symbol	result		961228						
ANR	961452	Symbol	consumed		961228						
ANR	961453	Symbol	len		961228						
ANR	961454	Symbol	max		961228						
ANR	961455	Symbol	ch		961228						
ANR	961456	Symbol	false		961228						
ANR	961457	Symbol	true		961228						
ANR	961458	Symbol	i		961228						
ANR	961459	Symbol	* str		961228						
ANR	961460	Symbol	strcspn		961228						
ANR	961461	Function	needsUrlEncodeEscape	70:0:1746:2025							
ANR	961462	FunctionDef	needsUrlEncodeEscape (char ch)		961461	0					
ANR	961463	CompoundStatement		72:0:1795:2025	961461	0					
ANR	961464	IfStatement	if ( isalnum ( ch ) || ch == '.' || ch == '_' || ch == '-' || ch == ':' || ch == '#' )		961461	0					
ANR	961465	Condition	isalnum ( ch ) || ch == '.' || ch == '_' || ch == '-' || ch == ':' || ch == '#'	75:5:1911:1986	961461	0	True				
ANR	961466	OrExpression	isalnum ( ch ) || ch == '.' || ch == '_' || ch == '-' || ch == ':' || ch == '#'		961461	0		||			
ANR	961467	CallExpression	isalnum ( ch )		961461	0					
ANR	961468	Callee	isalnum		961461	0					
ANR	961469	Identifier	isalnum		961461	0					
ANR	961470	ArgumentList	ch		961461	1					
ANR	961471	Argument	ch		961461	0					
ANR	961472	Identifier	ch		961461	0					
ANR	961473	OrExpression	ch == '.' || ch == '_' || ch == '-' || ch == ':' || ch == '#'		961461	1		||			
ANR	961474	EqualityExpression	ch == '.'		961461	0		==			
ANR	961475	Identifier	ch		961461	0					
ANR	961476	PrimaryExpression	'.'		961461	1					
ANR	961477	OrExpression	ch == '_' || ch == '-' || ch == ':' || ch == '#'		961461	1		||			
ANR	961478	EqualityExpression	ch == '_'		961461	0		==			
ANR	961479	Identifier	ch		961461	0					
ANR	961480	PrimaryExpression	'_'		961461	1					
ANR	961481	OrExpression	ch == '-' || ch == ':' || ch == '#'		961461	1		||			
ANR	961482	EqualityExpression	ch == '-'		961461	0		==			
ANR	961483	Identifier	ch		961461	0					
ANR	961484	PrimaryExpression	'-'		961461	1					
ANR	961485	OrExpression	ch == ':' || ch == '#'		961461	1		||			
ANR	961486	EqualityExpression	ch == ':'		961461	0		==			
ANR	961487	Identifier	ch		961461	0					
ANR	961488	PrimaryExpression	':'		961461	1					
ANR	961489	EqualityExpression	ch == '#'		961461	1		==			
ANR	961490	Identifier	ch		961461	0					
ANR	961491	PrimaryExpression	'#'		961461	1					
ANR	961492	CompoundStatement		4:84:194:194	961461	1					
ANR	961493	ReturnStatement	return false ;	76:2:1994:2006	961461	0	True				
ANR	961494	Identifier	false		961461	0					
ANR	961495	ReturnStatement	return true ;	78:1:2012:2023	961461	1	True				
ANR	961496	Identifier	true		961461	0					
ANR	961497	ReturnType	static inline bool		961461	1					
ANR	961498	Identifier	needsUrlEncodeEscape		961461	2					
ANR	961499	ParameterList	char ch		961461	3					
ANR	961500	Parameter	char ch	71:21:1786:1792	961461	0	True				
ANR	961501	ParameterType	char		961461	0					
ANR	961502	Identifier	ch		961461	1					
ANR	961503	CFGEntryNode	ENTRY		961461		True				
ANR	961504	CFGExitNode	EXIT		961461		True				
ANR	961505	Symbol	isalnum		961461						
ANR	961506	Symbol	ch		961461						
ANR	961507	Symbol	false		961461						
ANR	961508	Symbol	true		961461						
ANR	961509	Function	urlEncode	81:0:2028:2336							
ANR	961510	FunctionDef	"urlEncode (char const * str , std :: string & result)"		961509	0					
ANR	961511	CompoundStatement		83:0:2087:2336	961509	0					
ANR	961512	WhileStatement	while ( * str )		961509	0					
ANR	961513	Condition	* str	84:7:2096:2099	961509	0	True				
ANR	961514	UnaryOperationExpression	* str		961509	0					
ANR	961515	UnaryOperator	*		961509	0					
ANR	961516	Identifier	str		961509	1					
ANR	961517	CompoundStatement		3:2:18:32	961509	1					
ANR	961518	IdentifierDeclStatement	size_t len = 0 ;	85:2:2106:2120	961509	0	True				
ANR	961519	IdentifierDecl	len = 0		961509	0					
ANR	961520	IdentifierDeclType	size_t		961509	0					
ANR	961521	Identifier	len		961509	1					
ANR	961522	AssignmentExpression	len = 0		961509	2		=			
ANR	961523	Identifier	len		961509	0					
ANR	961524	PrimaryExpression	0		961509	1					
ANR	961525	WhileStatement	while ( str [ len ] && ! needsUrlEncodeEscape ( str [ len ] ) )		961509	1					
ANR	961526	Condition	str [ len ] && ! needsUrlEncodeEscape ( str [ len ] )	86:9:2131:2173	961509	0	True				
ANR	961527	AndExpression	str [ len ] && ! needsUrlEncodeEscape ( str [ len ] )		961509	0		&&			
ANR	961528	ArrayIndexing	str [ len ]		961509	0					
ANR	961529	Identifier	str		961509	0					
ANR	961530	Identifier	len		961509	1					
ANR	961531	UnaryOperationExpression	! needsUrlEncodeEscape ( str [ len ] )		961509	1					
ANR	961532	UnaryOperator	!		961509	0					
ANR	961533	CallExpression	needsUrlEncodeEscape ( str [ len ] )		961509	1					
ANR	961534	Callee	needsUrlEncodeEscape		961509	0					
ANR	961535	Identifier	needsUrlEncodeEscape		961509	0					
ANR	961536	ArgumentList	str [ len ]		961509	1					
ANR	961537	Argument	str [ len ]		961509	0					
ANR	961538	ArrayIndexing	str [ len ]		961509	0					
ANR	961539	Identifier	str		961509	0					
ANR	961540	Identifier	len		961509	1					
ANR	961541	CompoundStatement		4:55:89:89	961509	1					
ANR	961542	ExpressionStatement	len ++	87:3:2182:2187	961509	0	True				
ANR	961543	PostIncDecOperationExpression	len ++		961509	0					
ANR	961544	Identifier	len		961509	0					
ANR	961545	IncDec	++		961509	1					
ANR	961546	ExpressionStatement	"result . append ( str , 0 , len )"	90:2:2196:2220	961509	2	True				
ANR	961547	CallExpression	"result . append ( str , 0 , len )"		961509	0					
ANR	961548	Callee	result . append		961509	0					
ANR	961549	MemberAccess	result . append		961509	0					
ANR	961550	Identifier	result		961509	0					
ANR	961551	Identifier	append		961509	1					
ANR	961552	ArgumentList	str		961509	1					
ANR	961553	Argument	str		961509	0					
ANR	961554	Identifier	str		961509	0					
ANR	961555	Argument	0		961509	1					
ANR	961556	PrimaryExpression	0		961509	0					
ANR	961557	Argument	len		961509	2					
ANR	961558	Identifier	len		961509	0					
ANR	961559	ExpressionStatement	str += len	91:2:2224:2234	961509	3	True				
ANR	961560	AssignmentExpression	str += len		961509	0		+=			
ANR	961561	Identifier	str		961509	0					
ANR	961562	Identifier	len		961509	1					
ANR	961563	IfStatement	if ( * str )		961509	4					
ANR	961564	Condition	* str	92:6:2242:2245	961509	0	True				
ANR	961565	UnaryOperationExpression	* str		961509	0					
ANR	961566	UnaryOperator	*		961509	0					
ANR	961567	Identifier	str		961509	1					
ANR	961568	CompoundStatement		11:3:166:178	961509	1					
ANR	961569	IdentifierDeclStatement	char code [ 4 ] ;	93:3:2254:2266	961509	0	True				
ANR	961570	IdentifierDecl	code [ 4 ]		961509	0					
ANR	961571	IdentifierDeclType	char [ 4 ]		961509	0					
ANR	961572	Identifier	code		961509	1					
ANR	961573	PrimaryExpression	4		961509	2					
ANR	961574	ExpressionStatement	"sprintf ( code , ""%%%02x"" , * str )"	94:3:2271:2298	961509	1	True				
ANR	961575	CallExpression	"sprintf ( code , ""%%%02x"" , * str )"		961509	0					
ANR	961576	Callee	sprintf		961509	0					
ANR	961577	Identifier	sprintf		961509	0					
ANR	961578	ArgumentList	code		961509	1					
ANR	961579	Argument	code		961509	0					
ANR	961580	Identifier	code		961509	0					
ANR	961581	Argument	"""%%%02x"""		961509	1					
ANR	961582	PrimaryExpression	"""%%%02x"""		961509	0					
ANR	961583	Argument	* str		961509	2					
ANR	961584	UnaryOperationExpression	* str		961509	0					
ANR	961585	UnaryOperator	*		961509	0					
ANR	961586	Identifier	str		961509	1					
ANR	961587	ExpressionStatement	result += code	95:3:2303:2317	961509	2	True				
ANR	961588	AssignmentExpression	result += code		961509	0		+=			
ANR	961589	Identifier	result		961509	0					
ANR	961590	Identifier	code		961509	1					
ANR	961591	ExpressionStatement	str ++	96:3:2322:2327	961509	3	True				
ANR	961592	PostIncDecOperationExpression	str ++		961509	0					
ANR	961593	Identifier	str		961509	0					
ANR	961594	IncDec	++		961509	1					
ANR	961595	ReturnType	static void		961509	1					
ANR	961596	Identifier	urlEncode		961509	2					
ANR	961597	ParameterList	"char const * str , std :: string & result"		961509	3					
ANR	961598	Parameter	char const * str	82:10:2050:2064	961509	0	True				
ANR	961599	ParameterType	char const *		961509	0					
ANR	961600	Identifier	str		961509	1					
ANR	961601	Parameter	std :: string & result	82:26:2066:2084	961509	1	True				
ANR	961602	ParameterType	std :: string &		961509	0					
ANR	961603	Identifier	result		961509	1					
ANR	961604	CFGEntryNode	ENTRY		961509		True				
ANR	961605	CFGExitNode	EXIT		961509		True				
ANR	961606	Symbol	str		961509						
ANR	961607	Symbol	result		961509						
ANR	961608	Symbol	code		961509						
ANR	961609	Symbol	len		961509						
ANR	961610	Symbol	needsUrlEncodeEscape		961509						
ANR	961611	Symbol	* str		961509						
ANR	961612	Symbol	* len		961509						
ANR	961613	Function	parseUrlEncodedParams	101:0:2339:3578							
ANR	961614	FunctionDef	"parseUrlEncodedParams (char const * str , map_type & params)"		961613	0					
ANR	961615	CompoundStatement		103:0:2436:3578	961613	0					
ANR	961616	ExpressionStatement	ASSERT ( str )	110:1:2713:2726	961613	0	True				
ANR	961617	CallExpression	ASSERT ( str )		961613	0					
ANR	961618	Callee	ASSERT		961613	0					
ANR	961619	Identifier	ASSERT		961613	0					
ANR	961620	ArgumentList	str		961613	1					
ANR	961621	Argument	str		961613	0					
ANR	961622	Identifier	str		961613	0					
ANR	961623	WhileStatement	while ( * str )		961613	1					
ANR	961624	Condition	* str	112:8:2737:2740	961613	0	True				
ANR	961625	UnaryOperationExpression	* str		961613	0					
ANR	961626	UnaryOperator	*		961613	0					
ANR	961627	Identifier	str		961613	1					
ANR	961628	CompoundStatement		44:2:868:952	961613	1					
ANR	961629	WhileStatement	while ( * str == ';' || * str == '&' )		961613	0					
ANR	961630	Condition	* str == ';' || * str == '&'	113:9:2755:2780	961613	0	True				
ANR	961631	OrExpression	* str == ';' || * str == '&'		961613	0		||			
ANR	961632	EqualityExpression	* str == ';'		961613	0		==			
ANR	961633	UnaryOperationExpression	* str		961613	0					
ANR	961634	UnaryOperator	*		961613	0					
ANR	961635	Identifier	str		961613	1					
ANR	961636	PrimaryExpression	';'		961613	1					
ANR	961637	EqualityExpression	* str == '&'		961613	1		==			
ANR	961638	UnaryOperationExpression	* str		961613	0					
ANR	961639	UnaryOperator	*		961613	0					
ANR	961640	Identifier	str		961613	1					
ANR	961641	PrimaryExpression	'&'		961613	1					
ANR	961642	CompoundStatement		11:38:347:347	961613	1					
ANR	961643	ExpressionStatement	str ++	114:3:2789:2794	961613	0	True				
ANR	961644	PostIncDecOperationExpression	str ++		961613	0					
ANR	961645	Identifier	str		961613	0					
ANR	961646	IncDec	++		961613	1					
ANR	961647	IfStatement	if ( ! * str )		961613	1					
ANR	961648	Condition	! * str	116:6:2806:2810	961613	0	True				
ANR	961649	UnaryOperationExpression	! * str		961613	0					
ANR	961650	UnaryOperator	!		961613	0					
ANR	961651	UnaryOperationExpression	* str		961613	1					
ANR	961652	UnaryOperator	*		961613	0					
ANR	961653	Identifier	str		961613	1					
ANR	961654	CompoundStatement		14:14:377:377	961613	1					
ANR	961655	BreakStatement	break ;	117:3:2819:2824	961613	0	True				
ANR	961656	IdentifierDeclStatement	"std :: pair < std :: string , std :: string > keyval ;"	120:2:2833:2874	961613	2	True				
ANR	961657	IdentifierDecl	keyval		961613	0					
ANR	961658	IdentifierDeclType	"std :: pair < std :: string , std :: string >"		961613	0					
ANR	961659	Identifier	keyval		961613	1					
ANR	961660	IdentifierDeclStatement	"size_t len = strcspn ( str , ""=&;"" ) ;"	121:2:2878:2909	961613	3	True				
ANR	961661	IdentifierDecl	"len = strcspn ( str , ""=&;"" )"		961613	0					
ANR	961662	IdentifierDeclType	size_t		961613	0					
ANR	961663	Identifier	len		961613	1					
ANR	961664	AssignmentExpression	"len = strcspn ( str , ""=&;"" )"		961613	2		=			
ANR	961665	Identifier	len		961613	0					
ANR	961666	CallExpression	"strcspn ( str , ""=&;"" )"		961613	1					
ANR	961667	Callee	strcspn		961613	0					
ANR	961668	Identifier	strcspn		961613	0					
ANR	961669	ArgumentList	str		961613	1					
ANR	961670	Argument	str		961613	0					
ANR	961671	Identifier	str		961613	0					
ANR	961672	Argument	"""=&;"""		961613	1					
ANR	961673	PrimaryExpression	"""=&;"""		961613	0					
ANR	961674	IfStatement	if ( ! len )		961613	4					
ANR	961675	Condition	! len	123:6:2918:2921	961613	0	True				
ANR	961676	UnaryOperationExpression	! len		961613	0					
ANR	961677	UnaryOperator	!		961613	0					
ANR	961678	Identifier	len		961613	1					
ANR	961679	CompoundStatement		21:13:488:488	961613	1					
ANR	961680	ReturnStatement	return false ;	124:3:2930:2942	961613	0	True				
ANR	961681	Identifier	false		961613	0					
ANR	961682	IfStatement	"if ( ! urlDecode ( str , len , keyval . first ) )"		961613	5					
ANR	961683	Condition	"! urlDecode ( str , len , keyval . first )"	126:6:2954:2985	961613	0	True				
ANR	961684	UnaryOperationExpression	"! urlDecode ( str , len , keyval . first )"		961613	0					
ANR	961685	UnaryOperator	!		961613	0					
ANR	961686	CallExpression	"urlDecode ( str , len , keyval . first )"		961613	1					
ANR	961687	Callee	urlDecode		961613	0					
ANR	961688	Identifier	urlDecode		961613	0					
ANR	961689	ArgumentList	str		961613	1					
ANR	961690	Argument	str		961613	0					
ANR	961691	Identifier	str		961613	0					
ANR	961692	Argument	len		961613	1					
ANR	961693	Identifier	len		961613	0					
ANR	961694	Argument	keyval . first		961613	2					
ANR	961695	MemberAccess	keyval . first		961613	0					
ANR	961696	Identifier	keyval		961613	0					
ANR	961697	Identifier	first		961613	1					
ANR	961698	CompoundStatement		24:41:552:552	961613	1					
ANR	961699	ReturnStatement	return false ;	127:3:2994:3006	961613	0	True				
ANR	961700	Identifier	false		961613	0					
ANR	961701	ExpressionStatement	str += len	130:2:3015:3025	961613	6	True				
ANR	961702	AssignmentExpression	str += len		961613	0		+=			
ANR	961703	Identifier	str		961613	0					
ANR	961704	Identifier	len		961613	1					
ANR	961705	IfStatement	if ( * str == '=' )		961613	7					
ANR	961706	Condition	* str == '='	132:6:3034:3044	961613	0	True				
ANR	961707	EqualityExpression	* str == '='		961613	0		==			
ANR	961708	UnaryOperationExpression	* str		961613	0					
ANR	961709	UnaryOperator	*		961613	0					
ANR	961710	Identifier	str		961613	1					
ANR	961711	PrimaryExpression	'='		961613	1					
ANR	961712	CompoundStatement		30:20:611:611	961613	1					
ANR	961713	ExpressionStatement	str ++	133:3:3053:3058	961613	0	True				
ANR	961714	PostIncDecOperationExpression	str ++		961613	0					
ANR	961715	Identifier	str		961613	0					
ANR	961716	IncDec	++		961613	1					
ANR	961717	ExpressionStatement	"len = strcspn ( str , ""&;"" )"	135:3:3064:3087	961613	1	True				
ANR	961718	AssignmentExpression	"len = strcspn ( str , ""&;"" )"		961613	0		=			
ANR	961719	Identifier	len		961613	0					
ANR	961720	CallExpression	"strcspn ( str , ""&;"" )"		961613	1					
ANR	961721	Callee	strcspn		961613	0					
ANR	961722	Identifier	strcspn		961613	0					
ANR	961723	ArgumentList	str		961613	1					
ANR	961724	Argument	str		961613	0					
ANR	961725	Identifier	str		961613	0					
ANR	961726	Argument	"""&;"""		961613	1					
ANR	961727	PrimaryExpression	"""&;"""		961613	0					
ANR	961728	IfStatement	"if ( ! urlDecode ( str , len , keyval . second ) )"		961613	2					
ANR	961729	Condition	"! urlDecode ( str , len , keyval . second )"	137:7:3097:3129	961613	0	True				
ANR	961730	UnaryOperationExpression	"! urlDecode ( str , len , keyval . second )"		961613	0					
ANR	961731	UnaryOperator	!		961613	0					
ANR	961732	CallExpression	"urlDecode ( str , len , keyval . second )"		961613	1					
ANR	961733	Callee	urlDecode		961613	0					
ANR	961734	Identifier	urlDecode		961613	0					
ANR	961735	ArgumentList	str		961613	1					
ANR	961736	Argument	str		961613	0					
ANR	961737	Identifier	str		961613	0					
ANR	961738	Argument	len		961613	1					
ANR	961739	Identifier	len		961613	0					
ANR	961740	Argument	keyval . second		961613	2					
ANR	961741	MemberAccess	keyval . second		961613	0					
ANR	961742	Identifier	keyval		961613	0					
ANR	961743	Identifier	second		961613	1					
ANR	961744	CompoundStatement		35:43:696:696	961613	1					
ANR	961745	ReturnStatement	return false ;	138:4:3139:3151	961613	0	True				
ANR	961746	Identifier	false		961613	0					
ANR	961747	ExpressionStatement	str += len	141:3:3162:3172	961613	3	True				
ANR	961748	AssignmentExpression	str += len		961613	0		+=			
ANR	961749	Identifier	str		961613	0					
ANR	961750	Identifier	len		961613	1					
ANR	961751	IdentifierDeclStatement	"std :: pair < typename map_type :: iterator , bool > insert_result = params . insert ( keyval ) ;"	146:2:3305:3389	961613	8	True				
ANR	961752	IdentifierDecl	insert_result = params . insert ( keyval )		961613	0					
ANR	961753	IdentifierDeclType	"std :: pair < typename map_type :: iterator , bool >"		961613	0					
ANR	961754	Identifier	insert_result		961613	1					
ANR	961755	AssignmentExpression	insert_result = params . insert ( keyval )		961613	2		=			
ANR	961756	Identifier	insert_result		961613	0					
ANR	961757	CallExpression	params . insert ( keyval )		961613	1					
ANR	961758	Callee	params . insert		961613	0					
ANR	961759	MemberAccess	params . insert		961613	0					
ANR	961760	Identifier	params		961613	0					
ANR	961761	Identifier	insert		961613	1					
ANR	961762	ArgumentList	keyval		961613	1					
ANR	961763	Argument	keyval		961613	0					
ANR	961764	Identifier	keyval		961613	0					
ANR	961765	IfStatement	if ( ! insert_result . second )		961613	9					
ANR	961766	Condition	! insert_result . second	149:6:3398:3418	961613	0	True				
ANR	961767	UnaryOperationExpression	! insert_result . second		961613	0					
ANR	961768	UnaryOperator	!		961613	0					
ANR	961769	MemberAccess	insert_result . second		961613	1					
ANR	961770	Identifier	insert_result		961613	0					
ANR	961771	Identifier	second		961613	1					
ANR	961772	CompoundStatement		47:30:985:985	961613	1					
ANR	961773	ExpressionStatement	ASSERT ( insert_result . first -> first == keyval . first )	151:3:3455:3507	961613	0	True				
ANR	961774	CallExpression	ASSERT ( insert_result . first -> first == keyval . first )		961613	0					
ANR	961775	Callee	ASSERT		961613	0					
ANR	961776	Identifier	ASSERT		961613	0					
ANR	961777	ArgumentList	insert_result . first -> first == keyval . first		961613	1					
ANR	961778	Argument	insert_result . first -> first == keyval . first		961613	0					
ANR	961779	EqualityExpression	insert_result . first -> first == keyval . first		961613	0		==			
ANR	961780	PtrMemberAccess	insert_result . first -> first		961613	0					
ANR	961781	MemberAccess	insert_result . first		961613	0					
ANR	961782	Identifier	insert_result		961613	0					
ANR	961783	Identifier	first		961613	1					
ANR	961784	Identifier	first		961613	1					
ANR	961785	MemberAccess	keyval . first		961613	1					
ANR	961786	Identifier	keyval		961613	0					
ANR	961787	Identifier	first		961613	1					
ANR	961788	ExpressionStatement	insert_result . first -> second = keyval . second	152:3:3512:3555	961613	1	True				
ANR	961789	AssignmentExpression	insert_result . first -> second = keyval . second		961613	0		=			
ANR	961790	PtrMemberAccess	insert_result . first -> second		961613	0					
ANR	961791	MemberAccess	insert_result . first		961613	0					
ANR	961792	Identifier	insert_result		961613	0					
ANR	961793	Identifier	first		961613	1					
ANR	961794	Identifier	second		961613	1					
ANR	961795	MemberAccess	keyval . second		961613	1					
ANR	961796	Identifier	keyval		961613	0					
ANR	961797	Identifier	second		961613	1					
ANR	961798	ReturnStatement	return true ;	155:1:3565:3576	961613	2	True				
ANR	961799	Identifier	true		961613	0					
ANR	961800	ReturnType	static bool		961613	1					
ANR	961801	Identifier	parseUrlEncodedParams		961613	2					
ANR	961802	ParameterList	"char const * str , map_type & params"		961613	3					
ANR	961803	Parameter	char const * str	102:34:2402:2416	961613	0	True				
ANR	961804	ParameterType	char const *		961613	0					
ANR	961805	Identifier	str		961613	1					
ANR	961806	Parameter	map_type & params	102:50:2418:2433	961613	1	True				
ANR	961807	ParameterType	map_type &		961613	0					
ANR	961808	Identifier	params		961613	1					
ANR	961809	CFGEntryNode	ENTRY		961613		True				
ANR	961810	CFGExitNode	EXIT		961613		True				
ANR	961811	Symbol	keyval . first		961613						
ANR	961812	Symbol	false		961613						
ANR	961813	Symbol	urlDecode		961613						
ANR	961814	Symbol	insert_result		961613						
ANR	961815	Symbol	params		961613						
ANR	961816	Symbol	strcspn		961613						
ANR	961817	Symbol	* insert_result		961613						
ANR	961818	Symbol	insert_result . first -> second		961613						
ANR	961819	Symbol	params . insert		961613						
ANR	961820	Symbol	str		961613						
ANR	961821	Symbol	insert_result . first -> first		961613						
ANR	961822	Symbol	len		961613						
ANR	961823	Symbol	keyval . second		961613						
ANR	961824	Symbol	insert_result . second		961613						
ANR	961825	Symbol	true		961613						
ANR	961826	Symbol	* str		961613						
ANR	961827	Symbol	keyval		961613						
ANR	961828	Symbol	* insert_result . first		961613						
ANR	961829	Symbol	insert_result . first		961613						
ANR	961830	Function	urlEncodeParams	158:0:3581:3980							
ANR	961831	FunctionDef	urlEncodeParams (map_type const & params)		961830	0					
ANR	961832	CompoundStatement		160:0:3669:3980	961830	0					
ANR	961833	IdentifierDeclStatement	std :: string result ;	161:1:3672:3690	961830	0	True				
ANR	961834	IdentifierDecl	result		961830	0					
ANR	961835	IdentifierDeclType	std :: string		961830	0					
ANR	961836	Identifier	result		961830	1					
ANR	961837	IdentifierDeclStatement	typename map_type :: const_iterator it ;	163:1:3694:3730	961830	1	True				
ANR	961838	IdentifierDecl	it		961830	0					
ANR	961839	IdentifierDeclType	typename map_type :: const_iterator		961830	0					
ANR	961840	Identifier	it		961830	1					
ANR	961841	ForStatement	for ( it = params . begin ( ) ; it != params . end ( ) ; it ++ )		961830	2					
ANR	961842	ForInit	it = params . begin ( ) ;	164:5:3737:3754	961830	0	True				
ANR	961843	AssignmentExpression	it = params . begin ( )		961830	0		=			
ANR	961844	Identifier	it		961830	0					
ANR	961845	CallExpression	params . begin ( )		961830	1					
ANR	961846	Callee	params . begin		961830	0					
ANR	961847	MemberAccess	params . begin		961830	0					
ANR	961848	Identifier	params		961830	0					
ANR	961849	Identifier	begin		961830	1					
ANR	961850	ArgumentList			961830	1					
ANR	961851	Condition	it != params . end ( )	164:24:3756:3771	961830	1	True				
ANR	961852	EqualityExpression	it != params . end ( )		961830	0		!=			
ANR	961853	Identifier	it		961830	0					
ANR	961854	CallExpression	params . end ( )		961830	1					
ANR	961855	Callee	params . end		961830	0					
ANR	961856	MemberAccess	params . end		961830	0					
ANR	961857	Identifier	params		961830	0					
ANR	961858	Identifier	end		961830	1					
ANR	961859	ArgumentList			961830	1					
ANR	961860	PostIncDecOperationExpression	it ++	164:42:3774:3777	961830	2	True				
ANR	961861	Identifier	it		961830	0					
ANR	961862	IncDec	++		961830	1					
ANR	961863	CompoundStatement		5:48:110:110	961830	3					
ANR	961864	IfStatement	if ( result . size ( ) )		961830	0					
ANR	961865	Condition	result . size ( )	165:6:3788:3800	961830	0	True				
ANR	961866	CallExpression	result . size ( )		961830	0					
ANR	961867	Callee	result . size		961830	0					
ANR	961868	MemberAccess	result . size		961830	0					
ANR	961869	Identifier	result		961830	0					
ANR	961870	Identifier	size		961830	1					
ANR	961871	ArgumentList			961830	1					
ANR	961872	CompoundStatement		6:22:134:134	961830	1					
ANR	961873	ExpressionStatement	"result += ""&"""	166:3:3809:3822	961830	0	True				
ANR	961874	AssignmentExpression	"result += ""&"""		961830	0		+=			
ANR	961875	Identifier	result		961830	0					
ANR	961876	PrimaryExpression	"""&"""		961830	1					
ANR	961877	ExpressionStatement	"urlEncode ( it -> first . c_str ( ) , result )"	168:2:3830:3865	961830	1	True				
ANR	961878	CallExpression	"urlEncode ( it -> first . c_str ( ) , result )"		961830	0					
ANR	961879	Callee	urlEncode		961830	0					
ANR	961880	Identifier	urlEncode		961830	0					
ANR	961881	ArgumentList	it -> first . c_str ( )		961830	1					
ANR	961882	Argument	it -> first . c_str ( )		961830	0					
ANR	961883	CallExpression	it -> first . c_str ( )		961830	0					
ANR	961884	Callee	it -> first . c_str		961830	0					
ANR	961885	MemberAccess	it -> first . c_str		961830	0					
ANR	961886	PtrMemberAccess	it -> first		961830	0					
ANR	961887	Identifier	it		961830	0					
ANR	961888	Identifier	first		961830	1					
ANR	961889	Identifier	c_str		961830	1					
ANR	961890	ArgumentList			961830	1					
ANR	961891	Argument	result		961830	1					
ANR	961892	Identifier	result		961830	0					
ANR	961893	IfStatement	if ( ! it -> second . empty ( ) )		961830	2					
ANR	961894	Condition	! it -> second . empty ( )	169:6:3873:3891	961830	0	True				
ANR	961895	UnaryOperationExpression	! it -> second . empty ( )		961830	0					
ANR	961896	UnaryOperator	!		961830	0					
ANR	961897	CallExpression	it -> second . empty ( )		961830	1					
ANR	961898	Callee	it -> second . empty		961830	0					
ANR	961899	MemberAccess	it -> second . empty		961830	0					
ANR	961900	PtrMemberAccess	it -> second		961830	0					
ANR	961901	Identifier	it		961830	0					
ANR	961902	Identifier	second		961830	1					
ANR	961903	Identifier	empty		961830	1					
ANR	961904	ArgumentList			961830	1					
ANR	961905	CompoundStatement		10:28:225:225	961830	1					
ANR	961906	ExpressionStatement	"result += ""="""	170:3:3900:3913	961830	0	True				
ANR	961907	AssignmentExpression	"result += ""="""		961830	0		+=			
ANR	961908	Identifier	result		961830	0					
ANR	961909	PrimaryExpression	"""="""		961830	1					
ANR	961910	ExpressionStatement	"urlEncode ( it -> second . c_str ( ) , result )"	171:3:3918:3954	961830	1	True				
ANR	961911	CallExpression	"urlEncode ( it -> second . c_str ( ) , result )"		961830	0					
ANR	961912	Callee	urlEncode		961830	0					
ANR	961913	Identifier	urlEncode		961830	0					
ANR	961914	ArgumentList	it -> second . c_str ( )		961830	1					
ANR	961915	Argument	it -> second . c_str ( )		961830	0					
ANR	961916	CallExpression	it -> second . c_str ( )		961830	0					
ANR	961917	Callee	it -> second . c_str		961830	0					
ANR	961918	MemberAccess	it -> second . c_str		961830	0					
ANR	961919	PtrMemberAccess	it -> second		961830	0					
ANR	961920	Identifier	it		961830	0					
ANR	961921	Identifier	second		961830	1					
ANR	961922	Identifier	c_str		961830	1					
ANR	961923	ArgumentList			961830	1					
ANR	961924	Argument	result		961830	1					
ANR	961925	Identifier	result		961830	0					
ANR	961926	ReturnStatement	return result ;	175:1:3965:3978	961830	3	True				
ANR	961927	Identifier	result		961830	0					
ANR	961928	ReturnType	static std :: string		961830	1					
ANR	961929	Identifier	urlEncodeParams		961830	2					
ANR	961930	ParameterList	map_type const & params		961830	3					
ANR	961931	Parameter	map_type const & params	159:35:3645:3666	961830	0	True				
ANR	961932	ParameterType	map_type const &		961830	0					
ANR	961933	Identifier	params		961830	1					
ANR	961934	CFGEntryNode	ENTRY		961830		True				
ANR	961935	CFGExitNode	EXIT		961830		True				
ANR	961936	Symbol	result		961830						
ANR	961937	Symbol	it -> second . empty		961830						
ANR	961938	Symbol	it -> second		961830						
ANR	961939	Symbol	* it		961830						
ANR	961940	Symbol	result . size		961830						
ANR	961941	Symbol	it -> first		961830						
ANR	961942	Symbol	it -> second . c_str		961830						
ANR	961943	Symbol	it -> first . c_str		961830						
ANR	961944	Symbol	params . begin		961830						
ANR	961945	Symbol	it		961830						
ANR	961946	Symbol	params		961830						
ANR	961947	Symbol	params . end		961830						
ANR	961948	Function	Sinful :: Sinful	178:0:3983:5182							
ANR	961949	FunctionDef	Sinful :: Sinful (char const * sinful)		961948	0					
ANR	961950	CompoundStatement		179:0:4018:5182	961948	0					
ANR	961951	IfStatement	if ( ! sinful )		961948	0					
ANR	961952	Condition	! sinful	180:5:4025:4031	961948	0	True				
ANR	961953	UnaryOperationExpression	! sinful		961948	0					
ANR	961954	UnaryOperator	!		961948	0					
ANR	961955	Identifier	sinful		961948	1					
ANR	961956	CompoundStatement		2:15:16:16	961948	1					
ANR	961957	ExpressionStatement	m_valid = true	181:2:4062:4076	961948	0	True				
ANR	961958	AssignmentExpression	m_valid = true		961948	0		=			
ANR	961959	Identifier	m_valid		961948	0					
ANR	961960	Identifier	true		961948	1					
ANR	961961	ElseStatement	else		961948	0					
ANR	961962	CompoundStatement		8:2:110:127	961948	0					
ANR	961963	IdentifierDeclStatement	char * host = NULL ;	184:2:4091:4106	961948	0	True				
ANR	961964	IdentifierDecl	* host = NULL		961948	0					
ANR	961965	IdentifierDeclType	char *		961948	0					
ANR	961966	Identifier	host		961948	1					
ANR	961967	AssignmentExpression	* host = NULL		961948	2		=			
ANR	961968	Identifier	NULL		961948	0					
ANR	961969	Identifier	NULL		961948	1					
ANR	961970	IdentifierDeclStatement	char * port = NULL ;	185:2:4110:4125	961948	1	True				
ANR	961971	IdentifierDecl	* port = NULL		961948	0					
ANR	961972	IdentifierDeclType	char *		961948	0					
ANR	961973	Identifier	port		961948	1					
ANR	961974	AssignmentExpression	* port = NULL		961948	2		=			
ANR	961975	Identifier	NULL		961948	0					
ANR	961976	Identifier	NULL		961948	1					
ANR	961977	IdentifierDeclStatement	char * params = NULL ;	186:2:4129:4146	961948	2	True				
ANR	961978	IdentifierDecl	* params = NULL		961948	0					
ANR	961979	IdentifierDeclType	char *		961948	0					
ANR	961980	Identifier	params		961948	1					
ANR	961981	AssignmentExpression	* params = NULL		961948	2		=			
ANR	961982	Identifier	NULL		961948	0					
ANR	961983	Identifier	NULL		961948	1					
ANR	961984	IfStatement	if ( * sinful != '<' )		961948	3					
ANR	961985	Condition	* sinful != '<'	188:6:4155:4168	961948	0	True				
ANR	961986	EqualityExpression	* sinful != '<'		961948	0		!=			
ANR	961987	UnaryOperationExpression	* sinful		961948	0					
ANR	961988	UnaryOperator	*		961948	0					
ANR	961989	Identifier	sinful		961948	1					
ANR	961990	PrimaryExpression	'<'		961948	1					
ANR	961991	CompoundStatement		10:23:153:153	961948	1					
ANR	961992	ExpressionStatement	"m_sinful = ""<"""	189:3:4177:4191	961948	0	True				
ANR	961993	AssignmentExpression	"m_sinful = ""<"""		961948	0		=			
ANR	961994	Identifier	m_sinful		961948	0					
ANR	961995	PrimaryExpression	"""<"""		961948	1					
ANR	961996	IfStatement	if ( * sinful == '[' )		961948	1					
ANR	961997	Condition	* sinful == '['	193:6:4291:4304	961948	0	True				
ANR	961998	EqualityExpression	* sinful == '['		961948	0		==			
ANR	961999	UnaryOperationExpression	* sinful		961948	0					
ANR	962000	UnaryOperator	*		961948	0					
ANR	962001	Identifier	sinful		961948	1					
ANR	962002	PrimaryExpression	'['		961948	1					
ANR	962003	CompoundStatement		15:22:288:288	961948	1					
ANR	962004	ExpressionStatement	m_sinful += sinful	194:4:4321:4339	961948	0	True				
ANR	962005	AssignmentExpression	m_sinful += sinful		961948	0		+=			
ANR	962006	Identifier	m_sinful		961948	0					
ANR	962007	Identifier	sinful		961948	1					
ANR	962008	ElseStatement	else		961948	0					
ANR	962009	CompoundStatement		19:4:391:437	961948	0					
ANR	962010	IdentifierDeclStatement	"const char * first_colon = strchr ( sinful , ':' ) ;"	197:4:4410:4456	961948	0	True				
ANR	962011	IdentifierDecl	"* first_colon = strchr ( sinful , ':' )"		961948	0					
ANR	962012	IdentifierDeclType	const char *		961948	0					
ANR	962013	Identifier	first_colon		961948	1					
ANR	962014	AssignmentExpression	"* first_colon = strchr ( sinful , ':' )"		961948	2		=			
ANR	962015	Identifier	first_colon		961948	0					
ANR	962016	CallExpression	"strchr ( sinful , ':' )"		961948	1					
ANR	962017	Callee	strchr		961948	0					
ANR	962018	Identifier	strchr		961948	0					
ANR	962019	ArgumentList	sinful		961948	1					
ANR	962020	Argument	sinful		961948	0					
ANR	962021	Identifier	sinful		961948	0					
ANR	962022	Argument	':'		961948	1					
ANR	962023	PrimaryExpression	':'		961948	0					
ANR	962024	IfStatement	"if ( first_colon && strchr ( first_colon + 1 , ':' ) )"		961948	1					
ANR	962025	Condition	"first_colon && strchr ( first_colon + 1 , ':' )"	198:7:4465:4505	961948	0	True				
ANR	962026	AndExpression	"first_colon && strchr ( first_colon + 1 , ':' )"		961948	0		&&			
ANR	962027	Identifier	first_colon		961948	0					
ANR	962028	CallExpression	"strchr ( first_colon + 1 , ':' )"		961948	1					
ANR	962029	Callee	strchr		961948	0					
ANR	962030	Identifier	strchr		961948	0					
ANR	962031	ArgumentList	first_colon + 1		961948	1					
ANR	962032	Argument	first_colon + 1		961948	0					
ANR	962033	AdditiveExpression	first_colon + 1		961948	0		+			
ANR	962034	Identifier	first_colon		961948	0					
ANR	962035	PrimaryExpression	1		961948	1					
ANR	962036	Argument	':'		961948	1					
ANR	962037	PrimaryExpression	':'		961948	0					
ANR	962038	CompoundStatement		20:50:489:489	961948	1					
ANR	962039	ExpressionStatement	m_valid = false	203:5:4737:4752	961948	0	True				
ANR	962040	AssignmentExpression	m_valid = false		961948	0		=			
ANR	962041	Identifier	m_valid		961948	0					
ANR	962042	Identifier	false		961948	1					
ANR	962043	ReturnStatement	return ;	204:5:4759:4765	961948	1	True				
ANR	962044	ExpressionStatement	m_sinful += sinful	206:4:4777:4795	961948	2	True				
ANR	962045	AssignmentExpression	m_sinful += sinful		961948	0		+=			
ANR	962046	Identifier	m_sinful		961948	0					
ANR	962047	Identifier	sinful		961948	1					
ANR	962048	ExpressionStatement	"m_sinful += "">"""	208:3:4805:4820	961948	2	True				
ANR	962049	AssignmentExpression	"m_sinful += "">"""		961948	0		+=			
ANR	962050	Identifier	m_sinful		961948	0					
ANR	962051	PrimaryExpression	""">"""		961948	1					
ANR	962052	ElseStatement	else		961948	0					
ANR	962053	CompoundStatement		32:7:814:814	961948	0					
ANR	962054	ExpressionStatement	m_sinful = sinful	211:3:4838:4855	961948	0	True				
ANR	962055	AssignmentExpression	m_sinful = sinful		961948	0		=			
ANR	962056	Identifier	m_sinful		961948	0					
ANR	962057	Identifier	sinful		961948	1					
ANR	962058	ExpressionStatement	"m_valid = split_sin ( m_sinful . c_str ( ) , & host , & port , & params )"	214:2:4864:4921	961948	4	True				
ANR	962059	AssignmentExpression	"m_valid = split_sin ( m_sinful . c_str ( ) , & host , & port , & params )"		961948	0		=			
ANR	962060	Identifier	m_valid		961948	0					
ANR	962061	CallExpression	"split_sin ( m_sinful . c_str ( ) , & host , & port , & params )"		961948	1					
ANR	962062	Callee	split_sin		961948	0					
ANR	962063	Identifier	split_sin		961948	0					
ANR	962064	ArgumentList	m_sinful . c_str ( )		961948	1					
ANR	962065	Argument	m_sinful . c_str ( )		961948	0					
ANR	962066	CallExpression	m_sinful . c_str ( )		961948	0					
ANR	962067	Callee	m_sinful . c_str		961948	0					
ANR	962068	MemberAccess	m_sinful . c_str		961948	0					
ANR	962069	Identifier	m_sinful		961948	0					
ANR	962070	Identifier	c_str		961948	1					
ANR	962071	ArgumentList			961948	1					
ANR	962072	Argument	& host		961948	1					
ANR	962073	UnaryOperationExpression	& host		961948	0					
ANR	962074	UnaryOperator	&		961948	0					
ANR	962075	Identifier	host		961948	1					
ANR	962076	Argument	& port		961948	2					
ANR	962077	UnaryOperationExpression	& port		961948	0					
ANR	962078	UnaryOperator	&		961948	0					
ANR	962079	Identifier	port		961948	1					
ANR	962080	Argument	& params		961948	3					
ANR	962081	UnaryOperationExpression	& params		961948	0					
ANR	962082	UnaryOperator	&		961948	0					
ANR	962083	Identifier	params		961948	1					
ANR	962084	IfStatement	if ( m_valid )		961948	5					
ANR	962085	Condition	m_valid	216:6:4930:4936	961948	0	True				
ANR	962086	Identifier	m_valid		961948	0					
ANR	962087	CompoundStatement		38:16:921:921	961948	1					
ANR	962088	IfStatement	if ( host )		961948	0					
ANR	962089	Condition	host	217:7:4949:4952	961948	0	True				
ANR	962090	Identifier	host		961948	0					
ANR	962091	CompoundStatement		39:14:937:937	961948	1					
ANR	962092	ExpressionStatement	m_host = host	218:4:4962:4975	961948	0	True				
ANR	962093	AssignmentExpression	m_host = host		961948	0		=			
ANR	962094	Identifier	m_host		961948	0					
ANR	962095	Identifier	host		961948	1					
ANR	962096	IfStatement	if ( port )		961948	1					
ANR	962097	Condition	port	220:7:4989:4992	961948	0	True				
ANR	962098	Identifier	port		961948	0					
ANR	962099	CompoundStatement		42:14:977:977	961948	1					
ANR	962100	ExpressionStatement	m_port = port	221:4:5002:5015	961948	0	True				
ANR	962101	AssignmentExpression	m_port = port		961948	0		=			
ANR	962102	Identifier	m_port		961948	0					
ANR	962103	Identifier	port		961948	1					
ANR	962104	IfStatement	if ( params )		961948	2					
ANR	962105	Condition	params	223:7:5029:5034	961948	0	True				
ANR	962106	Identifier	params		961948	0					
ANR	962107	CompoundStatement		45:16:1019:1019	961948	1					
ANR	962108	IfStatement	"if ( ! parseUrlEncodedParams ( params , m_params ) )"		961948	0					
ANR	962109	Condition	"! parseUrlEncodedParams ( params , m_params )"	224:8:5048:5086	961948	0	True				
ANR	962110	UnaryOperationExpression	"! parseUrlEncodedParams ( params , m_params )"		961948	0					
ANR	962111	UnaryOperator	!		961948	0					
ANR	962112	CallExpression	"parseUrlEncodedParams ( params , m_params )"		961948	1					
ANR	962113	Callee	parseUrlEncodedParams		961948	0					
ANR	962114	Identifier	parseUrlEncodedParams		961948	0					
ANR	962115	ArgumentList	params		961948	1					
ANR	962116	Argument	params		961948	0					
ANR	962117	Identifier	params		961948	0					
ANR	962118	Argument	m_params		961948	1					
ANR	962119	Identifier	m_params		961948	0					
ANR	962120	CompoundStatement		46:50:1071:1071	961948	1					
ANR	962121	ExpressionStatement	m_valid = false	225:5:5097:5112	961948	0	True				
ANR	962122	AssignmentExpression	m_valid = false		961948	0		=			
ANR	962123	Identifier	m_valid		961948	0					
ANR	962124	Identifier	false		961948	1					
ANR	962125	ExpressionStatement	free ( host )	229:2:5131:5143	961948	6	True				
ANR	962126	CallExpression	free ( host )		961948	0					
ANR	962127	Callee	free		961948	0					
ANR	962128	Identifier	free		961948	0					
ANR	962129	ArgumentList	host		961948	1					
ANR	962130	Argument	host		961948	0					
ANR	962131	Identifier	host		961948	0					
ANR	962132	ExpressionStatement	free ( port )	230:2:5147:5159	961948	7	True				
ANR	962133	CallExpression	free ( port )		961948	0					
ANR	962134	Callee	free		961948	0					
ANR	962135	Identifier	free		961948	0					
ANR	962136	ArgumentList	port		961948	1					
ANR	962137	Argument	port		961948	0					
ANR	962138	Identifier	port		961948	0					
ANR	962139	ExpressionStatement	free ( params )	231:2:5163:5177	961948	8	True				
ANR	962140	CallExpression	free ( params )		961948	0					
ANR	962141	Callee	free		961948	0					
ANR	962142	Identifier	free		961948	0					
ANR	962143	ArgumentList	params		961948	1					
ANR	962144	Argument	params		961948	0					
ANR	962145	Identifier	params		961948	0					
ANR	962146	Identifier	Sinful :: Sinful		961948	1					
ANR	962147	ParameterList	char const * sinful		961948	2					
ANR	962148	Parameter	char const * sinful	178:15:3998:4015	961948	0	True				
ANR	962149	ParameterType	char const *		961948	0					
ANR	962150	Identifier	sinful		961948	1					
ANR	962151	CFGEntryNode	ENTRY		961948		True				
ANR	962152	CFGExitNode	EXIT		961948		True				
ANR	962153	Symbol	NULL		961948						
ANR	962154	Symbol	m_params		961948						
ANR	962155	Symbol	first_colon		961948						
ANR	962156	Symbol	parseUrlEncodedParams		961948						
ANR	962157	Symbol	false		961948						
ANR	962158	Symbol	strchr		961948						
ANR	962159	Symbol	* sinful		961948						
ANR	962160	Symbol	params		961948						
ANR	962161	Symbol	split_sin		961948						
ANR	962162	Symbol	& host		961948						
ANR	962163	Symbol	m_sinful . c_str		961948						
ANR	962164	Symbol	m_host		961948						
ANR	962165	Symbol	& port		961948						
ANR	962166	Symbol	port		961948						
ANR	962167	Symbol	true		961948						
ANR	962168	Symbol	host		961948						
ANR	962169	Symbol	m_valid		961948						
ANR	962170	Symbol	m_port		961948						
ANR	962171	Symbol	sinful		961948						
ANR	962172	Symbol	m_sinful		961948						
ANR	962173	Symbol	& params		961948						
ANR	962174	Function	Sinful :: getParam	235:0:5185:5392							
ANR	962175	FunctionDef	Sinful :: getParam (char const * key)		962174	0					
ANR	962176	CompoundStatement		237:0:5238:5392	962174	0					
ANR	962177	IdentifierDeclStatement	"std :: map < std :: string , std :: string > :: const_iterator it = m_params . find ( key ) ;"	238:1:5241:5314	962174	0	True				
ANR	962178	IdentifierDecl	it = m_params . find ( key )		962174	0					
ANR	962179	IdentifierDeclType	"std :: map < std :: string , std :: string > :: const_iterator"		962174	0					
ANR	962180	Identifier	it		962174	1					
ANR	962181	AssignmentExpression	it = m_params . find ( key )		962174	2		=			
ANR	962182	Identifier	it		962174	0					
ANR	962183	CallExpression	m_params . find ( key )		962174	1					
ANR	962184	Callee	m_params . find		962174	0					
ANR	962185	MemberAccess	m_params . find		962174	0					
ANR	962186	Identifier	m_params		962174	0					
ANR	962187	Identifier	find		962174	1					
ANR	962188	ArgumentList	key		962174	1					
ANR	962189	Argument	key		962174	0					
ANR	962190	Identifier	key		962174	0					
ANR	962191	IfStatement	if ( it == m_params . end ( ) )		962174	1					
ANR	962192	Condition	it == m_params . end ( )	239:5:5321:5340	962174	0	True				
ANR	962193	EqualityExpression	it == m_params . end ( )		962174	0		==			
ANR	962194	Identifier	it		962174	0					
ANR	962195	CallExpression	m_params . end ( )		962174	1					
ANR	962196	Callee	m_params . end		962174	0					
ANR	962197	MemberAccess	m_params . end		962174	0					
ANR	962198	Identifier	m_params		962174	0					
ANR	962199	Identifier	end		962174	1					
ANR	962200	ArgumentList			962174	1					
ANR	962201	CompoundStatement		3:28:105:105	962174	1					
ANR	962202	ReturnStatement	return NULL ;	240:2:5348:5359	962174	0	True				
ANR	962203	Identifier	NULL		962174	0					
ANR	962204	ReturnStatement	return it -> second . c_str ( ) ;	242:1:5365:5390	962174	2	True				
ANR	962205	CallExpression	it -> second . c_str ( )		962174	0					
ANR	962206	Callee	it -> second . c_str		962174	0					
ANR	962207	MemberAccess	it -> second . c_str		962174	0					
ANR	962208	PtrMemberAccess	it -> second		962174	0					
ANR	962209	Identifier	it		962174	0					
ANR	962210	Identifier	second		962174	1					
ANR	962211	Identifier	c_str		962174	1					
ANR	962212	ArgumentList			962174	1					
ANR	962213	ReturnType	char const *		962174	1					
ANR	962214	Identifier	Sinful :: getParam		962174	2					
ANR	962215	ParameterList	char const * key		962174	3					
ANR	962216	Parameter	char const * key	236:17:5215:5229	962174	0	True				
ANR	962217	ParameterType	char const *		962174	0					
ANR	962218	Identifier	key		962174	1					
ANR	962219	CFGEntryNode	ENTRY		962174		True				
ANR	962220	CFGExitNode	EXIT		962174		True				
ANR	962221	Symbol	m_params . end		962174						
ANR	962222	Symbol	it -> second		962174						
ANR	962223	Symbol	* it		962174						
ANR	962224	Symbol	m_params		962174						
ANR	962225	Symbol	NULL		962174						
ANR	962226	Symbol	it -> second . c_str		962174						
ANR	962227	Symbol	m_params . find		962174						
ANR	962228	Symbol	it		962174						
ANR	962229	Symbol	key		962174						
ANR	962230	Function	Sinful :: setParam	245:0:5395:5553							
ANR	962231	FunctionDef	"Sinful :: setParam (char const * key , char const * value)"		962230	0					
ANR	962232	CompoundStatement		247:0:5452:5553	962230	0					
ANR	962233	IfStatement	if ( ! value )		962230	0					
ANR	962234	Condition	! value	248:5:5459:5464	962230	0	True				
ANR	962235	UnaryOperationExpression	! value		962230	0					
ANR	962236	UnaryOperator	!		962230	0					
ANR	962237	Identifier	value		962230	1					
ANR	962238	CompoundStatement		2:14:15:15	962230	1					
ANR	962239	ExpressionStatement	m_params . erase ( key )	249:2:5472:5491	962230	0	True				
ANR	962240	CallExpression	m_params . erase ( key )		962230	0					
ANR	962241	Callee	m_params . erase		962230	0					
ANR	962242	MemberAccess	m_params . erase		962230	0					
ANR	962243	Identifier	m_params		962230	0					
ANR	962244	Identifier	erase		962230	1					
ANR	962245	ArgumentList	key		962230	1					
ANR	962246	Argument	key		962230	0					
ANR	962247	Identifier	key		962230	0					
ANR	962248	ElseStatement	else		962230	0					
ANR	962249	CompoundStatement		5:6:49:49	962230	0					
ANR	962250	ExpressionStatement	m_params [ key ] = value	252:2:5506:5527	962230	0	True				
ANR	962251	AssignmentExpression	m_params [ key ] = value		962230	0		=			
ANR	962252	ArrayIndexing	m_params [ key ]		962230	0					
ANR	962253	Identifier	m_params		962230	0					
ANR	962254	Identifier	key		962230	1					
ANR	962255	Identifier	value		962230	1					
ANR	962256	ExpressionStatement	regenerateSinful ( )	254:1:5533:5551	962230	1	True				
ANR	962257	CallExpression	regenerateSinful ( )		962230	0					
ANR	962258	Callee	regenerateSinful		962230	0					
ANR	962259	Identifier	regenerateSinful		962230	0					
ANR	962260	ArgumentList			962230	1					
ANR	962261	ReturnType	void		962230	1					
ANR	962262	Identifier	Sinful :: setParam		962230	2					
ANR	962263	ParameterList	"char const * key , char const * value"		962230	3					
ANR	962264	Parameter	char const * key	246:17:5417:5431	962230	0	True				
ANR	962265	ParameterType	char const *		962230	0					
ANR	962266	Identifier	key		962230	1					
ANR	962267	Parameter	char const * value	246:33:5433:5449	962230	1	True				
ANR	962268	ParameterType	char const *		962230	0					
ANR	962269	Identifier	value		962230	1					
ANR	962270	CFGEntryNode	ENTRY		962230		True				
ANR	962271	CFGExitNode	EXIT		962230		True				
ANR	962272	Symbol	m_params		962230						
ANR	962273	Symbol	* key		962230						
ANR	962274	Symbol	* m_params		962230						
ANR	962275	Symbol	value		962230						
ANR	962276	Symbol	key		962230						
ANR	962277	Function	Sinful :: clearParams	257:0:5556:5625							
ANR	962278	FunctionDef	Sinful :: clearParams ()		962277	0					
ANR	962279	CompoundStatement		259:0:5583:5625	962277	0					
ANR	962280	ExpressionStatement	m_params . clear ( )	260:1:5586:5602	962277	0	True				
ANR	962281	CallExpression	m_params . clear ( )		962277	0					
ANR	962282	Callee	m_params . clear		962277	0					
ANR	962283	MemberAccess	m_params . clear		962277	0					
ANR	962284	Identifier	m_params		962277	0					
ANR	962285	Identifier	clear		962277	1					
ANR	962286	ArgumentList			962277	1					
ANR	962287	ExpressionStatement	regenerateSinful ( )	261:1:5605:5623	962277	1	True				
ANR	962288	CallExpression	regenerateSinful ( )		962277	0					
ANR	962289	Callee	regenerateSinful		962277	0					
ANR	962290	Identifier	regenerateSinful		962277	0					
ANR	962291	ArgumentList			962277	1					
ANR	962292	ReturnType	void		962277	1					
ANR	962293	Identifier	Sinful :: clearParams		962277	2					
ANR	962294	ParameterList			962277	3					
ANR	962295	CFGEntryNode	ENTRY		962277		True				
ANR	962296	CFGExitNode	EXIT		962277		True				
ANR	962297	Symbol	m_params		962277						
ANR	962298	Function	Sinful :: numParams	264:0:5628:5685							
ANR	962299	FunctionDef	Sinful :: numParams ()		962298	0					
ANR	962300	CompoundStatement		266:0:5658:5685	962298	0					
ANR	962301	ReturnStatement	return m_params . size ( ) ;	267:1:5661:5683	962298	0	True				
ANR	962302	CallExpression	m_params . size ( )		962298	0					
ANR	962303	Callee	m_params . size		962298	0					
ANR	962304	MemberAccess	m_params . size		962298	0					
ANR	962305	Identifier	m_params		962298	0					
ANR	962306	Identifier	size		962298	1					
ANR	962307	ArgumentList			962298	1					
ANR	962308	ReturnType	int		962298	1					
ANR	962309	Identifier	Sinful :: numParams		962298	2					
ANR	962310	ParameterList			962298	3					
ANR	962311	CFGEntryNode	ENTRY		962298		True				
ANR	962312	CFGExitNode	EXIT		962298		True				
ANR	962313	Symbol	m_params		962298						
ANR	962314	Symbol	m_params . size		962298						
ANR	962315	Function	Sinful :: setCCBContact	270:0:5688:5769							
ANR	962316	FunctionDef	Sinful :: setCCBContact (char const * contact)		962315	0					
ANR	962317	CompoundStatement		272:0:5736:5769	962315	0					
ANR	962318	ExpressionStatement	"setParam ( ATTR_CCBID , contact )"	273:1:5739:5767	962315	0	True				
ANR	962319	CallExpression	"setParam ( ATTR_CCBID , contact )"		962315	0					
ANR	962320	Callee	setParam		962315	0					
ANR	962321	Identifier	setParam		962315	0					
ANR	962322	ArgumentList	ATTR_CCBID		962315	1					
ANR	962323	Argument	ATTR_CCBID		962315	0					
ANR	962324	Identifier	ATTR_CCBID		962315	0					
ANR	962325	Argument	contact		962315	1					
ANR	962326	Identifier	contact		962315	0					
ANR	962327	ReturnType	void		962315	1					
ANR	962328	Identifier	Sinful :: setCCBContact		962315	2					
ANR	962329	ParameterList	char const * contact		962315	3					
ANR	962330	Parameter	char const * contact	271:22:5715:5733	962315	0	True				
ANR	962331	ParameterType	char const *		962315	0					
ANR	962332	Identifier	contact		962315	1					
ANR	962333	CFGEntryNode	ENTRY		962315		True				
ANR	962334	CFGExitNode	EXIT		962315		True				
ANR	962335	Symbol	contact		962315						
ANR	962336	Symbol	ATTR_CCBID		962315						
ANR	962337	Function	Sinful :: getCCBContact	276:0:5772:5847							
ANR	962338	FunctionDef	Sinful :: getCCBContact ()		962337	0					
ANR	962339	CompoundStatement		278:0:5815:5847	962337	0					
ANR	962340	ReturnStatement	return getParam ( ATTR_CCBID ) ;	279:1:5818:5845	962337	0	True				
ANR	962341	CallExpression	getParam ( ATTR_CCBID )		962337	0					
ANR	962342	Callee	getParam		962337	0					
ANR	962343	Identifier	getParam		962337	0					
ANR	962344	ArgumentList	ATTR_CCBID		962337	1					
ANR	962345	Argument	ATTR_CCBID		962337	0					
ANR	962346	Identifier	ATTR_CCBID		962337	0					
ANR	962347	ReturnType	char const *		962337	1					
ANR	962348	Identifier	Sinful :: getCCBContact		962337	2					
ANR	962349	ParameterList			962337	3					
ANR	962350	CFGEntryNode	ENTRY		962337		True				
ANR	962351	CFGExitNode	EXIT		962337		True				
ANR	962352	Symbol	getParam		962337						
ANR	962353	Symbol	ATTR_CCBID		962337						
ANR	962354	Function	Sinful :: setSharedPortID	282:0:5850:5932							
ANR	962355	FunctionDef	Sinful :: setSharedPortID (char const * contact)		962354	0					
ANR	962356	CompoundStatement		284:0:5900:5932	962354	0					
ANR	962357	ExpressionStatement	"setParam ( ATTR_SOCK , contact )"	285:1:5903:5930	962354	0	True				
ANR	962358	CallExpression	"setParam ( ATTR_SOCK , contact )"		962354	0					
ANR	962359	Callee	setParam		962354	0					
ANR	962360	Identifier	setParam		962354	0					
ANR	962361	ArgumentList	ATTR_SOCK		962354	1					
ANR	962362	Argument	ATTR_SOCK		962354	0					
ANR	962363	Identifier	ATTR_SOCK		962354	0					
ANR	962364	Argument	contact		962354	1					
ANR	962365	Identifier	contact		962354	0					
ANR	962366	ReturnType	void		962354	1					
ANR	962367	Identifier	Sinful :: setSharedPortID		962354	2					
ANR	962368	ParameterList	char const * contact		962354	3					
ANR	962369	Parameter	char const * contact	283:24:5879:5897	962354	0	True				
ANR	962370	ParameterType	char const *		962354	0					
ANR	962371	Identifier	contact		962354	1					
ANR	962372	CFGEntryNode	ENTRY		962354		True				
ANR	962373	CFGExitNode	EXIT		962354		True				
ANR	962374	Symbol	contact		962354						
ANR	962375	Symbol	ATTR_SOCK		962354						
ANR	962376	Function	Sinful :: getSharedPortID	288:0:5935:6011							
ANR	962377	FunctionDef	Sinful :: getSharedPortID ()		962376	0					
ANR	962378	CompoundStatement		290:0:5980:6011	962376	0					
ANR	962379	ReturnStatement	return getParam ( ATTR_SOCK ) ;	291:1:5983:6009	962376	0	True				
ANR	962380	CallExpression	getParam ( ATTR_SOCK )		962376	0					
ANR	962381	Callee	getParam		962376	0					
ANR	962382	Identifier	getParam		962376	0					
ANR	962383	ArgumentList	ATTR_SOCK		962376	1					
ANR	962384	Argument	ATTR_SOCK		962376	0					
ANR	962385	Identifier	ATTR_SOCK		962376	0					
ANR	962386	ReturnType	char const *		962376	1					
ANR	962387	Identifier	Sinful :: getSharedPortID		962376	2					
ANR	962388	ParameterList			962376	3					
ANR	962389	CFGEntryNode	ENTRY		962376		True				
ANR	962390	CFGExitNode	EXIT		962376		True				
ANR	962391	Symbol	getParam		962376						
ANR	962392	Symbol	ATTR_SOCK		962376						
ANR	962393	Function	Sinful :: setPrivateAddr	294:0:6014:6090							
ANR	962394	FunctionDef	Sinful :: setPrivateAddr (char const * addr)		962393	0					
ANR	962395	CompoundStatement		296:0:6060:6090	962393	0					
ANR	962396	ExpressionStatement	"setParam ( ""PrivAddr"" , addr )"	297:1:6063:6088	962393	0	True				
ANR	962397	CallExpression	"setParam ( ""PrivAddr"" , addr )"		962393	0					
ANR	962398	Callee	setParam		962393	0					
ANR	962399	Identifier	setParam		962393	0					
ANR	962400	ArgumentList	"""PrivAddr"""		962393	1					
ANR	962401	Argument	"""PrivAddr"""		962393	0					
ANR	962402	PrimaryExpression	"""PrivAddr"""		962393	0					
ANR	962403	Argument	addr		962393	1					
ANR	962404	Identifier	addr		962393	0					
ANR	962405	ReturnType	void		962393	1					
ANR	962406	Identifier	Sinful :: setPrivateAddr		962393	2					
ANR	962407	ParameterList	char const * addr		962393	3					
ANR	962408	Parameter	char const * addr	295:23:6042:6057	962393	0	True				
ANR	962409	ParameterType	char const *		962393	0					
ANR	962410	Identifier	addr		962393	1					
ANR	962411	CFGEntryNode	ENTRY		962393		True				
ANR	962412	CFGExitNode	EXIT		962393		True				
ANR	962413	Symbol	addr		962393						
ANR	962414	Function	Sinful :: getPrivateAddr	300:0:6093:6169							
ANR	962415	FunctionDef	Sinful :: getPrivateAddr ()		962414	0					
ANR	962416	CompoundStatement		302:0:6137:6169	962414	0					
ANR	962417	ReturnStatement	"return getParam ( ""PrivAddr"" ) ;"	303:1:6140:6167	962414	0	True				
ANR	962418	CallExpression	"getParam ( ""PrivAddr"" )"		962414	0					
ANR	962419	Callee	getParam		962414	0					
ANR	962420	Identifier	getParam		962414	0					
ANR	962421	ArgumentList	"""PrivAddr"""		962414	1					
ANR	962422	Argument	"""PrivAddr"""		962414	0					
ANR	962423	PrimaryExpression	"""PrivAddr"""		962414	0					
ANR	962424	ReturnType	char const *		962414	1					
ANR	962425	Identifier	Sinful :: getPrivateAddr		962414	2					
ANR	962426	ParameterList			962414	3					
ANR	962427	CFGEntryNode	ENTRY		962414		True				
ANR	962428	CFGExitNode	EXIT		962414		True				
ANR	962429	Symbol	getParam		962414						
ANR	962430	Function	Sinful :: setPrivateNetworkName	306:0:6172:6254							
ANR	962431	FunctionDef	Sinful :: setPrivateNetworkName (char const * addr)		962430	0					
ANR	962432	CompoundStatement		308:0:6225:6254	962430	0					
ANR	962433	ExpressionStatement	"setParam ( ""PrivNet"" , addr )"	309:1:6228:6252	962430	0	True				
ANR	962434	CallExpression	"setParam ( ""PrivNet"" , addr )"		962430	0					
ANR	962435	Callee	setParam		962430	0					
ANR	962436	Identifier	setParam		962430	0					
ANR	962437	ArgumentList	"""PrivNet"""		962430	1					
ANR	962438	Argument	"""PrivNet"""		962430	0					
ANR	962439	PrimaryExpression	"""PrivNet"""		962430	0					
ANR	962440	Argument	addr		962430	1					
ANR	962441	Identifier	addr		962430	0					
ANR	962442	ReturnType	void		962430	1					
ANR	962443	Identifier	Sinful :: setPrivateNetworkName		962430	2					
ANR	962444	ParameterList	char const * addr		962430	3					
ANR	962445	Parameter	char const * addr	307:30:6207:6222	962430	0	True				
ANR	962446	ParameterType	char const *		962430	0					
ANR	962447	Identifier	addr		962430	1					
ANR	962448	CFGEntryNode	ENTRY		962430		True				
ANR	962449	CFGExitNode	EXIT		962430		True				
ANR	962450	Symbol	addr		962430						
ANR	962451	Function	Sinful :: getPrivateNetworkName	312:0:6257:6339							
ANR	962452	FunctionDef	Sinful :: getPrivateNetworkName ()		962451	0					
ANR	962453	CompoundStatement		314:0:6308:6339	962451	0					
ANR	962454	ReturnStatement	"return getParam ( ""PrivNet"" ) ;"	315:1:6311:6337	962451	0	True				
ANR	962455	CallExpression	"getParam ( ""PrivNet"" )"		962451	0					
ANR	962456	Callee	getParam		962451	0					
ANR	962457	Identifier	getParam		962451	0					
ANR	962458	ArgumentList	"""PrivNet"""		962451	1					
ANR	962459	Argument	"""PrivNet"""		962451	0					
ANR	962460	PrimaryExpression	"""PrivNet"""		962451	0					
ANR	962461	ReturnType	char const *		962451	1					
ANR	962462	Identifier	Sinful :: getPrivateNetworkName		962451	2					
ANR	962463	ParameterList			962451	3					
ANR	962464	CFGEntryNode	ENTRY		962451		True				
ANR	962465	CFGExitNode	EXIT		962451		True				
ANR	962466	Symbol	getParam		962451						
ANR	962467	Function	Sinful :: setNoUDP	318:0:6342:6456							
ANR	962468	FunctionDef	Sinful :: setNoUDP (bool flag)		962467	0					
ANR	962469	CompoundStatement		320:0:6375:6456	962467	0					
ANR	962470	IfStatement	if ( ! flag )		962467	0					
ANR	962471	Condition	! flag	321:5:6382:6386	962467	0	True				
ANR	962472	UnaryOperationExpression	! flag		962467	0					
ANR	962473	UnaryOperator	!		962467	0					
ANR	962474	Identifier	flag		962467	1					
ANR	962475	CompoundStatement		2:13:14:14	962467	1					
ANR	962476	ExpressionStatement	"setParam ( ""noUDP"" , NULL )"	322:2:6394:6416	962467	0	True				
ANR	962477	CallExpression	"setParam ( ""noUDP"" , NULL )"		962467	0					
ANR	962478	Callee	setParam		962467	0					
ANR	962479	Identifier	setParam		962467	0					
ANR	962480	ArgumentList	"""noUDP"""		962467	1					
ANR	962481	Argument	"""noUDP"""		962467	0					
ANR	962482	PrimaryExpression	"""noUDP"""		962467	0					
ANR	962483	Argument	NULL		962467	1					
ANR	962484	Identifier	NULL		962467	0					
ANR	962485	ElseStatement	else		962467	0					
ANR	962486	CompoundStatement		5:6:51:51	962467	0					
ANR	962487	ExpressionStatement	"setParam ( ""noUDP"" , """" )"	325:2:6431:6451	962467	0	True				
ANR	962488	CallExpression	"setParam ( ""noUDP"" , """" )"		962467	0					
ANR	962489	Callee	setParam		962467	0					
ANR	962490	Identifier	setParam		962467	0					
ANR	962491	ArgumentList	"""noUDP"""		962467	1					
ANR	962492	Argument	"""noUDP"""		962467	0					
ANR	962493	PrimaryExpression	"""noUDP"""		962467	0					
ANR	962494	Argument	""""""		962467	1					
ANR	962495	PrimaryExpression	""""""		962467	0					
ANR	962496	ReturnType	void		962467	1					
ANR	962497	Identifier	Sinful :: setNoUDP		962467	2					
ANR	962498	ParameterList	bool flag		962467	3					
ANR	962499	Parameter	bool flag	319:17:6364:6372	962467	0	True				
ANR	962500	ParameterType	bool		962467	0					
ANR	962501	Identifier	flag		962467	1					
ANR	962502	CFGEntryNode	ENTRY		962467		True				
ANR	962503	CFGExitNode	EXIT		962467		True				
ANR	962504	Symbol	flag		962467						
ANR	962505	Symbol	NULL		962467						
ANR	962506	Function	Sinful :: noUDP	329:0:6459:6523							
ANR	962507	FunctionDef	Sinful :: noUDP ()		962506	0					
ANR	962508	CompoundStatement		331:0:6486:6523	962506	0					
ANR	962509	ReturnStatement	"return getParam ( ""noUDP"" ) != NULL ;"	332:1:6489:6521	962506	0	True				
ANR	962510	EqualityExpression	"getParam ( ""noUDP"" ) != NULL"		962506	0		!=			
ANR	962511	CallExpression	"getParam ( ""noUDP"" )"		962506	0					
ANR	962512	Callee	getParam		962506	0					
ANR	962513	Identifier	getParam		962506	0					
ANR	962514	ArgumentList	"""noUDP"""		962506	1					
ANR	962515	Argument	"""noUDP"""		962506	0					
ANR	962516	PrimaryExpression	"""noUDP"""		962506	0					
ANR	962517	Identifier	NULL		962506	1					
ANR	962518	ReturnType	bool		962506	1					
ANR	962519	Identifier	Sinful :: noUDP		962506	2					
ANR	962520	ParameterList			962506	3					
ANR	962521	CFGEntryNode	ENTRY		962506		True				
ANR	962522	CFGExitNode	EXIT		962506		True				
ANR	962523	Symbol	getParam		962506						
ANR	962524	Symbol	NULL		962506						
ANR	962525	Function	Sinful :: setHost	335:0:6526:6619							
ANR	962526	FunctionDef	Sinful :: setHost (char const * host)		962525	0					
ANR	962527	CompoundStatement		337:0:6565:6619	962525	0					
ANR	962528	ExpressionStatement	ASSERT ( host )	338:1:6568:6580	962525	0	True				
ANR	962529	CallExpression	ASSERT ( host )		962525	0					
ANR	962530	Callee	ASSERT		962525	0					
ANR	962531	Identifier	ASSERT		962525	0					
ANR	962532	ArgumentList	host		962525	1					
ANR	962533	Argument	host		962525	0					
ANR	962534	Identifier	host		962525	0					
ANR	962535	ExpressionStatement	m_host = host	339:1:6583:6596	962525	1	True				
ANR	962536	AssignmentExpression	m_host = host		962525	0		=			
ANR	962537	Identifier	m_host		962525	0					
ANR	962538	Identifier	host		962525	1					
ANR	962539	ExpressionStatement	regenerateSinful ( )	340:1:6599:6617	962525	2	True				
ANR	962540	CallExpression	regenerateSinful ( )		962525	0					
ANR	962541	Callee	regenerateSinful		962525	0					
ANR	962542	Identifier	regenerateSinful		962525	0					
ANR	962543	ArgumentList			962525	1					
ANR	962544	ReturnType	void		962525	1					
ANR	962545	Identifier	Sinful :: setHost		962525	2					
ANR	962546	ParameterList	char const * host		962525	3					
ANR	962547	Parameter	char const * host	336:16:6547:6562	962525	0	True				
ANR	962548	ParameterType	char const *		962525	0					
ANR	962549	Identifier	host		962525	1					
ANR	962550	CFGEntryNode	ENTRY		962525		True				
ANR	962551	CFGExitNode	EXIT		962525		True				
ANR	962552	Symbol	m_host		962525						
ANR	962553	Symbol	host		962525						
ANR	962554	Function	Sinful :: setPort	342:0:6621:6714							
ANR	962555	FunctionDef	Sinful :: setPort (char const * port)		962554	0					
ANR	962556	CompoundStatement		344:0:6660:6714	962554	0					
ANR	962557	ExpressionStatement	ASSERT ( port )	345:1:6663:6675	962554	0	True				
ANR	962558	CallExpression	ASSERT ( port )		962554	0					
ANR	962559	Callee	ASSERT		962554	0					
ANR	962560	Identifier	ASSERT		962554	0					
ANR	962561	ArgumentList	port		962554	1					
ANR	962562	Argument	port		962554	0					
ANR	962563	Identifier	port		962554	0					
ANR	962564	ExpressionStatement	m_port = port	346:1:6678:6691	962554	1	True				
ANR	962565	AssignmentExpression	m_port = port		962554	0		=			
ANR	962566	Identifier	m_port		962554	0					
ANR	962567	Identifier	port		962554	1					
ANR	962568	ExpressionStatement	regenerateSinful ( )	347:1:6694:6712	962554	2	True				
ANR	962569	CallExpression	regenerateSinful ( )		962554	0					
ANR	962570	Callee	regenerateSinful		962554	0					
ANR	962571	Identifier	regenerateSinful		962554	0					
ANR	962572	ArgumentList			962554	1					
ANR	962573	ReturnType	void		962554	1					
ANR	962574	Identifier	Sinful :: setPort		962554	2					
ANR	962575	ParameterList	char const * port		962554	3					
ANR	962576	Parameter	char const * port	343:16:6642:6657	962554	0	True				
ANR	962577	ParameterType	char const *		962554	0					
ANR	962578	Identifier	port		962554	1					
ANR	962579	CFGEntryNode	ENTRY		962554		True				
ANR	962580	CFGExitNode	EXIT		962554		True				
ANR	962581	Symbol	port		962554						
ANR	962582	Symbol	m_port		962554						
ANR	962583	Function	Sinful :: setPort	349:0:6716:6830							
ANR	962584	FunctionDef	Sinful :: setPort (int port)		962583	0					
ANR	962585	CompoundStatement		351:0:6747:6830	962583	0					
ANR	962586	IdentifierDeclStatement	std :: ostringstream tmp ;	352:1:6750:6772	962583	0	True				
ANR	962587	IdentifierDecl	tmp		962583	0					
ANR	962588	IdentifierDeclType	std :: ostringstream		962583	0					
ANR	962589	Identifier	tmp		962583	1					
ANR	962590	ExpressionStatement	tmp << port	353:1:6775:6786	962583	1	True				
ANR	962591	ShiftExpression	tmp << port		962583	0		<<			
ANR	962592	Identifier	tmp		962583	0					
ANR	962593	Identifier	port		962583	1					
ANR	962594	ExpressionStatement	m_port = tmp . str ( )	354:1:6789:6807	962583	2	True				
ANR	962595	AssignmentExpression	m_port = tmp . str ( )		962583	0		=			
ANR	962596	Identifier	m_port		962583	0					
ANR	962597	CallExpression	tmp . str ( )		962583	1					
ANR	962598	Callee	tmp . str		962583	0					
ANR	962599	MemberAccess	tmp . str		962583	0					
ANR	962600	Identifier	tmp		962583	0					
ANR	962601	Identifier	str		962583	1					
ANR	962602	ArgumentList			962583	1					
ANR	962603	ExpressionStatement	regenerateSinful ( )	355:1:6810:6828	962583	3	True				
ANR	962604	CallExpression	regenerateSinful ( )		962583	0					
ANR	962605	Callee	regenerateSinful		962583	0					
ANR	962606	Identifier	regenerateSinful		962583	0					
ANR	962607	ArgumentList			962583	1					
ANR	962608	ReturnType	void		962583	1					
ANR	962609	Identifier	Sinful :: setPort		962583	2					
ANR	962610	ParameterList	int port		962583	3					
ANR	962611	Parameter	int port	350:16:6737:6744	962583	0	True				
ANR	962612	ParameterType	int		962583	0					
ANR	962613	Identifier	port		962583	1					
ANR	962614	CFGEntryNode	ENTRY		962583		True				
ANR	962615	CFGExitNode	EXIT		962583		True				
ANR	962616	Symbol	port		962583						
ANR	962617	Symbol	tmp		962583						
ANR	962618	Symbol	tmp . str		962583						
ANR	962619	Symbol	m_port		962583						
ANR	962620	Function	Sinful :: regenerateSinful	358:0:6833:7233							
ANR	962621	FunctionDef	Sinful :: regenerateSinful ()		962620	0					
ANR	962622	CompoundStatement		360:0:6865:7233	962620	0					
ANR	962623	ExpressionStatement	"m_sinful = ""<"""	363:1:6903:6917	962620	0	True				
ANR	962624	AssignmentExpression	"m_sinful = ""<"""		962620	0		=			
ANR	962625	Identifier	m_sinful		962620	0					
ANR	962626	PrimaryExpression	"""<"""		962620	1					
ANR	962627	IfStatement	if ( m_host . find ( ':' ) != std :: string :: npos )		962620	1					
ANR	962628	Condition	m_host . find ( ':' ) != std :: string :: npos	364:5:6924:6960	962620	0	True				
ANR	962629	EqualityExpression	m_host . find ( ':' ) != std :: string :: npos		962620	0		!=			
ANR	962630	CallExpression	m_host . find ( ':' )		962620	0					
ANR	962631	Callee	m_host . find		962620	0					
ANR	962632	MemberAccess	m_host . find		962620	0					
ANR	962633	Identifier	m_host		962620	0					
ANR	962634	Identifier	find		962620	1					
ANR	962635	ArgumentList	':'		962620	1					
ANR	962636	Argument	':'		962620	0					
ANR	962637	PrimaryExpression	':'		962620	0					
ANR	962638	Identifier	std :: string :: npos		962620	1					
ANR	962639	CompoundStatement		5:44:97:97	962620	1					
ANR	962640	ExpressionStatement	"m_sinful += ""["""	365:2:6967:6982	962620	0	True				
ANR	962641	AssignmentExpression	"m_sinful += ""["""		962620	0		+=			
ANR	962642	Identifier	m_sinful		962620	0					
ANR	962643	PrimaryExpression	"""["""		962620	1					
ANR	962644	ExpressionStatement	m_sinful += m_host	366:2:6986:7004	962620	1	True				
ANR	962645	AssignmentExpression	m_sinful += m_host		962620	0		+=			
ANR	962646	Identifier	m_sinful		962620	0					
ANR	962647	Identifier	m_host		962620	1					
ANR	962648	ExpressionStatement	"m_sinful += ""]"""	367:2:7008:7023	962620	2	True				
ANR	962649	AssignmentExpression	"m_sinful += ""]"""		962620	0		+=			
ANR	962650	Identifier	m_sinful		962620	0					
ANR	962651	PrimaryExpression	"""]"""		962620	1					
ANR	962652	ElseStatement	else		962620	0					
ANR	962653	ExpressionStatement	m_sinful += m_host	369:2:7035:7053	962620	0	True				
ANR	962654	AssignmentExpression	m_sinful += m_host		962620	0		+=			
ANR	962655	Identifier	m_sinful		962620	0					
ANR	962656	Identifier	m_host		962620	1					
ANR	962657	IfStatement	if ( ! m_port . empty ( ) )		962620	2					
ANR	962658	Condition	! m_port . empty ( )	371:5:7061:7075	962620	0	True				
ANR	962659	UnaryOperationExpression	! m_port . empty ( )		962620	0					
ANR	962660	UnaryOperator	!		962620	0					
ANR	962661	CallExpression	m_port . empty ( )		962620	1					
ANR	962662	Callee	m_port . empty		962620	0					
ANR	962663	MemberAccess	m_port . empty		962620	0					
ANR	962664	Identifier	m_port		962620	0					
ANR	962665	Identifier	empty		962620	1					
ANR	962666	ArgumentList			962620	1					
ANR	962667	CompoundStatement		12:23:213:213	962620	1					
ANR	962668	ExpressionStatement	"m_sinful += "":"""	372:2:7083:7098	962620	0	True				
ANR	962669	AssignmentExpression	"m_sinful += "":"""		962620	0		+=			
ANR	962670	Identifier	m_sinful		962620	0					
ANR	962671	PrimaryExpression	""":"""		962620	1					
ANR	962672	ExpressionStatement	m_sinful += m_port	373:2:7102:7120	962620	1	True				
ANR	962673	AssignmentExpression	m_sinful += m_port		962620	0		+=			
ANR	962674	Identifier	m_sinful		962620	0					
ANR	962675	Identifier	m_port		962620	1					
ANR	962676	IfStatement	if ( ! m_params . empty ( ) )		962620	3					
ANR	962677	Condition	! m_params . empty ( )	375:5:7130:7146	962620	0	True				
ANR	962678	UnaryOperationExpression	! m_params . empty ( )		962620	0					
ANR	962679	UnaryOperator	!		962620	0					
ANR	962680	CallExpression	m_params . empty ( )		962620	1					
ANR	962681	Callee	m_params . empty		962620	0					
ANR	962682	MemberAccess	m_params . empty		962620	0					
ANR	962683	Identifier	m_params		962620	0					
ANR	962684	Identifier	empty		962620	1					
ANR	962685	ArgumentList			962620	1					
ANR	962686	CompoundStatement		16:25:284:284	962620	1					
ANR	962687	ExpressionStatement	"m_sinful += ""?"""	376:2:7154:7169	962620	0	True				
ANR	962688	AssignmentExpression	"m_sinful += ""?"""		962620	0		+=			
ANR	962689	Identifier	m_sinful		962620	0					
ANR	962690	PrimaryExpression	"""?"""		962620	1					
ANR	962691	ExpressionStatement	m_sinful += urlEncodeParams ( m_params )	377:2:7173:7210	962620	1	True				
ANR	962692	AssignmentExpression	m_sinful += urlEncodeParams ( m_params )		962620	0		+=			
ANR	962693	Identifier	m_sinful		962620	0					
ANR	962694	CallExpression	urlEncodeParams ( m_params )		962620	1					
ANR	962695	Callee	urlEncodeParams		962620	0					
ANR	962696	Identifier	urlEncodeParams		962620	0					
ANR	962697	ArgumentList	m_params		962620	1					
ANR	962698	Argument	m_params		962620	0					
ANR	962699	Identifier	m_params		962620	0					
ANR	962700	ExpressionStatement	"m_sinful += "">"""	379:1:7216:7231	962620	4	True				
ANR	962701	AssignmentExpression	"m_sinful += "">"""		962620	0		+=			
ANR	962702	Identifier	m_sinful		962620	0					
ANR	962703	PrimaryExpression	""">"""		962620	1					
ANR	962704	ReturnType	void		962620	1					
ANR	962705	Identifier	Sinful :: regenerateSinful		962620	2					
ANR	962706	ParameterList			962620	3					
ANR	962707	CFGEntryNode	ENTRY		962620		True				
ANR	962708	CFGExitNode	EXIT		962620		True				
ANR	962709	Symbol	m_host		962620						
ANR	962710	Symbol	std :: string :: npos		962620						
ANR	962711	Symbol	m_params		962620						
ANR	962712	Symbol	m_port . empty		962620						
ANR	962713	Symbol	m_host . find		962620						
ANR	962714	Symbol	m_port		962620						
ANR	962715	Symbol	urlEncodeParams		962620						
ANR	962716	Symbol	m_params . empty		962620						
ANR	962717	Symbol	m_sinful		962620						
ANR	962718	Function	Sinful :: addressPointsToMe	382:0:7236:7790							
ANR	962719	FunctionDef	Sinful :: addressPointsToMe (Sinful const & addr)		962718	0					
ANR	962720	CompoundStatement		384:0:7295:7790	962718	0					
ANR	962721	IfStatement	"if ( getHost ( ) && addr . getHost ( ) && ! strcmp ( getHost ( ) , addr . getHost ( ) ) && getPort ( ) && addr . getPort ( ) && ! strcmp ( getPort ( ) , addr . getPort ( ) ) )"		962718	0					
ANR	962722	Condition	"getHost ( ) && addr . getHost ( ) && ! strcmp ( getHost ( ) , addr . getHost ( ) ) && getPort ( ) && addr . getPort ( ) && ! strcmp ( getPort ( ) , addr . getPort ( ) )"	385:5:7302:7435	962718	0	True				
ANR	962723	AndExpression	"getHost ( ) && addr . getHost ( ) && ! strcmp ( getHost ( ) , addr . getHost ( ) ) && getPort ( ) && addr . getPort ( ) && ! strcmp ( getPort ( ) , addr . getPort ( ) )"		962718	0		&&			
ANR	962724	CallExpression	getHost ( )		962718	0					
ANR	962725	Callee	getHost		962718	0					
ANR	962726	Identifier	getHost		962718	0					
ANR	962727	ArgumentList			962718	1					
ANR	962728	AndExpression	"addr . getHost ( ) && ! strcmp ( getHost ( ) , addr . getHost ( ) ) && getPort ( ) && addr . getPort ( ) && ! strcmp ( getPort ( ) , addr . getPort ( ) )"		962718	1		&&			
ANR	962729	CallExpression	addr . getHost ( )		962718	0					
ANR	962730	Callee	addr . getHost		962718	0					
ANR	962731	MemberAccess	addr . getHost		962718	0					
ANR	962732	Identifier	addr		962718	0					
ANR	962733	Identifier	getHost		962718	1					
ANR	962734	ArgumentList			962718	1					
ANR	962735	AndExpression	"! strcmp ( getHost ( ) , addr . getHost ( ) ) && getPort ( ) && addr . getPort ( ) && ! strcmp ( getPort ( ) , addr . getPort ( ) )"		962718	1		&&			
ANR	962736	UnaryOperationExpression	"! strcmp ( getHost ( ) , addr . getHost ( ) )"		962718	0					
ANR	962737	UnaryOperator	!		962718	0					
ANR	962738	CallExpression	"strcmp ( getHost ( ) , addr . getHost ( ) )"		962718	1					
ANR	962739	Callee	strcmp		962718	0					
ANR	962740	Identifier	strcmp		962718	0					
ANR	962741	ArgumentList	getHost ( )		962718	1					
ANR	962742	Argument	getHost ( )		962718	0					
ANR	962743	CallExpression	getHost ( )		962718	0					
ANR	962744	Callee	getHost		962718	0					
ANR	962745	Identifier	getHost		962718	0					
ANR	962746	ArgumentList			962718	1					
ANR	962747	Argument	addr . getHost ( )		962718	1					
ANR	962748	CallExpression	addr . getHost ( )		962718	0					
ANR	962749	Callee	addr . getHost		962718	0					
ANR	962750	MemberAccess	addr . getHost		962718	0					
ANR	962751	Identifier	addr		962718	0					
ANR	962752	Identifier	getHost		962718	1					
ANR	962753	ArgumentList			962718	1					
ANR	962754	AndExpression	"getPort ( ) && addr . getPort ( ) && ! strcmp ( getPort ( ) , addr . getPort ( ) )"		962718	1		&&			
ANR	962755	CallExpression	getPort ( )		962718	0					
ANR	962756	Callee	getPort		962718	0					
ANR	962757	Identifier	getPort		962718	0					
ANR	962758	ArgumentList			962718	1					
ANR	962759	AndExpression	"addr . getPort ( ) && ! strcmp ( getPort ( ) , addr . getPort ( ) )"		962718	1		&&			
ANR	962760	CallExpression	addr . getPort ( )		962718	0					
ANR	962761	Callee	addr . getPort		962718	0					
ANR	962762	MemberAccess	addr . getPort		962718	0					
ANR	962763	Identifier	addr		962718	0					
ANR	962764	Identifier	getPort		962718	1					
ANR	962765	ArgumentList			962718	1					
ANR	962766	UnaryOperationExpression	"! strcmp ( getPort ( ) , addr . getPort ( ) )"		962718	1					
ANR	962767	UnaryOperator	!		962718	0					
ANR	962768	CallExpression	"strcmp ( getPort ( ) , addr . getPort ( ) )"		962718	1					
ANR	962769	Callee	strcmp		962718	0					
ANR	962770	Identifier	strcmp		962718	0					
ANR	962771	ArgumentList	getPort ( )		962718	1					
ANR	962772	Argument	getPort ( )		962718	0					
ANR	962773	CallExpression	getPort ( )		962718	0					
ANR	962774	Callee	getPort		962718	0					
ANR	962775	Identifier	getPort		962718	0					
ANR	962776	ArgumentList			962718	1					
ANR	962777	Argument	addr . getPort ( )		962718	1					
ANR	962778	CallExpression	addr . getPort ( )		962718	0					
ANR	962779	Callee	addr . getPort		962718	0					
ANR	962780	MemberAccess	addr . getPort		962718	0					
ANR	962781	Identifier	addr		962718	0					
ANR	962782	Identifier	getPort		962718	1					
ANR	962783	ArgumentList			962718	1					
ANR	962784	CompoundStatement		6:2:188:234	962718	1					
ANR	962785	IdentifierDeclStatement	char const * spid = getSharedPortID ( ) ;	388:2:7444:7480	962718	0	True				
ANR	962786	IdentifierDecl	* spid = getSharedPortID ( )		962718	0					
ANR	962787	IdentifierDeclType	char const *		962718	0					
ANR	962788	Identifier	spid		962718	1					
ANR	962789	AssignmentExpression	* spid = getSharedPortID ( )		962718	2		=			
ANR	962790	Identifier	spid		962718	0					
ANR	962791	CallExpression	getSharedPortID ( )		962718	1					
ANR	962792	Callee	getSharedPortID		962718	0					
ANR	962793	Identifier	getSharedPortID		962718	0					
ANR	962794	ArgumentList			962718	1					
ANR	962795	IdentifierDeclStatement	char const * addr_spid = addr . getSharedPortID ( ) ;	389:2:7484:7530	962718	1	True				
ANR	962796	IdentifierDecl	* addr_spid = addr . getSharedPortID ( )		962718	0					
ANR	962797	IdentifierDeclType	char const *		962718	0					
ANR	962798	Identifier	addr_spid		962718	1					
ANR	962799	AssignmentExpression	* addr_spid = addr . getSharedPortID ( )		962718	2		=			
ANR	962800	Identifier	addr_spid		962718	0					
ANR	962801	CallExpression	addr . getSharedPortID ( )		962718	1					
ANR	962802	Callee	addr . getSharedPortID		962718	0					
ANR	962803	MemberAccess	addr . getSharedPortID		962718	0					
ANR	962804	Identifier	addr		962718	0					
ANR	962805	Identifier	getSharedPortID		962718	1					
ANR	962806	ArgumentList			962718	1					
ANR	962807	IfStatement	"if ( ( spid == NULL && addr_spid == NULL ) || ( spid && addr_spid && ! strcmp ( spid , addr_spid ) ) )"		962718	2					
ANR	962808	Condition	"( spid == NULL && addr_spid == NULL ) || ( spid && addr_spid && ! strcmp ( spid , addr_spid ) )"	390:6:7538:7625	962718	0	True				
ANR	962809	OrExpression	"( spid == NULL && addr_spid == NULL ) || ( spid && addr_spid && ! strcmp ( spid , addr_spid ) )"		962718	0		||			
ANR	962810	AndExpression	spid == NULL && addr_spid == NULL		962718	0		&&			
ANR	962811	EqualityExpression	spid == NULL		962718	0		==			
ANR	962812	Identifier	spid		962718	0					
ANR	962813	Identifier	NULL		962718	1					
ANR	962814	EqualityExpression	addr_spid == NULL		962718	1		==			
ANR	962815	Identifier	addr_spid		962718	0					
ANR	962816	Identifier	NULL		962718	1					
ANR	962817	AndExpression	"spid && addr_spid && ! strcmp ( spid , addr_spid )"		962718	1		&&			
ANR	962818	Identifier	spid		962718	0					
ANR	962819	AndExpression	"addr_spid && ! strcmp ( spid , addr_spid )"		962718	1		&&			
ANR	962820	Identifier	addr_spid		962718	0					
ANR	962821	UnaryOperationExpression	"! strcmp ( spid , addr_spid )"		962718	1					
ANR	962822	UnaryOperator	!		962718	0					
ANR	962823	CallExpression	"strcmp ( spid , addr_spid )"		962718	1					
ANR	962824	Callee	strcmp		962718	0					
ANR	962825	Identifier	strcmp		962718	0					
ANR	962826	ArgumentList	spid		962718	1					
ANR	962827	Argument	spid		962718	0					
ANR	962828	Identifier	spid		962718	0					
ANR	962829	Argument	addr_spid		962718	1					
ANR	962830	Identifier	addr_spid		962718	0					
ANR	962831	CompoundStatement		8:52:333:333	962718	1					
ANR	962832	ReturnStatement	return true ;	392:3:7634:7645	962718	0	True				
ANR	962833	Identifier	true		962718	0					
ANR	962834	IfStatement	if ( getPrivateAddr ( ) )		962718	1					
ANR	962835	Condition	getPrivateAddr ( )	395:5:7659:7674	962718	0	True				
ANR	962836	CallExpression	getPrivateAddr ( )		962718	0					
ANR	962837	Callee	getPrivateAddr		962718	0					
ANR	962838	Identifier	getPrivateAddr		962718	0					
ANR	962839	ArgumentList			962718	1					
ANR	962840	CompoundStatement		13:2:386:425	962718	1					
ANR	962841	IdentifierDeclStatement	Sinful private_addr ( getPrivateAddr ( ) ) ;	396:2:7682:7721	962718	0	True				
ANR	962842	IdentifierDecl	private_addr ( getPrivateAddr ( ) )		962718	0					
ANR	962843	IdentifierDeclType	Sinful		962718	0					
ANR	962844	Identifier	private_addr		962718	1					
ANR	962845	CallExpression	getPrivateAddr ( )		962718	2					
ANR	962846	Callee	getPrivateAddr		962718	0					
ANR	962847	Identifier	getPrivateAddr		962718	0					
ANR	962848	ArgumentList			962718	1					
ANR	962849	ReturnStatement	return private_addr . addressPointsToMe ( addr ) ;	397:2:7725:7770	962718	1	True				
ANR	962850	CallExpression	private_addr . addressPointsToMe ( addr )		962718	0					
ANR	962851	Callee	private_addr . addressPointsToMe		962718	0					
ANR	962852	MemberAccess	private_addr . addressPointsToMe		962718	0					
ANR	962853	Identifier	private_addr		962718	0					
ANR	962854	Identifier	addressPointsToMe		962718	1					
ANR	962855	ArgumentList	addr		962718	1					
ANR	962856	Argument	addr		962718	0					
ANR	962857	Identifier	addr		962718	0					
ANR	962858	ReturnStatement	return false ;	399:1:7776:7788	962718	2	True				
ANR	962859	Identifier	false		962718	0					
ANR	962860	ReturnType	bool		962718	1					
ANR	962861	Identifier	Sinful :: addressPointsToMe		962718	2					
ANR	962862	ParameterList	Sinful const & addr		962718	3					
ANR	962863	Parameter	Sinful const & addr	383:27:7268:7285	962718	0	True				
ANR	962864	ParameterType	Sinful const &		962718	0					
ANR	962865	Identifier	addr		962718	1					
ANR	962866	CFGEntryNode	ENTRY		962718		True				
ANR	962867	CFGExitNode	EXIT		962718		True				
ANR	962868	Symbol	strcmp		962718						
ANR	962869	Symbol	addr . getPort		962718						
ANR	962870	Symbol	NULL		962718						
ANR	962871	Symbol	getSharedPortID		962718						
ANR	962872	Symbol	addr . getSharedPortID		962718						
ANR	962873	Symbol	private_addr . addressPointsToMe		962718						
ANR	962874	Symbol	false		962718						
ANR	962875	Symbol	addr . getHost		962718						
ANR	962876	Symbol	getPrivateAddr		962718						
ANR	962877	Symbol	private_addr		962718						
ANR	962878	Symbol	spid		962718						
ANR	962879	Symbol	addr_spid		962718						
ANR	962880	Symbol	getPort		962718						
ANR	962881	Symbol	true		962718						
ANR	962882	Symbol	addr		962718						
ANR	962883	Symbol	getHost		962718						
ANR	962884	Function	Sinful :: getPortNum	402:0:7793:7883							
ANR	962885	FunctionDef	Sinful :: getPortNum ()		962884	0					
ANR	962886	CompoundStatement		404:0:7818:7883	962884	0					
ANR	962887	IfStatement	if ( ! getPort ( ) )		962884	0					
ANR	962888	Condition	! getPort ( )	405:5:7825:7834	962884	0	True				
ANR	962889	UnaryOperationExpression	! getPort ( )		962884	0					
ANR	962890	UnaryOperator	!		962884	0					
ANR	962891	CallExpression	getPort ( )		962884	1					
ANR	962892	Callee	getPort		962884	0					
ANR	962893	Identifier	getPort		962884	0					
ANR	962894	ArgumentList			962884	1					
ANR	962895	CompoundStatement		2:18:19:19	962884	1					
ANR	962896	ReturnStatement	return - 1 ;	406:2:7842:7851	962884	0	True				
ANR	962897	UnaryOperationExpression	- 1		962884	0					
ANR	962898	UnaryOperator	-		962884	0					
ANR	962899	PrimaryExpression	1		962884	1					
ANR	962900	ReturnStatement	return atoi ( getPort ( ) ) ;	408:1:7857:7881	962884	1	True				
ANR	962901	CallExpression	atoi ( getPort ( ) )		962884	0					
ANR	962902	Callee	atoi		962884	0					
ANR	962903	Identifier	atoi		962884	0					
ANR	962904	ArgumentList	getPort ( )		962884	1					
ANR	962905	Argument	getPort ( )		962884	0					
ANR	962906	CallExpression	getPort ( )		962884	0					
ANR	962907	Callee	getPort		962884	0					
ANR	962908	Identifier	getPort		962884	0					
ANR	962909	ArgumentList			962884	1					
ANR	962910	ReturnType	int		962884	1					
ANR	962911	Identifier	Sinful :: getPortNum		962884	2					
ANR	962912	ParameterList			962884	3					
ANR	962913	CFGEntryNode	ENTRY		962884		True				
ANR	962914	CFGExitNode	EXIT		962884		True				
ANR	962915	Symbol	atoi		962884						
ANR	962916	Symbol	getPort		962884						
