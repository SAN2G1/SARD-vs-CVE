command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4882393	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_simple_arg.cpp								
ANR	4882394	Function	SimpleArg :: SimpleArg	27:0:942:1741							
ANR	4882395	FunctionDef	"SimpleArg :: SimpleArg (const char * * argv , int argc , int index)"		4882394	0					
ANR	4882396	CompoundStatement		28:0:1005:1741	4882394	0					
ANR	4882397	ExpressionStatement	m_index = index	29:1:1008:1023	4882394	0	True				
ANR	4882398	AssignmentExpression	m_index = index		4882394	0		=			
ANR	4882399	Identifier	m_index		4882394	0					
ANR	4882400	Identifier	index		4882394	1					
ANR	4882401	ExpressionStatement	ASSERT ( index < argc )	30:1:1026:1048	4882394	1	True				
ANR	4882402	CallExpression	ASSERT ( index < argc )		4882394	0					
ANR	4882403	Callee	ASSERT		4882394	0					
ANR	4882404	Identifier	ASSERT		4882394	0					
ANR	4882405	ArgumentList	index < argc		4882394	1					
ANR	4882406	Argument	index < argc		4882394	0					
ANR	4882407	RelationalExpression	index < argc		4882394	0		<			
ANR	4882408	Identifier	index		4882394	0					
ANR	4882409	Identifier	argc		4882394	1					
ANR	4882410	ExpressionStatement	m_argv = argv	32:1:1052:1065	4882394	2	True				
ANR	4882411	AssignmentExpression	m_argv = argv		4882394	0		=			
ANR	4882412	Identifier	m_argv		4882394	0					
ANR	4882413	Identifier	argv		4882394	1					
ANR	4882414	ExpressionStatement	m_argc = argc	33:1:1068:1081	4882394	3	True				
ANR	4882415	AssignmentExpression	m_argc = argc		4882394	0		=			
ANR	4882416	Identifier	m_argc		4882394	0					
ANR	4882417	Identifier	argc		4882394	1					
ANR	4882418	ExpressionStatement	m_arg = argv [ index ]	34:1:1084:1103	4882394	4	True				
ANR	4882419	AssignmentExpression	m_arg = argv [ index ]		4882394	0		=			
ANR	4882420	Identifier	m_arg		4882394	0					
ANR	4882421	ArrayIndexing	argv [ index ]		4882394	1					
ANR	4882422	Identifier	argv		4882394	0					
ANR	4882423	Identifier	index		4882394	1					
ANR	4882424	ExpressionStatement	m_short = '\\0'	35:1:1106:1120	4882394	5	True				
ANR	4882425	AssignmentExpression	m_short = '\\0'		4882394	0		=			
ANR	4882426	Identifier	m_short		4882394	0					
ANR	4882427	PrimaryExpression	'\\0'		4882394	1					
ANR	4882428	ExpressionStatement	"m_long = """""	36:1:1123:1134	4882394	6	True				
ANR	4882429	AssignmentExpression	"m_long = """""		4882394	0		=			
ANR	4882430	Identifier	m_long		4882394	0					
ANR	4882431	PrimaryExpression	""""""		4882394	1					
ANR	4882432	ExpressionStatement	m_error = false	37:1:1137:1152	4882394	7	True				
ANR	4882433	AssignmentExpression	m_error = false		4882394	0		=			
ANR	4882434	Identifier	m_error		4882394	0					
ANR	4882435	Identifier	false		4882394	1					
ANR	4882436	ExpressionStatement	m_is_opt = false	38:1:1155:1171	4882394	8	True				
ANR	4882437	AssignmentExpression	m_is_opt = false		4882394	0		=			
ANR	4882438	Identifier	m_is_opt		4882394	0					
ANR	4882439	Identifier	false		4882394	1					
ANR	4882440	ExpressionStatement	m_fixed = NULL	39:1:1174:1188	4882394	9	True				
ANR	4882441	AssignmentExpression	m_fixed = NULL		4882394	0		=			
ANR	4882442	Identifier	m_fixed		4882394	0					
ANR	4882443	Identifier	NULL		4882394	1					
ANR	4882444	IfStatement	if ( m_arg [ 0 ] == '-' )		4882394	10					
ANR	4882445	Condition	m_arg [ 0 ] == '-'	42:6:1250:1264	4882394	0	True				
ANR	4882446	EqualityExpression	m_arg [ 0 ] == '-'		4882394	0		==			
ANR	4882447	ArrayIndexing	m_arg [ 0 ]		4882394	0					
ANR	4882448	Identifier	m_arg		4882394	0					
ANR	4882449	PrimaryExpression	0		4882394	1					
ANR	4882450	PrimaryExpression	'-'		4882394	1					
ANR	4882451	CompoundStatement		15:24:262:262	4882394	1					
ANR	4882452	ExpressionStatement	m_is_opt = true	43:2:1272:1287	4882394	0	True				
ANR	4882453	AssignmentExpression	m_is_opt = true		4882394	0		=			
ANR	4882454	Identifier	m_is_opt		4882394	0					
ANR	4882455	Identifier	true		4882394	1					
ANR	4882456	ExpressionStatement	m_index ++	44:2:1291:1300	4882394	1	True				
ANR	4882457	PostIncDecOperationExpression	m_index ++		4882394	0					
ANR	4882458	Identifier	m_index		4882394	0					
ANR	4882459	IncDec	++		4882394	1					
ANR	4882460	IfStatement	if ( m_arg [ 1 ] == '-' )		4882394	2					
ANR	4882461	Condition	m_arg [ 1 ] == '-'	46:7:1310:1324	4882394	0	True				
ANR	4882462	EqualityExpression	m_arg [ 1 ] == '-'		4882394	0		==			
ANR	4882463	ArrayIndexing	m_arg [ 1 ]		4882394	0					
ANR	4882464	Identifier	m_arg		4882394	0					
ANR	4882465	PrimaryExpression	1		4882394	1					
ANR	4882466	PrimaryExpression	'-'		4882394	1					
ANR	4882467	CompoundStatement		19:24:321:321	4882394	1					
ANR	4882468	ExpressionStatement	m_long = & m_arg [ 2 ]	47:3:1332:1350	4882394	0	True				
ANR	4882469	AssignmentExpression	m_long = & m_arg [ 2 ]		4882394	0		=			
ANR	4882470	Identifier	m_long		4882394	0					
ANR	4882471	UnaryOperationExpression	& m_arg [ 2 ]		4882394	1					
ANR	4882472	UnaryOperator	&		4882394	0					
ANR	4882473	ArrayIndexing	m_arg [ 2 ]		4882394	1					
ANR	4882474	Identifier	m_arg		4882394	0					
ANR	4882475	PrimaryExpression	2		4882394	1					
ANR	4882476	ElseStatement	else		4882394	0					
ANR	4882477	IfStatement	if ( strlen ( m_arg ) == 2 )		4882394	0					
ANR	4882478	Condition	strlen ( m_arg ) == 2	49:12:1368:1385	4882394	0	True				
ANR	4882479	EqualityExpression	strlen ( m_arg ) == 2		4882394	0		==			
ANR	4882480	CallExpression	strlen ( m_arg )		4882394	0					
ANR	4882481	Callee	strlen		4882394	0					
ANR	4882482	Identifier	strlen		4882394	0					
ANR	4882483	ArgumentList	m_arg		4882394	1					
ANR	4882484	Argument	m_arg		4882394	0					
ANR	4882485	Identifier	m_arg		4882394	0					
ANR	4882486	PrimaryExpression	2		4882394	1					
ANR	4882487	CompoundStatement		22:32:382:382	4882394	1					
ANR	4882488	ExpressionStatement	m_short = m_arg [ 1 ]	50:3:1393:1411	4882394	0	True				
ANR	4882489	AssignmentExpression	m_short = m_arg [ 1 ]		4882394	0		=			
ANR	4882490	Identifier	m_short		4882394	0					
ANR	4882491	ArrayIndexing	m_arg [ 1 ]		4882394	1					
ANR	4882492	Identifier	m_arg		4882394	0					
ANR	4882493	PrimaryExpression	1		4882394	1					
ANR	4882494	ElseStatement	else		4882394	0					
ANR	4882495	CompoundStatement		25:7:418:418	4882394	0					
ANR	4882496	ExpressionStatement	m_error = true	53:3:1429:1443	4882394	0	True				
ANR	4882497	AssignmentExpression	m_error = true		4882394	0		=			
ANR	4882498	Identifier	m_error		4882394	0					
ANR	4882499	Identifier	true		4882394	1					
ANR	4882500	IfStatement	if ( index + 1 < argc )		4882394	3					
ANR	4882501	Condition	index + 1 < argc	58:7:1526:1539	4882394	0	True				
ANR	4882502	RelationalExpression	index + 1 < argc		4882394	0		<			
ANR	4882503	AdditiveExpression	index + 1		4882394	0		+			
ANR	4882504	Identifier	index		4882394	0					
ANR	4882505	PrimaryExpression	1		4882394	1					
ANR	4882506	Identifier	argc		4882394	1					
ANR	4882507	CompoundStatement		31:24:537:537	4882394	1					
ANR	4882508	ExpressionStatement	m_opt = argv [ index + 1 ]	59:3:1548:1569	4882394	0	True				
ANR	4882509	AssignmentExpression	m_opt = argv [ index + 1 ]		4882394	0		=			
ANR	4882510	Identifier	m_opt		4882394	0					
ANR	4882511	ArrayIndexing	argv [ index + 1 ]		4882394	1					
ANR	4882512	Identifier	argv		4882394	0					
ANR	4882513	AdditiveExpression	index + 1		4882394	1		+			
ANR	4882514	Identifier	index		4882394	0					
ANR	4882515	PrimaryExpression	1		4882394	1					
ANR	4882516	ElseStatement	else		4882394	0					
ANR	4882517	CompoundStatement		34:7:576:576	4882394	0					
ANR	4882518	ExpressionStatement	m_opt = NULL	62:3:1587:1599	4882394	0	True				
ANR	4882519	AssignmentExpression	m_opt = NULL		4882394	0		=			
ANR	4882520	Identifier	m_opt		4882394	0					
ANR	4882521	Identifier	NULL		4882394	1					
ANR	4882522	ElseStatement	else		4882394	0					
ANR	4882523	CompoundStatement		41:6:637:637	4882394	0					
ANR	4882524	ExpressionStatement	m_is_opt = false	70:2:1684:1700	4882394	0	True				
ANR	4882525	AssignmentExpression	m_is_opt = false		4882394	0		=			
ANR	4882526	Identifier	m_is_opt		4882394	0					
ANR	4882527	Identifier	false		4882394	1					
ANR	4882528	ExpressionStatement	m_opt = m_arg	71:2:1704:1717	4882394	1	True				
ANR	4882529	AssignmentExpression	m_opt = m_arg		4882394	0		=			
ANR	4882530	Identifier	m_opt		4882394	0					
ANR	4882531	Identifier	m_arg		4882394	1					
ANR	4882532	ExpressionStatement	m_fixed = m_arg	72:2:1721:1736	4882394	2	True				
ANR	4882533	AssignmentExpression	m_fixed = m_arg		4882394	0		=			
ANR	4882534	Identifier	m_fixed		4882394	0					
ANR	4882535	Identifier	m_arg		4882394	1					
ANR	4882536	Identifier	SimpleArg :: SimpleArg		4882394	1					
ANR	4882537	ParameterList	"const char * * argv , int argc , int index"		4882394	2					
ANR	4882538	Parameter	const char * * argv	27:22:964:980	4882394	0	True				
ANR	4882539	ParameterType	const char * *		4882394	0					
ANR	4882540	Identifier	argv		4882394	1					
ANR	4882541	Parameter	int argc	27:41:983:990	4882394	1	True				
ANR	4882542	ParameterType	int		4882394	0					
ANR	4882543	Identifier	argc		4882394	1					
ANR	4882544	Parameter	int index	27:51:993:1001	4882394	2	True				
ANR	4882545	ParameterType	int		4882394	0					
ANR	4882546	Identifier	index		4882394	1					
ANR	4882547	CFGEntryNode	ENTRY		4882394		True				
ANR	4882548	CFGExitNode	EXIT		4882394		True				
ANR	4882549	Symbol	argc		4882394						
ANR	4882550	Symbol	m_short		4882394						
ANR	4882551	Symbol	m_long		4882394						
ANR	4882552	Symbol	NULL		4882394						
ANR	4882553	Symbol	* m_arg		4882394						
ANR	4882554	Symbol	* index		4882394						
ANR	4882555	Symbol	m_arg		4882394						
ANR	4882556	Symbol	false		4882394						
ANR	4882557	Symbol	index		4882394						
ANR	4882558	Symbol	* argv		4882394						
ANR	4882559	Symbol	argv		4882394						
ANR	4882560	Symbol	m_opt		4882394						
ANR	4882561	Symbol	m_is_opt		4882394						
ANR	4882562	Symbol	m_fixed		4882394						
ANR	4882563	Symbol	strlen		4882394						
ANR	4882564	Symbol	m_argc		4882394						
ANR	4882565	Symbol	true		4882394						
ANR	4882566	Symbol	m_argv		4882394						
ANR	4882567	Symbol	m_index		4882394						
ANR	4882568	Symbol	m_error		4882394						
ANR	4882569	Function	SimpleArg :: Next	76:0:1744:1863							
ANR	4882570	FunctionDef	SimpleArg :: Next ()		4882569	0					
ANR	4882571	CompoundStatement		78:0:1773:1863	4882569	0					
ANR	4882572	IfStatement	if ( m_index + 1 < m_argc )		4882569	0					
ANR	4882573	Condition	m_index + 1 < m_argc	79:6:1781:1798	4882569	0	True				
ANR	4882574	RelationalExpression	m_index + 1 < m_argc		4882569	0		<			
ANR	4882575	AdditiveExpression	m_index + 1		4882569	0		+			
ANR	4882576	Identifier	m_index		4882569	0					
ANR	4882577	PrimaryExpression	1		4882569	1					
ANR	4882578	Identifier	m_argc		4882569	1					
ANR	4882579	CompoundStatement		2:27:28:28	4882569	1					
ANR	4882580	ExpressionStatement	m_opt = m_argv [ m_index + 1 ]	80:2:1806:1831	4882569	0	True				
ANR	4882581	AssignmentExpression	m_opt = m_argv [ m_index + 1 ]		4882569	0		=			
ANR	4882582	Identifier	m_opt		4882569	0					
ANR	4882583	ArrayIndexing	m_argv [ m_index + 1 ]		4882569	1					
ANR	4882584	Identifier	m_argv		4882569	0					
ANR	4882585	AdditiveExpression	m_index + 1		4882569	1		+			
ANR	4882586	Identifier	m_index		4882569	0					
ANR	4882587	PrimaryExpression	1		4882569	1					
ANR	4882588	ElseStatement	else		4882569	0					
ANR	4882589	CompoundStatement		5:6:68:68	4882569	0					
ANR	4882590	ExpressionStatement	m_opt = NULL	83:2:1846:1858	4882569	0	True				
ANR	4882591	AssignmentExpression	m_opt = NULL		4882569	0		=			
ANR	4882592	Identifier	m_opt		4882569	0					
ANR	4882593	Identifier	NULL		4882569	1					
ANR	4882594	ReturnType	void		4882569	1					
ANR	4882595	Identifier	SimpleArg :: Next		4882569	2					
ANR	4882596	ParameterList			4882569	3					
ANR	4882597	CFGEntryNode	ENTRY		4882569		True				
ANR	4882598	CFGExitNode	EXIT		4882569		True				
ANR	4882599	Symbol	NULL		4882569						
ANR	4882600	Symbol	* m_index		4882569						
ANR	4882601	Symbol	m_argc		4882569						
ANR	4882602	Symbol	* m_argv		4882569						
ANR	4882603	Symbol	m_argv		4882569						
ANR	4882604	Symbol	m_opt		4882569						
ANR	4882605	Symbol	m_index		4882569						
ANR	4882606	Function	SimpleArg :: Match	87:0:1866:1996							
ANR	4882607	FunctionDef	SimpleArg :: Match (const char short_arg)		4882606	0					
ANR	4882608	CompoundStatement		89:0:1918:1996	4882606	0					
ANR	4882609	IfStatement	if ( m_short == short_arg )		4882606	0					
ANR	4882610	Condition	m_short == short_arg	90:6:1926:1945	4882606	0	True				
ANR	4882611	EqualityExpression	m_short == short_arg		4882606	0		==			
ANR	4882612	Identifier	m_short		4882606	0					
ANR	4882613	Identifier	short_arg		4882606	1					
ANR	4882614	CompoundStatement		2:29:30:30	4882606	1					
ANR	4882615	ReturnStatement	return true ;	91:2:1953:1964	4882606	0	True				
ANR	4882616	Identifier	true		4882606	0					
ANR	4882617	ElseStatement	else		4882606	0					
ANR	4882618	CompoundStatement		5:6:56:56	4882606	0					
ANR	4882619	ReturnStatement	return false ;	94:2:1979:1991	4882606	0	True				
ANR	4882620	Identifier	false		4882606	0					
ANR	4882621	ReturnType	bool		4882606	1					
ANR	4882622	Identifier	SimpleArg :: Match		4882606	2					
ANR	4882623	ParameterList	const char short_arg		4882606	3					
ANR	4882624	Parameter	const char short_arg	88:18:1889:1908	4882606	0	True				
ANR	4882625	ParameterType	const char		4882606	0					
ANR	4882626	Identifier	short_arg		4882606	1					
ANR	4882627	CFGEntryNode	ENTRY		4882606		True				
ANR	4882628	CFGExitNode	EXIT		4882606		True				
ANR	4882629	Symbol	short_arg		4882606						
ANR	4882630	Symbol	m_short		4882606						
ANR	4882631	Symbol	true		4882606						
ANR	4882632	Symbol	false		4882606						
ANR	4882633	Function	SimpleArg :: Match	98:0:1999:2163							
ANR	4882634	FunctionDef	SimpleArg :: Match (const char * long_arg)		4882633	0					
ANR	4882635	CompoundStatement		100:0:2051:2163	4882633	0					
ANR	4882636	IfStatement	"if ( m_long && long_arg && ( ! strcmp ( m_long , long_arg ) ) )"		4882633	0					
ANR	4882637	Condition	"m_long && long_arg && ( ! strcmp ( m_long , long_arg ) )"	101:6:2059:2111	4882633	0	True				
ANR	4882638	AndExpression	"m_long && long_arg && ( ! strcmp ( m_long , long_arg ) )"		4882633	0		&&			
ANR	4882639	Identifier	m_long		4882633	0					
ANR	4882640	AndExpression	"long_arg && ( ! strcmp ( m_long , long_arg ) )"		4882633	1		&&			
ANR	4882641	Identifier	long_arg		4882633	0					
ANR	4882642	UnaryOperationExpression	"! strcmp ( m_long , long_arg )"		4882633	1					
ANR	4882643	UnaryOperator	!		4882633	0					
ANR	4882644	CallExpression	"strcmp ( m_long , long_arg )"		4882633	1					
ANR	4882645	Callee	strcmp		4882633	0					
ANR	4882646	Identifier	strcmp		4882633	0					
ANR	4882647	ArgumentList	m_long		4882633	1					
ANR	4882648	Argument	m_long		4882633	0					
ANR	4882649	Identifier	m_long		4882633	0					
ANR	4882650	Argument	long_arg		4882633	1					
ANR	4882651	Identifier	long_arg		4882633	0					
ANR	4882652	CompoundStatement		2:63:64:64	4882633	1					
ANR	4882653	ReturnStatement	return true ;	102:2:2120:2131	4882633	0	True				
ANR	4882654	Identifier	true		4882633	0					
ANR	4882655	ElseStatement	else		4882633	0					
ANR	4882656	CompoundStatement		5:6:90:90	4882633	0					
ANR	4882657	ReturnStatement	return false ;	105:2:2146:2158	4882633	0	True				
ANR	4882658	Identifier	false		4882633	0					
ANR	4882659	ReturnType	bool		4882633	1					
ANR	4882660	Identifier	SimpleArg :: Match		4882633	2					
ANR	4882661	ParameterList	const char * long_arg		4882633	3					
ANR	4882662	Parameter	const char * long_arg	99:18:2022:2041	4882633	0	True				
ANR	4882663	ParameterType	const char *		4882633	0					
ANR	4882664	Identifier	long_arg		4882633	1					
ANR	4882665	CFGEntryNode	ENTRY		4882633		True				
ANR	4882666	CFGExitNode	EXIT		4882633		True				
ANR	4882667	Symbol	strcmp		4882633						
ANR	4882668	Symbol	m_long		4882633						
ANR	4882669	Symbol	true		4882633						
ANR	4882670	Symbol	false		4882633						
ANR	4882671	Symbol	long_arg		4882633						
ANR	4882672	Function	SimpleArg :: Match	109:0:2166:2367							
ANR	4882673	FunctionDef	"SimpleArg :: Match (const char short_arg , const char * long_arg)"		4882672	0					
ANR	4882674	CompoundStatement		111:0:2240:2367	4882672	0					
ANR	4882675	IfStatement	if ( Match ( short_arg ) )		4882672	0					
ANR	4882676	Condition	Match ( short_arg )	112:6:2248:2265	4882672	0	True				
ANR	4882677	CallExpression	Match ( short_arg )		4882672	0					
ANR	4882678	Callee	Match		4882672	0					
ANR	4882679	Identifier	Match		4882672	0					
ANR	4882680	ArgumentList	short_arg		4882672	1					
ANR	4882681	Argument	short_arg		4882672	0					
ANR	4882682	Identifier	short_arg		4882672	0					
ANR	4882683	CompoundStatement		2:27:28:28	4882672	1					
ANR	4882684	ReturnStatement	return true ;	113:2:2273:2284	4882672	0	True				
ANR	4882685	Identifier	true		4882672	0					
ANR	4882686	ElseStatement	else		4882672	0					
ANR	4882687	IfStatement	if ( Match ( long_arg ) )		4882672	0					
ANR	4882688	Condition	Match ( long_arg )	115:11:2300:2316	4882672	0	True				
ANR	4882689	CallExpression	Match ( long_arg )		4882672	0					
ANR	4882690	Callee	Match		4882672	0					
ANR	4882691	Identifier	Match		4882672	0					
ANR	4882692	ArgumentList	long_arg		4882672	1					
ANR	4882693	Argument	long_arg		4882672	0					
ANR	4882694	Identifier	long_arg		4882672	0					
ANR	4882695	CompoundStatement		5:31:79:79	4882672	1					
ANR	4882696	ReturnStatement	return true ;	116:2:2324:2335	4882672	0	True				
ANR	4882697	Identifier	true		4882672	0					
ANR	4882698	ElseStatement	else		4882672	0					
ANR	4882699	CompoundStatement		8:6:105:105	4882672	0					
ANR	4882700	ReturnStatement	return false ;	119:2:2350:2362	4882672	0	True				
ANR	4882701	Identifier	false		4882672	0					
ANR	4882702	ReturnType	bool		4882672	1					
ANR	4882703	Identifier	SimpleArg :: Match		4882672	2					
ANR	4882704	ParameterList	"const char short_arg , const char * long_arg"		4882672	3					
ANR	4882705	Parameter	const char short_arg	110:18:2189:2208	4882672	0	True				
ANR	4882706	ParameterType	const char		4882672	0					
ANR	4882707	Identifier	short_arg		4882672	1					
ANR	4882708	Parameter	const char * long_arg	110:40:2211:2230	4882672	1	True				
ANR	4882709	ParameterType	const char *		4882672	0					
ANR	4882710	Identifier	long_arg		4882672	1					
ANR	4882711	CFGEntryNode	ENTRY		4882672		True				
ANR	4882712	CFGExitNode	EXIT		4882672		True				
ANR	4882713	Symbol	short_arg		4882672						
ANR	4882714	Symbol	true		4882672						
ANR	4882715	Symbol	false		4882672						
ANR	4882716	Symbol	long_arg		4882672						
ANR	4882717	Symbol	Match		4882672						
ANR	4882718	Function	SimpleArg :: fixedMatch	123:0:2370:2535							
ANR	4882719	FunctionDef	"SimpleArg :: fixedMatch (const char * arg , bool consume)"		4882718	0					
ANR	4882720	CompoundStatement		125:0:2430:2535	4882718	0					
ANR	4882721	IdentifierDeclStatement	"bool match = ( ! strcmp ( m_arg , arg ) ) ;"	126:1:2433:2471	4882718	0	True				
ANR	4882722	IdentifierDecl	"match = ( ! strcmp ( m_arg , arg ) )"		4882718	0					
ANR	4882723	IdentifierDeclType	bool		4882718	0					
ANR	4882724	Identifier	match		4882718	1					
ANR	4882725	AssignmentExpression	"match = ( ! strcmp ( m_arg , arg ) )"		4882718	2		=			
ANR	4882726	Identifier	match		4882718	0					
ANR	4882727	UnaryOperationExpression	"! strcmp ( m_arg , arg )"		4882718	1					
ANR	4882728	UnaryOperator	!		4882718	0					
ANR	4882729	CallExpression	"strcmp ( m_arg , arg )"		4882718	1					
ANR	4882730	Callee	strcmp		4882718	0					
ANR	4882731	Identifier	strcmp		4882718	0					
ANR	4882732	ArgumentList	m_arg		4882718	1					
ANR	4882733	Argument	m_arg		4882718	0					
ANR	4882734	Identifier	m_arg		4882718	0					
ANR	4882735	Argument	arg		4882718	1					
ANR	4882736	Identifier	arg		4882718	0					
ANR	4882737	IfStatement	if ( match && consume )		4882718	1					
ANR	4882738	Condition	match && consume	127:6:2479:2494	4882718	0	True				
ANR	4882739	AndExpression	match && consume		4882718	0		&&			
ANR	4882740	Identifier	match		4882718	0					
ANR	4882741	Identifier	consume		4882718	1					
ANR	4882742	CompoundStatement		3:25:67:67	4882718	1					
ANR	4882743	ExpressionStatement	ConsumeOpt ( )	128:2:2502:2515	4882718	0	True				
ANR	4882744	CallExpression	ConsumeOpt ( )		4882718	0					
ANR	4882745	Callee	ConsumeOpt		4882718	0					
ANR	4882746	Identifier	ConsumeOpt		4882718	0					
ANR	4882747	ArgumentList			4882718	1					
ANR	4882748	ReturnStatement	return match ;	130:1:2521:2533	4882718	2	True				
ANR	4882749	Identifier	match		4882718	0					
ANR	4882750	ReturnType	bool		4882718	1					
ANR	4882751	Identifier	SimpleArg :: fixedMatch		4882718	2					
ANR	4882752	ParameterList	"const char * arg , bool consume"		4882718	3					
ANR	4882753	Parameter	const char * arg	124:23:2398:2412	4882718	0	True				
ANR	4882754	ParameterType	const char *		4882718	0					
ANR	4882755	Identifier	arg		4882718	1					
ANR	4882756	Parameter	bool consume	124:40:2415:2426	4882718	1	True				
ANR	4882757	ParameterType	bool		4882718	0					
ANR	4882758	Identifier	consume		4882718	1					
ANR	4882759	CFGEntryNode	ENTRY		4882718		True				
ANR	4882760	CFGExitNode	EXIT		4882718		True				
ANR	4882761	Symbol	strcmp		4882718						
ANR	4882762	Symbol	arg		4882718						
ANR	4882763	Symbol	match		4882718						
ANR	4882764	Symbol	m_arg		4882718						
ANR	4882765	Symbol	consume		4882718						
ANR	4882766	Function	SimpleArg :: ConsumeOpt	133:0:2538:2644							
ANR	4882767	FunctionDef	SimpleArg :: ConsumeOpt (bool consume)		4882766	0					
ANR	4882768	CompoundStatement		135:0:2580:2644	4882766	0					
ANR	4882769	IfStatement	if ( consume )		4882766	0					
ANR	4882770	Condition	consume	136:6:2588:2594	4882766	0	True				
ANR	4882771	Identifier	consume		4882766	0					
ANR	4882772	CompoundStatement		2:16:17:17	4882766	1					
ANR	4882773	ExpressionStatement	Next ( )	137:2:2602:2609	4882766	0	True				
ANR	4882774	CallExpression	Next ( )		4882766	0					
ANR	4882775	Callee	Next		4882766	0					
ANR	4882776	Identifier	Next		4882766	0					
ANR	4882777	ArgumentList			4882766	1					
ANR	4882778	ExpressionStatement	m_index ++	138:2:2613:2622	4882766	1	True				
ANR	4882779	PostIncDecOperationExpression	m_index ++		4882766	0					
ANR	4882780	Identifier	m_index		4882766	0					
ANR	4882781	IncDec	++		4882766	1					
ANR	4882782	ReturnStatement	return m_index ;	140:1:2628:2642	4882766	1	True				
ANR	4882783	Identifier	m_index		4882766	0					
ANR	4882784	ReturnType	int		4882766	1					
ANR	4882785	Identifier	SimpleArg :: ConsumeOpt		4882766	2					
ANR	4882786	ParameterList	bool consume		4882766	3					
ANR	4882787	Parameter	bool consume	134:23:2565:2576	4882766	0	True				
ANR	4882788	ParameterType	bool		4882766	0					
ANR	4882789	Identifier	consume		4882766	1					
ANR	4882790	CFGEntryNode	ENTRY		4882766		True				
ANR	4882791	CFGExitNode	EXIT		4882766		True				
ANR	4882792	Symbol	consume		4882766						
ANR	4882793	Symbol	m_index		4882766						
ANR	4882794	Function	SimpleArg :: getOpt	144:0:2675:2827							
ANR	4882795	FunctionDef	"SimpleArg :: getOpt (const char * & opt , bool consume)"		4882794	0					
ANR	4882796	CompoundStatement		146:0:2732:2827	4882794	0					
ANR	4882797	IfStatement	if ( ! isOptStr ( ) )		4882794	0					
ANR	4882798	Condition	! isOptStr ( )	147:6:2740:2750	4882794	0	True				
ANR	4882799	UnaryOperationExpression	! isOptStr ( )		4882794	0					
ANR	4882800	UnaryOperator	!		4882794	0					
ANR	4882801	CallExpression	isOptStr ( )		4882794	1					
ANR	4882802	Callee	isOptStr		4882794	0					
ANR	4882803	Identifier	isOptStr		4882794	0					
ANR	4882804	ArgumentList			4882794	1					
ANR	4882805	CompoundStatement		2:20:21:21	4882794	1					
ANR	4882806	ReturnStatement	return false ;	148:2:2758:2770	4882794	0	True				
ANR	4882807	Identifier	false		4882794	0					
ANR	4882808	ExpressionStatement	opt = m_opt	150:1:2776:2787	4882794	1	True				
ANR	4882809	AssignmentExpression	opt = m_opt		4882794	0		=			
ANR	4882810	Identifier	opt		4882794	0					
ANR	4882811	Identifier	m_opt		4882794	1					
ANR	4882812	ExpressionStatement	ConsumeOpt ( consume )	151:1:2790:2811	4882794	2	True				
ANR	4882813	CallExpression	ConsumeOpt ( consume )		4882794	0					
ANR	4882814	Callee	ConsumeOpt		4882794	0					
ANR	4882815	Identifier	ConsumeOpt		4882794	0					
ANR	4882816	ArgumentList	consume		4882794	1					
ANR	4882817	Argument	consume		4882794	0					
ANR	4882818	Identifier	consume		4882794	0					
ANR	4882819	ReturnStatement	return true ;	152:1:2814:2825	4882794	3	True				
ANR	4882820	Identifier	true		4882794	0					
ANR	4882821	ReturnType	bool		4882794	1					
ANR	4882822	Identifier	SimpleArg :: getOpt		4882794	2					
ANR	4882823	ParameterList	"const char * & opt , bool consume"		4882794	3					
ANR	4882824	Parameter	const char * & opt	145:19:2699:2714	4882794	0	True				
ANR	4882825	ParameterType	const char * &		4882794	0					
ANR	4882826	Identifier	opt		4882794	1					
ANR	4882827	Parameter	bool consume	145:37:2717:2728	4882794	1	True				
ANR	4882828	ParameterType	bool		4882794	0					
ANR	4882829	Identifier	consume		4882794	1					
ANR	4882830	CFGEntryNode	ENTRY		4882794		True				
ANR	4882831	CFGExitNode	EXIT		4882794		True				
ANR	4882832	Symbol	opt		4882794						
ANR	4882833	Symbol	false		4882794						
ANR	4882834	Symbol	true		4882794						
ANR	4882835	Symbol	consume		4882794						
ANR	4882836	Symbol	m_opt		4882794						
ANR	4882837	Symbol	isOptStr		4882794						
ANR	4882838	Function	SimpleArg :: isOptInt	156:0:2859:3012							
ANR	4882839	FunctionDef	SimpleArg :: isOptInt ()		4882838	0					
ANR	4882840	CompoundStatement		158:0:2898:3012	4882838	0					
ANR	4882841	IfStatement	if ( ! m_opt )		4882838	0					
ANR	4882842	Condition	! m_opt	159:6:2906:2911	4882838	0	True				
ANR	4882843	UnaryOperationExpression	! m_opt		4882838	0					
ANR	4882844	UnaryOperator	!		4882838	0					
ANR	4882845	Identifier	m_opt		4882838	1					
ANR	4882846	CompoundStatement		2:15:16:16	4882838	1					
ANR	4882847	ReturnStatement	return false ;	160:2:2919:2931	4882838	0	True				
ANR	4882848	Identifier	false		4882838	0					
ANR	4882849	ReturnStatement	return ( isdigit ( * m_opt ) || ( ( * m_opt == '-' ) && isdigit ( * ( m_opt + 1 ) ) ) ) ;	162:1:2937:3010	4882838	1	True				
ANR	4882850	OrExpression	isdigit ( * m_opt ) || ( ( * m_opt == '-' ) && isdigit ( * ( m_opt + 1 ) ) )		4882838	0		||			
ANR	4882851	CallExpression	isdigit ( * m_opt )		4882838	0					
ANR	4882852	Callee	isdigit		4882838	0					
ANR	4882853	Identifier	isdigit		4882838	0					
ANR	4882854	ArgumentList	* m_opt		4882838	1					
ANR	4882855	Argument	* m_opt		4882838	0					
ANR	4882856	UnaryOperationExpression	* m_opt		4882838	0					
ANR	4882857	UnaryOperator	*		4882838	0					
ANR	4882858	Identifier	m_opt		4882838	1					
ANR	4882859	AndExpression	( * m_opt == '-' ) && isdigit ( * ( m_opt + 1 ) )		4882838	1		&&			
ANR	4882860	EqualityExpression	* m_opt == '-'		4882838	0		==			
ANR	4882861	UnaryOperationExpression	* m_opt		4882838	0					
ANR	4882862	UnaryOperator	*		4882838	0					
ANR	4882863	Identifier	m_opt		4882838	1					
ANR	4882864	PrimaryExpression	'-'		4882838	1					
ANR	4882865	CallExpression	isdigit ( * ( m_opt + 1 ) )		4882838	1					
ANR	4882866	Callee	isdigit		4882838	0					
ANR	4882867	Identifier	isdigit		4882838	0					
ANR	4882868	ArgumentList	* ( m_opt + 1 )		4882838	1					
ANR	4882869	Argument	* ( m_opt + 1 )		4882838	0					
ANR	4882870	UnaryOperationExpression	* ( m_opt + 1 )		4882838	0					
ANR	4882871	UnaryOperator	*		4882838	0					
ANR	4882872	AdditiveExpression	m_opt + 1		4882838	1		+			
ANR	4882873	Identifier	m_opt		4882838	0					
ANR	4882874	PrimaryExpression	1		4882838	1					
ANR	4882875	ReturnType	bool		4882838	1					
ANR	4882876	Identifier	SimpleArg :: isOptInt		4882838	2					
ANR	4882877	ParameterList			4882838	3					
ANR	4882878	CFGEntryNode	ENTRY		4882838		True				
ANR	4882879	CFGExitNode	EXIT		4882838		True				
ANR	4882880	Symbol	* m_opt		4882838						
ANR	4882881	Symbol	false		4882838						
ANR	4882882	Symbol	* ( m_opt + 1 )		4882838						
ANR	4882883	Symbol	m_opt		4882838						
ANR	4882884	Symbol	isdigit		4882838						
ANR	4882885	Function	SimpleArg :: getOpt	164:0:3014:3166							
ANR	4882886	FunctionDef	"SimpleArg :: getOpt (int & opt , bool consume)"		4882885	0					
ANR	4882887	CompoundStatement		166:0:3063:3166	4882885	0					
ANR	4882888	IfStatement	if ( ! isOptInt ( ) )		4882885	0					
ANR	4882889	Condition	! isOptInt ( )	167:6:3071:3081	4882885	0	True				
ANR	4882890	UnaryOperationExpression	! isOptInt ( )		4882885	0					
ANR	4882891	UnaryOperator	!		4882885	0					
ANR	4882892	CallExpression	isOptInt ( )		4882885	1					
ANR	4882893	Callee	isOptInt		4882885	0					
ANR	4882894	Identifier	isOptInt		4882885	0					
ANR	4882895	ArgumentList			4882885	1					
ANR	4882896	CompoundStatement		2:20:21:21	4882885	1					
ANR	4882897	ReturnStatement	return false ;	168:2:3089:3101	4882885	0	True				
ANR	4882898	Identifier	false		4882885	0					
ANR	4882899	ExpressionStatement	opt = atoi ( m_opt )	170:1:3107:3126	4882885	1	True				
ANR	4882900	AssignmentExpression	opt = atoi ( m_opt )		4882885	0		=			
ANR	4882901	Identifier	opt		4882885	0					
ANR	4882902	CallExpression	atoi ( m_opt )		4882885	1					
ANR	4882903	Callee	atoi		4882885	0					
ANR	4882904	Identifier	atoi		4882885	0					
ANR	4882905	ArgumentList	m_opt		4882885	1					
ANR	4882906	Argument	m_opt		4882885	0					
ANR	4882907	Identifier	m_opt		4882885	0					
ANR	4882908	ExpressionStatement	ConsumeOpt ( consume )	171:1:3129:3150	4882885	2	True				
ANR	4882909	CallExpression	ConsumeOpt ( consume )		4882885	0					
ANR	4882910	Callee	ConsumeOpt		4882885	0					
ANR	4882911	Identifier	ConsumeOpt		4882885	0					
ANR	4882912	ArgumentList	consume		4882885	1					
ANR	4882913	Argument	consume		4882885	0					
ANR	4882914	Identifier	consume		4882885	0					
ANR	4882915	ReturnStatement	return true ;	172:1:3153:3164	4882885	3	True				
ANR	4882916	Identifier	true		4882885	0					
ANR	4882917	ReturnType	bool		4882885	1					
ANR	4882918	Identifier	SimpleArg :: getOpt		4882885	2					
ANR	4882919	ParameterList	"int & opt , bool consume"		4882885	3					
ANR	4882920	Parameter	int & opt	165:19:3038:3045	4882885	0	True				
ANR	4882921	ParameterType	int &		4882885	0					
ANR	4882922	Identifier	opt		4882885	1					
ANR	4882923	Parameter	bool consume	165:29:3048:3059	4882885	1	True				
ANR	4882924	ParameterType	bool		4882885	0					
ANR	4882925	Identifier	consume		4882885	1					
ANR	4882926	CFGEntryNode	ENTRY		4882885		True				
ANR	4882927	CFGExitNode	EXIT		4882885		True				
ANR	4882928	Symbol	atoi		4882885						
ANR	4882929	Symbol	isOptInt		4882885						
ANR	4882930	Symbol	opt		4882885						
ANR	4882931	Symbol	false		4882885						
ANR	4882932	Symbol	true		4882885						
ANR	4882933	Symbol	consume		4882885						
ANR	4882934	Symbol	m_opt		4882885						
ANR	4882935	Function	SimpleArg :: isOptLong	176:0:3203:3266							
ANR	4882936	FunctionDef	SimpleArg :: isOptLong ()		4882935	0					
ANR	4882937	CompoundStatement		178:0:3243:3266	4882935	0					
ANR	4882938	ReturnStatement	return isOptInt ( ) ;	179:1:3246:3264	4882935	0	True				
ANR	4882939	CallExpression	isOptInt ( )		4882935	0					
ANR	4882940	Callee	isOptInt		4882935	0					
ANR	4882941	Identifier	isOptInt		4882935	0					
ANR	4882942	ArgumentList			4882935	1					
ANR	4882943	ReturnType	bool		4882935	1					
ANR	4882944	Identifier	SimpleArg :: isOptLong		4882935	2					
ANR	4882945	ParameterList			4882935	3					
ANR	4882946	CFGEntryNode	ENTRY		4882935		True				
ANR	4882947	CFGExitNode	EXIT		4882935		True				
ANR	4882948	Symbol	isOptInt		4882935						
ANR	4882949	Function	SimpleArg :: getOpt	181:0:3268:3422							
ANR	4882950	FunctionDef	"SimpleArg :: getOpt (long & opt , bool consume)"		4882949	0					
ANR	4882951	CompoundStatement		183:0:3318:3422	4882949	0					
ANR	4882952	IfStatement	if ( ! isOptLong ( ) )		4882949	0					
ANR	4882953	Condition	! isOptLong ( )	184:6:3326:3337	4882949	0	True				
ANR	4882954	UnaryOperationExpression	! isOptLong ( )		4882949	0					
ANR	4882955	UnaryOperator	!		4882949	0					
ANR	4882956	CallExpression	isOptLong ( )		4882949	1					
ANR	4882957	Callee	isOptLong		4882949	0					
ANR	4882958	Identifier	isOptLong		4882949	0					
ANR	4882959	ArgumentList			4882949	1					
ANR	4882960	CompoundStatement		2:21:22:22	4882949	1					
ANR	4882961	ReturnStatement	return false ;	185:2:3345:3357	4882949	0	True				
ANR	4882962	Identifier	false		4882949	0					
ANR	4882963	ExpressionStatement	opt = atol ( m_opt )	187:1:3363:3382	4882949	1	True				
ANR	4882964	AssignmentExpression	opt = atol ( m_opt )		4882949	0		=			
ANR	4882965	Identifier	opt		4882949	0					
ANR	4882966	CallExpression	atol ( m_opt )		4882949	1					
ANR	4882967	Callee	atol		4882949	0					
ANR	4882968	Identifier	atol		4882949	0					
ANR	4882969	ArgumentList	m_opt		4882949	1					
ANR	4882970	Argument	m_opt		4882949	0					
ANR	4882971	Identifier	m_opt		4882949	0					
ANR	4882972	ExpressionStatement	ConsumeOpt ( consume )	188:1:3385:3406	4882949	2	True				
ANR	4882973	CallExpression	ConsumeOpt ( consume )		4882949	0					
ANR	4882974	Callee	ConsumeOpt		4882949	0					
ANR	4882975	Identifier	ConsumeOpt		4882949	0					
ANR	4882976	ArgumentList	consume		4882949	1					
ANR	4882977	Argument	consume		4882949	0					
ANR	4882978	Identifier	consume		4882949	0					
ANR	4882979	ReturnStatement	return true ;	189:1:3409:3420	4882949	3	True				
ANR	4882980	Identifier	true		4882949	0					
ANR	4882981	ReturnType	bool		4882949	1					
ANR	4882982	Identifier	SimpleArg :: getOpt		4882949	2					
ANR	4882983	ParameterList	"long & opt , bool consume"		4882949	3					
ANR	4882984	Parameter	long & opt	182:19:3292:3300	4882949	0	True				
ANR	4882985	ParameterType	long &		4882949	0					
ANR	4882986	Identifier	opt		4882949	1					
ANR	4882987	Parameter	bool consume	182:30:3303:3314	4882949	1	True				
ANR	4882988	ParameterType	bool		4882949	0					
ANR	4882989	Identifier	consume		4882949	1					
ANR	4882990	CFGEntryNode	ENTRY		4882949		True				
ANR	4882991	CFGExitNode	EXIT		4882949		True				
ANR	4882992	Symbol	opt		4882949						
ANR	4882993	Symbol	false		4882949						
ANR	4882994	Symbol	true		4882949						
ANR	4882995	Symbol	consume		4882949						
ANR	4882996	Symbol	atol		4882949						
ANR	4882997	Symbol	m_opt		4882949						
ANR	4882998	Symbol	isOptLong		4882949						
ANR	4882999	Function	SimpleArg :: getOpt	193:0:3453:3611							
ANR	4883000	FunctionDef	"SimpleArg :: getOpt (double & opt , bool consume)"		4882999	0					
ANR	4883001	CompoundStatement		195:0:3505:3611	4882999	0					
ANR	4883002	IfStatement	if ( ! isOptDouble ( ) )		4882999	0					
ANR	4883003	Condition	! isOptDouble ( )	196:6:3513:3526	4882999	0	True				
ANR	4883004	UnaryOperationExpression	! isOptDouble ( )		4882999	0					
ANR	4883005	UnaryOperator	!		4882999	0					
ANR	4883006	CallExpression	isOptDouble ( )		4882999	1					
ANR	4883007	Callee	isOptDouble		4882999	0					
ANR	4883008	Identifier	isOptDouble		4882999	0					
ANR	4883009	ArgumentList			4882999	1					
ANR	4883010	CompoundStatement		2:23:24:24	4882999	1					
ANR	4883011	ReturnStatement	return false ;	197:2:3534:3546	4882999	0	True				
ANR	4883012	Identifier	false		4882999	0					
ANR	4883013	ExpressionStatement	opt = atof ( m_opt )	199:1:3552:3571	4882999	1	True				
ANR	4883014	AssignmentExpression	opt = atof ( m_opt )		4882999	0		=			
ANR	4883015	Identifier	opt		4882999	0					
ANR	4883016	CallExpression	atof ( m_opt )		4882999	1					
ANR	4883017	Callee	atof		4882999	0					
ANR	4883018	Identifier	atof		4882999	0					
ANR	4883019	ArgumentList	m_opt		4882999	1					
ANR	4883020	Argument	m_opt		4882999	0					
ANR	4883021	Identifier	m_opt		4882999	0					
ANR	4883022	ExpressionStatement	ConsumeOpt ( consume )	200:1:3574:3595	4882999	2	True				
ANR	4883023	CallExpression	ConsumeOpt ( consume )		4882999	0					
ANR	4883024	Callee	ConsumeOpt		4882999	0					
ANR	4883025	Identifier	ConsumeOpt		4882999	0					
ANR	4883026	ArgumentList	consume		4882999	1					
ANR	4883027	Argument	consume		4882999	0					
ANR	4883028	Identifier	consume		4882999	0					
ANR	4883029	ReturnStatement	return true ;	201:1:3598:3609	4882999	3	True				
ANR	4883030	Identifier	true		4882999	0					
ANR	4883031	ReturnType	bool		4882999	1					
ANR	4883032	Identifier	SimpleArg :: getOpt		4882999	2					
ANR	4883033	ParameterList	"double & opt , bool consume"		4882999	3					
ANR	4883034	Parameter	double & opt	194:19:3477:3487	4882999	0	True				
ANR	4883035	ParameterType	double &		4882999	0					
ANR	4883036	Identifier	opt		4882999	1					
ANR	4883037	Parameter	bool consume	194:32:3490:3501	4882999	1	True				
ANR	4883038	ParameterType	bool		4882999	0					
ANR	4883039	Identifier	consume		4882999	1					
ANR	4883040	CFGEntryNode	ENTRY		4882999		True				
ANR	4883041	CFGExitNode	EXIT		4882999		True				
ANR	4883042	Symbol	opt		4882999						
ANR	4883043	Symbol	isOptDouble		4882999						
ANR	4883044	Symbol	atof		4882999						
ANR	4883045	Symbol	false		4882999						
ANR	4883046	Symbol	true		4882999						
ANR	4883047	Symbol	consume		4882999						
ANR	4883048	Symbol	m_opt		4882999						
ANR	4883049	Function	SimpleArg :: isOptBool	205:0:3643:3761							
ANR	4883050	FunctionDef	SimpleArg :: isOptBool ()		4883049	0					
ANR	4883051	CompoundStatement		207:0:3683:3761	4883049	0					
ANR	4883052	IdentifierDeclStatement	int c = toupper ( * m_opt ) ;	208:1:3686:3709	4883049	0	True				
ANR	4883053	IdentifierDecl	c = toupper ( * m_opt )		4883049	0					
ANR	4883054	IdentifierDeclType	int		4883049	0					
ANR	4883055	Identifier	c		4883049	1					
ANR	4883056	AssignmentExpression	c = toupper ( * m_opt )		4883049	2		=			
ANR	4883057	Identifier	c		4883049	0					
ANR	4883058	CallExpression	toupper ( * m_opt )		4883049	1					
ANR	4883059	Callee	toupper		4883049	0					
ANR	4883060	Identifier	toupper		4883049	0					
ANR	4883061	ArgumentList	* m_opt		4883049	1					
ANR	4883062	Argument	* m_opt		4883049	0					
ANR	4883063	UnaryOperationExpression	* m_opt		4883049	0					
ANR	4883064	UnaryOperator	*		4883049	0					
ANR	4883065	Identifier	m_opt		4883049	1					
ANR	4883066	ReturnStatement	return ( c == 'T' || c == 'F' || c == 'Y' || c == 'N' ) ;	209:1:3712:3759	4883049	1	True				
ANR	4883067	OrExpression	c == 'T' || c == 'F' || c == 'Y' || c == 'N'		4883049	0		||			
ANR	4883068	EqualityExpression	c == 'T'		4883049	0		==			
ANR	4883069	Identifier	c		4883049	0					
ANR	4883070	PrimaryExpression	'T'		4883049	1					
ANR	4883071	OrExpression	c == 'F' || c == 'Y' || c == 'N'		4883049	1		||			
ANR	4883072	EqualityExpression	c == 'F'		4883049	0		==			
ANR	4883073	Identifier	c		4883049	0					
ANR	4883074	PrimaryExpression	'F'		4883049	1					
ANR	4883075	OrExpression	c == 'Y' || c == 'N'		4883049	1		||			
ANR	4883076	EqualityExpression	c == 'Y'		4883049	0		==			
ANR	4883077	Identifier	c		4883049	0					
ANR	4883078	PrimaryExpression	'Y'		4883049	1					
ANR	4883079	EqualityExpression	c == 'N'		4883049	1		==			
ANR	4883080	Identifier	c		4883049	0					
ANR	4883081	PrimaryExpression	'N'		4883049	1					
ANR	4883082	ReturnType	bool		4883049	1					
ANR	4883083	Identifier	SimpleArg :: isOptBool		4883049	2					
ANR	4883084	ParameterList			4883049	3					
ANR	4883085	CFGEntryNode	ENTRY		4883049		True				
ANR	4883086	CFGExitNode	EXIT		4883049		True				
ANR	4883087	Symbol	c		4883049						
ANR	4883088	Symbol	toupper		4883049						
ANR	4883089	Symbol	* m_opt		4883049						
ANR	4883090	Symbol	m_opt		4883049						
ANR	4883091	Function	SimpleArg :: getOpt	211:0:3764:3951							
ANR	4883092	FunctionDef	"SimpleArg :: getOpt (bool & opt , bool consume)"		4883091	0					
ANR	4883093	CompoundStatement		213:0:3814:3951	4883091	0					
ANR	4883094	IfStatement	if ( ! isOptBool ( ) )		4883091	0					
ANR	4883095	Condition	! isOptBool ( )	214:6:3822:3833	4883091	0	True				
ANR	4883096	UnaryOperationExpression	! isOptBool ( )		4883091	0					
ANR	4883097	UnaryOperator	!		4883091	0					
ANR	4883098	CallExpression	isOptBool ( )		4883091	1					
ANR	4883099	Callee	isOptBool		4883091	0					
ANR	4883100	Identifier	isOptBool		4883091	0					
ANR	4883101	ArgumentList			4883091	1					
ANR	4883102	CompoundStatement		2:21:22:22	4883091	1					
ANR	4883103	ReturnStatement	return false ;	215:2:3841:3853	4883091	0	True				
ANR	4883104	Identifier	false		4883091	0					
ANR	4883105	IdentifierDeclStatement	int c = toupper ( * m_opt ) ;	217:1:3859:3882	4883091	1	True				
ANR	4883106	IdentifierDecl	c = toupper ( * m_opt )		4883091	0					
ANR	4883107	IdentifierDeclType	int		4883091	0					
ANR	4883108	Identifier	c		4883091	1					
ANR	4883109	AssignmentExpression	c = toupper ( * m_opt )		4883091	2		=			
ANR	4883110	Identifier	c		4883091	0					
ANR	4883111	CallExpression	toupper ( * m_opt )		4883091	1					
ANR	4883112	Callee	toupper		4883091	0					
ANR	4883113	Identifier	toupper		4883091	0					
ANR	4883114	ArgumentList	* m_opt		4883091	1					
ANR	4883115	Argument	* m_opt		4883091	0					
ANR	4883116	UnaryOperationExpression	* m_opt		4883091	0					
ANR	4883117	UnaryOperator	*		4883091	0					
ANR	4883118	Identifier	m_opt		4883091	1					
ANR	4883119	ExpressionStatement	opt = ( c == 'T' || c == 'Y' )	218:1:3885:3911	4883091	2	True				
ANR	4883120	AssignmentExpression	opt = ( c == 'T' || c == 'Y' )		4883091	0		=			
ANR	4883121	Identifier	opt		4883091	0					
ANR	4883122	OrExpression	c == 'T' || c == 'Y'		4883091	1		||			
ANR	4883123	EqualityExpression	c == 'T'		4883091	0		==			
ANR	4883124	Identifier	c		4883091	0					
ANR	4883125	PrimaryExpression	'T'		4883091	1					
ANR	4883126	EqualityExpression	c == 'Y'		4883091	1		==			
ANR	4883127	Identifier	c		4883091	0					
ANR	4883128	PrimaryExpression	'Y'		4883091	1					
ANR	4883129	ExpressionStatement	ConsumeOpt ( consume )	219:1:3914:3935	4883091	3	True				
ANR	4883130	CallExpression	ConsumeOpt ( consume )		4883091	0					
ANR	4883131	Callee	ConsumeOpt		4883091	0					
ANR	4883132	Identifier	ConsumeOpt		4883091	0					
ANR	4883133	ArgumentList	consume		4883091	1					
ANR	4883134	Argument	consume		4883091	0					
ANR	4883135	Identifier	consume		4883091	0					
ANR	4883136	ReturnStatement	return true ;	220:1:3938:3949	4883091	4	True				
ANR	4883137	Identifier	true		4883091	0					
ANR	4883138	ReturnType	bool		4883091	1					
ANR	4883139	Identifier	SimpleArg :: getOpt		4883091	2					
ANR	4883140	ParameterList	"bool & opt , bool consume"		4883091	3					
ANR	4883141	Parameter	bool & opt	212:19:3788:3796	4883091	0	True				
ANR	4883142	ParameterType	bool &		4883091	0					
ANR	4883143	Identifier	opt		4883091	1					
ANR	4883144	Parameter	bool consume	212:30:3799:3810	4883091	1	True				
ANR	4883145	ParameterType	bool		4883091	0					
ANR	4883146	Identifier	consume		4883091	1					
ANR	4883147	CFGEntryNode	ENTRY		4883091		True				
ANR	4883148	CFGExitNode	EXIT		4883091		True				
ANR	4883149	Symbol	opt		4883091						
ANR	4883150	Symbol	c		4883091						
ANR	4883151	Symbol	isOptBool		4883091						
ANR	4883152	Symbol	toupper		4883091						
ANR	4883153	Symbol	* m_opt		4883091						
ANR	4883154	Symbol	false		4883091						
ANR	4883155	Symbol	true		4883091						
ANR	4883156	Symbol	consume		4883091						
ANR	4883157	Symbol	m_opt		4883091						
