command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5056926	File	data/converged/CVE-2011-4930_htcondor/src_defrag_defrag.cpp								
ANR	5056927	Function	Defrag :: Defrag	39:0:1240:1583							
ANR	5056928	FunctionDef	Defrag :: Defrag ()		5056927	0					
ANR	5056929	CompoundStatement		52:0:1581:1583	5056927	0					
ANR	5056930	Identifier	Defrag :: Defrag		5056927	1					
ANR	5056931	ParameterList			5056927	2					
ANR	5056932	CFGEntryNode	ENTRY		5056927		True				
ANR	5056933	CFGExitNode	EXIT		5056927		True				
ANR	5056934	Function	Defrag :: ~Defrag	55:0:1586:1615							
ANR	5056935	FunctionDef	Defrag :: ~Defrag ()		5056934	0					
ANR	5056936	CompoundStatement		56:0:1604:1615	5056934	0					
ANR	5056937	ExpressionStatement	stop ( )	57:1:1607:1613	5056934	0	True				
ANR	5056938	CallExpression	stop ( )		5056934	0					
ANR	5056939	Callee	stop		5056934	0					
ANR	5056940	Identifier	stop		5056934	0					
ANR	5056941	ArgumentList			5056934	1					
ANR	5056942	Identifier	Defrag :: ~Defrag		5056934	1					
ANR	5056943	ParameterList			5056934	2					
ANR	5056944	CFGEntryNode	ENTRY		5056934		True				
ANR	5056945	CFGExitNode	EXIT		5056934		True				
ANR	5056946	Function	Defrag :: init	60:0:1618:1668							
ANR	5056947	FunctionDef	Defrag :: init ()		5056946	0					
ANR	5056948	CompoundStatement		61:0:1638:1668	5056946	0					
ANR	5056949	ExpressionStatement	m_stats . Init ( )	62:1:1641:1655	5056946	0	True				
ANR	5056950	CallExpression	m_stats . Init ( )		5056946	0					
ANR	5056951	Callee	m_stats . Init		5056946	0					
ANR	5056952	MemberAccess	m_stats . Init		5056946	0					
ANR	5056953	Identifier	m_stats		5056946	0					
ANR	5056954	Identifier	Init		5056946	1					
ANR	5056955	ArgumentList			5056946	1					
ANR	5056956	ExpressionStatement	config ( )	63:1:1658:1666	5056946	1	True				
ANR	5056957	CallExpression	config ( )		5056946	0					
ANR	5056958	Callee	config		5056946	0					
ANR	5056959	Identifier	config		5056946	0					
ANR	5056960	ArgumentList			5056946	1					
ANR	5056961	ReturnType	void		5056946	1					
ANR	5056962	Identifier	Defrag :: init		5056946	2					
ANR	5056963	ParameterList			5056946	3					
ANR	5056964	CFGEntryNode	ENTRY		5056946		True				
ANR	5056965	CFGExitNode	EXIT		5056946		True				
ANR	5056966	Symbol	m_stats		5056946						
ANR	5056967	Function	Defrag :: config	66:0:1671:5733							
ANR	5056968	FunctionDef	Defrag :: config ()		5056967	0					
ANR	5056969	CompoundStatement		67:0:1693:5733	5056967	0					
ANR	5056970	ExpressionStatement	"ASSERT ( param ( m_state_file , ""DEFRAG_STATE_FILE"" ) )"	69:1:1697:1746	5056967	0	True				
ANR	5056971	CallExpression	"ASSERT ( param ( m_state_file , ""DEFRAG_STATE_FILE"" ) )"		5056967	0					
ANR	5056972	Callee	ASSERT		5056967	0					
ANR	5056973	Identifier	ASSERT		5056967	0					
ANR	5056974	ArgumentList	"param ( m_state_file , ""DEFRAG_STATE_FILE"" )"		5056967	1					
ANR	5056975	Argument	"param ( m_state_file , ""DEFRAG_STATE_FILE"" )"		5056967	0					
ANR	5056976	CallExpression	"param ( m_state_file , ""DEFRAG_STATE_FILE"" )"		5056967	0					
ANR	5056977	Callee	param		5056967	0					
ANR	5056978	Identifier	param		5056967	0					
ANR	5056979	ArgumentList	m_state_file		5056967	1					
ANR	5056980	Argument	m_state_file		5056967	0					
ANR	5056981	Identifier	m_state_file		5056967	0					
ANR	5056982	Argument	"""DEFRAG_STATE_FILE"""		5056967	1					
ANR	5056983	PrimaryExpression	"""DEFRAG_STATE_FILE"""		5056967	0					
ANR	5056984	IfStatement	if ( m_last_poll == 0 )		5056967	1					
ANR	5056985	Condition	m_last_poll == 0	70:5:1753:1766	5056967	0	True				
ANR	5056986	EqualityExpression	m_last_poll == 0		5056967	0		==			
ANR	5056987	Identifier	m_last_poll		5056967	0					
ANR	5056988	PrimaryExpression	0		5056967	1					
ANR	5056989	CompoundStatement		4:22:76:76	5056967	1					
ANR	5056990	ExpressionStatement	loadState ( )	71:2:1774:1785	5056967	0	True				
ANR	5056991	CallExpression	loadState ( )		5056967	0					
ANR	5056992	Callee	loadState		5056967	0					
ANR	5056993	Identifier	loadState		5056967	0					
ANR	5056994	ArgumentList			5056967	1					
ANR	5056995	IdentifierDeclStatement	int old_polling_interval = m_polling_interval ;	74:1:1792:1837	5056967	2	True				
ANR	5056996	IdentifierDecl	old_polling_interval = m_polling_interval		5056967	0					
ANR	5056997	IdentifierDeclType	int		5056967	0					
ANR	5056998	Identifier	old_polling_interval		5056967	1					
ANR	5056999	AssignmentExpression	old_polling_interval = m_polling_interval		5056967	2		=			
ANR	5057000	Identifier	m_polling_interval		5056967	0					
ANR	5057001	Identifier	m_polling_interval		5056967	1					
ANR	5057002	ExpressionStatement	"m_polling_interval = param_integer ( ""DEFRAG_INTERVAL"" , 600 )"	75:1:1840:1897	5056967	3	True				
ANR	5057003	AssignmentExpression	"m_polling_interval = param_integer ( ""DEFRAG_INTERVAL"" , 600 )"		5056967	0		=			
ANR	5057004	Identifier	m_polling_interval		5056967	0					
ANR	5057005	CallExpression	"param_integer ( ""DEFRAG_INTERVAL"" , 600 )"		5056967	1					
ANR	5057006	Callee	param_integer		5056967	0					
ANR	5057007	Identifier	param_integer		5056967	0					
ANR	5057008	ArgumentList	"""DEFRAG_INTERVAL"""		5056967	1					
ANR	5057009	Argument	"""DEFRAG_INTERVAL"""		5056967	0					
ANR	5057010	PrimaryExpression	"""DEFRAG_INTERVAL"""		5056967	0					
ANR	5057011	Argument	600		5056967	1					
ANR	5057012	PrimaryExpression	600		5056967	0					
ANR	5057013	IfStatement	if ( m_polling_interval <= 0 )		5056967	4					
ANR	5057014	Condition	m_polling_interval <= 0	76:5:1904:1926	5056967	0	True				
ANR	5057015	RelationalExpression	m_polling_interval <= 0		5056967	0		<=			
ANR	5057016	Identifier	m_polling_interval		5056967	0					
ANR	5057017	PrimaryExpression	0		5056967	1					
ANR	5057018	CompoundStatement		10:31:236:236	5056967	1					
ANR	5057019	Statement	dprintf	77:2:1934:1940	5056967	0	True				
ANR	5057020	Statement	(	77:9:1941:1941	5056967	1	True				
ANR	5057021	Statement	D_ALWAYS	77:10:1942:1949	5056967	2	True				
ANR	5057022	Statement	","	77:18:1950:1950	5056967	3	True				
ANR	5057023	Statement	"""DEFRAG_INTERVAL=%d, so no pool defragmentation """	78:4:1956:2004	5056967	4	True				
ANR	5057024	Statement	"""will be done.\\n"""	79:4:2010:2026	5056967	5	True				
ANR	5057025	Statement	","	79:21:2027:2027	5056967	6	True				
ANR	5057026	Statement	m_polling_interval	79:23:2029:2046	5056967	7	True				
ANR	5057027	Statement	)	79:41:2047:2047	5056967	8	True				
ANR	5057028	ExpressionStatement		79:42:2048:2048	5056967	9	True				
ANR	5057029	IfStatement	if ( m_polling_timer != - 1 )		5056967	10					
ANR	5057030	Condition	m_polling_timer != - 1	80:6:2056:2076	5056967	0	True				
ANR	5057031	EqualityExpression	m_polling_timer != - 1		5056967	0		!=			
ANR	5057032	Identifier	m_polling_timer		5056967	0					
ANR	5057033	UnaryOperationExpression	- 1		5056967	1					
ANR	5057034	UnaryOperator	-		5056967	0					
ANR	5057035	PrimaryExpression	1		5056967	1					
ANR	5057036	CompoundStatement		14:30:386:386	5056967	1					
ANR	5057037	ExpressionStatement	daemonCore -> Cancel_Timer ( m_polling_timer )	81:3:2085:2126	5056967	0	True				
ANR	5057038	CallExpression	daemonCore -> Cancel_Timer ( m_polling_timer )		5056967	0					
ANR	5057039	Callee	daemonCore -> Cancel_Timer		5056967	0					
ANR	5057040	PtrMemberAccess	daemonCore -> Cancel_Timer		5056967	0					
ANR	5057041	Identifier	daemonCore		5056967	0					
ANR	5057042	Identifier	Cancel_Timer		5056967	1					
ANR	5057043	ArgumentList	m_polling_timer		5056967	1					
ANR	5057044	Argument	m_polling_timer		5056967	0					
ANR	5057045	Identifier	m_polling_timer		5056967	0					
ANR	5057046	ExpressionStatement	m_polling_timer = - 1	82:3:2131:2151	5056967	1	True				
ANR	5057047	AssignmentExpression	m_polling_timer = - 1		5056967	0		=			
ANR	5057048	Identifier	m_polling_timer		5056967	0					
ANR	5057049	UnaryOperationExpression	- 1		5056967	1					
ANR	5057050	UnaryOperator	-		5056967	0					
ANR	5057051	PrimaryExpression	1		5056967	1					
ANR	5057052	ElseStatement	else		5056967	0					
ANR	5057053	IfStatement	if ( m_polling_timer >= 0 )		5056967	0					
ANR	5057054	Condition	m_polling_timer >= 0	85:10:2170:2189	5056967	0	True				
ANR	5057055	RelationalExpression	m_polling_timer >= 0		5056967	0		>=			
ANR	5057056	Identifier	m_polling_timer		5056967	0					
ANR	5057057	PrimaryExpression	0		5056967	1					
ANR	5057058	CompoundStatement		19:33:499:499	5056967	1					
ANR	5057059	IfStatement	if ( old_polling_interval != m_polling_interval )		5056967	0					
ANR	5057060	Condition	old_polling_interval != m_polling_interval	86:6:2201:2242	5056967	0	True				
ANR	5057061	EqualityExpression	old_polling_interval != m_polling_interval		5056967	0		!=			
ANR	5057062	Identifier	old_polling_interval		5056967	0					
ANR	5057063	Identifier	m_polling_interval		5056967	1					
ANR	5057064	CompoundStatement		20:51:552:552	5056967	1					
ANR	5057065	ExpressionStatement	"daemonCore -> Reset_Timer_Period ( m_polling_timer , m_polling_interval )"	87:3:2251:2327	5056967	0	True				
ANR	5057066	CallExpression	"daemonCore -> Reset_Timer_Period ( m_polling_timer , m_polling_interval )"		5056967	0					
ANR	5057067	Callee	daemonCore -> Reset_Timer_Period		5056967	0					
ANR	5057068	PtrMemberAccess	daemonCore -> Reset_Timer_Period		5056967	0					
ANR	5057069	Identifier	daemonCore		5056967	0					
ANR	5057070	Identifier	Reset_Timer_Period		5056967	1					
ANR	5057071	ArgumentList	m_polling_timer		5056967	1					
ANR	5057072	Argument	m_polling_timer		5056967	0					
ANR	5057073	Identifier	m_polling_timer		5056967	0					
ANR	5057074	Argument	m_polling_interval		5056967	1					
ANR	5057075	Identifier	m_polling_interval		5056967	0					
ANR	5057076	ElseStatement	else		5056967	0					
ANR	5057077	CompoundStatement		28:2:679:697	5056967	0					
ANR	5057078	IdentifierDeclStatement	time_t now = time ( NULL ) ;	93:2:2346:2369	5056967	0	True				
ANR	5057079	IdentifierDecl	now = time ( NULL )		5056967	0					
ANR	5057080	IdentifierDeclType	time_t		5056967	0					
ANR	5057081	Identifier	now		5056967	1					
ANR	5057082	AssignmentExpression	now = time ( NULL )		5056967	2		=			
ANR	5057083	Identifier	now		5056967	0					
ANR	5057084	CallExpression	time ( NULL )		5056967	1					
ANR	5057085	Callee	time		5056967	0					
ANR	5057086	Identifier	time		5056967	0					
ANR	5057087	ArgumentList	NULL		5056967	1					
ANR	5057088	Argument	NULL		5056967	0					
ANR	5057089	Identifier	NULL		5056967	0					
ANR	5057090	IdentifierDeclStatement	int first_time = 0 ;	94:2:2373:2391	5056967	1	True				
ANR	5057091	IdentifierDecl	first_time = 0		5056967	0					
ANR	5057092	IdentifierDeclType	int		5056967	0					
ANR	5057093	Identifier	first_time		5056967	1					
ANR	5057094	AssignmentExpression	first_time = 0		5056967	2		=			
ANR	5057095	Identifier	first_time		5056967	0					
ANR	5057096	PrimaryExpression	0		5056967	1					
ANR	5057097	IfStatement	if ( m_last_poll != 0 && now - m_last_poll < m_polling_interval && m_last_poll <= now )		5056967	2					
ANR	5057098	Condition	m_last_poll != 0 && now - m_last_poll < m_polling_interval && m_last_poll <= now	95:6:2399:2476	5056967	0	True				
ANR	5057099	AndExpression	m_last_poll != 0 && now - m_last_poll < m_polling_interval && m_last_poll <= now		5056967	0		&&			
ANR	5057100	EqualityExpression	m_last_poll != 0		5056967	0		!=			
ANR	5057101	Identifier	m_last_poll		5056967	0					
ANR	5057102	PrimaryExpression	0		5056967	1					
ANR	5057103	AndExpression	now - m_last_poll < m_polling_interval && m_last_poll <= now		5056967	1		&&			
ANR	5057104	RelationalExpression	now - m_last_poll < m_polling_interval		5056967	0		<			
ANR	5057105	AdditiveExpression	now - m_last_poll		5056967	0		-			
ANR	5057106	Identifier	now		5056967	0					
ANR	5057107	Identifier	m_last_poll		5056967	1					
ANR	5057108	Identifier	m_polling_interval		5056967	1					
ANR	5057109	RelationalExpression	m_last_poll <= now		5056967	1		<=			
ANR	5057110	Identifier	m_last_poll		5056967	0					
ANR	5057111	Identifier	now		5056967	1					
ANR	5057112	CompoundStatement		29:87:786:786	5056967	1					
ANR	5057113	ExpressionStatement	first_time = m_polling_interval - ( now - m_last_poll )	96:3:2485:2536	5056967	0	True				
ANR	5057114	AssignmentExpression	first_time = m_polling_interval - ( now - m_last_poll )		5056967	0		=			
ANR	5057115	Identifier	first_time		5056967	0					
ANR	5057116	AdditiveExpression	m_polling_interval - ( now - m_last_poll )		5056967	1		-			
ANR	5057117	Identifier	m_polling_interval		5056967	0					
ANR	5057118	AdditiveExpression	now - m_last_poll		5056967	1		-			
ANR	5057119	Identifier	now		5056967	0					
ANR	5057120	Identifier	m_last_poll		5056967	1					
ANR	5057121	ExpressionStatement	"m_polling_timer = daemonCore -> Register_Timer ( first_time , m_polling_interval , ( TimerHandlercpp ) & Defrag :: poll , ""Defrag::poll"" , this )"	98:2:2544:2691	5056967	3	True				
ANR	5057122	AssignmentExpression	"m_polling_timer = daemonCore -> Register_Timer ( first_time , m_polling_interval , ( TimerHandlercpp ) & Defrag :: poll , ""Defrag::poll"" , this )"		5056967	0		=			
ANR	5057123	Identifier	m_polling_timer		5056967	0					
ANR	5057124	CallExpression	"daemonCore -> Register_Timer ( first_time , m_polling_interval , ( TimerHandlercpp ) & Defrag :: poll , ""Defrag::poll"" , this )"		5056967	1					
ANR	5057125	Callee	daemonCore -> Register_Timer		5056967	0					
ANR	5057126	PtrMemberAccess	daemonCore -> Register_Timer		5056967	0					
ANR	5057127	Identifier	daemonCore		5056967	0					
ANR	5057128	Identifier	Register_Timer		5056967	1					
ANR	5057129	ArgumentList	first_time		5056967	1					
ANR	5057130	Argument	first_time		5056967	0					
ANR	5057131	Identifier	first_time		5056967	0					
ANR	5057132	Argument	m_polling_interval		5056967	1					
ANR	5057133	Identifier	m_polling_interval		5056967	0					
ANR	5057134	Argument	( TimerHandlercpp ) & Defrag :: poll		5056967	2					
ANR	5057135	CastExpression	( TimerHandlercpp ) & Defrag :: poll		5056967	0					
ANR	5057136	CastTarget	TimerHandlercpp		5056967	0					
ANR	5057137	UnaryOperationExpression	& Defrag :: poll		5056967	1					
ANR	5057138	UnaryOperator	&		5056967	0					
ANR	5057139	Identifier	Defrag :: poll		5056967	1					
ANR	5057140	Argument	"""Defrag::poll"""		5056967	3					
ANR	5057141	PrimaryExpression	"""Defrag::poll"""		5056967	0					
ANR	5057142	Argument	this		5056967	4					
ANR	5057143	Identifier	this		5056967	0					
ANR	5057144	IfStatement	if ( old_polling_interval != m_polling_interval && m_polling_interval > 0 )		5056967	5					
ANR	5057145	Condition	old_polling_interval != m_polling_interval && m_polling_interval > 0	105:5:2701:2768	5056967	0	True				
ANR	5057146	AndExpression	old_polling_interval != m_polling_interval && m_polling_interval > 0		5056967	0		&&			
ANR	5057147	EqualityExpression	old_polling_interval != m_polling_interval		5056967	0		!=			
ANR	5057148	Identifier	old_polling_interval		5056967	0					
ANR	5057149	Identifier	m_polling_interval		5056967	1					
ANR	5057150	RelationalExpression	m_polling_interval > 0		5056967	1		>			
ANR	5057151	Identifier	m_polling_interval		5056967	0					
ANR	5057152	PrimaryExpression	0		5056967	1					
ANR	5057153	CompoundStatement		40:1:1079:1079	5056967	1					
ANR	5057154	Statement	dprintf	107:2:2777:2783	5056967	0	True				
ANR	5057155	Statement	(	107:9:2784:2784	5056967	1	True				
ANR	5057156	Statement	D_ALWAYS	107:10:2785:2792	5056967	2	True				
ANR	5057157	Statement	","	107:18:2793:2793	5056967	3	True				
ANR	5057158	Statement	"""Will evaluate defragmentation policy every DEFRAG_INTERVAL="""	108:4:2799:2859	5056967	4	True				
ANR	5057159	Statement	"""%d seconds.\\n"""	109:4:2865:2879	5056967	5	True				
ANR	5057160	Statement	","	109:19:2880:2880	5056967	6	True				
ANR	5057161	Statement	m_polling_interval	109:21:2882:2899	5056967	7	True				
ANR	5057162	Statement	)	109:39:2900:2900	5056967	8	True				
ANR	5057163	ExpressionStatement		109:40:2901:2901	5056967	9	True				
ANR	5057164	ExpressionStatement	"m_draining_per_hour = param_double ( ""DEFRAG_DRAINING_MACHINES_PER_HOUR"" , 0 , 0 )"	112:1:2908:2983	5056967	6	True				
ANR	5057165	AssignmentExpression	"m_draining_per_hour = param_double ( ""DEFRAG_DRAINING_MACHINES_PER_HOUR"" , 0 , 0 )"		5056967	0		=			
ANR	5057166	Identifier	m_draining_per_hour		5056967	0					
ANR	5057167	CallExpression	"param_double ( ""DEFRAG_DRAINING_MACHINES_PER_HOUR"" , 0 , 0 )"		5056967	1					
ANR	5057168	Callee	param_double		5056967	0					
ANR	5057169	Identifier	param_double		5056967	0					
ANR	5057170	ArgumentList	"""DEFRAG_DRAINING_MACHINES_PER_HOUR"""		5056967	1					
ANR	5057171	Argument	"""DEFRAG_DRAINING_MACHINES_PER_HOUR"""		5056967	0					
ANR	5057172	PrimaryExpression	"""DEFRAG_DRAINING_MACHINES_PER_HOUR"""		5056967	0					
ANR	5057173	Argument	0		5056967	1					
ANR	5057174	PrimaryExpression	0		5056967	0					
ANR	5057175	Argument	0		5056967	2					
ANR	5057176	PrimaryExpression	0		5056967	0					
ANR	5057177	IdentifierDeclStatement	double rate = m_draining_per_hour / 3600.0 * m_polling_interval ;	114:1:2987:3046	5056967	7	True				
ANR	5057178	IdentifierDecl	rate = m_draining_per_hour / 3600.0 * m_polling_interval		5056967	0					
ANR	5057179	IdentifierDeclType	double		5056967	0					
ANR	5057180	Identifier	rate		5056967	1					
ANR	5057181	AssignmentExpression	rate = m_draining_per_hour / 3600.0 * m_polling_interval		5056967	2		=			
ANR	5057182	Identifier	rate		5056967	0					
ANR	5057183	MultiplicativeExpression	m_draining_per_hour / 3600.0 * m_polling_interval		5056967	1		/			
ANR	5057184	Identifier	m_draining_per_hour		5056967	0					
ANR	5057185	MultiplicativeExpression	3600.0 * m_polling_interval		5056967	1		*			
ANR	5057186	PrimaryExpression	3600.0		5056967	0					
ANR	5057187	Identifier	m_polling_interval		5056967	1					
ANR	5057188	ExpressionStatement	m_draining_per_poll = ( int ) floor ( rate + 0.00001 )	115:1:3049:3097	5056967	8	True				
ANR	5057189	AssignmentExpression	m_draining_per_poll = ( int ) floor ( rate + 0.00001 )		5056967	0		=			
ANR	5057190	Identifier	m_draining_per_poll		5056967	0					
ANR	5057191	CastExpression	( int ) floor ( rate + 0.00001 )		5056967	1					
ANR	5057192	CastTarget	int		5056967	0					
ANR	5057193	CallExpression	floor ( rate + 0.00001 )		5056967	1					
ANR	5057194	Callee	floor		5056967	0					
ANR	5057195	Identifier	floor		5056967	0					
ANR	5057196	ArgumentList	rate + 0.00001		5056967	1					
ANR	5057197	Argument	rate + 0.00001		5056967	0					
ANR	5057198	AdditiveExpression	rate + 0.00001		5056967	0		+			
ANR	5057199	Identifier	rate		5056967	0					
ANR	5057200	PrimaryExpression	0.00001		5056967	1					
ANR	5057201	IfStatement	if ( m_draining_per_poll < 0 )		5056967	9					
ANR	5057202	Condition	m_draining_per_poll < 0	116:5:3104:3126	5056967	0	True				
ANR	5057203	RelationalExpression	m_draining_per_poll < 0		5056967	0		<			
ANR	5057204	Identifier	m_draining_per_poll		5056967	0					
ANR	5057205	PrimaryExpression	0		5056967	1					
ANR	5057206	ExpressionStatement	m_draining_per_poll = 0	116:31:3130:3153	5056967	1	True				
ANR	5057207	AssignmentExpression	m_draining_per_poll = 0		5056967	0		=			
ANR	5057208	Identifier	m_draining_per_poll		5056967	0					
ANR	5057209	PrimaryExpression	0		5056967	1					
ANR	5057210	IdentifierDeclStatement	double error_per_hour = ( rate - m_draining_per_poll ) / m_polling_interval * 3600.0 ;	118:1:3157:3235	5056967	10	True				
ANR	5057211	IdentifierDecl	error_per_hour = ( rate - m_draining_per_poll ) / m_polling_interval * 3600.0		5056967	0					
ANR	5057212	IdentifierDeclType	double		5056967	0					
ANR	5057213	Identifier	error_per_hour		5056967	1					
ANR	5057214	AssignmentExpression	error_per_hour = ( rate - m_draining_per_poll ) / m_polling_interval * 3600.0		5056967	2		=			
ANR	5057215	Identifier	error_per_hour		5056967	0					
ANR	5057216	MultiplicativeExpression	( rate - m_draining_per_poll ) / m_polling_interval * 3600.0		5056967	1		/			
ANR	5057217	AdditiveExpression	rate - m_draining_per_poll		5056967	0		-			
ANR	5057218	Identifier	rate		5056967	0					
ANR	5057219	Identifier	m_draining_per_poll		5056967	1					
ANR	5057220	MultiplicativeExpression	m_polling_interval * 3600.0		5056967	1		*			
ANR	5057221	Identifier	m_polling_interval		5056967	0					
ANR	5057222	PrimaryExpression	3600.0		5056967	1					
ANR	5057223	ExpressionStatement	m_draining_per_poll_hour = ( int ) floor ( error_per_hour + 0.00001 )	119:1:3238:3301	5056967	11	True				
ANR	5057224	AssignmentExpression	m_draining_per_poll_hour = ( int ) floor ( error_per_hour + 0.00001 )		5056967	0		=			
ANR	5057225	Identifier	m_draining_per_poll_hour		5056967	0					
ANR	5057226	CastExpression	( int ) floor ( error_per_hour + 0.00001 )		5056967	1					
ANR	5057227	CastTarget	int		5056967	0					
ANR	5057228	CallExpression	floor ( error_per_hour + 0.00001 )		5056967	1					
ANR	5057229	Callee	floor		5056967	0					
ANR	5057230	Identifier	floor		5056967	0					
ANR	5057231	ArgumentList	error_per_hour + 0.00001		5056967	1					
ANR	5057232	Argument	error_per_hour + 0.00001		5056967	0					
ANR	5057233	AdditiveExpression	error_per_hour + 0.00001		5056967	0		+			
ANR	5057234	Identifier	error_per_hour		5056967	0					
ANR	5057235	PrimaryExpression	0.00001		5056967	1					
ANR	5057236	IfStatement	if ( m_draining_per_hour < 0 || m_polling_interval > 3600 )		5056967	12					
ANR	5057237	Condition	m_draining_per_hour < 0 || m_polling_interval > 3600	120:5:3308:3359	5056967	0	True				
ANR	5057238	OrExpression	m_draining_per_hour < 0 || m_polling_interval > 3600		5056967	0		||			
ANR	5057239	RelationalExpression	m_draining_per_hour < 0		5056967	0		<			
ANR	5057240	Identifier	m_draining_per_hour		5056967	0					
ANR	5057241	PrimaryExpression	0		5056967	1					
ANR	5057242	RelationalExpression	m_polling_interval > 3600		5056967	1		>			
ANR	5057243	Identifier	m_polling_interval		5056967	0					
ANR	5057244	PrimaryExpression	3600		5056967	1					
ANR	5057245	CompoundStatement		54:60:1669:1669	5056967	1					
ANR	5057246	ExpressionStatement	m_draining_per_hour = 0	121:2:3367:3390	5056967	0	True				
ANR	5057247	AssignmentExpression	m_draining_per_hour = 0		5056967	0		=			
ANR	5057248	Identifier	m_draining_per_hour		5056967	0					
ANR	5057249	PrimaryExpression	0		5056967	1					
ANR	5057250	IdentifierDeclStatement	double error_per_day = ( error_per_hour - m_draining_per_poll_hour ) * 24.0 ;	124:1:3397:3468	5056967	13	True				
ANR	5057251	IdentifierDecl	error_per_day = ( error_per_hour - m_draining_per_poll_hour ) * 24.0		5056967	0					
ANR	5057252	IdentifierDeclType	double		5056967	0					
ANR	5057253	Identifier	error_per_day		5056967	1					
ANR	5057254	AssignmentExpression	error_per_day = ( error_per_hour - m_draining_per_poll_hour ) * 24.0		5056967	2		=			
ANR	5057255	Identifier	error_per_day		5056967	0					
ANR	5057256	MultiplicativeExpression	( error_per_hour - m_draining_per_poll_hour ) * 24.0		5056967	1		*			
ANR	5057257	AdditiveExpression	error_per_hour - m_draining_per_poll_hour		5056967	0		-			
ANR	5057258	Identifier	error_per_hour		5056967	0					
ANR	5057259	Identifier	m_draining_per_poll_hour		5056967	1					
ANR	5057260	PrimaryExpression	24.0		5056967	1					
ANR	5057261	ExpressionStatement	m_draining_per_poll_day = ( int ) floor ( error_per_day + 0.5 )	125:1:3471:3528	5056967	14	True				
ANR	5057262	AssignmentExpression	m_draining_per_poll_day = ( int ) floor ( error_per_day + 0.5 )		5056967	0		=			
ANR	5057263	Identifier	m_draining_per_poll_day		5056967	0					
ANR	5057264	CastExpression	( int ) floor ( error_per_day + 0.5 )		5056967	1					
ANR	5057265	CastTarget	int		5056967	0					
ANR	5057266	CallExpression	floor ( error_per_day + 0.5 )		5056967	1					
ANR	5057267	Callee	floor		5056967	0					
ANR	5057268	Identifier	floor		5056967	0					
ANR	5057269	ArgumentList	error_per_day + 0.5		5056967	1					
ANR	5057270	Argument	error_per_day + 0.5		5056967	0					
ANR	5057271	AdditiveExpression	error_per_day + 0.5		5056967	0		+			
ANR	5057272	Identifier	error_per_day		5056967	0					
ANR	5057273	PrimaryExpression	0.5		5056967	1					
ANR	5057274	IfStatement	if ( m_draining_per_poll_day < 0 || m_polling_interval > 3600 * 24 )		5056967	15					
ANR	5057275	Condition	m_draining_per_poll_day < 0 || m_polling_interval > 3600 * 24	126:5:3535:3593	5056967	0	True				
ANR	5057276	OrExpression	m_draining_per_poll_day < 0 || m_polling_interval > 3600 * 24		5056967	0		||			
ANR	5057277	RelationalExpression	m_draining_per_poll_day < 0		5056967	0		<			
ANR	5057278	Identifier	m_draining_per_poll_day		5056967	0					
ANR	5057279	PrimaryExpression	0		5056967	1					
ANR	5057280	RelationalExpression	m_polling_interval > 3600 * 24		5056967	1		>			
ANR	5057281	Identifier	m_polling_interval		5056967	0					
ANR	5057282	MultiplicativeExpression	3600 * 24		5056967	1		*			
ANR	5057283	PrimaryExpression	3600		5056967	0					
ANR	5057284	PrimaryExpression	24		5056967	1					
ANR	5057285	CompoundStatement		60:67:1903:1903	5056967	1					
ANR	5057286	ExpressionStatement	m_draining_per_poll_day = 0	127:2:3601:3628	5056967	0	True				
ANR	5057287	AssignmentExpression	m_draining_per_poll_day = 0		5056967	0		=			
ANR	5057288	Identifier	m_draining_per_poll_day		5056967	0					
ANR	5057289	PrimaryExpression	0		5056967	1					
ANR	5057290	ExpressionStatement	"dprintf ( D_ALWAYS , ""polling interval %ds, DEFRAG_DRAINING_MACHINES_PER_HOUR = %f/hour = %d/interval + %d/hour + %d/day\\n"" , m_polling_interval , m_draining_per_hour , m_draining_per_poll , m_draining_per_poll_hour , m_draining_per_poll_day )"	129:1:3634:3870	5056967	16	True				
ANR	5057291	CallExpression	"dprintf ( D_ALWAYS , ""polling interval %ds, DEFRAG_DRAINING_MACHINES_PER_HOUR = %f/hour = %d/interval + %d/hour + %d/day\\n"" , m_polling_interval , m_draining_per_hour , m_draining_per_poll , m_draining_per_poll_hour , m_draining_per_poll_day )"		5056967	0					
ANR	5057292	Callee	dprintf		5056967	0					
ANR	5057293	Identifier	dprintf		5056967	0					
ANR	5057294	ArgumentList	D_ALWAYS		5056967	1					
ANR	5057295	Argument	D_ALWAYS		5056967	0					
ANR	5057296	Identifier	D_ALWAYS		5056967	0					
ANR	5057297	Argument	"""polling interval %ds, DEFRAG_DRAINING_MACHINES_PER_HOUR = %f/hour = %d/interval + %d/hour + %d/day\\n"""		5056967	1					
ANR	5057298	PrimaryExpression	"""polling interval %ds, DEFRAG_DRAINING_MACHINES_PER_HOUR = %f/hour = %d/interval + %d/hour + %d/day\\n"""		5056967	0					
ANR	5057299	Argument	m_polling_interval		5056967	2					
ANR	5057300	Identifier	m_polling_interval		5056967	0					
ANR	5057301	Argument	m_draining_per_hour		5056967	3					
ANR	5057302	Identifier	m_draining_per_hour		5056967	0					
ANR	5057303	Argument	m_draining_per_poll		5056967	4					
ANR	5057304	Identifier	m_draining_per_poll		5056967	0					
ANR	5057305	Argument	m_draining_per_poll_hour		5056967	5					
ANR	5057306	Identifier	m_draining_per_poll_hour		5056967	0					
ANR	5057307	Argument	m_draining_per_poll_day		5056967	6					
ANR	5057308	Identifier	m_draining_per_poll_day		5056967	0					
ANR	5057309	ExpressionStatement	"m_max_draining = param_integer ( ""DEFRAG_MAX_CONCURRENT_DRAINING"" , - 1 , - 1 )"	133:1:3874:3944	5056967	17	True				
ANR	5057310	AssignmentExpression	"m_max_draining = param_integer ( ""DEFRAG_MAX_CONCURRENT_DRAINING"" , - 1 , - 1 )"		5056967	0		=			
ANR	5057311	Identifier	m_max_draining		5056967	0					
ANR	5057312	CallExpression	"param_integer ( ""DEFRAG_MAX_CONCURRENT_DRAINING"" , - 1 , - 1 )"		5056967	1					
ANR	5057313	Callee	param_integer		5056967	0					
ANR	5057314	Identifier	param_integer		5056967	0					
ANR	5057315	ArgumentList	"""DEFRAG_MAX_CONCURRENT_DRAINING"""		5056967	1					
ANR	5057316	Argument	"""DEFRAG_MAX_CONCURRENT_DRAINING"""		5056967	0					
ANR	5057317	PrimaryExpression	"""DEFRAG_MAX_CONCURRENT_DRAINING"""		5056967	0					
ANR	5057318	Argument	- 1		5056967	1					
ANR	5057319	UnaryOperationExpression	- 1		5056967	0					
ANR	5057320	UnaryOperator	-		5056967	0					
ANR	5057321	PrimaryExpression	1		5056967	1					
ANR	5057322	Argument	- 1		5056967	2					
ANR	5057323	UnaryOperationExpression	- 1		5056967	0					
ANR	5057324	UnaryOperator	-		5056967	0					
ANR	5057325	PrimaryExpression	1		5056967	1					
ANR	5057326	ExpressionStatement	"m_max_whole_machines = param_integer ( ""DEFRAG_MAX_WHOLE_MACHINES"" , - 1 , - 1 )"	134:1:3947:4018	5056967	18	True				
ANR	5057327	AssignmentExpression	"m_max_whole_machines = param_integer ( ""DEFRAG_MAX_WHOLE_MACHINES"" , - 1 , - 1 )"		5056967	0		=			
ANR	5057328	Identifier	m_max_whole_machines		5056967	0					
ANR	5057329	CallExpression	"param_integer ( ""DEFRAG_MAX_WHOLE_MACHINES"" , - 1 , - 1 )"		5056967	1					
ANR	5057330	Callee	param_integer		5056967	0					
ANR	5057331	Identifier	param_integer		5056967	0					
ANR	5057332	ArgumentList	"""DEFRAG_MAX_WHOLE_MACHINES"""		5056967	1					
ANR	5057333	Argument	"""DEFRAG_MAX_WHOLE_MACHINES"""		5056967	0					
ANR	5057334	PrimaryExpression	"""DEFRAG_MAX_WHOLE_MACHINES"""		5056967	0					
ANR	5057335	Argument	- 1		5056967	1					
ANR	5057336	UnaryOperationExpression	- 1		5056967	0					
ANR	5057337	UnaryOperator	-		5056967	0					
ANR	5057338	PrimaryExpression	1		5056967	1					
ANR	5057339	Argument	- 1		5056967	2					
ANR	5057340	UnaryOperationExpression	- 1		5056967	0					
ANR	5057341	UnaryOperator	-		5056967	0					
ANR	5057342	PrimaryExpression	1		5056967	1					
ANR	5057343	ExpressionStatement	"ASSERT ( param ( m_defrag_requirements , ""DEFRAG_REQUIREMENTS"" ) )"	136:1:4022:4082	5056967	19	True				
ANR	5057344	CallExpression	"ASSERT ( param ( m_defrag_requirements , ""DEFRAG_REQUIREMENTS"" ) )"		5056967	0					
ANR	5057345	Callee	ASSERT		5056967	0					
ANR	5057346	Identifier	ASSERT		5056967	0					
ANR	5057347	ArgumentList	"param ( m_defrag_requirements , ""DEFRAG_REQUIREMENTS"" )"		5056967	1					
ANR	5057348	Argument	"param ( m_defrag_requirements , ""DEFRAG_REQUIREMENTS"" )"		5056967	0					
ANR	5057349	CallExpression	"param ( m_defrag_requirements , ""DEFRAG_REQUIREMENTS"" )"		5056967	0					
ANR	5057350	Callee	param		5056967	0					
ANR	5057351	Identifier	param		5056967	0					
ANR	5057352	ArgumentList	m_defrag_requirements		5056967	1					
ANR	5057353	Argument	m_defrag_requirements		5056967	0					
ANR	5057354	Identifier	m_defrag_requirements		5056967	0					
ANR	5057355	Argument	"""DEFRAG_REQUIREMENTS"""		5056967	1					
ANR	5057356	PrimaryExpression	"""DEFRAG_REQUIREMENTS"""		5056967	0					
ANR	5057357	ExpressionStatement	"validateExpr ( m_defrag_requirements . c_str ( ) , ""DEFRAG_REQUIREMENTS"" )"	137:1:4085:4153	5056967	20	True				
ANR	5057358	CallExpression	"validateExpr ( m_defrag_requirements . c_str ( ) , ""DEFRAG_REQUIREMENTS"" )"		5056967	0					
ANR	5057359	Callee	validateExpr		5056967	0					
ANR	5057360	Identifier	validateExpr		5056967	0					
ANR	5057361	ArgumentList	m_defrag_requirements . c_str ( )		5056967	1					
ANR	5057362	Argument	m_defrag_requirements . c_str ( )		5056967	0					
ANR	5057363	CallExpression	m_defrag_requirements . c_str ( )		5056967	0					
ANR	5057364	Callee	m_defrag_requirements . c_str		5056967	0					
ANR	5057365	MemberAccess	m_defrag_requirements . c_str		5056967	0					
ANR	5057366	Identifier	m_defrag_requirements		5056967	0					
ANR	5057367	Identifier	c_str		5056967	1					
ANR	5057368	ArgumentList			5056967	1					
ANR	5057369	Argument	"""DEFRAG_REQUIREMENTS"""		5056967	1					
ANR	5057370	PrimaryExpression	"""DEFRAG_REQUIREMENTS"""		5056967	0					
ANR	5057371	ExpressionStatement	"ASSERT ( param ( m_whole_machine_expr , ""DEFRAG_WHOLE_MACHINE_EXPR"" ) )"	139:1:4157:4222	5056967	21	True				
ANR	5057372	CallExpression	"ASSERT ( param ( m_whole_machine_expr , ""DEFRAG_WHOLE_MACHINE_EXPR"" ) )"		5056967	0					
ANR	5057373	Callee	ASSERT		5056967	0					
ANR	5057374	Identifier	ASSERT		5056967	0					
ANR	5057375	ArgumentList	"param ( m_whole_machine_expr , ""DEFRAG_WHOLE_MACHINE_EXPR"" )"		5056967	1					
ANR	5057376	Argument	"param ( m_whole_machine_expr , ""DEFRAG_WHOLE_MACHINE_EXPR"" )"		5056967	0					
ANR	5057377	CallExpression	"param ( m_whole_machine_expr , ""DEFRAG_WHOLE_MACHINE_EXPR"" )"		5056967	0					
ANR	5057378	Callee	param		5056967	0					
ANR	5057379	Identifier	param		5056967	0					
ANR	5057380	ArgumentList	m_whole_machine_expr		5056967	1					
ANR	5057381	Argument	m_whole_machine_expr		5056967	0					
ANR	5057382	Identifier	m_whole_machine_expr		5056967	0					
ANR	5057383	Argument	"""DEFRAG_WHOLE_MACHINE_EXPR"""		5056967	1					
ANR	5057384	PrimaryExpression	"""DEFRAG_WHOLE_MACHINE_EXPR"""		5056967	0					
ANR	5057385	ExpressionStatement	"validateExpr ( m_whole_machine_expr . c_str ( ) , ""DEFRAG_WHOLE_MACHINE_EXPR"" )"	140:1:4225:4298	5056967	22	True				
ANR	5057386	CallExpression	"validateExpr ( m_whole_machine_expr . c_str ( ) , ""DEFRAG_WHOLE_MACHINE_EXPR"" )"		5056967	0					
ANR	5057387	Callee	validateExpr		5056967	0					
ANR	5057388	Identifier	validateExpr		5056967	0					
ANR	5057389	ArgumentList	m_whole_machine_expr . c_str ( )		5056967	1					
ANR	5057390	Argument	m_whole_machine_expr . c_str ( )		5056967	0					
ANR	5057391	CallExpression	m_whole_machine_expr . c_str ( )		5056967	0					
ANR	5057392	Callee	m_whole_machine_expr . c_str		5056967	0					
ANR	5057393	MemberAccess	m_whole_machine_expr . c_str		5056967	0					
ANR	5057394	Identifier	m_whole_machine_expr		5056967	0					
ANR	5057395	Identifier	c_str		5056967	1					
ANR	5057396	ArgumentList			5056967	1					
ANR	5057397	Argument	"""DEFRAG_WHOLE_MACHINE_EXPR"""		5056967	1					
ANR	5057398	PrimaryExpression	"""DEFRAG_WHOLE_MACHINE_EXPR"""		5056967	0					
ANR	5057399	ExpressionStatement	"ASSERT ( param ( m_draining_schedule_str , ""DEFRAG_DRAINING_SCHEDULE"" ) )"	142:1:4302:4369	5056967	23	True				
ANR	5057400	CallExpression	"ASSERT ( param ( m_draining_schedule_str , ""DEFRAG_DRAINING_SCHEDULE"" ) )"		5056967	0					
ANR	5057401	Callee	ASSERT		5056967	0					
ANR	5057402	Identifier	ASSERT		5056967	0					
ANR	5057403	ArgumentList	"param ( m_draining_schedule_str , ""DEFRAG_DRAINING_SCHEDULE"" )"		5056967	1					
ANR	5057404	Argument	"param ( m_draining_schedule_str , ""DEFRAG_DRAINING_SCHEDULE"" )"		5056967	0					
ANR	5057405	CallExpression	"param ( m_draining_schedule_str , ""DEFRAG_DRAINING_SCHEDULE"" )"		5056967	0					
ANR	5057406	Callee	param		5056967	0					
ANR	5057407	Identifier	param		5056967	0					
ANR	5057408	ArgumentList	m_draining_schedule_str		5056967	1					
ANR	5057409	Argument	m_draining_schedule_str		5056967	0					
ANR	5057410	Identifier	m_draining_schedule_str		5056967	0					
ANR	5057411	Argument	"""DEFRAG_DRAINING_SCHEDULE"""		5056967	1					
ANR	5057412	PrimaryExpression	"""DEFRAG_DRAINING_SCHEDULE"""		5056967	0					
ANR	5057413	IfStatement	if ( m_draining_schedule_str . empty ( ) )		5056967	24					
ANR	5057414	Condition	m_draining_schedule_str . empty ( )	143:5:4376:4406	5056967	0	True				
ANR	5057415	CallExpression	m_draining_schedule_str . empty ( )		5056967	0					
ANR	5057416	Callee	m_draining_schedule_str . empty		5056967	0					
ANR	5057417	MemberAccess	m_draining_schedule_str . empty		5056967	0					
ANR	5057418	Identifier	m_draining_schedule_str		5056967	0					
ANR	5057419	Identifier	empty		5056967	1					
ANR	5057420	ArgumentList			5056967	1					
ANR	5057421	CompoundStatement		77:39:2716:2716	5056967	1					
ANR	5057422	ExpressionStatement	m_draining_schedule = DRAIN_GRACEFUL	144:2:4414:4450	5056967	0	True				
ANR	5057423	AssignmentExpression	m_draining_schedule = DRAIN_GRACEFUL		5056967	0		=			
ANR	5057424	Identifier	m_draining_schedule		5056967	0					
ANR	5057425	Identifier	DRAIN_GRACEFUL		5056967	1					
ANR	5057426	ExpressionStatement	"m_draining_schedule_str = ""graceful"""	145:2:4454:4490	5056967	1	True				
ANR	5057427	AssignmentExpression	"m_draining_schedule_str = ""graceful"""		5056967	0		=			
ANR	5057428	Identifier	m_draining_schedule_str		5056967	0					
ANR	5057429	PrimaryExpression	"""graceful"""		5056967	1					
ANR	5057430	ElseStatement	else		5056967	0					
ANR	5057431	CompoundStatement		81:6:2807:2807	5056967	0					
ANR	5057432	ExpressionStatement	m_draining_schedule = getDrainingScheduleNum ( m_draining_schedule_str . c_str ( ) )	148:2:4505:4582	5056967	0	True				
ANR	5057433	AssignmentExpression	m_draining_schedule = getDrainingScheduleNum ( m_draining_schedule_str . c_str ( ) )		5056967	0		=			
ANR	5057434	Identifier	m_draining_schedule		5056967	0					
ANR	5057435	CallExpression	getDrainingScheduleNum ( m_draining_schedule_str . c_str ( ) )		5056967	1					
ANR	5057436	Callee	getDrainingScheduleNum		5056967	0					
ANR	5057437	Identifier	getDrainingScheduleNum		5056967	0					
ANR	5057438	ArgumentList	m_draining_schedule_str . c_str ( )		5056967	1					
ANR	5057439	Argument	m_draining_schedule_str . c_str ( )		5056967	0					
ANR	5057440	CallExpression	m_draining_schedule_str . c_str ( )		5056967	0					
ANR	5057441	Callee	m_draining_schedule_str . c_str		5056967	0					
ANR	5057442	MemberAccess	m_draining_schedule_str . c_str		5056967	0					
ANR	5057443	Identifier	m_draining_schedule_str		5056967	0					
ANR	5057444	Identifier	c_str		5056967	1					
ANR	5057445	ArgumentList			5056967	1					
ANR	5057446	IfStatement	if ( m_draining_schedule < 0 )		5056967	1					
ANR	5057447	Condition	m_draining_schedule < 0	149:6:4590:4612	5056967	0	True				
ANR	5057448	RelationalExpression	m_draining_schedule < 0		5056967	0		<			
ANR	5057449	Identifier	m_draining_schedule		5056967	0					
ANR	5057450	PrimaryExpression	0		5056967	1					
ANR	5057451	CompoundStatement		83:32:2922:2922	5056967	1					
ANR	5057452	ExpressionStatement	"EXCEPT ( ""Invalid draining schedule: %s\\n"" , m_draining_schedule_str . c_str ( ) )"	150:3:4621:4694	5056967	0	True				
ANR	5057453	CallExpression	"EXCEPT ( ""Invalid draining schedule: %s\\n"" , m_draining_schedule_str . c_str ( ) )"		5056967	0					
ANR	5057454	Callee	EXCEPT		5056967	0					
ANR	5057455	Identifier	EXCEPT		5056967	0					
ANR	5057456	ArgumentList	"""Invalid draining schedule: %s\\n"""		5056967	1					
ANR	5057457	Argument	"""Invalid draining schedule: %s\\n"""		5056967	0					
ANR	5057458	PrimaryExpression	"""Invalid draining schedule: %s\\n"""		5056967	0					
ANR	5057459	Argument	m_draining_schedule_str . c_str ( )		5056967	1					
ANR	5057460	CallExpression	m_draining_schedule_str . c_str ( )		5056967	0					
ANR	5057461	Callee	m_draining_schedule_str . c_str		5056967	0					
ANR	5057462	MemberAccess	m_draining_schedule_str . c_str		5056967	0					
ANR	5057463	Identifier	m_draining_schedule_str		5056967	0					
ANR	5057464	Identifier	c_str		5056967	1					
ANR	5057465	ArgumentList			5056967	1					
ANR	5057466	IdentifierDeclStatement	MyString rank ;	154:1:4705:4718	5056967	25	True				
ANR	5057467	IdentifierDecl	rank		5056967	0					
ANR	5057468	IdentifierDeclType	MyString		5056967	0					
ANR	5057469	Identifier	rank		5056967	1					
ANR	5057470	ExpressionStatement	"param ( rank , ""DEFRAG_RANK"" )"	155:1:4721:4746	5056967	26	True				
ANR	5057471	CallExpression	"param ( rank , ""DEFRAG_RANK"" )"		5056967	0					
ANR	5057472	Callee	param		5056967	0					
ANR	5057473	Identifier	param		5056967	0					
ANR	5057474	ArgumentList	rank		5056967	1					
ANR	5057475	Argument	rank		5056967	0					
ANR	5057476	Identifier	rank		5056967	0					
ANR	5057477	Argument	"""DEFRAG_RANK"""		5056967	1					
ANR	5057478	PrimaryExpression	"""DEFRAG_RANK"""		5056967	0					
ANR	5057479	IfStatement	if ( rank . IsEmpty ( ) )		5056967	27					
ANR	5057480	Condition	rank . IsEmpty ( )	156:5:4753:4766	5056967	0	True				
ANR	5057481	CallExpression	rank . IsEmpty ( )		5056967	0					
ANR	5057482	Callee	rank . IsEmpty		5056967	0					
ANR	5057483	MemberAccess	rank . IsEmpty		5056967	0					
ANR	5057484	Identifier	rank		5056967	0					
ANR	5057485	Identifier	IsEmpty		5056967	1					
ANR	5057486	ArgumentList			5056967	1					
ANR	5057487	CompoundStatement		90:22:3076:3076	5056967	1					
ANR	5057488	ExpressionStatement	m_rank_ad . Delete ( ATTR_RANK )	157:2:4774:4801	5056967	0	True				
ANR	5057489	CallExpression	m_rank_ad . Delete ( ATTR_RANK )		5056967	0					
ANR	5057490	Callee	m_rank_ad . Delete		5056967	0					
ANR	5057491	MemberAccess	m_rank_ad . Delete		5056967	0					
ANR	5057492	Identifier	m_rank_ad		5056967	0					
ANR	5057493	Identifier	Delete		5056967	1					
ANR	5057494	ArgumentList	ATTR_RANK		5056967	1					
ANR	5057495	Argument	ATTR_RANK		5056967	0					
ANR	5057496	Identifier	ATTR_RANK		5056967	0					
ANR	5057497	ElseStatement	else		5056967	0					
ANR	5057498	CompoundStatement		93:6:3118:3118	5056967	0					
ANR	5057499	IfStatement	"if ( ! m_rank_ad . AssignExpr ( ATTR_RANK , rank . Value ( ) ) )"		5056967	0					
ANR	5057500	Condition	"! m_rank_ad . AssignExpr ( ATTR_RANK , rank . Value ( ) )"	160:6:4820:4864	5056967	0	True				
ANR	5057501	UnaryOperationExpression	"! m_rank_ad . AssignExpr ( ATTR_RANK , rank . Value ( ) )"		5056967	0					
ANR	5057502	UnaryOperator	!		5056967	0					
ANR	5057503	CallExpression	"m_rank_ad . AssignExpr ( ATTR_RANK , rank . Value ( ) )"		5056967	1					
ANR	5057504	Callee	m_rank_ad . AssignExpr		5056967	0					
ANR	5057505	MemberAccess	m_rank_ad . AssignExpr		5056967	0					
ANR	5057506	Identifier	m_rank_ad		5056967	0					
ANR	5057507	Identifier	AssignExpr		5056967	1					
ANR	5057508	ArgumentList	ATTR_RANK		5056967	1					
ANR	5057509	Argument	ATTR_RANK		5056967	0					
ANR	5057510	Identifier	ATTR_RANK		5056967	0					
ANR	5057511	Argument	rank . Value ( )		5056967	1					
ANR	5057512	CallExpression	rank . Value ( )		5056967	0					
ANR	5057513	Callee	rank . Value		5056967	0					
ANR	5057514	MemberAccess	rank . Value		5056967	0					
ANR	5057515	Identifier	rank		5056967	0					
ANR	5057516	Identifier	Value		5056967	1					
ANR	5057517	ArgumentList			5056967	1					
ANR	5057518	CompoundStatement		94:54:3174:3174	5056967	1					
ANR	5057519	ExpressionStatement	"EXCEPT ( ""Invalid expression for DEFRAG_RANK: %s\\n"" , rank . Value ( ) )"	161:3:4873:4944	5056967	0	True				
ANR	5057520	CallExpression	"EXCEPT ( ""Invalid expression for DEFRAG_RANK: %s\\n"" , rank . Value ( ) )"		5056967	0					
ANR	5057521	Callee	EXCEPT		5056967	0					
ANR	5057522	Identifier	EXCEPT		5056967	0					
ANR	5057523	ArgumentList	"""Invalid expression for DEFRAG_RANK: %s\\n"""		5056967	1					
ANR	5057524	Argument	"""Invalid expression for DEFRAG_RANK: %s\\n"""		5056967	0					
ANR	5057525	PrimaryExpression	"""Invalid expression for DEFRAG_RANK: %s\\n"""		5056967	0					
ANR	5057526	Argument	rank . Value ( )		5056967	1					
ANR	5057527	CallExpression	rank . Value ( )		5056967	0					
ANR	5057528	Callee	rank . Value		5056967	0					
ANR	5057529	MemberAccess	rank . Value		5056967	0					
ANR	5057530	Identifier	rank		5056967	0					
ANR	5057531	Identifier	Value		5056967	1					
ANR	5057532	ArgumentList			5056967	1					
ANR	5057533	IdentifierDeclStatement	"int update_interval = param_integer ( ""DEFRAG_UPDATE_INTERVAL"" , 600 ) ;"	166:1:4955:5021	5056967	28	True				
ANR	5057534	IdentifierDecl	"update_interval = param_integer ( ""DEFRAG_UPDATE_INTERVAL"" , 600 )"		5056967	0					
ANR	5057535	IdentifierDeclType	int		5056967	0					
ANR	5057536	Identifier	update_interval		5056967	1					
ANR	5057537	AssignmentExpression	"update_interval = param_integer ( ""DEFRAG_UPDATE_INTERVAL"" , 600 )"		5056967	2		=			
ANR	5057538	Identifier	update_interval		5056967	0					
ANR	5057539	CallExpression	"param_integer ( ""DEFRAG_UPDATE_INTERVAL"" , 600 )"		5056967	1					
ANR	5057540	Callee	param_integer		5056967	0					
ANR	5057541	Identifier	param_integer		5056967	0					
ANR	5057542	ArgumentList	"""DEFRAG_UPDATE_INTERVAL"""		5056967	1					
ANR	5057543	Argument	"""DEFRAG_UPDATE_INTERVAL"""		5056967	0					
ANR	5057544	PrimaryExpression	"""DEFRAG_UPDATE_INTERVAL"""		5056967	0					
ANR	5057545	Argument	600		5056967	1					
ANR	5057546	PrimaryExpression	600		5056967	0					
ANR	5057547	IfStatement	if ( m_public_ad_update_interval != update_interval )		5056967	29					
ANR	5057548	Condition	m_public_ad_update_interval != update_interval	167:4:5027:5072	5056967	0	True				
ANR	5057549	EqualityExpression	m_public_ad_update_interval != update_interval		5056967	0		!=			
ANR	5057550	Identifier	m_public_ad_update_interval		5056967	0					
ANR	5057551	Identifier	update_interval		5056967	1					
ANR	5057552	CompoundStatement		101:52:3381:3381	5056967	1					
ANR	5057553	ExpressionStatement	m_public_ad_update_interval = update_interval	168:2:5079:5124	5056967	0	True				
ANR	5057554	AssignmentExpression	m_public_ad_update_interval = update_interval		5056967	0		=			
ANR	5057555	Identifier	m_public_ad_update_interval		5056967	0					
ANR	5057556	Identifier	update_interval		5056967	1					
ANR	5057557	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Setting update interval to %d\\n"" , m_public_ad_update_interval )"	170:2:5129:5216	5056967	1	True				
ANR	5057558	CallExpression	"dprintf ( D_FULLDEBUG , ""Setting update interval to %d\\n"" , m_public_ad_update_interval )"		5056967	0					
ANR	5057559	Callee	dprintf		5056967	0					
ANR	5057560	Identifier	dprintf		5056967	0					
ANR	5057561	ArgumentList	D_FULLDEBUG		5056967	1					
ANR	5057562	Argument	D_FULLDEBUG		5056967	0					
ANR	5057563	Identifier	D_FULLDEBUG		5056967	0					
ANR	5057564	Argument	"""Setting update interval to %d\\n"""		5056967	1					
ANR	5057565	PrimaryExpression	"""Setting update interval to %d\\n"""		5056967	0					
ANR	5057566	Argument	m_public_ad_update_interval		5056967	2					
ANR	5057567	Identifier	m_public_ad_update_interval		5056967	0					
ANR	5057568	IfStatement	if ( m_public_ad_update_timer >= 0 )		5056967	2					
ANR	5057569	Condition	m_public_ad_update_timer >= 0	173:5:5224:5252	5056967	0	True				
ANR	5057570	RelationalExpression	m_public_ad_update_timer >= 0		5056967	0		>=			
ANR	5057571	Identifier	m_public_ad_update_timer		5056967	0					
ANR	5057572	PrimaryExpression	0		5056967	1					
ANR	5057573	CompoundStatement		107:36:3561:3561	5056967	1					
ANR	5057574	ExpressionStatement	"daemonCore -> Reset_Timer_Period ( m_public_ad_update_timer , m_public_ad_update_interval )"	174:3:5260:5354	5056967	0	True				
ANR	5057575	CallExpression	"daemonCore -> Reset_Timer_Period ( m_public_ad_update_timer , m_public_ad_update_interval )"		5056967	0					
ANR	5057576	Callee	daemonCore -> Reset_Timer_Period		5056967	0					
ANR	5057577	PtrMemberAccess	daemonCore -> Reset_Timer_Period		5056967	0					
ANR	5057578	Identifier	daemonCore		5056967	0					
ANR	5057579	Identifier	Reset_Timer_Period		5056967	1					
ANR	5057580	ArgumentList	m_public_ad_update_timer		5056967	1					
ANR	5057581	Argument	m_public_ad_update_timer		5056967	0					
ANR	5057582	Identifier	m_public_ad_update_timer		5056967	0					
ANR	5057583	Argument	m_public_ad_update_interval		5056967	1					
ANR	5057584	Identifier	m_public_ad_update_interval		5056967	0					
ANR	5057585	ElseStatement	else		5056967	0					
ANR	5057586	CompoundStatement		112:7:3673:3673	5056967	0					
ANR	5057587	ExpressionStatement	"m_public_ad_update_timer = daemonCore -> Register_Timer ( 0 , m_public_ad_update_interval , ( TimerHandlercpp ) & Defrag :: updateCollector , ""Defrag::updateCollector"" , this )"	179:3:5372:5554	5056967	0	True				
ANR	5057588	AssignmentExpression	"m_public_ad_update_timer = daemonCore -> Register_Timer ( 0 , m_public_ad_update_interval , ( TimerHandlercpp ) & Defrag :: updateCollector , ""Defrag::updateCollector"" , this )"		5056967	0		=			
ANR	5057589	Identifier	m_public_ad_update_timer		5056967	0					
ANR	5057590	CallExpression	"daemonCore -> Register_Timer ( 0 , m_public_ad_update_interval , ( TimerHandlercpp ) & Defrag :: updateCollector , ""Defrag::updateCollector"" , this )"		5056967	1					
ANR	5057591	Callee	daemonCore -> Register_Timer		5056967	0					
ANR	5057592	PtrMemberAccess	daemonCore -> Register_Timer		5056967	0					
ANR	5057593	Identifier	daemonCore		5056967	0					
ANR	5057594	Identifier	Register_Timer		5056967	1					
ANR	5057595	ArgumentList	0		5056967	1					
ANR	5057596	Argument	0		5056967	0					
ANR	5057597	PrimaryExpression	0		5056967	0					
ANR	5057598	Argument	m_public_ad_update_interval		5056967	1					
ANR	5057599	Identifier	m_public_ad_update_interval		5056967	0					
ANR	5057600	Argument	( TimerHandlercpp ) & Defrag :: updateCollector		5056967	2					
ANR	5057601	CastExpression	( TimerHandlercpp ) & Defrag :: updateCollector		5056967	0					
ANR	5057602	CastTarget	TimerHandlercpp		5056967	0					
ANR	5057603	UnaryOperationExpression	& Defrag :: updateCollector		5056967	1					
ANR	5057604	UnaryOperator	&		5056967	0					
ANR	5057605	Identifier	Defrag :: updateCollector		5056967	1					
ANR	5057606	Argument	"""Defrag::updateCollector"""		5056967	3					
ANR	5057607	PrimaryExpression	"""Defrag::updateCollector"""		5056967	0					
ANR	5057608	Argument	this		5056967	4					
ANR	5057609	Identifier	this		5056967	0					
ANR	5057610	ExpressionStatement	"param ( m_defrag_name , ""DEFRAG_NAME"" )"	188:1:5565:5599	5056967	30	True				
ANR	5057611	CallExpression	"param ( m_defrag_name , ""DEFRAG_NAME"" )"		5056967	0					
ANR	5057612	Callee	param		5056967	0					
ANR	5057613	Identifier	param		5056967	0					
ANR	5057614	ArgumentList	m_defrag_name		5056967	1					
ANR	5057615	Argument	m_defrag_name		5056967	0					
ANR	5057616	Identifier	m_defrag_name		5056967	0					
ANR	5057617	Argument	"""DEFRAG_NAME"""		5056967	1					
ANR	5057618	PrimaryExpression	"""DEFRAG_NAME"""		5056967	0					
ANR	5057619	IdentifierDeclStatement	int stats_quantum = m_polling_interval ;	190:1:5603:5641	5056967	31	True				
ANR	5057620	IdentifierDecl	stats_quantum = m_polling_interval		5056967	0					
ANR	5057621	IdentifierDeclType	int		5056967	0					
ANR	5057622	Identifier	stats_quantum		5056967	1					
ANR	5057623	AssignmentExpression	stats_quantum = m_polling_interval		5056967	2		=			
ANR	5057624	Identifier	m_polling_interval		5056967	0					
ANR	5057625	Identifier	m_polling_interval		5056967	1					
ANR	5057626	IdentifierDeclStatement	int stats_window = 10 * stats_quantum ;	191:1:5644:5679	5056967	32	True				
ANR	5057627	IdentifierDecl	stats_window = 10 * stats_quantum		5056967	0					
ANR	5057628	IdentifierDeclType	int		5056967	0					
ANR	5057629	Identifier	stats_window		5056967	1					
ANR	5057630	AssignmentExpression	stats_window = 10 * stats_quantum		5056967	2		=			
ANR	5057631	Identifier	stats_window		5056967	0					
ANR	5057632	MultiplicativeExpression	10 * stats_quantum		5056967	1		*			
ANR	5057633	PrimaryExpression	10		5056967	0					
ANR	5057634	Identifier	stats_quantum		5056967	1					
ANR	5057635	ExpressionStatement	"m_stats . SetWindowSize ( stats_window , stats_quantum )"	192:1:5682:5731	5056967	33	True				
ANR	5057636	CallExpression	"m_stats . SetWindowSize ( stats_window , stats_quantum )"		5056967	0					
ANR	5057637	Callee	m_stats . SetWindowSize		5056967	0					
ANR	5057638	MemberAccess	m_stats . SetWindowSize		5056967	0					
ANR	5057639	Identifier	m_stats		5056967	0					
ANR	5057640	Identifier	SetWindowSize		5056967	1					
ANR	5057641	ArgumentList	stats_window		5056967	1					
ANR	5057642	Argument	stats_window		5056967	0					
ANR	5057643	Identifier	stats_window		5056967	0					
ANR	5057644	Argument	stats_quantum		5056967	1					
ANR	5057645	Identifier	stats_quantum		5056967	0					
ANR	5057646	ReturnType	void		5056967	1					
ANR	5057647	Identifier	Defrag :: config		5056967	2					
ANR	5057648	ParameterList			5056967	3					
ANR	5057649	CFGEntryNode	ENTRY		5056967		True				
ANR	5057650	CFGExitNode	EXIT		5056967		True				
ANR	5057651	Symbol	m_draining_schedule_str . c_str		5056967						
ANR	5057652	Symbol	param_double		5056967						
ANR	5057653	Symbol	m_rank_ad . AssignExpr		5056967						
ANR	5057654	Symbol	stats_quantum		5056967						
ANR	5057655	Symbol	m_draining_per_poll_hour		5056967						
ANR	5057656	Symbol	m_state_file		5056967						
ANR	5057657	Symbol	first_time		5056967						
ANR	5057658	Symbol	error_per_hour		5056967						
ANR	5057659	Symbol	rank		5056967						
ANR	5057660	Symbol	rank . Value		5056967						
ANR	5057661	Symbol	& Defrag :: updateCollector		5056967						
ANR	5057662	Symbol	NULL		5056967						
ANR	5057663	Symbol	m_draining_schedule		5056967						
ANR	5057664	Symbol	m_public_ad_update_interval		5056967						
ANR	5057665	Symbol	& Defrag :: poll		5056967						
ANR	5057666	Symbol	ATTR_RANK		5056967						
ANR	5057667	Symbol	this		5056967						
ANR	5057668	Symbol	D_FULLDEBUG		5056967						
ANR	5057669	Symbol	old_polling_interval		5056967						
ANR	5057670	Symbol	DRAIN_GRACEFUL		5056967						
ANR	5057671	Symbol	* daemonCore		5056967						
ANR	5057672	Symbol	update_interval		5056967						
ANR	5057673	Symbol	daemonCore -> Register_Timer		5056967						
ANR	5057674	Symbol	param_integer		5056967						
ANR	5057675	Symbol	m_rank_ad		5056967						
ANR	5057676	Symbol	getDrainingScheduleNum		5056967						
ANR	5057677	Symbol	m_defrag_requirements . c_str		5056967						
ANR	5057678	Symbol	m_draining_per_poll		5056967						
ANR	5057679	Symbol	error_per_day		5056967						
ANR	5057680	Symbol	param		5056967						
ANR	5057681	Symbol	rate		5056967						
ANR	5057682	Symbol	m_last_poll		5056967						
ANR	5057683	Symbol	m_polling_interval		5056967						
ANR	5057684	Symbol	m_draining_per_poll_day		5056967						
ANR	5057685	Symbol	daemonCore		5056967						
ANR	5057686	Symbol	now		5056967						
ANR	5057687	Symbol	m_whole_machine_expr . c_str		5056967						
ANR	5057688	Symbol	m_polling_timer		5056967						
ANR	5057689	Symbol	floor		5056967						
ANR	5057690	Symbol	m_max_draining		5056967						
ANR	5057691	Symbol	m_draining_schedule_str		5056967						
ANR	5057692	Symbol	m_stats		5056967						
ANR	5057693	Symbol	rank . IsEmpty		5056967						
ANR	5057694	Symbol	D_ALWAYS		5056967						
ANR	5057695	Symbol	m_defrag_requirements		5056967						
ANR	5057696	Symbol	m_draining_schedule_str . empty		5056967						
ANR	5057697	Symbol	m_public_ad_update_timer		5056967						
ANR	5057698	Symbol	m_draining_per_hour		5056967						
ANR	5057699	Symbol	m_max_whole_machines		5056967						
ANR	5057700	Symbol	m_whole_machine_expr		5056967						
ANR	5057701	Symbol	stats_window		5056967						
ANR	5057702	Symbol	m_defrag_name		5056967						
ANR	5057703	Symbol	time		5056967						
ANR	5057704	Function	Defrag :: stop	195:0:5736:5861							
ANR	5057705	FunctionDef	Defrag :: stop ()		5057704	0					
ANR	5057706	CompoundStatement		196:0:5756:5861	5057704	0					
ANR	5057707	IfStatement	if ( m_polling_timer != - 1 )		5057704	0					
ANR	5057708	Condition	m_polling_timer != - 1	197:5:5763:5783	5057704	0	True				
ANR	5057709	EqualityExpression	m_polling_timer != - 1		5057704	0		!=			
ANR	5057710	Identifier	m_polling_timer		5057704	0					
ANR	5057711	UnaryOperationExpression	- 1		5057704	1					
ANR	5057712	UnaryOperator	-		5057704	0					
ANR	5057713	PrimaryExpression	1		5057704	1					
ANR	5057714	CompoundStatement		2:29:30:30	5057704	1					
ANR	5057715	ExpressionStatement	daemonCore -> Cancel_Timer ( m_polling_timer )	198:2:5791:5832	5057704	0	True				
ANR	5057716	CallExpression	daemonCore -> Cancel_Timer ( m_polling_timer )		5057704	0					
ANR	5057717	Callee	daemonCore -> Cancel_Timer		5057704	0					
ANR	5057718	PtrMemberAccess	daemonCore -> Cancel_Timer		5057704	0					
ANR	5057719	Identifier	daemonCore		5057704	0					
ANR	5057720	Identifier	Cancel_Timer		5057704	1					
ANR	5057721	ArgumentList	m_polling_timer		5057704	1					
ANR	5057722	Argument	m_polling_timer		5057704	0					
ANR	5057723	Identifier	m_polling_timer		5057704	0					
ANR	5057724	ExpressionStatement	m_polling_timer = - 1	199:2:5836:5856	5057704	1	True				
ANR	5057725	AssignmentExpression	m_polling_timer = - 1		5057704	0		=			
ANR	5057726	Identifier	m_polling_timer		5057704	0					
ANR	5057727	UnaryOperationExpression	- 1		5057704	1					
ANR	5057728	UnaryOperator	-		5057704	0					
ANR	5057729	PrimaryExpression	1		5057704	1					
ANR	5057730	ReturnType	void		5057704	1					
ANR	5057731	Identifier	Defrag :: stop		5057704	2					
ANR	5057732	ParameterList			5057704	3					
ANR	5057733	CFGEntryNode	ENTRY		5057704		True				
ANR	5057734	CFGExitNode	EXIT		5057704		True				
ANR	5057735	Symbol	daemonCore		5057704						
ANR	5057736	Symbol	m_polling_timer		5057704						
ANR	5057737	Function	StartdSortFunc	203:0:5864:6112							
ANR	5057738	FunctionDef	"StartdSortFunc (ClassAd * ad1 , ClassAd * ad2 , void * data)"		5057737	0					
ANR	5057739	CompoundStatement		204:0:5928:6112	5057737	0					
ANR	5057740	IdentifierDeclStatement	ClassAd * rank_ad = ( ClassAd * ) data ;	205:1:5931:5965	5057737	0	True				
ANR	5057741	IdentifierDecl	* rank_ad = ( ClassAd * ) data		5057737	0					
ANR	5057742	IdentifierDeclType	ClassAd *		5057737	0					
ANR	5057743	Identifier	rank_ad		5057737	1					
ANR	5057744	AssignmentExpression	* rank_ad = ( ClassAd * ) data		5057737	2		=			
ANR	5057745	Identifier	rank_ad		5057737	0					
ANR	5057746	CastExpression	( ClassAd * ) data		5057737	1					
ANR	5057747	CastTarget	ClassAd *		5057737	0					
ANR	5057748	Identifier	data		5057737	1					
ANR	5057749	IdentifierDeclStatement	float rank1 = 0 ;	207:1:5969:5984	5057737	1	True				
ANR	5057750	IdentifierDecl	rank1 = 0		5057737	0					
ANR	5057751	IdentifierDeclType	float		5057737	0					
ANR	5057752	Identifier	rank1		5057737	1					
ANR	5057753	AssignmentExpression	rank1 = 0		5057737	2		=			
ANR	5057754	Identifier	rank1		5057737	0					
ANR	5057755	PrimaryExpression	0		5057737	1					
ANR	5057756	IdentifierDeclStatement	float rank2 = 0 ;	208:1:5987:6002	5057737	2	True				
ANR	5057757	IdentifierDecl	rank2 = 0		5057737	0					
ANR	5057758	IdentifierDeclType	float		5057737	0					
ANR	5057759	Identifier	rank2		5057737	1					
ANR	5057760	AssignmentExpression	rank2 = 0		5057737	2		=			
ANR	5057761	Identifier	rank2		5057737	0					
ANR	5057762	PrimaryExpression	0		5057737	1					
ANR	5057763	ExpressionStatement	"rank_ad -> EvalFloat ( ATTR_RANK , ad1 , rank1 )"	209:1:6005:6044	5057737	3	True				
ANR	5057764	CallExpression	"rank_ad -> EvalFloat ( ATTR_RANK , ad1 , rank1 )"		5057737	0					
ANR	5057765	Callee	rank_ad -> EvalFloat		5057737	0					
ANR	5057766	PtrMemberAccess	rank_ad -> EvalFloat		5057737	0					
ANR	5057767	Identifier	rank_ad		5057737	0					
ANR	5057768	Identifier	EvalFloat		5057737	1					
ANR	5057769	ArgumentList	ATTR_RANK		5057737	1					
ANR	5057770	Argument	ATTR_RANK		5057737	0					
ANR	5057771	Identifier	ATTR_RANK		5057737	0					
ANR	5057772	Argument	ad1		5057737	1					
ANR	5057773	Identifier	ad1		5057737	0					
ANR	5057774	Argument	rank1		5057737	2					
ANR	5057775	Identifier	rank1		5057737	0					
ANR	5057776	ExpressionStatement	"rank_ad -> EvalFloat ( ATTR_RANK , ad2 , rank2 )"	210:1:6047:6086	5057737	4	True				
ANR	5057777	CallExpression	"rank_ad -> EvalFloat ( ATTR_RANK , ad2 , rank2 )"		5057737	0					
ANR	5057778	Callee	rank_ad -> EvalFloat		5057737	0					
ANR	5057779	PtrMemberAccess	rank_ad -> EvalFloat		5057737	0					
ANR	5057780	Identifier	rank_ad		5057737	0					
ANR	5057781	Identifier	EvalFloat		5057737	1					
ANR	5057782	ArgumentList	ATTR_RANK		5057737	1					
ANR	5057783	Argument	ATTR_RANK		5057737	0					
ANR	5057784	Identifier	ATTR_RANK		5057737	0					
ANR	5057785	Argument	ad2		5057737	1					
ANR	5057786	Identifier	ad2		5057737	0					
ANR	5057787	Argument	rank2		5057737	2					
ANR	5057788	Identifier	rank2		5057737	0					
ANR	5057789	ReturnStatement	return rank1 > rank2 ;	212:1:6090:6110	5057737	5	True				
ANR	5057790	RelationalExpression	rank1 > rank2		5057737	0		>			
ANR	5057791	Identifier	rank1		5057737	0					
ANR	5057792	Identifier	rank2		5057737	1					
ANR	5057793	ReturnType	static int		5057737	1					
ANR	5057794	Identifier	StartdSortFunc		5057737	2					
ANR	5057795	ParameterList	"ClassAd * ad1 , ClassAd * ad2 , void * data"		5057737	3					
ANR	5057796	Parameter	ClassAd * ad1	203:26:5890:5901	5057737	0	True				
ANR	5057797	ParameterType	ClassAd *		5057737	0					
ANR	5057798	Identifier	ad1		5057737	1					
ANR	5057799	Parameter	ClassAd * ad2	203:39:5903:5914	5057737	1	True				
ANR	5057800	ParameterType	ClassAd *		5057737	0					
ANR	5057801	Identifier	ad2		5057737	1					
ANR	5057802	Parameter	void * data	203:52:5916:5925	5057737	2	True				
ANR	5057803	ParameterType	void *		5057737	0					
ANR	5057804	Identifier	data		5057737	1					
ANR	5057805	CFGEntryNode	ENTRY		5057737		True				
ANR	5057806	CFGExitNode	EXIT		5057737		True				
ANR	5057807	Symbol	rank1		5057737						
ANR	5057808	Symbol	rank2		5057737						
ANR	5057809	Symbol	data		5057737						
ANR	5057810	Symbol	ATTR_RANK		5057737						
ANR	5057811	Symbol	rank_ad		5057737						
ANR	5057812	Symbol	ad2		5057737						
ANR	5057813	Symbol	ad1		5057737						
ANR	5057814	Function	Defrag :: validateExpr	215:0:6115:6420							
ANR	5057815	FunctionDef	"Defrag :: validateExpr (char const * constraint , char const * constraint_source)"		5057814	0					
ANR	5057816	CompoundStatement		216:0:6195:6420	5057814	0					
ANR	5057817	IdentifierDeclStatement	ExprTree * requirements = NULL ;	217:1:6198:6227	5057814	0	True				
ANR	5057818	IdentifierDecl	* requirements = NULL		5057814	0					
ANR	5057819	IdentifierDeclType	ExprTree *		5057814	0					
ANR	5057820	Identifier	requirements		5057814	1					
ANR	5057821	AssignmentExpression	* requirements = NULL		5057814	2		=			
ANR	5057822	Identifier	NULL		5057814	0					
ANR	5057823	Identifier	NULL		5057814	1					
ANR	5057824	IfStatement	"if ( ParseClassAdRvalExpr ( constraint , requirements ) != 0 || requirements == NULL )"		5057814	1					
ANR	5057825	Condition	"ParseClassAdRvalExpr ( constraint , requirements ) != 0 || requirements == NULL"	219:5:6235:6307	5057814	0	True				
ANR	5057826	OrExpression	"ParseClassAdRvalExpr ( constraint , requirements ) != 0 || requirements == NULL"		5057814	0		||			
ANR	5057827	EqualityExpression	"ParseClassAdRvalExpr ( constraint , requirements ) != 0"		5057814	0		!=			
ANR	5057828	CallExpression	"ParseClassAdRvalExpr ( constraint , requirements )"		5057814	0					
ANR	5057829	Callee	ParseClassAdRvalExpr		5057814	0					
ANR	5057830	Identifier	ParseClassAdRvalExpr		5057814	0					
ANR	5057831	ArgumentList	constraint		5057814	1					
ANR	5057832	Argument	constraint		5057814	0					
ANR	5057833	Identifier	constraint		5057814	0					
ANR	5057834	Argument	requirements		5057814	1					
ANR	5057835	Identifier	requirements		5057814	0					
ANR	5057836	PrimaryExpression	0		5057814	1					
ANR	5057837	EqualityExpression	requirements == NULL		5057814	1		==			
ANR	5057838	Identifier	requirements		5057814	0					
ANR	5057839	Identifier	NULL		5057814	1					
ANR	5057840	CompoundStatement		5:1:116:116	5057814	1					
ANR	5057841	ExpressionStatement	"EXCEPT ( ""Invalid expression for %s: %s\\n"" , constraint_source , constraint )"	221:2:6316:6393	5057814	0	True				
ANR	5057842	CallExpression	"EXCEPT ( ""Invalid expression for %s: %s\\n"" , constraint_source , constraint )"		5057814	0					
ANR	5057843	Callee	EXCEPT		5057814	0					
ANR	5057844	Identifier	EXCEPT		5057814	0					
ANR	5057845	ArgumentList	"""Invalid expression for %s: %s\\n"""		5057814	1					
ANR	5057846	Argument	"""Invalid expression for %s: %s\\n"""		5057814	0					
ANR	5057847	PrimaryExpression	"""Invalid expression for %s: %s\\n"""		5057814	0					
ANR	5057848	Argument	constraint_source		5057814	1					
ANR	5057849	Identifier	constraint_source		5057814	0					
ANR	5057850	Argument	constraint		5057814	2					
ANR	5057851	Identifier	constraint		5057814	0					
ANR	5057852	Statement	delete	224:1:6399:6404	5057814	2	True				
ANR	5057853	ExpressionStatement	requirements	224:8:6406:6418	5057814	3	True				
ANR	5057854	Identifier	requirements		5057814	0					
ANR	5057855	ReturnType	void		5057814	1					
ANR	5057856	Identifier	Defrag :: validateExpr		5057814	2					
ANR	5057857	ParameterList	"char const * constraint , char const * constraint_source"		5057814	3					
ANR	5057858	Parameter	char const * constraint	215:26:6141:6162	5057814	0	True				
ANR	5057859	ParameterType	char const *		5057814	0					
ANR	5057860	Identifier	constraint		5057814	1					
ANR	5057861	Parameter	char const * constraint_source	215:49:6164:6192	5057814	1	True				
ANR	5057862	ParameterType	char const *		5057814	0					
ANR	5057863	Identifier	constraint_source		5057814	1					
ANR	5057864	CFGEntryNode	ENTRY		5057814		True				
ANR	5057865	CFGExitNode	EXIT		5057814		True				
ANR	5057866	Symbol	requirements		5057814						
ANR	5057867	Symbol	NULL		5057814						
ANR	5057868	Symbol	constraint_source		5057814						
ANR	5057869	Symbol	ParseClassAdRvalExpr		5057814						
ANR	5057870	Symbol	constraint		5057814						
ANR	5057871	Function	Defrag :: queryMachines	227:0:6423:7134							
ANR	5057872	FunctionDef	"Defrag :: queryMachines (char const * constraint , char const * constraint_source , ClassAdList & startdAds)"		5057871	0					
ANR	5057873	CompoundStatement		228:0:6527:7134	5057871	0					
ANR	5057874	IdentifierDeclStatement	CondorQuery startdQuery ( STARTD_AD ) ;	229:1:6530:6564	5057871	0	True				
ANR	5057875	IdentifierDecl	startdQuery ( STARTD_AD )		5057871	0					
ANR	5057876	IdentifierDeclType	CondorQuery		5057871	0					
ANR	5057877	Identifier	startdQuery		5057871	1					
ANR	5057878	Identifier	STARTD_AD		5057871	2					
ANR	5057879	ExpressionStatement	"validateExpr ( constraint , constraint_source )"	231:1:6568:6610	5057871	1	True				
ANR	5057880	CallExpression	"validateExpr ( constraint , constraint_source )"		5057871	0					
ANR	5057881	Callee	validateExpr		5057871	0					
ANR	5057882	Identifier	validateExpr		5057871	0					
ANR	5057883	ArgumentList	constraint		5057871	1					
ANR	5057884	Argument	constraint		5057871	0					
ANR	5057885	Identifier	constraint		5057871	0					
ANR	5057886	Argument	constraint_source		5057871	1					
ANR	5057887	Identifier	constraint_source		5057871	0					
ANR	5057888	ExpressionStatement	startdQuery . addANDConstraint ( constraint )	232:1:6613:6653	5057871	2	True				
ANR	5057889	CallExpression	startdQuery . addANDConstraint ( constraint )		5057871	0					
ANR	5057890	Callee	startdQuery . addANDConstraint		5057871	0					
ANR	5057891	MemberAccess	startdQuery . addANDConstraint		5057871	0					
ANR	5057892	Identifier	startdQuery		5057871	0					
ANR	5057893	Identifier	addANDConstraint		5057871	1					
ANR	5057894	ArgumentList	constraint		5057871	1					
ANR	5057895	Argument	constraint		5057871	0					
ANR	5057896	Identifier	constraint		5057871	0					
ANR	5057897	IdentifierDeclStatement	CollectorList * collects = daemonCore -> getCollectorList ( ) ;	234:1:6657:6713	5057871	3	True				
ANR	5057898	IdentifierDecl	* collects = daemonCore -> getCollectorList ( )		5057871	0					
ANR	5057899	IdentifierDeclType	CollectorList *		5057871	0					
ANR	5057900	Identifier	collects		5057871	1					
ANR	5057901	AssignmentExpression	* collects = daemonCore -> getCollectorList ( )		5057871	2		=			
ANR	5057902	Identifier	collects		5057871	0					
ANR	5057903	CallExpression	daemonCore -> getCollectorList ( )		5057871	1					
ANR	5057904	Callee	daemonCore -> getCollectorList		5057871	0					
ANR	5057905	PtrMemberAccess	daemonCore -> getCollectorList		5057871	0					
ANR	5057906	Identifier	daemonCore		5057871	0					
ANR	5057907	Identifier	getCollectorList		5057871	1					
ANR	5057908	ArgumentList			5057871	1					
ANR	5057909	ExpressionStatement	ASSERT ( collects )	235:1:6716:6734	5057871	4	True				
ANR	5057910	CallExpression	ASSERT ( collects )		5057871	0					
ANR	5057911	Callee	ASSERT		5057871	0					
ANR	5057912	Identifier	ASSERT		5057871	0					
ANR	5057913	ArgumentList	collects		5057871	1					
ANR	5057914	Argument	collects		5057871	0					
ANR	5057915	Identifier	collects		5057871	0					
ANR	5057916	IdentifierDeclStatement	QueryResult result ;	237:1:6738:6756	5057871	5	True				
ANR	5057917	IdentifierDecl	result		5057871	0					
ANR	5057918	IdentifierDeclType	QueryResult		5057871	0					
ANR	5057919	Identifier	result		5057871	1					
ANR	5057920	ExpressionStatement	"result = collects -> query ( startdQuery , startdAds )"	238:1:6759:6806	5057871	6	True				
ANR	5057921	AssignmentExpression	"result = collects -> query ( startdQuery , startdAds )"		5057871	0		=			
ANR	5057922	Identifier	result		5057871	0					
ANR	5057923	CallExpression	"collects -> query ( startdQuery , startdAds )"		5057871	1					
ANR	5057924	Callee	collects -> query		5057871	0					
ANR	5057925	PtrMemberAccess	collects -> query		5057871	0					
ANR	5057926	Identifier	collects		5057871	0					
ANR	5057927	Identifier	query		5057871	1					
ANR	5057928	ArgumentList	startdQuery		5057871	1					
ANR	5057929	Argument	startdQuery		5057871	0					
ANR	5057930	Identifier	startdQuery		5057871	0					
ANR	5057931	Argument	startdAds		5057871	1					
ANR	5057932	Identifier	startdAds		5057871	0					
ANR	5057933	IfStatement	if ( result != Q_OK )		5057871	7					
ANR	5057934	Condition	result != Q_OK	239:5:6813:6826	5057871	0	True				
ANR	5057935	EqualityExpression	result != Q_OK		5057871	0		!=			
ANR	5057936	Identifier	result		5057871	0					
ANR	5057937	Identifier	Q_OK		5057871	1					
ANR	5057938	CompoundStatement		12:22:302:302	5057871	1					
ANR	5057939	Statement	dprintf	240:2:6834:6840	5057871	0	True				
ANR	5057940	Statement	(	240:9:6841:6841	5057871	1	True				
ANR	5057941	Statement	D_ALWAYS	240:10:6842:6849	5057871	2	True				
ANR	5057942	Statement	","	240:18:6850:6850	5057871	3	True				
ANR	5057943	Statement	"""Couldn't fetch startd ads using constraint """	241:4:6856:6900	5057871	4	True				
ANR	5057944	Statement	"""%s=%s: %s\\n"""	242:4:6906:6918	5057871	5	True				
ANR	5057945	Statement	","	242:17:6919:6919	5057871	6	True				
ANR	5057946	Statement	constraint_source	243:4:6925:6941	5057871	7	True				
ANR	5057947	Statement	","	243:21:6942:6942	5057871	8	True				
ANR	5057948	Statement	constraint	243:22:6943:6952	5057871	9	True				
ANR	5057949	Statement	","	243:32:6953:6953	5057871	10	True				
ANR	5057950	Statement	getStrQueryResult	243:34:6955:6971	5057871	11	True				
ANR	5057951	Statement	(	243:51:6972:6972	5057871	12	True				
ANR	5057952	Statement	result	243:52:6973:6978	5057871	13	True				
ANR	5057953	Statement	)	243:58:6979:6979	5057871	14	True				
ANR	5057954	Statement	)	243:59:6980:6980	5057871	15	True				
ANR	5057955	ExpressionStatement		243:60:6981:6981	5057871	16	True				
ANR	5057956	ReturnStatement	return false ;	244:2:6985:6997	5057871	17	True				
ANR	5057957	Identifier	false		5057871	0					
ANR	5057958	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Got %d startd ads matching %s=%s\\n"" , startdAds . MyLength ( ) , constraint_source , constraint )"	247:1:7004:7117	5057871	8	True				
ANR	5057959	CallExpression	"dprintf ( D_FULLDEBUG , ""Got %d startd ads matching %s=%s\\n"" , startdAds . MyLength ( ) , constraint_source , constraint )"		5057871	0					
ANR	5057960	Callee	dprintf		5057871	0					
ANR	5057961	Identifier	dprintf		5057871	0					
ANR	5057962	ArgumentList	D_FULLDEBUG		5057871	1					
ANR	5057963	Argument	D_FULLDEBUG		5057871	0					
ANR	5057964	Identifier	D_FULLDEBUG		5057871	0					
ANR	5057965	Argument	"""Got %d startd ads matching %s=%s\\n"""		5057871	1					
ANR	5057966	PrimaryExpression	"""Got %d startd ads matching %s=%s\\n"""		5057871	0					
ANR	5057967	Argument	startdAds . MyLength ( )		5057871	2					
ANR	5057968	CallExpression	startdAds . MyLength ( )		5057871	0					
ANR	5057969	Callee	startdAds . MyLength		5057871	0					
ANR	5057970	MemberAccess	startdAds . MyLength		5057871	0					
ANR	5057971	Identifier	startdAds		5057871	0					
ANR	5057972	Identifier	MyLength		5057871	1					
ANR	5057973	ArgumentList			5057871	1					
ANR	5057974	Argument	constraint_source		5057871	3					
ANR	5057975	Identifier	constraint_source		5057871	0					
ANR	5057976	Argument	constraint		5057871	4					
ANR	5057977	Identifier	constraint		5057871	0					
ANR	5057978	ReturnStatement	return true ;	250:1:7121:7132	5057871	9	True				
ANR	5057979	Identifier	true		5057871	0					
ANR	5057980	ReturnType	bool		5057871	1					
ANR	5057981	Identifier	Defrag :: queryMachines		5057871	2					
ANR	5057982	ParameterList	"char const * constraint , char const * constraint_source , ClassAdList & startdAds"		5057871	3					
ANR	5057983	Parameter	char const * constraint	227:27:6450:6471	5057871	0	True				
ANR	5057984	ParameterType	char const *		5057871	0					
ANR	5057985	Identifier	constraint		5057871	1					
ANR	5057986	Parameter	char const * constraint_source	227:50:6473:6501	5057871	1	True				
ANR	5057987	ParameterType	char const *		5057871	0					
ANR	5057988	Identifier	constraint_source		5057871	1					
ANR	5057989	Parameter	ClassAdList & startdAds	227:80:6503:6524	5057871	2	True				
ANR	5057990	ParameterType	ClassAdList &		5057871	0					
ANR	5057991	Identifier	startdAds		5057871	1					
ANR	5057992	CFGEntryNode	ENTRY		5057871		True				
ANR	5057993	CFGExitNode	EXIT		5057871		True				
ANR	5057994	Symbol	daemonCore -> getCollectorList		5057871						
ANR	5057995	Symbol	false		5057871						
ANR	5057996	Symbol	D_FULLDEBUG		5057871						
ANR	5057997	Symbol	Q_OK		5057871						
ANR	5057998	Symbol	result		5057871						
ANR	5057999	Symbol	* collects		5057871						
ANR	5058000	Symbol	startdAds		5057871						
ANR	5058001	Symbol	collects -> query		5057871						
ANR	5058002	Symbol	startdAds . MyLength		5057871						
ANR	5058003	Symbol	constraint_source		5057871						
ANR	5058004	Symbol	* daemonCore		5057871						
ANR	5058005	Symbol	daemonCore		5057871						
ANR	5058006	Symbol	true		5057871						
ANR	5058007	Symbol	constraint		5057871						
ANR	5058008	Symbol	startdQuery		5057871						
ANR	5058009	Symbol	collects		5057871						
ANR	5058010	Function	Defrag :: queryDrainingCost	253:0:7137:9343							
ANR	5058011	FunctionDef	Defrag :: queryDrainingCost ()		5058010	0					
ANR	5058012	CompoundStatement		255:0:7170:9343	5058010	0					
ANR	5058013	IdentifierDeclStatement	ClassAdList startdAds ;	256:1:7173:7194	5058010	0	True				
ANR	5058014	IdentifierDecl	startdAds		5058010	0					
ANR	5058015	IdentifierDeclType	ClassAdList		5058010	0					
ANR	5058016	Identifier	startdAds		5058010	1					
ANR	5058017	IdentifierDeclStatement	CondorQuery startdQuery ( STARTD_AD ) ;	257:1:7197:7231	5058010	1	True				
ANR	5058018	IdentifierDecl	startdQuery ( STARTD_AD )		5058010	0					
ANR	5058019	IdentifierDeclType	CondorQuery		5058010	0					
ANR	5058020	Identifier	startdQuery		5058010	1					
ANR	5058021	Identifier	STARTD_AD		5058010	2					
ANR	5058022	IdentifierDeclStatement	char const * desired_attrs [ 6 ] ;	258:1:7234:7262	5058010	2	True				
ANR	5058023	IdentifierDecl	* desired_attrs [ 6 ]		5058010	0					
ANR	5058024	IdentifierDeclType	char const * [ 6 ]		5058010	0					
ANR	5058025	Identifier	desired_attrs		5058010	1					
ANR	5058026	PrimaryExpression	6		5058010	2					
ANR	5058027	ExpressionStatement	desired_attrs [ 0 ] = ATTR_TOTAL_MACHINE_DRAINING_UNCLAIMED_TIME	259:1:7265:7326	5058010	3	True				
ANR	5058028	AssignmentExpression	desired_attrs [ 0 ] = ATTR_TOTAL_MACHINE_DRAINING_UNCLAIMED_TIME		5058010	0		=			
ANR	5058029	ArrayIndexing	desired_attrs [ 0 ]		5058010	0					
ANR	5058030	Identifier	desired_attrs		5058010	0					
ANR	5058031	PrimaryExpression	0		5058010	1					
ANR	5058032	Identifier	ATTR_TOTAL_MACHINE_DRAINING_UNCLAIMED_TIME		5058010	1					
ANR	5058033	ExpressionStatement	desired_attrs [ 1 ] = ATTR_TOTAL_MACHINE_DRAINING_BADPUT	260:1:7329:7382	5058010	4	True				
ANR	5058034	AssignmentExpression	desired_attrs [ 1 ] = ATTR_TOTAL_MACHINE_DRAINING_BADPUT		5058010	0		=			
ANR	5058035	ArrayIndexing	desired_attrs [ 1 ]		5058010	0					
ANR	5058036	Identifier	desired_attrs		5058010	0					
ANR	5058037	PrimaryExpression	1		5058010	1					
ANR	5058038	Identifier	ATTR_TOTAL_MACHINE_DRAINING_BADPUT		5058010	1					
ANR	5058039	ExpressionStatement	desired_attrs [ 2 ] = ATTR_DAEMON_START_TIME	261:1:7385:7426	5058010	5	True				
ANR	5058040	AssignmentExpression	desired_attrs [ 2 ] = ATTR_DAEMON_START_TIME		5058010	0		=			
ANR	5058041	ArrayIndexing	desired_attrs [ 2 ]		5058010	0					
ANR	5058042	Identifier	desired_attrs		5058010	0					
ANR	5058043	PrimaryExpression	2		5058010	1					
ANR	5058044	Identifier	ATTR_DAEMON_START_TIME		5058010	1					
ANR	5058045	ExpressionStatement	desired_attrs [ 3 ] = ATTR_TOTAL_CPUS	262:1:7429:7463	5058010	6	True				
ANR	5058046	AssignmentExpression	desired_attrs [ 3 ] = ATTR_TOTAL_CPUS		5058010	0		=			
ANR	5058047	ArrayIndexing	desired_attrs [ 3 ]		5058010	0					
ANR	5058048	Identifier	desired_attrs		5058010	0					
ANR	5058049	PrimaryExpression	3		5058010	1					
ANR	5058050	Identifier	ATTR_TOTAL_CPUS		5058010	1					
ANR	5058051	ExpressionStatement	desired_attrs [ 4 ] = ATTR_LAST_HEARD_FROM	263:1:7466:7505	5058010	7	True				
ANR	5058052	AssignmentExpression	desired_attrs [ 4 ] = ATTR_LAST_HEARD_FROM		5058010	0		=			
ANR	5058053	ArrayIndexing	desired_attrs [ 4 ]		5058010	0					
ANR	5058054	Identifier	desired_attrs		5058010	0					
ANR	5058055	PrimaryExpression	4		5058010	1					
ANR	5058056	Identifier	ATTR_LAST_HEARD_FROM		5058010	1					
ANR	5058057	ExpressionStatement	desired_attrs [ 5 ] = NULL	264:1:7508:7531	5058010	8	True				
ANR	5058058	AssignmentExpression	desired_attrs [ 5 ] = NULL		5058010	0		=			
ANR	5058059	ArrayIndexing	desired_attrs [ 5 ]		5058010	0					
ANR	5058060	Identifier	desired_attrs		5058010	0					
ANR	5058061	PrimaryExpression	5		5058010	1					
ANR	5058062	Identifier	NULL		5058010	1					
ANR	5058063	ExpressionStatement	startdQuery . setDesiredAttrs ( desired_attrs )	266:1:7535:7577	5058010	9	True				
ANR	5058064	CallExpression	startdQuery . setDesiredAttrs ( desired_attrs )		5058010	0					
ANR	5058065	Callee	startdQuery . setDesiredAttrs		5058010	0					
ANR	5058066	MemberAccess	startdQuery . setDesiredAttrs		5058010	0					
ANR	5058067	Identifier	startdQuery		5058010	0					
ANR	5058068	Identifier	setDesiredAttrs		5058010	1					
ANR	5058069	ArgumentList	desired_attrs		5058010	1					
ANR	5058070	Argument	desired_attrs		5058010	0					
ANR	5058071	Identifier	desired_attrs		5058010	0					
ANR	5058072	IdentifierDeclStatement	std :: string query ;	267:1:7580:7597	5058010	10	True				
ANR	5058073	IdentifierDecl	query		5058010	0					
ANR	5058074	IdentifierDeclType	std :: string		5058010	0					
ANR	5058075	Identifier	query		5058010	1					
ANR	5058076	ExpressionStatement	"sprintf ( query , ""%s==1 && (%s =!= undefined || %s =!= undefined)"" , ATTR_SLOT_ID , ATTR_TOTAL_MACHINE_DRAINING_UNCLAIMED_TIME , ATTR_TOTAL_MACHINE_DRAINING_BADPUT )"	269:1:7633:7800	5058010	11	True				
ANR	5058077	CallExpression	"sprintf ( query , ""%s==1 && (%s =!= undefined || %s =!= undefined)"" , ATTR_SLOT_ID , ATTR_TOTAL_MACHINE_DRAINING_UNCLAIMED_TIME , ATTR_TOTAL_MACHINE_DRAINING_BADPUT )"		5058010	0					
ANR	5058078	Callee	sprintf		5058010	0					
ANR	5058079	Identifier	sprintf		5058010	0					
ANR	5058080	ArgumentList	query		5058010	1					
ANR	5058081	Argument	query		5058010	0					
ANR	5058082	Identifier	query		5058010	0					
ANR	5058083	Argument	"""%s==1 && (%s =!= undefined || %s =!= undefined)"""		5058010	1					
ANR	5058084	PrimaryExpression	"""%s==1 && (%s =!= undefined || %s =!= undefined)"""		5058010	0					
ANR	5058085	Argument	ATTR_SLOT_ID		5058010	2					
ANR	5058086	Identifier	ATTR_SLOT_ID		5058010	0					
ANR	5058087	Argument	ATTR_TOTAL_MACHINE_DRAINING_UNCLAIMED_TIME		5058010	3					
ANR	5058088	Identifier	ATTR_TOTAL_MACHINE_DRAINING_UNCLAIMED_TIME		5058010	0					
ANR	5058089	Argument	ATTR_TOTAL_MACHINE_DRAINING_BADPUT		5058010	4					
ANR	5058090	Identifier	ATTR_TOTAL_MACHINE_DRAINING_BADPUT		5058010	0					
ANR	5058091	ExpressionStatement	startdQuery . addANDConstraint ( query . c_str ( ) )	273:1:7803:7846	5058010	12	True				
ANR	5058092	CallExpression	startdQuery . addANDConstraint ( query . c_str ( ) )		5058010	0					
ANR	5058093	Callee	startdQuery . addANDConstraint		5058010	0					
ANR	5058094	MemberAccess	startdQuery . addANDConstraint		5058010	0					
ANR	5058095	Identifier	startdQuery		5058010	0					
ANR	5058096	Identifier	addANDConstraint		5058010	1					
ANR	5058097	ArgumentList	query . c_str ( )		5058010	1					
ANR	5058098	Argument	query . c_str ( )		5058010	0					
ANR	5058099	CallExpression	query . c_str ( )		5058010	0					
ANR	5058100	Callee	query . c_str		5058010	0					
ANR	5058101	MemberAccess	query . c_str		5058010	0					
ANR	5058102	Identifier	query		5058010	0					
ANR	5058103	Identifier	c_str		5058010	1					
ANR	5058104	ArgumentList			5058010	1					
ANR	5058105	IdentifierDeclStatement	CollectorList * collects = daemonCore -> getCollectorList ( ) ;	275:1:7850:7906	5058010	13	True				
ANR	5058106	IdentifierDecl	* collects = daemonCore -> getCollectorList ( )		5058010	0					
ANR	5058107	IdentifierDeclType	CollectorList *		5058010	0					
ANR	5058108	Identifier	collects		5058010	1					
ANR	5058109	AssignmentExpression	* collects = daemonCore -> getCollectorList ( )		5058010	2		=			
ANR	5058110	Identifier	collects		5058010	0					
ANR	5058111	CallExpression	daemonCore -> getCollectorList ( )		5058010	1					
ANR	5058112	Callee	daemonCore -> getCollectorList		5058010	0					
ANR	5058113	PtrMemberAccess	daemonCore -> getCollectorList		5058010	0					
ANR	5058114	Identifier	daemonCore		5058010	0					
ANR	5058115	Identifier	getCollectorList		5058010	1					
ANR	5058116	ArgumentList			5058010	1					
ANR	5058117	ExpressionStatement	ASSERT ( collects )	276:1:7909:7927	5058010	14	True				
ANR	5058118	CallExpression	ASSERT ( collects )		5058010	0					
ANR	5058119	Callee	ASSERT		5058010	0					
ANR	5058120	Identifier	ASSERT		5058010	0					
ANR	5058121	ArgumentList	collects		5058010	1					
ANR	5058122	Argument	collects		5058010	0					
ANR	5058123	Identifier	collects		5058010	0					
ANR	5058124	IdentifierDeclStatement	QueryResult result ;	278:1:7931:7949	5058010	15	True				
ANR	5058125	IdentifierDecl	result		5058010	0					
ANR	5058126	IdentifierDeclType	QueryResult		5058010	0					
ANR	5058127	Identifier	result		5058010	1					
ANR	5058128	ExpressionStatement	"result = collects -> query ( startdQuery , startdAds )"	279:1:7952:7999	5058010	16	True				
ANR	5058129	AssignmentExpression	"result = collects -> query ( startdQuery , startdAds )"		5058010	0		=			
ANR	5058130	Identifier	result		5058010	0					
ANR	5058131	CallExpression	"collects -> query ( startdQuery , startdAds )"		5058010	1					
ANR	5058132	Callee	collects -> query		5058010	0					
ANR	5058133	PtrMemberAccess	collects -> query		5058010	0					
ANR	5058134	Identifier	collects		5058010	0					
ANR	5058135	Identifier	query		5058010	1					
ANR	5058136	ArgumentList	startdQuery		5058010	1					
ANR	5058137	Argument	startdQuery		5058010	0					
ANR	5058138	Identifier	startdQuery		5058010	0					
ANR	5058139	Argument	startdAds		5058010	1					
ANR	5058140	Identifier	startdAds		5058010	0					
ANR	5058141	IfStatement	if ( result != Q_OK )		5058010	17					
ANR	5058142	Condition	result != Q_OK	280:5:8006:8019	5058010	0	True				
ANR	5058143	EqualityExpression	result != Q_OK		5058010	0		!=			
ANR	5058144	Identifier	result		5058010	0					
ANR	5058145	Identifier	Q_OK		5058010	1					
ANR	5058146	CompoundStatement		26:22:852:852	5058010	1					
ANR	5058147	ExpressionStatement	"dprintf ( D_ALWAYS , ""Couldn't fetch startd ads: %s\\n"" , getStrQueryResult ( result ) )"	281:2:8027:8114	5058010	0	True				
ANR	5058148	CallExpression	"dprintf ( D_ALWAYS , ""Couldn't fetch startd ads: %s\\n"" , getStrQueryResult ( result ) )"		5058010	0					
ANR	5058149	Callee	dprintf		5058010	0					
ANR	5058150	Identifier	dprintf		5058010	0					
ANR	5058151	ArgumentList	D_ALWAYS		5058010	1					
ANR	5058152	Argument	D_ALWAYS		5058010	0					
ANR	5058153	Identifier	D_ALWAYS		5058010	0					
ANR	5058154	Argument	"""Couldn't fetch startd ads: %s\\n"""		5058010	1					
ANR	5058155	PrimaryExpression	"""Couldn't fetch startd ads: %s\\n"""		5058010	0					
ANR	5058156	Argument	getStrQueryResult ( result )		5058010	2					
ANR	5058157	CallExpression	getStrQueryResult ( result )		5058010	0					
ANR	5058158	Callee	getStrQueryResult		5058010	0					
ANR	5058159	Identifier	getStrQueryResult		5058010	0					
ANR	5058160	ArgumentList	result		5058010	1					
ANR	5058161	Argument	result		5058010	0					
ANR	5058162	Identifier	result		5058010	0					
ANR	5058163	ReturnStatement	return ;	284:2:8118:8124	5058010	1	True				
ANR	5058164	IdentifierDeclStatement	double avg_badput = 0.0 ;	287:1:8131:8154	5058010	18	True				
ANR	5058165	IdentifierDecl	avg_badput = 0.0		5058010	0					
ANR	5058166	IdentifierDeclType	double		5058010	0					
ANR	5058167	Identifier	avg_badput		5058010	1					
ANR	5058168	AssignmentExpression	avg_badput = 0.0		5058010	2		=			
ANR	5058169	Identifier	avg_badput		5058010	0					
ANR	5058170	PrimaryExpression	0.0		5058010	1					
ANR	5058171	IdentifierDeclStatement	double avg_unclaimed = 0.0 ;	288:1:8157:8183	5058010	19	True				
ANR	5058172	IdentifierDecl	avg_unclaimed = 0.0		5058010	0					
ANR	5058173	IdentifierDeclType	double		5058010	0					
ANR	5058174	Identifier	avg_unclaimed		5058010	1					
ANR	5058175	AssignmentExpression	avg_unclaimed = 0.0		5058010	2		=			
ANR	5058176	Identifier	avg_unclaimed		5058010	0					
ANR	5058177	PrimaryExpression	0.0		5058010	1					
ANR	5058178	IdentifierDeclStatement	int total_cpus = 0 ;	289:1:8186:8204	5058010	20	True				
ANR	5058179	IdentifierDecl	total_cpus = 0		5058010	0					
ANR	5058180	IdentifierDeclType	int		5058010	0					
ANR	5058181	Identifier	total_cpus		5058010	1					
ANR	5058182	AssignmentExpression	total_cpus = 0		5058010	2		=			
ANR	5058183	Identifier	total_cpus		5058010	0					
ANR	5058184	PrimaryExpression	0		5058010	1					
ANR	5058185	ExpressionStatement	startdAds . Open ( )	291:1:8208:8224	5058010	21	True				
ANR	5058186	CallExpression	startdAds . Open ( )		5058010	0					
ANR	5058187	Callee	startdAds . Open		5058010	0					
ANR	5058188	MemberAccess	startdAds . Open		5058010	0					
ANR	5058189	Identifier	startdAds		5058010	0					
ANR	5058190	Identifier	Open		5058010	1					
ANR	5058191	ArgumentList			5058010	1					
ANR	5058192	IdentifierDeclStatement	ClassAd * startd_ad ;	292:1:8227:8245	5058010	22	True				
ANR	5058193	IdentifierDecl	* startd_ad		5058010	0					
ANR	5058194	IdentifierDeclType	ClassAd *		5058010	0					
ANR	5058195	Identifier	startd_ad		5058010	1					
ANR	5058196	WhileStatement	while ( ( startd_ad = startdAds . Next ( ) ) )		5058010	23					
ANR	5058197	Condition	startd_ad = startdAds . Next ( )	293:8:8255:8282	5058010	0	True				
ANR	5058198	AssignmentExpression	startd_ad = startdAds . Next ( )		5058010	0		=			
ANR	5058199	Identifier	startd_ad		5058010	0					
ANR	5058200	CallExpression	startdAds . Next ( )		5058010	1					
ANR	5058201	Callee	startdAds . Next		5058010	0					
ANR	5058202	MemberAccess	startdAds . Next		5058010	0					
ANR	5058203	Identifier	startdAds		5058010	0					
ANR	5058204	Identifier	Next		5058010	1					
ANR	5058205	ArgumentList			5058010	1					
ANR	5058206	CompoundStatement		51:2:1556:1594	5058010	1					
ANR	5058207	IdentifierDeclStatement	int unclaimed = 0 ;	294:2:8290:8307	5058010	0	True				
ANR	5058208	IdentifierDecl	unclaimed = 0		5058010	0					
ANR	5058209	IdentifierDeclType	int		5058010	0					
ANR	5058210	Identifier	unclaimed		5058010	1					
ANR	5058211	AssignmentExpression	unclaimed = 0		5058010	2		=			
ANR	5058212	Identifier	unclaimed		5058010	0					
ANR	5058213	PrimaryExpression	0		5058010	1					
ANR	5058214	IdentifierDeclStatement	int badput = 0 ;	295:2:8311:8325	5058010	1	True				
ANR	5058215	IdentifierDecl	badput = 0		5058010	0					
ANR	5058216	IdentifierDeclType	int		5058010	0					
ANR	5058217	Identifier	badput		5058010	1					
ANR	5058218	AssignmentExpression	badput = 0		5058010	2		=			
ANR	5058219	Identifier	badput		5058010	0					
ANR	5058220	PrimaryExpression	0		5058010	1					
ANR	5058221	IdentifierDeclStatement	int start_time = 0 ;	296:2:8329:8347	5058010	2	True				
ANR	5058222	IdentifierDecl	start_time = 0		5058010	0					
ANR	5058223	IdentifierDeclType	int		5058010	0					
ANR	5058224	Identifier	start_time		5058010	1					
ANR	5058225	AssignmentExpression	start_time = 0		5058010	2		=			
ANR	5058226	Identifier	start_time		5058010	0					
ANR	5058227	PrimaryExpression	0		5058010	1					
ANR	5058228	IdentifierDeclStatement	int cpus = 0 ;	297:2:8351:8363	5058010	3	True				
ANR	5058229	IdentifierDecl	cpus = 0		5058010	0					
ANR	5058230	IdentifierDeclType	int		5058010	0					
ANR	5058231	Identifier	cpus		5058010	1					
ANR	5058232	AssignmentExpression	cpus = 0		5058010	2		=			
ANR	5058233	Identifier	cpus		5058010	0					
ANR	5058234	PrimaryExpression	0		5058010	1					
ANR	5058235	IdentifierDeclStatement	int last_heard_from = 0 ;	298:2:8367:8390	5058010	4	True				
ANR	5058236	IdentifierDecl	last_heard_from = 0		5058010	0					
ANR	5058237	IdentifierDeclType	int		5058010	0					
ANR	5058238	Identifier	last_heard_from		5058010	1					
ANR	5058239	AssignmentExpression	last_heard_from = 0		5058010	2		=			
ANR	5058240	Identifier	last_heard_from		5058010	0					
ANR	5058241	PrimaryExpression	0		5058010	1					
ANR	5058242	ExpressionStatement	"startd_ad -> LookupInteger ( ATTR_TOTAL_MACHINE_DRAINING_UNCLAIMED_TIME , unclaimed )"	299:2:8394:8472	5058010	5	True				
ANR	5058243	CallExpression	"startd_ad -> LookupInteger ( ATTR_TOTAL_MACHINE_DRAINING_UNCLAIMED_TIME , unclaimed )"		5058010	0					
ANR	5058244	Callee	startd_ad -> LookupInteger		5058010	0					
ANR	5058245	PtrMemberAccess	startd_ad -> LookupInteger		5058010	0					
ANR	5058246	Identifier	startd_ad		5058010	0					
ANR	5058247	Identifier	LookupInteger		5058010	1					
ANR	5058248	ArgumentList	ATTR_TOTAL_MACHINE_DRAINING_UNCLAIMED_TIME		5058010	1					
ANR	5058249	Argument	ATTR_TOTAL_MACHINE_DRAINING_UNCLAIMED_TIME		5058010	0					
ANR	5058250	Identifier	ATTR_TOTAL_MACHINE_DRAINING_UNCLAIMED_TIME		5058010	0					
ANR	5058251	Argument	unclaimed		5058010	1					
ANR	5058252	Identifier	unclaimed		5058010	0					
ANR	5058253	ExpressionStatement	"startd_ad -> LookupInteger ( ATTR_TOTAL_MACHINE_DRAINING_BADPUT , badput )"	300:2:8476:8543	5058010	6	True				
ANR	5058254	CallExpression	"startd_ad -> LookupInteger ( ATTR_TOTAL_MACHINE_DRAINING_BADPUT , badput )"		5058010	0					
ANR	5058255	Callee	startd_ad -> LookupInteger		5058010	0					
ANR	5058256	PtrMemberAccess	startd_ad -> LookupInteger		5058010	0					
ANR	5058257	Identifier	startd_ad		5058010	0					
ANR	5058258	Identifier	LookupInteger		5058010	1					
ANR	5058259	ArgumentList	ATTR_TOTAL_MACHINE_DRAINING_BADPUT		5058010	1					
ANR	5058260	Argument	ATTR_TOTAL_MACHINE_DRAINING_BADPUT		5058010	0					
ANR	5058261	Identifier	ATTR_TOTAL_MACHINE_DRAINING_BADPUT		5058010	0					
ANR	5058262	Argument	badput		5058010	1					
ANR	5058263	Identifier	badput		5058010	0					
ANR	5058264	ExpressionStatement	"startd_ad -> LookupInteger ( ATTR_DAEMON_START_TIME , start_time )"	301:2:8547:8606	5058010	7	True				
ANR	5058265	CallExpression	"startd_ad -> LookupInteger ( ATTR_DAEMON_START_TIME , start_time )"		5058010	0					
ANR	5058266	Callee	startd_ad -> LookupInteger		5058010	0					
ANR	5058267	PtrMemberAccess	startd_ad -> LookupInteger		5058010	0					
ANR	5058268	Identifier	startd_ad		5058010	0					
ANR	5058269	Identifier	LookupInteger		5058010	1					
ANR	5058270	ArgumentList	ATTR_DAEMON_START_TIME		5058010	1					
ANR	5058271	Argument	ATTR_DAEMON_START_TIME		5058010	0					
ANR	5058272	Identifier	ATTR_DAEMON_START_TIME		5058010	0					
ANR	5058273	Argument	start_time		5058010	1					
ANR	5058274	Identifier	start_time		5058010	0					
ANR	5058275	ExpressionStatement	"startd_ad -> LookupInteger ( ATTR_LAST_HEARD_FROM , last_heard_from )"	302:2:8610:8672	5058010	8	True				
ANR	5058276	CallExpression	"startd_ad -> LookupInteger ( ATTR_LAST_HEARD_FROM , last_heard_from )"		5058010	0					
ANR	5058277	Callee	startd_ad -> LookupInteger		5058010	0					
ANR	5058278	PtrMemberAccess	startd_ad -> LookupInteger		5058010	0					
ANR	5058279	Identifier	startd_ad		5058010	0					
ANR	5058280	Identifier	LookupInteger		5058010	1					
ANR	5058281	ArgumentList	ATTR_LAST_HEARD_FROM		5058010	1					
ANR	5058282	Argument	ATTR_LAST_HEARD_FROM		5058010	0					
ANR	5058283	Identifier	ATTR_LAST_HEARD_FROM		5058010	0					
ANR	5058284	Argument	last_heard_from		5058010	1					
ANR	5058285	Identifier	last_heard_from		5058010	0					
ANR	5058286	ExpressionStatement	"startd_ad -> LookupInteger ( ATTR_TOTAL_CPUS , cpus )"	303:2:8676:8722	5058010	9	True				
ANR	5058287	CallExpression	"startd_ad -> LookupInteger ( ATTR_TOTAL_CPUS , cpus )"		5058010	0					
ANR	5058288	Callee	startd_ad -> LookupInteger		5058010	0					
ANR	5058289	PtrMemberAccess	startd_ad -> LookupInteger		5058010	0					
ANR	5058290	Identifier	startd_ad		5058010	0					
ANR	5058291	Identifier	LookupInteger		5058010	1					
ANR	5058292	ArgumentList	ATTR_TOTAL_CPUS		5058010	1					
ANR	5058293	Argument	ATTR_TOTAL_CPUS		5058010	0					
ANR	5058294	Identifier	ATTR_TOTAL_CPUS		5058010	0					
ANR	5058295	Argument	cpus		5058010	1					
ANR	5058296	Identifier	cpus		5058010	0					
ANR	5058297	IdentifierDeclStatement	int age = last_heard_from - start_time ;	305:2:8727:8765	5058010	10	True				
ANR	5058298	IdentifierDecl	age = last_heard_from - start_time		5058010	0					
ANR	5058299	IdentifierDeclType	int		5058010	0					
ANR	5058300	Identifier	age		5058010	1					
ANR	5058301	AssignmentExpression	age = last_heard_from - start_time		5058010	2		=			
ANR	5058302	Identifier	age		5058010	0					
ANR	5058303	AdditiveExpression	last_heard_from - start_time		5058010	1		-			
ANR	5058304	Identifier	last_heard_from		5058010	0					
ANR	5058305	Identifier	start_time		5058010	1					
ANR	5058306	IfStatement	if ( last_heard_from == 0 || start_time == 0 || age <= 0 )		5058010	11					
ANR	5058307	Condition	last_heard_from == 0 || start_time == 0 || age <= 0	306:6:8773:8823	5058010	0	True				
ANR	5058308	OrExpression	last_heard_from == 0 || start_time == 0 || age <= 0		5058010	0		||			
ANR	5058309	EqualityExpression	last_heard_from == 0		5058010	0		==			
ANR	5058310	Identifier	last_heard_from		5058010	0					
ANR	5058311	PrimaryExpression	0		5058010	1					
ANR	5058312	OrExpression	start_time == 0 || age <= 0		5058010	1		||			
ANR	5058313	EqualityExpression	start_time == 0		5058010	0		==			
ANR	5058314	Identifier	start_time		5058010	0					
ANR	5058315	PrimaryExpression	0		5058010	1					
ANR	5058316	RelationalExpression	age <= 0		5058010	1		<=			
ANR	5058317	Identifier	age		5058010	0					
ANR	5058318	PrimaryExpression	0		5058010	1					
ANR	5058319	CompoundStatement		52:60:1656:1656	5058010	1					
ANR	5058320	ContinueStatement	continue ;	307:3:8832:8840	5058010	0	True				
ANR	5058321	ExpressionStatement	avg_badput += ( ( double ) badput ) / age	310:2:8849:8883	5058010	12	True				
ANR	5058322	AssignmentExpression	avg_badput += ( ( double ) badput ) / age		5058010	0		+=			
ANR	5058323	Identifier	avg_badput		5058010	0					
ANR	5058324	MultiplicativeExpression	( ( double ) badput ) / age		5058010	1		/			
ANR	5058325	CastExpression	( double ) badput		5058010	0					
ANR	5058326	CastTarget	double		5058010	0					
ANR	5058327	Identifier	badput		5058010	1					
ANR	5058328	Identifier	age		5058010	1					
ANR	5058329	ExpressionStatement	avg_unclaimed += ( ( double ) unclaimed ) / age	311:2:8887:8927	5058010	13	True				
ANR	5058330	AssignmentExpression	avg_unclaimed += ( ( double ) unclaimed ) / age		5058010	0		+=			
ANR	5058331	Identifier	avg_unclaimed		5058010	0					
ANR	5058332	MultiplicativeExpression	( ( double ) unclaimed ) / age		5058010	1		/			
ANR	5058333	CastExpression	( double ) unclaimed		5058010	0					
ANR	5058334	CastTarget	double		5058010	0					
ANR	5058335	Identifier	unclaimed		5058010	1					
ANR	5058336	Identifier	age		5058010	1					
ANR	5058337	ExpressionStatement	total_cpus += cpus	312:2:8931:8949	5058010	14	True				
ANR	5058338	AssignmentExpression	total_cpus += cpus		5058010	0		+=			
ANR	5058339	Identifier	total_cpus		5058010	0					
ANR	5058340	Identifier	cpus		5058010	1					
ANR	5058341	ExpressionStatement	startdAds . Close ( )	314:1:8955:8972	5058010	24	True				
ANR	5058342	CallExpression	startdAds . Close ( )		5058010	0					
ANR	5058343	Callee	startdAds . Close		5058010	0					
ANR	5058344	MemberAccess	startdAds . Close		5058010	0					
ANR	5058345	Identifier	startdAds		5058010	0					
ANR	5058346	Identifier	Close		5058010	1					
ANR	5058347	ArgumentList			5058010	1					
ANR	5058348	IfStatement	if ( total_cpus > 0 )		5058010	25					
ANR	5058349	Condition	total_cpus > 0	316:5:8980:8993	5058010	0	True				
ANR	5058350	RelationalExpression	total_cpus > 0		5058010	0		>			
ANR	5058351	Identifier	total_cpus		5058010	0					
ANR	5058352	PrimaryExpression	0		5058010	1					
ANR	5058353	CompoundStatement		62:22:1826:1826	5058010	1					
ANR	5058354	ExpressionStatement	avg_badput = avg_badput / total_cpus	317:2:9001:9035	5058010	0	True				
ANR	5058355	AssignmentExpression	avg_badput = avg_badput / total_cpus		5058010	0		=			
ANR	5058356	Identifier	avg_badput		5058010	0					
ANR	5058357	MultiplicativeExpression	avg_badput / total_cpus		5058010	1		/			
ANR	5058358	Identifier	avg_badput		5058010	0					
ANR	5058359	Identifier	total_cpus		5058010	1					
ANR	5058360	ExpressionStatement	avg_unclaimed = avg_unclaimed / total_cpus	318:2:9039:9079	5058010	1	True				
ANR	5058361	AssignmentExpression	avg_unclaimed = avg_unclaimed / total_cpus		5058010	0		=			
ANR	5058362	Identifier	avg_unclaimed		5058010	0					
ANR	5058363	MultiplicativeExpression	avg_unclaimed / total_cpus		5058010	1		/			
ANR	5058364	Identifier	avg_unclaimed		5058010	0					
ANR	5058365	Identifier	total_cpus		5058010	1					
ANR	5058366	ExpressionStatement	"dprintf ( D_ALWAYS , ""Average pool draining badput = %.2f%%\\n"" , avg_badput * 100 )"	321:1:9086:9164	5058010	26	True				
ANR	5058367	CallExpression	"dprintf ( D_ALWAYS , ""Average pool draining badput = %.2f%%\\n"" , avg_badput * 100 )"		5058010	0					
ANR	5058368	Callee	dprintf		5058010	0					
ANR	5058369	Identifier	dprintf		5058010	0					
ANR	5058370	ArgumentList	D_ALWAYS		5058010	1					
ANR	5058371	Argument	D_ALWAYS		5058010	0					
ANR	5058372	Identifier	D_ALWAYS		5058010	0					
ANR	5058373	Argument	"""Average pool draining badput = %.2f%%\\n"""		5058010	1					
ANR	5058374	PrimaryExpression	"""Average pool draining badput = %.2f%%\\n"""		5058010	0					
ANR	5058375	Argument	avg_badput * 100		5058010	2					
ANR	5058376	MultiplicativeExpression	avg_badput * 100		5058010	0		*			
ANR	5058377	Identifier	avg_badput		5058010	0					
ANR	5058378	PrimaryExpression	100		5058010	1					
ANR	5058379	ExpressionStatement	"dprintf ( D_ALWAYS , ""Average pool draining unclaimed = %.2f%%\\n"" , avg_unclaimed * 100 )"	324:1:9168:9252	5058010	27	True				
ANR	5058380	CallExpression	"dprintf ( D_ALWAYS , ""Average pool draining unclaimed = %.2f%%\\n"" , avg_unclaimed * 100 )"		5058010	0					
ANR	5058381	Callee	dprintf		5058010	0					
ANR	5058382	Identifier	dprintf		5058010	0					
ANR	5058383	ArgumentList	D_ALWAYS		5058010	1					
ANR	5058384	Argument	D_ALWAYS		5058010	0					
ANR	5058385	Identifier	D_ALWAYS		5058010	0					
ANR	5058386	Argument	"""Average pool draining unclaimed = %.2f%%\\n"""		5058010	1					
ANR	5058387	PrimaryExpression	"""Average pool draining unclaimed = %.2f%%\\n"""		5058010	0					
ANR	5058388	Argument	avg_unclaimed * 100		5058010	2					
ANR	5058389	MultiplicativeExpression	avg_unclaimed * 100		5058010	0		*			
ANR	5058390	Identifier	avg_unclaimed		5058010	0					
ANR	5058391	PrimaryExpression	100		5058010	1					
ANR	5058392	ExpressionStatement	m_stats . AvgDrainingBadput = avg_badput	327:1:9256:9294	5058010	28	True				
ANR	5058393	AssignmentExpression	m_stats . AvgDrainingBadput = avg_badput		5058010	0		=			
ANR	5058394	MemberAccess	m_stats . AvgDrainingBadput		5058010	0					
ANR	5058395	Identifier	m_stats		5058010	0					
ANR	5058396	Identifier	AvgDrainingBadput		5058010	1					
ANR	5058397	Identifier	avg_badput		5058010	1					
ANR	5058398	ExpressionStatement	m_stats . AvgDrainingUnclaimed = avg_unclaimed	328:1:9297:9341	5058010	29	True				
ANR	5058399	AssignmentExpression	m_stats . AvgDrainingUnclaimed = avg_unclaimed		5058010	0		=			
ANR	5058400	MemberAccess	m_stats . AvgDrainingUnclaimed		5058010	0					
ANR	5058401	Identifier	m_stats		5058010	0					
ANR	5058402	Identifier	AvgDrainingUnclaimed		5058010	1					
ANR	5058403	Identifier	avg_unclaimed		5058010	1					
ANR	5058404	ReturnType	void		5058010	1					
ANR	5058405	Identifier	Defrag :: queryDrainingCost		5058010	2					
ANR	5058406	ParameterList			5058010	3					
ANR	5058407	CFGEntryNode	ENTRY		5058010		True				
ANR	5058408	CFGExitNode	EXIT		5058010		True				
ANR	5058409	Symbol	ATTR_LAST_HEARD_FROM		5058010						
ANR	5058410	Symbol	daemonCore -> getCollectorList		5058010						
ANR	5058411	Symbol	avg_unclaimed		5058010						
ANR	5058412	Symbol	* desired_attrs		5058010						
ANR	5058413	Symbol	query . c_str		5058010						
ANR	5058414	Symbol	unclaimed		5058010						
ANR	5058415	Symbol	total_cpus		5058010						
ANR	5058416	Symbol	last_heard_from		5058010						
ANR	5058417	Symbol	m_stats . AvgDrainingUnclaimed		5058010						
ANR	5058418	Symbol	ATTR_TOTAL_CPUS		5058010						
ANR	5058419	Symbol	result		5058010						
ANR	5058420	Symbol	* collects		5058010						
ANR	5058421	Symbol	startdAds		5058010						
ANR	5058422	Symbol	ATTR_TOTAL_MACHINE_DRAINING_BADPUT		5058010						
ANR	5058423	Symbol	collects -> query		5058010						
ANR	5058424	Symbol	daemonCore		5058010						
ANR	5058425	Symbol	startd_ad		5058010						
ANR	5058426	Symbol	collects		5058010						
ANR	5058427	Symbol	avg_badput		5058010						
ANR	5058428	Symbol	getStrQueryResult		5058010						
ANR	5058429	Symbol	NULL		5058010						
ANR	5058430	Symbol	m_stats		5058010						
ANR	5058431	Symbol	cpus		5058010						
ANR	5058432	Symbol	query		5058010						
ANR	5058433	Symbol	D_ALWAYS		5058010						
ANR	5058434	Symbol	ATTR_TOTAL_MACHINE_DRAINING_UNCLAIMED_TIME		5058010						
ANR	5058435	Symbol	badput		5058010						
ANR	5058436	Symbol	Q_OK		5058010						
ANR	5058437	Symbol	m_stats . AvgDrainingBadput		5058010						
ANR	5058438	Symbol	start_time		5058010						
ANR	5058439	Symbol	desired_attrs		5058010						
ANR	5058440	Symbol	* daemonCore		5058010						
ANR	5058441	Symbol	startdAds . Next		5058010						
ANR	5058442	Symbol	ATTR_DAEMON_START_TIME		5058010						
ANR	5058443	Symbol	startdQuery		5058010						
ANR	5058444	Symbol	ATTR_SLOT_ID		5058010						
ANR	5058445	Symbol	age		5058010						
ANR	5058446	Function	Defrag :: countMachines	331:0:9346:10086							
ANR	5058447	FunctionDef	"Defrag :: countMachines (char const * constraint , char const * constraint_source , MachineSet * machines)"		5058446	0					
ANR	5058448	CompoundStatement		332:0:9448:10086	5058446	0					
ANR	5058449	IdentifierDeclStatement	ClassAdList startdAds ;	333:1:9451:9472	5058446	0	True				
ANR	5058450	IdentifierDecl	startdAds		5058446	0					
ANR	5058451	IdentifierDeclType	ClassAdList		5058446	0					
ANR	5058452	Identifier	startdAds		5058446	1					
ANR	5058453	IdentifierDeclStatement	int count = 0 ;	334:1:9475:9488	5058446	1	True				
ANR	5058454	IdentifierDecl	count = 0		5058446	0					
ANR	5058455	IdentifierDeclType	int		5058446	0					
ANR	5058456	Identifier	count		5058446	1					
ANR	5058457	AssignmentExpression	count = 0		5058446	2		=			
ANR	5058458	Identifier	count		5058446	0					
ANR	5058459	PrimaryExpression	0		5058446	1					
ANR	5058460	IfStatement	"if ( ! queryMachines ( constraint , constraint_source , startdAds ) )"		5058446	2					
ANR	5058461	Condition	"! queryMachines ( constraint , constraint_source , startdAds )"	336:5:9496:9549	5058446	0	True				
ANR	5058462	UnaryOperationExpression	"! queryMachines ( constraint , constraint_source , startdAds )"		5058446	0					
ANR	5058463	UnaryOperator	!		5058446	0					
ANR	5058464	CallExpression	"queryMachines ( constraint , constraint_source , startdAds )"		5058446	1					
ANR	5058465	Callee	queryMachines		5058446	0					
ANR	5058466	Identifier	queryMachines		5058446	0					
ANR	5058467	ArgumentList	constraint		5058446	1					
ANR	5058468	Argument	constraint		5058446	0					
ANR	5058469	Identifier	constraint		5058446	0					
ANR	5058470	Argument	constraint_source		5058446	1					
ANR	5058471	Identifier	constraint_source		5058446	0					
ANR	5058472	Argument	startdAds		5058446	2					
ANR	5058473	Identifier	startdAds		5058446	0					
ANR	5058474	CompoundStatement		5:62:104:104	5058446	1					
ANR	5058475	ReturnStatement	return - 1 ;	337:2:9557:9566	5058446	0	True				
ANR	5058476	UnaryOperationExpression	- 1		5058446	0					
ANR	5058477	UnaryOperator	-		5058446	0					
ANR	5058478	PrimaryExpression	1		5058446	1					
ANR	5058479	IdentifierDeclStatement	MachineSet my_machines ;	340:1:9573:9595	5058446	3	True				
ANR	5058480	IdentifierDecl	my_machines		5058446	0					
ANR	5058481	IdentifierDeclType	MachineSet		5058446	0					
ANR	5058482	Identifier	my_machines		5058446	1					
ANR	5058483	IfStatement	if ( ! machines )		5058446	4					
ANR	5058484	Condition	! machines	341:5:9602:9610	5058446	0	True				
ANR	5058485	UnaryOperationExpression	! machines		5058446	0					
ANR	5058486	UnaryOperator	!		5058446	0					
ANR	5058487	Identifier	machines		5058446	1					
ANR	5058488	CompoundStatement		10:17:165:165	5058446	1					
ANR	5058489	ExpressionStatement	machines = & my_machines	342:2:9618:9641	5058446	0	True				
ANR	5058490	AssignmentExpression	machines = & my_machines		5058446	0		=			
ANR	5058491	Identifier	machines		5058446	0					
ANR	5058492	UnaryOperationExpression	& my_machines		5058446	1					
ANR	5058493	UnaryOperator	&		5058446	0					
ANR	5058494	Identifier	my_machines		5058446	1					
ANR	5058495	ExpressionStatement	startdAds . Open ( )	345:1:9648:9664	5058446	5	True				
ANR	5058496	CallExpression	startdAds . Open ( )		5058446	0					
ANR	5058497	Callee	startdAds . Open		5058446	0					
ANR	5058498	MemberAccess	startdAds . Open		5058446	0					
ANR	5058499	Identifier	startdAds		5058446	0					
ANR	5058500	Identifier	Open		5058446	1					
ANR	5058501	ArgumentList			5058446	1					
ANR	5058502	IdentifierDeclStatement	ClassAd * startd_ad ;	346:1:9667:9685	5058446	6	True				
ANR	5058503	IdentifierDecl	* startd_ad		5058446	0					
ANR	5058504	IdentifierDeclType	ClassAd *		5058446	0					
ANR	5058505	Identifier	startd_ad		5058446	1					
ANR	5058506	WhileStatement	while ( ( startd_ad = startdAds . Next ( ) ) )		5058446	7					
ANR	5058507	Condition	startd_ad = startdAds . Next ( )	347:8:9695:9722	5058446	0	True				
ANR	5058508	AssignmentExpression	startd_ad = startdAds . Next ( )		5058446	0		=			
ANR	5058509	Identifier	startd_ad		5058446	0					
ANR	5058510	CallExpression	startdAds . Next ( )		5058446	1					
ANR	5058511	Callee	startdAds . Next		5058446	0					
ANR	5058512	MemberAccess	startdAds . Next		5058446	0					
ANR	5058513	Identifier	startdAds		5058446	0					
ANR	5058514	Identifier	Next		5058446	1					
ANR	5058515	ArgumentList			5058446	1					
ANR	5058516	CompoundStatement		18:2:304:320	5058446	1					
ANR	5058517	IdentifierDeclStatement	std :: string machine ;	348:2:9730:9749	5058446	0	True				
ANR	5058518	IdentifierDecl	machine		5058446	0					
ANR	5058519	IdentifierDeclType	std :: string		5058446	0					
ANR	5058520	Identifier	machine		5058446	1					
ANR	5058521	IdentifierDeclStatement	std :: string name ;	349:2:9753:9769	5058446	1	True				
ANR	5058522	IdentifierDecl	name		5058446	0					
ANR	5058523	IdentifierDeclType	std :: string		5058446	0					
ANR	5058524	Identifier	name		5058446	1					
ANR	5058525	ExpressionStatement	"startd_ad -> LookupString ( ATTR_NAME , name )"	350:2:9773:9812	5058446	2	True				
ANR	5058526	CallExpression	"startd_ad -> LookupString ( ATTR_NAME , name )"		5058446	0					
ANR	5058527	Callee	startd_ad -> LookupString		5058446	0					
ANR	5058528	PtrMemberAccess	startd_ad -> LookupString		5058446	0					
ANR	5058529	Identifier	startd_ad		5058446	0					
ANR	5058530	Identifier	LookupString		5058446	1					
ANR	5058531	ArgumentList	ATTR_NAME		5058446	1					
ANR	5058532	Argument	ATTR_NAME		5058446	0					
ANR	5058533	Identifier	ATTR_NAME		5058446	0					
ANR	5058534	Argument	name		5058446	1					
ANR	5058535	Identifier	name		5058446	0					
ANR	5058536	ExpressionStatement	"slotNameToDaemonName ( name , machine )"	351:2:9816:9850	5058446	3	True				
ANR	5058537	CallExpression	"slotNameToDaemonName ( name , machine )"		5058446	0					
ANR	5058538	Callee	slotNameToDaemonName		5058446	0					
ANR	5058539	Identifier	slotNameToDaemonName		5058446	0					
ANR	5058540	ArgumentList	name		5058446	1					
ANR	5058541	Argument	name		5058446	0					
ANR	5058542	Identifier	name		5058446	0					
ANR	5058543	Argument	machine		5058446	1					
ANR	5058544	Identifier	machine		5058446	0					
ANR	5058545	IfStatement	if ( machines -> count ( machine ) )		5058446	4					
ANR	5058546	Condition	machines -> count ( machine )	353:6:9859:9882	5058446	0	True				
ANR	5058547	CallExpression	machines -> count ( machine )		5058446	0					
ANR	5058548	Callee	machines -> count		5058446	0					
ANR	5058549	PtrMemberAccess	machines -> count		5058446	0					
ANR	5058550	Identifier	machines		5058446	0					
ANR	5058551	Identifier	count		5058446	1					
ANR	5058552	ArgumentList	machine		5058446	1					
ANR	5058553	Argument	machine		5058446	0					
ANR	5058554	Identifier	machine		5058446	0					
ANR	5058555	CompoundStatement		22:33:437:437	5058446	1					
ANR	5058556	ContinueStatement	continue ;	354:3:9891:9899	5058446	0	True				
ANR	5058557	ExpressionStatement	machines -> insert ( machine )	357:2:9908:9933	5058446	5	True				
ANR	5058558	CallExpression	machines -> insert ( machine )		5058446	0					
ANR	5058559	Callee	machines -> insert		5058446	0					
ANR	5058560	PtrMemberAccess	machines -> insert		5058446	0					
ANR	5058561	Identifier	machines		5058446	0					
ANR	5058562	Identifier	insert		5058446	1					
ANR	5058563	ArgumentList	machine		5058446	1					
ANR	5058564	Argument	machine		5058446	0					
ANR	5058565	Identifier	machine		5058446	0					
ANR	5058566	ExpressionStatement	count ++	358:2:9937:9944	5058446	6	True				
ANR	5058567	PostIncDecOperationExpression	count ++		5058446	0					
ANR	5058568	Identifier	count		5058446	0					
ANR	5058569	IncDec	++		5058446	1					
ANR	5058570	ExpressionStatement	startdAds . Close ( )	360:1:9950:9967	5058446	8	True				
ANR	5058571	CallExpression	startdAds . Close ( )		5058446	0					
ANR	5058572	Callee	startdAds . Close		5058446	0					
ANR	5058573	MemberAccess	startdAds . Close		5058446	0					
ANR	5058574	Identifier	startdAds		5058446	0					
ANR	5058575	Identifier	Close		5058446	1					
ANR	5058576	ArgumentList			5058446	1					
ANR	5058577	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Counted %d machines matching %s=%s\\n"" , count , constraint_source , constraint )"	362:1:9971:10069	5058446	9	True				
ANR	5058578	CallExpression	"dprintf ( D_FULLDEBUG , ""Counted %d machines matching %s=%s\\n"" , count , constraint_source , constraint )"		5058446	0					
ANR	5058579	Callee	dprintf		5058446	0					
ANR	5058580	Identifier	dprintf		5058446	0					
ANR	5058581	ArgumentList	D_FULLDEBUG		5058446	1					
ANR	5058582	Argument	D_FULLDEBUG		5058446	0					
ANR	5058583	Identifier	D_FULLDEBUG		5058446	0					
ANR	5058584	Argument	"""Counted %d machines matching %s=%s\\n"""		5058446	1					
ANR	5058585	PrimaryExpression	"""Counted %d machines matching %s=%s\\n"""		5058446	0					
ANR	5058586	Argument	count		5058446	2					
ANR	5058587	Identifier	count		5058446	0					
ANR	5058588	Argument	constraint_source		5058446	3					
ANR	5058589	Identifier	constraint_source		5058446	0					
ANR	5058590	Argument	constraint		5058446	4					
ANR	5058591	Identifier	constraint		5058446	0					
ANR	5058592	ReturnStatement	return count ;	364:1:10072:10084	5058446	10	True				
ANR	5058593	Identifier	count		5058446	0					
ANR	5058594	ReturnType	int		5058446	1					
ANR	5058595	Identifier	Defrag :: countMachines		5058446	2					
ANR	5058596	ParameterList	"char const * constraint , char const * constraint_source , MachineSet * machines"		5058446	3					
ANR	5058597	Parameter	char const * constraint	331:26:9372:9393	5058446	0	True				
ANR	5058598	ParameterType	char const *		5058446	0					
ANR	5058599	Identifier	constraint		5058446	1					
ANR	5058600	Parameter	char const * constraint_source	331:49:9395:9423	5058446	1	True				
ANR	5058601	ParameterType	char const *		5058446	0					
ANR	5058602	Identifier	constraint_source		5058446	1					
ANR	5058603	Parameter	MachineSet * machines	331:80:9426:9445	5058446	2	True				
ANR	5058604	ParameterType	MachineSet *		5058446	0					
ANR	5058605	Identifier	machines		5058446	1					
ANR	5058606	CFGEntryNode	ENTRY		5058446		True				
ANR	5058607	CFGExitNode	EXIT		5058446		True				
ANR	5058608	Symbol	ATTR_NAME		5058446						
ANR	5058609	Symbol	count		5058446						
ANR	5058610	Symbol	D_FULLDEBUG		5058446						
ANR	5058611	Symbol	queryMachines		5058446						
ANR	5058612	Symbol	machines -> count		5058446						
ANR	5058613	Symbol	my_machines		5058446						
ANR	5058614	Symbol	startdAds		5058446						
ANR	5058615	Symbol	* machines		5058446						
ANR	5058616	Symbol	constraint_source		5058446						
ANR	5058617	Symbol	machine		5058446						
ANR	5058618	Symbol	startdAds . Next		5058446						
ANR	5058619	Symbol	name		5058446						
ANR	5058620	Symbol	constraint		5058446						
ANR	5058621	Symbol	machines		5058446						
ANR	5058622	Symbol	startd_ad		5058446						
ANR	5058623	Symbol	& my_machines		5058446						
ANR	5058624	Function	Defrag :: saveState	367:0:10089:10593							
ANR	5058625	FunctionDef	Defrag :: saveState ()		5058624	0					
ANR	5058626	CompoundStatement		368:0:10114:10593	5058624	0					
ANR	5058627	IdentifierDeclStatement	ClassAd ad ;	369:1:10117:10127	5058624	0	True				
ANR	5058628	IdentifierDecl	ad		5058624	0					
ANR	5058629	IdentifierDeclType	ClassAd		5058624	0					
ANR	5058630	Identifier	ad		5058624	1					
ANR	5058631	ExpressionStatement	"ad . Assign ( ATTR_LAST_POLL , ( int ) m_last_poll )"	370:1:10130:10172	5058624	1	True				
ANR	5058632	CallExpression	"ad . Assign ( ATTR_LAST_POLL , ( int ) m_last_poll )"		5058624	0					
ANR	5058633	Callee	ad . Assign		5058624	0					
ANR	5058634	MemberAccess	ad . Assign		5058624	0					
ANR	5058635	Identifier	ad		5058624	0					
ANR	5058636	Identifier	Assign		5058624	1					
ANR	5058637	ArgumentList	ATTR_LAST_POLL		5058624	1					
ANR	5058638	Argument	ATTR_LAST_POLL		5058624	0					
ANR	5058639	Identifier	ATTR_LAST_POLL		5058624	0					
ANR	5058640	Argument	( int ) m_last_poll		5058624	1					
ANR	5058641	CastExpression	( int ) m_last_poll		5058624	0					
ANR	5058642	CastTarget	int		5058624	0					
ANR	5058643	Identifier	m_last_poll		5058624	1					
ANR	5058644	IdentifierDeclStatement	std :: string new_state_file ;	372:1:10176:10202	5058624	2	True				
ANR	5058645	IdentifierDecl	new_state_file		5058624	0					
ANR	5058646	IdentifierDeclType	std :: string		5058624	0					
ANR	5058647	Identifier	new_state_file		5058624	1					
ANR	5058648	ExpressionStatement	"sprintf ( new_state_file , ""%s.new"" , m_state_file . c_str ( ) )"	373:1:10205:10258	5058624	3	True				
ANR	5058649	CallExpression	"sprintf ( new_state_file , ""%s.new"" , m_state_file . c_str ( ) )"		5058624	0					
ANR	5058650	Callee	sprintf		5058624	0					
ANR	5058651	Identifier	sprintf		5058624	0					
ANR	5058652	ArgumentList	new_state_file		5058624	1					
ANR	5058653	Argument	new_state_file		5058624	0					
ANR	5058654	Identifier	new_state_file		5058624	0					
ANR	5058655	Argument	"""%s.new"""		5058624	1					
ANR	5058656	PrimaryExpression	"""%s.new"""		5058624	0					
ANR	5058657	Argument	m_state_file . c_str ( )		5058624	2					
ANR	5058658	CallExpression	m_state_file . c_str ( )		5058624	0					
ANR	5058659	Callee	m_state_file . c_str		5058624	0					
ANR	5058660	MemberAccess	m_state_file . c_str		5058624	0					
ANR	5058661	Identifier	m_state_file		5058624	0					
ANR	5058662	Identifier	c_str		5058624	1					
ANR	5058663	ArgumentList			5058624	1					
ANR	5058664	IdentifierDeclStatement	FILE * fp ;	374:1:10261:10269	5058624	4	True				
ANR	5058665	IdentifierDecl	* fp		5058624	0					
ANR	5058666	IdentifierDeclType	FILE *		5058624	0					
ANR	5058667	Identifier	fp		5058624	1					
ANR	5058668	IfStatement	"if ( ! ( fp = safe_fopen_wrapper_follow ( new_state_file . c_str ( ) , ""w"" ) ) )"		5058624	5					
ANR	5058669	Condition	"! ( fp = safe_fopen_wrapper_follow ( new_state_file . c_str ( ) , ""w"" ) )"	375:5:10276:10337	5058624	0	True				
ANR	5058670	UnaryOperationExpression	"! ( fp = safe_fopen_wrapper_follow ( new_state_file . c_str ( ) , ""w"" ) )"		5058624	0					
ANR	5058671	UnaryOperator	!		5058624	0					
ANR	5058672	AssignmentExpression	"fp = safe_fopen_wrapper_follow ( new_state_file . c_str ( ) , ""w"" )"		5058624	1		=			
ANR	5058673	Identifier	fp		5058624	0					
ANR	5058674	CallExpression	"safe_fopen_wrapper_follow ( new_state_file . c_str ( ) , ""w"" )"		5058624	1					
ANR	5058675	Callee	safe_fopen_wrapper_follow		5058624	0					
ANR	5058676	Identifier	safe_fopen_wrapper_follow		5058624	0					
ANR	5058677	ArgumentList	new_state_file . c_str ( )		5058624	1					
ANR	5058678	Argument	new_state_file . c_str ( )		5058624	0					
ANR	5058679	CallExpression	new_state_file . c_str ( )		5058624	0					
ANR	5058680	Callee	new_state_file . c_str		5058624	0					
ANR	5058681	MemberAccess	new_state_file . c_str		5058624	0					
ANR	5058682	Identifier	new_state_file		5058624	0					
ANR	5058683	Identifier	c_str		5058624	1					
ANR	5058684	ArgumentList			5058624	1					
ANR	5058685	Argument	"""w"""		5058624	1					
ANR	5058686	PrimaryExpression	"""w"""		5058624	0					
ANR	5058687	CompoundStatement		8:70:226:226	5058624	1					
ANR	5058688	ExpressionStatement	"EXCEPT ( ""failed to save state to %s\\n"" , new_state_file . c_str ( ) )"	376:2:10345:10406	5058624	0	True				
ANR	5058689	CallExpression	"EXCEPT ( ""failed to save state to %s\\n"" , new_state_file . c_str ( ) )"		5058624	0					
ANR	5058690	Callee	EXCEPT		5058624	0					
ANR	5058691	Identifier	EXCEPT		5058624	0					
ANR	5058692	ArgumentList	"""failed to save state to %s\\n"""		5058624	1					
ANR	5058693	Argument	"""failed to save state to %s\\n"""		5058624	0					
ANR	5058694	PrimaryExpression	"""failed to save state to %s\\n"""		5058624	0					
ANR	5058695	Argument	new_state_file . c_str ( )		5058624	1					
ANR	5058696	CallExpression	new_state_file . c_str ( )		5058624	0					
ANR	5058697	Callee	new_state_file . c_str		5058624	0					
ANR	5058698	MemberAccess	new_state_file . c_str		5058624	0					
ANR	5058699	Identifier	new_state_file		5058624	0					
ANR	5058700	Identifier	c_str		5058624	1					
ANR	5058701	ArgumentList			5058624	1					
ANR	5058702	ElseStatement	else		5058624	0					
ANR	5058703	CompoundStatement		11:6:302:302	5058624	0					
ANR	5058704	ExpressionStatement	ad . fPrint ( fp )	379:2:10421:10434	5058624	0	True				
ANR	5058705	CallExpression	ad . fPrint ( fp )		5058624	0					
ANR	5058706	Callee	ad . fPrint		5058624	0					
ANR	5058707	MemberAccess	ad . fPrint		5058624	0					
ANR	5058708	Identifier	ad		5058624	0					
ANR	5058709	Identifier	fPrint		5058624	1					
ANR	5058710	ArgumentList	fp		5058624	1					
ANR	5058711	Argument	fp		5058624	0					
ANR	5058712	Identifier	fp		5058624	0					
ANR	5058713	ExpressionStatement	fclose ( fp )	380:2:10438:10450	5058624	1	True				
ANR	5058714	CallExpression	fclose ( fp )		5058624	0					
ANR	5058715	Callee	fclose		5058624	0					
ANR	5058716	Identifier	fclose		5058624	0					
ANR	5058717	ArgumentList	fp		5058624	1					
ANR	5058718	Argument	fp		5058624	0					
ANR	5058719	Identifier	fp		5058624	0					
ANR	5058720	IfStatement	"if ( rotate_file ( new_state_file . c_str ( ) , m_state_file . c_str ( ) ) != 0 )"		5058624	2					
ANR	5058721	Condition	"rotate_file ( new_state_file . c_str ( ) , m_state_file . c_str ( ) ) != 0"	381:6:10458:10516	5058624	0	True				
ANR	5058722	EqualityExpression	"rotate_file ( new_state_file . c_str ( ) , m_state_file . c_str ( ) ) != 0"		5058624	0		!=			
ANR	5058723	CallExpression	"rotate_file ( new_state_file . c_str ( ) , m_state_file . c_str ( ) )"		5058624	0					
ANR	5058724	Callee	rotate_file		5058624	0					
ANR	5058725	Identifier	rotate_file		5058624	0					
ANR	5058726	ArgumentList	new_state_file . c_str ( )		5058624	1					
ANR	5058727	Argument	new_state_file . c_str ( )		5058624	0					
ANR	5058728	CallExpression	new_state_file . c_str ( )		5058624	0					
ANR	5058729	Callee	new_state_file . c_str		5058624	0					
ANR	5058730	MemberAccess	new_state_file . c_str		5058624	0					
ANR	5058731	Identifier	new_state_file		5058624	0					
ANR	5058732	Identifier	c_str		5058624	1					
ANR	5058733	ArgumentList			5058624	1					
ANR	5058734	Argument	m_state_file . c_str ( )		5058624	1					
ANR	5058735	CallExpression	m_state_file . c_str ( )		5058624	0					
ANR	5058736	Callee	m_state_file . c_str		5058624	0					
ANR	5058737	MemberAccess	m_state_file . c_str		5058624	0					
ANR	5058738	Identifier	m_state_file		5058624	0					
ANR	5058739	Identifier	c_str		5058624	1					
ANR	5058740	ArgumentList			5058624	1					
ANR	5058741	PrimaryExpression	0		5058624	1					
ANR	5058742	CompoundStatement		14:68:405:405	5058624	1					
ANR	5058743	ExpressionStatement	"EXCEPT ( ""failed to save state to %s\\n"" , m_state_file . c_str ( ) )"	382:3:10525:10584	5058624	0	True				
ANR	5058744	CallExpression	"EXCEPT ( ""failed to save state to %s\\n"" , m_state_file . c_str ( ) )"		5058624	0					
ANR	5058745	Callee	EXCEPT		5058624	0					
ANR	5058746	Identifier	EXCEPT		5058624	0					
ANR	5058747	ArgumentList	"""failed to save state to %s\\n"""		5058624	1					
ANR	5058748	Argument	"""failed to save state to %s\\n"""		5058624	0					
ANR	5058749	PrimaryExpression	"""failed to save state to %s\\n"""		5058624	0					
ANR	5058750	Argument	m_state_file . c_str ( )		5058624	1					
ANR	5058751	CallExpression	m_state_file . c_str ( )		5058624	0					
ANR	5058752	Callee	m_state_file . c_str		5058624	0					
ANR	5058753	MemberAccess	m_state_file . c_str		5058624	0					
ANR	5058754	Identifier	m_state_file		5058624	0					
ANR	5058755	Identifier	c_str		5058624	1					
ANR	5058756	ArgumentList			5058624	1					
ANR	5058757	ReturnType	void		5058624	1					
ANR	5058758	Identifier	Defrag :: saveState		5058624	2					
ANR	5058759	ParameterList			5058624	3					
ANR	5058760	CFGEntryNode	ENTRY		5058624		True				
ANR	5058761	CFGExitNode	EXIT		5058624		True				
ANR	5058762	Symbol	new_state_file		5058624						
ANR	5058763	Symbol	ad		5058624						
ANR	5058764	Symbol	m_last_poll		5058624						
ANR	5058765	Symbol	m_state_file		5058624						
ANR	5058766	Symbol	fp		5058624						
ANR	5058767	Symbol	new_state_file . c_str		5058624						
ANR	5058768	Symbol	rotate_file		5058624						
ANR	5058769	Symbol	m_state_file . c_str		5058624						
ANR	5058770	Symbol	safe_fopen_wrapper_follow		5058624						
ANR	5058771	Symbol	ATTR_LAST_POLL		5058624						
ANR	5058772	Function	Defrag :: loadState	387:0:10596:11346							
ANR	5058773	FunctionDef	Defrag :: loadState ()		5058772	0					
ANR	5058774	CompoundStatement		388:0:10621:11346	5058772	0					
ANR	5058775	IdentifierDeclStatement	FILE * fp ;	389:1:10624:10632	5058772	0	True				
ANR	5058776	IdentifierDecl	* fp		5058772	0					
ANR	5058777	IdentifierDeclType	FILE *		5058772	0					
ANR	5058778	Identifier	fp		5058772	1					
ANR	5058779	IfStatement	"if ( ! ( fp = safe_fopen_wrapper_follow ( m_state_file . c_str ( ) , ""r"" ) ) )"		5058772	1					
ANR	5058780	Condition	"! ( fp = safe_fopen_wrapper_follow ( m_state_file . c_str ( ) , ""r"" ) )"	390:5:10639:10698	5058772	0	True				
ANR	5058781	UnaryOperationExpression	"! ( fp = safe_fopen_wrapper_follow ( m_state_file . c_str ( ) , ""r"" ) )"		5058772	0					
ANR	5058782	UnaryOperator	!		5058772	0					
ANR	5058783	AssignmentExpression	"fp = safe_fopen_wrapper_follow ( m_state_file . c_str ( ) , ""r"" )"		5058772	1		=			
ANR	5058784	Identifier	fp		5058772	0					
ANR	5058785	CallExpression	"safe_fopen_wrapper_follow ( m_state_file . c_str ( ) , ""r"" )"		5058772	1					
ANR	5058786	Callee	safe_fopen_wrapper_follow		5058772	0					
ANR	5058787	Identifier	safe_fopen_wrapper_follow		5058772	0					
ANR	5058788	ArgumentList	m_state_file . c_str ( )		5058772	1					
ANR	5058789	Argument	m_state_file . c_str ( )		5058772	0					
ANR	5058790	CallExpression	m_state_file . c_str ( )		5058772	0					
ANR	5058791	Callee	m_state_file . c_str		5058772	0					
ANR	5058792	MemberAccess	m_state_file . c_str		5058772	0					
ANR	5058793	Identifier	m_state_file		5058772	0					
ANR	5058794	Identifier	c_str		5058772	1					
ANR	5058795	ArgumentList			5058772	1					
ANR	5058796	Argument	"""r"""		5058772	1					
ANR	5058797	PrimaryExpression	"""r"""		5058772	0					
ANR	5058798	CompoundStatement		3:68:80:80	5058772	1					
ANR	5058799	IfStatement	if ( errno == ENOENT )		5058772	0					
ANR	5058800	Condition	errno == ENOENT	391:6:10710:10724	5058772	0	True				
ANR	5058801	EqualityExpression	errno == ENOENT		5058772	0		==			
ANR	5058802	Identifier	errno		5058772	0					
ANR	5058803	Identifier	ENOENT		5058772	1					
ANR	5058804	CompoundStatement		4:24:106:106	5058772	1					
ANR	5058805	ExpressionStatement	"dprintf ( D_ALWAYS , ""State file %s does not yet exist.\\n"" , m_state_file . c_str ( ) )"	392:3:10733:10809	5058772	0	True				
ANR	5058806	CallExpression	"dprintf ( D_ALWAYS , ""State file %s does not yet exist.\\n"" , m_state_file . c_str ( ) )"		5058772	0					
ANR	5058807	Callee	dprintf		5058772	0					
ANR	5058808	Identifier	dprintf		5058772	0					
ANR	5058809	ArgumentList	D_ALWAYS		5058772	1					
ANR	5058810	Argument	D_ALWAYS		5058772	0					
ANR	5058811	Identifier	D_ALWAYS		5058772	0					
ANR	5058812	Argument	"""State file %s does not yet exist.\\n"""		5058772	1					
ANR	5058813	PrimaryExpression	"""State file %s does not yet exist.\\n"""		5058772	0					
ANR	5058814	Argument	m_state_file . c_str ( )		5058772	2					
ANR	5058815	CallExpression	m_state_file . c_str ( )		5058772	0					
ANR	5058816	Callee	m_state_file . c_str		5058772	0					
ANR	5058817	MemberAccess	m_state_file . c_str		5058772	0					
ANR	5058818	Identifier	m_state_file		5058772	0					
ANR	5058819	Identifier	c_str		5058772	1					
ANR	5058820	ArgumentList			5058772	1					
ANR	5058821	ElseStatement	else		5058772	0					
ANR	5058822	CompoundStatement		7:7:200:200	5058772	0					
ANR	5058823	ExpressionStatement	"EXCEPT ( ""failed to load state from %s\\n"" , m_state_file . c_str ( ) )"	395:3:10827:10888	5058772	0	True				
ANR	5058824	CallExpression	"EXCEPT ( ""failed to load state from %s\\n"" , m_state_file . c_str ( ) )"		5058772	0					
ANR	5058825	Callee	EXCEPT		5058772	0					
ANR	5058826	Identifier	EXCEPT		5058772	0					
ANR	5058827	ArgumentList	"""failed to load state from %s\\n"""		5058772	1					
ANR	5058828	Argument	"""failed to load state from %s\\n"""		5058772	0					
ANR	5058829	PrimaryExpression	"""failed to load state from %s\\n"""		5058772	0					
ANR	5058830	Argument	m_state_file . c_str ( )		5058772	1					
ANR	5058831	CallExpression	m_state_file . c_str ( )		5058772	0					
ANR	5058832	Callee	m_state_file . c_str		5058772	0					
ANR	5058833	MemberAccess	m_state_file . c_str		5058772	0					
ANR	5058834	Identifier	m_state_file		5058772	0					
ANR	5058835	Identifier	c_str		5058772	1					
ANR	5058836	ArgumentList			5058772	1					
ANR	5058837	ElseStatement	else		5058772	0					
ANR	5058838	CompoundStatement		20:2:534:566	5058772	0					
ANR	5058839	IdentifierDeclStatement	"int isEOF = 0 , errorReadingAd = 0 , adEmpty = 0 ;"	399:2:10907:10947	5058772	0	True				
ANR	5058840	IdentifierDecl	isEOF = 0		5058772	0					
ANR	5058841	IdentifierDeclType	int		5058772	0					
ANR	5058842	Identifier	isEOF		5058772	1					
ANR	5058843	AssignmentExpression	isEOF = 0		5058772	2		=			
ANR	5058844	Identifier	isEOF		5058772	0					
ANR	5058845	PrimaryExpression	0		5058772	1					
ANR	5058846	IdentifierDecl	errorReadingAd = 0		5058772	1					
ANR	5058847	IdentifierDeclType	int		5058772	0					
ANR	5058848	Identifier	errorReadingAd		5058772	1					
ANR	5058849	AssignmentExpression	errorReadingAd = 0		5058772	2		=			
ANR	5058850	Identifier	errorReadingAd		5058772	0					
ANR	5058851	PrimaryExpression	0		5058772	1					
ANR	5058852	IdentifierDecl	adEmpty = 0		5058772	2					
ANR	5058853	IdentifierDeclType	int		5058772	0					
ANR	5058854	Identifier	adEmpty		5058772	1					
ANR	5058855	AssignmentExpression	adEmpty = 0		5058772	2		=			
ANR	5058856	Identifier	adEmpty		5058772	0					
ANR	5058857	PrimaryExpression	0		5058772	1					
ANR	5058858	IdentifierDeclStatement	"ClassAd * ad = new ClassAd ( fp , ""..."" , isEOF , errorReadingAd , adEmpty ) ;"	400:2:10951:11019	5058772	1	True				
ANR	5058859	IdentifierDecl	"* ad = new ClassAd ( fp , ""..."" , isEOF , errorReadingAd , adEmpty )"		5058772	0					
ANR	5058860	IdentifierDeclType	ClassAd *		5058772	0					
ANR	5058861	Identifier	ad		5058772	1					
ANR	5058862	AssignmentExpression	"* ad = new ClassAd ( fp , ""..."" , isEOF , errorReadingAd , adEmpty )"		5058772	2		=			
ANR	5058863	Identifier	ad		5058772	0					
ANR	5058864	Expression	"fp , ""..."" , isEOF , errorReadingAd , adEmpty"		5058772	1					
ANR	5058865	Identifier	fp		5058772	0					
ANR	5058866	Expression	"""..."" , isEOF , errorReadingAd , adEmpty"		5058772	1					
ANR	5058867	PrimaryExpression	"""..."""		5058772	0					
ANR	5058868	Expression	"isEOF , errorReadingAd , adEmpty"		5058772	1					
ANR	5058869	Identifier	isEOF		5058772	0					
ANR	5058870	Expression	"errorReadingAd , adEmpty"		5058772	1					
ANR	5058871	Identifier	errorReadingAd		5058772	0					
ANR	5058872	Identifier	adEmpty		5058772	1					
ANR	5058873	ExpressionStatement	fclose ( fp )	401:2:11023:11035	5058772	2	True				
ANR	5058874	CallExpression	fclose ( fp )		5058772	0					
ANR	5058875	Callee	fclose		5058772	0					
ANR	5058876	Identifier	fclose		5058772	0					
ANR	5058877	ArgumentList	fp		5058772	1					
ANR	5058878	Argument	fp		5058772	0					
ANR	5058879	Identifier	fp		5058772	0					
ANR	5058880	IfStatement	if ( errorReadingAd )		5058772	3					
ANR	5058881	Condition	errorReadingAd	403:6:11044:11057	5058772	0	True				
ANR	5058882	Identifier	errorReadingAd		5058772	0					
ANR	5058883	CompoundStatement		16:23:439:439	5058772	1					
ANR	5058884	ExpressionStatement	"dprintf ( D_ALWAYS , ""WARNING: failed to parse state from %s\\n"" , m_state_file . c_str ( ) )"	404:3:11066:11147	5058772	0	True				
ANR	5058885	CallExpression	"dprintf ( D_ALWAYS , ""WARNING: failed to parse state from %s\\n"" , m_state_file . c_str ( ) )"		5058772	0					
ANR	5058886	Callee	dprintf		5058772	0					
ANR	5058887	Identifier	dprintf		5058772	0					
ANR	5058888	ArgumentList	D_ALWAYS		5058772	1					
ANR	5058889	Argument	D_ALWAYS		5058772	0					
ANR	5058890	Identifier	D_ALWAYS		5058772	0					
ANR	5058891	Argument	"""WARNING: failed to parse state from %s\\n"""		5058772	1					
ANR	5058892	PrimaryExpression	"""WARNING: failed to parse state from %s\\n"""		5058772	0					
ANR	5058893	Argument	m_state_file . c_str ( )		5058772	2					
ANR	5058894	CallExpression	m_state_file . c_str ( )		5058772	0					
ANR	5058895	Callee	m_state_file . c_str		5058772	0					
ANR	5058896	MemberAccess	m_state_file . c_str		5058772	0					
ANR	5058897	Identifier	m_state_file		5058772	0					
ANR	5058898	Identifier	c_str		5058772	1					
ANR	5058899	ArgumentList			5058772	1					
ANR	5058900	IdentifierDeclStatement	int timestamp = ( int ) m_last_poll ;	407:2:11156:11188	5058772	4	True				
ANR	5058901	IdentifierDecl	timestamp = ( int ) m_last_poll		5058772	0					
ANR	5058902	IdentifierDeclType	int		5058772	0					
ANR	5058903	Identifier	timestamp		5058772	1					
ANR	5058904	AssignmentExpression	timestamp = ( int ) m_last_poll		5058772	2		=			
ANR	5058905	Identifier	timestamp		5058772	0					
ANR	5058906	CastExpression	( int ) m_last_poll		5058772	1					
ANR	5058907	CastTarget	int		5058772	0					
ANR	5058908	Identifier	m_last_poll		5058772	1					
ANR	5058909	ExpressionStatement	"ad -> LookupInteger ( ATTR_LAST_POLL , timestamp )"	408:2:11192:11235	5058772	5	True				
ANR	5058910	CallExpression	"ad -> LookupInteger ( ATTR_LAST_POLL , timestamp )"		5058772	0					
ANR	5058911	Callee	ad -> LookupInteger		5058772	0					
ANR	5058912	PtrMemberAccess	ad -> LookupInteger		5058772	0					
ANR	5058913	Identifier	ad		5058772	0					
ANR	5058914	Identifier	LookupInteger		5058772	1					
ANR	5058915	ArgumentList	ATTR_LAST_POLL		5058772	1					
ANR	5058916	Argument	ATTR_LAST_POLL		5058772	0					
ANR	5058917	Identifier	ATTR_LAST_POLL		5058772	0					
ANR	5058918	Argument	timestamp		5058772	1					
ANR	5058919	Identifier	timestamp		5058772	0					
ANR	5058920	ExpressionStatement	m_last_poll = ( time_t ) timestamp	409:2:11239:11270	5058772	6	True				
ANR	5058921	AssignmentExpression	m_last_poll = ( time_t ) timestamp		5058772	0		=			
ANR	5058922	Identifier	m_last_poll		5058772	0					
ANR	5058923	CastExpression	( time_t ) timestamp		5058772	1					
ANR	5058924	CastTarget	time_t		5058772	0					
ANR	5058925	Identifier	timestamp		5058772	1					
ANR	5058926	ExpressionStatement	"dprintf ( D_ALWAYS , ""Last poll: %d\\n"" , ( int ) m_last_poll )"	411:2:11275:11327	5058772	7	True				
ANR	5058927	CallExpression	"dprintf ( D_ALWAYS , ""Last poll: %d\\n"" , ( int ) m_last_poll )"		5058772	0					
ANR	5058928	Callee	dprintf		5058772	0					
ANR	5058929	Identifier	dprintf		5058772	0					
ANR	5058930	ArgumentList	D_ALWAYS		5058772	1					
ANR	5058931	Argument	D_ALWAYS		5058772	0					
ANR	5058932	Identifier	D_ALWAYS		5058772	0					
ANR	5058933	Argument	"""Last poll: %d\\n"""		5058772	1					
ANR	5058934	PrimaryExpression	"""Last poll: %d\\n"""		5058772	0					
ANR	5058935	Argument	( int ) m_last_poll		5058772	2					
ANR	5058936	CastExpression	( int ) m_last_poll		5058772	0					
ANR	5058937	CastTarget	int		5058772	0					
ANR	5058938	Identifier	m_last_poll		5058772	1					
ANR	5058939	Statement	delete	413:2:11332:11337	5058772	8	True				
ANR	5058940	ExpressionStatement	ad	413:9:11339:11341	5058772	9	True				
ANR	5058941	Identifier	ad		5058772	0					
ANR	5058942	ReturnType	void		5058772	1					
ANR	5058943	Identifier	Defrag :: loadState		5058772	2					
ANR	5058944	ParameterList			5058772	3					
ANR	5058945	CFGEntryNode	ENTRY		5058772		True				
ANR	5058946	CFGExitNode	EXIT		5058772		True				
ANR	5058947	Symbol	errno		5058772						
ANR	5058948	Symbol	ad		5058772						
ANR	5058949	Symbol	D_ALWAYS		5058772						
ANR	5058950	Symbol	fp		5058772						
ANR	5058951	Symbol	adEmpty		5058772						
ANR	5058952	Symbol	ENOENT		5058772						
ANR	5058953	Symbol	isEOF		5058772						
ANR	5058954	Symbol	ATTR_LAST_POLL		5058772						
ANR	5058955	Symbol	m_state_file		5058772						
ANR	5058956	Symbol	errorReadingAd		5058772						
ANR	5058957	Symbol	m_last_poll		5058772						
ANR	5058958	Symbol	m_state_file . c_str		5058772						
ANR	5058959	Symbol	safe_fopen_wrapper_follow		5058772						
ANR	5058960	Symbol	timestamp		5058772						
ANR	5058961	Function	Defrag :: slotNameToDaemonName	417:0:11349:11575							
ANR	5058962	FunctionDef	"Defrag :: slotNameToDaemonName (std :: string const & name , std :: string & machine)"		5058961	0					
ANR	5058963	CompoundStatement		418:0:11429:11575	5058961	0					
ANR	5058964	IdentifierDeclStatement	size_t pos = name . find ( '@' ) ;	419:1:11432:11459	5058961	0	True				
ANR	5058965	IdentifierDecl	pos = name . find ( '@' )		5058961	0					
ANR	5058966	IdentifierDeclType	size_t		5058961	0					
ANR	5058967	Identifier	pos		5058961	1					
ANR	5058968	AssignmentExpression	pos = name . find ( '@' )		5058961	2		=			
ANR	5058969	Identifier	pos		5058961	0					
ANR	5058970	CallExpression	name . find ( '@' )		5058961	1					
ANR	5058971	Callee	name . find		5058961	0					
ANR	5058972	MemberAccess	name . find		5058961	0					
ANR	5058973	Identifier	name		5058961	0					
ANR	5058974	Identifier	find		5058961	1					
ANR	5058975	ArgumentList	'@'		5058961	1					
ANR	5058976	Argument	'@'		5058961	0					
ANR	5058977	PrimaryExpression	'@'		5058961	0					
ANR	5058978	IfStatement	if ( pos == std :: string :: npos )		5058961	1					
ANR	5058979	Condition	pos == std :: string :: npos	420:5:11466:11489	5058961	0	True				
ANR	5058980	EqualityExpression	pos == std :: string :: npos		5058961	0		==			
ANR	5058981	Identifier	pos		5058961	0					
ANR	5058982	Identifier	std :: string :: npos		5058961	1					
ANR	5058983	CompoundStatement		3:32:63:63	5058961	1					
ANR	5058984	ExpressionStatement	machine = name	421:2:11497:11511	5058961	0	True				
ANR	5058985	AssignmentExpression	machine = name		5058961	0		=			
ANR	5058986	Identifier	machine		5058961	0					
ANR	5058987	Identifier	name		5058961	1					
ANR	5058988	ElseStatement	else		5058961	0					
ANR	5058989	CompoundStatement		6:6:92:92	5058961	0					
ANR	5058990	ExpressionStatement	"machine . append ( name , pos + 1 , name . size ( ) - pos - 1 )"	424:2:11526:11570	5058961	0	True				
ANR	5058991	CallExpression	"machine . append ( name , pos + 1 , name . size ( ) - pos - 1 )"		5058961	0					
ANR	5058992	Callee	machine . append		5058961	0					
ANR	5058993	MemberAccess	machine . append		5058961	0					
ANR	5058994	Identifier	machine		5058961	0					
ANR	5058995	Identifier	append		5058961	1					
ANR	5058996	ArgumentList	name		5058961	1					
ANR	5058997	Argument	name		5058961	0					
ANR	5058998	Identifier	name		5058961	0					
ANR	5058999	Argument	pos + 1		5058961	1					
ANR	5059000	AdditiveExpression	pos + 1		5058961	0		+			
ANR	5059001	Identifier	pos		5058961	0					
ANR	5059002	PrimaryExpression	1		5058961	1					
ANR	5059003	Argument	name . size ( ) - pos - 1		5058961	2					
ANR	5059004	AdditiveExpression	name . size ( ) - pos - 1		5058961	0		-			
ANR	5059005	CallExpression	name . size ( )		5058961	0					
ANR	5059006	Callee	name . size		5058961	0					
ANR	5059007	MemberAccess	name . size		5058961	0					
ANR	5059008	Identifier	name		5058961	0					
ANR	5059009	Identifier	size		5058961	1					
ANR	5059010	ArgumentList			5058961	1					
ANR	5059011	AdditiveExpression	pos - 1		5058961	1		-			
ANR	5059012	Identifier	pos		5058961	0					
ANR	5059013	PrimaryExpression	1		5058961	1					
ANR	5059014	ReturnType	void		5058961	1					
ANR	5059015	Identifier	Defrag :: slotNameToDaemonName		5058961	2					
ANR	5059016	ParameterList	"std :: string const & name , std :: string & machine"		5058961	3					
ANR	5059017	Parameter	std :: string const & name	417:34:11383:11405	5058961	0	True				
ANR	5059018	ParameterType	std :: string const &		5058961	0					
ANR	5059019	Identifier	name		5058961	1					
ANR	5059020	Parameter	std :: string & machine	417:58:11407:11426	5058961	1	True				
ANR	5059021	ParameterType	std :: string &		5058961	0					
ANR	5059022	Identifier	machine		5058961	1					
ANR	5059023	CFGEntryNode	ENTRY		5058961		True				
ANR	5059024	CFGExitNode	EXIT		5058961		True				
ANR	5059025	Symbol	std :: string :: npos		5058961						
ANR	5059026	Symbol	pos		5058961						
ANR	5059027	Symbol	machine		5058961						
ANR	5059028	Symbol	name		5058961						
ANR	5059029	Symbol	name . size		5058961						
ANR	5059030	Symbol	name . find		5058961						
ANR	5059031	Function	prorate	431:0:11698:12191							
ANR	5059032	FunctionDef	"prorate (int n , int time_remaining , int period , int granularity)"		5059031	0					
ANR	5059033	CompoundStatement		432:0:11770:12191	5059031	0					
ANR	5059034	IdentifierDeclStatement	double frac = ( ( double ) time_remaining ) / period ;	433:1:11773:11818	5059031	0	True				
ANR	5059035	IdentifierDecl	frac = ( ( double ) time_remaining ) / period		5059031	0					
ANR	5059036	IdentifierDeclType	double		5059031	0					
ANR	5059037	Identifier	frac		5059031	1					
ANR	5059038	AssignmentExpression	frac = ( ( double ) time_remaining ) / period		5059031	2		=			
ANR	5059039	Identifier	frac		5059031	0					
ANR	5059040	MultiplicativeExpression	( ( double ) time_remaining ) / period		5059031	1		/			
ANR	5059041	CastExpression	( double ) time_remaining		5059031	0					
ANR	5059042	CastTarget	double		5059031	0					
ANR	5059043	Identifier	time_remaining		5059031	1					
ANR	5059044	Identifier	period		5059031	1					
ANR	5059045	ExpressionStatement	frac += ( ( double ) granularity ) / period	438:1:11937:11973	5059031	1	True				
ANR	5059046	AssignmentExpression	frac += ( ( double ) granularity ) / period		5059031	0		+=			
ANR	5059047	Identifier	frac		5059031	0					
ANR	5059048	MultiplicativeExpression	( ( double ) granularity ) / period		5059031	1		/			
ANR	5059049	CastExpression	( double ) granularity		5059031	0					
ANR	5059050	CastTarget	double		5059031	0					
ANR	5059051	Identifier	granularity		5059031	1					
ANR	5059052	Identifier	period		5059031	1					
ANR	5059053	IdentifierDeclStatement	int answer = ( int ) floor ( n * frac + 0.5 ) ;	440:1:11977:12014	5059031	2	True				
ANR	5059054	IdentifierDecl	answer = ( int ) floor ( n * frac + 0.5 )		5059031	0					
ANR	5059055	IdentifierDeclType	int		5059031	0					
ANR	5059056	Identifier	answer		5059031	1					
ANR	5059057	AssignmentExpression	answer = ( int ) floor ( n * frac + 0.5 )		5059031	2		=			
ANR	5059058	Identifier	answer		5059031	0					
ANR	5059059	CastExpression	( int ) floor ( n * frac + 0.5 )		5059031	1					
ANR	5059060	CastTarget	int		5059031	0					
ANR	5059061	CallExpression	floor ( n * frac + 0.5 )		5059031	1					
ANR	5059062	Callee	floor		5059031	0					
ANR	5059063	Identifier	floor		5059031	0					
ANR	5059064	ArgumentList	n * frac + 0.5		5059031	1					
ANR	5059065	Argument	n * frac + 0.5		5059031	0					
ANR	5059066	AdditiveExpression	n * frac + 0.5		5059031	0		+			
ANR	5059067	MultiplicativeExpression	n * frac		5059031	0		*			
ANR	5059068	Identifier	n		5059031	0					
ANR	5059069	Identifier	frac		5059031	1					
ANR	5059070	PrimaryExpression	0.5		5059031	1					
ANR	5059071	IfStatement	if ( ( n > 0 && answer > n ) || ( n < 0 && answer < n ) )		5059031	3					
ANR	5059072	Condition	( n > 0 && answer > n ) || ( n < 0 && answer < n )	442:5:12022:12067	5059031	0	True				
ANR	5059073	OrExpression	( n > 0 && answer > n ) || ( n < 0 && answer < n )		5059031	0		||			
ANR	5059074	AndExpression	n > 0 && answer > n		5059031	0		&&			
ANR	5059075	RelationalExpression	n > 0		5059031	0		>			
ANR	5059076	Identifier	n		5059031	0					
ANR	5059077	PrimaryExpression	0		5059031	1					
ANR	5059078	RelationalExpression	answer > n		5059031	1		>			
ANR	5059079	Identifier	answer		5059031	0					
ANR	5059080	Identifier	n		5059031	1					
ANR	5059081	AndExpression	n < 0 && answer < n		5059031	1		&&			
ANR	5059082	RelationalExpression	n < 0		5059031	0		<			
ANR	5059083	Identifier	n		5059031	0					
ANR	5059084	PrimaryExpression	0		5059031	1					
ANR	5059085	RelationalExpression	answer < n		5059031	1		<			
ANR	5059086	Identifier	answer		5059031	0					
ANR	5059087	Identifier	n		5059031	1					
ANR	5059088	CompoundStatement		11:54:300:300	5059031	1					
ANR	5059089	ReturnStatement	return n ;	443:2:12075:12083	5059031	0	True				
ANR	5059090	Identifier	n		5059031	0					
ANR	5059091	IfStatement	if ( answer * n < 0 )		5059031	4					
ANR	5059092	Condition	answer * n < 0	445:5:12124:12135	5059031	0	True				
ANR	5059093	RelationalExpression	answer * n < 0		5059031	0		<			
ANR	5059094	MultiplicativeExpression	answer * n		5059031	0		*			
ANR	5059095	Identifier	answer		5059031	0					
ANR	5059096	Identifier	n		5059031	1					
ANR	5059097	PrimaryExpression	0		5059031	1					
ANR	5059098	CompoundStatement		14:20:368:368	5059031	1					
ANR	5059099	ReturnStatement	return 0 ;	446:2:12162:12170	5059031	0	True				
ANR	5059100	PrimaryExpression	0		5059031	0					
ANR	5059101	ReturnStatement	return answer ;	448:1:12176:12189	5059031	5	True				
ANR	5059102	Identifier	answer		5059031	0					
ANR	5059103	ReturnType	static int		5059031	1					
ANR	5059104	Identifier	prorate		5059031	2					
ANR	5059105	ParameterList	"int n , int time_remaining , int period , int granularity"		5059031	3					
ANR	5059106	Parameter	int n	431:19:11717:11721	5059031	0	True				
ANR	5059107	ParameterType	int		5059031	0					
ANR	5059108	Identifier	n		5059031	1					
ANR	5059109	Parameter	int time_remaining	431:25:11723:11740	5059031	1	True				
ANR	5059110	ParameterType	int		5059031	0					
ANR	5059111	Identifier	time_remaining		5059031	1					
ANR	5059112	Parameter	int period	431:44:11742:11751	5059031	2	True				
ANR	5059113	ParameterType	int		5059031	0					
ANR	5059114	Identifier	period		5059031	1					
ANR	5059115	Parameter	int granularity	431:55:11753:11767	5059031	3	True				
ANR	5059116	ParameterType	int		5059031	0					
ANR	5059117	Identifier	granularity		5059031	1					
ANR	5059118	CFGEntryNode	ENTRY		5059031		True				
ANR	5059119	CFGExitNode	EXIT		5059031		True				
ANR	5059120	Symbol	time_remaining		5059031						
ANR	5059121	Symbol	period		5059031						
ANR	5059122	Symbol	answer		5059031						
ANR	5059123	Symbol	granularity		5059031						
ANR	5059124	Symbol	floor		5059031						
ANR	5059125	Symbol	n		5059031						
ANR	5059126	Symbol	frac		5059031						
ANR	5059127	Function	Defrag :: poll	451:0:12194:16851							
ANR	5059128	FunctionDef	Defrag :: poll ()		5059127	0					
ANR	5059129	CompoundStatement		452:0:12214:16851	5059127	0					
ANR	5059130	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Evaluating defragmentation policy.\\n"" )"	453:1:12217:12276	5059127	0	True				
ANR	5059131	CallExpression	"dprintf ( D_FULLDEBUG , ""Evaluating defragmentation policy.\\n"" )"		5059127	0					
ANR	5059132	Callee	dprintf		5059127	0					
ANR	5059133	Identifier	dprintf		5059127	0					
ANR	5059134	ArgumentList	D_FULLDEBUG		5059127	1					
ANR	5059135	Argument	D_FULLDEBUG		5059127	0					
ANR	5059136	Identifier	D_FULLDEBUG		5059127	0					
ANR	5059137	Argument	"""Evaluating defragmentation policy.\\n"""		5059127	1					
ANR	5059138	PrimaryExpression	"""Evaluating defragmentation policy.\\n"""		5059127	0					
ANR	5059139	IdentifierDeclStatement	time_t now = time ( NULL ) ;	461:1:12553:12576	5059127	1	True				
ANR	5059140	IdentifierDecl	now = time ( NULL )		5059127	0					
ANR	5059141	IdentifierDeclType	time_t		5059127	0					
ANR	5059142	Identifier	now		5059127	1					
ANR	5059143	AssignmentExpression	now = time ( NULL )		5059127	2		=			
ANR	5059144	Identifier	now		5059127	0					
ANR	5059145	CallExpression	time ( NULL )		5059127	1					
ANR	5059146	Callee	time		5059127	0					
ANR	5059147	Identifier	time		5059127	0					
ANR	5059148	ArgumentList	NULL		5059127	1					
ANR	5059149	Argument	NULL		5059127	0					
ANR	5059150	Identifier	NULL		5059127	0					
ANR	5059151	IdentifierDeclStatement	time_t prev = m_last_poll ;	462:1:12579:12604	5059127	2	True				
ANR	5059152	IdentifierDecl	prev = m_last_poll		5059127	0					
ANR	5059153	IdentifierDeclType	time_t		5059127	0					
ANR	5059154	Identifier	prev		5059127	1					
ANR	5059155	AssignmentExpression	prev = m_last_poll		5059127	2		=			
ANR	5059156	Identifier	m_last_poll		5059127	0					
ANR	5059157	Identifier	m_last_poll		5059127	1					
ANR	5059158	ExpressionStatement	m_last_poll = now	463:1:12607:12624	5059127	3	True				
ANR	5059159	AssignmentExpression	m_last_poll = now		5059127	0		=			
ANR	5059160	Identifier	m_last_poll		5059127	0					
ANR	5059161	Identifier	now		5059127	1					
ANR	5059162	ExpressionStatement	saveState ( )	464:1:12627:12638	5059127	4	True				
ANR	5059163	CallExpression	saveState ( )		5059127	0					
ANR	5059164	Callee	saveState		5059127	0					
ANR	5059165	Identifier	saveState		5059127	0					
ANR	5059166	ArgumentList			5059127	1					
ANR	5059167	ExpressionStatement	m_stats . Tick ( )	466:1:12642:12656	5059127	5	True				
ANR	5059168	CallExpression	m_stats . Tick ( )		5059127	0					
ANR	5059169	Callee	m_stats . Tick		5059127	0					
ANR	5059170	MemberAccess	m_stats . Tick		5059127	0					
ANR	5059171	Identifier	m_stats		5059127	0					
ANR	5059172	Identifier	Tick		5059127	1					
ANR	5059173	ArgumentList			5059127	1					
ANR	5059174	IdentifierDeclStatement	int num_to_drain = m_draining_per_poll ;	468:1:12660:12698	5059127	6	True				
ANR	5059175	IdentifierDecl	num_to_drain = m_draining_per_poll		5059127	0					
ANR	5059176	IdentifierDeclType	int		5059127	0					
ANR	5059177	Identifier	num_to_drain		5059127	1					
ANR	5059178	AssignmentExpression	num_to_drain = m_draining_per_poll		5059127	2		=			
ANR	5059179	Identifier	m_draining_per_poll		5059127	0					
ANR	5059180	Identifier	m_draining_per_poll		5059127	1					
ANR	5059181	IdentifierDeclStatement	time_t last_hour = ( prev / 3600 ) * 3600 ;	470:1:12702:12742	5059127	7	True				
ANR	5059182	IdentifierDecl	last_hour = ( prev / 3600 ) * 3600		5059127	0					
ANR	5059183	IdentifierDeclType	time_t		5059127	0					
ANR	5059184	Identifier	last_hour		5059127	1					
ANR	5059185	AssignmentExpression	last_hour = ( prev / 3600 ) * 3600		5059127	2		=			
ANR	5059186	Identifier	last_hour		5059127	0					
ANR	5059187	MultiplicativeExpression	( prev / 3600 ) * 3600		5059127	1		*			
ANR	5059188	MultiplicativeExpression	prev / 3600		5059127	0		/			
ANR	5059189	Identifier	prev		5059127	0					
ANR	5059190	PrimaryExpression	3600		5059127	1					
ANR	5059191	PrimaryExpression	3600		5059127	1					
ANR	5059192	IdentifierDeclStatement	time_t current_hour = ( now / 3600 ) * 3600 ;	471:1:12745:12785	5059127	8	True				
ANR	5059193	IdentifierDecl	current_hour = ( now / 3600 ) * 3600		5059127	0					
ANR	5059194	IdentifierDeclType	time_t		5059127	0					
ANR	5059195	Identifier	current_hour		5059127	1					
ANR	5059196	AssignmentExpression	current_hour = ( now / 3600 ) * 3600		5059127	2		=			
ANR	5059197	Identifier	current_hour		5059127	0					
ANR	5059198	MultiplicativeExpression	( now / 3600 ) * 3600		5059127	1		*			
ANR	5059199	MultiplicativeExpression	now / 3600		5059127	0		/			
ANR	5059200	Identifier	now		5059127	0					
ANR	5059201	PrimaryExpression	3600		5059127	1					
ANR	5059202	PrimaryExpression	3600		5059127	1					
ANR	5059203	IdentifierDeclStatement	time_t last_day = ( prev / ( 3600 * 24 ) ) * 3600 * 24 ;	472:1:12788:12836	5059127	9	True				
ANR	5059204	IdentifierDecl	last_day = ( prev / ( 3600 * 24 ) ) * 3600 * 24		5059127	0					
ANR	5059205	IdentifierDeclType	time_t		5059127	0					
ANR	5059206	Identifier	last_day		5059127	1					
ANR	5059207	AssignmentExpression	last_day = ( prev / ( 3600 * 24 ) ) * 3600 * 24		5059127	2		=			
ANR	5059208	Identifier	last_day		5059127	0					
ANR	5059209	MultiplicativeExpression	( prev / ( 3600 * 24 ) ) * 3600 * 24		5059127	1		*			
ANR	5059210	MultiplicativeExpression	prev / ( 3600 * 24 )		5059127	0		/			
ANR	5059211	Identifier	prev		5059127	0					
ANR	5059212	MultiplicativeExpression	3600 * 24		5059127	1		*			
ANR	5059213	PrimaryExpression	3600		5059127	0					
ANR	5059214	PrimaryExpression	24		5059127	1					
ANR	5059215	MultiplicativeExpression	3600 * 24		5059127	1		*			
ANR	5059216	PrimaryExpression	3600		5059127	0					
ANR	5059217	PrimaryExpression	24		5059127	1					
ANR	5059218	IdentifierDeclStatement	time_t current_day = ( now / ( 3600 * 24 ) ) * 3600 * 24 ;	473:1:12839:12887	5059127	10	True				
ANR	5059219	IdentifierDecl	current_day = ( now / ( 3600 * 24 ) ) * 3600 * 24		5059127	0					
ANR	5059220	IdentifierDeclType	time_t		5059127	0					
ANR	5059221	Identifier	current_day		5059127	1					
ANR	5059222	AssignmentExpression	current_day = ( now / ( 3600 * 24 ) ) * 3600 * 24		5059127	2		=			
ANR	5059223	Identifier	current_day		5059127	0					
ANR	5059224	MultiplicativeExpression	( now / ( 3600 * 24 ) ) * 3600 * 24		5059127	1		*			
ANR	5059225	MultiplicativeExpression	now / ( 3600 * 24 )		5059127	0		/			
ANR	5059226	Identifier	now		5059127	0					
ANR	5059227	MultiplicativeExpression	3600 * 24		5059127	1		*			
ANR	5059228	PrimaryExpression	3600		5059127	0					
ANR	5059229	PrimaryExpression	24		5059127	1					
ANR	5059230	MultiplicativeExpression	3600 * 24		5059127	1		*			
ANR	5059231	PrimaryExpression	3600		5059127	0					
ANR	5059232	PrimaryExpression	24		5059127	1					
ANR	5059233	IfStatement	if ( current_hour != last_hour )		5059127	11					
ANR	5059234	Condition	current_hour != last_hour	475:5:12895:12919	5059127	0	True				
ANR	5059235	EqualityExpression	current_hour != last_hour		5059127	0		!=			
ANR	5059236	Identifier	current_hour		5059127	0					
ANR	5059237	Identifier	last_hour		5059127	1					
ANR	5059238	CompoundStatement		24:33:708:708	5059127	1					
ANR	5059239	ExpressionStatement	"num_to_drain += prorate ( m_draining_per_poll_hour , now - current_hour , 3600 , m_polling_interval )"	476:2:12927:13017	5059127	0	True				
ANR	5059240	AssignmentExpression	"num_to_drain += prorate ( m_draining_per_poll_hour , now - current_hour , 3600 , m_polling_interval )"		5059127	0		+=			
ANR	5059241	Identifier	num_to_drain		5059127	0					
ANR	5059242	CallExpression	"prorate ( m_draining_per_poll_hour , now - current_hour , 3600 , m_polling_interval )"		5059127	1					
ANR	5059243	Callee	prorate		5059127	0					
ANR	5059244	Identifier	prorate		5059127	0					
ANR	5059245	ArgumentList	m_draining_per_poll_hour		5059127	1					
ANR	5059246	Argument	m_draining_per_poll_hour		5059127	0					
ANR	5059247	Identifier	m_draining_per_poll_hour		5059127	0					
ANR	5059248	Argument	now - current_hour		5059127	1					
ANR	5059249	AdditiveExpression	now - current_hour		5059127	0		-			
ANR	5059250	Identifier	now		5059127	0					
ANR	5059251	Identifier	current_hour		5059127	1					
ANR	5059252	Argument	3600		5059127	2					
ANR	5059253	PrimaryExpression	3600		5059127	0					
ANR	5059254	Argument	m_polling_interval		5059127	3					
ANR	5059255	Identifier	m_polling_interval		5059127	0					
ANR	5059256	IfStatement	if ( current_day != last_day )		5059127	12					
ANR	5059257	Condition	current_day != last_day	478:5:13027:13049	5059127	0	True				
ANR	5059258	EqualityExpression	current_day != last_day		5059127	0		!=			
ANR	5059259	Identifier	current_day		5059127	0					
ANR	5059260	Identifier	last_day		5059127	1					
ANR	5059261	CompoundStatement		27:31:838:838	5059127	1					
ANR	5059262	ExpressionStatement	"num_to_drain += prorate ( m_draining_per_poll_day , now - current_day , 3600 * 24 , m_polling_interval )"	479:2:13057:13148	5059127	0	True				
ANR	5059263	AssignmentExpression	"num_to_drain += prorate ( m_draining_per_poll_day , now - current_day , 3600 * 24 , m_polling_interval )"		5059127	0		+=			
ANR	5059264	Identifier	num_to_drain		5059127	0					
ANR	5059265	CallExpression	"prorate ( m_draining_per_poll_day , now - current_day , 3600 * 24 , m_polling_interval )"		5059127	1					
ANR	5059266	Callee	prorate		5059127	0					
ANR	5059267	Identifier	prorate		5059127	0					
ANR	5059268	ArgumentList	m_draining_per_poll_day		5059127	1					
ANR	5059269	Argument	m_draining_per_poll_day		5059127	0					
ANR	5059270	Identifier	m_draining_per_poll_day		5059127	0					
ANR	5059271	Argument	now - current_day		5059127	1					
ANR	5059272	AdditiveExpression	now - current_day		5059127	0		-			
ANR	5059273	Identifier	now		5059127	0					
ANR	5059274	Identifier	current_day		5059127	1					
ANR	5059275	Argument	3600 * 24		5059127	2					
ANR	5059276	MultiplicativeExpression	3600 * 24		5059127	0		*			
ANR	5059277	PrimaryExpression	3600		5059127	0					
ANR	5059278	PrimaryExpression	24		5059127	1					
ANR	5059279	Argument	m_polling_interval		5059127	3					
ANR	5059280	Identifier	m_polling_interval		5059127	0					
ANR	5059281	IdentifierDeclStatement	"char const * draining_constraint = ""Draining && Offline=!=True"" ;"	482:1:13155:13217	5059127	13	True				
ANR	5059282	IdentifierDecl	"* draining_constraint = ""Draining && Offline=!=True"""		5059127	0					
ANR	5059283	IdentifierDeclType	char const *		5059127	0					
ANR	5059284	Identifier	draining_constraint		5059127	1					
ANR	5059285	AssignmentExpression	"* draining_constraint = ""Draining && Offline=!=True"""		5059127	2		=			
ANR	5059286	Identifier	draining_constraint		5059127	0					
ANR	5059287	PrimaryExpression	"""Draining && Offline=!=True"""		5059127	1					
ANR	5059288	IdentifierDeclStatement	"int num_draining = countMachines ( draining_constraint , ""<InternalDrainingConstraint>"" ) ;"	483:1:13220:13304	5059127	14	True				
ANR	5059289	IdentifierDecl	"num_draining = countMachines ( draining_constraint , ""<InternalDrainingConstraint>"" )"		5059127	0					
ANR	5059290	IdentifierDeclType	int		5059127	0					
ANR	5059291	Identifier	num_draining		5059127	1					
ANR	5059292	AssignmentExpression	"num_draining = countMachines ( draining_constraint , ""<InternalDrainingConstraint>"" )"		5059127	2		=			
ANR	5059293	Identifier	num_draining		5059127	0					
ANR	5059294	CallExpression	"countMachines ( draining_constraint , ""<InternalDrainingConstraint>"" )"		5059127	1					
ANR	5059295	Callee	countMachines		5059127	0					
ANR	5059296	Identifier	countMachines		5059127	0					
ANR	5059297	ArgumentList	draining_constraint		5059127	1					
ANR	5059298	Argument	draining_constraint		5059127	0					
ANR	5059299	Identifier	draining_constraint		5059127	0					
ANR	5059300	Argument	"""<InternalDrainingConstraint>"""		5059127	1					
ANR	5059301	PrimaryExpression	"""<InternalDrainingConstraint>"""		5059127	0					
ANR	5059302	ExpressionStatement	m_stats . MachinesDraining = num_draining	484:1:13307:13346	5059127	15	True				
ANR	5059303	AssignmentExpression	m_stats . MachinesDraining = num_draining		5059127	0		=			
ANR	5059304	MemberAccess	m_stats . MachinesDraining		5059127	0					
ANR	5059305	Identifier	m_stats		5059127	0					
ANR	5059306	Identifier	MachinesDraining		5059127	1					
ANR	5059307	Identifier	num_draining		5059127	1					
ANR	5059308	IdentifierDeclStatement	MachineSet whole_machines ;	486:1:13350:13375	5059127	16	True				
ANR	5059309	IdentifierDecl	whole_machines		5059127	0					
ANR	5059310	IdentifierDeclType	MachineSet		5059127	0					
ANR	5059311	Identifier	whole_machines		5059127	1					
ANR	5059312	IdentifierDeclStatement	"int num_whole_machines = countMachines ( m_whole_machine_expr . c_str ( ) , ""DEFRAG_WHOLE_MACHINE_EXPR"" , & whole_machines ) ;"	487:1:13378:13490	5059127	17	True				
ANR	5059313	IdentifierDecl	"num_whole_machines = countMachines ( m_whole_machine_expr . c_str ( ) , ""DEFRAG_WHOLE_MACHINE_EXPR"" , & whole_machines )"		5059127	0					
ANR	5059314	IdentifierDeclType	int		5059127	0					
ANR	5059315	Identifier	num_whole_machines		5059127	1					
ANR	5059316	AssignmentExpression	"num_whole_machines = countMachines ( m_whole_machine_expr . c_str ( ) , ""DEFRAG_WHOLE_MACHINE_EXPR"" , & whole_machines )"		5059127	2		=			
ANR	5059317	Identifier	num_whole_machines		5059127	0					
ANR	5059318	CallExpression	"countMachines ( m_whole_machine_expr . c_str ( ) , ""DEFRAG_WHOLE_MACHINE_EXPR"" , & whole_machines )"		5059127	1					
ANR	5059319	Callee	countMachines		5059127	0					
ANR	5059320	Identifier	countMachines		5059127	0					
ANR	5059321	ArgumentList	m_whole_machine_expr . c_str ( )		5059127	1					
ANR	5059322	Argument	m_whole_machine_expr . c_str ( )		5059127	0					
ANR	5059323	CallExpression	m_whole_machine_expr . c_str ( )		5059127	0					
ANR	5059324	Callee	m_whole_machine_expr . c_str		5059127	0					
ANR	5059325	MemberAccess	m_whole_machine_expr . c_str		5059127	0					
ANR	5059326	Identifier	m_whole_machine_expr		5059127	0					
ANR	5059327	Identifier	c_str		5059127	1					
ANR	5059328	ArgumentList			5059127	1					
ANR	5059329	Argument	"""DEFRAG_WHOLE_MACHINE_EXPR"""		5059127	1					
ANR	5059330	PrimaryExpression	"""DEFRAG_WHOLE_MACHINE_EXPR"""		5059127	0					
ANR	5059331	Argument	& whole_machines		5059127	2					
ANR	5059332	UnaryOperationExpression	& whole_machines		5059127	0					
ANR	5059333	UnaryOperator	&		5059127	0					
ANR	5059334	Identifier	whole_machines		5059127	1					
ANR	5059335	ExpressionStatement	m_stats . WholeMachines = num_whole_machines	488:1:13493:13535	5059127	18	True				
ANR	5059336	AssignmentExpression	m_stats . WholeMachines = num_whole_machines		5059127	0		=			
ANR	5059337	MemberAccess	m_stats . WholeMachines		5059127	0					
ANR	5059338	Identifier	m_stats		5059127	0					
ANR	5059339	Identifier	WholeMachines		5059127	1					
ANR	5059340	Identifier	num_whole_machines		5059127	1					
ANR	5059341	ExpressionStatement	"dprintf ( D_ALWAYS , ""There are currently %d draining and %d whole machines.\\n"" , num_draining , num_whole_machines )"	490:1:13539:13651	5059127	19	True				
ANR	5059342	CallExpression	"dprintf ( D_ALWAYS , ""There are currently %d draining and %d whole machines.\\n"" , num_draining , num_whole_machines )"		5059127	0					
ANR	5059343	Callee	dprintf		5059127	0					
ANR	5059344	Identifier	dprintf		5059127	0					
ANR	5059345	ArgumentList	D_ALWAYS		5059127	1					
ANR	5059346	Argument	D_ALWAYS		5059127	0					
ANR	5059347	Identifier	D_ALWAYS		5059127	0					
ANR	5059348	Argument	"""There are currently %d draining and %d whole machines.\\n"""		5059127	1					
ANR	5059349	PrimaryExpression	"""There are currently %d draining and %d whole machines.\\n"""		5059127	0					
ANR	5059350	Argument	num_draining		5059127	2					
ANR	5059351	Identifier	num_draining		5059127	0					
ANR	5059352	Argument	num_whole_machines		5059127	3					
ANR	5059353	Identifier	num_whole_machines		5059127	0					
ANR	5059354	ExpressionStatement	queryDrainingCost ( )	493:1:13655:13674	5059127	20	True				
ANR	5059355	CallExpression	queryDrainingCost ( )		5059127	0					
ANR	5059356	Callee	queryDrainingCost		5059127	0					
ANR	5059357	Identifier	queryDrainingCost		5059127	0					
ANR	5059358	ArgumentList			5059127	1					
ANR	5059359	IfStatement	if ( num_to_drain <= 0 )		5059127	21					
ANR	5059360	Condition	num_to_drain <= 0	495:5:13682:13698	5059127	0	True				
ANR	5059361	RelationalExpression	num_to_drain <= 0		5059127	0		<=			
ANR	5059362	Identifier	num_to_drain		5059127	0					
ANR	5059363	PrimaryExpression	0		5059127	1					
ANR	5059364	CompoundStatement		44:25:1487:1487	5059127	1					
ANR	5059365	ExpressionStatement	"dprintf ( D_ALWAYS , ""Doing nothing, because number to drain in next %ds is calculated to be 0.\\n"" , m_polling_interval )"	496:2:13706:13825	5059127	0	True				
ANR	5059366	CallExpression	"dprintf ( D_ALWAYS , ""Doing nothing, because number to drain in next %ds is calculated to be 0.\\n"" , m_polling_interval )"		5059127	0					
ANR	5059367	Callee	dprintf		5059127	0					
ANR	5059368	Identifier	dprintf		5059127	0					
ANR	5059369	ArgumentList	D_ALWAYS		5059127	1					
ANR	5059370	Argument	D_ALWAYS		5059127	0					
ANR	5059371	Identifier	D_ALWAYS		5059127	0					
ANR	5059372	Argument	"""Doing nothing, because number to drain in next %ds is calculated to be 0.\\n"""		5059127	1					
ANR	5059373	PrimaryExpression	"""Doing nothing, because number to drain in next %ds is calculated to be 0.\\n"""		5059127	0					
ANR	5059374	Argument	m_polling_interval		5059127	2					
ANR	5059375	Identifier	m_polling_interval		5059127	0					
ANR	5059376	ReturnStatement	return ;	498:2:13829:13835	5059127	1	True				
ANR	5059377	IfStatement	if ( ( int ) ceil ( m_draining_per_hour ) <= 0 )		5059127	22					
ANR	5059378	Condition	( int ) ceil ( m_draining_per_hour ) <= 0	501:5:13846:13880	5059127	0	True				
ANR	5059379	RelationalExpression	( int ) ceil ( m_draining_per_hour ) <= 0		5059127	0		<=			
ANR	5059380	CastExpression	( int ) ceil ( m_draining_per_hour )		5059127	0					
ANR	5059381	CastTarget	int		5059127	0					
ANR	5059382	CallExpression	ceil ( m_draining_per_hour )		5059127	1					
ANR	5059383	Callee	ceil		5059127	0					
ANR	5059384	Identifier	ceil		5059127	0					
ANR	5059385	ArgumentList	m_draining_per_hour		5059127	1					
ANR	5059386	Argument	m_draining_per_hour		5059127	0					
ANR	5059387	Identifier	m_draining_per_hour		5059127	0					
ANR	5059388	PrimaryExpression	0		5059127	1					
ANR	5059389	CompoundStatement		50:43:1669:1669	5059127	1					
ANR	5059390	ExpressionStatement	"dprintf ( D_ALWAYS , ""Doing nothing, because DEFRAG_DRAINING_MACHINES_PER_HOUR=%f\\n"" , m_draining_per_hour )"	502:2:13888:13994	5059127	0	True				
ANR	5059391	CallExpression	"dprintf ( D_ALWAYS , ""Doing nothing, because DEFRAG_DRAINING_MACHINES_PER_HOUR=%f\\n"" , m_draining_per_hour )"		5059127	0					
ANR	5059392	Callee	dprintf		5059127	0					
ANR	5059393	Identifier	dprintf		5059127	0					
ANR	5059394	ArgumentList	D_ALWAYS		5059127	1					
ANR	5059395	Argument	D_ALWAYS		5059127	0					
ANR	5059396	Identifier	D_ALWAYS		5059127	0					
ANR	5059397	Argument	"""Doing nothing, because DEFRAG_DRAINING_MACHINES_PER_HOUR=%f\\n"""		5059127	1					
ANR	5059398	PrimaryExpression	"""Doing nothing, because DEFRAG_DRAINING_MACHINES_PER_HOUR=%f\\n"""		5059127	0					
ANR	5059399	Argument	m_draining_per_hour		5059127	2					
ANR	5059400	Identifier	m_draining_per_hour		5059127	0					
ANR	5059401	ReturnStatement	return ;	504:2:13998:14004	5059127	1	True				
ANR	5059402	IfStatement	if ( m_max_draining == 0 )		5059127	23					
ANR	5059403	Condition	m_max_draining == 0	507:5:14015:14033	5059127	0	True				
ANR	5059404	EqualityExpression	m_max_draining == 0		5059127	0		==			
ANR	5059405	Identifier	m_max_draining		5059127	0					
ANR	5059406	PrimaryExpression	0		5059127	1					
ANR	5059407	CompoundStatement		56:27:1822:1822	5059127	1					
ANR	5059408	ExpressionStatement	"dprintf ( D_ALWAYS , ""Doing nothing, because DEFRAG_MAX_CONCURRENT_DRAINING=0\\n"" )"	508:2:14041:14118	5059127	0	True				
ANR	5059409	CallExpression	"dprintf ( D_ALWAYS , ""Doing nothing, because DEFRAG_MAX_CONCURRENT_DRAINING=0\\n"" )"		5059127	0					
ANR	5059410	Callee	dprintf		5059127	0					
ANR	5059411	Identifier	dprintf		5059127	0					
ANR	5059412	ArgumentList	D_ALWAYS		5059127	1					
ANR	5059413	Argument	D_ALWAYS		5059127	0					
ANR	5059414	Identifier	D_ALWAYS		5059127	0					
ANR	5059415	Argument	"""Doing nothing, because DEFRAG_MAX_CONCURRENT_DRAINING=0\\n"""		5059127	1					
ANR	5059416	PrimaryExpression	"""Doing nothing, because DEFRAG_MAX_CONCURRENT_DRAINING=0\\n"""		5059127	0					
ANR	5059417	ReturnStatement	return ;	509:2:14122:14128	5059127	1	True				
ANR	5059418	IfStatement	if ( m_max_whole_machines == 0 )		5059127	24					
ANR	5059419	Condition	m_max_whole_machines == 0	512:5:14139:14163	5059127	0	True				
ANR	5059420	EqualityExpression	m_max_whole_machines == 0		5059127	0		==			
ANR	5059421	Identifier	m_max_whole_machines		5059127	0					
ANR	5059422	PrimaryExpression	0		5059127	1					
ANR	5059423	CompoundStatement		61:33:1952:1952	5059127	1					
ANR	5059424	ExpressionStatement	"dprintf ( D_ALWAYS , ""Doing nothing, because DEFRAG_MAX_WHOLE_MACHINES=0\\n"" )"	513:2:14171:14243	5059127	0	True				
ANR	5059425	CallExpression	"dprintf ( D_ALWAYS , ""Doing nothing, because DEFRAG_MAX_WHOLE_MACHINES=0\\n"" )"		5059127	0					
ANR	5059426	Callee	dprintf		5059127	0					
ANR	5059427	Identifier	dprintf		5059127	0					
ANR	5059428	ArgumentList	D_ALWAYS		5059127	1					
ANR	5059429	Argument	D_ALWAYS		5059127	0					
ANR	5059430	Identifier	D_ALWAYS		5059127	0					
ANR	5059431	Argument	"""Doing nothing, because DEFRAG_MAX_WHOLE_MACHINES=0\\n"""		5059127	1					
ANR	5059432	PrimaryExpression	"""Doing nothing, because DEFRAG_MAX_WHOLE_MACHINES=0\\n"""		5059127	0					
ANR	5059433	ReturnStatement	return ;	514:2:14247:14253	5059127	1	True				
ANR	5059434	IfStatement	if ( m_max_draining >= 0 )		5059127	25					
ANR	5059435	Condition	m_max_draining >= 0	517:5:14264:14282	5059127	0	True				
ANR	5059436	RelationalExpression	m_max_draining >= 0		5059127	0		>=			
ANR	5059437	Identifier	m_max_draining		5059127	0					
ANR	5059438	PrimaryExpression	0		5059127	1					
ANR	5059439	CompoundStatement		66:27:2071:2071	5059127	1					
ANR	5059440	IfStatement	if ( num_draining >= m_max_draining )		5059127	0					
ANR	5059441	Condition	num_draining >= m_max_draining	518:6:14294:14323	5059127	0	True				
ANR	5059442	RelationalExpression	num_draining >= m_max_draining		5059127	0		>=			
ANR	5059443	Identifier	num_draining		5059127	0					
ANR	5059444	Identifier	m_max_draining		5059127	1					
ANR	5059445	CompoundStatement		67:39:2112:2112	5059127	1					
ANR	5059446	ExpressionStatement	"dprintf ( D_ALWAYS , ""Doing nothing, because DEFRAG_MAX_CONCURRENT_DRAINING=%d and there are %d draining machines.\\n"" , m_max_draining , num_draining )"	519:3:14332:14481	5059127	0	True				
ANR	5059447	CallExpression	"dprintf ( D_ALWAYS , ""Doing nothing, because DEFRAG_MAX_CONCURRENT_DRAINING=%d and there are %d draining machines.\\n"" , m_max_draining , num_draining )"		5059127	0					
ANR	5059448	Callee	dprintf		5059127	0					
ANR	5059449	Identifier	dprintf		5059127	0					
ANR	5059450	ArgumentList	D_ALWAYS		5059127	1					
ANR	5059451	Argument	D_ALWAYS		5059127	0					
ANR	5059452	Identifier	D_ALWAYS		5059127	0					
ANR	5059453	Argument	"""Doing nothing, because DEFRAG_MAX_CONCURRENT_DRAINING=%d and there are %d draining machines.\\n"""		5059127	1					
ANR	5059454	PrimaryExpression	"""Doing nothing, because DEFRAG_MAX_CONCURRENT_DRAINING=%d and there are %d draining machines.\\n"""		5059127	0					
ANR	5059455	Argument	m_max_draining		5059127	2					
ANR	5059456	Identifier	m_max_draining		5059127	0					
ANR	5059457	Argument	num_draining		5059127	3					
ANR	5059458	Identifier	num_draining		5059127	0					
ANR	5059459	ReturnStatement	return ;	521:3:14486:14492	5059127	1	True				
ANR	5059460	ElseStatement	else		5059127	0					
ANR	5059461	IfStatement	if ( num_draining < 0 )		5059127	0					
ANR	5059462	Condition	num_draining < 0	523:11:14509:14524	5059127	0	True				
ANR	5059463	RelationalExpression	num_draining < 0		5059127	0		<			
ANR	5059464	Identifier	num_draining		5059127	0					
ANR	5059465	PrimaryExpression	0		5059127	1					
ANR	5059466	CompoundStatement		72:30:2313:2313	5059127	1					
ANR	5059467	ExpressionStatement	"dprintf ( D_ALWAYS , ""Doing nothing, because DEFRAG_MAX_CONCURRENT_DRAINING=%d and the query to count draining machines failed.\\n"" , m_max_draining )"	524:3:14533:14681	5059127	0	True				
ANR	5059468	CallExpression	"dprintf ( D_ALWAYS , ""Doing nothing, because DEFRAG_MAX_CONCURRENT_DRAINING=%d and the query to count draining machines failed.\\n"" , m_max_draining )"		5059127	0					
ANR	5059469	Callee	dprintf		5059127	0					
ANR	5059470	Identifier	dprintf		5059127	0					
ANR	5059471	ArgumentList	D_ALWAYS		5059127	1					
ANR	5059472	Argument	D_ALWAYS		5059127	0					
ANR	5059473	Identifier	D_ALWAYS		5059127	0					
ANR	5059474	Argument	"""Doing nothing, because DEFRAG_MAX_CONCURRENT_DRAINING=%d and the query to count draining machines failed.\\n"""		5059127	1					
ANR	5059475	PrimaryExpression	"""Doing nothing, because DEFRAG_MAX_CONCURRENT_DRAINING=%d and the query to count draining machines failed.\\n"""		5059127	0					
ANR	5059476	Argument	m_max_draining		5059127	2					
ANR	5059477	Identifier	m_max_draining		5059127	0					
ANR	5059478	ReturnStatement	return ;	526:3:14686:14692	5059127	1	True				
ANR	5059479	IfStatement	if ( m_max_whole_machines >= 0 )		5059127	26					
ANR	5059480	Condition	m_max_whole_machines >= 0	530:5:14707:14731	5059127	0	True				
ANR	5059481	RelationalExpression	m_max_whole_machines >= 0		5059127	0		>=			
ANR	5059482	Identifier	m_max_whole_machines		5059127	0					
ANR	5059483	PrimaryExpression	0		5059127	1					
ANR	5059484	CompoundStatement		79:33:2520:2520	5059127	1					
ANR	5059485	IfStatement	if ( num_whole_machines >= m_max_whole_machines )		5059127	0					
ANR	5059486	Condition	num_whole_machines >= m_max_whole_machines	531:6:14743:14784	5059127	0	True				
ANR	5059487	RelationalExpression	num_whole_machines >= m_max_whole_machines		5059127	0		>=			
ANR	5059488	Identifier	num_whole_machines		5059127	0					
ANR	5059489	Identifier	m_max_whole_machines		5059127	1					
ANR	5059490	CompoundStatement		80:51:2573:2573	5059127	1					
ANR	5059491	ExpressionStatement	"dprintf ( D_ALWAYS , ""Doing nothing, because DEFRAG_MAX_WHOLE_MACHINES=%d and there are %d whole machines.\\n"" , m_max_whole_machines , num_whole_machines )"	532:3:14793:14946	5059127	0	True				
ANR	5059492	CallExpression	"dprintf ( D_ALWAYS , ""Doing nothing, because DEFRAG_MAX_WHOLE_MACHINES=%d and there are %d whole machines.\\n"" , m_max_whole_machines , num_whole_machines )"		5059127	0					
ANR	5059493	Callee	dprintf		5059127	0					
ANR	5059494	Identifier	dprintf		5059127	0					
ANR	5059495	ArgumentList	D_ALWAYS		5059127	1					
ANR	5059496	Argument	D_ALWAYS		5059127	0					
ANR	5059497	Identifier	D_ALWAYS		5059127	0					
ANR	5059498	Argument	"""Doing nothing, because DEFRAG_MAX_WHOLE_MACHINES=%d and there are %d whole machines.\\n"""		5059127	1					
ANR	5059499	PrimaryExpression	"""Doing nothing, because DEFRAG_MAX_WHOLE_MACHINES=%d and there are %d whole machines.\\n"""		5059127	0					
ANR	5059500	Argument	m_max_whole_machines		5059127	2					
ANR	5059501	Identifier	m_max_whole_machines		5059127	0					
ANR	5059502	Argument	num_whole_machines		5059127	3					
ANR	5059503	Identifier	num_whole_machines		5059127	0					
ANR	5059504	ReturnStatement	return ;	534:3:14951:14957	5059127	1	True				
ANR	5059505	IfStatement	if ( num_whole_machines < 0 )		5059127	27					
ANR	5059506	Condition	num_whole_machines < 0	542:5:15193:15214	5059127	0	True				
ANR	5059507	RelationalExpression	num_whole_machines < 0		5059127	0		<			
ANR	5059508	Identifier	num_whole_machines		5059127	0					
ANR	5059509	PrimaryExpression	0		5059127	1					
ANR	5059510	CompoundStatement		91:30:3003:3003	5059127	1					
ANR	5059511	ExpressionStatement	"dprintf ( D_ALWAYS , ""Doing nothing, because the query to find whole machines failed.\\n"" )"	543:2:15222:15307	5059127	0	True				
ANR	5059512	CallExpression	"dprintf ( D_ALWAYS , ""Doing nothing, because the query to find whole machines failed.\\n"" )"		5059127	0					
ANR	5059513	Callee	dprintf		5059127	0					
ANR	5059514	Identifier	dprintf		5059127	0					
ANR	5059515	ArgumentList	D_ALWAYS		5059127	1					
ANR	5059516	Argument	D_ALWAYS		5059127	0					
ANR	5059517	Identifier	D_ALWAYS		5059127	0					
ANR	5059518	Argument	"""Doing nothing, because the query to find whole machines failed.\\n"""		5059127	1					
ANR	5059519	PrimaryExpression	"""Doing nothing, because the query to find whole machines failed.\\n"""		5059127	0					
ANR	5059520	ReturnStatement	return ;	544:2:15311:15317	5059127	1	True				
ANR	5059521	ExpressionStatement	"dprintf ( D_ALWAYS , ""Looking for %d machines to drain.\\n"" , num_to_drain )"	547:1:15324:15392	5059127	28	True				
ANR	5059522	CallExpression	"dprintf ( D_ALWAYS , ""Looking for %d machines to drain.\\n"" , num_to_drain )"		5059127	0					
ANR	5059523	Callee	dprintf		5059127	0					
ANR	5059524	Identifier	dprintf		5059127	0					
ANR	5059525	ArgumentList	D_ALWAYS		5059127	1					
ANR	5059526	Argument	D_ALWAYS		5059127	0					
ANR	5059527	Identifier	D_ALWAYS		5059127	0					
ANR	5059528	Argument	"""Looking for %d machines to drain.\\n"""		5059127	1					
ANR	5059529	PrimaryExpression	"""Looking for %d machines to drain.\\n"""		5059127	0					
ANR	5059530	Argument	num_to_drain		5059127	2					
ANR	5059531	Identifier	num_to_drain		5059127	0					
ANR	5059532	IdentifierDeclStatement	ClassAdList startdAds ;	549:1:15396:15417	5059127	29	True				
ANR	5059533	IdentifierDecl	startdAds		5059127	0					
ANR	5059534	IdentifierDeclType	ClassAdList		5059127	0					
ANR	5059535	Identifier	startdAds		5059127	1					
ANR	5059536	IdentifierDeclStatement	std :: string requirements ;	550:1:15420:15444	5059127	30	True				
ANR	5059537	IdentifierDecl	requirements		5059127	0					
ANR	5059538	IdentifierDeclType	std :: string		5059127	0					
ANR	5059539	Identifier	requirements		5059127	1					
ANR	5059540	ExpressionStatement	"sprintf ( requirements , ""(%s) && Draining =!= true"" , m_defrag_requirements . c_str ( ) )"	551:1:15447:15526	5059127	31	True				
ANR	5059541	CallExpression	"sprintf ( requirements , ""(%s) && Draining =!= true"" , m_defrag_requirements . c_str ( ) )"		5059127	0					
ANR	5059542	Callee	sprintf		5059127	0					
ANR	5059543	Identifier	sprintf		5059127	0					
ANR	5059544	ArgumentList	requirements		5059127	1					
ANR	5059545	Argument	requirements		5059127	0					
ANR	5059546	Identifier	requirements		5059127	0					
ANR	5059547	Argument	"""(%s) && Draining =!= true"""		5059127	1					
ANR	5059548	PrimaryExpression	"""(%s) && Draining =!= true"""		5059127	0					
ANR	5059549	Argument	m_defrag_requirements . c_str ( )		5059127	2					
ANR	5059550	CallExpression	m_defrag_requirements . c_str ( )		5059127	0					
ANR	5059551	Callee	m_defrag_requirements . c_str		5059127	0					
ANR	5059552	MemberAccess	m_defrag_requirements . c_str		5059127	0					
ANR	5059553	Identifier	m_defrag_requirements		5059127	0					
ANR	5059554	Identifier	c_str		5059127	1					
ANR	5059555	ArgumentList			5059127	1					
ANR	5059556	IfStatement	"if ( ! queryMachines ( requirements . c_str ( ) , ""DEFRAG_REQUIREMENTS"" , startdAds ) )"		5059127	32					
ANR	5059557	Condition	"! queryMachines ( requirements . c_str ( ) , ""DEFRAG_REQUIREMENTS"" , startdAds )"	552:5:15533:15600	5059127	0	True				
ANR	5059558	UnaryOperationExpression	"! queryMachines ( requirements . c_str ( ) , ""DEFRAG_REQUIREMENTS"" , startdAds )"		5059127	0					
ANR	5059559	UnaryOperator	!		5059127	0					
ANR	5059560	CallExpression	"queryMachines ( requirements . c_str ( ) , ""DEFRAG_REQUIREMENTS"" , startdAds )"		5059127	1					
ANR	5059561	Callee	queryMachines		5059127	0					
ANR	5059562	Identifier	queryMachines		5059127	0					
ANR	5059563	ArgumentList	requirements . c_str ( )		5059127	1					
ANR	5059564	Argument	requirements . c_str ( )		5059127	0					
ANR	5059565	CallExpression	requirements . c_str ( )		5059127	0					
ANR	5059566	Callee	requirements . c_str		5059127	0					
ANR	5059567	MemberAccess	requirements . c_str		5059127	0					
ANR	5059568	Identifier	requirements		5059127	0					
ANR	5059569	Identifier	c_str		5059127	1					
ANR	5059570	ArgumentList			5059127	1					
ANR	5059571	Argument	"""DEFRAG_REQUIREMENTS"""		5059127	1					
ANR	5059572	PrimaryExpression	"""DEFRAG_REQUIREMENTS"""		5059127	0					
ANR	5059573	Argument	startdAds		5059127	2					
ANR	5059574	Identifier	startdAds		5059127	0					
ANR	5059575	CompoundStatement		101:76:3389:3389	5059127	1					
ANR	5059576	ExpressionStatement	"dprintf ( D_ALWAYS , ""Doing nothing, because the query to select machines matching DEFRAG_REQUIREMENTS failed.\\n"" )"	553:2:15608:15718	5059127	0	True				
ANR	5059577	CallExpression	"dprintf ( D_ALWAYS , ""Doing nothing, because the query to select machines matching DEFRAG_REQUIREMENTS failed.\\n"" )"		5059127	0					
ANR	5059578	Callee	dprintf		5059127	0					
ANR	5059579	Identifier	dprintf		5059127	0					
ANR	5059580	ArgumentList	D_ALWAYS		5059127	1					
ANR	5059581	Argument	D_ALWAYS		5059127	0					
ANR	5059582	Identifier	D_ALWAYS		5059127	0					
ANR	5059583	Argument	"""Doing nothing, because the query to select machines matching DEFRAG_REQUIREMENTS failed.\\n"""		5059127	1					
ANR	5059584	PrimaryExpression	"""Doing nothing, because the query to select machines matching DEFRAG_REQUIREMENTS failed.\\n"""		5059127	0					
ANR	5059585	ReturnStatement	return ;	554:2:15722:15728	5059127	1	True				
ANR	5059586	ExpressionStatement	startdAds . Shuffle ( )	557:1:15735:15754	5059127	33	True				
ANR	5059587	CallExpression	startdAds . Shuffle ( )		5059127	0					
ANR	5059588	Callee	startdAds . Shuffle		5059127	0					
ANR	5059589	MemberAccess	startdAds . Shuffle		5059127	0					
ANR	5059590	Identifier	startdAds		5059127	0					
ANR	5059591	Identifier	Shuffle		5059127	1					
ANR	5059592	ArgumentList			5059127	1					
ANR	5059593	ExpressionStatement	"startdAds . Sort ( StartdSortFunc , & m_rank_ad )"	558:1:15757:15798	5059127	34	True				
ANR	5059594	CallExpression	"startdAds . Sort ( StartdSortFunc , & m_rank_ad )"		5059127	0					
ANR	5059595	Callee	startdAds . Sort		5059127	0					
ANR	5059596	MemberAccess	startdAds . Sort		5059127	0					
ANR	5059597	Identifier	startdAds		5059127	0					
ANR	5059598	Identifier	Sort		5059127	1					
ANR	5059599	ArgumentList	StartdSortFunc		5059127	1					
ANR	5059600	Argument	StartdSortFunc		5059127	0					
ANR	5059601	Identifier	StartdSortFunc		5059127	0					
ANR	5059602	Argument	& m_rank_ad		5059127	1					
ANR	5059603	UnaryOperationExpression	& m_rank_ad		5059127	0					
ANR	5059604	UnaryOperator	&		5059127	0					
ANR	5059605	Identifier	m_rank_ad		5059127	1					
ANR	5059606	ExpressionStatement	startdAds . Open ( )	560:1:15802:15818	5059127	35	True				
ANR	5059607	CallExpression	startdAds . Open ( )		5059127	0					
ANR	5059608	Callee	startdAds . Open		5059127	0					
ANR	5059609	MemberAccess	startdAds . Open		5059127	0					
ANR	5059610	Identifier	startdAds		5059127	0					
ANR	5059611	Identifier	Open		5059127	1					
ANR	5059612	ArgumentList			5059127	1					
ANR	5059613	IdentifierDeclStatement	int num_drained = 0 ;	561:1:15821:15840	5059127	36	True				
ANR	5059614	IdentifierDecl	num_drained = 0		5059127	0					
ANR	5059615	IdentifierDeclType	int		5059127	0					
ANR	5059616	Identifier	num_drained		5059127	1					
ANR	5059617	AssignmentExpression	num_drained = 0		5059127	2		=			
ANR	5059618	Identifier	num_drained		5059127	0					
ANR	5059619	PrimaryExpression	0		5059127	1					
ANR	5059620	IdentifierDeclStatement	ClassAd * startd_ad ;	562:1:15843:15861	5059127	37	True				
ANR	5059621	IdentifierDecl	* startd_ad		5059127	0					
ANR	5059622	IdentifierDeclType	ClassAd *		5059127	0					
ANR	5059623	Identifier	startd_ad		5059127	1					
ANR	5059624	IdentifierDeclStatement	MachineSet machines_done ;	563:1:15864:15888	5059127	38	True				
ANR	5059625	IdentifierDecl	machines_done		5059127	0					
ANR	5059626	IdentifierDeclType	MachineSet		5059127	0					
ANR	5059627	Identifier	machines_done		5059127	1					
ANR	5059628	WhileStatement	while ( ( startd_ad = startdAds . Next ( ) ) )		5059127	39					
ANR	5059629	Condition	startd_ad = startdAds . Next ( )	564:8:15898:15925	5059127	0	True				
ANR	5059630	AssignmentExpression	startd_ad = startdAds . Next ( )		5059127	0		=			
ANR	5059631	Identifier	startd_ad		5059127	0					
ANR	5059632	CallExpression	startdAds . Next ( )		5059127	1					
ANR	5059633	Callee	startdAds . Next		5059127	0					
ANR	5059634	MemberAccess	startdAds . Next		5059127	0					
ANR	5059635	Identifier	startdAds		5059127	0					
ANR	5059636	Identifier	Next		5059127	1					
ANR	5059637	ArgumentList			5059127	1					
ANR	5059638	CompoundStatement		115:2:3741:3757	5059127	1					
ANR	5059639	IdentifierDeclStatement	std :: string machine ;	565:2:15933:15952	5059127	0	True				
ANR	5059640	IdentifierDecl	machine		5059127	0					
ANR	5059641	IdentifierDeclType	std :: string		5059127	0					
ANR	5059642	Identifier	machine		5059127	1					
ANR	5059643	IdentifierDeclStatement	std :: string name ;	566:2:15956:15972	5059127	1	True				
ANR	5059644	IdentifierDecl	name		5059127	0					
ANR	5059645	IdentifierDeclType	std :: string		5059127	0					
ANR	5059646	Identifier	name		5059127	1					
ANR	5059647	ExpressionStatement	"startd_ad -> LookupString ( ATTR_NAME , name )"	567:2:15976:16015	5059127	2	True				
ANR	5059648	CallExpression	"startd_ad -> LookupString ( ATTR_NAME , name )"		5059127	0					
ANR	5059649	Callee	startd_ad -> LookupString		5059127	0					
ANR	5059650	PtrMemberAccess	startd_ad -> LookupString		5059127	0					
ANR	5059651	Identifier	startd_ad		5059127	0					
ANR	5059652	Identifier	LookupString		5059127	1					
ANR	5059653	ArgumentList	ATTR_NAME		5059127	1					
ANR	5059654	Argument	ATTR_NAME		5059127	0					
ANR	5059655	Identifier	ATTR_NAME		5059127	0					
ANR	5059656	Argument	name		5059127	1					
ANR	5059657	Identifier	name		5059127	0					
ANR	5059658	ExpressionStatement	"slotNameToDaemonName ( name , machine )"	568:2:16019:16053	5059127	3	True				
ANR	5059659	CallExpression	"slotNameToDaemonName ( name , machine )"		5059127	0					
ANR	5059660	Callee	slotNameToDaemonName		5059127	0					
ANR	5059661	Identifier	slotNameToDaemonName		5059127	0					
ANR	5059662	ArgumentList	name		5059127	1					
ANR	5059663	Argument	name		5059127	0					
ANR	5059664	Identifier	name		5059127	0					
ANR	5059665	Argument	machine		5059127	1					
ANR	5059666	Identifier	machine		5059127	0					
ANR	5059667	IfStatement	if ( machines_done . count ( machine ) )		5059127	4					
ANR	5059668	Condition	machines_done . count ( machine )	570:6:16062:16089	5059127	0	True				
ANR	5059669	CallExpression	machines_done . count ( machine )		5059127	0					
ANR	5059670	Callee	machines_done . count		5059127	0					
ANR	5059671	MemberAccess	machines_done . count		5059127	0					
ANR	5059672	Identifier	machines_done		5059127	0					
ANR	5059673	Identifier	count		5059127	1					
ANR	5059674	ArgumentList	machine		5059127	1					
ANR	5059675	Argument	machine		5059127	0					
ANR	5059676	Identifier	machine		5059127	0					
ANR	5059677	CompoundStatement		119:37:3878:3878	5059127	1					
ANR	5059678	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Skipping %s: already attempted to drain %s in this cycle.\\n"" , name . c_str ( ) , machine . c_str ( ) )"	571:3:16098:16221	5059127	0	True				
ANR	5059679	CallExpression	"dprintf ( D_FULLDEBUG , ""Skipping %s: already attempted to drain %s in this cycle.\\n"" , name . c_str ( ) , machine . c_str ( ) )"		5059127	0					
ANR	5059680	Callee	dprintf		5059127	0					
ANR	5059681	Identifier	dprintf		5059127	0					
ANR	5059682	ArgumentList	D_FULLDEBUG		5059127	1					
ANR	5059683	Argument	D_FULLDEBUG		5059127	0					
ANR	5059684	Identifier	D_FULLDEBUG		5059127	0					
ANR	5059685	Argument	"""Skipping %s: already attempted to drain %s in this cycle.\\n"""		5059127	1					
ANR	5059686	PrimaryExpression	"""Skipping %s: already attempted to drain %s in this cycle.\\n"""		5059127	0					
ANR	5059687	Argument	name . c_str ( )		5059127	2					
ANR	5059688	CallExpression	name . c_str ( )		5059127	0					
ANR	5059689	Callee	name . c_str		5059127	0					
ANR	5059690	MemberAccess	name . c_str		5059127	0					
ANR	5059691	Identifier	name		5059127	0					
ANR	5059692	Identifier	c_str		5059127	1					
ANR	5059693	ArgumentList			5059127	1					
ANR	5059694	Argument	machine . c_str ( )		5059127	3					
ANR	5059695	CallExpression	machine . c_str ( )		5059127	0					
ANR	5059696	Callee	machine . c_str		5059127	0					
ANR	5059697	MemberAccess	machine . c_str		5059127	0					
ANR	5059698	Identifier	machine		5059127	0					
ANR	5059699	Identifier	c_str		5059127	1					
ANR	5059700	ArgumentList			5059127	1					
ANR	5059701	ContinueStatement	continue ;	574:3:16226:16234	5059127	1	True				
ANR	5059702	IfStatement	if ( whole_machines . count ( machine ) )		5059127	5					
ANR	5059703	Condition	whole_machines . count ( machine )	577:6:16247:16275	5059127	0	True				
ANR	5059704	CallExpression	whole_machines . count ( machine )		5059127	0					
ANR	5059705	Callee	whole_machines . count		5059127	0					
ANR	5059706	MemberAccess	whole_machines . count		5059127	0					
ANR	5059707	Identifier	whole_machines		5059127	0					
ANR	5059708	Identifier	count		5059127	1					
ANR	5059709	ArgumentList	machine		5059127	1					
ANR	5059710	Argument	machine		5059127	0					
ANR	5059711	Identifier	machine		5059127	0					
ANR	5059712	CompoundStatement		126:38:4064:4064	5059127	1					
ANR	5059713	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Skipping %s: because it is already running as a whole machine.\\n"" , name . c_str ( ) )"	578:3:16284:16396	5059127	0	True				
ANR	5059714	CallExpression	"dprintf ( D_FULLDEBUG , ""Skipping %s: because it is already running as a whole machine.\\n"" , name . c_str ( ) )"		5059127	0					
ANR	5059715	Callee	dprintf		5059127	0					
ANR	5059716	Identifier	dprintf		5059127	0					
ANR	5059717	ArgumentList	D_FULLDEBUG		5059127	1					
ANR	5059718	Argument	D_FULLDEBUG		5059127	0					
ANR	5059719	Identifier	D_FULLDEBUG		5059127	0					
ANR	5059720	Argument	"""Skipping %s: because it is already running as a whole machine.\\n"""		5059127	1					
ANR	5059721	PrimaryExpression	"""Skipping %s: because it is already running as a whole machine.\\n"""		5059127	0					
ANR	5059722	Argument	name . c_str ( )		5059127	2					
ANR	5059723	CallExpression	name . c_str ( )		5059127	0					
ANR	5059724	Callee	name . c_str		5059127	0					
ANR	5059725	MemberAccess	name . c_str		5059127	0					
ANR	5059726	Identifier	name		5059127	0					
ANR	5059727	Identifier	c_str		5059127	1					
ANR	5059728	ArgumentList			5059127	1					
ANR	5059729	ContinueStatement	continue ;	581:3:16401:16409	5059127	1	True				
ANR	5059730	IfStatement	if ( drain ( startd_ad ) )		5059127	6					
ANR	5059731	Condition	drain ( startd_ad )	584:6:16422:16437	5059127	0	True				
ANR	5059732	CallExpression	drain ( startd_ad )		5059127	0					
ANR	5059733	Callee	drain		5059127	0					
ANR	5059734	Identifier	drain		5059127	0					
ANR	5059735	ArgumentList	startd_ad		5059127	1					
ANR	5059736	Argument	startd_ad		5059127	0					
ANR	5059737	Identifier	startd_ad		5059127	0					
ANR	5059738	CompoundStatement		133:25:4226:4226	5059127	1					
ANR	5059739	ExpressionStatement	machines_done . insert ( machine )	585:3:16446:16475	5059127	0	True				
ANR	5059740	CallExpression	machines_done . insert ( machine )		5059127	0					
ANR	5059741	Callee	machines_done . insert		5059127	0					
ANR	5059742	MemberAccess	machines_done . insert		5059127	0					
ANR	5059743	Identifier	machines_done		5059127	0					
ANR	5059744	Identifier	insert		5059127	1					
ANR	5059745	ArgumentList	machine		5059127	1					
ANR	5059746	Argument	machine		5059127	0					
ANR	5059747	Identifier	machine		5059127	0					
ANR	5059748	IfStatement	if ( ++ num_drained >= num_to_drain )		5059127	1					
ANR	5059749	Condition	++ num_drained >= num_to_drain	587:7:16485:16513	5059127	0	True				
ANR	5059750	RelationalExpression	++ num_drained >= num_to_drain		5059127	0		>=			
ANR	5059751	UnaryExpression	++ num_drained		5059127	0					
ANR	5059752	IncDec	++		5059127	0					
ANR	5059753	Identifier	num_drained		5059127	1					
ANR	5059754	Identifier	num_to_drain		5059127	1					
ANR	5059755	CompoundStatement		136:39:4302:4302	5059127	1					
ANR	5059756	ExpressionStatement	"dprintf ( D_ALWAYS , ""Drained maximum number of machines allowed in this cycle (%d).\\n"" , num_to_drain )"	588:4:16523:16634	5059127	0	True				
ANR	5059757	CallExpression	"dprintf ( D_ALWAYS , ""Drained maximum number of machines allowed in this cycle (%d).\\n"" , num_to_drain )"		5059127	0					
ANR	5059758	Callee	dprintf		5059127	0					
ANR	5059759	Identifier	dprintf		5059127	0					
ANR	5059760	ArgumentList	D_ALWAYS		5059127	1					
ANR	5059761	Argument	D_ALWAYS		5059127	0					
ANR	5059762	Identifier	D_ALWAYS		5059127	0					
ANR	5059763	Argument	"""Drained maximum number of machines allowed in this cycle (%d).\\n"""		5059127	1					
ANR	5059764	PrimaryExpression	"""Drained maximum number of machines allowed in this cycle (%d).\\n"""		5059127	0					
ANR	5059765	Argument	num_to_drain		5059127	2					
ANR	5059766	Identifier	num_to_drain		5059127	0					
ANR	5059767	BreakStatement	break ;	591:4:16640:16645	5059127	1	True				
ANR	5059768	ExpressionStatement	startdAds . Close ( )	595:1:16660:16677	5059127	40	True				
ANR	5059769	CallExpression	startdAds . Close ( )		5059127	0					
ANR	5059770	Callee	startdAds . Close		5059127	0					
ANR	5059771	MemberAccess	startdAds . Close		5059127	0					
ANR	5059772	Identifier	startdAds		5059127	0					
ANR	5059773	Identifier	Close		5059127	1					
ANR	5059774	ArgumentList			5059127	1					
ANR	5059775	ExpressionStatement	"dprintf ( D_ALWAYS , ""Drained %d machines (wanted to drain %d machines).\\n"" , num_drained , num_drained )"	597:1:16681:16781	5059127	41	True				
ANR	5059776	CallExpression	"dprintf ( D_ALWAYS , ""Drained %d machines (wanted to drain %d machines).\\n"" , num_drained , num_drained )"		5059127	0					
ANR	5059777	Callee	dprintf		5059127	0					
ANR	5059778	Identifier	dprintf		5059127	0					
ANR	5059779	ArgumentList	D_ALWAYS		5059127	1					
ANR	5059780	Argument	D_ALWAYS		5059127	0					
ANR	5059781	Identifier	D_ALWAYS		5059127	0					
ANR	5059782	Argument	"""Drained %d machines (wanted to drain %d machines).\\n"""		5059127	1					
ANR	5059783	PrimaryExpression	"""Drained %d machines (wanted to drain %d machines).\\n"""		5059127	0					
ANR	5059784	Argument	num_drained		5059127	2					
ANR	5059785	Identifier	num_drained		5059127	0					
ANR	5059786	Argument	num_drained		5059127	3					
ANR	5059787	Identifier	num_drained		5059127	0					
ANR	5059788	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Done evaluating defragmentation policy.\\n"" )"	600:1:16785:16849	5059127	42	True				
ANR	5059789	CallExpression	"dprintf ( D_FULLDEBUG , ""Done evaluating defragmentation policy.\\n"" )"		5059127	0					
ANR	5059790	Callee	dprintf		5059127	0					
ANR	5059791	Identifier	dprintf		5059127	0					
ANR	5059792	ArgumentList	D_FULLDEBUG		5059127	1					
ANR	5059793	Argument	D_FULLDEBUG		5059127	0					
ANR	5059794	Identifier	D_FULLDEBUG		5059127	0					
ANR	5059795	Argument	"""Done evaluating defragmentation policy.\\n"""		5059127	1					
ANR	5059796	PrimaryExpression	"""Done evaluating defragmentation policy.\\n"""		5059127	0					
ANR	5059797	ReturnType	void		5059127	1					
ANR	5059798	Identifier	Defrag :: poll		5059127	2					
ANR	5059799	ParameterList			5059127	3					
ANR	5059800	CFGEntryNode	ENTRY		5059127		True				
ANR	5059801	CFGExitNode	EXIT		5059127		True				
ANR	5059802	Symbol	num_draining		5059127						
ANR	5059803	Symbol	ATTR_NAME		5059127						
ANR	5059804	Symbol	prev		5059127						
ANR	5059805	Symbol	current_day		5059127						
ANR	5059806	Symbol	startdAds		5059127						
ANR	5059807	Symbol	draining_constraint		5059127						
ANR	5059808	Symbol	m_draining_per_poll_hour		5059127						
ANR	5059809	Symbol	last_hour		5059127						
ANR	5059810	Symbol	requirements . c_str		5059127						
ANR	5059811	Symbol	prorate		5059127						
ANR	5059812	Symbol	countMachines		5059127						
ANR	5059813	Symbol	NULL		5059127						
ANR	5059814	Symbol	D_FULLDEBUG		5059127						
ANR	5059815	Symbol	ceil		5059127						
ANR	5059816	Symbol	m_stats . WholeMachines		5059127						
ANR	5059817	Symbol	name		5059127						
ANR	5059818	Symbol	whole_machines		5059127						
ANR	5059819	Symbol	whole_machines . count		5059127						
ANR	5059820	Symbol	m_defrag_requirements . c_str		5059127						
ANR	5059821	Symbol	m_draining_per_poll		5059127						
ANR	5059822	Symbol	drain		5059127						
ANR	5059823	Symbol	name . c_str		5059127						
ANR	5059824	Symbol	m_last_poll		5059127						
ANR	5059825	Symbol	m_polling_interval		5059127						
ANR	5059826	Symbol	m_draining_per_poll_day		5059127						
ANR	5059827	Symbol	num_drained		5059127						
ANR	5059828	Symbol	now		5059127						
ANR	5059829	Symbol	m_whole_machine_expr . c_str		5059127						
ANR	5059830	Symbol	StartdSortFunc		5059127						
ANR	5059831	Symbol	m_stats . MachinesDraining		5059127						
ANR	5059832	Symbol	startd_ad		5059127						
ANR	5059833	Symbol	m_max_draining		5059127						
ANR	5059834	Symbol	current_hour		5059127						
ANR	5059835	Symbol	requirements		5059127						
ANR	5059836	Symbol	m_stats		5059127						
ANR	5059837	Symbol	num_whole_machines		5059127						
ANR	5059838	Symbol	D_ALWAYS		5059127						
ANR	5059839	Symbol	m_defrag_requirements		5059127						
ANR	5059840	Symbol	& m_rank_ad		5059127						
ANR	5059841	Symbol	queryMachines		5059127						
ANR	5059842	Symbol	machine . c_str		5059127						
ANR	5059843	Symbol	m_draining_per_hour		5059127						
ANR	5059844	Symbol	& whole_machines		5059127						
ANR	5059845	Symbol	m_max_whole_machines		5059127						
ANR	5059846	Symbol	machine		5059127						
ANR	5059847	Symbol	m_whole_machine_expr		5059127						
ANR	5059848	Symbol	startdAds . Next		5059127						
ANR	5059849	Symbol	machines_done		5059127						
ANR	5059850	Symbol	machines_done . count		5059127						
ANR	5059851	Symbol	time		5059127						
ANR	5059852	Symbol	last_day		5059127						
ANR	5059853	Symbol	num_to_drain		5059127						
ANR	5059854	Function	Defrag :: drain	603:0:16854:19186							
ANR	5059855	FunctionDef	Defrag :: drain (ClassAd * startd_ad)		5059854	0					
ANR	5059856	CompoundStatement		605:0:16893:19186	5059854	0					
ANR	5059857	ExpressionStatement	ASSERT ( startd_ad )	606:1:16896:16915	5059854	0	True				
ANR	5059858	CallExpression	ASSERT ( startd_ad )		5059854	0					
ANR	5059859	Callee	ASSERT		5059854	0					
ANR	5059860	Identifier	ASSERT		5059854	0					
ANR	5059861	ArgumentList	startd_ad		5059854	1					
ANR	5059862	Argument	startd_ad		5059854	0					
ANR	5059863	Identifier	startd_ad		5059854	0					
ANR	5059864	IdentifierDeclStatement	std :: string name ;	608:1:16919:16935	5059854	1	True				
ANR	5059865	IdentifierDecl	name		5059854	0					
ANR	5059866	IdentifierDeclType	std :: string		5059854	0					
ANR	5059867	Identifier	name		5059854	1					
ANR	5059868	ExpressionStatement	"startd_ad -> LookupString ( ATTR_NAME , name )"	609:1:16938:16977	5059854	2	True				
ANR	5059869	CallExpression	"startd_ad -> LookupString ( ATTR_NAME , name )"		5059854	0					
ANR	5059870	Callee	startd_ad -> LookupString		5059854	0					
ANR	5059871	PtrMemberAccess	startd_ad -> LookupString		5059854	0					
ANR	5059872	Identifier	startd_ad		5059854	0					
ANR	5059873	Identifier	LookupString		5059854	1					
ANR	5059874	ArgumentList	ATTR_NAME		5059854	1					
ANR	5059875	Argument	ATTR_NAME		5059854	0					
ANR	5059876	Identifier	ATTR_NAME		5059854	0					
ANR	5059877	Argument	name		5059854	1					
ANR	5059878	Identifier	name		5059854	0					
ANR	5059879	ExpressionStatement	"dprintf ( D_ALWAYS , ""Initiating %s draining of %s.\\n"" , m_draining_schedule_str . c_str ( ) , name . c_str ( ) )"	611:1:16981:17081	5059854	3	True				
ANR	5059880	CallExpression	"dprintf ( D_ALWAYS , ""Initiating %s draining of %s.\\n"" , m_draining_schedule_str . c_str ( ) , name . c_str ( ) )"		5059854	0					
ANR	5059881	Callee	dprintf		5059854	0					
ANR	5059882	Identifier	dprintf		5059854	0					
ANR	5059883	ArgumentList	D_ALWAYS		5059854	1					
ANR	5059884	Argument	D_ALWAYS		5059854	0					
ANR	5059885	Identifier	D_ALWAYS		5059854	0					
ANR	5059886	Argument	"""Initiating %s draining of %s.\\n"""		5059854	1					
ANR	5059887	PrimaryExpression	"""Initiating %s draining of %s.\\n"""		5059854	0					
ANR	5059888	Argument	m_draining_schedule_str . c_str ( )		5059854	2					
ANR	5059889	CallExpression	m_draining_schedule_str . c_str ( )		5059854	0					
ANR	5059890	Callee	m_draining_schedule_str . c_str		5059854	0					
ANR	5059891	MemberAccess	m_draining_schedule_str . c_str		5059854	0					
ANR	5059892	Identifier	m_draining_schedule_str		5059854	0					
ANR	5059893	Identifier	c_str		5059854	1					
ANR	5059894	ArgumentList			5059854	1					
ANR	5059895	Argument	name . c_str ( )		5059854	3					
ANR	5059896	CallExpression	name . c_str ( )		5059854	0					
ANR	5059897	Callee	name . c_str		5059854	0					
ANR	5059898	MemberAccess	name . c_str		5059854	0					
ANR	5059899	Identifier	name		5059854	0					
ANR	5059900	Identifier	c_str		5059854	1					
ANR	5059901	ArgumentList			5059854	1					
ANR	5059902	IdentifierDeclStatement	DCStartd startd ( startd_ad ) ;	614:1:17085:17113	5059854	4	True				
ANR	5059903	IdentifierDecl	startd ( startd_ad )		5059854	0					
ANR	5059904	IdentifierDeclType	DCStartd		5059854	0					
ANR	5059905	Identifier	startd		5059854	1					
ANR	5059906	Identifier	startd_ad		5059854	2					
ANR	5059907	IdentifierDeclStatement	int graceful_completion = 0 ;	616:1:17117:17144	5059854	5	True				
ANR	5059908	IdentifierDecl	graceful_completion = 0		5059854	0					
ANR	5059909	IdentifierDeclType	int		5059854	0					
ANR	5059910	Identifier	graceful_completion		5059854	1					
ANR	5059911	AssignmentExpression	graceful_completion = 0		5059854	2		=			
ANR	5059912	Identifier	graceful_completion		5059854	0					
ANR	5059913	PrimaryExpression	0		5059854	1					
ANR	5059914	ExpressionStatement	"startd_ad -> LookupInteger ( ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_COMPLETION , graceful_completion )"	617:1:17147:17243	5059854	6	True				
ANR	5059915	CallExpression	"startd_ad -> LookupInteger ( ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_COMPLETION , graceful_completion )"		5059854	0					
ANR	5059916	Callee	startd_ad -> LookupInteger		5059854	0					
ANR	5059917	PtrMemberAccess	startd_ad -> LookupInteger		5059854	0					
ANR	5059918	Identifier	startd_ad		5059854	0					
ANR	5059919	Identifier	LookupInteger		5059854	1					
ANR	5059920	ArgumentList	ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_COMPLETION		5059854	1					
ANR	5059921	Argument	ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_COMPLETION		5059854	0					
ANR	5059922	Identifier	ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_COMPLETION		5059854	0					
ANR	5059923	Argument	graceful_completion		5059854	1					
ANR	5059924	Identifier	graceful_completion		5059854	0					
ANR	5059925	IdentifierDeclStatement	int quick_completion = 0 ;	618:1:17246:17270	5059854	7	True				
ANR	5059926	IdentifierDecl	quick_completion = 0		5059854	0					
ANR	5059927	IdentifierDeclType	int		5059854	0					
ANR	5059928	Identifier	quick_completion		5059854	1					
ANR	5059929	AssignmentExpression	quick_completion = 0		5059854	2		=			
ANR	5059930	Identifier	quick_completion		5059854	0					
ANR	5059931	PrimaryExpression	0		5059854	1					
ANR	5059932	ExpressionStatement	"startd_ad -> LookupInteger ( ATTR_EXPECTED_MACHINE_QUICK_DRAINING_COMPLETION , quick_completion )"	619:1:17273:17363	5059854	8	True				
ANR	5059933	CallExpression	"startd_ad -> LookupInteger ( ATTR_EXPECTED_MACHINE_QUICK_DRAINING_COMPLETION , quick_completion )"		5059854	0					
ANR	5059934	Callee	startd_ad -> LookupInteger		5059854	0					
ANR	5059935	PtrMemberAccess	startd_ad -> LookupInteger		5059854	0					
ANR	5059936	Identifier	startd_ad		5059854	0					
ANR	5059937	Identifier	LookupInteger		5059854	1					
ANR	5059938	ArgumentList	ATTR_EXPECTED_MACHINE_QUICK_DRAINING_COMPLETION		5059854	1					
ANR	5059939	Argument	ATTR_EXPECTED_MACHINE_QUICK_DRAINING_COMPLETION		5059854	0					
ANR	5059940	Identifier	ATTR_EXPECTED_MACHINE_QUICK_DRAINING_COMPLETION		5059854	0					
ANR	5059941	Argument	quick_completion		5059854	1					
ANR	5059942	Identifier	quick_completion		5059854	0					
ANR	5059943	IdentifierDeclStatement	int graceful_badput = 0 ;	620:1:17366:17389	5059854	9	True				
ANR	5059944	IdentifierDecl	graceful_badput = 0		5059854	0					
ANR	5059945	IdentifierDeclType	int		5059854	0					
ANR	5059946	Identifier	graceful_badput		5059854	1					
ANR	5059947	AssignmentExpression	graceful_badput = 0		5059854	2		=			
ANR	5059948	Identifier	graceful_badput		5059854	0					
ANR	5059949	PrimaryExpression	0		5059854	1					
ANR	5059950	ExpressionStatement	"startd_ad -> LookupInteger ( ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_BADPUT , graceful_badput )"	621:1:17392:17480	5059854	10	True				
ANR	5059951	CallExpression	"startd_ad -> LookupInteger ( ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_BADPUT , graceful_badput )"		5059854	0					
ANR	5059952	Callee	startd_ad -> LookupInteger		5059854	0					
ANR	5059953	PtrMemberAccess	startd_ad -> LookupInteger		5059854	0					
ANR	5059954	Identifier	startd_ad		5059854	0					
ANR	5059955	Identifier	LookupInteger		5059854	1					
ANR	5059956	ArgumentList	ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_BADPUT		5059854	1					
ANR	5059957	Argument	ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_BADPUT		5059854	0					
ANR	5059958	Identifier	ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_BADPUT		5059854	0					
ANR	5059959	Argument	graceful_badput		5059854	1					
ANR	5059960	Identifier	graceful_badput		5059854	0					
ANR	5059961	IdentifierDeclStatement	int quick_badput = 0 ;	622:1:17483:17503	5059854	11	True				
ANR	5059962	IdentifierDecl	quick_badput = 0		5059854	0					
ANR	5059963	IdentifierDeclType	int		5059854	0					
ANR	5059964	Identifier	quick_badput		5059854	1					
ANR	5059965	AssignmentExpression	quick_badput = 0		5059854	2		=			
ANR	5059966	Identifier	quick_badput		5059854	0					
ANR	5059967	PrimaryExpression	0		5059854	1					
ANR	5059968	ExpressionStatement	"startd_ad -> LookupInteger ( ATTR_EXPECTED_MACHINE_QUICK_DRAINING_BADPUT , quick_badput )"	623:1:17506:17588	5059854	12	True				
ANR	5059969	CallExpression	"startd_ad -> LookupInteger ( ATTR_EXPECTED_MACHINE_QUICK_DRAINING_BADPUT , quick_badput )"		5059854	0					
ANR	5059970	Callee	startd_ad -> LookupInteger		5059854	0					
ANR	5059971	PtrMemberAccess	startd_ad -> LookupInteger		5059854	0					
ANR	5059972	Identifier	startd_ad		5059854	0					
ANR	5059973	Identifier	LookupInteger		5059854	1					
ANR	5059974	ArgumentList	ATTR_EXPECTED_MACHINE_QUICK_DRAINING_BADPUT		5059854	1					
ANR	5059975	Argument	ATTR_EXPECTED_MACHINE_QUICK_DRAINING_BADPUT		5059854	0					
ANR	5059976	Identifier	ATTR_EXPECTED_MACHINE_QUICK_DRAINING_BADPUT		5059854	0					
ANR	5059977	Argument	quick_badput		5059854	1					
ANR	5059978	Identifier	quick_badput		5059854	0					
ANR	5059979	IdentifierDeclStatement	time_t now = time ( NULL ) ;	625:1:17592:17615	5059854	13	True				
ANR	5059980	IdentifierDecl	now = time ( NULL )		5059854	0					
ANR	5059981	IdentifierDeclType	time_t		5059854	0					
ANR	5059982	Identifier	now		5059854	1					
ANR	5059983	AssignmentExpression	now = time ( NULL )		5059854	2		=			
ANR	5059984	Identifier	now		5059854	0					
ANR	5059985	CallExpression	time ( NULL )		5059854	1					
ANR	5059986	Callee	time		5059854	0					
ANR	5059987	Identifier	time		5059854	0					
ANR	5059988	ArgumentList	NULL		5059854	1					
ANR	5059989	Argument	NULL		5059854	0					
ANR	5059990	Identifier	NULL		5059854	0					
ANR	5059991	IdentifierDeclStatement	std :: string draining_check_expr ;	626:1:17618:17649	5059854	14	True				
ANR	5059992	IdentifierDecl	draining_check_expr		5059854	0					
ANR	5059993	IdentifierDeclType	std :: string		5059854	0					
ANR	5059994	Identifier	draining_check_expr		5059854	1					
ANR	5059995	IdentifierDeclStatement	double badput_growth_tolerance = 1.25 ;	627:1:17652:17689	5059854	15	True				
ANR	5059996	IdentifierDecl	badput_growth_tolerance = 1.25		5059854	0					
ANR	5059997	IdentifierDeclType	double		5059854	0					
ANR	5059998	Identifier	badput_growth_tolerance		5059854	1					
ANR	5059999	AssignmentExpression	badput_growth_tolerance = 1.25		5059854	2		=			
ANR	5060000	Identifier	badput_growth_tolerance		5059854	0					
ANR	5060001	PrimaryExpression	1.25		5059854	1					
ANR	5060002	IdentifierDeclStatement	int negligible_badput = 1200 ;	628:1:17723:17751	5059854	16	True				
ANR	5060003	IdentifierDecl	negligible_badput = 1200		5059854	0					
ANR	5060004	IdentifierDeclType	int		5059854	0					
ANR	5060005	Identifier	negligible_badput		5059854	1					
ANR	5060006	AssignmentExpression	negligible_badput = 1200		5059854	2		=			
ANR	5060007	Identifier	negligible_badput		5059854	0					
ANR	5060008	PrimaryExpression	1200		5059854	1					
ANR	5060009	IdentifierDeclStatement	int negligible_deadline_slippage = 1200 ;	629:1:17754:17793	5059854	17	True				
ANR	5060010	IdentifierDecl	negligible_deadline_slippage = 1200		5059854	0					
ANR	5060011	IdentifierDeclType	int		5059854	0					
ANR	5060012	Identifier	negligible_deadline_slippage		5059854	1					
ANR	5060013	AssignmentExpression	negligible_deadline_slippage = 1200		5059854	2		=			
ANR	5060014	Identifier	negligible_deadline_slippage		5059854	0					
ANR	5060015	PrimaryExpression	1200		5059854	1					
ANR	5060016	IfStatement	if ( m_draining_schedule <= DRAIN_GRACEFUL )		5059854	18					
ANR	5060017	Condition	m_draining_schedule <= DRAIN_GRACEFUL	630:5:17800:17836	5059854	0	True				
ANR	5060018	RelationalExpression	m_draining_schedule <= DRAIN_GRACEFUL		5059854	0		<=			
ANR	5060019	Identifier	m_draining_schedule		5059854	0					
ANR	5060020	Identifier	DRAIN_GRACEFUL		5059854	1					
ANR	5060021	CompoundStatement		26:45:946:946	5059854	1					
ANR	5060022	ExpressionStatement	"dprintf ( D_ALWAYS , ""Expected draining completion time is %ds; expected draining badput is %d cpu-seconds\\n"" , ( int ) ( graceful_completion - now ) , graceful_badput )"	631:2:17844:18002	5059854	0	True				
ANR	5060023	CallExpression	"dprintf ( D_ALWAYS , ""Expected draining completion time is %ds; expected draining badput is %d cpu-seconds\\n"" , ( int ) ( graceful_completion - now ) , graceful_badput )"		5059854	0					
ANR	5060024	Callee	dprintf		5059854	0					
ANR	5060025	Identifier	dprintf		5059854	0					
ANR	5060026	ArgumentList	D_ALWAYS		5059854	1					
ANR	5060027	Argument	D_ALWAYS		5059854	0					
ANR	5060028	Identifier	D_ALWAYS		5059854	0					
ANR	5060029	Argument	"""Expected draining completion time is %ds; expected draining badput is %d cpu-seconds\\n"""		5059854	1					
ANR	5060030	PrimaryExpression	"""Expected draining completion time is %ds; expected draining badput is %d cpu-seconds\\n"""		5059854	0					
ANR	5060031	Argument	( int ) ( graceful_completion - now )		5059854	2					
ANR	5060032	CastExpression	( int ) ( graceful_completion - now )		5059854	0					
ANR	5060033	CastTarget	int		5059854	0					
ANR	5060034	AdditiveExpression	graceful_completion - now		5059854	1		-			
ANR	5060035	Identifier	graceful_completion		5059854	0					
ANR	5060036	Identifier	now		5059854	1					
ANR	5060037	Argument	graceful_badput		5059854	3					
ANR	5060038	Identifier	graceful_badput		5059854	0					
ANR	5060039	ExpressionStatement	"sprintf ( draining_check_expr , ""%s <= %d && %s <= %d"" , ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_COMPLETION , graceful_completion + negligible_deadline_slippage , ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_BADPUT , ( int ) ( badput_growth_tolerance * graceful_badput ) + negligible_badput )"	633:2:18006:18293	5059854	1	True				
ANR	5060040	CallExpression	"sprintf ( draining_check_expr , ""%s <= %d && %s <= %d"" , ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_COMPLETION , graceful_completion + negligible_deadline_slippage , ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_BADPUT , ( int ) ( badput_growth_tolerance * graceful_badput ) + negligible_badput )"		5059854	0					
ANR	5060041	Callee	sprintf		5059854	0					
ANR	5060042	Identifier	sprintf		5059854	0					
ANR	5060043	ArgumentList	draining_check_expr		5059854	1					
ANR	5060044	Argument	draining_check_expr		5059854	0					
ANR	5060045	Identifier	draining_check_expr		5059854	0					
ANR	5060046	Argument	"""%s <= %d && %s <= %d"""		5059854	1					
ANR	5060047	PrimaryExpression	"""%s <= %d && %s <= %d"""		5059854	0					
ANR	5060048	Argument	ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_COMPLETION		5059854	2					
ANR	5060049	Identifier	ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_COMPLETION		5059854	0					
ANR	5060050	Argument	graceful_completion + negligible_deadline_slippage		5059854	3					
ANR	5060051	AdditiveExpression	graceful_completion + negligible_deadline_slippage		5059854	0		+			
ANR	5060052	Identifier	graceful_completion		5059854	0					
ANR	5060053	Identifier	negligible_deadline_slippage		5059854	1					
ANR	5060054	Argument	ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_BADPUT		5059854	4					
ANR	5060055	Identifier	ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_BADPUT		5059854	0					
ANR	5060056	Argument	( int ) ( badput_growth_tolerance * graceful_badput ) + negligible_badput		5059854	5					
ANR	5060057	AdditiveExpression	( int ) ( badput_growth_tolerance * graceful_badput ) + negligible_badput		5059854	0		+			
ANR	5060058	CastExpression	( int ) ( badput_growth_tolerance * graceful_badput )		5059854	0					
ANR	5060059	CastTarget	int		5059854	0					
ANR	5060060	MultiplicativeExpression	badput_growth_tolerance * graceful_badput		5059854	1		*			
ANR	5060061	Identifier	badput_growth_tolerance		5059854	0					
ANR	5060062	Identifier	graceful_badput		5059854	1					
ANR	5060063	Identifier	negligible_badput		5059854	1					
ANR	5060064	ElseStatement	else		5059854	0					
ANR	5060065	CompoundStatement		35:6:1410:1410	5059854	0					
ANR	5060066	ExpressionStatement	"dprintf ( D_ALWAYS , ""Expected draining completion time is %ds; expected draining badput is %d cpu-seconds\\n"" , ( int ) ( quick_completion - now ) , quick_badput )"	640:2:18370:18522	5059854	0	True				
ANR	5060067	CallExpression	"dprintf ( D_ALWAYS , ""Expected draining completion time is %ds; expected draining badput is %d cpu-seconds\\n"" , ( int ) ( quick_completion - now ) , quick_badput )"		5059854	0					
ANR	5060068	Callee	dprintf		5059854	0					
ANR	5060069	Identifier	dprintf		5059854	0					
ANR	5060070	ArgumentList	D_ALWAYS		5059854	1					
ANR	5060071	Argument	D_ALWAYS		5059854	0					
ANR	5060072	Identifier	D_ALWAYS		5059854	0					
ANR	5060073	Argument	"""Expected draining completion time is %ds; expected draining badput is %d cpu-seconds\\n"""		5059854	1					
ANR	5060074	PrimaryExpression	"""Expected draining completion time is %ds; expected draining badput is %d cpu-seconds\\n"""		5059854	0					
ANR	5060075	Argument	( int ) ( quick_completion - now )		5059854	2					
ANR	5060076	CastExpression	( int ) ( quick_completion - now )		5059854	0					
ANR	5060077	CastTarget	int		5059854	0					
ANR	5060078	AdditiveExpression	quick_completion - now		5059854	1		-			
ANR	5060079	Identifier	quick_completion		5059854	0					
ANR	5060080	Identifier	now		5059854	1					
ANR	5060081	Argument	quick_badput		5059854	3					
ANR	5060082	Identifier	quick_badput		5059854	0					
ANR	5060083	ExpressionStatement	"sprintf ( draining_check_expr , ""%s <= %d && %s <= %d"" , ATTR_EXPECTED_MACHINE_QUICK_DRAINING_COMPLETION , quick_completion + negligible_deadline_slippage , ATTR_EXPECTED_MACHINE_QUICK_DRAINING_BADPUT , ( int ) ( badput_growth_tolerance * quick_badput ) + negligible_badput )"	642:2:18526:18801	5059854	1	True				
ANR	5060084	CallExpression	"sprintf ( draining_check_expr , ""%s <= %d && %s <= %d"" , ATTR_EXPECTED_MACHINE_QUICK_DRAINING_COMPLETION , quick_completion + negligible_deadline_slippage , ATTR_EXPECTED_MACHINE_QUICK_DRAINING_BADPUT , ( int ) ( badput_growth_tolerance * quick_badput ) + negligible_badput )"		5059854	0					
ANR	5060085	Callee	sprintf		5059854	0					
ANR	5060086	Identifier	sprintf		5059854	0					
ANR	5060087	ArgumentList	draining_check_expr		5059854	1					
ANR	5060088	Argument	draining_check_expr		5059854	0					
ANR	5060089	Identifier	draining_check_expr		5059854	0					
ANR	5060090	Argument	"""%s <= %d && %s <= %d"""		5059854	1					
ANR	5060091	PrimaryExpression	"""%s <= %d && %s <= %d"""		5059854	0					
ANR	5060092	Argument	ATTR_EXPECTED_MACHINE_QUICK_DRAINING_COMPLETION		5059854	2					
ANR	5060093	Identifier	ATTR_EXPECTED_MACHINE_QUICK_DRAINING_COMPLETION		5059854	0					
ANR	5060094	Argument	quick_completion + negligible_deadline_slippage		5059854	3					
ANR	5060095	AdditiveExpression	quick_completion + negligible_deadline_slippage		5059854	0		+			
ANR	5060096	Identifier	quick_completion		5059854	0					
ANR	5060097	Identifier	negligible_deadline_slippage		5059854	1					
ANR	5060098	Argument	ATTR_EXPECTED_MACHINE_QUICK_DRAINING_BADPUT		5059854	4					
ANR	5060099	Identifier	ATTR_EXPECTED_MACHINE_QUICK_DRAINING_BADPUT		5059854	0					
ANR	5060100	Argument	( int ) ( badput_growth_tolerance * quick_badput ) + negligible_badput		5059854	5					
ANR	5060101	AdditiveExpression	( int ) ( badput_growth_tolerance * quick_badput ) + negligible_badput		5059854	0		+			
ANR	5060102	CastExpression	( int ) ( badput_growth_tolerance * quick_badput )		5059854	0					
ANR	5060103	CastTarget	int		5059854	0					
ANR	5060104	MultiplicativeExpression	badput_growth_tolerance * quick_badput		5059854	1		*			
ANR	5060105	Identifier	badput_growth_tolerance		5059854	0					
ANR	5060106	Identifier	quick_badput		5059854	1					
ANR	5060107	Identifier	negligible_badput		5059854	1					
ANR	5060108	IdentifierDeclStatement	std :: string request_id ;	649:1:18808:18830	5059854	19	True				
ANR	5060109	IdentifierDecl	request_id		5059854	0					
ANR	5060110	IdentifierDeclType	std :: string		5059854	0					
ANR	5060111	Identifier	request_id		5059854	1					
ANR	5060112	IdentifierDeclStatement	bool resume_on_completion = true ;	650:1:18833:18865	5059854	20	True				
ANR	5060113	IdentifierDecl	resume_on_completion = true		5059854	0					
ANR	5060114	IdentifierDeclType	bool		5059854	0					
ANR	5060115	Identifier	resume_on_completion		5059854	1					
ANR	5060116	AssignmentExpression	resume_on_completion = true		5059854	2		=			
ANR	5060117	Identifier	true		5059854	0					
ANR	5060118	Identifier	true		5059854	1					
ANR	5060119	IdentifierDeclStatement	"bool rval = startd . drainJobs ( m_draining_schedule , resume_on_completion , draining_check_expr . c_str ( ) , request_id ) ;"	651:1:18868:18982	5059854	21	True				
ANR	5060120	IdentifierDecl	"rval = startd . drainJobs ( m_draining_schedule , resume_on_completion , draining_check_expr . c_str ( ) , request_id )"		5059854	0					
ANR	5060121	IdentifierDeclType	bool		5059854	0					
ANR	5060122	Identifier	rval		5059854	1					
ANR	5060123	AssignmentExpression	"rval = startd . drainJobs ( m_draining_schedule , resume_on_completion , draining_check_expr . c_str ( ) , request_id )"		5059854	2		=			
ANR	5060124	Identifier	rval		5059854	0					
ANR	5060125	CallExpression	"startd . drainJobs ( m_draining_schedule , resume_on_completion , draining_check_expr . c_str ( ) , request_id )"		5059854	1					
ANR	5060126	Callee	startd . drainJobs		5059854	0					
ANR	5060127	MemberAccess	startd . drainJobs		5059854	0					
ANR	5060128	Identifier	startd		5059854	0					
ANR	5060129	Identifier	drainJobs		5059854	1					
ANR	5060130	ArgumentList	m_draining_schedule		5059854	1					
ANR	5060131	Argument	m_draining_schedule		5059854	0					
ANR	5060132	Identifier	m_draining_schedule		5059854	0					
ANR	5060133	Argument	resume_on_completion		5059854	1					
ANR	5060134	Identifier	resume_on_completion		5059854	0					
ANR	5060135	Argument	draining_check_expr . c_str ( )		5059854	2					
ANR	5060136	CallExpression	draining_check_expr . c_str ( )		5059854	0					
ANR	5060137	Callee	draining_check_expr . c_str		5059854	0					
ANR	5060138	MemberAccess	draining_check_expr . c_str		5059854	0					
ANR	5060139	Identifier	draining_check_expr		5059854	0					
ANR	5060140	Identifier	c_str		5059854	1					
ANR	5060141	ArgumentList			5059854	1					
ANR	5060142	Argument	request_id		5059854	3					
ANR	5060143	Identifier	request_id		5059854	0					
ANR	5060144	IfStatement	if ( ! rval )		5059854	22					
ANR	5060145	Condition	! rval	652:5:18989:18993	5059854	0	True				
ANR	5060146	UnaryOperationExpression	! rval		5059854	0					
ANR	5060147	UnaryOperator	!		5059854	0					
ANR	5060148	Identifier	rval		5059854	1					
ANR	5060149	CompoundStatement		48:13:2103:2103	5059854	1					
ANR	5060150	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to send request to drain %s: %s\\n"" , startd . name ( ) , startd . error ( ) )"	653:2:19001:19090	5059854	0	True				
ANR	5060151	CallExpression	"dprintf ( D_ALWAYS , ""Failed to send request to drain %s: %s\\n"" , startd . name ( ) , startd . error ( ) )"		5059854	0					
ANR	5060152	Callee	dprintf		5059854	0					
ANR	5060153	Identifier	dprintf		5059854	0					
ANR	5060154	ArgumentList	D_ALWAYS		5059854	1					
ANR	5060155	Argument	D_ALWAYS		5059854	0					
ANR	5060156	Identifier	D_ALWAYS		5059854	0					
ANR	5060157	Argument	"""Failed to send request to drain %s: %s\\n"""		5059854	1					
ANR	5060158	PrimaryExpression	"""Failed to send request to drain %s: %s\\n"""		5059854	0					
ANR	5060159	Argument	startd . name ( )		5059854	2					
ANR	5060160	CallExpression	startd . name ( )		5059854	0					
ANR	5060161	Callee	startd . name		5059854	0					
ANR	5060162	MemberAccess	startd . name		5059854	0					
ANR	5060163	Identifier	startd		5059854	0					
ANR	5060164	Identifier	name		5059854	1					
ANR	5060165	ArgumentList			5059854	1					
ANR	5060166	Argument	startd . error ( )		5059854	3					
ANR	5060167	CallExpression	startd . error ( )		5059854	0					
ANR	5060168	Callee	startd . error		5059854	0					
ANR	5060169	MemberAccess	startd . error		5059854	0					
ANR	5060170	Identifier	startd		5059854	0					
ANR	5060171	Identifier	error		5059854	1					
ANR	5060172	ArgumentList			5059854	1					
ANR	5060173	ExpressionStatement	m_stats . DrainFailures += 1	654:2:19094:19120	5059854	1	True				
ANR	5060174	AssignmentExpression	m_stats . DrainFailures += 1		5059854	0		+=			
ANR	5060175	MemberAccess	m_stats . DrainFailures		5059854	0					
ANR	5060176	Identifier	m_stats		5059854	0					
ANR	5060177	Identifier	DrainFailures		5059854	1					
ANR	5060178	PrimaryExpression	1		5059854	1					
ANR	5060179	ReturnStatement	return false ;	655:2:19124:19136	5059854	2	True				
ANR	5060180	Identifier	false		5059854	0					
ANR	5060181	ExpressionStatement	m_stats . DrainSuccesses += 1	657:1:19142:19169	5059854	23	True				
ANR	5060182	AssignmentExpression	m_stats . DrainSuccesses += 1		5059854	0		+=			
ANR	5060183	MemberAccess	m_stats . DrainSuccesses		5059854	0					
ANR	5060184	Identifier	m_stats		5059854	0					
ANR	5060185	Identifier	DrainSuccesses		5059854	1					
ANR	5060186	PrimaryExpression	1		5059854	1					
ANR	5060187	ReturnStatement	return true ;	659:1:19173:19184	5059854	24	True				
ANR	5060188	Identifier	true		5059854	0					
ANR	5060189	ReturnType	bool		5059854	1					
ANR	5060190	Identifier	Defrag :: drain		5059854	2					
ANR	5060191	ParameterList	ClassAd * startd_ad		5059854	3					
ANR	5060192	Parameter	ClassAd * startd_ad	604:14:16873:16890	5059854	0	True				
ANR	5060193	ParameterType	ClassAd *		5059854	0					
ANR	5060194	Identifier	startd_ad		5059854	1					
ANR	5060195	CFGEntryNode	ENTRY		5059854		True				
ANR	5060196	CFGExitNode	EXIT		5059854		True				
ANR	5060197	Symbol	ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_BADPUT		5059854						
ANR	5060198	Symbol	ATTR_NAME		5059854						
ANR	5060199	Symbol	ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_COMPLETION		5059854						
ANR	5060200	Symbol	quick_completion		5059854						
ANR	5060201	Symbol	m_draining_schedule_str . c_str		5059854						
ANR	5060202	Symbol	name . c_str		5059854						
ANR	5060203	Symbol	startd		5059854						
ANR	5060204	Symbol	negligible_badput		5059854						
ANR	5060205	Symbol	now		5059854						
ANR	5060206	Symbol	resume_on_completion		5059854						
ANR	5060207	Symbol	rval		5059854						
ANR	5060208	Symbol	startd_ad		5059854						
ANR	5060209	Symbol	startd . drainJobs		5059854						
ANR	5060210	Symbol	m_draining_schedule_str		5059854						
ANR	5060211	Symbol	NULL		5059854						
ANR	5060212	Symbol	draining_check_expr . c_str		5059854						
ANR	5060213	Symbol	m_stats		5059854						
ANR	5060214	Symbol	negligible_deadline_slippage		5059854						
ANR	5060215	Symbol	m_draining_schedule		5059854						
ANR	5060216	Symbol	badput_growth_tolerance		5059854						
ANR	5060217	Symbol	D_ALWAYS		5059854						
ANR	5060218	Symbol	quick_badput		5059854						
ANR	5060219	Symbol	false		5059854						
ANR	5060220	Symbol	DRAIN_GRACEFUL		5059854						
ANR	5060221	Symbol	draining_check_expr		5059854						
ANR	5060222	Symbol	startd . name		5059854						
ANR	5060223	Symbol	startd . error		5059854						
ANR	5060224	Symbol	ATTR_EXPECTED_MACHINE_QUICK_DRAINING_COMPLETION		5059854						
ANR	5060225	Symbol	name		5059854						
ANR	5060226	Symbol	true		5059854						
ANR	5060227	Symbol	ATTR_EXPECTED_MACHINE_QUICK_DRAINING_BADPUT		5059854						
ANR	5060228	Symbol	m_stats . DrainSuccesses		5059854						
ANR	5060229	Symbol	time		5059854						
ANR	5060230	Symbol	graceful_badput		5059854						
ANR	5060231	Symbol	m_stats . DrainFailures		5059854						
ANR	5060232	Symbol	request_id		5059854						
ANR	5060233	Symbol	graceful_completion		5059854						
ANR	5060234	Function	Defrag :: publish	662:0:19189:19541							
ANR	5060235	FunctionDef	Defrag :: publish (ClassAd * ad)		5060234	0					
ANR	5060236	CompoundStatement		664:0:19223:19541	5060234	0					
ANR	5060237	IdentifierDeclStatement	char * valid_name = build_valid_daemon_name ( m_defrag_name . c_str ( ) ) ;	665:1:19226:19291	5060234	0	True				
ANR	5060238	IdentifierDecl	* valid_name = build_valid_daemon_name ( m_defrag_name . c_str ( ) )		5060234	0					
ANR	5060239	IdentifierDeclType	char *		5060234	0					
ANR	5060240	Identifier	valid_name		5060234	1					
ANR	5060241	AssignmentExpression	* valid_name = build_valid_daemon_name ( m_defrag_name . c_str ( ) )		5060234	2		=			
ANR	5060242	Identifier	valid_name		5060234	0					
ANR	5060243	CallExpression	build_valid_daemon_name ( m_defrag_name . c_str ( ) )		5060234	1					
ANR	5060244	Callee	build_valid_daemon_name		5060234	0					
ANR	5060245	Identifier	build_valid_daemon_name		5060234	0					
ANR	5060246	ArgumentList	m_defrag_name . c_str ( )		5060234	1					
ANR	5060247	Argument	m_defrag_name . c_str ( )		5060234	0					
ANR	5060248	CallExpression	m_defrag_name . c_str ( )		5060234	0					
ANR	5060249	Callee	m_defrag_name . c_str		5060234	0					
ANR	5060250	MemberAccess	m_defrag_name . c_str		5060234	0					
ANR	5060251	Identifier	m_defrag_name		5060234	0					
ANR	5060252	Identifier	c_str		5060234	1					
ANR	5060253	ArgumentList			5060234	1					
ANR	5060254	ExpressionStatement	ASSERT ( valid_name )	666:1:19294:19314	5060234	1	True				
ANR	5060255	CallExpression	ASSERT ( valid_name )		5060234	0					
ANR	5060256	Callee	ASSERT		5060234	0					
ANR	5060257	Identifier	ASSERT		5060234	0					
ANR	5060258	ArgumentList	valid_name		5060234	1					
ANR	5060259	Argument	valid_name		5060234	0					
ANR	5060260	Identifier	valid_name		5060234	0					
ANR	5060261	ExpressionStatement	m_daemon_name = valid_name	667:1:19317:19343	5060234	2	True				
ANR	5060262	AssignmentExpression	m_daemon_name = valid_name		5060234	0		=			
ANR	5060263	Identifier	m_daemon_name		5060234	0					
ANR	5060264	Identifier	valid_name		5060234	1					
ANR	5060265	Statement	delete	668:1:19346:19351	5060234	3	True				
ANR	5060266	Statement	[	668:8:19353:19353	5060234	4	True				
ANR	5060267	Statement	]	668:9:19354:19354	5060234	5	True				
ANR	5060268	ExpressionStatement	valid_name	668:11:19356:19366	5060234	6	True				
ANR	5060269	Identifier	valid_name		5060234	0					
ANR	5060270	ExpressionStatement	"ad -> SetMyTypeName ( ""Defrag"" )"	670:1:19370:19397	5060234	7	True				
ANR	5060271	CallExpression	"ad -> SetMyTypeName ( ""Defrag"" )"		5060234	0					
ANR	5060272	Callee	ad -> SetMyTypeName		5060234	0					
ANR	5060273	PtrMemberAccess	ad -> SetMyTypeName		5060234	0					
ANR	5060274	Identifier	ad		5060234	0					
ANR	5060275	Identifier	SetMyTypeName		5060234	1					
ANR	5060276	ArgumentList	"""Defrag"""		5060234	1					
ANR	5060277	Argument	"""Defrag"""		5060234	0					
ANR	5060278	PrimaryExpression	"""Defrag"""		5060234	0					
ANR	5060279	ExpressionStatement	"ad -> SetTargetTypeName ( """" )"	671:1:19400:19425	5060234	8	True				
ANR	5060280	CallExpression	"ad -> SetTargetTypeName ( """" )"		5060234	0					
ANR	5060281	Callee	ad -> SetTargetTypeName		5060234	0					
ANR	5060282	PtrMemberAccess	ad -> SetTargetTypeName		5060234	0					
ANR	5060283	Identifier	ad		5060234	0					
ANR	5060284	Identifier	SetTargetTypeName		5060234	1					
ANR	5060285	ArgumentList	""""""		5060234	1					
ANR	5060286	Argument	""""""		5060234	0					
ANR	5060287	PrimaryExpression	""""""		5060234	0					
ANR	5060288	ExpressionStatement	"ad -> Assign ( ATTR_NAME , m_daemon_name . c_str ( ) )"	673:1:19429:19472	5060234	9	True				
ANR	5060289	CallExpression	"ad -> Assign ( ATTR_NAME , m_daemon_name . c_str ( ) )"		5060234	0					
ANR	5060290	Callee	ad -> Assign		5060234	0					
ANR	5060291	PtrMemberAccess	ad -> Assign		5060234	0					
ANR	5060292	Identifier	ad		5060234	0					
ANR	5060293	Identifier	Assign		5060234	1					
ANR	5060294	ArgumentList	ATTR_NAME		5060234	1					
ANR	5060295	Argument	ATTR_NAME		5060234	0					
ANR	5060296	Identifier	ATTR_NAME		5060234	0					
ANR	5060297	Argument	m_daemon_name . c_str ( )		5060234	1					
ANR	5060298	CallExpression	m_daemon_name . c_str ( )		5060234	0					
ANR	5060299	Callee	m_daemon_name . c_str		5060234	0					
ANR	5060300	MemberAccess	m_daemon_name . c_str		5060234	0					
ANR	5060301	Identifier	m_daemon_name		5060234	0					
ANR	5060302	Identifier	c_str		5060234	1					
ANR	5060303	ArgumentList			5060234	1					
ANR	5060304	ExpressionStatement	m_stats . Tick ( )	675:1:19476:19490	5060234	10	True				
ANR	5060305	CallExpression	m_stats . Tick ( )		5060234	0					
ANR	5060306	Callee	m_stats . Tick		5060234	0					
ANR	5060307	MemberAccess	m_stats . Tick		5060234	0					
ANR	5060308	Identifier	m_stats		5060234	0					
ANR	5060309	Identifier	Tick		5060234	1					
ANR	5060310	ArgumentList			5060234	1					
ANR	5060311	ExpressionStatement	m_stats . Publish ( * ad )	676:1:19493:19513	5060234	11	True				
ANR	5060312	CallExpression	m_stats . Publish ( * ad )		5060234	0					
ANR	5060313	Callee	m_stats . Publish		5060234	0					
ANR	5060314	MemberAccess	m_stats . Publish		5060234	0					
ANR	5060315	Identifier	m_stats		5060234	0					
ANR	5060316	Identifier	Publish		5060234	1					
ANR	5060317	ArgumentList	* ad		5060234	1					
ANR	5060318	Argument	* ad		5060234	0					
ANR	5060319	UnaryOperationExpression	* ad		5060234	0					
ANR	5060320	UnaryOperator	*		5060234	0					
ANR	5060321	Identifier	ad		5060234	1					
ANR	5060322	ExpressionStatement	daemonCore -> publish ( ad )	677:1:19516:19539	5060234	12	True				
ANR	5060323	CallExpression	daemonCore -> publish ( ad )		5060234	0					
ANR	5060324	Callee	daemonCore -> publish		5060234	0					
ANR	5060325	PtrMemberAccess	daemonCore -> publish		5060234	0					
ANR	5060326	Identifier	daemonCore		5060234	0					
ANR	5060327	Identifier	publish		5060234	1					
ANR	5060328	ArgumentList	ad		5060234	1					
ANR	5060329	Argument	ad		5060234	0					
ANR	5060330	Identifier	ad		5060234	0					
ANR	5060331	ReturnType	void		5060234	1					
ANR	5060332	Identifier	Defrag :: publish		5060234	2					
ANR	5060333	ParameterList	ClassAd * ad		5060234	3					
ANR	5060334	Parameter	ClassAd * ad	663:16:19210:19220	5060234	0	True				
ANR	5060335	ParameterType	ClassAd *		5060234	0					
ANR	5060336	Identifier	ad		5060234	1					
ANR	5060337	CFGEntryNode	ENTRY		5060234		True				
ANR	5060338	CFGExitNode	EXIT		5060234		True				
ANR	5060339	Symbol	m_daemon_name		5060234						
ANR	5060340	Symbol	ad		5060234						
ANR	5060341	Symbol	ATTR_NAME		5060234						
ANR	5060342	Symbol	m_daemon_name . c_str		5060234						
ANR	5060343	Symbol	m_stats		5060234						
ANR	5060344	Symbol	valid_name		5060234						
ANR	5060345	Symbol	m_defrag_name . c_str		5060234						
ANR	5060346	Symbol	build_valid_daemon_name		5060234						
ANR	5060347	Symbol	daemonCore		5060234						
ANR	5060348	Symbol	m_defrag_name		5060234						
ANR	5060349	Symbol	* ad		5060234						
ANR	5060350	Function	Defrag :: updateCollector	680:0:19544:19660							
ANR	5060351	FunctionDef	Defrag :: updateCollector ()		5060350	0					
ANR	5060352	CompoundStatement		681:26:19575:19660	5060350	0					
ANR	5060353	ExpressionStatement	publish ( & m_public_ad )	682:1:19578:19599	5060350	0	True				
ANR	5060354	CallExpression	publish ( & m_public_ad )		5060350	0					
ANR	5060355	Callee	publish		5060350	0					
ANR	5060356	Identifier	publish		5060350	0					
ANR	5060357	ArgumentList	& m_public_ad		5060350	1					
ANR	5060358	Argument	& m_public_ad		5060350	0					
ANR	5060359	UnaryOperationExpression	& m_public_ad		5060350	0					
ANR	5060360	UnaryOperator	&		5060350	0					
ANR	5060361	Identifier	m_public_ad		5060350	1					
ANR	5060362	ExpressionStatement	"daemonCore -> sendUpdates ( UPDATE_AD_GENERIC , & m_public_ad )"	683:1:19602:19658	5060350	1	True				
ANR	5060363	CallExpression	"daemonCore -> sendUpdates ( UPDATE_AD_GENERIC , & m_public_ad )"		5060350	0					
ANR	5060364	Callee	daemonCore -> sendUpdates		5060350	0					
ANR	5060365	PtrMemberAccess	daemonCore -> sendUpdates		5060350	0					
ANR	5060366	Identifier	daemonCore		5060350	0					
ANR	5060367	Identifier	sendUpdates		5060350	1					
ANR	5060368	ArgumentList	UPDATE_AD_GENERIC		5060350	1					
ANR	5060369	Argument	UPDATE_AD_GENERIC		5060350	0					
ANR	5060370	Identifier	UPDATE_AD_GENERIC		5060350	0					
ANR	5060371	Argument	& m_public_ad		5060350	1					
ANR	5060372	UnaryOperationExpression	& m_public_ad		5060350	0					
ANR	5060373	UnaryOperator	&		5060350	0					
ANR	5060374	Identifier	m_public_ad		5060350	1					
ANR	5060375	ReturnType	void		5060350	1					
ANR	5060376	Identifier	Defrag :: updateCollector		5060350	2					
ANR	5060377	ParameterList			5060350	3					
ANR	5060378	CFGEntryNode	ENTRY		5060350		True				
ANR	5060379	CFGExitNode	EXIT		5060350		True				
ANR	5060380	Symbol	daemonCore		5060350						
ANR	5060381	Symbol	UPDATE_AD_GENERIC		5060350						
ANR	5060382	Symbol	& m_public_ad		5060350						
ANR	5060383	Function	Defrag :: invalidatePublicAd	686:0:19663:20093							
ANR	5060384	FunctionDef	Defrag :: invalidatePublicAd ()		5060383	0					
ANR	5060385	CompoundStatement		687:29:19697:20093	5060383	0					
ANR	5060386	IdentifierDeclStatement	ClassAd invalidate_ad ;	688:1:19700:19721	5060383	0	True				
ANR	5060387	IdentifierDecl	invalidate_ad		5060383	0					
ANR	5060388	IdentifierDeclType	ClassAd		5060383	0					
ANR	5060389	Identifier	invalidate_ad		5060383	1					
ANR	5060390	IdentifierDeclStatement	std :: string line ;	689:1:19724:19740	5060383	1	True				
ANR	5060391	IdentifierDecl	line		5060383	0					
ANR	5060392	IdentifierDeclType	std :: string		5060383	0					
ANR	5060393	Identifier	line		5060383	1					
ANR	5060394	ExpressionStatement	invalidate_ad . SetMyTypeName ( QUERY_ADTYPE )	691:1:19744:19785	5060383	2	True				
ANR	5060395	CallExpression	invalidate_ad . SetMyTypeName ( QUERY_ADTYPE )		5060383	0					
ANR	5060396	Callee	invalidate_ad . SetMyTypeName		5060383	0					
ANR	5060397	MemberAccess	invalidate_ad . SetMyTypeName		5060383	0					
ANR	5060398	Identifier	invalidate_ad		5060383	0					
ANR	5060399	Identifier	SetMyTypeName		5060383	1					
ANR	5060400	ArgumentList	QUERY_ADTYPE		5060383	1					
ANR	5060401	Argument	QUERY_ADTYPE		5060383	0					
ANR	5060402	Identifier	QUERY_ADTYPE		5060383	0					
ANR	5060403	ExpressionStatement	"invalidate_ad . SetTargetTypeName ( ""Defrag"" )"	692:1:19788:19829	5060383	3	True				
ANR	5060404	CallExpression	"invalidate_ad . SetTargetTypeName ( ""Defrag"" )"		5060383	0					
ANR	5060405	Callee	invalidate_ad . SetTargetTypeName		5060383	0					
ANR	5060406	MemberAccess	invalidate_ad . SetTargetTypeName		5060383	0					
ANR	5060407	Identifier	invalidate_ad		5060383	0					
ANR	5060408	Identifier	SetTargetTypeName		5060383	1					
ANR	5060409	ArgumentList	"""Defrag"""		5060383	1					
ANR	5060410	Argument	"""Defrag"""		5060383	0					
ANR	5060411	PrimaryExpression	"""Defrag"""		5060383	0					
ANR	5060412	ExpressionStatement	"sprintf ( line , ""%s == \\""%s\\"""" , ATTR_NAME , m_daemon_name . c_str ( ) )"	694:1:19833:19895	5060383	4	True				
ANR	5060413	CallExpression	"sprintf ( line , ""%s == \\""%s\\"""" , ATTR_NAME , m_daemon_name . c_str ( ) )"		5060383	0					
ANR	5060414	Callee	sprintf		5060383	0					
ANR	5060415	Identifier	sprintf		5060383	0					
ANR	5060416	ArgumentList	line		5060383	1					
ANR	5060417	Argument	line		5060383	0					
ANR	5060418	Identifier	line		5060383	0					
ANR	5060419	Argument	"""%s == \\""%s\\"""""		5060383	1					
ANR	5060420	PrimaryExpression	"""%s == \\""%s\\"""""		5060383	0					
ANR	5060421	Argument	ATTR_NAME		5060383	2					
ANR	5060422	Identifier	ATTR_NAME		5060383	0					
ANR	5060423	Argument	m_daemon_name . c_str ( )		5060383	3					
ANR	5060424	CallExpression	m_daemon_name . c_str ( )		5060383	0					
ANR	5060425	Callee	m_daemon_name . c_str		5060383	0					
ANR	5060426	MemberAccess	m_daemon_name . c_str		5060383	0					
ANR	5060427	Identifier	m_daemon_name		5060383	0					
ANR	5060428	Identifier	c_str		5060383	1					
ANR	5060429	ArgumentList			5060383	1					
ANR	5060430	ExpressionStatement	"invalidate_ad . AssignExpr ( ATTR_REQUIREMENTS , line . c_str ( ) )"	695:1:19898:19955	5060383	5	True				
ANR	5060431	CallExpression	"invalidate_ad . AssignExpr ( ATTR_REQUIREMENTS , line . c_str ( ) )"		5060383	0					
ANR	5060432	Callee	invalidate_ad . AssignExpr		5060383	0					
ANR	5060433	MemberAccess	invalidate_ad . AssignExpr		5060383	0					
ANR	5060434	Identifier	invalidate_ad		5060383	0					
ANR	5060435	Identifier	AssignExpr		5060383	1					
ANR	5060436	ArgumentList	ATTR_REQUIREMENTS		5060383	1					
ANR	5060437	Argument	ATTR_REQUIREMENTS		5060383	0					
ANR	5060438	Identifier	ATTR_REQUIREMENTS		5060383	0					
ANR	5060439	Argument	line . c_str ( )		5060383	1					
ANR	5060440	CallExpression	line . c_str ( )		5060383	0					
ANR	5060441	Callee	line . c_str		5060383	0					
ANR	5060442	MemberAccess	line . c_str		5060383	0					
ANR	5060443	Identifier	line		5060383	0					
ANR	5060444	Identifier	c_str		5060383	1					
ANR	5060445	ArgumentList			5060383	1					
ANR	5060446	ExpressionStatement	"invalidate_ad . Assign ( ATTR_NAME , m_daemon_name . c_str ( ) )"	696:1:19958:20012	5060383	6	True				
ANR	5060447	CallExpression	"invalidate_ad . Assign ( ATTR_NAME , m_daemon_name . c_str ( ) )"		5060383	0					
ANR	5060448	Callee	invalidate_ad . Assign		5060383	0					
ANR	5060449	MemberAccess	invalidate_ad . Assign		5060383	0					
ANR	5060450	Identifier	invalidate_ad		5060383	0					
ANR	5060451	Identifier	Assign		5060383	1					
ANR	5060452	ArgumentList	ATTR_NAME		5060383	1					
ANR	5060453	Argument	ATTR_NAME		5060383	0					
ANR	5060454	Identifier	ATTR_NAME		5060383	0					
ANR	5060455	Argument	m_daemon_name . c_str ( )		5060383	1					
ANR	5060456	CallExpression	m_daemon_name . c_str ( )		5060383	0					
ANR	5060457	Callee	m_daemon_name . c_str		5060383	0					
ANR	5060458	MemberAccess	m_daemon_name . c_str		5060383	0					
ANR	5060459	Identifier	m_daemon_name		5060383	0					
ANR	5060460	Identifier	c_str		5060383	1					
ANR	5060461	ArgumentList			5060383	1					
ANR	5060462	ExpressionStatement	"daemonCore -> sendUpdates ( INVALIDATE_ADS_GENERIC , & invalidate_ad , NULL , false )"	697:1:20015:20091	5060383	7	True				
ANR	5060463	CallExpression	"daemonCore -> sendUpdates ( INVALIDATE_ADS_GENERIC , & invalidate_ad , NULL , false )"		5060383	0					
ANR	5060464	Callee	daemonCore -> sendUpdates		5060383	0					
ANR	5060465	PtrMemberAccess	daemonCore -> sendUpdates		5060383	0					
ANR	5060466	Identifier	daemonCore		5060383	0					
ANR	5060467	Identifier	sendUpdates		5060383	1					
ANR	5060468	ArgumentList	INVALIDATE_ADS_GENERIC		5060383	1					
ANR	5060469	Argument	INVALIDATE_ADS_GENERIC		5060383	0					
ANR	5060470	Identifier	INVALIDATE_ADS_GENERIC		5060383	0					
ANR	5060471	Argument	& invalidate_ad		5060383	1					
ANR	5060472	UnaryOperationExpression	& invalidate_ad		5060383	0					
ANR	5060473	UnaryOperator	&		5060383	0					
ANR	5060474	Identifier	invalidate_ad		5060383	1					
ANR	5060475	Argument	NULL		5060383	2					
ANR	5060476	Identifier	NULL		5060383	0					
ANR	5060477	Argument	false		5060383	3					
ANR	5060478	Identifier	false		5060383	0					
ANR	5060479	ReturnType	void		5060383	1					
ANR	5060480	Identifier	Defrag :: invalidatePublicAd		5060383	2					
ANR	5060481	ParameterList			5060383	3					
ANR	5060482	CFGEntryNode	ENTRY		5060383		True				
ANR	5060483	CFGExitNode	EXIT		5060383		True				
ANR	5060484	Symbol	m_daemon_name		5060383						
ANR	5060485	Symbol	m_daemon_name . c_str		5060383						
ANR	5060486	Symbol	ATTR_NAME		5060383						
ANR	5060487	Symbol	NULL		5060383						
ANR	5060488	Symbol	line		5060383						
ANR	5060489	Symbol	ATTR_REQUIREMENTS		5060383						
ANR	5060490	Symbol	false		5060383						
ANR	5060491	Symbol	INVALIDATE_ADS_GENERIC		5060383						
ANR	5060492	Symbol	& invalidate_ad		5060383						
ANR	5060493	Symbol	QUERY_ADTYPE		5060383						
ANR	5060494	Symbol	invalidate_ad		5060383						
ANR	5060495	Symbol	daemonCore		5060383						
ANR	5060496	Symbol	line . c_str		5060383						
