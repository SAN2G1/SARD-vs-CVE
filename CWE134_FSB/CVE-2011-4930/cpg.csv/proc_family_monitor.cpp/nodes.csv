command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2019637	File	data/converged/CVE-2011-4930_htcondor/proc_family_monitor.cpp								
ANR	2019638	Function	ProcFamilyMonitor :: ProcFamilyMonitor	40:0:1177:3669							
ANR	2019639	FunctionDef	"ProcFamilyMonitor :: ProcFamilyMonitor (pid_t pid , birthday_t birthday , int snapshot_interval , bool except_if_pid_dies)"		2019638	0					
ANR	2019640	CompoundStatement		48:0:1564:3669	2019638	0					
ANR	2019641	ExpressionStatement	ASSERT ( snapshot_interval >= - 1 )	52:1:1693:1724	2019638	0	True				
ANR	2019642	CallExpression	ASSERT ( snapshot_interval >= - 1 )		2019638	0					
ANR	2019643	Callee	ASSERT		2019638	0					
ANR	2019644	Identifier	ASSERT		2019638	0					
ANR	2019645	ArgumentList	snapshot_interval >= - 1		2019638	1					
ANR	2019646	Argument	snapshot_interval >= - 1		2019638	0					
ANR	2019647	RelationalExpression	snapshot_interval >= - 1		2019638	0		>=			
ANR	2019648	Identifier	snapshot_interval		2019638	0					
ANR	2019649	UnaryOperationExpression	- 1		2019638	1					
ANR	2019650	UnaryOperator	-		2019638	0					
ANR	2019651	PrimaryExpression	1		2019638	1					
ANR	2019652	ExpressionStatement	m_pid_tracker = new PIDTracker ( this )	57:1:1832:1868	2019638	1	True				
ANR	2019653	AssignmentExpression	m_pid_tracker = new PIDTracker ( this )		2019638	0		=			
ANR	2019654	Identifier	m_pid_tracker		2019638	0					
ANR	2019655	Identifier	this		2019638	1					
ANR	2019656	ExpressionStatement	ASSERT ( m_pid_tracker != NULL )	58:1:1871:1900	2019638	2	True				
ANR	2019657	CallExpression	ASSERT ( m_pid_tracker != NULL )		2019638	0					
ANR	2019658	Callee	ASSERT		2019638	0					
ANR	2019659	Identifier	ASSERT		2019638	0					
ANR	2019660	ArgumentList	m_pid_tracker != NULL		2019638	1					
ANR	2019661	Argument	m_pid_tracker != NULL		2019638	0					
ANR	2019662	EqualityExpression	m_pid_tracker != NULL		2019638	0		!=			
ANR	2019663	Identifier	m_pid_tracker		2019638	0					
ANR	2019664	Identifier	NULL		2019638	1					
ANR	2019665	ExpressionStatement	m_group_tracker = NULL	60:1:1922:1944	2019638	3	True				
ANR	2019666	AssignmentExpression	m_group_tracker = NULL		2019638	0		=			
ANR	2019667	Identifier	m_group_tracker		2019638	0					
ANR	2019668	Identifier	NULL		2019638	1					
ANR	2019669	ExpressionStatement	m_cgroup_tracker = NULL	63:1:1986:2009	2019638	4	True				
ANR	2019670	AssignmentExpression	m_cgroup_tracker = NULL		2019638	0		=			
ANR	2019671	Identifier	m_cgroup_tracker		2019638	0					
ANR	2019672	Identifier	NULL		2019638	1					
ANR	2019673	ExpressionStatement	m_login_tracker = new LoginTracker ( this )	65:1:2019:2059	2019638	5	True				
ANR	2019674	AssignmentExpression	m_login_tracker = new LoginTracker ( this )		2019638	0		=			
ANR	2019675	Identifier	m_login_tracker		2019638	0					
ANR	2019676	Identifier	this		2019638	1					
ANR	2019677	ExpressionStatement	ASSERT ( m_login_tracker != NULL )	66:1:2062:2093	2019638	6	True				
ANR	2019678	CallExpression	ASSERT ( m_login_tracker != NULL )		2019638	0					
ANR	2019679	Callee	ASSERT		2019638	0					
ANR	2019680	Identifier	ASSERT		2019638	0					
ANR	2019681	ArgumentList	m_login_tracker != NULL		2019638	1					
ANR	2019682	Argument	m_login_tracker != NULL		2019638	0					
ANR	2019683	EqualityExpression	m_login_tracker != NULL		2019638	0		!=			
ANR	2019684	Identifier	m_login_tracker		2019638	0					
ANR	2019685	Identifier	NULL		2019638	1					
ANR	2019686	ExpressionStatement	m_environment_tracker = new EnvironmentTracker ( this )	67:1:2096:2148	2019638	7	True				
ANR	2019687	AssignmentExpression	m_environment_tracker = new EnvironmentTracker ( this )		2019638	0		=			
ANR	2019688	Identifier	m_environment_tracker		2019638	0					
ANR	2019689	Identifier	this		2019638	1					
ANR	2019690	ExpressionStatement	ASSERT ( m_environment_tracker != NULL )	68:1:2151:2188	2019638	8	True				
ANR	2019691	CallExpression	ASSERT ( m_environment_tracker != NULL )		2019638	0					
ANR	2019692	Callee	ASSERT		2019638	0					
ANR	2019693	Identifier	ASSERT		2019638	0					
ANR	2019694	ArgumentList	m_environment_tracker != NULL		2019638	1					
ANR	2019695	Argument	m_environment_tracker != NULL		2019638	0					
ANR	2019696	EqualityExpression	m_environment_tracker != NULL		2019638	0		!=			
ANR	2019697	Identifier	m_environment_tracker		2019638	0					
ANR	2019698	Identifier	NULL		2019638	1					
ANR	2019699	ExpressionStatement	m_parent_tracker = new ParentTracker ( this )	69:1:2191:2233	2019638	9	True				
ANR	2019700	AssignmentExpression	m_parent_tracker = new ParentTracker ( this )		2019638	0		=			
ANR	2019701	Identifier	m_parent_tracker		2019638	0					
ANR	2019702	Identifier	this		2019638	1					
ANR	2019703	ExpressionStatement	ASSERT ( m_parent_tracker != NULL )	70:1:2236:2268	2019638	10	True				
ANR	2019704	CallExpression	ASSERT ( m_parent_tracker != NULL )		2019638	0					
ANR	2019705	Callee	ASSERT		2019638	0					
ANR	2019706	Identifier	ASSERT		2019638	0					
ANR	2019707	ArgumentList	m_parent_tracker != NULL		2019638	1					
ANR	2019708	Argument	m_parent_tracker != NULL		2019638	0					
ANR	2019709	EqualityExpression	m_parent_tracker != NULL		2019638	0		!=			
ANR	2019710	Identifier	m_parent_tracker		2019638	0					
ANR	2019711	Identifier	NULL		2019638	1					
ANR	2019712	ExpressionStatement	m_everybody_else = new ProcFamily ( this )	80:1:2618:2657	2019638	11	True				
ANR	2019713	AssignmentExpression	m_everybody_else = new ProcFamily ( this )		2019638	0		=			
ANR	2019714	Identifier	m_everybody_else		2019638	0					
ANR	2019715	Identifier	this		2019638	1					
ANR	2019716	ExpressionStatement	ASSERT ( m_everybody_else != NULL )	81:1:2660:2692	2019638	12	True				
ANR	2019717	CallExpression	ASSERT ( m_everybody_else != NULL )		2019638	0					
ANR	2019718	Callee	ASSERT		2019638	0					
ANR	2019719	Identifier	ASSERT		2019638	0					
ANR	2019720	ArgumentList	m_everybody_else != NULL		2019638	1					
ANR	2019721	Argument	m_everybody_else != NULL		2019638	0					
ANR	2019722	EqualityExpression	m_everybody_else != NULL		2019638	0		!=			
ANR	2019723	Identifier	m_everybody_else		2019638	0					
ANR	2019724	Identifier	NULL		2019638	1					
ANR	2019725	IdentifierDeclStatement	"ProcFamily * family = new ProcFamily ( this , pid , birthday , except_if_pid_dies ? pid : 0 , snapshot_interval ) ;"	88:1:2973:3226	2019638	13	True				
ANR	2019726	IdentifierDecl	"* family = new ProcFamily ( this , pid , birthday , except_if_pid_dies ? pid : 0 , snapshot_interval )"		2019638	0					
ANR	2019727	IdentifierDeclType	ProcFamily *		2019638	0					
ANR	2019728	Identifier	family		2019638	1					
ANR	2019729	AssignmentExpression	"* family = new ProcFamily ( this , pid , birthday , except_if_pid_dies ? pid : 0 , snapshot_interval )"		2019638	2		=			
ANR	2019730	Identifier	family		2019638	0					
ANR	2019731	Expression	"this , pid , birthday , except_if_pid_dies ? pid : 0 , snapshot_interval"		2019638	1					
ANR	2019732	Identifier	this		2019638	0					
ANR	2019733	Expression	"pid , birthday , except_if_pid_dies ? pid : 0 , snapshot_interval"		2019638	1					
ANR	2019734	Identifier	pid		2019638	0					
ANR	2019735	Expression	"birthday , except_if_pid_dies ? pid : 0 , snapshot_interval"		2019638	1					
ANR	2019736	Identifier	birthday		2019638	0					
ANR	2019737	Expression	"except_if_pid_dies ? pid : 0 , snapshot_interval"		2019638	1					
ANR	2019738	ConditionalExpression	except_if_pid_dies ? pid : 0		2019638	0					
ANR	2019739	Condition	except_if_pid_dies		2019638	0					
ANR	2019740	Identifier	except_if_pid_dies		2019638	0					
ANR	2019741	Identifier	pid		2019638	1					
ANR	2019742	PrimaryExpression	0		2019638	2					
ANR	2019743	Identifier	snapshot_interval		2019638	1					
ANR	2019744	ExpressionStatement	ASSERT ( family != NULL )	93:1:3229:3251	2019638	14	True				
ANR	2019745	CallExpression	ASSERT ( family != NULL )		2019638	0					
ANR	2019746	Callee	ASSERT		2019638	0					
ANR	2019747	Identifier	ASSERT		2019638	0					
ANR	2019748	ArgumentList	family != NULL		2019638	1					
ANR	2019749	Argument	family != NULL		2019638	0					
ANR	2019750	EqualityExpression	family != NULL		2019638	0		!=			
ANR	2019751	Identifier	family		2019638	0					
ANR	2019752	Identifier	NULL		2019638	1					
ANR	2019753	ExpressionStatement	"m_pid_tracker -> add_mapping ( family , pid , birthday )"	97:1:3325:3374	2019638	15	True				
ANR	2019754	CallExpression	"m_pid_tracker -> add_mapping ( family , pid , birthday )"		2019638	0					
ANR	2019755	Callee	m_pid_tracker -> add_mapping		2019638	0					
ANR	2019756	PtrMemberAccess	m_pid_tracker -> add_mapping		2019638	0					
ANR	2019757	Identifier	m_pid_tracker		2019638	0					
ANR	2019758	Identifier	add_mapping		2019638	1					
ANR	2019759	ArgumentList	family		2019638	1					
ANR	2019760	Argument	family		2019638	0					
ANR	2019761	Identifier	family		2019638	0					
ANR	2019762	Argument	pid		2019638	1					
ANR	2019763	Identifier	pid		2019638	0					
ANR	2019764	Argument	birthday		2019638	2					
ANR	2019765	Identifier	birthday		2019638	0					
ANR	2019766	ExpressionStatement	m_tree = new Tree < ProcFamily * > ( family )	101:1:3428:3466	2019638	16	True				
ANR	2019767	AssignmentExpression	m_tree = new Tree < ProcFamily * > ( family )		2019638	0		=			
ANR	2019768	Identifier	m_tree		2019638	0					
ANR	2019769	Identifier	family		2019638	1					
ANR	2019770	ExpressionStatement	ASSERT ( m_tree != NULL )	102:1:3469:3491	2019638	17	True				
ANR	2019771	CallExpression	ASSERT ( m_tree != NULL )		2019638	0					
ANR	2019772	Callee	ASSERT		2019638	0					
ANR	2019773	Identifier	ASSERT		2019638	0					
ANR	2019774	ArgumentList	m_tree != NULL		2019638	1					
ANR	2019775	Argument	m_tree != NULL		2019638	0					
ANR	2019776	EqualityExpression	m_tree != NULL		2019638	0		!=			
ANR	2019777	Identifier	m_tree		2019638	0					
ANR	2019778	Identifier	NULL		2019638	1					
ANR	2019779	IdentifierDeclStatement	"int ret = m_family_table . insert ( pid , m_tree ) ;"	106:1:3556:3600	2019638	18	True				
ANR	2019780	IdentifierDecl	"ret = m_family_table . insert ( pid , m_tree )"		2019638	0					
ANR	2019781	IdentifierDeclType	int		2019638	0					
ANR	2019782	Identifier	ret		2019638	1					
ANR	2019783	AssignmentExpression	"ret = m_family_table . insert ( pid , m_tree )"		2019638	2		=			
ANR	2019784	Identifier	ret		2019638	0					
ANR	2019785	CallExpression	"m_family_table . insert ( pid , m_tree )"		2019638	1					
ANR	2019786	Callee	m_family_table . insert		2019638	0					
ANR	2019787	MemberAccess	m_family_table . insert		2019638	0					
ANR	2019788	Identifier	m_family_table		2019638	0					
ANR	2019789	Identifier	insert		2019638	1					
ANR	2019790	ArgumentList	pid		2019638	1					
ANR	2019791	Argument	pid		2019638	0					
ANR	2019792	Identifier	pid		2019638	0					
ANR	2019793	Argument	m_tree		2019638	1					
ANR	2019794	Identifier	m_tree		2019638	0					
ANR	2019795	ExpressionStatement	ASSERT ( ret != - 1 )	107:1:3603:3620	2019638	19	True				
ANR	2019796	CallExpression	ASSERT ( ret != - 1 )		2019638	0					
ANR	2019797	Callee	ASSERT		2019638	0					
ANR	2019798	Identifier	ASSERT		2019638	0					
ANR	2019799	ArgumentList	ret != - 1		2019638	1					
ANR	2019800	Argument	ret != - 1		2019638	0					
ANR	2019801	EqualityExpression	ret != - 1		2019638	0		!=			
ANR	2019802	Identifier	ret		2019638	0					
ANR	2019803	UnaryOperationExpression	- 1		2019638	1					
ANR	2019804	UnaryOperator	-		2019638	0					
ANR	2019805	PrimaryExpression	1		2019638	1					
ANR	2019806	ExpressionStatement	snapshot ( )	111:1:3657:3667	2019638	20	True				
ANR	2019807	CallExpression	snapshot ( )		2019638	0					
ANR	2019808	Callee	snapshot		2019638	0					
ANR	2019809	Identifier	snapshot		2019638	0					
ANR	2019810	ArgumentList			2019638	1					
ANR	2019811	Identifier	ProcFamilyMonitor :: ProcFamilyMonitor		2019638	1					
ANR	2019812	ParameterList	"pid_t pid , birthday_t birthday , int snapshot_interval , bool except_if_pid_dies"		2019638	2					
ANR	2019813	Parameter	pid_t pid	40:37:1214:1222	2019638	0	True				
ANR	2019814	ParameterType	pid_t		2019638	0					
ANR	2019815	Identifier	pid		2019638	1					
ANR	2019816	Parameter	birthday_t birthday	41:37:1262:1280	2019638	1	True				
ANR	2019817	ParameterType	birthday_t		2019638	0					
ANR	2019818	Identifier	birthday		2019638	1					
ANR	2019819	Parameter	int snapshot_interval	42:37:1320:1340	2019638	2	True				
ANR	2019820	ParameterType	int		2019638	0					
ANR	2019821	Identifier	snapshot_interval		2019638	1					
ANR	2019822	Parameter	bool except_if_pid_dies	43:10:1353:1375	2019638	3	True				
ANR	2019823	ParameterType	bool		2019638	0					
ANR	2019824	Identifier	except_if_pid_dies		2019638	1					
ANR	2019825	CFGEntryNode	ENTRY		2019638		True				
ANR	2019826	CFGExitNode	EXIT		2019638		True				
ANR	2019827	Symbol	birthday		2019638						
ANR	2019828	Symbol	ret		2019638						
ANR	2019829	Symbol	m_tree		2019638						
ANR	2019830	Symbol	NULL		2019638						
ANR	2019831	Symbol	snapshot_interval		2019638						
ANR	2019832	Symbol	m_family_table . insert		2019638						
ANR	2019833	Symbol	this		2019638						
ANR	2019834	Symbol	pid		2019638						
ANR	2019835	Symbol	m_group_tracker		2019638						
ANR	2019836	Symbol	except_if_pid_dies		2019638						
ANR	2019837	Symbol	m_login_tracker		2019638						
ANR	2019838	Symbol	m_everybody_else		2019638						
ANR	2019839	Symbol	m_family_table		2019638						
ANR	2019840	Symbol	m_parent_tracker		2019638						
ANR	2019841	Symbol	m_environment_tracker		2019638						
ANR	2019842	Symbol	m_cgroup_tracker		2019638						
ANR	2019843	Symbol	family		2019638						
ANR	2019844	Symbol	m_pid_tracker		2019638						
ANR	2019845	Function	ProcFamilyMonitor :: ~ProcFamilyMonitor	114:0:3672:4080							
ANR	2019846	FunctionDef	ProcFamilyMonitor :: ~ProcFamilyMonitor ()		2019845	0					
ANR	2019847	CompoundStatement		115:0:3712:4080	2019845	0					
ANR	2019848	ExpressionStatement	delete_all_families ( m_tree )	116:1:3715:3742	2019845	0	True				
ANR	2019849	CallExpression	delete_all_families ( m_tree )		2019845	0					
ANR	2019850	Callee	delete_all_families		2019845	0					
ANR	2019851	Identifier	delete_all_families		2019845	0					
ANR	2019852	ArgumentList	m_tree		2019845	1					
ANR	2019853	Argument	m_tree		2019845	0					
ANR	2019854	Identifier	m_tree		2019845	0					
ANR	2019855	Statement	delete	117:1:3745:3750	2019845	1	True				
ANR	2019856	ExpressionStatement	m_tree	117:8:3752:3758	2019845	2	True				
ANR	2019857	Identifier	m_tree		2019845	0					
ANR	2019858	Statement	delete	118:1:3761:3766	2019845	3	True				
ANR	2019859	ExpressionStatement	m_everybody_else	118:8:3768:3784	2019845	4	True				
ANR	2019860	Identifier	m_everybody_else		2019845	0					
ANR	2019861	Statement	delete	119:1:3787:3792	2019845	5	True				
ANR	2019862	ExpressionStatement	m_parent_tracker	119:8:3794:3810	2019845	6	True				
ANR	2019863	Identifier	m_parent_tracker		2019845	0					
ANR	2019864	Statement	delete	120:1:3813:3818	2019845	7	True				
ANR	2019865	ExpressionStatement	m_environment_tracker	120:8:3820:3841	2019845	8	True				
ANR	2019866	Identifier	m_environment_tracker		2019845	0					
ANR	2019867	Statement	delete	121:1:3844:3849	2019845	9	True				
ANR	2019868	ExpressionStatement	m_login_tracker	121:8:3851:3866	2019845	10	True				
ANR	2019869	Identifier	m_login_tracker		2019845	0					
ANR	2019870	IfStatement	if ( m_group_tracker != NULL )		2019845	11					
ANR	2019871	Condition	m_group_tracker != NULL	123:5:3892:3914	2019845	0	True				
ANR	2019872	EqualityExpression	m_group_tracker != NULL		2019845	0		!=			
ANR	2019873	Identifier	m_group_tracker		2019845	0					
ANR	2019874	Identifier	NULL		2019845	1					
ANR	2019875	CompoundStatement		9:30:204:204	2019845	1					
ANR	2019876	Statement	delete	124:2:3921:3926	2019845	0	True				
ANR	2019877	ExpressionStatement	m_group_tracker	124:9:3928:3943	2019845	1	True				
ANR	2019878	Identifier	m_group_tracker		2019845	0					
ANR	2019879	IfStatement	if ( m_cgroup_tracker != NULL )		2019845	12					
ANR	2019880	Condition	m_cgroup_tracker != NULL	128:5:3992:4015	2019845	0	True				
ANR	2019881	EqualityExpression	m_cgroup_tracker != NULL		2019845	0		!=			
ANR	2019882	Identifier	m_cgroup_tracker		2019845	0					
ANR	2019883	Identifier	NULL		2019845	1					
ANR	2019884	CompoundStatement		14:31:305:305	2019845	1					
ANR	2019885	Statement	delete	129:2:4022:4027	2019845	0	True				
ANR	2019886	ExpressionStatement	m_cgroup_tracker	129:9:4029:4045	2019845	1	True				
ANR	2019887	Identifier	m_cgroup_tracker		2019845	0					
ANR	2019888	Statement	delete	132:1:4058:4063	2019845	13	True				
ANR	2019889	ExpressionStatement	m_pid_tracker	132:8:4065:4078	2019845	14	True				
ANR	2019890	Identifier	m_pid_tracker		2019845	0					
ANR	2019891	Identifier	ProcFamilyMonitor :: ~ProcFamilyMonitor		2019845	1					
ANR	2019892	ParameterList			2019845	2					
ANR	2019893	CFGEntryNode	ENTRY		2019845		True				
ANR	2019894	CFGExitNode	EXIT		2019845		True				
ANR	2019895	Symbol	m_tree		2019845						
ANR	2019896	Symbol	NULL		2019845						
ANR	2019897	Symbol	m_cgroup_tracker		2019845						
ANR	2019898	Symbol	m_group_tracker		2019845						
ANR	2019899	Function	ProcFamilyMonitor :: enable_group_tracking	136:0:4102:4510							
ANR	2019900	FunctionDef	"ProcFamilyMonitor :: enable_group_tracking (gid_t min_tracking_gid , gid_t max_tracking_gid , bool allocating)"		2019899	0					
ANR	2019901	CompoundStatement		140:0:4265:4510	2019899	0					
ANR	2019902	ExpressionStatement	ASSERT ( m_group_tracker == NULL )	141:1:4268:4299	2019899	0	True				
ANR	2019903	CallExpression	ASSERT ( m_group_tracker == NULL )		2019899	0					
ANR	2019904	Callee	ASSERT		2019899	0					
ANR	2019905	Identifier	ASSERT		2019899	0					
ANR	2019906	ArgumentList	m_group_tracker == NULL		2019899	1					
ANR	2019907	Argument	m_group_tracker == NULL		2019899	0					
ANR	2019908	EqualityExpression	m_group_tracker == NULL		2019899	0		==			
ANR	2019909	Identifier	m_group_tracker		2019899	0					
ANR	2019910	Identifier	NULL		2019899	1					
ANR	2019911	ExpressionStatement	"m_group_tracker = new GroupTracker ( this , min_tracking_gid , max_tracking_gid , allocating )"	142:1:4302:4474	2019899	1	True				
ANR	2019912	AssignmentExpression	"m_group_tracker = new GroupTracker ( this , min_tracking_gid , max_tracking_gid , allocating )"		2019899	0		=			
ANR	2019913	Identifier	m_group_tracker		2019899	0					
ANR	2019914	Expression	"this , min_tracking_gid , max_tracking_gid , allocating"		2019899	1					
ANR	2019915	Identifier	this		2019899	0					
ANR	2019916	Expression	"min_tracking_gid , max_tracking_gid , allocating"		2019899	1					
ANR	2019917	Identifier	min_tracking_gid		2019899	0					
ANR	2019918	Expression	"max_tracking_gid , allocating"		2019899	1					
ANR	2019919	Identifier	max_tracking_gid		2019899	0					
ANR	2019920	Identifier	allocating		2019899	1					
ANR	2019921	ExpressionStatement	ASSERT ( m_group_tracker != NULL )	146:1:4477:4508	2019899	2	True				
ANR	2019922	CallExpression	ASSERT ( m_group_tracker != NULL )		2019899	0					
ANR	2019923	Callee	ASSERT		2019899	0					
ANR	2019924	Identifier	ASSERT		2019899	0					
ANR	2019925	ArgumentList	m_group_tracker != NULL		2019899	1					
ANR	2019926	Argument	m_group_tracker != NULL		2019899	0					
ANR	2019927	EqualityExpression	m_group_tracker != NULL		2019899	0		!=			
ANR	2019928	Identifier	m_group_tracker		2019899	0					
ANR	2019929	Identifier	NULL		2019899	1					
ANR	2019930	ReturnType	void		2019899	1					
ANR	2019931	Identifier	ProcFamilyMonitor :: enable_group_tracking		2019899	2					
ANR	2019932	ParameterList	"gid_t min_tracking_gid , gid_t max_tracking_gid , bool allocating"		2019899	3					
ANR	2019933	Parameter	gid_t min_tracking_gid	137:41:4148:4169	2019899	0	True				
ANR	2019934	ParameterType	gid_t		2019899	0					
ANR	2019935	Identifier	min_tracking_gid		2019899	1					
ANR	2019936	Parameter	gid_t max_tracking_gid	138:41:4213:4234	2019899	1	True				
ANR	2019937	ParameterType	gid_t		2019899	0					
ANR	2019938	Identifier	max_tracking_gid		2019899	1					
ANR	2019939	Parameter	bool allocating	139:11:4248:4262	2019899	2	True				
ANR	2019940	ParameterType	bool		2019899	0					
ANR	2019941	Identifier	allocating		2019899	1					
ANR	2019942	CFGEntryNode	ENTRY		2019899		True				
ANR	2019943	CFGExitNode	EXIT		2019899		True				
ANR	2019944	Symbol	NULL		2019899						
ANR	2019945	Symbol	min_tracking_gid		2019899						
ANR	2019946	Symbol	allocating		2019899						
ANR	2019947	Symbol	this		2019899						
ANR	2019948	Symbol	max_tracking_gid		2019899						
ANR	2019949	Symbol	m_group_tracker		2019899						
ANR	2019950	Function	ProcFamilyMonitor :: enable_cgroup_tracking	151:0:4552:4718							
ANR	2019951	FunctionDef	ProcFamilyMonitor :: enable_cgroup_tracking ()		2019950	0					
ANR	2019952	CompoundStatement		153:0:4601:4718	2019950	0					
ANR	2019953	ExpressionStatement	ASSERT ( m_cgroup_tracker == NULL )	154:1:4604:4636	2019950	0	True				
ANR	2019954	CallExpression	ASSERT ( m_cgroup_tracker == NULL )		2019950	0					
ANR	2019955	Callee	ASSERT		2019950	0					
ANR	2019956	Identifier	ASSERT		2019950	0					
ANR	2019957	ArgumentList	m_cgroup_tracker == NULL		2019950	1					
ANR	2019958	Argument	m_cgroup_tracker == NULL		2019950	0					
ANR	2019959	EqualityExpression	m_cgroup_tracker == NULL		2019950	0		==			
ANR	2019960	Identifier	m_cgroup_tracker		2019950	0					
ANR	2019961	Identifier	NULL		2019950	1					
ANR	2019962	ExpressionStatement	m_cgroup_tracker = new CGroupTracker ( this )	155:1:4639:4681	2019950	1	True				
ANR	2019963	AssignmentExpression	m_cgroup_tracker = new CGroupTracker ( this )		2019950	0		=			
ANR	2019964	Identifier	m_cgroup_tracker		2019950	0					
ANR	2019965	Identifier	this		2019950	1					
ANR	2019966	ExpressionStatement	ASSERT ( m_cgroup_tracker != NULL )	156:1:4684:4716	2019950	2	True				
ANR	2019967	CallExpression	ASSERT ( m_cgroup_tracker != NULL )		2019950	0					
ANR	2019968	Callee	ASSERT		2019950	0					
ANR	2019969	Identifier	ASSERT		2019950	0					
ANR	2019970	ArgumentList	m_cgroup_tracker != NULL		2019950	1					
ANR	2019971	Argument	m_cgroup_tracker != NULL		2019950	0					
ANR	2019972	EqualityExpression	m_cgroup_tracker != NULL		2019950	0		!=			
ANR	2019973	Identifier	m_cgroup_tracker		2019950	0					
ANR	2019974	Identifier	NULL		2019950	1					
ANR	2019975	ReturnType	void		2019950	1					
ANR	2019976	Identifier	ProcFamilyMonitor :: enable_cgroup_tracking		2019950	2					
ANR	2019977	ParameterList			2019950	3					
ANR	2019978	CFGEntryNode	ENTRY		2019950		True				
ANR	2019979	CFGExitNode	EXIT		2019950		True				
ANR	2019980	Symbol	NULL		2019950						
ANR	2019981	Symbol	this		2019950						
ANR	2019982	Symbol	m_cgroup_tracker		2019950						
ANR	2019983	Function	ProcFamilyMonitor :: register_subfamily	160:0:4728:8059							
ANR	2019984	FunctionDef	"ProcFamilyMonitor :: register_subfamily (pid_t root_pid , pid_t watcher_pid , int max_snapshot_interval)"		2019983	0					
ANR	2019985	CompoundStatement		164:0:4924:8059	2019983	0					
ANR	2019986	IdentifierDeclStatement	int ret ;	165:1:4927:4934	2019983	0	True				
ANR	2019987	IdentifierDecl	ret		2019983	0					
ANR	2019988	IdentifierDeclType	int		2019983	0					
ANR	2019989	Identifier	ret		2019983	1					
ANR	2019990	IfStatement	if ( root_pid <= 0 )		2019983	1					
ANR	2019991	Condition	root_pid <= 0	169:5:4976:4988	2019983	0	True				
ANR	2019992	RelationalExpression	root_pid <= 0		2019983	0		<=			
ANR	2019993	Identifier	root_pid		2019983	0					
ANR	2019994	PrimaryExpression	0		2019983	1					
ANR	2019995	CompoundStatement		6:20:66:66	2019983	1					
ANR	2019996	ExpressionStatement	"dprintf ( D_ALWAYS , ""register_subfamily failure: bad root pid: %u\\n"" , root_pid )"	170:2:4995:5092	2019983	0	True				
ANR	2019997	CallExpression	"dprintf ( D_ALWAYS , ""register_subfamily failure: bad root pid: %u\\n"" , root_pid )"		2019983	0					
ANR	2019998	Callee	dprintf		2019983	0					
ANR	2019999	Identifier	dprintf		2019983	0					
ANR	2020000	ArgumentList	D_ALWAYS		2019983	1					
ANR	2020001	Argument	D_ALWAYS		2019983	0					
ANR	2020002	Identifier	D_ALWAYS		2019983	0					
ANR	2020003	Argument	"""register_subfamily failure: bad root pid: %u\\n"""		2019983	1					
ANR	2020004	PrimaryExpression	"""register_subfamily failure: bad root pid: %u\\n"""		2019983	0					
ANR	2020005	Argument	root_pid		2019983	2					
ANR	2020006	Identifier	root_pid		2019983	0					
ANR	2020007	ReturnStatement	return PROC_FAMILY_ERROR_BAD_ROOT_PID ;	173:2:5096:5133	2019983	1	True				
ANR	2020008	Identifier	PROC_FAMILY_ERROR_BAD_ROOT_PID		2019983	0					
ANR	2020009	IfStatement	if ( watcher_pid < 0 )		2019983	2					
ANR	2020010	Condition	watcher_pid < 0	180:5:5317:5331	2019983	0	True				
ANR	2020011	RelationalExpression	watcher_pid < 0		2019983	0		<			
ANR	2020012	Identifier	watcher_pid		2019983	0					
ANR	2020013	PrimaryExpression	0		2019983	1					
ANR	2020014	CompoundStatement		17:22:409:409	2019983	1					
ANR	2020015	ExpressionStatement	"dprintf ( D_ALWAYS , ""register_subfamily failure; bad watcher pid: %u\\n"" , watcher_pid )"	181:2:5338:5441	2019983	0	True				
ANR	2020016	CallExpression	"dprintf ( D_ALWAYS , ""register_subfamily failure; bad watcher pid: %u\\n"" , watcher_pid )"		2019983	0					
ANR	2020017	Callee	dprintf		2019983	0					
ANR	2020018	Identifier	dprintf		2019983	0					
ANR	2020019	ArgumentList	D_ALWAYS		2019983	1					
ANR	2020020	Argument	D_ALWAYS		2019983	0					
ANR	2020021	Identifier	D_ALWAYS		2019983	0					
ANR	2020022	Argument	"""register_subfamily failure; bad watcher pid: %u\\n"""		2019983	1					
ANR	2020023	PrimaryExpression	"""register_subfamily failure; bad watcher pid: %u\\n"""		2019983	0					
ANR	2020024	Argument	watcher_pid		2019983	2					
ANR	2020025	Identifier	watcher_pid		2019983	0					
ANR	2020026	ReturnStatement	return PROC_FAMILY_ERROR_BAD_WATCHER_PID ;	184:2:5445:5485	2019983	1	True				
ANR	2020027	Identifier	PROC_FAMILY_ERROR_BAD_WATCHER_PID		2019983	0					
ANR	2020028	IfStatement	if ( max_snapshot_interval < - 1 )		2019983	3					
ANR	2020029	Condition	max_snapshot_interval < - 1	190:5:5578:5603	2019983	0	True				
ANR	2020030	RelationalExpression	max_snapshot_interval < - 1		2019983	0		<			
ANR	2020031	Identifier	max_snapshot_interval		2019983	0					
ANR	2020032	UnaryOperationExpression	- 1		2019983	1					
ANR	2020033	UnaryOperator	-		2019983	0					
ANR	2020034	PrimaryExpression	1		2019983	1					
ANR	2020035	CompoundStatement		27:33:681:681	2019983	1					
ANR	2020036	ExpressionStatement	"dprintf ( D_ALWAYS , ""register_subfamily failure: bad max snapshot interval: %d\\n"" , max_snapshot_interval )"	191:2:5610:5733	2019983	0	True				
ANR	2020037	CallExpression	"dprintf ( D_ALWAYS , ""register_subfamily failure: bad max snapshot interval: %d\\n"" , max_snapshot_interval )"		2019983	0					
ANR	2020038	Callee	dprintf		2019983	0					
ANR	2020039	Identifier	dprintf		2019983	0					
ANR	2020040	ArgumentList	D_ALWAYS		2019983	1					
ANR	2020041	Argument	D_ALWAYS		2019983	0					
ANR	2020042	Identifier	D_ALWAYS		2019983	0					
ANR	2020043	Argument	"""register_subfamily failure: bad max snapshot interval: %d\\n"""		2019983	1					
ANR	2020044	PrimaryExpression	"""register_subfamily failure: bad max snapshot interval: %d\\n"""		2019983	0					
ANR	2020045	Argument	max_snapshot_interval		2019983	2					
ANR	2020046	Identifier	max_snapshot_interval		2019983	0					
ANR	2020047	ReturnStatement	return PROC_FAMILY_ERROR_BAD_SNAPSHOT_INTERVAL ;	194:2:5737:5783	2019983	1	True				
ANR	2020048	Identifier	PROC_FAMILY_ERROR_BAD_SNAPSHOT_INTERVAL		2019983	0					
ANR	2020049	ExpressionStatement	snapshot ( )	199:1:5850:5860	2019983	4	True				
ANR	2020050	CallExpression	snapshot ( )		2019983	0					
ANR	2020051	Callee	snapshot		2019983	0					
ANR	2020052	Identifier	snapshot		2019983	0					
ANR	2020053	ArgumentList			2019983	1					
ANR	2020054	IdentifierDeclStatement	ProcFamilyMember * member ;	205:1:6050:6074	2019983	5	True				
ANR	2020055	IdentifierDecl	* member		2019983	0					
ANR	2020056	IdentifierDeclType	ProcFamilyMember *		2019983	0					
ANR	2020057	Identifier	member		2019983	1					
ANR	2020058	ExpressionStatement	"ret = m_member_table . lookup ( root_pid , member )"	206:1:6077:6122	2019983	6	True				
ANR	2020059	AssignmentExpression	"ret = m_member_table . lookup ( root_pid , member )"		2019983	0		=			
ANR	2020060	Identifier	ret		2019983	0					
ANR	2020061	CallExpression	"m_member_table . lookup ( root_pid , member )"		2019983	1					
ANR	2020062	Callee	m_member_table . lookup		2019983	0					
ANR	2020063	MemberAccess	m_member_table . lookup		2019983	0					
ANR	2020064	Identifier	m_member_table		2019983	0					
ANR	2020065	Identifier	lookup		2019983	1					
ANR	2020066	ArgumentList	root_pid		2019983	1					
ANR	2020067	Argument	root_pid		2019983	0					
ANR	2020068	Identifier	root_pid		2019983	0					
ANR	2020069	Argument	member		2019983	1					
ANR	2020070	Identifier	member		2019983	0					
ANR	2020071	IfStatement	if ( ( ret == - 1 ) || ( member -> get_proc_family ( ) == m_everybody_else ) )		2019983	7					
ANR	2020072	Condition	( ret == - 1 ) || ( member -> get_proc_family ( ) == m_everybody_else )	207:5:6129:6190	2019983	0	True				
ANR	2020073	OrExpression	( ret == - 1 ) || ( member -> get_proc_family ( ) == m_everybody_else )		2019983	0		||			
ANR	2020074	EqualityExpression	ret == - 1		2019983	0		==			
ANR	2020075	Identifier	ret		2019983	0					
ANR	2020076	UnaryOperationExpression	- 1		2019983	1					
ANR	2020077	UnaryOperator	-		2019983	0					
ANR	2020078	PrimaryExpression	1		2019983	1					
ANR	2020079	EqualityExpression	member -> get_proc_family ( ) == m_everybody_else		2019983	1		==			
ANR	2020080	CallExpression	member -> get_proc_family ( )		2019983	0					
ANR	2020081	Callee	member -> get_proc_family		2019983	0					
ANR	2020082	PtrMemberAccess	member -> get_proc_family		2019983	0					
ANR	2020083	Identifier	member		2019983	0					
ANR	2020084	Identifier	get_proc_family		2019983	1					
ANR	2020085	ArgumentList			2019983	1					
ANR	2020086	Identifier	m_everybody_else		2019983	1					
ANR	2020087	CompoundStatement		44:69:1268:1268	2019983	1					
ANR	2020088	ExpressionStatement	"dprintf ( D_ALWAYS , ""register_subfamily failure: pid %u not in process tree\\n"" , root_pid )"	208:2:6197:6304	2019983	0	True				
ANR	2020089	CallExpression	"dprintf ( D_ALWAYS , ""register_subfamily failure: pid %u not in process tree\\n"" , root_pid )"		2019983	0					
ANR	2020090	Callee	dprintf		2019983	0					
ANR	2020091	Identifier	dprintf		2019983	0					
ANR	2020092	ArgumentList	D_ALWAYS		2019983	1					
ANR	2020093	Argument	D_ALWAYS		2019983	0					
ANR	2020094	Identifier	D_ALWAYS		2019983	0					
ANR	2020095	Argument	"""register_subfamily failure: pid %u not in process tree\\n"""		2019983	1					
ANR	2020096	PrimaryExpression	"""register_subfamily failure: pid %u not in process tree\\n"""		2019983	0					
ANR	2020097	Argument	root_pid		2019983	2					
ANR	2020098	Identifier	root_pid		2019983	0					
ANR	2020099	ReturnStatement	return PROC_FAMILY_ERROR_PROCESS_NOT_FAMILY ;	211:2:6308:6351	2019983	1	True				
ANR	2020100	Identifier	PROC_FAMILY_ERROR_PROCESS_NOT_FAMILY		2019983	0					
ANR	2020101	IdentifierDeclStatement	Tree < ProcFamily * > * tree = lookup_family ( root_pid ) ;	216:1:6424:6473	2019983	8	True				
ANR	2020102	IdentifierDecl	* tree = lookup_family ( root_pid )		2019983	0					
ANR	2020103	IdentifierDeclType	Tree < ProcFamily * > *		2019983	0					
ANR	2020104	Identifier	tree		2019983	1					
ANR	2020105	AssignmentExpression	* tree = lookup_family ( root_pid )		2019983	2		=			
ANR	2020106	Identifier	tree		2019983	0					
ANR	2020107	CallExpression	lookup_family ( root_pid )		2019983	1					
ANR	2020108	Callee	lookup_family		2019983	0					
ANR	2020109	Identifier	lookup_family		2019983	0					
ANR	2020110	ArgumentList	root_pid		2019983	1					
ANR	2020111	Argument	root_pid		2019983	0					
ANR	2020112	Identifier	root_pid		2019983	0					
ANR	2020113	IfStatement	if ( tree != NULL )		2019983	9					
ANR	2020114	Condition	tree != NULL	217:5:6480:6491	2019983	0	True				
ANR	2020115	EqualityExpression	tree != NULL		2019983	0		!=			
ANR	2020116	Identifier	tree		2019983	0					
ANR	2020117	Identifier	NULL		2019983	1					
ANR	2020118	CompoundStatement		54:19:1569:1569	2019983	1					
ANR	2020119	ExpressionStatement	"dprintf ( D_ALWAYS , ""register_subfamily: pid %u already registered\\n"" , root_pid )"	218:2:6498:6596	2019983	0	True				
ANR	2020120	CallExpression	"dprintf ( D_ALWAYS , ""register_subfamily: pid %u already registered\\n"" , root_pid )"		2019983	0					
ANR	2020121	Callee	dprintf		2019983	0					
ANR	2020122	Identifier	dprintf		2019983	0					
ANR	2020123	ArgumentList	D_ALWAYS		2019983	1					
ANR	2020124	Argument	D_ALWAYS		2019983	0					
ANR	2020125	Identifier	D_ALWAYS		2019983	0					
ANR	2020126	Argument	"""register_subfamily: pid %u already registered\\n"""		2019983	1					
ANR	2020127	PrimaryExpression	"""register_subfamily: pid %u already registered\\n"""		2019983	0					
ANR	2020128	Argument	root_pid		2019983	2					
ANR	2020129	Identifier	root_pid		2019983	0					
ANR	2020130	ReturnStatement	return PROC_FAMILY_ERROR_ALREADY_REGISTERED ;	221:2:6600:6643	2019983	1	True				
ANR	2020131	Identifier	PROC_FAMILY_ERROR_ALREADY_REGISTERED		2019983	0					
ANR	2020132	IdentifierDeclStatement	"ProcFamily * family = new ProcFamily ( this , root_pid , member -> get_proc_info ( ) -> birthday , watcher_pid , max_snapshot_interval ) ;"	226:1:6688:6958	2019983	10	True				
ANR	2020133	IdentifierDecl	"* family = new ProcFamily ( this , root_pid , member -> get_proc_info ( ) -> birthday , watcher_pid , max_snapshot_interval )"		2019983	0					
ANR	2020134	IdentifierDeclType	ProcFamily *		2019983	0					
ANR	2020135	Identifier	family		2019983	1					
ANR	2020136	AssignmentExpression	"* family = new ProcFamily ( this , root_pid , member -> get_proc_info ( ) -> birthday , watcher_pid , max_snapshot_interval )"		2019983	2		=			
ANR	2020137	Identifier	family		2019983	0					
ANR	2020138	Expression	"this , root_pid , member -> get_proc_info ( ) -> birthday , watcher_pid , max_snapshot_interval"		2019983	1					
ANR	2020139	Identifier	this		2019983	0					
ANR	2020140	Expression	"root_pid , member -> get_proc_info ( ) -> birthday , watcher_pid , max_snapshot_interval"		2019983	1					
ANR	2020141	Identifier	root_pid		2019983	0					
ANR	2020142	Expression	"member -> get_proc_info ( ) -> birthday , watcher_pid , max_snapshot_interval"		2019983	1					
ANR	2020143	PtrMemberAccess	member -> get_proc_info ( ) -> birthday		2019983	0					
ANR	2020144	CallExpression	member -> get_proc_info ( )		2019983	0					
ANR	2020145	Callee	member -> get_proc_info		2019983	0					
ANR	2020146	PtrMemberAccess	member -> get_proc_info		2019983	0					
ANR	2020147	Identifier	member		2019983	0					
ANR	2020148	Identifier	get_proc_info		2019983	1					
ANR	2020149	ArgumentList			2019983	1					
ANR	2020150	Identifier	birthday		2019983	1					
ANR	2020151	Expression	"watcher_pid , max_snapshot_interval"		2019983	1					
ANR	2020152	Identifier	watcher_pid		2019983	0					
ANR	2020153	Identifier	max_snapshot_interval		2019983	1					
ANR	2020154	ExpressionStatement	"m_pid_tracker -> add_mapping ( family , root_pid , member -> get_proc_info ( ) -> birthday )"	234:1:7025:7160	2019983	11	True				
ANR	2020155	CallExpression	"m_pid_tracker -> add_mapping ( family , root_pid , member -> get_proc_info ( ) -> birthday )"		2019983	0					
ANR	2020156	Callee	m_pid_tracker -> add_mapping		2019983	0					
ANR	2020157	PtrMemberAccess	m_pid_tracker -> add_mapping		2019983	0					
ANR	2020158	Identifier	m_pid_tracker		2019983	0					
ANR	2020159	Identifier	add_mapping		2019983	1					
ANR	2020160	ArgumentList	family		2019983	1					
ANR	2020161	Argument	family		2019983	0					
ANR	2020162	Identifier	family		2019983	0					
ANR	2020163	Argument	root_pid		2019983	1					
ANR	2020164	Identifier	root_pid		2019983	0					
ANR	2020165	Argument	member -> get_proc_info ( ) -> birthday		2019983	2					
ANR	2020166	PtrMemberAccess	member -> get_proc_info ( ) -> birthday		2019983	0					
ANR	2020167	CallExpression	member -> get_proc_info ( )		2019983	0					
ANR	2020168	Callee	member -> get_proc_info		2019983	0					
ANR	2020169	PtrMemberAccess	member -> get_proc_info		2019983	0					
ANR	2020170	Identifier	member		2019983	0					
ANR	2020171	Identifier	get_proc_info		2019983	1					
ANR	2020172	ArgumentList			2019983	1					
ANR	2020173	Identifier	birthday		2019983	1					
ANR	2020174	IdentifierDeclStatement	pid_t parent_root = member -> get_proc_family ( ) -> get_root_pid ( ) ;	241:1:7266:7327	2019983	12	True				
ANR	2020175	IdentifierDecl	parent_root = member -> get_proc_family ( ) -> get_root_pid ( )		2019983	0					
ANR	2020176	IdentifierDeclType	pid_t		2019983	0					
ANR	2020177	Identifier	parent_root		2019983	1					
ANR	2020178	AssignmentExpression	parent_root = member -> get_proc_family ( ) -> get_root_pid ( )		2019983	2		=			
ANR	2020179	Identifier	parent_root		2019983	0					
ANR	2020180	CallExpression	member -> get_proc_family ( ) -> get_root_pid ( )		2019983	1					
ANR	2020181	Callee	member -> get_proc_family ( ) -> get_root_pid		2019983	0					
ANR	2020182	PtrMemberAccess	member -> get_proc_family ( ) -> get_root_pid		2019983	0					
ANR	2020183	CallExpression	member -> get_proc_family ( )		2019983	0					
ANR	2020184	Callee	member -> get_proc_family		2019983	0					
ANR	2020185	PtrMemberAccess	member -> get_proc_family		2019983	0					
ANR	2020186	Identifier	member		2019983	0					
ANR	2020187	Identifier	get_proc_family		2019983	1					
ANR	2020188	ArgumentList			2019983	1					
ANR	2020189	Identifier	get_root_pid		2019983	1					
ANR	2020190	ArgumentList			2019983	1					
ANR	2020191	IdentifierDeclStatement	Tree < ProcFamily * > * parent_tree_node = lookup_family ( parent_root ) ;	242:1:7330:7394	2019983	13	True				
ANR	2020192	IdentifierDecl	* parent_tree_node = lookup_family ( parent_root )		2019983	0					
ANR	2020193	IdentifierDeclType	Tree < ProcFamily * > *		2019983	0					
ANR	2020194	Identifier	parent_tree_node		2019983	1					
ANR	2020195	AssignmentExpression	* parent_tree_node = lookup_family ( parent_root )		2019983	2		=			
ANR	2020196	Identifier	parent_tree_node		2019983	0					
ANR	2020197	CallExpression	lookup_family ( parent_root )		2019983	1					
ANR	2020198	Callee	lookup_family		2019983	0					
ANR	2020199	Identifier	lookup_family		2019983	0					
ANR	2020200	ArgumentList	parent_root		2019983	1					
ANR	2020201	Argument	parent_root		2019983	0					
ANR	2020202	Identifier	parent_root		2019983	0					
ANR	2020203	ExpressionStatement	ASSERT ( parent_tree_node != NULL )	243:1:7397:7429	2019983	14	True				
ANR	2020204	CallExpression	ASSERT ( parent_tree_node != NULL )		2019983	0					
ANR	2020205	Callee	ASSERT		2019983	0					
ANR	2020206	Identifier	ASSERT		2019983	0					
ANR	2020207	ArgumentList	parent_tree_node != NULL		2019983	1					
ANR	2020208	Argument	parent_tree_node != NULL		2019983	0					
ANR	2020209	EqualityExpression	parent_tree_node != NULL		2019983	0		!=			
ANR	2020210	Identifier	parent_tree_node		2019983	0					
ANR	2020211	Identifier	NULL		2019983	1					
ANR	2020212	IdentifierDeclStatement	Tree < ProcFamily * > * child_tree_node = parent_tree_node -> add_child ( family ) ;	244:1:7432:7506	2019983	15	True				
ANR	2020213	IdentifierDecl	* child_tree_node = parent_tree_node -> add_child ( family )		2019983	0					
ANR	2020214	IdentifierDeclType	Tree < ProcFamily * > *		2019983	0					
ANR	2020215	Identifier	child_tree_node		2019983	1					
ANR	2020216	AssignmentExpression	* child_tree_node = parent_tree_node -> add_child ( family )		2019983	2		=			
ANR	2020217	Identifier	child_tree_node		2019983	0					
ANR	2020218	CallExpression	parent_tree_node -> add_child ( family )		2019983	1					
ANR	2020219	Callee	parent_tree_node -> add_child		2019983	0					
ANR	2020220	PtrMemberAccess	parent_tree_node -> add_child		2019983	0					
ANR	2020221	Identifier	parent_tree_node		2019983	0					
ANR	2020222	Identifier	add_child		2019983	1					
ANR	2020223	ArgumentList	family		2019983	1					
ANR	2020224	Argument	family		2019983	0					
ANR	2020225	Identifier	family		2019983	0					
ANR	2020226	ExpressionStatement	ASSERT ( child_tree_node != NULL )	246:1:7509:7540	2019983	16	True				
ANR	2020227	CallExpression	ASSERT ( child_tree_node != NULL )		2019983	0					
ANR	2020228	Callee	ASSERT		2019983	0					
ANR	2020229	Identifier	ASSERT		2019983	0					
ANR	2020230	ArgumentList	child_tree_node != NULL		2019983	1					
ANR	2020231	Argument	child_tree_node != NULL		2019983	0					
ANR	2020232	EqualityExpression	child_tree_node != NULL		2019983	0		!=			
ANR	2020233	Identifier	child_tree_node		2019983	0					
ANR	2020234	Identifier	NULL		2019983	1					
ANR	2020235	ExpressionStatement	"dprintf ( D_ALWAYS , ""moving process %u into new subfamily %u\\n"" , root_pid , root_pid )"	250:1:7611:7720	2019983	17	True				
ANR	2020236	CallExpression	"dprintf ( D_ALWAYS , ""moving process %u into new subfamily %u\\n"" , root_pid , root_pid )"		2019983	0					
ANR	2020237	Callee	dprintf		2019983	0					
ANR	2020238	Identifier	dprintf		2019983	0					
ANR	2020239	ArgumentList	D_ALWAYS		2019983	1					
ANR	2020240	Argument	D_ALWAYS		2019983	0					
ANR	2020241	Identifier	D_ALWAYS		2019983	0					
ANR	2020242	Argument	"""moving process %u into new subfamily %u\\n"""		2019983	1					
ANR	2020243	PrimaryExpression	"""moving process %u into new subfamily %u\\n"""		2019983	0					
ANR	2020244	Argument	root_pid		2019983	2					
ANR	2020245	Identifier	root_pid		2019983	0					
ANR	2020246	Argument	root_pid		2019983	3					
ANR	2020247	Identifier	root_pid		2019983	0					
ANR	2020248	ExpressionStatement	member -> move_to_subfamily ( family )	254:1:7723:7756	2019983	18	True				
ANR	2020249	CallExpression	member -> move_to_subfamily ( family )		2019983	0					
ANR	2020250	Callee	member -> move_to_subfamily		2019983	0					
ANR	2020251	PtrMemberAccess	member -> move_to_subfamily		2019983	0					
ANR	2020252	Identifier	member		2019983	0					
ANR	2020253	Identifier	move_to_subfamily		2019983	1					
ANR	2020254	ArgumentList	family		2019983	1					
ANR	2020255	Argument	family		2019983	0					
ANR	2020256	Identifier	family		2019983	0					
ANR	2020257	ExpressionStatement	"ret = m_family_table . insert ( root_pid , child_tree_node )"	258:1:7821:7875	2019983	19	True				
ANR	2020258	AssignmentExpression	"ret = m_family_table . insert ( root_pid , child_tree_node )"		2019983	0		=			
ANR	2020259	Identifier	ret		2019983	0					
ANR	2020260	CallExpression	"m_family_table . insert ( root_pid , child_tree_node )"		2019983	1					
ANR	2020261	Callee	m_family_table . insert		2019983	0					
ANR	2020262	MemberAccess	m_family_table . insert		2019983	0					
ANR	2020263	Identifier	m_family_table		2019983	0					
ANR	2020264	Identifier	insert		2019983	1					
ANR	2020265	ArgumentList	root_pid		2019983	1					
ANR	2020266	Argument	root_pid		2019983	0					
ANR	2020267	Identifier	root_pid		2019983	0					
ANR	2020268	Argument	child_tree_node		2019983	1					
ANR	2020269	Identifier	child_tree_node		2019983	0					
ANR	2020270	ExpressionStatement	ASSERT ( ret != - 1 )	259:1:7878:7895	2019983	20	True				
ANR	2020271	CallExpression	ASSERT ( ret != - 1 )		2019983	0					
ANR	2020272	Callee	ASSERT		2019983	0					
ANR	2020273	Identifier	ASSERT		2019983	0					
ANR	2020274	ArgumentList	ret != - 1		2019983	1					
ANR	2020275	Argument	ret != - 1		2019983	0					
ANR	2020276	EqualityExpression	ret != - 1		2019983	0		!=			
ANR	2020277	Identifier	ret		2019983	0					
ANR	2020278	UnaryOperationExpression	- 1		2019983	1					
ANR	2020279	UnaryOperator	-		2019983	0					
ANR	2020280	PrimaryExpression	1		2019983	1					
ANR	2020281	ExpressionStatement	"dprintf ( D_ALWAYS , ""new subfamily registered: root = %u, watcher = %u\\n"" , root_pid , watcher_pid )"	261:1:7899:8021	2019983	21	True				
ANR	2020282	CallExpression	"dprintf ( D_ALWAYS , ""new subfamily registered: root = %u, watcher = %u\\n"" , root_pid , watcher_pid )"		2019983	0					
ANR	2020283	Callee	dprintf		2019983	0					
ANR	2020284	Identifier	dprintf		2019983	0					
ANR	2020285	ArgumentList	D_ALWAYS		2019983	1					
ANR	2020286	Argument	D_ALWAYS		2019983	0					
ANR	2020287	Identifier	D_ALWAYS		2019983	0					
ANR	2020288	Argument	"""new subfamily registered: root = %u, watcher = %u\\n"""		2019983	1					
ANR	2020289	PrimaryExpression	"""new subfamily registered: root = %u, watcher = %u\\n"""		2019983	0					
ANR	2020290	Argument	root_pid		2019983	2					
ANR	2020291	Identifier	root_pid		2019983	0					
ANR	2020292	Argument	watcher_pid		2019983	3					
ANR	2020293	Identifier	watcher_pid		2019983	0					
ANR	2020294	ReturnStatement	return PROC_FAMILY_ERROR_SUCCESS ;	266:1:8025:8057	2019983	22	True				
ANR	2020295	Identifier	PROC_FAMILY_ERROR_SUCCESS		2019983	0					
ANR	2020296	ReturnType	proc_family_error_t		2019983	1					
ANR	2020297	Identifier	ProcFamilyMonitor :: register_subfamily		2019983	2					
ANR	2020298	ParameterList	"pid_t root_pid , pid_t watcher_pid , int max_snapshot_interval"		2019983	3					
ANR	2020299	Parameter	pid_t root_pid	161:38:4786:4799	2019983	0	True				
ANR	2020300	ParameterType	pid_t		2019983	0					
ANR	2020301	Identifier	root_pid		2019983	1					
ANR	2020302	Parameter	pid_t watcher_pid	162:38:4840:4856	2019983	1	True				
ANR	2020303	ParameterType	pid_t		2019983	0					
ANR	2020304	Identifier	watcher_pid		2019983	1					
ANR	2020305	Parameter	int max_snapshot_interval	163:38:4897:4921	2019983	2	True				
ANR	2020306	ParameterType	int		2019983	0					
ANR	2020307	Identifier	max_snapshot_interval		2019983	1					
ANR	2020308	CFGEntryNode	ENTRY		2019983		True				
ANR	2020309	CFGExitNode	EXIT		2019983		True				
ANR	2020310	Symbol	PROC_FAMILY_ERROR_BAD_WATCHER_PID		2019983						
ANR	2020311	Symbol	watcher_pid		2019983						
ANR	2020312	Symbol	PROC_FAMILY_ERROR_ALREADY_REGISTERED		2019983						
ANR	2020313	Symbol	member -> get_proc_family		2019983						
ANR	2020314	Symbol	member -> get_proc_info		2019983						
ANR	2020315	Symbol	* * member		2019983						
ANR	2020316	Symbol	PROC_FAMILY_ERROR_BAD_SNAPSHOT_INTERVAL		2019983						
ANR	2020317	Symbol	parent_root		2019983						
ANR	2020318	Symbol	* parent_tree_node		2019983						
ANR	2020319	Symbol	m_member_table		2019983						
ANR	2020320	Symbol	m_family_table		2019983						
ANR	2020321	Symbol	member		2019983						
ANR	2020322	Symbol	ret		2019983						
ANR	2020323	Symbol	NULL		2019983						
ANR	2020324	Symbol	m_family_table . insert		2019983						
ANR	2020325	Symbol	D_ALWAYS		2019983						
ANR	2020326	Symbol	tree		2019983						
ANR	2020327	Symbol	this		2019983						
ANR	2020328	Symbol	parent_tree_node		2019983						
ANR	2020329	Symbol	member -> get_proc_family ( ) -> get_root_pid		2019983						
ANR	2020330	Symbol	PROC_FAMILY_ERROR_BAD_ROOT_PID		2019983						
ANR	2020331	Symbol	* member		2019983						
ANR	2020332	Symbol	* member -> get_proc_family		2019983						
ANR	2020333	Symbol	max_snapshot_interval		2019983						
ANR	2020334	Symbol	lookup_family		2019983						
ANR	2020335	Symbol	m_member_table . lookup		2019983						
ANR	2020336	Symbol	m_everybody_else		2019983						
ANR	2020337	Symbol	parent_tree_node -> add_child		2019983						
ANR	2020338	Symbol	* member -> get_proc_info		2019983						
ANR	2020339	Symbol	PROC_FAMILY_ERROR_SUCCESS		2019983						
ANR	2020340	Symbol	family		2019983						
ANR	2020341	Symbol	root_pid		2019983						
ANR	2020342	Symbol	m_pid_tracker		2019983						
ANR	2020343	Symbol	PROC_FAMILY_ERROR_PROCESS_NOT_FAMILY		2019983						
ANR	2020344	Symbol	member -> get_proc_info ( ) -> birthday		2019983						
ANR	2020345	Symbol	child_tree_node		2019983						
ANR	2020346	Function	ProcFamilyMonitor :: lookup_family	269:0:8062:8328							
ANR	2020347	FunctionDef	"ProcFamilyMonitor :: lookup_family (pid_t pid , bool zero_means_root)"		2020346	0					
ANR	2020348	CompoundStatement		271:0:8147:8328	2020346	0					
ANR	2020349	IfStatement	if ( zero_means_root && ( pid == 0 ) )		2020346	0					
ANR	2020350	Condition	zero_means_root && ( pid == 0 )	272:5:8154:8182	2020346	0	True				
ANR	2020351	AndExpression	zero_means_root && ( pid == 0 )		2020346	0		&&			
ANR	2020352	Identifier	zero_means_root		2020346	0					
ANR	2020353	EqualityExpression	pid == 0		2020346	1		==			
ANR	2020354	Identifier	pid		2020346	0					
ANR	2020355	PrimaryExpression	0		2020346	1					
ANR	2020356	CompoundStatement		2:36:37:37	2020346	1					
ANR	2020357	ReturnStatement	return m_tree ;	273:2:8189:8202	2020346	0	True				
ANR	2020358	Identifier	m_tree		2020346	0					
ANR	2020359	IdentifierDeclStatement	Tree < ProcFamily * > * tree ;	275:1:8208:8231	2020346	1	True				
ANR	2020360	IdentifierDecl	* tree		2020346	0					
ANR	2020361	IdentifierDeclType	Tree < ProcFamily * > *		2020346	0					
ANR	2020362	Identifier	tree		2020346	1					
ANR	2020363	IdentifierDeclStatement	"int ret = m_family_table . lookup ( pid , tree ) ;"	276:1:8234:8276	2020346	2	True				
ANR	2020364	IdentifierDecl	"ret = m_family_table . lookup ( pid , tree )"		2020346	0					
ANR	2020365	IdentifierDeclType	int		2020346	0					
ANR	2020366	Identifier	ret		2020346	1					
ANR	2020367	AssignmentExpression	"ret = m_family_table . lookup ( pid , tree )"		2020346	2		=			
ANR	2020368	Identifier	ret		2020346	0					
ANR	2020369	CallExpression	"m_family_table . lookup ( pid , tree )"		2020346	1					
ANR	2020370	Callee	m_family_table . lookup		2020346	0					
ANR	2020371	MemberAccess	m_family_table . lookup		2020346	0					
ANR	2020372	Identifier	m_family_table		2020346	0					
ANR	2020373	Identifier	lookup		2020346	1					
ANR	2020374	ArgumentList	pid		2020346	1					
ANR	2020375	Argument	pid		2020346	0					
ANR	2020376	Identifier	pid		2020346	0					
ANR	2020377	Argument	tree		2020346	1					
ANR	2020378	Identifier	tree		2020346	0					
ANR	2020379	IfStatement	if ( ret == - 1 )		2020346	3					
ANR	2020380	Condition	ret == - 1	277:5:8283:8291	2020346	0	True				
ANR	2020381	EqualityExpression	ret == - 1		2020346	0		==			
ANR	2020382	Identifier	ret		2020346	0					
ANR	2020383	UnaryOperationExpression	- 1		2020346	1					
ANR	2020384	UnaryOperator	-		2020346	0					
ANR	2020385	PrimaryExpression	1		2020346	1					
ANR	2020386	CompoundStatement		7:16:146:146	2020346	1					
ANR	2020387	ReturnStatement	return NULL ;	278:2:8298:8309	2020346	0	True				
ANR	2020388	Identifier	NULL		2020346	0					
ANR	2020389	ReturnStatement	return tree ;	280:1:8315:8326	2020346	4	True				
ANR	2020390	Identifier	tree		2020346	0					
ANR	2020391	ReturnType	Tree < ProcFamily * > *		2020346	1					
ANR	2020392	Identifier	ProcFamilyMonitor :: lookup_family		2020346	2					
ANR	2020393	ParameterList	"pid_t pid , bool zero_means_root"		2020346	3					
ANR	2020394	Parameter	pid_t pid	270:33:8114:8122	2020346	0	True				
ANR	2020395	ParameterType	pid_t		2020346	0					
ANR	2020396	Identifier	pid		2020346	1					
ANR	2020397	Parameter	bool zero_means_root	270:44:8125:8144	2020346	1	True				
ANR	2020398	ParameterType	bool		2020346	0					
ANR	2020399	Identifier	zero_means_root		2020346	1					
ANR	2020400	CFGEntryNode	ENTRY		2020346		True				
ANR	2020401	CFGExitNode	EXIT		2020346		True				
ANR	2020402	Symbol	ret		2020346						
ANR	2020403	Symbol	m_tree		2020346						
ANR	2020404	Symbol	NULL		2020346						
ANR	2020405	Symbol	m_family_table		2020346						
ANR	2020406	Symbol	tree		2020346						
ANR	2020407	Symbol	m_family_table . lookup		2020346						
ANR	2020408	Symbol	pid		2020346						
ANR	2020409	Symbol	zero_means_root		2020346						
ANR	2020410	Function	ProcFamilyMonitor :: track_family_via_environment	283:0:8331:8851							
ANR	2020411	FunctionDef	"ProcFamilyMonitor :: track_family_via_environment (pid_t pid , PidEnvID * penvid)"		2020410	0					
ANR	2020412	CompoundStatement		285:0:8428:8851	2020410	0					
ANR	2020413	IdentifierDeclStatement	"Tree < ProcFamily * > * tree = lookup_family ( pid , true ) ;"	288:1:8457:8507	2020410	0	True				
ANR	2020414	IdentifierDecl	"* tree = lookup_family ( pid , true )"		2020410	0					
ANR	2020415	IdentifierDeclType	Tree < ProcFamily * > *		2020410	0					
ANR	2020416	Identifier	tree		2020410	1					
ANR	2020417	AssignmentExpression	"* tree = lookup_family ( pid , true )"		2020410	2		=			
ANR	2020418	Identifier	tree		2020410	0					
ANR	2020419	CallExpression	"lookup_family ( pid , true )"		2020410	1					
ANR	2020420	Callee	lookup_family		2020410	0					
ANR	2020421	Identifier	lookup_family		2020410	0					
ANR	2020422	ArgumentList	pid		2020410	1					
ANR	2020423	Argument	pid		2020410	0					
ANR	2020424	Identifier	pid		2020410	0					
ANR	2020425	Argument	true		2020410	1					
ANR	2020426	Identifier	true		2020410	0					
ANR	2020427	IfStatement	if ( tree == NULL )		2020410	1					
ANR	2020428	Condition	tree == NULL	289:5:8514:8525	2020410	0	True				
ANR	2020429	EqualityExpression	tree == NULL		2020410	0		==			
ANR	2020430	Identifier	tree		2020410	0					
ANR	2020431	Identifier	NULL		2020410	1					
ANR	2020432	CompoundStatement		5:19:99:99	2020410	1					
ANR	2020433	Statement	dprintf	290:2:8532:8538	2020410	0	True				
ANR	2020434	Statement	(	290:9:8539:8539	2020410	1	True				
ANR	2020435	Statement	D_ALWAYS	290:10:8540:8547	2020410	2	True				
ANR	2020436	Statement	","	290:18:8548:8548	2020410	3	True				
ANR	2020437	Statement	"""track_family_via_environment failure: """	291:10:8560:8599	2020410	4	True				
ANR	2020438	Statement	"""family with root %u not found\\n"""	292:8:8609:8641	2020410	5	True				
ANR	2020439	Statement	","	292:41:8642:8642	2020410	6	True				
ANR	2020440	Statement	pid	293:10:8654:8656	2020410	7	True				
ANR	2020441	Statement	)	293:13:8657:8657	2020410	8	True				
ANR	2020442	ExpressionStatement		293:14:8658:8658	2020410	9	True				
ANR	2020443	ReturnStatement	return PROC_FAMILY_ERROR_FAMILY_NOT_FOUND ;	294:2:8662:8703	2020410	10	True				
ANR	2020444	Identifier	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2020410	0					
ANR	2020445	ExpressionStatement	"m_environment_tracker -> add_mapping ( tree -> get_data ( ) , penvid )"	299:1:8754:8814	2020410	2	True				
ANR	2020446	CallExpression	"m_environment_tracker -> add_mapping ( tree -> get_data ( ) , penvid )"		2020410	0					
ANR	2020447	Callee	m_environment_tracker -> add_mapping		2020410	0					
ANR	2020448	PtrMemberAccess	m_environment_tracker -> add_mapping		2020410	0					
ANR	2020449	Identifier	m_environment_tracker		2020410	0					
ANR	2020450	Identifier	add_mapping		2020410	1					
ANR	2020451	ArgumentList	tree -> get_data ( )		2020410	1					
ANR	2020452	Argument	tree -> get_data ( )		2020410	0					
ANR	2020453	CallExpression	tree -> get_data ( )		2020410	0					
ANR	2020454	Callee	tree -> get_data		2020410	0					
ANR	2020455	PtrMemberAccess	tree -> get_data		2020410	0					
ANR	2020456	Identifier	tree		2020410	0					
ANR	2020457	Identifier	get_data		2020410	1					
ANR	2020458	ArgumentList			2020410	1					
ANR	2020459	Argument	penvid		2020410	1					
ANR	2020460	Identifier	penvid		2020410	0					
ANR	2020461	ReturnStatement	return PROC_FAMILY_ERROR_SUCCESS ;	300:1:8817:8849	2020410	3	True				
ANR	2020462	Identifier	PROC_FAMILY_ERROR_SUCCESS		2020410	0					
ANR	2020463	ReturnType	proc_family_error_t		2020410	1					
ANR	2020464	Identifier	ProcFamilyMonitor :: track_family_via_environment		2020410	2					
ANR	2020465	ParameterList	"pid_t pid , PidEnvID * penvid"		2020410	3					
ANR	2020466	Parameter	pid_t pid	284:48:8399:8407	2020410	0	True				
ANR	2020467	ParameterType	pid_t		2020410	0					
ANR	2020468	Identifier	pid		2020410	1					
ANR	2020469	Parameter	PidEnvID * penvid	284:59:8410:8425	2020410	1	True				
ANR	2020470	ParameterType	PidEnvID *		2020410	0					
ANR	2020471	Identifier	penvid		2020410	1					
ANR	2020472	CFGEntryNode	ENTRY		2020410		True				
ANR	2020473	CFGExitNode	EXIT		2020410		True				
ANR	2020474	Symbol	* tree		2020410						
ANR	2020475	Symbol	lookup_family		2020410						
ANR	2020476	Symbol	NULL		2020410						
ANR	2020477	Symbol	tree		2020410						
ANR	2020478	Symbol	true		2020410						
ANR	2020479	Symbol	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2020410						
ANR	2020480	Symbol	penvid		2020410						
ANR	2020481	Symbol	tree -> get_data		2020410						
ANR	2020482	Symbol	m_environment_tracker		2020410						
ANR	2020483	Symbol	pid		2020410						
ANR	2020484	Symbol	PROC_FAMILY_ERROR_SUCCESS		2020410						
ANR	2020485	Function	ProcFamilyMonitor :: track_family_via_login	303:0:8854:9350							
ANR	2020486	FunctionDef	"ProcFamilyMonitor :: track_family_via_login (pid_t pid , char * login)"		2020485	0					
ANR	2020487	CompoundStatement		305:0:8940:9350	2020485	0					
ANR	2020488	IdentifierDeclStatement	"Tree < ProcFamily * > * tree = lookup_family ( pid , true ) ;"	308:1:8969:9019	2020485	0	True				
ANR	2020489	IdentifierDecl	"* tree = lookup_family ( pid , true )"		2020485	0					
ANR	2020490	IdentifierDeclType	Tree < ProcFamily * > *		2020485	0					
ANR	2020491	Identifier	tree		2020485	1					
ANR	2020492	AssignmentExpression	"* tree = lookup_family ( pid , true )"		2020485	2		=			
ANR	2020493	Identifier	tree		2020485	0					
ANR	2020494	CallExpression	"lookup_family ( pid , true )"		2020485	1					
ANR	2020495	Callee	lookup_family		2020485	0					
ANR	2020496	Identifier	lookup_family		2020485	0					
ANR	2020497	ArgumentList	pid		2020485	1					
ANR	2020498	Argument	pid		2020485	0					
ANR	2020499	Identifier	pid		2020485	0					
ANR	2020500	Argument	true		2020485	1					
ANR	2020501	Identifier	true		2020485	0					
ANR	2020502	IfStatement	if ( tree == NULL )		2020485	1					
ANR	2020503	Condition	tree == NULL	309:5:9026:9037	2020485	0	True				
ANR	2020504	EqualityExpression	tree == NULL		2020485	0		==			
ANR	2020505	Identifier	tree		2020485	0					
ANR	2020506	Identifier	NULL		2020485	1					
ANR	2020507	CompoundStatement		5:19:99:99	2020485	1					
ANR	2020508	Statement	dprintf	310:2:9044:9050	2020485	0	True				
ANR	2020509	Statement	(	310:9:9051:9051	2020485	1	True				
ANR	2020510	Statement	D_ALWAYS	310:10:9052:9059	2020485	2	True				
ANR	2020511	Statement	","	310:18:9060:9060	2020485	3	True				
ANR	2020512	Statement	"""track_family_via_login failure: """	311:10:9072:9105	2020485	4	True				
ANR	2020513	Statement	"""family with root %u not found\\n"""	312:8:9115:9147	2020485	5	True				
ANR	2020514	Statement	","	312:41:9148:9148	2020485	6	True				
ANR	2020515	Statement	pid	313:10:9160:9162	2020485	7	True				
ANR	2020516	Statement	)	313:13:9163:9163	2020485	8	True				
ANR	2020517	ExpressionStatement		313:14:9164:9164	2020485	9	True				
ANR	2020518	ReturnStatement	return PROC_FAMILY_ERROR_FAMILY_NOT_FOUND ;	314:2:9168:9209	2020485	10	True				
ANR	2020519	Identifier	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2020485	0					
ANR	2020520	ExpressionStatement	"m_login_tracker -> add_mapping ( tree -> get_data ( ) , login )"	319:1:9260:9313	2020485	2	True				
ANR	2020521	CallExpression	"m_login_tracker -> add_mapping ( tree -> get_data ( ) , login )"		2020485	0					
ANR	2020522	Callee	m_login_tracker -> add_mapping		2020485	0					
ANR	2020523	PtrMemberAccess	m_login_tracker -> add_mapping		2020485	0					
ANR	2020524	Identifier	m_login_tracker		2020485	0					
ANR	2020525	Identifier	add_mapping		2020485	1					
ANR	2020526	ArgumentList	tree -> get_data ( )		2020485	1					
ANR	2020527	Argument	tree -> get_data ( )		2020485	0					
ANR	2020528	CallExpression	tree -> get_data ( )		2020485	0					
ANR	2020529	Callee	tree -> get_data		2020485	0					
ANR	2020530	PtrMemberAccess	tree -> get_data		2020485	0					
ANR	2020531	Identifier	tree		2020485	0					
ANR	2020532	Identifier	get_data		2020485	1					
ANR	2020533	ArgumentList			2020485	1					
ANR	2020534	Argument	login		2020485	1					
ANR	2020535	Identifier	login		2020485	0					
ANR	2020536	ReturnStatement	return PROC_FAMILY_ERROR_SUCCESS ;	320:1:9316:9348	2020485	3	True				
ANR	2020537	Identifier	PROC_FAMILY_ERROR_SUCCESS		2020485	0					
ANR	2020538	ReturnType	proc_family_error_t		2020485	1					
ANR	2020539	Identifier	ProcFamilyMonitor :: track_family_via_login		2020485	2					
ANR	2020540	ParameterList	"pid_t pid , char * login"		2020485	3					
ANR	2020541	Parameter	pid_t pid	304:42:8916:8924	2020485	0	True				
ANR	2020542	ParameterType	pid_t		2020485	0					
ANR	2020543	Identifier	pid		2020485	1					
ANR	2020544	Parameter	char * login	304:53:8927:8937	2020485	1	True				
ANR	2020545	ParameterType	char *		2020485	0					
ANR	2020546	Identifier	login		2020485	1					
ANR	2020547	CFGEntryNode	ENTRY		2020485		True				
ANR	2020548	CFGExitNode	EXIT		2020485		True				
ANR	2020549	Symbol	* tree		2020485						
ANR	2020550	Symbol	lookup_family		2020485						
ANR	2020551	Symbol	NULL		2020485						
ANR	2020552	Symbol	m_login_tracker		2020485						
ANR	2020553	Symbol	tree		2020485						
ANR	2020554	Symbol	true		2020485						
ANR	2020555	Symbol	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2020485						
ANR	2020556	Symbol	tree -> get_data		2020485						
ANR	2020557	Symbol	pid		2020485						
ANR	2020558	Symbol	PROC_FAMILY_ERROR_SUCCESS		2020485						
ANR	2020559	Symbol	login		2020485						
ANR	2020560	Function	ProcFamilyMonitor :: track_family_via_supplementary_group	324:0:9372:10054							
ANR	2020561	FunctionDef	"ProcFamilyMonitor :: track_family_via_supplementary_group (pid_t pid , gid_t & gid)"		2020560	0					
ANR	2020562	CompoundStatement		326:0:9471:10054	2020560	0					
ANR	2020563	IfStatement	if ( m_group_tracker == NULL )		2020560	0					
ANR	2020564	Condition	m_group_tracker == NULL	329:5:9521:9543	2020560	0	True				
ANR	2020565	EqualityExpression	m_group_tracker == NULL		2020560	0		==			
ANR	2020566	Identifier	m_group_tracker		2020560	0					
ANR	2020567	Identifier	NULL		2020560	1					
ANR	2020568	CompoundStatement		4:30:74:74	2020560	1					
ANR	2020569	ReturnStatement	return PROC_FAMILY_ERROR_NO_GROUP_ID_AVAILABLE ;	330:2:9550:9596	2020560	0	True				
ANR	2020570	Identifier	PROC_FAMILY_ERROR_NO_GROUP_ID_AVAILABLE		2020560	0					
ANR	2020571	IdentifierDeclStatement	"Tree < ProcFamily * > * tree = lookup_family ( pid , true ) ;"	335:1:9629:9679	2020560	1	True				
ANR	2020572	IdentifierDecl	"* tree = lookup_family ( pid , true )"		2020560	0					
ANR	2020573	IdentifierDeclType	Tree < ProcFamily * > *		2020560	0					
ANR	2020574	Identifier	tree		2020560	1					
ANR	2020575	AssignmentExpression	"* tree = lookup_family ( pid , true )"		2020560	2		=			
ANR	2020576	Identifier	tree		2020560	0					
ANR	2020577	CallExpression	"lookup_family ( pid , true )"		2020560	1					
ANR	2020578	Callee	lookup_family		2020560	0					
ANR	2020579	Identifier	lookup_family		2020560	0					
ANR	2020580	ArgumentList	pid		2020560	1					
ANR	2020581	Argument	pid		2020560	0					
ANR	2020582	Identifier	pid		2020560	0					
ANR	2020583	Argument	true		2020560	1					
ANR	2020584	Identifier	true		2020560	0					
ANR	2020585	IfStatement	if ( tree == NULL )		2020560	2					
ANR	2020586	Condition	tree == NULL	336:5:9686:9697	2020560	0	True				
ANR	2020587	EqualityExpression	tree == NULL		2020560	0		==			
ANR	2020588	Identifier	tree		2020560	0					
ANR	2020589	Identifier	NULL		2020560	1					
ANR	2020590	CompoundStatement		11:19:228:228	2020560	1					
ANR	2020591	Statement	dprintf	337:2:9704:9710	2020560	0	True				
ANR	2020592	Statement	(	337:9:9711:9711	2020560	1	True				
ANR	2020593	Statement	D_ALWAYS	337:10:9712:9719	2020560	2	True				
ANR	2020594	Statement	","	337:18:9720:9720	2020560	3	True				
ANR	2020595	Statement	"""track_family_via_supplementary_group failure: """	338:10:9732:9779	2020560	4	True				
ANR	2020596	Statement	"""family with root %u not found\\n"""	339:8:9789:9821	2020560	5	True				
ANR	2020597	Statement	","	339:41:9822:9822	2020560	6	True				
ANR	2020598	Statement	pid	340:10:9834:9836	2020560	7	True				
ANR	2020599	Statement	)	340:13:9837:9837	2020560	8	True				
ANR	2020600	ExpressionStatement		340:14:9838:9838	2020560	9	True				
ANR	2020601	ReturnStatement	return PROC_FAMILY_ERROR_FAMILY_NOT_FOUND ;	341:2:9842:9883	2020560	10	True				
ANR	2020602	Identifier	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2020560	0					
ANR	2020603	IdentifierDeclStatement	"bool ok = m_group_tracker -> add_mapping ( tree -> get_data ( ) , gid ) ;"	344:1:9890:9951	2020560	3	True				
ANR	2020604	IdentifierDecl	"ok = m_group_tracker -> add_mapping ( tree -> get_data ( ) , gid )"		2020560	0					
ANR	2020605	IdentifierDeclType	bool		2020560	0					
ANR	2020606	Identifier	ok		2020560	1					
ANR	2020607	AssignmentExpression	"ok = m_group_tracker -> add_mapping ( tree -> get_data ( ) , gid )"		2020560	2		=			
ANR	2020608	Identifier	ok		2020560	0					
ANR	2020609	CallExpression	"m_group_tracker -> add_mapping ( tree -> get_data ( ) , gid )"		2020560	1					
ANR	2020610	Callee	m_group_tracker -> add_mapping		2020560	0					
ANR	2020611	PtrMemberAccess	m_group_tracker -> add_mapping		2020560	0					
ANR	2020612	Identifier	m_group_tracker		2020560	0					
ANR	2020613	Identifier	add_mapping		2020560	1					
ANR	2020614	ArgumentList	tree -> get_data ( )		2020560	1					
ANR	2020615	Argument	tree -> get_data ( )		2020560	0					
ANR	2020616	CallExpression	tree -> get_data ( )		2020560	0					
ANR	2020617	Callee	tree -> get_data		2020560	0					
ANR	2020618	PtrMemberAccess	tree -> get_data		2020560	0					
ANR	2020619	Identifier	tree		2020560	0					
ANR	2020620	Identifier	get_data		2020560	1					
ANR	2020621	ArgumentList			2020560	1					
ANR	2020622	Argument	gid		2020560	1					
ANR	2020623	Identifier	gid		2020560	0					
ANR	2020624	IfStatement	if ( ! ok )		2020560	4					
ANR	2020625	Condition	! ok	345:5:9958:9960	2020560	0	True				
ANR	2020626	UnaryOperationExpression	! ok		2020560	0					
ANR	2020627	UnaryOperator	!		2020560	0					
ANR	2020628	Identifier	ok		2020560	1					
ANR	2020629	CompoundStatement		20:10:491:491	2020560	1					
ANR	2020630	ReturnStatement	return PROC_FAMILY_ERROR_NO_GROUP_ID_AVAILABLE ;	346:2:9967:10013	2020560	0	True				
ANR	2020631	Identifier	PROC_FAMILY_ERROR_NO_GROUP_ID_AVAILABLE		2020560	0					
ANR	2020632	ReturnStatement	return PROC_FAMILY_ERROR_SUCCESS ;	349:1:10020:10052	2020560	5	True				
ANR	2020633	Identifier	PROC_FAMILY_ERROR_SUCCESS		2020560	0					
ANR	2020634	ReturnType	proc_family_error_t		2020560	1					
ANR	2020635	Identifier	ProcFamilyMonitor :: track_family_via_supplementary_group		2020560	2					
ANR	2020636	ParameterList	"pid_t pid , gid_t & gid"		2020560	3					
ANR	2020637	Parameter	pid_t pid	325:56:9448:9456	2020560	0	True				
ANR	2020638	ParameterType	pid_t		2020560	0					
ANR	2020639	Identifier	pid		2020560	1					
ANR	2020640	Parameter	gid_t & gid	325:67:9459:9468	2020560	1	True				
ANR	2020641	ParameterType	gid_t &		2020560	0					
ANR	2020642	Identifier	gid		2020560	1					
ANR	2020643	CFGEntryNode	ENTRY		2020560		True				
ANR	2020644	CFGExitNode	EXIT		2020560		True				
ANR	2020645	Symbol	gid		2020560						
ANR	2020646	Symbol	NULL		2020560						
ANR	2020647	Symbol	PROC_FAMILY_ERROR_NO_GROUP_ID_AVAILABLE		2020560						
ANR	2020648	Symbol	tree		2020560						
ANR	2020649	Symbol	tree -> get_data		2020560						
ANR	2020650	Symbol	pid		2020560						
ANR	2020651	Symbol	m_group_tracker		2020560						
ANR	2020652	Symbol	* tree		2020560						
ANR	2020653	Symbol	m_group_tracker -> add_mapping		2020560						
ANR	2020654	Symbol	lookup_family		2020560						
ANR	2020655	Symbol	* m_group_tracker		2020560						
ANR	2020656	Symbol	true		2020560						
ANR	2020657	Symbol	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2020560						
ANR	2020658	Symbol	PROC_FAMILY_ERROR_SUCCESS		2020560						
ANR	2020659	Symbol	ok		2020560						
ANR	2020660	Function	ProcFamilyMonitor :: track_family_via_cgroup	354:0:10096:10681							
ANR	2020661	FunctionDef	"ProcFamilyMonitor :: track_family_via_cgroup (pid_t pid , const char * cgroup)"		2020660	0					
ANR	2020662	CompoundStatement		356:0:10191:10681	2020660	0					
ANR	2020663	IfStatement	if ( m_cgroup_tracker == NULL )		2020660	0					
ANR	2020664	Condition	m_cgroup_tracker == NULL	357:5:10198:10221	2020660	0	True				
ANR	2020665	EqualityExpression	m_cgroup_tracker == NULL		2020660	0		==			
ANR	2020666	Identifier	m_cgroup_tracker		2020660	0					
ANR	2020667	Identifier	NULL		2020660	1					
ANR	2020668	CompoundStatement		2:31:32:32	2020660	1					
ANR	2020669	ReturnStatement	return PROC_FAMILY_ERROR_NO_CGROUP_ID_AVAILABLE ;	358:2:10228:10275	2020660	0	True				
ANR	2020670	Identifier	PROC_FAMILY_ERROR_NO_CGROUP_ID_AVAILABLE		2020660	0					
ANR	2020671	IdentifierDeclStatement	"Tree < ProcFamily * > * tree = lookup_family ( pid , true ) ;"	361:1:10282:10332	2020660	1	True				
ANR	2020672	IdentifierDecl	"* tree = lookup_family ( pid , true )"		2020660	0					
ANR	2020673	IdentifierDeclType	Tree < ProcFamily * > *		2020660	0					
ANR	2020674	Identifier	tree		2020660	1					
ANR	2020675	AssignmentExpression	"* tree = lookup_family ( pid , true )"		2020660	2		=			
ANR	2020676	Identifier	tree		2020660	0					
ANR	2020677	CallExpression	"lookup_family ( pid , true )"		2020660	1					
ANR	2020678	Callee	lookup_family		2020660	0					
ANR	2020679	Identifier	lookup_family		2020660	0					
ANR	2020680	ArgumentList	pid		2020660	1					
ANR	2020681	Argument	pid		2020660	0					
ANR	2020682	Identifier	pid		2020660	0					
ANR	2020683	Argument	true		2020660	1					
ANR	2020684	Identifier	true		2020660	0					
ANR	2020685	IfStatement	if ( tree == NULL )		2020660	2					
ANR	2020686	Condition	tree == NULL	362:5:10339:10350	2020660	0	True				
ANR	2020687	EqualityExpression	tree == NULL		2020660	0		==			
ANR	2020688	Identifier	tree		2020660	0					
ANR	2020689	Identifier	NULL		2020660	1					
ANR	2020690	CompoundStatement		7:19:161:161	2020660	1					
ANR	2020691	Statement	dprintf	363:2:10357:10363	2020660	0	True				
ANR	2020692	Statement	(	363:9:10364:10364	2020660	1	True				
ANR	2020693	Statement	D_ALWAYS	363:10:10365:10372	2020660	2	True				
ANR	2020694	Statement	","	363:18:10373:10373	2020660	3	True				
ANR	2020695	Statement	"""track_family_via_cgroup failure: """	364:3:10378:10412	2020660	4	True				
ANR	2020696	Statement	"""family with root %u not found\\n"""	365:4:10418:10450	2020660	5	True				
ANR	2020697	Statement	","	365:37:10451:10451	2020660	6	True				
ANR	2020698	Statement	pid	366:3:10456:10458	2020660	7	True				
ANR	2020699	Statement	)	366:6:10459:10459	2020660	8	True				
ANR	2020700	ExpressionStatement		366:7:10460:10460	2020660	9	True				
ANR	2020701	ReturnStatement	return PROC_FAMILY_ERROR_FAMILY_NOT_FOUND ;	367:2:10464:10505	2020660	10	True				
ANR	2020702	Identifier	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2020660	0					
ANR	2020703	IdentifierDeclStatement	"bool ok = m_cgroup_tracker -> add_mapping ( tree -> get_data ( ) , cgroup ) ;"	370:1:10512:10577	2020660	3	True				
ANR	2020704	IdentifierDecl	"ok = m_cgroup_tracker -> add_mapping ( tree -> get_data ( ) , cgroup )"		2020660	0					
ANR	2020705	IdentifierDeclType	bool		2020660	0					
ANR	2020706	Identifier	ok		2020660	1					
ANR	2020707	AssignmentExpression	"ok = m_cgroup_tracker -> add_mapping ( tree -> get_data ( ) , cgroup )"		2020660	2		=			
ANR	2020708	Identifier	ok		2020660	0					
ANR	2020709	CallExpression	"m_cgroup_tracker -> add_mapping ( tree -> get_data ( ) , cgroup )"		2020660	1					
ANR	2020710	Callee	m_cgroup_tracker -> add_mapping		2020660	0					
ANR	2020711	PtrMemberAccess	m_cgroup_tracker -> add_mapping		2020660	0					
ANR	2020712	Identifier	m_cgroup_tracker		2020660	0					
ANR	2020713	Identifier	add_mapping		2020660	1					
ANR	2020714	ArgumentList	tree -> get_data ( )		2020660	1					
ANR	2020715	Argument	tree -> get_data ( )		2020660	0					
ANR	2020716	CallExpression	tree -> get_data ( )		2020660	0					
ANR	2020717	Callee	tree -> get_data		2020660	0					
ANR	2020718	PtrMemberAccess	tree -> get_data		2020660	0					
ANR	2020719	Identifier	tree		2020660	0					
ANR	2020720	Identifier	get_data		2020660	1					
ANR	2020721	ArgumentList			2020660	1					
ANR	2020722	Argument	cgroup		2020660	1					
ANR	2020723	Identifier	cgroup		2020660	0					
ANR	2020724	IfStatement	if ( ! ok )		2020660	4					
ANR	2020725	Condition	! ok	371:5:10584:10586	2020660	0	True				
ANR	2020726	UnaryOperationExpression	! ok		2020660	0					
ANR	2020727	UnaryOperator	!		2020660	0					
ANR	2020728	Identifier	ok		2020660	1					
ANR	2020729	CompoundStatement		16:10:397:397	2020660	1					
ANR	2020730	ReturnStatement	return PROC_FAMILY_ERROR_NO_CGROUP_ID_AVAILABLE ;	372:2:10593:10640	2020660	0	True				
ANR	2020731	Identifier	PROC_FAMILY_ERROR_NO_CGROUP_ID_AVAILABLE		2020660	0					
ANR	2020732	ReturnStatement	return PROC_FAMILY_ERROR_SUCCESS ;	375:1:10647:10679	2020660	5	True				
ANR	2020733	Identifier	PROC_FAMILY_ERROR_SUCCESS		2020660	0					
ANR	2020734	ReturnType	proc_family_error_t		2020660	1					
ANR	2020735	Identifier	ProcFamilyMonitor :: track_family_via_cgroup		2020660	2					
ANR	2020736	ParameterList	"pid_t pid , const char * cgroup"		2020660	3					
ANR	2020737	Parameter	pid_t pid	355:43:10159:10167	2020660	0	True				
ANR	2020738	ParameterType	pid_t		2020660	0					
ANR	2020739	Identifier	pid		2020660	1					
ANR	2020740	Parameter	const char * cgroup	355:54:10170:10188	2020660	1	True				
ANR	2020741	ParameterType	const char *		2020660	0					
ANR	2020742	Identifier	cgroup		2020660	1					
ANR	2020743	CFGEntryNode	ENTRY		2020660		True				
ANR	2020744	CFGExitNode	EXIT		2020660		True				
ANR	2020745	Symbol	NULL		2020660						
ANR	2020746	Symbol	tree		2020660						
ANR	2020747	Symbol	tree -> get_data		2020660						
ANR	2020748	Symbol	pid		2020660						
ANR	2020749	Symbol	cgroup		2020660						
ANR	2020750	Symbol	m_cgroup_tracker -> add_mapping		2020660						
ANR	2020751	Symbol	* tree		2020660						
ANR	2020752	Symbol	lookup_family		2020660						
ANR	2020753	Symbol	true		2020660						
ANR	2020754	Symbol	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2020660						
ANR	2020755	Symbol	PROC_FAMILY_ERROR_SUCCESS		2020660						
ANR	2020756	Symbol	* m_cgroup_tracker		2020660						
ANR	2020757	Symbol	m_cgroup_tracker		2020660						
ANR	2020758	Symbol	PROC_FAMILY_ERROR_NO_CGROUP_ID_AVAILABLE		2020660						
ANR	2020759	Symbol	ok		2020660						
ANR	2020760	Function	ProcFamilyMonitor :: unregister_subfamily	379:0:10691:11442							
ANR	2020761	FunctionDef	ProcFamilyMonitor :: unregister_subfamily (pid_t pid)		2020760	0					
ANR	2020762	CompoundStatement		381:0:10762:11442	2020760	0					
ANR	2020763	IdentifierDeclStatement	Tree < ProcFamily * > * tree = lookup_family ( pid ) ;	384:1:10791:10835	2020760	0	True				
ANR	2020764	IdentifierDecl	* tree = lookup_family ( pid )		2020760	0					
ANR	2020765	IdentifierDeclType	Tree < ProcFamily * > *		2020760	0					
ANR	2020766	Identifier	tree		2020760	1					
ANR	2020767	AssignmentExpression	* tree = lookup_family ( pid )		2020760	2		=			
ANR	2020768	Identifier	tree		2020760	0					
ANR	2020769	CallExpression	lookup_family ( pid )		2020760	1					
ANR	2020770	Callee	lookup_family		2020760	0					
ANR	2020771	Identifier	lookup_family		2020760	0					
ANR	2020772	ArgumentList	pid		2020760	1					
ANR	2020773	Argument	pid		2020760	0					
ANR	2020774	Identifier	pid		2020760	0					
ANR	2020775	IfStatement	if ( tree == NULL )		2020760	1					
ANR	2020776	Condition	tree == NULL	385:5:10842:10853	2020760	0	True				
ANR	2020777	EqualityExpression	tree == NULL		2020760	0		==			
ANR	2020778	Identifier	tree		2020760	0					
ANR	2020779	Identifier	NULL		2020760	1					
ANR	2020780	CompoundStatement		5:19:93:93	2020760	1					
ANR	2020781	ExpressionStatement	"dprintf ( D_ALWAYS , ""unregister_subfamily failure: family with root %u not found\\n"" , pid )"	386:2:10860:10967	2020760	0	True				
ANR	2020782	CallExpression	"dprintf ( D_ALWAYS , ""unregister_subfamily failure: family with root %u not found\\n"" , pid )"		2020760	0					
ANR	2020783	Callee	dprintf		2020760	0					
ANR	2020784	Identifier	dprintf		2020760	0					
ANR	2020785	ArgumentList	D_ALWAYS		2020760	1					
ANR	2020786	Argument	D_ALWAYS		2020760	0					
ANR	2020787	Identifier	D_ALWAYS		2020760	0					
ANR	2020788	Argument	"""unregister_subfamily failure: family with root %u not found\\n"""		2020760	1					
ANR	2020789	PrimaryExpression	"""unregister_subfamily failure: family with root %u not found\\n"""		2020760	0					
ANR	2020790	Argument	pid		2020760	2					
ANR	2020791	Identifier	pid		2020760	0					
ANR	2020792	ReturnStatement	return PROC_FAMILY_ERROR_FAMILY_NOT_FOUND ;	389:2:10971:11012	2020760	1	True				
ANR	2020793	Identifier	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2020760	0					
ANR	2020794	IfStatement	if ( tree -> get_parent ( ) == NULL )		2020760	2					
ANR	2020795	Condition	tree -> get_parent ( ) == NULL	394:5:11097:11122	2020760	0	True				
ANR	2020796	EqualityExpression	tree -> get_parent ( ) == NULL		2020760	0		==			
ANR	2020797	CallExpression	tree -> get_parent ( )		2020760	0					
ANR	2020798	Callee	tree -> get_parent		2020760	0					
ANR	2020799	PtrMemberAccess	tree -> get_parent		2020760	0					
ANR	2020800	Identifier	tree		2020760	0					
ANR	2020801	Identifier	get_parent		2020760	1					
ANR	2020802	ArgumentList			2020760	1					
ANR	2020803	Identifier	NULL		2020760	1					
ANR	2020804	CompoundStatement		14:33:362:362	2020760	1					
ANR	2020805	ExpressionStatement	"dprintf ( D_ALWAYS , ""unregister_subfamily failure: cannot unregister root family\\n"" )"	395:2:11129:11221	2020760	0	True				
ANR	2020806	CallExpression	"dprintf ( D_ALWAYS , ""unregister_subfamily failure: cannot unregister root family\\n"" )"		2020760	0					
ANR	2020807	Callee	dprintf		2020760	0					
ANR	2020808	Identifier	dprintf		2020760	0					
ANR	2020809	ArgumentList	D_ALWAYS		2020760	1					
ANR	2020810	Argument	D_ALWAYS		2020760	0					
ANR	2020811	Identifier	D_ALWAYS		2020760	0					
ANR	2020812	Argument	"""unregister_subfamily failure: cannot unregister root family\\n"""		2020760	1					
ANR	2020813	PrimaryExpression	"""unregister_subfamily failure: cannot unregister root family\\n"""		2020760	0					
ANR	2020814	ReturnStatement	return PROC_FAMILY_ERROR_UNREGISTER_ROOT ;	397:2:11225:11265	2020760	1	True				
ANR	2020815	Identifier	PROC_FAMILY_ERROR_UNREGISTER_ROOT		2020760	0					
ANR	2020816	ExpressionStatement	"dprintf ( D_ALWAYS , ""unregistering family with root pid %u\\n"" , pid )"	402:1:11292:11375	2020760	3	True				
ANR	2020817	CallExpression	"dprintf ( D_ALWAYS , ""unregistering family with root pid %u\\n"" , pid )"		2020760	0					
ANR	2020818	Callee	dprintf		2020760	0					
ANR	2020819	Identifier	dprintf		2020760	0					
ANR	2020820	ArgumentList	D_ALWAYS		2020760	1					
ANR	2020821	Argument	D_ALWAYS		2020760	0					
ANR	2020822	Identifier	D_ALWAYS		2020760	0					
ANR	2020823	Argument	"""unregistering family with root pid %u\\n"""		2020760	1					
ANR	2020824	PrimaryExpression	"""unregistering family with root pid %u\\n"""		2020760	0					
ANR	2020825	Argument	pid		2020760	2					
ANR	2020826	Identifier	pid		2020760	0					
ANR	2020827	ExpressionStatement	unregister_subfamily ( tree )	405:1:11378:11404	2020760	4	True				
ANR	2020828	CallExpression	unregister_subfamily ( tree )		2020760	0					
ANR	2020829	Callee	unregister_subfamily		2020760	0					
ANR	2020830	Identifier	unregister_subfamily		2020760	0					
ANR	2020831	ArgumentList	tree		2020760	1					
ANR	2020832	Argument	tree		2020760	0					
ANR	2020833	Identifier	tree		2020760	0					
ANR	2020834	ReturnStatement	return PROC_FAMILY_ERROR_SUCCESS ;	407:1:11408:11440	2020760	5	True				
ANR	2020835	Identifier	PROC_FAMILY_ERROR_SUCCESS		2020760	0					
ANR	2020836	ReturnType	proc_family_error_t		2020760	1					
ANR	2020837	Identifier	ProcFamilyMonitor :: unregister_subfamily		2020760	2					
ANR	2020838	ParameterList	pid_t pid		2020760	3					
ANR	2020839	Parameter	pid_t pid	380:40:10751:10759	2020760	0	True				
ANR	2020840	ParameterType	pid_t		2020760	0					
ANR	2020841	Identifier	pid		2020760	1					
ANR	2020842	CFGEntryNode	ENTRY		2020760		True				
ANR	2020843	CFGExitNode	EXIT		2020760		True				
ANR	2020844	Symbol	* tree		2020760						
ANR	2020845	Symbol	lookup_family		2020760						
ANR	2020846	Symbol	NULL		2020760						
ANR	2020847	Symbol	PROC_FAMILY_ERROR_UNREGISTER_ROOT		2020760						
ANR	2020848	Symbol	tree		2020760						
ANR	2020849	Symbol	D_ALWAYS		2020760						
ANR	2020850	Symbol	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2020760						
ANR	2020851	Symbol	pid		2020760						
ANR	2020852	Symbol	tree -> get_parent		2020760						
ANR	2020853	Symbol	PROC_FAMILY_ERROR_SUCCESS		2020760						
ANR	2020854	Function	ProcFamilyMonitor :: use_glexec_for_family	411:0:11465:12220							
ANR	2020855	FunctionDef	"ProcFamilyMonitor :: use_glexec_for_family (pid_t pid , char * proxy)"		2020854	0					
ANR	2020856	CompoundStatement		413:0:11550:12220	2020854	0					
ANR	2020857	IfStatement	if ( ! glexec_kill_check ( ) )		2020854	0					
ANR	2020858	Condition	! glexec_kill_check ( )	417:5:11632:11651	2020854	0	True				
ANR	2020859	UnaryOperationExpression	! glexec_kill_check ( )		2020854	0					
ANR	2020860	UnaryOperator	!		2020854	0					
ANR	2020861	CallExpression	glexec_kill_check ( )		2020854	1					
ANR	2020862	Callee	glexec_kill_check		2020854	0					
ANR	2020863	Identifier	glexec_kill_check		2020854	0					
ANR	2020864	ArgumentList			2020854	1					
ANR	2020865	CompoundStatement		5:27:103:103	2020854	1					
ANR	2020866	Statement	dprintf	418:2:11658:11664	2020854	0	True				
ANR	2020867	Statement	(	418:9:11665:11665	2020854	1	True				
ANR	2020868	Statement	D_ALWAYS	418:10:11666:11673	2020854	2	True				
ANR	2020869	Statement	","	418:18:11674:11674	2020854	3	True				
ANR	2020870	Statement	"""use_glexec_for_family failure: """	419:10:11686:11718	2020854	4	True				
ANR	2020871	Statement	"""glexec_kill not initialized\\n"""	420:14:11734:11764	2020854	5	True				
ANR	2020872	Statement	)	420:45:11765:11765	2020854	6	True				
ANR	2020873	ExpressionStatement		420:46:11766:11766	2020854	7	True				
ANR	2020874	ReturnStatement	return PROC_FAMILY_ERROR_NO_GLEXEC ;	421:2:11770:11804	2020854	8	True				
ANR	2020875	Identifier	PROC_FAMILY_ERROR_NO_GLEXEC		2020854	0					
ANR	2020876	IdentifierDeclStatement	Tree < ProcFamily * > * tree ;	426:1:11837:11860	2020854	1	True				
ANR	2020877	IdentifierDecl	* tree		2020854	0					
ANR	2020878	IdentifierDeclType	Tree < ProcFamily * > *		2020854	0					
ANR	2020879	Identifier	tree		2020854	1					
ANR	2020880	IdentifierDeclStatement	"int ret = m_family_table . lookup ( pid , tree ) ;"	427:1:11863:11905	2020854	2	True				
ANR	2020881	IdentifierDecl	"ret = m_family_table . lookup ( pid , tree )"		2020854	0					
ANR	2020882	IdentifierDeclType	int		2020854	0					
ANR	2020883	Identifier	ret		2020854	1					
ANR	2020884	AssignmentExpression	"ret = m_family_table . lookup ( pid , tree )"		2020854	2		=			
ANR	2020885	Identifier	ret		2020854	0					
ANR	2020886	CallExpression	"m_family_table . lookup ( pid , tree )"		2020854	1					
ANR	2020887	Callee	m_family_table . lookup		2020854	0					
ANR	2020888	MemberAccess	m_family_table . lookup		2020854	0					
ANR	2020889	Identifier	m_family_table		2020854	0					
ANR	2020890	Identifier	lookup		2020854	1					
ANR	2020891	ArgumentList	pid		2020854	1					
ANR	2020892	Argument	pid		2020854	0					
ANR	2020893	Identifier	pid		2020854	0					
ANR	2020894	Argument	tree		2020854	1					
ANR	2020895	Identifier	tree		2020854	0					
ANR	2020896	IfStatement	if ( ret == - 1 )		2020854	3					
ANR	2020897	Condition	ret == - 1	428:5:11912:11920	2020854	0	True				
ANR	2020898	EqualityExpression	ret == - 1		2020854	0		==			
ANR	2020899	Identifier	ret		2020854	0					
ANR	2020900	UnaryOperationExpression	- 1		2020854	1					
ANR	2020901	UnaryOperator	-		2020854	0					
ANR	2020902	PrimaryExpression	1		2020854	1					
ANR	2020903	CompoundStatement		16:16:372:372	2020854	1					
ANR	2020904	Statement	dprintf	429:2:11927:11933	2020854	0	True				
ANR	2020905	Statement	(	429:9:11934:11934	2020854	1	True				
ANR	2020906	Statement	D_ALWAYS	429:10:11935:11942	2020854	2	True				
ANR	2020907	Statement	","	429:18:11943:11943	2020854	3	True				
ANR	2020908	Statement	"""use_glexec_for_family failure: """	430:10:11955:11987	2020854	4	True				
ANR	2020909	Statement	"""family with root %u not found\\n"""	431:14:12003:12035	2020854	5	True				
ANR	2020910	Statement	","	431:47:12036:12036	2020854	6	True				
ANR	2020911	Statement	pid	432:10:12048:12050	2020854	7	True				
ANR	2020912	Statement	)	432:13:12051:12051	2020854	8	True				
ANR	2020913	ExpressionStatement		432:14:12052:12052	2020854	9	True				
ANR	2020914	ReturnStatement	return PROC_FAMILY_ERROR_FAMILY_NOT_FOUND ;	433:2:12056:12097	2020854	10	True				
ANR	2020915	Identifier	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2020854	0					
ANR	2020916	ExpressionStatement	tree -> get_data ( ) -> set_proxy ( proxy )	438:1:12148:12182	2020854	4	True				
ANR	2020917	CallExpression	tree -> get_data ( ) -> set_proxy ( proxy )		2020854	0					
ANR	2020918	Callee	tree -> get_data ( ) -> set_proxy		2020854	0					
ANR	2020919	PtrMemberAccess	tree -> get_data ( ) -> set_proxy		2020854	0					
ANR	2020920	CallExpression	tree -> get_data ( )		2020854	0					
ANR	2020921	Callee	tree -> get_data		2020854	0					
ANR	2020922	PtrMemberAccess	tree -> get_data		2020854	0					
ANR	2020923	Identifier	tree		2020854	0					
ANR	2020924	Identifier	get_data		2020854	1					
ANR	2020925	ArgumentList			2020854	1					
ANR	2020926	Identifier	set_proxy		2020854	1					
ANR	2020927	ArgumentList	proxy		2020854	1					
ANR	2020928	Argument	proxy		2020854	0					
ANR	2020929	Identifier	proxy		2020854	0					
ANR	2020930	ReturnStatement	return PROC_FAMILY_ERROR_SUCCESS ;	440:1:12186:12218	2020854	5	True				
ANR	2020931	Identifier	PROC_FAMILY_ERROR_SUCCESS		2020854	0					
ANR	2020932	ReturnType	proc_family_error_t		2020854	1					
ANR	2020933	Identifier	ProcFamilyMonitor :: use_glexec_for_family		2020854	2					
ANR	2020934	ParameterList	"pid_t pid , char * proxy"		2020854	3					
ANR	2020935	Parameter	pid_t pid	412:41:11526:11534	2020854	0	True				
ANR	2020936	ParameterType	pid_t		2020854	0					
ANR	2020937	Identifier	pid		2020854	1					
ANR	2020938	Parameter	char * proxy	412:52:11537:11547	2020854	1	True				
ANR	2020939	ParameterType	char *		2020854	0					
ANR	2020940	Identifier	proxy		2020854	1					
ANR	2020941	CFGEntryNode	ENTRY		2020854		True				
ANR	2020942	CFGExitNode	EXIT		2020854		True				
ANR	2020943	Symbol	glexec_kill_check		2020854						
ANR	2020944	Symbol	ret		2020854						
ANR	2020945	Symbol	* tree		2020854						
ANR	2020946	Symbol	proxy		2020854						
ANR	2020947	Symbol	PROC_FAMILY_ERROR_NO_GLEXEC		2020854						
ANR	2020948	Symbol	m_family_table		2020854						
ANR	2020949	Symbol	tree		2020854						
ANR	2020950	Symbol	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2020854						
ANR	2020951	Symbol	m_family_table . lookup		2020854						
ANR	2020952	Symbol	tree -> get_data		2020854						
ANR	2020953	Symbol	pid		2020854						
ANR	2020954	Symbol	PROC_FAMILY_ERROR_SUCCESS		2020854						
ANR	2020955	Function	ProcFamilyMonitor :: get_snapshot_interval	444:0:12230:12318							
ANR	2020956	FunctionDef	ProcFamilyMonitor :: get_snapshot_interval ()		2020955	0					
ANR	2020957	CompoundStatement		446:0:12277:12318	2020955	0					
ANR	2020958	ReturnStatement	return get_snapshot_interval ( m_tree ) ;	447:1:12280:12316	2020955	0	True				
ANR	2020959	CallExpression	get_snapshot_interval ( m_tree )		2020955	0					
ANR	2020960	Callee	get_snapshot_interval		2020955	0					
ANR	2020961	Identifier	get_snapshot_interval		2020955	0					
ANR	2020962	ArgumentList	m_tree		2020955	1					
ANR	2020963	Argument	m_tree		2020955	0					
ANR	2020964	Identifier	m_tree		2020955	0					
ANR	2020965	ReturnType	int		2020955	1					
ANR	2020966	Identifier	ProcFamilyMonitor :: get_snapshot_interval		2020955	2					
ANR	2020967	ParameterList			2020955	3					
ANR	2020968	CFGEntryNode	ENTRY		2020955		True				
ANR	2020969	CFGExitNode	EXIT		2020955		True				
ANR	2020970	Symbol	m_tree		2020955						
ANR	2020971	Symbol	get_snapshot_interval		2020955						
ANR	2020972	Function	ProcFamilyMonitor :: signal_process	450:0:12321:12816							
ANR	2020973	FunctionDef	"ProcFamilyMonitor :: signal_process (pid_t pid , int sig)"		2020972	0					
ANR	2020974	CompoundStatement		452:0:12395:12816	2020972	0					
ANR	2020975	IdentifierDeclStatement	"Tree < ProcFamily * > * tree = lookup_family ( pid , true ) ;"	455:1:12455:12505	2020972	0	True				
ANR	2020976	IdentifierDecl	"* tree = lookup_family ( pid , true )"		2020972	0					
ANR	2020977	IdentifierDeclType	Tree < ProcFamily * > *		2020972	0					
ANR	2020978	Identifier	tree		2020972	1					
ANR	2020979	AssignmentExpression	"* tree = lookup_family ( pid , true )"		2020972	2		=			
ANR	2020980	Identifier	tree		2020972	0					
ANR	2020981	CallExpression	"lookup_family ( pid , true )"		2020972	1					
ANR	2020982	Callee	lookup_family		2020972	0					
ANR	2020983	Identifier	lookup_family		2020972	0					
ANR	2020984	ArgumentList	pid		2020972	1					
ANR	2020985	Argument	pid		2020972	0					
ANR	2020986	Identifier	pid		2020972	0					
ANR	2020987	Argument	true		2020972	1					
ANR	2020988	Identifier	true		2020972	0					
ANR	2020989	IfStatement	if ( tree == NULL )		2020972	1					
ANR	2020990	Condition	tree == NULL	456:5:12512:12523	2020972	0	True				
ANR	2020991	EqualityExpression	tree == NULL		2020972	0		==			
ANR	2020992	Identifier	tree		2020972	0					
ANR	2020993	Identifier	NULL		2020972	1					
ANR	2020994	CompoundStatement		5:19:130:130	2020972	1					
ANR	2020995	ExpressionStatement	"dprintf ( D_ALWAYS , ""signal_process failure: family with root %u not found\\n"" , pid )"	457:2:12530:12625	2020972	0	True				
ANR	2020996	CallExpression	"dprintf ( D_ALWAYS , ""signal_process failure: family with root %u not found\\n"" , pid )"		2020972	0					
ANR	2020997	Callee	dprintf		2020972	0					
ANR	2020998	Identifier	dprintf		2020972	0					
ANR	2020999	ArgumentList	D_ALWAYS		2020972	1					
ANR	2021000	Argument	D_ALWAYS		2020972	0					
ANR	2021001	Identifier	D_ALWAYS		2020972	0					
ANR	2021002	Argument	"""signal_process failure: family with root %u not found\\n"""		2020972	1					
ANR	2021003	PrimaryExpression	"""signal_process failure: family with root %u not found\\n"""		2020972	0					
ANR	2021004	Argument	pid		2020972	2					
ANR	2021005	Identifier	pid		2020972	0					
ANR	2021006	ReturnStatement	return PROC_FAMILY_ERROR_FAMILY_NOT_FOUND ;	460:2:12629:12670	2020972	1	True				
ANR	2021007	Identifier	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2020972	0					
ANR	2021008	ExpressionStatement	"dprintf ( D_ALWAYS , ""sending signal %d to process %u\\n"" , sig , pid )"	463:1:12677:12741	2020972	2	True				
ANR	2021009	CallExpression	"dprintf ( D_ALWAYS , ""sending signal %d to process %u\\n"" , sig , pid )"		2020972	0					
ANR	2021010	Callee	dprintf		2020972	0					
ANR	2021011	Identifier	dprintf		2020972	0					
ANR	2021012	ArgumentList	D_ALWAYS		2020972	1					
ANR	2021013	Argument	D_ALWAYS		2020972	0					
ANR	2021014	Identifier	D_ALWAYS		2020972	0					
ANR	2021015	Argument	"""sending signal %d to process %u\\n"""		2020972	1					
ANR	2021016	PrimaryExpression	"""sending signal %d to process %u\\n"""		2020972	0					
ANR	2021017	Argument	sig		2020972	2					
ANR	2021018	Identifier	sig		2020972	0					
ANR	2021019	Argument	pid		2020972	3					
ANR	2021020	Identifier	pid		2020972	0					
ANR	2021021	ExpressionStatement	tree -> get_data ( ) -> signal_root ( sig )	464:1:12744:12778	2020972	3	True				
ANR	2021022	CallExpression	tree -> get_data ( ) -> signal_root ( sig )		2020972	0					
ANR	2021023	Callee	tree -> get_data ( ) -> signal_root		2020972	0					
ANR	2021024	PtrMemberAccess	tree -> get_data ( ) -> signal_root		2020972	0					
ANR	2021025	CallExpression	tree -> get_data ( )		2020972	0					
ANR	2021026	Callee	tree -> get_data		2020972	0					
ANR	2021027	PtrMemberAccess	tree -> get_data		2020972	0					
ANR	2021028	Identifier	tree		2020972	0					
ANR	2021029	Identifier	get_data		2020972	1					
ANR	2021030	ArgumentList			2020972	1					
ANR	2021031	Identifier	signal_root		2020972	1					
ANR	2021032	ArgumentList	sig		2020972	1					
ANR	2021033	Argument	sig		2020972	0					
ANR	2021034	Identifier	sig		2020972	0					
ANR	2021035	ReturnStatement	return PROC_FAMILY_ERROR_SUCCESS ;	466:1:12782:12814	2020972	4	True				
ANR	2021036	Identifier	PROC_FAMILY_ERROR_SUCCESS		2020972	0					
ANR	2021037	ReturnType	proc_family_error_t		2020972	1					
ANR	2021038	Identifier	ProcFamilyMonitor :: signal_process		2020972	2					
ANR	2021039	ParameterList	"pid_t pid , int sig"		2020972	3					
ANR	2021040	Parameter	pid_t pid	451:34:12375:12383	2020972	0	True				
ANR	2021041	ParameterType	pid_t		2020972	0					
ANR	2021042	Identifier	pid		2020972	1					
ANR	2021043	Parameter	int sig	451:45:12386:12392	2020972	1	True				
ANR	2021044	ParameterType	int		2020972	0					
ANR	2021045	Identifier	sig		2020972	1					
ANR	2021046	CFGEntryNode	ENTRY		2020972		True				
ANR	2021047	CFGExitNode	EXIT		2020972		True				
ANR	2021048	Symbol	sig		2020972						
ANR	2021049	Symbol	* tree		2020972						
ANR	2021050	Symbol	lookup_family		2020972						
ANR	2021051	Symbol	NULL		2020972						
ANR	2021052	Symbol	tree		2020972						
ANR	2021053	Symbol	true		2020972						
ANR	2021054	Symbol	D_ALWAYS		2020972						
ANR	2021055	Symbol	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2020972						
ANR	2021056	Symbol	tree -> get_data		2020972						
ANR	2021057	Symbol	pid		2020972						
ANR	2021058	Symbol	PROC_FAMILY_ERROR_SUCCESS		2020972						
ANR	2021059	Function	ProcFamilyMonitor :: signal_family	469:0:12819:13374							
ANR	2021060	FunctionDef	"ProcFamilyMonitor :: signal_family (pid_t pid , int sig)"		2021059	0					
ANR	2021061	CompoundStatement		471:0:12892:13374	2021059	0					
ANR	2021062	ExpressionStatement	snapshot ( )	474:1:12933:12943	2021059	0	True				
ANR	2021063	CallExpression	snapshot ( )		2021059	0					
ANR	2021064	Callee	snapshot		2021059	0					
ANR	2021065	Identifier	snapshot		2021059	0					
ANR	2021066	ArgumentList			2021059	1					
ANR	2021067	IdentifierDeclStatement	"Tree < ProcFamily * > * tree = lookup_family ( pid , true ) ;"	478:1:12971:13021	2021059	1	True				
ANR	2021068	IdentifierDecl	"* tree = lookup_family ( pid , true )"		2021059	0					
ANR	2021069	IdentifierDeclType	Tree < ProcFamily * > *		2021059	0					
ANR	2021070	Identifier	tree		2021059	1					
ANR	2021071	AssignmentExpression	"* tree = lookup_family ( pid , true )"		2021059	2		=			
ANR	2021072	Identifier	tree		2021059	0					
ANR	2021073	CallExpression	"lookup_family ( pid , true )"		2021059	1					
ANR	2021074	Callee	lookup_family		2021059	0					
ANR	2021075	Identifier	lookup_family		2021059	0					
ANR	2021076	ArgumentList	pid		2021059	1					
ANR	2021077	Argument	pid		2021059	0					
ANR	2021078	Identifier	pid		2021059	0					
ANR	2021079	Argument	true		2021059	1					
ANR	2021080	Identifier	true		2021059	0					
ANR	2021081	IfStatement	if ( tree == NULL )		2021059	2					
ANR	2021082	Condition	tree == NULL	479:5:13028:13039	2021059	0	True				
ANR	2021083	EqualityExpression	tree == NULL		2021059	0		==			
ANR	2021084	Identifier	tree		2021059	0					
ANR	2021085	Identifier	NULL		2021059	1					
ANR	2021086	CompoundStatement		9:19:149:149	2021059	1					
ANR	2021087	ExpressionStatement	"dprintf ( D_ALWAYS , ""signal_family error: family with root %u not found\\n"" , pid )"	480:2:13046:13144	2021059	0	True				
ANR	2021088	CallExpression	"dprintf ( D_ALWAYS , ""signal_family error: family with root %u not found\\n"" , pid )"		2021059	0					
ANR	2021089	Callee	dprintf		2021059	0					
ANR	2021090	Identifier	dprintf		2021059	0					
ANR	2021091	ArgumentList	D_ALWAYS		2021059	1					
ANR	2021092	Argument	D_ALWAYS		2021059	0					
ANR	2021093	Identifier	D_ALWAYS		2021059	0					
ANR	2021094	Argument	"""signal_family error: family with root %u not found\\n"""		2021059	1					
ANR	2021095	PrimaryExpression	"""signal_family error: family with root %u not found\\n"""		2021059	0					
ANR	2021096	Argument	pid		2021059	2					
ANR	2021097	Identifier	pid		2021059	0					
ANR	2021098	ReturnStatement	return PROC_FAMILY_ERROR_FAMILY_NOT_FOUND ;	483:2:13148:13189	2021059	1	True				
ANR	2021099	Identifier	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2021059	0					
ANR	2021100	ExpressionStatement	"dprintf ( D_ALWAYS , ""sending signal %d to family with root %u\\n"" , sig , pid )"	488:1:13236:13309	2021059	3	True				
ANR	2021101	CallExpression	"dprintf ( D_ALWAYS , ""sending signal %d to family with root %u\\n"" , sig , pid )"		2021059	0					
ANR	2021102	Callee	dprintf		2021059	0					
ANR	2021103	Identifier	dprintf		2021059	0					
ANR	2021104	ArgumentList	D_ALWAYS		2021059	1					
ANR	2021105	Argument	D_ALWAYS		2021059	0					
ANR	2021106	Identifier	D_ALWAYS		2021059	0					
ANR	2021107	Argument	"""sending signal %d to family with root %u\\n"""		2021059	1					
ANR	2021108	PrimaryExpression	"""sending signal %d to family with root %u\\n"""		2021059	0					
ANR	2021109	Argument	sig		2021059	2					
ANR	2021110	Identifier	sig		2021059	0					
ANR	2021111	Argument	pid		2021059	3					
ANR	2021112	Identifier	pid		2021059	0					
ANR	2021113	ExpressionStatement	"signal_family ( tree , sig )"	489:1:13312:13336	2021059	4	True				
ANR	2021114	CallExpression	"signal_family ( tree , sig )"		2021059	0					
ANR	2021115	Callee	signal_family		2021059	0					
ANR	2021116	Identifier	signal_family		2021059	0					
ANR	2021117	ArgumentList	tree		2021059	1					
ANR	2021118	Argument	tree		2021059	0					
ANR	2021119	Identifier	tree		2021059	0					
ANR	2021120	Argument	sig		2021059	1					
ANR	2021121	Identifier	sig		2021059	0					
ANR	2021122	ReturnStatement	return PROC_FAMILY_ERROR_SUCCESS ;	491:1:13340:13372	2021059	5	True				
ANR	2021123	Identifier	PROC_FAMILY_ERROR_SUCCESS		2021059	0					
ANR	2021124	ReturnType	proc_family_error_t		2021059	1					
ANR	2021125	Identifier	ProcFamilyMonitor :: signal_family		2021059	2					
ANR	2021126	ParameterList	"pid_t pid , int sig"		2021059	3					
ANR	2021127	Parameter	pid_t pid	470:33:12872:12880	2021059	0	True				
ANR	2021128	ParameterType	pid_t		2021059	0					
ANR	2021129	Identifier	pid		2021059	1					
ANR	2021130	Parameter	int sig	470:44:12883:12889	2021059	1	True				
ANR	2021131	ParameterType	int		2021059	0					
ANR	2021132	Identifier	sig		2021059	1					
ANR	2021133	CFGEntryNode	ENTRY		2021059		True				
ANR	2021134	CFGExitNode	EXIT		2021059		True				
ANR	2021135	Symbol	sig		2021059						
ANR	2021136	Symbol	lookup_family		2021059						
ANR	2021137	Symbol	NULL		2021059						
ANR	2021138	Symbol	tree		2021059						
ANR	2021139	Symbol	true		2021059						
ANR	2021140	Symbol	D_ALWAYS		2021059						
ANR	2021141	Symbol	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2021059						
ANR	2021142	Symbol	pid		2021059						
ANR	2021143	Symbol	PROC_FAMILY_ERROR_SUCCESS		2021059						
ANR	2021144	Function	ProcFamilyMonitor :: get_family_usage	494:0:13377:14582							
ANR	2021145	FunctionDef	"ProcFamilyMonitor :: get_family_usage (pid_t pid , ProcFamilyUsage * usage)"		2021144	0					
ANR	2021146	CompoundStatement		496:0:13468:14582	2021144	0					
ANR	2021147	IdentifierDeclStatement	"Tree < ProcFamily * > * tree = lookup_family ( pid , true ) ;"	499:1:13495:13545	2021144	0	True				
ANR	2021148	IdentifierDecl	"* tree = lookup_family ( pid , true )"		2021144	0					
ANR	2021149	IdentifierDeclType	Tree < ProcFamily * > *		2021144	0					
ANR	2021150	Identifier	tree		2021144	1					
ANR	2021151	AssignmentExpression	"* tree = lookup_family ( pid , true )"		2021144	2		=			
ANR	2021152	Identifier	tree		2021144	0					
ANR	2021153	CallExpression	"lookup_family ( pid , true )"		2021144	1					
ANR	2021154	Callee	lookup_family		2021144	0					
ANR	2021155	Identifier	lookup_family		2021144	0					
ANR	2021156	ArgumentList	pid		2021144	1					
ANR	2021157	Argument	pid		2021144	0					
ANR	2021158	Identifier	pid		2021144	0					
ANR	2021159	Argument	true		2021144	1					
ANR	2021160	Identifier	true		2021144	0					
ANR	2021161	IfStatement	if ( tree == NULL )		2021144	1					
ANR	2021162	Condition	tree == NULL	500:5:13552:13563	2021144	0	True				
ANR	2021163	EqualityExpression	tree == NULL		2021144	0		==			
ANR	2021164	Identifier	tree		2021144	0					
ANR	2021165	Identifier	NULL		2021144	1					
ANR	2021166	CompoundStatement		5:19:97:97	2021144	1					
ANR	2021167	ExpressionStatement	"dprintf ( D_ALWAYS , ""get_family_usage failure: family with root %u not found\\n"" , pid )"	501:2:13570:13673	2021144	0	True				
ANR	2021168	CallExpression	"dprintf ( D_ALWAYS , ""get_family_usage failure: family with root %u not found\\n"" , pid )"		2021144	0					
ANR	2021169	Callee	dprintf		2021144	0					
ANR	2021170	Identifier	dprintf		2021144	0					
ANR	2021171	ArgumentList	D_ALWAYS		2021144	1					
ANR	2021172	Argument	D_ALWAYS		2021144	0					
ANR	2021173	Identifier	D_ALWAYS		2021144	0					
ANR	2021174	Argument	"""get_family_usage failure: family with root %u not found\\n"""		2021144	1					
ANR	2021175	PrimaryExpression	"""get_family_usage failure: family with root %u not found\\n"""		2021144	0					
ANR	2021176	Argument	pid		2021144	2					
ANR	2021177	Identifier	pid		2021144	0					
ANR	2021178	ReturnStatement	return PROC_FAMILY_ERROR_FAMILY_NOT_FOUND ;	504:2:13677:13718	2021144	1	True				
ANR	2021179	Identifier	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2021144	0					
ANR	2021180	ExpressionStatement	"dprintf ( D_ALWAYS , ""gathering usage data for family with root pid %u\\n"" , pid )"	509:1:13789:13883	2021144	2	True				
ANR	2021181	CallExpression	"dprintf ( D_ALWAYS , ""gathering usage data for family with root pid %u\\n"" , pid )"		2021144	0					
ANR	2021182	Callee	dprintf		2021144	0					
ANR	2021183	Identifier	dprintf		2021144	0					
ANR	2021184	ArgumentList	D_ALWAYS		2021144	1					
ANR	2021185	Argument	D_ALWAYS		2021144	0					
ANR	2021186	Identifier	D_ALWAYS		2021144	0					
ANR	2021187	Argument	"""gathering usage data for family with root pid %u\\n"""		2021144	1					
ANR	2021188	PrimaryExpression	"""gathering usage data for family with root pid %u\\n"""		2021144	0					
ANR	2021189	Argument	pid		2021144	2					
ANR	2021190	Identifier	pid		2021144	0					
ANR	2021191	ExpressionStatement	ASSERT ( usage != NULL )	512:1:13886:13907	2021144	3	True				
ANR	2021192	CallExpression	ASSERT ( usage != NULL )		2021144	0					
ANR	2021193	Callee	ASSERT		2021144	0					
ANR	2021194	Identifier	ASSERT		2021144	0					
ANR	2021195	ArgumentList	usage != NULL		2021144	1					
ANR	2021196	Argument	usage != NULL		2021144	0					
ANR	2021197	EqualityExpression	usage != NULL		2021144	0		!=			
ANR	2021198	Identifier	usage		2021144	0					
ANR	2021199	Identifier	NULL		2021144	1					
ANR	2021200	ExpressionStatement	usage -> user_cpu_time = 0	513:1:13910:13934	2021144	4	True				
ANR	2021201	AssignmentExpression	usage -> user_cpu_time = 0		2021144	0		=			
ANR	2021202	PtrMemberAccess	usage -> user_cpu_time		2021144	0					
ANR	2021203	Identifier	usage		2021144	0					
ANR	2021204	Identifier	user_cpu_time		2021144	1					
ANR	2021205	PrimaryExpression	0		2021144	1					
ANR	2021206	ExpressionStatement	usage -> sys_cpu_time = 0	514:1:13937:13960	2021144	5	True				
ANR	2021207	AssignmentExpression	usage -> sys_cpu_time = 0		2021144	0		=			
ANR	2021208	PtrMemberAccess	usage -> sys_cpu_time		2021144	0					
ANR	2021209	Identifier	usage		2021144	0					
ANR	2021210	Identifier	sys_cpu_time		2021144	1					
ANR	2021211	PrimaryExpression	0		2021144	1					
ANR	2021212	ExpressionStatement	usage -> percent_cpu = 0.0	515:1:13963:13987	2021144	6	True				
ANR	2021213	AssignmentExpression	usage -> percent_cpu = 0.0		2021144	0		=			
ANR	2021214	PtrMemberAccess	usage -> percent_cpu		2021144	0					
ANR	2021215	Identifier	usage		2021144	0					
ANR	2021216	Identifier	percent_cpu		2021144	1					
ANR	2021217	PrimaryExpression	0.0		2021144	1					
ANR	2021218	ExpressionStatement	usage -> total_image_size = 0	516:1:13990:14017	2021144	7	True				
ANR	2021219	AssignmentExpression	usage -> total_image_size = 0		2021144	0		=			
ANR	2021220	PtrMemberAccess	usage -> total_image_size		2021144	0					
ANR	2021221	Identifier	usage		2021144	0					
ANR	2021222	Identifier	total_image_size		2021144	1					
ANR	2021223	PrimaryExpression	0		2021144	1					
ANR	2021224	ExpressionStatement	usage -> total_resident_set_size = 0	517:1:14020:14054	2021144	8	True				
ANR	2021225	AssignmentExpression	usage -> total_resident_set_size = 0		2021144	0		=			
ANR	2021226	PtrMemberAccess	usage -> total_resident_set_size		2021144	0					
ANR	2021227	Identifier	usage		2021144	0					
ANR	2021228	Identifier	total_resident_set_size		2021144	1					
ANR	2021229	PrimaryExpression	0		2021144	1					
ANR	2021230	ExpressionStatement	usage -> total_proportional_set_size = 0	519:4:14073:14111	2021144	9	True				
ANR	2021231	AssignmentExpression	usage -> total_proportional_set_size = 0		2021144	0		=			
ANR	2021232	PtrMemberAccess	usage -> total_proportional_set_size		2021144	0					
ANR	2021233	Identifier	usage		2021144	0					
ANR	2021234	Identifier	total_proportional_set_size		2021144	1					
ANR	2021235	PrimaryExpression	0		2021144	1					
ANR	2021236	ExpressionStatement	usage -> total_proportional_set_size_available = false	520:4:14117:14169	2021144	10	True				
ANR	2021237	AssignmentExpression	usage -> total_proportional_set_size_available = false		2021144	0		=			
ANR	2021238	PtrMemberAccess	usage -> total_proportional_set_size_available		2021144	0					
ANR	2021239	Identifier	usage		2021144	0					
ANR	2021240	Identifier	total_proportional_set_size_available		2021144	1					
ANR	2021241	Identifier	false		2021144	1					
ANR	2021242	ExpressionStatement	usage -> block_read_bytes = - 1	523:1:14264:14292	2021144	11	True				
ANR	2021243	AssignmentExpression	usage -> block_read_bytes = - 1		2021144	0		=			
ANR	2021244	PtrMemberAccess	usage -> block_read_bytes		2021144	0					
ANR	2021245	Identifier	usage		2021144	0					
ANR	2021246	Identifier	block_read_bytes		2021144	1					
ANR	2021247	UnaryOperationExpression	- 1		2021144	1					
ANR	2021248	UnaryOperator	-		2021144	0					
ANR	2021249	PrimaryExpression	1		2021144	1					
ANR	2021250	ExpressionStatement	usage -> block_write_bytes = - 1	524:1:14295:14324	2021144	12	True				
ANR	2021251	AssignmentExpression	usage -> block_write_bytes = - 1		2021144	0		=			
ANR	2021252	PtrMemberAccess	usage -> block_write_bytes		2021144	0					
ANR	2021253	Identifier	usage		2021144	0					
ANR	2021254	Identifier	block_write_bytes		2021144	1					
ANR	2021255	UnaryOperationExpression	- 1		2021144	1					
ANR	2021256	UnaryOperator	-		2021144	0					
ANR	2021257	PrimaryExpression	1		2021144	1					
ANR	2021258	ExpressionStatement	usage -> num_procs = 0	525:1:14327:14347	2021144	13	True				
ANR	2021259	AssignmentExpression	usage -> num_procs = 0		2021144	0		=			
ANR	2021260	PtrMemberAccess	usage -> num_procs		2021144	0					
ANR	2021261	Identifier	usage		2021144	0					
ANR	2021262	Identifier	num_procs		2021144	1					
ANR	2021263	PrimaryExpression	0		2021144	1					
ANR	2021264	ExpressionStatement	"get_family_usage ( tree , usage )"	526:1:14350:14379	2021144	14	True				
ANR	2021265	CallExpression	"get_family_usage ( tree , usage )"		2021144	0					
ANR	2021266	Callee	get_family_usage		2021144	0					
ANR	2021267	Identifier	get_family_usage		2021144	0					
ANR	2021268	ArgumentList	tree		2021144	1					
ANR	2021269	Argument	tree		2021144	0					
ANR	2021270	Identifier	tree		2021144	0					
ANR	2021271	Argument	usage		2021144	1					
ANR	2021272	Identifier	usage		2021144	0					
ANR	2021273	ExpressionStatement	usage -> max_image_size = tree -> get_data ( ) -> get_max_image_size ( )	531:1:14482:14544	2021144	15	True				
ANR	2021274	AssignmentExpression	usage -> max_image_size = tree -> get_data ( ) -> get_max_image_size ( )		2021144	0		=			
ANR	2021275	PtrMemberAccess	usage -> max_image_size		2021144	0					
ANR	2021276	Identifier	usage		2021144	0					
ANR	2021277	Identifier	max_image_size		2021144	1					
ANR	2021278	CallExpression	tree -> get_data ( ) -> get_max_image_size ( )		2021144	1					
ANR	2021279	Callee	tree -> get_data ( ) -> get_max_image_size		2021144	0					
ANR	2021280	PtrMemberAccess	tree -> get_data ( ) -> get_max_image_size		2021144	0					
ANR	2021281	CallExpression	tree -> get_data ( )		2021144	0					
ANR	2021282	Callee	tree -> get_data		2021144	0					
ANR	2021283	PtrMemberAccess	tree -> get_data		2021144	0					
ANR	2021284	Identifier	tree		2021144	0					
ANR	2021285	Identifier	get_data		2021144	1					
ANR	2021286	ArgumentList			2021144	1					
ANR	2021287	Identifier	get_max_image_size		2021144	1					
ANR	2021288	ArgumentList			2021144	1					
ANR	2021289	ReturnStatement	return PROC_FAMILY_ERROR_SUCCESS ;	533:1:14548:14580	2021144	16	True				
ANR	2021290	Identifier	PROC_FAMILY_ERROR_SUCCESS		2021144	0					
ANR	2021291	ReturnType	proc_family_error_t		2021144	1					
ANR	2021292	Identifier	ProcFamilyMonitor :: get_family_usage		2021144	2					
ANR	2021293	ParameterList	"pid_t pid , ProcFamilyUsage * usage"		2021144	3					
ANR	2021294	Parameter	pid_t pid	495:36:13433:13441	2021144	0	True				
ANR	2021295	ParameterType	pid_t		2021144	0					
ANR	2021296	Identifier	pid		2021144	1					
ANR	2021297	Parameter	ProcFamilyUsage * usage	495:47:13444:13465	2021144	1	True				
ANR	2021298	ParameterType	ProcFamilyUsage *		2021144	0					
ANR	2021299	Identifier	usage		2021144	1					
ANR	2021300	CFGEntryNode	ENTRY		2021144		True				
ANR	2021301	CFGExitNode	EXIT		2021144		True				
ANR	2021302	Symbol	usage -> user_cpu_time		2021144						
ANR	2021303	Symbol	* tree -> get_data		2021144						
ANR	2021304	Symbol	usage -> total_proportional_set_size_available		2021144						
ANR	2021305	Symbol	usage -> block_read_bytes		2021144						
ANR	2021306	Symbol	usage		2021144						
ANR	2021307	Symbol	tree -> get_data		2021144						
ANR	2021308	Symbol	pid		2021144						
ANR	2021309	Symbol	usage -> total_resident_set_size		2021144						
ANR	2021310	Symbol	* * tree		2021144						
ANR	2021311	Symbol	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2021144						
ANR	2021312	Symbol	usage -> num_procs		2021144						
ANR	2021313	Symbol	NULL		2021144						
ANR	2021314	Symbol	usage -> total_proportional_set_size		2021144						
ANR	2021315	Symbol	tree -> get_data ( ) -> get_max_image_size		2021144						
ANR	2021316	Symbol	tree		2021144						
ANR	2021317	Symbol	D_ALWAYS		2021144						
ANR	2021318	Symbol	false		2021144						
ANR	2021319	Symbol	usage -> max_image_size		2021144						
ANR	2021320	Symbol	usage -> percent_cpu		2021144						
ANR	2021321	Symbol	* usage		2021144						
ANR	2021322	Symbol	* tree		2021144						
ANR	2021323	Symbol	lookup_family		2021144						
ANR	2021324	Symbol	usage -> sys_cpu_time		2021144						
ANR	2021325	Symbol	usage -> block_write_bytes		2021144						
ANR	2021326	Symbol	usage -> total_image_size		2021144						
ANR	2021327	Symbol	true		2021144						
ANR	2021328	Symbol	PROC_FAMILY_ERROR_SUCCESS		2021144						
ANR	2021329	Function	ProcFamilyMonitor :: snapshot	536:0:14585:18818							
ANR	2021330	FunctionDef	ProcFamilyMonitor :: snapshot ()		2021329	0					
ANR	2021331	CompoundStatement		538:0:14620:18818	2021329	0					
ANR	2021332	ExpressionStatement	"dprintf ( D_ALWAYS , ""taking a snapshot...\\n"" )"	539:1:14623:14666	2021329	0	True				
ANR	2021333	CallExpression	"dprintf ( D_ALWAYS , ""taking a snapshot...\\n"" )"		2021329	0					
ANR	2021334	Callee	dprintf		2021329	0					
ANR	2021335	Identifier	dprintf		2021329	0					
ANR	2021336	ArgumentList	D_ALWAYS		2021329	1					
ANR	2021337	Argument	D_ALWAYS		2021329	0					
ANR	2021338	Identifier	D_ALWAYS		2021329	0					
ANR	2021339	Argument	"""taking a snapshot...\\n"""		2021329	1					
ANR	2021340	PrimaryExpression	"""taking a snapshot...\\n"""		2021329	0					
ANR	2021341	IdentifierDeclStatement	procInfo * pi_list = ProcAPI :: getProcInfoList ( ) ;	546:1:14907:14953	2021329	1	True				
ANR	2021342	IdentifierDecl	* pi_list = ProcAPI :: getProcInfoList ( )		2021329	0					
ANR	2021343	IdentifierDeclType	procInfo *		2021329	0					
ANR	2021344	Identifier	pi_list		2021329	1					
ANR	2021345	AssignmentExpression	* pi_list = ProcAPI :: getProcInfoList ( )		2021329	2		=			
ANR	2021346	Identifier	pi_list		2021329	0					
ANR	2021347	CallExpression	ProcAPI :: getProcInfoList ( )		2021329	1					
ANR	2021348	Callee	ProcAPI :: getProcInfoList		2021329	0					
ANR	2021349	Identifier	ProcAPI :: getProcInfoList		2021329	0					
ANR	2021350	ArgumentList			2021329	1					
ANR	2021351	IdentifierDeclStatement	procInfo * * prev_ptr = & pi_list ;	572:1:15868:15898	2021329	2	True				
ANR	2021352	IdentifierDecl	* * prev_ptr = & pi_list		2021329	0					
ANR	2021353	IdentifierDeclType	procInfo * *		2021329	0					
ANR	2021354	Identifier	prev_ptr		2021329	1					
ANR	2021355	AssignmentExpression	* * prev_ptr = & pi_list		2021329	2		=			
ANR	2021356	Identifier	prev_ptr		2021329	0					
ANR	2021357	UnaryOperationExpression	& pi_list		2021329	1					
ANR	2021358	UnaryOperator	&		2021329	0					
ANR	2021359	Identifier	pi_list		2021329	1					
ANR	2021360	IdentifierDeclStatement	procInfo * curr = pi_list ;	573:1:15901:15925	2021329	3	True				
ANR	2021361	IdentifierDecl	* curr = pi_list		2021329	0					
ANR	2021362	IdentifierDeclType	procInfo *		2021329	0					
ANR	2021363	Identifier	curr		2021329	1					
ANR	2021364	AssignmentExpression	* curr = pi_list		2021329	2		=			
ANR	2021365	Identifier	pi_list		2021329	0					
ANR	2021366	Identifier	pi_list		2021329	1					
ANR	2021367	WhileStatement	while ( curr != NULL )		2021329	4					
ANR	2021368	Condition	curr != NULL	574:8:15935:15946	2021329	0	True				
ANR	2021369	EqualityExpression	curr != NULL		2021329	0		!=			
ANR	2021370	Identifier	curr		2021329	0					
ANR	2021371	Identifier	NULL		2021329	1					
ANR	2021372	CompoundStatement		47:2:1463:1509	2021329	1					
ANR	2021373	IfStatement	if ( curr -> pid == 0 )		2021329	0					
ANR	2021374	Condition	curr -> pid == 0	576:6:15958:15971	2021329	0	True				
ANR	2021375	EqualityExpression	curr -> pid == 0		2021329	0		==			
ANR	2021376	PtrMemberAccess	curr -> pid		2021329	0					
ANR	2021377	Identifier	curr		2021329	0					
ANR	2021378	Identifier	pid		2021329	1					
ANR	2021379	PrimaryExpression	0		2021329	1					
ANR	2021380	CompoundStatement		39:22:1353:1353	2021329	1					
ANR	2021381	ExpressionStatement	* prev_ptr = curr -> next	577:3:15979:16001	2021329	0	True				
ANR	2021382	AssignmentExpression	* prev_ptr = curr -> next		2021329	0		=			
ANR	2021383	UnaryOperationExpression	* prev_ptr		2021329	0					
ANR	2021384	UnaryOperator	*		2021329	0					
ANR	2021385	Identifier	prev_ptr		2021329	1					
ANR	2021386	PtrMemberAccess	curr -> next		2021329	1					
ANR	2021387	Identifier	curr		2021329	0					
ANR	2021388	Identifier	next		2021329	1					
ANR	2021389	Statement	delete	578:3:16006:16011	2021329	1	True				
ANR	2021390	ExpressionStatement	curr	578:10:16013:16017	2021329	2	True				
ANR	2021391	Identifier	curr		2021329	0					
ANR	2021392	ExpressionStatement	curr = * prev_ptr	579:3:16022:16038	2021329	3	True				
ANR	2021393	AssignmentExpression	curr = * prev_ptr		2021329	0		=			
ANR	2021394	Identifier	curr		2021329	0					
ANR	2021395	UnaryOperationExpression	* prev_ptr		2021329	1					
ANR	2021396	UnaryOperator	*		2021329	0					
ANR	2021397	Identifier	prev_ptr		2021329	1					
ANR	2021398	ContinueStatement	continue ;	580:3:16043:16051	2021329	4	True				
ANR	2021399	IdentifierDeclStatement	ProcFamilyMember * pm ;	583:2:16060:16080	2021329	1	True				
ANR	2021400	IdentifierDecl	* pm		2021329	0					
ANR	2021401	IdentifierDeclType	ProcFamilyMember *		2021329	0					
ANR	2021402	Identifier	pm		2021329	1					
ANR	2021403	IdentifierDeclStatement	"int ret = m_member_table . lookup ( curr -> pid , pm ) ;"	584:2:16084:16130	2021329	2	True				
ANR	2021404	IdentifierDecl	"ret = m_member_table . lookup ( curr -> pid , pm )"		2021329	0					
ANR	2021405	IdentifierDeclType	int		2021329	0					
ANR	2021406	Identifier	ret		2021329	1					
ANR	2021407	AssignmentExpression	"ret = m_member_table . lookup ( curr -> pid , pm )"		2021329	2		=			
ANR	2021408	Identifier	ret		2021329	0					
ANR	2021409	CallExpression	"m_member_table . lookup ( curr -> pid , pm )"		2021329	1					
ANR	2021410	Callee	m_member_table . lookup		2021329	0					
ANR	2021411	MemberAccess	m_member_table . lookup		2021329	0					
ANR	2021412	Identifier	m_member_table		2021329	0					
ANR	2021413	Identifier	lookup		2021329	1					
ANR	2021414	ArgumentList	curr -> pid		2021329	1					
ANR	2021415	Argument	curr -> pid		2021329	0					
ANR	2021416	PtrMemberAccess	curr -> pid		2021329	0					
ANR	2021417	Identifier	curr		2021329	0					
ANR	2021418	Identifier	pid		2021329	1					
ANR	2021419	Argument	pm		2021329	1					
ANR	2021420	Identifier	pm		2021329	0					
ANR	2021421	IfStatement	if ( ret != - 1 && pm -> get_proc_info ( ) -> birthday == curr -> birthday )		2021329	3					
ANR	2021422	Condition	ret != - 1 && pm -> get_proc_info ( ) -> birthday == curr -> birthday	585:6:16138:16203	2021329	0	True				
ANR	2021423	AndExpression	ret != - 1 && pm -> get_proc_info ( ) -> birthday == curr -> birthday		2021329	0		&&			
ANR	2021424	EqualityExpression	ret != - 1		2021329	0		!=			
ANR	2021425	Identifier	ret		2021329	0					
ANR	2021426	UnaryOperationExpression	- 1		2021329	1					
ANR	2021427	UnaryOperator	-		2021329	0					
ANR	2021428	PrimaryExpression	1		2021329	1					
ANR	2021429	EqualityExpression	pm -> get_proc_info ( ) -> birthday == curr -> birthday		2021329	1		==			
ANR	2021430	PtrMemberAccess	pm -> get_proc_info ( ) -> birthday		2021329	0					
ANR	2021431	CallExpression	pm -> get_proc_info ( )		2021329	0					
ANR	2021432	Callee	pm -> get_proc_info		2021329	0					
ANR	2021433	PtrMemberAccess	pm -> get_proc_info		2021329	0					
ANR	2021434	Identifier	pm		2021329	0					
ANR	2021435	Identifier	get_proc_info		2021329	1					
ANR	2021436	ArgumentList			2021329	1					
ANR	2021437	Identifier	birthday		2021329	1					
ANR	2021438	PtrMemberAccess	curr -> birthday		2021329	1					
ANR	2021439	Identifier	curr		2021329	0					
ANR	2021440	Identifier	birthday		2021329	1					
ANR	2021441	CompoundStatement		50:2:1587:1587	2021329	1					
ANR	2021442	ExpressionStatement	* prev_ptr = curr -> next	592:3:16373:16395	2021329	0	True				
ANR	2021443	AssignmentExpression	* prev_ptr = curr -> next		2021329	0		=			
ANR	2021444	UnaryOperationExpression	* prev_ptr		2021329	0					
ANR	2021445	UnaryOperator	*		2021329	0					
ANR	2021446	Identifier	prev_ptr		2021329	1					
ANR	2021447	PtrMemberAccess	curr -> next		2021329	1					
ANR	2021448	Identifier	curr		2021329	0					
ANR	2021449	Identifier	next		2021329	1					
ANR	2021450	ExpressionStatement	pm -> still_alive ( curr )	593:3:16400:16421	2021329	1	True				
ANR	2021451	CallExpression	pm -> still_alive ( curr )		2021329	0					
ANR	2021452	Callee	pm -> still_alive		2021329	0					
ANR	2021453	PtrMemberAccess	pm -> still_alive		2021329	0					
ANR	2021454	Identifier	pm		2021329	0					
ANR	2021455	Identifier	still_alive		2021329	1					
ANR	2021456	ArgumentList	curr		2021329	1					
ANR	2021457	Argument	curr		2021329	0					
ANR	2021458	Identifier	curr		2021329	0					
ANR	2021459	ElseStatement	else		2021329	0					
ANR	2021460	CompoundStatement		58:7:1813:1813	2021329	0					
ANR	2021461	ExpressionStatement	prev_ptr = & curr -> next	599:3:16525:16547	2021329	0	True				
ANR	2021462	AssignmentExpression	prev_ptr = & curr -> next		2021329	0		=			
ANR	2021463	Identifier	prev_ptr		2021329	0					
ANR	2021464	UnaryOperationExpression	& curr -> next		2021329	1					
ANR	2021465	UnaryOperator	&		2021329	0					
ANR	2021466	PtrMemberAccess	curr -> next		2021329	1					
ANR	2021467	Identifier	curr		2021329	0					
ANR	2021468	Identifier	next		2021329	1					
ANR	2021469	ExpressionStatement	curr = curr -> next	602:2:16556:16573	2021329	4	True				
ANR	2021470	AssignmentExpression	curr = curr -> next		2021329	0		=			
ANR	2021471	Identifier	curr		2021329	0					
ANR	2021472	PtrMemberAccess	curr -> next		2021329	1					
ANR	2021473	Identifier	curr		2021329	0					
ANR	2021474	Identifier	next		2021329	1					
ANR	2021475	ExpressionStatement	remove_exited_processes ( m_tree )	609:1:16796:16827	2021329	5	True				
ANR	2021476	CallExpression	remove_exited_processes ( m_tree )		2021329	0					
ANR	2021477	Callee	remove_exited_processes		2021329	0					
ANR	2021478	Identifier	remove_exited_processes		2021329	0					
ANR	2021479	ArgumentList	m_tree		2021329	1					
ANR	2021480	Argument	m_tree		2021329	0					
ANR	2021481	Identifier	m_tree		2021329	0					
ANR	2021482	ExpressionStatement	m_everybody_else -> remove_exited_processes ( )	610:1:16830:16873	2021329	6	True				
ANR	2021483	CallExpression	m_everybody_else -> remove_exited_processes ( )		2021329	0					
ANR	2021484	Callee	m_everybody_else -> remove_exited_processes		2021329	0					
ANR	2021485	PtrMemberAccess	m_everybody_else -> remove_exited_processes		2021329	0					
ANR	2021486	Identifier	m_everybody_else		2021329	0					
ANR	2021487	Identifier	remove_exited_processes		2021329	1					
ANR	2021488	ArgumentList			2021329	1					
ANR	2021489	ExpressionStatement	m_pid_tracker -> find_processes ( pi_list )	624:1:17584:17622	2021329	7	True				
ANR	2021490	CallExpression	m_pid_tracker -> find_processes ( pi_list )		2021329	0					
ANR	2021491	Callee	m_pid_tracker -> find_processes		2021329	0					
ANR	2021492	PtrMemberAccess	m_pid_tracker -> find_processes		2021329	0					
ANR	2021493	Identifier	m_pid_tracker		2021329	0					
ANR	2021494	Identifier	find_processes		2021329	1					
ANR	2021495	ArgumentList	pi_list		2021329	1					
ANR	2021496	Argument	pi_list		2021329	0					
ANR	2021497	Identifier	pi_list		2021329	0					
ANR	2021498	IfStatement	if ( m_group_tracker != NULL )		2021329	8					
ANR	2021499	Condition	m_group_tracker != NULL	626:5:17648:17670	2021329	0	True				
ANR	2021500	EqualityExpression	m_group_tracker != NULL		2021329	0		!=			
ANR	2021501	Identifier	m_group_tracker		2021329	0					
ANR	2021502	Identifier	NULL		2021329	1					
ANR	2021503	CompoundStatement		89:30:3052:3052	2021329	1					
ANR	2021504	ExpressionStatement	m_group_tracker -> find_processes ( pi_list )	627:2:17677:17717	2021329	0	True				
ANR	2021505	CallExpression	m_group_tracker -> find_processes ( pi_list )		2021329	0					
ANR	2021506	Callee	m_group_tracker -> find_processes		2021329	0					
ANR	2021507	PtrMemberAccess	m_group_tracker -> find_processes		2021329	0					
ANR	2021508	Identifier	m_group_tracker		2021329	0					
ANR	2021509	Identifier	find_processes		2021329	1					
ANR	2021510	ArgumentList	pi_list		2021329	1					
ANR	2021511	Argument	pi_list		2021329	0					
ANR	2021512	Identifier	pi_list		2021329	0					
ANR	2021513	IfStatement	if ( m_cgroup_tracker != NULL )		2021329	9					
ANR	2021514	Condition	m_cgroup_tracker != NULL	631:5:17766:17789	2021329	0	True				
ANR	2021515	EqualityExpression	m_cgroup_tracker != NULL		2021329	0		!=			
ANR	2021516	Identifier	m_cgroup_tracker		2021329	0					
ANR	2021517	Identifier	NULL		2021329	1					
ANR	2021518	CompoundStatement		94:31:3171:3171	2021329	1					
ANR	2021519	ExpressionStatement	m_cgroup_tracker -> find_processes ( pi_list )	632:2:17796:17837	2021329	0	True				
ANR	2021520	CallExpression	m_cgroup_tracker -> find_processes ( pi_list )		2021329	0					
ANR	2021521	Callee	m_cgroup_tracker -> find_processes		2021329	0					
ANR	2021522	PtrMemberAccess	m_cgroup_tracker -> find_processes		2021329	0					
ANR	2021523	Identifier	m_cgroup_tracker		2021329	0					
ANR	2021524	Identifier	find_processes		2021329	1					
ANR	2021525	ArgumentList	pi_list		2021329	1					
ANR	2021526	Argument	pi_list		2021329	0					
ANR	2021527	Identifier	pi_list		2021329	0					
ANR	2021528	ExpressionStatement	m_login_tracker -> find_processes ( pi_list )	635:1:17850:17890	2021329	10	True				
ANR	2021529	CallExpression	m_login_tracker -> find_processes ( pi_list )		2021329	0					
ANR	2021530	Callee	m_login_tracker -> find_processes		2021329	0					
ANR	2021531	PtrMemberAccess	m_login_tracker -> find_processes		2021329	0					
ANR	2021532	Identifier	m_login_tracker		2021329	0					
ANR	2021533	Identifier	find_processes		2021329	1					
ANR	2021534	ArgumentList	pi_list		2021329	1					
ANR	2021535	Argument	pi_list		2021329	0					
ANR	2021536	Identifier	pi_list		2021329	0					
ANR	2021537	ExpressionStatement	m_environment_tracker -> find_processes ( pi_list )	636:1:17893:17939	2021329	11	True				
ANR	2021538	CallExpression	m_environment_tracker -> find_processes ( pi_list )		2021329	0					
ANR	2021539	Callee	m_environment_tracker -> find_processes		2021329	0					
ANR	2021540	PtrMemberAccess	m_environment_tracker -> find_processes		2021329	0					
ANR	2021541	Identifier	m_environment_tracker		2021329	0					
ANR	2021542	Identifier	find_processes		2021329	1					
ANR	2021543	ArgumentList	pi_list		2021329	1					
ANR	2021544	Argument	pi_list		2021329	0					
ANR	2021545	Identifier	pi_list		2021329	0					
ANR	2021546	ExpressionStatement	m_parent_tracker -> find_processes ( pi_list )	637:1:17942:17983	2021329	12	True				
ANR	2021547	CallExpression	m_parent_tracker -> find_processes ( pi_list )		2021329	0					
ANR	2021548	Callee	m_parent_tracker -> find_processes		2021329	0					
ANR	2021549	PtrMemberAccess	m_parent_tracker -> find_processes		2021329	0					
ANR	2021550	Identifier	m_parent_tracker		2021329	0					
ANR	2021551	Identifier	find_processes		2021329	1					
ANR	2021552	ArgumentList	pi_list		2021329	1					
ANR	2021553	Argument	pi_list		2021329	0					
ANR	2021554	Identifier	pi_list		2021329	0					
ANR	2021555	ExpressionStatement	curr = pi_list	644:1:18228:18242	2021329	13	True				
ANR	2021556	AssignmentExpression	curr = pi_list		2021329	0		=			
ANR	2021557	Identifier	curr		2021329	0					
ANR	2021558	Identifier	pi_list		2021329	1					
ANR	2021559	WhileStatement	while ( curr != NULL )		2021329	14					
ANR	2021560	Condition	curr != NULL	645:8:18252:18263	2021329	0	True				
ANR	2021561	EqualityExpression	curr != NULL		2021329	0		!=			
ANR	2021562	Identifier	curr		2021329	0					
ANR	2021563	Identifier	NULL		2021329	1					
ANR	2021564	CompoundStatement		110:2:3674:3721	2021329	1					
ANR	2021565	IdentifierDeclStatement	ProcFamilyMember * pfm ;	646:2:18270:18291	2021329	0	True				
ANR	2021566	IdentifierDecl	* pfm		2021329	0					
ANR	2021567	IdentifierDeclType	ProcFamilyMember *		2021329	0					
ANR	2021568	Identifier	pfm		2021329	1					
ANR	2021569	IdentifierDeclStatement	"int ret = m_member_table . lookup ( curr -> pid , pfm ) ;"	647:2:18295:18342	2021329	1	True				
ANR	2021570	IdentifierDecl	"ret = m_member_table . lookup ( curr -> pid , pfm )"		2021329	0					
ANR	2021571	IdentifierDeclType	int		2021329	0					
ANR	2021572	Identifier	ret		2021329	1					
ANR	2021573	AssignmentExpression	"ret = m_member_table . lookup ( curr -> pid , pfm )"		2021329	2		=			
ANR	2021574	Identifier	ret		2021329	0					
ANR	2021575	CallExpression	"m_member_table . lookup ( curr -> pid , pfm )"		2021329	1					
ANR	2021576	Callee	m_member_table . lookup		2021329	0					
ANR	2021577	MemberAccess	m_member_table . lookup		2021329	0					
ANR	2021578	Identifier	m_member_table		2021329	0					
ANR	2021579	Identifier	lookup		2021329	1					
ANR	2021580	ArgumentList	curr -> pid		2021329	1					
ANR	2021581	Argument	curr -> pid		2021329	0					
ANR	2021582	PtrMemberAccess	curr -> pid		2021329	0					
ANR	2021583	Identifier	curr		2021329	0					
ANR	2021584	Identifier	pid		2021329	1					
ANR	2021585	Argument	pfm		2021329	1					
ANR	2021586	Identifier	pfm		2021329	0					
ANR	2021587	IfStatement	if ( ret == - 1 )		2021329	2					
ANR	2021588	Condition	ret == - 1	648:6:18350:18358	2021329	0	True				
ANR	2021589	EqualityExpression	ret == - 1		2021329	0		==			
ANR	2021590	Identifier	ret		2021329	0					
ANR	2021591	UnaryOperationExpression	- 1		2021329	1					
ANR	2021592	UnaryOperator	-		2021329	0					
ANR	2021593	PrimaryExpression	1		2021329	1					
ANR	2021594	CompoundStatement		111:17:3740:3740	2021329	1					
ANR	2021595	ExpressionStatement	"dprintf ( D_ALWAYS , ""no methods have determined process %u to be in a monitored family\\n"" , curr -> pid )"	649:3:18366:18487	2021329	0	True				
ANR	2021596	CallExpression	"dprintf ( D_ALWAYS , ""no methods have determined process %u to be in a monitored family\\n"" , curr -> pid )"		2021329	0					
ANR	2021597	Callee	dprintf		2021329	0					
ANR	2021598	Identifier	dprintf		2021329	0					
ANR	2021599	ArgumentList	D_ALWAYS		2021329	1					
ANR	2021600	Argument	D_ALWAYS		2021329	0					
ANR	2021601	Identifier	D_ALWAYS		2021329	0					
ANR	2021602	Argument	"""no methods have determined process %u to be in a monitored family\\n"""		2021329	1					
ANR	2021603	PrimaryExpression	"""no methods have determined process %u to be in a monitored family\\n"""		2021329	0					
ANR	2021604	Argument	curr -> pid		2021329	2					
ANR	2021605	PtrMemberAccess	curr -> pid		2021329	0					
ANR	2021606	Identifier	curr		2021329	0					
ANR	2021607	Identifier	pid		2021329	1					
ANR	2021608	ExpressionStatement	m_everybody_else -> add_member ( curr )	652:3:18492:18526	2021329	1	True				
ANR	2021609	CallExpression	m_everybody_else -> add_member ( curr )		2021329	0					
ANR	2021610	Callee	m_everybody_else -> add_member		2021329	0					
ANR	2021611	PtrMemberAccess	m_everybody_else -> add_member		2021329	0					
ANR	2021612	Identifier	m_everybody_else		2021329	0					
ANR	2021613	Identifier	add_member		2021329	1					
ANR	2021614	ArgumentList	curr		2021329	1					
ANR	2021615	Argument	curr		2021329	0					
ANR	2021616	Identifier	curr		2021329	0					
ANR	2021617	ExpressionStatement	curr = curr -> next	654:2:18534:18551	2021329	3	True				
ANR	2021618	AssignmentExpression	curr = curr -> next		2021329	0		=			
ANR	2021619	Identifier	curr		2021329	0					
ANR	2021620	PtrMemberAccess	curr -> next		2021329	1					
ANR	2021621	Identifier	curr		2021329	0					
ANR	2021622	Identifier	next		2021329	1					
ANR	2021623	ExpressionStatement	delete_unwatched_families ( m_tree )	659:1:18616:18649	2021329	15	True				
ANR	2021624	CallExpression	delete_unwatched_families ( m_tree )		2021329	0					
ANR	2021625	Callee	delete_unwatched_families		2021329	0					
ANR	2021626	Identifier	delete_unwatched_families		2021329	0					
ANR	2021627	ArgumentList	m_tree		2021329	1					
ANR	2021628	Argument	m_tree		2021329	0					
ANR	2021629	Identifier	m_tree		2021329	0					
ANR	2021630	ExpressionStatement	update_max_image_sizes ( m_tree )	664:1:18739:18769	2021329	16	True				
ANR	2021631	CallExpression	update_max_image_sizes ( m_tree )		2021329	0					
ANR	2021632	Callee	update_max_image_sizes		2021329	0					
ANR	2021633	Identifier	update_max_image_sizes		2021329	0					
ANR	2021634	ArgumentList	m_tree		2021329	1					
ANR	2021635	Argument	m_tree		2021329	0					
ANR	2021636	Identifier	m_tree		2021329	0					
ANR	2021637	ExpressionStatement	"dprintf ( D_ALWAYS , ""...snapshot complete\\n"" )"	666:1:18773:18816	2021329	17	True				
ANR	2021638	CallExpression	"dprintf ( D_ALWAYS , ""...snapshot complete\\n"" )"		2021329	0					
ANR	2021639	Callee	dprintf		2021329	0					
ANR	2021640	Identifier	dprintf		2021329	0					
ANR	2021641	ArgumentList	D_ALWAYS		2021329	1					
ANR	2021642	Argument	D_ALWAYS		2021329	0					
ANR	2021643	Identifier	D_ALWAYS		2021329	0					
ANR	2021644	Argument	"""...snapshot complete\\n"""		2021329	1					
ANR	2021645	PrimaryExpression	"""...snapshot complete\\n"""		2021329	0					
ANR	2021646	ReturnType	void		2021329	1					
ANR	2021647	Identifier	ProcFamilyMonitor :: snapshot		2021329	2					
ANR	2021648	ParameterList			2021329	3					
ANR	2021649	CFGEntryNode	ENTRY		2021329		True				
ANR	2021650	CFGExitNode	EXIT		2021329		True				
ANR	2021651	Symbol	m_tree		2021329						
ANR	2021652	Symbol	curr -> pid		2021329						
ANR	2021653	Symbol	& pi_list		2021329						
ANR	2021654	Symbol	m_group_tracker		2021329						
ANR	2021655	Symbol	curr -> next		2021329						
ANR	2021656	Symbol	m_login_tracker		2021329						
ANR	2021657	Symbol	m_member_table		2021329						
ANR	2021658	Symbol	ProcAPI :: getProcInfoList		2021329						
ANR	2021659	Symbol	curr -> birthday		2021329						
ANR	2021660	Symbol	pm -> get_proc_info		2021329						
ANR	2021661	Symbol	& curr -> next		2021329						
ANR	2021662	Symbol	curr		2021329						
ANR	2021663	Symbol	ret		2021329						
ANR	2021664	Symbol	* pm		2021329						
ANR	2021665	Symbol	* pm -> get_proc_info		2021329						
ANR	2021666	Symbol	NULL		2021329						
ANR	2021667	Symbol	D_ALWAYS		2021329						
ANR	2021668	Symbol	* * pm		2021329						
ANR	2021669	Symbol	prev_ptr		2021329						
ANR	2021670	Symbol	pi_list		2021329						
ANR	2021671	Symbol	* prev_ptr		2021329						
ANR	2021672	Symbol	* curr		2021329						
ANR	2021673	Symbol	m_member_table . lookup		2021329						
ANR	2021674	Symbol	pfm		2021329						
ANR	2021675	Symbol	m_everybody_else		2021329						
ANR	2021676	Symbol	m_parent_tracker		2021329						
ANR	2021677	Symbol	m_environment_tracker		2021329						
ANR	2021678	Symbol	pm -> get_proc_info ( ) -> birthday		2021329						
ANR	2021679	Symbol	m_cgroup_tracker		2021329						
ANR	2021680	Symbol	pm		2021329						
ANR	2021681	Symbol	m_pid_tracker		2021329						
ANR	2021682	Function	ProcFamilyMonitor :: add_member	669:0:18821:18976							
ANR	2021683	FunctionDef	ProcFamilyMonitor :: add_member (ProcFamilyMember * member)		2021682	0					
ANR	2021684	CompoundStatement		671:0:18882:18976	2021682	0					
ANR	2021685	IdentifierDeclStatement	"int ret = m_member_table . insert ( member -> get_proc_info ( ) -> pid , member ) ;"	672:1:18885:18954	2021682	0	True				
ANR	2021686	IdentifierDecl	"ret = m_member_table . insert ( member -> get_proc_info ( ) -> pid , member )"		2021682	0					
ANR	2021687	IdentifierDeclType	int		2021682	0					
ANR	2021688	Identifier	ret		2021682	1					
ANR	2021689	AssignmentExpression	"ret = m_member_table . insert ( member -> get_proc_info ( ) -> pid , member )"		2021682	2		=			
ANR	2021690	Identifier	ret		2021682	0					
ANR	2021691	CallExpression	"m_member_table . insert ( member -> get_proc_info ( ) -> pid , member )"		2021682	1					
ANR	2021692	Callee	m_member_table . insert		2021682	0					
ANR	2021693	MemberAccess	m_member_table . insert		2021682	0					
ANR	2021694	Identifier	m_member_table		2021682	0					
ANR	2021695	Identifier	insert		2021682	1					
ANR	2021696	ArgumentList	member -> get_proc_info ( ) -> pid		2021682	1					
ANR	2021697	Argument	member -> get_proc_info ( ) -> pid		2021682	0					
ANR	2021698	PtrMemberAccess	member -> get_proc_info ( ) -> pid		2021682	0					
ANR	2021699	CallExpression	member -> get_proc_info ( )		2021682	0					
ANR	2021700	Callee	member -> get_proc_info		2021682	0					
ANR	2021701	PtrMemberAccess	member -> get_proc_info		2021682	0					
ANR	2021702	Identifier	member		2021682	0					
ANR	2021703	Identifier	get_proc_info		2021682	1					
ANR	2021704	ArgumentList			2021682	1					
ANR	2021705	Identifier	pid		2021682	1					
ANR	2021706	Argument	member		2021682	1					
ANR	2021707	Identifier	member		2021682	0					
ANR	2021708	ExpressionStatement	ASSERT ( ret != - 1 )	673:1:18957:18974	2021682	1	True				
ANR	2021709	CallExpression	ASSERT ( ret != - 1 )		2021682	0					
ANR	2021710	Callee	ASSERT		2021682	0					
ANR	2021711	Identifier	ASSERT		2021682	0					
ANR	2021712	ArgumentList	ret != - 1		2021682	1					
ANR	2021713	Argument	ret != - 1		2021682	0					
ANR	2021714	EqualityExpression	ret != - 1		2021682	0		!=			
ANR	2021715	Identifier	ret		2021682	0					
ANR	2021716	UnaryOperationExpression	- 1		2021682	1					
ANR	2021717	UnaryOperator	-		2021682	0					
ANR	2021718	PrimaryExpression	1		2021682	1					
ANR	2021719	ReturnType	void		2021682	1					
ANR	2021720	Identifier	ProcFamilyMonitor :: add_member		2021682	2					
ANR	2021721	ParameterList	ProcFamilyMember * member		2021682	3					
ANR	2021722	Parameter	ProcFamilyMember * member	670:30:18856:18879	2021682	0	True				
ANR	2021723	ParameterType	ProcFamilyMember *		2021682	0					
ANR	2021724	Identifier	member		2021682	1					
ANR	2021725	CFGEntryNode	ENTRY		2021682		True				
ANR	2021726	CFGExitNode	EXIT		2021682		True				
ANR	2021727	Symbol	ret		2021682						
ANR	2021728	Symbol	member -> get_proc_info		2021682						
ANR	2021729	Symbol	* * member		2021682						
ANR	2021730	Symbol	m_member_table		2021682						
ANR	2021731	Symbol	member		2021682						
ANR	2021732	Symbol	m_member_table . insert		2021682						
ANR	2021733	Symbol	* member -> get_proc_info		2021682						
ANR	2021734	Symbol	* member		2021682						
ANR	2021735	Symbol	member -> get_proc_info ( ) -> pid		2021682						
ANR	2021736	Function	ProcFamilyMonitor :: remove_member	676:0:18979:19129							
ANR	2021737	FunctionDef	ProcFamilyMonitor :: remove_member (ProcFamilyMember * member)		2021736	0					
ANR	2021738	CompoundStatement		678:0:19043:19129	2021736	0					
ANR	2021739	IdentifierDeclStatement	int ret = m_member_table . remove ( member -> get_proc_info ( ) -> pid ) ;	679:1:19046:19107	2021736	0	True				
ANR	2021740	IdentifierDecl	ret = m_member_table . remove ( member -> get_proc_info ( ) -> pid )		2021736	0					
ANR	2021741	IdentifierDeclType	int		2021736	0					
ANR	2021742	Identifier	ret		2021736	1					
ANR	2021743	AssignmentExpression	ret = m_member_table . remove ( member -> get_proc_info ( ) -> pid )		2021736	2		=			
ANR	2021744	Identifier	ret		2021736	0					
ANR	2021745	CallExpression	m_member_table . remove ( member -> get_proc_info ( ) -> pid )		2021736	1					
ANR	2021746	Callee	m_member_table . remove		2021736	0					
ANR	2021747	MemberAccess	m_member_table . remove		2021736	0					
ANR	2021748	Identifier	m_member_table		2021736	0					
ANR	2021749	Identifier	remove		2021736	1					
ANR	2021750	ArgumentList	member -> get_proc_info ( ) -> pid		2021736	1					
ANR	2021751	Argument	member -> get_proc_info ( ) -> pid		2021736	0					
ANR	2021752	PtrMemberAccess	member -> get_proc_info ( ) -> pid		2021736	0					
ANR	2021753	CallExpression	member -> get_proc_info ( )		2021736	0					
ANR	2021754	Callee	member -> get_proc_info		2021736	0					
ANR	2021755	PtrMemberAccess	member -> get_proc_info		2021736	0					
ANR	2021756	Identifier	member		2021736	0					
ANR	2021757	Identifier	get_proc_info		2021736	1					
ANR	2021758	ArgumentList			2021736	1					
ANR	2021759	Identifier	pid		2021736	1					
ANR	2021760	ExpressionStatement	ASSERT ( ret != - 1 )	680:1:19110:19127	2021736	1	True				
ANR	2021761	CallExpression	ASSERT ( ret != - 1 )		2021736	0					
ANR	2021762	Callee	ASSERT		2021736	0					
ANR	2021763	Identifier	ASSERT		2021736	0					
ANR	2021764	ArgumentList	ret != - 1		2021736	1					
ANR	2021765	Argument	ret != - 1		2021736	0					
ANR	2021766	EqualityExpression	ret != - 1		2021736	0		!=			
ANR	2021767	Identifier	ret		2021736	0					
ANR	2021768	UnaryOperationExpression	- 1		2021736	1					
ANR	2021769	UnaryOperator	-		2021736	0					
ANR	2021770	PrimaryExpression	1		2021736	1					
ANR	2021771	ReturnType	void		2021736	1					
ANR	2021772	Identifier	ProcFamilyMonitor :: remove_member		2021736	2					
ANR	2021773	ParameterList	ProcFamilyMember * member		2021736	3					
ANR	2021774	Parameter	ProcFamilyMember * member	677:33:19017:19040	2021736	0	True				
ANR	2021775	ParameterType	ProcFamilyMember *		2021736	0					
ANR	2021776	Identifier	member		2021736	1					
ANR	2021777	CFGEntryNode	ENTRY		2021736		True				
ANR	2021778	CFGExitNode	EXIT		2021736		True				
ANR	2021779	Symbol	ret		2021736						
ANR	2021780	Symbol	member -> get_proc_info		2021736						
ANR	2021781	Symbol	* * member		2021736						
ANR	2021782	Symbol	m_member_table		2021736						
ANR	2021783	Symbol	member		2021736						
ANR	2021784	Symbol	* member -> get_proc_info		2021736						
ANR	2021785	Symbol	* member		2021736						
ANR	2021786	Symbol	member -> get_proc_info ( ) -> pid		2021736						
ANR	2021787	Symbol	m_member_table . remove		2021736						
ANR	2021788	Function	ProcFamilyMonitor :: lookup_member	683:0:19132:19295							
ANR	2021789	FunctionDef	ProcFamilyMonitor :: lookup_member (pid_t pid)		2021788	0					
ANR	2021790	CompoundStatement		685:0:19194:19295	2021788	0					
ANR	2021791	IdentifierDeclStatement	ProcFamilyMember * pm ;	686:1:19197:19217	2021788	0	True				
ANR	2021792	IdentifierDecl	* pm		2021788	0					
ANR	2021793	IdentifierDeclType	ProcFamilyMember *		2021788	0					
ANR	2021794	Identifier	pm		2021788	1					
ANR	2021795	IdentifierDeclStatement	"int ret = m_member_table . lookup ( pid , pm ) ;"	687:1:19220:19260	2021788	1	True				
ANR	2021796	IdentifierDecl	"ret = m_member_table . lookup ( pid , pm )"		2021788	0					
ANR	2021797	IdentifierDeclType	int		2021788	0					
ANR	2021798	Identifier	ret		2021788	1					
ANR	2021799	AssignmentExpression	"ret = m_member_table . lookup ( pid , pm )"		2021788	2		=			
ANR	2021800	Identifier	ret		2021788	0					
ANR	2021801	CallExpression	"m_member_table . lookup ( pid , pm )"		2021788	1					
ANR	2021802	Callee	m_member_table . lookup		2021788	0					
ANR	2021803	MemberAccess	m_member_table . lookup		2021788	0					
ANR	2021804	Identifier	m_member_table		2021788	0					
ANR	2021805	Identifier	lookup		2021788	1					
ANR	2021806	ArgumentList	pid		2021788	1					
ANR	2021807	Argument	pid		2021788	0					
ANR	2021808	Identifier	pid		2021788	0					
ANR	2021809	Argument	pm		2021788	1					
ANR	2021810	Identifier	pm		2021788	0					
ANR	2021811	ReturnStatement	return ( ret != - 1 ) ? pm : NULL ;	688:1:19263:19293	2021788	2	True				
ANR	2021812	ConditionalExpression	( ret != - 1 ) ? pm : NULL		2021788	0					
ANR	2021813	Condition	ret != - 1		2021788	0					
ANR	2021814	EqualityExpression	ret != - 1		2021788	0		!=			
ANR	2021815	Identifier	ret		2021788	0					
ANR	2021816	UnaryOperationExpression	- 1		2021788	1					
ANR	2021817	UnaryOperator	-		2021788	0					
ANR	2021818	PrimaryExpression	1		2021788	1					
ANR	2021819	Identifier	pm		2021788	1					
ANR	2021820	Identifier	NULL		2021788	2					
ANR	2021821	ReturnType	ProcFamilyMember *		2021788	1					
ANR	2021822	Identifier	ProcFamilyMonitor :: lookup_member		2021788	2					
ANR	2021823	ParameterList	pid_t pid		2021788	3					
ANR	2021824	Parameter	pid_t pid	684:33:19183:19191	2021788	0	True				
ANR	2021825	ParameterType	pid_t		2021788	0					
ANR	2021826	Identifier	pid		2021788	1					
ANR	2021827	CFGEntryNode	ENTRY		2021788		True				
ANR	2021828	CFGExitNode	EXIT		2021788		True				
ANR	2021829	Symbol	ret		2021788						
ANR	2021830	Symbol	NULL		2021788						
ANR	2021831	Symbol	m_member_table . lookup		2021788						
ANR	2021832	Symbol	m_member_table		2021788						
ANR	2021833	Symbol	pid		2021788						
ANR	2021834	Symbol	pm		2021788						
ANR	2021835	Function	ProcFamilyMonitor :: add_member_to_family	691:0:19298:21194							
ANR	2021836	FunctionDef	"ProcFamilyMonitor :: add_member_to_family (ProcFamily * pf , procInfo * pi , const char * method_str)"		2021835	0					
ANR	2021837	CompoundStatement		695:0:19477:21194	2021835	0					
ANR	2021838	IdentifierDeclStatement	ProcFamilyMember * pfm ;	698:1:19548:19569	2021835	0	True				
ANR	2021839	IdentifierDecl	* pfm		2021835	0					
ANR	2021840	IdentifierDeclType	ProcFamilyMember *		2021835	0					
ANR	2021841	Identifier	pfm		2021835	1					
ANR	2021842	IdentifierDeclStatement	"int ret = m_member_table . lookup ( pi -> pid , pfm ) ;"	699:1:19572:19617	2021835	1	True				
ANR	2021843	IdentifierDecl	"ret = m_member_table . lookup ( pi -> pid , pfm )"		2021835	0					
ANR	2021844	IdentifierDeclType	int		2021835	0					
ANR	2021845	Identifier	ret		2021835	1					
ANR	2021846	AssignmentExpression	"ret = m_member_table . lookup ( pi -> pid , pfm )"		2021835	2		=			
ANR	2021847	Identifier	ret		2021835	0					
ANR	2021848	CallExpression	"m_member_table . lookup ( pi -> pid , pfm )"		2021835	1					
ANR	2021849	Callee	m_member_table . lookup		2021835	0					
ANR	2021850	MemberAccess	m_member_table . lookup		2021835	0					
ANR	2021851	Identifier	m_member_table		2021835	0					
ANR	2021852	Identifier	lookup		2021835	1					
ANR	2021853	ArgumentList	pi -> pid		2021835	1					
ANR	2021854	Argument	pi -> pid		2021835	0					
ANR	2021855	PtrMemberAccess	pi -> pid		2021835	0					
ANR	2021856	Identifier	pi		2021835	0					
ANR	2021857	Identifier	pid		2021835	1					
ANR	2021858	Argument	pfm		2021835	1					
ANR	2021859	Identifier	pfm		2021835	0					
ANR	2021860	IfStatement	if ( ret == - 1 )		2021835	2					
ANR	2021861	Condition	ret == - 1	700:5:19624:19632	2021835	0	True				
ANR	2021862	EqualityExpression	ret == - 1		2021835	0		==			
ANR	2021863	Identifier	ret		2021835	0					
ANR	2021864	UnaryOperationExpression	- 1		2021835	1					
ANR	2021865	UnaryOperator	-		2021835	0					
ANR	2021866	PrimaryExpression	1		2021835	1					
ANR	2021867	CompoundStatement		6:16:157:157	2021835	1					
ANR	2021868	ExpressionStatement	"dprintf ( D_ALWAYS , ""method %s: found family %u for process %u\\n"" , method_str , pf -> get_root_pid ( ) , pi -> pid )"	705:2:19737:19882	2021835	0	True				
ANR	2021869	CallExpression	"dprintf ( D_ALWAYS , ""method %s: found family %u for process %u\\n"" , method_str , pf -> get_root_pid ( ) , pi -> pid )"		2021835	0					
ANR	2021870	Callee	dprintf		2021835	0					
ANR	2021871	Identifier	dprintf		2021835	0					
ANR	2021872	ArgumentList	D_ALWAYS		2021835	1					
ANR	2021873	Argument	D_ALWAYS		2021835	0					
ANR	2021874	Identifier	D_ALWAYS		2021835	0					
ANR	2021875	Argument	"""method %s: found family %u for process %u\\n"""		2021835	1					
ANR	2021876	PrimaryExpression	"""method %s: found family %u for process %u\\n"""		2021835	0					
ANR	2021877	Argument	method_str		2021835	2					
ANR	2021878	Identifier	method_str		2021835	0					
ANR	2021879	Argument	pf -> get_root_pid ( )		2021835	3					
ANR	2021880	CallExpression	pf -> get_root_pid ( )		2021835	0					
ANR	2021881	Callee	pf -> get_root_pid		2021835	0					
ANR	2021882	PtrMemberAccess	pf -> get_root_pid		2021835	0					
ANR	2021883	Identifier	pf		2021835	0					
ANR	2021884	Identifier	get_root_pid		2021835	1					
ANR	2021885	ArgumentList			2021835	1					
ANR	2021886	Argument	pi -> pid		2021835	4					
ANR	2021887	PtrMemberAccess	pi -> pid		2021835	0					
ANR	2021888	Identifier	pi		2021835	0					
ANR	2021889	Identifier	pid		2021835	1					
ANR	2021890	ExpressionStatement	pf -> add_member ( pi )	710:2:19886:19904	2021835	1	True				
ANR	2021891	CallExpression	pf -> add_member ( pi )		2021835	0					
ANR	2021892	Callee	pf -> add_member		2021835	0					
ANR	2021893	PtrMemberAccess	pf -> add_member		2021835	0					
ANR	2021894	Identifier	pf		2021835	0					
ANR	2021895	Identifier	add_member		2021835	1					
ANR	2021896	ArgumentList	pi		2021835	1					
ANR	2021897	Argument	pi		2021835	0					
ANR	2021898	Identifier	pi		2021835	0					
ANR	2021899	ReturnStatement	return true ;	711:2:19908:19919	2021835	2	True				
ANR	2021900	Identifier	true		2021835	0					
ANR	2021901	ElseStatement	else		2021835	0					
ANR	2021902	IfStatement	if ( pf != pfm -> get_proc_family ( ) )		2021835	0					
ANR	2021903	Condition	pf != pfm -> get_proc_family ( )	713:10:19934:19961	2021835	0	True				
ANR	2021904	EqualityExpression	pf != pfm -> get_proc_family ( )		2021835	0		!=			
ANR	2021905	Identifier	pf		2021835	0					
ANR	2021906	CallExpression	pfm -> get_proc_family ( )		2021835	1					
ANR	2021907	Callee	pfm -> get_proc_family		2021835	0					
ANR	2021908	PtrMemberAccess	pfm -> get_proc_family		2021835	0					
ANR	2021909	Identifier	pfm		2021835	0					
ANR	2021910	Identifier	get_proc_family		2021835	1					
ANR	2021911	ArgumentList			2021835	1					
ANR	2021912	CompoundStatement		26:2:701:760	2021835	1					
ANR	2021913	IdentifierDeclStatement	Tree < ProcFamily * > * node = lookup_family ( pf -> get_root_pid ( ) ) ;	720:2:20179:20238	2021835	0	True				
ANR	2021914	IdentifierDecl	* node = lookup_family ( pf -> get_root_pid ( ) )		2021835	0					
ANR	2021915	IdentifierDeclType	Tree < ProcFamily * > *		2021835	0					
ANR	2021916	Identifier	node		2021835	1					
ANR	2021917	AssignmentExpression	* node = lookup_family ( pf -> get_root_pid ( ) )		2021835	2		=			
ANR	2021918	Identifier	node		2021835	0					
ANR	2021919	CallExpression	lookup_family ( pf -> get_root_pid ( ) )		2021835	1					
ANR	2021920	Callee	lookup_family		2021835	0					
ANR	2021921	Identifier	lookup_family		2021835	0					
ANR	2021922	ArgumentList	pf -> get_root_pid ( )		2021835	1					
ANR	2021923	Argument	pf -> get_root_pid ( )		2021835	0					
ANR	2021924	CallExpression	pf -> get_root_pid ( )		2021835	0					
ANR	2021925	Callee	pf -> get_root_pid		2021835	0					
ANR	2021926	PtrMemberAccess	pf -> get_root_pid		2021835	0					
ANR	2021927	Identifier	pf		2021835	0					
ANR	2021928	Identifier	get_root_pid		2021835	1					
ANR	2021929	ArgumentList			2021835	1					
ANR	2021930	ExpressionStatement	ASSERT ( node != NULL )	721:2:20242:20262	2021835	1	True				
ANR	2021931	CallExpression	ASSERT ( node != NULL )		2021835	0					
ANR	2021932	Callee	ASSERT		2021835	0					
ANR	2021933	Identifier	ASSERT		2021835	0					
ANR	2021934	ArgumentList	node != NULL		2021835	1					
ANR	2021935	Argument	node != NULL		2021835	0					
ANR	2021936	EqualityExpression	node != NULL		2021835	0		!=			
ANR	2021937	Identifier	node		2021835	0					
ANR	2021938	Identifier	NULL		2021835	1					
ANR	2021939	WhileStatement	while ( node -> get_parent ( ) != NULL )		2021835	2					
ANR	2021940	Condition	node -> get_parent ( ) != NULL	722:8:20272:20297	2021835	0	True				
ANR	2021941	EqualityExpression	node -> get_parent ( ) != NULL		2021835	0		!=			
ANR	2021942	CallExpression	node -> get_parent ( )		2021835	0					
ANR	2021943	Callee	node -> get_parent		2021835	0					
ANR	2021944	PtrMemberAccess	node -> get_parent		2021835	0					
ANR	2021945	Identifier	node		2021835	0					
ANR	2021946	Identifier	get_parent		2021835	1					
ANR	2021947	ArgumentList			2021835	1					
ANR	2021948	Identifier	NULL		2021835	1					
ANR	2021949	CompoundStatement		28:36:822:822	2021835	1					
ANR	2021950	ExpressionStatement	node = node -> get_parent ( )	723:3:20305:20330	2021835	0	True				
ANR	2021951	AssignmentExpression	node = node -> get_parent ( )		2021835	0		=			
ANR	2021952	Identifier	node		2021835	0					
ANR	2021953	CallExpression	node -> get_parent ( )		2021835	1					
ANR	2021954	Callee	node -> get_parent		2021835	0					
ANR	2021955	PtrMemberAccess	node -> get_parent		2021835	0					
ANR	2021956	Identifier	node		2021835	0					
ANR	2021957	Identifier	get_parent		2021835	1					
ANR	2021958	ArgumentList			2021835	1					
ANR	2021959	IfStatement	if ( node -> get_data ( ) == pfm -> get_proc_family ( ) )		2021835	1					
ANR	2021960	Condition	node -> get_data ( ) == pfm -> get_proc_family ( )	724:7:20339:20380	2021835	0	True				
ANR	2021961	EqualityExpression	node -> get_data ( ) == pfm -> get_proc_family ( )		2021835	0		==			
ANR	2021962	CallExpression	node -> get_data ( )		2021835	0					
ANR	2021963	Callee	node -> get_data		2021835	0					
ANR	2021964	PtrMemberAccess	node -> get_data		2021835	0					
ANR	2021965	Identifier	node		2021835	0					
ANR	2021966	Identifier	get_data		2021835	1					
ANR	2021967	ArgumentList			2021835	1					
ANR	2021968	CallExpression	pfm -> get_proc_family ( )		2021835	1					
ANR	2021969	Callee	pfm -> get_proc_family		2021835	0					
ANR	2021970	PtrMemberAccess	pfm -> get_proc_family		2021835	0					
ANR	2021971	Identifier	pfm		2021835	0					
ANR	2021972	Identifier	get_proc_family		2021835	1					
ANR	2021973	ArgumentList			2021835	1					
ANR	2021974	CompoundStatement		30:51:905:905	2021835	1					
ANR	2021975	Statement	dprintf	725:4:20389:20395	2021835	0	True				
ANR	2021976	Statement	(	725:11:20396:20396	2021835	1	True				
ANR	2021977	Statement	D_ALWAYS	725:12:20397:20404	2021835	2	True				
ANR	2021978	Statement	","	725:20:20405:20405	2021835	3	True				
ANR	2021979	Statement	"""method %s: found family %u for process %u """	726:12:20419:20462	2021835	4	True				
ANR	2021980	Statement	"""(more specific than current family %u)\\n"""	727:13:20477:20518	2021835	5	True				
ANR	2021981	Statement	","	727:55:20519:20519	2021835	6	True				
ANR	2021982	Statement	method_str	728:12:20533:20542	2021835	7	True				
ANR	2021983	Statement	","	728:22:20543:20543	2021835	8	True				
ANR	2021984	Statement	pf	729:12:20557:20558	2021835	9	True				
ANR	2021985	Statement	->	729:14:20559:20560	2021835	10	True				
ANR	2021986	Statement	get_root_pid	729:16:20561:20572	2021835	11	True				
ANR	2021987	Statement	(	729:28:20573:20573	2021835	12	True				
ANR	2021988	Statement	)	729:29:20574:20574	2021835	13	True				
ANR	2021989	Statement	","	729:30:20575:20575	2021835	14	True				
ANR	2021990	Statement	pi	730:12:20589:20590	2021835	15	True				
ANR	2021991	Statement	->	730:14:20591:20592	2021835	16	True				
ANR	2021992	Statement	pid	730:16:20593:20595	2021835	17	True				
ANR	2021993	Statement	","	730:19:20596:20596	2021835	18	True				
ANR	2021994	Statement	pfm	731:12:20610:20612	2021835	19	True				
ANR	2021995	Statement	->	731:15:20613:20614	2021835	20	True				
ANR	2021996	Statement	get_proc_family	731:17:20615:20629	2021835	21	True				
ANR	2021997	Statement	(	731:32:20630:20630	2021835	22	True				
ANR	2021998	Statement	)	731:33:20631:20631	2021835	23	True				
ANR	2021999	Statement	->	731:34:20632:20633	2021835	24	True				
ANR	2022000	Statement	get_root_pid	731:36:20634:20645	2021835	25	True				
ANR	2022001	Statement	(	731:48:20646:20646	2021835	26	True				
ANR	2022002	Statement	)	731:49:20647:20647	2021835	27	True				
ANR	2022003	Statement	)	731:50:20648:20648	2021835	28	True				
ANR	2022004	ExpressionStatement		731:51:20649:20649	2021835	29	True				
ANR	2022005	ExpressionStatement	pfm -> move_to_subfamily ( pf )	732:4:20655:20681	2021835	30	True				
ANR	2022006	CallExpression	pfm -> move_to_subfamily ( pf )		2021835	0					
ANR	2022007	Callee	pfm -> move_to_subfamily		2021835	0					
ANR	2022008	PtrMemberAccess	pfm -> move_to_subfamily		2021835	0					
ANR	2022009	Identifier	pfm		2021835	0					
ANR	2022010	Identifier	move_to_subfamily		2021835	1					
ANR	2022011	ArgumentList	pf		2021835	1					
ANR	2022012	Argument	pf		2021835	0					
ANR	2022013	Identifier	pf		2021835	0					
ANR	2022014	ReturnStatement	return true ;	733:4:20687:20698	2021835	31	True				
ANR	2022015	Identifier	true		2021835	0					
ANR	2022016	Statement	dprintf	737:2:20712:20718	2021835	3	True				
ANR	2022017	Statement	(	737:9:20719:20719	2021835	4	True				
ANR	2022018	Statement	D_ALWAYS	737:10:20720:20727	2021835	5	True				
ANR	2022019	Statement	","	737:18:20728:20728	2021835	6	True				
ANR	2022020	Statement	"""method %s: found family %u for process %u """	738:10:20740:20783	2021835	7	True				
ANR	2022021	Statement	"""(less specific - ignoring)\\n"""	739:11:20796:20825	2021835	8	True				
ANR	2022022	Statement	","	739:41:20826:20826	2021835	9	True				
ANR	2022023	Statement	method_str	740:10:20838:20847	2021835	10	True				
ANR	2022024	Statement	","	740:20:20848:20848	2021835	11	True				
ANR	2022025	Statement	pf	741:10:20860:20861	2021835	12	True				
ANR	2022026	Statement	->	741:12:20862:20863	2021835	13	True				
ANR	2022027	Statement	get_root_pid	741:14:20864:20875	2021835	14	True				
ANR	2022028	Statement	(	741:26:20876:20876	2021835	15	True				
ANR	2022029	Statement	)	741:27:20877:20877	2021835	16	True				
ANR	2022030	Statement	","	741:28:20878:20878	2021835	17	True				
ANR	2022031	Statement	pi	742:10:20890:20891	2021835	18	True				
ANR	2022032	Statement	->	742:12:20892:20893	2021835	19	True				
ANR	2022033	Statement	pid	742:14:20894:20896	2021835	20	True				
ANR	2022034	Statement	)	742:17:20897:20897	2021835	21	True				
ANR	2022035	ExpressionStatement		742:18:20898:20898	2021835	22	True				
ANR	2022036	ReturnStatement	return false ;	743:2:20902:20914	2021835	23	True				
ANR	2022037	Identifier	false		2021835	0					
ANR	2022038	ElseStatement	else		2021835	0					
ANR	2022039	CompoundStatement		51:6:1447:1447	2021835	0					
ANR	2022040	Statement	dprintf	749:2:20993:20999	2021835	0	True				
ANR	2022041	Statement	(	749:9:21000:21000	2021835	1	True				
ANR	2022042	Statement	D_ALWAYS	749:10:21001:21008	2021835	2	True				
ANR	2022043	Statement	","	749:18:21009:21009	2021835	3	True				
ANR	2022044	Statement	"""method %s: found family %u for process %u """	750:10:21021:21064	2021835	4	True				
ANR	2022045	Statement	"""(already determined)\\n"""	751:11:21077:21100	2021835	5	True				
ANR	2022046	Statement	","	751:35:21101:21101	2021835	6	True				
ANR	2022047	Statement	method_str	752:10:21113:21122	2021835	7	True				
ANR	2022048	Statement	","	752:20:21123:21123	2021835	8	True				
ANR	2022049	Statement	pf	753:10:21135:21136	2021835	9	True				
ANR	2022050	Statement	->	753:12:21137:21138	2021835	10	True				
ANR	2022051	Statement	get_root_pid	753:14:21139:21150	2021835	11	True				
ANR	2022052	Statement	(	753:26:21151:21151	2021835	12	True				
ANR	2022053	Statement	)	753:27:21152:21152	2021835	13	True				
ANR	2022054	Statement	","	753:28:21153:21153	2021835	14	True				
ANR	2022055	Statement	pi	754:10:21165:21166	2021835	15	True				
ANR	2022056	Statement	->	754:12:21167:21168	2021835	16	True				
ANR	2022057	Statement	pid	754:14:21169:21171	2021835	17	True				
ANR	2022058	Statement	)	754:17:21172:21172	2021835	18	True				
ANR	2022059	ExpressionStatement		754:18:21173:21173	2021835	19	True				
ANR	2022060	ReturnStatement	return false ;	755:2:21177:21189	2021835	20	True				
ANR	2022061	Identifier	false		2021835	0					
ANR	2022062	ReturnType	bool		2021835	1					
ANR	2022063	Identifier	ProcFamilyMonitor :: add_member_to_family		2021835	2					
ANR	2022064	ParameterList	"ProcFamily * pf , procInfo * pi , const char * method_str"		2021835	3					
ANR	2022065	Parameter	ProcFamily * pf	692:40:19343:19356	2021835	0	True				
ANR	2022066	ParameterType	ProcFamily *		2021835	0					
ANR	2022067	Identifier	pf		2021835	1					
ANR	2022068	Parameter	procInfo * pi	693:40:19399:19410	2021835	1	True				
ANR	2022069	ParameterType	procInfo *		2021835	0					
ANR	2022070	Identifier	pi		2021835	1					
ANR	2022071	Parameter	const char * method_str	694:40:19453:19474	2021835	2	True				
ANR	2022072	ParameterType	const char *		2021835	0					
ANR	2022073	Identifier	method_str		2021835	1					
ANR	2022074	CFGEntryNode	ENTRY		2021835		True				
ANR	2022075	CFGExitNode	EXIT		2021835		True				
ANR	2022076	Symbol	ret		2021835						
ANR	2022077	Symbol	* pfm		2021835						
ANR	2022078	Symbol	NULL		2021835						
ANR	2022079	Symbol	pf -> get_root_pid		2021835						
ANR	2022080	Symbol	D_ALWAYS		2021835						
ANR	2022081	Symbol	false		2021835						
ANR	2022082	Symbol	node -> get_data		2021835						
ANR	2022083	Symbol	node -> get_parent		2021835						
ANR	2022084	Symbol	node		2021835						
ANR	2022085	Symbol	lookup_family		2021835						
ANR	2022086	Symbol	pi -> pid		2021835						
ANR	2022087	Symbol	m_member_table . lookup		2021835						
ANR	2022088	Symbol	pfm -> get_proc_family		2021835						
ANR	2022089	Symbol	pf		2021835						
ANR	2022090	Symbol	pfm		2021835						
ANR	2022091	Symbol	m_member_table		2021835						
ANR	2022092	Symbol	true		2021835						
ANR	2022093	Symbol	pi		2021835						
ANR	2022094	Symbol	* node		2021835						
ANR	2022095	Symbol	* pi		2021835						
ANR	2022096	Symbol	method_str		2021835						
ANR	2022097	Symbol	* pf		2021835						
ANR	2022098	Function	ProcFamilyMonitor :: get_snapshot_interval	759:0:21197:21723							
ANR	2022099	FunctionDef	ProcFamilyMonitor :: get_snapshot_interval (Tree < ProcFamily * > * tree)		2022098	0					
ANR	2022100	CompoundStatement		761:0:21267:21723	2022098	0					
ANR	2022101	IdentifierDeclStatement	int ret_value = tree -> get_data ( ) -> get_max_snapshot_interval ( ) ;	764:1:21326:21387	2022098	0	True				
ANR	2022102	IdentifierDecl	ret_value = tree -> get_data ( ) -> get_max_snapshot_interval ( )		2022098	0					
ANR	2022103	IdentifierDeclType	int		2022098	0					
ANR	2022104	Identifier	ret_value		2022098	1					
ANR	2022105	AssignmentExpression	ret_value = tree -> get_data ( ) -> get_max_snapshot_interval ( )		2022098	2		=			
ANR	2022106	Identifier	ret_value		2022098	0					
ANR	2022107	CallExpression	tree -> get_data ( ) -> get_max_snapshot_interval ( )		2022098	1					
ANR	2022108	Callee	tree -> get_data ( ) -> get_max_snapshot_interval		2022098	0					
ANR	2022109	PtrMemberAccess	tree -> get_data ( ) -> get_max_snapshot_interval		2022098	0					
ANR	2022110	CallExpression	tree -> get_data ( )		2022098	0					
ANR	2022111	Callee	tree -> get_data		2022098	0					
ANR	2022112	PtrMemberAccess	tree -> get_data		2022098	0					
ANR	2022113	Identifier	tree		2022098	0					
ANR	2022114	Identifier	get_data		2022098	1					
ANR	2022115	ArgumentList			2022098	1					
ANR	2022116	Identifier	get_max_snapshot_interval		2022098	1					
ANR	2022117	ArgumentList			2022098	1					
ANR	2022118	IdentifierDeclStatement	Tree < ProcFamily * > * child = tree -> get_child ( ) ;	768:1:21420:21464	2022098	1	True				
ANR	2022119	IdentifierDecl	* child = tree -> get_child ( )		2022098	0					
ANR	2022120	IdentifierDeclType	Tree < ProcFamily * > *		2022098	0					
ANR	2022121	Identifier	child		2022098	1					
ANR	2022122	AssignmentExpression	* child = tree -> get_child ( )		2022098	2		=			
ANR	2022123	Identifier	child		2022098	0					
ANR	2022124	CallExpression	tree -> get_child ( )		2022098	1					
ANR	2022125	Callee	tree -> get_child		2022098	0					
ANR	2022126	PtrMemberAccess	tree -> get_child		2022098	0					
ANR	2022127	Identifier	tree		2022098	0					
ANR	2022128	Identifier	get_child		2022098	1					
ANR	2022129	ArgumentList			2022098	1					
ANR	2022130	WhileStatement	while ( child != NULL )		2022098	2					
ANR	2022131	Condition	child != NULL	769:8:21474:21486	2022098	0	True				
ANR	2022132	EqualityExpression	child != NULL		2022098	0		!=			
ANR	2022133	Identifier	child		2022098	0					
ANR	2022134	Identifier	NULL		2022098	1					
ANR	2022135	CompoundStatement		10:2:225:271	2022098	1					
ANR	2022136	IdentifierDeclStatement	int child_value = get_snapshot_interval ( child ) ;	770:2:21493:21539	2022098	0	True				
ANR	2022137	IdentifierDecl	child_value = get_snapshot_interval ( child )		2022098	0					
ANR	2022138	IdentifierDeclType	int		2022098	0					
ANR	2022139	Identifier	child_value		2022098	1					
ANR	2022140	AssignmentExpression	child_value = get_snapshot_interval ( child )		2022098	2		=			
ANR	2022141	Identifier	child_value		2022098	0					
ANR	2022142	CallExpression	get_snapshot_interval ( child )		2022098	1					
ANR	2022143	Callee	get_snapshot_interval		2022098	0					
ANR	2022144	Identifier	get_snapshot_interval		2022098	0					
ANR	2022145	ArgumentList	child		2022098	1					
ANR	2022146	Argument	child		2022098	0					
ANR	2022147	Identifier	child		2022098	0					
ANR	2022148	IfStatement	if ( ret_value == - 1 )		2022098	1					
ANR	2022149	Condition	ret_value == - 1	771:6:21547:21561	2022098	0	True				
ANR	2022150	EqualityExpression	ret_value == - 1		2022098	0		==			
ANR	2022151	Identifier	ret_value		2022098	0					
ANR	2022152	UnaryOperationExpression	- 1		2022098	1					
ANR	2022153	UnaryOperator	-		2022098	0					
ANR	2022154	PrimaryExpression	1		2022098	1					
ANR	2022155	CompoundStatement		11:23:296:296	2022098	1					
ANR	2022156	ExpressionStatement	ret_value = child_value	772:3:21569:21592	2022098	0	True				
ANR	2022157	AssignmentExpression	ret_value = child_value		2022098	0		=			
ANR	2022158	Identifier	ret_value		2022098	0					
ANR	2022159	Identifier	child_value		2022098	1					
ANR	2022160	ElseStatement	else		2022098	0					
ANR	2022161	IfStatement	if ( child_value < ret_value )		2022098	0					
ANR	2022162	Condition	child_value < ret_value	774:11:21609:21631	2022098	0	True				
ANR	2022163	RelationalExpression	child_value < ret_value		2022098	0		<			
ANR	2022164	Identifier	child_value		2022098	0					
ANR	2022165	Identifier	ret_value		2022098	1					
ANR	2022166	CompoundStatement		14:36:366:366	2022098	1					
ANR	2022167	ExpressionStatement	ret_value = child_value	775:3:21639:21662	2022098	0	True				
ANR	2022168	AssignmentExpression	ret_value = child_value		2022098	0		=			
ANR	2022169	Identifier	ret_value		2022098	0					
ANR	2022170	Identifier	child_value		2022098	1					
ANR	2022171	ExpressionStatement	child = child -> get_sibling ( )	777:2:21670:21698	2022098	2	True				
ANR	2022172	AssignmentExpression	child = child -> get_sibling ( )		2022098	0		=			
ANR	2022173	Identifier	child		2022098	0					
ANR	2022174	CallExpression	child -> get_sibling ( )		2022098	1					
ANR	2022175	Callee	child -> get_sibling		2022098	0					
ANR	2022176	PtrMemberAccess	child -> get_sibling		2022098	0					
ANR	2022177	Identifier	child		2022098	0					
ANR	2022178	Identifier	get_sibling		2022098	1					
ANR	2022179	ArgumentList			2022098	1					
ANR	2022180	ReturnStatement	return ret_value ;	780:1:21705:21721	2022098	3	True				
ANR	2022181	Identifier	ret_value		2022098	0					
ANR	2022182	ReturnType	int		2022098	1					
ANR	2022183	Identifier	ProcFamilyMonitor :: get_snapshot_interval		2022098	2					
ANR	2022184	ParameterList	Tree < ProcFamily * > * tree		2022098	3					
ANR	2022185	Parameter	Tree < ProcFamily * > * tree	760:41:21242:21264	2022098	0	True				
ANR	2022186	ParameterType	Tree < ProcFamily * > *		2022098	0					
ANR	2022187	Identifier	tree		2022098	1					
ANR	2022188	CFGEntryNode	ENTRY		2022098		True				
ANR	2022189	CFGExitNode	EXIT		2022098		True				
ANR	2022190	Symbol	tree -> get_data ( ) -> get_max_snapshot_interval		2022098						
ANR	2022191	Symbol	child_value		2022098						
ANR	2022192	Symbol	* tree -> get_data		2022098						
ANR	2022193	Symbol	* child		2022098						
ANR	2022194	Symbol	NULL		2022098						
ANR	2022195	Symbol	tree		2022098						
ANR	2022196	Symbol	tree -> get_data		2022098						
ANR	2022197	Symbol	child -> get_sibling		2022098						
ANR	2022198	Symbol	* tree		2022098						
ANR	2022199	Symbol	* * tree		2022098						
ANR	2022200	Symbol	get_snapshot_interval		2022098						
ANR	2022201	Symbol	ret_value		2022098						
ANR	2022202	Symbol	tree -> get_child		2022098						
ANR	2022203	Symbol	child		2022098						
ANR	2022204	Function	ProcFamilyMonitor :: update_max_image_sizes	783:0:21726:22265							
ANR	2022205	FunctionDef	ProcFamilyMonitor :: update_max_image_sizes (Tree < ProcFamily * > * tree)		2022204	0					
ANR	2022206	CompoundStatement		785:0:21807:22265	2022204	0					
ANR	2022207	IdentifierDeclStatement	unsigned long sum = 0 ;	789:1:21890:21911	2022204	0	True				
ANR	2022208	IdentifierDecl	sum = 0		2022204	0					
ANR	2022209	IdentifierDeclType	unsigned long		2022204	0					
ANR	2022210	Identifier	sum		2022204	1					
ANR	2022211	AssignmentExpression	sum = 0		2022204	2		=			
ANR	2022212	Identifier	sum		2022204	0					
ANR	2022213	PrimaryExpression	0		2022204	1					
ANR	2022214	IdentifierDeclStatement	Tree < ProcFamily * > * child = tree -> get_child ( ) ;	790:1:21914:21958	2022204	1	True				
ANR	2022215	IdentifierDecl	* child = tree -> get_child ( )		2022204	0					
ANR	2022216	IdentifierDeclType	Tree < ProcFamily * > *		2022204	0					
ANR	2022217	Identifier	child		2022204	1					
ANR	2022218	AssignmentExpression	* child = tree -> get_child ( )		2022204	2		=			
ANR	2022219	Identifier	child		2022204	0					
ANR	2022220	CallExpression	tree -> get_child ( )		2022204	1					
ANR	2022221	Callee	tree -> get_child		2022204	0					
ANR	2022222	PtrMemberAccess	tree -> get_child		2022204	0					
ANR	2022223	Identifier	tree		2022204	0					
ANR	2022224	Identifier	get_child		2022204	1					
ANR	2022225	ArgumentList			2022204	1					
ANR	2022226	WhileStatement	while ( child != NULL )		2022204	2					
ANR	2022227	Condition	child != NULL	791:8:21968:21980	2022204	0	True				
ANR	2022228	EqualityExpression	child != NULL		2022204	0		!=			
ANR	2022229	Identifier	child		2022204	0					
ANR	2022230	Identifier	NULL		2022204	1					
ANR	2022231	CompoundStatement		7:23:175:175	2022204	1					
ANR	2022232	ExpressionStatement	sum += update_max_image_sizes ( child )	792:2:21987:22023	2022204	0	True				
ANR	2022233	AssignmentExpression	sum += update_max_image_sizes ( child )		2022204	0		+=			
ANR	2022234	Identifier	sum		2022204	0					
ANR	2022235	CallExpression	update_max_image_sizes ( child )		2022204	1					
ANR	2022236	Callee	update_max_image_sizes		2022204	0					
ANR	2022237	Identifier	update_max_image_sizes		2022204	0					
ANR	2022238	ArgumentList	child		2022204	1					
ANR	2022239	Argument	child		2022204	0					
ANR	2022240	Identifier	child		2022204	0					
ANR	2022241	ExpressionStatement	child = child -> get_sibling ( )	793:2:22027:22055	2022204	1	True				
ANR	2022242	AssignmentExpression	child = child -> get_sibling ( )		2022204	0		=			
ANR	2022243	Identifier	child		2022204	0					
ANR	2022244	CallExpression	child -> get_sibling ( )		2022204	1					
ANR	2022245	Callee	child -> get_sibling		2022204	0					
ANR	2022246	PtrMemberAccess	child -> get_sibling		2022204	0					
ANR	2022247	Identifier	child		2022204	0					
ANR	2022248	Identifier	get_sibling		2022204	1					
ANR	2022249	ArgumentList			2022204	1					
ANR	2022250	ReturnStatement	return tree -> get_data ( ) -> update_max_image_size ( sum ) ;	800:1:22212:22263	2022204	3	True				
ANR	2022251	CallExpression	tree -> get_data ( ) -> update_max_image_size ( sum )		2022204	0					
ANR	2022252	Callee	tree -> get_data ( ) -> update_max_image_size		2022204	0					
ANR	2022253	PtrMemberAccess	tree -> get_data ( ) -> update_max_image_size		2022204	0					
ANR	2022254	CallExpression	tree -> get_data ( )		2022204	0					
ANR	2022255	Callee	tree -> get_data		2022204	0					
ANR	2022256	PtrMemberAccess	tree -> get_data		2022204	0					
ANR	2022257	Identifier	tree		2022204	0					
ANR	2022258	Identifier	get_data		2022204	1					
ANR	2022259	ArgumentList			2022204	1					
ANR	2022260	Identifier	update_max_image_size		2022204	1					
ANR	2022261	ArgumentList	sum		2022204	1					
ANR	2022262	Argument	sum		2022204	0					
ANR	2022263	Identifier	sum		2022204	0					
ANR	2022264	ReturnType	unsigned long		2022204	1					
ANR	2022265	Identifier	ProcFamilyMonitor :: update_max_image_sizes		2022204	2					
ANR	2022266	ParameterList	Tree < ProcFamily * > * tree		2022204	3					
ANR	2022267	Parameter	Tree < ProcFamily * > * tree	784:42:21782:21804	2022204	0	True				
ANR	2022268	ParameterType	Tree < ProcFamily * > *		2022204	0					
ANR	2022269	Identifier	tree		2022204	1					
ANR	2022270	CFGEntryNode	ENTRY		2022204		True				
ANR	2022271	CFGExitNode	EXIT		2022204		True				
ANR	2022272	Symbol	* child		2022204						
ANR	2022273	Symbol	* tree -> get_data		2022204						
ANR	2022274	Symbol	NULL		2022204						
ANR	2022275	Symbol	tree		2022204						
ANR	2022276	Symbol	tree -> get_data		2022204						
ANR	2022277	Symbol	sum		2022204						
ANR	2022278	Symbol	child -> get_sibling		2022204						
ANR	2022279	Symbol	tree -> get_data ( ) -> update_max_image_size		2022204						
ANR	2022280	Symbol	* tree		2022204						
ANR	2022281	Symbol	update_max_image_sizes		2022204						
ANR	2022282	Symbol	* * tree		2022204						
ANR	2022283	Symbol	tree -> get_child		2022204						
ANR	2022284	Symbol	child		2022204						
ANR	2022285	Function	ProcFamilyMonitor :: get_family_usage	803:0:22268:22614							
ANR	2022286	FunctionDef	"ProcFamilyMonitor :: get_family_usage (Tree < ProcFamily * > * tree , ProcFamilyUsage * usage)"		2022285	0					
ANR	2022287	CompoundStatement		805:0:22358:22614	2022285	0					
ANR	2022288	ExpressionStatement	tree -> get_data ( ) -> aggregate_usage ( usage )	808:1:22402:22442	2022285	0	True				
ANR	2022289	CallExpression	tree -> get_data ( ) -> aggregate_usage ( usage )		2022285	0					
ANR	2022290	Callee	tree -> get_data ( ) -> aggregate_usage		2022285	0					
ANR	2022291	PtrMemberAccess	tree -> get_data ( ) -> aggregate_usage		2022285	0					
ANR	2022292	CallExpression	tree -> get_data ( )		2022285	0					
ANR	2022293	Callee	tree -> get_data		2022285	0					
ANR	2022294	PtrMemberAccess	tree -> get_data		2022285	0					
ANR	2022295	Identifier	tree		2022285	0					
ANR	2022296	Identifier	get_data		2022285	1					
ANR	2022297	ArgumentList			2022285	1					
ANR	2022298	Identifier	aggregate_usage		2022285	1					
ANR	2022299	ArgumentList	usage		2022285	1					
ANR	2022300	Argument	usage		2022285	0					
ANR	2022301	Identifier	usage		2022285	0					
ANR	2022302	IdentifierDeclStatement	Tree < ProcFamily * > * child = tree -> get_child ( ) ;	812:1:22474:22518	2022285	1	True				
ANR	2022303	IdentifierDecl	* child = tree -> get_child ( )		2022285	0					
ANR	2022304	IdentifierDeclType	Tree < ProcFamily * > *		2022285	0					
ANR	2022305	Identifier	child		2022285	1					
ANR	2022306	AssignmentExpression	* child = tree -> get_child ( )		2022285	2		=			
ANR	2022307	Identifier	child		2022285	0					
ANR	2022308	CallExpression	tree -> get_child ( )		2022285	1					
ANR	2022309	Callee	tree -> get_child		2022285	0					
ANR	2022310	PtrMemberAccess	tree -> get_child		2022285	0					
ANR	2022311	Identifier	tree		2022285	0					
ANR	2022312	Identifier	get_child		2022285	1					
ANR	2022313	ArgumentList			2022285	1					
ANR	2022314	WhileStatement	while ( child != NULL )		2022285	2					
ANR	2022315	Condition	child != NULL	813:8:22528:22540	2022285	0	True				
ANR	2022316	EqualityExpression	child != NULL		2022285	0		!=			
ANR	2022317	Identifier	child		2022285	0					
ANR	2022318	Identifier	NULL		2022285	1					
ANR	2022319	CompoundStatement		9:23:184:184	2022285	1					
ANR	2022320	ExpressionStatement	"get_family_usage ( child , usage )"	814:2:22547:22577	2022285	0	True				
ANR	2022321	CallExpression	"get_family_usage ( child , usage )"		2022285	0					
ANR	2022322	Callee	get_family_usage		2022285	0					
ANR	2022323	Identifier	get_family_usage		2022285	0					
ANR	2022324	ArgumentList	child		2022285	1					
ANR	2022325	Argument	child		2022285	0					
ANR	2022326	Identifier	child		2022285	0					
ANR	2022327	Argument	usage		2022285	1					
ANR	2022328	Identifier	usage		2022285	0					
ANR	2022329	ExpressionStatement	child = child -> get_sibling ( )	815:2:22581:22609	2022285	1	True				
ANR	2022330	AssignmentExpression	child = child -> get_sibling ( )		2022285	0		=			
ANR	2022331	Identifier	child		2022285	0					
ANR	2022332	CallExpression	child -> get_sibling ( )		2022285	1					
ANR	2022333	Callee	child -> get_sibling		2022285	0					
ANR	2022334	PtrMemberAccess	child -> get_sibling		2022285	0					
ANR	2022335	Identifier	child		2022285	0					
ANR	2022336	Identifier	get_sibling		2022285	1					
ANR	2022337	ArgumentList			2022285	1					
ANR	2022338	ReturnType	void		2022285	1					
ANR	2022339	Identifier	ProcFamilyMonitor :: get_family_usage		2022285	2					
ANR	2022340	ParameterList	"Tree < ProcFamily * > * tree , ProcFamilyUsage * usage"		2022285	3					
ANR	2022341	Parameter	Tree < ProcFamily * > * tree	804:36:22309:22331	2022285	0	True				
ANR	2022342	ParameterType	Tree < ProcFamily * > *		2022285	0					
ANR	2022343	Identifier	tree		2022285	1					
ANR	2022344	Parameter	ProcFamilyUsage * usage	804:61:22334:22355	2022285	1	True				
ANR	2022345	ParameterType	ProcFamilyUsage *		2022285	0					
ANR	2022346	Identifier	usage		2022285	1					
ANR	2022347	CFGEntryNode	ENTRY		2022285		True				
ANR	2022348	CFGExitNode	EXIT		2022285		True				
ANR	2022349	Symbol	* tree		2022285						
ANR	2022350	Symbol	* child		2022285						
ANR	2022351	Symbol	NULL		2022285						
ANR	2022352	Symbol	usage		2022285						
ANR	2022353	Symbol	tree		2022285						
ANR	2022354	Symbol	tree -> get_data		2022285						
ANR	2022355	Symbol	tree -> get_child		2022285						
ANR	2022356	Symbol	child -> get_sibling		2022285						
ANR	2022357	Symbol	child		2022285						
ANR	2022358	Function	ProcFamilyMonitor :: signal_family	819:0:22617:22920							
ANR	2022359	FunctionDef	"ProcFamilyMonitor :: signal_family (Tree < ProcFamily * > * tree , int sig)"		2022358	0					
ANR	2022360	CompoundStatement		821:0:22689:22920	2022358	0					
ANR	2022361	ExpressionStatement	tree -> get_data ( ) -> spree ( sig )	824:1:22725:22753	2022358	0	True				
ANR	2022362	CallExpression	tree -> get_data ( ) -> spree ( sig )		2022358	0					
ANR	2022363	Callee	tree -> get_data ( ) -> spree		2022358	0					
ANR	2022364	PtrMemberAccess	tree -> get_data ( ) -> spree		2022358	0					
ANR	2022365	CallExpression	tree -> get_data ( )		2022358	0					
ANR	2022366	Callee	tree -> get_data		2022358	0					
ANR	2022367	PtrMemberAccess	tree -> get_data		2022358	0					
ANR	2022368	Identifier	tree		2022358	0					
ANR	2022369	Identifier	get_data		2022358	1					
ANR	2022370	ArgumentList			2022358	1					
ANR	2022371	Identifier	spree		2022358	1					
ANR	2022372	ArgumentList	sig		2022358	1					
ANR	2022373	Argument	sig		2022358	0					
ANR	2022374	Identifier	sig		2022358	0					
ANR	2022375	IdentifierDeclStatement	Tree < ProcFamily * > * child = tree -> get_child ( ) ;	828:1:22785:22829	2022358	1	True				
ANR	2022376	IdentifierDecl	* child = tree -> get_child ( )		2022358	0					
ANR	2022377	IdentifierDeclType	Tree < ProcFamily * > *		2022358	0					
ANR	2022378	Identifier	child		2022358	1					
ANR	2022379	AssignmentExpression	* child = tree -> get_child ( )		2022358	2		=			
ANR	2022380	Identifier	child		2022358	0					
ANR	2022381	CallExpression	tree -> get_child ( )		2022358	1					
ANR	2022382	Callee	tree -> get_child		2022358	0					
ANR	2022383	PtrMemberAccess	tree -> get_child		2022358	0					
ANR	2022384	Identifier	tree		2022358	0					
ANR	2022385	Identifier	get_child		2022358	1					
ANR	2022386	ArgumentList			2022358	1					
ANR	2022387	WhileStatement	while ( child != NULL )		2022358	2					
ANR	2022388	Condition	child != NULL	829:8:22839:22851	2022358	0	True				
ANR	2022389	EqualityExpression	child != NULL		2022358	0		!=			
ANR	2022390	Identifier	child		2022358	0					
ANR	2022391	Identifier	NULL		2022358	1					
ANR	2022392	CompoundStatement		9:23:164:164	2022358	1					
ANR	2022393	ExpressionStatement	"signal_family ( child , sig )"	830:2:22858:22883	2022358	0	True				
ANR	2022394	CallExpression	"signal_family ( child , sig )"		2022358	0					
ANR	2022395	Callee	signal_family		2022358	0					
ANR	2022396	Identifier	signal_family		2022358	0					
ANR	2022397	ArgumentList	child		2022358	1					
ANR	2022398	Argument	child		2022358	0					
ANR	2022399	Identifier	child		2022358	0					
ANR	2022400	Argument	sig		2022358	1					
ANR	2022401	Identifier	sig		2022358	0					
ANR	2022402	ExpressionStatement	child = child -> get_sibling ( )	831:2:22887:22915	2022358	1	True				
ANR	2022403	AssignmentExpression	child = child -> get_sibling ( )		2022358	0		=			
ANR	2022404	Identifier	child		2022358	0					
ANR	2022405	CallExpression	child -> get_sibling ( )		2022358	1					
ANR	2022406	Callee	child -> get_sibling		2022358	0					
ANR	2022407	PtrMemberAccess	child -> get_sibling		2022358	0					
ANR	2022408	Identifier	child		2022358	0					
ANR	2022409	Identifier	get_sibling		2022358	1					
ANR	2022410	ArgumentList			2022358	1					
ANR	2022411	ReturnType	void		2022358	1					
ANR	2022412	Identifier	ProcFamilyMonitor :: signal_family		2022358	2					
ANR	2022413	ParameterList	"Tree < ProcFamily * > * tree , int sig"		2022358	3					
ANR	2022414	Parameter	Tree < ProcFamily * > * tree	820:33:22655:22677	2022358	0	True				
ANR	2022415	ParameterType	Tree < ProcFamily * > *		2022358	0					
ANR	2022416	Identifier	tree		2022358	1					
ANR	2022417	Parameter	int sig	820:58:22680:22686	2022358	1	True				
ANR	2022418	ParameterType	int		2022358	0					
ANR	2022419	Identifier	sig		2022358	1					
ANR	2022420	CFGEntryNode	ENTRY		2022358		True				
ANR	2022421	CFGExitNode	EXIT		2022358		True				
ANR	2022422	Symbol	sig		2022358						
ANR	2022423	Symbol	* tree		2022358						
ANR	2022424	Symbol	* child		2022358						
ANR	2022425	Symbol	NULL		2022358						
ANR	2022426	Symbol	tree		2022358						
ANR	2022427	Symbol	tree -> get_data		2022358						
ANR	2022428	Symbol	tree -> get_child		2022358						
ANR	2022429	Symbol	child -> get_sibling		2022358						
ANR	2022430	Symbol	child		2022358						
ANR	2022431	Function	ProcFamilyMonitor :: remove_exited_processes	835:0:22923:23269							
ANR	2022432	FunctionDef	ProcFamilyMonitor :: remove_exited_processes (Tree < ProcFamily * > * tree)		2022431	0					
ANR	2022433	CompoundStatement		837:0:22996:23269	2022431	0					
ANR	2022434	ExpressionStatement	tree -> get_data ( ) -> remove_exited_processes ( )	840:1:23054:23097	2022431	0	True				
ANR	2022435	CallExpression	tree -> get_data ( ) -> remove_exited_processes ( )		2022431	0					
ANR	2022436	Callee	tree -> get_data ( ) -> remove_exited_processes		2022431	0					
ANR	2022437	PtrMemberAccess	tree -> get_data ( ) -> remove_exited_processes		2022431	0					
ANR	2022438	CallExpression	tree -> get_data ( )		2022431	0					
ANR	2022439	Callee	tree -> get_data		2022431	0					
ANR	2022440	PtrMemberAccess	tree -> get_data		2022431	0					
ANR	2022441	Identifier	tree		2022431	0					
ANR	2022442	Identifier	get_data		2022431	1					
ANR	2022443	ArgumentList			2022431	1					
ANR	2022444	Identifier	remove_exited_processes		2022431	1					
ANR	2022445	ArgumentList			2022431	1					
ANR	2022446	IdentifierDeclStatement	Tree < ProcFamily * > * child = tree -> get_child ( ) ;	844:1:23129:23173	2022431	1	True				
ANR	2022447	IdentifierDecl	* child = tree -> get_child ( )		2022431	0					
ANR	2022448	IdentifierDeclType	Tree < ProcFamily * > *		2022431	0					
ANR	2022449	Identifier	child		2022431	1					
ANR	2022450	AssignmentExpression	* child = tree -> get_child ( )		2022431	2		=			
ANR	2022451	Identifier	child		2022431	0					
ANR	2022452	CallExpression	tree -> get_child ( )		2022431	1					
ANR	2022453	Callee	tree -> get_child		2022431	0					
ANR	2022454	PtrMemberAccess	tree -> get_child		2022431	0					
ANR	2022455	Identifier	tree		2022431	0					
ANR	2022456	Identifier	get_child		2022431	1					
ANR	2022457	ArgumentList			2022431	1					
ANR	2022458	WhileStatement	while ( child != NULL )		2022431	2					
ANR	2022459	Condition	child != NULL	845:8:23183:23195	2022431	0	True				
ANR	2022460	EqualityExpression	child != NULL		2022431	0		!=			
ANR	2022461	Identifier	child		2022431	0					
ANR	2022462	Identifier	NULL		2022431	1					
ANR	2022463	CompoundStatement		9:23:201:201	2022431	1					
ANR	2022464	ExpressionStatement	remove_exited_processes ( child )	846:2:23202:23232	2022431	0	True				
ANR	2022465	CallExpression	remove_exited_processes ( child )		2022431	0					
ANR	2022466	Callee	remove_exited_processes		2022431	0					
ANR	2022467	Identifier	remove_exited_processes		2022431	0					
ANR	2022468	ArgumentList	child		2022431	1					
ANR	2022469	Argument	child		2022431	0					
ANR	2022470	Identifier	child		2022431	0					
ANR	2022471	ExpressionStatement	child = child -> get_sibling ( )	847:2:23236:23264	2022431	1	True				
ANR	2022472	AssignmentExpression	child = child -> get_sibling ( )		2022431	0		=			
ANR	2022473	Identifier	child		2022431	0					
ANR	2022474	CallExpression	child -> get_sibling ( )		2022431	1					
ANR	2022475	Callee	child -> get_sibling		2022431	0					
ANR	2022476	PtrMemberAccess	child -> get_sibling		2022431	0					
ANR	2022477	Identifier	child		2022431	0					
ANR	2022478	Identifier	get_sibling		2022431	1					
ANR	2022479	ArgumentList			2022431	1					
ANR	2022480	ReturnType	void		2022431	1					
ANR	2022481	Identifier	ProcFamilyMonitor :: remove_exited_processes		2022431	2					
ANR	2022482	ParameterList	Tree < ProcFamily * > * tree		2022431	3					
ANR	2022483	Parameter	Tree < ProcFamily * > * tree	836:43:22971:22993	2022431	0	True				
ANR	2022484	ParameterType	Tree < ProcFamily * > *		2022431	0					
ANR	2022485	Identifier	tree		2022431	1					
ANR	2022486	CFGEntryNode	ENTRY		2022431		True				
ANR	2022487	CFGExitNode	EXIT		2022431		True				
ANR	2022488	Symbol	* tree		2022431						
ANR	2022489	Symbol	* child		2022431						
ANR	2022490	Symbol	NULL		2022431						
ANR	2022491	Symbol	tree		2022431						
ANR	2022492	Symbol	tree -> get_data		2022431						
ANR	2022493	Symbol	tree -> get_child		2022431						
ANR	2022494	Symbol	child -> get_sibling		2022431						
ANR	2022495	Symbol	child		2022431						
ANR	2022496	Function	ProcFamilyMonitor :: delete_unwatched_families	851:0:23272:25253							
ANR	2022497	FunctionDef	ProcFamilyMonitor :: delete_unwatched_families (Tree < ProcFamily * > * tree)		2022496	0					
ANR	2022498	CompoundStatement		853:0:23347:25253	2022496	0					
ANR	2022499	IdentifierDeclStatement	Tree < ProcFamily * > * child = tree -> get_child ( ) ;	856:1:23378:23422	2022496	0	True				
ANR	2022500	IdentifierDecl	* child = tree -> get_child ( )		2022496	0					
ANR	2022501	IdentifierDeclType	Tree < ProcFamily * > *		2022496	0					
ANR	2022502	Identifier	child		2022496	1					
ANR	2022503	AssignmentExpression	* child = tree -> get_child ( )		2022496	2		=			
ANR	2022504	Identifier	child		2022496	0					
ANR	2022505	CallExpression	tree -> get_child ( )		2022496	1					
ANR	2022506	Callee	tree -> get_child		2022496	0					
ANR	2022507	PtrMemberAccess	tree -> get_child		2022496	0					
ANR	2022508	Identifier	tree		2022496	0					
ANR	2022509	Identifier	get_child		2022496	1					
ANR	2022510	ArgumentList			2022496	1					
ANR	2022511	WhileStatement	while ( child != NULL )		2022496	1					
ANR	2022512	Condition	child != NULL	857:8:23432:23444	2022496	0	True				
ANR	2022513	EqualityExpression	child != NULL		2022496	0		!=			
ANR	2022514	Identifier	child		2022496	0					
ANR	2022515	Identifier	NULL		2022496	1					
ANR	2022516	CompoundStatement		10:2:224:276	2022496	1					
ANR	2022517	IdentifierDeclStatement	Tree < ProcFamily * > * next_child = child -> get_sibling ( ) ;	862:2:23572:23624	2022496	0	True				
ANR	2022518	IdentifierDecl	* next_child = child -> get_sibling ( )		2022496	0					
ANR	2022519	IdentifierDeclType	Tree < ProcFamily * > *		2022496	0					
ANR	2022520	Identifier	next_child		2022496	1					
ANR	2022521	AssignmentExpression	* next_child = child -> get_sibling ( )		2022496	2		=			
ANR	2022522	Identifier	next_child		2022496	0					
ANR	2022523	CallExpression	child -> get_sibling ( )		2022496	1					
ANR	2022524	Callee	child -> get_sibling		2022496	0					
ANR	2022525	PtrMemberAccess	child -> get_sibling		2022496	0					
ANR	2022526	Identifier	child		2022496	0					
ANR	2022527	Identifier	get_sibling		2022496	1					
ANR	2022528	ArgumentList			2022496	1					
ANR	2022529	ExpressionStatement	delete_unwatched_families ( child )	863:2:23628:23660	2022496	1	True				
ANR	2022530	CallExpression	delete_unwatched_families ( child )		2022496	0					
ANR	2022531	Callee	delete_unwatched_families		2022496	0					
ANR	2022532	Identifier	delete_unwatched_families		2022496	0					
ANR	2022533	ArgumentList	child		2022496	1					
ANR	2022534	Argument	child		2022496	0					
ANR	2022535	Identifier	child		2022496	0					
ANR	2022536	ExpressionStatement	child = next_child	864:2:23664:23682	2022496	2	True				
ANR	2022537	AssignmentExpression	child = next_child		2022496	0		=			
ANR	2022538	Identifier	child		2022496	0					
ANR	2022539	Identifier	next_child		2022496	1					
ANR	2022540	IdentifierDeclStatement	pid_t watcher_pid = tree -> get_data ( ) -> get_watcher_pid ( ) ;	870:1:23854:23909	2022496	2	True				
ANR	2022541	IdentifierDecl	watcher_pid = tree -> get_data ( ) -> get_watcher_pid ( )		2022496	0					
ANR	2022542	IdentifierDeclType	pid_t		2022496	0					
ANR	2022543	Identifier	watcher_pid		2022496	1					
ANR	2022544	AssignmentExpression	watcher_pid = tree -> get_data ( ) -> get_watcher_pid ( )		2022496	2		=			
ANR	2022545	Identifier	watcher_pid		2022496	0					
ANR	2022546	CallExpression	tree -> get_data ( ) -> get_watcher_pid ( )		2022496	1					
ANR	2022547	Callee	tree -> get_data ( ) -> get_watcher_pid		2022496	0					
ANR	2022548	PtrMemberAccess	tree -> get_data ( ) -> get_watcher_pid		2022496	0					
ANR	2022549	CallExpression	tree -> get_data ( )		2022496	0					
ANR	2022550	Callee	tree -> get_data		2022496	0					
ANR	2022551	PtrMemberAccess	tree -> get_data		2022496	0					
ANR	2022552	Identifier	tree		2022496	0					
ANR	2022553	Identifier	get_data		2022496	1					
ANR	2022554	ArgumentList			2022496	1					
ANR	2022555	Identifier	get_watcher_pid		2022496	1					
ANR	2022556	ArgumentList			2022496	1					
ANR	2022557	IfStatement	if ( watcher_pid == 0 )		2022496	3					
ANR	2022558	Condition	watcher_pid == 0	871:5:23916:23931	2022496	0	True				
ANR	2022559	EqualityExpression	watcher_pid == 0		2022496	0		==			
ANR	2022560	Identifier	watcher_pid		2022496	0					
ANR	2022561	PrimaryExpression	0		2022496	1					
ANR	2022562	CompoundStatement		19:23:586:586	2022496	1					
ANR	2022563	ReturnStatement	return ;	872:2:23938:23944	2022496	0	True				
ANR	2022564	IdentifierDeclStatement	ProcFamilyMember * member ;	875:1:23951:23975	2022496	4	True				
ANR	2022565	IdentifierDecl	* member		2022496	0					
ANR	2022566	IdentifierDeclType	ProcFamilyMember *		2022496	0					
ANR	2022567	Identifier	member		2022496	1					
ANR	2022568	IdentifierDeclStatement	"int ret = m_member_table . lookup ( watcher_pid , member ) ;"	876:1:23978:24030	2022496	5	True				
ANR	2022569	IdentifierDecl	"ret = m_member_table . lookup ( watcher_pid , member )"		2022496	0					
ANR	2022570	IdentifierDeclType	int		2022496	0					
ANR	2022571	Identifier	ret		2022496	1					
ANR	2022572	AssignmentExpression	"ret = m_member_table . lookup ( watcher_pid , member )"		2022496	2		=			
ANR	2022573	Identifier	ret		2022496	0					
ANR	2022574	CallExpression	"m_member_table . lookup ( watcher_pid , member )"		2022496	1					
ANR	2022575	Callee	m_member_table . lookup		2022496	0					
ANR	2022576	MemberAccess	m_member_table . lookup		2022496	0					
ANR	2022577	Identifier	m_member_table		2022496	0					
ANR	2022578	Identifier	lookup		2022496	1					
ANR	2022579	ArgumentList	watcher_pid		2022496	1					
ANR	2022580	Argument	watcher_pid		2022496	0					
ANR	2022581	Identifier	watcher_pid		2022496	0					
ANR	2022582	Argument	member		2022496	1					
ANR	2022583	Identifier	member		2022496	0					
ANR	2022584	IfStatement	if ( ret != - 1 )		2022496	6					
ANR	2022585	Condition	ret != - 1	877:5:24037:24045	2022496	0	True				
ANR	2022586	EqualityExpression	ret != - 1		2022496	0		!=			
ANR	2022587	Identifier	ret		2022496	0					
ANR	2022588	UnaryOperationExpression	- 1		2022496	1					
ANR	2022589	UnaryOperator	-		2022496	0					
ANR	2022590	PrimaryExpression	1		2022496	1					
ANR	2022591	CompoundStatement		25:16:700:700	2022496	1					
ANR	2022592	IfStatement	if ( member -> get_proc_info ( ) -> birthday <= tree -> get_data ( ) -> get_root_birthday ( ) )		2022496	0					
ANR	2022593	Condition	member -> get_proc_info ( ) -> birthday <= tree -> get_data ( ) -> get_root_birthday ( )	878:6:24056:24142	2022496	0	True				
ANR	2022594	RelationalExpression	member -> get_proc_info ( ) -> birthday <= tree -> get_data ( ) -> get_root_birthday ( )		2022496	0		<=			
ANR	2022595	PtrMemberAccess	member -> get_proc_info ( ) -> birthday		2022496	0					
ANR	2022596	CallExpression	member -> get_proc_info ( )		2022496	0					
ANR	2022597	Callee	member -> get_proc_info		2022496	0					
ANR	2022598	PtrMemberAccess	member -> get_proc_info		2022496	0					
ANR	2022599	Identifier	member		2022496	0					
ANR	2022600	Identifier	get_proc_info		2022496	1					
ANR	2022601	ArgumentList			2022496	1					
ANR	2022602	Identifier	birthday		2022496	1					
ANR	2022603	CallExpression	tree -> get_data ( ) -> get_root_birthday ( )		2022496	1					
ANR	2022604	Callee	tree -> get_data ( ) -> get_root_birthday		2022496	0					
ANR	2022605	PtrMemberAccess	tree -> get_data ( ) -> get_root_birthday		2022496	0					
ANR	2022606	CallExpression	tree -> get_data ( )		2022496	0					
ANR	2022607	Callee	tree -> get_data		2022496	0					
ANR	2022608	PtrMemberAccess	tree -> get_data		2022496	0					
ANR	2022609	Identifier	tree		2022496	0					
ANR	2022610	Identifier	get_data		2022496	1					
ANR	2022611	ArgumentList			2022496	1					
ANR	2022612	Identifier	get_root_birthday		2022496	1					
ANR	2022613	ArgumentList			2022496	1					
ANR	2022614	CompoundStatement		28:2:799:799	2022496	1					
ANR	2022615	ReturnStatement	return ;	883:3:24214:24220	2022496	0	True				
ANR	2022616	Statement	dprintf	885:2:24228:24234	2022496	1	True				
ANR	2022617	Statement	(	885:9:24235:24235	2022496	2	True				
ANR	2022618	Statement	D_ALWAYS	885:10:24236:24243	2022496	3	True				
ANR	2022619	Statement	","	885:18:24244:24244	2022496	4	True				
ANR	2022620	Statement	"""watcher %u found with later birthdate ("""	886:10:24256:24296	2022496	5	True				
ANR	2022621	Statement	PROCAPI_BIRTHDAY_FORMAT	887:14:24312:24334	2022496	6	True				
ANR	2022622	Statement	""") than watched process %u ("""	888:14:24350:24378	2022496	7	True				
ANR	2022623	Statement	PROCAPI_BIRTHDAY_FORMAT	889:14:24394:24416	2022496	8	True				
ANR	2022624	Statement	""")\\n"""	890:14:24432:24436	2022496	9	True				
ANR	2022625	Statement	","	890:19:24437:24437	2022496	10	True				
ANR	2022626	Statement	watcher_pid	891:10:24449:24459	2022496	11	True				
ANR	2022627	Statement	","	891:21:24460:24460	2022496	12	True				
ANR	2022628	Statement	member	892:10:24472:24477	2022496	13	True				
ANR	2022629	Statement	->	892:16:24478:24479	2022496	14	True				
ANR	2022630	Statement	get_proc_info	892:18:24480:24492	2022496	15	True				
ANR	2022631	Statement	(	892:31:24493:24493	2022496	16	True				
ANR	2022632	Statement	)	892:32:24494:24494	2022496	17	True				
ANR	2022633	Statement	->	892:33:24495:24496	2022496	18	True				
ANR	2022634	Statement	birthday	892:35:24497:24504	2022496	19	True				
ANR	2022635	Statement	","	892:43:24505:24505	2022496	20	True				
ANR	2022636	Statement	tree	893:10:24517:24520	2022496	21	True				
ANR	2022637	Statement	->	893:14:24521:24522	2022496	22	True				
ANR	2022638	Statement	get_data	893:16:24523:24530	2022496	23	True				
ANR	2022639	Statement	(	893:24:24531:24531	2022496	24	True				
ANR	2022640	Statement	)	893:25:24532:24532	2022496	25	True				
ANR	2022641	Statement	->	893:26:24533:24534	2022496	26	True				
ANR	2022642	Statement	get_root_pid	893:28:24535:24546	2022496	27	True				
ANR	2022643	Statement	(	893:40:24547:24547	2022496	28	True				
ANR	2022644	Statement	)	893:41:24548:24548	2022496	29	True				
ANR	2022645	Statement	","	893:42:24549:24549	2022496	30	True				
ANR	2022646	Statement	tree	894:10:24561:24564	2022496	31	True				
ANR	2022647	Statement	->	894:14:24565:24566	2022496	32	True				
ANR	2022648	Statement	get_data	894:16:24567:24574	2022496	33	True				
ANR	2022649	Statement	(	894:24:24575:24575	2022496	34	True				
ANR	2022650	Statement	)	894:25:24576:24576	2022496	35	True				
ANR	2022651	Statement	->	894:26:24577:24578	2022496	36	True				
ANR	2022652	Statement	get_root_birthday	894:28:24579:24595	2022496	37	True				
ANR	2022653	Statement	(	894:45:24596:24596	2022496	38	True				
ANR	2022654	Statement	)	894:46:24597:24597	2022496	39	True				
ANR	2022655	Statement	)	894:47:24598:24598	2022496	40	True				
ANR	2022656	ExpressionStatement		894:48:24599:24599	2022496	41	True				
ANR	2022657	IfStatement	if ( m_except_if_pid_dies && tree -> get_parent ( ) == NULL )		2022496	7					
ANR	2022658	Condition	m_except_if_pid_dies && tree -> get_parent ( ) == NULL	902:5:24850:24899	2022496	0	True				
ANR	2022659	AndExpression	m_except_if_pid_dies && tree -> get_parent ( ) == NULL		2022496	0		&&			
ANR	2022660	Identifier	m_except_if_pid_dies		2022496	0					
ANR	2022661	EqualityExpression	tree -> get_parent ( ) == NULL		2022496	1		==			
ANR	2022662	CallExpression	tree -> get_parent ( )		2022496	0					
ANR	2022663	Callee	tree -> get_parent		2022496	0					
ANR	2022664	PtrMemberAccess	tree -> get_parent		2022496	0					
ANR	2022665	Identifier	tree		2022496	0					
ANR	2022666	Identifier	get_parent		2022496	1					
ANR	2022667	ArgumentList			2022496	1					
ANR	2022668	Identifier	NULL		2022496	1					
ANR	2022669	CompoundStatement		50:57:1554:1554	2022496	1					
ANR	2022670	ExpressionStatement	"EXCEPT ( ""Watcher pid %lu exited so procd is exiting. Bye."" , ( unsigned long ) watcher_pid )"	903:2:24906:24995	2022496	0	True				
ANR	2022671	CallExpression	"EXCEPT ( ""Watcher pid %lu exited so procd is exiting. Bye."" , ( unsigned long ) watcher_pid )"		2022496	0					
ANR	2022672	Callee	EXCEPT		2022496	0					
ANR	2022673	Identifier	EXCEPT		2022496	0					
ANR	2022674	ArgumentList	"""Watcher pid %lu exited so procd is exiting. Bye."""		2022496	1					
ANR	2022675	Argument	"""Watcher pid %lu exited so procd is exiting. Bye."""		2022496	0					
ANR	2022676	PrimaryExpression	"""Watcher pid %lu exited so procd is exiting. Bye."""		2022496	0					
ANR	2022677	Argument	( unsigned long ) watcher_pid		2022496	1					
ANR	2022678	CastExpression	( unsigned long ) watcher_pid		2022496	0					
ANR	2022679	CastTarget	unsigned long		2022496	0					
ANR	2022680	Identifier	watcher_pid		2022496	1					
ANR	2022681	ExpressionStatement	ASSERT ( tree -> get_parent ( ) != NULL )	906:1:25001:25035	2022496	8	True				
ANR	2022682	CallExpression	ASSERT ( tree -> get_parent ( ) != NULL )		2022496	0					
ANR	2022683	Callee	ASSERT		2022496	0					
ANR	2022684	Identifier	ASSERT		2022496	0					
ANR	2022685	ArgumentList	tree -> get_parent ( ) != NULL		2022496	1					
ANR	2022686	Argument	tree -> get_parent ( ) != NULL		2022496	0					
ANR	2022687	EqualityExpression	tree -> get_parent ( ) != NULL		2022496	0		!=			
ANR	2022688	CallExpression	tree -> get_parent ( )		2022496	0					
ANR	2022689	Callee	tree -> get_parent		2022496	0					
ANR	2022690	PtrMemberAccess	tree -> get_parent		2022496	0					
ANR	2022691	Identifier	tree		2022496	0					
ANR	2022692	Identifier	get_parent		2022496	1					
ANR	2022693	ArgumentList			2022496	1					
ANR	2022694	Identifier	NULL		2022496	1					
ANR	2022695	IdentifierDeclStatement	pid_t root_pid = tree -> get_data ( ) -> get_root_pid ( ) ;	907:1:25038:25087	2022496	9	True				
ANR	2022696	IdentifierDecl	root_pid = tree -> get_data ( ) -> get_root_pid ( )		2022496	0					
ANR	2022697	IdentifierDeclType	pid_t		2022496	0					
ANR	2022698	Identifier	root_pid		2022496	1					
ANR	2022699	AssignmentExpression	root_pid = tree -> get_data ( ) -> get_root_pid ( )		2022496	2		=			
ANR	2022700	Identifier	root_pid		2022496	0					
ANR	2022701	CallExpression	tree -> get_data ( ) -> get_root_pid ( )		2022496	1					
ANR	2022702	Callee	tree -> get_data ( ) -> get_root_pid		2022496	0					
ANR	2022703	PtrMemberAccess	tree -> get_data ( ) -> get_root_pid		2022496	0					
ANR	2022704	CallExpression	tree -> get_data ( )		2022496	0					
ANR	2022705	Callee	tree -> get_data		2022496	0					
ANR	2022706	PtrMemberAccess	tree -> get_data		2022496	0					
ANR	2022707	Identifier	tree		2022496	0					
ANR	2022708	Identifier	get_data		2022496	1					
ANR	2022709	ArgumentList			2022496	1					
ANR	2022710	Identifier	get_root_pid		2022496	1					
ANR	2022711	ArgumentList			2022496	1					
ANR	2022712	ExpressionStatement	unregister_subfamily ( tree )	908:1:25090:25116	2022496	10	True				
ANR	2022713	CallExpression	unregister_subfamily ( tree )		2022496	0					
ANR	2022714	Callee	unregister_subfamily		2022496	0					
ANR	2022715	Identifier	unregister_subfamily		2022496	0					
ANR	2022716	ArgumentList	tree		2022496	1					
ANR	2022717	Argument	tree		2022496	0					
ANR	2022718	Identifier	tree		2022496	0					
ANR	2022719	ExpressionStatement	"dprintf ( D_ALWAYS , ""watcher %u of family with root %u has died; family removed\\n"" , watcher_pid , root_pid )"	910:1:25120:25251	2022496	11	True				
ANR	2022720	CallExpression	"dprintf ( D_ALWAYS , ""watcher %u of family with root %u has died; family removed\\n"" , watcher_pid , root_pid )"		2022496	0					
ANR	2022721	Callee	dprintf		2022496	0					
ANR	2022722	Identifier	dprintf		2022496	0					
ANR	2022723	ArgumentList	D_ALWAYS		2022496	1					
ANR	2022724	Argument	D_ALWAYS		2022496	0					
ANR	2022725	Identifier	D_ALWAYS		2022496	0					
ANR	2022726	Argument	"""watcher %u of family with root %u has died; family removed\\n"""		2022496	1					
ANR	2022727	PrimaryExpression	"""watcher %u of family with root %u has died; family removed\\n"""		2022496	0					
ANR	2022728	Argument	watcher_pid		2022496	2					
ANR	2022729	Identifier	watcher_pid		2022496	0					
ANR	2022730	Argument	root_pid		2022496	3					
ANR	2022731	Identifier	root_pid		2022496	0					
ANR	2022732	ReturnType	void		2022496	1					
ANR	2022733	Identifier	ProcFamilyMonitor :: delete_unwatched_families		2022496	2					
ANR	2022734	ParameterList	Tree < ProcFamily * > * tree		2022496	3					
ANR	2022735	Parameter	Tree < ProcFamily * > * tree	852:45:23322:23344	2022496	0	True				
ANR	2022736	ParameterType	Tree < ProcFamily * > *		2022496	0					
ANR	2022737	Identifier	tree		2022496	1					
ANR	2022738	CFGEntryNode	ENTRY		2022496		True				
ANR	2022739	CFGExitNode	EXIT		2022496		True				
ANR	2022740	Symbol	* tree -> get_data		2022496						
ANR	2022741	Symbol	watcher_pid		2022496						
ANR	2022742	Symbol	tree -> get_data		2022496						
ANR	2022743	Symbol	tree -> get_data ( ) -> get_root_birthday		2022496						
ANR	2022744	Symbol	child -> get_sibling		2022496						
ANR	2022745	Symbol	member -> get_proc_info		2022496						
ANR	2022746	Symbol	tree -> get_data ( ) -> get_root_pid		2022496						
ANR	2022747	Symbol	* * member		2022496						
ANR	2022748	Symbol	m_member_table		2022496						
ANR	2022749	Symbol	* * tree		2022496						
ANR	2022750	Symbol	member		2022496						
ANR	2022751	Symbol	tree -> get_child		2022496						
ANR	2022752	Symbol	ret		2022496						
ANR	2022753	Symbol	* child		2022496						
ANR	2022754	Symbol	NULL		2022496						
ANR	2022755	Symbol	m_except_if_pid_dies		2022496						
ANR	2022756	Symbol	tree		2022496						
ANR	2022757	Symbol	D_ALWAYS		2022496						
ANR	2022758	Symbol	tree -> get_data ( ) -> get_watcher_pid		2022496						
ANR	2022759	Symbol	tree -> get_parent		2022496						
ANR	2022760	Symbol	* member		2022496						
ANR	2022761	Symbol	* tree		2022496						
ANR	2022762	Symbol	m_member_table . lookup		2022496						
ANR	2022763	Symbol	* member -> get_proc_info		2022496						
ANR	2022764	Symbol	root_pid		2022496						
ANR	2022765	Symbol	next_child		2022496						
ANR	2022766	Symbol	child		2022496						
ANR	2022767	Symbol	member -> get_proc_info ( ) -> birthday		2022496						
ANR	2022768	Function	ProcFamilyMonitor :: unregister_subfamily	916:0:25256:26463							
ANR	2022769	FunctionDef	ProcFamilyMonitor :: unregister_subfamily (Tree < ProcFamily * > * tree)		2022768	0					
ANR	2022770	CompoundStatement		918:0:25326:26463	2022768	0					
ANR	2022771	ExpressionStatement	m_pid_tracker -> remove_mapping ( tree -> get_data ( ) )	922:1:25431:25478	2022768	0	True				
ANR	2022772	CallExpression	m_pid_tracker -> remove_mapping ( tree -> get_data ( ) )		2022768	0					
ANR	2022773	Callee	m_pid_tracker -> remove_mapping		2022768	0					
ANR	2022774	PtrMemberAccess	m_pid_tracker -> remove_mapping		2022768	0					
ANR	2022775	Identifier	m_pid_tracker		2022768	0					
ANR	2022776	Identifier	remove_mapping		2022768	1					
ANR	2022777	ArgumentList	tree -> get_data ( )		2022768	1					
ANR	2022778	Argument	tree -> get_data ( )		2022768	0					
ANR	2022779	CallExpression	tree -> get_data ( )		2022768	0					
ANR	2022780	Callee	tree -> get_data		2022768	0					
ANR	2022781	PtrMemberAccess	tree -> get_data		2022768	0					
ANR	2022782	Identifier	tree		2022768	0					
ANR	2022783	Identifier	get_data		2022768	1					
ANR	2022784	ArgumentList			2022768	1					
ANR	2022785	IfStatement	if ( m_group_tracker != NULL )		2022768	1					
ANR	2022786	Condition	m_group_tracker != NULL	924:5:25504:25526	2022768	0	True				
ANR	2022787	EqualityExpression	m_group_tracker != NULL		2022768	0		!=			
ANR	2022788	Identifier	m_group_tracker		2022768	0					
ANR	2022789	Identifier	NULL		2022768	1					
ANR	2022790	CompoundStatement		7:30:202:202	2022768	1					
ANR	2022791	ExpressionStatement	m_group_tracker -> remove_mapping ( tree -> get_data ( ) )	925:2:25533:25582	2022768	0	True				
ANR	2022792	CallExpression	m_group_tracker -> remove_mapping ( tree -> get_data ( ) )		2022768	0					
ANR	2022793	Callee	m_group_tracker -> remove_mapping		2022768	0					
ANR	2022794	PtrMemberAccess	m_group_tracker -> remove_mapping		2022768	0					
ANR	2022795	Identifier	m_group_tracker		2022768	0					
ANR	2022796	Identifier	remove_mapping		2022768	1					
ANR	2022797	ArgumentList	tree -> get_data ( )		2022768	1					
ANR	2022798	Argument	tree -> get_data ( )		2022768	0					
ANR	2022799	CallExpression	tree -> get_data ( )		2022768	0					
ANR	2022800	Callee	tree -> get_data		2022768	0					
ANR	2022801	PtrMemberAccess	tree -> get_data		2022768	0					
ANR	2022802	Identifier	tree		2022768	0					
ANR	2022803	Identifier	get_data		2022768	1					
ANR	2022804	ArgumentList			2022768	1					
ANR	2022805	IfStatement	if ( m_cgroup_tracker != NULL )		2022768	2					
ANR	2022806	Condition	m_cgroup_tracker != NULL	929:5:25631:25654	2022768	0	True				
ANR	2022807	EqualityExpression	m_cgroup_tracker != NULL		2022768	0		!=			
ANR	2022808	Identifier	m_cgroup_tracker		2022768	0					
ANR	2022809	Identifier	NULL		2022768	1					
ANR	2022810	CompoundStatement		12:31:330:330	2022768	1					
ANR	2022811	ExpressionStatement	m_cgroup_tracker -> remove_mapping ( tree -> get_data ( ) )	930:2:25661:25711	2022768	0	True				
ANR	2022812	CallExpression	m_cgroup_tracker -> remove_mapping ( tree -> get_data ( ) )		2022768	0					
ANR	2022813	Callee	m_cgroup_tracker -> remove_mapping		2022768	0					
ANR	2022814	PtrMemberAccess	m_cgroup_tracker -> remove_mapping		2022768	0					
ANR	2022815	Identifier	m_cgroup_tracker		2022768	0					
ANR	2022816	Identifier	remove_mapping		2022768	1					
ANR	2022817	ArgumentList	tree -> get_data ( )		2022768	1					
ANR	2022818	Argument	tree -> get_data ( )		2022768	0					
ANR	2022819	CallExpression	tree -> get_data ( )		2022768	0					
ANR	2022820	Callee	tree -> get_data		2022768	0					
ANR	2022821	PtrMemberAccess	tree -> get_data		2022768	0					
ANR	2022822	Identifier	tree		2022768	0					
ANR	2022823	Identifier	get_data		2022768	1					
ANR	2022824	ArgumentList			2022768	1					
ANR	2022825	ExpressionStatement	m_login_tracker -> remove_mapping ( tree -> get_data ( ) )	933:1:25724:25773	2022768	3	True				
ANR	2022826	CallExpression	m_login_tracker -> remove_mapping ( tree -> get_data ( ) )		2022768	0					
ANR	2022827	Callee	m_login_tracker -> remove_mapping		2022768	0					
ANR	2022828	PtrMemberAccess	m_login_tracker -> remove_mapping		2022768	0					
ANR	2022829	Identifier	m_login_tracker		2022768	0					
ANR	2022830	Identifier	remove_mapping		2022768	1					
ANR	2022831	ArgumentList	tree -> get_data ( )		2022768	1					
ANR	2022832	Argument	tree -> get_data ( )		2022768	0					
ANR	2022833	CallExpression	tree -> get_data ( )		2022768	0					
ANR	2022834	Callee	tree -> get_data		2022768	0					
ANR	2022835	PtrMemberAccess	tree -> get_data		2022768	0					
ANR	2022836	Identifier	tree		2022768	0					
ANR	2022837	Identifier	get_data		2022768	1					
ANR	2022838	ArgumentList			2022768	1					
ANR	2022839	ExpressionStatement	m_environment_tracker -> remove_mapping ( tree -> get_data ( ) )	934:1:25776:25831	2022768	4	True				
ANR	2022840	CallExpression	m_environment_tracker -> remove_mapping ( tree -> get_data ( ) )		2022768	0					
ANR	2022841	Callee	m_environment_tracker -> remove_mapping		2022768	0					
ANR	2022842	PtrMemberAccess	m_environment_tracker -> remove_mapping		2022768	0					
ANR	2022843	Identifier	m_environment_tracker		2022768	0					
ANR	2022844	Identifier	remove_mapping		2022768	1					
ANR	2022845	ArgumentList	tree -> get_data ( )		2022768	1					
ANR	2022846	Argument	tree -> get_data ( )		2022768	0					
ANR	2022847	CallExpression	tree -> get_data ( )		2022768	0					
ANR	2022848	Callee	tree -> get_data		2022768	0					
ANR	2022849	PtrMemberAccess	tree -> get_data		2022768	0					
ANR	2022850	Identifier	tree		2022768	0					
ANR	2022851	Identifier	get_data		2022768	1					
ANR	2022852	ArgumentList			2022768	1					
ANR	2022853	IdentifierDeclStatement	int ret = m_family_table . remove ( tree -> get_data ( ) -> get_root_pid ( ) ) ;	938:1:25891:25956	2022768	5	True				
ANR	2022854	IdentifierDecl	ret = m_family_table . remove ( tree -> get_data ( ) -> get_root_pid ( ) )		2022768	0					
ANR	2022855	IdentifierDeclType	int		2022768	0					
ANR	2022856	Identifier	ret		2022768	1					
ANR	2022857	AssignmentExpression	ret = m_family_table . remove ( tree -> get_data ( ) -> get_root_pid ( ) )		2022768	2		=			
ANR	2022858	Identifier	ret		2022768	0					
ANR	2022859	CallExpression	m_family_table . remove ( tree -> get_data ( ) -> get_root_pid ( ) )		2022768	1					
ANR	2022860	Callee	m_family_table . remove		2022768	0					
ANR	2022861	MemberAccess	m_family_table . remove		2022768	0					
ANR	2022862	Identifier	m_family_table		2022768	0					
ANR	2022863	Identifier	remove		2022768	1					
ANR	2022864	ArgumentList	tree -> get_data ( ) -> get_root_pid ( )		2022768	1					
ANR	2022865	Argument	tree -> get_data ( ) -> get_root_pid ( )		2022768	0					
ANR	2022866	CallExpression	tree -> get_data ( ) -> get_root_pid ( )		2022768	0					
ANR	2022867	Callee	tree -> get_data ( ) -> get_root_pid		2022768	0					
ANR	2022868	PtrMemberAccess	tree -> get_data ( ) -> get_root_pid		2022768	0					
ANR	2022869	CallExpression	tree -> get_data ( )		2022768	0					
ANR	2022870	Callee	tree -> get_data		2022768	0					
ANR	2022871	PtrMemberAccess	tree -> get_data		2022768	0					
ANR	2022872	Identifier	tree		2022768	0					
ANR	2022873	Identifier	get_data		2022768	1					
ANR	2022874	ArgumentList			2022768	1					
ANR	2022875	Identifier	get_root_pid		2022768	1					
ANR	2022876	ArgumentList			2022768	1					
ANR	2022877	ExpressionStatement	ASSERT ( ret != - 1 )	939:1:25959:25976	2022768	6	True				
ANR	2022878	CallExpression	ASSERT ( ret != - 1 )		2022768	0					
ANR	2022879	Callee	ASSERT		2022768	0					
ANR	2022880	Identifier	ASSERT		2022768	0					
ANR	2022881	ArgumentList	ret != - 1		2022768	1					
ANR	2022882	Argument	ret != - 1		2022768	0					
ANR	2022883	EqualityExpression	ret != - 1		2022768	0		!=			
ANR	2022884	Identifier	ret		2022768	0					
ANR	2022885	UnaryOperationExpression	- 1		2022768	1					
ANR	2022886	UnaryOperator	-		2022768	0					
ANR	2022887	PrimaryExpression	1		2022768	1					
ANR	2022888	ExpressionStatement	ASSERT ( tree -> get_parent ( ) != NULL )	944:1:26074:26108	2022768	7	True				
ANR	2022889	CallExpression	ASSERT ( tree -> get_parent ( ) != NULL )		2022768	0					
ANR	2022890	Callee	ASSERT		2022768	0					
ANR	2022891	Identifier	ASSERT		2022768	0					
ANR	2022892	ArgumentList	tree -> get_parent ( ) != NULL		2022768	1					
ANR	2022893	Argument	tree -> get_parent ( ) != NULL		2022768	0					
ANR	2022894	EqualityExpression	tree -> get_parent ( ) != NULL		2022768	0		!=			
ANR	2022895	CallExpression	tree -> get_parent ( )		2022768	0					
ANR	2022896	Callee	tree -> get_parent		2022768	0					
ANR	2022897	PtrMemberAccess	tree -> get_parent		2022768	0					
ANR	2022898	Identifier	tree		2022768	0					
ANR	2022899	Identifier	get_parent		2022768	1					
ANR	2022900	ArgumentList			2022768	1					
ANR	2022901	Identifier	NULL		2022768	1					
ANR	2022902	ExpressionStatement	tree -> get_data ( ) -> fold_into_parent ( tree -> get_parent ( ) -> get_data ( ) )	945:1:26111:26177	2022768	8	True				
ANR	2022903	CallExpression	tree -> get_data ( ) -> fold_into_parent ( tree -> get_parent ( ) -> get_data ( ) )		2022768	0					
ANR	2022904	Callee	tree -> get_data ( ) -> fold_into_parent		2022768	0					
ANR	2022905	PtrMemberAccess	tree -> get_data ( ) -> fold_into_parent		2022768	0					
ANR	2022906	CallExpression	tree -> get_data ( )		2022768	0					
ANR	2022907	Callee	tree -> get_data		2022768	0					
ANR	2022908	PtrMemberAccess	tree -> get_data		2022768	0					
ANR	2022909	Identifier	tree		2022768	0					
ANR	2022910	Identifier	get_data		2022768	1					
ANR	2022911	ArgumentList			2022768	1					
ANR	2022912	Identifier	fold_into_parent		2022768	1					
ANR	2022913	ArgumentList	tree -> get_parent ( ) -> get_data ( )		2022768	1					
ANR	2022914	Argument	tree -> get_parent ( ) -> get_data ( )		2022768	0					
ANR	2022915	CallExpression	tree -> get_parent ( ) -> get_data ( )		2022768	0					
ANR	2022916	Callee	tree -> get_parent ( ) -> get_data		2022768	0					
ANR	2022917	PtrMemberAccess	tree -> get_parent ( ) -> get_data		2022768	0					
ANR	2022918	CallExpression	tree -> get_parent ( )		2022768	0					
ANR	2022919	Callee	tree -> get_parent		2022768	0					
ANR	2022920	PtrMemberAccess	tree -> get_parent		2022768	0					
ANR	2022921	Identifier	tree		2022768	0					
ANR	2022922	Identifier	get_parent		2022768	1					
ANR	2022923	ArgumentList			2022768	1					
ANR	2022924	Identifier	get_data		2022768	1					
ANR	2022925	ArgumentList			2022768	1					
ANR	2022926	ExpressionStatement	tree -> remove ( )	950:1:26274:26288	2022768	9	True				
ANR	2022927	CallExpression	tree -> remove ( )		2022768	0					
ANR	2022928	Callee	tree -> remove		2022768	0					
ANR	2022929	PtrMemberAccess	tree -> remove		2022768	0					
ANR	2022930	Identifier	tree		2022768	0					
ANR	2022931	Identifier	remove		2022768	1					
ANR	2022932	ArgumentList			2022768	1					
ANR	2022933	Statement	delete	956:1:26424:26429	2022768	10	True				
ANR	2022934	ExpressionStatement	tree -> get_data ( )	956:8:26431:26447	2022768	11	True				
ANR	2022935	CallExpression	tree -> get_data ( )		2022768	0					
ANR	2022936	Callee	tree -> get_data		2022768	0					
ANR	2022937	PtrMemberAccess	tree -> get_data		2022768	0					
ANR	2022938	Identifier	tree		2022768	0					
ANR	2022939	Identifier	get_data		2022768	1					
ANR	2022940	ArgumentList			2022768	1					
ANR	2022941	Statement	delete	957:1:26450:26455	2022768	12	True				
ANR	2022942	ExpressionStatement	tree	957:8:26457:26461	2022768	13	True				
ANR	2022943	Identifier	tree		2022768	0					
ANR	2022944	ReturnType	void		2022768	1					
ANR	2022945	Identifier	ProcFamilyMonitor :: unregister_subfamily		2022768	2					
ANR	2022946	ParameterList	Tree < ProcFamily * > * tree		2022768	3					
ANR	2022947	Parameter	Tree < ProcFamily * > * tree	917:40:25301:25323	2022768	0	True				
ANR	2022948	ParameterType	Tree < ProcFamily * > *		2022768	0					
ANR	2022949	Identifier	tree		2022768	1					
ANR	2022950	CFGEntryNode	ENTRY		2022768		True				
ANR	2022951	CFGExitNode	EXIT		2022768		True				
ANR	2022952	Symbol	ret		2022768						
ANR	2022953	Symbol	* tree -> get_data		2022768						
ANR	2022954	Symbol	NULL		2022768						
ANR	2022955	Symbol	tree		2022768						
ANR	2022956	Symbol	tree -> get_data		2022768						
ANR	2022957	Symbol	tree -> get_parent		2022768						
ANR	2022958	Symbol	m_family_table . remove		2022768						
ANR	2022959	Symbol	m_group_tracker		2022768						
ANR	2022960	Symbol	* tree		2022768						
ANR	2022961	Symbol	tree -> get_data ( ) -> get_root_pid		2022768						
ANR	2022962	Symbol	m_login_tracker		2022768						
ANR	2022963	Symbol	tree -> get_parent ( ) -> get_data		2022768						
ANR	2022964	Symbol	* tree -> get_parent		2022768						
ANR	2022965	Symbol	m_family_table		2022768						
ANR	2022966	Symbol	* * tree		2022768						
ANR	2022967	Symbol	m_environment_tracker		2022768						
ANR	2022968	Symbol	m_cgroup_tracker		2022768						
ANR	2022969	Symbol	m_pid_tracker		2022768						
ANR	2022970	Function	ProcFamilyMonitor :: delete_all_families	960:0:26466:26784							
ANR	2022971	FunctionDef	ProcFamilyMonitor :: delete_all_families (Tree < ProcFamily * > * tree)		2022970	0					
ANR	2022972	CompoundStatement		962:0:26535:26784	2022970	0					
ANR	2022973	IdentifierDeclStatement	Tree < ProcFamily * > * child = tree -> get_child ( ) ;	965:1:26566:26610	2022970	0	True				
ANR	2022974	IdentifierDecl	* child = tree -> get_child ( )		2022970	0					
ANR	2022975	IdentifierDeclType	Tree < ProcFamily * > *		2022970	0					
ANR	2022976	Identifier	child		2022970	1					
ANR	2022977	AssignmentExpression	* child = tree -> get_child ( )		2022970	2		=			
ANR	2022978	Identifier	child		2022970	0					
ANR	2022979	CallExpression	tree -> get_child ( )		2022970	1					
ANR	2022980	Callee	tree -> get_child		2022970	0					
ANR	2022981	PtrMemberAccess	tree -> get_child		2022970	0					
ANR	2022982	Identifier	tree		2022970	0					
ANR	2022983	Identifier	get_child		2022970	1					
ANR	2022984	ArgumentList			2022970	1					
ANR	2022985	WhileStatement	while ( child != NULL )		2022970	1					
ANR	2022986	Condition	child != NULL	966:8:26620:26632	2022970	0	True				
ANR	2022987	EqualityExpression	child != NULL		2022970	0		!=			
ANR	2022988	Identifier	child		2022970	0					
ANR	2022989	Identifier	NULL		2022970	1					
ANR	2022990	CompoundStatement		5:23:99:99	2022970	1					
ANR	2022991	ExpressionStatement	delete_all_families ( child )	967:2:26639:26665	2022970	0	True				
ANR	2022992	CallExpression	delete_all_families ( child )		2022970	0					
ANR	2022993	Callee	delete_all_families		2022970	0					
ANR	2022994	Identifier	delete_all_families		2022970	0					
ANR	2022995	ArgumentList	child		2022970	1					
ANR	2022996	Argument	child		2022970	0					
ANR	2022997	Identifier	child		2022970	0					
ANR	2022998	ExpressionStatement	child = child -> get_sibling ( )	968:2:26669:26697	2022970	1	True				
ANR	2022999	AssignmentExpression	child = child -> get_sibling ( )		2022970	0		=			
ANR	2023000	Identifier	child		2022970	0					
ANR	2023001	CallExpression	child -> get_sibling ( )		2022970	1					
ANR	2023002	Callee	child -> get_sibling		2022970	0					
ANR	2023003	PtrMemberAccess	child -> get_sibling		2022970	0					
ANR	2023004	Identifier	child		2022970	0					
ANR	2023005	Identifier	get_sibling		2022970	1					
ANR	2023006	ArgumentList			2022970	1					
ANR	2023007	Statement	delete	973:1:26759:26764	2022970	2	True				
ANR	2023008	ExpressionStatement	tree -> get_data ( )	973:8:26766:26782	2022970	3	True				
ANR	2023009	CallExpression	tree -> get_data ( )		2022970	0					
ANR	2023010	Callee	tree -> get_data		2022970	0					
ANR	2023011	PtrMemberAccess	tree -> get_data		2022970	0					
ANR	2023012	Identifier	tree		2022970	0					
ANR	2023013	Identifier	get_data		2022970	1					
ANR	2023014	ArgumentList			2022970	1					
ANR	2023015	ReturnType	void		2022970	1					
ANR	2023016	Identifier	ProcFamilyMonitor :: delete_all_families		2022970	2					
ANR	2023017	ParameterList	Tree < ProcFamily * > * tree		2022970	3					
ANR	2023018	Parameter	Tree < ProcFamily * > * tree	961:39:26510:26532	2022970	0	True				
ANR	2023019	ParameterType	Tree < ProcFamily * > *		2022970	0					
ANR	2023020	Identifier	tree		2022970	1					
ANR	2023021	CFGEntryNode	ENTRY		2022970		True				
ANR	2023022	CFGExitNode	EXIT		2022970		True				
ANR	2023023	Symbol	* tree		2022970						
ANR	2023024	Symbol	* child		2022970						
ANR	2023025	Symbol	NULL		2022970						
ANR	2023026	Symbol	tree		2022970						
ANR	2023027	Symbol	tree -> get_child		2022970						
ANR	2023028	Symbol	child -> get_sibling		2022970						
ANR	2023029	Symbol	child		2022970						
ANR	2023030	Function	ProcFamilyMonitor :: dump	976:0:26787:27366							
ANR	2023031	FunctionDef	"ProcFamilyMonitor :: dump (pid_t pid , std :: vector < ProcFamilyDump > & vec)"		2023030	0					
ANR	2023032	CompoundStatement		978:0:26876:27366	2023030	0					
ANR	2023033	IdentifierDeclStatement	"Tree < ProcFamily * > * tree = lookup_family ( pid , true ) ;"	982:1:27008:27058	2023030	0	True				
ANR	2023034	IdentifierDecl	"* tree = lookup_family ( pid , true )"		2023030	0					
ANR	2023035	IdentifierDeclType	Tree < ProcFamily * > *		2023030	0					
ANR	2023036	Identifier	tree		2023030	1					
ANR	2023037	AssignmentExpression	"* tree = lookup_family ( pid , true )"		2023030	2		=			
ANR	2023038	Identifier	tree		2023030	0					
ANR	2023039	CallExpression	"lookup_family ( pid , true )"		2023030	1					
ANR	2023040	Callee	lookup_family		2023030	0					
ANR	2023041	Identifier	lookup_family		2023030	0					
ANR	2023042	ArgumentList	pid		2023030	1					
ANR	2023043	Argument	pid		2023030	0					
ANR	2023044	Identifier	pid		2023030	0					
ANR	2023045	Argument	true		2023030	1					
ANR	2023046	Identifier	true		2023030	0					
ANR	2023047	IfStatement	if ( tree == NULL )		2023030	1					
ANR	2023048	Condition	tree == NULL	983:5:27065:27076	2023030	0	True				
ANR	2023049	EqualityExpression	tree == NULL		2023030	0		==			
ANR	2023050	Identifier	tree		2023030	0					
ANR	2023051	Identifier	NULL		2023030	1					
ANR	2023052	CompoundStatement		6:19:202:202	2023030	1					
ANR	2023053	ExpressionStatement	"dprintf ( D_ALWAYS , ""output failure: family with root %u not found\\n"" , pid )"	984:2:27083:27176	2023030	0	True				
ANR	2023054	CallExpression	"dprintf ( D_ALWAYS , ""output failure: family with root %u not found\\n"" , pid )"		2023030	0					
ANR	2023055	Callee	dprintf		2023030	0					
ANR	2023056	Identifier	dprintf		2023030	0					
ANR	2023057	ArgumentList	D_ALWAYS		2023030	1					
ANR	2023058	Argument	D_ALWAYS		2023030	0					
ANR	2023059	Identifier	D_ALWAYS		2023030	0					
ANR	2023060	Argument	"""output failure: family with root %u not found\\n"""		2023030	1					
ANR	2023061	PrimaryExpression	"""output failure: family with root %u not found\\n"""		2023030	0					
ANR	2023062	Argument	pid		2023030	2					
ANR	2023063	Identifier	pid		2023030	0					
ANR	2023064	ReturnStatement	return PROC_FAMILY_ERROR_FAMILY_NOT_FOUND ;	987:2:27180:27221	2023030	1	True				
ANR	2023065	Identifier	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2023030	0					
ANR	2023066	ExpressionStatement	vec . clear ( )	992:1:27299:27310	2023030	2	True				
ANR	2023067	CallExpression	vec . clear ( )		2023030	0					
ANR	2023068	Callee	vec . clear		2023030	0					
ANR	2023069	MemberAccess	vec . clear		2023030	0					
ANR	2023070	Identifier	vec		2023030	0					
ANR	2023071	Identifier	clear		2023030	1					
ANR	2023072	ArgumentList			2023030	1					
ANR	2023073	ExpressionStatement	"dump ( tree , vec )"	993:1:27313:27328	2023030	3	True				
ANR	2023074	CallExpression	"dump ( tree , vec )"		2023030	0					
ANR	2023075	Callee	dump		2023030	0					
ANR	2023076	Identifier	dump		2023030	0					
ANR	2023077	ArgumentList	tree		2023030	1					
ANR	2023078	Argument	tree		2023030	0					
ANR	2023079	Identifier	tree		2023030	0					
ANR	2023080	Argument	vec		2023030	1					
ANR	2023081	Identifier	vec		2023030	0					
ANR	2023082	ReturnStatement	return PROC_FAMILY_ERROR_SUCCESS ;	995:1:27332:27364	2023030	4	True				
ANR	2023083	Identifier	PROC_FAMILY_ERROR_SUCCESS		2023030	0					
ANR	2023084	ReturnType	proc_family_error_t		2023030	1					
ANR	2023085	Identifier	ProcFamilyMonitor :: dump		2023030	2					
ANR	2023086	ParameterList	"pid_t pid , std :: vector < ProcFamilyDump > & vec"		2023030	3					
ANR	2023087	Parameter	pid_t pid	977:24:26831:26839	2023030	0	True				
ANR	2023088	ParameterType	pid_t		2023030	0					
ANR	2023089	Identifier	pid		2023030	1					
ANR	2023090	Parameter	std :: vector < ProcFamilyDump > & vec	977:35:26842:26873	2023030	1	True				
ANR	2023091	ParameterType	std :: vector < ProcFamilyDump > &		2023030	0					
ANR	2023092	Identifier	vec		2023030	1					
ANR	2023093	CFGEntryNode	ENTRY		2023030		True				
ANR	2023094	CFGExitNode	EXIT		2023030		True				
ANR	2023095	Symbol	lookup_family		2023030						
ANR	2023096	Symbol	NULL		2023030						
ANR	2023097	Symbol	vec		2023030						
ANR	2023098	Symbol	tree		2023030						
ANR	2023099	Symbol	true		2023030						
ANR	2023100	Symbol	D_ALWAYS		2023030						
ANR	2023101	Symbol	PROC_FAMILY_ERROR_FAMILY_NOT_FOUND		2023030						
ANR	2023102	Symbol	pid		2023030						
ANR	2023103	Symbol	PROC_FAMILY_ERROR_SUCCESS		2023030						
ANR	2023104	Function	ProcFamilyMonitor :: dump	998:0:27369:27985							
ANR	2023105	FunctionDef	"ProcFamilyMonitor :: dump (Tree < ProcFamily * > * tree , std :: vector < ProcFamilyDump > & vec)"		2023104	0					
ANR	2023106	CompoundStatement		1001:0:27481:27985	2023104	0					
ANR	2023107	IdentifierDeclStatement	ProcFamilyDump fam ;	1004:1:27520:27538	2023104	0	True				
ANR	2023108	IdentifierDecl	fam		2023104	0					
ANR	2023109	IdentifierDeclType	ProcFamilyDump		2023104	0					
ANR	2023110	Identifier	fam		2023104	1					
ANR	2023111	ExpressionStatement	fam . parent_root = 0	1005:1:27541:27560	2023104	1	True				
ANR	2023112	AssignmentExpression	fam . parent_root = 0		2023104	0		=			
ANR	2023113	MemberAccess	fam . parent_root		2023104	0					
ANR	2023114	Identifier	fam		2023104	0					
ANR	2023115	Identifier	parent_root		2023104	1					
ANR	2023116	PrimaryExpression	0		2023104	1					
ANR	2023117	IfStatement	if ( tree -> get_parent ( ) != NULL )		2023104	2					
ANR	2023118	Condition	tree -> get_parent ( ) != NULL	1006:5:27567:27592	2023104	0	True				
ANR	2023119	EqualityExpression	tree -> get_parent ( ) != NULL		2023104	0		!=			
ANR	2023120	CallExpression	tree -> get_parent ( )		2023104	0					
ANR	2023121	Callee	tree -> get_parent		2023104	0					
ANR	2023122	PtrMemberAccess	tree -> get_parent		2023104	0					
ANR	2023123	Identifier	tree		2023104	0					
ANR	2023124	Identifier	get_parent		2023104	1					
ANR	2023125	ArgumentList			2023104	1					
ANR	2023126	Identifier	NULL		2023104	1					
ANR	2023127	CompoundStatement		6:33:113:113	2023104	1					
ANR	2023128	ExpressionStatement	fam . parent_root = tree -> get_parent ( ) -> get_data ( ) -> get_root_pid ( )	1007:2:27599:27663	2023104	0	True				
ANR	2023129	AssignmentExpression	fam . parent_root = tree -> get_parent ( ) -> get_data ( ) -> get_root_pid ( )		2023104	0		=			
ANR	2023130	MemberAccess	fam . parent_root		2023104	0					
ANR	2023131	Identifier	fam		2023104	0					
ANR	2023132	Identifier	parent_root		2023104	1					
ANR	2023133	CallExpression	tree -> get_parent ( ) -> get_data ( ) -> get_root_pid ( )		2023104	1					
ANR	2023134	Callee	tree -> get_parent ( ) -> get_data ( ) -> get_root_pid		2023104	0					
ANR	2023135	PtrMemberAccess	tree -> get_parent ( ) -> get_data ( ) -> get_root_pid		2023104	0					
ANR	2023136	CallExpression	tree -> get_parent ( ) -> get_data ( )		2023104	0					
ANR	2023137	Callee	tree -> get_parent ( ) -> get_data		2023104	0					
ANR	2023138	PtrMemberAccess	tree -> get_parent ( ) -> get_data		2023104	0					
ANR	2023139	CallExpression	tree -> get_parent ( )		2023104	0					
ANR	2023140	Callee	tree -> get_parent		2023104	0					
ANR	2023141	PtrMemberAccess	tree -> get_parent		2023104	0					
ANR	2023142	Identifier	tree		2023104	0					
ANR	2023143	Identifier	get_parent		2023104	1					
ANR	2023144	ArgumentList			2023104	1					
ANR	2023145	Identifier	get_data		2023104	1					
ANR	2023146	ArgumentList			2023104	1					
ANR	2023147	Identifier	get_root_pid		2023104	1					
ANR	2023148	ArgumentList			2023104	1					
ANR	2023149	ExpressionStatement	fam . root_pid = tree -> get_data ( ) -> get_root_pid ( )	1009:1:27669:27716	2023104	3	True				
ANR	2023150	AssignmentExpression	fam . root_pid = tree -> get_data ( ) -> get_root_pid ( )		2023104	0		=			
ANR	2023151	MemberAccess	fam . root_pid		2023104	0					
ANR	2023152	Identifier	fam		2023104	0					
ANR	2023153	Identifier	root_pid		2023104	1					
ANR	2023154	CallExpression	tree -> get_data ( ) -> get_root_pid ( )		2023104	1					
ANR	2023155	Callee	tree -> get_data ( ) -> get_root_pid		2023104	0					
ANR	2023156	PtrMemberAccess	tree -> get_data ( ) -> get_root_pid		2023104	0					
ANR	2023157	CallExpression	tree -> get_data ( )		2023104	0					
ANR	2023158	Callee	tree -> get_data		2023104	0					
ANR	2023159	PtrMemberAccess	tree -> get_data		2023104	0					
ANR	2023160	Identifier	tree		2023104	0					
ANR	2023161	Identifier	get_data		2023104	1					
ANR	2023162	ArgumentList			2023104	1					
ANR	2023163	Identifier	get_root_pid		2023104	1					
ANR	2023164	ArgumentList			2023104	1					
ANR	2023165	ExpressionStatement	fam . watcher_pid = tree -> get_data ( ) -> get_watcher_pid ( )	1010:1:27719:27772	2023104	4	True				
ANR	2023166	AssignmentExpression	fam . watcher_pid = tree -> get_data ( ) -> get_watcher_pid ( )		2023104	0		=			
ANR	2023167	MemberAccess	fam . watcher_pid		2023104	0					
ANR	2023168	Identifier	fam		2023104	0					
ANR	2023169	Identifier	watcher_pid		2023104	1					
ANR	2023170	CallExpression	tree -> get_data ( ) -> get_watcher_pid ( )		2023104	1					
ANR	2023171	Callee	tree -> get_data ( ) -> get_watcher_pid		2023104	0					
ANR	2023172	PtrMemberAccess	tree -> get_data ( ) -> get_watcher_pid		2023104	0					
ANR	2023173	CallExpression	tree -> get_data ( )		2023104	0					
ANR	2023174	Callee	tree -> get_data		2023104	0					
ANR	2023175	PtrMemberAccess	tree -> get_data		2023104	0					
ANR	2023176	Identifier	tree		2023104	0					
ANR	2023177	Identifier	get_data		2023104	1					
ANR	2023178	ArgumentList			2023104	1					
ANR	2023179	Identifier	get_watcher_pid		2023104	1					
ANR	2023180	ArgumentList			2023104	1					
ANR	2023181	ExpressionStatement	tree -> get_data ( ) -> dump ( fam )	1011:1:27775:27802	2023104	5	True				
ANR	2023182	CallExpression	tree -> get_data ( ) -> dump ( fam )		2023104	0					
ANR	2023183	Callee	tree -> get_data ( ) -> dump		2023104	0					
ANR	2023184	PtrMemberAccess	tree -> get_data ( ) -> dump		2023104	0					
ANR	2023185	CallExpression	tree -> get_data ( )		2023104	0					
ANR	2023186	Callee	tree -> get_data		2023104	0					
ANR	2023187	PtrMemberAccess	tree -> get_data		2023104	0					
ANR	2023188	Identifier	tree		2023104	0					
ANR	2023189	Identifier	get_data		2023104	1					
ANR	2023190	ArgumentList			2023104	1					
ANR	2023191	Identifier	dump		2023104	1					
ANR	2023192	ArgumentList	fam		2023104	1					
ANR	2023193	Argument	fam		2023104	0					
ANR	2023194	Identifier	fam		2023104	0					
ANR	2023195	ExpressionStatement	vec . push_back ( fam )	1012:1:27805:27823	2023104	6	True				
ANR	2023196	CallExpression	vec . push_back ( fam )		2023104	0					
ANR	2023197	Callee	vec . push_back		2023104	0					
ANR	2023198	MemberAccess	vec . push_back		2023104	0					
ANR	2023199	Identifier	vec		2023104	0					
ANR	2023200	Identifier	push_back		2023104	1					
ANR	2023201	ArgumentList	fam		2023104	1					
ANR	2023202	Argument	fam		2023104	0					
ANR	2023203	Identifier	fam		2023104	0					
ANR	2023204	IdentifierDeclStatement	Tree < ProcFamily * > * child = tree -> get_child ( ) ;	1016:1:27859:27903	2023104	7	True				
ANR	2023205	IdentifierDecl	* child = tree -> get_child ( )		2023104	0					
ANR	2023206	IdentifierDeclType	Tree < ProcFamily * > *		2023104	0					
ANR	2023207	Identifier	child		2023104	1					
ANR	2023208	AssignmentExpression	* child = tree -> get_child ( )		2023104	2		=			
ANR	2023209	Identifier	child		2023104	0					
ANR	2023210	CallExpression	tree -> get_child ( )		2023104	1					
ANR	2023211	Callee	tree -> get_child		2023104	0					
ANR	2023212	PtrMemberAccess	tree -> get_child		2023104	0					
ANR	2023213	Identifier	tree		2023104	0					
ANR	2023214	Identifier	get_child		2023104	1					
ANR	2023215	ArgumentList			2023104	1					
ANR	2023216	WhileStatement	while ( child != NULL )		2023104	8					
ANR	2023217	Condition	child != NULL	1017:8:27913:27925	2023104	0	True				
ANR	2023218	EqualityExpression	child != NULL		2023104	0		!=			
ANR	2023219	Identifier	child		2023104	0					
ANR	2023220	Identifier	NULL		2023104	1					
ANR	2023221	CompoundStatement		17:23:446:446	2023104	1					
ANR	2023222	ExpressionStatement	"dump ( child , vec )"	1018:2:27932:27948	2023104	0	True				
ANR	2023223	CallExpression	"dump ( child , vec )"		2023104	0					
ANR	2023224	Callee	dump		2023104	0					
ANR	2023225	Identifier	dump		2023104	0					
ANR	2023226	ArgumentList	child		2023104	1					
ANR	2023227	Argument	child		2023104	0					
ANR	2023228	Identifier	child		2023104	0					
ANR	2023229	Argument	vec		2023104	1					
ANR	2023230	Identifier	vec		2023104	0					
ANR	2023231	ExpressionStatement	child = child -> get_sibling ( )	1019:2:27952:27980	2023104	1	True				
ANR	2023232	AssignmentExpression	child = child -> get_sibling ( )		2023104	0		=			
ANR	2023233	Identifier	child		2023104	0					
ANR	2023234	CallExpression	child -> get_sibling ( )		2023104	1					
ANR	2023235	Callee	child -> get_sibling		2023104	0					
ANR	2023236	PtrMemberAccess	child -> get_sibling		2023104	0					
ANR	2023237	Identifier	child		2023104	0					
ANR	2023238	Identifier	get_sibling		2023104	1					
ANR	2023239	ArgumentList			2023104	1					
ANR	2023240	ReturnType	void		2023104	1					
ANR	2023241	Identifier	ProcFamilyMonitor :: dump		2023104	2					
ANR	2023242	ParameterList	"Tree < ProcFamily * > * tree , std :: vector < ProcFamilyDump > & vec"		2023104	3					
ANR	2023243	Parameter	Tree < ProcFamily * > * tree	999:24:27398:27420	2023104	0	True				
ANR	2023244	ParameterType	Tree < ProcFamily * > *		2023104	0					
ANR	2023245	Identifier	tree		2023104	1					
ANR	2023246	Parameter	std :: vector < ProcFamilyDump > & vec	1000:24:27447:27478	2023104	1	True				
ANR	2023247	ParameterType	std :: vector < ProcFamilyDump > &		2023104	0					
ANR	2023248	Identifier	vec		2023104	1					
ANR	2023249	CFGEntryNode	ENTRY		2023104		True				
ANR	2023250	CFGExitNode	EXIT		2023104		True				
ANR	2023251	Symbol	* tree -> get_data		2023104						
ANR	2023252	Symbol	* child		2023104						
ANR	2023253	Symbol	NULL		2023104						
ANR	2023254	Symbol	tree		2023104						
ANR	2023255	Symbol	tree -> get_data		2023104						
ANR	2023256	Symbol	tree -> get_parent		2023104						
ANR	2023257	Symbol	tree -> get_data ( ) -> get_watcher_pid		2023104						
ANR	2023258	Symbol	child -> get_sibling		2023104						
ANR	2023259	Symbol	fam . parent_root		2023104						
ANR	2023260	Symbol	fam . watcher_pid		2023104						
ANR	2023261	Symbol	* tree		2023104						
ANR	2023262	Symbol	tree -> get_data ( ) -> get_root_pid		2023104						
ANR	2023263	Symbol	fam		2023104						
ANR	2023264	Symbol	tree -> get_parent ( ) -> get_data		2023104						
ANR	2023265	Symbol	vec		2023104						
ANR	2023266	Symbol	* tree -> get_parent		2023104						
ANR	2023267	Symbol	* * tree		2023104						
ANR	2023268	Symbol	* * * tree		2023104						
ANR	2023269	Symbol	tree -> get_child		2023104						
ANR	2023270	Symbol	* tree -> get_parent ( ) -> get_data		2023104						
ANR	2023271	Symbol	* * tree -> get_parent		2023104						
ANR	2023272	Symbol	tree -> get_parent ( ) -> get_data ( ) -> get_root_pid		2023104						
ANR	2023273	Symbol	fam . root_pid		2023104						
ANR	2023274	Symbol	child		2023104						
