command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5598499	File	data/converged/CVE-2011-4930_htcondor/write_user_log.cpp								
ANR	5598500	DeclStmt									
ANR	5598501	Decl							const char	const char [ ]	SynchDelimiter
ANR	5598502	ClassDef	UserLogInt64_t	59:0:1959:2427							
ANR	5598503	Function	UserLogInt64_t	62:1:1991:2031							
ANR	5598504	FunctionDef	UserLogInt64_t ()		5598503	0					
ANR	5598505	CompoundStatement		63:2:2016:2031	5598503	0					
ANR	5598506	ExpressionStatement	m_value = 0	63:1:2018:2029	5598503	0	True				
ANR	5598507	AssignmentExpression	m_value = 0		5598503	0		=			
ANR	5598508	Identifier	m_value		5598503	0					
ANR	5598509	PrimaryExpression	0		5598503	1					
ANR	5598510	Identifier	UserLogInt64_t		5598503	1					
ANR	5598511	ParameterList			5598503	2					
ANR	5598512	CFGEntryNode	ENTRY		5598503		True				
ANR	5598513	CFGExitNode	EXIT		5598503		True				
ANR	5598514	Symbol	m_value		5598503						
ANR	5598515	Function	UserLogInt64_t	64:1:2035:2088							
ANR	5598516	FunctionDef	UserLogInt64_t (int64_t value)		5598515	1					
ANR	5598517	CompoundStatement		65:2:2069:2088	5598515	0					
ANR	5598518	ExpressionStatement	m_value = value	65:1:2071:2086	5598515	0	True				
ANR	5598519	AssignmentExpression	m_value = value		5598515	0		=			
ANR	5598520	Identifier	m_value		5598515	0					
ANR	5598521	Identifier	value		5598515	1					
ANR	5598522	Identifier	UserLogInt64_t		5598515	1					
ANR	5598523	ParameterList	int64_t value		5598515	2					
ANR	5598524	Parameter	int64_t value	64:17:2051:2063	5598515	0	True				
ANR	5598525	ParameterType	int64_t		5598515	0					
ANR	5598526	Identifier	value		5598515	1					
ANR	5598527	CFGEntryNode	ENTRY		5598515		True				
ANR	5598528	CFGExitNode	EXIT		5598515		True				
ANR	5598529	Symbol	value		5598515						
ANR	5598530	Symbol	m_value		5598515						
ANR	5598531	Function	Set	68:1:2119:2176							
ANR	5598532	FunctionDef	Set (int64_t value)		5598531	2					
ANR	5598533	CompoundStatement		69:2:2150:2176	5598531	0					
ANR	5598534	ReturnStatement	return m_value = value ;	69:1:2152:2174	5598531	0	True				
ANR	5598535	AssignmentExpression	m_value = value		5598531	0		=			
ANR	5598536	Identifier	m_value		5598531	0					
ANR	5598537	Identifier	value		5598531	1					
ANR	5598538	ReturnType	int64_t		5598531	1					
ANR	5598539	Identifier	Set		5598531	2					
ANR	5598540	ParameterList	int64_t value		5598531	3					
ANR	5598541	Parameter	int64_t value	68:14:2132:2144	5598531	0	True				
ANR	5598542	ParameterType	int64_t		5598531	0					
ANR	5598543	Identifier	value		5598531	1					
ANR	5598544	CFGEntryNode	ENTRY		5598531		True				
ANR	5598545	CFGExitNode	EXIT		5598531		True				
ANR	5598546	Symbol	value		5598531						
ANR	5598547	Symbol	m_value		5598531						
ANR	5598548	Function	Get	70:1:2180:2226							
ANR	5598549	FunctionDef	Get ()		5598548	3					
ANR	5598550	CompoundStatement		71:2:2208:2226	5598548	0					
ANR	5598551	ReturnStatement	return m_value ;	71:1:2210:2224	5598548	0	True				
ANR	5598552	Identifier	m_value		5598548	0					
ANR	5598553	ReturnType	int64_t		5598548	1					
ANR	5598554	Identifier	Get		5598548	2					
ANR	5598555	ParameterList			5598548	3					
ANR	5598556	CFGEntryNode	ENTRY		5598548		True				
ANR	5598557	CFGExitNode	EXIT		5598548		True				
ANR	5598558	Symbol	m_value		5598548						
ANR	5598559	Function	operator =	72:1:2230:2309							
ANR	5598560	FunctionDef	operator = (int64_t value)		5598559	4					
ANR	5598561	CompoundStatement		73:2:2276:2309	5598559	0					
ANR	5598562	ExpressionStatement	m_value = value	73:1:2278:2293	5598559	0	True				
ANR	5598563	AssignmentExpression	m_value = value		5598559	0		=			
ANR	5598564	Identifier	m_value		5598559	0					
ANR	5598565	Identifier	value		5598559	1					
ANR	5598566	ReturnStatement	return * this ;	73:18:2295:2307	5598559	1	True				
ANR	5598567	UnaryOperationExpression	* this		5598559	0					
ANR	5598568	UnaryOperator	*		5598559	0					
ANR	5598569	Identifier	this		5598559	1					
ANR	5598570	ReturnType	UserLogInt64_t &		5598559	1					
ANR	5598571	Identifier	operator =		5598559	2					
ANR	5598572	ParameterList	int64_t value		5598559	3					
ANR	5598573	Parameter	int64_t value	72:29:2258:2270	5598559	0	True				
ANR	5598574	ParameterType	int64_t		5598559	0					
ANR	5598575	Identifier	value		5598559	1					
ANR	5598576	CFGEntryNode	ENTRY		5598559		True				
ANR	5598577	CFGExitNode	EXIT		5598559		True				
ANR	5598578	Symbol	* this		5598559						
ANR	5598579	Symbol	this		5598559						
ANR	5598580	Symbol	value		5598559						
ANR	5598581	Symbol	m_value		5598559						
ANR	5598582	Function	operator +=	74:1:2313:2394							
ANR	5598583	FunctionDef	operator += (int64_t value)		5598582	5					
ANR	5598584	CompoundStatement		75:2:2360:2394	5598582	0					
ANR	5598585	ExpressionStatement	m_value += value	75:1:2362:2378	5598582	0	True				
ANR	5598586	AssignmentExpression	m_value += value		5598582	0		+=			
ANR	5598587	Identifier	m_value		5598582	0					
ANR	5598588	Identifier	value		5598582	1					
ANR	5598589	ReturnStatement	return * this ;	75:19:2380:2392	5598582	1	True				
ANR	5598590	UnaryOperationExpression	* this		5598582	0					
ANR	5598591	UnaryOperator	*		5598582	0					
ANR	5598592	Identifier	this		5598582	1					
ANR	5598593	ReturnType	UserLogInt64_t &		5598582	1					
ANR	5598594	Identifier	operator +=		5598582	2					
ANR	5598595	ParameterList	int64_t value		5598582	3					
ANR	5598596	Parameter	int64_t value	74:30:2342:2354	5598582	0	True				
ANR	5598597	ParameterType	int64_t		5598582	0					
ANR	5598598	Identifier	value		5598582	1					
ANR	5598599	CFGEntryNode	ENTRY		5598582		True				
ANR	5598600	CFGExitNode	EXIT		5598582		True				
ANR	5598601	Symbol	* this		5598582						
ANR	5598602	Symbol	this		5598582						
ANR	5598603	Symbol	value		5598582						
ANR	5598604	Symbol	m_value		5598582						
ANR	5598605	DeclStmt									
ANR	5598606	Decl							int64_t	int64_t	m_value
ANR	5598607	ClassDef	UserLogFilesize_t	81:0:2430:2480							
ANR	5598608	Function	WriteUserLog :: WriteUserLog	89:0:2577:2682							
ANR	5598609	FunctionDef	WriteUserLog :: WriteUserLog (bool disable_event_log)		5598608	0					
ANR	5598610	CompoundStatement		90:0:2630:2682	5598608	0					
ANR	5598611	ExpressionStatement	Reset ( )	91:1:2633:2641	5598608	0	True				
ANR	5598612	CallExpression	Reset ( )		5598608	0					
ANR	5598613	Callee	Reset		5598608	0					
ANR	5598614	Identifier	Reset		5598608	0					
ANR	5598615	ArgumentList			5598608	1					
ANR	5598616	ExpressionStatement	m_global_disable = disable_event_log	92:1:2644:2680	5598608	1	True				
ANR	5598617	AssignmentExpression	m_global_disable = disable_event_log		5598608	0		=			
ANR	5598618	Identifier	m_global_disable		5598608	0					
ANR	5598619	Identifier	disable_event_log		5598608	1					
ANR	5598620	Identifier	WriteUserLog :: WriteUserLog		5598608	1					
ANR	5598621	ParameterList	bool disable_event_log		5598608	2					
ANR	5598622	Parameter	bool disable_event_log	89:28:2605:2626	5598608	0	True				
ANR	5598623	ParameterType	bool		5598608	0					
ANR	5598624	Identifier	disable_event_log		5598608	1					
ANR	5598625	CFGEntryNode	ENTRY		5598608		True				
ANR	5598626	CFGExitNode	EXIT		5598608		True				
ANR	5598627	Symbol	m_global_disable		5598608						
ANR	5598628	Symbol	disable_event_log		5598608						
ANR	5598629	Function	WriteUserLog :: WriteUserLog	99:0:2965:3262							
ANR	5598630	FunctionDef	"WriteUserLog :: WriteUserLog (const char * owner , const char * file , int c , int p , int s , bool xml)"		5598629	0					
ANR	5598631	CompoundStatement		105:0:3096:3262	5598629	0					
ANR	5598632	ExpressionStatement	Reset ( )	106:1:3099:3107	5598629	0	True				
ANR	5598633	CallExpression	Reset ( )		5598629	0					
ANR	5598634	Callee	Reset		5598629	0					
ANR	5598635	Identifier	Reset		5598629	0					
ANR	5598636	ArgumentList			5598629	1					
ANR	5598637	ExpressionStatement	m_use_xml = xml	107:1:3110:3125	5598629	1	True				
ANR	5598638	AssignmentExpression	m_use_xml = xml		5598629	0		=			
ANR	5598639	Identifier	m_use_xml		5598629	0					
ANR	5598640	Identifier	xml		5598629	1					
ANR	5598641	ExpressionStatement	m_privsep_uid = 0	111:1:3167:3184	5598629	2	True				
ANR	5598642	AssignmentExpression	m_privsep_uid = 0		5598629	0		=			
ANR	5598643	Identifier	m_privsep_uid		5598629	0					
ANR	5598644	PrimaryExpression	0		5598629	1					
ANR	5598645	ExpressionStatement	m_privsep_gid = 0	112:1:3187:3204	5598629	3	True				
ANR	5598646	AssignmentExpression	m_privsep_gid = 0		5598629	0		=			
ANR	5598647	Identifier	m_privsep_gid		5598629	0					
ANR	5598648	PrimaryExpression	0		5598629	1					
ANR	5598649	ExpressionStatement	"initialize ( owner , NULL , file , c , p , s , NULL )"	115:1:3215:3260	5598629	4	True				
ANR	5598650	CallExpression	"initialize ( owner , NULL , file , c , p , s , NULL )"		5598629	0					
ANR	5598651	Callee	initialize		5598629	0					
ANR	5598652	Identifier	initialize		5598629	0					
ANR	5598653	ArgumentList	owner		5598629	1					
ANR	5598654	Argument	owner		5598629	0					
ANR	5598655	Identifier	owner		5598629	0					
ANR	5598656	Argument	NULL		5598629	1					
ANR	5598657	Identifier	NULL		5598629	0					
ANR	5598658	Argument	file		5598629	2					
ANR	5598659	Identifier	file		5598629	0					
ANR	5598660	Argument	c		5598629	3					
ANR	5598661	Identifier	c		5598629	0					
ANR	5598662	Argument	p		5598629	4					
ANR	5598663	Identifier	p		5598629	0					
ANR	5598664	Argument	s		5598629	5					
ANR	5598665	Identifier	s		5598629	0					
ANR	5598666	Argument	NULL		5598629	6					
ANR	5598667	Identifier	NULL		5598629	0					
ANR	5598668	Identifier	WriteUserLog :: WriteUserLog		5598629	1					
ANR	5598669	ParameterList	"const char * owner , const char * file , int c , int p , int s , bool xml"		5598629	2					
ANR	5598670	Parameter	const char * owner	99:28:2993:3009	5598629	0	True				
ANR	5598671	ParameterType	const char *		5598629	0					
ANR	5598672	Identifier	owner		5598629	1					
ANR	5598673	Parameter	const char * file	100:7:3019:3034	5598629	1	True				
ANR	5598674	ParameterType	const char *		5598629	0					
ANR	5598675	Identifier	file		5598629	1					
ANR	5598676	Parameter	int c	101:7:3044:3048	5598629	2	True				
ANR	5598677	ParameterType	int		5598629	0					
ANR	5598678	Identifier	c		5598629	1					
ANR	5598679	Parameter	int p	102:7:3058:3062	5598629	3	True				
ANR	5598680	ParameterType	int		5598629	0					
ANR	5598681	Identifier	p		5598629	1					
ANR	5598682	Parameter	int s	103:7:3072:3076	5598629	4	True				
ANR	5598683	ParameterType	int		5598629	0					
ANR	5598684	Identifier	s		5598629	1					
ANR	5598685	Parameter	bool xml	104:7:3086:3093	5598629	5	True				
ANR	5598686	ParameterType	bool		5598629	0					
ANR	5598687	Identifier	xml		5598629	1					
ANR	5598688	CFGEntryNode	ENTRY		5598629		True				
ANR	5598689	CFGExitNode	EXIT		5598629		True				
ANR	5598690	Symbol	owner		5598629						
ANR	5598691	Symbol	p		5598629						
ANR	5598692	Symbol	m_privsep_gid		5598629						
ANR	5598693	Symbol	file		5598629						
ANR	5598694	Symbol	c		5598629						
ANR	5598695	Symbol	s		5598629						
ANR	5598696	Symbol	NULL		5598629						
ANR	5598697	Symbol	xml		5598629						
ANR	5598698	Symbol	m_use_xml		5598629						
ANR	5598699	Symbol	m_privsep_uid		5598629						
ANR	5598700	Function	WriteUserLog :: WriteUserLog	118:0:3265:3614							
ANR	5598701	FunctionDef	"WriteUserLog :: WriteUserLog (const char * owner , const char * domain , const char * file , int c , int p , int s , bool xml , const char * gjid)"		5598700	0					
ANR	5598702	CompoundStatement		126:0:3448:3614	5598700	0					
ANR	5598703	ExpressionStatement	Reset ( )	127:1:3451:3458	5598700	0	True				
ANR	5598704	CallExpression	Reset ( )		5598700	0					
ANR	5598705	Callee	Reset		5598700	0					
ANR	5598706	Identifier	Reset		5598700	0					
ANR	5598707	ArgumentList			5598700	1					
ANR	5598708	ExpressionStatement	m_use_xml = xml	128:1:3461:3476	5598700	1	True				
ANR	5598709	AssignmentExpression	m_use_xml = xml		5598700	0		=			
ANR	5598710	Identifier	m_use_xml		5598700	0					
ANR	5598711	Identifier	xml		5598700	1					
ANR	5598712	ExpressionStatement	m_privsep_uid = 0	132:1:3517:3534	5598700	2	True				
ANR	5598713	AssignmentExpression	m_privsep_uid = 0		5598700	0		=			
ANR	5598714	Identifier	m_privsep_uid		5598700	0					
ANR	5598715	PrimaryExpression	0		5598700	1					
ANR	5598716	ExpressionStatement	m_privsep_gid = 0	133:1:3537:3554	5598700	3	True				
ANR	5598717	AssignmentExpression	m_privsep_gid = 0		5598700	0		=			
ANR	5598718	Identifier	m_privsep_gid		5598700	0					
ANR	5598719	PrimaryExpression	0		5598700	1					
ANR	5598720	ExpressionStatement	"initialize ( owner , domain , file , c , p , s , gjid )"	136:1:3565:3612	5598700	4	True				
ANR	5598721	CallExpression	"initialize ( owner , domain , file , c , p , s , gjid )"		5598700	0					
ANR	5598722	Callee	initialize		5598700	0					
ANR	5598723	Identifier	initialize		5598700	0					
ANR	5598724	ArgumentList	owner		5598700	1					
ANR	5598725	Argument	owner		5598700	0					
ANR	5598726	Identifier	owner		5598700	0					
ANR	5598727	Argument	domain		5598700	1					
ANR	5598728	Identifier	domain		5598700	0					
ANR	5598729	Argument	file		5598700	2					
ANR	5598730	Identifier	file		5598700	0					
ANR	5598731	Argument	c		5598700	3					
ANR	5598732	Identifier	c		5598700	0					
ANR	5598733	Argument	p		5598700	4					
ANR	5598734	Identifier	p		5598700	0					
ANR	5598735	Argument	s		5598700	5					
ANR	5598736	Identifier	s		5598700	0					
ANR	5598737	Argument	gjid		5598700	6					
ANR	5598738	Identifier	gjid		5598700	0					
ANR	5598739	Identifier	WriteUserLog :: WriteUserLog		5598700	1					
ANR	5598740	ParameterList	"const char * owner , const char * domain , const char * file , int c , int p , int s , bool xml , const char * gjid"		5598700	2					
ANR	5598741	Parameter	const char * owner	118:28:3293:3309	5598700	0	True				
ANR	5598742	ParameterType	const char *		5598700	0					
ANR	5598743	Identifier	owner		5598700	1					
ANR	5598744	Parameter	const char * domain	119:7:3319:3336	5598700	1	True				
ANR	5598745	ParameterType	const char *		5598700	0					
ANR	5598746	Identifier	domain		5598700	1					
ANR	5598747	Parameter	const char * file	120:7:3346:3361	5598700	2	True				
ANR	5598748	ParameterType	const char *		5598700	0					
ANR	5598749	Identifier	file		5598700	1					
ANR	5598750	Parameter	int c	121:7:3371:3375	5598700	3	True				
ANR	5598751	ParameterType	int		5598700	0					
ANR	5598752	Identifier	c		5598700	1					
ANR	5598753	Parameter	int p	122:7:3385:3389	5598700	4	True				
ANR	5598754	ParameterType	int		5598700	0					
ANR	5598755	Identifier	p		5598700	1					
ANR	5598756	Parameter	int s	123:7:3399:3403	5598700	5	True				
ANR	5598757	ParameterType	int		5598700	0					
ANR	5598758	Identifier	s		5598700	1					
ANR	5598759	Parameter	bool xml	124:7:3413:3420	5598700	6	True				
ANR	5598760	ParameterType	bool		5598700	0					
ANR	5598761	Identifier	xml		5598700	1					
ANR	5598762	Parameter	const char * gjid	125:7:3430:3445	5598700	7	True				
ANR	5598763	ParameterType	const char *		5598700	0					
ANR	5598764	Identifier	gjid		5598700	1					
ANR	5598765	CFGEntryNode	ENTRY		5598700		True				
ANR	5598766	CFGExitNode	EXIT		5598700		True				
ANR	5598767	Symbol	owner		5598700						
ANR	5598768	Symbol	p		5598700						
ANR	5598769	Symbol	m_privsep_gid		5598700						
ANR	5598770	Symbol	file		5598700						
ANR	5598771	Symbol	c		5598700						
ANR	5598772	Symbol	s		5598700						
ANR	5598773	Symbol	xml		5598700						
ANR	5598774	Symbol	domain		5598700						
ANR	5598775	Symbol	m_use_xml		5598700						
ANR	5598776	Symbol	m_privsep_uid		5598700						
ANR	5598777	Symbol	gjid		5598700						
ANR	5598778	Function	WriteUserLog :: ~WriteUserLog	140:0:3631:3717							
ANR	5598779	FunctionDef	WriteUserLog :: ~WriteUserLog ()		5598778	0					
ANR	5598780	CompoundStatement		141:0:3661:3717	5598778	0					
ANR	5598781	ExpressionStatement	FreeGlobalResources ( true )	142:1:3664:3691	5598778	0	True				
ANR	5598782	CallExpression	FreeGlobalResources ( true )		5598778	0					
ANR	5598783	Callee	FreeGlobalResources		5598778	0					
ANR	5598784	Identifier	FreeGlobalResources		5598778	0					
ANR	5598785	ArgumentList	true		5598778	1					
ANR	5598786	Argument	true		5598778	0					
ANR	5598787	Identifier	true		5598778	0					
ANR	5598788	ExpressionStatement	FreeLocalResources ( )	143:1:3694:3715	5598778	1	True				
ANR	5598789	CallExpression	FreeLocalResources ( )		5598778	0					
ANR	5598790	Callee	FreeLocalResources		5598778	0					
ANR	5598791	Identifier	FreeLocalResources		5598778	0					
ANR	5598792	ArgumentList			5598778	1					
ANR	5598793	Identifier	WriteUserLog :: ~WriteUserLog		5598778	1					
ANR	5598794	ParameterList			5598778	2					
ANR	5598795	CFGEntryNode	ENTRY		5598778		True				
ANR	5598796	CFGExitNode	EXIT		5598778		True				
ANR	5598797	Symbol	true		5598778						
ANR	5598798	Function	WriteUserLog :: initialize	151:0:3838:4399							
ANR	5598799	FunctionDef	"WriteUserLog :: initialize (const char * owner , const char * domain , const char * file , int c , int p , int s , const char * gjid)"		5598798	0					
ANR	5598800	CompoundStatement		155:0:3982:4399	5598798	0					
ANR	5598801	IdentifierDeclStatement	priv_state priv ;	156:1:3985:4001	5598798	0	True				
ANR	5598802	IdentifierDecl	priv		5598798	0					
ANR	5598803	IdentifierDeclType	priv_state		5598798	0					
ANR	5598804	Identifier	priv		5598798	1					
ANR	5598805	ExpressionStatement	uninit_user_ids ( )	158:1:4005:4022	5598798	1	True				
ANR	5598806	CallExpression	uninit_user_ids ( )		5598798	0					
ANR	5598807	Callee	uninit_user_ids		5598798	0					
ANR	5598808	Identifier	uninit_user_ids		5598798	0					
ANR	5598809	ArgumentList			5598798	1					
ANR	5598810	IfStatement	"if ( ! init_user_ids ( owner , domain ) )"		5598798	2					
ANR	5598811	Condition	"! init_user_ids ( owner , domain )"	159:5:4029:4059	5598798	0	True				
ANR	5598812	UnaryOperationExpression	"! init_user_ids ( owner , domain )"		5598798	0					
ANR	5598813	UnaryOperator	!		5598798	0					
ANR	5598814	CallExpression	"init_user_ids ( owner , domain )"		5598798	1					
ANR	5598815	Callee	init_user_ids		5598798	0					
ANR	5598816	Identifier	init_user_ids		5598798	0					
ANR	5598817	ArgumentList	owner		5598798	1					
ANR	5598818	Argument	owner		5598798	0					
ANR	5598819	Identifier	owner		5598798	0					
ANR	5598820	Argument	domain		5598798	1					
ANR	5598821	Identifier	domain		5598798	0					
ANR	5598822	CompoundStatement		5:39:80:80	5598798	1					
ANR	5598823	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog::initialize: init_user_ids() failed!\\n"" )"	160:2:4067:4143	5598798	0	True				
ANR	5598824	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog::initialize: init_user_ids() failed!\\n"" )"		5598798	0					
ANR	5598825	Callee	dprintf		5598798	0					
ANR	5598826	Identifier	dprintf		5598798	0					
ANR	5598827	ArgumentList	D_ALWAYS		5598798	1					
ANR	5598828	Argument	D_ALWAYS		5598798	0					
ANR	5598829	Identifier	D_ALWAYS		5598798	0					
ANR	5598830	Argument	"""WriteUserLog::initialize: init_user_ids() failed!\\n"""		5598798	1					
ANR	5598831	PrimaryExpression	"""WriteUserLog::initialize: init_user_ids() failed!\\n"""		5598798	0					
ANR	5598832	ReturnStatement	return false ;	162:2:4147:4159	5598798	1	True				
ANR	5598833	Identifier	false		5598798	0					
ANR	5598834	ExpressionStatement	priv = set_user_priv ( )	166:1:4216:4238	5598798	3	True				
ANR	5598835	AssignmentExpression	priv = set_user_priv ( )		5598798	0		=			
ANR	5598836	Identifier	priv		5598798	0					
ANR	5598837	CallExpression	set_user_priv ( )		5598798	1					
ANR	5598838	Callee	set_user_priv		5598798	0					
ANR	5598839	Identifier	set_user_priv		5598798	0					
ANR	5598840	ArgumentList			5598798	1					
ANR	5598841	IdentifierDeclStatement	"bool res = initialize ( file , c , p , s , gjid ) ;"	169:1:4267:4311	5598798	4	True				
ANR	5598842	IdentifierDecl	"res = initialize ( file , c , p , s , gjid )"		5598798	0					
ANR	5598843	IdentifierDeclType	bool		5598798	0					
ANR	5598844	Identifier	res		5598798	1					
ANR	5598845	AssignmentExpression	"res = initialize ( file , c , p , s , gjid )"		5598798	2		=			
ANR	5598846	Identifier	res		5598798	0					
ANR	5598847	CallExpression	"initialize ( file , c , p , s , gjid )"		5598798	1					
ANR	5598848	Callee	initialize		5598798	0					
ANR	5598849	Identifier	initialize		5598798	0					
ANR	5598850	ArgumentList	file		5598798	1					
ANR	5598851	Argument	file		5598798	0					
ANR	5598852	Identifier	file		5598798	0					
ANR	5598853	Argument	c		5598798	1					
ANR	5598854	Identifier	c		5598798	0					
ANR	5598855	Argument	p		5598798	2					
ANR	5598856	Identifier	p		5598798	0					
ANR	5598857	Argument	s		5598798	3					
ANR	5598858	Identifier	s		5598798	0					
ANR	5598859	Argument	gjid		5598798	4					
ANR	5598860	Identifier	gjid		5598798	0					
ANR	5598861	ExpressionStatement	set_priv ( priv )	172:1:4369:4383	5598798	5	True				
ANR	5598862	CallExpression	set_priv ( priv )		5598798	0					
ANR	5598863	Callee	set_priv		5598798	0					
ANR	5598864	Identifier	set_priv		5598798	0					
ANR	5598865	ArgumentList	priv		5598798	1					
ANR	5598866	Argument	priv		5598798	0					
ANR	5598867	Identifier	priv		5598798	0					
ANR	5598868	ReturnStatement	return res ;	174:1:4387:4397	5598798	6	True				
ANR	5598869	Identifier	res		5598798	0					
ANR	5598870	ReturnType	bool		5598798	1					
ANR	5598871	Identifier	WriteUserLog :: initialize		5598798	2					
ANR	5598872	ParameterList	"const char * owner , const char * domain , const char * file , int c , int p , int s , const char * gjid"		5598798	3					
ANR	5598873	Parameter	const char * owner	152:26:3869:3885	5598798	0	True				
ANR	5598874	ParameterType	const char *		5598798	0					
ANR	5598875	Identifier	owner		5598798	1					
ANR	5598876	Parameter	const char * domain	152:45:3888:3905	5598798	1	True				
ANR	5598877	ParameterType	const char *		5598798	0					
ANR	5598878	Identifier	domain		5598798	1					
ANR	5598879	Parameter	const char * file	153:8:3916:3931	5598798	2	True				
ANR	5598880	ParameterType	const char *		5598798	0					
ANR	5598881	Identifier	file		5598798	1					
ANR	5598882	Parameter	int c	154:8:3942:3946	5598798	3	True				
ANR	5598883	ParameterType	int		5598798	0					
ANR	5598884	Identifier	c		5598798	1					
ANR	5598885	Parameter	int p	154:15:3949:3953	5598798	4	True				
ANR	5598886	ParameterType	int		5598798	0					
ANR	5598887	Identifier	p		5598798	1					
ANR	5598888	Parameter	int s	154:22:3956:3960	5598798	5	True				
ANR	5598889	ParameterType	int		5598798	0					
ANR	5598890	Identifier	s		5598798	1					
ANR	5598891	Parameter	const char * gjid	154:29:3963:3978	5598798	6	True				
ANR	5598892	ParameterType	const char *		5598798	0					
ANR	5598893	Identifier	gjid		5598798	1					
ANR	5598894	CFGEntryNode	ENTRY		5598798		True				
ANR	5598895	CFGExitNode	EXIT		5598798		True				
ANR	5598896	Symbol	owner		5598798						
ANR	5598897	Symbol	res		5598798						
ANR	5598898	Symbol	c		5598798						
ANR	5598899	Symbol	D_ALWAYS		5598798						
ANR	5598900	Symbol	false		5598798						
ANR	5598901	Symbol	set_user_priv		5598798						
ANR	5598902	Symbol	gjid		5598798						
ANR	5598903	Symbol	p		5598798						
ANR	5598904	Symbol	file		5598798						
ANR	5598905	Symbol	s		5598798						
ANR	5598906	Symbol	domain		5598798						
ANR	5598907	Symbol	priv		5598798						
ANR	5598908	Symbol	initialize		5598798						
ANR	5598909	Symbol	init_user_ids		5598798						
ANR	5598910	Function	WriteUserLog :: initialize	177:0:4402:4824							
ANR	5598911	FunctionDef	"WriteUserLog :: initialize (const char * file , int c , int p , int s , const char * gjid)"		5598910	0					
ANR	5598912	CompoundStatement		180:0:4498:4824	5598910	0					
ANR	5598913	ExpressionStatement	FreeLocalResources ( )	182:1:4526:4547	5598910	0	True				
ANR	5598914	CallExpression	FreeLocalResources ( )		5598910	0					
ANR	5598915	Callee	FreeLocalResources		5598910	0					
ANR	5598916	Identifier	FreeLocalResources		5598910	0					
ANR	5598917	ArgumentList			5598910	1					
ANR	5598918	ExpressionStatement	m_path = strdup ( file )	183:1:4550:4573	5598910	1	True				
ANR	5598919	AssignmentExpression	m_path = strdup ( file )		5598910	0		=			
ANR	5598920	Identifier	m_path		5598910	0					
ANR	5598921	CallExpression	strdup ( file )		5598910	1					
ANR	5598922	Callee	strdup		5598910	0					
ANR	5598923	Identifier	strdup		5598910	0					
ANR	5598924	ArgumentList	file		5598910	1					
ANR	5598925	Argument	file		5598910	0					
ANR	5598926	Identifier	file		5598910	0					
ANR	5598927	ExpressionStatement	Configure ( false )	184:1:4576:4592	5598910	2	True				
ANR	5598928	CallExpression	Configure ( false )		5598910	0					
ANR	5598929	Callee	Configure		5598910	0					
ANR	5598930	Identifier	Configure		5598910	0					
ANR	5598931	ArgumentList	false		5598910	1					
ANR	5598932	Argument	false		5598910	0					
ANR	5598933	Identifier	false		5598910	0					
ANR	5598934	IfStatement	"if ( m_userlog_enable && ! openFile ( file , true , m_enable_locking , true , m_lock , m_fp ) )"		5598910	3					
ANR	5598935	Condition	"m_userlog_enable && ! openFile ( file , true , m_enable_locking , true , m_lock , m_fp )"	185:6:4600:4681	5598910	0	True				
ANR	5598936	AndExpression	"m_userlog_enable && ! openFile ( file , true , m_enable_locking , true , m_lock , m_fp )"		5598910	0		&&			
ANR	5598937	Identifier	m_userlog_enable		5598910	0					
ANR	5598938	UnaryOperationExpression	"! openFile ( file , true , m_enable_locking , true , m_lock , m_fp )"		5598910	1					
ANR	5598939	UnaryOperator	!		5598910	0					
ANR	5598940	CallExpression	"openFile ( file , true , m_enable_locking , true , m_lock , m_fp )"		5598910	1					
ANR	5598941	Callee	openFile		5598910	0					
ANR	5598942	Identifier	openFile		5598910	0					
ANR	5598943	ArgumentList	file		5598910	1					
ANR	5598944	Argument	file		5598910	0					
ANR	5598945	Identifier	file		5598910	0					
ANR	5598946	Argument	true		5598910	1					
ANR	5598947	Identifier	true		5598910	0					
ANR	5598948	Argument	m_enable_locking		5598910	2					
ANR	5598949	Identifier	m_enable_locking		5598910	0					
ANR	5598950	Argument	true		5598910	3					
ANR	5598951	Identifier	true		5598910	0					
ANR	5598952	Argument	m_lock		5598910	4					
ANR	5598953	Identifier	m_lock		5598910	0					
ANR	5598954	Argument	m_fp		5598910	5					
ANR	5598955	Identifier	m_fp		5598910	0					
ANR	5598956	CompoundStatement		7:65:186:186	5598910	1					
ANR	5598957	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog::initialize: failed to open file\\n"" )"	187:2:4689:4757	5598910	0	True				
ANR	5598958	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog::initialize: failed to open file\\n"" )"		5598910	0					
ANR	5598959	Callee	dprintf		5598910	0					
ANR	5598960	Identifier	dprintf		5598910	0					
ANR	5598961	ArgumentList	D_ALWAYS		5598910	1					
ANR	5598962	Argument	D_ALWAYS		5598910	0					
ANR	5598963	Identifier	D_ALWAYS		5598910	0					
ANR	5598964	Argument	"""WriteUserLog::initialize: failed to open file\\n"""		5598910	1					
ANR	5598965	PrimaryExpression	"""WriteUserLog::initialize: failed to open file\\n"""		5598910	0					
ANR	5598966	ReturnStatement	return false ;	188:2:4761:4773	5598910	1	True				
ANR	5598967	Identifier	false		5598910	0					
ANR	5598968	ReturnStatement	"return internalInitialize ( c , p , s , gjid ) ;"	191:1:4780:4822	5598910	4	True				
ANR	5598969	CallExpression	"internalInitialize ( c , p , s , gjid )"		5598910	0					
ANR	5598970	Callee	internalInitialize		5598910	0					
ANR	5598971	Identifier	internalInitialize		5598910	0					
ANR	5598972	ArgumentList	c		5598910	1					
ANR	5598973	Argument	c		5598910	0					
ANR	5598974	Identifier	c		5598910	0					
ANR	5598975	Argument	p		5598910	1					
ANR	5598976	Identifier	p		5598910	0					
ANR	5598977	Argument	s		5598910	2					
ANR	5598978	Identifier	s		5598910	0					
ANR	5598979	Argument	gjid		5598910	3					
ANR	5598980	Identifier	gjid		5598910	0					
ANR	5598981	ReturnType	bool		5598910	1					
ANR	5598982	Identifier	WriteUserLog :: initialize		5598910	2					
ANR	5598983	ParameterList	"const char * file , int c , int p , int s , const char * gjid"		5598910	3					
ANR	5598984	Parameter	const char * file	178:26:4433:4448	5598910	0	True				
ANR	5598985	ParameterType	const char *		5598910	0					
ANR	5598986	Identifier	file		5598910	1					
ANR	5598987	Parameter	int c	178:44:4451:4455	5598910	1	True				
ANR	5598988	ParameterType	int		5598910	0					
ANR	5598989	Identifier	c		5598910	1					
ANR	5598990	Parameter	int p	178:51:4458:4462	5598910	2	True				
ANR	5598991	ParameterType	int		5598910	0					
ANR	5598992	Identifier	p		5598910	1					
ANR	5598993	Parameter	int s	178:58:4465:4469	5598910	3	True				
ANR	5598994	ParameterType	int		5598910	0					
ANR	5598995	Identifier	s		5598910	1					
ANR	5598996	Parameter	const char * gjid	179:8:4480:4495	5598910	4	True				
ANR	5598997	ParameterType	const char *		5598910	0					
ANR	5598998	Identifier	gjid		5598910	1					
ANR	5598999	CFGEntryNode	ENTRY		5598910		True				
ANR	5599000	CFGExitNode	EXIT		5598910		True				
ANR	5599001	Symbol	m_enable_locking		5598910						
ANR	5599002	Symbol	c		5598910						
ANR	5599003	Symbol	openFile		5598910						
ANR	5599004	Symbol	false		5598910						
ANR	5599005	Symbol	D_ALWAYS		5598910						
ANR	5599006	Symbol	gjid		5598910						
ANR	5599007	Symbol	m_fp		5598910						
ANR	5599008	Symbol	m_userlog_enable		5598910						
ANR	5599009	Symbol	p		5598910						
ANR	5599010	Symbol	m_lock		5598910						
ANR	5599011	Symbol	file		5598910						
ANR	5599012	Symbol	s		5598910						
ANR	5599013	Symbol	m_path		5598910						
ANR	5599014	Symbol	true		5598910						
ANR	5599015	Symbol	internalInitialize		5598910						
ANR	5599016	Symbol	strdup		5598910						
ANR	5599017	Function	WriteUserLog :: initialize	194:0:4827:4964							
ANR	5599018	FunctionDef	"WriteUserLog :: initialize (int c , int p , int s , const char * gjid)"		5599017	0					
ANR	5599019	CompoundStatement		196:0:4898:4964	5599017	0					
ANR	5599020	ExpressionStatement	Configure ( false )	197:1:4901:4917	5599017	0	True				
ANR	5599021	CallExpression	Configure ( false )		5599017	0					
ANR	5599022	Callee	Configure		5599017	0					
ANR	5599023	Identifier	Configure		5599017	0					
ANR	5599024	ArgumentList	false		5599017	1					
ANR	5599025	Argument	false		5599017	0					
ANR	5599026	Identifier	false		5599017	0					
ANR	5599027	ReturnStatement	"return internalInitialize ( c , p , s , gjid ) ;"	198:1:4920:4962	5599017	1	True				
ANR	5599028	CallExpression	"internalInitialize ( c , p , s , gjid )"		5599017	0					
ANR	5599029	Callee	internalInitialize		5599017	0					
ANR	5599030	Identifier	internalInitialize		5599017	0					
ANR	5599031	ArgumentList	c		5599017	1					
ANR	5599032	Argument	c		5599017	0					
ANR	5599033	Identifier	c		5599017	0					
ANR	5599034	Argument	p		5599017	1					
ANR	5599035	Identifier	p		5599017	0					
ANR	5599036	Argument	s		5599017	2					
ANR	5599037	Identifier	s		5599017	0					
ANR	5599038	Argument	gjid		5599017	3					
ANR	5599039	Identifier	gjid		5599017	0					
ANR	5599040	ReturnType	bool		5599017	1					
ANR	5599041	Identifier	WriteUserLog :: initialize		5599017	2					
ANR	5599042	ParameterList	"int c , int p , int s , const char * gjid"		5599017	3					
ANR	5599043	Parameter	int c	195:26:4858:4862	5599017	0	True				
ANR	5599044	ParameterType	int		5599017	0					
ANR	5599045	Identifier	c		5599017	1					
ANR	5599046	Parameter	int p	195:33:4865:4869	5599017	1	True				
ANR	5599047	ParameterType	int		5599017	0					
ANR	5599048	Identifier	p		5599017	1					
ANR	5599049	Parameter	int s	195:40:4872:4876	5599017	2	True				
ANR	5599050	ParameterType	int		5599017	0					
ANR	5599051	Identifier	s		5599017	1					
ANR	5599052	Parameter	const char * gjid	195:47:4879:4894	5599017	3	True				
ANR	5599053	ParameterType	const char *		5599017	0					
ANR	5599054	Identifier	gjid		5599017	1					
ANR	5599055	CFGEntryNode	ENTRY		5599017		True				
ANR	5599056	CFGExitNode	EXIT		5599017		True				
ANR	5599057	Symbol	p		5599017						
ANR	5599058	Symbol	c		5599017						
ANR	5599059	Symbol	s		5599017						
ANR	5599060	Symbol	false		5599017						
ANR	5599061	Symbol	internalInitialize		5599017						
ANR	5599062	Symbol	gjid		5599017						
ANR	5599063	Function	WriteUserLog :: internalInitialize	202:0:5026:5513							
ANR	5599064	FunctionDef	"WriteUserLog :: internalInitialize (int c , int p , int s , const char * gjid)"		5599063	0					
ANR	5599065	CompoundStatement		204:0:5105:5513	5599063	0					
ANR	5599066	ExpressionStatement	m_cluster = c	206:1:5109:5122	5599063	0	True				
ANR	5599067	AssignmentExpression	m_cluster = c		5599063	0		=			
ANR	5599068	Identifier	m_cluster		5599063	0					
ANR	5599069	Identifier	c		5599063	1					
ANR	5599070	ExpressionStatement	m_proc = p	207:1:5125:5135	5599063	1	True				
ANR	5599071	AssignmentExpression	m_proc = p		5599063	0		=			
ANR	5599072	Identifier	m_proc		5599063	0					
ANR	5599073	Identifier	p		5599063	1					
ANR	5599074	ExpressionStatement	m_subproc = s	208:1:5138:5151	5599063	2	True				
ANR	5599075	AssignmentExpression	m_subproc = s		5599063	0		=			
ANR	5599076	Identifier	m_subproc		5599063	0					
ANR	5599077	Identifier	s		5599063	1					
ANR	5599078	IfStatement	if ( ! m_global_disable && m_global_path && ! m_global_fp )		5599063	3					
ANR	5599079	Condition	! m_global_disable && m_global_path && ! m_global_fp	212:6:5292:5341	5599063	0	True				
ANR	5599080	AndExpression	! m_global_disable && m_global_path && ! m_global_fp		5599063	0		&&			
ANR	5599081	UnaryOperationExpression	! m_global_disable		5599063	0					
ANR	5599082	UnaryOperator	!		5599063	0					
ANR	5599083	Identifier	m_global_disable		5599063	1					
ANR	5599084	AndExpression	m_global_path && ! m_global_fp		5599063	1		&&			
ANR	5599085	Identifier	m_global_path		5599063	0					
ANR	5599086	UnaryOperationExpression	! m_global_fp		5599063	1					
ANR	5599087	UnaryOperator	!		5599063	0					
ANR	5599088	Identifier	m_global_fp		5599063	1					
ANR	5599089	CompoundStatement		10:2:243:278	5599063	1					
ANR	5599090	IdentifierDeclStatement	priv_state priv = set_condor_priv ( ) ;	213:2:5349:5384	5599063	0	True				
ANR	5599091	IdentifierDecl	priv = set_condor_priv ( )		5599063	0					
ANR	5599092	IdentifierDeclType	priv_state		5599063	0					
ANR	5599093	Identifier	priv		5599063	1					
ANR	5599094	AssignmentExpression	priv = set_condor_priv ( )		5599063	2		=			
ANR	5599095	Identifier	priv		5599063	0					
ANR	5599096	CallExpression	set_condor_priv ( )		5599063	1					
ANR	5599097	Callee	set_condor_priv		5599063	0					
ANR	5599098	Identifier	set_condor_priv		5599063	0					
ANR	5599099	ArgumentList			5599063	1					
ANR	5599100	ExpressionStatement	openGlobalLog ( true )	214:2:5388:5409	5599063	1	True				
ANR	5599101	CallExpression	openGlobalLog ( true )		5599063	0					
ANR	5599102	Callee	openGlobalLog		5599063	0					
ANR	5599103	Identifier	openGlobalLog		5599063	0					
ANR	5599104	ArgumentList	true		5599063	1					
ANR	5599105	Argument	true		5599063	0					
ANR	5599106	Identifier	true		5599063	0					
ANR	5599107	ExpressionStatement	set_priv ( priv )	215:2:5413:5429	5599063	2	True				
ANR	5599108	CallExpression	set_priv ( priv )		5599063	0					
ANR	5599109	Callee	set_priv		5599063	0					
ANR	5599110	Identifier	set_priv		5599063	0					
ANR	5599111	ArgumentList	priv		5599063	1					
ANR	5599112	Argument	priv		5599063	0					
ANR	5599113	Identifier	priv		5599063	0					
ANR	5599114	IfStatement	if ( gjid )		5599063	4					
ANR	5599115	Condition	gjid	218:4:5439:5442	5599063	0	True				
ANR	5599116	Identifier	gjid		5599063	0					
ANR	5599117	CompoundStatement		15:10:339:339	5599063	1					
ANR	5599118	ExpressionStatement	m_gjid = strdup ( gjid )	219:2:5449:5470	5599063	0	True				
ANR	5599119	AssignmentExpression	m_gjid = strdup ( gjid )		5599063	0		=			
ANR	5599120	Identifier	m_gjid		5599063	0					
ANR	5599121	CallExpression	strdup ( gjid )		5599063	1					
ANR	5599122	Callee	strdup		5599063	0					
ANR	5599123	Identifier	strdup		5599063	0					
ANR	5599124	ArgumentList	gjid		5599063	1					
ANR	5599125	Argument	gjid		5599063	0					
ANR	5599126	Identifier	gjid		5599063	0					
ANR	5599127	ExpressionStatement	m_initialized = true	222:1:5477:5497	5599063	5	True				
ANR	5599128	AssignmentExpression	m_initialized = true		5599063	0		=			
ANR	5599129	Identifier	m_initialized		5599063	0					
ANR	5599130	Identifier	true		5599063	1					
ANR	5599131	ReturnStatement	return true ;	223:1:5500:5511	5599063	6	True				
ANR	5599132	Identifier	true		5599063	0					
ANR	5599133	ReturnType	bool		5599063	1					
ANR	5599134	Identifier	WriteUserLog :: internalInitialize		5599063	2					
ANR	5599135	ParameterList	"int c , int p , int s , const char * gjid"		5599063	3					
ANR	5599136	Parameter	int c	203:34:5065:5069	5599063	0	True				
ANR	5599137	ParameterType	int		5599063	0					
ANR	5599138	Identifier	c		5599063	1					
ANR	5599139	Parameter	int p	203:41:5072:5076	5599063	1	True				
ANR	5599140	ParameterType	int		5599063	0					
ANR	5599141	Identifier	p		5599063	1					
ANR	5599142	Parameter	int s	203:48:5079:5083	5599063	2	True				
ANR	5599143	ParameterType	int		5599063	0					
ANR	5599144	Identifier	s		5599063	1					
ANR	5599145	Parameter	const char * gjid	203:55:5086:5101	5599063	3	True				
ANR	5599146	ParameterType	const char *		5599063	0					
ANR	5599147	Identifier	gjid		5599063	1					
ANR	5599148	CFGEntryNode	ENTRY		5599063		True				
ANR	5599149	CFGExitNode	EXIT		5599063		True				
ANR	5599150	Symbol	m_global_disable		5599063						
ANR	5599151	Symbol	m_initialized		5599063						
ANR	5599152	Symbol	set_condor_priv		5599063						
ANR	5599153	Symbol	c		5599063						
ANR	5599154	Symbol	m_global_path		5599063						
ANR	5599155	Symbol	m_subproc		5599063						
ANR	5599156	Symbol	m_cluster		5599063						
ANR	5599157	Symbol	m_proc		5599063						
ANR	5599158	Symbol	gjid		5599063						
ANR	5599159	Symbol	p		5599063						
ANR	5599160	Symbol	s		5599063						
ANR	5599161	Symbol	m_global_fp		5599063						
ANR	5599162	Symbol	true		5599063						
ANR	5599163	Symbol	priv		5599063						
ANR	5599164	Symbol	strdup		5599063						
ANR	5599165	Symbol	m_gjid		5599063						
ANR	5599166	Function	WriteUserLog :: Configure	227:0:5557:8599							
ANR	5599167	FunctionDef	WriteUserLog :: Configure (bool force)		5599166	0					
ANR	5599168	CompoundStatement		229:0:5600:8599	5599166	0					
ANR	5599169	IdentifierDeclStatement	bool doLocalLocking = false ;	232:1:5699:5726	5599166	0	True				
ANR	5599170	IdentifierDecl	doLocalLocking = false		5599166	0					
ANR	5599171	IdentifierDeclType	bool		5599166	0					
ANR	5599172	Identifier	doLocalLocking		5599166	1					
ANR	5599173	AssignmentExpression	doLocalLocking = false		5599166	2		=			
ANR	5599174	Identifier	false		5599166	0					
ANR	5599175	Identifier	false		5599166	1					
ANR	5599176	IdentifierDeclStatement	priv_state previous ;	233:1:5729:5748	5599166	1	True				
ANR	5599177	IdentifierDecl	previous		5599166	0					
ANR	5599178	IdentifierDeclType	priv_state		5599166	0					
ANR	5599179	Identifier	previous		5599166	1					
ANR	5599180	IfStatement	if ( m_configured && ( ! force ) )		5599166	2					
ANR	5599181	Condition	m_configured && ( ! force )	235:7:5825:5850	5599166	0	True				
ANR	5599182	AndExpression	m_configured && ( ! force )		5599166	0		&&			
ANR	5599183	Identifier	m_configured		5599166	0					
ANR	5599184	UnaryOperationExpression	! force		5599166	1					
ANR	5599185	UnaryOperator	!		5599166	0					
ANR	5599186	Identifier	force		5599166	1					
ANR	5599187	CompoundStatement		7:37:254:254	5599166	1					
ANR	5599188	ReturnStatement	return true ;	236:2:5859:5870	5599166	0	True				
ANR	5599189	Identifier	true		5599166	0					
ANR	5599190	ExpressionStatement	FreeGlobalResources ( false )	238:1:5876:5904	5599166	3	True				
ANR	5599191	CallExpression	FreeGlobalResources ( false )		5599166	0					
ANR	5599192	Callee	FreeGlobalResources		5599166	0					
ANR	5599193	Identifier	FreeGlobalResources		5599166	0					
ANR	5599194	ArgumentList	false		5599166	1					
ANR	5599195	Argument	false		5599166	0					
ANR	5599196	Identifier	false		5599166	0					
ANR	5599197	ExpressionStatement	m_configured = true	239:1:5907:5926	5599166	4	True				
ANR	5599198	AssignmentExpression	m_configured = true		5599166	0		=			
ANR	5599199	Identifier	m_configured		5599166	0					
ANR	5599200	Identifier	true		5599166	1					
ANR	5599201	ExpressionStatement	"m_enable_fsync = param_boolean ( ""ENABLE_USERLOG_FSYNC"" , true )"	241:1:5930:5992	5599166	5	True				
ANR	5599202	AssignmentExpression	"m_enable_fsync = param_boolean ( ""ENABLE_USERLOG_FSYNC"" , true )"		5599166	0		=			
ANR	5599203	Identifier	m_enable_fsync		5599166	0					
ANR	5599204	CallExpression	"param_boolean ( ""ENABLE_USERLOG_FSYNC"" , true )"		5599166	1					
ANR	5599205	Callee	param_boolean		5599166	0					
ANR	5599206	Identifier	param_boolean		5599166	0					
ANR	5599207	ArgumentList	"""ENABLE_USERLOG_FSYNC"""		5599166	1					
ANR	5599208	Argument	"""ENABLE_USERLOG_FSYNC"""		5599166	0					
ANR	5599209	PrimaryExpression	"""ENABLE_USERLOG_FSYNC"""		5599166	0					
ANR	5599210	Argument	true		5599166	1					
ANR	5599211	Identifier	true		5599166	0					
ANR	5599212	ExpressionStatement	"m_enable_locking = param_boolean ( ""ENABLE_USERLOG_LOCKING"" , true )"	242:1:5995:6061	5599166	6	True				
ANR	5599213	AssignmentExpression	"m_enable_locking = param_boolean ( ""ENABLE_USERLOG_LOCKING"" , true )"		5599166	0		=			
ANR	5599214	Identifier	m_enable_locking		5599166	0					
ANR	5599215	CallExpression	"param_boolean ( ""ENABLE_USERLOG_LOCKING"" , true )"		5599166	1					
ANR	5599216	Callee	param_boolean		5599166	0					
ANR	5599217	Identifier	param_boolean		5599166	0					
ANR	5599218	ArgumentList	"""ENABLE_USERLOG_LOCKING"""		5599166	1					
ANR	5599219	Argument	"""ENABLE_USERLOG_LOCKING"""		5599166	0					
ANR	5599220	PrimaryExpression	"""ENABLE_USERLOG_LOCKING"""		5599166	0					
ANR	5599221	Argument	true		5599166	1					
ANR	5599222	Identifier	true		5599166	0					
ANR	5599223	ExpressionStatement	"m_global_path = param ( ""EVENT_LOG"" )"	244:1:6065:6101	5599166	7	True				
ANR	5599224	AssignmentExpression	"m_global_path = param ( ""EVENT_LOG"" )"		5599166	0		=			
ANR	5599225	Identifier	m_global_path		5599166	0					
ANR	5599226	CallExpression	"param ( ""EVENT_LOG"" )"		5599166	1					
ANR	5599227	Callee	param		5599166	0					
ANR	5599228	Identifier	param		5599166	0					
ANR	5599229	ArgumentList	"""EVENT_LOG"""		5599166	1					
ANR	5599230	Argument	"""EVENT_LOG"""		5599166	0					
ANR	5599231	PrimaryExpression	"""EVENT_LOG"""		5599166	0					
ANR	5599232	IfStatement	if ( NULL == m_global_path )		5599166	8					
ANR	5599233	Condition	NULL == m_global_path	245:6:6109:6129	5599166	0	True				
ANR	5599234	EqualityExpression	NULL == m_global_path		5599166	0		==			
ANR	5599235	Identifier	NULL		5599166	0					
ANR	5599236	Identifier	m_global_path		5599166	1					
ANR	5599237	CompoundStatement		17:30:532:532	5599166	1					
ANR	5599238	ReturnStatement	return true ;	246:2:6137:6148	5599166	0	True				
ANR	5599239	Identifier	true		5599166	0					
ANR	5599240	ExpressionStatement	"m_global_stat = new StatWrapper ( m_global_path , StatWrapper :: STATOP_NONE )"	248:1:6154:6228	5599166	9	True				
ANR	5599241	AssignmentExpression	"m_global_stat = new StatWrapper ( m_global_path , StatWrapper :: STATOP_NONE )"		5599166	0		=			
ANR	5599242	Identifier	m_global_stat		5599166	0					
ANR	5599243	Expression	"m_global_path , StatWrapper :: STATOP_NONE"		5599166	1					
ANR	5599244	Identifier	m_global_path		5599166	0					
ANR	5599245	Identifier	StatWrapper :: STATOP_NONE		5599166	1					
ANR	5599246	ExpressionStatement	m_global_state = new WriteUserLogState ( )	249:1:6231:6272	5599166	10	True				
ANR	5599247	AssignmentExpression	m_global_state = new WriteUserLogState ( )		5599166	0		=			
ANR	5599248	Identifier	m_global_state		5599166	0					
ANR	5599249	UnaryExpression	new WriteUserLogState ( )		5599166	1					
ANR	5599250	ExpressionStatement	"m_rotation_lock_path = param ( ""EVENT_LOG_ROTATION_LOCK"" )"	252:1:6277:6334	5599166	11	True				
ANR	5599251	AssignmentExpression	"m_rotation_lock_path = param ( ""EVENT_LOG_ROTATION_LOCK"" )"		5599166	0		=			
ANR	5599252	Identifier	m_rotation_lock_path		5599166	0					
ANR	5599253	CallExpression	"param ( ""EVENT_LOG_ROTATION_LOCK"" )"		5599166	1					
ANR	5599254	Callee	param		5599166	0					
ANR	5599255	Identifier	param		5599166	0					
ANR	5599256	ArgumentList	"""EVENT_LOG_ROTATION_LOCK"""		5599166	1					
ANR	5599257	Argument	"""EVENT_LOG_ROTATION_LOCK"""		5599166	0					
ANR	5599258	PrimaryExpression	"""EVENT_LOG_ROTATION_LOCK"""		5599166	0					
ANR	5599259	IfStatement	if ( NULL == m_rotation_lock_path )		5599166	12					
ANR	5599260	Condition	NULL == m_rotation_lock_path	253:6:6342:6369	5599166	0	True				
ANR	5599261	EqualityExpression	NULL == m_rotation_lock_path		5599166	0		==			
ANR	5599262	Identifier	NULL		5599166	0					
ANR	5599263	Identifier	m_rotation_lock_path		5599166	1					
ANR	5599264	CompoundStatement		28:2:800:868	5599166	1					
ANR	5599265	IdentifierDeclStatement	"bool new_locking = param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true ) ;"	256:2:6401:6469	5599166	0	True				
ANR	5599266	IdentifierDecl	"new_locking = param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true )"		5599166	0					
ANR	5599267	IdentifierDeclType	bool		5599166	0					
ANR	5599268	Identifier	new_locking		5599166	1					
ANR	5599269	AssignmentExpression	"new_locking = param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true )"		5599166	2		=			
ANR	5599270	Identifier	new_locking		5599166	0					
ANR	5599271	CallExpression	"param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true )"		5599166	1					
ANR	5599272	Callee	param_boolean		5599166	0					
ANR	5599273	Identifier	param_boolean		5599166	0					
ANR	5599274	ArgumentList	"""CREATE_LOCKS_ON_LOCAL_DISK"""		5599166	1					
ANR	5599275	Argument	"""CREATE_LOCKS_ON_LOCAL_DISK"""		5599166	0					
ANR	5599276	PrimaryExpression	"""CREATE_LOCKS_ON_LOCAL_DISK"""		5599166	0					
ANR	5599277	Argument	true		5599166	1					
ANR	5599278	Identifier	true		5599166	0					
ANR	5599279	IfStatement	if ( new_locking )		5599166	1					
ANR	5599280	Condition	new_locking	257:6:6477:6487	5599166	0	True				
ANR	5599281	Identifier	new_locking		5599166	0					
ANR	5599282	CompoundStatement		29:18:888:888	5599166	1					
ANR	5599283	ExpressionStatement	previous = set_priv ( PRIV_CONDOR )	258:3:6494:6526	5599166	0	True				
ANR	5599284	AssignmentExpression	previous = set_priv ( PRIV_CONDOR )		5599166	0		=			
ANR	5599285	Identifier	previous		5599166	0					
ANR	5599286	CallExpression	set_priv ( PRIV_CONDOR )		5599166	1					
ANR	5599287	Callee	set_priv		5599166	0					
ANR	5599288	Identifier	set_priv		5599166	0					
ANR	5599289	ArgumentList	PRIV_CONDOR		5599166	1					
ANR	5599290	Argument	PRIV_CONDOR		5599166	0					
ANR	5599291	Identifier	PRIV_CONDOR		5599166	0					
ANR	5599292	ExpressionStatement	"m_rotation_lock = new FileLock ( m_global_path , true , false )"	259:3:6531:6589	5599166	1	True				
ANR	5599293	AssignmentExpression	"m_rotation_lock = new FileLock ( m_global_path , true , false )"		5599166	0		=			
ANR	5599294	Identifier	m_rotation_lock		5599166	0					
ANR	5599295	Expression	"m_global_path , true , false"		5599166	1					
ANR	5599296	Identifier	m_global_path		5599166	0					
ANR	5599297	Expression	"true , false"		5599166	1					
ANR	5599298	Identifier	true		5599166	0					
ANR	5599299	Identifier	false		5599166	1					
ANR	5599300	IfStatement	if ( m_rotation_lock -> initSucceeded ( ) )		5599166	2					
ANR	5599301	Condition	m_rotation_lock -> initSucceeded ( )	260:7:6598:6629	5599166	0	True				
ANR	5599302	CallExpression	m_rotation_lock -> initSucceeded ( )		5599166	0					
ANR	5599303	Callee	m_rotation_lock -> initSucceeded		5599166	0					
ANR	5599304	PtrMemberAccess	m_rotation_lock -> initSucceeded		5599166	0					
ANR	5599305	Identifier	m_rotation_lock		5599166	0					
ANR	5599306	Identifier	initSucceeded		5599166	1					
ANR	5599307	ArgumentList			5599166	1					
ANR	5599308	CompoundStatement		32:41:1031:1031	5599166	1					
ANR	5599309	ExpressionStatement	doLocalLocking = true	261:4:6638:6659	5599166	0	True				
ANR	5599310	AssignmentExpression	doLocalLocking = true		5599166	0		=			
ANR	5599311	Identifier	doLocalLocking		5599166	0					
ANR	5599312	Identifier	true		5599166	1					
ANR	5599313	ElseStatement	else		5599166	0					
ANR	5599314	CompoundStatement		34:10:1072:1072	5599166	0					
ANR	5599315	Statement	delete	263:4:6679:6684	5599166	0	True				
ANR	5599316	ExpressionStatement	m_rotation_lock	263:11:6686:6701	5599166	1	True				
ANR	5599317	Identifier	m_rotation_lock		5599166	0					
ANR	5599318	ExpressionStatement	set_priv ( previous )	265:3:6711:6729	5599166	3	True				
ANR	5599319	CallExpression	set_priv ( previous )		5599166	0					
ANR	5599320	Callee	set_priv		5599166	0					
ANR	5599321	Identifier	set_priv		5599166	0					
ANR	5599322	ArgumentList	previous		5599166	1					
ANR	5599323	Argument	previous		5599166	0					
ANR	5599324	Identifier	previous		5599166	0					
ANR	5599325	IfStatement	if ( ! doLocalLocking )		5599166	2					
ANR	5599326	Condition	! doLocalLocking	268:6:6749:6763	5599166	0	True				
ANR	5599327	UnaryOperationExpression	! doLocalLocking		5599166	0					
ANR	5599328	UnaryOperator	!		5599166	0					
ANR	5599329	Identifier	doLocalLocking		5599166	1					
ANR	5599330	CompoundStatement		42:3:1210:1241	5599166	1					
ANR	5599331	IdentifierDeclStatement	int len = strlen ( m_global_path ) + 6 ;	269:3:6771:6806	5599166	0	True				
ANR	5599332	IdentifierDecl	len = strlen ( m_global_path ) + 6		5599166	0					
ANR	5599333	IdentifierDeclType	int		5599166	0					
ANR	5599334	Identifier	len		5599166	1					
ANR	5599335	AssignmentExpression	len = strlen ( m_global_path ) + 6		5599166	2		=			
ANR	5599336	Identifier	len		5599166	0					
ANR	5599337	AdditiveExpression	strlen ( m_global_path ) + 6		5599166	1		+			
ANR	5599338	CallExpression	strlen ( m_global_path )		5599166	0					
ANR	5599339	Callee	strlen		5599166	0					
ANR	5599340	Identifier	strlen		5599166	0					
ANR	5599341	ArgumentList	m_global_path		5599166	1					
ANR	5599342	Argument	m_global_path		5599166	0					
ANR	5599343	Identifier	m_global_path		5599166	0					
ANR	5599344	PrimaryExpression	6		5599166	1					
ANR	5599345	IdentifierDeclStatement	char * tmp = ( char * ) malloc ( len ) ;	270:3:6811:6842	5599166	1	True				
ANR	5599346	IdentifierDecl	* tmp = ( char * ) malloc ( len )		5599166	0					
ANR	5599347	IdentifierDeclType	char *		5599166	0					
ANR	5599348	Identifier	tmp		5599166	1					
ANR	5599349	AssignmentExpression	* tmp = ( char * ) malloc ( len )		5599166	2		=			
ANR	5599350	Identifier	tmp		5599166	0					
ANR	5599351	CastExpression	( char * ) malloc ( len )		5599166	1					
ANR	5599352	CastTarget	char *		5599166	0					
ANR	5599353	CallExpression	malloc ( len )		5599166	1					
ANR	5599354	Callee	malloc		5599166	0					
ANR	5599355	Identifier	malloc		5599166	0					
ANR	5599356	ArgumentList	len		5599166	1					
ANR	5599357	Argument	len		5599166	0					
ANR	5599358	Identifier	len		5599166	0					
ANR	5599359	ExpressionStatement	"snprintf ( tmp , len , ""%s.lock"" , m_global_path )"	271:3:6847:6893	5599166	2	True				
ANR	5599360	CallExpression	"snprintf ( tmp , len , ""%s.lock"" , m_global_path )"		5599166	0					
ANR	5599361	Callee	snprintf		5599166	0					
ANR	5599362	Identifier	snprintf		5599166	0					
ANR	5599363	ArgumentList	tmp		5599166	1					
ANR	5599364	Argument	tmp		5599166	0					
ANR	5599365	Identifier	tmp		5599166	0					
ANR	5599366	Argument	len		5599166	1					
ANR	5599367	Identifier	len		5599166	0					
ANR	5599368	Argument	"""%s.lock"""		5599166	2					
ANR	5599369	PrimaryExpression	"""%s.lock"""		5599166	0					
ANR	5599370	Argument	m_global_path		5599166	3					
ANR	5599371	Identifier	m_global_path		5599166	0					
ANR	5599372	ExpressionStatement	m_rotation_lock_path = tmp	272:3:6898:6924	5599166	3	True				
ANR	5599373	AssignmentExpression	m_rotation_lock_path = tmp		5599166	0		=			
ANR	5599374	Identifier	m_rotation_lock_path		5599166	0					
ANR	5599375	Identifier	tmp		5599166	1					
ANR	5599376	IfStatement	if ( ! doLocalLocking )		5599166	13					
ANR	5599377	Condition	! doLocalLocking	275:5:6938:6952	5599166	0	True				
ANR	5599378	UnaryOperationExpression	! doLocalLocking		5599166	0					
ANR	5599379	UnaryOperator	!		5599166	0					
ANR	5599380	Identifier	doLocalLocking		5599166	1					
ANR	5599381	CompoundStatement		47:22:1354:1354	5599166	1					
ANR	5599382	ExpressionStatement	previous = set_priv ( PRIV_CONDOR )	277:2:6997:7029	5599166	0	True				
ANR	5599383	AssignmentExpression	previous = set_priv ( PRIV_CONDOR )		5599166	0		=			
ANR	5599384	Identifier	previous		5599166	0					
ANR	5599385	CallExpression	set_priv ( PRIV_CONDOR )		5599166	1					
ANR	5599386	Callee	set_priv		5599166	0					
ANR	5599387	Identifier	set_priv		5599166	0					
ANR	5599388	ArgumentList	PRIV_CONDOR		5599166	1					
ANR	5599389	Argument	PRIV_CONDOR		5599166	0					
ANR	5599390	Identifier	PRIV_CONDOR		5599166	0					
ANR	5599391	ExpressionStatement	"m_rotation_lock_fd = open ( m_rotation_lock_path , O_WRONLY | O_CREAT , 0666 )"	278:2:7033:7106	5599166	1	True				
ANR	5599392	AssignmentExpression	"m_rotation_lock_fd = open ( m_rotation_lock_path , O_WRONLY | O_CREAT , 0666 )"		5599166	0		=			
ANR	5599393	Identifier	m_rotation_lock_fd		5599166	0					
ANR	5599394	CallExpression	"open ( m_rotation_lock_path , O_WRONLY | O_CREAT , 0666 )"		5599166	1					
ANR	5599395	Callee	open		5599166	0					
ANR	5599396	Identifier	open		5599166	0					
ANR	5599397	ArgumentList	m_rotation_lock_path		5599166	1					
ANR	5599398	Argument	m_rotation_lock_path		5599166	0					
ANR	5599399	Identifier	m_rotation_lock_path		5599166	0					
ANR	5599400	Argument	O_WRONLY | O_CREAT		5599166	1					
ANR	5599401	InclusiveOrExpression	O_WRONLY | O_CREAT		5599166	0		|			
ANR	5599402	Identifier	O_WRONLY		5599166	0					
ANR	5599403	Identifier	O_CREAT		5599166	1					
ANR	5599404	Argument	0666		5599166	2					
ANR	5599405	PrimaryExpression	0666		5599166	0					
ANR	5599406	IfStatement	if ( m_rotation_lock_fd < 0 )		5599166	2					
ANR	5599407	Condition	m_rotation_lock_fd < 0	279:7:7115:7136	5599166	0	True				
ANR	5599408	RelationalExpression	m_rotation_lock_fd < 0		5599166	0		<			
ANR	5599409	Identifier	m_rotation_lock_fd		5599166	0					
ANR	5599410	PrimaryExpression	0		5599166	1					
ANR	5599411	CompoundStatement		51:32:1539:1539	5599166	1					
ANR	5599412	Statement	dprintf	280:3:7145:7151	5599166	0	True				
ANR	5599413	Statement	(	280:10:7152:7152	5599166	1	True				
ANR	5599414	Statement	D_ALWAYS	280:12:7154:7161	5599166	2	True				
ANR	5599415	Statement	","	280:20:7162:7162	5599166	3	True				
ANR	5599416	Statement	"""Warning: WriteUserLog Failed to open event rotation lock file %s:"""	281:5:7169:7235	5599166	4	True				
ANR	5599417	Statement	""" %d (%s)\\n"""	282:5:7242:7253	5599166	5	True				
ANR	5599418	Statement	","	282:17:7254:7254	5599166	6	True				
ANR	5599419	Statement	m_rotation_lock_path	283:5:7261:7280	5599166	7	True				
ANR	5599420	Statement	","	283:25:7281:7281	5599166	8	True				
ANR	5599421	Statement	errno	283:27:7283:7287	5599166	9	True				
ANR	5599422	Statement	","	283:32:7288:7288	5599166	10	True				
ANR	5599423	Statement	strerror	283:34:7290:7297	5599166	11	True				
ANR	5599424	Statement	(	283:42:7298:7298	5599166	12	True				
ANR	5599425	Statement	errno	283:43:7299:7303	5599166	13	True				
ANR	5599426	Statement	)	283:48:7304:7304	5599166	14	True				
ANR	5599427	Statement	)	283:50:7306:7306	5599166	15	True				
ANR	5599428	ExpressionStatement		283:51:7307:7307	5599166	16	True				
ANR	5599429	ExpressionStatement	m_rotation_lock = new FakeFileLock ( )	284:3:7312:7349	5599166	17	True				
ANR	5599430	AssignmentExpression	m_rotation_lock = new FakeFileLock ( )		5599166	0		=			
ANR	5599431	Identifier	m_rotation_lock		5599166	0					
ANR	5599432	UnaryExpression	new FakeFileLock ( )		5599166	1					
ANR	5599433	ElseStatement	else		5599166	0					
ANR	5599434	CompoundStatement		58:7:1761:1761	5599166	0					
ANR	5599435	ExpressionStatement	"m_rotation_lock = new FileLock ( m_rotation_lock_fd , NULL , m_rotation_lock_path )"	287:3:7367:7467	5599166	0	True				
ANR	5599436	AssignmentExpression	"m_rotation_lock = new FileLock ( m_rotation_lock_fd , NULL , m_rotation_lock_path )"		5599166	0		=			
ANR	5599437	Identifier	m_rotation_lock		5599166	0					
ANR	5599438	Expression	"m_rotation_lock_fd , NULL , m_rotation_lock_path"		5599166	1					
ANR	5599439	Identifier	m_rotation_lock_fd		5599166	0					
ANR	5599440	Expression	"NULL , m_rotation_lock_path"		5599166	1					
ANR	5599441	Identifier	NULL		5599166	0					
ANR	5599442	Identifier	m_rotation_lock_path		5599166	1					
ANR	5599443	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""WriteUserLog Created rotation lock %s @ %p\\n"" , m_rotation_lock_path , m_rotation_lock )"	290:3:7472:7586	5599166	1	True				
ANR	5599444	CallExpression	"dprintf ( D_FULLDEBUG , ""WriteUserLog Created rotation lock %s @ %p\\n"" , m_rotation_lock_path , m_rotation_lock )"		5599166	0					
ANR	5599445	Callee	dprintf		5599166	0					
ANR	5599446	Identifier	dprintf		5599166	0					
ANR	5599447	ArgumentList	D_FULLDEBUG		5599166	1					
ANR	5599448	Argument	D_FULLDEBUG		5599166	0					
ANR	5599449	Identifier	D_FULLDEBUG		5599166	0					
ANR	5599450	Argument	"""WriteUserLog Created rotation lock %s @ %p\\n"""		5599166	1					
ANR	5599451	PrimaryExpression	"""WriteUserLog Created rotation lock %s @ %p\\n"""		5599166	0					
ANR	5599452	Argument	m_rotation_lock_path		5599166	2					
ANR	5599453	Identifier	m_rotation_lock_path		5599166	0					
ANR	5599454	Argument	m_rotation_lock		5599166	3					
ANR	5599455	Identifier	m_rotation_lock		5599166	0					
ANR	5599456	ExpressionStatement	set_priv ( previous )	293:2:7594:7612	5599166	3	True				
ANR	5599457	CallExpression	set_priv ( previous )		5599166	0					
ANR	5599458	Callee	set_priv		5599166	0					
ANR	5599459	Identifier	set_priv		5599166	0					
ANR	5599460	ArgumentList	previous		5599166	1					
ANR	5599461	Argument	previous		5599166	0					
ANR	5599462	Identifier	previous		5599166	0					
ANR	5599463	ExpressionStatement	"m_global_use_xml = param_boolean ( ""EVENT_LOG_USE_XML"" , false )"	297:1:7620:7682	5599166	14	True				
ANR	5599464	AssignmentExpression	"m_global_use_xml = param_boolean ( ""EVENT_LOG_USE_XML"" , false )"		5599166	0		=			
ANR	5599465	Identifier	m_global_use_xml		5599166	0					
ANR	5599466	CallExpression	"param_boolean ( ""EVENT_LOG_USE_XML"" , false )"		5599166	1					
ANR	5599467	Callee	param_boolean		5599166	0					
ANR	5599468	Identifier	param_boolean		5599166	0					
ANR	5599469	ArgumentList	"""EVENT_LOG_USE_XML"""		5599166	1					
ANR	5599470	Argument	"""EVENT_LOG_USE_XML"""		5599166	0					
ANR	5599471	PrimaryExpression	"""EVENT_LOG_USE_XML"""		5599166	0					
ANR	5599472	Argument	false		5599166	1					
ANR	5599473	Identifier	false		5599166	0					
ANR	5599474	ExpressionStatement	"m_global_count_events = param_boolean ( ""EVENT_LOG_COUNT_EVENTS"" , false )"	298:1:7685:7757	5599166	15	True				
ANR	5599475	AssignmentExpression	"m_global_count_events = param_boolean ( ""EVENT_LOG_COUNT_EVENTS"" , false )"		5599166	0		=			
ANR	5599476	Identifier	m_global_count_events		5599166	0					
ANR	5599477	CallExpression	"param_boolean ( ""EVENT_LOG_COUNT_EVENTS"" , false )"		5599166	1					
ANR	5599478	Callee	param_boolean		5599166	0					
ANR	5599479	Identifier	param_boolean		5599166	0					
ANR	5599480	ArgumentList	"""EVENT_LOG_COUNT_EVENTS"""		5599166	1					
ANR	5599481	Argument	"""EVENT_LOG_COUNT_EVENTS"""		5599166	0					
ANR	5599482	PrimaryExpression	"""EVENT_LOG_COUNT_EVENTS"""		5599166	0					
ANR	5599483	Argument	false		5599166	1					
ANR	5599484	Identifier	false		5599166	0					
ANR	5599485	ExpressionStatement	"m_global_max_rotations = param_integer ( ""EVENT_LOG_MAX_ROTATIONS"" , 1 , 0 )"	299:1:7760:7833	5599166	16	True				
ANR	5599486	AssignmentExpression	"m_global_max_rotations = param_integer ( ""EVENT_LOG_MAX_ROTATIONS"" , 1 , 0 )"		5599166	0		=			
ANR	5599487	Identifier	m_global_max_rotations		5599166	0					
ANR	5599488	CallExpression	"param_integer ( ""EVENT_LOG_MAX_ROTATIONS"" , 1 , 0 )"		5599166	1					
ANR	5599489	Callee	param_integer		5599166	0					
ANR	5599490	Identifier	param_integer		5599166	0					
ANR	5599491	ArgumentList	"""EVENT_LOG_MAX_ROTATIONS"""		5599166	1					
ANR	5599492	Argument	"""EVENT_LOG_MAX_ROTATIONS"""		5599166	0					
ANR	5599493	PrimaryExpression	"""EVENT_LOG_MAX_ROTATIONS"""		5599166	0					
ANR	5599494	Argument	1		5599166	1					
ANR	5599495	PrimaryExpression	1		5599166	0					
ANR	5599496	Argument	0		5599166	2					
ANR	5599497	PrimaryExpression	0		5599166	0					
ANR	5599498	ExpressionStatement	"m_global_fsync_enable = param_boolean ( ""EVENT_LOG_FSYNC"" , false )"	300:1:7836:7901	5599166	17	True				
ANR	5599499	AssignmentExpression	"m_global_fsync_enable = param_boolean ( ""EVENT_LOG_FSYNC"" , false )"		5599166	0		=			
ANR	5599500	Identifier	m_global_fsync_enable		5599166	0					
ANR	5599501	CallExpression	"param_boolean ( ""EVENT_LOG_FSYNC"" , false )"		5599166	1					
ANR	5599502	Callee	param_boolean		5599166	0					
ANR	5599503	Identifier	param_boolean		5599166	0					
ANR	5599504	ArgumentList	"""EVENT_LOG_FSYNC"""		5599166	1					
ANR	5599505	Argument	"""EVENT_LOG_FSYNC"""		5599166	0					
ANR	5599506	PrimaryExpression	"""EVENT_LOG_FSYNC"""		5599166	0					
ANR	5599507	Argument	false		5599166	1					
ANR	5599508	Identifier	false		5599166	0					
ANR	5599509	ExpressionStatement	"m_global_lock_enable = param_boolean ( ""EVENT_LOG_LOCKING"" , true )"	301:1:7904:7969	5599166	18	True				
ANR	5599510	AssignmentExpression	"m_global_lock_enable = param_boolean ( ""EVENT_LOG_LOCKING"" , true )"		5599166	0		=			
ANR	5599511	Identifier	m_global_lock_enable		5599166	0					
ANR	5599512	CallExpression	"param_boolean ( ""EVENT_LOG_LOCKING"" , true )"		5599166	1					
ANR	5599513	Callee	param_boolean		5599166	0					
ANR	5599514	Identifier	param_boolean		5599166	0					
ANR	5599515	ArgumentList	"""EVENT_LOG_LOCKING"""		5599166	1					
ANR	5599516	Argument	"""EVENT_LOG_LOCKING"""		5599166	0					
ANR	5599517	PrimaryExpression	"""EVENT_LOG_LOCKING"""		5599166	0					
ANR	5599518	Argument	true		5599166	1					
ANR	5599519	Identifier	true		5599166	0					
ANR	5599520	ExpressionStatement	"m_global_max_filesize = param_integer ( ""EVENT_LOG_MAX_SIZE"" , - 1 )"	302:1:7972:8037	5599166	19	True				
ANR	5599521	AssignmentExpression	"m_global_max_filesize = param_integer ( ""EVENT_LOG_MAX_SIZE"" , - 1 )"		5599166	0		=			
ANR	5599522	Identifier	m_global_max_filesize		5599166	0					
ANR	5599523	CallExpression	"param_integer ( ""EVENT_LOG_MAX_SIZE"" , - 1 )"		5599166	1					
ANR	5599524	Callee	param_integer		5599166	0					
ANR	5599525	Identifier	param_integer		5599166	0					
ANR	5599526	ArgumentList	"""EVENT_LOG_MAX_SIZE"""		5599166	1					
ANR	5599527	Argument	"""EVENT_LOG_MAX_SIZE"""		5599166	0					
ANR	5599528	PrimaryExpression	"""EVENT_LOG_MAX_SIZE"""		5599166	0					
ANR	5599529	Argument	- 1		5599166	1					
ANR	5599530	UnaryOperationExpression	- 1		5599166	0					
ANR	5599531	UnaryOperator	-		5599166	0					
ANR	5599532	PrimaryExpression	1		5599166	1					
ANR	5599533	IfStatement	if ( m_global_max_filesize < 0 )		5599166	20					
ANR	5599534	Condition	m_global_max_filesize < 0	303:6:8045:8069	5599166	0	True				
ANR	5599535	RelationalExpression	m_global_max_filesize < 0		5599166	0		<			
ANR	5599536	Identifier	m_global_max_filesize		5599166	0					
ANR	5599537	PrimaryExpression	0		5599166	1					
ANR	5599538	CompoundStatement		75:34:2472:2472	5599166	1					
ANR	5599539	ExpressionStatement	"m_global_max_filesize = param_integer ( ""MAX_EVENT_LOG"" , 1000000 , 0 )"	304:2:8077:8145	5599166	0	True				
ANR	5599540	AssignmentExpression	"m_global_max_filesize = param_integer ( ""MAX_EVENT_LOG"" , 1000000 , 0 )"		5599166	0		=			
ANR	5599541	Identifier	m_global_max_filesize		5599166	0					
ANR	5599542	CallExpression	"param_integer ( ""MAX_EVENT_LOG"" , 1000000 , 0 )"		5599166	1					
ANR	5599543	Callee	param_integer		5599166	0					
ANR	5599544	Identifier	param_integer		5599166	0					
ANR	5599545	ArgumentList	"""MAX_EVENT_LOG"""		5599166	1					
ANR	5599546	Argument	"""MAX_EVENT_LOG"""		5599166	0					
ANR	5599547	PrimaryExpression	"""MAX_EVENT_LOG"""		5599166	0					
ANR	5599548	Argument	1000000		5599166	1					
ANR	5599549	PrimaryExpression	1000000		5599166	0					
ANR	5599550	Argument	0		5599166	2					
ANR	5599551	PrimaryExpression	0		5599166	0					
ANR	5599552	IfStatement	if ( m_global_max_filesize == 0 )		5599166	21					
ANR	5599553	Condition	m_global_max_filesize == 0	306:6:8156:8181	5599166	0	True				
ANR	5599554	EqualityExpression	m_global_max_filesize == 0		5599166	0		==			
ANR	5599555	Identifier	m_global_max_filesize		5599166	0					
ANR	5599556	PrimaryExpression	0		5599166	1					
ANR	5599557	CompoundStatement		78:35:2584:2584	5599166	1					
ANR	5599558	ExpressionStatement	m_global_max_rotations = 0	307:2:8189:8215	5599166	0	True				
ANR	5599559	AssignmentExpression	m_global_max_rotations = 0		5599166	0		=			
ANR	5599560	Identifier	m_global_max_rotations		5599166	0					
ANR	5599561	PrimaryExpression	0		5599166	1					
ANR	5599562	ElseStatement	else		5599166	0					
ANR	5599563	IdentifierDeclStatement	bool default_close = false ;	316:1:8473:8499	5599166	0	True				
ANR	5599564	IdentifierDecl	default_close = false		5599166	0					
ANR	5599565	IdentifierDeclType	bool		5599166	0					
ANR	5599566	Identifier	default_close		5599166	1					
ANR	5599567	AssignmentExpression	default_close = false		5599166	2		=			
ANR	5599568	Identifier	false		5599166	0					
ANR	5599569	Identifier	false		5599166	1					
ANR	5599570	Statement	if	313:2:8419:8420	5599166	22	True				
ANR	5599571	Statement	defined	313:5:8422:8428	5599166	23	True				
ANR	5599572	Statement	(	313:12:8429:8429	5599166	24	True				
ANR	5599573	Statement	WIN32	313:13:8430:8434	5599166	25	True				
ANR	5599574	Statement	)	313:18:8435:8435	5599166	26	True				
ANR	5599575	IdentifierDeclStatement	bool default_close = true ;	314:1:8438:8463	5599166	27	True				
ANR	5599576	IdentifierDecl	default_close = true		5599166	0					
ANR	5599577	IdentifierDeclType	bool		5599166	0					
ANR	5599578	Identifier	default_close		5599166	1					
ANR	5599579	AssignmentExpression	default_close = true		5599166	2		=			
ANR	5599580	Identifier	true		5599166	0					
ANR	5599581	Identifier	true		5599166	1					
ANR	5599582	IdentifierDeclStatement	"endif m_global_close = param_boolean ( ""EVENT_LOG_FORCE_CLOSE"" , default_close ) ;"	317:2:8503:8582	5599166	28	True				
ANR	5599583	IdentifierDecl	"m_global_close = param_boolean ( ""EVENT_LOG_FORCE_CLOSE"" , default_close )"		5599166	0					
ANR	5599584	IdentifierDeclType	endif		5599166	0					
ANR	5599585	Identifier	m_global_close		5599166	1					
ANR	5599586	AssignmentExpression	"m_global_close = param_boolean ( ""EVENT_LOG_FORCE_CLOSE"" , default_close )"		5599166	2		=			
ANR	5599587	Identifier	m_global_close		5599166	0					
ANR	5599588	CallExpression	"param_boolean ( ""EVENT_LOG_FORCE_CLOSE"" , default_close )"		5599166	1					
ANR	5599589	Callee	param_boolean		5599166	0					
ANR	5599590	Identifier	param_boolean		5599166	0					
ANR	5599591	ArgumentList	"""EVENT_LOG_FORCE_CLOSE"""		5599166	1					
ANR	5599592	Argument	"""EVENT_LOG_FORCE_CLOSE"""		5599166	0					
ANR	5599593	PrimaryExpression	"""EVENT_LOG_FORCE_CLOSE"""		5599166	0					
ANR	5599594	Argument	default_close		5599166	1					
ANR	5599595	Identifier	default_close		5599166	0					
ANR	5599596	ReturnStatement	return true ;	320:1:8586:8597	5599166	29	True				
ANR	5599597	Identifier	true		5599166	0					
ANR	5599598	ReturnType	bool		5599166	1					
ANR	5599599	Identifier	WriteUserLog :: Configure		5599166	2					
ANR	5599600	ParameterList	bool force		5599166	3					
ANR	5599601	Parameter	bool force	228:25:5587:5596	5599166	0	True				
ANR	5599602	ParameterType	bool		5599166	0					
ANR	5599603	Identifier	force		5599166	1					
ANR	5599604	CFGEntryNode	ENTRY		5599166		True				
ANR	5599605	CFGExitNode	EXIT		5599166		True				
ANR	5599606	Symbol	m_enable_locking		5599166						
ANR	5599607	Symbol	doLocalLocking		5599166						
ANR	5599608	Symbol	O_CREAT		5599166						
ANR	5599609	Symbol	StatWrapper :: STATOP_NONE		5599166						
ANR	5599610	Symbol	m_global_use_xml		5599166						
ANR	5599611	Symbol	m_rotation_lock_fd		5599166						
ANR	5599612	Symbol	strlen		5599166						
ANR	5599613	Symbol	m_global_stat		5599166						
ANR	5599614	Symbol	len		5599166						
ANR	5599615	Symbol	param		5599166						
ANR	5599616	Symbol	tmp		5599166						
ANR	5599617	Symbol	m_rotation_lock		5599166						
ANR	5599618	Symbol	m_global_fsync_enable		5599166						
ANR	5599619	Symbol	m_rotation_lock_path		5599166						
ANR	5599620	Symbol	m_global_state		5599166						
ANR	5599621	Symbol	malloc		5599166						
ANR	5599622	Symbol	m_global_path		5599166						
ANR	5599623	Symbol	NULL		5599166						
ANR	5599624	Symbol	previous		5599166						
ANR	5599625	Symbol	m_enable_fsync		5599166						
ANR	5599626	Symbol	m_global_max_rotations		5599166						
ANR	5599627	Symbol	false		5599166						
ANR	5599628	Symbol	m_global_lock_enable		5599166						
ANR	5599629	Symbol	default_close		5599166						
ANR	5599630	Symbol	param_boolean		5599166						
ANR	5599631	Symbol	D_FULLDEBUG		5599166						
ANR	5599632	Symbol	m_global_close		5599166						
ANR	5599633	Symbol	m_global_max_filesize		5599166						
ANR	5599634	Symbol	m_configured		5599166						
ANR	5599635	Symbol	set_priv		5599166						
ANR	5599636	Symbol	new_locking		5599166						
ANR	5599637	Symbol	true		5599166						
ANR	5599638	Symbol	m_rotation_lock -> initSucceeded		5599166						
ANR	5599639	Symbol	* m_rotation_lock		5599166						
ANR	5599640	Symbol	force		5599166						
ANR	5599641	Symbol	param_integer		5599166						
ANR	5599642	Symbol	PRIV_CONDOR		5599166						
ANR	5599643	Symbol	O_WRONLY		5599166						
ANR	5599644	Symbol	m_global_count_events		5599166						
ANR	5599645	Symbol	open		5599166						
ANR	5599646	Function	WriteUserLog :: Reset	323:0:8602:9683							
ANR	5599647	FunctionDef	WriteUserLog :: Reset ()		5599646	0					
ANR	5599648	CompoundStatement		325:0:8635:9683	5599646	0					
ANR	5599649	ExpressionStatement	m_initialized = false	326:1:8638:8659	5599646	0	True				
ANR	5599650	AssignmentExpression	m_initialized = false		5599646	0		=			
ANR	5599651	Identifier	m_initialized		5599646	0					
ANR	5599652	Identifier	false		5599646	1					
ANR	5599653	ExpressionStatement	m_configured = false	327:1:8662:8682	5599646	1	True				
ANR	5599654	AssignmentExpression	m_configured = false		5599646	0		=			
ANR	5599655	Identifier	m_configured		5599646	0					
ANR	5599656	Identifier	false		5599646	1					
ANR	5599657	ExpressionStatement	m_cluster = - 1	329:1:8686:8700	5599646	2	True				
ANR	5599658	AssignmentExpression	m_cluster = - 1		5599646	0		=			
ANR	5599659	Identifier	m_cluster		5599646	0					
ANR	5599660	UnaryOperationExpression	- 1		5599646	1					
ANR	5599661	UnaryOperator	-		5599646	0					
ANR	5599662	PrimaryExpression	1		5599646	1					
ANR	5599663	ExpressionStatement	m_proc = - 1	330:1:8703:8714	5599646	3	True				
ANR	5599664	AssignmentExpression	m_proc = - 1		5599646	0		=			
ANR	5599665	Identifier	m_proc		5599646	0					
ANR	5599666	UnaryOperationExpression	- 1		5599646	1					
ANR	5599667	UnaryOperator	-		5599646	0					
ANR	5599668	PrimaryExpression	1		5599646	1					
ANR	5599669	ExpressionStatement	m_subproc = - 1	331:1:8717:8731	5599646	4	True				
ANR	5599670	AssignmentExpression	m_subproc = - 1		5599646	0		=			
ANR	5599671	Identifier	m_subproc		5599646	0					
ANR	5599672	UnaryOperationExpression	- 1		5599646	1					
ANR	5599673	UnaryOperator	-		5599646	0					
ANR	5599674	PrimaryExpression	1		5599646	1					
ANR	5599675	ExpressionStatement	m_userlog_enable = true	333:1:8735:8758	5599646	5	True				
ANR	5599676	AssignmentExpression	m_userlog_enable = true		5599646	0		=			
ANR	5599677	Identifier	m_userlog_enable		5599646	0					
ANR	5599678	Identifier	true		5599646	1					
ANR	5599679	ExpressionStatement	m_path = NULL	334:1:8761:8774	5599646	6	True				
ANR	5599680	AssignmentExpression	m_path = NULL		5599646	0		=			
ANR	5599681	Identifier	m_path		5599646	0					
ANR	5599682	Identifier	NULL		5599646	1					
ANR	5599683	ExpressionStatement	m_fp = NULL	335:1:8777:8788	5599646	7	True				
ANR	5599684	AssignmentExpression	m_fp = NULL		5599646	0		=			
ANR	5599685	Identifier	m_fp		5599646	0					
ANR	5599686	Identifier	NULL		5599646	1					
ANR	5599687	ExpressionStatement	m_lock = NULL	336:1:8791:8804	5599646	8	True				
ANR	5599688	AssignmentExpression	m_lock = NULL		5599646	0		=			
ANR	5599689	Identifier	m_lock		5599646	0					
ANR	5599690	Identifier	NULL		5599646	1					
ANR	5599691	ExpressionStatement	m_enable_fsync = true	337:1:8807:8828	5599646	9	True				
ANR	5599692	AssignmentExpression	m_enable_fsync = true		5599646	0		=			
ANR	5599693	Identifier	m_enable_fsync		5599646	0					
ANR	5599694	Identifier	true		5599646	1					
ANR	5599695	ExpressionStatement	m_enable_locking = true	338:1:8831:8854	5599646	10	True				
ANR	5599696	AssignmentExpression	m_enable_locking = true		5599646	0		=			
ANR	5599697	Identifier	m_enable_locking		5599646	0					
ANR	5599698	Identifier	true		5599646	1					
ANR	5599699	ExpressionStatement	m_global_path = NULL	340:1:8858:8878	5599646	11	True				
ANR	5599700	AssignmentExpression	m_global_path = NULL		5599646	0		=			
ANR	5599701	Identifier	m_global_path		5599646	0					
ANR	5599702	Identifier	NULL		5599646	1					
ANR	5599703	ExpressionStatement	m_global_fp = NULL	341:1:8881:8899	5599646	12	True				
ANR	5599704	AssignmentExpression	m_global_fp = NULL		5599646	0		=			
ANR	5599705	Identifier	m_global_fp		5599646	0					
ANR	5599706	Identifier	NULL		5599646	1					
ANR	5599707	ExpressionStatement	m_global_lock = NULL	342:1:8902:8922	5599646	13	True				
ANR	5599708	AssignmentExpression	m_global_lock = NULL		5599646	0		=			
ANR	5599709	Identifier	m_global_lock		5599646	0					
ANR	5599710	Identifier	NULL		5599646	1					
ANR	5599711	ExpressionStatement	m_global_stat = NULL	343:1:8925:8945	5599646	14	True				
ANR	5599712	AssignmentExpression	m_global_stat = NULL		5599646	0		=			
ANR	5599713	Identifier	m_global_stat		5599646	0					
ANR	5599714	Identifier	NULL		5599646	1					
ANR	5599715	ExpressionStatement	m_global_state = NULL	344:1:8948:8969	5599646	15	True				
ANR	5599716	AssignmentExpression	m_global_state = NULL		5599646	0		=			
ANR	5599717	Identifier	m_global_state		5599646	0					
ANR	5599718	Identifier	NULL		5599646	1					
ANR	5599719	ExpressionStatement	m_rotation_lock = NULL	346:1:8973:8995	5599646	16	True				
ANR	5599720	AssignmentExpression	m_rotation_lock = NULL		5599646	0		=			
ANR	5599721	Identifier	m_rotation_lock		5599646	0					
ANR	5599722	Identifier	NULL		5599646	1					
ANR	5599723	ExpressionStatement	m_rotation_lock_fd = - 1	347:1:8998:9021	5599646	17	True				
ANR	5599724	AssignmentExpression	m_rotation_lock_fd = - 1		5599646	0		=			
ANR	5599725	Identifier	m_rotation_lock_fd		5599646	0					
ANR	5599726	UnaryOperationExpression	- 1		5599646	1					
ANR	5599727	UnaryOperator	-		5599646	0					
ANR	5599728	PrimaryExpression	1		5599646	1					
ANR	5599729	ExpressionStatement	m_rotation_lock_path = NULL	348:1:9024:9051	5599646	18	True				
ANR	5599730	AssignmentExpression	m_rotation_lock_path = NULL		5599646	0		=			
ANR	5599731	Identifier	m_rotation_lock_path		5599646	0					
ANR	5599732	Identifier	NULL		5599646	1					
ANR	5599733	ExpressionStatement	m_use_xml = XML_USERLOG_DEFAULT	350:1:9055:9086	5599646	19	True				
ANR	5599734	AssignmentExpression	m_use_xml = XML_USERLOG_DEFAULT		5599646	0		=			
ANR	5599735	Identifier	m_use_xml		5599646	0					
ANR	5599736	Identifier	XML_USERLOG_DEFAULT		5599646	1					
ANR	5599737	ExpressionStatement	m_gjid = NULL	351:1:9089:9102	5599646	20	True				
ANR	5599738	AssignmentExpression	m_gjid = NULL		5599646	0		=			
ANR	5599739	Identifier	m_gjid		5599646	0					
ANR	5599740	Identifier	NULL		5599646	1					
ANR	5599741	ExpressionStatement	m_creator_name = NULL	353:1:9106:9127	5599646	21	True				
ANR	5599742	AssignmentExpression	m_creator_name = NULL		5599646	0		=			
ANR	5599743	Identifier	m_creator_name		5599646	0					
ANR	5599744	Identifier	NULL		5599646	1					
ANR	5599745	ExpressionStatement	m_global_disable = false	355:1:9131:9155	5599646	22	True				
ANR	5599746	AssignmentExpression	m_global_disable = false		5599646	0		=			
ANR	5599747	Identifier	m_global_disable		5599646	0					
ANR	5599748	Identifier	false		5599646	1					
ANR	5599749	ExpressionStatement	m_global_use_xml = false	356:1:9158:9182	5599646	23	True				
ANR	5599750	AssignmentExpression	m_global_use_xml = false		5599646	0		=			
ANR	5599751	Identifier	m_global_use_xml		5599646	0					
ANR	5599752	Identifier	false		5599646	1					
ANR	5599753	ExpressionStatement	m_global_count_events = false	357:1:9185:9214	5599646	24	True				
ANR	5599754	AssignmentExpression	m_global_count_events = false		5599646	0		=			
ANR	5599755	Identifier	m_global_count_events		5599646	0					
ANR	5599756	Identifier	false		5599646	1					
ANR	5599757	ExpressionStatement	m_global_max_filesize = 1000000	358:1:9217:9248	5599646	25	True				
ANR	5599758	AssignmentExpression	m_global_max_filesize = 1000000		5599646	0		=			
ANR	5599759	Identifier	m_global_max_filesize		5599646	0					
ANR	5599760	PrimaryExpression	1000000		5599646	1					
ANR	5599761	ExpressionStatement	m_global_max_rotations = 1	359:1:9251:9277	5599646	26	True				
ANR	5599762	AssignmentExpression	m_global_max_rotations = 1		5599646	0		=			
ANR	5599763	Identifier	m_global_max_rotations		5599646	0					
ANR	5599764	PrimaryExpression	1		5599646	1					
ANR	5599765	ExpressionStatement	m_global_lock_enable = true	360:1:9280:9307	5599646	27	True				
ANR	5599766	AssignmentExpression	m_global_lock_enable = true		5599646	0		=			
ANR	5599767	Identifier	m_global_lock_enable		5599646	0					
ANR	5599768	Identifier	true		5599646	1					
ANR	5599769	ExpressionStatement	m_global_fsync_enable = false	361:1:9310:9339	5599646	28	True				
ANR	5599770	AssignmentExpression	m_global_fsync_enable = false		5599646	0		=			
ANR	5599771	Identifier	m_global_fsync_enable		5599646	0					
ANR	5599772	Identifier	false		5599646	1					
ANR	5599773	Statement	if	365:2:9437:9438	5599646	29	True				
ANR	5599774	Statement	defined	365:5:9440:9446	5599646	30	True				
ANR	5599775	ExpressionStatement	( WIN32 ) m_global_close = true	365:12:9447:9477	5599646	31	True				
ANR	5599776	AssignmentExpression	( WIN32 ) m_global_close = true		5599646	0		=			
ANR	5599777	CastExpression	( WIN32 ) m_global_close		5599646	0					
ANR	5599778	CastTarget	WIN32		5599646	0					
ANR	5599779	Identifier	m_global_close		5599646	1					
ANR	5599780	Identifier	true		5599646	1					
ANR	5599781	ReturnType	void		5599646	1					
ANR	5599782	Identifier	WriteUserLog :: Reset		5599646	2					
ANR	5599783	ParameterList			5599646	3					
ANR	5599784	CFGEntryNode	ENTRY		5599646		True				
ANR	5599785	CFGExitNode	EXIT		5599646		True				
ANR	5599786	Symbol	m_initialized		5599646						
ANR	5599787	Symbol	m_enable_locking		5599646						
ANR	5599788	Symbol	m_creator_name		5599646						
ANR	5599789	Symbol	m_cluster		5599646						
ANR	5599790	Symbol	m_proc		5599646						
ANR	5599791	Symbol	m_global_use_xml		5599646						
ANR	5599792	Symbol	m_rotation_lock_fd		5599646						
ANR	5599793	Symbol	m_userlog_enable		5599646						
ANR	5599794	Symbol	m_lock		5599646						
ANR	5599795	Symbol	m_global_stat		5599646						
ANR	5599796	Symbol	m_global_fp		5599646						
ANR	5599797	Symbol	m_path		5599646						
ANR	5599798	Symbol	m_rotation_lock		5599646						
ANR	5599799	Symbol	m_global_fsync_enable		5599646						
ANR	5599800	Symbol	m_rotation_lock_path		5599646						
ANR	5599801	Symbol	m_global_state		5599646						
ANR	5599802	Symbol	m_global_disable		5599646						
ANR	5599803	Symbol	NULL		5599646						
ANR	5599804	Symbol	m_global_path		5599646						
ANR	5599805	Symbol	m_subproc		5599646						
ANR	5599806	Symbol	m_enable_fsync		5599646						
ANR	5599807	Symbol	m_global_max_rotations		5599646						
ANR	5599808	Symbol	XML_USERLOG_DEFAULT		5599646						
ANR	5599809	Symbol	false		5599646						
ANR	5599810	Symbol	m_use_xml		5599646						
ANR	5599811	Symbol	m_global_lock_enable		5599646						
ANR	5599812	Symbol	m_global_close		5599646						
ANR	5599813	Symbol	m_fp		5599646						
ANR	5599814	Symbol	m_global_max_filesize		5599646						
ANR	5599815	Symbol	m_configured		5599646						
ANR	5599816	Symbol	true		5599646						
ANR	5599817	Symbol	m_gjid		5599646						
ANR	5599818	Symbol	m_global_count_events		5599646						
ANR	5599819	Symbol	m_global_lock		5599646						
ANR	5599820	Function	WriteUserLog :: FreeGlobalResources	382:0:9686:10414							
ANR	5599821	FunctionDef	WriteUserLog :: FreeGlobalResources (bool final)		5599820	0					
ANR	5599822	CompoundStatement		384:0:9739:10414	5599820	0					
ANR	5599823	IfStatement	if ( m_global_path )		5599820	0					
ANR	5599824	Condition	m_global_path	386:5:9747:9759	5599820	0	True				
ANR	5599825	Identifier	m_global_path		5599820	0					
ANR	5599826	CompoundStatement		3:20:22:22	5599820	1					
ANR	5599827	ExpressionStatement	free ( m_global_path )	387:2:9766:9785	5599820	0	True				
ANR	5599828	CallExpression	free ( m_global_path )		5599820	0					
ANR	5599829	Callee	free		5599820	0					
ANR	5599830	Identifier	free		5599820	0					
ANR	5599831	ArgumentList	m_global_path		5599820	1					
ANR	5599832	Argument	m_global_path		5599820	0					
ANR	5599833	Identifier	m_global_path		5599820	0					
ANR	5599834	ExpressionStatement	m_global_path = NULL	388:2:9789:9809	5599820	1	True				
ANR	5599835	AssignmentExpression	m_global_path = NULL		5599820	0		=			
ANR	5599836	Identifier	m_global_path		5599820	0					
ANR	5599837	Identifier	NULL		5599820	1					
ANR	5599838	ExpressionStatement	closeGlobalLog ( )	391:1:9816:9832	5599820	1	True				
ANR	5599839	CallExpression	closeGlobalLog ( )		5599820	0					
ANR	5599840	Callee	closeGlobalLog		5599820	0					
ANR	5599841	Identifier	closeGlobalLog		5599820	0					
ANR	5599842	ArgumentList			5599820	1					
ANR	5599843	IfStatement	if ( final && ( m_global_id_base != NULL ) )		5599820	2					
ANR	5599844	Condition	final && ( m_global_id_base != NULL )	393:6:9886:9920	5599820	0	True				
ANR	5599845	AndExpression	final && ( m_global_id_base != NULL )		5599820	0		&&			
ANR	5599846	Identifier	final		5599820	0					
ANR	5599847	EqualityExpression	m_global_id_base != NULL		5599820	1		!=			
ANR	5599848	Identifier	m_global_id_base		5599820	0					
ANR	5599849	Identifier	NULL		5599820	1					
ANR	5599850	CompoundStatement		10:44:184:184	5599820	1					
ANR	5599851	ExpressionStatement	free ( m_global_id_base )	394:2:9928:9952	5599820	0	True				
ANR	5599852	CallExpression	free ( m_global_id_base )		5599820	0					
ANR	5599853	Callee	free		5599820	0					
ANR	5599854	Identifier	free		5599820	0					
ANR	5599855	ArgumentList	m_global_id_base		5599820	1					
ANR	5599856	Argument	m_global_id_base		5599820	0					
ANR	5599857	Identifier	m_global_id_base		5599820	0					
ANR	5599858	ExpressionStatement	m_global_id_base = NULL	395:2:9956:9979	5599820	1	True				
ANR	5599859	AssignmentExpression	m_global_id_base = NULL		5599820	0		=			
ANR	5599860	Identifier	m_global_id_base		5599820	0					
ANR	5599861	Identifier	NULL		5599820	1					
ANR	5599862	IfStatement	if ( m_global_stat != NULL )		5599820	3					
ANR	5599863	Condition	m_global_stat != NULL	397:5:9989:10009	5599820	0	True				
ANR	5599864	EqualityExpression	m_global_stat != NULL		5599820	0		!=			
ANR	5599865	Identifier	m_global_stat		5599820	0					
ANR	5599866	Identifier	NULL		5599820	1					
ANR	5599867	CompoundStatement		14:28:272:272	5599820	1					
ANR	5599868	Statement	delete	398:2:10016:10021	5599820	0	True				
ANR	5599869	ExpressionStatement	m_global_stat	398:9:10023:10036	5599820	1	True				
ANR	5599870	Identifier	m_global_stat		5599820	0					
ANR	5599871	ExpressionStatement	m_global_stat = NULL	399:2:10040:10060	5599820	2	True				
ANR	5599872	AssignmentExpression	m_global_stat = NULL		5599820	0		=			
ANR	5599873	Identifier	m_global_stat		5599820	0					
ANR	5599874	Identifier	NULL		5599820	1					
ANR	5599875	IfStatement	if ( m_global_state != NULL )		5599820	4					
ANR	5599876	Condition	m_global_state != NULL	401:5:10070:10091	5599820	0	True				
ANR	5599877	EqualityExpression	m_global_state != NULL		5599820	0		!=			
ANR	5599878	Identifier	m_global_state		5599820	0					
ANR	5599879	Identifier	NULL		5599820	1					
ANR	5599880	CompoundStatement		18:29:354:354	5599820	1					
ANR	5599881	Statement	delete	402:2:10098:10103	5599820	0	True				
ANR	5599882	ExpressionStatement	m_global_state	402:9:10105:10119	5599820	1	True				
ANR	5599883	Identifier	m_global_state		5599820	0					
ANR	5599884	ExpressionStatement	m_global_state = NULL	403:2:10123:10144	5599820	2	True				
ANR	5599885	AssignmentExpression	m_global_state = NULL		5599820	0		=			
ANR	5599886	Identifier	m_global_state		5599820	0					
ANR	5599887	Identifier	NULL		5599820	1					
ANR	5599888	IfStatement	if ( m_rotation_lock_path )		5599820	5					
ANR	5599889	Condition	m_rotation_lock_path	406:5:10155:10174	5599820	0	True				
ANR	5599890	Identifier	m_rotation_lock_path		5599820	0					
ANR	5599891	CompoundStatement		23:27:437:437	5599820	1					
ANR	5599892	ExpressionStatement	free ( m_rotation_lock_path )	407:2:10181:10207	5599820	0	True				
ANR	5599893	CallExpression	free ( m_rotation_lock_path )		5599820	0					
ANR	5599894	Callee	free		5599820	0					
ANR	5599895	Identifier	free		5599820	0					
ANR	5599896	ArgumentList	m_rotation_lock_path		5599820	1					
ANR	5599897	Argument	m_rotation_lock_path		5599820	0					
ANR	5599898	Identifier	m_rotation_lock_path		5599820	0					
ANR	5599899	ExpressionStatement	m_rotation_lock_path = NULL	408:2:10211:10238	5599820	1	True				
ANR	5599900	AssignmentExpression	m_rotation_lock_path = NULL		5599820	0		=			
ANR	5599901	Identifier	m_rotation_lock_path		5599820	0					
ANR	5599902	Identifier	NULL		5599820	1					
ANR	5599903	IfStatement	if ( m_rotation_lock_fd >= 0 )		5599820	6					
ANR	5599904	Condition	m_rotation_lock_fd >= 0	410:5:10248:10270	5599820	0	True				
ANR	5599905	RelationalExpression	m_rotation_lock_fd >= 0		5599820	0		>=			
ANR	5599906	Identifier	m_rotation_lock_fd		5599820	0					
ANR	5599907	PrimaryExpression	0		5599820	1					
ANR	5599908	CompoundStatement		27:30:533:533	5599820	1					
ANR	5599909	ExpressionStatement	close ( m_rotation_lock_fd )	411:2:10277:10302	5599820	0	True				
ANR	5599910	CallExpression	close ( m_rotation_lock_fd )		5599820	0					
ANR	5599911	Callee	close		5599820	0					
ANR	5599912	Identifier	close		5599820	0					
ANR	5599913	ArgumentList	m_rotation_lock_fd		5599820	1					
ANR	5599914	Argument	m_rotation_lock_fd		5599820	0					
ANR	5599915	Identifier	m_rotation_lock_fd		5599820	0					
ANR	5599916	ExpressionStatement	m_rotation_lock_fd = - 1	412:2:10306:10329	5599820	1	True				
ANR	5599917	AssignmentExpression	m_rotation_lock_fd = - 1		5599820	0		=			
ANR	5599918	Identifier	m_rotation_lock_fd		5599820	0					
ANR	5599919	UnaryOperationExpression	- 1		5599820	1					
ANR	5599920	UnaryOperator	-		5599820	0					
ANR	5599921	PrimaryExpression	1		5599820	1					
ANR	5599922	IfStatement	if ( m_rotation_lock )		5599820	7					
ANR	5599923	Condition	m_rotation_lock	414:5:10339:10353	5599820	0	True				
ANR	5599924	Identifier	m_rotation_lock		5599820	0					
ANR	5599925	CompoundStatement		31:22:616:616	5599820	1					
ANR	5599926	Statement	delete	415:2:10360:10365	5599820	0	True				
ANR	5599927	ExpressionStatement	m_rotation_lock	415:9:10367:10382	5599820	1	True				
ANR	5599928	Identifier	m_rotation_lock		5599820	0					
ANR	5599929	ExpressionStatement	m_rotation_lock = NULL	416:2:10386:10408	5599820	2	True				
ANR	5599930	AssignmentExpression	m_rotation_lock = NULL		5599820	0		=			
ANR	5599931	Identifier	m_rotation_lock		5599820	0					
ANR	5599932	Identifier	NULL		5599820	1					
ANR	5599933	ReturnType	void		5599820	1					
ANR	5599934	Identifier	WriteUserLog :: FreeGlobalResources		5599820	2					
ANR	5599935	ParameterList	bool final		5599820	3					
ANR	5599936	Parameter	bool final	383:35:9726:9735	5599820	0	True				
ANR	5599937	ParameterType	bool		5599820	0					
ANR	5599938	Identifier	final		5599820	1					
ANR	5599939	CFGEntryNode	ENTRY		5599820		True				
ANR	5599940	CFGExitNode	EXIT		5599820		True				
ANR	5599941	Symbol	m_global_id_base		5599820						
ANR	5599942	Symbol	m_global_state		5599820						
ANR	5599943	Symbol	m_global_path		5599820						
ANR	5599944	Symbol	NULL		5599820						
ANR	5599945	Symbol	m_global_stat		5599820						
ANR	5599946	Symbol	final		5599820						
ANR	5599947	Symbol	m_rotation_lock		5599820						
ANR	5599948	Symbol	m_rotation_lock_fd		5599820						
ANR	5599949	Symbol	m_rotation_lock_path		5599820						
ANR	5599950	Function	WriteUserLog :: FreeLocalResources	421:0:10417:10916							
ANR	5599951	FunctionDef	WriteUserLog :: FreeLocalResources ()		5599950	0					
ANR	5599952	CompoundStatement		423:0:10463:10916	5599950	0					
ANR	5599953	IfStatement	if ( m_path )		5599950	0					
ANR	5599954	Condition	m_path	425:5:10471:10476	5599950	0	True				
ANR	5599955	Identifier	m_path		5599950	0					
ANR	5599956	CompoundStatement		3:13:15:15	5599950	1					
ANR	5599957	ExpressionStatement	free ( m_path )	426:2:10483:10497	5599950	0	True				
ANR	5599958	CallExpression	free ( m_path )		5599950	0					
ANR	5599959	Callee	free		5599950	0					
ANR	5599960	Identifier	free		5599950	0					
ANR	5599961	ArgumentList	m_path		5599950	1					
ANR	5599962	Argument	m_path		5599950	0					
ANR	5599963	Identifier	m_path		5599950	0					
ANR	5599964	ExpressionStatement	m_path = NULL	427:2:10501:10514	5599950	1	True				
ANR	5599965	AssignmentExpression	m_path = NULL		5599950	0		=			
ANR	5599966	Identifier	m_path		5599950	0					
ANR	5599967	Identifier	NULL		5599950	1					
ANR	5599968	IfStatement	if ( m_gjid )		5599950	1					
ANR	5599969	Condition	m_gjid	429:5:10524:10529	5599950	0	True				
ANR	5599970	Identifier	m_gjid		5599950	0					
ANR	5599971	CompoundStatement		7:13:68:68	5599950	1					
ANR	5599972	ExpressionStatement	free ( m_gjid )	430:2:10536:10548	5599950	0	True				
ANR	5599973	CallExpression	free ( m_gjid )		5599950	0					
ANR	5599974	Callee	free		5599950	0					
ANR	5599975	Identifier	free		5599950	0					
ANR	5599976	ArgumentList	m_gjid		5599950	1					
ANR	5599977	Argument	m_gjid		5599950	0					
ANR	5599978	Identifier	m_gjid		5599950	0					
ANR	5599979	ExpressionStatement	m_gjid = NULL	431:2:10552:10565	5599950	1	True				
ANR	5599980	AssignmentExpression	m_gjid = NULL		5599950	0		=			
ANR	5599981	Identifier	m_gjid		5599950	0					
ANR	5599982	Identifier	NULL		5599950	1					
ANR	5599983	IfStatement	if ( m_fp != NULL )		5599950	2					
ANR	5599984	Condition	m_fp != NULL	433:5:10575:10586	5599950	0	True				
ANR	5599985	EqualityExpression	m_fp != NULL		5599950	0		!=			
ANR	5599986	Identifier	m_fp		5599950	0					
ANR	5599987	Identifier	NULL		5599950	1					
ANR	5599988	CompoundStatement		11:19:125:125	5599950	1					
ANR	5599989	IfStatement	if ( fclose ( m_fp ) != 0 )		5599950	0					
ANR	5599990	Condition	fclose ( m_fp ) != 0	434:7:10598:10616	5599950	0	True				
ANR	5599991	EqualityExpression	fclose ( m_fp ) != 0		5599950	0		!=			
ANR	5599992	CallExpression	fclose ( m_fp )		5599950	0					
ANR	5599993	Callee	fclose		5599950	0					
ANR	5599994	Identifier	fclose		5599950	0					
ANR	5599995	ArgumentList	m_fp		5599950	1					
ANR	5599996	Argument	m_fp		5599950	0					
ANR	5599997	Identifier	m_fp		5599950	0					
ANR	5599998	PrimaryExpression	0		5599950	1					
ANR	5599999	CompoundStatement		12:29:156:156	5599950	1					
ANR	5600000	Statement	dprintf	435:3:10625:10631	5599950	0	True				
ANR	5600001	Statement	(	435:10:10632:10632	5599950	1	True				
ANR	5600002	Statement	D_ALWAYS	435:12:10634:10641	5599950	2	True				
ANR	5600003	Statement	","	435:20:10642:10642	5599950	3	True				
ANR	5600004	Statement	"""WriteUserLog::FreeLocalResources(): """	436:6:10650:10687	5599950	4	True				
ANR	5600005	Statement	"""fclose() failed - errno %d (%s)\\n"""	437:6:10695:10729	5599950	5	True				
ANR	5600006	Statement	","	437:41:10730:10730	5599950	6	True				
ANR	5600007	Statement	errno	438:6:10738:10742	5599950	7	True				
ANR	5600008	Statement	","	438:11:10743:10743	5599950	8	True				
ANR	5600009	Statement	strerror	438:13:10745:10752	5599950	9	True				
ANR	5600010	Statement	(	438:21:10753:10753	5599950	10	True				
ANR	5600011	Statement	errno	438:22:10754:10758	5599950	11	True				
ANR	5600012	Statement	)	438:27:10759:10759	5599950	12	True				
ANR	5600013	Statement	)	438:29:10761:10761	5599950	13	True				
ANR	5600014	ExpressionStatement		438:30:10762:10762	5599950	14	True				
ANR	5600015	ExpressionStatement	m_fp = NULL	440:2:10770:10781	5599950	1	True				
ANR	5600016	AssignmentExpression	m_fp = NULL		5599950	0		=			
ANR	5600017	Identifier	m_fp		5599950	0					
ANR	5600018	Identifier	NULL		5599950	1					
ANR	5600019	IfStatement	if ( m_lock )		5599950	3					
ANR	5600020	Condition	m_lock	442:5:10791:10796	5599950	0	True				
ANR	5600021	Identifier	m_lock		5599950	0					
ANR	5600022	CompoundStatement		20:13:335:335	5599950	1					
ANR	5600023	Statement	delete	443:2:10803:10808	5599950	0	True				
ANR	5600024	ExpressionStatement	m_lock	443:9:10810:10816	5599950	1	True				
ANR	5600025	Identifier	m_lock		5599950	0					
ANR	5600026	ExpressionStatement	m_lock = NULL	444:2:10820:10833	5599950	2	True				
ANR	5600027	AssignmentExpression	m_lock = NULL		5599950	0		=			
ANR	5600028	Identifier	m_lock		5599950	0					
ANR	5600029	Identifier	NULL		5599950	1					
ANR	5600030	IfStatement	if ( m_creator_name )		5599950	4					
ANR	5600031	Condition	m_creator_name	447:5:10844:10857	5599950	0	True				
ANR	5600032	Identifier	m_creator_name		5599950	0					
ANR	5600033	CompoundStatement		25:21:396:396	5599950	1					
ANR	5600034	ExpressionStatement	free ( m_creator_name )	448:2:10864:10886	5599950	0	True				
ANR	5600035	CallExpression	free ( m_creator_name )		5599950	0					
ANR	5600036	Callee	free		5599950	0					
ANR	5600037	Identifier	free		5599950	0					
ANR	5600038	ArgumentList	m_creator_name		5599950	1					
ANR	5600039	Argument	m_creator_name		5599950	0					
ANR	5600040	Identifier	m_creator_name		5599950	0					
ANR	5600041	ExpressionStatement	m_creator_name = NULL	449:2:10890:10911	5599950	1	True				
ANR	5600042	AssignmentExpression	m_creator_name = NULL		5599950	0		=			
ANR	5600043	Identifier	m_creator_name		5599950	0					
ANR	5600044	Identifier	NULL		5599950	1					
ANR	5600045	ReturnType	void		5599950	1					
ANR	5600046	Identifier	WriteUserLog :: FreeLocalResources		5599950	2					
ANR	5600047	ParameterList			5599950	3					
ANR	5600048	CFGEntryNode	ENTRY		5599950		True				
ANR	5600049	CFGExitNode	EXIT		5599950		True				
ANR	5600050	Symbol	m_lock		5599950						
ANR	5600051	Symbol	NULL		5599950						
ANR	5600052	Symbol	m_creator_name		5599950						
ANR	5600053	Symbol	fclose		5599950						
ANR	5600054	Symbol	m_path		5599950						
ANR	5600055	Symbol	m_gjid		5599950						
ANR	5600056	Symbol	m_fp		5599950						
ANR	5600057	Function	WriteUserLog :: setCreatorName	453:0:10919:11130							
ANR	5600058	FunctionDef	WriteUserLog :: setCreatorName (const char * name)		5600057	0					
ANR	5600059	CompoundStatement		455:0:10973:11130	5600057	0					
ANR	5600060	IfStatement	if ( name )		5600057	0					
ANR	5600061	Condition	name	456:6:10981:10984	5600057	0	True				
ANR	5600062	Identifier	name		5600057	0					
ANR	5600063	CompoundStatement		2:13:14:14	5600057	1					
ANR	5600064	IfStatement	if ( m_creator_name )		5600057	0					
ANR	5600065	Condition	m_creator_name	457:7:10997:11010	5600057	0	True				
ANR	5600066	Identifier	m_creator_name		5600057	0					
ANR	5600067	CompoundStatement		3:24:40:40	5600057	1					
ANR	5600068	Statement	free	458:3:11019:11022	5600057	0	True				
ANR	5600069	Statement	(	458:7:11023:11023	5600057	1	True				
ANR	5600070	Statement	const_cast	458:9:11025:11034	5600057	2	True				
ANR	5600071	Statement	<	458:19:11035:11035	5600057	3	True				
ANR	5600072	Statement	char	458:20:11036:11039	5600057	4	True				
ANR	5600073	Statement	*	458:24:11040:11040	5600057	5	True				
ANR	5600074	Statement	>	458:25:11041:11041	5600057	6	True				
ANR	5600075	Statement	(	458:26:11042:11042	5600057	7	True				
ANR	5600076	Statement	m_creator_name	458:27:11043:11056	5600057	8	True				
ANR	5600077	Statement	)	458:41:11057:11057	5600057	9	True				
ANR	5600078	Statement	)	458:43:11059:11059	5600057	10	True				
ANR	5600079	ExpressionStatement		458:44:11060:11060	5600057	11	True				
ANR	5600080	ExpressionStatement	m_creator_name = NULL	459:3:11065:11086	5600057	12	True				
ANR	5600081	AssignmentExpression	m_creator_name = NULL		5600057	0		=			
ANR	5600082	Identifier	m_creator_name		5600057	0					
ANR	5600083	Identifier	NULL		5600057	1					
ANR	5600084	ExpressionStatement	m_creator_name = strdup ( name )	461:2:11094:11125	5600057	1	True				
ANR	5600085	AssignmentExpression	m_creator_name = strdup ( name )		5600057	0		=			
ANR	5600086	Identifier	m_creator_name		5600057	0					
ANR	5600087	CallExpression	strdup ( name )		5600057	1					
ANR	5600088	Callee	strdup		5600057	0					
ANR	5600089	Identifier	strdup		5600057	0					
ANR	5600090	ArgumentList	name		5600057	1					
ANR	5600091	Argument	name		5600057	0					
ANR	5600092	Identifier	name		5600057	0					
ANR	5600093	ReturnType	void		5600057	1					
ANR	5600094	Identifier	WriteUserLog :: setCreatorName		5600057	2					
ANR	5600095	ParameterList	const char * name		5600057	3					
ANR	5600096	Parameter	const char * name	454:30:10954:10969	5600057	0	True				
ANR	5600097	ParameterType	const char *		5600057	0					
ANR	5600098	Identifier	name		5600057	1					
ANR	5600099	CFGEntryNode	ENTRY		5600057		True				
ANR	5600100	CFGExitNode	EXIT		5600057		True				
ANR	5600101	Symbol	m_creator_name		5600057						
ANR	5600102	Symbol	NULL		5600057						
ANR	5600103	Symbol	name		5600057						
ANR	5600104	Symbol	strdup		5600057						
ANR	5600105	Function	WriteUserLog :: openFile	465:0:11133:13400							
ANR	5600106	FunctionDef	"WriteUserLog :: openFile (const char * file , bool log_as_user , bool use_lock , bool append , FileLockBase * & lock , FILE * & fp)"		5600105	0					
ANR	5600107	CompoundStatement		473:0:11358:13400	5600105	0					
ANR	5600108	ExpressionStatement	( void ) log_as_user	474:1:11361:11380	5600105	0	True				
ANR	5600109	CastExpression	( void ) log_as_user		5600105	0					
ANR	5600110	CastTarget	void		5600105	0					
ANR	5600111	Identifier	log_as_user		5600105	1					
ANR	5600112	IdentifierDeclStatement	int fd = 0 ;	475:1:11400:11411	5600105	1	True				
ANR	5600113	IdentifierDecl	fd = 0		5600105	0					
ANR	5600114	IdentifierDeclType	int		5600105	0					
ANR	5600115	Identifier	fd		5600105	1					
ANR	5600116	AssignmentExpression	fd = 0		5600105	2		=			
ANR	5600117	Identifier	fd		5600105	0					
ANR	5600118	PrimaryExpression	0		5600105	1					
ANR	5600119	IfStatement	if ( file == NULL )		5600105	2					
ANR	5600120	Condition	file == NULL	477:6:11420:11431	5600105	0	True				
ANR	5600121	EqualityExpression	file == NULL		5600105	0		==			
ANR	5600122	Identifier	file		5600105	0					
ANR	5600123	Identifier	NULL		5600105	1					
ANR	5600124	CompoundStatement		5:21:76:76	5600105	1					
ANR	5600125	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog::openFile: NULL filename!\\n"" )"	478:2:11439:11502	5600105	0	True				
ANR	5600126	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog::openFile: NULL filename!\\n"" )"		5600105	0					
ANR	5600127	Callee	dprintf		5600105	0					
ANR	5600128	Identifier	dprintf		5600105	0					
ANR	5600129	ArgumentList	D_ALWAYS		5600105	1					
ANR	5600130	Argument	D_ALWAYS		5600105	0					
ANR	5600131	Identifier	D_ALWAYS		5600105	0					
ANR	5600132	Argument	"""WriteUserLog::openFile: NULL filename!\\n"""		5600105	1					
ANR	5600133	PrimaryExpression	"""WriteUserLog::openFile: NULL filename!\\n"""		5600105	0					
ANR	5600134	ReturnStatement	return false ;	479:2:11506:11518	5600105	1	True				
ANR	5600135	Identifier	false		5600105	0					
ANR	5600136	IfStatement	"if ( strcmp ( file , UNIX_NULL_FILE ) == 0 )"		5600105	3					
ANR	5600137	Condition	"strcmp ( file , UNIX_NULL_FILE ) == 0"	482:6:11530:11559	5600105	0	True				
ANR	5600138	EqualityExpression	"strcmp ( file , UNIX_NULL_FILE ) == 0"		5600105	0		==			
ANR	5600139	CallExpression	"strcmp ( file , UNIX_NULL_FILE )"		5600105	0					
ANR	5600140	Callee	strcmp		5600105	0					
ANR	5600141	Identifier	strcmp		5600105	0					
ANR	5600142	ArgumentList	file		5600105	1					
ANR	5600143	Argument	file		5600105	0					
ANR	5600144	Identifier	file		5600105	0					
ANR	5600145	Argument	UNIX_NULL_FILE		5600105	1					
ANR	5600146	Identifier	UNIX_NULL_FILE		5600105	0					
ANR	5600147	PrimaryExpression	0		5600105	1					
ANR	5600148	CompoundStatement		10:39:204:204	5600105	1					
ANR	5600149	ExpressionStatement	fp = NULL	489:2:11910:11919	5600105	0	True				
ANR	5600150	AssignmentExpression	fp = NULL		5600105	0		=			
ANR	5600151	Identifier	fp		5600105	0					
ANR	5600152	Identifier	NULL		5600105	1					
ANR	5600153	ExpressionStatement	lock = NULL	490:2:11923:11934	5600105	1	True				
ANR	5600154	AssignmentExpression	lock = NULL		5600105	0		=			
ANR	5600155	Identifier	lock		5600105	0					
ANR	5600156	Identifier	NULL		5600105	1					
ANR	5600157	ReturnStatement	return true ;	491:2:11938:11949	5600105	2	True				
ANR	5600158	Identifier	true		5600105	0					
ANR	5600159	Statement	if	494:2:11957:11958	5600105	4	True				
ANR	5600160	Statement	!	494:5:11960:11960	5600105	5	True				
ANR	5600161	Statement	defined	494:6:11961:11967	5600105	6	True				
ANR	5600162	Statement	(	494:13:11968:11968	5600105	7	True				
ANR	5600163	Statement	WIN32	494:14:11969:11973	5600105	8	True				
ANR	5600164	Statement	)	494:19:11974:11974	5600105	9	True				
ANR	5600165	IdentifierDeclStatement	int flags = O_WRONLY | O_CREAT ;	496:1:11986:12016	5600105	10	True				
ANR	5600166	IdentifierDecl	flags = O_WRONLY | O_CREAT		5600105	0					
ANR	5600167	IdentifierDeclType	int		5600105	0					
ANR	5600168	Identifier	flags		5600105	1					
ANR	5600169	AssignmentExpression	flags = O_WRONLY | O_CREAT		5600105	2		=			
ANR	5600170	Identifier	flags		5600105	0					
ANR	5600171	InclusiveOrExpression	O_WRONLY | O_CREAT		5600105	1		|			
ANR	5600172	Identifier	O_WRONLY		5600105	0					
ANR	5600173	Identifier	O_CREAT		5600105	1					
ANR	5600174	IfStatement	if ( append )		5600105	11					
ANR	5600175	Condition	append	497:6:12024:12029	5600105	0	True				
ANR	5600176	Identifier	append		5600105	0					
ANR	5600177	CompoundStatement		25:15:674:674	5600105	1					
ANR	5600178	ExpressionStatement	flags |= O_APPEND	498:2:12037:12054	5600105	0	True				
ANR	5600179	AssignmentExpression	flags |= O_APPEND		5600105	0		|=			
ANR	5600180	Identifier	flags		5600105	0					
ANR	5600181	Identifier	O_APPEND		5600105	1					
ANR	5600182	IdentifierDeclStatement	mode_t mode = 0664 ;	500:1:12060:12078	5600105	12	True				
ANR	5600183	IdentifierDecl	mode = 0664		5600105	0					
ANR	5600184	IdentifierDeclType	mode_t		5600105	0					
ANR	5600185	Identifier	mode		5600105	1					
ANR	5600186	AssignmentExpression	mode = 0664		5600105	2		=			
ANR	5600187	Identifier	mode		5600105	0					
ANR	5600188	PrimaryExpression	0664		5600105	1					
ANR	5600189	ExpressionStatement	"fd = safe_open_wrapper_follow ( file , flags , mode )"	501:1:12081:12131	5600105	13	True				
ANR	5600190	AssignmentExpression	"fd = safe_open_wrapper_follow ( file , flags , mode )"		5600105	0		=			
ANR	5600191	Identifier	fd		5600105	0					
ANR	5600192	CallExpression	"safe_open_wrapper_follow ( file , flags , mode )"		5600105	1					
ANR	5600193	Callee	safe_open_wrapper_follow		5600105	0					
ANR	5600194	Identifier	safe_open_wrapper_follow		5600105	0					
ANR	5600195	ArgumentList	file		5600105	1					
ANR	5600196	Argument	file		5600105	0					
ANR	5600197	Identifier	file		5600105	0					
ANR	5600198	Argument	flags		5600105	1					
ANR	5600199	Identifier	flags		5600105	0					
ANR	5600200	Argument	mode		5600105	2					
ANR	5600201	Identifier	mode		5600105	0					
ANR	5600202	IfStatement	if ( fd < 0 )		5600105	14					
ANR	5600203	Condition	fd < 0	502:5:12138:12143	5600105	0	True				
ANR	5600204	RelationalExpression	fd < 0		5600105	0		<			
ANR	5600205	Identifier	fd		5600105	0					
ANR	5600206	PrimaryExpression	0		5600105	1					
ANR	5600207	CompoundStatement		30:14:788:788	5600105	1					
ANR	5600208	Statement	dprintf	503:2:12151:12157	5600105	0	True				
ANR	5600209	Statement	(	503:9:12158:12158	5600105	1	True				
ANR	5600210	Statement	D_ALWAYS	503:11:12160:12167	5600105	2	True				
ANR	5600211	Statement	","	503:19:12168:12168	5600105	3	True				
ANR	5600212	Statement	"""WriteUserLog::initialize: """	504:11:12181:12208	5600105	4	True				
ANR	5600213	Statement	"""safe_open_wrapper(\\""%s\\"") failed - errno %d (%s)\\n"""	505:15:12225:12276	5600105	5	True				
ANR	5600214	Statement	","	505:67:12277:12277	5600105	6	True				
ANR	5600215	Statement	file	506:11:12290:12293	5600105	7	True				
ANR	5600216	Statement	","	506:15:12294:12294	5600105	8	True				
ANR	5600217	Statement	errno	507:11:12307:12311	5600105	9	True				
ANR	5600218	Statement	","	507:16:12312:12312	5600105	10	True				
ANR	5600219	Statement	strerror	508:11:12325:12332	5600105	11	True				
ANR	5600220	Statement	(	508:19:12333:12333	5600105	12	True				
ANR	5600221	Statement	errno	508:20:12334:12338	5600105	13	True				
ANR	5600222	Statement	)	508:25:12339:12339	5600105	14	True				
ANR	5600223	Statement	)	508:27:12341:12341	5600105	15	True				
ANR	5600224	ExpressionStatement		508:28:12342:12342	5600105	16	True				
ANR	5600225	ReturnStatement	return false ;	509:2:12346:12358	5600105	17	True				
ANR	5600226	Identifier	false		5600105	0					
ANR	5600227	IdentifierDeclStatement	"const char * fmode = append ? ""a"" : ""w"" ;"	513:1:12396:12434	5600105	15	True				
ANR	5600228	IdentifierDecl	"* fmode = append ? ""a"" : ""w"""		5600105	0					
ANR	5600229	IdentifierDeclType	const char *		5600105	0					
ANR	5600230	Identifier	fmode		5600105	1					
ANR	5600231	AssignmentExpression	"* fmode = append ? ""a"" : ""w"""		5600105	2		=			
ANR	5600232	Identifier	fmode		5600105	0					
ANR	5600233	ConditionalExpression	"append ? ""a"" : ""w"""		5600105	1					
ANR	5600234	Condition	append		5600105	0					
ANR	5600235	Identifier	append		5600105	0					
ANR	5600236	PrimaryExpression	"""a"""		5600105	1					
ANR	5600237	PrimaryExpression	"""w"""		5600105	2					
ANR	5600238	ExpressionStatement	"fp = fdopen ( fd , fmode )"	514:1:12437:12461	5600105	16	True				
ANR	5600239	AssignmentExpression	"fp = fdopen ( fd , fmode )"		5600105	0		=			
ANR	5600240	Identifier	fp		5600105	0					
ANR	5600241	CallExpression	"fdopen ( fd , fmode )"		5600105	1					
ANR	5600242	Callee	fdopen		5600105	0					
ANR	5600243	Identifier	fdopen		5600105	0					
ANR	5600244	ArgumentList	fd		5600105	1					
ANR	5600245	Argument	fd		5600105	0					
ANR	5600246	Identifier	fd		5600105	0					
ANR	5600247	Argument	fmode		5600105	1					
ANR	5600248	Identifier	fmode		5600105	0					
ANR	5600249	IfStatement	if ( NULL == fp )		5600105	17					
ANR	5600250	Condition	NULL == fp	515:5:12468:12477	5600105	0	True				
ANR	5600251	EqualityExpression	NULL == fp		5600105	0		==			
ANR	5600252	Identifier	NULL		5600105	0					
ANR	5600253	Identifier	fp		5600105	1					
ANR	5600254	CompoundStatement		43:18:1122:1122	5600105	1					
ANR	5600255	Statement	dprintf	516:2:12485:12491	5600105	0	True				
ANR	5600256	Statement	(	516:9:12492:12492	5600105	1	True				
ANR	5600257	Statement	D_ALWAYS	516:11:12494:12501	5600105	2	True				
ANR	5600258	Statement	","	516:19:12502:12502	5600105	3	True				
ANR	5600259	Statement	"""WriteUserLog::initialize: """	516:21:12504:12531	5600105	4	True				
ANR	5600260	Statement	"""fdopen(%i,%s) failed - errno %d (%s)\\n"""	517:5:12538:12577	5600105	5	True				
ANR	5600261	Statement	","	517:45:12578:12578	5600105	6	True				
ANR	5600262	Statement	fd	518:5:12585:12586	5600105	7	True				
ANR	5600263	Statement	","	518:7:12587:12587	5600105	8	True				
ANR	5600264	Statement	fmode	518:9:12589:12593	5600105	9	True				
ANR	5600265	Statement	","	518:14:12594:12594	5600105	10	True				
ANR	5600266	Statement	errno	518:16:12596:12600	5600105	11	True				
ANR	5600267	Statement	","	518:21:12601:12601	5600105	12	True				
ANR	5600268	Statement	strerror	518:23:12603:12610	5600105	13	True				
ANR	5600269	Statement	(	518:31:12611:12611	5600105	14	True				
ANR	5600270	Statement	errno	518:32:12612:12616	5600105	15	True				
ANR	5600271	Statement	)	518:37:12617:12617	5600105	16	True				
ANR	5600272	Statement	)	518:39:12619:12619	5600105	17	True				
ANR	5600273	ExpressionStatement		518:40:12620:12620	5600105	18	True				
ANR	5600274	ExpressionStatement	close ( fd )	519:2:12624:12635	5600105	19	True				
ANR	5600275	CallExpression	close ( fd )		5600105	0					
ANR	5600276	Callee	close		5600105	0					
ANR	5600277	Identifier	close		5600105	0					
ANR	5600278	ArgumentList	fd		5600105	1					
ANR	5600279	Argument	fd		5600105	0					
ANR	5600280	Identifier	fd		5600105	0					
ANR	5600281	ReturnStatement	return false ;	520:2:12639:12651	5600105	20	True				
ANR	5600282	Identifier	false		5600105	0					
ANR	5600283	ElseStatement	else		5600105	0					
ANR	5600284	IdentifierDeclStatement	"const char * fmode = append ? ""a+tc"" : ""w+tc"" ;"	524:1:12689:12733	5600105	0	True				
ANR	5600285	IdentifierDecl	"* fmode = append ? ""a+tc"" : ""w+tc"""		5600105	0					
ANR	5600286	IdentifierDeclType	const char *		5600105	0					
ANR	5600287	Identifier	fmode		5600105	1					
ANR	5600288	AssignmentExpression	"* fmode = append ? ""a+tc"" : ""w+tc"""		5600105	2		=			
ANR	5600289	Identifier	fmode		5600105	0					
ANR	5600290	ConditionalExpression	"append ? ""a+tc"" : ""w+tc"""		5600105	1					
ANR	5600291	Condition	append		5600105	0					
ANR	5600292	Identifier	append		5600105	0					
ANR	5600293	PrimaryExpression	"""a+tc"""		5600105	1					
ANR	5600294	PrimaryExpression	"""w+tc"""		5600105	2					
ANR	5600295	ExpressionStatement	"fp = safe_fopen_wrapper_follow ( file , fmode )"	525:1:12736:12781	5600105	18	True				
ANR	5600296	AssignmentExpression	"fp = safe_fopen_wrapper_follow ( file , fmode )"		5600105	0		=			
ANR	5600297	Identifier	fp		5600105	0					
ANR	5600298	CallExpression	"safe_fopen_wrapper_follow ( file , fmode )"		5600105	1					
ANR	5600299	Callee	safe_fopen_wrapper_follow		5600105	0					
ANR	5600300	Identifier	safe_fopen_wrapper_follow		5600105	0					
ANR	5600301	ArgumentList	file		5600105	1					
ANR	5600302	Argument	file		5600105	0					
ANR	5600303	Identifier	file		5600105	0					
ANR	5600304	Argument	fmode		5600105	1					
ANR	5600305	Identifier	fmode		5600105	0					
ANR	5600306	IfStatement	if ( NULL == fp )		5600105	19					
ANR	5600307	Condition	NULL == fp	526:5:12788:12797	5600105	0	True				
ANR	5600308	EqualityExpression	NULL == fp		5600105	0		==			
ANR	5600309	Identifier	NULL		5600105	0					
ANR	5600310	Identifier	fp		5600105	1					
ANR	5600311	CompoundStatement		54:18:1442:1442	5600105	1					
ANR	5600312	Statement	dprintf	527:2:12805:12811	5600105	0	True				
ANR	5600313	Statement	(	527:9:12812:12812	5600105	1	True				
ANR	5600314	Statement	D_ALWAYS	527:11:12814:12821	5600105	2	True				
ANR	5600315	Statement	","	527:19:12822:12822	5600105	3	True				
ANR	5600316	Statement	"""WriteUserLog::initialize: """	527:21:12824:12851	5600105	4	True				
ANR	5600317	Statement	"""safe_fopen_wrapper_follow(\\""%s\\"",%s) failed - errno %d (%s)\\n"""	528:5:12858:12920	5600105	5	True				
ANR	5600318	Statement	","	528:68:12921:12921	5600105	6	True				
ANR	5600319	Statement	file	529:5:12928:12931	5600105	7	True				
ANR	5600320	Statement	","	529:9:12932:12932	5600105	8	True				
ANR	5600321	Statement	fmode	529:11:12934:12938	5600105	9	True				
ANR	5600322	Statement	","	529:16:12939:12939	5600105	10	True				
ANR	5600323	Statement	errno	529:18:12941:12945	5600105	11	True				
ANR	5600324	Statement	","	529:23:12946:12946	5600105	12	True				
ANR	5600325	Statement	strerror	529:25:12948:12955	5600105	13	True				
ANR	5600326	Statement	(	529:33:12956:12956	5600105	14	True				
ANR	5600327	Statement	errno	529:34:12957:12961	5600105	15	True				
ANR	5600328	Statement	)	529:39:12962:12962	5600105	16	True				
ANR	5600329	Statement	)	529:41:12964:12964	5600105	17	True				
ANR	5600330	ExpressionStatement		529:42:12965:12965	5600105	18	True				
ANR	5600331	ReturnStatement	return false ;	530:2:12969:12981	5600105	19	True				
ANR	5600332	Identifier	false		5600105	0					
ANR	5600333	ExpressionStatement	fd = _fileno ( fp )	533:1:12988:13004	5600105	20	True				
ANR	5600334	AssignmentExpression	fd = _fileno ( fp )		5600105	0		=			
ANR	5600335	Identifier	fd		5600105	0					
ANR	5600336	CallExpression	_fileno ( fp )		5600105	1					
ANR	5600337	Callee	_fileno		5600105	0					
ANR	5600338	Identifier	_fileno		5600105	0					
ANR	5600339	ArgumentList	fp		5600105	1					
ANR	5600340	Argument	fp		5600105	0					
ANR	5600341	Identifier	fp		5600105	0					
ANR	5600342	Statement	endif	534:2:13008:13012	5600105	21	True				
ANR	5600343	IfStatement	if ( use_lock )		5600105	22					
ANR	5600344	Condition	use_lock	537:6:13051:13058	5600105	0	True				
ANR	5600345	Identifier	use_lock		5600105	0					
ANR	5600346	CompoundStatement		67:2:1727:1795	5600105	1					
ANR	5600347	IdentifierDeclStatement	"bool new_locking = param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true ) ;"	539:2:13086:13154	5600105	0	True				
ANR	5600348	IdentifierDecl	"new_locking = param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true )"		5600105	0					
ANR	5600349	IdentifierDeclType	bool		5600105	0					
ANR	5600350	Identifier	new_locking		5600105	1					
ANR	5600351	AssignmentExpression	"new_locking = param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true )"		5600105	2		=			
ANR	5600352	Identifier	new_locking		5600105	0					
ANR	5600353	CallExpression	"param_boolean ( ""CREATE_LOCKS_ON_LOCAL_DISK"" , true )"		5600105	1					
ANR	5600354	Callee	param_boolean		5600105	0					
ANR	5600355	Identifier	param_boolean		5600105	0					
ANR	5600356	ArgumentList	"""CREATE_LOCKS_ON_LOCAL_DISK"""		5600105	1					
ANR	5600357	Argument	"""CREATE_LOCKS_ON_LOCAL_DISK"""		5600105	0					
ANR	5600358	PrimaryExpression	"""CREATE_LOCKS_ON_LOCAL_DISK"""		5600105	0					
ANR	5600359	Argument	true		5600105	1					
ANR	5600360	Identifier	true		5600105	0					
ANR	5600361	IfStatement	if ( new_locking )		5600105	1					
ANR	5600362	Condition	new_locking	541:6:13166:13176	5600105	0	True				
ANR	5600363	Identifier	new_locking		5600105	0					
ANR	5600364	CompoundStatement		69:19:1820:1820	5600105	1					
ANR	5600365	ExpressionStatement	"lock = new FileLock ( file , true , false )"	542:3:13184:13222	5600105	0	True				
ANR	5600366	AssignmentExpression	"lock = new FileLock ( file , true , false )"		5600105	0		=			
ANR	5600367	Identifier	lock		5600105	0					
ANR	5600368	Expression	"file , true , false"		5600105	1					
ANR	5600369	Identifier	file		5600105	0					
ANR	5600370	Expression	"true , false"		5600105	1					
ANR	5600371	Identifier	true		5600105	0					
ANR	5600372	Identifier	false		5600105	1					
ANR	5600373	IfStatement	if ( lock -> initSucceeded ( ) )		5600105	1					
ANR	5600374	Condition	lock -> initSucceeded ( )	543:8:13232:13252	5600105	0	True				
ANR	5600375	CallExpression	lock -> initSucceeded ( )		5600105	0					
ANR	5600376	Callee	lock -> initSucceeded		5600105	0					
ANR	5600377	PtrMemberAccess	lock -> initSucceeded		5600105	0					
ANR	5600378	Identifier	lock		5600105	0					
ANR	5600379	Identifier	initSucceeded		5600105	1					
ANR	5600380	ArgumentList			5600105	1					
ANR	5600381	ReturnStatement	return true ;	544:4:13260:13271	5600105	1	True				
ANR	5600382	Identifier	true		5600105	0					
ANR	5600383	Statement	delete	545:3:13276:13281	5600105	2	True				
ANR	5600384	ExpressionStatement	lock	545:10:13283:13287	5600105	3	True				
ANR	5600385	Identifier	lock		5600105	0					
ANR	5600386	ExpressionStatement	"lock = new FileLock ( fd , fp , file )"	548:2:13305:13340	5600105	2	True				
ANR	5600387	AssignmentExpression	"lock = new FileLock ( fd , fp , file )"		5600105	0		=			
ANR	5600388	Identifier	lock		5600105	0					
ANR	5600389	Expression	"fd , fp , file"		5600105	1					
ANR	5600390	Identifier	fd		5600105	0					
ANR	5600391	Expression	"fp , file"		5600105	1					
ANR	5600392	Identifier	fp		5600105	0					
ANR	5600393	Identifier	file		5600105	1					
ANR	5600394	ElseStatement	else		5600105	0					
ANR	5600395	CompoundStatement		77:8:1991:1991	5600105	0					
ANR	5600396	ExpressionStatement	lock = new FakeFileLock ( )	550:2:13354:13380	5600105	0	True				
ANR	5600397	AssignmentExpression	lock = new FakeFileLock ( )		5600105	0		=			
ANR	5600398	Identifier	lock		5600105	0					
ANR	5600399	UnaryExpression	new FakeFileLock ( )		5600105	1					
ANR	5600400	ReturnStatement	return true ;	553:1:13387:13398	5600105	23	True				
ANR	5600401	Identifier	true		5600105	0					
ANR	5600402	ReturnType	bool		5600105	1					
ANR	5600403	Identifier	WriteUserLog :: openFile		5600105	2					
ANR	5600404	ParameterList	"const char * file , bool log_as_user , bool use_lock , bool append , FileLockBase * & lock , FILE * & fp"		5600105	3					
ANR	5600405	Parameter	const char * file	467:1:11163:11179	5600105	0	True				
ANR	5600406	ParameterType	const char *		5600105	0					
ANR	5600407	Identifier	file		5600105	1					
ANR	5600408	Parameter	bool log_as_user	468:1:11183:11201	5600105	1	True				
ANR	5600409	ParameterType	bool		5600105	0					
ANR	5600410	Identifier	log_as_user		5600105	1					
ANR	5600411	Parameter	bool use_lock	469:1:11252:11267	5600105	2	True				
ANR	5600412	ParameterType	bool		5600105	0					
ANR	5600413	Identifier	use_lock		5600105	1					
ANR	5600414	Parameter	bool append	470:1:11288:11301	5600105	3	True				
ANR	5600415	ParameterType	bool		5600105	0					
ANR	5600416	Identifier	append		5600105	1					
ANR	5600417	Parameter	FileLockBase * & lock	471:1:11322:11340	5600105	4	True				
ANR	5600418	ParameterType	FileLockBase * &		5600105	0					
ANR	5600419	Identifier	lock		5600105	1					
ANR	5600420	Parameter	FILE * & fp	472:1:11344:11354	5600105	5	True				
ANR	5600421	ParameterType	FILE * &		5600105	0					
ANR	5600422	Identifier	fp		5600105	1					
ANR	5600423	CFGEntryNode	ENTRY		5600105		True				
ANR	5600424	CFGExitNode	EXIT		5600105		True				
ANR	5600425	Symbol	* lock		5600105						
ANR	5600426	Symbol	safe_open_wrapper_follow		5600105						
ANR	5600427	Symbol	O_CREAT		5600105						
ANR	5600428	Symbol	flags		5600105						
ANR	5600429	Symbol	fp		5600105						
ANR	5600430	Symbol	fdopen		5600105						
ANR	5600431	Symbol	mode		5600105						
ANR	5600432	Symbol	lock -> initSucceeded		5600105						
ANR	5600433	Symbol	file		5600105						
ANR	5600434	Symbol	lock		5600105						
ANR	5600435	Symbol	fmode		5600105						
ANR	5600436	Symbol	safe_fopen_wrapper_follow		5600105						
ANR	5600437	Symbol	strcmp		5600105						
ANR	5600438	Symbol	NULL		5600105						
ANR	5600439	Symbol	UNIX_NULL_FILE		5600105						
ANR	5600440	Symbol	_fileno		5600105						
ANR	5600441	Symbol	D_ALWAYS		5600105						
ANR	5600442	Symbol	false		5600105						
ANR	5600443	Symbol	log_as_user		5600105						
ANR	5600444	Symbol	param_boolean		5600105						
ANR	5600445	Symbol	O_APPEND		5600105						
ANR	5600446	Symbol	new_locking		5600105						
ANR	5600447	Symbol	true		5600105						
ANR	5600448	Symbol	O_WRONLY		5600105						
ANR	5600449	Symbol	use_lock		5600105						
ANR	5600450	Symbol	append		5600105						
ANR	5600451	Symbol	fd		5600105						
ANR	5600452	Function	WriteUserLog :: openGlobalLog	556:0:13403:13517							
ANR	5600453	FunctionDef	WriteUserLog :: openGlobalLog (bool reopen)		5600452	0					
ANR	5600454	CompoundStatement		558:0:13451:13517	5600452	0					
ANR	5600455	IdentifierDeclStatement	UserLogHeader header ;	559:1:13454:13474	5600452	0	True				
ANR	5600456	IdentifierDecl	header		5600452	0					
ANR	5600457	IdentifierDeclType	UserLogHeader		5600452	0					
ANR	5600458	Identifier	header		5600452	1					
ANR	5600459	ReturnStatement	"return openGlobalLog ( reopen , header ) ;"	560:1:13477:13515	5600452	1	True				
ANR	5600460	CallExpression	"openGlobalLog ( reopen , header )"		5600452	0					
ANR	5600461	Callee	openGlobalLog		5600452	0					
ANR	5600462	Identifier	openGlobalLog		5600452	0					
ANR	5600463	ArgumentList	reopen		5600452	1					
ANR	5600464	Argument	reopen		5600452	0					
ANR	5600465	Identifier	reopen		5600452	0					
ANR	5600466	Argument	header		5600452	1					
ANR	5600467	Identifier	header		5600452	0					
ANR	5600468	ReturnType	bool		5600452	1					
ANR	5600469	Identifier	WriteUserLog :: openGlobalLog		5600452	2					
ANR	5600470	ParameterList	bool reopen		5600452	3					
ANR	5600471	Parameter	bool reopen	557:29:13437:13447	5600452	0	True				
ANR	5600472	ParameterType	bool		5600452	0					
ANR	5600473	Identifier	reopen		5600452	1					
ANR	5600474	CFGEntryNode	ENTRY		5600452		True				
ANR	5600475	CFGExitNode	EXIT		5600452		True				
ANR	5600476	Symbol	openGlobalLog		5600452						
ANR	5600477	Symbol	reopen		5600452						
ANR	5600478	Symbol	header		5600452						
ANR	5600479	Function	WriteUserLog :: openGlobalLog	563:0:13520:15598							
ANR	5600480	FunctionDef	"WriteUserLog :: openGlobalLog (bool reopen , const UserLogHeader & header)"		5600479	0					
ANR	5600481	CompoundStatement		565:0:13597:15598	5600479	0					
ANR	5600482	IfStatement	if ( m_global_disable || ( NULL == m_global_path ) )		5600479	0					
ANR	5600483	Condition	m_global_disable || ( NULL == m_global_path )	566:6:13605:13645	5600479	0	True				
ANR	5600484	OrExpression	m_global_disable || ( NULL == m_global_path )		5600479	0		||			
ANR	5600485	Identifier	m_global_disable		5600479	0					
ANR	5600486	EqualityExpression	NULL == m_global_path		5600479	1		==			
ANR	5600487	Identifier	NULL		5600479	0					
ANR	5600488	Identifier	m_global_path		5600479	1					
ANR	5600489	CompoundStatement		2:50:51:51	5600479	1					
ANR	5600490	ReturnStatement	return true ;	567:2:13653:13664	5600479	0	True				
ANR	5600491	Identifier	true		5600479	0					
ANR	5600492	IfStatement	if ( reopen && m_global_fp )		5600479	1					
ANR	5600493	Condition	reopen && m_global_fp	571:5:13709:13729	5600479	0	True				
ANR	5600494	AndExpression	reopen && m_global_fp		5600479	0		&&			
ANR	5600495	Identifier	reopen		5600479	0					
ANR	5600496	Identifier	m_global_fp		5600479	1					
ANR	5600497	CompoundStatement		7:29:135:135	5600479	1					
ANR	5600498	ExpressionStatement	closeGlobalLog ( )	572:2:13737:13753	5600479	0	True				
ANR	5600499	CallExpression	closeGlobalLog ( )		5600479	0					
ANR	5600500	Callee	closeGlobalLog		5600479	0					
ANR	5600501	Identifier	closeGlobalLog		5600479	0					
ANR	5600502	ArgumentList			5600479	1					
ANR	5600503	ElseStatement	else		5600479	0					
ANR	5600504	IfStatement	if ( m_global_fp )		5600479	0					
ANR	5600505	Condition	m_global_fp	574:11:13769:13779	5600479	0	True				
ANR	5600506	Identifier	m_global_fp		5600479	0					
ANR	5600507	CompoundStatement		10:25:185:185	5600479	1					
ANR	5600508	ReturnStatement	return true ;	575:2:13787:13798	5600479	0	True				
ANR	5600509	Identifier	true		5600479	0					
ANR	5600510	IdentifierDeclStatement	bool ret_val = true ;	578:1:13805:13824	5600479	2	True				
ANR	5600511	IdentifierDecl	ret_val = true		5600479	0					
ANR	5600512	IdentifierDeclType	bool		5600479	0					
ANR	5600513	Identifier	ret_val		5600479	1					
ANR	5600514	AssignmentExpression	ret_val = true		5600479	2		=			
ANR	5600515	Identifier	true		5600479	0					
ANR	5600516	Identifier	true		5600479	1					
ANR	5600517	IdentifierDeclStatement	priv_state priv = set_condor_priv ( ) ;	579:1:13827:13862	5600479	3	True				
ANR	5600518	IdentifierDecl	priv = set_condor_priv ( )		5600479	0					
ANR	5600519	IdentifierDeclType	priv_state		5600479	0					
ANR	5600520	Identifier	priv		5600479	1					
ANR	5600521	AssignmentExpression	priv = set_condor_priv ( )		5600479	2		=			
ANR	5600522	Identifier	priv		5600479	0					
ANR	5600523	CallExpression	set_condor_priv ( )		5600479	1					
ANR	5600524	Callee	set_condor_priv		5600479	0					
ANR	5600525	Identifier	set_condor_priv		5600479	0					
ANR	5600526	ArgumentList			5600479	1					
ANR	5600527	ExpressionStatement	"ret_val = openFile ( m_global_path , false , m_global_lock_enable , true , m_global_lock , m_global_fp )"	580:1:13865:13968	5600479	4	True				
ANR	5600528	AssignmentExpression	"ret_val = openFile ( m_global_path , false , m_global_lock_enable , true , m_global_lock , m_global_fp )"		5600479	0		=			
ANR	5600529	Identifier	ret_val		5600479	0					
ANR	5600530	CallExpression	"openFile ( m_global_path , false , m_global_lock_enable , true , m_global_lock , m_global_fp )"		5600479	1					
ANR	5600531	Callee	openFile		5600479	0					
ANR	5600532	Identifier	openFile		5600479	0					
ANR	5600533	ArgumentList	m_global_path		5600479	1					
ANR	5600534	Argument	m_global_path		5600479	0					
ANR	5600535	Identifier	m_global_path		5600479	0					
ANR	5600536	Argument	false		5600479	1					
ANR	5600537	Identifier	false		5600479	0					
ANR	5600538	Argument	m_global_lock_enable		5600479	2					
ANR	5600539	Identifier	m_global_lock_enable		5600479	0					
ANR	5600540	Argument	true		5600479	3					
ANR	5600541	Identifier	true		5600479	0					
ANR	5600542	Argument	m_global_lock		5600479	4					
ANR	5600543	Identifier	m_global_lock		5600479	0					
ANR	5600544	Argument	m_global_fp		5600479	5					
ANR	5600545	Identifier	m_global_fp		5600479	0					
ANR	5600546	IfStatement	if ( ! ret_val )		5600479	5					
ANR	5600547	Condition	! ret_val	583:6:13977:13985	5600479	0	True				
ANR	5600548	UnaryOperationExpression	! ret_val		5600479	0					
ANR	5600549	UnaryOperator	!		5600479	0					
ANR	5600550	Identifier	ret_val		5600479	1					
ANR	5600551	CompoundStatement		19:18:391:391	5600479	1					
ANR	5600552	ExpressionStatement	set_priv ( priv )	584:2:13993:14009	5600479	0	True				
ANR	5600553	CallExpression	set_priv ( priv )		5600479	0					
ANR	5600554	Callee	set_priv		5600479	0					
ANR	5600555	Identifier	set_priv		5600479	0					
ANR	5600556	ArgumentList	priv		5600479	1					
ANR	5600557	Argument	priv		5600479	0					
ANR	5600558	Identifier	priv		5600479	0					
ANR	5600559	ReturnStatement	return false ;	585:2:14013:14025	5600479	1	True				
ANR	5600560	Identifier	false		5600479	0					
ANR	5600561	IfStatement	if ( ! m_global_lock -> obtain ( WRITE_LOCK ) )		5600479	6					
ANR	5600562	Condition	! m_global_lock -> obtain ( WRITE_LOCK )	587:5:14035:14068	5600479	0	True				
ANR	5600563	UnaryOperationExpression	! m_global_lock -> obtain ( WRITE_LOCK )		5600479	0					
ANR	5600564	UnaryOperator	!		5600479	0					
ANR	5600565	CallExpression	m_global_lock -> obtain ( WRITE_LOCK )		5600479	1					
ANR	5600566	Callee	m_global_lock -> obtain		5600479	0					
ANR	5600567	PtrMemberAccess	m_global_lock -> obtain		5600479	0					
ANR	5600568	Identifier	m_global_lock		5600479	0					
ANR	5600569	Identifier	obtain		5600479	1					
ANR	5600570	ArgumentList	WRITE_LOCK		5600479	1					
ANR	5600571	Argument	WRITE_LOCK		5600479	0					
ANR	5600572	Identifier	WRITE_LOCK		5600479	0					
ANR	5600573	CompoundStatement		23:42:474:474	5600479	1					
ANR	5600574	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR WriteUserLog Failed to grab global event log lock\\n"" )"	588:2:14076:14156	5600479	0	True				
ANR	5600575	CallExpression	"dprintf ( D_ALWAYS , ""ERROR WriteUserLog Failed to grab global event log lock\\n"" )"		5600479	0					
ANR	5600576	Callee	dprintf		5600479	0					
ANR	5600577	Identifier	dprintf		5600479	0					
ANR	5600578	ArgumentList	D_ALWAYS		5600479	1					
ANR	5600579	Argument	D_ALWAYS		5600479	0					
ANR	5600580	Identifier	D_ALWAYS		5600479	0					
ANR	5600581	Argument	"""ERROR WriteUserLog Failed to grab global event log lock\\n"""		5600479	1					
ANR	5600582	PrimaryExpression	"""ERROR WriteUserLog Failed to grab global event log lock\\n"""		5600479	0					
ANR	5600583	ReturnStatement	return false ;	589:2:14160:14172	5600479	1	True				
ANR	5600584	Identifier	false		5600479	0					
ANR	5600585	IdentifierDeclStatement	StatWrapper statinfo ;	592:1:14179:14200	5600479	7	True				
ANR	5600586	IdentifierDecl	statinfo		5600479	0					
ANR	5600587	IdentifierDeclType	StatWrapper		5600479	0					
ANR	5600588	Identifier	statinfo		5600479	1					
ANR	5600589	IfStatement	if ( ( ! ( statinfo . Stat ( m_global_path ) ) ) && ( 0 == statinfo . GetBuf ( ) -> st_size ) )		5600479	8					
ANR	5600590	Condition	( ! ( statinfo . Stat ( m_global_path ) ) ) && ( 0 == statinfo . GetBuf ( ) -> st_size )	593:7:14209:14290	5600479	0	True				
ANR	5600591	AndExpression	( ! ( statinfo . Stat ( m_global_path ) ) ) && ( 0 == statinfo . GetBuf ( ) -> st_size )		5600479	0		&&			
ANR	5600592	UnaryOperationExpression	! ( statinfo . Stat ( m_global_path ) )		5600479	0					
ANR	5600593	UnaryOperator	!		5600479	0					
ANR	5600594	CallExpression	statinfo . Stat ( m_global_path )		5600479	1					
ANR	5600595	Callee	statinfo . Stat		5600479	0					
ANR	5600596	MemberAccess	statinfo . Stat		5600479	0					
ANR	5600597	Identifier	statinfo		5600479	0					
ANR	5600598	Identifier	Stat		5600479	1					
ANR	5600599	ArgumentList	m_global_path		5600479	1					
ANR	5600600	Argument	m_global_path		5600479	0					
ANR	5600601	Identifier	m_global_path		5600479	0					
ANR	5600602	EqualityExpression	0 == statinfo . GetBuf ( ) -> st_size		5600479	1		==			
ANR	5600603	PrimaryExpression	0		5600479	0					
ANR	5600604	PtrMemberAccess	statinfo . GetBuf ( ) -> st_size		5600479	1					
ANR	5600605	CallExpression	statinfo . GetBuf ( )		5600479	0					
ANR	5600606	Callee	statinfo . GetBuf		5600479	0					
ANR	5600607	MemberAccess	statinfo . GetBuf		5600479	0					
ANR	5600608	Identifier	statinfo		5600479	0					
ANR	5600609	Identifier	GetBuf		5600479	1					
ANR	5600610	ArgumentList			5600479	1					
ANR	5600611	Identifier	st_size		5600479	1					
ANR	5600612	CompoundStatement		56:2:1240:1250	5600479	1					
ANR	5600613	IdentifierDeclStatement	WriteUserLogHeader writer ( header ) ;	597:2:14330:14365	5600479	0	True				
ANR	5600614	IdentifierDecl	writer ( header )		5600479	0					
ANR	5600615	IdentifierDeclType	WriteUserLogHeader		5600479	0					
ANR	5600616	Identifier	writer		5600479	1					
ANR	5600617	Identifier	header		5600479	2					
ANR	5600618	ExpressionStatement	m_global_sequence = writer . incSequence ( )	599:2:14370:14411	5600479	1	True				
ANR	5600619	AssignmentExpression	m_global_sequence = writer . incSequence ( )		5600479	0		=			
ANR	5600620	Identifier	m_global_sequence		5600479	0					
ANR	5600621	CallExpression	writer . incSequence ( )		5600479	1					
ANR	5600622	Callee	writer . incSequence		5600479	0					
ANR	5600623	MemberAccess	writer . incSequence		5600479	0					
ANR	5600624	Identifier	writer		5600479	0					
ANR	5600625	Identifier	incSequence		5600479	1					
ANR	5600626	ArgumentList			5600479	1					
ANR	5600627	IdentifierDeclStatement	MyString file_id ;	601:2:14416:14432	5600479	2	True				
ANR	5600628	IdentifierDecl	file_id		5600479	0					
ANR	5600629	IdentifierDeclType	MyString		5600479	0					
ANR	5600630	Identifier	file_id		5600479	1					
ANR	5600631	ExpressionStatement	GenerateGlobalId ( file_id )	602:2:14436:14463	5600479	3	True				
ANR	5600632	CallExpression	GenerateGlobalId ( file_id )		5600479	0					
ANR	5600633	Callee	GenerateGlobalId		5600479	0					
ANR	5600634	Identifier	GenerateGlobalId		5600479	0					
ANR	5600635	ArgumentList	file_id		5600479	1					
ANR	5600636	Argument	file_id		5600479	0					
ANR	5600637	Identifier	file_id		5600479	0					
ANR	5600638	ExpressionStatement	writer . setId ( file_id )	603:2:14467:14490	5600479	4	True				
ANR	5600639	CallExpression	writer . setId ( file_id )		5600479	0					
ANR	5600640	Callee	writer . setId		5600479	0					
ANR	5600641	MemberAccess	writer . setId		5600479	0					
ANR	5600642	Identifier	writer		5600479	0					
ANR	5600643	Identifier	setId		5600479	1					
ANR	5600644	ArgumentList	file_id		5600479	1					
ANR	5600645	Argument	file_id		5600479	0					
ANR	5600646	Identifier	file_id		5600479	0					
ANR	5600647	ExpressionStatement	writer . addFileOffset ( writer . getSize ( ) )	605:2:14495:14535	5600479	5	True				
ANR	5600648	CallExpression	writer . addFileOffset ( writer . getSize ( ) )		5600479	0					
ANR	5600649	Callee	writer . addFileOffset		5600479	0					
ANR	5600650	MemberAccess	writer . addFileOffset		5600479	0					
ANR	5600651	Identifier	writer		5600479	0					
ANR	5600652	Identifier	addFileOffset		5600479	1					
ANR	5600653	ArgumentList	writer . getSize ( )		5600479	1					
ANR	5600654	Argument	writer . getSize ( )		5600479	0					
ANR	5600655	CallExpression	writer . getSize ( )		5600479	0					
ANR	5600656	Callee	writer . getSize		5600479	0					
ANR	5600657	MemberAccess	writer . getSize		5600479	0					
ANR	5600658	Identifier	writer		5600479	0					
ANR	5600659	Identifier	getSize		5600479	1					
ANR	5600660	ArgumentList			5600479	1					
ANR	5600661	ExpressionStatement	writer . setSize ( 0 )	606:2:14539:14558	5600479	6	True				
ANR	5600662	CallExpression	writer . setSize ( 0 )		5600479	0					
ANR	5600663	Callee	writer . setSize		5600479	0					
ANR	5600664	MemberAccess	writer . setSize		5600479	0					
ANR	5600665	Identifier	writer		5600479	0					
ANR	5600666	Identifier	setSize		5600479	1					
ANR	5600667	ArgumentList	0		5600479	1					
ANR	5600668	Argument	0		5600479	0					
ANR	5600669	PrimaryExpression	0		5600479	0					
ANR	5600670	ExpressionStatement	writer . addEventOffset ( writer . getNumEvents ( ) )	608:2:14563:14609	5600479	7	True				
ANR	5600671	CallExpression	writer . addEventOffset ( writer . getNumEvents ( ) )		5600479	0					
ANR	5600672	Callee	writer . addEventOffset		5600479	0					
ANR	5600673	MemberAccess	writer . addEventOffset		5600479	0					
ANR	5600674	Identifier	writer		5600479	0					
ANR	5600675	Identifier	addEventOffset		5600479	1					
ANR	5600676	ArgumentList	writer . getNumEvents ( )		5600479	1					
ANR	5600677	Argument	writer . getNumEvents ( )		5600479	0					
ANR	5600678	CallExpression	writer . getNumEvents ( )		5600479	0					
ANR	5600679	Callee	writer . getNumEvents		5600479	0					
ANR	5600680	MemberAccess	writer . getNumEvents		5600479	0					
ANR	5600681	Identifier	writer		5600479	0					
ANR	5600682	Identifier	getNumEvents		5600479	1					
ANR	5600683	ArgumentList			5600479	1					
ANR	5600684	ExpressionStatement	writer . setNumEvents ( 0 )	609:2:14613:14637	5600479	8	True				
ANR	5600685	CallExpression	writer . setNumEvents ( 0 )		5600479	0					
ANR	5600686	Callee	writer . setNumEvents		5600479	0					
ANR	5600687	MemberAccess	writer . setNumEvents		5600479	0					
ANR	5600688	Identifier	writer		5600479	0					
ANR	5600689	Identifier	setNumEvents		5600479	1					
ANR	5600690	ArgumentList	0		5600479	1					
ANR	5600691	Argument	0		5600479	0					
ANR	5600692	PrimaryExpression	0		5600479	0					
ANR	5600693	ExpressionStatement	writer . setCtime ( time ( NULL ) )	610:2:14641:14670	5600479	9	True				
ANR	5600694	CallExpression	writer . setCtime ( time ( NULL ) )		5600479	0					
ANR	5600695	Callee	writer . setCtime		5600479	0					
ANR	5600696	MemberAccess	writer . setCtime		5600479	0					
ANR	5600697	Identifier	writer		5600479	0					
ANR	5600698	Identifier	setCtime		5600479	1					
ANR	5600699	ArgumentList	time ( NULL )		5600479	1					
ANR	5600700	Argument	time ( NULL )		5600479	0					
ANR	5600701	CallExpression	time ( NULL )		5600479	0					
ANR	5600702	Callee	time		5600479	0					
ANR	5600703	Identifier	time		5600479	0					
ANR	5600704	ArgumentList	NULL		5600479	1					
ANR	5600705	Argument	NULL		5600479	0					
ANR	5600706	Identifier	NULL		5600479	0					
ANR	5600707	ExpressionStatement	writer . setMaxRotation ( m_global_max_rotations )	612:2:14675:14722	5600479	10	True				
ANR	5600708	CallExpression	writer . setMaxRotation ( m_global_max_rotations )		5600479	0					
ANR	5600709	Callee	writer . setMaxRotation		5600479	0					
ANR	5600710	MemberAccess	writer . setMaxRotation		5600479	0					
ANR	5600711	Identifier	writer		5600479	0					
ANR	5600712	Identifier	setMaxRotation		5600479	1					
ANR	5600713	ArgumentList	m_global_max_rotations		5600479	1					
ANR	5600714	Argument	m_global_max_rotations		5600479	0					
ANR	5600715	Identifier	m_global_max_rotations		5600479	0					
ANR	5600716	IfStatement	if ( m_creator_name )		5600479	11					
ANR	5600717	Condition	m_creator_name	614:7:14732:14745	5600479	0	True				
ANR	5600718	Identifier	m_creator_name		5600479	0					
ANR	5600719	CompoundStatement		50:24:1151:1151	5600479	1					
ANR	5600720	ExpressionStatement	writer . setCreatorName ( m_creator_name )	615:3:14754:14793	5600479	0	True				
ANR	5600721	CallExpression	writer . setCreatorName ( m_creator_name )		5600479	0					
ANR	5600722	Callee	writer . setCreatorName		5600479	0					
ANR	5600723	MemberAccess	writer . setCreatorName		5600479	0					
ANR	5600724	Identifier	writer		5600479	0					
ANR	5600725	Identifier	setCreatorName		5600479	1					
ANR	5600726	ArgumentList	m_creator_name		5600479	1					
ANR	5600727	Argument	m_creator_name		5600479	0					
ANR	5600728	Identifier	m_creator_name		5600479	0					
ANR	5600729	ExpressionStatement	ret_val = writer . Write ( * this )	618:2:14802:14833	5600479	12	True				
ANR	5600730	AssignmentExpression	ret_val = writer . Write ( * this )		5600479	0		=			
ANR	5600731	Identifier	ret_val		5600479	0					
ANR	5600732	CallExpression	writer . Write ( * this )		5600479	1					
ANR	5600733	Callee	writer . Write		5600479	0					
ANR	5600734	MemberAccess	writer . Write		5600479	0					
ANR	5600735	Identifier	writer		5600479	0					
ANR	5600736	Identifier	Write		5600479	1					
ANR	5600737	ArgumentList	* this		5600479	1					
ANR	5600738	Argument	* this		5600479	0					
ANR	5600739	UnaryOperationExpression	* this		5600479	0					
ANR	5600740	UnaryOperator	*		5600479	0					
ANR	5600741	Identifier	this		5600479	1					
ANR	5600742	IdentifierDeclStatement	MyString s ;	620:2:14838:14848	5600479	13	True				
ANR	5600743	IdentifierDecl	s		5600479	0					
ANR	5600744	IdentifierDeclType	MyString		5600479	0					
ANR	5600745	Identifier	s		5600479	1					
ANR	5600746	ExpressionStatement	"s . sprintf ( ""openGlobalLog: header: %s"" , m_global_path )"	621:2:14852:14907	5600479	14	True				
ANR	5600747	CallExpression	"s . sprintf ( ""openGlobalLog: header: %s"" , m_global_path )"		5600479	0					
ANR	5600748	Callee	s . sprintf		5600479	0					
ANR	5600749	MemberAccess	s . sprintf		5600479	0					
ANR	5600750	Identifier	s		5600479	0					
ANR	5600751	Identifier	sprintf		5600479	1					
ANR	5600752	ArgumentList	"""openGlobalLog: header: %s"""		5600479	1					
ANR	5600753	Argument	"""openGlobalLog: header: %s"""		5600479	0					
ANR	5600754	PrimaryExpression	"""openGlobalLog: header: %s"""		5600479	0					
ANR	5600755	Argument	m_global_path		5600479	1					
ANR	5600756	Identifier	m_global_path		5600479	0					
ANR	5600757	ExpressionStatement	"writer . dprint ( D_FULLDEBUG , s )"	622:2:14911:14942	5600479	15	True				
ANR	5600758	CallExpression	"writer . dprint ( D_FULLDEBUG , s )"		5600479	0					
ANR	5600759	Callee	writer . dprint		5600479	0					
ANR	5600760	MemberAccess	writer . dprint		5600479	0					
ANR	5600761	Identifier	writer		5600479	0					
ANR	5600762	Identifier	dprint		5600479	1					
ANR	5600763	ArgumentList	D_FULLDEBUG		5600479	1					
ANR	5600764	Argument	D_FULLDEBUG		5600479	0					
ANR	5600765	Identifier	D_FULLDEBUG		5600479	0					
ANR	5600766	Argument	s		5600479	1					
ANR	5600767	Identifier	s		5600479	0					
ANR	5600768	IfStatement	if ( ! updateGlobalStat ( ) )		5600479	16					
ANR	5600769	Condition	! updateGlobalStat ( )	631:6:15259:15277	5600479	0	True				
ANR	5600770	UnaryOperationExpression	! updateGlobalStat ( )		5600479	0					
ANR	5600771	UnaryOperator	!		5600479	0					
ANR	5600772	CallExpression	updateGlobalStat ( )		5600479	1					
ANR	5600773	Callee	updateGlobalStat		5600479	0					
ANR	5600774	Identifier	updateGlobalStat		5600479	0					
ANR	5600775	ArgumentList			5600479	1					
ANR	5600776	CompoundStatement		67:28:1683:1683	5600479	1					
ANR	5600777	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog Failed to update global stat after header write\\n"" )"	632:3:15286:15377	5600479	0	True				
ANR	5600778	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog Failed to update global stat after header write\\n"" )"		5600479	0					
ANR	5600779	Callee	dprintf		5600479	0					
ANR	5600780	Identifier	dprintf		5600479	0					
ANR	5600781	ArgumentList	D_ALWAYS		5600479	1					
ANR	5600782	Argument	D_ALWAYS		5600479	0					
ANR	5600783	Identifier	D_ALWAYS		5600479	0					
ANR	5600784	Argument	"""WriteUserLog Failed to update global stat after header write\\n"""		5600479	1					
ANR	5600785	PrimaryExpression	"""WriteUserLog Failed to update global stat after header write\\n"""		5600479	0					
ANR	5600786	ElseStatement	else		5600479	0					
ANR	5600787	CompoundStatement		71:7:1792:1792	5600479	0					
ANR	5600788	ExpressionStatement	m_global_state -> Update ( * m_global_stat )	636:3:15395:15435	5600479	0	True				
ANR	5600789	CallExpression	m_global_state -> Update ( * m_global_stat )		5600479	0					
ANR	5600790	Callee	m_global_state -> Update		5600479	0					
ANR	5600791	PtrMemberAccess	m_global_state -> Update		5600479	0					
ANR	5600792	Identifier	m_global_state		5600479	0					
ANR	5600793	Identifier	Update		5600479	1					
ANR	5600794	ArgumentList	* m_global_stat		5600479	1					
ANR	5600795	Argument	* m_global_stat		5600479	0					
ANR	5600796	UnaryOperationExpression	* m_global_stat		5600479	0					
ANR	5600797	UnaryOperator	*		5600479	0					
ANR	5600798	Identifier	m_global_stat		5600479	1					
ANR	5600799	IfStatement	if ( ! m_global_lock -> release ( ) )		5600479	9					
ANR	5600800	Condition	! m_global_lock -> release ( )	641:5:15451:15475	5600479	0	True				
ANR	5600801	UnaryOperationExpression	! m_global_lock -> release ( )		5600479	0					
ANR	5600802	UnaryOperator	!		5600479	0					
ANR	5600803	CallExpression	m_global_lock -> release ( )		5600479	1					
ANR	5600804	Callee	m_global_lock -> release		5600479	0					
ANR	5600805	PtrMemberAccess	m_global_lock -> release		5600479	0					
ANR	5600806	Identifier	m_global_lock		5600479	0					
ANR	5600807	Identifier	release		5600479	1					
ANR	5600808	ArgumentList			5600479	1					
ANR	5600809	CompoundStatement		77:33:1881:1881	5600479	1					
ANR	5600810	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR WriteUserLog Failed to release global lock\\n"" )"	642:2:15483:15556	5600479	0	True				
ANR	5600811	CallExpression	"dprintf ( D_ALWAYS , ""ERROR WriteUserLog Failed to release global lock\\n"" )"		5600479	0					
ANR	5600812	Callee	dprintf		5600479	0					
ANR	5600813	Identifier	dprintf		5600479	0					
ANR	5600814	ArgumentList	D_ALWAYS		5600479	1					
ANR	5600815	Argument	D_ALWAYS		5600479	0					
ANR	5600816	Identifier	D_ALWAYS		5600479	0					
ANR	5600817	Argument	"""ERROR WriteUserLog Failed to release global lock\\n"""		5600479	1					
ANR	5600818	PrimaryExpression	"""ERROR WriteUserLog Failed to release global lock\\n"""		5600479	0					
ANR	5600819	ExpressionStatement	set_priv ( priv )	645:1:15563:15579	5600479	10	True				
ANR	5600820	CallExpression	set_priv ( priv )		5600479	0					
ANR	5600821	Callee	set_priv		5600479	0					
ANR	5600822	Identifier	set_priv		5600479	0					
ANR	5600823	ArgumentList	priv		5600479	1					
ANR	5600824	Argument	priv		5600479	0					
ANR	5600825	Identifier	priv		5600479	0					
ANR	5600826	ReturnStatement	return ret_val ;	646:1:15582:15596	5600479	11	True				
ANR	5600827	Identifier	ret_val		5600479	0					
ANR	5600828	ReturnType	bool		5600479	1					
ANR	5600829	Identifier	WriteUserLog :: openGlobalLog		5600479	2					
ANR	5600830	ParameterList	"bool reopen , const UserLogHeader & header"		5600479	3					
ANR	5600831	Parameter	bool reopen	564:29:13554:13564	5600479	0	True				
ANR	5600832	ParameterType	bool		5600479	0					
ANR	5600833	Identifier	reopen		5600479	1					
ANR	5600834	Parameter	const UserLogHeader & header	564:42:13567:13593	5600479	1	True				
ANR	5600835	ParameterType	const UserLogHeader &		5600479	0					
ANR	5600836	Identifier	header		5600479	1					
ANR	5600837	CFGEntryNode	ENTRY		5600479		True				
ANR	5600838	CFGExitNode	EXIT		5600479		True				
ANR	5600839	Symbol	set_condor_priv		5600479						
ANR	5600840	Symbol	openFile		5600479						
ANR	5600841	Symbol	m_creator_name		5600479						
ANR	5600842	Symbol	* statinfo . GetBuf		5600479						
ANR	5600843	Symbol	updateGlobalStat		5600479						
ANR	5600844	Symbol	m_global_stat		5600479						
ANR	5600845	Symbol	m_global_fp		5600479						
ANR	5600846	Symbol	WRITE_LOCK		5600479						
ANR	5600847	Symbol	statinfo		5600479						
ANR	5600848	Symbol	* statinfo		5600479						
ANR	5600849	Symbol	m_global_lock -> obtain		5600479						
ANR	5600850	Symbol	priv		5600479						
ANR	5600851	Symbol	m_global_sequence		5600479						
ANR	5600852	Symbol	m_global_lock -> release		5600479						
ANR	5600853	Symbol	m_global_disable		5600479						
ANR	5600854	Symbol	m_global_state		5600479						
ANR	5600855	Symbol	statinfo . GetBuf		5600479						
ANR	5600856	Symbol	writer . incSequence		5600479						
ANR	5600857	Symbol	writer . Write		5600479						
ANR	5600858	Symbol	NULL		5600479						
ANR	5600859	Symbol	m_global_path		5600479						
ANR	5600860	Symbol	statinfo . Stat		5600479						
ANR	5600861	Symbol	m_global_max_rotations		5600479						
ANR	5600862	Symbol	m_global_lock_enable		5600479						
ANR	5600863	Symbol	false		5600479						
ANR	5600864	Symbol	D_ALWAYS		5600479						
ANR	5600865	Symbol	this		5600479						
ANR	5600866	Symbol	statinfo . GetBuf ( ) -> st_size		5600479						
ANR	5600867	Symbol	D_FULLDEBUG		5600479						
ANR	5600868	Symbol	ret_val		5600479						
ANR	5600869	Symbol	* m_global_stat		5600479						
ANR	5600870	Symbol	* this		5600479						
ANR	5600871	Symbol	s		5600479						
ANR	5600872	Symbol	writer . getSize		5600479						
ANR	5600873	Symbol	writer . getNumEvents		5600479						
ANR	5600874	Symbol	reopen		5600479						
ANR	5600875	Symbol	file_id		5600479						
ANR	5600876	Symbol	true		5600479						
ANR	5600877	Symbol	header		5600479						
ANR	5600878	Symbol	writer		5600479						
ANR	5600879	Symbol	time		5600479						
ANR	5600880	Symbol	* m_global_lock		5600479						
ANR	5600881	Symbol	m_global_lock		5600479						
ANR	5600882	Function	WriteUserLog :: closeGlobalLog	649:0:15601:15808							
ANR	5600883	FunctionDef	WriteUserLog :: closeGlobalLog ()		5600882	0					
ANR	5600884	CompoundStatement		651:0:15643:15808	5600882	0					
ANR	5600885	IfStatement	if ( m_global_lock )		5600882	0					
ANR	5600886	Condition	m_global_lock	652:5:15650:15662	5600882	0	True				
ANR	5600887	Identifier	m_global_lock		5600882	0					
ANR	5600888	CompoundStatement		2:20:21:21	5600882	1					
ANR	5600889	Statement	delete	653:2:15669:15674	5600882	0	True				
ANR	5600890	ExpressionStatement	m_global_lock	653:9:15676:15689	5600882	1	True				
ANR	5600891	Identifier	m_global_lock		5600882	0					
ANR	5600892	ExpressionStatement	m_global_lock = NULL	654:2:15693:15713	5600882	2	True				
ANR	5600893	AssignmentExpression	m_global_lock = NULL		5600882	0		=			
ANR	5600894	Identifier	m_global_lock		5600882	0					
ANR	5600895	Identifier	NULL		5600882	1					
ANR	5600896	IfStatement	if ( m_global_fp != NULL )		5600882	1					
ANR	5600897	Condition	m_global_fp != NULL	656:5:15723:15741	5600882	0	True				
ANR	5600898	EqualityExpression	m_global_fp != NULL		5600882	0		!=			
ANR	5600899	Identifier	m_global_fp		5600882	0					
ANR	5600900	Identifier	NULL		5600882	1					
ANR	5600901	CompoundStatement		6:26:100:100	5600882	1					
ANR	5600902	ExpressionStatement	fclose ( m_global_fp )	657:2:15748:15767	5600882	0	True				
ANR	5600903	CallExpression	fclose ( m_global_fp )		5600882	0					
ANR	5600904	Callee	fclose		5600882	0					
ANR	5600905	Identifier	fclose		5600882	0					
ANR	5600906	ArgumentList	m_global_fp		5600882	1					
ANR	5600907	Argument	m_global_fp		5600882	0					
ANR	5600908	Identifier	m_global_fp		5600882	0					
ANR	5600909	ExpressionStatement	m_global_fp = NULL	658:2:15771:15789	5600882	1	True				
ANR	5600910	AssignmentExpression	m_global_fp = NULL		5600882	0		=			
ANR	5600911	Identifier	m_global_fp		5600882	0					
ANR	5600912	Identifier	NULL		5600882	1					
ANR	5600913	ReturnStatement	return true ;	660:1:15795:15806	5600882	2	True				
ANR	5600914	Identifier	true		5600882	0					
ANR	5600915	ReturnType	bool		5600882	1					
ANR	5600916	Identifier	WriteUserLog :: closeGlobalLog		5600882	2					
ANR	5600917	ParameterList			5600882	3					
ANR	5600918	CFGEntryNode	ENTRY		5600882		True				
ANR	5600919	CFGExitNode	EXIT		5600882		True				
ANR	5600920	Symbol	NULL		5600882						
ANR	5600921	Symbol	m_global_fp		5600882						
ANR	5600922	Symbol	true		5600882						
ANR	5600923	Symbol	m_global_lock		5600882						
ANR	5600924	Function	WriteUserLog :: checkGlobalLogRotation	666:0:16019:22487							
ANR	5600925	FunctionDef	WriteUserLog :: checkGlobalLogRotation ()		5600924	0					
ANR	5600926	CompoundStatement		668:0:16069:22487	5600924	0					
ANR	5600927	IfStatement	if ( ! m_global_fp )		5600924	0					
ANR	5600928	Condition	! m_global_fp	669:5:16076:16087	5600924	0	True				
ANR	5600929	UnaryOperationExpression	! m_global_fp		5600924	0					
ANR	5600930	UnaryOperator	!		5600924	0					
ANR	5600931	Identifier	m_global_fp		5600924	1					
ANR	5600932	CompoundStatement		2:19:20:20	5600924	1					
ANR	5600933	ReturnStatement	return false ;	670:2:16094:16106	5600924	0	True				
ANR	5600934	Identifier	false		5600924	0					
ANR	5600935	IfStatement	if ( m_global_disable || ( NULL == m_global_path ) )		5600924	1					
ANR	5600936	Condition	m_global_disable || ( NULL == m_global_path )	672:6:16117:16157	5600924	0	True				
ANR	5600937	OrExpression	m_global_disable || ( NULL == m_global_path )		5600924	0		||			
ANR	5600938	Identifier	m_global_disable		5600924	0					
ANR	5600939	EqualityExpression	NULL == m_global_path		5600924	1		==			
ANR	5600940	Identifier	NULL		5600924	0					
ANR	5600941	Identifier	m_global_path		5600924	1					
ANR	5600942	CompoundStatement		5:50:91:91	5600924	1					
ANR	5600943	ReturnStatement	return false ;	673:2:16165:16177	5600924	0	True				
ANR	5600944	Identifier	false		5600924	0					
ANR	5600945	IfStatement	if ( ! m_global_lock || m_global_lock -> isFakeLock ( ) || m_global_lock -> isUnlocked ( ) )		5600924	2					
ANR	5600946	Condition	! m_global_lock || m_global_lock -> isFakeLock ( ) || m_global_lock -> isUnlocked ( )	675:6:16188:16269	5600924	0	True				
ANR	5600947	OrExpression	! m_global_lock || m_global_lock -> isFakeLock ( ) || m_global_lock -> isUnlocked ( )		5600924	0		||			
ANR	5600948	UnaryOperationExpression	! m_global_lock		5600924	0					
ANR	5600949	UnaryOperator	!		5600924	0					
ANR	5600950	Identifier	m_global_lock		5600924	1					
ANR	5600951	OrExpression	m_global_lock -> isFakeLock ( ) || m_global_lock -> isUnlocked ( )		5600924	1		||			
ANR	5600952	CallExpression	m_global_lock -> isFakeLock ( )		5600924	0					
ANR	5600953	Callee	m_global_lock -> isFakeLock		5600924	0					
ANR	5600954	PtrMemberAccess	m_global_lock -> isFakeLock		5600924	0					
ANR	5600955	Identifier	m_global_lock		5600924	0					
ANR	5600956	Identifier	isFakeLock		5600924	1					
ANR	5600957	ArgumentList			5600924	1					
ANR	5600958	CallExpression	m_global_lock -> isUnlocked ( )		5600924	1					
ANR	5600959	Callee	m_global_lock -> isUnlocked		5600924	0					
ANR	5600960	PtrMemberAccess	m_global_lock -> isUnlocked		5600924	0					
ANR	5600961	Identifier	m_global_lock		5600924	0					
ANR	5600962	Identifier	isUnlocked		5600924	1					
ANR	5600963	ArgumentList			5600924	1					
ANR	5600964	CompoundStatement		10:33:203:203	5600924	1					
ANR	5600965	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog checking for event log rotation, but no lock\\n"" )"	678:2:16277:16359	5600924	0	True				
ANR	5600966	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog checking for event log rotation, but no lock\\n"" )"		5600924	0					
ANR	5600967	Callee	dprintf		5600924	0					
ANR	5600968	Identifier	dprintf		5600924	0					
ANR	5600969	ArgumentList	D_ALWAYS		5600924	1					
ANR	5600970	Argument	D_ALWAYS		5600924	0					
ANR	5600971	Identifier	D_ALWAYS		5600924	0					
ANR	5600972	Argument	"""WriteUserLog checking for event log rotation, but no lock\\n"""		5600924	1					
ANR	5600973	PrimaryExpression	"""WriteUserLog checking for event log rotation, but no lock\\n"""		5600924	0					
ANR	5600974	IfStatement	if ( 0 == m_global_max_rotations )		5600924	3					
ANR	5600975	Condition	0 == m_global_max_rotations	682:6:16420:16446	5600924	0	True				
ANR	5600976	EqualityExpression	0 == m_global_max_rotations		5600924	0		==			
ANR	5600977	PrimaryExpression	0		5600924	0					
ANR	5600978	Identifier	m_global_max_rotations		5600924	1					
ANR	5600979	CompoundStatement		15:36:380:380	5600924	1					
ANR	5600980	ReturnStatement	return false ;	683:2:16454:16466	5600924	0	True				
ANR	5600981	Identifier	false		5600924	0					
ANR	5600982	IfStatement	if ( ! updateGlobalStat ( ) )		5600924	4					
ANR	5600983	Condition	! updateGlobalStat ( )	687:6:16513:16531	5600924	0	True				
ANR	5600984	UnaryOperationExpression	! updateGlobalStat ( )		5600924	0					
ANR	5600985	UnaryOperator	!		5600924	0					
ANR	5600986	CallExpression	updateGlobalStat ( )		5600924	1					
ANR	5600987	Callee	updateGlobalStat		5600924	0					
ANR	5600988	Identifier	updateGlobalStat		5600924	0					
ANR	5600989	ArgumentList			5600924	1					
ANR	5600990	CompoundStatement		20:28:465:465	5600924	1					
ANR	5600991	ReturnStatement	return false ;	688:2:16539:16551	5600924	0	True				
ANR	5600992	Identifier	false		5600924	0					
ANR	5600993	IdentifierDeclStatement	ReadUserLogHeader header_reader ;	692:1:16622:16653	5600924	5	True				
ANR	5600994	IdentifierDecl	header_reader		5600924	0					
ANR	5600995	IdentifierDeclType	ReadUserLogHeader		5600924	0					
ANR	5600996	Identifier	header_reader		5600924	1					
ANR	5600997	IfStatement	if ( m_global_state -> isNewFile ( * m_global_stat ) )		5600924	6					
ANR	5600998	Condition	m_global_state -> isNewFile ( * m_global_stat )	695:6:16704:16744	5600924	0	True				
ANR	5600999	CallExpression	m_global_state -> isNewFile ( * m_global_stat )		5600924	0					
ANR	5601000	Callee	m_global_state -> isNewFile		5600924	0					
ANR	5601001	PtrMemberAccess	m_global_state -> isNewFile		5600924	0					
ANR	5601002	Identifier	m_global_state		5600924	0					
ANR	5601003	Identifier	isNewFile		5600924	1					
ANR	5601004	ArgumentList	* m_global_stat		5600924	1					
ANR	5601005	Argument	* m_global_stat		5600924	0					
ANR	5601006	UnaryOperationExpression	* m_global_stat		5600924	0					
ANR	5601007	UnaryOperator	*		5600924	0					
ANR	5601008	Identifier	m_global_stat		5600924	1					
ANR	5601009	CompoundStatement		28:50:678:678	5600924	1					
ANR	5601010	ExpressionStatement	globalLogRotated ( header_reader )	696:2:16752:16785	5600924	0	True				
ANR	5601011	CallExpression	globalLogRotated ( header_reader )		5600924	0					
ANR	5601012	Callee	globalLogRotated		5600924	0					
ANR	5601013	Identifier	globalLogRotated		5600924	0					
ANR	5601014	ArgumentList	header_reader		5600924	1					
ANR	5601015	Argument	header_reader		5600924	0					
ANR	5601016	Identifier	header_reader		5600924	0					
ANR	5601017	ReturnStatement	return true ;	697:2:16789:16800	5600924	1	True				
ANR	5601018	Identifier	true		5600924	0					
ANR	5601019	ExpressionStatement	m_global_state -> Update ( * m_global_stat )	699:1:16806:16846	5600924	7	True				
ANR	5601020	CallExpression	m_global_state -> Update ( * m_global_stat )		5600924	0					
ANR	5601021	Callee	m_global_state -> Update		5600924	0					
ANR	5601022	PtrMemberAccess	m_global_state -> Update		5600924	0					
ANR	5601023	Identifier	m_global_state		5600924	0					
ANR	5601024	Identifier	Update		5600924	1					
ANR	5601025	ArgumentList	* m_global_stat		5600924	1					
ANR	5601026	Argument	* m_global_stat		5600924	0					
ANR	5601027	UnaryOperationExpression	* m_global_stat		5600924	0					
ANR	5601028	UnaryOperator	*		5600924	0					
ANR	5601029	Identifier	m_global_stat		5600924	1					
ANR	5601030	IfStatement	if ( ! m_global_state -> isOverSize ( m_global_max_filesize ) )		5600924	8					
ANR	5601031	Condition	! m_global_state -> isOverSize ( m_global_max_filesize )	702:6:16901:16950	5600924	0	True				
ANR	5601032	UnaryOperationExpression	! m_global_state -> isOverSize ( m_global_max_filesize )		5600924	0					
ANR	5601033	UnaryOperator	!		5600924	0					
ANR	5601034	CallExpression	m_global_state -> isOverSize ( m_global_max_filesize )		5600924	1					
ANR	5601035	Callee	m_global_state -> isOverSize		5600924	0					
ANR	5601036	PtrMemberAccess	m_global_state -> isOverSize		5600924	0					
ANR	5601037	Identifier	m_global_state		5600924	0					
ANR	5601038	Identifier	isOverSize		5600924	1					
ANR	5601039	ArgumentList	m_global_max_filesize		5600924	1					
ANR	5601040	Argument	m_global_max_filesize		5600924	0					
ANR	5601041	Identifier	m_global_max_filesize		5600924	0					
ANR	5601042	CompoundStatement		35:59:884:884	5600924	1					
ANR	5601043	ReturnStatement	return false ;	703:2:16958:16970	5600924	0	True				
ANR	5601044	Identifier	false		5600924	0					
ANR	5601045	IfStatement	if ( ! m_rotation_lock -> obtain ( WRITE_LOCK ) )		5600924	9					
ANR	5601046	Condition	! m_rotation_lock -> obtain ( WRITE_LOCK )	710:6:17105:17142	5600924	0	True				
ANR	5601047	UnaryOperationExpression	! m_rotation_lock -> obtain ( WRITE_LOCK )		5600924	0					
ANR	5601048	UnaryOperator	!		5600924	0					
ANR	5601049	CallExpression	m_rotation_lock -> obtain ( WRITE_LOCK )		5600924	1					
ANR	5601050	Callee	m_rotation_lock -> obtain		5600924	0					
ANR	5601051	PtrMemberAccess	m_rotation_lock -> obtain		5600924	0					
ANR	5601052	Identifier	m_rotation_lock		5600924	0					
ANR	5601053	Identifier	obtain		5600924	1					
ANR	5601054	ArgumentList	WRITE_LOCK		5600924	1					
ANR	5601055	Argument	WRITE_LOCK		5600924	0					
ANR	5601056	Identifier	WRITE_LOCK		5600924	0					
ANR	5601057	CompoundStatement		43:47:1076:1076	5600924	1					
ANR	5601058	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR WriteUserLog Failed to get rotation lock\\n"" )"	711:2:17150:17221	5600924	0	True				
ANR	5601059	CallExpression	"dprintf ( D_ALWAYS , ""ERROR WriteUserLog Failed to get rotation lock\\n"" )"		5600924	0					
ANR	5601060	Callee	dprintf		5600924	0					
ANR	5601061	Identifier	dprintf		5600924	0					
ANR	5601062	ArgumentList	D_ALWAYS		5600924	1					
ANR	5601063	Argument	D_ALWAYS		5600924	0					
ANR	5601064	Identifier	D_ALWAYS		5600924	0					
ANR	5601065	Argument	"""ERROR WriteUserLog Failed to get rotation lock\\n"""		5600924	1					
ANR	5601066	PrimaryExpression	"""ERROR WriteUserLog Failed to get rotation lock\\n"""		5600924	0					
ANR	5601067	ReturnStatement	return false ;	712:2:17225:17237	5600924	1	True				
ANR	5601068	Identifier	false		5600924	0					
ANR	5601069	IdentifierDeclStatement	UtcTime stat_time ( true ) ;	717:1:17298:17323	5600924	10	True				
ANR	5601070	IdentifierDecl	stat_time ( true )		5600924	0					
ANR	5601071	IdentifierDeclType	UtcTime		5600924	0					
ANR	5601072	Identifier	stat_time		5600924	1					
ANR	5601073	Identifier	true		5600924	2					
ANR	5601074	IfStatement	if ( ! updateGlobalStat ( ) )		5600924	11					
ANR	5601075	Condition	! updateGlobalStat ( )	719:6:17338:17356	5600924	0	True				
ANR	5601076	UnaryOperationExpression	! updateGlobalStat ( )		5600924	0					
ANR	5601077	UnaryOperator	!		5600924	0					
ANR	5601078	CallExpression	updateGlobalStat ( )		5600924	1					
ANR	5601079	Callee	updateGlobalStat		5600924	0					
ANR	5601080	Identifier	updateGlobalStat		5600924	0					
ANR	5601081	ArgumentList			5600924	1					
ANR	5601082	CompoundStatement		52:28:1290:1290	5600924	1					
ANR	5601083	ReturnStatement	return false ;	720:2:17364:17376	5600924	0	True				
ANR	5601084	Identifier	false		5600924	0					
ANR	5601085	IfStatement	if ( m_global_state -> isNewFile ( * m_global_stat ) )		5600924	12					
ANR	5601086	Condition	m_global_state -> isNewFile ( * m_global_stat )	724:6:17462:17502	5600924	0	True				
ANR	5601087	CallExpression	m_global_state -> isNewFile ( * m_global_stat )		5600924	0					
ANR	5601088	Callee	m_global_state -> isNewFile		5600924	0					
ANR	5601089	PtrMemberAccess	m_global_state -> isNewFile		5600924	0					
ANR	5601090	Identifier	m_global_state		5600924	0					
ANR	5601091	Identifier	isNewFile		5600924	1					
ANR	5601092	ArgumentList	* m_global_stat		5600924	1					
ANR	5601093	Argument	* m_global_stat		5600924	0					
ANR	5601094	UnaryOperationExpression	* m_global_stat		5600924	0					
ANR	5601095	UnaryOperator	*		5600924	0					
ANR	5601096	Identifier	m_global_stat		5600924	1					
ANR	5601097	CompoundStatement		57:50:1436:1436	5600924	1					
ANR	5601098	ExpressionStatement	m_rotation_lock -> release ( )	725:2:17510:17537	5600924	0	True				
ANR	5601099	CallExpression	m_rotation_lock -> release ( )		5600924	0					
ANR	5601100	Callee	m_rotation_lock -> release		5600924	0					
ANR	5601101	PtrMemberAccess	m_rotation_lock -> release		5600924	0					
ANR	5601102	Identifier	m_rotation_lock		5600924	0					
ANR	5601103	Identifier	release		5600924	1					
ANR	5601104	ArgumentList			5600924	1					
ANR	5601105	ExpressionStatement	globalLogRotated ( header_reader )	726:2:17541:17574	5600924	1	True				
ANR	5601106	CallExpression	globalLogRotated ( header_reader )		5600924	0					
ANR	5601107	Callee	globalLogRotated		5600924	0					
ANR	5601108	Identifier	globalLogRotated		5600924	0					
ANR	5601109	ArgumentList	header_reader		5600924	1					
ANR	5601110	Argument	header_reader		5600924	0					
ANR	5601111	Identifier	header_reader		5600924	0					
ANR	5601112	ReturnStatement	return true ;	727:2:17578:17589	5600924	2	True				
ANR	5601113	Identifier	true		5600924	0					
ANR	5601114	ExpressionStatement	m_global_state -> Update ( * m_global_stat )	729:1:17595:17635	5600924	13	True				
ANR	5601115	CallExpression	m_global_state -> Update ( * m_global_stat )		5600924	0					
ANR	5601116	Callee	m_global_state -> Update		5600924	0					
ANR	5601117	PtrMemberAccess	m_global_state -> Update		5600924	0					
ANR	5601118	Identifier	m_global_state		5600924	0					
ANR	5601119	Identifier	Update		5600924	1					
ANR	5601120	ArgumentList	* m_global_stat		5600924	1					
ANR	5601121	Argument	* m_global_stat		5600924	0					
ANR	5601122	UnaryOperationExpression	* m_global_stat		5600924	0					
ANR	5601123	UnaryOperator	*		5600924	0					
ANR	5601124	Identifier	m_global_stat		5600924	1					
ANR	5601125	IfStatement	if ( ! m_global_state -> isOverSize ( m_global_max_filesize ) )		5600924	14					
ANR	5601126	Condition	! m_global_state -> isOverSize ( m_global_max_filesize )	733:6:17753:17802	5600924	0	True				
ANR	5601127	UnaryOperationExpression	! m_global_state -> isOverSize ( m_global_max_filesize )		5600924	0					
ANR	5601128	UnaryOperator	!		5600924	0					
ANR	5601129	CallExpression	m_global_state -> isOverSize ( m_global_max_filesize )		5600924	1					
ANR	5601130	Callee	m_global_state -> isOverSize		5600924	0					
ANR	5601131	PtrMemberAccess	m_global_state -> isOverSize		5600924	0					
ANR	5601132	Identifier	m_global_state		5600924	0					
ANR	5601133	Identifier	isOverSize		5600924	1					
ANR	5601134	ArgumentList	m_global_max_filesize		5600924	1					
ANR	5601135	Argument	m_global_max_filesize		5600924	0					
ANR	5601136	Identifier	m_global_max_filesize		5600924	0					
ANR	5601137	CompoundStatement		66:59:1736:1736	5600924	1					
ANR	5601138	ExpressionStatement	m_rotation_lock -> release ( )	734:2:17810:17837	5600924	0	True				
ANR	5601139	CallExpression	m_rotation_lock -> release ( )		5600924	0					
ANR	5601140	Callee	m_rotation_lock -> release		5600924	0					
ANR	5601141	PtrMemberAccess	m_rotation_lock -> release		5600924	0					
ANR	5601142	Identifier	m_rotation_lock		5600924	0					
ANR	5601143	Identifier	release		5600924	1					
ANR	5601144	ArgumentList			5600924	1					
ANR	5601145	ReturnStatement	return false ;	735:2:17841:17853	5600924	1	True				
ANR	5601146	Identifier	false		5600924	0					
ANR	5601147	IdentifierDeclStatement	filesize_t current_filesize = 0 ;	741:1:17979:18010	5600924	15	True				
ANR	5601148	IdentifierDecl	current_filesize = 0		5600924	0					
ANR	5601149	IdentifierDeclType	filesize_t		5600924	0					
ANR	5601150	Identifier	current_filesize		5600924	1					
ANR	5601151	AssignmentExpression	current_filesize = 0		5600924	2		=			
ANR	5601152	Identifier	current_filesize		5600924	0					
ANR	5601153	PrimaryExpression	0		5600924	1					
ANR	5601154	IdentifierDeclStatement	StatWrapper sbuf ;	742:1:18013:18029	5600924	16	True				
ANR	5601155	IdentifierDecl	sbuf		5600924	0					
ANR	5601156	IdentifierDeclType	StatWrapper		5600924	0					
ANR	5601157	Identifier	sbuf		5600924	1					
ANR	5601158	IfStatement	if ( sbuf . Stat ( fileno ( m_global_fp ) ) )		5600924	17					
ANR	5601159	Condition	sbuf . Stat ( fileno ( m_global_fp ) )	743:6:18037:18068	5600924	0	True				
ANR	5601160	CallExpression	sbuf . Stat ( fileno ( m_global_fp ) )		5600924	0					
ANR	5601161	Callee	sbuf . Stat		5600924	0					
ANR	5601162	MemberAccess	sbuf . Stat		5600924	0					
ANR	5601163	Identifier	sbuf		5600924	0					
ANR	5601164	Identifier	Stat		5600924	1					
ANR	5601165	ArgumentList	fileno ( m_global_fp )		5600924	1					
ANR	5601166	Argument	fileno ( m_global_fp )		5600924	0					
ANR	5601167	CallExpression	fileno ( m_global_fp )		5600924	0					
ANR	5601168	Callee	fileno		5600924	0					
ANR	5601169	Identifier	fileno		5600924	0					
ANR	5601170	ArgumentList	m_global_fp		5600924	1					
ANR	5601171	Argument	m_global_fp		5600924	0					
ANR	5601172	Identifier	m_global_fp		5600924	0					
ANR	5601173	CompoundStatement		76:41:2002:2002	5600924	1					
ANR	5601174	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog Failed to stat file handle\\n"" )"	744:2:18076:18140	5600924	0	True				
ANR	5601175	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog Failed to stat file handle\\n"" )"		5600924	0					
ANR	5601176	Callee	dprintf		5600924	0					
ANR	5601177	Identifier	dprintf		5600924	0					
ANR	5601178	ArgumentList	D_ALWAYS		5600924	1					
ANR	5601179	Argument	D_ALWAYS		5600924	0					
ANR	5601180	Identifier	D_ALWAYS		5600924	0					
ANR	5601181	Argument	"""WriteUserLog Failed to stat file handle\\n"""		5600924	1					
ANR	5601182	PrimaryExpression	"""WriteUserLog Failed to stat file handle\\n"""		5600924	0					
ANR	5601183	ElseStatement	else		5600924	0					
ANR	5601184	CompoundStatement		79:6:2081:2081	5600924	0					
ANR	5601185	ExpressionStatement	current_filesize = sbuf . GetBuf ( ) -> st_size	747:2:18155:18196	5600924	0	True				
ANR	5601186	AssignmentExpression	current_filesize = sbuf . GetBuf ( ) -> st_size		5600924	0		=			
ANR	5601187	Identifier	current_filesize		5600924	0					
ANR	5601188	PtrMemberAccess	sbuf . GetBuf ( ) -> st_size		5600924	1					
ANR	5601189	CallExpression	sbuf . GetBuf ( )		5600924	0					
ANR	5601190	Callee	sbuf . GetBuf		5600924	0					
ANR	5601191	MemberAccess	sbuf . GetBuf		5600924	0					
ANR	5601192	Identifier	sbuf		5600924	0					
ANR	5601193	Identifier	GetBuf		5600924	1					
ANR	5601194	ArgumentList			5600924	1					
ANR	5601195	Identifier	st_size		5600924	1					
ANR	5601196	IfStatement	if ( ! globalRotationStarting ( ( unsigned long ) current_filesize ) )		5600924	18					
ANR	5601197	Condition	! globalRotationStarting ( ( unsigned long ) current_filesize )	752:6:18256:18314	5600924	0	True				
ANR	5601198	UnaryOperationExpression	! globalRotationStarting ( ( unsigned long ) current_filesize )		5600924	0					
ANR	5601199	UnaryOperator	!		5600924	0					
ANR	5601200	CallExpression	globalRotationStarting ( ( unsigned long ) current_filesize )		5600924	1					
ANR	5601201	Callee	globalRotationStarting		5600924	0					
ANR	5601202	Identifier	globalRotationStarting		5600924	0					
ANR	5601203	ArgumentList	( unsigned long ) current_filesize		5600924	1					
ANR	5601204	Argument	( unsigned long ) current_filesize		5600924	0					
ANR	5601205	CastExpression	( unsigned long ) current_filesize		5600924	0					
ANR	5601206	CastTarget	unsigned long		5600924	0					
ANR	5601207	Identifier	current_filesize		5600924	1					
ANR	5601208	CompoundStatement		85:68:2248:2248	5600924	1					
ANR	5601209	ExpressionStatement	m_rotation_lock -> release ( )	753:2:18322:18349	5600924	0	True				
ANR	5601210	CallExpression	m_rotation_lock -> release ( )		5600924	0					
ANR	5601211	Callee	m_rotation_lock -> release		5600924	0					
ANR	5601212	PtrMemberAccess	m_rotation_lock -> release		5600924	0					
ANR	5601213	Identifier	m_rotation_lock		5600924	0					
ANR	5601214	Identifier	release		5600924	1					
ANR	5601215	ArgumentList			5600924	1					
ANR	5601216	ReturnStatement	return false ;	754:2:18353:18365	5600924	1	True				
ANR	5601217	Identifier	false		5600924	0					
ANR	5601218	CompoundStatement		93:2:2363:2389	5600924	19					
ANR	5601219	IdentifierDeclStatement	StatWrapper swrap ( m_global_path ) ;	759:2:18395:18429	5600924	0	True				
ANR	5601220	IdentifierDecl	swrap ( m_global_path )		5600924	0					
ANR	5601221	IdentifierDeclType	StatWrapper		5600924	0					
ANR	5601222	Identifier	swrap		5600924	1					
ANR	5601223	Identifier	m_global_path		5600924	2					
ANR	5601224	IdentifierDeclStatement	UtcTime start_time ( true ) ;	760:2:18433:18459	5600924	1	True				
ANR	5601225	IdentifierDecl	start_time ( true )		5600924	0					
ANR	5601226	IdentifierDeclType	UtcTime		5600924	0					
ANR	5601227	Identifier	start_time		5600924	1					
ANR	5601228	Identifier	true		5600924	2					
ANR	5601229	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Rotating inode #%ld @ %.6f (stat @ %.6f)\\n"" , ( long ) swrap . GetBuf ( ) -> st_ino , start_time . combined ( ) , stat_time . combined ( ) )"	761:2:18463:18616	5600924	2	True				
ANR	5601230	CallExpression	"dprintf ( D_FULLDEBUG , ""Rotating inode #%ld @ %.6f (stat @ %.6f)\\n"" , ( long ) swrap . GetBuf ( ) -> st_ino , start_time . combined ( ) , stat_time . combined ( ) )"		5600924	0					
ANR	5601231	Callee	dprintf		5600924	0					
ANR	5601232	Identifier	dprintf		5600924	0					
ANR	5601233	ArgumentList	D_FULLDEBUG		5600924	1					
ANR	5601234	Argument	D_FULLDEBUG		5600924	0					
ANR	5601235	Identifier	D_FULLDEBUG		5600924	0					
ANR	5601236	Argument	"""Rotating inode #%ld @ %.6f (stat @ %.6f)\\n"""		5600924	1					
ANR	5601237	PrimaryExpression	"""Rotating inode #%ld @ %.6f (stat @ %.6f)\\n"""		5600924	0					
ANR	5601238	Argument	( long ) swrap . GetBuf ( ) -> st_ino		5600924	2					
ANR	5601239	CastExpression	( long ) swrap . GetBuf ( ) -> st_ino		5600924	0					
ANR	5601240	CastTarget	long		5600924	0					
ANR	5601241	PtrMemberAccess	swrap . GetBuf ( ) -> st_ino		5600924	1					
ANR	5601242	CallExpression	swrap . GetBuf ( )		5600924	0					
ANR	5601243	Callee	swrap . GetBuf		5600924	0					
ANR	5601244	MemberAccess	swrap . GetBuf		5600924	0					
ANR	5601245	Identifier	swrap		5600924	0					
ANR	5601246	Identifier	GetBuf		5600924	1					
ANR	5601247	ArgumentList			5600924	1					
ANR	5601248	Identifier	st_ino		5600924	1					
ANR	5601249	Argument	start_time . combined ( )		5600924	3					
ANR	5601250	CallExpression	start_time . combined ( )		5600924	0					
ANR	5601251	Callee	start_time . combined		5600924	0					
ANR	5601252	MemberAccess	start_time . combined		5600924	0					
ANR	5601253	Identifier	start_time		5600924	0					
ANR	5601254	Identifier	combined		5600924	1					
ANR	5601255	ArgumentList			5600924	1					
ANR	5601256	Argument	stat_time . combined ( )		5600924	4					
ANR	5601257	CallExpression	stat_time . combined ( )		5600924	0					
ANR	5601258	Callee	stat_time . combined		5600924	0					
ANR	5601259	MemberAccess	stat_time . combined		5600924	0					
ANR	5601260	Identifier	stat_time		5600924	0					
ANR	5601261	Identifier	combined		5600924	1					
ANR	5601262	ArgumentList			5600924	1					
ANR	5601263	ExpressionStatement	m_global_lock -> display ( )	764:2:18620:18644	5600924	3	True				
ANR	5601264	CallExpression	m_global_lock -> display ( )		5600924	0					
ANR	5601265	Callee	m_global_lock -> display		5600924	0					
ANR	5601266	PtrMemberAccess	m_global_lock -> display		5600924	0					
ANR	5601267	Identifier	m_global_lock		5600924	0					
ANR	5601268	Identifier	display		5600924	1					
ANR	5601269	ArgumentList			5600924	1					
ANR	5601270	IdentifierDeclStatement	"FILE * fp = safe_fopen_wrapper_follow ( m_global_path , ""r"" ) ;"	769:1:18714:18772	5600924	20	True				
ANR	5601271	IdentifierDecl	"* fp = safe_fopen_wrapper_follow ( m_global_path , ""r"" )"		5600924	0					
ANR	5601272	IdentifierDeclType	FILE *		5600924	0					
ANR	5601273	Identifier	fp		5600924	1					
ANR	5601274	AssignmentExpression	"* fp = safe_fopen_wrapper_follow ( m_global_path , ""r"" )"		5600924	2		=			
ANR	5601275	Identifier	fp		5600924	0					
ANR	5601276	CallExpression	"safe_fopen_wrapper_follow ( m_global_path , ""r"" )"		5600924	1					
ANR	5601277	Callee	safe_fopen_wrapper_follow		5600924	0					
ANR	5601278	Identifier	safe_fopen_wrapper_follow		5600924	0					
ANR	5601279	ArgumentList	m_global_path		5600924	1					
ANR	5601280	Argument	m_global_path		5600924	0					
ANR	5601281	Identifier	m_global_path		5600924	0					
ANR	5601282	Argument	"""r"""		5600924	1					
ANR	5601283	PrimaryExpression	"""r"""		5600924	0					
ANR	5601284	IfStatement	if ( ! fp )		5600924	21					
ANR	5601285	Condition	! fp	770:6:18780:18782	5600924	0	True				
ANR	5601286	UnaryOperationExpression	! fp		5600924	0					
ANR	5601287	UnaryOperator	!		5600924	0					
ANR	5601288	Identifier	fp		5600924	1					
ANR	5601289	CompoundStatement		103:12:2716:2716	5600924	1					
ANR	5601290	Statement	dprintf	771:2:18790:18796	5600924	0	True				
ANR	5601291	Statement	(	771:9:18797:18797	5600924	1	True				
ANR	5601292	Statement	D_ALWAYS	771:11:18799:18806	5600924	2	True				
ANR	5601293	Statement	","	771:19:18807:18807	5600924	3	True				
ANR	5601294	Statement	"""WriteUserLog: """	772:5:18814:18829	5600924	4	True				
ANR	5601295	Statement	"""safe_fopen_wrapper_follow(\\""%s\\"") failed - errno %d (%s)\\n"""	773:5:18836:18895	5600924	5	True				
ANR	5601296	Statement	","	773:65:18896:18896	5600924	6	True				
ANR	5601297	Statement	m_global_path	774:5:18903:18915	5600924	7	True				
ANR	5601298	Statement	","	774:18:18916:18916	5600924	8	True				
ANR	5601299	Statement	errno	774:20:18918:18922	5600924	9	True				
ANR	5601300	Statement	","	774:25:18923:18923	5600924	10	True				
ANR	5601301	Statement	strerror	774:27:18925:18932	5600924	11	True				
ANR	5601302	Statement	(	774:35:18933:18933	5600924	12	True				
ANR	5601303	Statement	errno	774:36:18934:18938	5600924	13	True				
ANR	5601304	Statement	)	774:41:18939:18939	5600924	14	True				
ANR	5601305	Statement	)	774:43:18941:18941	5600924	15	True				
ANR	5601306	ExpressionStatement		774:44:18942:18942	5600924	16	True				
ANR	5601307	ElseStatement	else		5600924	0					
ANR	5601308	CompoundStatement		110:2:2887:2940	5600924	0					
ANR	5601309	IdentifierDeclStatement	"ReadUserLog log_reader ( fp , m_global_use_xml , false ) ;"	777:2:18957:19010	5600924	0	True				
ANR	5601310	IdentifierDecl	"log_reader ( fp , m_global_use_xml , false )"		5600924	0					
ANR	5601311	IdentifierDeclType	ReadUserLog		5600924	0					
ANR	5601312	Identifier	log_reader		5600924	1					
ANR	5601313	Expression	"fp , m_global_use_xml , false"		5600924	2					
ANR	5601314	Identifier	fp		5600924	0					
ANR	5601315	Expression	"m_global_use_xml , false"		5600924	1					
ANR	5601316	Identifier	m_global_use_xml		5600924	0					
ANR	5601317	Identifier	false		5600924	1					
ANR	5601318	IfStatement	if ( header_reader . Read ( log_reader ) != ULOG_OK )		5600924	1					
ANR	5601319	Condition	header_reader . Read ( log_reader ) != ULOG_OK	778:7:19019:19061	5600924	0	True				
ANR	5601320	EqualityExpression	header_reader . Read ( log_reader ) != ULOG_OK		5600924	0		!=			
ANR	5601321	CallExpression	header_reader . Read ( log_reader )		5600924	0					
ANR	5601322	Callee	header_reader . Read		5600924	0					
ANR	5601323	MemberAccess	header_reader . Read		5600924	0					
ANR	5601324	Identifier	header_reader		5600924	0					
ANR	5601325	Identifier	Read		5600924	1					
ANR	5601326	ArgumentList	log_reader		5600924	1					
ANR	5601327	Argument	log_reader		5600924	0					
ANR	5601328	Identifier	log_reader		5600924	0					
ANR	5601329	Identifier	ULOG_OK		5600924	1					
ANR	5601330	CompoundStatement		111:53:2995:2995	5600924	1					
ANR	5601331	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog: Error reading header of \\""%s\\""\\n"" , m_global_path )"	779:3:19070:19166	5600924	0	True				
ANR	5601332	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog: Error reading header of \\""%s\\""\\n"" , m_global_path )"		5600924	0					
ANR	5601333	Callee	dprintf		5600924	0					
ANR	5601334	Identifier	dprintf		5600924	0					
ANR	5601335	ArgumentList	D_ALWAYS		5600924	1					
ANR	5601336	Argument	D_ALWAYS		5600924	0					
ANR	5601337	Identifier	D_ALWAYS		5600924	0					
ANR	5601338	Argument	"""WriteUserLog: Error reading header of \\""%s\\""\\n"""		5600924	1					
ANR	5601339	PrimaryExpression	"""WriteUserLog: Error reading header of \\""%s\\""\\n"""		5600924	0					
ANR	5601340	Argument	m_global_path		5600924	2					
ANR	5601341	Identifier	m_global_path		5600924	0					
ANR	5601342	ElseStatement	else		5600924	0					
ANR	5601343	CompoundStatement		117:3:3114:3124	5600924	0					
ANR	5601344	IdentifierDeclStatement	MyString s ;	784:3:19184:19194	5600924	0	True				
ANR	5601345	IdentifierDecl	s		5600924	0					
ANR	5601346	IdentifierDeclType	MyString		5600924	0					
ANR	5601347	Identifier	s		5600924	1					
ANR	5601348	ExpressionStatement	"s . sprintf ( ""read %s header:"" , m_global_path )"	785:3:19199:19244	5600924	1	True				
ANR	5601349	CallExpression	"s . sprintf ( ""read %s header:"" , m_global_path )"		5600924	0					
ANR	5601350	Callee	s . sprintf		5600924	0					
ANR	5601351	MemberAccess	s . sprintf		5600924	0					
ANR	5601352	Identifier	s		5600924	0					
ANR	5601353	Identifier	sprintf		5600924	1					
ANR	5601354	ArgumentList	"""read %s header:"""		5600924	1					
ANR	5601355	Argument	"""read %s header:"""		5600924	0					
ANR	5601356	PrimaryExpression	"""read %s header:"""		5600924	0					
ANR	5601357	Argument	m_global_path		5600924	1					
ANR	5601358	Identifier	m_global_path		5600924	0					
ANR	5601359	ExpressionStatement	"header_reader . dprint ( D_FULLDEBUG , s )"	786:3:19249:19287	5600924	2	True				
ANR	5601360	CallExpression	"header_reader . dprint ( D_FULLDEBUG , s )"		5600924	0					
ANR	5601361	Callee	header_reader . dprint		5600924	0					
ANR	5601362	MemberAccess	header_reader . dprint		5600924	0					
ANR	5601363	Identifier	header_reader		5600924	0					
ANR	5601364	Identifier	dprint		5600924	1					
ANR	5601365	ArgumentList	D_FULLDEBUG		5600924	1					
ANR	5601366	Argument	D_FULLDEBUG		5600924	0					
ANR	5601367	Identifier	D_FULLDEBUG		5600924	0					
ANR	5601368	Argument	s		5600924	1					
ANR	5601369	Identifier	s		5600924	0					
ANR	5601370	IfStatement	if ( m_global_count_events )		5600924	2					
ANR	5601371	Condition	m_global_count_events	789:7:19301:19321	5600924	0	True				
ANR	5601372	Identifier	m_global_count_events		5600924	0					
ANR	5601373	CompoundStatement		144:13:3787:3913	5600924	1					
ANR	5601374	IdentifierDeclStatement	int events = 0 ;	790:3:19330:19345	5600924	0	True				
ANR	5601375	IdentifierDecl	events = 0		5600924	0					
ANR	5601376	IdentifierDeclType	int		5600924	0					
ANR	5601377	Identifier	events		5600924	1					
ANR	5601378	AssignmentExpression	events = 0		5600924	2		=			
ANR	5601379	Identifier	events		5600924	0					
ANR	5601380	PrimaryExpression	0		5600924	1					
ANR	5601381	Statement	if	791:10:19357:19358	5600924	1	True				
ANR	5601382	IdentifierDeclStatement	ROTATION_TRACE UtcTime time1 ( true ) ;	791:13:19360:19399	5600924	2	True				
ANR	5601383	IdentifierDecl	time1 ( true )		5600924	0					
ANR	5601384	IdentifierDeclType	ROTATION_TRACE UtcTime		5600924	0					
ANR	5601385	Identifier	time1		5600924	1					
ANR	5601386	Identifier	true		5600924	2					
ANR	5601387	Statement	endif	793:10:19411:19415	5600924	3	True				
ANR	5601388	WhileStatement	while ( 1 )		5600924	4					
ANR	5601389	Condition	1	794:10:19427:19427	5600924	0	True				
ANR	5601390	PrimaryExpression	1		5600924	0					
ANR	5601391	CompoundStatement		129:4:3397:3453	5600924	1					
ANR	5601392	IdentifierDeclStatement	ULogEvent * event = NULL ;	795:4:19437:19461	5600924	0	True				
ANR	5601393	IdentifierDecl	* event = NULL		5600924	0					
ANR	5601394	IdentifierDeclType	ULogEvent *		5600924	0					
ANR	5601395	Identifier	event		5600924	1					
ANR	5601396	AssignmentExpression	* event = NULL		5600924	2		=			
ANR	5601397	Identifier	NULL		5600924	0					
ANR	5601398	Identifier	NULL		5600924	1					
ANR	5601399	IdentifierDeclStatement	ULogEventOutcome outcome = log_reader . readEvent ( event ) ;	796:4:19467:19523	5600924	1	True				
ANR	5601400	IdentifierDecl	outcome = log_reader . readEvent ( event )		5600924	0					
ANR	5601401	IdentifierDeclType	ULogEventOutcome		5600924	0					
ANR	5601402	Identifier	outcome		5600924	1					
ANR	5601403	AssignmentExpression	outcome = log_reader . readEvent ( event )		5600924	2		=			
ANR	5601404	Identifier	outcome		5600924	0					
ANR	5601405	CallExpression	log_reader . readEvent ( event )		5600924	1					
ANR	5601406	Callee	log_reader . readEvent		5600924	0					
ANR	5601407	MemberAccess	log_reader . readEvent		5600924	0					
ANR	5601408	Identifier	log_reader		5600924	0					
ANR	5601409	Identifier	readEvent		5600924	1					
ANR	5601410	ArgumentList	event		5600924	1					
ANR	5601411	Argument	event		5600924	0					
ANR	5601412	Identifier	event		5600924	0					
ANR	5601413	IfStatement	if ( ULOG_OK != outcome )		5600924	2					
ANR	5601414	Condition	ULOG_OK != outcome	797:9:19534:19551	5600924	0	True				
ANR	5601415	EqualityExpression	ULOG_OK != outcome		5600924	0		!=			
ANR	5601416	Identifier	ULOG_OK		5600924	0					
ANR	5601417	Identifier	outcome		5600924	1					
ANR	5601418	CompoundStatement		130:30:3485:3485	5600924	1					
ANR	5601419	BreakStatement	break ;	798:5:19562:19567	5600924	0	True				
ANR	5601420	ExpressionStatement	events ++	800:4:19579:19587	5600924	3	True				
ANR	5601421	PostIncDecOperationExpression	events ++		5600924	0					
ANR	5601422	Identifier	events		5600924	0					
ANR	5601423	IncDec	++		5600924	1					
ANR	5601424	Statement	delete	801:4:19593:19598	5600924	4	True				
ANR	5601425	ExpressionStatement	event	801:11:19600:19605	5600924	5	True				
ANR	5601426	Identifier	event		5600924	0					
ANR	5601427	Statement	if	803:10:19622:19623	5600924	5	True				
ANR	5601428	IdentifierDeclStatement	ROTATION_TRACE UtcTime time2 ( true ) ;	803:13:19625:19664	5600924	6	True				
ANR	5601429	IdentifierDecl	time2 ( true )		5600924	0					
ANR	5601430	IdentifierDeclType	ROTATION_TRACE UtcTime		5600924	0					
ANR	5601431	Identifier	time2		5600924	1					
ANR	5601432	Identifier	true		5600924	2					
ANR	5601433	IdentifierDeclStatement	double elapsed = time2 . difference ( time1 ) ;	805:3:19669:19711	5600924	7	True				
ANR	5601434	IdentifierDecl	elapsed = time2 . difference ( time1 )		5600924	0					
ANR	5601435	IdentifierDeclType	double		5600924	0					
ANR	5601436	Identifier	elapsed		5600924	1					
ANR	5601437	AssignmentExpression	elapsed = time2 . difference ( time1 )		5600924	2		=			
ANR	5601438	Identifier	elapsed		5600924	0					
ANR	5601439	CallExpression	time2 . difference ( time1 )		5600924	1					
ANR	5601440	Callee	time2 . difference		5600924	0					
ANR	5601441	MemberAccess	time2 . difference		5600924	0					
ANR	5601442	Identifier	time2		5600924	0					
ANR	5601443	Identifier	difference		5600924	1					
ANR	5601444	ArgumentList	time1		5600924	1					
ANR	5601445	Argument	time1		5600924	0					
ANR	5601446	Identifier	time1		5600924	0					
ANR	5601447	IdentifierDeclStatement	double eps = ( events / elapsed ) ;	806:3:19716:19749	5600924	8	True				
ANR	5601448	IdentifierDecl	eps = ( events / elapsed )		5600924	0					
ANR	5601449	IdentifierDeclType	double		5600924	0					
ANR	5601450	Identifier	eps		5600924	1					
ANR	5601451	AssignmentExpression	eps = ( events / elapsed )		5600924	2		=			
ANR	5601452	Identifier	eps		5600924	0					
ANR	5601453	MultiplicativeExpression	events / elapsed		5600924	1		/			
ANR	5601454	Identifier	events		5600924	0					
ANR	5601455	Identifier	elapsed		5600924	1					
ANR	5601456	IdentifierDeclStatement	endif globalRotationEvents ( events ) ;	807:10:19761:19801	5600924	9	True				
ANR	5601457	IdentifierDecl	globalRotationEvents ( events )		5600924	0					
ANR	5601458	IdentifierDeclType	endif		5600924	0					
ANR	5601459	Identifier	globalRotationEvents		5600924	1					
ANR	5601460	Identifier	events		5600924	2					
ANR	5601461	ExpressionStatement	header_reader . setNumEvents ( events )	810:3:19806:19842	5600924	10	True				
ANR	5601462	CallExpression	header_reader . setNumEvents ( events )		5600924	0					
ANR	5601463	Callee	header_reader . setNumEvents		5600924	0					
ANR	5601464	MemberAccess	header_reader . setNumEvents		5600924	0					
ANR	5601465	Identifier	header_reader		5600924	0					
ANR	5601466	Identifier	setNumEvents		5600924	1					
ANR	5601467	ArgumentList	events		5600924	1					
ANR	5601468	Argument	events		5600924	0					
ANR	5601469	Identifier	events		5600924	0					
ANR	5601470	Statement	if	811:10:19854:19855	5600924	11	True				
ANR	5601471	IdentifierDeclStatement	"ROTATION_TRACE dprintf ( D_FULLDEBUG , ""WriteUserLog: Read %d events in %.4fs = %.0f/s\\n"" , events , elapsed , eps ) ;"	811:13:19857:19983	5600924	12	True				
ANR	5601472	IdentifierDecl	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Read %d events in %.4fs = %.0f/s\\n"" , events , elapsed , eps )"		5600924	0					
ANR	5601473	IdentifierDeclType	ROTATION_TRACE		5600924	0					
ANR	5601474	Identifier	dprintf		5600924	1					
ANR	5601475	Expression	"D_FULLDEBUG , ""WriteUserLog: Read %d events in %.4fs = %.0f/s\\n"" , events , elapsed , eps"		5600924	2					
ANR	5601476	Identifier	D_FULLDEBUG		5600924	0					
ANR	5601477	Expression	"""WriteUserLog: Read %d events in %.4fs = %.0f/s\\n"" , events , elapsed , eps"		5600924	1					
ANR	5601478	PrimaryExpression	"""WriteUserLog: Read %d events in %.4fs = %.0f/s\\n"""		5600924	0					
ANR	5601479	Expression	"events , elapsed , eps"		5600924	1					
ANR	5601480	Identifier	events		5600924	0					
ANR	5601481	Expression	"elapsed , eps"		5600924	1					
ANR	5601482	Identifier	elapsed		5600924	0					
ANR	5601483	Identifier	eps		5600924	1					
ANR	5601484	Statement	endif	815:10:19995:19999	5600924	13	True				
ANR	5601485	ExpressionStatement	fclose ( fp )	817:2:20007:20019	5600924	3	True				
ANR	5601486	CallExpression	fclose ( fp )		5600924	0					
ANR	5601487	Callee	fclose		5600924	0					
ANR	5601488	Identifier	fclose		5600924	0					
ANR	5601489	ArgumentList	fp		5600924	1					
ANR	5601490	Argument	fp		5600924	0					
ANR	5601491	Identifier	fp		5600924	0					
ANR	5601492	ExpressionStatement	header_reader . setSize ( current_filesize )	819:1:20025:20066	5600924	22	True				
ANR	5601493	CallExpression	header_reader . setSize ( current_filesize )		5600924	0					
ANR	5601494	Callee	header_reader . setSize		5600924	0					
ANR	5601495	MemberAccess	header_reader . setSize		5600924	0					
ANR	5601496	Identifier	header_reader		5600924	0					
ANR	5601497	Identifier	setSize		5600924	1					
ANR	5601498	ArgumentList	current_filesize		5600924	1					
ANR	5601499	Argument	current_filesize		5600924	0					
ANR	5601500	Identifier	current_filesize		5600924	0					
ANR	5601501	IdentifierDeclStatement	FILE * header_fp = NULL ;	822:1:20126:20150	5600924	23	True				
ANR	5601502	IdentifierDecl	* header_fp = NULL		5600924	0					
ANR	5601503	IdentifierDeclType	FILE *		5600924	0					
ANR	5601504	Identifier	header_fp		5600924	1					
ANR	5601505	AssignmentExpression	* header_fp = NULL		5600924	2		=			
ANR	5601506	Identifier	NULL		5600924	0					
ANR	5601507	Identifier	NULL		5600924	1					
ANR	5601508	IdentifierDeclStatement	FileLockBase * fake_lock = NULL ;	823:1:20153:20183	5600924	24	True				
ANR	5601509	IdentifierDecl	* fake_lock = NULL		5600924	0					
ANR	5601510	IdentifierDeclType	FileLockBase *		5600924	0					
ANR	5601511	Identifier	fake_lock		5600924	1					
ANR	5601512	AssignmentExpression	* fake_lock = NULL		5600924	2		=			
ANR	5601513	Identifier	NULL		5600924	0					
ANR	5601514	Identifier	NULL		5600924	1					
ANR	5601515	IfStatement	"if ( ! openFile ( m_global_path , false , false , false , fake_lock , header_fp ) )"		5600924	25					
ANR	5601516	Condition	"! openFile ( m_global_path , false , false , false , fake_lock , header_fp )"	824:5:20190:20256	5600924	0	True				
ANR	5601517	UnaryOperationExpression	"! openFile ( m_global_path , false , false , false , fake_lock , header_fp )"		5600924	0					
ANR	5601518	UnaryOperator	!		5600924	0					
ANR	5601519	CallExpression	"openFile ( m_global_path , false , false , false , fake_lock , header_fp )"		5600924	1					
ANR	5601520	Callee	openFile		5600924	0					
ANR	5601521	Identifier	openFile		5600924	0					
ANR	5601522	ArgumentList	m_global_path		5600924	1					
ANR	5601523	Argument	m_global_path		5600924	0					
ANR	5601524	Identifier	m_global_path		5600924	0					
ANR	5601525	Argument	false		5600924	1					
ANR	5601526	Identifier	false		5600924	0					
ANR	5601527	Argument	false		5600924	2					
ANR	5601528	Identifier	false		5600924	0					
ANR	5601529	Argument	false		5600924	3					
ANR	5601530	Identifier	false		5600924	0					
ANR	5601531	Argument	fake_lock		5600924	4					
ANR	5601532	Identifier	fake_lock		5600924	0					
ANR	5601533	Argument	header_fp		5600924	5					
ANR	5601534	Identifier	header_fp		5600924	0					
ANR	5601535	CompoundStatement		157:75:4190:4190	5600924	1					
ANR	5601536	Statement	dprintf	825:2:20264:20270	5600924	0	True				
ANR	5601537	Statement	(	825:9:20271:20271	5600924	1	True				
ANR	5601538	Statement	D_ALWAYS	825:11:20273:20280	5600924	2	True				
ANR	5601539	Statement	","	825:19:20281:20281	5600924	3	True				
ANR	5601540	Statement	"""WriteUserLog: """	826:5:20288:20303	5600924	4	True				
ANR	5601541	Statement	"""failed to open %s for header rewrite: %d (%s)\\n"""	827:5:20310:20358	5600924	5	True				
ANR	5601542	Statement	","	827:54:20359:20359	5600924	6	True				
ANR	5601543	Statement	m_global_path	828:5:20366:20378	5600924	7	True				
ANR	5601544	Statement	","	828:18:20379:20379	5600924	8	True				
ANR	5601545	Statement	errno	828:20:20381:20385	5600924	9	True				
ANR	5601546	Statement	","	828:25:20386:20386	5600924	10	True				
ANR	5601547	Statement	strerror	828:27:20388:20395	5600924	11	True				
ANR	5601548	Statement	(	828:35:20396:20396	5600924	12	True				
ANR	5601549	Statement	errno	828:36:20397:20401	5600924	13	True				
ANR	5601550	Statement	)	828:41:20402:20402	5600924	14	True				
ANR	5601551	Statement	)	828:43:20404:20404	5600924	15	True				
ANR	5601552	ExpressionStatement		828:44:20405:20405	5600924	16	True				
ANR	5601553	IdentifierDeclStatement	WriteUserLogHeader header_writer ( header_reader ) ;	830:1:20411:20460	5600924	26	True				
ANR	5601554	IdentifierDecl	header_writer ( header_reader )		5600924	0					
ANR	5601555	IdentifierDeclType	WriteUserLogHeader		5600924	0					
ANR	5601556	Identifier	header_writer		5600924	1					
ANR	5601557	Identifier	header_reader		5600924	2					
ANR	5601558	ExpressionStatement	header_writer . setMaxRotation ( m_global_max_rotations )	831:1:20463:20517	5600924	27	True				
ANR	5601559	CallExpression	header_writer . setMaxRotation ( m_global_max_rotations )		5600924	0					
ANR	5601560	Callee	header_writer . setMaxRotation		5600924	0					
ANR	5601561	MemberAccess	header_writer . setMaxRotation		5600924	0					
ANR	5601562	Identifier	header_writer		5600924	0					
ANR	5601563	Identifier	setMaxRotation		5600924	1					
ANR	5601564	ArgumentList	m_global_max_rotations		5600924	1					
ANR	5601565	Argument	m_global_max_rotations		5600924	0					
ANR	5601566	Identifier	m_global_max_rotations		5600924	0					
ANR	5601567	IfStatement	if ( m_creator_name )		5600924	28					
ANR	5601568	Condition	m_creator_name	832:6:20525:20538	5600924	0	True				
ANR	5601569	Identifier	m_creator_name		5600924	0					
ANR	5601570	CompoundStatement		165:23:4472:4472	5600924	1					
ANR	5601571	ExpressionStatement	header_writer . setCreatorName ( m_creator_name )	833:2:20546:20592	5600924	0	True				
ANR	5601572	CallExpression	header_writer . setCreatorName ( m_creator_name )		5600924	0					
ANR	5601573	Callee	header_writer . setCreatorName		5600924	0					
ANR	5601574	MemberAccess	header_writer . setCreatorName		5600924	0					
ANR	5601575	Identifier	header_writer		5600924	0					
ANR	5601576	Identifier	setCreatorName		5600924	1					
ANR	5601577	ArgumentList	m_creator_name		5600924	1					
ANR	5601578	Argument	m_creator_name		5600924	0					
ANR	5601579	Identifier	m_creator_name		5600924	0					
ANR	5601580	IdentifierDeclStatement	MyString s ;	836:1:20599:20609	5600924	29	True				
ANR	5601581	IdentifierDecl	s		5600924	0					
ANR	5601582	IdentifierDeclType	MyString		5600924	0					
ANR	5601583	Identifier	s		5600924	1					
ANR	5601584	ExpressionStatement	"s . sprintf ( ""checkGlobalLogRotation(): %s"" , m_global_path )"	837:1:20612:20670	5600924	30	True				
ANR	5601585	CallExpression	"s . sprintf ( ""checkGlobalLogRotation(): %s"" , m_global_path )"		5600924	0					
ANR	5601586	Callee	s . sprintf		5600924	0					
ANR	5601587	MemberAccess	s . sprintf		5600924	0					
ANR	5601588	Identifier	s		5600924	0					
ANR	5601589	Identifier	sprintf		5600924	1					
ANR	5601590	ArgumentList	"""checkGlobalLogRotation(): %s"""		5600924	1					
ANR	5601591	Argument	"""checkGlobalLogRotation(): %s"""		5600924	0					
ANR	5601592	PrimaryExpression	"""checkGlobalLogRotation(): %s"""		5600924	0					
ANR	5601593	Argument	m_global_path		5600924	1					
ANR	5601594	Identifier	m_global_path		5600924	0					
ANR	5601595	ExpressionStatement	"header_writer . dprint ( D_FULLDEBUG , s )"	838:1:20673:20711	5600924	31	True				
ANR	5601596	CallExpression	"header_writer . dprint ( D_FULLDEBUG , s )"		5600924	0					
ANR	5601597	Callee	header_writer . dprint		5600924	0					
ANR	5601598	MemberAccess	header_writer . dprint		5600924	0					
ANR	5601599	Identifier	header_writer		5600924	0					
ANR	5601600	Identifier	dprint		5600924	1					
ANR	5601601	ArgumentList	D_FULLDEBUG		5600924	1					
ANR	5601602	Argument	D_FULLDEBUG		5600924	0					
ANR	5601603	Identifier	D_FULLDEBUG		5600924	0					
ANR	5601604	Argument	s		5600924	1					
ANR	5601605	Identifier	s		5600924	0					
ANR	5601606	Statement	if	841:2:20749:20750	5600924	32	True				
ANR	5601607	IdentifierDeclStatement	ROTATION_TRACE UtcTime now ( true ) ;	841:5:20752:20787	5600924	33	True				
ANR	5601608	IdentifierDecl	now ( true )		5600924	0					
ANR	5601609	IdentifierDeclType	ROTATION_TRACE UtcTime		5600924	0					
ANR	5601610	Identifier	now		5600924	1					
ANR	5601611	Identifier	true		5600924	2					
ANR	5601612	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Writing header to %s (%p) @ %.6f\\n"" , m_global_path , header_fp , now . combined ( ) )"	843:1:20790:20910	5600924	34	True				
ANR	5601613	CallExpression	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Writing header to %s (%p) @ %.6f\\n"" , m_global_path , header_fp , now . combined ( ) )"		5600924	0					
ANR	5601614	Callee	dprintf		5600924	0					
ANR	5601615	Identifier	dprintf		5600924	0					
ANR	5601616	ArgumentList	D_FULLDEBUG		5600924	1					
ANR	5601617	Argument	D_FULLDEBUG		5600924	0					
ANR	5601618	Identifier	D_FULLDEBUG		5600924	0					
ANR	5601619	Argument	"""WriteUserLog: Writing header to %s (%p) @ %.6f\\n"""		5600924	1					
ANR	5601620	PrimaryExpression	"""WriteUserLog: Writing header to %s (%p) @ %.6f\\n"""		5600924	0					
ANR	5601621	Argument	m_global_path		5600924	2					
ANR	5601622	Identifier	m_global_path		5600924	0					
ANR	5601623	Argument	header_fp		5600924	3					
ANR	5601624	Identifier	header_fp		5600924	0					
ANR	5601625	Argument	now . combined ( )		5600924	4					
ANR	5601626	CallExpression	now . combined ( )		5600924	0					
ANR	5601627	Callee	now . combined		5600924	0					
ANR	5601628	MemberAccess	now . combined		5600924	0					
ANR	5601629	Identifier	now		5600924	0					
ANR	5601630	Identifier	combined		5600924	1					
ANR	5601631	ArgumentList			5600924	1					
ANR	5601632	Statement	endif	845:2:20914:20918	5600924	35	True				
ANR	5601633	IfStatement	if ( header_fp )		5600924	36					
ANR	5601634	Condition	header_fp	846:6:20926:20934	5600924	0	True				
ANR	5601635	Identifier	header_fp		5600924	0					
ANR	5601636	CompoundStatement		184:2:4962:4975	5600924	1					
ANR	5601637	ExpressionStatement	rewind ( header_fp )	847:2:20942:20961	5600924	0	True				
ANR	5601638	CallExpression	rewind ( header_fp )		5600924	0					
ANR	5601639	Callee	rewind		5600924	0					
ANR	5601640	Identifier	rewind		5600924	0					
ANR	5601641	ArgumentList	header_fp		5600924	1					
ANR	5601642	Argument	header_fp		5600924	0					
ANR	5601643	Identifier	header_fp		5600924	0					
ANR	5601644	ExpressionStatement	"header_writer . Write ( * this , header_fp )"	848:2:20965:21004	5600924	1	True				
ANR	5601645	CallExpression	"header_writer . Write ( * this , header_fp )"		5600924	0					
ANR	5601646	Callee	header_writer . Write		5600924	0					
ANR	5601647	MemberAccess	header_writer . Write		5600924	0					
ANR	5601648	Identifier	header_writer		5600924	0					
ANR	5601649	Identifier	Write		5600924	1					
ANR	5601650	ArgumentList	* this		5600924	1					
ANR	5601651	Argument	* this		5600924	0					
ANR	5601652	UnaryOperationExpression	* this		5600924	0					
ANR	5601653	UnaryOperator	*		5600924	0					
ANR	5601654	Identifier	this		5600924	1					
ANR	5601655	Argument	header_fp		5600924	1					
ANR	5601656	Identifier	header_fp		5600924	0					
ANR	5601657	ExpressionStatement	fclose ( header_fp )	849:2:21008:21027	5600924	2	True				
ANR	5601658	CallExpression	fclose ( header_fp )		5600924	0					
ANR	5601659	Callee	fclose		5600924	0					
ANR	5601660	Identifier	fclose		5600924	0					
ANR	5601661	ArgumentList	header_fp		5600924	1					
ANR	5601662	Argument	header_fp		5600924	0					
ANR	5601663	Identifier	header_fp		5600924	0					
ANR	5601664	IdentifierDeclStatement	MyString tmps ;	851:2:21032:21045	5600924	3	True				
ANR	5601665	IdentifierDecl	tmps		5600924	0					
ANR	5601666	IdentifierDeclType	MyString		5600924	0					
ANR	5601667	Identifier	tmps		5600924	1					
ANR	5601668	ExpressionStatement	"tmps . sprintf ( ""WriteUserLog: Wrote header to %s"" , m_global_path )"	852:2:21049:21114	5600924	4	True				
ANR	5601669	CallExpression	"tmps . sprintf ( ""WriteUserLog: Wrote header to %s"" , m_global_path )"		5600924	0					
ANR	5601670	Callee	tmps . sprintf		5600924	0					
ANR	5601671	MemberAccess	tmps . sprintf		5600924	0					
ANR	5601672	Identifier	tmps		5600924	0					
ANR	5601673	Identifier	sprintf		5600924	1					
ANR	5601674	ArgumentList	"""WriteUserLog: Wrote header to %s"""		5600924	1					
ANR	5601675	Argument	"""WriteUserLog: Wrote header to %s"""		5600924	0					
ANR	5601676	PrimaryExpression	"""WriteUserLog: Wrote header to %s"""		5600924	0					
ANR	5601677	Argument	m_global_path		5600924	1					
ANR	5601678	Identifier	m_global_path		5600924	0					
ANR	5601679	ExpressionStatement	"header_writer . dprint ( D_FULLDEBUG , tmps )"	853:2:21118:21159	5600924	5	True				
ANR	5601680	CallExpression	"header_writer . dprint ( D_FULLDEBUG , tmps )"		5600924	0					
ANR	5601681	Callee	header_writer . dprint		5600924	0					
ANR	5601682	MemberAccess	header_writer . dprint		5600924	0					
ANR	5601683	Identifier	header_writer		5600924	0					
ANR	5601684	Identifier	dprint		5600924	1					
ANR	5601685	ArgumentList	D_FULLDEBUG		5600924	1					
ANR	5601686	Argument	D_FULLDEBUG		5600924	0					
ANR	5601687	Identifier	D_FULLDEBUG		5600924	0					
ANR	5601688	Argument	tmps		5600924	1					
ANR	5601689	Identifier	tmps		5600924	0					
ANR	5601690	IfStatement	if ( fake_lock )		5600924	37					
ANR	5601691	Condition	fake_lock	855:6:21170:21178	5600924	0	True				
ANR	5601692	Identifier	fake_lock		5600924	0					
ANR	5601693	CompoundStatement		188:18:5112:5112	5600924	1					
ANR	5601694	Statement	delete	856:2:21186:21191	5600924	0	True				
ANR	5601695	ExpressionStatement	fake_lock	856:9:21193:21202	5600924	1	True				
ANR	5601696	Identifier	fake_lock		5600924	0					
ANR	5601697	Statement	if	860:2:21232:21233	5600924	38	True				
ANR	5601698	IdentifierDeclStatement	ROTATION_TRACE UtcTime time1 ( true ) ;	860:5:21235:21272	5600924	39	True				
ANR	5601699	IdentifierDecl	time1 ( true )		5600924	0					
ANR	5601700	IdentifierDeclType	ROTATION_TRACE UtcTime		5600924	0					
ANR	5601701	Identifier	time1		5600924	1					
ANR	5601702	Identifier	true		5600924	2					
ANR	5601703	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Starting bulk rotation @ %.6f\\n"" , time1 . combined ( ) )"	862:1:21275:21372	5600924	40	True				
ANR	5601704	CallExpression	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Starting bulk rotation @ %.6f\\n"" , time1 . combined ( ) )"		5600924	0					
ANR	5601705	Callee	dprintf		5600924	0					
ANR	5601706	Identifier	dprintf		5600924	0					
ANR	5601707	ArgumentList	D_FULLDEBUG		5600924	1					
ANR	5601708	Argument	D_FULLDEBUG		5600924	0					
ANR	5601709	Identifier	D_FULLDEBUG		5600924	0					
ANR	5601710	Argument	"""WriteUserLog: Starting bulk rotation @ %.6f\\n"""		5600924	1					
ANR	5601711	PrimaryExpression	"""WriteUserLog: Starting bulk rotation @ %.6f\\n"""		5600924	0					
ANR	5601712	Argument	time1 . combined ( )		5600924	2					
ANR	5601713	CallExpression	time1 . combined ( )		5600924	0					
ANR	5601714	Callee	time1 . combined		5600924	0					
ANR	5601715	MemberAccess	time1 . combined		5600924	0					
ANR	5601716	Identifier	time1		5600924	0					
ANR	5601717	Identifier	combined		5600924	1					
ANR	5601718	ArgumentList			5600924	1					
ANR	5601719	IdentifierDeclStatement	endif MyString rotated ;	865:2:21376:21400	5600924	41	True				
ANR	5601720	IdentifierDecl	rotated		5600924	0					
ANR	5601721	IdentifierDeclType	endif MyString		5600924	0					
ANR	5601722	Identifier	rotated		5600924	1					
ANR	5601723	IdentifierDeclStatement	"int num_rotations = doRotation ( m_global_path , m_global_fp , rotated , m_global_max_rotations ) ;"	868:1:21403:21505	5600924	42	True				
ANR	5601724	IdentifierDecl	"num_rotations = doRotation ( m_global_path , m_global_fp , rotated , m_global_max_rotations )"		5600924	0					
ANR	5601725	IdentifierDeclType	int		5600924	0					
ANR	5601726	Identifier	num_rotations		5600924	1					
ANR	5601727	AssignmentExpression	"num_rotations = doRotation ( m_global_path , m_global_fp , rotated , m_global_max_rotations )"		5600924	2		=			
ANR	5601728	Identifier	num_rotations		5600924	0					
ANR	5601729	CallExpression	"doRotation ( m_global_path , m_global_fp , rotated , m_global_max_rotations )"		5600924	1					
ANR	5601730	Callee	doRotation		5600924	0					
ANR	5601731	Identifier	doRotation		5600924	0					
ANR	5601732	ArgumentList	m_global_path		5600924	1					
ANR	5601733	Argument	m_global_path		5600924	0					
ANR	5601734	Identifier	m_global_path		5600924	0					
ANR	5601735	Argument	m_global_fp		5600924	1					
ANR	5601736	Identifier	m_global_fp		5600924	0					
ANR	5601737	Argument	rotated		5600924	2					
ANR	5601738	Identifier	rotated		5600924	0					
ANR	5601739	Argument	m_global_max_rotations		5600924	3					
ANR	5601740	Identifier	m_global_max_rotations		5600924	0					
ANR	5601741	IfStatement	if ( num_rotations )		5600924	43					
ANR	5601742	Condition	num_rotations	870:6:21513:21525	5600924	0	True				
ANR	5601743	Identifier	num_rotations		5600924	0					
ANR	5601744	CompoundStatement		203:22:5459:5459	5600924	1					
ANR	5601745	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Rotated event log %s to %s at size %lu bytes\\n"" , m_global_path , rotated . Value ( ) , ( unsigned long ) current_filesize )"	871:2:21533:21695	5600924	0	True				
ANR	5601746	CallExpression	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Rotated event log %s to %s at size %lu bytes\\n"" , m_global_path , rotated . Value ( ) , ( unsigned long ) current_filesize )"		5600924	0					
ANR	5601747	Callee	dprintf		5600924	0					
ANR	5601748	Identifier	dprintf		5600924	0					
ANR	5601749	ArgumentList	D_FULLDEBUG		5600924	1					
ANR	5601750	Argument	D_FULLDEBUG		5600924	0					
ANR	5601751	Identifier	D_FULLDEBUG		5600924	0					
ANR	5601752	Argument	"""WriteUserLog: Rotated event log %s to %s at size %lu bytes\\n"""		5600924	1					
ANR	5601753	PrimaryExpression	"""WriteUserLog: Rotated event log %s to %s at size %lu bytes\\n"""		5600924	0					
ANR	5601754	Argument	m_global_path		5600924	2					
ANR	5601755	Identifier	m_global_path		5600924	0					
ANR	5601756	Argument	rotated . Value ( )		5600924	3					
ANR	5601757	CallExpression	rotated . Value ( )		5600924	0					
ANR	5601758	Callee	rotated . Value		5600924	0					
ANR	5601759	MemberAccess	rotated . Value		5600924	0					
ANR	5601760	Identifier	rotated		5600924	0					
ANR	5601761	Identifier	Value		5600924	1					
ANR	5601762	ArgumentList			5600924	1					
ANR	5601763	Argument	( unsigned long ) current_filesize		5600924	4					
ANR	5601764	CastExpression	( unsigned long ) current_filesize		5600924	0					
ANR	5601765	CastTarget	unsigned long		5600924	0					
ANR	5601766	Identifier	current_filesize		5600924	1					
ANR	5601767	Statement	if	877:2:21703:21704	5600924	44	True				
ANR	5601768	IdentifierDeclStatement	ROTATION_TRACE UtcTime end_time ( true ) ;	877:5:21706:21746	5600924	45	True				
ANR	5601769	IdentifierDecl	end_time ( true )		5600924	0					
ANR	5601770	IdentifierDeclType	ROTATION_TRACE UtcTime		5600924	0					
ANR	5601771	Identifier	end_time		5600924	1					
ANR	5601772	Identifier	true		5600924	2					
ANR	5601773	IfStatement	if ( num_rotations )		5600924	46					
ANR	5601774	Condition	num_rotations	879:6:21754:21766	5600924	0	True				
ANR	5601775	Identifier	num_rotations		5600924	0					
ANR	5601776	CompoundStatement		212:22:5700:5700	5600924	1					
ANR	5601777	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Done rotating files (inode = %ld) @ %.6f\\n"" , ( long ) swrap . GetBuf ( ) -> st_ino , end_time . combined ( ) )"	880:2:21774:21917	5600924	0	True				
ANR	5601778	CallExpression	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Done rotating files (inode = %ld) @ %.6f\\n"" , ( long ) swrap . GetBuf ( ) -> st_ino , end_time . combined ( ) )"		5600924	0					
ANR	5601779	Callee	dprintf		5600924	0					
ANR	5601780	Identifier	dprintf		5600924	0					
ANR	5601781	ArgumentList	D_FULLDEBUG		5600924	1					
ANR	5601782	Argument	D_FULLDEBUG		5600924	0					
ANR	5601783	Identifier	D_FULLDEBUG		5600924	0					
ANR	5601784	Argument	"""WriteUserLog: Done rotating files (inode = %ld) @ %.6f\\n"""		5600924	1					
ANR	5601785	PrimaryExpression	"""WriteUserLog: Done rotating files (inode = %ld) @ %.6f\\n"""		5600924	0					
ANR	5601786	Argument	( long ) swrap . GetBuf ( ) -> st_ino		5600924	2					
ANR	5601787	CastExpression	( long ) swrap . GetBuf ( ) -> st_ino		5600924	0					
ANR	5601788	CastTarget	long		5600924	0					
ANR	5601789	PtrMemberAccess	swrap . GetBuf ( ) -> st_ino		5600924	1					
ANR	5601790	CallExpression	swrap . GetBuf ( )		5600924	0					
ANR	5601791	Callee	swrap . GetBuf		5600924	0					
ANR	5601792	MemberAccess	swrap . GetBuf		5600924	0					
ANR	5601793	Identifier	swrap		5600924	0					
ANR	5601794	Identifier	GetBuf		5600924	1					
ANR	5601795	ArgumentList			5600924	1					
ANR	5601796	Identifier	st_ino		5600924	1					
ANR	5601797	Argument	end_time . combined ( )		5600924	3					
ANR	5601798	CallExpression	end_time . combined ( )		5600924	0					
ANR	5601799	Callee	end_time . combined		5600924	0					
ANR	5601800	MemberAccess	end_time . combined		5600924	0					
ANR	5601801	Identifier	end_time		5600924	0					
ANR	5601802	Identifier	combined		5600924	1					
ANR	5601803	ArgumentList			5600924	1					
ANR	5601804	IdentifierDeclStatement	double elapsed = end_time . difference ( time1 ) ;	884:1:21923:21968	5600924	47	True				
ANR	5601805	IdentifierDecl	elapsed = end_time . difference ( time1 )		5600924	0					
ANR	5601806	IdentifierDeclType	double		5600924	0					
ANR	5601807	Identifier	elapsed		5600924	1					
ANR	5601808	AssignmentExpression	elapsed = end_time . difference ( time1 )		5600924	2		=			
ANR	5601809	Identifier	elapsed		5600924	0					
ANR	5601810	CallExpression	end_time . difference ( time1 )		5600924	1					
ANR	5601811	Callee	end_time . difference		5600924	0					
ANR	5601812	MemberAccess	end_time . difference		5600924	0					
ANR	5601813	Identifier	end_time		5600924	0					
ANR	5601814	Identifier	difference		5600924	1					
ANR	5601815	ArgumentList	time1		5600924	1					
ANR	5601816	Argument	time1		5600924	0					
ANR	5601817	Identifier	time1		5600924	0					
ANR	5601818	IdentifierDeclStatement	double rps = ( num_rotations / elapsed ) ;	885:1:21971:22011	5600924	48	True				
ANR	5601819	IdentifierDecl	rps = ( num_rotations / elapsed )		5600924	0					
ANR	5601820	IdentifierDeclType	double		5600924	0					
ANR	5601821	Identifier	rps		5600924	1					
ANR	5601822	AssignmentExpression	rps = ( num_rotations / elapsed )		5600924	2		=			
ANR	5601823	Identifier	rps		5600924	0					
ANR	5601824	MultiplicativeExpression	num_rotations / elapsed		5600924	1		/			
ANR	5601825	Identifier	num_rotations		5600924	0					
ANR	5601826	Identifier	elapsed		5600924	1					
ANR	5601827	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Rotated %d files in %.4fs = %.0f/s\\n"" , num_rotations , elapsed , rps )"	886:1:22014:22127	5600924	49	True				
ANR	5601828	CallExpression	"dprintf ( D_FULLDEBUG , ""WriteUserLog: Rotated %d files in %.4fs = %.0f/s\\n"" , num_rotations , elapsed , rps )"		5600924	0					
ANR	5601829	Callee	dprintf		5600924	0					
ANR	5601830	Identifier	dprintf		5600924	0					
ANR	5601831	ArgumentList	D_FULLDEBUG		5600924	1					
ANR	5601832	Argument	D_FULLDEBUG		5600924	0					
ANR	5601833	Identifier	D_FULLDEBUG		5600924	0					
ANR	5601834	Argument	"""WriteUserLog: Rotated %d files in %.4fs = %.0f/s\\n"""		5600924	1					
ANR	5601835	PrimaryExpression	"""WriteUserLog: Rotated %d files in %.4fs = %.0f/s\\n"""		5600924	0					
ANR	5601836	Argument	num_rotations		5600924	2					
ANR	5601837	Identifier	num_rotations		5600924	0					
ANR	5601838	Argument	elapsed		5600924	3					
ANR	5601839	Identifier	elapsed		5600924	0					
ANR	5601840	Argument	rps		5600924	4					
ANR	5601841	Identifier	rps		5600924	0					
ANR	5601842	IdentifierDeclStatement	endif globalLogRotated ( header_reader ) ;	889:2:22131:22241	5600924	50	True				
ANR	5601843	IdentifierDecl	globalLogRotated ( header_reader )		5600924	0					
ANR	5601844	IdentifierDeclType	endif		5600924	0					
ANR	5601845	Identifier	globalLogRotated		5600924	1					
ANR	5601846	Identifier	header_reader		5600924	2					
ANR	5601847	ExpressionStatement	"globalRotationComplete ( num_rotations , header_reader . getSequence ( ) , header_reader . getId ( ) )"	895:1:22294:22399	5600924	51	True				
ANR	5601848	CallExpression	"globalRotationComplete ( num_rotations , header_reader . getSequence ( ) , header_reader . getId ( ) )"		5600924	0					
ANR	5601849	Callee	globalRotationComplete		5600924	0					
ANR	5601850	Identifier	globalRotationComplete		5600924	0					
ANR	5601851	ArgumentList	num_rotations		5600924	1					
ANR	5601852	Argument	num_rotations		5600924	0					
ANR	5601853	Identifier	num_rotations		5600924	0					
ANR	5601854	Argument	header_reader . getSequence ( )		5600924	1					
ANR	5601855	CallExpression	header_reader . getSequence ( )		5600924	0					
ANR	5601856	Callee	header_reader . getSequence		5600924	0					
ANR	5601857	MemberAccess	header_reader . getSequence		5600924	0					
ANR	5601858	Identifier	header_reader		5600924	0					
ANR	5601859	Identifier	getSequence		5600924	1					
ANR	5601860	ArgumentList			5600924	1					
ANR	5601861	Argument	header_reader . getId ( )		5600924	2					
ANR	5601862	CallExpression	header_reader . getId ( )		5600924	0					
ANR	5601863	Callee	header_reader . getId		5600924	0					
ANR	5601864	MemberAccess	header_reader . getId		5600924	0					
ANR	5601865	Identifier	header_reader		5600924	0					
ANR	5601866	Identifier	getId		5600924	1					
ANR	5601867	ArgumentList			5600924	1					
ANR	5601868	ExpressionStatement	m_rotation_lock -> release ( )	900:1:22442:22469	5600924	52	True				
ANR	5601869	CallExpression	m_rotation_lock -> release ( )		5600924	0					
ANR	5601870	Callee	m_rotation_lock -> release		5600924	0					
ANR	5601871	PtrMemberAccess	m_rotation_lock -> release		5600924	0					
ANR	5601872	Identifier	m_rotation_lock		5600924	0					
ANR	5601873	Identifier	release		5600924	1					
ANR	5601874	ArgumentList			5600924	1					
ANR	5601875	ReturnStatement	return true ;	902:1:22473:22484	5600924	53	True				
ANR	5601876	Identifier	true		5600924	0					
ANR	5601877	ReturnType	bool		5600924	1					
ANR	5601878	Identifier	WriteUserLog :: checkGlobalLogRotation		5600924	2					
ANR	5601879	ParameterList			5600924	3					
ANR	5601880	CFGEntryNode	ENTRY		5600924		True				
ANR	5601881	CFGExitNode	EXIT		5600924		True				
ANR	5601882	Symbol	time2 . difference		5600924						
ANR	5601883	Symbol	header_writer		5600924						
ANR	5601884	Symbol	openFile		5600924						
ANR	5601885	Symbol	m_creator_name		5600924						
ANR	5601886	Symbol	current_filesize		5600924						
ANR	5601887	Symbol	tmps		5600924						
ANR	5601888	Symbol	updateGlobalStat		5600924						
ANR	5601889	Symbol	* sbuf . GetBuf		5600924						
ANR	5601890	Symbol	time1		5600924						
ANR	5601891	Symbol	time2		5600924						
ANR	5601892	Symbol	m_global_stat		5600924						
ANR	5601893	Symbol	WRITE_LOCK		5600924						
ANR	5601894	Symbol	sbuf		5600924						
ANR	5601895	Symbol	header_reader		5600924						
ANR	5601896	Symbol	m_rotation_lock -> obtain		5600924						
ANR	5601897	Symbol	m_rotation_lock		5600924						
ANR	5601898	Symbol	num_rotations		5600924						
ANR	5601899	Symbol	stat_time . combined		5600924						
ANR	5601900	Symbol	events		5600924						
ANR	5601901	Symbol	m_global_disable		5600924						
ANR	5601902	Symbol	m_global_state		5600924						
ANR	5601903	Symbol	NULL		5600924						
ANR	5601904	Symbol	log_reader . readEvent		5600924						
ANR	5601905	Symbol	globalLogRotated		5600924						
ANR	5601906	Symbol	m_global_max_rotations		5600924						
ANR	5601907	Symbol	this		5600924						
ANR	5601908	Symbol	eps		5600924						
ANR	5601909	Symbol	sbuf . GetBuf ( ) -> st_size		5600924						
ANR	5601910	Symbol	* swrap		5600924						
ANR	5601911	Symbol	D_FULLDEBUG		5600924						
ANR	5601912	Symbol	m_global_lock -> isUnlocked		5600924						
ANR	5601913	Symbol	m_global_state -> isOverSize		5600924						
ANR	5601914	Symbol	sbuf . Stat		5600924						
ANR	5601915	Symbol	globalRotationStarting		5600924						
ANR	5601916	Symbol	m_global_max_filesize		5600924						
ANR	5601917	Symbol	swrap		5600924						
ANR	5601918	Symbol	start_time		5600924						
ANR	5601919	Symbol	swrap . GetBuf		5600924						
ANR	5601920	Symbol	fileno		5600924						
ANR	5601921	Symbol	true		5600924						
ANR	5601922	Symbol	dprintf		5600924						
ANR	5601923	Symbol	* m_global_lock		5600924						
ANR	5601924	Symbol	swrap . GetBuf ( ) -> st_ino		5600924						
ANR	5601925	Symbol	stat_time		5600924						
ANR	5601926	Symbol	* m_global_state		5600924						
ANR	5601927	Symbol	m_global_lock -> isFakeLock		5600924						
ANR	5601928	Symbol	fake_lock		5600924						
ANR	5601929	Symbol	header_reader . getId		5600924						
ANR	5601930	Symbol	now . combined		5600924						
ANR	5601931	Symbol	rotated . Value		5600924						
ANR	5601932	Symbol	globalRotationEvents		5600924						
ANR	5601933	Symbol	start_time . combined		5600924						
ANR	5601934	Symbol	* swrap . GetBuf		5600924						
ANR	5601935	Symbol	fp		5600924						
ANR	5601936	Symbol	end_time . difference		5600924						
ANR	5601937	Symbol	elapsed		5600924						
ANR	5601938	Symbol	sbuf . GetBuf		5600924						
ANR	5601939	Symbol	m_global_state -> isNewFile		5600924						
ANR	5601940	Symbol	m_global_fp		5600924						
ANR	5601941	Symbol	header_reader . Read		5600924						
ANR	5601942	Symbol	now		5600924						
ANR	5601943	Symbol	event		5600924						
ANR	5601944	Symbol	safe_fopen_wrapper_follow		5600924						
ANR	5601945	Symbol	outcome		5600924						
ANR	5601946	Symbol	time1 . combined		5600924						
ANR	5601947	Symbol	m_global_path		5600924						
ANR	5601948	Symbol	doRotation		5600924						
ANR	5601949	Symbol	false		5600924						
ANR	5601950	Symbol	D_ALWAYS		5600924						
ANR	5601951	Symbol	log_reader		5600924						
ANR	5601952	Symbol	end_time		5600924						
ANR	5601953	Symbol	rotated		5600924						
ANR	5601954	Symbol	* m_global_stat		5600924						
ANR	5601955	Symbol	ULOG_OK		5600924						
ANR	5601956	Symbol	* this		5600924						
ANR	5601957	Symbol	* sbuf		5600924						
ANR	5601958	Symbol	header_reader . getSequence		5600924						
ANR	5601959	Symbol	s		5600924						
ANR	5601960	Symbol	rps		5600924						
ANR	5601961	Symbol	header_fp		5600924						
ANR	5601962	Symbol	* m_rotation_lock		5600924						
ANR	5601963	Symbol	end_time . combined		5600924						
ANR	5601964	Symbol	m_global_count_events		5600924						
ANR	5601965	Symbol	m_global_lock		5600924						
ANR	5601966	Function	WriteUserLog :: updateGlobalStat	906:0:22490:22691							
ANR	5601967	FunctionDef	WriteUserLog :: updateGlobalStat ()		5601966	0					
ANR	5601968	CompoundStatement		908:0:22534:22691	5601966	0					
ANR	5601969	IfStatement	if ( ( NULL == m_global_stat ) || ( m_global_stat -> Stat ( ) ) )		5601966	0					
ANR	5601970	Condition	( NULL == m_global_stat ) || ( m_global_stat -> Stat ( ) )	909:6:22542:22591	5601966	0	True				
ANR	5601971	OrExpression	( NULL == m_global_stat ) || ( m_global_stat -> Stat ( ) )		5601966	0		||			
ANR	5601972	EqualityExpression	NULL == m_global_stat		5601966	0		==			
ANR	5601973	Identifier	NULL		5601966	0					
ANR	5601974	Identifier	m_global_stat		5601966	1					
ANR	5601975	CallExpression	m_global_stat -> Stat ( )		5601966	1					
ANR	5601976	Callee	m_global_stat -> Stat		5601966	0					
ANR	5601977	PtrMemberAccess	m_global_stat -> Stat		5601966	0					
ANR	5601978	Identifier	m_global_stat		5601966	0					
ANR	5601979	Identifier	Stat		5601966	1					
ANR	5601980	ArgumentList			5601966	1					
ANR	5601981	CompoundStatement		2:59:60:60	5601966	1					
ANR	5601982	ReturnStatement	return false ;	910:2:22599:22611	5601966	0	True				
ANR	5601983	Identifier	false		5601966	0					
ANR	5601984	IfStatement	if ( NULL == m_global_stat -> GetBuf ( ) )		5601966	1					
ANR	5601985	Condition	NULL == m_global_stat -> GetBuf ( )	912:6:22622:22652	5601966	0	True				
ANR	5601986	EqualityExpression	NULL == m_global_stat -> GetBuf ( )		5601966	0		==			
ANR	5601987	Identifier	NULL		5601966	0					
ANR	5601988	CallExpression	m_global_stat -> GetBuf ( )		5601966	1					
ANR	5601989	Callee	m_global_stat -> GetBuf		5601966	0					
ANR	5601990	PtrMemberAccess	m_global_stat -> GetBuf		5601966	0					
ANR	5601991	Identifier	m_global_stat		5601966	0					
ANR	5601992	Identifier	GetBuf		5601966	1					
ANR	5601993	ArgumentList			5601966	1					
ANR	5601994	CompoundStatement		5:40:121:121	5601966	1					
ANR	5601995	ReturnStatement	return false ;	913:2:22660:22672	5601966	0	True				
ANR	5601996	Identifier	false		5601966	0					
ANR	5601997	ReturnStatement	return true ;	915:1:22678:22689	5601966	2	True				
ANR	5601998	Identifier	true		5601966	0					
ANR	5601999	ReturnType	bool		5601966	1					
ANR	5602000	Identifier	WriteUserLog :: updateGlobalStat		5601966	2					
ANR	5602001	ParameterList			5601966	3					
ANR	5602002	CFGEntryNode	ENTRY		5601966		True				
ANR	5602003	CFGExitNode	EXIT		5601966		True				
ANR	5602004	Symbol	m_global_stat -> Stat		5601966						
ANR	5602005	Symbol	m_global_stat		5601966						
ANR	5602006	Symbol	NULL		5601966						
ANR	5602007	Symbol	false		5601966						
ANR	5602008	Symbol	true		5601966						
ANR	5602009	Symbol	m_global_stat -> GetBuf		5601966						
ANR	5602010	Symbol	* m_global_stat		5601966						
ANR	5602011	Function	WriteUserLog :: getGlobalLogSize	918:0:22694:23107							
ANR	5602012	FunctionDef	"WriteUserLog :: getGlobalLogSize (unsigned long & size , bool use_fp)"		5602011	0					
ANR	5602013	CompoundStatement		920:0:22766:23107	5602011	0					
ANR	5602014	IdentifierDeclStatement	StatWrapper stat ;	921:1:22769:22785	5602011	0	True				
ANR	5602015	IdentifierDecl	stat		5602011	0					
ANR	5602016	IdentifierDeclType	StatWrapper		5602011	0					
ANR	5602017	Identifier	stat		5602011	1					
ANR	5602018	IfStatement	if ( m_global_close && ! m_global_fp )		5602011	1					
ANR	5602019	Condition	m_global_close && ! m_global_fp	922:6:22793:22822	5602011	0	True				
ANR	5602020	AndExpression	m_global_close && ! m_global_fp		5602011	0		&&			
ANR	5602021	Identifier	m_global_close		5602011	0					
ANR	5602022	UnaryOperationExpression	! m_global_fp		5602011	1					
ANR	5602023	UnaryOperator	!		5602011	0					
ANR	5602024	Identifier	m_global_fp		5602011	1					
ANR	5602025	CompoundStatement		3:39:59:59	5602011	1					
ANR	5602026	ExpressionStatement	use_fp = false	923:2:22830:22844	5602011	0	True				
ANR	5602027	AssignmentExpression	use_fp = false		5602011	0		=			
ANR	5602028	Identifier	use_fp		5602011	0					
ANR	5602029	Identifier	false		5602011	1					
ANR	5602030	IfStatement	if ( use_fp )		5602011	2					
ANR	5602031	Condition	use_fp	925:6:22855:22860	5602011	0	True				
ANR	5602032	Identifier	use_fp		5602011	0					
ANR	5602033	CompoundStatement		6:15:97:97	5602011	1					
ANR	5602034	IfStatement	if ( ! m_global_fp )		5602011	0					
ANR	5602035	Condition	! m_global_fp	926:7:22873:22884	5602011	0	True				
ANR	5602036	UnaryOperationExpression	! m_global_fp		5602011	0					
ANR	5602037	UnaryOperator	!		5602011	0					
ANR	5602038	Identifier	m_global_fp		5602011	1					
ANR	5602039	CompoundStatement		7:22:121:121	5602011	1					
ANR	5602040	ReturnStatement	return false ;	927:3:22893:22905	5602011	0	True				
ANR	5602041	Identifier	false		5602011	0					
ANR	5602042	IfStatement	if ( stat . Stat ( fileno ( m_global_fp ) ) )		5602011	1					
ANR	5602043	Condition	stat . Stat ( fileno ( m_global_fp ) )	929:7:22918:22947	5602011	0	True				
ANR	5602044	CallExpression	stat . Stat ( fileno ( m_global_fp ) )		5602011	0					
ANR	5602045	Callee	stat . Stat		5602011	0					
ANR	5602046	MemberAccess	stat . Stat		5602011	0					
ANR	5602047	Identifier	stat		5602011	0					
ANR	5602048	Identifier	Stat		5602011	1					
ANR	5602049	ArgumentList	fileno ( m_global_fp )		5602011	1					
ANR	5602050	Argument	fileno ( m_global_fp )		5602011	0					
ANR	5602051	CallExpression	fileno ( m_global_fp )		5602011	0					
ANR	5602052	Callee	fileno		5602011	0					
ANR	5602053	Identifier	fileno		5602011	0					
ANR	5602054	ArgumentList	m_global_fp		5602011	1					
ANR	5602055	Argument	m_global_fp		5602011	0					
ANR	5602056	Identifier	m_global_fp		5602011	0					
ANR	5602057	CompoundStatement		10:40:184:184	5602011	1					
ANR	5602058	ReturnStatement	return false ;	930:3:22956:22968	5602011	0	True				
ANR	5602059	Identifier	false		5602011	0					
ANR	5602060	ElseStatement	else		5602011	0					
ANR	5602061	CompoundStatement		14:6:216:216	5602011	0					
ANR	5602062	IfStatement	if ( stat . Stat ( m_global_path ) )		5602011	0					
ANR	5602063	Condition	stat . Stat ( m_global_path )	934:7:22992:23015	5602011	0	True				
ANR	5602064	CallExpression	stat . Stat ( m_global_path )		5602011	0					
ANR	5602065	Callee	stat . Stat		5602011	0					
ANR	5602066	MemberAccess	stat . Stat		5602011	0					
ANR	5602067	Identifier	stat		5602011	0					
ANR	5602068	Identifier	Stat		5602011	1					
ANR	5602069	ArgumentList	m_global_path		5602011	1					
ANR	5602070	Argument	m_global_path		5602011	0					
ANR	5602071	Identifier	m_global_path		5602011	0					
ANR	5602072	CompoundStatement		15:34:252:252	5602011	1					
ANR	5602073	ReturnStatement	return false ;	935:3:23024:23036	5602011	0	True				
ANR	5602074	Identifier	false		5602011	0					
ANR	5602075	ExpressionStatement	size = ( unsigned long ) stat . GetBuf ( ) -> st_size	938:1:23046:23091	5602011	3	True				
ANR	5602076	AssignmentExpression	size = ( unsigned long ) stat . GetBuf ( ) -> st_size		5602011	0		=			
ANR	5602077	Identifier	size		5602011	0					
ANR	5602078	CastExpression	( unsigned long ) stat . GetBuf ( ) -> st_size		5602011	1					
ANR	5602079	CastTarget	unsigned long		5602011	0					
ANR	5602080	PtrMemberAccess	stat . GetBuf ( ) -> st_size		5602011	1					
ANR	5602081	CallExpression	stat . GetBuf ( )		5602011	0					
ANR	5602082	Callee	stat . GetBuf		5602011	0					
ANR	5602083	MemberAccess	stat . GetBuf		5602011	0					
ANR	5602084	Identifier	stat		5602011	0					
ANR	5602085	Identifier	GetBuf		5602011	1					
ANR	5602086	ArgumentList			5602011	1					
ANR	5602087	Identifier	st_size		5602011	1					
ANR	5602088	ReturnStatement	return true ;	939:1:23094:23105	5602011	4	True				
ANR	5602089	Identifier	true		5602011	0					
ANR	5602090	ReturnType	bool		5602011	1					
ANR	5602091	Identifier	WriteUserLog :: getGlobalLogSize		5602011	2					
ANR	5602092	ParameterList	"unsigned long & size , bool use_fp"		5602011	3					
ANR	5602093	Parameter	unsigned long & size	919:32:22731:22749	5602011	0	True				
ANR	5602094	ParameterType	unsigned long &		5602011	0					
ANR	5602095	Identifier	size		5602011	1					
ANR	5602096	Parameter	bool use_fp	919:53:22752:22762	5602011	1	True				
ANR	5602097	ParameterType	bool		5602011	0					
ANR	5602098	Identifier	use_fp		5602011	1					
ANR	5602099	CFGEntryNode	ENTRY		5602011		True				
ANR	5602100	CFGExitNode	EXIT		5602011		True				
ANR	5602101	Symbol	stat		5602011						
ANR	5602102	Symbol	m_global_path		5602011						
ANR	5602103	Symbol	use_fp		5602011						
ANR	5602104	Symbol	false		5602011						
ANR	5602105	Symbol	m_global_close		5602011						
ANR	5602106	Symbol	* stat		5602011						
ANR	5602107	Symbol	stat . GetBuf ( ) -> st_size		5602011						
ANR	5602108	Symbol	size		5602011						
ANR	5602109	Symbol	m_global_fp		5602011						
ANR	5602110	Symbol	fileno		5602011						
ANR	5602111	Symbol	stat . Stat		5602011						
ANR	5602112	Symbol	true		5602011						
ANR	5602113	Symbol	stat . GetBuf		5602011						
ANR	5602114	Symbol	* stat . GetBuf		5602011						
ANR	5602115	Function	WriteUserLog :: globalLogRotated	942:0:23110:23536							
ANR	5602116	FunctionDef	WriteUserLog :: globalLogRotated (ReadUserLogHeader & reader)		5602115	0					
ANR	5602117	CompoundStatement		944:0:23175:23536	5602115	0					
ANR	5602118	ExpressionStatement	"openGlobalLog ( true , reader )"	949:1:23305:23334	5602115	0	True				
ANR	5602119	CallExpression	"openGlobalLog ( true , reader )"		5602115	0					
ANR	5602120	Callee	openGlobalLog		5602115	0					
ANR	5602121	Identifier	openGlobalLog		5602115	0					
ANR	5602122	ArgumentList	true		5602115	1					
ANR	5602123	Argument	true		5602115	0					
ANR	5602124	Identifier	true		5602115	0					
ANR	5602125	Argument	reader		5602115	1					
ANR	5602126	Identifier	reader		5602115	0					
ANR	5602127	IfStatement	if ( m_global_lock )		5602115	1					
ANR	5602128	Condition	m_global_lock	950:6:23342:23354	5602115	0	True				
ANR	5602129	Identifier	m_global_lock		5602115	0					
ANR	5602130	CompoundStatement		7:22:182:182	5602115	1					
ANR	5602131	ExpressionStatement	m_global_lock -> obtain ( WRITE_LOCK )	951:2:23362:23395	5602115	0	True				
ANR	5602132	CallExpression	m_global_lock -> obtain ( WRITE_LOCK )		5602115	0					
ANR	5602133	Callee	m_global_lock -> obtain		5602115	0					
ANR	5602134	PtrMemberAccess	m_global_lock -> obtain		5602115	0					
ANR	5602135	Identifier	m_global_lock		5602115	0					
ANR	5602136	Identifier	obtain		5602115	1					
ANR	5602137	ArgumentList	WRITE_LOCK		5602115	1					
ANR	5602138	Argument	WRITE_LOCK		5602115	0					
ANR	5602139	Identifier	WRITE_LOCK		5602115	0					
ANR	5602140	IfStatement	if ( ! updateGlobalStat ( ) )		5602115	1					
ANR	5602141	Condition	! updateGlobalStat ( )	952:7:23404:23422	5602115	0	True				
ANR	5602142	UnaryOperationExpression	! updateGlobalStat ( )		5602115	0					
ANR	5602143	UnaryOperator	!		5602115	0					
ANR	5602144	CallExpression	updateGlobalStat ( )		5602115	1					
ANR	5602145	Callee	updateGlobalStat		5602115	0					
ANR	5602146	Identifier	updateGlobalStat		5602115	0					
ANR	5602147	ArgumentList			5602115	1					
ANR	5602148	CompoundStatement		9:29:250:250	5602115	1					
ANR	5602149	ExpressionStatement	m_global_state -> Clear ( )	953:3:23431:23455	5602115	0	True				
ANR	5602150	CallExpression	m_global_state -> Clear ( )		5602115	0					
ANR	5602151	Callee	m_global_state -> Clear		5602115	0					
ANR	5602152	PtrMemberAccess	m_global_state -> Clear		5602115	0					
ANR	5602153	Identifier	m_global_state		5602115	0					
ANR	5602154	Identifier	Clear		5602115	1					
ANR	5602155	ArgumentList			5602115	1					
ANR	5602156	ElseStatement	else		5602115	0					
ANR	5602157	CompoundStatement		12:7:292:292	5602115	0					
ANR	5602158	ExpressionStatement	m_global_state -> Update ( * m_global_stat )	956:3:23473:23513	5602115	0	True				
ANR	5602159	CallExpression	m_global_state -> Update ( * m_global_stat )		5602115	0					
ANR	5602160	Callee	m_global_state -> Update		5602115	0					
ANR	5602161	PtrMemberAccess	m_global_state -> Update		5602115	0					
ANR	5602162	Identifier	m_global_state		5602115	0					
ANR	5602163	Identifier	Update		5602115	1					
ANR	5602164	ArgumentList	* m_global_stat		5602115	1					
ANR	5602165	Argument	* m_global_stat		5602115	0					
ANR	5602166	UnaryOperationExpression	* m_global_stat		5602115	0					
ANR	5602167	UnaryOperator	*		5602115	0					
ANR	5602168	Identifier	m_global_stat		5602115	1					
ANR	5602169	ReturnStatement	return true ;	959:1:23523:23534	5602115	2	True				
ANR	5602170	Identifier	true		5602115	0					
ANR	5602171	ReturnType	bool		5602115	1					
ANR	5602172	Identifier	WriteUserLog :: globalLogRotated		5602115	2					
ANR	5602173	ParameterList	ReadUserLogHeader & reader		5602115	3					
ANR	5602174	Parameter	ReadUserLogHeader & reader	943:32:23147:23171	5602115	0	True				
ANR	5602175	ParameterType	ReadUserLogHeader &		5602115	0					
ANR	5602176	Identifier	reader		5602115	1					
ANR	5602177	CFGEntryNode	ENTRY		5602115		True				
ANR	5602178	CFGExitNode	EXIT		5602115		True				
ANR	5602179	Symbol	m_global_state		5602115						
ANR	5602180	Symbol	m_global_stat		5602115						
ANR	5602181	Symbol	WRITE_LOCK		5602115						
ANR	5602182	Symbol	reader		5602115						
ANR	5602183	Symbol	true		5602115						
ANR	5602184	Symbol	updateGlobalStat		5602115						
ANR	5602185	Symbol	* m_global_stat		5602115						
ANR	5602186	Symbol	m_global_lock		5602115						
ANR	5602187	Function	WriteUserLog :: doRotation	962:0:23539:24566							
ANR	5602188	FunctionDef	"WriteUserLog :: doRotation (const char * path , FILE * & fp , MyString & rotated , int max_rotations)"		5602187	0					
ANR	5602189	CompoundStatement		965:0:23645:24566	5602187	0					
ANR	5602190	IdentifierDeclStatement	int num_rotations = 0 ;	967:1:23649:23671	5602187	0	True				
ANR	5602191	IdentifierDecl	num_rotations = 0		5602187	0					
ANR	5602192	IdentifierDeclType	int		5602187	0					
ANR	5602193	Identifier	num_rotations		5602187	1					
ANR	5602194	AssignmentExpression	num_rotations = 0		5602187	2		=			
ANR	5602195	Identifier	num_rotations		5602187	0					
ANR	5602196	PrimaryExpression	0		5602187	1					
ANR	5602197	ExpressionStatement	rotated = path	968:1:23674:23688	5602187	1	True				
ANR	5602198	AssignmentExpression	rotated = path		5602187	0		=			
ANR	5602199	Identifier	rotated		5602187	0					
ANR	5602200	Identifier	path		5602187	1					
ANR	5602201	IfStatement	if ( 1 == max_rotations )		5602187	2					
ANR	5602202	Condition	1 == max_rotations	969:6:23696:23713	5602187	0	True				
ANR	5602203	EqualityExpression	1 == max_rotations		5602187	0		==			
ANR	5602204	PrimaryExpression	1		5602187	0					
ANR	5602205	Identifier	max_rotations		5602187	1					
ANR	5602206	CompoundStatement		5:27:71:71	5602187	1					
ANR	5602207	ExpressionStatement	"rotated += "".old"""	970:2:23721:23738	5602187	0	True				
ANR	5602208	AssignmentExpression	"rotated += "".old"""		5602187	0		+=			
ANR	5602209	Identifier	rotated		5602187	0					
ANR	5602210	PrimaryExpression	""".old"""		5602187	1					
ANR	5602211	ElseStatement	else		5602187	0					
ANR	5602212	CompoundStatement		8:6:103:103	5602187	0					
ANR	5602213	ExpressionStatement	"rotated += "".1"""	973:2:23753:23768	5602187	0	True				
ANR	5602214	AssignmentExpression	"rotated += "".1"""		5602187	0		+=			
ANR	5602215	Identifier	rotated		5602187	0					
ANR	5602216	PrimaryExpression	""".1"""		5602187	1					
ANR	5602217	ForStatement	for ( int i = max_rotations ; i > 1 ; i -- )		5602187	1					
ANR	5602218	ForInit	int i = max_rotations ;	974:7:23777:23796	5602187	0	True				
ANR	5602219	IdentifierDeclStatement	int i = max_rotations ;		5602187	0					
ANR	5602220	IdentifierDecl	i = max_rotations		5602187	0					
ANR	5602221	IdentifierDeclType	int		5602187	0					
ANR	5602222	Identifier	i		5602187	1					
ANR	5602223	AssignmentExpression	i = max_rotations		5602187	2		=			
ANR	5602224	Identifier	max_rotations		5602187	0					
ANR	5602225	Identifier	max_rotations		5602187	1					
ANR	5602226	Condition	i > 1	974:29:23799:23801	5602187	1	True				
ANR	5602227	RelationalExpression	i > 1		5602187	0		>			
ANR	5602228	Identifier	i		5602187	0					
ANR	5602229	PrimaryExpression	1		5602187	1					
ANR	5602230	PostIncDecOperationExpression	i --	974:35:23805:23807	5602187	2	True				
ANR	5602231	Identifier	i		5602187	0					
ANR	5602232	IncDec	--		5602187	1					
ANR	5602233	CompoundStatement		14:3:230:277	5602187	3					
ANR	5602234	IdentifierDeclStatement	MyString old1 ( path ) ;	975:3:23815:23836	5602187	0	True				
ANR	5602235	IdentifierDecl	old1 ( path )		5602187	0					
ANR	5602236	IdentifierDeclType	MyString		5602187	0					
ANR	5602237	Identifier	old1		5602187	1					
ANR	5602238	Identifier	path		5602187	2					
ANR	5602239	ExpressionStatement	"old1 . sprintf_cat ( "".%d"" , i - 1 )"	976:3:23841:23870	5602187	1	True				
ANR	5602240	CallExpression	"old1 . sprintf_cat ( "".%d"" , i - 1 )"		5602187	0					
ANR	5602241	Callee	old1 . sprintf_cat		5602187	0					
ANR	5602242	MemberAccess	old1 . sprintf_cat		5602187	0					
ANR	5602243	Identifier	old1		5602187	0					
ANR	5602244	Identifier	sprintf_cat		5602187	1					
ANR	5602245	ArgumentList	""".%d"""		5602187	1					
ANR	5602246	Argument	""".%d"""		5602187	0					
ANR	5602247	PrimaryExpression	""".%d"""		5602187	0					
ANR	5602248	Argument	i - 1		5602187	1					
ANR	5602249	AdditiveExpression	i - 1		5602187	0		-			
ANR	5602250	Identifier	i		5602187	0					
ANR	5602251	PrimaryExpression	1		5602187	1					
ANR	5602252	IdentifierDeclStatement	"StatWrapper s ( old1 , StatWrapper :: STATOP_STAT ) ;"	978:3:23876:23923	5602187	2	True				
ANR	5602253	IdentifierDecl	"s ( old1 , StatWrapper :: STATOP_STAT )"		5602187	0					
ANR	5602254	IdentifierDeclType	StatWrapper		5602187	0					
ANR	5602255	Identifier	s		5602187	1					
ANR	5602256	Expression	"old1 , StatWrapper :: STATOP_STAT"		5602187	2					
ANR	5602257	Identifier	old1		5602187	0					
ANR	5602258	Identifier	StatWrapper :: STATOP_STAT		5602187	1					
ANR	5602259	IfStatement	if ( 0 == s . GetRc ( ) )		5602187	3					
ANR	5602260	Condition	0 == s . GetRc ( )	979:8:23933:23946	5602187	0	True				
ANR	5602261	EqualityExpression	0 == s . GetRc ( )		5602187	0		==			
ANR	5602262	PrimaryExpression	0		5602187	0					
ANR	5602263	CallExpression	s . GetRc ( )		5602187	1					
ANR	5602264	Callee	s . GetRc		5602187	0					
ANR	5602265	MemberAccess	s . GetRc		5602187	0					
ANR	5602266	Identifier	s		5602187	0					
ANR	5602267	Identifier	GetRc		5602187	1					
ANR	5602268	ArgumentList			5602187	1					
ANR	5602269	CompoundStatement		16:4:310:331	5602187	1					
ANR	5602270	IdentifierDeclStatement	MyString old2 ( path ) ;	980:4:23956:23977	5602187	0	True				
ANR	5602271	IdentifierDecl	old2 ( path )		5602187	0					
ANR	5602272	IdentifierDeclType	MyString		5602187	0					
ANR	5602273	Identifier	old2		5602187	1					
ANR	5602274	Identifier	path		5602187	2					
ANR	5602275	ExpressionStatement	"old2 . sprintf_cat ( "".%d"" , i )"	981:4:23983:24010	5602187	1	True				
ANR	5602276	CallExpression	"old2 . sprintf_cat ( "".%d"" , i )"		5602187	0					
ANR	5602277	Callee	old2 . sprintf_cat		5602187	0					
ANR	5602278	MemberAccess	old2 . sprintf_cat		5602187	0					
ANR	5602279	Identifier	old2		5602187	0					
ANR	5602280	Identifier	sprintf_cat		5602187	1					
ANR	5602281	ArgumentList	""".%d"""		5602187	1					
ANR	5602282	Argument	""".%d"""		5602187	0					
ANR	5602283	PrimaryExpression	""".%d"""		5602187	0					
ANR	5602284	Argument	i		5602187	1					
ANR	5602285	Identifier	i		5602187	0					
ANR	5602286	ExpressionStatement	"rename ( old1 . Value ( ) , old2 . Value ( ) )"	982:4:24016:24052	5602187	2	True				
ANR	5602287	CallExpression	"rename ( old1 . Value ( ) , old2 . Value ( ) )"		5602187	0					
ANR	5602288	Callee	rename		5602187	0					
ANR	5602289	Identifier	rename		5602187	0					
ANR	5602290	ArgumentList	old1 . Value ( )		5602187	1					
ANR	5602291	Argument	old1 . Value ( )		5602187	0					
ANR	5602292	CallExpression	old1 . Value ( )		5602187	0					
ANR	5602293	Callee	old1 . Value		5602187	0					
ANR	5602294	MemberAccess	old1 . Value		5602187	0					
ANR	5602295	Identifier	old1		5602187	0					
ANR	5602296	Identifier	Value		5602187	1					
ANR	5602297	ArgumentList			5602187	1					
ANR	5602298	Argument	old2 . Value ( )		5602187	1					
ANR	5602299	CallExpression	old2 . Value ( )		5602187	0					
ANR	5602300	Callee	old2 . Value		5602187	0					
ANR	5602301	MemberAccess	old2 . Value		5602187	0					
ANR	5602302	Identifier	old2		5602187	0					
ANR	5602303	Identifier	Value		5602187	1					
ANR	5602304	ArgumentList			5602187	1					
ANR	5602305	ExpressionStatement	num_rotations ++	983:4:24058:24073	5602187	3	True				
ANR	5602306	PostIncDecOperationExpression	num_rotations ++		5602187	0					
ANR	5602307	Identifier	num_rotations		5602187	0					
ANR	5602308	IncDec	++		5602187	1					
ANR	5602309	Statement	ifdef	988:2:24090:24094	5602187	3	True				
ANR	5602310	Statement	WIN32	988:8:24096:24100	5602187	4	True				
ANR	5602311	IfStatement	if ( fp )		5602187	5					
ANR	5602312	Condition	fp	990:6:24149:24150	5602187	0	True				
ANR	5602313	Identifier	fp		5602187	0					
ANR	5602314	CompoundStatement		26:10:507:507	5602187	1					
ANR	5602315	ExpressionStatement	fclose ( fp )	991:2:24157:24169	5602187	0	True				
ANR	5602316	CallExpression	fclose ( fp )		5602187	0					
ANR	5602317	Callee	fclose		5602187	0					
ANR	5602318	Identifier	fclose		5602187	0					
ANR	5602319	ArgumentList	fp		5602187	1					
ANR	5602320	Argument	fp		5602187	0					
ANR	5602321	Identifier	fp		5602187	0					
ANR	5602322	ExpressionStatement	fp = NULL	992:2:24173:24182	5602187	1	True				
ANR	5602323	AssignmentExpression	fp = NULL		5602187	0		=			
ANR	5602324	Identifier	fp		5602187	0					
ANR	5602325	Identifier	NULL		5602187	1					
ANR	5602326	ElseStatement	else		5602187	0					
ANR	5602327	ExpressionStatement	( void ) fp	995:1:24195:24204	5602187	0	True				
ANR	5602328	CastExpression	( void ) fp		5602187	0					
ANR	5602329	CastTarget	void		5602187	0					
ANR	5602330	Identifier	fp		5602187	1					
ANR	5602331	IdentifierDeclStatement	endif UtcTime before ( true ) ;	996:2:24236:24280	5602187	6	True				
ANR	5602332	IdentifierDecl	before ( true )		5602187	0					
ANR	5602333	IdentifierDeclType	endif UtcTime		5602187	0					
ANR	5602334	Identifier	before		5602187	1					
ANR	5602335	Identifier	true		5602187	2					
ANR	5602336	IfStatement	"if ( rotate_file ( path , rotated . Value ( ) ) == 0 )"		5602187	7					
ANR	5602337	Condition	"rotate_file ( path , rotated . Value ( ) ) == 0"	1001:6:24289:24328	5602187	0	True				
ANR	5602338	EqualityExpression	"rotate_file ( path , rotated . Value ( ) ) == 0"		5602187	0		==			
ANR	5602339	CallExpression	"rotate_file ( path , rotated . Value ( ) )"		5602187	0					
ANR	5602340	Callee	rotate_file		5602187	0					
ANR	5602341	Identifier	rotate_file		5602187	0					
ANR	5602342	ArgumentList	path		5602187	1					
ANR	5602343	Argument	path		5602187	0					
ANR	5602344	Identifier	path		5602187	0					
ANR	5602345	Argument	rotated . Value ( )		5602187	1					
ANR	5602346	CallExpression	rotated . Value ( )		5602187	0					
ANR	5602347	Callee	rotated . Value		5602187	0					
ANR	5602348	MemberAccess	rotated . Value		5602187	0					
ANR	5602349	Identifier	rotated		5602187	0					
ANR	5602350	Identifier	Value		5602187	1					
ANR	5602351	ArgumentList			5602187	1					
ANR	5602352	PrimaryExpression	0		5602187	1					
ANR	5602353	CompoundStatement		38:2:690:709	5602187	1					
ANR	5602354	IdentifierDeclStatement	UtcTime after ( true ) ;	1002:2:24336:24355	5602187	0	True				
ANR	5602355	IdentifierDecl	after ( true )		5602187	0					
ANR	5602356	IdentifierDeclType	UtcTime		5602187	0					
ANR	5602357	Identifier	after		5602187	1					
ANR	5602358	Identifier	true		5602187	2					
ANR	5602359	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""WriteUserLog before .1 rot: %.6f\\n"" , before . combined ( ) )"	1003:2:24359:24437	5602187	1	True				
ANR	5602360	CallExpression	"dprintf ( D_FULLDEBUG , ""WriteUserLog before .1 rot: %.6f\\n"" , before . combined ( ) )"		5602187	0					
ANR	5602361	Callee	dprintf		5602187	0					
ANR	5602362	Identifier	dprintf		5602187	0					
ANR	5602363	ArgumentList	D_FULLDEBUG		5602187	1					
ANR	5602364	Argument	D_FULLDEBUG		5602187	0					
ANR	5602365	Identifier	D_FULLDEBUG		5602187	0					
ANR	5602366	Argument	"""WriteUserLog before .1 rot: %.6f\\n"""		5602187	1					
ANR	5602367	PrimaryExpression	"""WriteUserLog before .1 rot: %.6f\\n"""		5602187	0					
ANR	5602368	Argument	before . combined ( )		5602187	2					
ANR	5602369	CallExpression	before . combined ( )		5602187	0					
ANR	5602370	Callee	before . combined		5602187	0					
ANR	5602371	MemberAccess	before . combined		5602187	0					
ANR	5602372	Identifier	before		5602187	0					
ANR	5602373	Identifier	combined		5602187	1					
ANR	5602374	ArgumentList			5602187	1					
ANR	5602375	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""WriteUserLog after  .1 rot: %.6f\\n"" , after . combined ( ) )"	1004:2:24441:24518	5602187	2	True				
ANR	5602376	CallExpression	"dprintf ( D_FULLDEBUG , ""WriteUserLog after  .1 rot: %.6f\\n"" , after . combined ( ) )"		5602187	0					
ANR	5602377	Callee	dprintf		5602187	0					
ANR	5602378	Identifier	dprintf		5602187	0					
ANR	5602379	ArgumentList	D_FULLDEBUG		5602187	1					
ANR	5602380	Argument	D_FULLDEBUG		5602187	0					
ANR	5602381	Identifier	D_FULLDEBUG		5602187	0					
ANR	5602382	Argument	"""WriteUserLog after  .1 rot: %.6f\\n"""		5602187	1					
ANR	5602383	PrimaryExpression	"""WriteUserLog after  .1 rot: %.6f\\n"""		5602187	0					
ANR	5602384	Argument	after . combined ( )		5602187	2					
ANR	5602385	CallExpression	after . combined ( )		5602187	0					
ANR	5602386	Callee	after . combined		5602187	0					
ANR	5602387	MemberAccess	after . combined		5602187	0					
ANR	5602388	Identifier	after		5602187	0					
ANR	5602389	Identifier	combined		5602187	1					
ANR	5602390	ArgumentList			5602187	1					
ANR	5602391	ExpressionStatement	num_rotations ++	1005:2:24522:24537	5602187	3	True				
ANR	5602392	PostIncDecOperationExpression	num_rotations ++		5602187	0					
ANR	5602393	Identifier	num_rotations		5602187	0					
ANR	5602394	IncDec	++		5602187	1					
ANR	5602395	ReturnStatement	return num_rotations ;	1008:1:24544:24564	5602187	8	True				
ANR	5602396	Identifier	num_rotations		5602187	0					
ANR	5602397	ReturnType	int		5602187	1					
ANR	5602398	Identifier	WriteUserLog :: doRotation		5602187	2					
ANR	5602399	ParameterList	"const char * path , FILE * & fp , MyString & rotated , int max_rotations"		5602187	3					
ANR	5602400	Parameter	const char * path	963:26:23569:23584	5602187	0	True				
ANR	5602401	ParameterType	const char *		5602187	0					
ANR	5602402	Identifier	path		5602187	1					
ANR	5602403	Parameter	FILE * & fp	963:44:23587:23595	5602187	1	True				
ANR	5602404	ParameterType	FILE * &		5602187	0					
ANR	5602405	Identifier	fp		5602187	1					
ANR	5602406	Parameter	MyString & rotated	964:8:23606:23622	5602187	2	True				
ANR	5602407	ParameterType	MyString &		5602187	0					
ANR	5602408	Identifier	rotated		5602187	1					
ANR	5602409	Parameter	int max_rotations	964:27:23625:23641	5602187	3	True				
ANR	5602410	ParameterType	int		5602187	0					
ANR	5602411	Identifier	max_rotations		5602187	1					
ANR	5602412	CFGEntryNode	ENTRY		5602187		True				
ANR	5602413	CFGExitNode	EXIT		5602187		True				
ANR	5602414	Symbol	NULL		5602187						
ANR	5602415	Symbol	before		5602187						
ANR	5602416	Symbol	rotated . Value		5602187						
ANR	5602417	Symbol	after . combined		5602187						
ANR	5602418	Symbol	rotated		5602187						
ANR	5602419	Symbol	i		5602187						
ANR	5602420	Symbol	fp		5602187						
ANR	5602421	Symbol	D_FULLDEBUG		5602187						
ANR	5602422	Symbol	max_rotations		5602187						
ANR	5602423	Symbol	path		5602187						
ANR	5602424	Symbol	old2 . Value		5602187						
ANR	5602425	Symbol	s		5602187						
ANR	5602426	Symbol	before . combined		5602187						
ANR	5602427	Symbol	rotate_file		5602187						
ANR	5602428	Symbol	num_rotations		5602187						
ANR	5602429	Symbol	after		5602187						
ANR	5602430	Symbol	s . GetRc		5602187						
ANR	5602431	Symbol	old1 . Value		5602187						
ANR	5602432	Symbol	old1		5602187						
ANR	5602433	Symbol	old2		5602187						
ANR	5602434	Function	WriteUserLog :: writeGlobalEvent	1012:0:24570:24820							
ANR	5602435	FunctionDef	"WriteUserLog :: writeGlobalEvent (ULogEvent & event , FILE * fp , bool is_header_event)"		5602434	0					
ANR	5602436	CompoundStatement		1016:0:24673:24820	5602434	0					
ANR	5602437	IfStatement	if ( NULL == fp )		5602434	0					
ANR	5602438	Condition	NULL == fp	1017:6:24681:24690	5602434	0	True				
ANR	5602439	EqualityExpression	NULL == fp		5602434	0		==			
ANR	5602440	Identifier	NULL		5602434	0					
ANR	5602441	Identifier	fp		5602434	1					
ANR	5602442	CompoundStatement		2:19:20:20	5602434	1					
ANR	5602443	ExpressionStatement	fp = m_global_fp	1018:2:24698:24714	5602434	0	True				
ANR	5602444	AssignmentExpression	fp = m_global_fp		5602434	0		=			
ANR	5602445	Identifier	fp		5602434	0					
ANR	5602446	Identifier	m_global_fp		5602434	1					
ANR	5602447	IfStatement	if ( is_header_event )		5602434	1					
ANR	5602448	Condition	is_header_event	1021:6:24726:24740	5602434	0	True				
ANR	5602449	Identifier	is_header_event		5602434	0					
ANR	5602450	CompoundStatement		6:24:70:70	5602434	1					
ANR	5602451	ExpressionStatement	rewind ( fp )	1022:2:24748:24760	5602434	0	True				
ANR	5602452	CallExpression	rewind ( fp )		5602434	0					
ANR	5602453	Callee	rewind		5602434	0					
ANR	5602454	Identifier	rewind		5602434	0					
ANR	5602455	ArgumentList	fp		5602434	1					
ANR	5602456	Argument	fp		5602434	0					
ANR	5602457	Identifier	fp		5602434	0					
ANR	5602458	ReturnStatement	"return doWriteEvent ( fp , & event , m_global_use_xml ) ;"	1025:1:24767:24818	5602434	2	True				
ANR	5602459	CallExpression	"doWriteEvent ( fp , & event , m_global_use_xml )"		5602434	0					
ANR	5602460	Callee	doWriteEvent		5602434	0					
ANR	5602461	Identifier	doWriteEvent		5602434	0					
ANR	5602462	ArgumentList	fp		5602434	1					
ANR	5602463	Argument	fp		5602434	0					
ANR	5602464	Identifier	fp		5602434	0					
ANR	5602465	Argument	& event		5602434	1					
ANR	5602466	UnaryOperationExpression	& event		5602434	0					
ANR	5602467	UnaryOperator	&		5602434	0					
ANR	5602468	Identifier	event		5602434	1					
ANR	5602469	Argument	m_global_use_xml		5602434	2					
ANR	5602470	Identifier	m_global_use_xml		5602434	0					
ANR	5602471	ReturnType	int		5602434	1					
ANR	5602472	Identifier	WriteUserLog :: writeGlobalEvent		5602434	2					
ANR	5602473	ParameterList	"ULogEvent & event , FILE * fp , bool is_header_event"		5602434	3					
ANR	5602474	Parameter	ULogEvent & event	1013:32:24606:24621	5602434	0	True				
ANR	5602475	ParameterType	ULogEvent &		5602434	0					
ANR	5602476	Identifier	event		5602434	1					
ANR	5602477	Parameter	FILE * fp	1014:8:24632:24639	5602434	1	True				
ANR	5602478	ParameterType	FILE *		5602434	0					
ANR	5602479	Identifier	fp		5602434	1					
ANR	5602480	Parameter	bool is_header_event	1015:8:24650:24669	5602434	2	True				
ANR	5602481	ParameterType	bool		5602434	0					
ANR	5602482	Identifier	is_header_event		5602434	1					
ANR	5602483	CFGEntryNode	ENTRY		5602434		True				
ANR	5602484	CFGExitNode	EXIT		5602434		True				
ANR	5602485	Symbol	NULL		5602434						
ANR	5602486	Symbol	m_global_fp		5602434						
ANR	5602487	Symbol	m_global_use_xml		5602434						
ANR	5602488	Symbol	is_header_event		5602434						
ANR	5602489	Symbol	fp		5602434						
ANR	5602490	Symbol	event		5602434						
ANR	5602491	Symbol	doWriteEvent		5602434						
ANR	5602492	Symbol	& event		5602434						
ANR	5602493	DeclStmt									
ANR	5602494	Decl							int	int	success
ANR	5602495	DeclStmt									
ANR	5602496	Decl							FILE	FILE *	fp
ANR	5602497	DeclStmt									
ANR	5602498	Decl							FileLockBase	FileLockBase *	lock
ANR	5602499	DeclStmt									
ANR	5602500	Decl							bool	bool	use_xml
ANR	5602501	DeclStmt									
ANR	5602502	Decl							priv_state	priv_state	priv
ANR	5602503	DeclStmt									
ANR	5602504	Decl							time_t	time_t	before
ANR	5602505	DeclStmt									
ANR	5602506	Decl							time_t	time_t	after
ANR	5602507	DeclStmt									
ANR	5602508	Decl							int	int	status
ANR	5602509	DeclStmt									
ANR	5602510	Decl							const char	const char *	whence
ANR	5602511	DeclStmt									
ANR	5602512	Decl							char	char *	fname
ANR	5602513	Function	WriteUserLog :: doWriteEvent	1154:0:28116:29131							
ANR	5602514	FunctionDef	"WriteUserLog :: doWriteEvent (FILE * fp , ULogEvent * event , bool use_xml)"		5602513	0					
ANR	5602515	CompoundStatement		1156:0:28192:29131	5602513	0					
ANR	5602516	IdentifierDeclStatement	ClassAd * eventAd = NULL ;	1157:1:28195:28218	5602513	0	True				
ANR	5602517	IdentifierDecl	* eventAd = NULL		5602513	0					
ANR	5602518	IdentifierDeclType	ClassAd *		5602513	0					
ANR	5602519	Identifier	eventAd		5602513	1					
ANR	5602520	AssignmentExpression	* eventAd = NULL		5602513	2		=			
ANR	5602521	Identifier	NULL		5602513	0					
ANR	5602522	Identifier	NULL		5602513	1					
ANR	5602523	IdentifierDeclStatement	bool success = true ;	1158:1:28221:28240	5602513	1	True				
ANR	5602524	IdentifierDecl	success = true		5602513	0					
ANR	5602525	IdentifierDeclType	bool		5602513	0					
ANR	5602526	Identifier	success		5602513	1					
ANR	5602527	AssignmentExpression	success = true		5602513	2		=			
ANR	5602528	Identifier	true		5602513	0					
ANR	5602529	Identifier	true		5602513	1					
ANR	5602530	IfStatement	if ( use_xml )		5602513	2					
ANR	5602531	Condition	use_xml	1160:5:28248:28254	5602513	0	True				
ANR	5602532	Identifier	use_xml		5602513	0					
ANR	5602533	CompoundStatement		5:15:65:65	5602513	1					
ANR	5602534	ExpressionStatement	eventAd = event -> toClassAd ( )	1162:2:28263:28291	5602513	0	True				
ANR	5602535	AssignmentExpression	eventAd = event -> toClassAd ( )		5602513	0		=			
ANR	5602536	Identifier	eventAd		5602513	0					
ANR	5602537	CallExpression	event -> toClassAd ( )		5602513	1					
ANR	5602538	Callee	event -> toClassAd		5602513	0					
ANR	5602539	PtrMemberAccess	event -> toClassAd		5602513	0					
ANR	5602540	Identifier	event		5602513	0					
ANR	5602541	Identifier	toClassAd		5602513	1					
ANR	5602542	ArgumentList			5602513	1					
ANR	5602543	IfStatement	if ( ! eventAd )		5602513	1					
ANR	5602544	Condition	! eventAd	1163:6:28333:28340	5602513	0	True				
ANR	5602545	UnaryOperationExpression	! eventAd		5602513	0					
ANR	5602546	UnaryOperator	!		5602513	0					
ANR	5602547	Identifier	eventAd		5602513	1					
ANR	5602548	CompoundStatement		8:16:150:150	5602513	1					
ANR	5602549	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog Failed to convert event type # %d to classAd.\\n"" , event -> eventNumber )"	1164:3:28348:28462	5602513	0	True				
ANR	5602550	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog Failed to convert event type # %d to classAd.\\n"" , event -> eventNumber )"		5602513	0					
ANR	5602551	Callee	dprintf		5602513	0					
ANR	5602552	Identifier	dprintf		5602513	0					
ANR	5602553	ArgumentList	D_ALWAYS		5602513	1					
ANR	5602554	Argument	D_ALWAYS		5602513	0					
ANR	5602555	Identifier	D_ALWAYS		5602513	0					
ANR	5602556	Argument	"""WriteUserLog Failed to convert event type # %d to classAd.\\n"""		5602513	1					
ANR	5602557	PrimaryExpression	"""WriteUserLog Failed to convert event type # %d to classAd.\\n"""		5602513	0					
ANR	5602558	Argument	event -> eventNumber		5602513	2					
ANR	5602559	PtrMemberAccess	event -> eventNumber		5602513	0					
ANR	5602560	Identifier	event		5602513	0					
ANR	5602561	Identifier	eventNumber		5602513	1					
ANR	5602562	ExpressionStatement	success = false	1167:3:28467:28482	5602513	1	True				
ANR	5602563	AssignmentExpression	success = false		5602513	0		=			
ANR	5602564	Identifier	success		5602513	0					
ANR	5602565	Identifier	false		5602513	1					
ANR	5602566	ElseStatement	else		5602513	0					
ANR	5602567	CompoundStatement		15:3:324:349	5602513	0					
ANR	5602568	IdentifierDeclStatement	MyString adXML ;	1169:3:28498:28512	5602513	0	True				
ANR	5602569	IdentifierDecl	adXML		5602513	0					
ANR	5602570	IdentifierDeclType	MyString		5602513	0					
ANR	5602571	Identifier	adXML		5602513	1					
ANR	5602572	IdentifierDeclStatement	ClassAdXMLUnparser xmlunp ;	1170:3:28517:28542	5602513	1	True				
ANR	5602573	IdentifierDecl	xmlunp		5602513	0					
ANR	5602574	IdentifierDeclType	ClassAdXMLUnparser		5602513	0					
ANR	5602575	Identifier	xmlunp		5602513	1					
ANR	5602576	ExpressionStatement	xmlunp . SetUseCompactSpacing ( false )	1171:3:28547:28581	5602513	2	True				
ANR	5602577	CallExpression	xmlunp . SetUseCompactSpacing ( false )		5602513	0					
ANR	5602578	Callee	xmlunp . SetUseCompactSpacing		5602513	0					
ANR	5602579	MemberAccess	xmlunp . SetUseCompactSpacing		5602513	0					
ANR	5602580	Identifier	xmlunp		5602513	0					
ANR	5602581	Identifier	SetUseCompactSpacing		5602513	1					
ANR	5602582	ArgumentList	false		5602513	1					
ANR	5602583	Argument	false		5602513	0					
ANR	5602584	Identifier	false		5602513	0					
ANR	5602585	ExpressionStatement	xmlunp . SetOutputTargetType ( false )	1172:3:28586:28619	5602513	3	True				
ANR	5602586	CallExpression	xmlunp . SetOutputTargetType ( false )		5602513	0					
ANR	5602587	Callee	xmlunp . SetOutputTargetType		5602513	0					
ANR	5602588	MemberAccess	xmlunp . SetOutputTargetType		5602513	0					
ANR	5602589	Identifier	xmlunp		5602513	0					
ANR	5602590	Identifier	SetOutputTargetType		5602513	1					
ANR	5602591	ArgumentList	false		5602513	1					
ANR	5602592	Argument	false		5602513	0					
ANR	5602593	Identifier	false		5602513	0					
ANR	5602594	ExpressionStatement	"xmlunp . Unparse ( eventAd , adXML )"	1173:3:28624:28654	5602513	4	True				
ANR	5602595	CallExpression	"xmlunp . Unparse ( eventAd , adXML )"		5602513	0					
ANR	5602596	Callee	xmlunp . Unparse		5602513	0					
ANR	5602597	MemberAccess	xmlunp . Unparse		5602513	0					
ANR	5602598	Identifier	xmlunp		5602513	0					
ANR	5602599	Identifier	Unparse		5602513	1					
ANR	5602600	ArgumentList	eventAd		5602513	1					
ANR	5602601	Argument	eventAd		5602513	0					
ANR	5602602	Identifier	eventAd		5602513	0					
ANR	5602603	Argument	adXML		5602513	1					
ANR	5602604	Identifier	adXML		5602513	0					
ANR	5602605	IfStatement	if ( adXML . Length ( ) < 1 )		5602513	5					
ANR	5602606	Condition	adXML . Length ( ) < 1	1174:8:28664:28681	5602513	0	True				
ANR	5602607	RelationalExpression	adXML . Length ( ) < 1		5602513	0		<			
ANR	5602608	CallExpression	adXML . Length ( )		5602513	0					
ANR	5602609	Callee	adXML . Length		5602513	0					
ANR	5602610	MemberAccess	adXML . Length		5602513	0					
ANR	5602611	Identifier	adXML		5602513	0					
ANR	5602612	Identifier	Length		5602513	1					
ANR	5602613	ArgumentList			5602513	1					
ANR	5602614	PrimaryExpression	1		5602513	1					
ANR	5602615	CompoundStatement		19:29:492:492	5602513	1					
ANR	5602616	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog Failed to convert event type # %d to XML.\\n"" , event -> eventNumber )"	1175:4:28691:28803	5602513	0	True				
ANR	5602617	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog Failed to convert event type # %d to XML.\\n"" , event -> eventNumber )"		5602513	0					
ANR	5602618	Callee	dprintf		5602513	0					
ANR	5602619	Identifier	dprintf		5602513	0					
ANR	5602620	ArgumentList	D_ALWAYS		5602513	1					
ANR	5602621	Argument	D_ALWAYS		5602513	0					
ANR	5602622	Identifier	D_ALWAYS		5602513	0					
ANR	5602623	Argument	"""WriteUserLog Failed to convert event type # %d to XML.\\n"""		5602513	1					
ANR	5602624	PrimaryExpression	"""WriteUserLog Failed to convert event type # %d to XML.\\n"""		5602513	0					
ANR	5602625	Argument	event -> eventNumber		5602513	2					
ANR	5602626	PtrMemberAccess	event -> eventNumber		5602513	0					
ANR	5602627	Identifier	event		5602513	0					
ANR	5602628	Identifier	eventNumber		5602513	1					
ANR	5602629	IfStatement	"if ( fprintf ( fp , adXML . Value ( ) ) < 0 )"		5602513	6					
ANR	5602630	Condition	"fprintf ( fp , adXML . Value ( ) ) < 0"	1179:7:28817:28848	5602513	0	True				
ANR	5602631	RelationalExpression	"fprintf ( fp , adXML . Value ( ) ) < 0"		5602513	0		<			
ANR	5602632	CallExpression	"fprintf ( fp , adXML . Value ( ) )"		5602513	0					
ANR	5602633	Callee	fprintf		5602513	0					
ANR	5602634	Identifier	fprintf		5602513	0					
ANR	5602635	ArgumentList	fp		5602513	1					
ANR	5602636	Argument	fp		5602513	0					
ANR	5602637	Identifier	fp		5602513	0					
ANR	5602638	Argument	adXML . Value ( )		5602513	1					
ANR	5602639	CallExpression	adXML . Value ( )		5602513	0					
ANR	5602640	Callee	adXML . Value		5602513	0					
ANR	5602641	MemberAccess	adXML . Value		5602513	0					
ANR	5602642	Identifier	adXML		5602513	0					
ANR	5602643	Identifier	Value		5602513	1					
ANR	5602644	ArgumentList			5602513	1					
ANR	5602645	PrimaryExpression	0		5602513	1					
ANR	5602646	CompoundStatement		24:41:658:658	5602513	1					
ANR	5602647	ExpressionStatement	success = false	1180:4:28857:28872	5602513	0	True				
ANR	5602648	AssignmentExpression	success = false		5602513	0		=			
ANR	5602649	Identifier	success		5602513	0					
ANR	5602650	Identifier	false		5602513	1					
ANR	5602651	ElseStatement	else		5602513	0					
ANR	5602652	CompoundStatement		26:10:691:691	5602513	0					
ANR	5602653	ExpressionStatement	success = true	1182:4:28890:28904	5602513	0	True				
ANR	5602654	AssignmentExpression	success = true		5602513	0		=			
ANR	5602655	Identifier	success		5602513	0					
ANR	5602656	Identifier	true		5602513	1					
ANR	5602657	ElseStatement	else		5602513	0					
ANR	5602658	CompoundStatement		30:8:730:730	5602513	0					
ANR	5602659	ExpressionStatement	success = event -> putEvent ( fp )	1186:2:28927:28958	5602513	0	True				
ANR	5602660	AssignmentExpression	success = event -> putEvent ( fp )		5602513	0		=			
ANR	5602661	Identifier	success		5602513	0					
ANR	5602662	CallExpression	event -> putEvent ( fp )		5602513	1					
ANR	5602663	Callee	event -> putEvent		5602513	0					
ANR	5602664	PtrMemberAccess	event -> putEvent		5602513	0					
ANR	5602665	Identifier	event		5602513	0					
ANR	5602666	Identifier	putEvent		5602513	1					
ANR	5602667	ArgumentList	fp		5602513	1					
ANR	5602668	Argument	fp		5602513	0					
ANR	5602669	Identifier	fp		5602513	0					
ANR	5602670	IfStatement	if ( ! success )		5602513	1					
ANR	5602671	Condition	! success	1187:6:28966:28973	5602513	0	True				
ANR	5602672	UnaryOperationExpression	! success		5602513	0					
ANR	5602673	UnaryOperator	!		5602513	0					
ANR	5602674	Identifier	success		5602513	1					
ANR	5602675	CompoundStatement		32:16:783:783	5602513	1					
ANR	5602676	ExpressionStatement	"fputc ( '\\n' , fp )"	1188:3:28981:28997	5602513	0	True				
ANR	5602677	CallExpression	"fputc ( '\\n' , fp )"		5602513	0					
ANR	5602678	Callee	fputc		5602513	0					
ANR	5602679	Identifier	fputc		5602513	0					
ANR	5602680	ArgumentList	'\\n'		5602513	1					
ANR	5602681	Argument	'\\n'		5602513	0					
ANR	5602682	PrimaryExpression	'\\n'		5602513	0					
ANR	5602683	Argument	fp		5602513	1					
ANR	5602684	Identifier	fp		5602513	0					
ANR	5602685	IfStatement	"if ( fprintf ( fp , SynchDelimiter ) < 0 )"		5602513	2					
ANR	5602686	Condition	"fprintf ( fp , SynchDelimiter ) < 0"	1190:6:29009:29041	5602513	0	True				
ANR	5602687	RelationalExpression	"fprintf ( fp , SynchDelimiter ) < 0"		5602513	0		<			
ANR	5602688	CallExpression	"fprintf ( fp , SynchDelimiter )"		5602513	0					
ANR	5602689	Callee	fprintf		5602513	0					
ANR	5602690	Identifier	fprintf		5602513	0					
ANR	5602691	ArgumentList	fp		5602513	1					
ANR	5602692	Argument	fp		5602513	0					
ANR	5602693	Identifier	fp		5602513	0					
ANR	5602694	Argument	SynchDelimiter		5602513	1					
ANR	5602695	Identifier	SynchDelimiter		5602513	0					
ANR	5602696	PrimaryExpression	0		5602513	1					
ANR	5602697	CompoundStatement		35:41:851:851	5602513	1					
ANR	5602698	ExpressionStatement	success = false	1191:3:29049:29064	5602513	0	True				
ANR	5602699	AssignmentExpression	success = false		5602513	0		=			
ANR	5602700	Identifier	success		5602513	0					
ANR	5602701	Identifier	false		5602513	1					
ANR	5602702	IfStatement	if ( eventAd )		5602513	3					
ANR	5602703	Condition	eventAd	1195:6:29080:29086	5602513	0	True				
ANR	5602704	Identifier	eventAd		5602513	0					
ANR	5602705	CompoundStatement		40:16:897:897	5602513	1					
ANR	5602706	Statement	delete	1196:2:29094:29099	5602513	0	True				
ANR	5602707	ExpressionStatement	eventAd	1196:9:29101:29108	5602513	1	True				
ANR	5602708	Identifier	eventAd		5602513	0					
ANR	5602709	ReturnStatement	return success ;	1199:1:29115:29129	5602513	4	True				
ANR	5602710	Identifier	success		5602513	0					
ANR	5602711	ReturnType	bool		5602513	1					
ANR	5602712	Identifier	WriteUserLog :: doWriteEvent		5602513	2					
ANR	5602713	ParameterList	"FILE * fp , ULogEvent * event , bool use_xml"		5602513	3					
ANR	5602714	Parameter	FILE * fp	1155:28:28149:28156	5602513	0	True				
ANR	5602715	ParameterType	FILE *		5602513	0					
ANR	5602716	Identifier	fp		5602513	1					
ANR	5602717	Parameter	ULogEvent * event	1155:38:28159:28174	5602513	1	True				
ANR	5602718	ParameterType	ULogEvent *		5602513	0					
ANR	5602719	Identifier	event		5602513	1					
ANR	5602720	Parameter	bool use_xml	1155:56:28177:28188	5602513	2	True				
ANR	5602721	ParameterType	bool		5602513	0					
ANR	5602722	Identifier	use_xml		5602513	1					
ANR	5602723	CFGEntryNode	ENTRY		5602513		True				
ANR	5602724	CFGExitNode	EXIT		5602513		True				
ANR	5602725	Symbol	NULL		5602513						
ANR	5602726	Symbol	* event		5602513						
ANR	5602727	Symbol	D_ALWAYS		5602513						
ANR	5602728	Symbol	false		5602513						
ANR	5602729	Symbol	eventAd		5602513						
ANR	5602730	Symbol	fp		5602513						
ANR	5602731	Symbol	adXML . Value		5602513						
ANR	5602732	Symbol	SynchDelimiter		5602513						
ANR	5602733	Symbol	use_xml		5602513						
ANR	5602734	Symbol	fprintf		5602513						
ANR	5602735	Symbol	event -> toClassAd		5602513						
ANR	5602736	Symbol	adXML		5602513						
ANR	5602737	Symbol	success		5602513						
ANR	5602738	Symbol	true		5602513						
ANR	5602739	Symbol	xmlunp		5602513						
ANR	5602740	Symbol	adXML . Length		5602513						
ANR	5602741	Symbol	event -> putEvent		5602513						
ANR	5602742	Symbol	event		5602513						
ANR	5602743	Symbol	event -> eventNumber		5602513						
ANR	5602744	Function	WriteUserLog :: writeEvent	1205:0:29179:31199							
ANR	5602745	FunctionDef	"WriteUserLog :: writeEvent (ULogEvent * event , ClassAd * param_jobad , bool * written)"		5602744	0					
ANR	5602746	CompoundStatement		1209:0:29285:31199	5602744	0					
ANR	5602747	IfStatement	if ( written )		5602744	0					
ANR	5602748	Condition	written	1211:6:29326:29332	5602744	0	True				
ANR	5602749	Identifier	written		5602744	0					
ANR	5602750	CompoundStatement		3:16:50:50	5602744	1					
ANR	5602751	ExpressionStatement	* written = false	1212:2:29340:29356	5602744	0	True				
ANR	5602752	AssignmentExpression	* written = false		5602744	0		=			
ANR	5602753	UnaryOperationExpression	* written		5602744	0					
ANR	5602754	UnaryOperator	*		5602744	0					
ANR	5602755	Identifier	written		5602744	1					
ANR	5602756	Identifier	false		5602744	1					
ANR	5602757	IfStatement	if ( ! m_initialized )		5602744	1					
ANR	5602758	Condition	! m_initialized	1216:6:29436:29449	5602744	0	True				
ANR	5602759	UnaryOperationExpression	! m_initialized		5602744	0					
ANR	5602760	UnaryOperator	!		5602744	0					
ANR	5602761	Identifier	m_initialized		5602744	1					
ANR	5602762	CompoundStatement		8:23:167:167	5602744	1					
ANR	5602763	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""WriteUserLog: not initialized @ writeEvent()\\n"" )"	1217:2:29457:29534	5602744	0	True				
ANR	5602764	CallExpression	"dprintf ( D_FULLDEBUG , ""WriteUserLog: not initialized @ writeEvent()\\n"" )"		5602744	0					
ANR	5602765	Callee	dprintf		5602744	0					
ANR	5602766	Identifier	dprintf		5602744	0					
ANR	5602767	ArgumentList	D_FULLDEBUG		5602744	1					
ANR	5602768	Argument	D_FULLDEBUG		5602744	0					
ANR	5602769	Identifier	D_FULLDEBUG		5602744	0					
ANR	5602770	Argument	"""WriteUserLog: not initialized @ writeEvent()\\n"""		5602744	1					
ANR	5602771	PrimaryExpression	"""WriteUserLog: not initialized @ writeEvent()\\n"""		5602744	0					
ANR	5602772	ReturnStatement	return true ;	1219:2:29538:29549	5602744	1	True				
ANR	5602773	Identifier	true		5602744	0					
ANR	5602774	IfStatement	if ( ! event )		5602744	2					
ANR	5602775	Condition	! event	1223:5:29622:29627	5602744	0	True				
ANR	5602776	UnaryOperationExpression	! event		5602744	0					
ANR	5602777	UnaryOperator	!		5602744	0					
ANR	5602778	Identifier	event		5602744	1					
ANR	5602779	CompoundStatement		15:13:344:344	5602744	1					
ANR	5602780	ReturnStatement	return false ;	1224:2:29634:29646	5602744	0	True				
ANR	5602781	Identifier	false		5602744	0					
ANR	5602782	IfStatement	if ( m_fp )		5602744	3					
ANR	5602783	Condition	m_fp	1226:5:29656:29659	5602744	0	True				
ANR	5602784	Identifier	m_fp		5602744	0					
ANR	5602785	CompoundStatement		18:11:376:376	5602744	1					
ANR	5602786	IfStatement	if ( ! m_lock )		5602744	0					
ANR	5602787	Condition	! m_lock	1227:6:29670:29676	5602744	0	True				
ANR	5602788	UnaryOperationExpression	! m_lock		5602744	0					
ANR	5602789	UnaryOperator	!		5602744	0					
ANR	5602790	Identifier	m_lock		5602744	1					
ANR	5602791	CompoundStatement		19:15:393:393	5602744	1					
ANR	5602792	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog: No user log lock!\\n"" )"	1228:3:29684:29740	5602744	0	True				
ANR	5602793	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog: No user log lock!\\n"" )"		5602744	0					
ANR	5602794	Callee	dprintf		5602744	0					
ANR	5602795	Identifier	dprintf		5602744	0					
ANR	5602796	ArgumentList	D_ALWAYS		5602744	1					
ANR	5602797	Argument	D_ALWAYS		5602744	0					
ANR	5602798	Identifier	D_ALWAYS		5602744	0					
ANR	5602799	Argument	"""WriteUserLog: No user log lock!\\n"""		5602744	1					
ANR	5602800	PrimaryExpression	"""WriteUserLog: No user log lock!\\n"""		5602744	0					
ANR	5602801	ReturnStatement	return false ;	1229:3:29745:29757	5602744	1	True				
ANR	5602802	Identifier	false		5602744	0					
ANR	5602803	IfStatement	if ( ! openGlobalLog ( false ) )		5602744	4					
ANR	5602804	Condition	! openGlobalLog ( false )	1234:6:29797:29817	5602744	0	True				
ANR	5602805	UnaryOperationExpression	! openGlobalLog ( false )		5602744	0					
ANR	5602806	UnaryOperator	!		5602744	0					
ANR	5602807	CallExpression	openGlobalLog ( false )		5602744	1					
ANR	5602808	Callee	openGlobalLog		5602744	0					
ANR	5602809	Identifier	openGlobalLog		5602744	0					
ANR	5602810	ArgumentList	false		5602744	1					
ANR	5602811	Argument	false		5602744	0					
ANR	5602812	Identifier	false		5602744	0					
ANR	5602813	CompoundStatement		26:30:535:535	5602744	1					
ANR	5602814	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog: Failed to open global log!\\n"" )"	1235:2:29825:29890	5602744	0	True				
ANR	5602815	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog: Failed to open global log!\\n"" )"		5602744	0					
ANR	5602816	Callee	dprintf		5602744	0					
ANR	5602817	Identifier	dprintf		5602744	0					
ANR	5602818	ArgumentList	D_ALWAYS		5602744	1					
ANR	5602819	Argument	D_ALWAYS		5602744	0					
ANR	5602820	Identifier	D_ALWAYS		5602744	0					
ANR	5602821	Argument	"""WriteUserLog: Failed to open global log!\\n"""		5602744	1					
ANR	5602822	PrimaryExpression	"""WriteUserLog: Failed to open global log!\\n"""		5602744	0					
ANR	5602823	ReturnStatement	return false ;	1236:2:29894:29906	5602744	1	True				
ANR	5602824	Identifier	false		5602744	0					
ANR	5602825	ExpressionStatement	event -> cluster = m_cluster	1240:1:29939:29965	5602744	5	True				
ANR	5602826	AssignmentExpression	event -> cluster = m_cluster		5602744	0		=			
ANR	5602827	PtrMemberAccess	event -> cluster		5602744	0					
ANR	5602828	Identifier	event		5602744	0					
ANR	5602829	Identifier	cluster		5602744	1					
ANR	5602830	Identifier	m_cluster		5602744	1					
ANR	5602831	ExpressionStatement	event -> proc = m_proc	1241:1:29968:29988	5602744	6	True				
ANR	5602832	AssignmentExpression	event -> proc = m_proc		5602744	0		=			
ANR	5602833	PtrMemberAccess	event -> proc		5602744	0					
ANR	5602834	Identifier	event		5602744	0					
ANR	5602835	Identifier	proc		5602744	1					
ANR	5602836	Identifier	m_proc		5602744	1					
ANR	5602837	ExpressionStatement	event -> subproc = m_subproc	1242:1:29991:30017	5602744	7	True				
ANR	5602838	AssignmentExpression	event -> subproc = m_subproc		5602744	0		=			
ANR	5602839	PtrMemberAccess	event -> subproc		5602744	0					
ANR	5602840	Identifier	event		5602744	0					
ANR	5602841	Identifier	subproc		5602744	1					
ANR	5602842	Identifier	m_subproc		5602744	1					
ANR	5602843	ExpressionStatement	event -> setGlobalJobId ( m_gjid )	1243:1:30020:30049	5602744	8	True				
ANR	5602844	CallExpression	event -> setGlobalJobId ( m_gjid )		5602744	0					
ANR	5602845	Callee	event -> setGlobalJobId		5602744	0					
ANR	5602846	PtrMemberAccess	event -> setGlobalJobId		5602744	0					
ANR	5602847	Identifier	event		5602744	0					
ANR	5602848	Identifier	setGlobalJobId		5602744	1					
ANR	5602849	ArgumentList	m_gjid		5602744	1					
ANR	5602850	Argument	m_gjid		5602744	0					
ANR	5602851	Identifier	m_gjid		5602744	0					
ANR	5602852	IfStatement	if ( ! m_global_disable && m_global_path )		5602744	9					
ANR	5602853	Condition	! m_global_disable && m_global_path	1246:6:30081:30114	5602744	0	True				
ANR	5602854	AndExpression	! m_global_disable && m_global_path		5602744	0		&&			
ANR	5602855	UnaryOperationExpression	! m_global_disable		5602744	0					
ANR	5602856	UnaryOperator	!		5602744	0					
ANR	5602857	Identifier	m_global_disable		5602744	1					
ANR	5602858	Identifier	m_global_path		5602744	1					
ANR	5602859	CompoundStatement		43:2:983:1047	5602744	1					
ANR	5602860	IfStatement	"if ( ! doWriteEvent ( event , true , false , param_jobad ) )"		5602744	0					
ANR	5602861	Condition	"! doWriteEvent ( event , true , false , param_jobad )"	1247:7:30127:30173	5602744	0	True				
ANR	5602862	UnaryOperationExpression	"! doWriteEvent ( event , true , false , param_jobad )"		5602744	0					
ANR	5602863	UnaryOperator	!		5602744	0					
ANR	5602864	CallExpression	"doWriteEvent ( event , true , false , param_jobad )"		5602744	1					
ANR	5602865	Callee	doWriteEvent		5602744	0					
ANR	5602866	Identifier	doWriteEvent		5602744	0					
ANR	5602867	ArgumentList	event		5602744	1					
ANR	5602868	Argument	event		5602744	0					
ANR	5602869	Identifier	event		5602744	0					
ANR	5602870	Argument	true		5602744	1					
ANR	5602871	Identifier	true		5602744	0					
ANR	5602872	Argument	false		5602744	2					
ANR	5602873	Identifier	false		5602744	0					
ANR	5602874	Argument	param_jobad		5602744	3					
ANR	5602875	Identifier	param_jobad		5602744	0					
ANR	5602876	CompoundStatement		39:58:892:892	5602744	1					
ANR	5602877	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog: global doWriteEvent()!\\n"" )"	1248:3:30183:30244	5602744	0	True				
ANR	5602878	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog: global doWriteEvent()!\\n"" )"		5602744	0					
ANR	5602879	Callee	dprintf		5602744	0					
ANR	5602880	Identifier	dprintf		5602744	0					
ANR	5602881	ArgumentList	D_ALWAYS		5602744	1					
ANR	5602882	Argument	D_ALWAYS		5602744	0					
ANR	5602883	Identifier	D_ALWAYS		5602744	0					
ANR	5602884	Argument	"""WriteUserLog: global doWriteEvent()!\\n"""		5602744	1					
ANR	5602885	PrimaryExpression	"""WriteUserLog: global doWriteEvent()!\\n"""		5602744	0					
ANR	5602886	ReturnStatement	return false ;	1249:3:30249:30261	5602744	1	True				
ANR	5602887	Identifier	false		5602744	0					
ANR	5602888	IdentifierDeclStatement	"char * attrsToWrite = param ( ""EVENT_LOG_JOB_AD_INFORMATION_ATTRS"" ) ;"	1251:2:30269:30333	5602744	1	True				
ANR	5602889	IdentifierDecl	"* attrsToWrite = param ( ""EVENT_LOG_JOB_AD_INFORMATION_ATTRS"" )"		5602744	0					
ANR	5602890	IdentifierDeclType	char *		5602744	0					
ANR	5602891	Identifier	attrsToWrite		5602744	1					
ANR	5602892	AssignmentExpression	"* attrsToWrite = param ( ""EVENT_LOG_JOB_AD_INFORMATION_ATTRS"" )"		5602744	2		=			
ANR	5602893	Identifier	attrsToWrite		5602744	0					
ANR	5602894	CallExpression	"param ( ""EVENT_LOG_JOB_AD_INFORMATION_ATTRS"" )"		5602744	1					
ANR	5602895	Callee	param		5602744	0					
ANR	5602896	Identifier	param		5602744	0					
ANR	5602897	ArgumentList	"""EVENT_LOG_JOB_AD_INFORMATION_ATTRS"""		5602744	1					
ANR	5602898	Argument	"""EVENT_LOG_JOB_AD_INFORMATION_ATTRS"""		5602744	0					
ANR	5602899	PrimaryExpression	"""EVENT_LOG_JOB_AD_INFORMATION_ATTRS"""		5602744	0					
ANR	5602900	IfStatement	if ( attrsToWrite && * attrsToWrite )		5602744	2					
ANR	5602901	Condition	attrsToWrite && * attrsToWrite	1252:6:30341:30369	5602744	0	True				
ANR	5602902	AndExpression	attrsToWrite && * attrsToWrite		5602744	0		&&			
ANR	5602903	Identifier	attrsToWrite		5602744	0					
ANR	5602904	UnaryOperationExpression	* attrsToWrite		5602744	1					
ANR	5602905	UnaryOperator	*		5602744	0					
ANR	5602906	Identifier	attrsToWrite		5602744	1					
ANR	5602907	CompoundStatement		44:38:1087:1087	5602744	1					
ANR	5602908	ExpressionStatement	"writeJobAdInfoEvent ( attrsToWrite , event , param_jobad , true )"	1253:3:30378:30439	5602744	0	True				
ANR	5602909	CallExpression	"writeJobAdInfoEvent ( attrsToWrite , event , param_jobad , true )"		5602744	0					
ANR	5602910	Callee	writeJobAdInfoEvent		5602744	0					
ANR	5602911	Identifier	writeJobAdInfoEvent		5602744	0					
ANR	5602912	ArgumentList	attrsToWrite		5602744	1					
ANR	5602913	Argument	attrsToWrite		5602744	0					
ANR	5602914	Identifier	attrsToWrite		5602744	0					
ANR	5602915	Argument	event		5602744	1					
ANR	5602916	Identifier	event		5602744	0					
ANR	5602917	Argument	param_jobad		5602744	2					
ANR	5602918	Identifier	param_jobad		5602744	0					
ANR	5602919	Argument	true		5602744	3					
ANR	5602920	Identifier	true		5602744	0					
ANR	5602921	ExpressionStatement	free ( attrsToWrite )	1255:2:30447:30467	5602744	3	True				
ANR	5602922	CallExpression	free ( attrsToWrite )		5602744	0					
ANR	5602923	Callee	free		5602744	0					
ANR	5602924	Identifier	free		5602744	0					
ANR	5602925	ArgumentList	attrsToWrite		5602744	1					
ANR	5602926	Argument	attrsToWrite		5602744	0					
ANR	5602927	Identifier	attrsToWrite		5602744	0					
ANR	5602928	IfStatement	if ( m_global_close )		5602744	10					
ANR	5602929	Condition	m_global_close	1258:6:30479:30492	5602744	0	True				
ANR	5602930	Identifier	m_global_close		5602744	0					
ANR	5602931	CompoundStatement		50:23:1210:1210	5602744	1					
ANR	5602932	ExpressionStatement	closeGlobalLog ( )	1259:2:30500:30517	5602744	0	True				
ANR	5602933	CallExpression	closeGlobalLog ( )		5602744	0					
ANR	5602934	Callee	closeGlobalLog		5602744	0					
ANR	5602935	Identifier	closeGlobalLog		5602744	0					
ANR	5602936	ArgumentList			5602744	1					
ANR	5602937	IfStatement	if ( m_userlog_enable && m_fp )		5602744	11					
ANR	5602938	Condition	m_userlog_enable && m_fp	1263:6:30550:30573	5602744	0	True				
ANR	5602939	AndExpression	m_userlog_enable && m_fp		5602744	0		&&			
ANR	5602940	Identifier	m_userlog_enable		5602744	0					
ANR	5602941	Identifier	m_fp		5602744	1					
ANR	5602942	CompoundStatement		55:33:1291:1291	5602744	1					
ANR	5602943	IfStatement	"if ( ! doWriteEvent ( event , false , false , param_jobad ) )"		5602744	0					
ANR	5602944	Condition	"! doWriteEvent ( event , false , false , param_jobad )"	1264:7:30586:30633	5602744	0	True				
ANR	5602945	UnaryOperationExpression	"! doWriteEvent ( event , false , false , param_jobad )"		5602744	0					
ANR	5602946	UnaryOperator	!		5602744	0					
ANR	5602947	CallExpression	"doWriteEvent ( event , false , false , param_jobad )"		5602744	1					
ANR	5602948	Callee	doWriteEvent		5602744	0					
ANR	5602949	Identifier	doWriteEvent		5602744	0					
ANR	5602950	ArgumentList	event		5602744	1					
ANR	5602951	Argument	event		5602744	0					
ANR	5602952	Identifier	event		5602744	0					
ANR	5602953	Argument	false		5602744	1					
ANR	5602954	Identifier	false		5602744	0					
ANR	5602955	Argument	false		5602744	2					
ANR	5602956	Identifier	false		5602744	0					
ANR	5602957	Argument	param_jobad		5602744	3					
ANR	5602958	Identifier	param_jobad		5602744	0					
ANR	5602959	CompoundStatement		56:58:1351:1351	5602744	1					
ANR	5602960	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteUserLog: user doWriteEvent()!\\n"" )"	1265:3:30642:30701	5602744	0	True				
ANR	5602961	CallExpression	"dprintf ( D_ALWAYS , ""WriteUserLog: user doWriteEvent()!\\n"" )"		5602744	0					
ANR	5602962	Callee	dprintf		5602744	0					
ANR	5602963	Identifier	dprintf		5602744	0					
ANR	5602964	ArgumentList	D_ALWAYS		5602744	1					
ANR	5602965	Argument	D_ALWAYS		5602744	0					
ANR	5602966	Identifier	D_ALWAYS		5602744	0					
ANR	5602967	Argument	"""WriteUserLog: user doWriteEvent()!\\n"""		5602744	1					
ANR	5602968	PrimaryExpression	"""WriteUserLog: user doWriteEvent()!\\n"""		5602744	0					
ANR	5602969	ReturnStatement	return false ;	1266:3:30706:30718	5602744	1	True				
ANR	5602970	Identifier	false		5602744	0					
ANR	5602971	IfStatement	if ( param_jobad )		5602744	1					
ANR	5602972	Condition	param_jobad	1269:6:30731:30741	5602744	0	True				
ANR	5602973	Identifier	param_jobad		5602744	0					
ANR	5602974	CompoundStatement		65:3:1616:1641	5602744	1					
ANR	5602975	IdentifierDeclStatement	char * attrsToWrite = NULL ;	1273:3:30902:30927	5602744	0	True				
ANR	5602976	IdentifierDecl	* attrsToWrite = NULL		5602744	0					
ANR	5602977	IdentifierDeclType	char *		5602744	0					
ANR	5602978	Identifier	attrsToWrite		5602744	1					
ANR	5602979	AssignmentExpression	* attrsToWrite = NULL		5602744	2		=			
ANR	5602980	Identifier	NULL		5602744	0					
ANR	5602981	Identifier	NULL		5602744	1					
ANR	5602982	ExpressionStatement	"param_jobad -> LookupString ( ""JobAdInformationAttrs"" , & attrsToWrite )"	1274:3:30932:30996	5602744	1	True				
ANR	5602983	CallExpression	"param_jobad -> LookupString ( ""JobAdInformationAttrs"" , & attrsToWrite )"		5602744	0					
ANR	5602984	Callee	param_jobad -> LookupString		5602744	0					
ANR	5602985	PtrMemberAccess	param_jobad -> LookupString		5602744	0					
ANR	5602986	Identifier	param_jobad		5602744	0					
ANR	5602987	Identifier	LookupString		5602744	1					
ANR	5602988	ArgumentList	"""JobAdInformationAttrs"""		5602744	1					
ANR	5602989	Argument	"""JobAdInformationAttrs"""		5602744	0					
ANR	5602990	PrimaryExpression	"""JobAdInformationAttrs"""		5602744	0					
ANR	5602991	Argument	& attrsToWrite		5602744	1					
ANR	5602992	UnaryOperationExpression	& attrsToWrite		5602744	0					
ANR	5602993	UnaryOperator	&		5602744	0					
ANR	5602994	Identifier	attrsToWrite		5602744	1					
ANR	5602995	IfStatement	if ( attrsToWrite && * attrsToWrite )		5602744	2					
ANR	5602996	Condition	attrsToWrite && * attrsToWrite	1275:7:31005:31033	5602744	0	True				
ANR	5602997	AndExpression	attrsToWrite && * attrsToWrite		5602744	0		&&			
ANR	5602998	Identifier	attrsToWrite		5602744	0					
ANR	5602999	UnaryOperationExpression	* attrsToWrite		5602744	1					
ANR	5603000	UnaryOperator	*		5602744	0					
ANR	5603001	Identifier	attrsToWrite		5602744	1					
ANR	5603002	CompoundStatement		67:39:1751:1751	5602744	1					
ANR	5603003	ExpressionStatement	"writeJobAdInfoEvent ( attrsToWrite , event , param_jobad , false )"	1276:4:31043:31105	5602744	0	True				
ANR	5603004	CallExpression	"writeJobAdInfoEvent ( attrsToWrite , event , param_jobad , false )"		5602744	0					
ANR	5603005	Callee	writeJobAdInfoEvent		5602744	0					
ANR	5603006	Identifier	writeJobAdInfoEvent		5602744	0					
ANR	5603007	ArgumentList	attrsToWrite		5602744	1					
ANR	5603008	Argument	attrsToWrite		5602744	0					
ANR	5603009	Identifier	attrsToWrite		5602744	0					
ANR	5603010	Argument	event		5602744	1					
ANR	5603011	Identifier	event		5602744	0					
ANR	5603012	Argument	param_jobad		5602744	2					
ANR	5603013	Identifier	param_jobad		5602744	0					
ANR	5603014	Argument	false		5602744	3					
ANR	5603015	Identifier	false		5602744	0					
ANR	5603016	ExpressionStatement	free ( attrsToWrite )	1278:3:31115:31135	5602744	3	True				
ANR	5603017	CallExpression	free ( attrsToWrite )		5602744	0					
ANR	5603018	Callee	free		5602744	0					
ANR	5603019	Identifier	free		5602744	0					
ANR	5603020	ArgumentList	attrsToWrite		5602744	1					
ANR	5603021	Argument	attrsToWrite		5602744	0					
ANR	5603022	Identifier	attrsToWrite		5602744	0					
ANR	5603023	IfStatement	if ( written )		5602744	12					
ANR	5603024	Condition	written	1282:6:31151:31157	5602744	0	True				
ANR	5603025	Identifier	written		5602744	0					
ANR	5603026	CompoundStatement		74:16:1875:1875	5602744	1					
ANR	5603027	ExpressionStatement	* written = true	1283:2:31165:31180	5602744	0	True				
ANR	5603028	AssignmentExpression	* written = true		5602744	0		=			
ANR	5603029	UnaryOperationExpression	* written		5602744	0					
ANR	5603030	UnaryOperator	*		5602744	0					
ANR	5603031	Identifier	written		5602744	1					
ANR	5603032	Identifier	true		5602744	1					
ANR	5603033	ReturnStatement	return true ;	1285:1:31186:31197	5602744	13	True				
ANR	5603034	Identifier	true		5602744	0					
ANR	5603035	ReturnType	bool		5602744	1					
ANR	5603036	Identifier	WriteUserLog :: writeEvent		5602744	2					
ANR	5603037	ParameterList	"ULogEvent * event , ClassAd * param_jobad , bool * written"		5602744	3					
ANR	5603038	Parameter	ULogEvent * event	1206:27:29211:29226	5602744	0	True				
ANR	5603039	ParameterType	ULogEvent *		5602744	0					
ANR	5603040	Identifier	event		5602744	1					
ANR	5603041	Parameter	ClassAd * param_jobad	1207:9:29238:29257	5602744	1	True				
ANR	5603042	ParameterType	ClassAd *		5602744	0					
ANR	5603043	Identifier	param_jobad		5602744	1					
ANR	5603044	Parameter	bool * written	1208:9:29269:29281	5602744	2	True				
ANR	5603045	ParameterType	bool *		5602744	0					
ANR	5603046	Identifier	written		5602744	1					
ANR	5603047	CFGEntryNode	ENTRY		5602744		True				
ANR	5603048	CFGExitNode	EXIT		5602744		True				
ANR	5603049	Symbol	m_initialized		5602744						
ANR	5603050	Symbol	* event		5602744						
ANR	5603051	Symbol	m_cluster		5602744						
ANR	5603052	Symbol	& attrsToWrite		5602744						
ANR	5603053	Symbol	m_proc		5602744						
ANR	5603054	Symbol	* attrsToWrite		5602744						
ANR	5603055	Symbol	* written		5602744						
ANR	5603056	Symbol	event -> subproc		5602744						
ANR	5603057	Symbol	m_userlog_enable		5602744						
ANR	5603058	Symbol	m_lock		5602744						
ANR	5603059	Symbol	openGlobalLog		5602744						
ANR	5603060	Symbol	param		5602744						
ANR	5603061	Symbol	written		5602744						
ANR	5603062	Symbol	event		5602744						
ANR	5603063	Symbol	event -> proc		5602744						
ANR	5603064	Symbol	m_global_disable		5602744						
ANR	5603065	Symbol	m_global_path		5602744						
ANR	5603066	Symbol	NULL		5602744						
ANR	5603067	Symbol	m_subproc		5602744						
ANR	5603068	Symbol	false		5602744						
ANR	5603069	Symbol	D_ALWAYS		5602744						
ANR	5603070	Symbol	D_FULLDEBUG		5602744						
ANR	5603071	Symbol	m_global_close		5602744						
ANR	5603072	Symbol	m_fp		5602744						
ANR	5603073	Symbol	doWriteEvent		5602744						
ANR	5603074	Symbol	attrsToWrite		5602744						
ANR	5603075	Symbol	param_jobad		5602744						
ANR	5603076	Symbol	true		5602744						
ANR	5603077	Symbol	m_gjid		5602744						
ANR	5603078	Symbol	event -> cluster		5602744						
ANR	5603079	Function	WriteUserLog :: writeJobAdInfoEvent	1288:0:31202:32799							
ANR	5603080	FunctionDef	"WriteUserLog :: writeJobAdInfoEvent (char const * attrsToWrite , ULogEvent * event , ClassAd * param_jobad , bool is_global_event)"		5603079	0					
ANR	5603081	CompoundStatement		1290:0:31330:32799	5603079	0					
ANR	5603082	IdentifierDeclStatement	ExprTree * tree ;	1291:1:31333:31347	5603079	0	True				
ANR	5603083	IdentifierDecl	* tree		5603079	0					
ANR	5603084	IdentifierDeclType	ExprTree *		5603079	0					
ANR	5603085	Identifier	tree		5603079	1					
ANR	5603086	IdentifierDeclStatement	EvalResult result ;	1292:1:31350:31367	5603079	1	True				
ANR	5603087	IdentifierDecl	result		5603079	0					
ANR	5603088	IdentifierDeclType	EvalResult		5603079	0					
ANR	5603089	Identifier	result		5603079	1					
ANR	5603090	IdentifierDeclStatement	char * curr ;	1293:1:31370:31380	5603079	2	True				
ANR	5603091	IdentifierDecl	* curr		5603079	0					
ANR	5603092	IdentifierDeclType	char *		5603079	0					
ANR	5603093	Identifier	curr		5603079	1					
ANR	5603094	IdentifierDeclStatement	ClassAd * eventAd = event -> toClassAd ( ) ;	1295:1:31384:31421	5603079	3	True				
ANR	5603095	IdentifierDecl	* eventAd = event -> toClassAd ( )		5603079	0					
ANR	5603096	IdentifierDeclType	ClassAd *		5603079	0					
ANR	5603097	Identifier	eventAd		5603079	1					
ANR	5603098	AssignmentExpression	* eventAd = event -> toClassAd ( )		5603079	2		=			
ANR	5603099	Identifier	eventAd		5603079	0					
ANR	5603100	CallExpression	event -> toClassAd ( )		5603079	1					
ANR	5603101	Callee	event -> toClassAd		5603079	0					
ANR	5603102	PtrMemberAccess	event -> toClassAd		5603079	0					
ANR	5603103	Identifier	event		5603079	0					
ANR	5603104	Identifier	toClassAd		5603079	1					
ANR	5603105	ArgumentList			5603079	1					
ANR	5603106	IdentifierDeclStatement	StringList attrs ( attrsToWrite ) ;	1297:1:31425:31455	5603079	4	True				
ANR	5603107	IdentifierDecl	attrs ( attrsToWrite )		5603079	0					
ANR	5603108	IdentifierDeclType	StringList		5603079	0					
ANR	5603109	Identifier	attrs		5603079	1					
ANR	5603110	Identifier	attrsToWrite		5603079	2					
ANR	5603111	ExpressionStatement	attrs . rewind ( )	1298:1:31458:31472	5603079	5	True				
ANR	5603112	CallExpression	attrs . rewind ( )		5603079	0					
ANR	5603113	Callee	attrs . rewind		5603079	0					
ANR	5603114	MemberAccess	attrs . rewind		5603079	0					
ANR	5603115	Identifier	attrs		5603079	0					
ANR	5603116	Identifier	rewind		5603079	1					
ANR	5603117	ArgumentList			5603079	1					
ANR	5603118	WhileStatement	while ( eventAd && param_jobad && ( curr = attrs . next ( ) ) )		5603079	6					
ANR	5603119	Condition	eventAd && param_jobad && ( curr = attrs . next ( ) )	1299:9:31483:31527	5603079	0	True				
ANR	5603120	AndExpression	eventAd && param_jobad && ( curr = attrs . next ( ) )		5603079	0		&&			
ANR	5603121	Identifier	eventAd		5603079	0					
ANR	5603122	AndExpression	param_jobad && ( curr = attrs . next ( ) )		5603079	1		&&			
ANR	5603123	Identifier	param_jobad		5603079	0					
ANR	5603124	AssignmentExpression	curr = attrs . next ( )		5603079	1		=			
ANR	5603125	Identifier	curr		5603079	0					
ANR	5603126	CallExpression	attrs . next ( )		5603079	1					
ANR	5603127	Callee	attrs . next		5603079	0					
ANR	5603128	MemberAccess	attrs . next		5603079	0					
ANR	5603129	Identifier	attrs		5603079	0					
ANR	5603130	Identifier	next		5603079	1					
ANR	5603131	ArgumentList			5603079	1					
ANR	5603132	CompoundStatement		11:1:201:201	5603079	1					
ANR	5603133	IfStatement	if ( ( tree = param_jobad -> LookupExpr ( curr ) ) )		5603079	0					
ANR	5603134	Condition	tree = param_jobad -> LookupExpr ( curr )	1301:7:31541:31576	5603079	0	True				
ANR	5603135	AssignmentExpression	tree = param_jobad -> LookupExpr ( curr )		5603079	0		=			
ANR	5603136	Identifier	tree		5603079	0					
ANR	5603137	CallExpression	param_jobad -> LookupExpr ( curr )		5603079	1					
ANR	5603138	Callee	param_jobad -> LookupExpr		5603079	0					
ANR	5603139	PtrMemberAccess	param_jobad -> LookupExpr		5603079	0					
ANR	5603140	Identifier	param_jobad		5603079	0					
ANR	5603141	Identifier	LookupExpr		5603079	1					
ANR	5603142	ArgumentList	curr		5603079	1					
ANR	5603143	Argument	curr		5603079	0					
ANR	5603144	Identifier	curr		5603079	0					
ANR	5603145	CompoundStatement		12:46:249:249	5603079	1					
ANR	5603146	IfStatement	"if ( EvalExprTree ( tree , param_jobad , NULL , & result ) )"		5603079	0					
ANR	5603147	Condition	"EvalExprTree ( tree , param_jobad , NULL , & result )"	1304:8:31677:31719	5603079	0	True				
ANR	5603148	CallExpression	"EvalExprTree ( tree , param_jobad , NULL , & result )"		5603079	0					
ANR	5603149	Callee	EvalExprTree		5603079	0					
ANR	5603150	Identifier	EvalExprTree		5603079	0					
ANR	5603151	ArgumentList	tree		5603079	1					
ANR	5603152	Argument	tree		5603079	0					
ANR	5603153	Identifier	tree		5603079	0					
ANR	5603154	Argument	param_jobad		5603079	1					
ANR	5603155	Identifier	param_jobad		5603079	0					
ANR	5603156	Argument	NULL		5603079	2					
ANR	5603157	Identifier	NULL		5603079	0					
ANR	5603158	Argument	& result		5603079	3					
ANR	5603159	UnaryOperationExpression	& result		5603079	0					
ANR	5603160	UnaryOperator	&		5603079	0					
ANR	5603161	Identifier	result		5603079	1					
ANR	5603162	CompoundStatement		15:54:392:392	5603079	1					
ANR	5603163	SwitchStatement	switch ( result . type )		5603079	0					
ANR	5603164	Condition	result . type	1306:12:31773:31783	5603079	0	True				
ANR	5603165	MemberAccess	result . type		5603079	0					
ANR	5603166	Identifier	result		5603079	0					
ANR	5603167	Identifier	type		5603079	1					
ANR	5603168	CompoundStatement		17:25:455:455	5603079	1					
ANR	5603169	Label	case LX_BOOL :	1307:4:31792:31804	5603079	0	True				
ANR	5603170	Identifier	LX_BOOL		5603079	0					
ANR	5603171	Label	case LX_INTEGER :	1308:4:31810:31825	5603079	1	True				
ANR	5603172	Identifier	LX_INTEGER		5603079	0					
ANR	5603173	ExpressionStatement	"eventAd -> Assign ( curr , result . i )"	1309:5:31832:31864	5603079	2	True				
ANR	5603174	CallExpression	"eventAd -> Assign ( curr , result . i )"		5603079	0					
ANR	5603175	Callee	eventAd -> Assign		5603079	0					
ANR	5603176	PtrMemberAccess	eventAd -> Assign		5603079	0					
ANR	5603177	Identifier	eventAd		5603079	0					
ANR	5603178	Identifier	Assign		5603079	1					
ANR	5603179	ArgumentList	curr		5603079	1					
ANR	5603180	Argument	curr		5603079	0					
ANR	5603181	Identifier	curr		5603079	0					
ANR	5603182	Argument	result . i		5603079	1					
ANR	5603183	MemberAccess	result . i		5603079	0					
ANR	5603184	Identifier	result		5603079	0					
ANR	5603185	Identifier	i		5603079	1					
ANR	5603186	BreakStatement	break ;	1310:5:31871:31876	5603079	3	True				
ANR	5603187	Label	case LX_FLOAT :	1311:4:31882:31895	5603079	4	True				
ANR	5603188	Identifier	LX_FLOAT		5603079	0					
ANR	5603189	ExpressionStatement	"eventAd -> Assign ( curr , result . f )"	1312:5:31902:31934	5603079	5	True				
ANR	5603190	CallExpression	"eventAd -> Assign ( curr , result . f )"		5603079	0					
ANR	5603191	Callee	eventAd -> Assign		5603079	0					
ANR	5603192	PtrMemberAccess	eventAd -> Assign		5603079	0					
ANR	5603193	Identifier	eventAd		5603079	0					
ANR	5603194	Identifier	Assign		5603079	1					
ANR	5603195	ArgumentList	curr		5603079	1					
ANR	5603196	Argument	curr		5603079	0					
ANR	5603197	Identifier	curr		5603079	0					
ANR	5603198	Argument	result . f		5603079	1					
ANR	5603199	MemberAccess	result . f		5603079	0					
ANR	5603200	Identifier	result		5603079	0					
ANR	5603201	Identifier	f		5603079	1					
ANR	5603202	BreakStatement	break ;	1313:5:31941:31946	5603079	6	True				
ANR	5603203	Label	case LX_STRING :	1314:4:31952:31966	5603079	7	True				
ANR	5603204	Identifier	LX_STRING		5603079	0					
ANR	5603205	ExpressionStatement	"eventAd -> Assign ( curr , result . s )"	1315:5:31973:32005	5603079	8	True				
ANR	5603206	CallExpression	"eventAd -> Assign ( curr , result . s )"		5603079	0					
ANR	5603207	Callee	eventAd -> Assign		5603079	0					
ANR	5603208	PtrMemberAccess	eventAd -> Assign		5603079	0					
ANR	5603209	Identifier	eventAd		5603079	0					
ANR	5603210	Identifier	Assign		5603079	1					
ANR	5603211	ArgumentList	curr		5603079	1					
ANR	5603212	Argument	curr		5603079	0					
ANR	5603213	Identifier	curr		5603079	0					
ANR	5603214	Argument	result . s		5603079	1					
ANR	5603215	MemberAccess	result . s		5603079	0					
ANR	5603216	Identifier	result		5603079	0					
ANR	5603217	Identifier	s		5603079	1					
ANR	5603218	BreakStatement	break ;	1316:5:32012:32017	5603079	9	True				
ANR	5603219	Label	default :	1317:4:32023:32030	5603079	10	True				
ANR	5603220	Identifier	default		5603079	0					
ANR	5603221	BreakStatement	break ;	1318:5:32037:32042	5603079	11	True				
ANR	5603222	IfStatement	if ( eventAd )		5603079	7					
ANR	5603223	Condition	eventAd	1328:6:32280:32286	5603079	0	True				
ANR	5603224	Identifier	eventAd		5603079	0					
ANR	5603225	CompoundStatement		43:2:1151:1183	5603079	1					
ANR	5603226	ExpressionStatement	"eventAd -> Assign ( ""TriggerEventTypeNumber"" , event -> eventNumber )"	1329:2:32295:32355	5603079	0	True				
ANR	5603227	CallExpression	"eventAd -> Assign ( ""TriggerEventTypeNumber"" , event -> eventNumber )"		5603079	0					
ANR	5603228	Callee	eventAd -> Assign		5603079	0					
ANR	5603229	PtrMemberAccess	eventAd -> Assign		5603079	0					
ANR	5603230	Identifier	eventAd		5603079	0					
ANR	5603231	Identifier	Assign		5603079	1					
ANR	5603232	ArgumentList	"""TriggerEventTypeNumber"""		5603079	1					
ANR	5603233	Argument	"""TriggerEventTypeNumber"""		5603079	0					
ANR	5603234	PrimaryExpression	"""TriggerEventTypeNumber"""		5603079	0					
ANR	5603235	Argument	event -> eventNumber		5603079	1					
ANR	5603236	PtrMemberAccess	event -> eventNumber		5603079	0					
ANR	5603237	Identifier	event		5603079	0					
ANR	5603238	Identifier	eventNumber		5603079	1					
ANR	5603239	ExpressionStatement	"eventAd -> Assign ( ""TriggerEventTypeName"" , event -> eventName ( ) )"	1330:2:32359:32417	5603079	1	True				
ANR	5603240	CallExpression	"eventAd -> Assign ( ""TriggerEventTypeName"" , event -> eventName ( ) )"		5603079	0					
ANR	5603241	Callee	eventAd -> Assign		5603079	0					
ANR	5603242	PtrMemberAccess	eventAd -> Assign		5603079	0					
ANR	5603243	Identifier	eventAd		5603079	0					
ANR	5603244	Identifier	Assign		5603079	1					
ANR	5603245	ArgumentList	"""TriggerEventTypeName"""		5603079	1					
ANR	5603246	Argument	"""TriggerEventTypeName"""		5603079	0					
ANR	5603247	PrimaryExpression	"""TriggerEventTypeName"""		5603079	0					
ANR	5603248	Argument	event -> eventName ( )		5603079	1					
ANR	5603249	CallExpression	event -> eventName ( )		5603079	0					
ANR	5603250	Callee	event -> eventName		5603079	0					
ANR	5603251	PtrMemberAccess	event -> eventName		5603079	0					
ANR	5603252	Identifier	event		5603079	0					
ANR	5603253	Identifier	eventName		5603079	1					
ANR	5603254	ArgumentList			5603079	1					
ANR	5603255	IdentifierDeclStatement	JobAdInformationEvent info_event ;	1332:2:32482:32514	5603079	2	True				
ANR	5603256	IdentifierDecl	info_event		5603079	0					
ANR	5603257	IdentifierDeclType	JobAdInformationEvent		5603079	0					
ANR	5603258	Identifier	info_event		5603079	1					
ANR	5603259	ExpressionStatement	"eventAd -> Assign ( ""EventTypeNumber"" , info_event . eventNumber )"	1333:2:32518:32575	5603079	3	True				
ANR	5603260	CallExpression	"eventAd -> Assign ( ""EventTypeNumber"" , info_event . eventNumber )"		5603079	0					
ANR	5603261	Callee	eventAd -> Assign		5603079	0					
ANR	5603262	PtrMemberAccess	eventAd -> Assign		5603079	0					
ANR	5603263	Identifier	eventAd		5603079	0					
ANR	5603264	Identifier	Assign		5603079	1					
ANR	5603265	ArgumentList	"""EventTypeNumber"""		5603079	1					
ANR	5603266	Argument	"""EventTypeNumber"""		5603079	0					
ANR	5603267	PrimaryExpression	"""EventTypeNumber"""		5603079	0					
ANR	5603268	Argument	info_event . eventNumber		5603079	1					
ANR	5603269	MemberAccess	info_event . eventNumber		5603079	0					
ANR	5603270	Identifier	info_event		5603079	0					
ANR	5603271	Identifier	eventNumber		5603079	1					
ANR	5603272	ExpressionStatement	info_event . initFromClassAd ( eventAd )	1334:2:32579:32614	5603079	4	True				
ANR	5603273	CallExpression	info_event . initFromClassAd ( eventAd )		5603079	0					
ANR	5603274	Callee	info_event . initFromClassAd		5603079	0					
ANR	5603275	MemberAccess	info_event . initFromClassAd		5603079	0					
ANR	5603276	Identifier	info_event		5603079	0					
ANR	5603277	Identifier	initFromClassAd		5603079	1					
ANR	5603278	ArgumentList	eventAd		5603079	1					
ANR	5603279	Argument	eventAd		5603079	0					
ANR	5603280	Identifier	eventAd		5603079	0					
ANR	5603281	ExpressionStatement	info_event . cluster = m_cluster	1335:2:32618:32648	5603079	5	True				
ANR	5603282	AssignmentExpression	info_event . cluster = m_cluster		5603079	0		=			
ANR	5603283	MemberAccess	info_event . cluster		5603079	0					
ANR	5603284	Identifier	info_event		5603079	0					
ANR	5603285	Identifier	cluster		5603079	1					
ANR	5603286	Identifier	m_cluster		5603079	1					
ANR	5603287	ExpressionStatement	info_event . proc = m_proc	1336:2:32652:32676	5603079	6	True				
ANR	5603288	AssignmentExpression	info_event . proc = m_proc		5603079	0		=			
ANR	5603289	MemberAccess	info_event . proc		5603079	0					
ANR	5603290	Identifier	info_event		5603079	0					
ANR	5603291	Identifier	proc		5603079	1					
ANR	5603292	Identifier	m_proc		5603079	1					
ANR	5603293	ExpressionStatement	info_event . subproc = m_subproc	1337:2:32680:32710	5603079	7	True				
ANR	5603294	AssignmentExpression	info_event . subproc = m_subproc		5603079	0		=			
ANR	5603295	MemberAccess	info_event . subproc		5603079	0					
ANR	5603296	Identifier	info_event		5603079	0					
ANR	5603297	Identifier	subproc		5603079	1					
ANR	5603298	Identifier	m_subproc		5603079	1					
ANR	5603299	ExpressionStatement	"doWriteEvent ( & info_event , is_global_event , false , param_jobad )"	1338:2:32714:32776	5603079	8	True				
ANR	5603300	CallExpression	"doWriteEvent ( & info_event , is_global_event , false , param_jobad )"		5603079	0					
ANR	5603301	Callee	doWriteEvent		5603079	0					
ANR	5603302	Identifier	doWriteEvent		5603079	0					
ANR	5603303	ArgumentList	& info_event		5603079	1					
ANR	5603304	Argument	& info_event		5603079	0					
ANR	5603305	UnaryOperationExpression	& info_event		5603079	0					
ANR	5603306	UnaryOperator	&		5603079	0					
ANR	5603307	Identifier	info_event		5603079	1					
ANR	5603308	Argument	is_global_event		5603079	1					
ANR	5603309	Identifier	is_global_event		5603079	0					
ANR	5603310	Argument	false		5603079	2					
ANR	5603311	Identifier	false		5603079	0					
ANR	5603312	Argument	param_jobad		5603079	3					
ANR	5603313	Identifier	param_jobad		5603079	0					
ANR	5603314	Statement	delete	1339:2:32780:32785	5603079	9	True				
ANR	5603315	ExpressionStatement	eventAd	1339:9:32787:32794	5603079	10	True				
ANR	5603316	Identifier	eventAd		5603079	0					
ANR	5603317	ReturnType	void		5603079	1					
ANR	5603318	Identifier	WriteUserLog :: writeJobAdInfoEvent		5603079	2					
ANR	5603319	ParameterList	"char const * attrsToWrite , ULogEvent * event , ClassAd * param_jobad , bool is_global_event"		5603079	3					
ANR	5603320	Parameter	char const * attrsToWrite	1289:34:31241:31264	5603079	0	True				
ANR	5603321	ParameterType	char const *		5603079	0					
ANR	5603322	Identifier	attrsToWrite		5603079	1					
ANR	5603323	Parameter	ULogEvent * event	1289:60:31267:31282	5603079	1	True				
ANR	5603324	ParameterType	ULogEvent *		5603079	0					
ANR	5603325	Identifier	event		5603079	1					
ANR	5603326	Parameter	ClassAd * param_jobad	1289:78:31285:31304	5603079	2	True				
ANR	5603327	ParameterType	ClassAd *		5603079	0					
ANR	5603328	Identifier	param_jobad		5603079	1					
ANR	5603329	Parameter	bool is_global_event	1289:100:31307:31326	5603079	3	True				
ANR	5603330	ParameterType	bool		5603079	0					
ANR	5603331	Identifier	is_global_event		5603079	1					
ANR	5603332	CFGEntryNode	ENTRY		5603079		True				
ANR	5603333	CFGExitNode	EXIT		5603079		True				
ANR	5603334	Symbol	* event		5603079						
ANR	5603335	Symbol	m_cluster		5603079						
ANR	5603336	Symbol	m_proc		5603079						
ANR	5603337	Symbol	info_event . proc		5603079						
ANR	5603338	Symbol	info_event . subproc		5603079						
ANR	5603339	Symbol	event -> toClassAd		5603079						
ANR	5603340	Symbol	result		5603079						
ANR	5603341	Symbol	& result		5603079						
ANR	5603342	Symbol	event		5603079						
ANR	5603343	Symbol	curr		5603079						
ANR	5603344	Symbol	event -> eventNumber		5603079						
ANR	5603345	Symbol	result . f		5603079						
ANR	5603346	Symbol	NULL		5603079						
ANR	5603347	Symbol	m_subproc		5603079						
ANR	5603348	Symbol	result . i		5603079						
ANR	5603349	Symbol	is_global_event		5603079						
ANR	5603350	Symbol	EvalExprTree		5603079						
ANR	5603351	Symbol	tree		5603079						
ANR	5603352	Symbol	false		5603079						
ANR	5603353	Symbol	eventAd		5603079						
ANR	5603354	Symbol	& info_event		5603079						
ANR	5603355	Symbol	event -> eventName		5603079						
ANR	5603356	Symbol	info_event . eventNumber		5603079						
ANR	5603357	Symbol	param_jobad -> LookupExpr		5603079						
ANR	5603358	Symbol	result . type		5603079						
ANR	5603359	Symbol	attrsToWrite		5603079						
ANR	5603360	Symbol	attrs		5603079						
ANR	5603361	Symbol	result . s		5603079						
ANR	5603362	Symbol	param_jobad		5603079						
ANR	5603363	Symbol	attrs . next		5603079						
ANR	5603364	Symbol	* param_jobad		5603079						
ANR	5603365	Symbol	info_event		5603079						
ANR	5603366	Symbol	info_event . cluster		5603079						
ANR	5603367	Function	WriteUserLog :: writeEventNoFsync	1343:0:32802:33081							
ANR	5603368	FunctionDef	"WriteUserLog :: writeEventNoFsync (ULogEvent * event , ClassAd * jobad , bool * written)"		5603367	0					
ANR	5603369	CompoundStatement		1346:0:32899:33081	5603367	0					
ANR	5603370	IdentifierDeclStatement	bool saved_fsync_setting = getEnableFsync ( ) ;	1347:1:32902:32945	5603367	0	True				
ANR	5603371	IdentifierDecl	saved_fsync_setting = getEnableFsync ( )		5603367	0					
ANR	5603372	IdentifierDeclType	bool		5603367	0					
ANR	5603373	Identifier	saved_fsync_setting		5603367	1					
ANR	5603374	AssignmentExpression	saved_fsync_setting = getEnableFsync ( )		5603367	2		=			
ANR	5603375	Identifier	saved_fsync_setting		5603367	0					
ANR	5603376	CallExpression	getEnableFsync ( )		5603367	1					
ANR	5603377	Callee	getEnableFsync		5603367	0					
ANR	5603378	Identifier	getEnableFsync		5603367	0					
ANR	5603379	ArgumentList			5603367	1					
ANR	5603380	ExpressionStatement	setEnableFsync ( false )	1348:1:32948:32971	5603367	1	True				
ANR	5603381	CallExpression	setEnableFsync ( false )		5603367	0					
ANR	5603382	Callee	setEnableFsync		5603367	0					
ANR	5603383	Identifier	setEnableFsync		5603367	0					
ANR	5603384	ArgumentList	false		5603367	1					
ANR	5603385	Argument	false		5603367	0					
ANR	5603386	Identifier	false		5603367	0					
ANR	5603387	IdentifierDeclStatement	"bool retval = writeEvent ( event , jobad , written ) ;"	1349:1:32974:33023	5603367	2	True				
ANR	5603388	IdentifierDecl	"retval = writeEvent ( event , jobad , written )"		5603367	0					
ANR	5603389	IdentifierDeclType	bool		5603367	0					
ANR	5603390	Identifier	retval		5603367	1					
ANR	5603391	AssignmentExpression	"retval = writeEvent ( event , jobad , written )"		5603367	2		=			
ANR	5603392	Identifier	retval		5603367	0					
ANR	5603393	CallExpression	"writeEvent ( event , jobad , written )"		5603367	1					
ANR	5603394	Callee	writeEvent		5603367	0					
ANR	5603395	Identifier	writeEvent		5603367	0					
ANR	5603396	ArgumentList	event		5603367	1					
ANR	5603397	Argument	event		5603367	0					
ANR	5603398	Identifier	event		5603367	0					
ANR	5603399	Argument	jobad		5603367	1					
ANR	5603400	Identifier	jobad		5603367	0					
ANR	5603401	Argument	written		5603367	2					
ANR	5603402	Identifier	written		5603367	0					
ANR	5603403	ExpressionStatement	setEnableFsync ( saved_fsync_setting )	1350:1:33026:33063	5603367	3	True				
ANR	5603404	CallExpression	setEnableFsync ( saved_fsync_setting )		5603367	0					
ANR	5603405	Callee	setEnableFsync		5603367	0					
ANR	5603406	Identifier	setEnableFsync		5603367	0					
ANR	5603407	ArgumentList	saved_fsync_setting		5603367	1					
ANR	5603408	Argument	saved_fsync_setting		5603367	0					
ANR	5603409	Identifier	saved_fsync_setting		5603367	0					
ANR	5603410	ReturnStatement	return retval ;	1351:1:33066:33079	5603367	4	True				
ANR	5603411	Identifier	retval		5603367	0					
ANR	5603412	ReturnType	bool		5603367	1					
ANR	5603413	Identifier	WriteUserLog :: writeEventNoFsync		5603367	2					
ANR	5603414	ParameterList	"ULogEvent * event , ClassAd * jobad , bool * written"		5603367	3					
ANR	5603415	Parameter	ULogEvent * event	1344:33:32840:32855	5603367	0	True				
ANR	5603416	ParameterType	ULogEvent *		5603367	0					
ANR	5603417	Identifier	event		5603367	1					
ANR	5603418	Parameter	ClassAd * jobad	1344:51:32858:32871	5603367	1	True				
ANR	5603419	ParameterType	ClassAd *		5603367	0					
ANR	5603420	Identifier	jobad		5603367	1					
ANR	5603421	Parameter	bool * written	1345:9:32883:32895	5603367	2	True				
ANR	5603422	ParameterType	bool *		5603367	0					
ANR	5603423	Identifier	written		5603367	1					
ANR	5603424	CFGEntryNode	ENTRY		5603367		True				
ANR	5603425	CFGExitNode	EXIT		5603367		True				
ANR	5603426	Symbol	saved_fsync_setting		5603367						
ANR	5603427	Symbol	getEnableFsync		5603367						
ANR	5603428	Symbol	writeEvent		5603367						
ANR	5603429	Symbol	false		5603367						
ANR	5603430	Symbol	jobad		5603367						
ANR	5603431	Symbol	written		5603367						
ANR	5603432	Symbol	event		5603367						
ANR	5603433	Symbol	retval		5603367						
ANR	5603434	Function	WriteUserLog :: GetGlobalIdBase	1355:0:33122:33510							
ANR	5603435	FunctionDef	WriteUserLog :: GetGlobalIdBase ()		5603434	0					
ANR	5603436	CompoundStatement		1357:0:33173:33510	5603434	0					
ANR	5603437	IfStatement	if ( m_global_id_base )		5603434	0					
ANR	5603438	Condition	m_global_id_base	1358:6:33181:33196	5603434	0	True				
ANR	5603439	Identifier	m_global_id_base		5603434	0					
ANR	5603440	CompoundStatement		2:25:26:26	5603434	1					
ANR	5603441	ReturnStatement	return m_global_id_base ;	1359:2:33204:33227	5603434	0	True				
ANR	5603442	Identifier	m_global_id_base		5603434	0					
ANR	5603443	IdentifierDeclStatement	MyString base ;	1361:1:33233:33246	5603434	1	True				
ANR	5603444	IdentifierDecl	base		5603434	0					
ANR	5603445	IdentifierDeclType	MyString		5603434	0					
ANR	5603446	Identifier	base		5603434	1					
ANR	5603447	ExpressionStatement	"base = """""	1362:1:33249:33258	5603434	2	True				
ANR	5603448	AssignmentExpression	"base = """""		5603434	0		=			
ANR	5603449	Identifier	base		5603434	0					
ANR	5603450	PrimaryExpression	""""""		5603434	1					
ANR	5603451	ExpressionStatement	base += getuid ( )	1363:1:33261:33277	5603434	3	True				
ANR	5603452	AssignmentExpression	base += getuid ( )		5603434	0		+=			
ANR	5603453	Identifier	base		5603434	0					
ANR	5603454	CallExpression	getuid ( )		5603434	1					
ANR	5603455	Callee	getuid		5603434	0					
ANR	5603456	Identifier	getuid		5603434	0					
ANR	5603457	ArgumentList			5603434	1					
ANR	5603458	ExpressionStatement	base += '.'	1364:1:33280:33291	5603434	4	True				
ANR	5603459	AssignmentExpression	base += '.'		5603434	0		+=			
ANR	5603460	Identifier	base		5603434	0					
ANR	5603461	PrimaryExpression	'.'		5603434	1					
ANR	5603462	ExpressionStatement	base += getpid ( )	1365:1:33294:33310	5603434	5	True				
ANR	5603463	AssignmentExpression	base += getpid ( )		5603434	0		+=			
ANR	5603464	Identifier	base		5603434	0					
ANR	5603465	CallExpression	getpid ( )		5603434	1					
ANR	5603466	Callee	getpid		5603434	0					
ANR	5603467	Identifier	getpid		5603434	0					
ANR	5603468	ArgumentList			5603434	1					
ANR	5603469	ExpressionStatement	base += '.'	1366:1:33313:33324	5603434	6	True				
ANR	5603470	AssignmentExpression	base += '.'		5603434	0		+=			
ANR	5603471	Identifier	base		5603434	0					
ANR	5603472	PrimaryExpression	'.'		5603434	1					
ANR	5603473	IdentifierDeclStatement	UtcTime utc ;	1368:1:33328:33339	5603434	7	True				
ANR	5603474	IdentifierDecl	utc		5603434	0					
ANR	5603475	IdentifierDeclType	UtcTime		5603434	0					
ANR	5603476	Identifier	utc		5603434	1					
ANR	5603477	ExpressionStatement	utc . getTime ( )	1369:1:33342:33355	5603434	8	True				
ANR	5603478	CallExpression	utc . getTime ( )		5603434	0					
ANR	5603479	Callee	utc . getTime		5603434	0					
ANR	5603480	MemberAccess	utc . getTime		5603434	0					
ANR	5603481	Identifier	utc		5603434	0					
ANR	5603482	Identifier	getTime		5603434	1					
ANR	5603483	ArgumentList			5603434	1					
ANR	5603484	ExpressionStatement	base += utc . seconds ( )	1370:1:33358:33379	5603434	9	True				
ANR	5603485	AssignmentExpression	base += utc . seconds ( )		5603434	0		+=			
ANR	5603486	Identifier	base		5603434	0					
ANR	5603487	CallExpression	utc . seconds ( )		5603434	1					
ANR	5603488	Callee	utc . seconds		5603434	0					
ANR	5603489	MemberAccess	utc . seconds		5603434	0					
ANR	5603490	Identifier	utc		5603434	0					
ANR	5603491	Identifier	seconds		5603434	1					
ANR	5603492	ArgumentList			5603434	1					
ANR	5603493	ExpressionStatement	base += '.'	1371:1:33382:33393	5603434	10	True				
ANR	5603494	AssignmentExpression	base += '.'		5603434	0		+=			
ANR	5603495	Identifier	base		5603434	0					
ANR	5603496	PrimaryExpression	'.'		5603434	1					
ANR	5603497	ExpressionStatement	base += utc . microseconds ( )	1372:1:33396:33422	5603434	11	True				
ANR	5603498	AssignmentExpression	base += utc . microseconds ( )		5603434	0		+=			
ANR	5603499	Identifier	base		5603434	0					
ANR	5603500	CallExpression	utc . microseconds ( )		5603434	1					
ANR	5603501	Callee	utc . microseconds		5603434	0					
ANR	5603502	MemberAccess	utc . microseconds		5603434	0					
ANR	5603503	Identifier	utc		5603434	0					
ANR	5603504	Identifier	microseconds		5603434	1					
ANR	5603505	ArgumentList			5603434	1					
ANR	5603506	ExpressionStatement	base += '.'	1373:1:33425:33436	5603434	12	True				
ANR	5603507	AssignmentExpression	base += '.'		5603434	0		+=			
ANR	5603508	Identifier	base		5603434	0					
ANR	5603509	PrimaryExpression	'.'		5603434	1					
ANR	5603510	ExpressionStatement	m_global_id_base = strdup ( base . Value ( ) )	1375:1:33440:33482	5603434	13	True				
ANR	5603511	AssignmentExpression	m_global_id_base = strdup ( base . Value ( ) )		5603434	0		=			
ANR	5603512	Identifier	m_global_id_base		5603434	0					
ANR	5603513	CallExpression	strdup ( base . Value ( ) )		5603434	1					
ANR	5603514	Callee	strdup		5603434	0					
ANR	5603515	Identifier	strdup		5603434	0					
ANR	5603516	ArgumentList	base . Value ( )		5603434	1					
ANR	5603517	Argument	base . Value ( )		5603434	0					
ANR	5603518	CallExpression	base . Value ( )		5603434	0					
ANR	5603519	Callee	base . Value		5603434	0					
ANR	5603520	MemberAccess	base . Value		5603434	0					
ANR	5603521	Identifier	base		5603434	0					
ANR	5603522	Identifier	Value		5603434	1					
ANR	5603523	ArgumentList			5603434	1					
ANR	5603524	ReturnStatement	return m_global_id_base ;	1376:1:33485:33508	5603434	14	True				
ANR	5603525	Identifier	m_global_id_base		5603434	0					
ANR	5603526	ReturnType	const char *		5603434	1					
ANR	5603527	Identifier	WriteUserLog :: GetGlobalIdBase		5603434	2					
ANR	5603528	ParameterList			5603434	3					
ANR	5603529	CFGEntryNode	ENTRY		5603434		True				
ANR	5603530	CFGExitNode	EXIT		5603434		True				
ANR	5603531	Symbol	m_global_id_base		5603434						
ANR	5603532	Symbol	getuid		5603434						
ANR	5603533	Symbol	utc		5603434						
ANR	5603534	Symbol	strdup		5603434						
ANR	5603535	Symbol	getpid		5603434						
ANR	5603536	Symbol	utc . seconds		5603434						
ANR	5603537	Symbol	base		5603434						
ANR	5603538	Symbol	utc . microseconds		5603434						
ANR	5603539	Symbol	base . Value		5603434						
ANR	5603540	Function	WriteUserLog :: GenerateGlobalId	1380:0:33548:33970							
ANR	5603541	FunctionDef	WriteUserLog :: GenerateGlobalId (MyString & id)		5603540	0					
ANR	5603542	CompoundStatement		1382:0:33600:33970	5603540	0					
ANR	5603543	IdentifierDeclStatement	UtcTime utc ;	1383:1:33603:33614	5603540	0	True				
ANR	5603544	IdentifierDecl	utc		5603540	0					
ANR	5603545	IdentifierDeclType	UtcTime		5603540	0					
ANR	5603546	Identifier	utc		5603540	1					
ANR	5603547	ExpressionStatement	utc . getTime ( )	1384:1:33617:33630	5603540	1	True				
ANR	5603548	CallExpression	utc . getTime ( )		5603540	0					
ANR	5603549	Callee	utc . getTime		5603540	0					
ANR	5603550	MemberAccess	utc . getTime		5603540	0					
ANR	5603551	Identifier	utc		5603540	0					
ANR	5603552	Identifier	getTime		5603540	1					
ANR	5603553	ArgumentList			5603540	1					
ANR	5603554	ExpressionStatement	"id = """""	1386:1:33634:33641	5603540	2	True				
ANR	5603555	AssignmentExpression	"id = """""		5603540	0		=			
ANR	5603556	Identifier	id		5603540	0					
ANR	5603557	PrimaryExpression	""""""		5603540	1					
ANR	5603558	IfStatement	if ( m_creator_name )		5603540	3					
ANR	5603559	Condition	m_creator_name	1389:6:33678:33691	5603540	0	True				
ANR	5603560	Identifier	m_creator_name		5603540	0					
ANR	5603561	CompoundStatement		8:23:94:94	5603540	1					
ANR	5603562	ExpressionStatement	id += m_creator_name	1390:2:33699:33719	5603540	0	True				
ANR	5603563	AssignmentExpression	id += m_creator_name		5603540	0		+=			
ANR	5603564	Identifier	id		5603540	0					
ANR	5603565	Identifier	m_creator_name		5603540	1					
ANR	5603566	ExpressionStatement	"id += ""."""	1391:2:33723:33732	5603540	1	True				
ANR	5603567	AssignmentExpression	"id += ""."""		5603540	0		+=			
ANR	5603568	Identifier	id		5603540	0					
ANR	5603569	PrimaryExpression	"""."""		5603540	1					
ANR	5603570	ExpressionStatement	id += GetGlobalIdBase ( )	1394:1:33739:33763	5603540	4	True				
ANR	5603571	AssignmentExpression	id += GetGlobalIdBase ( )		5603540	0		+=			
ANR	5603572	Identifier	id		5603540	0					
ANR	5603573	CallExpression	GetGlobalIdBase ( )		5603540	1					
ANR	5603574	Callee	GetGlobalIdBase		5603540	0					
ANR	5603575	Identifier	GetGlobalIdBase		5603540	0					
ANR	5603576	ArgumentList			5603540	1					
ANR	5603577	IfStatement	if ( m_global_sequence == 0 )		5603540	5					
ANR	5603578	Condition	m_global_sequence == 0	1397:6:33816:33837	5603540	0	True				
ANR	5603579	EqualityExpression	m_global_sequence == 0		5603540	0		==			
ANR	5603580	Identifier	m_global_sequence		5603540	0					
ANR	5603581	PrimaryExpression	0		5603540	1					
ANR	5603582	CompoundStatement		16:31:240:240	5603540	1					
ANR	5603583	ExpressionStatement	m_global_sequence = 1	1398:2:33845:33866	5603540	0	True				
ANR	5603584	AssignmentExpression	m_global_sequence = 1		5603540	0		=			
ANR	5603585	Identifier	m_global_sequence		5603540	0					
ANR	5603586	PrimaryExpression	1		5603540	1					
ANR	5603587	ExpressionStatement	id += m_global_sequence	1400:1:33872:33895	5603540	6	True				
ANR	5603588	AssignmentExpression	id += m_global_sequence		5603540	0		+=			
ANR	5603589	Identifier	id		5603540	0					
ANR	5603590	Identifier	m_global_sequence		5603540	1					
ANR	5603591	ExpressionStatement	id += '.'	1401:1:33898:33907	5603540	7	True				
ANR	5603592	AssignmentExpression	id += '.'		5603540	0		+=			
ANR	5603593	Identifier	id		5603540	0					
ANR	5603594	PrimaryExpression	'.'		5603540	1					
ANR	5603595	ExpressionStatement	id += utc . seconds ( )	1402:1:33910:33929	5603540	8	True				
ANR	5603596	AssignmentExpression	id += utc . seconds ( )		5603540	0		+=			
ANR	5603597	Identifier	id		5603540	0					
ANR	5603598	CallExpression	utc . seconds ( )		5603540	1					
ANR	5603599	Callee	utc . seconds		5603540	0					
ANR	5603600	MemberAccess	utc . seconds		5603540	0					
ANR	5603601	Identifier	utc		5603540	0					
ANR	5603602	Identifier	seconds		5603540	1					
ANR	5603603	ArgumentList			5603540	1					
ANR	5603604	ExpressionStatement	id += '.'	1403:1:33932:33941	5603540	9	True				
ANR	5603605	AssignmentExpression	id += '.'		5603540	0		+=			
ANR	5603606	Identifier	id		5603540	0					
ANR	5603607	PrimaryExpression	'.'		5603540	1					
ANR	5603608	ExpressionStatement	id += utc . microseconds ( )	1404:1:33944:33968	5603540	10	True				
ANR	5603609	AssignmentExpression	id += utc . microseconds ( )		5603540	0		+=			
ANR	5603610	Identifier	id		5603540	0					
ANR	5603611	CallExpression	utc . microseconds ( )		5603540	1					
ANR	5603612	Callee	utc . microseconds		5603540	0					
ANR	5603613	MemberAccess	utc . microseconds		5603540	0					
ANR	5603614	Identifier	utc		5603540	0					
ANR	5603615	Identifier	microseconds		5603540	1					
ANR	5603616	ArgumentList			5603540	1					
ANR	5603617	ReturnType	void		5603540	1					
ANR	5603618	Identifier	WriteUserLog :: GenerateGlobalId		5603540	2					
ANR	5603619	ParameterList	MyString & id		5603540	3					
ANR	5603620	Parameter	MyString & id	1381:32:33585:33596	5603540	0	True				
ANR	5603621	ParameterType	MyString &		5603540	0					
ANR	5603622	Identifier	id		5603540	1					
ANR	5603623	CFGEntryNode	ENTRY		5603540		True				
ANR	5603624	CFGExitNode	EXIT		5603540		True				
ANR	5603625	Symbol	m_creator_name		5603540						
ANR	5603626	Symbol	utc		5603540						
ANR	5603627	Symbol	id		5603540						
ANR	5603628	Symbol	m_global_sequence		5603540						
ANR	5603629	Symbol	utc . seconds		5603540						
ANR	5603630	Symbol	GetGlobalIdBase		5603540						
ANR	5603631	Symbol	utc . microseconds		5603540						
ANR	5603632	Function	WriteUserLog :: setEnableFsync	1413:0:34054:34131							
ANR	5603633	FunctionDef	WriteUserLog :: setEnableFsync (bool enabled)		5603632	0					
ANR	5603634	CompoundStatement		1414:43:34102:34131	5603632	0					
ANR	5603635	ExpressionStatement	m_enable_fsync = enabled	1415:1:34105:34129	5603632	0	True				
ANR	5603636	AssignmentExpression	m_enable_fsync = enabled		5603632	0		=			
ANR	5603637	Identifier	m_enable_fsync		5603632	0					
ANR	5603638	Identifier	enabled		5603632	1					
ANR	5603639	ReturnType	void		5603632	1					
ANR	5603640	Identifier	WriteUserLog :: setEnableFsync		5603632	2					
ANR	5603641	ParameterList	bool enabled		5603632	3					
ANR	5603642	Parameter	bool enabled	1414:29:34088:34099	5603632	0	True				
ANR	5603643	ParameterType	bool		5603632	0					
ANR	5603644	Identifier	enabled		5603632	1					
ANR	5603645	CFGEntryNode	ENTRY		5603632		True				
ANR	5603646	CFGExitNode	EXIT		5603632		True				
ANR	5603647	Symbol	m_enable_fsync		5603632						
ANR	5603648	Symbol	enabled		5603632						
ANR	5603649	Function	WriteUserLog :: getEnableFsync	1418:0:34134:34196							
ANR	5603650	FunctionDef	WriteUserLog :: getEnableFsync ()		5603649	0					
ANR	5603651	CompoundStatement		1419:31:34170:34196	5603649	0					
ANR	5603652	ReturnStatement	return m_enable_fsync ;	1420:1:34173:34194	5603649	0	True				
ANR	5603653	Identifier	m_enable_fsync		5603649	0					
ANR	5603654	ReturnType	bool		5603649	1					
ANR	5603655	Identifier	WriteUserLog :: getEnableFsync		5603649	2					
ANR	5603656	ParameterList			5603649	3					
ANR	5603657	CFGEntryNode	ENTRY		5603649		True				
ANR	5603658	CFGExitNode	EXIT		5603649		True				
ANR	5603659	Symbol	m_enable_fsync		5603649						
