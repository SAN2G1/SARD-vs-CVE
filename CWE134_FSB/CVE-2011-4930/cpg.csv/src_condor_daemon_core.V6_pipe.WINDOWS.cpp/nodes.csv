command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3088601	File	data/converged/CVE-2011-4930_htcondor/src_condor_daemon_core.V6_pipe.WINDOWS.cpp								
ANR	3088602	DeclStmt									
ANR	3088603	Decl							extern CRITICAL_SECTION	extern CRITICAL_SECTION	Big_fat_mutex
ANR	3088604	Function	PipeEnd :: PipeEnd	26:0:926:1702							
ANR	3088605	FunctionDef	"PipeEnd :: PipeEnd (HANDLE handle , bool overlapped , bool nonblocking , int pipe_size)"		3088604	0					
ANR	3088606	CompoundStatement		30:0:1155:1702	3088604	0					
ANR	3088607	IdentifierDeclStatement	MyString event_name ;	31:1:1158:1177	3088604	0	True				
ANR	3088608	IdentifierDecl	event_name		3088604	0					
ANR	3088609	IdentifierDeclType	MyString		3088604	0					
ANR	3088610	Identifier	event_name		3088604	1					
ANR	3088611	ExpressionStatement	"event_name . sprintf ( ""pipe_event_%d_%x"" , GetCurrentProcessId ( ) , m_handle )"	35:1:1281:1352	3088604	1	True				
ANR	3088612	CallExpression	"event_name . sprintf ( ""pipe_event_%d_%x"" , GetCurrentProcessId ( ) , m_handle )"		3088604	0					
ANR	3088613	Callee	event_name . sprintf		3088604	0					
ANR	3088614	MemberAccess	event_name . sprintf		3088604	0					
ANR	3088615	Identifier	event_name		3088604	0					
ANR	3088616	Identifier	sprintf		3088604	1					
ANR	3088617	ArgumentList	"""pipe_event_%d_%x"""		3088604	1					
ANR	3088618	Argument	"""pipe_event_%d_%x"""		3088604	0					
ANR	3088619	PrimaryExpression	"""pipe_event_%d_%x"""		3088604	0					
ANR	3088620	Argument	GetCurrentProcessId ( )		3088604	1					
ANR	3088621	CallExpression	GetCurrentProcessId ( )		3088604	0					
ANR	3088622	Callee	GetCurrentProcessId		3088604	0					
ANR	3088623	Identifier	GetCurrentProcessId		3088604	0					
ANR	3088624	ArgumentList			3088604	1					
ANR	3088625	Argument	m_handle		3088604	2					
ANR	3088626	Identifier	m_handle		3088604	0					
ANR	3088627	ExpressionStatement	"m_event = CreateEvent ( NULL , TRUE , TRUE , event_name . Value ( ) )"	36:1:1355:1416	3088604	2	True				
ANR	3088628	AssignmentExpression	"m_event = CreateEvent ( NULL , TRUE , TRUE , event_name . Value ( ) )"		3088604	0		=			
ANR	3088629	Identifier	m_event		3088604	0					
ANR	3088630	CallExpression	"CreateEvent ( NULL , TRUE , TRUE , event_name . Value ( ) )"		3088604	1					
ANR	3088631	Callee	CreateEvent		3088604	0					
ANR	3088632	Identifier	CreateEvent		3088604	0					
ANR	3088633	ArgumentList	NULL		3088604	1					
ANR	3088634	Argument	NULL		3088604	0					
ANR	3088635	Identifier	NULL		3088604	0					
ANR	3088636	Argument	TRUE		3088604	1					
ANR	3088637	Identifier	TRUE		3088604	0					
ANR	3088638	Argument	TRUE		3088604	2					
ANR	3088639	Identifier	TRUE		3088604	0					
ANR	3088640	Argument	event_name . Value ( )		3088604	3					
ANR	3088641	CallExpression	event_name . Value ( )		3088604	0					
ANR	3088642	Callee	event_name . Value		3088604	0					
ANR	3088643	MemberAccess	event_name . Value		3088604	0					
ANR	3088644	Identifier	event_name		3088604	0					
ANR	3088645	Identifier	Value		3088604	1					
ANR	3088646	ArgumentList			3088604	1					
ANR	3088647	ExpressionStatement	ASSERT ( m_event )	37:1:1419:1434	3088604	3	True				
ANR	3088648	CallExpression	ASSERT ( m_event )		3088604	0					
ANR	3088649	Callee	ASSERT		3088604	0					
ANR	3088650	Identifier	ASSERT		3088604	0					
ANR	3088651	ArgumentList	m_event		3088604	1					
ANR	3088652	Argument	m_event		3088604	0					
ANR	3088653	Identifier	m_event		3088604	0					
ANR	3088654	ExpressionStatement	"event_name . sprintf ( ""pipe_watched_event_%d_%x"" , GetCurrentProcessId ( ) , m_handle )"	41:1:1522:1604	3088604	4	True				
ANR	3088655	CallExpression	"event_name . sprintf ( ""pipe_watched_event_%d_%x"" , GetCurrentProcessId ( ) , m_handle )"		3088604	0					
ANR	3088656	Callee	event_name . sprintf		3088604	0					
ANR	3088657	MemberAccess	event_name . sprintf		3088604	0					
ANR	3088658	Identifier	event_name		3088604	0					
ANR	3088659	Identifier	sprintf		3088604	1					
ANR	3088660	ArgumentList	"""pipe_watched_event_%d_%x"""		3088604	1					
ANR	3088661	Argument	"""pipe_watched_event_%d_%x"""		3088604	0					
ANR	3088662	PrimaryExpression	"""pipe_watched_event_%d_%x"""		3088604	0					
ANR	3088663	Argument	GetCurrentProcessId ( )		3088604	1					
ANR	3088664	CallExpression	GetCurrentProcessId ( )		3088604	0					
ANR	3088665	Callee	GetCurrentProcessId		3088604	0					
ANR	3088666	Identifier	GetCurrentProcessId		3088604	0					
ANR	3088667	ArgumentList			3088604	1					
ANR	3088668	Argument	m_handle		3088604	2					
ANR	3088669	Identifier	m_handle		3088604	0					
ANR	3088670	ExpressionStatement	"m_watched_event = CreateEvent ( NULL , TRUE , TRUE , event_name . Value ( ) )"	43:1:1607:1674	3088604	5	True				
ANR	3088671	AssignmentExpression	"m_watched_event = CreateEvent ( NULL , TRUE , TRUE , event_name . Value ( ) )"		3088604	0		=			
ANR	3088672	Identifier	m_watched_event		3088604	0					
ANR	3088673	CallExpression	"CreateEvent ( NULL , TRUE , TRUE , event_name . Value ( ) )"		3088604	1					
ANR	3088674	Callee	CreateEvent		3088604	0					
ANR	3088675	Identifier	CreateEvent		3088604	0					
ANR	3088676	ArgumentList	NULL		3088604	1					
ANR	3088677	Argument	NULL		3088604	0					
ANR	3088678	Identifier	NULL		3088604	0					
ANR	3088679	Argument	TRUE		3088604	1					
ANR	3088680	Identifier	TRUE		3088604	0					
ANR	3088681	Argument	TRUE		3088604	2					
ANR	3088682	Identifier	TRUE		3088604	0					
ANR	3088683	Argument	event_name . Value ( )		3088604	3					
ANR	3088684	CallExpression	event_name . Value ( )		3088604	0					
ANR	3088685	Callee	event_name . Value		3088604	0					
ANR	3088686	MemberAccess	event_name . Value		3088604	0					
ANR	3088687	Identifier	event_name		3088604	0					
ANR	3088688	Identifier	Value		3088604	1					
ANR	3088689	ArgumentList			3088604	1					
ANR	3088690	ExpressionStatement	ASSERT ( m_watched_event )	44:1:1677:1700	3088604	6	True				
ANR	3088691	CallExpression	ASSERT ( m_watched_event )		3088604	0					
ANR	3088692	Callee	ASSERT		3088604	0					
ANR	3088693	Identifier	ASSERT		3088604	0					
ANR	3088694	ArgumentList	m_watched_event		3088604	1					
ANR	3088695	Argument	m_watched_event		3088604	0					
ANR	3088696	Identifier	m_watched_event		3088604	0					
ANR	3088697	Identifier	PipeEnd :: PipeEnd		3088604	1					
ANR	3088698	ParameterList	"HANDLE handle , bool overlapped , bool nonblocking , int pipe_size"		3088604	2					
ANR	3088699	Parameter	HANDLE handle	26:17:943:955	3088604	0	True				
ANR	3088700	ParameterType	HANDLE		3088604	0					
ANR	3088701	Identifier	handle		3088604	1					
ANR	3088702	Parameter	bool overlapped	26:32:958:972	3088604	1	True				
ANR	3088703	ParameterType	bool		3088604	0					
ANR	3088704	Identifier	overlapped		3088604	1					
ANR	3088705	Parameter	bool nonblocking	26:49:975:990	3088604	2	True				
ANR	3088706	ParameterType	bool		3088604	0					
ANR	3088707	Identifier	nonblocking		3088604	1					
ANR	3088708	Parameter	int pipe_size	26:67:993:1005	3088604	3	True				
ANR	3088709	ParameterType	int		3088604	0					
ANR	3088710	Identifier	pipe_size		3088604	1					
ANR	3088711	CFGEntryNode	ENTRY		3088604		True				
ANR	3088712	CFGExitNode	EXIT		3088604		True				
ANR	3088713	Symbol	m_event		3088604						
ANR	3088714	Symbol	NULL		3088604						
ANR	3088715	Symbol	nonblocking		3088604						
ANR	3088716	Symbol	m_handle		3088604						
ANR	3088717	Symbol	TRUE		3088604						
ANR	3088718	Symbol	handle		3088604						
ANR	3088719	Symbol	GetCurrentProcessId		3088604						
ANR	3088720	Symbol	CreateEvent		3088604						
ANR	3088721	Symbol	event_name . Value		3088604						
ANR	3088722	Symbol	m_watched_event		3088604						
ANR	3088723	Symbol	event_name		3088604						
ANR	3088724	Symbol	pipe_size		3088604						
ANR	3088725	Symbol	overlapped		3088604						
ANR	3088726	Function	PipeEnd :: ~PipeEnd	48:0:1744:1910							
ANR	3088727	FunctionDef	PipeEnd :: ~PipeEnd ()		3088726	0					
ANR	3088728	CompoundStatement		49:0:1764:1910	3088726	0					
ANR	3088729	ExpressionStatement	ASSERT ( ! m_registered )	51:1:1808:1829	3088726	0	True				
ANR	3088730	CallExpression	ASSERT ( ! m_registered )		3088726	0					
ANR	3088731	Callee	ASSERT		3088726	0					
ANR	3088732	Identifier	ASSERT		3088726	0					
ANR	3088733	ArgumentList	! m_registered		3088726	1					
ANR	3088734	Argument	! m_registered		3088726	0					
ANR	3088735	UnaryOperationExpression	! m_registered		3088726	0					
ANR	3088736	UnaryOperator	!		3088726	0					
ANR	3088737	Identifier	m_registered		3088726	1					
ANR	3088738	ExpressionStatement	CloseHandle ( m_watched_event )	53:1:1833:1861	3088726	1	True				
ANR	3088739	CallExpression	CloseHandle ( m_watched_event )		3088726	0					
ANR	3088740	Callee	CloseHandle		3088726	0					
ANR	3088741	Identifier	CloseHandle		3088726	0					
ANR	3088742	ArgumentList	m_watched_event		3088726	1					
ANR	3088743	Argument	m_watched_event		3088726	0					
ANR	3088744	Identifier	m_watched_event		3088726	0					
ANR	3088745	ExpressionStatement	CloseHandle ( m_event )	54:1:1864:1884	3088726	2	True				
ANR	3088746	CallExpression	CloseHandle ( m_event )		3088726	0					
ANR	3088747	Callee	CloseHandle		3088726	0					
ANR	3088748	Identifier	CloseHandle		3088726	0					
ANR	3088749	ArgumentList	m_event		3088726	1					
ANR	3088750	Argument	m_event		3088726	0					
ANR	3088751	Identifier	m_event		3088726	0					
ANR	3088752	ExpressionStatement	CloseHandle ( m_handle )	55:1:1887:1908	3088726	3	True				
ANR	3088753	CallExpression	CloseHandle ( m_handle )		3088726	0					
ANR	3088754	Callee	CloseHandle		3088726	0					
ANR	3088755	Identifier	CloseHandle		3088726	0					
ANR	3088756	ArgumentList	m_handle		3088726	1					
ANR	3088757	Argument	m_handle		3088726	0					
ANR	3088758	Identifier	m_handle		3088726	0					
ANR	3088759	Identifier	PipeEnd :: ~PipeEnd		3088726	1					
ANR	3088760	ParameterList			3088726	2					
ANR	3088761	CFGEntryNode	ENTRY		3088726		True				
ANR	3088762	CFGExitNode	EXIT		3088726		True				
ANR	3088763	Symbol	m_event		3088726						
ANR	3088764	Symbol	m_registered		3088726						
ANR	3088765	Symbol	m_watched_event		3088726						
ANR	3088766	Symbol	m_handle		3088726						
ANR	3088767	Function	PipeEnd :: WaitForSingleObject	61:0:2078:2361							
ANR	3088768	FunctionDef	"PipeEnd :: WaitForSingleObject (HANDLE handle , DWORD millisecs)"		3088767	0					
ANR	3088769	CompoundStatement		62:0:2145:2361	3088767	0					
ANR	3088770	IdentifierDeclStatement	DWORD result ;	63:1:2148:2160	3088767	0	True				
ANR	3088771	IdentifierDecl	result		3088767	0					
ANR	3088772	IdentifierDeclType	DWORD		3088767	0					
ANR	3088773	Identifier	result		3088767	1					
ANR	3088774	Statement	::	65:1:2164:2165	3088767	1	True				
ANR	3088775	ExpressionStatement	LeaveCriticalSection ( & Big_fat_mutex )	65:3:2166:2202	3088767	2	True				
ANR	3088776	CallExpression	LeaveCriticalSection ( & Big_fat_mutex )		3088767	0					
ANR	3088777	Callee	LeaveCriticalSection		3088767	0					
ANR	3088778	Identifier	LeaveCriticalSection		3088767	0					
ANR	3088779	ArgumentList	& Big_fat_mutex		3088767	1					
ANR	3088780	Argument	& Big_fat_mutex		3088767	0					
ANR	3088781	UnaryOperationExpression	& Big_fat_mutex		3088767	0					
ANR	3088782	UnaryOperator	&		3088767	0					
ANR	3088783	Identifier	Big_fat_mutex		3088767	1					
ANR	3088784	Statement	result	66:1:2230:2235	3088767	3	True				
ANR	3088785	Statement	=	66:8:2237:2237	3088767	4	True				
ANR	3088786	Statement	::	66:10:2239:2240	3088767	5	True				
ANR	3088787	ExpressionStatement	"WaitForSingleObject ( handle , millisecs )"	66:12:2241:2278	3088767	6	True				
ANR	3088788	CallExpression	"WaitForSingleObject ( handle , millisecs )"		3088767	0					
ANR	3088789	Callee	WaitForSingleObject		3088767	0					
ANR	3088790	Identifier	WaitForSingleObject		3088767	0					
ANR	3088791	ArgumentList	handle		3088767	1					
ANR	3088792	Argument	handle		3088767	0					
ANR	3088793	Identifier	handle		3088767	0					
ANR	3088794	Argument	millisecs		3088767	1					
ANR	3088795	Identifier	millisecs		3088767	0					
ANR	3088796	Statement	::	67:1:2281:2282	3088767	7	True				
ANR	3088797	ExpressionStatement	EnterCriticalSection ( & Big_fat_mutex )	67:3:2283:2319	3088767	8	True				
ANR	3088798	CallExpression	EnterCriticalSection ( & Big_fat_mutex )		3088767	0					
ANR	3088799	Callee	EnterCriticalSection		3088767	0					
ANR	3088800	Identifier	EnterCriticalSection		3088767	0					
ANR	3088801	ArgumentList	& Big_fat_mutex		3088767	1					
ANR	3088802	Argument	& Big_fat_mutex		3088767	0					
ANR	3088803	UnaryOperationExpression	& Big_fat_mutex		3088767	0					
ANR	3088804	UnaryOperator	&		3088767	0					
ANR	3088805	Identifier	Big_fat_mutex		3088767	1					
ANR	3088806	ReturnStatement	return result ;	69:1:2346:2359	3088767	9	True				
ANR	3088807	Identifier	result		3088767	0					
ANR	3088808	ReturnType	DWORD		3088767	1					
ANR	3088809	Identifier	PipeEnd :: WaitForSingleObject		3088767	2					
ANR	3088810	ParameterList	"HANDLE handle , DWORD millisecs"		3088767	3					
ANR	3088811	Parameter	HANDLE handle	61:35:2113:2125	3088767	0	True				
ANR	3088812	ParameterType	HANDLE		3088767	0					
ANR	3088813	Identifier	handle		3088767	1					
ANR	3088814	Parameter	DWORD millisecs	61:50:2128:2142	3088767	1	True				
ANR	3088815	ParameterType	DWORD		3088767	0					
ANR	3088816	Identifier	millisecs		3088767	1					
ANR	3088817	CFGEntryNode	ENTRY		3088767		True				
ANR	3088818	CFGExitNode	EXIT		3088767		True				
ANR	3088819	Symbol	result		3088767						
ANR	3088820	Symbol	& Big_fat_mutex		3088767						
ANR	3088821	Symbol	millisecs		3088767						
ANR	3088822	Symbol	handle		3088767						
ANR	3088823	Function	PipeEnd :: set_registered	73:0:2423:2550							
ANR	3088824	FunctionDef	PipeEnd :: set_registered ()		3088823	0					
ANR	3088825	CompoundStatement		74:0:2454:2550	3088823	0					
ANR	3088826	ExpressionStatement	ASSERT ( m_overlapped && ! m_registered )	75:1:2457:2494	3088823	0	True				
ANR	3088827	CallExpression	ASSERT ( m_overlapped && ! m_registered )		3088823	0					
ANR	3088828	Callee	ASSERT		3088823	0					
ANR	3088829	Identifier	ASSERT		3088823	0					
ANR	3088830	ArgumentList	m_overlapped && ! m_registered		3088823	1					
ANR	3088831	Argument	m_overlapped && ! m_registered		3088823	0					
ANR	3088832	AndExpression	m_overlapped && ! m_registered		3088823	0		&&			
ANR	3088833	Identifier	m_overlapped		3088823	0					
ANR	3088834	UnaryOperationExpression	! m_registered		3088823	1					
ANR	3088835	UnaryOperator	!		3088823	0					
ANR	3088836	Identifier	m_registered		3088823	1					
ANR	3088837	ExpressionStatement	m_registered = true	78:1:2529:2548	3088823	1	True				
ANR	3088838	AssignmentExpression	m_registered = true		3088823	0		=			
ANR	3088839	Identifier	m_registered		3088823	0					
ANR	3088840	Identifier	true		3088823	1					
ANR	3088841	ReturnType	void		3088823	1					
ANR	3088842	Identifier	PipeEnd :: set_registered		3088823	2					
ANR	3088843	ParameterList			3088823	3					
ANR	3088844	CFGEntryNode	ENTRY		3088823		True				
ANR	3088845	CFGExitNode	EXIT		3088823		True				
ANR	3088846	Symbol	m_overlapped		3088823						
ANR	3088847	Symbol	m_registered		3088823						
ANR	3088848	Symbol	true		3088823						
ANR	3088849	Function	PipeEnd :: set_watched	82:0:2598:2700							
ANR	3088850	FunctionDef	PipeEnd :: set_watched ()		3088849	0					
ANR	3088851	CompoundStatement		83:0:2626:2700	3088849	0					
ANR	3088852	ExpressionStatement	ASSERT ( m_registered && m_watched_event )	84:1:2629:2668	3088849	0	True				
ANR	3088853	CallExpression	ASSERT ( m_registered && m_watched_event )		3088849	0					
ANR	3088854	Callee	ASSERT		3088849	0					
ANR	3088855	Identifier	ASSERT		3088849	0					
ANR	3088856	ArgumentList	m_registered && m_watched_event		3088849	1					
ANR	3088857	Argument	m_registered && m_watched_event		3088849	0					
ANR	3088858	AndExpression	m_registered && m_watched_event		3088849	0		&&			
ANR	3088859	Identifier	m_registered		3088849	0					
ANR	3088860	Identifier	m_watched_event		3088849	1					
ANR	3088861	ExpressionStatement	ResetEvent ( m_watched_event )	85:1:2671:2698	3088849	1	True				
ANR	3088862	CallExpression	ResetEvent ( m_watched_event )		3088849	0					
ANR	3088863	Callee	ResetEvent		3088849	0					
ANR	3088864	Identifier	ResetEvent		3088849	0					
ANR	3088865	ArgumentList	m_watched_event		3088849	1					
ANR	3088866	Argument	m_watched_event		3088849	0					
ANR	3088867	Identifier	m_watched_event		3088849	0					
ANR	3088868	ReturnType	void		3088849	1					
ANR	3088869	Identifier	PipeEnd :: set_watched		3088849	2					
ANR	3088870	ParameterList			3088849	3					
ANR	3088871	CFGEntryNode	ENTRY		3088849		True				
ANR	3088872	CFGExitNode	EXIT		3088849		True				
ANR	3088873	Symbol	m_registered		3088849						
ANR	3088874	Symbol	m_watched_event		3088849						
ANR	3088875	Function	PipeEnd :: set_unregistered	91:0:2857:3109							
ANR	3088876	FunctionDef	PipeEnd :: set_unregistered ()		3088875	0					
ANR	3088877	CompoundStatement		92:0:2890:3109	3088875	0					
ANR	3088878	ExpressionStatement	ASSERT ( m_registered && m_watched_event )	93:1:2893:2932	3088875	0	True				
ANR	3088879	CallExpression	ASSERT ( m_registered && m_watched_event )		3088875	0					
ANR	3088880	Callee	ASSERT		3088875	0					
ANR	3088881	Identifier	ASSERT		3088875	0					
ANR	3088882	ArgumentList	m_registered && m_watched_event		3088875	1					
ANR	3088883	Argument	m_registered && m_watched_event		3088875	0					
ANR	3088884	AndExpression	m_registered && m_watched_event		3088875	0		&&			
ANR	3088885	Identifier	m_registered		3088875	0					
ANR	3088886	Identifier	m_watched_event		3088875	1					
ANR	3088887	ExpressionStatement	m_registered = false	96:1:2968:2988	3088875	1	True				
ANR	3088888	AssignmentExpression	m_registered = false		3088875	0		=			
ANR	3088889	Identifier	m_registered		3088875	0					
ANR	3088890	Identifier	false		3088875	1					
ANR	3088891	ExpressionStatement	SetEvent ( m_watched_event )	100:1:3082:3107	3088875	2	True				
ANR	3088892	CallExpression	SetEvent ( m_watched_event )		3088875	0					
ANR	3088893	Callee	SetEvent		3088875	0					
ANR	3088894	Identifier	SetEvent		3088875	0					
ANR	3088895	ArgumentList	m_watched_event		3088875	1					
ANR	3088896	Argument	m_watched_event		3088875	0					
ANR	3088897	Identifier	m_watched_event		3088875	0					
ANR	3088898	ReturnType	void		3088875	1					
ANR	3088899	Identifier	PipeEnd :: set_unregistered		3088875	2					
ANR	3088900	ParameterList			3088875	3					
ANR	3088901	CFGEntryNode	ENTRY		3088875		True				
ANR	3088902	CFGExitNode	EXIT		3088875		True				
ANR	3088903	Symbol	m_registered		3088875						
ANR	3088904	Symbol	m_watched_event		3088875						
ANR	3088905	Symbol	false		3088875						
ANR	3088906	Function	PipeEnd :: cancel	107:0:3288:3591							
ANR	3088907	FunctionDef	PipeEnd :: cancel ()		3088906	0					
ANR	3088908	CompoundStatement		108:0:3311:3591	3088906	0					
ANR	3088909	IdentifierDeclStatement	"DWORD result = WaitForSingleObject ( m_watched_event , INFINITE ) ;"	110:1:3382:3443	3088906	0	True				
ANR	3088910	IdentifierDecl	"result = WaitForSingleObject ( m_watched_event , INFINITE )"		3088906	0					
ANR	3088911	IdentifierDeclType	DWORD		3088906	0					
ANR	3088912	Identifier	result		3088906	1					
ANR	3088913	AssignmentExpression	"result = WaitForSingleObject ( m_watched_event , INFINITE )"		3088906	2		=			
ANR	3088914	Identifier	result		3088906	0					
ANR	3088915	CallExpression	"WaitForSingleObject ( m_watched_event , INFINITE )"		3088906	1					
ANR	3088916	Callee	WaitForSingleObject		3088906	0					
ANR	3088917	Identifier	WaitForSingleObject		3088906	0					
ANR	3088918	ArgumentList	m_watched_event		3088906	1					
ANR	3088919	Argument	m_watched_event		3088906	0					
ANR	3088920	Identifier	m_watched_event		3088906	0					
ANR	3088921	Argument	INFINITE		3088906	1					
ANR	3088922	Identifier	INFINITE		3088906	0					
ANR	3088923	ExpressionStatement	ASSERT ( result == WAIT_OBJECT_0 )	111:1:3446:3477	3088906	1	True				
ANR	3088924	CallExpression	ASSERT ( result == WAIT_OBJECT_0 )		3088906	0					
ANR	3088925	Callee	ASSERT		3088906	0					
ANR	3088926	Identifier	ASSERT		3088906	0					
ANR	3088927	ArgumentList	result == WAIT_OBJECT_0		3088906	1					
ANR	3088928	Argument	result == WAIT_OBJECT_0		3088906	0					
ANR	3088929	EqualityExpression	result == WAIT_OBJECT_0		3088906	0		==			
ANR	3088930	Identifier	result		3088906	0					
ANR	3088931	Identifier	WAIT_OBJECT_0		3088906	1					
ANR	3088932	IfStatement	if ( m_registered )		3088906	2					
ANR	3088933	Condition	m_registered	114:5:3550:3561	3088906	0	True				
ANR	3088934	Identifier	m_registered		3088906	0					
ANR	3088935	CompoundStatement		7:19:252:252	3088906	1					
ANR	3088936	ExpressionStatement	set_unregistered ( )	115:2:3568:3586	3088906	0	True				
ANR	3088937	CallExpression	set_unregistered ( )		3088906	0					
ANR	3088938	Callee	set_unregistered		3088906	0					
ANR	3088939	Identifier	set_unregistered		3088906	0					
ANR	3088940	ArgumentList			3088906	1					
ANR	3088941	ReturnType	void		3088906	1					
ANR	3088942	Identifier	PipeEnd :: cancel		3088906	2					
ANR	3088943	ParameterList			3088906	3					
ANR	3088944	CFGEntryNode	ENTRY		3088906		True				
ANR	3088945	CFGExitNode	EXIT		3088906		True				
ANR	3088946	Symbol	result		3088906						
ANR	3088947	Symbol	WaitForSingleObject		3088906						
ANR	3088948	Symbol	m_watched_event		3088906						
ANR	3088949	Symbol	WAIT_OBJECT_0		3088906						
ANR	3088950	Symbol	m_registered		3088906						
ANR	3088951	Symbol	INFINITE		3088906						
ANR	3088952	Function	ReadPipeEnd :: pre_wait	119:0:3594:4582							
ANR	3088953	FunctionDef	ReadPipeEnd :: pre_wait ()		3088952	0					
ANR	3088954	CompoundStatement		120:0:3625:4582	3088952	0					
ANR	3088955	ExpressionStatement	ASSERT ( m_registered )	121:1:3628:3648	3088952	0	True				
ANR	3088956	CallExpression	ASSERT ( m_registered )		3088952	0					
ANR	3088957	Callee	ASSERT		3088952	0					
ANR	3088958	Identifier	ASSERT		3088952	0					
ANR	3088959	ArgumentList	m_registered		3088952	1					
ANR	3088960	Argument	m_registered		3088952	0					
ANR	3088961	Identifier	m_registered		3088952	0					
ANR	3088962	IfStatement	if ( m_async_io_state == IO_UNSTARTED )		3088952	1					
ANR	3088963	Condition	m_async_io_state == IO_UNSTARTED	123:5:3656:3687	3088952	0	True				
ANR	3088964	EqualityExpression	m_async_io_state == IO_UNSTARTED		3088952	0		==			
ANR	3088965	Identifier	m_async_io_state		3088952	0					
ANR	3088966	Identifier	IO_UNSTARTED		3088952	1					
ANR	3088967	CompoundStatement		11:2:209:220	3088952	1					
ANR	3088968	ExpressionStatement	"ZeroMemory ( & m_overlapped_struct , sizeof ( OVERLAPPED ) )"	127:2:3738:3790	3088952	0	True				
ANR	3088969	CallExpression	"ZeroMemory ( & m_overlapped_struct , sizeof ( OVERLAPPED ) )"		3088952	0					
ANR	3088970	Callee	ZeroMemory		3088952	0					
ANR	3088971	Identifier	ZeroMemory		3088952	0					
ANR	3088972	ArgumentList	& m_overlapped_struct		3088952	1					
ANR	3088973	Argument	& m_overlapped_struct		3088952	0					
ANR	3088974	UnaryOperationExpression	& m_overlapped_struct		3088952	0					
ANR	3088975	UnaryOperator	&		3088952	0					
ANR	3088976	Identifier	m_overlapped_struct		3088952	1					
ANR	3088977	Argument	sizeof ( OVERLAPPED )		3088952	1					
ANR	3088978	SizeofExpression	sizeof ( OVERLAPPED )		3088952	0					
ANR	3088979	Sizeof	sizeof		3088952	0					
ANR	3088980	SizeofOperand	OVERLAPPED		3088952	1					
ANR	3088981	ExpressionStatement	m_overlapped_struct . hEvent = m_event	128:2:3794:3830	3088952	1	True				
ANR	3088982	AssignmentExpression	m_overlapped_struct . hEvent = m_event		3088952	0		=			
ANR	3088983	MemberAccess	m_overlapped_struct . hEvent		3088952	0					
ANR	3088984	Identifier	m_overlapped_struct		3088952	0					
ANR	3088985	Identifier	hEvent		3088952	1					
ANR	3088986	Identifier	m_event		3088952	1					
ANR	3088987	IdentifierDeclStatement	DWORD bytes ;	130:2:3835:3846	3088952	2	True				
ANR	3088988	IdentifierDecl	bytes		3088952	0					
ANR	3088989	IdentifierDeclType	DWORD		3088952	0					
ANR	3088990	Identifier	bytes		3088952	1					
ANR	3088991	IfStatement	"if ( ReadFile ( m_handle , & m_async_io_buf , 1 , & bytes , & m_overlapped_struct ) )"		3088952	3					
ANR	3088992	Condition	"ReadFile ( m_handle , & m_async_io_buf , 1 , & bytes , & m_overlapped_struct )"	131:6:3854:3945	3088952	0	True				
ANR	3088993	CallExpression	"ReadFile ( m_handle , & m_async_io_buf , 1 , & bytes , & m_overlapped_struct )"		3088952	0					
ANR	3088994	Callee	ReadFile		3088952	0					
ANR	3088995	Identifier	ReadFile		3088952	0					
ANR	3088996	ArgumentList	m_handle		3088952	1					
ANR	3088997	Argument	m_handle		3088952	0					
ANR	3088998	Identifier	m_handle		3088952	0					
ANR	3088999	Argument	& m_async_io_buf		3088952	1					
ANR	3089000	UnaryOperationExpression	& m_async_io_buf		3088952	0					
ANR	3089001	UnaryOperator	&		3088952	0					
ANR	3089002	Identifier	m_async_io_buf		3088952	1					
ANR	3089003	Argument	1		3088952	2					
ANR	3089004	PrimaryExpression	1		3088952	0					
ANR	3089005	Argument	& bytes		3088952	3					
ANR	3089006	UnaryOperationExpression	& bytes		3088952	0					
ANR	3089007	UnaryOperator	&		3088952	0					
ANR	3089008	Identifier	bytes		3088952	1					
ANR	3089009	Argument	& m_overlapped_struct		3088952	4					
ANR	3089010	UnaryOperationExpression	& m_overlapped_struct		3088952	0					
ANR	3089011	UnaryOperator	&		3088952	0					
ANR	3089012	Identifier	m_overlapped_struct		3088952	1					
ANR	3089013	CompoundStatement		17:4:325:325	3088952	1					
ANR	3089014	ExpressionStatement	m_async_io_state = IO_DONE	138:3:4023:4049	3088952	0	True				
ANR	3089015	AssignmentExpression	m_async_io_state = IO_DONE		3088952	0		=			
ANR	3089016	Identifier	m_async_io_state		3088952	0					
ANR	3089017	Identifier	IO_DONE		3088952	1					
ANR	3089018	IfStatement	if ( bytes == 0 )		3088952	1					
ANR	3089019	Condition	bytes == 0	139:7:4058:4067	3088952	0	True				
ANR	3089020	EqualityExpression	bytes == 0		3088952	0		==			
ANR	3089021	Identifier	bytes		3088952	0					
ANR	3089022	PrimaryExpression	0		3088952	1					
ANR	3089023	CompoundStatement		20:19:444:444	3088952	1					
ANR	3089024	ExpressionStatement	m_async_io_error = ERROR_HANDLE_EOF	140:4:4076:4111	3088952	0	True				
ANR	3089025	AssignmentExpression	m_async_io_error = ERROR_HANDLE_EOF		3088952	0		=			
ANR	3089026	Identifier	m_async_io_error		3088952	0					
ANR	3089027	Identifier	ERROR_HANDLE_EOF		3088952	1					
ANR	3089028	ElseStatement	else		3088952	0					
ANR	3089029	CompoundStatement		23:8:500:500	3088952	0					
ANR	3089030	ExpressionStatement	m_async_io_error = 0	143:4:4132:4152	3088952	0	True				
ANR	3089031	AssignmentExpression	m_async_io_error = 0		3088952	0		=			
ANR	3089032	Identifier	m_async_io_error		3088952	0					
ANR	3089033	PrimaryExpression	0		3088952	1					
ANR	3089034	ElseStatement	else		3088952	0					
ANR	3089035	IfStatement	if ( GetLastError ( ) == ERROR_IO_PENDING )		3088952	0					
ANR	3089036	Condition	GetLastError ( ) == ERROR_IO_PENDING	146:11:4174:4207	3088952	0	True				
ANR	3089037	EqualityExpression	GetLastError ( ) == ERROR_IO_PENDING		3088952	0		==			
ANR	3089038	CallExpression	GetLastError ( )		3088952	0					
ANR	3089039	Callee	GetLastError		3088952	0					
ANR	3089040	Identifier	GetLastError		3088952	0					
ANR	3089041	ArgumentList			3088952	1					
ANR	3089042	Identifier	ERROR_IO_PENDING		3088952	1					
ANR	3089043	CompoundStatement		27:47:584:584	3088952	1					
ANR	3089044	ExpressionStatement	m_async_io_state = IO_PENDING	149:3:4306:4335	3088952	0	True				
ANR	3089045	AssignmentExpression	m_async_io_state = IO_PENDING		3088952	0		=			
ANR	3089046	Identifier	m_async_io_state		3088952	0					
ANR	3089047	Identifier	IO_PENDING		3088952	1					
ANR	3089048	ExpressionStatement	m_async_io_error = 0	150:3:4340:4360	3088952	1	True				
ANR	3089049	AssignmentExpression	m_async_io_error = 0		3088952	0		=			
ANR	3089050	Identifier	m_async_io_error		3088952	0					
ANR	3089051	PrimaryExpression	0		3088952	1					
ANR	3089052	ElseStatement	else		3088952	0					
ANR	3089053	CompoundStatement		33:7:747:747	3088952	0					
ANR	3089054	ExpressionStatement	m_async_io_state = IO_DONE	155:3:4469:4495	3088952	0	True				
ANR	3089055	AssignmentExpression	m_async_io_state = IO_DONE		3088952	0		=			
ANR	3089056	Identifier	m_async_io_state		3088952	0					
ANR	3089057	Identifier	IO_DONE		3088952	1					
ANR	3089058	ExpressionStatement	m_async_io_error = GetLastError ( )	156:3:4500:4533	3088952	1	True				
ANR	3089059	AssignmentExpression	m_async_io_error = GetLastError ( )		3088952	0		=			
ANR	3089060	Identifier	m_async_io_error		3088952	0					
ANR	3089061	CallExpression	GetLastError ( )		3088952	1					
ANR	3089062	Callee	GetLastError		3088952	0					
ANR	3089063	Identifier	GetLastError		3088952	0					
ANR	3089064	ArgumentList			3088952	1					
ANR	3089065	ExpressionStatement	SetEvent ( m_event )	157:3:4538:4555	3088952	2	True				
ANR	3089066	CallExpression	SetEvent ( m_event )		3088952	0					
ANR	3089067	Callee	SetEvent		3088952	0					
ANR	3089068	Identifier	SetEvent		3088952	0					
ANR	3089069	ArgumentList	m_event		3088952	1					
ANR	3089070	Argument	m_event		3088952	0					
ANR	3089071	Identifier	m_event		3088952	0					
ANR	3089072	ReturnStatement	return m_event ;	161:1:4566:4580	3088952	2	True				
ANR	3089073	Identifier	m_event		3088952	0					
ANR	3089074	ReturnType	HANDLE		3088952	1					
ANR	3089075	Identifier	ReadPipeEnd :: pre_wait		3088952	2					
ANR	3089076	ParameterList			3088952	3					
ANR	3089077	CFGEntryNode	ENTRY		3088952		True				
ANR	3089078	CFGExitNode	EXIT		3088952		True				
ANR	3089079	Symbol	m_async_io_error		3088952						
ANR	3089080	Symbol	m_event		3088952						
ANR	3089081	Symbol	IO_PENDING		3088952						
ANR	3089082	Symbol	m_async_io_state		3088952						
ANR	3089083	Symbol	ERROR_IO_PENDING		3088952						
ANR	3089084	Symbol	IO_UNSTARTED		3088952						
ANR	3089085	Symbol	m_overlapped_struct . hEvent		3088952						
ANR	3089086	Symbol	m_handle		3088952						
ANR	3089087	Symbol	IO_DONE		3088952						
ANR	3089088	Symbol	ReadFile		3088952						
ANR	3089089	Symbol	& m_async_io_buf		3088952						
ANR	3089090	Symbol	ERROR_HANDLE_EOF		3088952						
ANR	3089091	Symbol	& bytes		3088952						
ANR	3089092	Symbol	& m_overlapped_struct		3088952						
ANR	3089093	Symbol	bytes		3088952						
ANR	3089094	Symbol	GetLastError		3088952						
ANR	3089095	Symbol	m_registered		3088952						
ANR	3089096	Symbol	m_overlapped_struct		3088952						
ANR	3089097	Function	ReadPipeEnd :: post_wait	164:0:4585:5087							
ANR	3089098	FunctionDef	ReadPipeEnd :: post_wait ()		3089097	0					
ANR	3089099	CompoundStatement		165:0:4615:5087	3089097	0					
ANR	3089100	IfStatement	if ( m_async_io_state == IO_PENDING )		3089097	0					
ANR	3089101	Condition	m_async_io_state == IO_PENDING	166:5:4622:4651	3089097	0	True				
ANR	3089102	EqualityExpression	m_async_io_state == IO_PENDING		3089097	0		==			
ANR	3089103	Identifier	m_async_io_state		3089097	0					
ANR	3089104	Identifier	IO_PENDING		3089097	1					
ANR	3089105	CompoundStatement		3:2:42:53	3089097	1					
ANR	3089106	IdentifierDeclStatement	DWORD bytes ;	167:2:4658:4669	3089097	0	True				
ANR	3089107	IdentifierDecl	bytes		3089097	0					
ANR	3089108	IdentifierDeclType	DWORD		3089097	0					
ANR	3089109	Identifier	bytes		3089097	1					
ANR	3089110	IfStatement	"if ( ! GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE ) )"		3089097	1					
ANR	3089111	Condition	"! GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"	168:6:4677:4742	3089097	0	True				
ANR	3089112	UnaryOperationExpression	"! GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"		3089097	0					
ANR	3089113	UnaryOperator	!		3089097	0					
ANR	3089114	CallExpression	"GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"		3089097	1					
ANR	3089115	Callee	GetOverlappedResult		3089097	0					
ANR	3089116	Identifier	GetOverlappedResult		3089097	0					
ANR	3089117	ArgumentList	m_handle		3089097	1					
ANR	3089118	Argument	m_handle		3089097	0					
ANR	3089119	Identifier	m_handle		3089097	0					
ANR	3089120	Argument	& m_overlapped_struct		3089097	1					
ANR	3089121	UnaryOperationExpression	& m_overlapped_struct		3089097	0					
ANR	3089122	UnaryOperator	&		3089097	0					
ANR	3089123	Identifier	m_overlapped_struct		3089097	1					
ANR	3089124	Argument	& bytes		3089097	2					
ANR	3089125	UnaryOperationExpression	& bytes		3089097	0					
ANR	3089126	UnaryOperator	&		3089097	0					
ANR	3089127	Identifier	bytes		3089097	1					
ANR	3089128	Argument	TRUE		3089097	3					
ANR	3089129	Identifier	TRUE		3089097	0					
ANR	3089130	CompoundStatement		4:74:129:129	3089097	1					
ANR	3089131	ExpressionStatement	m_async_io_error = GetLastError ( )	169:3:4750:4783	3089097	0	True				
ANR	3089132	AssignmentExpression	m_async_io_error = GetLastError ( )		3089097	0		=			
ANR	3089133	Identifier	m_async_io_error		3089097	0					
ANR	3089134	CallExpression	GetLastError ( )		3089097	1					
ANR	3089135	Callee	GetLastError		3089097	0					
ANR	3089136	Identifier	GetLastError		3089097	0					
ANR	3089137	ArgumentList			3089097	1					
ANR	3089138	ElseStatement	else		3089097	0					
ANR	3089139	IfStatement	if ( bytes == 0 )		3089097	0					
ANR	3089140	Condition	bytes == 0	171:11:4800:4809	3089097	0	True				
ANR	3089141	EqualityExpression	bytes == 0		3089097	0		==			
ANR	3089142	Identifier	bytes		3089097	0					
ANR	3089143	PrimaryExpression	0		3089097	1					
ANR	3089144	CompoundStatement		7:23:196:196	3089097	1					
ANR	3089145	ExpressionStatement	m_async_io_error = ERROR_HANDLE_EOF	172:3:4817:4852	3089097	0	True				
ANR	3089146	AssignmentExpression	m_async_io_error = ERROR_HANDLE_EOF		3089097	0		=			
ANR	3089147	Identifier	m_async_io_error		3089097	0					
ANR	3089148	Identifier	ERROR_HANDLE_EOF		3089097	1					
ANR	3089149	ElseStatement	else		3089097	0					
ANR	3089150	CompoundStatement		10:7:249:249	3089097	0					
ANR	3089151	ExpressionStatement	m_async_io_error = 0	175:3:4870:4890	3089097	0	True				
ANR	3089152	AssignmentExpression	m_async_io_error = 0		3089097	0		=			
ANR	3089153	Identifier	m_async_io_error		3089097	0					
ANR	3089154	PrimaryExpression	0		3089097	1					
ANR	3089155	ExpressionStatement	m_async_io_state = IO_DONE	177:2:4898:4924	3089097	2	True				
ANR	3089156	AssignmentExpression	m_async_io_state = IO_DONE		3089097	0		=			
ANR	3089157	Identifier	m_async_io_state		3089097	0					
ANR	3089158	Identifier	IO_DONE		3089097	1					
ANR	3089159	ExpressionStatement	ASSERT ( m_async_io_state == IO_DONE )	180:1:4931:4966	3089097	1	True				
ANR	3089160	CallExpression	ASSERT ( m_async_io_state == IO_DONE )		3089097	0					
ANR	3089161	Callee	ASSERT		3089097	0					
ANR	3089162	Identifier	ASSERT		3089097	0					
ANR	3089163	ArgumentList	m_async_io_state == IO_DONE		3089097	1					
ANR	3089164	Argument	m_async_io_state == IO_DONE		3089097	0					
ANR	3089165	EqualityExpression	m_async_io_state == IO_DONE		3089097	0		==			
ANR	3089166	Identifier	m_async_io_state		3089097	0					
ANR	3089167	Identifier	IO_DONE		3089097	1					
ANR	3089168	ExpressionStatement	SetEvent ( m_watched_event )	184:1:5045:5070	3089097	2	True				
ANR	3089169	CallExpression	SetEvent ( m_watched_event )		3089097	0					
ANR	3089170	Callee	SetEvent		3089097	0					
ANR	3089171	Identifier	SetEvent		3089097	0					
ANR	3089172	ArgumentList	m_watched_event		3089097	1					
ANR	3089173	Argument	m_watched_event		3089097	0					
ANR	3089174	Identifier	m_watched_event		3089097	0					
ANR	3089175	ReturnStatement	return true ;	186:1:5074:5085	3089097	3	True				
ANR	3089176	Identifier	true		3089097	0					
ANR	3089177	ReturnType	bool		3089097	1					
ANR	3089178	Identifier	ReadPipeEnd :: post_wait		3089097	2					
ANR	3089179	ParameterList			3089097	3					
ANR	3089180	CFGEntryNode	ENTRY		3089097		True				
ANR	3089181	CFGExitNode	EXIT		3089097		True				
ANR	3089182	Symbol	m_async_io_error		3089097						
ANR	3089183	Symbol	IO_PENDING		3089097						
ANR	3089184	Symbol	m_async_io_state		3089097						
ANR	3089185	Symbol	m_handle		3089097						
ANR	3089186	Symbol	TRUE		3089097						
ANR	3089187	Symbol	IO_DONE		3089097						
ANR	3089188	Symbol	GetOverlappedResult		3089097						
ANR	3089189	Symbol	ERROR_HANDLE_EOF		3089097						
ANR	3089190	Symbol	& bytes		3089097						
ANR	3089191	Symbol	bytes		3089097						
ANR	3089192	Symbol	& m_overlapped_struct		3089097						
ANR	3089193	Symbol	GetLastError		3089097						
ANR	3089194	Symbol	m_watched_event		3089097						
ANR	3089195	Symbol	true		3089097						
ANR	3089196	Function	ReadPipeEnd :: io_ready	191:0:5206:5274							
ANR	3089197	FunctionDef	ReadPipeEnd :: io_ready ()		3089196	0					
ANR	3089198	CompoundStatement		192:0:5235:5274	3089196	0					
ANR	3089199	ReturnStatement	return m_async_io_state == IO_DONE ;	193:1:5238:5272	3089196	0	True				
ANR	3089200	EqualityExpression	m_async_io_state == IO_DONE		3089196	0		==			
ANR	3089201	Identifier	m_async_io_state		3089196	0					
ANR	3089202	Identifier	IO_DONE		3089196	1					
ANR	3089203	ReturnType	bool		3089196	1					
ANR	3089204	Identifier	ReadPipeEnd :: io_ready		3089196	2					
ANR	3089205	ParameterList			3089196	3					
ANR	3089206	CFGEntryNode	ENTRY		3089196		True				
ANR	3089207	CFGExitNode	EXIT		3089196		True				
ANR	3089208	Symbol	m_async_io_state		3089196						
ANR	3089209	Symbol	IO_DONE		3089196						
ANR	3089210	Function	ReadPipeEnd :: read	196:0:5277:7765							
ANR	3089211	FunctionDef	"ReadPipeEnd :: read (void * buffer , int len)"		3089210	0					
ANR	3089212	CompoundStatement		197:0:5322:7765	3089210	0					
ANR	3089213	IdentifierDeclStatement	int ret ;	198:1:5325:5332	3089210	0	True				
ANR	3089214	IdentifierDecl	ret		3089210	0					
ANR	3089215	IdentifierDeclType	int		3089210	0					
ANR	3089216	Identifier	ret		3089210	1					
ANR	3089217	IfStatement	if ( len > m_pipe_size )		3089210	1					
ANR	3089218	Condition	len > m_pipe_size	202:5:5444:5460	3089210	0	True				
ANR	3089219	RelationalExpression	len > m_pipe_size		3089210	0		>			
ANR	3089220	Identifier	len		3089210	0					
ANR	3089221	Identifier	m_pipe_size		3089210	1					
ANR	3089222	CompoundStatement		6:24:140:140	3089210	1					
ANR	3089223	ExpressionStatement	len = m_pipe_size	203:2:5467:5484	3089210	0	True				
ANR	3089224	AssignmentExpression	len = m_pipe_size		3089210	0		=			
ANR	3089225	Identifier	len		3089210	0					
ANR	3089226	Identifier	m_pipe_size		3089210	1					
ANR	3089227	ExpressionStatement	errno = EINVAL	207:1:5553:5567	3089210	2	True				
ANR	3089228	AssignmentExpression	errno = EINVAL		3089210	0		=			
ANR	3089229	Identifier	errno		3089210	0					
ANR	3089230	Identifier	EINVAL		3089210	1					
ANR	3089231	IdentifierDeclStatement	"DWORD result = WaitForSingleObject ( m_watched_event , m_nonblocking ? 0 : INFINITE ) ;"	210:1:5628:5709	3089210	3	True				
ANR	3089232	IdentifierDecl	"result = WaitForSingleObject ( m_watched_event , m_nonblocking ? 0 : INFINITE )"		3089210	0					
ANR	3089233	IdentifierDeclType	DWORD		3089210	0					
ANR	3089234	Identifier	result		3089210	1					
ANR	3089235	AssignmentExpression	"result = WaitForSingleObject ( m_watched_event , m_nonblocking ? 0 : INFINITE )"		3089210	2		=			
ANR	3089236	Identifier	result		3089210	0					
ANR	3089237	CallExpression	"WaitForSingleObject ( m_watched_event , m_nonblocking ? 0 : INFINITE )"		3089210	1					
ANR	3089238	Callee	WaitForSingleObject		3089210	0					
ANR	3089239	Identifier	WaitForSingleObject		3089210	0					
ANR	3089240	ArgumentList	m_watched_event		3089210	1					
ANR	3089241	Argument	m_watched_event		3089210	0					
ANR	3089242	Identifier	m_watched_event		3089210	0					
ANR	3089243	Argument	m_nonblocking ? 0 : INFINITE		3089210	1					
ANR	3089244	ConditionalExpression	m_nonblocking ? 0 : INFINITE		3089210	0					
ANR	3089245	Condition	m_nonblocking		3089210	0					
ANR	3089246	Identifier	m_nonblocking		3089210	0					
ANR	3089247	PrimaryExpression	0		3089210	1					
ANR	3089248	Identifier	INFINITE		3089210	2					
ANR	3089249	IfStatement	if ( result == WAIT_TIMEOUT )		3089210	4					
ANR	3089250	Condition	result == WAIT_TIMEOUT	211:5:5716:5737	3089210	0	True				
ANR	3089251	EqualityExpression	result == WAIT_TIMEOUT		3089210	0		==			
ANR	3089252	Identifier	result		3089210	0					
ANR	3089253	Identifier	WAIT_TIMEOUT		3089210	1					
ANR	3089254	CompoundStatement		15:29:417:417	3089210	1					
ANR	3089255	ExpressionStatement	errno = EWOULDBLOCK	212:2:5744:5763	3089210	0	True				
ANR	3089256	AssignmentExpression	errno = EWOULDBLOCK		3089210	0		=			
ANR	3089257	Identifier	errno		3089210	0					
ANR	3089258	Identifier	EWOULDBLOCK		3089210	1					
ANR	3089259	ReturnStatement	return - 1 ;	213:2:5767:5776	3089210	1	True				
ANR	3089260	UnaryOperationExpression	- 1		3089210	0					
ANR	3089261	UnaryOperator	-		3089210	0					
ANR	3089262	PrimaryExpression	1		3089210	1					
ANR	3089263	ExpressionStatement	ASSERT ( result == WAIT_OBJECT_0 )	215:1:5782:5813	3089210	5	True				
ANR	3089264	CallExpression	ASSERT ( result == WAIT_OBJECT_0 )		3089210	0					
ANR	3089265	Callee	ASSERT		3089210	0					
ANR	3089266	Identifier	ASSERT		3089210	0					
ANR	3089267	ArgumentList	result == WAIT_OBJECT_0		3089210	1					
ANR	3089268	Argument	result == WAIT_OBJECT_0		3089210	0					
ANR	3089269	EqualityExpression	result == WAIT_OBJECT_0		3089210	0		==			
ANR	3089270	Identifier	result		3089210	0					
ANR	3089271	Identifier	WAIT_OBJECT_0		3089210	1					
ANR	3089272	IfStatement	if ( m_async_io_state == IO_PENDING )		3089210	6					
ANR	3089273	Condition	m_async_io_state == IO_PENDING	220:5:5996:6025	3089210	0	True				
ANR	3089274	EqualityExpression	m_async_io_state == IO_PENDING		3089210	0		==			
ANR	3089275	Identifier	m_async_io_state		3089210	0					
ANR	3089276	Identifier	IO_PENDING		3089210	1					
ANR	3089277	CompoundStatement		34:2:888:899	3089210	1					
ANR	3089278	ExpressionStatement	ASSERT ( ! m_registered )	222:2:6033:6054	3089210	0	True				
ANR	3089279	CallExpression	ASSERT ( ! m_registered )		3089210	0					
ANR	3089280	Callee	ASSERT		3089210	0					
ANR	3089281	Identifier	ASSERT		3089210	0					
ANR	3089282	ArgumentList	! m_registered		3089210	1					
ANR	3089283	Argument	! m_registered		3089210	0					
ANR	3089284	UnaryOperationExpression	! m_registered		3089210	0					
ANR	3089285	UnaryOperator	!		3089210	0					
ANR	3089286	Identifier	m_registered		3089210	1					
ANR	3089287	IdentifierDeclStatement	"DWORD result = WaitForSingleObject ( m_event , m_nonblocking ? 0 : INFINITE ) ;"	224:2:6059:6132	3089210	1	True				
ANR	3089288	IdentifierDecl	"result = WaitForSingleObject ( m_event , m_nonblocking ? 0 : INFINITE )"		3089210	0					
ANR	3089289	IdentifierDeclType	DWORD		3089210	0					
ANR	3089290	Identifier	result		3089210	1					
ANR	3089291	AssignmentExpression	"result = WaitForSingleObject ( m_event , m_nonblocking ? 0 : INFINITE )"		3089210	2		=			
ANR	3089292	Identifier	result		3089210	0					
ANR	3089293	CallExpression	"WaitForSingleObject ( m_event , m_nonblocking ? 0 : INFINITE )"		3089210	1					
ANR	3089294	Callee	WaitForSingleObject		3089210	0					
ANR	3089295	Identifier	WaitForSingleObject		3089210	0					
ANR	3089296	ArgumentList	m_event		3089210	1					
ANR	3089297	Argument	m_event		3089210	0					
ANR	3089298	Identifier	m_event		3089210	0					
ANR	3089299	Argument	m_nonblocking ? 0 : INFINITE		3089210	1					
ANR	3089300	ConditionalExpression	m_nonblocking ? 0 : INFINITE		3089210	0					
ANR	3089301	Condition	m_nonblocking		3089210	0					
ANR	3089302	Identifier	m_nonblocking		3089210	0					
ANR	3089303	PrimaryExpression	0		3089210	1					
ANR	3089304	Identifier	INFINITE		3089210	2					
ANR	3089305	IfStatement	if ( result == WAIT_TIMEOUT )		3089210	2					
ANR	3089306	Condition	result == WAIT_TIMEOUT	225:6:6140:6161	3089210	0	True				
ANR	3089307	EqualityExpression	result == WAIT_TIMEOUT		3089210	0		==			
ANR	3089308	Identifier	result		3089210	0					
ANR	3089309	Identifier	WAIT_TIMEOUT		3089210	1					
ANR	3089310	CompoundStatement		29:30:841:841	3089210	1					
ANR	3089311	ExpressionStatement	errno = EWOULDBLOCK	226:3:6169:6188	3089210	0	True				
ANR	3089312	AssignmentExpression	errno = EWOULDBLOCK		3089210	0		=			
ANR	3089313	Identifier	errno		3089210	0					
ANR	3089314	Identifier	EWOULDBLOCK		3089210	1					
ANR	3089315	ReturnStatement	return - 1 ;	227:3:6193:6202	3089210	1	True				
ANR	3089316	UnaryOperationExpression	- 1		3089210	0					
ANR	3089317	UnaryOperator	-		3089210	0					
ANR	3089318	PrimaryExpression	1		3089210	1					
ANR	3089319	IdentifierDeclStatement	DWORD bytes ;	230:2:6211:6222	3089210	3	True				
ANR	3089320	IdentifierDecl	bytes		3089210	0					
ANR	3089321	IdentifierDeclType	DWORD		3089210	0					
ANR	3089322	Identifier	bytes		3089210	1					
ANR	3089323	IfStatement	"if ( ! GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE ) )"		3089210	4					
ANR	3089324	Condition	"! GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"	231:6:6230:6295	3089210	0	True				
ANR	3089325	UnaryOperationExpression	"! GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"		3089210	0					
ANR	3089326	UnaryOperator	!		3089210	0					
ANR	3089327	CallExpression	"GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"		3089210	1					
ANR	3089328	Callee	GetOverlappedResult		3089210	0					
ANR	3089329	Identifier	GetOverlappedResult		3089210	0					
ANR	3089330	ArgumentList	m_handle		3089210	1					
ANR	3089331	Argument	m_handle		3089210	0					
ANR	3089332	Identifier	m_handle		3089210	0					
ANR	3089333	Argument	& m_overlapped_struct		3089210	1					
ANR	3089334	UnaryOperationExpression	& m_overlapped_struct		3089210	0					
ANR	3089335	UnaryOperator	&		3089210	0					
ANR	3089336	Identifier	m_overlapped_struct		3089210	1					
ANR	3089337	Argument	& bytes		3089210	2					
ANR	3089338	UnaryOperationExpression	& bytes		3089210	0					
ANR	3089339	UnaryOperator	&		3089210	0					
ANR	3089340	Identifier	bytes		3089210	1					
ANR	3089341	Argument	TRUE		3089210	3					
ANR	3089342	Identifier	TRUE		3089210	0					
ANR	3089343	CompoundStatement		35:74:975:975	3089210	1					
ANR	3089344	ExpressionStatement	m_async_io_error = GetLastError ( )	232:3:6303:6336	3089210	0	True				
ANR	3089345	AssignmentExpression	m_async_io_error = GetLastError ( )		3089210	0		=			
ANR	3089346	Identifier	m_async_io_error		3089210	0					
ANR	3089347	CallExpression	GetLastError ( )		3089210	1					
ANR	3089348	Callee	GetLastError		3089210	0					
ANR	3089349	Identifier	GetLastError		3089210	0					
ANR	3089350	ArgumentList			3089210	1					
ANR	3089351	ElseStatement	else		3089210	0					
ANR	3089352	IfStatement	if ( bytes == 0 )		3089210	0					
ANR	3089353	Condition	bytes == 0	234:11:6353:6362	3089210	0	True				
ANR	3089354	EqualityExpression	bytes == 0		3089210	0		==			
ANR	3089355	Identifier	bytes		3089210	0					
ANR	3089356	PrimaryExpression	0		3089210	1					
ANR	3089357	CompoundStatement		38:23:1042:1042	3089210	1					
ANR	3089358	ExpressionStatement	m_async_io_error = ERROR_HANDLE_EOF	235:3:6370:6405	3089210	0	True				
ANR	3089359	AssignmentExpression	m_async_io_error = ERROR_HANDLE_EOF		3089210	0		=			
ANR	3089360	Identifier	m_async_io_error		3089210	0					
ANR	3089361	Identifier	ERROR_HANDLE_EOF		3089210	1					
ANR	3089362	ElseStatement	else		3089210	0					
ANR	3089363	CompoundStatement		41:7:1095:1095	3089210	0					
ANR	3089364	ExpressionStatement	m_async_io_error = 0	238:3:6423:6443	3089210	0	True				
ANR	3089365	AssignmentExpression	m_async_io_error = 0		3089210	0		=			
ANR	3089366	Identifier	m_async_io_error		3089210	0					
ANR	3089367	PrimaryExpression	0		3089210	1					
ANR	3089368	ExpressionStatement	m_async_io_state = IO_DONE	240:2:6451:6477	3089210	5	True				
ANR	3089369	AssignmentExpression	m_async_io_state = IO_DONE		3089210	0		=			
ANR	3089370	Identifier	m_async_io_state		3089210	0					
ANR	3089371	Identifier	IO_DONE		3089210	1					
ANR	3089372	ExpressionStatement	ASSERT ( m_async_io_state != IO_PENDING )	243:1:6484:6522	3089210	7	True				
ANR	3089373	CallExpression	ASSERT ( m_async_io_state != IO_PENDING )		3089210	0					
ANR	3089374	Callee	ASSERT		3089210	0					
ANR	3089375	Identifier	ASSERT		3089210	0					
ANR	3089376	ArgumentList	m_async_io_state != IO_PENDING		3089210	1					
ANR	3089377	Argument	m_async_io_state != IO_PENDING		3089210	0					
ANR	3089378	EqualityExpression	m_async_io_state != IO_PENDING		3089210	0		!=			
ANR	3089379	Identifier	m_async_io_state		3089210	0					
ANR	3089380	Identifier	IO_PENDING		3089210	1					
ANR	3089381	IfStatement	if ( m_async_io_state == IO_DONE )		3089210	8					
ANR	3089382	Condition	m_async_io_state == IO_DONE	245:5:6530:6556	3089210	0	True				
ANR	3089383	EqualityExpression	m_async_io_state == IO_DONE		3089210	0		==			
ANR	3089384	Identifier	m_async_io_state		3089210	0					
ANR	3089385	Identifier	IO_DONE		3089210	1					
ANR	3089386	CompoundStatement		49:34:1236:1236	3089210	1					
ANR	3089387	IfStatement	if ( m_async_io_error )		3089210	0					
ANR	3089388	Condition	m_async_io_error	247:6:6570:6585	3089210	0	True				
ANR	3089389	Identifier	m_async_io_error		3089210	0					
ANR	3089390	CompoundStatement		51:24:1265:1265	3089210	1					
ANR	3089391	IfStatement	if ( m_async_io_error == ERROR_HANDLE_EOF || m_async_io_error == ERROR_BROKEN_PIPE )		3089210	0					
ANR	3089392	Condition	m_async_io_error == ERROR_HANDLE_EOF || m_async_io_error == ERROR_BROKEN_PIPE	248:7:6597:6673	3089210	0	True				
ANR	3089393	OrExpression	m_async_io_error == ERROR_HANDLE_EOF || m_async_io_error == ERROR_BROKEN_PIPE		3089210	0		||			
ANR	3089394	EqualityExpression	m_async_io_error == ERROR_HANDLE_EOF		3089210	0		==			
ANR	3089395	Identifier	m_async_io_error		3089210	0					
ANR	3089396	Identifier	ERROR_HANDLE_EOF		3089210	1					
ANR	3089397	EqualityExpression	m_async_io_error == ERROR_BROKEN_PIPE		3089210	1		==			
ANR	3089398	Identifier	m_async_io_error		3089210	0					
ANR	3089399	Identifier	ERROR_BROKEN_PIPE		3089210	1					
ANR	3089400	CompoundStatement		52:86:1353:1353	3089210	1					
ANR	3089401	ExpressionStatement	ret = 0	249:4:6682:6689	3089210	0	True				
ANR	3089402	AssignmentExpression	ret = 0		3089210	0		=			
ANR	3089403	Identifier	ret		3089210	0					
ANR	3089404	PrimaryExpression	0		3089210	1					
ANR	3089405	ElseStatement	else		3089210	0					
ANR	3089406	CompoundStatement		55:8:1381:1381	3089210	0					
ANR	3089407	ExpressionStatement	ret = - 1	252:4:6710:6718	3089210	0	True				
ANR	3089408	AssignmentExpression	ret = - 1		3089210	0		=			
ANR	3089409	Identifier	ret		3089210	0					
ANR	3089410	UnaryOperationExpression	- 1		3089210	1					
ANR	3089411	UnaryOperator	-		3089210	0					
ANR	3089412	PrimaryExpression	1		3089210	1					
ANR	3089413	ElseStatement	else		3089210	0					
ANR	3089414	CompoundStatement		65:3:1604:1620	3089210	0					
ANR	3089415	ExpressionStatement	* ( char * ) buffer = m_async_io_buf	259:3:6888:6919	3089210	0	True				
ANR	3089416	AssignmentExpression	* ( char * ) buffer = m_async_io_buf		3089210	0		=			
ANR	3089417	UnaryOperationExpression	* ( char * ) buffer		3089210	0					
ANR	3089418	UnaryOperator	*		3089210	0					
ANR	3089419	CastExpression	( char * ) buffer		3089210	1					
ANR	3089420	CastTarget	char *		3089210	0					
ANR	3089421	Identifier	buffer		3089210	1					
ANR	3089422	Identifier	m_async_io_buf		3089210	1					
ANR	3089423	IdentifierDeclStatement	DWORD bytes_left ;	261:3:6927:6943	3089210	1	True				
ANR	3089424	IdentifierDecl	bytes_left		3089210	0					
ANR	3089425	IdentifierDeclType	DWORD		3089210	0					
ANR	3089426	Identifier	bytes_left		3089210	1					
ANR	3089427	IfStatement	"if ( ! PeekNamedPipe ( m_handle , NULL , 0 , NULL , & bytes_left , NULL ) )"		3089210	2					
ANR	3089428	Condition	"! PeekNamedPipe ( m_handle , NULL , 0 , NULL , & bytes_left , NULL )"	262:7:6952:7009	3089210	0	True				
ANR	3089429	UnaryOperationExpression	"! PeekNamedPipe ( m_handle , NULL , 0 , NULL , & bytes_left , NULL )"		3089210	0					
ANR	3089430	UnaryOperator	!		3089210	0					
ANR	3089431	CallExpression	"PeekNamedPipe ( m_handle , NULL , 0 , NULL , & bytes_left , NULL )"		3089210	1					
ANR	3089432	Callee	PeekNamedPipe		3089210	0					
ANR	3089433	Identifier	PeekNamedPipe		3089210	0					
ANR	3089434	ArgumentList	m_handle		3089210	1					
ANR	3089435	Argument	m_handle		3089210	0					
ANR	3089436	Identifier	m_handle		3089210	0					
ANR	3089437	Argument	NULL		3089210	1					
ANR	3089438	Identifier	NULL		3089210	0					
ANR	3089439	Argument	0		3089210	2					
ANR	3089440	PrimaryExpression	0		3089210	0					
ANR	3089441	Argument	NULL		3089210	3					
ANR	3089442	Identifier	NULL		3089210	0					
ANR	3089443	Argument	& bytes_left		3089210	4					
ANR	3089444	UnaryOperationExpression	& bytes_left		3089210	0					
ANR	3089445	UnaryOperator	&		3089210	0					
ANR	3089446	Identifier	bytes_left		3089210	1					
ANR	3089447	Argument	NULL		3089210	5					
ANR	3089448	Identifier	NULL		3089210	0					
ANR	3089449	CompoundStatement		66:67:1689:1689	3089210	1					
ANR	3089450	ExpressionStatement	"dprintf ( D_ALWAYS , ""PeekNamedPipe error: %d\\n"" , GetLastError ( ) )"	263:4:7018:7080	3089210	0	True				
ANR	3089451	CallExpression	"dprintf ( D_ALWAYS , ""PeekNamedPipe error: %d\\n"" , GetLastError ( ) )"		3089210	0					
ANR	3089452	Callee	dprintf		3089210	0					
ANR	3089453	Identifier	dprintf		3089210	0					
ANR	3089454	ArgumentList	D_ALWAYS		3089210	1					
ANR	3089455	Argument	D_ALWAYS		3089210	0					
ANR	3089456	Identifier	D_ALWAYS		3089210	0					
ANR	3089457	Argument	"""PeekNamedPipe error: %d\\n"""		3089210	1					
ANR	3089458	PrimaryExpression	"""PeekNamedPipe error: %d\\n"""		3089210	0					
ANR	3089459	Argument	GetLastError ( )		3089210	2					
ANR	3089460	CallExpression	GetLastError ( )		3089210	0					
ANR	3089461	Callee	GetLastError		3089210	0					
ANR	3089462	Identifier	GetLastError		3089210	0					
ANR	3089463	ArgumentList			3089210	1					
ANR	3089464	ExpressionStatement	ret = - 1	264:4:7087:7095	3089210	1	True				
ANR	3089465	AssignmentExpression	ret = - 1		3089210	0		=			
ANR	3089466	Identifier	ret		3089210	0					
ANR	3089467	UnaryOperationExpression	- 1		3089210	1					
ANR	3089468	UnaryOperator	-		3089210	0					
ANR	3089469	PrimaryExpression	1		3089210	1					
ANR	3089470	ElseStatement	else		3089210	0					
ANR	3089471	IfStatement	if ( bytes_left > 0 )		3089210	0					
ANR	3089472	Condition	bytes_left > 0	266:12:7114:7127	3089210	0	True				
ANR	3089473	RelationalExpression	bytes_left > 0		3089210	0		>			
ANR	3089474	Identifier	bytes_left		3089210	0					
ANR	3089475	PrimaryExpression	0		3089210	1					
ANR	3089476	CompoundStatement		70:28:1807:1807	3089210	1					
ANR	3089477	ExpressionStatement	"ret = read_helper ( ( char * ) buffer + 1 , len - 1 )"	269:4:7262:7307	3089210	0	True				
ANR	3089478	AssignmentExpression	"ret = read_helper ( ( char * ) buffer + 1 , len - 1 )"		3089210	0		=			
ANR	3089479	Identifier	ret		3089210	0					
ANR	3089480	CallExpression	"read_helper ( ( char * ) buffer + 1 , len - 1 )"		3089210	1					
ANR	3089481	Callee	read_helper		3089210	0					
ANR	3089482	Identifier	read_helper		3089210	0					
ANR	3089483	ArgumentList	( char * ) buffer + 1		3089210	1					
ANR	3089484	Argument	( char * ) buffer + 1		3089210	0					
ANR	3089485	AdditiveExpression	( char * ) buffer + 1		3089210	0		+			
ANR	3089486	CastExpression	( char * ) buffer		3089210	0					
ANR	3089487	CastTarget	char *		3089210	0					
ANR	3089488	Identifier	buffer		3089210	1					
ANR	3089489	PrimaryExpression	1		3089210	1					
ANR	3089490	Argument	len - 1		3089210	1					
ANR	3089491	AdditiveExpression	len - 1		3089210	0		-			
ANR	3089492	Identifier	len		3089210	0					
ANR	3089493	PrimaryExpression	1		3089210	1					
ANR	3089494	IfStatement	if ( ret != - 1 )		3089210	1					
ANR	3089495	Condition	ret != - 1	270:8:7317:7325	3089210	0	True				
ANR	3089496	EqualityExpression	ret != - 1		3089210	0		!=			
ANR	3089497	Identifier	ret		3089210	0					
ANR	3089498	UnaryOperationExpression	- 1		3089210	1					
ANR	3089499	UnaryOperator	-		3089210	0					
ANR	3089500	PrimaryExpression	1		3089210	1					
ANR	3089501	CompoundStatement		74:19:2005:2005	3089210	1					
ANR	3089502	ExpressionStatement	ret += 1	273:5:7483:7491	3089210	0	True				
ANR	3089503	AssignmentExpression	ret += 1		3089210	0		+=			
ANR	3089504	Identifier	ret		3089210	0					
ANR	3089505	PrimaryExpression	1		3089210	1					
ANR	3089506	ElseStatement	else		3089210	0					
ANR	3089507	CompoundStatement		80:8:2189:2189	3089210	0					
ANR	3089508	ExpressionStatement	ret = 1	278:4:7572:7579	3089210	0	True				
ANR	3089509	AssignmentExpression	ret = 1		3089210	0		=			
ANR	3089510	Identifier	ret		3089210	0					
ANR	3089511	PrimaryExpression	1		3089210	1					
ANR	3089512	ExpressionStatement	m_async_io_state = IO_UNSTARTED	280:3:7589:7620	3089210	3	True				
ANR	3089513	AssignmentExpression	m_async_io_state = IO_UNSTARTED		3089210	0		=			
ANR	3089514	Identifier	m_async_io_state		3089210	0					
ANR	3089515	Identifier	IO_UNSTARTED		3089210	1					
ANR	3089516	ElseStatement	else		3089210	0					
ANR	3089517	CompoundStatement		87:6:2312:2312	3089210	0					
ANR	3089518	ExpressionStatement	"ret = read_helper ( buffer , len )"	285:3:7716:7746	3089210	0	True				
ANR	3089519	AssignmentExpression	"ret = read_helper ( buffer , len )"		3089210	0		=			
ANR	3089520	Identifier	ret		3089210	0					
ANR	3089521	CallExpression	"read_helper ( buffer , len )"		3089210	1					
ANR	3089522	Callee	read_helper		3089210	0					
ANR	3089523	Identifier	read_helper		3089210	0					
ANR	3089524	ArgumentList	buffer		3089210	1					
ANR	3089525	Argument	buffer		3089210	0					
ANR	3089526	Identifier	buffer		3089210	0					
ANR	3089527	Argument	len		3089210	1					
ANR	3089528	Identifier	len		3089210	0					
ANR	3089529	ReturnStatement	return ret ;	288:1:7753:7763	3089210	9	True				
ANR	3089530	Identifier	ret		3089210	0					
ANR	3089531	ReturnType	int		3089210	1					
ANR	3089532	Identifier	ReadPipeEnd :: read		3089210	2					
ANR	3089533	ParameterList	"void * buffer , int len"		3089210	3					
ANR	3089534	Parameter	void * buffer	196:22:5299:5310	3089210	0	True				
ANR	3089535	ParameterType	void *		3089210	0					
ANR	3089536	Identifier	buffer		3089210	1					
ANR	3089537	Parameter	int len	196:36:5313:5319	3089210	1	True				
ANR	3089538	ParameterType	int		3089210	0					
ANR	3089539	Identifier	len		3089210	1					
ANR	3089540	CFGEntryNode	ENTRY		3089210		True				
ANR	3089541	CFGExitNode	EXIT		3089210		True				
ANR	3089542	Symbol	IO_UNSTARTED		3089210						
ANR	3089543	Symbol	result		3089210						
ANR	3089544	Symbol	WaitForSingleObject		3089210						
ANR	3089545	Symbol	GetOverlappedResult		3089210						
ANR	3089546	Symbol	m_pipe_size		3089210						
ANR	3089547	Symbol	len		3089210						
ANR	3089548	Symbol	& bytes		3089210						
ANR	3089549	Symbol	& m_overlapped_struct		3089210						
ANR	3089550	Symbol	WAIT_TIMEOUT		3089210						
ANR	3089551	Symbol	m_watched_event		3089210						
ANR	3089552	Symbol	WAIT_OBJECT_0		3089210						
ANR	3089553	Symbol	m_registered		3089210						
ANR	3089554	Symbol	buffer		3089210						
ANR	3089555	Symbol	ret		3089210						
ANR	3089556	Symbol	m_async_io_error		3089210						
ANR	3089557	Symbol	errno		3089210						
ANR	3089558	Symbol	m_event		3089210						
ANR	3089559	Symbol	* buffer		3089210						
ANR	3089560	Symbol	NULL		3089210						
ANR	3089561	Symbol	PeekNamedPipe		3089210						
ANR	3089562	Symbol	IO_PENDING		3089210						
ANR	3089563	Symbol	bytes_left		3089210						
ANR	3089564	Symbol	m_async_io_state		3089210						
ANR	3089565	Symbol	* ( char * ) buffer		3089210						
ANR	3089566	Symbol	& bytes_left		3089210						
ANR	3089567	Symbol	m_handle		3089210						
ANR	3089568	Symbol	D_ALWAYS		3089210						
ANR	3089569	Symbol	TRUE		3089210						
ANR	3089570	Symbol	read_helper		3089210						
ANR	3089571	Symbol	IO_DONE		3089210						
ANR	3089572	Symbol	INFINITE		3089210						
ANR	3089573	Symbol	m_nonblocking		3089210						
ANR	3089574	Symbol	EINVAL		3089210						
ANR	3089575	Symbol	ERROR_HANDLE_EOF		3089210						
ANR	3089576	Symbol	bytes		3089210						
ANR	3089577	Symbol	GetLastError		3089210						
ANR	3089578	Symbol	EWOULDBLOCK		3089210						
ANR	3089579	Symbol	ERROR_BROKEN_PIPE		3089210						
ANR	3089580	Symbol	m_async_io_buf		3089210						
ANR	3089581	Function	ReadPipeEnd :: read_helper	291:0:7768:9279							
ANR	3089582	FunctionDef	"ReadPipeEnd :: read_helper (void * buffer , int len)"		3089581	0					
ANR	3089583	CompoundStatement		292:0:7820:9279	3089581	0					
ANR	3089584	ExpressionStatement	errno = EINVAL	294:1:7873:7887	3089581	0	True				
ANR	3089585	AssignmentExpression	errno = EINVAL		3089581	0		=			
ANR	3089586	Identifier	errno		3089581	0					
ANR	3089587	Identifier	EINVAL		3089581	1					
ANR	3089588	IfStatement	if ( m_nonblocking )		3089581	1					
ANR	3089589	Condition	m_nonblocking	298:5:7988:8000	3089581	0	True				
ANR	3089590	Identifier	m_nonblocking		3089581	0					
ANR	3089591	CompoundStatement		8:2:186:203	3089581	1					
ANR	3089592	IdentifierDeclStatement	DWORD bytes_avail ;	299:2:8007:8024	3089581	0	True				
ANR	3089593	IdentifierDecl	bytes_avail		3089581	0					
ANR	3089594	IdentifierDeclType	DWORD		3089581	0					
ANR	3089595	Identifier	bytes_avail		3089581	1					
ANR	3089596	IfStatement	"if ( ! PeekNamedPipe ( m_handle , NULL , 0 , NULL , & bytes_avail , NULL ) )"		3089581	1					
ANR	3089597	Condition	"! PeekNamedPipe ( m_handle , NULL , 0 , NULL , & bytes_avail , NULL )"	300:6:8032:8090	3089581	0	True				
ANR	3089598	UnaryOperationExpression	"! PeekNamedPipe ( m_handle , NULL , 0 , NULL , & bytes_avail , NULL )"		3089581	0					
ANR	3089599	UnaryOperator	!		3089581	0					
ANR	3089600	CallExpression	"PeekNamedPipe ( m_handle , NULL , 0 , NULL , & bytes_avail , NULL )"		3089581	1					
ANR	3089601	Callee	PeekNamedPipe		3089581	0					
ANR	3089602	Identifier	PeekNamedPipe		3089581	0					
ANR	3089603	ArgumentList	m_handle		3089581	1					
ANR	3089604	Argument	m_handle		3089581	0					
ANR	3089605	Identifier	m_handle		3089581	0					
ANR	3089606	Argument	NULL		3089581	1					
ANR	3089607	Identifier	NULL		3089581	0					
ANR	3089608	Argument	0		3089581	2					
ANR	3089609	PrimaryExpression	0		3089581	0					
ANR	3089610	Argument	NULL		3089581	3					
ANR	3089611	Identifier	NULL		3089581	0					
ANR	3089612	Argument	& bytes_avail		3089581	4					
ANR	3089613	UnaryOperationExpression	& bytes_avail		3089581	0					
ANR	3089614	UnaryOperator	&		3089581	0					
ANR	3089615	Identifier	bytes_avail		3089581	1					
ANR	3089616	Argument	NULL		3089581	5					
ANR	3089617	Identifier	NULL		3089581	0					
ANR	3089618	CompoundStatement		9:67:272:272	3089581	1					
ANR	3089619	IfStatement	if ( GetLastError ( ) == ERROR_BROKEN_PIPE )		3089581	0					
ANR	3089620	Condition	GetLastError ( ) == ERROR_BROKEN_PIPE	301:7:8102:8136	3089581	0	True				
ANR	3089621	EqualityExpression	GetLastError ( ) == ERROR_BROKEN_PIPE		3089581	0		==			
ANR	3089622	CallExpression	GetLastError ( )		3089581	0					
ANR	3089623	Callee	GetLastError		3089581	0					
ANR	3089624	Identifier	GetLastError		3089581	0					
ANR	3089625	ArgumentList			3089581	1					
ANR	3089626	Identifier	ERROR_BROKEN_PIPE		3089581	1					
ANR	3089627	CompoundStatement		10:44:318:318	3089581	1					
ANR	3089628	ReturnStatement	return 0 ;	303:4:8172:8180	3089581	0	True				
ANR	3089629	PrimaryExpression	0		3089581	0					
ANR	3089630	ExpressionStatement	"dprintf ( D_ALWAYS , ""PeekNamedPipe error: %d\\n"" , GetLastError ( ) )"	305:3:8190:8252	3089581	1	True				
ANR	3089631	CallExpression	"dprintf ( D_ALWAYS , ""PeekNamedPipe error: %d\\n"" , GetLastError ( ) )"		3089581	0					
ANR	3089632	Callee	dprintf		3089581	0					
ANR	3089633	Identifier	dprintf		3089581	0					
ANR	3089634	ArgumentList	D_ALWAYS		3089581	1					
ANR	3089635	Argument	D_ALWAYS		3089581	0					
ANR	3089636	Identifier	D_ALWAYS		3089581	0					
ANR	3089637	Argument	"""PeekNamedPipe error: %d\\n"""		3089581	1					
ANR	3089638	PrimaryExpression	"""PeekNamedPipe error: %d\\n"""		3089581	0					
ANR	3089639	Argument	GetLastError ( )		3089581	2					
ANR	3089640	CallExpression	GetLastError ( )		3089581	0					
ANR	3089641	Callee	GetLastError		3089581	0					
ANR	3089642	Identifier	GetLastError		3089581	0					
ANR	3089643	ArgumentList			3089581	1					
ANR	3089644	ReturnStatement	return - 1 ;	306:3:8257:8266	3089581	2	True				
ANR	3089645	UnaryOperationExpression	- 1		3089581	0					
ANR	3089646	UnaryOperator	-		3089581	0					
ANR	3089647	PrimaryExpression	1		3089581	1					
ANR	3089648	IfStatement	if ( bytes_avail == 0 )		3089581	2					
ANR	3089649	Condition	bytes_avail == 0	308:6:8278:8293	3089581	0	True				
ANR	3089650	EqualityExpression	bytes_avail == 0		3089581	0		==			
ANR	3089651	Identifier	bytes_avail		3089581	0					
ANR	3089652	PrimaryExpression	0		3089581	1					
ANR	3089653	CompoundStatement		17:24:475:475	3089581	1					
ANR	3089654	ExpressionStatement	errno = EWOULDBLOCK	309:3:8301:8320	3089581	0	True				
ANR	3089655	AssignmentExpression	errno = EWOULDBLOCK		3089581	0		=			
ANR	3089656	Identifier	errno		3089581	0					
ANR	3089657	Identifier	EWOULDBLOCK		3089581	1					
ANR	3089658	ReturnStatement	return - 1 ;	310:3:8325:8334	3089581	1	True				
ANR	3089659	UnaryOperationExpression	- 1		3089581	0					
ANR	3089660	UnaryOperator	-		3089581	0					
ANR	3089661	PrimaryExpression	1		3089581	1					
ANR	3089662	IdentifierDeclStatement	OVERLAPPED tmp_overlapped ;	316:1:8424:8449	3089581	2	True				
ANR	3089663	IdentifierDecl	tmp_overlapped		3089581	0					
ANR	3089664	IdentifierDeclType	OVERLAPPED		3089581	0					
ANR	3089665	Identifier	tmp_overlapped		3089581	1					
ANR	3089666	IdentifierDeclStatement	OVERLAPPED * p_overlapped = NULL ;	317:1:8452:8483	3089581	3	True				
ANR	3089667	IdentifierDecl	* p_overlapped = NULL		3089581	0					
ANR	3089668	IdentifierDeclType	OVERLAPPED *		3089581	0					
ANR	3089669	Identifier	p_overlapped		3089581	1					
ANR	3089670	AssignmentExpression	* p_overlapped = NULL		3089581	2		=			
ANR	3089671	Identifier	NULL		3089581	0					
ANR	3089672	Identifier	NULL		3089581	1					
ANR	3089673	IfStatement	if ( m_overlapped )		3089581	4					
ANR	3089674	Condition	m_overlapped	318:5:8490:8501	3089581	0	True				
ANR	3089675	Identifier	m_overlapped		3089581	0					
ANR	3089676	CompoundStatement		27:19:683:683	3089581	1					
ANR	3089677	ExpressionStatement	"ZeroMemory ( & tmp_overlapped , sizeof ( OVERLAPPED ) )"	319:2:8508:8555	3089581	0	True				
ANR	3089678	CallExpression	"ZeroMemory ( & tmp_overlapped , sizeof ( OVERLAPPED ) )"		3089581	0					
ANR	3089679	Callee	ZeroMemory		3089581	0					
ANR	3089680	Identifier	ZeroMemory		3089581	0					
ANR	3089681	ArgumentList	& tmp_overlapped		3089581	1					
ANR	3089682	Argument	& tmp_overlapped		3089581	0					
ANR	3089683	UnaryOperationExpression	& tmp_overlapped		3089581	0					
ANR	3089684	UnaryOperator	&		3089581	0					
ANR	3089685	Identifier	tmp_overlapped		3089581	1					
ANR	3089686	Argument	sizeof ( OVERLAPPED )		3089581	1					
ANR	3089687	SizeofExpression	sizeof ( OVERLAPPED )		3089581	0					
ANR	3089688	Sizeof	sizeof		3089581	0					
ANR	3089689	SizeofOperand	OVERLAPPED		3089581	1					
ANR	3089690	ExpressionStatement	p_overlapped = & tmp_overlapped	320:2:8559:8589	3089581	1	True				
ANR	3089691	AssignmentExpression	p_overlapped = & tmp_overlapped		3089581	0		=			
ANR	3089692	Identifier	p_overlapped		3089581	0					
ANR	3089693	UnaryOperationExpression	& tmp_overlapped		3089581	1					
ANR	3089694	UnaryOperator	&		3089581	0					
ANR	3089695	Identifier	tmp_overlapped		3089581	1					
ANR	3089696	IdentifierDeclStatement	DWORD bytes ;	324:1:8612:8623	3089581	5	True				
ANR	3089697	IdentifierDecl	bytes		3089581	0					
ANR	3089698	IdentifierDeclType	DWORD		3089581	0					
ANR	3089699	Identifier	bytes		3089581	1					
ANR	3089700	IfStatement	"if ( ! ReadFile ( m_handle , buffer , len , & bytes , p_overlapped ) )"		3089581	6					
ANR	3089701	Condition	"! ReadFile ( m_handle , buffer , len , & bytes , p_overlapped )"	325:5:8630:8683	3089581	0	True				
ANR	3089702	UnaryOperationExpression	"! ReadFile ( m_handle , buffer , len , & bytes , p_overlapped )"		3089581	0					
ANR	3089703	UnaryOperator	!		3089581	0					
ANR	3089704	CallExpression	"ReadFile ( m_handle , buffer , len , & bytes , p_overlapped )"		3089581	1					
ANR	3089705	Callee	ReadFile		3089581	0					
ANR	3089706	Identifier	ReadFile		3089581	0					
ANR	3089707	ArgumentList	m_handle		3089581	1					
ANR	3089708	Argument	m_handle		3089581	0					
ANR	3089709	Identifier	m_handle		3089581	0					
ANR	3089710	Argument	buffer		3089581	1					
ANR	3089711	Identifier	buffer		3089581	0					
ANR	3089712	Argument	len		3089581	2					
ANR	3089713	Identifier	len		3089581	0					
ANR	3089714	Argument	& bytes		3089581	3					
ANR	3089715	UnaryOperationExpression	& bytes		3089581	0					
ANR	3089716	UnaryOperator	&		3089581	0					
ANR	3089717	Identifier	bytes		3089581	1					
ANR	3089718	Argument	p_overlapped		3089581	4					
ANR	3089719	Identifier	p_overlapped		3089581	0					
ANR	3089720	CompoundStatement		34:61:865:865	3089581	1					
ANR	3089721	IfStatement	if ( m_overlapped )		3089581	0					
ANR	3089722	Condition	m_overlapped	326:6:8694:8705	3089581	0	True				
ANR	3089723	Identifier	m_overlapped		3089581	0					
ANR	3089724	CompoundStatement		35:20:887:887	3089581	1					
ANR	3089725	IfStatement	if ( GetLastError ( ) == ERROR_IO_PENDING )		3089581	0					
ANR	3089726	Condition	GetLastError ( ) == ERROR_IO_PENDING	327:7:8717:8750	3089581	0	True				
ANR	3089727	EqualityExpression	GetLastError ( ) == ERROR_IO_PENDING		3089581	0		==			
ANR	3089728	CallExpression	GetLastError ( )		3089581	0					
ANR	3089729	Callee	GetLastError		3089581	0					
ANR	3089730	Identifier	GetLastError		3089581	0					
ANR	3089731	ArgumentList			3089581	1					
ANR	3089732	Identifier	ERROR_IO_PENDING		3089581	1					
ANR	3089733	CompoundStatement		36:43:932:932	3089581	1					
ANR	3089734	IfStatement	"if ( ! GetOverlappedResult ( m_handle , p_overlapped , & bytes , TRUE ) )"		3089581	0					
ANR	3089735	Condition	"! GetOverlappedResult ( m_handle , p_overlapped , & bytes , TRUE )"	328:8:8763:8820	3089581	0	True				
ANR	3089736	UnaryOperationExpression	"! GetOverlappedResult ( m_handle , p_overlapped , & bytes , TRUE )"		3089581	0					
ANR	3089737	UnaryOperator	!		3089581	0					
ANR	3089738	CallExpression	"GetOverlappedResult ( m_handle , p_overlapped , & bytes , TRUE )"		3089581	1					
ANR	3089739	Callee	GetOverlappedResult		3089581	0					
ANR	3089740	Identifier	GetOverlappedResult		3089581	0					
ANR	3089741	ArgumentList	m_handle		3089581	1					
ANR	3089742	Argument	m_handle		3089581	0					
ANR	3089743	Identifier	m_handle		3089581	0					
ANR	3089744	Argument	p_overlapped		3089581	1					
ANR	3089745	Identifier	p_overlapped		3089581	0					
ANR	3089746	Argument	& bytes		3089581	2					
ANR	3089747	UnaryOperationExpression	& bytes		3089581	0					
ANR	3089748	UnaryOperator	&		3089581	0					
ANR	3089749	Identifier	bytes		3089581	1					
ANR	3089750	Argument	TRUE		3089581	3					
ANR	3089751	Identifier	TRUE		3089581	0					
ANR	3089752	CompoundStatement		37:68:1002:1002	3089581	1					
ANR	3089753	IfStatement	if ( GetLastError ( ) == ERROR_HANDLE_EOF || GetLastError ( ) == ERROR_BROKEN_PIPE )		3089581	0					
ANR	3089754	Condition	GetLastError ( ) == ERROR_HANDLE_EOF || GetLastError ( ) == ERROR_BROKEN_PIPE	329:9:8834:8906	3089581	0	True				
ANR	3089755	OrExpression	GetLastError ( ) == ERROR_HANDLE_EOF || GetLastError ( ) == ERROR_BROKEN_PIPE		3089581	0		||			
ANR	3089756	EqualityExpression	GetLastError ( ) == ERROR_HANDLE_EOF		3089581	0		==			
ANR	3089757	CallExpression	GetLastError ( )		3089581	0					
ANR	3089758	Callee	GetLastError		3089581	0					
ANR	3089759	Identifier	GetLastError		3089581	0					
ANR	3089760	ArgumentList			3089581	1					
ANR	3089761	Identifier	ERROR_HANDLE_EOF		3089581	1					
ANR	3089762	EqualityExpression	GetLastError ( ) == ERROR_BROKEN_PIPE		3089581	1		==			
ANR	3089763	CallExpression	GetLastError ( )		3089581	0					
ANR	3089764	Callee	GetLastError		3089581	0					
ANR	3089765	Identifier	GetLastError		3089581	0					
ANR	3089766	ArgumentList			3089581	1					
ANR	3089767	Identifier	ERROR_BROKEN_PIPE		3089581	1					
ANR	3089768	CompoundStatement		38:84:1088:1088	3089581	1					
ANR	3089769	ExpressionStatement	bytes = 0	330:6:8917:8926	3089581	0	True				
ANR	3089770	AssignmentExpression	bytes = 0		3089581	0		=			
ANR	3089771	Identifier	bytes		3089581	0					
ANR	3089772	PrimaryExpression	0		3089581	1					
ANR	3089773	ElseStatement	else		3089581	0					
ANR	3089774	CompoundStatement		41:10:1124:1124	3089581	0					
ANR	3089775	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""GetOverlappedResult error: %d\\n"" , GetLastError ( ) )"	333:6:8953:9024	3089581	0	True				
ANR	3089776	CallExpression	"dprintf ( D_FULLDEBUG , ""GetOverlappedResult error: %d\\n"" , GetLastError ( ) )"		3089581	0					
ANR	3089777	Callee	dprintf		3089581	0					
ANR	3089778	Identifier	dprintf		3089581	0					
ANR	3089779	ArgumentList	D_FULLDEBUG		3089581	1					
ANR	3089780	Argument	D_FULLDEBUG		3089581	0					
ANR	3089781	Identifier	D_FULLDEBUG		3089581	0					
ANR	3089782	Argument	"""GetOverlappedResult error: %d\\n"""		3089581	1					
ANR	3089783	PrimaryExpression	"""GetOverlappedResult error: %d\\n"""		3089581	0					
ANR	3089784	Argument	GetLastError ( )		3089581	2					
ANR	3089785	CallExpression	GetLastError ( )		3089581	0					
ANR	3089786	Callee	GetLastError		3089581	0					
ANR	3089787	Identifier	GetLastError		3089581	0					
ANR	3089788	ArgumentList			3089581	1					
ANR	3089789	ReturnStatement	return - 1 ;	334:6:9032:9041	3089581	1	True				
ANR	3089790	UnaryOperationExpression	- 1		3089581	0					
ANR	3089791	UnaryOperator	-		3089581	0					
ANR	3089792	PrimaryExpression	1		3089581	1					
ANR	3089793	ElseStatement	else		3089581	0					
ANR	3089794	IfStatement	if ( GetLastError ( ) == ERROR_HANDLE_EOF || GetLastError ( ) == ERROR_BROKEN_PIPE )		3089581	0					
ANR	3089795	Condition	GetLastError ( ) == ERROR_HANDLE_EOF || GetLastError ( ) == ERROR_BROKEN_PIPE	339:11:9076:9148	3089581	0	True				
ANR	3089796	OrExpression	GetLastError ( ) == ERROR_HANDLE_EOF || GetLastError ( ) == ERROR_BROKEN_PIPE		3089581	0		||			
ANR	3089797	EqualityExpression	GetLastError ( ) == ERROR_HANDLE_EOF		3089581	0		==			
ANR	3089798	CallExpression	GetLastError ( )		3089581	0					
ANR	3089799	Callee	GetLastError		3089581	0					
ANR	3089800	Identifier	GetLastError		3089581	0					
ANR	3089801	ArgumentList			3089581	1					
ANR	3089802	Identifier	ERROR_HANDLE_EOF		3089581	1					
ANR	3089803	EqualityExpression	GetLastError ( ) == ERROR_BROKEN_PIPE		3089581	1		==			
ANR	3089804	CallExpression	GetLastError ( )		3089581	0					
ANR	3089805	Callee	GetLastError		3089581	0					
ANR	3089806	Identifier	GetLastError		3089581	0					
ANR	3089807	ArgumentList			3089581	1					
ANR	3089808	Identifier	ERROR_BROKEN_PIPE		3089581	1					
ANR	3089809	CompoundStatement		48:86:1330:1330	3089581	1					
ANR	3089810	ExpressionStatement	bytes = 0	340:3:9156:9165	3089581	0	True				
ANR	3089811	AssignmentExpression	bytes = 0		3089581	0		=			
ANR	3089812	Identifier	bytes		3089581	0					
ANR	3089813	PrimaryExpression	0		3089581	1					
ANR	3089814	ElseStatement	else		3089581	0					
ANR	3089815	CompoundStatement		51:7:1357:1357	3089581	0					
ANR	3089816	ExpressionStatement	"dprintf ( D_ALWAYS , ""ReadFile error: %d\\n"" , GetLastError ( ) )"	343:3:9183:9240	3089581	0	True				
ANR	3089817	CallExpression	"dprintf ( D_ALWAYS , ""ReadFile error: %d\\n"" , GetLastError ( ) )"		3089581	0					
ANR	3089818	Callee	dprintf		3089581	0					
ANR	3089819	Identifier	dprintf		3089581	0					
ANR	3089820	ArgumentList	D_ALWAYS		3089581	1					
ANR	3089821	Argument	D_ALWAYS		3089581	0					
ANR	3089822	Identifier	D_ALWAYS		3089581	0					
ANR	3089823	Argument	"""ReadFile error: %d\\n"""		3089581	1					
ANR	3089824	PrimaryExpression	"""ReadFile error: %d\\n"""		3089581	0					
ANR	3089825	Argument	GetLastError ( )		3089581	2					
ANR	3089826	CallExpression	GetLastError ( )		3089581	0					
ANR	3089827	Callee	GetLastError		3089581	0					
ANR	3089828	Identifier	GetLastError		3089581	0					
ANR	3089829	ArgumentList			3089581	1					
ANR	3089830	ReturnStatement	return - 1 ;	344:3:9245:9254	3089581	1	True				
ANR	3089831	UnaryOperationExpression	- 1		3089581	0					
ANR	3089832	UnaryOperator	-		3089581	0					
ANR	3089833	PrimaryExpression	1		3089581	1					
ANR	3089834	ReturnStatement	return bytes ;	348:1:9265:9277	3089581	7	True				
ANR	3089835	Identifier	bytes		3089581	0					
ANR	3089836	ReturnType	int		3089581	1					
ANR	3089837	Identifier	ReadPipeEnd :: read_helper		3089581	2					
ANR	3089838	ParameterList	"void * buffer , int len"		3089581	3					
ANR	3089839	Parameter	void * buffer	291:29:7797:7808	3089581	0	True				
ANR	3089840	ParameterType	void *		3089581	0					
ANR	3089841	Identifier	buffer		3089581	1					
ANR	3089842	Parameter	int len	291:43:7811:7817	3089581	1	True				
ANR	3089843	ParameterType	int		3089581	0					
ANR	3089844	Identifier	len		3089581	1					
ANR	3089845	CFGEntryNode	ENTRY		3089581		True				
ANR	3089846	CFGExitNode	EXIT		3089581		True				
ANR	3089847	Symbol	& tmp_overlapped		3089581						
ANR	3089848	Symbol	ERROR_IO_PENDING		3089581						
ANR	3089849	Symbol	ReadFile		3089581						
ANR	3089850	Symbol	GetOverlappedResult		3089581						
ANR	3089851	Symbol	len		3089581						
ANR	3089852	Symbol	& bytes		3089581						
ANR	3089853	Symbol	buffer		3089581						
ANR	3089854	Symbol	errno		3089581						
ANR	3089855	Symbol	m_overlapped		3089581						
ANR	3089856	Symbol	NULL		3089581						
ANR	3089857	Symbol	PeekNamedPipe		3089581						
ANR	3089858	Symbol	tmp_overlapped		3089581						
ANR	3089859	Symbol	m_handle		3089581						
ANR	3089860	Symbol	D_ALWAYS		3089581						
ANR	3089861	Symbol	bytes_avail		3089581						
ANR	3089862	Symbol	TRUE		3089581						
ANR	3089863	Symbol	D_FULLDEBUG		3089581						
ANR	3089864	Symbol	m_nonblocking		3089581						
ANR	3089865	Symbol	EINVAL		3089581						
ANR	3089866	Symbol	ERROR_HANDLE_EOF		3089581						
ANR	3089867	Symbol	GetLastError		3089581						
ANR	3089868	Symbol	bytes		3089581						
ANR	3089869	Symbol	EWOULDBLOCK		3089581						
ANR	3089870	Symbol	p_overlapped		3089581						
ANR	3089871	Symbol	& bytes_avail		3089581						
ANR	3089872	Symbol	ERROR_BROKEN_PIPE		3089581						
ANR	3089873	Function	WritePipeEnd :: pre_wait	353:0:9382:9433							
ANR	3089874	FunctionDef	WritePipeEnd :: pre_wait ()		3089873	0					
ANR	3089875	CompoundStatement		354:0:9414:9433	3089873	0					
ANR	3089876	ReturnStatement	return m_event ;	355:1:9417:9431	3089873	0	True				
ANR	3089877	Identifier	m_event		3089873	0					
ANR	3089878	ReturnType	HANDLE		3089873	1					
ANR	3089879	Identifier	WritePipeEnd :: pre_wait		3089873	2					
ANR	3089880	ParameterList			3089873	3					
ANR	3089881	CFGEntryNode	ENTRY		3089873		True				
ANR	3089882	CFGExitNode	EXIT		3089873		True				
ANR	3089883	Symbol	m_event		3089873						
ANR	3089884	Function	WritePipeEnd :: post_wait	361:0:9569:10578							
ANR	3089885	FunctionDef	WritePipeEnd :: post_wait ()		3089884	0					
ANR	3089886	CompoundStatement		362:0:9600:10578	3089884	0					
ANR	3089887	IfStatement	if ( m_async_io_buf )		3089884	0					
ANR	3089888	Condition	m_async_io_buf	363:5:9607:9620	3089884	0	True				
ANR	3089889	Identifier	m_async_io_buf		3089884	0					
ANR	3089890	CompoundStatement		6:2:91:102	3089884	1					
ANR	3089891	IdentifierDeclStatement	DWORD bytes ;	367:2:9692:9703	3089884	0	True				
ANR	3089892	IdentifierDecl	bytes		3089884	0					
ANR	3089893	IdentifierDeclType	DWORD		3089884	0					
ANR	3089894	Identifier	bytes		3089884	1					
ANR	3089895	ExpressionStatement	"GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"	368:2:9707:9772	3089884	1	True				
ANR	3089896	CallExpression	"GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"		3089884	0					
ANR	3089897	Callee	GetOverlappedResult		3089884	0					
ANR	3089898	Identifier	GetOverlappedResult		3089884	0					
ANR	3089899	ArgumentList	m_handle		3089884	1					
ANR	3089900	Argument	m_handle		3089884	0					
ANR	3089901	Identifier	m_handle		3089884	0					
ANR	3089902	Argument	& m_overlapped_struct		3089884	1					
ANR	3089903	UnaryOperationExpression	& m_overlapped_struct		3089884	0					
ANR	3089904	UnaryOperator	&		3089884	0					
ANR	3089905	Identifier	m_overlapped_struct		3089884	1					
ANR	3089906	Argument	& bytes		3089884	2					
ANR	3089907	UnaryOperationExpression	& bytes		3089884	0					
ANR	3089908	UnaryOperator	&		3089884	0					
ANR	3089909	Identifier	bytes		3089884	1					
ANR	3089910	Argument	TRUE		3089884	3					
ANR	3089911	Identifier	TRUE		3089884	0					
ANR	3089912	IfStatement	if ( bytes < m_async_io_size )		3089884	2					
ANR	3089913	Condition	bytes < m_async_io_size	369:6:9780:9802	3089884	0	True				
ANR	3089914	RelationalExpression	bytes < m_async_io_size		3089884	0		<			
ANR	3089915	Identifier	bytes		3089884	0					
ANR	3089916	Identifier	m_async_io_size		3089884	1					
ANR	3089917	CompoundStatement		13:3:315:352	3089884	1					
ANR	3089918	ExpressionStatement	m_async_io_size -= bytes	373:3:9887:9911	3089884	0	True				
ANR	3089919	AssignmentExpression	m_async_io_size -= bytes		3089884	0		-=			
ANR	3089920	Identifier	m_async_io_size		3089884	0					
ANR	3089921	Identifier	bytes		3089884	1					
ANR	3089922	IdentifierDeclStatement	char * buf = new char [ m_async_io_size ] ;	374:3:9916:9953	3089884	1	True				
ANR	3089923	IdentifierDecl	* buf = new char [ m_async_io_size ]		3089884	0					
ANR	3089924	IdentifierDeclType	char *		3089884	0					
ANR	3089925	Identifier	buf		3089884	1					
ANR	3089926	AssignmentExpression	* buf = new char [ m_async_io_size ]		3089884	2		=			
ANR	3089927	Identifier	m_async_io_size		3089884	0					
ANR	3089928	Identifier	m_async_io_size		3089884	1					
ANR	3089929	ExpressionStatement	"memcpy ( buf , m_async_io_buf + bytes , m_async_io_size )"	375:3:9958:10010	3089884	2	True				
ANR	3089930	CallExpression	"memcpy ( buf , m_async_io_buf + bytes , m_async_io_size )"		3089884	0					
ANR	3089931	Callee	memcpy		3089884	0					
ANR	3089932	Identifier	memcpy		3089884	0					
ANR	3089933	ArgumentList	buf		3089884	1					
ANR	3089934	Argument	buf		3089884	0					
ANR	3089935	Identifier	buf		3089884	0					
ANR	3089936	Argument	m_async_io_buf + bytes		3089884	1					
ANR	3089937	AdditiveExpression	m_async_io_buf + bytes		3089884	0		+			
ANR	3089938	Identifier	m_async_io_buf		3089884	0					
ANR	3089939	Identifier	bytes		3089884	1					
ANR	3089940	Argument	m_async_io_size		3089884	2					
ANR	3089941	Identifier	m_async_io_size		3089884	0					
ANR	3089942	Statement	delete	376:3:10015:10020	3089884	3	True				
ANR	3089943	Statement	[	376:9:10021:10021	3089884	4	True				
ANR	3089944	Statement	]	376:10:10022:10022	3089884	5	True				
ANR	3089945	ExpressionStatement	m_async_io_buf	376:12:10024:10038	3089884	6	True				
ANR	3089946	Identifier	m_async_io_buf		3089884	0					
ANR	3089947	ExpressionStatement	m_async_io_buf = buf	377:3:10043:10063	3089884	7	True				
ANR	3089948	AssignmentExpression	m_async_io_buf = buf		3089884	0		=			
ANR	3089949	Identifier	m_async_io_buf		3089884	0					
ANR	3089950	Identifier	buf		3089884	1					
ANR	3089951	ExpressionStatement	async_write_helper ( )	382:3:10214:10234	3089884	8	True				
ANR	3089952	CallExpression	async_write_helper ( )		3089884	0					
ANR	3089953	Callee	async_write_helper		3089884	0					
ANR	3089954	Identifier	async_write_helper		3089884	0					
ANR	3089955	ArgumentList			3089884	1					
ANR	3089956	ElseStatement	else		3089884	0					
ANR	3089957	CompoundStatement		25:7:648:648	3089884	0					
ANR	3089958	Statement	delete	387:3:10254:10259	3089884	0	True				
ANR	3089959	Statement	[	387:9:10260:10260	3089884	1	True				
ANR	3089960	Statement	]	387:10:10261:10261	3089884	2	True				
ANR	3089961	ExpressionStatement	m_async_io_buf	387:12:10263:10277	3089884	3	True				
ANR	3089962	Identifier	m_async_io_buf		3089884	0					
ANR	3089963	ExpressionStatement	m_async_io_buf = NULL	388:3:10282:10303	3089884	4	True				
ANR	3089964	AssignmentExpression	m_async_io_buf = NULL		3089884	0		=			
ANR	3089965	Identifier	m_async_io_buf		3089884	0					
ANR	3089966	Identifier	NULL		3089884	1					
ANR	3089967	IfStatement	if ( m_async_io_buf )		3089884	1					
ANR	3089968	Condition	m_async_io_buf	392:5:10318:10331	3089884	0	True				
ANR	3089969	Identifier	m_async_io_buf		3089884	0					
ANR	3089970	CompoundStatement		31:21:733:733	3089884	1					
ANR	3089971	ReturnStatement	return false ;	394:2:10402:10414	3089884	0	True				
ANR	3089972	Identifier	false		3089884	0					
ANR	3089973	ElseStatement	else		3089884	0					
ANR	3089974	CompoundStatement		35:6:824:824	3089884	0					
ANR	3089975	ExpressionStatement	SetEvent ( m_watched_event )	399:2:10532:10557	3089884	0	True				
ANR	3089976	CallExpression	SetEvent ( m_watched_event )		3089884	0					
ANR	3089977	Callee	SetEvent		3089884	0					
ANR	3089978	Identifier	SetEvent		3089884	0					
ANR	3089979	ArgumentList	m_watched_event		3089884	1					
ANR	3089980	Argument	m_watched_event		3089884	0					
ANR	3089981	Identifier	m_watched_event		3089884	0					
ANR	3089982	ReturnStatement	return true ;	401:2:10562:10573	3089884	1	True				
ANR	3089983	Identifier	true		3089884	0					
ANR	3089984	ReturnType	bool		3089884	1					
ANR	3089985	Identifier	WritePipeEnd :: post_wait		3089884	2					
ANR	3089986	ParameterList			3089884	3					
ANR	3089987	CFGEntryNode	ENTRY		3089884		True				
ANR	3089988	CFGExitNode	EXIT		3089884		True				
ANR	3089989	Symbol	buf		3089884						
ANR	3089990	Symbol	NULL		3089884						
ANR	3089991	Symbol	& bytes		3089884						
ANR	3089992	Symbol	bytes		3089884						
ANR	3089993	Symbol	& m_overlapped_struct		3089884						
ANR	3089994	Symbol	m_async_io_size		3089884						
ANR	3089995	Symbol	m_handle		3089884						
ANR	3089996	Symbol	false		3089884						
ANR	3089997	Symbol	m_watched_event		3089884						
ANR	3089998	Symbol	true		3089884						
ANR	3089999	Symbol	TRUE		3089884						
ANR	3090000	Symbol	m_async_io_buf		3089884						
ANR	3090001	Function	WritePipeEnd :: io_ready	407:0:10683:10747							
ANR	3090002	FunctionDef	WritePipeEnd :: io_ready ()		3090001	0					
ANR	3090003	CompoundStatement		408:0:10713:10747	3090001	0					
ANR	3090004	ReturnStatement	return m_async_io_buf == NULL ;	409:1:10716:10745	3090001	0	True				
ANR	3090005	EqualityExpression	m_async_io_buf == NULL		3090001	0		==			
ANR	3090006	Identifier	m_async_io_buf		3090001	0					
ANR	3090007	Identifier	NULL		3090001	1					
ANR	3090008	ReturnType	bool		3090001	1					
ANR	3090009	Identifier	WritePipeEnd :: io_ready		3090001	2					
ANR	3090010	ParameterList			3090001	3					
ANR	3090011	CFGEntryNode	ENTRY		3090001		True				
ANR	3090012	CFGExitNode	EXIT		3090001		True				
ANR	3090013	Symbol	NULL		3090001						
ANR	3090014	Symbol	m_async_io_buf		3090001						
ANR	3090015	Function	WritePipeEnd :: write	412:0:10750:12042							
ANR	3090016	FunctionDef	"WritePipeEnd :: write (const void * buffer , int len)"		3090015	0					
ANR	3090017	CompoundStatement		413:0:10803:12042	3090015	0					
ANR	3090018	ExpressionStatement	errno = EINVAL	415:1:10856:10870	3090015	0	True				
ANR	3090019	AssignmentExpression	errno = EINVAL		3090015	0		=			
ANR	3090020	Identifier	errno		3090015	0					
ANR	3090021	Identifier	EINVAL		3090015	1					
ANR	3090022	IfStatement	if ( ! m_overlapped )		3090015	1					
ANR	3090023	Condition	! m_overlapped	417:5:10878:10890	3090015	0	True				
ANR	3090024	UnaryOperationExpression	! m_overlapped		3090015	0					
ANR	3090025	UnaryOperator	!		3090015	0					
ANR	3090026	Identifier	m_overlapped		3090015	1					
ANR	3090027	CompoundStatement		9:2:219:230	3090015	1					
ANR	3090028	IdentifierDeclStatement	DWORD bytes ;	421:2:11023:11034	3090015	0	True				
ANR	3090029	IdentifierDecl	bytes		3090015	0					
ANR	3090030	IdentifierDeclType	DWORD		3090015	0					
ANR	3090031	Identifier	bytes		3090015	1					
ANR	3090032	IfStatement	"if ( ! WriteFile ( m_handle , buffer , len , & bytes , NULL ) )"		3090015	1					
ANR	3090033	Condition	"! WriteFile ( m_handle , buffer , len , & bytes , NULL )"	422:6:11042:11088	3090015	0	True				
ANR	3090034	UnaryOperationExpression	"! WriteFile ( m_handle , buffer , len , & bytes , NULL )"		3090015	0					
ANR	3090035	UnaryOperator	!		3090015	0					
ANR	3090036	CallExpression	"WriteFile ( m_handle , buffer , len , & bytes , NULL )"		3090015	1					
ANR	3090037	Callee	WriteFile		3090015	0					
ANR	3090038	Identifier	WriteFile		3090015	0					
ANR	3090039	ArgumentList	m_handle		3090015	1					
ANR	3090040	Argument	m_handle		3090015	0					
ANR	3090041	Identifier	m_handle		3090015	0					
ANR	3090042	Argument	buffer		3090015	1					
ANR	3090043	Identifier	buffer		3090015	0					
ANR	3090044	Argument	len		3090015	2					
ANR	3090045	Identifier	len		3090015	0					
ANR	3090046	Argument	& bytes		3090015	3					
ANR	3090047	UnaryOperationExpression	& bytes		3090015	0					
ANR	3090048	UnaryOperator	&		3090015	0					
ANR	3090049	Identifier	bytes		3090015	1					
ANR	3090050	Argument	NULL		3090015	4					
ANR	3090051	Identifier	NULL		3090015	0					
ANR	3090052	CompoundStatement		10:55:287:287	3090015	1					
ANR	3090053	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteFile error: %d\\n"" , GetLastError ( ) )"	423:3:11096:11154	3090015	0	True				
ANR	3090054	CallExpression	"dprintf ( D_ALWAYS , ""WriteFile error: %d\\n"" , GetLastError ( ) )"		3090015	0					
ANR	3090055	Callee	dprintf		3090015	0					
ANR	3090056	Identifier	dprintf		3090015	0					
ANR	3090057	ArgumentList	D_ALWAYS		3090015	1					
ANR	3090058	Argument	D_ALWAYS		3090015	0					
ANR	3090059	Identifier	D_ALWAYS		3090015	0					
ANR	3090060	Argument	"""WriteFile error: %d\\n"""		3090015	1					
ANR	3090061	PrimaryExpression	"""WriteFile error: %d\\n"""		3090015	0					
ANR	3090062	Argument	GetLastError ( )		3090015	2					
ANR	3090063	CallExpression	GetLastError ( )		3090015	0					
ANR	3090064	Callee	GetLastError		3090015	0					
ANR	3090065	Identifier	GetLastError		3090015	0					
ANR	3090066	ArgumentList			3090015	1					
ANR	3090067	ReturnStatement	return - 1 ;	424:3:11159:11168	3090015	1	True				
ANR	3090068	UnaryOperationExpression	- 1		3090015	0					
ANR	3090069	UnaryOperator	-		3090015	0					
ANR	3090070	PrimaryExpression	1		3090015	1					
ANR	3090071	ReturnStatement	return bytes ;	426:2:11176:11188	3090015	2	True				
ANR	3090072	Identifier	bytes		3090015	0					
ANR	3090073	ElseStatement	else		3090015	0					
ANR	3090074	CompoundStatement		36:2:890:903	3090015	0					
ANR	3090075	IdentifierDeclStatement	"DWORD result = WaitForSingleObject ( m_watched_event , m_nonblocking ? 0 : INFINITE ) ;"	431:2:11260:11341	3090015	0	True				
ANR	3090076	IdentifierDecl	"result = WaitForSingleObject ( m_watched_event , m_nonblocking ? 0 : INFINITE )"		3090015	0					
ANR	3090077	IdentifierDeclType	DWORD		3090015	0					
ANR	3090078	Identifier	result		3090015	1					
ANR	3090079	AssignmentExpression	"result = WaitForSingleObject ( m_watched_event , m_nonblocking ? 0 : INFINITE )"		3090015	2		=			
ANR	3090080	Identifier	result		3090015	0					
ANR	3090081	CallExpression	"WaitForSingleObject ( m_watched_event , m_nonblocking ? 0 : INFINITE )"		3090015	1					
ANR	3090082	Callee	WaitForSingleObject		3090015	0					
ANR	3090083	Identifier	WaitForSingleObject		3090015	0					
ANR	3090084	ArgumentList	m_watched_event		3090015	1					
ANR	3090085	Argument	m_watched_event		3090015	0					
ANR	3090086	Identifier	m_watched_event		3090015	0					
ANR	3090087	Argument	m_nonblocking ? 0 : INFINITE		3090015	1					
ANR	3090088	ConditionalExpression	m_nonblocking ? 0 : INFINITE		3090015	0					
ANR	3090089	Condition	m_nonblocking		3090015	0					
ANR	3090090	Identifier	m_nonblocking		3090015	0					
ANR	3090091	PrimaryExpression	0		3090015	1					
ANR	3090092	Identifier	INFINITE		3090015	2					
ANR	3090093	IfStatement	if ( result == WAIT_TIMEOUT )		3090015	1					
ANR	3090094	Condition	result == WAIT_TIMEOUT	432:6:11349:11370	3090015	0	True				
ANR	3090095	EqualityExpression	result == WAIT_TIMEOUT		3090015	0		==			
ANR	3090096	Identifier	result		3090015	0					
ANR	3090097	Identifier	WAIT_TIMEOUT		3090015	1					
ANR	3090098	CompoundStatement		20:30:569:569	3090015	1					
ANR	3090099	ExpressionStatement	errno = EWOULDBLOCK	433:3:11378:11397	3090015	0	True				
ANR	3090100	AssignmentExpression	errno = EWOULDBLOCK		3090015	0		=			
ANR	3090101	Identifier	errno		3090015	0					
ANR	3090102	Identifier	EWOULDBLOCK		3090015	1					
ANR	3090103	ReturnStatement	return - 1 ;	434:3:11402:11411	3090015	1	True				
ANR	3090104	UnaryOperationExpression	- 1		3090015	0					
ANR	3090105	UnaryOperator	-		3090015	0					
ANR	3090106	PrimaryExpression	1		3090015	1					
ANR	3090107	ExpressionStatement	ASSERT ( result == WAIT_OBJECT_0 )	436:2:11419:11450	3090015	2	True				
ANR	3090108	CallExpression	ASSERT ( result == WAIT_OBJECT_0 )		3090015	0					
ANR	3090109	Callee	ASSERT		3090015	0					
ANR	3090110	Identifier	ASSERT		3090015	0					
ANR	3090111	ArgumentList	result == WAIT_OBJECT_0		3090015	1					
ANR	3090112	Argument	result == WAIT_OBJECT_0		3090015	0					
ANR	3090113	EqualityExpression	result == WAIT_OBJECT_0		3090015	0		==			
ANR	3090114	Identifier	result		3090015	0					
ANR	3090115	Identifier	WAIT_OBJECT_0		3090015	1					
ANR	3090116	WhileStatement	while ( m_async_io_buf )		3090015	3					
ANR	3090117	Condition	m_async_io_buf	439:9:11513:11526	3090015	0	True				
ANR	3090118	Identifier	m_async_io_buf		3090015	0					
ANR	3090119	CompoundStatement		27:25:725:725	3090015	1					
ANR	3090120	IfStatement	if ( ! complete_async_write ( m_nonblocking ) )		3090015	0					
ANR	3090121	Condition	! complete_async_write ( m_nonblocking )	442:7:11602:11637	3090015	0	True				
ANR	3090122	UnaryOperationExpression	! complete_async_write ( m_nonblocking )		3090015	0					
ANR	3090123	UnaryOperator	!		3090015	0					
ANR	3090124	CallExpression	complete_async_write ( m_nonblocking )		3090015	1					
ANR	3090125	Callee	complete_async_write		3090015	0					
ANR	3090126	Identifier	complete_async_write		3090015	0					
ANR	3090127	ArgumentList	m_nonblocking		3090015	1					
ANR	3090128	Argument	m_nonblocking		3090015	0					
ANR	3090129	Identifier	m_nonblocking		3090015	0					
ANR	3090130	CompoundStatement		30:45:836:836	3090015	1					
ANR	3090131	ExpressionStatement	errno = EWOULDBLOCK	443:4:11646:11665	3090015	0	True				
ANR	3090132	AssignmentExpression	errno = EWOULDBLOCK		3090015	0		=			
ANR	3090133	Identifier	errno		3090015	0					
ANR	3090134	Identifier	EWOULDBLOCK		3090015	1					
ANR	3090135	ReturnStatement	return - 1 ;	444:4:11671:11680	3090015	1	True				
ANR	3090136	UnaryOperationExpression	- 1		3090015	0					
ANR	3090137	UnaryOperator	-		3090015	0					
ANR	3090138	PrimaryExpression	1		3090015	1					
ANR	3090139	IdentifierDeclStatement	int ret = len ;	448:2:11694:11707	3090015	4	True				
ANR	3090140	IdentifierDecl	ret = len		3090015	0					
ANR	3090141	IdentifierDeclType	int		3090015	0					
ANR	3090142	Identifier	ret		3090015	1					
ANR	3090143	AssignmentExpression	ret = len		3090015	2		=			
ANR	3090144	Identifier	len		3090015	0					
ANR	3090145	Identifier	len		3090015	1					
ANR	3090146	IfStatement	if ( m_async_io_error )		3090015	5					
ANR	3090147	Condition	m_async_io_error	450:6:11716:11731	3090015	0	True				
ANR	3090148	Identifier	m_async_io_error		3090015	0					
ANR	3090149	CompoundStatement		38:24:930:930	3090015	1					
ANR	3090150	ExpressionStatement	ret = - 1	451:3:11739:11747	3090015	0	True				
ANR	3090151	AssignmentExpression	ret = - 1		3090015	0		=			
ANR	3090152	Identifier	ret		3090015	0					
ANR	3090153	UnaryOperationExpression	- 1		3090015	1					
ANR	3090154	UnaryOperator	-		3090015	0					
ANR	3090155	PrimaryExpression	1		3090015	1					
ANR	3090156	ElseStatement	else		3090015	0					
ANR	3090157	CompoundStatement		41:7:956:956	3090015	0					
ANR	3090158	ExpressionStatement	m_async_io_size = len	455:3:11812:11833	3090015	0	True				
ANR	3090159	AssignmentExpression	m_async_io_size = len		3090015	0		=			
ANR	3090160	Identifier	m_async_io_size		3090015	0					
ANR	3090161	Identifier	len		3090015	1					
ANR	3090162	ExpressionStatement	m_async_io_buf = new char [ m_async_io_size ]	456:3:11838:11880	3090015	1	True				
ANR	3090163	AssignmentExpression	m_async_io_buf = new char [ m_async_io_size ]		3090015	0		=			
ANR	3090164	Identifier	m_async_io_buf		3090015	0					
ANR	3090165	Identifier	m_async_io_size		3090015	1					
ANR	3090166	ExpressionStatement	"memcpy ( m_async_io_buf , buffer , m_async_io_size )"	457:3:11885:11932	3090015	2	True				
ANR	3090167	CallExpression	"memcpy ( m_async_io_buf , buffer , m_async_io_size )"		3090015	0					
ANR	3090168	Callee	memcpy		3090015	0					
ANR	3090169	Identifier	memcpy		3090015	0					
ANR	3090170	ArgumentList	m_async_io_buf		3090015	1					
ANR	3090171	Argument	m_async_io_buf		3090015	0					
ANR	3090172	Identifier	m_async_io_buf		3090015	0					
ANR	3090173	Argument	buffer		3090015	1					
ANR	3090174	Identifier	buffer		3090015	0					
ANR	3090175	Argument	m_async_io_size		3090015	2					
ANR	3090176	Identifier	m_async_io_size		3090015	0					
ANR	3090177	IfStatement	if ( async_write_helper ( ) == - 1 )		3090015	3					
ANR	3090178	Condition	async_write_helper ( ) == - 1	458:7:11941:11966	3090015	0	True				
ANR	3090179	EqualityExpression	async_write_helper ( ) == - 1		3090015	0		==			
ANR	3090180	CallExpression	async_write_helper ( )		3090015	0					
ANR	3090181	Callee	async_write_helper		3090015	0					
ANR	3090182	Identifier	async_write_helper		3090015	0					
ANR	3090183	ArgumentList			3090015	1					
ANR	3090184	UnaryOperationExpression	- 1		3090015	1					
ANR	3090185	UnaryOperator	-		3090015	0					
ANR	3090186	PrimaryExpression	1		3090015	1					
ANR	3090187	CompoundStatement		46:35:1165:1165	3090015	1					
ANR	3090188	ExpressionStatement	ret = - 1	459:4:11975:11983	3090015	0	True				
ANR	3090189	AssignmentExpression	ret = - 1		3090015	0		=			
ANR	3090190	Identifier	ret		3090015	0					
ANR	3090191	UnaryOperationExpression	- 1		3090015	1					
ANR	3090192	UnaryOperator	-		3090015	0					
ANR	3090193	PrimaryExpression	1		3090015	1					
ANR	3090194	ElseStatement	else		3090015	0					
ANR	3090195	CompoundStatement		49:8:1194:1194	3090015	0					
ANR	3090196	ExpressionStatement	ret = len	462:4:12004:12013	3090015	0	True				
ANR	3090197	AssignmentExpression	ret = len		3090015	0		=			
ANR	3090198	Identifier	ret		3090015	0					
ANR	3090199	Identifier	len		3090015	1					
ANR	3090200	ReturnStatement	return ret ;	466:2:12027:12037	3090015	6	True				
ANR	3090201	Identifier	ret		3090015	0					
ANR	3090202	ReturnType	int		3090015	1					
ANR	3090203	Identifier	WritePipeEnd :: write		3090015	2					
ANR	3090204	ParameterList	"const void * buffer , int len"		3090015	3					
ANR	3090205	Parameter	const void * buffer	412:24:10774:10791	3090015	0	True				
ANR	3090206	ParameterType	const void *		3090015	0					
ANR	3090207	Identifier	buffer		3090015	1					
ANR	3090208	Parameter	int len	412:44:10794:10800	3090015	1	True				
ANR	3090209	ParameterType	int		3090015	0					
ANR	3090210	Identifier	len		3090015	1					
ANR	3090211	CFGEntryNode	ENTRY		3090015		True				
ANR	3090212	CFGExitNode	EXIT		3090015		True				
ANR	3090213	Symbol	WriteFile		3090015						
ANR	3090214	Symbol	m_async_io_size		3090015						
ANR	3090215	Symbol	WaitForSingleObject		3090015						
ANR	3090216	Symbol	result		3090015						
ANR	3090217	Symbol	len		3090015						
ANR	3090218	Symbol	& bytes		3090015						
ANR	3090219	Symbol	complete_async_write		3090015						
ANR	3090220	Symbol	WAIT_TIMEOUT		3090015						
ANR	3090221	Symbol	m_watched_event		3090015						
ANR	3090222	Symbol	WAIT_OBJECT_0		3090015						
ANR	3090223	Symbol	buffer		3090015						
ANR	3090224	Symbol	ret		3090015						
ANR	3090225	Symbol	m_async_io_error		3090015						
ANR	3090226	Symbol	errno		3090015						
ANR	3090227	Symbol	m_overlapped		3090015						
ANR	3090228	Symbol	NULL		3090015						
ANR	3090229	Symbol	m_handle		3090015						
ANR	3090230	Symbol	D_ALWAYS		3090015						
ANR	3090231	Symbol	INFINITE		3090015						
ANR	3090232	Symbol	m_nonblocking		3090015						
ANR	3090233	Symbol	EINVAL		3090015						
ANR	3090234	Symbol	async_write_helper		3090015						
ANR	3090235	Symbol	bytes		3090015						
ANR	3090236	Symbol	GetLastError		3090015						
ANR	3090237	Symbol	EWOULDBLOCK		3090015						
ANR	3090238	Symbol	m_async_io_buf		3090015						
ANR	3090239	Function	WritePipeEnd :: async_write_helper	478:0:12400:13611							
ANR	3090240	FunctionDef	WritePipeEnd :: async_write_helper ()		3090239	0					
ANR	3090241	CompoundStatement		479:0:12439:13611	3090239	0					
ANR	3090242	IdentifierDeclStatement	int ret ;	480:1:12442:12449	3090239	0	True				
ANR	3090243	IdentifierDecl	ret		3090239	0					
ANR	3090244	IdentifierDeclType	int		3090239	0					
ANR	3090245	Identifier	ret		3090239	1					
ANR	3090246	ExpressionStatement	m_async_io_error = 0	482:1:12453:12473	3090239	1	True				
ANR	3090247	AssignmentExpression	m_async_io_error = 0		3090239	0		=			
ANR	3090248	Identifier	m_async_io_error		3090239	0					
ANR	3090249	PrimaryExpression	0		3090239	1					
ANR	3090250	IdentifierDeclStatement	bool keep_going ;	484:1:12477:12492	3090239	2	True				
ANR	3090251	IdentifierDecl	keep_going		3090239	0					
ANR	3090252	IdentifierDeclType	bool		3090239	0					
ANR	3090253	Identifier	keep_going		3090239	1					
ANR	3090254	DoStatement	do		3090239	3					
ANR	3090255	CompoundStatement		11:2:180:191	3090239	0					
ANR	3090256	ExpressionStatement	keep_going = false	486:2:12502:12520	3090239	0	True				
ANR	3090257	AssignmentExpression	keep_going = false		3090239	0		=			
ANR	3090258	Identifier	keep_going		3090239	0					
ANR	3090259	Identifier	false		3090239	1					
ANR	3090260	ExpressionStatement	"ZeroMemory ( & m_overlapped_struct , sizeof ( OVERLAPPED ) )"	487:2:12524:12576	3090239	1	True				
ANR	3090261	CallExpression	"ZeroMemory ( & m_overlapped_struct , sizeof ( OVERLAPPED ) )"		3090239	0					
ANR	3090262	Callee	ZeroMemory		3090239	0					
ANR	3090263	Identifier	ZeroMemory		3090239	0					
ANR	3090264	ArgumentList	& m_overlapped_struct		3090239	1					
ANR	3090265	Argument	& m_overlapped_struct		3090239	0					
ANR	3090266	UnaryOperationExpression	& m_overlapped_struct		3090239	0					
ANR	3090267	UnaryOperator	&		3090239	0					
ANR	3090268	Identifier	m_overlapped_struct		3090239	1					
ANR	3090269	Argument	sizeof ( OVERLAPPED )		3090239	1					
ANR	3090270	SizeofExpression	sizeof ( OVERLAPPED )		3090239	0					
ANR	3090271	Sizeof	sizeof		3090239	0					
ANR	3090272	SizeofOperand	OVERLAPPED		3090239	1					
ANR	3090273	ExpressionStatement	m_overlapped_struct . hEvent = m_event	488:2:12580:12616	3090239	2	True				
ANR	3090274	AssignmentExpression	m_overlapped_struct . hEvent = m_event		3090239	0		=			
ANR	3090275	MemberAccess	m_overlapped_struct . hEvent		3090239	0					
ANR	3090276	Identifier	m_overlapped_struct		3090239	0					
ANR	3090277	Identifier	hEvent		3090239	1					
ANR	3090278	Identifier	m_event		3090239	1					
ANR	3090279	IdentifierDeclStatement	DWORD bytes ;	489:2:12620:12631	3090239	3	True				
ANR	3090280	IdentifierDecl	bytes		3090239	0					
ANR	3090281	IdentifierDeclType	DWORD		3090239	0					
ANR	3090282	Identifier	bytes		3090239	1					
ANR	3090283	IfStatement	"if ( WriteFile ( m_handle , m_async_io_buf , m_async_io_size , & bytes , & m_overlapped_struct ) )"		3090239	4					
ANR	3090284	Condition	"WriteFile ( m_handle , m_async_io_buf , m_async_io_size , & bytes , & m_overlapped_struct )"	490:6:12639:12720	3090239	0	True				
ANR	3090285	CallExpression	"WriteFile ( m_handle , m_async_io_buf , m_async_io_size , & bytes , & m_overlapped_struct )"		3090239	0					
ANR	3090286	Callee	WriteFile		3090239	0					
ANR	3090287	Identifier	WriteFile		3090239	0					
ANR	3090288	ArgumentList	m_handle		3090239	1					
ANR	3090289	Argument	m_handle		3090239	0					
ANR	3090290	Identifier	m_handle		3090239	0					
ANR	3090291	Argument	m_async_io_buf		3090239	1					
ANR	3090292	Identifier	m_async_io_buf		3090239	0					
ANR	3090293	Argument	m_async_io_size		3090239	2					
ANR	3090294	Identifier	m_async_io_size		3090239	0					
ANR	3090295	Argument	& bytes		3090239	3					
ANR	3090296	UnaryOperationExpression	& bytes		3090239	0					
ANR	3090297	UnaryOperator	&		3090239	0					
ANR	3090298	Identifier	bytes		3090239	1					
ANR	3090299	Argument	& m_overlapped_struct		3090239	4					
ANR	3090300	UnaryOperationExpression	& m_overlapped_struct		3090239	0					
ANR	3090301	UnaryOperator	&		3090239	0					
ANR	3090302	Identifier	m_overlapped_struct		3090239	1					
ANR	3090303	CompoundStatement		12:90:283:283	3090239	1					
ANR	3090304	IfStatement	if ( bytes == m_async_io_size )		3090239	0					
ANR	3090305	Condition	bytes == m_async_io_size	491:7:12732:12755	3090239	0	True				
ANR	3090306	EqualityExpression	bytes == m_async_io_size		3090239	0		==			
ANR	3090307	Identifier	bytes		3090239	0					
ANR	3090308	Identifier	m_async_io_size		3090239	1					
ANR	3090309	CompoundStatement		13:33:318:318	3090239	1					
ANR	3090310	Statement	delete	493:4:12833:12838	3090239	0	True				
ANR	3090311	Statement	[	493:10:12839:12839	3090239	1	True				
ANR	3090312	Statement	]	493:11:12840:12840	3090239	2	True				
ANR	3090313	ExpressionStatement	m_async_io_buf	493:13:12842:12856	3090239	3	True				
ANR	3090314	Identifier	m_async_io_buf		3090239	0					
ANR	3090315	ExpressionStatement	m_async_io_buf = NULL	494:4:12862:12883	3090239	4	True				
ANR	3090316	AssignmentExpression	m_async_io_buf = NULL		3090239	0		=			
ANR	3090317	Identifier	m_async_io_buf		3090239	0					
ANR	3090318	Identifier	NULL		3090239	1					
ANR	3090319	ExpressionStatement	m_async_io_size = 0	495:4:12889:12908	3090239	5	True				
ANR	3090320	AssignmentExpression	m_async_io_size = 0		3090239	0		=			
ANR	3090321	Identifier	m_async_io_size		3090239	0					
ANR	3090322	PrimaryExpression	0		3090239	1					
ANR	3090323	ExpressionStatement	ret = 0	496:4:12914:12921	3090239	6	True				
ANR	3090324	AssignmentExpression	ret = 0		3090239	0		=			
ANR	3090325	Identifier	ret		3090239	0					
ANR	3090326	PrimaryExpression	0		3090239	1					
ANR	3090327	ElseStatement	else		3090239	0					
ANR	3090328	CompoundStatement		23:4:602:639	3090239	0					
ANR	3090329	ExpressionStatement	m_async_io_size -= bytes	500:4:13012:13036	3090239	0	True				
ANR	3090330	AssignmentExpression	m_async_io_size -= bytes		3090239	0		-=			
ANR	3090331	Identifier	m_async_io_size		3090239	0					
ANR	3090332	Identifier	bytes		3090239	1					
ANR	3090333	IdentifierDeclStatement	char * buf = new char [ m_async_io_size ] ;	501:4:13042:13079	3090239	1	True				
ANR	3090334	IdentifierDecl	* buf = new char [ m_async_io_size ]		3090239	0					
ANR	3090335	IdentifierDeclType	char *		3090239	0					
ANR	3090336	Identifier	buf		3090239	1					
ANR	3090337	AssignmentExpression	* buf = new char [ m_async_io_size ]		3090239	2		=			
ANR	3090338	Identifier	m_async_io_size		3090239	0					
ANR	3090339	Identifier	m_async_io_size		3090239	1					
ANR	3090340	ExpressionStatement	"memcpy ( buf , m_async_io_buf + bytes , m_async_io_size )"	502:4:13085:13137	3090239	2	True				
ANR	3090341	CallExpression	"memcpy ( buf , m_async_io_buf + bytes , m_async_io_size )"		3090239	0					
ANR	3090342	Callee	memcpy		3090239	0					
ANR	3090343	Identifier	memcpy		3090239	0					
ANR	3090344	ArgumentList	buf		3090239	1					
ANR	3090345	Argument	buf		3090239	0					
ANR	3090346	Identifier	buf		3090239	0					
ANR	3090347	Argument	m_async_io_buf + bytes		3090239	1					
ANR	3090348	AdditiveExpression	m_async_io_buf + bytes		3090239	0		+			
ANR	3090349	Identifier	m_async_io_buf		3090239	0					
ANR	3090350	Identifier	bytes		3090239	1					
ANR	3090351	Argument	m_async_io_size		3090239	2					
ANR	3090352	Identifier	m_async_io_size		3090239	0					
ANR	3090353	Statement	delete	503:4:13143:13148	3090239	3	True				
ANR	3090354	Statement	[	503:10:13149:13149	3090239	4	True				
ANR	3090355	Statement	]	503:11:13150:13150	3090239	5	True				
ANR	3090356	ExpressionStatement	m_async_io_buf	503:13:13152:13166	3090239	6	True				
ANR	3090357	Identifier	m_async_io_buf		3090239	0					
ANR	3090358	ExpressionStatement	m_async_io_buf = buf	504:4:13172:13192	3090239	7	True				
ANR	3090359	AssignmentExpression	m_async_io_buf = buf		3090239	0		=			
ANR	3090360	Identifier	m_async_io_buf		3090239	0					
ANR	3090361	Identifier	buf		3090239	1					
ANR	3090362	ExpressionStatement	keep_going = true	505:4:13198:13215	3090239	8	True				
ANR	3090363	AssignmentExpression	keep_going = true		3090239	0		=			
ANR	3090364	Identifier	keep_going		3090239	0					
ANR	3090365	Identifier	true		3090239	1					
ANR	3090366	ElseStatement	else		3090239	0					
ANR	3090367	IfStatement	if ( GetLastError ( ) == ERROR_IO_PENDING )		3090239	0					
ANR	3090368	Condition	GetLastError ( ) == ERROR_IO_PENDING	508:11:13237:13270	3090239	0	True				
ANR	3090369	EqualityExpression	GetLastError ( ) == ERROR_IO_PENDING		3090239	0		==			
ANR	3090370	CallExpression	GetLastError ( )		3090239	0					
ANR	3090371	Callee	GetLastError		3090239	0					
ANR	3090372	Identifier	GetLastError		3090239	0					
ANR	3090373	ArgumentList			3090239	1					
ANR	3090374	Identifier	ERROR_IO_PENDING		3090239	1					
ANR	3090375	CompoundStatement		30:47:833:833	3090239	1					
ANR	3090376	ExpressionStatement	ret = 0	510:3:13339:13346	3090239	0	True				
ANR	3090377	AssignmentExpression	ret = 0		3090239	0		=			
ANR	3090378	Identifier	ret		3090239	0					
ANR	3090379	PrimaryExpression	0		3090239	1					
ANR	3090380	ElseStatement	else		3090239	0					
ANR	3090381	CompoundStatement		34:7:919:919	3090239	0					
ANR	3090382	ExpressionStatement	m_async_io_error = GetLastError ( )	514:3:13400:13433	3090239	0	True				
ANR	3090383	AssignmentExpression	m_async_io_error = GetLastError ( )		3090239	0		=			
ANR	3090384	Identifier	m_async_io_error		3090239	0					
ANR	3090385	CallExpression	GetLastError ( )		3090239	1					
ANR	3090386	Callee	GetLastError		3090239	0					
ANR	3090387	Identifier	GetLastError		3090239	0					
ANR	3090388	ArgumentList			3090239	1					
ANR	3090389	Statement	delete	515:3:13438:13443	3090239	1	True				
ANR	3090390	Statement	[	515:9:13444:13444	3090239	2	True				
ANR	3090391	Statement	]	515:10:13445:13445	3090239	3	True				
ANR	3090392	ExpressionStatement	m_async_io_buf	515:12:13447:13461	3090239	4	True				
ANR	3090393	Identifier	m_async_io_buf		3090239	0					
ANR	3090394	ExpressionStatement	m_async_io_buf = NULL	516:3:13466:13487	3090239	5	True				
ANR	3090395	AssignmentExpression	m_async_io_buf = NULL		3090239	0		=			
ANR	3090396	Identifier	m_async_io_buf		3090239	0					
ANR	3090397	Identifier	NULL		3090239	1					
ANR	3090398	ExpressionStatement	ret = - 1	517:3:13492:13500	3090239	6	True				
ANR	3090399	AssignmentExpression	ret = - 1		3090239	0		=			
ANR	3090400	Identifier	ret		3090239	0					
ANR	3090401	UnaryOperationExpression	- 1		3090239	1					
ANR	3090402	UnaryOperator	-		3090239	0					
ANR	3090403	PrimaryExpression	1		3090239	1					
ANR	3090404	ExpressionStatement	SetEvent ( m_event )	520:3:13551:13568	3090239	7	True				
ANR	3090405	CallExpression	SetEvent ( m_event )		3090239	0					
ANR	3090406	Callee	SetEvent		3090239	0					
ANR	3090407	Identifier	SetEvent		3090239	0					
ANR	3090408	ArgumentList	m_event		3090239	1					
ANR	3090409	Argument	m_event		3090239	0					
ANR	3090410	Identifier	m_event		3090239	0					
ANR	3090411	Condition	keep_going	522:10:13584:13593	3090239	1	True				
ANR	3090412	Identifier	keep_going		3090239	0					
ANR	3090413	ReturnStatement	return ret ;	524:1:13599:13609	3090239	4	True				
ANR	3090414	Identifier	ret		3090239	0					
ANR	3090415	ReturnType	int		3090239	1					
ANR	3090416	Identifier	WritePipeEnd :: async_write_helper		3090239	2					
ANR	3090417	ParameterList			3090239	3					
ANR	3090418	CFGEntryNode	ENTRY		3090239		True				
ANR	3090419	CFGExitNode	EXIT		3090239		True				
ANR	3090420	Symbol	ret		3090239						
ANR	3090421	Symbol	m_async_io_error		3090239						
ANR	3090422	Symbol	m_event		3090239						
ANR	3090423	Symbol	WriteFile		3090239						
ANR	3090424	Symbol	NULL		3090239						
ANR	3090425	Symbol	m_async_io_size		3090239						
ANR	3090426	Symbol	ERROR_IO_PENDING		3090239						
ANR	3090427	Symbol	false		3090239						
ANR	3090428	Symbol	m_overlapped_struct . hEvent		3090239						
ANR	3090429	Symbol	m_handle		3090239						
ANR	3090430	Symbol	buf		3090239						
ANR	3090431	Symbol	& bytes		3090239						
ANR	3090432	Symbol	& m_overlapped_struct		3090239						
ANR	3090433	Symbol	bytes		3090239						
ANR	3090434	Symbol	GetLastError		3090239						
ANR	3090435	Symbol	true		3090239						
ANR	3090436	Symbol	m_overlapped_struct		3090239						
ANR	3090437	Symbol	m_async_io_buf		3090239						
ANR	3090438	Symbol	keep_going		3090239						
ANR	3090439	Function	WritePipeEnd :: complete_async_write	527:0:13614:14663							
ANR	3090440	FunctionDef	WritePipeEnd :: complete_async_write (bool nonblocking)		3090439	0					
ANR	3090441	CompoundStatement		528:0:13672:14663	3090439	0					
ANR	3090442	WhileStatement	while ( m_async_io_buf )		3090439	0					
ANR	3090443	Condition	m_async_io_buf	529:8:13682:13695	3090439	0	True				
ANR	3090444	Identifier	m_async_io_buf		3090439	0					
ANR	3090445	CompoundStatement		11:2:230:241	3090439	1					
ANR	3090446	IdentifierDeclStatement	"DWORD result = WaitForSingleObject ( m_event , nonblocking ? 0 : INFINITE ) ;"	532:2:13737:13808	3090439	0	True				
ANR	3090447	IdentifierDecl	"result = WaitForSingleObject ( m_event , nonblocking ? 0 : INFINITE )"		3090439	0					
ANR	3090448	IdentifierDeclType	DWORD		3090439	0					
ANR	3090449	Identifier	result		3090439	1					
ANR	3090450	AssignmentExpression	"result = WaitForSingleObject ( m_event , nonblocking ? 0 : INFINITE )"		3090439	2		=			
ANR	3090451	Identifier	result		3090439	0					
ANR	3090452	CallExpression	"WaitForSingleObject ( m_event , nonblocking ? 0 : INFINITE )"		3090439	1					
ANR	3090453	Callee	WaitForSingleObject		3090439	0					
ANR	3090454	Identifier	WaitForSingleObject		3090439	0					
ANR	3090455	ArgumentList	m_event		3090439	1					
ANR	3090456	Argument	m_event		3090439	0					
ANR	3090457	Identifier	m_event		3090439	0					
ANR	3090458	Argument	nonblocking ? 0 : INFINITE		3090439	1					
ANR	3090459	ConditionalExpression	nonblocking ? 0 : INFINITE		3090439	0					
ANR	3090460	Condition	nonblocking		3090439	0					
ANR	3090461	Identifier	nonblocking		3090439	0					
ANR	3090462	PrimaryExpression	0		3090439	1					
ANR	3090463	Identifier	INFINITE		3090439	2					
ANR	3090464	IfStatement	if ( result == WAIT_TIMEOUT )		3090439	1					
ANR	3090465	Condition	result == WAIT_TIMEOUT	533:6:13816:13837	3090439	0	True				
ANR	3090466	EqualityExpression	result == WAIT_TIMEOUT		3090439	0		==			
ANR	3090467	Identifier	result		3090439	0					
ANR	3090468	Identifier	WAIT_TIMEOUT		3090439	1					
ANR	3090469	CompoundStatement		6:30:167:167	3090439	1					
ANR	3090470	ReturnStatement	return false ;	534:3:13845:13857	3090439	0	True				
ANR	3090471	Identifier	false		3090439	0					
ANR	3090472	ExpressionStatement	ASSERT ( result == WAIT_OBJECT_0 )	536:2:13865:13896	3090439	2	True				
ANR	3090473	CallExpression	ASSERT ( result == WAIT_OBJECT_0 )		3090439	0					
ANR	3090474	Callee	ASSERT		3090439	0					
ANR	3090475	Identifier	ASSERT		3090439	0					
ANR	3090476	ArgumentList	result == WAIT_OBJECT_0		3090439	1					
ANR	3090477	Argument	result == WAIT_OBJECT_0		3090439	0					
ANR	3090478	EqualityExpression	result == WAIT_OBJECT_0		3090439	0		==			
ANR	3090479	Identifier	result		3090439	0					
ANR	3090480	Identifier	WAIT_OBJECT_0		3090439	1					
ANR	3090481	IdentifierDeclStatement	DWORD bytes ;	538:2:13903:13914	3090439	3	True				
ANR	3090482	IdentifierDecl	bytes		3090439	0					
ANR	3090483	IdentifierDeclType	DWORD		3090439	0					
ANR	3090484	Identifier	bytes		3090439	1					
ANR	3090485	IfStatement	"if ( ! GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE ) )"		3090439	4					
ANR	3090486	Condition	"! GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"	539:6:13922:13987	3090439	0	True				
ANR	3090487	UnaryOperationExpression	"! GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"		3090439	0					
ANR	3090488	UnaryOperator	!		3090439	0					
ANR	3090489	CallExpression	"GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"		3090439	1					
ANR	3090490	Callee	GetOverlappedResult		3090439	0					
ANR	3090491	Identifier	GetOverlappedResult		3090439	0					
ANR	3090492	ArgumentList	m_handle		3090439	1					
ANR	3090493	Argument	m_handle		3090439	0					
ANR	3090494	Identifier	m_handle		3090439	0					
ANR	3090495	Argument	& m_overlapped_struct		3090439	1					
ANR	3090496	UnaryOperationExpression	& m_overlapped_struct		3090439	0					
ANR	3090497	UnaryOperator	&		3090439	0					
ANR	3090498	Identifier	m_overlapped_struct		3090439	1					
ANR	3090499	Argument	& bytes		3090439	2					
ANR	3090500	UnaryOperationExpression	& bytes		3090439	0					
ANR	3090501	UnaryOperator	&		3090439	0					
ANR	3090502	Identifier	bytes		3090439	1					
ANR	3090503	Argument	TRUE		3090439	3					
ANR	3090504	Identifier	TRUE		3090439	0					
ANR	3090505	CompoundStatement		12:74:317:317	3090439	1					
ANR	3090506	ExpressionStatement	"dprintf ( D_ALWAYS , ""GetOverlappedResult error: %d\\n"" , GetLastError ( ) )"	540:3:13995:14063	3090439	0	True				
ANR	3090507	CallExpression	"dprintf ( D_ALWAYS , ""GetOverlappedResult error: %d\\n"" , GetLastError ( ) )"		3090439	0					
ANR	3090508	Callee	dprintf		3090439	0					
ANR	3090509	Identifier	dprintf		3090439	0					
ANR	3090510	ArgumentList	D_ALWAYS		3090439	1					
ANR	3090511	Argument	D_ALWAYS		3090439	0					
ANR	3090512	Identifier	D_ALWAYS		3090439	0					
ANR	3090513	Argument	"""GetOverlappedResult error: %d\\n"""		3090439	1					
ANR	3090514	PrimaryExpression	"""GetOverlappedResult error: %d\\n"""		3090439	0					
ANR	3090515	Argument	GetLastError ( )		3090439	2					
ANR	3090516	CallExpression	GetLastError ( )		3090439	0					
ANR	3090517	Callee	GetLastError		3090439	0					
ANR	3090518	Identifier	GetLastError		3090439	0					
ANR	3090519	ArgumentList			3090439	1					
ANR	3090520	ExpressionStatement	m_async_io_error = GetLastError ( )	541:3:14068:14101	3090439	1	True				
ANR	3090521	AssignmentExpression	m_async_io_error = GetLastError ( )		3090439	0		=			
ANR	3090522	Identifier	m_async_io_error		3090439	0					
ANR	3090523	CallExpression	GetLastError ( )		3090439	1					
ANR	3090524	Callee	GetLastError		3090439	0					
ANR	3090525	Identifier	GetLastError		3090439	0					
ANR	3090526	ArgumentList			3090439	1					
ANR	3090527	ReturnStatement	return true ;	544:3:14186:14197	3090439	2	True				
ANR	3090528	Identifier	true		3090439	0					
ANR	3090529	IfStatement	if ( bytes < m_async_io_size )		3090439	5					
ANR	3090530	Condition	bytes < m_async_io_size	546:6:14209:14231	3090439	0	True				
ANR	3090531	RelationalExpression	bytes < m_async_io_size		3090439	0		<			
ANR	3090532	Identifier	bytes		3090439	0					
ANR	3090533	Identifier	m_async_io_size		3090439	1					
ANR	3090534	CompoundStatement		23:3:695:732	3090439	1					
ANR	3090535	ExpressionStatement	m_async_io_size -= bytes	549:3:14339:14363	3090439	0	True				
ANR	3090536	AssignmentExpression	m_async_io_size -= bytes		3090439	0		-=			
ANR	3090537	Identifier	m_async_io_size		3090439	0					
ANR	3090538	Identifier	bytes		3090439	1					
ANR	3090539	IdentifierDeclStatement	char * buf = new char [ m_async_io_size ] ;	550:3:14368:14405	3090439	1	True				
ANR	3090540	IdentifierDecl	* buf = new char [ m_async_io_size ]		3090439	0					
ANR	3090541	IdentifierDeclType	char *		3090439	0					
ANR	3090542	Identifier	buf		3090439	1					
ANR	3090543	AssignmentExpression	* buf = new char [ m_async_io_size ]		3090439	2		=			
ANR	3090544	Identifier	m_async_io_size		3090439	0					
ANR	3090545	Identifier	m_async_io_size		3090439	1					
ANR	3090546	ExpressionStatement	"memcpy ( buf , m_async_io_buf + bytes , m_async_io_size )"	551:3:14410:14462	3090439	2	True				
ANR	3090547	CallExpression	"memcpy ( buf , m_async_io_buf + bytes , m_async_io_size )"		3090439	0					
ANR	3090548	Callee	memcpy		3090439	0					
ANR	3090549	Identifier	memcpy		3090439	0					
ANR	3090550	ArgumentList	buf		3090439	1					
ANR	3090551	Argument	buf		3090439	0					
ANR	3090552	Identifier	buf		3090439	0					
ANR	3090553	Argument	m_async_io_buf + bytes		3090439	1					
ANR	3090554	AdditiveExpression	m_async_io_buf + bytes		3090439	0		+			
ANR	3090555	Identifier	m_async_io_buf		3090439	0					
ANR	3090556	Identifier	bytes		3090439	1					
ANR	3090557	Argument	m_async_io_size		3090439	2					
ANR	3090558	Identifier	m_async_io_size		3090439	0					
ANR	3090559	Statement	delete	552:3:14467:14472	3090439	3	True				
ANR	3090560	Statement	[	552:9:14473:14473	3090439	4	True				
ANR	3090561	Statement	]	552:10:14474:14474	3090439	5	True				
ANR	3090562	ExpressionStatement	m_async_io_buf	552:12:14476:14490	3090439	6	True				
ANR	3090563	Identifier	m_async_io_buf		3090439	0					
ANR	3090564	ExpressionStatement	m_async_io_buf = buf	553:3:14495:14515	3090439	7	True				
ANR	3090565	AssignmentExpression	m_async_io_buf = buf		3090439	0		=			
ANR	3090566	Identifier	m_async_io_buf		3090439	0					
ANR	3090567	Identifier	buf		3090439	1					
ANR	3090568	ExpressionStatement	async_write_helper ( )	554:3:14520:14540	3090439	8	True				
ANR	3090569	CallExpression	async_write_helper ( )		3090439	0					
ANR	3090570	Callee	async_write_helper		3090439	0					
ANR	3090571	Identifier	async_write_helper		3090439	0					
ANR	3090572	ArgumentList			3090439	1					
ANR	3090573	ElseStatement	else		3090439	0					
ANR	3090574	CompoundStatement		29:7:880:880	3090439	0					
ANR	3090575	Statement	delete	558:3:14590:14595	3090439	0	True				
ANR	3090576	Statement	[	558:9:14596:14596	3090439	1	True				
ANR	3090577	Statement	]	558:10:14597:14597	3090439	2	True				
ANR	3090578	ExpressionStatement	m_async_io_buf	558:12:14599:14613	3090439	3	True				
ANR	3090579	Identifier	m_async_io_buf		3090439	0					
ANR	3090580	ExpressionStatement	m_async_io_buf = NULL	559:3:14618:14639	3090439	4	True				
ANR	3090581	AssignmentExpression	m_async_io_buf = NULL		3090439	0		=			
ANR	3090582	Identifier	m_async_io_buf		3090439	0					
ANR	3090583	Identifier	NULL		3090439	1					
ANR	3090584	ReturnStatement	return true ;	563:1:14650:14661	3090439	1	True				
ANR	3090585	Identifier	true		3090439	0					
ANR	3090586	ReturnType	bool		3090439	1					
ANR	3090587	Identifier	WritePipeEnd :: complete_async_write		3090439	2					
ANR	3090588	ParameterList	bool nonblocking		3090439	3					
ANR	3090589	Parameter	bool nonblocking	527:40:13654:13669	3090439	0	True				
ANR	3090590	ParameterType	bool		3090439	0					
ANR	3090591	Identifier	nonblocking		3090439	1					
ANR	3090592	CFGEntryNode	ENTRY		3090439		True				
ANR	3090593	CFGExitNode	EXIT		3090439		True				
ANR	3090594	Symbol	m_async_io_error		3090439						
ANR	3090595	Symbol	m_event		3090439						
ANR	3090596	Symbol	NULL		3090439						
ANR	3090597	Symbol	nonblocking		3090439						
ANR	3090598	Symbol	m_async_io_size		3090439						
ANR	3090599	Symbol	false		3090439						
ANR	3090600	Symbol	m_handle		3090439						
ANR	3090601	Symbol	D_ALWAYS		3090439						
ANR	3090602	Symbol	TRUE		3090439						
ANR	3090603	Symbol	INFINITE		3090439						
ANR	3090604	Symbol	result		3090439						
ANR	3090605	Symbol	WaitForSingleObject		3090439						
ANR	3090606	Symbol	GetOverlappedResult		3090439						
ANR	3090607	Symbol	buf		3090439						
ANR	3090608	Symbol	& bytes		3090439						
ANR	3090609	Symbol	bytes		3090439						
ANR	3090610	Symbol	& m_overlapped_struct		3090439						
ANR	3090611	Symbol	GetLastError		3090439						
ANR	3090612	Symbol	WAIT_TIMEOUT		3090439						
ANR	3090613	Symbol	WAIT_OBJECT_0		3090439						
ANR	3090614	Symbol	true		3090439						
ANR	3090615	Symbol	m_async_io_buf		3090439						
