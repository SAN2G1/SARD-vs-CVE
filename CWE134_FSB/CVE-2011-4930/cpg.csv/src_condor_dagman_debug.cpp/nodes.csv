command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3130421	File	data/converged/CVE-2011-4930_htcondor/src_condor_dagman_debug.cpp								
ANR	3130422	DeclStmt									
ANR	3130423	Decl							debug_level_t	debug_level_t	debug_level
ANR	3130424	DeclStmt									
ANR	3130425	Decl							const char	const char *	debug_progname
ANR	3130426	DeclStmt									
ANR	3130427	Decl							bool	bool	cache_enabled
ANR	3130428	DeclStmt									
ANR	3130429	Decl							bool	bool	cache_is_caching
ANR	3130430	DeclStmt									
ANR	3130431	Decl							MyString	MyString	cache
ANR	3130432	DeclStmt									
ANR	3130433	Decl							int	int	cache_size
ANR	3130434	DeclStmt									
ANR	3130435	Decl							extern int	extern int	DebugFlags
ANR	3130436	DeclStmt									
ANR	3130437	Decl							extern int	extern int	DebugUseTimestamps
ANR	3130438	DeclStmt									
ANR	3130439	Decl							void	"void ( int flags , const char * fmt , va_list args )"	debug_cache_insert
ANR	3130440	Function	debug_printf	54:0:1828:2319							
ANR	3130441	FunctionDef	"debug_printf (debug_level_t level , const char * fmt)"		3130440	0					
ANR	3130442	CompoundStatement		55:58:1891:2319	3130440	0					
ANR	3130443	IfStatement	if ( DEBUG_LEVEL ( level ) )		3130440	0					
ANR	3130444	Condition	DEBUG_LEVEL ( level )	56:5:1898:1917	3130440	0	True				
ANR	3130445	CallExpression	DEBUG_LEVEL ( level )		3130440	0					
ANR	3130446	Callee	DEBUG_LEVEL		3130440	0					
ANR	3130447	Identifier	DEBUG_LEVEL		3130440	0					
ANR	3130448	ArgumentList	level		3130440	1					
ANR	3130449	Argument	level		3130440	0					
ANR	3130450	Identifier	level		3130440	0					
ANR	3130451	CompoundStatement		2:28:29:29	3130440	1					
ANR	3130452	IfStatement	if ( cache_enabled == false || ( cache_enabled == true && cache_is_caching == false ) )		3130440	0					
ANR	3130453	Condition	cache_enabled == false || ( cache_enabled == true && cache_is_caching == false )	57:6:1929:2009	3130440	0	True				
ANR	3130454	OrExpression	cache_enabled == false || ( cache_enabled == true && cache_is_caching == false )		3130440	0		||			
ANR	3130455	EqualityExpression	cache_enabled == false		3130440	0		==			
ANR	3130456	Identifier	cache_enabled		3130440	0					
ANR	3130457	Identifier	false		3130440	1					
ANR	3130458	AndExpression	cache_enabled == true && cache_is_caching == false		3130440	1		&&			
ANR	3130459	EqualityExpression	cache_enabled == true		3130440	0		==			
ANR	3130460	Identifier	cache_enabled		3130440	0					
ANR	3130461	Identifier	true		3130440	1					
ANR	3130462	EqualityExpression	cache_is_caching == false		3130440	1		==			
ANR	3130463	Identifier	cache_is_caching		3130440	0					
ANR	3130464	Identifier	false		3130440	1					
ANR	3130465	CompoundStatement		7:3:162:174	3130440	1					
ANR	3130466	IdentifierDeclStatement	va_list args ;	61:3:2054:2066	3130440	0	True				
ANR	3130467	IdentifierDecl	args		3130440	0					
ANR	3130468	IdentifierDeclType	va_list		3130440	0					
ANR	3130469	Identifier	args		3130440	1					
ANR	3130470	ExpressionStatement	"va_start ( args , fmt )"	62:3:2071:2092	3130440	1	True				
ANR	3130471	CallExpression	"va_start ( args , fmt )"		3130440	0					
ANR	3130472	Callee	va_start		3130440	0					
ANR	3130473	Identifier	va_start		3130440	0					
ANR	3130474	ArgumentList	args		3130440	1					
ANR	3130475	Argument	args		3130440	0					
ANR	3130476	Identifier	args		3130440	0					
ANR	3130477	Argument	fmt		3130440	1					
ANR	3130478	Identifier	fmt		3130440	0					
ANR	3130479	ExpressionStatement	"_condor_dprintf_va ( D_ALWAYS , fmt , args )"	63:3:2097:2138	3130440	2	True				
ANR	3130480	CallExpression	"_condor_dprintf_va ( D_ALWAYS , fmt , args )"		3130440	0					
ANR	3130481	Callee	_condor_dprintf_va		3130440	0					
ANR	3130482	Identifier	_condor_dprintf_va		3130440	0					
ANR	3130483	ArgumentList	D_ALWAYS		3130440	1					
ANR	3130484	Argument	D_ALWAYS		3130440	0					
ANR	3130485	Identifier	D_ALWAYS		3130440	0					
ANR	3130486	Argument	fmt		3130440	1					
ANR	3130487	Identifier	fmt		3130440	0					
ANR	3130488	Argument	args		3130440	2					
ANR	3130489	Identifier	args		3130440	0					
ANR	3130490	ExpressionStatement	va_end ( args )	64:3:2143:2157	3130440	3	True				
ANR	3130491	CallExpression	va_end ( args )		3130440	0					
ANR	3130492	Callee	va_end		3130440	0					
ANR	3130493	Identifier	va_end		3130440	0					
ANR	3130494	ArgumentList	args		3130440	1					
ANR	3130495	Argument	args		3130440	0					
ANR	3130496	Identifier	args		3130440	0					
ANR	3130497	ElseStatement	else		3130440	0					
ANR	3130498	CompoundStatement		13:3:315:327	3130440	0					
ANR	3130499	IdentifierDeclStatement	va_list args ;	67:3:2207:2219	3130440	0	True				
ANR	3130500	IdentifierDecl	args		3130440	0					
ANR	3130501	IdentifierDeclType	va_list		3130440	0					
ANR	3130502	Identifier	args		3130440	1					
ANR	3130503	ExpressionStatement	"va_start ( args , fmt )"	68:3:2224:2245	3130440	1	True				
ANR	3130504	CallExpression	"va_start ( args , fmt )"		3130440	0					
ANR	3130505	Callee	va_start		3130440	0					
ANR	3130506	Identifier	va_start		3130440	0					
ANR	3130507	ArgumentList	args		3130440	1					
ANR	3130508	Argument	args		3130440	0					
ANR	3130509	Identifier	args		3130440	0					
ANR	3130510	Argument	fmt		3130440	1					
ANR	3130511	Identifier	fmt		3130440	0					
ANR	3130512	ExpressionStatement	"debug_cache_insert ( D_ALWAYS , fmt , args )"	69:3:2250:2291	3130440	2	True				
ANR	3130513	CallExpression	"debug_cache_insert ( D_ALWAYS , fmt , args )"		3130440	0					
ANR	3130514	Callee	debug_cache_insert		3130440	0					
ANR	3130515	Identifier	debug_cache_insert		3130440	0					
ANR	3130516	ArgumentList	D_ALWAYS		3130440	1					
ANR	3130517	Argument	D_ALWAYS		3130440	0					
ANR	3130518	Identifier	D_ALWAYS		3130440	0					
ANR	3130519	Argument	fmt		3130440	1					
ANR	3130520	Identifier	fmt		3130440	0					
ANR	3130521	Argument	args		3130440	2					
ANR	3130522	Identifier	args		3130440	0					
ANR	3130523	ExpressionStatement	va_end ( args )	70:3:2296:2310	3130440	3	True				
ANR	3130524	CallExpression	va_end ( args )		3130440	0					
ANR	3130525	Callee	va_end		3130440	0					
ANR	3130526	Identifier	va_end		3130440	0					
ANR	3130527	ArgumentList	args		3130440	1					
ANR	3130528	Argument	args		3130440	0					
ANR	3130529	Identifier	args		3130440	0					
ANR	3130530	ReturnType	void		3130440	1					
ANR	3130531	Identifier	debug_printf		3130440	2					
ANR	3130532	ParameterList	"debug_level_t level , const char * fmt"		3130440	3					
ANR	3130533	Parameter	debug_level_t level	55:14:1847:1865	3130440	0	True				
ANR	3130534	ParameterType	debug_level_t		3130440	0					
ANR	3130535	Identifier	level		3130440	1					
ANR	3130536	Parameter	const char * fmt	55:35:1868:1882	3130440	1	True				
ANR	3130537	ParameterType	const char *		3130440	0					
ANR	3130538	Identifier	fmt		3130440	1					
ANR	3130539	CFGEntryNode	ENTRY		3130440		True				
ANR	3130540	CFGExitNode	EXIT		3130440		True				
ANR	3130541	Symbol	args		3130440						
ANR	3130542	Symbol	DEBUG_LEVEL		3130440						
ANR	3130543	Symbol	level		3130440						
ANR	3130544	Symbol	cache_enabled		3130440						
ANR	3130545	Symbol	cache_is_caching		3130440						
ANR	3130546	Symbol	true		3130440						
ANR	3130547	Symbol	false		3130440						
ANR	3130548	Symbol	D_ALWAYS		3130440						
ANR	3130549	Symbol	fmt		3130440						
ANR	3130550	Function	debug_dprintf	76:0:2401:3343							
ANR	3130551	FunctionDef	"debug_dprintf (int flags , debug_level_t level , const char * fmt)"		3130550	0					
ANR	3130552	CompoundStatement		77:70:2476:3343	3130550	0					
ANR	3130553	IfStatement	if ( DEBUG_LEVEL ( level ) )		3130550	0					
ANR	3130554	Condition	DEBUG_LEVEL ( level )	79:5:2484:2503	3130550	0	True				
ANR	3130555	CallExpression	DEBUG_LEVEL ( level )		3130550	0					
ANR	3130556	Callee	DEBUG_LEVEL		3130550	0					
ANR	3130557	Identifier	DEBUG_LEVEL		3130550	0					
ANR	3130558	ArgumentList	level		3130550	1					
ANR	3130559	Argument	level		3130550	0					
ANR	3130560	Identifier	level		3130550	0					
ANR	3130561	CompoundStatement		22:2:760:772	3130550	1					
ANR	3130562	IfStatement	if ( cache_enabled == true && cache_is_caching == true )		3130550	0					
ANR	3130563	Condition	cache_enabled == true && cache_is_caching == true	81:6:2516:2564	3130550	0	True				
ANR	3130564	AndExpression	cache_enabled == true && cache_is_caching == true		3130550	0		&&			
ANR	3130565	EqualityExpression	cache_enabled == true		3130550	0		==			
ANR	3130566	Identifier	cache_enabled		3130550	0					
ANR	3130567	Identifier	true		3130550	1					
ANR	3130568	EqualityExpression	cache_is_caching == true		3130550	1		==			
ANR	3130569	Identifier	cache_is_caching		3130550	0					
ANR	3130570	Identifier	true		3130550	1					
ANR	3130571	CompoundStatement		5:57:90:90	3130550	1					
ANR	3130572	ExpressionStatement	"dprintf ( D_ALWAYS , ""Uncachable dprintf forcing log line flush.\\n"" )"	94:3:3139:3204	3130550	0	True				
ANR	3130573	CallExpression	"dprintf ( D_ALWAYS , ""Uncachable dprintf forcing log line flush.\\n"" )"		3130550	0					
ANR	3130574	Callee	dprintf		3130550	0					
ANR	3130575	Identifier	dprintf		3130550	0					
ANR	3130576	ArgumentList	D_ALWAYS		3130550	1					
ANR	3130577	Argument	D_ALWAYS		3130550	0					
ANR	3130578	Identifier	D_ALWAYS		3130550	0					
ANR	3130579	Argument	"""Uncachable dprintf forcing log line flush.\\n"""		3130550	1					
ANR	3130580	PrimaryExpression	"""Uncachable dprintf forcing log line flush.\\n"""		3130550	0					
ANR	3130581	ExpressionStatement	debug_cache_flush ( )	95:3:3209:3228	3130550	1	True				
ANR	3130582	CallExpression	debug_cache_flush ( )		3130550	0					
ANR	3130583	Callee	debug_cache_flush		3130550	0					
ANR	3130584	Identifier	debug_cache_flush		3130550	0					
ANR	3130585	ArgumentList			3130550	1					
ANR	3130586	IdentifierDeclStatement	va_list args ;	98:2:3237:3249	3130550	1	True				
ANR	3130587	IdentifierDecl	args		3130550	0					
ANR	3130588	IdentifierDeclType	va_list		3130550	0					
ANR	3130589	Identifier	args		3130550	1					
ANR	3130590	ExpressionStatement	"va_start ( args , fmt )"	99:2:3253:3274	3130550	2	True				
ANR	3130591	CallExpression	"va_start ( args , fmt )"		3130550	0					
ANR	3130592	Callee	va_start		3130550	0					
ANR	3130593	Identifier	va_start		3130550	0					
ANR	3130594	ArgumentList	args		3130550	1					
ANR	3130595	Argument	args		3130550	0					
ANR	3130596	Identifier	args		3130550	0					
ANR	3130597	Argument	fmt		3130550	1					
ANR	3130598	Identifier	fmt		3130550	0					
ANR	3130599	ExpressionStatement	"_condor_dprintf_va ( flags , fmt , args )"	100:2:3278:3316	3130550	3	True				
ANR	3130600	CallExpression	"_condor_dprintf_va ( flags , fmt , args )"		3130550	0					
ANR	3130601	Callee	_condor_dprintf_va		3130550	0					
ANR	3130602	Identifier	_condor_dprintf_va		3130550	0					
ANR	3130603	ArgumentList	flags		3130550	1					
ANR	3130604	Argument	flags		3130550	0					
ANR	3130605	Identifier	flags		3130550	0					
ANR	3130606	Argument	fmt		3130550	1					
ANR	3130607	Identifier	fmt		3130550	0					
ANR	3130608	Argument	args		3130550	2					
ANR	3130609	Identifier	args		3130550	0					
ANR	3130610	ExpressionStatement	va_end ( args )	101:2:3320:3334	3130550	4	True				
ANR	3130611	CallExpression	va_end ( args )		3130550	0					
ANR	3130612	Callee	va_end		3130550	0					
ANR	3130613	Identifier	va_end		3130550	0					
ANR	3130614	ArgumentList	args		3130550	1					
ANR	3130615	Argument	args		3130550	0					
ANR	3130616	Identifier	args		3130550	0					
ANR	3130617	ReturnType	void		3130550	1					
ANR	3130618	Identifier	debug_dprintf		3130550	2					
ANR	3130619	ParameterList	"int flags , debug_level_t level , const char * fmt"		3130550	3					
ANR	3130620	Parameter	int flags	77:15:2421:2429	3130550	0	True				
ANR	3130621	ParameterType	int		3130550	0					
ANR	3130622	Identifier	flags		3130550	1					
ANR	3130623	Parameter	debug_level_t level	77:26:2432:2450	3130550	1	True				
ANR	3130624	ParameterType	debug_level_t		3130550	0					
ANR	3130625	Identifier	level		3130550	1					
ANR	3130626	Parameter	const char * fmt	77:47:2453:2467	3130550	2	True				
ANR	3130627	ParameterType	const char *		3130550	0					
ANR	3130628	Identifier	fmt		3130550	1					
ANR	3130629	CFGEntryNode	ENTRY		3130550		True				
ANR	3130630	CFGExitNode	EXIT		3130550		True				
ANR	3130631	Symbol	args		3130550						
ANR	3130632	Symbol	DEBUG_LEVEL		3130550						
ANR	3130633	Symbol	level		3130550						
ANR	3130634	Symbol	cache_enabled		3130550						
ANR	3130635	Symbol	cache_is_caching		3130550						
ANR	3130636	Symbol	flags		3130550						
ANR	3130637	Symbol	true		3130550						
ANR	3130638	Symbol	D_ALWAYS		3130550						
ANR	3130639	Symbol	fmt		3130550						
ANR	3130640	Function	debug_error	107:0:3425:3818							
ANR	3130641	FunctionDef	"debug_error (int error , debug_level_t level , const char * fmt)"		3130640	0					
ANR	3130642	CompoundStatement		108:68:3498:3818	3130640	0					
ANR	3130643	ExpressionStatement	debug_cache_flush ( )	111:1:3557:3576	3130640	0	True				
ANR	3130644	CallExpression	debug_cache_flush ( )		3130640	0					
ANR	3130645	Callee	debug_cache_flush		3130640	0					
ANR	3130646	Identifier	debug_cache_flush		3130640	0					
ANR	3130647	ArgumentList			3130640	1					
ANR	3130648	ExpressionStatement	debug_cache_stop_caching ( )	112:1:3579:3605	3130640	1	True				
ANR	3130649	CallExpression	debug_cache_stop_caching ( )		3130640	0					
ANR	3130650	Callee	debug_cache_stop_caching		3130640	0					
ANR	3130651	Identifier	debug_cache_stop_caching		3130640	0					
ANR	3130652	ArgumentList			3130640	1					
ANR	3130653	ExpressionStatement	debug_cache_disable ( )	113:1:3608:3629	3130640	2	True				
ANR	3130654	CallExpression	debug_cache_disable ( )		3130640	0					
ANR	3130655	Callee	debug_cache_disable		3130640	0					
ANR	3130656	Identifier	debug_cache_disable		3130640	0					
ANR	3130657	ArgumentList			3130640	1					
ANR	3130658	IfStatement	if ( DEBUG_LEVEL ( level ) )		3130640	3					
ANR	3130659	Condition	DEBUG_LEVEL ( level )	115:8:3640:3659	3130640	0	True				
ANR	3130660	CallExpression	DEBUG_LEVEL ( level )		3130640	0					
ANR	3130661	Callee	DEBUG_LEVEL		3130640	0					
ANR	3130662	Identifier	DEBUG_LEVEL		3130640	0					
ANR	3130663	ArgumentList	level		3130640	1					
ANR	3130664	Argument	level		3130640	0					
ANR	3130665	Identifier	level		3130640	0					
ANR	3130666	CompoundStatement		9:8:174:186	3130640	1					
ANR	3130667	IdentifierDeclStatement	va_list args ;	116:8:3673:3685	3130640	0	True				
ANR	3130668	IdentifierDecl	args		3130640	0					
ANR	3130669	IdentifierDeclType	va_list		3130640	0					
ANR	3130670	Identifier	args		3130640	1					
ANR	3130671	ExpressionStatement	"va_start ( args , fmt )"	117:8:3695:3716	3130640	1	True				
ANR	3130672	CallExpression	"va_start ( args , fmt )"		3130640	0					
ANR	3130673	Callee	va_start		3130640	0					
ANR	3130674	Identifier	va_start		3130640	0					
ANR	3130675	ArgumentList	args		3130640	1					
ANR	3130676	Argument	args		3130640	0					
ANR	3130677	Identifier	args		3130640	0					
ANR	3130678	Argument	fmt		3130640	1					
ANR	3130679	Identifier	fmt		3130640	0					
ANR	3130680	ExpressionStatement	"_condor_dprintf_va ( D_ALWAYS , fmt , args )"	118:8:3726:3767	3130640	2	True				
ANR	3130681	CallExpression	"_condor_dprintf_va ( D_ALWAYS , fmt , args )"		3130640	0					
ANR	3130682	Callee	_condor_dprintf_va		3130640	0					
ANR	3130683	Identifier	_condor_dprintf_va		3130640	0					
ANR	3130684	ArgumentList	D_ALWAYS		3130640	1					
ANR	3130685	Argument	D_ALWAYS		3130640	0					
ANR	3130686	Identifier	D_ALWAYS		3130640	0					
ANR	3130687	Argument	fmt		3130640	1					
ANR	3130688	Identifier	fmt		3130640	0					
ANR	3130689	Argument	args		3130640	2					
ANR	3130690	Identifier	args		3130640	0					
ANR	3130691	ExpressionStatement	va_end ( args )	119:8:3777:3791	3130640	3	True				
ANR	3130692	CallExpression	va_end ( args )		3130640	0					
ANR	3130693	Callee	va_end		3130640	0					
ANR	3130694	Identifier	va_end		3130640	0					
ANR	3130695	ArgumentList	args		3130640	1					
ANR	3130696	Argument	args		3130640	0					
ANR	3130697	Identifier	args		3130640	0					
ANR	3130698	ExpressionStatement	DC_Exit ( error )	121:1:3800:3816	3130640	4	True				
ANR	3130699	CallExpression	DC_Exit ( error )		3130640	0					
ANR	3130700	Callee	DC_Exit		3130640	0					
ANR	3130701	Identifier	DC_Exit		3130640	0					
ANR	3130702	ArgumentList	error		3130640	1					
ANR	3130703	Argument	error		3130640	0					
ANR	3130704	Identifier	error		3130640	0					
ANR	3130705	ReturnType	void		3130640	1					
ANR	3130706	Identifier	debug_error		3130640	2					
ANR	3130707	ParameterList	"int error , debug_level_t level , const char * fmt"		3130640	3					
ANR	3130708	Parameter	int error	108:13:3443:3451	3130640	0	True				
ANR	3130709	ParameterType	int		3130640	0					
ANR	3130710	Identifier	error		3130640	1					
ANR	3130711	Parameter	debug_level_t level	108:24:3454:3472	3130640	1	True				
ANR	3130712	ParameterType	debug_level_t		3130640	0					
ANR	3130713	Identifier	level		3130640	1					
ANR	3130714	Parameter	const char * fmt	108:45:3475:3489	3130640	2	True				
ANR	3130715	ParameterType	const char *		3130640	0					
ANR	3130716	Identifier	fmt		3130640	1					
ANR	3130717	CFGEntryNode	ENTRY		3130640		True				
ANR	3130718	CFGExitNode	EXIT		3130640		True				
ANR	3130719	Symbol	args		3130640						
ANR	3130720	Symbol	DEBUG_LEVEL		3130640						
ANR	3130721	Symbol	level		3130640						
ANR	3130722	Symbol	D_ALWAYS		3130640						
ANR	3130723	Symbol	error		3130640						
ANR	3130724	Symbol	fmt		3130640						
ANR	3130725	Function	debug_cache_enable	125:0:3900:4038							
ANR	3130726	FunctionDef	debug_cache_enable ()		3130725	0					
ANR	3130727	CompoundStatement		127:0:3930:4038	3130725	0					
ANR	3130728	ExpressionStatement	cache_enabled = true	128:1:3933:3953	3130725	0	True				
ANR	3130729	AssignmentExpression	cache_enabled = true		3130725	0		=			
ANR	3130730	Identifier	cache_enabled		3130725	0					
ANR	3130731	Identifier	true		3130725	1					
ANR	3130732	ExpressionStatement	"dprintf ( D_ALWAYS , ""Enabling log line cache for increased NFS performance.\\n"" )"	129:1:3956:4036	3130725	1	True				
ANR	3130733	CallExpression	"dprintf ( D_ALWAYS , ""Enabling log line cache for increased NFS performance.\\n"" )"		3130725	0					
ANR	3130734	Callee	dprintf		3130725	0					
ANR	3130735	Identifier	dprintf		3130725	0					
ANR	3130736	ArgumentList	D_ALWAYS		3130725	1					
ANR	3130737	Argument	D_ALWAYS		3130725	0					
ANR	3130738	Identifier	D_ALWAYS		3130725	0					
ANR	3130739	Argument	"""Enabling log line cache for increased NFS performance.\\n"""		3130725	1					
ANR	3130740	PrimaryExpression	"""Enabling log line cache for increased NFS performance.\\n"""		3130725	0					
ANR	3130741	ReturnType	void		3130725	1					
ANR	3130742	Identifier	debug_cache_enable		3130725	2					
ANR	3130743	ParameterList			3130725	3					
ANR	3130744	CFGEntryNode	ENTRY		3130725		True				
ANR	3130745	CFGExitNode	EXIT		3130725		True				
ANR	3130746	Symbol	cache_enabled		3130725						
ANR	3130747	Symbol	true		3130725						
ANR	3130748	Symbol	D_ALWAYS		3130725						
ANR	3130749	Function	debug_cache_disable	134:0:4120:4250							
ANR	3130750	FunctionDef	debug_cache_disable ()		3130749	0					
ANR	3130751	CompoundStatement		136:0:4151:4250	3130749	0					
ANR	3130752	ExpressionStatement	debug_cache_flush ( )	137:1:4154:4173	3130749	0	True				
ANR	3130753	CallExpression	debug_cache_flush ( )		3130749	0					
ANR	3130754	Callee	debug_cache_flush		3130749	0					
ANR	3130755	Identifier	debug_cache_flush		3130749	0					
ANR	3130756	ArgumentList			3130749	1					
ANR	3130757	ExpressionStatement	cache_enabled = false	138:1:4176:4197	3130749	1	True				
ANR	3130758	AssignmentExpression	cache_enabled = false		3130749	0		=			
ANR	3130759	Identifier	cache_enabled		3130749	0					
ANR	3130760	Identifier	false		3130749	1					
ANR	3130761	ExpressionStatement	"dprintf ( D_ALWAYS , ""Disabling log line cache.\\n"" )"	139:1:4200:4248	3130749	2	True				
ANR	3130762	CallExpression	"dprintf ( D_ALWAYS , ""Disabling log line cache.\\n"" )"		3130749	0					
ANR	3130763	Callee	dprintf		3130749	0					
ANR	3130764	Identifier	dprintf		3130749	0					
ANR	3130765	ArgumentList	D_ALWAYS		3130749	1					
ANR	3130766	Argument	D_ALWAYS		3130749	0					
ANR	3130767	Identifier	D_ALWAYS		3130749	0					
ANR	3130768	Argument	"""Disabling log line cache.\\n"""		3130749	1					
ANR	3130769	PrimaryExpression	"""Disabling log line cache.\\n"""		3130749	0					
ANR	3130770	ReturnType	void		3130749	1					
ANR	3130771	Identifier	debug_cache_disable		3130749	2					
ANR	3130772	ParameterList			3130749	3					
ANR	3130773	CFGEntryNode	ENTRY		3130749		True				
ANR	3130774	CFGExitNode	EXIT		3130749		True				
ANR	3130775	Symbol	cache_enabled		3130749						
ANR	3130776	Symbol	false		3130749						
ANR	3130777	Symbol	D_ALWAYS		3130749						
ANR	3130778	Function	debug_cache_start_caching	143:0:4332:4478							
ANR	3130779	FunctionDef	debug_cache_start_caching ()		3130778	0					
ANR	3130780	CompoundStatement		145:0:4369:4478	3130778	0					
ANR	3130781	IfStatement	if ( cache_enabled )		3130778	0					
ANR	3130782	Condition	cache_enabled	146:5:4376:4388	3130778	0	True				
ANR	3130783	Identifier	cache_enabled		3130778	0					
ANR	3130784	CompoundStatement		2:20:21:21	3130778	1					
ANR	3130785	ExpressionStatement	cache_is_caching = true	147:2:4395:4418	3130778	0	True				
ANR	3130786	AssignmentExpression	cache_is_caching = true		3130778	0		=			
ANR	3130787	Identifier	cache_is_caching		3130778	0					
ANR	3130788	Identifier	true		3130778	1					
ANR	3130789	ExpressionStatement	"dprintf ( D_ALWAYS , ""Starting to cache log lines.\\n"" )"	148:2:4422:4473	3130778	1	True				
ANR	3130790	CallExpression	"dprintf ( D_ALWAYS , ""Starting to cache log lines.\\n"" )"		3130778	0					
ANR	3130791	Callee	dprintf		3130778	0					
ANR	3130792	Identifier	dprintf		3130778	0					
ANR	3130793	ArgumentList	D_ALWAYS		3130778	1					
ANR	3130794	Argument	D_ALWAYS		3130778	0					
ANR	3130795	Identifier	D_ALWAYS		3130778	0					
ANR	3130796	Argument	"""Starting to cache log lines.\\n"""		3130778	1					
ANR	3130797	PrimaryExpression	"""Starting to cache log lines.\\n"""		3130778	0					
ANR	3130798	ReturnType	void		3130778	1					
ANR	3130799	Identifier	debug_cache_start_caching		3130778	2					
ANR	3130800	ParameterList			3130778	3					
ANR	3130801	CFGEntryNode	ENTRY		3130778		True				
ANR	3130802	CFGExitNode	EXIT		3130778		True				
ANR	3130803	Symbol	cache_enabled		3130778						
ANR	3130804	Symbol	cache_is_caching		3130778						
ANR	3130805	Symbol	true		3130778						
ANR	3130806	Symbol	D_ALWAYS		3130778						
ANR	3130807	Function	debug_cache_stop_caching	153:0:4560:4735							
ANR	3130808	FunctionDef	debug_cache_stop_caching ()		3130807	0					
ANR	3130809	CompoundStatement		155:0:4596:4735	3130807	0					
ANR	3130810	IfStatement	if ( cache_enabled )		3130807	0					
ANR	3130811	Condition	cache_enabled	156:5:4603:4615	3130807	0	True				
ANR	3130812	Identifier	cache_enabled		3130807	0					
ANR	3130813	CompoundStatement		2:20:21:21	3130807	1					
ANR	3130814	ExpressionStatement	debug_cache_flush ( )	157:2:4622:4641	3130807	0	True				
ANR	3130815	CallExpression	debug_cache_flush ( )		3130807	0					
ANR	3130816	Callee	debug_cache_flush		3130807	0					
ANR	3130817	Identifier	debug_cache_flush		3130807	0					
ANR	3130818	ArgumentList			3130807	1					
ANR	3130819	ExpressionStatement	cache_is_caching = false	158:2:4645:4669	3130807	1	True				
ANR	3130820	AssignmentExpression	cache_is_caching = false		3130807	0		=			
ANR	3130821	Identifier	cache_is_caching		3130807	0					
ANR	3130822	Identifier	false		3130807	1					
ANR	3130823	ExpressionStatement	"dprintf ( D_ALWAYS , ""Stopping the caching of log lines.\\n"" )"	159:2:4673:4730	3130807	2	True				
ANR	3130824	CallExpression	"dprintf ( D_ALWAYS , ""Stopping the caching of log lines.\\n"" )"		3130807	0					
ANR	3130825	Callee	dprintf		3130807	0					
ANR	3130826	Identifier	dprintf		3130807	0					
ANR	3130827	ArgumentList	D_ALWAYS		3130807	1					
ANR	3130828	Argument	D_ALWAYS		3130807	0					
ANR	3130829	Identifier	D_ALWAYS		3130807	0					
ANR	3130830	Argument	"""Stopping the caching of log lines.\\n"""		3130807	1					
ANR	3130831	PrimaryExpression	"""Stopping the caching of log lines.\\n"""		3130807	0					
ANR	3130832	ReturnType	void		3130807	1					
ANR	3130833	Identifier	debug_cache_stop_caching		3130807	2					
ANR	3130834	ParameterList			3130807	3					
ANR	3130835	CFGEntryNode	ENTRY		3130807		True				
ANR	3130836	CFGExitNode	EXIT		3130807		True				
ANR	3130837	Symbol	cache_enabled		3130807						
ANR	3130838	Symbol	cache_is_caching		3130807						
ANR	3130839	Symbol	false		3130807						
ANR	3130840	Symbol	D_ALWAYS		3130807						
ANR	3130841	Function	debug_cache_insert	164:0:4817:6589							
ANR	3130842	FunctionDef	"debug_cache_insert (int flags , const char * fmt , va_list args)"		3130841	0					
ANR	3130843	CompoundStatement		166:0:4883:6589	3130841	0					
ANR	3130844	IdentifierDeclStatement	time_t clock_now ;	167:1:4886:4902	3130841	0	True				
ANR	3130845	IdentifierDecl	clock_now		3130841	0					
ANR	3130846	IdentifierDeclType	time_t		3130841	0					
ANR	3130847	Identifier	clock_now		3130841	1					
ANR	3130848	IdentifierDeclStatement	struct tm * tm = NULL ;	168:1:4905:4925	3130841	1	True				
ANR	3130849	IdentifierDecl	* tm = NULL		3130841	0					
ANR	3130850	IdentifierDeclType	struct tm *		3130841	0					
ANR	3130851	Identifier	tm		3130841	1					
ANR	3130852	AssignmentExpression	* tm = NULL		3130841	2		=			
ANR	3130853	Identifier	NULL		3130841	0					
ANR	3130854	Identifier	NULL		3130841	1					
ANR	3130855	IdentifierDeclStatement	"MyString tstamp , fds , line , pid ;"	170:1:4929:4960	3130841	2	True				
ANR	3130856	IdentifierDecl	tstamp		3130841	0					
ANR	3130857	IdentifierDeclType	MyString		3130841	0					
ANR	3130858	Identifier	tstamp		3130841	1					
ANR	3130859	IdentifierDecl	fds		3130841	1					
ANR	3130860	IdentifierDeclType	MyString		3130841	0					
ANR	3130861	Identifier	fds		3130841	1					
ANR	3130862	IdentifierDecl	line		3130841	2					
ANR	3130863	IdentifierDeclType	MyString		3130841	0					
ANR	3130864	Identifier	line		3130841	1					
ANR	3130865	IdentifierDecl	pid		3130841	3					
ANR	3130866	IdentifierDeclType	MyString		3130841	0					
ANR	3130867	Identifier	pid		3130841	1					
ANR	3130868	IdentifierDeclStatement	pid_t my_pid ;	171:1:4963:4975	3130841	3	True				
ANR	3130869	IdentifierDecl	my_pid		3130841	0					
ANR	3130870	IdentifierDeclType	pid_t		3130841	0					
ANR	3130871	Identifier	my_pid		3130841	1					
ANR	3130872	ExpressionStatement	clock_now = time ( NULL )	182:1:5344:5366	3130841	4	True				
ANR	3130873	AssignmentExpression	clock_now = time ( NULL )		3130841	0		=			
ANR	3130874	Identifier	clock_now		3130841	0					
ANR	3130875	CallExpression	time ( NULL )		3130841	1					
ANR	3130876	Callee	time		3130841	0					
ANR	3130877	Identifier	time		3130841	0					
ANR	3130878	ArgumentList	NULL		3130841	1					
ANR	3130879	Argument	NULL		3130841	0					
ANR	3130880	Identifier	NULL		3130841	0					
ANR	3130881	IfStatement	if ( ! DebugUseTimestamps )		3130841	5					
ANR	3130882	Condition	! DebugUseTimestamps	183:5:5373:5391	3130841	0	True				
ANR	3130883	UnaryOperationExpression	! DebugUseTimestamps		3130841	0					
ANR	3130884	UnaryOperator	!		3130841	0					
ANR	3130885	Identifier	DebugUseTimestamps		3130841	1					
ANR	3130886	CompoundStatement		18:26:510:510	3130841	1					
ANR	3130887	ExpressionStatement	tm = localtime ( & clock_now )	184:2:5398:5424	3130841	0	True				
ANR	3130888	AssignmentExpression	tm = localtime ( & clock_now )		3130841	0		=			
ANR	3130889	Identifier	tm		3130841	0					
ANR	3130890	CallExpression	localtime ( & clock_now )		3130841	1					
ANR	3130891	Callee	localtime		3130841	0					
ANR	3130892	Identifier	localtime		3130841	0					
ANR	3130893	ArgumentList	& clock_now		3130841	1					
ANR	3130894	Argument	& clock_now		3130841	0					
ANR	3130895	UnaryOperationExpression	& clock_now		3130841	0					
ANR	3130896	UnaryOperator	&		3130841	0					
ANR	3130897	Identifier	clock_now		3130841	1					
ANR	3130898	IfStatement	if ( ( ( DebugFlags | flags ) & D_NOHEADER ) == 0 )		3130841	6					
ANR	3130899	Condition	( ( DebugFlags | flags ) & D_NOHEADER ) == 0	187:5:5435:5472	3130841	0	True				
ANR	3130900	EqualityExpression	( ( DebugFlags | flags ) & D_NOHEADER ) == 0		3130841	0		==			
ANR	3130901	BitAndExpression	( DebugFlags | flags ) & D_NOHEADER		3130841	0		&			
ANR	3130902	InclusiveOrExpression	DebugFlags | flags		3130841	0		|			
ANR	3130903	Identifier	DebugFlags		3130841	0					
ANR	3130904	Identifier	flags		3130841	1					
ANR	3130905	Identifier	D_NOHEADER		3130841	1					
ANR	3130906	PrimaryExpression	0		3130841	1					
ANR	3130907	CompoundStatement		22:45:591:591	3130841	1					
ANR	3130908	IfStatement	if ( DebugUseTimestamps )		3130841	0					
ANR	3130909	Condition	DebugUseTimestamps	188:6:5483:5500	3130841	0	True				
ANR	3130910	Identifier	DebugUseTimestamps		3130841	0					
ANR	3130911	CompoundStatement		23:26:619:619	3130841	1					
ANR	3130912	ExpressionStatement	"tstamp . sprintf ( ""(%d) "" , ( int ) clock_now )"	189:3:5508:5547	3130841	0	True				
ANR	3130913	CallExpression	"tstamp . sprintf ( ""(%d) "" , ( int ) clock_now )"		3130841	0					
ANR	3130914	Callee	tstamp . sprintf		3130841	0					
ANR	3130915	MemberAccess	tstamp . sprintf		3130841	0					
ANR	3130916	Identifier	tstamp		3130841	0					
ANR	3130917	Identifier	sprintf		3130841	1					
ANR	3130918	ArgumentList	"""(%d) """		3130841	1					
ANR	3130919	Argument	"""(%d) """		3130841	0					
ANR	3130920	PrimaryExpression	"""(%d) """		3130841	0					
ANR	3130921	Argument	( int ) clock_now		3130841	1					
ANR	3130922	CastExpression	( int ) clock_now		3130841	0					
ANR	3130923	CastTarget	int		3130841	0					
ANR	3130924	Identifier	clock_now		3130841	1					
ANR	3130925	ElseStatement	else		3130841	0					
ANR	3130926	CompoundStatement		25:9:674:674	3130841	0					
ANR	3130927	ExpressionStatement	"tstamp . sprintf ( ""%d/%d %02d:%02d:%02d "" , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec )"	191:3:5563:5677	3130841	0	True				
ANR	3130928	CallExpression	"tstamp . sprintf ( ""%d/%d %02d:%02d:%02d "" , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec )"		3130841	0					
ANR	3130929	Callee	tstamp . sprintf		3130841	0					
ANR	3130930	MemberAccess	tstamp . sprintf		3130841	0					
ANR	3130931	Identifier	tstamp		3130841	0					
ANR	3130932	Identifier	sprintf		3130841	1					
ANR	3130933	ArgumentList	"""%d/%d %02d:%02d:%02d """		3130841	1					
ANR	3130934	Argument	"""%d/%d %02d:%02d:%02d """		3130841	0					
ANR	3130935	PrimaryExpression	"""%d/%d %02d:%02d:%02d """		3130841	0					
ANR	3130936	Argument	tm -> tm_mon + 1		3130841	1					
ANR	3130937	AdditiveExpression	tm -> tm_mon + 1		3130841	0		+			
ANR	3130938	PtrMemberAccess	tm -> tm_mon		3130841	0					
ANR	3130939	Identifier	tm		3130841	0					
ANR	3130940	Identifier	tm_mon		3130841	1					
ANR	3130941	PrimaryExpression	1		3130841	1					
ANR	3130942	Argument	tm -> tm_mday		3130841	2					
ANR	3130943	PtrMemberAccess	tm -> tm_mday		3130841	0					
ANR	3130944	Identifier	tm		3130841	0					
ANR	3130945	Identifier	tm_mday		3130841	1					
ANR	3130946	Argument	tm -> tm_hour		3130841	3					
ANR	3130947	PtrMemberAccess	tm -> tm_hour		3130841	0					
ANR	3130948	Identifier	tm		3130841	0					
ANR	3130949	Identifier	tm_hour		3130841	1					
ANR	3130950	Argument	tm -> tm_min		3130841	4					
ANR	3130951	PtrMemberAccess	tm -> tm_min		3130841	0					
ANR	3130952	Identifier	tm		3130841	0					
ANR	3130953	Identifier	tm_min		3130841	1					
ANR	3130954	Argument	tm -> tm_sec		3130841	5					
ANR	3130955	PtrMemberAccess	tm -> tm_sec		3130841	0					
ANR	3130956	Identifier	tm		3130841	0					
ANR	3130957	Identifier	tm_sec		3130841	1					
ANR	3130958	IfStatement	if ( ( DebugFlags | flags ) & D_FDS )		3130841	1					
ANR	3130959	Condition	( DebugFlags | flags ) & D_FDS	196:6:5690:5715	3130841	0	True				
ANR	3130960	BitAndExpression	( DebugFlags | flags ) & D_FDS		3130841	0		&			
ANR	3130961	InclusiveOrExpression	DebugFlags | flags		3130841	0		|			
ANR	3130962	Identifier	DebugFlags		3130841	0					
ANR	3130963	Identifier	flags		3130841	1					
ANR	3130964	Identifier	D_FDS		3130841	1					
ANR	3130965	CompoundStatement		31:34:834:834	3130841	1					
ANR	3130966	ExpressionStatement	"fds . sprintf ( ""(fd:?) "" )"	201:3:5916:5939	3130841	0	True				
ANR	3130967	CallExpression	"fds . sprintf ( ""(fd:?) "" )"		3130841	0					
ANR	3130968	Callee	fds . sprintf		3130841	0					
ANR	3130969	MemberAccess	fds . sprintf		3130841	0					
ANR	3130970	Identifier	fds		3130841	0					
ANR	3130971	Identifier	sprintf		3130841	1					
ANR	3130972	ArgumentList	"""(fd:?) """		3130841	1					
ANR	3130973	Argument	"""(fd:?) """		3130841	0					
ANR	3130974	PrimaryExpression	"""(fd:?) """		3130841	0					
ANR	3130975	IfStatement	if ( ( DebugFlags | flags ) & D_PID )		3130841	2					
ANR	3130976	Condition	( DebugFlags | flags ) & D_PID	204:6:5952:5977	3130841	0	True				
ANR	3130977	BitAndExpression	( DebugFlags | flags ) & D_PID		3130841	0		&			
ANR	3130978	InclusiveOrExpression	DebugFlags | flags		3130841	0		|			
ANR	3130979	Identifier	DebugFlags		3130841	0					
ANR	3130980	Identifier	flags		3130841	1					
ANR	3130981	Identifier	D_PID		3130841	1					
ANR	3130982	CompoundStatement		39:34:1096:1096	3130841	1					
ANR	3130983	ExpressionStatement	my_pid = ( int ) GetCurrentProcessId ( )	206:3:5998:6034	3130841	0	True				
ANR	3130984	AssignmentExpression	my_pid = ( int ) GetCurrentProcessId ( )		3130841	0		=			
ANR	3130985	Identifier	my_pid		3130841	0					
ANR	3130986	CastExpression	( int ) GetCurrentProcessId ( )		3130841	1					
ANR	3130987	CastTarget	int		3130841	0					
ANR	3130988	CallExpression	GetCurrentProcessId ( )		3130841	1					
ANR	3130989	Callee	GetCurrentProcessId		3130841	0					
ANR	3130990	Identifier	GetCurrentProcessId		3130841	0					
ANR	3130991	ArgumentList			3130841	1					
ANR	3130992	ExpressionStatement	"pid . sprintf ( ""(pid:%d) "" , my_pid )"	210:3:6080:6113	3130841	1	True				
ANR	3130993	CallExpression	"pid . sprintf ( ""(pid:%d) "" , my_pid )"		3130841	0					
ANR	3130994	Callee	pid . sprintf		3130841	0					
ANR	3130995	MemberAccess	pid . sprintf		3130841	0					
ANR	3130996	Identifier	pid		3130841	0					
ANR	3130997	Identifier	sprintf		3130841	1					
ANR	3130998	ArgumentList	"""(pid:%d) """		3130841	1					
ANR	3130999	Argument	"""(pid:%d) """		3130841	0					
ANR	3131000	PrimaryExpression	"""(pid:%d) """		3130841	0					
ANR	3131001	Argument	my_pid		3130841	1					
ANR	3131002	Identifier	my_pid		3130841	0					
ANR	3131003	ExpressionStatement	"line . vsprintf ( fmt , args )"	220:1:6350:6374	3130841	7	True				
ANR	3131004	CallExpression	"line . vsprintf ( fmt , args )"		3130841	0					
ANR	3131005	Callee	line . vsprintf		3130841	0					
ANR	3131006	MemberAccess	line . vsprintf		3130841	0					
ANR	3131007	Identifier	line		3130841	0					
ANR	3131008	Identifier	vsprintf		3130841	1					
ANR	3131009	ArgumentList	fmt		3130841	1					
ANR	3131010	Argument	fmt		3130841	0					
ANR	3131011	Identifier	fmt		3130841	0					
ANR	3131012	Argument	args		3130841	1					
ANR	3131013	Identifier	args		3130841	0					
ANR	3131014	ExpressionStatement	cache += ( tstamp + fds + line )	223:1:6428:6458	3130841	8	True				
ANR	3131015	AssignmentExpression	cache += ( tstamp + fds + line )		3130841	0		+=			
ANR	3131016	Identifier	cache		3130841	0					
ANR	3131017	AdditiveExpression	tstamp + fds + line		3130841	1		+			
ANR	3131018	Identifier	tstamp		3130841	0					
ANR	3131019	AdditiveExpression	fds + line		3130841	1		+			
ANR	3131020	Identifier	fds		3130841	0					
ANR	3131021	Identifier	line		3130841	1					
ANR	3131022	IfStatement	if ( cache . Length ( ) > cache_size )		3130841	9					
ANR	3131023	Condition	cache . Length ( ) > cache_size	226:5:6532:6558	3130841	0	True				
ANR	3131024	RelationalExpression	cache . Length ( ) > cache_size		3130841	0		>			
ANR	3131025	CallExpression	cache . Length ( )		3130841	0					
ANR	3131026	Callee	cache . Length		3130841	0					
ANR	3131027	MemberAccess	cache . Length		3130841	0					
ANR	3131028	Identifier	cache		3130841	0					
ANR	3131029	Identifier	Length		3130841	1					
ANR	3131030	ArgumentList			3130841	1					
ANR	3131031	Identifier	cache_size		3130841	1					
ANR	3131032	CompoundStatement		61:34:1677:1677	3130841	1					
ANR	3131033	ExpressionStatement	debug_cache_flush ( )	227:2:6565:6584	3130841	0	True				
ANR	3131034	CallExpression	debug_cache_flush ( )		3130841	0					
ANR	3131035	Callee	debug_cache_flush		3130841	0					
ANR	3131036	Identifier	debug_cache_flush		3130841	0					
ANR	3131037	ArgumentList			3130841	1					
ANR	3131038	ReturnType	void		3130841	1					
ANR	3131039	Identifier	debug_cache_insert		3130841	2					
ANR	3131040	ParameterList	"int flags , const char * fmt , va_list args"		3130841	3					
ANR	3131041	Parameter	int flags	165:19:4841:4849	3130841	0	True				
ANR	3131042	ParameterType	int		3130841	0					
ANR	3131043	Identifier	flags		3130841	1					
ANR	3131044	Parameter	const char * fmt	165:30:4852:4866	3130841	1	True				
ANR	3131045	ParameterType	const char *		3130841	0					
ANR	3131046	Identifier	fmt		3130841	1					
ANR	3131047	Parameter	va_list args	165:47:4869:4880	3130841	2	True				
ANR	3131048	ParameterType	va_list		3130841	0					
ANR	3131049	Identifier	args		3130841	1					
ANR	3131050	CFGEntryNode	ENTRY		3130841		True				
ANR	3131051	CFGExitNode	EXIT		3130841		True				
ANR	3131052	Symbol	localtime		3130841						
ANR	3131053	Symbol	& clock_now		3130841						
ANR	3131054	Symbol	line		3130841						
ANR	3131055	Symbol	DebugUseTimestamps		3130841						
ANR	3131056	Symbol	flags		3130841						
ANR	3131057	Symbol	pid		3130841						
ANR	3131058	Symbol	fmt		3130841						
ANR	3131059	Symbol	tm -> tm_mday		3130841						
ANR	3131060	Symbol	D_PID		3130841						
ANR	3131061	Symbol	cache		3130841						
ANR	3131062	Symbol	NULL		3130841						
ANR	3131063	Symbol	cache_size		3130841						
ANR	3131064	Symbol	cache . Length		3130841						
ANR	3131065	Symbol	DebugFlags		3130841						
ANR	3131066	Symbol	GetCurrentProcessId		3130841						
ANR	3131067	Symbol	clock_now		3130841						
ANR	3131068	Symbol	tm -> tm_mon		3130841						
ANR	3131069	Symbol	my_pid		3130841						
ANR	3131070	Symbol	args		3130841						
ANR	3131071	Symbol	D_FDS		3130841						
ANR	3131072	Symbol	tstamp		3130841						
ANR	3131073	Symbol	fds		3130841						
ANR	3131074	Symbol	tm -> tm_min		3130841						
ANR	3131075	Symbol	tm -> tm_sec		3130841						
ANR	3131076	Symbol	tm		3130841						
ANR	3131077	Symbol	tm -> tm_hour		3130841						
ANR	3131078	Symbol	time		3130841						
ANR	3131079	Symbol	* tm		3130841						
ANR	3131080	Symbol	D_NOHEADER		3130841						
ANR	3131081	Function	debug_cache_flush	232:0:6671:7102							
ANR	3131082	FunctionDef	debug_cache_flush ()		3131081	0					
ANR	3131083	CompoundStatement		234:0:6700:7102	3131081	0					
ANR	3131084	IfStatement	"if ( cache != """" )"		3131081	0					
ANR	3131085	Condition	"cache != """""	239:5:6909:6919	3131081	0	True				
ANR	3131086	EqualityExpression	"cache != """""		3131081	0		!=			
ANR	3131087	Identifier	cache		3131081	0					
ANR	3131088	PrimaryExpression	""""""		3131081	1					
ANR	3131089	CompoundStatement		6:18:221:221	3131081	1					
ANR	3131090	ExpressionStatement	"dprintf ( D_ALWAYS , ""LOG LINE CACHE: Begin Flush\\n"" )"	240:2:6926:6976	3131081	0	True				
ANR	3131091	CallExpression	"dprintf ( D_ALWAYS , ""LOG LINE CACHE: Begin Flush\\n"" )"		3131081	0					
ANR	3131092	Callee	dprintf		3131081	0					
ANR	3131093	Identifier	dprintf		3131081	0					
ANR	3131094	ArgumentList	D_ALWAYS		3131081	1					
ANR	3131095	Argument	D_ALWAYS		3131081	0					
ANR	3131096	Identifier	D_ALWAYS		3131081	0					
ANR	3131097	Argument	"""LOG LINE CACHE: Begin Flush\\n"""		3131081	1					
ANR	3131098	PrimaryExpression	"""LOG LINE CACHE: Begin Flush\\n"""		3131081	0					
ANR	3131099	ExpressionStatement	"dprintf ( D_ALWAYS | D_NOHEADER , ""%s"" , cache . Value ( ) )"	241:2:6980:7031	3131081	1	True				
ANR	3131100	CallExpression	"dprintf ( D_ALWAYS | D_NOHEADER , ""%s"" , cache . Value ( ) )"		3131081	0					
ANR	3131101	Callee	dprintf		3131081	0					
ANR	3131102	Identifier	dprintf		3131081	0					
ANR	3131103	ArgumentList	D_ALWAYS | D_NOHEADER		3131081	1					
ANR	3131104	Argument	D_ALWAYS | D_NOHEADER		3131081	0					
ANR	3131105	InclusiveOrExpression	D_ALWAYS | D_NOHEADER		3131081	0		|			
ANR	3131106	Identifier	D_ALWAYS		3131081	0					
ANR	3131107	Identifier	D_NOHEADER		3131081	1					
ANR	3131108	Argument	"""%s"""		3131081	1					
ANR	3131109	PrimaryExpression	"""%s"""		3131081	0					
ANR	3131110	Argument	cache . Value ( )		3131081	2					
ANR	3131111	CallExpression	cache . Value ( )		3131081	0					
ANR	3131112	Callee	cache . Value		3131081	0					
ANR	3131113	MemberAccess	cache . Value		3131081	0					
ANR	3131114	Identifier	cache		3131081	0					
ANR	3131115	Identifier	Value		3131081	1					
ANR	3131116	ArgumentList			3131081	1					
ANR	3131117	ExpressionStatement	"dprintf ( D_ALWAYS , ""LOG LINE CACHE: End Flush\\n"" )"	242:2:7035:7083	3131081	2	True				
ANR	3131118	CallExpression	"dprintf ( D_ALWAYS , ""LOG LINE CACHE: End Flush\\n"" )"		3131081	0					
ANR	3131119	Callee	dprintf		3131081	0					
ANR	3131120	Identifier	dprintf		3131081	0					
ANR	3131121	ArgumentList	D_ALWAYS		3131081	1					
ANR	3131122	Argument	D_ALWAYS		3131081	0					
ANR	3131123	Identifier	D_ALWAYS		3131081	0					
ANR	3131124	Argument	"""LOG LINE CACHE: End Flush\\n"""		3131081	1					
ANR	3131125	PrimaryExpression	"""LOG LINE CACHE: End Flush\\n"""		3131081	0					
ANR	3131126	ExpressionStatement	"cache = """""	243:2:7087:7097	3131081	3	True				
ANR	3131127	AssignmentExpression	"cache = """""		3131081	0		=			
ANR	3131128	Identifier	cache		3131081	0					
ANR	3131129	PrimaryExpression	""""""		3131081	1					
ANR	3131130	ReturnType	void		3131081	1					
ANR	3131131	Identifier	debug_cache_flush		3131081	2					
ANR	3131132	ParameterList			3131081	3					
ANR	3131133	CFGEntryNode	ENTRY		3131081		True				
ANR	3131134	CFGExitNode	EXIT		3131081		True				
ANR	3131135	Symbol	cache		3131081						
ANR	3131136	Symbol	D_ALWAYS		3131081						
ANR	3131137	Symbol	cache . Value		3131081						
ANR	3131138	Symbol	D_NOHEADER		3131081						
ANR	3131139	Function	debug_cache_set_size	248:0:7184:7393							
ANR	3131140	FunctionDef	debug_cache_set_size (int size)		3131139	0					
ANR	3131141	CompoundStatement		249:0:7220:7393	3131139	0					
ANR	3131142	IfStatement	if ( cache_enabled && cache_is_caching )		3131139	0					
ANR	3131143	Condition	cache_enabled && cache_is_caching	251:5:7270:7302	3131139	0	True				
ANR	3131144	AndExpression	cache_enabled && cache_is_caching		3131139	0		&&			
ANR	3131145	Identifier	cache_enabled		3131139	0					
ANR	3131146	Identifier	cache_is_caching		3131139	1					
ANR	3131147	CompoundStatement		3:40:84:84	3131139	1					
ANR	3131148	ExpressionStatement	debug_cache_flush ( )	252:2:7309:7328	3131139	0	True				
ANR	3131149	CallExpression	debug_cache_flush ( )		3131139	0					
ANR	3131150	Callee	debug_cache_flush		3131139	0					
ANR	3131151	Identifier	debug_cache_flush		3131139	0					
ANR	3131152	ArgumentList			3131139	1					
ANR	3131153	IfStatement	if ( size < 0 )		3131139	1					
ANR	3131154	Condition	size < 0	255:5:7339:7346	3131139	0	True				
ANR	3131155	RelationalExpression	size < 0		3131139	0		<			
ANR	3131156	Identifier	size		3131139	0					
ANR	3131157	PrimaryExpression	0		3131139	1					
ANR	3131158	CompoundStatement		7:15:128:128	3131139	1					
ANR	3131159	ExpressionStatement	cache_size = 0	256:2:7353:7367	3131139	0	True				
ANR	3131160	AssignmentExpression	cache_size = 0		3131139	0		=			
ANR	3131161	Identifier	cache_size		3131139	0					
ANR	3131162	PrimaryExpression	0		3131139	1					
ANR	3131163	ExpressionStatement	cache_size = size	259:1:7374:7391	3131139	2	True				
ANR	3131164	AssignmentExpression	cache_size = size		3131139	0		=			
ANR	3131165	Identifier	cache_size		3131139	0					
ANR	3131166	Identifier	size		3131139	1					
ANR	3131167	ReturnType	void		3131139	1					
ANR	3131168	Identifier	debug_cache_set_size		3131139	2					
ANR	3131169	ParameterList	int size		3131139	3					
ANR	3131170	Parameter	int size	248:26:7210:7217	3131139	0	True				
ANR	3131171	ParameterType	int		3131139	0					
ANR	3131172	Identifier	size		3131139	1					
ANR	3131173	CFGEntryNode	ENTRY		3131139		True				
ANR	3131174	CFGExitNode	EXIT		3131139		True				
ANR	3131175	Symbol	size		3131139						
ANR	3131176	Symbol	cache_enabled		3131139						
ANR	3131177	Symbol	cache_size		3131139						
ANR	3131178	Symbol	cache_is_caching		3131139						
ANR	3131179	Function	check_warning_strictness	263:0:7475:7810							
ANR	3131180	FunctionDef	"check_warning_strictness (strict_level_t strictness , bool quit_if_error)"		3131179	0					
ANR	3131181	CompoundStatement		264:0:7554:7810	3131179	0					
ANR	3131182	IfStatement	if ( Dagman :: _strict >= strictness )		3131179	0					
ANR	3131183	Condition	Dagman :: _strict >= strictness	265:6:7562:7590	3131179	0	True				
ANR	3131184	RelationalExpression	Dagman :: _strict >= strictness		3131179	0		>=			
ANR	3131185	Identifier	Dagman :: _strict		3131179	0					
ANR	3131186	Identifier	strictness		3131179	1					
ANR	3131187	CompoundStatement		2:38:39:39	3131179	1					
ANR	3131188	Statement	debug_printf	266:2:7598:7609	3131179	0	True				
ANR	3131189	Statement	(	266:14:7610:7610	3131179	1	True				
ANR	3131190	Statement	DEBUG_QUIET	266:16:7612:7622	3131179	2	True				
ANR	3131191	Statement	","	266:27:7623:7623	3131179	3	True				
ANR	3131192	Statement	"""ERROR: Warning is fatal """	266:29:7625:7650	3131179	4	True				
ANR	3131193	Statement	"""error because of DAGMAN_USE_STRICT setting\\n"""	267:5:7657:7702	3131179	5	True				
ANR	3131194	Statement	)	267:52:7704:7704	3131179	6	True				
ANR	3131195	ExpressionStatement		267:53:7705:7705	3131179	7	True				
ANR	3131196	IfStatement	if ( quit_if_error )		3131179	8					
ANR	3131197	Condition	quit_if_error	268:7:7714:7726	3131179	0	True				
ANR	3131198	Identifier	quit_if_error		3131179	0					
ANR	3131199	CompoundStatement		5:23:175:175	3131179	1					
ANR	3131200	ExpressionStatement	main_shutdown_rescue ( EXIT_ERROR )	269:3:7735:7769	3131179	0	True				
ANR	3131201	CallExpression	main_shutdown_rescue ( EXIT_ERROR )		3131179	0					
ANR	3131202	Callee	main_shutdown_rescue		3131179	0					
ANR	3131203	Identifier	main_shutdown_rescue		3131179	0					
ANR	3131204	ArgumentList	EXIT_ERROR		3131179	1					
ANR	3131205	Argument	EXIT_ERROR		3131179	0					
ANR	3131206	Identifier	EXIT_ERROR		3131179	0					
ANR	3131207	ReturnStatement	return true ;	272:2:7778:7789	3131179	9	True				
ANR	3131208	Identifier	true		3131179	0					
ANR	3131209	ReturnStatement	return false ;	275:1:7796:7808	3131179	1	True				
ANR	3131210	Identifier	false		3131179	0					
ANR	3131211	ReturnType	bool		3131179	1					
ANR	3131212	Identifier	check_warning_strictness		3131179	2					
ANR	3131213	ParameterList	"strict_level_t strictness , bool quit_if_error"		3131179	3					
ANR	3131214	Parameter	strict_level_t strictness	263:31:7506:7530	3131179	0	True				
ANR	3131215	ParameterType	strict_level_t		3131179	0					
ANR	3131216	Identifier	strictness		3131179	1					
ANR	3131217	Parameter	bool quit_if_error	263:58:7533:7550	3131179	1	True				
ANR	3131218	ParameterType	bool		3131179	0					
ANR	3131219	Identifier	quit_if_error		3131179	1					
ANR	3131220	CFGEntryNode	ENTRY		3131179		True				
ANR	3131221	CFGExitNode	EXIT		3131179		True				
ANR	3131222	Symbol	Dagman :: _strict		3131179						
ANR	3131223	Symbol	EXIT_ERROR		3131179						
ANR	3131224	Symbol	true		3131179						
ANR	3131225	Symbol	false		3131179						
ANR	3131226	Symbol	strictness		3131179						
ANR	3131227	Symbol	quit_if_error		3131179						
