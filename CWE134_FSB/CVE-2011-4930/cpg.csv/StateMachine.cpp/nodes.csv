command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	566839	File	data/converged/CVE-2011-4930_htcondor/StateMachine.cpp								
ANR	566840	Function	HADStateMachine :: HADStateMachine	49:0:1412:1465							
ANR	566841	FunctionDef	HADStateMachine :: HADStateMachine ()		566840	0					
ANR	566842	CompoundStatement		50:0:1451:1465	566840	0					
ANR	566843	ExpressionStatement	init ( )	51:4:1457:1463	566840	0	True				
ANR	566844	CallExpression	init ( )		566840	0					
ANR	566845	Callee	init		566840	0					
ANR	566846	Identifier	init		566840	0					
ANR	566847	ArgumentList			566840	1					
ANR	566848	Identifier	HADStateMachine :: HADStateMachine		566840	1					
ANR	566849	ParameterList			566840	2					
ANR	566850	CFGEntryNode	ENTRY		566840		True				
ANR	566851	CFGExitNode	EXIT		566840		True				
ANR	566852	Function	HADStateMachine :: init	57:0:1545:2167							
ANR	566853	FunctionDef	HADStateMachine :: init ()		566852	0					
ANR	566854	CompoundStatement		59:0:1578:2167	566852	0					
ANR	566855	ExpressionStatement	m_state = PRE_STATE	60:4:1584:1603	566852	0	True				
ANR	566856	AssignmentExpression	m_state = PRE_STATE		566852	0		=			
ANR	566857	Identifier	m_state		566852	0					
ANR	566858	Identifier	PRE_STATE		566852	1					
ANR	566859	ExpressionStatement	m_masterDaemon = NULL	61:4:1609:1630	566852	1	True				
ANR	566860	AssignmentExpression	m_masterDaemon = NULL		566852	0		=			
ANR	566861	Identifier	m_masterDaemon		566852	0					
ANR	566862	Identifier	NULL		566852	1					
ANR	566863	ExpressionStatement	m_controlleeName = NULL	62:1:1633:1656	566852	2	True				
ANR	566864	AssignmentExpression	m_controlleeName = NULL		566852	0		=			
ANR	566865	Identifier	m_controlleeName		566852	0					
ANR	566866	Identifier	NULL		566852	1					
ANR	566867	ExpressionStatement	m_isPrimary = false	63:4:1662:1681	566852	3	True				
ANR	566868	AssignmentExpression	m_isPrimary = false		566852	0		=			
ANR	566869	Identifier	m_isPrimary		566852	0					
ANR	566870	Identifier	false		566852	1					
ANR	566871	ExpressionStatement	m_usePrimary = false	64:4:1687:1707	566852	4	True				
ANR	566872	AssignmentExpression	m_usePrimary = false		566852	0		=			
ANR	566873	Identifier	m_usePrimary		566852	0					
ANR	566874	Identifier	false		566852	1					
ANR	566875	ExpressionStatement	m_standAloneMode = false	65:4:1713:1737	566852	5	True				
ANR	566876	AssignmentExpression	m_standAloneMode = false		566852	0		=			
ANR	566877	Identifier	m_standAloneMode		566852	0					
ANR	566878	Identifier	false		566852	1					
ANR	566879	ExpressionStatement	m_callsCounter = 0	66:4:1743:1761	566852	6	True				
ANR	566880	AssignmentExpression	m_callsCounter = 0		566852	0		=			
ANR	566881	Identifier	m_callsCounter		566852	0					
ANR	566882	PrimaryExpression	0		566852	1					
ANR	566883	ExpressionStatement	m_stateMachineTimerID = - 1	67:4:1767:1793	566852	7	True				
ANR	566884	AssignmentExpression	m_stateMachineTimerID = - 1		566852	0		=			
ANR	566885	Identifier	m_stateMachineTimerID		566852	0					
ANR	566886	UnaryOperationExpression	- 1		566852	1					
ANR	566887	UnaryOperator	-		566852	0					
ANR	566888	PrimaryExpression	1		566852	1					
ANR	566889	ExpressionStatement	m_hadInterval = - 1	68:4:1799:1817	566852	8	True				
ANR	566890	AssignmentExpression	m_hadInterval = - 1		566852	0		=			
ANR	566891	Identifier	m_hadInterval		566852	0					
ANR	566892	UnaryOperationExpression	- 1		566852	1					
ANR	566893	UnaryOperator	-		566852	0					
ANR	566894	PrimaryExpression	1		566852	1					
ANR	566895	ExpressionStatement	m_connectionTimeout = DEFAULT_SEND_COMMAND_TIMEOUT	70:4:1869:1919	566852	9	True				
ANR	566896	AssignmentExpression	m_connectionTimeout = DEFAULT_SEND_COMMAND_TIMEOUT		566852	0		=			
ANR	566897	Identifier	m_connectionTimeout		566852	0					
ANR	566898	Identifier	DEFAULT_SEND_COMMAND_TIMEOUT		566852	1					
ANR	566899	ExpressionStatement	m_selfId = - 1	71:4:1925:1938	566852	10	True				
ANR	566900	AssignmentExpression	m_selfId = - 1		566852	0		=			
ANR	566901	Identifier	m_selfId		566852	0					
ANR	566902	UnaryOperationExpression	- 1		566852	1					
ANR	566903	UnaryOperator	-		566852	0					
ANR	566904	PrimaryExpression	1		566852	1					
ANR	566905	ExpressionStatement	m_useReplication = false	74:4:1986:2010	566852	11	True				
ANR	566906	AssignmentExpression	m_useReplication = false		566852	0		=			
ANR	566907	Identifier	m_useReplication		566852	0					
ANR	566908	Identifier	false		566852	1					
ANR	566909	ExpressionStatement	m_replicationDaemonSinfulString = NULL	75:4:2016:2054	566852	12	True				
ANR	566910	AssignmentExpression	m_replicationDaemonSinfulString = NULL		566852	0		=			
ANR	566911	Identifier	m_replicationDaemonSinfulString		566852	0					
ANR	566912	Identifier	NULL		566852	1					
ANR	566913	ExpressionStatement	m_updateCollectorTimerId = - 1	77:4:2100:2129	566852	13	True				
ANR	566914	AssignmentExpression	m_updateCollectorTimerId = - 1		566852	0		=			
ANR	566915	Identifier	m_updateCollectorTimerId		566852	0					
ANR	566916	UnaryOperationExpression	- 1		566852	1					
ANR	566917	UnaryOperator	-		566852	0					
ANR	566918	PrimaryExpression	1		566852	1					
ANR	566919	ExpressionStatement	m_updateCollectorInterval = - 1	78:4:2135:2165	566852	14	True				
ANR	566920	AssignmentExpression	m_updateCollectorInterval = - 1		566852	0		=			
ANR	566921	Identifier	m_updateCollectorInterval		566852	0					
ANR	566922	UnaryOperationExpression	- 1		566852	1					
ANR	566923	UnaryOperator	-		566852	0					
ANR	566924	PrimaryExpression	1		566852	1					
ANR	566925	ReturnType	void		566852	1					
ANR	566926	Identifier	HADStateMachine :: init		566852	2					
ANR	566927	ParameterList			566852	3					
ANR	566928	CFGEntryNode	ENTRY		566852		True				
ANR	566929	CFGExitNode	EXIT		566852		True				
ANR	566930	Symbol	NULL		566852						
ANR	566931	Symbol	m_callsCounter		566852						
ANR	566932	Symbol	false		566852						
ANR	566933	Symbol	m_isPrimary		566852						
ANR	566934	Symbol	m_controlleeName		566852						
ANR	566935	Symbol	m_replicationDaemonSinfulString		566852						
ANR	566936	Symbol	m_stateMachineTimerID		566852						
ANR	566937	Symbol	m_state		566852						
ANR	566938	Symbol	m_usePrimary		566852						
ANR	566939	Symbol	m_standAloneMode		566852						
ANR	566940	Symbol	PRE_STATE		566852						
ANR	566941	Symbol	m_hadInterval		566852						
ANR	566942	Symbol	m_selfId		566852						
ANR	566943	Symbol	m_updateCollectorInterval		566852						
ANR	566944	Symbol	m_useReplication		566852						
ANR	566945	Symbol	m_connectionTimeout		566852						
ANR	566946	Symbol	DEFAULT_SEND_COMMAND_TIMEOUT		566852						
ANR	566947	Symbol	m_masterDaemon		566852						
ANR	566948	Symbol	m_updateCollectorTimerId		566852						
ANR	566949	Function	HADStateMachine :: freeResources	84:0:2285:3267							
ANR	566950	FunctionDef	HADStateMachine :: freeResources ()		566949	0					
ANR	566951	CompoundStatement		86:0:2327:3267	566949	0					
ANR	566952	ExpressionStatement	m_state = PRE_STATE	87:4:2333:2352	566949	0	True				
ANR	566953	AssignmentExpression	m_state = PRE_STATE		566949	0		=			
ANR	566954	Identifier	m_state		566949	0					
ANR	566955	Identifier	PRE_STATE		566949	1					
ANR	566956	ExpressionStatement	m_connectionTimeout = DEFAULT_SEND_COMMAND_TIMEOUT	88:4:2358:2408	566949	1	True				
ANR	566957	AssignmentExpression	m_connectionTimeout = DEFAULT_SEND_COMMAND_TIMEOUT		566949	0		=			
ANR	566958	Identifier	m_connectionTimeout		566949	0					
ANR	566959	Identifier	DEFAULT_SEND_COMMAND_TIMEOUT		566949	1					
ANR	566960	IfStatement	if ( m_masterDaemon != NULL )		566949	2					
ANR	566961	Condition	m_masterDaemon != NULL	90:8:2419:2440	566949	0	True				
ANR	566962	EqualityExpression	m_masterDaemon != NULL		566949	0		!=			
ANR	566963	Identifier	m_masterDaemon		566949	0					
ANR	566964	Identifier	NULL		566949	1					
ANR	566965	CompoundStatement		5:32:115:115	566949	1					
ANR	566966	ExpressionStatement	sendControlCmdToMaster ( CHILD_OFF_FAST )	94:8:2630:2670	566949	0	True				
ANR	566967	CallExpression	sendControlCmdToMaster ( CHILD_OFF_FAST )		566949	0					
ANR	566968	Callee	sendControlCmdToMaster		566949	0					
ANR	566969	Identifier	sendControlCmdToMaster		566949	0					
ANR	566970	ArgumentList	CHILD_OFF_FAST		566949	1					
ANR	566971	Argument	CHILD_OFF_FAST		566949	0					
ANR	566972	Identifier	CHILD_OFF_FAST		566949	0					
ANR	566973	Statement	delete	95:8:2680:2685	566949	1	True				
ANR	566974	ExpressionStatement	m_masterDaemon	95:15:2687:2701	566949	2	True				
ANR	566975	Identifier	m_masterDaemon		566949	0					
ANR	566976	ExpressionStatement	m_masterDaemon = NULL	96:8:2711:2732	566949	3	True				
ANR	566977	AssignmentExpression	m_masterDaemon = NULL		566949	0		=			
ANR	566978	Identifier	m_masterDaemon		566949	0					
ANR	566979	Identifier	NULL		566949	1					
ANR	566980	ExpressionStatement	m_isPrimary = false	98:4:2744:2763	566949	3	True				
ANR	566981	AssignmentExpression	m_isPrimary = false		566949	0		=			
ANR	566982	Identifier	m_isPrimary		566949	0					
ANR	566983	Identifier	false		566949	1					
ANR	566984	ExpressionStatement	m_usePrimary = false	99:4:2769:2789	566949	4	True				
ANR	566985	AssignmentExpression	m_usePrimary = false		566949	0		=			
ANR	566986	Identifier	m_usePrimary		566949	0					
ANR	566987	Identifier	false		566949	1					
ANR	566988	ExpressionStatement	m_standAloneMode = false	100:4:2795:2819	566949	5	True				
ANR	566989	AssignmentExpression	m_standAloneMode = false		566949	0		=			
ANR	566990	Identifier	m_standAloneMode		566949	0					
ANR	566991	Identifier	false		566949	1					
ANR	566992	ExpressionStatement	m_callsCounter = 0	101:4:2825:2843	566949	6	True				
ANR	566993	AssignmentExpression	m_callsCounter = 0		566949	0		=			
ANR	566994	Identifier	m_callsCounter		566949	0					
ANR	566995	PrimaryExpression	0		566949	1					
ANR	566996	ExpressionStatement	m_hadInterval = - 1	102:1:2846:2864	566949	7	True				
ANR	566997	AssignmentExpression	m_hadInterval = - 1		566949	0		=			
ANR	566998	Identifier	m_hadInterval		566949	0					
ANR	566999	UnaryOperationExpression	- 1		566949	1					
ANR	567000	UnaryOperator	-		566949	0					
ANR	567001	PrimaryExpression	1		566949	1					
ANR	567002	ExpressionStatement	utilCancelTimer ( m_stateMachineTimerID )	103:4:2870:2910	566949	8	True				
ANR	567003	CallExpression	utilCancelTimer ( m_stateMachineTimerID )		566949	0					
ANR	567004	Callee	utilCancelTimer		566949	0					
ANR	567005	Identifier	utilCancelTimer		566949	0					
ANR	567006	ArgumentList	m_stateMachineTimerID		566949	1					
ANR	567007	Argument	m_stateMachineTimerID		566949	0					
ANR	567008	Identifier	m_stateMachineTimerID		566949	0					
ANR	567009	ExpressionStatement	m_selfId = - 1	105:4:2917:2930	566949	9	True				
ANR	567010	AssignmentExpression	m_selfId = - 1		566949	0		=			
ANR	567011	Identifier	m_selfId		566949	0					
ANR	567012	UnaryOperationExpression	- 1		566949	1					
ANR	567013	UnaryOperator	-		566949	0					
ANR	567014	PrimaryExpression	1		566949	1					
ANR	567015	ExpressionStatement	clearBuffers ( )	107:4:2937:2951	566949	10	True				
ANR	567016	CallExpression	clearBuffers ( )		566949	0					
ANR	567017	Callee	clearBuffers		566949	0					
ANR	567018	Identifier	clearBuffers		566949	0					
ANR	567019	ArgumentList			566949	1					
ANR	567020	ExpressionStatement	m_useReplication = false	110:4:2995:3019	566949	11	True				
ANR	567021	AssignmentExpression	m_useReplication = false		566949	0		=			
ANR	567022	Identifier	m_useReplication		566949	0					
ANR	567023	Identifier	false		566949	1					
ANR	567024	IfStatement	if ( m_replicationDaemonSinfulString != NULL )		566949	12					
ANR	567025	Condition	m_replicationDaemonSinfulString != NULL	112:5:3027:3065	566949	0	True				
ANR	567026	EqualityExpression	m_replicationDaemonSinfulString != NULL		566949	0		!=			
ANR	567027	Identifier	m_replicationDaemonSinfulString		566949	0					
ANR	567028	Identifier	NULL		566949	1					
ANR	567029	CompoundStatement		27:47:741:741	566949	1					
ANR	567030	ExpressionStatement	free ( m_replicationDaemonSinfulString )	113:2:3073:3110	566949	0	True				
ANR	567031	CallExpression	free ( m_replicationDaemonSinfulString )		566949	0					
ANR	567032	Callee	free		566949	0					
ANR	567033	Identifier	free		566949	0					
ANR	567034	ArgumentList	m_replicationDaemonSinfulString		566949	1					
ANR	567035	Argument	m_replicationDaemonSinfulString		566949	0					
ANR	567036	Identifier	m_replicationDaemonSinfulString		566949	0					
ANR	567037	ExpressionStatement	m_replicationDaemonSinfulString = NULL	114:2:3114:3152	566949	1	True				
ANR	567038	AssignmentExpression	m_replicationDaemonSinfulString = NULL		566949	0		=			
ANR	567039	Identifier	m_replicationDaemonSinfulString		566949	0					
ANR	567040	Identifier	NULL		566949	1					
ANR	567041	ExpressionStatement	utilCancelTimer ( m_updateCollectorTimerId )	118:1:3186:3229	566949	13	True				
ANR	567042	CallExpression	utilCancelTimer ( m_updateCollectorTimerId )		566949	0					
ANR	567043	Callee	utilCancelTimer		566949	0					
ANR	567044	Identifier	utilCancelTimer		566949	0					
ANR	567045	ArgumentList	m_updateCollectorTimerId		566949	1					
ANR	567046	Argument	m_updateCollectorTimerId		566949	0					
ANR	567047	Identifier	m_updateCollectorTimerId		566949	0					
ANR	567048	ExpressionStatement	m_updateCollectorInterval = - 1	119:4:3235:3265	566949	14	True				
ANR	567049	AssignmentExpression	m_updateCollectorInterval = - 1		566949	0		=			
ANR	567050	Identifier	m_updateCollectorInterval		566949	0					
ANR	567051	UnaryOperationExpression	- 1		566949	1					
ANR	567052	UnaryOperator	-		566949	0					
ANR	567053	PrimaryExpression	1		566949	1					
ANR	567054	ReturnType	void		566949	1					
ANR	567055	Identifier	HADStateMachine :: freeResources		566949	2					
ANR	567056	ParameterList			566949	3					
ANR	567057	CFGEntryNode	ENTRY		566949		True				
ANR	567058	CFGExitNode	EXIT		566949		True				
ANR	567059	Symbol	NULL		566949						
ANR	567060	Symbol	m_callsCounter		566949						
ANR	567061	Symbol	false		566949						
ANR	567062	Symbol	m_isPrimary		566949						
ANR	567063	Symbol	m_replicationDaemonSinfulString		566949						
ANR	567064	Symbol	m_stateMachineTimerID		566949						
ANR	567065	Symbol	m_state		566949						
ANR	567066	Symbol	m_usePrimary		566949						
ANR	567067	Symbol	m_standAloneMode		566949						
ANR	567068	Symbol	PRE_STATE		566949						
ANR	567069	Symbol	CHILD_OFF_FAST		566949						
ANR	567070	Symbol	m_hadInterval		566949						
ANR	567071	Symbol	m_selfId		566949						
ANR	567072	Symbol	m_updateCollectorInterval		566949						
ANR	567073	Symbol	m_useReplication		566949						
ANR	567074	Symbol	m_connectionTimeout		566949						
ANR	567075	Symbol	DEFAULT_SEND_COMMAND_TIMEOUT		566949						
ANR	567076	Symbol	m_masterDaemon		566949						
ANR	567077	Symbol	m_updateCollectorTimerId		566949						
ANR	567078	Function	HADStateMachine :: ~HADStateMachine	125:0:3347:3828							
ANR	567079	FunctionDef	HADStateMachine :: ~HADStateMachine ()		567078	0					
ANR	567080	CompoundStatement		126:0:3387:3828	567078	0					
ANR	567081	IdentifierDeclStatement	ClassAd invalidate_ad ;	128:4:3394:3415	567078	0	True				
ANR	567082	IdentifierDecl	invalidate_ad		567078	0					
ANR	567083	IdentifierDeclType	ClassAd		567078	0					
ANR	567084	Identifier	invalidate_ad		567078	1					
ANR	567085	IdentifierDeclStatement	MyString line ;	129:4:3421:3434	567078	1	True				
ANR	567086	IdentifierDecl	line		567078	0					
ANR	567087	IdentifierDeclType	MyString		567078	0					
ANR	567088	Identifier	line		567078	1					
ANR	567089	ExpressionStatement	freeResources ( )	131:4:3441:3456	567078	2	True				
ANR	567090	CallExpression	freeResources ( )		567078	0					
ANR	567091	Callee	freeResources		567078	0					
ANR	567092	Identifier	freeResources		567078	0					
ANR	567093	ArgumentList			567078	1					
ANR	567094	ExpressionStatement	invalidate_ad . SetMyTypeName ( QUERY_ADTYPE )	133:4:3463:3506	567078	3	True				
ANR	567095	CallExpression	invalidate_ad . SetMyTypeName ( QUERY_ADTYPE )		567078	0					
ANR	567096	Callee	invalidate_ad . SetMyTypeName		567078	0					
ANR	567097	MemberAccess	invalidate_ad . SetMyTypeName		567078	0					
ANR	567098	Identifier	invalidate_ad		567078	0					
ANR	567099	Identifier	SetMyTypeName		567078	1					
ANR	567100	ArgumentList	QUERY_ADTYPE		567078	1					
ANR	567101	Argument	QUERY_ADTYPE		567078	0					
ANR	567102	Identifier	QUERY_ADTYPE		567078	0					
ANR	567103	ExpressionStatement	invalidate_ad . SetTargetTypeName ( HAD_ADTYPE )	134:4:3512:3557	567078	4	True				
ANR	567104	CallExpression	invalidate_ad . SetTargetTypeName ( HAD_ADTYPE )		567078	0					
ANR	567105	Callee	invalidate_ad . SetTargetTypeName		567078	0					
ANR	567106	MemberAccess	invalidate_ad . SetTargetTypeName		567078	0					
ANR	567107	Identifier	invalidate_ad		567078	0					
ANR	567108	Identifier	SetTargetTypeName		567078	1					
ANR	567109	ArgumentList	HAD_ADTYPE		567078	1					
ANR	567110	Argument	HAD_ADTYPE		567078	0					
ANR	567111	Identifier	HAD_ADTYPE		567078	0					
ANR	567112	ExpressionStatement	"line . sprintf ( ""TARGET.%s == \\""%s\\"""" , ATTR_NAME , m_name . Value ( ) )"	135:4:3563:3628	567078	5	True				
ANR	567113	CallExpression	"line . sprintf ( ""TARGET.%s == \\""%s\\"""" , ATTR_NAME , m_name . Value ( ) )"		567078	0					
ANR	567114	Callee	line . sprintf		567078	0					
ANR	567115	MemberAccess	line . sprintf		567078	0					
ANR	567116	Identifier	line		567078	0					
ANR	567117	Identifier	sprintf		567078	1					
ANR	567118	ArgumentList	"""TARGET.%s == \\""%s\\"""""		567078	1					
ANR	567119	Argument	"""TARGET.%s == \\""%s\\"""""		567078	0					
ANR	567120	PrimaryExpression	"""TARGET.%s == \\""%s\\"""""		567078	0					
ANR	567121	Argument	ATTR_NAME		567078	1					
ANR	567122	Identifier	ATTR_NAME		567078	0					
ANR	567123	Argument	m_name . Value ( )		567078	2					
ANR	567124	CallExpression	m_name . Value ( )		567078	0					
ANR	567125	Callee	m_name . Value		567078	0					
ANR	567126	MemberAccess	m_name . Value		567078	0					
ANR	567127	Identifier	m_name		567078	0					
ANR	567128	Identifier	Value		567078	1					
ANR	567129	ArgumentList			567078	1					
ANR	567130	ExpressionStatement	"invalidate_ad . AssignExpr ( ATTR_REQUIREMENTS , line . Value ( ) )"	136:4:3634:3694	567078	6	True				
ANR	567131	CallExpression	"invalidate_ad . AssignExpr ( ATTR_REQUIREMENTS , line . Value ( ) )"		567078	0					
ANR	567132	Callee	invalidate_ad . AssignExpr		567078	0					
ANR	567133	MemberAccess	invalidate_ad . AssignExpr		567078	0					
ANR	567134	Identifier	invalidate_ad		567078	0					
ANR	567135	Identifier	AssignExpr		567078	1					
ANR	567136	ArgumentList	ATTR_REQUIREMENTS		567078	1					
ANR	567137	Argument	ATTR_REQUIREMENTS		567078	0					
ANR	567138	Identifier	ATTR_REQUIREMENTS		567078	0					
ANR	567139	Argument	line . Value ( )		567078	1					
ANR	567140	CallExpression	line . Value ( )		567078	0					
ANR	567141	Callee	line . Value		567078	0					
ANR	567142	MemberAccess	line . Value		567078	0					
ANR	567143	Identifier	line		567078	0					
ANR	567144	Identifier	Value		567078	1					
ANR	567145	ArgumentList			567078	1					
ANR	567146	ExpressionStatement	"invalidate_ad . Assign ( ATTR_NAME , m_name . Value ( ) )"	137:1:3697:3746	567078	7	True				
ANR	567147	CallExpression	"invalidate_ad . Assign ( ATTR_NAME , m_name . Value ( ) )"		567078	0					
ANR	567148	Callee	invalidate_ad . Assign		567078	0					
ANR	567149	MemberAccess	invalidate_ad . Assign		567078	0					
ANR	567150	Identifier	invalidate_ad		567078	0					
ANR	567151	Identifier	Assign		567078	1					
ANR	567152	ArgumentList	ATTR_NAME		567078	1					
ANR	567153	Argument	ATTR_NAME		567078	0					
ANR	567154	Identifier	ATTR_NAME		567078	0					
ANR	567155	Argument	m_name . Value ( )		567078	1					
ANR	567156	CallExpression	m_name . Value ( )		567078	0					
ANR	567157	Callee	m_name . Value		567078	0					
ANR	567158	MemberAccess	m_name . Value		567078	0					
ANR	567159	Identifier	m_name		567078	0					
ANR	567160	Identifier	Value		567078	1					
ANR	567161	ArgumentList			567078	1					
ANR	567162	ExpressionStatement	"daemonCore -> sendUpdates ( INVALIDATE_HAD_ADS , & invalidate_ad , NULL , false )"	138:4:3752:3826	567078	8	True				
ANR	567163	CallExpression	"daemonCore -> sendUpdates ( INVALIDATE_HAD_ADS , & invalidate_ad , NULL , false )"		567078	0					
ANR	567164	Callee	daemonCore -> sendUpdates		567078	0					
ANR	567165	PtrMemberAccess	daemonCore -> sendUpdates		567078	0					
ANR	567166	Identifier	daemonCore		567078	0					
ANR	567167	Identifier	sendUpdates		567078	1					
ANR	567168	ArgumentList	INVALIDATE_HAD_ADS		567078	1					
ANR	567169	Argument	INVALIDATE_HAD_ADS		567078	0					
ANR	567170	Identifier	INVALIDATE_HAD_ADS		567078	0					
ANR	567171	Argument	& invalidate_ad		567078	1					
ANR	567172	UnaryOperationExpression	& invalidate_ad		567078	0					
ANR	567173	UnaryOperator	&		567078	0					
ANR	567174	Identifier	invalidate_ad		567078	1					
ANR	567175	Argument	NULL		567078	2					
ANR	567176	Identifier	NULL		567078	0					
ANR	567177	Argument	false		567078	3					
ANR	567178	Identifier	false		567078	0					
ANR	567179	Identifier	HADStateMachine :: ~HADStateMachine		567078	1					
ANR	567180	ParameterList			567078	2					
ANR	567181	CFGEntryNode	ENTRY		567078		True				
ANR	567182	CFGExitNode	EXIT		567078		True				
ANR	567183	Symbol	INVALIDATE_HAD_ADS		567078						
ANR	567184	Symbol	ATTR_NAME		567078						
ANR	567185	Symbol	NULL		567078						
ANR	567186	Symbol	m_name . Value		567078						
ANR	567187	Symbol	line . Value		567078						
ANR	567188	Symbol	line		567078						
ANR	567189	Symbol	ATTR_REQUIREMENTS		567078						
ANR	567190	Symbol	false		567078						
ANR	567191	Symbol	HAD_ADTYPE		567078						
ANR	567192	Symbol	& invalidate_ad		567078						
ANR	567193	Symbol	QUERY_ADTYPE		567078						
ANR	567194	Symbol	m_name		567078						
ANR	567195	Symbol	invalidate_ad		567078						
ANR	567196	Symbol	daemonCore		567078						
ANR	567197	Function	HADStateMachine :: isHardConfigurationNeeded	142:0:3832:5102							
ANR	567198	FunctionDef	HADStateMachine :: isHardConfigurationNeeded ()		567197	0					
ANR	567199	CompoundStatement		144:0:3886:5102	567197	0					
ANR	567200	IdentifierDeclStatement	char * tmp = NULL ;	145:1:3889:3911	567197	0	True				
ANR	567201	IdentifierDecl	* tmp = NULL		567197	0					
ANR	567202	IdentifierDeclType	char *		567197	0					
ANR	567203	Identifier	tmp		567197	1					
ANR	567204	AssignmentExpression	* tmp = NULL		567197	2		=			
ANR	567205	Identifier	NULL		567197	0					
ANR	567206	Identifier	NULL		567197	1					
ANR	567207	IdentifierDeclStatement	char controllee [ 128 ] ;	146:1:3914:3936	567197	1	True				
ANR	567208	IdentifierDecl	controllee [ 128 ]		567197	0					
ANR	567209	IdentifierDeclType	char [ 128 ]		567197	0					
ANR	567210	Identifier	controllee		567197	1					
ANR	567211	PrimaryExpression	128		567197	2					
ANR	567212	IdentifierDeclStatement	int selfId = - 1 ;	147:1:3939:3960	567197	2	True				
ANR	567213	IdentifierDecl	selfId = - 1		567197	0					
ANR	567214	IdentifierDeclType	int		567197	0					
ANR	567215	Identifier	selfId		567197	1					
ANR	567216	AssignmentExpression	selfId = - 1		567197	2		=			
ANR	567217	Identifier	selfId		567197	0					
ANR	567218	UnaryOperationExpression	- 1		567197	1					
ANR	567219	UnaryOperator	-		567197	0					
ANR	567220	PrimaryExpression	1		567197	1					
ANR	567221	IdentifierDeclStatement	StringList allHadIps ;	148:1:3963:3984	567197	3	True				
ANR	567222	IdentifierDecl	allHadIps		567197	0					
ANR	567223	IdentifierDeclType	StringList		567197	0					
ANR	567224	Identifier	allHadIps		567197	1					
ANR	567225	ExpressionStatement	"tmp = param ( ""HAD_CONTROLLEE"" )"	150:1:3988:4019	567197	4	True				
ANR	567226	AssignmentExpression	"tmp = param ( ""HAD_CONTROLLEE"" )"		567197	0		=			
ANR	567227	Identifier	tmp		567197	0					
ANR	567228	CallExpression	"param ( ""HAD_CONTROLLEE"" )"		567197	1					
ANR	567229	Callee	param		567197	0					
ANR	567230	Identifier	param		567197	0					
ANR	567231	ArgumentList	"""HAD_CONTROLLEE"""		567197	1					
ANR	567232	Argument	"""HAD_CONTROLLEE"""		567197	0					
ANR	567233	PrimaryExpression	"""HAD_CONTROLLEE"""		567197	0					
ANR	567234	IfStatement	if ( tmp )		567197	5					
ANR	567235	Condition	tmp	151:6:4027:4029	567197	0	True				
ANR	567236	Identifier	tmp		567197	0					
ANR	567237	CompoundStatement		8:12:146:146	567197	1					
ANR	567238	ExpressionStatement	"strncpy ( controllee , tmp , sizeof ( controllee ) - 1 )"	152:2:4037:4087	567197	0	True				
ANR	567239	CallExpression	"strncpy ( controllee , tmp , sizeof ( controllee ) - 1 )"		567197	0					
ANR	567240	Callee	strncpy		567197	0					
ANR	567241	Identifier	strncpy		567197	0					
ANR	567242	ArgumentList	controllee		567197	1					
ANR	567243	Argument	controllee		567197	0					
ANR	567244	Identifier	controllee		567197	0					
ANR	567245	Argument	tmp		567197	1					
ANR	567246	Identifier	tmp		567197	0					
ANR	567247	Argument	sizeof ( controllee ) - 1		567197	2					
ANR	567248	AdditiveExpression	sizeof ( controllee ) - 1		567197	0		-			
ANR	567249	SizeofExpression	sizeof ( controllee )		567197	0					
ANR	567250	Sizeof	sizeof		567197	0					
ANR	567251	SizeofOperand	controllee		567197	1					
ANR	567252	PrimaryExpression	1		567197	1					
ANR	567253	ExpressionStatement	free ( tmp )	153:8:4097:4108	567197	1	True				
ANR	567254	CallExpression	free ( tmp )		567197	0					
ANR	567255	Callee	free		567197	0					
ANR	567256	Identifier	free		567197	0					
ANR	567257	ArgumentList	tmp		567197	1					
ANR	567258	Argument	tmp		567197	0					
ANR	567259	Identifier	tmp		567197	0					
ANR	567260	ElseStatement	else		567197	0					
ANR	567261	CompoundStatement		12:6:232:232	567197	0					
ANR	567262	ExpressionStatement	"strncpy ( controllee , daemonString ( DT_NEGOTIATOR ) , sizeof ( controllee ) - 1 )"	156:2:4123:4197	567197	0	True				
ANR	567263	CallExpression	"strncpy ( controllee , daemonString ( DT_NEGOTIATOR ) , sizeof ( controllee ) - 1 )"		567197	0					
ANR	567264	Callee	strncpy		567197	0					
ANR	567265	Identifier	strncpy		567197	0					
ANR	567266	ArgumentList	controllee		567197	1					
ANR	567267	Argument	controllee		567197	0					
ANR	567268	Identifier	controllee		567197	0					
ANR	567269	Argument	daemonString ( DT_NEGOTIATOR )		567197	1					
ANR	567270	CallExpression	daemonString ( DT_NEGOTIATOR )		567197	0					
ANR	567271	Callee	daemonString		567197	0					
ANR	567272	Identifier	daemonString		567197	0					
ANR	567273	ArgumentList	DT_NEGOTIATOR		567197	1					
ANR	567274	Argument	DT_NEGOTIATOR		567197	0					
ANR	567275	Identifier	DT_NEGOTIATOR		567197	0					
ANR	567276	Argument	sizeof ( controllee ) - 1		567197	2					
ANR	567277	AdditiveExpression	sizeof ( controllee ) - 1		567197	0		-			
ANR	567278	SizeofExpression	sizeof ( controllee )		567197	0					
ANR	567279	Sizeof	sizeof		567197	0					
ANR	567280	SizeofOperand	controllee		567197	1					
ANR	567281	PrimaryExpression	1		567197	1					
ANR	567282	IfStatement	"if ( strcasecmp ( controllee , m_controlleeName ) )"		567197	6					
ANR	567283	Condition	"strcasecmp ( controllee , m_controlleeName )"	158:6:4208:4247	567197	0	True				
ANR	567284	CallExpression	"strcasecmp ( controllee , m_controlleeName )"		567197	0					
ANR	567285	Callee	strcasecmp		567197	0					
ANR	567286	Identifier	strcasecmp		567197	0					
ANR	567287	ArgumentList	controllee		567197	1					
ANR	567288	Argument	controllee		567197	0					
ANR	567289	Identifier	controllee		567197	0					
ANR	567290	Argument	m_controlleeName		567197	1					
ANR	567291	Identifier	m_controlleeName		567197	0					
ANR	567292	CompoundStatement		15:49:364:364	567197	1					
ANR	567293	ReturnStatement	return true ;	159:2:4255:4266	567197	0	True				
ANR	567294	Identifier	true		567197	0					
ANR	567295	IfStatement	"if ( param_boolean ( ""HAD_USE_PRIMARY"" , false ) != m_usePrimary )"		567197	7					
ANR	567296	Condition	"param_boolean ( ""HAD_USE_PRIMARY"" , false ) != m_usePrimary"	162:6:4278:4332	567197	0	True				
ANR	567297	EqualityExpression	"param_boolean ( ""HAD_USE_PRIMARY"" , false ) != m_usePrimary"		567197	0		!=			
ANR	567298	CallExpression	"param_boolean ( ""HAD_USE_PRIMARY"" , false )"		567197	0					
ANR	567299	Callee	param_boolean		567197	0					
ANR	567300	Identifier	param_boolean		567197	0					
ANR	567301	ArgumentList	"""HAD_USE_PRIMARY"""		567197	1					
ANR	567302	Argument	"""HAD_USE_PRIMARY"""		567197	0					
ANR	567303	PrimaryExpression	"""HAD_USE_PRIMARY"""		567197	0					
ANR	567304	Argument	false		567197	1					
ANR	567305	Identifier	false		567197	0					
ANR	567306	Identifier	m_usePrimary		567197	1					
ANR	567307	CompoundStatement		19:64:449:449	567197	1					
ANR	567308	ReturnStatement	return true ;	163:2:4340:4351	567197	0	True				
ANR	567309	Identifier	true		567197	0					
ANR	567310	ExpressionStatement	"tmp = param ( ""HAD_LIST"" )"	166:4:4361:4386	567197	8	True				
ANR	567311	AssignmentExpression	"tmp = param ( ""HAD_LIST"" )"		567197	0		=			
ANR	567312	Identifier	tmp		567197	0					
ANR	567313	CallExpression	"param ( ""HAD_LIST"" )"		567197	1					
ANR	567314	Callee	param		567197	0					
ANR	567315	Identifier	param		567197	0					
ANR	567316	ArgumentList	"""HAD_LIST"""		567197	1					
ANR	567317	Argument	"""HAD_LIST"""		567197	0					
ANR	567318	PrimaryExpression	"""HAD_LIST"""		567197	0					
ANR	567319	IfStatement	if ( tmp )		567197	9					
ANR	567320	Condition	tmp	167:9:4397:4399	567197	0	True				
ANR	567321	Identifier	tmp		567197	0					
ANR	567322	CompoundStatement		25:2:520:542	567197	1					
ANR	567323	IdentifierDeclStatement	StringList otherHadIps ;	168:2:4407:4429	567197	0	True				
ANR	567324	IdentifierDecl	otherHadIps		567197	0					
ANR	567325	IdentifierDeclType	StringList		567197	0					
ANR	567326	Identifier	otherHadIps		567197	1					
ANR	567327	ExpressionStatement	"getHadList ( tmp , m_usePrimary , otherHadIps , allHadIps , selfId )"	171:2:4571:4634	567197	1	True				
ANR	567328	CallExpression	"getHadList ( tmp , m_usePrimary , otherHadIps , allHadIps , selfId )"		567197	0					
ANR	567329	Callee	getHadList		567197	0					
ANR	567330	Identifier	getHadList		567197	0					
ANR	567331	ArgumentList	tmp		567197	1					
ANR	567332	Argument	tmp		567197	0					
ANR	567333	Identifier	tmp		567197	0					
ANR	567334	Argument	m_usePrimary		567197	1					
ANR	567335	Identifier	m_usePrimary		567197	0					
ANR	567336	Argument	otherHadIps		567197	2					
ANR	567337	Identifier	otherHadIps		567197	0					
ANR	567338	Argument	allHadIps		567197	3					
ANR	567339	Identifier	allHadIps		567197	0					
ANR	567340	Argument	selfId		567197	4					
ANR	567341	Identifier	selfId		567197	0					
ANR	567342	ExpressionStatement	free ( tmp )	172:8:4644:4655	567197	2	True				
ANR	567343	CallExpression	free ( tmp )		567197	0					
ANR	567344	Callee	free		567197	0					
ANR	567345	Identifier	free		567197	0					
ANR	567346	ArgumentList	tmp		567197	1					
ANR	567347	Argument	tmp		567197	0					
ANR	567348	Identifier	tmp		567197	0					
ANR	567349	ElseStatement	else		567197	0					
ANR	567350	CompoundStatement		30:11:781:781	567197	0					
ANR	567351	ExpressionStatement	"utilCrucialError ( utilNoParameterError ( ""HAD_LIST"" , ""HAD"" ) . Value ( ) )"	174:2:4672:4741	567197	0	True				
ANR	567352	CallExpression	"utilCrucialError ( utilNoParameterError ( ""HAD_LIST"" , ""HAD"" ) . Value ( ) )"		567197	0					
ANR	567353	Callee	utilCrucialError		567197	0					
ANR	567354	Identifier	utilCrucialError		567197	0					
ANR	567355	ArgumentList	"utilNoParameterError ( ""HAD_LIST"" , ""HAD"" ) . Value ( )"		567197	1					
ANR	567356	Argument	"utilNoParameterError ( ""HAD_LIST"" , ""HAD"" ) . Value ( )"		567197	0					
ANR	567357	CallExpression	"utilNoParameterError ( ""HAD_LIST"" , ""HAD"" ) . Value ( )"		567197	0					
ANR	567358	Callee	"utilNoParameterError ( ""HAD_LIST"" , ""HAD"" ) . Value"		567197	0					
ANR	567359	MemberAccess	"utilNoParameterError ( ""HAD_LIST"" , ""HAD"" ) . Value"		567197	0					
ANR	567360	CallExpression	"utilNoParameterError ( ""HAD_LIST"" , ""HAD"" )"		567197	0					
ANR	567361	Callee	utilNoParameterError		567197	0					
ANR	567362	Identifier	utilNoParameterError		567197	0					
ANR	567363	ArgumentList	"""HAD_LIST"""		567197	1					
ANR	567364	Argument	"""HAD_LIST"""		567197	0					
ANR	567365	PrimaryExpression	"""HAD_LIST"""		567197	0					
ANR	567366	Argument	"""HAD"""		567197	1					
ANR	567367	PrimaryExpression	"""HAD"""		567197	0					
ANR	567368	Identifier	Value		567197	1					
ANR	567369	ArgumentList			567197	1					
ANR	567370	IfStatement	if ( ( m_selfId != selfId ) || ( ! m_allHadIps . identical ( m_allHadIps ) ) )		567197	10					
ANR	567371	Condition	( m_selfId != selfId ) || ( ! m_allHadIps . identical ( m_allHadIps ) )	180:6:4975:5060	567197	0	True				
ANR	567372	OrExpression	( m_selfId != selfId ) || ( ! m_allHadIps . identical ( m_allHadIps ) )		567197	0		||			
ANR	567373	EqualityExpression	m_selfId != selfId		567197	0		!=			
ANR	567374	Identifier	m_selfId		567197	0					
ANR	567375	Identifier	selfId		567197	1					
ANR	567376	UnaryOperationExpression	! m_allHadIps . identical ( m_allHadIps )		567197	1					
ANR	567377	UnaryOperator	!		567197	0					
ANR	567378	CallExpression	m_allHadIps . identical ( m_allHadIps )		567197	1					
ANR	567379	Callee	m_allHadIps . identical		567197	0					
ANR	567380	MemberAccess	m_allHadIps . identical		567197	0					
ANR	567381	Identifier	m_allHadIps		567197	0					
ANR	567382	Identifier	identical		567197	1					
ANR	567383	ArgumentList	m_allHadIps		567197	1					
ANR	567384	Argument	m_allHadIps		567197	0					
ANR	567385	Identifier	m_allHadIps		567197	0					
ANR	567386	CompoundStatement		38:47:1179:1179	567197	1					
ANR	567387	ReturnStatement	return true ;	182:2:5070:5081	567197	0	True				
ANR	567388	Identifier	true		567197	0					
ANR	567389	ReturnStatement	return false ;	185:1:5088:5100	567197	11	True				
ANR	567390	Identifier	false		567197	0					
ANR	567391	ReturnType	bool		567197	1					
ANR	567392	Identifier	HADStateMachine :: isHardConfigurationNeeded		567197	2					
ANR	567393	ParameterList			567197	3					
ANR	567394	CFGEntryNode	ENTRY		567197		True				
ANR	567395	CFGExitNode	EXIT		567197		True				
ANR	567396	Symbol	m_allHadIps		567197						
ANR	567397	Symbol	"utilNoParameterError ( ""HAD_LIST"" , ""HAD"" ) . Value"		567197						
ANR	567398	Symbol	NULL		567197						
ANR	567399	Symbol	m_allHadIps . identical		567197						
ANR	567400	Symbol	daemonString		567197						
ANR	567401	Symbol	utilNoParameterError		567197						
ANR	567402	Symbol	false		567197						
ANR	567403	Symbol	param_boolean		567197						
ANR	567404	Symbol	m_controlleeName		567197						
ANR	567405	Symbol	otherHadIps		567197						
ANR	567406	Symbol	controllee		567197						
ANR	567407	Symbol	m_usePrimary		567197						
ANR	567408	Symbol	allHadIps		567197						
ANR	567409	Symbol	param		567197						
ANR	567410	Symbol	tmp		567197						
ANR	567411	Symbol	m_selfId		567197						
ANR	567412	Symbol	selfId		567197						
ANR	567413	Symbol	true		567197						
ANR	567414	Symbol	DT_NEGOTIATOR		567197						
ANR	567415	Symbol	strcasecmp		567197						
ANR	567416	Function	HADStateMachine :: softReconfigure	188:0:5105:7142							
ANR	567417	FunctionDef	HADStateMachine :: softReconfigure ()		567416	0					
ANR	567418	CompoundStatement		190:0:5148:7142	567416	0					
ANR	567419	ExpressionStatement	m_standAloneMode = false	192:1:5226:5259	567416	0	True				
ANR	567420	AssignmentExpression	m_standAloneMode = false		567416	0		=			
ANR	567421	Identifier	m_standAloneMode		567416	0					
ANR	567422	Identifier	false		567416	1					
ANR	567423	ExpressionStatement	m_connectionTimeout = DEFAULT_SEND_COMMAND_TIMEOUT	193:1:5262:5318	567416	1	True				
ANR	567424	AssignmentExpression	m_connectionTimeout = DEFAULT_SEND_COMMAND_TIMEOUT		567416	0		=			
ANR	567425	Identifier	m_connectionTimeout		567416	0					
ANR	567426	Identifier	DEFAULT_SEND_COMMAND_TIMEOUT		567416	1					
ANR	567427	ExpressionStatement	m_hadInterval = - 1	194:1:5321:5351	567416	2	True				
ANR	567428	AssignmentExpression	m_hadInterval = - 1		567416	0		=			
ANR	567429	Identifier	m_hadInterval		567416	0					
ANR	567430	UnaryOperationExpression	- 1		567416	1					
ANR	567431	UnaryOperator	-		567416	0					
ANR	567432	PrimaryExpression	1		567416	1					
ANR	567433	ExpressionStatement	m_useReplication = false	195:1:5354:5387	567416	3	True				
ANR	567434	AssignmentExpression	m_useReplication = false		567416	0		=			
ANR	567435	Identifier	m_useReplication		567416	0					
ANR	567436	Identifier	false		567416	1					
ANR	567437	ExpressionStatement	m_updateCollectorInterval = - 1	196:1:5390:5420	567416	4	True				
ANR	567438	AssignmentExpression	m_updateCollectorInterval = - 1		567416	0		=			
ANR	567439	Identifier	m_updateCollectorInterval		567416	0					
ANR	567440	UnaryOperationExpression	- 1		567416	1					
ANR	567441	UnaryOperator	-		567416	0					
ANR	567442	PrimaryExpression	1		567416	1					
ANR	567443	IfStatement	if ( m_replicationDaemonSinfulString != NULL )		567416	5					
ANR	567444	Condition	m_replicationDaemonSinfulString != NULL	198:5:5428:5466	567416	0	True				
ANR	567445	EqualityExpression	m_replicationDaemonSinfulString != NULL		567416	0		!=			
ANR	567446	Identifier	m_replicationDaemonSinfulString		567416	0					
ANR	567447	Identifier	NULL		567416	1					
ANR	567448	CompoundStatement		9:47:321:321	567416	1					
ANR	567449	ExpressionStatement	free ( m_replicationDaemonSinfulString )	199:2:5474:5513	567416	0	True				
ANR	567450	CallExpression	free ( m_replicationDaemonSinfulString )		567416	0					
ANR	567451	Callee	free		567416	0					
ANR	567452	Identifier	free		567416	0					
ANR	567453	ArgumentList	m_replicationDaemonSinfulString		567416	1					
ANR	567454	Argument	m_replicationDaemonSinfulString		567416	0					
ANR	567455	Identifier	m_replicationDaemonSinfulString		567416	0					
ANR	567456	ExpressionStatement	m_replicationDaemonSinfulString = NULL	200:2:5517:5555	567416	1	True				
ANR	567457	AssignmentExpression	m_replicationDaemonSinfulString = NULL		567416	0		=			
ANR	567458	Identifier	m_replicationDaemonSinfulString		567416	0					
ANR	567459	Identifier	NULL		567416	1					
ANR	567460	IdentifierDeclStatement	char * buffer = NULL ;	204:1:5582:5602	567416	6	True				
ANR	567461	IdentifierDecl	* buffer = NULL		567416	0					
ANR	567462	IdentifierDeclType	char *		567416	0					
ANR	567463	Identifier	buffer		567416	1					
ANR	567464	AssignmentExpression	* buffer = NULL		567416	2		=			
ANR	567465	Identifier	NULL		567416	0					
ANR	567466	Identifier	NULL		567416	1					
ANR	567467	IdentifierDeclStatement	const char * tmp ;	205:1:5605:5620	567416	7	True				
ANR	567468	IdentifierDecl	* tmp		567416	0					
ANR	567469	IdentifierDeclType	const char *		567416	0					
ANR	567470	Identifier	tmp		567416	1					
ANR	567471	ExpressionStatement	buffer = my_username ( )	208:8:5681:5703	567416	8	True				
ANR	567472	AssignmentExpression	buffer = my_username ( )		567416	0		=			
ANR	567473	Identifier	buffer		567416	0					
ANR	567474	CallExpression	my_username ( )		567416	1					
ANR	567475	Callee	my_username		567416	0					
ANR	567476	Identifier	my_username		567416	0					
ANR	567477	ArgumentList			567416	1					
ANR	567478	ExpressionStatement	"tmp = buffer ? buffer : ""UNKNOWN"""	209:8:5713:5746	567416	9	True				
ANR	567479	AssignmentExpression	"tmp = buffer ? buffer : ""UNKNOWN"""		567416	0		=			
ANR	567480	Identifier	tmp		567416	0					
ANR	567481	ConditionalExpression	"buffer ? buffer : ""UNKNOWN"""		567416	1					
ANR	567482	Condition	buffer		567416	0					
ANR	567483	Identifier	buffer		567416	0					
ANR	567484	Identifier	buffer		567416	1					
ANR	567485	PrimaryExpression	"""UNKNOWN"""		567416	2					
ANR	567486	ExpressionStatement	"m_name . sprintf ( ""%s@%s"" , tmp , my_full_hostname ( ) )"	210:8:5756:5807	567416	10	True				
ANR	567487	CallExpression	"m_name . sprintf ( ""%s@%s"" , tmp , my_full_hostname ( ) )"		567416	0					
ANR	567488	Callee	m_name . sprintf		567416	0					
ANR	567489	MemberAccess	m_name . sprintf		567416	0					
ANR	567490	Identifier	m_name		567416	0					
ANR	567491	Identifier	sprintf		567416	1					
ANR	567492	ArgumentList	"""%s@%s"""		567416	1					
ANR	567493	Argument	"""%s@%s"""		567416	0					
ANR	567494	PrimaryExpression	"""%s@%s"""		567416	0					
ANR	567495	Argument	tmp		567416	1					
ANR	567496	Identifier	tmp		567416	0					
ANR	567497	Argument	my_full_hostname ( )		567416	2					
ANR	567498	CallExpression	my_full_hostname ( )		567416	0					
ANR	567499	Callee	my_full_hostname		567416	0					
ANR	567500	Identifier	my_full_hostname		567416	0					
ANR	567501	ArgumentList			567416	1					
ANR	567502	IfStatement	if ( buffer )		567416	11					
ANR	567503	Condition	buffer	211:6:5815:5820	567416	0	True				
ANR	567504	Identifier	buffer		567416	0					
ANR	567505	CompoundStatement		22:15:675:675	567416	1					
ANR	567506	ExpressionStatement	free ( buffer )	212:2:5828:5842	567416	0	True				
ANR	567507	CallExpression	free ( buffer )		567416	0					
ANR	567508	Callee	free		567416	0					
ANR	567509	Identifier	free		567416	0					
ANR	567510	ArgumentList	buffer		567416	1					
ANR	567511	Argument	buffer		567416	0					
ANR	567512	Identifier	buffer		567416	0					
ANR	567513	ExpressionStatement	"buffer = param ( ""HAD_STAND_ALONE_DEBUG"" )"	215:1:5849:5890	567416	12	True				
ANR	567514	AssignmentExpression	"buffer = param ( ""HAD_STAND_ALONE_DEBUG"" )"		567416	0		=			
ANR	567515	Identifier	buffer		567416	0					
ANR	567516	CallExpression	"param ( ""HAD_STAND_ALONE_DEBUG"" )"		567416	1					
ANR	567517	Callee	param		567416	0					
ANR	567518	Identifier	param		567416	0					
ANR	567519	ArgumentList	"""HAD_STAND_ALONE_DEBUG"""		567416	1					
ANR	567520	Argument	"""HAD_STAND_ALONE_DEBUG"""		567416	0					
ANR	567521	PrimaryExpression	"""HAD_STAND_ALONE_DEBUG"""		567416	0					
ANR	567522	IfStatement	if ( buffer )		567416	13					
ANR	567523	Condition	buffer	217:8:5901:5906	567416	0	True				
ANR	567524	Identifier	buffer		567416	0					
ANR	567525	CompoundStatement		28:16:760:760	567416	1					
ANR	567526	ExpressionStatement	m_standAloneMode = false	220:2:6017:6041	567416	0	True				
ANR	567527	AssignmentExpression	m_standAloneMode = false		567416	0		=			
ANR	567528	Identifier	m_standAloneMode		567416	0					
ANR	567529	Identifier	false		567416	1					
ANR	567530	ExpressionStatement	free ( buffer )	222:8:6087:6101	567416	1	True				
ANR	567531	CallExpression	free ( buffer )		567416	0					
ANR	567532	Callee	free		567416	0					
ANR	567533	Identifier	free		567416	0					
ANR	567534	ArgumentList	buffer		567416	1					
ANR	567535	Argument	buffer		567416	0					
ANR	567536	Identifier	buffer		567416	0					
ANR	567537	ExpressionStatement	"m_connectionTimeout = param_integer ( ""HAD_CONNECTION_TIMEOUT"" , DEFAULT_SEND_COMMAND_TIMEOUT , 0 )"	225:1:6111:6225	567416	14	True				
ANR	567538	AssignmentExpression	"m_connectionTimeout = param_integer ( ""HAD_CONNECTION_TIMEOUT"" , DEFAULT_SEND_COMMAND_TIMEOUT , 0 )"		567416	0		=			
ANR	567539	Identifier	m_connectionTimeout		567416	0					
ANR	567540	CallExpression	"param_integer ( ""HAD_CONNECTION_TIMEOUT"" , DEFAULT_SEND_COMMAND_TIMEOUT , 0 )"		567416	1					
ANR	567541	Callee	param_integer		567416	0					
ANR	567542	Identifier	param_integer		567416	0					
ANR	567543	ArgumentList	"""HAD_CONNECTION_TIMEOUT"""		567416	1					
ANR	567544	Argument	"""HAD_CONNECTION_TIMEOUT"""		567416	0					
ANR	567545	PrimaryExpression	"""HAD_CONNECTION_TIMEOUT"""		567416	0					
ANR	567546	Argument	DEFAULT_SEND_COMMAND_TIMEOUT		567416	1					
ANR	567547	Identifier	DEFAULT_SEND_COMMAND_TIMEOUT		567416	0					
ANR	567548	Argument	0		567416	2					
ANR	567549	PrimaryExpression	0		567416	0					
ANR	567550	IdentifierDeclStatement	int safetyFactor = 1 ;	230:4:6276:6296	567416	15	True				
ANR	567551	IdentifierDecl	safetyFactor = 1		567416	0					
ANR	567552	IdentifierDeclType	int		567416	0					
ANR	567553	Identifier	safetyFactor		567416	1					
ANR	567554	AssignmentExpression	safetyFactor = 1		567416	2		=			
ANR	567555	Identifier	safetyFactor		567416	0					
ANR	567556	PrimaryExpression	1		567416	1					
ANR	567557	IdentifierDeclStatement	int timeoutNumber = 2 ;	235:4:6413:6434	567416	16	True				
ANR	567558	IdentifierDecl	timeoutNumber = 2		567416	0					
ANR	567559	IdentifierDeclType	int		567416	0					
ANR	567560	Identifier	timeoutNumber		567416	1					
ANR	567561	AssignmentExpression	timeoutNumber = 2		567416	2		=			
ANR	567562	Identifier	timeoutNumber		567416	0					
ANR	567563	PrimaryExpression	2		567416	1					
ANR	567564	IdentifierDeclStatement	int time_to_send_all = ( m_connectionTimeout * timeoutNumber ) ;	237:4:6441:6499	567416	17	True				
ANR	567565	IdentifierDecl	time_to_send_all = ( m_connectionTimeout * timeoutNumber )		567416	0					
ANR	567566	IdentifierDeclType	int		567416	0					
ANR	567567	Identifier	time_to_send_all		567416	1					
ANR	567568	AssignmentExpression	time_to_send_all = ( m_connectionTimeout * timeoutNumber )		567416	2		=			
ANR	567569	Identifier	time_to_send_all		567416	0					
ANR	567570	MultiplicativeExpression	m_connectionTimeout * timeoutNumber		567416	1		*			
ANR	567571	Identifier	m_connectionTimeout		567416	0					
ANR	567572	Identifier	timeoutNumber		567416	1					
ANR	567573	ExpressionStatement	time_to_send_all *= ( m_otherHadIps . number ( ) + 1 )	238:4:6505:6553	567416	18	True				
ANR	567574	AssignmentExpression	time_to_send_all *= ( m_otherHadIps . number ( ) + 1 )		567416	0		*=			
ANR	567575	Identifier	time_to_send_all		567416	0					
ANR	567576	AdditiveExpression	m_otherHadIps . number ( ) + 1		567416	1		+			
ANR	567577	CallExpression	m_otherHadIps . number ( )		567416	0					
ANR	567578	Callee	m_otherHadIps . number		567416	0					
ANR	567579	MemberAccess	m_otherHadIps . number		567416	0					
ANR	567580	Identifier	m_otherHadIps		567416	0					
ANR	567581	Identifier	number		567416	1					
ANR	567582	ArgumentList			567416	1					
ANR	567583	PrimaryExpression	1		567416	1					
ANR	567584	ExpressionStatement	m_hadInterval = ( time_to_send_all + safetyFactor ) * ( MESSAGES_PER_INTERVAL_FACTOR )	240:1:6578:6677	567416	19	True				
ANR	567585	AssignmentExpression	m_hadInterval = ( time_to_send_all + safetyFactor ) * ( MESSAGES_PER_INTERVAL_FACTOR )		567416	0		=			
ANR	567586	Identifier	m_hadInterval		567416	0					
ANR	567587	MultiplicativeExpression	( time_to_send_all + safetyFactor ) * ( MESSAGES_PER_INTERVAL_FACTOR )		567416	1		*			
ANR	567588	AdditiveExpression	time_to_send_all + safetyFactor		567416	0		+			
ANR	567589	Identifier	time_to_send_all		567416	0					
ANR	567590	Identifier	safetyFactor		567416	1					
ANR	567591	Identifier	MESSAGES_PER_INTERVAL_FACTOR		567416	1					
ANR	567592	ExpressionStatement	"m_useReplication = param_boolean ( ""HAD_USE_REPLICATION"" , m_useReplication )"	244:1:6730:6803	567416	20	True				
ANR	567593	AssignmentExpression	"m_useReplication = param_boolean ( ""HAD_USE_REPLICATION"" , m_useReplication )"		567416	0		=			
ANR	567594	Identifier	m_useReplication		567416	0					
ANR	567595	CallExpression	"param_boolean ( ""HAD_USE_REPLICATION"" , m_useReplication )"		567416	1					
ANR	567596	Callee	param_boolean		567416	0					
ANR	567597	Identifier	param_boolean		567416	0					
ANR	567598	ArgumentList	"""HAD_USE_REPLICATION"""		567416	1					
ANR	567599	Argument	"""HAD_USE_REPLICATION"""		567416	0					
ANR	567600	PrimaryExpression	"""HAD_USE_REPLICATION"""		567416	0					
ANR	567601	Argument	m_useReplication		567416	1					
ANR	567602	Identifier	m_useReplication		567416	0					
ANR	567603	ExpressionStatement	setReplicationDaemonSinfulString ( )	245:4:6809:6844	567416	21	True				
ANR	567604	CallExpression	setReplicationDaemonSinfulString ( )		567416	0					
ANR	567605	Callee	setReplicationDaemonSinfulString		567416	0					
ANR	567606	Identifier	setReplicationDaemonSinfulString		567416	0					
ANR	567607	ArgumentList			567416	1					
ANR	567608	ExpressionStatement	"dprintf ( D_ALWAYS , ""HADStateMachine::softReconfigure classad information\\n"" )"	247:1:6848:6926	567416	22	True				
ANR	567609	CallExpression	"dprintf ( D_ALWAYS , ""HADStateMachine::softReconfigure classad information\\n"" )"		567416	0					
ANR	567610	Callee	dprintf		567416	0					
ANR	567611	Identifier	dprintf		567416	0					
ANR	567612	ArgumentList	D_ALWAYS		567416	1					
ANR	567613	Argument	D_ALWAYS		567416	0					
ANR	567614	Identifier	D_ALWAYS		567416	0					
ANR	567615	Argument	"""HADStateMachine::softReconfigure classad information\\n"""		567416	1					
ANR	567616	PrimaryExpression	"""HADStateMachine::softReconfigure classad information\\n"""		567416	0					
ANR	567617	ExpressionStatement	initializeClassAd ( )	249:4:6932:6952	567416	23	True				
ANR	567618	CallExpression	initializeClassAd ( )		567416	0					
ANR	567619	Callee	initializeClassAd		567416	0					
ANR	567620	Identifier	initializeClassAd		567416	0					
ANR	567621	ArgumentList			567416	1					
ANR	567622	ExpressionStatement	"m_updateCollectorInterval = param_integer ( ""HAD_UPDATE_INTERVAL"" , DEFAULT_HAD_UPDATE_INTERVAL )"	250:4:6958:7098	567416	24	True				
ANR	567623	AssignmentExpression	"m_updateCollectorInterval = param_integer ( ""HAD_UPDATE_INTERVAL"" , DEFAULT_HAD_UPDATE_INTERVAL )"		567416	0		=			
ANR	567624	Identifier	m_updateCollectorInterval		567416	0					
ANR	567625	CallExpression	"param_integer ( ""HAD_UPDATE_INTERVAL"" , DEFAULT_HAD_UPDATE_INTERVAL )"		567416	1					
ANR	567626	Callee	param_integer		567416	0					
ANR	567627	Identifier	param_integer		567416	0					
ANR	567628	ArgumentList	"""HAD_UPDATE_INTERVAL"""		567416	1					
ANR	567629	Argument	"""HAD_UPDATE_INTERVAL"""		567416	0					
ANR	567630	PrimaryExpression	"""HAD_UPDATE_INTERVAL"""		567416	0					
ANR	567631	Argument	DEFAULT_HAD_UPDATE_INTERVAL		567416	1					
ANR	567632	Identifier	DEFAULT_HAD_UPDATE_INTERVAL		567416	0					
ANR	567633	ExpressionStatement	printParamsInformation ( )	252:1:7101:7125	567416	25	True				
ANR	567634	CallExpression	printParamsInformation ( )		567416	0					
ANR	567635	Callee	printParamsInformation		567416	0					
ANR	567636	Identifier	printParamsInformation		567416	0					
ANR	567637	ArgumentList			567416	1					
ANR	567638	ReturnStatement	return TRUE ;	254:1:7129:7140	567416	26	True				
ANR	567639	Identifier	TRUE		567416	0					
ANR	567640	ReturnType	int		567416	1					
ANR	567641	Identifier	HADStateMachine :: softReconfigure		567416	2					
ANR	567642	ParameterList			567416	3					
ANR	567643	CFGEntryNode	ENTRY		567416		True				
ANR	567644	CFGExitNode	EXIT		567416		True				
ANR	567645	Symbol	DEFAULT_HAD_UPDATE_INTERVAL		567416						
ANR	567646	Symbol	safetyFactor		567416						
ANR	567647	Symbol	m_otherHadIps		567416						
ANR	567648	Symbol	m_replicationDaemonSinfulString		567416						
ANR	567649	Symbol	my_full_hostname		567416						
ANR	567650	Symbol	m_standAloneMode		567416						
ANR	567651	Symbol	param		567416						
ANR	567652	Symbol	m_hadInterval		567416						
ANR	567653	Symbol	tmp		567416						
ANR	567654	Symbol	MESSAGES_PER_INTERVAL_FACTOR		567416						
ANR	567655	Symbol	buffer		567416						
ANR	567656	Symbol	time_to_send_all		567416						
ANR	567657	Symbol	NULL		567416						
ANR	567658	Symbol	false		567416						
ANR	567659	Symbol	D_ALWAYS		567416						
ANR	567660	Symbol	TRUE		567416						
ANR	567661	Symbol	param_boolean		567416						
ANR	567662	Symbol	m_otherHadIps . number		567416						
ANR	567663	Symbol	my_username		567416						
ANR	567664	Symbol	timeoutNumber		567416						
ANR	567665	Symbol	m_name		567416						
ANR	567666	Symbol	m_updateCollectorInterval		567416						
ANR	567667	Symbol	param_integer		567416						
ANR	567668	Symbol	m_useReplication		567416						
ANR	567669	Symbol	m_connectionTimeout		567416						
ANR	567670	Symbol	DEFAULT_SEND_COMMAND_TIMEOUT		567416						
ANR	567671	Function	HADStateMachine :: initialize	260:0:7222:7639							
ANR	567672	FunctionDef	HADStateMachine :: initialize ()		567671	0					
ANR	567673	CompoundStatement		262:0:7261:7639	567671	0					
ANR	567674	ExpressionStatement	reinitialize ( )	263:4:7267:7282	567671	0	True				
ANR	567675	CallExpression	reinitialize ( )		567671	0					
ANR	567676	Callee	reinitialize		567671	0					
ANR	567677	Identifier	reinitialize		567671	0					
ANR	567678	ArgumentList			567671	1					
ANR	567679	ExpressionStatement	"daemonCore -> Register_Command ( HAD_ALIVE_CMD , ""ALIVE command"" , ( CommandHandlercpp ) & HADStateMachine :: commandHandlerHad , ""commandHandler"" , ( Service * ) this , DAEMON )"	264:4:7288:7457	567671	1	True				
ANR	567680	CallExpression	"daemonCore -> Register_Command ( HAD_ALIVE_CMD , ""ALIVE command"" , ( CommandHandlercpp ) & HADStateMachine :: commandHandlerHad , ""commandHandler"" , ( Service * ) this , DAEMON )"		567671	0					
ANR	567681	Callee	daemonCore -> Register_Command		567671	0					
ANR	567682	PtrMemberAccess	daemonCore -> Register_Command		567671	0					
ANR	567683	Identifier	daemonCore		567671	0					
ANR	567684	Identifier	Register_Command		567671	1					
ANR	567685	ArgumentList	HAD_ALIVE_CMD		567671	1					
ANR	567686	Argument	HAD_ALIVE_CMD		567671	0					
ANR	567687	Identifier	HAD_ALIVE_CMD		567671	0					
ANR	567688	Argument	"""ALIVE command"""		567671	1					
ANR	567689	PrimaryExpression	"""ALIVE command"""		567671	0					
ANR	567690	Argument	( CommandHandlercpp ) & HADStateMachine :: commandHandlerHad		567671	2					
ANR	567691	CastExpression	( CommandHandlercpp ) & HADStateMachine :: commandHandlerHad		567671	0					
ANR	567692	CastTarget	CommandHandlercpp		567671	0					
ANR	567693	UnaryOperationExpression	& HADStateMachine :: commandHandlerHad		567671	1					
ANR	567694	UnaryOperator	&		567671	0					
ANR	567695	Identifier	HADStateMachine :: commandHandlerHad		567671	1					
ANR	567696	Argument	"""commandHandler"""		567671	3					
ANR	567697	PrimaryExpression	"""commandHandler"""		567671	0					
ANR	567698	Argument	( Service * ) this		567671	4					
ANR	567699	CastExpression	( Service * ) this		567671	0					
ANR	567700	CastTarget	Service *		567671	0					
ANR	567701	Identifier	this		567671	1					
ANR	567702	Argument	DAEMON		567671	5					
ANR	567703	Identifier	DAEMON		567671	0					
ANR	567704	ExpressionStatement	"daemonCore -> Register_Command ( HAD_SEND_ID_CMD , ""SEND ID command"" , ( CommandHandlercpp ) & HADStateMachine :: commandHandlerHad , ""commandHandler"" , ( Service * ) this , DAEMON )"	269:4:7464:7637	567671	2	True				
ANR	567705	CallExpression	"daemonCore -> Register_Command ( HAD_SEND_ID_CMD , ""SEND ID command"" , ( CommandHandlercpp ) & HADStateMachine :: commandHandlerHad , ""commandHandler"" , ( Service * ) this , DAEMON )"		567671	0					
ANR	567706	Callee	daemonCore -> Register_Command		567671	0					
ANR	567707	PtrMemberAccess	daemonCore -> Register_Command		567671	0					
ANR	567708	Identifier	daemonCore		567671	0					
ANR	567709	Identifier	Register_Command		567671	1					
ANR	567710	ArgumentList	HAD_SEND_ID_CMD		567671	1					
ANR	567711	Argument	HAD_SEND_ID_CMD		567671	0					
ANR	567712	Identifier	HAD_SEND_ID_CMD		567671	0					
ANR	567713	Argument	"""SEND ID command"""		567671	1					
ANR	567714	PrimaryExpression	"""SEND ID command"""		567671	0					
ANR	567715	Argument	( CommandHandlercpp ) & HADStateMachine :: commandHandlerHad		567671	2					
ANR	567716	CastExpression	( CommandHandlercpp ) & HADStateMachine :: commandHandlerHad		567671	0					
ANR	567717	CastTarget	CommandHandlercpp		567671	0					
ANR	567718	UnaryOperationExpression	& HADStateMachine :: commandHandlerHad		567671	1					
ANR	567719	UnaryOperator	&		567671	0					
ANR	567720	Identifier	HADStateMachine :: commandHandlerHad		567671	1					
ANR	567721	Argument	"""commandHandler"""		567671	3					
ANR	567722	PrimaryExpression	"""commandHandler"""		567671	0					
ANR	567723	Argument	( Service * ) this		567671	4					
ANR	567724	CastExpression	( Service * ) this		567671	0					
ANR	567725	CastTarget	Service *		567671	0					
ANR	567726	Identifier	this		567671	1					
ANR	567727	Argument	DAEMON		567671	5					
ANR	567728	Identifier	DAEMON		567671	0					
ANR	567729	ReturnType	void		567671	1					
ANR	567730	Identifier	HADStateMachine :: initialize		567671	2					
ANR	567731	ParameterList			567671	3					
ANR	567732	CFGEntryNode	ENTRY		567671		True				
ANR	567733	CFGExitNode	EXIT		567671		True				
ANR	567734	Symbol	daemonCore		567671						
ANR	567735	Symbol	this		567671						
ANR	567736	Symbol	& HADStateMachine :: commandHandlerHad		567671						
ANR	567737	Symbol	DAEMON		567671						
ANR	567738	Symbol	HAD_ALIVE_CMD		567671						
ANR	567739	Symbol	HAD_SEND_ID_CMD		567671						
ANR	567740	Function	HADStateMachine :: initializeClassAd	275:0:7642:8767							
ANR	567741	FunctionDef	HADStateMachine :: initializeClassAd ()		567740	0					
ANR	567742	CompoundStatement		277:0:7688:8767	567740	0					
ANR	567743	IdentifierDeclStatement	char * buffer ;	278:1:7691:7703	567740	0	True				
ANR	567744	IdentifierDecl	* buffer		567740	0					
ANR	567745	IdentifierDeclType	char *		567740	0					
ANR	567746	Identifier	buffer		567740	1					
ANR	567747	ExpressionStatement	m_classAd . Clear ( )	280:1:7707:7724	567740	1	True				
ANR	567748	CallExpression	m_classAd . Clear ( )		567740	0					
ANR	567749	Callee	m_classAd . Clear		567740	0					
ANR	567750	MemberAccess	m_classAd . Clear		567740	0					
ANR	567751	Identifier	m_classAd		567740	0					
ANR	567752	Identifier	Clear		567740	1					
ANR	567753	ArgumentList			567740	1					
ANR	567754	ExpressionStatement	m_classAd . SetMyTypeName ( HAD_ADTYPE )	282:4:7731:7766	567740	2	True				
ANR	567755	CallExpression	m_classAd . SetMyTypeName ( HAD_ADTYPE )		567740	0					
ANR	567756	Callee	m_classAd . SetMyTypeName		567740	0					
ANR	567757	MemberAccess	m_classAd . SetMyTypeName		567740	0					
ANR	567758	Identifier	m_classAd		567740	0					
ANR	567759	Identifier	SetMyTypeName		567740	1					
ANR	567760	ArgumentList	HAD_ADTYPE		567740	1					
ANR	567761	Argument	HAD_ADTYPE		567740	0					
ANR	567762	Identifier	HAD_ADTYPE		567740	0					
ANR	567763	ExpressionStatement	"m_classAd . SetTargetTypeName ( """" )"	283:4:7772:7803	567740	3	True				
ANR	567764	CallExpression	"m_classAd . SetTargetTypeName ( """" )"		567740	0					
ANR	567765	Callee	m_classAd . SetTargetTypeName		567740	0					
ANR	567766	MemberAccess	m_classAd . SetTargetTypeName		567740	0					
ANR	567767	Identifier	m_classAd		567740	0					
ANR	567768	Identifier	SetTargetTypeName		567740	1					
ANR	567769	ArgumentList	""""""		567740	1					
ANR	567770	Argument	""""""		567740	0					
ANR	567771	PrimaryExpression	""""""		567740	0					
ANR	567772	IdentifierDeclStatement	MyString line ;	285:4:7810:7823	567740	4	True				
ANR	567773	IdentifierDecl	line		567740	0					
ANR	567774	IdentifierDeclType	MyString		567740	0					
ANR	567775	Identifier	line		567740	1					
ANR	567776	ExpressionStatement	"m_classAd . Assign ( ATTR_NAME , m_name )"	288:4:7897:7934	567740	5	True				
ANR	567777	CallExpression	"m_classAd . Assign ( ATTR_NAME , m_name )"		567740	0					
ANR	567778	Callee	m_classAd . Assign		567740	0					
ANR	567779	MemberAccess	m_classAd . Assign		567740	0					
ANR	567780	Identifier	m_classAd		567740	0					
ANR	567781	Identifier	Assign		567740	1					
ANR	567782	ArgumentList	ATTR_NAME		567740	1					
ANR	567783	Argument	ATTR_NAME		567740	0					
ANR	567784	Identifier	ATTR_NAME		567740	0					
ANR	567785	Argument	m_name		567740	1					
ANR	567786	Identifier	m_name		567740	0					
ANR	567787	ExpressionStatement	"m_classAd . Assign ( ATTR_MY_ADDRESS , daemonCore -> InfoCommandSinfulString ( ) )"	289:4:7940:8021	567740	6	True				
ANR	567788	CallExpression	"m_classAd . Assign ( ATTR_MY_ADDRESS , daemonCore -> InfoCommandSinfulString ( ) )"		567740	0					
ANR	567789	Callee	m_classAd . Assign		567740	0					
ANR	567790	MemberAccess	m_classAd . Assign		567740	0					
ANR	567791	Identifier	m_classAd		567740	0					
ANR	567792	Identifier	Assign		567740	1					
ANR	567793	ArgumentList	ATTR_MY_ADDRESS		567740	1					
ANR	567794	Argument	ATTR_MY_ADDRESS		567740	0					
ANR	567795	Identifier	ATTR_MY_ADDRESS		567740	0					
ANR	567796	Argument	daemonCore -> InfoCommandSinfulString ( )		567740	1					
ANR	567797	CallExpression	daemonCore -> InfoCommandSinfulString ( )		567740	0					
ANR	567798	Callee	daemonCore -> InfoCommandSinfulString		567740	0					
ANR	567799	PtrMemberAccess	daemonCore -> InfoCommandSinfulString		567740	0					
ANR	567800	Identifier	daemonCore		567740	0					
ANR	567801	Identifier	InfoCommandSinfulString		567740	1					
ANR	567802	ArgumentList			567740	1					
ANR	567803	ExpressionStatement	"m_classAd . Assign ( ATTR_HAD_IS_ACTIVE , false )"	293:4:8093:8138	567740	7	True				
ANR	567804	CallExpression	"m_classAd . Assign ( ATTR_HAD_IS_ACTIVE , false )"		567740	0					
ANR	567805	Callee	m_classAd . Assign		567740	0					
ANR	567806	MemberAccess	m_classAd . Assign		567740	0					
ANR	567807	Identifier	m_classAd		567740	0					
ANR	567808	Identifier	Assign		567740	1					
ANR	567809	ArgumentList	ATTR_HAD_IS_ACTIVE		567740	1					
ANR	567810	Argument	ATTR_HAD_IS_ACTIVE		567740	0					
ANR	567811	Identifier	ATTR_HAD_IS_ACTIVE		567740	0					
ANR	567812	Argument	false		567740	1					
ANR	567813	Identifier	false		567740	0					
ANR	567814	ExpressionStatement	buffer = m_allHadIps . print_to_string ( )	296:1:8181:8220	567740	8	True				
ANR	567815	AssignmentExpression	buffer = m_allHadIps . print_to_string ( )		567740	0		=			
ANR	567816	Identifier	buffer		567740	0					
ANR	567817	CallExpression	m_allHadIps . print_to_string ( )		567740	1					
ANR	567818	Callee	m_allHadIps . print_to_string		567740	0					
ANR	567819	MemberAccess	m_allHadIps . print_to_string		567740	0					
ANR	567820	Identifier	m_allHadIps		567740	0					
ANR	567821	Identifier	print_to_string		567740	1					
ANR	567822	ArgumentList			567740	1					
ANR	567823	IfStatement	if ( ! buffer )		567740	9					
ANR	567824	Condition	! buffer	297:6:8228:8234	567740	0	True				
ANR	567825	UnaryOperationExpression	! buffer		567740	0					
ANR	567826	UnaryOperator	!		567740	0					
ANR	567827	Identifier	buffer		567740	1					
ANR	567828	CompoundStatement		21:16:549:549	567740	1					
ANR	567829	ExpressionStatement	"m_classAd . Assign ( ATTR_HAD_LIST , ""UNKNOWN"" )"	298:2:8242:8286	567740	0	True				
ANR	567830	CallExpression	"m_classAd . Assign ( ATTR_HAD_LIST , ""UNKNOWN"" )"		567740	0					
ANR	567831	Callee	m_classAd . Assign		567740	0					
ANR	567832	MemberAccess	m_classAd . Assign		567740	0					
ANR	567833	Identifier	m_classAd		567740	0					
ANR	567834	Identifier	Assign		567740	1					
ANR	567835	ArgumentList	ATTR_HAD_LIST		567740	1					
ANR	567836	Argument	ATTR_HAD_LIST		567740	0					
ANR	567837	Identifier	ATTR_HAD_LIST		567740	0					
ANR	567838	Argument	"""UNKNOWN"""		567740	1					
ANR	567839	PrimaryExpression	"""UNKNOWN"""		567740	0					
ANR	567840	ElseStatement	else		567740	0					
ANR	567841	CompoundStatement		24:6:608:608	567740	0					
ANR	567842	ExpressionStatement	"m_classAd . Assign ( ATTR_HAD_LIST , buffer )"	301:2:8301:8342	567740	0	True				
ANR	567843	CallExpression	"m_classAd . Assign ( ATTR_HAD_LIST , buffer )"		567740	0					
ANR	567844	Callee	m_classAd . Assign		567740	0					
ANR	567845	MemberAccess	m_classAd . Assign		567740	0					
ANR	567846	Identifier	m_classAd		567740	0					
ANR	567847	Identifier	Assign		567740	1					
ANR	567848	ArgumentList	ATTR_HAD_LIST		567740	1					
ANR	567849	Argument	ATTR_HAD_LIST		567740	0					
ANR	567850	Identifier	ATTR_HAD_LIST		567740	0					
ANR	567851	Argument	buffer		567740	1					
ANR	567852	Identifier	buffer		567740	0					
ANR	567853	ExpressionStatement	free ( buffer )	302:2:8346:8360	567740	1	True				
ANR	567854	CallExpression	free ( buffer )		567740	0					
ANR	567855	Callee	free		567740	0					
ANR	567856	Identifier	free		567740	0					
ANR	567857	ArgumentList	buffer		567740	1					
ANR	567858	Argument	buffer		567740	0					
ANR	567859	Identifier	buffer		567740	0					
ANR	567860	ExpressionStatement	"m_classAd . Assign ( ATTR_HAD_CONTROLLEE_NAME , m_controlleeName )"	306:1:8401:8463	567740	10	True				
ANR	567861	CallExpression	"m_classAd . Assign ( ATTR_HAD_CONTROLLEE_NAME , m_controlleeName )"		567740	0					
ANR	567862	Callee	m_classAd . Assign		567740	0					
ANR	567863	MemberAccess	m_classAd . Assign		567740	0					
ANR	567864	Identifier	m_classAd		567740	0					
ANR	567865	Identifier	Assign		567740	1					
ANR	567866	ArgumentList	ATTR_HAD_CONTROLLEE_NAME		567740	1					
ANR	567867	Argument	ATTR_HAD_CONTROLLEE_NAME		567740	0					
ANR	567868	Identifier	ATTR_HAD_CONTROLLEE_NAME		567740	0					
ANR	567869	Argument	m_controlleeName		567740	1					
ANR	567870	Identifier	m_controlleeName		567740	0					
ANR	567871	ExpressionStatement	"m_classAd . Assign ( ATTR_HAD_INDEX , m_allHadIps . number ( ) - 1 - m_selfId )"	309:1:8515:8586	567740	11	True				
ANR	567872	CallExpression	"m_classAd . Assign ( ATTR_HAD_INDEX , m_allHadIps . number ( ) - 1 - m_selfId )"		567740	0					
ANR	567873	Callee	m_classAd . Assign		567740	0					
ANR	567874	MemberAccess	m_classAd . Assign		567740	0					
ANR	567875	Identifier	m_classAd		567740	0					
ANR	567876	Identifier	Assign		567740	1					
ANR	567877	ArgumentList	ATTR_HAD_INDEX		567740	1					
ANR	567878	Argument	ATTR_HAD_INDEX		567740	0					
ANR	567879	Identifier	ATTR_HAD_INDEX		567740	0					
ANR	567880	Argument	m_allHadIps . number ( ) - 1 - m_selfId		567740	1					
ANR	567881	AdditiveExpression	m_allHadIps . number ( ) - 1 - m_selfId		567740	0		-			
ANR	567882	CallExpression	m_allHadIps . number ( )		567740	0					
ANR	567883	Callee	m_allHadIps . number		567740	0					
ANR	567884	MemberAccess	m_allHadIps . number		567740	0					
ANR	567885	Identifier	m_allHadIps		567740	0					
ANR	567886	Identifier	number		567740	1					
ANR	567887	ArgumentList			567740	1					
ANR	567888	AdditiveExpression	1 - m_selfId		567740	1		-			
ANR	567889	PrimaryExpression	1		567740	0					
ANR	567890	Identifier	m_selfId		567740	1					
ANR	567891	ExpressionStatement	"m_classAd . Assign ( ATTR_HAD_SELF_ID , m_selfId )"	312:1:8616:8662	567740	12	True				
ANR	567892	CallExpression	"m_classAd . Assign ( ATTR_HAD_SELF_ID , m_selfId )"		567740	0					
ANR	567893	Callee	m_classAd . Assign		567740	0					
ANR	567894	MemberAccess	m_classAd . Assign		567740	0					
ANR	567895	Identifier	m_classAd		567740	0					
ANR	567896	Identifier	Assign		567740	1					
ANR	567897	ArgumentList	ATTR_HAD_SELF_ID		567740	1					
ANR	567898	Argument	ATTR_HAD_SELF_ID		567740	0					
ANR	567899	Identifier	ATTR_HAD_SELF_ID		567740	0					
ANR	567900	Argument	m_selfId		567740	1					
ANR	567901	Identifier	m_selfId		567740	0					
ANR	567902	ExpressionStatement	daemonCore -> publish ( & m_classAd )	315:1:8732:8765	567740	13	True				
ANR	567903	CallExpression	daemonCore -> publish ( & m_classAd )		567740	0					
ANR	567904	Callee	daemonCore -> publish		567740	0					
ANR	567905	PtrMemberAccess	daemonCore -> publish		567740	0					
ANR	567906	Identifier	daemonCore		567740	0					
ANR	567907	Identifier	publish		567740	1					
ANR	567908	ArgumentList	& m_classAd		567740	1					
ANR	567909	Argument	& m_classAd		567740	0					
ANR	567910	UnaryOperationExpression	& m_classAd		567740	0					
ANR	567911	UnaryOperator	&		567740	0					
ANR	567912	Identifier	m_classAd		567740	1					
ANR	567913	ReturnType	void		567740	1					
ANR	567914	Identifier	HADStateMachine :: initializeClassAd		567740	2					
ANR	567915	ParameterList			567740	3					
ANR	567916	CFGEntryNode	ENTRY		567740		True				
ANR	567917	CFGExitNode	EXIT		567740		True				
ANR	567918	Symbol	daemonCore -> InfoCommandSinfulString		567740						
ANR	567919	Symbol	m_allHadIps		567740						
ANR	567920	Symbol	ATTR_NAME		567740						
ANR	567921	Symbol	ATTR_HAD_INDEX		567740						
ANR	567922	Symbol	line		567740						
ANR	567923	Symbol	false		567740						
ANR	567924	Symbol	m_allHadIps . print_to_string		567740						
ANR	567925	Symbol	HAD_ADTYPE		567740						
ANR	567926	Symbol	m_allHadIps . number		567740						
ANR	567927	Symbol	m_controlleeName		567740						
ANR	567928	Symbol	m_name		567740						
ANR	567929	Symbol	* daemonCore		567740						
ANR	567930	Symbol	ATTR_HAD_LIST		567740						
ANR	567931	Symbol	m_selfId		567740						
ANR	567932	Symbol	daemonCore		567740						
ANR	567933	Symbol	ATTR_HAD_SELF_ID		567740						
ANR	567934	Symbol	buffer		567740						
ANR	567935	Symbol	& m_classAd		567740						
ANR	567936	Symbol	ATTR_MY_ADDRESS		567740						
ANR	567937	Symbol	ATTR_HAD_CONTROLLEE_NAME		567740						
ANR	567938	Symbol	m_classAd		567740						
ANR	567939	Symbol	ATTR_HAD_IS_ACTIVE		567740						
ANR	567940	Function	HADStateMachine :: reinitialize	336:0:9400:11188							
ANR	567941	FunctionDef	HADStateMachine :: reinitialize ()		567940	0					
ANR	567942	CompoundStatement		338:0:9440:11188	567940	0					
ANR	567943	IdentifierDeclStatement	char * tmp ;	339:4:9446:9455	567940	0	True				
ANR	567944	IdentifierDecl	* tmp		567940	0					
ANR	567945	IdentifierDeclType	char *		567940	0					
ANR	567946	Identifier	tmp		567940	1					
ANR	567947	ExpressionStatement	freeResources ( )	340:4:9461:9476	567940	1	True				
ANR	567948	CallExpression	freeResources ( )		567940	0					
ANR	567949	Callee	freeResources		567940	0					
ANR	567950	Identifier	freeResources		567940	0					
ANR	567951	ArgumentList			567940	1					
ANR	567952	ExpressionStatement	m_masterDaemon = new Daemon ( DT_MASTER )	341:4:9539:9579	567940	2	True				
ANR	567953	AssignmentExpression	m_masterDaemon = new Daemon ( DT_MASTER )		567940	0		=			
ANR	567954	Identifier	m_masterDaemon		567940	0					
ANR	567955	Identifier	DT_MASTER		567940	1					
ANR	567956	ExpressionStatement	"tmp = param ( ""HAD_CONTROLLEE"" )"	344:1:9642:9673	567940	3	True				
ANR	567957	AssignmentExpression	"tmp = param ( ""HAD_CONTROLLEE"" )"		567940	0		=			
ANR	567958	Identifier	tmp		567940	0					
ANR	567959	CallExpression	"param ( ""HAD_CONTROLLEE"" )"		567940	1					
ANR	567960	Callee	param		567940	0					
ANR	567961	Identifier	param		567940	0					
ANR	567962	ArgumentList	"""HAD_CONTROLLEE"""		567940	1					
ANR	567963	Argument	"""HAD_CONTROLLEE"""		567940	0					
ANR	567964	PrimaryExpression	"""HAD_CONTROLLEE"""		567940	0					
ANR	567965	IfStatement	if ( tmp )		567940	4					
ANR	567966	Condition	tmp	345:6:9681:9683	567940	0	True				
ANR	567967	Identifier	tmp		567940	0					
ANR	567968	CompoundStatement		8:12:246:246	567940	1					
ANR	567969	ExpressionStatement	m_controlleeName = tmp	346:2:9691:9713	567940	0	True				
ANR	567970	AssignmentExpression	m_controlleeName = tmp		567940	0		=			
ANR	567971	Identifier	m_controlleeName		567940	0					
ANR	567972	Identifier	tmp		567940	1					
ANR	567973	ElseStatement	else		567940	0					
ANR	567974	CompoundStatement		11:6:283:283	567940	0					
ANR	567975	ExpressionStatement	m_controlleeName = strdup ( daemonString ( DT_NEGOTIATOR ) )	349:2:9728:9784	567940	0	True				
ANR	567976	AssignmentExpression	m_controlleeName = strdup ( daemonString ( DT_NEGOTIATOR ) )		567940	0		=			
ANR	567977	Identifier	m_controlleeName		567940	0					
ANR	567978	CallExpression	strdup ( daemonString ( DT_NEGOTIATOR ) )		567940	1					
ANR	567979	Callee	strdup		567940	0					
ANR	567980	Identifier	strdup		567940	0					
ANR	567981	ArgumentList	daemonString ( DT_NEGOTIATOR )		567940	1					
ANR	567982	Argument	daemonString ( DT_NEGOTIATOR )		567940	0					
ANR	567983	CallExpression	daemonString ( DT_NEGOTIATOR )		567940	0					
ANR	567984	Callee	daemonString		567940	0					
ANR	567985	Identifier	daemonString		567940	0					
ANR	567986	ArgumentList	DT_NEGOTIATOR		567940	1					
ANR	567987	Argument	DT_NEGOTIATOR		567940	0					
ANR	567988	Identifier	DT_NEGOTIATOR		567940	0					
ANR	567989	ExpressionStatement	"m_usePrimary = param_boolean ( ""HAD_USE_PRIMARY"" , m_usePrimary )"	354:1:9884:9945	567940	5	True				
ANR	567990	AssignmentExpression	"m_usePrimary = param_boolean ( ""HAD_USE_PRIMARY"" , m_usePrimary )"		567940	0		=			
ANR	567991	Identifier	m_usePrimary		567940	0					
ANR	567992	CallExpression	"param_boolean ( ""HAD_USE_PRIMARY"" , m_usePrimary )"		567940	1					
ANR	567993	Callee	param_boolean		567940	0					
ANR	567994	Identifier	param_boolean		567940	0					
ANR	567995	ArgumentList	"""HAD_USE_PRIMARY"""		567940	1					
ANR	567996	Argument	"""HAD_USE_PRIMARY"""		567940	0					
ANR	567997	PrimaryExpression	"""HAD_USE_PRIMARY"""		567940	0					
ANR	567998	Argument	m_usePrimary		567940	1					
ANR	567999	Identifier	m_usePrimary		567940	0					
ANR	568000	ExpressionStatement	"tmp = param ( ""HAD_LIST"" )"	356:4:9952:9977	567940	6	True				
ANR	568001	AssignmentExpression	"tmp = param ( ""HAD_LIST"" )"		567940	0		=			
ANR	568002	Identifier	tmp		567940	0					
ANR	568003	CallExpression	"param ( ""HAD_LIST"" )"		567940	1					
ANR	568004	Callee	param		567940	0					
ANR	568005	Identifier	param		567940	0					
ANR	568006	ArgumentList	"""HAD_LIST"""		567940	1					
ANR	568007	Argument	"""HAD_LIST"""		567940	0					
ANR	568008	PrimaryExpression	"""HAD_LIST"""		567940	0					
ANR	568009	IfStatement	if ( tmp )		567940	7					
ANR	568010	Condition	tmp	357:9:9988:9990	567940	0	True				
ANR	568011	Identifier	tmp		567940	0					
ANR	568012	CompoundStatement		20:15:553:553	567940	1					
ANR	568013	ExpressionStatement	"m_isPrimary = getHadList ( tmp , m_usePrimary , m_otherHadIps , m_allHadIps , m_selfId )"	358:8:10004:10107	567940	0	True				
ANR	568014	AssignmentExpression	"m_isPrimary = getHadList ( tmp , m_usePrimary , m_otherHadIps , m_allHadIps , m_selfId )"		567940	0		=			
ANR	568015	Identifier	m_isPrimary		567940	0					
ANR	568016	CallExpression	"getHadList ( tmp , m_usePrimary , m_otherHadIps , m_allHadIps , m_selfId )"		567940	1					
ANR	568017	Callee	getHadList		567940	0					
ANR	568018	Identifier	getHadList		567940	0					
ANR	568019	ArgumentList	tmp		567940	1					
ANR	568020	Argument	tmp		567940	0					
ANR	568021	Identifier	tmp		567940	0					
ANR	568022	Argument	m_usePrimary		567940	1					
ANR	568023	Identifier	m_usePrimary		567940	0					
ANR	568024	Argument	m_otherHadIps		567940	2					
ANR	568025	Identifier	m_otherHadIps		567940	0					
ANR	568026	Argument	m_allHadIps		567940	3					
ANR	568027	Identifier	m_allHadIps		567940	0					
ANR	568028	Argument	m_selfId		567940	4					
ANR	568029	Identifier	m_selfId		567940	0					
ANR	568030	ExpressionStatement	free ( tmp )	361:8:10117:10128	567940	1	True				
ANR	568031	CallExpression	free ( tmp )		567940	0					
ANR	568032	Callee	free		567940	0					
ANR	568033	Identifier	free		567940	0					
ANR	568034	ArgumentList	tmp		567940	1					
ANR	568035	Argument	tmp		567940	0					
ANR	568036	Identifier	tmp		567940	0					
ANR	568037	ElseStatement	else		567940	0					
ANR	568038	CompoundStatement		25:11:700:700	567940	0					
ANR	568039	Statement	utilCrucialError	363:8:10151:10166	567940	0	True				
ANR	568040	Statement	(	363:24:10167:10167	567940	1	True				
ANR	568041	Statement	"""HAD CONFIGURATION ERROR:"""	363:25:10168:10193	567940	2	True				
ANR	568042	Statement	""" no HAD_LIST in config file"""	364:7:10202:10230	567940	3	True				
ANR	568043	Statement	)	364:36:10231:10231	567940	4	True				
ANR	568044	ExpressionStatement		364:37:10232:10232	567940	5	True				
ANR	568045	ExpressionStatement	softReconfigure ( )	368:1:10346:10364	567940	8	True				
ANR	568046	CallExpression	softReconfigure ( )		567940	0					
ANR	568047	Callee	softReconfigure		567940	0					
ANR	568048	Identifier	softReconfigure		567940	0					
ANR	568049	ArgumentList			567940	1					
ANR	568050	ExpressionStatement	"m_stateMachineTimerID = daemonCore -> Register_Timer ( 0 , ( TimerHandlercpp ) & HADStateMachine :: cycle , ""Time to check HAD"" , this )"	371:4:10399:10530	567940	9	True				
ANR	568051	AssignmentExpression	"m_stateMachineTimerID = daemonCore -> Register_Timer ( 0 , ( TimerHandlercpp ) & HADStateMachine :: cycle , ""Time to check HAD"" , this )"		567940	0		=			
ANR	568052	Identifier	m_stateMachineTimerID		567940	0					
ANR	568053	CallExpression	"daemonCore -> Register_Timer ( 0 , ( TimerHandlercpp ) & HADStateMachine :: cycle , ""Time to check HAD"" , this )"		567940	1					
ANR	568054	Callee	daemonCore -> Register_Timer		567940	0					
ANR	568055	PtrMemberAccess	daemonCore -> Register_Timer		567940	0					
ANR	568056	Identifier	daemonCore		567940	0					
ANR	568057	Identifier	Register_Timer		567940	1					
ANR	568058	ArgumentList	0		567940	1					
ANR	568059	Argument	0		567940	0					
ANR	568060	PrimaryExpression	0		567940	0					
ANR	568061	Argument	( TimerHandlercpp ) & HADStateMachine :: cycle		567940	1					
ANR	568062	CastExpression	( TimerHandlercpp ) & HADStateMachine :: cycle		567940	0					
ANR	568063	CastTarget	TimerHandlercpp		567940	0					
ANR	568064	UnaryOperationExpression	& HADStateMachine :: cycle		567940	1					
ANR	568065	UnaryOperator	&		567940	0					
ANR	568066	Identifier	HADStateMachine :: cycle		567940	1					
ANR	568067	Argument	"""Time to check HAD"""		567940	2					
ANR	568068	PrimaryExpression	"""Time to check HAD"""		567940	0					
ANR	568069	Argument	this		567940	3					
ANR	568070	Identifier	this		567940	0					
ANR	568071	ExpressionStatement	"dprintf ( D_ALWAYS , ""** Register on m_stateMachineTimerID, interval = %d\\n"" , m_hadInterval / ( MESSAGES_PER_INTERVAL_FACTOR ) )"	375:4:10536:10668	567940	10	True				
ANR	568072	CallExpression	"dprintf ( D_ALWAYS , ""** Register on m_stateMachineTimerID, interval = %d\\n"" , m_hadInterval / ( MESSAGES_PER_INTERVAL_FACTOR ) )"		567940	0					
ANR	568073	Callee	dprintf		567940	0					
ANR	568074	Identifier	dprintf		567940	0					
ANR	568075	ArgumentList	D_ALWAYS		567940	1					
ANR	568076	Argument	D_ALWAYS		567940	0					
ANR	568077	Identifier	D_ALWAYS		567940	0					
ANR	568078	Argument	"""** Register on m_stateMachineTimerID, interval = %d\\n"""		567940	1					
ANR	568079	PrimaryExpression	"""** Register on m_stateMachineTimerID, interval = %d\\n"""		567940	0					
ANR	568080	Argument	m_hadInterval / ( MESSAGES_PER_INTERVAL_FACTOR )		567940	2					
ANR	568081	MultiplicativeExpression	m_hadInterval / ( MESSAGES_PER_INTERVAL_FACTOR )		567940	0		/			
ANR	568082	Identifier	m_hadInterval		567940	0					
ANR	568083	Identifier	MESSAGES_PER_INTERVAL_FACTOR		567940	1					
ANR	568084	ExpressionStatement	"m_updateCollectorTimerId = daemonCore -> Register_Timer ( 0 , m_updateCollectorInterval , ( TimerHandlercpp ) & HADStateMachine :: updateCollectors , ""Update collector"" , this )"	377:1:10671:10861	567940	11	True				
ANR	568085	AssignmentExpression	"m_updateCollectorTimerId = daemonCore -> Register_Timer ( 0 , m_updateCollectorInterval , ( TimerHandlercpp ) & HADStateMachine :: updateCollectors , ""Update collector"" , this )"		567940	0		=			
ANR	568086	Identifier	m_updateCollectorTimerId		567940	0					
ANR	568087	CallExpression	"daemonCore -> Register_Timer ( 0 , m_updateCollectorInterval , ( TimerHandlercpp ) & HADStateMachine :: updateCollectors , ""Update collector"" , this )"		567940	1					
ANR	568088	Callee	daemonCore -> Register_Timer		567940	0					
ANR	568089	PtrMemberAccess	daemonCore -> Register_Timer		567940	0					
ANR	568090	Identifier	daemonCore		567940	0					
ANR	568091	Identifier	Register_Timer		567940	1					
ANR	568092	ArgumentList	0		567940	1					
ANR	568093	Argument	0		567940	0					
ANR	568094	PrimaryExpression	0		567940	0					
ANR	568095	Argument	m_updateCollectorInterval		567940	1					
ANR	568096	Identifier	m_updateCollectorInterval		567940	0					
ANR	568097	Argument	( TimerHandlercpp ) & HADStateMachine :: updateCollectors		567940	2					
ANR	568098	CastExpression	( TimerHandlercpp ) & HADStateMachine :: updateCollectors		567940	0					
ANR	568099	CastTarget	TimerHandlercpp		567940	0					
ANR	568100	UnaryOperationExpression	& HADStateMachine :: updateCollectors		567940	1					
ANR	568101	UnaryOperator	&		567940	0					
ANR	568102	Identifier	HADStateMachine :: updateCollectors		567940	1					
ANR	568103	Argument	"""Update collector"""		567940	3					
ANR	568104	PrimaryExpression	"""Update collector"""		567940	0					
ANR	568105	Argument	this		567940	4					
ANR	568106	Identifier	this		567940	0					
ANR	568107	IfStatement	if ( m_standAloneMode )		567940	12					
ANR	568108	Condition	m_standAloneMode	382:8:10872:10887	567940	0	True				
ANR	568109	Identifier	m_standAloneMode		567940	0					
ANR	568110	CompoundStatement		45:27:1450:1450	567940	1					
ANR	568111	ReturnStatement	return TRUE ;	384:9:10939:10950	567940	0	True				
ANR	568112	Identifier	TRUE		567940	0					
ANR	568113	IfStatement	if ( m_masterDaemon == NULL || sendControlCmdToMaster ( CHILD_OFF_FAST ) == false )		567940	13					
ANR	568114	Condition	m_masterDaemon == NULL || sendControlCmdToMaster ( CHILD_OFF_FAST ) == false	387:8:10967:11047	567940	0	True				
ANR	568115	OrExpression	m_masterDaemon == NULL || sendControlCmdToMaster ( CHILD_OFF_FAST ) == false		567940	0		||			
ANR	568116	EqualityExpression	m_masterDaemon == NULL		567940	0		==			
ANR	568117	Identifier	m_masterDaemon		567940	0					
ANR	568118	Identifier	NULL		567940	1					
ANR	568119	EqualityExpression	sendControlCmdToMaster ( CHILD_OFF_FAST ) == false		567940	1		==			
ANR	568120	CallExpression	sendControlCmdToMaster ( CHILD_OFF_FAST )		567940	0					
ANR	568121	Callee	sendControlCmdToMaster		567940	0					
ANR	568122	Identifier	sendControlCmdToMaster		567940	0					
ANR	568123	ArgumentList	CHILD_OFF_FAST		567940	1					
ANR	568124	Argument	CHILD_OFF_FAST		567940	0					
ANR	568125	Identifier	CHILD_OFF_FAST		567940	0					
ANR	568126	Identifier	false		567940	1					
ANR	568127	CompoundStatement		51:58:1610:1610	567940	1					
ANR	568128	ExpressionStatement	"utilCrucialError ( ""HAD ERROR: unable to send CHILD_OFF_FAST command"" )"	389:9:11062:11130	567940	0	True				
ANR	568129	CallExpression	"utilCrucialError ( ""HAD ERROR: unable to send CHILD_OFF_FAST command"" )"		567940	0					
ANR	568130	Callee	utilCrucialError		567940	0					
ANR	568131	Identifier	utilCrucialError		567940	0					
ANR	568132	ArgumentList	"""HAD ERROR: unable to send CHILD_OFF_FAST command"""		567940	1					
ANR	568133	Argument	"""HAD ERROR: unable to send CHILD_OFF_FAST command"""		567940	0					
ANR	568134	PrimaryExpression	"""HAD ERROR: unable to send CHILD_OFF_FAST command"""		567940	0					
ANR	568135	ReturnStatement	return TRUE ;	393:4:11175:11186	567940	14	True				
ANR	568136	Identifier	TRUE		567940	0					
ANR	568137	ReturnType	int		567940	1					
ANR	568138	Identifier	HADStateMachine :: reinitialize		567940	2					
ANR	568139	ParameterList			567940	3					
ANR	568140	CFGEntryNode	ENTRY		567940		True				
ANR	568141	CFGExitNode	EXIT		567940		True				
ANR	568142	Symbol	m_allHadIps		567940						
ANR	568143	Symbol	daemonString		567940						
ANR	568144	Symbol	m_otherHadIps		567940						
ANR	568145	Symbol	DT_MASTER		567940						
ANR	568146	Symbol	m_usePrimary		567940						
ANR	568147	Symbol	m_standAloneMode		567940						
ANR	568148	Symbol	getHadList		567940						
ANR	568149	Symbol	param		567940						
ANR	568150	Symbol	tmp		567940						
ANR	568151	Symbol	m_selfId		567940						
ANR	568152	Symbol	m_hadInterval		567940						
ANR	568153	Symbol	daemonCore		567940						
ANR	568154	Symbol	MESSAGES_PER_INTERVAL_FACTOR		567940						
ANR	568155	Symbol	m_masterDaemon		567940						
ANR	568156	Symbol	sendControlCmdToMaster		567940						
ANR	568157	Symbol	NULL		567940						
ANR	568158	Symbol	this		567940						
ANR	568159	Symbol	D_ALWAYS		567940						
ANR	568160	Symbol	& HADStateMachine :: updateCollectors		567940						
ANR	568161	Symbol	false		567940						
ANR	568162	Symbol	m_isPrimary		567940						
ANR	568163	Symbol	TRUE		567940						
ANR	568164	Symbol	param_boolean		567940						
ANR	568165	Symbol	& HADStateMachine :: cycle		567940						
ANR	568166	Symbol	m_controlleeName		567940						
ANR	568167	Symbol	m_stateMachineTimerID		567940						
ANR	568168	Symbol	* daemonCore		567940						
ANR	568169	Symbol	CHILD_OFF_FAST		567940						
ANR	568170	Symbol	daemonCore -> Register_Timer		567940						
ANR	568171	Symbol	DT_NEGOTIATOR		567940						
ANR	568172	Symbol	m_updateCollectorInterval		567940						
ANR	568173	Symbol	strdup		567940						
ANR	568174	Symbol	m_updateCollectorTimerId		567940						
ANR	568175	Function	HADStateMachine :: cycle	402:0:11458:12045							
ANR	568176	FunctionDef	HADStateMachine :: cycle ()		568175	0					
ANR	568177	CompoundStatement		404:0:11492:12045	568175	0					
ANR	568178	Statement	dprintf	405:4:11498:11504	568175	0	True				
ANR	568179	Statement	(	405:11:11505:11505	568175	1	True				
ANR	568180	Statement	D_FULLDEBUG	405:13:11507:11517	568175	2	True				
ANR	568181	Statement	","	405:24:11518:11518	568175	3	True				
ANR	568182	Statement	"""-------------- > Timer m_stateMachineTimerID"""	405:26:11520:11565	568175	4	True				
ANR	568183	Statement	""" is called\\n"""	406:8:11575:11588	568175	5	True				
ANR	568184	Statement	)	406:22:11589:11589	568175	6	True				
ANR	568185	ExpressionStatement		406:23:11590:11590	568175	7	True				
ANR	568186	ExpressionStatement	utilCancelTimer ( m_stateMachineTimerID )	408:4:11597:11637	568175	8	True				
ANR	568187	CallExpression	utilCancelTimer ( m_stateMachineTimerID )		568175	0					
ANR	568188	Callee	utilCancelTimer		568175	0					
ANR	568189	Identifier	utilCancelTimer		568175	0					
ANR	568190	ArgumentList	m_stateMachineTimerID		568175	1					
ANR	568191	Argument	m_stateMachineTimerID		568175	0					
ANR	568192	Identifier	m_stateMachineTimerID		568175	0					
ANR	568193	ExpressionStatement	"m_stateMachineTimerID = daemonCore -> Register_Timer ( m_hadInterval / ( MESSAGES_PER_INTERVAL_FACTOR ) , ( TimerHandlercpp ) & HADStateMachine :: cycle , ""Time to check HAD"" , this )"	409:1:11640:11816	568175	9	True				
ANR	568194	AssignmentExpression	"m_stateMachineTimerID = daemonCore -> Register_Timer ( m_hadInterval / ( MESSAGES_PER_INTERVAL_FACTOR ) , ( TimerHandlercpp ) & HADStateMachine :: cycle , ""Time to check HAD"" , this )"		568175	0		=			
ANR	568195	Identifier	m_stateMachineTimerID		568175	0					
ANR	568196	CallExpression	"daemonCore -> Register_Timer ( m_hadInterval / ( MESSAGES_PER_INTERVAL_FACTOR ) , ( TimerHandlercpp ) & HADStateMachine :: cycle , ""Time to check HAD"" , this )"		568175	1					
ANR	568197	Callee	daemonCore -> Register_Timer		568175	0					
ANR	568198	PtrMemberAccess	daemonCore -> Register_Timer		568175	0					
ANR	568199	Identifier	daemonCore		568175	0					
ANR	568200	Identifier	Register_Timer		568175	1					
ANR	568201	ArgumentList	m_hadInterval / ( MESSAGES_PER_INTERVAL_FACTOR )		568175	1					
ANR	568202	Argument	m_hadInterval / ( MESSAGES_PER_INTERVAL_FACTOR )		568175	0					
ANR	568203	MultiplicativeExpression	m_hadInterval / ( MESSAGES_PER_INTERVAL_FACTOR )		568175	0		/			
ANR	568204	Identifier	m_hadInterval		568175	0					
ANR	568205	Identifier	MESSAGES_PER_INTERVAL_FACTOR		568175	1					
ANR	568206	Argument	( TimerHandlercpp ) & HADStateMachine :: cycle		568175	1					
ANR	568207	CastExpression	( TimerHandlercpp ) & HADStateMachine :: cycle		568175	0					
ANR	568208	CastTarget	TimerHandlercpp		568175	0					
ANR	568209	UnaryOperationExpression	& HADStateMachine :: cycle		568175	1					
ANR	568210	UnaryOperator	&		568175	0					
ANR	568211	Identifier	HADStateMachine :: cycle		568175	1					
ANR	568212	Argument	"""Time to check HAD"""		568175	2					
ANR	568213	PrimaryExpression	"""Time to check HAD"""		568175	0					
ANR	568214	Argument	this		568175	3					
ANR	568215	Identifier	this		568175	0					
ANR	568216	IfStatement	if ( m_callsCounter == 0 )		568175	10					
ANR	568217	Condition	m_callsCounter == 0	415:7:11826:11844	568175	0	True				
ANR	568218	EqualityExpression	m_callsCounter == 0		568175	0		==			
ANR	568219	Identifier	m_callsCounter		568175	0					
ANR	568220	PrimaryExpression	0		568175	1					
ANR	568221	CompoundStatement		12:27:353:353	568175	1					
ANR	568222	ExpressionStatement	step ( )	417:8:11919:11925	568175	0	True				
ANR	568223	CallExpression	step ( )		568175	0					
ANR	568224	Callee	step		568175	0					
ANR	568225	Identifier	step		568175	0					
ANR	568226	ArgumentList			568175	1					
ANR	568227	ExpressionStatement	sendMessages ( )	419:4:11937:11951	568175	11	True				
ANR	568228	CallExpression	sendMessages ( )		568175	0					
ANR	568229	Callee	sendMessages		568175	0					
ANR	568230	Identifier	sendMessages		568175	0					
ANR	568231	ArgumentList			568175	1					
ANR	568232	ExpressionStatement	m_callsCounter ++	420:4:11957:11974	568175	12	True				
ANR	568233	PostIncDecOperationExpression	m_callsCounter ++		568175	0					
ANR	568234	Identifier	m_callsCounter		568175	0					
ANR	568235	IncDec	++		568175	1					
ANR	568236	ExpressionStatement	m_callsCounter = m_callsCounter % MESSAGES_PER_INTERVAL_FACTOR	421:4:11980:12042	568175	13	True				
ANR	568237	AssignmentExpression	m_callsCounter = m_callsCounter % MESSAGES_PER_INTERVAL_FACTOR		568175	0		=			
ANR	568238	Identifier	m_callsCounter		568175	0					
ANR	568239	MultiplicativeExpression	m_callsCounter % MESSAGES_PER_INTERVAL_FACTOR		568175	1		%			
ANR	568240	Identifier	m_callsCounter		568175	0					
ANR	568241	Identifier	MESSAGES_PER_INTERVAL_FACTOR		568175	1					
ANR	568242	ReturnType	void		568175	1					
ANR	568243	Identifier	HADStateMachine :: cycle		568175	2					
ANR	568244	ParameterList			568175	3					
ANR	568245	CFGEntryNode	ENTRY		568175		True				
ANR	568246	CFGExitNode	EXIT		568175		True				
ANR	568247	Symbol	m_callsCounter		568175						
ANR	568248	Symbol	m_hadInterval		568175						
ANR	568249	Symbol	* daemonCore		568175						
ANR	568250	Symbol	daemonCore		568175						
ANR	568251	Symbol	daemonCore -> Register_Timer		568175						
ANR	568252	Symbol	MESSAGES_PER_INTERVAL_FACTOR		568175						
ANR	568253	Symbol	this		568175						
ANR	568254	Symbol	& HADStateMachine :: cycle		568175						
ANR	568255	Symbol	m_stateMachineTimerID		568175						
ANR	568256	Function	HADStateMachine :: step	430:0:12211:15548							
ANR	568257	FunctionDef	HADStateMachine :: step ()		568256	0					
ANR	568258	CompoundStatement		432:0:12244:15548	568256	0					
ANR	568259	ExpressionStatement	my_debug_print_buffers ( )	434:4:12251:12275	568256	0	True				
ANR	568260	CallExpression	my_debug_print_buffers ( )		568256	0					
ANR	568261	Callee	my_debug_print_buffers		568256	0					
ANR	568262	Identifier	my_debug_print_buffers		568256	0					
ANR	568263	ArgumentList			568256	1					
ANR	568264	SwitchStatement	switch ( m_state )		568256	1					
ANR	568265	Condition	m_state	435:12:12289:12295	568256	0	True				
ANR	568266	Identifier	m_state		568256	0					
ANR	568267	CompoundStatement		4:22:54:54	568256	1					
ANR	568268	Label	case PRE_STATE :	436:8:12309:12323	568256	0	True				
ANR	568269	Identifier	PRE_STATE		568256	0					
ANR	568270	ExpressionStatement	m_state = PASSIVE_STATE	438:12:12394:12417	568256	1	True				
ANR	568271	AssignmentExpression	m_state = PASSIVE_STATE		568256	0		=			
ANR	568272	Identifier	m_state		568256	0					
ANR	568273	Identifier	PASSIVE_STATE		568256	1					
ANR	568274	ExpressionStatement	"printStep ( ""PRE_STATE"" , ""PASSIVE_STATE"" )"	439:12:12431:12469	568256	2	True				
ANR	568275	CallExpression	"printStep ( ""PRE_STATE"" , ""PASSIVE_STATE"" )"		568256	0					
ANR	568276	Callee	printStep		568256	0					
ANR	568277	Identifier	printStep		568256	0					
ANR	568278	ArgumentList	"""PRE_STATE"""		568256	1					
ANR	568279	Argument	"""PRE_STATE"""		568256	0					
ANR	568280	PrimaryExpression	"""PRE_STATE"""		568256	0					
ANR	568281	Argument	"""PASSIVE_STATE"""		568256	1					
ANR	568282	PrimaryExpression	"""PASSIVE_STATE"""		568256	0					
ANR	568283	BreakStatement	break ;	440:12:12483:12488	568256	3	True				
ANR	568284	Label	case PASSIVE_STATE :	442:8:12499:12517	568256	4	True				
ANR	568285	Identifier	PASSIVE_STATE		568256	0					
ANR	568286	IfStatement	if ( receivedAliveList . IsEmpty ( ) || m_isPrimary )		568256	5					
ANR	568287	Condition	receivedAliveList . IsEmpty ( ) || m_isPrimary	443:16:12535:12576	568256	0	True				
ANR	568288	OrExpression	receivedAliveList . IsEmpty ( ) || m_isPrimary		568256	0		||			
ANR	568289	CallExpression	receivedAliveList . IsEmpty ( )		568256	0					
ANR	568290	Callee	receivedAliveList . IsEmpty		568256	0					
ANR	568291	MemberAccess	receivedAliveList . IsEmpty		568256	0					
ANR	568292	Identifier	receivedAliveList		568256	0					
ANR	568293	Identifier	IsEmpty		568256	1					
ANR	568294	ArgumentList			568256	1					
ANR	568295	Identifier	m_isPrimary		568256	1					
ANR	568296	CompoundStatement		12:61:335:335	568256	1					
ANR	568297	ExpressionStatement	m_state = ELECTION_STATE	444:16:12598:12622	568256	0	True				
ANR	568298	AssignmentExpression	m_state = ELECTION_STATE		568256	0		=			
ANR	568299	Identifier	m_state		568256	0					
ANR	568300	Identifier	ELECTION_STATE		568256	1					
ANR	568301	ExpressionStatement	"printStep ( ""PASSIVE_STATE"" , ""ELECTION_STATE"" )"	445:16:12640:12685	568256	1	True				
ANR	568302	CallExpression	"printStep ( ""PASSIVE_STATE"" , ""ELECTION_STATE"" )"		568256	0					
ANR	568303	Callee	printStep		568256	0					
ANR	568304	Identifier	printStep		568256	0					
ANR	568305	ArgumentList	"""PASSIVE_STATE"""		568256	1					
ANR	568306	Argument	"""PASSIVE_STATE"""		568256	0					
ANR	568307	PrimaryExpression	"""PASSIVE_STATE"""		568256	0					
ANR	568308	Argument	"""ELECTION_STATE"""		568256	1					
ANR	568309	PrimaryExpression	"""ELECTION_STATE"""		568256	0					
ANR	568310	ReturnStatement	return ;	447:16:12764:12770	568256	2	True				
ANR	568311	ElseStatement	else		568256	0					
ANR	568312	CompoundStatement		17:19:546:546	568256	0					
ANR	568313	ExpressionStatement	"printStep ( ""PASSIVE_STATE"" , ""PASSIVE_STATE"" )"	449:16:12809:12853	568256	0	True				
ANR	568314	CallExpression	"printStep ( ""PASSIVE_STATE"" , ""PASSIVE_STATE"" )"		568256	0					
ANR	568315	Callee	printStep		568256	0					
ANR	568316	Identifier	printStep		568256	0					
ANR	568317	ArgumentList	"""PASSIVE_STATE"""		568256	1					
ANR	568318	Argument	"""PASSIVE_STATE"""		568256	0					
ANR	568319	PrimaryExpression	"""PASSIVE_STATE"""		568256	0					
ANR	568320	Argument	"""PASSIVE_STATE"""		568256	1					
ANR	568321	PrimaryExpression	"""PASSIVE_STATE"""		568256	0					
ANR	568322	BreakStatement	break ;	452:12:12882:12887	568256	6	True				
ANR	568323	Label	case ELECTION_STATE :	453:8:12897:12916	568256	7	True				
ANR	568324	Identifier	ELECTION_STATE		568256	0					
ANR	568325	CompoundStatement		50:12:1623:1673	568256	8					
ANR	568326	IfStatement	if ( ! receivedAliveList . IsEmpty ( ) && ! m_isPrimary )		568256	0					
ANR	568327	Condition	! receivedAliveList . IsEmpty ( ) && ! m_isPrimary	455:7:12935:12978	568256	0	True				
ANR	568328	AndExpression	! receivedAliveList . IsEmpty ( ) && ! m_isPrimary		568256	0		&&			
ANR	568329	UnaryOperationExpression	! receivedAliveList . IsEmpty ( )		568256	0					
ANR	568330	UnaryOperator	!		568256	0					
ANR	568331	CallExpression	receivedAliveList . IsEmpty ( )		568256	1					
ANR	568332	Callee	receivedAliveList . IsEmpty		568256	0					
ANR	568333	MemberAccess	receivedAliveList . IsEmpty		568256	0					
ANR	568334	Identifier	receivedAliveList		568256	0					
ANR	568335	Identifier	IsEmpty		568256	1					
ANR	568336	ArgumentList			568256	1					
ANR	568337	UnaryOperationExpression	! m_isPrimary		568256	1					
ANR	568338	UnaryOperator	!		568256	0					
ANR	568339	Identifier	m_isPrimary		568256	1					
ANR	568340	CompoundStatement		24:54:737:737	568256	1					
ANR	568341	ExpressionStatement	m_state = PASSIVE_STATE	456:16:13000:13023	568256	0	True				
ANR	568342	AssignmentExpression	m_state = PASSIVE_STATE		568256	0		=			
ANR	568343	Identifier	m_state		568256	0					
ANR	568344	Identifier	PASSIVE_STATE		568256	1					
ANR	568345	ExpressionStatement	"printStep ( ""ELECTION_STATE"" , ""PASSIVE_STATE"" )"	457:16:13041:13084	568256	1	True				
ANR	568346	CallExpression	"printStep ( ""ELECTION_STATE"" , ""PASSIVE_STATE"" )"		568256	0					
ANR	568347	Callee	printStep		568256	0					
ANR	568348	Identifier	printStep		568256	0					
ANR	568349	ArgumentList	"""ELECTION_STATE"""		568256	1					
ANR	568350	Argument	"""ELECTION_STATE"""		568256	0					
ANR	568351	PrimaryExpression	"""ELECTION_STATE"""		568256	0					
ANR	568352	Argument	"""PASSIVE_STATE"""		568256	1					
ANR	568353	PrimaryExpression	"""PASSIVE_STATE"""		568256	0					
ANR	568354	BreakStatement	break ;	458:16:13102:13107	568256	2	True				
ANR	568355	IfStatement	if ( checkList ( & receivedIdList ) == false )		568256	1					
ANR	568356	Condition	checkList ( & receivedIdList ) == false	462:16:13184:13218	568256	0	True				
ANR	568357	EqualityExpression	checkList ( & receivedIdList ) == false		568256	0		==			
ANR	568358	CallExpression	checkList ( & receivedIdList )		568256	0					
ANR	568359	Callee	checkList		568256	0					
ANR	568360	Identifier	checkList		568256	0					
ANR	568361	ArgumentList	& receivedIdList		568256	1					
ANR	568362	Argument	& receivedIdList		568256	0					
ANR	568363	UnaryOperationExpression	& receivedIdList		568256	0					
ANR	568364	UnaryOperator	&		568256	0					
ANR	568365	Identifier	receivedIdList		568256	1					
ANR	568366	Identifier	false		568256	1					
ANR	568367	CompoundStatement		31:54:977:977	568256	1					
ANR	568368	ExpressionStatement	m_state = PASSIVE_STATE	464:16:13295:13318	568256	0	True				
ANR	568369	AssignmentExpression	m_state = PASSIVE_STATE		568256	0		=			
ANR	568370	Identifier	m_state		568256	0					
ANR	568371	Identifier	PASSIVE_STATE		568256	1					
ANR	568372	ExpressionStatement	"printStep ( ""ELECTION_STATE"" , ""PASSIVE_STATE"" )"	465:16:13336:13379	568256	1	True				
ANR	568373	CallExpression	"printStep ( ""ELECTION_STATE"" , ""PASSIVE_STATE"" )"		568256	0					
ANR	568374	Callee	printStep		568256	0					
ANR	568375	Identifier	printStep		568256	0					
ANR	568376	ArgumentList	"""ELECTION_STATE"""		568256	1					
ANR	568377	Argument	"""ELECTION_STATE"""		568256	0					
ANR	568378	PrimaryExpression	"""ELECTION_STATE"""		568256	0					
ANR	568379	Argument	"""PASSIVE_STATE"""		568256	1					
ANR	568380	PrimaryExpression	"""PASSIVE_STATE"""		568256	0					
ANR	568381	BreakStatement	break ;	466:16:13397:13402	568256	2	True				
ANR	568382	IfStatement	if ( m_standAloneMode && m_useReplication )		568256	2					
ANR	568383	Condition	m_standAloneMode && m_useReplication	469:7:13426:13461	568256	0	True				
ANR	568384	AndExpression	m_standAloneMode && m_useReplication		568256	0		&&			
ANR	568385	Identifier	m_standAloneMode		568256	0					
ANR	568386	Identifier	m_useReplication		568256	1					
ANR	568387	CompoundStatement		38:46:1220:1220	568256	1					
ANR	568388	ExpressionStatement	sendReplicationCommand ( HAD_AFTER_ELECTION_STATE )	470:16:13483:13533	568256	0	True				
ANR	568389	CallExpression	sendReplicationCommand ( HAD_AFTER_ELECTION_STATE )		568256	0					
ANR	568390	Callee	sendReplicationCommand		568256	0					
ANR	568391	Identifier	sendReplicationCommand		568256	0					
ANR	568392	ArgumentList	HAD_AFTER_ELECTION_STATE		568256	1					
ANR	568393	Argument	HAD_AFTER_ELECTION_STATE		568256	0					
ANR	568394	Identifier	HAD_AFTER_ELECTION_STATE		568256	0					
ANR	568395	IfStatement	if ( m_standAloneMode )		568256	3					
ANR	568396	Condition	m_standAloneMode	473:16:13600:13615	568256	0	True				
ANR	568397	Identifier	m_standAloneMode		568256	0					
ANR	568398	CompoundStatement		42:35:1374:1374	568256	1					
ANR	568399	ExpressionStatement	m_state = LEADER_STATE	474:16:13637:13659	568256	0	True				
ANR	568400	AssignmentExpression	m_state = LEADER_STATE		568256	0		=			
ANR	568401	Identifier	m_state		568256	0					
ANR	568402	Identifier	LEADER_STATE		568256	1					
ANR	568403	ExpressionStatement	"updateCollectorsClassAd ( ""True"" )"	475:16:13677:13710	568256	1	True				
ANR	568404	CallExpression	"updateCollectorsClassAd ( ""True"" )"		568256	0					
ANR	568405	Callee	updateCollectorsClassAd		568256	0					
ANR	568406	Identifier	updateCollectorsClassAd		568256	0					
ANR	568407	ArgumentList	"""True"""		568256	1					
ANR	568408	Argument	"""True"""		568256	0					
ANR	568409	PrimaryExpression	"""True"""		568256	0					
ANR	568410	ExpressionStatement	"printStep ( ""ELECTION_STATE"" , ""LEADER_STATE"" )"	476:4:13716:13758	568256	2	True				
ANR	568411	CallExpression	"printStep ( ""ELECTION_STATE"" , ""LEADER_STATE"" )"		568256	0					
ANR	568412	Callee	printStep		568256	0					
ANR	568413	Identifier	printStep		568256	0					
ANR	568414	ArgumentList	"""ELECTION_STATE"""		568256	1					
ANR	568415	Argument	"""ELECTION_STATE"""		568256	0					
ANR	568416	PrimaryExpression	"""ELECTION_STATE"""		568256	0					
ANR	568417	Argument	"""LEADER_STATE"""		568256	1					
ANR	568418	PrimaryExpression	"""LEADER_STATE"""		568256	0					
ANR	568419	BreakStatement	break ;	477:16:13776:13781	568256	3	True				
ANR	568420	IdentifierDeclStatement	int returnValue = sendControlCmdToMaster ( CHILD_ON ) ;	481:12:13868:13918	568256	4	True				
ANR	568421	IdentifierDecl	returnValue = sendControlCmdToMaster ( CHILD_ON )		568256	0					
ANR	568422	IdentifierDeclType	int		568256	0					
ANR	568423	Identifier	returnValue		568256	1					
ANR	568424	AssignmentExpression	returnValue = sendControlCmdToMaster ( CHILD_ON )		568256	2		=			
ANR	568425	Identifier	returnValue		568256	0					
ANR	568426	CallExpression	sendControlCmdToMaster ( CHILD_ON )		568256	1					
ANR	568427	Callee	sendControlCmdToMaster		568256	0					
ANR	568428	Identifier	sendControlCmdToMaster		568256	0					
ANR	568429	ArgumentList	CHILD_ON		568256	1					
ANR	568430	Argument	CHILD_ON		568256	0					
ANR	568431	Identifier	CHILD_ON		568256	0					
ANR	568432	IfStatement	if ( returnValue == TRUE && m_useReplication )		568256	5					
ANR	568433	Condition	returnValue == TRUE && m_useReplication	483:16:13937:13975	568256	0	True				
ANR	568434	AndExpression	returnValue == TRUE && m_useReplication		568256	0		&&			
ANR	568435	EqualityExpression	returnValue == TRUE		568256	0		==			
ANR	568436	Identifier	returnValue		568256	0					
ANR	568437	Identifier	TRUE		568256	1					
ANR	568438	Identifier	m_useReplication		568256	1					
ANR	568439	CompoundStatement		52:57:1733:1733	568256	1					
ANR	568440	ExpressionStatement	sendReplicationCommand ( HAD_AFTER_ELECTION_STATE )	484:16:13996:14046	568256	0	True				
ANR	568441	CallExpression	sendReplicationCommand ( HAD_AFTER_ELECTION_STATE )		568256	0					
ANR	568442	Callee	sendReplicationCommand		568256	0					
ANR	568443	Identifier	sendReplicationCommand		568256	0					
ANR	568444	ArgumentList	HAD_AFTER_ELECTION_STATE		568256	1					
ANR	568445	Argument	HAD_AFTER_ELECTION_STATE		568256	0					
ANR	568446	Identifier	HAD_AFTER_ELECTION_STATE		568256	0					
ANR	568447	IfStatement	if ( returnValue == TRUE )		568256	6					
ANR	568448	Condition	returnValue == TRUE	486:16:14078:14096	568256	0	True				
ANR	568449	EqualityExpression	returnValue == TRUE		568256	0		==			
ANR	568450	Identifier	returnValue		568256	0					
ANR	568451	Identifier	TRUE		568256	1					
ANR	568452	CompoundStatement		55:38:1855:1855	568256	1					
ANR	568453	ExpressionStatement	m_state = LEADER_STATE	487:16:14118:14140	568256	0	True				
ANR	568454	AssignmentExpression	m_state = LEADER_STATE		568256	0		=			
ANR	568455	Identifier	m_state		568256	0					
ANR	568456	Identifier	LEADER_STATE		568256	1					
ANR	568457	ExpressionStatement	"updateCollectorsClassAd ( ""True"" )"	488:16:14158:14191	568256	1	True				
ANR	568458	CallExpression	"updateCollectorsClassAd ( ""True"" )"		568256	0					
ANR	568459	Callee	updateCollectorsClassAd		568256	0					
ANR	568460	Identifier	updateCollectorsClassAd		568256	0					
ANR	568461	ArgumentList	"""True"""		568256	1					
ANR	568462	Argument	"""True"""		568256	0					
ANR	568463	PrimaryExpression	"""True"""		568256	0					
ANR	568464	ExpressionStatement	"printStep ( ""ELECTION_STATE"" , ""LEADER_STATE"" )"	489:16:14209:14254	568256	2	True				
ANR	568465	CallExpression	"printStep ( ""ELECTION_STATE"" , ""LEADER_STATE"" )"		568256	0					
ANR	568466	Callee	printStep		568256	0					
ANR	568467	Identifier	printStep		568256	0					
ANR	568468	ArgumentList	"""ELECTION_STATE"""		568256	1					
ANR	568469	Argument	"""ELECTION_STATE"""		568256	0					
ANR	568470	PrimaryExpression	"""ELECTION_STATE"""		568256	0					
ANR	568471	Argument	"""LEADER_STATE"""		568256	1					
ANR	568472	PrimaryExpression	"""LEADER_STATE"""		568256	0					
ANR	568473	ElseStatement	else		568256	0					
ANR	568474	CompoundStatement		59:19:2030:2030	568256	0					
ANR	568475	Statement	dprintf	494:16:14479:14485	568256	0	True				
ANR	568476	Statement	(	494:23:14486:14486	568256	1	True				
ANR	568477	Statement	D_FULLDEBUG	494:25:14488:14498	568256	2	True				
ANR	568478	Statement	","	494:36:14499:14499	568256	3	True				
ANR	568479	Statement	"""id %d, cannot send CHILD_ON cmd,"""	495:7:14508:14541	568256	4	True				
ANR	568480	Statement	""" stay in ELECTION state\\n"""	496:7:14550:14576	568256	5	True				
ANR	568481	Statement	","	496:34:14577:14577	568256	6	True				
ANR	568482	Statement	daemonCore	497:20:14599:14608	568256	7	True				
ANR	568483	Statement	->	497:30:14609:14610	568256	8	True				
ANR	568484	Statement	getpid	497:32:14611:14616	568256	9	True				
ANR	568485	Statement	(	497:38:14617:14617	568256	10	True				
ANR	568486	Statement	)	497:39:14618:14618	568256	11	True				
ANR	568487	Statement	)	497:41:14620:14620	568256	12	True				
ANR	568488	ExpressionStatement		497:42:14621:14621	568256	13	True				
ANR	568489	ExpressionStatement	"utilCrucialError ( """" )"	498:16:14639:14659	568256	14	True				
ANR	568490	CallExpression	"utilCrucialError ( """" )"		568256	0					
ANR	568491	Callee	utilCrucialError		568256	0					
ANR	568492	Identifier	utilCrucialError		568256	0					
ANR	568493	ArgumentList	""""""		568256	1					
ANR	568494	Argument	""""""		568256	0					
ANR	568495	PrimaryExpression	""""""		568256	0					
ANR	568496	BreakStatement	break ;	501:12:14688:14693	568256	7	True				
ANR	568497	Label	case LEADER_STATE :	503:8:14707:14724	568256	9	True				
ANR	568498	Identifier	LEADER_STATE		568256	0					
ANR	568499	IfStatement	if ( ! receivedAliveList . IsEmpty ( ) && checkList ( & receivedAliveList ) == false )		568256	10					
ANR	568500	Condition	! receivedAliveList . IsEmpty ( ) && checkList ( & receivedAliveList ) == false	504:10:14736:14824	568256	0	True				
ANR	568501	AndExpression	! receivedAliveList . IsEmpty ( ) && checkList ( & receivedAliveList ) == false		568256	0		&&			
ANR	568502	UnaryOperationExpression	! receivedAliveList . IsEmpty ( )		568256	0					
ANR	568503	UnaryOperator	!		568256	0					
ANR	568504	CallExpression	receivedAliveList . IsEmpty ( )		568256	1					
ANR	568505	Callee	receivedAliveList . IsEmpty		568256	0					
ANR	568506	MemberAccess	receivedAliveList . IsEmpty		568256	0					
ANR	568507	Identifier	receivedAliveList		568256	0					
ANR	568508	Identifier	IsEmpty		568256	1					
ANR	568509	ArgumentList			568256	1					
ANR	568510	EqualityExpression	checkList ( & receivedAliveList ) == false		568256	1		==			
ANR	568511	CallExpression	checkList ( & receivedAliveList )		568256	0					
ANR	568512	Callee	checkList		568256	0					
ANR	568513	Identifier	checkList		568256	0					
ANR	568514	ArgumentList	& receivedAliveList		568256	1					
ANR	568515	Argument	& receivedAliveList		568256	0					
ANR	568516	UnaryOperationExpression	& receivedAliveList		568256	0					
ANR	568517	UnaryOperator	&		568256	0					
ANR	568518	Identifier	receivedAliveList		568256	1					
ANR	568519	Identifier	false		568256	1					
ANR	568520	CompoundStatement		74:59:2583:2583	568256	1					
ANR	568521	ExpressionStatement	"printStep ( ""LEADER_STATE"" , ""PASSIVE_STATE"" )"	507:16:14892:14935	568256	0	True				
ANR	568522	CallExpression	"printStep ( ""LEADER_STATE"" , ""PASSIVE_STATE"" )"		568256	0					
ANR	568523	Callee	printStep		568256	0					
ANR	568524	Identifier	printStep		568256	0					
ANR	568525	ArgumentList	"""LEADER_STATE"""		568256	1					
ANR	568526	Argument	"""LEADER_STATE"""		568256	0					
ANR	568527	PrimaryExpression	"""LEADER_STATE"""		568256	0					
ANR	568528	Argument	"""PASSIVE_STATE"""		568256	1					
ANR	568529	PrimaryExpression	"""PASSIVE_STATE"""		568256	0					
ANR	568530	ExpressionStatement	m_state = PASSIVE_STATE	508:16:14953:14976	568256	1	True				
ANR	568531	AssignmentExpression	m_state = PASSIVE_STATE		568256	0		=			
ANR	568532	Identifier	m_state		568256	0					
ANR	568533	Identifier	PASSIVE_STATE		568256	1					
ANR	568534	ExpressionStatement	"updateCollectorsClassAd ( ""False"" )"	509:16:14994:15028	568256	2	True				
ANR	568535	CallExpression	"updateCollectorsClassAd ( ""False"" )"		568256	0					
ANR	568536	Callee	updateCollectorsClassAd		568256	0					
ANR	568537	Identifier	updateCollectorsClassAd		568256	0					
ANR	568538	ArgumentList	"""False"""		568256	1					
ANR	568539	Argument	"""False"""		568256	0					
ANR	568540	PrimaryExpression	"""False"""		568256	0					
ANR	568541	IfStatement	if ( m_useReplication )		568256	3					
ANR	568542	Condition	m_useReplication	511:20:15051:15066	568256	0	True				
ANR	568543	Identifier	m_useReplication		568256	0					
ANR	568544	CompoundStatement		80:39:2825:2825	568256	1					
ANR	568545	ExpressionStatement	sendReplicationCommand ( HAD_AFTER_LEADER_STATE )	512:20:15092:15140	568256	0	True				
ANR	568546	CallExpression	sendReplicationCommand ( HAD_AFTER_LEADER_STATE )		568256	0					
ANR	568547	Callee	sendReplicationCommand		568256	0					
ANR	568548	Identifier	sendReplicationCommand		568256	0					
ANR	568549	ArgumentList	HAD_AFTER_LEADER_STATE		568256	1					
ANR	568550	Argument	HAD_AFTER_LEADER_STATE		568256	0					
ANR	568551	Identifier	HAD_AFTER_LEADER_STATE		568256	0					
ANR	568552	IfStatement	if ( ! m_standAloneMode )		568256	4					
ANR	568553	Condition	! m_standAloneMode	514:20:15180:15197	568256	0	True				
ANR	568554	UnaryOperationExpression	! m_standAloneMode		568256	0					
ANR	568555	UnaryOperator	!		568256	0					
ANR	568556	Identifier	m_standAloneMode		568256	1					
ANR	568557	CompoundStatement		83:41:2956:2956	568256	1					
ANR	568558	ExpressionStatement	sendControlCmdToMaster ( CHILD_OFF_FAST )	515:20:15223:15263	568256	0	True				
ANR	568559	CallExpression	sendControlCmdToMaster ( CHILD_OFF_FAST )		568256	0					
ANR	568560	Callee	sendControlCmdToMaster		568256	0					
ANR	568561	Identifier	sendControlCmdToMaster		568256	0					
ANR	568562	ArgumentList	CHILD_OFF_FAST		568256	1					
ANR	568563	Argument	CHILD_OFF_FAST		568256	0					
ANR	568564	Identifier	CHILD_OFF_FAST		568256	0					
ANR	568565	BreakStatement	break ;	518:16:15300:15305	568256	5	True				
ANR	568566	IfStatement	if ( m_useReplication )		568256	11					
ANR	568567	Condition	m_useReplication	520:16:15337:15352	568256	0	True				
ANR	568568	Identifier	m_useReplication		568256	0					
ANR	568569	CompoundStatement		89:35:3111:3111	568256	1					
ANR	568570	ExpressionStatement	sendReplicationCommand ( HAD_IN_LEADER_STATE )	521:16:15374:15419	568256	0	True				
ANR	568571	CallExpression	sendReplicationCommand ( HAD_IN_LEADER_STATE )		568256	0					
ANR	568572	Callee	sendReplicationCommand		568256	0					
ANR	568573	Identifier	sendReplicationCommand		568256	0					
ANR	568574	ArgumentList	HAD_IN_LEADER_STATE		568256	1					
ANR	568575	Argument	HAD_IN_LEADER_STATE		568256	0					
ANR	568576	Identifier	HAD_IN_LEADER_STATE		568256	0					
ANR	568577	ExpressionStatement	"printStep ( ""LEADER_STATE"" , ""LEADER_STATE"" )"	523:12:15447:15489	568256	12	True				
ANR	568578	CallExpression	"printStep ( ""LEADER_STATE"" , ""LEADER_STATE"" )"		568256	0					
ANR	568579	Callee	printStep		568256	0					
ANR	568580	Identifier	printStep		568256	0					
ANR	568581	ArgumentList	"""LEADER_STATE"""		568256	1					
ANR	568582	Argument	"""LEADER_STATE"""		568256	0					
ANR	568583	PrimaryExpression	"""LEADER_STATE"""		568256	0					
ANR	568584	Argument	"""LEADER_STATE"""		568256	1					
ANR	568585	PrimaryExpression	"""LEADER_STATE"""		568256	0					
ANR	568586	BreakStatement	break ;	525:12:15504:15509	568256	13	True				
ANR	568587	ExpressionStatement	clearBuffers ( )	527:4:15532:15546	568256	2	True				
ANR	568588	CallExpression	clearBuffers ( )		568256	0					
ANR	568589	Callee	clearBuffers		568256	0					
ANR	568590	Identifier	clearBuffers		568256	0					
ANR	568591	ArgumentList			568256	1					
ANR	568592	ReturnType	void		568256	1					
ANR	568593	Identifier	HADStateMachine :: step		568256	2					
ANR	568594	ParameterList			568256	3					
ANR	568595	CFGEntryNode	ENTRY		568256		True				
ANR	568596	CFGExitNode	EXIT		568256		True				
ANR	568597	Symbol	LEADER_STATE		568256						
ANR	568598	Symbol	returnValue		568256						
ANR	568599	Symbol	receivedAliveList . IsEmpty		568256						
ANR	568600	Symbol	false		568256						
ANR	568601	Symbol	m_isPrimary		568256						
ANR	568602	Symbol	TRUE		568256						
ANR	568603	Symbol	& receivedIdList		568256						
ANR	568604	Symbol	& receivedAliveList		568256						
ANR	568605	Symbol	HAD_AFTER_ELECTION_STATE		568256						
ANR	568606	Symbol	m_state		568256						
ANR	568607	Symbol	m_standAloneMode		568256						
ANR	568608	Symbol	CHILD_ON		568256						
ANR	568609	Symbol	ELECTION_STATE		568256						
ANR	568610	Symbol	HAD_IN_LEADER_STATE		568256						
ANR	568611	Symbol	CHILD_OFF_FAST		568256						
ANR	568612	Symbol	PASSIVE_STATE		568256						
ANR	568613	Symbol	checkList		568256						
ANR	568614	Symbol	receivedAliveList		568256						
ANR	568615	Symbol	HAD_AFTER_LEADER_STATE		568256						
ANR	568616	Symbol	m_useReplication		568256						
ANR	568617	Symbol	sendControlCmdToMaster		568256						
ANR	568618	Function	HADStateMachine :: sendMessages	533:0:15628:15878							
ANR	568619	FunctionDef	HADStateMachine :: sendMessages ()		568618	0					
ANR	568620	CompoundStatement		535:0:15669:15878	568618	0					
ANR	568621	SwitchStatement	switch ( m_state )		568618	0					
ANR	568622	Condition	m_state	536:11:15682:15688	568618	0	True				
ANR	568623	Identifier	m_state		568618	0					
ANR	568624	CompoundStatement		2:21:22:22	568618	1					
ANR	568625	Label	case ELECTION_STATE :	537:3:15697:15716	568618	0	True				
ANR	568626	Identifier	ELECTION_STATE		568618	0					
ANR	568627	ReturnStatement	return sendCommandToOthers ( HAD_SEND_ID_CMD ) ;	538:4:15722:15767	568618	1	True				
ANR	568628	CallExpression	sendCommandToOthers ( HAD_SEND_ID_CMD )		568618	0					
ANR	568629	Callee	sendCommandToOthers		568618	0					
ANR	568630	Identifier	sendCommandToOthers		568618	0					
ANR	568631	ArgumentList	HAD_SEND_ID_CMD		568618	1					
ANR	568632	Argument	HAD_SEND_ID_CMD		568618	0					
ANR	568633	Identifier	HAD_SEND_ID_CMD		568618	0					
ANR	568634	Label	case LEADER_STATE :	539:3:15772:15789	568618	2	True				
ANR	568635	Identifier	LEADER_STATE		568618	0					
ANR	568636	ReturnStatement	return sendCommandToOthers ( HAD_ALIVE_CMD ) ;	540:4:15795:15839	568618	3	True				
ANR	568637	CallExpression	sendCommandToOthers ( HAD_ALIVE_CMD )		568618	0					
ANR	568638	Callee	sendCommandToOthers		568618	0					
ANR	568639	Identifier	sendCommandToOthers		568618	0					
ANR	568640	ArgumentList	HAD_ALIVE_CMD		568618	1					
ANR	568641	Argument	HAD_ALIVE_CMD		568618	0					
ANR	568642	Identifier	HAD_ALIVE_CMD		568618	0					
ANR	568643	Label	default :	541:3:15844:15852	568618	4	True				
ANR	568644	Identifier	default		568618	0					
ANR	568645	ReturnStatement	return false ;	542:4:15858:15870	568618	5	True				
ANR	568646	Identifier	false		568618	0					
ANR	568647	ReturnType	bool		568618	1					
ANR	568648	Identifier	HADStateMachine :: sendMessages		568618	2					
ANR	568649	ParameterList			568618	3					
ANR	568650	CFGEntryNode	ENTRY		568618		True				
ANR	568651	CFGExitNode	EXIT		568618		True				
ANR	568652	Symbol	m_state		568618						
ANR	568653	Symbol	false		568618						
ANR	568654	Symbol	HAD_ALIVE_CMD		568618						
ANR	568655	Symbol	HAD_SEND_ID_CMD		568618						
ANR	568656	Symbol	sendCommandToOthers		568618						
ANR	568657	Function	HADStateMachine :: sendCommandToOthers	551:0:16039:17255							
ANR	568658	FunctionDef	HADStateMachine :: sendCommandToOthers (int comm)		568657	0					
ANR	568659	CompoundStatement		553:0:16093:17255	568657	0					
ANR	568660	IdentifierDeclStatement	char * addr ;	555:4:16100:16110	568657	0	True				
ANR	568661	IdentifierDecl	* addr		568657	0					
ANR	568662	IdentifierDeclType	char *		568657	0					
ANR	568663	Identifier	addr		568657	1					
ANR	568664	ExpressionStatement	m_otherHadIps . rewind ( )	556:4:16116:16138	568657	1	True				
ANR	568665	CallExpression	m_otherHadIps . rewind ( )		568657	0					
ANR	568666	Callee	m_otherHadIps . rewind		568657	0					
ANR	568667	MemberAccess	m_otherHadIps . rewind		568657	0					
ANR	568668	Identifier	m_otherHadIps		568657	0					
ANR	568669	Identifier	rewind		568657	1					
ANR	568670	ArgumentList			568657	1					
ANR	568671	WhileStatement	while ( ( addr = m_otherHadIps . next ( ) ) )		568657	2					
ANR	568672	Condition	addr = m_otherHadIps . next ( )	557:11:16151:16179	568657	0	True				
ANR	568673	AssignmentExpression	addr = m_otherHadIps . next ( )		568657	0		=			
ANR	568674	Identifier	addr		568657	0					
ANR	568675	CallExpression	m_otherHadIps . next ( )		568657	1					
ANR	568676	Callee	m_otherHadIps . next		568657	0					
ANR	568677	MemberAccess	m_otherHadIps . next		568657	0					
ANR	568678	Identifier	m_otherHadIps		568657	0					
ANR	568679	Identifier	next		568657	1					
ANR	568680	ArgumentList			568657	1					
ANR	568681	CompoundStatement		23:8:580:594	568657	1					
ANR	568682	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""send command %s(%d) to %s\\n"" , utilToString ( comm ) , comm , addr )"	559:8:16194:16281	568657	0	True				
ANR	568683	CallExpression	"dprintf ( D_FULLDEBUG , ""send command %s(%d) to %s\\n"" , utilToString ( comm ) , comm , addr )"		568657	0					
ANR	568684	Callee	dprintf		568657	0					
ANR	568685	Identifier	dprintf		568657	0					
ANR	568686	ArgumentList	D_FULLDEBUG		568657	1					
ANR	568687	Argument	D_FULLDEBUG		568657	0					
ANR	568688	Identifier	D_FULLDEBUG		568657	0					
ANR	568689	Argument	"""send command %s(%d) to %s\\n"""		568657	1					
ANR	568690	PrimaryExpression	"""send command %s(%d) to %s\\n"""		568657	0					
ANR	568691	Argument	utilToString ( comm )		568657	2					
ANR	568692	CallExpression	utilToString ( comm )		568657	0					
ANR	568693	Callee	utilToString		568657	0					
ANR	568694	Identifier	utilToString		568657	0					
ANR	568695	ArgumentList	comm		568657	1					
ANR	568696	Argument	comm		568657	0					
ANR	568697	Identifier	comm		568657	0					
ANR	568698	Argument	comm		568657	3					
ANR	568699	Identifier	comm		568657	0					
ANR	568700	Argument	addr		568657	4					
ANR	568701	Identifier	addr		568657	0					
ANR	568702	IdentifierDeclStatement	"Daemon d ( DT_ANY , addr ) ;"	562:8:16292:16316	568657	1	True				
ANR	568703	IdentifierDecl	"d ( DT_ANY , addr )"		568657	0					
ANR	568704	IdentifierDeclType	Daemon		568657	0					
ANR	568705	Identifier	d		568657	1					
ANR	568706	Expression	"DT_ANY , addr"		568657	2					
ANR	568707	Identifier	DT_ANY		568657	0					
ANR	568708	Identifier	addr		568657	1					
ANR	568709	IdentifierDeclStatement	ReliSock sock ;	563:8:16326:16339	568657	2	True				
ANR	568710	IdentifierDecl	sock		568657	0					
ANR	568711	IdentifierDeclType	ReliSock		568657	0					
ANR	568712	Identifier	sock		568657	1					
ANR	568713	ExpressionStatement	sock . timeout ( m_connectionTimeout )	565:8:16350:16385	568657	3	True				
ANR	568714	CallExpression	sock . timeout ( m_connectionTimeout )		568657	0					
ANR	568715	Callee	sock . timeout		568657	0					
ANR	568716	MemberAccess	sock . timeout		568657	0					
ANR	568717	Identifier	sock		568657	0					
ANR	568718	Identifier	timeout		568657	1					
ANR	568719	ArgumentList	m_connectionTimeout		568657	1					
ANR	568720	Argument	m_connectionTimeout		568657	0					
ANR	568721	Identifier	m_connectionTimeout		568657	0					
ANR	568722	ExpressionStatement	sock . doNotEnforceMinimalCONNECT_TIMEOUT ( )	566:8:16395:16436	568657	4	True				
ANR	568723	CallExpression	sock . doNotEnforceMinimalCONNECT_TIMEOUT ( )		568657	0					
ANR	568724	Callee	sock . doNotEnforceMinimalCONNECT_TIMEOUT		568657	0					
ANR	568725	MemberAccess	sock . doNotEnforceMinimalCONNECT_TIMEOUT		568657	0					
ANR	568726	Identifier	sock		568657	0					
ANR	568727	Identifier	doNotEnforceMinimalCONNECT_TIMEOUT		568657	1					
ANR	568728	ArgumentList			568657	1					
ANR	568729	IfStatement	"if ( ! sock . connect ( addr , 0 , false ) )"		568657	5					
ANR	568730	Condition	"! sock . connect ( addr , 0 , false )"	569:11:16503:16533	568657	0	True				
ANR	568731	UnaryOperationExpression	"! sock . connect ( addr , 0 , false )"		568657	0					
ANR	568732	UnaryOperator	!		568657	0					
ANR	568733	CallExpression	"sock . connect ( addr , 0 , false )"		568657	1					
ANR	568734	Callee	sock . connect		568657	0					
ANR	568735	MemberAccess	sock . connect		568657	0					
ANR	568736	Identifier	sock		568657	0					
ANR	568737	Identifier	connect		568657	1					
ANR	568738	ArgumentList	addr		568657	1					
ANR	568739	Argument	addr		568657	0					
ANR	568740	Identifier	addr		568657	0					
ANR	568741	Argument	0		568657	1					
ANR	568742	PrimaryExpression	0		568657	0					
ANR	568743	Argument	false		568657	2					
ANR	568744	Identifier	false		568657	0					
ANR	568745	CompoundStatement		17:44:442:442	568657	1					
ANR	568746	ExpressionStatement	"dprintf ( D_ALWAYS , ""cannot connect to addr %s\\n"" , addr )"	570:12:16550:16605	568657	0	True				
ANR	568747	CallExpression	"dprintf ( D_ALWAYS , ""cannot connect to addr %s\\n"" , addr )"		568657	0					
ANR	568748	Callee	dprintf		568657	0					
ANR	568749	Identifier	dprintf		568657	0					
ANR	568750	ArgumentList	D_ALWAYS		568657	1					
ANR	568751	Argument	D_ALWAYS		568657	0					
ANR	568752	Identifier	D_ALWAYS		568657	0					
ANR	568753	Argument	"""cannot connect to addr %s\\n"""		568657	1					
ANR	568754	PrimaryExpression	"""cannot connect to addr %s\\n"""		568657	0					
ANR	568755	Argument	addr		568657	2					
ANR	568756	Identifier	addr		568657	0					
ANR	568757	ExpressionStatement	sock . close ( )	571:12:16619:16631	568657	1	True				
ANR	568758	CallExpression	sock . close ( )		568657	0					
ANR	568759	Callee	sock . close		568657	0					
ANR	568760	MemberAccess	sock . close		568657	0					
ANR	568761	Identifier	sock		568657	0					
ANR	568762	Identifier	close		568657	1					
ANR	568763	ArgumentList			568657	1					
ANR	568764	ContinueStatement	continue ;	572:12:16645:16653	568657	2	True				
ANR	568765	IdentifierDeclStatement	int cmd = comm ;	575:8:16674:16688	568657	6	True				
ANR	568766	IdentifierDecl	cmd = comm		568657	0					
ANR	568767	IdentifierDeclType	int		568657	0					
ANR	568768	Identifier	cmd		568657	1					
ANR	568769	AssignmentExpression	cmd = comm		568657	2		=			
ANR	568770	Identifier	comm		568657	0					
ANR	568771	Identifier	comm		568657	1					
ANR	568772	IfStatement	"if ( ! d . startCommand ( cmd , & sock , m_connectionTimeout ) )"		568657	7					
ANR	568773	Condition	"! d . startCommand ( cmd , & sock , m_connectionTimeout )"	577:12:16767:16816	568657	0	True				
ANR	568774	UnaryOperationExpression	"! d . startCommand ( cmd , & sock , m_connectionTimeout )"		568657	0					
ANR	568775	UnaryOperator	!		568657	0					
ANR	568776	CallExpression	"d . startCommand ( cmd , & sock , m_connectionTimeout )"		568657	1					
ANR	568777	Callee	d . startCommand		568657	0					
ANR	568778	MemberAccess	d . startCommand		568657	0					
ANR	568779	Identifier	d		568657	0					
ANR	568780	Identifier	startCommand		568657	1					
ANR	568781	ArgumentList	cmd		568657	1					
ANR	568782	Argument	cmd		568657	0					
ANR	568783	Identifier	cmd		568657	0					
ANR	568784	Argument	& sock		568657	1					
ANR	568785	UnaryOperationExpression	& sock		568657	0					
ANR	568786	UnaryOperator	&		568657	0					
ANR	568787	Identifier	sock		568657	1					
ANR	568788	Argument	m_connectionTimeout		568657	2					
ANR	568789	Identifier	m_connectionTimeout		568657	0					
ANR	568790	CompoundStatement		25:65:726:726	568657	1					
ANR	568791	ExpressionStatement	"dprintf ( D_ALWAYS , ""cannot start command %s(%d) to addr %s\\n"" , utilToString ( comm ) , cmd , addr )"	578:12:16834:16930	568657	0	True				
ANR	568792	CallExpression	"dprintf ( D_ALWAYS , ""cannot start command %s(%d) to addr %s\\n"" , utilToString ( comm ) , cmd , addr )"		568657	0					
ANR	568793	Callee	dprintf		568657	0					
ANR	568794	Identifier	dprintf		568657	0					
ANR	568795	ArgumentList	D_ALWAYS		568657	1					
ANR	568796	Argument	D_ALWAYS		568657	0					
ANR	568797	Identifier	D_ALWAYS		568657	0					
ANR	568798	Argument	"""cannot start command %s(%d) to addr %s\\n"""		568657	1					
ANR	568799	PrimaryExpression	"""cannot start command %s(%d) to addr %s\\n"""		568657	0					
ANR	568800	Argument	utilToString ( comm )		568657	2					
ANR	568801	CallExpression	utilToString ( comm )		568657	0					
ANR	568802	Callee	utilToString		568657	0					
ANR	568803	Identifier	utilToString		568657	0					
ANR	568804	ArgumentList	comm		568657	1					
ANR	568805	Argument	comm		568657	0					
ANR	568806	Identifier	comm		568657	0					
ANR	568807	Argument	cmd		568657	3					
ANR	568808	Identifier	cmd		568657	0					
ANR	568809	Argument	addr		568657	4					
ANR	568810	Identifier	addr		568657	0					
ANR	568811	ExpressionStatement	sock . close ( )	580:12:16944:16956	568657	1	True				
ANR	568812	CallExpression	sock . close ( )		568657	0					
ANR	568813	Callee	sock . close		568657	0					
ANR	568814	MemberAccess	sock . close		568657	0					
ANR	568815	Identifier	sock		568657	0					
ANR	568816	Identifier	close		568657	1					
ANR	568817	ArgumentList			568657	1					
ANR	568818	ContinueStatement	continue ;	581:12:16970:16978	568657	2	True				
ANR	568819	IfStatement	if ( ! m_classAd . put ( sock ) || ! sock . end_of_message ( ) )		568657	8					
ANR	568820	Condition	! m_classAd . put ( sock ) || ! sock . end_of_message ( )	584:11:17002:17048	568657	0	True				
ANR	568821	OrExpression	! m_classAd . put ( sock ) || ! sock . end_of_message ( )		568657	0		||			
ANR	568822	UnaryOperationExpression	! m_classAd . put ( sock )		568657	0					
ANR	568823	UnaryOperator	!		568657	0					
ANR	568824	CallExpression	m_classAd . put ( sock )		568657	1					
ANR	568825	Callee	m_classAd . put		568657	0					
ANR	568826	MemberAccess	m_classAd . put		568657	0					
ANR	568827	Identifier	m_classAd		568657	0					
ANR	568828	Identifier	put		568657	1					
ANR	568829	ArgumentList	sock		568657	1					
ANR	568830	Argument	sock		568657	0					
ANR	568831	Identifier	sock		568657	0					
ANR	568832	UnaryOperationExpression	! sock . end_of_message ( )		568657	1					
ANR	568833	UnaryOperator	!		568657	0					
ANR	568834	CallExpression	sock . end_of_message ( )		568657	1					
ANR	568835	Callee	sock . end_of_message		568657	0					
ANR	568836	MemberAccess	sock . end_of_message		568657	0					
ANR	568837	Identifier	sock		568657	0					
ANR	568838	Identifier	end_of_message		568657	1					
ANR	568839	ArgumentList			568657	1					
ANR	568840	CompoundStatement		32:60:957:957	568657	1					
ANR	568841	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to send classad to peer\\n"" )"	585:12:17065:17119	568657	0	True				
ANR	568842	CallExpression	"dprintf ( D_ALWAYS , ""Failed to send classad to peer\\n"" )"		568657	0					
ANR	568843	Callee	dprintf		568657	0					
ANR	568844	Identifier	dprintf		568657	0					
ANR	568845	ArgumentList	D_ALWAYS		568657	1					
ANR	568846	Argument	D_ALWAYS		568657	0					
ANR	568847	Identifier	D_ALWAYS		568657	0					
ANR	568848	Argument	"""Failed to send classad to peer\\n"""		568657	1					
ANR	568849	PrimaryExpression	"""Failed to send classad to peer\\n"""		568657	0					
ANR	568850	ElseStatement	else		568657	0					
ANR	568851	CompoundStatement		34:15:1042:1042	568657	0					
ANR	568852	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Sent classad to peer\\n"" )"	587:12:17150:17197	568657	0	True				
ANR	568853	CallExpression	"dprintf ( D_FULLDEBUG , ""Sent classad to peer\\n"" )"		568657	0					
ANR	568854	Callee	dprintf		568657	0					
ANR	568855	Identifier	dprintf		568657	0					
ANR	568856	ArgumentList	D_FULLDEBUG		568657	1					
ANR	568857	Argument	D_FULLDEBUG		568657	0					
ANR	568858	Identifier	D_FULLDEBUG		568657	0					
ANR	568859	Argument	"""Sent classad to peer\\n"""		568657	1					
ANR	568860	PrimaryExpression	"""Sent classad to peer\\n"""		568657	0					
ANR	568861	ExpressionStatement	sock . close ( )	589:8:17217:17229	568657	9	True				
ANR	568862	CallExpression	sock . close ( )		568657	0					
ANR	568863	Callee	sock . close		568657	0					
ANR	568864	MemberAccess	sock . close		568657	0					
ANR	568865	Identifier	sock		568657	0					
ANR	568866	Identifier	close		568657	1					
ANR	568867	ArgumentList			568657	1					
ANR	568868	ReturnStatement	return true ;	592:4:17242:17253	568657	3	True				
ANR	568869	Identifier	true		568657	0					
ANR	568870	ReturnType	bool		568657	1					
ANR	568871	Identifier	HADStateMachine :: sendCommandToOthers		568657	2					
ANR	568872	ParameterList	int comm		568657	3					
ANR	568873	Parameter	int comm	552:38:16082:16089	568657	0	True				
ANR	568874	ParameterType	int		568657	0					
ANR	568875	Identifier	comm		568657	1					
ANR	568876	CFGEntryNode	ENTRY		568657		True				
ANR	568877	CFGExitNode	EXIT		568657		True				
ANR	568878	Symbol	comm		568657						
ANR	568879	Symbol	d		568657						
ANR	568880	Symbol	false		568657						
ANR	568881	Symbol	D_ALWAYS		568657						
ANR	568882	Symbol	D_FULLDEBUG		568657						
ANR	568883	Symbol	m_otherHadIps		568657						
ANR	568884	Symbol	utilToString		568657						
ANR	568885	Symbol	& sock		568657						
ANR	568886	Symbol	m_classAd . put		568657						
ANR	568887	Symbol	sock		568657						
ANR	568888	Symbol	d . startCommand		568657						
ANR	568889	Symbol	sock . connect		568657						
ANR	568890	Symbol	sock . end_of_message		568657						
ANR	568891	Symbol	true		568657						
ANR	568892	Symbol	cmd		568657						
ANR	568893	Symbol	addr		568657						
ANR	568894	Symbol	m_connectionTimeout		568657						
ANR	568895	Symbol	m_classAd		568657						
ANR	568896	Symbol	m_otherHadIps . next		568657						
ANR	568897	Function	HADStateMachine :: sendReplicationCommand	600:0:17440:18893							
ANR	568898	FunctionDef	HADStateMachine :: sendReplicationCommand (int command)		568897	0					
ANR	568899	CompoundStatement		602:0:17500:18893	568897	0					
ANR	568900	IdentifierDeclStatement	ReliSock sock ;	603:4:17506:17519	568897	0	True				
ANR	568901	IdentifierDecl	sock		568897	0					
ANR	568902	IdentifierDeclType	ReliSock		568897	0					
ANR	568903	Identifier	sock		568897	1					
ANR	568904	ExpressionStatement	sock . timeout ( m_connectionTimeout )	605:4:17526:17561	568897	1	True				
ANR	568905	CallExpression	sock . timeout ( m_connectionTimeout )		568897	0					
ANR	568906	Callee	sock . timeout		568897	0					
ANR	568907	MemberAccess	sock . timeout		568897	0					
ANR	568908	Identifier	sock		568897	0					
ANR	568909	Identifier	timeout		568897	1					
ANR	568910	ArgumentList	m_connectionTimeout		568897	1					
ANR	568911	Argument	m_connectionTimeout		568897	0					
ANR	568912	Identifier	m_connectionTimeout		568897	0					
ANR	568913	ExpressionStatement	sock . doNotEnforceMinimalCONNECT_TIMEOUT ( )	606:4:17567:17608	568897	2	True				
ANR	568914	CallExpression	sock . doNotEnforceMinimalCONNECT_TIMEOUT ( )		568897	0					
ANR	568915	Callee	sock . doNotEnforceMinimalCONNECT_TIMEOUT		568897	0					
ANR	568916	MemberAccess	sock . doNotEnforceMinimalCONNECT_TIMEOUT		568897	0					
ANR	568917	Identifier	sock		568897	0					
ANR	568918	Identifier	doNotEnforceMinimalCONNECT_TIMEOUT		568897	1					
ANR	568919	ArgumentList			568897	1					
ANR	568920	IfStatement	if ( ! m_replicationDaemonSinfulString )		568897	3					
ANR	568921	Condition	! m_replicationDaemonSinfulString	609:6:17666:17697	568897	0	True				
ANR	568922	UnaryOperationExpression	! m_replicationDaemonSinfulString		568897	0					
ANR	568923	UnaryOperator	!		568897	0					
ANR	568924	Identifier	m_replicationDaemonSinfulString		568897	1					
ANR	568925	CompoundStatement		8:41:200:200	568897	1					
ANR	568926	ExpressionStatement	"EXCEPT ( ""HAD: Replication sinful string invalid!"" )"	610:2:17705:17756	568897	0	True				
ANR	568927	CallExpression	"EXCEPT ( ""HAD: Replication sinful string invalid!"" )"		568897	0					
ANR	568928	Callee	EXCEPT		568897	0					
ANR	568929	Identifier	EXCEPT		568897	0					
ANR	568930	ArgumentList	"""HAD: Replication sinful string invalid!"""		568897	1					
ANR	568931	Argument	"""HAD: Replication sinful string invalid!"""		568897	0					
ANR	568932	PrimaryExpression	"""HAD: Replication sinful string invalid!"""		568897	0					
ANR	568933	IfStatement	"if ( ! sock . connect ( m_replicationDaemonSinfulString , 0 , false ) )"		568897	4					
ANR	568934	Condition	"! sock . connect ( m_replicationDaemonSinfulString , 0 , false )"	612:7:17768:17824	568897	0	True				
ANR	568935	UnaryOperationExpression	"! sock . connect ( m_replicationDaemonSinfulString , 0 , false )"		568897	0					
ANR	568936	UnaryOperator	!		568897	0					
ANR	568937	CallExpression	"sock . connect ( m_replicationDaemonSinfulString , 0 , false )"		568897	1					
ANR	568938	Callee	sock . connect		568897	0					
ANR	568939	MemberAccess	sock . connect		568897	0					
ANR	568940	Identifier	sock		568897	0					
ANR	568941	Identifier	connect		568897	1					
ANR	568942	ArgumentList	m_replicationDaemonSinfulString		568897	1					
ANR	568943	Argument	m_replicationDaemonSinfulString		568897	0					
ANR	568944	Identifier	m_replicationDaemonSinfulString		568897	0					
ANR	568945	Argument	0		568897	1					
ANR	568946	PrimaryExpression	0		568897	0					
ANR	568947	Argument	false		568897	2					
ANR	568948	Identifier	false		568897	0					
ANR	568949	CompoundStatement		11:67:327:327	568897	1					
ANR	568950	ExpressionStatement	"dprintf ( D_ALWAYS , ""cannot connect to replication daemon, addr %s\\n"" , m_replicationDaemonSinfulString )"	613:8:17838:17951	568897	0	True				
ANR	568951	CallExpression	"dprintf ( D_ALWAYS , ""cannot connect to replication daemon, addr %s\\n"" , m_replicationDaemonSinfulString )"		568897	0					
ANR	568952	Callee	dprintf		568897	0					
ANR	568953	Identifier	dprintf		568897	0					
ANR	568954	ArgumentList	D_ALWAYS		568897	1					
ANR	568955	Argument	D_ALWAYS		568897	0					
ANR	568956	Identifier	D_ALWAYS		568897	0					
ANR	568957	Argument	"""cannot connect to replication daemon, addr %s\\n"""		568897	1					
ANR	568958	PrimaryExpression	"""cannot connect to replication daemon, addr %s\\n"""		568897	0					
ANR	568959	Argument	m_replicationDaemonSinfulString		568897	2					
ANR	568960	Identifier	m_replicationDaemonSinfulString		568897	0					
ANR	568961	ExpressionStatement	sock . close ( )	616:8:17961:17973	568897	1	True				
ANR	568962	CallExpression	sock . close ( )		568897	0					
ANR	568963	Callee	sock . close		568897	0					
ANR	568964	MemberAccess	sock . close		568897	0					
ANR	568965	Identifier	sock		568897	0					
ANR	568966	Identifier	close		568897	1					
ANR	568967	ArgumentList			568897	1					
ANR	568968	ReturnStatement	return false ;	618:8:17984:17996	568897	2	True				
ANR	568969	Identifier	false		568897	0					
ANR	568970	IdentifierDeclStatement	int cmd = command ;	621:4:18009:18026	568897	5	True				
ANR	568971	IdentifierDecl	cmd = command		568897	0					
ANR	568972	IdentifierDeclType	int		568897	0					
ANR	568973	Identifier	cmd		568897	1					
ANR	568974	AssignmentExpression	cmd = command		568897	2		=			
ANR	568975	Identifier	command		568897	0					
ANR	568976	Identifier	command		568897	1					
ANR	568977	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""send command %s(%d) to replication daemon %s\\n"" , utilToString ( cmd ) , cmd , m_replicationDaemonSinfulString )"	622:4:18032:18169	568897	6	True				
ANR	568978	CallExpression	"dprintf ( D_FULLDEBUG , ""send command %s(%d) to replication daemon %s\\n"" , utilToString ( cmd ) , cmd , m_replicationDaemonSinfulString )"		568897	0					
ANR	568979	Callee	dprintf		568897	0					
ANR	568980	Identifier	dprintf		568897	0					
ANR	568981	ArgumentList	D_FULLDEBUG		568897	1					
ANR	568982	Argument	D_FULLDEBUG		568897	0					
ANR	568983	Identifier	D_FULLDEBUG		568897	0					
ANR	568984	Argument	"""send command %s(%d) to replication daemon %s\\n"""		568897	1					
ANR	568985	PrimaryExpression	"""send command %s(%d) to replication daemon %s\\n"""		568897	0					
ANR	568986	Argument	utilToString ( cmd )		568897	2					
ANR	568987	CallExpression	utilToString ( cmd )		568897	0					
ANR	568988	Callee	utilToString		568897	0					
ANR	568989	Identifier	utilToString		568897	0					
ANR	568990	ArgumentList	cmd		568897	1					
ANR	568991	Argument	cmd		568897	0					
ANR	568992	Identifier	cmd		568897	0					
ANR	568993	Argument	cmd		568897	3					
ANR	568994	Identifier	cmd		568897	0					
ANR	568995	Argument	m_replicationDaemonSinfulString		568897	4					
ANR	568996	Identifier	m_replicationDaemonSinfulString		568897	0					
ANR	568997	IfStatement	"if ( ! ( m_masterDaemon -> startCommand ( cmd , & sock , m_connectionTimeout ) ) )"		568897	7					
ANR	568998	Condition	"! ( m_masterDaemon -> startCommand ( cmd , & sock , m_connectionTimeout ) )"	627:7:18240:18303	568897	0	True				
ANR	568999	UnaryOperationExpression	"! ( m_masterDaemon -> startCommand ( cmd , & sock , m_connectionTimeout ) )"		568897	0					
ANR	569000	UnaryOperator	!		568897	0					
ANR	569001	CallExpression	"m_masterDaemon -> startCommand ( cmd , & sock , m_connectionTimeout )"		568897	1					
ANR	569002	Callee	m_masterDaemon -> startCommand		568897	0					
ANR	569003	PtrMemberAccess	m_masterDaemon -> startCommand		568897	0					
ANR	569004	Identifier	m_masterDaemon		568897	0					
ANR	569005	Identifier	startCommand		568897	1					
ANR	569006	ArgumentList	cmd		568897	1					
ANR	569007	Argument	cmd		568897	0					
ANR	569008	Identifier	cmd		568897	0					
ANR	569009	Argument	& sock		568897	1					
ANR	569010	UnaryOperationExpression	& sock		568897	0					
ANR	569011	UnaryOperator	&		568897	0					
ANR	569012	Identifier	sock		568897	1					
ANR	569013	Argument	m_connectionTimeout		568897	2					
ANR	569014	Identifier	m_connectionTimeout		568897	0					
ANR	569015	CompoundStatement		26:74:806:806	568897	1					
ANR	569016	ExpressionStatement	"dprintf ( D_ALWAYS , ""cannot start command %s, addr %s\\n"" , utilToString ( cmd ) , m_replicationDaemonSinfulString )"	628:8:18317:18436	568897	0	True				
ANR	569017	CallExpression	"dprintf ( D_ALWAYS , ""cannot start command %s, addr %s\\n"" , utilToString ( cmd ) , m_replicationDaemonSinfulString )"		568897	0					
ANR	569018	Callee	dprintf		568897	0					
ANR	569019	Identifier	dprintf		568897	0					
ANR	569020	ArgumentList	D_ALWAYS		568897	1					
ANR	569021	Argument	D_ALWAYS		568897	0					
ANR	569022	Identifier	D_ALWAYS		568897	0					
ANR	569023	Argument	"""cannot start command %s, addr %s\\n"""		568897	1					
ANR	569024	PrimaryExpression	"""cannot start command %s, addr %s\\n"""		568897	0					
ANR	569025	Argument	utilToString ( cmd )		568897	2					
ANR	569026	CallExpression	utilToString ( cmd )		568897	0					
ANR	569027	Callee	utilToString		568897	0					
ANR	569028	Identifier	utilToString		568897	0					
ANR	569029	ArgumentList	cmd		568897	1					
ANR	569030	Argument	cmd		568897	0					
ANR	569031	Identifier	cmd		568897	0					
ANR	569032	Argument	m_replicationDaemonSinfulString		568897	3					
ANR	569033	Identifier	m_replicationDaemonSinfulString		568897	0					
ANR	569034	ExpressionStatement	sock . close ( )	631:8:18446:18458	568897	1	True				
ANR	569035	CallExpression	sock . close ( )		568897	0					
ANR	569036	Callee	sock . close		568897	0					
ANR	569037	MemberAccess	sock . close		568897	0					
ANR	569038	Identifier	sock		568897	0					
ANR	569039	Identifier	close		568897	1					
ANR	569040	ArgumentList			568897	1					
ANR	569041	ReturnStatement	return false ;	633:8:18469:18481	568897	2	True				
ANR	569042	Identifier	false		568897	0					
ANR	569043	Statement	char	636:4:18494:18497	568897	8	True				
ANR	569044	Statement	*	636:8:18498:18498	568897	9	True				
ANR	569045	Statement	subsys	636:10:18500:18505	568897	10	True				
ANR	569046	Statement	=	636:17:18507:18507	568897	11	True				
ANR	569047	Statement	const_cast	636:19:18509:18518	568897	12	True				
ANR	569048	Statement	<	636:29:18519:18519	568897	13	True				
ANR	569049	Statement	char	636:30:18520:18523	568897	14	True				
ANR	569050	Statement	*	636:34:18524:18524	568897	15	True				
ANR	569051	Statement	>	636:35:18525:18525	568897	16	True				
ANR	569052	ExpressionStatement	daemonCore -> InfoCommandSinfulString ( )	636:36:18526:18568	568897	17	True				
ANR	569053	CallExpression	daemonCore -> InfoCommandSinfulString ( )		568897	0					
ANR	569054	Callee	daemonCore -> InfoCommandSinfulString		568897	0					
ANR	569055	PtrMemberAccess	daemonCore -> InfoCommandSinfulString		568897	0					
ANR	569056	Identifier	daemonCore		568897	0					
ANR	569057	Identifier	InfoCommandSinfulString		568897	1					
ANR	569058	ArgumentList			568897	1					
ANR	569059	IfStatement	if ( ! sock . code ( subsys ) || ! sock . end_of_message ( ) )		568897	18					
ANR	569060	Condition	! sock . code ( subsys ) || ! sock . end_of_message ( )	638:8:18579:18622	568897	0	True				
ANR	569061	OrExpression	! sock . code ( subsys ) || ! sock . end_of_message ( )		568897	0		||			
ANR	569062	UnaryOperationExpression	! sock . code ( subsys )		568897	0					
ANR	569063	UnaryOperator	!		568897	0					
ANR	569064	CallExpression	sock . code ( subsys )		568897	1					
ANR	569065	Callee	sock . code		568897	0					
ANR	569066	MemberAccess	sock . code		568897	0					
ANR	569067	Identifier	sock		568897	0					
ANR	569068	Identifier	code		568897	1					
ANR	569069	ArgumentList	subsys		568897	1					
ANR	569070	Argument	subsys		568897	0					
ANR	569071	Identifier	subsys		568897	0					
ANR	569072	UnaryOperationExpression	! sock . end_of_message ( )		568897	1					
ANR	569073	UnaryOperator	!		568897	0					
ANR	569074	CallExpression	sock . end_of_message ( )		568897	1					
ANR	569075	Callee	sock . end_of_message		568897	0					
ANR	569076	MemberAccess	sock . end_of_message		568897	0					
ANR	569077	Identifier	sock		568897	0					
ANR	569078	Identifier	end_of_message		568897	1					
ANR	569079	ArgumentList			568897	1					
ANR	569080	CompoundStatement		37:55:1125:1125	568897	1					
ANR	569081	ExpressionStatement	"dprintf ( D_ALWAYS , ""send to replication daemon, !sock.code false \\n"" )"	639:8:18636:18705	568897	0	True				
ANR	569082	CallExpression	"dprintf ( D_ALWAYS , ""send to replication daemon, !sock.code false \\n"" )"		568897	0					
ANR	569083	Callee	dprintf		568897	0					
ANR	569084	Identifier	dprintf		568897	0					
ANR	569085	ArgumentList	D_ALWAYS		568897	1					
ANR	569086	Argument	D_ALWAYS		568897	0					
ANR	569087	Identifier	D_ALWAYS		568897	0					
ANR	569088	Argument	"""send to replication daemon, !sock.code false \\n"""		568897	1					
ANR	569089	PrimaryExpression	"""send to replication daemon, !sock.code false \\n"""		568897	0					
ANR	569090	ExpressionStatement	sock . close ( )	640:8:18715:18727	568897	1	True				
ANR	569091	CallExpression	sock . close ( )		568897	0					
ANR	569092	Callee	sock . close		568897	0					
ANR	569093	MemberAccess	sock . close		568897	0					
ANR	569094	Identifier	sock		568897	0					
ANR	569095	Identifier	close		568897	1					
ANR	569096	ArgumentList			568897	1					
ANR	569097	ReturnStatement	return false ;	642:8:18738:18750	568897	2	True				
ANR	569098	Identifier	false		568897	0					
ANR	569099	ElseStatement	else		568897	0					
ANR	569100	CompoundStatement		42:11:1262:1262	568897	0					
ANR	569101	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""send to replication daemon, !sock.code true \\n"" )"	644:8:18773:18849	568897	0	True				
ANR	569102	CallExpression	"dprintf ( D_FULLDEBUG , ""send to replication daemon, !sock.code true \\n"" )"		568897	0					
ANR	569103	Callee	dprintf		568897	0					
ANR	569104	Identifier	dprintf		568897	0					
ANR	569105	ArgumentList	D_FULLDEBUG		568897	1					
ANR	569106	Argument	D_FULLDEBUG		568897	0					
ANR	569107	Identifier	D_FULLDEBUG		568897	0					
ANR	569108	Argument	"""send to replication daemon, !sock.code true \\n"""		568897	1					
ANR	569109	PrimaryExpression	"""send to replication daemon, !sock.code true \\n"""		568897	0					
ANR	569110	ExpressionStatement	sock . close ( )	647:4:18861:18873	568897	19	True				
ANR	569111	CallExpression	sock . close ( )		568897	0					
ANR	569112	Callee	sock . close		568897	0					
ANR	569113	MemberAccess	sock . close		568897	0					
ANR	569114	Identifier	sock		568897	0					
ANR	569115	Identifier	close		568897	1					
ANR	569116	ArgumentList			568897	1					
ANR	569117	ReturnStatement	return true ;	649:4:18880:18891	568897	20	True				
ANR	569118	Identifier	true		568897	0					
ANR	569119	ReturnType	bool		568897	1					
ANR	569120	Identifier	HADStateMachine :: sendReplicationCommand		568897	2					
ANR	569121	ParameterList	int command		568897	3					
ANR	569122	Parameter	int command	601:41:17486:17496	568897	0	True				
ANR	569123	ParameterType	int		568897	0					
ANR	569124	Identifier	command		568897	1					
ANR	569125	CFGEntryNode	ENTRY		568897		True				
ANR	569126	CFGExitNode	EXIT		568897		True				
ANR	569127	Symbol	false		568897						
ANR	569128	Symbol	D_ALWAYS		568897						
ANR	569129	Symbol	D_FULLDEBUG		568897						
ANR	569130	Symbol	* m_masterDaemon		568897						
ANR	569131	Symbol	m_replicationDaemonSinfulString		568897						
ANR	569132	Symbol	command		568897						
ANR	569133	Symbol	utilToString		568897						
ANR	569134	Symbol	m_masterDaemon -> startCommand		568897						
ANR	569135	Symbol	& sock		568897						
ANR	569136	Symbol	sock		568897						
ANR	569137	Symbol	subsys		568897						
ANR	569138	Symbol	sock . connect		568897						
ANR	569139	Symbol	sock . end_of_message		568897						
ANR	569140	Symbol	daemonCore		568897						
ANR	569141	Symbol	true		568897						
ANR	569142	Symbol	cmd		568897						
ANR	569143	Symbol	sock . code		568897						
ANR	569144	Symbol	m_connectionTimeout		568897						
ANR	569145	Symbol	m_masterDaemon		568897						
ANR	569146	Function	HADStateMachine :: setReplicationDaemonSinfulString	652:0:18896:21381							
ANR	569147	FunctionDef	HADStateMachine :: setReplicationDaemonSinfulString ()		569146	0					
ANR	569148	CompoundStatement		654:0:18959:21381	569146	0					
ANR	569149	IfStatement	if ( ! m_useReplication )		569146	0					
ANR	569150	Condition	! m_useReplication	655:8:18969:18986	569146	0	True				
ANR	569151	UnaryOperationExpression	! m_useReplication		569146	0					
ANR	569152	UnaryOperator	!		569146	0					
ANR	569153	Identifier	m_useReplication		569146	1					
ANR	569154	CompoundStatement		2:29:30:30	569146	1					
ANR	569155	ReturnStatement	return ;	656:8:19000:19007	569146	0	True				
ANR	569156	IdentifierDeclStatement	"char * tmp = param ( ""REPLICATION_LIST"" ) ;"	658:4:19019:19058	569146	1	True				
ANR	569157	IdentifierDecl	"* tmp = param ( ""REPLICATION_LIST"" )"		569146	0					
ANR	569158	IdentifierDeclType	char *		569146	0					
ANR	569159	Identifier	tmp		569146	1					
ANR	569160	AssignmentExpression	"* tmp = param ( ""REPLICATION_LIST"" )"		569146	2		=			
ANR	569161	Identifier	tmp		569146	0					
ANR	569162	CallExpression	"param ( ""REPLICATION_LIST"" )"		569146	1					
ANR	569163	Callee	param		569146	0					
ANR	569164	Identifier	param		569146	0					
ANR	569165	ArgumentList	"""REPLICATION_LIST"""		569146	1					
ANR	569166	Argument	"""REPLICATION_LIST"""		569146	0					
ANR	569167	PrimaryExpression	"""REPLICATION_LIST"""		569146	0					
ANR	569168	IfStatement	if ( ! tmp )		569146	2					
ANR	569169	Condition	! tmp	660:9:19070:19074	569146	0	True				
ANR	569170	UnaryOperationExpression	! tmp		569146	0					
ANR	569171	UnaryOperator	!		569146	0					
ANR	569172	Identifier	tmp		569146	1					
ANR	569173	CompoundStatement		7:17:118:118	569146	1					
ANR	569174	ExpressionStatement	"utilCrucialError ( utilNoParameterError ( ""REPLICATION_LIST"" , ""REPLICATION"" ) . Value ( ) )"	661:8:19088:19219	569146	0	True				
ANR	569175	CallExpression	"utilCrucialError ( utilNoParameterError ( ""REPLICATION_LIST"" , ""REPLICATION"" ) . Value ( ) )"		569146	0					
ANR	569176	Callee	utilCrucialError		569146	0					
ANR	569177	Identifier	utilCrucialError		569146	0					
ANR	569178	ArgumentList	"utilNoParameterError ( ""REPLICATION_LIST"" , ""REPLICATION"" ) . Value ( )"		569146	1					
ANR	569179	Argument	"utilNoParameterError ( ""REPLICATION_LIST"" , ""REPLICATION"" ) . Value ( )"		569146	0					
ANR	569180	CallExpression	"utilNoParameterError ( ""REPLICATION_LIST"" , ""REPLICATION"" ) . Value ( )"		569146	0					
ANR	569181	Callee	"utilNoParameterError ( ""REPLICATION_LIST"" , ""REPLICATION"" ) . Value"		569146	0					
ANR	569182	MemberAccess	"utilNoParameterError ( ""REPLICATION_LIST"" , ""REPLICATION"" ) . Value"		569146	0					
ANR	569183	CallExpression	"utilNoParameterError ( ""REPLICATION_LIST"" , ""REPLICATION"" )"		569146	0					
ANR	569184	Callee	utilNoParameterError		569146	0					
ANR	569185	Identifier	utilNoParameterError		569146	0					
ANR	569186	ArgumentList	"""REPLICATION_LIST"""		569146	1					
ANR	569187	Argument	"""REPLICATION_LIST"""		569146	0					
ANR	569188	PrimaryExpression	"""REPLICATION_LIST"""		569146	0					
ANR	569189	Argument	"""REPLICATION"""		569146	1					
ANR	569190	PrimaryExpression	"""REPLICATION"""		569146	0					
ANR	569191	Identifier	Value		569146	1					
ANR	569192	ArgumentList			569146	1					
ANR	569193	IdentifierDeclStatement	StringList replicationAddressList ;	665:4:19232:19265	569146	3	True				
ANR	569194	IdentifierDecl	replicationAddressList		569146	0					
ANR	569195	IdentifierDeclType	StringList		569146	0					
ANR	569196	Identifier	replicationAddressList		569146	1					
ANR	569197	IdentifierDeclStatement	char * replicationAddress = NULL ;	666:4:19271:19310	569146	4	True				
ANR	569198	IdentifierDecl	* replicationAddress = NULL		569146	0					
ANR	569199	IdentifierDeclType	char *		569146	0					
ANR	569200	Identifier	replicationAddress		569146	1					
ANR	569201	AssignmentExpression	* replicationAddress = NULL		569146	2		=			
ANR	569202	Identifier	NULL		569146	0					
ANR	569203	Identifier	NULL		569146	1					
ANR	569204	IdentifierDeclStatement	char buffer [ BUFSIZ ] ;	667:1:19313:19338	569146	5	True				
ANR	569205	IdentifierDecl	buffer [ BUFSIZ ]		569146	0					
ANR	569206	IdentifierDeclType	char [ BUFSIZ ]		569146	0					
ANR	569207	Identifier	buffer		569146	1					
ANR	569208	Identifier	BUFSIZ		569146	2					
ANR	569209	ExpressionStatement	replicationAddressList . initializeFromString ( tmp )	669:4:19345:19395	569146	6	True				
ANR	569210	CallExpression	replicationAddressList . initializeFromString ( tmp )		569146	0					
ANR	569211	Callee	replicationAddressList . initializeFromString		569146	0					
ANR	569212	MemberAccess	replicationAddressList . initializeFromString		569146	0					
ANR	569213	Identifier	replicationAddressList		569146	0					
ANR	569214	Identifier	initializeFromString		569146	1					
ANR	569215	ArgumentList	tmp		569146	1					
ANR	569216	Argument	tmp		569146	0					
ANR	569217	Identifier	tmp		569146	0					
ANR	569218	ExpressionStatement	replicationAddressList . rewind ( )	670:4:19401:19433	569146	7	True				
ANR	569219	CallExpression	replicationAddressList . rewind ( )		569146	0					
ANR	569220	Callee	replicationAddressList . rewind		569146	0					
ANR	569221	MemberAccess	replicationAddressList . rewind		569146	0					
ANR	569222	Identifier	replicationAddressList		569146	0					
ANR	569223	Identifier	rewind		569146	1					
ANR	569224	ArgumentList			569146	1					
ANR	569225	ExpressionStatement	free ( tmp )	672:4:19440:19451	569146	8	True				
ANR	569226	CallExpression	free ( tmp )		569146	0					
ANR	569227	Callee	free		569146	0					
ANR	569228	Identifier	free		569146	0					
ANR	569229	ArgumentList	tmp		569146	1					
ANR	569230	Argument	tmp		569146	0					
ANR	569231	Identifier	tmp		569146	0					
ANR	569232	IdentifierDeclStatement	char * host = getHostFromAddr ( daemonCore -> InfoCommandSinfulString ( ) ) ;	673:4:19457:19527	569146	9	True				
ANR	569233	IdentifierDecl	* host = getHostFromAddr ( daemonCore -> InfoCommandSinfulString ( ) )		569146	0					
ANR	569234	IdentifierDeclType	char *		569146	0					
ANR	569235	Identifier	host		569146	1					
ANR	569236	AssignmentExpression	* host = getHostFromAddr ( daemonCore -> InfoCommandSinfulString ( ) )		569146	2		=			
ANR	569237	Identifier	host		569146	0					
ANR	569238	CallExpression	getHostFromAddr ( daemonCore -> InfoCommandSinfulString ( ) )		569146	1					
ANR	569239	Callee	getHostFromAddr		569146	0					
ANR	569240	Identifier	getHostFromAddr		569146	0					
ANR	569241	ArgumentList	daemonCore -> InfoCommandSinfulString ( )		569146	1					
ANR	569242	Argument	daemonCore -> InfoCommandSinfulString ( )		569146	0					
ANR	569243	CallExpression	daemonCore -> InfoCommandSinfulString ( )		569146	0					
ANR	569244	Callee	daemonCore -> InfoCommandSinfulString		569146	0					
ANR	569245	PtrMemberAccess	daemonCore -> InfoCommandSinfulString		569146	0					
ANR	569246	Identifier	daemonCore		569146	0					
ANR	569247	Identifier	InfoCommandSinfulString		569146	1					
ANR	569248	ArgumentList			569146	1					
ANR	569249	IdentifierDeclStatement	int replicationDaemonIndex = replicationAddressList . number ( ) - 1 ;	675:1:19531:19595	569146	10	True				
ANR	569250	IdentifierDecl	replicationDaemonIndex = replicationAddressList . number ( ) - 1		569146	0					
ANR	569251	IdentifierDeclType	int		569146	0					
ANR	569252	Identifier	replicationDaemonIndex		569146	1					
ANR	569253	AssignmentExpression	replicationDaemonIndex = replicationAddressList . number ( ) - 1		569146	2		=			
ANR	569254	Identifier	replicationDaemonIndex		569146	0					
ANR	569255	AdditiveExpression	replicationAddressList . number ( ) - 1		569146	1		-			
ANR	569256	CallExpression	replicationAddressList . number ( )		569146	0					
ANR	569257	Callee	replicationAddressList . number		569146	0					
ANR	569258	MemberAccess	replicationAddressList . number		569146	0					
ANR	569259	Identifier	replicationAddressList		569146	0					
ANR	569260	Identifier	number		569146	1					
ANR	569261	ArgumentList			569146	1					
ANR	569262	PrimaryExpression	1		569146	1					
ANR	569263	WhileStatement	while ( ( replicationAddress = replicationAddressList . next ( ) ) )		569146	11					
ANR	569264	Condition	replicationAddress = replicationAddressList . next ( )	677:11:19609:19663	569146	0	True				
ANR	569265	AssignmentExpression	replicationAddress = replicationAddressList . next ( )		569146	0		=			
ANR	569266	Identifier	replicationAddress		569146	0					
ANR	569267	CallExpression	replicationAddressList . next ( )		569146	1					
ANR	569268	Callee	replicationAddressList . next		569146	0					
ANR	569269	MemberAccess	replicationAddressList . next		569146	0					
ANR	569270	Identifier	replicationAddressList		569146	0					
ANR	569271	Identifier	next		569146	1					
ANR	569272	ArgumentList			569146	1					
ANR	569273	CompoundStatement		36:8:1044:1102	569146	1					
ANR	569274	IdentifierDeclStatement	char * sinfulAddress = utilToSinful ( replicationAddress ) ;	678:8:19677:19737	569146	0	True				
ANR	569275	IdentifierDecl	* sinfulAddress = utilToSinful ( replicationAddress )		569146	0					
ANR	569276	IdentifierDeclType	char *		569146	0					
ANR	569277	Identifier	sinfulAddress		569146	1					
ANR	569278	AssignmentExpression	* sinfulAddress = utilToSinful ( replicationAddress )		569146	2		=			
ANR	569279	Identifier	sinfulAddress		569146	0					
ANR	569280	CallExpression	utilToSinful ( replicationAddress )		569146	1					
ANR	569281	Callee	utilToSinful		569146	0					
ANR	569282	Identifier	utilToSinful		569146	0					
ANR	569283	ArgumentList	replicationAddress		569146	1					
ANR	569284	Argument	replicationAddress		569146	0					
ANR	569285	Identifier	replicationAddress		569146	0					
ANR	569286	IfStatement	if ( sinfulAddress == 0 )		569146	1					
ANR	569287	Condition	sinfulAddress == 0	680:12:19752:19769	569146	0	True				
ANR	569288	EqualityExpression	sinfulAddress == 0		569146	0		==			
ANR	569289	Identifier	sinfulAddress		569146	0					
ANR	569290	PrimaryExpression	0		569146	1					
ANR	569291	CompoundStatement		27:33:813:813	569146	1					
ANR	569292	Statement	sprintf	681:12:19787:19793	569146	0	True				
ANR	569293	Statement	(	681:19:19794:19794	569146	1	True				
ANR	569294	Statement	buffer	681:21:19796:19801	569146	2	True				
ANR	569295	Statement	","	681:27:19802:19802	569146	3	True				
ANR	569296	Statement	"""HADStateMachine::setReplicationDaemonSinfulString"""	682:6:19810:19860	569146	4	True				
ANR	569297	Statement	""" invalid address %s\\n"""	683:6:19868:19890	569146	5	True				
ANR	569298	Statement	","	683:29:19891:19891	569146	6	True				
ANR	569299	Statement	replicationAddress	684:6:19899:19916	569146	7	True				
ANR	569300	Statement	)	684:25:19918:19918	569146	8	True				
ANR	569301	ExpressionStatement		684:26:19919:19919	569146	9	True				
ANR	569302	ExpressionStatement	utilCrucialError ( buffer )	685:12:19933:19959	569146	10	True				
ANR	569303	CallExpression	utilCrucialError ( buffer )		569146	0					
ANR	569304	Callee	utilCrucialError		569146	0					
ANR	569305	Identifier	utilCrucialError		569146	0					
ANR	569306	ArgumentList	buffer		569146	1					
ANR	569307	Argument	buffer		569146	0					
ANR	569308	Identifier	buffer		569146	0					
ANR	569309	IdentifierDeclStatement	char * sinfulAddressHost = getHostFromAddr ( sinfulAddress ) ;	689:8:20004:20062	569146	2	True				
ANR	569310	IdentifierDecl	* sinfulAddressHost = getHostFromAddr ( sinfulAddress )		569146	0					
ANR	569311	IdentifierDeclType	char *		569146	0					
ANR	569312	Identifier	sinfulAddressHost		569146	1					
ANR	569313	AssignmentExpression	* sinfulAddressHost = getHostFromAddr ( sinfulAddress )		569146	2		=			
ANR	569314	Identifier	sinfulAddressHost		569146	0					
ANR	569315	CallExpression	getHostFromAddr ( sinfulAddress )		569146	1					
ANR	569316	Callee	getHostFromAddr		569146	0					
ANR	569317	Identifier	getHostFromAddr		569146	0					
ANR	569318	ArgumentList	sinfulAddress		569146	1					
ANR	569319	Argument	sinfulAddress		569146	0					
ANR	569320	Identifier	sinfulAddress		569146	0					
ANR	569321	IfStatement	"if ( ( replicationDaemonIndex == m_selfId ) && ( strcmp ( sinfulAddressHost , host ) == 0 ) )"		569146	3					
ANR	569322	Condition	"( replicationDaemonIndex == m_selfId ) && ( strcmp ( sinfulAddressHost , host ) == 0 )"	691:13:20078:20165	569146	0	True				
ANR	569323	AndExpression	"( replicationDaemonIndex == m_selfId ) && ( strcmp ( sinfulAddressHost , host ) == 0 )"		569146	0		&&			
ANR	569324	EqualityExpression	replicationDaemonIndex == m_selfId		569146	0		==			
ANR	569325	Identifier	replicationDaemonIndex		569146	0					
ANR	569326	Identifier	m_selfId		569146	1					
ANR	569327	EqualityExpression	"strcmp ( sinfulAddressHost , host ) == 0"		569146	1		==			
ANR	569328	CallExpression	"strcmp ( sinfulAddressHost , host )"		569146	0					
ANR	569329	Callee	strcmp		569146	0					
ANR	569330	Identifier	strcmp		569146	0					
ANR	569331	ArgumentList	sinfulAddressHost		569146	1					
ANR	569332	Argument	sinfulAddressHost		569146	0					
ANR	569333	Identifier	sinfulAddressHost		569146	0					
ANR	569334	Argument	host		569146	1					
ANR	569335	Identifier	host		569146	0					
ANR	569336	PrimaryExpression	0		569146	1					
ANR	569337	CompoundStatement		39:48:1210:1210	569146	1					
ANR	569338	ExpressionStatement	m_replicationDaemonSinfulString = sinfulAddress	693:12:20184:20231	569146	0	True				
ANR	569339	AssignmentExpression	m_replicationDaemonSinfulString = sinfulAddress		569146	0		=			
ANR	569340	Identifier	m_replicationDaemonSinfulString		569146	0					
ANR	569341	Identifier	sinfulAddress		569146	1					
ANR	569342	ExpressionStatement	free ( sinfulAddressHost )	694:12:20245:20270	569146	1	True				
ANR	569343	CallExpression	free ( sinfulAddressHost )		569146	0					
ANR	569344	Callee	free		569146	0					
ANR	569345	Identifier	free		569146	0					
ANR	569346	ArgumentList	sinfulAddressHost		569146	1					
ANR	569347	Argument	sinfulAddressHost		569146	0					
ANR	569348	Identifier	sinfulAddressHost		569146	0					
ANR	569349	Statement	dprintf	695:3:20275:20281	569146	2	True				
ANR	569350	Statement	(	695:10:20282:20282	569146	3	True				
ANR	569351	Statement	D_ALWAYS	695:12:20284:20291	569146	4	True				
ANR	569352	Statement	","	695:20:20292:20292	569146	5	True				
ANR	569353	Statement	"""HADStateMachine::setReplicationDaemonSinfulString """	696:5:20299:20350	569146	6	True				
ANR	569354	Statement	"""corresponding replication daemon - %s\\n"""	697:5:20357:20397	569146	7	True				
ANR	569355	Statement	","	697:46:20398:20398	569146	8	True				
ANR	569356	Statement	sinfulAddress	698:6:20406:20418	569146	9	True				
ANR	569357	Statement	)	698:20:20420:20420	569146	10	True				
ANR	569358	ExpressionStatement		698:21:20421:20421	569146	11	True				
ANR	569359	BreakStatement	break ;	701:12:20563:20568	569146	12	True				
ANR	569360	ElseStatement	else		569146	0					
ANR	569361	IfStatement	if ( replicationDaemonIndex == m_selfId )		569146	0					
ANR	569362	Condition	replicationDaemonIndex == m_selfId	702:19:20589:20622	569146	0	True				
ANR	569363	EqualityExpression	replicationDaemonIndex == m_selfId		569146	0		==			
ANR	569364	Identifier	replicationDaemonIndex		569146	0					
ANR	569365	Identifier	m_selfId		569146	1					
ANR	569366	CompoundStatement		49:56:1666:1666	569146	1					
ANR	569367	Statement	sprintf	703:3:20631:20637	569146	0	True				
ANR	569368	Statement	(	703:10:20638:20638	569146	1	True				
ANR	569369	Statement	buffer	703:12:20640:20645	569146	2	True				
ANR	569370	Statement	","	703:18:20646:20646	569146	3	True				
ANR	569371	Statement	"""HADStateMachine::setReplicationDaemonSinfulString"""	704:6:20654:20704	569146	4	True				
ANR	569372	Statement	"""host names of machine and replication daemon do """	705:6:20712:20761	569146	5	True				
ANR	569373	Statement	"""not match: %s vs. %s\\n"""	706:6:20769:20792	569146	6	True				
ANR	569374	Statement	","	706:30:20793:20793	569146	7	True				
ANR	569375	Statement	host	706:32:20795:20798	569146	8	True				
ANR	569376	Statement	","	706:36:20799:20799	569146	9	True				
ANR	569377	Statement	sinfulAddressHost	706:38:20801:20817	569146	10	True				
ANR	569378	Statement	)	706:55:20818:20818	569146	11	True				
ANR	569379	ExpressionStatement		706:56:20819:20819	569146	12	True				
ANR	569380	ExpressionStatement	utilCrucialError ( buffer )	707:3:20824:20850	569146	13	True				
ANR	569381	CallExpression	utilCrucialError ( buffer )		569146	0					
ANR	569382	Callee	utilCrucialError		569146	0					
ANR	569383	Identifier	utilCrucialError		569146	0					
ANR	569384	ArgumentList	buffer		569146	1					
ANR	569385	Argument	buffer		569146	0					
ANR	569386	Identifier	buffer		569146	0					
ANR	569387	ExpressionStatement	replicationDaemonIndex --	710:2:20859:20884	569146	4	True				
ANR	569388	PostIncDecOperationExpression	replicationDaemonIndex --		569146	0					
ANR	569389	Identifier	replicationDaemonIndex		569146	0					
ANR	569390	IncDec	--		569146	1					
ANR	569391	ExpressionStatement	free ( sinfulAddressHost )	711:8:20894:20919	569146	5	True				
ANR	569392	CallExpression	free ( sinfulAddressHost )		569146	0					
ANR	569393	Callee	free		569146	0					
ANR	569394	Identifier	free		569146	0					
ANR	569395	ArgumentList	sinfulAddressHost		569146	1					
ANR	569396	Argument	sinfulAddressHost		569146	0					
ANR	569397	Identifier	sinfulAddressHost		569146	0					
ANR	569398	ExpressionStatement	free ( sinfulAddress )	712:8:20929:20950	569146	6	True				
ANR	569399	CallExpression	free ( sinfulAddress )		569146	0					
ANR	569400	Callee	free		569146	0					
ANR	569401	Identifier	free		569146	0					
ANR	569402	ArgumentList	sinfulAddress		569146	1					
ANR	569403	Argument	sinfulAddress		569146	0					
ANR	569404	Identifier	sinfulAddress		569146	0					
ANR	569405	ExpressionStatement	free ( host )	714:4:20962:20974	569146	12	True				
ANR	569406	CallExpression	free ( host )		569146	0					
ANR	569407	Callee	free		569146	0					
ANR	569408	Identifier	free		569146	0					
ANR	569409	ArgumentList	host		569146	1					
ANR	569410	Argument	host		569146	0					
ANR	569411	Identifier	host		569146	0					
ANR	569412	IfStatement	if ( NULL == m_replicationDaemonSinfulString )		569146	13					
ANR	569413	Condition	NULL == m_replicationDaemonSinfulString	718:8:21102:21140	569146	0	True				
ANR	569414	EqualityExpression	NULL == m_replicationDaemonSinfulString		569146	0		==			
ANR	569415	Identifier	NULL		569146	0					
ANR	569416	Identifier	m_replicationDaemonSinfulString		569146	1					
ANR	569417	CompoundStatement		66:4:2188:2188	569146	1					
ANR	569418	Statement	dprintf	720:8:21158:21164	569146	0	True				
ANR	569419	Statement	(	720:15:21165:21165	569146	1	True				
ANR	569420	Statement	D_ALWAYS	720:17:21167:21174	569146	2	True				
ANR	569421	Statement	","	720:25:21175:21175	569146	3	True				
ANR	569422	Statement	"""HADStateMachine::setReplicationDaemonSinfulString """	721:5:21182:21233	569146	4	True				
ANR	569423	Statement	"""local replication daemon not found in REPLICATION_LIST, """	722:5:21240:21297	569146	5	True				
ANR	569424	Statement	"""switching the replication off\\n"""	723:5:21304:21336	569146	6	True				
ANR	569425	Statement	)	723:39:21338:21338	569146	7	True				
ANR	569426	ExpressionStatement		723:40:21339:21339	569146	8	True				
ANR	569427	ExpressionStatement	m_useReplication = false	724:8:21349:21373	569146	9	True				
ANR	569428	AssignmentExpression	m_useReplication = false		569146	0		=			
ANR	569429	Identifier	m_useReplication		569146	0					
ANR	569430	Identifier	false		569146	1					
ANR	569431	ReturnType	void		569146	1					
ANR	569432	Identifier	HADStateMachine :: setReplicationDaemonSinfulString		569146	2					
ANR	569433	ParameterList			569146	3					
ANR	569434	CFGEntryNode	ENTRY		569146		True				
ANR	569435	CFGExitNode	EXIT		569146		True				
ANR	569436	Symbol	strcmp		569146						
ANR	569437	Symbol	daemonCore -> InfoCommandSinfulString		569146						
ANR	569438	Symbol	utilToSinful		569146						
ANR	569439	Symbol	NULL		569146						
ANR	569440	Symbol	replicationAddressList . number		569146						
ANR	569441	Symbol	utilNoParameterError		569146						
ANR	569442	Symbol	replicationAddress		569146						
ANR	569443	Symbol	false		569146						
ANR	569444	Symbol	m_replicationDaemonSinfulString		569146						
ANR	569445	Symbol	getHostFromAddr		569146						
ANR	569446	Symbol	replicationAddressList		569146						
ANR	569447	Symbol	param		569146						
ANR	569448	Symbol	tmp		569146						
ANR	569449	Symbol	* daemonCore		569146						
ANR	569450	Symbol	m_selfId		569146						
ANR	569451	Symbol	daemonCore		569146						
ANR	569452	Symbol	host		569146						
ANR	569453	Symbol	"utilNoParameterError ( ""REPLICATION_LIST"" , ""REPLICATION"" ) . Value"		569146						
ANR	569454	Symbol	sinfulAddress		569146						
ANR	569455	Symbol	m_useReplication		569146						
ANR	569456	Symbol	buffer		569146						
ANR	569457	Symbol	replicationAddressList . next		569146						
ANR	569458	Symbol	sinfulAddressHost		569146						
ANR	569459	Symbol	replicationDaemonIndex		569146						
ANR	569460	Function	HADStateMachine :: sendControlCmdToMaster	732:0:21530:22742							
ANR	569461	FunctionDef	HADStateMachine :: sendControlCmdToMaster (int comm)		569460	0					
ANR	569462	CompoundStatement		734:0:21587:22742	569460	0					
ANR	569463	IdentifierDeclStatement	ReliSock sock ;	736:4:21594:21607	569460	0	True				
ANR	569464	IdentifierDecl	sock		569460	0					
ANR	569465	IdentifierDeclType	ReliSock		569460	0					
ANR	569466	Identifier	sock		569460	1					
ANR	569467	ExpressionStatement	sock . timeout ( m_connectionTimeout )	738:4:21614:21649	569460	1	True				
ANR	569468	CallExpression	sock . timeout ( m_connectionTimeout )		569460	0					
ANR	569469	Callee	sock . timeout		569460	0					
ANR	569470	MemberAccess	sock . timeout		569460	0					
ANR	569471	Identifier	sock		569460	0					
ANR	569472	Identifier	timeout		569460	1					
ANR	569473	ArgumentList	m_connectionTimeout		569460	1					
ANR	569474	Argument	m_connectionTimeout		569460	0					
ANR	569475	Identifier	m_connectionTimeout		569460	0					
ANR	569476	ExpressionStatement	sock . doNotEnforceMinimalCONNECT_TIMEOUT ( )	739:4:21655:21696	569460	2	True				
ANR	569477	CallExpression	sock . doNotEnforceMinimalCONNECT_TIMEOUT ( )		569460	0					
ANR	569478	Callee	sock . doNotEnforceMinimalCONNECT_TIMEOUT		569460	0					
ANR	569479	MemberAccess	sock . doNotEnforceMinimalCONNECT_TIMEOUT		569460	0					
ANR	569480	Identifier	sock		569460	0					
ANR	569481	Identifier	doNotEnforceMinimalCONNECT_TIMEOUT		569460	1					
ANR	569482	ArgumentList			569460	1					
ANR	569483	IfStatement	"if ( ! sock . connect ( m_masterDaemon -> addr ( ) , 0 , false ) )"		569460	3					
ANR	569484	Condition	"! sock . connect ( m_masterDaemon -> addr ( ) , 0 , false )"	742:7:21755:21803	569460	0	True				
ANR	569485	UnaryOperationExpression	"! sock . connect ( m_masterDaemon -> addr ( ) , 0 , false )"		569460	0					
ANR	569486	UnaryOperator	!		569460	0					
ANR	569487	CallExpression	"sock . connect ( m_masterDaemon -> addr ( ) , 0 , false )"		569460	1					
ANR	569488	Callee	sock . connect		569460	0					
ANR	569489	MemberAccess	sock . connect		569460	0					
ANR	569490	Identifier	sock		569460	0					
ANR	569491	Identifier	connect		569460	1					
ANR	569492	ArgumentList	m_masterDaemon -> addr ( )		569460	1					
ANR	569493	Argument	m_masterDaemon -> addr ( )		569460	0					
ANR	569494	CallExpression	m_masterDaemon -> addr ( )		569460	0					
ANR	569495	Callee	m_masterDaemon -> addr		569460	0					
ANR	569496	PtrMemberAccess	m_masterDaemon -> addr		569460	0					
ANR	569497	Identifier	m_masterDaemon		569460	0					
ANR	569498	Identifier	addr		569460	1					
ANR	569499	ArgumentList			569460	1					
ANR	569500	Argument	0		569460	1					
ANR	569501	PrimaryExpression	0		569460	0					
ANR	569502	Argument	false		569460	2					
ANR	569503	Identifier	false		569460	0					
ANR	569504	CompoundStatement		9:59:219:219	569460	1					
ANR	569505	ExpressionStatement	"dprintf ( D_ALWAYS , ""cannot connect to master, addr %s\\n"" , m_masterDaemon -> addr ( ) )"	743:8:21817:21909	569460	0	True				
ANR	569506	CallExpression	"dprintf ( D_ALWAYS , ""cannot connect to master, addr %s\\n"" , m_masterDaemon -> addr ( ) )"		569460	0					
ANR	569507	Callee	dprintf		569460	0					
ANR	569508	Identifier	dprintf		569460	0					
ANR	569509	ArgumentList	D_ALWAYS		569460	1					
ANR	569510	Argument	D_ALWAYS		569460	0					
ANR	569511	Identifier	D_ALWAYS		569460	0					
ANR	569512	Argument	"""cannot connect to master, addr %s\\n"""		569460	1					
ANR	569513	PrimaryExpression	"""cannot connect to master, addr %s\\n"""		569460	0					
ANR	569514	Argument	m_masterDaemon -> addr ( )		569460	2					
ANR	569515	CallExpression	m_masterDaemon -> addr ( )		569460	0					
ANR	569516	Callee	m_masterDaemon -> addr		569460	0					
ANR	569517	PtrMemberAccess	m_masterDaemon -> addr		569460	0					
ANR	569518	Identifier	m_masterDaemon		569460	0					
ANR	569519	Identifier	addr		569460	1					
ANR	569520	ArgumentList			569460	1					
ANR	569521	ExpressionStatement	sock . close ( )	746:8:21919:21931	569460	1	True				
ANR	569522	CallExpression	sock . close ( )		569460	0					
ANR	569523	Callee	sock . close		569460	0					
ANR	569524	MemberAccess	sock . close		569460	0					
ANR	569525	Identifier	sock		569460	0					
ANR	569526	Identifier	close		569460	1					
ANR	569527	ArgumentList			569460	1					
ANR	569528	ReturnStatement	return false ;	747:8:21941:21953	569460	2	True				
ANR	569529	Identifier	false		569460	0					
ANR	569530	IdentifierDeclStatement	int cmd = comm ;	750:4:21966:21980	569460	4	True				
ANR	569531	IdentifierDecl	cmd = comm		569460	0					
ANR	569532	IdentifierDeclType	int		569460	0					
ANR	569533	Identifier	cmd		569460	1					
ANR	569534	AssignmentExpression	cmd = comm		569460	2		=			
ANR	569535	Identifier	comm		569460	0					
ANR	569536	Identifier	comm		569460	1					
ANR	569537	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""send command %s(%d) [%s] to master %s\\n"" , utilToString ( cmd ) , cmd , m_controlleeName , m_masterDaemon -> addr ( ) )"	751:4:21986:22129	569460	5	True				
ANR	569538	CallExpression	"dprintf ( D_FULLDEBUG , ""send command %s(%d) [%s] to master %s\\n"" , utilToString ( cmd ) , cmd , m_controlleeName , m_masterDaemon -> addr ( ) )"		569460	0					
ANR	569539	Callee	dprintf		569460	0					
ANR	569540	Identifier	dprintf		569460	0					
ANR	569541	ArgumentList	D_FULLDEBUG		569460	1					
ANR	569542	Argument	D_FULLDEBUG		569460	0					
ANR	569543	Identifier	D_FULLDEBUG		569460	0					
ANR	569544	Argument	"""send command %s(%d) [%s] to master %s\\n"""		569460	1					
ANR	569545	PrimaryExpression	"""send command %s(%d) [%s] to master %s\\n"""		569460	0					
ANR	569546	Argument	utilToString ( cmd )		569460	2					
ANR	569547	CallExpression	utilToString ( cmd )		569460	0					
ANR	569548	Callee	utilToString		569460	0					
ANR	569549	Identifier	utilToString		569460	0					
ANR	569550	ArgumentList	cmd		569460	1					
ANR	569551	Argument	cmd		569460	0					
ANR	569552	Identifier	cmd		569460	0					
ANR	569553	Argument	cmd		569460	3					
ANR	569554	Identifier	cmd		569460	0					
ANR	569555	Argument	m_controlleeName		569460	4					
ANR	569556	Identifier	m_controlleeName		569460	0					
ANR	569557	Argument	m_masterDaemon -> addr ( )		569460	5					
ANR	569558	CallExpression	m_masterDaemon -> addr ( )		569460	0					
ANR	569559	Callee	m_masterDaemon -> addr		569460	0					
ANR	569560	PtrMemberAccess	m_masterDaemon -> addr		569460	0					
ANR	569561	Identifier	m_masterDaemon		569460	0					
ANR	569562	Identifier	addr		569460	1					
ANR	569563	ArgumentList			569460	1					
ANR	569564	IfStatement	"if ( ! m_masterDaemon -> startCommand ( cmd , & sock , m_connectionTimeout ) )"		569460	6					
ANR	569565	Condition	"! m_masterDaemon -> startCommand ( cmd , & sock , m_connectionTimeout )"	757:7:22200:22264	569460	0	True				
ANR	569566	UnaryOperationExpression	"! m_masterDaemon -> startCommand ( cmd , & sock , m_connectionTimeout )"		569460	0					
ANR	569567	UnaryOperator	!		569460	0					
ANR	569568	CallExpression	"m_masterDaemon -> startCommand ( cmd , & sock , m_connectionTimeout )"		569460	1					
ANR	569569	Callee	m_masterDaemon -> startCommand		569460	0					
ANR	569570	PtrMemberAccess	m_masterDaemon -> startCommand		569460	0					
ANR	569571	Identifier	m_masterDaemon		569460	0					
ANR	569572	Identifier	startCommand		569460	1					
ANR	569573	ArgumentList	cmd		569460	1					
ANR	569574	Argument	cmd		569460	0					
ANR	569575	Identifier	cmd		569460	0					
ANR	569576	Argument	& sock		569460	1					
ANR	569577	UnaryOperationExpression	& sock		569460	0					
ANR	569578	UnaryOperator	&		569460	0					
ANR	569579	Identifier	sock		569460	1					
ANR	569580	Argument	m_connectionTimeout		569460	2					
ANR	569581	Identifier	m_connectionTimeout		569460	0					
ANR	569582	CompoundStatement		24:76:681:681	569460	1					
ANR	569583	ExpressionStatement	"dprintf ( D_ALWAYS , ""cannot start command %s, addr %s\\n"" , utilToString ( cmd ) , m_masterDaemon -> addr ( ) )"	758:8:22279:22383	569460	0	True				
ANR	569584	CallExpression	"dprintf ( D_ALWAYS , ""cannot start command %s, addr %s\\n"" , utilToString ( cmd ) , m_masterDaemon -> addr ( ) )"		569460	0					
ANR	569585	Callee	dprintf		569460	0					
ANR	569586	Identifier	dprintf		569460	0					
ANR	569587	ArgumentList	D_ALWAYS		569460	1					
ANR	569588	Argument	D_ALWAYS		569460	0					
ANR	569589	Identifier	D_ALWAYS		569460	0					
ANR	569590	Argument	"""cannot start command %s, addr %s\\n"""		569460	1					
ANR	569591	PrimaryExpression	"""cannot start command %s, addr %s\\n"""		569460	0					
ANR	569592	Argument	utilToString ( cmd )		569460	2					
ANR	569593	CallExpression	utilToString ( cmd )		569460	0					
ANR	569594	Callee	utilToString		569460	0					
ANR	569595	Identifier	utilToString		569460	0					
ANR	569596	ArgumentList	cmd		569460	1					
ANR	569597	Argument	cmd		569460	0					
ANR	569598	Identifier	cmd		569460	0					
ANR	569599	Argument	m_masterDaemon -> addr ( )		569460	3					
ANR	569600	CallExpression	m_masterDaemon -> addr ( )		569460	0					
ANR	569601	Callee	m_masterDaemon -> addr		569460	0					
ANR	569602	PtrMemberAccess	m_masterDaemon -> addr		569460	0					
ANR	569603	Identifier	m_masterDaemon		569460	0					
ANR	569604	Identifier	addr		569460	1					
ANR	569605	ArgumentList			569460	1					
ANR	569606	ExpressionStatement	sock . close ( )	760:8:22393:22405	569460	1	True				
ANR	569607	CallExpression	sock . close ( )		569460	0					
ANR	569608	Callee	sock . close		569460	0					
ANR	569609	MemberAccess	sock . close		569460	0					
ANR	569610	Identifier	sock		569460	0					
ANR	569611	Identifier	close		569460	1					
ANR	569612	ArgumentList			569460	1					
ANR	569613	ReturnStatement	return false ;	761:8:22415:22427	569460	2	True				
ANR	569614	Identifier	false		569460	0					
ANR	569615	IfStatement	if ( ! sock . code ( m_controlleeName ) || ! sock . end_of_message ( ) )		569460	7					
ANR	569616	Condition	! sock . code ( m_controlleeName ) || ! sock . end_of_message ( )	764:8:22444:22497	569460	0	True				
ANR	569617	OrExpression	! sock . code ( m_controlleeName ) || ! sock . end_of_message ( )		569460	0		||			
ANR	569618	UnaryOperationExpression	! sock . code ( m_controlleeName )		569460	0					
ANR	569619	UnaryOperator	!		569460	0					
ANR	569620	CallExpression	sock . code ( m_controlleeName )		569460	1					
ANR	569621	Callee	sock . code		569460	0					
ANR	569622	MemberAccess	sock . code		569460	0					
ANR	569623	Identifier	sock		569460	0					
ANR	569624	Identifier	code		569460	1					
ANR	569625	ArgumentList	m_controlleeName		569460	1					
ANR	569626	Argument	m_controlleeName		569460	0					
ANR	569627	Identifier	m_controlleeName		569460	0					
ANR	569628	UnaryOperationExpression	! sock . end_of_message ( )		569460	1					
ANR	569629	UnaryOperator	!		569460	0					
ANR	569630	CallExpression	sock . end_of_message ( )		569460	1					
ANR	569631	Callee	sock . end_of_message		569460	0					
ANR	569632	MemberAccess	sock . end_of_message		569460	0					
ANR	569633	Identifier	sock		569460	0					
ANR	569634	Identifier	end_of_message		569460	1					
ANR	569635	ArgumentList			569460	1					
ANR	569636	CompoundStatement		31:65:913:913	569460	1					
ANR	569637	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to send controllee name to master\\n"" )"	765:8:22511:22575	569460	0	True				
ANR	569638	CallExpression	"dprintf ( D_ALWAYS , ""Failed to send controllee name to master\\n"" )"		569460	0					
ANR	569639	Callee	dprintf		569460	0					
ANR	569640	Identifier	dprintf		569460	0					
ANR	569641	ArgumentList	D_ALWAYS		569460	1					
ANR	569642	Argument	D_ALWAYS		569460	0					
ANR	569643	Identifier	D_ALWAYS		569460	0					
ANR	569644	Argument	"""Failed to send controllee name to master\\n"""		569460	1					
ANR	569645	PrimaryExpression	"""Failed to send controllee name to master\\n"""		569460	0					
ANR	569646	ExpressionStatement	sock . close ( )	766:8:22585:22597	569460	1	True				
ANR	569647	CallExpression	sock . close ( )		569460	0					
ANR	569648	Callee	sock . close		569460	0					
ANR	569649	MemberAccess	sock . close		569460	0					
ANR	569650	Identifier	sock		569460	0					
ANR	569651	Identifier	close		569460	1					
ANR	569652	ArgumentList			569460	1					
ANR	569653	ReturnStatement	return false ;	767:8:22607:22619	569460	2	True				
ANR	569654	Identifier	false		569460	0					
ANR	569655	ElseStatement	else		569460	0					
ANR	569656	CompoundStatement		35:11:1044:1044	569460	0					
ANR	569657	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Controllee name sent to master\\n"" )"	769:8:22642:22699	569460	0	True				
ANR	569658	CallExpression	"dprintf ( D_FULLDEBUG , ""Controllee name sent to master\\n"" )"		569460	0					
ANR	569659	Callee	dprintf		569460	0					
ANR	569660	Identifier	dprintf		569460	0					
ANR	569661	ArgumentList	D_FULLDEBUG		569460	1					
ANR	569662	Argument	D_FULLDEBUG		569460	0					
ANR	569663	Identifier	D_FULLDEBUG		569460	0					
ANR	569664	Argument	"""Controllee name sent to master\\n"""		569460	1					
ANR	569665	PrimaryExpression	"""Controllee name sent to master\\n"""		569460	0					
ANR	569666	ExpressionStatement	sock . close ( )	771:4:22711:22723	569460	8	True				
ANR	569667	CallExpression	sock . close ( )		569460	0					
ANR	569668	Callee	sock . close		569460	0					
ANR	569669	MemberAccess	sock . close		569460	0					
ANR	569670	Identifier	sock		569460	0					
ANR	569671	Identifier	close		569460	1					
ANR	569672	ArgumentList			569460	1					
ANR	569673	ReturnStatement	return true ;	772:4:22729:22740	569460	9	True				
ANR	569674	Identifier	true		569460	0					
ANR	569675	ReturnType	bool		569460	1					
ANR	569676	Identifier	HADStateMachine :: sendControlCmdToMaster		569460	2					
ANR	569677	ParameterList	int comm		569460	3					
ANR	569678	Parameter	int comm	733:41:21576:21583	569460	0	True				
ANR	569679	ParameterType	int		569460	0					
ANR	569680	Identifier	comm		569460	1					
ANR	569681	CFGEntryNode	ENTRY		569460		True				
ANR	569682	CFGExitNode	EXIT		569460		True				
ANR	569683	Symbol	comm		569460						
ANR	569684	Symbol	false		569460						
ANR	569685	Symbol	D_ALWAYS		569460						
ANR	569686	Symbol	D_FULLDEBUG		569460						
ANR	569687	Symbol	* m_masterDaemon		569460						
ANR	569688	Symbol	m_controlleeName		569460						
ANR	569689	Symbol	utilToString		569460						
ANR	569690	Symbol	m_masterDaemon -> startCommand		569460						
ANR	569691	Symbol	& sock		569460						
ANR	569692	Symbol	sock		569460						
ANR	569693	Symbol	sock . connect		569460						
ANR	569694	Symbol	sock . end_of_message		569460						
ANR	569695	Symbol	m_masterDaemon -> addr		569460						
ANR	569696	Symbol	true		569460						
ANR	569697	Symbol	cmd		569460						
ANR	569698	Symbol	sock . code		569460						
ANR	569699	Symbol	m_connectionTimeout		569460						
ANR	569700	Symbol	m_masterDaemon		569460						
ANR	569701	Function	HADStateMachine :: pushReceivedAlive	778:0:22822:22976							
ANR	569702	FunctionDef	HADStateMachine :: pushReceivedAlive (int id)		569701	0					
ANR	569703	CompoundStatement		780:0:22871:22976	569701	0					
ANR	569704	IdentifierDeclStatement	int * alloc_id = new int [ 1 ] ;	781:4:22877:22903	569701	0	True				
ANR	569705	IdentifierDecl	* alloc_id = new int [ 1 ]		569701	0					
ANR	569706	IdentifierDeclType	int *		569701	0					
ANR	569707	Identifier	alloc_id		569701	1					
ANR	569708	AssignmentExpression	* alloc_id = new int [ 1 ]		569701	2		=			
ANR	569709	Identifier	alloc_id		569701	0					
ANR	569710	PrimaryExpression	1		569701	1					
ANR	569711	ExpressionStatement	* alloc_id = id	782:4:22909:22923	569701	1	True				
ANR	569712	AssignmentExpression	* alloc_id = id		569701	0		=			
ANR	569713	UnaryOperationExpression	* alloc_id		569701	0					
ANR	569714	UnaryOperator	*		569701	0					
ANR	569715	Identifier	alloc_id		569701	1					
ANR	569716	Identifier	id		569701	1					
ANR	569717	ReturnStatement	return ( receivedAliveList . Append ( alloc_id ) ) ;	783:4:22929:22974	569701	2	True				
ANR	569718	CallExpression	receivedAliveList . Append ( alloc_id )		569701	0					
ANR	569719	Callee	receivedAliveList . Append		569701	0					
ANR	569720	MemberAccess	receivedAliveList . Append		569701	0					
ANR	569721	Identifier	receivedAliveList		569701	0					
ANR	569722	Identifier	Append		569701	1					
ANR	569723	ArgumentList	alloc_id		569701	1					
ANR	569724	Argument	alloc_id		569701	0					
ANR	569725	Identifier	alloc_id		569701	0					
ANR	569726	ReturnType	int		569701	1					
ANR	569727	Identifier	HADStateMachine :: pushReceivedAlive		569701	2					
ANR	569728	ParameterList	int id		569701	3					
ANR	569729	Parameter	int id	779:36:22862:22867	569701	0	True				
ANR	569730	ParameterType	int		569701	0					
ANR	569731	Identifier	id		569701	1					
ANR	569732	CFGEntryNode	ENTRY		569701		True				
ANR	569733	CFGExitNode	EXIT		569701		True				
ANR	569734	Symbol	* alloc_id		569701						
ANR	569735	Symbol	receivedAliveList . Append		569701						
ANR	569736	Symbol	receivedAliveList		569701						
ANR	569737	Symbol	id		569701						
ANR	569738	Symbol	alloc_id		569701						
ANR	569739	Function	HADStateMachine :: pushReceivedId	789:0:23056:23195							
ANR	569740	FunctionDef	HADStateMachine :: pushReceivedId (int id)		569739	0					
ANR	569741	CompoundStatement		791:0:23102:23195	569739	0					
ANR	569742	IdentifierDeclStatement	int * alloc_id = new int [ 1 ] ;	792:1:23105:23131	569739	0	True				
ANR	569743	IdentifierDecl	* alloc_id = new int [ 1 ]		569739	0					
ANR	569744	IdentifierDeclType	int *		569739	0					
ANR	569745	Identifier	alloc_id		569739	1					
ANR	569746	AssignmentExpression	* alloc_id = new int [ 1 ]		569739	2		=			
ANR	569747	Identifier	alloc_id		569739	0					
ANR	569748	PrimaryExpression	1		569739	1					
ANR	569749	ExpressionStatement	* alloc_id = id	793:1:23134:23148	569739	1	True				
ANR	569750	AssignmentExpression	* alloc_id = id		569739	0		=			
ANR	569751	UnaryOperationExpression	* alloc_id		569739	0					
ANR	569752	UnaryOperator	*		569739	0					
ANR	569753	Identifier	alloc_id		569739	1					
ANR	569754	Identifier	id		569739	1					
ANR	569755	ReturnStatement	return ( receivedIdList . Append ( alloc_id ) ) ;	794:1:23151:23193	569739	2	True				
ANR	569756	CallExpression	receivedIdList . Append ( alloc_id )		569739	0					
ANR	569757	Callee	receivedIdList . Append		569739	0					
ANR	569758	MemberAccess	receivedIdList . Append		569739	0					
ANR	569759	Identifier	receivedIdList		569739	0					
ANR	569760	Identifier	Append		569739	1					
ANR	569761	ArgumentList	alloc_id		569739	1					
ANR	569762	Argument	alloc_id		569739	0					
ANR	569763	Identifier	alloc_id		569739	0					
ANR	569764	ReturnType	int		569739	1					
ANR	569765	Identifier	HADStateMachine :: pushReceivedId		569739	2					
ANR	569766	ParameterList	int id		569739	3					
ANR	569767	Parameter	int id	790:33:23093:23098	569739	0	True				
ANR	569768	ParameterType	int		569739	0					
ANR	569769	Identifier	id		569739	1					
ANR	569770	CFGEntryNode	ENTRY		569739		True				
ANR	569771	CFGExitNode	EXIT		569739		True				
ANR	569772	Symbol	receivedIdList		569739						
ANR	569773	Symbol	* alloc_id		569739						
ANR	569774	Symbol	receivedIdList . Append		569739						
ANR	569775	Symbol	id		569739						
ANR	569776	Symbol	alloc_id		569739						
ANR	569777	Function	HADStateMachine :: getHadList	807:0:23620:25827							
ANR	569778	FunctionDef	"HADStateMachine :: getHadList (const char * str , bool usePrimary , StringList & otherIps , StringList & allIps , int & selfId)"		569777	0					
ANR	569779	CompoundStatement		813:0:23776:25827	569777	0					
ANR	569780	IdentifierDeclStatement	StringList had_list ;	814:4:23782:23801	569777	0	True				
ANR	569781	IdentifierDecl	had_list		569777	0					
ANR	569782	IdentifierDeclType	StringList		569777	0					
ANR	569783	Identifier	had_list		569777	1					
ANR	569784	IdentifierDeclStatement	int counter = 0 ;	815:4:23807:23829	569777	1	True				
ANR	569785	IdentifierDecl	counter = 0		569777	0					
ANR	569786	IdentifierDeclType	int		569777	0					
ANR	569787	Identifier	counter		569777	1					
ANR	569788	AssignmentExpression	counter = 0		569777	2		=			
ANR	569789	Identifier	counter		569777	0					
ANR	569790	PrimaryExpression	0		569777	1					
ANR	569791	IdentifierDeclStatement	bool isPrimaryCopy = false ;	816:4:23856:23882	569777	2	True				
ANR	569792	IdentifierDecl	isPrimaryCopy = false		569777	0					
ANR	569793	IdentifierDeclType	bool		569777	0					
ANR	569794	Identifier	isPrimaryCopy		569777	1					
ANR	569795	AssignmentExpression	isPrimaryCopy = false		569777	2		=			
ANR	569796	Identifier	false		569777	0					
ANR	569797	Identifier	false		569777	1					
ANR	569798	ExpressionStatement	had_list . initializeFromString ( str )	819:4:23946:23982	569777	3	True				
ANR	569799	CallExpression	had_list . initializeFromString ( str )		569777	0					
ANR	569800	Callee	had_list . initializeFromString		569777	0					
ANR	569801	MemberAccess	had_list . initializeFromString		569777	0					
ANR	569802	Identifier	had_list		569777	0					
ANR	569803	Identifier	initializeFromString		569777	1					
ANR	569804	ArgumentList	str		569777	1					
ANR	569805	Argument	str		569777	0					
ANR	569806	Identifier	str		569777	0					
ANR	569807	ExpressionStatement	counter = had_list . number ( ) - 1	820:4:23988:24019	569777	4	True				
ANR	569808	AssignmentExpression	counter = had_list . number ( ) - 1		569777	0		=			
ANR	569809	Identifier	counter		569777	0					
ANR	569810	AdditiveExpression	had_list . number ( ) - 1		569777	1		-			
ANR	569811	CallExpression	had_list . number ( )		569777	0					
ANR	569812	Callee	had_list . number		569777	0					
ANR	569813	MemberAccess	had_list . number		569777	0					
ANR	569814	Identifier	had_list		569777	0					
ANR	569815	Identifier	number		569777	1					
ANR	569816	ArgumentList			569777	1					
ANR	569817	PrimaryExpression	1		569777	1					
ANR	569818	IdentifierDeclStatement	char * try_address ;	822:4:24026:24043	569777	5	True				
ANR	569819	IdentifierDecl	* try_address		569777	0					
ANR	569820	IdentifierDeclType	char *		569777	0					
ANR	569821	Identifier	try_address		569777	1					
ANR	569822	ExpressionStatement	had_list . rewind ( )	823:4:24049:24066	569777	6	True				
ANR	569823	CallExpression	had_list . rewind ( )		569777	0					
ANR	569824	Callee	had_list . rewind		569777	0					
ANR	569825	MemberAccess	had_list . rewind		569777	0					
ANR	569826	Identifier	had_list		569777	0					
ANR	569827	Identifier	rewind		569777	1					
ANR	569828	ArgumentList			569777	1					
ANR	569829	IdentifierDeclStatement	Sinful my_addr ( daemonCore -> InfoCommandSinfulString ( ) ) ;	825:1:24070:24125	569777	7	True				
ANR	569830	IdentifierDecl	my_addr ( daemonCore -> InfoCommandSinfulString ( ) )		569777	0					
ANR	569831	IdentifierDeclType	Sinful		569777	0					
ANR	569832	Identifier	my_addr		569777	1					
ANR	569833	CallExpression	daemonCore -> InfoCommandSinfulString ( )		569777	2					
ANR	569834	Callee	daemonCore -> InfoCommandSinfulString		569777	0					
ANR	569835	PtrMemberAccess	daemonCore -> InfoCommandSinfulString		569777	0					
ANR	569836	Identifier	daemonCore		569777	0					
ANR	569837	Identifier	InfoCommandSinfulString		569777	1					
ANR	569838	ArgumentList			569777	1					
ANR	569839	ExpressionStatement	ASSERT ( daemonCore -> InfoCommandSinfulString ( ) && my_addr . valid ( ) )	826:1:24128:24194	569777	8	True				
ANR	569840	CallExpression	ASSERT ( daemonCore -> InfoCommandSinfulString ( ) && my_addr . valid ( ) )		569777	0					
ANR	569841	Callee	ASSERT		569777	0					
ANR	569842	Identifier	ASSERT		569777	0					
ANR	569843	ArgumentList	daemonCore -> InfoCommandSinfulString ( ) && my_addr . valid ( )		569777	1					
ANR	569844	Argument	daemonCore -> InfoCommandSinfulString ( ) && my_addr . valid ( )		569777	0					
ANR	569845	AndExpression	daemonCore -> InfoCommandSinfulString ( ) && my_addr . valid ( )		569777	0		&&			
ANR	569846	CallExpression	daemonCore -> InfoCommandSinfulString ( )		569777	0					
ANR	569847	Callee	daemonCore -> InfoCommandSinfulString		569777	0					
ANR	569848	PtrMemberAccess	daemonCore -> InfoCommandSinfulString		569777	0					
ANR	569849	Identifier	daemonCore		569777	0					
ANR	569850	Identifier	InfoCommandSinfulString		569777	1					
ANR	569851	ArgumentList			569777	1					
ANR	569852	CallExpression	my_addr . valid ( )		569777	1					
ANR	569853	Callee	my_addr . valid		569777	0					
ANR	569854	MemberAccess	my_addr . valid		569777	0					
ANR	569855	Identifier	my_addr		569777	0					
ANR	569856	Identifier	valid		569777	1					
ANR	569857	ArgumentList			569777	1					
ANR	569858	IdentifierDeclStatement	bool iAmPresent = false ;	828:4:24201:24224	569777	9	True				
ANR	569859	IdentifierDecl	iAmPresent = false		569777	0					
ANR	569860	IdentifierDeclType	bool		569777	0					
ANR	569861	Identifier	iAmPresent		569777	1					
ANR	569862	AssignmentExpression	iAmPresent = false		569777	2		=			
ANR	569863	Identifier	false		569777	0					
ANR	569864	Identifier	false		569777	1					
ANR	569865	WhileStatement	while ( ( try_address = had_list . next ( ) ) )		569777	10					
ANR	569866	Condition	try_address = had_list . next ( )	829:11:24237:24267	569777	0	True				
ANR	569867	AssignmentExpression	try_address = had_list . next ( )		569777	0		=			
ANR	569868	Identifier	try_address		569777	0					
ANR	569869	CallExpression	had_list . next ( )		569777	1					
ANR	569870	Callee	had_list . next		569777	0					
ANR	569871	MemberAccess	had_list . next		569777	0					
ANR	569872	Identifier	had_list		569777	0					
ANR	569873	Identifier	next		569777	1					
ANR	569874	ArgumentList			569777	1					
ANR	569875	CompoundStatement		18:8:504:551	569777	1					
ANR	569876	IdentifierDeclStatement	char * sinful_addr = utilToSinful ( try_address ) ;	830:8:24281:24328	569777	0	True				
ANR	569877	IdentifierDecl	* sinful_addr = utilToSinful ( try_address )		569777	0					
ANR	569878	IdentifierDeclType	char *		569777	0					
ANR	569879	Identifier	sinful_addr		569777	1					
ANR	569880	AssignmentExpression	* sinful_addr = utilToSinful ( try_address )		569777	2		=			
ANR	569881	Identifier	sinful_addr		569777	0					
ANR	569882	CallExpression	utilToSinful ( try_address )		569777	1					
ANR	569883	Callee	utilToSinful		569777	0					
ANR	569884	Identifier	utilToSinful		569777	0					
ANR	569885	ArgumentList	try_address		569777	1					
ANR	569886	Argument	try_address		569777	0					
ANR	569887	Identifier	try_address		569777	0					
ANR	569888	Statement	dprintf	831:2:24332:24338	569777	1	True				
ANR	569889	Statement	(	831:9:24339:24339	569777	2	True				
ANR	569890	Statement	D_ALWAYS	831:10:24340:24347	569777	3	True				
ANR	569891	Statement	","	831:18:24348:24348	569777	4	True				
ANR	569892	Statement	"""HADStateMachine::initializeHADList my address %s """	832:4:24354:24404	569777	5	True				
ANR	569893	Statement	"""vs. next address in the list%s\\n"""	833:4:24410:24443	569777	6	True				
ANR	569894	Statement	","	833:38:24444:24444	569777	7	True				
ANR	569895	Statement	my_addr	834:4:24450:24456	569777	8	True				
ANR	569896	Statement	.	834:11:24457:24457	569777	9	True				
ANR	569897	Statement	getSinful	834:12:24458:24466	569777	10	True				
ANR	569898	Statement	(	834:21:24467:24467	569777	11	True				
ANR	569899	Statement	)	834:22:24468:24468	569777	12	True				
ANR	569900	Statement	","	834:23:24469:24469	569777	13	True				
ANR	569901	Statement	sinful_addr	834:25:24471:24481	569777	14	True				
ANR	569902	Statement	)	834:37:24483:24483	569777	15	True				
ANR	569903	ExpressionStatement		834:38:24484:24484	569777	16	True				
ANR	569904	IfStatement	if ( sinful_addr == NULL )		569777	17					
ANR	569905	Condition	sinful_addr == NULL	835:12:24498:24516	569777	0	True				
ANR	569906	EqualityExpression	sinful_addr == NULL		569777	0		==			
ANR	569907	Identifier	sinful_addr		569777	0					
ANR	569908	Identifier	NULL		569777	1					
ANR	569909	CompoundStatement		23:34:743:743	569777	1					
ANR	569910	ExpressionStatement	"dprintf ( D_ALWAYS , ""HAD CONFIGURATION ERROR: pid %d"" , daemonCore -> getpid ( ) )"	836:12:24534:24616	569777	0	True				
ANR	569911	CallExpression	"dprintf ( D_ALWAYS , ""HAD CONFIGURATION ERROR: pid %d"" , daemonCore -> getpid ( ) )"		569777	0					
ANR	569912	Callee	dprintf		569777	0					
ANR	569913	Identifier	dprintf		569777	0					
ANR	569914	ArgumentList	D_ALWAYS		569777	1					
ANR	569915	Argument	D_ALWAYS		569777	0					
ANR	569916	Identifier	D_ALWAYS		569777	0					
ANR	569917	Argument	"""HAD CONFIGURATION ERROR: pid %d"""		569777	1					
ANR	569918	PrimaryExpression	"""HAD CONFIGURATION ERROR: pid %d"""		569777	0					
ANR	569919	Argument	daemonCore -> getpid ( )		569777	2					
ANR	569920	CallExpression	daemonCore -> getpid ( )		569777	0					
ANR	569921	Callee	daemonCore -> getpid		569777	0					
ANR	569922	PtrMemberAccess	daemonCore -> getpid		569777	0					
ANR	569923	Identifier	daemonCore		569777	0					
ANR	569924	Identifier	getpid		569777	1					
ANR	569925	ArgumentList			569777	1					
ANR	569926	ExpressionStatement	"dprintf ( D_ALWAYS , ""not valid address %s\\n"" , try_address )"	838:12:24630:24687	569777	1	True				
ANR	569927	CallExpression	"dprintf ( D_ALWAYS , ""not valid address %s\\n"" , try_address )"		569777	0					
ANR	569928	Callee	dprintf		569777	0					
ANR	569929	Identifier	dprintf		569777	0					
ANR	569930	ArgumentList	D_ALWAYS		569777	1					
ANR	569931	Argument	D_ALWAYS		569777	0					
ANR	569932	Identifier	D_ALWAYS		569777	0					
ANR	569933	Argument	"""not valid address %s\\n"""		569777	1					
ANR	569934	PrimaryExpression	"""not valid address %s\\n"""		569777	0					
ANR	569935	Argument	try_address		569777	2					
ANR	569936	Identifier	try_address		569777	0					
ANR	569937	ExpressionStatement	"utilCrucialError ( """" )"	840:12:24702:24724	569777	2	True				
ANR	569938	CallExpression	"utilCrucialError ( """" )"		569777	0					
ANR	569939	Callee	utilCrucialError		569777	0					
ANR	569940	Identifier	utilCrucialError		569777	0					
ANR	569941	ArgumentList	""""""		569777	1					
ANR	569942	Argument	""""""		569777	0					
ANR	569943	PrimaryExpression	""""""		569777	0					
ANR	569944	ContinueStatement	continue ;	841:12:24738:24746	569777	3	True				
ANR	569945	ExpressionStatement	allIps . insert ( sinful_addr )	843:2:24760:24788	569777	18	True				
ANR	569946	CallExpression	allIps . insert ( sinful_addr )		569777	0					
ANR	569947	Callee	allIps . insert		569777	0					
ANR	569948	MemberAccess	allIps . insert		569777	0					
ANR	569949	Identifier	allIps		569777	0					
ANR	569950	Identifier	insert		569777	1					
ANR	569951	ArgumentList	sinful_addr		569777	1					
ANR	569952	Argument	sinful_addr		569777	0					
ANR	569953	Identifier	sinful_addr		569777	0					
ANR	569954	IfStatement	if ( my_addr . addressPointsToMe ( Sinful ( sinful_addr ) ) )		569777	19					
ANR	569955	Condition	my_addr . addressPointsToMe ( Sinful ( sinful_addr ) )	844:12:24802:24849	569777	0	True				
ANR	569956	CallExpression	my_addr . addressPointsToMe ( Sinful ( sinful_addr ) )		569777	0					
ANR	569957	Callee	my_addr . addressPointsToMe		569777	0					
ANR	569958	MemberAccess	my_addr . addressPointsToMe		569777	0					
ANR	569959	Identifier	my_addr		569777	0					
ANR	569960	Identifier	addressPointsToMe		569777	1					
ANR	569961	ArgumentList	Sinful ( sinful_addr )		569777	1					
ANR	569962	Argument	Sinful ( sinful_addr )		569777	0					
ANR	569963	CallExpression	Sinful ( sinful_addr )		569777	0					
ANR	569964	Callee	Sinful		569777	0					
ANR	569965	Identifier	Sinful		569777	0					
ANR	569966	ArgumentList	sinful_addr		569777	1					
ANR	569967	Argument	sinful_addr		569777	0					
ANR	569968	Identifier	sinful_addr		569777	0					
ANR	569969	CompoundStatement		32:63:1076:1076	569777	1					
ANR	569970	ExpressionStatement	iAmPresent = true	845:12:24867:24884	569777	0	True				
ANR	569971	AssignmentExpression	iAmPresent = true		569777	0		=			
ANR	569972	Identifier	iAmPresent		569777	0					
ANR	569973	Identifier	true		569777	1					
ANR	569974	ExpressionStatement	selfId = counter	848:12:25011:25027	569777	1	True				
ANR	569975	AssignmentExpression	selfId = counter		569777	0		=			
ANR	569976	Identifier	selfId		569777	0					
ANR	569977	Identifier	counter		569777	1					
ANR	569978	IfStatement	if ( usePrimary && counter == ( had_list . number ( ) - 1 ) )		569777	2					
ANR	569979	Condition	usePrimary && counter == ( had_list . number ( ) - 1 )	850:15:25045:25092	569777	0	True				
ANR	569980	AndExpression	usePrimary && counter == ( had_list . number ( ) - 1 )		569777	0		&&			
ANR	569981	Identifier	usePrimary		569777	0					
ANR	569982	EqualityExpression	counter == ( had_list . number ( ) - 1 )		569777	1		==			
ANR	569983	Identifier	counter		569777	0					
ANR	569984	AdditiveExpression	had_list . number ( ) - 1		569777	1		-			
ANR	569985	CallExpression	had_list . number ( )		569777	0					
ANR	569986	Callee	had_list . number		569777	0					
ANR	569987	MemberAccess	had_list . number		569777	0					
ANR	569988	Identifier	had_list		569777	0					
ANR	569989	Identifier	number		569777	1					
ANR	569990	ArgumentList			569777	1					
ANR	569991	PrimaryExpression	1		569777	1					
ANR	569992	CompoundStatement		38:64:1317:1317	569777	1					
ANR	569993	ExpressionStatement	isPrimaryCopy = true	854:4:25219:25239	569777	0	True				
ANR	569994	AssignmentExpression	isPrimaryCopy = true		569777	0		=			
ANR	569995	Identifier	isPrimaryCopy		569777	0					
ANR	569996	Identifier	true		569777	1					
ANR	569997	ElseStatement	else		569777	0					
ANR	569998	CompoundStatement		44:15:1493:1493	569777	0					
ANR	569999	ExpressionStatement	otherIps . insert ( sinful_addr )	857:12:25284:25314	569777	0	True				
ANR	570000	CallExpression	otherIps . insert ( sinful_addr )		569777	0					
ANR	570001	Callee	otherIps . insert		569777	0					
ANR	570002	MemberAccess	otherIps . insert		569777	0					
ANR	570003	Identifier	otherIps		569777	0					
ANR	570004	Identifier	insert		569777	1					
ANR	570005	ArgumentList	sinful_addr		569777	1					
ANR	570006	Argument	sinful_addr		569777	0					
ANR	570007	Identifier	sinful_addr		569777	0					
ANR	570008	ExpressionStatement	free ( sinful_addr )	863:8:25488:25507	569777	20	True				
ANR	570009	CallExpression	free ( sinful_addr )		569777	0					
ANR	570010	Callee	free		569777	0					
ANR	570011	Identifier	free		569777	0					
ANR	570012	ArgumentList	sinful_addr		569777	1					
ANR	570013	Argument	sinful_addr		569777	0					
ANR	570014	Identifier	sinful_addr		569777	0					
ANR	570015	ExpressionStatement	counter --	864:8:25517:25527	569777	21	True				
ANR	570016	PostIncDecOperationExpression	counter --		569777	0					
ANR	570017	Identifier	counter		569777	0					
ANR	570018	IncDec	--		569777	1					
ANR	570019	IfStatement	if ( ! iAmPresent )		569777	11					
ANR	570020	Condition	! iAmPresent	867:8:25557:25567	569777	0	True				
ANR	570021	UnaryOperationExpression	! iAmPresent		569777	0					
ANR	570022	UnaryOperator	!		569777	0					
ANR	570023	Identifier	iAmPresent		569777	1					
ANR	570024	CompoundStatement		56:2:1798:1812	569777	1					
ANR	570025	IdentifierDeclStatement	char buf [ 1024 ] ;	868:2:25575:25589	569777	0	True				
ANR	570026	IdentifierDecl	buf [ 1024 ]		569777	0					
ANR	570027	IdentifierDeclType	char [ 1024 ]		569777	0					
ANR	570028	Identifier	buf		569777	1					
ANR	570029	PrimaryExpression	1024		569777	2					
ANR	570030	Statement	snprintf	869:2:25593:25600	569777	1	True				
ANR	570031	Statement	(	869:10:25601:25601	569777	2	True				
ANR	570032	Statement	buf	869:12:25603:25605	569777	3	True				
ANR	570033	Statement	","	869:15:25606:25606	569777	4	True				
ANR	570034	Statement	sizeof	869:17:25608:25613	569777	5	True				
ANR	570035	Statement	(	869:23:25614:25614	569777	6	True				
ANR	570036	Statement	buf	869:24:25615:25617	569777	7	True				
ANR	570037	Statement	)	869:27:25618:25618	569777	8	True				
ANR	570038	Statement	","	869:28:25619:25619	569777	9	True				
ANR	570039	Statement	"""HAD CONFIGURATION ERROR:  my address '%s'"""	870:6:25627:25669	569777	10	True				
ANR	570040	Statement	"""is not present in HAD_LIST '%s'"""	871:6:25677:25709	569777	11	True				
ANR	570041	Statement	","	871:39:25710:25710	569777	12	True				
ANR	570042	Statement	daemonCore	872:6:25718:25727	569777	13	True				
ANR	570043	Statement	->	872:16:25728:25729	569777	14	True				
ANR	570044	Statement	InfoCommandSinfulString	872:18:25730:25752	569777	15	True				
ANR	570045	Statement	(	872:41:25753:25753	569777	16	True				
ANR	570046	Statement	)	872:42:25754:25754	569777	17	True				
ANR	570047	Statement	","	872:43:25755:25755	569777	18	True				
ANR	570048	Statement	str	872:45:25757:25759	569777	19	True				
ANR	570049	Statement	)	872:49:25761:25761	569777	20	True				
ANR	570050	ExpressionStatement		872:50:25762:25762	569777	21	True				
ANR	570051	ExpressionStatement	utilCrucialError ( buf )	873:8:25772:25795	569777	22	True				
ANR	570052	CallExpression	utilCrucialError ( buf )		569777	0					
ANR	570053	Callee	utilCrucialError		569777	0					
ANR	570054	Identifier	utilCrucialError		569777	0					
ANR	570055	ArgumentList	buf		569777	1					
ANR	570056	Argument	buf		569777	0					
ANR	570057	Identifier	buf		569777	0					
ANR	570058	ReturnStatement	return isPrimaryCopy ;	876:1:25805:25825	569777	12	True				
ANR	570059	Identifier	isPrimaryCopy		569777	0					
ANR	570060	ReturnType	bool		569777	1					
ANR	570061	Identifier	HADStateMachine :: getHadList		569777	2					
ANR	570062	ParameterList	"const char * str , bool usePrimary , StringList & otherIps , StringList & allIps , int & selfId"		569777	3					
ANR	570063	Parameter	const char * str	808:29:23654:23668	569777	0	True				
ANR	570064	ParameterType	const char *		569777	0					
ANR	570065	Identifier	str		569777	1					
ANR	570066	Parameter	bool usePrimary	809:8:23679:23693	569777	1	True				
ANR	570067	ParameterType	bool		569777	0					
ANR	570068	Identifier	usePrimary		569777	1					
ANR	570069	Parameter	StringList & otherIps	810:8:23704:23723	569777	2	True				
ANR	570070	ParameterType	StringList &		569777	0					
ANR	570071	Identifier	otherIps		569777	1					
ANR	570072	Parameter	StringList & allIps	811:8:23734:23751	569777	3	True				
ANR	570073	ParameterType	StringList &		569777	0					
ANR	570074	Identifier	allIps		569777	1					
ANR	570075	Parameter	int & selfId	812:8:23762:23772	569777	4	True				
ANR	570076	ParameterType	int &		569777	0					
ANR	570077	Identifier	selfId		569777	1					
ANR	570078	CFGEntryNode	ENTRY		569777		True				
ANR	570079	CFGExitNode	EXIT		569777		True				
ANR	570080	Symbol	utilToSinful		569777						
ANR	570081	Symbol	daemonCore -> getpid		569777						
ANR	570082	Symbol	otherIps		569777						
ANR	570083	Symbol	my_addr		569777						
ANR	570084	Symbol	had_list . next		569777						
ANR	570085	Symbol	daemonCore		569777						
ANR	570086	Symbol	Sinful		569777						
ANR	570087	Symbol	iAmPresent		569777						
ANR	570088	Symbol	had_list		569777						
ANR	570089	Symbol	had_list . number		569777						
ANR	570090	Symbol	usePrimary		569777						
ANR	570091	Symbol	allIps		569777						
ANR	570092	Symbol	daemonCore -> InfoCommandSinfulString		569777						
ANR	570093	Symbol	sinful_addr		569777						
ANR	570094	Symbol	NULL		569777						
ANR	570095	Symbol	try_address		569777						
ANR	570096	Symbol	false		569777						
ANR	570097	Symbol	D_ALWAYS		569777						
ANR	570098	Symbol	counter		569777						
ANR	570099	Symbol	my_addr . addressPointsToMe		569777						
ANR	570100	Symbol	str		569777						
ANR	570101	Symbol	buf		569777						
ANR	570102	Symbol	my_addr . valid		569777						
ANR	570103	Symbol	* daemonCore		569777						
ANR	570104	Symbol	selfId		569777						
ANR	570105	Symbol	true		569777						
ANR	570106	Symbol	isPrimaryCopy		569777						
ANR	570107	Function	HADStateMachine :: checkList	887:0:26134:26337							
ANR	570108	FunctionDef	HADStateMachine :: checkList (List < int > * list)		570107	0					
ANR	570109	CompoundStatement		889:0:26185:26337	570107	0					
ANR	570110	IdentifierDeclStatement	int id ;	890:4:26191:26197	570107	0	True				
ANR	570111	IdentifierDecl	id		570107	0					
ANR	570112	IdentifierDeclType	int		570107	0					
ANR	570113	Identifier	id		570107	1					
ANR	570114	ExpressionStatement	list -> Rewind ( )	892:4:26204:26218	570107	1	True				
ANR	570115	CallExpression	list -> Rewind ( )		570107	0					
ANR	570116	Callee	list -> Rewind		570107	0					
ANR	570117	PtrMemberAccess	list -> Rewind		570107	0					
ANR	570118	Identifier	list		570107	0					
ANR	570119	Identifier	Rewind		570107	1					
ANR	570120	ArgumentList			570107	1					
ANR	570121	WhileStatement	while ( list -> Next ( id ) )		570107	2					
ANR	570122	Condition	list -> Next ( id )	893:10:26230:26245	570107	0	True				
ANR	570123	CallExpression	list -> Next ( id )		570107	0					
ANR	570124	Callee	list -> Next		570107	0					
ANR	570125	PtrMemberAccess	list -> Next		570107	0					
ANR	570126	Identifier	list		570107	0					
ANR	570127	Identifier	Next		570107	1					
ANR	570128	ArgumentList	id		570107	1					
ANR	570129	Argument	id		570107	0					
ANR	570130	Identifier	id		570107	0					
ANR	570131	CompoundStatement		5:29:63:63	570107	1					
ANR	570132	IfStatement	if ( id > m_selfId )		570107	0					
ANR	570133	Condition	id > m_selfId	894:11:26262:26274	570107	0	True				
ANR	570134	RelationalExpression	id > m_selfId		570107	0		>			
ANR	570135	Identifier	id		570107	0					
ANR	570136	Identifier	m_selfId		570107	1					
ANR	570137	CompoundStatement		6:25:90:90	570107	1					
ANR	570138	ReturnStatement	return false ;	895:12:26290:26302	570107	0	True				
ANR	570139	Identifier	false		570107	0					
ANR	570140	ReturnStatement	return true ;	898:4:26324:26335	570107	3	True				
ANR	570141	Identifier	true		570107	0					
ANR	570142	ReturnType	bool		570107	1					
ANR	570143	Identifier	HADStateMachine :: checkList		570107	2					
ANR	570144	ParameterList	List < int > * list		570107	3					
ANR	570145	Parameter	List < int > * list	888:28:26167:26181	570107	0	True				
ANR	570146	ParameterType	List < int > *		570107	0					
ANR	570147	Identifier	list		570107	1					
ANR	570148	CFGEntryNode	ENTRY		570107		True				
ANR	570149	CFGExitNode	EXIT		570107		True				
ANR	570150	Symbol	list -> Next		570107						
ANR	570151	Symbol	* list		570107						
ANR	570152	Symbol	m_selfId		570107						
ANR	570153	Symbol	false		570107						
ANR	570154	Symbol	true		570107						
ANR	570155	Symbol	id		570107						
ANR	570156	Symbol	list		570107						
ANR	570157	Function	HADStateMachine :: removeAllFromList	904:0:26417:26639							
ANR	570158	FunctionDef	HADStateMachine :: removeAllFromList (List < int > * list)		570157	0					
ANR	570159	CompoundStatement		906:0:26476:26639	570157	0					
ANR	570160	IdentifierDeclStatement	int * elem ;	907:4:26482:26491	570157	0	True				
ANR	570161	IdentifierDecl	* elem		570157	0					
ANR	570162	IdentifierDeclType	int *		570157	0					
ANR	570163	Identifier	elem		570157	1					
ANR	570164	ExpressionStatement	list -> Rewind ( )	908:4:26497:26511	570157	1	True				
ANR	570165	CallExpression	list -> Rewind ( )		570157	0					
ANR	570166	Callee	list -> Rewind		570157	0					
ANR	570167	PtrMemberAccess	list -> Rewind		570157	0					
ANR	570168	Identifier	list		570157	0					
ANR	570169	Identifier	Rewind		570157	1					
ANR	570170	ArgumentList			570157	1					
ANR	570171	WhileStatement	while ( ( elem = list -> Next ( ) ) )		570157	2					
ANR	570172	Condition	elem = list -> Next ( )	909:10:26523:26543	570157	0	True				
ANR	570173	AssignmentExpression	elem = list -> Next ( )		570157	0		=			
ANR	570174	Identifier	elem		570157	0					
ANR	570175	CallExpression	list -> Next ( )		570157	1					
ANR	570176	Callee	list -> Next		570157	0					
ANR	570177	PtrMemberAccess	list -> Next		570157	0					
ANR	570178	Identifier	list		570157	0					
ANR	570179	Identifier	Next		570157	1					
ANR	570180	ArgumentList			570157	1					
ANR	570181	CompoundStatement		4:34:70:70	570157	1					
ANR	570182	Statement	delete	910:8:26557:26562	570157	0	True				
ANR	570183	ExpressionStatement	elem	910:15:26564:26568	570157	1	True				
ANR	570184	Identifier	elem		570157	0					
ANR	570185	ExpressionStatement	list -> DeleteCurrent ( )	911:8:26578:26599	570157	2	True				
ANR	570186	CallExpression	list -> DeleteCurrent ( )		570157	0					
ANR	570187	Callee	list -> DeleteCurrent		570157	0					
ANR	570188	PtrMemberAccess	list -> DeleteCurrent		570157	0					
ANR	570189	Identifier	list		570157	0					
ANR	570190	Identifier	DeleteCurrent		570157	1					
ANR	570191	ArgumentList			570157	1					
ANR	570192	ReturnType	void		570157	1					
ANR	570193	Identifier	HADStateMachine :: removeAllFromList		570157	2					
ANR	570194	ParameterList	List < int > * list		570157	3					
ANR	570195	Parameter	List < int > * list	905:36:26458:26472	570157	0	True				
ANR	570196	ParameterType	List < int > *		570157	0					
ANR	570197	Identifier	list		570157	1					
ANR	570198	CFGEntryNode	ENTRY		570157		True				
ANR	570199	CFGExitNode	EXIT		570157		True				
ANR	570200	Symbol	elem		570157						
ANR	570201	Symbol	list -> Next		570157						
ANR	570202	Symbol	* list		570157						
ANR	570203	Symbol	list		570157						
ANR	570204	Function	HADStateMachine :: clearBuffers	920:0:26721:26851							
ANR	570205	FunctionDef	HADStateMachine :: clearBuffers ()		570204	0					
ANR	570206	CompoundStatement		922:0:26762:26851	570204	0					
ANR	570207	ExpressionStatement	removeAllFromList ( & receivedAliveList )	923:4:26768:26807	570204	0	True				
ANR	570208	CallExpression	removeAllFromList ( & receivedAliveList )		570204	0					
ANR	570209	Callee	removeAllFromList		570204	0					
ANR	570210	Identifier	removeAllFromList		570204	0					
ANR	570211	ArgumentList	& receivedAliveList		570204	1					
ANR	570212	Argument	& receivedAliveList		570204	0					
ANR	570213	UnaryOperationExpression	& receivedAliveList		570204	0					
ANR	570214	UnaryOperator	&		570204	0					
ANR	570215	Identifier	receivedAliveList		570204	1					
ANR	570216	ExpressionStatement	removeAllFromList ( & receivedIdList )	924:4:26813:26849	570204	1	True				
ANR	570217	CallExpression	removeAllFromList ( & receivedIdList )		570204	0					
ANR	570218	Callee	removeAllFromList		570204	0					
ANR	570219	Identifier	removeAllFromList		570204	0					
ANR	570220	ArgumentList	& receivedIdList		570204	1					
ANR	570221	Argument	& receivedIdList		570204	0					
ANR	570222	UnaryOperationExpression	& receivedIdList		570204	0					
ANR	570223	UnaryOperator	&		570204	0					
ANR	570224	Identifier	receivedIdList		570204	1					
ANR	570225	ReturnType	void		570204	1					
ANR	570226	Identifier	HADStateMachine :: clearBuffers		570204	2					
ANR	570227	ParameterList			570204	3					
ANR	570228	CFGEntryNode	ENTRY		570204		True				
ANR	570229	CFGExitNode	EXIT		570204		True				
ANR	570230	Symbol	& receivedAliveList		570204						
ANR	570231	Symbol	& receivedIdList		570204						
ANR	570232	Function	HADStateMachine :: commandHandlerHad	931:0:27018:28936							
ANR	570233	FunctionDef	"HADStateMachine :: commandHandlerHad (int cmd , Stream * strm)"		570232	0					
ANR	570234	CompoundStatement		933:0:27080:28936	570232	0					
ANR	570235	IdentifierDeclStatement	char buf [ 1024 ] ;	934:1:27083:27097	570232	0	True				
ANR	570236	IdentifierDecl	buf [ 1024 ]		570232	0					
ANR	570237	IdentifierDeclType	char [ 1024 ]		570232	0					
ANR	570238	Identifier	buf		570232	1					
ANR	570239	PrimaryExpression	1024		570232	2					
ANR	570240	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""commandHandler command %s(%d) is received\\n"" , utilToString ( cmd ) , cmd )"	936:4:27104:27200	570232	1	True				
ANR	570241	CallExpression	"dprintf ( D_FULLDEBUG , ""commandHandler command %s(%d) is received\\n"" , utilToString ( cmd ) , cmd )"		570232	0					
ANR	570242	Callee	dprintf		570232	0					
ANR	570243	Identifier	dprintf		570232	0					
ANR	570244	ArgumentList	D_FULLDEBUG		570232	1					
ANR	570245	Argument	D_FULLDEBUG		570232	0					
ANR	570246	Identifier	D_FULLDEBUG		570232	0					
ANR	570247	Argument	"""commandHandler command %s(%d) is received\\n"""		570232	1					
ANR	570248	PrimaryExpression	"""commandHandler command %s(%d) is received\\n"""		570232	0					
ANR	570249	Argument	utilToString ( cmd )		570232	2					
ANR	570250	CallExpression	utilToString ( cmd )		570232	0					
ANR	570251	Callee	utilToString		570232	0					
ANR	570252	Identifier	utilToString		570232	0					
ANR	570253	ArgumentList	cmd		570232	1					
ANR	570254	Argument	cmd		570232	0					
ANR	570255	Identifier	cmd		570232	0					
ANR	570256	Argument	cmd		570232	3					
ANR	570257	Identifier	cmd		570232	0					
ANR	570258	ExpressionStatement	strm -> timeout ( m_connectionTimeout )	939:4:27207:27243	570232	2	True				
ANR	570259	CallExpression	strm -> timeout ( m_connectionTimeout )		570232	0					
ANR	570260	Callee	strm -> timeout		570232	0					
ANR	570261	PtrMemberAccess	strm -> timeout		570232	0					
ANR	570262	Identifier	strm		570232	0					
ANR	570263	Identifier	timeout		570232	1					
ANR	570264	ArgumentList	m_connectionTimeout		570232	1					
ANR	570265	Argument	m_connectionTimeout		570232	0					
ANR	570266	Identifier	m_connectionTimeout		570232	0					
ANR	570267	IdentifierDeclStatement	ClassAd ad ;	941:4:27250:27260	570232	3	True				
ANR	570268	IdentifierDecl	ad		570232	0					
ANR	570269	IdentifierDeclType	ClassAd		570232	0					
ANR	570270	Identifier	ad		570232	1					
ANR	570271	ExpressionStatement	strm -> decode ( )	942:4:27266:27280	570232	4	True				
ANR	570272	CallExpression	strm -> decode ( )		570232	0					
ANR	570273	Callee	strm -> decode		570232	0					
ANR	570274	PtrMemberAccess	strm -> decode		570232	0					
ANR	570275	Identifier	strm		570232	0					
ANR	570276	Identifier	decode		570232	1					
ANR	570277	ArgumentList			570232	1					
ANR	570278	IfStatement	if ( ! ad . initFromStream ( * strm ) )		570232	5					
ANR	570279	Condition	! ad . initFromStream ( * strm )	943:8:27290:27315	570232	0	True				
ANR	570280	UnaryOperationExpression	! ad . initFromStream ( * strm )		570232	0					
ANR	570281	UnaryOperator	!		570232	0					
ANR	570282	CallExpression	ad . initFromStream ( * strm )		570232	1					
ANR	570283	Callee	ad . initFromStream		570232	0					
ANR	570284	MemberAccess	ad . initFromStream		570232	0					
ANR	570285	Identifier	ad		570232	0					
ANR	570286	Identifier	initFromStream		570232	1					
ANR	570287	ArgumentList	* strm		570232	1					
ANR	570288	Argument	* strm		570232	0					
ANR	570289	UnaryOperationExpression	* strm		570232	0					
ANR	570290	UnaryOperator	*		570232	0					
ANR	570291	Identifier	strm		570232	1					
ANR	570292	CompoundStatement		11:37:238:238	570232	1					
ANR	570293	ExpressionStatement	"dprintf ( D_ALWAYS , ""commandHandler ERROR -  can't read classad\\n"" )"	944:8:27329:27396	570232	0	True				
ANR	570294	CallExpression	"dprintf ( D_ALWAYS , ""commandHandler ERROR -  can't read classad\\n"" )"		570232	0					
ANR	570295	Callee	dprintf		570232	0					
ANR	570296	Identifier	dprintf		570232	0					
ANR	570297	ArgumentList	D_ALWAYS		570232	1					
ANR	570298	Argument	D_ALWAYS		570232	0					
ANR	570299	Identifier	D_ALWAYS		570232	0					
ANR	570300	Argument	"""commandHandler ERROR -  can't read classad\\n"""		570232	1					
ANR	570301	PrimaryExpression	"""commandHandler ERROR -  can't read classad\\n"""		570232	0					
ANR	570302	ReturnStatement	return FALSE ;	945:8:27406:27418	570232	1	True				
ANR	570303	Identifier	FALSE		570232	0					
ANR	570304	IfStatement	if ( ! strm -> end_of_message ( ) )		570232	6					
ANR	570305	Condition	! strm -> end_of_message ( )	947:8:27434:27457	570232	0	True				
ANR	570306	UnaryOperationExpression	! strm -> end_of_message ( )		570232	0					
ANR	570307	UnaryOperator	!		570232	0					
ANR	570308	CallExpression	strm -> end_of_message ( )		570232	1					
ANR	570309	Callee	strm -> end_of_message		570232	0					
ANR	570310	PtrMemberAccess	strm -> end_of_message		570232	0					
ANR	570311	Identifier	strm		570232	0					
ANR	570312	Identifier	end_of_message		570232	1					
ANR	570313	ArgumentList			570232	1					
ANR	570314	CompoundStatement		15:35:380:380	570232	1					
ANR	570315	ExpressionStatement	"dprintf ( D_ALWAYS , ""commandHandlerHad ERROR -  can't read EOM\\n"" )"	948:8:27471:27537	570232	0	True				
ANR	570316	CallExpression	"dprintf ( D_ALWAYS , ""commandHandlerHad ERROR -  can't read EOM\\n"" )"		570232	0					
ANR	570317	Callee	dprintf		570232	0					
ANR	570318	Identifier	dprintf		570232	0					
ANR	570319	ArgumentList	D_ALWAYS		570232	1					
ANR	570320	Argument	D_ALWAYS		570232	0					
ANR	570321	Identifier	D_ALWAYS		570232	0					
ANR	570322	Argument	"""commandHandlerHad ERROR -  can't read EOM\\n"""		570232	1					
ANR	570323	PrimaryExpression	"""commandHandlerHad ERROR -  can't read EOM\\n"""		570232	0					
ANR	570324	ReturnStatement	return FALSE ;	949:8:27547:27559	570232	1	True				
ANR	570325	Identifier	FALSE		570232	0					
ANR	570326	IdentifierDeclStatement	int new_id ;	952:4:27572:27582	570232	7	True				
ANR	570327	IdentifierDecl	new_id		570232	0					
ANR	570328	IdentifierDeclType	int		570232	0					
ANR	570329	Identifier	new_id		570232	1					
ANR	570330	IfStatement	"if ( ! ad . LookupInteger ( ATTR_HAD_SELF_ID , new_id ) )"		570232	8					
ANR	570331	Condition	"! ad . LookupInteger ( ATTR_HAD_SELF_ID , new_id )"	953:6:27590:27634	570232	0	True				
ANR	570332	UnaryOperationExpression	"! ad . LookupInteger ( ATTR_HAD_SELF_ID , new_id )"		570232	0					
ANR	570333	UnaryOperator	!		570232	0					
ANR	570334	CallExpression	"ad . LookupInteger ( ATTR_HAD_SELF_ID , new_id )"		570232	1					
ANR	570335	Callee	ad . LookupInteger		570232	0					
ANR	570336	MemberAccess	ad . LookupInteger		570232	0					
ANR	570337	Identifier	ad		570232	0					
ANR	570338	Identifier	LookupInteger		570232	1					
ANR	570339	ArgumentList	ATTR_HAD_SELF_ID		570232	1					
ANR	570340	Argument	ATTR_HAD_SELF_ID		570232	0					
ANR	570341	Identifier	ATTR_HAD_SELF_ID		570232	0					
ANR	570342	Argument	new_id		570232	1					
ANR	570343	Identifier	new_id		570232	0					
ANR	570344	CompoundStatement		21:54:557:557	570232	1					
ANR	570345	ExpressionStatement	"dprintf ( D_ALWAYS , ""commandHandler ERROR: ID not in ad received\\n"" )"	954:2:27642:27710	570232	0	True				
ANR	570346	CallExpression	"dprintf ( D_ALWAYS , ""commandHandler ERROR: ID not in ad received\\n"" )"		570232	0					
ANR	570347	Callee	dprintf		570232	0					
ANR	570348	Identifier	dprintf		570232	0					
ANR	570349	ArgumentList	D_ALWAYS		570232	1					
ANR	570350	Argument	D_ALWAYS		570232	0					
ANR	570351	Identifier	D_ALWAYS		570232	0					
ANR	570352	Argument	"""commandHandler ERROR: ID not in ad received\\n"""		570232	1					
ANR	570353	PrimaryExpression	"""commandHandler ERROR: ID not in ad received\\n"""		570232	0					
ANR	570354	ReturnStatement	return FALSE ;	955:2:27714:27726	570232	1	True				
ANR	570355	Identifier	FALSE		570232	0					
ANR	570356	IfStatement	"if ( ! ad . LookupString ( ATTR_HAD_CONTROLLEE_NAME , buf , sizeof ( buf ) ) )"		570232	9					
ANR	570357	Condition	"! ad . LookupString ( ATTR_HAD_CONTROLLEE_NAME , buf , sizeof ( buf ) )"	958:6:27741:27802	570232	0	True				
ANR	570358	UnaryOperationExpression	"! ad . LookupString ( ATTR_HAD_CONTROLLEE_NAME , buf , sizeof ( buf ) )"		570232	0					
ANR	570359	UnaryOperator	!		570232	0					
ANR	570360	CallExpression	"ad . LookupString ( ATTR_HAD_CONTROLLEE_NAME , buf , sizeof ( buf ) )"		570232	1					
ANR	570361	Callee	ad . LookupString		570232	0					
ANR	570362	MemberAccess	ad . LookupString		570232	0					
ANR	570363	Identifier	ad		570232	0					
ANR	570364	Identifier	LookupString		570232	1					
ANR	570365	ArgumentList	ATTR_HAD_CONTROLLEE_NAME		570232	1					
ANR	570366	Argument	ATTR_HAD_CONTROLLEE_NAME		570232	0					
ANR	570367	Identifier	ATTR_HAD_CONTROLLEE_NAME		570232	0					
ANR	570368	Argument	buf		570232	1					
ANR	570369	Identifier	buf		570232	0					
ANR	570370	Argument	sizeof ( buf )		570232	2					
ANR	570371	SizeofExpression	sizeof ( buf )		570232	0					
ANR	570372	Sizeof	sizeof		570232	0					
ANR	570373	SizeofOperand	buf		570232	1					
ANR	570374	CompoundStatement		26:71:725:725	570232	1					
ANR	570375	Statement	dprintf	959:2:27810:27816	570232	0	True				
ANR	570376	Statement	(	959:9:27817:27817	570232	1	True				
ANR	570377	Statement	D_ALWAYS	959:11:27819:27826	570232	2	True				
ANR	570378	Statement	","	959:19:27827:27827	570232	3	True				
ANR	570379	Statement	"""commandHandler ERROR:"""	959:21:27829:27851	570232	4	True				
ANR	570380	Statement	""" controllee not in ad received\\n"""	960:5:27858:27891	570232	5	True				
ANR	570381	Statement	)	960:40:27893:27893	570232	6	True				
ANR	570382	ExpressionStatement		960:41:27894:27894	570232	7	True				
ANR	570383	ReturnStatement	return FALSE ;	961:2:27898:27910	570232	8	True				
ANR	570384	Identifier	FALSE		570232	0					
ANR	570385	IfStatement	"if ( strcasecmp ( buf , m_controlleeName ) )"		570232	10					
ANR	570386	Condition	"strcasecmp ( buf , m_controlleeName )"	963:6:27921:27953	570232	0	True				
ANR	570387	CallExpression	"strcasecmp ( buf , m_controlleeName )"		570232	0					
ANR	570388	Callee	strcasecmp		570232	0					
ANR	570389	Identifier	strcasecmp		570232	0					
ANR	570390	ArgumentList	buf		570232	1					
ANR	570391	Argument	buf		570232	0					
ANR	570392	Identifier	buf		570232	0					
ANR	570393	Argument	m_controlleeName		570232	1					
ANR	570394	Identifier	m_controlleeName		570232	0					
ANR	570395	CompoundStatement		31:42:876:876	570232	1					
ANR	570396	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: controllee different me='%s' other='%s'\\n"" , m_controlleeName , buf )"	964:2:27961:28064	570232	0	True				
ANR	570397	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: controllee different me='%s' other='%s'\\n"" , m_controlleeName , buf )"		570232	0					
ANR	570398	Callee	dprintf		570232	0					
ANR	570399	Identifier	dprintf		570232	0					
ANR	570400	ArgumentList	D_ALWAYS		570232	1					
ANR	570401	Argument	D_ALWAYS		570232	0					
ANR	570402	Identifier	D_ALWAYS		570232	0					
ANR	570403	Argument	"""ERROR: controllee different me='%s' other='%s'\\n"""		570232	1					
ANR	570404	PrimaryExpression	"""ERROR: controllee different me='%s' other='%s'\\n"""		570232	0					
ANR	570405	Argument	m_controlleeName		570232	2					
ANR	570406	Identifier	m_controlleeName		570232	0					
ANR	570407	Argument	buf		570232	3					
ANR	570408	Identifier	buf		570232	0					
ANR	570409	ReturnStatement	return FALSE ;	967:2:28068:28080	570232	1	True				
ANR	570410	Identifier	FALSE		570232	0					
ANR	570411	IfStatement	"if ( ! ad . LookupString ( ATTR_HAD_LIST , buf , sizeof ( buf ) ) )"		570232	11					
ANR	570412	Condition	"! ad . LookupString ( ATTR_HAD_LIST , buf , sizeof ( buf ) )"	970:6:28092:28142	570232	0	True				
ANR	570413	UnaryOperationExpression	"! ad . LookupString ( ATTR_HAD_LIST , buf , sizeof ( buf ) )"		570232	0					
ANR	570414	UnaryOperator	!		570232	0					
ANR	570415	CallExpression	"ad . LookupString ( ATTR_HAD_LIST , buf , sizeof ( buf ) )"		570232	1					
ANR	570416	Callee	ad . LookupString		570232	0					
ANR	570417	MemberAccess	ad . LookupString		570232	0					
ANR	570418	Identifier	ad		570232	0					
ANR	570419	Identifier	LookupString		570232	1					
ANR	570420	ArgumentList	ATTR_HAD_LIST		570232	1					
ANR	570421	Argument	ATTR_HAD_LIST		570232	0					
ANR	570422	Identifier	ATTR_HAD_LIST		570232	0					
ANR	570423	Argument	buf		570232	1					
ANR	570424	Identifier	buf		570232	0					
ANR	570425	Argument	sizeof ( buf )		570232	2					
ANR	570426	SizeofExpression	sizeof ( buf )		570232	0					
ANR	570427	Sizeof	sizeof		570232	0					
ANR	570428	SizeofOperand	buf		570232	1					
ANR	570429	CompoundStatement		38:60:1065:1065	570232	1					
ANR	570430	ExpressionStatement	"dprintf ( D_ALWAYS , ""commandHandler ERROR: HADLlist not in ad received\\n"" )"	971:2:28150:28229	570232	0	True				
ANR	570431	CallExpression	"dprintf ( D_ALWAYS , ""commandHandler ERROR: HADLlist not in ad received\\n"" )"		570232	0					
ANR	570432	Callee	dprintf		570232	0					
ANR	570433	Identifier	dprintf		570232	0					
ANR	570434	ArgumentList	D_ALWAYS		570232	1					
ANR	570435	Argument	D_ALWAYS		570232	0					
ANR	570436	Identifier	D_ALWAYS		570232	0					
ANR	570437	Argument	"""commandHandler ERROR: HADLlist not in ad received\\n"""		570232	1					
ANR	570438	PrimaryExpression	"""commandHandler ERROR: HADLlist not in ad received\\n"""		570232	0					
ANR	570439	ReturnStatement	return FALSE ;	973:2:28233:28245	570232	1	True				
ANR	570440	Identifier	FALSE		570232	0					
ANR	570441	IdentifierDeclStatement	StringList had_ips ( buf ) ;	975:1:28251:28276	570232	12	True				
ANR	570442	IdentifierDecl	had_ips ( buf )		570232	0					
ANR	570443	IdentifierDeclType	StringList		570232	0					
ANR	570444	Identifier	had_ips		570232	1					
ANR	570445	Identifier	buf		570232	2					
ANR	570446	IfStatement	if ( ! m_allHadIps . identical ( had_ips ) )		570232	13					
ANR	570447	Condition	! m_allHadIps . identical ( had_ips )	976:6:28284:28317	570232	0	True				
ANR	570448	UnaryOperationExpression	! m_allHadIps . identical ( had_ips )		570232	0					
ANR	570449	UnaryOperator	!		570232	0					
ANR	570450	CallExpression	m_allHadIps . identical ( had_ips )		570232	1					
ANR	570451	Callee	m_allHadIps . identical		570232	0					
ANR	570452	MemberAccess	m_allHadIps . identical		570232	0					
ANR	570453	Identifier	m_allHadIps		570232	0					
ANR	570454	Identifier	identical		570232	1					
ANR	570455	ArgumentList	had_ips		570232	1					
ANR	570456	Argument	had_ips		570232	0					
ANR	570457	Identifier	had_ips		570232	0					
ANR	570458	CompoundStatement		45:2:1244:1290	570232	1					
ANR	570459	IdentifierDeclStatement	char * cur_str = m_allHadIps . print_to_string ( ) ;	977:2:28325:28371	570232	0	True				
ANR	570460	IdentifierDecl	* cur_str = m_allHadIps . print_to_string ( )		570232	0					
ANR	570461	IdentifierDeclType	char *		570232	0					
ANR	570462	Identifier	cur_str		570232	1					
ANR	570463	AssignmentExpression	* cur_str = m_allHadIps . print_to_string ( )		570232	2		=			
ANR	570464	Identifier	cur_str		570232	0					
ANR	570465	CallExpression	m_allHadIps . print_to_string ( )		570232	1					
ANR	570466	Callee	m_allHadIps . print_to_string		570232	0					
ANR	570467	MemberAccess	m_allHadIps . print_to_string		570232	0					
ANR	570468	Identifier	m_allHadIps		570232	0					
ANR	570469	Identifier	print_to_string		570232	1					
ANR	570470	ArgumentList			570232	1					
ANR	570471	Statement	dprintf	978:2:28375:28381	570232	1	True				
ANR	570472	Statement	(	978:9:28382:28382	570232	2	True				
ANR	570473	Statement	D_ALWAYS	978:11:28384:28391	570232	3	True				
ANR	570474	Statement	","	978:19:28392:28392	570232	4	True				
ANR	570475	Statement	"""commandHandler: WARNING: HAD IP list different!\\n"""	979:5:28399:28449	570232	5	True				
ANR	570476	Statement	"""\\tme='%s'\\n"""	980:5:28456:28468	570232	6	True				
ANR	570477	Statement	"""\\tother='%s'\\n"""	981:5:28475:28490	570232	7	True				
ANR	570478	Statement	","	981:21:28491:28491	570232	8	True				
ANR	570479	Statement	cur_str	982:5:28498:28504	570232	9	True				
ANR	570480	Statement	?	982:13:28506:28506	570232	10	True				
ANR	570481	Label	cur_str :	982:15:28508:28516	570232	11	True				
ANR	570482	Identifier	cur_str		570232	0					
ANR	570483	Statement	"""NULL"""	982:25:28518:28523	570232	12	True				
ANR	570484	Statement	","	982:31:28524:28524	570232	13	True				
ANR	570485	Statement	buf	982:33:28526:28528	570232	14	True				
ANR	570486	Statement	)	982:37:28530:28530	570232	15	True				
ANR	570487	ExpressionStatement		982:38:28531:28531	570232	16	True				
ANR	570488	IfStatement	if ( cur_str )		570232	17					
ANR	570489	Condition	cur_str	983:7:28540:28546	570232	0	True				
ANR	570490	Identifier	cur_str		570232	0					
ANR	570491	CompoundStatement		51:17:1469:1469	570232	1					
ANR	570492	ExpressionStatement	free ( cur_str )	984:3:28555:28570	570232	0	True				
ANR	570493	CallExpression	free ( cur_str )		570232	0					
ANR	570494	Callee	free		570232	0					
ANR	570495	Identifier	free		570232	0					
ANR	570496	ArgumentList	cur_str		570232	1					
ANR	570497	Argument	cur_str		570232	0					
ANR	570498	Identifier	cur_str		570232	0					
ANR	570499	SwitchStatement	switch ( cmd )		570232	14					
ANR	570500	Condition	cmd	988:11:28591:28593	570232	0	True				
ANR	570501	Identifier	cmd		570232	0					
ANR	570502	CompoundStatement		56:15:1514:1514	570232	1					
ANR	570503	Label	case HAD_ALIVE_CMD :	989:1:28598:28616	570232	0	True				
ANR	570504	Identifier	HAD_ALIVE_CMD		570232	0					
ANR	570505	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""commandHandler received HAD_ALIVE_CMD with id %d\\n"" , new_id )"	990:2:28620:28713	570232	1	True				
ANR	570506	CallExpression	"dprintf ( D_FULLDEBUG , ""commandHandler received HAD_ALIVE_CMD with id %d\\n"" , new_id )"		570232	0					
ANR	570507	Callee	dprintf		570232	0					
ANR	570508	Identifier	dprintf		570232	0					
ANR	570509	ArgumentList	D_FULLDEBUG		570232	1					
ANR	570510	Argument	D_FULLDEBUG		570232	0					
ANR	570511	Identifier	D_FULLDEBUG		570232	0					
ANR	570512	Argument	"""commandHandler received HAD_ALIVE_CMD with id %d\\n"""		570232	1					
ANR	570513	PrimaryExpression	"""commandHandler received HAD_ALIVE_CMD with id %d\\n"""		570232	0					
ANR	570514	Argument	new_id		570232	2					
ANR	570515	Identifier	new_id		570232	0					
ANR	570516	ExpressionStatement	pushReceivedAlive ( new_id )	993:2:28717:28744	570232	2	True				
ANR	570517	CallExpression	pushReceivedAlive ( new_id )		570232	0					
ANR	570518	Callee	pushReceivedAlive		570232	0					
ANR	570519	Identifier	pushReceivedAlive		570232	0					
ANR	570520	ArgumentList	new_id		570232	1					
ANR	570521	Argument	new_id		570232	0					
ANR	570522	Identifier	new_id		570232	0					
ANR	570523	BreakStatement	break ;	994:2:28748:28753	570232	3	True				
ANR	570524	Label	case HAD_SEND_ID_CMD :	996:1:28757:28777	570232	4	True				
ANR	570525	Identifier	HAD_SEND_ID_CMD		570232	0					
ANR	570526	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""commandHandler received HAD_SEND_ID_CMD with id %d\\n"" , new_id )"	997:2:28781:28876	570232	5	True				
ANR	570527	CallExpression	"dprintf ( D_FULLDEBUG , ""commandHandler received HAD_SEND_ID_CMD with id %d\\n"" , new_id )"		570232	0					
ANR	570528	Callee	dprintf		570232	0					
ANR	570529	Identifier	dprintf		570232	0					
ANR	570530	ArgumentList	D_FULLDEBUG		570232	1					
ANR	570531	Argument	D_FULLDEBUG		570232	0					
ANR	570532	Identifier	D_FULLDEBUG		570232	0					
ANR	570533	Argument	"""commandHandler received HAD_SEND_ID_CMD with id %d\\n"""		570232	1					
ANR	570534	PrimaryExpression	"""commandHandler received HAD_SEND_ID_CMD with id %d\\n"""		570232	0					
ANR	570535	Argument	new_id		570232	2					
ANR	570536	Identifier	new_id		570232	0					
ANR	570537	ExpressionStatement	pushReceivedId ( new_id )	1000:2:28880:28904	570232	6	True				
ANR	570538	CallExpression	pushReceivedId ( new_id )		570232	0					
ANR	570539	Callee	pushReceivedId		570232	0					
ANR	570540	Identifier	pushReceivedId		570232	0					
ANR	570541	ArgumentList	new_id		570232	1					
ANR	570542	Argument	new_id		570232	0					
ANR	570543	Identifier	new_id		570232	0					
ANR	570544	BreakStatement	break ;	1001:2:28908:28913	570232	7	True				
ANR	570545	ReturnStatement	return TRUE ;	1003:1:28922:28933	570232	15	True				
ANR	570546	Identifier	TRUE		570232	0					
ANR	570547	ReturnType	int		570232	1					
ANR	570548	Identifier	HADStateMachine :: commandHandlerHad		570232	2					
ANR	570549	ParameterList	"int cmd , Stream * strm"		570232	3					
ANR	570550	Parameter	int cmd	932:35:27057:27063	570232	0	True				
ANR	570551	ParameterType	int		570232	0					
ANR	570552	Identifier	cmd		570232	1					
ANR	570553	Parameter	Stream * strm	932:44:27066:27077	570232	1	True				
ANR	570554	ParameterType	Stream *		570232	0					
ANR	570555	Identifier	strm		570232	1					
ANR	570556	CFGEntryNode	ENTRY		570232		True				
ANR	570557	CFGExitNode	EXIT		570232		True				
ANR	570558	Symbol	m_allHadIps		570232						
ANR	570559	Symbol	had_ips		570232						
ANR	570560	Symbol	utilToString		570232						
ANR	570561	Symbol	ad . LookupInteger		570232						
ANR	570562	Symbol	cur_str		570232						
ANR	570563	Symbol	ad . initFromStream		570232						
ANR	570564	Symbol	ATTR_HAD_SELF_ID		570232						
ANR	570565	Symbol	strcasecmp		570232						
ANR	570566	Symbol	new_id		570232						
ANR	570567	Symbol	ad		570232						
ANR	570568	Symbol	m_allHadIps . identical		570232						
ANR	570569	Symbol	D_ALWAYS		570232						
ANR	570570	Symbol	m_allHadIps . print_to_string		570232						
ANR	570571	Symbol	TRUE		570232						
ANR	570572	Symbol	strm		570232						
ANR	570573	Symbol	D_FULLDEBUG		570232						
ANR	570574	Symbol	ad . LookupString		570232						
ANR	570575	Symbol	m_controlleeName		570232						
ANR	570576	Symbol	strm -> end_of_message		570232						
ANR	570577	Symbol	buf		570232						
ANR	570578	Symbol	* strm		570232						
ANR	570579	Symbol	ATTR_HAD_LIST		570232						
ANR	570580	Symbol	FALSE		570232						
ANR	570581	Symbol	cmd		570232						
ANR	570582	Symbol	m_connectionTimeout		570232						
ANR	570583	Symbol	ATTR_HAD_CONTROLLEE_NAME		570232						
ANR	570584	Function	HADStateMachine :: printStep	1010:0:29016:29388							
ANR	570585	FunctionDef	"HADStateMachine :: printStep (const char * curState , const char * nextState)"		570584	0					
ANR	570586	CompoundStatement		1012:0:29095:29388	570584	0					
ANR	570587	Statement	dprintf	1013:6:29103:29109	570584	0	True				
ANR	570588	Statement	(	1013:13:29110:29110	570584	1	True				
ANR	570589	Statement	D_FULLDEBUG	1013:15:29112:29122	570584	2	True				
ANR	570590	Statement	","	1013:26:29123:29123	570584	3	True				
ANR	570591	Statement	"""State machine step : pid <%d> port <%d> """	1014:16:29141:29182	570584	4	True				
ANR	570592	Statement	"""priority <%d> was <%s> go to <%s>\\n"""	1015:16:29200:29236	570584	5	True				
ANR	570593	Statement	","	1015:53:29237:29237	570584	6	True				
ANR	570594	Statement	daemonCore	1016:16:29255:29264	570584	7	True				
ANR	570595	Statement	->	1016:26:29265:29266	570584	8	True				
ANR	570596	Statement	getpid	1016:28:29267:29272	570584	9	True				
ANR	570597	Statement	(	1016:34:29273:29273	570584	10	True				
ANR	570598	Statement	)	1016:35:29274:29274	570584	11	True				
ANR	570599	Statement	","	1016:36:29275:29275	570584	12	True				
ANR	570600	Statement	daemonCore	1017:16:29293:29302	570584	13	True				
ANR	570601	Statement	->	1017:26:29303:29304	570584	14	True				
ANR	570602	Statement	InfoCommandPort	1017:28:29305:29319	570584	15	True				
ANR	570603	Statement	(	1017:43:29320:29320	570584	16	True				
ANR	570604	Statement	)	1017:44:29321:29321	570584	17	True				
ANR	570605	Statement	","	1017:45:29322:29322	570584	18	True				
ANR	570606	Statement	m_selfId	1018:16:29340:29347	570584	19	True				
ANR	570607	Statement	","	1018:24:29348:29348	570584	20	True				
ANR	570608	Statement	curState	1019:16:29366:29373	570584	21	True				
ANR	570609	Statement	","	1019:24:29374:29374	570584	22	True				
ANR	570610	Statement	nextState	1019:25:29375:29383	570584	23	True				
ANR	570611	Statement	)	1019:35:29385:29385	570584	24	True				
ANR	570612	ExpressionStatement		1019:36:29386:29386	570584	25	True				
ANR	570613	ReturnType	void		570584	1					
ANR	570614	Identifier	HADStateMachine :: printStep		570584	2					
ANR	570615	ParameterList	"const char * curState , const char * nextState"		570584	3					
ANR	570616	Parameter	const char * curState	1011:28:29049:29068	570584	0	True				
ANR	570617	ParameterType	const char *		570584	0					
ANR	570618	Identifier	curState		570584	1					
ANR	570619	Parameter	const char * nextState	1011:50:29071:29091	570584	1	True				
ANR	570620	ParameterType	const char *		570584	0					
ANR	570621	Identifier	nextState		570584	1					
ANR	570622	CFGEntryNode	ENTRY		570584		True				
ANR	570623	CFGExitNode	EXIT		570584		True				
ANR	570624	Symbol	nextState		570584						
ANR	570625	Symbol	curState		570584						
ANR	570626	Function	HADStateMachine :: my_debug_print_list	1025:0:29468:29815							
ANR	570627	FunctionDef	HADStateMachine :: my_debug_print_list (StringList * str)		570626	0					
ANR	570628	CompoundStatement		1027:0:29529:29815	570626	0					
ANR	570629	ExpressionStatement	str -> rewind ( )	1028:4:29535:29548	570626	0	True				
ANR	570630	CallExpression	str -> rewind ( )		570626	0					
ANR	570631	Callee	str -> rewind		570626	0					
ANR	570632	PtrMemberAccess	str -> rewind		570626	0					
ANR	570633	Identifier	str		570626	0					
ANR	570634	Identifier	rewind		570626	1					
ANR	570635	ArgumentList			570626	1					
ANR	570636	IdentifierDeclStatement	char * elem ;	1029:4:29554:29564	570626	1	True				
ANR	570637	IdentifierDecl	* elem		570626	0					
ANR	570638	IdentifierDeclType	char *		570626	0					
ANR	570639	Identifier	elem		570626	1					
ANR	570640	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""----> begin print list, id %d\\n"" , daemonCore -> getpid ( ) )"	1030:4:29570:29665	570626	2	True				
ANR	570641	CallExpression	"dprintf ( D_FULLDEBUG , ""----> begin print list, id %d\\n"" , daemonCore -> getpid ( ) )"		570626	0					
ANR	570642	Callee	dprintf		570626	0					
ANR	570643	Identifier	dprintf		570626	0					
ANR	570644	ArgumentList	D_FULLDEBUG		570626	1					
ANR	570645	Argument	D_FULLDEBUG		570626	0					
ANR	570646	Identifier	D_FULLDEBUG		570626	0					
ANR	570647	Argument	"""----> begin print list, id %d\\n"""		570626	1					
ANR	570648	PrimaryExpression	"""----> begin print list, id %d\\n"""		570626	0					
ANR	570649	Argument	daemonCore -> getpid ( )		570626	2					
ANR	570650	CallExpression	daemonCore -> getpid ( )		570626	0					
ANR	570651	Callee	daemonCore -> getpid		570626	0					
ANR	570652	PtrMemberAccess	daemonCore -> getpid		570626	0					
ANR	570653	Identifier	daemonCore		570626	0					
ANR	570654	Identifier	getpid		570626	1					
ANR	570655	ArgumentList			570626	1					
ANR	570656	WhileStatement	while ( ( elem = str -> next ( ) ) )		570626	3					
ANR	570657	Condition	elem = str -> next ( )	1032:11:29678:29697	570626	0	True				
ANR	570658	AssignmentExpression	elem = str -> next ( )		570626	0		=			
ANR	570659	Identifier	elem		570626	0					
ANR	570660	CallExpression	str -> next ( )		570626	1					
ANR	570661	Callee	str -> next		570626	0					
ANR	570662	PtrMemberAccess	str -> next		570626	0					
ANR	570663	Identifier	str		570626	0					
ANR	570664	Identifier	next		570626	1					
ANR	570665	ArgumentList			570626	1					
ANR	570666	CompoundStatement		6:34:171:171	570626	1					
ANR	570667	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""----> %s\\n"" , elem )"	1033:8:29711:29752	570626	0	True				
ANR	570668	CallExpression	"dprintf ( D_FULLDEBUG , ""----> %s\\n"" , elem )"		570626	0					
ANR	570669	Callee	dprintf		570626	0					
ANR	570670	Identifier	dprintf		570626	0					
ANR	570671	ArgumentList	D_FULLDEBUG		570626	1					
ANR	570672	Argument	D_FULLDEBUG		570626	0					
ANR	570673	Identifier	D_FULLDEBUG		570626	0					
ANR	570674	Argument	"""----> %s\\n"""		570626	1					
ANR	570675	PrimaryExpression	"""----> %s\\n"""		570626	0					
ANR	570676	Argument	elem		570626	2					
ANR	570677	Identifier	elem		570626	0					
ANR	570678	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""----> end print list \\n"" )"	1035:4:29764:29813	570626	4	True				
ANR	570679	CallExpression	"dprintf ( D_FULLDEBUG , ""----> end print list \\n"" )"		570626	0					
ANR	570680	Callee	dprintf		570626	0					
ANR	570681	Identifier	dprintf		570626	0					
ANR	570682	ArgumentList	D_FULLDEBUG		570626	1					
ANR	570683	Argument	D_FULLDEBUG		570626	0					
ANR	570684	Identifier	D_FULLDEBUG		570626	0					
ANR	570685	Argument	"""----> end print list \\n"""		570626	1					
ANR	570686	PrimaryExpression	"""----> end print list \\n"""		570626	0					
ANR	570687	ReturnType	void		570626	1					
ANR	570688	Identifier	HADStateMachine :: my_debug_print_list		570626	2					
ANR	570689	ParameterList	StringList * str		570626	3					
ANR	570690	Parameter	StringList * str	1026:38:29511:29525	570626	0	True				
ANR	570691	ParameterType	StringList *		570626	0					
ANR	570692	Identifier	str		570626	1					
ANR	570693	CFGEntryNode	ENTRY		570626		True				
ANR	570694	CFGExitNode	EXIT		570626		True				
ANR	570695	Symbol	str		570626						
ANR	570696	Symbol	elem		570626						
ANR	570697	Symbol	* daemonCore		570626						
ANR	570698	Symbol	daemonCore		570626						
ANR	570699	Symbol	daemonCore -> getpid		570626						
ANR	570700	Symbol	D_FULLDEBUG		570626						
ANR	570701	Symbol	* str		570626						
ANR	570702	Symbol	str -> next		570626						
ANR	570703	Function	HADStateMachine :: my_debug_print_buffers	1041:0:29895:30325							
ANR	570704	FunctionDef	HADStateMachine :: my_debug_print_buffers ()		570703	0					
ANR	570705	CompoundStatement		1043:0:29942:30325	570703	0					
ANR	570706	IdentifierDeclStatement	int id ;	1044:4:29948:29954	570703	0	True				
ANR	570707	IdentifierDecl	id		570703	0					
ANR	570708	IdentifierDeclType	int		570703	0					
ANR	570709	Identifier	id		570703	1					
ANR	570710	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""ALIVE IDs list : \\n"" )"	1045:4:29960:30005	570703	1	True				
ANR	570711	CallExpression	"dprintf ( D_FULLDEBUG , ""ALIVE IDs list : \\n"" )"		570703	0					
ANR	570712	Callee	dprintf		570703	0					
ANR	570713	Identifier	dprintf		570703	0					
ANR	570714	ArgumentList	D_FULLDEBUG		570703	1					
ANR	570715	Argument	D_FULLDEBUG		570703	0					
ANR	570716	Identifier	D_FULLDEBUG		570703	0					
ANR	570717	Argument	"""ALIVE IDs list : \\n"""		570703	1					
ANR	570718	PrimaryExpression	"""ALIVE IDs list : \\n"""		570703	0					
ANR	570719	ExpressionStatement	receivedAliveList . Rewind ( )	1046:4:30011:30037	570703	2	True				
ANR	570720	CallExpression	receivedAliveList . Rewind ( )		570703	0					
ANR	570721	Callee	receivedAliveList . Rewind		570703	0					
ANR	570722	MemberAccess	receivedAliveList . Rewind		570703	0					
ANR	570723	Identifier	receivedAliveList		570703	0					
ANR	570724	Identifier	Rewind		570703	1					
ANR	570725	ArgumentList			570703	1					
ANR	570726	WhileStatement	while ( receivedAliveList . Next ( id ) )		570703	3					
ANR	570727	Condition	receivedAliveList . Next ( id )	1047:11:30050:30077	570703	0	True				
ANR	570728	CallExpression	receivedAliveList . Next ( id )		570703	0					
ANR	570729	Callee	receivedAliveList . Next		570703	0					
ANR	570730	MemberAccess	receivedAliveList . Next		570703	0					
ANR	570731	Identifier	receivedAliveList		570703	0					
ANR	570732	Identifier	Next		570703	1					
ANR	570733	ArgumentList	id		570703	1					
ANR	570734	Argument	id		570703	0					
ANR	570735	Identifier	id		570703	0					
ANR	570736	CompoundStatement		5:42:138:138	570703	1					
ANR	570737	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""<%d>\\n"" , id )"	1048:8:30091:30126	570703	0	True				
ANR	570738	CallExpression	"dprintf ( D_FULLDEBUG , ""<%d>\\n"" , id )"		570703	0					
ANR	570739	Callee	dprintf		570703	0					
ANR	570740	Identifier	dprintf		570703	0					
ANR	570741	ArgumentList	D_FULLDEBUG		570703	1					
ANR	570742	Argument	D_FULLDEBUG		570703	0					
ANR	570743	Identifier	D_FULLDEBUG		570703	0					
ANR	570744	Argument	"""<%d>\\n"""		570703	1					
ANR	570745	PrimaryExpression	"""<%d>\\n"""		570703	0					
ANR	570746	Argument	id		570703	2					
ANR	570747	Identifier	id		570703	0					
ANR	570748	IdentifierDeclStatement	int id2 ;	1051:4:30139:30146	570703	4	True				
ANR	570749	IdentifierDecl	id2		570703	0					
ANR	570750	IdentifierDeclType	int		570703	0					
ANR	570751	Identifier	id2		570703	1					
ANR	570752	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""ELECTION IDs list : \\n"" )"	1052:4:30152:30200	570703	5	True				
ANR	570753	CallExpression	"dprintf ( D_FULLDEBUG , ""ELECTION IDs list : \\n"" )"		570703	0					
ANR	570754	Callee	dprintf		570703	0					
ANR	570755	Identifier	dprintf		570703	0					
ANR	570756	ArgumentList	D_FULLDEBUG		570703	1					
ANR	570757	Argument	D_FULLDEBUG		570703	0					
ANR	570758	Identifier	D_FULLDEBUG		570703	0					
ANR	570759	Argument	"""ELECTION IDs list : \\n"""		570703	1					
ANR	570760	PrimaryExpression	"""ELECTION IDs list : \\n"""		570703	0					
ANR	570761	ExpressionStatement	receivedIdList . Rewind ( )	1053:4:30206:30229	570703	6	True				
ANR	570762	CallExpression	receivedIdList . Rewind ( )		570703	0					
ANR	570763	Callee	receivedIdList . Rewind		570703	0					
ANR	570764	MemberAccess	receivedIdList . Rewind		570703	0					
ANR	570765	Identifier	receivedIdList		570703	0					
ANR	570766	Identifier	Rewind		570703	1					
ANR	570767	ArgumentList			570703	1					
ANR	570768	WhileStatement	while ( receivedIdList . Next ( id2 ) )		570703	7					
ANR	570769	Condition	receivedIdList . Next ( id2 )	1054:11:30242:30267	570703	0	True				
ANR	570770	CallExpression	receivedIdList . Next ( id2 )		570703	0					
ANR	570771	Callee	receivedIdList . Next		570703	0					
ANR	570772	MemberAccess	receivedIdList . Next		570703	0					
ANR	570773	Identifier	receivedIdList		570703	0					
ANR	570774	Identifier	Next		570703	1					
ANR	570775	ArgumentList	id2		570703	1					
ANR	570776	Argument	id2		570703	0					
ANR	570777	Identifier	id2		570703	0					
ANR	570778	CompoundStatement		12:40:328:328	570703	1					
ANR	570779	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""<%d>\\n"" , id2 )"	1055:8:30281:30317	570703	0	True				
ANR	570780	CallExpression	"dprintf ( D_FULLDEBUG , ""<%d>\\n"" , id2 )"		570703	0					
ANR	570781	Callee	dprintf		570703	0					
ANR	570782	Identifier	dprintf		570703	0					
ANR	570783	ArgumentList	D_FULLDEBUG		570703	1					
ANR	570784	Argument	D_FULLDEBUG		570703	0					
ANR	570785	Identifier	D_FULLDEBUG		570703	0					
ANR	570786	Argument	"""<%d>\\n"""		570703	1					
ANR	570787	PrimaryExpression	"""<%d>\\n"""		570703	0					
ANR	570788	Argument	id2		570703	2					
ANR	570789	Identifier	id2		570703	0					
ANR	570790	ReturnType	void		570703	1					
ANR	570791	Identifier	HADStateMachine :: my_debug_print_buffers		570703	2					
ANR	570792	ParameterList			570703	3					
ANR	570793	CFGEntryNode	ENTRY		570703		True				
ANR	570794	CFGExitNode	EXIT		570703		True				
ANR	570795	Symbol	receivedIdList		570703						
ANR	570796	Symbol	receivedIdList . Next		570703						
ANR	570797	Symbol	id2		570703						
ANR	570798	Symbol	receivedAliveList . Next		570703						
ANR	570799	Symbol	receivedAliveList		570703						
ANR	570800	Symbol	D_FULLDEBUG		570703						
ANR	570801	Symbol	id		570703						
ANR	570802	Function	HADStateMachine :: printParamsInformation	1062:0:30405:31588							
ANR	570803	FunctionDef	HADStateMachine :: printParamsInformation ()		570802	0					
ANR	570804	CompoundStatement		1064:0:30456:31588	570802	0					
ANR	570805	ExpressionStatement	"dprintf ( D_ALWAYS , ""** HAD_ID:                 %d\\n"" , m_selfId )"	1065:5:30463:30531	570802	0	True				
ANR	570806	CallExpression	"dprintf ( D_ALWAYS , ""** HAD_ID:                 %d\\n"" , m_selfId )"		570802	0					
ANR	570807	Callee	dprintf		570802	0					
ANR	570808	Identifier	dprintf		570802	0					
ANR	570809	ArgumentList	D_ALWAYS		570802	1					
ANR	570810	Argument	D_ALWAYS		570802	0					
ANR	570811	Identifier	D_ALWAYS		570802	0					
ANR	570812	Argument	"""** HAD_ID:                 %d\\n"""		570802	1					
ANR	570813	PrimaryExpression	"""** HAD_ID:                 %d\\n"""		570802	0					
ANR	570814	Argument	m_selfId		570802	2					
ANR	570815	Identifier	m_selfId		570802	0					
ANR	570816	ExpressionStatement	"dprintf ( D_ALWAYS , ""** HAD_CONTROLLEE:         %s\\n"" , m_controlleeName )"	1067:5:30538:30614	570802	1	True				
ANR	570817	CallExpression	"dprintf ( D_ALWAYS , ""** HAD_CONTROLLEE:         %s\\n"" , m_controlleeName )"		570802	0					
ANR	570818	Callee	dprintf		570802	0					
ANR	570819	Identifier	dprintf		570802	0					
ANR	570820	ArgumentList	D_ALWAYS		570802	1					
ANR	570821	Argument	D_ALWAYS		570802	0					
ANR	570822	Identifier	D_ALWAYS		570802	0					
ANR	570823	Argument	"""** HAD_CONTROLLEE:         %s\\n"""		570802	1					
ANR	570824	PrimaryExpression	"""** HAD_CONTROLLEE:         %s\\n"""		570802	0					
ANR	570825	Argument	m_controlleeName		570802	2					
ANR	570826	Identifier	m_controlleeName		570802	0					
ANR	570827	ExpressionStatement	"dprintf ( D_ALWAYS , ""** HAD_CYCLE_INTERVAL:     %d\\n"" , m_hadInterval )"	1069:5:30621:30694	570802	2	True				
ANR	570828	CallExpression	"dprintf ( D_ALWAYS , ""** HAD_CYCLE_INTERVAL:     %d\\n"" , m_hadInterval )"		570802	0					
ANR	570829	Callee	dprintf		570802	0					
ANR	570830	Identifier	dprintf		570802	0					
ANR	570831	ArgumentList	D_ALWAYS		570802	1					
ANR	570832	Argument	D_ALWAYS		570802	0					
ANR	570833	Identifier	D_ALWAYS		570802	0					
ANR	570834	Argument	"""** HAD_CYCLE_INTERVAL:     %d\\n"""		570802	1					
ANR	570835	PrimaryExpression	"""** HAD_CYCLE_INTERVAL:     %d\\n"""		570802	0					
ANR	570836	Argument	m_hadInterval		570802	2					
ANR	570837	Identifier	m_hadInterval		570802	0					
ANR	570838	ExpressionStatement	"dprintf ( D_ALWAYS , ""** HAD_CONNECTION_TIMEOUT: %d\\n"" , m_connectionTimeout )"	1071:5:30701:30780	570802	3	True				
ANR	570839	CallExpression	"dprintf ( D_ALWAYS , ""** HAD_CONNECTION_TIMEOUT: %d\\n"" , m_connectionTimeout )"		570802	0					
ANR	570840	Callee	dprintf		570802	0					
ANR	570841	Identifier	dprintf		570802	0					
ANR	570842	ArgumentList	D_ALWAYS		570802	1					
ANR	570843	Argument	D_ALWAYS		570802	0					
ANR	570844	Identifier	D_ALWAYS		570802	0					
ANR	570845	Argument	"""** HAD_CONNECTION_TIMEOUT: %d\\n"""		570802	1					
ANR	570846	PrimaryExpression	"""** HAD_CONNECTION_TIMEOUT: %d\\n"""		570802	0					
ANR	570847	Argument	m_connectionTimeout		570802	2					
ANR	570848	Identifier	m_connectionTimeout		570802	0					
ANR	570849	ExpressionStatement	"dprintf ( D_ALWAYS , ""** HAD_USE_PRIMARY:        %s\\n"" , m_usePrimary ? ""True"" : ""False"" )"	1073:5:30787:30876	570802	4	True				
ANR	570850	CallExpression	"dprintf ( D_ALWAYS , ""** HAD_USE_PRIMARY:        %s\\n"" , m_usePrimary ? ""True"" : ""False"" )"		570802	0					
ANR	570851	Callee	dprintf		570802	0					
ANR	570852	Identifier	dprintf		570802	0					
ANR	570853	ArgumentList	D_ALWAYS		570802	1					
ANR	570854	Argument	D_ALWAYS		570802	0					
ANR	570855	Identifier	D_ALWAYS		570802	0					
ANR	570856	Argument	"""** HAD_USE_PRIMARY:        %s\\n"""		570802	1					
ANR	570857	PrimaryExpression	"""** HAD_USE_PRIMARY:        %s\\n"""		570802	0					
ANR	570858	Argument	"m_usePrimary ? ""True"" : ""False"""		570802	2					
ANR	570859	ConditionalExpression	"m_usePrimary ? ""True"" : ""False"""		570802	0					
ANR	570860	Condition	m_usePrimary		570802	0					
ANR	570861	Identifier	m_usePrimary		570802	0					
ANR	570862	PrimaryExpression	"""True"""		570802	1					
ANR	570863	PrimaryExpression	"""False"""		570802	2					
ANR	570864	ExpressionStatement	"dprintf ( D_ALWAYS , ""** AM I PRIMARY:           %s\\n"" , m_isPrimary ? ""True"" : ""False"" )"	1075:5:30883:30971	570802	5	True				
ANR	570865	CallExpression	"dprintf ( D_ALWAYS , ""** AM I PRIMARY:           %s\\n"" , m_isPrimary ? ""True"" : ""False"" )"		570802	0					
ANR	570866	Callee	dprintf		570802	0					
ANR	570867	Identifier	dprintf		570802	0					
ANR	570868	ArgumentList	D_ALWAYS		570802	1					
ANR	570869	Argument	D_ALWAYS		570802	0					
ANR	570870	Identifier	D_ALWAYS		570802	0					
ANR	570871	Argument	"""** AM I PRIMARY:           %s\\n"""		570802	1					
ANR	570872	PrimaryExpression	"""** AM I PRIMARY:           %s\\n"""		570802	0					
ANR	570873	Argument	"m_isPrimary ? ""True"" : ""False"""		570802	2					
ANR	570874	ConditionalExpression	"m_isPrimary ? ""True"" : ""False"""		570802	0					
ANR	570875	Condition	m_isPrimary		570802	0					
ANR	570876	Identifier	m_isPrimary		570802	0					
ANR	570877	PrimaryExpression	"""True"""		570802	1					
ANR	570878	PrimaryExpression	"""False"""		570802	2					
ANR	570879	ExpressionStatement	"dprintf ( D_ALWAYS , ""** HAD_LIST(others only)\\n"" )"	1077:5:30978:31025	570802	6	True				
ANR	570880	CallExpression	"dprintf ( D_ALWAYS , ""** HAD_LIST(others only)\\n"" )"		570802	0					
ANR	570881	Callee	dprintf		570802	0					
ANR	570882	Identifier	dprintf		570802	0					
ANR	570883	ArgumentList	D_ALWAYS		570802	1					
ANR	570884	Argument	D_ALWAYS		570802	0					
ANR	570885	Identifier	D_ALWAYS		570802	0					
ANR	570886	Argument	"""** HAD_LIST(others only)\\n"""		570802	1					
ANR	570887	PrimaryExpression	"""** HAD_LIST(others only)\\n"""		570802	0					
ANR	570888	ExpressionStatement	"dprintf ( D_ALWAYS , ""** HAD_UPDATE_INTERVAL:    %d\\n"" , m_updateCollectorInterval )"	1078:2:31029:31114	570802	7	True				
ANR	570889	CallExpression	"dprintf ( D_ALWAYS , ""** HAD_UPDATE_INTERVAL:    %d\\n"" , m_updateCollectorInterval )"		570802	0					
ANR	570890	Callee	dprintf		570802	0					
ANR	570891	Identifier	dprintf		570802	0					
ANR	570892	ArgumentList	D_ALWAYS		570802	1					
ANR	570893	Argument	D_ALWAYS		570802	0					
ANR	570894	Identifier	D_ALWAYS		570802	0					
ANR	570895	Argument	"""** HAD_UPDATE_INTERVAL:    %d\\n"""		570802	1					
ANR	570896	PrimaryExpression	"""** HAD_UPDATE_INTERVAL:    %d\\n"""		570802	0					
ANR	570897	Argument	m_updateCollectorInterval		570802	2					
ANR	570898	Identifier	m_updateCollectorInterval		570802	0					
ANR	570899	ExpressionStatement	"dprintf ( D_ALWAYS , ""** Is replication used:    %s\\n"" , m_useReplication ? ""True"" : ""False"" )"	1080:2:31118:31211	570802	8	True				
ANR	570900	CallExpression	"dprintf ( D_ALWAYS , ""** Is replication used:    %s\\n"" , m_useReplication ? ""True"" : ""False"" )"		570802	0					
ANR	570901	Callee	dprintf		570802	0					
ANR	570902	Identifier	dprintf		570802	0					
ANR	570903	ArgumentList	D_ALWAYS		570802	1					
ANR	570904	Argument	D_ALWAYS		570802	0					
ANR	570905	Identifier	D_ALWAYS		570802	0					
ANR	570906	Argument	"""** Is replication used:    %s\\n"""		570802	1					
ANR	570907	PrimaryExpression	"""** Is replication used:    %s\\n"""		570802	0					
ANR	570908	Argument	"m_useReplication ? ""True"" : ""False"""		570802	2					
ANR	570909	ConditionalExpression	"m_useReplication ? ""True"" : ""False"""		570802	0					
ANR	570910	Condition	m_useReplication		570802	0					
ANR	570911	Identifier	m_useReplication		570802	0					
ANR	570912	PrimaryExpression	"""True"""		570802	1					
ANR	570913	PrimaryExpression	"""False"""		570802	2					
ANR	570914	IfStatement	if ( m_useReplication )		570802	9					
ANR	570915	Condition	m_useReplication	1082:7:31220:31235	570802	0	True				
ANR	570916	Identifier	m_useReplication		570802	0					
ANR	570917	CompoundStatement		19:26:782:782	570802	1					
ANR	570918	ExpressionStatement	"dprintf ( D_ALWAYS , ""** Replication sinful:     %s\\n"" , m_replicationDaemonSinfulString )"	1083:3:31244:31336	570802	0	True				
ANR	570919	CallExpression	"dprintf ( D_ALWAYS , ""** Replication sinful:     %s\\n"" , m_replicationDaemonSinfulString )"		570802	0					
ANR	570920	Callee	dprintf		570802	0					
ANR	570921	Identifier	dprintf		570802	0					
ANR	570922	ArgumentList	D_ALWAYS		570802	1					
ANR	570923	Argument	D_ALWAYS		570802	0					
ANR	570924	Identifier	D_ALWAYS		570802	0					
ANR	570925	Argument	"""** Replication sinful:     %s\\n"""		570802	1					
ANR	570926	PrimaryExpression	"""** Replication sinful:     %s\\n"""		570802	0					
ANR	570927	Argument	m_replicationDaemonSinfulString		570802	2					
ANR	570928	Identifier	m_replicationDaemonSinfulString		570802	0					
ANR	570929	IdentifierDeclStatement	char * addr = NULL ;	1087:2:31345:31362	570802	10	True				
ANR	570930	IdentifierDecl	* addr = NULL		570802	0					
ANR	570931	IdentifierDeclType	char *		570802	0					
ANR	570932	Identifier	addr		570802	1					
ANR	570933	AssignmentExpression	* addr = NULL		570802	2		=			
ANR	570934	Identifier	NULL		570802	0					
ANR	570935	Identifier	NULL		570802	1					
ANR	570936	ExpressionStatement	m_otherHadIps . rewind ( )	1088:5:31369:31391	570802	11	True				
ANR	570937	CallExpression	m_otherHadIps . rewind ( )		570802	0					
ANR	570938	Callee	m_otherHadIps . rewind		570802	0					
ANR	570939	MemberAccess	m_otherHadIps . rewind		570802	0					
ANR	570940	Identifier	m_otherHadIps		570802	0					
ANR	570941	Identifier	rewind		570802	1					
ANR	570942	ArgumentList			570802	1					
ANR	570943	WhileStatement	while ( ( addr = m_otherHadIps . next ( ) ) )		570802	12					
ANR	570944	Condition	addr = m_otherHadIps . next ( )	1089:12:31405:31433	570802	0	True				
ANR	570945	AssignmentExpression	addr = m_otherHadIps . next ( )		570802	0		=			
ANR	570946	Identifier	addr		570802	0					
ANR	570947	CallExpression	m_otherHadIps . next ( )		570802	1					
ANR	570948	Callee	m_otherHadIps . next		570802	0					
ANR	570949	MemberAccess	m_otherHadIps . next		570802	0					
ANR	570950	Identifier	m_otherHadIps		570802	0					
ANR	570951	Identifier	next		570802	1					
ANR	570952	ArgumentList			570802	1					
ANR	570953	CompoundStatement		26:44:980:980	570802	1					
ANR	570954	ExpressionStatement	"dprintf ( D_ALWAYS , ""**    %s\\n"" , addr )"	1090:3:31442:31478	570802	0	True				
ANR	570955	CallExpression	"dprintf ( D_ALWAYS , ""**    %s\\n"" , addr )"		570802	0					
ANR	570956	Callee	dprintf		570802	0					
ANR	570957	Identifier	dprintf		570802	0					
ANR	570958	ArgumentList	D_ALWAYS		570802	1					
ANR	570959	Argument	D_ALWAYS		570802	0					
ANR	570960	Identifier	D_ALWAYS		570802	0					
ANR	570961	Argument	"""**    %s\\n"""		570802	1					
ANR	570962	PrimaryExpression	"""**    %s\\n"""		570802	0					
ANR	570963	Argument	addr		570802	2					
ANR	570964	Identifier	addr		570802	0					
ANR	570965	ExpressionStatement	"dprintf ( D_ALWAYS , ""** HAD_STAND_ALONE_DEBUG   %s\\n"" , m_standAloneMode ? ""True"" : ""False"" )"	1092:5:31492:31585	570802	13	True				
ANR	570966	CallExpression	"dprintf ( D_ALWAYS , ""** HAD_STAND_ALONE_DEBUG   %s\\n"" , m_standAloneMode ? ""True"" : ""False"" )"		570802	0					
ANR	570967	Callee	dprintf		570802	0					
ANR	570968	Identifier	dprintf		570802	0					
ANR	570969	ArgumentList	D_ALWAYS		570802	1					
ANR	570970	Argument	D_ALWAYS		570802	0					
ANR	570971	Identifier	D_ALWAYS		570802	0					
ANR	570972	Argument	"""** HAD_STAND_ALONE_DEBUG   %s\\n"""		570802	1					
ANR	570973	PrimaryExpression	"""** HAD_STAND_ALONE_DEBUG   %s\\n"""		570802	0					
ANR	570974	Argument	"m_standAloneMode ? ""True"" : ""False"""		570802	2					
ANR	570975	ConditionalExpression	"m_standAloneMode ? ""True"" : ""False"""		570802	0					
ANR	570976	Condition	m_standAloneMode		570802	0					
ANR	570977	Identifier	m_standAloneMode		570802	0					
ANR	570978	PrimaryExpression	"""True"""		570802	1					
ANR	570979	PrimaryExpression	"""False"""		570802	2					
ANR	570980	ReturnType	void		570802	1					
ANR	570981	Identifier	HADStateMachine :: printParamsInformation		570802	2					
ANR	570982	ParameterList			570802	3					
ANR	570983	CFGEntryNode	ENTRY		570802		True				
ANR	570984	CFGExitNode	EXIT		570802		True				
ANR	570985	Symbol	NULL		570802						
ANR	570986	Symbol	D_ALWAYS		570802						
ANR	570987	Symbol	m_isPrimary		570802						
ANR	570988	Symbol	m_controlleeName		570802						
ANR	570989	Symbol	m_otherHadIps		570802						
ANR	570990	Symbol	m_replicationDaemonSinfulString		570802						
ANR	570991	Symbol	m_usePrimary		570802						
ANR	570992	Symbol	m_standAloneMode		570802						
ANR	570993	Symbol	m_selfId		570802						
ANR	570994	Symbol	m_hadInterval		570802						
ANR	570995	Symbol	m_updateCollectorInterval		570802						
ANR	570996	Symbol	m_useReplication		570802						
ANR	570997	Symbol	m_connectionTimeout		570802						
ANR	570998	Symbol	addr		570802						
ANR	570999	Symbol	m_otherHadIps . next		570802						
ANR	571000	Function	HADStateMachine :: updateCollectors	1100:0:31746:32523							
ANR	571001	FunctionDef	HADStateMachine :: updateCollectors ()		571000	0					
ANR	571002	CompoundStatement		1102:0:31791:32523	571000	0					
ANR	571003	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""HADStateMachine::updateCollectors started\\n"" )"	1103:4:31797:31864	571000	0	True				
ANR	571004	CallExpression	"dprintf ( D_FULLDEBUG , ""HADStateMachine::updateCollectors started\\n"" )"		571000	0					
ANR	571005	Callee	dprintf		571000	0					
ANR	571006	Identifier	dprintf		571000	0					
ANR	571007	ArgumentList	D_FULLDEBUG		571000	1					
ANR	571008	Argument	D_FULLDEBUG		571000	0					
ANR	571009	Identifier	D_FULLDEBUG		571000	0					
ANR	571010	Argument	"""HADStateMachine::updateCollectors started\\n"""		571000	1					
ANR	571011	PrimaryExpression	"""HADStateMachine::updateCollectors started\\n"""		571000	0					
ANR	571012	IdentifierDeclStatement	int index ;	1106:1:31903:31913	571000	1	True				
ANR	571013	IdentifierDecl	index		571000	0					
ANR	571014	IdentifierDeclType	int		571000	0					
ANR	571015	Identifier	index		571000	1					
ANR	571016	IfStatement	"if ( m_classAd . LookupInteger ( ATTR_HAD_INDEX , index ) )"		571000	2					
ANR	571017	Condition	"m_classAd . LookupInteger ( ATTR_HAD_INDEX , index )"	1107:9:31924:31969	571000	0	True				
ANR	571018	CallExpression	"m_classAd . LookupInteger ( ATTR_HAD_INDEX , index )"		571000	0					
ANR	571019	Callee	m_classAd . LookupInteger		571000	0					
ANR	571020	MemberAccess	m_classAd . LookupInteger		571000	0					
ANR	571021	Identifier	m_classAd		571000	0					
ANR	571022	Identifier	LookupInteger		571000	1					
ANR	571023	ArgumentList	ATTR_HAD_INDEX		571000	1					
ANR	571024	Argument	ATTR_HAD_INDEX		571000	0					
ANR	571025	Identifier	ATTR_HAD_INDEX		571000	0					
ANR	571026	Argument	index		571000	1					
ANR	571027	Identifier	index		571000	0					
ANR	571028	CompoundStatement		7:8:191:296	571000	1					
ANR	571029	IdentifierDeclStatement	"int successfulUpdatesNumber = daemonCore -> sendUpdates ( UPDATE_HAD_AD , & m_classAd , NULL , true ) ;"	1108:8:31983:32088	571000	0	True				
ANR	571030	IdentifierDecl	"successfulUpdatesNumber = daemonCore -> sendUpdates ( UPDATE_HAD_AD , & m_classAd , NULL , true )"		571000	0					
ANR	571031	IdentifierDeclType	int		571000	0					
ANR	571032	Identifier	successfulUpdatesNumber		571000	1					
ANR	571033	AssignmentExpression	"successfulUpdatesNumber = daemonCore -> sendUpdates ( UPDATE_HAD_AD , & m_classAd , NULL , true )"		571000	2		=			
ANR	571034	Identifier	successfulUpdatesNumber		571000	0					
ANR	571035	CallExpression	"daemonCore -> sendUpdates ( UPDATE_HAD_AD , & m_classAd , NULL , true )"		571000	1					
ANR	571036	Callee	daemonCore -> sendUpdates		571000	0					
ANR	571037	PtrMemberAccess	daemonCore -> sendUpdates		571000	0					
ANR	571038	Identifier	daemonCore		571000	0					
ANR	571039	Identifier	sendUpdates		571000	1					
ANR	571040	ArgumentList	UPDATE_HAD_AD		571000	1					
ANR	571041	Argument	UPDATE_HAD_AD		571000	0					
ANR	571042	Identifier	UPDATE_HAD_AD		571000	0					
ANR	571043	Argument	& m_classAd		571000	1					
ANR	571044	UnaryOperationExpression	& m_classAd		571000	0					
ANR	571045	UnaryOperator	&		571000	0					
ANR	571046	Identifier	m_classAd		571000	1					
ANR	571047	Argument	NULL		571000	2					
ANR	571048	Identifier	NULL		571000	0					
ANR	571049	Argument	true		571000	3					
ANR	571050	Identifier	true		571000	0					
ANR	571051	Statement	dprintf	1110:8:32098:32104	571000	1	True				
ANR	571052	Statement	(	1110:15:32105:32105	571000	2	True				
ANR	571053	Statement	D_ALWAYS	1110:17:32107:32114	571000	3	True				
ANR	571054	Statement	","	1110:25:32115:32115	571000	4	True				
ANR	571055	Statement	"""HADStateMachine::updateCollectors %d """	1110:27:32117:32155	571000	5	True				
ANR	571056	Statement	"""successful updates\\n"""	1111:20:32177:32198	571000	6	True				
ANR	571057	Statement	","	1111:42:32199:32199	571000	7	True				
ANR	571058	Statement	successfulUpdatesNumber	1111:44:32201:32223	571000	8	True				
ANR	571059	Statement	)	1111:67:32224:32224	571000	9	True				
ANR	571060	ExpressionStatement		1111:68:32225:32225	571000	10	True				
ANR	571061	ExpressionStatement	utilCancelTimer ( m_updateCollectorTimerId )	1115:4:32304:32347	571000	3	True				
ANR	571062	CallExpression	utilCancelTimer ( m_updateCollectorTimerId )		571000	0					
ANR	571063	Callee	utilCancelTimer		571000	0					
ANR	571064	Identifier	utilCancelTimer		571000	0					
ANR	571065	ArgumentList	m_updateCollectorTimerId		571000	1					
ANR	571066	Argument	m_updateCollectorTimerId		571000	0					
ANR	571067	Identifier	m_updateCollectorTimerId		571000	0					
ANR	571068	ExpressionStatement	"m_updateCollectorTimerId = daemonCore -> Register_Timer ( m_updateCollectorInterval , ( TimerHandlercpp ) & HADStateMachine :: updateCollectors , ""Update collector"" , this )"	1116:4:32353:32521	571000	4	True				
ANR	571069	AssignmentExpression	"m_updateCollectorTimerId = daemonCore -> Register_Timer ( m_updateCollectorInterval , ( TimerHandlercpp ) & HADStateMachine :: updateCollectors , ""Update collector"" , this )"		571000	0		=			
ANR	571070	Identifier	m_updateCollectorTimerId		571000	0					
ANR	571071	CallExpression	"daemonCore -> Register_Timer ( m_updateCollectorInterval , ( TimerHandlercpp ) & HADStateMachine :: updateCollectors , ""Update collector"" , this )"		571000	1					
ANR	571072	Callee	daemonCore -> Register_Timer		571000	0					
ANR	571073	PtrMemberAccess	daemonCore -> Register_Timer		571000	0					
ANR	571074	Identifier	daemonCore		571000	0					
ANR	571075	Identifier	Register_Timer		571000	1					
ANR	571076	ArgumentList	m_updateCollectorInterval		571000	1					
ANR	571077	Argument	m_updateCollectorInterval		571000	0					
ANR	571078	Identifier	m_updateCollectorInterval		571000	0					
ANR	571079	Argument	( TimerHandlercpp ) & HADStateMachine :: updateCollectors		571000	1					
ANR	571080	CastExpression	( TimerHandlercpp ) & HADStateMachine :: updateCollectors		571000	0					
ANR	571081	CastTarget	TimerHandlercpp		571000	0					
ANR	571082	UnaryOperationExpression	& HADStateMachine :: updateCollectors		571000	1					
ANR	571083	UnaryOperator	&		571000	0					
ANR	571084	Identifier	HADStateMachine :: updateCollectors		571000	1					
ANR	571085	Argument	"""Update collector"""		571000	2					
ANR	571086	PrimaryExpression	"""Update collector"""		571000	0					
ANR	571087	Argument	this		571000	3					
ANR	571088	Identifier	this		571000	0					
ANR	571089	ReturnType	void		571000	1					
ANR	571090	Identifier	HADStateMachine :: updateCollectors		571000	2					
ANR	571091	ParameterList			571000	3					
ANR	571092	CFGEntryNode	ENTRY		571000		True				
ANR	571093	CFGExitNode	EXIT		571000		True				
ANR	571094	Symbol	ATTR_HAD_INDEX		571000						
ANR	571095	Symbol	m_classAd . LookupInteger		571000						
ANR	571096	Symbol	NULL		571000						
ANR	571097	Symbol	this		571000						
ANR	571098	Symbol	& HADStateMachine :: updateCollectors		571000						
ANR	571099	Symbol	index		571000						
ANR	571100	Symbol	successfulUpdatesNumber		571000						
ANR	571101	Symbol	D_FULLDEBUG		571000						
ANR	571102	Symbol	* daemonCore		571000						
ANR	571103	Symbol	daemonCore		571000						
ANR	571104	Symbol	daemonCore -> Register_Timer		571000						
ANR	571105	Symbol	true		571000						
ANR	571106	Symbol	daemonCore -> sendUpdates		571000						
ANR	571107	Symbol	m_updateCollectorInterval		571000						
ANR	571108	Symbol	& m_classAd		571000						
ANR	571109	Symbol	m_classAd		571000						
ANR	571110	Symbol	UPDATE_HAD_AD		571000						
ANR	571111	Symbol	m_updateCollectorTimerId		571000						
ANR	571112	Function	HADStateMachine :: updateCollectorsClassAd	1127:0:32851:33255							
ANR	571113	FunctionDef	HADStateMachine :: updateCollectorsClassAd (const MyString & isHadActive)		571112	0					
ANR	571114	CompoundStatement		1129:0:32926:33255	571112	0					
ANR	571115	IdentifierDeclStatement	MyString line ;	1130:4:32932:32945	571112	0	True				
ANR	571116	IdentifierDecl	line		571112	0					
ANR	571117	IdentifierDeclType	MyString		571112	0					
ANR	571118	Identifier	line		571112	1					
ANR	571119	ExpressionStatement	"m_classAd . Assign ( ATTR_HAD_IS_ACTIVE , isHadActive )"	1132:4:32952:33003	571112	1	True				
ANR	571120	CallExpression	"m_classAd . Assign ( ATTR_HAD_IS_ACTIVE , isHadActive )"		571112	0					
ANR	571121	Callee	m_classAd . Assign		571112	0					
ANR	571122	MemberAccess	m_classAd . Assign		571112	0					
ANR	571123	Identifier	m_classAd		571112	0					
ANR	571124	Identifier	Assign		571112	1					
ANR	571125	ArgumentList	ATTR_HAD_IS_ACTIVE		571112	1					
ANR	571126	Argument	ATTR_HAD_IS_ACTIVE		571112	0					
ANR	571127	Identifier	ATTR_HAD_IS_ACTIVE		571112	0					
ANR	571128	Argument	isHadActive		571112	1					
ANR	571129	Identifier	isHadActive		571112	0					
ANR	571130	IdentifierDeclStatement	"int successfulUpdatesNumber = daemonCore -> sendUpdates ( UPDATE_HAD_AD , & m_classAd , NULL , true ) ;"	1134:4:33010:33113	571112	2	True				
ANR	571131	IdentifierDecl	"successfulUpdatesNumber = daemonCore -> sendUpdates ( UPDATE_HAD_AD , & m_classAd , NULL , true )"		571112	0					
ANR	571132	IdentifierDeclType	int		571112	0					
ANR	571133	Identifier	successfulUpdatesNumber		571112	1					
ANR	571134	AssignmentExpression	"successfulUpdatesNumber = daemonCore -> sendUpdates ( UPDATE_HAD_AD , & m_classAd , NULL , true )"		571112	2		=			
ANR	571135	Identifier	successfulUpdatesNumber		571112	0					
ANR	571136	CallExpression	"daemonCore -> sendUpdates ( UPDATE_HAD_AD , & m_classAd , NULL , true )"		571112	1					
ANR	571137	Callee	daemonCore -> sendUpdates		571112	0					
ANR	571138	PtrMemberAccess	daemonCore -> sendUpdates		571112	0					
ANR	571139	Identifier	daemonCore		571112	0					
ANR	571140	Identifier	sendUpdates		571112	1					
ANR	571141	ArgumentList	UPDATE_HAD_AD		571112	1					
ANR	571142	Argument	UPDATE_HAD_AD		571112	0					
ANR	571143	Identifier	UPDATE_HAD_AD		571112	0					
ANR	571144	Argument	& m_classAd		571112	1					
ANR	571145	UnaryOperationExpression	& m_classAd		571112	0					
ANR	571146	UnaryOperator	&		571112	0					
ANR	571147	Identifier	m_classAd		571112	1					
ANR	571148	Argument	NULL		571112	2					
ANR	571149	Identifier	NULL		571112	0					
ANR	571150	Argument	true		571112	3					
ANR	571151	Identifier	true		571112	0					
ANR	571152	Statement	dprintf	1136:4:33119:33125	571112	3	True				
ANR	571153	Statement	(	1136:11:33126:33126	571112	4	True				
ANR	571154	Statement	D_ALWAYS	1136:13:33128:33135	571112	5	True				
ANR	571155	Statement	","	1136:21:33136:33136	571112	6	True				
ANR	571156	Statement	"""HADStateMachine::updateCollectorsClassAd %d """	1136:23:33138:33183	571112	7	True				
ANR	571157	Statement	"""successful updates\\n"""	1137:20:33205:33226	571112	8	True				
ANR	571158	Statement	","	1137:42:33227:33227	571112	9	True				
ANR	571159	Statement	successfulUpdatesNumber	1137:44:33229:33251	571112	10	True				
ANR	571160	Statement	)	1137:67:33252:33252	571112	11	True				
ANR	571161	ExpressionStatement		1137:68:33253:33253	571112	12	True				
ANR	571162	ReturnType	void		571112	1					
ANR	571163	Identifier	HADStateMachine :: updateCollectorsClassAd		571112	2					
ANR	571164	ParameterList	const MyString & isHadActive		571112	3					
ANR	571165	Parameter	const MyString & isHadActive	1128:41:32897:32923	571112	0	True				
ANR	571166	ParameterType	const MyString &		571112	0					
ANR	571167	Identifier	isHadActive		571112	1					
ANR	571168	CFGEntryNode	ENTRY		571112		True				
ANR	571169	CFGExitNode	EXIT		571112		True				
ANR	571170	Symbol	NULL		571112						
ANR	571171	Symbol	line		571112						
ANR	571172	Symbol	* daemonCore		571112						
ANR	571173	Symbol	daemonCore		571112						
ANR	571174	Symbol	isHadActive		571112						
ANR	571175	Symbol	true		571112						
ANR	571176	Symbol	successfulUpdatesNumber		571112						
ANR	571177	Symbol	daemonCore -> sendUpdates		571112						
ANR	571178	Symbol	& m_classAd		571112						
ANR	571179	Symbol	m_classAd		571112						
ANR	571180	Symbol	UPDATE_HAD_AD		571112						
ANR	571181	Symbol	ATTR_HAD_IS_ACTIVE		571112						
