command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1995281	File	data/converged/CVE-2011-4930_htcondor/power_state.cpp								
ANR	1995282	ClassDef	<unnamed>	49:0:1335:1810							
ANR	1995283	DeclStmt									
ANR	1995284	Decl							const char	const char * [ ]	errmsgs
ANR	1995285	ClassDef	RunMode	80:0:2428:2479							
ANR	1995286	DeclStmt									
ANR	1995287	Decl							HibernatorBase :: SLEEP_STATE	HibernatorBase :: SLEEP_STATE	state_t
ANR	1995288	DeclStmt									
ANR	1995289	Decl							const char	const char *	name
ANR	1995290	DeclStmt									
ANR	1995291	Decl							const char	const char *	state
ANR	1995292	DeclStmt									
ANR	1995293	Decl							const char	const char *	method
ANR	1995294	DeclStmt									
ANR	1995295	Decl							RunMode	RunMode	run_mode
ANR	1995296	DeclStmt									
ANR	1995297	Decl							HibernatorBase	HibernatorBase *	hibernator
ANR	1995298	DeclStmt									
ANR	1995299	Decl							FILE	FILE *	out
ANR	1995300	Function	enable_debug	117:0:3480:3654							
ANR	1995301	FunctionDef	enable_debug ()		1995300	0					
ANR	1995302	CompoundStatement		119:0:3513:3654	1995300	0					
ANR	1995303	IdentifierDeclStatement	param_functions * p_funcs = get_param_functions ( ) ;	120:1:3516:3564	1995300	0	True				
ANR	1995304	IdentifierDecl	* p_funcs = get_param_functions ( )		1995300	0					
ANR	1995305	IdentifierDeclType	param_functions *		1995300	0					
ANR	1995306	Identifier	p_funcs		1995300	1					
ANR	1995307	AssignmentExpression	* p_funcs = get_param_functions ( )		1995300	2		=			
ANR	1995308	Identifier	p_funcs		1995300	0					
ANR	1995309	CallExpression	get_param_functions ( )		1995300	1					
ANR	1995310	Callee	get_param_functions		1995300	0					
ANR	1995311	Identifier	get_param_functions		1995300	0					
ANR	1995312	ArgumentList			1995300	1					
ANR	1995313	ExpressionStatement	Termlog = true	121:1:3567:3581	1995300	1	True				
ANR	1995314	AssignmentExpression	Termlog = true		1995300	0		=			
ANR	1995315	Identifier	Termlog		1995300	0					
ANR	1995316	Identifier	true		1995300	1					
ANR	1995317	ExpressionStatement	"dprintf_config ( ""TOOL"" , p_funcs )"	122:1:3584:3617	1995300	2	True				
ANR	1995318	CallExpression	"dprintf_config ( ""TOOL"" , p_funcs )"		1995300	0					
ANR	1995319	Callee	dprintf_config		1995300	0					
ANR	1995320	Identifier	dprintf_config		1995300	0					
ANR	1995321	ArgumentList	"""TOOL"""		1995300	1					
ANR	1995322	Argument	"""TOOL"""		1995300	0					
ANR	1995323	PrimaryExpression	"""TOOL"""		1995300	0					
ANR	1995324	Argument	p_funcs		1995300	1					
ANR	1995325	Identifier	p_funcs		1995300	0					
ANR	1995326	ExpressionStatement	"set_debug_flags ( ""D_FULLDEBUG"" )"	123:1:3620:3652	1995300	3	True				
ANR	1995327	CallExpression	"set_debug_flags ( ""D_FULLDEBUG"" )"		1995300	0					
ANR	1995328	Callee	set_debug_flags		1995300	0					
ANR	1995329	Identifier	set_debug_flags		1995300	0					
ANR	1995330	ArgumentList	"""D_FULLDEBUG"""		1995300	1					
ANR	1995331	Argument	"""D_FULLDEBUG"""		1995300	0					
ANR	1995332	PrimaryExpression	"""D_FULLDEBUG"""		1995300	0					
ANR	1995333	ReturnType	static void		1995300	1					
ANR	1995334	Identifier	enable_debug		1995300	2					
ANR	1995335	ParameterList			1995300	3					
ANR	1995336	CFGEntryNode	ENTRY		1995300		True				
ANR	1995337	CFGExitNode	EXIT		1995300		True				
ANR	1995338	Symbol	get_param_functions		1995300						
ANR	1995339	Symbol	Termlog		1995300						
ANR	1995340	Symbol	true		1995300						
ANR	1995341	Symbol	p_funcs		1995300						
ANR	1995342	Function	cleanup	126:0:3657:3753							
ANR	1995343	FunctionDef	cleanup ()		1995342	0					
ANR	1995344	CompoundStatement		128:0:3685:3753	1995342	0					
ANR	1995345	IfStatement	if ( hibernator )		1995342	0					
ANR	1995346	Condition	hibernator	129:6:3693:3702	1995342	0	True				
ANR	1995347	Identifier	hibernator		1995342	0					
ANR	1995348	CompoundStatement		2:19:20:20	1995342	1					
ANR	1995349	Statement	delete	130:2:3710:3715	1995342	0	True				
ANR	1995350	ExpressionStatement	hibernator	130:9:3717:3727	1995342	1	True				
ANR	1995351	Identifier	hibernator		1995342	0					
ANR	1995352	ExpressionStatement	hibernator = NULL	131:2:3731:3748	1995342	2	True				
ANR	1995353	AssignmentExpression	hibernator = NULL		1995342	0		=			
ANR	1995354	Identifier	hibernator		1995342	0					
ANR	1995355	Identifier	NULL		1995342	1					
ANR	1995356	ReturnType	static void		1995342	1					
ANR	1995357	Identifier	cleanup		1995342	2					
ANR	1995358	ParameterList			1995342	3					
ANR	1995359	CFGEntryNode	ENTRY		1995342		True				
ANR	1995360	CFGExitNode	EXIT		1995342		True				
ANR	1995361	Symbol	hibernator		1995342						
ANR	1995362	Symbol	NULL		1995342						
ANR	1995363	Function	error	135:0:3756:4143							
ANR	1995364	FunctionDef	error (int code)		1995363	0					
ANR	1995365	CompoundStatement		137:0:3791:4143	1995363	0					
ANR	1995366	IdentifierDeclStatement	va_list args ;	138:1:3794:3806	1995363	0	True				
ANR	1995367	IdentifierDecl	args		1995363	0					
ANR	1995368	IdentifierDeclType	va_list		1995363	0					
ANR	1995369	Identifier	args		1995363	1					
ANR	1995370	IdentifierDeclStatement	const char * msg ;	139:1:3809:3824	1995363	1	True				
ANR	1995371	IdentifierDecl	* msg		1995363	0					
ANR	1995372	IdentifierDeclType	const char *		1995363	0					
ANR	1995373	Identifier	msg		1995363	1					
ANR	1995374	ExpressionStatement	assert ( name )	141:1:3828:3843	1995363	2	True				
ANR	1995375	CallExpression	assert ( name )		1995363	0					
ANR	1995376	Callee	assert		1995363	0					
ANR	1995377	Identifier	assert		1995363	0					
ANR	1995378	ArgumentList	name		1995363	1					
ANR	1995379	Argument	name		1995363	0					
ANR	1995380	Identifier	name		1995363	0					
ANR	1995381	IfStatement	if ( code < E_UNKNOWN )		1995363	3					
ANR	1995382	Condition	code < E_UNKNOWN	143:6:3852:3867	1995363	0	True				
ANR	1995383	RelationalExpression	code < E_UNKNOWN		1995363	0		<			
ANR	1995384	Identifier	code		1995363	0					
ANR	1995385	Identifier	E_UNKNOWN		1995363	1					
ANR	1995386	CompoundStatement		7:25:79:79	1995363	1					
ANR	1995387	ExpressionStatement	code = E_UNKNOWN	144:2:3875:3891	1995363	0	True				
ANR	1995388	AssignmentExpression	code = E_UNKNOWN		1995363	0		=			
ANR	1995389	Identifier	code		1995363	0					
ANR	1995390	Identifier	E_UNKNOWN		1995363	1					
ANR	1995391	IfStatement	if ( code < 0 )		1995363	4					
ANR	1995392	Condition	code < 0	147:6:3903:3910	1995363	0	True				
ANR	1995393	RelationalExpression	code < 0		1995363	0		<			
ANR	1995394	Identifier	code		1995363	0					
ANR	1995395	PrimaryExpression	0		1995363	1					
ANR	1995396	CompoundStatement		11:17:122:122	1995363	1					
ANR	1995397	ExpressionStatement	msg = errmsgs [ - code ]	149:2:3919:3939	1995363	0	True				
ANR	1995398	AssignmentExpression	msg = errmsgs [ - code ]		1995363	0		=			
ANR	1995399	Identifier	msg		1995363	0					
ANR	1995400	ArrayIndexing	errmsgs [ - code ]		1995363	1					
ANR	1995401	Identifier	errmsgs		1995363	0					
ANR	1995402	UnaryOperationExpression	- code		1995363	1					
ANR	1995403	UnaryOperator	-		1995363	0					
ANR	1995404	Identifier	code		1995363	1					
ANR	1995405	IfStatement	if ( ! msg )		1995363	1					
ANR	1995406	Condition	! msg	151:7:3949:3952	1995363	0	True				
ANR	1995407	UnaryOperationExpression	! msg		1995363	0					
ANR	1995408	UnaryOperator	!		1995363	0					
ANR	1995409	Identifier	msg		1995363	1					
ANR	1995410	CompoundStatement		15:14:164:164	1995363	1					
ANR	1995411	ExpressionStatement	msg = errmsgs [ - E_UNKNOWN ]	152:3:3961:3986	1995363	0	True				
ANR	1995412	AssignmentExpression	msg = errmsgs [ - E_UNKNOWN ]		1995363	0		=			
ANR	1995413	Identifier	msg		1995363	0					
ANR	1995414	ArrayIndexing	errmsgs [ - E_UNKNOWN ]		1995363	1					
ANR	1995415	Identifier	errmsgs		1995363	0					
ANR	1995416	UnaryOperationExpression	- E_UNKNOWN		1995363	1					
ANR	1995417	UnaryOperator	-		1995363	0					
ANR	1995418	Identifier	E_UNKNOWN		1995363	1					
ANR	1995419	ExpressionStatement	"fprintf ( stderr , ""%s: "" , name )"	155:2:3995:4027	1995363	2	True				
ANR	1995420	CallExpression	"fprintf ( stderr , ""%s: "" , name )"		1995363	0					
ANR	1995421	Callee	fprintf		1995363	0					
ANR	1995422	Identifier	fprintf		1995363	0					
ANR	1995423	ArgumentList	stderr		1995363	1					
ANR	1995424	Argument	stderr		1995363	0					
ANR	1995425	Identifier	stderr		1995363	0					
ANR	1995426	Argument	"""%s: """		1995363	1					
ANR	1995427	PrimaryExpression	"""%s: """		1995363	0					
ANR	1995428	Argument	name		1995363	2					
ANR	1995429	Identifier	name		1995363	0					
ANR	1995430	ExpressionStatement	"va_start ( args , code )"	156:2:4031:4054	1995363	3	True				
ANR	1995431	CallExpression	"va_start ( args , code )"		1995363	0					
ANR	1995432	Callee	va_start		1995363	0					
ANR	1995433	Identifier	va_start		1995363	0					
ANR	1995434	ArgumentList	args		1995363	1					
ANR	1995435	Argument	args		1995363	0					
ANR	1995436	Identifier	args		1995363	0					
ANR	1995437	Argument	code		1995363	1					
ANR	1995438	Identifier	code		1995363	0					
ANR	1995439	ExpressionStatement	"vfprintf ( stderr , msg , args )"	157:2:4058:4088	1995363	4	True				
ANR	1995440	CallExpression	"vfprintf ( stderr , msg , args )"		1995363	0					
ANR	1995441	Callee	vfprintf		1995363	0					
ANR	1995442	Identifier	vfprintf		1995363	0					
ANR	1995443	ArgumentList	stderr		1995363	1					
ANR	1995444	Argument	stderr		1995363	0					
ANR	1995445	Identifier	stderr		1995363	0					
ANR	1995446	Argument	msg		1995363	1					
ANR	1995447	Identifier	msg		1995363	0					
ANR	1995448	Argument	args		1995363	2					
ANR	1995449	Identifier	args		1995363	0					
ANR	1995450	ExpressionStatement	va_end ( args )	158:2:4092:4107	1995363	5	True				
ANR	1995451	CallExpression	va_end ( args )		1995363	0					
ANR	1995452	Callee	va_end		1995363	0					
ANR	1995453	Identifier	va_end		1995363	0					
ANR	1995454	ArgumentList	args		1995363	1					
ANR	1995455	Argument	args		1995363	0					
ANR	1995456	Identifier	args		1995363	0					
ANR	1995457	ExpressionStatement	cleanup ( )	162:1:4115:4124	1995363	5	True				
ANR	1995458	CallExpression	cleanup ( )		1995363	0					
ANR	1995459	Callee	cleanup		1995363	0					
ANR	1995460	Identifier	cleanup		1995363	0					
ANR	1995461	ArgumentList			1995363	1					
ANR	1995462	ExpressionStatement	exit ( code )	164:1:4128:4141	1995363	6	True				
ANR	1995463	CallExpression	exit ( code )		1995363	0					
ANR	1995464	Callee	exit		1995363	0					
ANR	1995465	Identifier	exit		1995363	0					
ANR	1995466	ArgumentList	code		1995363	1					
ANR	1995467	Argument	code		1995363	0					
ANR	1995468	Identifier	code		1995363	0					
ANR	1995469	ReturnType	static void		1995363	1					
ANR	1995470	Identifier	error		1995363	2					
ANR	1995471	ParameterList	int code		1995363	3					
ANR	1995472	Parameter	int code	136:7:3775:3782	1995363	0	True				
ANR	1995473	ParameterType	int		1995363	0					
ANR	1995474	Identifier	code		1995363	1					
ANR	1995475	CFGEntryNode	ENTRY		1995363		True				
ANR	1995476	CFGExitNode	EXIT		1995363		True				
ANR	1995477	Symbol	args		1995363						
ANR	1995478	Symbol	msg		1995363						
ANR	1995479	Symbol	errmsgs		1995363						
ANR	1995480	Symbol	E_UNKNOWN		1995363						
ANR	1995481	Symbol	code		1995363						
ANR	1995482	Symbol	* errmsgs		1995363						
ANR	1995483	Symbol	name		1995363						
ANR	1995484	Symbol	* E_UNKNOWN		1995363						
ANR	1995485	Symbol	stderr		1995363						
ANR	1995486	Symbol	* code		1995363						
ANR	1995487	Function	parse_command_line	167:0:4146:4919							
ANR	1995488	FunctionDef	"parse_command_line (int argc , const char * argv [ ])"		1995487	0					
ANR	1995489	CompoundStatement		169:0:4209:4919	1995487	0					
ANR	1995490	IdentifierDeclStatement	int argno = 1 ;	170:1:4212:4226	1995487	0	True				
ANR	1995491	IdentifierDecl	argno = 1		1995487	0					
ANR	1995492	IdentifierDeclType	int		1995487	0					
ANR	1995493	Identifier	argno		1995487	1					
ANR	1995494	AssignmentExpression	argno = 1		1995487	2		=			
ANR	1995495	Identifier	argno		1995487	0					
ANR	1995496	PrimaryExpression	1		1995487	1					
ANR	1995497	WhileStatement	while ( argno < argc )		1995487	1					
ANR	1995498	Condition	argno < argc	171:9:4237:4248	1995487	0	True				
ANR	1995499	RelationalExpression	argno < argc		1995487	0		<			
ANR	1995500	Identifier	argno		1995487	0					
ANR	1995501	Identifier	argc		1995487	1					
ANR	1995502	CompoundStatement		4:2:46:80	1995487	1					
ANR	1995503	IdentifierDeclStatement	"SimpleArg arg ( argv , argc , argno ) ;"	172:2:4256:4290	1995487	0	True				
ANR	1995504	IdentifierDecl	"arg ( argv , argc , argno )"		1995487	0					
ANR	1995505	IdentifierDeclType	SimpleArg		1995487	0					
ANR	1995506	Identifier	arg		1995487	1					
ANR	1995507	Expression	"argv , argc , argno"		1995487	2					
ANR	1995508	Identifier	argv		1995487	0					
ANR	1995509	Expression	"argc , argno"		1995487	1					
ANR	1995510	Identifier	argc		1995487	0					
ANR	1995511	Identifier	argno		1995487	1					
ANR	1995512	IfStatement	if ( arg . Error ( ) )		1995487	1					
ANR	1995513	Condition	arg . Error ( )	174:7:4300:4310	1995487	0	True				
ANR	1995514	CallExpression	arg . Error ( )		1995487	0					
ANR	1995515	Callee	arg . Error		1995487	0					
ANR	1995516	MemberAccess	arg . Error		1995487	0					
ANR	1995517	Identifier	arg		1995487	0					
ANR	1995518	Identifier	Error		1995487	1					
ANR	1995519	ArgumentList			1995487	1					
ANR	1995520	CompoundStatement		6:21:104:104	1995487	1					
ANR	1995521	ExpressionStatement	usage ( )	175:3:4319:4326	1995487	0	True				
ANR	1995522	CallExpression	usage ( )		1995487	0					
ANR	1995523	Callee	usage		1995487	0					
ANR	1995524	Identifier	usage		1995487	0					
ANR	1995525	ArgumentList			1995487	1					
ANR	1995526	ExpressionStatement	"error ( E_OPTION , arg . Arg ( ) )"	176:3:4331:4359	1995487	1	True				
ANR	1995527	CallExpression	"error ( E_OPTION , arg . Arg ( ) )"		1995487	0					
ANR	1995528	Callee	error		1995487	0					
ANR	1995529	Identifier	error		1995487	0					
ANR	1995530	ArgumentList	E_OPTION		1995487	1					
ANR	1995531	Argument	E_OPTION		1995487	0					
ANR	1995532	Identifier	E_OPTION		1995487	0					
ANR	1995533	Argument	arg . Arg ( )		1995487	1					
ANR	1995534	CallExpression	arg . Arg ( )		1995487	0					
ANR	1995535	Callee	arg . Arg		1995487	0					
ANR	1995536	MemberAccess	arg . Arg		1995487	0					
ANR	1995537	Identifier	arg		1995487	0					
ANR	1995538	Identifier	Arg		1995487	1					
ANR	1995539	ArgumentList			1995487	1					
ANR	1995540	IfStatement	"if ( arg . Match ( 'd' , ""debug"" ) )"		1995487	2					
ANR	1995541	Condition	"arg . Match ( 'd' , ""debug"" )"	179:7:4373:4395	1995487	0	True				
ANR	1995542	CallExpression	"arg . Match ( 'd' , ""debug"" )"		1995487	0					
ANR	1995543	Callee	arg . Match		1995487	0					
ANR	1995544	MemberAccess	arg . Match		1995487	0					
ANR	1995545	Identifier	arg		1995487	0					
ANR	1995546	Identifier	Match		1995487	1					
ANR	1995547	ArgumentList	'd'		1995487	1					
ANR	1995548	Argument	'd'		1995487	0					
ANR	1995549	PrimaryExpression	'd'		1995487	0					
ANR	1995550	Argument	"""debug"""		1995487	1					
ANR	1995551	PrimaryExpression	"""debug"""		1995487	0					
ANR	1995552	CompoundStatement		11:33:189:189	1995487	1					
ANR	1995553	ExpressionStatement	enable_debug ( )	180:3:4404:4419	1995487	0	True				
ANR	1995554	CallExpression	enable_debug ( )		1995487	0					
ANR	1995555	Callee	enable_debug		1995487	0					
ANR	1995556	Identifier	enable_debug		1995487	0					
ANR	1995557	ArgumentList			1995487	1					
ANR	1995558	ElseStatement	else		1995487	0					
ANR	1995559	IfStatement	"if ( arg . Match ( 'h' , ""help"" ) )"		1995487	0					
ANR	1995560	Condition	"arg . Match ( 'h' , ""help"" )"	182:12:4437:4458	1995487	0	True				
ANR	1995561	CallExpression	"arg . Match ( 'h' , ""help"" )"		1995487	0					
ANR	1995562	Callee	arg . Match		1995487	0					
ANR	1995563	MemberAccess	arg . Match		1995487	0					
ANR	1995564	Identifier	arg		1995487	0					
ANR	1995565	Identifier	Match		1995487	1					
ANR	1995566	ArgumentList	'h'		1995487	1					
ANR	1995567	Argument	'h'		1995487	0					
ANR	1995568	PrimaryExpression	'h'		1995487	0					
ANR	1995569	Argument	"""help"""		1995487	1					
ANR	1995570	PrimaryExpression	"""help"""		1995487	0					
ANR	1995571	CompoundStatement		14:37:252:252	1995487	1					
ANR	1995572	ExpressionStatement	usage ( false )	183:3:4467:4481	1995487	0	True				
ANR	1995573	CallExpression	usage ( false )		1995487	0					
ANR	1995574	Callee	usage		1995487	0					
ANR	1995575	Identifier	usage		1995487	0					
ANR	1995576	ArgumentList	false		1995487	1					
ANR	1995577	Argument	false		1995487	0					
ANR	1995578	Identifier	false		1995487	0					
ANR	1995579	ElseStatement	else		1995487	0					
ANR	1995580	IfStatement	"if ( arg . Match ( 'm' , ""method"" ) )"		1995487	0					
ANR	1995581	Condition	"arg . Match ( 'm' , ""method"" )"	185:12:4499:4524	1995487	0	True				
ANR	1995582	CallExpression	"arg . Match ( 'm' , ""method"" )"		1995487	0					
ANR	1995583	Callee	arg . Match		1995487	0					
ANR	1995584	MemberAccess	arg . Match		1995487	0					
ANR	1995585	Identifier	arg		1995487	0					
ANR	1995586	Identifier	Match		1995487	1					
ANR	1995587	ArgumentList	'm'		1995487	1					
ANR	1995588	Argument	'm'		1995487	0					
ANR	1995589	PrimaryExpression	'm'		1995487	0					
ANR	1995590	Argument	"""method"""		1995487	1					
ANR	1995591	PrimaryExpression	"""method"""		1995487	0					
ANR	1995592	CompoundStatement		17:41:318:318	1995487	1					
ANR	1995593	IfStatement	if ( ! arg . getOpt ( method ) )		1995487	0					
ANR	1995594	Condition	! arg . getOpt ( method )	186:8:4538:4558	1995487	0	True				
ANR	1995595	UnaryOperationExpression	! arg . getOpt ( method )		1995487	0					
ANR	1995596	UnaryOperator	!		1995487	0					
ANR	1995597	CallExpression	arg . getOpt ( method )		1995487	1					
ANR	1995598	Callee	arg . getOpt		1995487	0					
ANR	1995599	MemberAccess	arg . getOpt		1995487	0					
ANR	1995600	Identifier	arg		1995487	0					
ANR	1995601	Identifier	getOpt		1995487	1					
ANR	1995602	ArgumentList	method		1995487	1					
ANR	1995603	Argument	method		1995487	0					
ANR	1995604	Identifier	method		1995487	0					
ANR	1995605	CompoundStatement		18:32:352:352	1995487	1					
ANR	1995606	ExpressionStatement	usage ( )	187:4:4568:4575	1995487	0	True				
ANR	1995607	CallExpression	usage ( )		1995487	0					
ANR	1995608	Callee	usage		1995487	0					
ANR	1995609	Identifier	usage		1995487	0					
ANR	1995610	ArgumentList			1995487	1					
ANR	1995611	ExpressionStatement	"error ( E_OPTARG , arg . Arg ( ) )"	188:4:4581:4609	1995487	1	True				
ANR	1995612	CallExpression	"error ( E_OPTARG , arg . Arg ( ) )"		1995487	0					
ANR	1995613	Callee	error		1995487	0					
ANR	1995614	Identifier	error		1995487	0					
ANR	1995615	ArgumentList	E_OPTARG		1995487	1					
ANR	1995616	Argument	E_OPTARG		1995487	0					
ANR	1995617	Identifier	E_OPTARG		1995487	0					
ANR	1995618	Argument	arg . Arg ( )		1995487	1					
ANR	1995619	CallExpression	arg . Arg ( )		1995487	0					
ANR	1995620	Callee	arg . Arg		1995487	0					
ANR	1995621	MemberAccess	arg . Arg		1995487	0					
ANR	1995622	Identifier	arg		1995487	0					
ANR	1995623	Identifier	Arg		1995487	1					
ANR	1995624	ArgumentList			1995487	1					
ANR	1995625	ElseStatement	else		1995487	0					
ANR	1995626	IfStatement	"if ( arg . fixedMatch ( ""ad"" ) )"		1995487	0					
ANR	1995627	Condition	"arg . fixedMatch ( ""ad"" )"	191:12:4632:4651	1995487	0	True				
ANR	1995628	CallExpression	"arg . fixedMatch ( ""ad"" )"		1995487	0					
ANR	1995629	Callee	arg . fixedMatch		1995487	0					
ANR	1995630	MemberAccess	arg . fixedMatch		1995487	0					
ANR	1995631	Identifier	arg		1995487	0					
ANR	1995632	Identifier	fixedMatch		1995487	1					
ANR	1995633	ArgumentList	"""ad"""		1995487	1					
ANR	1995634	Argument	"""ad"""		1995487	0					
ANR	1995635	PrimaryExpression	"""ad"""		1995487	0					
ANR	1995636	CompoundStatement		23:35:445:445	1995487	1					
ANR	1995637	ExpressionStatement	run_mode = MODE_AD	192:3:4660:4678	1995487	0	True				
ANR	1995638	AssignmentExpression	run_mode = MODE_AD		1995487	0		=			
ANR	1995639	Identifier	run_mode		1995487	0					
ANR	1995640	Identifier	MODE_AD		1995487	1					
ANR	1995641	ElseStatement	else		1995487	0					
ANR	1995642	IfStatement	"if ( arg . fixedMatch ( ""set"" ) )"		1995487	0					
ANR	1995643	Condition	"arg . fixedMatch ( ""set"" )"	194:12:4696:4716	1995487	0	True				
ANR	1995644	CallExpression	"arg . fixedMatch ( ""set"" )"		1995487	0					
ANR	1995645	Callee	arg . fixedMatch		1995487	0					
ANR	1995646	MemberAccess	arg . fixedMatch		1995487	0					
ANR	1995647	Identifier	arg		1995487	0					
ANR	1995648	Identifier	fixedMatch		1995487	1					
ANR	1995649	ArgumentList	"""set"""		1995487	1					
ANR	1995650	Argument	"""set"""		1995487	0					
ANR	1995651	PrimaryExpression	"""set"""		1995487	0					
ANR	1995652	CompoundStatement		26:36:510:510	1995487	1					
ANR	1995653	ExpressionStatement	run_mode = MODE_SET	195:3:4725:4744	1995487	0	True				
ANR	1995654	AssignmentExpression	run_mode = MODE_SET		1995487	0		=			
ANR	1995655	Identifier	run_mode		1995487	0					
ANR	1995656	Identifier	MODE_SET		1995487	1					
ANR	1995657	IfStatement	if ( ! arg . getOpt ( state ) )		1995487	1					
ANR	1995658	Condition	! arg . getOpt ( state )	196:8:4754:4773	1995487	0	True				
ANR	1995659	UnaryOperationExpression	! arg . getOpt ( state )		1995487	0					
ANR	1995660	UnaryOperator	!		1995487	0					
ANR	1995661	CallExpression	arg . getOpt ( state )		1995487	1					
ANR	1995662	Callee	arg . getOpt		1995487	0					
ANR	1995663	MemberAccess	arg . getOpt		1995487	0					
ANR	1995664	Identifier	arg		1995487	0					
ANR	1995665	Identifier	getOpt		1995487	1					
ANR	1995666	ArgumentList	state		1995487	1					
ANR	1995667	Argument	state		1995487	0					
ANR	1995668	Identifier	state		1995487	0					
ANR	1995669	CompoundStatement		28:31:567:567	1995487	1					
ANR	1995670	ExpressionStatement	usage ( )	197:4:4783:4790	1995487	0	True				
ANR	1995671	CallExpression	usage ( )		1995487	0					
ANR	1995672	Callee	usage		1995487	0					
ANR	1995673	Identifier	usage		1995487	0					
ANR	1995674	ArgumentList			1995487	1					
ANR	1995675	ExpressionStatement	"error ( E_OPTARG , arg . Arg ( ) )"	198:4:4796:4824	1995487	1	True				
ANR	1995676	CallExpression	"error ( E_OPTARG , arg . Arg ( ) )"		1995487	0					
ANR	1995677	Callee	error		1995487	0					
ANR	1995678	Identifier	error		1995487	0					
ANR	1995679	ArgumentList	E_OPTARG		1995487	1					
ANR	1995680	Argument	E_OPTARG		1995487	0					
ANR	1995681	Identifier	E_OPTARG		1995487	0					
ANR	1995682	Argument	arg . Arg ( )		1995487	1					
ANR	1995683	CallExpression	arg . Arg ( )		1995487	0					
ANR	1995684	Callee	arg . Arg		1995487	0					
ANR	1995685	MemberAccess	arg . Arg		1995487	0					
ANR	1995686	Identifier	arg		1995487	0					
ANR	1995687	Identifier	Arg		1995487	1					
ANR	1995688	ArgumentList			1995487	1					
ANR	1995689	ElseStatement	else		1995487	0					
ANR	1995690	CompoundStatement		33:7:632:632	1995487	0					
ANR	1995691	ExpressionStatement	usage ( )	202:3:4847:4854	1995487	0	True				
ANR	1995692	CallExpression	usage ( )		1995487	0					
ANR	1995693	Callee	usage		1995487	0					
ANR	1995694	Identifier	usage		1995487	0					
ANR	1995695	ArgumentList			1995487	1					
ANR	1995696	ExpressionStatement	"error ( E_OPTION , arg . Arg ( ) )"	203:3:4859:4887	1995487	1	True				
ANR	1995697	CallExpression	"error ( E_OPTION , arg . Arg ( ) )"		1995487	0					
ANR	1995698	Callee	error		1995487	0					
ANR	1995699	Identifier	error		1995487	0					
ANR	1995700	ArgumentList	E_OPTION		1995487	1					
ANR	1995701	Argument	E_OPTION		1995487	0					
ANR	1995702	Identifier	E_OPTION		1995487	0					
ANR	1995703	Argument	arg . Arg ( )		1995487	1					
ANR	1995704	CallExpression	arg . Arg ( )		1995487	0					
ANR	1995705	Callee	arg . Arg		1995487	0					
ANR	1995706	MemberAccess	arg . Arg		1995487	0					
ANR	1995707	Identifier	arg		1995487	0					
ANR	1995708	Identifier	Arg		1995487	1					
ANR	1995709	ArgumentList			1995487	1					
ANR	1995710	ExpressionStatement	argno = arg . Index ( )	205:2:4895:4914	1995487	3	True				
ANR	1995711	AssignmentExpression	argno = arg . Index ( )		1995487	0		=			
ANR	1995712	Identifier	argno		1995487	0					
ANR	1995713	CallExpression	arg . Index ( )		1995487	1					
ANR	1995714	Callee	arg . Index		1995487	0					
ANR	1995715	MemberAccess	arg . Index		1995487	0					
ANR	1995716	Identifier	arg		1995487	0					
ANR	1995717	Identifier	Index		1995487	1					
ANR	1995718	ArgumentList			1995487	1					
ANR	1995719	ReturnType	static void		1995487	1					
ANR	1995720	Identifier	parse_command_line		1995487	2					
ANR	1995721	ParameterList	"int argc , const char * argv [ ]"		1995487	3					
ANR	1995722	Parameter	int argc	168:20:4178:4185	1995487	0	True				
ANR	1995723	ParameterType	int		1995487	0					
ANR	1995724	Identifier	argc		1995487	1					
ANR	1995725	Parameter	const char * argv [ ]	168:30:4188:4205	1995487	1	True				
ANR	1995726	ParameterType	const char * [ ]		1995487	0					
ANR	1995727	Identifier	argv		1995487	1					
ANR	1995728	CFGEntryNode	ENTRY		1995487		True				
ANR	1995729	CFGExitNode	EXIT		1995487		True				
ANR	1995730	Symbol	argc		1995487						
ANR	1995731	Symbol	E_OPTARG		1995487						
ANR	1995732	Symbol	method		1995487						
ANR	1995733	Symbol	arg . Match		1995487						
ANR	1995734	Symbol	false		1995487						
ANR	1995735	Symbol	arg . Error		1995487						
ANR	1995736	Symbol	arg . Index		1995487						
ANR	1995737	Symbol	argv		1995487						
ANR	1995738	Symbol	MODE_SET		1995487						
ANR	1995739	Symbol	E_OPTION		1995487						
ANR	1995740	Symbol	arg . Arg		1995487						
ANR	1995741	Symbol	arg . fixedMatch		1995487						
ANR	1995742	Symbol	MODE_AD		1995487						
ANR	1995743	Symbol	run_mode		1995487						
ANR	1995744	Symbol	arg		1995487						
ANR	1995745	Symbol	argno		1995487						
ANR	1995746	Symbol	state		1995487						
ANR	1995747	Symbol	arg . getOpt		1995487						
ANR	1995748	Function	hibernate_machine	209:0:4922:5399							
ANR	1995749	FunctionDef	hibernate_machine ()		1995748	0					
ANR	1995750	CompoundStatement		211:0:4958:5399	1995748	0					
ANR	1995751	IdentifierDeclStatement	bool ok = false ;	213:1:4962:4978	1995748	0	True				
ANR	1995752	IdentifierDecl	ok = false		1995748	0					
ANR	1995753	IdentifierDeclType	bool		1995748	0					
ANR	1995754	Identifier	ok		1995748	1					
ANR	1995755	AssignmentExpression	ok = false		1995748	2		=			
ANR	1995756	Identifier	false		1995748	0					
ANR	1995757	Identifier	false		1995748	1					
ANR	1995758	IdentifierDeclStatement	state_t desired = HibernatorBase :: stringToSleepState ( state ) ;	214:1:4981:5042	1995748	1	True				
ANR	1995759	IdentifierDecl	desired = HibernatorBase :: stringToSleepState ( state )		1995748	0					
ANR	1995760	IdentifierDeclType	state_t		1995748	0					
ANR	1995761	Identifier	desired		1995748	1					
ANR	1995762	AssignmentExpression	desired = HibernatorBase :: stringToSleepState ( state )		1995748	2		=			
ANR	1995763	Identifier	desired		1995748	0					
ANR	1995764	CallExpression	HibernatorBase :: stringToSleepState ( state )		1995748	1					
ANR	1995765	Callee	HibernatorBase :: stringToSleepState		1995748	0					
ANR	1995766	Identifier	HibernatorBase :: stringToSleepState		1995748	0					
ANR	1995767	ArgumentList	state		1995748	1					
ANR	1995768	Argument	state		1995748	0					
ANR	1995769	Identifier	state		1995748	0					
ANR	1995770	IdentifierDeclStatement	state_t actual ;	215:1:5045:5059	1995748	2	True				
ANR	1995771	IdentifierDecl	actual		1995748	0					
ANR	1995772	IdentifierDeclType	state_t		1995748	0					
ANR	1995773	Identifier	actual		1995748	1					
ANR	1995774	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Switching to state %s\\n"" , HibernatorBase :: sleepStateToString ( desired ) )"	219:1:5128:5230	1995748	3	True				
ANR	1995775	CallExpression	"dprintf ( D_FULLDEBUG , ""Switching to state %s\\n"" , HibernatorBase :: sleepStateToString ( desired ) )"		1995748	0					
ANR	1995776	Callee	dprintf		1995748	0					
ANR	1995777	Identifier	dprintf		1995748	0					
ANR	1995778	ArgumentList	D_FULLDEBUG		1995748	1					
ANR	1995779	Argument	D_FULLDEBUG		1995748	0					
ANR	1995780	Identifier	D_FULLDEBUG		1995748	0					
ANR	1995781	Argument	"""Switching to state %s\\n"""		1995748	1					
ANR	1995782	PrimaryExpression	"""Switching to state %s\\n"""		1995748	0					
ANR	1995783	Argument	HibernatorBase :: sleepStateToString ( desired )		1995748	2					
ANR	1995784	CallExpression	HibernatorBase :: sleepStateToString ( desired )		1995748	0					
ANR	1995785	Callee	HibernatorBase :: sleepStateToString		1995748	0					
ANR	1995786	Identifier	HibernatorBase :: sleepStateToString		1995748	0					
ANR	1995787	ArgumentList	desired		1995748	1					
ANR	1995788	Argument	desired		1995748	0					
ANR	1995789	Identifier	desired		1995748	0					
ANR	1995790	ExpressionStatement	"ok = hibernator -> switchToState ( desired , actual )"	222:1:5233:5283	1995748	4	True				
ANR	1995791	AssignmentExpression	"ok = hibernator -> switchToState ( desired , actual )"		1995748	0		=			
ANR	1995792	Identifier	ok		1995748	0					
ANR	1995793	CallExpression	"hibernator -> switchToState ( desired , actual )"		1995748	1					
ANR	1995794	Callee	hibernator -> switchToState		1995748	0					
ANR	1995795	PtrMemberAccess	hibernator -> switchToState		1995748	0					
ANR	1995796	Identifier	hibernator		1995748	0					
ANR	1995797	Identifier	switchToState		1995748	1					
ANR	1995798	ArgumentList	desired		1995748	1					
ANR	1995799	Argument	desired		1995748	0					
ANR	1995800	Identifier	desired		1995748	0					
ANR	1995801	Argument	actual		1995748	1					
ANR	1995802	Identifier	actual		1995748	0					
ANR	1995803	IfStatement	if ( ( ! ok ) || ( desired != actual ) )		1995748	5					
ANR	1995804	Condition	( ! ok ) || ( desired != actual )	224:6:5292:5321	1995748	0	True				
ANR	1995805	OrExpression	( ! ok ) || ( desired != actual )		1995748	0		||			
ANR	1995806	UnaryOperationExpression	! ok		1995748	0					
ANR	1995807	UnaryOperator	!		1995748	0					
ANR	1995808	Identifier	ok		1995748	1					
ANR	1995809	EqualityExpression	desired != actual		1995748	1		!=			
ANR	1995810	Identifier	desired		1995748	0					
ANR	1995811	Identifier	actual		1995748	1					
ANR	1995812	CompoundStatement		14:39:366:366	1995748	1					
ANR	1995813	ExpressionStatement	error ( E_NOREST )	225:2:5329:5346	1995748	0	True				
ANR	1995814	CallExpression	error ( E_NOREST )		1995748	0					
ANR	1995815	Callee	error		1995748	0					
ANR	1995816	Identifier	error		1995748	0					
ANR	1995817	ArgumentList	E_NOREST		1995748	1					
ANR	1995818	Argument	E_NOREST		1995748	0					
ANR	1995819	Identifier	E_NOREST		1995748	0					
ANR	1995820	ExpressionStatement	"fprintf ( stderr , ""Power level change.\\n"" )"	228:1:5353:5396	1995748	6	True				
ANR	1995821	CallExpression	"fprintf ( stderr , ""Power level change.\\n"" )"		1995748	0					
ANR	1995822	Callee	fprintf		1995748	0					
ANR	1995823	Identifier	fprintf		1995748	0					
ANR	1995824	ArgumentList	stderr		1995748	1					
ANR	1995825	Argument	stderr		1995748	0					
ANR	1995826	Identifier	stderr		1995748	0					
ANR	1995827	Argument	"""Power level change.\\n"""		1995748	1					
ANR	1995828	PrimaryExpression	"""Power level change.\\n"""		1995748	0					
ANR	1995829	ReturnType	static void		1995748	1					
ANR	1995830	Identifier	hibernate_machine		1995748	2					
ANR	1995831	ParameterList			1995748	3					
ANR	1995832	CFGEntryNode	ENTRY		1995748		True				
ANR	1995833	CFGExitNode	EXIT		1995748		True				
ANR	1995834	Symbol	actual		1995748						
ANR	1995835	Symbol	hibernator		1995748						
ANR	1995836	Symbol	* hibernator		1995748						
ANR	1995837	Symbol	false		1995748						
ANR	1995838	Symbol	D_FULLDEBUG		1995748						
ANR	1995839	Symbol	stderr		1995748						
ANR	1995840	Symbol	desired		1995748						
ANR	1995841	Symbol	hibernator -> switchToState		1995748						
ANR	1995842	Symbol	E_NOREST		1995748						
ANR	1995843	Symbol	state		1995748						
ANR	1995844	Symbol	ok		1995748						
ANR	1995845	Symbol	HibernatorBase :: stringToSleepState		1995748						
ANR	1995846	Symbol	HibernatorBase :: sleepStateToString		1995748						
ANR	1995847	Function	dump_ad	232:0:5402:5774							
ANR	1995848	FunctionDef	dump_ad ()		1995847	0					
ANR	1995849	CompoundStatement		234:0:5430:5774	1995847	0					
ANR	1995850	IdentifierDeclStatement	unsigned mask = hibernator -> getStates ( ) ;	235:1:5433:5473	1995847	0	True				
ANR	1995851	IdentifierDecl	mask = hibernator -> getStates ( )		1995847	0					
ANR	1995852	IdentifierDeclType	unsigned		1995847	0					
ANR	1995853	Identifier	mask		1995847	1					
ANR	1995854	AssignmentExpression	mask = hibernator -> getStates ( )		1995847	2		=			
ANR	1995855	Identifier	mask		1995847	0					
ANR	1995856	CallExpression	hibernator -> getStates ( )		1995847	1					
ANR	1995857	Callee	hibernator -> getStates		1995847	0					
ANR	1995858	PtrMemberAccess	hibernator -> getStates		1995847	0					
ANR	1995859	Identifier	hibernator		1995847	0					
ANR	1995860	Identifier	getStates		1995847	1					
ANR	1995861	ArgumentList			1995847	1					
ANR	1995862	IdentifierDeclStatement	MyString states ;	236:1:5476:5491	1995847	1	True				
ANR	1995863	IdentifierDecl	states		1995847	0					
ANR	1995864	IdentifierDeclType	MyString		1995847	0					
ANR	1995865	Identifier	states		1995847	1					
ANR	1995866	IfStatement	"if ( ! HibernatorBase :: maskToString ( mask , states ) )"		1995847	2					
ANR	1995867	Condition	"! HibernatorBase :: maskToString ( mask , states )"	237:6:5499:5541	1995847	0	True				
ANR	1995868	UnaryOperationExpression	"! HibernatorBase :: maskToString ( mask , states )"		1995847	0					
ANR	1995869	UnaryOperator	!		1995847	0					
ANR	1995870	CallExpression	"HibernatorBase :: maskToString ( mask , states )"		1995847	1					
ANR	1995871	Callee	HibernatorBase :: maskToString		1995847	0					
ANR	1995872	Identifier	HibernatorBase :: maskToString		1995847	0					
ANR	1995873	ArgumentList	mask		1995847	1					
ANR	1995874	Argument	mask		1995847	0					
ANR	1995875	Identifier	mask		1995847	0					
ANR	1995876	Argument	states		1995847	1					
ANR	1995877	Identifier	states		1995847	0					
ANR	1995878	CompoundStatement		4:52:114:114	1995847	1					
ANR	1995879	ExpressionStatement	error ( E_STATES )	238:2:5549:5566	1995847	0	True				
ANR	1995880	CallExpression	error ( E_STATES )		1995847	0					
ANR	1995881	Callee	error		1995847	0					
ANR	1995882	Identifier	error		1995847	0					
ANR	1995883	ArgumentList	E_STATES		1995847	1					
ANR	1995884	Argument	E_STATES		1995847	0					
ANR	1995885	Identifier	E_STATES		1995847	0					
ANR	1995886	IdentifierDeclStatement	ClassAd ad ;	240:1:5572:5582	1995847	3	True				
ANR	1995887	IdentifierDecl	ad		1995847	0					
ANR	1995888	IdentifierDeclType	ClassAd		1995847	0					
ANR	1995889	Identifier	ad		1995847	1					
ANR	1995890	ExpressionStatement	"ad . Assign ( ATTR_HIBERNATION_METHOD , hibernator -> getMethod ( ) )"	241:1:5585:5646	1995847	4	True				
ANR	1995891	CallExpression	"ad . Assign ( ATTR_HIBERNATION_METHOD , hibernator -> getMethod ( ) )"		1995847	0					
ANR	1995892	Callee	ad . Assign		1995847	0					
ANR	1995893	MemberAccess	ad . Assign		1995847	0					
ANR	1995894	Identifier	ad		1995847	0					
ANR	1995895	Identifier	Assign		1995847	1					
ANR	1995896	ArgumentList	ATTR_HIBERNATION_METHOD		1995847	1					
ANR	1995897	Argument	ATTR_HIBERNATION_METHOD		1995847	0					
ANR	1995898	Identifier	ATTR_HIBERNATION_METHOD		1995847	0					
ANR	1995899	Argument	hibernator -> getMethod ( )		1995847	1					
ANR	1995900	CallExpression	hibernator -> getMethod ( )		1995847	0					
ANR	1995901	Callee	hibernator -> getMethod		1995847	0					
ANR	1995902	PtrMemberAccess	hibernator -> getMethod		1995847	0					
ANR	1995903	Identifier	hibernator		1995847	0					
ANR	1995904	Identifier	getMethod		1995847	1					
ANR	1995905	ArgumentList			1995847	1					
ANR	1995906	ExpressionStatement	"ad . Assign ( ATTR_HIBERNATION_SUPPORTED_STATES , states )"	242:1:5649:5703	1995847	5	True				
ANR	1995907	CallExpression	"ad . Assign ( ATTR_HIBERNATION_SUPPORTED_STATES , states )"		1995847	0					
ANR	1995908	Callee	ad . Assign		1995847	0					
ANR	1995909	MemberAccess	ad . Assign		1995847	0					
ANR	1995910	Identifier	ad		1995847	0					
ANR	1995911	Identifier	Assign		1995847	1					
ANR	1995912	ArgumentList	ATTR_HIBERNATION_SUPPORTED_STATES		1995847	1					
ANR	1995913	Argument	ATTR_HIBERNATION_SUPPORTED_STATES		1995847	0					
ANR	1995914	Identifier	ATTR_HIBERNATION_SUPPORTED_STATES		1995847	0					
ANR	1995915	Argument	states		1995847	1					
ANR	1995916	Identifier	states		1995847	0					
ANR	1995917	ExpressionStatement	"ad . Assign ( ATTR_HIBERNATION_RAW_MASK , mask )"	243:1:5706:5750	1995847	6	True				
ANR	1995918	CallExpression	"ad . Assign ( ATTR_HIBERNATION_RAW_MASK , mask )"		1995847	0					
ANR	1995919	Callee	ad . Assign		1995847	0					
ANR	1995920	MemberAccess	ad . Assign		1995847	0					
ANR	1995921	Identifier	ad		1995847	0					
ANR	1995922	Identifier	Assign		1995847	1					
ANR	1995923	ArgumentList	ATTR_HIBERNATION_RAW_MASK		1995847	1					
ANR	1995924	Argument	ATTR_HIBERNATION_RAW_MASK		1995847	0					
ANR	1995925	Identifier	ATTR_HIBERNATION_RAW_MASK		1995847	0					
ANR	1995926	Argument	mask		1995847	1					
ANR	1995927	Identifier	mask		1995847	0					
ANR	1995928	ExpressionStatement	ad . fPrint ( stdout )	244:1:5753:5772	1995847	7	True				
ANR	1995929	CallExpression	ad . fPrint ( stdout )		1995847	0					
ANR	1995930	Callee	ad . fPrint		1995847	0					
ANR	1995931	MemberAccess	ad . fPrint		1995847	0					
ANR	1995932	Identifier	ad		1995847	0					
ANR	1995933	Identifier	fPrint		1995847	1					
ANR	1995934	ArgumentList	stdout		1995847	1					
ANR	1995935	Argument	stdout		1995847	0					
ANR	1995936	Identifier	stdout		1995847	0					
ANR	1995937	ReturnType	static void		1995847	1					
ANR	1995938	Identifier	dump_ad		1995847	2					
ANR	1995939	ParameterList			1995847	3					
ANR	1995940	CFGEntryNode	ENTRY		1995847		True				
ANR	1995941	CFGExitNode	EXIT		1995847		True				
ANR	1995942	Symbol	hibernator		1995847						
ANR	1995943	Symbol	* hibernator		1995847						
ANR	1995944	Symbol	ad		1995847						
ANR	1995945	Symbol	stdout		1995847						
ANR	1995946	Symbol	ATTR_HIBERNATION_SUPPORTED_STATES		1995847						
ANR	1995947	Symbol	hibernator -> getMethod		1995847						
ANR	1995948	Symbol	ATTR_HIBERNATION_RAW_MASK		1995847						
ANR	1995949	Symbol	states		1995847						
ANR	1995950	Symbol	hibernator -> getStates		1995847						
ANR	1995951	Symbol	ATTR_HIBERNATION_METHOD		1995847						
ANR	1995952	Symbol	HibernatorBase :: maskToString		1995847						
ANR	1995953	Symbol	E_STATES		1995847						
ANR	1995954	Symbol	mask		1995847						
ANR	1995955	Function	main	247:0:5777:6472							
ANR	1995956	FunctionDef	"main (int argc , const char * argv [ ])"		1995955	0					
ANR	1995957	CompoundStatement		249:0:5818:6472	1995955	0					
ANR	1995958	ExpressionStatement	name = condor_basename ( argv [ 0 ] )	251:1:5857:5891	1995955	0	True				
ANR	1995959	AssignmentExpression	name = condor_basename ( argv [ 0 ] )		1995955	0		=			
ANR	1995960	Identifier	name		1995955	0					
ANR	1995961	CallExpression	condor_basename ( argv [ 0 ] )		1995955	1					
ANR	1995962	Callee	condor_basename		1995955	0					
ANR	1995963	Identifier	condor_basename		1995955	0					
ANR	1995964	ArgumentList	argv [ 0 ]		1995955	1					
ANR	1995965	Argument	argv [ 0 ]		1995955	0					
ANR	1995966	ArrayIndexing	argv [ 0 ]		1995955	0					
ANR	1995967	Identifier	argv		1995955	0					
ANR	1995968	PrimaryExpression	0		1995955	1					
ANR	1995969	IfStatement	if ( ! name )		1995955	1					
ANR	1995970	Condition	! name	252:6:5899:5903	1995955	0	True				
ANR	1995971	UnaryOperationExpression	! name		1995955	0					
ANR	1995972	UnaryOperator	!		1995955	0					
ANR	1995973	Identifier	name		1995955	1					
ANR	1995974	CompoundStatement		4:14:88:88	1995955	1					
ANR	1995975	ExpressionStatement	name = argv [ 0 ]	253:2:5911:5925	1995955	0	True				
ANR	1995976	AssignmentExpression	name = argv [ 0 ]		1995955	0		=			
ANR	1995977	Identifier	name		1995955	0					
ANR	1995978	ArrayIndexing	argv [ 0 ]		1995955	1					
ANR	1995979	Identifier	argv		1995955	0					
ANR	1995980	PrimaryExpression	0		1995955	1					
ANR	1995981	ExpressionStatement	"parse_command_line ( argc , argv )"	257:1:5993:6026	1995955	2	True				
ANR	1995982	CallExpression	"parse_command_line ( argc , argv )"		1995955	0					
ANR	1995983	Callee	parse_command_line		1995955	0					
ANR	1995984	Identifier	parse_command_line		1995955	0					
ANR	1995985	ArgumentList	argc		1995955	1					
ANR	1995986	Argument	argc		1995955	0					
ANR	1995987	Identifier	argc		1995955	0					
ANR	1995988	Argument	argv		1995955	1					
ANR	1995989	Identifier	argv		1995955	0					
ANR	1995990	IfStatement	if ( HIBERNATOR_TYPE_DEFINED )		1995955	3					
ANR	1995991	Condition	HIBERNATOR_TYPE_DEFINED	261:7:6079:6101	1995955	0	True				
ANR	1995992	Identifier	HIBERNATOR_TYPE_DEFINED		1995955	0					
ANR	1995993	Statement	hibernator	262:1:6106:6115	1995955	1	True				
ANR	1995994	Statement	=	262:12:6117:6117	1995955	4	True				
ANR	1995995	Statement	new	262:14:6119:6121	1995955	5	True				
ANR	1995996	ExpressionStatement	RealHibernator	262:18:6123:6137	1995955	6	True				
ANR	1995997	Identifier	RealHibernator		1995955	0					
ANR	1995998	Statement	endif	263:2:6141:6145	1995955	7	True				
ANR	1995999	IfStatement	if ( ! hibernator )		1995955	8					
ANR	1996000	Condition	! hibernator	264:6:6153:6163	1995955	0	True				
ANR	1996001	UnaryOperationExpression	! hibernator		1995955	0					
ANR	1996002	UnaryOperator	!		1995955	0					
ANR	1996003	Identifier	hibernator		1995955	1					
ANR	1996004	CompoundStatement		16:20:348:348	1995955	1					
ANR	1996005	ExpressionStatement	"error ( E_NOMEM , ""hibernator object."" )"	265:2:6171:6209	1995955	0	True				
ANR	1996006	CallExpression	"error ( E_NOMEM , ""hibernator object."" )"		1995955	0					
ANR	1996007	Callee	error		1995955	0					
ANR	1996008	Identifier	error		1995955	0					
ANR	1996009	ArgumentList	E_NOMEM		1995955	1					
ANR	1996010	Argument	E_NOMEM		1995955	0					
ANR	1996011	Identifier	E_NOMEM		1995955	0					
ANR	1996012	Argument	"""hibernator object."""		1995955	1					
ANR	1996013	PrimaryExpression	"""hibernator object."""		1995955	0					
ANR	1996014	IfStatement	if ( method )		1995955	9					
ANR	1996015	Condition	method	267:6:6220:6225	1995955	0	True				
ANR	1996016	Identifier	method		1995955	0					
ANR	1996017	CompoundStatement		19:15:410:410	1995955	1					
ANR	1996018	ExpressionStatement	hibernator -> setMethod ( method )	268:2:6233:6264	1995955	0	True				
ANR	1996019	CallExpression	hibernator -> setMethod ( method )		1995955	0					
ANR	1996020	Callee	hibernator -> setMethod		1995955	0					
ANR	1996021	PtrMemberAccess	hibernator -> setMethod		1995955	0					
ANR	1996022	Identifier	hibernator		1995955	0					
ANR	1996023	Identifier	setMethod		1995955	1					
ANR	1996024	ArgumentList	method		1995955	1					
ANR	1996025	Argument	method		1995955	0					
ANR	1996026	Identifier	method		1995955	0					
ANR	1996027	IfStatement	if ( ! hibernator -> initialize ( ) )		1995955	10					
ANR	1996028	Condition	! hibernator -> initialize ( )	270:6:6275:6299	1995955	0	True				
ANR	1996029	UnaryOperationExpression	! hibernator -> initialize ( )		1995955	0					
ANR	1996030	UnaryOperator	!		1995955	0					
ANR	1996031	CallExpression	hibernator -> initialize ( )		1995955	1					
ANR	1996032	Callee	hibernator -> initialize		1995955	0					
ANR	1996033	PtrMemberAccess	hibernator -> initialize		1995955	0					
ANR	1996034	Identifier	hibernator		1995955	0					
ANR	1996035	Identifier	initialize		1995955	1					
ANR	1996036	ArgumentList			1995955	1					
ANR	1996037	CompoundStatement		22:34:484:484	1995955	1					
ANR	1996038	ExpressionStatement	error ( E_INIT )	271:2:6307:6322	1995955	0	True				
ANR	1996039	CallExpression	error ( E_INIT )		1995955	0					
ANR	1996040	Callee	error		1995955	0					
ANR	1996041	Identifier	error		1995955	0					
ANR	1996042	ArgumentList	E_INIT		1995955	1					
ANR	1996043	Argument	E_INIT		1995955	0					
ANR	1996044	Identifier	E_INIT		1995955	0					
ANR	1996045	IfStatement	if ( MODE_AD == run_mode )		1995955	11					
ANR	1996046	Condition	MODE_AD == run_mode	274:6:6334:6352	1995955	0	True				
ANR	1996047	EqualityExpression	MODE_AD == run_mode		1995955	0		==			
ANR	1996048	Identifier	MODE_AD		1995955	0					
ANR	1996049	Identifier	run_mode		1995955	1					
ANR	1996050	CompoundStatement		26:28:537:537	1995955	1					
ANR	1996051	ExpressionStatement	dump_ad ( )	275:2:6360:6370	1995955	0	True				
ANR	1996052	CallExpression	dump_ad ( )		1995955	0					
ANR	1996053	Callee	dump_ad		1995955	0					
ANR	1996054	Identifier	dump_ad		1995955	0					
ANR	1996055	ArgumentList			1995955	1					
ANR	1996056	ElseStatement	else		1995955	0					
ANR	1996057	IfStatement	if ( MODE_SET == run_mode )		1995955	0					
ANR	1996058	Condition	MODE_SET == run_mode	277:11:6386:6405	1995955	0	True				
ANR	1996059	EqualityExpression	MODE_SET == run_mode		1995955	0		==			
ANR	1996060	Identifier	MODE_SET		1995955	0					
ANR	1996061	Identifier	run_mode		1995955	1					
ANR	1996062	CompoundStatement		29:34:590:590	1995955	1					
ANR	1996063	ExpressionStatement	hibernate_machine ( )	278:2:6413:6433	1995955	0	True				
ANR	1996064	CallExpression	hibernate_machine ( )		1995955	0					
ANR	1996065	Callee	hibernate_machine		1995955	0					
ANR	1996066	Identifier	hibernate_machine		1995955	0					
ANR	1996067	ArgumentList			1995955	1					
ANR	1996068	Statement	delete	281:1:6440:6445	1995955	12	True				
ANR	1996069	ExpressionStatement	hibernator	281:8:6447:6457	1995955	13	True				
ANR	1996070	Identifier	hibernator		1995955	0					
ANR	1996071	ReturnStatement	return 0 ;	283:1:6461:6469	1995955	14	True				
ANR	1996072	PrimaryExpression	0		1995955	0					
ANR	1996073	ReturnType	int		1995955	1					
ANR	1996074	Identifier	main		1995955	2					
ANR	1996075	ParameterList	"int argc , const char * argv [ ]"		1995955	3					
ANR	1996076	Parameter	int argc	248:6:5787:5794	1995955	0	True				
ANR	1996077	ParameterType	int		1995955	0					
ANR	1996078	Identifier	argc		1995955	1					
ANR	1996079	Parameter	const char * argv [ ]	248:16:5797:5814	1995955	1	True				
ANR	1996080	ParameterType	const char * [ ]		1995955	0					
ANR	1996081	Identifier	argv		1995955	1					
ANR	1996082	CFGEntryNode	ENTRY		1995955		True				
ANR	1996083	CFGExitNode	EXIT		1995955		True				
ANR	1996084	Symbol	argc		1995955						
ANR	1996085	Symbol	E_NOMEM		1995955						
ANR	1996086	Symbol	hibernator		1995955						
ANR	1996087	Symbol	* hibernator		1995955						
ANR	1996088	Symbol	method		1995955						
ANR	1996089	Symbol	HIBERNATOR_TYPE_DEFINED		1995955						
ANR	1996090	Symbol	* argv		1995955						
ANR	1996091	Symbol	argv		1995955						
ANR	1996092	Symbol	MODE_SET		1995955						
ANR	1996093	Symbol	E_INIT		1995955						
ANR	1996094	Symbol	MODE_AD		1995955						
ANR	1996095	Symbol	run_mode		1995955						
ANR	1996096	Symbol	name		1995955						
ANR	1996097	Symbol	hibernator -> initialize		1995955						
ANR	1996098	Symbol	condor_basename		1995955						
