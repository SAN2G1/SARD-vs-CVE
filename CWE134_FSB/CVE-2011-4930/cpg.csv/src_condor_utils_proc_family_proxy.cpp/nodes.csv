command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4846953	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_proc_family_proxy.cpp								
ANR	4846954	ClassDef	ProcFamilyProxyReaperHelper	41:0:1449:1694							
ANR	4846955	Function	ProcFamilyProxyReaperHelper	44:1:1512:1577							
ANR	4846956	FunctionDef	ProcFamilyProxyReaperHelper (ProcFamilyProxy * ptr)		4846955	0					
ANR	4846957	CompoundStatement		44:64:1575:1577	4846955	0					
ANR	4846958	Identifier	ProcFamilyProxyReaperHelper		4846955	1					
ANR	4846959	ParameterList	ProcFamilyProxy * ptr		4846955	2					
ANR	4846960	Parameter	ProcFamilyProxy * ptr	44:29:1540:1559	4846955	0	True				
ANR	4846961	ParameterType	ProcFamilyProxy *		4846955	0					
ANR	4846962	Identifier	ptr		4846955	1					
ANR	4846963	CFGEntryNode	ENTRY		4846955		True				
ANR	4846964	CFGExitNode	EXIT		4846955		True				
ANR	4846965	Symbol	ptr		4846955						
ANR	4846966	Function	procd_reaper	46:1:1581:1666							
ANR	4846967	FunctionDef	"procd_reaper (int pid , int status)"		4846966	1					
ANR	4846968	CompoundStatement		47:1:1620:1666	4846966	0					
ANR	4846969	ReturnStatement	"return m_ptr -> procd_reaper ( pid , status ) ;"	48:2:1624:1663	4846966	0	True				
ANR	4846970	CallExpression	"m_ptr -> procd_reaper ( pid , status )"		4846966	0					
ANR	4846971	Callee	m_ptr -> procd_reaper		4846966	0					
ANR	4846972	PtrMemberAccess	m_ptr -> procd_reaper		4846966	0					
ANR	4846973	Identifier	m_ptr		4846966	0					
ANR	4846974	Identifier	procd_reaper		4846966	1					
ANR	4846975	ArgumentList	pid		4846966	1					
ANR	4846976	Argument	pid		4846966	0					
ANR	4846977	Identifier	pid		4846966	0					
ANR	4846978	Argument	status		4846966	1					
ANR	4846979	Identifier	status		4846966	0					
ANR	4846980	ReturnType	int		4846966	1					
ANR	4846981	Identifier	procd_reaper		4846966	2					
ANR	4846982	ParameterList	"int pid , int status"		4846966	3					
ANR	4846983	Parameter	int pid	46:18:1598:1604	4846966	0	True				
ANR	4846984	ParameterType	int		4846966	0					
ANR	4846985	Identifier	pid		4846966	1					
ANR	4846986	Parameter	int status	46:27:1607:1616	4846966	1	True				
ANR	4846987	ParameterType	int		4846966	0					
ANR	4846988	Identifier	status		4846966	1					
ANR	4846989	CFGEntryNode	ENTRY		4846966		True				
ANR	4846990	CFGExitNode	EXIT		4846966		True				
ANR	4846991	Symbol	m_ptr		4846966						
ANR	4846992	Symbol	m_ptr -> procd_reaper		4846966						
ANR	4846993	Symbol	pid		4846966						
ANR	4846994	Symbol	* m_ptr		4846966						
ANR	4846995	Symbol	status		4846966						
ANR	4846996	DeclStmt									
ANR	4846997	Decl							ProcFamilyProxy	ProcFamilyProxy *	m_ptr
ANR	4846998	DeclStmt									
ANR	4846999	Decl							int	int	ProcFamilyProxy :: s_instantiated
ANR	4847000	Function	ProcFamilyProxy :: ProcFamilyProxy	56:0:1744:4428							
ANR	4847001	FunctionDef	ProcFamilyProxy :: ProcFamilyProxy (const char * address_suffix)		4847000	0					
ANR	4847002	CompoundStatement		59:0:1845:4428	4847000	0					
ANR	4847003	IfStatement	if ( s_instantiated )		4847000	0					
ANR	4847004	Condition	s_instantiated	62:5:1901:1914	4847000	0	True				
ANR	4847005	Identifier	s_instantiated		4847000	0					
ANR	4847006	CompoundStatement		4:21:71:71	4847000	1					
ANR	4847007	ExpressionStatement	"EXCEPT ( ""ProcFamilyProxy: multiple instantiations"" )"	63:2:1921:1971	4847000	0	True				
ANR	4847008	CallExpression	"EXCEPT ( ""ProcFamilyProxy: multiple instantiations"" )"		4847000	0					
ANR	4847009	Callee	EXCEPT		4847000	0					
ANR	4847010	Identifier	EXCEPT		4847000	0					
ANR	4847011	ArgumentList	"""ProcFamilyProxy: multiple instantiations"""		4847000	1					
ANR	4847012	Argument	"""ProcFamilyProxy: multiple instantiations"""		4847000	0					
ANR	4847013	PrimaryExpression	"""ProcFamilyProxy: multiple instantiations"""		4847000	0					
ANR	4847014	ExpressionStatement	s_instantiated = true	65:1:1977:1998	4847000	1	True				
ANR	4847015	AssignmentExpression	s_instantiated = true		4847000	0		=			
ANR	4847016	Identifier	s_instantiated		4847000	0					
ANR	4847017	Identifier	true		4847000	1					
ANR	4847018	ExpressionStatement	m_procd_addr = get_procd_address ( )	69:1:2062:2096	4847000	2	True				
ANR	4847019	AssignmentExpression	m_procd_addr = get_procd_address ( )		4847000	0		=			
ANR	4847020	Identifier	m_procd_addr		4847000	0					
ANR	4847021	CallExpression	get_procd_address ( )		4847000	1					
ANR	4847022	Callee	get_procd_address		4847000	0					
ANR	4847023	Identifier	get_procd_address		4847000	0					
ANR	4847024	ArgumentList			4847000	1					
ANR	4847025	IdentifierDeclStatement	MyString procd_addr_base = m_procd_addr ;	78:1:2431:2470	4847000	3	True				
ANR	4847026	IdentifierDecl	procd_addr_base = m_procd_addr		4847000	0					
ANR	4847027	IdentifierDeclType	MyString		4847000	0					
ANR	4847028	Identifier	procd_addr_base		4847000	1					
ANR	4847029	AssignmentExpression	procd_addr_base = m_procd_addr		4847000	2		=			
ANR	4847030	Identifier	m_procd_addr		4847000	0					
ANR	4847031	Identifier	m_procd_addr		4847000	1					
ANR	4847032	IfStatement	if ( address_suffix != NULL )		4847000	4					
ANR	4847033	Condition	address_suffix != NULL	79:5:2477:2498	4847000	0	True				
ANR	4847034	EqualityExpression	address_suffix != NULL		4847000	0		!=			
ANR	4847035	Identifier	address_suffix		4847000	0					
ANR	4847036	Identifier	NULL		4847000	1					
ANR	4847037	CompoundStatement		21:29:655:655	4847000	1					
ANR	4847038	ExpressionStatement	"m_procd_addr . sprintf_cat ( "".%s"" , address_suffix )"	80:2:2505:2552	4847000	0	True				
ANR	4847039	CallExpression	"m_procd_addr . sprintf_cat ( "".%s"" , address_suffix )"		4847000	0					
ANR	4847040	Callee	m_procd_addr . sprintf_cat		4847000	0					
ANR	4847041	MemberAccess	m_procd_addr . sprintf_cat		4847000	0					
ANR	4847042	Identifier	m_procd_addr		4847000	0					
ANR	4847043	Identifier	sprintf_cat		4847000	1					
ANR	4847044	ArgumentList	""".%s"""		4847000	1					
ANR	4847045	Argument	""".%s"""		4847000	0					
ANR	4847046	PrimaryExpression	""".%s"""		4847000	0					
ANR	4847047	Argument	address_suffix		4847000	1					
ANR	4847048	Identifier	address_suffix		4847000	0					
ANR	4847049	IdentifierDeclStatement	"char * procd_log = param ( ""PROCD_LOG"" ) ;"	87:1:2708:2744	4847000	5	True				
ANR	4847050	IdentifierDecl	"* procd_log = param ( ""PROCD_LOG"" )"		4847000	0					
ANR	4847051	IdentifierDeclType	char *		4847000	0					
ANR	4847052	Identifier	procd_log		4847000	1					
ANR	4847053	AssignmentExpression	"* procd_log = param ( ""PROCD_LOG"" )"		4847000	2		=			
ANR	4847054	Identifier	procd_log		4847000	0					
ANR	4847055	CallExpression	"param ( ""PROCD_LOG"" )"		4847000	1					
ANR	4847056	Callee	param		4847000	0					
ANR	4847057	Identifier	param		4847000	0					
ANR	4847058	ArgumentList	"""PROCD_LOG"""		4847000	1					
ANR	4847059	Argument	"""PROCD_LOG"""		4847000	0					
ANR	4847060	PrimaryExpression	"""PROCD_LOG"""		4847000	0					
ANR	4847061	IfStatement	if ( procd_log != NULL )		4847000	6					
ANR	4847062	Condition	procd_log != NULL	88:5:2751:2767	4847000	0	True				
ANR	4847063	EqualityExpression	procd_log != NULL		4847000	0		!=			
ANR	4847064	Identifier	procd_log		4847000	0					
ANR	4847065	Identifier	NULL		4847000	1					
ANR	4847066	CompoundStatement		30:24:924:924	4847000	1					
ANR	4847067	ExpressionStatement	m_procd_log = procd_log	89:2:2774:2797	4847000	0	True				
ANR	4847068	AssignmentExpression	m_procd_log = procd_log		4847000	0		=			
ANR	4847069	Identifier	m_procd_log		4847000	0					
ANR	4847070	Identifier	procd_log		4847000	1					
ANR	4847071	ExpressionStatement	free ( procd_log )	90:2:2801:2816	4847000	1	True				
ANR	4847072	CallExpression	free ( procd_log )		4847000	0					
ANR	4847073	Callee	free		4847000	0					
ANR	4847074	Identifier	free		4847000	0					
ANR	4847075	ArgumentList	procd_log		4847000	1					
ANR	4847076	Argument	procd_log		4847000	0					
ANR	4847077	Identifier	procd_log		4847000	0					
ANR	4847078	IfStatement	if ( address_suffix != NULL )		4847000	2					
ANR	4847079	Condition	address_suffix != NULL	91:6:2824:2845	4847000	0	True				
ANR	4847080	EqualityExpression	address_suffix != NULL		4847000	0		!=			
ANR	4847081	Identifier	address_suffix		4847000	0					
ANR	4847082	Identifier	NULL		4847000	1					
ANR	4847083	CompoundStatement		33:30:1002:1002	4847000	1					
ANR	4847084	ExpressionStatement	"m_procd_log . sprintf_cat ( "".%s"" , address_suffix )"	92:3:2853:2899	4847000	0	True				
ANR	4847085	CallExpression	"m_procd_log . sprintf_cat ( "".%s"" , address_suffix )"		4847000	0					
ANR	4847086	Callee	m_procd_log . sprintf_cat		4847000	0					
ANR	4847087	MemberAccess	m_procd_log . sprintf_cat		4847000	0					
ANR	4847088	Identifier	m_procd_log		4847000	0					
ANR	4847089	Identifier	sprintf_cat		4847000	1					
ANR	4847090	ArgumentList	""".%s"""		4847000	1					
ANR	4847091	Argument	""".%s"""		4847000	0					
ANR	4847092	PrimaryExpression	""".%s"""		4847000	0					
ANR	4847093	Argument	address_suffix		4847000	1					
ANR	4847094	Identifier	address_suffix		4847000	0					
ANR	4847095	ExpressionStatement	m_reaper_helper = new ProcFamilyProxyReaperHelper ( this )	98:1:2985:3040	4847000	7	True				
ANR	4847096	AssignmentExpression	m_reaper_helper = new ProcFamilyProxyReaperHelper ( this )		4847000	0		=			
ANR	4847097	Identifier	m_reaper_helper		4847000	0					
ANR	4847098	Identifier	this		4847000	1					
ANR	4847099	ExpressionStatement	ASSERT ( m_reaper_helper != NULL )	99:1:3043:3074	4847000	8	True				
ANR	4847100	CallExpression	ASSERT ( m_reaper_helper != NULL )		4847000	0					
ANR	4847101	Callee	ASSERT		4847000	0					
ANR	4847102	Identifier	ASSERT		4847000	0					
ANR	4847103	ArgumentList	m_reaper_helper != NULL		4847000	1					
ANR	4847104	Argument	m_reaper_helper != NULL		4847000	0					
ANR	4847105	EqualityExpression	m_reaper_helper != NULL		4847000	0		!=			
ANR	4847106	Identifier	m_reaper_helper		4847000	0					
ANR	4847107	Identifier	NULL		4847000	1					
ANR	4847108	IdentifierDeclStatement	"const char * base_addr_from_env = GetEnv ( ""CONDOR_PROCD_ADDRESS_BASE"" ) ;"	110:1:3534:3602	4847000	9	True				
ANR	4847109	IdentifierDecl	"* base_addr_from_env = GetEnv ( ""CONDOR_PROCD_ADDRESS_BASE"" )"		4847000	0					
ANR	4847110	IdentifierDeclType	const char *		4847000	0					
ANR	4847111	Identifier	base_addr_from_env		4847000	1					
ANR	4847112	AssignmentExpression	"* base_addr_from_env = GetEnv ( ""CONDOR_PROCD_ADDRESS_BASE"" )"		4847000	2		=			
ANR	4847113	Identifier	base_addr_from_env		4847000	0					
ANR	4847114	CallExpression	"GetEnv ( ""CONDOR_PROCD_ADDRESS_BASE"" )"		4847000	1					
ANR	4847115	Callee	GetEnv		4847000	0					
ANR	4847116	Identifier	GetEnv		4847000	0					
ANR	4847117	ArgumentList	"""CONDOR_PROCD_ADDRESS_BASE"""		4847000	1					
ANR	4847118	Argument	"""CONDOR_PROCD_ADDRESS_BASE"""		4847000	0					
ANR	4847119	PrimaryExpression	"""CONDOR_PROCD_ADDRESS_BASE"""		4847000	0					
ANR	4847120	IfStatement	if ( ( base_addr_from_env == NULL ) || ( procd_addr_base != base_addr_from_env ) )		4847000	10					
ANR	4847121	Condition	( base_addr_from_env == NULL ) || ( procd_addr_base != base_addr_from_env )	111:5:3609:3679	4847000	0	True				
ANR	4847122	OrExpression	( base_addr_from_env == NULL ) || ( procd_addr_base != base_addr_from_env )		4847000	0		||			
ANR	4847123	EqualityExpression	base_addr_from_env == NULL		4847000	0		==			
ANR	4847124	Identifier	base_addr_from_env		4847000	0					
ANR	4847125	Identifier	NULL		4847000	1					
ANR	4847126	EqualityExpression	procd_addr_base != base_addr_from_env		4847000	1		!=			
ANR	4847127	Identifier	procd_addr_base		4847000	0					
ANR	4847128	Identifier	base_addr_from_env		4847000	1					
ANR	4847129	CompoundStatement		53:78:1836:1836	4847000	1					
ANR	4847130	IfStatement	if ( ! start_procd ( ) )		4847000	0					
ANR	4847131	Condition	! start_procd ( )	112:6:3690:3703	4847000	0	True				
ANR	4847132	UnaryOperationExpression	! start_procd ( )		4847000	0					
ANR	4847133	UnaryOperator	!		4847000	0					
ANR	4847134	CallExpression	start_procd ( )		4847000	1					
ANR	4847135	Callee	start_procd		4847000	0					
ANR	4847136	Identifier	start_procd		4847000	0					
ANR	4847137	ArgumentList			4847000	1					
ANR	4847138	CompoundStatement		54:22:1860:1860	4847000	1					
ANR	4847139	ExpressionStatement	"EXCEPT ( ""unable to spawn the ProcD"" )"	113:3:3711:3746	4847000	0	True				
ANR	4847140	CallExpression	"EXCEPT ( ""unable to spawn the ProcD"" )"		4847000	0					
ANR	4847141	Callee	EXCEPT		4847000	0					
ANR	4847142	Identifier	EXCEPT		4847000	0					
ANR	4847143	ArgumentList	"""unable to spawn the ProcD"""		4847000	1					
ANR	4847144	Argument	"""unable to spawn the ProcD"""		4847000	0					
ANR	4847145	PrimaryExpression	"""unable to spawn the ProcD"""		4847000	0					
ANR	4847146	ExpressionStatement	"SetEnv ( ""CONDOR_PROCD_ADDRESS_BASE"" , procd_addr_base . Value ( ) )"	115:2:3754:3814	4847000	1	True				
ANR	4847147	CallExpression	"SetEnv ( ""CONDOR_PROCD_ADDRESS_BASE"" , procd_addr_base . Value ( ) )"		4847000	0					
ANR	4847148	Callee	SetEnv		4847000	0					
ANR	4847149	Identifier	SetEnv		4847000	0					
ANR	4847150	ArgumentList	"""CONDOR_PROCD_ADDRESS_BASE"""		4847000	1					
ANR	4847151	Argument	"""CONDOR_PROCD_ADDRESS_BASE"""		4847000	0					
ANR	4847152	PrimaryExpression	"""CONDOR_PROCD_ADDRESS_BASE"""		4847000	0					
ANR	4847153	Argument	procd_addr_base . Value ( )		4847000	1					
ANR	4847154	CallExpression	procd_addr_base . Value ( )		4847000	0					
ANR	4847155	Callee	procd_addr_base . Value		4847000	0					
ANR	4847156	MemberAccess	procd_addr_base . Value		4847000	0					
ANR	4847157	Identifier	procd_addr_base		4847000	0					
ANR	4847158	Identifier	Value		4847000	1					
ANR	4847159	ArgumentList			4847000	1					
ANR	4847160	ExpressionStatement	"SetEnv ( ""CONDOR_PROCD_ADDRESS"" , m_procd_addr . Value ( ) )"	116:2:3818:3870	4847000	2	True				
ANR	4847161	CallExpression	"SetEnv ( ""CONDOR_PROCD_ADDRESS"" , m_procd_addr . Value ( ) )"		4847000	0					
ANR	4847162	Callee	SetEnv		4847000	0					
ANR	4847163	Identifier	SetEnv		4847000	0					
ANR	4847164	ArgumentList	"""CONDOR_PROCD_ADDRESS"""		4847000	1					
ANR	4847165	Argument	"""CONDOR_PROCD_ADDRESS"""		4847000	0					
ANR	4847166	PrimaryExpression	"""CONDOR_PROCD_ADDRESS"""		4847000	0					
ANR	4847167	Argument	m_procd_addr . Value ( )		4847000	1					
ANR	4847168	CallExpression	m_procd_addr . Value ( )		4847000	0					
ANR	4847169	Callee	m_procd_addr . Value		4847000	0					
ANR	4847170	MemberAccess	m_procd_addr . Value		4847000	0					
ANR	4847171	Identifier	m_procd_addr		4847000	0					
ANR	4847172	Identifier	Value		4847000	1					
ANR	4847173	ArgumentList			4847000	1					
ANR	4847174	ElseStatement	else		4847000	0					
ANR	4847175	CompoundStatement		61:2:2039:2097	4847000	0					
ANR	4847176	IdentifierDeclStatement	"const char * addr_from_env = GetEnv ( ""CONDOR_PROCD_ADDRESS"" ) ;"	119:2:3885:3943	4847000	0	True				
ANR	4847177	IdentifierDecl	"* addr_from_env = GetEnv ( ""CONDOR_PROCD_ADDRESS"" )"		4847000	0					
ANR	4847178	IdentifierDeclType	const char *		4847000	0					
ANR	4847179	Identifier	addr_from_env		4847000	1					
ANR	4847180	AssignmentExpression	"* addr_from_env = GetEnv ( ""CONDOR_PROCD_ADDRESS"" )"		4847000	2		=			
ANR	4847181	Identifier	addr_from_env		4847000	0					
ANR	4847182	CallExpression	"GetEnv ( ""CONDOR_PROCD_ADDRESS"" )"		4847000	1					
ANR	4847183	Callee	GetEnv		4847000	0					
ANR	4847184	Identifier	GetEnv		4847000	0					
ANR	4847185	ArgumentList	"""CONDOR_PROCD_ADDRESS"""		4847000	1					
ANR	4847186	Argument	"""CONDOR_PROCD_ADDRESS"""		4847000	0					
ANR	4847187	PrimaryExpression	"""CONDOR_PROCD_ADDRESS"""		4847000	0					
ANR	4847188	IfStatement	if ( addr_from_env == NULL )		4847000	1					
ANR	4847189	Condition	addr_from_env == NULL	120:6:3951:3971	4847000	0	True				
ANR	4847190	EqualityExpression	addr_from_env == NULL		4847000	0		==			
ANR	4847191	Identifier	addr_from_env		4847000	0					
ANR	4847192	Identifier	NULL		4847000	1					
ANR	4847193	CompoundStatement		62:29:2128:2128	4847000	1					
ANR	4847194	Statement	EXCEPT	121:3:3979:3984	4847000	0	True				
ANR	4847195	Statement	(	121:9:3985:3985	4847000	1	True				
ANR	4847196	Statement	"""CONDOR_PROCD_ADDRESS_BASE in environment """	121:10:3986:4028	4847000	2	True				
ANR	4847197	Statement	"""but not CONDOR_PROCD_ADDRESS"""	122:14:4044:4073	4847000	3	True				
ANR	4847198	Statement	)	122:44:4074:4074	4847000	4	True				
ANR	4847199	ExpressionStatement		122:45:4075:4075	4847000	5	True				
ANR	4847200	ExpressionStatement	m_procd_addr = addr_from_env	124:2:4083:4111	4847000	2	True				
ANR	4847201	AssignmentExpression	m_procd_addr = addr_from_env		4847000	0		=			
ANR	4847202	Identifier	m_procd_addr		4847000	0					
ANR	4847203	Identifier	addr_from_env		4847000	1					
ANR	4847204	Statement	m_client	129:1:4194:4201	4847000	11	True				
ANR	4847205	Statement	=	129:10:4203:4203	4847000	12	True				
ANR	4847206	Statement	new	129:12:4205:4207	4847000	13	True				
ANR	4847207	ExpressionStatement	ProcFamilyClient	129:16:4209:4225	4847000	14	True				
ANR	4847208	Identifier	ProcFamilyClient		4847000	0					
ANR	4847209	ExpressionStatement	ASSERT ( m_client != NULL )	130:1:4228:4252	4847000	15	True				
ANR	4847210	CallExpression	ASSERT ( m_client != NULL )		4847000	0					
ANR	4847211	Callee	ASSERT		4847000	0					
ANR	4847212	Identifier	ASSERT		4847000	0					
ANR	4847213	ArgumentList	m_client != NULL		4847000	1					
ANR	4847214	Argument	m_client != NULL		4847000	0					
ANR	4847215	EqualityExpression	m_client != NULL		4847000	0		!=			
ANR	4847216	Identifier	m_client		4847000	0					
ANR	4847217	Identifier	NULL		4847000	1					
ANR	4847218	IfStatement	if ( ! m_client -> initialize ( m_procd_addr . Value ( ) ) )		4847000	16					
ANR	4847219	Condition	! m_client -> initialize ( m_procd_addr . Value ( ) )	131:5:4259:4301	4847000	0	True				
ANR	4847220	UnaryOperationExpression	! m_client -> initialize ( m_procd_addr . Value ( ) )		4847000	0					
ANR	4847221	UnaryOperator	!		4847000	0					
ANR	4847222	CallExpression	m_client -> initialize ( m_procd_addr . Value ( ) )		4847000	1					
ANR	4847223	Callee	m_client -> initialize		4847000	0					
ANR	4847224	PtrMemberAccess	m_client -> initialize		4847000	0					
ANR	4847225	Identifier	m_client		4847000	0					
ANR	4847226	Identifier	initialize		4847000	1					
ANR	4847227	ArgumentList	m_procd_addr . Value ( )		4847000	1					
ANR	4847228	Argument	m_procd_addr . Value ( )		4847000	0					
ANR	4847229	CallExpression	m_procd_addr . Value ( )		4847000	0					
ANR	4847230	Callee	m_procd_addr . Value		4847000	0					
ANR	4847231	MemberAccess	m_procd_addr . Value		4847000	0					
ANR	4847232	Identifier	m_procd_addr		4847000	0					
ANR	4847233	Identifier	Value		4847000	1					
ANR	4847234	ArgumentList			4847000	1					
ANR	4847235	CompoundStatement		73:50:2458:2458	4847000	1					
ANR	4847236	ExpressionStatement	"dprintf ( D_ALWAYS , ""ProcFamilyProxy: error initializing ProcFamilyClient\\n"" )"	132:2:4308:4393	4847000	0	True				
ANR	4847237	CallExpression	"dprintf ( D_ALWAYS , ""ProcFamilyProxy: error initializing ProcFamilyClient\\n"" )"		4847000	0					
ANR	4847238	Callee	dprintf		4847000	0					
ANR	4847239	Identifier	dprintf		4847000	0					
ANR	4847240	ArgumentList	D_ALWAYS		4847000	1					
ANR	4847241	Argument	D_ALWAYS		4847000	0					
ANR	4847242	Identifier	D_ALWAYS		4847000	0					
ANR	4847243	Argument	"""ProcFamilyProxy: error initializing ProcFamilyClient\\n"""		4847000	1					
ANR	4847244	PrimaryExpression	"""ProcFamilyProxy: error initializing ProcFamilyClient\\n"""		4847000	0					
ANR	4847245	ExpressionStatement	recover_from_procd_error ( )	134:2:4397:4423	4847000	1	True				
ANR	4847246	CallExpression	recover_from_procd_error ( )		4847000	0					
ANR	4847247	Callee	recover_from_procd_error		4847000	0					
ANR	4847248	Identifier	recover_from_procd_error		4847000	0					
ANR	4847249	ArgumentList			4847000	1					
ANR	4847250	Identifier	ProcFamilyProxy :: ProcFamilyProxy		4847000	1					
ANR	4847251	ParameterList	const char * address_suffix		4847000	2					
ANR	4847252	Parameter	const char * address_suffix	56:33:1777:1802	4847000	0	True				
ANR	4847253	ParameterType	const char *		4847000	0					
ANR	4847254	Identifier	address_suffix		4847000	1					
ANR	4847255	CFGEntryNode	ENTRY		4847000		True				
ANR	4847256	CFGExitNode	EXIT		4847000		True				
ANR	4847257	Symbol	m_procd_addr		4847000						
ANR	4847258	Symbol	NULL		4847000						
ANR	4847259	Symbol	m_procd_log		4847000						
ANR	4847260	Symbol	this		4847000						
ANR	4847261	Symbol	addr_from_env		4847000						
ANR	4847262	Symbol	D_ALWAYS		4847000						
ANR	4847263	Symbol	m_reaper_helper		4847000						
ANR	4847264	Symbol	* m_client		4847000						
ANR	4847265	Symbol	s_instantiated		4847000						
ANR	4847266	Symbol	procd_addr_base		4847000						
ANR	4847267	Symbol	base_addr_from_env		4847000						
ANR	4847268	Symbol	procd_addr_base . Value		4847000						
ANR	4847269	Symbol	m_client -> initialize		4847000						
ANR	4847270	Symbol	param		4847000						
ANR	4847271	Symbol	start_procd		4847000						
ANR	4847272	Symbol	true		4847000						
ANR	4847273	Symbol	get_procd_address		4847000						
ANR	4847274	Symbol	GetEnv		4847000						
ANR	4847275	Symbol	procd_log		4847000						
ANR	4847276	Symbol	address_suffix		4847000						
ANR	4847277	Symbol	m_procd_addr . Value		4847000						
ANR	4847278	Symbol	m_client		4847000						
ANR	4847279	Function	ProcFamilyProxy :: ~ProcFamilyProxy	138:0:4431:4820							
ANR	4847280	FunctionDef	ProcFamilyProxy :: ~ProcFamilyProxy ()		4847279	0					
ANR	4847281	CompoundStatement		139:0:4467:4820	4847279	0					
ANR	4847282	IfStatement	if ( m_procd_pid != - 1 )		4847279	0					
ANR	4847283	Condition	m_procd_pid != - 1	143:5:4565:4581	4847279	0	True				
ANR	4847284	EqualityExpression	m_procd_pid != - 1		4847279	0		!=			
ANR	4847285	Identifier	m_procd_pid		4847279	0					
ANR	4847286	UnaryOperationExpression	- 1		4847279	1					
ANR	4847287	UnaryOperator	-		4847279	0					
ANR	4847288	PrimaryExpression	1		4847279	1					
ANR	4847289	CompoundStatement		5:24:116:116	4847279	1					
ANR	4847290	ExpressionStatement	stop_procd ( )	144:2:4588:4600	4847279	0	True				
ANR	4847291	CallExpression	stop_procd ( )		4847279	0					
ANR	4847292	Callee	stop_procd		4847279	0					
ANR	4847293	Identifier	stop_procd		4847279	0					
ANR	4847294	ArgumentList			4847279	1					
ANR	4847295	ExpressionStatement	"UnsetEnv ( ""CONDOR_PROCD_ADDRESS_BASE"" )"	145:2:4604:4641	4847279	1	True				
ANR	4847296	CallExpression	"UnsetEnv ( ""CONDOR_PROCD_ADDRESS_BASE"" )"		4847279	0					
ANR	4847297	Callee	UnsetEnv		4847279	0					
ANR	4847298	Identifier	UnsetEnv		4847279	0					
ANR	4847299	ArgumentList	"""CONDOR_PROCD_ADDRESS_BASE"""		4847279	1					
ANR	4847300	Argument	"""CONDOR_PROCD_ADDRESS_BASE"""		4847279	0					
ANR	4847301	PrimaryExpression	"""CONDOR_PROCD_ADDRESS_BASE"""		4847279	0					
ANR	4847302	ExpressionStatement	"UnsetEnv ( ""CONDOR_PROCD_ADDRESS"" )"	146:2:4645:4677	4847279	2	True				
ANR	4847303	CallExpression	"UnsetEnv ( ""CONDOR_PROCD_ADDRESS"" )"		4847279	0					
ANR	4847304	Callee	UnsetEnv		4847279	0					
ANR	4847305	Identifier	UnsetEnv		4847279	0					
ANR	4847306	ArgumentList	"""CONDOR_PROCD_ADDRESS"""		4847279	1					
ANR	4847307	Argument	"""CONDOR_PROCD_ADDRESS"""		4847279	0					
ANR	4847308	PrimaryExpression	"""CONDOR_PROCD_ADDRESS"""		4847279	0					
ANR	4847309	Statement	delete	151:1:4718:4723	4847279	1	True				
ANR	4847310	ExpressionStatement	m_client	151:8:4725:4733	4847279	2	True				
ANR	4847311	Identifier	m_client		4847279	0					
ANR	4847312	Statement	delete	152:1:4736:4741	4847279	3	True				
ANR	4847313	ExpressionStatement	m_reaper_helper	152:8:4743:4758	4847279	4	True				
ANR	4847314	Identifier	m_reaper_helper		4847279	0					
ANR	4847315	ExpressionStatement	s_instantiated = false	156:1:4795:4817	4847279	5	True				
ANR	4847316	AssignmentExpression	s_instantiated = false		4847279	0		=			
ANR	4847317	Identifier	s_instantiated		4847279	0					
ANR	4847318	Identifier	false		4847279	1					
ANR	4847319	Identifier	ProcFamilyProxy :: ~ProcFamilyProxy		4847279	1					
ANR	4847320	ParameterList			4847279	2					
ANR	4847321	CFGEntryNode	ENTRY		4847279		True				
ANR	4847322	CFGExitNode	EXIT		4847279		True				
ANR	4847323	Symbol	m_procd_pid		4847279						
ANR	4847324	Symbol	false		4847279						
ANR	4847325	Symbol	s_instantiated		4847279						
ANR	4847326	Function	ProcFamilyProxy :: register_subfamily	160:0:4823:7064							
ANR	4847327	FunctionDef	"ProcFamilyProxy :: register_subfamily (pid_t root_pid , pid_t watcher_pid , int max_snapshot_interval)"		4847326	0					
ANR	4847328	CompoundStatement		164:0:4998:7064	4847326	0					
ANR	4847329	ExpressionStatement	"DC_AUTO_RUNTIME_PROBE ( __FUNCTION__ , auto0 )"	166:4:5031:5072	4847326	0	True				
ANR	4847330	CallExpression	"DC_AUTO_RUNTIME_PROBE ( __FUNCTION__ , auto0 )"		4847326	0					
ANR	4847331	Callee	DC_AUTO_RUNTIME_PROBE		4847326	0					
ANR	4847332	Identifier	DC_AUTO_RUNTIME_PROBE		4847326	0					
ANR	4847333	ArgumentList	__FUNCTION__		4847326	1					
ANR	4847334	Argument	__FUNCTION__		4847326	0					
ANR	4847335	Identifier	__FUNCTION__		4847326	0					
ANR	4847336	Argument	auto0		4847326	1					
ANR	4847337	Identifier	auto0		4847326	0					
ANR	4847338	IdentifierDeclStatement	bool response ;	176:1:5434:5447	4847326	1	True				
ANR	4847339	IdentifierDecl	response		4847326	0					
ANR	4847340	IdentifierDeclType	bool		4847326	0					
ANR	4847341	Identifier	response		4847326	1					
ANR	4847342	IfStatement	"if ( ! m_client -> register_subfamily ( root_pid , watcher_pid , max_snapshot_interval , response ) )"		4847326	2					
ANR	4847343	Condition	"! m_client -> register_subfamily ( root_pid , watcher_pid , max_snapshot_interval , response )"	177:5:5454:5643	4847326	0	True				
ANR	4847344	UnaryOperationExpression	"! m_client -> register_subfamily ( root_pid , watcher_pid , max_snapshot_interval , response )"		4847326	0					
ANR	4847345	UnaryOperator	!		4847326	0					
ANR	4847346	CallExpression	"m_client -> register_subfamily ( root_pid , watcher_pid , max_snapshot_interval , response )"		4847326	1					
ANR	4847347	Callee	m_client -> register_subfamily		4847326	0					
ANR	4847348	PtrMemberAccess	m_client -> register_subfamily		4847326	0					
ANR	4847349	Identifier	m_client		4847326	0					
ANR	4847350	Identifier	register_subfamily		4847326	1					
ANR	4847351	ArgumentList	root_pid		4847326	1					
ANR	4847352	Argument	root_pid		4847326	0					
ANR	4847353	Identifier	root_pid		4847326	0					
ANR	4847354	Argument	watcher_pid		4847326	1					
ANR	4847355	Identifier	watcher_pid		4847326	0					
ANR	4847356	Argument	max_snapshot_interval		4847326	2					
ANR	4847357	Identifier	max_snapshot_interval		4847326	0					
ANR	4847358	Argument	response		4847326	3					
ANR	4847359	Identifier	response		4847326	0					
ANR	4847360	CompoundStatement		18:1:648:648	4847326	1					
ANR	4847361	ExpressionStatement	"dprintf ( D_ALWAYS , ""register_subfamily: ProcD communication error\\n"" )"	182:2:5651:5719	4847326	0	True				
ANR	4847362	CallExpression	"dprintf ( D_ALWAYS , ""register_subfamily: ProcD communication error\\n"" )"		4847326	0					
ANR	4847363	Callee	dprintf		4847326	0					
ANR	4847364	Identifier	dprintf		4847326	0					
ANR	4847365	ArgumentList	D_ALWAYS		4847326	1					
ANR	4847366	Argument	D_ALWAYS		4847326	0					
ANR	4847367	Identifier	D_ALWAYS		4847326	0					
ANR	4847368	Argument	"""register_subfamily: ProcD communication error\\n"""		4847326	1					
ANR	4847369	PrimaryExpression	"""register_subfamily: ProcD communication error\\n"""		4847326	0					
ANR	4847370	ReturnStatement	return false ;	183:2:5723:5735	4847326	1	True				
ANR	4847371	Identifier	false		4847326	0					
ANR	4847372	CompoundStatement		32:7:1173:1211	4847326	3					
ANR	4847373	IdentifierDeclStatement	extern double pfc_lc_rt_start_connection ;	190:7:5954:5994	4847326	0	True				
ANR	4847374	IdentifierDecl	pfc_lc_rt_start_connection		4847326	0					
ANR	4847375	IdentifierDeclType	extern double		4847326	0					
ANR	4847376	Identifier	pfc_lc_rt_start_connection		4847326	1					
ANR	4847377	IdentifierDeclStatement	extern double pfc_lc_rt_open_pipe ;	191:7:6003:6036	4847326	1	True				
ANR	4847378	IdentifierDecl	pfc_lc_rt_open_pipe		4847326	0					
ANR	4847379	IdentifierDeclType	extern double		4847326	0					
ANR	4847380	Identifier	pfc_lc_rt_open_pipe		4847326	1					
ANR	4847381	IdentifierDeclStatement	extern double pfc_lc_rt_wait_pipe ;	192:7:6045:6078	4847326	2	True				
ANR	4847382	IdentifierDecl	pfc_lc_rt_wait_pipe		4847326	0					
ANR	4847383	IdentifierDeclType	extern double		4847326	0					
ANR	4847384	Identifier	pfc_lc_rt_wait_pipe		4847326	1					
ANR	4847385	IdentifierDeclStatement	extern double pfc_lc_rt_write_pipe ;	193:7:6087:6121	4847326	3	True				
ANR	4847386	IdentifierDecl	pfc_lc_rt_write_pipe		4847326	0					
ANR	4847387	IdentifierDeclType	extern double		4847326	0					
ANR	4847388	Identifier	pfc_lc_rt_write_pipe		4847326	1					
ANR	4847389	IdentifierDeclStatement	extern double pfc_lc_rt_read_data ;	194:7:6130:6163	4847326	4	True				
ANR	4847390	IdentifierDecl	pfc_lc_rt_read_data		4847326	0					
ANR	4847391	IdentifierDeclType	extern double		4847326	0					
ANR	4847392	Identifier	pfc_lc_rt_read_data		4847326	1					
ANR	4847393	IdentifierDeclStatement	extern double pfc_lc_rt_end_connection ;	195:7:6172:6210	4847326	5	True				
ANR	4847394	IdentifierDecl	pfc_lc_rt_end_connection		4847326	0					
ANR	4847395	IdentifierDeclType	extern double		4847326	0					
ANR	4847396	Identifier	pfc_lc_rt_end_connection		4847326	1					
ANR	4847397	ExpressionStatement	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily_0start_connection"" , IF_VERBOSEPUB , pfc_lc_rt_start_connection )"	197:7:6220:6356	4847326	6	True				
ANR	4847398	CallExpression	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily_0start_connection"" , IF_VERBOSEPUB , pfc_lc_rt_start_connection )"		4847326	0					
ANR	4847399	Callee	daemonCore -> dc_stats . AddSample		4847326	0					
ANR	4847400	MemberAccess	daemonCore -> dc_stats . AddSample		4847326	0					
ANR	4847401	PtrMemberAccess	daemonCore -> dc_stats		4847326	0					
ANR	4847402	Identifier	daemonCore		4847326	0					
ANR	4847403	Identifier	dc_stats		4847326	1					
ANR	4847404	Identifier	AddSample		4847326	1					
ANR	4847405	ArgumentList	"""DCFuncProcFamilyProxy::register_subfamily_0start_connection"""		4847326	1					
ANR	4847406	Argument	"""DCFuncProcFamilyProxy::register_subfamily_0start_connection"""		4847326	0					
ANR	4847407	PrimaryExpression	"""DCFuncProcFamilyProxy::register_subfamily_0start_connection"""		4847326	0					
ANR	4847408	Argument	IF_VERBOSEPUB		4847326	1					
ANR	4847409	Identifier	IF_VERBOSEPUB		4847326	0					
ANR	4847410	Argument	pfc_lc_rt_start_connection		4847326	2					
ANR	4847411	Identifier	pfc_lc_rt_start_connection		4847326	0					
ANR	4847412	ExpressionStatement	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily__0open_pipe"" , IF_VERBOSEPUB , pfc_lc_rt_open_pipe )"	198:7:6365:6488	4847326	7	True				
ANR	4847413	CallExpression	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily__0open_pipe"" , IF_VERBOSEPUB , pfc_lc_rt_open_pipe )"		4847326	0					
ANR	4847414	Callee	daemonCore -> dc_stats . AddSample		4847326	0					
ANR	4847415	MemberAccess	daemonCore -> dc_stats . AddSample		4847326	0					
ANR	4847416	PtrMemberAccess	daemonCore -> dc_stats		4847326	0					
ANR	4847417	Identifier	daemonCore		4847326	0					
ANR	4847418	Identifier	dc_stats		4847326	1					
ANR	4847419	Identifier	AddSample		4847326	1					
ANR	4847420	ArgumentList	"""DCFuncProcFamilyProxy::register_subfamily__0open_pipe"""		4847326	1					
ANR	4847421	Argument	"""DCFuncProcFamilyProxy::register_subfamily__0open_pipe"""		4847326	0					
ANR	4847422	PrimaryExpression	"""DCFuncProcFamilyProxy::register_subfamily__0open_pipe"""		4847326	0					
ANR	4847423	Argument	IF_VERBOSEPUB		4847326	1					
ANR	4847424	Identifier	IF_VERBOSEPUB		4847326	0					
ANR	4847425	Argument	pfc_lc_rt_open_pipe		4847326	2					
ANR	4847426	Identifier	pfc_lc_rt_open_pipe		4847326	0					
ANR	4847427	ExpressionStatement	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily__1wait_pipe"" , IF_VERBOSEPUB , pfc_lc_rt_wait_pipe )"	199:7:6497:6620	4847326	8	True				
ANR	4847428	CallExpression	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily__1wait_pipe"" , IF_VERBOSEPUB , pfc_lc_rt_wait_pipe )"		4847326	0					
ANR	4847429	Callee	daemonCore -> dc_stats . AddSample		4847326	0					
ANR	4847430	MemberAccess	daemonCore -> dc_stats . AddSample		4847326	0					
ANR	4847431	PtrMemberAccess	daemonCore -> dc_stats		4847326	0					
ANR	4847432	Identifier	daemonCore		4847326	0					
ANR	4847433	Identifier	dc_stats		4847326	1					
ANR	4847434	Identifier	AddSample		4847326	1					
ANR	4847435	ArgumentList	"""DCFuncProcFamilyProxy::register_subfamily__1wait_pipe"""		4847326	1					
ANR	4847436	Argument	"""DCFuncProcFamilyProxy::register_subfamily__1wait_pipe"""		4847326	0					
ANR	4847437	PrimaryExpression	"""DCFuncProcFamilyProxy::register_subfamily__1wait_pipe"""		4847326	0					
ANR	4847438	Argument	IF_VERBOSEPUB		4847326	1					
ANR	4847439	Identifier	IF_VERBOSEPUB		4847326	0					
ANR	4847440	Argument	pfc_lc_rt_wait_pipe		4847326	2					
ANR	4847441	Identifier	pfc_lc_rt_wait_pipe		4847326	0					
ANR	4847442	ExpressionStatement	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily__2write_pipe"" , IF_VERBOSEPUB , pfc_lc_rt_write_pipe )"	200:7:6629:6754	4847326	9	True				
ANR	4847443	CallExpression	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily__2write_pipe"" , IF_VERBOSEPUB , pfc_lc_rt_write_pipe )"		4847326	0					
ANR	4847444	Callee	daemonCore -> dc_stats . AddSample		4847326	0					
ANR	4847445	MemberAccess	daemonCore -> dc_stats . AddSample		4847326	0					
ANR	4847446	PtrMemberAccess	daemonCore -> dc_stats		4847326	0					
ANR	4847447	Identifier	daemonCore		4847326	0					
ANR	4847448	Identifier	dc_stats		4847326	1					
ANR	4847449	Identifier	AddSample		4847326	1					
ANR	4847450	ArgumentList	"""DCFuncProcFamilyProxy::register_subfamily__2write_pipe"""		4847326	1					
ANR	4847451	Argument	"""DCFuncProcFamilyProxy::register_subfamily__2write_pipe"""		4847326	0					
ANR	4847452	PrimaryExpression	"""DCFuncProcFamilyProxy::register_subfamily__2write_pipe"""		4847326	0					
ANR	4847453	Argument	IF_VERBOSEPUB		4847326	1					
ANR	4847454	Identifier	IF_VERBOSEPUB		4847326	0					
ANR	4847455	Argument	pfc_lc_rt_write_pipe		4847326	2					
ANR	4847456	Identifier	pfc_lc_rt_write_pipe		4847326	0					
ANR	4847457	ExpressionStatement	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily_1read_data"" , IF_VERBOSEPUB , pfc_lc_rt_read_data )"	201:7:6763:6885	4847326	10	True				
ANR	4847458	CallExpression	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily_1read_data"" , IF_VERBOSEPUB , pfc_lc_rt_read_data )"		4847326	0					
ANR	4847459	Callee	daemonCore -> dc_stats . AddSample		4847326	0					
ANR	4847460	MemberAccess	daemonCore -> dc_stats . AddSample		4847326	0					
ANR	4847461	PtrMemberAccess	daemonCore -> dc_stats		4847326	0					
ANR	4847462	Identifier	daemonCore		4847326	0					
ANR	4847463	Identifier	dc_stats		4847326	1					
ANR	4847464	Identifier	AddSample		4847326	1					
ANR	4847465	ArgumentList	"""DCFuncProcFamilyProxy::register_subfamily_1read_data"""		4847326	1					
ANR	4847466	Argument	"""DCFuncProcFamilyProxy::register_subfamily_1read_data"""		4847326	0					
ANR	4847467	PrimaryExpression	"""DCFuncProcFamilyProxy::register_subfamily_1read_data"""		4847326	0					
ANR	4847468	Argument	IF_VERBOSEPUB		4847326	1					
ANR	4847469	Identifier	IF_VERBOSEPUB		4847326	0					
ANR	4847470	Argument	pfc_lc_rt_read_data		4847326	2					
ANR	4847471	Identifier	pfc_lc_rt_read_data		4847326	0					
ANR	4847472	ExpressionStatement	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily_2end_connection"" , IF_VERBOSEPUB , pfc_lc_rt_end_connection )"	202:7:6894:7026	4847326	11	True				
ANR	4847473	CallExpression	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily_2end_connection"" , IF_VERBOSEPUB , pfc_lc_rt_end_connection )"		4847326	0					
ANR	4847474	Callee	daemonCore -> dc_stats . AddSample		4847326	0					
ANR	4847475	MemberAccess	daemonCore -> dc_stats . AddSample		4847326	0					
ANR	4847476	PtrMemberAccess	daemonCore -> dc_stats		4847326	0					
ANR	4847477	Identifier	daemonCore		4847326	0					
ANR	4847478	Identifier	dc_stats		4847326	1					
ANR	4847479	Identifier	AddSample		4847326	1					
ANR	4847480	ArgumentList	"""DCFuncProcFamilyProxy::register_subfamily_2end_connection"""		4847326	1					
ANR	4847481	Argument	"""DCFuncProcFamilyProxy::register_subfamily_2end_connection"""		4847326	0					
ANR	4847482	PrimaryExpression	"""DCFuncProcFamilyProxy::register_subfamily_2end_connection"""		4847326	0					
ANR	4847483	Argument	IF_VERBOSEPUB		4847326	1					
ANR	4847484	Identifier	IF_VERBOSEPUB		4847326	0					
ANR	4847485	Argument	pfc_lc_rt_end_connection		4847326	2					
ANR	4847486	Identifier	pfc_lc_rt_end_connection		4847326	0					
ANR	4847487	ReturnStatement	return response ;	206:1:7047:7062	4847326	4	True				
ANR	4847488	Identifier	response		4847326	0					
ANR	4847489	ReturnType	bool		4847326	1					
ANR	4847490	Identifier	ProcFamilyProxy :: register_subfamily		4847326	2					
ANR	4847491	ParameterList	"pid_t root_pid , pid_t watcher_pid , int max_snapshot_interval"		4847326	3					
ANR	4847492	Parameter	pid_t root_pid	161:36:4864:4877	4847326	0	True				
ANR	4847493	ParameterType	pid_t		4847326	0					
ANR	4847494	Identifier	root_pid		4847326	1					
ANR	4847495	Parameter	pid_t watcher_pid	162:36:4916:4932	4847326	1	True				
ANR	4847496	ParameterType	pid_t		4847326	0					
ANR	4847497	Identifier	watcher_pid		4847326	1					
ANR	4847498	Parameter	int max_snapshot_interval	163:36:4971:4995	4847326	2	True				
ANR	4847499	ParameterType	int		4847326	0					
ANR	4847500	Identifier	max_snapshot_interval		4847326	1					
ANR	4847501	CFGEntryNode	ENTRY		4847326		True				
ANR	4847502	CFGExitNode	EXIT		4847326		True				
ANR	4847503	Symbol	pfc_lc_rt_open_pipe		4847326						
ANR	4847504	Symbol	watcher_pid		4847326						
ANR	4847505	Symbol	pfc_lc_rt_read_data		4847326						
ANR	4847506	Symbol	D_ALWAYS		4847326						
ANR	4847507	Symbol	false		4847326						
ANR	4847508	Symbol	m_client -> register_subfamily		4847326						
ANR	4847509	Symbol	auto0		4847326						
ANR	4847510	Symbol	pfc_lc_rt_start_connection		4847326						
ANR	4847511	Symbol	__FUNCTION__		4847326						
ANR	4847512	Symbol	* m_client		4847326						
ANR	4847513	Symbol	pfc_lc_rt_wait_pipe		4847326						
ANR	4847514	Symbol	daemonCore -> dc_stats		4847326						
ANR	4847515	Symbol	max_snapshot_interval		4847326						
ANR	4847516	Symbol	IF_VERBOSEPUB		4847326						
ANR	4847517	Symbol	pfc_lc_rt_write_pipe		4847326						
ANR	4847518	Symbol	response		4847326						
ANR	4847519	Symbol	* daemonCore		4847326						
ANR	4847520	Symbol	daemonCore		4847326						
ANR	4847521	Symbol	root_pid		4847326						
ANR	4847522	Symbol	m_client		4847326						
ANR	4847523	Symbol	pfc_lc_rt_end_connection		4847326						
ANR	4847524	Function	ProcFamilyProxy :: track_family_via_environment	209:0:7067:7484							
ANR	4847525	FunctionDef	"ProcFamilyProxy :: track_family_via_environment (pid_t pid , PidEnvID & penvid)"		4847524	0					
ANR	4847526	CompoundStatement		211:0:7147:7484	4847524	0					
ANR	4847527	IdentifierDeclStatement	bool response ;	215:1:7252:7265	4847524	0	True				
ANR	4847528	IdentifierDecl	response		4847524	0					
ANR	4847529	IdentifierDeclType	bool		4847524	0					
ANR	4847530	Identifier	response		4847524	1					
ANR	4847531	IfStatement	"if ( ! m_client -> track_family_via_environment ( pid , penvid , response ) )"		4847524	1					
ANR	4847532	Condition	"! m_client -> track_family_via_environment ( pid , penvid , response )"	216:5:7272:7333	4847524	0	True				
ANR	4847533	UnaryOperationExpression	"! m_client -> track_family_via_environment ( pid , penvid , response )"		4847524	0					
ANR	4847534	UnaryOperator	!		4847524	0					
ANR	4847535	CallExpression	"m_client -> track_family_via_environment ( pid , penvid , response )"		4847524	1					
ANR	4847536	Callee	m_client -> track_family_via_environment		4847524	0					
ANR	4847537	PtrMemberAccess	m_client -> track_family_via_environment		4847524	0					
ANR	4847538	Identifier	m_client		4847524	0					
ANR	4847539	Identifier	track_family_via_environment		4847524	1					
ANR	4847540	ArgumentList	pid		4847524	1					
ANR	4847541	Argument	pid		4847524	0					
ANR	4847542	Identifier	pid		4847524	0					
ANR	4847543	Argument	penvid		4847524	1					
ANR	4847544	Identifier	penvid		4847524	0					
ANR	4847545	Argument	response		4847524	2					
ANR	4847546	Identifier	response		4847524	0					
ANR	4847547	CompoundStatement		6:69:188:188	4847524	1					
ANR	4847548	Statement	dprintf	217:2:7340:7346	4847524	0	True				
ANR	4847549	Statement	(	217:9:7347:7347	4847524	1	True				
ANR	4847550	Statement	D_ALWAYS	217:10:7348:7355	4847524	2	True				
ANR	4847551	Statement	","	217:18:7356:7356	4847524	3	True				
ANR	4847552	Statement	"""track_family_via_environment: """	218:10:7368:7399	4847524	4	True				
ANR	4847553	Statement	"""ProcD communication error\\n"""	219:14:7415:7443	4847524	5	True				
ANR	4847554	Statement	)	219:43:7444:7444	4847524	6	True				
ANR	4847555	ExpressionStatement		219:44:7445:7445	4847524	7	True				
ANR	4847556	ReturnStatement	return false ;	220:2:7449:7461	4847524	8	True				
ANR	4847557	Identifier	false		4847524	0					
ANR	4847558	ReturnStatement	return response ;	222:1:7467:7482	4847524	2	True				
ANR	4847559	Identifier	response		4847524	0					
ANR	4847560	ReturnType	bool		4847524	1					
ANR	4847561	Identifier	ProcFamilyProxy :: track_family_via_environment		4847524	2					
ANR	4847562	ParameterList	"pid_t pid , PidEnvID & penvid"		4847524	3					
ANR	4847563	Parameter	pid_t pid	210:46:7118:7126	4847524	0	True				
ANR	4847564	ParameterType	pid_t		4847524	0					
ANR	4847565	Identifier	pid		4847524	1					
ANR	4847566	Parameter	PidEnvID & penvid	210:57:7129:7144	4847524	1	True				
ANR	4847567	ParameterType	PidEnvID &		4847524	0					
ANR	4847568	Identifier	penvid		4847524	1					
ANR	4847569	CFGEntryNode	ENTRY		4847524		True				
ANR	4847570	CFGExitNode	EXIT		4847524		True				
ANR	4847571	Symbol	m_client -> track_family_via_environment		4847524						
ANR	4847572	Symbol	response		4847524						
ANR	4847573	Symbol	false		4847524						
ANR	4847574	Symbol	penvid		4847524						
ANR	4847575	Symbol	pid		4847524						
ANR	4847576	Symbol	* m_client		4847524						
ANR	4847577	Symbol	m_client		4847524						
ANR	4847578	Function	ProcFamilyProxy :: track_family_via_login	225:0:7487:7886							
ANR	4847579	FunctionDef	"ProcFamilyProxy :: track_family_via_login (pid_t pid , const char * login)"		4847578	0					
ANR	4847580	CompoundStatement		227:0:7562:7886	4847578	0					
ANR	4847581	IdentifierDeclStatement	bool response ;	231:1:7667:7680	4847578	0	True				
ANR	4847582	IdentifierDecl	response		4847578	0					
ANR	4847583	IdentifierDeclType	bool		4847578	0					
ANR	4847584	Identifier	response		4847578	1					
ANR	4847585	IfStatement	"if ( ! m_client -> track_family_via_login ( pid , login , response ) )"		4847578	1					
ANR	4847586	Condition	"! m_client -> track_family_via_login ( pid , login , response )"	232:5:7687:7741	4847578	0	True				
ANR	4847587	UnaryOperationExpression	"! m_client -> track_family_via_login ( pid , login , response )"		4847578	0					
ANR	4847588	UnaryOperator	!		4847578	0					
ANR	4847589	CallExpression	"m_client -> track_family_via_login ( pid , login , response )"		4847578	1					
ANR	4847590	Callee	m_client -> track_family_via_login		4847578	0					
ANR	4847591	PtrMemberAccess	m_client -> track_family_via_login		4847578	0					
ANR	4847592	Identifier	m_client		4847578	0					
ANR	4847593	Identifier	track_family_via_login		4847578	1					
ANR	4847594	ArgumentList	pid		4847578	1					
ANR	4847595	Argument	pid		4847578	0					
ANR	4847596	Identifier	pid		4847578	0					
ANR	4847597	Argument	login		4847578	1					
ANR	4847598	Identifier	login		4847578	0					
ANR	4847599	Argument	response		4847578	2					
ANR	4847600	Identifier	response		4847578	0					
ANR	4847601	CompoundStatement		6:62:181:181	4847578	1					
ANR	4847602	Statement	dprintf	233:2:7748:7754	4847578	0	True				
ANR	4847603	Statement	(	233:9:7755:7755	4847578	1	True				
ANR	4847604	Statement	D_ALWAYS	233:10:7756:7763	4847578	2	True				
ANR	4847605	Statement	","	233:18:7764:7764	4847578	3	True				
ANR	4847606	Statement	"""track_family_via_login: """	234:10:7776:7801	4847578	4	True				
ANR	4847607	Statement	"""ProcD communication error\\n"""	235:14:7817:7845	4847578	5	True				
ANR	4847608	Statement	)	235:43:7846:7846	4847578	6	True				
ANR	4847609	ExpressionStatement		235:44:7847:7847	4847578	7	True				
ANR	4847610	ReturnStatement	return false ;	236:2:7851:7863	4847578	8	True				
ANR	4847611	Identifier	false		4847578	0					
ANR	4847612	ReturnStatement	return response ;	238:1:7869:7884	4847578	2	True				
ANR	4847613	Identifier	response		4847578	0					
ANR	4847614	ReturnType	bool		4847578	1					
ANR	4847615	Identifier	ProcFamilyProxy :: track_family_via_login		4847578	2					
ANR	4847616	ParameterList	"pid_t pid , const char * login"		4847578	3					
ANR	4847617	Parameter	pid_t pid	226:40:7532:7540	4847578	0	True				
ANR	4847618	ParameterType	pid_t		4847578	0					
ANR	4847619	Identifier	pid		4847578	1					
ANR	4847620	Parameter	const char * login	226:51:7543:7559	4847578	1	True				
ANR	4847621	ParameterType	const char *		4847578	0					
ANR	4847622	Identifier	login		4847578	1					
ANR	4847623	CFGEntryNode	ENTRY		4847578		True				
ANR	4847624	CFGExitNode	EXIT		4847578		True				
ANR	4847625	Symbol	response		4847578						
ANR	4847626	Symbol	false		4847578						
ANR	4847627	Symbol	pid		4847578						
ANR	4847628	Symbol	login		4847578						
ANR	4847629	Symbol	m_client -> track_family_via_login		4847578						
ANR	4847630	Symbol	* m_client		4847578						
ANR	4847631	Symbol	m_client		4847578						
ANR	4847632	Function	ProcFamilyProxy :: track_family_via_allocated_supplementary_group	242:0:7908:8483							
ANR	4847633	FunctionDef	"ProcFamilyProxy :: track_family_via_allocated_supplementary_group (pid_t pid , gid_t & gid)"		4847632	0					
ANR	4847634	CompoundStatement		244:0:8000:8483	4847632	0					
ANR	4847635	IdentifierDeclStatement	bool response ;	248:1:8106:8119	4847632	0	True				
ANR	4847636	IdentifierDecl	response		4847632	0					
ANR	4847637	IdentifierDeclType	bool		4847632	0					
ANR	4847638	Identifier	response		4847632	1					
ANR	4847639	IfStatement	"if ( ! m_client -> track_family_via_allocated_supplementary_group ( pid , response , gid ) )"		4847632	1					
ANR	4847640	Condition	"! m_client -> track_family_via_allocated_supplementary_group ( pid , response , gid )"	249:5:8126:8314	4847632	0	True				
ANR	4847641	UnaryOperationExpression	"! m_client -> track_family_via_allocated_supplementary_group ( pid , response , gid )"		4847632	0					
ANR	4847642	UnaryOperator	!		4847632	0					
ANR	4847643	CallExpression	"m_client -> track_family_via_allocated_supplementary_group ( pid , response , gid )"		4847632	1					
ANR	4847644	Callee	m_client -> track_family_via_allocated_supplementary_group		4847632	0					
ANR	4847645	PtrMemberAccess	m_client -> track_family_via_allocated_supplementary_group		4847632	0					
ANR	4847646	Identifier	m_client		4847632	0					
ANR	4847647	Identifier	track_family_via_allocated_supplementary_group		4847632	1					
ANR	4847648	ArgumentList	pid		4847632	1					
ANR	4847649	Argument	pid		4847632	0					
ANR	4847650	Identifier	pid		4847632	0					
ANR	4847651	Argument	response		4847632	1					
ANR	4847652	Identifier	response		4847632	0					
ANR	4847653	Argument	gid		4847632	2					
ANR	4847654	Identifier	gid		4847632	0					
ANR	4847655	CompoundStatement		8:62:316:316	4847632	1					
ANR	4847656	Statement	dprintf	252:2:8321:8327	4847632	0	True				
ANR	4847657	Statement	(	252:9:8328:8328	4847632	1	True				
ANR	4847658	Statement	D_ALWAYS	252:10:8329:8336	4847632	2	True				
ANR	4847659	Statement	","	252:18:8337:8337	4847632	3	True				
ANR	4847660	Statement	"""track_family_via_allocated_supplementary_group: """	253:10:8349:8398	4847632	4	True				
ANR	4847661	Statement	"""ProcD communication error\\n"""	254:14:8414:8442	4847632	5	True				
ANR	4847662	Statement	)	254:43:8443:8443	4847632	6	True				
ANR	4847663	ExpressionStatement		254:44:8444:8444	4847632	7	True				
ANR	4847664	ReturnStatement	return false ;	255:2:8448:8460	4847632	8	True				
ANR	4847665	Identifier	false		4847632	0					
ANR	4847666	ReturnStatement	return response ;	257:1:8466:8481	4847632	2	True				
ANR	4847667	Identifier	response		4847632	0					
ANR	4847668	ReturnType	bool		4847632	1					
ANR	4847669	Identifier	ProcFamilyProxy :: track_family_via_allocated_supplementary_group		4847632	2					
ANR	4847670	ParameterList	"pid_t pid , gid_t & gid"		4847632	3					
ANR	4847671	Parameter	pid_t pid	243:64:7977:7985	4847632	0	True				
ANR	4847672	ParameterType	pid_t		4847632	0					
ANR	4847673	Identifier	pid		4847632	1					
ANR	4847674	Parameter	gid_t & gid	243:75:7988:7997	4847632	1	True				
ANR	4847675	ParameterType	gid_t &		4847632	0					
ANR	4847676	Identifier	gid		4847632	1					
ANR	4847677	CFGEntryNode	ENTRY		4847632		True				
ANR	4847678	CFGExitNode	EXIT		4847632		True				
ANR	4847679	Symbol	gid		4847632						
ANR	4847680	Symbol	response		4847632						
ANR	4847681	Symbol	false		4847632						
ANR	4847682	Symbol	pid		4847632						
ANR	4847683	Symbol	m_client -> track_family_via_allocated_supplementary_group		4847632						
ANR	4847684	Symbol	m_client		4847632						
ANR	4847685	Symbol	* m_client		4847632						
ANR	4847686	Function	ProcFamilyProxy :: track_family_via_cgroup	262:0:8525:8902							
ANR	4847687	FunctionDef	"ProcFamilyProxy :: track_family_via_cgroup (pid_t pid , const char * cgroup)"		4847686	0					
ANR	4847688	CompoundStatement		264:0:8602:8902	4847686	0					
ANR	4847689	IdentifierDeclStatement	bool response ;	265:1:8605:8618	4847686	0	True				
ANR	4847690	IdentifierDecl	response		4847686	0					
ANR	4847691	IdentifierDeclType	bool		4847686	0					
ANR	4847692	Identifier	response		4847686	1					
ANR	4847693	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""track_family_via_cgroup: Tracking PID %u via cgroup %s.\\n"" , pid , cgroup )"	266:1:8621:8717	4847686	1	True				
ANR	4847694	CallExpression	"dprintf ( D_FULLDEBUG , ""track_family_via_cgroup: Tracking PID %u via cgroup %s.\\n"" , pid , cgroup )"		4847686	0					
ANR	4847695	Callee	dprintf		4847686	0					
ANR	4847696	Identifier	dprintf		4847686	0					
ANR	4847697	ArgumentList	D_FULLDEBUG		4847686	1					
ANR	4847698	Argument	D_FULLDEBUG		4847686	0					
ANR	4847699	Identifier	D_FULLDEBUG		4847686	0					
ANR	4847700	Argument	"""track_family_via_cgroup: Tracking PID %u via cgroup %s.\\n"""		4847686	1					
ANR	4847701	PrimaryExpression	"""track_family_via_cgroup: Tracking PID %u via cgroup %s.\\n"""		4847686	0					
ANR	4847702	Argument	pid		4847686	2					
ANR	4847703	Identifier	pid		4847686	0					
ANR	4847704	Argument	cgroup		4847686	3					
ANR	4847705	Identifier	cgroup		4847686	0					
ANR	4847706	IfStatement	"if ( ! m_client -> track_family_via_cgroup ( pid , cgroup , response ) )"		4847686	2					
ANR	4847707	Condition	"! m_client -> track_family_via_cgroup ( pid , cgroup , response )"	268:5:8724:8780	4847686	0	True				
ANR	4847708	UnaryOperationExpression	"! m_client -> track_family_via_cgroup ( pid , cgroup , response )"		4847686	0					
ANR	4847709	UnaryOperator	!		4847686	0					
ANR	4847710	CallExpression	"m_client -> track_family_via_cgroup ( pid , cgroup , response )"		4847686	1					
ANR	4847711	Callee	m_client -> track_family_via_cgroup		4847686	0					
ANR	4847712	PtrMemberAccess	m_client -> track_family_via_cgroup		4847686	0					
ANR	4847713	Identifier	m_client		4847686	0					
ANR	4847714	Identifier	track_family_via_cgroup		4847686	1					
ANR	4847715	ArgumentList	pid		4847686	1					
ANR	4847716	Argument	pid		4847686	0					
ANR	4847717	Identifier	pid		4847686	0					
ANR	4847718	Argument	cgroup		4847686	1					
ANR	4847719	Identifier	cgroup		4847686	0					
ANR	4847720	Argument	response		4847686	2					
ANR	4847721	Identifier	response		4847686	0					
ANR	4847722	CompoundStatement		5:64:180:180	4847686	1					
ANR	4847723	ExpressionStatement	"dprintf ( D_ALWAYS , ""track_family_via_cgroup: ProcD communication error\\n"" )"	269:2:8787:8863	4847686	0	True				
ANR	4847724	CallExpression	"dprintf ( D_ALWAYS , ""track_family_via_cgroup: ProcD communication error\\n"" )"		4847686	0					
ANR	4847725	Callee	dprintf		4847686	0					
ANR	4847726	Identifier	dprintf		4847686	0					
ANR	4847727	ArgumentList	D_ALWAYS		4847686	1					
ANR	4847728	Argument	D_ALWAYS		4847686	0					
ANR	4847729	Identifier	D_ALWAYS		4847686	0					
ANR	4847730	Argument	"""track_family_via_cgroup: ProcD communication error\\n"""		4847686	1					
ANR	4847731	PrimaryExpression	"""track_family_via_cgroup: ProcD communication error\\n"""		4847686	0					
ANR	4847732	ReturnStatement	return false ;	271:2:8867:8879	4847686	1	True				
ANR	4847733	Identifier	false		4847686	0					
ANR	4847734	ReturnStatement	return response ;	273:1:8885:8900	4847686	3	True				
ANR	4847735	Identifier	response		4847686	0					
ANR	4847736	ReturnType	bool		4847686	1					
ANR	4847737	Identifier	ProcFamilyProxy :: track_family_via_cgroup		4847686	2					
ANR	4847738	ParameterList	"pid_t pid , const char * cgroup"		4847686	3					
ANR	4847739	Parameter	pid_t pid	263:41:8571:8579	4847686	0	True				
ANR	4847740	ParameterType	pid_t		4847686	0					
ANR	4847741	Identifier	pid		4847686	1					
ANR	4847742	Parameter	const char * cgroup	263:52:8582:8599	4847686	1	True				
ANR	4847743	ParameterType	const char *		4847686	0					
ANR	4847744	Identifier	cgroup		4847686	1					
ANR	4847745	CFGEntryNode	ENTRY		4847686		True				
ANR	4847746	CFGExitNode	EXIT		4847686		True				
ANR	4847747	Symbol	m_client -> track_family_via_cgroup		4847686						
ANR	4847748	Symbol	response		4847686						
ANR	4847749	Symbol	D_ALWAYS		4847686						
ANR	4847750	Symbol	false		4847686						
ANR	4847751	Symbol	pid		4847686						
ANR	4847752	Symbol	D_FULLDEBUG		4847686						
ANR	4847753	Symbol	cgroup		4847686						
ANR	4847754	Symbol	m_client		4847686						
ANR	4847755	Symbol	* m_client		4847686						
ANR	4847756	DeclStmt									
ANR	4847757	Decl							bool	bool	response
ANR	4847758	Function	ProcFamilyProxy :: signal_process	288:0:9174:9425							
ANR	4847759	FunctionDef	"ProcFamilyProxy :: signal_process (pid_t pid , int sig)"		4847758	0					
ANR	4847760	CompoundStatement		290:0:9231:9425	4847758	0					
ANR	4847761	IdentifierDeclStatement	bool response ;	291:1:9234:9247	4847758	0	True				
ANR	4847762	IdentifierDecl	response		4847758	0					
ANR	4847763	IdentifierDeclType	bool		4847758	0					
ANR	4847764	Identifier	response		4847758	1					
ANR	4847765	WhileStatement	"while ( ! m_client -> signal_process ( pid , sig , response ) )"		4847758	1					
ANR	4847766	Condition	"! m_client -> signal_process ( pid , sig , response )"	292:8:9257:9301	4847758	0	True				
ANR	4847767	UnaryOperationExpression	"! m_client -> signal_process ( pid , sig , response )"		4847758	0					
ANR	4847768	UnaryOperator	!		4847758	0					
ANR	4847769	CallExpression	"m_client -> signal_process ( pid , sig , response )"		4847758	1					
ANR	4847770	Callee	m_client -> signal_process		4847758	0					
ANR	4847771	PtrMemberAccess	m_client -> signal_process		4847758	0					
ANR	4847772	Identifier	m_client		4847758	0					
ANR	4847773	Identifier	signal_process		4847758	1					
ANR	4847774	ArgumentList	pid		4847758	1					
ANR	4847775	Argument	pid		4847758	0					
ANR	4847776	Identifier	pid		4847758	0					
ANR	4847777	Argument	sig		4847758	1					
ANR	4847778	Identifier	sig		4847758	0					
ANR	4847779	Argument	response		4847758	2					
ANR	4847780	Identifier	response		4847758	0					
ANR	4847781	CompoundStatement		3:55:72:72	4847758	1					
ANR	4847782	ExpressionStatement	"dprintf ( D_ALWAYS , ""signal_process: ProcD communication error\\n"" )"	293:2:9308:9372	4847758	0	True				
ANR	4847783	CallExpression	"dprintf ( D_ALWAYS , ""signal_process: ProcD communication error\\n"" )"		4847758	0					
ANR	4847784	Callee	dprintf		4847758	0					
ANR	4847785	Identifier	dprintf		4847758	0					
ANR	4847786	ArgumentList	D_ALWAYS		4847758	1					
ANR	4847787	Argument	D_ALWAYS		4847758	0					
ANR	4847788	Identifier	D_ALWAYS		4847758	0					
ANR	4847789	Argument	"""signal_process: ProcD communication error\\n"""		4847758	1					
ANR	4847790	PrimaryExpression	"""signal_process: ProcD communication error\\n"""		4847758	0					
ANR	4847791	ExpressionStatement	recover_from_procd_error ( )	294:2:9376:9402	4847758	1	True				
ANR	4847792	CallExpression	recover_from_procd_error ( )		4847758	0					
ANR	4847793	Callee	recover_from_procd_error		4847758	0					
ANR	4847794	Identifier	recover_from_procd_error		4847758	0					
ANR	4847795	ArgumentList			4847758	1					
ANR	4847796	ReturnStatement	return response ;	296:1:9408:9423	4847758	2	True				
ANR	4847797	Identifier	response		4847758	0					
ANR	4847798	ReturnType	bool		4847758	1					
ANR	4847799	Identifier	ProcFamilyProxy :: signal_process		4847758	2					
ANR	4847800	ParameterList	"pid_t pid , int sig"		4847758	3					
ANR	4847801	Parameter	pid_t pid	289:32:9211:9219	4847758	0	True				
ANR	4847802	ParameterType	pid_t		4847758	0					
ANR	4847803	Identifier	pid		4847758	1					
ANR	4847804	Parameter	int sig	289:43:9222:9228	4847758	1	True				
ANR	4847805	ParameterType	int		4847758	0					
ANR	4847806	Identifier	sig		4847758	1					
ANR	4847807	CFGEntryNode	ENTRY		4847758		True				
ANR	4847808	CFGExitNode	EXIT		4847758		True				
ANR	4847809	Symbol	sig		4847758						
ANR	4847810	Symbol	response		4847758						
ANR	4847811	Symbol	m_client -> signal_process		4847758						
ANR	4847812	Symbol	D_ALWAYS		4847758						
ANR	4847813	Symbol	pid		4847758						
ANR	4847814	Symbol	m_client		4847758						
ANR	4847815	Symbol	* m_client		4847758						
ANR	4847816	Function	ProcFamilyProxy :: kill_family	299:0:9428:9656							
ANR	4847817	FunctionDef	ProcFamilyProxy :: kill_family (pid_t pid)		4847816	0					
ANR	4847818	CompoundStatement		301:0:9473:9656	4847816	0					
ANR	4847819	IdentifierDeclStatement	bool response ;	302:1:9476:9489	4847816	0	True				
ANR	4847820	IdentifierDecl	response		4847816	0					
ANR	4847821	IdentifierDeclType	bool		4847816	0					
ANR	4847822	Identifier	response		4847816	1					
ANR	4847823	WhileStatement	"while ( ! m_client -> kill_family ( pid , response ) )"		4847816	1					
ANR	4847824	Condition	"! m_client -> kill_family ( pid , response )"	303:8:9499:9535	4847816	0	True				
ANR	4847825	UnaryOperationExpression	"! m_client -> kill_family ( pid , response )"		4847816	0					
ANR	4847826	UnaryOperator	!		4847816	0					
ANR	4847827	CallExpression	"m_client -> kill_family ( pid , response )"		4847816	1					
ANR	4847828	Callee	m_client -> kill_family		4847816	0					
ANR	4847829	PtrMemberAccess	m_client -> kill_family		4847816	0					
ANR	4847830	Identifier	m_client		4847816	0					
ANR	4847831	Identifier	kill_family		4847816	1					
ANR	4847832	ArgumentList	pid		4847816	1					
ANR	4847833	Argument	pid		4847816	0					
ANR	4847834	Identifier	pid		4847816	0					
ANR	4847835	Argument	response		4847816	1					
ANR	4847836	Identifier	response		4847816	0					
ANR	4847837	CompoundStatement		3:47:64:64	4847816	1					
ANR	4847838	ExpressionStatement	"dprintf ( D_ALWAYS , ""kill_family: ProcD communication error\\n"" )"	304:2:9542:9603	4847816	0	True				
ANR	4847839	CallExpression	"dprintf ( D_ALWAYS , ""kill_family: ProcD communication error\\n"" )"		4847816	0					
ANR	4847840	Callee	dprintf		4847816	0					
ANR	4847841	Identifier	dprintf		4847816	0					
ANR	4847842	ArgumentList	D_ALWAYS		4847816	1					
ANR	4847843	Argument	D_ALWAYS		4847816	0					
ANR	4847844	Identifier	D_ALWAYS		4847816	0					
ANR	4847845	Argument	"""kill_family: ProcD communication error\\n"""		4847816	1					
ANR	4847846	PrimaryExpression	"""kill_family: ProcD communication error\\n"""		4847816	0					
ANR	4847847	ExpressionStatement	recover_from_procd_error ( )	305:2:9607:9633	4847816	1	True				
ANR	4847848	CallExpression	recover_from_procd_error ( )		4847816	0					
ANR	4847849	Callee	recover_from_procd_error		4847816	0					
ANR	4847850	Identifier	recover_from_procd_error		4847816	0					
ANR	4847851	ArgumentList			4847816	1					
ANR	4847852	ReturnStatement	return response ;	307:1:9639:9654	4847816	2	True				
ANR	4847853	Identifier	response		4847816	0					
ANR	4847854	ReturnType	bool		4847816	1					
ANR	4847855	Identifier	ProcFamilyProxy :: kill_family		4847816	2					
ANR	4847856	ParameterList	pid_t pid		4847816	3					
ANR	4847857	Parameter	pid_t pid	300:29:9462:9470	4847816	0	True				
ANR	4847858	ParameterType	pid_t		4847816	0					
ANR	4847859	Identifier	pid		4847816	1					
ANR	4847860	CFGEntryNode	ENTRY		4847816		True				
ANR	4847861	CFGExitNode	EXIT		4847816		True				
ANR	4847862	Symbol	m_client -> kill_family		4847816						
ANR	4847863	Symbol	response		4847816						
ANR	4847864	Symbol	D_ALWAYS		4847816						
ANR	4847865	Symbol	pid		4847816						
ANR	4847866	Symbol	* m_client		4847816						
ANR	4847867	Symbol	m_client		4847816						
ANR	4847868	Function	ProcFamilyProxy :: suspend_family	310:0:9659:9896							
ANR	4847869	FunctionDef	ProcFamilyProxy :: suspend_family (pid_t pid)		4847868	0					
ANR	4847870	CompoundStatement		312:0:9707:9896	4847868	0					
ANR	4847871	IdentifierDeclStatement	bool response ;	313:1:9710:9723	4847868	0	True				
ANR	4847872	IdentifierDecl	response		4847868	0					
ANR	4847873	IdentifierDeclType	bool		4847868	0					
ANR	4847874	Identifier	response		4847868	1					
ANR	4847875	WhileStatement	"while ( ! m_client -> suspend_family ( pid , response ) )"		4847868	1					
ANR	4847876	Condition	"! m_client -> suspend_family ( pid , response )"	314:8:9733:9772	4847868	0	True				
ANR	4847877	UnaryOperationExpression	"! m_client -> suspend_family ( pid , response )"		4847868	0					
ANR	4847878	UnaryOperator	!		4847868	0					
ANR	4847879	CallExpression	"m_client -> suspend_family ( pid , response )"		4847868	1					
ANR	4847880	Callee	m_client -> suspend_family		4847868	0					
ANR	4847881	PtrMemberAccess	m_client -> suspend_family		4847868	0					
ANR	4847882	Identifier	m_client		4847868	0					
ANR	4847883	Identifier	suspend_family		4847868	1					
ANR	4847884	ArgumentList	pid		4847868	1					
ANR	4847885	Argument	pid		4847868	0					
ANR	4847886	Identifier	pid		4847868	0					
ANR	4847887	Argument	response		4847868	1					
ANR	4847888	Identifier	response		4847868	0					
ANR	4847889	CompoundStatement		3:50:67:67	4847868	1					
ANR	4847890	ExpressionStatement	"dprintf ( D_ALWAYS , ""suspend_family: ProcD communication error\\n"" )"	315:2:9779:9843	4847868	0	True				
ANR	4847891	CallExpression	"dprintf ( D_ALWAYS , ""suspend_family: ProcD communication error\\n"" )"		4847868	0					
ANR	4847892	Callee	dprintf		4847868	0					
ANR	4847893	Identifier	dprintf		4847868	0					
ANR	4847894	ArgumentList	D_ALWAYS		4847868	1					
ANR	4847895	Argument	D_ALWAYS		4847868	0					
ANR	4847896	Identifier	D_ALWAYS		4847868	0					
ANR	4847897	Argument	"""suspend_family: ProcD communication error\\n"""		4847868	1					
ANR	4847898	PrimaryExpression	"""suspend_family: ProcD communication error\\n"""		4847868	0					
ANR	4847899	ExpressionStatement	recover_from_procd_error ( )	316:2:9847:9873	4847868	1	True				
ANR	4847900	CallExpression	recover_from_procd_error ( )		4847868	0					
ANR	4847901	Callee	recover_from_procd_error		4847868	0					
ANR	4847902	Identifier	recover_from_procd_error		4847868	0					
ANR	4847903	ArgumentList			4847868	1					
ANR	4847904	ReturnStatement	return response ;	318:1:9879:9894	4847868	2	True				
ANR	4847905	Identifier	response		4847868	0					
ANR	4847906	ReturnType	bool		4847868	1					
ANR	4847907	Identifier	ProcFamilyProxy :: suspend_family		4847868	2					
ANR	4847908	ParameterList	pid_t pid		4847868	3					
ANR	4847909	Parameter	pid_t pid	311:32:9696:9704	4847868	0	True				
ANR	4847910	ParameterType	pid_t		4847868	0					
ANR	4847911	Identifier	pid		4847868	1					
ANR	4847912	CFGEntryNode	ENTRY		4847868		True				
ANR	4847913	CFGExitNode	EXIT		4847868		True				
ANR	4847914	Symbol	response		4847868						
ANR	4847915	Symbol	m_client -> suspend_family		4847868						
ANR	4847916	Symbol	D_ALWAYS		4847868						
ANR	4847917	Symbol	pid		4847868						
ANR	4847918	Symbol	m_client		4847868						
ANR	4847919	Symbol	* m_client		4847868						
ANR	4847920	Function	ProcFamilyProxy :: continue_family	321:0:9899:10136							
ANR	4847921	FunctionDef	ProcFamilyProxy :: continue_family (pid_t pid)		4847920	0					
ANR	4847922	CompoundStatement		323:0:9948:10136	4847920	0					
ANR	4847923	IdentifierDeclStatement	bool response ;	324:1:9951:9964	4847920	0	True				
ANR	4847924	IdentifierDecl	response		4847920	0					
ANR	4847925	IdentifierDeclType	bool		4847920	0					
ANR	4847926	Identifier	response		4847920	1					
ANR	4847927	IfStatement	"if ( ! m_client -> continue_family ( pid , response ) )"		4847920	1					
ANR	4847928	Condition	"! m_client -> continue_family ( pid , response )"	325:5:9971:10011	4847920	0	True				
ANR	4847929	UnaryOperationExpression	"! m_client -> continue_family ( pid , response )"		4847920	0					
ANR	4847930	UnaryOperator	!		4847920	0					
ANR	4847931	CallExpression	"m_client -> continue_family ( pid , response )"		4847920	1					
ANR	4847932	Callee	m_client -> continue_family		4847920	0					
ANR	4847933	PtrMemberAccess	m_client -> continue_family		4847920	0					
ANR	4847934	Identifier	m_client		4847920	0					
ANR	4847935	Identifier	continue_family		4847920	1					
ANR	4847936	ArgumentList	pid		4847920	1					
ANR	4847937	Argument	pid		4847920	0					
ANR	4847938	Identifier	pid		4847920	0					
ANR	4847939	Argument	response		4847920	1					
ANR	4847940	Identifier	response		4847920	0					
ANR	4847941	CompoundStatement		3:48:65:65	4847920	1					
ANR	4847942	ExpressionStatement	"dprintf ( D_ALWAYS , ""continue_family: ProcD communication error\\n"" )"	326:2:10018:10083	4847920	0	True				
ANR	4847943	CallExpression	"dprintf ( D_ALWAYS , ""continue_family: ProcD communication error\\n"" )"		4847920	0					
ANR	4847944	Callee	dprintf		4847920	0					
ANR	4847945	Identifier	dprintf		4847920	0					
ANR	4847946	ArgumentList	D_ALWAYS		4847920	1					
ANR	4847947	Argument	D_ALWAYS		4847920	0					
ANR	4847948	Identifier	D_ALWAYS		4847920	0					
ANR	4847949	Argument	"""continue_family: ProcD communication error\\n"""		4847920	1					
ANR	4847950	PrimaryExpression	"""continue_family: ProcD communication error\\n"""		4847920	0					
ANR	4847951	ExpressionStatement	recover_from_procd_error ( )	327:2:10087:10113	4847920	1	True				
ANR	4847952	CallExpression	recover_from_procd_error ( )		4847920	0					
ANR	4847953	Callee	recover_from_procd_error		4847920	0					
ANR	4847954	Identifier	recover_from_procd_error		4847920	0					
ANR	4847955	ArgumentList			4847920	1					
ANR	4847956	ReturnStatement	return response ;	329:1:10119:10134	4847920	2	True				
ANR	4847957	Identifier	response		4847920	0					
ANR	4847958	ReturnType	bool		4847920	1					
ANR	4847959	Identifier	ProcFamilyProxy :: continue_family		4847920	2					
ANR	4847960	ParameterList	pid_t pid		4847920	3					
ANR	4847961	Parameter	pid_t pid	322:33:9937:9945	4847920	0	True				
ANR	4847962	ParameterType	pid_t		4847920	0					
ANR	4847963	Identifier	pid		4847920	1					
ANR	4847964	CFGEntryNode	ENTRY		4847920		True				
ANR	4847965	CFGExitNode	EXIT		4847920		True				
ANR	4847966	Symbol	response		4847920						
ANR	4847967	Symbol	D_ALWAYS		4847920						
ANR	4847968	Symbol	pid		4847920						
ANR	4847969	Symbol	m_client -> continue_family		4847920						
ANR	4847970	Symbol	m_client		4847920						
ANR	4847971	Symbol	* m_client		4847920						
ANR	4847972	Function	ProcFamilyProxy :: unregister_family	332:0:10139:10385							
ANR	4847973	FunctionDef	ProcFamilyProxy :: unregister_family (pid_t pid)		4847972	0					
ANR	4847974	CompoundStatement		334:0:10190:10385	4847972	0					
ANR	4847975	IdentifierDeclStatement	bool response ;	335:1:10193:10206	4847972	0	True				
ANR	4847976	IdentifierDecl	response		4847972	0					
ANR	4847977	IdentifierDeclType	bool		4847972	0					
ANR	4847978	Identifier	response		4847972	1					
ANR	4847979	IfStatement	"if ( ! m_client -> unregister_family ( pid , response ) )"		4847972	1					
ANR	4847980	Condition	"! m_client -> unregister_family ( pid , response )"	336:5:10213:10255	4847972	0	True				
ANR	4847981	UnaryOperationExpression	"! m_client -> unregister_family ( pid , response )"		4847972	0					
ANR	4847982	UnaryOperator	!		4847972	0					
ANR	4847983	CallExpression	"m_client -> unregister_family ( pid , response )"		4847972	1					
ANR	4847984	Callee	m_client -> unregister_family		4847972	0					
ANR	4847985	PtrMemberAccess	m_client -> unregister_family		4847972	0					
ANR	4847986	Identifier	m_client		4847972	0					
ANR	4847987	Identifier	unregister_family		4847972	1					
ANR	4847988	ArgumentList	pid		4847972	1					
ANR	4847989	Argument	pid		4847972	0					
ANR	4847990	Identifier	pid		4847972	0					
ANR	4847991	Argument	response		4847972	1					
ANR	4847992	Identifier	response		4847972	0					
ANR	4847993	CompoundStatement		3:50:67:67	4847972	1					
ANR	4847994	ExpressionStatement	"dprintf ( D_ALWAYS , ""unregister_subfamily: ProcD communication error\\n"" )"	337:2:10262:10332	4847972	0	True				
ANR	4847995	CallExpression	"dprintf ( D_ALWAYS , ""unregister_subfamily: ProcD communication error\\n"" )"		4847972	0					
ANR	4847996	Callee	dprintf		4847972	0					
ANR	4847997	Identifier	dprintf		4847972	0					
ANR	4847998	ArgumentList	D_ALWAYS		4847972	1					
ANR	4847999	Argument	D_ALWAYS		4847972	0					
ANR	4848000	Identifier	D_ALWAYS		4847972	0					
ANR	4848001	Argument	"""unregister_subfamily: ProcD communication error\\n"""		4847972	1					
ANR	4848002	PrimaryExpression	"""unregister_subfamily: ProcD communication error\\n"""		4847972	0					
ANR	4848003	ExpressionStatement	recover_from_procd_error ( )	338:2:10336:10362	4847972	1	True				
ANR	4848004	CallExpression	recover_from_procd_error ( )		4847972	0					
ANR	4848005	Callee	recover_from_procd_error		4847972	0					
ANR	4848006	Identifier	recover_from_procd_error		4847972	0					
ANR	4848007	ArgumentList			4847972	1					
ANR	4848008	ReturnStatement	return response ;	340:1:10368:10383	4847972	2	True				
ANR	4848009	Identifier	response		4847972	0					
ANR	4848010	ReturnType	bool		4847972	1					
ANR	4848011	Identifier	ProcFamilyProxy :: unregister_family		4847972	2					
ANR	4848012	ParameterList	pid_t pid		4847972	3					
ANR	4848013	Parameter	pid_t pid	333:35:10179:10187	4847972	0	True				
ANR	4848014	ParameterType	pid_t		4847972	0					
ANR	4848015	Identifier	pid		4847972	1					
ANR	4848016	CFGEntryNode	ENTRY		4847972		True				
ANR	4848017	CFGExitNode	EXIT		4847972		True				
ANR	4848018	Symbol	response		4847972						
ANR	4848019	Symbol	D_ALWAYS		4847972						
ANR	4848020	Symbol	pid		4847972						
ANR	4848021	Symbol	m_client -> unregister_family		4847972						
ANR	4848022	Symbol	m_client		4847972						
ANR	4848023	Symbol	* m_client		4847972						
ANR	4848024	Function	ProcFamilyProxy :: use_glexec_for_family	343:0:10388:10757							
ANR	4848025	FunctionDef	"ProcFamilyProxy :: use_glexec_for_family (pid_t pid , const char * proxy)"		4848024	0					
ANR	4848026	CompoundStatement		345:0:10462:10757	4848024	0					
ANR	4848027	IdentifierDeclStatement	bool response ;	349:1:10567:10580	4848024	0	True				
ANR	4848028	IdentifierDecl	response		4848024	0					
ANR	4848029	IdentifierDeclType	bool		4848024	0					
ANR	4848030	Identifier	response		4848024	1					
ANR	4848031	IfStatement	"if ( ! m_client -> use_glexec_for_family ( pid , proxy , response ) )"		4848024	1					
ANR	4848032	Condition	"! m_client -> use_glexec_for_family ( pid , proxy , response )"	350:5:10587:10640	4848024	0	True				
ANR	4848033	UnaryOperationExpression	"! m_client -> use_glexec_for_family ( pid , proxy , response )"		4848024	0					
ANR	4848034	UnaryOperator	!		4848024	0					
ANR	4848035	CallExpression	"m_client -> use_glexec_for_family ( pid , proxy , response )"		4848024	1					
ANR	4848036	Callee	m_client -> use_glexec_for_family		4848024	0					
ANR	4848037	PtrMemberAccess	m_client -> use_glexec_for_family		4848024	0					
ANR	4848038	Identifier	m_client		4848024	0					
ANR	4848039	Identifier	use_glexec_for_family		4848024	1					
ANR	4848040	ArgumentList	pid		4848024	1					
ANR	4848041	Argument	pid		4848024	0					
ANR	4848042	Identifier	pid		4848024	0					
ANR	4848043	Argument	proxy		4848024	1					
ANR	4848044	Identifier	proxy		4848024	0					
ANR	4848045	Argument	response		4848024	2					
ANR	4848046	Identifier	response		4848024	0					
ANR	4848047	CompoundStatement		6:61:180:180	4848024	1					
ANR	4848048	ExpressionStatement	"dprintf ( D_ALWAYS , ""use_glexec_for_family: ProcD communication error\\n"" )"	351:2:10647:10718	4848024	0	True				
ANR	4848049	CallExpression	"dprintf ( D_ALWAYS , ""use_glexec_for_family: ProcD communication error\\n"" )"		4848024	0					
ANR	4848050	Callee	dprintf		4848024	0					
ANR	4848051	Identifier	dprintf		4848024	0					
ANR	4848052	ArgumentList	D_ALWAYS		4848024	1					
ANR	4848053	Argument	D_ALWAYS		4848024	0					
ANR	4848054	Identifier	D_ALWAYS		4848024	0					
ANR	4848055	Argument	"""use_glexec_for_family: ProcD communication error\\n"""		4848024	1					
ANR	4848056	PrimaryExpression	"""use_glexec_for_family: ProcD communication error\\n"""		4848024	0					
ANR	4848057	ReturnStatement	return false ;	352:2:10722:10734	4848024	1	True				
ANR	4848058	Identifier	false		4848024	0					
ANR	4848059	ReturnStatement	return response ;	354:1:10740:10755	4848024	2	True				
ANR	4848060	Identifier	response		4848024	0					
ANR	4848061	ReturnType	bool		4848024	1					
ANR	4848062	Identifier	ProcFamilyProxy :: use_glexec_for_family		4848024	2					
ANR	4848063	ParameterList	"pid_t pid , const char * proxy"		4848024	3					
ANR	4848064	Parameter	pid_t pid	344:39:10432:10440	4848024	0	True				
ANR	4848065	ParameterType	pid_t		4848024	0					
ANR	4848066	Identifier	pid		4848024	1					
ANR	4848067	Parameter	const char * proxy	344:50:10443:10459	4848024	1	True				
ANR	4848068	ParameterType	const char *		4848024	0					
ANR	4848069	Identifier	proxy		4848024	1					
ANR	4848070	CFGEntryNode	ENTRY		4848024		True				
ANR	4848071	CFGExitNode	EXIT		4848024		True				
ANR	4848072	Symbol	proxy		4848024						
ANR	4848073	Symbol	response		4848024						
ANR	4848074	Symbol	D_ALWAYS		4848024						
ANR	4848075	Symbol	false		4848024						
ANR	4848076	Symbol	m_client -> use_glexec_for_family		4848024						
ANR	4848077	Symbol	pid		4848024						
ANR	4848078	Symbol	m_client		4848024						
ANR	4848079	Symbol	* m_client		4848024						
ANR	4848080	Function	ProcFamilyProxy :: start_procd	357:0:10760:17421							
ANR	4848081	FunctionDef	ProcFamilyProxy :: start_procd ()		4848080	0					
ANR	4848082	CompoundStatement		359:0:10796:17421	4848080	0					
ANR	4848083	ExpressionStatement	ASSERT ( m_procd_pid == - 1 )	362:1:10834:10859	4848080	0	True				
ANR	4848084	CallExpression	ASSERT ( m_procd_pid == - 1 )		4848080	0					
ANR	4848085	Callee	ASSERT		4848080	0					
ANR	4848086	Identifier	ASSERT		4848080	0					
ANR	4848087	ArgumentList	m_procd_pid == - 1		4848080	1					
ANR	4848088	Argument	m_procd_pid == - 1		4848080	0					
ANR	4848089	EqualityExpression	m_procd_pid == - 1		4848080	0		==			
ANR	4848090	Identifier	m_procd_pid		4848080	0					
ANR	4848091	UnaryOperationExpression	- 1		4848080	1					
ANR	4848092	UnaryOperator	-		4848080	0					
ANR	4848093	PrimaryExpression	1		4848080	1					
ANR	4848094	IdentifierDeclStatement	MyString exe ;	366:1:10913:10925	4848080	1	True				
ANR	4848095	IdentifierDecl	exe		4848080	0					
ANR	4848096	IdentifierDeclType	MyString		4848080	0					
ANR	4848097	Identifier	exe		4848080	1					
ANR	4848098	IdentifierDeclStatement	ArgList args ;	367:1:10928:10940	4848080	2	True				
ANR	4848099	IdentifierDecl	args		4848080	0					
ANR	4848100	IdentifierDeclType	ArgList		4848080	0					
ANR	4848101	Identifier	args		4848080	1					
ANR	4848102	IdentifierDeclStatement	"char * path = param ( ""PROCD"" ) ;"	371:1:10975:11002	4848080	3	True				
ANR	4848103	IdentifierDecl	"* path = param ( ""PROCD"" )"		4848080	0					
ANR	4848104	IdentifierDeclType	char *		4848080	0					
ANR	4848105	Identifier	path		4848080	1					
ANR	4848106	AssignmentExpression	"* path = param ( ""PROCD"" )"		4848080	2		=			
ANR	4848107	Identifier	path		4848080	0					
ANR	4848108	CallExpression	"param ( ""PROCD"" )"		4848080	1					
ANR	4848109	Callee	param		4848080	0					
ANR	4848110	Identifier	param		4848080	0					
ANR	4848111	ArgumentList	"""PROCD"""		4848080	1					
ANR	4848112	Argument	"""PROCD"""		4848080	0					
ANR	4848113	PrimaryExpression	"""PROCD"""		4848080	0					
ANR	4848114	IfStatement	if ( path == NULL )		4848080	4					
ANR	4848115	Condition	path == NULL	372:5:11009:11020	4848080	0	True				
ANR	4848116	EqualityExpression	path == NULL		4848080	0		==			
ANR	4848117	Identifier	path		4848080	0					
ANR	4848118	Identifier	NULL		4848080	1					
ANR	4848119	CompoundStatement		14:19:226:226	4848080	1					
ANR	4848120	ExpressionStatement	"dprintf ( D_ALWAYS , ""start_procd: PROCD not defined in configuration\\n"" )"	373:2:11027:11097	4848080	0	True				
ANR	4848121	CallExpression	"dprintf ( D_ALWAYS , ""start_procd: PROCD not defined in configuration\\n"" )"		4848080	0					
ANR	4848122	Callee	dprintf		4848080	0					
ANR	4848123	Identifier	dprintf		4848080	0					
ANR	4848124	ArgumentList	D_ALWAYS		4848080	1					
ANR	4848125	Argument	D_ALWAYS		4848080	0					
ANR	4848126	Identifier	D_ALWAYS		4848080	0					
ANR	4848127	Argument	"""start_procd: PROCD not defined in configuration\\n"""		4848080	1					
ANR	4848128	PrimaryExpression	"""start_procd: PROCD not defined in configuration\\n"""		4848080	0					
ANR	4848129	ReturnStatement	return false ;	374:2:11101:11113	4848080	1	True				
ANR	4848130	Identifier	false		4848080	0					
ANR	4848131	ExpressionStatement	exe = path	376:1:11119:11129	4848080	5	True				
ANR	4848132	AssignmentExpression	exe = path		4848080	0		=			
ANR	4848133	Identifier	exe		4848080	0					
ANR	4848134	Identifier	path		4848080	1					
ANR	4848135	ExpressionStatement	args . AppendArg ( condor_basename ( path ) )	377:1:11132:11169	4848080	6	True				
ANR	4848136	CallExpression	args . AppendArg ( condor_basename ( path ) )		4848080	0					
ANR	4848137	Callee	args . AppendArg		4848080	0					
ANR	4848138	MemberAccess	args . AppendArg		4848080	0					
ANR	4848139	Identifier	args		4848080	0					
ANR	4848140	Identifier	AppendArg		4848080	1					
ANR	4848141	ArgumentList	condor_basename ( path )		4848080	1					
ANR	4848142	Argument	condor_basename ( path )		4848080	0					
ANR	4848143	CallExpression	condor_basename ( path )		4848080	0					
ANR	4848144	Callee	condor_basename		4848080	0					
ANR	4848145	Identifier	condor_basename		4848080	0					
ANR	4848146	ArgumentList	path		4848080	1					
ANR	4848147	Argument	path		4848080	0					
ANR	4848148	Identifier	path		4848080	0					
ANR	4848149	ExpressionStatement	free ( path )	378:1:11172:11182	4848080	7	True				
ANR	4848150	CallExpression	free ( path )		4848080	0					
ANR	4848151	Callee	free		4848080	0					
ANR	4848152	Identifier	free		4848080	0					
ANR	4848153	ArgumentList	path		4848080	1					
ANR	4848154	Argument	path		4848080	0					
ANR	4848155	Identifier	path		4848080	0					
ANR	4848156	ExpressionStatement	"args . AppendArg ( ""-A"" )"	382:1:11214:11234	4848080	8	True				
ANR	4848157	CallExpression	"args . AppendArg ( ""-A"" )"		4848080	0					
ANR	4848158	Callee	args . AppendArg		4848080	0					
ANR	4848159	MemberAccess	args . AppendArg		4848080	0					
ANR	4848160	Identifier	args		4848080	0					
ANR	4848161	Identifier	AppendArg		4848080	1					
ANR	4848162	ArgumentList	"""-A"""		4848080	1					
ANR	4848163	Argument	"""-A"""		4848080	0					
ANR	4848164	PrimaryExpression	"""-A"""		4848080	0					
ANR	4848165	ExpressionStatement	args . AppendArg ( m_procd_addr )	383:1:11237:11265	4848080	9	True				
ANR	4848166	CallExpression	args . AppendArg ( m_procd_addr )		4848080	0					
ANR	4848167	Callee	args . AppendArg		4848080	0					
ANR	4848168	MemberAccess	args . AppendArg		4848080	0					
ANR	4848169	Identifier	args		4848080	0					
ANR	4848170	Identifier	AppendArg		4848080	1					
ANR	4848171	ArgumentList	m_procd_addr		4848080	1					
ANR	4848172	Argument	m_procd_addr		4848080	0					
ANR	4848173	Identifier	m_procd_addr		4848080	0					
ANR	4848174	IfStatement	if ( m_procd_log . Length ( ) > 0 )		4848080	10					
ANR	4848175	Condition	m_procd_log . Length ( ) > 0	387:5:11311:11334	4848080	0	True				
ANR	4848176	RelationalExpression	m_procd_log . Length ( ) > 0		4848080	0		>			
ANR	4848177	CallExpression	m_procd_log . Length ( )		4848080	0					
ANR	4848178	Callee	m_procd_log . Length		4848080	0					
ANR	4848179	MemberAccess	m_procd_log . Length		4848080	0					
ANR	4848180	Identifier	m_procd_log		4848080	0					
ANR	4848181	Identifier	Length		4848080	1					
ANR	4848182	ArgumentList			4848080	1					
ANR	4848183	PrimaryExpression	0		4848080	1					
ANR	4848184	CompoundStatement		29:31:540:540	4848080	1					
ANR	4848185	ExpressionStatement	"args . AppendArg ( ""-L"" )"	388:2:11341:11361	4848080	0	True				
ANR	4848186	CallExpression	"args . AppendArg ( ""-L"" )"		4848080	0					
ANR	4848187	Callee	args . AppendArg		4848080	0					
ANR	4848188	MemberAccess	args . AppendArg		4848080	0					
ANR	4848189	Identifier	args		4848080	0					
ANR	4848190	Identifier	AppendArg		4848080	1					
ANR	4848191	ArgumentList	"""-L"""		4848080	1					
ANR	4848192	Argument	"""-L"""		4848080	0					
ANR	4848193	PrimaryExpression	"""-L"""		4848080	0					
ANR	4848194	ExpressionStatement	args . AppendArg ( m_procd_log )	389:2:11365:11392	4848080	1	True				
ANR	4848195	CallExpression	args . AppendArg ( m_procd_log )		4848080	0					
ANR	4848196	Callee	args . AppendArg		4848080	0					
ANR	4848197	MemberAccess	args . AppendArg		4848080	0					
ANR	4848198	Identifier	args		4848080	0					
ANR	4848199	Identifier	AppendArg		4848080	1					
ANR	4848200	ArgumentList	m_procd_log		4848080	1					
ANR	4848201	Argument	m_procd_log		4848080	0					
ANR	4848202	Identifier	m_procd_log		4848080	0					
ANR	4848203	IdentifierDeclStatement	"char * procd_log_size = param ( ""MAX_PROCD_LOG"" ) ;"	394:1:11443:11488	4848080	11	True				
ANR	4848204	IdentifierDecl	"* procd_log_size = param ( ""MAX_PROCD_LOG"" )"		4848080	0					
ANR	4848205	IdentifierDeclType	char *		4848080	0					
ANR	4848206	Identifier	procd_log_size		4848080	1					
ANR	4848207	AssignmentExpression	"* procd_log_size = param ( ""MAX_PROCD_LOG"" )"		4848080	2		=			
ANR	4848208	Identifier	procd_log_size		4848080	0					
ANR	4848209	CallExpression	"param ( ""MAX_PROCD_LOG"" )"		4848080	1					
ANR	4848210	Callee	param		4848080	0					
ANR	4848211	Identifier	param		4848080	0					
ANR	4848212	ArgumentList	"""MAX_PROCD_LOG"""		4848080	1					
ANR	4848213	Argument	"""MAX_PROCD_LOG"""		4848080	0					
ANR	4848214	PrimaryExpression	"""MAX_PROCD_LOG"""		4848080	0					
ANR	4848215	IfStatement	if ( procd_log_size != NULL )		4848080	12					
ANR	4848216	Condition	procd_log_size != NULL	395:5:11495:11516	4848080	0	True				
ANR	4848217	EqualityExpression	procd_log_size != NULL		4848080	0		!=			
ANR	4848218	Identifier	procd_log_size		4848080	0					
ANR	4848219	Identifier	NULL		4848080	1					
ANR	4848220	CompoundStatement		37:29:722:722	4848080	1					
ANR	4848221	ExpressionStatement	"args . AppendArg ( ""-R"" )"	396:2:11523:11543	4848080	0	True				
ANR	4848222	CallExpression	"args . AppendArg ( ""-R"" )"		4848080	0					
ANR	4848223	Callee	args . AppendArg		4848080	0					
ANR	4848224	MemberAccess	args . AppendArg		4848080	0					
ANR	4848225	Identifier	args		4848080	0					
ANR	4848226	Identifier	AppendArg		4848080	1					
ANR	4848227	ArgumentList	"""-R"""		4848080	1					
ANR	4848228	Argument	"""-R"""		4848080	0					
ANR	4848229	PrimaryExpression	"""-R"""		4848080	0					
ANR	4848230	ExpressionStatement	args . AppendArg ( procd_log_size )	397:2:11547:11577	4848080	1	True				
ANR	4848231	CallExpression	args . AppendArg ( procd_log_size )		4848080	0					
ANR	4848232	Callee	args . AppendArg		4848080	0					
ANR	4848233	MemberAccess	args . AppendArg		4848080	0					
ANR	4848234	Identifier	args		4848080	0					
ANR	4848235	Identifier	AppendArg		4848080	1					
ANR	4848236	ArgumentList	procd_log_size		4848080	1					
ANR	4848237	Argument	procd_log_size		4848080	0					
ANR	4848238	Identifier	procd_log_size		4848080	0					
ANR	4848239	ExpressionStatement	free ( procd_log_size )	398:2:11581:11601	4848080	2	True				
ANR	4848240	CallExpression	free ( procd_log_size )		4848080	0					
ANR	4848241	Callee	free		4848080	0					
ANR	4848242	Identifier	free		4848080	0					
ANR	4848243	ArgumentList	procd_log_size		4848080	1					
ANR	4848244	Argument	procd_log_size		4848080	0					
ANR	4848245	Identifier	procd_log_size		4848080	0					
ANR	4848246	IdentifierDeclStatement	"char * max_snapshot_interval = param ( ""PROCD_MAX_SNAPSHOT_INTERVAL"" ) ;"	404:1:11703:11769	4848080	13	True				
ANR	4848247	IdentifierDecl	"* max_snapshot_interval = param ( ""PROCD_MAX_SNAPSHOT_INTERVAL"" )"		4848080	0					
ANR	4848248	IdentifierDeclType	char *		4848080	0					
ANR	4848249	Identifier	max_snapshot_interval		4848080	1					
ANR	4848250	AssignmentExpression	"* max_snapshot_interval = param ( ""PROCD_MAX_SNAPSHOT_INTERVAL"" )"		4848080	2		=			
ANR	4848251	Identifier	max_snapshot_interval		4848080	0					
ANR	4848252	CallExpression	"param ( ""PROCD_MAX_SNAPSHOT_INTERVAL"" )"		4848080	1					
ANR	4848253	Callee	param		4848080	0					
ANR	4848254	Identifier	param		4848080	0					
ANR	4848255	ArgumentList	"""PROCD_MAX_SNAPSHOT_INTERVAL"""		4848080	1					
ANR	4848256	Argument	"""PROCD_MAX_SNAPSHOT_INTERVAL"""		4848080	0					
ANR	4848257	PrimaryExpression	"""PROCD_MAX_SNAPSHOT_INTERVAL"""		4848080	0					
ANR	4848258	IfStatement	if ( max_snapshot_interval != NULL )		4848080	14					
ANR	4848259	Condition	max_snapshot_interval != NULL	405:5:11776:11804	4848080	0	True				
ANR	4848260	EqualityExpression	max_snapshot_interval != NULL		4848080	0		!=			
ANR	4848261	Identifier	max_snapshot_interval		4848080	0					
ANR	4848262	Identifier	NULL		4848080	1					
ANR	4848263	CompoundStatement		47:36:1010:1010	4848080	1					
ANR	4848264	ExpressionStatement	"args . AppendArg ( ""-S"" )"	406:2:11811:11831	4848080	0	True				
ANR	4848265	CallExpression	"args . AppendArg ( ""-S"" )"		4848080	0					
ANR	4848266	Callee	args . AppendArg		4848080	0					
ANR	4848267	MemberAccess	args . AppendArg		4848080	0					
ANR	4848268	Identifier	args		4848080	0					
ANR	4848269	Identifier	AppendArg		4848080	1					
ANR	4848270	ArgumentList	"""-S"""		4848080	1					
ANR	4848271	Argument	"""-S"""		4848080	0					
ANR	4848272	PrimaryExpression	"""-S"""		4848080	0					
ANR	4848273	ExpressionStatement	args . AppendArg ( max_snapshot_interval )	407:2:11835:11872	4848080	1	True				
ANR	4848274	CallExpression	args . AppendArg ( max_snapshot_interval )		4848080	0					
ANR	4848275	Callee	args . AppendArg		4848080	0					
ANR	4848276	MemberAccess	args . AppendArg		4848080	0					
ANR	4848277	Identifier	args		4848080	0					
ANR	4848278	Identifier	AppendArg		4848080	1					
ANR	4848279	ArgumentList	max_snapshot_interval		4848080	1					
ANR	4848280	Argument	max_snapshot_interval		4848080	0					
ANR	4848281	Identifier	max_snapshot_interval		4848080	0					
ANR	4848282	ExpressionStatement	free ( max_snapshot_interval )	408:2:11876:11903	4848080	2	True				
ANR	4848283	CallExpression	free ( max_snapshot_interval )		4848080	0					
ANR	4848284	Callee	free		4848080	0					
ANR	4848285	Identifier	free		4848080	0					
ANR	4848286	ArgumentList	max_snapshot_interval		4848080	1					
ANR	4848287	Argument	max_snapshot_interval		4848080	0					
ANR	4848288	Identifier	max_snapshot_interval		4848080	0					
ANR	4848289	IdentifierDeclStatement	"bool debug = param_boolean ( ""PROCD_DEBUG"" , false ) ;"	414:1:11990:12038	4848080	15	True				
ANR	4848290	IdentifierDecl	"debug = param_boolean ( ""PROCD_DEBUG"" , false )"		4848080	0					
ANR	4848291	IdentifierDeclType	bool		4848080	0					
ANR	4848292	Identifier	debug		4848080	1					
ANR	4848293	AssignmentExpression	"debug = param_boolean ( ""PROCD_DEBUG"" , false )"		4848080	2		=			
ANR	4848294	Identifier	debug		4848080	0					
ANR	4848295	CallExpression	"param_boolean ( ""PROCD_DEBUG"" , false )"		4848080	1					
ANR	4848296	Callee	param_boolean		4848080	0					
ANR	4848297	Identifier	param_boolean		4848080	0					
ANR	4848298	ArgumentList	"""PROCD_DEBUG"""		4848080	1					
ANR	4848299	Argument	"""PROCD_DEBUG"""		4848080	0					
ANR	4848300	PrimaryExpression	"""PROCD_DEBUG"""		4848080	0					
ANR	4848301	Argument	false		4848080	1					
ANR	4848302	Identifier	false		4848080	0					
ANR	4848303	IfStatement	if ( debug )		4848080	16					
ANR	4848304	Condition	debug	415:5:12045:12049	4848080	0	True				
ANR	4848305	Identifier	debug		4848080	0					
ANR	4848306	CompoundStatement		57:12:1255:1255	4848080	1					
ANR	4848307	ExpressionStatement	"args . AppendArg ( ""-D"" )"	416:2:12056:12076	4848080	0	True				
ANR	4848308	CallExpression	"args . AppendArg ( ""-D"" )"		4848080	0					
ANR	4848309	Callee	args . AppendArg		4848080	0					
ANR	4848310	MemberAccess	args . AppendArg		4848080	0					
ANR	4848311	Identifier	args		4848080	0					
ANR	4848312	Identifier	AppendArg		4848080	1					
ANR	4848313	ArgumentList	"""-D"""		4848080	1					
ANR	4848314	Argument	"""-D"""		4848080	0					
ANR	4848315	PrimaryExpression	"""-D"""		4848080	0					
ANR	4848316	ExpressionStatement	"args . AppendArg ( ""-C"" )"	423:1:12192:12212	4848080	17	True				
ANR	4848317	CallExpression	"args . AppendArg ( ""-C"" )"		4848080	0					
ANR	4848318	Callee	args . AppendArg		4848080	0					
ANR	4848319	MemberAccess	args . AppendArg		4848080	0					
ANR	4848320	Identifier	args		4848080	0					
ANR	4848321	Identifier	AppendArg		4848080	1					
ANR	4848322	ArgumentList	"""-C"""		4848080	1					
ANR	4848323	Argument	"""-C"""		4848080	0					
ANR	4848324	PrimaryExpression	"""-C"""		4848080	0					
ANR	4848325	ExpressionStatement	args . AppendArg ( get_condor_uid ( ) )	424:1:12215:12247	4848080	18	True				
ANR	4848326	CallExpression	args . AppendArg ( get_condor_uid ( ) )		4848080	0					
ANR	4848327	Callee	args . AppendArg		4848080	0					
ANR	4848328	MemberAccess	args . AppendArg		4848080	0					
ANR	4848329	Identifier	args		4848080	0					
ANR	4848330	Identifier	AppendArg		4848080	1					
ANR	4848331	ArgumentList	get_condor_uid ( )		4848080	1					
ANR	4848332	Argument	get_condor_uid ( )		4848080	0					
ANR	4848333	CallExpression	get_condor_uid ( )		4848080	0					
ANR	4848334	Callee	get_condor_uid		4848080	0					
ANR	4848335	Identifier	get_condor_uid		4848080	0					
ANR	4848336	ArgumentList			4848080	1					
ANR	4848337	IdentifierDeclStatement	"char * softkill_path = param ( ""WINDOWS_SOFTKILL"" ) ;"	431:1:12365:12412	4848080	19	True				
ANR	4848338	IdentifierDecl	"* softkill_path = param ( ""WINDOWS_SOFTKILL"" )"		4848080	0					
ANR	4848339	IdentifierDeclType	char *		4848080	0					
ANR	4848340	Identifier	softkill_path		4848080	1					
ANR	4848341	AssignmentExpression	"* softkill_path = param ( ""WINDOWS_SOFTKILL"" )"		4848080	2		=			
ANR	4848342	Identifier	softkill_path		4848080	0					
ANR	4848343	CallExpression	"param ( ""WINDOWS_SOFTKILL"" )"		4848080	1					
ANR	4848344	Callee	param		4848080	0					
ANR	4848345	Identifier	param		4848080	0					
ANR	4848346	ArgumentList	"""WINDOWS_SOFTKILL"""		4848080	1					
ANR	4848347	Argument	"""WINDOWS_SOFTKILL"""		4848080	0					
ANR	4848348	PrimaryExpression	"""WINDOWS_SOFTKILL"""		4848080	0					
ANR	4848349	IfStatement	if ( softkill_path == NULL )		4848080	20					
ANR	4848350	Condition	softkill_path == NULL	432:6:12420:12440	4848080	0	True				
ANR	4848351	EqualityExpression	softkill_path == NULL		4848080	0		==			
ANR	4848352	Identifier	softkill_path		4848080	0					
ANR	4848353	Identifier	NULL		4848080	1					
ANR	4848354	CompoundStatement		74:30:1647:1647	4848080	1					
ANR	4848355	Statement	dprintf	433:2:12448:12454	4848080	0	True				
ANR	4848356	Statement	(	433:9:12455:12455	4848080	1	True				
ANR	4848357	Statement	D_ALWAYS	433:10:12456:12463	4848080	2	True				
ANR	4848358	Statement	","	433:18:12464:12464	4848080	3	True				
ANR	4848359	Statement	"""WINDOWS_SOFTKILL undefined; """	434:10:12476:12505	4848080	4	True				
ANR	4848360	Statement	"""ProcD won't be able to send WM_CLOSE to jobs\\n"""	435:11:12518:12565	4848080	5	True				
ANR	4848361	Statement	)	435:59:12566:12566	4848080	6	True				
ANR	4848362	ExpressionStatement		435:60:12567:12567	4848080	7	True				
ANR	4848363	ElseStatement	else		4848080	0					
ANR	4848364	CompoundStatement		79:6:1781:1781	4848080	0					
ANR	4848365	ExpressionStatement	"args . AppendArg ( ""-K"" )"	438:2:12582:12602	4848080	0	True				
ANR	4848366	CallExpression	"args . AppendArg ( ""-K"" )"		4848080	0					
ANR	4848367	Callee	args . AppendArg		4848080	0					
ANR	4848368	MemberAccess	args . AppendArg		4848080	0					
ANR	4848369	Identifier	args		4848080	0					
ANR	4848370	Identifier	AppendArg		4848080	1					
ANR	4848371	ArgumentList	"""-K"""		4848080	1					
ANR	4848372	Argument	"""-K"""		4848080	0					
ANR	4848373	PrimaryExpression	"""-K"""		4848080	0					
ANR	4848374	ExpressionStatement	args . AppendArg ( softkill_path )	439:2:12606:12635	4848080	1	True				
ANR	4848375	CallExpression	args . AppendArg ( softkill_path )		4848080	0					
ANR	4848376	Callee	args . AppendArg		4848080	0					
ANR	4848377	MemberAccess	args . AppendArg		4848080	0					
ANR	4848378	Identifier	args		4848080	0					
ANR	4848379	Identifier	AppendArg		4848080	1					
ANR	4848380	ArgumentList	softkill_path		4848080	1					
ANR	4848381	Argument	softkill_path		4848080	0					
ANR	4848382	Identifier	softkill_path		4848080	0					
ANR	4848383	ExpressionStatement	free ( softkill_path )	440:2:12639:12658	4848080	2	True				
ANR	4848384	CallExpression	free ( softkill_path )		4848080	0					
ANR	4848385	Callee	free		4848080	0					
ANR	4848386	Identifier	free		4848080	0					
ANR	4848387	ArgumentList	softkill_path		4848080	1					
ANR	4848388	Argument	softkill_path		4848080	0					
ANR	4848389	Identifier	softkill_path		4848080	0					
ANR	4848390	IfStatement	"if ( param_boolean ( ""USE_GID_PROCESS_TRACKING"" , false ) )"		4848080	21					
ANR	4848391	Condition	"param_boolean ( ""USE_GID_PROCESS_TRACKING"" , false )"	448:5:12783:12830	4848080	0	True				
ANR	4848392	CallExpression	"param_boolean ( ""USE_GID_PROCESS_TRACKING"" , false )"		4848080	0					
ANR	4848393	Callee	param_boolean		4848080	0					
ANR	4848394	Identifier	param_boolean		4848080	0					
ANR	4848395	ArgumentList	"""USE_GID_PROCESS_TRACKING"""		4848080	1					
ANR	4848396	Argument	"""USE_GID_PROCESS_TRACKING"""		4848080	0					
ANR	4848397	PrimaryExpression	"""USE_GID_PROCESS_TRACKING"""		4848080	0					
ANR	4848398	Argument	false		4848080	1					
ANR	4848399	Identifier	false		4848080	0					
ANR	4848400	CompoundStatement		102:2:2483:2542	4848080	1					
ANR	4848401	IfStatement	if ( ! can_switch_ids ( ) && ! privsep_enabled ( ) )		4848080	0					
ANR	4848402	Condition	! can_switch_ids ( ) && ! privsep_enabled ( )	449:6:12841:12879	4848080	0	True				
ANR	4848403	AndExpression	! can_switch_ids ( ) && ! privsep_enabled ( )		4848080	0		&&			
ANR	4848404	UnaryOperationExpression	! can_switch_ids ( )		4848080	0					
ANR	4848405	UnaryOperator	!		4848080	0					
ANR	4848406	CallExpression	can_switch_ids ( )		4848080	1					
ANR	4848407	Callee	can_switch_ids		4848080	0					
ANR	4848408	Identifier	can_switch_ids		4848080	0					
ANR	4848409	ArgumentList			4848080	1					
ANR	4848410	UnaryOperationExpression	! privsep_enabled ( )		4848080	1					
ANR	4848411	UnaryOperator	!		4848080	0					
ANR	4848412	CallExpression	privsep_enabled ( )		4848080	1					
ANR	4848413	Callee	privsep_enabled		4848080	0					
ANR	4848414	Identifier	privsep_enabled		4848080	0					
ANR	4848415	ArgumentList			4848080	1					
ANR	4848416	CompoundStatement		91:47:2085:2085	4848080	1					
ANR	4848417	Statement	EXCEPT	450:3:12887:12892	4848080	0	True				
ANR	4848418	Statement	(	450:9:12893:12893	4848080	1	True				
ANR	4848419	Statement	"""USE_GID_PROCESS_TRACKING enabled, but can't modify """	450:10:12894:12946	4848080	2	True				
ANR	4848420	Statement	"""the group list of our children unless running as """	451:14:12962:13012	4848080	3	True				
ANR	4848421	Statement	"""root or using PrivSep"""	452:14:13028:13050	4848080	4	True				
ANR	4848422	Statement	)	452:37:13051:13051	4848080	5	True				
ANR	4848423	ExpressionStatement		452:38:13052:13052	4848080	6	True				
ANR	4848424	IdentifierDeclStatement	"int min_tracking_gid = param_integer ( ""MIN_TRACKING_GID"" , 0 ) ;"	454:2:13060:13119	4848080	1	True				
ANR	4848425	IdentifierDecl	"min_tracking_gid = param_integer ( ""MIN_TRACKING_GID"" , 0 )"		4848080	0					
ANR	4848426	IdentifierDeclType	int		4848080	0					
ANR	4848427	Identifier	min_tracking_gid		4848080	1					
ANR	4848428	AssignmentExpression	"min_tracking_gid = param_integer ( ""MIN_TRACKING_GID"" , 0 )"		4848080	2		=			
ANR	4848429	Identifier	min_tracking_gid		4848080	0					
ANR	4848430	CallExpression	"param_integer ( ""MIN_TRACKING_GID"" , 0 )"		4848080	1					
ANR	4848431	Callee	param_integer		4848080	0					
ANR	4848432	Identifier	param_integer		4848080	0					
ANR	4848433	ArgumentList	"""MIN_TRACKING_GID"""		4848080	1					
ANR	4848434	Argument	"""MIN_TRACKING_GID"""		4848080	0					
ANR	4848435	PrimaryExpression	"""MIN_TRACKING_GID"""		4848080	0					
ANR	4848436	Argument	0		4848080	1					
ANR	4848437	PrimaryExpression	0		4848080	0					
ANR	4848438	IfStatement	if ( min_tracking_gid == 0 )		4848080	2					
ANR	4848439	Condition	min_tracking_gid == 0	455:6:13127:13147	4848080	0	True				
ANR	4848440	EqualityExpression	min_tracking_gid == 0		4848080	0		==			
ANR	4848441	Identifier	min_tracking_gid		4848080	0					
ANR	4848442	PrimaryExpression	0		4848080	1					
ANR	4848443	CompoundStatement		97:29:2353:2353	4848080	1					
ANR	4848444	Statement	EXCEPT	456:3:13155:13160	4848080	0	True				
ANR	4848445	Statement	(	456:9:13161:13161	4848080	1	True				
ANR	4848446	Statement	"""USE_GID_PROCESS_TRACKING enabled, """	456:10:13162:13197	4848080	2	True				
ANR	4848447	Statement	"""but MIN_TRACKING_GID is %d\\n"""	457:14:13213:13242	4848080	3	True				
ANR	4848448	Statement	","	457:44:13243:13243	4848080	4	True				
ANR	4848449	Statement	min_tracking_gid	458:10:13255:13270	4848080	5	True				
ANR	4848450	Statement	)	458:26:13271:13271	4848080	6	True				
ANR	4848451	ExpressionStatement		458:27:13272:13272	4848080	7	True				
ANR	4848452	IdentifierDeclStatement	"int max_tracking_gid = param_integer ( ""MAX_TRACKING_GID"" , 0 ) ;"	460:2:13280:13339	4848080	3	True				
ANR	4848453	IdentifierDecl	"max_tracking_gid = param_integer ( ""MAX_TRACKING_GID"" , 0 )"		4848080	0					
ANR	4848454	IdentifierDeclType	int		4848080	0					
ANR	4848455	Identifier	max_tracking_gid		4848080	1					
ANR	4848456	AssignmentExpression	"max_tracking_gid = param_integer ( ""MAX_TRACKING_GID"" , 0 )"		4848080	2		=			
ANR	4848457	Identifier	max_tracking_gid		4848080	0					
ANR	4848458	CallExpression	"param_integer ( ""MAX_TRACKING_GID"" , 0 )"		4848080	1					
ANR	4848459	Callee	param_integer		4848080	0					
ANR	4848460	Identifier	param_integer		4848080	0					
ANR	4848461	ArgumentList	"""MAX_TRACKING_GID"""		4848080	1					
ANR	4848462	Argument	"""MAX_TRACKING_GID"""		4848080	0					
ANR	4848463	PrimaryExpression	"""MAX_TRACKING_GID"""		4848080	0					
ANR	4848464	Argument	0		4848080	1					
ANR	4848465	PrimaryExpression	0		4848080	0					
ANR	4848466	IfStatement	if ( max_tracking_gid == 0 )		4848080	4					
ANR	4848467	Condition	max_tracking_gid == 0	461:6:13347:13367	4848080	0	True				
ANR	4848468	EqualityExpression	max_tracking_gid == 0		4848080	0		==			
ANR	4848469	Identifier	max_tracking_gid		4848080	0					
ANR	4848470	PrimaryExpression	0		4848080	1					
ANR	4848471	CompoundStatement		103:29:2573:2573	4848080	1					
ANR	4848472	Statement	EXCEPT	462:3:13375:13380	4848080	0	True				
ANR	4848473	Statement	(	462:9:13381:13381	4848080	1	True				
ANR	4848474	Statement	"""USE_GID_PROCESS_TRACKING enabled, """	462:10:13382:13417	4848080	2	True				
ANR	4848475	Statement	"""but MAX_TRACKING_GID is %d\\n"""	463:14:13433:13462	4848080	3	True				
ANR	4848476	Statement	","	463:44:13463:13463	4848080	4	True				
ANR	4848477	Statement	max_tracking_gid	464:10:13475:13490	4848080	5	True				
ANR	4848478	Statement	)	464:26:13491:13491	4848080	6	True				
ANR	4848479	ExpressionStatement		464:27:13492:13492	4848080	7	True				
ANR	4848480	IfStatement	if ( min_tracking_gid > max_tracking_gid )		4848080	5					
ANR	4848481	Condition	min_tracking_gid > max_tracking_gid	466:6:13504:13538	4848080	0	True				
ANR	4848482	RelationalExpression	min_tracking_gid > max_tracking_gid		4848080	0		>			
ANR	4848483	Identifier	min_tracking_gid		4848080	0					
ANR	4848484	Identifier	max_tracking_gid		4848080	1					
ANR	4848485	CompoundStatement		108:43:2744:2744	4848080	1					
ANR	4848486	ExpressionStatement	"EXCEPT ( ""invalid tracking gid range: %d - %d\\n"" , min_tracking_gid , max_tracking_gid )"	467:3:13546:13649	4848080	0	True				
ANR	4848487	CallExpression	"EXCEPT ( ""invalid tracking gid range: %d - %d\\n"" , min_tracking_gid , max_tracking_gid )"		4848080	0					
ANR	4848488	Callee	EXCEPT		4848080	0					
ANR	4848489	Identifier	EXCEPT		4848080	0					
ANR	4848490	ArgumentList	"""invalid tracking gid range: %d - %d\\n"""		4848080	1					
ANR	4848491	Argument	"""invalid tracking gid range: %d - %d\\n"""		4848080	0					
ANR	4848492	PrimaryExpression	"""invalid tracking gid range: %d - %d\\n"""		4848080	0					
ANR	4848493	Argument	min_tracking_gid		4848080	1					
ANR	4848494	Identifier	min_tracking_gid		4848080	0					
ANR	4848495	Argument	max_tracking_gid		4848080	2					
ANR	4848496	Identifier	max_tracking_gid		4848080	0					
ANR	4848497	ExpressionStatement	"args . AppendArg ( ""-G"" )"	471:2:13657:13677	4848080	6	True				
ANR	4848498	CallExpression	"args . AppendArg ( ""-G"" )"		4848080	0					
ANR	4848499	Callee	args . AppendArg		4848080	0					
ANR	4848500	MemberAccess	args . AppendArg		4848080	0					
ANR	4848501	Identifier	args		4848080	0					
ANR	4848502	Identifier	AppendArg		4848080	1					
ANR	4848503	ArgumentList	"""-G"""		4848080	1					
ANR	4848504	Argument	"""-G"""		4848080	0					
ANR	4848505	PrimaryExpression	"""-G"""		4848080	0					
ANR	4848506	ExpressionStatement	args . AppendArg ( min_tracking_gid )	472:2:13681:13713	4848080	7	True				
ANR	4848507	CallExpression	args . AppendArg ( min_tracking_gid )		4848080	0					
ANR	4848508	Callee	args . AppendArg		4848080	0					
ANR	4848509	MemberAccess	args . AppendArg		4848080	0					
ANR	4848510	Identifier	args		4848080	0					
ANR	4848511	Identifier	AppendArg		4848080	1					
ANR	4848512	ArgumentList	min_tracking_gid		4848080	1					
ANR	4848513	Argument	min_tracking_gid		4848080	0					
ANR	4848514	Identifier	min_tracking_gid		4848080	0					
ANR	4848515	ExpressionStatement	args . AppendArg ( max_tracking_gid )	473:2:13717:13749	4848080	8	True				
ANR	4848516	CallExpression	args . AppendArg ( max_tracking_gid )		4848080	0					
ANR	4848517	Callee	args . AppendArg		4848080	0					
ANR	4848518	MemberAccess	args . AppendArg		4848080	0					
ANR	4848519	Identifier	args		4848080	0					
ANR	4848520	Identifier	AppendArg		4848080	1					
ANR	4848521	ArgumentList	max_tracking_gid		4848080	1					
ANR	4848522	Argument	max_tracking_gid		4848080	0					
ANR	4848523	Identifier	max_tracking_gid		4848080	0					
ANR	4848524	IfStatement	"if ( param_boolean ( ""GLEXEC_JOB"" , false ) )"		4848080	22					
ANR	4848525	Condition	"param_boolean ( ""GLEXEC_JOB"" , false )"	480:5:13886:13919	4848080	0	True				
ANR	4848526	CallExpression	"param_boolean ( ""GLEXEC_JOB"" , false )"		4848080	0					
ANR	4848527	Callee	param_boolean		4848080	0					
ANR	4848528	Identifier	param_boolean		4848080	0					
ANR	4848529	ArgumentList	"""GLEXEC_JOB"""		4848080	1					
ANR	4848530	Argument	"""GLEXEC_JOB"""		4848080	0					
ANR	4848531	PrimaryExpression	"""GLEXEC_JOB"""		4848080	0					
ANR	4848532	Argument	false		4848080	1					
ANR	4848533	Identifier	false		4848080	0					
ANR	4848534	CompoundStatement		132:2:3419:3449	4848080	1					
ANR	4848535	ExpressionStatement	"args . AppendArg ( ""-I"" )"	481:2:13926:13946	4848080	0	True				
ANR	4848536	CallExpression	"args . AppendArg ( ""-I"" )"		4848080	0					
ANR	4848537	Callee	args . AppendArg		4848080	0					
ANR	4848538	MemberAccess	args . AppendArg		4848080	0					
ANR	4848539	Identifier	args		4848080	0					
ANR	4848540	Identifier	AppendArg		4848080	1					
ANR	4848541	ArgumentList	"""-I"""		4848080	1					
ANR	4848542	Argument	"""-I"""		4848080	0					
ANR	4848543	PrimaryExpression	"""-I"""		4848080	0					
ANR	4848544	IdentifierDeclStatement	"char * libexec = param ( ""LIBEXEC"" ) ;"	482:2:13950:13982	4848080	1	True				
ANR	4848545	IdentifierDecl	"* libexec = param ( ""LIBEXEC"" )"		4848080	0					
ANR	4848546	IdentifierDeclType	char *		4848080	0					
ANR	4848547	Identifier	libexec		4848080	1					
ANR	4848548	AssignmentExpression	"* libexec = param ( ""LIBEXEC"" )"		4848080	2		=			
ANR	4848549	Identifier	libexec		4848080	0					
ANR	4848550	CallExpression	"param ( ""LIBEXEC"" )"		4848080	1					
ANR	4848551	Callee	param		4848080	0					
ANR	4848552	Identifier	param		4848080	0					
ANR	4848553	ArgumentList	"""LIBEXEC"""		4848080	1					
ANR	4848554	Argument	"""LIBEXEC"""		4848080	0					
ANR	4848555	PrimaryExpression	"""LIBEXEC"""		4848080	0					
ANR	4848556	IfStatement	if ( libexec == NULL )		4848080	2					
ANR	4848557	Condition	libexec == NULL	483:6:13990:14004	4848080	0	True				
ANR	4848558	EqualityExpression	libexec == NULL		4848080	0		==			
ANR	4848559	Identifier	libexec		4848080	0					
ANR	4848560	Identifier	NULL		4848080	1					
ANR	4848561	CompoundStatement		125:23:3210:3210	4848080	1					
ANR	4848562	ExpressionStatement	"EXCEPT ( ""GLEXEC_JOB is defined, but LIBEXEC not configured"" )"	484:3:14012:14071	4848080	0	True				
ANR	4848563	CallExpression	"EXCEPT ( ""GLEXEC_JOB is defined, but LIBEXEC not configured"" )"		4848080	0					
ANR	4848564	Callee	EXCEPT		4848080	0					
ANR	4848565	Identifier	EXCEPT		4848080	0					
ANR	4848566	ArgumentList	"""GLEXEC_JOB is defined, but LIBEXEC not configured"""		4848080	1					
ANR	4848567	Argument	"""GLEXEC_JOB is defined, but LIBEXEC not configured"""		4848080	0					
ANR	4848568	PrimaryExpression	"""GLEXEC_JOB is defined, but LIBEXEC not configured"""		4848080	0					
ANR	4848569	IdentifierDeclStatement	MyString glexec_kill ;	486:2:14079:14099	4848080	3	True				
ANR	4848570	IdentifierDecl	glexec_kill		4848080	0					
ANR	4848571	IdentifierDeclType	MyString		4848080	0					
ANR	4848572	Identifier	glexec_kill		4848080	1					
ANR	4848573	ExpressionStatement	"glexec_kill . sprintf ( ""%s/condor_glexec_kill"" , libexec )"	487:2:14103:14156	4848080	4	True				
ANR	4848574	CallExpression	"glexec_kill . sprintf ( ""%s/condor_glexec_kill"" , libexec )"		4848080	0					
ANR	4848575	Callee	glexec_kill . sprintf		4848080	0					
ANR	4848576	MemberAccess	glexec_kill . sprintf		4848080	0					
ANR	4848577	Identifier	glexec_kill		4848080	0					
ANR	4848578	Identifier	sprintf		4848080	1					
ANR	4848579	ArgumentList	"""%s/condor_glexec_kill"""		4848080	1					
ANR	4848580	Argument	"""%s/condor_glexec_kill"""		4848080	0					
ANR	4848581	PrimaryExpression	"""%s/condor_glexec_kill"""		4848080	0					
ANR	4848582	Argument	libexec		4848080	1					
ANR	4848583	Identifier	libexec		4848080	0					
ANR	4848584	ExpressionStatement	free ( libexec )	488:2:14160:14173	4848080	5	True				
ANR	4848585	CallExpression	free ( libexec )		4848080	0					
ANR	4848586	Callee	free		4848080	0					
ANR	4848587	Identifier	free		4848080	0					
ANR	4848588	ArgumentList	libexec		4848080	1					
ANR	4848589	Argument	libexec		4848080	0					
ANR	4848590	Identifier	libexec		4848080	0					
ANR	4848591	ExpressionStatement	args . AppendArg ( glexec_kill . Value ( ) )	489:2:14177:14212	4848080	6	True				
ANR	4848592	CallExpression	args . AppendArg ( glexec_kill . Value ( ) )		4848080	0					
ANR	4848593	Callee	args . AppendArg		4848080	0					
ANR	4848594	MemberAccess	args . AppendArg		4848080	0					
ANR	4848595	Identifier	args		4848080	0					
ANR	4848596	Identifier	AppendArg		4848080	1					
ANR	4848597	ArgumentList	glexec_kill . Value ( )		4848080	1					
ANR	4848598	Argument	glexec_kill . Value ( )		4848080	0					
ANR	4848599	CallExpression	glexec_kill . Value ( )		4848080	0					
ANR	4848600	Callee	glexec_kill . Value		4848080	0					
ANR	4848601	MemberAccess	glexec_kill . Value		4848080	0					
ANR	4848602	Identifier	glexec_kill		4848080	0					
ANR	4848603	Identifier	Value		4848080	1					
ANR	4848604	ArgumentList			4848080	1					
ANR	4848605	IdentifierDeclStatement	"char * glexec = param ( ""GLEXEC"" ) ;"	490:2:14216:14246	4848080	7	True				
ANR	4848606	IdentifierDecl	"* glexec = param ( ""GLEXEC"" )"		4848080	0					
ANR	4848607	IdentifierDeclType	char *		4848080	0					
ANR	4848608	Identifier	glexec		4848080	1					
ANR	4848609	AssignmentExpression	"* glexec = param ( ""GLEXEC"" )"		4848080	2		=			
ANR	4848610	Identifier	glexec		4848080	0					
ANR	4848611	CallExpression	"param ( ""GLEXEC"" )"		4848080	1					
ANR	4848612	Callee	param		4848080	0					
ANR	4848613	Identifier	param		4848080	0					
ANR	4848614	ArgumentList	"""GLEXEC"""		4848080	1					
ANR	4848615	Argument	"""GLEXEC"""		4848080	0					
ANR	4848616	PrimaryExpression	"""GLEXEC"""		4848080	0					
ANR	4848617	IfStatement	if ( glexec == NULL )		4848080	8					
ANR	4848618	Condition	glexec == NULL	491:6:14254:14267	4848080	0	True				
ANR	4848619	EqualityExpression	glexec == NULL		4848080	0		==			
ANR	4848620	Identifier	glexec		4848080	0					
ANR	4848621	Identifier	NULL		4848080	1					
ANR	4848622	CompoundStatement		133:22:3473:3473	4848080	1					
ANR	4848623	ExpressionStatement	"EXCEPT ( ""GLEXEC_JOB is defined, but GLEXEC not configured"" )"	492:3:14275:14333	4848080	0	True				
ANR	4848624	CallExpression	"EXCEPT ( ""GLEXEC_JOB is defined, but GLEXEC not configured"" )"		4848080	0					
ANR	4848625	Callee	EXCEPT		4848080	0					
ANR	4848626	Identifier	EXCEPT		4848080	0					
ANR	4848627	ArgumentList	"""GLEXEC_JOB is defined, but GLEXEC not configured"""		4848080	1					
ANR	4848628	Argument	"""GLEXEC_JOB is defined, but GLEXEC not configured"""		4848080	0					
ANR	4848629	PrimaryExpression	"""GLEXEC_JOB is defined, but GLEXEC not configured"""		4848080	0					
ANR	4848630	ExpressionStatement	args . AppendArg ( glexec )	494:2:14341:14363	4848080	9	True				
ANR	4848631	CallExpression	args . AppendArg ( glexec )		4848080	0					
ANR	4848632	Callee	args . AppendArg		4848080	0					
ANR	4848633	MemberAccess	args . AppendArg		4848080	0					
ANR	4848634	Identifier	args		4848080	0					
ANR	4848635	Identifier	AppendArg		4848080	1					
ANR	4848636	ArgumentList	glexec		4848080	1					
ANR	4848637	Argument	glexec		4848080	0					
ANR	4848638	Identifier	glexec		4848080	0					
ANR	4848639	ExpressionStatement	free ( glexec )	495:2:14367:14379	4848080	10	True				
ANR	4848640	CallExpression	free ( glexec )		4848080	0					
ANR	4848641	Callee	free		4848080	0					
ANR	4848642	Identifier	free		4848080	0					
ANR	4848643	ArgumentList	glexec		4848080	1					
ANR	4848644	Argument	glexec		4848080	0					
ANR	4848645	Identifier	glexec		4848080	0					
ANR	4848646	IfStatement	if ( m_reaper_id == FALSE )		4848080	23					
ANR	4848647	Condition	m_reaper_id == FALSE	501:5:14499:14518	4848080	0	True				
ANR	4848648	EqualityExpression	m_reaper_id == FALSE		4848080	0		==			
ANR	4848649	Identifier	m_reaper_id		4848080	0					
ANR	4848650	Identifier	FALSE		4848080	1					
ANR	4848651	CompoundStatement		143:27:3724:3724	4848080	1					
ANR	4848652	ExpressionStatement	"m_reaper_id = daemonCore -> Register_Reaper ( ""condor_procd reaper"" , ( ReaperHandlercpp ) & ProcFamilyProxyReaperHelper :: procd_reaper , ""condor_procd reaper"" , m_reaper_helper )"	502:2:14525:14707	4848080	0	True				
ANR	4848653	AssignmentExpression	"m_reaper_id = daemonCore -> Register_Reaper ( ""condor_procd reaper"" , ( ReaperHandlercpp ) & ProcFamilyProxyReaperHelper :: procd_reaper , ""condor_procd reaper"" , m_reaper_helper )"		4848080	0		=			
ANR	4848654	Identifier	m_reaper_id		4848080	0					
ANR	4848655	CallExpression	"daemonCore -> Register_Reaper ( ""condor_procd reaper"" , ( ReaperHandlercpp ) & ProcFamilyProxyReaperHelper :: procd_reaper , ""condor_procd reaper"" , m_reaper_helper )"		4848080	1					
ANR	4848656	Callee	daemonCore -> Register_Reaper		4848080	0					
ANR	4848657	PtrMemberAccess	daemonCore -> Register_Reaper		4848080	0					
ANR	4848658	Identifier	daemonCore		4848080	0					
ANR	4848659	Identifier	Register_Reaper		4848080	1					
ANR	4848660	ArgumentList	"""condor_procd reaper"""		4848080	1					
ANR	4848661	Argument	"""condor_procd reaper"""		4848080	0					
ANR	4848662	PrimaryExpression	"""condor_procd reaper"""		4848080	0					
ANR	4848663	Argument	( ReaperHandlercpp ) & ProcFamilyProxyReaperHelper :: procd_reaper		4848080	1					
ANR	4848664	CastExpression	( ReaperHandlercpp ) & ProcFamilyProxyReaperHelper :: procd_reaper		4848080	0					
ANR	4848665	CastTarget	ReaperHandlercpp		4848080	0					
ANR	4848666	UnaryOperationExpression	& ProcFamilyProxyReaperHelper :: procd_reaper		4848080	1					
ANR	4848667	UnaryOperator	&		4848080	0					
ANR	4848668	Identifier	ProcFamilyProxyReaperHelper :: procd_reaper		4848080	1					
ANR	4848669	Argument	"""condor_procd reaper"""		4848080	2					
ANR	4848670	PrimaryExpression	"""condor_procd reaper"""		4848080	0					
ANR	4848671	Argument	m_reaper_helper		4848080	3					
ANR	4848672	Identifier	m_reaper_helper		4848080	0					
ANR	4848673	IfStatement	if ( m_reaper_id == FALSE )		4848080	24					
ANR	4848674	Condition	m_reaper_id == FALSE	509:5:14717:14736	4848080	0	True				
ANR	4848675	EqualityExpression	m_reaper_id == FALSE		4848080	0		==			
ANR	4848676	Identifier	m_reaper_id		4848080	0					
ANR	4848677	Identifier	FALSE		4848080	1					
ANR	4848678	CompoundStatement		151:27:3942:3942	4848080	1					
ANR	4848679	ExpressionStatement	"dprintf ( D_ALWAYS , ""start_procd: unable to register a reaper for the procd\\n"" )"	510:2:14743:14830	4848080	0	True				
ANR	4848680	CallExpression	"dprintf ( D_ALWAYS , ""start_procd: unable to register a reaper for the procd\\n"" )"		4848080	0					
ANR	4848681	Callee	dprintf		4848080	0					
ANR	4848682	Identifier	dprintf		4848080	0					
ANR	4848683	ArgumentList	D_ALWAYS		4848080	1					
ANR	4848684	Argument	D_ALWAYS		4848080	0					
ANR	4848685	Identifier	D_ALWAYS		4848080	0					
ANR	4848686	Argument	"""start_procd: unable to register a reaper for the procd\\n"""		4848080	1					
ANR	4848687	PrimaryExpression	"""start_procd: unable to register a reaper for the procd\\n"""		4848080	0					
ANR	4848688	ReturnStatement	return false ;	512:2:14834:14846	4848080	1	True				
ANR	4848689	Identifier	false		4848080	0					
ANR	4848690	IdentifierDeclStatement	int pipe_ends [ 2 ] ;	519:1:15004:15020	4848080	25	True				
ANR	4848691	IdentifierDecl	pipe_ends [ 2 ]		4848080	0					
ANR	4848692	IdentifierDeclType	int [ 2 ]		4848080	0					
ANR	4848693	Identifier	pipe_ends		4848080	1					
ANR	4848694	PrimaryExpression	2		4848080	2					
ANR	4848695	IfStatement	if ( daemonCore -> Create_Pipe ( pipe_ends ) == FALSE )		4848080	26					
ANR	4848696	Condition	daemonCore -> Create_Pipe ( pipe_ends ) == FALSE	520:5:15027:15069	4848080	0	True				
ANR	4848697	EqualityExpression	daemonCore -> Create_Pipe ( pipe_ends ) == FALSE		4848080	0		==			
ANR	4848698	CallExpression	daemonCore -> Create_Pipe ( pipe_ends )		4848080	0					
ANR	4848699	Callee	daemonCore -> Create_Pipe		4848080	0					
ANR	4848700	PtrMemberAccess	daemonCore -> Create_Pipe		4848080	0					
ANR	4848701	Identifier	daemonCore		4848080	0					
ANR	4848702	Identifier	Create_Pipe		4848080	1					
ANR	4848703	ArgumentList	pipe_ends		4848080	1					
ANR	4848704	Argument	pipe_ends		4848080	0					
ANR	4848705	Identifier	pipe_ends		4848080	0					
ANR	4848706	Identifier	FALSE		4848080	1					
ANR	4848707	CompoundStatement		162:50:4275:4275	4848080	1					
ANR	4848708	ExpressionStatement	"dprintf ( D_ALWAYS , ""start_procd: error creating pipe for the procd\\n"" )"	521:2:15076:15145	4848080	0	True				
ANR	4848709	CallExpression	"dprintf ( D_ALWAYS , ""start_procd: error creating pipe for the procd\\n"" )"		4848080	0					
ANR	4848710	Callee	dprintf		4848080	0					
ANR	4848711	Identifier	dprintf		4848080	0					
ANR	4848712	ArgumentList	D_ALWAYS		4848080	1					
ANR	4848713	Argument	D_ALWAYS		4848080	0					
ANR	4848714	Identifier	D_ALWAYS		4848080	0					
ANR	4848715	Argument	"""start_procd: error creating pipe for the procd\\n"""		4848080	1					
ANR	4848716	PrimaryExpression	"""start_procd: error creating pipe for the procd\\n"""		4848080	0					
ANR	4848717	ReturnStatement	return false ;	522:2:15149:15161	4848080	1	True				
ANR	4848718	Identifier	false		4848080	0					
ANR	4848719	IdentifierDeclStatement	int std_io [ 3 ] ;	524:1:15167:15180	4848080	27	True				
ANR	4848720	IdentifierDecl	std_io [ 3 ]		4848080	0					
ANR	4848721	IdentifierDeclType	int [ 3 ]		4848080	0					
ANR	4848722	Identifier	std_io		4848080	1					
ANR	4848723	PrimaryExpression	3		4848080	2					
ANR	4848724	ExpressionStatement	std_io [ 0 ] = - 1	525:1:15183:15197	4848080	28	True				
ANR	4848725	AssignmentExpression	std_io [ 0 ] = - 1		4848080	0		=			
ANR	4848726	ArrayIndexing	std_io [ 0 ]		4848080	0					
ANR	4848727	Identifier	std_io		4848080	0					
ANR	4848728	PrimaryExpression	0		4848080	1					
ANR	4848729	UnaryOperationExpression	- 1		4848080	1					
ANR	4848730	UnaryOperator	-		4848080	0					
ANR	4848731	PrimaryExpression	1		4848080	1					
ANR	4848732	ExpressionStatement	std_io [ 1 ] = - 1	526:1:15200:15214	4848080	29	True				
ANR	4848733	AssignmentExpression	std_io [ 1 ] = - 1		4848080	0		=			
ANR	4848734	ArrayIndexing	std_io [ 1 ]		4848080	0					
ANR	4848735	Identifier	std_io		4848080	0					
ANR	4848736	PrimaryExpression	1		4848080	1					
ANR	4848737	UnaryOperationExpression	- 1		4848080	1					
ANR	4848738	UnaryOperator	-		4848080	0					
ANR	4848739	PrimaryExpression	1		4848080	1					
ANR	4848740	ExpressionStatement	std_io [ 2 ] = pipe_ends [ 1 ]	527:1:15217:15241	4848080	30	True				
ANR	4848741	AssignmentExpression	std_io [ 2 ] = pipe_ends [ 1 ]		4848080	0		=			
ANR	4848742	ArrayIndexing	std_io [ 2 ]		4848080	0					
ANR	4848743	Identifier	std_io		4848080	0					
ANR	4848744	PrimaryExpression	2		4848080	1					
ANR	4848745	ArrayIndexing	pipe_ends [ 1 ]		4848080	1					
ANR	4848746	Identifier	pipe_ends		4848080	0					
ANR	4848747	PrimaryExpression	1		4848080	1					
ANR	4848748	IfStatement	if ( privsep_enabled ( ) )		4848080	31					
ANR	4848749	Condition	privsep_enabled ( )	531:5:15295:15311	4848080	0	True				
ANR	4848750	CallExpression	privsep_enabled ( )		4848080	0					
ANR	4848751	Callee	privsep_enabled		4848080	0					
ANR	4848752	Identifier	privsep_enabled		4848080	0					
ANR	4848753	ArgumentList			4848080	1					
ANR	4848754	CompoundStatement		173:24:4517:4517	4848080	1					
ANR	4848755	ExpressionStatement	"m_procd_pid = privsep_spawn_procd ( exe . Value ( ) , args , std_io , m_reaper_id )"	532:2:15318:15499	4848080	0	True				
ANR	4848756	AssignmentExpression	"m_procd_pid = privsep_spawn_procd ( exe . Value ( ) , args , std_io , m_reaper_id )"		4848080	0		=			
ANR	4848757	Identifier	m_procd_pid		4848080	0					
ANR	4848758	CallExpression	"privsep_spawn_procd ( exe . Value ( ) , args , std_io , m_reaper_id )"		4848080	1					
ANR	4848759	Callee	privsep_spawn_procd		4848080	0					
ANR	4848760	Identifier	privsep_spawn_procd		4848080	0					
ANR	4848761	ArgumentList	exe . Value ( )		4848080	1					
ANR	4848762	Argument	exe . Value ( )		4848080	0					
ANR	4848763	CallExpression	exe . Value ( )		4848080	0					
ANR	4848764	Callee	exe . Value		4848080	0					
ANR	4848765	MemberAccess	exe . Value		4848080	0					
ANR	4848766	Identifier	exe		4848080	0					
ANR	4848767	Identifier	Value		4848080	1					
ANR	4848768	ArgumentList			4848080	1					
ANR	4848769	Argument	args		4848080	1					
ANR	4848770	Identifier	args		4848080	0					
ANR	4848771	Argument	std_io		4848080	2					
ANR	4848772	Identifier	std_io		4848080	0					
ANR	4848773	Argument	m_reaper_id		4848080	3					
ANR	4848774	Identifier	m_reaper_id		4848080	0					
ANR	4848775	ElseStatement	else		4848080	0					
ANR	4848776	CompoundStatement		179:6:4713:4713	4848080	0					
ANR	4848777	ExpressionStatement	"m_procd_pid = daemonCore -> Create_Process ( exe . Value ( ) , args , PRIV_ROOT , m_reaper_id , FALSE , NULL , NULL , NULL , NULL , std_io )"	538:2:15514:16023	4848080	0	True				
ANR	4848778	AssignmentExpression	"m_procd_pid = daemonCore -> Create_Process ( exe . Value ( ) , args , PRIV_ROOT , m_reaper_id , FALSE , NULL , NULL , NULL , NULL , std_io )"		4848080	0		=			
ANR	4848779	Identifier	m_procd_pid		4848080	0					
ANR	4848780	CallExpression	"daemonCore -> Create_Process ( exe . Value ( ) , args , PRIV_ROOT , m_reaper_id , FALSE , NULL , NULL , NULL , NULL , std_io )"		4848080	1					
ANR	4848781	Callee	daemonCore -> Create_Process		4848080	0					
ANR	4848782	PtrMemberAccess	daemonCore -> Create_Process		4848080	0					
ANR	4848783	Identifier	daemonCore		4848080	0					
ANR	4848784	Identifier	Create_Process		4848080	1					
ANR	4848785	ArgumentList	exe . Value ( )		4848080	1					
ANR	4848786	Argument	exe . Value ( )		4848080	0					
ANR	4848787	CallExpression	exe . Value ( )		4848080	0					
ANR	4848788	Callee	exe . Value		4848080	0					
ANR	4848789	MemberAccess	exe . Value		4848080	0					
ANR	4848790	Identifier	exe		4848080	0					
ANR	4848791	Identifier	Value		4848080	1					
ANR	4848792	ArgumentList			4848080	1					
ANR	4848793	Argument	args		4848080	1					
ANR	4848794	Identifier	args		4848080	0					
ANR	4848795	Argument	PRIV_ROOT		4848080	2					
ANR	4848796	Identifier	PRIV_ROOT		4848080	0					
ANR	4848797	Argument	m_reaper_id		4848080	3					
ANR	4848798	Identifier	m_reaper_id		4848080	0					
ANR	4848799	Argument	FALSE		4848080	4					
ANR	4848800	Identifier	FALSE		4848080	0					
ANR	4848801	Argument	NULL		4848080	5					
ANR	4848802	Identifier	NULL		4848080	0					
ANR	4848803	Argument	NULL		4848080	6					
ANR	4848804	Identifier	NULL		4848080	0					
ANR	4848805	Argument	NULL		4848080	7					
ANR	4848806	Identifier	NULL		4848080	0					
ANR	4848807	Argument	NULL		4848080	8					
ANR	4848808	Identifier	NULL		4848080	0					
ANR	4848809	Argument	std_io		4848080	9					
ANR	4848810	Identifier	std_io		4848080	0					
ANR	4848811	IfStatement	if ( m_procd_pid == FALSE )		4848080	32					
ANR	4848812	Condition	m_procd_pid == FALSE	549:5:16033:16052	4848080	0	True				
ANR	4848813	EqualityExpression	m_procd_pid == FALSE		4848080	0		==			
ANR	4848814	Identifier	m_procd_pid		4848080	0					
ANR	4848815	Identifier	FALSE		4848080	1					
ANR	4848816	CompoundStatement		191:27:5258:5258	4848080	1					
ANR	4848817	ExpressionStatement	"dprintf ( D_ALWAYS , ""start_procd: unable to execute the procd\\n"" )"	550:2:16059:16122	4848080	0	True				
ANR	4848818	CallExpression	"dprintf ( D_ALWAYS , ""start_procd: unable to execute the procd\\n"" )"		4848080	0					
ANR	4848819	Callee	dprintf		4848080	0					
ANR	4848820	Identifier	dprintf		4848080	0					
ANR	4848821	ArgumentList	D_ALWAYS		4848080	1					
ANR	4848822	Argument	D_ALWAYS		4848080	0					
ANR	4848823	Identifier	D_ALWAYS		4848080	0					
ANR	4848824	Argument	"""start_procd: unable to execute the procd\\n"""		4848080	1					
ANR	4848825	PrimaryExpression	"""start_procd: unable to execute the procd\\n"""		4848080	0					
ANR	4848826	ExpressionStatement	daemonCore -> Close_Pipe ( pipe_ends [ 0 ] )	551:2:16126:16162	4848080	1	True				
ANR	4848827	CallExpression	daemonCore -> Close_Pipe ( pipe_ends [ 0 ] )		4848080	0					
ANR	4848828	Callee	daemonCore -> Close_Pipe		4848080	0					
ANR	4848829	PtrMemberAccess	daemonCore -> Close_Pipe		4848080	0					
ANR	4848830	Identifier	daemonCore		4848080	0					
ANR	4848831	Identifier	Close_Pipe		4848080	1					
ANR	4848832	ArgumentList	pipe_ends [ 0 ]		4848080	1					
ANR	4848833	Argument	pipe_ends [ 0 ]		4848080	0					
ANR	4848834	ArrayIndexing	pipe_ends [ 0 ]		4848080	0					
ANR	4848835	Identifier	pipe_ends		4848080	0					
ANR	4848836	PrimaryExpression	0		4848080	1					
ANR	4848837	ExpressionStatement	daemonCore -> Close_Pipe ( pipe_ends [ 1 ] )	552:2:16166:16202	4848080	2	True				
ANR	4848838	CallExpression	daemonCore -> Close_Pipe ( pipe_ends [ 1 ] )		4848080	0					
ANR	4848839	Callee	daemonCore -> Close_Pipe		4848080	0					
ANR	4848840	PtrMemberAccess	daemonCore -> Close_Pipe		4848080	0					
ANR	4848841	Identifier	daemonCore		4848080	0					
ANR	4848842	Identifier	Close_Pipe		4848080	1					
ANR	4848843	ArgumentList	pipe_ends [ 1 ]		4848080	1					
ANR	4848844	Argument	pipe_ends [ 1 ]		4848080	0					
ANR	4848845	ArrayIndexing	pipe_ends [ 1 ]		4848080	0					
ANR	4848846	Identifier	pipe_ends		4848080	0					
ANR	4848847	PrimaryExpression	1		4848080	1					
ANR	4848848	ExpressionStatement	m_procd_pid = - 1	553:2:16206:16222	4848080	3	True				
ANR	4848849	AssignmentExpression	m_procd_pid = - 1		4848080	0		=			
ANR	4848850	Identifier	m_procd_pid		4848080	0					
ANR	4848851	UnaryOperationExpression	- 1		4848080	1					
ANR	4848852	UnaryOperator	-		4848080	0					
ANR	4848853	PrimaryExpression	1		4848080	1					
ANR	4848854	ReturnStatement	return false ;	554:2:16226:16238	4848080	4	True				
ANR	4848855	Identifier	false		4848080	0					
ANR	4848856	IfStatement	if ( daemonCore -> Close_Pipe ( pipe_ends [ 1 ] ) == FALSE )		4848080	33					
ANR	4848857	Condition	daemonCore -> Close_Pipe ( pipe_ends [ 1 ] ) == FALSE	561:5:16407:16451	4848080	0	True				
ANR	4848858	EqualityExpression	daemonCore -> Close_Pipe ( pipe_ends [ 1 ] ) == FALSE		4848080	0		==			
ANR	4848859	CallExpression	daemonCore -> Close_Pipe ( pipe_ends [ 1 ] )		4848080	0					
ANR	4848860	Callee	daemonCore -> Close_Pipe		4848080	0					
ANR	4848861	PtrMemberAccess	daemonCore -> Close_Pipe		4848080	0					
ANR	4848862	Identifier	daemonCore		4848080	0					
ANR	4848863	Identifier	Close_Pipe		4848080	1					
ANR	4848864	ArgumentList	pipe_ends [ 1 ]		4848080	1					
ANR	4848865	Argument	pipe_ends [ 1 ]		4848080	0					
ANR	4848866	ArrayIndexing	pipe_ends [ 1 ]		4848080	0					
ANR	4848867	Identifier	pipe_ends		4848080	0					
ANR	4848868	PrimaryExpression	1		4848080	1					
ANR	4848869	Identifier	FALSE		4848080	1					
ANR	4848870	CompoundStatement		203:52:5657:5657	4848080	1					
ANR	4848871	ExpressionStatement	"dprintf ( D_ALWAYS , ""error closing procd's pipe end\\n"" )"	562:2:16458:16511	4848080	0	True				
ANR	4848872	CallExpression	"dprintf ( D_ALWAYS , ""error closing procd's pipe end\\n"" )"		4848080	0					
ANR	4848873	Callee	dprintf		4848080	0					
ANR	4848874	Identifier	dprintf		4848080	0					
ANR	4848875	ArgumentList	D_ALWAYS		4848080	1					
ANR	4848876	Argument	D_ALWAYS		4848080	0					
ANR	4848877	Identifier	D_ALWAYS		4848080	0					
ANR	4848878	Argument	"""error closing procd's pipe end\\n"""		4848080	1					
ANR	4848879	PrimaryExpression	"""error closing procd's pipe end\\n"""		4848080	0					
ANR	4848880	ExpressionStatement	daemonCore -> Shutdown_Graceful ( m_procd_pid )	563:2:16515:16557	4848080	1	True				
ANR	4848881	CallExpression	daemonCore -> Shutdown_Graceful ( m_procd_pid )		4848080	0					
ANR	4848882	Callee	daemonCore -> Shutdown_Graceful		4848080	0					
ANR	4848883	PtrMemberAccess	daemonCore -> Shutdown_Graceful		4848080	0					
ANR	4848884	Identifier	daemonCore		4848080	0					
ANR	4848885	Identifier	Shutdown_Graceful		4848080	1					
ANR	4848886	ArgumentList	m_procd_pid		4848080	1					
ANR	4848887	Argument	m_procd_pid		4848080	0					
ANR	4848888	Identifier	m_procd_pid		4848080	0					
ANR	4848889	ExpressionStatement	daemonCore -> Close_Pipe ( pipe_ends [ 0 ] )	564:2:16561:16597	4848080	2	True				
ANR	4848890	CallExpression	daemonCore -> Close_Pipe ( pipe_ends [ 0 ] )		4848080	0					
ANR	4848891	Callee	daemonCore -> Close_Pipe		4848080	0					
ANR	4848892	PtrMemberAccess	daemonCore -> Close_Pipe		4848080	0					
ANR	4848893	Identifier	daemonCore		4848080	0					
ANR	4848894	Identifier	Close_Pipe		4848080	1					
ANR	4848895	ArgumentList	pipe_ends [ 0 ]		4848080	1					
ANR	4848896	Argument	pipe_ends [ 0 ]		4848080	0					
ANR	4848897	ArrayIndexing	pipe_ends [ 0 ]		4848080	0					
ANR	4848898	Identifier	pipe_ends		4848080	0					
ANR	4848899	PrimaryExpression	0		4848080	1					
ANR	4848900	ExpressionStatement	m_procd_pid = - 1	565:2:16601:16617	4848080	3	True				
ANR	4848901	AssignmentExpression	m_procd_pid = - 1		4848080	0		=			
ANR	4848902	Identifier	m_procd_pid		4848080	0					
ANR	4848903	UnaryOperationExpression	- 1		4848080	1					
ANR	4848904	UnaryOperator	-		4848080	0					
ANR	4848905	PrimaryExpression	1		4848080	1					
ANR	4848906	ReturnStatement	return false ;	566:2:16621:16633	4848080	4	True				
ANR	4848907	Identifier	false		4848080	0					
ANR	4848908	IdentifierDeclStatement	const int MAX_PROCD_ERR_LEN = 80 ;	568:1:16639:16671	4848080	34	True				
ANR	4848909	IdentifierDecl	MAX_PROCD_ERR_LEN = 80		4848080	0					
ANR	4848910	IdentifierDeclType	const int		4848080	0					
ANR	4848911	Identifier	MAX_PROCD_ERR_LEN		4848080	1					
ANR	4848912	AssignmentExpression	MAX_PROCD_ERR_LEN = 80		4848080	2		=			
ANR	4848913	Identifier	MAX_PROCD_ERR_LEN		4848080	0					
ANR	4848914	PrimaryExpression	80		4848080	1					
ANR	4848915	IdentifierDeclStatement	char err_msg [ MAX_PROCD_ERR_LEN + 1 ] ;	569:1:16674:16709	4848080	35	True				
ANR	4848916	IdentifierDecl	err_msg [ MAX_PROCD_ERR_LEN + 1 ]		4848080	0					
ANR	4848917	IdentifierDeclType	char [ MAX_PROCD_ERR_LEN + 1 ]		4848080	0					
ANR	4848918	Identifier	err_msg		4848080	1					
ANR	4848919	AdditiveExpression	MAX_PROCD_ERR_LEN + 1		4848080	2		+			
ANR	4848920	Identifier	MAX_PROCD_ERR_LEN		4848080	0					
ANR	4848921	PrimaryExpression	1		4848080	1					
ANR	4848922	IdentifierDeclStatement	"int ret = daemonCore -> Read_Pipe ( pipe_ends [ 0 ] , err_msg , MAX_PROCD_ERR_LEN ) ;"	570:1:16712:16785	4848080	36	True				
ANR	4848923	IdentifierDecl	"ret = daemonCore -> Read_Pipe ( pipe_ends [ 0 ] , err_msg , MAX_PROCD_ERR_LEN )"		4848080	0					
ANR	4848924	IdentifierDeclType	int		4848080	0					
ANR	4848925	Identifier	ret		4848080	1					
ANR	4848926	AssignmentExpression	"ret = daemonCore -> Read_Pipe ( pipe_ends [ 0 ] , err_msg , MAX_PROCD_ERR_LEN )"		4848080	2		=			
ANR	4848927	Identifier	ret		4848080	0					
ANR	4848928	CallExpression	"daemonCore -> Read_Pipe ( pipe_ends [ 0 ] , err_msg , MAX_PROCD_ERR_LEN )"		4848080	1					
ANR	4848929	Callee	daemonCore -> Read_Pipe		4848080	0					
ANR	4848930	PtrMemberAccess	daemonCore -> Read_Pipe		4848080	0					
ANR	4848931	Identifier	daemonCore		4848080	0					
ANR	4848932	Identifier	Read_Pipe		4848080	1					
ANR	4848933	ArgumentList	pipe_ends [ 0 ]		4848080	1					
ANR	4848934	Argument	pipe_ends [ 0 ]		4848080	0					
ANR	4848935	ArrayIndexing	pipe_ends [ 0 ]		4848080	0					
ANR	4848936	Identifier	pipe_ends		4848080	0					
ANR	4848937	PrimaryExpression	0		4848080	1					
ANR	4848938	Argument	err_msg		4848080	1					
ANR	4848939	Identifier	err_msg		4848080	0					
ANR	4848940	Argument	MAX_PROCD_ERR_LEN		4848080	2					
ANR	4848941	Identifier	MAX_PROCD_ERR_LEN		4848080	0					
ANR	4848942	IfStatement	if ( ret != 0 )		4848080	37					
ANR	4848943	Condition	ret != 0	571:5:16792:16799	4848080	0	True				
ANR	4848944	EqualityExpression	ret != 0		4848080	0		!=			
ANR	4848945	Identifier	ret		4848080	0					
ANR	4848946	PrimaryExpression	0		4848080	1					
ANR	4848947	CompoundStatement		213:15:6005:6005	4848080	1					
ANR	4848948	ExpressionStatement	daemonCore -> Shutdown_Graceful ( m_procd_pid )	572:2:16806:16848	4848080	0	True				
ANR	4848949	CallExpression	daemonCore -> Shutdown_Graceful ( m_procd_pid )		4848080	0					
ANR	4848950	Callee	daemonCore -> Shutdown_Graceful		4848080	0					
ANR	4848951	PtrMemberAccess	daemonCore -> Shutdown_Graceful		4848080	0					
ANR	4848952	Identifier	daemonCore		4848080	0					
ANR	4848953	Identifier	Shutdown_Graceful		4848080	1					
ANR	4848954	ArgumentList	m_procd_pid		4848080	1					
ANR	4848955	Argument	m_procd_pid		4848080	0					
ANR	4848956	Identifier	m_procd_pid		4848080	0					
ANR	4848957	ExpressionStatement	daemonCore -> Close_Pipe ( pipe_ends [ 0 ] )	573:2:16852:16888	4848080	1	True				
ANR	4848958	CallExpression	daemonCore -> Close_Pipe ( pipe_ends [ 0 ] )		4848080	0					
ANR	4848959	Callee	daemonCore -> Close_Pipe		4848080	0					
ANR	4848960	PtrMemberAccess	daemonCore -> Close_Pipe		4848080	0					
ANR	4848961	Identifier	daemonCore		4848080	0					
ANR	4848962	Identifier	Close_Pipe		4848080	1					
ANR	4848963	ArgumentList	pipe_ends [ 0 ]		4848080	1					
ANR	4848964	Argument	pipe_ends [ 0 ]		4848080	0					
ANR	4848965	ArrayIndexing	pipe_ends [ 0 ]		4848080	0					
ANR	4848966	Identifier	pipe_ends		4848080	0					
ANR	4848967	PrimaryExpression	0		4848080	1					
ANR	4848968	ExpressionStatement	m_procd_pid = - 1	574:2:16892:16908	4848080	2	True				
ANR	4848969	AssignmentExpression	m_procd_pid = - 1		4848080	0		=			
ANR	4848970	Identifier	m_procd_pid		4848080	0					
ANR	4848971	UnaryOperationExpression	- 1		4848080	1					
ANR	4848972	UnaryOperator	-		4848080	0					
ANR	4848973	PrimaryExpression	1		4848080	1					
ANR	4848974	IfStatement	if ( ret == - 1 )		4848080	3					
ANR	4848975	Condition	ret == - 1	575:6:16916:16924	4848080	0	True				
ANR	4848976	EqualityExpression	ret == - 1		4848080	0		==			
ANR	4848977	Identifier	ret		4848080	0					
ANR	4848978	UnaryOperationExpression	- 1		4848080	1					
ANR	4848979	UnaryOperator	-		4848080	0					
ANR	4848980	PrimaryExpression	1		4848080	1					
ANR	4848981	CompoundStatement		217:17:6130:6130	4848080	1					
ANR	4848982	ExpressionStatement	"dprintf ( D_ALWAYS , ""start_procd: error reading pipe from procd\\n"" )"	576:3:16932:16997	4848080	0	True				
ANR	4848983	CallExpression	"dprintf ( D_ALWAYS , ""start_procd: error reading pipe from procd\\n"" )"		4848080	0					
ANR	4848984	Callee	dprintf		4848080	0					
ANR	4848985	Identifier	dprintf		4848080	0					
ANR	4848986	ArgumentList	D_ALWAYS		4848080	1					
ANR	4848987	Argument	D_ALWAYS		4848080	0					
ANR	4848988	Identifier	D_ALWAYS		4848080	0					
ANR	4848989	Argument	"""start_procd: error reading pipe from procd\\n"""		4848080	1					
ANR	4848990	PrimaryExpression	"""start_procd: error reading pipe from procd\\n"""		4848080	0					
ANR	4848991	ReturnStatement	return false ;	577:3:17002:17014	4848080	1	True				
ANR	4848992	Identifier	false		4848080	0					
ANR	4848993	ExpressionStatement	err_msg [ ret ] = '\\0'	579:2:17022:17041	4848080	4	True				
ANR	4848994	AssignmentExpression	err_msg [ ret ] = '\\0'		4848080	0		=			
ANR	4848995	ArrayIndexing	err_msg [ ret ]		4848080	0					
ANR	4848996	Identifier	err_msg		4848080	0					
ANR	4848997	Identifier	ret		4848080	1					
ANR	4848998	PrimaryExpression	'\\0'		4848080	1					
ANR	4848999	ExpressionStatement	"dprintf ( D_ALWAYS , ""start_procd: error received from procd: %s\\n"" , err_msg )"	580:2:17045:17139	4848080	5	True				
ANR	4849000	CallExpression	"dprintf ( D_ALWAYS , ""start_procd: error received from procd: %s\\n"" , err_msg )"		4848080	0					
ANR	4849001	Callee	dprintf		4848080	0					
ANR	4849002	Identifier	dprintf		4848080	0					
ANR	4849003	ArgumentList	D_ALWAYS		4848080	1					
ANR	4849004	Argument	D_ALWAYS		4848080	0					
ANR	4849005	Identifier	D_ALWAYS		4848080	0					
ANR	4849006	Argument	"""start_procd: error received from procd: %s\\n"""		4848080	1					
ANR	4849007	PrimaryExpression	"""start_procd: error received from procd: %s\\n"""		4848080	0					
ANR	4849008	Argument	err_msg		4848080	2					
ANR	4849009	Identifier	err_msg		4848080	0					
ANR	4849010	ReturnStatement	return false ;	583:2:17143:17155	4848080	6	True				
ANR	4849011	Identifier	false		4848080	0					
ANR	4849012	IfStatement	if ( daemonCore -> Close_Pipe ( pipe_ends [ 0 ] ) == FALSE )		4848080	38					
ANR	4849013	Condition	daemonCore -> Close_Pipe ( pipe_ends [ 0 ] ) == FALSE	585:5:17165:17209	4848080	0	True				
ANR	4849014	EqualityExpression	daemonCore -> Close_Pipe ( pipe_ends [ 0 ] ) == FALSE		4848080	0		==			
ANR	4849015	CallExpression	daemonCore -> Close_Pipe ( pipe_ends [ 0 ] )		4848080	0					
ANR	4849016	Callee	daemonCore -> Close_Pipe		4848080	0					
ANR	4849017	PtrMemberAccess	daemonCore -> Close_Pipe		4848080	0					
ANR	4849018	Identifier	daemonCore		4848080	0					
ANR	4849019	Identifier	Close_Pipe		4848080	1					
ANR	4849020	ArgumentList	pipe_ends [ 0 ]		4848080	1					
ANR	4849021	Argument	pipe_ends [ 0 ]		4848080	0					
ANR	4849022	ArrayIndexing	pipe_ends [ 0 ]		4848080	0					
ANR	4849023	Identifier	pipe_ends		4848080	0					
ANR	4849024	PrimaryExpression	0		4848080	1					
ANR	4849025	Identifier	FALSE		4848080	1					
ANR	4849026	CompoundStatement		227:52:6415:6415	4848080	1					
ANR	4849027	ExpressionStatement	"dprintf ( D_ALWAYS , ""start_procd: error closing pipe to procd\\n"" )"	586:2:17216:17279	4848080	0	True				
ANR	4849028	CallExpression	"dprintf ( D_ALWAYS , ""start_procd: error closing pipe to procd\\n"" )"		4848080	0					
ANR	4849029	Callee	dprintf		4848080	0					
ANR	4849030	Identifier	dprintf		4848080	0					
ANR	4849031	ArgumentList	D_ALWAYS		4848080	1					
ANR	4849032	Argument	D_ALWAYS		4848080	0					
ANR	4849033	Identifier	D_ALWAYS		4848080	0					
ANR	4849034	Argument	"""start_procd: error closing pipe to procd\\n"""		4848080	1					
ANR	4849035	PrimaryExpression	"""start_procd: error closing pipe to procd\\n"""		4848080	0					
ANR	4849036	ExpressionStatement	daemonCore -> Shutdown_Graceful ( m_procd_pid )	587:2:17283:17325	4848080	1	True				
ANR	4849037	CallExpression	daemonCore -> Shutdown_Graceful ( m_procd_pid )		4848080	0					
ANR	4849038	Callee	daemonCore -> Shutdown_Graceful		4848080	0					
ANR	4849039	PtrMemberAccess	daemonCore -> Shutdown_Graceful		4848080	0					
ANR	4849040	Identifier	daemonCore		4848080	0					
ANR	4849041	Identifier	Shutdown_Graceful		4848080	1					
ANR	4849042	ArgumentList	m_procd_pid		4848080	1					
ANR	4849043	Argument	m_procd_pid		4848080	0					
ANR	4849044	Identifier	m_procd_pid		4848080	0					
ANR	4849045	ExpressionStatement	m_procd_pid = - 1	588:2:17329:17345	4848080	2	True				
ANR	4849046	AssignmentExpression	m_procd_pid = - 1		4848080	0		=			
ANR	4849047	Identifier	m_procd_pid		4848080	0					
ANR	4849048	UnaryOperationExpression	- 1		4848080	1					
ANR	4849049	UnaryOperator	-		4848080	0					
ANR	4849050	PrimaryExpression	1		4848080	1					
ANR	4849051	ReturnStatement	return false ;	589:2:17349:17361	4848080	3	True				
ANR	4849052	Identifier	false		4848080	0					
ANR	4849053	ReturnStatement	return true ;	594:1:17408:17419	4848080	39	True				
ANR	4849054	Identifier	true		4848080	0					
ANR	4849055	ReturnType	bool		4848080	1					
ANR	4849056	Identifier	ProcFamilyProxy :: start_procd		4848080	2					
ANR	4849057	ParameterList			4848080	3					
ANR	4849058	CFGEntryNode	ENTRY		4848080		True				
ANR	4849059	CFGExitNode	EXIT		4848080		True				
ANR	4849060	Symbol	m_procd_addr		4848080						
ANR	4849061	Symbol	daemonCore -> Create_Process		4848080						
ANR	4849062	Symbol	m_procd_pid		4848080						
ANR	4849063	Symbol	privsep_spawn_procd		4848080						
ANR	4849064	Symbol	* err_msg		4848080						
ANR	4849065	Symbol	std_io		4848080						
ANR	4849066	Symbol	* pipe_ends		4848080						
ANR	4849067	Symbol	path		4848080						
ANR	4849068	Symbol	glexec		4848080						
ANR	4849069	Symbol	exe		4848080						
ANR	4849070	Symbol	can_switch_ids		4848080						
ANR	4849071	Symbol	procd_log_size		4848080						
ANR	4849072	Symbol	pipe_ends		4848080						
ANR	4849073	Symbol	ret		4848080						
ANR	4849074	Symbol	NULL		4848080						
ANR	4849075	Symbol	glexec_kill . Value		4848080						
ANR	4849076	Symbol	m_reaper_id		4848080						
ANR	4849077	Symbol	param_boolean		4848080						
ANR	4849078	Symbol	m_procd_log . Length		4848080						
ANR	4849079	Symbol	& ProcFamilyProxyReaperHelper :: procd_reaper		4848080						
ANR	4849080	Symbol	m_reaper_helper		4848080						
ANR	4849081	Symbol	max_snapshot_interval		4848080						
ANR	4849082	Symbol	daemonCore -> Read_Pipe		4848080						
ANR	4849083	Symbol	* daemonCore		4848080						
ANR	4849084	Symbol	true		4848080						
ANR	4849085	Symbol	glexec_kill		4848080						
ANR	4849086	Symbol	PRIV_ROOT		4848080						
ANR	4849087	Symbol	param_integer		4848080						
ANR	4849088	Symbol	max_tracking_gid		4848080						
ANR	4849089	Symbol	daemonCore -> Create_Pipe		4848080						
ANR	4849090	Symbol	condor_basename		4848080						
ANR	4849091	Symbol	daemonCore -> Close_Pipe		4848080						
ANR	4849092	Symbol	min_tracking_gid		4848080						
ANR	4849093	Symbol	MAX_PROCD_ERR_LEN		4848080						
ANR	4849094	Symbol	m_procd_log		4848080						
ANR	4849095	Symbol	* ret		4848080						
ANR	4849096	Symbol	param		4848080						
ANR	4849097	Symbol	daemonCore		4848080						
ANR	4849098	Symbol	exe . Value		4848080						
ANR	4849099	Symbol	debug		4848080						
ANR	4849100	Symbol	softkill_path		4848080						
ANR	4849101	Symbol	D_ALWAYS		4848080						
ANR	4849102	Symbol	false		4848080						
ANR	4849103	Symbol	args		4848080						
ANR	4849104	Symbol	daemonCore -> Register_Reaper		4848080						
ANR	4849105	Symbol	get_condor_uid		4848080						
ANR	4849106	Symbol	libexec		4848080						
ANR	4849107	Symbol	privsep_enabled		4848080						
ANR	4849108	Symbol	err_msg		4848080						
ANR	4849109	Symbol	FALSE		4848080						
ANR	4849110	Symbol	* std_io		4848080						
ANR	4849111	Function	ProcFamilyProxy :: stop_procd	597:0:17424:17671							
ANR	4849112	FunctionDef	ProcFamilyProxy :: stop_procd ()		4849111	0					
ANR	4849113	CompoundStatement		599:0:17459:17671	4849111	0					
ANR	4849114	IdentifierDeclStatement	bool response ;	600:1:17462:17475	4849111	0	True				
ANR	4849115	IdentifierDecl	response		4849111	0					
ANR	4849116	IdentifierDeclType	bool		4849111	0					
ANR	4849117	Identifier	response		4849111	1					
ANR	4849118	IfStatement	if ( ! m_client -> quit ( response ) )		4849111	1					
ANR	4849119	Condition	! m_client -> quit ( response )	601:5:17482:17506	4849111	0	True				
ANR	4849120	UnaryOperationExpression	! m_client -> quit ( response )		4849111	0					
ANR	4849121	UnaryOperator	!		4849111	0					
ANR	4849122	CallExpression	m_client -> quit ( response )		4849111	1					
ANR	4849123	Callee	m_client -> quit		4849111	0					
ANR	4849124	PtrMemberAccess	m_client -> quit		4849111	0					
ANR	4849125	Identifier	m_client		4849111	0					
ANR	4849126	Identifier	quit		4849111	1					
ANR	4849127	ArgumentList	response		4849111	1					
ANR	4849128	Argument	response		4849111	0					
ANR	4849129	Identifier	response		4849111	0					
ANR	4849130	CompoundStatement		3:32:49:49	4849111	1					
ANR	4849131	ExpressionStatement	"dprintf ( D_ALWAYS , ""error telling ProcD to exit\\n"" )"	602:2:17513:17563	4849111	0	True				
ANR	4849132	CallExpression	"dprintf ( D_ALWAYS , ""error telling ProcD to exit\\n"" )"		4849111	0					
ANR	4849133	Callee	dprintf		4849111	0					
ANR	4849134	Identifier	dprintf		4849111	0					
ANR	4849135	ArgumentList	D_ALWAYS		4849111	1					
ANR	4849136	Argument	D_ALWAYS		4849111	0					
ANR	4849137	Identifier	D_ALWAYS		4849111	0					
ANR	4849138	Argument	"""error telling ProcD to exit\\n"""		4849111	1					
ANR	4849139	PrimaryExpression	"""error telling ProcD to exit\\n"""		4849111	0					
ANR	4849140	ExpressionStatement	m_procd_pid = - 1	608:1:17653:17669	4849111	2	True				
ANR	4849141	AssignmentExpression	m_procd_pid = - 1		4849111	0		=			
ANR	4849142	Identifier	m_procd_pid		4849111	0					
ANR	4849143	UnaryOperationExpression	- 1		4849111	1					
ANR	4849144	UnaryOperator	-		4849111	0					
ANR	4849145	PrimaryExpression	1		4849111	1					
ANR	4849146	ReturnType	void		4849111	1					
ANR	4849147	Identifier	ProcFamilyProxy :: stop_procd		4849111	2					
ANR	4849148	ParameterList			4849111	3					
ANR	4849149	CFGEntryNode	ENTRY		4849111		True				
ANR	4849150	CFGExitNode	EXIT		4849111		True				
ANR	4849151	Symbol	m_procd_pid		4849111						
ANR	4849152	Symbol	m_client -> quit		4849111						
ANR	4849153	Symbol	response		4849111						
ANR	4849154	Symbol	D_ALWAYS		4849111						
ANR	4849155	Symbol	* m_client		4849111						
ANR	4849156	Symbol	m_client		4849111						
ANR	4849157	Function	ProcFamilyProxy :: recover_from_procd_error	611:0:17674:18881							
ANR	4849158	FunctionDef	ProcFamilyProxy :: recover_from_procd_error ()		4849157	0					
ANR	4849159	CompoundStatement		613:0:17723:18881	4849157	0					
ANR	4849160	IfStatement	"if ( ! param_boolean ( ""RESTART_PROCD_ON_ERROR"" , false ) )"		4849157	0					
ANR	4849161	Condition	"! param_boolean ( ""RESTART_PROCD_ON_ERROR"" , false )"	614:5:17730:17776	4849157	0	True				
ANR	4849162	UnaryOperationExpression	"! param_boolean ( ""RESTART_PROCD_ON_ERROR"" , false )"		4849157	0					
ANR	4849163	UnaryOperator	!		4849157	0					
ANR	4849164	CallExpression	"param_boolean ( ""RESTART_PROCD_ON_ERROR"" , false )"		4849157	1					
ANR	4849165	Callee	param_boolean		4849157	0					
ANR	4849166	Identifier	param_boolean		4849157	0					
ANR	4849167	ArgumentList	"""RESTART_PROCD_ON_ERROR"""		4849157	1					
ANR	4849168	Argument	"""RESTART_PROCD_ON_ERROR"""		4849157	0					
ANR	4849169	PrimaryExpression	"""RESTART_PROCD_ON_ERROR"""		4849157	0					
ANR	4849170	Argument	false		4849157	1					
ANR	4849171	Identifier	false		4849157	0					
ANR	4849172	CompoundStatement		2:54:55:55	4849157	1					
ANR	4849173	ExpressionStatement	"EXCEPT ( ""ProcD has failed"" )"	615:2:17783:17809	4849157	0	True				
ANR	4849174	CallExpression	"EXCEPT ( ""ProcD has failed"" )"		4849157	0					
ANR	4849175	Callee	EXCEPT		4849157	0					
ANR	4849176	Identifier	EXCEPT		4849157	0					
ANR	4849177	ArgumentList	"""ProcD has failed"""		4849157	1					
ANR	4849178	Argument	"""ProcD has failed"""		4849157	0					
ANR	4849179	PrimaryExpression	"""ProcD has failed"""		4849157	0					
ANR	4849180	Statement	delete	620:1:17876:17881	4849157	1	True				
ANR	4849181	ExpressionStatement	m_client	620:8:17883:17891	4849157	2	True				
ANR	4849182	Identifier	m_client		4849157	0					
ANR	4849183	ExpressionStatement	m_client = NULL	621:1:17894:17909	4849157	3	True				
ANR	4849184	AssignmentExpression	m_client = NULL		4849157	0		=			
ANR	4849185	Identifier	m_client		4849157	0					
ANR	4849186	Identifier	NULL		4849157	1					
ANR	4849187	WhileStatement	while ( m_client == NULL )		4849157	4					
ANR	4849188	Condition	m_client == NULL	623:8:17920:17935	4849157	0	True				
ANR	4849189	EqualityExpression	m_client == NULL		4849157	0		==			
ANR	4849190	Identifier	m_client		4849157	0					
ANR	4849191	Identifier	NULL		4849157	1					
ANR	4849192	CompoundStatement		11:26:214:214	4849157	1					
ANR	4849193	IfStatement	if ( m_procd_pid != - 1 )		4849157	0					
ANR	4849194	Condition	m_procd_pid != - 1	628:6:18070:18086	4849157	0	True				
ANR	4849195	EqualityExpression	m_procd_pid != - 1		4849157	0		!=			
ANR	4849196	Identifier	m_procd_pid		4849157	0					
ANR	4849197	UnaryOperationExpression	- 1		4849157	1					
ANR	4849198	UnaryOperator	-		4849157	0					
ANR	4849199	PrimaryExpression	1		4849157	1					
ANR	4849200	CompoundStatement		16:25:365:365	4849157	1					
ANR	4849201	ExpressionStatement	"dprintf ( D_ALWAYS , ""attempting to restart the Procd\\n"" )"	633:3:18186:18240	4849157	0	True				
ANR	4849202	CallExpression	"dprintf ( D_ALWAYS , ""attempting to restart the Procd\\n"" )"		4849157	0					
ANR	4849203	Callee	dprintf		4849157	0					
ANR	4849204	Identifier	dprintf		4849157	0					
ANR	4849205	ArgumentList	D_ALWAYS		4849157	1					
ANR	4849206	Argument	D_ALWAYS		4849157	0					
ANR	4849207	Identifier	D_ALWAYS		4849157	0					
ANR	4849208	Argument	"""attempting to restart the Procd\\n"""		4849157	1					
ANR	4849209	PrimaryExpression	"""attempting to restart the Procd\\n"""		4849157	0					
ANR	4849210	ExpressionStatement	m_procd_pid = - 1	634:3:18245:18261	4849157	1	True				
ANR	4849211	AssignmentExpression	m_procd_pid = - 1		4849157	0		=			
ANR	4849212	Identifier	m_procd_pid		4849157	0					
ANR	4849213	UnaryOperationExpression	- 1		4849157	1					
ANR	4849214	UnaryOperator	-		4849157	0					
ANR	4849215	PrimaryExpression	1		4849157	1					
ANR	4849216	IfStatement	if ( ! start_procd ( ) )		4849157	2					
ANR	4849217	Condition	! start_procd ( )	635:7:18270:18283	4849157	0	True				
ANR	4849218	UnaryOperationExpression	! start_procd ( )		4849157	0					
ANR	4849219	UnaryOperator	!		4849157	0					
ANR	4849220	CallExpression	start_procd ( )		4849157	1					
ANR	4849221	Callee	start_procd		4849157	0					
ANR	4849222	Identifier	start_procd		4849157	0					
ANR	4849223	ArgumentList			4849157	1					
ANR	4849224	CompoundStatement		23:23:562:562	4849157	1					
ANR	4849225	ExpressionStatement	"EXCEPT ( ""unable to start the ProcD"" )"	636:4:18292:18327	4849157	0	True				
ANR	4849226	CallExpression	"EXCEPT ( ""unable to start the ProcD"" )"		4849157	0					
ANR	4849227	Callee	EXCEPT		4849157	0					
ANR	4849228	Identifier	EXCEPT		4849157	0					
ANR	4849229	ArgumentList	"""unable to start the ProcD"""		4849157	1					
ANR	4849230	Argument	"""unable to start the ProcD"""		4849157	0					
ANR	4849231	PrimaryExpression	"""unable to start the ProcD"""		4849157	0					
ANR	4849232	ElseStatement	else		4849157	0					
ANR	4849233	CompoundStatement		27:7:621:621	4849157	0					
ANR	4849234	ExpressionStatement	"dprintf ( D_ALWAYS , ""waiting a second to allow the ProcD to be restarted\\n"" )"	646:3:18495:18580	4849157	0	True				
ANR	4849235	CallExpression	"dprintf ( D_ALWAYS , ""waiting a second to allow the ProcD to be restarted\\n"" )"		4849157	0					
ANR	4849236	Callee	dprintf		4849157	0					
ANR	4849237	Identifier	dprintf		4849157	0					
ANR	4849238	ArgumentList	D_ALWAYS		4849157	1					
ANR	4849239	Argument	D_ALWAYS		4849157	0					
ANR	4849240	Identifier	D_ALWAYS		4849157	0					
ANR	4849241	Argument	"""waiting a second to allow the ProcD to be restarted\\n"""		4849157	1					
ANR	4849242	PrimaryExpression	"""waiting a second to allow the ProcD to be restarted\\n"""		4849157	0					
ANR	4849243	ExpressionStatement	sleep ( 1 )	648:3:18585:18593	4849157	1	True				
ANR	4849244	CallExpression	sleep ( 1 )		4849157	0					
ANR	4849245	Callee	sleep		4849157	0					
ANR	4849246	Identifier	sleep		4849157	0					
ANR	4849247	ArgumentList	1		4849157	1					
ANR	4849248	Argument	1		4849157	0					
ANR	4849249	PrimaryExpression	1		4849157	0					
ANR	4849250	Statement	m_client	651:2:18602:18609	4849157	1	True				
ANR	4849251	Statement	=	651:11:18611:18611	4849157	2	True				
ANR	4849252	Statement	new	651:13:18613:18615	4849157	3	True				
ANR	4849253	ExpressionStatement	ProcFamilyClient	651:17:18617:18633	4849157	4	True				
ANR	4849254	Identifier	ProcFamilyClient		4849157	0					
ANR	4849255	ExpressionStatement	ASSERT ( m_client != NULL )	652:2:18637:18661	4849157	5	True				
ANR	4849256	CallExpression	ASSERT ( m_client != NULL )		4849157	0					
ANR	4849257	Callee	ASSERT		4849157	0					
ANR	4849258	Identifier	ASSERT		4849157	0					
ANR	4849259	ArgumentList	m_client != NULL		4849157	1					
ANR	4849260	Argument	m_client != NULL		4849157	0					
ANR	4849261	EqualityExpression	m_client != NULL		4849157	0		!=			
ANR	4849262	Identifier	m_client		4849157	0					
ANR	4849263	Identifier	NULL		4849157	1					
ANR	4849264	IfStatement	if ( ! m_client -> initialize ( m_procd_addr . Value ( ) ) )		4849157	6					
ANR	4849265	Condition	! m_client -> initialize ( m_procd_addr . Value ( ) )	653:6:18669:18711	4849157	0	True				
ANR	4849266	UnaryOperationExpression	! m_client -> initialize ( m_procd_addr . Value ( ) )		4849157	0					
ANR	4849267	UnaryOperator	!		4849157	0					
ANR	4849268	CallExpression	m_client -> initialize ( m_procd_addr . Value ( ) )		4849157	1					
ANR	4849269	Callee	m_client -> initialize		4849157	0					
ANR	4849270	PtrMemberAccess	m_client -> initialize		4849157	0					
ANR	4849271	Identifier	m_client		4849157	0					
ANR	4849272	Identifier	initialize		4849157	1					
ANR	4849273	ArgumentList	m_procd_addr . Value ( )		4849157	1					
ANR	4849274	Argument	m_procd_addr . Value ( )		4849157	0					
ANR	4849275	CallExpression	m_procd_addr . Value ( )		4849157	0					
ANR	4849276	Callee	m_procd_addr . Value		4849157	0					
ANR	4849277	MemberAccess	m_procd_addr . Value		4849157	0					
ANR	4849278	Identifier	m_procd_addr		4849157	0					
ANR	4849279	Identifier	Value		4849157	1					
ANR	4849280	ArgumentList			4849157	1					
ANR	4849281	CompoundStatement		41:51:990:990	4849157	1					
ANR	4849282	Statement	dprintf	654:3:18719:18725	4849157	0	True				
ANR	4849283	Statement	(	654:10:18726:18726	4849157	1	True				
ANR	4849284	Statement	D_ALWAYS	654:11:18727:18734	4849157	2	True				
ANR	4849285	Statement	","	654:19:18735:18735	4849157	3	True				
ANR	4849286	Statement	"""recover_from_procd_error: """	655:11:18748:18775	4849157	4	True				
ANR	4849287	Statement	"""error initializing ProcFamilyClient\\n"""	656:15:18792:18830	4849157	5	True				
ANR	4849288	Statement	)	656:54:18831:18831	4849157	6	True				
ANR	4849289	ExpressionStatement		656:55:18832:18832	4849157	7	True				
ANR	4849290	Statement	delete	657:3:18837:18842	4849157	8	True				
ANR	4849291	ExpressionStatement	m_client	657:10:18844:18852	4849157	9	True				
ANR	4849292	Identifier	m_client		4849157	0					
ANR	4849293	ExpressionStatement	m_client = NULL	658:3:18857:18872	4849157	10	True				
ANR	4849294	AssignmentExpression	m_client = NULL		4849157	0		=			
ANR	4849295	Identifier	m_client		4849157	0					
ANR	4849296	Identifier	NULL		4849157	1					
ANR	4849297	ReturnType	void		4849157	1					
ANR	4849298	Identifier	ProcFamilyProxy :: recover_from_procd_error		4849157	2					
ANR	4849299	ParameterList			4849157	3					
ANR	4849300	CFGEntryNode	ENTRY		4849157		True				
ANR	4849301	CFGExitNode	EXIT		4849157		True				
ANR	4849302	Symbol	m_procd_addr		4849157						
ANR	4849303	Symbol	m_procd_pid		4849157						
ANR	4849304	Symbol	NULL		4849157						
ANR	4849305	Symbol	m_client -> initialize		4849157						
ANR	4849306	Symbol	start_procd		4849157						
ANR	4849307	Symbol	false		4849157						
ANR	4849308	Symbol	D_ALWAYS		4849157						
ANR	4849309	Symbol	param_boolean		4849157						
ANR	4849310	Symbol	m_client		4849157						
ANR	4849311	Symbol	* m_client		4849157						
ANR	4849312	Symbol	m_procd_addr . Value		4849157						
ANR	4849313	Function	ProcFamilyProxy :: procd_reaper	663:0:18884:19278							
ANR	4849314	FunctionDef	"ProcFamilyProxy :: procd_reaper (int pid , int status)"		4849313	0					
ANR	4849315	CompoundStatement		665:0:18939:19278	4849313	0					
ANR	4849316	IfStatement	if ( ( m_procd_pid == - 1 ) || ( pid != m_procd_pid ) )		4849313	0					
ANR	4849317	Condition	( m_procd_pid == - 1 ) || ( pid != m_procd_pid )	666:5:18946:18988	4849313	0	True				
ANR	4849318	OrExpression	( m_procd_pid == - 1 ) || ( pid != m_procd_pid )		4849313	0		||			
ANR	4849319	EqualityExpression	m_procd_pid == - 1		4849313	0		==			
ANR	4849320	Identifier	m_procd_pid		4849313	0					
ANR	4849321	UnaryOperationExpression	- 1		4849313	1					
ANR	4849322	UnaryOperator	-		4849313	0					
ANR	4849323	PrimaryExpression	1		4849313	1					
ANR	4849324	EqualityExpression	pid != m_procd_pid		4849313	1		!=			
ANR	4849325	Identifier	pid		4849313	0					
ANR	4849326	Identifier	m_procd_pid		4849313	1					
ANR	4849327	CompoundStatement		2:50:51:51	4849313	1					
ANR	4849328	ExpressionStatement	"dprintf ( D_ALWAYS , ""procd (pid = %d) exited with status %d\\n"" , pid , status )"	667:2:18995:19099	4849313	0	True				
ANR	4849329	CallExpression	"dprintf ( D_ALWAYS , ""procd (pid = %d) exited with status %d\\n"" , pid , status )"		4849313	0					
ANR	4849330	Callee	dprintf		4849313	0					
ANR	4849331	Identifier	dprintf		4849313	0					
ANR	4849332	ArgumentList	D_ALWAYS		4849313	1					
ANR	4849333	Argument	D_ALWAYS		4849313	0					
ANR	4849334	Identifier	D_ALWAYS		4849313	0					
ANR	4849335	Argument	"""procd (pid = %d) exited with status %d\\n"""		4849313	1					
ANR	4849336	PrimaryExpression	"""procd (pid = %d) exited with status %d\\n"""		4849313	0					
ANR	4849337	Argument	pid		4849313	2					
ANR	4849338	Identifier	pid		4849313	0					
ANR	4849339	Argument	status		4849313	3					
ANR	4849340	Identifier	status		4849313	0					
ANR	4849341	ElseStatement	else		4849313	0					
ANR	4849342	CompoundStatement		8:6:170:170	4849313	0					
ANR	4849343	ExpressionStatement	"dprintf ( D_ALWAYS , ""procd (pid = %d) exited unexpectedly with status %d\\n"" , pid , status )"	673:2:19114:19231	4849313	0	True				
ANR	4849344	CallExpression	"dprintf ( D_ALWAYS , ""procd (pid = %d) exited unexpectedly with status %d\\n"" , pid , status )"		4849313	0					
ANR	4849345	Callee	dprintf		4849313	0					
ANR	4849346	Identifier	dprintf		4849313	0					
ANR	4849347	ArgumentList	D_ALWAYS		4849313	1					
ANR	4849348	Argument	D_ALWAYS		4849313	0					
ANR	4849349	Identifier	D_ALWAYS		4849313	0					
ANR	4849350	Argument	"""procd (pid = %d) exited unexpectedly with status %d\\n"""		4849313	1					
ANR	4849351	PrimaryExpression	"""procd (pid = %d) exited unexpectedly with status %d\\n"""		4849313	0					
ANR	4849352	Argument	pid		4849313	2					
ANR	4849353	Identifier	pid		4849313	0					
ANR	4849354	Argument	status		4849313	3					
ANR	4849355	Identifier	status		4849313	0					
ANR	4849356	ExpressionStatement	recover_from_procd_error ( )	677:2:19235:19261	4849313	1	True				
ANR	4849357	CallExpression	recover_from_procd_error ( )		4849313	0					
ANR	4849358	Callee	recover_from_procd_error		4849313	0					
ANR	4849359	Identifier	recover_from_procd_error		4849313	0					
ANR	4849360	ArgumentList			4849313	1					
ANR	4849361	ReturnStatement	return 0 ;	680:1:19268:19276	4849313	1	True				
ANR	4849362	PrimaryExpression	0		4849313	0					
ANR	4849363	ReturnType	int		4849313	1					
ANR	4849364	Identifier	ProcFamilyProxy :: procd_reaper		4849313	2					
ANR	4849365	ParameterList	"int pid , int status"		4849313	3					
ANR	4849366	Parameter	int pid	664:30:18918:18924	4849313	0	True				
ANR	4849367	ParameterType	int		4849313	0					
ANR	4849368	Identifier	pid		4849313	1					
ANR	4849369	Parameter	int status	664:39:18927:18936	4849313	1	True				
ANR	4849370	ParameterType	int		4849313	0					
ANR	4849371	Identifier	status		4849313	1					
ANR	4849372	CFGEntryNode	ENTRY		4849313		True				
ANR	4849373	CFGExitNode	EXIT		4849313		True				
ANR	4849374	Symbol	m_procd_pid		4849313						
ANR	4849375	Symbol	D_ALWAYS		4849313						
ANR	4849376	Symbol	pid		4849313						
ANR	4849377	Symbol	status		4849313						
