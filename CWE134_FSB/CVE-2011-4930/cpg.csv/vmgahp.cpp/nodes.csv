command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5562427	File	data/converged/CVE-2011-4930_htcondor/vmgahp.cpp								
ANR	5562428	DeclStmt									
ANR	5562429	Decl							const char	const char *	vmgahp_version
ANR	5562430	DeclStmt									
ANR	5562431	Decl							const char	const char * [ ]	support_vms_list
ANR	5562432	DeclStmt									
ANR	5562433	Decl							const char	const char * [ ]	commands_list
ANR	5562434	DeclStmt									
ANR	5562435	Decl							int	int	forwarding_pipe
ANR	5562436	DeclStmt									
ANR	5562437	Decl							const int	const int	FORWARD_BUFFER_SIZE
ANR	5562438	DeclStmt									
ANR	5562439	Decl							char	char [ FORWARD_BUFFER_SIZE ]	buf
ANR	5562440	DeclStmt									
ANR	5562441	Decl							int	int	bytes
ANR	5562442	DeclStmt									
ANR	5562443	Decl							char	char *	ptr
ANR	5562444	DeclStmt									
ANR	5562445	Decl							int	int	bytes_written
ANR	5562446	Function	VMGahp :: VMGahp	108:0:2935:3273							
ANR	5562447	FunctionDef	"VMGahp :: VMGahp (VMGahpConfig * config , const char * iwd)"		5562446	0					
ANR	5562448	CompoundStatement		110:0:3030:3273	5562446	0					
ANR	5562449	ExpressionStatement	m_async_mode = true	111:1:3033:3052	5562446	0	True				
ANR	5562450	AssignmentExpression	m_async_mode = true		5562446	0		=			
ANR	5562451	Identifier	m_async_mode		5562446	0					
ANR	5562452	Identifier	true		5562446	1					
ANR	5562453	ExpressionStatement	m_new_results_signaled = false	112:1:3055:3085	5562446	1	True				
ANR	5562454	AssignmentExpression	m_new_results_signaled = false		5562446	0		=			
ANR	5562455	Identifier	m_new_results_signaled		5562446	0					
ANR	5562456	Identifier	false		5562446	1					
ANR	5562457	ExpressionStatement	m_jobAd = NULL	113:1:3088:3102	5562446	2	True				
ANR	5562458	AssignmentExpression	m_jobAd = NULL		5562446	0		=			
ANR	5562459	Identifier	m_jobAd		5562446	0					
ANR	5562460	Identifier	NULL		5562446	1					
ANR	5562461	ExpressionStatement	m_inClassAd = false	114:1:3105:3124	5562446	3	True				
ANR	5562462	AssignmentExpression	m_inClassAd = false		5562446	0		=			
ANR	5562463	Identifier	m_inClassAd		5562446	0					
ANR	5562464	Identifier	false		5562446	1					
ANR	5562465	ExpressionStatement	m_gahp_config = config	115:1:3127:3149	5562446	4	True				
ANR	5562466	AssignmentExpression	m_gahp_config = config		5562446	0		=			
ANR	5562467	Identifier	m_gahp_config		5562446	0					
ANR	5562468	Identifier	config		5562446	1					
ANR	5562469	ExpressionStatement	m_workingdir = iwd	116:1:3152:3170	5562446	5	True				
ANR	5562470	AssignmentExpression	m_workingdir = iwd		5562446	0		=			
ANR	5562471	Identifier	m_workingdir		5562446	0					
ANR	5562472	Identifier	iwd		5562446	1					
ANR	5562473	ExpressionStatement	m_max_vm_id = 0	118:1:3174:3189	5562446	6	True				
ANR	5562474	AssignmentExpression	m_max_vm_id = 0		5562446	0		=			
ANR	5562475	Identifier	m_max_vm_id		5562446	0					
ANR	5562476	PrimaryExpression	0		5562446	1					
ANR	5562477	ExpressionStatement	m_need_output_for_quit = false	120:1:3193:3223	5562446	7	True				
ANR	5562478	AssignmentExpression	m_need_output_for_quit = false		5562446	0		=			
ANR	5562479	Identifier	m_need_output_for_quit		5562446	0					
ANR	5562480	Identifier	false		5562446	1					
ANR	5562481	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""Constructed VMGahp\\n"" )"	121:1:3226:3271	5562446	8	True				
ANR	5562482	CallExpression	"vmprintf ( D_FULLDEBUG , ""Constructed VMGahp\\n"" )"		5562446	0					
ANR	5562483	Callee	vmprintf		5562446	0					
ANR	5562484	Identifier	vmprintf		5562446	0					
ANR	5562485	ArgumentList	D_FULLDEBUG		5562446	1					
ANR	5562486	Argument	D_FULLDEBUG		5562446	0					
ANR	5562487	Identifier	D_FULLDEBUG		5562446	0					
ANR	5562488	Argument	"""Constructed VMGahp\\n"""		5562446	1					
ANR	5562489	PrimaryExpression	"""Constructed VMGahp\\n"""		5562446	0					
ANR	5562490	Identifier	VMGahp :: VMGahp		5562446	1					
ANR	5562491	ParameterList	"VMGahpConfig * config , const char * iwd"		5562446	2					
ANR	5562492	Parameter	VMGahpConfig * config	108:15:2950:2969	5562446	0	True				
ANR	5562493	ParameterType	VMGahpConfig *		5562446	0					
ANR	5562494	Identifier	config		5562446	1					
ANR	5562495	Parameter	const char * iwd	108:37:2972:2986	5562446	1	True				
ANR	5562496	ParameterType	const char *		5562446	0					
ANR	5562497	Identifier	iwd		5562446	1					
ANR	5562498	CFGEntryNode	ENTRY		5562446		True				
ANR	5562499	CFGExitNode	EXIT		5562446		True				
ANR	5562500	Symbol	m_new_results_signaled		5562446						
ANR	5562501	Symbol	m_need_output_for_quit		5562446						
ANR	5562502	Symbol	NULL		5562446						
ANR	5562503	Symbol	m_jobAd		5562446						
ANR	5562504	Symbol	m_gahp_config		5562446						
ANR	5562505	Symbol	m_max_vm_id		5562446						
ANR	5562506	Symbol	false		5562446						
ANR	5562507	Symbol	m_inClassAd		5562446						
ANR	5562508	Symbol	D_FULLDEBUG		5562446						
ANR	5562509	Symbol	m_workingdir		5562446						
ANR	5562510	Symbol	m_async_mode		5562446						
ANR	5562511	Symbol	iwd		5562446						
ANR	5562512	Symbol	true		5562446						
ANR	5562513	Symbol	config		5562446						
ANR	5562514	Function	VMGahp :: ~VMGahp	124:0:3276:3396							
ANR	5562515	FunctionDef	VMGahp :: ~VMGahp ()		5562514	0					
ANR	5562516	CompoundStatement		125:0:3294:3396	5562514	0					
ANR	5562517	ExpressionStatement	cleanUp ( )	126:1:3297:3306	5562514	0	True				
ANR	5562518	CallExpression	cleanUp ( )		5562514	0					
ANR	5562519	Callee	cleanUp		5562514	0					
ANR	5562520	Identifier	cleanUp		5562514	0					
ANR	5562521	ArgumentList			5562514	1					
ANR	5562522	IfStatement	if ( m_gahp_config )		5562514	1					
ANR	5562523	Condition	m_gahp_config	127:5:3313:3325	5562514	0	True				
ANR	5562524	Identifier	m_gahp_config		5562514	0					
ANR	5562525	CompoundStatement		3:21:34:34	5562514	1					
ANR	5562526	Statement	delete	128:2:3333:3338	5562514	0	True				
ANR	5562527	ExpressionStatement	m_gahp_config	128:9:3340:3353	5562514	1	True				
ANR	5562528	Identifier	m_gahp_config		5562514	0					
ANR	5562529	IfStatement	if ( m_jobAd )		5562514	2					
ANR	5562530	Condition	m_jobAd	130:5:3363:3369	5562514	0	True				
ANR	5562531	Identifier	m_jobAd		5562514	0					
ANR	5562532	CompoundStatement		6:15:78:78	5562514	1					
ANR	5562533	Statement	delete	131:2:3377:3382	5562514	0	True				
ANR	5562534	ExpressionStatement	m_jobAd	131:9:3384:3391	5562514	1	True				
ANR	5562535	Identifier	m_jobAd		5562514	0					
ANR	5562536	Identifier	VMGahp :: ~VMGahp		5562514	1					
ANR	5562537	ParameterList			5562514	2					
ANR	5562538	CFGEntryNode	ENTRY		5562514		True				
ANR	5562539	CFGExitNode	EXIT		5562514		True				
ANR	5562540	Symbol	m_gahp_config		5562514						
ANR	5562541	Symbol	m_jobAd		5562514						
ANR	5562542	Function	VMGahp :: startUp	135:0:3399:5366							
ANR	5562543	FunctionDef	VMGahp :: startUp ()		5562542	0					
ANR	5562544	CompoundStatement		137:0:3422:5366	5562542	0					
ANR	5562545	IfStatement	if ( ( vmgahp_mode == VMGAHP_TEST_MODE ) || ( vmgahp_mode == VMGAHP_KILL_MODE ) )		5562542	0					
ANR	5562546	Condition	( vmgahp_mode == VMGAHP_TEST_MODE ) || ( vmgahp_mode == VMGAHP_KILL_MODE )	138:5:3429:3500	5562542	0	True				
ANR	5562547	OrExpression	( vmgahp_mode == VMGAHP_TEST_MODE ) || ( vmgahp_mode == VMGAHP_KILL_MODE )		5562542	0		||			
ANR	5562548	EqualityExpression	vmgahp_mode == VMGAHP_TEST_MODE		5562542	0		==			
ANR	5562549	Identifier	vmgahp_mode		5562542	0					
ANR	5562550	Identifier	VMGAHP_TEST_MODE		5562542	1					
ANR	5562551	EqualityExpression	vmgahp_mode == VMGAHP_KILL_MODE		5562542	1		==			
ANR	5562552	Identifier	vmgahp_mode		5562542	0					
ANR	5562553	Identifier	VMGAHP_KILL_MODE		5562542	1					
ANR	5562554	CompoundStatement		3:37:80:80	5562542	1					
ANR	5562555	ReturnStatement	return ;	140:2:3507:3513	5562542	0	True				
ANR	5562556	IdentifierDeclStatement	int stdin_pipe = - 1 ;	144:1:3551:3570	5562542	1	True				
ANR	5562557	IdentifierDecl	stdin_pipe = - 1		5562542	0					
ANR	5562558	IdentifierDeclType	int		5562542	0					
ANR	5562559	Identifier	stdin_pipe		5562542	1					
ANR	5562560	AssignmentExpression	stdin_pipe = - 1		5562542	2		=			
ANR	5562561	Identifier	stdin_pipe		5562542	0					
ANR	5562562	UnaryOperationExpression	- 1		5562542	1					
ANR	5562563	UnaryOperator	-		5562542	0					
ANR	5562564	PrimaryExpression	1		5562542	1					
ANR	5562565	IfStatement	if ( daemonCore -> InfoCommandSinfulString ( daemonCore -> getppid ( ) ) == NULL )		5562542	2					
ANR	5562566	Condition	daemonCore -> InfoCommandSinfulString ( daemonCore -> getppid ( ) ) == NULL	152:6:3840:3905	5562542	0	True				
ANR	5562567	EqualityExpression	daemonCore -> InfoCommandSinfulString ( daemonCore -> getppid ( ) ) == NULL		5562542	0		==			
ANR	5562568	CallExpression	daemonCore -> InfoCommandSinfulString ( daemonCore -> getppid ( ) )		5562542	0					
ANR	5562569	Callee	daemonCore -> InfoCommandSinfulString		5562542	0					
ANR	5562570	PtrMemberAccess	daemonCore -> InfoCommandSinfulString		5562542	0					
ANR	5562571	Identifier	daemonCore		5562542	0					
ANR	5562572	Identifier	InfoCommandSinfulString		5562542	1					
ANR	5562573	ArgumentList	daemonCore -> getppid ( )		5562542	1					
ANR	5562574	Argument	daemonCore -> getppid ( )		5562542	0					
ANR	5562575	CallExpression	daemonCore -> getppid ( )		5562542	0					
ANR	5562576	Callee	daemonCore -> getppid		5562542	0					
ANR	5562577	PtrMemberAccess	daemonCore -> getppid		5562542	0					
ANR	5562578	Identifier	daemonCore		5562542	0					
ANR	5562579	Identifier	getppid		5562542	1					
ANR	5562580	ArgumentList			5562542	1					
ANR	5562581	Identifier	NULL		5562542	1					
ANR	5562582	CompoundStatement		27:2:770:1251	5562542	1					
ANR	5562583	Statement	vmprintf	154:2:3913:3920	5562542	0	True				
ANR	5562584	Statement	(	154:10:3921:3921	5562542	1	True				
ANR	5562585	Statement	D_ALWAYS	154:11:3922:3929	5562542	2	True				
ANR	5562586	Statement	","	154:19:3930:3930	5562542	3	True				
ANR	5562587	Statement	"""parent is not DaemonCore: """	154:21:3932:3959	5562542	4	True				
ANR	5562588	Statement	"""creating a forwarding thread\\n"""	155:4:3965:3996	5562542	5	True				
ANR	5562589	Statement	)	155:36:3997:3997	5562542	6	True				
ANR	5562590	ExpressionStatement		155:37:3998:3998	5562542	7	True				
ANR	5562591	IdentifierDeclStatement	int pipe_ends [ 2 ] ;	157:2:4003:4019	5562542	8	True				
ANR	5562592	IdentifierDecl	pipe_ends [ 2 ]		5562542	0					
ANR	5562593	IdentifierDeclType	int [ 2 ]		5562542	0					
ANR	5562594	Identifier	pipe_ends		5562542	1					
ANR	5562595	PrimaryExpression	2		5562542	2					
ANR	5562596	IfStatement	"if ( daemonCore -> Create_Pipe ( pipe_ends , true ) == FALSE )"		5562542	9					
ANR	5562597	Condition	"daemonCore -> Create_Pipe ( pipe_ends , true ) == FALSE"	158:6:4027:4075	5562542	0	True				
ANR	5562598	EqualityExpression	"daemonCore -> Create_Pipe ( pipe_ends , true ) == FALSE"		5562542	0		==			
ANR	5562599	CallExpression	"daemonCore -> Create_Pipe ( pipe_ends , true )"		5562542	0					
ANR	5562600	Callee	daemonCore -> Create_Pipe		5562542	0					
ANR	5562601	PtrMemberAccess	daemonCore -> Create_Pipe		5562542	0					
ANR	5562602	Identifier	daemonCore		5562542	0					
ANR	5562603	Identifier	Create_Pipe		5562542	1					
ANR	5562604	ArgumentList	pipe_ends		5562542	1					
ANR	5562605	Argument	pipe_ends		5562542	0					
ANR	5562606	Identifier	pipe_ends		5562542	0					
ANR	5562607	Argument	true		5562542	1					
ANR	5562608	Identifier	true		5562542	0					
ANR	5562609	Identifier	FALSE		5562542	1					
ANR	5562610	CompoundStatement		22:57:655:655	5562542	1					
ANR	5562611	ExpressionStatement	"vmprintf ( D_ALWAYS , ""failed to create forwarding pipe"" )"	159:3:4083:4136	5562542	0	True				
ANR	5562612	CallExpression	"vmprintf ( D_ALWAYS , ""failed to create forwarding pipe"" )"		5562542	0					
ANR	5562613	Callee	vmprintf		5562542	0					
ANR	5562614	Identifier	vmprintf		5562542	0					
ANR	5562615	ArgumentList	D_ALWAYS		5562542	1					
ANR	5562616	Argument	D_ALWAYS		5562542	0					
ANR	5562617	Identifier	D_ALWAYS		5562542	0					
ANR	5562618	Argument	"""failed to create forwarding pipe"""		5562542	1					
ANR	5562619	PrimaryExpression	"""failed to create forwarding pipe"""		5562542	0					
ANR	5562620	ExpressionStatement	DC_Exit ( 1 )	160:3:4141:4151	5562542	1	True				
ANR	5562621	CallExpression	DC_Exit ( 1 )		5562542	0					
ANR	5562622	Callee	DC_Exit		5562542	0					
ANR	5562623	Identifier	DC_Exit		5562542	0					
ANR	5562624	ArgumentList	1		5562542	1					
ANR	5562625	Argument	1		5562542	0					
ANR	5562626	PrimaryExpression	1		5562542	0					
ANR	5562627	ExpressionStatement	forwarding_pipe = pipe_ends [ 1 ]	162:2:4159:4189	5562542	10	True				
ANR	5562628	AssignmentExpression	forwarding_pipe = pipe_ends [ 1 ]		5562542	0		=			
ANR	5562629	Identifier	forwarding_pipe		5562542	0					
ANR	5562630	ArrayIndexing	pipe_ends [ 1 ]		5562542	1					
ANR	5562631	Identifier	pipe_ends		5562542	0					
ANR	5562632	PrimaryExpression	1		5562542	1					
ANR	5562633	IdentifierDeclStatement	"HANDLE thread_handle = ( HANDLE ) _beginthreadex ( NULL , 0 , pipe_forward_thread , NULL , 0 , NULL ) ;"	163:2:4193:4674	5562542	11	True				
ANR	5562634	IdentifierDecl	"thread_handle = ( HANDLE ) _beginthreadex ( NULL , 0 , pipe_forward_thread , NULL , 0 , NULL )"		5562542	0					
ANR	5562635	IdentifierDeclType	HANDLE		5562542	0					
ANR	5562636	Identifier	thread_handle		5562542	1					
ANR	5562637	AssignmentExpression	"thread_handle = ( HANDLE ) _beginthreadex ( NULL , 0 , pipe_forward_thread , NULL , 0 , NULL )"		5562542	2		=			
ANR	5562638	Identifier	thread_handle		5562542	0					
ANR	5562639	CastExpression	"( HANDLE ) _beginthreadex ( NULL , 0 , pipe_forward_thread , NULL , 0 , NULL )"		5562542	1					
ANR	5562640	CastTarget	HANDLE		5562542	0					
ANR	5562641	CallExpression	"_beginthreadex ( NULL , 0 , pipe_forward_thread , NULL , 0 , NULL )"		5562542	1					
ANR	5562642	Callee	_beginthreadex		5562542	0					
ANR	5562643	Identifier	_beginthreadex		5562542	0					
ANR	5562644	ArgumentList	NULL		5562542	1					
ANR	5562645	Argument	NULL		5562542	0					
ANR	5562646	Identifier	NULL		5562542	0					
ANR	5562647	Argument	0		5562542	1					
ANR	5562648	PrimaryExpression	0		5562542	0					
ANR	5562649	Argument	pipe_forward_thread		5562542	2					
ANR	5562650	Identifier	pipe_forward_thread		5562542	0					
ANR	5562651	Argument	NULL		5562542	3					
ANR	5562652	Identifier	NULL		5562542	0					
ANR	5562653	Argument	0		5562542	4					
ANR	5562654	PrimaryExpression	0		5562542	0					
ANR	5562655	Argument	NULL		5562542	5					
ANR	5562656	Identifier	NULL		5562542	0					
ANR	5562657	IfStatement	if ( thread_handle == NULL )		5562542	12					
ANR	5562658	Condition	thread_handle == NULL	169:6:4726:4746	5562542	0	True				
ANR	5562659	EqualityExpression	thread_handle == NULL		5562542	0		==			
ANR	5562660	Identifier	thread_handle		5562542	0					
ANR	5562661	Identifier	NULL		5562542	1					
ANR	5562662	CompoundStatement		33:29:1326:1326	5562542	1					
ANR	5562663	ExpressionStatement	"vmprintf ( D_ALWAYS , ""failed to create forwarding thread"" )"	170:3:4754:4809	5562542	0	True				
ANR	5562664	CallExpression	"vmprintf ( D_ALWAYS , ""failed to create forwarding thread"" )"		5562542	0					
ANR	5562665	Callee	vmprintf		5562542	0					
ANR	5562666	Identifier	vmprintf		5562542	0					
ANR	5562667	ArgumentList	D_ALWAYS		5562542	1					
ANR	5562668	Argument	D_ALWAYS		5562542	0					
ANR	5562669	Identifier	D_ALWAYS		5562542	0					
ANR	5562670	Argument	"""failed to create forwarding thread"""		5562542	1					
ANR	5562671	PrimaryExpression	"""failed to create forwarding thread"""		5562542	0					
ANR	5562672	ExpressionStatement	DC_Exit ( 1 )	171:3:4814:4824	5562542	1	True				
ANR	5562673	CallExpression	DC_Exit ( 1 )		5562542	0					
ANR	5562674	Callee	DC_Exit		5562542	0					
ANR	5562675	Identifier	DC_Exit		5562542	0					
ANR	5562676	ArgumentList	1		5562542	1					
ANR	5562677	Argument	1		5562542	0					
ANR	5562678	PrimaryExpression	1		5562542	0					
ANR	5562679	ExpressionStatement	CloseHandle ( thread_handle )	173:2:4832:4858	5562542	13	True				
ANR	5562680	CallExpression	CloseHandle ( thread_handle )		5562542	0					
ANR	5562681	Callee	CloseHandle		5562542	0					
ANR	5562682	Identifier	CloseHandle		5562542	0					
ANR	5562683	ArgumentList	thread_handle		5562542	1					
ANR	5562684	Argument	thread_handle		5562542	0					
ANR	5562685	Identifier	thread_handle		5562542	0					
ANR	5562686	ExpressionStatement	stdin_pipe = pipe_ends [ 0 ]	174:2:4862:4887	5562542	14	True				
ANR	5562687	AssignmentExpression	stdin_pipe = pipe_ends [ 0 ]		5562542	0		=			
ANR	5562688	Identifier	stdin_pipe		5562542	0					
ANR	5562689	ArrayIndexing	pipe_ends [ 0 ]		5562542	1					
ANR	5562690	Identifier	pipe_ends		5562542	0					
ANR	5562691	PrimaryExpression	0		5562542	1					
ANR	5562692	IfStatement	if ( stdin_pipe == - 1 )		5562542	3					
ANR	5562693	Condition	stdin_pipe == - 1	178:5:4905:4920	5562542	0	True				
ANR	5562694	EqualityExpression	stdin_pipe == - 1		5562542	0		==			
ANR	5562695	Identifier	stdin_pipe		5562542	0					
ANR	5562696	UnaryOperationExpression	- 1		5562542	1					
ANR	5562697	UnaryOperator	-		5562542	0					
ANR	5562698	PrimaryExpression	1		5562542	1					
ANR	5562699	CompoundStatement		42:24:1501:1501	5562542	1					
ANR	5562700	ExpressionStatement	"stdin_pipe = daemonCore -> Inherit_Pipe ( fileno ( stdin ) , false , true , false )"	179:2:4928:5041	5562542	0	True				
ANR	5562701	AssignmentExpression	"stdin_pipe = daemonCore -> Inherit_Pipe ( fileno ( stdin ) , false , true , false )"		5562542	0		=			
ANR	5562702	Identifier	stdin_pipe		5562542	0					
ANR	5562703	CallExpression	"daemonCore -> Inherit_Pipe ( fileno ( stdin ) , false , true , false )"		5562542	1					
ANR	5562704	Callee	daemonCore -> Inherit_Pipe		5562542	0					
ANR	5562705	PtrMemberAccess	daemonCore -> Inherit_Pipe		5562542	0					
ANR	5562706	Identifier	daemonCore		5562542	0					
ANR	5562707	Identifier	Inherit_Pipe		5562542	1					
ANR	5562708	ArgumentList	fileno ( stdin )		5562542	1					
ANR	5562709	Argument	fileno ( stdin )		5562542	0					
ANR	5562710	CallExpression	fileno ( stdin )		5562542	0					
ANR	5562711	Callee	fileno		5562542	0					
ANR	5562712	Identifier	fileno		5562542	0					
ANR	5562713	ArgumentList	stdin		5562542	1					
ANR	5562714	Argument	stdin		5562542	0					
ANR	5562715	Identifier	stdin		5562542	0					
ANR	5562716	Argument	false		5562542	1					
ANR	5562717	Identifier	false		5562542	0					
ANR	5562718	Argument	true		5562542	2					
ANR	5562719	Identifier	true		5562542	0					
ANR	5562720	Argument	false		5562542	3					
ANR	5562721	Identifier	false		5562542	0					
ANR	5562722	IfStatement	if ( stdin_pipe == - 1 )		5562542	4					
ANR	5562723	Condition	stdin_pipe == - 1	185:5:5064:5079	5562542	0	True				
ANR	5562724	EqualityExpression	stdin_pipe == - 1		5562542	0		==			
ANR	5562725	Identifier	stdin_pipe		5562542	0					
ANR	5562726	UnaryOperationExpression	- 1		5562542	1					
ANR	5562727	UnaryOperator	-		5562542	0					
ANR	5562728	PrimaryExpression	1		5562542	1					
ANR	5562729	CompoundStatement		49:24:1660:1660	5562542	1					
ANR	5562730	ExpressionStatement	"vmprintf ( D_ALWAYS , ""Can't get stdin pipe"" )"	186:3:5088:5129	5562542	0	True				
ANR	5562731	CallExpression	"vmprintf ( D_ALWAYS , ""Can't get stdin pipe"" )"		5562542	0					
ANR	5562732	Callee	vmprintf		5562542	0					
ANR	5562733	Identifier	vmprintf		5562542	0					
ANR	5562734	ArgumentList	D_ALWAYS		5562542	1					
ANR	5562735	Argument	D_ALWAYS		5562542	0					
ANR	5562736	Identifier	D_ALWAYS		5562542	0					
ANR	5562737	Argument	"""Can't get stdin pipe"""		5562542	1					
ANR	5562738	PrimaryExpression	"""Can't get stdin pipe"""		5562542	0					
ANR	5562739	ExpressionStatement	DC_Exit ( 1 )	187:3:5134:5144	5562542	1	True				
ANR	5562740	CallExpression	DC_Exit ( 1 )		5562542	0					
ANR	5562741	Callee	DC_Exit		5562542	0					
ANR	5562742	Identifier	DC_Exit		5562542	0					
ANR	5562743	ArgumentList	1		5562542	1					
ANR	5562744	Argument	1		5562542	0					
ANR	5562745	PrimaryExpression	1		5562542	0					
ANR	5562746	ExpressionStatement	m_request_buffer . setPipeEnd ( stdin_pipe )	190:1:5151:5190	5562542	5	True				
ANR	5562747	CallExpression	m_request_buffer . setPipeEnd ( stdin_pipe )		5562542	0					
ANR	5562748	Callee	m_request_buffer . setPipeEnd		5562542	0					
ANR	5562749	MemberAccess	m_request_buffer . setPipeEnd		5562542	0					
ANR	5562750	Identifier	m_request_buffer		5562542	0					
ANR	5562751	Identifier	setPipeEnd		5562542	1					
ANR	5562752	ArgumentList	stdin_pipe		5562542	1					
ANR	5562753	Argument	stdin_pipe		5562542	0					
ANR	5562754	Identifier	stdin_pipe		5562542	0					
ANR	5562755	ExpressionStatement	"( void ) daemonCore -> Register_Pipe ( m_request_buffer . getPipeEnd ( ) , ""stdin_pipe"" , static_cast < PipeHandlercpp > ( & VMGahp :: waitForCommand ) , ""VMGahp::waitForCommand"" , this )"	191:1:5193:5364	5562542	6	True				
ANR	5562756	CastExpression	"( void ) daemonCore -> Register_Pipe ( m_request_buffer . getPipeEnd ( ) , ""stdin_pipe"" , static_cast < PipeHandlercpp > ( & VMGahp :: waitForCommand ) , ""VMGahp::waitForCommand"" , this )"		5562542	0					
ANR	5562757	CastTarget	void		5562542	0					
ANR	5562758	CallExpression	"daemonCore -> Register_Pipe ( m_request_buffer . getPipeEnd ( ) , ""stdin_pipe"" , static_cast < PipeHandlercpp > ( & VMGahp :: waitForCommand ) , ""VMGahp::waitForCommand"" , this )"		5562542	1					
ANR	5562759	Callee	daemonCore -> Register_Pipe		5562542	0					
ANR	5562760	PtrMemberAccess	daemonCore -> Register_Pipe		5562542	0					
ANR	5562761	Identifier	daemonCore		5562542	0					
ANR	5562762	Identifier	Register_Pipe		5562542	1					
ANR	5562763	ArgumentList	m_request_buffer . getPipeEnd ( )		5562542	1					
ANR	5562764	Argument	m_request_buffer . getPipeEnd ( )		5562542	0					
ANR	5562765	CallExpression	m_request_buffer . getPipeEnd ( )		5562542	0					
ANR	5562766	Callee	m_request_buffer . getPipeEnd		5562542	0					
ANR	5562767	MemberAccess	m_request_buffer . getPipeEnd		5562542	0					
ANR	5562768	Identifier	m_request_buffer		5562542	0					
ANR	5562769	Identifier	getPipeEnd		5562542	1					
ANR	5562770	ArgumentList			5562542	1					
ANR	5562771	Argument	"""stdin_pipe"""		5562542	1					
ANR	5562772	PrimaryExpression	"""stdin_pipe"""		5562542	0					
ANR	5562773	Argument	static_cast < PipeHandlercpp > ( & VMGahp :: waitForCommand )		5562542	2					
ANR	5562774	RelationalExpression	static_cast < PipeHandlercpp > ( & VMGahp :: waitForCommand )		5562542	0		<			
ANR	5562775	Identifier	static_cast		5562542	0					
ANR	5562776	RelationalExpression	PipeHandlercpp > ( & VMGahp :: waitForCommand )		5562542	1		>			
ANR	5562777	Identifier	PipeHandlercpp		5562542	0					
ANR	5562778	UnaryOperationExpression	& VMGahp :: waitForCommand		5562542	1					
ANR	5562779	UnaryOperator	&		5562542	0					
ANR	5562780	Identifier	VMGahp :: waitForCommand		5562542	1					
ANR	5562781	Argument	"""VMGahp::waitForCommand"""		5562542	3					
ANR	5562782	PrimaryExpression	"""VMGahp::waitForCommand"""		5562542	0					
ANR	5562783	Argument	this		5562542	4					
ANR	5562784	Identifier	this		5562542	0					
ANR	5562785	ReturnType	void		5562542	1					
ANR	5562786	Identifier	VMGahp :: startUp		5562542	2					
ANR	5562787	ParameterList			5562542	3					
ANR	5562788	CFGEntryNode	ENTRY		5562542		True				
ANR	5562789	CFGExitNode	EXIT		5562542		True				
ANR	5562790	Symbol	stdin		5562542						
ANR	5562791	Symbol	m_request_buffer . getPipeEnd		5562542						
ANR	5562792	Symbol	_beginthreadex		5562542						
ANR	5562793	Symbol	thread_handle		5562542						
ANR	5562794	Symbol	stdin_pipe		5562542						
ANR	5562795	Symbol	* pipe_ends		5562542						
ANR	5562796	Symbol	PipeHandlercpp		5562542						
ANR	5562797	Symbol	vmgahp_mode		5562542						
ANR	5562798	Symbol	daemonCore		5562542						
ANR	5562799	Symbol	VMGAHP_KILL_MODE		5562542						
ANR	5562800	Symbol	pipe_ends		5562542						
ANR	5562801	Symbol	daemonCore -> InfoCommandSinfulString		5562542						
ANR	5562802	Symbol	pipe_forward_thread		5562542						
ANR	5562803	Symbol	NULL		5562542						
ANR	5562804	Symbol	forwarding_pipe		5562542						
ANR	5562805	Symbol	D_ALWAYS		5562542						
ANR	5562806	Symbol	false		5562542						
ANR	5562807	Symbol	this		5562542						
ANR	5562808	Symbol	daemonCore -> Inherit_Pipe		5562542						
ANR	5562809	Symbol	& VMGahp :: waitForCommand		5562542						
ANR	5562810	Symbol	static_cast		5562542						
ANR	5562811	Symbol	daemonCore -> getppid		5562542						
ANR	5562812	Symbol	fileno		5562542						
ANR	5562813	Symbol	* daemonCore		5562542						
ANR	5562814	Symbol	true		5562542						
ANR	5562815	Symbol	daemonCore -> Create_Pipe		5562542						
ANR	5562816	Symbol	FALSE		5562542						
ANR	5562817	Symbol	m_request_buffer		5562542						
ANR	5562818	Symbol	VMGAHP_TEST_MODE		5562542						
ANR	5562819	Function	VMGahp :: cleanUp	197:0:5369:6314							
ANR	5562820	FunctionDef	VMGahp :: cleanUp ()		5562819	0					
ANR	5562821	CompoundStatement		199:0:5392:6314	5562819	0					
ANR	5562822	Statement	static	200:1:5395:5400	5562819	0	True				
ANR	5562823	IdentifierDeclStatement	bool is_called = false ;	200:8:5402:5424	5562819	1	True				
ANR	5562824	IdentifierDecl	is_called = false		5562819	0					
ANR	5562825	IdentifierDeclType	bool		5562819	0					
ANR	5562826	Identifier	is_called		5562819	1					
ANR	5562827	AssignmentExpression	is_called = false		5562819	2		=			
ANR	5562828	Identifier	false		5562819	0					
ANR	5562829	Identifier	false		5562819	1					
ANR	5562830	IfStatement	if ( is_called )		5562819	2					
ANR	5562831	Condition	is_called	202:5:5432:5440	5562819	0	True				
ANR	5562832	Identifier	is_called		5562819	0					
ANR	5562833	CompoundStatement		4:17:51:51	5562819	1					
ANR	5562834	ReturnStatement	return ;	203:2:5448:5454	5562819	0	True				
ANR	5562835	ExpressionStatement	is_called = true	205:1:5460:5476	5562819	3	True				
ANR	5562836	AssignmentExpression	is_called = true		5562819	0		=			
ANR	5562837	Identifier	is_called		5562819	0					
ANR	5562838	Identifier	true		5562819	1					
ANR	5562839	IdentifierDeclStatement	int currentkey = 0 ;	208:1:5496:5514	5562819	4	True				
ANR	5562840	IdentifierDecl	currentkey = 0		5562819	0					
ANR	5562841	IdentifierDeclType	int		5562819	0					
ANR	5562842	Identifier	currentkey		5562819	1					
ANR	5562843	AssignmentExpression	currentkey = 0		5562819	2		=			
ANR	5562844	Identifier	currentkey		5562819	0					
ANR	5562845	PrimaryExpression	0		5562819	1					
ANR	5562846	IdentifierDeclStatement	VMRequest * req = NULL ;	209:1:5517:5538	5562819	5	True				
ANR	5562847	IdentifierDecl	* req = NULL		5562819	0					
ANR	5562848	IdentifierDeclType	VMRequest *		5562819	0					
ANR	5562849	Identifier	req		5562819	1					
ANR	5562850	AssignmentExpression	* req = NULL		5562819	2		=			
ANR	5562851	Identifier	NULL		5562819	0					
ANR	5562852	Identifier	NULL		5562819	1					
ANR	5562853	ExpressionStatement	m_pending_req_table . startIterations ( )	210:1:5541:5578	5562819	6	True				
ANR	5562854	CallExpression	m_pending_req_table . startIterations ( )		5562819	0					
ANR	5562855	Callee	m_pending_req_table . startIterations		5562819	0					
ANR	5562856	MemberAccess	m_pending_req_table . startIterations		5562819	0					
ANR	5562857	Identifier	m_pending_req_table		5562819	0					
ANR	5562858	Identifier	startIterations		5562819	1					
ANR	5562859	ArgumentList			5562819	1					
ANR	5562860	WhileStatement	"while ( m_pending_req_table . iterate ( currentkey , req ) != 0 )"		5562819	7					
ANR	5562861	Condition	"m_pending_req_table . iterate ( currentkey , req ) != 0"	211:8:5588:5636	5562819	0	True				
ANR	5562862	EqualityExpression	"m_pending_req_table . iterate ( currentkey , req ) != 0"		5562819	0		!=			
ANR	5562863	CallExpression	"m_pending_req_table . iterate ( currentkey , req )"		5562819	0					
ANR	5562864	Callee	m_pending_req_table . iterate		5562819	0					
ANR	5562865	MemberAccess	m_pending_req_table . iterate		5562819	0					
ANR	5562866	Identifier	m_pending_req_table		5562819	0					
ANR	5562867	Identifier	iterate		5562819	1					
ANR	5562868	ArgumentList	currentkey		5562819	1					
ANR	5562869	Argument	currentkey		5562819	0					
ANR	5562870	Identifier	currentkey		5562819	0					
ANR	5562871	Argument	req		5562819	1					
ANR	5562872	Identifier	req		5562819	0					
ANR	5562873	PrimaryExpression	0		5562819	1					
ANR	5562874	CompoundStatement		13:60:247:247	5562819	1					
ANR	5562875	IfStatement	if ( req )		5562819	0					
ANR	5562876	Condition	req	212:6:5648:5650	5562819	0	True				
ANR	5562877	Identifier	req		5562819	0					
ANR	5562878	CompoundStatement		14:12:261:261	5562819	1					
ANR	5562879	Statement	delete	213:3:5659:5664	5562819	0	True				
ANR	5562880	ExpressionStatement	req	213:10:5666:5669	5562819	1	True				
ANR	5562881	Identifier	req		5562819	0					
ANR	5562882	ExpressionStatement	m_pending_req_table . clear ( )	216:1:5679:5706	5562819	8	True				
ANR	5562883	CallExpression	m_pending_req_table . clear ( )		5562819	0					
ANR	5562884	Callee	m_pending_req_table . clear		5562819	0					
ANR	5562885	MemberAccess	m_pending_req_table . clear		5562819	0					
ANR	5562886	Identifier	m_pending_req_table		5562819	0					
ANR	5562887	Identifier	clear		5562819	1					
ANR	5562888	ArgumentList			5562819	1					
ANR	5562889	ExpressionStatement	m_result_list . clearAll ( )	218:1:5710:5734	5562819	9	True				
ANR	5562890	CallExpression	m_result_list . clearAll ( )		5562819	0					
ANR	5562891	Callee	m_result_list . clearAll		5562819	0					
ANR	5562892	MemberAccess	m_result_list . clearAll		5562819	0					
ANR	5562893	Identifier	m_result_list		5562819	0					
ANR	5562894	Identifier	clearAll		5562819	1					
ANR	5562895	ArgumentList			5562819	1					
ANR	5562896	IdentifierDeclStatement	VMType * vm = NULL ;	221:1:5753:5770	5562819	10	True				
ANR	5562897	IdentifierDecl	* vm = NULL		5562819	0					
ANR	5562898	IdentifierDeclType	VMType *		5562819	0					
ANR	5562899	Identifier	vm		5562819	1					
ANR	5562900	AssignmentExpression	* vm = NULL		5562819	2		=			
ANR	5562901	Identifier	NULL		5562819	0					
ANR	5562902	Identifier	NULL		5562819	1					
ANR	5562903	ExpressionStatement	m_vm_list . Rewind ( )	222:1:5773:5791	5562819	11	True				
ANR	5562904	CallExpression	m_vm_list . Rewind ( )		5562819	0					
ANR	5562905	Callee	m_vm_list . Rewind		5562819	0					
ANR	5562906	MemberAccess	m_vm_list . Rewind		5562819	0					
ANR	5562907	Identifier	m_vm_list		5562819	0					
ANR	5562908	Identifier	Rewind		5562819	1					
ANR	5562909	ArgumentList			5562819	1					
ANR	5562910	WhileStatement	while ( m_vm_list . Next ( vm ) )		5562819	12					
ANR	5562911	Condition	m_vm_list . Next ( vm )	223:8:5801:5818	5562819	0	True				
ANR	5562912	CallExpression	m_vm_list . Next ( vm )		5562819	0					
ANR	5562913	Callee	m_vm_list . Next		5562819	0					
ANR	5562914	MemberAccess	m_vm_list . Next		5562819	0					
ANR	5562915	Identifier	m_vm_list		5562819	0					
ANR	5562916	Identifier	Next		5562819	1					
ANR	5562917	ArgumentList	vm		5562819	1					
ANR	5562918	Argument	vm		5562819	0					
ANR	5562919	Identifier	vm		5562819	0					
ANR	5562920	CompoundStatement		25:29:429:429	5562819	1					
ANR	5562921	ExpressionStatement	m_vm_list . DeleteCurrent ( )	224:2:5826:5851	5562819	0	True				
ANR	5562922	CallExpression	m_vm_list . DeleteCurrent ( )		5562819	0					
ANR	5562923	Callee	m_vm_list . DeleteCurrent		5562819	0					
ANR	5562924	MemberAccess	m_vm_list . DeleteCurrent		5562819	0					
ANR	5562925	Identifier	m_vm_list		5562819	0					
ANR	5562926	Identifier	DeleteCurrent		5562819	1					
ANR	5562927	ArgumentList			5562819	1					
ANR	5562928	Statement	delete	225:2:5855:5860	5562819	1	True				
ANR	5562929	ExpressionStatement	vm	225:9:5862:5864	5562819	2	True				
ANR	5562930	Identifier	vm		5562819	0					
ANR	5562931	IfStatement	if ( vmgahp_stderr_tid != - 1 )		5562819	13					
ANR	5562932	Condition	vmgahp_stderr_tid != - 1	229:5:5904:5926	5562819	0	True				
ANR	5562933	EqualityExpression	vmgahp_stderr_tid != - 1		5562819	0		!=			
ANR	5562934	Identifier	vmgahp_stderr_tid		5562819	0					
ANR	5562935	UnaryOperationExpression	- 1		5562819	1					
ANR	5562936	UnaryOperator	-		5562819	0					
ANR	5562937	PrimaryExpression	1		5562819	1					
ANR	5562938	CompoundStatement		31:31:537:537	5562819	1					
ANR	5562939	IfStatement	if ( daemonCore )		5562819	0					
ANR	5562940	Condition	daemonCore	230:6:5938:5947	5562819	0	True				
ANR	5562941	Identifier	daemonCore		5562819	0					
ANR	5562942	CompoundStatement		32:19:558:558	5562819	1					
ANR	5562943	ExpressionStatement	daemonCore -> Cancel_Timer ( vmgahp_stderr_tid )	231:3:5956:5999	5562819	0	True				
ANR	5562944	CallExpression	daemonCore -> Cancel_Timer ( vmgahp_stderr_tid )		5562819	0					
ANR	5562945	Callee	daemonCore -> Cancel_Timer		5562819	0					
ANR	5562946	PtrMemberAccess	daemonCore -> Cancel_Timer		5562819	0					
ANR	5562947	Identifier	daemonCore		5562819	0					
ANR	5562948	Identifier	Cancel_Timer		5562819	1					
ANR	5562949	ArgumentList	vmgahp_stderr_tid		5562819	1					
ANR	5562950	Argument	vmgahp_stderr_tid		5562819	0					
ANR	5562951	Identifier	vmgahp_stderr_tid		5562819	0					
ANR	5562952	ExpressionStatement	vmgahp_stderr_tid = - 1	233:2:6007:6029	5562819	1	True				
ANR	5562953	AssignmentExpression	vmgahp_stderr_tid = - 1		5562819	0		=			
ANR	5562954	Identifier	vmgahp_stderr_tid		5562819	0					
ANR	5562955	UnaryOperationExpression	- 1		5562819	1					
ANR	5562956	UnaryOperator	-		5562819	0					
ANR	5562957	PrimaryExpression	1		5562819	1					
ANR	5562958	ExpressionStatement	m_request_buffer . setPipeEnd ( - 1 )	236:1:6036:6067	5562819	14	True				
ANR	5562959	CallExpression	m_request_buffer . setPipeEnd ( - 1 )		5562819	0					
ANR	5562960	Callee	m_request_buffer . setPipeEnd		5562819	0					
ANR	5562961	MemberAccess	m_request_buffer . setPipeEnd		5562819	0					
ANR	5562962	Identifier	m_request_buffer		5562819	0					
ANR	5562963	Identifier	setPipeEnd		5562819	1					
ANR	5562964	ArgumentList	- 1		5562819	1					
ANR	5562965	Argument	- 1		5562819	0					
ANR	5562966	UnaryOperationExpression	- 1		5562819	0					
ANR	5562967	UnaryOperator	-		5562819	0					
ANR	5562968	PrimaryExpression	1		5562819	1					
ANR	5562969	ExpressionStatement	vmgahp_stderr_pipe = - 1	237:1:6070:6093	5562819	15	True				
ANR	5562970	AssignmentExpression	vmgahp_stderr_pipe = - 1		5562819	0		=			
ANR	5562971	Identifier	vmgahp_stderr_pipe		5562819	0					
ANR	5562972	UnaryOperationExpression	- 1		5562819	1					
ANR	5562973	UnaryOperator	-		5562819	0					
ANR	5562974	PrimaryExpression	1		5562819	1					
ANR	5562975	ExpressionStatement	vmgahp_stderr_buffer . setPipeEnd ( - 1 )	238:1:6096:6131	5562819	16	True				
ANR	5562976	CallExpression	vmgahp_stderr_buffer . setPipeEnd ( - 1 )		5562819	0					
ANR	5562977	Callee	vmgahp_stderr_buffer . setPipeEnd		5562819	0					
ANR	5562978	MemberAccess	vmgahp_stderr_buffer . setPipeEnd		5562819	0					
ANR	5562979	Identifier	vmgahp_stderr_buffer		5562819	0					
ANR	5562980	Identifier	setPipeEnd		5562819	1					
ANR	5562981	ArgumentList	- 1		5562819	1					
ANR	5562982	Argument	- 1		5562819	0					
ANR	5562983	UnaryOperationExpression	- 1		5562819	0					
ANR	5562984	UnaryOperator	-		5562819	0					
ANR	5562985	PrimaryExpression	1		5562819	1					
ANR	5562986	ExpressionStatement	killAllProcess ( )	241:1:6190:6206	5562819	17	True				
ANR	5562987	CallExpression	killAllProcess ( )		5562819	0					
ANR	5562988	Callee	killAllProcess		5562819	0					
ANR	5562989	Identifier	killAllProcess		5562819	0					
ANR	5562990	ArgumentList			5562819	1					
ANR	5562991	IfStatement	if ( m_need_output_for_quit )		5562819	18					
ANR	5562992	Condition	m_need_output_for_quit	243:5:6214:6235	5562819	0	True				
ANR	5562993	Identifier	m_need_output_for_quit		5562819	0					
ANR	5562994	CompoundStatement		45:30:846:846	5562819	1					
ANR	5562995	ExpressionStatement	returnOutputSuccess ( )	244:2:6243:6264	5562819	0	True				
ANR	5562996	CallExpression	returnOutputSuccess ( )		5562819	0					
ANR	5562997	Callee	returnOutputSuccess		5562819	0					
ANR	5562998	Identifier	returnOutputSuccess		5562819	0					
ANR	5562999	ArgumentList			5562819	1					
ANR	5563000	ExpressionStatement	sleep ( 2 )	245:2:6268:6276	5562819	1	True				
ANR	5563001	CallExpression	sleep ( 2 )		5562819	0					
ANR	5563002	Callee	sleep		5562819	0					
ANR	5563003	Identifier	sleep		5562819	0					
ANR	5563004	ArgumentList	2		5562819	1					
ANR	5563005	Argument	2		5562819	0					
ANR	5563006	PrimaryExpression	2		5562819	0					
ANR	5563007	ExpressionStatement	m_need_output_for_quit = false	247:1:6282:6312	5562819	19	True				
ANR	5563008	AssignmentExpression	m_need_output_for_quit = false		5562819	0		=			
ANR	5563009	Identifier	m_need_output_for_quit		5562819	0					
ANR	5563010	Identifier	false		5562819	1					
ANR	5563011	ReturnType	void		5562819	1					
ANR	5563012	Identifier	VMGahp :: cleanUp		5562819	2					
ANR	5563013	ParameterList			5562819	3					
ANR	5563014	CFGEntryNode	ENTRY		5562819		True				
ANR	5563015	CFGExitNode	EXIT		5562819		True				
ANR	5563016	Symbol	vmgahp_stderr_buffer		5562819						
ANR	5563017	Symbol	m_result_list		5562819						
ANR	5563018	Symbol	m_need_output_for_quit		5562819						
ANR	5563019	Symbol	NULL		5562819						
ANR	5563020	Symbol	false		5562819						
ANR	5563021	Symbol	vmgahp_stderr_tid		5562819						
ANR	5563022	Symbol	m_vm_list		5562819						
ANR	5563023	Symbol	is_called		5562819						
ANR	5563024	Symbol	currentkey		5562819						
ANR	5563025	Symbol	m_pending_req_table . iterate		5562819						
ANR	5563026	Symbol	vm		5562819						
ANR	5563027	Symbol	daemonCore		5562819						
ANR	5563028	Symbol	vmgahp_stderr_pipe		5562819						
ANR	5563029	Symbol	true		5562819						
ANR	5563030	Symbol	m_pending_req_table		5562819						
ANR	5563031	Symbol	m_vm_list . Next		5562819						
ANR	5563032	Symbol	m_request_buffer		5562819						
ANR	5563033	Symbol	req		5562819						
ANR	5563034	Function	VMGahp :: getNewVMId	250:0:6317:6385							
ANR	5563035	FunctionDef	VMGahp :: getNewVMId ()		5563034	0					
ANR	5563036	CompoundStatement		252:0:6346:6385	5563034	0					
ANR	5563037	ExpressionStatement	m_max_vm_id ++	253:1:6349:6362	5563034	0	True				
ANR	5563038	PostIncDecOperationExpression	m_max_vm_id ++		5563034	0					
ANR	5563039	Identifier	m_max_vm_id		5563034	0					
ANR	5563040	IncDec	++		5563034	1					
ANR	5563041	ReturnStatement	return m_max_vm_id ;	254:1:6365:6383	5563034	1	True				
ANR	5563042	Identifier	m_max_vm_id		5563034	0					
ANR	5563043	ReturnType	int		5563034	1					
ANR	5563044	Identifier	VMGahp :: getNewVMId		5563034	2					
ANR	5563045	ParameterList			5563034	3					
ANR	5563046	CFGEntryNode	ENTRY		5563034		True				
ANR	5563047	CFGExitNode	EXIT		5563034		True				
ANR	5563048	Symbol	m_max_vm_id		5563034						
ANR	5563049	Function	VMGahp :: numOfVM	257:0:6388:6445							
ANR	5563050	FunctionDef	VMGahp :: numOfVM ()		5563049	0					
ANR	5563051	CompoundStatement		259:0:6414:6445	5563049	0					
ANR	5563052	ReturnStatement	return m_vm_list . Number ( ) ;	260:2:6418:6443	5563049	0	True				
ANR	5563053	CallExpression	m_vm_list . Number ( )		5563049	0					
ANR	5563054	Callee	m_vm_list . Number		5563049	0					
ANR	5563055	MemberAccess	m_vm_list . Number		5563049	0					
ANR	5563056	Identifier	m_vm_list		5563049	0					
ANR	5563057	Identifier	Number		5563049	1					
ANR	5563058	ArgumentList			5563049	1					
ANR	5563059	ReturnType	int		5563049	1					
ANR	5563060	Identifier	VMGahp :: numOfVM		5563049	2					
ANR	5563061	ParameterList			5563049	3					
ANR	5563062	CFGEntryNode	ENTRY		5563049		True				
ANR	5563063	CFGExitNode	EXIT		5563049		True				
ANR	5563064	Symbol	m_vm_list . Number		5563049						
ANR	5563065	Symbol	m_vm_list		5563049						
ANR	5563066	Function	VMGahp :: numOfReq	263:0:6448:6528							
ANR	5563067	FunctionDef	VMGahp :: numOfReq ()		5563066	0					
ANR	5563068	CompoundStatement		265:0:6475:6528	5563066	0					
ANR	5563069	ReturnStatement	return numOfPendingReq ( ) + numOfReqWithResult ( ) ;	266:2:6479:6526	5563066	0	True				
ANR	5563070	AdditiveExpression	numOfPendingReq ( ) + numOfReqWithResult ( )		5563066	0		+			
ANR	5563071	CallExpression	numOfPendingReq ( )		5563066	0					
ANR	5563072	Callee	numOfPendingReq		5563066	0					
ANR	5563073	Identifier	numOfPendingReq		5563066	0					
ANR	5563074	ArgumentList			5563066	1					
ANR	5563075	CallExpression	numOfReqWithResult ( )		5563066	1					
ANR	5563076	Callee	numOfReqWithResult		5563066	0					
ANR	5563077	Identifier	numOfReqWithResult		5563066	0					
ANR	5563078	ArgumentList			5563066	1					
ANR	5563079	ReturnType	int		5563066	1					
ANR	5563080	Identifier	VMGahp :: numOfReq		5563066	2					
ANR	5563081	ParameterList			5563066	3					
ANR	5563082	CFGEntryNode	ENTRY		5563066		True				
ANR	5563083	CFGExitNode	EXIT		5563066		True				
ANR	5563084	Symbol	numOfReqWithResult		5563066						
ANR	5563085	Symbol	numOfPendingReq		5563066						
ANR	5563086	Function	VMGahp :: numOfPendingReq	269:0:6531:6614							
ANR	5563087	FunctionDef	VMGahp :: numOfPendingReq ()		5563086	0					
ANR	5563088	CompoundStatement		271:0:6565:6614	5563086	0					
ANR	5563089	ReturnStatement	return m_pending_req_table . getNumElements ( ) ;	272:2:6569:6612	5563086	0	True				
ANR	5563090	CallExpression	m_pending_req_table . getNumElements ( )		5563086	0					
ANR	5563091	Callee	m_pending_req_table . getNumElements		5563086	0					
ANR	5563092	MemberAccess	m_pending_req_table . getNumElements		5563086	0					
ANR	5563093	Identifier	m_pending_req_table		5563086	0					
ANR	5563094	Identifier	getNumElements		5563086	1					
ANR	5563095	ArgumentList			5563086	1					
ANR	5563096	ReturnType	int		5563086	1					
ANR	5563097	Identifier	VMGahp :: numOfPendingReq		5563086	2					
ANR	5563098	ParameterList			5563086	3					
ANR	5563099	CFGEntryNode	ENTRY		5563086		True				
ANR	5563100	CFGExitNode	EXIT		5563086		True				
ANR	5563101	Symbol	m_pending_req_table . getNumElements		5563086						
ANR	5563102	Symbol	m_pending_req_table		5563086						
ANR	5563103	Function	VMGahp :: numOfReqWithResult	275:0:6617:6689							
ANR	5563104	FunctionDef	VMGahp :: numOfReqWithResult ()		5563103	0					
ANR	5563105	CompoundStatement		277:0:6654:6689	5563103	0					
ANR	5563106	ReturnStatement	return m_result_list . number ( ) ;	278:2:6658:6687	5563103	0	True				
ANR	5563107	CallExpression	m_result_list . number ( )		5563103	0					
ANR	5563108	Callee	m_result_list . number		5563103	0					
ANR	5563109	MemberAccess	m_result_list . number		5563103	0					
ANR	5563110	Identifier	m_result_list		5563103	0					
ANR	5563111	Identifier	number		5563103	1					
ANR	5563112	ArgumentList			5563103	1					
ANR	5563113	ReturnType	int		5563103	1					
ANR	5563114	Identifier	VMGahp :: numOfReqWithResult		5563103	2					
ANR	5563115	ParameterList			5563103	3					
ANR	5563116	CFGEntryNode	ENTRY		5563103		True				
ANR	5563117	CFGExitNode	EXIT		5563103		True				
ANR	5563118	Symbol	m_result_list		5563103						
ANR	5563119	Symbol	m_result_list . number		5563103						
ANR	5563120	Function	VMGahp :: addNewRequest	281:0:6692:6909							
ANR	5563121	FunctionDef	VMGahp :: addNewRequest (const char * cmd)		5563120	0					
ANR	5563122	CompoundStatement		283:0:6743:6909	5563120	0					
ANR	5563123	IfStatement	if ( ! cmd )		5563120	0					
ANR	5563124	Condition	! cmd	284:4:6749:6752	5563120	0	True				
ANR	5563125	UnaryOperationExpression	! cmd		5563120	0					
ANR	5563126	UnaryOperator	!		5563120	0					
ANR	5563127	Identifier	cmd		5563120	1					
ANR	5563128	CompoundStatement		2:10:11:11	5563120	1					
ANR	5563129	ReturnStatement	return NULL ;	285:2:6759:6770	5563120	0	True				
ANR	5563130	Identifier	NULL		5563120	0					
ANR	5563131	IdentifierDeclStatement	VMRequest * new_req = new VMRequest ( cmd ) ;	287:1:6776:6815	5563120	1	True				
ANR	5563132	IdentifierDecl	* new_req = new VMRequest ( cmd )		5563120	0					
ANR	5563133	IdentifierDeclType	VMRequest *		5563120	0					
ANR	5563134	Identifier	new_req		5563120	1					
ANR	5563135	AssignmentExpression	* new_req = new VMRequest ( cmd )		5563120	2		=			
ANR	5563136	Identifier	cmd		5563120	0					
ANR	5563137	Identifier	cmd		5563120	1					
ANR	5563138	ExpressionStatement	ASSERT ( new_req )	288:1:6818:6833	5563120	2	True				
ANR	5563139	CallExpression	ASSERT ( new_req )		5563120	0					
ANR	5563140	Callee	ASSERT		5563120	0					
ANR	5563141	Identifier	ASSERT		5563120	0					
ANR	5563142	ArgumentList	new_req		5563120	1					
ANR	5563143	Argument	new_req		5563120	0					
ANR	5563144	Identifier	new_req		5563120	0					
ANR	5563145	ExpressionStatement	"m_pending_req_table . insert ( new_req -> m_reqid , new_req )"	290:1:6837:6890	5563120	3	True				
ANR	5563146	CallExpression	"m_pending_req_table . insert ( new_req -> m_reqid , new_req )"		5563120	0					
ANR	5563147	Callee	m_pending_req_table . insert		5563120	0					
ANR	5563148	MemberAccess	m_pending_req_table . insert		5563120	0					
ANR	5563149	Identifier	m_pending_req_table		5563120	0					
ANR	5563150	Identifier	insert		5563120	1					
ANR	5563151	ArgumentList	new_req -> m_reqid		5563120	1					
ANR	5563152	Argument	new_req -> m_reqid		5563120	0					
ANR	5563153	PtrMemberAccess	new_req -> m_reqid		5563120	0					
ANR	5563154	Identifier	new_req		5563120	0					
ANR	5563155	Identifier	m_reqid		5563120	1					
ANR	5563156	Argument	new_req		5563120	1					
ANR	5563157	Identifier	new_req		5563120	0					
ANR	5563158	ReturnStatement	return new_req ;	291:1:6893:6907	5563120	4	True				
ANR	5563159	Identifier	new_req		5563120	0					
ANR	5563160	ReturnType	VMRequest *		5563120	1					
ANR	5563161	Identifier	VMGahp :: addNewRequest		5563120	2					
ANR	5563162	ParameterList	const char * cmd		5563120	3					
ANR	5563163	Parameter	const char * cmd	282:22:6726:6740	5563120	0	True				
ANR	5563164	ParameterType	const char *		5563120	0					
ANR	5563165	Identifier	cmd		5563120	1					
ANR	5563166	CFGEntryNode	ENTRY		5563120		True				
ANR	5563167	CFGExitNode	EXIT		5563120		True				
ANR	5563168	Symbol	NULL		5563120						
ANR	5563169	Symbol	new_req -> m_reqid		5563120						
ANR	5563170	Symbol	m_pending_req_table		5563120						
ANR	5563171	Symbol	* new_req		5563120						
ANR	5563172	Symbol	cmd		5563120						
ANR	5563173	Symbol	new_req		5563120						
ANR	5563174	Function	VMGahp :: removePendingRequest	294:0:6912:7092							
ANR	5563175	FunctionDef	VMGahp :: removePendingRequest (int req_id)		5563174	0					
ANR	5563176	CompoundStatement		296:0:6958:7092	5563174	0					
ANR	5563177	IdentifierDeclStatement	VMRequest * req = findPendingRequest ( req_id ) ;	297:1:6961:7004	5563174	0	True				
ANR	5563178	IdentifierDecl	* req = findPendingRequest ( req_id )		5563174	0					
ANR	5563179	IdentifierDeclType	VMRequest *		5563174	0					
ANR	5563180	Identifier	req		5563174	1					
ANR	5563181	AssignmentExpression	* req = findPendingRequest ( req_id )		5563174	2		=			
ANR	5563182	Identifier	req		5563174	0					
ANR	5563183	CallExpression	findPendingRequest ( req_id )		5563174	1					
ANR	5563184	Callee	findPendingRequest		5563174	0					
ANR	5563185	Identifier	findPendingRequest		5563174	0					
ANR	5563186	ArgumentList	req_id		5563174	1					
ANR	5563187	Argument	req_id		5563174	0					
ANR	5563188	Identifier	req_id		5563174	0					
ANR	5563189	IfStatement	if ( req != NULL )		5563174	1					
ANR	5563190	Condition	req != NULL	298:5:7011:7021	5563174	0	True				
ANR	5563191	EqualityExpression	req != NULL		5563174	0		!=			
ANR	5563192	Identifier	req		5563174	0					
ANR	5563193	Identifier	NULL		5563174	1					
ANR	5563194	CompoundStatement		3:19:66:66	5563174	1					
ANR	5563195	ExpressionStatement	m_pending_req_table . remove ( req_id )	299:2:7029:7063	5563174	0	True				
ANR	5563196	CallExpression	m_pending_req_table . remove ( req_id )		5563174	0					
ANR	5563197	Callee	m_pending_req_table . remove		5563174	0					
ANR	5563198	MemberAccess	m_pending_req_table . remove		5563174	0					
ANR	5563199	Identifier	m_pending_req_table		5563174	0					
ANR	5563200	Identifier	remove		5563174	1					
ANR	5563201	ArgumentList	req_id		5563174	1					
ANR	5563202	Argument	req_id		5563174	0					
ANR	5563203	Identifier	req_id		5563174	0					
ANR	5563204	Statement	delete	300:2:7067:7072	5563174	1	True				
ANR	5563205	ExpressionStatement	req	300:9:7074:7077	5563174	2	True				
ANR	5563206	Identifier	req		5563174	0					
ANR	5563207	ReturnStatement	return ;	301:2:7081:7087	5563174	3	True				
ANR	5563208	ReturnType	void		5563174	1					
ANR	5563209	Identifier	VMGahp :: removePendingRequest		5563174	2					
ANR	5563210	ParameterList	int req_id		5563174	3					
ANR	5563211	Parameter	int req_id	295:29:6946:6955	5563174	0	True				
ANR	5563212	ParameterType	int		5563174	0					
ANR	5563213	Identifier	req_id		5563174	1					
ANR	5563214	CFGEntryNode	ENTRY		5563174		True				
ANR	5563215	CFGExitNode	EXIT		5563174		True				
ANR	5563216	Symbol	req_id		5563174						
ANR	5563217	Symbol	findPendingRequest		5563174						
ANR	5563218	Symbol	NULL		5563174						
ANR	5563219	Symbol	m_pending_req_table		5563174						
ANR	5563220	Symbol	req		5563174						
ANR	5563221	Function	VMGahp :: removePendingRequest	305:0:7095:7237							
ANR	5563222	FunctionDef	VMGahp :: removePendingRequest (VMRequest * req)		5563221	0					
ANR	5563223	CompoundStatement		307:0:7145:7237	5563221	0					
ANR	5563224	IfStatement	if ( ! req )		5563221	0					
ANR	5563225	Condition	! req	308:4:7151:7154	5563221	0	True				
ANR	5563226	UnaryOperationExpression	! req		5563221	0					
ANR	5563227	UnaryOperator	!		5563221	0					
ANR	5563228	Identifier	req		5563221	1					
ANR	5563229	CompoundStatement		2:10:11:11	5563221	1					
ANR	5563230	ReturnStatement	return ;	309:2:7161:7167	5563221	0	True				
ANR	5563231	ExpressionStatement	m_pending_req_table . remove ( req -> m_reqid )	311:1:7173:7213	5563221	1	True				
ANR	5563232	CallExpression	m_pending_req_table . remove ( req -> m_reqid )		5563221	0					
ANR	5563233	Callee	m_pending_req_table . remove		5563221	0					
ANR	5563234	MemberAccess	m_pending_req_table . remove		5563221	0					
ANR	5563235	Identifier	m_pending_req_table		5563221	0					
ANR	5563236	Identifier	remove		5563221	1					
ANR	5563237	ArgumentList	req -> m_reqid		5563221	1					
ANR	5563238	Argument	req -> m_reqid		5563221	0					
ANR	5563239	PtrMemberAccess	req -> m_reqid		5563221	0					
ANR	5563240	Identifier	req		5563221	0					
ANR	5563241	Identifier	m_reqid		5563221	1					
ANR	5563242	Statement	delete	312:1:7216:7221	5563221	2	True				
ANR	5563243	ExpressionStatement	req	312:8:7223:7226	5563221	3	True				
ANR	5563244	Identifier	req		5563221	0					
ANR	5563245	ReturnStatement	return ;	313:1:7229:7235	5563221	4	True				
ANR	5563246	ReturnType	void		5563221	1					
ANR	5563247	Identifier	VMGahp :: removePendingRequest		5563221	2					
ANR	5563248	ParameterList	VMRequest * req		5563221	3					
ANR	5563249	Parameter	VMRequest * req	306:29:7129:7142	5563221	0	True				
ANR	5563250	ParameterType	VMRequest *		5563221	0					
ANR	5563251	Identifier	req		5563221	1					
ANR	5563252	CFGEntryNode	ENTRY		5563221		True				
ANR	5563253	CFGExitNode	EXIT		5563221		True				
ANR	5563254	Symbol	* req		5563221						
ANR	5563255	Symbol	m_pending_req_table		5563221						
ANR	5563256	Symbol	req -> m_reqid		5563221						
ANR	5563257	Symbol	req		5563221						
ANR	5563258	Function	VMGahp :: movePendingReqToResultList	316:0:7240:7397							
ANR	5563259	FunctionDef	VMGahp :: movePendingReqToResultList (VMRequest * req)		5563258	0					
ANR	5563260	CompoundStatement		318:0:7296:7397	5563258	0					
ANR	5563261	IfStatement	if ( ! req )		5563258	0					
ANR	5563262	Condition	! req	319:4:7302:7305	5563258	0	True				
ANR	5563263	UnaryOperationExpression	! req		5563258	0					
ANR	5563264	UnaryOperator	!		5563258	0					
ANR	5563265	Identifier	req		5563258	1					
ANR	5563266	CompoundStatement		2:10:11:11	5563258	1					
ANR	5563267	ReturnStatement	return ;	320:2:7312:7318	5563258	0	True				
ANR	5563268	ExpressionStatement	m_result_list . append ( make_result_line ( req ) )	322:1:7324:7367	5563258	1	True				
ANR	5563269	CallExpression	m_result_list . append ( make_result_line ( req ) )		5563258	0					
ANR	5563270	Callee	m_result_list . append		5563258	0					
ANR	5563271	MemberAccess	m_result_list . append		5563258	0					
ANR	5563272	Identifier	m_result_list		5563258	0					
ANR	5563273	Identifier	append		5563258	1					
ANR	5563274	ArgumentList	make_result_line ( req )		5563258	1					
ANR	5563275	Argument	make_result_line ( req )		5563258	0					
ANR	5563276	CallExpression	make_result_line ( req )		5563258	0					
ANR	5563277	Callee	make_result_line		5563258	0					
ANR	5563278	Identifier	make_result_line		5563258	0					
ANR	5563279	ArgumentList	req		5563258	1					
ANR	5563280	Argument	req		5563258	0					
ANR	5563281	Identifier	req		5563258	0					
ANR	5563282	ExpressionStatement	removePendingRequest ( req )	323:1:7370:7395	5563258	2	True				
ANR	5563283	CallExpression	removePendingRequest ( req )		5563258	0					
ANR	5563284	Callee	removePendingRequest		5563258	0					
ANR	5563285	Identifier	removePendingRequest		5563258	0					
ANR	5563286	ArgumentList	req		5563258	1					
ANR	5563287	Argument	req		5563258	0					
ANR	5563288	Identifier	req		5563258	0					
ANR	5563289	ReturnType	void		5563258	1					
ANR	5563290	Identifier	VMGahp :: movePendingReqToResultList		5563258	2					
ANR	5563291	ParameterList	VMRequest * req		5563258	3					
ANR	5563292	Parameter	VMRequest * req	317:35:7280:7293	5563258	0	True				
ANR	5563293	ParameterType	VMRequest *		5563258	0					
ANR	5563294	Identifier	req		5563258	1					
ANR	5563295	CFGEntryNode	ENTRY		5563258		True				
ANR	5563296	CFGExitNode	EXIT		5563258		True				
ANR	5563297	Symbol	m_result_list		5563258						
ANR	5563298	Symbol	make_result_line		5563258						
ANR	5563299	Symbol	req		5563258						
ANR	5563300	Function	VMGahp :: printAllReqsWithResult	326:0:7400:7727							
ANR	5563301	FunctionDef	VMGahp :: printAllReqsWithResult ()		5563300	0					
ANR	5563302	CompoundStatement		328:0:7438:7727	5563300	0					
ANR	5563303	IdentifierDeclStatement	char * one_result = NULL ;	329:1:7441:7464	5563300	0	True				
ANR	5563304	IdentifierDecl	* one_result = NULL		5563300	0					
ANR	5563305	IdentifierDeclType	char *		5563300	0					
ANR	5563306	Identifier	one_result		5563300	1					
ANR	5563307	AssignmentExpression	* one_result = NULL		5563300	2		=			
ANR	5563308	Identifier	NULL		5563300	0					
ANR	5563309	Identifier	NULL		5563300	1					
ANR	5563310	IdentifierDeclStatement	MyString output ;	330:1:7467:7482	5563300	1	True				
ANR	5563311	IdentifierDecl	output		5563300	0					
ANR	5563312	IdentifierDeclType	MyString		5563300	0					
ANR	5563313	Identifier	output		5563300	1					
ANR	5563314	ExpressionStatement	m_result_list . rewind ( )	331:1:7485:7507	5563300	2	True				
ANR	5563315	CallExpression	m_result_list . rewind ( )		5563300	0					
ANR	5563316	Callee	m_result_list . rewind		5563300	0					
ANR	5563317	MemberAccess	m_result_list . rewind		5563300	0					
ANR	5563318	Identifier	m_result_list		5563300	0					
ANR	5563319	Identifier	rewind		5563300	1					
ANR	5563320	ArgumentList			5563300	1					
ANR	5563321	WhileStatement	while ( ( one_result = m_result_list . next ( ) ) != NULL )		5563300	3					
ANR	5563322	Condition	( one_result = m_result_list . next ( ) ) != NULL	332:8:7517:7559	5563300	0	True				
ANR	5563323	EqualityExpression	( one_result = m_result_list . next ( ) ) != NULL		5563300	0		!=			
ANR	5563324	AssignmentExpression	one_result = m_result_list . next ( )		5563300	0		=			
ANR	5563325	Identifier	one_result		5563300	0					
ANR	5563326	CallExpression	m_result_list . next ( )		5563300	1					
ANR	5563327	Callee	m_result_list . next		5563300	0					
ANR	5563328	MemberAccess	m_result_list . next		5563300	0					
ANR	5563329	Identifier	m_result_list		5563300	0					
ANR	5563330	Identifier	next		5563300	1					
ANR	5563331	ArgumentList			5563300	1					
ANR	5563332	Identifier	NULL		5563300	1					
ANR	5563333	CompoundStatement		5:54:124:124	5563300	1					
ANR	5563334	ExpressionStatement	output = one_result	333:2:7567:7586	5563300	0	True				
ANR	5563335	AssignmentExpression	output = one_result		5563300	0		=			
ANR	5563336	Identifier	output		5563300	0					
ANR	5563337	Identifier	one_result		5563300	1					
ANR	5563338	ExpressionStatement	"output += ""\\n"""	334:2:7590:7604	5563300	1	True				
ANR	5563339	AssignmentExpression	"output += ""\\n"""		5563300	0		+=			
ANR	5563340	Identifier	output		5563300	0					
ANR	5563341	PrimaryExpression	"""\\n"""		5563300	1					
ANR	5563342	ExpressionStatement	"write_to_daemoncore_pipe ( vmgahp_stdout_pipe , output . Value ( ) , output . Length ( ) )"	335:2:7608:7689	5563300	2	True				
ANR	5563343	CallExpression	"write_to_daemoncore_pipe ( vmgahp_stdout_pipe , output . Value ( ) , output . Length ( ) )"		5563300	0					
ANR	5563344	Callee	write_to_daemoncore_pipe		5563300	0					
ANR	5563345	Identifier	write_to_daemoncore_pipe		5563300	0					
ANR	5563346	ArgumentList	vmgahp_stdout_pipe		5563300	1					
ANR	5563347	Argument	vmgahp_stdout_pipe		5563300	0					
ANR	5563348	Identifier	vmgahp_stdout_pipe		5563300	0					
ANR	5563349	Argument	output . Value ( )		5563300	1					
ANR	5563350	CallExpression	output . Value ( )		5563300	0					
ANR	5563351	Callee	output . Value		5563300	0					
ANR	5563352	MemberAccess	output . Value		5563300	0					
ANR	5563353	Identifier	output		5563300	0					
ANR	5563354	Identifier	Value		5563300	1					
ANR	5563355	ArgumentList			5563300	1					
ANR	5563356	Argument	output . Length ( )		5563300	2					
ANR	5563357	CallExpression	output . Length ( )		5563300	0					
ANR	5563358	Callee	output . Length		5563300	0					
ANR	5563359	MemberAccess	output . Length		5563300	0					
ANR	5563360	Identifier	output		5563300	0					
ANR	5563361	Identifier	Length		5563300	1					
ANR	5563362	ArgumentList			5563300	1					
ANR	5563363	ExpressionStatement	m_result_list . deleteCurrent ( )	337:2:7693:7722	5563300	3	True				
ANR	5563364	CallExpression	m_result_list . deleteCurrent ( )		5563300	0					
ANR	5563365	Callee	m_result_list . deleteCurrent		5563300	0					
ANR	5563366	MemberAccess	m_result_list . deleteCurrent		5563300	0					
ANR	5563367	Identifier	m_result_list		5563300	0					
ANR	5563368	Identifier	deleteCurrent		5563300	1					
ANR	5563369	ArgumentList			5563300	1					
ANR	5563370	ReturnType	void		5563300	1					
ANR	5563371	Identifier	VMGahp :: printAllReqsWithResult		5563300	2					
ANR	5563372	ParameterList			5563300	3					
ANR	5563373	CFGEntryNode	ENTRY		5563300		True				
ANR	5563374	CFGExitNode	EXIT		5563300		True				
ANR	5563375	Symbol	output		5563300						
ANR	5563376	Symbol	m_result_list		5563300						
ANR	5563377	Symbol	m_result_list . next		5563300						
ANR	5563378	Symbol	one_result		5563300						
ANR	5563379	Symbol	NULL		5563300						
ANR	5563380	Symbol	output . Length		5563300						
ANR	5563381	Symbol	output . Value		5563300						
ANR	5563382	Symbol	vmgahp_stdout_pipe		5563300						
ANR	5563383	Function	VMGahp :: findPendingRequest	341:0:7730:7864							
ANR	5563384	FunctionDef	VMGahp :: findPendingRequest (int req_id)		5563383	0					
ANR	5563385	CompoundStatement		343:0:7781:7864	5563383	0					
ANR	5563386	IdentifierDeclStatement	VMRequest * req = NULL ;	344:1:7784:7805	5563383	0	True				
ANR	5563387	IdentifierDecl	* req = NULL		5563383	0					
ANR	5563388	IdentifierDeclType	VMRequest *		5563383	0					
ANR	5563389	Identifier	req		5563383	1					
ANR	5563390	AssignmentExpression	* req = NULL		5563383	2		=			
ANR	5563391	Identifier	NULL		5563383	0					
ANR	5563392	Identifier	NULL		5563383	1					
ANR	5563393	ExpressionStatement	"m_pending_req_table . lookup ( req_id , req )"	346:1:7809:7848	5563383	1	True				
ANR	5563394	CallExpression	"m_pending_req_table . lookup ( req_id , req )"		5563383	0					
ANR	5563395	Callee	m_pending_req_table . lookup		5563383	0					
ANR	5563396	MemberAccess	m_pending_req_table . lookup		5563383	0					
ANR	5563397	Identifier	m_pending_req_table		5563383	0					
ANR	5563398	Identifier	lookup		5563383	1					
ANR	5563399	ArgumentList	req_id		5563383	1					
ANR	5563400	Argument	req_id		5563383	0					
ANR	5563401	Identifier	req_id		5563383	0					
ANR	5563402	Argument	req		5563383	1					
ANR	5563403	Identifier	req		5563383	0					
ANR	5563404	ReturnStatement	return req ;	348:1:7852:7862	5563383	2	True				
ANR	5563405	Identifier	req		5563383	0					
ANR	5563406	ReturnType	VMRequest *		5563383	1					
ANR	5563407	Identifier	VMGahp :: findPendingRequest		5563383	2					
ANR	5563408	ParameterList	int req_id		5563383	3					
ANR	5563409	Parameter	int req_id	342:27:7769:7778	5563383	0	True				
ANR	5563410	ParameterType	int		5563383	0					
ANR	5563411	Identifier	req_id		5563383	1					
ANR	5563412	CFGEntryNode	ENTRY		5563383		True				
ANR	5563413	CFGExitNode	EXIT		5563383		True				
ANR	5563414	Symbol	req_id		5563383						
ANR	5563415	Symbol	NULL		5563383						
ANR	5563416	Symbol	m_pending_req_table		5563383						
ANR	5563417	Symbol	req		5563383						
ANR	5563418	Function	VMGahp :: addVM	351:0:7867:7931							
ANR	5563419	FunctionDef	VMGahp :: addVM (VMType * new_vm)		5563418	0					
ANR	5563420	CompoundStatement		353:0:7902:7931	5563418	0					
ANR	5563421	ExpressionStatement	m_vm_list . Append ( new_vm )	354:1:7905:7929	5563418	0	True				
ANR	5563422	CallExpression	m_vm_list . Append ( new_vm )		5563418	0					
ANR	5563423	Callee	m_vm_list . Append		5563418	0					
ANR	5563424	MemberAccess	m_vm_list . Append		5563418	0					
ANR	5563425	Identifier	m_vm_list		5563418	0					
ANR	5563426	Identifier	Append		5563418	1					
ANR	5563427	ArgumentList	new_vm		5563418	1					
ANR	5563428	Argument	new_vm		5563418	0					
ANR	5563429	Identifier	new_vm		5563418	0					
ANR	5563430	ReturnType	void		5563418	1					
ANR	5563431	Identifier	VMGahp :: addVM		5563418	2					
ANR	5563432	ParameterList	VMType * new_vm		5563418	3					
ANR	5563433	Parameter	VMType * new_vm	352:14:7886:7899	5563418	0	True				
ANR	5563434	ParameterType	VMType *		5563418	0					
ANR	5563435	Identifier	new_vm		5563418	1					
ANR	5563436	CFGEntryNode	ENTRY		5563418		True				
ANR	5563437	CFGExitNode	EXIT		5563418		True				
ANR	5563438	Symbol	m_vm_list		5563418						
ANR	5563439	Symbol	new_vm		5563418						
ANR	5563440	Function	VMGahp :: removeVM	357:0:7934:8068							
ANR	5563441	FunctionDef	VMGahp :: removeVM (int vm_id)		5563440	0					
ANR	5563442	CompoundStatement		359:0:7967:8068	5563440	0					
ANR	5563443	IdentifierDeclStatement	VMType * vm = findVM ( vm_id ) ;	360:1:7970:7996	5563440	0	True				
ANR	5563444	IdentifierDecl	* vm = findVM ( vm_id )		5563440	0					
ANR	5563445	IdentifierDeclType	VMType *		5563440	0					
ANR	5563446	Identifier	vm		5563440	1					
ANR	5563447	AssignmentExpression	* vm = findVM ( vm_id )		5563440	2		=			
ANR	5563448	Identifier	vm		5563440	0					
ANR	5563449	CallExpression	findVM ( vm_id )		5563440	1					
ANR	5563450	Callee	findVM		5563440	0					
ANR	5563451	Identifier	findVM		5563440	0					
ANR	5563452	ArgumentList	vm_id		5563440	1					
ANR	5563453	Argument	vm_id		5563440	0					
ANR	5563454	Identifier	vm_id		5563440	0					
ANR	5563455	IfStatement	if ( vm != NULL )		5563440	1					
ANR	5563456	Condition	vm != NULL	361:5:8003:8012	5563440	0	True				
ANR	5563457	EqualityExpression	vm != NULL		5563440	0		!=			
ANR	5563458	Identifier	vm		5563440	0					
ANR	5563459	Identifier	NULL		5563440	1					
ANR	5563460	CompoundStatement		3:18:48:48	5563440	1					
ANR	5563461	ExpressionStatement	m_vm_list . Delete ( vm )	362:2:8020:8040	5563440	0	True				
ANR	5563462	CallExpression	m_vm_list . Delete ( vm )		5563440	0					
ANR	5563463	Callee	m_vm_list . Delete		5563440	0					
ANR	5563464	MemberAccess	m_vm_list . Delete		5563440	0					
ANR	5563465	Identifier	m_vm_list		5563440	0					
ANR	5563466	Identifier	Delete		5563440	1					
ANR	5563467	ArgumentList	vm		5563440	1					
ANR	5563468	Argument	vm		5563440	0					
ANR	5563469	Identifier	vm		5563440	0					
ANR	5563470	Statement	delete	363:2:8044:8049	5563440	1	True				
ANR	5563471	ExpressionStatement	vm	363:9:8051:8053	5563440	2	True				
ANR	5563472	Identifier	vm		5563440	0					
ANR	5563473	ReturnStatement	return ;	364:2:8057:8063	5563440	3	True				
ANR	5563474	ReturnType	void		5563440	1					
ANR	5563475	Identifier	VMGahp :: removeVM		5563440	2					
ANR	5563476	ParameterList	int vm_id		5563440	3					
ANR	5563477	Parameter	int vm_id	358:17:7956:7964	5563440	0	True				
ANR	5563478	ParameterType	int		5563440	0					
ANR	5563479	Identifier	vm_id		5563440	1					
ANR	5563480	CFGEntryNode	ENTRY		5563440		True				
ANR	5563481	CFGExitNode	EXIT		5563440		True				
ANR	5563482	Symbol	vm_id		5563440						
ANR	5563483	Symbol	NULL		5563440						
ANR	5563484	Symbol	vm		5563440						
ANR	5563485	Symbol	findVM		5563440						
ANR	5563486	Symbol	m_vm_list		5563440						
ANR	5563487	Function	VMGahp :: removeVM	368:0:8071:8177							
ANR	5563488	FunctionDef	VMGahp :: removeVM (VMType * vm)		5563487	0					
ANR	5563489	CompoundStatement		370:0:8105:8177	5563487	0					
ANR	5563490	IfStatement	if ( ! vm )		5563487	0					
ANR	5563491	Condition	! vm	371:5:8112:8114	5563487	0	True				
ANR	5563492	UnaryOperationExpression	! vm		5563487	0					
ANR	5563493	UnaryOperator	!		5563487	0					
ANR	5563494	Identifier	vm		5563487	1					
ANR	5563495	CompoundStatement		2:11:12:12	5563487	1					
ANR	5563496	ReturnStatement	return ;	372:2:8122:8128	5563487	0	True				
ANR	5563497	ExpressionStatement	m_vm_list . Delete ( vm )	374:1:8134:8154	5563487	1	True				
ANR	5563498	CallExpression	m_vm_list . Delete ( vm )		5563487	0					
ANR	5563499	Callee	m_vm_list . Delete		5563487	0					
ANR	5563500	MemberAccess	m_vm_list . Delete		5563487	0					
ANR	5563501	Identifier	m_vm_list		5563487	0					
ANR	5563502	Identifier	Delete		5563487	1					
ANR	5563503	ArgumentList	vm		5563487	1					
ANR	5563504	Argument	vm		5563487	0					
ANR	5563505	Identifier	vm		5563487	0					
ANR	5563506	Statement	delete	375:1:8157:8162	5563487	2	True				
ANR	5563507	ExpressionStatement	vm	375:8:8164:8166	5563487	3	True				
ANR	5563508	Identifier	vm		5563487	0					
ANR	5563509	ReturnStatement	return ;	376:1:8169:8175	5563487	4	True				
ANR	5563510	ReturnType	void		5563487	1					
ANR	5563511	Identifier	VMGahp :: removeVM		5563487	2					
ANR	5563512	ParameterList	VMType * vm		5563487	3					
ANR	5563513	Parameter	VMType * vm	369:17:8093:8102	5563487	0	True				
ANR	5563514	ParameterType	VMType *		5563487	0					
ANR	5563515	Identifier	vm		5563487	1					
ANR	5563516	CFGEntryNode	ENTRY		5563487		True				
ANR	5563517	CFGExitNode	EXIT		5563487		True				
ANR	5563518	Symbol	vm		5563487						
ANR	5563519	Symbol	m_vm_list		5563487						
ANR	5563520	Function	VMGahp :: findVM	379:0:8180:8358							
ANR	5563521	FunctionDef	VMGahp :: findVM (int vm_id)		5563520	0					
ANR	5563522	CompoundStatement		381:0:8215:8358	5563520	0					
ANR	5563523	IdentifierDeclStatement	VMType * vm = NULL ;	382:1:8218:8235	5563520	0	True				
ANR	5563524	IdentifierDecl	* vm = NULL		5563520	0					
ANR	5563525	IdentifierDeclType	VMType *		5563520	0					
ANR	5563526	Identifier	vm		5563520	1					
ANR	5563527	AssignmentExpression	* vm = NULL		5563520	2		=			
ANR	5563528	Identifier	NULL		5563520	0					
ANR	5563529	Identifier	NULL		5563520	1					
ANR	5563530	ExpressionStatement	m_vm_list . Rewind ( )	384:1:8239:8257	5563520	1	True				
ANR	5563531	CallExpression	m_vm_list . Rewind ( )		5563520	0					
ANR	5563532	Callee	m_vm_list . Rewind		5563520	0					
ANR	5563533	MemberAccess	m_vm_list . Rewind		5563520	0					
ANR	5563534	Identifier	m_vm_list		5563520	0					
ANR	5563535	Identifier	Rewind		5563520	1					
ANR	5563536	ArgumentList			5563520	1					
ANR	5563537	WhileStatement	while ( m_vm_list . Next ( vm ) )		5563520	2					
ANR	5563538	Condition	m_vm_list . Next ( vm )	385:8:8267:8284	5563520	0	True				
ANR	5563539	CallExpression	m_vm_list . Next ( vm )		5563520	0					
ANR	5563540	Callee	m_vm_list . Next		5563520	0					
ANR	5563541	MemberAccess	m_vm_list . Next		5563520	0					
ANR	5563542	Identifier	m_vm_list		5563520	0					
ANR	5563543	Identifier	Next		5563520	1					
ANR	5563544	ArgumentList	vm		5563520	1					
ANR	5563545	Argument	vm		5563520	0					
ANR	5563546	Identifier	vm		5563520	0					
ANR	5563547	CompoundStatement		5:29:72:72	5563520	1					
ANR	5563548	IfStatement	if ( vm -> getVMId ( ) == vm_id )		5563520	0					
ANR	5563549	Condition	vm -> getVMId ( ) == vm_id	386:6:8296:8317	5563520	0	True				
ANR	5563550	EqualityExpression	vm -> getVMId ( ) == vm_id		5563520	0		==			
ANR	5563551	CallExpression	vm -> getVMId ( )		5563520	0					
ANR	5563552	Callee	vm -> getVMId		5563520	0					
ANR	5563553	PtrMemberAccess	vm -> getVMId		5563520	0					
ANR	5563554	Identifier	vm		5563520	0					
ANR	5563555	Identifier	getVMId		5563520	1					
ANR	5563556	ArgumentList			5563520	1					
ANR	5563557	Identifier	vm_id		5563520	1					
ANR	5563558	CompoundStatement		6:31:105:105	5563520	1					
ANR	5563559	ReturnStatement	return vm ;	387:3:8326:8335	5563520	0	True				
ANR	5563560	Identifier	vm		5563520	0					
ANR	5563561	ReturnStatement	return NULL ;	390:1:8345:8356	5563520	3	True				
ANR	5563562	Identifier	NULL		5563520	0					
ANR	5563563	ReturnType	VMType *		5563520	1					
ANR	5563564	Identifier	VMGahp :: findVM		5563520	2					
ANR	5563565	ParameterList	int vm_id		5563520	3					
ANR	5563566	Parameter	int vm_id	380:15:8204:8212	5563520	0	True				
ANR	5563567	ParameterType	int		5563520	0					
ANR	5563568	Identifier	vm_id		5563520	1					
ANR	5563569	CFGEntryNode	ENTRY		5563520		True				
ANR	5563570	CFGExitNode	EXIT		5563520		True				
ANR	5563571	Symbol	vm_id		5563520						
ANR	5563572	Symbol	NULL		5563520						
ANR	5563573	Symbol	vm -> getVMId		5563520						
ANR	5563574	Symbol	vm		5563520						
ANR	5563575	Symbol	m_vm_list . Next		5563520						
ANR	5563576	Symbol	m_vm_list		5563520						
ANR	5563577	Symbol	* vm		5563520						
ANR	5563578	Function	VMGahp :: waitForCommand	396:0:8364:9773							
ANR	5563579	FunctionDef	VMGahp :: waitForCommand (int pipe_end)		5563578	0					
ANR	5563580	CompoundStatement		398:0:8405:9773	5563578	0					
ANR	5563581	IdentifierDeclStatement	MyString * line = NULL ;	399:1:8408:8429	5563578	0	True				
ANR	5563582	IdentifierDecl	* line = NULL		5563578	0					
ANR	5563583	IdentifierDeclType	MyString *		5563578	0					
ANR	5563584	Identifier	line		5563578	1					
ANR	5563585	AssignmentExpression	* line = NULL		5563578	2		=			
ANR	5563586	Identifier	NULL		5563578	0					
ANR	5563587	Identifier	NULL		5563578	1					
ANR	5563588	WhileStatement	while ( ( line = m_request_buffer . GetNextLine ( ) ) != NULL )		5563578	1					
ANR	5563589	Condition	( line = m_request_buffer . GetNextLine ( ) ) != NULL	401:7:8439:8485	5563578	0	True				
ANR	5563590	EqualityExpression	( line = m_request_buffer . GetNextLine ( ) ) != NULL		5563578	0		!=			
ANR	5563591	AssignmentExpression	line = m_request_buffer . GetNextLine ( )		5563578	0		=			
ANR	5563592	Identifier	line		5563578	0					
ANR	5563593	CallExpression	m_request_buffer . GetNextLine ( )		5563578	1					
ANR	5563594	Callee	m_request_buffer . GetNextLine		5563578	0					
ANR	5563595	MemberAccess	m_request_buffer . GetNextLine		5563578	0					
ANR	5563596	Identifier	m_request_buffer		5563578	0					
ANR	5563597	Identifier	GetNextLine		5563578	1					
ANR	5563598	ArgumentList			5563578	1					
ANR	5563599	Identifier	NULL		5563578	1					
ANR	5563600	CompoundStatement		9:2:145:170	5563578	1					
ANR	5563601	IdentifierDeclStatement	const char * command = line -> Value ( ) ;	403:2:8493:8528	5563578	0	True				
ANR	5563602	IdentifierDecl	* command = line -> Value ( )		5563578	0					
ANR	5563603	IdentifierDeclType	const char *		5563578	0					
ANR	5563604	Identifier	command		5563578	1					
ANR	5563605	AssignmentExpression	* command = line -> Value ( )		5563578	2		=			
ANR	5563606	Identifier	command		5563578	0					
ANR	5563607	CallExpression	line -> Value ( )		5563578	1					
ANR	5563608	Callee	line -> Value		5563578	0					
ANR	5563609	PtrMemberAccess	line -> Value		5563578	0					
ANR	5563610	Identifier	line		5563578	0					
ANR	5563611	Identifier	Value		5563578	1					
ANR	5563612	ArgumentList			5563578	1					
ANR	5563613	IdentifierDeclStatement	Gahp_Args args ;	405:2:8533:8547	5563578	1	True				
ANR	5563614	IdentifierDecl	args		5563578	0					
ANR	5563615	IdentifierDeclType	Gahp_Args		5563578	0					
ANR	5563616	Identifier	args		5563578	1					
ANR	5563617	IdentifierDeclStatement	VMRequest * new_req = NULL ;	406:2:8551:8576	5563578	2	True				
ANR	5563618	IdentifierDecl	* new_req = NULL		5563578	0					
ANR	5563619	IdentifierDeclType	VMRequest *		5563578	0					
ANR	5563620	Identifier	new_req		5563578	1					
ANR	5563621	AssignmentExpression	* new_req = NULL		5563578	2		=			
ANR	5563622	Identifier	NULL		5563578	0					
ANR	5563623	Identifier	NULL		5563578	1					
ANR	5563624	IfStatement	if ( m_inClassAd )		5563578	3					
ANR	5563625	Condition	m_inClassAd	408:6:8585:8595	5563578	0	True				
ANR	5563626	Identifier	m_inClassAd		5563578	0					
ANR	5563627	CompoundStatement		11:21:194:194	5563578	1					
ANR	5563628	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_CLASSAD_END ) == 0 )"		5563578	0					
ANR	5563629	Condition	"strcasecmp ( command , VMGAHP_COMMAND_CLASSAD_END ) == 0"	409:7:8609:8660	5563578	0	True				
ANR	5563630	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5563578	0		==			
ANR	5563631	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_CLASSAD_END )"		5563578	0					
ANR	5563632	Callee	strcasecmp		5563578	0					
ANR	5563633	Identifier	strcasecmp		5563578	0					
ANR	5563634	ArgumentList	command		5563578	1					
ANR	5563635	Argument	command		5563578	0					
ANR	5563636	Identifier	command		5563578	0					
ANR	5563637	Argument	VMGAHP_COMMAND_CLASSAD_END		5563578	1					
ANR	5563638	Identifier	VMGAHP_COMMAND_CLASSAD_END		5563578	0					
ANR	5563639	PrimaryExpression	0		5563578	1					
ANR	5563640	CompoundStatement		12:62:258:258	5563578	1					
ANR	5563641	ExpressionStatement	m_inClassAd = false	410:4:8670:8689	5563578	0	True				
ANR	5563642	AssignmentExpression	m_inClassAd = false		5563578	0		=			
ANR	5563643	Identifier	m_inClassAd		5563578	0					
ANR	5563644	Identifier	false		5563578	1					
ANR	5563645	ExpressionStatement	returnOutputSuccess ( )	413:4:8742:8763	5563578	1	True				
ANR	5563646	CallExpression	returnOutputSuccess ( )		5563578	0					
ANR	5563647	Callee	returnOutputSuccess		5563578	0					
ANR	5563648	Identifier	returnOutputSuccess		5563578	0					
ANR	5563649	ArgumentList			5563578	1					
ANR	5563650	ElseStatement	else		5563578	0					
ANR	5563651	CompoundStatement		17:9:368:368	5563578	0					
ANR	5563652	IfStatement	if ( ! m_jobAd -> Insert ( command ) )		5563578	0					
ANR	5563653	Condition	! m_jobAd -> Insert ( command )	415:8:8784:8808	5563578	0	True				
ANR	5563654	UnaryOperationExpression	! m_jobAd -> Insert ( command )		5563578	0					
ANR	5563655	UnaryOperator	!		5563578	0					
ANR	5563656	CallExpression	m_jobAd -> Insert ( command )		5563578	1					
ANR	5563657	Callee	m_jobAd -> Insert		5563578	0					
ANR	5563658	PtrMemberAccess	m_jobAd -> Insert		5563578	0					
ANR	5563659	Identifier	m_jobAd		5563578	0					
ANR	5563660	Identifier	Insert		5563578	1					
ANR	5563661	ArgumentList	command		5563578	1					
ANR	5563662	Argument	command		5563578	0					
ANR	5563663	Identifier	command		5563578	0					
ANR	5563664	CompoundStatement		18:36:406:406	5563578	1					
ANR	5563665	Statement	vmprintf	416:5:8819:8826	5563578	0	True				
ANR	5563666	Statement	(	416:13:8827:8827	5563578	1	True				
ANR	5563667	Statement	D_ALWAYS	416:14:8828:8835	5563578	2	True				
ANR	5563668	Statement	","	416:22:8836:8836	5563578	3	True				
ANR	5563669	Statement	"""Failed to insert \\""%s\\"" into classAd, """	416:24:8838:8877	5563578	4	True				
ANR	5563670	Statement	"""ignoring this attribute\\n"""	417:7:8886:8912	5563578	5	True				
ANR	5563671	Statement	","	417:34:8913:8913	5563578	6	True				
ANR	5563672	Statement	command	417:36:8915:8921	5563578	7	True				
ANR	5563673	Statement	)	417:43:8922:8922	5563578	8	True				
ANR	5563674	ExpressionStatement		417:44:8923:8923	5563578	9	True				
ANR	5563675	ElseStatement	else		5563578	0					
ANR	5563676	CompoundStatement		23:8:538:538	5563578	0					
ANR	5563677	IfStatement	"if ( parse_vmgahp_command ( command , args ) && verifyCommand ( args . argv , args . argc ) )"		5563578	0					
ANR	5563678	Condition	"parse_vmgahp_command ( command , args ) && verifyCommand ( args . argv , args . argc )"	421:6:8952:9030	5563578	0	True				
ANR	5563679	AndExpression	"parse_vmgahp_command ( command , args ) && verifyCommand ( args . argv , args . argc )"		5563578	0		&&			
ANR	5563680	CallExpression	"parse_vmgahp_command ( command , args )"		5563578	0					
ANR	5563681	Callee	parse_vmgahp_command		5563578	0					
ANR	5563682	Identifier	parse_vmgahp_command		5563578	0					
ANR	5563683	ArgumentList	command		5563578	1					
ANR	5563684	Argument	command		5563578	0					
ANR	5563685	Identifier	command		5563578	0					
ANR	5563686	Argument	args		5563578	1					
ANR	5563687	Identifier	args		5563578	0					
ANR	5563688	CallExpression	"verifyCommand ( args . argv , args . argc )"		5563578	1					
ANR	5563689	Callee	verifyCommand		5563578	0					
ANR	5563690	Identifier	verifyCommand		5563578	0					
ANR	5563691	ArgumentList	args . argv		5563578	1					
ANR	5563692	Argument	args . argv		5563578	0					
ANR	5563693	MemberAccess	args . argv		5563578	0					
ANR	5563694	Identifier	args		5563578	0					
ANR	5563695	Identifier	argv		5563578	1					
ANR	5563696	Argument	args . argc		5563578	1					
ANR	5563697	MemberAccess	args . argc		5563578	0					
ANR	5563698	Identifier	args		5563578	0					
ANR	5563699	Identifier	argc		5563578	1					
ANR	5563700	CompoundStatement		25:42:627:627	5563578	1					
ANR	5563701	ExpressionStatement	"new_req = preExecuteCommand ( command , & args )"	423:4:9039:9082	5563578	0	True				
ANR	5563702	AssignmentExpression	"new_req = preExecuteCommand ( command , & args )"		5563578	0		=			
ANR	5563703	Identifier	new_req		5563578	0					
ANR	5563704	CallExpression	"preExecuteCommand ( command , & args )"		5563578	1					
ANR	5563705	Callee	preExecuteCommand		5563578	0					
ANR	5563706	Identifier	preExecuteCommand		5563578	0					
ANR	5563707	ArgumentList	command		5563578	1					
ANR	5563708	Argument	command		5563578	0					
ANR	5563709	Identifier	command		5563578	0					
ANR	5563710	Argument	& args		5563578	1					
ANR	5563711	UnaryOperationExpression	& args		5563578	0					
ANR	5563712	UnaryOperator	&		5563578	0					
ANR	5563713	Identifier	args		5563578	1					
ANR	5563714	IfStatement	if ( new_req != NULL )		5563578	1					
ANR	5563715	Condition	new_req != NULL	425:8:9093:9107	5563578	0	True				
ANR	5563716	EqualityExpression	new_req != NULL		5563578	0		!=			
ANR	5563717	Identifier	new_req		5563578	0					
ANR	5563718	Identifier	NULL		5563578	1					
ANR	5563719	CompoundStatement		28:26:705:705	5563578	1					
ANR	5563720	ExpressionStatement	executeCommand ( new_req )	427:5:9150:9173	5563578	0	True				
ANR	5563721	CallExpression	executeCommand ( new_req )		5563578	0					
ANR	5563722	Callee	executeCommand		5563578	0					
ANR	5563723	Identifier	executeCommand		5563578	0					
ANR	5563724	ArgumentList	new_req		5563578	1					
ANR	5563725	Argument	new_req		5563578	0					
ANR	5563726	Identifier	new_req		5563578	0					
ANR	5563727	IfStatement	if ( new_req -> m_has_result )		5563578	1					
ANR	5563728	Condition	new_req -> m_has_result	428:8:9183:9203	5563578	0	True				
ANR	5563729	PtrMemberAccess	new_req -> m_has_result		5563578	0					
ANR	5563730	Identifier	new_req		5563578	0					
ANR	5563731	Identifier	m_has_result		5563578	1					
ANR	5563732	CompoundStatement		31:31:800:800	5563578	1					
ANR	5563733	ExpressionStatement	movePendingReqToResultList ( new_req )	429:6:9214:9249	5563578	0	True				
ANR	5563734	CallExpression	movePendingReqToResultList ( new_req )		5563578	0					
ANR	5563735	Callee	movePendingReqToResultList		5563578	0					
ANR	5563736	Identifier	movePendingReqToResultList		5563578	0					
ANR	5563737	ArgumentList	new_req		5563578	1					
ANR	5563738	Argument	new_req		5563578	0					
ANR	5563739	Identifier	new_req		5563578	0					
ANR	5563740	IfStatement	if ( m_async_mode )		5563578	1					
ANR	5563741	Condition	m_async_mode	430:10:9261:9272	5563578	0	True				
ANR	5563742	Identifier	m_async_mode		5563578	0					
ANR	5563743	CompoundStatement		33:24:869:869	5563578	1					
ANR	5563744	IfStatement	if ( ! m_new_results_signaled )		5563578	0					
ANR	5563745	Condition	! m_new_results_signaled	431:11:9288:9310	5563578	0	True				
ANR	5563746	UnaryOperationExpression	! m_new_results_signaled		5563578	0					
ANR	5563747	UnaryOperator	!		5563578	0					
ANR	5563748	Identifier	m_new_results_signaled		5563578	1					
ANR	5563749	CompoundStatement		34:36:907:907	5563578	1					
ANR	5563750	ExpressionStatement	"write_to_daemoncore_pipe ( ""R\\n"" )"	432:8:9323:9354	5563578	0	True				
ANR	5563751	CallExpression	"write_to_daemoncore_pipe ( ""R\\n"" )"		5563578	0					
ANR	5563752	Callee	write_to_daemoncore_pipe		5563578	0					
ANR	5563753	Identifier	write_to_daemoncore_pipe		5563578	0					
ANR	5563754	ArgumentList	"""R\\n"""		5563578	1					
ANR	5563755	Argument	"""R\\n"""		5563578	0					
ANR	5563756	PrimaryExpression	"""R\\n"""		5563578	0					
ANR	5563757	ExpressionStatement	m_new_results_signaled = true	435:7:9409:9438	5563578	1	True				
ANR	5563758	AssignmentExpression	m_new_results_signaled = true		5563578	0		=			
ANR	5563759	Identifier	m_new_results_signaled		5563578	0					
ANR	5563760	Identifier	true		5563578	1					
ANR	5563761	ElseStatement	else		5563578	0					
ANR	5563762	CompoundStatement		42:9:1064:1064	5563578	0					
ANR	5563763	ExpressionStatement	returnOutputError ( )	440:4:9476:9495	5563578	0	True				
ANR	5563764	CallExpression	returnOutputError ( )		5563578	0					
ANR	5563765	Callee	returnOutputError		5563578	0					
ANR	5563766	Identifier	returnOutputError		5563578	0					
ANR	5563767	ArgumentList			5563578	1					
ANR	5563768	Statement	delete	444:2:9509:9514	5563578	4	True				
ANR	5563769	ExpressionStatement	line	444:9:9516:9520	5563578	5	True				
ANR	5563770	Identifier	line		5563578	0					
ANR	5563771	ExpressionStatement	line = NULL	445:2:9524:9535	5563578	6	True				
ANR	5563772	AssignmentExpression	line = NULL		5563578	0		=			
ANR	5563773	Identifier	line		5563578	0					
ANR	5563774	Identifier	NULL		5563578	1					
ANR	5563775	IfStatement	if ( m_request_buffer . IsError ( ) || m_request_buffer . IsEOF ( ) )		5563578	2					
ANR	5563776	Condition	m_request_buffer . IsError ( ) || m_request_buffer . IsEOF ( )	449:4:9613:9666	5563578	0	True				
ANR	5563777	OrExpression	m_request_buffer . IsError ( ) || m_request_buffer . IsEOF ( )		5563578	0		||			
ANR	5563778	CallExpression	m_request_buffer . IsError ( )		5563578	0					
ANR	5563779	Callee	m_request_buffer . IsError		5563578	0					
ANR	5563780	MemberAccess	m_request_buffer . IsError		5563578	0					
ANR	5563781	Identifier	m_request_buffer		5563578	0					
ANR	5563782	Identifier	IsError		5563578	1					
ANR	5563783	ArgumentList			5563578	1					
ANR	5563784	CallExpression	m_request_buffer . IsEOF ( )		5563578	1					
ANR	5563785	Callee	m_request_buffer . IsEOF		5563578	0					
ANR	5563786	MemberAccess	m_request_buffer . IsEOF		5563578	0					
ANR	5563787	Identifier	m_request_buffer		5563578	0					
ANR	5563788	Identifier	IsEOF		5563578	1					
ANR	5563789	ArgumentList			5563578	1					
ANR	5563790	CompoundStatement		52:60:1263:1263	5563578	1					
ANR	5563791	ExpressionStatement	"vmprintf ( D_ALWAYS , ""Request buffer closed, exiting\\n"" )"	450:2:9673:9727	5563578	0	True				
ANR	5563792	CallExpression	"vmprintf ( D_ALWAYS , ""Request buffer closed, exiting\\n"" )"		5563578	0					
ANR	5563793	Callee	vmprintf		5563578	0					
ANR	5563794	Identifier	vmprintf		5563578	0					
ANR	5563795	ArgumentList	D_ALWAYS		5563578	1					
ANR	5563796	Argument	D_ALWAYS		5563578	0					
ANR	5563797	Identifier	D_ALWAYS		5563578	0					
ANR	5563798	Argument	"""Request buffer closed, exiting\\n"""		5563578	1					
ANR	5563799	PrimaryExpression	"""Request buffer closed, exiting\\n"""		5563578	0					
ANR	5563800	ExpressionStatement	cleanUp ( )	451:2:9731:9740	5563578	1	True				
ANR	5563801	CallExpression	cleanUp ( )		5563578	0					
ANR	5563802	Callee	cleanUp		5563578	0					
ANR	5563803	Identifier	cleanUp		5563578	0					
ANR	5563804	ArgumentList			5563578	1					
ANR	5563805	ExpressionStatement	DC_Exit ( 0 )	452:2:9744:9754	5563578	2	True				
ANR	5563806	CallExpression	DC_Exit ( 0 )		5563578	0					
ANR	5563807	Callee	DC_Exit		5563578	0					
ANR	5563808	Identifier	DC_Exit		5563578	0					
ANR	5563809	ArgumentList	0		5563578	1					
ANR	5563810	Argument	0		5563578	0					
ANR	5563811	PrimaryExpression	0		5563578	0					
ANR	5563812	ReturnStatement	return true ;	454:1:9760:9771	5563578	3	True				
ANR	5563813	Identifier	true		5563578	0					
ANR	5563814	ReturnType	int		5563578	1					
ANR	5563815	Identifier	VMGahp :: waitForCommand		5563578	2					
ANR	5563816	ParameterList	int pipe_end		5563578	3					
ANR	5563817	Parameter	int pipe_end	397:23:8391:8402	5563578	0	True				
ANR	5563818	ParameterType	int		5563578	0					
ANR	5563819	Identifier	pipe_end		5563578	1					
ANR	5563820	CFGEntryNode	ENTRY		5563578		True				
ANR	5563821	CFGExitNode	EXIT		5563578		True				
ANR	5563822	Symbol	preExecuteCommand		5563578						
ANR	5563823	Symbol	m_jobAd		5563578						
ANR	5563824	Symbol	line -> Value		5563578						
ANR	5563825	Symbol	pipe_end		5563578						
ANR	5563826	Symbol	line		5563578						
ANR	5563827	Symbol	m_inClassAd		5563578						
ANR	5563828	Symbol	* line		5563578						
ANR	5563829	Symbol	parse_vmgahp_command		5563578						
ANR	5563830	Symbol	m_request_buffer . GetNextLine		5563578						
ANR	5563831	Symbol	verifyCommand		5563578						
ANR	5563832	Symbol	new_req -> m_has_result		5563578						
ANR	5563833	Symbol	m_async_mode		5563578						
ANR	5563834	Symbol	m_jobAd -> Insert		5563578						
ANR	5563835	Symbol	m_request_buffer . IsError		5563578						
ANR	5563836	Symbol	strcasecmp		5563578						
ANR	5563837	Symbol	VMGAHP_COMMAND_CLASSAD_END		5563578						
ANR	5563838	Symbol	& args		5563578						
ANR	5563839	Symbol	args . argc		5563578						
ANR	5563840	Symbol	m_new_results_signaled		5563578						
ANR	5563841	Symbol	NULL		5563578						
ANR	5563842	Symbol	m_request_buffer . IsEOF		5563578						
ANR	5563843	Symbol	false		5563578						
ANR	5563844	Symbol	D_ALWAYS		5563578						
ANR	5563845	Symbol	* new_req		5563578						
ANR	5563846	Symbol	command		5563578						
ANR	5563847	Symbol	args		5563578						
ANR	5563848	Symbol	* m_jobAd		5563578						
ANR	5563849	Symbol	args . argv		5563578						
ANR	5563850	Symbol	true		5563578						
ANR	5563851	Symbol	m_request_buffer		5563578						
ANR	5563852	Symbol	new_req		5563578						
ANR	5563853	Function	VMGahp :: verifyCommand	458:0:9822:11654							
ANR	5563854	FunctionDef	"VMGahp :: verifyCommand (char * * argv , int argc)"		5563853	0					
ANR	5563855	CompoundStatement		458:50:9872:11654	5563853	0					
ANR	5563856	IfStatement	"if ( strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_START ) == 0 )"		5563853	0					
ANR	5563857	Condition	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_START ) == 0"	459:4:9878:9926	5563853	0	True				
ANR	5563858	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_START ) == 0"		5563853	0		==			
ANR	5563859	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_START )"		5563853	0					
ANR	5563860	Callee	strcasecmp		5563853	0					
ANR	5563861	Identifier	strcasecmp		5563853	0					
ANR	5563862	ArgumentList	argv [ 0 ]		5563853	1					
ANR	5563863	Argument	argv [ 0 ]		5563853	0					
ANR	5563864	ArrayIndexing	argv [ 0 ]		5563853	0					
ANR	5563865	Identifier	argv		5563853	0					
ANR	5563866	PrimaryExpression	0		5563853	1					
ANR	5563867	Argument	VMGAHP_COMMAND_VM_START		5563853	1					
ANR	5563868	Identifier	VMGAHP_COMMAND_VM_START		5563853	0					
ANR	5563869	PrimaryExpression	0		5563853	1					
ANR	5563870	CompoundStatement		2:56:57:57	5563853	1					
ANR	5563871	ReturnStatement	"return verify_number_args ( argc , 3 ) && verify_request_id ( argv [ 1 ] ) && verify_vm_type ( argv [ 2 ] ) ;"	461:2:9990:10087	5563853	0	True				
ANR	5563872	AndExpression	"verify_number_args ( argc , 3 ) && verify_request_id ( argv [ 1 ] ) && verify_vm_type ( argv [ 2 ] )"		5563853	0		&&			
ANR	5563873	CallExpression	"verify_number_args ( argc , 3 )"		5563853	0					
ANR	5563874	Callee	verify_number_args		5563853	0					
ANR	5563875	Identifier	verify_number_args		5563853	0					
ANR	5563876	ArgumentList	argc		5563853	1					
ANR	5563877	Argument	argc		5563853	0					
ANR	5563878	Identifier	argc		5563853	0					
ANR	5563879	Argument	3		5563853	1					
ANR	5563880	PrimaryExpression	3		5563853	0					
ANR	5563881	AndExpression	verify_request_id ( argv [ 1 ] ) && verify_vm_type ( argv [ 2 ] )		5563853	1		&&			
ANR	5563882	CallExpression	verify_request_id ( argv [ 1 ] )		5563853	0					
ANR	5563883	Callee	verify_request_id		5563853	0					
ANR	5563884	Identifier	verify_request_id		5563853	0					
ANR	5563885	ArgumentList	argv [ 1 ]		5563853	1					
ANR	5563886	Argument	argv [ 1 ]		5563853	0					
ANR	5563887	ArrayIndexing	argv [ 1 ]		5563853	0					
ANR	5563888	Identifier	argv		5563853	0					
ANR	5563889	PrimaryExpression	1		5563853	1					
ANR	5563890	CallExpression	verify_vm_type ( argv [ 2 ] )		5563853	1					
ANR	5563891	Callee	verify_vm_type		5563853	0					
ANR	5563892	Identifier	verify_vm_type		5563853	0					
ANR	5563893	ArgumentList	argv [ 2 ]		5563853	1					
ANR	5563894	Argument	argv [ 2 ]		5563853	0					
ANR	5563895	ArrayIndexing	argv [ 2 ]		5563853	0					
ANR	5563896	Identifier	argv		5563853	0					
ANR	5563897	PrimaryExpression	2		5563853	1					
ANR	5563898	ElseStatement	else		5563853	0					
ANR	5563899	IfStatement	"if ( strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STOP ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SUSPEND ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SOFT_SUSPEND ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_RESUME ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID ) == 0 )"		5563853	0					
ANR	5563900	Condition	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STOP ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SUSPEND ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SOFT_SUSPEND ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_RESUME ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID ) == 0"	465:11:10101:10495	5563853	0	True				
ANR	5563901	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STOP ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SUSPEND ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SOFT_SUSPEND ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_RESUME ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID ) == 0"		5563853	0		||			
ANR	5563902	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STOP ) == 0"		5563853	0		==			
ANR	5563903	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STOP )"		5563853	0					
ANR	5563904	Callee	strcasecmp		5563853	0					
ANR	5563905	Identifier	strcasecmp		5563853	0					
ANR	5563906	ArgumentList	argv [ 0 ]		5563853	1					
ANR	5563907	Argument	argv [ 0 ]		5563853	0					
ANR	5563908	ArrayIndexing	argv [ 0 ]		5563853	0					
ANR	5563909	Identifier	argv		5563853	0					
ANR	5563910	PrimaryExpression	0		5563853	1					
ANR	5563911	Argument	VMGAHP_COMMAND_VM_STOP		5563853	1					
ANR	5563912	Identifier	VMGAHP_COMMAND_VM_STOP		5563853	0					
ANR	5563913	PrimaryExpression	0		5563853	1					
ANR	5563914	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SUSPEND ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SOFT_SUSPEND ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_RESUME ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID ) == 0"		5563853	1		||			
ANR	5563915	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SUSPEND ) == 0"		5563853	0		==			
ANR	5563916	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SUSPEND )"		5563853	0					
ANR	5563917	Callee	strcasecmp		5563853	0					
ANR	5563918	Identifier	strcasecmp		5563853	0					
ANR	5563919	ArgumentList	argv [ 0 ]		5563853	1					
ANR	5563920	Argument	argv [ 0 ]		5563853	0					
ANR	5563921	ArrayIndexing	argv [ 0 ]		5563853	0					
ANR	5563922	Identifier	argv		5563853	0					
ANR	5563923	PrimaryExpression	0		5563853	1					
ANR	5563924	Argument	VMGAHP_COMMAND_VM_SUSPEND		5563853	1					
ANR	5563925	Identifier	VMGAHP_COMMAND_VM_SUSPEND		5563853	0					
ANR	5563926	PrimaryExpression	0		5563853	1					
ANR	5563927	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SOFT_SUSPEND ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_RESUME ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID ) == 0"		5563853	1		||			
ANR	5563928	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SOFT_SUSPEND ) == 0"		5563853	0		==			
ANR	5563929	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SOFT_SUSPEND )"		5563853	0					
ANR	5563930	Callee	strcasecmp		5563853	0					
ANR	5563931	Identifier	strcasecmp		5563853	0					
ANR	5563932	ArgumentList	argv [ 0 ]		5563853	1					
ANR	5563933	Argument	argv [ 0 ]		5563853	0					
ANR	5563934	ArrayIndexing	argv [ 0 ]		5563853	0					
ANR	5563935	Identifier	argv		5563853	0					
ANR	5563936	PrimaryExpression	0		5563853	1					
ANR	5563937	Argument	VMGAHP_COMMAND_VM_SOFT_SUSPEND		5563853	1					
ANR	5563938	Identifier	VMGAHP_COMMAND_VM_SOFT_SUSPEND		5563853	0					
ANR	5563939	PrimaryExpression	0		5563853	1					
ANR	5563940	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_RESUME ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID ) == 0"		5563853	1		||			
ANR	5563941	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_RESUME ) == 0"		5563853	0		==			
ANR	5563942	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_RESUME )"		5563853	0					
ANR	5563943	Callee	strcasecmp		5563853	0					
ANR	5563944	Identifier	strcasecmp		5563853	0					
ANR	5563945	ArgumentList	argv [ 0 ]		5563853	1					
ANR	5563946	Argument	argv [ 0 ]		5563853	0					
ANR	5563947	ArrayIndexing	argv [ 0 ]		5563853	0					
ANR	5563948	Identifier	argv		5563853	0					
ANR	5563949	PrimaryExpression	0		5563853	1					
ANR	5563950	Argument	VMGAHP_COMMAND_VM_RESUME		5563853	1					
ANR	5563951	Identifier	VMGAHP_COMMAND_VM_RESUME		5563853	0					
ANR	5563952	PrimaryExpression	0		5563853	1					
ANR	5563953	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID ) == 0"		5563853	1		||			
ANR	5563954	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0"		5563853	0		==			
ANR	5563955	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_CHECKPOINT )"		5563853	0					
ANR	5563956	Callee	strcasecmp		5563853	0					
ANR	5563957	Identifier	strcasecmp		5563853	0					
ANR	5563958	ArgumentList	argv [ 0 ]		5563853	1					
ANR	5563959	Argument	argv [ 0 ]		5563853	0					
ANR	5563960	ArrayIndexing	argv [ 0 ]		5563853	0					
ANR	5563961	Identifier	argv		5563853	0					
ANR	5563962	PrimaryExpression	0		5563853	1					
ANR	5563963	Argument	VMGAHP_COMMAND_VM_CHECKPOINT		5563853	1					
ANR	5563964	Identifier	VMGAHP_COMMAND_VM_CHECKPOINT		5563853	0					
ANR	5563965	PrimaryExpression	0		5563853	1					
ANR	5563966	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID ) == 0"		5563853	1		||			
ANR	5563967	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS ) == 0"		5563853	0		==			
ANR	5563968	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS )"		5563853	0					
ANR	5563969	Callee	strcasecmp		5563853	0					
ANR	5563970	Identifier	strcasecmp		5563853	0					
ANR	5563971	ArgumentList	argv [ 0 ]		5563853	1					
ANR	5563972	Argument	argv [ 0 ]		5563853	0					
ANR	5563973	ArrayIndexing	argv [ 0 ]		5563853	0					
ANR	5563974	Identifier	argv		5563853	0					
ANR	5563975	PrimaryExpression	0		5563853	1					
ANR	5563976	Argument	VMGAHP_COMMAND_VM_STATUS		5563853	1					
ANR	5563977	Identifier	VMGAHP_COMMAND_VM_STATUS		5563853	0					
ANR	5563978	PrimaryExpression	0		5563853	1					
ANR	5563979	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID ) == 0"		5563853	1		==			
ANR	5563980	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID )"		5563853	0					
ANR	5563981	Callee	strcasecmp		5563853	0					
ANR	5563982	Identifier	strcasecmp		5563853	0					
ANR	5563983	ArgumentList	argv [ 0 ]		5563853	1					
ANR	5563984	Argument	argv [ 0 ]		5563853	0					
ANR	5563985	ArrayIndexing	argv [ 0 ]		5563853	0					
ANR	5563986	Identifier	argv		5563853	0					
ANR	5563987	PrimaryExpression	0		5563853	1					
ANR	5563988	Argument	VMGAHP_COMMAND_VM_GETPID		5563853	1					
ANR	5563989	Identifier	VMGAHP_COMMAND_VM_GETPID		5563853	0					
ANR	5563990	PrimaryExpression	0		5563853	1					
ANR	5563991	CompoundStatement		14:54:625:625	5563853	1					
ANR	5563992	ReturnStatement	"return verify_number_args ( argc , 3 ) && verify_request_id ( argv [ 1 ] ) && verify_vm_id ( argv [ 2 ] ) ;"	480:2:10911:11006	5563853	0	True				
ANR	5563993	AndExpression	"verify_number_args ( argc , 3 ) && verify_request_id ( argv [ 1 ] ) && verify_vm_id ( argv [ 2 ] )"		5563853	0		&&			
ANR	5563994	CallExpression	"verify_number_args ( argc , 3 )"		5563853	0					
ANR	5563995	Callee	verify_number_args		5563853	0					
ANR	5563996	Identifier	verify_number_args		5563853	0					
ANR	5563997	ArgumentList	argc		5563853	1					
ANR	5563998	Argument	argc		5563853	0					
ANR	5563999	Identifier	argc		5563853	0					
ANR	5564000	Argument	3		5563853	1					
ANR	5564001	PrimaryExpression	3		5563853	0					
ANR	5564002	AndExpression	verify_request_id ( argv [ 1 ] ) && verify_vm_id ( argv [ 2 ] )		5563853	1		&&			
ANR	5564003	CallExpression	verify_request_id ( argv [ 1 ] )		5563853	0					
ANR	5564004	Callee	verify_request_id		5563853	0					
ANR	5564005	Identifier	verify_request_id		5563853	0					
ANR	5564006	ArgumentList	argv [ 1 ]		5563853	1					
ANR	5564007	Argument	argv [ 1 ]		5563853	0					
ANR	5564008	ArrayIndexing	argv [ 1 ]		5563853	0					
ANR	5564009	Identifier	argv		5563853	0					
ANR	5564010	PrimaryExpression	1		5563853	1					
ANR	5564011	CallExpression	verify_vm_id ( argv [ 2 ] )		5563853	1					
ANR	5564012	Callee	verify_vm_id		5563853	0					
ANR	5564013	Identifier	verify_vm_id		5563853	0					
ANR	5564014	ArgumentList	argv [ 2 ]		5563853	1					
ANR	5564015	Argument	argv [ 2 ]		5563853	0					
ANR	5564016	ArrayIndexing	argv [ 2 ]		5563853	0					
ANR	5564017	Identifier	argv		5563853	0					
ANR	5564018	PrimaryExpression	2		5563853	1					
ANR	5564019	ElseStatement	else		5563853	0					
ANR	5564020	IfStatement	"if ( strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_ON ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_OFF ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_QUIT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VERSION ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_COMMANDS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0 )"		5563853	0					
ANR	5564021	Condition	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_ON ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_OFF ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_QUIT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VERSION ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_COMMANDS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"	484:11:11020:11518	5563853	0	True				
ANR	5564022	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_ON ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_OFF ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_QUIT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VERSION ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_COMMANDS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5563853	0		||			
ANR	5564023	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_ON ) == 0"		5563853	0		==			
ANR	5564024	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_ON )"		5563853	0					
ANR	5564025	Callee	strcasecmp		5563853	0					
ANR	5564026	Identifier	strcasecmp		5563853	0					
ANR	5564027	ArgumentList	argv [ 0 ]		5563853	1					
ANR	5564028	Argument	argv [ 0 ]		5563853	0					
ANR	5564029	ArrayIndexing	argv [ 0 ]		5563853	0					
ANR	5564030	Identifier	argv		5563853	0					
ANR	5564031	PrimaryExpression	0		5563853	1					
ANR	5564032	Argument	VMGAHP_COMMAND_ASYNC_MODE_ON		5563853	1					
ANR	5564033	Identifier	VMGAHP_COMMAND_ASYNC_MODE_ON		5563853	0					
ANR	5564034	PrimaryExpression	0		5563853	1					
ANR	5564035	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_OFF ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_QUIT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VERSION ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_COMMANDS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5563853	1		||			
ANR	5564036	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_OFF ) == 0"		5563853	0		==			
ANR	5564037	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_OFF )"		5563853	0					
ANR	5564038	Callee	strcasecmp		5563853	0					
ANR	5564039	Identifier	strcasecmp		5563853	0					
ANR	5564040	ArgumentList	argv [ 0 ]		5563853	1					
ANR	5564041	Argument	argv [ 0 ]		5563853	0					
ANR	5564042	ArrayIndexing	argv [ 0 ]		5563853	0					
ANR	5564043	Identifier	argv		5563853	0					
ANR	5564044	PrimaryExpression	0		5563853	1					
ANR	5564045	Argument	VMGAHP_COMMAND_ASYNC_MODE_OFF		5563853	1					
ANR	5564046	Identifier	VMGAHP_COMMAND_ASYNC_MODE_OFF		5563853	0					
ANR	5564047	PrimaryExpression	0		5563853	1					
ANR	5564048	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_QUIT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VERSION ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_COMMANDS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5563853	1		||			
ANR	5564049	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_QUIT ) == 0"		5563853	0		==			
ANR	5564050	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_QUIT )"		5563853	0					
ANR	5564051	Callee	strcasecmp		5563853	0					
ANR	5564052	Identifier	strcasecmp		5563853	0					
ANR	5564053	ArgumentList	argv [ 0 ]		5563853	1					
ANR	5564054	Argument	argv [ 0 ]		5563853	0					
ANR	5564055	ArrayIndexing	argv [ 0 ]		5563853	0					
ANR	5564056	Identifier	argv		5563853	0					
ANR	5564057	PrimaryExpression	0		5563853	1					
ANR	5564058	Argument	VMGAHP_COMMAND_QUIT		5563853	1					
ANR	5564059	Identifier	VMGAHP_COMMAND_QUIT		5563853	0					
ANR	5564060	PrimaryExpression	0		5563853	1					
ANR	5564061	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VERSION ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_COMMANDS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5563853	1		||			
ANR	5564062	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VERSION ) == 0"		5563853	0		==			
ANR	5564063	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VERSION )"		5563853	0					
ANR	5564064	Callee	strcasecmp		5563853	0					
ANR	5564065	Identifier	strcasecmp		5563853	0					
ANR	5564066	ArgumentList	argv [ 0 ]		5563853	1					
ANR	5564067	Argument	argv [ 0 ]		5563853	0					
ANR	5564068	ArrayIndexing	argv [ 0 ]		5563853	0					
ANR	5564069	Identifier	argv		5563853	0					
ANR	5564070	PrimaryExpression	0		5563853	1					
ANR	5564071	Argument	VMGAHP_COMMAND_VERSION		5563853	1					
ANR	5564072	Identifier	VMGAHP_COMMAND_VERSION		5563853	0					
ANR	5564073	PrimaryExpression	0		5563853	1					
ANR	5564074	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_COMMANDS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5563853	1		||			
ANR	5564075	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_COMMANDS ) == 0"		5563853	0		==			
ANR	5564076	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_COMMANDS )"		5563853	0					
ANR	5564077	Callee	strcasecmp		5563853	0					
ANR	5564078	Identifier	strcasecmp		5563853	0					
ANR	5564079	ArgumentList	argv [ 0 ]		5563853	1					
ANR	5564080	Argument	argv [ 0 ]		5563853	0					
ANR	5564081	ArrayIndexing	argv [ 0 ]		5563853	0					
ANR	5564082	Identifier	argv		5563853	0					
ANR	5564083	PrimaryExpression	0		5563853	1					
ANR	5564084	Argument	VMGAHP_COMMAND_COMMANDS		5563853	1					
ANR	5564085	Identifier	VMGAHP_COMMAND_COMMANDS		5563853	0					
ANR	5564086	PrimaryExpression	0		5563853	1					
ANR	5564087	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5563853	1		||			
ANR	5564088	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS ) == 0"		5563853	0		==			
ANR	5564089	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS )"		5563853	0					
ANR	5564090	Callee	strcasecmp		5563853	0					
ANR	5564091	Identifier	strcasecmp		5563853	0					
ANR	5564092	ArgumentList	argv [ 0 ]		5563853	1					
ANR	5564093	Argument	argv [ 0 ]		5563853	0					
ANR	5564094	ArrayIndexing	argv [ 0 ]		5563853	0					
ANR	5564095	Identifier	argv		5563853	0					
ANR	5564096	PrimaryExpression	0		5563853	1					
ANR	5564097	Argument	VMGAHP_COMMAND_SUPPORT_VMS		5563853	1					
ANR	5564098	Identifier	VMGAHP_COMMAND_SUPPORT_VMS		5563853	0					
ANR	5564099	PrimaryExpression	0		5563853	1					
ANR	5564100	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5563853	1		||			
ANR	5564101	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0"		5563853	0		==			
ANR	5564102	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS )"		5563853	0					
ANR	5564103	Callee	strcasecmp		5563853	0					
ANR	5564104	Identifier	strcasecmp		5563853	0					
ANR	5564105	ArgumentList	argv [ 0 ]		5563853	1					
ANR	5564106	Argument	argv [ 0 ]		5563853	0					
ANR	5564107	ArrayIndexing	argv [ 0 ]		5563853	0					
ANR	5564108	Identifier	argv		5563853	0					
ANR	5564109	PrimaryExpression	0		5563853	1					
ANR	5564110	Argument	VMGAHP_COMMAND_RESULTS		5563853	1					
ANR	5564111	Identifier	VMGAHP_COMMAND_RESULTS		5563853	0					
ANR	5564112	PrimaryExpression	0		5563853	1					
ANR	5564113	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5563853	1		||			
ANR	5564114	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0"		5563853	0		==			
ANR	5564115	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD )"		5563853	0					
ANR	5564116	Callee	strcasecmp		5563853	0					
ANR	5564117	Identifier	strcasecmp		5563853	0					
ANR	5564118	ArgumentList	argv [ 0 ]		5563853	1					
ANR	5564119	Argument	argv [ 0 ]		5563853	0					
ANR	5564120	ArrayIndexing	argv [ 0 ]		5563853	0					
ANR	5564121	Identifier	argv		5563853	0					
ANR	5564122	PrimaryExpression	0		5563853	1					
ANR	5564123	Argument	VMGAHP_COMMAND_CLASSAD		5563853	1					
ANR	5564124	Identifier	VMGAHP_COMMAND_CLASSAD		5563853	0					
ANR	5564125	PrimaryExpression	0		5563853	1					
ANR	5564126	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5563853	1		==			
ANR	5564127	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END )"		5563853	0					
ANR	5564128	Callee	strcasecmp		5563853	0					
ANR	5564129	Identifier	strcasecmp		5563853	0					
ANR	5564130	ArgumentList	argv [ 0 ]		5563853	1					
ANR	5564131	Argument	argv [ 0 ]		5563853	0					
ANR	5564132	ArrayIndexing	argv [ 0 ]		5563853	0					
ANR	5564133	Identifier	argv		5563853	0					
ANR	5564134	PrimaryExpression	0		5563853	1					
ANR	5564135	Argument	VMGAHP_COMMAND_CLASSAD_END		5563853	1					
ANR	5564136	Identifier	VMGAHP_COMMAND_CLASSAD_END		5563853	0					
ANR	5564137	PrimaryExpression	0		5563853	1					
ANR	5564138	CompoundStatement		35:57:1649:1649	5563853	1					
ANR	5564139	ReturnStatement	"return verify_number_args ( argc , 1 ) ;"	494:2:11558:11591	5563853	0	True				
ANR	5564140	CallExpression	"verify_number_args ( argc , 1 )"		5563853	0					
ANR	5564141	Callee	verify_number_args		5563853	0					
ANR	5564142	Identifier	verify_number_args		5563853	0					
ANR	5564143	ArgumentList	argc		5563853	1					
ANR	5564144	Argument	argc		5563853	0					
ANR	5564145	Identifier	argc		5563853	0					
ANR	5564146	Argument	1		5563853	1					
ANR	5564147	PrimaryExpression	1		5563853	0					
ANR	5564148	ExpressionStatement	"vmprintf ( D_ALWAYS , ""Unknown command\\n"" )"	497:1:11598:11637	5563853	1	True				
ANR	5564149	CallExpression	"vmprintf ( D_ALWAYS , ""Unknown command\\n"" )"		5563853	0					
ANR	5564150	Callee	vmprintf		5563853	0					
ANR	5564151	Identifier	vmprintf		5563853	0					
ANR	5564152	ArgumentList	D_ALWAYS		5563853	1					
ANR	5564153	Argument	D_ALWAYS		5563853	0					
ANR	5564154	Identifier	D_ALWAYS		5563853	0					
ANR	5564155	Argument	"""Unknown command\\n"""		5563853	1					
ANR	5564156	PrimaryExpression	"""Unknown command\\n"""		5563853	0					
ANR	5564157	ReturnStatement	return false ;	498:1:11640:11652	5563853	2	True				
ANR	5564158	Identifier	false		5563853	0					
ANR	5564159	ReturnType	bool		5563853	1					
ANR	5564160	Identifier	VMGahp :: verifyCommand		5563853	2					
ANR	5564161	ParameterList	"char * * argv , int argc"		5563853	3					
ANR	5564162	Parameter	char * * argv	458:27:9849:9859	5563853	0	True				
ANR	5564163	ParameterType	char * *		5563853	0					
ANR	5564164	Identifier	argv		5563853	1					
ANR	5564165	Parameter	int argc	458:40:9862:9869	5563853	1	True				
ANR	5564166	ParameterType	int		5563853	0					
ANR	5564167	Identifier	argc		5563853	1					
ANR	5564168	CFGEntryNode	ENTRY		5563853		True				
ANR	5564169	CFGExitNode	EXIT		5563853		True				
ANR	5564170	Symbol	VMGAHP_COMMAND_ASYNC_MODE_ON		5563853						
ANR	5564171	Symbol	VMGAHP_COMMAND_VM_STOP		5563853						
ANR	5564172	Symbol	VMGAHP_COMMAND_VERSION		5563853						
ANR	5564173	Symbol	* argv		5563853						
ANR	5564174	Symbol	argv		5563853						
ANR	5564175	Symbol	verify_request_id		5563853						
ANR	5564176	Symbol	VMGAHP_COMMAND_VM_GETPID		5563853						
ANR	5564177	Symbol	strcasecmp		5563853						
ANR	5564178	Symbol	VMGAHP_COMMAND_COMMANDS		5563853						
ANR	5564179	Symbol	VMGAHP_COMMAND_CLASSAD_END		5563853						
ANR	5564180	Symbol	VMGAHP_COMMAND_VM_STATUS		5563853						
ANR	5564181	Symbol	VMGAHP_COMMAND_SUPPORT_VMS		5563853						
ANR	5564182	Symbol	argc		5563853						
ANR	5564183	Symbol	VMGAHP_COMMAND_CLASSAD		5563853						
ANR	5564184	Symbol	VMGAHP_COMMAND_VM_RESUME		5563853						
ANR	5564185	Symbol	VMGAHP_COMMAND_ASYNC_MODE_OFF		5563853						
ANR	5564186	Symbol	verify_vm_id		5563853						
ANR	5564187	Symbol	D_ALWAYS		5563853						
ANR	5564188	Symbol	false		5563853						
ANR	5564189	Symbol	VMGAHP_COMMAND_VM_START		5563853						
ANR	5564190	Symbol	VMGAHP_COMMAND_VM_SOFT_SUSPEND		5563853						
ANR	5564191	Symbol	VMGAHP_COMMAND_QUIT		5563853						
ANR	5564192	Symbol	verify_number_args		5563853						
ANR	5564193	Symbol	VMGAHP_COMMAND_VM_CHECKPOINT		5563853						
ANR	5564194	Symbol	verify_vm_type		5563853						
ANR	5564195	Symbol	VMGAHP_COMMAND_RESULTS		5563853						
ANR	5564196	Symbol	VMGAHP_COMMAND_VM_SUSPEND		5563853						
ANR	5564197	Function	VMGahp :: verify_request_id	501:0:11657:12098							
ANR	5564198	FunctionDef	VMGahp :: verify_request_id (const char * s)		5564197	0					
ANR	5564199	CompoundStatement		503:0:11703:12098	5564197	0					
ANR	5564200	IfStatement	if ( verify_digit_arg ( s ) == false )		5564197	0					
ANR	5564201	Condition	verify_digit_arg ( s ) == false	504:5:11710:11737	5564197	0	True				
ANR	5564202	EqualityExpression	verify_digit_arg ( s ) == false		5564197	0		==			
ANR	5564203	CallExpression	verify_digit_arg ( s )		5564197	0					
ANR	5564204	Callee	verify_digit_arg		5564197	0					
ANR	5564205	Identifier	verify_digit_arg		5564197	0					
ANR	5564206	ArgumentList	s		5564197	1					
ANR	5564207	Argument	s		5564197	0					
ANR	5564208	Identifier	s		5564197	0					
ANR	5564209	Identifier	false		5564197	1					
ANR	5564210	CompoundStatement		2:35:36:36	5564197	1					
ANR	5564211	ReturnStatement	return false ;	505:2:11744:11756	5564197	0	True				
ANR	5564212	Identifier	false		5564197	0					
ANR	5564213	IdentifierDeclStatement	"int req_id = ( int ) strtol ( s , ( char * * ) NULL , 10 ) ;"	508:1:11763:11809	5564197	1	True				
ANR	5564214	IdentifierDecl	"req_id = ( int ) strtol ( s , ( char * * ) NULL , 10 )"		5564197	0					
ANR	5564215	IdentifierDeclType	int		5564197	0					
ANR	5564216	Identifier	req_id		5564197	1					
ANR	5564217	AssignmentExpression	"req_id = ( int ) strtol ( s , ( char * * ) NULL , 10 )"		5564197	2		=			
ANR	5564218	Identifier	req_id		5564197	0					
ANR	5564219	CastExpression	"( int ) strtol ( s , ( char * * ) NULL , 10 )"		5564197	1					
ANR	5564220	CastTarget	int		5564197	0					
ANR	5564221	CallExpression	"strtol ( s , ( char * * ) NULL , 10 )"		5564197	1					
ANR	5564222	Callee	strtol		5564197	0					
ANR	5564223	Identifier	strtol		5564197	0					
ANR	5564224	ArgumentList	s		5564197	1					
ANR	5564225	Argument	s		5564197	0					
ANR	5564226	Identifier	s		5564197	0					
ANR	5564227	Argument	( char * * ) NULL		5564197	1					
ANR	5564228	CastExpression	( char * * ) NULL		5564197	0					
ANR	5564229	CastTarget	char * *		5564197	0					
ANR	5564230	Identifier	NULL		5564197	1					
ANR	5564231	Argument	10		5564197	2					
ANR	5564232	PrimaryExpression	10		5564197	0					
ANR	5564233	IfStatement	if ( req_id <= 0 )		5564197	2					
ANR	5564234	Condition	req_id <= 0	509:5:11816:11826	5564197	0	True				
ANR	5564235	RelationalExpression	req_id <= 0		5564197	0		<=			
ANR	5564236	Identifier	req_id		5564197	0					
ANR	5564237	PrimaryExpression	0		5564197	1					
ANR	5564238	CompoundStatement		7:19:126:126	5564197	1					
ANR	5564239	ExpressionStatement	"vmprintf ( D_ALWAYS , ""Invalid Request id(%s)\\n"" , s )"	510:2:11834:11883	5564197	0	True				
ANR	5564240	CallExpression	"vmprintf ( D_ALWAYS , ""Invalid Request id(%s)\\n"" , s )"		5564197	0					
ANR	5564241	Callee	vmprintf		5564197	0					
ANR	5564242	Identifier	vmprintf		5564197	0					
ANR	5564243	ArgumentList	D_ALWAYS		5564197	1					
ANR	5564244	Argument	D_ALWAYS		5564197	0					
ANR	5564245	Identifier	D_ALWAYS		5564197	0					
ANR	5564246	Argument	"""Invalid Request id(%s)\\n"""		5564197	1					
ANR	5564247	PrimaryExpression	"""Invalid Request id(%s)\\n"""		5564197	0					
ANR	5564248	Argument	s		5564197	2					
ANR	5564249	Identifier	s		5564197	0					
ANR	5564250	ReturnStatement	return false ;	511:2:11887:11899	5564197	1	True				
ANR	5564251	Identifier	false		5564197	0					
ANR	5564252	IfStatement	if ( findPendingRequest ( req_id ) != NULL )		5564197	3					
ANR	5564253	Condition	findPendingRequest ( req_id ) != NULL	514:5:11937:11970	5564197	0	True				
ANR	5564254	EqualityExpression	findPendingRequest ( req_id ) != NULL		5564197	0		!=			
ANR	5564255	CallExpression	findPendingRequest ( req_id )		5564197	0					
ANR	5564256	Callee	findPendingRequest		5564197	0					
ANR	5564257	Identifier	findPendingRequest		5564197	0					
ANR	5564258	ArgumentList	req_id		5564197	1					
ANR	5564259	Argument	req_id		5564197	0					
ANR	5564260	Identifier	req_id		5564197	0					
ANR	5564261	Identifier	NULL		5564197	1					
ANR	5564262	CompoundStatement		12:42:270:270	5564197	1					
ANR	5564263	Statement	vmprintf	515:2:11978:11985	5564197	0	True				
ANR	5564264	Statement	(	515:10:11986:11986	5564197	1	True				
ANR	5564265	Statement	D_ALWAYS	515:11:11987:11994	5564197	2	True				
ANR	5564266	Statement	","	515:19:11995:11995	5564197	3	True				
ANR	5564267	Statement	"""Request id(%s) is conflict with """	515:21:11997:12030	5564197	4	True				
ANR	5564268	Statement	"""the existing one\\n"""	516:6:12038:12057	5564197	5	True				
ANR	5564269	Statement	","	516:26:12058:12058	5564197	6	True				
ANR	5564270	Statement	s	516:28:12060:12060	5564197	7	True				
ANR	5564271	Statement	)	516:29:12061:12061	5564197	8	True				
ANR	5564272	ExpressionStatement		516:30:12062:12062	5564197	9	True				
ANR	5564273	ReturnStatement	return false ;	517:2:12066:12078	5564197	10	True				
ANR	5564274	Identifier	false		5564197	0					
ANR	5564275	ReturnStatement	return true ;	520:1:12085:12096	5564197	4	True				
ANR	5564276	Identifier	true		5564197	0					
ANR	5564277	ReturnType	bool		5564197	1					
ANR	5564278	Identifier	VMGahp :: verify_request_id		5564197	2					
ANR	5564279	ParameterList	const char * s		5564197	3					
ANR	5564280	Parameter	const char * s	502:26:11688:11700	5564197	0	True				
ANR	5564281	ParameterType	const char *		5564197	0					
ANR	5564282	Identifier	s		5564197	1					
ANR	5564283	CFGEntryNode	ENTRY		5564197		True				
ANR	5564284	CFGExitNode	EXIT		5564197		True				
ANR	5564285	Symbol	req_id		5564197						
ANR	5564286	Symbol	s		5564197						
ANR	5564287	Symbol	NULL		5564197						
ANR	5564288	Symbol	findPendingRequest		5564197						
ANR	5564289	Symbol	strtol		5564197						
ANR	5564290	Symbol	false		5564197						
ANR	5564291	Symbol	D_ALWAYS		5564197						
ANR	5564292	Symbol	true		5564197						
ANR	5564293	Symbol	verify_digit_arg		5564197						
ANR	5564294	Function	VMGahp :: verify_vm_id	523:0:12101:12214							
ANR	5564295	FunctionDef	VMGahp :: verify_vm_id (const char * s)		5564294	0					
ANR	5564296	CompoundStatement		525:0:12142:12214	5564294	0					
ANR	5564297	IfStatement	if ( verify_digit_arg ( s ) == false )		5564294	0					
ANR	5564298	Condition	verify_digit_arg ( s ) == false	526:5:12149:12176	5564294	0	True				
ANR	5564299	EqualityExpression	verify_digit_arg ( s ) == false		5564294	0		==			
ANR	5564300	CallExpression	verify_digit_arg ( s )		5564294	0					
ANR	5564301	Callee	verify_digit_arg		5564294	0					
ANR	5564302	Identifier	verify_digit_arg		5564294	0					
ANR	5564303	ArgumentList	s		5564294	1					
ANR	5564304	Argument	s		5564294	0					
ANR	5564305	Identifier	s		5564294	0					
ANR	5564306	Identifier	false		5564294	1					
ANR	5564307	CompoundStatement		2:35:36:36	5564294	1					
ANR	5564308	ReturnStatement	return false ;	527:2:12183:12195	5564294	0	True				
ANR	5564309	Identifier	false		5564294	0					
ANR	5564310	ReturnStatement	return true ;	529:1:12201:12212	5564294	1	True				
ANR	5564311	Identifier	true		5564294	0					
ANR	5564312	ReturnType	bool		5564294	1					
ANR	5564313	Identifier	VMGahp :: verify_vm_id		5564294	2					
ANR	5564314	ParameterList	const char * s		5564294	3					
ANR	5564315	Parameter	const char * s	524:21:12127:12139	5564294	0	True				
ANR	5564316	ParameterType	const char *		5564294	0					
ANR	5564317	Identifier	s		5564294	1					
ANR	5564318	CFGEntryNode	ENTRY		5564294		True				
ANR	5564319	CFGExitNode	EXIT		5564294		True				
ANR	5564320	Symbol	s		5564294						
ANR	5564321	Symbol	false		5564294						
ANR	5564322	Symbol	true		5564294						
ANR	5564323	Symbol	verify_digit_arg		5564294						
ANR	5564324	Function	VMGahp :: returnOutput	533:0:12218:12468							
ANR	5564325	FunctionDef	"VMGahp :: returnOutput (const char * * results , const int count)"		5564324	0					
ANR	5564326	CompoundStatement		535:0:12283:12468	5564324	0					
ANR	5564327	IdentifierDeclStatement	int i = 0 ;	536:1:12286:12293	5564324	0	True				
ANR	5564328	IdentifierDecl	i = 0		5564324	0					
ANR	5564329	IdentifierDeclType	int		5564324	0					
ANR	5564330	Identifier	i		5564324	1					
ANR	5564331	AssignmentExpression	i = 0		5564324	2		=			
ANR	5564332	Identifier	i		5564324	0					
ANR	5564333	PrimaryExpression	0		5564324	1					
ANR	5564334	ForStatement	for ( i = 0 ; i < count ; i ++ )		5564324	1					
ANR	5564335	ForInit	i = 0 ;	538:6:12302:12305	5564324	0	True				
ANR	5564336	AssignmentExpression	i = 0		5564324	0		=			
ANR	5564337	Identifier	i		5564324	0					
ANR	5564338	PrimaryExpression	0		5564324	1					
ANR	5564339	Condition	i < count	538:11:12307:12313	5564324	1	True				
ANR	5564340	RelationalExpression	i < count		5564324	0		<			
ANR	5564341	Identifier	i		5564324	0					
ANR	5564342	Identifier	count		5564324	1					
ANR	5564343	PostIncDecOperationExpression	i ++	538:20:12316:12318	5564324	2	True				
ANR	5564344	Identifier	i		5564324	0					
ANR	5564345	IncDec	++		5564324	1					
ANR	5564346	CompoundStatement		4:25:37:37	5564324	3					
ANR	5564347	ExpressionStatement	"write_to_daemoncore_pipe ( ""%s"" , results [ i ] )"	539:2:12325:12367	5564324	0	True				
ANR	5564348	CallExpression	"write_to_daemoncore_pipe ( ""%s"" , results [ i ] )"		5564324	0					
ANR	5564349	Callee	write_to_daemoncore_pipe		5564324	0					
ANR	5564350	Identifier	write_to_daemoncore_pipe		5564324	0					
ANR	5564351	ArgumentList	"""%s"""		5564324	1					
ANR	5564352	Argument	"""%s"""		5564324	0					
ANR	5564353	PrimaryExpression	"""%s"""		5564324	0					
ANR	5564354	Argument	results [ i ]		5564324	1					
ANR	5564355	ArrayIndexing	results [ i ]		5564324	0					
ANR	5564356	Identifier	results		5564324	0					
ANR	5564357	Identifier	i		5564324	1					
ANR	5564358	IfStatement	if ( i < ( count - 1 ) )		5564324	1					
ANR	5564359	Condition	i < ( count - 1 )	540:6:12375:12388	5564324	0	True				
ANR	5564360	RelationalExpression	i < ( count - 1 )		5564324	0		<			
ANR	5564361	Identifier	i		5564324	0					
ANR	5564362	AdditiveExpression	count - 1		5564324	1		-			
ANR	5564363	Identifier	count		5564324	0					
ANR	5564364	PrimaryExpression	1		5564324	1					
ANR	5564365	CompoundStatement		6:22:107:107	5564324	1					
ANR	5564366	ExpressionStatement	"write_to_daemoncore_pipe ( "" "" )"	541:3:12396:12425	5564324	0	True				
ANR	5564367	CallExpression	"write_to_daemoncore_pipe ( "" "" )"		5564324	0					
ANR	5564368	Callee	write_to_daemoncore_pipe		5564324	0					
ANR	5564369	Identifier	write_to_daemoncore_pipe		5564324	0					
ANR	5564370	ArgumentList	""" """		5564324	1					
ANR	5564371	Argument	""" """		5564324	0					
ANR	5564372	PrimaryExpression	""" """		5564324	0					
ANR	5564373	ExpressionStatement	"write_to_daemoncore_pipe ( ""\\n"" )"	545:1:12436:12466	5564324	2	True				
ANR	5564374	CallExpression	"write_to_daemoncore_pipe ( ""\\n"" )"		5564324	0					
ANR	5564375	Callee	write_to_daemoncore_pipe		5564324	0					
ANR	5564376	Identifier	write_to_daemoncore_pipe		5564324	0					
ANR	5564377	ArgumentList	"""\\n"""		5564324	1					
ANR	5564378	Argument	"""\\n"""		5564324	0					
ANR	5564379	PrimaryExpression	"""\\n"""		5564324	0					
ANR	5564380	ReturnType	void		5564324	1					
ANR	5564381	Identifier	VMGahp :: returnOutput		5564324	2					
ANR	5564382	ParameterList	"const char * * results , const int count"		5564324	3					
ANR	5564383	Parameter	const char * * results	534:21:12244:12263	5564324	0	True				
ANR	5564384	ParameterType	const char * *		5564324	0					
ANR	5564385	Identifier	results		5564324	1					
ANR	5564386	Parameter	const int count	534:43:12266:12280	5564324	1	True				
ANR	5564387	ParameterType	const int		5564324	0					
ANR	5564388	Identifier	count		5564324	1					
ANR	5564389	CFGEntryNode	ENTRY		5564324		True				
ANR	5564390	CFGExitNode	EXIT		5564324		True				
ANR	5564391	Symbol	* i		5564324						
ANR	5564392	Symbol	count		5564324						
ANR	5564393	Symbol	i		5564324						
ANR	5564394	Symbol	* results		5564324						
ANR	5564395	Symbol	results		5564324						
ANR	5564396	Function	VMGahp :: returnOutputSuccess	548:0:12471:12586							
ANR	5564397	FunctionDef	VMGahp :: returnOutputSuccess ()		5564396	0					
ANR	5564398	CompoundStatement		550:0:12510:12586	5564396	0					
ANR	5564399	IdentifierDeclStatement	const char * result [ ] = { VMGAHP_RESULT_SUCCESS } ;	551:1:12513:12559	5564396	0	True				
ANR	5564400	IdentifierDecl	* result [ ] = { VMGAHP_RESULT_SUCCESS }		5564396	0					
ANR	5564401	IdentifierDeclType	const char * [ ]		5564396	0					
ANR	5564402	Identifier	result		5564396	1					
ANR	5564403	AssignmentExpression	* result [ ] = { VMGAHP_RESULT_SUCCESS }		5564396	2		=			
ANR	5564404	Identifier	result		5564396	0					
ANR	5564405	InitializerList	VMGAHP_RESULT_SUCCESS		5564396	1					
ANR	5564406	Identifier	VMGAHP_RESULT_SUCCESS		5564396	0					
ANR	5564407	ExpressionStatement	"returnOutput ( result , 1 )"	552:1:12562:12584	5564396	1	True				
ANR	5564408	CallExpression	"returnOutput ( result , 1 )"		5564396	0					
ANR	5564409	Callee	returnOutput		5564396	0					
ANR	5564410	Identifier	returnOutput		5564396	0					
ANR	5564411	ArgumentList	result		5564396	1					
ANR	5564412	Argument	result		5564396	0					
ANR	5564413	Identifier	result		5564396	0					
ANR	5564414	Argument	1		5564396	1					
ANR	5564415	PrimaryExpression	1		5564396	0					
ANR	5564416	ReturnType	void		5564396	1					
ANR	5564417	Identifier	VMGahp :: returnOutputSuccess		5564396	2					
ANR	5564418	ParameterList			5564396	3					
ANR	5564419	CFGEntryNode	ENTRY		5564396		True				
ANR	5564420	CFGExitNode	EXIT		5564396		True				
ANR	5564421	Symbol	result		5564396						
ANR	5564422	Symbol	VMGAHP_RESULT_SUCCESS		5564396						
ANR	5564423	Function	VMGahp :: returnOutputError	555:0:12589:12700							
ANR	5564424	FunctionDef	VMGahp :: returnOutputError ()		5564423	0					
ANR	5564425	CompoundStatement		557:0:12626:12700	5564423	0					
ANR	5564426	IdentifierDeclStatement	const char * result [ ] = { VMGAHP_RESULT_ERROR } ;	558:1:12629:12673	5564423	0	True				
ANR	5564427	IdentifierDecl	* result [ ] = { VMGAHP_RESULT_ERROR }		5564423	0					
ANR	5564428	IdentifierDeclType	const char * [ ]		5564423	0					
ANR	5564429	Identifier	result		5564423	1					
ANR	5564430	AssignmentExpression	* result [ ] = { VMGAHP_RESULT_ERROR }		5564423	2		=			
ANR	5564431	Identifier	result		5564423	0					
ANR	5564432	InitializerList	VMGAHP_RESULT_ERROR		5564423	1					
ANR	5564433	Identifier	VMGAHP_RESULT_ERROR		5564423	0					
ANR	5564434	ExpressionStatement	"returnOutput ( result , 1 )"	559:1:12676:12698	5564423	1	True				
ANR	5564435	CallExpression	"returnOutput ( result , 1 )"		5564423	0					
ANR	5564436	Callee	returnOutput		5564423	0					
ANR	5564437	Identifier	returnOutput		5564423	0					
ANR	5564438	ArgumentList	result		5564423	1					
ANR	5564439	Argument	result		5564423	0					
ANR	5564440	Identifier	result		5564423	0					
ANR	5564441	Argument	1		5564423	1					
ANR	5564442	PrimaryExpression	1		5564423	0					
ANR	5564443	ReturnType	void		5564423	1					
ANR	5564444	Identifier	VMGahp :: returnOutputError		5564423	2					
ANR	5564445	ParameterList			5564423	3					
ANR	5564446	CFGEntryNode	ENTRY		5564423		True				
ANR	5564447	CFGExitNode	EXIT		5564423		True				
ANR	5564448	Symbol	result		5564423						
ANR	5564449	Symbol	VMGAHP_RESULT_ERROR		5564423						
ANR	5564450	Function	VMGahp :: preExecuteCommand	562:0:12703:14107							
ANR	5564451	FunctionDef	"VMGahp :: preExecuteCommand (const char * cmd , Gahp_Args * args)"		5564450	0					
ANR	5564452	CompoundStatement		564:0:12775:14107	5564450	0					
ANR	5564453	IdentifierDeclStatement	char * command = args -> argv [ 0 ] ;	565:1:12778:12807	5564450	0	True				
ANR	5564454	IdentifierDecl	* command = args -> argv [ 0 ]		5564450	0					
ANR	5564455	IdentifierDeclType	char *		5564450	0					
ANR	5564456	Identifier	command		5564450	1					
ANR	5564457	AssignmentExpression	* command = args -> argv [ 0 ]		5564450	2		=			
ANR	5564458	Identifier	command		5564450	0					
ANR	5564459	ArrayIndexing	args -> argv [ 0 ]		5564450	1					
ANR	5564460	PtrMemberAccess	args -> argv		5564450	0					
ANR	5564461	Identifier	args		5564450	0					
ANR	5564462	Identifier	argv		5564450	1					
ANR	5564463	PrimaryExpression	0		5564450	1					
ANR	5564464	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""Command: %s\\n"" , command )"	567:1:12811:12858	5564450	1	True				
ANR	5564465	CallExpression	"vmprintf ( D_FULLDEBUG , ""Command: %s\\n"" , command )"		5564450	0					
ANR	5564466	Callee	vmprintf		5564450	0					
ANR	5564467	Identifier	vmprintf		5564450	0					
ANR	5564468	ArgumentList	D_FULLDEBUG		5564450	1					
ANR	5564469	Argument	D_FULLDEBUG		5564450	0					
ANR	5564470	Identifier	D_FULLDEBUG		5564450	0					
ANR	5564471	Argument	"""Command: %s\\n"""		5564450	1					
ANR	5564472	PrimaryExpression	"""Command: %s\\n"""		5564450	0					
ANR	5564473	Argument	command		5564450	2					
ANR	5564474	Identifier	command		5564450	0					
ANR	5564475	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_ASYNC_MODE_ON ) == 0 )"		5564450	2					
ANR	5564476	Condition	"strcasecmp ( command , VMGAHP_COMMAND_ASYNC_MODE_ON ) == 0"	570:4:12892:12945	5564450	0	True				
ANR	5564477	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_ASYNC_MODE_ON ) == 0"		5564450	0		==			
ANR	5564478	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_ASYNC_MODE_ON )"		5564450	0					
ANR	5564479	Callee	strcasecmp		5564450	0					
ANR	5564480	Identifier	strcasecmp		5564450	0					
ANR	5564481	ArgumentList	command		5564450	1					
ANR	5564482	Argument	command		5564450	0					
ANR	5564483	Identifier	command		5564450	0					
ANR	5564484	Argument	VMGAHP_COMMAND_ASYNC_MODE_ON		5564450	1					
ANR	5564485	Identifier	VMGAHP_COMMAND_ASYNC_MODE_ON		5564450	0					
ANR	5564486	PrimaryExpression	0		5564450	1					
ANR	5564487	CompoundStatement		7:61:173:173	5564450	1					
ANR	5564488	ExpressionStatement	m_async_mode = true	571:2:12953:12972	5564450	0	True				
ANR	5564489	AssignmentExpression	m_async_mode = true		5564450	0		=			
ANR	5564490	Identifier	m_async_mode		5564450	0					
ANR	5564491	Identifier	true		5564450	1					
ANR	5564492	ExpressionStatement	m_new_results_signaled = false	572:2:12976:13006	5564450	1	True				
ANR	5564493	AssignmentExpression	m_new_results_signaled = false		5564450	0		=			
ANR	5564494	Identifier	m_new_results_signaled		5564450	0					
ANR	5564495	Identifier	false		5564450	1					
ANR	5564496	ExpressionStatement	returnOutputSuccess ( )	573:2:13010:13031	5564450	2	True				
ANR	5564497	CallExpression	returnOutputSuccess ( )		5564450	0					
ANR	5564498	Callee	returnOutputSuccess		5564450	0					
ANR	5564499	Identifier	returnOutputSuccess		5564450	0					
ANR	5564500	ArgumentList			5564450	1					
ANR	5564501	ElseStatement	else		5564450	0					
ANR	5564502	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_ASYNC_MODE_OFF ) == 0 )"		5564450	0					
ANR	5564503	Condition	"strcasecmp ( command , VMGAHP_COMMAND_ASYNC_MODE_OFF ) == 0"	574:11:13044:13098	5564450	0	True				
ANR	5564504	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_ASYNC_MODE_OFF ) == 0"		5564450	0		==			
ANR	5564505	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_ASYNC_MODE_OFF )"		5564450	0					
ANR	5564506	Callee	strcasecmp		5564450	0					
ANR	5564507	Identifier	strcasecmp		5564450	0					
ANR	5564508	ArgumentList	command		5564450	1					
ANR	5564509	Argument	command		5564450	0					
ANR	5564510	Identifier	command		5564450	0					
ANR	5564511	Argument	VMGAHP_COMMAND_ASYNC_MODE_OFF		5564450	1					
ANR	5564512	Identifier	VMGAHP_COMMAND_ASYNC_MODE_OFF		5564450	0					
ANR	5564513	PrimaryExpression	0		5564450	1					
ANR	5564514	CompoundStatement		11:69:326:326	5564450	1					
ANR	5564515	ExpressionStatement	m_async_mode = false	575:2:13106:13126	5564450	0	True				
ANR	5564516	AssignmentExpression	m_async_mode = false		5564450	0		=			
ANR	5564517	Identifier	m_async_mode		5564450	0					
ANR	5564518	Identifier	false		5564450	1					
ANR	5564519	ExpressionStatement	returnOutputSuccess ( )	576:2:13130:13151	5564450	1	True				
ANR	5564520	CallExpression	returnOutputSuccess ( )		5564450	0					
ANR	5564521	Callee	returnOutputSuccess		5564450	0					
ANR	5564522	Identifier	returnOutputSuccess		5564450	0					
ANR	5564523	ArgumentList			5564450	1					
ANR	5564524	ElseStatement	else		5564450	0					
ANR	5564525	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_QUIT ) == 0 )"		5564450	0					
ANR	5564526	Condition	"strcasecmp ( command , VMGAHP_COMMAND_QUIT ) == 0"	577:11:13164:13208	5564450	0	True				
ANR	5564527	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_QUIT ) == 0"		5564450	0		==			
ANR	5564528	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_QUIT )"		5564450	0					
ANR	5564529	Callee	strcasecmp		5564450	0					
ANR	5564530	Identifier	strcasecmp		5564450	0					
ANR	5564531	ArgumentList	command		5564450	1					
ANR	5564532	Argument	command		5564450	0					
ANR	5564533	Identifier	command		5564450	0					
ANR	5564534	Argument	VMGAHP_COMMAND_QUIT		5564450	1					
ANR	5564535	Identifier	VMGAHP_COMMAND_QUIT		5564450	0					
ANR	5564536	PrimaryExpression	0		5564450	1					
ANR	5564537	CompoundStatement		14:59:436:436	5564450	1					
ANR	5564538	ExpressionStatement	executeQuit ( )	578:2:13216:13229	5564450	0	True				
ANR	5564539	CallExpression	executeQuit ( )		5564450	0					
ANR	5564540	Callee	executeQuit		5564450	0					
ANR	5564541	Identifier	executeQuit		5564450	0					
ANR	5564542	ArgumentList			5564450	1					
ANR	5564543	ElseStatement	else		5564450	0					
ANR	5564544	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_VERSION ) == 0 )"		5564450	0					
ANR	5564545	Condition	"strcasecmp ( command , VMGAHP_COMMAND_VERSION ) == 0"	579:11:13242:13289	5564450	0	True				
ANR	5564546	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_VERSION ) == 0"		5564450	0		==			
ANR	5564547	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_VERSION )"		5564450	0					
ANR	5564548	Callee	strcasecmp		5564450	0					
ANR	5564549	Identifier	strcasecmp		5564450	0					
ANR	5564550	ArgumentList	command		5564450	1					
ANR	5564551	Argument	command		5564450	0					
ANR	5564552	Identifier	command		5564450	0					
ANR	5564553	Argument	VMGAHP_COMMAND_VERSION		5564450	1					
ANR	5564554	Identifier	VMGAHP_COMMAND_VERSION		5564450	0					
ANR	5564555	PrimaryExpression	0		5564450	1					
ANR	5564556	CompoundStatement		16:62:517:517	5564450	1					
ANR	5564557	ExpressionStatement	executeVersion ( )	580:2:13297:13313	5564450	0	True				
ANR	5564558	CallExpression	executeVersion ( )		5564450	0					
ANR	5564559	Callee	executeVersion		5564450	0					
ANR	5564560	Identifier	executeVersion		5564450	0					
ANR	5564561	ArgumentList			5564450	1					
ANR	5564562	ElseStatement	else		5564450	0					
ANR	5564563	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_COMMANDS ) == 0 )"		5564450	0					
ANR	5564564	Condition	"strcasecmp ( command , VMGAHP_COMMAND_COMMANDS ) == 0"	581:11:13326:13374	5564450	0	True				
ANR	5564565	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_COMMANDS ) == 0"		5564450	0		==			
ANR	5564566	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_COMMANDS )"		5564450	0					
ANR	5564567	Callee	strcasecmp		5564450	0					
ANR	5564568	Identifier	strcasecmp		5564450	0					
ANR	5564569	ArgumentList	command		5564450	1					
ANR	5564570	Argument	command		5564450	0					
ANR	5564571	Identifier	command		5564450	0					
ANR	5564572	Argument	VMGAHP_COMMAND_COMMANDS		5564450	1					
ANR	5564573	Identifier	VMGAHP_COMMAND_COMMANDS		5564450	0					
ANR	5564574	PrimaryExpression	0		5564450	1					
ANR	5564575	CompoundStatement		18:63:602:602	5564450	1					
ANR	5564576	ExpressionStatement	executeCommands ( )	582:2:13382:13399	5564450	0	True				
ANR	5564577	CallExpression	executeCommands ( )		5564450	0					
ANR	5564578	Callee	executeCommands		5564450	0					
ANR	5564579	Identifier	executeCommands		5564450	0					
ANR	5564580	ArgumentList			5564450	1					
ANR	5564581	ElseStatement	else		5564450	0					
ANR	5564582	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_SUPPORT_VMS ) == 0 )"		5564450	0					
ANR	5564583	Condition	"strcasecmp ( command , VMGAHP_COMMAND_SUPPORT_VMS ) == 0"	583:11:13412:13463	5564450	0	True				
ANR	5564584	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_SUPPORT_VMS ) == 0"		5564450	0		==			
ANR	5564585	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_SUPPORT_VMS )"		5564450	0					
ANR	5564586	Callee	strcasecmp		5564450	0					
ANR	5564587	Identifier	strcasecmp		5564450	0					
ANR	5564588	ArgumentList	command		5564450	1					
ANR	5564589	Argument	command		5564450	0					
ANR	5564590	Identifier	command		5564450	0					
ANR	5564591	Argument	VMGAHP_COMMAND_SUPPORT_VMS		5564450	1					
ANR	5564592	Identifier	VMGAHP_COMMAND_SUPPORT_VMS		5564450	0					
ANR	5564593	PrimaryExpression	0		5564450	1					
ANR	5564594	CompoundStatement		20:66:691:691	5564450	1					
ANR	5564595	ExpressionStatement	executeSupportVMS ( )	584:2:13471:13490	5564450	0	True				
ANR	5564596	CallExpression	executeSupportVMS ( )		5564450	0					
ANR	5564597	Callee	executeSupportVMS		5564450	0					
ANR	5564598	Identifier	executeSupportVMS		5564450	0					
ANR	5564599	ArgumentList			5564450	1					
ANR	5564600	ElseStatement	else		5564450	0					
ANR	5564601	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_RESULTS ) == 0 )"		5564450	0					
ANR	5564602	Condition	"strcasecmp ( command , VMGAHP_COMMAND_RESULTS ) == 0"	585:11:13503:13550	5564450	0	True				
ANR	5564603	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_RESULTS ) == 0"		5564450	0		==			
ANR	5564604	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_RESULTS )"		5564450	0					
ANR	5564605	Callee	strcasecmp		5564450	0					
ANR	5564606	Identifier	strcasecmp		5564450	0					
ANR	5564607	ArgumentList	command		5564450	1					
ANR	5564608	Argument	command		5564450	0					
ANR	5564609	Identifier	command		5564450	0					
ANR	5564610	Argument	VMGAHP_COMMAND_RESULTS		5564450	1					
ANR	5564611	Identifier	VMGAHP_COMMAND_RESULTS		5564450	0					
ANR	5564612	PrimaryExpression	0		5564450	1					
ANR	5564613	CompoundStatement		22:62:778:778	5564450	1					
ANR	5564614	ExpressionStatement	executeResults ( )	586:2:13558:13574	5564450	0	True				
ANR	5564615	CallExpression	executeResults ( )		5564450	0					
ANR	5564616	Callee	executeResults		5564450	0					
ANR	5564617	Identifier	executeResults		5564450	0					
ANR	5564618	ArgumentList			5564450	1					
ANR	5564619	ElseStatement	else		5564450	0					
ANR	5564620	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_CLASSAD ) == 0 )"		5564450	0					
ANR	5564621	Condition	"strcasecmp ( command , VMGAHP_COMMAND_CLASSAD ) == 0"	587:11:13587:13634	5564450	0	True				
ANR	5564622	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_CLASSAD ) == 0"		5564450	0		==			
ANR	5564623	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_CLASSAD )"		5564450	0					
ANR	5564624	Callee	strcasecmp		5564450	0					
ANR	5564625	Identifier	strcasecmp		5564450	0					
ANR	5564626	ArgumentList	command		5564450	1					
ANR	5564627	Argument	command		5564450	0					
ANR	5564628	Identifier	command		5564450	0					
ANR	5564629	Argument	VMGAHP_COMMAND_CLASSAD		5564450	1					
ANR	5564630	Identifier	VMGAHP_COMMAND_CLASSAD		5564450	0					
ANR	5564631	PrimaryExpression	0		5564450	1					
ANR	5564632	CompoundStatement		24:62:862:862	5564450	1					
ANR	5564633	IfStatement	if ( m_jobAd != NULL )		5564450	0					
ANR	5564634	Condition	m_jobAd != NULL	588:6:13646:13660	5564450	0	True				
ANR	5564635	EqualityExpression	m_jobAd != NULL		5564450	0		!=			
ANR	5564636	Identifier	m_jobAd		5564450	0					
ANR	5564637	Identifier	NULL		5564450	1					
ANR	5564638	CompoundStatement		25:24:888:888	5564450	1					
ANR	5564639	Statement	delete	589:3:13669:13674	5564450	0	True				
ANR	5564640	ExpressionStatement	m_jobAd	589:10:13676:13683	5564450	1	True				
ANR	5564641	Identifier	m_jobAd		5564450	0					
ANR	5564642	ExpressionStatement	m_jobAd = NULL	590:3:13688:13702	5564450	2	True				
ANR	5564643	AssignmentExpression	m_jobAd = NULL		5564450	0		=			
ANR	5564644	Identifier	m_jobAd		5564450	0					
ANR	5564645	Identifier	NULL		5564450	1					
ANR	5564646	Statement	m_jobAd	592:2:13710:13716	5564450	1	True				
ANR	5564647	Statement	=	592:10:13718:13718	5564450	2	True				
ANR	5564648	Statement	new	592:12:13720:13722	5564450	3	True				
ANR	5564649	ExpressionStatement	ClassAd	592:16:13724:13731	5564450	4	True				
ANR	5564650	Identifier	ClassAd		5564450	0					
ANR	5564651	ExpressionStatement	ASSERT ( m_jobAd )	593:2:13735:13750	5564450	5	True				
ANR	5564652	CallExpression	ASSERT ( m_jobAd )		5564450	0					
ANR	5564653	Callee	ASSERT		5564450	0					
ANR	5564654	Identifier	ASSERT		5564450	0					
ANR	5564655	ArgumentList	m_jobAd		5564450	1					
ANR	5564656	Argument	m_jobAd		5564450	0					
ANR	5564657	Identifier	m_jobAd		5564450	0					
ANR	5564658	ExpressionStatement	m_inClassAd = true	594:2:13754:13772	5564450	6	True				
ANR	5564659	AssignmentExpression	m_inClassAd = true		5564450	0		=			
ANR	5564660	Identifier	m_inClassAd		5564450	0					
ANR	5564661	Identifier	true		5564450	1					
ANR	5564662	ExpressionStatement	returnOutputSuccess ( )	595:2:13776:13797	5564450	7	True				
ANR	5564663	CallExpression	returnOutputSuccess ( )		5564450	0					
ANR	5564664	Callee	returnOutputSuccess		5564450	0					
ANR	5564665	Identifier	returnOutputSuccess		5564450	0					
ANR	5564666	ArgumentList			5564450	1					
ANR	5564667	ElseStatement	else		5564450	0					
ANR	5564668	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_CLASSAD_END ) == 0 )"		5564450	0					
ANR	5564669	Condition	"strcasecmp ( command , VMGAHP_COMMAND_CLASSAD_END ) == 0"	596:11:13810:13861	5564450	0	True				
ANR	5564670	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5564450	0		==			
ANR	5564671	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_CLASSAD_END )"		5564450	0					
ANR	5564672	Callee	strcasecmp		5564450	0					
ANR	5564673	Identifier	strcasecmp		5564450	0					
ANR	5564674	ArgumentList	command		5564450	1					
ANR	5564675	Argument	command		5564450	0					
ANR	5564676	Identifier	command		5564450	0					
ANR	5564677	Argument	VMGAHP_COMMAND_CLASSAD_END		5564450	1					
ANR	5564678	Identifier	VMGAHP_COMMAND_CLASSAD_END		5564450	0					
ANR	5564679	PrimaryExpression	0		5564450	1					
ANR	5564680	CompoundStatement		33:66:1089:1089	5564450	1					
ANR	5564681	IfStatement	if ( m_jobAd != NULL )		5564450	0					
ANR	5564682	Condition	m_jobAd != NULL	597:6:13873:13887	5564450	0	True				
ANR	5564683	EqualityExpression	m_jobAd != NULL		5564450	0		!=			
ANR	5564684	Identifier	m_jobAd		5564450	0					
ANR	5564685	Identifier	NULL		5564450	1					
ANR	5564686	CompoundStatement		34:24:1115:1115	5564450	1					
ANR	5564687	Statement	delete	598:3:13896:13901	5564450	0	True				
ANR	5564688	ExpressionStatement	m_jobAd	598:10:13903:13910	5564450	1	True				
ANR	5564689	Identifier	m_jobAd		5564450	0					
ANR	5564690	ExpressionStatement	m_jobAd = NULL	599:3:13915:13929	5564450	2	True				
ANR	5564691	AssignmentExpression	m_jobAd = NULL		5564450	0		=			
ANR	5564692	Identifier	m_jobAd		5564450	0					
ANR	5564693	Identifier	NULL		5564450	1					
ANR	5564694	ExpressionStatement	m_inClassAd = false	601:2:13937:13956	5564450	1	True				
ANR	5564695	AssignmentExpression	m_inClassAd = false		5564450	0		=			
ANR	5564696	Identifier	m_inClassAd		5564450	0					
ANR	5564697	Identifier	false		5564450	1					
ANR	5564698	ExpressionStatement	returnOutputSuccess ( )	602:2:13960:13981	5564450	2	True				
ANR	5564699	CallExpression	returnOutputSuccess ( )		5564450	0					
ANR	5564700	Callee	returnOutputSuccess		5564450	0					
ANR	5564701	Identifier	returnOutputSuccess		5564450	0					
ANR	5564702	ArgumentList			5564450	1					
ANR	5564703	ElseStatement	else		5564450	0					
ANR	5564704	CompoundStatement		41:2:1219:1237	5564450	0					
ANR	5564705	IdentifierDeclStatement	VMRequest * new_req ;	604:2:13995:14013	5564450	0	True				
ANR	5564706	IdentifierDecl	* new_req		5564450	0					
ANR	5564707	IdentifierDeclType	VMRequest *		5564450	0					
ANR	5564708	Identifier	new_req		5564450	1					
ANR	5564709	ExpressionStatement	new_req = addNewRequest ( cmd )	605:2:14017:14045	5564450	1	True				
ANR	5564710	AssignmentExpression	new_req = addNewRequest ( cmd )		5564450	0		=			
ANR	5564711	Identifier	new_req		5564450	0					
ANR	5564712	CallExpression	addNewRequest ( cmd )		5564450	1					
ANR	5564713	Callee	addNewRequest		5564450	0					
ANR	5564714	Identifier	addNewRequest		5564450	0					
ANR	5564715	ArgumentList	cmd		5564450	1					
ANR	5564716	Argument	cmd		5564450	0					
ANR	5564717	Identifier	cmd		5564450	0					
ANR	5564718	ExpressionStatement	returnOutputSuccess ( )	606:2:14049:14070	5564450	2	True				
ANR	5564719	CallExpression	returnOutputSuccess ( )		5564450	0					
ANR	5564720	Callee	returnOutputSuccess		5564450	0					
ANR	5564721	Identifier	returnOutputSuccess		5564450	0					
ANR	5564722	ArgumentList			5564450	1					
ANR	5564723	ReturnStatement	return new_req ;	607:2:14074:14088	5564450	3	True				
ANR	5564724	Identifier	new_req		5564450	0					
ANR	5564725	ReturnStatement	return NULL ;	609:1:14094:14105	5564450	3	True				
ANR	5564726	Identifier	NULL		5564450	0					
ANR	5564727	ReturnType	VMRequest *		5564450	1					
ANR	5564728	Identifier	VMGahp :: preExecuteCommand		5564450	2					
ANR	5564729	ParameterList	"const char * cmd , Gahp_Args * args"		5564450	3					
ANR	5564730	Parameter	const char * cmd	563:26:12741:12755	5564450	0	True				
ANR	5564731	ParameterType	const char *		5564450	0					
ANR	5564732	Identifier	cmd		5564450	1					
ANR	5564733	Parameter	Gahp_Args * args	563:43:12758:12772	5564450	1	True				
ANR	5564734	ParameterType	Gahp_Args *		5564450	0					
ANR	5564735	Identifier	args		5564450	1					
ANR	5564736	CFGEntryNode	ENTRY		5564450		True				
ANR	5564737	CFGExitNode	EXIT		5564450		True				
ANR	5564738	Symbol	VMGAHP_COMMAND_ASYNC_MODE_ON		5564450						
ANR	5564739	Symbol	m_jobAd		5564450						
ANR	5564740	Symbol	VMGAHP_COMMAND_VERSION		5564450						
ANR	5564741	Symbol	m_inClassAd		5564450						
ANR	5564742	Symbol	* args		5564450						
ANR	5564743	Symbol	m_async_mode		5564450						
ANR	5564744	Symbol	* * args		5564450						
ANR	5564745	Symbol	strcasecmp		5564450						
ANR	5564746	Symbol	VMGAHP_COMMAND_COMMANDS		5564450						
ANR	5564747	Symbol	VMGAHP_COMMAND_CLASSAD_END		5564450						
ANR	5564748	Symbol	VMGAHP_COMMAND_SUPPORT_VMS		5564450						
ANR	5564749	Symbol	args -> argv		5564450						
ANR	5564750	Symbol	m_new_results_signaled		5564450						
ANR	5564751	Symbol	VMGAHP_COMMAND_CLASSAD		5564450						
ANR	5564752	Symbol	NULL		5564450						
ANR	5564753	Symbol	addNewRequest		5564450						
ANR	5564754	Symbol	VMGAHP_COMMAND_ASYNC_MODE_OFF		5564450						
ANR	5564755	Symbol	false		5564450						
ANR	5564756	Symbol	D_FULLDEBUG		5564450						
ANR	5564757	Symbol	VMGAHP_COMMAND_QUIT		5564450						
ANR	5564758	Symbol	command		5564450						
ANR	5564759	Symbol	args		5564450						
ANR	5564760	Symbol	VMGAHP_COMMAND_RESULTS		5564450						
ANR	5564761	Symbol	* args -> argv		5564450						
ANR	5564762	Symbol	true		5564450						
ANR	5564763	Symbol	cmd		5564450						
ANR	5564764	Symbol	new_req		5564450						
ANR	5564765	Function	VMGahp :: executeCommand	612:0:14110:15031							
ANR	5564766	FunctionDef	VMGahp :: executeCommand (VMRequest * req)		5564765	0					
ANR	5564767	CompoundStatement		614:0:14154:15031	5564765	0					
ANR	5564768	IdentifierDeclStatement	char * command = req -> m_args . argv [ 0 ] ;	615:1:14157:14192	5564765	0	True				
ANR	5564769	IdentifierDecl	* command = req -> m_args . argv [ 0 ]		5564765	0					
ANR	5564770	IdentifierDeclType	char *		5564765	0					
ANR	5564771	Identifier	command		5564765	1					
ANR	5564772	AssignmentExpression	* command = req -> m_args . argv [ 0 ]		5564765	2		=			
ANR	5564773	Identifier	command		5564765	0					
ANR	5564774	ArrayIndexing	req -> m_args . argv [ 0 ]		5564765	1					
ANR	5564775	MemberAccess	req -> m_args . argv		5564765	0					
ANR	5564776	PtrMemberAccess	req -> m_args		5564765	0					
ANR	5564777	Identifier	req		5564765	0					
ANR	5564778	Identifier	m_args		5564765	1					
ANR	5564779	Identifier	argv		5564765	1					
ANR	5564780	PrimaryExpression	0		5564765	1					
ANR	5564781	IdentifierDeclStatement	priv_state priv = set_user_priv ( ) ;	617:1:14196:14229	5564765	1	True				
ANR	5564782	IdentifierDecl	priv = set_user_priv ( )		5564765	0					
ANR	5564783	IdentifierDeclType	priv_state		5564765	0					
ANR	5564784	Identifier	priv		5564765	1					
ANR	5564785	AssignmentExpression	priv = set_user_priv ( )		5564765	2		=			
ANR	5564786	Identifier	priv		5564765	0					
ANR	5564787	CallExpression	set_user_priv ( )		5564765	1					
ANR	5564788	Callee	set_user_priv		5564765	0					
ANR	5564789	Identifier	set_user_priv		5564765	0					
ANR	5564790	ArgumentList			5564765	1					
ANR	5564791	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_VM_START ) == 0 )"		5564765	2					
ANR	5564792	Condition	"strcasecmp ( command , VMGAHP_COMMAND_VM_START ) == 0"	619:4:14236:14284	5564765	0	True				
ANR	5564793	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_START ) == 0"		5564765	0		==			
ANR	5564794	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_START )"		5564765	0					
ANR	5564795	Callee	strcasecmp		5564765	0					
ANR	5564796	Identifier	strcasecmp		5564765	0					
ANR	5564797	ArgumentList	command		5564765	1					
ANR	5564798	Argument	command		5564765	0					
ANR	5564799	Identifier	command		5564765	0					
ANR	5564800	Argument	VMGAHP_COMMAND_VM_START		5564765	1					
ANR	5564801	Identifier	VMGAHP_COMMAND_VM_START		5564765	0					
ANR	5564802	PrimaryExpression	0		5564765	1					
ANR	5564803	CompoundStatement		6:56:133:133	5564765	1					
ANR	5564804	ExpressionStatement	executeStart ( req )	620:2:14292:14309	5564765	0	True				
ANR	5564805	CallExpression	executeStart ( req )		5564765	0					
ANR	5564806	Callee	executeStart		5564765	0					
ANR	5564807	Identifier	executeStart		5564765	0					
ANR	5564808	ArgumentList	req		5564765	1					
ANR	5564809	Argument	req		5564765	0					
ANR	5564810	Identifier	req		5564765	0					
ANR	5564811	ElseStatement	else		5564765	0					
ANR	5564812	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_VM_STOP ) == 0 )"		5564765	0					
ANR	5564813	Condition	"strcasecmp ( command , VMGAHP_COMMAND_VM_STOP ) == 0"	621:11:14322:14369	5564765	0	True				
ANR	5564814	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_STOP ) == 0"		5564765	0		==			
ANR	5564815	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_STOP )"		5564765	0					
ANR	5564816	Callee	strcasecmp		5564765	0					
ANR	5564817	Identifier	strcasecmp		5564765	0					
ANR	5564818	ArgumentList	command		5564765	1					
ANR	5564819	Argument	command		5564765	0					
ANR	5564820	Identifier	command		5564765	0					
ANR	5564821	Argument	VMGAHP_COMMAND_VM_STOP		5564765	1					
ANR	5564822	Identifier	VMGAHP_COMMAND_VM_STOP		5564765	0					
ANR	5564823	PrimaryExpression	0		5564765	1					
ANR	5564824	CompoundStatement		8:62:218:218	5564765	1					
ANR	5564825	ExpressionStatement	executeStop ( req )	622:2:14377:14393	5564765	0	True				
ANR	5564826	CallExpression	executeStop ( req )		5564765	0					
ANR	5564827	Callee	executeStop		5564765	0					
ANR	5564828	Identifier	executeStop		5564765	0					
ANR	5564829	ArgumentList	req		5564765	1					
ANR	5564830	Argument	req		5564765	0					
ANR	5564831	Identifier	req		5564765	0					
ANR	5564832	ElseStatement	else		5564765	0					
ANR	5564833	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_VM_SUSPEND ) == 0 )"		5564765	0					
ANR	5564834	Condition	"strcasecmp ( command , VMGAHP_COMMAND_VM_SUSPEND ) == 0"	623:11:14406:14456	5564765	0	True				
ANR	5564835	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_SUSPEND ) == 0"		5564765	0		==			
ANR	5564836	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_SUSPEND )"		5564765	0					
ANR	5564837	Callee	strcasecmp		5564765	0					
ANR	5564838	Identifier	strcasecmp		5564765	0					
ANR	5564839	ArgumentList	command		5564765	1					
ANR	5564840	Argument	command		5564765	0					
ANR	5564841	Identifier	command		5564765	0					
ANR	5564842	Argument	VMGAHP_COMMAND_VM_SUSPEND		5564765	1					
ANR	5564843	Identifier	VMGAHP_COMMAND_VM_SUSPEND		5564765	0					
ANR	5564844	PrimaryExpression	0		5564765	1					
ANR	5564845	CompoundStatement		10:65:305:305	5564765	1					
ANR	5564846	ExpressionStatement	executeSuspend ( req )	624:2:14464:14483	5564765	0	True				
ANR	5564847	CallExpression	executeSuspend ( req )		5564765	0					
ANR	5564848	Callee	executeSuspend		5564765	0					
ANR	5564849	Identifier	executeSuspend		5564765	0					
ANR	5564850	ArgumentList	req		5564765	1					
ANR	5564851	Argument	req		5564765	0					
ANR	5564852	Identifier	req		5564765	0					
ANR	5564853	ElseStatement	else		5564765	0					
ANR	5564854	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_VM_SOFT_SUSPEND ) == 0 )"		5564765	0					
ANR	5564855	Condition	"strcasecmp ( command , VMGAHP_COMMAND_VM_SOFT_SUSPEND ) == 0"	625:11:14496:14551	5564765	0	True				
ANR	5564856	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_SOFT_SUSPEND ) == 0"		5564765	0		==			
ANR	5564857	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_SOFT_SUSPEND )"		5564765	0					
ANR	5564858	Callee	strcasecmp		5564765	0					
ANR	5564859	Identifier	strcasecmp		5564765	0					
ANR	5564860	ArgumentList	command		5564765	1					
ANR	5564861	Argument	command		5564765	0					
ANR	5564862	Identifier	command		5564765	0					
ANR	5564863	Argument	VMGAHP_COMMAND_VM_SOFT_SUSPEND		5564765	1					
ANR	5564864	Identifier	VMGAHP_COMMAND_VM_SOFT_SUSPEND		5564765	0					
ANR	5564865	PrimaryExpression	0		5564765	1					
ANR	5564866	CompoundStatement		12:70:400:400	5564765	1					
ANR	5564867	ExpressionStatement	executeSoftSuspend ( req )	626:2:14559:14582	5564765	0	True				
ANR	5564868	CallExpression	executeSoftSuspend ( req )		5564765	0					
ANR	5564869	Callee	executeSoftSuspend		5564765	0					
ANR	5564870	Identifier	executeSoftSuspend		5564765	0					
ANR	5564871	ArgumentList	req		5564765	1					
ANR	5564872	Argument	req		5564765	0					
ANR	5564873	Identifier	req		5564765	0					
ANR	5564874	ElseStatement	else		5564765	0					
ANR	5564875	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_VM_RESUME ) == 0 )"		5564765	0					
ANR	5564876	Condition	"strcasecmp ( command , VMGAHP_COMMAND_VM_RESUME ) == 0"	627:11:14595:14644	5564765	0	True				
ANR	5564877	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_RESUME ) == 0"		5564765	0		==			
ANR	5564878	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_RESUME )"		5564765	0					
ANR	5564879	Callee	strcasecmp		5564765	0					
ANR	5564880	Identifier	strcasecmp		5564765	0					
ANR	5564881	ArgumentList	command		5564765	1					
ANR	5564882	Argument	command		5564765	0					
ANR	5564883	Identifier	command		5564765	0					
ANR	5564884	Argument	VMGAHP_COMMAND_VM_RESUME		5564765	1					
ANR	5564885	Identifier	VMGAHP_COMMAND_VM_RESUME		5564765	0					
ANR	5564886	PrimaryExpression	0		5564765	1					
ANR	5564887	CompoundStatement		14:64:493:493	5564765	1					
ANR	5564888	ExpressionStatement	executeResume ( req )	628:2:14652:14670	5564765	0	True				
ANR	5564889	CallExpression	executeResume ( req )		5564765	0					
ANR	5564890	Callee	executeResume		5564765	0					
ANR	5564891	Identifier	executeResume		5564765	0					
ANR	5564892	ArgumentList	req		5564765	1					
ANR	5564893	Argument	req		5564765	0					
ANR	5564894	Identifier	req		5564765	0					
ANR	5564895	ElseStatement	else		5564765	0					
ANR	5564896	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0 )"		5564765	0					
ANR	5564897	Condition	"strcasecmp ( command , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0"	629:11:14683:14736	5564765	0	True				
ANR	5564898	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0"		5564765	0		==			
ANR	5564899	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_CHECKPOINT )"		5564765	0					
ANR	5564900	Callee	strcasecmp		5564765	0					
ANR	5564901	Identifier	strcasecmp		5564765	0					
ANR	5564902	ArgumentList	command		5564765	1					
ANR	5564903	Argument	command		5564765	0					
ANR	5564904	Identifier	command		5564765	0					
ANR	5564905	Argument	VMGAHP_COMMAND_VM_CHECKPOINT		5564765	1					
ANR	5564906	Identifier	VMGAHP_COMMAND_VM_CHECKPOINT		5564765	0					
ANR	5564907	PrimaryExpression	0		5564765	1					
ANR	5564908	CompoundStatement		16:68:585:585	5564765	1					
ANR	5564909	ExpressionStatement	executeCheckpoint ( req )	630:2:14744:14766	5564765	0	True				
ANR	5564910	CallExpression	executeCheckpoint ( req )		5564765	0					
ANR	5564911	Callee	executeCheckpoint		5564765	0					
ANR	5564912	Identifier	executeCheckpoint		5564765	0					
ANR	5564913	ArgumentList	req		5564765	1					
ANR	5564914	Argument	req		5564765	0					
ANR	5564915	Identifier	req		5564765	0					
ANR	5564916	ElseStatement	else		5564765	0					
ANR	5564917	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_VM_STATUS ) == 0 )"		5564765	0					
ANR	5564918	Condition	"strcasecmp ( command , VMGAHP_COMMAND_VM_STATUS ) == 0"	631:11:14779:14828	5564765	0	True				
ANR	5564919	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_STATUS ) == 0"		5564765	0		==			
ANR	5564920	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_STATUS )"		5564765	0					
ANR	5564921	Callee	strcasecmp		5564765	0					
ANR	5564922	Identifier	strcasecmp		5564765	0					
ANR	5564923	ArgumentList	command		5564765	1					
ANR	5564924	Argument	command		5564765	0					
ANR	5564925	Identifier	command		5564765	0					
ANR	5564926	Argument	VMGAHP_COMMAND_VM_STATUS		5564765	1					
ANR	5564927	Identifier	VMGAHP_COMMAND_VM_STATUS		5564765	0					
ANR	5564928	PrimaryExpression	0		5564765	1					
ANR	5564929	CompoundStatement		18:64:677:677	5564765	1					
ANR	5564930	ExpressionStatement	executeStatus ( req )	632:2:14836:14854	5564765	0	True				
ANR	5564931	CallExpression	executeStatus ( req )		5564765	0					
ANR	5564932	Callee	executeStatus		5564765	0					
ANR	5564933	Identifier	executeStatus		5564765	0					
ANR	5564934	ArgumentList	req		5564765	1					
ANR	5564935	Argument	req		5564765	0					
ANR	5564936	Identifier	req		5564765	0					
ANR	5564937	ElseStatement	else		5564765	0					
ANR	5564938	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_VM_GETPID ) == 0 )"		5564765	0					
ANR	5564939	Condition	"strcasecmp ( command , VMGAHP_COMMAND_VM_GETPID ) == 0"	633:11:14867:14916	5564765	0	True				
ANR	5564940	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_GETPID ) == 0"		5564765	0		==			
ANR	5564941	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_GETPID )"		5564765	0					
ANR	5564942	Callee	strcasecmp		5564765	0					
ANR	5564943	Identifier	strcasecmp		5564765	0					
ANR	5564944	ArgumentList	command		5564765	1					
ANR	5564945	Argument	command		5564765	0					
ANR	5564946	Identifier	command		5564765	0					
ANR	5564947	Argument	VMGAHP_COMMAND_VM_GETPID		5564765	1					
ANR	5564948	Identifier	VMGAHP_COMMAND_VM_GETPID		5564765	0					
ANR	5564949	PrimaryExpression	0		5564765	1					
ANR	5564950	CompoundStatement		20:64:765:765	5564765	1					
ANR	5564951	ExpressionStatement	executeGetpid ( req )	634:2:14924:14942	5564765	0	True				
ANR	5564952	CallExpression	executeGetpid ( req )		5564765	0					
ANR	5564953	Callee	executeGetpid		5564765	0					
ANR	5564954	Identifier	executeGetpid		5564765	0					
ANR	5564955	ArgumentList	req		5564765	1					
ANR	5564956	Argument	req		5564765	0					
ANR	5564957	Identifier	req		5564765	0					
ANR	5564958	ElseStatement	else		5564765	0					
ANR	5564959	CompoundStatement		22:8:797:797	5564765	0					
ANR	5564960	ExpressionStatement	"vmprintf ( D_ALWAYS , ""Unknown command(%s)\\n"" , command )"	636:2:14956:15008	5564765	0	True				
ANR	5564961	CallExpression	"vmprintf ( D_ALWAYS , ""Unknown command(%s)\\n"" , command )"		5564765	0					
ANR	5564962	Callee	vmprintf		5564765	0					
ANR	5564963	Identifier	vmprintf		5564765	0					
ANR	5564964	ArgumentList	D_ALWAYS		5564765	1					
ANR	5564965	Argument	D_ALWAYS		5564765	0					
ANR	5564966	Identifier	D_ALWAYS		5564765	0					
ANR	5564967	Argument	"""Unknown command(%s)\\n"""		5564765	1					
ANR	5564968	PrimaryExpression	"""Unknown command(%s)\\n"""		5564765	0					
ANR	5564969	Argument	command		5564765	2					
ANR	5564970	Identifier	command		5564765	0					
ANR	5564971	ExpressionStatement	set_priv ( priv )	639:1:15015:15029	5564765	3	True				
ANR	5564972	CallExpression	set_priv ( priv )		5564765	0					
ANR	5564973	Callee	set_priv		5564765	0					
ANR	5564974	Identifier	set_priv		5564765	0					
ANR	5564975	ArgumentList	priv		5564765	1					
ANR	5564976	Argument	priv		5564765	0					
ANR	5564977	Identifier	priv		5564765	0					
ANR	5564978	ReturnType	void		5564765	1					
ANR	5564979	Identifier	VMGahp :: executeCommand		5564765	2					
ANR	5564980	ParameterList	VMRequest * req		5564765	3					
ANR	5564981	Parameter	VMRequest * req	613:23:14138:14151	5564765	0	True				
ANR	5564982	ParameterType	VMRequest *		5564765	0					
ANR	5564983	Identifier	req		5564765	1					
ANR	5564984	CFGEntryNode	ENTRY		5564765		True				
ANR	5564985	CFGExitNode	EXIT		5564765		True				
ANR	5564986	Symbol	VMGAHP_COMMAND_VM_RESUME		5564765						
ANR	5564987	Symbol	VMGAHP_COMMAND_VM_STOP		5564765						
ANR	5564988	Symbol	* req		5564765						
ANR	5564989	Symbol	D_ALWAYS		5564765						
ANR	5564990	Symbol	set_user_priv		5564765						
ANR	5564991	Symbol	VMGAHP_COMMAND_VM_START		5564765						
ANR	5564992	Symbol	VMGAHP_COMMAND_VM_SOFT_SUSPEND		5564765						
ANR	5564993	Symbol	req -> m_args		5564765						
ANR	5564994	Symbol	VMGAHP_COMMAND_VM_CHECKPOINT		5564765						
ANR	5564995	Symbol	command		5564765						
ANR	5564996	Symbol	* req -> m_args		5564765						
ANR	5564997	Symbol	* * req		5564765						
ANR	5564998	Symbol	req -> m_args . argv		5564765						
ANR	5564999	Symbol	VMGAHP_COMMAND_VM_SUSPEND		5564765						
ANR	5565000	Symbol	VMGAHP_COMMAND_VM_GETPID		5564765						
ANR	5565001	Symbol	priv		5564765						
ANR	5565002	Symbol	strcasecmp		5564765						
ANR	5565003	Symbol	req		5564765						
ANR	5565004	Symbol	* req -> m_args . argv		5564765						
ANR	5565005	Symbol	VMGAHP_COMMAND_VM_STATUS		5564765						
ANR	5565006	Function	VMGahp :: executeStart	642:0:15034:18106							
ANR	5565007	FunctionDef	VMGahp :: executeStart (VMRequest * req)		5565006	0					
ANR	5565008	CompoundStatement		644:0:15076:18106	5565006	0					
ANR	5565009	IdentifierDeclStatement	char * vmtype = req -> m_args . argv [ 2 ] ;	646:1:15134:15168	5565006	0	True				
ANR	5565010	IdentifierDecl	* vmtype = req -> m_args . argv [ 2 ]		5565006	0					
ANR	5565011	IdentifierDeclType	char *		5565006	0					
ANR	5565012	Identifier	vmtype		5565006	1					
ANR	5565013	AssignmentExpression	* vmtype = req -> m_args . argv [ 2 ]		5565006	2		=			
ANR	5565014	Identifier	vmtype		5565006	0					
ANR	5565015	ArrayIndexing	req -> m_args . argv [ 2 ]		5565006	1					
ANR	5565016	MemberAccess	req -> m_args . argv		5565006	0					
ANR	5565017	PtrMemberAccess	req -> m_args		5565006	0					
ANR	5565018	Identifier	req		5565006	0					
ANR	5565019	Identifier	m_args		5565006	1					
ANR	5565020	Identifier	argv		5565006	1					
ANR	5565021	PrimaryExpression	2		5565006	1					
ANR	5565022	IfStatement	if ( m_jobAd == NULL )		5565006	1					
ANR	5565023	Condition	m_jobAd == NULL	648:5:15176:15190	5565006	0	True				
ANR	5565024	EqualityExpression	m_jobAd == NULL		5565006	0		==			
ANR	5565025	Identifier	m_jobAd		5565006	0					
ANR	5565026	Identifier	NULL		5565006	1					
ANR	5565027	CompoundStatement		5:23:117:117	5565006	1					
ANR	5565028	ExpressionStatement	req -> m_has_result = true	649:2:15198:15222	5565006	0	True				
ANR	5565029	AssignmentExpression	req -> m_has_result = true		5565006	0		=			
ANR	5565030	PtrMemberAccess	req -> m_has_result		5565006	0					
ANR	5565031	Identifier	req		5565006	0					
ANR	5565032	Identifier	m_has_result		5565006	1					
ANR	5565033	Identifier	true		5565006	1					
ANR	5565034	ExpressionStatement	req -> m_is_success = false	650:2:15226:15251	5565006	1	True				
ANR	5565035	AssignmentExpression	req -> m_is_success = false		5565006	0		=			
ANR	5565036	PtrMemberAccess	req -> m_is_success		5565006	0					
ANR	5565037	Identifier	req		5565006	0					
ANR	5565038	Identifier	m_is_success		5565006	1					
ANR	5565039	Identifier	false		5565006	1					
ANR	5565040	ExpressionStatement	req -> m_result = VMGAHP_ERR_NO_JOBCLASSAD_INFO	651:2:15255:15300	5565006	2	True				
ANR	5565041	AssignmentExpression	req -> m_result = VMGAHP_ERR_NO_JOBCLASSAD_INFO		5565006	0		=			
ANR	5565042	PtrMemberAccess	req -> m_result		5565006	0					
ANR	5565043	Identifier	req		5565006	0					
ANR	5565044	Identifier	m_result		5565006	1					
ANR	5565045	Identifier	VMGAHP_ERR_NO_JOBCLASSAD_INFO		5565006	1					
ANR	5565046	ReturnStatement	return ;	652:2:15304:15310	5565006	3	True				
ANR	5565047	IdentifierDeclStatement	MyString vmworkingdir ;	655:1:15317:15338	5565006	2	True				
ANR	5565048	IdentifierDecl	vmworkingdir		5565006	0					
ANR	5565049	IdentifierDeclType	MyString		5565006	0					
ANR	5565050	Identifier	vmworkingdir		5565006	1					
ANR	5565051	IfStatement	"if ( m_jobAd -> LookupString ( ""VM_WORKING_DIR"" , vmworkingdir ) != 1 )"		5565006	3					
ANR	5565052	Condition	"m_jobAd -> LookupString ( ""VM_WORKING_DIR"" , vmworkingdir ) != 1"	656:5:15345:15403	5565006	0	True				
ANR	5565053	EqualityExpression	"m_jobAd -> LookupString ( ""VM_WORKING_DIR"" , vmworkingdir ) != 1"		5565006	0		!=			
ANR	5565054	CallExpression	"m_jobAd -> LookupString ( ""VM_WORKING_DIR"" , vmworkingdir )"		5565006	0					
ANR	5565055	Callee	m_jobAd -> LookupString		5565006	0					
ANR	5565056	PtrMemberAccess	m_jobAd -> LookupString		5565006	0					
ANR	5565057	Identifier	m_jobAd		5565006	0					
ANR	5565058	Identifier	LookupString		5565006	1					
ANR	5565059	ArgumentList	"""VM_WORKING_DIR"""		5565006	1					
ANR	5565060	Argument	"""VM_WORKING_DIR"""		5565006	0					
ANR	5565061	PrimaryExpression	"""VM_WORKING_DIR"""		5565006	0					
ANR	5565062	Argument	vmworkingdir		5565006	1					
ANR	5565063	Identifier	vmworkingdir		5565006	0					
ANR	5565064	PrimaryExpression	1		5565006	1					
ANR	5565065	CompoundStatement		13:67:330:330	5565006	1					
ANR	5565066	ExpressionStatement	req -> m_has_result = true	657:2:15411:15435	5565006	0	True				
ANR	5565067	AssignmentExpression	req -> m_has_result = true		5565006	0		=			
ANR	5565068	PtrMemberAccess	req -> m_has_result		5565006	0					
ANR	5565069	Identifier	req		5565006	0					
ANR	5565070	Identifier	m_has_result		5565006	1					
ANR	5565071	Identifier	true		5565006	1					
ANR	5565072	ExpressionStatement	req -> m_is_success = false	658:2:15439:15464	5565006	1	True				
ANR	5565073	AssignmentExpression	req -> m_is_success = false		5565006	0		=			
ANR	5565074	PtrMemberAccess	req -> m_is_success		5565006	0					
ANR	5565075	Identifier	req		5565006	0					
ANR	5565076	Identifier	m_is_success		5565006	1					
ANR	5565077	Identifier	false		5565006	1					
ANR	5565078	ExpressionStatement	req -> m_result = VMGAHP_ERR_NO_JOBCLASSAD_INFO	659:2:15468:15513	5565006	2	True				
ANR	5565079	AssignmentExpression	req -> m_result = VMGAHP_ERR_NO_JOBCLASSAD_INFO		5565006	0		=			
ANR	5565080	PtrMemberAccess	req -> m_result		5565006	0					
ANR	5565081	Identifier	req		5565006	0					
ANR	5565082	Identifier	m_result		5565006	1					
ANR	5565083	Identifier	VMGAHP_ERR_NO_JOBCLASSAD_INFO		5565006	1					
ANR	5565084	ExpressionStatement	"vmprintf ( D_ALWAYS , ""VM_WORKING_DIR cannot be found in vm classAd\\n"" )"	660:2:15517:15585	5565006	3	True				
ANR	5565085	CallExpression	"vmprintf ( D_ALWAYS , ""VM_WORKING_DIR cannot be found in vm classAd\\n"" )"		5565006	0					
ANR	5565086	Callee	vmprintf		5565006	0					
ANR	5565087	Identifier	vmprintf		5565006	0					
ANR	5565088	ArgumentList	D_ALWAYS		5565006	1					
ANR	5565089	Argument	D_ALWAYS		5565006	0					
ANR	5565090	Identifier	D_ALWAYS		5565006	0					
ANR	5565091	Argument	"""VM_WORKING_DIR cannot be found in vm classAd\\n"""		5565006	1					
ANR	5565092	PrimaryExpression	"""VM_WORKING_DIR cannot be found in vm classAd\\n"""		5565006	0					
ANR	5565093	ReturnStatement	return ;	661:2:15589:15595	5565006	4	True				
ANR	5565094	IdentifierDeclStatement	MyString job_vmtype ;	664:1:15602:15621	5565006	4	True				
ANR	5565095	IdentifierDecl	job_vmtype		5565006	0					
ANR	5565096	IdentifierDeclType	MyString		5565006	0					
ANR	5565097	Identifier	job_vmtype		5565006	1					
ANR	5565098	IfStatement	"if ( m_jobAd -> LookupString ( ATTR_JOB_VM_TYPE , job_vmtype ) != 1 )"		5565006	5					
ANR	5565099	Condition	"m_jobAd -> LookupString ( ATTR_JOB_VM_TYPE , job_vmtype ) != 1"	665:5:15628:15684	5565006	0	True				
ANR	5565100	EqualityExpression	"m_jobAd -> LookupString ( ATTR_JOB_VM_TYPE , job_vmtype ) != 1"		5565006	0		!=			
ANR	5565101	CallExpression	"m_jobAd -> LookupString ( ATTR_JOB_VM_TYPE , job_vmtype )"		5565006	0					
ANR	5565102	Callee	m_jobAd -> LookupString		5565006	0					
ANR	5565103	PtrMemberAccess	m_jobAd -> LookupString		5565006	0					
ANR	5565104	Identifier	m_jobAd		5565006	0					
ANR	5565105	Identifier	LookupString		5565006	1					
ANR	5565106	ArgumentList	ATTR_JOB_VM_TYPE		5565006	1					
ANR	5565107	Argument	ATTR_JOB_VM_TYPE		5565006	0					
ANR	5565108	Identifier	ATTR_JOB_VM_TYPE		5565006	0					
ANR	5565109	Argument	job_vmtype		5565006	1					
ANR	5565110	Identifier	job_vmtype		5565006	0					
ANR	5565111	PrimaryExpression	1		5565006	1					
ANR	5565112	CompoundStatement		22:65:611:611	5565006	1					
ANR	5565113	ExpressionStatement	req -> m_has_result = true	666:2:15692:15716	5565006	0	True				
ANR	5565114	AssignmentExpression	req -> m_has_result = true		5565006	0		=			
ANR	5565115	PtrMemberAccess	req -> m_has_result		5565006	0					
ANR	5565116	Identifier	req		5565006	0					
ANR	5565117	Identifier	m_has_result		5565006	1					
ANR	5565118	Identifier	true		5565006	1					
ANR	5565119	ExpressionStatement	req -> m_is_success = false	667:2:15720:15745	5565006	1	True				
ANR	5565120	AssignmentExpression	req -> m_is_success = false		5565006	0		=			
ANR	5565121	PtrMemberAccess	req -> m_is_success		5565006	0					
ANR	5565122	Identifier	req		5565006	0					
ANR	5565123	Identifier	m_is_success		5565006	1					
ANR	5565124	Identifier	false		5565006	1					
ANR	5565125	ExpressionStatement	req -> m_result = VMGAHP_ERR_NO_JOBCLASSAD_INFO	668:2:15749:15794	5565006	2	True				
ANR	5565126	AssignmentExpression	req -> m_result = VMGAHP_ERR_NO_JOBCLASSAD_INFO		5565006	0		=			
ANR	5565127	PtrMemberAccess	req -> m_result		5565006	0					
ANR	5565128	Identifier	req		5565006	0					
ANR	5565129	Identifier	m_result		5565006	1					
ANR	5565130	Identifier	VMGAHP_ERR_NO_JOBCLASSAD_INFO		5565006	1					
ANR	5565131	ExpressionStatement	"vmprintf ( D_ALWAYS , ""VM_TYPE('%s') cannot be found in vm classAd\\n"" , ATTR_JOB_VM_TYPE )"	669:2:15798:15890	5565006	3	True				
ANR	5565132	CallExpression	"vmprintf ( D_ALWAYS , ""VM_TYPE('%s') cannot be found in vm classAd\\n"" , ATTR_JOB_VM_TYPE )"		5565006	0					
ANR	5565133	Callee	vmprintf		5565006	0					
ANR	5565134	Identifier	vmprintf		5565006	0					
ANR	5565135	ArgumentList	D_ALWAYS		5565006	1					
ANR	5565136	Argument	D_ALWAYS		5565006	0					
ANR	5565137	Identifier	D_ALWAYS		5565006	0					
ANR	5565138	Argument	"""VM_TYPE('%s') cannot be found in vm classAd\\n"""		5565006	1					
ANR	5565139	PrimaryExpression	"""VM_TYPE('%s') cannot be found in vm classAd\\n"""		5565006	0					
ANR	5565140	Argument	ATTR_JOB_VM_TYPE		5565006	2					
ANR	5565141	Identifier	ATTR_JOB_VM_TYPE		5565006	0					
ANR	5565142	ReturnStatement	return ;	671:2:15894:15900	5565006	4	True				
ANR	5565143	IfStatement	"if ( strcasecmp ( vmtype , job_vmtype . Value ( ) ) != 0 )"		5565006	6					
ANR	5565144	Condition	"strcasecmp ( vmtype , job_vmtype . Value ( ) ) != 0"	674:4:15910:15952	5565006	0	True				
ANR	5565145	EqualityExpression	"strcasecmp ( vmtype , job_vmtype . Value ( ) ) != 0"		5565006	0		!=			
ANR	5565146	CallExpression	"strcasecmp ( vmtype , job_vmtype . Value ( ) )"		5565006	0					
ANR	5565147	Callee	strcasecmp		5565006	0					
ANR	5565148	Identifier	strcasecmp		5565006	0					
ANR	5565149	ArgumentList	vmtype		5565006	1					
ANR	5565150	Argument	vmtype		5565006	0					
ANR	5565151	Identifier	vmtype		5565006	0					
ANR	5565152	Argument	job_vmtype . Value ( )		5565006	1					
ANR	5565153	CallExpression	job_vmtype . Value ( )		5565006	0					
ANR	5565154	Callee	job_vmtype . Value		5565006	0					
ANR	5565155	MemberAccess	job_vmtype . Value		5565006	0					
ANR	5565156	Identifier	job_vmtype		5565006	0					
ANR	5565157	Identifier	Value		5565006	1					
ANR	5565158	ArgumentList			5565006	1					
ANR	5565159	PrimaryExpression	0		5565006	1					
ANR	5565160	CompoundStatement		31:50:879:879	5565006	1					
ANR	5565161	ExpressionStatement	req -> m_has_result = true	675:2:15960:15984	5565006	0	True				
ANR	5565162	AssignmentExpression	req -> m_has_result = true		5565006	0		=			
ANR	5565163	PtrMemberAccess	req -> m_has_result		5565006	0					
ANR	5565164	Identifier	req		5565006	0					
ANR	5565165	Identifier	m_has_result		5565006	1					
ANR	5565166	Identifier	true		5565006	1					
ANR	5565167	ExpressionStatement	req -> m_is_success = false	676:2:15988:16013	5565006	1	True				
ANR	5565168	AssignmentExpression	req -> m_is_success = false		5565006	0		=			
ANR	5565169	PtrMemberAccess	req -> m_is_success		5565006	0					
ANR	5565170	Identifier	req		5565006	0					
ANR	5565171	Identifier	m_is_success		5565006	1					
ANR	5565172	Identifier	false		5565006	1					
ANR	5565173	ExpressionStatement	req -> m_result = VMGAHP_ERR_NO_SUPPORTED_VM_TYPE	677:2:16017:16064	5565006	2	True				
ANR	5565174	AssignmentExpression	req -> m_result = VMGAHP_ERR_NO_SUPPORTED_VM_TYPE		5565006	0		=			
ANR	5565175	PtrMemberAccess	req -> m_result		5565006	0					
ANR	5565176	Identifier	req		5565006	0					
ANR	5565177	Identifier	m_result		5565006	1					
ANR	5565178	Identifier	VMGAHP_ERR_NO_SUPPORTED_VM_TYPE		5565006	1					
ANR	5565179	Statement	vmprintf	678:2:16068:16075	5565006	3	True				
ANR	5565180	Statement	(	678:10:16076:16076	5565006	4	True				
ANR	5565181	Statement	D_ALWAYS	678:11:16077:16084	5565006	5	True				
ANR	5565182	Statement	","	678:19:16085:16085	5565006	6	True				
ANR	5565183	Statement	"""Argument is %s but VM_TYPE in job classAD """	678:21:16087:16130	5565006	7	True				
ANR	5565184	Statement	"""is %s\\n"""	679:6:16138:16146	5565006	8	True				
ANR	5565185	Statement	","	679:15:16147:16147	5565006	9	True				
ANR	5565186	Statement	vmtype	679:17:16149:16154	5565006	10	True				
ANR	5565187	Statement	","	679:23:16155:16155	5565006	11	True				
ANR	5565188	Statement	job_vmtype	679:25:16157:16166	5565006	12	True				
ANR	5565189	Statement	.	679:35:16167:16167	5565006	13	True				
ANR	5565190	Statement	Value	679:36:16168:16172	5565006	14	True				
ANR	5565191	Statement	(	679:41:16173:16173	5565006	15	True				
ANR	5565192	Statement	)	679:42:16174:16174	5565006	16	True				
ANR	5565193	Statement	)	679:43:16175:16175	5565006	17	True				
ANR	5565194	ExpressionStatement		679:44:16176:16176	5565006	18	True				
ANR	5565195	ReturnStatement	return ;	680:2:16180:16186	5565006	19	True				
ANR	5565196	IfStatement	"if ( strcasecmp ( vmtype , m_gahp_config -> m_vm_type . Value ( ) ) != 0 )"		5565006	7					
ANR	5565197	Condition	"strcasecmp ( vmtype , m_gahp_config -> m_vm_type . Value ( ) ) != 0"	683:4:16196:16252	5565006	0	True				
ANR	5565198	EqualityExpression	"strcasecmp ( vmtype , m_gahp_config -> m_vm_type . Value ( ) ) != 0"		5565006	0		!=			
ANR	5565199	CallExpression	"strcasecmp ( vmtype , m_gahp_config -> m_vm_type . Value ( ) )"		5565006	0					
ANR	5565200	Callee	strcasecmp		5565006	0					
ANR	5565201	Identifier	strcasecmp		5565006	0					
ANR	5565202	ArgumentList	vmtype		5565006	1					
ANR	5565203	Argument	vmtype		5565006	0					
ANR	5565204	Identifier	vmtype		5565006	0					
ANR	5565205	Argument	m_gahp_config -> m_vm_type . Value ( )		5565006	1					
ANR	5565206	CallExpression	m_gahp_config -> m_vm_type . Value ( )		5565006	0					
ANR	5565207	Callee	m_gahp_config -> m_vm_type . Value		5565006	0					
ANR	5565208	MemberAccess	m_gahp_config -> m_vm_type . Value		5565006	0					
ANR	5565209	PtrMemberAccess	m_gahp_config -> m_vm_type		5565006	0					
ANR	5565210	Identifier	m_gahp_config		5565006	0					
ANR	5565211	Identifier	m_vm_type		5565006	1					
ANR	5565212	Identifier	Value		5565006	1					
ANR	5565213	ArgumentList			5565006	1					
ANR	5565214	PrimaryExpression	0		5565006	1					
ANR	5565215	CompoundStatement		40:64:1179:1179	5565006	1					
ANR	5565216	ExpressionStatement	req -> m_has_result = true	684:2:16260:16284	5565006	0	True				
ANR	5565217	AssignmentExpression	req -> m_has_result = true		5565006	0		=			
ANR	5565218	PtrMemberAccess	req -> m_has_result		5565006	0					
ANR	5565219	Identifier	req		5565006	0					
ANR	5565220	Identifier	m_has_result		5565006	1					
ANR	5565221	Identifier	true		5565006	1					
ANR	5565222	ExpressionStatement	req -> m_is_success = false	685:2:16288:16313	5565006	1	True				
ANR	5565223	AssignmentExpression	req -> m_is_success = false		5565006	0		=			
ANR	5565224	PtrMemberAccess	req -> m_is_success		5565006	0					
ANR	5565225	Identifier	req		5565006	0					
ANR	5565226	Identifier	m_is_success		5565006	1					
ANR	5565227	Identifier	false		5565006	1					
ANR	5565228	ExpressionStatement	req -> m_result = VMGAHP_ERR_NO_SUPPORTED_VM_TYPE	686:2:16317:16364	5565006	2	True				
ANR	5565229	AssignmentExpression	req -> m_result = VMGAHP_ERR_NO_SUPPORTED_VM_TYPE		5565006	0		=			
ANR	5565230	PtrMemberAccess	req -> m_result		5565006	0					
ANR	5565231	Identifier	req		5565006	0					
ANR	5565232	Identifier	m_result		5565006	1					
ANR	5565233	Identifier	VMGAHP_ERR_NO_SUPPORTED_VM_TYPE		5565006	1					
ANR	5565234	ReturnStatement	return ;	687:2:16368:16374	5565006	3	True				
ANR	5565235	IdentifierDeclStatement	VMType * new_vm = NULL ;	690:1:16381:16402	5565006	8	True				
ANR	5565236	IdentifierDecl	* new_vm = NULL		5565006	0					
ANR	5565237	IdentifierDeclType	VMType *		5565006	0					
ANR	5565238	Identifier	new_vm		5565006	1					
ANR	5565239	AssignmentExpression	* new_vm = NULL		5565006	2		=			
ANR	5565240	Identifier	NULL		5565006	0					
ANR	5565241	Identifier	NULL		5565006	1					
ANR	5565242	IfStatement	"if ( strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_XEN ) == 0 )"		5565006	9					
ANR	5565243	Condition	"strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_XEN ) == 0"	694:4:16519:16565	5565006	0	True				
ANR	5565244	EqualityExpression	"strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_XEN ) == 0"		5565006	0		==			
ANR	5565245	CallExpression	"strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_XEN )"		5565006	0					
ANR	5565246	Callee	strcasecmp		5565006	0					
ANR	5565247	Identifier	strcasecmp		5565006	0					
ANR	5565248	ArgumentList	vmtype		5565006	1					
ANR	5565249	Argument	vmtype		5565006	0					
ANR	5565250	Identifier	vmtype		5565006	0					
ANR	5565251	Argument	CONDOR_VM_UNIVERSE_XEN		5565006	1					
ANR	5565252	Identifier	CONDOR_VM_UNIVERSE_XEN		5565006	0					
ANR	5565253	PrimaryExpression	0		5565006	1					
ANR	5565254	CompoundStatement		51:54:1492:1492	5565006	1					
ANR	5565255	ExpressionStatement	"new_vm = new XenType ( vmworkingdir . Value ( ) , m_jobAd )"	695:2:16573:16626	5565006	0	True				
ANR	5565256	AssignmentExpression	"new_vm = new XenType ( vmworkingdir . Value ( ) , m_jobAd )"		5565006	0		=			
ANR	5565257	Identifier	new_vm		5565006	0					
ANR	5565258	Expression	"vmworkingdir . Value ( ) , m_jobAd"		5565006	1					
ANR	5565259	CallExpression	vmworkingdir . Value ( )		5565006	0					
ANR	5565260	Callee	vmworkingdir . Value		5565006	0					
ANR	5565261	MemberAccess	vmworkingdir . Value		5565006	0					
ANR	5565262	Identifier	vmworkingdir		5565006	0					
ANR	5565263	Identifier	Value		5565006	1					
ANR	5565264	ArgumentList			5565006	1					
ANR	5565265	Identifier	m_jobAd		5565006	1					
ANR	5565266	ExpressionStatement	ASSERT ( new_vm )	696:2:16630:16644	5565006	1	True				
ANR	5565267	CallExpression	ASSERT ( new_vm )		5565006	0					
ANR	5565268	Callee	ASSERT		5565006	0					
ANR	5565269	Identifier	ASSERT		5565006	0					
ANR	5565270	ArgumentList	new_vm		5565006	1					
ANR	5565271	Argument	new_vm		5565006	0					
ANR	5565272	Identifier	new_vm		5565006	0					
ANR	5565273	ElseStatement	else		5565006	0					
ANR	5565274	IfStatement	"if ( strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_KVM ) == 0 )"		5565006	0					
ANR	5565275	Condition	"strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_KVM ) == 0"	697:10:16656:16702	5565006	0	True				
ANR	5565276	EqualityExpression	"strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_KVM ) == 0"		5565006	0		==			
ANR	5565277	CallExpression	"strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_KVM )"		5565006	0					
ANR	5565278	Callee	strcasecmp		5565006	0					
ANR	5565279	Identifier	strcasecmp		5565006	0					
ANR	5565280	ArgumentList	vmtype		5565006	1					
ANR	5565281	Argument	vmtype		5565006	0					
ANR	5565282	Identifier	vmtype		5565006	0					
ANR	5565283	Argument	CONDOR_VM_UNIVERSE_KVM		5565006	1					
ANR	5565284	Identifier	CONDOR_VM_UNIVERSE_KVM		5565006	0					
ANR	5565285	PrimaryExpression	0		5565006	1					
ANR	5565286	CompoundStatement		54:59:1628:1628	5565006	1					
ANR	5565287	ExpressionStatement	"new_vm = new KVMType ( vmworkingdir . Value ( ) , m_jobAd )"	698:3:16710:16766	5565006	0	True				
ANR	5565288	AssignmentExpression	"new_vm = new KVMType ( vmworkingdir . Value ( ) , m_jobAd )"		5565006	0		=			
ANR	5565289	Identifier	new_vm		5565006	0					
ANR	5565290	Expression	"vmworkingdir . Value ( ) , m_jobAd"		5565006	1					
ANR	5565291	CallExpression	vmworkingdir . Value ( )		5565006	0					
ANR	5565292	Callee	vmworkingdir . Value		5565006	0					
ANR	5565293	MemberAccess	vmworkingdir . Value		5565006	0					
ANR	5565294	Identifier	vmworkingdir		5565006	0					
ANR	5565295	Identifier	Value		5565006	1					
ANR	5565296	ArgumentList			5565006	1					
ANR	5565297	Identifier	m_jobAd		5565006	1					
ANR	5565298	ExpressionStatement	ASSERT ( new_vm )	700:2:16770:16784	5565006	1	True				
ANR	5565299	CallExpression	ASSERT ( new_vm )		5565006	0					
ANR	5565300	Callee	ASSERT		5565006	0					
ANR	5565301	Identifier	ASSERT		5565006	0					
ANR	5565302	ArgumentList	new_vm		5565006	1					
ANR	5565303	Argument	new_vm		5565006	0					
ANR	5565304	Identifier	new_vm		5565006	0					
ANR	5565305	ElseStatement	else		5565006	0					
ANR	5565306	IfStatement	"if ( strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_VMWARE ) == 0 )"		5565006	0					
ANR	5565307	Condition	"strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_VMWARE ) == 0"	703:4:16804:16853	5565006	0	True				
ANR	5565308	EqualityExpression	"strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_VMWARE ) == 0"		5565006	0		==			
ANR	5565309	CallExpression	"strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_VMWARE )"		5565006	0					
ANR	5565310	Callee	strcasecmp		5565006	0					
ANR	5565311	Identifier	strcasecmp		5565006	0					
ANR	5565312	ArgumentList	vmtype		5565006	1					
ANR	5565313	Argument	vmtype		5565006	0					
ANR	5565314	Identifier	vmtype		5565006	0					
ANR	5565315	Argument	CONDOR_VM_UNIVERSE_VMWARE		5565006	1					
ANR	5565316	Identifier	CONDOR_VM_UNIVERSE_VMWARE		5565006	0					
ANR	5565317	PrimaryExpression	0		5565006	1					
ANR	5565318	CompoundStatement		60:57:1780:1780	5565006	1					
ANR	5565319	ExpressionStatement	"new_vm = new VMwareType ( m_gahp_config -> m_prog_for_script . Value ( ) , m_gahp_config -> m_vm_script . Value ( ) , vmworkingdir . Value ( ) , m_jobAd )"	704:2:16861:17001	5565006	0	True				
ANR	5565320	AssignmentExpression	"new_vm = new VMwareType ( m_gahp_config -> m_prog_for_script . Value ( ) , m_gahp_config -> m_vm_script . Value ( ) , vmworkingdir . Value ( ) , m_jobAd )"		5565006	0		=			
ANR	5565321	Identifier	new_vm		5565006	0					
ANR	5565322	Expression	"m_gahp_config -> m_prog_for_script . Value ( ) , m_gahp_config -> m_vm_script . Value ( ) , vmworkingdir . Value ( ) , m_jobAd"		5565006	1					
ANR	5565323	CallExpression	m_gahp_config -> m_prog_for_script . Value ( )		5565006	0					
ANR	5565324	Callee	m_gahp_config -> m_prog_for_script . Value		5565006	0					
ANR	5565325	MemberAccess	m_gahp_config -> m_prog_for_script . Value		5565006	0					
ANR	5565326	PtrMemberAccess	m_gahp_config -> m_prog_for_script		5565006	0					
ANR	5565327	Identifier	m_gahp_config		5565006	0					
ANR	5565328	Identifier	m_prog_for_script		5565006	1					
ANR	5565329	Identifier	Value		5565006	1					
ANR	5565330	ArgumentList			5565006	1					
ANR	5565331	Expression	"m_gahp_config -> m_vm_script . Value ( ) , vmworkingdir . Value ( ) , m_jobAd"		5565006	1					
ANR	5565332	CallExpression	m_gahp_config -> m_vm_script . Value ( )		5565006	0					
ANR	5565333	Callee	m_gahp_config -> m_vm_script . Value		5565006	0					
ANR	5565334	MemberAccess	m_gahp_config -> m_vm_script . Value		5565006	0					
ANR	5565335	PtrMemberAccess	m_gahp_config -> m_vm_script		5565006	0					
ANR	5565336	Identifier	m_gahp_config		5565006	0					
ANR	5565337	Identifier	m_vm_script		5565006	1					
ANR	5565338	Identifier	Value		5565006	1					
ANR	5565339	ArgumentList			5565006	1					
ANR	5565340	Expression	"vmworkingdir . Value ( ) , m_jobAd"		5565006	1					
ANR	5565341	CallExpression	vmworkingdir . Value ( )		5565006	0					
ANR	5565342	Callee	vmworkingdir . Value		5565006	0					
ANR	5565343	MemberAccess	vmworkingdir . Value		5565006	0					
ANR	5565344	Identifier	vmworkingdir		5565006	0					
ANR	5565345	Identifier	Value		5565006	1					
ANR	5565346	ArgumentList			5565006	1					
ANR	5565347	Identifier	m_jobAd		5565006	1					
ANR	5565348	ExpressionStatement	ASSERT ( new_vm )	707:2:17005:17019	5565006	1	True				
ANR	5565349	CallExpression	ASSERT ( new_vm )		5565006	0					
ANR	5565350	Callee	ASSERT		5565006	0					
ANR	5565351	Identifier	ASSERT		5565006	0					
ANR	5565352	ArgumentList	new_vm		5565006	1					
ANR	5565353	Argument	new_vm		5565006	0					
ANR	5565354	Identifier	new_vm		5565006	0					
ANR	5565355	ElseStatement	else		5565006	0					
ANR	5565356	CompoundStatement		66:3:1954:1954	5565006	0					
ANR	5565357	ExpressionStatement	"vmprintf ( D_ALWAYS , ""vmtype(%s) is not yet implemented\\n"" , vmtype )"	711:2:17065:17130	5565006	0	True				
ANR	5565358	CallExpression	"vmprintf ( D_ALWAYS , ""vmtype(%s) is not yet implemented\\n"" , vmtype )"		5565006	0					
ANR	5565359	Callee	vmprintf		5565006	0					
ANR	5565360	Identifier	vmprintf		5565006	0					
ANR	5565361	ArgumentList	D_ALWAYS		5565006	1					
ANR	5565362	Argument	D_ALWAYS		5565006	0					
ANR	5565363	Identifier	D_ALWAYS		5565006	0					
ANR	5565364	Argument	"""vmtype(%s) is not yet implemented\\n"""		5565006	1					
ANR	5565365	PrimaryExpression	"""vmtype(%s) is not yet implemented\\n"""		5565006	0					
ANR	5565366	Argument	vmtype		5565006	2					
ANR	5565367	Identifier	vmtype		5565006	0					
ANR	5565368	ExpressionStatement	req -> m_has_result = true	712:2:17134:17158	5565006	1	True				
ANR	5565369	AssignmentExpression	req -> m_has_result = true		5565006	0		=			
ANR	5565370	PtrMemberAccess	req -> m_has_result		5565006	0					
ANR	5565371	Identifier	req		5565006	0					
ANR	5565372	Identifier	m_has_result		5565006	1					
ANR	5565373	Identifier	true		5565006	1					
ANR	5565374	ExpressionStatement	req -> m_is_success = false	713:2:17162:17187	5565006	2	True				
ANR	5565375	AssignmentExpression	req -> m_is_success = false		5565006	0		=			
ANR	5565376	PtrMemberAccess	req -> m_is_success		5565006	0					
ANR	5565377	Identifier	req		5565006	0					
ANR	5565378	Identifier	m_is_success		5565006	1					
ANR	5565379	Identifier	false		5565006	1					
ANR	5565380	ExpressionStatement	req -> m_result = VMGAHP_ERR_NO_SUPPORTED_VM_TYPE	714:2:17191:17238	5565006	3	True				
ANR	5565381	AssignmentExpression	req -> m_result = VMGAHP_ERR_NO_SUPPORTED_VM_TYPE		5565006	0		=			
ANR	5565382	PtrMemberAccess	req -> m_result		5565006	0					
ANR	5565383	Identifier	req		5565006	0					
ANR	5565384	Identifier	m_result		5565006	1					
ANR	5565385	Identifier	VMGAHP_ERR_NO_SUPPORTED_VM_TYPE		5565006	1					
ANR	5565386	ReturnStatement	return ;	715:2:17242:17248	5565006	4	True				
ANR	5565387	ExpressionStatement	new_vm -> Config ( )	718:1:17255:17271	5565006	10	True				
ANR	5565388	CallExpression	new_vm -> Config ( )		5565006	0					
ANR	5565389	Callee	new_vm -> Config		5565006	0					
ANR	5565390	PtrMemberAccess	new_vm -> Config		5565006	0					
ANR	5565391	Identifier	new_vm		5565006	0					
ANR	5565392	Identifier	Config		5565006	1					
ANR	5565393	ArgumentList			5565006	1					
ANR	5565394	IfStatement	if ( new_vm -> CreateConfigFile ( ) == false )		5565006	11					
ANR	5565395	Condition	new_vm -> CreateConfigFile ( ) == false	719:5:17278:17312	5565006	0	True				
ANR	5565396	EqualityExpression	new_vm -> CreateConfigFile ( ) == false		5565006	0		==			
ANR	5565397	CallExpression	new_vm -> CreateConfigFile ( )		5565006	0					
ANR	5565398	Callee	new_vm -> CreateConfigFile		5565006	0					
ANR	5565399	PtrMemberAccess	new_vm -> CreateConfigFile		5565006	0					
ANR	5565400	Identifier	new_vm		5565006	0					
ANR	5565401	Identifier	CreateConfigFile		5565006	1					
ANR	5565402	ArgumentList			5565006	1					
ANR	5565403	Identifier	false		5565006	1					
ANR	5565404	CompoundStatement		76:43:2239:2239	5565006	1					
ANR	5565405	ExpressionStatement	req -> m_has_result = true	720:2:17320:17344	5565006	0	True				
ANR	5565406	AssignmentExpression	req -> m_has_result = true		5565006	0		=			
ANR	5565407	PtrMemberAccess	req -> m_has_result		5565006	0					
ANR	5565408	Identifier	req		5565006	0					
ANR	5565409	Identifier	m_has_result		5565006	1					
ANR	5565410	Identifier	true		5565006	1					
ANR	5565411	ExpressionStatement	req -> m_is_success = false	721:2:17348:17373	5565006	1	True				
ANR	5565412	AssignmentExpression	req -> m_is_success = false		5565006	0		=			
ANR	5565413	PtrMemberAccess	req -> m_is_success		5565006	0					
ANR	5565414	Identifier	req		5565006	0					
ANR	5565415	Identifier	m_is_success		5565006	1					
ANR	5565416	Identifier	false		5565006	1					
ANR	5565417	ExpressionStatement	req -> m_result = makeErrorMessage ( new_vm -> m_result_msg . Value ( ) )	722:2:17377:17439	5565006	2	True				
ANR	5565418	AssignmentExpression	req -> m_result = makeErrorMessage ( new_vm -> m_result_msg . Value ( ) )		5565006	0		=			
ANR	5565419	PtrMemberAccess	req -> m_result		5565006	0					
ANR	5565420	Identifier	req		5565006	0					
ANR	5565421	Identifier	m_result		5565006	1					
ANR	5565422	CallExpression	makeErrorMessage ( new_vm -> m_result_msg . Value ( ) )		5565006	1					
ANR	5565423	Callee	makeErrorMessage		5565006	0					
ANR	5565424	Identifier	makeErrorMessage		5565006	0					
ANR	5565425	ArgumentList	new_vm -> m_result_msg . Value ( )		5565006	1					
ANR	5565426	Argument	new_vm -> m_result_msg . Value ( )		5565006	0					
ANR	5565427	CallExpression	new_vm -> m_result_msg . Value ( )		5565006	0					
ANR	5565428	Callee	new_vm -> m_result_msg . Value		5565006	0					
ANR	5565429	MemberAccess	new_vm -> m_result_msg . Value		5565006	0					
ANR	5565430	PtrMemberAccess	new_vm -> m_result_msg		5565006	0					
ANR	5565431	Identifier	new_vm		5565006	0					
ANR	5565432	Identifier	m_result_msg		5565006	1					
ANR	5565433	Identifier	Value		5565006	1					
ANR	5565434	ArgumentList			5565006	1					
ANR	5565435	Statement	delete	723:2:17443:17448	5565006	3	True				
ANR	5565436	ExpressionStatement	new_vm	723:9:17450:17456	5565006	4	True				
ANR	5565437	Identifier	new_vm		5565006	0					
ANR	5565438	ExpressionStatement	new_vm = NULL	724:2:17460:17473	5565006	5	True				
ANR	5565439	AssignmentExpression	new_vm = NULL		5565006	0		=			
ANR	5565440	Identifier	new_vm		5565006	0					
ANR	5565441	Identifier	NULL		5565006	1					
ANR	5565442	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""CreateConfigFile fails in executeStart!\\n"" )"	725:2:17477:17543	5565006	6	True				
ANR	5565443	CallExpression	"vmprintf ( D_FULLDEBUG , ""CreateConfigFile fails in executeStart!\\n"" )"		5565006	0					
ANR	5565444	Callee	vmprintf		5565006	0					
ANR	5565445	Identifier	vmprintf		5565006	0					
ANR	5565446	ArgumentList	D_FULLDEBUG		5565006	1					
ANR	5565447	Argument	D_FULLDEBUG		5565006	0					
ANR	5565448	Identifier	D_FULLDEBUG		5565006	0					
ANR	5565449	Argument	"""CreateConfigFile fails in executeStart!\\n"""		5565006	1					
ANR	5565450	PrimaryExpression	"""CreateConfigFile fails in executeStart!\\n"""		5565006	0					
ANR	5565451	ReturnStatement	return ;	726:2:17547:17553	5565006	7	True				
ANR	5565452	IdentifierDeclStatement	int result = new_vm -> Start ( ) ;	729:1:17560:17588	5565006	12	True				
ANR	5565453	IdentifierDecl	result = new_vm -> Start ( )		5565006	0					
ANR	5565454	IdentifierDeclType	int		5565006	0					
ANR	5565455	Identifier	result		5565006	1					
ANR	5565456	AssignmentExpression	result = new_vm -> Start ( )		5565006	2		=			
ANR	5565457	Identifier	result		5565006	0					
ANR	5565458	CallExpression	new_vm -> Start ( )		5565006	1					
ANR	5565459	Callee	new_vm -> Start		5565006	0					
ANR	5565460	PtrMemberAccess	new_vm -> Start		5565006	0					
ANR	5565461	Identifier	new_vm		5565006	0					
ANR	5565462	Identifier	Start		5565006	1					
ANR	5565463	ArgumentList			5565006	1					
ANR	5565464	IfStatement	if ( result == false )		5565006	13					
ANR	5565465	Condition	result == false	731:4:17595:17609	5565006	0	True				
ANR	5565466	EqualityExpression	result == false		5565006	0		==			
ANR	5565467	Identifier	result		5565006	0					
ANR	5565468	Identifier	false		5565006	1					
ANR	5565469	CompoundStatement		88:21:2535:2535	5565006	1					
ANR	5565470	ExpressionStatement	req -> m_has_result = true	732:2:17616:17640	5565006	0	True				
ANR	5565471	AssignmentExpression	req -> m_has_result = true		5565006	0		=			
ANR	5565472	PtrMemberAccess	req -> m_has_result		5565006	0					
ANR	5565473	Identifier	req		5565006	0					
ANR	5565474	Identifier	m_has_result		5565006	1					
ANR	5565475	Identifier	true		5565006	1					
ANR	5565476	ExpressionStatement	req -> m_is_success = false	733:2:17644:17669	5565006	1	True				
ANR	5565477	AssignmentExpression	req -> m_is_success = false		5565006	0		=			
ANR	5565478	PtrMemberAccess	req -> m_is_success		5565006	0					
ANR	5565479	Identifier	req		5565006	0					
ANR	5565480	Identifier	m_is_success		5565006	1					
ANR	5565481	Identifier	false		5565006	1					
ANR	5565482	ExpressionStatement	req -> m_result = makeErrorMessage ( new_vm -> m_result_msg . Value ( ) )	734:2:17673:17735	5565006	2	True				
ANR	5565483	AssignmentExpression	req -> m_result = makeErrorMessage ( new_vm -> m_result_msg . Value ( ) )		5565006	0		=			
ANR	5565484	PtrMemberAccess	req -> m_result		5565006	0					
ANR	5565485	Identifier	req		5565006	0					
ANR	5565486	Identifier	m_result		5565006	1					
ANR	5565487	CallExpression	makeErrorMessage ( new_vm -> m_result_msg . Value ( ) )		5565006	1					
ANR	5565488	Callee	makeErrorMessage		5565006	0					
ANR	5565489	Identifier	makeErrorMessage		5565006	0					
ANR	5565490	ArgumentList	new_vm -> m_result_msg . Value ( )		5565006	1					
ANR	5565491	Argument	new_vm -> m_result_msg . Value ( )		5565006	0					
ANR	5565492	CallExpression	new_vm -> m_result_msg . Value ( )		5565006	0					
ANR	5565493	Callee	new_vm -> m_result_msg . Value		5565006	0					
ANR	5565494	MemberAccess	new_vm -> m_result_msg . Value		5565006	0					
ANR	5565495	PtrMemberAccess	new_vm -> m_result_msg		5565006	0					
ANR	5565496	Identifier	new_vm		5565006	0					
ANR	5565497	Identifier	m_result_msg		5565006	1					
ANR	5565498	Identifier	Value		5565006	1					
ANR	5565499	ArgumentList			5565006	1					
ANR	5565500	Statement	delete	735:2:17739:17744	5565006	3	True				
ANR	5565501	ExpressionStatement	new_vm	735:9:17746:17752	5565006	4	True				
ANR	5565502	Identifier	new_vm		5565006	0					
ANR	5565503	ExpressionStatement	new_vm = NULL	736:2:17756:17769	5565006	5	True				
ANR	5565504	AssignmentExpression	new_vm = NULL		5565006	0		=			
ANR	5565505	Identifier	new_vm		5565006	0					
ANR	5565506	Identifier	NULL		5565006	1					
ANR	5565507	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeStart fail!\\n"" )"	737:2:17773:17818	5565006	6	True				
ANR	5565508	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeStart fail!\\n"" )"		5565006	0					
ANR	5565509	Callee	vmprintf		5565006	0					
ANR	5565510	Identifier	vmprintf		5565006	0					
ANR	5565511	ArgumentList	D_FULLDEBUG		5565006	1					
ANR	5565512	Argument	D_FULLDEBUG		5565006	0					
ANR	5565513	Identifier	D_FULLDEBUG		5565006	0					
ANR	5565514	Argument	"""executeStart fail!\\n"""		5565006	1					
ANR	5565515	PrimaryExpression	"""executeStart fail!\\n"""		5565006	0					
ANR	5565516	ReturnStatement	return ;	738:2:17822:17828	5565006	7	True				
ANR	5565517	ElseStatement	else		5565006	0					
ANR	5565518	CompoundStatement		96:8:2761:2761	5565006	0					
ANR	5565519	ExpressionStatement	req -> m_has_result = true	741:2:17874:17898	5565006	0	True				
ANR	5565520	AssignmentExpression	req -> m_has_result = true		5565006	0		=			
ANR	5565521	PtrMemberAccess	req -> m_has_result		5565006	0					
ANR	5565522	Identifier	req		5565006	0					
ANR	5565523	Identifier	m_has_result		5565006	1					
ANR	5565524	Identifier	true		5565006	1					
ANR	5565525	ExpressionStatement	req -> m_is_success = true	742:2:17902:17926	5565006	1	True				
ANR	5565526	AssignmentExpression	req -> m_is_success = true		5565006	0		=			
ANR	5565527	PtrMemberAccess	req -> m_is_success		5565006	0					
ANR	5565528	Identifier	req		5565006	0					
ANR	5565529	Identifier	m_is_success		5565006	1					
ANR	5565530	Identifier	true		5565006	1					
ANR	5565531	ExpressionStatement	"req -> m_result = """""	745:2:17965:17983	5565006	2	True				
ANR	5565532	AssignmentExpression	"req -> m_result = """""		5565006	0		=			
ANR	5565533	PtrMemberAccess	req -> m_result		5565006	0					
ANR	5565534	Identifier	req		5565006	0					
ANR	5565535	Identifier	m_result		5565006	1					
ANR	5565536	PrimaryExpression	""""""		5565006	1					
ANR	5565537	ExpressionStatement	req -> m_result += new_vm -> getVMId ( )	746:2:17987:18021	5565006	3	True				
ANR	5565538	AssignmentExpression	req -> m_result += new_vm -> getVMId ( )		5565006	0		+=			
ANR	5565539	PtrMemberAccess	req -> m_result		5565006	0					
ANR	5565540	Identifier	req		5565006	0					
ANR	5565541	Identifier	m_result		5565006	1					
ANR	5565542	CallExpression	new_vm -> getVMId ( )		5565006	1					
ANR	5565543	Callee	new_vm -> getVMId		5565006	0					
ANR	5565544	PtrMemberAccess	new_vm -> getVMId		5565006	0					
ANR	5565545	Identifier	new_vm		5565006	0					
ANR	5565546	Identifier	getVMId		5565006	1					
ANR	5565547	ArgumentList			5565006	1					
ANR	5565548	ExpressionStatement	addVM ( new_vm )	748:2:18026:18039	5565006	4	True				
ANR	5565549	CallExpression	addVM ( new_vm )		5565006	0					
ANR	5565550	Callee	addVM		5565006	0					
ANR	5565551	Identifier	addVM		5565006	0					
ANR	5565552	ArgumentList	new_vm		5565006	1					
ANR	5565553	Argument	new_vm		5565006	0					
ANR	5565554	Identifier	new_vm		5565006	0					
ANR	5565555	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeStart success!\\n"" )"	749:2:18043:18091	5565006	5	True				
ANR	5565556	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeStart success!\\n"" )"		5565006	0					
ANR	5565557	Callee	vmprintf		5565006	0					
ANR	5565558	Identifier	vmprintf		5565006	0					
ANR	5565559	ArgumentList	D_FULLDEBUG		5565006	1					
ANR	5565560	Argument	D_FULLDEBUG		5565006	0					
ANR	5565561	Identifier	D_FULLDEBUG		5565006	0					
ANR	5565562	Argument	"""executeStart success!\\n"""		5565006	1					
ANR	5565563	PrimaryExpression	"""executeStart success!\\n"""		5565006	0					
ANR	5565564	ReturnStatement	return ;	750:2:18095:18101	5565006	6	True				
ANR	5565565	ReturnType	void		5565006	1					
ANR	5565566	Identifier	VMGahp :: executeStart		5565006	2					
ANR	5565567	ParameterList	VMRequest * req		5565006	3					
ANR	5565568	Parameter	VMRequest * req	643:21:15060:15073	5565006	0	True				
ANR	5565569	ParameterType	VMRequest *		5565006	0					
ANR	5565570	Identifier	req		5565006	1					
ANR	5565571	CFGEntryNode	ENTRY		5565006		True				
ANR	5565572	CFGExitNode	EXIT		5565006		True				
ANR	5565573	Symbol	VMGAHP_ERR_NO_JOBCLASSAD_INFO		5565006						
ANR	5565574	Symbol	new_vm -> m_result_msg . Value		5565006						
ANR	5565575	Symbol	m_jobAd		5565006						
ANR	5565576	Symbol	* req		5565006						
ANR	5565577	Symbol	vmworkingdir . Value		5565006						
ANR	5565578	Symbol	makeErrorMessage		5565006						
ANR	5565579	Symbol	vmworkingdir		5565006						
ANR	5565580	Symbol	m_gahp_config -> m_vm_type		5565006						
ANR	5565581	Symbol	new_vm		5565006						
ANR	5565582	Symbol	m_gahp_config -> m_vm_script . Value		5565006						
ANR	5565583	Symbol	new_vm -> CreateConfigFile		5565006						
ANR	5565584	Symbol	* req -> m_args		5565006						
ANR	5565585	Symbol	result		5565006						
ANR	5565586	Symbol	req -> m_args . argv		5565006						
ANR	5565587	Symbol	m_jobAd -> LookupString		5565006						
ANR	5565588	Symbol	req -> m_result		5565006						
ANR	5565589	Symbol	CONDOR_VM_UNIVERSE_KVM		5565006						
ANR	5565590	Symbol	CONDOR_VM_UNIVERSE_XEN		5565006						
ANR	5565591	Symbol	* new_vm		5565006						
ANR	5565592	Symbol	ATTR_JOB_VM_TYPE		5565006						
ANR	5565593	Symbol	strcasecmp		5565006						
ANR	5565594	Symbol	req		5565006						
ANR	5565595	Symbol	* req -> m_args . argv		5565006						
ANR	5565596	Symbol	new_vm -> getVMId		5565006						
ANR	5565597	Symbol	m_gahp_config -> m_vm_type . Value		5565006						
ANR	5565598	Symbol	vmtype		5565006						
ANR	5565599	Symbol	NULL		5565006						
ANR	5565600	Symbol	m_gahp_config		5565006						
ANR	5565601	Symbol	false		5565006						
ANR	5565602	Symbol	D_ALWAYS		5565006						
ANR	5565603	Symbol	new_vm -> Start		5565006						
ANR	5565604	Symbol	job_vmtype . Value		5565006						
ANR	5565605	Symbol	VMGAHP_ERR_NO_SUPPORTED_VM_TYPE		5565006						
ANR	5565606	Symbol	D_FULLDEBUG		5565006						
ANR	5565607	Symbol	m_gahp_config -> m_prog_for_script		5565006						
ANR	5565608	Symbol	m_gahp_config -> m_prog_for_script . Value		5565006						
ANR	5565609	Symbol	req -> m_args		5565006						
ANR	5565610	Symbol	m_gahp_config -> m_vm_script		5565006						
ANR	5565611	Symbol	* m_gahp_config		5565006						
ANR	5565612	Symbol	* * req		5565006						
ANR	5565613	Symbol	* m_jobAd		5565006						
ANR	5565614	Symbol	true		5565006						
ANR	5565615	Symbol	req -> m_has_result		5565006						
ANR	5565616	Symbol	job_vmtype		5565006						
ANR	5565617	Symbol	CONDOR_VM_UNIVERSE_VMWARE		5565006						
ANR	5565618	Symbol	req -> m_is_success		5565006						
ANR	5565619	Symbol	new_vm -> m_result_msg		5565006						
ANR	5565620	Function	VMGahp :: executeStop	754:0:18109:18966							
ANR	5565621	FunctionDef	VMGahp :: executeStop (VMRequest * req)		5565620	0					
ANR	5565622	CompoundStatement		756:0:18150:18966	5565620	0					
ANR	5565623	IdentifierDeclStatement	"int vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 ) ;"	758:1:18207:18264	5565620	0	True				
ANR	5565624	IdentifierDecl	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5565620	0					
ANR	5565625	IdentifierDeclType	int		5565620	0					
ANR	5565626	Identifier	vm_id		5565620	1					
ANR	5565627	AssignmentExpression	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5565620	2		=			
ANR	5565628	Identifier	vm_id		5565620	0					
ANR	5565629	CallExpression	"strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5565620	1					
ANR	5565630	Callee	strtol		5565620	0					
ANR	5565631	Identifier	strtol		5565620	0					
ANR	5565632	ArgumentList	req -> m_args . argv [ 2 ]		5565620	1					
ANR	5565633	Argument	req -> m_args . argv [ 2 ]		5565620	0					
ANR	5565634	ArrayIndexing	req -> m_args . argv [ 2 ]		5565620	0					
ANR	5565635	MemberAccess	req -> m_args . argv		5565620	0					
ANR	5565636	PtrMemberAccess	req -> m_args		5565620	0					
ANR	5565637	Identifier	req		5565620	0					
ANR	5565638	Identifier	m_args		5565620	1					
ANR	5565639	Identifier	argv		5565620	1					
ANR	5565640	PrimaryExpression	2		5565620	1					
ANR	5565641	Argument	( char * * ) NULL		5565620	1					
ANR	5565642	CastExpression	( char * * ) NULL		5565620	0					
ANR	5565643	CastTarget	char * *		5565620	0					
ANR	5565644	Identifier	NULL		5565620	1					
ANR	5565645	Argument	10		5565620	2					
ANR	5565646	PrimaryExpression	10		5565620	0					
ANR	5565647	IdentifierDeclStatement	MyString err_message ;	760:1:18268:18288	5565620	1	True				
ANR	5565648	IdentifierDecl	err_message		5565620	0					
ANR	5565649	IdentifierDeclType	MyString		5565620	0					
ANR	5565650	Identifier	err_message		5565620	1					
ANR	5565651	IdentifierDeclStatement	VMType * vm = findVM ( vm_id ) ;	761:1:18291:18317	5565620	2	True				
ANR	5565652	IdentifierDecl	* vm = findVM ( vm_id )		5565620	0					
ANR	5565653	IdentifierDeclType	VMType *		5565620	0					
ANR	5565654	Identifier	vm		5565620	1					
ANR	5565655	AssignmentExpression	* vm = findVM ( vm_id )		5565620	2		=			
ANR	5565656	Identifier	vm		5565620	0					
ANR	5565657	CallExpression	findVM ( vm_id )		5565620	1					
ANR	5565658	Callee	findVM		5565620	0					
ANR	5565659	Identifier	findVM		5565620	0					
ANR	5565660	ArgumentList	vm_id		5565620	1					
ANR	5565661	Argument	vm_id		5565620	0					
ANR	5565662	Identifier	vm_id		5565620	0					
ANR	5565663	IfStatement	if ( vm == NULL )		5565620	3					
ANR	5565664	Condition	vm == NULL	763:4:18324:18333	5565620	0	True				
ANR	5565665	EqualityExpression	vm == NULL		5565620	0		==			
ANR	5565666	Identifier	vm		5565620	0					
ANR	5565667	Identifier	NULL		5565620	1					
ANR	5565668	CompoundStatement		8:16:185:185	5565620	1					
ANR	5565669	ExpressionStatement	req -> m_has_result = true	764:2:18340:18364	5565620	0	True				
ANR	5565670	AssignmentExpression	req -> m_has_result = true		5565620	0		=			
ANR	5565671	PtrMemberAccess	req -> m_has_result		5565620	0					
ANR	5565672	Identifier	req		5565620	0					
ANR	5565673	Identifier	m_has_result		5565620	1					
ANR	5565674	Identifier	true		5565620	1					
ANR	5565675	ExpressionStatement	req -> m_is_success = false	765:2:18368:18393	5565620	1	True				
ANR	5565676	AssignmentExpression	req -> m_is_success = false		5565620	0		=			
ANR	5565677	PtrMemberAccess	req -> m_is_success		5565620	0					
ANR	5565678	Identifier	req		5565620	0					
ANR	5565679	Identifier	m_is_success		5565620	1					
ANR	5565680	Identifier	false		5565620	1					
ANR	5565681	ExpressionStatement	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND	766:2:18397:18436	5565620	2	True				
ANR	5565682	AssignmentExpression	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND		5565620	0		=			
ANR	5565683	PtrMemberAccess	req -> m_result		5565620	0					
ANR	5565684	Identifier	req		5565620	0					
ANR	5565685	Identifier	m_result		5565620	1					
ANR	5565686	Identifier	VMGAHP_ERR_VM_NOT_FOUND		5565620	1					
ANR	5565687	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeStop\\n"" , vm_id )"	767:2:18440:18511	5565620	3	True				
ANR	5565688	CallExpression	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeStop\\n"" , vm_id )"		5565620	0					
ANR	5565689	Callee	vmprintf		5565620	0					
ANR	5565690	Identifier	vmprintf		5565620	0					
ANR	5565691	ArgumentList	D_FULLDEBUG		5565620	1					
ANR	5565692	Argument	D_FULLDEBUG		5565620	0					
ANR	5565693	Identifier	D_FULLDEBUG		5565620	0					
ANR	5565694	Argument	"""VM(id=%d) is not found in executeStop\\n"""		5565620	1					
ANR	5565695	PrimaryExpression	"""VM(id=%d) is not found in executeStop\\n"""		5565620	0					
ANR	5565696	Argument	vm_id		5565620	2					
ANR	5565697	Identifier	vm_id		5565620	0					
ANR	5565698	ReturnStatement	return ;	768:2:18515:18521	5565620	4	True				
ANR	5565699	ElseStatement	else		5565620	0					
ANR	5565700	CompoundStatement		15:2:383:410	5565620	0					
ANR	5565701	IdentifierDeclStatement	int result = vm -> Shutdown ( ) ;	770:2:18534:18561	5565620	0	True				
ANR	5565702	IdentifierDecl	result = vm -> Shutdown ( )		5565620	0					
ANR	5565703	IdentifierDeclType	int		5565620	0					
ANR	5565704	Identifier	result		5565620	1					
ANR	5565705	AssignmentExpression	result = vm -> Shutdown ( )		5565620	2		=			
ANR	5565706	Identifier	result		5565620	0					
ANR	5565707	CallExpression	vm -> Shutdown ( )		5565620	1					
ANR	5565708	Callee	vm -> Shutdown		5565620	0					
ANR	5565709	PtrMemberAccess	vm -> Shutdown		5565620	0					
ANR	5565710	Identifier	vm		5565620	0					
ANR	5565711	Identifier	Shutdown		5565620	1					
ANR	5565712	ArgumentList			5565620	1					
ANR	5565713	IfStatement	if ( result == false )		5565620	1					
ANR	5565714	Condition	result == false	772:5:18569:18583	5565620	0	True				
ANR	5565715	EqualityExpression	result == false		5565620	0		==			
ANR	5565716	Identifier	result		5565620	0					
ANR	5565717	Identifier	false		5565620	1					
ANR	5565718	CompoundStatement		17:22:435:435	5565620	1					
ANR	5565719	ExpressionStatement	req -> m_has_result = true	773:3:18591:18615	5565620	0	True				
ANR	5565720	AssignmentExpression	req -> m_has_result = true		5565620	0		=			
ANR	5565721	PtrMemberAccess	req -> m_has_result		5565620	0					
ANR	5565722	Identifier	req		5565620	0					
ANR	5565723	Identifier	m_has_result		5565620	1					
ANR	5565724	Identifier	true		5565620	1					
ANR	5565725	ExpressionStatement	req -> m_is_success = false	774:3:18620:18645	5565620	1	True				
ANR	5565726	AssignmentExpression	req -> m_is_success = false		5565620	0		=			
ANR	5565727	PtrMemberAccess	req -> m_is_success		5565620	0					
ANR	5565728	Identifier	req		5565620	0					
ANR	5565729	Identifier	m_is_success		5565620	1					
ANR	5565730	Identifier	false		5565620	1					
ANR	5565731	ExpressionStatement	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )	775:3:18650:18708	5565620	2	True				
ANR	5565732	AssignmentExpression	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5565620	0		=			
ANR	5565733	PtrMemberAccess	req -> m_result		5565620	0					
ANR	5565734	Identifier	req		5565620	0					
ANR	5565735	Identifier	m_result		5565620	1					
ANR	5565736	CallExpression	makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5565620	1					
ANR	5565737	Callee	makeErrorMessage		5565620	0					
ANR	5565738	Identifier	makeErrorMessage		5565620	0					
ANR	5565739	ArgumentList	vm -> m_result_msg . Value ( )		5565620	1					
ANR	5565740	Argument	vm -> m_result_msg . Value ( )		5565620	0					
ANR	5565741	CallExpression	vm -> m_result_msg . Value ( )		5565620	0					
ANR	5565742	Callee	vm -> m_result_msg . Value		5565620	0					
ANR	5565743	MemberAccess	vm -> m_result_msg . Value		5565620	0					
ANR	5565744	PtrMemberAccess	vm -> m_result_msg		5565620	0					
ANR	5565745	Identifier	vm		5565620	0					
ANR	5565746	Identifier	m_result_msg		5565620	1					
ANR	5565747	Identifier	Value		5565620	1					
ANR	5565748	ArgumentList			5565620	1					
ANR	5565749	ExpressionStatement	removeVM ( vm )	776:3:18713:18725	5565620	3	True				
ANR	5565750	CallExpression	removeVM ( vm )		5565620	0					
ANR	5565751	Callee	removeVM		5565620	0					
ANR	5565752	Identifier	removeVM		5565620	0					
ANR	5565753	ArgumentList	vm		5565620	1					
ANR	5565754	Argument	vm		5565620	0					
ANR	5565755	Identifier	vm		5565620	0					
ANR	5565756	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeStop fail!\\n"" )"	777:3:18730:18774	5565620	4	True				
ANR	5565757	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeStop fail!\\n"" )"		5565620	0					
ANR	5565758	Callee	vmprintf		5565620	0					
ANR	5565759	Identifier	vmprintf		5565620	0					
ANR	5565760	ArgumentList	D_FULLDEBUG		5565620	1					
ANR	5565761	Argument	D_FULLDEBUG		5565620	0					
ANR	5565762	Identifier	D_FULLDEBUG		5565620	0					
ANR	5565763	Argument	"""executeStop fail!\\n"""		5565620	1					
ANR	5565764	PrimaryExpression	"""executeStop fail!\\n"""		5565620	0					
ANR	5565765	ReturnStatement	return ;	778:3:18779:18785	5565620	5	True				
ANR	5565766	ElseStatement	else		5565620	0					
ANR	5565767	CompoundStatement		24:9:645:645	5565620	0					
ANR	5565768	ExpressionStatement	req -> m_has_result = true	780:3:18801:18825	5565620	0	True				
ANR	5565769	AssignmentExpression	req -> m_has_result = true		5565620	0		=			
ANR	5565770	PtrMemberAccess	req -> m_has_result		5565620	0					
ANR	5565771	Identifier	req		5565620	0					
ANR	5565772	Identifier	m_has_result		5565620	1					
ANR	5565773	Identifier	true		5565620	1					
ANR	5565774	ExpressionStatement	req -> m_is_success = true	781:3:18830:18854	5565620	1	True				
ANR	5565775	AssignmentExpression	req -> m_is_success = true		5565620	0		=			
ANR	5565776	PtrMemberAccess	req -> m_is_success		5565620	0					
ANR	5565777	Identifier	req		5565620	0					
ANR	5565778	Identifier	m_is_success		5565620	1					
ANR	5565779	Identifier	true		5565620	1					
ANR	5565780	ExpressionStatement	"req -> m_result = """""	782:3:18859:18877	5565620	2	True				
ANR	5565781	AssignmentExpression	"req -> m_result = """""		5565620	0		=			
ANR	5565782	PtrMemberAccess	req -> m_result		5565620	0					
ANR	5565783	Identifier	req		5565620	0					
ANR	5565784	Identifier	m_result		5565620	1					
ANR	5565785	PrimaryExpression	""""""		5565620	1					
ANR	5565786	ExpressionStatement	removeVM ( vm )	783:3:18882:18894	5565620	3	True				
ANR	5565787	CallExpression	removeVM ( vm )		5565620	0					
ANR	5565788	Callee	removeVM		5565620	0					
ANR	5565789	Identifier	removeVM		5565620	0					
ANR	5565790	ArgumentList	vm		5565620	1					
ANR	5565791	Argument	vm		5565620	0					
ANR	5565792	Identifier	vm		5565620	0					
ANR	5565793	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeStop success!\\n"" )"	784:3:18899:18946	5565620	4	True				
ANR	5565794	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeStop success!\\n"" )"		5565620	0					
ANR	5565795	Callee	vmprintf		5565620	0					
ANR	5565796	Identifier	vmprintf		5565620	0					
ANR	5565797	ArgumentList	D_FULLDEBUG		5565620	1					
ANR	5565798	Argument	D_FULLDEBUG		5565620	0					
ANR	5565799	Identifier	D_FULLDEBUG		5565620	0					
ANR	5565800	Argument	"""executeStop success!\\n"""		5565620	1					
ANR	5565801	PrimaryExpression	"""executeStop success!\\n"""		5565620	0					
ANR	5565802	ReturnStatement	return ;	785:3:18951:18957	5565620	5	True				
ANR	5565803	ReturnType	void		5565620	1					
ANR	5565804	Identifier	VMGahp :: executeStop		5565620	2					
ANR	5565805	ParameterList	VMRequest * req		5565620	3					
ANR	5565806	Parameter	VMRequest * req	755:20:18134:18147	5565620	0	True				
ANR	5565807	ParameterType	VMRequest *		5565620	0					
ANR	5565808	Identifier	req		5565620	1					
ANR	5565809	CFGEntryNode	ENTRY		5565620		True				
ANR	5565810	CFGExitNode	EXIT		5565620		True				
ANR	5565811	Symbol	VMGAHP_ERR_VM_NOT_FOUND		5565620						
ANR	5565812	Symbol	* req		5565620						
ANR	5565813	Symbol	makeErrorMessage		5565620						
ANR	5565814	Symbol	* req -> m_args		5565620						
ANR	5565815	Symbol	err_message		5565620						
ANR	5565816	Symbol	result		5565620						
ANR	5565817	Symbol	vm_id		5565620						
ANR	5565818	Symbol	req -> m_args . argv		5565620						
ANR	5565819	Symbol	req -> m_result		5565620						
ANR	5565820	Symbol	strtol		5565620						
ANR	5565821	Symbol	vm -> Shutdown		5565620						
ANR	5565822	Symbol	req		5565620						
ANR	5565823	Symbol	* req -> m_args . argv		5565620						
ANR	5565824	Symbol	NULL		5565620						
ANR	5565825	Symbol	false		5565620						
ANR	5565826	Symbol	D_FULLDEBUG		5565620						
ANR	5565827	Symbol	req -> m_args		5565620						
ANR	5565828	Symbol	vm -> m_result_msg		5565620						
ANR	5565829	Symbol	* * req		5565620						
ANR	5565830	Symbol	vm -> m_result_msg . Value		5565620						
ANR	5565831	Symbol	vm		5565620						
ANR	5565832	Symbol	true		5565620						
ANR	5565833	Symbol	findVM		5565620						
ANR	5565834	Symbol	req -> m_has_result		5565620						
ANR	5565835	Symbol	req -> m_is_success		5565620						
ANR	5565836	Symbol	* vm		5565620						
ANR	5565837	Function	VMGahp :: executeSuspend	790:0:18969:19806							
ANR	5565838	FunctionDef	VMGahp :: executeSuspend (VMRequest * req)		5565837	0					
ANR	5565839	CompoundStatement		792:0:19013:19806	5565837	0					
ANR	5565840	IdentifierDeclStatement	"int vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 ) ;"	794:1:19073:19130	5565837	0	True				
ANR	5565841	IdentifierDecl	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5565837	0					
ANR	5565842	IdentifierDeclType	int		5565837	0					
ANR	5565843	Identifier	vm_id		5565837	1					
ANR	5565844	AssignmentExpression	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5565837	2		=			
ANR	5565845	Identifier	vm_id		5565837	0					
ANR	5565846	CallExpression	"strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5565837	1					
ANR	5565847	Callee	strtol		5565837	0					
ANR	5565848	Identifier	strtol		5565837	0					
ANR	5565849	ArgumentList	req -> m_args . argv [ 2 ]		5565837	1					
ANR	5565850	Argument	req -> m_args . argv [ 2 ]		5565837	0					
ANR	5565851	ArrayIndexing	req -> m_args . argv [ 2 ]		5565837	0					
ANR	5565852	MemberAccess	req -> m_args . argv		5565837	0					
ANR	5565853	PtrMemberAccess	req -> m_args		5565837	0					
ANR	5565854	Identifier	req		5565837	0					
ANR	5565855	Identifier	m_args		5565837	1					
ANR	5565856	Identifier	argv		5565837	1					
ANR	5565857	PrimaryExpression	2		5565837	1					
ANR	5565858	Argument	( char * * ) NULL		5565837	1					
ANR	5565859	CastExpression	( char * * ) NULL		5565837	0					
ANR	5565860	CastTarget	char * *		5565837	0					
ANR	5565861	Identifier	NULL		5565837	1					
ANR	5565862	Argument	10		5565837	2					
ANR	5565863	PrimaryExpression	10		5565837	0					
ANR	5565864	IdentifierDeclStatement	MyString err_message ;	796:1:19134:19154	5565837	1	True				
ANR	5565865	IdentifierDecl	err_message		5565837	0					
ANR	5565866	IdentifierDeclType	MyString		5565837	0					
ANR	5565867	Identifier	err_message		5565837	1					
ANR	5565868	IdentifierDeclStatement	VMType * vm = findVM ( vm_id ) ;	797:1:19157:19183	5565837	2	True				
ANR	5565869	IdentifierDecl	* vm = findVM ( vm_id )		5565837	0					
ANR	5565870	IdentifierDeclType	VMType *		5565837	0					
ANR	5565871	Identifier	vm		5565837	1					
ANR	5565872	AssignmentExpression	* vm = findVM ( vm_id )		5565837	2		=			
ANR	5565873	Identifier	vm		5565837	0					
ANR	5565874	CallExpression	findVM ( vm_id )		5565837	1					
ANR	5565875	Callee	findVM		5565837	0					
ANR	5565876	Identifier	findVM		5565837	0					
ANR	5565877	ArgumentList	vm_id		5565837	1					
ANR	5565878	Argument	vm_id		5565837	0					
ANR	5565879	Identifier	vm_id		5565837	0					
ANR	5565880	IfStatement	if ( vm == NULL )		5565837	3					
ANR	5565881	Condition	vm == NULL	799:4:19190:19199	5565837	0	True				
ANR	5565882	EqualityExpression	vm == NULL		5565837	0		==			
ANR	5565883	Identifier	vm		5565837	0					
ANR	5565884	Identifier	NULL		5565837	1					
ANR	5565885	CompoundStatement		8:16:188:188	5565837	1					
ANR	5565886	ExpressionStatement	req -> m_has_result = true	800:2:19206:19230	5565837	0	True				
ANR	5565887	AssignmentExpression	req -> m_has_result = true		5565837	0		=			
ANR	5565888	PtrMemberAccess	req -> m_has_result		5565837	0					
ANR	5565889	Identifier	req		5565837	0					
ANR	5565890	Identifier	m_has_result		5565837	1					
ANR	5565891	Identifier	true		5565837	1					
ANR	5565892	ExpressionStatement	req -> m_is_success = false	801:2:19234:19259	5565837	1	True				
ANR	5565893	AssignmentExpression	req -> m_is_success = false		5565837	0		=			
ANR	5565894	PtrMemberAccess	req -> m_is_success		5565837	0					
ANR	5565895	Identifier	req		5565837	0					
ANR	5565896	Identifier	m_is_success		5565837	1					
ANR	5565897	Identifier	false		5565837	1					
ANR	5565898	ExpressionStatement	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND	802:2:19263:19302	5565837	2	True				
ANR	5565899	AssignmentExpression	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND		5565837	0		=			
ANR	5565900	PtrMemberAccess	req -> m_result		5565837	0					
ANR	5565901	Identifier	req		5565837	0					
ANR	5565902	Identifier	m_result		5565837	1					
ANR	5565903	Identifier	VMGAHP_ERR_VM_NOT_FOUND		5565837	1					
ANR	5565904	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeSuspend\\n"" , vm_id )"	803:2:19306:19380	5565837	3	True				
ANR	5565905	CallExpression	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeSuspend\\n"" , vm_id )"		5565837	0					
ANR	5565906	Callee	vmprintf		5565837	0					
ANR	5565907	Identifier	vmprintf		5565837	0					
ANR	5565908	ArgumentList	D_FULLDEBUG		5565837	1					
ANR	5565909	Argument	D_FULLDEBUG		5565837	0					
ANR	5565910	Identifier	D_FULLDEBUG		5565837	0					
ANR	5565911	Argument	"""VM(id=%d) is not found in executeSuspend\\n"""		5565837	1					
ANR	5565912	PrimaryExpression	"""VM(id=%d) is not found in executeSuspend\\n"""		5565837	0					
ANR	5565913	Argument	vm_id		5565837	2					
ANR	5565914	Identifier	vm_id		5565837	0					
ANR	5565915	ReturnStatement	return ;	804:2:19384:19390	5565837	4	True				
ANR	5565916	ElseStatement	else		5565837	0					
ANR	5565917	CompoundStatement		15:2:389:415	5565837	0					
ANR	5565918	IdentifierDeclStatement	int result = vm -> Suspend ( ) ;	806:2:19403:19429	5565837	0	True				
ANR	5565919	IdentifierDecl	result = vm -> Suspend ( )		5565837	0					
ANR	5565920	IdentifierDeclType	int		5565837	0					
ANR	5565921	Identifier	result		5565837	1					
ANR	5565922	AssignmentExpression	result = vm -> Suspend ( )		5565837	2		=			
ANR	5565923	Identifier	result		5565837	0					
ANR	5565924	CallExpression	vm -> Suspend ( )		5565837	1					
ANR	5565925	Callee	vm -> Suspend		5565837	0					
ANR	5565926	PtrMemberAccess	vm -> Suspend		5565837	0					
ANR	5565927	Identifier	vm		5565837	0					
ANR	5565928	Identifier	Suspend		5565837	1					
ANR	5565929	ArgumentList			5565837	1					
ANR	5565930	IfStatement	if ( result == false )		5565837	1					
ANR	5565931	Condition	result == false	808:5:19437:19451	5565837	0	True				
ANR	5565932	EqualityExpression	result == false		5565837	0		==			
ANR	5565933	Identifier	result		5565837	0					
ANR	5565934	Identifier	false		5565837	1					
ANR	5565935	CompoundStatement		17:22:440:440	5565837	1					
ANR	5565936	ExpressionStatement	req -> m_has_result = true	809:3:19459:19483	5565837	0	True				
ANR	5565937	AssignmentExpression	req -> m_has_result = true		5565837	0		=			
ANR	5565938	PtrMemberAccess	req -> m_has_result		5565837	0					
ANR	5565939	Identifier	req		5565837	0					
ANR	5565940	Identifier	m_has_result		5565837	1					
ANR	5565941	Identifier	true		5565837	1					
ANR	5565942	ExpressionStatement	req -> m_is_success = false	810:3:19488:19513	5565837	1	True				
ANR	5565943	AssignmentExpression	req -> m_is_success = false		5565837	0		=			
ANR	5565944	PtrMemberAccess	req -> m_is_success		5565837	0					
ANR	5565945	Identifier	req		5565837	0					
ANR	5565946	Identifier	m_is_success		5565837	1					
ANR	5565947	Identifier	false		5565837	1					
ANR	5565948	ExpressionStatement	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )	811:3:19518:19576	5565837	2	True				
ANR	5565949	AssignmentExpression	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5565837	0		=			
ANR	5565950	PtrMemberAccess	req -> m_result		5565837	0					
ANR	5565951	Identifier	req		5565837	0					
ANR	5565952	Identifier	m_result		5565837	1					
ANR	5565953	CallExpression	makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5565837	1					
ANR	5565954	Callee	makeErrorMessage		5565837	0					
ANR	5565955	Identifier	makeErrorMessage		5565837	0					
ANR	5565956	ArgumentList	vm -> m_result_msg . Value ( )		5565837	1					
ANR	5565957	Argument	vm -> m_result_msg . Value ( )		5565837	0					
ANR	5565958	CallExpression	vm -> m_result_msg . Value ( )		5565837	0					
ANR	5565959	Callee	vm -> m_result_msg . Value		5565837	0					
ANR	5565960	MemberAccess	vm -> m_result_msg . Value		5565837	0					
ANR	5565961	PtrMemberAccess	vm -> m_result_msg		5565837	0					
ANR	5565962	Identifier	vm		5565837	0					
ANR	5565963	Identifier	m_result_msg		5565837	1					
ANR	5565964	Identifier	Value		5565837	1					
ANR	5565965	ArgumentList			5565837	1					
ANR	5565966	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeSuspend fail!\\n"" )"	812:3:19581:19628	5565837	3	True				
ANR	5565967	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeSuspend fail!\\n"" )"		5565837	0					
ANR	5565968	Callee	vmprintf		5565837	0					
ANR	5565969	Identifier	vmprintf		5565837	0					
ANR	5565970	ArgumentList	D_FULLDEBUG		5565837	1					
ANR	5565971	Argument	D_FULLDEBUG		5565837	0					
ANR	5565972	Identifier	D_FULLDEBUG		5565837	0					
ANR	5565973	Argument	"""executeSuspend fail!\\n"""		5565837	1					
ANR	5565974	PrimaryExpression	"""executeSuspend fail!\\n"""		5565837	0					
ANR	5565975	ReturnStatement	return ;	813:3:19633:19639	5565837	4	True				
ANR	5565976	ElseStatement	else		5565837	0					
ANR	5565977	CompoundStatement		23:9:636:636	5565837	0					
ANR	5565978	ExpressionStatement	req -> m_has_result = true	815:3:19655:19679	5565837	0	True				
ANR	5565979	AssignmentExpression	req -> m_has_result = true		5565837	0		=			
ANR	5565980	PtrMemberAccess	req -> m_has_result		5565837	0					
ANR	5565981	Identifier	req		5565837	0					
ANR	5565982	Identifier	m_has_result		5565837	1					
ANR	5565983	Identifier	true		5565837	1					
ANR	5565984	ExpressionStatement	req -> m_is_success = true	816:3:19684:19708	5565837	1	True				
ANR	5565985	AssignmentExpression	req -> m_is_success = true		5565837	0		=			
ANR	5565986	PtrMemberAccess	req -> m_is_success		5565837	0					
ANR	5565987	Identifier	req		5565837	0					
ANR	5565988	Identifier	m_is_success		5565837	1					
ANR	5565989	Identifier	true		5565837	1					
ANR	5565990	ExpressionStatement	"req -> m_result = """""	817:3:19713:19731	5565837	2	True				
ANR	5565991	AssignmentExpression	"req -> m_result = """""		5565837	0		=			
ANR	5565992	PtrMemberAccess	req -> m_result		5565837	0					
ANR	5565993	Identifier	req		5565837	0					
ANR	5565994	Identifier	m_result		5565837	1					
ANR	5565995	PrimaryExpression	""""""		5565837	1					
ANR	5565996	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeSuspend success!\\n"" )"	818:3:19736:19786	5565837	3	True				
ANR	5565997	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeSuspend success!\\n"" )"		5565837	0					
ANR	5565998	Callee	vmprintf		5565837	0					
ANR	5565999	Identifier	vmprintf		5565837	0					
ANR	5566000	ArgumentList	D_FULLDEBUG		5565837	1					
ANR	5566001	Argument	D_FULLDEBUG		5565837	0					
ANR	5566002	Identifier	D_FULLDEBUG		5565837	0					
ANR	5566003	Argument	"""executeSuspend success!\\n"""		5565837	1					
ANR	5566004	PrimaryExpression	"""executeSuspend success!\\n"""		5565837	0					
ANR	5566005	ReturnStatement	return ;	819:3:19791:19797	5565837	4	True				
ANR	5566006	ReturnType	void		5565837	1					
ANR	5566007	Identifier	VMGahp :: executeSuspend		5565837	2					
ANR	5566008	ParameterList	VMRequest * req		5565837	3					
ANR	5566009	Parameter	VMRequest * req	791:23:18997:19010	5565837	0	True				
ANR	5566010	ParameterType	VMRequest *		5565837	0					
ANR	5566011	Identifier	req		5565837	1					
ANR	5566012	CFGEntryNode	ENTRY		5565837		True				
ANR	5566013	CFGExitNode	EXIT		5565837		True				
ANR	5566014	Symbol	VMGAHP_ERR_VM_NOT_FOUND		5565837						
ANR	5566015	Symbol	* req		5565837						
ANR	5566016	Symbol	makeErrorMessage		5565837						
ANR	5566017	Symbol	* req -> m_args		5565837						
ANR	5566018	Symbol	err_message		5565837						
ANR	5566019	Symbol	result		5565837						
ANR	5566020	Symbol	vm_id		5565837						
ANR	5566021	Symbol	req -> m_args . argv		5565837						
ANR	5566022	Symbol	req -> m_result		5565837						
ANR	5566023	Symbol	strtol		5565837						
ANR	5566024	Symbol	req		5565837						
ANR	5566025	Symbol	* req -> m_args . argv		5565837						
ANR	5566026	Symbol	NULL		5565837						
ANR	5566027	Symbol	vm -> Suspend		5565837						
ANR	5566028	Symbol	false		5565837						
ANR	5566029	Symbol	D_FULLDEBUG		5565837						
ANR	5566030	Symbol	req -> m_args		5565837						
ANR	5566031	Symbol	vm -> m_result_msg		5565837						
ANR	5566032	Symbol	* * req		5565837						
ANR	5566033	Symbol	vm -> m_result_msg . Value		5565837						
ANR	5566034	Symbol	vm		5565837						
ANR	5566035	Symbol	true		5565837						
ANR	5566036	Symbol	findVM		5565837						
ANR	5566037	Symbol	req -> m_has_result		5565837						
ANR	5566038	Symbol	req -> m_is_success		5565837						
ANR	5566039	Symbol	* vm		5565837						
ANR	5566040	Function	VMGahp :: executeSoftSuspend	824:0:19809:20678							
ANR	5566041	FunctionDef	VMGahp :: executeSoftSuspend (VMRequest * req)		5566040	0					
ANR	5566042	CompoundStatement		826:0:19857:20678	5566040	0					
ANR	5566043	IdentifierDeclStatement	"int vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 ) ;"	828:1:19922:19979	5566040	0	True				
ANR	5566044	IdentifierDecl	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5566040	0					
ANR	5566045	IdentifierDeclType	int		5566040	0					
ANR	5566046	Identifier	vm_id		5566040	1					
ANR	5566047	AssignmentExpression	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5566040	2		=			
ANR	5566048	Identifier	vm_id		5566040	0					
ANR	5566049	CallExpression	"strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5566040	1					
ANR	5566050	Callee	strtol		5566040	0					
ANR	5566051	Identifier	strtol		5566040	0					
ANR	5566052	ArgumentList	req -> m_args . argv [ 2 ]		5566040	1					
ANR	5566053	Argument	req -> m_args . argv [ 2 ]		5566040	0					
ANR	5566054	ArrayIndexing	req -> m_args . argv [ 2 ]		5566040	0					
ANR	5566055	MemberAccess	req -> m_args . argv		5566040	0					
ANR	5566056	PtrMemberAccess	req -> m_args		5566040	0					
ANR	5566057	Identifier	req		5566040	0					
ANR	5566058	Identifier	m_args		5566040	1					
ANR	5566059	Identifier	argv		5566040	1					
ANR	5566060	PrimaryExpression	2		5566040	1					
ANR	5566061	Argument	( char * * ) NULL		5566040	1					
ANR	5566062	CastExpression	( char * * ) NULL		5566040	0					
ANR	5566063	CastTarget	char * *		5566040	0					
ANR	5566064	Identifier	NULL		5566040	1					
ANR	5566065	Argument	10		5566040	2					
ANR	5566066	PrimaryExpression	10		5566040	0					
ANR	5566067	IdentifierDeclStatement	MyString err_message ;	830:1:19983:20003	5566040	1	True				
ANR	5566068	IdentifierDecl	err_message		5566040	0					
ANR	5566069	IdentifierDeclType	MyString		5566040	0					
ANR	5566070	Identifier	err_message		5566040	1					
ANR	5566071	IdentifierDeclStatement	VMType * vm = findVM ( vm_id ) ;	831:1:20006:20032	5566040	2	True				
ANR	5566072	IdentifierDecl	* vm = findVM ( vm_id )		5566040	0					
ANR	5566073	IdentifierDeclType	VMType *		5566040	0					
ANR	5566074	Identifier	vm		5566040	1					
ANR	5566075	AssignmentExpression	* vm = findVM ( vm_id )		5566040	2		=			
ANR	5566076	Identifier	vm		5566040	0					
ANR	5566077	CallExpression	findVM ( vm_id )		5566040	1					
ANR	5566078	Callee	findVM		5566040	0					
ANR	5566079	Identifier	findVM		5566040	0					
ANR	5566080	ArgumentList	vm_id		5566040	1					
ANR	5566081	Argument	vm_id		5566040	0					
ANR	5566082	Identifier	vm_id		5566040	0					
ANR	5566083	IfStatement	if ( vm == NULL )		5566040	3					
ANR	5566084	Condition	vm == NULL	833:4:20039:20048	5566040	0	True				
ANR	5566085	EqualityExpression	vm == NULL		5566040	0		==			
ANR	5566086	Identifier	vm		5566040	0					
ANR	5566087	Identifier	NULL		5566040	1					
ANR	5566088	CompoundStatement		8:16:193:193	5566040	1					
ANR	5566089	ExpressionStatement	req -> m_has_result = true	834:2:20055:20079	5566040	0	True				
ANR	5566090	AssignmentExpression	req -> m_has_result = true		5566040	0		=			
ANR	5566091	PtrMemberAccess	req -> m_has_result		5566040	0					
ANR	5566092	Identifier	req		5566040	0					
ANR	5566093	Identifier	m_has_result		5566040	1					
ANR	5566094	Identifier	true		5566040	1					
ANR	5566095	ExpressionStatement	req -> m_is_success = false	835:2:20083:20108	5566040	1	True				
ANR	5566096	AssignmentExpression	req -> m_is_success = false		5566040	0		=			
ANR	5566097	PtrMemberAccess	req -> m_is_success		5566040	0					
ANR	5566098	Identifier	req		5566040	0					
ANR	5566099	Identifier	m_is_success		5566040	1					
ANR	5566100	Identifier	false		5566040	1					
ANR	5566101	ExpressionStatement	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND	836:2:20112:20151	5566040	2	True				
ANR	5566102	AssignmentExpression	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND		5566040	0		=			
ANR	5566103	PtrMemberAccess	req -> m_result		5566040	0					
ANR	5566104	Identifier	req		5566040	0					
ANR	5566105	Identifier	m_result		5566040	1					
ANR	5566106	Identifier	VMGAHP_ERR_VM_NOT_FOUND		5566040	1					
ANR	5566107	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeSoftSuspend\\n"" , vm_id )"	837:2:20155:20240	5566040	3	True				
ANR	5566108	CallExpression	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeSoftSuspend\\n"" , vm_id )"		5566040	0					
ANR	5566109	Callee	vmprintf		5566040	0					
ANR	5566110	Identifier	vmprintf		5566040	0					
ANR	5566111	ArgumentList	D_FULLDEBUG		5566040	1					
ANR	5566112	Argument	D_FULLDEBUG		5566040	0					
ANR	5566113	Identifier	D_FULLDEBUG		5566040	0					
ANR	5566114	Argument	"""VM(id=%d) is not found in executeSoftSuspend\\n"""		5566040	1					
ANR	5566115	PrimaryExpression	"""VM(id=%d) is not found in executeSoftSuspend\\n"""		5566040	0					
ANR	5566116	Argument	vm_id		5566040	2					
ANR	5566117	Identifier	vm_id		5566040	0					
ANR	5566118	ReturnStatement	return ;	839:2:20244:20250	5566040	4	True				
ANR	5566119	ElseStatement	else		5566040	0					
ANR	5566120	CompoundStatement		16:2:405:435	5566040	0					
ANR	5566121	IdentifierDeclStatement	int result = vm -> SoftSuspend ( ) ;	841:2:20263:20293	5566040	0	True				
ANR	5566122	IdentifierDecl	result = vm -> SoftSuspend ( )		5566040	0					
ANR	5566123	IdentifierDeclType	int		5566040	0					
ANR	5566124	Identifier	result		5566040	1					
ANR	5566125	AssignmentExpression	result = vm -> SoftSuspend ( )		5566040	2		=			
ANR	5566126	Identifier	result		5566040	0					
ANR	5566127	CallExpression	vm -> SoftSuspend ( )		5566040	1					
ANR	5566128	Callee	vm -> SoftSuspend		5566040	0					
ANR	5566129	PtrMemberAccess	vm -> SoftSuspend		5566040	0					
ANR	5566130	Identifier	vm		5566040	0					
ANR	5566131	Identifier	SoftSuspend		5566040	1					
ANR	5566132	ArgumentList			5566040	1					
ANR	5566133	IfStatement	if ( result == false )		5566040	1					
ANR	5566134	Condition	result == false	843:5:20301:20315	5566040	0	True				
ANR	5566135	EqualityExpression	result == false		5566040	0		==			
ANR	5566136	Identifier	result		5566040	0					
ANR	5566137	Identifier	false		5566040	1					
ANR	5566138	CompoundStatement		18:22:460:460	5566040	1					
ANR	5566139	ExpressionStatement	req -> m_has_result = true	844:3:20323:20347	5566040	0	True				
ANR	5566140	AssignmentExpression	req -> m_has_result = true		5566040	0		=			
ANR	5566141	PtrMemberAccess	req -> m_has_result		5566040	0					
ANR	5566142	Identifier	req		5566040	0					
ANR	5566143	Identifier	m_has_result		5566040	1					
ANR	5566144	Identifier	true		5566040	1					
ANR	5566145	ExpressionStatement	req -> m_is_success = false	845:3:20352:20377	5566040	1	True				
ANR	5566146	AssignmentExpression	req -> m_is_success = false		5566040	0		=			
ANR	5566147	PtrMemberAccess	req -> m_is_success		5566040	0					
ANR	5566148	Identifier	req		5566040	0					
ANR	5566149	Identifier	m_is_success		5566040	1					
ANR	5566150	Identifier	false		5566040	1					
ANR	5566151	ExpressionStatement	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )	846:3:20382:20440	5566040	2	True				
ANR	5566152	AssignmentExpression	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5566040	0		=			
ANR	5566153	PtrMemberAccess	req -> m_result		5566040	0					
ANR	5566154	Identifier	req		5566040	0					
ANR	5566155	Identifier	m_result		5566040	1					
ANR	5566156	CallExpression	makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5566040	1					
ANR	5566157	Callee	makeErrorMessage		5566040	0					
ANR	5566158	Identifier	makeErrorMessage		5566040	0					
ANR	5566159	ArgumentList	vm -> m_result_msg . Value ( )		5566040	1					
ANR	5566160	Argument	vm -> m_result_msg . Value ( )		5566040	0					
ANR	5566161	CallExpression	vm -> m_result_msg . Value ( )		5566040	0					
ANR	5566162	Callee	vm -> m_result_msg . Value		5566040	0					
ANR	5566163	MemberAccess	vm -> m_result_msg . Value		5566040	0					
ANR	5566164	PtrMemberAccess	vm -> m_result_msg		5566040	0					
ANR	5566165	Identifier	vm		5566040	0					
ANR	5566166	Identifier	m_result_msg		5566040	1					
ANR	5566167	Identifier	Value		5566040	1					
ANR	5566168	ArgumentList			5566040	1					
ANR	5566169	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeSoftSuspend fail!\\n"" )"	847:3:20445:20496	5566040	3	True				
ANR	5566170	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeSoftSuspend fail!\\n"" )"		5566040	0					
ANR	5566171	Callee	vmprintf		5566040	0					
ANR	5566172	Identifier	vmprintf		5566040	0					
ANR	5566173	ArgumentList	D_FULLDEBUG		5566040	1					
ANR	5566174	Argument	D_FULLDEBUG		5566040	0					
ANR	5566175	Identifier	D_FULLDEBUG		5566040	0					
ANR	5566176	Argument	"""executeSoftSuspend fail!\\n"""		5566040	1					
ANR	5566177	PrimaryExpression	"""executeSoftSuspend fail!\\n"""		5566040	0					
ANR	5566178	ReturnStatement	return ;	848:3:20501:20507	5566040	4	True				
ANR	5566179	ElseStatement	else		5566040	0					
ANR	5566180	CompoundStatement		24:9:660:660	5566040	0					
ANR	5566181	ExpressionStatement	req -> m_has_result = true	850:3:20523:20547	5566040	0	True				
ANR	5566182	AssignmentExpression	req -> m_has_result = true		5566040	0		=			
ANR	5566183	PtrMemberAccess	req -> m_has_result		5566040	0					
ANR	5566184	Identifier	req		5566040	0					
ANR	5566185	Identifier	m_has_result		5566040	1					
ANR	5566186	Identifier	true		5566040	1					
ANR	5566187	ExpressionStatement	req -> m_is_success = true	851:3:20552:20576	5566040	1	True				
ANR	5566188	AssignmentExpression	req -> m_is_success = true		5566040	0		=			
ANR	5566189	PtrMemberAccess	req -> m_is_success		5566040	0					
ANR	5566190	Identifier	req		5566040	0					
ANR	5566191	Identifier	m_is_success		5566040	1					
ANR	5566192	Identifier	true		5566040	1					
ANR	5566193	ExpressionStatement	"req -> m_result = """""	852:3:20581:20599	5566040	2	True				
ANR	5566194	AssignmentExpression	"req -> m_result = """""		5566040	0		=			
ANR	5566195	PtrMemberAccess	req -> m_result		5566040	0					
ANR	5566196	Identifier	req		5566040	0					
ANR	5566197	Identifier	m_result		5566040	1					
ANR	5566198	PrimaryExpression	""""""		5566040	1					
ANR	5566199	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeSoftSuspend success!\\n"" )"	853:3:20604:20658	5566040	3	True				
ANR	5566200	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeSoftSuspend success!\\n"" )"		5566040	0					
ANR	5566201	Callee	vmprintf		5566040	0					
ANR	5566202	Identifier	vmprintf		5566040	0					
ANR	5566203	ArgumentList	D_FULLDEBUG		5566040	1					
ANR	5566204	Argument	D_FULLDEBUG		5566040	0					
ANR	5566205	Identifier	D_FULLDEBUG		5566040	0					
ANR	5566206	Argument	"""executeSoftSuspend success!\\n"""		5566040	1					
ANR	5566207	PrimaryExpression	"""executeSoftSuspend success!\\n"""		5566040	0					
ANR	5566208	ReturnStatement	return ;	854:3:20663:20669	5566040	4	True				
ANR	5566209	ReturnType	void		5566040	1					
ANR	5566210	Identifier	VMGahp :: executeSoftSuspend		5566040	2					
ANR	5566211	ParameterList	VMRequest * req		5566040	3					
ANR	5566212	Parameter	VMRequest * req	825:27:19841:19854	5566040	0	True				
ANR	5566213	ParameterType	VMRequest *		5566040	0					
ANR	5566214	Identifier	req		5566040	1					
ANR	5566215	CFGEntryNode	ENTRY		5566040		True				
ANR	5566216	CFGExitNode	EXIT		5566040		True				
ANR	5566217	Symbol	VMGAHP_ERR_VM_NOT_FOUND		5566040						
ANR	5566218	Symbol	* req		5566040						
ANR	5566219	Symbol	makeErrorMessage		5566040						
ANR	5566220	Symbol	vm -> SoftSuspend		5566040						
ANR	5566221	Symbol	* req -> m_args		5566040						
ANR	5566222	Symbol	err_message		5566040						
ANR	5566223	Symbol	result		5566040						
ANR	5566224	Symbol	req -> m_args . argv		5566040						
ANR	5566225	Symbol	vm_id		5566040						
ANR	5566226	Symbol	req -> m_result		5566040						
ANR	5566227	Symbol	strtol		5566040						
ANR	5566228	Symbol	req		5566040						
ANR	5566229	Symbol	* req -> m_args . argv		5566040						
ANR	5566230	Symbol	NULL		5566040						
ANR	5566231	Symbol	false		5566040						
ANR	5566232	Symbol	D_FULLDEBUG		5566040						
ANR	5566233	Symbol	req -> m_args		5566040						
ANR	5566234	Symbol	vm -> m_result_msg		5566040						
ANR	5566235	Symbol	* * req		5566040						
ANR	5566236	Symbol	vm -> m_result_msg . Value		5566040						
ANR	5566237	Symbol	vm		5566040						
ANR	5566238	Symbol	true		5566040						
ANR	5566239	Symbol	findVM		5566040						
ANR	5566240	Symbol	req -> m_has_result		5566040						
ANR	5566241	Symbol	req -> m_is_success		5566040						
ANR	5566242	Symbol	* vm		5566040						
ANR	5566243	Function	VMGahp :: executeResume	859:0:20681:21517							
ANR	5566244	FunctionDef	VMGahp :: executeResume (VMRequest * req)		5566243	0					
ANR	5566245	CompoundStatement		861:0:20724:21517	5566243	0					
ANR	5566246	IdentifierDeclStatement	"int vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 ) ;"	863:1:20783:20840	5566243	0	True				
ANR	5566247	IdentifierDecl	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5566243	0					
ANR	5566248	IdentifierDeclType	int		5566243	0					
ANR	5566249	Identifier	vm_id		5566243	1					
ANR	5566250	AssignmentExpression	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5566243	2		=			
ANR	5566251	Identifier	vm_id		5566243	0					
ANR	5566252	CallExpression	"strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5566243	1					
ANR	5566253	Callee	strtol		5566243	0					
ANR	5566254	Identifier	strtol		5566243	0					
ANR	5566255	ArgumentList	req -> m_args . argv [ 2 ]		5566243	1					
ANR	5566256	Argument	req -> m_args . argv [ 2 ]		5566243	0					
ANR	5566257	ArrayIndexing	req -> m_args . argv [ 2 ]		5566243	0					
ANR	5566258	MemberAccess	req -> m_args . argv		5566243	0					
ANR	5566259	PtrMemberAccess	req -> m_args		5566243	0					
ANR	5566260	Identifier	req		5566243	0					
ANR	5566261	Identifier	m_args		5566243	1					
ANR	5566262	Identifier	argv		5566243	1					
ANR	5566263	PrimaryExpression	2		5566243	1					
ANR	5566264	Argument	( char * * ) NULL		5566243	1					
ANR	5566265	CastExpression	( char * * ) NULL		5566243	0					
ANR	5566266	CastTarget	char * *		5566243	0					
ANR	5566267	Identifier	NULL		5566243	1					
ANR	5566268	Argument	10		5566243	2					
ANR	5566269	PrimaryExpression	10		5566243	0					
ANR	5566270	IdentifierDeclStatement	MyString err_message ;	865:1:20844:20864	5566243	1	True				
ANR	5566271	IdentifierDecl	err_message		5566243	0					
ANR	5566272	IdentifierDeclType	MyString		5566243	0					
ANR	5566273	Identifier	err_message		5566243	1					
ANR	5566274	IdentifierDeclStatement	VMType * vm = findVM ( vm_id ) ;	866:1:20867:20893	5566243	2	True				
ANR	5566275	IdentifierDecl	* vm = findVM ( vm_id )		5566243	0					
ANR	5566276	IdentifierDeclType	VMType *		5566243	0					
ANR	5566277	Identifier	vm		5566243	1					
ANR	5566278	AssignmentExpression	* vm = findVM ( vm_id )		5566243	2		=			
ANR	5566279	Identifier	vm		5566243	0					
ANR	5566280	CallExpression	findVM ( vm_id )		5566243	1					
ANR	5566281	Callee	findVM		5566243	0					
ANR	5566282	Identifier	findVM		5566243	0					
ANR	5566283	ArgumentList	vm_id		5566243	1					
ANR	5566284	Argument	vm_id		5566243	0					
ANR	5566285	Identifier	vm_id		5566243	0					
ANR	5566286	IfStatement	if ( vm == NULL )		5566243	3					
ANR	5566287	Condition	vm == NULL	868:4:20900:20909	5566243	0	True				
ANR	5566288	EqualityExpression	vm == NULL		5566243	0		==			
ANR	5566289	Identifier	vm		5566243	0					
ANR	5566290	Identifier	NULL		5566243	1					
ANR	5566291	CompoundStatement		8:16:187:187	5566243	1					
ANR	5566292	ExpressionStatement	req -> m_has_result = true	869:2:20916:20940	5566243	0	True				
ANR	5566293	AssignmentExpression	req -> m_has_result = true		5566243	0		=			
ANR	5566294	PtrMemberAccess	req -> m_has_result		5566243	0					
ANR	5566295	Identifier	req		5566243	0					
ANR	5566296	Identifier	m_has_result		5566243	1					
ANR	5566297	Identifier	true		5566243	1					
ANR	5566298	ExpressionStatement	req -> m_is_success = false	870:2:20944:20969	5566243	1	True				
ANR	5566299	AssignmentExpression	req -> m_is_success = false		5566243	0		=			
ANR	5566300	PtrMemberAccess	req -> m_is_success		5566243	0					
ANR	5566301	Identifier	req		5566243	0					
ANR	5566302	Identifier	m_is_success		5566243	1					
ANR	5566303	Identifier	false		5566243	1					
ANR	5566304	ExpressionStatement	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND	871:2:20973:21012	5566243	2	True				
ANR	5566305	AssignmentExpression	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND		5566243	0		=			
ANR	5566306	PtrMemberAccess	req -> m_result		5566243	0					
ANR	5566307	Identifier	req		5566243	0					
ANR	5566308	Identifier	m_result		5566243	1					
ANR	5566309	Identifier	VMGAHP_ERR_VM_NOT_FOUND		5566243	1					
ANR	5566310	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeResume\\n"" , vm_id )"	872:2:21016:21094	5566243	3	True				
ANR	5566311	CallExpression	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeResume\\n"" , vm_id )"		5566243	0					
ANR	5566312	Callee	vmprintf		5566243	0					
ANR	5566313	Identifier	vmprintf		5566243	0					
ANR	5566314	ArgumentList	D_FULLDEBUG		5566243	1					
ANR	5566315	Argument	D_FULLDEBUG		5566243	0					
ANR	5566316	Identifier	D_FULLDEBUG		5566243	0					
ANR	5566317	Argument	"""VM(id=%d) is not found in executeResume\\n"""		5566243	1					
ANR	5566318	PrimaryExpression	"""VM(id=%d) is not found in executeResume\\n"""		5566243	0					
ANR	5566319	Argument	vm_id		5566243	2					
ANR	5566320	Identifier	vm_id		5566243	0					
ANR	5566321	ReturnStatement	return ;	874:2:21098:21104	5566243	4	True				
ANR	5566322	ElseStatement	else		5566243	0					
ANR	5566323	CompoundStatement		16:2:392:417	5566243	0					
ANR	5566324	IdentifierDeclStatement	int result = vm -> Resume ( ) ;	876:2:21117:21142	5566243	0	True				
ANR	5566325	IdentifierDecl	result = vm -> Resume ( )		5566243	0					
ANR	5566326	IdentifierDeclType	int		5566243	0					
ANR	5566327	Identifier	result		5566243	1					
ANR	5566328	AssignmentExpression	result = vm -> Resume ( )		5566243	2		=			
ANR	5566329	Identifier	result		5566243	0					
ANR	5566330	CallExpression	vm -> Resume ( )		5566243	1					
ANR	5566331	Callee	vm -> Resume		5566243	0					
ANR	5566332	PtrMemberAccess	vm -> Resume		5566243	0					
ANR	5566333	Identifier	vm		5566243	0					
ANR	5566334	Identifier	Resume		5566243	1					
ANR	5566335	ArgumentList			5566243	1					
ANR	5566336	IfStatement	if ( result == false )		5566243	1					
ANR	5566337	Condition	result == false	878:5:21150:21164	5566243	0	True				
ANR	5566338	EqualityExpression	result == false		5566243	0		==			
ANR	5566339	Identifier	result		5566243	0					
ANR	5566340	Identifier	false		5566243	1					
ANR	5566341	CompoundStatement		18:22:442:442	5566243	1					
ANR	5566342	ExpressionStatement	req -> m_has_result = true	879:3:21172:21196	5566243	0	True				
ANR	5566343	AssignmentExpression	req -> m_has_result = true		5566243	0		=			
ANR	5566344	PtrMemberAccess	req -> m_has_result		5566243	0					
ANR	5566345	Identifier	req		5566243	0					
ANR	5566346	Identifier	m_has_result		5566243	1					
ANR	5566347	Identifier	true		5566243	1					
ANR	5566348	ExpressionStatement	req -> m_is_success = false	880:3:21201:21226	5566243	1	True				
ANR	5566349	AssignmentExpression	req -> m_is_success = false		5566243	0		=			
ANR	5566350	PtrMemberAccess	req -> m_is_success		5566243	0					
ANR	5566351	Identifier	req		5566243	0					
ANR	5566352	Identifier	m_is_success		5566243	1					
ANR	5566353	Identifier	false		5566243	1					
ANR	5566354	ExpressionStatement	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )	881:3:21231:21289	5566243	2	True				
ANR	5566355	AssignmentExpression	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5566243	0		=			
ANR	5566356	PtrMemberAccess	req -> m_result		5566243	0					
ANR	5566357	Identifier	req		5566243	0					
ANR	5566358	Identifier	m_result		5566243	1					
ANR	5566359	CallExpression	makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5566243	1					
ANR	5566360	Callee	makeErrorMessage		5566243	0					
ANR	5566361	Identifier	makeErrorMessage		5566243	0					
ANR	5566362	ArgumentList	vm -> m_result_msg . Value ( )		5566243	1					
ANR	5566363	Argument	vm -> m_result_msg . Value ( )		5566243	0					
ANR	5566364	CallExpression	vm -> m_result_msg . Value ( )		5566243	0					
ANR	5566365	Callee	vm -> m_result_msg . Value		5566243	0					
ANR	5566366	MemberAccess	vm -> m_result_msg . Value		5566243	0					
ANR	5566367	PtrMemberAccess	vm -> m_result_msg		5566243	0					
ANR	5566368	Identifier	vm		5566243	0					
ANR	5566369	Identifier	m_result_msg		5566243	1					
ANR	5566370	Identifier	Value		5566243	1					
ANR	5566371	ArgumentList			5566243	1					
ANR	5566372	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeResume fail!\\n"" )"	882:3:21294:21340	5566243	3	True				
ANR	5566373	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeResume fail!\\n"" )"		5566243	0					
ANR	5566374	Callee	vmprintf		5566243	0					
ANR	5566375	Identifier	vmprintf		5566243	0					
ANR	5566376	ArgumentList	D_FULLDEBUG		5566243	1					
ANR	5566377	Argument	D_FULLDEBUG		5566243	0					
ANR	5566378	Identifier	D_FULLDEBUG		5566243	0					
ANR	5566379	Argument	"""executeResume fail!\\n"""		5566243	1					
ANR	5566380	PrimaryExpression	"""executeResume fail!\\n"""		5566243	0					
ANR	5566381	ReturnStatement	return ;	883:3:21345:21351	5566243	4	True				
ANR	5566382	ElseStatement	else		5566243	0					
ANR	5566383	CompoundStatement		24:9:637:637	5566243	0					
ANR	5566384	ExpressionStatement	req -> m_has_result = true	885:3:21367:21391	5566243	0	True				
ANR	5566385	AssignmentExpression	req -> m_has_result = true		5566243	0		=			
ANR	5566386	PtrMemberAccess	req -> m_has_result		5566243	0					
ANR	5566387	Identifier	req		5566243	0					
ANR	5566388	Identifier	m_has_result		5566243	1					
ANR	5566389	Identifier	true		5566243	1					
ANR	5566390	ExpressionStatement	req -> m_is_success = true	886:3:21396:21420	5566243	1	True				
ANR	5566391	AssignmentExpression	req -> m_is_success = true		5566243	0		=			
ANR	5566392	PtrMemberAccess	req -> m_is_success		5566243	0					
ANR	5566393	Identifier	req		5566243	0					
ANR	5566394	Identifier	m_is_success		5566243	1					
ANR	5566395	Identifier	true		5566243	1					
ANR	5566396	ExpressionStatement	"req -> m_result = """""	887:3:21425:21443	5566243	2	True				
ANR	5566397	AssignmentExpression	"req -> m_result = """""		5566243	0		=			
ANR	5566398	PtrMemberAccess	req -> m_result		5566243	0					
ANR	5566399	Identifier	req		5566243	0					
ANR	5566400	Identifier	m_result		5566243	1					
ANR	5566401	PrimaryExpression	""""""		5566243	1					
ANR	5566402	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeResume success!\\n"" )"	888:3:21448:21497	5566243	3	True				
ANR	5566403	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeResume success!\\n"" )"		5566243	0					
ANR	5566404	Callee	vmprintf		5566243	0					
ANR	5566405	Identifier	vmprintf		5566243	0					
ANR	5566406	ArgumentList	D_FULLDEBUG		5566243	1					
ANR	5566407	Argument	D_FULLDEBUG		5566243	0					
ANR	5566408	Identifier	D_FULLDEBUG		5566243	0					
ANR	5566409	Argument	"""executeResume success!\\n"""		5566243	1					
ANR	5566410	PrimaryExpression	"""executeResume success!\\n"""		5566243	0					
ANR	5566411	ReturnStatement	return ;	889:3:21502:21508	5566243	4	True				
ANR	5566412	ReturnType	void		5566243	1					
ANR	5566413	Identifier	VMGahp :: executeResume		5566243	2					
ANR	5566414	ParameterList	VMRequest * req		5566243	3					
ANR	5566415	Parameter	VMRequest * req	860:22:20708:20721	5566243	0	True				
ANR	5566416	ParameterType	VMRequest *		5566243	0					
ANR	5566417	Identifier	req		5566243	1					
ANR	5566418	CFGEntryNode	ENTRY		5566243		True				
ANR	5566419	CFGExitNode	EXIT		5566243		True				
ANR	5566420	Symbol	VMGAHP_ERR_VM_NOT_FOUND		5566243						
ANR	5566421	Symbol	* req		5566243						
ANR	5566422	Symbol	vm -> Resume		5566243						
ANR	5566423	Symbol	makeErrorMessage		5566243						
ANR	5566424	Symbol	* req -> m_args		5566243						
ANR	5566425	Symbol	err_message		5566243						
ANR	5566426	Symbol	result		5566243						
ANR	5566427	Symbol	req -> m_args . argv		5566243						
ANR	5566428	Symbol	vm_id		5566243						
ANR	5566429	Symbol	req -> m_result		5566243						
ANR	5566430	Symbol	strtol		5566243						
ANR	5566431	Symbol	req		5566243						
ANR	5566432	Symbol	* req -> m_args . argv		5566243						
ANR	5566433	Symbol	NULL		5566243						
ANR	5566434	Symbol	false		5566243						
ANR	5566435	Symbol	D_FULLDEBUG		5566243						
ANR	5566436	Symbol	req -> m_args		5566243						
ANR	5566437	Symbol	vm -> m_result_msg		5566243						
ANR	5566438	Symbol	* * req		5566243						
ANR	5566439	Symbol	vm -> m_result_msg . Value		5566243						
ANR	5566440	Symbol	vm		5566243						
ANR	5566441	Symbol	true		5566243						
ANR	5566442	Symbol	findVM		5566243						
ANR	5566443	Symbol	req -> m_has_result		5566243						
ANR	5566444	Symbol	req -> m_is_success		5566243						
ANR	5566445	Symbol	* vm		5566243						
ANR	5566446	Function	VMGahp :: executeCheckpoint	894:0:21520:22380							
ANR	5566447	FunctionDef	VMGahp :: executeCheckpoint (VMRequest * req)		5566446	0					
ANR	5566448	CompoundStatement		896:0:21567:22380	5566446	0					
ANR	5566449	IdentifierDeclStatement	"int vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 ) ;"	898:1:21630:21687	5566446	0	True				
ANR	5566450	IdentifierDecl	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5566446	0					
ANR	5566451	IdentifierDeclType	int		5566446	0					
ANR	5566452	Identifier	vm_id		5566446	1					
ANR	5566453	AssignmentExpression	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5566446	2		=			
ANR	5566454	Identifier	vm_id		5566446	0					
ANR	5566455	CallExpression	"strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5566446	1					
ANR	5566456	Callee	strtol		5566446	0					
ANR	5566457	Identifier	strtol		5566446	0					
ANR	5566458	ArgumentList	req -> m_args . argv [ 2 ]		5566446	1					
ANR	5566459	Argument	req -> m_args . argv [ 2 ]		5566446	0					
ANR	5566460	ArrayIndexing	req -> m_args . argv [ 2 ]		5566446	0					
ANR	5566461	MemberAccess	req -> m_args . argv		5566446	0					
ANR	5566462	PtrMemberAccess	req -> m_args		5566446	0					
ANR	5566463	Identifier	req		5566446	0					
ANR	5566464	Identifier	m_args		5566446	1					
ANR	5566465	Identifier	argv		5566446	1					
ANR	5566466	PrimaryExpression	2		5566446	1					
ANR	5566467	Argument	( char * * ) NULL		5566446	1					
ANR	5566468	CastExpression	( char * * ) NULL		5566446	0					
ANR	5566469	CastTarget	char * *		5566446	0					
ANR	5566470	Identifier	NULL		5566446	1					
ANR	5566471	Argument	10		5566446	2					
ANR	5566472	PrimaryExpression	10		5566446	0					
ANR	5566473	IdentifierDeclStatement	MyString err_message ;	900:1:21691:21711	5566446	1	True				
ANR	5566474	IdentifierDecl	err_message		5566446	0					
ANR	5566475	IdentifierDeclType	MyString		5566446	0					
ANR	5566476	Identifier	err_message		5566446	1					
ANR	5566477	IdentifierDeclStatement	VMType * vm = findVM ( vm_id ) ;	901:1:21714:21740	5566446	2	True				
ANR	5566478	IdentifierDecl	* vm = findVM ( vm_id )		5566446	0					
ANR	5566479	IdentifierDeclType	VMType *		5566446	0					
ANR	5566480	Identifier	vm		5566446	1					
ANR	5566481	AssignmentExpression	* vm = findVM ( vm_id )		5566446	2		=			
ANR	5566482	Identifier	vm		5566446	0					
ANR	5566483	CallExpression	findVM ( vm_id )		5566446	1					
ANR	5566484	Callee	findVM		5566446	0					
ANR	5566485	Identifier	findVM		5566446	0					
ANR	5566486	ArgumentList	vm_id		5566446	1					
ANR	5566487	Argument	vm_id		5566446	0					
ANR	5566488	Identifier	vm_id		5566446	0					
ANR	5566489	IfStatement	if ( vm == NULL )		5566446	3					
ANR	5566490	Condition	vm == NULL	903:4:21747:21756	5566446	0	True				
ANR	5566491	EqualityExpression	vm == NULL		5566446	0		==			
ANR	5566492	Identifier	vm		5566446	0					
ANR	5566493	Identifier	NULL		5566446	1					
ANR	5566494	CompoundStatement		8:16:191:191	5566446	1					
ANR	5566495	ExpressionStatement	req -> m_has_result = true	904:2:21763:21787	5566446	0	True				
ANR	5566496	AssignmentExpression	req -> m_has_result = true		5566446	0		=			
ANR	5566497	PtrMemberAccess	req -> m_has_result		5566446	0					
ANR	5566498	Identifier	req		5566446	0					
ANR	5566499	Identifier	m_has_result		5566446	1					
ANR	5566500	Identifier	true		5566446	1					
ANR	5566501	ExpressionStatement	req -> m_is_success = false	905:2:21791:21816	5566446	1	True				
ANR	5566502	AssignmentExpression	req -> m_is_success = false		5566446	0		=			
ANR	5566503	PtrMemberAccess	req -> m_is_success		5566446	0					
ANR	5566504	Identifier	req		5566446	0					
ANR	5566505	Identifier	m_is_success		5566446	1					
ANR	5566506	Identifier	false		5566446	1					
ANR	5566507	ExpressionStatement	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND	906:2:21820:21859	5566446	2	True				
ANR	5566508	AssignmentExpression	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND		5566446	0		=			
ANR	5566509	PtrMemberAccess	req -> m_result		5566446	0					
ANR	5566510	Identifier	req		5566446	0					
ANR	5566511	Identifier	m_result		5566446	1					
ANR	5566512	Identifier	VMGAHP_ERR_VM_NOT_FOUND		5566446	1					
ANR	5566513	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeCheckpoint\\n"" , vm_id )"	907:2:21863:21945	5566446	3	True				
ANR	5566514	CallExpression	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeCheckpoint\\n"" , vm_id )"		5566446	0					
ANR	5566515	Callee	vmprintf		5566446	0					
ANR	5566516	Identifier	vmprintf		5566446	0					
ANR	5566517	ArgumentList	D_FULLDEBUG		5566446	1					
ANR	5566518	Argument	D_FULLDEBUG		5566446	0					
ANR	5566519	Identifier	D_FULLDEBUG		5566446	0					
ANR	5566520	Argument	"""VM(id=%d) is not found in executeCheckpoint\\n"""		5566446	1					
ANR	5566521	PrimaryExpression	"""VM(id=%d) is not found in executeCheckpoint\\n"""		5566446	0					
ANR	5566522	Argument	vm_id		5566446	2					
ANR	5566523	Identifier	vm_id		5566446	0					
ANR	5566524	ReturnStatement	return ;	909:2:21949:21955	5566446	4	True				
ANR	5566525	ElseStatement	else		5566446	0					
ANR	5566526	CompoundStatement		16:2:400:429	5566446	0					
ANR	5566527	IdentifierDeclStatement	int result = vm -> Checkpoint ( ) ;	911:2:21968:21997	5566446	0	True				
ANR	5566528	IdentifierDecl	result = vm -> Checkpoint ( )		5566446	0					
ANR	5566529	IdentifierDeclType	int		5566446	0					
ANR	5566530	Identifier	result		5566446	1					
ANR	5566531	AssignmentExpression	result = vm -> Checkpoint ( )		5566446	2		=			
ANR	5566532	Identifier	result		5566446	0					
ANR	5566533	CallExpression	vm -> Checkpoint ( )		5566446	1					
ANR	5566534	Callee	vm -> Checkpoint		5566446	0					
ANR	5566535	PtrMemberAccess	vm -> Checkpoint		5566446	0					
ANR	5566536	Identifier	vm		5566446	0					
ANR	5566537	Identifier	Checkpoint		5566446	1					
ANR	5566538	ArgumentList			5566446	1					
ANR	5566539	IfStatement	if ( result == false )		5566446	1					
ANR	5566540	Condition	result == false	913:5:22005:22019	5566446	0	True				
ANR	5566541	EqualityExpression	result == false		5566446	0		==			
ANR	5566542	Identifier	result		5566446	0					
ANR	5566543	Identifier	false		5566446	1					
ANR	5566544	CompoundStatement		18:22:454:454	5566446	1					
ANR	5566545	ExpressionStatement	req -> m_has_result = true	914:3:22027:22051	5566446	0	True				
ANR	5566546	AssignmentExpression	req -> m_has_result = true		5566446	0		=			
ANR	5566547	PtrMemberAccess	req -> m_has_result		5566446	0					
ANR	5566548	Identifier	req		5566446	0					
ANR	5566549	Identifier	m_has_result		5566446	1					
ANR	5566550	Identifier	true		5566446	1					
ANR	5566551	ExpressionStatement	req -> m_is_success = false	915:3:22056:22081	5566446	1	True				
ANR	5566552	AssignmentExpression	req -> m_is_success = false		5566446	0		=			
ANR	5566553	PtrMemberAccess	req -> m_is_success		5566446	0					
ANR	5566554	Identifier	req		5566446	0					
ANR	5566555	Identifier	m_is_success		5566446	1					
ANR	5566556	Identifier	false		5566446	1					
ANR	5566557	ExpressionStatement	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )	916:3:22086:22144	5566446	2	True				
ANR	5566558	AssignmentExpression	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5566446	0		=			
ANR	5566559	PtrMemberAccess	req -> m_result		5566446	0					
ANR	5566560	Identifier	req		5566446	0					
ANR	5566561	Identifier	m_result		5566446	1					
ANR	5566562	CallExpression	makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5566446	1					
ANR	5566563	Callee	makeErrorMessage		5566446	0					
ANR	5566564	Identifier	makeErrorMessage		5566446	0					
ANR	5566565	ArgumentList	vm -> m_result_msg . Value ( )		5566446	1					
ANR	5566566	Argument	vm -> m_result_msg . Value ( )		5566446	0					
ANR	5566567	CallExpression	vm -> m_result_msg . Value ( )		5566446	0					
ANR	5566568	Callee	vm -> m_result_msg . Value		5566446	0					
ANR	5566569	MemberAccess	vm -> m_result_msg . Value		5566446	0					
ANR	5566570	PtrMemberAccess	vm -> m_result_msg		5566446	0					
ANR	5566571	Identifier	vm		5566446	0					
ANR	5566572	Identifier	m_result_msg		5566446	1					
ANR	5566573	Identifier	Value		5566446	1					
ANR	5566574	ArgumentList			5566446	1					
ANR	5566575	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeCheckpoint fail!\\n"" )"	917:3:22149:22199	5566446	3	True				
ANR	5566576	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeCheckpoint fail!\\n"" )"		5566446	0					
ANR	5566577	Callee	vmprintf		5566446	0					
ANR	5566578	Identifier	vmprintf		5566446	0					
ANR	5566579	ArgumentList	D_FULLDEBUG		5566446	1					
ANR	5566580	Argument	D_FULLDEBUG		5566446	0					
ANR	5566581	Identifier	D_FULLDEBUG		5566446	0					
ANR	5566582	Argument	"""executeCheckpoint fail!\\n"""		5566446	1					
ANR	5566583	PrimaryExpression	"""executeCheckpoint fail!\\n"""		5566446	0					
ANR	5566584	ReturnStatement	return ;	918:3:22204:22210	5566446	4	True				
ANR	5566585	ElseStatement	else		5566446	0					
ANR	5566586	CompoundStatement		24:9:653:653	5566446	0					
ANR	5566587	ExpressionStatement	req -> m_has_result = true	920:3:22226:22250	5566446	0	True				
ANR	5566588	AssignmentExpression	req -> m_has_result = true		5566446	0		=			
ANR	5566589	PtrMemberAccess	req -> m_has_result		5566446	0					
ANR	5566590	Identifier	req		5566446	0					
ANR	5566591	Identifier	m_has_result		5566446	1					
ANR	5566592	Identifier	true		5566446	1					
ANR	5566593	ExpressionStatement	req -> m_is_success = true	921:3:22255:22279	5566446	1	True				
ANR	5566594	AssignmentExpression	req -> m_is_success = true		5566446	0		=			
ANR	5566595	PtrMemberAccess	req -> m_is_success		5566446	0					
ANR	5566596	Identifier	req		5566446	0					
ANR	5566597	Identifier	m_is_success		5566446	1					
ANR	5566598	Identifier	true		5566446	1					
ANR	5566599	ExpressionStatement	"req -> m_result = """""	922:3:22284:22302	5566446	2	True				
ANR	5566600	AssignmentExpression	"req -> m_result = """""		5566446	0		=			
ANR	5566601	PtrMemberAccess	req -> m_result		5566446	0					
ANR	5566602	Identifier	req		5566446	0					
ANR	5566603	Identifier	m_result		5566446	1					
ANR	5566604	PrimaryExpression	""""""		5566446	1					
ANR	5566605	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeCheckpoint success!\\n"" )"	923:3:22307:22360	5566446	3	True				
ANR	5566606	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeCheckpoint success!\\n"" )"		5566446	0					
ANR	5566607	Callee	vmprintf		5566446	0					
ANR	5566608	Identifier	vmprintf		5566446	0					
ANR	5566609	ArgumentList	D_FULLDEBUG		5566446	1					
ANR	5566610	Argument	D_FULLDEBUG		5566446	0					
ANR	5566611	Identifier	D_FULLDEBUG		5566446	0					
ANR	5566612	Argument	"""executeCheckpoint success!\\n"""		5566446	1					
ANR	5566613	PrimaryExpression	"""executeCheckpoint success!\\n"""		5566446	0					
ANR	5566614	ReturnStatement	return ;	924:3:22365:22371	5566446	4	True				
ANR	5566615	ReturnType	void		5566446	1					
ANR	5566616	Identifier	VMGahp :: executeCheckpoint		5566446	2					
ANR	5566617	ParameterList	VMRequest * req		5566446	3					
ANR	5566618	Parameter	VMRequest * req	895:26:21551:21564	5566446	0	True				
ANR	5566619	ParameterType	VMRequest *		5566446	0					
ANR	5566620	Identifier	req		5566446	1					
ANR	5566621	CFGEntryNode	ENTRY		5566446		True				
ANR	5566622	CFGExitNode	EXIT		5566446		True				
ANR	5566623	Symbol	VMGAHP_ERR_VM_NOT_FOUND		5566446						
ANR	5566624	Symbol	* req		5566446						
ANR	5566625	Symbol	makeErrorMessage		5566446						
ANR	5566626	Symbol	* req -> m_args		5566446						
ANR	5566627	Symbol	err_message		5566446						
ANR	5566628	Symbol	result		5566446						
ANR	5566629	Symbol	vm_id		5566446						
ANR	5566630	Symbol	req -> m_args . argv		5566446						
ANR	5566631	Symbol	req -> m_result		5566446						
ANR	5566632	Symbol	strtol		5566446						
ANR	5566633	Symbol	req		5566446						
ANR	5566634	Symbol	* req -> m_args . argv		5566446						
ANR	5566635	Symbol	NULL		5566446						
ANR	5566636	Symbol	false		5566446						
ANR	5566637	Symbol	D_FULLDEBUG		5566446						
ANR	5566638	Symbol	req -> m_args		5566446						
ANR	5566639	Symbol	vm -> Checkpoint		5566446						
ANR	5566640	Symbol	vm -> m_result_msg		5566446						
ANR	5566641	Symbol	* * req		5566446						
ANR	5566642	Symbol	vm -> m_result_msg . Value		5566446						
ANR	5566643	Symbol	vm		5566446						
ANR	5566644	Symbol	true		5566446						
ANR	5566645	Symbol	findVM		5566446						
ANR	5566646	Symbol	req -> m_has_result		5566446						
ANR	5566647	Symbol	req -> m_is_success		5566446						
ANR	5566648	Symbol	* vm		5566446						
ANR	5566649	Function	VMGahp :: executeStatus	929:0:22383:23105							
ANR	5566650	FunctionDef	VMGahp :: executeStatus (VMRequest * req)		5566649	0					
ANR	5566651	CompoundStatement		931:0:22426:23105	5566649	0					
ANR	5566652	IdentifierDeclStatement	"int vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 ) ;"	933:1:22485:22542	5566649	0	True				
ANR	5566653	IdentifierDecl	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5566649	0					
ANR	5566654	IdentifierDeclType	int		5566649	0					
ANR	5566655	Identifier	vm_id		5566649	1					
ANR	5566656	AssignmentExpression	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5566649	2		=			
ANR	5566657	Identifier	vm_id		5566649	0					
ANR	5566658	CallExpression	"strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5566649	1					
ANR	5566659	Callee	strtol		5566649	0					
ANR	5566660	Identifier	strtol		5566649	0					
ANR	5566661	ArgumentList	req -> m_args . argv [ 2 ]		5566649	1					
ANR	5566662	Argument	req -> m_args . argv [ 2 ]		5566649	0					
ANR	5566663	ArrayIndexing	req -> m_args . argv [ 2 ]		5566649	0					
ANR	5566664	MemberAccess	req -> m_args . argv		5566649	0					
ANR	5566665	PtrMemberAccess	req -> m_args		5566649	0					
ANR	5566666	Identifier	req		5566649	0					
ANR	5566667	Identifier	m_args		5566649	1					
ANR	5566668	Identifier	argv		5566649	1					
ANR	5566669	PrimaryExpression	2		5566649	1					
ANR	5566670	Argument	( char * * ) NULL		5566649	1					
ANR	5566671	CastExpression	( char * * ) NULL		5566649	0					
ANR	5566672	CastTarget	char * *		5566649	0					
ANR	5566673	Identifier	NULL		5566649	1					
ANR	5566674	Argument	10		5566649	2					
ANR	5566675	PrimaryExpression	10		5566649	0					
ANR	5566676	IdentifierDeclStatement	VMType * vm = findVM ( vm_id ) ;	935:1:22546:22572	5566649	1	True				
ANR	5566677	IdentifierDecl	* vm = findVM ( vm_id )		5566649	0					
ANR	5566678	IdentifierDeclType	VMType *		5566649	0					
ANR	5566679	Identifier	vm		5566649	1					
ANR	5566680	AssignmentExpression	* vm = findVM ( vm_id )		5566649	2		=			
ANR	5566681	Identifier	vm		5566649	0					
ANR	5566682	CallExpression	findVM ( vm_id )		5566649	1					
ANR	5566683	Callee	findVM		5566649	0					
ANR	5566684	Identifier	findVM		5566649	0					
ANR	5566685	ArgumentList	vm_id		5566649	1					
ANR	5566686	Argument	vm_id		5566649	0					
ANR	5566687	Identifier	vm_id		5566649	0					
ANR	5566688	IfStatement	if ( vm == NULL )		5566649	2					
ANR	5566689	Condition	vm == NULL	937:4:22579:22588	5566649	0	True				
ANR	5566690	EqualityExpression	vm == NULL		5566649	0		==			
ANR	5566691	Identifier	vm		5566649	0					
ANR	5566692	Identifier	NULL		5566649	1					
ANR	5566693	CompoundStatement		7:16:164:164	5566649	1					
ANR	5566694	ExpressionStatement	req -> m_has_result = true	938:2:22595:22619	5566649	0	True				
ANR	5566695	AssignmentExpression	req -> m_has_result = true		5566649	0		=			
ANR	5566696	PtrMemberAccess	req -> m_has_result		5566649	0					
ANR	5566697	Identifier	req		5566649	0					
ANR	5566698	Identifier	m_has_result		5566649	1					
ANR	5566699	Identifier	true		5566649	1					
ANR	5566700	ExpressionStatement	req -> m_is_success = true	939:2:22623:22647	5566649	1	True				
ANR	5566701	AssignmentExpression	req -> m_is_success = true		5566649	0		=			
ANR	5566702	PtrMemberAccess	req -> m_is_success		5566649	0					
ANR	5566703	Identifier	req		5566649	0					
ANR	5566704	Identifier	m_is_success		5566649	1					
ANR	5566705	Identifier	true		5566649	1					
ANR	5566706	ExpressionStatement	"req -> m_result = ""Stopped"""	940:2:22651:22676	5566649	2	True				
ANR	5566707	AssignmentExpression	"req -> m_result = ""Stopped"""		5566649	0		=			
ANR	5566708	PtrMemberAccess	req -> m_result		5566649	0					
ANR	5566709	Identifier	req		5566649	0					
ANR	5566710	Identifier	m_result		5566649	1					
ANR	5566711	PrimaryExpression	"""Stopped"""		5566649	1					
ANR	5566712	ReturnStatement	return ;	941:2:22680:22686	5566649	3	True				
ANR	5566713	ElseStatement	else		5566649	0					
ANR	5566714	CompoundStatement		13:2:272:297	5566649	0					
ANR	5566715	IdentifierDeclStatement	int result = vm -> Status ( ) ;	943:2:22699:22724	5566649	0	True				
ANR	5566716	IdentifierDecl	result = vm -> Status ( )		5566649	0					
ANR	5566717	IdentifierDeclType	int		5566649	0					
ANR	5566718	Identifier	result		5566649	1					
ANR	5566719	AssignmentExpression	result = vm -> Status ( )		5566649	2		=			
ANR	5566720	Identifier	result		5566649	0					
ANR	5566721	CallExpression	vm -> Status ( )		5566649	1					
ANR	5566722	Callee	vm -> Status		5566649	0					
ANR	5566723	PtrMemberAccess	vm -> Status		5566649	0					
ANR	5566724	Identifier	vm		5566649	0					
ANR	5566725	Identifier	Status		5566649	1					
ANR	5566726	ArgumentList			5566649	1					
ANR	5566727	IfStatement	if ( result == false )		5566649	1					
ANR	5566728	Condition	result == false	945:5:22732:22746	5566649	0	True				
ANR	5566729	EqualityExpression	result == false		5566649	0		==			
ANR	5566730	Identifier	result		5566649	0					
ANR	5566731	Identifier	false		5566649	1					
ANR	5566732	CompoundStatement		15:22:322:322	5566649	1					
ANR	5566733	ExpressionStatement	req -> m_has_result = true	946:3:22754:22778	5566649	0	True				
ANR	5566734	AssignmentExpression	req -> m_has_result = true		5566649	0		=			
ANR	5566735	PtrMemberAccess	req -> m_has_result		5566649	0					
ANR	5566736	Identifier	req		5566649	0					
ANR	5566737	Identifier	m_has_result		5566649	1					
ANR	5566738	Identifier	true		5566649	1					
ANR	5566739	ExpressionStatement	req -> m_is_success = false	947:3:22783:22808	5566649	1	True				
ANR	5566740	AssignmentExpression	req -> m_is_success = false		5566649	0		=			
ANR	5566741	PtrMemberAccess	req -> m_is_success		5566649	0					
ANR	5566742	Identifier	req		5566649	0					
ANR	5566743	Identifier	m_is_success		5566649	1					
ANR	5566744	Identifier	false		5566649	1					
ANR	5566745	ExpressionStatement	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )	948:3:22813:22871	5566649	2	True				
ANR	5566746	AssignmentExpression	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5566649	0		=			
ANR	5566747	PtrMemberAccess	req -> m_result		5566649	0					
ANR	5566748	Identifier	req		5566649	0					
ANR	5566749	Identifier	m_result		5566649	1					
ANR	5566750	CallExpression	makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5566649	1					
ANR	5566751	Callee	makeErrorMessage		5566649	0					
ANR	5566752	Identifier	makeErrorMessage		5566649	0					
ANR	5566753	ArgumentList	vm -> m_result_msg . Value ( )		5566649	1					
ANR	5566754	Argument	vm -> m_result_msg . Value ( )		5566649	0					
ANR	5566755	CallExpression	vm -> m_result_msg . Value ( )		5566649	0					
ANR	5566756	Callee	vm -> m_result_msg . Value		5566649	0					
ANR	5566757	MemberAccess	vm -> m_result_msg . Value		5566649	0					
ANR	5566758	PtrMemberAccess	vm -> m_result_msg		5566649	0					
ANR	5566759	Identifier	vm		5566649	0					
ANR	5566760	Identifier	m_result_msg		5566649	1					
ANR	5566761	Identifier	Value		5566649	1					
ANR	5566762	ArgumentList			5566649	1					
ANR	5566763	ReturnStatement	return ;	949:3:22876:22882	5566649	3	True				
ANR	5566764	ElseStatement	else		5566649	0					
ANR	5566765	CompoundStatement		20:9:466:466	5566649	0					
ANR	5566766	ExpressionStatement	req -> m_has_result = true	952:3:22899:22923	5566649	0	True				
ANR	5566767	AssignmentExpression	req -> m_has_result = true		5566649	0		=			
ANR	5566768	PtrMemberAccess	req -> m_has_result		5566649	0					
ANR	5566769	Identifier	req		5566649	0					
ANR	5566770	Identifier	m_has_result		5566649	1					
ANR	5566771	Identifier	true		5566649	1					
ANR	5566772	ExpressionStatement	req -> m_is_success = true	953:3:22928:22952	5566649	1	True				
ANR	5566773	AssignmentExpression	req -> m_is_success = true		5566649	0		=			
ANR	5566774	PtrMemberAccess	req -> m_is_success		5566649	0					
ANR	5566775	Identifier	req		5566649	0					
ANR	5566776	Identifier	m_is_success		5566649	1					
ANR	5566777	Identifier	true		5566649	1					
ANR	5566778	ExpressionStatement	req -> m_result = vm -> m_result_msg	954:3:22957:22989	5566649	2	True				
ANR	5566779	AssignmentExpression	req -> m_result = vm -> m_result_msg		5566649	0		=			
ANR	5566780	PtrMemberAccess	req -> m_result		5566649	0					
ANR	5566781	Identifier	req		5566649	0					
ANR	5566782	Identifier	m_result		5566649	1					
ANR	5566783	PtrMemberAccess	vm -> m_result_msg		5566649	1					
ANR	5566784	Identifier	vm		5566649	0					
ANR	5566785	Identifier	m_result_msg		5566649	1					
ANR	5566786	ExpressionStatement	vm -> setLastStatus ( req -> m_result . Value ( ) )	957:3:23045:23085	5566649	3	True				
ANR	5566787	CallExpression	vm -> setLastStatus ( req -> m_result . Value ( ) )		5566649	0					
ANR	5566788	Callee	vm -> setLastStatus		5566649	0					
ANR	5566789	PtrMemberAccess	vm -> setLastStatus		5566649	0					
ANR	5566790	Identifier	vm		5566649	0					
ANR	5566791	Identifier	setLastStatus		5566649	1					
ANR	5566792	ArgumentList	req -> m_result . Value ( )		5566649	1					
ANR	5566793	Argument	req -> m_result . Value ( )		5566649	0					
ANR	5566794	CallExpression	req -> m_result . Value ( )		5566649	0					
ANR	5566795	Callee	req -> m_result . Value		5566649	0					
ANR	5566796	MemberAccess	req -> m_result . Value		5566649	0					
ANR	5566797	PtrMemberAccess	req -> m_result		5566649	0					
ANR	5566798	Identifier	req		5566649	0					
ANR	5566799	Identifier	m_result		5566649	1					
ANR	5566800	Identifier	Value		5566649	1					
ANR	5566801	ArgumentList			5566649	1					
ANR	5566802	ReturnStatement	return ;	958:3:23090:23096	5566649	4	True				
ANR	5566803	ReturnType	void		5566649	1					
ANR	5566804	Identifier	VMGahp :: executeStatus		5566649	2					
ANR	5566805	ParameterList	VMRequest * req		5566649	3					
ANR	5566806	Parameter	VMRequest * req	930:22:22410:22423	5566649	0	True				
ANR	5566807	ParameterType	VMRequest *		5566649	0					
ANR	5566808	Identifier	req		5566649	1					
ANR	5566809	CFGEntryNode	ENTRY		5566649		True				
ANR	5566810	CFGExitNode	EXIT		5566649		True				
ANR	5566811	Symbol	vm -> Status		5566649						
ANR	5566812	Symbol	NULL		5566649						
ANR	5566813	Symbol	* req		5566649						
ANR	5566814	Symbol	false		5566649						
ANR	5566815	Symbol	req -> m_result . Value		5566649						
ANR	5566816	Symbol	makeErrorMessage		5566649						
ANR	5566817	Symbol	req -> m_args		5566649						
ANR	5566818	Symbol	* req -> m_args		5566649						
ANR	5566819	Symbol	result		5566649						
ANR	5566820	Symbol	vm -> m_result_msg		5566649						
ANR	5566821	Symbol	req -> m_args . argv		5566649						
ANR	5566822	Symbol	vm_id		5566649						
ANR	5566823	Symbol	* * req		5566649						
ANR	5566824	Symbol	req -> m_result		5566649						
ANR	5566825	Symbol	strtol		5566649						
ANR	5566826	Symbol	vm -> m_result_msg . Value		5566649						
ANR	5566827	Symbol	vm		5566649						
ANR	5566828	Symbol	true		5566649						
ANR	5566829	Symbol	findVM		5566649						
ANR	5566830	Symbol	req -> m_has_result		5566649						
ANR	5566831	Symbol	req -> m_is_success		5566649						
ANR	5566832	Symbol	* vm		5566649						
ANR	5566833	Symbol	req		5566649						
ANR	5566834	Symbol	* req -> m_args . argv		5566649						
ANR	5566835	Function	VMGahp :: executeGetpid	963:0:23108:23723							
ANR	5566836	FunctionDef	VMGahp :: executeGetpid (VMRequest * req)		5566835	0					
ANR	5566837	CompoundStatement		965:0:23151:23723	5566835	0					
ANR	5566838	IdentifierDeclStatement	"int vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 ) ;"	967:1:23210:23267	5566835	0	True				
ANR	5566839	IdentifierDecl	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5566835	0					
ANR	5566840	IdentifierDeclType	int		5566835	0					
ANR	5566841	Identifier	vm_id		5566835	1					
ANR	5566842	AssignmentExpression	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5566835	2		=			
ANR	5566843	Identifier	vm_id		5566835	0					
ANR	5566844	CallExpression	"strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5566835	1					
ANR	5566845	Callee	strtol		5566835	0					
ANR	5566846	Identifier	strtol		5566835	0					
ANR	5566847	ArgumentList	req -> m_args . argv [ 2 ]		5566835	1					
ANR	5566848	Argument	req -> m_args . argv [ 2 ]		5566835	0					
ANR	5566849	ArrayIndexing	req -> m_args . argv [ 2 ]		5566835	0					
ANR	5566850	MemberAccess	req -> m_args . argv		5566835	0					
ANR	5566851	PtrMemberAccess	req -> m_args		5566835	0					
ANR	5566852	Identifier	req		5566835	0					
ANR	5566853	Identifier	m_args		5566835	1					
ANR	5566854	Identifier	argv		5566835	1					
ANR	5566855	PrimaryExpression	2		5566835	1					
ANR	5566856	Argument	( char * * ) NULL		5566835	1					
ANR	5566857	CastExpression	( char * * ) NULL		5566835	0					
ANR	5566858	CastTarget	char * *		5566835	0					
ANR	5566859	Identifier	NULL		5566835	1					
ANR	5566860	Argument	10		5566835	2					
ANR	5566861	PrimaryExpression	10		5566835	0					
ANR	5566862	IdentifierDeclStatement	MyString err_message ;	969:1:23271:23291	5566835	1	True				
ANR	5566863	IdentifierDecl	err_message		5566835	0					
ANR	5566864	IdentifierDeclType	MyString		5566835	0					
ANR	5566865	Identifier	err_message		5566835	1					
ANR	5566866	IdentifierDeclStatement	VMType * vm = findVM ( vm_id ) ;	970:1:23294:23320	5566835	2	True				
ANR	5566867	IdentifierDecl	* vm = findVM ( vm_id )		5566835	0					
ANR	5566868	IdentifierDeclType	VMType *		5566835	0					
ANR	5566869	Identifier	vm		5566835	1					
ANR	5566870	AssignmentExpression	* vm = findVM ( vm_id )		5566835	2		=			
ANR	5566871	Identifier	vm		5566835	0					
ANR	5566872	CallExpression	findVM ( vm_id )		5566835	1					
ANR	5566873	Callee	findVM		5566835	0					
ANR	5566874	Identifier	findVM		5566835	0					
ANR	5566875	ArgumentList	vm_id		5566835	1					
ANR	5566876	Argument	vm_id		5566835	0					
ANR	5566877	Identifier	vm_id		5566835	0					
ANR	5566878	IfStatement	if ( vm == NULL )		5566835	3					
ANR	5566879	Condition	vm == NULL	972:4:23327:23336	5566835	0	True				
ANR	5566880	EqualityExpression	vm == NULL		5566835	0		==			
ANR	5566881	Identifier	vm		5566835	0					
ANR	5566882	Identifier	NULL		5566835	1					
ANR	5566883	CompoundStatement		8:16:187:187	5566835	1					
ANR	5566884	ExpressionStatement	req -> m_has_result = true	973:2:23343:23367	5566835	0	True				
ANR	5566885	AssignmentExpression	req -> m_has_result = true		5566835	0		=			
ANR	5566886	PtrMemberAccess	req -> m_has_result		5566835	0					
ANR	5566887	Identifier	req		5566835	0					
ANR	5566888	Identifier	m_has_result		5566835	1					
ANR	5566889	Identifier	true		5566835	1					
ANR	5566890	ExpressionStatement	req -> m_is_success = false	974:2:23371:23396	5566835	1	True				
ANR	5566891	AssignmentExpression	req -> m_is_success = false		5566835	0		=			
ANR	5566892	PtrMemberAccess	req -> m_is_success		5566835	0					
ANR	5566893	Identifier	req		5566835	0					
ANR	5566894	Identifier	m_is_success		5566835	1					
ANR	5566895	Identifier	false		5566835	1					
ANR	5566896	ExpressionStatement	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND	975:2:23400:23439	5566835	2	True				
ANR	5566897	AssignmentExpression	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND		5566835	0		=			
ANR	5566898	PtrMemberAccess	req -> m_result		5566835	0					
ANR	5566899	Identifier	req		5566835	0					
ANR	5566900	Identifier	m_result		5566835	1					
ANR	5566901	Identifier	VMGAHP_ERR_VM_NOT_FOUND		5566835	1					
ANR	5566902	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeGetPid\\n"" , vm_id )"	976:2:23443:23521	5566835	3	True				
ANR	5566903	CallExpression	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeGetPid\\n"" , vm_id )"		5566835	0					
ANR	5566904	Callee	vmprintf		5566835	0					
ANR	5566905	Identifier	vmprintf		5566835	0					
ANR	5566906	ArgumentList	D_FULLDEBUG		5566835	1					
ANR	5566907	Argument	D_FULLDEBUG		5566835	0					
ANR	5566908	Identifier	D_FULLDEBUG		5566835	0					
ANR	5566909	Argument	"""VM(id=%d) is not found in executeGetPid\\n"""		5566835	1					
ANR	5566910	PrimaryExpression	"""VM(id=%d) is not found in executeGetPid\\n"""		5566835	0					
ANR	5566911	Argument	vm_id		5566835	2					
ANR	5566912	Identifier	vm_id		5566835	0					
ANR	5566913	ReturnStatement	return ;	978:2:23525:23531	5566835	4	True				
ANR	5566914	ElseStatement	else		5566835	0					
ANR	5566915	CompoundStatement		15:7:388:388	5566835	0					
ANR	5566916	ExpressionStatement	req -> m_has_result = true	980:2:23544:23568	5566835	0	True				
ANR	5566917	AssignmentExpression	req -> m_has_result = true		5566835	0		=			
ANR	5566918	PtrMemberAccess	req -> m_has_result		5566835	0					
ANR	5566919	Identifier	req		5566835	0					
ANR	5566920	Identifier	m_has_result		5566835	1					
ANR	5566921	Identifier	true		5566835	1					
ANR	5566922	ExpressionStatement	req -> m_is_success = true	981:2:23572:23596	5566835	1	True				
ANR	5566923	AssignmentExpression	req -> m_is_success = true		5566835	0		=			
ANR	5566924	PtrMemberAccess	req -> m_is_success		5566835	0					
ANR	5566925	Identifier	req		5566835	0					
ANR	5566926	Identifier	m_is_success		5566835	1					
ANR	5566927	Identifier	true		5566835	1					
ANR	5566928	ExpressionStatement	"req -> m_result = """""	984:2:23656:23674	5566835	2	True				
ANR	5566929	AssignmentExpression	"req -> m_result = """""		5566835	0		=			
ANR	5566930	PtrMemberAccess	req -> m_result		5566835	0					
ANR	5566931	Identifier	req		5566835	0					
ANR	5566932	Identifier	m_result		5566835	1					
ANR	5566933	PrimaryExpression	""""""		5566835	1					
ANR	5566934	ExpressionStatement	req -> m_result += vm -> PidOfVM ( )	985:2:23678:23708	5566835	3	True				
ANR	5566935	AssignmentExpression	req -> m_result += vm -> PidOfVM ( )		5566835	0		+=			
ANR	5566936	PtrMemberAccess	req -> m_result		5566835	0					
ANR	5566937	Identifier	req		5566835	0					
ANR	5566938	Identifier	m_result		5566835	1					
ANR	5566939	CallExpression	vm -> PidOfVM ( )		5566835	1					
ANR	5566940	Callee	vm -> PidOfVM		5566835	0					
ANR	5566941	PtrMemberAccess	vm -> PidOfVM		5566835	0					
ANR	5566942	Identifier	vm		5566835	0					
ANR	5566943	Identifier	PidOfVM		5566835	1					
ANR	5566944	ArgumentList			5566835	1					
ANR	5566945	ReturnStatement	return ;	986:2:23712:23718	5566835	4	True				
ANR	5566946	ReturnType	void		5566835	1					
ANR	5566947	Identifier	VMGahp :: executeGetpid		5566835	2					
ANR	5566948	ParameterList	VMRequest * req		5566835	3					
ANR	5566949	Parameter	VMRequest * req	964:22:23135:23148	5566835	0	True				
ANR	5566950	ParameterType	VMRequest *		5566835	0					
ANR	5566951	Identifier	req		5566835	1					
ANR	5566952	CFGEntryNode	ENTRY		5566835		True				
ANR	5566953	CFGExitNode	EXIT		5566835		True				
ANR	5566954	Symbol	NULL		5566835						
ANR	5566955	Symbol	VMGAHP_ERR_VM_NOT_FOUND		5566835						
ANR	5566956	Symbol	* req		5566835						
ANR	5566957	Symbol	false		5566835						
ANR	5566958	Symbol	D_FULLDEBUG		5566835						
ANR	5566959	Symbol	req -> m_args		5566835						
ANR	5566960	Symbol	* req -> m_args		5566835						
ANR	5566961	Symbol	err_message		5566835						
ANR	5566962	Symbol	req -> m_args . argv		5566835						
ANR	5566963	Symbol	vm_id		5566835						
ANR	5566964	Symbol	* * req		5566835						
ANR	5566965	Symbol	req -> m_result		5566835						
ANR	5566966	Symbol	strtol		5566835						
ANR	5566967	Symbol	vm -> PidOfVM		5566835						
ANR	5566968	Symbol	vm		5566835						
ANR	5566969	Symbol	true		5566835						
ANR	5566970	Symbol	findVM		5566835						
ANR	5566971	Symbol	req -> m_has_result		5566835						
ANR	5566972	Symbol	req -> m_is_success		5566835						
ANR	5566973	Symbol	* vm		5566835						
ANR	5566974	Symbol	req		5566835						
ANR	5566975	Symbol	* req -> m_args . argv		5566835						
ANR	5566976	Function	VMGahp :: executeQuit	990:0:23726:23816							
ANR	5566977	FunctionDef	VMGahp :: executeQuit ()		5566976	0					
ANR	5566978	CompoundStatement		992:0:23757:23816	5566976	0					
ANR	5566979	ExpressionStatement	m_need_output_for_quit = true	993:1:23760:23789	5566976	0	True				
ANR	5566980	AssignmentExpression	m_need_output_for_quit = true		5566976	0		=			
ANR	5566981	Identifier	m_need_output_for_quit		5566976	0					
ANR	5566982	Identifier	true		5566976	1					
ANR	5566983	ExpressionStatement	cleanUp ( )	994:1:23792:23801	5566976	1	True				
ANR	5566984	CallExpression	cleanUp ( )		5566976	0					
ANR	5566985	Callee	cleanUp		5566976	0					
ANR	5566986	Identifier	cleanUp		5566976	0					
ANR	5566987	ArgumentList			5566976	1					
ANR	5566988	ExpressionStatement	DC_Exit ( 0 )	995:1:23804:23814	5566976	2	True				
ANR	5566989	CallExpression	DC_Exit ( 0 )		5566976	0					
ANR	5566990	Callee	DC_Exit		5566976	0					
ANR	5566991	Identifier	DC_Exit		5566976	0					
ANR	5566992	ArgumentList	0		5566976	1					
ANR	5566993	Argument	0		5566976	0					
ANR	5566994	PrimaryExpression	0		5566976	0					
ANR	5566995	ReturnType	void		5566976	1					
ANR	5566996	Identifier	VMGahp :: executeQuit		5566976	2					
ANR	5566997	ParameterList			5566976	3					
ANR	5566998	CFGEntryNode	ENTRY		5566976		True				
ANR	5566999	CFGExitNode	EXIT		5566976		True				
ANR	5567000	Symbol	m_need_output_for_quit		5566976						
ANR	5567001	Symbol	true		5566976						
ANR	5567002	Function	VMGahp :: executeVersion	998:0:23819:23908							
ANR	5567003	FunctionDef	VMGahp :: executeVersion ()		5567002	0					
ANR	5567004	CompoundStatement		1000:0:23853:23908	5567002	0					
ANR	5567005	ExpressionStatement	"write_to_daemoncore_pipe ( ""S %s\\n"" , vmgahp_version )"	1001:1:23856:23906	5567002	0	True				
ANR	5567006	CallExpression	"write_to_daemoncore_pipe ( ""S %s\\n"" , vmgahp_version )"		5567002	0					
ANR	5567007	Callee	write_to_daemoncore_pipe		5567002	0					
ANR	5567008	Identifier	write_to_daemoncore_pipe		5567002	0					
ANR	5567009	ArgumentList	"""S %s\\n"""		5567002	1					
ANR	5567010	Argument	"""S %s\\n"""		5567002	0					
ANR	5567011	PrimaryExpression	"""S %s\\n"""		5567002	0					
ANR	5567012	Argument	vmgahp_version		5567002	1					
ANR	5567013	Identifier	vmgahp_version		5567002	0					
ANR	5567014	ReturnType	void		5567002	1					
ANR	5567015	Identifier	VMGahp :: executeVersion		5567002	2					
ANR	5567016	ParameterList			5567002	3					
ANR	5567017	CFGEntryNode	ENTRY		5567002		True				
ANR	5567018	CFGExitNode	EXIT		5567002		True				
ANR	5567019	Symbol	vmgahp_version		5567002						
ANR	5567020	Function	VMGahp :: executeCommands	1004:0:23911:24139							
ANR	5567021	FunctionDef	VMGahp :: executeCommands ()		5567020	0					
ANR	5567022	CompoundStatement		1006:0:23946:24139	5567020	0					
ANR	5567023	IdentifierDeclStatement	MyString result ;	1007:1:23949:23964	5567020	0	True				
ANR	5567024	IdentifierDecl	result		5567020	0					
ANR	5567025	IdentifierDeclType	MyString		5567020	0					
ANR	5567026	Identifier	result		5567020	1					
ANR	5567027	ExpressionStatement	"result += ""S"""	1008:1:23967:23980	5567020	1	True				
ANR	5567028	AssignmentExpression	"result += ""S"""		5567020	0		+=			
ANR	5567029	Identifier	result		5567020	0					
ANR	5567030	PrimaryExpression	"""S"""		5567020	1					
ANR	5567031	IdentifierDeclStatement	int i = 0 ;	1010:1:23984:23993	5567020	2	True				
ANR	5567032	IdentifierDecl	i = 0		5567020	0					
ANR	5567033	IdentifierDeclType	int		5567020	0					
ANR	5567034	Identifier	i		5567020	1					
ANR	5567035	AssignmentExpression	i = 0		5567020	2		=			
ANR	5567036	Identifier	i		5567020	0					
ANR	5567037	PrimaryExpression	0		5567020	1					
ANR	5567038	WhileStatement	while ( commands_list [ i ] != NULL )		5567020	3					
ANR	5567039	Condition	commands_list [ i ] != NULL	1011:7:24002:24025	5567020	0	True				
ANR	5567040	EqualityExpression	commands_list [ i ] != NULL		5567020	0		!=			
ANR	5567041	ArrayIndexing	commands_list [ i ]		5567020	0					
ANR	5567042	Identifier	commands_list		5567020	0					
ANR	5567043	Identifier	i		5567020	1					
ANR	5567044	Identifier	NULL		5567020	1					
ANR	5567045	CompoundStatement		6:33:81:81	5567020	1					
ANR	5567046	ExpressionStatement	"result += "" """	1012:2:24032:24045	5567020	0	True				
ANR	5567047	AssignmentExpression	"result += "" """		5567020	0		+=			
ANR	5567048	Identifier	result		5567020	0					
ANR	5567049	PrimaryExpression	""" """		5567020	1					
ANR	5567050	ExpressionStatement	result += commands_list [ i ]	1013:2:24049:24075	5567020	1	True				
ANR	5567051	AssignmentExpression	result += commands_list [ i ]		5567020	0		+=			
ANR	5567052	Identifier	result		5567020	0					
ANR	5567053	ArrayIndexing	commands_list [ i ]		5567020	1					
ANR	5567054	Identifier	commands_list		5567020	0					
ANR	5567055	Identifier	i		5567020	1					
ANR	5567056	ExpressionStatement	i ++	1014:2:24079:24082	5567020	2	True				
ANR	5567057	PostIncDecOperationExpression	i ++		5567020	0					
ANR	5567058	Identifier	i		5567020	0					
ANR	5567059	IncDec	++		5567020	1					
ANR	5567060	ExpressionStatement	"write_to_daemoncore_pipe ( ""%s\\n"" , result . Value ( ) )"	1017:1:24089:24137	5567020	4	True				
ANR	5567061	CallExpression	"write_to_daemoncore_pipe ( ""%s\\n"" , result . Value ( ) )"		5567020	0					
ANR	5567062	Callee	write_to_daemoncore_pipe		5567020	0					
ANR	5567063	Identifier	write_to_daemoncore_pipe		5567020	0					
ANR	5567064	ArgumentList	"""%s\\n"""		5567020	1					
ANR	5567065	Argument	"""%s\\n"""		5567020	0					
ANR	5567066	PrimaryExpression	"""%s\\n"""		5567020	0					
ANR	5567067	Argument	result . Value ( )		5567020	1					
ANR	5567068	CallExpression	result . Value ( )		5567020	0					
ANR	5567069	Callee	result . Value		5567020	0					
ANR	5567070	MemberAccess	result . Value		5567020	0					
ANR	5567071	Identifier	result		5567020	0					
ANR	5567072	Identifier	Value		5567020	1					
ANR	5567073	ArgumentList			5567020	1					
ANR	5567074	ReturnType	void		5567020	1					
ANR	5567075	Identifier	VMGahp :: executeCommands		5567020	2					
ANR	5567076	ParameterList			5567020	3					
ANR	5567077	CFGEntryNode	ENTRY		5567020		True				
ANR	5567078	CFGExitNode	EXIT		5567020		True				
ANR	5567079	Symbol	result		5567020						
ANR	5567080	Symbol	* i		5567020						
ANR	5567081	Symbol	NULL		5567020						
ANR	5567082	Symbol	result . Value		5567020						
ANR	5567083	Symbol	commands_list		5567020						
ANR	5567084	Symbol	* commands_list		5567020						
ANR	5567085	Symbol	i		5567020						
ANR	5567086	Function	VMGahp :: executeSupportVMS	1020:0:24142:24444							
ANR	5567087	FunctionDef	VMGahp :: executeSupportVMS ()		5567086	0					
ANR	5567088	CompoundStatement		1022:0:24179:24444	5567086	0					
ANR	5567089	IdentifierDeclStatement	MyString result ;	1023:1:24182:24197	5567086	0	True				
ANR	5567090	IdentifierDecl	result		5567086	0					
ANR	5567091	IdentifierDeclType	MyString		5567086	0					
ANR	5567092	Identifier	result		5567086	1					
ANR	5567093	ExpressionStatement	"result += ""S"""	1024:1:24200:24213	5567086	1	True				
ANR	5567094	AssignmentExpression	"result += ""S"""		5567086	0		+=			
ANR	5567095	Identifier	result		5567086	0					
ANR	5567096	PrimaryExpression	"""S"""		5567086	1					
ANR	5567097	IdentifierDeclStatement	int i = 0 ;	1026:1:24217:24226	5567086	2	True				
ANR	5567098	IdentifierDecl	i = 0		5567086	0					
ANR	5567099	IdentifierDeclType	int		5567086	0					
ANR	5567100	Identifier	i		5567086	1					
ANR	5567101	AssignmentExpression	i = 0		5567086	2		=			
ANR	5567102	Identifier	i		5567086	0					
ANR	5567103	PrimaryExpression	0		5567086	1					
ANR	5567104	WhileStatement	while ( support_vms_list [ i ] != NULL )		5567086	3					
ANR	5567105	Condition	support_vms_list [ i ] != NULL	1027:7:24235:24261	5567086	0	True				
ANR	5567106	EqualityExpression	support_vms_list [ i ] != NULL		5567086	0		!=			
ANR	5567107	ArrayIndexing	support_vms_list [ i ]		5567086	0					
ANR	5567108	Identifier	support_vms_list		5567086	0					
ANR	5567109	Identifier	i		5567086	1					
ANR	5567110	Identifier	NULL		5567086	1					
ANR	5567111	CompoundStatement		6:36:84:84	5567086	1					
ANR	5567112	ExpressionStatement	"result += "" """	1028:2:24268:24281	5567086	0	True				
ANR	5567113	AssignmentExpression	"result += "" """		5567086	0		+=			
ANR	5567114	Identifier	result		5567086	0					
ANR	5567115	PrimaryExpression	""" """		5567086	1					
ANR	5567116	ExpressionStatement	result += support_vms_list [ i ]	1029:2:24285:24314	5567086	1	True				
ANR	5567117	AssignmentExpression	result += support_vms_list [ i ]		5567086	0		+=			
ANR	5567118	Identifier	result		5567086	0					
ANR	5567119	ArrayIndexing	support_vms_list [ i ]		5567086	1					
ANR	5567120	Identifier	support_vms_list		5567086	0					
ANR	5567121	Identifier	i		5567086	1					
ANR	5567122	ExpressionStatement	i ++	1030:2:24318:24321	5567086	2	True				
ANR	5567123	PostIncDecOperationExpression	i ++		5567086	0					
ANR	5567124	Identifier	i		5567086	0					
ANR	5567125	IncDec	++		5567086	1					
ANR	5567126	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""Execute commands: %s\\n"" , result . Value ( ) )"	1033:1:24328:24391	5567086	4	True				
ANR	5567127	CallExpression	"vmprintf ( D_FULLDEBUG , ""Execute commands: %s\\n"" , result . Value ( ) )"		5567086	0					
ANR	5567128	Callee	vmprintf		5567086	0					
ANR	5567129	Identifier	vmprintf		5567086	0					
ANR	5567130	ArgumentList	D_FULLDEBUG		5567086	1					
ANR	5567131	Argument	D_FULLDEBUG		5567086	0					
ANR	5567132	Identifier	D_FULLDEBUG		5567086	0					
ANR	5567133	Argument	"""Execute commands: %s\\n"""		5567086	1					
ANR	5567134	PrimaryExpression	"""Execute commands: %s\\n"""		5567086	0					
ANR	5567135	Argument	result . Value ( )		5567086	2					
ANR	5567136	CallExpression	result . Value ( )		5567086	0					
ANR	5567137	Callee	result . Value		5567086	0					
ANR	5567138	MemberAccess	result . Value		5567086	0					
ANR	5567139	Identifier	result		5567086	0					
ANR	5567140	Identifier	Value		5567086	1					
ANR	5567141	ArgumentList			5567086	1					
ANR	5567142	ExpressionStatement	"write_to_daemoncore_pipe ( ""%s\\n"" , result . Value ( ) )"	1034:1:24394:24442	5567086	5	True				
ANR	5567143	CallExpression	"write_to_daemoncore_pipe ( ""%s\\n"" , result . Value ( ) )"		5567086	0					
ANR	5567144	Callee	write_to_daemoncore_pipe		5567086	0					
ANR	5567145	Identifier	write_to_daemoncore_pipe		5567086	0					
ANR	5567146	ArgumentList	"""%s\\n"""		5567086	1					
ANR	5567147	Argument	"""%s\\n"""		5567086	0					
ANR	5567148	PrimaryExpression	"""%s\\n"""		5567086	0					
ANR	5567149	Argument	result . Value ( )		5567086	1					
ANR	5567150	CallExpression	result . Value ( )		5567086	0					
ANR	5567151	Callee	result . Value		5567086	0					
ANR	5567152	MemberAccess	result . Value		5567086	0					
ANR	5567153	Identifier	result		5567086	0					
ANR	5567154	Identifier	Value		5567086	1					
ANR	5567155	ArgumentList			5567086	1					
ANR	5567156	ReturnType	void		5567086	1					
ANR	5567157	Identifier	VMGahp :: executeSupportVMS		5567086	2					
ANR	5567158	ParameterList			5567086	3					
ANR	5567159	CFGEntryNode	ENTRY		5567086		True				
ANR	5567160	CFGExitNode	EXIT		5567086		True				
ANR	5567161	Symbol	result		5567086						
ANR	5567162	Symbol	support_vms_list		5567086						
ANR	5567163	Symbol	* i		5567086						
ANR	5567164	Symbol	NULL		5567086						
ANR	5567165	Symbol	result . Value		5567086						
ANR	5567166	Symbol	i		5567086						
ANR	5567167	Symbol	D_FULLDEBUG		5567086						
ANR	5567168	Symbol	* support_vms_list		5567086						
ANR	5567169	Function	VMGahp :: executeResults	1037:0:24447:24630							
ANR	5567170	FunctionDef	VMGahp :: executeResults ()		5567169	0					
ANR	5567171	CompoundStatement		1039:0:24481:24630	5567169	0					
ANR	5567172	ExpressionStatement	"write_to_daemoncore_pipe ( ""S %d\\n"" , numOfReqWithResult ( ) )"	1040:1:24484:24540	5567169	0	True				
ANR	5567173	CallExpression	"write_to_daemoncore_pipe ( ""S %d\\n"" , numOfReqWithResult ( ) )"		5567169	0					
ANR	5567174	Callee	write_to_daemoncore_pipe		5567169	0					
ANR	5567175	Identifier	write_to_daemoncore_pipe		5567169	0					
ANR	5567176	ArgumentList	"""S %d\\n"""		5567169	1					
ANR	5567177	Argument	"""S %d\\n"""		5567169	0					
ANR	5567178	PrimaryExpression	"""S %d\\n"""		5567169	0					
ANR	5567179	Argument	numOfReqWithResult ( )		5567169	1					
ANR	5567180	CallExpression	numOfReqWithResult ( )		5567169	0					
ANR	5567181	Callee	numOfReqWithResult		5567169	0					
ANR	5567182	Identifier	numOfReqWithResult		5567169	0					
ANR	5567183	ArgumentList			5567169	1					
ANR	5567184	ExpressionStatement	printAllReqsWithResult ( )	1043:1:24571:24595	5567169	1	True				
ANR	5567185	CallExpression	printAllReqsWithResult ( )		5567169	0					
ANR	5567186	Callee	printAllReqsWithResult		5567169	0					
ANR	5567187	Identifier	printAllReqsWithResult		5567169	0					
ANR	5567188	ArgumentList			5567169	1					
ANR	5567189	ExpressionStatement	m_new_results_signaled = false	1044:1:24598:24628	5567169	2	True				
ANR	5567190	AssignmentExpression	m_new_results_signaled = false		5567169	0		=			
ANR	5567191	Identifier	m_new_results_signaled		5567169	0					
ANR	5567192	Identifier	false		5567169	1					
ANR	5567193	ReturnType	void		5567169	1					
ANR	5567194	Identifier	VMGahp :: executeResults		5567169	2					
ANR	5567195	ParameterList			5567169	3					
ANR	5567196	CFGEntryNode	ENTRY		5567169		True				
ANR	5567197	CFGExitNode	EXIT		5567169		True				
ANR	5567198	Symbol	m_new_results_signaled		5567169						
ANR	5567199	Symbol	numOfReqWithResult		5567169						
ANR	5567200	Symbol	false		5567169						
ANR	5567201	Function	VMGahp :: make_result_line	1047:0:24633:25276							
ANR	5567202	FunctionDef	VMGahp :: make_result_line (VMRequest * req)		5567201	0					
ANR	5567203	CompoundStatement		1049:0:24686:25276	5567201	0					
ANR	5567204	Statement	static	1050:1:24689:24694	5567201	0	True				
ANR	5567205	IdentifierDeclStatement	MyString res_str ;	1050:8:24696:24712	5567201	1	True				
ANR	5567206	IdentifierDecl	res_str		5567201	0					
ANR	5567207	IdentifierDeclType	MyString		5567201	0					
ANR	5567208	Identifier	res_str		5567201	1					
ANR	5567209	ExpressionStatement	"res_str = """""	1051:1:24715:24727	5567201	2	True				
ANR	5567210	AssignmentExpression	"res_str = """""		5567201	0		=			
ANR	5567211	Identifier	res_str		5567201	0					
ANR	5567212	PrimaryExpression	""""""		5567201	1					
ANR	5567213	IfStatement	if ( req -> m_is_success )		5567201	3					
ANR	5567214	Condition	req -> m_is_success	1053:4:24734:24750	5567201	0	True				
ANR	5567215	PtrMemberAccess	req -> m_is_success		5567201	0					
ANR	5567216	Identifier	req		5567201	0					
ANR	5567217	Identifier	m_is_success		5567201	1					
ANR	5567218	CompoundStatement		5:23:66:66	5567201	1					
ANR	5567219	ExpressionStatement	res_str += req -> m_reqid	1056:2:24810:24833	5567201	0	True				
ANR	5567220	AssignmentExpression	res_str += req -> m_reqid		5567201	0		+=			
ANR	5567221	Identifier	res_str		5567201	0					
ANR	5567222	PtrMemberAccess	req -> m_reqid		5567201	1					
ANR	5567223	Identifier	req		5567201	0					
ANR	5567224	Identifier	m_reqid		5567201	1					
ANR	5567225	ExpressionStatement	"res_str += "" """	1057:2:24837:24851	5567201	1	True				
ANR	5567226	AssignmentExpression	"res_str += "" """		5567201	0		+=			
ANR	5567227	Identifier	res_str		5567201	0					
ANR	5567228	PrimaryExpression	""" """		5567201	1					
ANR	5567229	ExpressionStatement	res_str += 0	1058:2:24855:24867	5567201	2	True				
ANR	5567230	AssignmentExpression	res_str += 0		5567201	0		+=			
ANR	5567231	Identifier	res_str		5567201	0					
ANR	5567232	PrimaryExpression	0		5567201	1					
ANR	5567233	ExpressionStatement	"res_str += "" """	1059:2:24871:24885	5567201	3	True				
ANR	5567234	AssignmentExpression	"res_str += "" """		5567201	0		+=			
ANR	5567235	Identifier	res_str		5567201	0					
ANR	5567236	PrimaryExpression	""" """		5567201	1					
ANR	5567237	IfStatement	if ( req -> m_result . Length ( ) == 0 )		5567201	4					
ANR	5567238	Condition	req -> m_result . Length ( ) == 0	1060:6:24893:24919	5567201	0	True				
ANR	5567239	EqualityExpression	req -> m_result . Length ( ) == 0		5567201	0		==			
ANR	5567240	CallExpression	req -> m_result . Length ( )		5567201	0					
ANR	5567241	Callee	req -> m_result . Length		5567201	0					
ANR	5567242	MemberAccess	req -> m_result . Length		5567201	0					
ANR	5567243	PtrMemberAccess	req -> m_result		5567201	0					
ANR	5567244	Identifier	req		5567201	0					
ANR	5567245	Identifier	m_result		5567201	1					
ANR	5567246	Identifier	Length		5567201	1					
ANR	5567247	ArgumentList			5567201	1					
ANR	5567248	PrimaryExpression	0		5567201	1					
ANR	5567249	CompoundStatement		12:35:235:235	5567201	1					
ANR	5567250	ExpressionStatement	"res_str += ""NULL"""	1061:3:24927:24944	5567201	0	True				
ANR	5567251	AssignmentExpression	"res_str += ""NULL"""		5567201	0		+=			
ANR	5567252	Identifier	res_str		5567201	0					
ANR	5567253	PrimaryExpression	"""NULL"""		5567201	1					
ANR	5567254	ElseStatement	else		5567201	0					
ANR	5567255	CompoundStatement		14:9:268:268	5567201	0					
ANR	5567256	ExpressionStatement	res_str += req -> m_result . Value ( )	1063:3:24960:24992	5567201	0	True				
ANR	5567257	AssignmentExpression	res_str += req -> m_result . Value ( )		5567201	0		+=			
ANR	5567258	Identifier	res_str		5567201	0					
ANR	5567259	CallExpression	req -> m_result . Value ( )		5567201	1					
ANR	5567260	Callee	req -> m_result . Value		5567201	0					
ANR	5567261	MemberAccess	req -> m_result . Value		5567201	0					
ANR	5567262	PtrMemberAccess	req -> m_result		5567201	0					
ANR	5567263	Identifier	req		5567201	0					
ANR	5567264	Identifier	m_result		5567201	1					
ANR	5567265	Identifier	Value		5567201	1					
ANR	5567266	ArgumentList			5567201	1					
ANR	5567267	ElseStatement	else		5567201	0					
ANR	5567268	CompoundStatement		17:7:318:318	5567201	0					
ANR	5567269	ExpressionStatement	res_str += req -> m_reqid	1068:2:25060:25083	5567201	0	True				
ANR	5567270	AssignmentExpression	res_str += req -> m_reqid		5567201	0		+=			
ANR	5567271	Identifier	res_str		5567201	0					
ANR	5567272	PtrMemberAccess	req -> m_reqid		5567201	1					
ANR	5567273	Identifier	req		5567201	0					
ANR	5567274	Identifier	m_reqid		5567201	1					
ANR	5567275	ExpressionStatement	"res_str += "" """	1069:2:25087:25101	5567201	1	True				
ANR	5567276	AssignmentExpression	"res_str += "" """		5567201	0		+=			
ANR	5567277	Identifier	res_str		5567201	0					
ANR	5567278	PrimaryExpression	""" """		5567201	1					
ANR	5567279	ExpressionStatement	res_str += 1	1070:2:25105:25117	5567201	2	True				
ANR	5567280	AssignmentExpression	res_str += 1		5567201	0		+=			
ANR	5567281	Identifier	res_str		5567201	0					
ANR	5567282	PrimaryExpression	1		5567201	1					
ANR	5567283	ExpressionStatement	"res_str += "" """	1071:2:25121:25135	5567201	3	True				
ANR	5567284	AssignmentExpression	"res_str += "" """		5567201	0		+=			
ANR	5567285	Identifier	res_str		5567201	0					
ANR	5567286	PrimaryExpression	""" """		5567201	1					
ANR	5567287	IfStatement	if ( req -> m_result . Length ( ) == 0 )		5567201	4					
ANR	5567288	Condition	req -> m_result . Length ( ) == 0	1072:6:25143:25169	5567201	0	True				
ANR	5567289	EqualityExpression	req -> m_result . Length ( ) == 0		5567201	0		==			
ANR	5567290	CallExpression	req -> m_result . Length ( )		5567201	0					
ANR	5567291	Callee	req -> m_result . Length		5567201	0					
ANR	5567292	MemberAccess	req -> m_result . Length		5567201	0					
ANR	5567293	PtrMemberAccess	req -> m_result		5567201	0					
ANR	5567294	Identifier	req		5567201	0					
ANR	5567295	Identifier	m_result		5567201	1					
ANR	5567296	Identifier	Length		5567201	1					
ANR	5567297	ArgumentList			5567201	1					
ANR	5567298	PrimaryExpression	0		5567201	1					
ANR	5567299	CompoundStatement		24:35:485:485	5567201	1					
ANR	5567300	ExpressionStatement	"res_str += ""NULL"""	1073:3:25177:25194	5567201	0	True				
ANR	5567301	AssignmentExpression	"res_str += ""NULL"""		5567201	0		+=			
ANR	5567302	Identifier	res_str		5567201	0					
ANR	5567303	PrimaryExpression	"""NULL"""		5567201	1					
ANR	5567304	ElseStatement	else		5567201	0					
ANR	5567305	CompoundStatement		26:9:518:518	5567201	0					
ANR	5567306	ExpressionStatement	res_str += req -> m_result . Value ( )	1075:3:25210:25242	5567201	0	True				
ANR	5567307	AssignmentExpression	res_str += req -> m_result . Value ( )		5567201	0		+=			
ANR	5567308	Identifier	res_str		5567201	0					
ANR	5567309	CallExpression	req -> m_result . Value ( )		5567201	1					
ANR	5567310	Callee	req -> m_result . Value		5567201	0					
ANR	5567311	MemberAccess	req -> m_result . Value		5567201	0					
ANR	5567312	PtrMemberAccess	req -> m_result		5567201	0					
ANR	5567313	Identifier	req		5567201	0					
ANR	5567314	Identifier	m_result		5567201	1					
ANR	5567315	Identifier	Value		5567201	1					
ANR	5567316	ArgumentList			5567201	1					
ANR	5567317	ReturnStatement	return res_str . Value ( ) ;	1078:1:25252:25274	5567201	4	True				
ANR	5567318	CallExpression	res_str . Value ( )		5567201	0					
ANR	5567319	Callee	res_str . Value		5567201	0					
ANR	5567320	MemberAccess	res_str . Value		5567201	0					
ANR	5567321	Identifier	res_str		5567201	0					
ANR	5567322	Identifier	Value		5567201	1					
ANR	5567323	ArgumentList			5567201	1					
ANR	5567324	ReturnType	const char *		5567201	1					
ANR	5567325	Identifier	VMGahp :: make_result_line		5567201	2					
ANR	5567326	ParameterList	VMRequest * req		5567201	3					
ANR	5567327	Parameter	VMRequest * req	1048:25:24670:24683	5567201	0	True				
ANR	5567328	ParameterType	VMRequest *		5567201	0					
ANR	5567329	Identifier	req		5567201	1					
ANR	5567330	CFGEntryNode	ENTRY		5567201		True				
ANR	5567331	CFGExitNode	EXIT		5567201		True				
ANR	5567332	Symbol	res_str		5567201						
ANR	5567333	Symbol	req -> m_result		5567201						
ANR	5567334	Symbol	res_str . Value		5567201						
ANR	5567335	Symbol	* req		5567201						
ANR	5567336	Symbol	req -> m_result . Length		5567201						
ANR	5567337	Symbol	req -> m_result . Value		5567201						
ANR	5567338	Symbol	req -> m_reqid		5567201						
ANR	5567339	Symbol	req -> m_is_success		5567201						
ANR	5567340	Symbol	req		5567201						
ANR	5567341	Function	VMGahp :: quitFast	1081:0:25279:25343							
ANR	5567342	FunctionDef	VMGahp :: quitFast ()		5567341	0					
ANR	5567343	CompoundStatement		1083:0:25302:25343	5567341	0					
ANR	5567344	ExpressionStatement	cleanUp ( )	1084:1:25305:25314	5567341	0	True				
ANR	5567345	CallExpression	cleanUp ( )		5567341	0					
ANR	5567346	Callee	cleanUp		5567341	0					
ANR	5567347	Identifier	cleanUp		5567341	0					
ANR	5567348	ArgumentList			5567341	1					
ANR	5567349	ExpressionStatement	DC_Exit ( 0 )	1085:1:25317:25327	5567341	1	True				
ANR	5567350	CallExpression	DC_Exit ( 0 )		5567341	0					
ANR	5567351	Callee	DC_Exit		5567341	0					
ANR	5567352	Identifier	DC_Exit		5567341	0					
ANR	5567353	ArgumentList	0		5567341	1					
ANR	5567354	Argument	0		5567341	0					
ANR	5567355	PrimaryExpression	0		5567341	0					
ANR	5567356	ReturnStatement	return TRUE ;	1086:1:25330:25341	5567341	2	True				
ANR	5567357	Identifier	TRUE		5567341	0					
ANR	5567358	ReturnType	int		5567341	1					
ANR	5567359	Identifier	VMGahp :: quitFast		5567341	2					
ANR	5567360	ParameterList			5567341	3					
ANR	5567361	CFGEntryNode	ENTRY		5567341		True				
ANR	5567362	CFGExitNode	EXIT		5567341		True				
ANR	5567363	Symbol	TRUE		5567341						
ANR	5567364	Function	VMGahp :: killAllProcess	1089:0:25346:26685							
ANR	5567365	FunctionDef	VMGahp :: killAllProcess ()		5567364	0					
ANR	5567366	CompoundStatement		1091:0:25376:26685	5567364	0					
ANR	5567367	IfStatement	if ( ! m_jobAd )		5567364	0					
ANR	5567368	Condition	! m_jobAd	1092:5:25383:25390	5567364	0	True				
ANR	5567369	UnaryOperationExpression	! m_jobAd		5567364	0					
ANR	5567370	UnaryOperator	!		5567364	0					
ANR	5567371	Identifier	m_jobAd		5567364	1					
ANR	5567372	CompoundStatement		2:16:17:17	5567364	1					
ANR	5567373	ReturnStatement	return ;	1094:2:25446:25452	5567364	0	True				
ANR	5567374	IfStatement	"if ( strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_XEN ) == 0 )"		5567364	1					
ANR	5567375	Condition	"strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_XEN ) == 0"	1098:5:25519:25596	5567364	0	True				
ANR	5567376	EqualityExpression	"strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_XEN ) == 0"		5567364	0		==			
ANR	5567377	CallExpression	"strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_XEN )"		5567364	0					
ANR	5567378	Callee	strcasecmp		5567364	0					
ANR	5567379	Identifier	strcasecmp		5567364	0					
ANR	5567380	ArgumentList	m_gahp_config -> m_vm_type . Value ( )		5567364	1					
ANR	5567381	Argument	m_gahp_config -> m_vm_type . Value ( )		5567364	0					
ANR	5567382	CallExpression	m_gahp_config -> m_vm_type . Value ( )		5567364	0					
ANR	5567383	Callee	m_gahp_config -> m_vm_type . Value		5567364	0					
ANR	5567384	MemberAccess	m_gahp_config -> m_vm_type . Value		5567364	0					
ANR	5567385	PtrMemberAccess	m_gahp_config -> m_vm_type		5567364	0					
ANR	5567386	Identifier	m_gahp_config		5567364	0					
ANR	5567387	Identifier	m_vm_type		5567364	1					
ANR	5567388	Identifier	Value		5567364	1					
ANR	5567389	ArgumentList			5567364	1					
ANR	5567390	Argument	CONDOR_VM_UNIVERSE_XEN		5567364	1					
ANR	5567391	Identifier	CONDOR_VM_UNIVERSE_XEN		5567364	0					
ANR	5567392	PrimaryExpression	0		5567364	1					
ANR	5567393	CompoundStatement		10:2:227:260	5567364	1					
ANR	5567394	IdentifierDeclStatement	priv_state priv = set_root_priv ( ) ;	1100:2:25604:25637	5567364	0	True				
ANR	5567395	IdentifierDecl	priv = set_root_priv ( )		5567364	0					
ANR	5567396	IdentifierDeclType	priv_state		5567364	0					
ANR	5567397	Identifier	priv		5567364	1					
ANR	5567398	AssignmentExpression	priv = set_root_priv ( )		5567364	2		=			
ANR	5567399	Identifier	priv		5567364	0					
ANR	5567400	CallExpression	set_root_priv ( )		5567364	1					
ANR	5567401	Callee	set_root_priv		5567364	0					
ANR	5567402	Identifier	set_root_priv		5567364	0					
ANR	5567403	ArgumentList			5567364	1					
ANR	5567404	IfStatement	if ( m_jobAd && XenType :: checkXenParams ( m_gahp_config ) )		5567364	1					
ANR	5567405	Condition	m_jobAd && XenType :: checkXenParams ( m_gahp_config )	1101:6:25645:25693	5567364	0	True				
ANR	5567406	AndExpression	m_jobAd && XenType :: checkXenParams ( m_gahp_config )		5567364	0		&&			
ANR	5567407	Identifier	m_jobAd		5567364	0					
ANR	5567408	CallExpression	XenType :: checkXenParams ( m_gahp_config )		5567364	1					
ANR	5567409	Callee	XenType :: checkXenParams		5567364	0					
ANR	5567410	Identifier	XenType :: checkXenParams		5567364	0					
ANR	5567411	ArgumentList	m_gahp_config		5567364	1					
ANR	5567412	Argument	m_gahp_config		5567364	0					
ANR	5567413	Identifier	m_gahp_config		5567364	0					
ANR	5567414	CompoundStatement		12:3:325:340	5567364	1					
ANR	5567415	IdentifierDeclStatement	MyString vmname ;	1102:3:25702:25717	5567364	0	True				
ANR	5567416	IdentifierDecl	vmname		5567364	0					
ANR	5567417	IdentifierDeclType	MyString		5567364	0					
ANR	5567418	Identifier	vmname		5567364	1					
ANR	5567419	IfStatement	"if ( VMType :: createVMName ( m_jobAd , vmname ) )"		5567364	1					
ANR	5567420	Condition	"VMType :: createVMName ( m_jobAd , vmname )"	1103:7:25726:25762	5567364	0	True				
ANR	5567421	CallExpression	"VMType :: createVMName ( m_jobAd , vmname )"		5567364	0					
ANR	5567422	Callee	VMType :: createVMName		5567364	0					
ANR	5567423	Identifier	VMType :: createVMName		5567364	0					
ANR	5567424	ArgumentList	m_jobAd		5567364	1					
ANR	5567425	Argument	m_jobAd		5567364	0					
ANR	5567426	Identifier	m_jobAd		5567364	0					
ANR	5567427	Argument	vmname		5567364	1					
ANR	5567428	Identifier	vmname		5567364	0					
ANR	5567429	CompoundStatement		13:47:389:389	5567364	1					
ANR	5567430	ExpressionStatement	XenType :: killVMFast ( vmname . Value ( ) )	1104:4:25772:25807	5567364	0	True				
ANR	5567431	CallExpression	XenType :: killVMFast ( vmname . Value ( ) )		5567364	0					
ANR	5567432	Callee	XenType :: killVMFast		5567364	0					
ANR	5567433	Identifier	XenType :: killVMFast		5567364	0					
ANR	5567434	ArgumentList	vmname . Value ( )		5567364	1					
ANR	5567435	Argument	vmname . Value ( )		5567364	0					
ANR	5567436	CallExpression	vmname . Value ( )		5567364	0					
ANR	5567437	Callee	vmname . Value		5567364	0					
ANR	5567438	MemberAccess	vmname . Value		5567364	0					
ANR	5567439	Identifier	vmname		5567364	0					
ANR	5567440	Identifier	Value		5567364	1					
ANR	5567441	ArgumentList			5567364	1					
ANR	5567442	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""killVMFast is called\\n"" )"	1105:4:25813:25861	5567364	1	True				
ANR	5567443	CallExpression	"vmprintf ( D_FULLDEBUG , ""killVMFast is called\\n"" )"		5567364	0					
ANR	5567444	Callee	vmprintf		5567364	0					
ANR	5567445	Identifier	vmprintf		5567364	0					
ANR	5567446	ArgumentList	D_FULLDEBUG		5567364	1					
ANR	5567447	Argument	D_FULLDEBUG		5567364	0					
ANR	5567448	Identifier	D_FULLDEBUG		5567364	0					
ANR	5567449	Argument	"""killVMFast is called\\n"""		5567364	1					
ANR	5567450	PrimaryExpression	"""killVMFast is called\\n"""		5567364	0					
ANR	5567451	ExpressionStatement	set_priv ( priv )	1108:2:25874:25888	5567364	2	True				
ANR	5567452	CallExpression	set_priv ( priv )		5567364	0					
ANR	5567453	Callee	set_priv		5567364	0					
ANR	5567454	Identifier	set_priv		5567364	0					
ANR	5567455	ArgumentList	priv		5567364	1					
ANR	5567456	Argument	priv		5567364	0					
ANR	5567457	Identifier	priv		5567364	0					
ANR	5567458	ElseStatement	else		5567364	0					
ANR	5567459	IfStatement	"if ( strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_KVM ) == 0 )"		5567364	0					
ANR	5567460	Condition	"strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_KVM ) == 0"	1109:11:25901:25982	5567364	0	True				
ANR	5567461	EqualityExpression	"strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_KVM ) == 0"		5567364	0		==			
ANR	5567462	CallExpression	"strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_KVM )"		5567364	0					
ANR	5567463	Callee	strcasecmp		5567364	0					
ANR	5567464	Identifier	strcasecmp		5567364	0					
ANR	5567465	ArgumentList	m_gahp_config -> m_vm_type . Value ( )		5567364	1					
ANR	5567466	Argument	m_gahp_config -> m_vm_type . Value ( )		5567364	0					
ANR	5567467	CallExpression	m_gahp_config -> m_vm_type . Value ( )		5567364	0					
ANR	5567468	Callee	m_gahp_config -> m_vm_type . Value		5567364	0					
ANR	5567469	MemberAccess	m_gahp_config -> m_vm_type . Value		5567364	0					
ANR	5567470	PtrMemberAccess	m_gahp_config -> m_vm_type		5567364	0					
ANR	5567471	Identifier	m_gahp_config		5567364	0					
ANR	5567472	Identifier	m_vm_type		5567364	1					
ANR	5567473	Identifier	Value		5567364	1					
ANR	5567474	ArgumentList			5567364	1					
ANR	5567475	Argument	CONDOR_VM_UNIVERSE_KVM		5567364	1					
ANR	5567476	Identifier	CONDOR_VM_UNIVERSE_KVM		5567364	0					
ANR	5567477	PrimaryExpression	0		5567364	1					
ANR	5567478	CompoundStatement		21:2:613:646	5567364	1					
ANR	5567479	IdentifierDeclStatement	priv_state priv = set_root_priv ( ) ;	1111:2:25990:26023	5567364	0	True				
ANR	5567480	IdentifierDecl	priv = set_root_priv ( )		5567364	0					
ANR	5567481	IdentifierDeclType	priv_state		5567364	0					
ANR	5567482	Identifier	priv		5567364	1					
ANR	5567483	AssignmentExpression	priv = set_root_priv ( )		5567364	2		=			
ANR	5567484	Identifier	priv		5567364	0					
ANR	5567485	CallExpression	set_root_priv ( )		5567364	1					
ANR	5567486	Callee	set_root_priv		5567364	0					
ANR	5567487	Identifier	set_root_priv		5567364	0					
ANR	5567488	ArgumentList			5567364	1					
ANR	5567489	IfStatement	if ( m_jobAd && KVMType :: checkXenParams ( m_gahp_config ) )		5567364	1					
ANR	5567490	Condition	m_jobAd && KVMType :: checkXenParams ( m_gahp_config )	1112:6:26031:26079	5567364	0	True				
ANR	5567491	AndExpression	m_jobAd && KVMType :: checkXenParams ( m_gahp_config )		5567364	0		&&			
ANR	5567492	Identifier	m_jobAd		5567364	0					
ANR	5567493	CallExpression	KVMType :: checkXenParams ( m_gahp_config )		5567364	1					
ANR	5567494	Callee	KVMType :: checkXenParams		5567364	0					
ANR	5567495	Identifier	KVMType :: checkXenParams		5567364	0					
ANR	5567496	ArgumentList	m_gahp_config		5567364	1					
ANR	5567497	Argument	m_gahp_config		5567364	0					
ANR	5567498	Identifier	m_gahp_config		5567364	0					
ANR	5567499	CompoundStatement		23:3:711:726	5567364	1					
ANR	5567500	IdentifierDeclStatement	MyString vmname ;	1113:3:26088:26103	5567364	0	True				
ANR	5567501	IdentifierDecl	vmname		5567364	0					
ANR	5567502	IdentifierDeclType	MyString		5567364	0					
ANR	5567503	Identifier	vmname		5567364	1					
ANR	5567504	IfStatement	"if ( VMType :: createVMName ( m_jobAd , vmname ) )"		5567364	1					
ANR	5567505	Condition	"VMType :: createVMName ( m_jobAd , vmname )"	1114:7:26112:26148	5567364	0	True				
ANR	5567506	CallExpression	"VMType :: createVMName ( m_jobAd , vmname )"		5567364	0					
ANR	5567507	Callee	VMType :: createVMName		5567364	0					
ANR	5567508	Identifier	VMType :: createVMName		5567364	0					
ANR	5567509	ArgumentList	m_jobAd		5567364	1					
ANR	5567510	Argument	m_jobAd		5567364	0					
ANR	5567511	Identifier	m_jobAd		5567364	0					
ANR	5567512	Argument	vmname		5567364	1					
ANR	5567513	Identifier	vmname		5567364	0					
ANR	5567514	CompoundStatement		24:47:775:775	5567364	1					
ANR	5567515	ExpressionStatement	KVMType :: killVMFast ( vmname . Value ( ) )	1115:4:26158:26193	5567364	0	True				
ANR	5567516	CallExpression	KVMType :: killVMFast ( vmname . Value ( ) )		5567364	0					
ANR	5567517	Callee	KVMType :: killVMFast		5567364	0					
ANR	5567518	Identifier	KVMType :: killVMFast		5567364	0					
ANR	5567519	ArgumentList	vmname . Value ( )		5567364	1					
ANR	5567520	Argument	vmname . Value ( )		5567364	0					
ANR	5567521	CallExpression	vmname . Value ( )		5567364	0					
ANR	5567522	Callee	vmname . Value		5567364	0					
ANR	5567523	MemberAccess	vmname . Value		5567364	0					
ANR	5567524	Identifier	vmname		5567364	0					
ANR	5567525	Identifier	Value		5567364	1					
ANR	5567526	ArgumentList			5567364	1					
ANR	5567527	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""killVMFast is called\\n"" )"	1116:4:26199:26247	5567364	1	True				
ANR	5567528	CallExpression	"vmprintf ( D_FULLDEBUG , ""killVMFast is called\\n"" )"		5567364	0					
ANR	5567529	Callee	vmprintf		5567364	0					
ANR	5567530	Identifier	vmprintf		5567364	0					
ANR	5567531	ArgumentList	D_FULLDEBUG		5567364	1					
ANR	5567532	Argument	D_FULLDEBUG		5567364	0					
ANR	5567533	Identifier	D_FULLDEBUG		5567364	0					
ANR	5567534	Argument	"""killVMFast is called\\n"""		5567364	1					
ANR	5567535	PrimaryExpression	"""killVMFast is called\\n"""		5567364	0					
ANR	5567536	ExpressionStatement	set_priv ( priv )	1119:2:26260:26274	5567364	2	True				
ANR	5567537	CallExpression	set_priv ( priv )		5567364	0					
ANR	5567538	Callee	set_priv		5567364	0					
ANR	5567539	Identifier	set_priv		5567364	0					
ANR	5567540	ArgumentList	priv		5567364	1					
ANR	5567541	Argument	priv		5567364	0					
ANR	5567542	Identifier	priv		5567364	0					
ANR	5567543	ElseStatement	else		5567364	0					
ANR	5567544	IfStatement	"if ( strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE ) == 0 )"		5567364	0					
ANR	5567545	Condition	"strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE ) == 0"	1123:5:26297:26377	5567364	0	True				
ANR	5567546	EqualityExpression	"strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE ) == 0"		5567364	0		==			
ANR	5567547	CallExpression	"strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE )"		5567364	0					
ANR	5567548	Callee	strcasecmp		5567364	0					
ANR	5567549	Identifier	strcasecmp		5567364	0					
ANR	5567550	ArgumentList	m_gahp_config -> m_vm_type . Value ( )		5567364	1					
ANR	5567551	Argument	m_gahp_config -> m_vm_type . Value ( )		5567364	0					
ANR	5567552	CallExpression	m_gahp_config -> m_vm_type . Value ( )		5567364	0					
ANR	5567553	Callee	m_gahp_config -> m_vm_type . Value		5567364	0					
ANR	5567554	MemberAccess	m_gahp_config -> m_vm_type . Value		5567364	0					
ANR	5567555	PtrMemberAccess	m_gahp_config -> m_vm_type		5567364	0					
ANR	5567556	Identifier	m_gahp_config		5567364	0					
ANR	5567557	Identifier	m_vm_type		5567364	1					
ANR	5567558	Identifier	Value		5567364	1					
ANR	5567559	ArgumentList			5567364	1					
ANR	5567560	Argument	CONDOR_VM_UNIVERSE_VMWARE		5567364	1					
ANR	5567561	Identifier	CONDOR_VM_UNIVERSE_VMWARE		5567364	0					
ANR	5567562	PrimaryExpression	0		5567364	1					
ANR	5567563	CompoundStatement		35:2:1008:1041	5567364	1					
ANR	5567564	IdentifierDeclStatement	priv_state priv = set_user_priv ( ) ;	1125:2:26385:26418	5567364	0	True				
ANR	5567565	IdentifierDecl	priv = set_user_priv ( )		5567364	0					
ANR	5567566	IdentifierDeclType	priv_state		5567364	0					
ANR	5567567	Identifier	priv		5567364	1					
ANR	5567568	AssignmentExpression	priv = set_user_priv ( )		5567364	2		=			
ANR	5567569	Identifier	priv		5567364	0					
ANR	5567570	CallExpression	set_user_priv ( )		5567364	1					
ANR	5567571	Callee	set_user_priv		5567364	0					
ANR	5567572	Identifier	set_user_priv		5567364	0					
ANR	5567573	ArgumentList			5567364	1					
ANR	5567574	IfStatement	if ( VMwareType :: checkVMwareParams ( m_gahp_config ) )		5567364	1					
ANR	5567575	Condition	VMwareType :: checkVMwareParams ( m_gahp_config )	1126:6:26426:26469	5567364	0	True				
ANR	5567576	CallExpression	VMwareType :: checkVMwareParams ( m_gahp_config )		5567364	0					
ANR	5567577	Callee	VMwareType :: checkVMwareParams		5567364	0					
ANR	5567578	Identifier	VMwareType :: checkVMwareParams		5567364	0					
ANR	5567579	ArgumentList	m_gahp_config		5567364	1					
ANR	5567580	Argument	m_gahp_config		5567364	0					
ANR	5567581	Identifier	m_gahp_config		5567364	0					
ANR	5567582	CompoundStatement		36:53:1096:1096	5567364	1					
ANR	5567583	ExpressionStatement	"VMwareType :: killVMFast ( m_gahp_config -> m_prog_for_script . Value ( ) , m_gahp_config -> m_vm_script . Value ( ) , m_workingdir . Value ( ) )"	1127:3:26478:26605	5567364	0	True				
ANR	5567584	CallExpression	"VMwareType :: killVMFast ( m_gahp_config -> m_prog_for_script . Value ( ) , m_gahp_config -> m_vm_script . Value ( ) , m_workingdir . Value ( ) )"		5567364	0					
ANR	5567585	Callee	VMwareType :: killVMFast		5567364	0					
ANR	5567586	Identifier	VMwareType :: killVMFast		5567364	0					
ANR	5567587	ArgumentList	m_gahp_config -> m_prog_for_script . Value ( )		5567364	1					
ANR	5567588	Argument	m_gahp_config -> m_prog_for_script . Value ( )		5567364	0					
ANR	5567589	CallExpression	m_gahp_config -> m_prog_for_script . Value ( )		5567364	0					
ANR	5567590	Callee	m_gahp_config -> m_prog_for_script . Value		5567364	0					
ANR	5567591	MemberAccess	m_gahp_config -> m_prog_for_script . Value		5567364	0					
ANR	5567592	PtrMemberAccess	m_gahp_config -> m_prog_for_script		5567364	0					
ANR	5567593	Identifier	m_gahp_config		5567364	0					
ANR	5567594	Identifier	m_prog_for_script		5567364	1					
ANR	5567595	Identifier	Value		5567364	1					
ANR	5567596	ArgumentList			5567364	1					
ANR	5567597	Argument	m_gahp_config -> m_vm_script . Value ( )		5567364	1					
ANR	5567598	CallExpression	m_gahp_config -> m_vm_script . Value ( )		5567364	0					
ANR	5567599	Callee	m_gahp_config -> m_vm_script . Value		5567364	0					
ANR	5567600	MemberAccess	m_gahp_config -> m_vm_script . Value		5567364	0					
ANR	5567601	PtrMemberAccess	m_gahp_config -> m_vm_script		5567364	0					
ANR	5567602	Identifier	m_gahp_config		5567364	0					
ANR	5567603	Identifier	m_vm_script		5567364	1					
ANR	5567604	Identifier	Value		5567364	1					
ANR	5567605	ArgumentList			5567364	1					
ANR	5567606	Argument	m_workingdir . Value ( )		5567364	2					
ANR	5567607	CallExpression	m_workingdir . Value ( )		5567364	0					
ANR	5567608	Callee	m_workingdir . Value		5567364	0					
ANR	5567609	MemberAccess	m_workingdir . Value		5567364	0					
ANR	5567610	Identifier	m_workingdir		5567364	0					
ANR	5567611	Identifier	Value		5567364	1					
ANR	5567612	ArgumentList			5567364	1					
ANR	5567613	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""killVMFast is called\\n"" )"	1129:3:26610:26658	5567364	1	True				
ANR	5567614	CallExpression	"vmprintf ( D_FULLDEBUG , ""killVMFast is called\\n"" )"		5567364	0					
ANR	5567615	Callee	vmprintf		5567364	0					
ANR	5567616	Identifier	vmprintf		5567364	0					
ANR	5567617	ArgumentList	D_FULLDEBUG		5567364	1					
ANR	5567618	Argument	D_FULLDEBUG		5567364	0					
ANR	5567619	Identifier	D_FULLDEBUG		5567364	0					
ANR	5567620	Argument	"""killVMFast is called\\n"""		5567364	1					
ANR	5567621	PrimaryExpression	"""killVMFast is called\\n"""		5567364	0					
ANR	5567622	ExpressionStatement	set_priv ( priv )	1131:2:26666:26680	5567364	2	True				
ANR	5567623	CallExpression	set_priv ( priv )		5567364	0					
ANR	5567624	Callee	set_priv		5567364	0					
ANR	5567625	Identifier	set_priv		5567364	0					
ANR	5567626	ArgumentList	priv		5567364	1					
ANR	5567627	Argument	priv		5567364	0					
ANR	5567628	Identifier	priv		5567364	0					
ANR	5567629	ReturnType	void		5567364	1					
ANR	5567630	Identifier	VMGahp :: killAllProcess		5567364	2					
ANR	5567631	ParameterList			5567364	3					
ANR	5567632	CFGEntryNode	ENTRY		5567364		True				
ANR	5567633	CFGExitNode	EXIT		5567364		True				
ANR	5567634	Symbol	VMType :: createVMName		5567364						
ANR	5567635	Symbol	m_jobAd		5567364						
ANR	5567636	Symbol	set_user_priv		5567364						
ANR	5567637	Symbol	m_gahp_config -> m_vm_type		5567364						
ANR	5567638	Symbol	vmname		5567364						
ANR	5567639	Symbol	vmname . Value		5567364						
ANR	5567640	Symbol	m_gahp_config -> m_vm_script . Value		5567364						
ANR	5567641	Symbol	CONDOR_VM_UNIVERSE_KVM		5567364						
ANR	5567642	Symbol	CONDOR_VM_UNIVERSE_XEN		5567364						
ANR	5567643	Symbol	priv		5567364						
ANR	5567644	Symbol	strcasecmp		5567364						
ANR	5567645	Symbol	m_gahp_config -> m_vm_type . Value		5567364						
ANR	5567646	Symbol	m_gahp_config		5567364						
ANR	5567647	Symbol	VMwareType :: checkVMwareParams		5567364						
ANR	5567648	Symbol	set_root_priv		5567364						
ANR	5567649	Symbol	D_FULLDEBUG		5567364						
ANR	5567650	Symbol	KVMType :: checkXenParams		5567364						
ANR	5567651	Symbol	m_gahp_config -> m_prog_for_script . Value		5567364						
ANR	5567652	Symbol	m_gahp_config -> m_prog_for_script		5567364						
ANR	5567653	Symbol	m_gahp_config -> m_vm_script		5567364						
ANR	5567654	Symbol	* m_gahp_config		5567364						
ANR	5567655	Symbol	m_workingdir		5567364						
ANR	5567656	Symbol	m_workingdir . Value		5567364						
ANR	5567657	Symbol	XenType :: checkXenParams		5567364						
ANR	5567658	Symbol	CONDOR_VM_UNIVERSE_VMWARE		5567364						
