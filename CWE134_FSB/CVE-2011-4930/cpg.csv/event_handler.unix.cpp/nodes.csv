command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1300894	File	data/converged/CVE-2011-4930_htcondor/event_handler.unix.cpp								
ANR	1300895	DeclStmt									
ANR	1300896	Decl							NAME_VALUE	NAME_VALUE [ ]	SigNameArray
ANR	1300897	DeclStmt									
ANR	1300898	Decl							NameTable	NameTable ( SigNameArray )	SigNames
ANR	1300899	Function	EventHandler :: EventHandler	58:0:1533:1637							
ANR	1300900	FunctionDef	"EventHandler :: EventHandler (void ( * f ) ( int ) , sigset_t m)"		1300899	0					
ANR	1300901	CompoundStatement		59:0:1590:1637	1300899	0					
ANR	1300902	ExpressionStatement	func = f	60:1:1593:1601	1300899	0	True				
ANR	1300903	AssignmentExpression	func = f		1300899	0		=			
ANR	1300904	Identifier	func		1300899	0					
ANR	1300905	Identifier	f		1300899	1					
ANR	1300906	ExpressionStatement	mask = m	61:1:1604:1612	1300899	1	True				
ANR	1300907	AssignmentExpression	mask = m		1300899	0		=			
ANR	1300908	Identifier	mask		1300899	0					
ANR	1300909	Identifier	m		1300899	1					
ANR	1300910	ExpressionStatement	is_installed = FALSE	62:1:1615:1635	1300899	2	True				
ANR	1300911	AssignmentExpression	is_installed = FALSE		1300899	0		=			
ANR	1300912	Identifier	is_installed		1300899	0					
ANR	1300913	Identifier	FALSE		1300899	1					
ANR	1300914	Identifier	EventHandler :: EventHandler		1300899	1					
ANR	1300915	ParameterList	"void ( * f ) ( int ) , sigset_t m"		1300899	2					
ANR	1300916	Parameter	void ( * f ) ( int )	58:28:1561:1574	1300899	0	True				
ANR	1300917	ParameterType	(( int ) void) *		1300899	0					
ANR	1300918	Identifier	f		1300899	1					
ANR	1300919	Parameter	sigset_t m	58:44:1577:1586	1300899	1	True				
ANR	1300920	ParameterType	sigset_t		1300899	0					
ANR	1300921	Identifier	m		1300899	1					
ANR	1300922	CFGEntryNode	ENTRY		1300899		True				
ANR	1300923	CFGExitNode	EXIT		1300899		True				
ANR	1300924	Symbol	is_installed		1300899						
ANR	1300925	Symbol	func		1300899						
ANR	1300926	Symbol	f		1300899						
ANR	1300927	Symbol	FALSE		1300899						
ANR	1300928	Symbol	m		1300899						
ANR	1300929	Symbol	mask		1300899						
ANR	1300930	Function	EventHandler :: display	65:0:1640:1828							
ANR	1300931	FunctionDef	EventHandler :: display ()		1300930	0					
ANR	1300932	CompoundStatement		67:0:1669:1828	1300930	0					
ANR	1300933	ExpressionStatement	"dprintf ( D_ALWAYS , ""EventHandler {\\n"" )"	68:1:1672:1711	1300930	0	True				
ANR	1300934	CallExpression	"dprintf ( D_ALWAYS , ""EventHandler {\\n"" )"		1300930	0					
ANR	1300935	Callee	dprintf		1300930	0					
ANR	1300936	Identifier	dprintf		1300930	0					
ANR	1300937	ArgumentList	D_ALWAYS		1300930	1					
ANR	1300938	Argument	D_ALWAYS		1300930	0					
ANR	1300939	Identifier	D_ALWAYS		1300930	0					
ANR	1300940	Argument	"""EventHandler {\\n"""		1300930	1					
ANR	1300941	PrimaryExpression	"""EventHandler {\\n"""		1300930	0					
ANR	1300942	ExpressionStatement	"dprintf ( D_ALWAYS , ""\\tfunc = %p\\n"" , func )"	70:1:1715:1757	1300930	1	True				
ANR	1300943	CallExpression	"dprintf ( D_ALWAYS , ""\\tfunc = %p\\n"" , func )"		1300930	0					
ANR	1300944	Callee	dprintf		1300930	0					
ANR	1300945	Identifier	dprintf		1300930	0					
ANR	1300946	ArgumentList	D_ALWAYS		1300930	1					
ANR	1300947	Argument	D_ALWAYS		1300930	0					
ANR	1300948	Identifier	D_ALWAYS		1300930	0					
ANR	1300949	Argument	"""\\tfunc = %p\\n"""		1300930	1					
ANR	1300950	PrimaryExpression	"""\\tfunc = %p\\n"""		1300930	0					
ANR	1300951	Argument	func		1300930	2					
ANR	1300952	Identifier	func		1300930	0					
ANR	1300953	ExpressionStatement	"display_sigset ( ""\\tmask = "" , & mask )"	71:1:1760:1796	1300930	2	True				
ANR	1300954	CallExpression	"display_sigset ( ""\\tmask = "" , & mask )"		1300930	0					
ANR	1300955	Callee	display_sigset		1300930	0					
ANR	1300956	Identifier	display_sigset		1300930	0					
ANR	1300957	ArgumentList	"""\\tmask = """		1300930	1					
ANR	1300958	Argument	"""\\tmask = """		1300930	0					
ANR	1300959	PrimaryExpression	"""\\tmask = """		1300930	0					
ANR	1300960	Argument	& mask		1300930	1					
ANR	1300961	UnaryOperationExpression	& mask		1300930	0					
ANR	1300962	UnaryOperator	&		1300930	0					
ANR	1300963	Identifier	mask		1300930	1					
ANR	1300964	ExpressionStatement	"dprintf ( D_ALWAYS , ""}\\n"" )"	73:1:1800:1826	1300930	3	True				
ANR	1300965	CallExpression	"dprintf ( D_ALWAYS , ""}\\n"" )"		1300930	0					
ANR	1300966	Callee	dprintf		1300930	0					
ANR	1300967	Identifier	dprintf		1300930	0					
ANR	1300968	ArgumentList	D_ALWAYS		1300930	1					
ANR	1300969	Argument	D_ALWAYS		1300930	0					
ANR	1300970	Identifier	D_ALWAYS		1300930	0					
ANR	1300971	Argument	"""}\\n"""		1300930	1					
ANR	1300972	PrimaryExpression	"""}\\n"""		1300930	0					
ANR	1300973	ReturnType	void		1300930	1					
ANR	1300974	Identifier	EventHandler :: display		1300930	2					
ANR	1300975	ParameterList			1300930	3					
ANR	1300976	CFGEntryNode	ENTRY		1300930		True				
ANR	1300977	CFGExitNode	EXIT		1300930		True				
ANR	1300978	Symbol	func		1300930						
ANR	1300979	Symbol	D_ALWAYS		1300930						
ANR	1300980	Symbol	& mask		1300930						
ANR	1300981	Function	display_sigset	76:0:1831:2181							
ANR	1300982	FunctionDef	"display_sigset (const char * msg , sigset_t * mask)"		1300981	0					
ANR	1300983	CompoundStatement		78:0:1886:2181	1300981	0					
ANR	1300984	IdentifierDeclStatement	int signo ;	79:1:1889:1902	1300981	0	True				
ANR	1300985	IdentifierDecl	signo		1300981	0					
ANR	1300986	IdentifierDeclType	int		1300981	0					
ANR	1300987	Identifier	signo		1300981	1					
ANR	1300988	IdentifierDeclStatement	NameTableIterator next_sig ( SigNames ) ;	80:1:1905:1943	1300981	1	True				
ANR	1300989	IdentifierDecl	next_sig ( SigNames )		1300981	0					
ANR	1300990	IdentifierDeclType	NameTableIterator		1300981	0					
ANR	1300991	Identifier	next_sig		1300981	1					
ANR	1300992	Identifier	SigNames		1300981	2					
ANR	1300993	IfStatement	if ( msg )		1300981	2					
ANR	1300994	Condition	msg	82:5:1951:1953	1300981	0	True				
ANR	1300995	Identifier	msg		1300981	0					
ANR	1300996	CompoundStatement		5:11:70:70	1300981	1					
ANR	1300997	ExpressionStatement	"dprintf ( D_ALWAYS , msg )"	83:2:1961:1985	1300981	0	True				
ANR	1300998	CallExpression	"dprintf ( D_ALWAYS , msg )"		1300981	0					
ANR	1300999	Callee	dprintf		1300981	0					
ANR	1301000	Identifier	dprintf		1300981	0					
ANR	1301001	ArgumentList	D_ALWAYS		1300981	1					
ANR	1301002	Argument	D_ALWAYS		1300981	0					
ANR	1301003	Identifier	D_ALWAYS		1300981	0					
ANR	1301004	Argument	msg		1300981	1					
ANR	1301005	Identifier	msg		1300981	0					
ANR	1301006	WhileStatement	while ( ( signo = next_sig ( ) ) != - 1 )		1300981	3					
ANR	1301007	Condition	( signo = next_sig ( ) ) != - 1	85:8:1998:2023	1300981	0	True				
ANR	1301008	EqualityExpression	( signo = next_sig ( ) ) != - 1		1300981	0		!=			
ANR	1301009	AssignmentExpression	signo = next_sig ( )		1300981	0		=			
ANR	1301010	Identifier	signo		1300981	0					
ANR	1301011	CallExpression	next_sig ( )		1300981	1					
ANR	1301012	Callee	next_sig		1300981	0					
ANR	1301013	Identifier	next_sig		1300981	0					
ANR	1301014	ArgumentList			1300981	1					
ANR	1301015	UnaryOperationExpression	- 1		1300981	1					
ANR	1301016	UnaryOperator	-		1300981	0					
ANR	1301017	PrimaryExpression	1		1300981	1					
ANR	1301018	CompoundStatement		8:37:140:140	1300981	1					
ANR	1301019	IfStatement	"if ( sigismember ( mask , signo ) )"		1300981	0					
ANR	1301020	Condition	"sigismember ( mask , signo )"	86:6:2035:2057	1300981	0	True				
ANR	1301021	CallExpression	"sigismember ( mask , signo )"		1300981	0					
ANR	1301022	Callee	sigismember		1300981	0					
ANR	1301023	Identifier	sigismember		1300981	0					
ANR	1301024	ArgumentList	mask		1300981	1					
ANR	1301025	Argument	mask		1300981	0					
ANR	1301026	Identifier	mask		1300981	0					
ANR	1301027	Argument	signo		1300981	1					
ANR	1301028	Identifier	signo		1300981	0					
ANR	1301029	CompoundStatement		9:32:174:174	1300981	1					
ANR	1301030	ExpressionStatement	"dprintf ( D_ALWAYS | D_NOHEADER , ""%s "" , SigNames . get_name ( signo ) )"	87:3:2066:2131	1300981	0	True				
ANR	1301031	CallExpression	"dprintf ( D_ALWAYS | D_NOHEADER , ""%s "" , SigNames . get_name ( signo ) )"		1300981	0					
ANR	1301032	Callee	dprintf		1300981	0					
ANR	1301033	Identifier	dprintf		1300981	0					
ANR	1301034	ArgumentList	D_ALWAYS | D_NOHEADER		1300981	1					
ANR	1301035	Argument	D_ALWAYS | D_NOHEADER		1300981	0					
ANR	1301036	InclusiveOrExpression	D_ALWAYS | D_NOHEADER		1300981	0		|			
ANR	1301037	Identifier	D_ALWAYS		1300981	0					
ANR	1301038	Identifier	D_NOHEADER		1300981	1					
ANR	1301039	Argument	"""%s """		1300981	1					
ANR	1301040	PrimaryExpression	"""%s """		1300981	0					
ANR	1301041	Argument	SigNames . get_name ( signo )		1300981	2					
ANR	1301042	CallExpression	SigNames . get_name ( signo )		1300981	0					
ANR	1301043	Callee	SigNames . get_name		1300981	0					
ANR	1301044	MemberAccess	SigNames . get_name		1300981	0					
ANR	1301045	Identifier	SigNames		1300981	0					
ANR	1301046	Identifier	get_name		1300981	1					
ANR	1301047	ArgumentList	signo		1300981	1					
ANR	1301048	Argument	signo		1300981	0					
ANR	1301049	Identifier	signo		1300981	0					
ANR	1301050	ExpressionStatement	"dprintf ( D_ALWAYS | D_NOHEADER , ""\\n"" )"	90:1:2141:2179	1300981	4	True				
ANR	1301051	CallExpression	"dprintf ( D_ALWAYS | D_NOHEADER , ""\\n"" )"		1300981	0					
ANR	1301052	Callee	dprintf		1300981	0					
ANR	1301053	Identifier	dprintf		1300981	0					
ANR	1301054	ArgumentList	D_ALWAYS | D_NOHEADER		1300981	1					
ANR	1301055	Argument	D_ALWAYS | D_NOHEADER		1300981	0					
ANR	1301056	InclusiveOrExpression	D_ALWAYS | D_NOHEADER		1300981	0		|			
ANR	1301057	Identifier	D_ALWAYS		1300981	0					
ANR	1301058	Identifier	D_NOHEADER		1300981	1					
ANR	1301059	Argument	"""\\n"""		1300981	1					
ANR	1301060	PrimaryExpression	"""\\n"""		1300981	0					
ANR	1301061	ReturnType	void		1300981	1					
ANR	1301062	Identifier	display_sigset		1300981	2					
ANR	1301063	ParameterList	"const char * msg , sigset_t * mask"		1300981	3					
ANR	1301064	Parameter	const char * msg	77:16:1852:1866	1300981	0	True				
ANR	1301065	ParameterType	const char *		1300981	0					
ANR	1301066	Identifier	msg		1300981	1					
ANR	1301067	Parameter	sigset_t * mask	77:33:1869:1882	1300981	1	True				
ANR	1301068	ParameterType	sigset_t *		1300981	0					
ANR	1301069	Identifier	mask		1300981	1					
ANR	1301070	CFGEntryNode	ENTRY		1300981		True				
ANR	1301071	CFGExitNode	EXIT		1300981		True				
ANR	1301072	Symbol	msg		1300981						
ANR	1301073	Symbol	signo		1300981						
ANR	1301074	Symbol	D_ALWAYS		1300981						
ANR	1301075	Symbol	sigismember		1300981						
ANR	1301076	Symbol	SigNames . get_name		1300981						
ANR	1301077	Symbol	SigNames		1300981						
ANR	1301078	Symbol	next_sig		1300981						
ANR	1301079	Symbol	D_NOHEADER		1300981						
ANR	1301080	Symbol	mask		1300981						
ANR	1301081	Function	EventHandler :: install	94:0:2185:3352							
ANR	1301082	FunctionDef	EventHandler :: install ()		1301081	0					
ANR	1301083	CompoundStatement		96:0:2214:3352	1301081	0					
ANR	1301084	IdentifierDeclStatement	NameTableIterator next_sig ( SigNames ) ;	97:1:2217:2255	1301081	0	True				
ANR	1301085	IdentifierDecl	next_sig ( SigNames )		1301081	0					
ANR	1301086	IdentifierDeclType	NameTableIterator		1301081	0					
ANR	1301087	Identifier	next_sig		1301081	1					
ANR	1301088	Identifier	SigNames		1301081	2					
ANR	1301089	IdentifierDeclStatement	struct sigaction action ;	98:1:2258:2281	1301081	1	True				
ANR	1301090	IdentifierDecl	action		1301081	0					
ANR	1301091	IdentifierDeclType	struct sigaction		1301081	0					
ANR	1301092	Identifier	action		1301081	1					
ANR	1301093	IdentifierDeclStatement	int i ;	99:1:2284:2290	1301081	2	True				
ANR	1301094	IdentifierDecl	i		1301081	0					
ANR	1301095	IdentifierDeclType	int		1301081	0					
ANR	1301096	Identifier	i		1301081	1					
ANR	1301097	IdentifierDeclStatement	int signo ;	100:1:2293:2303	1301081	3	True				
ANR	1301098	IdentifierDecl	signo		1301081	0					
ANR	1301099	IdentifierDeclType	int		1301081	0					
ANR	1301100	Identifier	signo		1301081	1					
ANR	1301101	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""EventHandler::install() {\\n"" )"	102:1:2307:2360	1301081	4	True				
ANR	1301102	CallExpression	"dprintf ( D_FULLDEBUG , ""EventHandler::install() {\\n"" )"		1301081	0					
ANR	1301103	Callee	dprintf		1301081	0					
ANR	1301104	Identifier	dprintf		1301081	0					
ANR	1301105	ArgumentList	D_FULLDEBUG		1301081	1					
ANR	1301106	Argument	D_FULLDEBUG		1301081	0					
ANR	1301107	Identifier	D_FULLDEBUG		1301081	0					
ANR	1301108	Argument	"""EventHandler::install() {\\n"""		1301081	1					
ANR	1301109	PrimaryExpression	"""EventHandler::install() {\\n"""		1301081	0					
ANR	1301110	IfStatement	if ( is_installed )		1301081	5					
ANR	1301111	Condition	is_installed	104:5:2368:2379	1301081	0	True				
ANR	1301112	Identifier	is_installed		1301081	0					
ANR	1301113	CompoundStatement		9:20:168:168	1301081	1					
ANR	1301114	ExpressionStatement	"EXCEPT ( ""ERROR EventHandler::install(), already installed"" )"	105:2:2387:2447	1301081	0	True				
ANR	1301115	CallExpression	"EXCEPT ( ""ERROR EventHandler::install(), already installed"" )"		1301081	0					
ANR	1301116	Callee	EXCEPT		1301081	0					
ANR	1301117	Identifier	EXCEPT		1301081	0					
ANR	1301118	ArgumentList	"""ERROR EventHandler::install(), already installed"""		1301081	1					
ANR	1301119	Argument	"""ERROR EventHandler::install(), already installed"""		1301081	0					
ANR	1301120	PrimaryExpression	"""ERROR EventHandler::install(), already installed"""		1301081	0					
ANR	1301121	ForStatement	for ( i = 0 ; i < N_POSIX_SIGS ; i ++ )		1301081	6					
ANR	1301122	ForInit	i = 0 ;	109:6:2460:2463	1301081	0	True				
ANR	1301123	AssignmentExpression	i = 0		1301081	0		=			
ANR	1301124	Identifier	i		1301081	0					
ANR	1301125	PrimaryExpression	0		1301081	1					
ANR	1301126	Condition	i < N_POSIX_SIGS	109:11:2465:2478	1301081	1	True				
ANR	1301127	RelationalExpression	i < N_POSIX_SIGS		1301081	0		<			
ANR	1301128	Identifier	i		1301081	0					
ANR	1301129	Identifier	N_POSIX_SIGS		1301081	1					
ANR	1301130	PostIncDecOperationExpression	i ++	109:27:2481:2483	1301081	2	True				
ANR	1301131	Identifier	i		1301081	0					
ANR	1301132	IncDec	++		1301081	1					
ANR	1301133	CompoundStatement		14:33:272:272	1301081	3					
ANR	1301134	ExpressionStatement	signo = next_sig ( )	110:2:2491:2509	1301081	0	True				
ANR	1301135	AssignmentExpression	signo = next_sig ( )		1301081	0		=			
ANR	1301136	Identifier	signo		1301081	0					
ANR	1301137	CallExpression	next_sig ( )		1301081	1					
ANR	1301138	Callee	next_sig		1301081	0					
ANR	1301139	Identifier	next_sig		1301081	0					
ANR	1301140	ArgumentList			1301081	1					
ANR	1301141	IfStatement	"if ( sigismember ( & mask , signo ) )"		1301081	1					
ANR	1301142	Condition	"sigismember ( & mask , signo )"	111:6:2517:2540	1301081	0	True				
ANR	1301143	CallExpression	"sigismember ( & mask , signo )"		1301081	0					
ANR	1301144	Callee	sigismember		1301081	0					
ANR	1301145	Identifier	sigismember		1301081	0					
ANR	1301146	ArgumentList	& mask		1301081	1					
ANR	1301147	Argument	& mask		1301081	0					
ANR	1301148	UnaryOperationExpression	& mask		1301081	0					
ANR	1301149	UnaryOperator	&		1301081	0					
ANR	1301150	Identifier	mask		1301081	1					
ANR	1301151	Argument	signo		1301081	1					
ANR	1301152	Identifier	signo		1301081	0					
ANR	1301153	CompoundStatement		16:33:329:329	1301081	1					
ANR	1301154	ExpressionStatement	action . sa_handler = func	116:3:2882:2906	1301081	0	True				
ANR	1301155	AssignmentExpression	action . sa_handler = func		1301081	0		=			
ANR	1301156	MemberAccess	action . sa_handler		1301081	0					
ANR	1301157	Identifier	action		1301081	0					
ANR	1301158	Identifier	sa_handler		1301081	1					
ANR	1301159	Identifier	func		1301081	1					
ANR	1301160	ExpressionStatement	action . sa_mask = mask	121:3:2970:2991	1301081	1	True				
ANR	1301161	AssignmentExpression	action . sa_mask = mask		1301081	0		=			
ANR	1301162	MemberAccess	action . sa_mask		1301081	0					
ANR	1301163	Identifier	action		1301081	0					
ANR	1301164	Identifier	sa_mask		1301081	1					
ANR	1301165	Identifier	mask		1301081	1					
ANR	1301166	ExpressionStatement	action . sa_flags = SA_NOCLDSTOP	122:3:2996:3026	1301081	2	True				
ANR	1301167	AssignmentExpression	action . sa_flags = SA_NOCLDSTOP		1301081	0		=			
ANR	1301168	MemberAccess	action . sa_flags		1301081	0					
ANR	1301169	Identifier	action		1301081	0					
ANR	1301170	Identifier	sa_flags		1301081	1					
ANR	1301171	Identifier	SA_NOCLDSTOP		1301081	1					
ANR	1301172	IfStatement	"if ( sigaction ( signo , & action , & o_action [ i ] ) < 0 )"		1301081	3					
ANR	1301173	Condition	"sigaction ( signo , & action , & o_action [ i ] ) < 0"	123:7:3035:3075	1301081	0	True				
ANR	1301174	RelationalExpression	"sigaction ( signo , & action , & o_action [ i ] ) < 0"		1301081	0		<			
ANR	1301175	CallExpression	"sigaction ( signo , & action , & o_action [ i ] )"		1301081	0					
ANR	1301176	Callee	sigaction		1301081	0					
ANR	1301177	Identifier	sigaction		1301081	0					
ANR	1301178	ArgumentList	signo		1301081	1					
ANR	1301179	Argument	signo		1301081	0					
ANR	1301180	Identifier	signo		1301081	0					
ANR	1301181	Argument	& action		1301081	1					
ANR	1301182	UnaryOperationExpression	& action		1301081	0					
ANR	1301183	UnaryOperator	&		1301081	0					
ANR	1301184	Identifier	action		1301081	1					
ANR	1301185	Argument	& o_action [ i ]		1301081	2					
ANR	1301186	UnaryOperationExpression	& o_action [ i ]		1301081	0					
ANR	1301187	UnaryOperator	&		1301081	0					
ANR	1301188	ArrayIndexing	o_action [ i ]		1301081	1					
ANR	1301189	Identifier	o_action		1301081	0					
ANR	1301190	Identifier	i		1301081	1					
ANR	1301191	PrimaryExpression	0		1301081	1					
ANR	1301192	CompoundStatement		28:51:864:864	1301081	1					
ANR	1301193	ExpressionStatement	"perror ( ""sigaction"" )"	124:4:3085:3106	1301081	0	True				
ANR	1301194	CallExpression	"perror ( ""sigaction"" )"		1301081	0					
ANR	1301195	Callee	perror		1301081	0					
ANR	1301196	Identifier	perror		1301081	0					
ANR	1301197	ArgumentList	"""sigaction"""		1301081	1					
ANR	1301198	Argument	"""sigaction"""		1301081	0					
ANR	1301199	PrimaryExpression	"""sigaction"""		1301081	0					
ANR	1301200	ExpressionStatement	exit ( 1 )	125:4:3112:3121	1301081	1	True				
ANR	1301201	CallExpression	exit ( 1 )		1301081	0					
ANR	1301202	Callee	exit		1301081	0					
ANR	1301203	Identifier	exit		1301081	0					
ANR	1301204	ArgumentList	1		1301081	1					
ANR	1301205	Argument	1		1301081	0					
ANR	1301206	PrimaryExpression	1		1301081	0					
ANR	1301207	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""\\t*FSM* Installed handler %p for signal %s, flags = 0x%x\\n"" , action . sa_handler , SigNames . get_name ( signo ) , action . sa_flags )"	127:3:3131:3288	1301081	4	True				
ANR	1301208	CallExpression	"dprintf ( D_FULLDEBUG , ""\\t*FSM* Installed handler %p for signal %s, flags = 0x%x\\n"" , action . sa_handler , SigNames . get_name ( signo ) , action . sa_flags )"		1301081	0					
ANR	1301209	Callee	dprintf		1301081	0					
ANR	1301210	Identifier	dprintf		1301081	0					
ANR	1301211	ArgumentList	D_FULLDEBUG		1301081	1					
ANR	1301212	Argument	D_FULLDEBUG		1301081	0					
ANR	1301213	Identifier	D_FULLDEBUG		1301081	0					
ANR	1301214	Argument	"""\\t*FSM* Installed handler %p for signal %s, flags = 0x%x\\n"""		1301081	1					
ANR	1301215	PrimaryExpression	"""\\t*FSM* Installed handler %p for signal %s, flags = 0x%x\\n"""		1301081	0					
ANR	1301216	Argument	action . sa_handler		1301081	2					
ANR	1301217	MemberAccess	action . sa_handler		1301081	0					
ANR	1301218	Identifier	action		1301081	0					
ANR	1301219	Identifier	sa_handler		1301081	1					
ANR	1301220	Argument	SigNames . get_name ( signo )		1301081	3					
ANR	1301221	CallExpression	SigNames . get_name ( signo )		1301081	0					
ANR	1301222	Callee	SigNames . get_name		1301081	0					
ANR	1301223	MemberAccess	SigNames . get_name		1301081	0					
ANR	1301224	Identifier	SigNames		1301081	0					
ANR	1301225	Identifier	get_name		1301081	1					
ANR	1301226	ArgumentList	signo		1301081	1					
ANR	1301227	Argument	signo		1301081	0					
ANR	1301228	Identifier	signo		1301081	0					
ANR	1301229	Argument	action . sa_flags		1301081	4					
ANR	1301230	MemberAccess	action . sa_flags		1301081	0					
ANR	1301231	Identifier	action		1301081	0					
ANR	1301232	Identifier	sa_flags		1301081	1					
ANR	1301233	ExpressionStatement	is_installed = TRUE	133:1:3298:3317	1301081	7	True				
ANR	1301234	AssignmentExpression	is_installed = TRUE		1301081	0		=			
ANR	1301235	Identifier	is_installed		1301081	0					
ANR	1301236	Identifier	TRUE		1301081	1					
ANR	1301237	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""}\\n"" )"	135:1:3321:3350	1301081	8	True				
ANR	1301238	CallExpression	"dprintf ( D_FULLDEBUG , ""}\\n"" )"		1301081	0					
ANR	1301239	Callee	dprintf		1301081	0					
ANR	1301240	Identifier	dprintf		1301081	0					
ANR	1301241	ArgumentList	D_FULLDEBUG		1301081	1					
ANR	1301242	Argument	D_FULLDEBUG		1301081	0					
ANR	1301243	Identifier	D_FULLDEBUG		1301081	0					
ANR	1301244	Argument	"""}\\n"""		1301081	1					
ANR	1301245	PrimaryExpression	"""}\\n"""		1301081	0					
ANR	1301246	ReturnType	void		1301081	1					
ANR	1301247	Identifier	EventHandler :: install		1301081	2					
ANR	1301248	ParameterList			1301081	3					
ANR	1301249	CFGEntryNode	ENTRY		1301081		True				
ANR	1301250	CFGExitNode	EXIT		1301081		True				
ANR	1301251	Symbol	action . sa_mask		1301081						
ANR	1301252	Symbol	action . sa_flags		1301081						
ANR	1301253	Symbol	o_action		1301081						
ANR	1301254	Symbol	& mask		1301081						
ANR	1301255	Symbol	i		1301081						
ANR	1301256	Symbol	TRUE		1301081						
ANR	1301257	Symbol	D_FULLDEBUG		1301081						
ANR	1301258	Symbol	action . sa_handler		1301081						
ANR	1301259	Symbol	N_POSIX_SIGS		1301081						
ANR	1301260	Symbol	sigaction		1301081						
ANR	1301261	Symbol	next_sig		1301081						
ANR	1301262	Symbol	is_installed		1301081						
ANR	1301263	Symbol	SA_NOCLDSTOP		1301081						
ANR	1301264	Symbol	& action		1301081						
ANR	1301265	Symbol	func		1301081						
ANR	1301266	Symbol	signo		1301081						
ANR	1301267	Symbol	action		1301081						
ANR	1301268	Symbol	sigismember		1301081						
ANR	1301269	Symbol	SigNames . get_name		1301081						
ANR	1301270	Symbol	SigNames		1301081						
ANR	1301271	Symbol	mask		1301081						
ANR	1301272	Function	EventHandler :: de_install	138:0:3355:4053							
ANR	1301273	FunctionDef	EventHandler :: de_install ()		1301272	0					
ANR	1301274	CompoundStatement		140:0:3387:4053	1301272	0					
ANR	1301275	IdentifierDeclStatement	NameTableIterator next_sig ( SigNames ) ;	141:1:3390:3428	1301272	0	True				
ANR	1301276	IdentifierDecl	next_sig ( SigNames )		1301272	0					
ANR	1301277	IdentifierDeclType	NameTableIterator		1301272	0					
ANR	1301278	Identifier	next_sig		1301272	1					
ANR	1301279	Identifier	SigNames		1301272	2					
ANR	1301280	IdentifierDeclStatement	int signo ;	143:1:3495:3505	1301272	1	True				
ANR	1301281	IdentifierDecl	signo		1301272	0					
ANR	1301282	IdentifierDeclType	int		1301272	0					
ANR	1301283	Identifier	signo		1301272	1					
ANR	1301284	IdentifierDeclStatement	int i ;	144:1:3508:3514	1301272	2	True				
ANR	1301285	IdentifierDecl	i		1301272	0					
ANR	1301286	IdentifierDeclType	int		1301272	0					
ANR	1301287	Identifier	i		1301272	1					
ANR	1301288	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""EventHandler::de_install() {\\n"" )"	146:1:3518:3574	1301272	3	True				
ANR	1301289	CallExpression	"dprintf ( D_FULLDEBUG , ""EventHandler::de_install() {\\n"" )"		1301272	0					
ANR	1301290	Callee	dprintf		1301272	0					
ANR	1301291	Identifier	dprintf		1301272	0					
ANR	1301292	ArgumentList	D_FULLDEBUG		1301272	1					
ANR	1301293	Argument	D_FULLDEBUG		1301272	0					
ANR	1301294	Identifier	D_FULLDEBUG		1301272	0					
ANR	1301295	Argument	"""EventHandler::de_install() {\\n"""		1301272	1					
ANR	1301296	PrimaryExpression	"""EventHandler::de_install() {\\n"""		1301272	0					
ANR	1301297	IfStatement	if ( ! is_installed )		1301272	4					
ANR	1301298	Condition	! is_installed	148:5:3582:3594	1301272	0	True				
ANR	1301299	UnaryOperationExpression	! is_installed		1301272	0					
ANR	1301300	UnaryOperator	!		1301272	0					
ANR	1301301	Identifier	is_installed		1301272	1					
ANR	1301302	CompoundStatement		9:21:210:210	1301272	1					
ANR	1301303	ExpressionStatement	"EXCEPT ( ""ERROR EventHandler::de_install(), not installed"" )"	149:2:3602:3661	1301272	0	True				
ANR	1301304	CallExpression	"EXCEPT ( ""ERROR EventHandler::de_install(), not installed"" )"		1301272	0					
ANR	1301305	Callee	EXCEPT		1301272	0					
ANR	1301306	Identifier	EXCEPT		1301272	0					
ANR	1301307	ArgumentList	"""ERROR EventHandler::de_install(), not installed"""		1301272	1					
ANR	1301308	Argument	"""ERROR EventHandler::de_install(), not installed"""		1301272	0					
ANR	1301309	PrimaryExpression	"""ERROR EventHandler::de_install(), not installed"""		1301272	0					
ANR	1301310	ForStatement	for ( i = 0 ; i < N_POSIX_SIGS ; i ++ )		1301272	5					
ANR	1301311	ForInit	i = 0 ;	152:6:3673:3676	1301272	0	True				
ANR	1301312	AssignmentExpression	i = 0		1301272	0		=			
ANR	1301313	Identifier	i		1301272	0					
ANR	1301314	PrimaryExpression	0		1301272	1					
ANR	1301315	Condition	i < N_POSIX_SIGS	152:11:3678:3691	1301272	1	True				
ANR	1301316	RelationalExpression	i < N_POSIX_SIGS		1301272	0		<			
ANR	1301317	Identifier	i		1301272	0					
ANR	1301318	Identifier	N_POSIX_SIGS		1301272	1					
ANR	1301319	PostIncDecOperationExpression	i ++	152:27:3694:3696	1301272	2	True				
ANR	1301320	Identifier	i		1301272	0					
ANR	1301321	IncDec	++		1301272	1					
ANR	1301322	CompoundStatement		13:33:312:312	1301272	3					
ANR	1301323	ExpressionStatement	signo = next_sig ( )	153:2:3704:3722	1301272	0	True				
ANR	1301324	AssignmentExpression	signo = next_sig ( )		1301272	0		=			
ANR	1301325	Identifier	signo		1301272	0					
ANR	1301326	CallExpression	next_sig ( )		1301272	1					
ANR	1301327	Callee	next_sig		1301272	0					
ANR	1301328	Identifier	next_sig		1301272	0					
ANR	1301329	ArgumentList			1301272	1					
ANR	1301330	IfStatement	"if ( sigismember ( & mask , signo ) )"		1301272	1					
ANR	1301331	Condition	"sigismember ( & mask , signo )"	154:6:3730:3753	1301272	0	True				
ANR	1301332	CallExpression	"sigismember ( & mask , signo )"		1301272	0					
ANR	1301333	Callee	sigismember		1301272	0					
ANR	1301334	Identifier	sigismember		1301272	0					
ANR	1301335	ArgumentList	& mask		1301272	1					
ANR	1301336	Argument	& mask		1301272	0					
ANR	1301337	UnaryOperationExpression	& mask		1301272	0					
ANR	1301338	UnaryOperator	&		1301272	0					
ANR	1301339	Identifier	mask		1301272	1					
ANR	1301340	Argument	signo		1301272	1					
ANR	1301341	Identifier	signo		1301272	0					
ANR	1301342	CompoundStatement		15:33:369:369	1301272	1					
ANR	1301343	IfStatement	"if ( sigaction ( signo , & o_action [ i ] , 0 ) < 0 )"		1301272	0					
ANR	1301344	Condition	"sigaction ( signo , & o_action [ i ] , 0 ) < 0"	155:7:3766:3800	1301272	0	True				
ANR	1301345	RelationalExpression	"sigaction ( signo , & o_action [ i ] , 0 ) < 0"		1301272	0		<			
ANR	1301346	CallExpression	"sigaction ( signo , & o_action [ i ] , 0 )"		1301272	0					
ANR	1301347	Callee	sigaction		1301272	0					
ANR	1301348	Identifier	sigaction		1301272	0					
ANR	1301349	ArgumentList	signo		1301272	1					
ANR	1301350	Argument	signo		1301272	0					
ANR	1301351	Identifier	signo		1301272	0					
ANR	1301352	Argument	& o_action [ i ]		1301272	1					
ANR	1301353	UnaryOperationExpression	& o_action [ i ]		1301272	0					
ANR	1301354	UnaryOperator	&		1301272	0					
ANR	1301355	ArrayIndexing	o_action [ i ]		1301272	1					
ANR	1301356	Identifier	o_action		1301272	0					
ANR	1301357	Identifier	i		1301272	1					
ANR	1301358	Argument	0		1301272	2					
ANR	1301359	PrimaryExpression	0		1301272	0					
ANR	1301360	PrimaryExpression	0		1301272	1					
ANR	1301361	CompoundStatement		16:45:416:416	1301272	1					
ANR	1301362	ExpressionStatement	"perror ( ""sigaction"" )"	156:4:3810:3831	1301272	0	True				
ANR	1301363	CallExpression	"perror ( ""sigaction"" )"		1301272	0					
ANR	1301364	Callee	perror		1301272	0					
ANR	1301365	Identifier	perror		1301272	0					
ANR	1301366	ArgumentList	"""sigaction"""		1301272	1					
ANR	1301367	Argument	"""sigaction"""		1301272	0					
ANR	1301368	PrimaryExpression	"""sigaction"""		1301272	0					
ANR	1301369	ExpressionStatement	exit ( 1 )	157:4:3837:3846	1301272	1	True				
ANR	1301370	CallExpression	exit ( 1 )		1301272	0					
ANR	1301371	Callee	exit		1301272	0					
ANR	1301372	Identifier	exit		1301272	0					
ANR	1301373	ArgumentList	1		1301272	1					
ANR	1301374	Argument	1		1301272	0					
ANR	1301375	PrimaryExpression	1		1301272	0					
ANR	1301376	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""\\t*FSM* Installed handler %p for signal %s\\n"" , o_action [ i ] . sa_handler , SigNames . get_name ( signo ) )"	159:3:3856:3987	1301272	1	True				
ANR	1301377	CallExpression	"dprintf ( D_FULLDEBUG , ""\\t*FSM* Installed handler %p for signal %s\\n"" , o_action [ i ] . sa_handler , SigNames . get_name ( signo ) )"		1301272	0					
ANR	1301378	Callee	dprintf		1301272	0					
ANR	1301379	Identifier	dprintf		1301272	0					
ANR	1301380	ArgumentList	D_FULLDEBUG		1301272	1					
ANR	1301381	Argument	D_FULLDEBUG		1301272	0					
ANR	1301382	Identifier	D_FULLDEBUG		1301272	0					
ANR	1301383	Argument	"""\\t*FSM* Installed handler %p for signal %s\\n"""		1301272	1					
ANR	1301384	PrimaryExpression	"""\\t*FSM* Installed handler %p for signal %s\\n"""		1301272	0					
ANR	1301385	Argument	o_action [ i ] . sa_handler		1301272	2					
ANR	1301386	MemberAccess	o_action [ i ] . sa_handler		1301272	0					
ANR	1301387	ArrayIndexing	o_action [ i ]		1301272	0					
ANR	1301388	Identifier	o_action		1301272	0					
ANR	1301389	Identifier	i		1301272	1					
ANR	1301390	Identifier	sa_handler		1301272	1					
ANR	1301391	Argument	SigNames . get_name ( signo )		1301272	3					
ANR	1301392	CallExpression	SigNames . get_name ( signo )		1301272	0					
ANR	1301393	Callee	SigNames . get_name		1301272	0					
ANR	1301394	MemberAccess	SigNames . get_name		1301272	0					
ANR	1301395	Identifier	SigNames		1301272	0					
ANR	1301396	Identifier	get_name		1301272	1					
ANR	1301397	ArgumentList	signo		1301272	1					
ANR	1301398	Argument	signo		1301272	0					
ANR	1301399	Identifier	signo		1301272	0					
ANR	1301400	ExpressionStatement	is_installed = FALSE	166:1:3998:4018	1301272	6	True				
ANR	1301401	AssignmentExpression	is_installed = FALSE		1301272	0		=			
ANR	1301402	Identifier	is_installed		1301272	0					
ANR	1301403	Identifier	FALSE		1301272	1					
ANR	1301404	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""}\\n"" )"	168:1:4022:4051	1301272	7	True				
ANR	1301405	CallExpression	"dprintf ( D_FULLDEBUG , ""}\\n"" )"		1301272	0					
ANR	1301406	Callee	dprintf		1301272	0					
ANR	1301407	Identifier	dprintf		1301272	0					
ANR	1301408	ArgumentList	D_FULLDEBUG		1301272	1					
ANR	1301409	Argument	D_FULLDEBUG		1301272	0					
ANR	1301410	Identifier	D_FULLDEBUG		1301272	0					
ANR	1301411	Argument	"""}\\n"""		1301272	1					
ANR	1301412	PrimaryExpression	"""}\\n"""		1301272	0					
ANR	1301413	ReturnType	void		1301272	1					
ANR	1301414	Identifier	EventHandler :: de_install		1301272	2					
ANR	1301415	ParameterList			1301272	3					
ANR	1301416	CFGEntryNode	ENTRY		1301272		True				
ANR	1301417	CFGExitNode	EXIT		1301272		True				
ANR	1301418	Symbol	* o_action		1301272						
ANR	1301419	Symbol	o_action		1301272						
ANR	1301420	Symbol	o_action [ i ] . sa_handler		1301272						
ANR	1301421	Symbol	& mask		1301272						
ANR	1301422	Symbol	i		1301272						
ANR	1301423	Symbol	D_FULLDEBUG		1301272						
ANR	1301424	Symbol	N_POSIX_SIGS		1301272						
ANR	1301425	Symbol	sigaction		1301272						
ANR	1301426	Symbol	next_sig		1301272						
ANR	1301427	Symbol	is_installed		1301272						
ANR	1301428	Symbol	* i		1301272						
ANR	1301429	Symbol	signo		1301272						
ANR	1301430	Symbol	FALSE		1301272						
ANR	1301431	Symbol	sigismember		1301272						
ANR	1301432	Symbol	SigNames . get_name		1301272						
ANR	1301433	Symbol	SigNames		1301272						
ANR	1301434	Function	EventHandler :: allow_events	171:0:4056:4296							
ANR	1301435	FunctionDef	EventHandler :: allow_events (sigset_t & sigset)		1301434	0					
ANR	1301436	CompoundStatement		173:0:4108:4296	1301434	0					
ANR	1301437	IfStatement	if ( ! is_installed )		1301434	0					
ANR	1301438	Condition	! is_installed	174:5:4115:4127	1301434	0	True				
ANR	1301439	UnaryOperationExpression	! is_installed		1301434	0					
ANR	1301440	UnaryOperator	!		1301434	0					
ANR	1301441	Identifier	is_installed		1301434	1					
ANR	1301442	CompoundStatement		2:21:22:22	1301434	1					
ANR	1301443	ExpressionStatement	"EXCEPT ( ""ERROR EventHandler::allow_events(), not installed"" )"	175:2:4135:4195	1301434	0	True				
ANR	1301444	CallExpression	"EXCEPT ( ""ERROR EventHandler::allow_events(), not installed"" )"		1301434	0					
ANR	1301445	Callee	EXCEPT		1301434	0					
ANR	1301446	Identifier	EXCEPT		1301434	0					
ANR	1301447	ArgumentList	"""ERROR EventHandler::allow_events(), not installed"""		1301434	1					
ANR	1301448	Argument	"""ERROR EventHandler::allow_events(), not installed"""		1301434	0					
ANR	1301449	PrimaryExpression	"""ERROR EventHandler::allow_events(), not installed"""		1301434	0					
ANR	1301450	ExpressionStatement	"sigprocmask ( SIG_UNBLOCK , & sigset , 0 )"	177:1:4202:4240	1301434	1	True				
ANR	1301451	CallExpression	"sigprocmask ( SIG_UNBLOCK , & sigset , 0 )"		1301434	0					
ANR	1301452	Callee	sigprocmask		1301434	0					
ANR	1301453	Identifier	sigprocmask		1301434	0					
ANR	1301454	ArgumentList	SIG_UNBLOCK		1301434	1					
ANR	1301455	Argument	SIG_UNBLOCK		1301434	0					
ANR	1301456	Identifier	SIG_UNBLOCK		1301434	0					
ANR	1301457	Argument	& sigset		1301434	1					
ANR	1301458	UnaryOperationExpression	& sigset		1301434	0					
ANR	1301459	UnaryOperator	&		1301434	0					
ANR	1301460	Identifier	sigset		1301434	1					
ANR	1301461	Argument	0		1301434	2					
ANR	1301462	PrimaryExpression	0		1301434	0					
ANR	1301463	ReturnType	void		1301434	1					
ANR	1301464	Identifier	EventHandler :: allow_events		1301434	2					
ANR	1301465	ParameterList	sigset_t & sigset		1301434	3					
ANR	1301466	Parameter	sigset_t & sigset	172:28:4089:4104	1301434	0	True				
ANR	1301467	ParameterType	sigset_t &		1301434	0					
ANR	1301468	Identifier	sigset		1301434	1					
ANR	1301469	CFGEntryNode	ENTRY		1301434		True				
ANR	1301470	CFGExitNode	EXIT		1301434		True				
ANR	1301471	Symbol	is_installed		1301434						
ANR	1301472	Symbol	& sigset		1301434						
ANR	1301473	Symbol	sigset		1301434						
ANR	1301474	Symbol	SIG_UNBLOCK		1301434						
ANR	1301475	Function	EventHandler :: block_events	181:0:4299:4534							
ANR	1301476	FunctionDef	EventHandler :: block_events (sigset_t & sigset)		1301475	0					
ANR	1301477	CompoundStatement		183:0:4351:4534	1301475	0					
ANR	1301478	IfStatement	if ( ! is_installed )		1301475	0					
ANR	1301479	Condition	! is_installed	184:5:4358:4370	1301475	0	True				
ANR	1301480	UnaryOperationExpression	! is_installed		1301475	0					
ANR	1301481	UnaryOperator	!		1301475	0					
ANR	1301482	Identifier	is_installed		1301475	1					
ANR	1301483	CompoundStatement		2:21:22:22	1301475	1					
ANR	1301484	ExpressionStatement	"EXCEPT ( ""ERROR EventHandler::block_events(), not installed"" )"	185:2:4378:4438	1301475	0	True				
ANR	1301485	CallExpression	"EXCEPT ( ""ERROR EventHandler::block_events(), not installed"" )"		1301475	0					
ANR	1301486	Callee	EXCEPT		1301475	0					
ANR	1301487	Identifier	EXCEPT		1301475	0					
ANR	1301488	ArgumentList	"""ERROR EventHandler::block_events(), not installed"""		1301475	1					
ANR	1301489	Argument	"""ERROR EventHandler::block_events(), not installed"""		1301475	0					
ANR	1301490	PrimaryExpression	"""ERROR EventHandler::block_events(), not installed"""		1301475	0					
ANR	1301491	ExpressionStatement	"sigprocmask ( SIG_BLOCK , & sigset , 0 )"	187:1:4444:4480	1301475	1	True				
ANR	1301492	CallExpression	"sigprocmask ( SIG_BLOCK , & sigset , 0 )"		1301475	0					
ANR	1301493	Callee	sigprocmask		1301475	0					
ANR	1301494	Identifier	sigprocmask		1301475	0					
ANR	1301495	ArgumentList	SIG_BLOCK		1301475	1					
ANR	1301496	Argument	SIG_BLOCK		1301475	0					
ANR	1301497	Identifier	SIG_BLOCK		1301475	0					
ANR	1301498	Argument	& sigset		1301475	1					
ANR	1301499	UnaryOperationExpression	& sigset		1301475	0					
ANR	1301500	UnaryOperator	&		1301475	0					
ANR	1301501	Identifier	sigset		1301475	1					
ANR	1301502	Argument	0		1301475	2					
ANR	1301503	PrimaryExpression	0		1301475	0					
ANR	1301504	ReturnType	void		1301475	1					
ANR	1301505	Identifier	EventHandler :: block_events		1301475	2					
ANR	1301506	ParameterList	sigset_t & sigset		1301475	3					
ANR	1301507	Parameter	sigset_t & sigset	182:28:4332:4347	1301475	0	True				
ANR	1301508	ParameterType	sigset_t &		1301475	0					
ANR	1301509	Identifier	sigset		1301475	1					
ANR	1301510	CFGEntryNode	ENTRY		1301475		True				
ANR	1301511	CFGExitNode	EXIT		1301475		True				
ANR	1301512	Symbol	is_installed		1301475						
ANR	1301513	Symbol	& sigset		1301475						
ANR	1301514	Symbol	sigset		1301475						
ANR	1301515	Symbol	SIG_BLOCK		1301475						
ANR	1301516	Function	CriticalSection :: CriticalSection	192:0:4543:4602							
ANR	1301517	FunctionDef	CriticalSection :: CriticalSection ()		1301516	0					
ANR	1301518	CompoundStatement		193:0:4578:4602	1301516	0					
ANR	1301519	ExpressionStatement	is_critical = FALSE	194:1:4581:4600	1301516	0	True				
ANR	1301520	AssignmentExpression	is_critical = FALSE		1301516	0		=			
ANR	1301521	Identifier	is_critical		1301516	0					
ANR	1301522	Identifier	FALSE		1301516	1					
ANR	1301523	Identifier	CriticalSection :: CriticalSection		1301516	1					
ANR	1301524	ParameterList			1301516	2					
ANR	1301525	CFGEntryNode	ENTRY		1301516		True				
ANR	1301526	CFGExitNode	EXIT		1301516		True				
ANR	1301527	Symbol	FALSE		1301516						
ANR	1301528	Symbol	is_critical		1301516						
ANR	1301529	Function	CriticalSection :: begin	200:0:4657:4899							
ANR	1301530	FunctionDef	CriticalSection :: begin ()		1301529	0					
ANR	1301531	CompoundStatement		202:0:4687:4899	1301529	0					
ANR	1301532	IdentifierDeclStatement	sigset_t all_mask ;	203:1:4690:4707	1301529	0	True				
ANR	1301533	IdentifierDecl	all_mask		1301529	0					
ANR	1301534	IdentifierDeclType	sigset_t		1301529	0					
ANR	1301535	Identifier	all_mask		1301529	1					
ANR	1301536	IfStatement	if ( is_critical )		1301529	1					
ANR	1301537	Condition	is_critical	205:5:4715:4725	1301529	0	True				
ANR	1301538	Identifier	is_critical		1301529	0					
ANR	1301539	CompoundStatement		4:19:41:41	1301529	1					
ANR	1301540	ExpressionStatement	"EXCEPT ( ""CriticalSection.begin() - already in critical section"" )"	206:2:4733:4797	1301529	0	True				
ANR	1301541	CallExpression	"EXCEPT ( ""CriticalSection.begin() - already in critical section"" )"		1301529	0					
ANR	1301542	Callee	EXCEPT		1301529	0					
ANR	1301543	Identifier	EXCEPT		1301529	0					
ANR	1301544	ArgumentList	"""CriticalSection.begin() - already in critical section"""		1301529	1					
ANR	1301545	Argument	"""CriticalSection.begin() - already in critical section"""		1301529	0					
ANR	1301546	PrimaryExpression	"""CriticalSection.begin() - already in critical section"""		1301529	0					
ANR	1301547	ExpressionStatement	sigfillset ( & all_mask )	208:1:4803:4826	1301529	2	True				
ANR	1301548	CallExpression	sigfillset ( & all_mask )		1301529	0					
ANR	1301549	Callee	sigfillset		1301529	0					
ANR	1301550	Identifier	sigfillset		1301529	0					
ANR	1301551	ArgumentList	& all_mask		1301529	1					
ANR	1301552	Argument	& all_mask		1301529	0					
ANR	1301553	UnaryOperationExpression	& all_mask		1301529	0					
ANR	1301554	UnaryOperator	&		1301529	0					
ANR	1301555	Identifier	all_mask		1301529	1					
ANR	1301556	ExpressionStatement	"sigprocmask ( SIG_BLOCK , & all_mask , & save_mask )"	209:1:4829:4876	1301529	3	True				
ANR	1301557	CallExpression	"sigprocmask ( SIG_BLOCK , & all_mask , & save_mask )"		1301529	0					
ANR	1301558	Callee	sigprocmask		1301529	0					
ANR	1301559	Identifier	sigprocmask		1301529	0					
ANR	1301560	ArgumentList	SIG_BLOCK		1301529	1					
ANR	1301561	Argument	SIG_BLOCK		1301529	0					
ANR	1301562	Identifier	SIG_BLOCK		1301529	0					
ANR	1301563	Argument	& all_mask		1301529	1					
ANR	1301564	UnaryOperationExpression	& all_mask		1301529	0					
ANR	1301565	UnaryOperator	&		1301529	0					
ANR	1301566	Identifier	all_mask		1301529	1					
ANR	1301567	Argument	& save_mask		1301529	2					
ANR	1301568	UnaryOperationExpression	& save_mask		1301529	0					
ANR	1301569	UnaryOperator	&		1301529	0					
ANR	1301570	Identifier	save_mask		1301529	1					
ANR	1301571	ExpressionStatement	is_critical = TRUE	210:1:4879:4897	1301529	4	True				
ANR	1301572	AssignmentExpression	is_critical = TRUE		1301529	0		=			
ANR	1301573	Identifier	is_critical		1301529	0					
ANR	1301574	Identifier	TRUE		1301529	1					
ANR	1301575	ReturnType	void		1301529	1					
ANR	1301576	Identifier	CriticalSection :: begin		1301529	2					
ANR	1301577	ParameterList			1301529	3					
ANR	1301578	CFGEntryNode	ENTRY		1301529		True				
ANR	1301579	CFGExitNode	EXIT		1301529		True				
ANR	1301580	Symbol	& save_mask		1301529						
ANR	1301581	Symbol	& all_mask		1301529						
ANR	1301582	Symbol	all_mask		1301529						
ANR	1301583	Symbol	TRUE		1301529						
ANR	1301584	Symbol	SIG_BLOCK		1301529						
ANR	1301585	Symbol	is_critical		1301529						
ANR	1301586	DeclStmt									
ANR	1301587	Decl							void	void ( )	CriticalSection :: end
ANR	1301588	Function	CriticalSection :: deliver_one	229:0:5212:5373							
ANR	1301589	FunctionDef	CriticalSection :: deliver_one ()		1301588	0					
ANR	1301590	CompoundStatement		231:0:5248:5373	1301588	0					
ANR	1301591	IfStatement	if ( ! is_critical )		1301588	0					
ANR	1301592	Condition	! is_critical	232:5:5255:5266	1301588	0	True				
ANR	1301593	UnaryOperationExpression	! is_critical		1301588	0					
ANR	1301594	UnaryOperator	!		1301588	0					
ANR	1301595	Identifier	is_critical		1301588	1					
ANR	1301596	CompoundStatement		2:20:21:21	1301588	1					
ANR	1301597	ExpressionStatement	"EXCEPT ( ""CricicalSection.deliver_one() - not it critical section"" )"	233:2:5274:5341	1301588	0	True				
ANR	1301598	CallExpression	"EXCEPT ( ""CricicalSection.deliver_one() - not it critical section"" )"		1301588	0					
ANR	1301599	Callee	EXCEPT		1301588	0					
ANR	1301600	Identifier	EXCEPT		1301588	0					
ANR	1301601	ArgumentList	"""CricicalSection.deliver_one() - not it critical section"""		1301588	1					
ANR	1301602	Argument	"""CricicalSection.deliver_one() - not it critical section"""		1301588	0					
ANR	1301603	PrimaryExpression	"""CricicalSection.deliver_one() - not it critical section"""		1301588	0					
ANR	1301604	ExpressionStatement	sigsuspend ( & save_mask )	235:1:5347:5371	1301588	1	True				
ANR	1301605	CallExpression	sigsuspend ( & save_mask )		1301588	0					
ANR	1301606	Callee	sigsuspend		1301588	0					
ANR	1301607	Identifier	sigsuspend		1301588	0					
ANR	1301608	ArgumentList	& save_mask		1301588	1					
ANR	1301609	Argument	& save_mask		1301588	0					
ANR	1301610	UnaryOperationExpression	& save_mask		1301588	0					
ANR	1301611	UnaryOperator	&		1301588	0					
ANR	1301612	Identifier	save_mask		1301588	1					
ANR	1301613	ReturnType	void		1301588	1					
ANR	1301614	Identifier	CriticalSection :: deliver_one		1301588	2					
ANR	1301615	ParameterList			1301588	3					
ANR	1301616	CFGEntryNode	ENTRY		1301588		True				
ANR	1301617	CFGExitNode	EXIT		1301588		True				
ANR	1301618	Symbol	& save_mask		1301588						
ANR	1301619	Symbol	is_critical		1301588						
