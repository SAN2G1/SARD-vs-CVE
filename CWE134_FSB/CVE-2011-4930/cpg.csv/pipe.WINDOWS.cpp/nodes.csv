command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1986425	File	data/converged/CVE-2011-4930_htcondor/pipe.WINDOWS.cpp								
ANR	1986426	DeclStmt									
ANR	1986427	Decl							extern CRITICAL_SECTION	extern CRITICAL_SECTION	Big_fat_mutex
ANR	1986428	Function	PipeEnd :: PipeEnd	26:0:926:1702							
ANR	1986429	FunctionDef	"PipeEnd :: PipeEnd (HANDLE handle , bool overlapped , bool nonblocking , int pipe_size)"		1986428	0					
ANR	1986430	CompoundStatement		30:0:1155:1702	1986428	0					
ANR	1986431	IdentifierDeclStatement	MyString event_name ;	31:1:1158:1177	1986428	0	True				
ANR	1986432	IdentifierDecl	event_name		1986428	0					
ANR	1986433	IdentifierDeclType	MyString		1986428	0					
ANR	1986434	Identifier	event_name		1986428	1					
ANR	1986435	ExpressionStatement	"event_name . sprintf ( ""pipe_event_%d_%x"" , GetCurrentProcessId ( ) , m_handle )"	35:1:1281:1352	1986428	1	True				
ANR	1986436	CallExpression	"event_name . sprintf ( ""pipe_event_%d_%x"" , GetCurrentProcessId ( ) , m_handle )"		1986428	0					
ANR	1986437	Callee	event_name . sprintf		1986428	0					
ANR	1986438	MemberAccess	event_name . sprintf		1986428	0					
ANR	1986439	Identifier	event_name		1986428	0					
ANR	1986440	Identifier	sprintf		1986428	1					
ANR	1986441	ArgumentList	"""pipe_event_%d_%x"""		1986428	1					
ANR	1986442	Argument	"""pipe_event_%d_%x"""		1986428	0					
ANR	1986443	PrimaryExpression	"""pipe_event_%d_%x"""		1986428	0					
ANR	1986444	Argument	GetCurrentProcessId ( )		1986428	1					
ANR	1986445	CallExpression	GetCurrentProcessId ( )		1986428	0					
ANR	1986446	Callee	GetCurrentProcessId		1986428	0					
ANR	1986447	Identifier	GetCurrentProcessId		1986428	0					
ANR	1986448	ArgumentList			1986428	1					
ANR	1986449	Argument	m_handle		1986428	2					
ANR	1986450	Identifier	m_handle		1986428	0					
ANR	1986451	ExpressionStatement	"m_event = CreateEvent ( NULL , TRUE , TRUE , event_name . Value ( ) )"	36:1:1355:1416	1986428	2	True				
ANR	1986452	AssignmentExpression	"m_event = CreateEvent ( NULL , TRUE , TRUE , event_name . Value ( ) )"		1986428	0		=			
ANR	1986453	Identifier	m_event		1986428	0					
ANR	1986454	CallExpression	"CreateEvent ( NULL , TRUE , TRUE , event_name . Value ( ) )"		1986428	1					
ANR	1986455	Callee	CreateEvent		1986428	0					
ANR	1986456	Identifier	CreateEvent		1986428	0					
ANR	1986457	ArgumentList	NULL		1986428	1					
ANR	1986458	Argument	NULL		1986428	0					
ANR	1986459	Identifier	NULL		1986428	0					
ANR	1986460	Argument	TRUE		1986428	1					
ANR	1986461	Identifier	TRUE		1986428	0					
ANR	1986462	Argument	TRUE		1986428	2					
ANR	1986463	Identifier	TRUE		1986428	0					
ANR	1986464	Argument	event_name . Value ( )		1986428	3					
ANR	1986465	CallExpression	event_name . Value ( )		1986428	0					
ANR	1986466	Callee	event_name . Value		1986428	0					
ANR	1986467	MemberAccess	event_name . Value		1986428	0					
ANR	1986468	Identifier	event_name		1986428	0					
ANR	1986469	Identifier	Value		1986428	1					
ANR	1986470	ArgumentList			1986428	1					
ANR	1986471	ExpressionStatement	ASSERT ( m_event )	37:1:1419:1434	1986428	3	True				
ANR	1986472	CallExpression	ASSERT ( m_event )		1986428	0					
ANR	1986473	Callee	ASSERT		1986428	0					
ANR	1986474	Identifier	ASSERT		1986428	0					
ANR	1986475	ArgumentList	m_event		1986428	1					
ANR	1986476	Argument	m_event		1986428	0					
ANR	1986477	Identifier	m_event		1986428	0					
ANR	1986478	ExpressionStatement	"event_name . sprintf ( ""pipe_watched_event_%d_%x"" , GetCurrentProcessId ( ) , m_handle )"	41:1:1522:1604	1986428	4	True				
ANR	1986479	CallExpression	"event_name . sprintf ( ""pipe_watched_event_%d_%x"" , GetCurrentProcessId ( ) , m_handle )"		1986428	0					
ANR	1986480	Callee	event_name . sprintf		1986428	0					
ANR	1986481	MemberAccess	event_name . sprintf		1986428	0					
ANR	1986482	Identifier	event_name		1986428	0					
ANR	1986483	Identifier	sprintf		1986428	1					
ANR	1986484	ArgumentList	"""pipe_watched_event_%d_%x"""		1986428	1					
ANR	1986485	Argument	"""pipe_watched_event_%d_%x"""		1986428	0					
ANR	1986486	PrimaryExpression	"""pipe_watched_event_%d_%x"""		1986428	0					
ANR	1986487	Argument	GetCurrentProcessId ( )		1986428	1					
ANR	1986488	CallExpression	GetCurrentProcessId ( )		1986428	0					
ANR	1986489	Callee	GetCurrentProcessId		1986428	0					
ANR	1986490	Identifier	GetCurrentProcessId		1986428	0					
ANR	1986491	ArgumentList			1986428	1					
ANR	1986492	Argument	m_handle		1986428	2					
ANR	1986493	Identifier	m_handle		1986428	0					
ANR	1986494	ExpressionStatement	"m_watched_event = CreateEvent ( NULL , TRUE , TRUE , event_name . Value ( ) )"	43:1:1607:1674	1986428	5	True				
ANR	1986495	AssignmentExpression	"m_watched_event = CreateEvent ( NULL , TRUE , TRUE , event_name . Value ( ) )"		1986428	0		=			
ANR	1986496	Identifier	m_watched_event		1986428	0					
ANR	1986497	CallExpression	"CreateEvent ( NULL , TRUE , TRUE , event_name . Value ( ) )"		1986428	1					
ANR	1986498	Callee	CreateEvent		1986428	0					
ANR	1986499	Identifier	CreateEvent		1986428	0					
ANR	1986500	ArgumentList	NULL		1986428	1					
ANR	1986501	Argument	NULL		1986428	0					
ANR	1986502	Identifier	NULL		1986428	0					
ANR	1986503	Argument	TRUE		1986428	1					
ANR	1986504	Identifier	TRUE		1986428	0					
ANR	1986505	Argument	TRUE		1986428	2					
ANR	1986506	Identifier	TRUE		1986428	0					
ANR	1986507	Argument	event_name . Value ( )		1986428	3					
ANR	1986508	CallExpression	event_name . Value ( )		1986428	0					
ANR	1986509	Callee	event_name . Value		1986428	0					
ANR	1986510	MemberAccess	event_name . Value		1986428	0					
ANR	1986511	Identifier	event_name		1986428	0					
ANR	1986512	Identifier	Value		1986428	1					
ANR	1986513	ArgumentList			1986428	1					
ANR	1986514	ExpressionStatement	ASSERT ( m_watched_event )	44:1:1677:1700	1986428	6	True				
ANR	1986515	CallExpression	ASSERT ( m_watched_event )		1986428	0					
ANR	1986516	Callee	ASSERT		1986428	0					
ANR	1986517	Identifier	ASSERT		1986428	0					
ANR	1986518	ArgumentList	m_watched_event		1986428	1					
ANR	1986519	Argument	m_watched_event		1986428	0					
ANR	1986520	Identifier	m_watched_event		1986428	0					
ANR	1986521	Identifier	PipeEnd :: PipeEnd		1986428	1					
ANR	1986522	ParameterList	"HANDLE handle , bool overlapped , bool nonblocking , int pipe_size"		1986428	2					
ANR	1986523	Parameter	HANDLE handle	26:17:943:955	1986428	0	True				
ANR	1986524	ParameterType	HANDLE		1986428	0					
ANR	1986525	Identifier	handle		1986428	1					
ANR	1986526	Parameter	bool overlapped	26:32:958:972	1986428	1	True				
ANR	1986527	ParameterType	bool		1986428	0					
ANR	1986528	Identifier	overlapped		1986428	1					
ANR	1986529	Parameter	bool nonblocking	26:49:975:990	1986428	2	True				
ANR	1986530	ParameterType	bool		1986428	0					
ANR	1986531	Identifier	nonblocking		1986428	1					
ANR	1986532	Parameter	int pipe_size	26:67:993:1005	1986428	3	True				
ANR	1986533	ParameterType	int		1986428	0					
ANR	1986534	Identifier	pipe_size		1986428	1					
ANR	1986535	CFGEntryNode	ENTRY		1986428		True				
ANR	1986536	CFGExitNode	EXIT		1986428		True				
ANR	1986537	Symbol	m_event		1986428						
ANR	1986538	Symbol	NULL		1986428						
ANR	1986539	Symbol	nonblocking		1986428						
ANR	1986540	Symbol	m_handle		1986428						
ANR	1986541	Symbol	TRUE		1986428						
ANR	1986542	Symbol	handle		1986428						
ANR	1986543	Symbol	GetCurrentProcessId		1986428						
ANR	1986544	Symbol	CreateEvent		1986428						
ANR	1986545	Symbol	event_name . Value		1986428						
ANR	1986546	Symbol	m_watched_event		1986428						
ANR	1986547	Symbol	event_name		1986428						
ANR	1986548	Symbol	pipe_size		1986428						
ANR	1986549	Symbol	overlapped		1986428						
ANR	1986550	Function	PipeEnd :: ~PipeEnd	48:0:1744:1910							
ANR	1986551	FunctionDef	PipeEnd :: ~PipeEnd ()		1986550	0					
ANR	1986552	CompoundStatement		49:0:1764:1910	1986550	0					
ANR	1986553	ExpressionStatement	ASSERT ( ! m_registered )	51:1:1808:1829	1986550	0	True				
ANR	1986554	CallExpression	ASSERT ( ! m_registered )		1986550	0					
ANR	1986555	Callee	ASSERT		1986550	0					
ANR	1986556	Identifier	ASSERT		1986550	0					
ANR	1986557	ArgumentList	! m_registered		1986550	1					
ANR	1986558	Argument	! m_registered		1986550	0					
ANR	1986559	UnaryOperationExpression	! m_registered		1986550	0					
ANR	1986560	UnaryOperator	!		1986550	0					
ANR	1986561	Identifier	m_registered		1986550	1					
ANR	1986562	ExpressionStatement	CloseHandle ( m_watched_event )	53:1:1833:1861	1986550	1	True				
ANR	1986563	CallExpression	CloseHandle ( m_watched_event )		1986550	0					
ANR	1986564	Callee	CloseHandle		1986550	0					
ANR	1986565	Identifier	CloseHandle		1986550	0					
ANR	1986566	ArgumentList	m_watched_event		1986550	1					
ANR	1986567	Argument	m_watched_event		1986550	0					
ANR	1986568	Identifier	m_watched_event		1986550	0					
ANR	1986569	ExpressionStatement	CloseHandle ( m_event )	54:1:1864:1884	1986550	2	True				
ANR	1986570	CallExpression	CloseHandle ( m_event )		1986550	0					
ANR	1986571	Callee	CloseHandle		1986550	0					
ANR	1986572	Identifier	CloseHandle		1986550	0					
ANR	1986573	ArgumentList	m_event		1986550	1					
ANR	1986574	Argument	m_event		1986550	0					
ANR	1986575	Identifier	m_event		1986550	0					
ANR	1986576	ExpressionStatement	CloseHandle ( m_handle )	55:1:1887:1908	1986550	3	True				
ANR	1986577	CallExpression	CloseHandle ( m_handle )		1986550	0					
ANR	1986578	Callee	CloseHandle		1986550	0					
ANR	1986579	Identifier	CloseHandle		1986550	0					
ANR	1986580	ArgumentList	m_handle		1986550	1					
ANR	1986581	Argument	m_handle		1986550	0					
ANR	1986582	Identifier	m_handle		1986550	0					
ANR	1986583	Identifier	PipeEnd :: ~PipeEnd		1986550	1					
ANR	1986584	ParameterList			1986550	2					
ANR	1986585	CFGEntryNode	ENTRY		1986550		True				
ANR	1986586	CFGExitNode	EXIT		1986550		True				
ANR	1986587	Symbol	m_event		1986550						
ANR	1986588	Symbol	m_registered		1986550						
ANR	1986589	Symbol	m_watched_event		1986550						
ANR	1986590	Symbol	m_handle		1986550						
ANR	1986591	Function	PipeEnd :: WaitForSingleObject	61:0:2078:2361							
ANR	1986592	FunctionDef	"PipeEnd :: WaitForSingleObject (HANDLE handle , DWORD millisecs)"		1986591	0					
ANR	1986593	CompoundStatement		62:0:2145:2361	1986591	0					
ANR	1986594	IdentifierDeclStatement	DWORD result ;	63:1:2148:2160	1986591	0	True				
ANR	1986595	IdentifierDecl	result		1986591	0					
ANR	1986596	IdentifierDeclType	DWORD		1986591	0					
ANR	1986597	Identifier	result		1986591	1					
ANR	1986598	Statement	::	65:1:2164:2165	1986591	1	True				
ANR	1986599	ExpressionStatement	LeaveCriticalSection ( & Big_fat_mutex )	65:3:2166:2202	1986591	2	True				
ANR	1986600	CallExpression	LeaveCriticalSection ( & Big_fat_mutex )		1986591	0					
ANR	1986601	Callee	LeaveCriticalSection		1986591	0					
ANR	1986602	Identifier	LeaveCriticalSection		1986591	0					
ANR	1986603	ArgumentList	& Big_fat_mutex		1986591	1					
ANR	1986604	Argument	& Big_fat_mutex		1986591	0					
ANR	1986605	UnaryOperationExpression	& Big_fat_mutex		1986591	0					
ANR	1986606	UnaryOperator	&		1986591	0					
ANR	1986607	Identifier	Big_fat_mutex		1986591	1					
ANR	1986608	Statement	result	66:1:2230:2235	1986591	3	True				
ANR	1986609	Statement	=	66:8:2237:2237	1986591	4	True				
ANR	1986610	Statement	::	66:10:2239:2240	1986591	5	True				
ANR	1986611	ExpressionStatement	"WaitForSingleObject ( handle , millisecs )"	66:12:2241:2278	1986591	6	True				
ANR	1986612	CallExpression	"WaitForSingleObject ( handle , millisecs )"		1986591	0					
ANR	1986613	Callee	WaitForSingleObject		1986591	0					
ANR	1986614	Identifier	WaitForSingleObject		1986591	0					
ANR	1986615	ArgumentList	handle		1986591	1					
ANR	1986616	Argument	handle		1986591	0					
ANR	1986617	Identifier	handle		1986591	0					
ANR	1986618	Argument	millisecs		1986591	1					
ANR	1986619	Identifier	millisecs		1986591	0					
ANR	1986620	Statement	::	67:1:2281:2282	1986591	7	True				
ANR	1986621	ExpressionStatement	EnterCriticalSection ( & Big_fat_mutex )	67:3:2283:2319	1986591	8	True				
ANR	1986622	CallExpression	EnterCriticalSection ( & Big_fat_mutex )		1986591	0					
ANR	1986623	Callee	EnterCriticalSection		1986591	0					
ANR	1986624	Identifier	EnterCriticalSection		1986591	0					
ANR	1986625	ArgumentList	& Big_fat_mutex		1986591	1					
ANR	1986626	Argument	& Big_fat_mutex		1986591	0					
ANR	1986627	UnaryOperationExpression	& Big_fat_mutex		1986591	0					
ANR	1986628	UnaryOperator	&		1986591	0					
ANR	1986629	Identifier	Big_fat_mutex		1986591	1					
ANR	1986630	ReturnStatement	return result ;	69:1:2346:2359	1986591	9	True				
ANR	1986631	Identifier	result		1986591	0					
ANR	1986632	ReturnType	DWORD		1986591	1					
ANR	1986633	Identifier	PipeEnd :: WaitForSingleObject		1986591	2					
ANR	1986634	ParameterList	"HANDLE handle , DWORD millisecs"		1986591	3					
ANR	1986635	Parameter	HANDLE handle	61:35:2113:2125	1986591	0	True				
ANR	1986636	ParameterType	HANDLE		1986591	0					
ANR	1986637	Identifier	handle		1986591	1					
ANR	1986638	Parameter	DWORD millisecs	61:50:2128:2142	1986591	1	True				
ANR	1986639	ParameterType	DWORD		1986591	0					
ANR	1986640	Identifier	millisecs		1986591	1					
ANR	1986641	CFGEntryNode	ENTRY		1986591		True				
ANR	1986642	CFGExitNode	EXIT		1986591		True				
ANR	1986643	Symbol	result		1986591						
ANR	1986644	Symbol	& Big_fat_mutex		1986591						
ANR	1986645	Symbol	millisecs		1986591						
ANR	1986646	Symbol	handle		1986591						
ANR	1986647	Function	PipeEnd :: set_registered	73:0:2423:2550							
ANR	1986648	FunctionDef	PipeEnd :: set_registered ()		1986647	0					
ANR	1986649	CompoundStatement		74:0:2454:2550	1986647	0					
ANR	1986650	ExpressionStatement	ASSERT ( m_overlapped && ! m_registered )	75:1:2457:2494	1986647	0	True				
ANR	1986651	CallExpression	ASSERT ( m_overlapped && ! m_registered )		1986647	0					
ANR	1986652	Callee	ASSERT		1986647	0					
ANR	1986653	Identifier	ASSERT		1986647	0					
ANR	1986654	ArgumentList	m_overlapped && ! m_registered		1986647	1					
ANR	1986655	Argument	m_overlapped && ! m_registered		1986647	0					
ANR	1986656	AndExpression	m_overlapped && ! m_registered		1986647	0		&&			
ANR	1986657	Identifier	m_overlapped		1986647	0					
ANR	1986658	UnaryOperationExpression	! m_registered		1986647	1					
ANR	1986659	UnaryOperator	!		1986647	0					
ANR	1986660	Identifier	m_registered		1986647	1					
ANR	1986661	ExpressionStatement	m_registered = true	78:1:2529:2548	1986647	1	True				
ANR	1986662	AssignmentExpression	m_registered = true		1986647	0		=			
ANR	1986663	Identifier	m_registered		1986647	0					
ANR	1986664	Identifier	true		1986647	1					
ANR	1986665	ReturnType	void		1986647	1					
ANR	1986666	Identifier	PipeEnd :: set_registered		1986647	2					
ANR	1986667	ParameterList			1986647	3					
ANR	1986668	CFGEntryNode	ENTRY		1986647		True				
ANR	1986669	CFGExitNode	EXIT		1986647		True				
ANR	1986670	Symbol	m_overlapped		1986647						
ANR	1986671	Symbol	m_registered		1986647						
ANR	1986672	Symbol	true		1986647						
ANR	1986673	Function	PipeEnd :: set_watched	82:0:2598:2700							
ANR	1986674	FunctionDef	PipeEnd :: set_watched ()		1986673	0					
ANR	1986675	CompoundStatement		83:0:2626:2700	1986673	0					
ANR	1986676	ExpressionStatement	ASSERT ( m_registered && m_watched_event )	84:1:2629:2668	1986673	0	True				
ANR	1986677	CallExpression	ASSERT ( m_registered && m_watched_event )		1986673	0					
ANR	1986678	Callee	ASSERT		1986673	0					
ANR	1986679	Identifier	ASSERT		1986673	0					
ANR	1986680	ArgumentList	m_registered && m_watched_event		1986673	1					
ANR	1986681	Argument	m_registered && m_watched_event		1986673	0					
ANR	1986682	AndExpression	m_registered && m_watched_event		1986673	0		&&			
ANR	1986683	Identifier	m_registered		1986673	0					
ANR	1986684	Identifier	m_watched_event		1986673	1					
ANR	1986685	ExpressionStatement	ResetEvent ( m_watched_event )	85:1:2671:2698	1986673	1	True				
ANR	1986686	CallExpression	ResetEvent ( m_watched_event )		1986673	0					
ANR	1986687	Callee	ResetEvent		1986673	0					
ANR	1986688	Identifier	ResetEvent		1986673	0					
ANR	1986689	ArgumentList	m_watched_event		1986673	1					
ANR	1986690	Argument	m_watched_event		1986673	0					
ANR	1986691	Identifier	m_watched_event		1986673	0					
ANR	1986692	ReturnType	void		1986673	1					
ANR	1986693	Identifier	PipeEnd :: set_watched		1986673	2					
ANR	1986694	ParameterList			1986673	3					
ANR	1986695	CFGEntryNode	ENTRY		1986673		True				
ANR	1986696	CFGExitNode	EXIT		1986673		True				
ANR	1986697	Symbol	m_registered		1986673						
ANR	1986698	Symbol	m_watched_event		1986673						
ANR	1986699	Function	PipeEnd :: set_unregistered	91:0:2857:3109							
ANR	1986700	FunctionDef	PipeEnd :: set_unregistered ()		1986699	0					
ANR	1986701	CompoundStatement		92:0:2890:3109	1986699	0					
ANR	1986702	ExpressionStatement	ASSERT ( m_registered && m_watched_event )	93:1:2893:2932	1986699	0	True				
ANR	1986703	CallExpression	ASSERT ( m_registered && m_watched_event )		1986699	0					
ANR	1986704	Callee	ASSERT		1986699	0					
ANR	1986705	Identifier	ASSERT		1986699	0					
ANR	1986706	ArgumentList	m_registered && m_watched_event		1986699	1					
ANR	1986707	Argument	m_registered && m_watched_event		1986699	0					
ANR	1986708	AndExpression	m_registered && m_watched_event		1986699	0		&&			
ANR	1986709	Identifier	m_registered		1986699	0					
ANR	1986710	Identifier	m_watched_event		1986699	1					
ANR	1986711	ExpressionStatement	m_registered = false	96:1:2968:2988	1986699	1	True				
ANR	1986712	AssignmentExpression	m_registered = false		1986699	0		=			
ANR	1986713	Identifier	m_registered		1986699	0					
ANR	1986714	Identifier	false		1986699	1					
ANR	1986715	ExpressionStatement	SetEvent ( m_watched_event )	100:1:3082:3107	1986699	2	True				
ANR	1986716	CallExpression	SetEvent ( m_watched_event )		1986699	0					
ANR	1986717	Callee	SetEvent		1986699	0					
ANR	1986718	Identifier	SetEvent		1986699	0					
ANR	1986719	ArgumentList	m_watched_event		1986699	1					
ANR	1986720	Argument	m_watched_event		1986699	0					
ANR	1986721	Identifier	m_watched_event		1986699	0					
ANR	1986722	ReturnType	void		1986699	1					
ANR	1986723	Identifier	PipeEnd :: set_unregistered		1986699	2					
ANR	1986724	ParameterList			1986699	3					
ANR	1986725	CFGEntryNode	ENTRY		1986699		True				
ANR	1986726	CFGExitNode	EXIT		1986699		True				
ANR	1986727	Symbol	m_registered		1986699						
ANR	1986728	Symbol	m_watched_event		1986699						
ANR	1986729	Symbol	false		1986699						
ANR	1986730	Function	PipeEnd :: cancel	107:0:3288:3591							
ANR	1986731	FunctionDef	PipeEnd :: cancel ()		1986730	0					
ANR	1986732	CompoundStatement		108:0:3311:3591	1986730	0					
ANR	1986733	IdentifierDeclStatement	"DWORD result = WaitForSingleObject ( m_watched_event , INFINITE ) ;"	110:1:3382:3443	1986730	0	True				
ANR	1986734	IdentifierDecl	"result = WaitForSingleObject ( m_watched_event , INFINITE )"		1986730	0					
ANR	1986735	IdentifierDeclType	DWORD		1986730	0					
ANR	1986736	Identifier	result		1986730	1					
ANR	1986737	AssignmentExpression	"result = WaitForSingleObject ( m_watched_event , INFINITE )"		1986730	2		=			
ANR	1986738	Identifier	result		1986730	0					
ANR	1986739	CallExpression	"WaitForSingleObject ( m_watched_event , INFINITE )"		1986730	1					
ANR	1986740	Callee	WaitForSingleObject		1986730	0					
ANR	1986741	Identifier	WaitForSingleObject		1986730	0					
ANR	1986742	ArgumentList	m_watched_event		1986730	1					
ANR	1986743	Argument	m_watched_event		1986730	0					
ANR	1986744	Identifier	m_watched_event		1986730	0					
ANR	1986745	Argument	INFINITE		1986730	1					
ANR	1986746	Identifier	INFINITE		1986730	0					
ANR	1986747	ExpressionStatement	ASSERT ( result == WAIT_OBJECT_0 )	111:1:3446:3477	1986730	1	True				
ANR	1986748	CallExpression	ASSERT ( result == WAIT_OBJECT_0 )		1986730	0					
ANR	1986749	Callee	ASSERT		1986730	0					
ANR	1986750	Identifier	ASSERT		1986730	0					
ANR	1986751	ArgumentList	result == WAIT_OBJECT_0		1986730	1					
ANR	1986752	Argument	result == WAIT_OBJECT_0		1986730	0					
ANR	1986753	EqualityExpression	result == WAIT_OBJECT_0		1986730	0		==			
ANR	1986754	Identifier	result		1986730	0					
ANR	1986755	Identifier	WAIT_OBJECT_0		1986730	1					
ANR	1986756	IfStatement	if ( m_registered )		1986730	2					
ANR	1986757	Condition	m_registered	114:5:3550:3561	1986730	0	True				
ANR	1986758	Identifier	m_registered		1986730	0					
ANR	1986759	CompoundStatement		7:19:252:252	1986730	1					
ANR	1986760	ExpressionStatement	set_unregistered ( )	115:2:3568:3586	1986730	0	True				
ANR	1986761	CallExpression	set_unregistered ( )		1986730	0					
ANR	1986762	Callee	set_unregistered		1986730	0					
ANR	1986763	Identifier	set_unregistered		1986730	0					
ANR	1986764	ArgumentList			1986730	1					
ANR	1986765	ReturnType	void		1986730	1					
ANR	1986766	Identifier	PipeEnd :: cancel		1986730	2					
ANR	1986767	ParameterList			1986730	3					
ANR	1986768	CFGEntryNode	ENTRY		1986730		True				
ANR	1986769	CFGExitNode	EXIT		1986730		True				
ANR	1986770	Symbol	WaitForSingleObject		1986730						
ANR	1986771	Symbol	result		1986730						
ANR	1986772	Symbol	m_watched_event		1986730						
ANR	1986773	Symbol	WAIT_OBJECT_0		1986730						
ANR	1986774	Symbol	m_registered		1986730						
ANR	1986775	Symbol	INFINITE		1986730						
ANR	1986776	Function	ReadPipeEnd :: pre_wait	119:0:3594:4582							
ANR	1986777	FunctionDef	ReadPipeEnd :: pre_wait ()		1986776	0					
ANR	1986778	CompoundStatement		120:0:3625:4582	1986776	0					
ANR	1986779	ExpressionStatement	ASSERT ( m_registered )	121:1:3628:3648	1986776	0	True				
ANR	1986780	CallExpression	ASSERT ( m_registered )		1986776	0					
ANR	1986781	Callee	ASSERT		1986776	0					
ANR	1986782	Identifier	ASSERT		1986776	0					
ANR	1986783	ArgumentList	m_registered		1986776	1					
ANR	1986784	Argument	m_registered		1986776	0					
ANR	1986785	Identifier	m_registered		1986776	0					
ANR	1986786	IfStatement	if ( m_async_io_state == IO_UNSTARTED )		1986776	1					
ANR	1986787	Condition	m_async_io_state == IO_UNSTARTED	123:5:3656:3687	1986776	0	True				
ANR	1986788	EqualityExpression	m_async_io_state == IO_UNSTARTED		1986776	0		==			
ANR	1986789	Identifier	m_async_io_state		1986776	0					
ANR	1986790	Identifier	IO_UNSTARTED		1986776	1					
ANR	1986791	CompoundStatement		11:2:209:220	1986776	1					
ANR	1986792	ExpressionStatement	"ZeroMemory ( & m_overlapped_struct , sizeof ( OVERLAPPED ) )"	127:2:3738:3790	1986776	0	True				
ANR	1986793	CallExpression	"ZeroMemory ( & m_overlapped_struct , sizeof ( OVERLAPPED ) )"		1986776	0					
ANR	1986794	Callee	ZeroMemory		1986776	0					
ANR	1986795	Identifier	ZeroMemory		1986776	0					
ANR	1986796	ArgumentList	& m_overlapped_struct		1986776	1					
ANR	1986797	Argument	& m_overlapped_struct		1986776	0					
ANR	1986798	UnaryOperationExpression	& m_overlapped_struct		1986776	0					
ANR	1986799	UnaryOperator	&		1986776	0					
ANR	1986800	Identifier	m_overlapped_struct		1986776	1					
ANR	1986801	Argument	sizeof ( OVERLAPPED )		1986776	1					
ANR	1986802	SizeofExpression	sizeof ( OVERLAPPED )		1986776	0					
ANR	1986803	Sizeof	sizeof		1986776	0					
ANR	1986804	SizeofOperand	OVERLAPPED		1986776	1					
ANR	1986805	ExpressionStatement	m_overlapped_struct . hEvent = m_event	128:2:3794:3830	1986776	1	True				
ANR	1986806	AssignmentExpression	m_overlapped_struct . hEvent = m_event		1986776	0		=			
ANR	1986807	MemberAccess	m_overlapped_struct . hEvent		1986776	0					
ANR	1986808	Identifier	m_overlapped_struct		1986776	0					
ANR	1986809	Identifier	hEvent		1986776	1					
ANR	1986810	Identifier	m_event		1986776	1					
ANR	1986811	IdentifierDeclStatement	DWORD bytes ;	130:2:3835:3846	1986776	2	True				
ANR	1986812	IdentifierDecl	bytes		1986776	0					
ANR	1986813	IdentifierDeclType	DWORD		1986776	0					
ANR	1986814	Identifier	bytes		1986776	1					
ANR	1986815	IfStatement	"if ( ReadFile ( m_handle , & m_async_io_buf , 1 , & bytes , & m_overlapped_struct ) )"		1986776	3					
ANR	1986816	Condition	"ReadFile ( m_handle , & m_async_io_buf , 1 , & bytes , & m_overlapped_struct )"	131:6:3854:3945	1986776	0	True				
ANR	1986817	CallExpression	"ReadFile ( m_handle , & m_async_io_buf , 1 , & bytes , & m_overlapped_struct )"		1986776	0					
ANR	1986818	Callee	ReadFile		1986776	0					
ANR	1986819	Identifier	ReadFile		1986776	0					
ANR	1986820	ArgumentList	m_handle		1986776	1					
ANR	1986821	Argument	m_handle		1986776	0					
ANR	1986822	Identifier	m_handle		1986776	0					
ANR	1986823	Argument	& m_async_io_buf		1986776	1					
ANR	1986824	UnaryOperationExpression	& m_async_io_buf		1986776	0					
ANR	1986825	UnaryOperator	&		1986776	0					
ANR	1986826	Identifier	m_async_io_buf		1986776	1					
ANR	1986827	Argument	1		1986776	2					
ANR	1986828	PrimaryExpression	1		1986776	0					
ANR	1986829	Argument	& bytes		1986776	3					
ANR	1986830	UnaryOperationExpression	& bytes		1986776	0					
ANR	1986831	UnaryOperator	&		1986776	0					
ANR	1986832	Identifier	bytes		1986776	1					
ANR	1986833	Argument	& m_overlapped_struct		1986776	4					
ANR	1986834	UnaryOperationExpression	& m_overlapped_struct		1986776	0					
ANR	1986835	UnaryOperator	&		1986776	0					
ANR	1986836	Identifier	m_overlapped_struct		1986776	1					
ANR	1986837	CompoundStatement		17:4:325:325	1986776	1					
ANR	1986838	ExpressionStatement	m_async_io_state = IO_DONE	138:3:4023:4049	1986776	0	True				
ANR	1986839	AssignmentExpression	m_async_io_state = IO_DONE		1986776	0		=			
ANR	1986840	Identifier	m_async_io_state		1986776	0					
ANR	1986841	Identifier	IO_DONE		1986776	1					
ANR	1986842	IfStatement	if ( bytes == 0 )		1986776	1					
ANR	1986843	Condition	bytes == 0	139:7:4058:4067	1986776	0	True				
ANR	1986844	EqualityExpression	bytes == 0		1986776	0		==			
ANR	1986845	Identifier	bytes		1986776	0					
ANR	1986846	PrimaryExpression	0		1986776	1					
ANR	1986847	CompoundStatement		20:19:444:444	1986776	1					
ANR	1986848	ExpressionStatement	m_async_io_error = ERROR_HANDLE_EOF	140:4:4076:4111	1986776	0	True				
ANR	1986849	AssignmentExpression	m_async_io_error = ERROR_HANDLE_EOF		1986776	0		=			
ANR	1986850	Identifier	m_async_io_error		1986776	0					
ANR	1986851	Identifier	ERROR_HANDLE_EOF		1986776	1					
ANR	1986852	ElseStatement	else		1986776	0					
ANR	1986853	CompoundStatement		23:8:500:500	1986776	0					
ANR	1986854	ExpressionStatement	m_async_io_error = 0	143:4:4132:4152	1986776	0	True				
ANR	1986855	AssignmentExpression	m_async_io_error = 0		1986776	0		=			
ANR	1986856	Identifier	m_async_io_error		1986776	0					
ANR	1986857	PrimaryExpression	0		1986776	1					
ANR	1986858	ElseStatement	else		1986776	0					
ANR	1986859	IfStatement	if ( GetLastError ( ) == ERROR_IO_PENDING )		1986776	0					
ANR	1986860	Condition	GetLastError ( ) == ERROR_IO_PENDING	146:11:4174:4207	1986776	0	True				
ANR	1986861	EqualityExpression	GetLastError ( ) == ERROR_IO_PENDING		1986776	0		==			
ANR	1986862	CallExpression	GetLastError ( )		1986776	0					
ANR	1986863	Callee	GetLastError		1986776	0					
ANR	1986864	Identifier	GetLastError		1986776	0					
ANR	1986865	ArgumentList			1986776	1					
ANR	1986866	Identifier	ERROR_IO_PENDING		1986776	1					
ANR	1986867	CompoundStatement		27:47:584:584	1986776	1					
ANR	1986868	ExpressionStatement	m_async_io_state = IO_PENDING	149:3:4306:4335	1986776	0	True				
ANR	1986869	AssignmentExpression	m_async_io_state = IO_PENDING		1986776	0		=			
ANR	1986870	Identifier	m_async_io_state		1986776	0					
ANR	1986871	Identifier	IO_PENDING		1986776	1					
ANR	1986872	ExpressionStatement	m_async_io_error = 0	150:3:4340:4360	1986776	1	True				
ANR	1986873	AssignmentExpression	m_async_io_error = 0		1986776	0		=			
ANR	1986874	Identifier	m_async_io_error		1986776	0					
ANR	1986875	PrimaryExpression	0		1986776	1					
ANR	1986876	ElseStatement	else		1986776	0					
ANR	1986877	CompoundStatement		33:7:747:747	1986776	0					
ANR	1986878	ExpressionStatement	m_async_io_state = IO_DONE	155:3:4469:4495	1986776	0	True				
ANR	1986879	AssignmentExpression	m_async_io_state = IO_DONE		1986776	0		=			
ANR	1986880	Identifier	m_async_io_state		1986776	0					
ANR	1986881	Identifier	IO_DONE		1986776	1					
ANR	1986882	ExpressionStatement	m_async_io_error = GetLastError ( )	156:3:4500:4533	1986776	1	True				
ANR	1986883	AssignmentExpression	m_async_io_error = GetLastError ( )		1986776	0		=			
ANR	1986884	Identifier	m_async_io_error		1986776	0					
ANR	1986885	CallExpression	GetLastError ( )		1986776	1					
ANR	1986886	Callee	GetLastError		1986776	0					
ANR	1986887	Identifier	GetLastError		1986776	0					
ANR	1986888	ArgumentList			1986776	1					
ANR	1986889	ExpressionStatement	SetEvent ( m_event )	157:3:4538:4555	1986776	2	True				
ANR	1986890	CallExpression	SetEvent ( m_event )		1986776	0					
ANR	1986891	Callee	SetEvent		1986776	0					
ANR	1986892	Identifier	SetEvent		1986776	0					
ANR	1986893	ArgumentList	m_event		1986776	1					
ANR	1986894	Argument	m_event		1986776	0					
ANR	1986895	Identifier	m_event		1986776	0					
ANR	1986896	ReturnStatement	return m_event ;	161:1:4566:4580	1986776	2	True				
ANR	1986897	Identifier	m_event		1986776	0					
ANR	1986898	ReturnType	HANDLE		1986776	1					
ANR	1986899	Identifier	ReadPipeEnd :: pre_wait		1986776	2					
ANR	1986900	ParameterList			1986776	3					
ANR	1986901	CFGEntryNode	ENTRY		1986776		True				
ANR	1986902	CFGExitNode	EXIT		1986776		True				
ANR	1986903	Symbol	m_async_io_error		1986776						
ANR	1986904	Symbol	m_event		1986776						
ANR	1986905	Symbol	IO_PENDING		1986776						
ANR	1986906	Symbol	m_async_io_state		1986776						
ANR	1986907	Symbol	ERROR_IO_PENDING		1986776						
ANR	1986908	Symbol	IO_UNSTARTED		1986776						
ANR	1986909	Symbol	m_overlapped_struct . hEvent		1986776						
ANR	1986910	Symbol	m_handle		1986776						
ANR	1986911	Symbol	IO_DONE		1986776						
ANR	1986912	Symbol	ReadFile		1986776						
ANR	1986913	Symbol	& m_async_io_buf		1986776						
ANR	1986914	Symbol	ERROR_HANDLE_EOF		1986776						
ANR	1986915	Symbol	& bytes		1986776						
ANR	1986916	Symbol	& m_overlapped_struct		1986776						
ANR	1986917	Symbol	bytes		1986776						
ANR	1986918	Symbol	GetLastError		1986776						
ANR	1986919	Symbol	m_registered		1986776						
ANR	1986920	Symbol	m_overlapped_struct		1986776						
ANR	1986921	Function	ReadPipeEnd :: post_wait	164:0:4585:5087							
ANR	1986922	FunctionDef	ReadPipeEnd :: post_wait ()		1986921	0					
ANR	1986923	CompoundStatement		165:0:4615:5087	1986921	0					
ANR	1986924	IfStatement	if ( m_async_io_state == IO_PENDING )		1986921	0					
ANR	1986925	Condition	m_async_io_state == IO_PENDING	166:5:4622:4651	1986921	0	True				
ANR	1986926	EqualityExpression	m_async_io_state == IO_PENDING		1986921	0		==			
ANR	1986927	Identifier	m_async_io_state		1986921	0					
ANR	1986928	Identifier	IO_PENDING		1986921	1					
ANR	1986929	CompoundStatement		3:2:42:53	1986921	1					
ANR	1986930	IdentifierDeclStatement	DWORD bytes ;	167:2:4658:4669	1986921	0	True				
ANR	1986931	IdentifierDecl	bytes		1986921	0					
ANR	1986932	IdentifierDeclType	DWORD		1986921	0					
ANR	1986933	Identifier	bytes		1986921	1					
ANR	1986934	IfStatement	"if ( ! GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE ) )"		1986921	1					
ANR	1986935	Condition	"! GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"	168:6:4677:4742	1986921	0	True				
ANR	1986936	UnaryOperationExpression	"! GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"		1986921	0					
ANR	1986937	UnaryOperator	!		1986921	0					
ANR	1986938	CallExpression	"GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"		1986921	1					
ANR	1986939	Callee	GetOverlappedResult		1986921	0					
ANR	1986940	Identifier	GetOverlappedResult		1986921	0					
ANR	1986941	ArgumentList	m_handle		1986921	1					
ANR	1986942	Argument	m_handle		1986921	0					
ANR	1986943	Identifier	m_handle		1986921	0					
ANR	1986944	Argument	& m_overlapped_struct		1986921	1					
ANR	1986945	UnaryOperationExpression	& m_overlapped_struct		1986921	0					
ANR	1986946	UnaryOperator	&		1986921	0					
ANR	1986947	Identifier	m_overlapped_struct		1986921	1					
ANR	1986948	Argument	& bytes		1986921	2					
ANR	1986949	UnaryOperationExpression	& bytes		1986921	0					
ANR	1986950	UnaryOperator	&		1986921	0					
ANR	1986951	Identifier	bytes		1986921	1					
ANR	1986952	Argument	TRUE		1986921	3					
ANR	1986953	Identifier	TRUE		1986921	0					
ANR	1986954	CompoundStatement		4:74:129:129	1986921	1					
ANR	1986955	ExpressionStatement	m_async_io_error = GetLastError ( )	169:3:4750:4783	1986921	0	True				
ANR	1986956	AssignmentExpression	m_async_io_error = GetLastError ( )		1986921	0		=			
ANR	1986957	Identifier	m_async_io_error		1986921	0					
ANR	1986958	CallExpression	GetLastError ( )		1986921	1					
ANR	1986959	Callee	GetLastError		1986921	0					
ANR	1986960	Identifier	GetLastError		1986921	0					
ANR	1986961	ArgumentList			1986921	1					
ANR	1986962	ElseStatement	else		1986921	0					
ANR	1986963	IfStatement	if ( bytes == 0 )		1986921	0					
ANR	1986964	Condition	bytes == 0	171:11:4800:4809	1986921	0	True				
ANR	1986965	EqualityExpression	bytes == 0		1986921	0		==			
ANR	1986966	Identifier	bytes		1986921	0					
ANR	1986967	PrimaryExpression	0		1986921	1					
ANR	1986968	CompoundStatement		7:23:196:196	1986921	1					
ANR	1986969	ExpressionStatement	m_async_io_error = ERROR_HANDLE_EOF	172:3:4817:4852	1986921	0	True				
ANR	1986970	AssignmentExpression	m_async_io_error = ERROR_HANDLE_EOF		1986921	0		=			
ANR	1986971	Identifier	m_async_io_error		1986921	0					
ANR	1986972	Identifier	ERROR_HANDLE_EOF		1986921	1					
ANR	1986973	ElseStatement	else		1986921	0					
ANR	1986974	CompoundStatement		10:7:249:249	1986921	0					
ANR	1986975	ExpressionStatement	m_async_io_error = 0	175:3:4870:4890	1986921	0	True				
ANR	1986976	AssignmentExpression	m_async_io_error = 0		1986921	0		=			
ANR	1986977	Identifier	m_async_io_error		1986921	0					
ANR	1986978	PrimaryExpression	0		1986921	1					
ANR	1986979	ExpressionStatement	m_async_io_state = IO_DONE	177:2:4898:4924	1986921	2	True				
ANR	1986980	AssignmentExpression	m_async_io_state = IO_DONE		1986921	0		=			
ANR	1986981	Identifier	m_async_io_state		1986921	0					
ANR	1986982	Identifier	IO_DONE		1986921	1					
ANR	1986983	ExpressionStatement	ASSERT ( m_async_io_state == IO_DONE )	180:1:4931:4966	1986921	1	True				
ANR	1986984	CallExpression	ASSERT ( m_async_io_state == IO_DONE )		1986921	0					
ANR	1986985	Callee	ASSERT		1986921	0					
ANR	1986986	Identifier	ASSERT		1986921	0					
ANR	1986987	ArgumentList	m_async_io_state == IO_DONE		1986921	1					
ANR	1986988	Argument	m_async_io_state == IO_DONE		1986921	0					
ANR	1986989	EqualityExpression	m_async_io_state == IO_DONE		1986921	0		==			
ANR	1986990	Identifier	m_async_io_state		1986921	0					
ANR	1986991	Identifier	IO_DONE		1986921	1					
ANR	1986992	ExpressionStatement	SetEvent ( m_watched_event )	184:1:5045:5070	1986921	2	True				
ANR	1986993	CallExpression	SetEvent ( m_watched_event )		1986921	0					
ANR	1986994	Callee	SetEvent		1986921	0					
ANR	1986995	Identifier	SetEvent		1986921	0					
ANR	1986996	ArgumentList	m_watched_event		1986921	1					
ANR	1986997	Argument	m_watched_event		1986921	0					
ANR	1986998	Identifier	m_watched_event		1986921	0					
ANR	1986999	ReturnStatement	return true ;	186:1:5074:5085	1986921	3	True				
ANR	1987000	Identifier	true		1986921	0					
ANR	1987001	ReturnType	bool		1986921	1					
ANR	1987002	Identifier	ReadPipeEnd :: post_wait		1986921	2					
ANR	1987003	ParameterList			1986921	3					
ANR	1987004	CFGEntryNode	ENTRY		1986921		True				
ANR	1987005	CFGExitNode	EXIT		1986921		True				
ANR	1987006	Symbol	m_async_io_error		1986921						
ANR	1987007	Symbol	IO_PENDING		1986921						
ANR	1987008	Symbol	m_async_io_state		1986921						
ANR	1987009	Symbol	m_handle		1986921						
ANR	1987010	Symbol	TRUE		1986921						
ANR	1987011	Symbol	IO_DONE		1986921						
ANR	1987012	Symbol	GetOverlappedResult		1986921						
ANR	1987013	Symbol	ERROR_HANDLE_EOF		1986921						
ANR	1987014	Symbol	& bytes		1986921						
ANR	1987015	Symbol	bytes		1986921						
ANR	1987016	Symbol	& m_overlapped_struct		1986921						
ANR	1987017	Symbol	GetLastError		1986921						
ANR	1987018	Symbol	m_watched_event		1986921						
ANR	1987019	Symbol	true		1986921						
ANR	1987020	Function	ReadPipeEnd :: io_ready	191:0:5206:5274							
ANR	1987021	FunctionDef	ReadPipeEnd :: io_ready ()		1987020	0					
ANR	1987022	CompoundStatement		192:0:5235:5274	1987020	0					
ANR	1987023	ReturnStatement	return m_async_io_state == IO_DONE ;	193:1:5238:5272	1987020	0	True				
ANR	1987024	EqualityExpression	m_async_io_state == IO_DONE		1987020	0		==			
ANR	1987025	Identifier	m_async_io_state		1987020	0					
ANR	1987026	Identifier	IO_DONE		1987020	1					
ANR	1987027	ReturnType	bool		1987020	1					
ANR	1987028	Identifier	ReadPipeEnd :: io_ready		1987020	2					
ANR	1987029	ParameterList			1987020	3					
ANR	1987030	CFGEntryNode	ENTRY		1987020		True				
ANR	1987031	CFGExitNode	EXIT		1987020		True				
ANR	1987032	Symbol	m_async_io_state		1987020						
ANR	1987033	Symbol	IO_DONE		1987020						
ANR	1987034	Function	ReadPipeEnd :: read	196:0:5277:7765							
ANR	1987035	FunctionDef	"ReadPipeEnd :: read (void * buffer , int len)"		1987034	0					
ANR	1987036	CompoundStatement		197:0:5322:7765	1987034	0					
ANR	1987037	IdentifierDeclStatement	int ret ;	198:1:5325:5332	1987034	0	True				
ANR	1987038	IdentifierDecl	ret		1987034	0					
ANR	1987039	IdentifierDeclType	int		1987034	0					
ANR	1987040	Identifier	ret		1987034	1					
ANR	1987041	IfStatement	if ( len > m_pipe_size )		1987034	1					
ANR	1987042	Condition	len > m_pipe_size	202:5:5444:5460	1987034	0	True				
ANR	1987043	RelationalExpression	len > m_pipe_size		1987034	0		>			
ANR	1987044	Identifier	len		1987034	0					
ANR	1987045	Identifier	m_pipe_size		1987034	1					
ANR	1987046	CompoundStatement		6:24:140:140	1987034	1					
ANR	1987047	ExpressionStatement	len = m_pipe_size	203:2:5467:5484	1987034	0	True				
ANR	1987048	AssignmentExpression	len = m_pipe_size		1987034	0		=			
ANR	1987049	Identifier	len		1987034	0					
ANR	1987050	Identifier	m_pipe_size		1987034	1					
ANR	1987051	ExpressionStatement	errno = EINVAL	207:1:5553:5567	1987034	2	True				
ANR	1987052	AssignmentExpression	errno = EINVAL		1987034	0		=			
ANR	1987053	Identifier	errno		1987034	0					
ANR	1987054	Identifier	EINVAL		1987034	1					
ANR	1987055	IdentifierDeclStatement	"DWORD result = WaitForSingleObject ( m_watched_event , m_nonblocking ? 0 : INFINITE ) ;"	210:1:5628:5709	1987034	3	True				
ANR	1987056	IdentifierDecl	"result = WaitForSingleObject ( m_watched_event , m_nonblocking ? 0 : INFINITE )"		1987034	0					
ANR	1987057	IdentifierDeclType	DWORD		1987034	0					
ANR	1987058	Identifier	result		1987034	1					
ANR	1987059	AssignmentExpression	"result = WaitForSingleObject ( m_watched_event , m_nonblocking ? 0 : INFINITE )"		1987034	2		=			
ANR	1987060	Identifier	result		1987034	0					
ANR	1987061	CallExpression	"WaitForSingleObject ( m_watched_event , m_nonblocking ? 0 : INFINITE )"		1987034	1					
ANR	1987062	Callee	WaitForSingleObject		1987034	0					
ANR	1987063	Identifier	WaitForSingleObject		1987034	0					
ANR	1987064	ArgumentList	m_watched_event		1987034	1					
ANR	1987065	Argument	m_watched_event		1987034	0					
ANR	1987066	Identifier	m_watched_event		1987034	0					
ANR	1987067	Argument	m_nonblocking ? 0 : INFINITE		1987034	1					
ANR	1987068	ConditionalExpression	m_nonblocking ? 0 : INFINITE		1987034	0					
ANR	1987069	Condition	m_nonblocking		1987034	0					
ANR	1987070	Identifier	m_nonblocking		1987034	0					
ANR	1987071	PrimaryExpression	0		1987034	1					
ANR	1987072	Identifier	INFINITE		1987034	2					
ANR	1987073	IfStatement	if ( result == WAIT_TIMEOUT )		1987034	4					
ANR	1987074	Condition	result == WAIT_TIMEOUT	211:5:5716:5737	1987034	0	True				
ANR	1987075	EqualityExpression	result == WAIT_TIMEOUT		1987034	0		==			
ANR	1987076	Identifier	result		1987034	0					
ANR	1987077	Identifier	WAIT_TIMEOUT		1987034	1					
ANR	1987078	CompoundStatement		15:29:417:417	1987034	1					
ANR	1987079	ExpressionStatement	errno = EWOULDBLOCK	212:2:5744:5763	1987034	0	True				
ANR	1987080	AssignmentExpression	errno = EWOULDBLOCK		1987034	0		=			
ANR	1987081	Identifier	errno		1987034	0					
ANR	1987082	Identifier	EWOULDBLOCK		1987034	1					
ANR	1987083	ReturnStatement	return - 1 ;	213:2:5767:5776	1987034	1	True				
ANR	1987084	UnaryOperationExpression	- 1		1987034	0					
ANR	1987085	UnaryOperator	-		1987034	0					
ANR	1987086	PrimaryExpression	1		1987034	1					
ANR	1987087	ExpressionStatement	ASSERT ( result == WAIT_OBJECT_0 )	215:1:5782:5813	1987034	5	True				
ANR	1987088	CallExpression	ASSERT ( result == WAIT_OBJECT_0 )		1987034	0					
ANR	1987089	Callee	ASSERT		1987034	0					
ANR	1987090	Identifier	ASSERT		1987034	0					
ANR	1987091	ArgumentList	result == WAIT_OBJECT_0		1987034	1					
ANR	1987092	Argument	result == WAIT_OBJECT_0		1987034	0					
ANR	1987093	EqualityExpression	result == WAIT_OBJECT_0		1987034	0		==			
ANR	1987094	Identifier	result		1987034	0					
ANR	1987095	Identifier	WAIT_OBJECT_0		1987034	1					
ANR	1987096	IfStatement	if ( m_async_io_state == IO_PENDING )		1987034	6					
ANR	1987097	Condition	m_async_io_state == IO_PENDING	220:5:5996:6025	1987034	0	True				
ANR	1987098	EqualityExpression	m_async_io_state == IO_PENDING		1987034	0		==			
ANR	1987099	Identifier	m_async_io_state		1987034	0					
ANR	1987100	Identifier	IO_PENDING		1987034	1					
ANR	1987101	CompoundStatement		34:2:888:899	1987034	1					
ANR	1987102	ExpressionStatement	ASSERT ( ! m_registered )	222:2:6033:6054	1987034	0	True				
ANR	1987103	CallExpression	ASSERT ( ! m_registered )		1987034	0					
ANR	1987104	Callee	ASSERT		1987034	0					
ANR	1987105	Identifier	ASSERT		1987034	0					
ANR	1987106	ArgumentList	! m_registered		1987034	1					
ANR	1987107	Argument	! m_registered		1987034	0					
ANR	1987108	UnaryOperationExpression	! m_registered		1987034	0					
ANR	1987109	UnaryOperator	!		1987034	0					
ANR	1987110	Identifier	m_registered		1987034	1					
ANR	1987111	IdentifierDeclStatement	"DWORD result = WaitForSingleObject ( m_event , m_nonblocking ? 0 : INFINITE ) ;"	224:2:6059:6132	1987034	1	True				
ANR	1987112	IdentifierDecl	"result = WaitForSingleObject ( m_event , m_nonblocking ? 0 : INFINITE )"		1987034	0					
ANR	1987113	IdentifierDeclType	DWORD		1987034	0					
ANR	1987114	Identifier	result		1987034	1					
ANR	1987115	AssignmentExpression	"result = WaitForSingleObject ( m_event , m_nonblocking ? 0 : INFINITE )"		1987034	2		=			
ANR	1987116	Identifier	result		1987034	0					
ANR	1987117	CallExpression	"WaitForSingleObject ( m_event , m_nonblocking ? 0 : INFINITE )"		1987034	1					
ANR	1987118	Callee	WaitForSingleObject		1987034	0					
ANR	1987119	Identifier	WaitForSingleObject		1987034	0					
ANR	1987120	ArgumentList	m_event		1987034	1					
ANR	1987121	Argument	m_event		1987034	0					
ANR	1987122	Identifier	m_event		1987034	0					
ANR	1987123	Argument	m_nonblocking ? 0 : INFINITE		1987034	1					
ANR	1987124	ConditionalExpression	m_nonblocking ? 0 : INFINITE		1987034	0					
ANR	1987125	Condition	m_nonblocking		1987034	0					
ANR	1987126	Identifier	m_nonblocking		1987034	0					
ANR	1987127	PrimaryExpression	0		1987034	1					
ANR	1987128	Identifier	INFINITE		1987034	2					
ANR	1987129	IfStatement	if ( result == WAIT_TIMEOUT )		1987034	2					
ANR	1987130	Condition	result == WAIT_TIMEOUT	225:6:6140:6161	1987034	0	True				
ANR	1987131	EqualityExpression	result == WAIT_TIMEOUT		1987034	0		==			
ANR	1987132	Identifier	result		1987034	0					
ANR	1987133	Identifier	WAIT_TIMEOUT		1987034	1					
ANR	1987134	CompoundStatement		29:30:841:841	1987034	1					
ANR	1987135	ExpressionStatement	errno = EWOULDBLOCK	226:3:6169:6188	1987034	0	True				
ANR	1987136	AssignmentExpression	errno = EWOULDBLOCK		1987034	0		=			
ANR	1987137	Identifier	errno		1987034	0					
ANR	1987138	Identifier	EWOULDBLOCK		1987034	1					
ANR	1987139	ReturnStatement	return - 1 ;	227:3:6193:6202	1987034	1	True				
ANR	1987140	UnaryOperationExpression	- 1		1987034	0					
ANR	1987141	UnaryOperator	-		1987034	0					
ANR	1987142	PrimaryExpression	1		1987034	1					
ANR	1987143	IdentifierDeclStatement	DWORD bytes ;	230:2:6211:6222	1987034	3	True				
ANR	1987144	IdentifierDecl	bytes		1987034	0					
ANR	1987145	IdentifierDeclType	DWORD		1987034	0					
ANR	1987146	Identifier	bytes		1987034	1					
ANR	1987147	IfStatement	"if ( ! GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE ) )"		1987034	4					
ANR	1987148	Condition	"! GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"	231:6:6230:6295	1987034	0	True				
ANR	1987149	UnaryOperationExpression	"! GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"		1987034	0					
ANR	1987150	UnaryOperator	!		1987034	0					
ANR	1987151	CallExpression	"GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"		1987034	1					
ANR	1987152	Callee	GetOverlappedResult		1987034	0					
ANR	1987153	Identifier	GetOverlappedResult		1987034	0					
ANR	1987154	ArgumentList	m_handle		1987034	1					
ANR	1987155	Argument	m_handle		1987034	0					
ANR	1987156	Identifier	m_handle		1987034	0					
ANR	1987157	Argument	& m_overlapped_struct		1987034	1					
ANR	1987158	UnaryOperationExpression	& m_overlapped_struct		1987034	0					
ANR	1987159	UnaryOperator	&		1987034	0					
ANR	1987160	Identifier	m_overlapped_struct		1987034	1					
ANR	1987161	Argument	& bytes		1987034	2					
ANR	1987162	UnaryOperationExpression	& bytes		1987034	0					
ANR	1987163	UnaryOperator	&		1987034	0					
ANR	1987164	Identifier	bytes		1987034	1					
ANR	1987165	Argument	TRUE		1987034	3					
ANR	1987166	Identifier	TRUE		1987034	0					
ANR	1987167	CompoundStatement		35:74:975:975	1987034	1					
ANR	1987168	ExpressionStatement	m_async_io_error = GetLastError ( )	232:3:6303:6336	1987034	0	True				
ANR	1987169	AssignmentExpression	m_async_io_error = GetLastError ( )		1987034	0		=			
ANR	1987170	Identifier	m_async_io_error		1987034	0					
ANR	1987171	CallExpression	GetLastError ( )		1987034	1					
ANR	1987172	Callee	GetLastError		1987034	0					
ANR	1987173	Identifier	GetLastError		1987034	0					
ANR	1987174	ArgumentList			1987034	1					
ANR	1987175	ElseStatement	else		1987034	0					
ANR	1987176	IfStatement	if ( bytes == 0 )		1987034	0					
ANR	1987177	Condition	bytes == 0	234:11:6353:6362	1987034	0	True				
ANR	1987178	EqualityExpression	bytes == 0		1987034	0		==			
ANR	1987179	Identifier	bytes		1987034	0					
ANR	1987180	PrimaryExpression	0		1987034	1					
ANR	1987181	CompoundStatement		38:23:1042:1042	1987034	1					
ANR	1987182	ExpressionStatement	m_async_io_error = ERROR_HANDLE_EOF	235:3:6370:6405	1987034	0	True				
ANR	1987183	AssignmentExpression	m_async_io_error = ERROR_HANDLE_EOF		1987034	0		=			
ANR	1987184	Identifier	m_async_io_error		1987034	0					
ANR	1987185	Identifier	ERROR_HANDLE_EOF		1987034	1					
ANR	1987186	ElseStatement	else		1987034	0					
ANR	1987187	CompoundStatement		41:7:1095:1095	1987034	0					
ANR	1987188	ExpressionStatement	m_async_io_error = 0	238:3:6423:6443	1987034	0	True				
ANR	1987189	AssignmentExpression	m_async_io_error = 0		1987034	0		=			
ANR	1987190	Identifier	m_async_io_error		1987034	0					
ANR	1987191	PrimaryExpression	0		1987034	1					
ANR	1987192	ExpressionStatement	m_async_io_state = IO_DONE	240:2:6451:6477	1987034	5	True				
ANR	1987193	AssignmentExpression	m_async_io_state = IO_DONE		1987034	0		=			
ANR	1987194	Identifier	m_async_io_state		1987034	0					
ANR	1987195	Identifier	IO_DONE		1987034	1					
ANR	1987196	ExpressionStatement	ASSERT ( m_async_io_state != IO_PENDING )	243:1:6484:6522	1987034	7	True				
ANR	1987197	CallExpression	ASSERT ( m_async_io_state != IO_PENDING )		1987034	0					
ANR	1987198	Callee	ASSERT		1987034	0					
ANR	1987199	Identifier	ASSERT		1987034	0					
ANR	1987200	ArgumentList	m_async_io_state != IO_PENDING		1987034	1					
ANR	1987201	Argument	m_async_io_state != IO_PENDING		1987034	0					
ANR	1987202	EqualityExpression	m_async_io_state != IO_PENDING		1987034	0		!=			
ANR	1987203	Identifier	m_async_io_state		1987034	0					
ANR	1987204	Identifier	IO_PENDING		1987034	1					
ANR	1987205	IfStatement	if ( m_async_io_state == IO_DONE )		1987034	8					
ANR	1987206	Condition	m_async_io_state == IO_DONE	245:5:6530:6556	1987034	0	True				
ANR	1987207	EqualityExpression	m_async_io_state == IO_DONE		1987034	0		==			
ANR	1987208	Identifier	m_async_io_state		1987034	0					
ANR	1987209	Identifier	IO_DONE		1987034	1					
ANR	1987210	CompoundStatement		49:34:1236:1236	1987034	1					
ANR	1987211	IfStatement	if ( m_async_io_error )		1987034	0					
ANR	1987212	Condition	m_async_io_error	247:6:6570:6585	1987034	0	True				
ANR	1987213	Identifier	m_async_io_error		1987034	0					
ANR	1987214	CompoundStatement		51:24:1265:1265	1987034	1					
ANR	1987215	IfStatement	if ( m_async_io_error == ERROR_HANDLE_EOF || m_async_io_error == ERROR_BROKEN_PIPE )		1987034	0					
ANR	1987216	Condition	m_async_io_error == ERROR_HANDLE_EOF || m_async_io_error == ERROR_BROKEN_PIPE	248:7:6597:6673	1987034	0	True				
ANR	1987217	OrExpression	m_async_io_error == ERROR_HANDLE_EOF || m_async_io_error == ERROR_BROKEN_PIPE		1987034	0		||			
ANR	1987218	EqualityExpression	m_async_io_error == ERROR_HANDLE_EOF		1987034	0		==			
ANR	1987219	Identifier	m_async_io_error		1987034	0					
ANR	1987220	Identifier	ERROR_HANDLE_EOF		1987034	1					
ANR	1987221	EqualityExpression	m_async_io_error == ERROR_BROKEN_PIPE		1987034	1		==			
ANR	1987222	Identifier	m_async_io_error		1987034	0					
ANR	1987223	Identifier	ERROR_BROKEN_PIPE		1987034	1					
ANR	1987224	CompoundStatement		52:86:1353:1353	1987034	1					
ANR	1987225	ExpressionStatement	ret = 0	249:4:6682:6689	1987034	0	True				
ANR	1987226	AssignmentExpression	ret = 0		1987034	0		=			
ANR	1987227	Identifier	ret		1987034	0					
ANR	1987228	PrimaryExpression	0		1987034	1					
ANR	1987229	ElseStatement	else		1987034	0					
ANR	1987230	CompoundStatement		55:8:1381:1381	1987034	0					
ANR	1987231	ExpressionStatement	ret = - 1	252:4:6710:6718	1987034	0	True				
ANR	1987232	AssignmentExpression	ret = - 1		1987034	0		=			
ANR	1987233	Identifier	ret		1987034	0					
ANR	1987234	UnaryOperationExpression	- 1		1987034	1					
ANR	1987235	UnaryOperator	-		1987034	0					
ANR	1987236	PrimaryExpression	1		1987034	1					
ANR	1987237	ElseStatement	else		1987034	0					
ANR	1987238	CompoundStatement		65:3:1604:1620	1987034	0					
ANR	1987239	ExpressionStatement	* ( char * ) buffer = m_async_io_buf	259:3:6888:6919	1987034	0	True				
ANR	1987240	AssignmentExpression	* ( char * ) buffer = m_async_io_buf		1987034	0		=			
ANR	1987241	UnaryOperationExpression	* ( char * ) buffer		1987034	0					
ANR	1987242	UnaryOperator	*		1987034	0					
ANR	1987243	CastExpression	( char * ) buffer		1987034	1					
ANR	1987244	CastTarget	char *		1987034	0					
ANR	1987245	Identifier	buffer		1987034	1					
ANR	1987246	Identifier	m_async_io_buf		1987034	1					
ANR	1987247	IdentifierDeclStatement	DWORD bytes_left ;	261:3:6927:6943	1987034	1	True				
ANR	1987248	IdentifierDecl	bytes_left		1987034	0					
ANR	1987249	IdentifierDeclType	DWORD		1987034	0					
ANR	1987250	Identifier	bytes_left		1987034	1					
ANR	1987251	IfStatement	"if ( ! PeekNamedPipe ( m_handle , NULL , 0 , NULL , & bytes_left , NULL ) )"		1987034	2					
ANR	1987252	Condition	"! PeekNamedPipe ( m_handle , NULL , 0 , NULL , & bytes_left , NULL )"	262:7:6952:7009	1987034	0	True				
ANR	1987253	UnaryOperationExpression	"! PeekNamedPipe ( m_handle , NULL , 0 , NULL , & bytes_left , NULL )"		1987034	0					
ANR	1987254	UnaryOperator	!		1987034	0					
ANR	1987255	CallExpression	"PeekNamedPipe ( m_handle , NULL , 0 , NULL , & bytes_left , NULL )"		1987034	1					
ANR	1987256	Callee	PeekNamedPipe		1987034	0					
ANR	1987257	Identifier	PeekNamedPipe		1987034	0					
ANR	1987258	ArgumentList	m_handle		1987034	1					
ANR	1987259	Argument	m_handle		1987034	0					
ANR	1987260	Identifier	m_handle		1987034	0					
ANR	1987261	Argument	NULL		1987034	1					
ANR	1987262	Identifier	NULL		1987034	0					
ANR	1987263	Argument	0		1987034	2					
ANR	1987264	PrimaryExpression	0		1987034	0					
ANR	1987265	Argument	NULL		1987034	3					
ANR	1987266	Identifier	NULL		1987034	0					
ANR	1987267	Argument	& bytes_left		1987034	4					
ANR	1987268	UnaryOperationExpression	& bytes_left		1987034	0					
ANR	1987269	UnaryOperator	&		1987034	0					
ANR	1987270	Identifier	bytes_left		1987034	1					
ANR	1987271	Argument	NULL		1987034	5					
ANR	1987272	Identifier	NULL		1987034	0					
ANR	1987273	CompoundStatement		66:67:1689:1689	1987034	1					
ANR	1987274	ExpressionStatement	"dprintf ( D_ALWAYS , ""PeekNamedPipe error: %d\\n"" , GetLastError ( ) )"	263:4:7018:7080	1987034	0	True				
ANR	1987275	CallExpression	"dprintf ( D_ALWAYS , ""PeekNamedPipe error: %d\\n"" , GetLastError ( ) )"		1987034	0					
ANR	1987276	Callee	dprintf		1987034	0					
ANR	1987277	Identifier	dprintf		1987034	0					
ANR	1987278	ArgumentList	D_ALWAYS		1987034	1					
ANR	1987279	Argument	D_ALWAYS		1987034	0					
ANR	1987280	Identifier	D_ALWAYS		1987034	0					
ANR	1987281	Argument	"""PeekNamedPipe error: %d\\n"""		1987034	1					
ANR	1987282	PrimaryExpression	"""PeekNamedPipe error: %d\\n"""		1987034	0					
ANR	1987283	Argument	GetLastError ( )		1987034	2					
ANR	1987284	CallExpression	GetLastError ( )		1987034	0					
ANR	1987285	Callee	GetLastError		1987034	0					
ANR	1987286	Identifier	GetLastError		1987034	0					
ANR	1987287	ArgumentList			1987034	1					
ANR	1987288	ExpressionStatement	ret = - 1	264:4:7087:7095	1987034	1	True				
ANR	1987289	AssignmentExpression	ret = - 1		1987034	0		=			
ANR	1987290	Identifier	ret		1987034	0					
ANR	1987291	UnaryOperationExpression	- 1		1987034	1					
ANR	1987292	UnaryOperator	-		1987034	0					
ANR	1987293	PrimaryExpression	1		1987034	1					
ANR	1987294	ElseStatement	else		1987034	0					
ANR	1987295	IfStatement	if ( bytes_left > 0 )		1987034	0					
ANR	1987296	Condition	bytes_left > 0	266:12:7114:7127	1987034	0	True				
ANR	1987297	RelationalExpression	bytes_left > 0		1987034	0		>			
ANR	1987298	Identifier	bytes_left		1987034	0					
ANR	1987299	PrimaryExpression	0		1987034	1					
ANR	1987300	CompoundStatement		70:28:1807:1807	1987034	1					
ANR	1987301	ExpressionStatement	"ret = read_helper ( ( char * ) buffer + 1 , len - 1 )"	269:4:7262:7307	1987034	0	True				
ANR	1987302	AssignmentExpression	"ret = read_helper ( ( char * ) buffer + 1 , len - 1 )"		1987034	0		=			
ANR	1987303	Identifier	ret		1987034	0					
ANR	1987304	CallExpression	"read_helper ( ( char * ) buffer + 1 , len - 1 )"		1987034	1					
ANR	1987305	Callee	read_helper		1987034	0					
ANR	1987306	Identifier	read_helper		1987034	0					
ANR	1987307	ArgumentList	( char * ) buffer + 1		1987034	1					
ANR	1987308	Argument	( char * ) buffer + 1		1987034	0					
ANR	1987309	AdditiveExpression	( char * ) buffer + 1		1987034	0		+			
ANR	1987310	CastExpression	( char * ) buffer		1987034	0					
ANR	1987311	CastTarget	char *		1987034	0					
ANR	1987312	Identifier	buffer		1987034	1					
ANR	1987313	PrimaryExpression	1		1987034	1					
ANR	1987314	Argument	len - 1		1987034	1					
ANR	1987315	AdditiveExpression	len - 1		1987034	0		-			
ANR	1987316	Identifier	len		1987034	0					
ANR	1987317	PrimaryExpression	1		1987034	1					
ANR	1987318	IfStatement	if ( ret != - 1 )		1987034	1					
ANR	1987319	Condition	ret != - 1	270:8:7317:7325	1987034	0	True				
ANR	1987320	EqualityExpression	ret != - 1		1987034	0		!=			
ANR	1987321	Identifier	ret		1987034	0					
ANR	1987322	UnaryOperationExpression	- 1		1987034	1					
ANR	1987323	UnaryOperator	-		1987034	0					
ANR	1987324	PrimaryExpression	1		1987034	1					
ANR	1987325	CompoundStatement		74:19:2005:2005	1987034	1					
ANR	1987326	ExpressionStatement	ret += 1	273:5:7483:7491	1987034	0	True				
ANR	1987327	AssignmentExpression	ret += 1		1987034	0		+=			
ANR	1987328	Identifier	ret		1987034	0					
ANR	1987329	PrimaryExpression	1		1987034	1					
ANR	1987330	ElseStatement	else		1987034	0					
ANR	1987331	CompoundStatement		80:8:2189:2189	1987034	0					
ANR	1987332	ExpressionStatement	ret = 1	278:4:7572:7579	1987034	0	True				
ANR	1987333	AssignmentExpression	ret = 1		1987034	0		=			
ANR	1987334	Identifier	ret		1987034	0					
ANR	1987335	PrimaryExpression	1		1987034	1					
ANR	1987336	ExpressionStatement	m_async_io_state = IO_UNSTARTED	280:3:7589:7620	1987034	3	True				
ANR	1987337	AssignmentExpression	m_async_io_state = IO_UNSTARTED		1987034	0		=			
ANR	1987338	Identifier	m_async_io_state		1987034	0					
ANR	1987339	Identifier	IO_UNSTARTED		1987034	1					
ANR	1987340	ElseStatement	else		1987034	0					
ANR	1987341	CompoundStatement		87:6:2312:2312	1987034	0					
ANR	1987342	ExpressionStatement	"ret = read_helper ( buffer , len )"	285:3:7716:7746	1987034	0	True				
ANR	1987343	AssignmentExpression	"ret = read_helper ( buffer , len )"		1987034	0		=			
ANR	1987344	Identifier	ret		1987034	0					
ANR	1987345	CallExpression	"read_helper ( buffer , len )"		1987034	1					
ANR	1987346	Callee	read_helper		1987034	0					
ANR	1987347	Identifier	read_helper		1987034	0					
ANR	1987348	ArgumentList	buffer		1987034	1					
ANR	1987349	Argument	buffer		1987034	0					
ANR	1987350	Identifier	buffer		1987034	0					
ANR	1987351	Argument	len		1987034	1					
ANR	1987352	Identifier	len		1987034	0					
ANR	1987353	ReturnStatement	return ret ;	288:1:7753:7763	1987034	9	True				
ANR	1987354	Identifier	ret		1987034	0					
ANR	1987355	ReturnType	int		1987034	1					
ANR	1987356	Identifier	ReadPipeEnd :: read		1987034	2					
ANR	1987357	ParameterList	"void * buffer , int len"		1987034	3					
ANR	1987358	Parameter	void * buffer	196:22:5299:5310	1987034	0	True				
ANR	1987359	ParameterType	void *		1987034	0					
ANR	1987360	Identifier	buffer		1987034	1					
ANR	1987361	Parameter	int len	196:36:5313:5319	1987034	1	True				
ANR	1987362	ParameterType	int		1987034	0					
ANR	1987363	Identifier	len		1987034	1					
ANR	1987364	CFGEntryNode	ENTRY		1987034		True				
ANR	1987365	CFGExitNode	EXIT		1987034		True				
ANR	1987366	Symbol	IO_UNSTARTED		1987034						
ANR	1987367	Symbol	result		1987034						
ANR	1987368	Symbol	WaitForSingleObject		1987034						
ANR	1987369	Symbol	GetOverlappedResult		1987034						
ANR	1987370	Symbol	m_pipe_size		1987034						
ANR	1987371	Symbol	len		1987034						
ANR	1987372	Symbol	& bytes		1987034						
ANR	1987373	Symbol	& m_overlapped_struct		1987034						
ANR	1987374	Symbol	WAIT_TIMEOUT		1987034						
ANR	1987375	Symbol	m_watched_event		1987034						
ANR	1987376	Symbol	WAIT_OBJECT_0		1987034						
ANR	1987377	Symbol	m_registered		1987034						
ANR	1987378	Symbol	buffer		1987034						
ANR	1987379	Symbol	ret		1987034						
ANR	1987380	Symbol	m_async_io_error		1987034						
ANR	1987381	Symbol	errno		1987034						
ANR	1987382	Symbol	m_event		1987034						
ANR	1987383	Symbol	* buffer		1987034						
ANR	1987384	Symbol	NULL		1987034						
ANR	1987385	Symbol	PeekNamedPipe		1987034						
ANR	1987386	Symbol	IO_PENDING		1987034						
ANR	1987387	Symbol	bytes_left		1987034						
ANR	1987388	Symbol	m_async_io_state		1987034						
ANR	1987389	Symbol	* ( char * ) buffer		1987034						
ANR	1987390	Symbol	& bytes_left		1987034						
ANR	1987391	Symbol	m_handle		1987034						
ANR	1987392	Symbol	D_ALWAYS		1987034						
ANR	1987393	Symbol	TRUE		1987034						
ANR	1987394	Symbol	read_helper		1987034						
ANR	1987395	Symbol	IO_DONE		1987034						
ANR	1987396	Symbol	INFINITE		1987034						
ANR	1987397	Symbol	m_nonblocking		1987034						
ANR	1987398	Symbol	EINVAL		1987034						
ANR	1987399	Symbol	ERROR_HANDLE_EOF		1987034						
ANR	1987400	Symbol	bytes		1987034						
ANR	1987401	Symbol	GetLastError		1987034						
ANR	1987402	Symbol	EWOULDBLOCK		1987034						
ANR	1987403	Symbol	ERROR_BROKEN_PIPE		1987034						
ANR	1987404	Symbol	m_async_io_buf		1987034						
ANR	1987405	Function	ReadPipeEnd :: read_helper	291:0:7768:9279							
ANR	1987406	FunctionDef	"ReadPipeEnd :: read_helper (void * buffer , int len)"		1987405	0					
ANR	1987407	CompoundStatement		292:0:7820:9279	1987405	0					
ANR	1987408	ExpressionStatement	errno = EINVAL	294:1:7873:7887	1987405	0	True				
ANR	1987409	AssignmentExpression	errno = EINVAL		1987405	0		=			
ANR	1987410	Identifier	errno		1987405	0					
ANR	1987411	Identifier	EINVAL		1987405	1					
ANR	1987412	IfStatement	if ( m_nonblocking )		1987405	1					
ANR	1987413	Condition	m_nonblocking	298:5:7988:8000	1987405	0	True				
ANR	1987414	Identifier	m_nonblocking		1987405	0					
ANR	1987415	CompoundStatement		8:2:186:203	1987405	1					
ANR	1987416	IdentifierDeclStatement	DWORD bytes_avail ;	299:2:8007:8024	1987405	0	True				
ANR	1987417	IdentifierDecl	bytes_avail		1987405	0					
ANR	1987418	IdentifierDeclType	DWORD		1987405	0					
ANR	1987419	Identifier	bytes_avail		1987405	1					
ANR	1987420	IfStatement	"if ( ! PeekNamedPipe ( m_handle , NULL , 0 , NULL , & bytes_avail , NULL ) )"		1987405	1					
ANR	1987421	Condition	"! PeekNamedPipe ( m_handle , NULL , 0 , NULL , & bytes_avail , NULL )"	300:6:8032:8090	1987405	0	True				
ANR	1987422	UnaryOperationExpression	"! PeekNamedPipe ( m_handle , NULL , 0 , NULL , & bytes_avail , NULL )"		1987405	0					
ANR	1987423	UnaryOperator	!		1987405	0					
ANR	1987424	CallExpression	"PeekNamedPipe ( m_handle , NULL , 0 , NULL , & bytes_avail , NULL )"		1987405	1					
ANR	1987425	Callee	PeekNamedPipe		1987405	0					
ANR	1987426	Identifier	PeekNamedPipe		1987405	0					
ANR	1987427	ArgumentList	m_handle		1987405	1					
ANR	1987428	Argument	m_handle		1987405	0					
ANR	1987429	Identifier	m_handle		1987405	0					
ANR	1987430	Argument	NULL		1987405	1					
ANR	1987431	Identifier	NULL		1987405	0					
ANR	1987432	Argument	0		1987405	2					
ANR	1987433	PrimaryExpression	0		1987405	0					
ANR	1987434	Argument	NULL		1987405	3					
ANR	1987435	Identifier	NULL		1987405	0					
ANR	1987436	Argument	& bytes_avail		1987405	4					
ANR	1987437	UnaryOperationExpression	& bytes_avail		1987405	0					
ANR	1987438	UnaryOperator	&		1987405	0					
ANR	1987439	Identifier	bytes_avail		1987405	1					
ANR	1987440	Argument	NULL		1987405	5					
ANR	1987441	Identifier	NULL		1987405	0					
ANR	1987442	CompoundStatement		9:67:272:272	1987405	1					
ANR	1987443	IfStatement	if ( GetLastError ( ) == ERROR_BROKEN_PIPE )		1987405	0					
ANR	1987444	Condition	GetLastError ( ) == ERROR_BROKEN_PIPE	301:7:8102:8136	1987405	0	True				
ANR	1987445	EqualityExpression	GetLastError ( ) == ERROR_BROKEN_PIPE		1987405	0		==			
ANR	1987446	CallExpression	GetLastError ( )		1987405	0					
ANR	1987447	Callee	GetLastError		1987405	0					
ANR	1987448	Identifier	GetLastError		1987405	0					
ANR	1987449	ArgumentList			1987405	1					
ANR	1987450	Identifier	ERROR_BROKEN_PIPE		1987405	1					
ANR	1987451	CompoundStatement		10:44:318:318	1987405	1					
ANR	1987452	ReturnStatement	return 0 ;	303:4:8172:8180	1987405	0	True				
ANR	1987453	PrimaryExpression	0		1987405	0					
ANR	1987454	ExpressionStatement	"dprintf ( D_ALWAYS , ""PeekNamedPipe error: %d\\n"" , GetLastError ( ) )"	305:3:8190:8252	1987405	1	True				
ANR	1987455	CallExpression	"dprintf ( D_ALWAYS , ""PeekNamedPipe error: %d\\n"" , GetLastError ( ) )"		1987405	0					
ANR	1987456	Callee	dprintf		1987405	0					
ANR	1987457	Identifier	dprintf		1987405	0					
ANR	1987458	ArgumentList	D_ALWAYS		1987405	1					
ANR	1987459	Argument	D_ALWAYS		1987405	0					
ANR	1987460	Identifier	D_ALWAYS		1987405	0					
ANR	1987461	Argument	"""PeekNamedPipe error: %d\\n"""		1987405	1					
ANR	1987462	PrimaryExpression	"""PeekNamedPipe error: %d\\n"""		1987405	0					
ANR	1987463	Argument	GetLastError ( )		1987405	2					
ANR	1987464	CallExpression	GetLastError ( )		1987405	0					
ANR	1987465	Callee	GetLastError		1987405	0					
ANR	1987466	Identifier	GetLastError		1987405	0					
ANR	1987467	ArgumentList			1987405	1					
ANR	1987468	ReturnStatement	return - 1 ;	306:3:8257:8266	1987405	2	True				
ANR	1987469	UnaryOperationExpression	- 1		1987405	0					
ANR	1987470	UnaryOperator	-		1987405	0					
ANR	1987471	PrimaryExpression	1		1987405	1					
ANR	1987472	IfStatement	if ( bytes_avail == 0 )		1987405	2					
ANR	1987473	Condition	bytes_avail == 0	308:6:8278:8293	1987405	0	True				
ANR	1987474	EqualityExpression	bytes_avail == 0		1987405	0		==			
ANR	1987475	Identifier	bytes_avail		1987405	0					
ANR	1987476	PrimaryExpression	0		1987405	1					
ANR	1987477	CompoundStatement		17:24:475:475	1987405	1					
ANR	1987478	ExpressionStatement	errno = EWOULDBLOCK	309:3:8301:8320	1987405	0	True				
ANR	1987479	AssignmentExpression	errno = EWOULDBLOCK		1987405	0		=			
ANR	1987480	Identifier	errno		1987405	0					
ANR	1987481	Identifier	EWOULDBLOCK		1987405	1					
ANR	1987482	ReturnStatement	return - 1 ;	310:3:8325:8334	1987405	1	True				
ANR	1987483	UnaryOperationExpression	- 1		1987405	0					
ANR	1987484	UnaryOperator	-		1987405	0					
ANR	1987485	PrimaryExpression	1		1987405	1					
ANR	1987486	IdentifierDeclStatement	OVERLAPPED tmp_overlapped ;	316:1:8424:8449	1987405	2	True				
ANR	1987487	IdentifierDecl	tmp_overlapped		1987405	0					
ANR	1987488	IdentifierDeclType	OVERLAPPED		1987405	0					
ANR	1987489	Identifier	tmp_overlapped		1987405	1					
ANR	1987490	IdentifierDeclStatement	OVERLAPPED * p_overlapped = NULL ;	317:1:8452:8483	1987405	3	True				
ANR	1987491	IdentifierDecl	* p_overlapped = NULL		1987405	0					
ANR	1987492	IdentifierDeclType	OVERLAPPED *		1987405	0					
ANR	1987493	Identifier	p_overlapped		1987405	1					
ANR	1987494	AssignmentExpression	* p_overlapped = NULL		1987405	2		=			
ANR	1987495	Identifier	NULL		1987405	0					
ANR	1987496	Identifier	NULL		1987405	1					
ANR	1987497	IfStatement	if ( m_overlapped )		1987405	4					
ANR	1987498	Condition	m_overlapped	318:5:8490:8501	1987405	0	True				
ANR	1987499	Identifier	m_overlapped		1987405	0					
ANR	1987500	CompoundStatement		27:19:683:683	1987405	1					
ANR	1987501	ExpressionStatement	"ZeroMemory ( & tmp_overlapped , sizeof ( OVERLAPPED ) )"	319:2:8508:8555	1987405	0	True				
ANR	1987502	CallExpression	"ZeroMemory ( & tmp_overlapped , sizeof ( OVERLAPPED ) )"		1987405	0					
ANR	1987503	Callee	ZeroMemory		1987405	0					
ANR	1987504	Identifier	ZeroMemory		1987405	0					
ANR	1987505	ArgumentList	& tmp_overlapped		1987405	1					
ANR	1987506	Argument	& tmp_overlapped		1987405	0					
ANR	1987507	UnaryOperationExpression	& tmp_overlapped		1987405	0					
ANR	1987508	UnaryOperator	&		1987405	0					
ANR	1987509	Identifier	tmp_overlapped		1987405	1					
ANR	1987510	Argument	sizeof ( OVERLAPPED )		1987405	1					
ANR	1987511	SizeofExpression	sizeof ( OVERLAPPED )		1987405	0					
ANR	1987512	Sizeof	sizeof		1987405	0					
ANR	1987513	SizeofOperand	OVERLAPPED		1987405	1					
ANR	1987514	ExpressionStatement	p_overlapped = & tmp_overlapped	320:2:8559:8589	1987405	1	True				
ANR	1987515	AssignmentExpression	p_overlapped = & tmp_overlapped		1987405	0		=			
ANR	1987516	Identifier	p_overlapped		1987405	0					
ANR	1987517	UnaryOperationExpression	& tmp_overlapped		1987405	1					
ANR	1987518	UnaryOperator	&		1987405	0					
ANR	1987519	Identifier	tmp_overlapped		1987405	1					
ANR	1987520	IdentifierDeclStatement	DWORD bytes ;	324:1:8612:8623	1987405	5	True				
ANR	1987521	IdentifierDecl	bytes		1987405	0					
ANR	1987522	IdentifierDeclType	DWORD		1987405	0					
ANR	1987523	Identifier	bytes		1987405	1					
ANR	1987524	IfStatement	"if ( ! ReadFile ( m_handle , buffer , len , & bytes , p_overlapped ) )"		1987405	6					
ANR	1987525	Condition	"! ReadFile ( m_handle , buffer , len , & bytes , p_overlapped )"	325:5:8630:8683	1987405	0	True				
ANR	1987526	UnaryOperationExpression	"! ReadFile ( m_handle , buffer , len , & bytes , p_overlapped )"		1987405	0					
ANR	1987527	UnaryOperator	!		1987405	0					
ANR	1987528	CallExpression	"ReadFile ( m_handle , buffer , len , & bytes , p_overlapped )"		1987405	1					
ANR	1987529	Callee	ReadFile		1987405	0					
ANR	1987530	Identifier	ReadFile		1987405	0					
ANR	1987531	ArgumentList	m_handle		1987405	1					
ANR	1987532	Argument	m_handle		1987405	0					
ANR	1987533	Identifier	m_handle		1987405	0					
ANR	1987534	Argument	buffer		1987405	1					
ANR	1987535	Identifier	buffer		1987405	0					
ANR	1987536	Argument	len		1987405	2					
ANR	1987537	Identifier	len		1987405	0					
ANR	1987538	Argument	& bytes		1987405	3					
ANR	1987539	UnaryOperationExpression	& bytes		1987405	0					
ANR	1987540	UnaryOperator	&		1987405	0					
ANR	1987541	Identifier	bytes		1987405	1					
ANR	1987542	Argument	p_overlapped		1987405	4					
ANR	1987543	Identifier	p_overlapped		1987405	0					
ANR	1987544	CompoundStatement		34:61:865:865	1987405	1					
ANR	1987545	IfStatement	if ( m_overlapped )		1987405	0					
ANR	1987546	Condition	m_overlapped	326:6:8694:8705	1987405	0	True				
ANR	1987547	Identifier	m_overlapped		1987405	0					
ANR	1987548	CompoundStatement		35:20:887:887	1987405	1					
ANR	1987549	IfStatement	if ( GetLastError ( ) == ERROR_IO_PENDING )		1987405	0					
ANR	1987550	Condition	GetLastError ( ) == ERROR_IO_PENDING	327:7:8717:8750	1987405	0	True				
ANR	1987551	EqualityExpression	GetLastError ( ) == ERROR_IO_PENDING		1987405	0		==			
ANR	1987552	CallExpression	GetLastError ( )		1987405	0					
ANR	1987553	Callee	GetLastError		1987405	0					
ANR	1987554	Identifier	GetLastError		1987405	0					
ANR	1987555	ArgumentList			1987405	1					
ANR	1987556	Identifier	ERROR_IO_PENDING		1987405	1					
ANR	1987557	CompoundStatement		36:43:932:932	1987405	1					
ANR	1987558	IfStatement	"if ( ! GetOverlappedResult ( m_handle , p_overlapped , & bytes , TRUE ) )"		1987405	0					
ANR	1987559	Condition	"! GetOverlappedResult ( m_handle , p_overlapped , & bytes , TRUE )"	328:8:8763:8820	1987405	0	True				
ANR	1987560	UnaryOperationExpression	"! GetOverlappedResult ( m_handle , p_overlapped , & bytes , TRUE )"		1987405	0					
ANR	1987561	UnaryOperator	!		1987405	0					
ANR	1987562	CallExpression	"GetOverlappedResult ( m_handle , p_overlapped , & bytes , TRUE )"		1987405	1					
ANR	1987563	Callee	GetOverlappedResult		1987405	0					
ANR	1987564	Identifier	GetOverlappedResult		1987405	0					
ANR	1987565	ArgumentList	m_handle		1987405	1					
ANR	1987566	Argument	m_handle		1987405	0					
ANR	1987567	Identifier	m_handle		1987405	0					
ANR	1987568	Argument	p_overlapped		1987405	1					
ANR	1987569	Identifier	p_overlapped		1987405	0					
ANR	1987570	Argument	& bytes		1987405	2					
ANR	1987571	UnaryOperationExpression	& bytes		1987405	0					
ANR	1987572	UnaryOperator	&		1987405	0					
ANR	1987573	Identifier	bytes		1987405	1					
ANR	1987574	Argument	TRUE		1987405	3					
ANR	1987575	Identifier	TRUE		1987405	0					
ANR	1987576	CompoundStatement		37:68:1002:1002	1987405	1					
ANR	1987577	IfStatement	if ( GetLastError ( ) == ERROR_HANDLE_EOF || GetLastError ( ) == ERROR_BROKEN_PIPE )		1987405	0					
ANR	1987578	Condition	GetLastError ( ) == ERROR_HANDLE_EOF || GetLastError ( ) == ERROR_BROKEN_PIPE	329:9:8834:8906	1987405	0	True				
ANR	1987579	OrExpression	GetLastError ( ) == ERROR_HANDLE_EOF || GetLastError ( ) == ERROR_BROKEN_PIPE		1987405	0		||			
ANR	1987580	EqualityExpression	GetLastError ( ) == ERROR_HANDLE_EOF		1987405	0		==			
ANR	1987581	CallExpression	GetLastError ( )		1987405	0					
ANR	1987582	Callee	GetLastError		1987405	0					
ANR	1987583	Identifier	GetLastError		1987405	0					
ANR	1987584	ArgumentList			1987405	1					
ANR	1987585	Identifier	ERROR_HANDLE_EOF		1987405	1					
ANR	1987586	EqualityExpression	GetLastError ( ) == ERROR_BROKEN_PIPE		1987405	1		==			
ANR	1987587	CallExpression	GetLastError ( )		1987405	0					
ANR	1987588	Callee	GetLastError		1987405	0					
ANR	1987589	Identifier	GetLastError		1987405	0					
ANR	1987590	ArgumentList			1987405	1					
ANR	1987591	Identifier	ERROR_BROKEN_PIPE		1987405	1					
ANR	1987592	CompoundStatement		38:84:1088:1088	1987405	1					
ANR	1987593	ExpressionStatement	bytes = 0	330:6:8917:8926	1987405	0	True				
ANR	1987594	AssignmentExpression	bytes = 0		1987405	0		=			
ANR	1987595	Identifier	bytes		1987405	0					
ANR	1987596	PrimaryExpression	0		1987405	1					
ANR	1987597	ElseStatement	else		1987405	0					
ANR	1987598	CompoundStatement		41:10:1124:1124	1987405	0					
ANR	1987599	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""GetOverlappedResult error: %d\\n"" , GetLastError ( ) )"	333:6:8953:9024	1987405	0	True				
ANR	1987600	CallExpression	"dprintf ( D_FULLDEBUG , ""GetOverlappedResult error: %d\\n"" , GetLastError ( ) )"		1987405	0					
ANR	1987601	Callee	dprintf		1987405	0					
ANR	1987602	Identifier	dprintf		1987405	0					
ANR	1987603	ArgumentList	D_FULLDEBUG		1987405	1					
ANR	1987604	Argument	D_FULLDEBUG		1987405	0					
ANR	1987605	Identifier	D_FULLDEBUG		1987405	0					
ANR	1987606	Argument	"""GetOverlappedResult error: %d\\n"""		1987405	1					
ANR	1987607	PrimaryExpression	"""GetOverlappedResult error: %d\\n"""		1987405	0					
ANR	1987608	Argument	GetLastError ( )		1987405	2					
ANR	1987609	CallExpression	GetLastError ( )		1987405	0					
ANR	1987610	Callee	GetLastError		1987405	0					
ANR	1987611	Identifier	GetLastError		1987405	0					
ANR	1987612	ArgumentList			1987405	1					
ANR	1987613	ReturnStatement	return - 1 ;	334:6:9032:9041	1987405	1	True				
ANR	1987614	UnaryOperationExpression	- 1		1987405	0					
ANR	1987615	UnaryOperator	-		1987405	0					
ANR	1987616	PrimaryExpression	1		1987405	1					
ANR	1987617	ElseStatement	else		1987405	0					
ANR	1987618	IfStatement	if ( GetLastError ( ) == ERROR_HANDLE_EOF || GetLastError ( ) == ERROR_BROKEN_PIPE )		1987405	0					
ANR	1987619	Condition	GetLastError ( ) == ERROR_HANDLE_EOF || GetLastError ( ) == ERROR_BROKEN_PIPE	339:11:9076:9148	1987405	0	True				
ANR	1987620	OrExpression	GetLastError ( ) == ERROR_HANDLE_EOF || GetLastError ( ) == ERROR_BROKEN_PIPE		1987405	0		||			
ANR	1987621	EqualityExpression	GetLastError ( ) == ERROR_HANDLE_EOF		1987405	0		==			
ANR	1987622	CallExpression	GetLastError ( )		1987405	0					
ANR	1987623	Callee	GetLastError		1987405	0					
ANR	1987624	Identifier	GetLastError		1987405	0					
ANR	1987625	ArgumentList			1987405	1					
ANR	1987626	Identifier	ERROR_HANDLE_EOF		1987405	1					
ANR	1987627	EqualityExpression	GetLastError ( ) == ERROR_BROKEN_PIPE		1987405	1		==			
ANR	1987628	CallExpression	GetLastError ( )		1987405	0					
ANR	1987629	Callee	GetLastError		1987405	0					
ANR	1987630	Identifier	GetLastError		1987405	0					
ANR	1987631	ArgumentList			1987405	1					
ANR	1987632	Identifier	ERROR_BROKEN_PIPE		1987405	1					
ANR	1987633	CompoundStatement		48:86:1330:1330	1987405	1					
ANR	1987634	ExpressionStatement	bytes = 0	340:3:9156:9165	1987405	0	True				
ANR	1987635	AssignmentExpression	bytes = 0		1987405	0		=			
ANR	1987636	Identifier	bytes		1987405	0					
ANR	1987637	PrimaryExpression	0		1987405	1					
ANR	1987638	ElseStatement	else		1987405	0					
ANR	1987639	CompoundStatement		51:7:1357:1357	1987405	0					
ANR	1987640	ExpressionStatement	"dprintf ( D_ALWAYS , ""ReadFile error: %d\\n"" , GetLastError ( ) )"	343:3:9183:9240	1987405	0	True				
ANR	1987641	CallExpression	"dprintf ( D_ALWAYS , ""ReadFile error: %d\\n"" , GetLastError ( ) )"		1987405	0					
ANR	1987642	Callee	dprintf		1987405	0					
ANR	1987643	Identifier	dprintf		1987405	0					
ANR	1987644	ArgumentList	D_ALWAYS		1987405	1					
ANR	1987645	Argument	D_ALWAYS		1987405	0					
ANR	1987646	Identifier	D_ALWAYS		1987405	0					
ANR	1987647	Argument	"""ReadFile error: %d\\n"""		1987405	1					
ANR	1987648	PrimaryExpression	"""ReadFile error: %d\\n"""		1987405	0					
ANR	1987649	Argument	GetLastError ( )		1987405	2					
ANR	1987650	CallExpression	GetLastError ( )		1987405	0					
ANR	1987651	Callee	GetLastError		1987405	0					
ANR	1987652	Identifier	GetLastError		1987405	0					
ANR	1987653	ArgumentList			1987405	1					
ANR	1987654	ReturnStatement	return - 1 ;	344:3:9245:9254	1987405	1	True				
ANR	1987655	UnaryOperationExpression	- 1		1987405	0					
ANR	1987656	UnaryOperator	-		1987405	0					
ANR	1987657	PrimaryExpression	1		1987405	1					
ANR	1987658	ReturnStatement	return bytes ;	348:1:9265:9277	1987405	7	True				
ANR	1987659	Identifier	bytes		1987405	0					
ANR	1987660	ReturnType	int		1987405	1					
ANR	1987661	Identifier	ReadPipeEnd :: read_helper		1987405	2					
ANR	1987662	ParameterList	"void * buffer , int len"		1987405	3					
ANR	1987663	Parameter	void * buffer	291:29:7797:7808	1987405	0	True				
ANR	1987664	ParameterType	void *		1987405	0					
ANR	1987665	Identifier	buffer		1987405	1					
ANR	1987666	Parameter	int len	291:43:7811:7817	1987405	1	True				
ANR	1987667	ParameterType	int		1987405	0					
ANR	1987668	Identifier	len		1987405	1					
ANR	1987669	CFGEntryNode	ENTRY		1987405		True				
ANR	1987670	CFGExitNode	EXIT		1987405		True				
ANR	1987671	Symbol	& tmp_overlapped		1987405						
ANR	1987672	Symbol	ERROR_IO_PENDING		1987405						
ANR	1987673	Symbol	ReadFile		1987405						
ANR	1987674	Symbol	GetOverlappedResult		1987405						
ANR	1987675	Symbol	len		1987405						
ANR	1987676	Symbol	& bytes		1987405						
ANR	1987677	Symbol	buffer		1987405						
ANR	1987678	Symbol	errno		1987405						
ANR	1987679	Symbol	m_overlapped		1987405						
ANR	1987680	Symbol	NULL		1987405						
ANR	1987681	Symbol	PeekNamedPipe		1987405						
ANR	1987682	Symbol	tmp_overlapped		1987405						
ANR	1987683	Symbol	m_handle		1987405						
ANR	1987684	Symbol	D_ALWAYS		1987405						
ANR	1987685	Symbol	bytes_avail		1987405						
ANR	1987686	Symbol	TRUE		1987405						
ANR	1987687	Symbol	D_FULLDEBUG		1987405						
ANR	1987688	Symbol	m_nonblocking		1987405						
ANR	1987689	Symbol	EINVAL		1987405						
ANR	1987690	Symbol	ERROR_HANDLE_EOF		1987405						
ANR	1987691	Symbol	GetLastError		1987405						
ANR	1987692	Symbol	bytes		1987405						
ANR	1987693	Symbol	EWOULDBLOCK		1987405						
ANR	1987694	Symbol	p_overlapped		1987405						
ANR	1987695	Symbol	& bytes_avail		1987405						
ANR	1987696	Symbol	ERROR_BROKEN_PIPE		1987405						
ANR	1987697	Function	WritePipeEnd :: pre_wait	353:0:9382:9433							
ANR	1987698	FunctionDef	WritePipeEnd :: pre_wait ()		1987697	0					
ANR	1987699	CompoundStatement		354:0:9414:9433	1987697	0					
ANR	1987700	ReturnStatement	return m_event ;	355:1:9417:9431	1987697	0	True				
ANR	1987701	Identifier	m_event		1987697	0					
ANR	1987702	ReturnType	HANDLE		1987697	1					
ANR	1987703	Identifier	WritePipeEnd :: pre_wait		1987697	2					
ANR	1987704	ParameterList			1987697	3					
ANR	1987705	CFGEntryNode	ENTRY		1987697		True				
ANR	1987706	CFGExitNode	EXIT		1987697		True				
ANR	1987707	Symbol	m_event		1987697						
ANR	1987708	Function	WritePipeEnd :: post_wait	361:0:9569:10578							
ANR	1987709	FunctionDef	WritePipeEnd :: post_wait ()		1987708	0					
ANR	1987710	CompoundStatement		362:0:9600:10578	1987708	0					
ANR	1987711	IfStatement	if ( m_async_io_buf )		1987708	0					
ANR	1987712	Condition	m_async_io_buf	363:5:9607:9620	1987708	0	True				
ANR	1987713	Identifier	m_async_io_buf		1987708	0					
ANR	1987714	CompoundStatement		6:2:91:102	1987708	1					
ANR	1987715	IdentifierDeclStatement	DWORD bytes ;	367:2:9692:9703	1987708	0	True				
ANR	1987716	IdentifierDecl	bytes		1987708	0					
ANR	1987717	IdentifierDeclType	DWORD		1987708	0					
ANR	1987718	Identifier	bytes		1987708	1					
ANR	1987719	ExpressionStatement	"GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"	368:2:9707:9772	1987708	1	True				
ANR	1987720	CallExpression	"GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"		1987708	0					
ANR	1987721	Callee	GetOverlappedResult		1987708	0					
ANR	1987722	Identifier	GetOverlappedResult		1987708	0					
ANR	1987723	ArgumentList	m_handle		1987708	1					
ANR	1987724	Argument	m_handle		1987708	0					
ANR	1987725	Identifier	m_handle		1987708	0					
ANR	1987726	Argument	& m_overlapped_struct		1987708	1					
ANR	1987727	UnaryOperationExpression	& m_overlapped_struct		1987708	0					
ANR	1987728	UnaryOperator	&		1987708	0					
ANR	1987729	Identifier	m_overlapped_struct		1987708	1					
ANR	1987730	Argument	& bytes		1987708	2					
ANR	1987731	UnaryOperationExpression	& bytes		1987708	0					
ANR	1987732	UnaryOperator	&		1987708	0					
ANR	1987733	Identifier	bytes		1987708	1					
ANR	1987734	Argument	TRUE		1987708	3					
ANR	1987735	Identifier	TRUE		1987708	0					
ANR	1987736	IfStatement	if ( bytes < m_async_io_size )		1987708	2					
ANR	1987737	Condition	bytes < m_async_io_size	369:6:9780:9802	1987708	0	True				
ANR	1987738	RelationalExpression	bytes < m_async_io_size		1987708	0		<			
ANR	1987739	Identifier	bytes		1987708	0					
ANR	1987740	Identifier	m_async_io_size		1987708	1					
ANR	1987741	CompoundStatement		13:3:315:352	1987708	1					
ANR	1987742	ExpressionStatement	m_async_io_size -= bytes	373:3:9887:9911	1987708	0	True				
ANR	1987743	AssignmentExpression	m_async_io_size -= bytes		1987708	0		-=			
ANR	1987744	Identifier	m_async_io_size		1987708	0					
ANR	1987745	Identifier	bytes		1987708	1					
ANR	1987746	IdentifierDeclStatement	char * buf = new char [ m_async_io_size ] ;	374:3:9916:9953	1987708	1	True				
ANR	1987747	IdentifierDecl	* buf = new char [ m_async_io_size ]		1987708	0					
ANR	1987748	IdentifierDeclType	char *		1987708	0					
ANR	1987749	Identifier	buf		1987708	1					
ANR	1987750	AssignmentExpression	* buf = new char [ m_async_io_size ]		1987708	2		=			
ANR	1987751	Identifier	m_async_io_size		1987708	0					
ANR	1987752	Identifier	m_async_io_size		1987708	1					
ANR	1987753	ExpressionStatement	"memcpy ( buf , m_async_io_buf + bytes , m_async_io_size )"	375:3:9958:10010	1987708	2	True				
ANR	1987754	CallExpression	"memcpy ( buf , m_async_io_buf + bytes , m_async_io_size )"		1987708	0					
ANR	1987755	Callee	memcpy		1987708	0					
ANR	1987756	Identifier	memcpy		1987708	0					
ANR	1987757	ArgumentList	buf		1987708	1					
ANR	1987758	Argument	buf		1987708	0					
ANR	1987759	Identifier	buf		1987708	0					
ANR	1987760	Argument	m_async_io_buf + bytes		1987708	1					
ANR	1987761	AdditiveExpression	m_async_io_buf + bytes		1987708	0		+			
ANR	1987762	Identifier	m_async_io_buf		1987708	0					
ANR	1987763	Identifier	bytes		1987708	1					
ANR	1987764	Argument	m_async_io_size		1987708	2					
ANR	1987765	Identifier	m_async_io_size		1987708	0					
ANR	1987766	Statement	delete	376:3:10015:10020	1987708	3	True				
ANR	1987767	Statement	[	376:9:10021:10021	1987708	4	True				
ANR	1987768	Statement	]	376:10:10022:10022	1987708	5	True				
ANR	1987769	ExpressionStatement	m_async_io_buf	376:12:10024:10038	1987708	6	True				
ANR	1987770	Identifier	m_async_io_buf		1987708	0					
ANR	1987771	ExpressionStatement	m_async_io_buf = buf	377:3:10043:10063	1987708	7	True				
ANR	1987772	AssignmentExpression	m_async_io_buf = buf		1987708	0		=			
ANR	1987773	Identifier	m_async_io_buf		1987708	0					
ANR	1987774	Identifier	buf		1987708	1					
ANR	1987775	ExpressionStatement	async_write_helper ( )	382:3:10214:10234	1987708	8	True				
ANR	1987776	CallExpression	async_write_helper ( )		1987708	0					
ANR	1987777	Callee	async_write_helper		1987708	0					
ANR	1987778	Identifier	async_write_helper		1987708	0					
ANR	1987779	ArgumentList			1987708	1					
ANR	1987780	ElseStatement	else		1987708	0					
ANR	1987781	CompoundStatement		25:7:648:648	1987708	0					
ANR	1987782	Statement	delete	387:3:10254:10259	1987708	0	True				
ANR	1987783	Statement	[	387:9:10260:10260	1987708	1	True				
ANR	1987784	Statement	]	387:10:10261:10261	1987708	2	True				
ANR	1987785	ExpressionStatement	m_async_io_buf	387:12:10263:10277	1987708	3	True				
ANR	1987786	Identifier	m_async_io_buf		1987708	0					
ANR	1987787	ExpressionStatement	m_async_io_buf = NULL	388:3:10282:10303	1987708	4	True				
ANR	1987788	AssignmentExpression	m_async_io_buf = NULL		1987708	0		=			
ANR	1987789	Identifier	m_async_io_buf		1987708	0					
ANR	1987790	Identifier	NULL		1987708	1					
ANR	1987791	IfStatement	if ( m_async_io_buf )		1987708	1					
ANR	1987792	Condition	m_async_io_buf	392:5:10318:10331	1987708	0	True				
ANR	1987793	Identifier	m_async_io_buf		1987708	0					
ANR	1987794	CompoundStatement		31:21:733:733	1987708	1					
ANR	1987795	ReturnStatement	return false ;	394:2:10402:10414	1987708	0	True				
ANR	1987796	Identifier	false		1987708	0					
ANR	1987797	ElseStatement	else		1987708	0					
ANR	1987798	CompoundStatement		35:6:824:824	1987708	0					
ANR	1987799	ExpressionStatement	SetEvent ( m_watched_event )	399:2:10532:10557	1987708	0	True				
ANR	1987800	CallExpression	SetEvent ( m_watched_event )		1987708	0					
ANR	1987801	Callee	SetEvent		1987708	0					
ANR	1987802	Identifier	SetEvent		1987708	0					
ANR	1987803	ArgumentList	m_watched_event		1987708	1					
ANR	1987804	Argument	m_watched_event		1987708	0					
ANR	1987805	Identifier	m_watched_event		1987708	0					
ANR	1987806	ReturnStatement	return true ;	401:2:10562:10573	1987708	1	True				
ANR	1987807	Identifier	true		1987708	0					
ANR	1987808	ReturnType	bool		1987708	1					
ANR	1987809	Identifier	WritePipeEnd :: post_wait		1987708	2					
ANR	1987810	ParameterList			1987708	3					
ANR	1987811	CFGEntryNode	ENTRY		1987708		True				
ANR	1987812	CFGExitNode	EXIT		1987708		True				
ANR	1987813	Symbol	buf		1987708						
ANR	1987814	Symbol	NULL		1987708						
ANR	1987815	Symbol	& bytes		1987708						
ANR	1987816	Symbol	bytes		1987708						
ANR	1987817	Symbol	& m_overlapped_struct		1987708						
ANR	1987818	Symbol	m_async_io_size		1987708						
ANR	1987819	Symbol	m_handle		1987708						
ANR	1987820	Symbol	false		1987708						
ANR	1987821	Symbol	m_watched_event		1987708						
ANR	1987822	Symbol	true		1987708						
ANR	1987823	Symbol	TRUE		1987708						
ANR	1987824	Symbol	m_async_io_buf		1987708						
ANR	1987825	Function	WritePipeEnd :: io_ready	407:0:10683:10747							
ANR	1987826	FunctionDef	WritePipeEnd :: io_ready ()		1987825	0					
ANR	1987827	CompoundStatement		408:0:10713:10747	1987825	0					
ANR	1987828	ReturnStatement	return m_async_io_buf == NULL ;	409:1:10716:10745	1987825	0	True				
ANR	1987829	EqualityExpression	m_async_io_buf == NULL		1987825	0		==			
ANR	1987830	Identifier	m_async_io_buf		1987825	0					
ANR	1987831	Identifier	NULL		1987825	1					
ANR	1987832	ReturnType	bool		1987825	1					
ANR	1987833	Identifier	WritePipeEnd :: io_ready		1987825	2					
ANR	1987834	ParameterList			1987825	3					
ANR	1987835	CFGEntryNode	ENTRY		1987825		True				
ANR	1987836	CFGExitNode	EXIT		1987825		True				
ANR	1987837	Symbol	NULL		1987825						
ANR	1987838	Symbol	m_async_io_buf		1987825						
ANR	1987839	Function	WritePipeEnd :: write	412:0:10750:12042							
ANR	1987840	FunctionDef	"WritePipeEnd :: write (const void * buffer , int len)"		1987839	0					
ANR	1987841	CompoundStatement		413:0:10803:12042	1987839	0					
ANR	1987842	ExpressionStatement	errno = EINVAL	415:1:10856:10870	1987839	0	True				
ANR	1987843	AssignmentExpression	errno = EINVAL		1987839	0		=			
ANR	1987844	Identifier	errno		1987839	0					
ANR	1987845	Identifier	EINVAL		1987839	1					
ANR	1987846	IfStatement	if ( ! m_overlapped )		1987839	1					
ANR	1987847	Condition	! m_overlapped	417:5:10878:10890	1987839	0	True				
ANR	1987848	UnaryOperationExpression	! m_overlapped		1987839	0					
ANR	1987849	UnaryOperator	!		1987839	0					
ANR	1987850	Identifier	m_overlapped		1987839	1					
ANR	1987851	CompoundStatement		9:2:219:230	1987839	1					
ANR	1987852	IdentifierDeclStatement	DWORD bytes ;	421:2:11023:11034	1987839	0	True				
ANR	1987853	IdentifierDecl	bytes		1987839	0					
ANR	1987854	IdentifierDeclType	DWORD		1987839	0					
ANR	1987855	Identifier	bytes		1987839	1					
ANR	1987856	IfStatement	"if ( ! WriteFile ( m_handle , buffer , len , & bytes , NULL ) )"		1987839	1					
ANR	1987857	Condition	"! WriteFile ( m_handle , buffer , len , & bytes , NULL )"	422:6:11042:11088	1987839	0	True				
ANR	1987858	UnaryOperationExpression	"! WriteFile ( m_handle , buffer , len , & bytes , NULL )"		1987839	0					
ANR	1987859	UnaryOperator	!		1987839	0					
ANR	1987860	CallExpression	"WriteFile ( m_handle , buffer , len , & bytes , NULL )"		1987839	1					
ANR	1987861	Callee	WriteFile		1987839	0					
ANR	1987862	Identifier	WriteFile		1987839	0					
ANR	1987863	ArgumentList	m_handle		1987839	1					
ANR	1987864	Argument	m_handle		1987839	0					
ANR	1987865	Identifier	m_handle		1987839	0					
ANR	1987866	Argument	buffer		1987839	1					
ANR	1987867	Identifier	buffer		1987839	0					
ANR	1987868	Argument	len		1987839	2					
ANR	1987869	Identifier	len		1987839	0					
ANR	1987870	Argument	& bytes		1987839	3					
ANR	1987871	UnaryOperationExpression	& bytes		1987839	0					
ANR	1987872	UnaryOperator	&		1987839	0					
ANR	1987873	Identifier	bytes		1987839	1					
ANR	1987874	Argument	NULL		1987839	4					
ANR	1987875	Identifier	NULL		1987839	0					
ANR	1987876	CompoundStatement		10:55:287:287	1987839	1					
ANR	1987877	ExpressionStatement	"dprintf ( D_ALWAYS , ""WriteFile error: %d\\n"" , GetLastError ( ) )"	423:3:11096:11154	1987839	0	True				
ANR	1987878	CallExpression	"dprintf ( D_ALWAYS , ""WriteFile error: %d\\n"" , GetLastError ( ) )"		1987839	0					
ANR	1987879	Callee	dprintf		1987839	0					
ANR	1987880	Identifier	dprintf		1987839	0					
ANR	1987881	ArgumentList	D_ALWAYS		1987839	1					
ANR	1987882	Argument	D_ALWAYS		1987839	0					
ANR	1987883	Identifier	D_ALWAYS		1987839	0					
ANR	1987884	Argument	"""WriteFile error: %d\\n"""		1987839	1					
ANR	1987885	PrimaryExpression	"""WriteFile error: %d\\n"""		1987839	0					
ANR	1987886	Argument	GetLastError ( )		1987839	2					
ANR	1987887	CallExpression	GetLastError ( )		1987839	0					
ANR	1987888	Callee	GetLastError		1987839	0					
ANR	1987889	Identifier	GetLastError		1987839	0					
ANR	1987890	ArgumentList			1987839	1					
ANR	1987891	ReturnStatement	return - 1 ;	424:3:11159:11168	1987839	1	True				
ANR	1987892	UnaryOperationExpression	- 1		1987839	0					
ANR	1987893	UnaryOperator	-		1987839	0					
ANR	1987894	PrimaryExpression	1		1987839	1					
ANR	1987895	ReturnStatement	return bytes ;	426:2:11176:11188	1987839	2	True				
ANR	1987896	Identifier	bytes		1987839	0					
ANR	1987897	ElseStatement	else		1987839	0					
ANR	1987898	CompoundStatement		36:2:890:903	1987839	0					
ANR	1987899	IdentifierDeclStatement	"DWORD result = WaitForSingleObject ( m_watched_event , m_nonblocking ? 0 : INFINITE ) ;"	431:2:11260:11341	1987839	0	True				
ANR	1987900	IdentifierDecl	"result = WaitForSingleObject ( m_watched_event , m_nonblocking ? 0 : INFINITE )"		1987839	0					
ANR	1987901	IdentifierDeclType	DWORD		1987839	0					
ANR	1987902	Identifier	result		1987839	1					
ANR	1987903	AssignmentExpression	"result = WaitForSingleObject ( m_watched_event , m_nonblocking ? 0 : INFINITE )"		1987839	2		=			
ANR	1987904	Identifier	result		1987839	0					
ANR	1987905	CallExpression	"WaitForSingleObject ( m_watched_event , m_nonblocking ? 0 : INFINITE )"		1987839	1					
ANR	1987906	Callee	WaitForSingleObject		1987839	0					
ANR	1987907	Identifier	WaitForSingleObject		1987839	0					
ANR	1987908	ArgumentList	m_watched_event		1987839	1					
ANR	1987909	Argument	m_watched_event		1987839	0					
ANR	1987910	Identifier	m_watched_event		1987839	0					
ANR	1987911	Argument	m_nonblocking ? 0 : INFINITE		1987839	1					
ANR	1987912	ConditionalExpression	m_nonblocking ? 0 : INFINITE		1987839	0					
ANR	1987913	Condition	m_nonblocking		1987839	0					
ANR	1987914	Identifier	m_nonblocking		1987839	0					
ANR	1987915	PrimaryExpression	0		1987839	1					
ANR	1987916	Identifier	INFINITE		1987839	2					
ANR	1987917	IfStatement	if ( result == WAIT_TIMEOUT )		1987839	1					
ANR	1987918	Condition	result == WAIT_TIMEOUT	432:6:11349:11370	1987839	0	True				
ANR	1987919	EqualityExpression	result == WAIT_TIMEOUT		1987839	0		==			
ANR	1987920	Identifier	result		1987839	0					
ANR	1987921	Identifier	WAIT_TIMEOUT		1987839	1					
ANR	1987922	CompoundStatement		20:30:569:569	1987839	1					
ANR	1987923	ExpressionStatement	errno = EWOULDBLOCK	433:3:11378:11397	1987839	0	True				
ANR	1987924	AssignmentExpression	errno = EWOULDBLOCK		1987839	0		=			
ANR	1987925	Identifier	errno		1987839	0					
ANR	1987926	Identifier	EWOULDBLOCK		1987839	1					
ANR	1987927	ReturnStatement	return - 1 ;	434:3:11402:11411	1987839	1	True				
ANR	1987928	UnaryOperationExpression	- 1		1987839	0					
ANR	1987929	UnaryOperator	-		1987839	0					
ANR	1987930	PrimaryExpression	1		1987839	1					
ANR	1987931	ExpressionStatement	ASSERT ( result == WAIT_OBJECT_0 )	436:2:11419:11450	1987839	2	True				
ANR	1987932	CallExpression	ASSERT ( result == WAIT_OBJECT_0 )		1987839	0					
ANR	1987933	Callee	ASSERT		1987839	0					
ANR	1987934	Identifier	ASSERT		1987839	0					
ANR	1987935	ArgumentList	result == WAIT_OBJECT_0		1987839	1					
ANR	1987936	Argument	result == WAIT_OBJECT_0		1987839	0					
ANR	1987937	EqualityExpression	result == WAIT_OBJECT_0		1987839	0		==			
ANR	1987938	Identifier	result		1987839	0					
ANR	1987939	Identifier	WAIT_OBJECT_0		1987839	1					
ANR	1987940	WhileStatement	while ( m_async_io_buf )		1987839	3					
ANR	1987941	Condition	m_async_io_buf	439:9:11513:11526	1987839	0	True				
ANR	1987942	Identifier	m_async_io_buf		1987839	0					
ANR	1987943	CompoundStatement		27:25:725:725	1987839	1					
ANR	1987944	IfStatement	if ( ! complete_async_write ( m_nonblocking ) )		1987839	0					
ANR	1987945	Condition	! complete_async_write ( m_nonblocking )	442:7:11602:11637	1987839	0	True				
ANR	1987946	UnaryOperationExpression	! complete_async_write ( m_nonblocking )		1987839	0					
ANR	1987947	UnaryOperator	!		1987839	0					
ANR	1987948	CallExpression	complete_async_write ( m_nonblocking )		1987839	1					
ANR	1987949	Callee	complete_async_write		1987839	0					
ANR	1987950	Identifier	complete_async_write		1987839	0					
ANR	1987951	ArgumentList	m_nonblocking		1987839	1					
ANR	1987952	Argument	m_nonblocking		1987839	0					
ANR	1987953	Identifier	m_nonblocking		1987839	0					
ANR	1987954	CompoundStatement		30:45:836:836	1987839	1					
ANR	1987955	ExpressionStatement	errno = EWOULDBLOCK	443:4:11646:11665	1987839	0	True				
ANR	1987956	AssignmentExpression	errno = EWOULDBLOCK		1987839	0		=			
ANR	1987957	Identifier	errno		1987839	0					
ANR	1987958	Identifier	EWOULDBLOCK		1987839	1					
ANR	1987959	ReturnStatement	return - 1 ;	444:4:11671:11680	1987839	1	True				
ANR	1987960	UnaryOperationExpression	- 1		1987839	0					
ANR	1987961	UnaryOperator	-		1987839	0					
ANR	1987962	PrimaryExpression	1		1987839	1					
ANR	1987963	IdentifierDeclStatement	int ret = len ;	448:2:11694:11707	1987839	4	True				
ANR	1987964	IdentifierDecl	ret = len		1987839	0					
ANR	1987965	IdentifierDeclType	int		1987839	0					
ANR	1987966	Identifier	ret		1987839	1					
ANR	1987967	AssignmentExpression	ret = len		1987839	2		=			
ANR	1987968	Identifier	len		1987839	0					
ANR	1987969	Identifier	len		1987839	1					
ANR	1987970	IfStatement	if ( m_async_io_error )		1987839	5					
ANR	1987971	Condition	m_async_io_error	450:6:11716:11731	1987839	0	True				
ANR	1987972	Identifier	m_async_io_error		1987839	0					
ANR	1987973	CompoundStatement		38:24:930:930	1987839	1					
ANR	1987974	ExpressionStatement	ret = - 1	451:3:11739:11747	1987839	0	True				
ANR	1987975	AssignmentExpression	ret = - 1		1987839	0		=			
ANR	1987976	Identifier	ret		1987839	0					
ANR	1987977	UnaryOperationExpression	- 1		1987839	1					
ANR	1987978	UnaryOperator	-		1987839	0					
ANR	1987979	PrimaryExpression	1		1987839	1					
ANR	1987980	ElseStatement	else		1987839	0					
ANR	1987981	CompoundStatement		41:7:956:956	1987839	0					
ANR	1987982	ExpressionStatement	m_async_io_size = len	455:3:11812:11833	1987839	0	True				
ANR	1987983	AssignmentExpression	m_async_io_size = len		1987839	0		=			
ANR	1987984	Identifier	m_async_io_size		1987839	0					
ANR	1987985	Identifier	len		1987839	1					
ANR	1987986	ExpressionStatement	m_async_io_buf = new char [ m_async_io_size ]	456:3:11838:11880	1987839	1	True				
ANR	1987987	AssignmentExpression	m_async_io_buf = new char [ m_async_io_size ]		1987839	0		=			
ANR	1987988	Identifier	m_async_io_buf		1987839	0					
ANR	1987989	Identifier	m_async_io_size		1987839	1					
ANR	1987990	ExpressionStatement	"memcpy ( m_async_io_buf , buffer , m_async_io_size )"	457:3:11885:11932	1987839	2	True				
ANR	1987991	CallExpression	"memcpy ( m_async_io_buf , buffer , m_async_io_size )"		1987839	0					
ANR	1987992	Callee	memcpy		1987839	0					
ANR	1987993	Identifier	memcpy		1987839	0					
ANR	1987994	ArgumentList	m_async_io_buf		1987839	1					
ANR	1987995	Argument	m_async_io_buf		1987839	0					
ANR	1987996	Identifier	m_async_io_buf		1987839	0					
ANR	1987997	Argument	buffer		1987839	1					
ANR	1987998	Identifier	buffer		1987839	0					
ANR	1987999	Argument	m_async_io_size		1987839	2					
ANR	1988000	Identifier	m_async_io_size		1987839	0					
ANR	1988001	IfStatement	if ( async_write_helper ( ) == - 1 )		1987839	3					
ANR	1988002	Condition	async_write_helper ( ) == - 1	458:7:11941:11966	1987839	0	True				
ANR	1988003	EqualityExpression	async_write_helper ( ) == - 1		1987839	0		==			
ANR	1988004	CallExpression	async_write_helper ( )		1987839	0					
ANR	1988005	Callee	async_write_helper		1987839	0					
ANR	1988006	Identifier	async_write_helper		1987839	0					
ANR	1988007	ArgumentList			1987839	1					
ANR	1988008	UnaryOperationExpression	- 1		1987839	1					
ANR	1988009	UnaryOperator	-		1987839	0					
ANR	1988010	PrimaryExpression	1		1987839	1					
ANR	1988011	CompoundStatement		46:35:1165:1165	1987839	1					
ANR	1988012	ExpressionStatement	ret = - 1	459:4:11975:11983	1987839	0	True				
ANR	1988013	AssignmentExpression	ret = - 1		1987839	0		=			
ANR	1988014	Identifier	ret		1987839	0					
ANR	1988015	UnaryOperationExpression	- 1		1987839	1					
ANR	1988016	UnaryOperator	-		1987839	0					
ANR	1988017	PrimaryExpression	1		1987839	1					
ANR	1988018	ElseStatement	else		1987839	0					
ANR	1988019	CompoundStatement		49:8:1194:1194	1987839	0					
ANR	1988020	ExpressionStatement	ret = len	462:4:12004:12013	1987839	0	True				
ANR	1988021	AssignmentExpression	ret = len		1987839	0		=			
ANR	1988022	Identifier	ret		1987839	0					
ANR	1988023	Identifier	len		1987839	1					
ANR	1988024	ReturnStatement	return ret ;	466:2:12027:12037	1987839	6	True				
ANR	1988025	Identifier	ret		1987839	0					
ANR	1988026	ReturnType	int		1987839	1					
ANR	1988027	Identifier	WritePipeEnd :: write		1987839	2					
ANR	1988028	ParameterList	"const void * buffer , int len"		1987839	3					
ANR	1988029	Parameter	const void * buffer	412:24:10774:10791	1987839	0	True				
ANR	1988030	ParameterType	const void *		1987839	0					
ANR	1988031	Identifier	buffer		1987839	1					
ANR	1988032	Parameter	int len	412:44:10794:10800	1987839	1	True				
ANR	1988033	ParameterType	int		1987839	0					
ANR	1988034	Identifier	len		1987839	1					
ANR	1988035	CFGEntryNode	ENTRY		1987839		True				
ANR	1988036	CFGExitNode	EXIT		1987839		True				
ANR	1988037	Symbol	WriteFile		1987839						
ANR	1988038	Symbol	m_async_io_size		1987839						
ANR	1988039	Symbol	WaitForSingleObject		1987839						
ANR	1988040	Symbol	result		1987839						
ANR	1988041	Symbol	len		1987839						
ANR	1988042	Symbol	& bytes		1987839						
ANR	1988043	Symbol	complete_async_write		1987839						
ANR	1988044	Symbol	WAIT_TIMEOUT		1987839						
ANR	1988045	Symbol	m_watched_event		1987839						
ANR	1988046	Symbol	WAIT_OBJECT_0		1987839						
ANR	1988047	Symbol	buffer		1987839						
ANR	1988048	Symbol	ret		1987839						
ANR	1988049	Symbol	m_async_io_error		1987839						
ANR	1988050	Symbol	errno		1987839						
ANR	1988051	Symbol	m_overlapped		1987839						
ANR	1988052	Symbol	NULL		1987839						
ANR	1988053	Symbol	m_handle		1987839						
ANR	1988054	Symbol	D_ALWAYS		1987839						
ANR	1988055	Symbol	INFINITE		1987839						
ANR	1988056	Symbol	m_nonblocking		1987839						
ANR	1988057	Symbol	EINVAL		1987839						
ANR	1988058	Symbol	async_write_helper		1987839						
ANR	1988059	Symbol	bytes		1987839						
ANR	1988060	Symbol	GetLastError		1987839						
ANR	1988061	Symbol	EWOULDBLOCK		1987839						
ANR	1988062	Symbol	m_async_io_buf		1987839						
ANR	1988063	Function	WritePipeEnd :: async_write_helper	478:0:12400:13611							
ANR	1988064	FunctionDef	WritePipeEnd :: async_write_helper ()		1988063	0					
ANR	1988065	CompoundStatement		479:0:12439:13611	1988063	0					
ANR	1988066	IdentifierDeclStatement	int ret ;	480:1:12442:12449	1988063	0	True				
ANR	1988067	IdentifierDecl	ret		1988063	0					
ANR	1988068	IdentifierDeclType	int		1988063	0					
ANR	1988069	Identifier	ret		1988063	1					
ANR	1988070	ExpressionStatement	m_async_io_error = 0	482:1:12453:12473	1988063	1	True				
ANR	1988071	AssignmentExpression	m_async_io_error = 0		1988063	0		=			
ANR	1988072	Identifier	m_async_io_error		1988063	0					
ANR	1988073	PrimaryExpression	0		1988063	1					
ANR	1988074	IdentifierDeclStatement	bool keep_going ;	484:1:12477:12492	1988063	2	True				
ANR	1988075	IdentifierDecl	keep_going		1988063	0					
ANR	1988076	IdentifierDeclType	bool		1988063	0					
ANR	1988077	Identifier	keep_going		1988063	1					
ANR	1988078	DoStatement	do		1988063	3					
ANR	1988079	CompoundStatement		11:2:180:191	1988063	0					
ANR	1988080	ExpressionStatement	keep_going = false	486:2:12502:12520	1988063	0	True				
ANR	1988081	AssignmentExpression	keep_going = false		1988063	0		=			
ANR	1988082	Identifier	keep_going		1988063	0					
ANR	1988083	Identifier	false		1988063	1					
ANR	1988084	ExpressionStatement	"ZeroMemory ( & m_overlapped_struct , sizeof ( OVERLAPPED ) )"	487:2:12524:12576	1988063	1	True				
ANR	1988085	CallExpression	"ZeroMemory ( & m_overlapped_struct , sizeof ( OVERLAPPED ) )"		1988063	0					
ANR	1988086	Callee	ZeroMemory		1988063	0					
ANR	1988087	Identifier	ZeroMemory		1988063	0					
ANR	1988088	ArgumentList	& m_overlapped_struct		1988063	1					
ANR	1988089	Argument	& m_overlapped_struct		1988063	0					
ANR	1988090	UnaryOperationExpression	& m_overlapped_struct		1988063	0					
ANR	1988091	UnaryOperator	&		1988063	0					
ANR	1988092	Identifier	m_overlapped_struct		1988063	1					
ANR	1988093	Argument	sizeof ( OVERLAPPED )		1988063	1					
ANR	1988094	SizeofExpression	sizeof ( OVERLAPPED )		1988063	0					
ANR	1988095	Sizeof	sizeof		1988063	0					
ANR	1988096	SizeofOperand	OVERLAPPED		1988063	1					
ANR	1988097	ExpressionStatement	m_overlapped_struct . hEvent = m_event	488:2:12580:12616	1988063	2	True				
ANR	1988098	AssignmentExpression	m_overlapped_struct . hEvent = m_event		1988063	0		=			
ANR	1988099	MemberAccess	m_overlapped_struct . hEvent		1988063	0					
ANR	1988100	Identifier	m_overlapped_struct		1988063	0					
ANR	1988101	Identifier	hEvent		1988063	1					
ANR	1988102	Identifier	m_event		1988063	1					
ANR	1988103	IdentifierDeclStatement	DWORD bytes ;	489:2:12620:12631	1988063	3	True				
ANR	1988104	IdentifierDecl	bytes		1988063	0					
ANR	1988105	IdentifierDeclType	DWORD		1988063	0					
ANR	1988106	Identifier	bytes		1988063	1					
ANR	1988107	IfStatement	"if ( WriteFile ( m_handle , m_async_io_buf , m_async_io_size , & bytes , & m_overlapped_struct ) )"		1988063	4					
ANR	1988108	Condition	"WriteFile ( m_handle , m_async_io_buf , m_async_io_size , & bytes , & m_overlapped_struct )"	490:6:12639:12720	1988063	0	True				
ANR	1988109	CallExpression	"WriteFile ( m_handle , m_async_io_buf , m_async_io_size , & bytes , & m_overlapped_struct )"		1988063	0					
ANR	1988110	Callee	WriteFile		1988063	0					
ANR	1988111	Identifier	WriteFile		1988063	0					
ANR	1988112	ArgumentList	m_handle		1988063	1					
ANR	1988113	Argument	m_handle		1988063	0					
ANR	1988114	Identifier	m_handle		1988063	0					
ANR	1988115	Argument	m_async_io_buf		1988063	1					
ANR	1988116	Identifier	m_async_io_buf		1988063	0					
ANR	1988117	Argument	m_async_io_size		1988063	2					
ANR	1988118	Identifier	m_async_io_size		1988063	0					
ANR	1988119	Argument	& bytes		1988063	3					
ANR	1988120	UnaryOperationExpression	& bytes		1988063	0					
ANR	1988121	UnaryOperator	&		1988063	0					
ANR	1988122	Identifier	bytes		1988063	1					
ANR	1988123	Argument	& m_overlapped_struct		1988063	4					
ANR	1988124	UnaryOperationExpression	& m_overlapped_struct		1988063	0					
ANR	1988125	UnaryOperator	&		1988063	0					
ANR	1988126	Identifier	m_overlapped_struct		1988063	1					
ANR	1988127	CompoundStatement		12:90:283:283	1988063	1					
ANR	1988128	IfStatement	if ( bytes == m_async_io_size )		1988063	0					
ANR	1988129	Condition	bytes == m_async_io_size	491:7:12732:12755	1988063	0	True				
ANR	1988130	EqualityExpression	bytes == m_async_io_size		1988063	0		==			
ANR	1988131	Identifier	bytes		1988063	0					
ANR	1988132	Identifier	m_async_io_size		1988063	1					
ANR	1988133	CompoundStatement		13:33:318:318	1988063	1					
ANR	1988134	Statement	delete	493:4:12833:12838	1988063	0	True				
ANR	1988135	Statement	[	493:10:12839:12839	1988063	1	True				
ANR	1988136	Statement	]	493:11:12840:12840	1988063	2	True				
ANR	1988137	ExpressionStatement	m_async_io_buf	493:13:12842:12856	1988063	3	True				
ANR	1988138	Identifier	m_async_io_buf		1988063	0					
ANR	1988139	ExpressionStatement	m_async_io_buf = NULL	494:4:12862:12883	1988063	4	True				
ANR	1988140	AssignmentExpression	m_async_io_buf = NULL		1988063	0		=			
ANR	1988141	Identifier	m_async_io_buf		1988063	0					
ANR	1988142	Identifier	NULL		1988063	1					
ANR	1988143	ExpressionStatement	m_async_io_size = 0	495:4:12889:12908	1988063	5	True				
ANR	1988144	AssignmentExpression	m_async_io_size = 0		1988063	0		=			
ANR	1988145	Identifier	m_async_io_size		1988063	0					
ANR	1988146	PrimaryExpression	0		1988063	1					
ANR	1988147	ExpressionStatement	ret = 0	496:4:12914:12921	1988063	6	True				
ANR	1988148	AssignmentExpression	ret = 0		1988063	0		=			
ANR	1988149	Identifier	ret		1988063	0					
ANR	1988150	PrimaryExpression	0		1988063	1					
ANR	1988151	ElseStatement	else		1988063	0					
ANR	1988152	CompoundStatement		23:4:602:639	1988063	0					
ANR	1988153	ExpressionStatement	m_async_io_size -= bytes	500:4:13012:13036	1988063	0	True				
ANR	1988154	AssignmentExpression	m_async_io_size -= bytes		1988063	0		-=			
ANR	1988155	Identifier	m_async_io_size		1988063	0					
ANR	1988156	Identifier	bytes		1988063	1					
ANR	1988157	IdentifierDeclStatement	char * buf = new char [ m_async_io_size ] ;	501:4:13042:13079	1988063	1	True				
ANR	1988158	IdentifierDecl	* buf = new char [ m_async_io_size ]		1988063	0					
ANR	1988159	IdentifierDeclType	char *		1988063	0					
ANR	1988160	Identifier	buf		1988063	1					
ANR	1988161	AssignmentExpression	* buf = new char [ m_async_io_size ]		1988063	2		=			
ANR	1988162	Identifier	m_async_io_size		1988063	0					
ANR	1988163	Identifier	m_async_io_size		1988063	1					
ANR	1988164	ExpressionStatement	"memcpy ( buf , m_async_io_buf + bytes , m_async_io_size )"	502:4:13085:13137	1988063	2	True				
ANR	1988165	CallExpression	"memcpy ( buf , m_async_io_buf + bytes , m_async_io_size )"		1988063	0					
ANR	1988166	Callee	memcpy		1988063	0					
ANR	1988167	Identifier	memcpy		1988063	0					
ANR	1988168	ArgumentList	buf		1988063	1					
ANR	1988169	Argument	buf		1988063	0					
ANR	1988170	Identifier	buf		1988063	0					
ANR	1988171	Argument	m_async_io_buf + bytes		1988063	1					
ANR	1988172	AdditiveExpression	m_async_io_buf + bytes		1988063	0		+			
ANR	1988173	Identifier	m_async_io_buf		1988063	0					
ANR	1988174	Identifier	bytes		1988063	1					
ANR	1988175	Argument	m_async_io_size		1988063	2					
ANR	1988176	Identifier	m_async_io_size		1988063	0					
ANR	1988177	Statement	delete	503:4:13143:13148	1988063	3	True				
ANR	1988178	Statement	[	503:10:13149:13149	1988063	4	True				
ANR	1988179	Statement	]	503:11:13150:13150	1988063	5	True				
ANR	1988180	ExpressionStatement	m_async_io_buf	503:13:13152:13166	1988063	6	True				
ANR	1988181	Identifier	m_async_io_buf		1988063	0					
ANR	1988182	ExpressionStatement	m_async_io_buf = buf	504:4:13172:13192	1988063	7	True				
ANR	1988183	AssignmentExpression	m_async_io_buf = buf		1988063	0		=			
ANR	1988184	Identifier	m_async_io_buf		1988063	0					
ANR	1988185	Identifier	buf		1988063	1					
ANR	1988186	ExpressionStatement	keep_going = true	505:4:13198:13215	1988063	8	True				
ANR	1988187	AssignmentExpression	keep_going = true		1988063	0		=			
ANR	1988188	Identifier	keep_going		1988063	0					
ANR	1988189	Identifier	true		1988063	1					
ANR	1988190	ElseStatement	else		1988063	0					
ANR	1988191	IfStatement	if ( GetLastError ( ) == ERROR_IO_PENDING )		1988063	0					
ANR	1988192	Condition	GetLastError ( ) == ERROR_IO_PENDING	508:11:13237:13270	1988063	0	True				
ANR	1988193	EqualityExpression	GetLastError ( ) == ERROR_IO_PENDING		1988063	0		==			
ANR	1988194	CallExpression	GetLastError ( )		1988063	0					
ANR	1988195	Callee	GetLastError		1988063	0					
ANR	1988196	Identifier	GetLastError		1988063	0					
ANR	1988197	ArgumentList			1988063	1					
ANR	1988198	Identifier	ERROR_IO_PENDING		1988063	1					
ANR	1988199	CompoundStatement		30:47:833:833	1988063	1					
ANR	1988200	ExpressionStatement	ret = 0	510:3:13339:13346	1988063	0	True				
ANR	1988201	AssignmentExpression	ret = 0		1988063	0		=			
ANR	1988202	Identifier	ret		1988063	0					
ANR	1988203	PrimaryExpression	0		1988063	1					
ANR	1988204	ElseStatement	else		1988063	0					
ANR	1988205	CompoundStatement		34:7:919:919	1988063	0					
ANR	1988206	ExpressionStatement	m_async_io_error = GetLastError ( )	514:3:13400:13433	1988063	0	True				
ANR	1988207	AssignmentExpression	m_async_io_error = GetLastError ( )		1988063	0		=			
ANR	1988208	Identifier	m_async_io_error		1988063	0					
ANR	1988209	CallExpression	GetLastError ( )		1988063	1					
ANR	1988210	Callee	GetLastError		1988063	0					
ANR	1988211	Identifier	GetLastError		1988063	0					
ANR	1988212	ArgumentList			1988063	1					
ANR	1988213	Statement	delete	515:3:13438:13443	1988063	1	True				
ANR	1988214	Statement	[	515:9:13444:13444	1988063	2	True				
ANR	1988215	Statement	]	515:10:13445:13445	1988063	3	True				
ANR	1988216	ExpressionStatement	m_async_io_buf	515:12:13447:13461	1988063	4	True				
ANR	1988217	Identifier	m_async_io_buf		1988063	0					
ANR	1988218	ExpressionStatement	m_async_io_buf = NULL	516:3:13466:13487	1988063	5	True				
ANR	1988219	AssignmentExpression	m_async_io_buf = NULL		1988063	0		=			
ANR	1988220	Identifier	m_async_io_buf		1988063	0					
ANR	1988221	Identifier	NULL		1988063	1					
ANR	1988222	ExpressionStatement	ret = - 1	517:3:13492:13500	1988063	6	True				
ANR	1988223	AssignmentExpression	ret = - 1		1988063	0		=			
ANR	1988224	Identifier	ret		1988063	0					
ANR	1988225	UnaryOperationExpression	- 1		1988063	1					
ANR	1988226	UnaryOperator	-		1988063	0					
ANR	1988227	PrimaryExpression	1		1988063	1					
ANR	1988228	ExpressionStatement	SetEvent ( m_event )	520:3:13551:13568	1988063	7	True				
ANR	1988229	CallExpression	SetEvent ( m_event )		1988063	0					
ANR	1988230	Callee	SetEvent		1988063	0					
ANR	1988231	Identifier	SetEvent		1988063	0					
ANR	1988232	ArgumentList	m_event		1988063	1					
ANR	1988233	Argument	m_event		1988063	0					
ANR	1988234	Identifier	m_event		1988063	0					
ANR	1988235	Condition	keep_going	522:10:13584:13593	1988063	1	True				
ANR	1988236	Identifier	keep_going		1988063	0					
ANR	1988237	ReturnStatement	return ret ;	524:1:13599:13609	1988063	4	True				
ANR	1988238	Identifier	ret		1988063	0					
ANR	1988239	ReturnType	int		1988063	1					
ANR	1988240	Identifier	WritePipeEnd :: async_write_helper		1988063	2					
ANR	1988241	ParameterList			1988063	3					
ANR	1988242	CFGEntryNode	ENTRY		1988063		True				
ANR	1988243	CFGExitNode	EXIT		1988063		True				
ANR	1988244	Symbol	ret		1988063						
ANR	1988245	Symbol	m_async_io_error		1988063						
ANR	1988246	Symbol	m_event		1988063						
ANR	1988247	Symbol	WriteFile		1988063						
ANR	1988248	Symbol	NULL		1988063						
ANR	1988249	Symbol	m_async_io_size		1988063						
ANR	1988250	Symbol	ERROR_IO_PENDING		1988063						
ANR	1988251	Symbol	false		1988063						
ANR	1988252	Symbol	m_overlapped_struct . hEvent		1988063						
ANR	1988253	Symbol	m_handle		1988063						
ANR	1988254	Symbol	buf		1988063						
ANR	1988255	Symbol	& bytes		1988063						
ANR	1988256	Symbol	& m_overlapped_struct		1988063						
ANR	1988257	Symbol	bytes		1988063						
ANR	1988258	Symbol	GetLastError		1988063						
ANR	1988259	Symbol	true		1988063						
ANR	1988260	Symbol	m_overlapped_struct		1988063						
ANR	1988261	Symbol	m_async_io_buf		1988063						
ANR	1988262	Symbol	keep_going		1988063						
ANR	1988263	Function	WritePipeEnd :: complete_async_write	527:0:13614:14663							
ANR	1988264	FunctionDef	WritePipeEnd :: complete_async_write (bool nonblocking)		1988263	0					
ANR	1988265	CompoundStatement		528:0:13672:14663	1988263	0					
ANR	1988266	WhileStatement	while ( m_async_io_buf )		1988263	0					
ANR	1988267	Condition	m_async_io_buf	529:8:13682:13695	1988263	0	True				
ANR	1988268	Identifier	m_async_io_buf		1988263	0					
ANR	1988269	CompoundStatement		11:2:230:241	1988263	1					
ANR	1988270	IdentifierDeclStatement	"DWORD result = WaitForSingleObject ( m_event , nonblocking ? 0 : INFINITE ) ;"	532:2:13737:13808	1988263	0	True				
ANR	1988271	IdentifierDecl	"result = WaitForSingleObject ( m_event , nonblocking ? 0 : INFINITE )"		1988263	0					
ANR	1988272	IdentifierDeclType	DWORD		1988263	0					
ANR	1988273	Identifier	result		1988263	1					
ANR	1988274	AssignmentExpression	"result = WaitForSingleObject ( m_event , nonblocking ? 0 : INFINITE )"		1988263	2		=			
ANR	1988275	Identifier	result		1988263	0					
ANR	1988276	CallExpression	"WaitForSingleObject ( m_event , nonblocking ? 0 : INFINITE )"		1988263	1					
ANR	1988277	Callee	WaitForSingleObject		1988263	0					
ANR	1988278	Identifier	WaitForSingleObject		1988263	0					
ANR	1988279	ArgumentList	m_event		1988263	1					
ANR	1988280	Argument	m_event		1988263	0					
ANR	1988281	Identifier	m_event		1988263	0					
ANR	1988282	Argument	nonblocking ? 0 : INFINITE		1988263	1					
ANR	1988283	ConditionalExpression	nonblocking ? 0 : INFINITE		1988263	0					
ANR	1988284	Condition	nonblocking		1988263	0					
ANR	1988285	Identifier	nonblocking		1988263	0					
ANR	1988286	PrimaryExpression	0		1988263	1					
ANR	1988287	Identifier	INFINITE		1988263	2					
ANR	1988288	IfStatement	if ( result == WAIT_TIMEOUT )		1988263	1					
ANR	1988289	Condition	result == WAIT_TIMEOUT	533:6:13816:13837	1988263	0	True				
ANR	1988290	EqualityExpression	result == WAIT_TIMEOUT		1988263	0		==			
ANR	1988291	Identifier	result		1988263	0					
ANR	1988292	Identifier	WAIT_TIMEOUT		1988263	1					
ANR	1988293	CompoundStatement		6:30:167:167	1988263	1					
ANR	1988294	ReturnStatement	return false ;	534:3:13845:13857	1988263	0	True				
ANR	1988295	Identifier	false		1988263	0					
ANR	1988296	ExpressionStatement	ASSERT ( result == WAIT_OBJECT_0 )	536:2:13865:13896	1988263	2	True				
ANR	1988297	CallExpression	ASSERT ( result == WAIT_OBJECT_0 )		1988263	0					
ANR	1988298	Callee	ASSERT		1988263	0					
ANR	1988299	Identifier	ASSERT		1988263	0					
ANR	1988300	ArgumentList	result == WAIT_OBJECT_0		1988263	1					
ANR	1988301	Argument	result == WAIT_OBJECT_0		1988263	0					
ANR	1988302	EqualityExpression	result == WAIT_OBJECT_0		1988263	0		==			
ANR	1988303	Identifier	result		1988263	0					
ANR	1988304	Identifier	WAIT_OBJECT_0		1988263	1					
ANR	1988305	IdentifierDeclStatement	DWORD bytes ;	538:2:13903:13914	1988263	3	True				
ANR	1988306	IdentifierDecl	bytes		1988263	0					
ANR	1988307	IdentifierDeclType	DWORD		1988263	0					
ANR	1988308	Identifier	bytes		1988263	1					
ANR	1988309	IfStatement	"if ( ! GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE ) )"		1988263	4					
ANR	1988310	Condition	"! GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"	539:6:13922:13987	1988263	0	True				
ANR	1988311	UnaryOperationExpression	"! GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"		1988263	0					
ANR	1988312	UnaryOperator	!		1988263	0					
ANR	1988313	CallExpression	"GetOverlappedResult ( m_handle , & m_overlapped_struct , & bytes , TRUE )"		1988263	1					
ANR	1988314	Callee	GetOverlappedResult		1988263	0					
ANR	1988315	Identifier	GetOverlappedResult		1988263	0					
ANR	1988316	ArgumentList	m_handle		1988263	1					
ANR	1988317	Argument	m_handle		1988263	0					
ANR	1988318	Identifier	m_handle		1988263	0					
ANR	1988319	Argument	& m_overlapped_struct		1988263	1					
ANR	1988320	UnaryOperationExpression	& m_overlapped_struct		1988263	0					
ANR	1988321	UnaryOperator	&		1988263	0					
ANR	1988322	Identifier	m_overlapped_struct		1988263	1					
ANR	1988323	Argument	& bytes		1988263	2					
ANR	1988324	UnaryOperationExpression	& bytes		1988263	0					
ANR	1988325	UnaryOperator	&		1988263	0					
ANR	1988326	Identifier	bytes		1988263	1					
ANR	1988327	Argument	TRUE		1988263	3					
ANR	1988328	Identifier	TRUE		1988263	0					
ANR	1988329	CompoundStatement		12:74:317:317	1988263	1					
ANR	1988330	ExpressionStatement	"dprintf ( D_ALWAYS , ""GetOverlappedResult error: %d\\n"" , GetLastError ( ) )"	540:3:13995:14063	1988263	0	True				
ANR	1988331	CallExpression	"dprintf ( D_ALWAYS , ""GetOverlappedResult error: %d\\n"" , GetLastError ( ) )"		1988263	0					
ANR	1988332	Callee	dprintf		1988263	0					
ANR	1988333	Identifier	dprintf		1988263	0					
ANR	1988334	ArgumentList	D_ALWAYS		1988263	1					
ANR	1988335	Argument	D_ALWAYS		1988263	0					
ANR	1988336	Identifier	D_ALWAYS		1988263	0					
ANR	1988337	Argument	"""GetOverlappedResult error: %d\\n"""		1988263	1					
ANR	1988338	PrimaryExpression	"""GetOverlappedResult error: %d\\n"""		1988263	0					
ANR	1988339	Argument	GetLastError ( )		1988263	2					
ANR	1988340	CallExpression	GetLastError ( )		1988263	0					
ANR	1988341	Callee	GetLastError		1988263	0					
ANR	1988342	Identifier	GetLastError		1988263	0					
ANR	1988343	ArgumentList			1988263	1					
ANR	1988344	ExpressionStatement	m_async_io_error = GetLastError ( )	541:3:14068:14101	1988263	1	True				
ANR	1988345	AssignmentExpression	m_async_io_error = GetLastError ( )		1988263	0		=			
ANR	1988346	Identifier	m_async_io_error		1988263	0					
ANR	1988347	CallExpression	GetLastError ( )		1988263	1					
ANR	1988348	Callee	GetLastError		1988263	0					
ANR	1988349	Identifier	GetLastError		1988263	0					
ANR	1988350	ArgumentList			1988263	1					
ANR	1988351	ReturnStatement	return true ;	544:3:14186:14197	1988263	2	True				
ANR	1988352	Identifier	true		1988263	0					
ANR	1988353	IfStatement	if ( bytes < m_async_io_size )		1988263	5					
ANR	1988354	Condition	bytes < m_async_io_size	546:6:14209:14231	1988263	0	True				
ANR	1988355	RelationalExpression	bytes < m_async_io_size		1988263	0		<			
ANR	1988356	Identifier	bytes		1988263	0					
ANR	1988357	Identifier	m_async_io_size		1988263	1					
ANR	1988358	CompoundStatement		23:3:695:732	1988263	1					
ANR	1988359	ExpressionStatement	m_async_io_size -= bytes	549:3:14339:14363	1988263	0	True				
ANR	1988360	AssignmentExpression	m_async_io_size -= bytes		1988263	0		-=			
ANR	1988361	Identifier	m_async_io_size		1988263	0					
ANR	1988362	Identifier	bytes		1988263	1					
ANR	1988363	IdentifierDeclStatement	char * buf = new char [ m_async_io_size ] ;	550:3:14368:14405	1988263	1	True				
ANR	1988364	IdentifierDecl	* buf = new char [ m_async_io_size ]		1988263	0					
ANR	1988365	IdentifierDeclType	char *		1988263	0					
ANR	1988366	Identifier	buf		1988263	1					
ANR	1988367	AssignmentExpression	* buf = new char [ m_async_io_size ]		1988263	2		=			
ANR	1988368	Identifier	m_async_io_size		1988263	0					
ANR	1988369	Identifier	m_async_io_size		1988263	1					
ANR	1988370	ExpressionStatement	"memcpy ( buf , m_async_io_buf + bytes , m_async_io_size )"	551:3:14410:14462	1988263	2	True				
ANR	1988371	CallExpression	"memcpy ( buf , m_async_io_buf + bytes , m_async_io_size )"		1988263	0					
ANR	1988372	Callee	memcpy		1988263	0					
ANR	1988373	Identifier	memcpy		1988263	0					
ANR	1988374	ArgumentList	buf		1988263	1					
ANR	1988375	Argument	buf		1988263	0					
ANR	1988376	Identifier	buf		1988263	0					
ANR	1988377	Argument	m_async_io_buf + bytes		1988263	1					
ANR	1988378	AdditiveExpression	m_async_io_buf + bytes		1988263	0		+			
ANR	1988379	Identifier	m_async_io_buf		1988263	0					
ANR	1988380	Identifier	bytes		1988263	1					
ANR	1988381	Argument	m_async_io_size		1988263	2					
ANR	1988382	Identifier	m_async_io_size		1988263	0					
ANR	1988383	Statement	delete	552:3:14467:14472	1988263	3	True				
ANR	1988384	Statement	[	552:9:14473:14473	1988263	4	True				
ANR	1988385	Statement	]	552:10:14474:14474	1988263	5	True				
ANR	1988386	ExpressionStatement	m_async_io_buf	552:12:14476:14490	1988263	6	True				
ANR	1988387	Identifier	m_async_io_buf		1988263	0					
ANR	1988388	ExpressionStatement	m_async_io_buf = buf	553:3:14495:14515	1988263	7	True				
ANR	1988389	AssignmentExpression	m_async_io_buf = buf		1988263	0		=			
ANR	1988390	Identifier	m_async_io_buf		1988263	0					
ANR	1988391	Identifier	buf		1988263	1					
ANR	1988392	ExpressionStatement	async_write_helper ( )	554:3:14520:14540	1988263	8	True				
ANR	1988393	CallExpression	async_write_helper ( )		1988263	0					
ANR	1988394	Callee	async_write_helper		1988263	0					
ANR	1988395	Identifier	async_write_helper		1988263	0					
ANR	1988396	ArgumentList			1988263	1					
ANR	1988397	ElseStatement	else		1988263	0					
ANR	1988398	CompoundStatement		29:7:880:880	1988263	0					
ANR	1988399	Statement	delete	558:3:14590:14595	1988263	0	True				
ANR	1988400	Statement	[	558:9:14596:14596	1988263	1	True				
ANR	1988401	Statement	]	558:10:14597:14597	1988263	2	True				
ANR	1988402	ExpressionStatement	m_async_io_buf	558:12:14599:14613	1988263	3	True				
ANR	1988403	Identifier	m_async_io_buf		1988263	0					
ANR	1988404	ExpressionStatement	m_async_io_buf = NULL	559:3:14618:14639	1988263	4	True				
ANR	1988405	AssignmentExpression	m_async_io_buf = NULL		1988263	0		=			
ANR	1988406	Identifier	m_async_io_buf		1988263	0					
ANR	1988407	Identifier	NULL		1988263	1					
ANR	1988408	ReturnStatement	return true ;	563:1:14650:14661	1988263	1	True				
ANR	1988409	Identifier	true		1988263	0					
ANR	1988410	ReturnType	bool		1988263	1					
ANR	1988411	Identifier	WritePipeEnd :: complete_async_write		1988263	2					
ANR	1988412	ParameterList	bool nonblocking		1988263	3					
ANR	1988413	Parameter	bool nonblocking	527:40:13654:13669	1988263	0	True				
ANR	1988414	ParameterType	bool		1988263	0					
ANR	1988415	Identifier	nonblocking		1988263	1					
ANR	1988416	CFGEntryNode	ENTRY		1988263		True				
ANR	1988417	CFGExitNode	EXIT		1988263		True				
ANR	1988418	Symbol	m_async_io_error		1988263						
ANR	1988419	Symbol	m_event		1988263						
ANR	1988420	Symbol	NULL		1988263						
ANR	1988421	Symbol	nonblocking		1988263						
ANR	1988422	Symbol	m_async_io_size		1988263						
ANR	1988423	Symbol	false		1988263						
ANR	1988424	Symbol	m_handle		1988263						
ANR	1988425	Symbol	D_ALWAYS		1988263						
ANR	1988426	Symbol	TRUE		1988263						
ANR	1988427	Symbol	INFINITE		1988263						
ANR	1988428	Symbol	WaitForSingleObject		1988263						
ANR	1988429	Symbol	result		1988263						
ANR	1988430	Symbol	GetOverlappedResult		1988263						
ANR	1988431	Symbol	buf		1988263						
ANR	1988432	Symbol	& bytes		1988263						
ANR	1988433	Symbol	bytes		1988263						
ANR	1988434	Symbol	& m_overlapped_struct		1988263						
ANR	1988435	Symbol	GetLastError		1988263						
ANR	1988436	Symbol	WAIT_TIMEOUT		1988263						
ANR	1988437	Symbol	WAIT_OBJECT_0		1988263						
ANR	1988438	Symbol	true		1988263						
ANR	1988439	Symbol	m_async_io_buf		1988263						
