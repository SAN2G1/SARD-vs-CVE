command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3522561	File	data/converged/CVE-2011-4930_htcondor/src_condor_master.V6_masterDaemon.cpp								
ANR	3522562	DeclStmt									
ANR	3522563	Decl							extern int	extern int	MasterLockFD
ANR	3522564	DeclStmt									
ANR	3522565	Decl							extern FileLock	extern FileLock *	MasterLock
ANR	3522566	DeclStmt									
ANR	3522567	Decl							extern int	extern int ( int )	master_exit
ANR	3522568	DeclStmt									
ANR	3522569	Decl							extern int	extern int	update_interval
ANR	3522570	DeclStmt									
ANR	3522571	Decl							extern int	extern int	check_new_exec_interval
ANR	3522572	DeclStmt									
ANR	3522573	Decl							extern int	extern int	preen_interval
ANR	3522574	DeclStmt									
ANR	3522575	Decl							extern int	extern int	new_bin_delay
ANR	3522576	DeclStmt									
ANR	3522577	Decl							extern char	extern char *	FS_Preen
ANR	3522578	DeclStmt									
ANR	3522579	Decl							extern ClassAd	extern ClassAd *	ad
ANR	3522580	DeclStmt									
ANR	3522581	Decl							extern int	extern int	NT_ServiceFlag
ANR	3522582	DeclStmt									
ANR	3522583	Decl							extern time_t	extern time_t ( char * file )	GetTimeStamp
ANR	3522584	DeclStmt									
ANR	3522585	Decl							extern int	"extern int ( char * file , time_t * tsp )"	NewExecutable
ANR	3522586	DeclStmt									
ANR	3522587	Decl							extern void	"extern void ( FILE * , char * , int )"	tail_log
ANR	3522588	DeclStmt									
ANR	3522589	Decl							extern void	extern void ( )	run_preen
ANR	3522590	DeclStmt									
ANR	3522591	Decl							extern FILESQL	extern FILESQL *	FILEObj
ANR	3522592	DeclStmt									
ANR	3522593	Decl							extern int	extern int	condor_main_argc
ANR	3522594	DeclStmt									
ANR	3522595	Decl							extern char	extern char * *	condor_main_argv
ANR	3522596	DeclStmt									
ANR	3522597	Decl							extern time_t	extern time_t	daemon_stop_time
ANR	3522598	DeclStmt									
ANR	3522599	Decl							int	int ( void )	hourly_housekeeping
ANR	3522600	DeclStmt									
ANR	3522601	Decl							extern Daemons	extern Daemons	daemons
ANR	3522602	DeclStmt									
ANR	3522603	Decl							extern int	extern int	master_backoff_constant
ANR	3522604	DeclStmt									
ANR	3522605	Decl							extern int	extern int	master_backoff_ceiling
ANR	3522606	DeclStmt									
ANR	3522607	Decl							extern float	extern float	master_backoff_factor
ANR	3522608	DeclStmt									
ANR	3522609	Decl							extern int	extern int	master_recover_time
ANR	3522610	DeclStmt									
ANR	3522611	Decl							extern int	extern int	shutdown_graceful_timeout
ANR	3522612	DeclStmt									
ANR	3522613	Decl							extern int	extern int	shutdown_fast_timeout
ANR	3522614	DeclStmt									
ANR	3522615	Decl							extern int	extern int	Lines
ANR	3522616	DeclStmt									
ANR	3522617	Decl							extern int	extern int	PublishObituaries
ANR	3522618	DeclStmt									
ANR	3522619	Decl							extern int	extern int	StartDaemons
ANR	3522620	DeclStmt									
ANR	3522621	Decl							extern int	extern int	GotDaemonsOff
ANR	3522622	DeclStmt									
ANR	3522623	Decl							extern int	extern int	MasterShuttingDown
ANR	3522624	DeclStmt									
ANR	3522625	Decl							extern char	extern char *	MasterName
ANR	3522626	Function	daemon :: daemon	105:0:3585:5041							
ANR	3522627	FunctionDef	"daemon :: daemon (char * name , bool is_daemon_core , bool is_h)"		3522626	0					
ANR	3522628	CompoundStatement		106:0:3645:5041	3522626	0					
ANR	3522629	IdentifierDeclStatement	char buf [ 1000 ] ;	107:1:3648:3662	3522626	0	True				
ANR	3522630	IdentifierDecl	buf [ 1000 ]		3522626	0					
ANR	3522631	IdentifierDeclType	char [ 1000 ]		3522626	0					
ANR	3522632	Identifier	buf		3522626	1					
ANR	3522633	PrimaryExpression	1000		3522626	2					
ANR	3522634	ExpressionStatement	name_in_config_file = strdup ( name )	109:1:3666:3700	3522626	1	True				
ANR	3522635	AssignmentExpression	name_in_config_file = strdup ( name )		3522626	0		=			
ANR	3522636	Identifier	name_in_config_file		3522626	0					
ANR	3522637	CallExpression	strdup ( name )		3522626	1					
ANR	3522638	Callee	strdup		3522626	0					
ANR	3522639	Identifier	strdup		3522626	0					
ANR	3522640	ArgumentList	name		3522626	1					
ANR	3522641	Argument	name		3522626	0					
ANR	3522642	Identifier	name		3522626	0					
ANR	3522643	ExpressionStatement	"daemon_name = strchr ( name_in_config_file , '-' )"	110:1:3703:3749	3522626	2	True				
ANR	3522644	AssignmentExpression	"daemon_name = strchr ( name_in_config_file , '-' )"		3522626	0		=			
ANR	3522645	Identifier	daemon_name		3522626	0					
ANR	3522646	CallExpression	"strchr ( name_in_config_file , '-' )"		3522626	1					
ANR	3522647	Callee	strchr		3522626	0					
ANR	3522648	Identifier	strchr		3522626	0					
ANR	3522649	ArgumentList	name_in_config_file		3522626	1					
ANR	3522650	Argument	name_in_config_file		3522626	0					
ANR	3522651	Identifier	name_in_config_file		3522626	0					
ANR	3522652	Argument	'-'		3522626	1					
ANR	3522653	PrimaryExpression	'-'		3522626	0					
ANR	3522654	IfStatement	if ( daemon_name )		3522626	3					
ANR	3522655	Condition	daemon_name	111:4:3755:3765	3522626	0	True				
ANR	3522656	Identifier	daemon_name		3522626	0					
ANR	3522657	CompoundStatement		7:1:123:123	3522626	1					
ANR	3522658	ExpressionStatement	daemon_name ++	113:2:3773:3786	3522626	0	True				
ANR	3522659	PostIncDecOperationExpression	daemon_name ++		3522626	0					
ANR	3522660	Identifier	daemon_name		3522626	0					
ANR	3522661	IncDec	++		3522626	1					
ANR	3522662	IfStatement	if ( * daemon_name == '_' )		3522626	1					
ANR	3522663	Condition	* daemon_name == '_'	114:5:3793:3811	3522626	0	True				
ANR	3522664	EqualityExpression	* daemon_name == '_'		3522626	0		==			
ANR	3522665	UnaryOperationExpression	* daemon_name		3522626	0					
ANR	3522666	UnaryOperator	*		3522626	0					
ANR	3522667	Identifier	daemon_name		3522626	1					
ANR	3522668	PrimaryExpression	'_'		3522626	1					
ANR	3522669	CompoundStatement		10:2:170:170	3522626	1					
ANR	3522670	ExpressionStatement	daemon_name ++	116:3:3821:3834	3522626	0	True				
ANR	3522671	PostIncDecOperationExpression	daemon_name ++		3522626	0					
ANR	3522672	Identifier	daemon_name		3522626	0					
ANR	3522673	IncDec	++		3522626	1					
ANR	3522674	IfStatement	if ( * daemon_name == '\\0' )		3522626	1					
ANR	3522675	Condition	* daemon_name == '\\0'	117:6:3842:3861	3522626	0	True				
ANR	3522676	EqualityExpression	* daemon_name == '\\0'		3522626	0		==			
ANR	3522677	UnaryOperationExpression	* daemon_name		3522626	0					
ANR	3522678	UnaryOperator	*		3522626	0					
ANR	3522679	Identifier	daemon_name		3522626	1					
ANR	3522680	PrimaryExpression	'\\0'		3522626	1					
ANR	3522681	CompoundStatement		13:3:221:221	3522626	1					
ANR	3522682	ExpressionStatement	daemon_name = NULL	119:4:3873:3891	3522626	0	True				
ANR	3522683	AssignmentExpression	daemon_name = NULL		3522626	0		=			
ANR	3522684	Identifier	daemon_name		3522626	0					
ANR	3522685	Identifier	NULL		3522626	1					
ANR	3522686	ElseStatement	else		3522626	0					
ANR	3522687	CompoundStatement		18:2:265:265	3522626	0					
ANR	3522688	ExpressionStatement	daemon_name = NULL	124:3:3916:3934	3522626	0	True				
ANR	3522689	AssignmentExpression	daemon_name = NULL		3522626	0		=			
ANR	3522690	Identifier	daemon_name		3522626	0					
ANR	3522691	Identifier	NULL		3522626	1					
ANR	3522692	ExpressionStatement	this -> ha_lock = NULL	129:1:3969:3989	3522626	4	True				
ANR	3522693	AssignmentExpression	this -> ha_lock = NULL		3522626	0		=			
ANR	3522694	PtrMemberAccess	this -> ha_lock		3522626	0					
ANR	3522695	Identifier	this		3522626	0					
ANR	3522696	Identifier	ha_lock		3522626	1					
ANR	3522697	Identifier	NULL		3522626	1					
ANR	3522698	ExpressionStatement	this -> is_ha = is_h	130:1:3992:4010	3522626	5	True				
ANR	3522699	AssignmentExpression	this -> is_ha = is_h		3522626	0		=			
ANR	3522700	PtrMemberAccess	this -> is_ha		3522626	0					
ANR	3522701	Identifier	this		3522626	0					
ANR	3522702	Identifier	is_ha		3522626	1					
ANR	3522703	Identifier	is_h		3522626	1					
ANR	3522704	ExpressionStatement	on_hold = FALSE	133:1:4090:4105	3522626	6	True				
ANR	3522705	AssignmentExpression	on_hold = FALSE		3522626	0		=			
ANR	3522706	Identifier	on_hold		3522626	0					
ANR	3522707	Identifier	FALSE		3522626	1					
ANR	3522708	ExpressionStatement	m_waiting_for_startup = false	135:1:4109:4138	3522626	7	True				
ANR	3522709	AssignmentExpression	m_waiting_for_startup = false		3522626	0		=			
ANR	3522710	Identifier	m_waiting_for_startup		3522626	0					
ANR	3522711	Identifier	false		3522626	1					
ANR	3522712	ExpressionStatement	m_reload_shared_port_addr_after_startup = false	136:1:4141:4188	3522626	8	True				
ANR	3522713	AssignmentExpression	m_reload_shared_port_addr_after_startup = false		3522626	0		=			
ANR	3522714	Identifier	m_reload_shared_port_addr_after_startup		3522626	0					
ANR	3522715	Identifier	false		3522626	1					
ANR	3522716	ExpressionStatement	m_never_use_shared_port = false	137:1:4191:4222	3522626	9	True				
ANR	3522717	AssignmentExpression	m_never_use_shared_port = false		3522626	0		=			
ANR	3522718	Identifier	m_never_use_shared_port		3522626	0					
ANR	3522719	Identifier	false		3522626	1					
ANR	3522720	ExpressionStatement	m_only_stop_when_master_stops = false	138:1:4225:4262	3522626	10	True				
ANR	3522721	AssignmentExpression	m_only_stop_when_master_stops = false		3522626	0		=			
ANR	3522722	Identifier	m_only_stop_when_master_stops		3522626	0					
ANR	3522723	Identifier	false		3522626	1					
ANR	3522724	ExpressionStatement	DoConfig ( true )	141:1:4291:4307	3522626	11	True				
ANR	3522725	CallExpression	DoConfig ( true )		3522626	0					
ANR	3522726	Callee	DoConfig		3522626	0					
ANR	3522727	Identifier	DoConfig		3522626	0					
ANR	3522728	ArgumentList	true		3522626	1					
ANR	3522729	Argument	true		3522626	0					
ANR	3522730	Identifier	true		3522626	0					
ANR	3522731	ExpressionStatement	"sprintf ( buf , ""%s_LOG"" , name )"	144:1:4340:4368	3522626	12	True				
ANR	3522732	CallExpression	"sprintf ( buf , ""%s_LOG"" , name )"		3522626	0					
ANR	3522733	Callee	sprintf		3522626	0					
ANR	3522734	Identifier	sprintf		3522626	0					
ANR	3522735	ArgumentList	buf		3522626	1					
ANR	3522736	Argument	buf		3522626	0					
ANR	3522737	Identifier	buf		3522626	0					
ANR	3522738	Argument	"""%s_LOG"""		3522626	1					
ANR	3522739	PrimaryExpression	"""%s_LOG"""		3522626	0					
ANR	3522740	Argument	name		3522626	2					
ANR	3522741	Identifier	name		3522626	0					
ANR	3522742	ExpressionStatement	log_filename_in_config_file = strdup ( buf )	145:1:4371:4412	3522626	13	True				
ANR	3522743	AssignmentExpression	log_filename_in_config_file = strdup ( buf )		3522626	0		=			
ANR	3522744	Identifier	log_filename_in_config_file		3522626	0					
ANR	3522745	CallExpression	strdup ( buf )		3522626	1					
ANR	3522746	Callee	strdup		3522626	0					
ANR	3522747	Identifier	strdup		3522626	0					
ANR	3522748	ArgumentList	buf		3522626	1					
ANR	3522749	Argument	buf		3522626	0					
ANR	3522750	Identifier	buf		3522626	0					
ANR	3522751	ExpressionStatement	flag_in_config_file = NULL	148:1:4455:4481	3522626	14	True				
ANR	3522752	AssignmentExpression	flag_in_config_file = NULL		3522626	0		=			
ANR	3522753	Identifier	flag_in_config_file		3522626	0					
ANR	3522754	Identifier	NULL		3522626	1					
ANR	3522755	ExpressionStatement	process_name = NULL	149:1:4484:4503	3522626	15	True				
ANR	3522756	AssignmentExpression	process_name = NULL		3522626	0		=			
ANR	3522757	Identifier	process_name		3522626	0					
ANR	3522758	Identifier	NULL		3522626	1					
ANR	3522759	ExpressionStatement	watch_name = NULL	150:1:4506:4523	3522626	16	True				
ANR	3522760	AssignmentExpression	watch_name = NULL		3522626	0		=			
ANR	3522761	Identifier	watch_name		3522626	0					
ANR	3522762	Identifier	NULL		3522626	1					
ANR	3522763	ExpressionStatement	log_name = NULL	151:1:4526:4541	3522626	17	True				
ANR	3522764	AssignmentExpression	log_name = NULL		3522626	0		=			
ANR	3522765	Identifier	log_name		3522626	0					
ANR	3522766	Identifier	NULL		3522626	1					
ANR	3522767	IfStatement	"if ( strcmp ( name , ""MASTER"" ) == MATCH )"		3522626	18					
ANR	3522768	Condition	"strcmp ( name , ""MASTER"" ) == MATCH"	152:5:4548:4578	3522626	0	True				
ANR	3522769	EqualityExpression	"strcmp ( name , ""MASTER"" ) == MATCH"		3522626	0		==			
ANR	3522770	CallExpression	"strcmp ( name , ""MASTER"" )"		3522626	0					
ANR	3522771	Callee	strcmp		3522626	0					
ANR	3522772	Identifier	strcmp		3522626	0					
ANR	3522773	ArgumentList	name		3522626	1					
ANR	3522774	Argument	name		3522626	0					
ANR	3522775	Identifier	name		3522626	0					
ANR	3522776	Argument	"""MASTER"""		3522626	1					
ANR	3522777	PrimaryExpression	"""MASTER"""		3522626	0					
ANR	3522778	Identifier	MATCH		3522626	1					
ANR	3522779	CompoundStatement		47:39:936:936	3522626	1					
ANR	3522780	ExpressionStatement	runs_here = FALSE	153:2:4586:4603	3522626	0	True				
ANR	3522781	AssignmentExpression	runs_here = FALSE		3522626	0		=			
ANR	3522782	Identifier	runs_here		3522626	0					
ANR	3522783	Identifier	FALSE		3522626	1					
ANR	3522784	ElseStatement	else		3522626	0					
ANR	3522785	CompoundStatement		49:8:967:967	3522626	0					
ANR	3522786	ExpressionStatement	runs_here = TRUE	155:2:4617:4633	3522626	0	True				
ANR	3522787	AssignmentExpression	runs_here = TRUE		3522626	0		=			
ANR	3522788	Identifier	runs_here		3522626	0					
ANR	3522789	Identifier	TRUE		3522626	1					
ANR	3522790	ExpressionStatement	runs_on_this_host ( )	157:1:4639:4658	3522626	19	True				
ANR	3522791	CallExpression	runs_on_this_host ( )		3522626	0					
ANR	3522792	Callee	runs_on_this_host		3522626	0					
ANR	3522793	Identifier	runs_on_this_host		3522626	0					
ANR	3522794	ArgumentList			3522626	1					
ANR	3522795	ExpressionStatement	pid = 0	158:1:4661:4668	3522626	20	True				
ANR	3522796	AssignmentExpression	pid = 0		3522626	0		=			
ANR	3522797	Identifier	pid		3522626	0					
ANR	3522798	PrimaryExpression	0		3522626	1					
ANR	3522799	ExpressionStatement	restarts = 0	159:1:4671:4683	3522626	21	True				
ANR	3522800	AssignmentExpression	restarts = 0		3522626	0		=			
ANR	3522801	Identifier	restarts		3522626	0					
ANR	3522802	PrimaryExpression	0		3522626	1					
ANR	3522803	ExpressionStatement	newExec = FALSE	160:1:4686:4701	3522626	22	True				
ANR	3522804	AssignmentExpression	newExec = FALSE		3522626	0		=			
ANR	3522805	Identifier	newExec		3522626	0					
ANR	3522806	Identifier	FALSE		3522626	1					
ANR	3522807	ExpressionStatement	timeStamp = 0	161:1:4705:4718	3522626	23	True				
ANR	3522808	AssignmentExpression	timeStamp = 0		3522626	0		=			
ANR	3522809	Identifier	timeStamp		3522626	0					
ANR	3522810	PrimaryExpression	0		3522626	1					
ANR	3522811	ExpressionStatement	startTime = 0	162:1:4721:4734	3522626	24	True				
ANR	3522812	AssignmentExpression	startTime = 0		3522626	0		=			
ANR	3522813	Identifier	startTime		3522626	0					
ANR	3522814	PrimaryExpression	0		3522626	1					
ANR	3522815	ExpressionStatement	isDC = is_daemon_core	163:1:4737:4758	3522626	25	True				
ANR	3522816	AssignmentExpression	isDC = is_daemon_core		3522626	0		=			
ANR	3522817	Identifier	isDC		3522626	0					
ANR	3522818	Identifier	is_daemon_core		3522626	1					
ANR	3522819	ExpressionStatement	start_tid = - 1	164:1:4761:4775	3522626	26	True				
ANR	3522820	AssignmentExpression	start_tid = - 1		3522626	0		=			
ANR	3522821	Identifier	start_tid		3522626	0					
ANR	3522822	UnaryOperationExpression	- 1		3522626	1					
ANR	3522823	UnaryOperator	-		3522626	0					
ANR	3522824	PrimaryExpression	1		3522626	1					
ANR	3522825	ExpressionStatement	recover_tid = - 1	165:1:4778:4794	3522626	27	True				
ANR	3522826	AssignmentExpression	recover_tid = - 1		3522626	0		=			
ANR	3522827	Identifier	recover_tid		3522626	0					
ANR	3522828	UnaryOperationExpression	- 1		3522626	1					
ANR	3522829	UnaryOperator	-		3522626	0					
ANR	3522830	PrimaryExpression	1		3522626	1					
ANR	3522831	ExpressionStatement	stop_tid = - 1	166:1:4797:4810	3522626	28	True				
ANR	3522832	AssignmentExpression	stop_tid = - 1		3522626	0		=			
ANR	3522833	Identifier	stop_tid		3522626	0					
ANR	3522834	UnaryOperationExpression	- 1		3522626	1					
ANR	3522835	UnaryOperator	-		3522626	0					
ANR	3522836	PrimaryExpression	1		3522626	1					
ANR	3522837	ExpressionStatement	stop_fast_tid = - 1	167:1:4813:4831	3522626	29	True				
ANR	3522838	AssignmentExpression	stop_fast_tid = - 1		3522626	0		=			
ANR	3522839	Identifier	stop_fast_tid		3522626	0					
ANR	3522840	UnaryOperationExpression	- 1		3522626	1					
ANR	3522841	UnaryOperator	-		3522626	0					
ANR	3522842	PrimaryExpression	1		3522626	1					
ANR	3522843	ExpressionStatement	hard_kill_tid = - 1	168:2:4835:4853	3522626	30	True				
ANR	3522844	AssignmentExpression	hard_kill_tid = - 1		3522626	0		=			
ANR	3522845	Identifier	hard_kill_tid		3522626	0					
ANR	3522846	UnaryOperationExpression	- 1		3522626	1					
ANR	3522847	UnaryOperator	-		3522626	0					
ANR	3522848	PrimaryExpression	1		3522626	1					
ANR	3522849	ExpressionStatement	stop_state = NONE	169:1:4856:4873	3522626	31	True				
ANR	3522850	AssignmentExpression	stop_state = NONE		3522626	0		=			
ANR	3522851	Identifier	stop_state		3522626	0					
ANR	3522852	Identifier	NONE		3522626	1					
ANR	3522853	ExpressionStatement	needs_update = FALSE	170:1:4876:4896	3522626	32	True				
ANR	3522854	AssignmentExpression	needs_update = FALSE		3522626	0		=			
ANR	3522855	Identifier	needs_update		3522626	0					
ANR	3522856	Identifier	FALSE		3522626	1					
ANR	3522857	ExpressionStatement	num_controllees = 0	171:1:4899:4918	3522626	33	True				
ANR	3522858	AssignmentExpression	num_controllees = 0		3522626	0		=			
ANR	3522859	Identifier	num_controllees		3522626	0					
ANR	3522860	PrimaryExpression	0		3522626	1					
ANR	3522861	ExpressionStatement	port = NULL	174:1:4928:4939	3522626	34	True				
ANR	3522862	AssignmentExpression	port = NULL		3522626	0		=			
ANR	3522863	Identifier	port		3522626	0					
ANR	3522864	Identifier	NULL		3522626	1					
ANR	3522865	ExpressionStatement	config_info_file = NULL	175:1:4942:4965	3522626	35	True				
ANR	3522866	AssignmentExpression	config_info_file = NULL		3522626	0		=			
ANR	3522867	Identifier	config_info_file		3522626	0					
ANR	3522868	Identifier	NULL		3522626	1					
ANR	3522869	ExpressionStatement	type = stringToDaemonType ( name )	177:1:4975:5008	3522626	36	True				
ANR	3522870	AssignmentExpression	type = stringToDaemonType ( name )		3522626	0		=			
ANR	3522871	Identifier	type		3522626	0					
ANR	3522872	CallExpression	stringToDaemonType ( name )		3522626	1					
ANR	3522873	Callee	stringToDaemonType		3522626	0					
ANR	3522874	Identifier	stringToDaemonType		3522626	0					
ANR	3522875	ArgumentList	name		3522626	1					
ANR	3522876	Argument	name		3522626	0					
ANR	3522877	Identifier	name		3522626	0					
ANR	3522878	ExpressionStatement	daemons . RegisterDaemon ( this )	178:1:5011:5039	3522626	37	True				
ANR	3522879	CallExpression	daemons . RegisterDaemon ( this )		3522626	0					
ANR	3522880	Callee	daemons . RegisterDaemon		3522626	0					
ANR	3522881	MemberAccess	daemons . RegisterDaemon		3522626	0					
ANR	3522882	Identifier	daemons		3522626	0					
ANR	3522883	Identifier	RegisterDaemon		3522626	1					
ANR	3522884	ArgumentList	this		3522626	1					
ANR	3522885	Argument	this		3522626	0					
ANR	3522886	Identifier	this		3522626	0					
ANR	3522887	Identifier	daemon :: daemon		3522626	1					
ANR	3522888	ParameterList	"char * name , bool is_daemon_core , bool is_h"		3522626	2					
ANR	3522889	Parameter	char * name	105:15:3600:3609	3522626	0	True				
ANR	3522890	ParameterType	char *		3522626	0					
ANR	3522891	Identifier	name		3522626	1					
ANR	3522892	Parameter	bool is_daemon_core	105:27:3612:3630	3522626	1	True				
ANR	3522893	ParameterType	bool		3522626	0					
ANR	3522894	Identifier	is_daemon_core		3522626	1					
ANR	3522895	Parameter	bool is_h	105:48:3633:3641	3522626	2	True				
ANR	3522896	ParameterType	bool		3522626	0					
ANR	3522897	Identifier	is_h		3522626	1					
ANR	3522898	CFGEntryNode	ENTRY		3522626		True				
ANR	3522899	CFGExitNode	EXIT		3522626		True				
ANR	3522900	Symbol	stop_fast_tid		3522626						
ANR	3522901	Symbol	strchr		3522626						
ANR	3522902	Symbol	pid		3522626						
ANR	3522903	Symbol	m_waiting_for_startup		3522626						
ANR	3522904	Symbol	type		3522626						
ANR	3522905	Symbol	name_in_config_file		3522626						
ANR	3522906	Symbol	log_filename_in_config_file		3522626						
ANR	3522907	Symbol	this -> is_ha		3522626						
ANR	3522908	Symbol	process_name		3522626						
ANR	3522909	Symbol	stop_state		3522626						
ANR	3522910	Symbol	isDC		3522626						
ANR	3522911	Symbol	NONE		3522626						
ANR	3522912	Symbol	strcmp		3522626						
ANR	3522913	Symbol	config_info_file		3522626						
ANR	3522914	Symbol	is_h		3522626						
ANR	3522915	Symbol	NULL		3522626						
ANR	3522916	Symbol	num_controllees		3522626						
ANR	3522917	Symbol	newExec		3522626						
ANR	3522918	Symbol	log_name		3522626						
ANR	3522919	Symbol	this		3522626						
ANR	3522920	Symbol	start_tid		3522626						
ANR	3522921	Symbol	TRUE		3522626						
ANR	3522922	Symbol	restarts		3522626						
ANR	3522923	Symbol	stringToDaemonType		3522626						
ANR	3522924	Symbol	port		3522626						
ANR	3522925	Symbol	name		3522626						
ANR	3522926	Symbol	true		3522626						
ANR	3522927	Symbol	m_never_use_shared_port		3522626						
ANR	3522928	Symbol	this -> ha_lock		3522626						
ANR	3522929	Symbol	* daemon_name		3522626						
ANR	3522930	Symbol	daemons		3522626						
ANR	3522931	Symbol	startTime		3522626						
ANR	3522932	Symbol	is_daemon_core		3522626						
ANR	3522933	Symbol	recover_tid		3522626						
ANR	3522934	Symbol	daemon_name		3522626						
ANR	3522935	Symbol	false		3522626						
ANR	3522936	Symbol	stop_tid		3522626						
ANR	3522937	Symbol	on_hold		3522626						
ANR	3522938	Symbol	m_reload_shared_port_addr_after_startup		3522626						
ANR	3522939	Symbol	flag_in_config_file		3522626						
ANR	3522940	Symbol	hard_kill_tid		3522626						
ANR	3522941	Symbol	* this		3522626						
ANR	3522942	Symbol	timeStamp		3522626						
ANR	3522943	Symbol	needs_update		3522626						
ANR	3522944	Symbol	buf		3522626						
ANR	3522945	Symbol	watch_name		3522626						
ANR	3522946	Symbol	FALSE		3522626						
ANR	3522947	Symbol	strdup		3522626						
ANR	3522948	Symbol	m_only_stop_when_master_stops		3522626						
ANR	3522949	Symbol	MATCH		3522626						
ANR	3522950	Symbol	runs_here		3522626						
ANR	3522951	Function	daemon :: ~daemon	181:0:5044:5761							
ANR	3522952	FunctionDef	daemon :: ~daemon ()		3522951	0					
ANR	3522953	CompoundStatement		182:0:5062:5761	3522951	0					
ANR	3522954	IfStatement	if ( name_in_config_file != NULL )		3522951	0					
ANR	3522955	Condition	name_in_config_file != NULL	183:5:5069:5095	3522951	0	True				
ANR	3522956	EqualityExpression	name_in_config_file != NULL		3522951	0		!=			
ANR	3522957	Identifier	name_in_config_file		3522951	0					
ANR	3522958	Identifier	NULL		3522951	1					
ANR	3522959	CompoundStatement		2:35:36:36	3522951	1					
ANR	3522960	ExpressionStatement	free ( name_in_config_file )	184:2:5103:5130	3522951	0	True				
ANR	3522961	CallExpression	free ( name_in_config_file )		3522951	0					
ANR	3522962	Callee	free		3522951	0					
ANR	3522963	Identifier	free		3522951	0					
ANR	3522964	ArgumentList	name_in_config_file		3522951	1					
ANR	3522965	Argument	name_in_config_file		3522951	0					
ANR	3522966	Identifier	name_in_config_file		3522951	0					
ANR	3522967	IfStatement	if ( daemon_name != NULL )		3522951	1					
ANR	3522968	Condition	daemon_name != NULL	186:5:5140:5158	3522951	0	True				
ANR	3522969	EqualityExpression	daemon_name != NULL		3522951	0		!=			
ANR	3522970	Identifier	daemon_name		3522951	0					
ANR	3522971	Identifier	NULL		3522951	1					
ANR	3522972	CompoundStatement		5:27:99:99	3522951	1					
ANR	3522973	ExpressionStatement	free ( daemon_name )	187:2:5166:5185	3522951	0	True				
ANR	3522974	CallExpression	free ( daemon_name )		3522951	0					
ANR	3522975	Callee	free		3522951	0					
ANR	3522976	Identifier	free		3522951	0					
ANR	3522977	ArgumentList	daemon_name		3522951	1					
ANR	3522978	Argument	daemon_name		3522951	0					
ANR	3522979	Identifier	daemon_name		3522951	0					
ANR	3522980	IfStatement	if ( log_filename_in_config_file != NULL )		3522951	2					
ANR	3522981	Condition	log_filename_in_config_file != NULL	189:5:5195:5229	3522951	0	True				
ANR	3522982	EqualityExpression	log_filename_in_config_file != NULL		3522951	0		!=			
ANR	3522983	Identifier	log_filename_in_config_file		3522951	0					
ANR	3522984	Identifier	NULL		3522951	1					
ANR	3522985	CompoundStatement		8:43:170:170	3522951	1					
ANR	3522986	ExpressionStatement	free ( log_filename_in_config_file )	190:2:5237:5272	3522951	0	True				
ANR	3522987	CallExpression	free ( log_filename_in_config_file )		3522951	0					
ANR	3522988	Callee	free		3522951	0					
ANR	3522989	Identifier	free		3522951	0					
ANR	3522990	ArgumentList	log_filename_in_config_file		3522951	1					
ANR	3522991	Argument	log_filename_in_config_file		3522951	0					
ANR	3522992	Identifier	log_filename_in_config_file		3522951	0					
ANR	3522993	IfStatement	if ( flag_in_config_file != NULL )		3522951	3					
ANR	3522994	Condition	flag_in_config_file != NULL	192:5:5282:5308	3522951	0	True				
ANR	3522995	EqualityExpression	flag_in_config_file != NULL		3522951	0		!=			
ANR	3522996	Identifier	flag_in_config_file		3522951	0					
ANR	3522997	Identifier	NULL		3522951	1					
ANR	3522998	CompoundStatement		11:35:249:249	3522951	1					
ANR	3522999	ExpressionStatement	free ( flag_in_config_file )	193:2:5316:5343	3522951	0	True				
ANR	3523000	CallExpression	free ( flag_in_config_file )		3522951	0					
ANR	3523001	Callee	free		3522951	0					
ANR	3523002	Identifier	free		3522951	0					
ANR	3523003	ArgumentList	flag_in_config_file		3522951	1					
ANR	3523004	Argument	flag_in_config_file		3522951	0					
ANR	3523005	Identifier	flag_in_config_file		3522951	0					
ANR	3523006	IfStatement	if ( process_name != NULL )		3522951	4					
ANR	3523007	Condition	process_name != NULL	195:5:5353:5372	3522951	0	True				
ANR	3523008	EqualityExpression	process_name != NULL		3522951	0		!=			
ANR	3523009	Identifier	process_name		3522951	0					
ANR	3523010	Identifier	NULL		3522951	1					
ANR	3523011	CompoundStatement		14:28:313:313	3522951	1					
ANR	3523012	ExpressionStatement	free ( process_name )	196:2:5380:5400	3522951	0	True				
ANR	3523013	CallExpression	free ( process_name )		3522951	0					
ANR	3523014	Callee	free		3522951	0					
ANR	3523015	Identifier	free		3522951	0					
ANR	3523016	ArgumentList	process_name		3522951	1					
ANR	3523017	Argument	process_name		3522951	0					
ANR	3523018	Identifier	process_name		3522951	0					
ANR	3523019	IfStatement	if ( watch_name != NULL )		3522951	5					
ANR	3523020	Condition	watch_name != NULL	198:5:5410:5427	3522951	0	True				
ANR	3523021	EqualityExpression	watch_name != NULL		3522951	0		!=			
ANR	3523022	Identifier	watch_name		3522951	0					
ANR	3523023	Identifier	NULL		3522951	1					
ANR	3523024	CompoundStatement		17:26:368:368	3522951	1					
ANR	3523025	ExpressionStatement	free ( watch_name )	199:2:5435:5453	3522951	0	True				
ANR	3523026	CallExpression	free ( watch_name )		3522951	0					
ANR	3523027	Callee	free		3522951	0					
ANR	3523028	Identifier	free		3522951	0					
ANR	3523029	ArgumentList	watch_name		3522951	1					
ANR	3523030	Argument	watch_name		3522951	0					
ANR	3523031	Identifier	watch_name		3522951	0					
ANR	3523032	IfStatement	if ( log_name != NULL )		3522951	6					
ANR	3523033	Condition	log_name != NULL	201:5:5463:5478	3522951	0	True				
ANR	3523034	EqualityExpression	log_name != NULL		3522951	0		!=			
ANR	3523035	Identifier	log_name		3522951	0					
ANR	3523036	Identifier	NULL		3522951	1					
ANR	3523037	CompoundStatement		20:24:419:419	3522951	1					
ANR	3523038	ExpressionStatement	free ( log_name )	202:2:5486:5502	3522951	0	True				
ANR	3523039	CallExpression	free ( log_name )		3522951	0					
ANR	3523040	Callee	free		3522951	0					
ANR	3523041	Identifier	free		3522951	0					
ANR	3523042	ArgumentList	log_name		3522951	1					
ANR	3523043	Argument	log_name		3522951	0					
ANR	3523044	Identifier	log_name		3522951	0					
ANR	3523045	IfStatement	if ( ha_lock != NULL )		3522951	7					
ANR	3523046	Condition	ha_lock != NULL	204:5:5512:5526	3522951	0	True				
ANR	3523047	EqualityExpression	ha_lock != NULL		3522951	0		!=			
ANR	3523048	Identifier	ha_lock		3522951	0					
ANR	3523049	Identifier	NULL		3522951	1					
ANR	3523050	CompoundStatement		23:23:467:467	3522951	1					
ANR	3523051	Statement	delete	205:2:5534:5539	3522951	0	True				
ANR	3523052	ExpressionStatement	ha_lock	205:8:5540:5551	3522951	1	True				
ANR	3523053	Identifier	ha_lock		3522951	0					
ANR	3523054	IfStatement	if ( controller_name != NULL )		3522951	8					
ANR	3523055	Condition	controller_name != NULL	207:5:5561:5583	3522951	0	True				
ANR	3523056	EqualityExpression	controller_name != NULL		3522951	0		!=			
ANR	3523057	Identifier	controller_name		3522951	0					
ANR	3523058	Identifier	NULL		3522951	1					
ANR	3523059	CompoundStatement		26:31:524:524	3522951	1					
ANR	3523060	ExpressionStatement	free ( controller_name )	208:2:5591:5614	3522951	0	True				
ANR	3523061	CallExpression	free ( controller_name )		3522951	0					
ANR	3523062	Callee	free		3522951	0					
ANR	3523063	Identifier	free		3522951	0					
ANR	3523064	ArgumentList	controller_name		3522951	1					
ANR	3523065	Argument	controller_name		3522951	0					
ANR	3523066	Identifier	controller_name		3522951	0					
ANR	3523067	IfStatement	if ( controller != NULL )		3522951	9					
ANR	3523068	Condition	controller != NULL	210:5:5624:5641	3522951	0	True				
ANR	3523069	EqualityExpression	controller != NULL		3522951	0		!=			
ANR	3523070	Identifier	controller		3522951	0					
ANR	3523071	Identifier	NULL		3522951	1					
ANR	3523072	CompoundStatement		29:26:582:582	3522951	1					
ANR	3523073	Statement	delete	211:2:5649:5654	3522951	0	True				
ANR	3523074	ExpressionStatement	controller	211:8:5655:5669	3522951	1	True				
ANR	3523075	Identifier	controller		3522951	0					
ANR	3523076	ForStatement	for ( int num = 0 ; num < num_controllees ; num ++ )		3522951	10					
ANR	3523077	ForInit	int num = 0 ;	213:6:5680:5691	3522951	0	True				
ANR	3523078	IdentifierDeclStatement	int num = 0 ;		3522951	0					
ANR	3523079	IdentifierDecl	num = 0		3522951	0					
ANR	3523080	IdentifierDeclType	int		3522951	0					
ANR	3523081	Identifier	num		3522951	1					
ANR	3523082	AssignmentExpression	num = 0		3522951	2		=			
ANR	3523083	Identifier	num		3522951	0					
ANR	3523084	PrimaryExpression	0		3522951	1					
ANR	3523085	Condition	num < num_controllees	213:20:5694:5714	3522951	1	True				
ANR	3523086	RelationalExpression	num < num_controllees		3522951	0		<			
ANR	3523087	Identifier	num		3522951	0					
ANR	3523088	Identifier	num_controllees		3522951	1					
ANR	3523089	PostIncDecOperationExpression	num ++	213:44:5718:5722	3522951	2	True				
ANR	3523090	Identifier	num		3522951	0					
ANR	3523091	IncDec	++		3522951	1					
ANR	3523092	CompoundStatement		32:52:663:663	3522951	3					
ANR	3523093	Statement	delete	214:2:5730:5735	3522951	0	True				
ANR	3523094	ExpressionStatement	controllees [ num ]	214:8:5736:5756	3522951	1	True				
ANR	3523095	ArrayIndexing	controllees [ num ]		3522951	0					
ANR	3523096	Identifier	controllees		3522951	0					
ANR	3523097	Identifier	num		3522951	1					
ANR	3523098	Identifier	daemon :: ~daemon		3522951	1					
ANR	3523099	ParameterList			3522951	2					
ANR	3523100	CFGEntryNode	ENTRY		3522951		True				
ANR	3523101	CFGExitNode	EXIT		3522951		True				
ANR	3523102	Symbol	controller		3522951						
ANR	3523103	Symbol	NULL		3522951						
ANR	3523104	Symbol	num_controllees		3522951						
ANR	3523105	Symbol	log_name		3522951						
ANR	3523106	Symbol	daemon_name		3522951						
ANR	3523107	Symbol	controller_name		3522951						
ANR	3523108	Symbol	num		3522951						
ANR	3523109	Symbol	ha_lock		3522951						
ANR	3523110	Symbol	controllees		3522951						
ANR	3523111	Symbol	name_in_config_file		3522951						
ANR	3523112	Symbol	flag_in_config_file		3522951						
ANR	3523113	Symbol	log_filename_in_config_file		3522951						
ANR	3523114	Symbol	watch_name		3522951						
ANR	3523115	Symbol	process_name		3522951						
ANR	3523116	Function	daemon :: runs_on_this_host	218:0:5764:7216							
ANR	3523117	FunctionDef	daemon :: runs_on_this_host ()		3523116	0					
ANR	3523118	CompoundStatement		220:0:5796:7216	3523116	0					
ANR	3523119	IdentifierDeclStatement	char * tmp ;	221:1:5799:5808	3523116	0	True				
ANR	3523120	IdentifierDecl	* tmp		3523116	0					
ANR	3523121	IdentifierDeclType	char *		3523116	0					
ANR	3523122	Identifier	tmp		3523116	1					
ANR	3523123	Statement	static	222:1:5811:5816	3523116	1	True				
ANR	3523124	IdentifierDeclStatement	bool this_host_addr_cached = false ;	222:8:5818:5852	3523116	2	True				
ANR	3523125	IdentifierDecl	this_host_addr_cached = false		3523116	0					
ANR	3523126	IdentifierDeclType	bool		3523116	0					
ANR	3523127	Identifier	this_host_addr_cached		3523116	1					
ANR	3523128	AssignmentExpression	this_host_addr_cached = false		3523116	2		=			
ANR	3523129	Identifier	false		3523116	0					
ANR	3523130	Identifier	false		3523116	1					
ANR	3523131	Statement	static	223:1:5855:5860	3523116	3	True				
ANR	3523132	IdentifierDeclStatement	std :: vector < condor_sockaddr > this_host_addr ;	223:8:5862:5905	3523116	4	True				
ANR	3523133	IdentifierDecl	this_host_addr		3523116	0					
ANR	3523134	IdentifierDeclType	std :: vector < condor_sockaddr >		3523116	0					
ANR	3523135	Identifier	this_host_addr		3523116	1					
ANR	3523136	IdentifierDeclStatement	"int i , j ;"	224:1:5908:5917	3523116	5	True				
ANR	3523137	IdentifierDecl	i		3523116	0					
ANR	3523138	IdentifierDeclType	int		3523116	0					
ANR	3523139	Identifier	i		3523116	1					
ANR	3523140	IdentifierDecl	j		3523116	1					
ANR	3523141	IdentifierDeclType	int		3523116	0					
ANR	3523142	Identifier	j		3523116	1					
ANR	3523143	IfStatement	if ( flag_in_config_file != NULL )		3523116	6					
ANR	3523144	Condition	flag_in_config_file != NULL	227:6:5927:5953	3523116	0	True				
ANR	3523145	EqualityExpression	flag_in_config_file != NULL		3523116	0		!=			
ANR	3523146	Identifier	flag_in_config_file		3523116	0					
ANR	3523147	Identifier	NULL		3523116	1					
ANR	3523148	CompoundStatement		8:36:160:160	3523116	1					
ANR	3523149	IfStatement	"if ( strncmp ( flag_in_config_file , ""BOOL_"" , 5 ) == MATCH )"		3523116	0					
ANR	3523150	Condition	"strncmp ( flag_in_config_file , ""BOOL_"" , 5 ) == MATCH"	228:6:5965:6013	3523116	0	True				
ANR	3523151	EqualityExpression	"strncmp ( flag_in_config_file , ""BOOL_"" , 5 ) == MATCH"		3523116	0		==			
ANR	3523152	CallExpression	"strncmp ( flag_in_config_file , ""BOOL_"" , 5 )"		3523116	0					
ANR	3523153	Callee	strncmp		3523116	0					
ANR	3523154	Identifier	strncmp		3523116	0					
ANR	3523155	ArgumentList	flag_in_config_file		3523116	1					
ANR	3523156	Argument	flag_in_config_file		3523116	0					
ANR	3523157	Identifier	flag_in_config_file		3523116	0					
ANR	3523158	Argument	"""BOOL_"""		3523116	1					
ANR	3523159	PrimaryExpression	"""BOOL_"""		3523116	0					
ANR	3523160	Argument	5		3523116	2					
ANR	3523161	PrimaryExpression	5		3523116	0					
ANR	3523162	Identifier	MATCH		3523116	1					
ANR	3523163	CompoundStatement		9:57:219:219	3523116	1					
ANR	3523164	ExpressionStatement	"runs_here = param_boolean_crufty ( flag_in_config_file , false ) ? TRUE : FALSE"	229:3:6021:6100	3523116	0	True				
ANR	3523165	AssignmentExpression	"runs_here = param_boolean_crufty ( flag_in_config_file , false ) ? TRUE : FALSE"		3523116	0		=			
ANR	3523166	Identifier	runs_here		3523116	0					
ANR	3523167	ConditionalExpression	"param_boolean_crufty ( flag_in_config_file , false ) ? TRUE : FALSE"		3523116	1					
ANR	3523168	Condition	"param_boolean_crufty ( flag_in_config_file , false )"		3523116	0					
ANR	3523169	CallExpression	"param_boolean_crufty ( flag_in_config_file , false )"		3523116	0					
ANR	3523170	Callee	param_boolean_crufty		3523116	0					
ANR	3523171	Identifier	param_boolean_crufty		3523116	0					
ANR	3523172	ArgumentList	flag_in_config_file		3523116	1					
ANR	3523173	Argument	flag_in_config_file		3523116	0					
ANR	3523174	Identifier	flag_in_config_file		3523116	0					
ANR	3523175	Argument	false		3523116	1					
ANR	3523176	Identifier	false		3523116	0					
ANR	3523177	Identifier	TRUE		3523116	1					
ANR	3523178	Identifier	FALSE		3523116	2					
ANR	3523179	ElseStatement	else		3523116	0					
ANR	3523180	CompoundStatement		30:3:802:860	3523116	0					
ANR	3523181	IfStatement	if ( ! this_host_addr_cached )		3523116	0					
ANR	3523182	Condition	! this_host_addr_cached	232:7:6120:6141	3523116	0	True				
ANR	3523183	UnaryOperationExpression	! this_host_addr_cached		3523116	0					
ANR	3523184	UnaryOperator	!		3523116	0					
ANR	3523185	Identifier	this_host_addr_cached		3523116	1					
ANR	3523186	CompoundStatement		14:4:353:399	3523116	1					
ANR	3523187	IdentifierDeclStatement	MyString local_hostname = get_local_hostname ( ) ;	233:4:6150:6196	3523116	0	True				
ANR	3523188	IdentifierDecl	local_hostname = get_local_hostname ( )		3523116	0					
ANR	3523189	IdentifierDeclType	MyString		3523116	0					
ANR	3523190	Identifier	local_hostname		3523116	1					
ANR	3523191	AssignmentExpression	local_hostname = get_local_hostname ( )		3523116	2		=			
ANR	3523192	Identifier	local_hostname		3523116	0					
ANR	3523193	CallExpression	get_local_hostname ( )		3523116	1					
ANR	3523194	Callee	get_local_hostname		3523116	0					
ANR	3523195	Identifier	get_local_hostname		3523116	0					
ANR	3523196	ArgumentList			3523116	1					
ANR	3523197	ExpressionStatement	this_host_addr = resolve_hostname ( local_hostname )	234:4:6202:6251	3523116	1	True				
ANR	3523198	AssignmentExpression	this_host_addr = resolve_hostname ( local_hostname )		3523116	0		=			
ANR	3523199	Identifier	this_host_addr		3523116	0					
ANR	3523200	CallExpression	resolve_hostname ( local_hostname )		3523116	1					
ANR	3523201	Callee	resolve_hostname		3523116	0					
ANR	3523202	Identifier	resolve_hostname		3523116	0					
ANR	3523203	ArgumentList	local_hostname		3523116	1					
ANR	3523204	Argument	local_hostname		3523116	0					
ANR	3523205	Identifier	local_hostname		3523116	0					
ANR	3523206	IfStatement	if ( ! this_host_addr . empty ( ) )		3523116	2					
ANR	3523207	Condition	! this_host_addr . empty ( )	235:8:6261:6283	3523116	0	True				
ANR	3523208	UnaryOperationExpression	! this_host_addr . empty ( )		3523116	0					
ANR	3523209	UnaryOperator	!		3523116	0					
ANR	3523210	CallExpression	this_host_addr . empty ( )		3523116	1					
ANR	3523211	Callee	this_host_addr . empty		3523116	0					
ANR	3523212	MemberAccess	this_host_addr . empty		3523116	0					
ANR	3523213	Identifier	this_host_addr		3523116	0					
ANR	3523214	Identifier	empty		3523116	1					
ANR	3523215	ArgumentList			3523116	1					
ANR	3523216	CompoundStatement		16:33:489:489	3523116	1					
ANR	3523217	ExpressionStatement	this_host_addr_cached = true	236:5:6293:6321	3523116	0	True				
ANR	3523218	AssignmentExpression	this_host_addr_cached = true		3523116	0		=			
ANR	3523219	Identifier	this_host_addr_cached		3523116	0					
ANR	3523220	Identifier	true		3523116	1					
ANR	3523221	ExpressionStatement	tmp = param ( flag_in_config_file )	241:3:6407:6441	3523116	1	True				
ANR	3523222	AssignmentExpression	tmp = param ( flag_in_config_file )		3523116	0		=			
ANR	3523223	Identifier	tmp		3523116	0					
ANR	3523224	CallExpression	param ( flag_in_config_file )		3523116	1					
ANR	3523225	Callee	param		3523116	0					
ANR	3523226	Identifier	param		3523116	0					
ANR	3523227	ArgumentList	flag_in_config_file		3523116	1					
ANR	3523228	Argument	flag_in_config_file		3523116	0					
ANR	3523229	Identifier	flag_in_config_file		3523116	0					
ANR	3523230	IfStatement	if ( ! tmp )		3523116	2					
ANR	3523231	Condition	! tmp	242:7:6450:6453	3523116	0	True				
ANR	3523232	UnaryOperationExpression	! tmp		3523116	0					
ANR	3523233	UnaryOperator	!		3523116	0					
ANR	3523234	Identifier	tmp		3523116	1					
ANR	3523235	CompoundStatement		23:13:659:659	3523116	1					
ANR	3523236	ExpressionStatement	"dprintf ( D_ALWAYS , ""config file parameter %s not specified"" , flag_in_config_file )"	243:4:6462:6548	3523116	0	True				
ANR	3523237	CallExpression	"dprintf ( D_ALWAYS , ""config file parameter %s not specified"" , flag_in_config_file )"		3523116	0					
ANR	3523238	Callee	dprintf		3523116	0					
ANR	3523239	Identifier	dprintf		3523116	0					
ANR	3523240	ArgumentList	D_ALWAYS		3523116	1					
ANR	3523241	Argument	D_ALWAYS		3523116	0					
ANR	3523242	Identifier	D_ALWAYS		3523116	0					
ANR	3523243	Argument	"""config file parameter %s not specified"""		3523116	1					
ANR	3523244	PrimaryExpression	"""config file parameter %s not specified"""		3523116	0					
ANR	3523245	Argument	flag_in_config_file		3523116	2					
ANR	3523246	Identifier	flag_in_config_file		3523116	0					
ANR	3523247	ReturnStatement	return FALSE ;	245:4:6554:6566	3523116	1	True				
ANR	3523248	Identifier	FALSE		3523116	0					
ANR	3523249	ExpressionStatement	runs_here = FALSE	247:3:6576:6593	3523116	3	True				
ANR	3523250	AssignmentExpression	runs_here = FALSE		3523116	0		=			
ANR	3523251	Identifier	runs_here		3523116	0					
ANR	3523252	Identifier	FALSE		3523116	1					
ANR	3523253	IdentifierDeclStatement	std :: vector < condor_sockaddr > addrs = resolve_hostname ( tmp ) ;	249:3:6599:6657	3523116	4	True				
ANR	3523254	IdentifierDecl	addrs = resolve_hostname ( tmp )		3523116	0					
ANR	3523255	IdentifierDeclType	std :: vector < condor_sockaddr >		3523116	0					
ANR	3523256	Identifier	addrs		3523116	1					
ANR	3523257	AssignmentExpression	addrs = resolve_hostname ( tmp )		3523116	2		=			
ANR	3523258	Identifier	addrs		3523116	0					
ANR	3523259	CallExpression	resolve_hostname ( tmp )		3523116	1					
ANR	3523260	Callee	resolve_hostname		3523116	0					
ANR	3523261	Identifier	resolve_hostname		3523116	0					
ANR	3523262	ArgumentList	tmp		3523116	1					
ANR	3523263	Argument	tmp		3523116	0					
ANR	3523264	Identifier	tmp		3523116	0					
ANR	3523265	IfStatement	if ( addrs . empty ( ) )		3523116	5					
ANR	3523266	Condition	addrs . empty ( )	250:7:6666:6678	3523116	0	True				
ANR	3523267	CallExpression	addrs . empty ( )		3523116	0					
ANR	3523268	Callee	addrs . empty		3523116	0					
ANR	3523269	MemberAccess	addrs . empty		3523116	0					
ANR	3523270	Identifier	addrs		3523116	0					
ANR	3523271	Identifier	empty		3523116	1					
ANR	3523272	ArgumentList			3523116	1					
ANR	3523273	CompoundStatement		31:22:884:884	3523116	1					
ANR	3523274	ExpressionStatement	"dprintf ( D_ALWAYS , ""Master couldn't lookup host %s\\n"" , tmp )"	251:4:6687:6745	3523116	0	True				
ANR	3523275	CallExpression	"dprintf ( D_ALWAYS , ""Master couldn't lookup host %s\\n"" , tmp )"		3523116	0					
ANR	3523276	Callee	dprintf		3523116	0					
ANR	3523277	Identifier	dprintf		3523116	0					
ANR	3523278	ArgumentList	D_ALWAYS		3523116	1					
ANR	3523279	Argument	D_ALWAYS		3523116	0					
ANR	3523280	Identifier	D_ALWAYS		3523116	0					
ANR	3523281	Argument	"""Master couldn't lookup host %s\\n"""		3523116	1					
ANR	3523282	PrimaryExpression	"""Master couldn't lookup host %s\\n"""		3523116	0					
ANR	3523283	Argument	tmp		3523116	2					
ANR	3523284	Identifier	tmp		3523116	0					
ANR	3523285	ReturnStatement	return FALSE ;	252:4:6751:6763	3523116	1	True				
ANR	3523286	Identifier	FALSE		3523116	0					
ANR	3523287	ForStatement	for ( i = 0 ; i < this_host_addr . size ( ) ; ++ i )		3523116	6					
ANR	3523288	ForInit	i = 0 ;	254:8:6779:6784	3523116	0	True				
ANR	3523289	AssignmentExpression	i = 0		3523116	0		=			
ANR	3523290	Identifier	i		3523116	0					
ANR	3523291	PrimaryExpression	0		3523116	1					
ANR	3523292	Condition	i < this_host_addr . size ( )	254:15:6786:6810	3523116	1	True				
ANR	3523293	RelationalExpression	i < this_host_addr . size ( )		3523116	0		<			
ANR	3523294	Identifier	i		3523116	0					
ANR	3523295	CallExpression	this_host_addr . size ( )		3523116	1					
ANR	3523296	Callee	this_host_addr . size		3523116	0					
ANR	3523297	MemberAccess	this_host_addr . size		3523116	0					
ANR	3523298	Identifier	this_host_addr		3523116	0					
ANR	3523299	Identifier	size		3523116	1					
ANR	3523300	ArgumentList			3523116	1					
ANR	3523301	UnaryExpression	++ i	254:42:6813:6815	3523116	2	True				
ANR	3523302	IncDec	++		3523116	0					
ANR	3523303	Identifier	i		3523116	1					
ANR	3523304	CompoundStatement		35:47:1021:1021	3523116	3					
ANR	3523305	ForStatement	for ( j = 0 ; j < addrs . size ( ) ; ++ j )		3523116	0					
ANR	3523306	ForInit	j = 0 ;	255:9:6829:6834	3523116	0	True				
ANR	3523307	AssignmentExpression	j = 0		3523116	0		=			
ANR	3523308	Identifier	j		3523116	0					
ANR	3523309	PrimaryExpression	0		3523116	1					
ANR	3523310	Condition	j < addrs . size ( )	255:16:6836:6851	3523116	1	True				
ANR	3523311	RelationalExpression	j < addrs . size ( )		3523116	0		<			
ANR	3523312	Identifier	j		3523116	0					
ANR	3523313	CallExpression	addrs . size ( )		3523116	1					
ANR	3523314	Callee	addrs . size		3523116	0					
ANR	3523315	MemberAccess	addrs . size		3523116	0					
ANR	3523316	Identifier	addrs		3523116	0					
ANR	3523317	Identifier	size		3523116	1					
ANR	3523318	ArgumentList			3523116	1					
ANR	3523319	UnaryExpression	++ j	255:34:6854:6856	3523116	2	True				
ANR	3523320	IncDec	++		3523116	0					
ANR	3523321	Identifier	j		3523116	1					
ANR	3523322	CompoundStatement		36:39:1062:1062	3523116	3					
ANR	3523323	IfStatement	if ( this_host_addr [ i ] . compare_address ( addrs [ j ] ) )		3523116	0					
ANR	3523324	Condition	this_host_addr [ i ] . compare_address ( addrs [ j ] )	256:9:6870:6912	3523116	0	True				
ANR	3523325	CallExpression	this_host_addr [ i ] . compare_address ( addrs [ j ] )		3523116	0					
ANR	3523326	Callee	this_host_addr [ i ] . compare_address		3523116	0					
ANR	3523327	MemberAccess	this_host_addr [ i ] . compare_address		3523116	0					
ANR	3523328	ArrayIndexing	this_host_addr [ i ]		3523116	0					
ANR	3523329	Identifier	this_host_addr		3523116	0					
ANR	3523330	Identifier	i		3523116	1					
ANR	3523331	Identifier	compare_address		3523116	1					
ANR	3523332	ArgumentList	addrs [ j ]		3523116	1					
ANR	3523333	Argument	addrs [ j ]		3523116	0					
ANR	3523334	ArrayIndexing	addrs [ j ]		3523116	0					
ANR	3523335	Identifier	addrs		3523116	0					
ANR	3523336	Identifier	j		3523116	1					
ANR	3523337	CompoundStatement		37:54:1118:1118	3523116	1					
ANR	3523338	ExpressionStatement	runs_here = TRUE	257:6:6923:6939	3523116	0	True				
ANR	3523339	AssignmentExpression	runs_here = TRUE		3523116	0		=			
ANR	3523340	Identifier	runs_here		3523116	0					
ANR	3523341	Identifier	TRUE		3523116	1					
ANR	3523342	BreakStatement	break ;	258:6:6947:6952	3523116	1	True				
ANR	3523343	IfStatement	"if ( strcmp ( name_in_config_file , ""KBDD"" ) == 0 )"		3523116	7					
ANR	3523344	Condition	"strcmp ( name_in_config_file , ""KBDD"" ) == 0"	264:4:6983:7022	3523116	0	True				
ANR	3523345	EqualityExpression	"strcmp ( name_in_config_file , ""KBDD"" ) == 0"		3523116	0		==			
ANR	3523346	CallExpression	"strcmp ( name_in_config_file , ""KBDD"" )"		3523116	0					
ANR	3523347	Callee	strcmp		3523116	0					
ANR	3523348	Identifier	strcmp		3523116	0					
ANR	3523349	ArgumentList	name_in_config_file		3523116	1					
ANR	3523350	Argument	name_in_config_file		3523116	0					
ANR	3523351	Identifier	name_in_config_file		3523116	0					
ANR	3523352	Argument	"""KBDD"""		3523116	1					
ANR	3523353	PrimaryExpression	"""KBDD"""		3523116	0					
ANR	3523354	PrimaryExpression	0		3523116	1					
ANR	3523355	CompoundStatement		48:1:1322:1322	3523116	1					
ANR	3523356	ExpressionStatement	"runs_here = param_boolean_crufty ( ""X_RUNS_HERE"" , false ) ? TRUE : FALSE"	268:2:7123:7192	3523116	0	True				
ANR	3523357	AssignmentExpression	"runs_here = param_boolean_crufty ( ""X_RUNS_HERE"" , false ) ? TRUE : FALSE"		3523116	0		=			
ANR	3523358	Identifier	runs_here		3523116	0					
ANR	3523359	ConditionalExpression	"param_boolean_crufty ( ""X_RUNS_HERE"" , false ) ? TRUE : FALSE"		3523116	1					
ANR	3523360	Condition	"param_boolean_crufty ( ""X_RUNS_HERE"" , false )"		3523116	0					
ANR	3523361	CallExpression	"param_boolean_crufty ( ""X_RUNS_HERE"" , false )"		3523116	0					
ANR	3523362	Callee	param_boolean_crufty		3523116	0					
ANR	3523363	Identifier	param_boolean_crufty		3523116	0					
ANR	3523364	ArgumentList	"""X_RUNS_HERE"""		3523116	1					
ANR	3523365	Argument	"""X_RUNS_HERE"""		3523116	0					
ANR	3523366	PrimaryExpression	"""X_RUNS_HERE"""		3523116	0					
ANR	3523367	Argument	false		3523116	1					
ANR	3523368	Identifier	false		3523116	0					
ANR	3523369	Identifier	TRUE		3523116	1					
ANR	3523370	Identifier	FALSE		3523116	2					
ANR	3523371	ReturnStatement	return runs_here ;	270:1:7198:7214	3523116	8	True				
ANR	3523372	Identifier	runs_here		3523116	0					
ANR	3523373	ReturnType	int		3523116	1					
ANR	3523374	Identifier	daemon :: runs_on_this_host		3523116	2					
ANR	3523375	ParameterList			3523116	3					
ANR	3523376	CFGEntryNode	ENTRY		3523116		True				
ANR	3523377	CFGExitNode	EXIT		3523116		True				
ANR	3523378	Symbol	this_host_addr . size		3523116						
ANR	3523379	Symbol	addrs . size		3523116						
ANR	3523380	Symbol	this_host_addr_cached		3523116						
ANR	3523381	Symbol	* addrs		3523116						
ANR	3523382	Symbol	this_host_addr		3523116						
ANR	3523383	Symbol	name_in_config_file		3523116						
ANR	3523384	Symbol	strncmp		3523116						
ANR	3523385	Symbol	param		3523116						
ANR	3523386	Symbol	tmp		3523116						
ANR	3523387	Symbol	param_boolean_crufty		3523116						
ANR	3523388	Symbol	* this_host_addr		3523116						
ANR	3523389	Symbol	strcmp		3523116						
ANR	3523390	Symbol	NULL		3523116						
ANR	3523391	Symbol	addrs		3523116						
ANR	3523392	Symbol	false		3523116						
ANR	3523393	Symbol	D_ALWAYS		3523116						
ANR	3523394	Symbol	i		3523116						
ANR	3523395	Symbol	TRUE		3523116						
ANR	3523396	Symbol	get_local_hostname		3523116						
ANR	3523397	Symbol	this_host_addr . empty		3523116						
ANR	3523398	Symbol	j		3523116						
ANR	3523399	Symbol	addrs . empty		3523116						
ANR	3523400	Symbol	flag_in_config_file		3523116						
ANR	3523401	Symbol	* i		3523116						
ANR	3523402	Symbol	* j		3523116						
ANR	3523403	Symbol	resolve_hostname		3523116						
ANR	3523404	Symbol	true		3523116						
ANR	3523405	Symbol	FALSE		3523116						
ANR	3523406	Symbol	local_hostname		3523116						
ANR	3523407	Symbol	this_host_addr [ i ] . compare_address		3523116						
ANR	3523408	Symbol	MATCH		3523116						
ANR	3523409	Symbol	runs_here		3523116						
ANR	3523410	Function	daemon :: Recover	274:0:7220:7342							
ANR	3523411	FunctionDef	daemon :: Recover ()		3523410	0					
ANR	3523412	CompoundStatement		276:0:7243:7342	3523410	0					
ANR	3523413	ExpressionStatement	restarts = 0	277:1:7246:7258	3523410	0	True				
ANR	3523414	AssignmentExpression	restarts = 0		3523410	0		=			
ANR	3523415	Identifier	restarts		3523410	0					
ANR	3523416	PrimaryExpression	0		3523410	1					
ANR	3523417	ExpressionStatement	recover_tid = - 1	278:1:7261:7277	3523410	1	True				
ANR	3523418	AssignmentExpression	recover_tid = - 1		3523410	0		=			
ANR	3523419	Identifier	recover_tid		3523410	0					
ANR	3523420	UnaryOperationExpression	- 1		3523410	1					
ANR	3523421	UnaryOperator	-		3523410	0					
ANR	3523422	PrimaryExpression	1		3523410	1					
ANR	3523423	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""%s recovered\\n"" , name_in_config_file )"	279:1:7281:7340	3523410	2	True				
ANR	3523424	CallExpression	"dprintf ( D_FULLDEBUG , ""%s recovered\\n"" , name_in_config_file )"		3523410	0					
ANR	3523425	Callee	dprintf		3523410	0					
ANR	3523426	Identifier	dprintf		3523410	0					
ANR	3523427	ArgumentList	D_FULLDEBUG		3523410	1					
ANR	3523428	Argument	D_FULLDEBUG		3523410	0					
ANR	3523429	Identifier	D_FULLDEBUG		3523410	0					
ANR	3523430	Argument	"""%s recovered\\n"""		3523410	1					
ANR	3523431	PrimaryExpression	"""%s recovered\\n"""		3523410	0					
ANR	3523432	Argument	name_in_config_file		3523410	2					
ANR	3523433	Identifier	name_in_config_file		3523410	0					
ANR	3523434	ReturnType	void		3523410	1					
ANR	3523435	Identifier	daemon :: Recover		3523410	2					
ANR	3523436	ParameterList			3523410	3					
ANR	3523437	CFGEntryNode	ENTRY		3523410		True				
ANR	3523438	CFGExitNode	EXIT		3523410		True				
ANR	3523439	Symbol	recover_tid		3523410						
ANR	3523440	Symbol	D_FULLDEBUG		3523410						
ANR	3523441	Symbol	restarts		3523410						
ANR	3523442	Symbol	name_in_config_file		3523410						
ANR	3523443	Function	daemon :: NextStart	283:0:7346:7567							
ANR	3523444	FunctionDef	daemon :: NextStart ()		3523443	0					
ANR	3523445	CompoundStatement		285:0:7370:7567	3523443	0					
ANR	3523446	IdentifierDeclStatement	int seconds ;	286:1:7373:7384	3523443	0	True				
ANR	3523447	IdentifierDecl	seconds		3523443	0					
ANR	3523448	IdentifierDeclType	int		3523443	0					
ANR	3523449	Identifier	seconds		3523443	1					
ANR	3523450	Statement	seconds	287:1:7387:7393	3523443	1	True				
ANR	3523451	Statement	=	287:9:7395:7395	3523443	2	True				
ANR	3523452	Statement	m_backoff_constant	287:11:7397:7414	3523443	3	True				
ANR	3523453	Statement	+	287:30:7416:7416	3523443	4	True				
ANR	3523454	Statement	(	287:32:7418:7418	3523443	5	True				
ANR	3523455	Statement	int	287:33:7419:7421	3523443	6	True				
ANR	3523456	Statement	)	287:36:7422:7422	3523443	7	True				
ANR	3523457	Statement	ceil	287:37:7423:7426	3523443	8	True				
ANR	3523458	Statement	(	287:41:7427:7427	3523443	9	True				
ANR	3523459	Statement	::	287:42:7428:7429	3523443	10	True				
ANR	3523460	Statement	pow	287:44:7430:7432	3523443	11	True				
ANR	3523461	Statement	(	287:47:7433:7433	3523443	12	True				
ANR	3523462	Statement	m_backoff_factor	287:48:7434:7449	3523443	13	True				
ANR	3523463	Statement	","	287:64:7450:7450	3523443	14	True				
ANR	3523464	Statement	restarts	287:66:7452:7459	3523443	15	True				
ANR	3523465	Statement	)	287:74:7460:7460	3523443	16	True				
ANR	3523466	Statement	)	287:75:7461:7461	3523443	17	True				
ANR	3523467	ExpressionStatement		287:76:7462:7462	3523443	18	True				
ANR	3523468	IfStatement	if ( seconds > m_backoff_ceiling || seconds < 0 )		3523443	19					
ANR	3523469	Condition	seconds > m_backoff_ceiling || seconds < 0	288:5:7469:7510	3523443	0	True				
ANR	3523470	OrExpression	seconds > m_backoff_ceiling || seconds < 0		3523443	0		||			
ANR	3523471	RelationalExpression	seconds > m_backoff_ceiling		3523443	0		>			
ANR	3523472	Identifier	seconds		3523443	0					
ANR	3523473	Identifier	m_backoff_ceiling		3523443	1					
ANR	3523474	RelationalExpression	seconds < 0		3523443	1		<			
ANR	3523475	Identifier	seconds		3523443	0					
ANR	3523476	PrimaryExpression	0		3523443	1					
ANR	3523477	CompoundStatement		4:50:143:143	3523443	1					
ANR	3523478	ExpressionStatement	seconds = m_backoff_ceiling	289:2:7518:7545	3523443	0	True				
ANR	3523479	AssignmentExpression	seconds = m_backoff_ceiling		3523443	0		=			
ANR	3523480	Identifier	seconds		3523443	0					
ANR	3523481	Identifier	m_backoff_ceiling		3523443	1					
ANR	3523482	ReturnStatement	return seconds ;	291:1:7551:7565	3523443	20	True				
ANR	3523483	Identifier	seconds		3523443	0					
ANR	3523484	ReturnType	int		3523443	1					
ANR	3523485	Identifier	daemon :: NextStart		3523443	2					
ANR	3523486	ParameterList			3523443	3					
ANR	3523487	CFGEntryNode	ENTRY		3523443		True				
ANR	3523488	CFGExitNode	EXIT		3523443		True				
ANR	3523489	Symbol	m_backoff_ceiling		3523443						
ANR	3523490	Symbol	seconds		3523443						
ANR	3523491	Function	daemon :: Restart	295:0:7571:8615							
ANR	3523492	FunctionDef	daemon :: Restart ()		3523491	0					
ANR	3523493	CompoundStatement		296:0:7593:8615	3523491	0					
ANR	3523494	IdentifierDeclStatement	int n ;	297:1:7596:7602	3523491	0	True				
ANR	3523495	IdentifierDecl	n		3523491	0					
ANR	3523496	IdentifierDeclType	int		3523491	0					
ANR	3523497	Identifier	n		3523491	1					
ANR	3523498	IfStatement	if ( controller && ( restarts >= 2 ) )		3523491	1					
ANR	3523499	Condition	controller && ( restarts >= 2 )	299:6:7611:7641	3523491	0	True				
ANR	3523500	AndExpression	controller && ( restarts >= 2 )		3523491	0		&&			
ANR	3523501	Identifier	controller		3523491	0					
ANR	3523502	RelationalExpression	restarts >= 2		3523491	1		>=			
ANR	3523503	Identifier	restarts		3523491	0					
ANR	3523504	PrimaryExpression	2		3523491	1					
ANR	3523505	CompoundStatement		4:40:51:51	3523491	1					
ANR	3523506	ExpressionStatement	"dprintf ( D_ALWAYS , ""Telling %s's controller (%s)\\n"" , name_in_config_file , controller -> name_in_config_file )"	300:2:7649:7761	3523491	0	True				
ANR	3523507	CallExpression	"dprintf ( D_ALWAYS , ""Telling %s's controller (%s)\\n"" , name_in_config_file , controller -> name_in_config_file )"		3523491	0					
ANR	3523508	Callee	dprintf		3523491	0					
ANR	3523509	Identifier	dprintf		3523491	0					
ANR	3523510	ArgumentList	D_ALWAYS		3523491	1					
ANR	3523511	Argument	D_ALWAYS		3523491	0					
ANR	3523512	Identifier	D_ALWAYS		3523491	0					
ANR	3523513	Argument	"""Telling %s's controller (%s)\\n"""		3523491	1					
ANR	3523514	PrimaryExpression	"""Telling %s's controller (%s)\\n"""		3523491	0					
ANR	3523515	Argument	name_in_config_file		3523491	2					
ANR	3523516	Identifier	name_in_config_file		3523491	0					
ANR	3523517	Argument	controller -> name_in_config_file		3523491	3					
ANR	3523518	PtrMemberAccess	controller -> name_in_config_file		3523491	0					
ANR	3523519	Identifier	controller		3523491	0					
ANR	3523520	Identifier	name_in_config_file		3523491	1					
ANR	3523521	ExpressionStatement	controller -> Stop ( )	302:2:7765:7784	3523491	1	True				
ANR	3523522	CallExpression	controller -> Stop ( )		3523491	0					
ANR	3523523	Callee	controller -> Stop		3523491	0					
ANR	3523524	PtrMemberAccess	controller -> Stop		3523491	0					
ANR	3523525	Identifier	controller		3523491	0					
ANR	3523526	Identifier	Stop		3523491	1					
ANR	3523527	ArgumentList			3523491	1					
ANR	3523528	ExpressionStatement	on_hold = true	303:2:7788:7802	3523491	2	True				
ANR	3523529	AssignmentExpression	on_hold = true		3523491	0		=			
ANR	3523530	Identifier	on_hold		3523491	0					
ANR	3523531	Identifier	true		3523491	1					
ANR	3523532	IfStatement	if ( on_hold )		3523491	2					
ANR	3523533	Condition	on_hold	305:5:7812:7818	3523491	0	True				
ANR	3523534	Identifier	on_hold		3523491	0					
ANR	3523535	CompoundStatement		10:15:228:228	3523491	1					
ANR	3523536	ReturnStatement	return FALSE ;	306:2:7826:7838	3523491	0	True				
ANR	3523537	Identifier	FALSE		3523491	0					
ANR	3523538	IfStatement	if ( newExec == TRUE )		3523491	3					
ANR	3523539	Condition	newExec == TRUE	308:4:7847:7861	3523491	0	True				
ANR	3523540	EqualityExpression	newExec == TRUE		3523491	0		==			
ANR	3523541	Identifier	newExec		3523491	0					
ANR	3523542	Identifier	TRUE		3523491	1					
ANR	3523543	CompoundStatement		13:21:270:270	3523491	1					
ANR	3523544	ExpressionStatement	restarts = 0	309:2:7868:7880	3523491	0	True				
ANR	3523545	AssignmentExpression	restarts = 0		3523491	0		=			
ANR	3523546	Identifier	restarts		3523491	0					
ANR	3523547	PrimaryExpression	0		3523491	1					
ANR	3523548	ExpressionStatement	newExec = FALSE	310:2:7884:7899	3523491	1	True				
ANR	3523549	AssignmentExpression	newExec = FALSE		3523491	0		=			
ANR	3523550	Identifier	newExec		3523491	0					
ANR	3523551	Identifier	FALSE		3523491	1					
ANR	3523552	ExpressionStatement	n = new_bin_delay	311:2:7904:7921	3523491	2	True				
ANR	3523553	AssignmentExpression	n = new_bin_delay		3523491	0		=			
ANR	3523554	Identifier	n		3523491	0					
ANR	3523555	Identifier	new_bin_delay		3523491	1					
ANR	3523556	ElseStatement	else		3523491	0					
ANR	3523557	CompoundStatement		17:8:337:337	3523491	0					
ANR	3523558	ExpressionStatement	n = NextStart ( )	313:2:7935:7950	3523491	0	True				
ANR	3523559	AssignmentExpression	n = NextStart ( )		3523491	0		=			
ANR	3523560	Identifier	n		3523491	0					
ANR	3523561	CallExpression	NextStart ( )		3523491	1					
ANR	3523562	Callee	NextStart		3523491	0					
ANR	3523563	Identifier	NextStart		3523491	0					
ANR	3523564	ArgumentList			3523491	1					
ANR	3523565	ExpressionStatement	restarts ++	314:2:7954:7964	3523491	1	True				
ANR	3523566	PostIncDecOperationExpression	restarts ++		3523491	0					
ANR	3523567	Identifier	restarts		3523491	0					
ANR	3523568	IncDec	++		3523491	1					
ANR	3523569	IfStatement	if ( recover_tid != - 1 )		3523491	4					
ANR	3523570	Condition	recover_tid != - 1	317:5:7975:7991	3523491	0	True				
ANR	3523571	EqualityExpression	recover_tid != - 1		3523491	0		!=			
ANR	3523572	Identifier	recover_tid		3523491	0					
ANR	3523573	UnaryOperationExpression	- 1		3523491	1					
ANR	3523574	UnaryOperator	-		3523491	0					
ANR	3523575	PrimaryExpression	1		3523491	1					
ANR	3523576	CompoundStatement		22:25:401:401	3523491	1					
ANR	3523577	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Cancelling recovering timer (%d) for %s\\n"" , recover_tid , process_name )"	318:2:7999:8105	3523491	0	True				
ANR	3523578	CallExpression	"dprintf ( D_FULLDEBUG , ""Cancelling recovering timer (%d) for %s\\n"" , recover_tid , process_name )"		3523491	0					
ANR	3523579	Callee	dprintf		3523491	0					
ANR	3523580	Identifier	dprintf		3523491	0					
ANR	3523581	ArgumentList	D_FULLDEBUG		3523491	1					
ANR	3523582	Argument	D_FULLDEBUG		3523491	0					
ANR	3523583	Identifier	D_FULLDEBUG		3523491	0					
ANR	3523584	Argument	"""Cancelling recovering timer (%d) for %s\\n"""		3523491	1					
ANR	3523585	PrimaryExpression	"""Cancelling recovering timer (%d) for %s\\n"""		3523491	0					
ANR	3523586	Argument	recover_tid		3523491	2					
ANR	3523587	Identifier	recover_tid		3523491	0					
ANR	3523588	Argument	process_name		3523491	3					
ANR	3523589	Identifier	process_name		3523491	0					
ANR	3523590	ExpressionStatement	daemonCore -> Cancel_Timer ( recover_tid )	321:2:8109:8148	3523491	1	True				
ANR	3523591	CallExpression	daemonCore -> Cancel_Timer ( recover_tid )		3523491	0					
ANR	3523592	Callee	daemonCore -> Cancel_Timer		3523491	0					
ANR	3523593	PtrMemberAccess	daemonCore -> Cancel_Timer		3523491	0					
ANR	3523594	Identifier	daemonCore		3523491	0					
ANR	3523595	Identifier	Cancel_Timer		3523491	1					
ANR	3523596	ArgumentList	recover_tid		3523491	1					
ANR	3523597	Argument	recover_tid		3523491	0					
ANR	3523598	Identifier	recover_tid		3523491	0					
ANR	3523599	ExpressionStatement	recover_tid = - 1	322:2:8152:8168	3523491	2	True				
ANR	3523600	AssignmentExpression	recover_tid = - 1		3523491	0		=			
ANR	3523601	Identifier	recover_tid		3523491	0					
ANR	3523602	UnaryOperationExpression	- 1		3523491	1					
ANR	3523603	UnaryOperator	-		3523491	0					
ANR	3523604	PrimaryExpression	1		3523491	1					
ANR	3523605	IfStatement	if ( start_tid != - 1 )		3523491	5					
ANR	3523606	Condition	start_tid != - 1	324:5:8178:8192	3523491	0	True				
ANR	3523607	EqualityExpression	start_tid != - 1		3523491	0		!=			
ANR	3523608	Identifier	start_tid		3523491	0					
ANR	3523609	UnaryOperationExpression	- 1		3523491	1					
ANR	3523610	UnaryOperator	-		3523491	0					
ANR	3523611	PrimaryExpression	1		3523491	1					
ANR	3523612	CompoundStatement		29:23:602:602	3523491	1					
ANR	3523613	ExpressionStatement	daemonCore -> Cancel_Timer ( start_tid )	325:2:8200:8237	3523491	0	True				
ANR	3523614	CallExpression	daemonCore -> Cancel_Timer ( start_tid )		3523491	0					
ANR	3523615	Callee	daemonCore -> Cancel_Timer		3523491	0					
ANR	3523616	PtrMemberAccess	daemonCore -> Cancel_Timer		3523491	0					
ANR	3523617	Identifier	daemonCore		3523491	0					
ANR	3523618	Identifier	Cancel_Timer		3523491	1					
ANR	3523619	ArgumentList	start_tid		3523491	1					
ANR	3523620	Argument	start_tid		3523491	0					
ANR	3523621	Identifier	start_tid		3523491	0					
ANR	3523622	ExpressionStatement	"start_tid = daemonCore -> Register_Timer ( n , ( TimerHandlercpp ) & daemon :: DoStart , ""daemon::DoStart()"" , this )"	327:1:8243:8357	3523491	6	True				
ANR	3523623	AssignmentExpression	"start_tid = daemonCore -> Register_Timer ( n , ( TimerHandlercpp ) & daemon :: DoStart , ""daemon::DoStart()"" , this )"		3523491	0		=			
ANR	3523624	Identifier	start_tid		3523491	0					
ANR	3523625	CallExpression	"daemonCore -> Register_Timer ( n , ( TimerHandlercpp ) & daemon :: DoStart , ""daemon::DoStart()"" , this )"		3523491	1					
ANR	3523626	Callee	daemonCore -> Register_Timer		3523491	0					
ANR	3523627	PtrMemberAccess	daemonCore -> Register_Timer		3523491	0					
ANR	3523628	Identifier	daemonCore		3523491	0					
ANR	3523629	Identifier	Register_Timer		3523491	1					
ANR	3523630	ArgumentList	n		3523491	1					
ANR	3523631	Argument	n		3523491	0					
ANR	3523632	Identifier	n		3523491	0					
ANR	3523633	Argument	( TimerHandlercpp ) & daemon :: DoStart		3523491	1					
ANR	3523634	CastExpression	( TimerHandlercpp ) & daemon :: DoStart		3523491	0					
ANR	3523635	CastTarget	TimerHandlercpp		3523491	0					
ANR	3523636	UnaryOperationExpression	& daemon :: DoStart		3523491	1					
ANR	3523637	UnaryOperator	&		3523491	0					
ANR	3523638	Identifier	daemon :: DoStart		3523491	1					
ANR	3523639	Argument	"""daemon::DoStart()"""		3523491	2					
ANR	3523640	PrimaryExpression	"""daemon::DoStart()"""		3523491	0					
ANR	3523641	Argument	this		3523491	3					
ANR	3523642	Identifier	this		3523491	0					
ANR	3523643	ExpressionStatement	"dprintf ( D_ALWAYS , ""restarting %s in %d seconds\\n"" , process_name , n )"	330:1:8360:8427	3523491	7	True				
ANR	3523644	CallExpression	"dprintf ( D_ALWAYS , ""restarting %s in %d seconds\\n"" , process_name , n )"		3523491	0					
ANR	3523645	Callee	dprintf		3523491	0					
ANR	3523646	Identifier	dprintf		3523491	0					
ANR	3523647	ArgumentList	D_ALWAYS		3523491	1					
ANR	3523648	Argument	D_ALWAYS		3523491	0					
ANR	3523649	Identifier	D_ALWAYS		3523491	0					
ANR	3523650	Argument	"""restarting %s in %d seconds\\n"""		3523491	1					
ANR	3523651	PrimaryExpression	"""restarting %s in %d seconds\\n"""		3523491	0					
ANR	3523652	Argument	process_name		3523491	2					
ANR	3523653	Identifier	process_name		3523491	0					
ANR	3523654	Argument	n		3523491	3					
ANR	3523655	Identifier	n		3523491	0					
ANR	3523656	ExpressionStatement	daemons . UpdateCollector ( )	333:1:8490:8515	3523491	8	True				
ANR	3523657	CallExpression	daemons . UpdateCollector ( )		3523491	0					
ANR	3523658	Callee	daemons . UpdateCollector		3523491	0					
ANR	3523659	MemberAccess	daemons . UpdateCollector		3523491	0					
ANR	3523660	Identifier	daemons		3523491	0					
ANR	3523661	Identifier	UpdateCollector		3523491	1					
ANR	3523662	ArgumentList			3523491	1					
ANR	3523663	ExpressionStatement	needs_update = TRUE	336:1:8582:8601	3523491	9	True				
ANR	3523664	AssignmentExpression	needs_update = TRUE		3523491	0		=			
ANR	3523665	Identifier	needs_update		3523491	0					
ANR	3523666	Identifier	TRUE		3523491	1					
ANR	3523667	ReturnStatement	return 1 ;	338:1:8605:8613	3523491	10	True				
ANR	3523668	PrimaryExpression	1		3523491	0					
ANR	3523669	ReturnType	int		3523491	1					
ANR	3523670	Identifier	daemon :: Restart		3523491	2					
ANR	3523671	ParameterList			3523491	3					
ANR	3523672	CFGEntryNode	ENTRY		3523491		True				
ANR	3523673	CFGExitNode	EXIT		3523491		True				
ANR	3523674	Symbol	name_in_config_file		3523491						
ANR	3523675	Symbol	process_name		3523491						
ANR	3523676	Symbol	new_bin_delay		3523491						
ANR	3523677	Symbol	daemonCore		3523491						
ANR	3523678	Symbol	daemons		3523491						
ANR	3523679	Symbol	NextStart		3523491						
ANR	3523680	Symbol	controller		3523491						
ANR	3523681	Symbol	recover_tid		3523491						
ANR	3523682	Symbol	newExec		3523491						
ANR	3523683	Symbol	controller -> name_in_config_file		3523491						
ANR	3523684	Symbol	D_ALWAYS		3523491						
ANR	3523685	Symbol	start_tid		3523491						
ANR	3523686	Symbol	this		3523491						
ANR	3523687	Symbol	TRUE		3523491						
ANR	3523688	Symbol	D_FULLDEBUG		3523491						
ANR	3523689	Symbol	* controller		3523491						
ANR	3523690	Symbol	on_hold		3523491						
ANR	3523691	Symbol	restarts		3523491						
ANR	3523692	Symbol	n		3523491						
ANR	3523693	Symbol	needs_update		3523491						
ANR	3523694	Symbol	* daemonCore		3523491						
ANR	3523695	Symbol	daemonCore -> Register_Timer		3523491						
ANR	3523696	Symbol	true		3523491						
ANR	3523697	Symbol	FALSE		3523491						
ANR	3523698	Symbol	& daemon :: DoStart		3523491						
ANR	3523699	Function	daemon :: DoStart	344:0:8757:8860							
ANR	3523700	FunctionDef	daemon :: DoStart ()		3523699	0					
ANR	3523701	CompoundStatement		346:0:8780:8860	3523699	0					
ANR	3523702	ExpressionStatement	start_tid = - 1	347:1:8783:8797	3523699	0	True				
ANR	3523703	AssignmentExpression	start_tid = - 1		3523699	0		=			
ANR	3523704	Identifier	start_tid		3523699	0					
ANR	3523705	UnaryOperationExpression	- 1		3523699	1					
ANR	3523706	UnaryOperator	-		3523699	0					
ANR	3523707	PrimaryExpression	1		3523699	1					
ANR	3523708	ExpressionStatement	Start ( true )	348:1:8800:8813	3523699	1	True				
ANR	3523709	CallExpression	Start ( true )		3523699	0					
ANR	3523710	Callee	Start		3523699	0					
ANR	3523711	Identifier	Start		3523699	0					
ANR	3523712	ArgumentList	true		3523699	1					
ANR	3523713	Argument	true		3523699	0					
ANR	3523714	Identifier	true		3523699	0					
ANR	3523715	ReturnType	void		3523699	1					
ANR	3523716	Identifier	daemon :: DoStart		3523699	2					
ANR	3523717	ParameterList			3523699	3					
ANR	3523718	CFGEntryNode	ENTRY		3523699		True				
ANR	3523719	CFGExitNode	EXIT		3523699		True				
ANR	3523720	Symbol	start_tid		3523699						
ANR	3523721	Symbol	true		3523699						
ANR	3523722	Function	daemon :: DoConfig	354:0:8957:13429							
ANR	3523723	FunctionDef	daemon :: DoConfig (bool init)		3523722	0					
ANR	3523724	CompoundStatement		356:0:8992:13429	3523722	0					
ANR	3523725	IdentifierDeclStatement	char * tmp ;	357:1:8995:9004	3523722	0	True				
ANR	3523726	IdentifierDecl	* tmp		3523722	0					
ANR	3523727	IdentifierDeclType	char *		3523722	0					
ANR	3523728	Identifier	tmp		3523722	1					
ANR	3523729	IdentifierDeclStatement	char buf [ 1000 ] ;	358:1:9007:9021	3523722	1	True				
ANR	3523730	IdentifierDecl	buf [ 1000 ]		3523722	0					
ANR	3523731	IdentifierDeclType	char [ 1000 ]		3523722	0					
ANR	3523732	Identifier	buf		3523722	1					
ANR	3523733	PrimaryExpression	1000		3523722	2					
ANR	3523734	IfStatement	if ( init )		3523722	2					
ANR	3523735	Condition	init	361:6:9083:9086	3523722	0	True				
ANR	3523736	Identifier	init		3523722	0					
ANR	3523737	CompoundStatement		6:13:97:97	3523722	1					
ANR	3523738	ExpressionStatement	flag_in_config_file = NULL	362:2:9094:9120	3523722	0	True				
ANR	3523739	AssignmentExpression	flag_in_config_file = NULL		3523722	0		=			
ANR	3523740	Identifier	flag_in_config_file		3523722	0					
ANR	3523741	Identifier	NULL		3523722	1					
ANR	3523742	ExpressionStatement	"sprintf ( buf , ""%s_FLAG"" , name_in_config_file )"	366:1:9161:9206	3523722	3	True				
ANR	3523743	CallExpression	"sprintf ( buf , ""%s_FLAG"" , name_in_config_file )"		3523722	0					
ANR	3523744	Callee	sprintf		3523722	0					
ANR	3523745	Identifier	sprintf		3523722	0					
ANR	3523746	ArgumentList	buf		3523722	1					
ANR	3523747	Argument	buf		3523722	0					
ANR	3523748	Identifier	buf		3523722	0					
ANR	3523749	Argument	"""%s_FLAG"""		3523722	1					
ANR	3523750	PrimaryExpression	"""%s_FLAG"""		3523722	0					
ANR	3523751	Argument	name_in_config_file		3523722	2					
ANR	3523752	Identifier	name_in_config_file		3523722	0					
ANR	3523753	ExpressionStatement	tmp = param ( buf )	367:1:9209:9225	3523722	4	True				
ANR	3523754	AssignmentExpression	tmp = param ( buf )		3523722	0		=			
ANR	3523755	Identifier	tmp		3523722	0					
ANR	3523756	CallExpression	param ( buf )		3523722	1					
ANR	3523757	Callee	param		3523722	0					
ANR	3523758	Identifier	param		3523722	0					
ANR	3523759	ArgumentList	buf		3523722	1					
ANR	3523760	Argument	buf		3523722	0					
ANR	3523761	Identifier	buf		3523722	0					
ANR	3523762	IfStatement	if ( NULL != flag_in_config_file )		3523722	5					
ANR	3523763	Condition	NULL != flag_in_config_file	370:6:9257:9283	3523722	0	True				
ANR	3523764	EqualityExpression	NULL != flag_in_config_file		3523722	0		!=			
ANR	3523765	Identifier	NULL		3523722	0					
ANR	3523766	Identifier	flag_in_config_file		3523722	1					
ANR	3523767	CompoundStatement		15:36:294:294	3523722	1					
ANR	3523768	IfStatement	"if ( tmp && strcmp ( flag_in_config_file , tmp ) )"		3523722	0					
ANR	3523769	Condition	"tmp && strcmp ( flag_in_config_file , tmp )"	372:6:9316:9356	3523722	0	True				
ANR	3523770	AndExpression	"tmp && strcmp ( flag_in_config_file , tmp )"		3523722	0		&&			
ANR	3523771	Identifier	tmp		3523722	0					
ANR	3523772	CallExpression	"strcmp ( flag_in_config_file , tmp )"		3523722	1					
ANR	3523773	Callee	strcmp		3523722	0					
ANR	3523774	Identifier	strcmp		3523722	0					
ANR	3523775	ArgumentList	flag_in_config_file		3523722	1					
ANR	3523776	Argument	flag_in_config_file		3523722	0					
ANR	3523777	Identifier	flag_in_config_file		3523722	0					
ANR	3523778	Argument	tmp		3523722	1					
ANR	3523779	Identifier	tmp		3523722	0					
ANR	3523780	CompoundStatement		17:50:367:367	3523722	1					
ANR	3523781	ExpressionStatement	free ( flag_in_config_file )	373:3:9365:9392	3523722	0	True				
ANR	3523782	CallExpression	free ( flag_in_config_file )		3523722	0					
ANR	3523783	Callee	free		3523722	0					
ANR	3523784	Identifier	free		3523722	0					
ANR	3523785	ArgumentList	flag_in_config_file		3523722	1					
ANR	3523786	Argument	flag_in_config_file		3523722	0					
ANR	3523787	Identifier	flag_in_config_file		3523722	0					
ANR	3523788	ExpressionStatement	flag_in_config_file = tmp	374:3:9397:9422	3523722	1	True				
ANR	3523789	AssignmentExpression	flag_in_config_file = tmp		3523722	0		=			
ANR	3523790	Identifier	flag_in_config_file		3523722	0					
ANR	3523791	Identifier	tmp		3523722	1					
ANR	3523792	ElseStatement	else		3523722	0					
ANR	3523793	IfStatement	if ( NULL != tmp )		3523722	0					
ANR	3523794	Condition	NULL != tmp	375:14:9438:9448	3523722	0	True				
ANR	3523795	EqualityExpression	NULL != tmp		3523722	0		!=			
ANR	3523796	Identifier	NULL		3523722	0					
ANR	3523797	Identifier	tmp		3523722	1					
ANR	3523798	CompoundStatement		20:28:459:459	3523722	1					
ANR	3523799	ExpressionStatement	free ( tmp )	377:3:9491:9502	3523722	0	True				
ANR	3523800	CallExpression	free ( tmp )		3523722	0					
ANR	3523801	Callee	free		3523722	0					
ANR	3523802	Identifier	free		3523722	0					
ANR	3523803	ArgumentList	tmp		3523722	1					
ANR	3523804	Argument	tmp		3523722	0					
ANR	3523805	Identifier	tmp		3523722	0					
ANR	3523806	ElseStatement	else		3523722	0					
ANR	3523807	CompoundStatement		23:9:520:520	3523722	0					
ANR	3523808	ElseStatement	else		3523722	0					
ANR	3523809	CompoundStatement		26:8:551:551	3523722	0					
ANR	3523810	ExpressionStatement	flag_in_config_file = tmp	383:2:9605:9630	3523722	0	True				
ANR	3523811	AssignmentExpression	flag_in_config_file = tmp		3523722	0		=			
ANR	3523812	Identifier	flag_in_config_file		3523722	0					
ANR	3523813	Identifier	tmp		3523722	1					
ANR	3523814	IfStatement	if ( is_ha )		3523722	6					
ANR	3523815	Condition	is_ha	387:6:9665:9669	3523722	0	True				
ANR	3523816	Identifier	is_ha		3523722	0					
ANR	3523817	CompoundStatement		32:14:680:680	3523722	1					
ANR	3523818	IfStatement	if ( SetupHighAvailability ( ) < 0 )		3523722	0					
ANR	3523819	Condition	SetupHighAvailability ( ) < 0	388:7:9682:9709	3523722	0	True				
ANR	3523820	RelationalExpression	SetupHighAvailability ( ) < 0		3523722	0		<			
ANR	3523821	CallExpression	SetupHighAvailability ( )		3523722	0					
ANR	3523822	Callee	SetupHighAvailability		3523722	0					
ANR	3523823	Identifier	SetupHighAvailability		3523722	0					
ANR	3523824	ArgumentList			3523722	1					
ANR	3523825	PrimaryExpression	0		3523722	1					
ANR	3523826	CompoundStatement		33:38:720:720	3523722	1					
ANR	3523827	ExpressionStatement	"sprintf ( buf , ""%s_ENVIRONMENT"" , name_in_config_file )"	394:1:9806:9858	3523722	7	True				
ANR	3523828	CallExpression	"sprintf ( buf , ""%s_ENVIRONMENT"" , name_in_config_file )"		3523722	0					
ANR	3523829	Callee	sprintf		3523722	0					
ANR	3523830	Identifier	sprintf		3523722	0					
ANR	3523831	ArgumentList	buf		3523722	1					
ANR	3523832	Argument	buf		3523722	0					
ANR	3523833	Identifier	buf		3523722	0					
ANR	3523834	Argument	"""%s_ENVIRONMENT"""		3523722	1					
ANR	3523835	PrimaryExpression	"""%s_ENVIRONMENT"""		3523722	0					
ANR	3523836	Argument	name_in_config_file		3523722	2					
ANR	3523837	Identifier	name_in_config_file		3523722	0					
ANR	3523838	IdentifierDeclStatement	char * env_string = param ( buf ) ;	395:1:9861:9892	3523722	8	True				
ANR	3523839	IdentifierDecl	* env_string = param ( buf )		3523722	0					
ANR	3523840	IdentifierDeclType	char *		3523722	0					
ANR	3523841	Identifier	env_string		3523722	1					
ANR	3523842	AssignmentExpression	* env_string = param ( buf )		3523722	2		=			
ANR	3523843	Identifier	env_string		3523722	0					
ANR	3523844	CallExpression	param ( buf )		3523722	1					
ANR	3523845	Callee	param		3523722	0					
ANR	3523846	Identifier	param		3523722	0					
ANR	3523847	ArgumentList	buf		3523722	1					
ANR	3523848	Argument	buf		3523722	0					
ANR	3523849	Identifier	buf		3523722	0					
ANR	3523850	IdentifierDeclStatement	Env env_parser ;	397:1:9896:9910	3523722	9	True				
ANR	3523851	IdentifierDecl	env_parser		3523722	0					
ANR	3523852	IdentifierDeclType	Env		3523722	0					
ANR	3523853	Identifier	env_parser		3523722	1					
ANR	3523854	IdentifierDeclStatement	MyString env_error_msg ;	398:1:9913:9935	3523722	10	True				
ANR	3523855	IdentifierDecl	env_error_msg		3523722	0					
ANR	3523856	IdentifierDeclType	MyString		3523722	0					
ANR	3523857	Identifier	env_error_msg		3523722	1					
ANR	3523858	IfStatement	"if ( ! env_parser . MergeFromV1RawOrV2Quoted ( env_string , & env_error_msg ) )"		3523722	11					
ANR	3523859	Condition	"! env_parser . MergeFromV1RawOrV2Quoted ( env_string , & env_error_msg )"	400:4:9942:10004	3523722	0	True				
ANR	3523860	UnaryOperationExpression	"! env_parser . MergeFromV1RawOrV2Quoted ( env_string , & env_error_msg )"		3523722	0					
ANR	3523861	UnaryOperator	!		3523722	0					
ANR	3523862	CallExpression	"env_parser . MergeFromV1RawOrV2Quoted ( env_string , & env_error_msg )"		3523722	1					
ANR	3523863	Callee	env_parser . MergeFromV1RawOrV2Quoted		3523722	0					
ANR	3523864	MemberAccess	env_parser . MergeFromV1RawOrV2Quoted		3523722	0					
ANR	3523865	Identifier	env_parser		3523722	0					
ANR	3523866	Identifier	MergeFromV1RawOrV2Quoted		3523722	1					
ANR	3523867	ArgumentList	env_string		3523722	1					
ANR	3523868	Argument	env_string		3523722	0					
ANR	3523869	Identifier	env_string		3523722	0					
ANR	3523870	Argument	& env_error_msg		3523722	1					
ANR	3523871	UnaryOperationExpression	& env_error_msg		3523722	0					
ANR	3523872	UnaryOperator	&		3523722	0					
ANR	3523873	Identifier	env_error_msg		3523722	1					
ANR	3523874	CompoundStatement		45:69:1014:1014	3523722	1					
ANR	3523875	ExpressionStatement	"EXCEPT ( ""ERROR: Failed to parse %s_ENVIRONMENT in config file: %s\\n"" , name_in_config_file , env_error_msg . Value ( ) )"	401:2:10011:10138	3523722	0	True				
ANR	3523876	CallExpression	"EXCEPT ( ""ERROR: Failed to parse %s_ENVIRONMENT in config file: %s\\n"" , name_in_config_file , env_error_msg . Value ( ) )"		3523722	0					
ANR	3523877	Callee	EXCEPT		3523722	0					
ANR	3523878	Identifier	EXCEPT		3523722	0					
ANR	3523879	ArgumentList	"""ERROR: Failed to parse %s_ENVIRONMENT in config file: %s\\n"""		3523722	1					
ANR	3523880	Argument	"""ERROR: Failed to parse %s_ENVIRONMENT in config file: %s\\n"""		3523722	0					
ANR	3523881	PrimaryExpression	"""ERROR: Failed to parse %s_ENVIRONMENT in config file: %s\\n"""		3523722	0					
ANR	3523882	Argument	name_in_config_file		3523722	1					
ANR	3523883	Identifier	name_in_config_file		3523722	0					
ANR	3523884	Argument	env_error_msg . Value ( )		3523722	2					
ANR	3523885	CallExpression	env_error_msg . Value ( )		3523722	0					
ANR	3523886	Callee	env_error_msg . Value		3523722	0					
ANR	3523887	MemberAccess	env_error_msg . Value		3523722	0					
ANR	3523888	Identifier	env_error_msg		3523722	0					
ANR	3523889	Identifier	Value		3523722	1					
ANR	3523890	ArgumentList			3523722	1					
ANR	3523891	ExpressionStatement	free ( env_string )	405:1:10144:10160	3523722	12	True				
ANR	3523892	CallExpression	free ( env_string )		3523722	0					
ANR	3523893	Callee	free		3523722	0					
ANR	3523894	Identifier	free		3523722	0					
ANR	3523895	ArgumentList	env_string		3523722	1					
ANR	3523896	Argument	env_string		3523722	0					
ANR	3523897	Identifier	env_string		3523722	0					
ANR	3523898	ExpressionStatement	this -> env . Clear ( )	407:1:10164:10181	3523722	13	True				
ANR	3523899	CallExpression	this -> env . Clear ( )		3523722	0					
ANR	3523900	Callee	this -> env . Clear		3523722	0					
ANR	3523901	MemberAccess	this -> env . Clear		3523722	0					
ANR	3523902	PtrMemberAccess	this -> env		3523722	0					
ANR	3523903	Identifier	this		3523722	0					
ANR	3523904	Identifier	env		3523722	1					
ANR	3523905	Identifier	Clear		3523722	1					
ANR	3523906	ArgumentList			3523722	1					
ANR	3523907	ExpressionStatement	this -> env . MergeFrom ( env_parser )	408:1:10184:10215	3523722	14	True				
ANR	3523908	CallExpression	this -> env . MergeFrom ( env_parser )		3523722	0					
ANR	3523909	Callee	this -> env . MergeFrom		3523722	0					
ANR	3523910	MemberAccess	this -> env . MergeFrom		3523722	0					
ANR	3523911	PtrMemberAccess	this -> env		3523722	0					
ANR	3523912	Identifier	this		3523722	0					
ANR	3523913	Identifier	env		3523722	1					
ANR	3523914	Identifier	MergeFrom		3523722	1					
ANR	3523915	ArgumentList	env_parser		3523722	1					
ANR	3523916	Argument	env_parser		3523722	0					
ANR	3523917	Identifier	env_parser		3523722	0					
ANR	3523918	IfStatement	if ( init )		3523722	15					
ANR	3523919	Condition	init	412:6:10349:10352	3523722	0	True				
ANR	3523920	Identifier	init		3523722	0					
ANR	3523921	CompoundStatement		57:13:1363:1363	3523722	1					
ANR	3523922	ExpressionStatement	"sprintf ( buf , ""MASTER_%s_CONTROLLER"" , name_in_config_file )"	413:2:10360:10418	3523722	0	True				
ANR	3523923	CallExpression	"sprintf ( buf , ""MASTER_%s_CONTROLLER"" , name_in_config_file )"		3523722	0					
ANR	3523924	Callee	sprintf		3523722	0					
ANR	3523925	Identifier	sprintf		3523722	0					
ANR	3523926	ArgumentList	buf		3523722	1					
ANR	3523927	Argument	buf		3523722	0					
ANR	3523928	Identifier	buf		3523722	0					
ANR	3523929	Argument	"""MASTER_%s_CONTROLLER"""		3523722	1					
ANR	3523930	PrimaryExpression	"""MASTER_%s_CONTROLLER"""		3523722	0					
ANR	3523931	Argument	name_in_config_file		3523722	2					
ANR	3523932	Identifier	name_in_config_file		3523722	0					
ANR	3523933	ExpressionStatement	controller_name = param ( buf )	414:2:10422:10452	3523722	1	True				
ANR	3523934	AssignmentExpression	controller_name = param ( buf )		3523722	0		=			
ANR	3523935	Identifier	controller_name		3523722	0					
ANR	3523936	CallExpression	param ( buf )		3523722	1					
ANR	3523937	Callee	param		3523722	0					
ANR	3523938	Identifier	param		3523722	0					
ANR	3523939	ArgumentList	buf		3523722	1					
ANR	3523940	Argument	buf		3523722	0					
ANR	3523941	Identifier	buf		3523722	0					
ANR	3523942	ExpressionStatement	controller = NULL	415:2:10456:10473	3523722	2	True				
ANR	3523943	AssignmentExpression	controller = NULL		3523722	0		=			
ANR	3523944	Identifier	controller		3523722	0					
ANR	3523945	Identifier	NULL		3523722	1					
ANR	3523946	ExpressionStatement	on_hold = true	416:2:10525:10539	3523722	3	True				
ANR	3523947	AssignmentExpression	on_hold = true		3523722	0		=			
ANR	3523948	Identifier	on_hold		3523722	0					
ANR	3523949	Identifier	true		3523722	1					
ANR	3523950	IfStatement	if ( controller_name )		3523722	4					
ANR	3523951	Condition	controller_name	417:7:10548:10562	3523722	0	True				
ANR	3523952	Identifier	controller_name		3523722	0					
ANR	3523953	CompoundStatement		62:25:1573:1573	3523722	1					
ANR	3523954	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Daemon %s is controlled by %s\\n"" , name_in_config_file , controller_name )"	418:3:10571:10672	3523722	0	True				
ANR	3523955	CallExpression	"dprintf ( D_FULLDEBUG , ""Daemon %s is controlled by %s\\n"" , name_in_config_file , controller_name )"		3523722	0					
ANR	3523956	Callee	dprintf		3523722	0					
ANR	3523957	Identifier	dprintf		3523722	0					
ANR	3523958	ArgumentList	D_FULLDEBUG		3523722	1					
ANR	3523959	Argument	D_FULLDEBUG		3523722	0					
ANR	3523960	Identifier	D_FULLDEBUG		3523722	0					
ANR	3523961	Argument	"""Daemon %s is controlled by %s\\n"""		3523722	1					
ANR	3523962	PrimaryExpression	"""Daemon %s is controlled by %s\\n"""		3523722	0					
ANR	3523963	Argument	name_in_config_file		3523722	2					
ANR	3523964	Identifier	name_in_config_file		3523722	0					
ANR	3523965	Argument	controller_name		3523722	3					
ANR	3523966	Identifier	controller_name		3523722	0					
ANR	3523967	ExpressionStatement	"sprintf ( buf , ""MASTER_%s_BACKOFF_CONSTANT"" , name_in_config_file )"	425:1:10765:10829	3523722	16	True				
ANR	3523968	CallExpression	"sprintf ( buf , ""MASTER_%s_BACKOFF_CONSTANT"" , name_in_config_file )"		3523722	0					
ANR	3523969	Callee	sprintf		3523722	0					
ANR	3523970	Identifier	sprintf		3523722	0					
ANR	3523971	ArgumentList	buf		3523722	1					
ANR	3523972	Argument	buf		3523722	0					
ANR	3523973	Identifier	buf		3523722	0					
ANR	3523974	Argument	"""MASTER_%s_BACKOFF_CONSTANT"""		3523722	1					
ANR	3523975	PrimaryExpression	"""MASTER_%s_BACKOFF_CONSTANT"""		3523722	0					
ANR	3523976	Argument	name_in_config_file		3523722	2					
ANR	3523977	Identifier	name_in_config_file		3523722	0					
ANR	3523978	ExpressionStatement	"m_backoff_constant = param_integer ( buf , master_backoff_constant , 1 )"	426:1:10832:10901	3523722	17	True				
ANR	3523979	AssignmentExpression	"m_backoff_constant = param_integer ( buf , master_backoff_constant , 1 )"		3523722	0		=			
ANR	3523980	Identifier	m_backoff_constant		3523722	0					
ANR	3523981	CallExpression	"param_integer ( buf , master_backoff_constant , 1 )"		3523722	1					
ANR	3523982	Callee	param_integer		3523722	0					
ANR	3523983	Identifier	param_integer		3523722	0					
ANR	3523984	ArgumentList	buf		3523722	1					
ANR	3523985	Argument	buf		3523722	0					
ANR	3523986	Identifier	buf		3523722	0					
ANR	3523987	Argument	master_backoff_constant		3523722	1					
ANR	3523988	Identifier	master_backoff_constant		3523722	0					
ANR	3523989	Argument	1		3523722	2					
ANR	3523990	PrimaryExpression	1		3523722	0					
ANR	3523991	ExpressionStatement	"sprintf ( buf , ""MASTER_%s_BACKOFF_CEILING"" , name_in_config_file )"	428:1:10905:10968	3523722	18	True				
ANR	3523992	CallExpression	"sprintf ( buf , ""MASTER_%s_BACKOFF_CEILING"" , name_in_config_file )"		3523722	0					
ANR	3523993	Callee	sprintf		3523722	0					
ANR	3523994	Identifier	sprintf		3523722	0					
ANR	3523995	ArgumentList	buf		3523722	1					
ANR	3523996	Argument	buf		3523722	0					
ANR	3523997	Identifier	buf		3523722	0					
ANR	3523998	Argument	"""MASTER_%s_BACKOFF_CEILING"""		3523722	1					
ANR	3523999	PrimaryExpression	"""MASTER_%s_BACKOFF_CEILING"""		3523722	0					
ANR	3524000	Argument	name_in_config_file		3523722	2					
ANR	3524001	Identifier	name_in_config_file		3523722	0					
ANR	3524002	ExpressionStatement	"m_backoff_ceiling = param_integer ( buf , master_backoff_ceiling , 1 )"	429:1:10971:11038	3523722	19	True				
ANR	3524003	AssignmentExpression	"m_backoff_ceiling = param_integer ( buf , master_backoff_ceiling , 1 )"		3523722	0		=			
ANR	3524004	Identifier	m_backoff_ceiling		3523722	0					
ANR	3524005	CallExpression	"param_integer ( buf , master_backoff_ceiling , 1 )"		3523722	1					
ANR	3524006	Callee	param_integer		3523722	0					
ANR	3524007	Identifier	param_integer		3523722	0					
ANR	3524008	ArgumentList	buf		3523722	1					
ANR	3524009	Argument	buf		3523722	0					
ANR	3524010	Identifier	buf		3523722	0					
ANR	3524011	Argument	master_backoff_ceiling		3523722	1					
ANR	3524012	Identifier	master_backoff_ceiling		3523722	0					
ANR	3524013	Argument	1		3523722	2					
ANR	3524014	PrimaryExpression	1		3523722	0					
ANR	3524015	ExpressionStatement	"sprintf ( buf , ""MASTER_%s_BACKOFF_FACTOR"" , name_in_config_file )"	431:1:11042:11104	3523722	20	True				
ANR	3524016	CallExpression	"sprintf ( buf , ""MASTER_%s_BACKOFF_FACTOR"" , name_in_config_file )"		3523722	0					
ANR	3524017	Callee	sprintf		3523722	0					
ANR	3524018	Identifier	sprintf		3523722	0					
ANR	3524019	ArgumentList	buf		3523722	1					
ANR	3524020	Argument	buf		3523722	0					
ANR	3524021	Identifier	buf		3523722	0					
ANR	3524022	Argument	"""MASTER_%s_BACKOFF_FACTOR"""		3523722	1					
ANR	3524023	PrimaryExpression	"""MASTER_%s_BACKOFF_FACTOR"""		3523722	0					
ANR	3524024	Argument	name_in_config_file		3523722	2					
ANR	3524025	Identifier	name_in_config_file		3523722	0					
ANR	3524026	ExpressionStatement	"m_backoff_factor = param_double ( buf , master_backoff_factor , 0 )"	432:1:11107:11171	3523722	21	True				
ANR	3524027	AssignmentExpression	"m_backoff_factor = param_double ( buf , master_backoff_factor , 0 )"		3523722	0		=			
ANR	3524028	Identifier	m_backoff_factor		3523722	0					
ANR	3524029	CallExpression	"param_double ( buf , master_backoff_factor , 0 )"		3523722	1					
ANR	3524030	Callee	param_double		3523722	0					
ANR	3524031	Identifier	param_double		3523722	0					
ANR	3524032	ArgumentList	buf		3523722	1					
ANR	3524033	Argument	buf		3523722	0					
ANR	3524034	Identifier	buf		3523722	0					
ANR	3524035	Argument	master_backoff_factor		3523722	1					
ANR	3524036	Identifier	master_backoff_factor		3523722	0					
ANR	3524037	Argument	0		3523722	2					
ANR	3524038	PrimaryExpression	0		3523722	0					
ANR	3524039	IfStatement	if ( m_backoff_factor <= 0.0 )		3523722	22					
ANR	3524040	Condition	m_backoff_factor <= 0.0	433:5:11178:11200	3523722	0	True				
ANR	3524041	RelationalExpression	m_backoff_factor <= 0.0		3523722	0		<=			
ANR	3524042	Identifier	m_backoff_factor		3523722	0					
ANR	3524043	PrimaryExpression	0.0		3523722	1					
ANR	3524044	CompoundStatement		78:31:2211:2211	3523722	1					
ANR	3524045	ExpressionStatement	m_backoff_factor = master_backoff_factor	434:5:11211:11251	3523722	0	True				
ANR	3524046	AssignmentExpression	m_backoff_factor = master_backoff_factor		3523722	0		=			
ANR	3524047	Identifier	m_backoff_factor		3523722	0					
ANR	3524048	Identifier	master_backoff_factor		3523722	1					
ANR	3524049	ExpressionStatement	"sprintf ( buf , ""MASTER_%s_RECOVER_FACTOR"" , name_in_config_file )"	437:1:11262:11324	3523722	23	True				
ANR	3524050	CallExpression	"sprintf ( buf , ""MASTER_%s_RECOVER_FACTOR"" , name_in_config_file )"		3523722	0					
ANR	3524051	Callee	sprintf		3523722	0					
ANR	3524052	Identifier	sprintf		3523722	0					
ANR	3524053	ArgumentList	buf		3523722	1					
ANR	3524054	Argument	buf		3523722	0					
ANR	3524055	Identifier	buf		3523722	0					
ANR	3524056	Argument	"""MASTER_%s_RECOVER_FACTOR"""		3523722	1					
ANR	3524057	PrimaryExpression	"""MASTER_%s_RECOVER_FACTOR"""		3523722	0					
ANR	3524058	Argument	name_in_config_file		3523722	2					
ANR	3524059	Identifier	name_in_config_file		3523722	0					
ANR	3524060	ExpressionStatement	"m_recover_time = param_integer ( buf , master_recover_time , 1 )"	438:1:11327:11388	3523722	24	True				
ANR	3524061	AssignmentExpression	"m_recover_time = param_integer ( buf , master_recover_time , 1 )"		3523722	0		=			
ANR	3524062	Identifier	m_recover_time		3523722	0					
ANR	3524063	CallExpression	"param_integer ( buf , master_recover_time , 1 )"		3523722	1					
ANR	3524064	Callee	param_integer		3523722	0					
ANR	3524065	Identifier	param_integer		3523722	0					
ANR	3524066	ArgumentList	buf		3523722	1					
ANR	3524067	Argument	buf		3523722	0					
ANR	3524068	Identifier	buf		3523722	0					
ANR	3524069	Argument	master_recover_time		3523722	1					
ANR	3524070	Identifier	master_recover_time		3523722	0					
ANR	3524071	Argument	1		3523722	2					
ANR	3524072	PrimaryExpression	1		3523722	0					
ANR	3524073	IfStatement	if ( ( NULL == flag_in_config_file ) && ( NULL != daemon_name ) )		3523722	25					
ANR	3524074	Condition	( NULL == flag_in_config_file ) && ( NULL != daemon_name )	449:5:11907:11964	3523722	0	True				
ANR	3524075	AndExpression	( NULL == flag_in_config_file ) && ( NULL != daemon_name )		3523722	0		&&			
ANR	3524076	EqualityExpression	NULL == flag_in_config_file		3523722	0		==			
ANR	3524077	Identifier	NULL		3523722	0					
ANR	3524078	Identifier	flag_in_config_file		3523722	1					
ANR	3524079	EqualityExpression	NULL != daemon_name		3523722	1		!=			
ANR	3524080	Identifier	NULL		3523722	0					
ANR	3524081	Identifier	daemon_name		3523722	1					
ANR	3524082	CompoundStatement		94:66:2975:2975	3523722	1					
ANR	3524083	ExpressionStatement	* ( daemon_name - 2 ) = '\\0'	450:2:11972:11997	3523722	0	True				
ANR	3524084	AssignmentExpression	* ( daemon_name - 2 ) = '\\0'		3523722	0		=			
ANR	3524085	UnaryOperationExpression	* ( daemon_name - 2 )		3523722	0					
ANR	3524086	UnaryOperator	*		3523722	0					
ANR	3524087	AdditiveExpression	daemon_name - 2		3523722	1		-			
ANR	3524088	Identifier	daemon_name		3523722	0					
ANR	3524089	PrimaryExpression	2		3523722	1					
ANR	3524090	PrimaryExpression	'\\0'		3523722	1					
ANR	3524091	ExpressionStatement	"sprintf ( buf , ""%s_FLAG"" , name_in_config_file )"	451:2:12001:12045	3523722	1	True				
ANR	3524092	CallExpression	"sprintf ( buf , ""%s_FLAG"" , name_in_config_file )"		3523722	0					
ANR	3524093	Callee	sprintf		3523722	0					
ANR	3524094	Identifier	sprintf		3523722	0					
ANR	3524095	ArgumentList	buf		3523722	1					
ANR	3524096	Argument	buf		3523722	0					
ANR	3524097	Identifier	buf		3523722	0					
ANR	3524098	Argument	"""%s_FLAG"""		3523722	1					
ANR	3524099	PrimaryExpression	"""%s_FLAG"""		3523722	0					
ANR	3524100	Argument	name_in_config_file		3523722	2					
ANR	3524101	Identifier	name_in_config_file		3523722	0					
ANR	3524102	ExpressionStatement	flag_in_config_file = param ( buf )	452:2:12049:12081	3523722	2	True				
ANR	3524103	AssignmentExpression	flag_in_config_file = param ( buf )		3523722	0		=			
ANR	3524104	Identifier	flag_in_config_file		3523722	0					
ANR	3524105	CallExpression	param ( buf )		3523722	1					
ANR	3524106	Callee	param		3523722	0					
ANR	3524107	Identifier	param		3523722	0					
ANR	3524108	ArgumentList	buf		3523722	1					
ANR	3524109	Argument	buf		3523722	0					
ANR	3524110	Identifier	buf		3523722	0					
ANR	3524111	ExpressionStatement	* ( daemon_name - 2 ) = '_'	453:2:12085:12109	3523722	3	True				
ANR	3524112	AssignmentExpression	* ( daemon_name - 2 ) = '_'		3523722	0		=			
ANR	3524113	UnaryOperationExpression	* ( daemon_name - 2 )		3523722	0					
ANR	3524114	UnaryOperator	*		3523722	0					
ANR	3524115	AdditiveExpression	daemon_name - 2		3523722	1		-			
ANR	3524116	Identifier	daemon_name		3523722	0					
ANR	3524117	PrimaryExpression	2		3523722	1					
ANR	3524118	PrimaryExpression	'_'		3523722	1					
ANR	3524119	IfStatement	"if ( strcmp ( name_in_config_file , ""SHARED_PORT"" ) == 0 )"		3523722	26					
ANR	3524120	Condition	"strcmp ( name_in_config_file , ""SHARED_PORT"" ) == 0"	456:5:12121:12166	3523722	0	True				
ANR	3524121	EqualityExpression	"strcmp ( name_in_config_file , ""SHARED_PORT"" ) == 0"		3523722	0		==			
ANR	3524122	CallExpression	"strcmp ( name_in_config_file , ""SHARED_PORT"" )"		3523722	0					
ANR	3524123	Callee	strcmp		3523722	0					
ANR	3524124	Identifier	strcmp		3523722	0					
ANR	3524125	ArgumentList	name_in_config_file		3523722	1					
ANR	3524126	Argument	name_in_config_file		3523722	0					
ANR	3524127	Identifier	name_in_config_file		3523722	0					
ANR	3524128	Argument	"""SHARED_PORT"""		3523722	1					
ANR	3524129	PrimaryExpression	"""SHARED_PORT"""		3523722	0					
ANR	3524130	PrimaryExpression	0		3523722	1					
ANR	3524131	CompoundStatement		101:54:3177:3177	3523722	1					
ANR	3524132	ExpressionStatement	m_never_use_shared_port = true	460:2:12310:12340	3523722	0	True				
ANR	3524133	AssignmentExpression	m_never_use_shared_port = true		3523722	0		=			
ANR	3524134	Identifier	m_never_use_shared_port		3523722	0					
ANR	3524135	Identifier	true		3523722	1					
ANR	3524136	ExpressionStatement	"ASSERT ( param ( m_after_startup_wait_for_file , ""SHARED_PORT_DAEMON_AD_FILE"" ) )"	468:2:12596:12671	3523722	1	True				
ANR	3524137	CallExpression	"ASSERT ( param ( m_after_startup_wait_for_file , ""SHARED_PORT_DAEMON_AD_FILE"" ) )"		3523722	0					
ANR	3524138	Callee	ASSERT		3523722	0					
ANR	3524139	Identifier	ASSERT		3523722	0					
ANR	3524140	ArgumentList	"param ( m_after_startup_wait_for_file , ""SHARED_PORT_DAEMON_AD_FILE"" )"		3523722	1					
ANR	3524141	Argument	"param ( m_after_startup_wait_for_file , ""SHARED_PORT_DAEMON_AD_FILE"" )"		3523722	0					
ANR	3524142	CallExpression	"param ( m_after_startup_wait_for_file , ""SHARED_PORT_DAEMON_AD_FILE"" )"		3523722	0					
ANR	3524143	Callee	param		3523722	0					
ANR	3524144	Identifier	param		3523722	0					
ANR	3524145	ArgumentList	m_after_startup_wait_for_file		3523722	1					
ANR	3524146	Argument	m_after_startup_wait_for_file		3523722	0					
ANR	3524147	Identifier	m_after_startup_wait_for_file		3523722	0					
ANR	3524148	Argument	"""SHARED_PORT_DAEMON_AD_FILE"""		3523722	1					
ANR	3524149	PrimaryExpression	"""SHARED_PORT_DAEMON_AD_FILE"""		3523722	0					
ANR	3524150	ExpressionStatement	m_reload_shared_port_addr_after_startup = true	469:2:12675:12721	3523722	2	True				
ANR	3524151	AssignmentExpression	m_reload_shared_port_addr_after_startup = true		3523722	0		=			
ANR	3524152	Identifier	m_reload_shared_port_addr_after_startup		3523722	0					
ANR	3524153	Identifier	true		3523722	1					
ANR	3524154	IfStatement	if ( SharedPortEndpoint :: UseSharedPort ( ) )		3523722	3					
ANR	3524155	Condition	SharedPortEndpoint :: UseSharedPort ( )	471:6:12730:12764	3523722	0	True				
ANR	3524156	CallExpression	SharedPortEndpoint :: UseSharedPort ( )		3523722	0					
ANR	3524157	Callee	SharedPortEndpoint :: UseSharedPort		3523722	0					
ANR	3524158	Identifier	SharedPortEndpoint :: UseSharedPort		3523722	0					
ANR	3524159	ArgumentList			3523722	1					
ANR	3524160	CompoundStatement		116:44:3775:3775	3523722	1					
ANR	3524161	ExpressionStatement	m_only_stop_when_master_stops = true	479:3:13134:13170	3523722	0	True				
ANR	3524162	AssignmentExpression	m_only_stop_when_master_stops = true		3523722	0		=			
ANR	3524163	Identifier	m_only_stop_when_master_stops		3523722	0					
ANR	3524164	Identifier	true		3523722	1					
ANR	3524165	IfStatement	"if ( strcmp ( name_in_config_file , ""COLLECTOR"" ) == 0 )"		3523722	27					
ANR	3524166	Condition	"strcmp ( name_in_config_file , ""COLLECTOR"" ) == 0"	483:5:13185:13228	3523722	0	True				
ANR	3524167	EqualityExpression	"strcmp ( name_in_config_file , ""COLLECTOR"" ) == 0"		3523722	0		==			
ANR	3524168	CallExpression	"strcmp ( name_in_config_file , ""COLLECTOR"" )"		3523722	0					
ANR	3524169	Callee	strcmp		3523722	0					
ANR	3524170	Identifier	strcmp		3523722	0					
ANR	3524171	ArgumentList	name_in_config_file		3523722	1					
ANR	3524172	Argument	name_in_config_file		3523722	0					
ANR	3524173	Identifier	name_in_config_file		3523722	0					
ANR	3524174	Argument	"""COLLECTOR"""		3523722	1					
ANR	3524175	PrimaryExpression	"""COLLECTOR"""		3523722	0					
ANR	3524176	PrimaryExpression	0		3523722	1					
ANR	3524177	CompoundStatement		128:52:4239:4239	3523722	1					
ANR	3524178	ExpressionStatement	"param ( m_after_startup_wait_for_file , ""COLLECTOR_ADDRESS_FILE"" )"	486:2:13363:13424	3523722	0	True				
ANR	3524179	CallExpression	"param ( m_after_startup_wait_for_file , ""COLLECTOR_ADDRESS_FILE"" )"		3523722	0					
ANR	3524180	Callee	param		3523722	0					
ANR	3524181	Identifier	param		3523722	0					
ANR	3524182	ArgumentList	m_after_startup_wait_for_file		3523722	1					
ANR	3524183	Argument	m_after_startup_wait_for_file		3523722	0					
ANR	3524184	Identifier	m_after_startup_wait_for_file		3523722	0					
ANR	3524185	Argument	"""COLLECTOR_ADDRESS_FILE"""		3523722	1					
ANR	3524186	PrimaryExpression	"""COLLECTOR_ADDRESS_FILE"""		3523722	0					
ANR	3524187	ReturnType	void		3523722	1					
ANR	3524188	Identifier	daemon :: DoConfig		3523722	2					
ANR	3524189	ParameterList	bool init		3523722	3					
ANR	3524190	Parameter	bool init	355:18:8980:8988	3523722	0	True				
ANR	3524191	ParameterType	bool		3523722	0					
ANR	3524192	Identifier	init		3523722	1					
ANR	3524193	CFGEntryNode	ENTRY		3523722		True				
ANR	3524194	CFGExitNode	EXIT		3523722		True				
ANR	3524195	Symbol	* daemon_name		3523722						
ANR	3524196	Symbol	* ( daemon_name - 2 )		3523722						
ANR	3524197	Symbol	param_double		3523722						
ANR	3524198	Symbol	m_recover_time		3523722						
ANR	3524199	Symbol	name_in_config_file		3523722						
ANR	3524200	Symbol	m_after_startup_wait_for_file		3523722						
ANR	3524201	Symbol	m_backoff_ceiling		3523722						
ANR	3524202	Symbol	env_string		3523722						
ANR	3524203	Symbol	is_ha		3523722						
ANR	3524204	Symbol	param		3523722						
ANR	3524205	Symbol	tmp		3523722						
ANR	3524206	Symbol	& env_error_msg		3523722						
ANR	3524207	Symbol	master_backoff_constant		3523722						
ANR	3524208	Symbol	strcmp		3523722						
ANR	3524209	Symbol	SetupHighAvailability		3523722						
ANR	3524210	Symbol	env_parser . MergeFromV1RawOrV2Quoted		3523722						
ANR	3524211	Symbol	init		3523722						
ANR	3524212	Symbol	controller		3523722						
ANR	3524213	Symbol	NULL		3523722						
ANR	3524214	Symbol	env_error_msg		3523722						
ANR	3524215	Symbol	daemon_name		3523722						
ANR	3524216	Symbol	controller_name		3523722						
ANR	3524217	Symbol	this		3523722						
ANR	3524218	Symbol	master_backoff_factor		3523722						
ANR	3524219	Symbol	D_FULLDEBUG		3523722						
ANR	3524220	Symbol	env_error_msg . Value		3523722						
ANR	3524221	Symbol	on_hold		3523722						
ANR	3524222	Symbol	m_reload_shared_port_addr_after_startup		3523722						
ANR	3524223	Symbol	m_backoff_factor		3523722						
ANR	3524224	Symbol	flag_in_config_file		3523722						
ANR	3524225	Symbol	* this		3523722						
ANR	3524226	Symbol	buf		3523722						
ANR	3524227	Symbol	m_backoff_constant		3523722						
ANR	3524228	Symbol	master_recover_time		3523722						
ANR	3524229	Symbol	env_parser		3523722						
ANR	3524230	Symbol	true		3523722						
ANR	3524231	Symbol	SharedPortEndpoint :: UseSharedPort		3523722						
ANR	3524232	Symbol	this -> env		3523722						
ANR	3524233	Symbol	param_integer		3523722						
ANR	3524234	Symbol	master_backoff_ceiling		3523722						
ANR	3524235	Symbol	m_never_use_shared_port		3523722						
ANR	3524236	Symbol	m_only_stop_when_master_stops		3523722						
ANR	3524237	Function	daemon :: Hold	490:0:13432:13719							
ANR	3524238	FunctionDef	"daemon :: Hold (bool hold , bool never_forward)"		3524237	0					
ANR	3524239	CompoundStatement		492:0:13483:13719	3524237	0					
ANR	3524240	IfStatement	if ( controller && ! never_forward )		3524237	0					
ANR	3524241	Condition	controller && ! never_forward	493:6:13491:13518	3524237	0	True				
ANR	3524242	AndExpression	controller && ! never_forward		3524237	0		&&			
ANR	3524243	Identifier	controller		3524237	0					
ANR	3524244	UnaryOperationExpression	! never_forward		3524237	1					
ANR	3524245	UnaryOperator	!		3524237	0					
ANR	3524246	Identifier	never_forward		3524237	1					
ANR	3524247	CompoundStatement		2:37:38:38	3524237	1					
ANR	3524248	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Forwarding Hold to %s's controller (%s)\\n"" , name_in_config_file , controller -> name_in_config_file )"	494:2:13526:13652	3524237	0	True				
ANR	3524249	CallExpression	"dprintf ( D_FULLDEBUG , ""Forwarding Hold to %s's controller (%s)\\n"" , name_in_config_file , controller -> name_in_config_file )"		3524237	0					
ANR	3524250	Callee	dprintf		3524237	0					
ANR	3524251	Identifier	dprintf		3524237	0					
ANR	3524252	ArgumentList	D_FULLDEBUG		3524237	1					
ANR	3524253	Argument	D_FULLDEBUG		3524237	0					
ANR	3524254	Identifier	D_FULLDEBUG		3524237	0					
ANR	3524255	Argument	"""Forwarding Hold to %s's controller (%s)\\n"""		3524237	1					
ANR	3524256	PrimaryExpression	"""Forwarding Hold to %s's controller (%s)\\n"""		3524237	0					
ANR	3524257	Argument	name_in_config_file		3524237	2					
ANR	3524258	Identifier	name_in_config_file		3524237	0					
ANR	3524259	Argument	controller -> name_in_config_file		3524237	3					
ANR	3524260	PtrMemberAccess	controller -> name_in_config_file		3524237	0					
ANR	3524261	Identifier	controller		3524237	0					
ANR	3524262	Identifier	name_in_config_file		3524237	1					
ANR	3524263	ExpressionStatement	controller -> Hold ( hold )	496:2:13656:13680	3524237	1	True				
ANR	3524264	CallExpression	controller -> Hold ( hold )		3524237	0					
ANR	3524265	Callee	controller -> Hold		3524237	0					
ANR	3524266	PtrMemberAccess	controller -> Hold		3524237	0					
ANR	3524267	Identifier	controller		3524237	0					
ANR	3524268	Identifier	Hold		3524237	1					
ANR	3524269	ArgumentList	hold		3524237	1					
ANR	3524270	Argument	hold		3524237	0					
ANR	3524271	Identifier	hold		3524237	0					
ANR	3524272	ElseStatement	else		3524237	0					
ANR	3524273	CompoundStatement		6:8:206:206	3524237	0					
ANR	3524274	ExpressionStatement	this -> on_hold = hold	498:2:13694:13714	3524237	0	True				
ANR	3524275	AssignmentExpression	this -> on_hold = hold		3524237	0		=			
ANR	3524276	PtrMemberAccess	this -> on_hold		3524237	0					
ANR	3524277	Identifier	this		3524237	0					
ANR	3524278	Identifier	on_hold		3524237	1					
ANR	3524279	Identifier	hold		3524237	1					
ANR	3524280	ReturnType	void		3524237	1					
ANR	3524281	Identifier	daemon :: Hold		3524237	2					
ANR	3524282	ParameterList	"bool hold , bool never_forward"		3524237	3					
ANR	3524283	Parameter	bool hold	491:14:13451:13459	3524237	0	True				
ANR	3524284	ParameterType	bool		3524237	0					
ANR	3524285	Identifier	hold		3524237	1					
ANR	3524286	Parameter	bool never_forward	491:25:13462:13479	3524237	1	True				
ANR	3524287	ParameterType	bool		3524237	0					
ANR	3524288	Identifier	never_forward		3524237	1					
ANR	3524289	CFGEntryNode	ENTRY		3524237		True				
ANR	3524290	CFGExitNode	EXIT		3524237		True				
ANR	3524291	Symbol	* this		3524237						
ANR	3524292	Symbol	never_forward		3524237						
ANR	3524293	Symbol	controller		3524237						
ANR	3524294	Symbol	controller -> name_in_config_file		3524237						
ANR	3524295	Symbol	this		3524237						
ANR	3524296	Symbol	D_FULLDEBUG		3524237						
ANR	3524297	Symbol	* controller		3524237						
ANR	3524298	Symbol	name_in_config_file		3524237						
ANR	3524299	Symbol	hold		3524237						
ANR	3524300	Symbol	this -> on_hold		3524237						
ANR	3524301	Function	daemon :: Start	502:0:13722:14776							
ANR	3524302	FunctionDef	daemon :: Start (bool never_forward)		3524301	0					
ANR	3524303	CompoundStatement		504:0:13762:14776	3524301	0					
ANR	3524304	IfStatement	if ( controller )		3524301	0					
ANR	3524305	Condition	controller	505:6:13770:13779	3524301	0	True				
ANR	3524306	Identifier	controller		3524301	0					
ANR	3524307	CompoundStatement		2:19:20:20	3524301	1					
ANR	3524308	IfStatement	if ( ! never_forward )		3524301	0					
ANR	3524309	Condition	! never_forward	506:7:13792:13805	3524301	0	True				
ANR	3524310	UnaryOperationExpression	! never_forward		3524301	0					
ANR	3524311	UnaryOperator	!		3524301	0					
ANR	3524312	Identifier	never_forward		3524301	1					
ANR	3524313	CompoundStatement		3:24:46:46	3524301	1					
ANR	3524314	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Forwarding Start to %s's controller (%s)\\n"" , name_in_config_file , controller -> name_in_config_file )"	507:3:13814:13948	3524301	0	True				
ANR	3524315	CallExpression	"dprintf ( D_FULLDEBUG , ""Forwarding Start to %s's controller (%s)\\n"" , name_in_config_file , controller -> name_in_config_file )"		3524301	0					
ANR	3524316	Callee	dprintf		3524301	0					
ANR	3524317	Identifier	dprintf		3524301	0					
ANR	3524318	ArgumentList	D_FULLDEBUG		3524301	1					
ANR	3524319	Argument	D_FULLDEBUG		3524301	0					
ANR	3524320	Identifier	D_FULLDEBUG		3524301	0					
ANR	3524321	Argument	"""Forwarding Start to %s's controller (%s)\\n"""		3524301	1					
ANR	3524322	PrimaryExpression	"""Forwarding Start to %s's controller (%s)\\n"""		3524301	0					
ANR	3524323	Argument	name_in_config_file		3524301	2					
ANR	3524324	Identifier	name_in_config_file		3524301	0					
ANR	3524325	Argument	controller -> name_in_config_file		3524301	3					
ANR	3524326	PtrMemberAccess	controller -> name_in_config_file		3524301	0					
ANR	3524327	Identifier	controller		3524301	0					
ANR	3524328	Identifier	name_in_config_file		3524301	1					
ANR	3524329	ReturnStatement	return controller -> Start ( ) ;	510:3:13953:13980	3524301	1	True				
ANR	3524330	CallExpression	controller -> Start ( )		3524301	0					
ANR	3524331	Callee	controller -> Start		3524301	0					
ANR	3524332	PtrMemberAccess	controller -> Start		3524301	0					
ANR	3524333	Identifier	controller		3524301	0					
ANR	3524334	Identifier	Start		3524301	1					
ANR	3524335	ArgumentList			3524301	1					
ANR	3524336	ElseStatement	else		3524301	0					
ANR	3524337	CompoundStatement		8:9:228:228	3524301	0					
ANR	3524338	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Handling Start for %s myself\\n"" , name_in_config_file )"	512:3:13996:14085	3524301	0	True				
ANR	3524339	CallExpression	"dprintf ( D_FULLDEBUG , ""Handling Start for %s myself\\n"" , name_in_config_file )"		3524301	0					
ANR	3524340	Callee	dprintf		3524301	0					
ANR	3524341	Identifier	dprintf		3524301	0					
ANR	3524342	ArgumentList	D_FULLDEBUG		3524301	1					
ANR	3524343	Argument	D_FULLDEBUG		3524301	0					
ANR	3524344	Identifier	D_FULLDEBUG		3524301	0					
ANR	3524345	Argument	"""Handling Start for %s myself\\n"""		3524301	1					
ANR	3524346	PrimaryExpression	"""Handling Start for %s myself\\n"""		3524301	0					
ANR	3524347	Argument	name_in_config_file		3524301	2					
ANR	3524348	Identifier	name_in_config_file		3524301	0					
ANR	3524349	IfStatement	if ( start_tid != - 1 )		3524301	1					
ANR	3524350	Condition	start_tid != - 1	517:5:14099:14113	3524301	0	True				
ANR	3524351	EqualityExpression	start_tid != - 1		3524301	0		!=			
ANR	3524352	Identifier	start_tid		3524301	0					
ANR	3524353	UnaryOperationExpression	- 1		3524301	1					
ANR	3524354	UnaryOperator	-		3524301	0					
ANR	3524355	PrimaryExpression	1		3524301	1					
ANR	3524356	CompoundStatement		14:23:354:354	3524301	1					
ANR	3524357	ExpressionStatement	daemonCore -> Cancel_Timer ( start_tid )	518:2:14121:14158	3524301	0	True				
ANR	3524358	CallExpression	daemonCore -> Cancel_Timer ( start_tid )		3524301	0					
ANR	3524359	Callee	daemonCore -> Cancel_Timer		3524301	0					
ANR	3524360	PtrMemberAccess	daemonCore -> Cancel_Timer		3524301	0					
ANR	3524361	Identifier	daemonCore		3524301	0					
ANR	3524362	Identifier	Cancel_Timer		3524301	1					
ANR	3524363	ArgumentList	start_tid		3524301	1					
ANR	3524364	Argument	start_tid		3524301	0					
ANR	3524365	Identifier	start_tid		3524301	0					
ANR	3524366	ExpressionStatement	start_tid = - 1	519:2:14162:14176	3524301	1	True				
ANR	3524367	AssignmentExpression	start_tid = - 1		3524301	0		=			
ANR	3524368	Identifier	start_tid		3524301	0					
ANR	3524369	UnaryOperationExpression	- 1		3524301	1					
ANR	3524370	UnaryOperator	-		3524301	0					
ANR	3524371	PrimaryExpression	1		3524301	1					
ANR	3524372	IfStatement	if ( on_hold )		3524301	2					
ANR	3524373	Condition	on_hold	521:5:14186:14192	3524301	0	True				
ANR	3524374	Identifier	on_hold		3524301	0					
ANR	3524375	CompoundStatement		18:15:433:433	3524301	1					
ANR	3524376	ReturnStatement	return FALSE ;	522:2:14200:14212	3524301	0	True				
ANR	3524377	Identifier	FALSE		3524301	0					
ANR	3524378	IfStatement	if ( pid )		3524301	3					
ANR	3524379	Condition	pid	524:5:14222:14224	3524301	0	True				
ANR	3524380	Identifier	pid		3524301	0					
ANR	3524381	CompoundStatement		21:11:465:465	3524301	1					
ANR	3524382	ReturnStatement	return TRUE ;	526:2:14254:14265	3524301	0	True				
ANR	3524383	Identifier	TRUE		3524301	0					
ANR	3524384	IfStatement	if ( is_ha && ha_lock )		3524301	4					
ANR	3524385	Condition	is_ha && ha_lock	530:6:14334:14349	3524301	0	True				
ANR	3524386	AndExpression	is_ha && ha_lock		3524301	0		&&			
ANR	3524387	Identifier	is_ha		3524301	0					
ANR	3524388	Identifier	ha_lock		3524301	1					
ANR	3524389	CompoundStatement		28:2:594:637	3524301	1					
ANR	3524390	IdentifierDeclStatement	int lockstat = ha_lock -> AcquireLock ( true ) ;	531:2:14357:14400	3524301	0	True				
ANR	3524391	IdentifierDecl	lockstat = ha_lock -> AcquireLock ( true )		3524301	0					
ANR	3524392	IdentifierDeclType	int		3524301	0					
ANR	3524393	Identifier	lockstat		3524301	1					
ANR	3524394	AssignmentExpression	lockstat = ha_lock -> AcquireLock ( true )		3524301	2		=			
ANR	3524395	Identifier	lockstat		3524301	0					
ANR	3524396	CallExpression	ha_lock -> AcquireLock ( true )		3524301	1					
ANR	3524397	Callee	ha_lock -> AcquireLock		3524301	0					
ANR	3524398	PtrMemberAccess	ha_lock -> AcquireLock		3524301	0					
ANR	3524399	Identifier	ha_lock		3524301	0					
ANR	3524400	Identifier	AcquireLock		3524301	1					
ANR	3524401	ArgumentList	true		3524301	1					
ANR	3524402	Argument	true		3524301	0					
ANR	3524403	Identifier	true		3524301	0					
ANR	3524404	IfStatement	if ( lockstat < 0 )		3524301	1					
ANR	3524405	Condition	lockstat < 0	532:7:14409:14420	3524301	0	True				
ANR	3524406	RelationalExpression	lockstat < 0		3524301	0		<			
ANR	3524407	Identifier	lockstat		3524301	0					
ANR	3524408	PrimaryExpression	0		3524301	1					
ANR	3524409	CompoundStatement		29:22:661:661	3524301	1					
ANR	3524410	ExpressionStatement	"dprintf ( D_ALWAYS , ""%s: HA lock error\\n"" , name_in_config_file )"	533:3:14429:14491	3524301	0	True				
ANR	3524411	CallExpression	"dprintf ( D_ALWAYS , ""%s: HA lock error\\n"" , name_in_config_file )"		3524301	0					
ANR	3524412	Callee	dprintf		3524301	0					
ANR	3524413	Identifier	dprintf		3524301	0					
ANR	3524414	ArgumentList	D_ALWAYS		3524301	1					
ANR	3524415	Argument	D_ALWAYS		3524301	0					
ANR	3524416	Identifier	D_ALWAYS		3524301	0					
ANR	3524417	Argument	"""%s: HA lock error\\n"""		3524301	1					
ANR	3524418	PrimaryExpression	"""%s: HA lock error\\n"""		3524301	0					
ANR	3524419	Argument	name_in_config_file		3524301	2					
ANR	3524420	Identifier	name_in_config_file		3524301	0					
ANR	3524421	ElseStatement	else		3524301	0					
ANR	3524422	IfStatement	if ( lockstat > 0 )		3524301	0					
ANR	3524423	Condition	lockstat > 0	534:14:14507:14518	3524301	0	True				
ANR	3524424	RelationalExpression	lockstat > 0		3524301	0		>			
ANR	3524425	Identifier	lockstat		3524301	0					
ANR	3524426	PrimaryExpression	0		3524301	1					
ANR	3524427	CompoundStatement		31:29:759:759	3524301	1					
ANR	3524428	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""%s: HA lock busy\\n"" , name_in_config_file )"	535:3:14527:14591	3524301	0	True				
ANR	3524429	CallExpression	"dprintf ( D_FULLDEBUG , ""%s: HA lock busy\\n"" , name_in_config_file )"		3524301	0					
ANR	3524430	Callee	dprintf		3524301	0					
ANR	3524431	Identifier	dprintf		3524301	0					
ANR	3524432	ArgumentList	D_FULLDEBUG		3524301	1					
ANR	3524433	Argument	D_FULLDEBUG		3524301	0					
ANR	3524434	Identifier	D_FULLDEBUG		3524301	0					
ANR	3524435	Argument	"""%s: HA lock busy\\n"""		3524301	1					
ANR	3524436	PrimaryExpression	"""%s: HA lock busy\\n"""		3524301	0					
ANR	3524437	Argument	name_in_config_file		3524301	2					
ANR	3524438	Identifier	name_in_config_file		3524301	0					
ANR	3524439	ReturnStatement	return 0 ;	540:2:14710:14718	3524301	2	True				
ANR	3524440	PrimaryExpression	0		3524301	0					
ANR	3524441	ReturnStatement	return RealStart ( ) ;	544:1:14755:14774	3524301	5	True				
ANR	3524442	CallExpression	RealStart ( )		3524301	0					
ANR	3524443	Callee	RealStart		3524301	0					
ANR	3524444	Identifier	RealStart		3524301	0					
ANR	3524445	ArgumentList			3524301	1					
ANR	3524446	ReturnType	int		3524301	1					
ANR	3524447	Identifier	daemon :: Start		3524301	2					
ANR	3524448	ParameterList	bool never_forward		3524301	3					
ANR	3524449	Parameter	bool never_forward	503:15:13741:13758	3524301	0	True				
ANR	3524450	ParameterType	bool		3524301	0					
ANR	3524451	Identifier	never_forward		3524301	1					
ANR	3524452	CFGEntryNode	ENTRY		3524301		True				
ANR	3524453	CFGExitNode	EXIT		3524301		True				
ANR	3524454	Symbol	* ha_lock		3524301						
ANR	3524455	Symbol	never_forward		3524301						
ANR	3524456	Symbol	controller		3524301						
ANR	3524457	Symbol	lockstat		3524301						
ANR	3524458	Symbol	controller -> name_in_config_file		3524301						
ANR	3524459	Symbol	start_tid		3524301						
ANR	3524460	Symbol	D_ALWAYS		3524301						
ANR	3524461	Symbol	TRUE		3524301						
ANR	3524462	Symbol	D_FULLDEBUG		3524301						
ANR	3524463	Symbol	pid		3524301						
ANR	3524464	Symbol	ha_lock		3524301						
ANR	3524465	Symbol	* controller		3524301						
ANR	3524466	Symbol	on_hold		3524301						
ANR	3524467	Symbol	name_in_config_file		3524301						
ANR	3524468	Symbol	is_ha		3524301						
ANR	3524469	Symbol	RealStart		3524301						
ANR	3524470	Symbol	daemonCore		3524301						
ANR	3524471	Symbol	true		3524301						
ANR	3524472	Symbol	FALSE		3524301						
ANR	3524473	Symbol	ha_lock -> AcquireLock		3524301						
ANR	3524474	Symbol	controller -> Start		3524301						
ANR	3524475	Function	daemon :: RealStart	549:0:14880:23236							
ANR	3524476	FunctionDef	daemon :: RealStart ()		3524475	0					
ANR	3524477	CompoundStatement		550:0:14905:23236	3524475	0					
ANR	3524478	IdentifierDeclStatement	const char * shortname ;	551:1:14908:14929	3524475	0	True				
ANR	3524479	IdentifierDecl	* shortname		3524475	0					
ANR	3524480	IdentifierDeclType	const char *		3524475	0					
ANR	3524481	Identifier	shortname		3524475	1					
ANR	3524482	IdentifierDeclStatement	int command_port = isDC ? TRUE : FALSE ;	552:1:14932:14971	3524475	1	True				
ANR	3524483	IdentifierDecl	command_port = isDC ? TRUE : FALSE		3524475	0					
ANR	3524484	IdentifierDeclType	int		3524475	0					
ANR	3524485	Identifier	command_port		3524475	1					
ANR	3524486	AssignmentExpression	command_port = isDC ? TRUE : FALSE		3524475	2		=			
ANR	3524487	Identifier	command_port		3524475	0					
ANR	3524488	ConditionalExpression	isDC ? TRUE : FALSE		3524475	1					
ANR	3524489	Condition	isDC		3524475	0					
ANR	3524490	Identifier	isDC		3524475	0					
ANR	3524491	Identifier	TRUE		3524475	1					
ANR	3524492	Identifier	FALSE		3524475	2					
ANR	3524493	IdentifierDeclStatement	char const * daemon_sock = NULL ;	553:1:14974:15004	3524475	2	True				
ANR	3524494	IdentifierDecl	* daemon_sock = NULL		3524475	0					
ANR	3524495	IdentifierDeclType	char const *		3524475	0					
ANR	3524496	Identifier	daemon_sock		3524475	1					
ANR	3524497	AssignmentExpression	* daemon_sock = NULL		3524475	2		=			
ANR	3524498	Identifier	NULL		3524475	0					
ANR	3524499	Identifier	NULL		3524475	1					
ANR	3524500	IdentifierDeclStatement	MyString daemon_sock_buf ;	554:1:15007:15031	3524475	3	True				
ANR	3524501	IdentifierDecl	daemon_sock_buf		3524475	0					
ANR	3524502	IdentifierDeclType	MyString		3524475	0					
ANR	3524503	Identifier	daemon_sock_buf		3524475	1					
ANR	3524504	IdentifierDeclStatement	char buf [ 512 ] ;	555:1:15034:15047	3524475	4	True				
ANR	3524505	IdentifierDecl	buf [ 512 ]		3524475	0					
ANR	3524506	IdentifierDeclType	char [ 512 ]		3524475	0					
ANR	3524507	Identifier	buf		3524475	1					
ANR	3524508	PrimaryExpression	512		3524475	2					
ANR	3524509	IdentifierDeclStatement	ArgList args ;	556:1:15050:15062	3524475	5	True				
ANR	3524510	IdentifierDecl	args		3524475	0					
ANR	3524511	IdentifierDeclType	ArgList		3524475	0					
ANR	3524512	Identifier	args		3524475	1					
ANR	3524513	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""::RealStart; %s on_hold=%d\\n"" , name_in_config_file , on_hold )"	559:1:15105:15189	3524475	6	True				
ANR	3524514	CallExpression	"dprintf ( D_FULLDEBUG , ""::RealStart; %s on_hold=%d\\n"" , name_in_config_file , on_hold )"		3524475	0					
ANR	3524515	Callee	dprintf		3524475	0					
ANR	3524516	Identifier	dprintf		3524475	0					
ANR	3524517	ArgumentList	D_FULLDEBUG		3524475	1					
ANR	3524518	Argument	D_FULLDEBUG		3524475	0					
ANR	3524519	Identifier	D_FULLDEBUG		3524475	0					
ANR	3524520	Argument	"""::RealStart; %s on_hold=%d\\n"""		3524475	1					
ANR	3524521	PrimaryExpression	"""::RealStart; %s on_hold=%d\\n"""		3524475	0					
ANR	3524522	Argument	name_in_config_file		3524475	2					
ANR	3524523	Identifier	name_in_config_file		3524475	0					
ANR	3524524	Argument	on_hold		3524475	3					
ANR	3524525	Identifier	on_hold		3524475	0					
ANR	3524526	IfStatement	if ( on_hold )		3524475	7					
ANR	3524527	Condition	on_hold	560:5:15196:15202	3524475	0	True				
ANR	3524528	Identifier	on_hold		3524475	0					
ANR	3524529	CompoundStatement		11:15:300:300	3524475	1					
ANR	3524530	ReturnStatement	return FALSE ;	561:2:15210:15222	3524475	0	True				
ANR	3524531	Identifier	FALSE		3524475	0					
ANR	3524532	IfStatement	if ( pid )		3524475	8					
ANR	3524533	Condition	pid	563:5:15232:15234	3524475	0	True				
ANR	3524534	Identifier	pid		3524475	0					
ANR	3524535	CompoundStatement		14:11:332:332	3524475	1					
ANR	3524536	ReturnStatement	return TRUE ;	565:2:15264:15275	3524475	0	True				
ANR	3524537	Identifier	TRUE		3524475	0					
ANR	3524538	IfStatement	if ( MasterShuttingDown )		3524475	9					
ANR	3524539	Condition	MasterShuttingDown	567:5:15285:15302	3524475	0	True				
ANR	3524540	Identifier	MasterShuttingDown		3524475	0					
ANR	3524541	CompoundStatement		18:26:400:400	3524475	1					
ANR	3524542	ExpressionStatement	"dprintf ( D_ALWAYS , ""Master is shutting down, so skipping startup of %s\\n"" , name_in_config_file )"	568:2:15310:15416	3524475	0	True				
ANR	3524543	CallExpression	"dprintf ( D_ALWAYS , ""Master is shutting down, so skipping startup of %s\\n"" , name_in_config_file )"		3524475	0					
ANR	3524544	Callee	dprintf		3524475	0					
ANR	3524545	Identifier	dprintf		3524475	0					
ANR	3524546	ArgumentList	D_ALWAYS		3524475	1					
ANR	3524547	Argument	D_ALWAYS		3524475	0					
ANR	3524548	Identifier	D_ALWAYS		3524475	0					
ANR	3524549	Argument	"""Master is shutting down, so skipping startup of %s\\n"""		3524475	1					
ANR	3524550	PrimaryExpression	"""Master is shutting down, so skipping startup of %s\\n"""		3524475	0					
ANR	3524551	Argument	name_in_config_file		3524475	2					
ANR	3524552	Identifier	name_in_config_file		3524475	0					
ANR	3524553	ReturnStatement	return FALSE ;	571:2:15420:15432	3524475	1	True				
ANR	3524554	Identifier	FALSE		3524475	0					
ANR	3524555	ExpressionStatement	shortname = condor_basename ( process_name )	574:1:15439:15482	3524475	10	True				
ANR	3524556	AssignmentExpression	shortname = condor_basename ( process_name )		3524475	0		=			
ANR	3524557	Identifier	shortname		3524475	0					
ANR	3524558	CallExpression	condor_basename ( process_name )		3524475	1					
ANR	3524559	Callee	condor_basename		3524475	0					
ANR	3524560	Identifier	condor_basename		3524475	0					
ANR	3524561	ArgumentList	process_name		3524475	1					
ANR	3524562	Argument	process_name		3524475	0					
ANR	3524563	Identifier	process_name		3524475	0					
ANR	3524564	IfStatement	"if ( access ( process_name , X_OK ) != 0 )"		3524475	11					
ANR	3524565	Condition	"access ( process_name , X_OK ) != 0"	576:5:15490:15519	3524475	0	True				
ANR	3524566	EqualityExpression	"access ( process_name , X_OK ) != 0"		3524475	0		!=			
ANR	3524567	CallExpression	"access ( process_name , X_OK )"		3524475	0					
ANR	3524568	Callee	access		3524475	0					
ANR	3524569	Identifier	access		3524475	0					
ANR	3524570	ArgumentList	process_name		3524475	1					
ANR	3524571	Argument	process_name		3524475	0					
ANR	3524572	Identifier	process_name		3524475	0					
ANR	3524573	Argument	X_OK		3524475	1					
ANR	3524574	Identifier	X_OK		3524475	0					
ANR	3524575	PrimaryExpression	0		3524475	1					
ANR	3524576	CompoundStatement		27:38:617:617	3524475	1					
ANR	3524577	ExpressionStatement	"dprintf ( D_ALWAYS , ""%s: Cannot execute (errno=%d, %s)\\n"" , process_name , errno , strerror ( errno ) )"	577:2:15527:15622	3524475	0	True				
ANR	3524578	CallExpression	"dprintf ( D_ALWAYS , ""%s: Cannot execute (errno=%d, %s)\\n"" , process_name , errno , strerror ( errno ) )"		3524475	0					
ANR	3524579	Callee	dprintf		3524475	0					
ANR	3524580	Identifier	dprintf		3524475	0					
ANR	3524581	ArgumentList	D_ALWAYS		3524475	1					
ANR	3524582	Argument	D_ALWAYS		3524475	0					
ANR	3524583	Identifier	D_ALWAYS		3524475	0					
ANR	3524584	Argument	"""%s: Cannot execute (errno=%d, %s)\\n"""		3524475	1					
ANR	3524585	PrimaryExpression	"""%s: Cannot execute (errno=%d, %s)\\n"""		3524475	0					
ANR	3524586	Argument	process_name		3524475	2					
ANR	3524587	Identifier	process_name		3524475	0					
ANR	3524588	Argument	errno		3524475	3					
ANR	3524589	Identifier	errno		3524475	0					
ANR	3524590	Argument	strerror ( errno )		3524475	4					
ANR	3524591	CallExpression	strerror ( errno )		3524475	0					
ANR	3524592	Callee	strerror		3524475	0					
ANR	3524593	Identifier	strerror		3524475	0					
ANR	3524594	ArgumentList	errno		3524475	1					
ANR	3524595	Argument	errno		3524475	0					
ANR	3524596	Identifier	errno		3524475	0					
ANR	3524597	ExpressionStatement	pid = 0	578:2:15626:15633	3524475	1	True				
ANR	3524598	AssignmentExpression	pid = 0		3524475	0		=			
ANR	3524599	Identifier	pid		3524475	0					
ANR	3524600	PrimaryExpression	0		3524475	1					
ANR	3524601	ExpressionStatement	Restart ( )	580:2:15689:15698	3524475	2	True				
ANR	3524602	CallExpression	Restart ( )		3524475	0					
ANR	3524603	Callee	Restart		3524475	0					
ANR	3524604	Identifier	Restart		3524475	0					
ANR	3524605	ArgumentList			3524475	1					
ANR	3524606	ReturnStatement	return 0 ;	581:2:15702:15710	3524475	3	True				
ANR	3524607	PrimaryExpression	0		3524475	0					
ANR	3524608	IfStatement	if ( ! m_after_startup_wait_for_file . IsEmpty ( ) )		3524475	12					
ANR	3524609	Condition	! m_after_startup_wait_for_file . IsEmpty ( )	584:5:15721:15760	3524475	0	True				
ANR	3524610	UnaryOperationExpression	! m_after_startup_wait_for_file . IsEmpty ( )		3524475	0					
ANR	3524611	UnaryOperator	!		3524475	0					
ANR	3524612	CallExpression	m_after_startup_wait_for_file . IsEmpty ( )		3524475	1					
ANR	3524613	Callee	m_after_startup_wait_for_file . IsEmpty		3524475	0					
ANR	3524614	MemberAccess	m_after_startup_wait_for_file . IsEmpty		3524475	0					
ANR	3524615	Identifier	m_after_startup_wait_for_file		3524475	0					
ANR	3524616	Identifier	IsEmpty		3524475	1					
ANR	3524617	ArgumentList			3524475	1					
ANR	3524618	CompoundStatement		35:48:858:858	3524475	1					
ANR	3524619	ExpressionStatement	remove ( m_after_startup_wait_for_file . Value ( ) )	585:2:15768:15815	3524475	0	True				
ANR	3524620	CallExpression	remove ( m_after_startup_wait_for_file . Value ( ) )		3524475	0					
ANR	3524621	Callee	remove		3524475	0					
ANR	3524622	Identifier	remove		3524475	0					
ANR	3524623	ArgumentList	m_after_startup_wait_for_file . Value ( )		3524475	1					
ANR	3524624	Argument	m_after_startup_wait_for_file . Value ( )		3524475	0					
ANR	3524625	CallExpression	m_after_startup_wait_for_file . Value ( )		3524475	0					
ANR	3524626	Callee	m_after_startup_wait_for_file . Value		3524475	0					
ANR	3524627	MemberAccess	m_after_startup_wait_for_file . Value		3524475	0					
ANR	3524628	Identifier	m_after_startup_wait_for_file		3524475	0					
ANR	3524629	Identifier	Value		3524475	1					
ANR	3524630	ArgumentList			3524475	1					
ANR	3524631	IdentifierDeclStatement	bool wants_condor_priv = false ;	591:1:16008:16038	3524475	13	True				
ANR	3524632	IdentifierDecl	wants_condor_priv = false		3524475	0					
ANR	3524633	IdentifierDeclType	bool		3524475	0					
ANR	3524634	Identifier	wants_condor_priv		3524475	1					
ANR	3524635	AssignmentExpression	wants_condor_priv = false		3524475	2		=			
ANR	3524636	Identifier	false		3524475	0					
ANR	3524637	Identifier	false		3524475	1					
ANR	3524638	IfStatement	"if ( strcmp ( name_in_config_file , ""COLLECTOR"" ) == 0 )"		3524475	14					
ANR	3524639	Condition	"strcmp ( name_in_config_file , ""COLLECTOR"" ) == 0"	593:6:16099:16142	3524475	0	True				
ANR	3524640	EqualityExpression	"strcmp ( name_in_config_file , ""COLLECTOR"" ) == 0"		3524475	0		==			
ANR	3524641	CallExpression	"strcmp ( name_in_config_file , ""COLLECTOR"" )"		3524475	0					
ANR	3524642	Callee	strcmp		3524475	0					
ANR	3524643	Identifier	strcmp		3524475	0					
ANR	3524644	ArgumentList	name_in_config_file		3524475	1					
ANR	3524645	Argument	name_in_config_file		3524475	0					
ANR	3524646	Identifier	name_in_config_file		3524475	0					
ANR	3524647	Argument	"""COLLECTOR"""		3524475	1					
ANR	3524648	PrimaryExpression	"""COLLECTOR"""		3524475	0					
ANR	3524649	PrimaryExpression	0		3524475	1					
ANR	3524650	CompoundStatement		55:2:1504:1536	3524475	1					
ANR	3524651	ExpressionStatement	command_port = - 1	598:2:16276:16293	3524475	0	True				
ANR	3524652	AssignmentExpression	command_port = - 1		3524475	0		=			
ANR	3524653	Identifier	command_port		3524475	0					
ANR	3524654	UnaryOperationExpression	- 1		3524475	1					
ANR	3524655	UnaryOperator	-		3524475	0					
ANR	3524656	PrimaryExpression	1		3524475	1					
ANR	3524657	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Looking for matching Collector on '%s' ...\\n"" , get_local_fqdn ( ) . Value ( ) )"	600:2:16298:16406	3524475	1	True				
ANR	3524658	CallExpression	"dprintf ( D_FULLDEBUG , ""Looking for matching Collector on '%s' ...\\n"" , get_local_fqdn ( ) . Value ( ) )"		3524475	0					
ANR	3524659	Callee	dprintf		3524475	0					
ANR	3524660	Identifier	dprintf		3524475	0					
ANR	3524661	ArgumentList	D_FULLDEBUG		3524475	1					
ANR	3524662	Argument	D_FULLDEBUG		3524475	0					
ANR	3524663	Identifier	D_FULLDEBUG		3524475	0					
ANR	3524664	Argument	"""Looking for matching Collector on '%s' ...\\n"""		3524475	1					
ANR	3524665	PrimaryExpression	"""Looking for matching Collector on '%s' ...\\n"""		3524475	0					
ANR	3524666	Argument	get_local_fqdn ( ) . Value ( )		3524475	2					
ANR	3524667	CallExpression	get_local_fqdn ( ) . Value ( )		3524475	0					
ANR	3524668	Callee	get_local_fqdn ( ) . Value		3524475	0					
ANR	3524669	MemberAccess	get_local_fqdn ( ) . Value		3524475	0					
ANR	3524670	CallExpression	get_local_fqdn ( )		3524475	0					
ANR	3524671	Callee	get_local_fqdn		3524475	0					
ANR	3524672	Identifier	get_local_fqdn		3524475	0					
ANR	3524673	ArgumentList			3524475	1					
ANR	3524674	Identifier	Value		3524475	1					
ANR	3524675	ArgumentList			3524475	1					
ANR	3524676	IdentifierDeclStatement	CollectorList * collectors = NULL ;	604:2:16410:16442	3524475	2	True				
ANR	3524677	IdentifierDecl	* collectors = NULL		3524475	0					
ANR	3524678	IdentifierDeclType	CollectorList *		3524475	0					
ANR	3524679	Identifier	collectors		3524475	1					
ANR	3524680	AssignmentExpression	* collectors = NULL		3524475	2		=			
ANR	3524681	Identifier	NULL		3524475	0					
ANR	3524682	Identifier	NULL		3524475	1					
ANR	3524683	IfStatement	if ( ( collectors = daemonCore -> getCollectorList ( ) ) )		3524475	3					
ANR	3524684	Condition	collectors = daemonCore -> getCollectorList ( )	605:6:16450:16494	3524475	0	True				
ANR	3524685	AssignmentExpression	collectors = daemonCore -> getCollectorList ( )		3524475	0		=			
ANR	3524686	Identifier	collectors		3524475	0					
ANR	3524687	CallExpression	daemonCore -> getCollectorList ( )		3524475	1					
ANR	3524688	Callee	daemonCore -> getCollectorList		3524475	0					
ANR	3524689	PtrMemberAccess	daemonCore -> getCollectorList		3524475	0					
ANR	3524690	Identifier	daemonCore		3524475	0					
ANR	3524691	Identifier	getCollectorList		3524475	1					
ANR	3524692	ArgumentList			3524475	1					
ANR	3524693	CompoundStatement		59:3:1691:1709	3524475	1					
ANR	3524694	IdentifierDeclStatement	MyString my_fqdn_str = get_local_fqdn ( ) ;	606:3:16502:16541	3524475	0	True				
ANR	3524695	IdentifierDecl	my_fqdn_str = get_local_fqdn ( )		3524475	0					
ANR	3524696	IdentifierDeclType	MyString		3524475	0					
ANR	3524697	Identifier	my_fqdn_str		3524475	1					
ANR	3524698	AssignmentExpression	my_fqdn_str = get_local_fqdn ( )		3524475	2		=			
ANR	3524699	Identifier	my_fqdn_str		3524475	0					
ANR	3524700	CallExpression	get_local_fqdn ( )		3524475	1					
ANR	3524701	Callee	get_local_fqdn		3524475	0					
ANR	3524702	Identifier	get_local_fqdn		3524475	0					
ANR	3524703	ArgumentList			3524475	1					
ANR	3524704	IdentifierDeclStatement	const char * my_hostname = my_fqdn_str . Value ( ) ;	607:3:16546:16592	3524475	1	True				
ANR	3524705	IdentifierDecl	* my_hostname = my_fqdn_str . Value ( )		3524475	0					
ANR	3524706	IdentifierDeclType	const char *		3524475	0					
ANR	3524707	Identifier	my_hostname		3524475	1					
ANR	3524708	AssignmentExpression	* my_hostname = my_fqdn_str . Value ( )		3524475	2		=			
ANR	3524709	Identifier	my_hostname		3524475	0					
ANR	3524710	CallExpression	my_fqdn_str . Value ( )		3524475	1					
ANR	3524711	Callee	my_fqdn_str . Value		3524475	0					
ANR	3524712	MemberAccess	my_fqdn_str . Value		3524475	0					
ANR	3524713	Identifier	my_fqdn_str		3524475	0					
ANR	3524714	Identifier	Value		3524475	1					
ANR	3524715	ArgumentList			3524475	1					
ANR	3524716	IdentifierDeclStatement	Daemon * my_daemon ;	608:3:16597:16615	3524475	2	True				
ANR	3524717	IdentifierDecl	* my_daemon		3524475	0					
ANR	3524718	IdentifierDeclType	Daemon *		3524475	0					
ANR	3524719	Identifier	my_daemon		3524475	1					
ANR	3524720	ExpressionStatement	collectors -> rewind ( )	609:3:16620:16640	3524475	3	True				
ANR	3524721	CallExpression	collectors -> rewind ( )		3524475	0					
ANR	3524722	Callee	collectors -> rewind		3524475	0					
ANR	3524723	PtrMemberAccess	collectors -> rewind		3524475	0					
ANR	3524724	Identifier	collectors		3524475	0					
ANR	3524725	Identifier	rewind		3524475	1					
ANR	3524726	ArgumentList			3524475	1					
ANR	3524727	WhileStatement	while ( collectors -> next ( my_daemon ) )		3524475	4					
ANR	3524728	Condition	collectors -> next ( my_daemon )	610:10:16652:16679	3524475	0	True				
ANR	3524729	CallExpression	collectors -> next ( my_daemon )		3524475	0					
ANR	3524730	Callee	collectors -> next		3524475	0					
ANR	3524731	PtrMemberAccess	collectors -> next		3524475	0					
ANR	3524732	Identifier	collectors		3524475	0					
ANR	3524733	Identifier	next		3524475	1					
ANR	3524734	ArgumentList	my_daemon		3524475	1					
ANR	3524735	Argument	my_daemon		3524475	0					
ANR	3524736	Identifier	my_daemon		3524475	0					
ANR	3524737	CompoundStatement		61:40:1776:1776	3524475	1					
ANR	3524738	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Matching '%s:%d'\\n"" , my_daemon -> fullHostname ( ) , my_daemon -> port ( ) )"	612:4:16689:16805	3524475	0	True				
ANR	3524739	CallExpression	"dprintf ( D_FULLDEBUG , ""Matching '%s:%d'\\n"" , my_daemon -> fullHostname ( ) , my_daemon -> port ( ) )"		3524475	0					
ANR	3524740	Callee	dprintf		3524475	0					
ANR	3524741	Identifier	dprintf		3524475	0					
ANR	3524742	ArgumentList	D_FULLDEBUG		3524475	1					
ANR	3524743	Argument	D_FULLDEBUG		3524475	0					
ANR	3524744	Identifier	D_FULLDEBUG		3524475	0					
ANR	3524745	Argument	"""Matching '%s:%d'\\n"""		3524475	1					
ANR	3524746	PrimaryExpression	"""Matching '%s:%d'\\n"""		3524475	0					
ANR	3524747	Argument	my_daemon -> fullHostname ( )		3524475	2					
ANR	3524748	CallExpression	my_daemon -> fullHostname ( )		3524475	0					
ANR	3524749	Callee	my_daemon -> fullHostname		3524475	0					
ANR	3524750	PtrMemberAccess	my_daemon -> fullHostname		3524475	0					
ANR	3524751	Identifier	my_daemon		3524475	0					
ANR	3524752	Identifier	fullHostname		3524475	1					
ANR	3524753	ArgumentList			3524475	1					
ANR	3524754	Argument	my_daemon -> port ( )		3524475	3					
ANR	3524755	CallExpression	my_daemon -> port ( )		3524475	0					
ANR	3524756	Callee	my_daemon -> port		3524475	0					
ANR	3524757	PtrMemberAccess	my_daemon -> port		3524475	0					
ANR	3524758	Identifier	my_daemon		3524475	0					
ANR	3524759	Identifier	port		3524475	1					
ANR	3524760	ArgumentList			3524475	1					
ANR	3524761	IfStatement	"if ( same_host ( my_hostname , my_daemon -> fullHostname ( ) ) )"		3524475	1					
ANR	3524762	Condition	"same_host ( my_hostname , my_daemon -> fullHostname ( ) )"	618:8:16816:16876	3524475	0	True				
ANR	3524763	CallExpression	"same_host ( my_hostname , my_daemon -> fullHostname ( ) )"		3524475	0					
ANR	3524764	Callee	same_host		3524475	0					
ANR	3524765	Identifier	same_host		3524475	0					
ANR	3524766	ArgumentList	my_hostname		3524475	1					
ANR	3524767	Argument	my_hostname		3524475	0					
ANR	3524768	Identifier	my_hostname		3524475	0					
ANR	3524769	Argument	my_daemon -> fullHostname ( )		3524475	1					
ANR	3524770	CallExpression	my_daemon -> fullHostname ( )		3524475	0					
ANR	3524771	Callee	my_daemon -> fullHostname		3524475	0					
ANR	3524772	PtrMemberAccess	my_daemon -> fullHostname		3524475	0					
ANR	3524773	Identifier	my_daemon		3524475	0					
ANR	3524774	Identifier	fullHostname		3524475	1					
ANR	3524775	ArgumentList			3524475	1					
ANR	3524776	CompoundStatement		71:5:1980:2014	3524475	1					
ANR	3524777	IdentifierDeclStatement	Sinful sinful ( my_daemon -> addr ( ) ) ;	620:5:16886:16920	3524475	0	True				
ANR	3524778	IdentifierDecl	sinful ( my_daemon -> addr ( ) )		3524475	0					
ANR	3524779	IdentifierDeclType	Sinful		3524475	0					
ANR	3524780	Identifier	sinful		3524475	1					
ANR	3524781	CallExpression	my_daemon -> addr ( )		3524475	2					
ANR	3524782	Callee	my_daemon -> addr		3524475	0					
ANR	3524783	PtrMemberAccess	my_daemon -> addr		3524475	0					
ANR	3524784	Identifier	my_daemon		3524475	0					
ANR	3524785	Identifier	addr		3524475	1					
ANR	3524786	ArgumentList			3524475	1					
ANR	3524787	IfStatement	if ( sinful . getSharedPortID ( ) )		3524475	1					
ANR	3524788	Condition	sinful . getSharedPortID ( )	621:9:16931:16954	3524475	0	True				
ANR	3524789	CallExpression	sinful . getSharedPortID ( )		3524475	0					
ANR	3524790	Callee	sinful . getSharedPortID		3524475	0					
ANR	3524791	MemberAccess	sinful . getSharedPortID		3524475	0					
ANR	3524792	Identifier	sinful		3524475	0					
ANR	3524793	Identifier	getSharedPortID		3524475	1					
ANR	3524794	ArgumentList			3524475	1					
ANR	3524795	CompoundStatement		72:36:2052:2052	3524475	1					
ANR	3524796	ExpressionStatement	daemon_sock_buf = sinful . getSharedPortID ( )	623:6:17009:17051	3524475	0	True				
ANR	3524797	AssignmentExpression	daemon_sock_buf = sinful . getSharedPortID ( )		3524475	0		=			
ANR	3524798	Identifier	daemon_sock_buf		3524475	0					
ANR	3524799	CallExpression	sinful . getSharedPortID ( )		3524475	1					
ANR	3524800	Callee	sinful . getSharedPortID		3524475	0					
ANR	3524801	MemberAccess	sinful . getSharedPortID		3524475	0					
ANR	3524802	Identifier	sinful		3524475	0					
ANR	3524803	Identifier	getSharedPortID		3524475	1					
ANR	3524804	ArgumentList			3524475	1					
ANR	3524805	ExpressionStatement	daemon_sock = daemon_sock_buf . Value ( )	624:6:17059:17096	3524475	1	True				
ANR	3524806	AssignmentExpression	daemon_sock = daemon_sock_buf . Value ( )		3524475	0		=			
ANR	3524807	Identifier	daemon_sock		3524475	0					
ANR	3524808	CallExpression	daemon_sock_buf . Value ( )		3524475	1					
ANR	3524809	Callee	daemon_sock_buf . Value		3524475	0					
ANR	3524810	MemberAccess	daemon_sock_buf . Value		3524475	0					
ANR	3524811	Identifier	daemon_sock_buf		3524475	0					
ANR	3524812	Identifier	Value		3524475	1					
ANR	3524813	ArgumentList			3524475	1					
ANR	3524814	ExpressionStatement	command_port = 1	625:6:17104:17120	3524475	2	True				
ANR	3524815	AssignmentExpression	command_port = 1		3524475	0		=			
ANR	3524816	Identifier	command_port		3524475	0					
ANR	3524817	PrimaryExpression	1		3524475	1					
ANR	3524818	ElseStatement	else		3524475	0					
ANR	3524819	CompoundStatement		78:10:2233:2233	3524475	0					
ANR	3524820	ExpressionStatement	command_port = sinful . getPortNum ( )	629:6:17189:17223	3524475	0	True				
ANR	3524821	AssignmentExpression	command_port = sinful . getPortNum ( )		3524475	0		=			
ANR	3524822	Identifier	command_port		3524475	0					
ANR	3524823	CallExpression	sinful . getPortNum ( )		3524475	1					
ANR	3524824	Callee	sinful . getPortNum		3524475	0					
ANR	3524825	MemberAccess	sinful . getPortNum		3524475	0					
ANR	3524826	Identifier	sinful		3524475	0					
ANR	3524827	Identifier	getPortNum		3524475	1					
ANR	3524828	ArgumentList			3524475	1					
ANR	3524829	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Host name matches collector %s.\\n"" , sinful . getSinful ( ) ? sinful . getSinful ( ) : ""NULL"" )"	631:5:17237:17356	3524475	2	True				
ANR	3524830	CallExpression	"dprintf ( D_FULLDEBUG , ""Host name matches collector %s.\\n"" , sinful . getSinful ( ) ? sinful . getSinful ( ) : ""NULL"" )"		3524475	0					
ANR	3524831	Callee	dprintf		3524475	0					
ANR	3524832	Identifier	dprintf		3524475	0					
ANR	3524833	ArgumentList	D_FULLDEBUG		3524475	1					
ANR	3524834	Argument	D_FULLDEBUG		3524475	0					
ANR	3524835	Identifier	D_FULLDEBUG		3524475	0					
ANR	3524836	Argument	"""Host name matches collector %s.\\n"""		3524475	1					
ANR	3524837	PrimaryExpression	"""Host name matches collector %s.\\n"""		3524475	0					
ANR	3524838	Argument	"sinful . getSinful ( ) ? sinful . getSinful ( ) : ""NULL"""		3524475	2					
ANR	3524839	ConditionalExpression	"sinful . getSinful ( ) ? sinful . getSinful ( ) : ""NULL"""		3524475	0					
ANR	3524840	Condition	sinful . getSinful ( )		3524475	0					
ANR	3524841	CallExpression	sinful . getSinful ( )		3524475	0					
ANR	3524842	Callee	sinful . getSinful		3524475	0					
ANR	3524843	MemberAccess	sinful . getSinful		3524475	0					
ANR	3524844	Identifier	sinful		3524475	0					
ANR	3524845	Identifier	getSinful		3524475	1					
ANR	3524846	ArgumentList			3524475	1					
ANR	3524847	CallExpression	sinful . getSinful ( )		3524475	1					
ANR	3524848	Callee	sinful . getSinful		3524475	0					
ANR	3524849	MemberAccess	sinful . getSinful		3524475	0					
ANR	3524850	Identifier	sinful		3524475	0					
ANR	3524851	Identifier	getSinful		3524475	1					
ANR	3524852	ArgumentList			3524475	1					
ANR	3524853	PrimaryExpression	"""NULL"""		3524475	2					
ANR	3524854	BreakStatement	break ;	633:5:17363:17368	3524475	3	True				
ANR	3524855	IfStatement	if ( command_port == 0 )		3524475	5					
ANR	3524856	Condition	command_port == 0	642:7:17732:17748	3524475	0	True				
ANR	3524857	EqualityExpression	command_port == 0		3524475	0		==			
ANR	3524858	Identifier	command_port		3524475	0					
ANR	3524859	PrimaryExpression	0		3524475	1					
ANR	3524860	CompoundStatement		93:26:2845:2845	3524475	1					
ANR	3524861	ExpressionStatement	command_port = 1	643:4:17757:17773	3524475	0	True				
ANR	3524862	AssignmentExpression	command_port = 1		3524475	0		=			
ANR	3524863	Identifier	command_port		3524475	0					
ANR	3524864	PrimaryExpression	1		3524475	1					
ANR	3524865	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Finished looking for Collectors.\\n"" )"	646:2:17786:17855	3524475	4	True				
ANR	3524866	CallExpression	"dprintf ( D_FULLDEBUG , ""Finished looking for Collectors.\\n"" )"		3524475	0					
ANR	3524867	Callee	dprintf		3524475	0					
ANR	3524868	Identifier	dprintf		3524475	0					
ANR	3524869	ArgumentList	D_FULLDEBUG		3524475	1					
ANR	3524870	Argument	D_FULLDEBUG		3524475	0					
ANR	3524871	Identifier	D_FULLDEBUG		3524475	0					
ANR	3524872	Argument	"""Finished looking for Collectors.\\n"""		3524475	1					
ANR	3524873	PrimaryExpression	"""Finished looking for Collectors.\\n"""		3524475	0					
ANR	3524874	IfStatement	if ( command_port == - 1 )		3524475	5					
ANR	3524875	Condition	command_port == - 1	650:6:17864:17881	3524475	0	True				
ANR	3524876	EqualityExpression	command_port == - 1		3524475	0		==			
ANR	3524877	Identifier	command_port		3524475	0					
ANR	3524878	UnaryOperationExpression	- 1		3524475	1					
ANR	3524879	UnaryOperator	-		3524475	0					
ANR	3524880	PrimaryExpression	1		3524475	1					
ANR	3524881	CompoundStatement		101:26:2978:2978	3524475	1					
ANR	3524882	ExpressionStatement	command_port = COLLECTOR_PORT	652:3:17908:17937	3524475	0	True				
ANR	3524883	AssignmentExpression	command_port = COLLECTOR_PORT		3524475	0		=			
ANR	3524884	Identifier	command_port		3524475	0					
ANR	3524885	Identifier	COLLECTOR_PORT		3524475	1					
ANR	3524886	ExpressionStatement	"dprintf ( D_ALWAYS , ""Collector port not defined, will use default: %d\\n"" , COLLECTOR_PORT )"	653:3:17942:18030	3524475	1	True				
ANR	3524887	CallExpression	"dprintf ( D_ALWAYS , ""Collector port not defined, will use default: %d\\n"" , COLLECTOR_PORT )"		3524475	0					
ANR	3524888	Callee	dprintf		3524475	0					
ANR	3524889	Identifier	dprintf		3524475	0					
ANR	3524890	ArgumentList	D_ALWAYS		3524475	1					
ANR	3524891	Argument	D_ALWAYS		3524475	0					
ANR	3524892	Identifier	D_ALWAYS		3524475	0					
ANR	3524893	Argument	"""Collector port not defined, will use default: %d\\n"""		3524475	1					
ANR	3524894	PrimaryExpression	"""Collector port not defined, will use default: %d\\n"""		3524475	0					
ANR	3524895	Argument	COLLECTOR_PORT		3524475	2					
ANR	3524896	Identifier	COLLECTOR_PORT		3524475	0					
ANR	3524897	IfStatement	if ( daemon_sock )		3524475	6					
ANR	3524898	Condition	daemon_sock	656:6:18043:18053	3524475	0	True				
ANR	3524899	Identifier	daemon_sock		3524475	0					
ANR	3524900	CompoundStatement		107:20:3151:3151	3524475	1					
ANR	3524901	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Starting collector with shared port id %s\\n"" , daemon_sock )"	657:3:18062:18148	3524475	0	True				
ANR	3524902	CallExpression	"dprintf ( D_FULLDEBUG , ""Starting collector with shared port id %s\\n"" , daemon_sock )"		3524475	0					
ANR	3524903	Callee	dprintf		3524475	0					
ANR	3524904	Identifier	dprintf		3524475	0					
ANR	3524905	ArgumentList	D_FULLDEBUG		3524475	1					
ANR	3524906	Argument	D_FULLDEBUG		3524475	0					
ANR	3524907	Identifier	D_FULLDEBUG		3524475	0					
ANR	3524908	Argument	"""Starting collector with shared port id %s\\n"""		3524475	1					
ANR	3524909	PrimaryExpression	"""Starting collector with shared port id %s\\n"""		3524475	0					
ANR	3524910	Argument	daemon_sock		3524475	2					
ANR	3524911	Identifier	daemon_sock		3524475	0					
ANR	3524912	ElseStatement	else		3524475	0					
ANR	3524913	CompoundStatement		111:7:3255:3255	3524475	0					
ANR	3524914	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Starting Collector on port %d\\n"" , command_port )"	661:3:18166:18236	3524475	0	True				
ANR	3524915	CallExpression	"dprintf ( D_FULLDEBUG , ""Starting Collector on port %d\\n"" , command_port )"		3524475	0					
ANR	3524916	Callee	dprintf		3524475	0					
ANR	3524917	Identifier	dprintf		3524475	0					
ANR	3524918	ArgumentList	D_FULLDEBUG		3524475	1					
ANR	3524919	Argument	D_FULLDEBUG		3524475	0					
ANR	3524920	Identifier	D_FULLDEBUG		3524475	0					
ANR	3524921	Argument	"""Starting Collector on port %d\\n"""		3524475	1					
ANR	3524922	PrimaryExpression	"""Starting Collector on port %d\\n"""		3524475	0					
ANR	3524923	Argument	command_port		3524475	2					
ANR	3524924	Identifier	command_port		3524475	0					
ANR	3524925	ElseStatement	else		3524475	0					
ANR	3524926	IfStatement	"if ( strcasecmp ( name_in_config_file , ""CONDOR_VIEW"" ) == 0 || strcasecmp ( name_in_config_file , ""VIEW_SERVER"" ) == 0 )"		3524475	0					
ANR	3524927	Condition	"strcasecmp ( name_in_config_file , ""CONDOR_VIEW"" ) == 0 || strcasecmp ( name_in_config_file , ""VIEW_SERVER"" ) == 0"	667:12:18354:18463	3524475	0	True				
ANR	3524928	OrExpression	"strcasecmp ( name_in_config_file , ""CONDOR_VIEW"" ) == 0 || strcasecmp ( name_in_config_file , ""VIEW_SERVER"" ) == 0"		3524475	0		||			
ANR	3524929	EqualityExpression	"strcasecmp ( name_in_config_file , ""CONDOR_VIEW"" ) == 0"		3524475	0		==			
ANR	3524930	CallExpression	"strcasecmp ( name_in_config_file , ""CONDOR_VIEW"" )"		3524475	0					
ANR	3524931	Callee	strcasecmp		3524475	0					
ANR	3524932	Identifier	strcasecmp		3524475	0					
ANR	3524933	ArgumentList	name_in_config_file		3524475	1					
ANR	3524934	Argument	name_in_config_file		3524475	0					
ANR	3524935	Identifier	name_in_config_file		3524475	0					
ANR	3524936	Argument	"""CONDOR_VIEW"""		3524475	1					
ANR	3524937	PrimaryExpression	"""CONDOR_VIEW"""		3524475	0					
ANR	3524938	PrimaryExpression	0		3524475	1					
ANR	3524939	EqualityExpression	"strcasecmp ( name_in_config_file , ""VIEW_SERVER"" ) == 0"		3524475	1		==			
ANR	3524940	CallExpression	"strcasecmp ( name_in_config_file , ""VIEW_SERVER"" )"		3524475	0					
ANR	3524941	Callee	strcasecmp		3524475	0					
ANR	3524942	Identifier	strcasecmp		3524475	0					
ANR	3524943	ArgumentList	name_in_config_file		3524475	1					
ANR	3524944	Argument	name_in_config_file		3524475	0					
ANR	3524945	Identifier	name_in_config_file		3524475	0					
ANR	3524946	Argument	"""VIEW_SERVER"""		3524475	1					
ANR	3524947	PrimaryExpression	"""VIEW_SERVER"""		3524475	0					
ANR	3524948	PrimaryExpression	0		3524475	1					
ANR	3524949	CompoundStatement		120:2:3565:3594	3524475	1					
ANR	3524950	IdentifierDeclStatement	Daemon d ( DT_VIEW_COLLECTOR ) ;	669:2:18471:18500	3524475	0	True				
ANR	3524951	IdentifierDecl	d ( DT_VIEW_COLLECTOR )		3524475	0					
ANR	3524952	IdentifierDeclType	Daemon		3524475	0					
ANR	3524953	Identifier	d		3524475	1					
ANR	3524954	Identifier	DT_VIEW_COLLECTOR		3524475	2					
ANR	3524955	ExpressionStatement	command_port = d . port ( )	670:2:18504:18527	3524475	1	True				
ANR	3524956	AssignmentExpression	command_port = d . port ( )		3524475	0		=			
ANR	3524957	Identifier	command_port		3524475	0					
ANR	3524958	CallExpression	d . port ( )		3524475	1					
ANR	3524959	Callee	d . port		3524475	0					
ANR	3524960	MemberAccess	d . port		3524475	0					
ANR	3524961	Identifier	d		3524475	0					
ANR	3524962	Identifier	port		3524475	1					
ANR	3524963	ArgumentList			3524475	1					
ANR	3524964	ElseStatement	else		3524475	0					
ANR	3524965	IfStatement	"if ( strcasecmp ( name_in_config_file , ""NEGOTIATOR"" ) == 0 )"		3524475	0					
ANR	3524966	Condition	"strcasecmp ( name_in_config_file , ""NEGOTIATOR"" ) == 0"	674:10:18641:18689	3524475	0	True				
ANR	3524967	EqualityExpression	"strcasecmp ( name_in_config_file , ""NEGOTIATOR"" ) == 0"		3524475	0		==			
ANR	3524968	CallExpression	"strcasecmp ( name_in_config_file , ""NEGOTIATOR"" )"		3524475	0					
ANR	3524969	Callee	strcasecmp		3524475	0					
ANR	3524970	Identifier	strcasecmp		3524475	0					
ANR	3524971	ArgumentList	name_in_config_file		3524475	1					
ANR	3524972	Argument	name_in_config_file		3524475	0					
ANR	3524973	Identifier	name_in_config_file		3524475	0					
ANR	3524974	Argument	"""NEGOTIATOR"""		3524475	1					
ANR	3524975	PrimaryExpression	"""NEGOTIATOR"""		3524475	0					
ANR	3524976	PrimaryExpression	0		3524475	1					
ANR	3524977	CompoundStatement		126:2:3791:3839	3524475	1					
ANR	3524978	IdentifierDeclStatement	"char * host = getCmHostFromConfig ( ""NEGOTIATOR"" ) ;"	675:2:18697:18745	3524475	0	True				
ANR	3524979	IdentifierDecl	"* host = getCmHostFromConfig ( ""NEGOTIATOR"" )"		3524475	0					
ANR	3524980	IdentifierDeclType	char *		3524475	0					
ANR	3524981	Identifier	host		3524475	1					
ANR	3524982	AssignmentExpression	"* host = getCmHostFromConfig ( ""NEGOTIATOR"" )"		3524475	2		=			
ANR	3524983	Identifier	host		3524475	0					
ANR	3524984	CallExpression	"getCmHostFromConfig ( ""NEGOTIATOR"" )"		3524475	1					
ANR	3524985	Callee	getCmHostFromConfig		3524475	0					
ANR	3524986	Identifier	getCmHostFromConfig		3524475	0					
ANR	3524987	ArgumentList	"""NEGOTIATOR"""		3524475	1					
ANR	3524988	Argument	"""NEGOTIATOR"""		3524475	0					
ANR	3524989	PrimaryExpression	"""NEGOTIATOR"""		3524475	0					
ANR	3524990	IfStatement	if ( host )		3524475	1					
ANR	3524991	Condition	host	676:6:18753:18756	3524475	0	True				
ANR	3524992	Identifier	host		3524475	0					
ANR	3524993	CompoundStatement		129:3:3875:3900	3524475	1					
ANR	3524994	ExpressionStatement	free ( host )	677:3:18765:18776	3524475	0	True				
ANR	3524995	CallExpression	free ( host )		3524475	0					
ANR	3524996	Callee	free		3524475	0					
ANR	3524997	Identifier	free		3524475	0					
ANR	3524998	ArgumentList	host		3524475	1					
ANR	3524999	Argument	host		3524475	0					
ANR	3525000	Identifier	host		3524475	0					
ANR	3525001	IdentifierDeclStatement	Daemon d ( DT_NEGOTIATOR ) ;	678:3:18781:18806	3524475	1	True				
ANR	3525002	IdentifierDecl	d ( DT_NEGOTIATOR )		3524475	0					
ANR	3525003	IdentifierDeclType	Daemon		3524475	0					
ANR	3525004	Identifier	d		3524475	1					
ANR	3525005	Identifier	DT_NEGOTIATOR		3524475	2					
ANR	3525006	ExpressionStatement	command_port = d . port ( )	679:3:18811:18834	3524475	2	True				
ANR	3525007	AssignmentExpression	command_port = d . port ( )		3524475	0		=			
ANR	3525008	Identifier	command_port		3524475	0					
ANR	3525009	CallExpression	d . port ( )		3524475	1					
ANR	3525010	Callee	d . port		3524475	0					
ANR	3525011	MemberAccess	d . port		3524475	0					
ANR	3525012	Identifier	d		3524475	0					
ANR	3525013	Identifier	port		3524475	1					
ANR	3525014	ArgumentList			3524475	1					
ANR	3525015	IdentifierDeclStatement	priv_state priv_mode = PRIV_ROOT ;	685:1:18943:18975	3524475	15	True				
ANR	3525016	IdentifierDecl	priv_mode = PRIV_ROOT		3524475	0					
ANR	3525017	IdentifierDeclType	priv_state		3524475	0					
ANR	3525018	Identifier	priv_mode		3524475	1					
ANR	3525019	AssignmentExpression	priv_mode = PRIV_ROOT		3524475	2		=			
ANR	3525020	Identifier	PRIV_ROOT		3524475	0					
ANR	3525021	Identifier	PRIV_ROOT		3524475	1					
ANR	3525022	ExpressionStatement	"snprintf ( buf , sizeof ( buf ) , ""%s_USERID"" , name_in_config_file )"	687:1:18980:19039	3524475	16	True				
ANR	3525023	CallExpression	"snprintf ( buf , sizeof ( buf ) , ""%s_USERID"" , name_in_config_file )"		3524475	0					
ANR	3525024	Callee	snprintf		3524475	0					
ANR	3525025	Identifier	snprintf		3524475	0					
ANR	3525026	ArgumentList	buf		3524475	1					
ANR	3525027	Argument	buf		3524475	0					
ANR	3525028	Identifier	buf		3524475	0					
ANR	3525029	Argument	sizeof ( buf )		3524475	1					
ANR	3525030	SizeofExpression	sizeof ( buf )		3524475	0					
ANR	3525031	Sizeof	sizeof		3524475	0					
ANR	3525032	SizeofOperand	buf		3524475	1					
ANR	3525033	Argument	"""%s_USERID"""		3524475	2					
ANR	3525034	PrimaryExpression	"""%s_USERID"""		3524475	0					
ANR	3525035	Argument	name_in_config_file		3524475	3					
ANR	3525036	Identifier	name_in_config_file		3524475	0					
ANR	3525037	IdentifierDeclStatement	char * username = param ( buf ) ;	688:1:19042:19072	3524475	17	True				
ANR	3525038	IdentifierDecl	* username = param ( buf )		3524475	0					
ANR	3525039	IdentifierDeclType	char *		3524475	0					
ANR	3525040	Identifier	username		3524475	1					
ANR	3525041	AssignmentExpression	* username = param ( buf )		3524475	2		=			
ANR	3525042	Identifier	username		3524475	0					
ANR	3525043	CallExpression	param ( buf )		3524475	1					
ANR	3525044	Callee	param		3524475	0					
ANR	3525045	Identifier	param		3524475	0					
ANR	3525046	ArgumentList	buf		3524475	1					
ANR	3525047	Argument	buf		3524475	0					
ANR	3525048	Identifier	buf		3524475	0					
ANR	3525049	IfStatement	if ( username )		3524475	18					
ANR	3525050	Condition	username	689:4:19078:19085	3524475	0	True				
ANR	3525051	Identifier	username		3524475	0					
ANR	3525052	CompoundStatement		144:2:4359:4401	3524475	1					
ANR	3525053	IdentifierDeclStatement	"int result = init_user_ids ( username , NULL ) ;"	693:2:19265:19307	3524475	0	True				
ANR	3525054	IdentifierDecl	"result = init_user_ids ( username , NULL )"		3524475	0					
ANR	3525055	IdentifierDeclType	int		3524475	0					
ANR	3525056	Identifier	result		3524475	1					
ANR	3525057	AssignmentExpression	"result = init_user_ids ( username , NULL )"		3524475	2		=			
ANR	3525058	Identifier	result		3524475	0					
ANR	3525059	CallExpression	"init_user_ids ( username , NULL )"		3524475	1					
ANR	3525060	Callee	init_user_ids		3524475	0					
ANR	3525061	Identifier	init_user_ids		3524475	0					
ANR	3525062	ArgumentList	username		3524475	1					
ANR	3525063	Argument	username		3524475	0					
ANR	3525064	Identifier	username		3524475	0					
ANR	3525065	Argument	NULL		3524475	1					
ANR	3525066	Identifier	NULL		3524475	0					
ANR	3525067	IfStatement	if ( result )		3524475	1					
ANR	3525068	Condition	result	694:5:19314:19319	3524475	0	True				
ANR	3525069	Identifier	result		3524475	0					
ANR	3525070	CompoundStatement		145:13:4416:4416	3524475	1					
ANR	3525071	ExpressionStatement	priv_mode = PRIV_USER_FINAL	695:3:19327:19354	3524475	0	True				
ANR	3525072	AssignmentExpression	priv_mode = PRIV_USER_FINAL		3524475	0		=			
ANR	3525073	Identifier	priv_mode		3524475	0					
ANR	3525074	Identifier	PRIV_USER_FINAL		3524475	1					
ANR	3525075	ElseStatement	else		3524475	0					
ANR	3525076	CompoundStatement		147:9:4459:4459	3524475	0					
ANR	3525077	ExpressionStatement	"dprintf ( D_ALWAYS , ""couldn't switch to user %s!\\n"" , username )"	697:3:19370:19428	3524475	0	True				
ANR	3525078	CallExpression	"dprintf ( D_ALWAYS , ""couldn't switch to user %s!\\n"" , username )"		3524475	0					
ANR	3525079	Callee	dprintf		3524475	0					
ANR	3525080	Identifier	dprintf		3524475	0					
ANR	3525081	ArgumentList	D_ALWAYS		3524475	1					
ANR	3525082	Argument	D_ALWAYS		3524475	0					
ANR	3525083	Identifier	D_ALWAYS		3524475	0					
ANR	3525084	Argument	"""couldn't switch to user %s!\\n"""		3524475	1					
ANR	3525085	PrimaryExpression	"""couldn't switch to user %s!\\n"""		3524475	0					
ANR	3525086	Argument	username		3524475	2					
ANR	3525087	Identifier	username		3524475	0					
ANR	3525088	ExpressionStatement	free ( username )	699:2:19436:19450	3524475	2	True				
ANR	3525089	CallExpression	free ( username )		3524475	0					
ANR	3525090	Callee	free		3524475	0					
ANR	3525091	Identifier	free		3524475	0					
ANR	3525092	ArgumentList	username		3524475	1					
ANR	3525093	Argument	username		3524475	0					
ANR	3525094	Identifier	username		3524475	0					
ANR	3525095	IfStatement	if ( wants_condor_priv && priv_mode == PRIV_ROOT )		3524475	19					
ANR	3525096	Condition	wants_condor_priv && priv_mode == PRIV_ROOT	701:5:19460:19502	3524475	0	True				
ANR	3525097	AndExpression	wants_condor_priv && priv_mode == PRIV_ROOT		3524475	0		&&			
ANR	3525098	Identifier	wants_condor_priv		3524475	0					
ANR	3525099	EqualityExpression	priv_mode == PRIV_ROOT		3524475	1		==			
ANR	3525100	Identifier	priv_mode		3524475	0					
ANR	3525101	Identifier	PRIV_ROOT		3524475	1					
ANR	3525102	CompoundStatement		160:2:4808:4847	3524475	1					
ANR	3525103	IdentifierDeclStatement	uid_t cuid = get_condor_uid ( ) ;	707:2:19648:19677	3524475	0	True				
ANR	3525104	IdentifierDecl	cuid = get_condor_uid ( )		3524475	0					
ANR	3525105	IdentifierDeclType	uid_t		3524475	0					
ANR	3525106	Identifier	cuid		3524475	1					
ANR	3525107	AssignmentExpression	cuid = get_condor_uid ( )		3524475	2		=			
ANR	3525108	Identifier	cuid		3524475	0					
ANR	3525109	CallExpression	get_condor_uid ( )		3524475	1					
ANR	3525110	Callee	get_condor_uid		3524475	0					
ANR	3525111	Identifier	get_condor_uid		3524475	0					
ANR	3525112	ArgumentList			3524475	1					
ANR	3525113	IdentifierDeclStatement	gid_t cgid = get_condor_gid ( ) ;	708:2:19681:19710	3524475	1	True				
ANR	3525114	IdentifierDecl	cgid = get_condor_gid ( )		3524475	0					
ANR	3525115	IdentifierDeclType	gid_t		3524475	0					
ANR	3525116	Identifier	cgid		3524475	1					
ANR	3525117	AssignmentExpression	cgid = get_condor_gid ( )		3524475	2		=			
ANR	3525118	Identifier	cgid		3524475	0					
ANR	3525119	CallExpression	get_condor_gid ( )		3524475	1					
ANR	3525120	Callee	get_condor_gid		3524475	0					
ANR	3525121	Identifier	get_condor_gid		3524475	0					
ANR	3525122	ArgumentList			3524475	1					
ANR	3525123	IdentifierDeclStatement	"int result = set_user_ids ( cuid , cgid ) ;"	709:2:19714:19753	3524475	2	True				
ANR	3525124	IdentifierDecl	"result = set_user_ids ( cuid , cgid )"		3524475	0					
ANR	3525125	IdentifierDeclType	int		3524475	0					
ANR	3525126	Identifier	result		3524475	1					
ANR	3525127	AssignmentExpression	"result = set_user_ids ( cuid , cgid )"		3524475	2		=			
ANR	3525128	Identifier	result		3524475	0					
ANR	3525129	CallExpression	"set_user_ids ( cuid , cgid )"		3524475	1					
ANR	3525130	Callee	set_user_ids		3524475	0					
ANR	3525131	Identifier	set_user_ids		3524475	0					
ANR	3525132	ArgumentList	cuid		3524475	1					
ANR	3525133	Argument	cuid		3524475	0					
ANR	3525134	Identifier	cuid		3524475	0					
ANR	3525135	Argument	cgid		3524475	1					
ANR	3525136	Identifier	cgid		3524475	0					
ANR	3525137	IfStatement	if ( result )		3524475	3					
ANR	3525138	Condition	result	710:6:19761:19766	3524475	0	True				
ANR	3525139	Identifier	result		3524475	0					
ANR	3525140	CompoundStatement		161:15:4864:4864	3524475	1					
ANR	3525141	ExpressionStatement	priv_mode = PRIV_USER_FINAL	711:3:19776:19803	3524475	0	True				
ANR	3525142	AssignmentExpression	priv_mode = PRIV_USER_FINAL		3524475	0		=			
ANR	3525143	Identifier	priv_mode		3524475	0					
ANR	3525144	Identifier	PRIV_USER_FINAL		3524475	1					
ANR	3525145	ElseStatement	else		3524475	0					
ANR	3525146	CompoundStatement		163:9:4908:4908	3524475	0					
ANR	3525147	ExpressionStatement	"dprintf ( D_ALWAYS , ""couldn't switch to \\""condor\\"" user %d.%d!\\n"" , cuid , cgid )"	713:3:19819:19910	3524475	0	True				
ANR	3525148	CallExpression	"dprintf ( D_ALWAYS , ""couldn't switch to \\""condor\\"" user %d.%d!\\n"" , cuid , cgid )"		3524475	0					
ANR	3525149	Callee	dprintf		3524475	0					
ANR	3525150	Identifier	dprintf		3524475	0					
ANR	3525151	ArgumentList	D_ALWAYS		3524475	1					
ANR	3525152	Argument	D_ALWAYS		3524475	0					
ANR	3525153	Identifier	D_ALWAYS		3524475	0					
ANR	3525154	Argument	"""couldn't switch to \\""condor\\"" user %d.%d!\\n"""		3524475	1					
ANR	3525155	PrimaryExpression	"""couldn't switch to \\""condor\\"" user %d.%d!\\n"""		3524475	0					
ANR	3525156	Argument	cuid		3524475	2					
ANR	3525157	Identifier	cuid		3524475	0					
ANR	3525158	Argument	cgid		3524475	3					
ANR	3525159	Identifier	cgid		3524475	0					
ANR	3525160	ExpressionStatement	args . AppendArg ( shortname )	725:1:20006:20031	3524475	20	True				
ANR	3525161	CallExpression	args . AppendArg ( shortname )		3524475	0					
ANR	3525162	Callee	args . AppendArg		3524475	0					
ANR	3525163	MemberAccess	args . AppendArg		3524475	0					
ANR	3525164	Identifier	args		3524475	0					
ANR	3525165	Identifier	AppendArg		3524475	1					
ANR	3525166	ArgumentList	shortname		3524475	1					
ANR	3525167	Argument	shortname		3524475	0					
ANR	3525168	Identifier	shortname		3524475	0					
ANR	3525169	IfStatement	if ( isDC )		3524475	21					
ANR	3525170	Condition	isDC	726:4:20037:20040	3524475	0	True				
ANR	3525171	Identifier	isDC		3524475	0					
ANR	3525172	CompoundStatement		177:10:5137:5137	3524475	1					
ANR	3525173	ExpressionStatement	"args . AppendArg ( ""-f"" )"	727:2:20047:20067	3524475	0	True				
ANR	3525174	CallExpression	"args . AppendArg ( ""-f"" )"		3524475	0					
ANR	3525175	Callee	args . AppendArg		3524475	0					
ANR	3525176	MemberAccess	args . AppendArg		3524475	0					
ANR	3525177	Identifier	args		3524475	0					
ANR	3525178	Identifier	AppendArg		3524475	1					
ANR	3525179	ArgumentList	"""-f"""		3524475	1					
ANR	3525180	Argument	"""-f"""		3524475	0					
ANR	3525181	PrimaryExpression	"""-f"""		3524475	0					
ANR	3525182	ExpressionStatement	"snprintf ( buf , sizeof ( buf ) , ""%s_ARGS"" , name_in_config_file )"	730:1:20074:20136	3524475	22	True				
ANR	3525183	CallExpression	"snprintf ( buf , sizeof ( buf ) , ""%s_ARGS"" , name_in_config_file )"		3524475	0					
ANR	3525184	Callee	snprintf		3524475	0					
ANR	3525185	Identifier	snprintf		3524475	0					
ANR	3525186	ArgumentList	buf		3524475	1					
ANR	3525187	Argument	buf		3524475	0					
ANR	3525188	Identifier	buf		3524475	0					
ANR	3525189	Argument	sizeof ( buf )		3524475	1					
ANR	3525190	SizeofExpression	sizeof ( buf )		3524475	0					
ANR	3525191	Sizeof	sizeof		3524475	0					
ANR	3525192	SizeofOperand	buf		3524475	1					
ANR	3525193	Argument	"""%s_ARGS"""		3524475	2					
ANR	3525194	PrimaryExpression	"""%s_ARGS"""		3524475	0					
ANR	3525195	Argument	name_in_config_file		3524475	3					
ANR	3525196	Identifier	name_in_config_file		3524475	0					
ANR	3525197	IdentifierDeclStatement	char * daemon_args = param ( buf ) ;	731:1:20139:20171	3524475	23	True				
ANR	3525198	IdentifierDecl	* daemon_args = param ( buf )		3524475	0					
ANR	3525199	IdentifierDeclType	char *		3524475	0					
ANR	3525200	Identifier	daemon_args		3524475	1					
ANR	3525201	AssignmentExpression	* daemon_args = param ( buf )		3524475	2		=			
ANR	3525202	Identifier	daemon_args		3524475	0					
ANR	3525203	CallExpression	param ( buf )		3524475	1					
ANR	3525204	Callee	param		3524475	0					
ANR	3525205	Identifier	param		3524475	0					
ANR	3525206	ArgumentList	buf		3524475	1					
ANR	3525207	Argument	buf		3524475	0					
ANR	3525208	Identifier	buf		3524475	0					
ANR	3525209	IdentifierDeclStatement	MyString args_error ;	733:1:20175:20194	3524475	24	True				
ANR	3525210	IdentifierDecl	args_error		3524475	0					
ANR	3525211	IdentifierDeclType	MyString		3524475	0					
ANR	3525212	Identifier	args_error		3524475	1					
ANR	3525213	IfStatement	"if ( ! args . AppendArgsV1RawOrV2Quoted ( daemon_args , & args_error ) )"		3524475	25					
ANR	3525214	Condition	"! args . AppendArgsV1RawOrV2Quoted ( daemon_args , & args_error )"	734:4:20200:20255	3524475	0	True				
ANR	3525215	UnaryOperationExpression	"! args . AppendArgsV1RawOrV2Quoted ( daemon_args , & args_error )"		3524475	0					
ANR	3525216	UnaryOperator	!		3524475	0					
ANR	3525217	CallExpression	"args . AppendArgsV1RawOrV2Quoted ( daemon_args , & args_error )"		3524475	1					
ANR	3525218	Callee	args . AppendArgsV1RawOrV2Quoted		3524475	0					
ANR	3525219	MemberAccess	args . AppendArgsV1RawOrV2Quoted		3524475	0					
ANR	3525220	Identifier	args		3524475	0					
ANR	3525221	Identifier	AppendArgsV1RawOrV2Quoted		3524475	1					
ANR	3525222	ArgumentList	daemon_args		3524475	1					
ANR	3525223	Argument	daemon_args		3524475	0					
ANR	3525224	Identifier	daemon_args		3524475	0					
ANR	3525225	Argument	& args_error		3524475	1					
ANR	3525226	UnaryOperationExpression	& args_error		3524475	0					
ANR	3525227	UnaryOperator	&		3524475	0					
ANR	3525228	Identifier	args_error		3524475	1					
ANR	3525229	CompoundStatement		185:62:5352:5352	3524475	1					
ANR	3525230	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: failed to parse %s daemon arguments: %s\\n"" , buf , args_error . Value ( ) )"	735:2:20262:20363	3524475	0	True				
ANR	3525231	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: failed to parse %s daemon arguments: %s\\n"" , buf , args_error . Value ( ) )"		3524475	0					
ANR	3525232	Callee	dprintf		3524475	0					
ANR	3525233	Identifier	dprintf		3524475	0					
ANR	3525234	ArgumentList	D_ALWAYS		3524475	1					
ANR	3525235	Argument	D_ALWAYS		3524475	0					
ANR	3525236	Identifier	D_ALWAYS		3524475	0					
ANR	3525237	Argument	"""ERROR: failed to parse %s daemon arguments: %s\\n"""		3524475	1					
ANR	3525238	PrimaryExpression	"""ERROR: failed to parse %s daemon arguments: %s\\n"""		3524475	0					
ANR	3525239	Argument	buf		3524475	2					
ANR	3525240	Identifier	buf		3524475	0					
ANR	3525241	Argument	args_error . Value ( )		3524475	3					
ANR	3525242	CallExpression	args_error . Value ( )		3524475	0					
ANR	3525243	Callee	args_error . Value		3524475	0					
ANR	3525244	MemberAccess	args_error . Value		3524475	0					
ANR	3525245	Identifier	args_error		3524475	0					
ANR	3525246	Identifier	Value		3524475	1					
ANR	3525247	ArgumentList			3524475	1					
ANR	3525248	ExpressionStatement	Restart ( )	738:2:20367:20376	3524475	1	True				
ANR	3525249	CallExpression	Restart ( )		3524475	0					
ANR	3525250	Callee	Restart		3524475	0					
ANR	3525251	Identifier	Restart		3524475	0					
ANR	3525252	ArgumentList			3524475	1					
ANR	3525253	ExpressionStatement	free ( daemon_args )	739:2:20380:20397	3524475	2	True				
ANR	3525254	CallExpression	free ( daemon_args )		3524475	0					
ANR	3525255	Callee	free		3524475	0					
ANR	3525256	Identifier	free		3524475	0					
ANR	3525257	ArgumentList	daemon_args		3524475	1					
ANR	3525258	Argument	daemon_args		3524475	0					
ANR	3525259	Identifier	daemon_args		3524475	0					
ANR	3525260	ReturnStatement	return 0 ;	740:2:20401:20409	3524475	3	True				
ANR	3525261	PrimaryExpression	0		3524475	0					
ANR	3525262	ExpressionStatement	free ( daemon_args )	743:1:20416:20433	3524475	26	True				
ANR	3525263	CallExpression	free ( daemon_args )		3524475	0					
ANR	3525264	Callee	free		3524475	0					
ANR	3525265	Identifier	free		3524475	0					
ANR	3525266	ArgumentList	daemon_args		3524475	1					
ANR	3525267	Argument	daemon_args		3524475	0					
ANR	3525268	Identifier	daemon_args		3524475	0					
ANR	3525269	IfStatement	if ( isDC )		3524475	27					
ANR	3525270	Condition	isDC	750:9:20627:20630	3524475	0	True				
ANR	3525271	Identifier	isDC		3524475	0					
ANR	3525272	CompoundStatement		202:2:5732:5737	3524475	1					
ANR	3525273	IdentifierDeclStatement	int i ;	751:2:20638:20643	3524475	0	True				
ANR	3525274	IdentifierDecl	i		3524475	0					
ANR	3525275	IdentifierDeclType	int		3524475	0					
ANR	3525276	Identifier	i		3524475	1					
ANR	3525277	ForStatement	for ( i = 0 ; i < args . Count ( ) ; i ++ )		3524475	1					
ANR	3525278	ForInit	i = 0 ;	752:6:20651:20654	3524475	0	True				
ANR	3525279	AssignmentExpression	i = 0		3524475	0		=			
ANR	3525280	Identifier	i		3524475	0					
ANR	3525281	PrimaryExpression	0		3524475	1					
ANR	3525282	Condition	i < args . Count ( )	752:10:20655:20668	3524475	1	True				
ANR	3525283	RelationalExpression	i < args . Count ( )		3524475	0		<			
ANR	3525284	Identifier	i		3524475	0					
ANR	3525285	CallExpression	args . Count ( )		3524475	1					
ANR	3525286	Callee	args . Count		3524475	0					
ANR	3525287	MemberAccess	args . Count		3524475	0					
ANR	3525288	Identifier	args		3524475	0					
ANR	3525289	Identifier	Count		3524475	1					
ANR	3525290	ArgumentList			3524475	1					
ANR	3525291	PostIncDecOperationExpression	i ++	752:25:20670:20672	3524475	2	True				
ANR	3525292	Identifier	i		3524475	0					
ANR	3525293	IncDec	++		3524475	1					
ANR	3525294	CompoundStatement		204:3:5774:5810	3524475	3					
ANR	3525295	IdentifierDeclStatement	char const * cur_arg = args . GetArg ( i ) ;	753:3:20680:20716	3524475	0	True				
ANR	3525296	IdentifierDecl	* cur_arg = args . GetArg ( i )		3524475	0					
ANR	3525297	IdentifierDeclType	char const *		3524475	0					
ANR	3525298	Identifier	cur_arg		3524475	1					
ANR	3525299	AssignmentExpression	* cur_arg = args . GetArg ( i )		3524475	2		=			
ANR	3525300	Identifier	cur_arg		3524475	0					
ANR	3525301	CallExpression	args . GetArg ( i )		3524475	1					
ANR	3525302	Callee	args . GetArg		3524475	0					
ANR	3525303	MemberAccess	args . GetArg		3524475	0					
ANR	3525304	Identifier	args		3524475	0					
ANR	3525305	Identifier	GetArg		3524475	1					
ANR	3525306	ArgumentList	i		3524475	1					
ANR	3525307	Argument	i		3524475	0					
ANR	3525308	Identifier	i		3524475	0					
ANR	3525309	IfStatement	"if ( strcmp ( cur_arg , ""-p"" ) == 0 )"		3524475	1					
ANR	3525310	Condition	"strcmp ( cur_arg , ""-p"" ) == 0"	754:6:20724:20751	3524475	0	True				
ANR	3525311	EqualityExpression	"strcmp ( cur_arg , ""-p"" ) == 0"		3524475	0		==			
ANR	3525312	CallExpression	"strcmp ( cur_arg , ""-p"" )"		3524475	0					
ANR	3525313	Callee	strcmp		3524475	0					
ANR	3525314	Identifier	strcmp		3524475	0					
ANR	3525315	ArgumentList	cur_arg		3524475	1					
ANR	3525316	Argument	cur_arg		3524475	0					
ANR	3525317	Identifier	cur_arg		3524475	0					
ANR	3525318	Argument	"""-p"""		3524475	1					
ANR	3525319	PrimaryExpression	"""-p"""		3524475	0					
ANR	3525320	PrimaryExpression	0		3524475	1					
ANR	3525321	CompoundStatement		205:37:5849:5849	3524475	1					
ANR	3525322	IfStatement	if ( i + 1 < args . Count ( ) )		3524475	0					
ANR	3525323	Condition	i + 1 < args . Count ( )	755:7:20764:20779	3524475	0	True				
ANR	3525324	RelationalExpression	i + 1 < args . Count ( )		3524475	0		<			
ANR	3525325	AdditiveExpression	i + 1		3524475	0		+			
ANR	3525326	Identifier	i		3524475	0					
ANR	3525327	PrimaryExpression	1		3524475	1					
ANR	3525328	CallExpression	args . Count ( )		3524475	1					
ANR	3525329	Callee	args . Count		3524475	0					
ANR	3525330	MemberAccess	args . Count		3524475	0					
ANR	3525331	Identifier	args		3524475	0					
ANR	3525332	Identifier	Count		3524475	1					
ANR	3525333	ArgumentList			3524475	1					
ANR	3525334	CompoundStatement		207:5:5883:5922	3524475	1					
ANR	3525335	IdentifierDeclStatement	char const * port_arg = args . GetArg ( i + 1 ) ;	756:5:20789:20828	3524475	0	True				
ANR	3525336	IdentifierDecl	* port_arg = args . GetArg ( i + 1 )		3524475	0					
ANR	3525337	IdentifierDeclType	char const *		3524475	0					
ANR	3525338	Identifier	port_arg		3524475	1					
ANR	3525339	AssignmentExpression	* port_arg = args . GetArg ( i + 1 )		3524475	2		=			
ANR	3525340	Identifier	port_arg		3524475	0					
ANR	3525341	CallExpression	args . GetArg ( i + 1 )		3524475	1					
ANR	3525342	Callee	args . GetArg		3524475	0					
ANR	3525343	MemberAccess	args . GetArg		3524475	0					
ANR	3525344	Identifier	args		3524475	0					
ANR	3525345	Identifier	GetArg		3524475	1					
ANR	3525346	ArgumentList	i + 1		3524475	1					
ANR	3525347	Argument	i + 1		3524475	0					
ANR	3525348	AdditiveExpression	i + 1		3524475	0		+			
ANR	3525349	Identifier	i		3524475	0					
ANR	3525350	PrimaryExpression	1		3524475	1					
ANR	3525351	ExpressionStatement	command_port = atoi ( port_arg )	757:5:20835:20864	3524475	1	True				
ANR	3525352	AssignmentExpression	command_port = atoi ( port_arg )		3524475	0		=			
ANR	3525353	Identifier	command_port		3524475	0					
ANR	3525354	CallExpression	atoi ( port_arg )		3524475	1					
ANR	3525355	Callee	atoi		3524475	0					
ANR	3525356	Identifier	atoi		3524475	0					
ANR	3525357	ArgumentList	port_arg		3524475	1					
ANR	3525358	Argument	port_arg		3524475	0					
ANR	3525359	Identifier	port_arg		3524475	0					
ANR	3525360	ElseStatement	else		3524475	0					
ANR	3525361	IfStatement	"if ( strncmp ( cur_arg , ""-sock"" , strlen ( cur_arg ) ) == 0 )"		3524475	0					
ANR	3525362	Condition	"strncmp ( cur_arg , ""-sock"" , strlen ( cur_arg ) ) == 0"	760:11:20888:20935	3524475	0	True				
ANR	3525363	EqualityExpression	"strncmp ( cur_arg , ""-sock"" , strlen ( cur_arg ) ) == 0"		3524475	0		==			
ANR	3525364	CallExpression	"strncmp ( cur_arg , ""-sock"" , strlen ( cur_arg ) )"		3524475	0					
ANR	3525365	Callee	strncmp		3524475	0					
ANR	3525366	Identifier	strncmp		3524475	0					
ANR	3525367	ArgumentList	cur_arg		3524475	1					
ANR	3525368	Argument	cur_arg		3524475	0					
ANR	3525369	Identifier	cur_arg		3524475	0					
ANR	3525370	Argument	"""-sock"""		3524475	1					
ANR	3525371	PrimaryExpression	"""-sock"""		3524475	0					
ANR	3525372	Argument	strlen ( cur_arg )		3524475	2					
ANR	3525373	CallExpression	strlen ( cur_arg )		3524475	0					
ANR	3525374	Callee	strlen		3524475	0					
ANR	3525375	Identifier	strlen		3524475	0					
ANR	3525376	ArgumentList	cur_arg		3524475	1					
ANR	3525377	Argument	cur_arg		3524475	0					
ANR	3525378	Identifier	cur_arg		3524475	0					
ANR	3525379	PrimaryExpression	0		3524475	1					
ANR	3525380	CompoundStatement		211:61:6032:6032	3524475	1					
ANR	3525381	ExpressionStatement	i ++	761:4:20944:20947	3524475	0	True				
ANR	3525382	PostIncDecOperationExpression	i ++		3524475	0					
ANR	3525383	Identifier	i		3524475	0					
ANR	3525384	IncDec	++		3524475	1					
ANR	3525385	IfStatement	if ( i < args . Count ( ) )		3524475	1					
ANR	3525386	Condition	i < args . Count ( )	762:8:20957:20970	3524475	0	True				
ANR	3525387	RelationalExpression	i < args . Count ( )		3524475	0		<			
ANR	3525388	Identifier	i		3524475	0					
ANR	3525389	CallExpression	args . Count ( )		3524475	1					
ANR	3525390	Callee	args . Count		3524475	0					
ANR	3525391	MemberAccess	args . Count		3524475	0					
ANR	3525392	Identifier	args		3524475	0					
ANR	3525393	Identifier	Count		3524475	1					
ANR	3525394	ArgumentList			3524475	1					
ANR	3525395	CompoundStatement		213:25:6068:6068	3524475	1					
ANR	3525396	ExpressionStatement	daemon_sock = args . GetArg ( i )	763:5:20981:21009	3524475	0	True				
ANR	3525397	AssignmentExpression	daemon_sock = args . GetArg ( i )		3524475	0		=			
ANR	3525398	Identifier	daemon_sock		3524475	0					
ANR	3525399	CallExpression	args . GetArg ( i )		3524475	1					
ANR	3525400	Callee	args . GetArg		3524475	0					
ANR	3525401	MemberAccess	args . GetArg		3524475	0					
ANR	3525402	Identifier	args		3524475	0					
ANR	3525403	Identifier	GetArg		3524475	1					
ANR	3525404	ArgumentList	i		3524475	1					
ANR	3525405	Argument	i		3524475	0					
ANR	3525406	Identifier	i		3524475	0					
ANR	3525407	IdentifierDeclStatement	FamilyInfo fi ;	772:1:21149:21162	3524475	28	True				
ANR	3525408	IdentifierDecl	fi		3524475	0					
ANR	3525409	IdentifierDeclType	FamilyInfo		3524475	0					
ANR	3525410	Identifier	fi		3524475	1					
ANR	3525411	ExpressionStatement	"fi . max_snapshot_interval = param_integer ( ""PID_SNAPSHOT_INTERVAL"" , 60 )"	773:1:21165:21234	3524475	29	True				
ANR	3525412	AssignmentExpression	"fi . max_snapshot_interval = param_integer ( ""PID_SNAPSHOT_INTERVAL"" , 60 )"		3524475	0		=			
ANR	3525413	MemberAccess	fi . max_snapshot_interval		3524475	0					
ANR	3525414	Identifier	fi		3524475	0					
ANR	3525415	Identifier	max_snapshot_interval		3524475	1					
ANR	3525416	CallExpression	"param_integer ( ""PID_SNAPSHOT_INTERVAL"" , 60 )"		3524475	1					
ANR	3525417	Callee	param_integer		3524475	0					
ANR	3525418	Identifier	param_integer		3524475	0					
ANR	3525419	ArgumentList	"""PID_SNAPSHOT_INTERVAL"""		3524475	1					
ANR	3525420	Argument	"""PID_SNAPSHOT_INTERVAL"""		3524475	0					
ANR	3525421	PrimaryExpression	"""PID_SNAPSHOT_INTERVAL"""		3524475	0					
ANR	3525422	Argument	60		3524475	1					
ANR	3525423	PrimaryExpression	60		3524475	0					
ANR	3525424	IdentifierDeclStatement	int jobopts = 0 ;	775:1:21238:21253	3524475	30	True				
ANR	3525425	IdentifierDecl	jobopts = 0		3524475	0					
ANR	3525426	IdentifierDeclType	int		3524475	0					
ANR	3525427	Identifier	jobopts		3524475	1					
ANR	3525428	AssignmentExpression	jobopts = 0		3524475	2		=			
ANR	3525429	Identifier	jobopts		3524475	0					
ANR	3525430	PrimaryExpression	0		3524475	1					
ANR	3525431	IfStatement	if ( m_never_use_shared_port )		3524475	31					
ANR	3525432	Condition	m_never_use_shared_port	776:5:21260:21282	3524475	0	True				
ANR	3525433	Identifier	m_never_use_shared_port		3524475	0					
ANR	3525434	CompoundStatement		227:31:6380:6380	3524475	1					
ANR	3525435	ExpressionStatement	jobopts |= DCJOBOPT_NEVER_USE_SHARED_PORT	777:2:21290:21331	3524475	0	True				
ANR	3525436	AssignmentExpression	jobopts |= DCJOBOPT_NEVER_USE_SHARED_PORT		3524475	0		|=			
ANR	3525437	Identifier	jobopts		3524475	0					
ANR	3525438	Identifier	DCJOBOPT_NEVER_USE_SHARED_PORT		3524475	1					
ANR	3525439	ExpressionStatement	"pid = daemonCore -> Create_Process ( process_name , args , priv_mode , 1 , command_port , & env , NULL , & fi , NULL , NULL , NULL , 0 , NULL , jobopts , NULL , NULL , daemon_sock )"	780:1:21338:21772	3524475	32	True				
ANR	3525440	AssignmentExpression	"pid = daemonCore -> Create_Process ( process_name , args , priv_mode , 1 , command_port , & env , NULL , & fi , NULL , NULL , NULL , 0 , NULL , jobopts , NULL , NULL , daemon_sock )"		3524475	0		=			
ANR	3525441	Identifier	pid		3524475	0					
ANR	3525442	CallExpression	"daemonCore -> Create_Process ( process_name , args , priv_mode , 1 , command_port , & env , NULL , & fi , NULL , NULL , NULL , 0 , NULL , jobopts , NULL , NULL , daemon_sock )"		3524475	1					
ANR	3525443	Callee	daemonCore -> Create_Process		3524475	0					
ANR	3525444	PtrMemberAccess	daemonCore -> Create_Process		3524475	0					
ANR	3525445	Identifier	daemonCore		3524475	0					
ANR	3525446	Identifier	Create_Process		3524475	1					
ANR	3525447	ArgumentList	process_name		3524475	1					
ANR	3525448	Argument	process_name		3524475	0					
ANR	3525449	Identifier	process_name		3524475	0					
ANR	3525450	Argument	args		3524475	1					
ANR	3525451	Identifier	args		3524475	0					
ANR	3525452	Argument	priv_mode		3524475	2					
ANR	3525453	Identifier	priv_mode		3524475	0					
ANR	3525454	Argument	1		3524475	3					
ANR	3525455	PrimaryExpression	1		3524475	0					
ANR	3525456	Argument	command_port		3524475	4					
ANR	3525457	Identifier	command_port		3524475	0					
ANR	3525458	Argument	& env		3524475	5					
ANR	3525459	UnaryOperationExpression	& env		3524475	0					
ANR	3525460	UnaryOperator	&		3524475	0					
ANR	3525461	Identifier	env		3524475	1					
ANR	3525462	Argument	NULL		3524475	6					
ANR	3525463	Identifier	NULL		3524475	0					
ANR	3525464	Argument	& fi		3524475	7					
ANR	3525465	UnaryOperationExpression	& fi		3524475	0					
ANR	3525466	UnaryOperator	&		3524475	0					
ANR	3525467	Identifier	fi		3524475	1					
ANR	3525468	Argument	NULL		3524475	8					
ANR	3525469	Identifier	NULL		3524475	0					
ANR	3525470	Argument	NULL		3524475	9					
ANR	3525471	Identifier	NULL		3524475	0					
ANR	3525472	Argument	NULL		3524475	10					
ANR	3525473	Identifier	NULL		3524475	0					
ANR	3525474	Argument	0		3524475	11					
ANR	3525475	PrimaryExpression	0		3524475	0					
ANR	3525476	Argument	NULL		3524475	12					
ANR	3525477	Identifier	NULL		3524475	0					
ANR	3525478	Argument	jobopts		3524475	13					
ANR	3525479	Identifier	jobopts		3524475	0					
ANR	3525480	Argument	NULL		3524475	14					
ANR	3525481	Identifier	NULL		3524475	0					
ANR	3525482	Argument	NULL		3524475	15					
ANR	3525483	Identifier	NULL		3524475	0					
ANR	3525484	Argument	daemon_sock		3524475	16					
ANR	3525485	Identifier	daemon_sock		3524475	0					
ANR	3525486	IfStatement	if ( pid == FALSE )		3524475	33					
ANR	3525487	Condition	pid == FALSE	799:6:21781:21792	3524475	0	True				
ANR	3525488	EqualityExpression	pid == FALSE		3524475	0		==			
ANR	3525489	Identifier	pid		3524475	0					
ANR	3525490	Identifier	FALSE		3524475	1					
ANR	3525491	CompoundStatement		250:21:6890:6890	3524475	1					
ANR	3525492	ExpressionStatement	"dprintf ( D_FAILURE | D_ALWAYS , ""ERROR: Create_Process failed trying to start %s\\n"" , process_name )"	801:2:21828:21933	3524475	0	True				
ANR	3525493	CallExpression	"dprintf ( D_FAILURE | D_ALWAYS , ""ERROR: Create_Process failed trying to start %s\\n"" , process_name )"		3524475	0					
ANR	3525494	Callee	dprintf		3524475	0					
ANR	3525495	Identifier	dprintf		3524475	0					
ANR	3525496	ArgumentList	D_FAILURE | D_ALWAYS		3524475	1					
ANR	3525497	Argument	D_FAILURE | D_ALWAYS		3524475	0					
ANR	3525498	InclusiveOrExpression	D_FAILURE | D_ALWAYS		3524475	0		|			
ANR	3525499	Identifier	D_FAILURE		3524475	0					
ANR	3525500	Identifier	D_ALWAYS		3524475	1					
ANR	3525501	Argument	"""ERROR: Create_Process failed trying to start %s\\n"""		3524475	1					
ANR	3525502	PrimaryExpression	"""ERROR: Create_Process failed trying to start %s\\n"""		3524475	0					
ANR	3525503	Argument	process_name		3524475	2					
ANR	3525504	Identifier	process_name		3524475	0					
ANR	3525505	ExpressionStatement	pid = 0	804:2:21937:21944	3524475	1	True				
ANR	3525506	AssignmentExpression	pid = 0		3524475	0		=			
ANR	3525507	Identifier	pid		3524475	0					
ANR	3525508	PrimaryExpression	0		3524475	1					
ANR	3525509	ExpressionStatement	Restart ( )	806:2:21996:22005	3524475	2	True				
ANR	3525510	CallExpression	Restart ( )		3524475	0					
ANR	3525511	Callee	Restart		3524475	0					
ANR	3525512	Identifier	Restart		3524475	0					
ANR	3525513	ArgumentList			3524475	1					
ANR	3525514	ReturnStatement	return 0 ;	807:2:22009:22017	3524475	3	True				
ANR	3525515	PrimaryExpression	0		3524475	0					
ANR	3525516	ExpressionStatement	m_waiting_for_startup = true	810:1:22024:22052	3524475	34	True				
ANR	3525517	AssignmentExpression	m_waiting_for_startup = true		3524475	0		=			
ANR	3525518	Identifier	m_waiting_for_startup		3524475	0					
ANR	3525519	Identifier	true		3524475	1					
ANR	3525520	IfStatement	if ( restarts > 0 )		3524475	35					
ANR	3525521	Condition	restarts > 0	813:5:22106:22117	3524475	0	True				
ANR	3525522	RelationalExpression	restarts > 0		3524475	0		>			
ANR	3525523	Identifier	restarts		3524475	0					
ANR	3525524	PrimaryExpression	0		3524475	1					
ANR	3525525	CompoundStatement		264:19:7214:7214	3524475	1					
ANR	3525526	ExpressionStatement	"recover_tid = daemonCore -> Register_Timer ( m_recover_time , ( TimerHandlercpp ) & daemon :: Recover , ""daemon::Recover()"" , this )"	814:2:22124:22256	3524475	0	True				
ANR	3525527	AssignmentExpression	"recover_tid = daemonCore -> Register_Timer ( m_recover_time , ( TimerHandlercpp ) & daemon :: Recover , ""daemon::Recover()"" , this )"		3524475	0		=			
ANR	3525528	Identifier	recover_tid		3524475	0					
ANR	3525529	CallExpression	"daemonCore -> Register_Timer ( m_recover_time , ( TimerHandlercpp ) & daemon :: Recover , ""daemon::Recover()"" , this )"		3524475	1					
ANR	3525530	Callee	daemonCore -> Register_Timer		3524475	0					
ANR	3525531	PtrMemberAccess	daemonCore -> Register_Timer		3524475	0					
ANR	3525532	Identifier	daemonCore		3524475	0					
ANR	3525533	Identifier	Register_Timer		3524475	1					
ANR	3525534	ArgumentList	m_recover_time		3524475	1					
ANR	3525535	Argument	m_recover_time		3524475	0					
ANR	3525536	Identifier	m_recover_time		3524475	0					
ANR	3525537	Argument	( TimerHandlercpp ) & daemon :: Recover		3524475	1					
ANR	3525538	CastExpression	( TimerHandlercpp ) & daemon :: Recover		3524475	0					
ANR	3525539	CastTarget	TimerHandlercpp		3524475	0					
ANR	3525540	UnaryOperationExpression	& daemon :: Recover		3524475	1					
ANR	3525541	UnaryOperator	&		3524475	0					
ANR	3525542	Identifier	daemon :: Recover		3524475	1					
ANR	3525543	Argument	"""daemon::Recover()"""		3524475	2					
ANR	3525544	PrimaryExpression	"""daemon::Recover()"""		3524475	0					
ANR	3525545	Argument	this		3524475	3					
ANR	3525546	Identifier	this		3524475	0					
ANR	3525547	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""start recover timer (%d)\\n"" , recover_tid )"	817:2:22260:22323	3524475	1	True				
ANR	3525548	CallExpression	"dprintf ( D_FULLDEBUG , ""start recover timer (%d)\\n"" , recover_tid )"		3524475	0					
ANR	3525549	Callee	dprintf		3524475	0					
ANR	3525550	Identifier	dprintf		3524475	0					
ANR	3525551	ArgumentList	D_FULLDEBUG		3524475	1					
ANR	3525552	Argument	D_FULLDEBUG		3524475	0					
ANR	3525553	Identifier	D_FULLDEBUG		3524475	0					
ANR	3525554	Argument	"""start recover timer (%d)\\n"""		3524475	1					
ANR	3525555	PrimaryExpression	"""start recover timer (%d)\\n"""		3524475	0					
ANR	3525556	Argument	recover_tid		3524475	2					
ANR	3525557	Identifier	recover_tid		3524475	0					
ANR	3525558	IdentifierDeclStatement	"const char * proc_type = command_port ? ""DaemonCore "" : """" ;"	820:1:22330:22387	3524475	36	True				
ANR	3525559	IdentifierDecl	"* proc_type = command_port ? ""DaemonCore "" : """""		3524475	0					
ANR	3525560	IdentifierDeclType	const char *		3524475	0					
ANR	3525561	Identifier	proc_type		3524475	1					
ANR	3525562	AssignmentExpression	"* proc_type = command_port ? ""DaemonCore "" : """""		3524475	2		=			
ANR	3525563	Identifier	proc_type		3524475	0					
ANR	3525564	ConditionalExpression	"command_port ? ""DaemonCore "" : """""		3524475	1					
ANR	3525565	Condition	command_port		3524475	0					
ANR	3525566	Identifier	command_port		3524475	0					
ANR	3525567	PrimaryExpression	"""DaemonCore """		3524475	1					
ANR	3525568	PrimaryExpression	""""""		3524475	2					
ANR	3525569	IfStatement	if ( DebugFlags & D_FULLDEBUG )		3524475	37					
ANR	3525570	Condition	DebugFlags & D_FULLDEBUG	821:6:22395:22418	3524475	0	True				
ANR	3525571	BitAndExpression	DebugFlags & D_FULLDEBUG		3524475	0		&			
ANR	3525572	Identifier	DebugFlags		3524475	0					
ANR	3525573	Identifier	D_FULLDEBUG		3524475	1					
ANR	3525574	CompoundStatement		273:2:7520:7546	3524475	1					
ANR	3525575	IdentifierDeclStatement	"MyString args_string , tmp ;"	822:2:22426:22452	3524475	0	True				
ANR	3525576	IdentifierDecl	args_string		3524475	0					
ANR	3525577	IdentifierDeclType	MyString		3524475	0					
ANR	3525578	Identifier	args_string		3524475	1					
ANR	3525579	IdentifierDecl	tmp		3524475	1					
ANR	3525580	IdentifierDeclType	MyString		3524475	0					
ANR	3525581	Identifier	tmp		3524475	1					
ANR	3525582	ExpressionStatement	"args . GetArgsStringForDisplay ( & tmp , 1 )"	823:2:22456:22495	3524475	1	True				
ANR	3525583	CallExpression	"args . GetArgsStringForDisplay ( & tmp , 1 )"		3524475	0					
ANR	3525584	Callee	args . GetArgsStringForDisplay		3524475	0					
ANR	3525585	MemberAccess	args . GetArgsStringForDisplay		3524475	0					
ANR	3525586	Identifier	args		3524475	0					
ANR	3525587	Identifier	GetArgsStringForDisplay		3524475	1					
ANR	3525588	ArgumentList	& tmp		3524475	1					
ANR	3525589	Argument	& tmp		3524475	0					
ANR	3525590	UnaryOperationExpression	& tmp		3524475	0					
ANR	3525591	UnaryOperator	&		3524475	0					
ANR	3525592	Identifier	tmp		3524475	1					
ANR	3525593	Argument	1		3524475	1					
ANR	3525594	PrimaryExpression	1		3524475	0					
ANR	3525595	IfStatement	if ( tmp . Length ( ) )		3524475	2					
ANR	3525596	Condition	tmp . Length ( )	824:6:22503:22514	3524475	0	True				
ANR	3525597	CallExpression	tmp . Length ( )		3524475	0					
ANR	3525598	Callee	tmp . Length		3524475	0					
ANR	3525599	MemberAccess	tmp . Length		3524475	0					
ANR	3525600	Identifier	tmp		3524475	0					
ANR	3525601	Identifier	Length		3524475	1					
ANR	3525602	ArgumentList			3524475	1					
ANR	3525603	CompoundStatement		275:21:7612:7612	3524475	1					
ANR	3525604	ExpressionStatement	"args_string = "" """	825:3:22523:22541	3524475	0	True				
ANR	3525605	AssignmentExpression	"args_string = "" """		3524475	0		=			
ANR	3525606	Identifier	args_string		3524475	0					
ANR	3525607	PrimaryExpression	""" """		3524475	1					
ANR	3525608	ExpressionStatement	args_string += tmp	826:3:22546:22564	3524475	1	True				
ANR	3525609	AssignmentExpression	args_string += tmp		3524475	0		+=			
ANR	3525610	Identifier	args_string		3524475	0					
ANR	3525611	Identifier	tmp		3524475	1					
ANR	3525612	ElseStatement	else		3524475	0					
ANR	3525613	CompoundStatement		279:7:7671:7671	3524475	0					
ANR	3525614	ExpressionStatement	args_string = tmp	829:3:22582:22599	3524475	0	True				
ANR	3525615	AssignmentExpression	args_string = tmp		3524475	0		=			
ANR	3525616	Identifier	args_string		3524475	0					
ANR	3525617	Identifier	tmp		3524475	1					
ANR	3525618	ExpressionStatement	"dprintf ( D_FAILURE | D_ALWAYS , ""Started %sprocess \\""%s%s\\"", pid and pgroup = %d\\n"" , proc_type , process_name , args_string . Value ( ) , pid )"	831:2:22607:22750	3524475	3	True				
ANR	3525619	CallExpression	"dprintf ( D_FAILURE | D_ALWAYS , ""Started %sprocess \\""%s%s\\"", pid and pgroup = %d\\n"" , proc_type , process_name , args_string . Value ( ) , pid )"		3524475	0					
ANR	3525620	Callee	dprintf		3524475	0					
ANR	3525621	Identifier	dprintf		3524475	0					
ANR	3525622	ArgumentList	D_FAILURE | D_ALWAYS		3524475	1					
ANR	3525623	Argument	D_FAILURE | D_ALWAYS		3524475	0					
ANR	3525624	InclusiveOrExpression	D_FAILURE | D_ALWAYS		3524475	0		|			
ANR	3525625	Identifier	D_FAILURE		3524475	0					
ANR	3525626	Identifier	D_ALWAYS		3524475	1					
ANR	3525627	Argument	"""Started %sprocess \\""%s%s\\"", pid and pgroup = %d\\n"""		3524475	1					
ANR	3525628	PrimaryExpression	"""Started %sprocess \\""%s%s\\"", pid and pgroup = %d\\n"""		3524475	0					
ANR	3525629	Argument	proc_type		3524475	2					
ANR	3525630	Identifier	proc_type		3524475	0					
ANR	3525631	Argument	process_name		3524475	3					
ANR	3525632	Identifier	process_name		3524475	0					
ANR	3525633	Argument	args_string . Value ( )		3524475	4					
ANR	3525634	CallExpression	args_string . Value ( )		3524475	0					
ANR	3525635	Callee	args_string . Value		3524475	0					
ANR	3525636	MemberAccess	args_string . Value		3524475	0					
ANR	3525637	Identifier	args_string		3524475	0					
ANR	3525638	Identifier	Value		3524475	1					
ANR	3525639	ArgumentList			3524475	1					
ANR	3525640	Argument	pid		3524475	5					
ANR	3525641	Identifier	pid		3524475	0					
ANR	3525642	ElseStatement	else		3524475	0					
ANR	3525643	CompoundStatement		286:6:7855:7855	3524475	0					
ANR	3525644	ExpressionStatement	"dprintf ( D_FAILURE | D_ALWAYS , ""Started %sprocess \\""%s\\"", pid and pgroup = %d\\n"" , proc_type , process_name , pid )"	836:2:22765:22885	3524475	0	True				
ANR	3525645	CallExpression	"dprintf ( D_FAILURE | D_ALWAYS , ""Started %sprocess \\""%s\\"", pid and pgroup = %d\\n"" , proc_type , process_name , pid )"		3524475	0					
ANR	3525646	Callee	dprintf		3524475	0					
ANR	3525647	Identifier	dprintf		3524475	0					
ANR	3525648	ArgumentList	D_FAILURE | D_ALWAYS		3524475	1					
ANR	3525649	Argument	D_FAILURE | D_ALWAYS		3524475	0					
ANR	3525650	InclusiveOrExpression	D_FAILURE | D_ALWAYS		3524475	0		|			
ANR	3525651	Identifier	D_FAILURE		3524475	0					
ANR	3525652	Identifier	D_ALWAYS		3524475	1					
ANR	3525653	Argument	"""Started %sprocess \\""%s\\"", pid and pgroup = %d\\n"""		3524475	1					
ANR	3525654	PrimaryExpression	"""Started %sprocess \\""%s\\"", pid and pgroup = %d\\n"""		3524475	0					
ANR	3525655	Argument	proc_type		3524475	2					
ANR	3525656	Identifier	proc_type		3524475	0					
ANR	3525657	Argument	process_name		3524475	3					
ANR	3525658	Identifier	process_name		3524475	0					
ANR	3525659	Argument	pid		3524475	4					
ANR	3525660	Identifier	pid		3524475	0					
ANR	3525661	ExpressionStatement	timeStamp = GetTimeStamp ( watch_name )	842:1:22958:22994	3524475	38	True				
ANR	3525662	AssignmentExpression	timeStamp = GetTimeStamp ( watch_name )		3524475	0		=			
ANR	3525663	Identifier	timeStamp		3524475	0					
ANR	3525664	CallExpression	GetTimeStamp ( watch_name )		3524475	1					
ANR	3525665	Callee	GetTimeStamp		3524475	0					
ANR	3525666	Identifier	GetTimeStamp		3524475	0					
ANR	3525667	ArgumentList	watch_name		3524475	1					
ANR	3525668	Argument	watch_name		3524475	0					
ANR	3525669	Identifier	watch_name		3524475	0					
ANR	3525670	ExpressionStatement	startTime = time ( 0 )	845:1:23035:23054	3524475	39	True				
ANR	3525671	AssignmentExpression	startTime = time ( 0 )		3524475	0		=			
ANR	3525672	Identifier	startTime		3524475	0					
ANR	3525673	CallExpression	time ( 0 )		3524475	1					
ANR	3525674	Callee	time		3524475	0					
ANR	3525675	Identifier	time		3524475	0					
ANR	3525676	ArgumentList	0		3524475	1					
ANR	3525677	Argument	0		3524475	0					
ANR	3525678	PrimaryExpression	0		3524475	0					
ANR	3525679	ExpressionStatement	newExec = FALSE	848:1:23125:23140	3524475	40	True				
ANR	3525680	AssignmentExpression	newExec = FALSE		3524475	0		=			
ANR	3525681	Identifier	newExec		3524475	0					
ANR	3525682	Identifier	FALSE		3524475	1					
ANR	3525683	IfStatement	if ( needs_update )		3524475	41					
ANR	3525684	Condition	needs_update	850:5:23148:23159	3524475	0	True				
ANR	3525685	Identifier	needs_update		3524475	0					
ANR	3525686	CompoundStatement		301:20:8257:8257	3524475	1					
ANR	3525687	ExpressionStatement	needs_update = FALSE	851:2:23167:23187	3524475	0	True				
ANR	3525688	AssignmentExpression	needs_update = FALSE		3524475	0		=			
ANR	3525689	Identifier	needs_update		3524475	0					
ANR	3525690	Identifier	FALSE		3524475	1					
ANR	3525691	ExpressionStatement	daemons . UpdateCollector ( )	852:2:23191:23216	3524475	1	True				
ANR	3525692	CallExpression	daemons . UpdateCollector ( )		3524475	0					
ANR	3525693	Callee	daemons . UpdateCollector		3524475	0					
ANR	3525694	MemberAccess	daemons . UpdateCollector		3524475	0					
ANR	3525695	Identifier	daemons		3524475	0					
ANR	3525696	Identifier	UpdateCollector		3524475	1					
ANR	3525697	ArgumentList			3524475	1					
ANR	3525698	ReturnStatement	return pid ;	855:1:23223:23233	3524475	42	True				
ANR	3525699	Identifier	pid		3524475	0					
ANR	3525700	ReturnType	int		3524475	1					
ANR	3525701	Identifier	daemon :: RealStart		3524475	2					
ANR	3525702	ParameterList			3524475	3					
ANR	3525703	CFGEntryNode	ENTRY		3524475		True				
ANR	3525704	CFGExitNode	EXIT		3524475		True				
ANR	3525705	Symbol	daemonCore -> Create_Process		3524475						
ANR	3525706	Symbol	my_fqdn_str		3524475						
ANR	3525707	Symbol	X_OK		3524475						
ANR	3525708	Symbol	jobopts		3524475						
ANR	3525709	Symbol	m_waiting_for_startup		3524475						
ANR	3525710	Symbol	MasterShuttingDown		3524475						
ANR	3525711	Symbol	strncmp		3524475						
ANR	3525712	Symbol	args_error		3524475						
ANR	3525713	Symbol	tmp		3524475						
ANR	3525714	Symbol	isDC		3524475						
ANR	3525715	Symbol	COLLECTOR_PORT		3524475						
ANR	3525716	Symbol	tmp . Length		3524475						
ANR	3525717	Symbol	errno		3524475						
ANR	3525718	Symbol	cuid		3524475						
ANR	3525719	Symbol	m_after_startup_wait_for_file . IsEmpty		3524475						
ANR	3525720	Symbol	shortname		3524475						
ANR	3525721	Symbol	args . GetArg		3524475						
ANR	3525722	Symbol	sinful . getSharedPortID		3524475						
ANR	3525723	Symbol	* daemonCore		3524475						
ANR	3525724	Symbol	daemonCore -> Register_Timer		3524475						
ANR	3525725	Symbol	PRIV_ROOT		3524475						
ANR	3525726	Symbol	param_integer		3524475						
ANR	3525727	Symbol	& tmp		3524475						
ANR	3525728	Symbol	m_never_use_shared_port		3524475						
ANR	3525729	Symbol	init_user_ids		3524475						
ANR	3525730	Symbol	same_host		3524475						
ANR	3525731	Symbol	condor_basename		3524475						
ANR	3525732	Symbol	daemon_args		3524475						
ANR	3525733	Symbol	access		3524475						
ANR	3525734	Symbol	daemonCore -> getCollectorList		3524475						
ANR	3525735	Symbol	fi . max_snapshot_interval		3524475						
ANR	3525736	Symbol	& args_error		3524475						
ANR	3525737	Symbol	m_recover_time		3524475						
ANR	3525738	Symbol	m_after_startup_wait_for_file		3524475						
ANR	3525739	Symbol	args . Count		3524475						
ANR	3525740	Symbol	result		3524475						
ANR	3525741	Symbol	cgid		3524475						
ANR	3525742	Symbol	get_local_fqdn ( ) . Value		3524475						
ANR	3525743	Symbol	set_user_ids		3524475						
ANR	3525744	Symbol	daemonCore		3524475						
ANR	3525745	Symbol	daemons		3524475						
ANR	3525746	Symbol	startTime		3524475						
ANR	3525747	Symbol	my_daemon		3524475						
ANR	3525748	Symbol	d . port		3524475						
ANR	3525749	Symbol	priv_mode		3524475						
ANR	3525750	Symbol	atoi		3524475						
ANR	3525751	Symbol	d		3524475						
ANR	3525752	Symbol	DCJOBOPT_NEVER_USE_SHARED_PORT		3524475						
ANR	3525753	Symbol	i		3524475						
ANR	3525754	Symbol	command_port		3524475						
ANR	3525755	Symbol	timeStamp		3524475						
ANR	3525756	Symbol	needs_update		3524475						
ANR	3525757	Symbol	wants_condor_priv		3524475						
ANR	3525758	Symbol	buf		3524475						
ANR	3525759	Symbol	sinful . getPortNum		3524475						
ANR	3525760	Symbol	get_condor_gid		3524475						
ANR	3525761	Symbol	pid		3524475						
ANR	3525762	Symbol	get_local_fqdn		3524475						
ANR	3525763	Symbol	name_in_config_file		3524475						
ANR	3525764	Symbol	strlen		3524475						
ANR	3525765	Symbol	sinful . getSinful		3524475						
ANR	3525766	Symbol	process_name		3524475						
ANR	3525767	Symbol	host		3524475						
ANR	3525768	Symbol	my_fqdn_str . Value		3524475						
ANR	3525769	Symbol	daemon_sock		3524475						
ANR	3525770	Symbol	strcasecmp		3524475						
ANR	3525771	Symbol	args_error . Value		3524475						
ANR	3525772	Symbol	sinful		3524475						
ANR	3525773	Symbol	strcmp		3524475						
ANR	3525774	Symbol	NULL		3524475						
ANR	3525775	Symbol	newExec		3524475						
ANR	3525776	Symbol	this		3524475						
ANR	3525777	Symbol	args_string . Value		3524475						
ANR	3525778	Symbol	TRUE		3524475						
ANR	3525779	Symbol	D_FULLDEBUG		3524475						
ANR	3525780	Symbol	DebugFlags		3524475						
ANR	3525781	Symbol	D_FAILURE		3524475						
ANR	3525782	Symbol	restarts		3524475						
ANR	3525783	Symbol	strerror		3524475						
ANR	3525784	Symbol	collectors		3524475						
ANR	3525785	Symbol	m_after_startup_wait_for_file . Value		3524475						
ANR	3525786	Symbol	true		3524475						
ANR	3525787	Symbol	collectors -> next		3524475						
ANR	3525788	Symbol	fi		3524475						
ANR	3525789	Symbol	* collectors		3524475						
ANR	3525790	Symbol	args . AppendArgsV1RawOrV2Quoted		3524475						
ANR	3525791	Symbol	PRIV_USER_FINAL		3524475						
ANR	3525792	Symbol	& env		3524475						
ANR	3525793	Symbol	param		3524475						
ANR	3525794	Symbol	my_daemon -> fullHostname		3524475						
ANR	3525795	Symbol	GetTimeStamp		3524475						
ANR	3525796	Symbol	* my_daemon		3524475						
ANR	3525797	Symbol	recover_tid		3524475						
ANR	3525798	Symbol	args_string		3524475						
ANR	3525799	Symbol	D_ALWAYS		3524475						
ANR	3525800	Symbol	false		3524475						
ANR	3525801	Symbol	proc_type		3524475						
ANR	3525802	Symbol	on_hold		3524475						
ANR	3525803	Symbol	& fi		3524475						
ANR	3525804	Symbol	& daemon :: Recover		3524475						
ANR	3525805	Symbol	args		3524475						
ANR	3525806	Symbol	watch_name		3524475						
ANR	3525807	Symbol	get_condor_uid		3524475						
ANR	3525808	Symbol	cur_arg		3524475						
ANR	3525809	Symbol	my_daemon -> port		3524475						
ANR	3525810	Symbol	port_arg		3524475						
ANR	3525811	Symbol	FALSE		3524475						
ANR	3525812	Symbol	my_hostname		3524475						
ANR	3525813	Symbol	time		3524475						
ANR	3525814	Symbol	daemon_sock_buf . Value		3524475						
ANR	3525815	Symbol	getCmHostFromConfig		3524475						
ANR	3525816	Symbol	daemon_sock_buf		3524475						
ANR	3525817	Symbol	username		3524475						
ANR	3525818	Function	daemon :: WaitBeforeStartingOtherDaemons	858:0:23239:23857							
ANR	3525819	FunctionDef	daemon :: WaitBeforeStartingOtherDaemons (bool first_time)		3525818	0					
ANR	3525820	CompoundStatement		860:0:23300:23857	3525818	0					
ANR	3525821	IfStatement	if ( ! m_waiting_for_startup )		3525818	0					
ANR	3525822	Condition	! m_waiting_for_startup	862:5:23308:23329	3525818	0	True				
ANR	3525823	UnaryOperationExpression	! m_waiting_for_startup		3525818	0					
ANR	3525824	UnaryOperator	!		3525818	0					
ANR	3525825	Identifier	m_waiting_for_startup		3525818	1					
ANR	3525826	CompoundStatement		3:30:32:32	3525818	1					
ANR	3525827	ReturnStatement	return false ;	863:2:23337:23349	3525818	0	True				
ANR	3525828	Identifier	false		3525818	0					
ANR	3525829	IdentifierDeclStatement	bool wait = false ;	866:1:23356:23373	3525818	1	True				
ANR	3525830	IdentifierDecl	wait = false		3525818	0					
ANR	3525831	IdentifierDeclType	bool		3525818	0					
ANR	3525832	Identifier	wait		3525818	1					
ANR	3525833	AssignmentExpression	wait = false		3525818	2		=			
ANR	3525834	Identifier	false		3525818	0					
ANR	3525835	Identifier	false		3525818	1					
ANR	3525836	IfStatement	if ( ! m_after_startup_wait_for_file . IsEmpty ( ) )		3525818	2					
ANR	3525837	Condition	! m_after_startup_wait_for_file . IsEmpty ( )	867:5:23380:23419	3525818	0	True				
ANR	3525838	UnaryOperationExpression	! m_after_startup_wait_for_file . IsEmpty ( )		3525818	0					
ANR	3525839	UnaryOperator	!		3525818	0					
ANR	3525840	CallExpression	m_after_startup_wait_for_file . IsEmpty ( )		3525818	1					
ANR	3525841	Callee	m_after_startup_wait_for_file . IsEmpty		3525818	0					
ANR	3525842	MemberAccess	m_after_startup_wait_for_file . IsEmpty		3525818	0					
ANR	3525843	Identifier	m_after_startup_wait_for_file		3525818	0					
ANR	3525844	Identifier	IsEmpty		3525818	1					
ANR	3525845	ArgumentList			3525818	1					
ANR	3525846	CompoundStatement		9:2:126:178	3525818	1					
ANR	3525847	IdentifierDeclStatement	StatInfo si ( m_after_startup_wait_for_file . Value ( ) ) ;	868:2:23427:23479	3525818	0	True				
ANR	3525848	IdentifierDecl	si ( m_after_startup_wait_for_file . Value ( ) )		3525818	0					
ANR	3525849	IdentifierDeclType	StatInfo		3525818	0					
ANR	3525850	Identifier	si		3525818	1					
ANR	3525851	CallExpression	m_after_startup_wait_for_file . Value ( )		3525818	2					
ANR	3525852	Callee	m_after_startup_wait_for_file . Value		3525818	0					
ANR	3525853	MemberAccess	m_after_startup_wait_for_file . Value		3525818	0					
ANR	3525854	Identifier	m_after_startup_wait_for_file		3525818	0					
ANR	3525855	Identifier	Value		3525818	1					
ANR	3525856	ArgumentList			3525818	1					
ANR	3525857	IfStatement	if ( si . Error ( ) != 0 )		3525818	1					
ANR	3525858	Condition	si . Error ( ) != 0	869:6:23487:23501	3525818	0	True				
ANR	3525859	EqualityExpression	si . Error ( ) != 0		3525818	0		!=			
ANR	3525860	CallExpression	si . Error ( )		3525818	0					
ANR	3525861	Callee	si . Error		3525818	0					
ANR	3525862	MemberAccess	si . Error		3525818	0					
ANR	3525863	Identifier	si		3525818	0					
ANR	3525864	Identifier	Error		3525818	1					
ANR	3525865	ArgumentList			3525818	1					
ANR	3525866	PrimaryExpression	0		3525818	1					
ANR	3525867	CompoundStatement		10:24:204:204	3525818	1					
ANR	3525868	ExpressionStatement	wait = true	870:3:23510:23521	3525818	0	True				
ANR	3525869	AssignmentExpression	wait = true		3525818	0		=			
ANR	3525870	Identifier	wait		3525818	0					
ANR	3525871	Identifier	true		3525818	1					
ANR	3525872	ExpressionStatement	"dprintf ( D_ALWAYS , ""Waiting for %s to appear.\\n"" , m_after_startup_wait_for_file . Value ( ) )"	871:3:23526:23618	3525818	1	True				
ANR	3525873	CallExpression	"dprintf ( D_ALWAYS , ""Waiting for %s to appear.\\n"" , m_after_startup_wait_for_file . Value ( ) )"		3525818	0					
ANR	3525874	Callee	dprintf		3525818	0					
ANR	3525875	Identifier	dprintf		3525818	0					
ANR	3525876	ArgumentList	D_ALWAYS		3525818	1					
ANR	3525877	Argument	D_ALWAYS		3525818	0					
ANR	3525878	Identifier	D_ALWAYS		3525818	0					
ANR	3525879	Argument	"""Waiting for %s to appear.\\n"""		3525818	1					
ANR	3525880	PrimaryExpression	"""Waiting for %s to appear.\\n"""		3525818	0					
ANR	3525881	Argument	m_after_startup_wait_for_file . Value ( )		3525818	2					
ANR	3525882	CallExpression	m_after_startup_wait_for_file . Value ( )		3525818	0					
ANR	3525883	Callee	m_after_startup_wait_for_file . Value		3525818	0					
ANR	3525884	MemberAccess	m_after_startup_wait_for_file . Value		3525818	0					
ANR	3525885	Identifier	m_after_startup_wait_for_file		3525818	0					
ANR	3525886	Identifier	Value		3525818	1					
ANR	3525887	ArgumentList			3525818	1					
ANR	3525888	ElseStatement	else		3525818	0					
ANR	3525889	IfStatement	if ( ! first_time )		3525818	0					
ANR	3525890	Condition	! first_time	874:11:23635:23645	3525818	0	True				
ANR	3525891	UnaryOperationExpression	! first_time		3525818	0					
ANR	3525892	UnaryOperator	!		3525818	0					
ANR	3525893	Identifier	first_time		3525818	1					
ANR	3525894	CompoundStatement		15:25:348:348	3525818	1					
ANR	3525895	ExpressionStatement	"dprintf ( D_ALWAYS , ""Found %s.\\n"" , m_after_startup_wait_for_file . Value ( ) )"	875:3:23654:23730	3525818	0	True				
ANR	3525896	CallExpression	"dprintf ( D_ALWAYS , ""Found %s.\\n"" , m_after_startup_wait_for_file . Value ( ) )"		3525818	0					
ANR	3525897	Callee	dprintf		3525818	0					
ANR	3525898	Identifier	dprintf		3525818	0					
ANR	3525899	ArgumentList	D_ALWAYS		3525818	1					
ANR	3525900	Argument	D_ALWAYS		3525818	0					
ANR	3525901	Identifier	D_ALWAYS		3525818	0					
ANR	3525902	Argument	"""Found %s.\\n"""		3525818	1					
ANR	3525903	PrimaryExpression	"""Found %s.\\n"""		3525818	0					
ANR	3525904	Argument	m_after_startup_wait_for_file . Value ( )		3525818	2					
ANR	3525905	CallExpression	m_after_startup_wait_for_file . Value ( )		3525818	0					
ANR	3525906	Callee	m_after_startup_wait_for_file . Value		3525818	0					
ANR	3525907	MemberAccess	m_after_startup_wait_for_file . Value		3525818	0					
ANR	3525908	Identifier	m_after_startup_wait_for_file		3525818	0					
ANR	3525909	Identifier	Value		3525818	1					
ANR	3525910	ArgumentList			3525818	1					
ANR	3525911	IfStatement	if ( ! wait && m_waiting_for_startup )		3525818	3					
ANR	3525912	Condition	! wait && m_waiting_for_startup	880:5:23745:23774	3525818	0	True				
ANR	3525913	AndExpression	! wait && m_waiting_for_startup		3525818	0		&&			
ANR	3525914	UnaryOperationExpression	! wait		3525818	0					
ANR	3525915	UnaryOperator	!		3525818	0					
ANR	3525916	Identifier	wait		3525818	1					
ANR	3525917	Identifier	m_waiting_for_startup		3525818	1					
ANR	3525918	CompoundStatement		21:38:477:477	3525818	1					
ANR	3525919	ExpressionStatement	m_waiting_for_startup = false	881:2:23782:23811	3525818	0	True				
ANR	3525920	AssignmentExpression	m_waiting_for_startup = false		3525818	0		=			
ANR	3525921	Identifier	m_waiting_for_startup		3525818	0					
ANR	3525922	Identifier	false		3525818	1					
ANR	3525923	ExpressionStatement	DoActionAfterStartup ( )	882:2:23815:23837	3525818	1	True				
ANR	3525924	CallExpression	DoActionAfterStartup ( )		3525818	0					
ANR	3525925	Callee	DoActionAfterStartup		3525818	0					
ANR	3525926	Identifier	DoActionAfterStartup		3525818	0					
ANR	3525927	ArgumentList			3525818	1					
ANR	3525928	ReturnStatement	return wait ;	885:1:23844:23855	3525818	4	True				
ANR	3525929	Identifier	wait		3525818	0					
ANR	3525930	ReturnType	bool		3525818	1					
ANR	3525931	Identifier	daemon :: WaitBeforeStartingOtherDaemons		3525818	2					
ANR	3525932	ParameterList	bool first_time		3525818	3					
ANR	3525933	Parameter	bool first_time	859:39:23283:23297	3525818	0	True				
ANR	3525934	ParameterType	bool		3525818	0					
ANR	3525935	Identifier	first_time		3525818	1					
ANR	3525936	CFGEntryNode	ENTRY		3525818		True				
ANR	3525937	CFGExitNode	EXIT		3525818		True				
ANR	3525938	Symbol	wait		3525818						
ANR	3525939	Symbol	m_after_startup_wait_for_file . Value		3525818						
ANR	3525940	Symbol	first_time		3525818						
ANR	3525941	Symbol	si		3525818						
ANR	3525942	Symbol	false		3525818						
ANR	3525943	Symbol	true		3525818						
ANR	3525944	Symbol	D_ALWAYS		3525818						
ANR	3525945	Symbol	m_waiting_for_startup		3525818						
ANR	3525946	Symbol	m_after_startup_wait_for_file . IsEmpty		3525818						
ANR	3525947	Symbol	si . Error		3525818						
ANR	3525948	Symbol	m_after_startup_wait_for_file		3525818						
ANR	3525949	Function	daemon :: DoActionAfterStartup	888:0:23860:23994							
ANR	3525950	FunctionDef	daemon :: DoActionAfterStartup ()		3525949	0					
ANR	3525951	CompoundStatement		890:0:23896:23994	3525949	0					
ANR	3525952	IfStatement	if ( m_reload_shared_port_addr_after_startup )		3525949	0					
ANR	3525953	Condition	m_reload_shared_port_addr_after_startup	891:5:23903:23941	3525949	0	True				
ANR	3525954	Identifier	m_reload_shared_port_addr_after_startup		3525949	0					
ANR	3525955	CompoundStatement		2:47:48:48	3525949	1					
ANR	3525956	ExpressionStatement	daemonCore -> ReloadSharedPortServerAddr ( )	892:2:23949:23989	3525949	0	True				
ANR	3525957	CallExpression	daemonCore -> ReloadSharedPortServerAddr ( )		3525949	0					
ANR	3525958	Callee	daemonCore -> ReloadSharedPortServerAddr		3525949	0					
ANR	3525959	PtrMemberAccess	daemonCore -> ReloadSharedPortServerAddr		3525949	0					
ANR	3525960	Identifier	daemonCore		3525949	0					
ANR	3525961	Identifier	ReloadSharedPortServerAddr		3525949	1					
ANR	3525962	ArgumentList			3525949	1					
ANR	3525963	ReturnType	void		3525949	1					
ANR	3525964	Identifier	daemon :: DoActionAfterStartup		3525949	2					
ANR	3525965	ParameterList			3525949	3					
ANR	3525966	CFGEntryNode	ENTRY		3525949		True				
ANR	3525967	CFGExitNode	EXIT		3525949		True				
ANR	3525968	Symbol	daemonCore		3525949						
ANR	3525969	Symbol	m_reload_shared_port_addr_after_startup		3525949						
ANR	3525970	Function	daemon :: Stop	896:0:23997:25049							
ANR	3525971	FunctionDef	daemon :: Stop (bool never_forward)		3525970	0					
ANR	3525972	CompoundStatement		898:0:24037:25049	3525970	0					
ANR	3525973	IfStatement	if ( type == DT_MASTER )		3525970	0					
ANR	3525974	Condition	type == DT_MASTER	899:5:24044:24060	3525970	0	True				
ANR	3525975	EqualityExpression	type == DT_MASTER		3525970	0		==			
ANR	3525976	Identifier	type		3525970	0					
ANR	3525977	Identifier	DT_MASTER		3525970	1					
ANR	3525978	CompoundStatement		2:25:26:26	3525970	1					
ANR	3525979	ReturnStatement	return ;	901:2:24101:24107	3525970	0	True				
ANR	3525980	IfStatement	if ( controller )		3525970	1					
ANR	3525981	Condition	controller	903:6:24118:24127	3525970	0	True				
ANR	3525982	Identifier	controller		3525970	0					
ANR	3525983	CompoundStatement		6:19:93:93	3525970	1					
ANR	3525984	IfStatement	if ( ! never_forward )		3525970	0					
ANR	3525985	Condition	! never_forward	904:7:24140:24153	3525970	0	True				
ANR	3525986	UnaryOperationExpression	! never_forward		3525970	0					
ANR	3525987	UnaryOperator	!		3525970	0					
ANR	3525988	Identifier	never_forward		3525970	1					
ANR	3525989	CompoundStatement		7:24:119:119	3525970	1					
ANR	3525990	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Forwarding Stop to %s's controller (%s)\\n"" , name_in_config_file , controller -> name_in_config_file )"	905:3:24162:24295	3525970	0	True				
ANR	3525991	CallExpression	"dprintf ( D_FULLDEBUG , ""Forwarding Stop to %s's controller (%s)\\n"" , name_in_config_file , controller -> name_in_config_file )"		3525970	0					
ANR	3525992	Callee	dprintf		3525970	0					
ANR	3525993	Identifier	dprintf		3525970	0					
ANR	3525994	ArgumentList	D_FULLDEBUG		3525970	1					
ANR	3525995	Argument	D_FULLDEBUG		3525970	0					
ANR	3525996	Identifier	D_FULLDEBUG		3525970	0					
ANR	3525997	Argument	"""Forwarding Stop to %s's controller (%s)\\n"""		3525970	1					
ANR	3525998	PrimaryExpression	"""Forwarding Stop to %s's controller (%s)\\n"""		3525970	0					
ANR	3525999	Argument	name_in_config_file		3525970	2					
ANR	3526000	Identifier	name_in_config_file		3525970	0					
ANR	3526001	Argument	controller -> name_in_config_file		3525970	3					
ANR	3526002	PtrMemberAccess	controller -> name_in_config_file		3525970	0					
ANR	3526003	Identifier	controller		3525970	0					
ANR	3526004	Identifier	name_in_config_file		3525970	1					
ANR	3526005	ExpressionStatement	controller -> Stop ( )	908:3:24300:24318	3525970	1	True				
ANR	3526006	CallExpression	controller -> Stop ( )		3525970	0					
ANR	3526007	Callee	controller -> Stop		3525970	0					
ANR	3526008	PtrMemberAccess	controller -> Stop		3525970	0					
ANR	3526009	Identifier	controller		3525970	0					
ANR	3526010	Identifier	Stop		3525970	1					
ANR	3526011	ArgumentList			3525970	1					
ANR	3526012	ReturnStatement	return ;	909:3:24323:24329	3525970	2	True				
ANR	3526013	ElseStatement	else		3525970	0					
ANR	3526014	CompoundStatement		13:9:302:302	3525970	0					
ANR	3526015	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Handling Stop for %s myself\\n"" , name_in_config_file )"	911:3:24345:24433	3525970	0	True				
ANR	3526016	CallExpression	"dprintf ( D_FULLDEBUG , ""Handling Stop for %s myself\\n"" , name_in_config_file )"		3525970	0					
ANR	3526017	Callee	dprintf		3525970	0					
ANR	3526018	Identifier	dprintf		3525970	0					
ANR	3526019	ArgumentList	D_FULLDEBUG		3525970	1					
ANR	3526020	Argument	D_FULLDEBUG		3525970	0					
ANR	3526021	Identifier	D_FULLDEBUG		3525970	0					
ANR	3526022	Argument	"""Handling Stop for %s myself\\n"""		3525970	1					
ANR	3526023	PrimaryExpression	"""Handling Stop for %s myself\\n"""		3525970	0					
ANR	3526024	Argument	name_in_config_file		3525970	2					
ANR	3526025	Identifier	name_in_config_file		3525970	0					
ANR	3526026	IfStatement	if ( start_tid != - 1 )		3525970	2					
ANR	3526027	Condition	start_tid != - 1	916:5:24447:24461	3525970	0	True				
ANR	3526028	EqualityExpression	start_tid != - 1		3525970	0		!=			
ANR	3526029	Identifier	start_tid		3525970	0					
ANR	3526030	UnaryOperationExpression	- 1		3525970	1					
ANR	3526031	UnaryOperator	-		3525970	0					
ANR	3526032	PrimaryExpression	1		3525970	1					
ANR	3526033	CompoundStatement		19:23:427:427	3525970	1					
ANR	3526034	ExpressionStatement	"dprintf ( D_ALWAYS , ""Canceling timer to re-start %s\\n"" , name_in_config_file )"	918:2:24532:24614	3525970	0	True				
ANR	3526035	CallExpression	"dprintf ( D_ALWAYS , ""Canceling timer to re-start %s\\n"" , name_in_config_file )"		3525970	0					
ANR	3526036	Callee	dprintf		3525970	0					
ANR	3526037	Identifier	dprintf		3525970	0					
ANR	3526038	ArgumentList	D_ALWAYS		3525970	1					
ANR	3526039	Argument	D_ALWAYS		3525970	0					
ANR	3526040	Identifier	D_ALWAYS		3525970	0					
ANR	3526041	Argument	"""Canceling timer to re-start %s\\n"""		3525970	1					
ANR	3526042	PrimaryExpression	"""Canceling timer to re-start %s\\n"""		3525970	0					
ANR	3526043	Argument	name_in_config_file		3525970	2					
ANR	3526044	Identifier	name_in_config_file		3525970	0					
ANR	3526045	ExpressionStatement	daemonCore -> Cancel_Timer ( start_tid )	920:2:24618:24655	3525970	1	True				
ANR	3526046	CallExpression	daemonCore -> Cancel_Timer ( start_tid )		3525970	0					
ANR	3526047	Callee	daemonCore -> Cancel_Timer		3525970	0					
ANR	3526048	PtrMemberAccess	daemonCore -> Cancel_Timer		3525970	0					
ANR	3526049	Identifier	daemonCore		3525970	0					
ANR	3526050	Identifier	Cancel_Timer		3525970	1					
ANR	3526051	ArgumentList	start_tid		3525970	1					
ANR	3526052	Argument	start_tid		3525970	0					
ANR	3526053	Identifier	start_tid		3525970	0					
ANR	3526054	ExpressionStatement	start_tid = - 1	921:2:24659:24673	3525970	2	True				
ANR	3526055	AssignmentExpression	start_tid = - 1		3525970	0		=			
ANR	3526056	Identifier	start_tid		3525970	0					
ANR	3526057	UnaryOperationExpression	- 1		3525970	1					
ANR	3526058	UnaryOperator	-		3525970	0					
ANR	3526059	PrimaryExpression	1		3525970	1					
ANR	3526060	IfStatement	if ( ! pid )		3525970	3					
ANR	3526061	Condition	! pid	923:5:24683:24686	3525970	0	True				
ANR	3526062	UnaryOperationExpression	! pid		3525970	0					
ANR	3526063	UnaryOperator	!		3525970	0					
ANR	3526064	Identifier	pid		3525970	1					
ANR	3526065	CompoundStatement		26:12:652:652	3525970	1					
ANR	3526066	ReturnStatement	return ;	925:2:24732:24738	3525970	0	True				
ANR	3526067	IfStatement	if ( stop_state == GRACEFUL )		3525970	4					
ANR	3526068	Condition	stop_state == GRACEFUL	927:5:24748:24769	3525970	0	True				
ANR	3526069	EqualityExpression	stop_state == GRACEFUL		3525970	0		==			
ANR	3526070	Identifier	stop_state		3525970	0					
ANR	3526071	Identifier	GRACEFUL		3525970	1					
ANR	3526072	CompoundStatement		30:30:735:735	3525970	1					
ANR	3526073	ReturnStatement	return ;	929:2:24821:24827	3525970	0	True				
ANR	3526074	ExpressionStatement	stop_state = GRACEFUL	931:1:24833:24854	3525970	5	True				
ANR	3526075	AssignmentExpression	stop_state = GRACEFUL		3525970	0		=			
ANR	3526076	Identifier	stop_state		3525970	0					
ANR	3526077	Identifier	GRACEFUL		3525970	1					
ANR	3526078	ExpressionStatement	Kill ( SIGTERM )	933:1:24858:24873	3525970	6	True				
ANR	3526079	CallExpression	Kill ( SIGTERM )		3525970	0					
ANR	3526080	Callee	Kill		3525970	0					
ANR	3526081	Identifier	Kill		3525970	0					
ANR	3526082	ArgumentList	SIGTERM		3525970	1					
ANR	3526083	Argument	SIGTERM		3525970	0					
ANR	3526084	Identifier	SIGTERM		3525970	0					
ANR	3526085	ExpressionStatement	"stop_fast_tid = daemonCore -> Register_Timer ( shutdown_graceful_timeout , 0 , ( TimerHandlercpp ) & daemon :: StopFastTimer , ""daemon::StopFastTimer()"" , this )"	935:1:24877:25047	3525970	7	True				
ANR	3526086	AssignmentExpression	"stop_fast_tid = daemonCore -> Register_Timer ( shutdown_graceful_timeout , 0 , ( TimerHandlercpp ) & daemon :: StopFastTimer , ""daemon::StopFastTimer()"" , this )"		3525970	0		=			
ANR	3526087	Identifier	stop_fast_tid		3525970	0					
ANR	3526088	CallExpression	"daemonCore -> Register_Timer ( shutdown_graceful_timeout , 0 , ( TimerHandlercpp ) & daemon :: StopFastTimer , ""daemon::StopFastTimer()"" , this )"		3525970	1					
ANR	3526089	Callee	daemonCore -> Register_Timer		3525970	0					
ANR	3526090	PtrMemberAccess	daemonCore -> Register_Timer		3525970	0					
ANR	3526091	Identifier	daemonCore		3525970	0					
ANR	3526092	Identifier	Register_Timer		3525970	1					
ANR	3526093	ArgumentList	shutdown_graceful_timeout		3525970	1					
ANR	3526094	Argument	shutdown_graceful_timeout		3525970	0					
ANR	3526095	Identifier	shutdown_graceful_timeout		3525970	0					
ANR	3526096	Argument	0		3525970	1					
ANR	3526097	PrimaryExpression	0		3525970	0					
ANR	3526098	Argument	( TimerHandlercpp ) & daemon :: StopFastTimer		3525970	2					
ANR	3526099	CastExpression	( TimerHandlercpp ) & daemon :: StopFastTimer		3525970	0					
ANR	3526100	CastTarget	TimerHandlercpp		3525970	0					
ANR	3526101	UnaryOperationExpression	& daemon :: StopFastTimer		3525970	1					
ANR	3526102	UnaryOperator	&		3525970	0					
ANR	3526103	Identifier	daemon :: StopFastTimer		3525970	1					
ANR	3526104	Argument	"""daemon::StopFastTimer()"""		3525970	3					
ANR	3526105	PrimaryExpression	"""daemon::StopFastTimer()"""		3525970	0					
ANR	3526106	Argument	this		3525970	4					
ANR	3526107	Identifier	this		3525970	0					
ANR	3526108	ReturnType	void		3525970	1					
ANR	3526109	Identifier	daemon :: Stop		3525970	2					
ANR	3526110	ParameterList	bool never_forward		3525970	3					
ANR	3526111	Parameter	bool never_forward	897:14:24016:24033	3525970	0	True				
ANR	3526112	ParameterType	bool		3525970	0					
ANR	3526113	Identifier	never_forward		3525970	1					
ANR	3526114	CFGEntryNode	ENTRY		3525970		True				
ANR	3526115	CFGExitNode	EXIT		3525970		True				
ANR	3526116	Symbol	never_forward		3525970						
ANR	3526117	Symbol	controller		3525970						
ANR	3526118	Symbol	stop_fast_tid		3525970						
ANR	3526119	Symbol	controller -> name_in_config_file		3525970						
ANR	3526120	Symbol	& daemon :: StopFastTimer		3525970						
ANR	3526121	Symbol	start_tid		3525970						
ANR	3526122	Symbol	D_ALWAYS		3525970						
ANR	3526123	Symbol	this		3525970						
ANR	3526124	Symbol	D_FULLDEBUG		3525970						
ANR	3526125	Symbol	pid		3525970						
ANR	3526126	Symbol	* controller		3525970						
ANR	3526127	Symbol	GRACEFUL		3525970						
ANR	3526128	Symbol	type		3525970						
ANR	3526129	Symbol	name_in_config_file		3525970						
ANR	3526130	Symbol	DT_MASTER		3525970						
ANR	3526131	Symbol	* daemonCore		3525970						
ANR	3526132	Symbol	daemonCore		3525970						
ANR	3526133	Symbol	stop_state		3525970						
ANR	3526134	Symbol	daemonCore -> Register_Timer		3525970						
ANR	3526135	Symbol	SIGTERM		3525970						
ANR	3526136	Symbol	shutdown_graceful_timeout		3525970						
ANR	3526137	Function	daemon :: StopPeaceful	942:0:25053:26026							
ANR	3526138	FunctionDef	daemon :: StopPeaceful ()		3526137	0					
ANR	3526139	CompoundStatement		944:0:25082:26026	3526137	0					
ANR	3526140	IfStatement	if ( type == DT_MASTER )		3526137	0					
ANR	3526141	Condition	type == DT_MASTER	948:5:25207:25223	3526137	0	True				
ANR	3526142	EqualityExpression	type == DT_MASTER		3526137	0		==			
ANR	3526143	Identifier	type		3526137	0					
ANR	3526144	Identifier	DT_MASTER		3526137	1					
ANR	3526145	CompoundStatement		5:25:144:144	3526137	1					
ANR	3526146	ReturnStatement	return ;	950:2:25264:25270	3526137	0	True				
ANR	3526147	IfStatement	if ( start_tid != - 1 )		3526137	1					
ANR	3526148	Condition	start_tid != - 1	952:5:25280:25294	3526137	0	True				
ANR	3526149	EqualityExpression	start_tid != - 1		3526137	0		!=			
ANR	3526150	Identifier	start_tid		3526137	0					
ANR	3526151	UnaryOperationExpression	- 1		3526137	1					
ANR	3526152	UnaryOperator	-		3526137	0					
ANR	3526153	PrimaryExpression	1		3526137	1					
ANR	3526154	CompoundStatement		9:23:215:215	3526137	1					
ANR	3526155	ExpressionStatement	"dprintf ( D_ALWAYS , ""Canceling timer to re-start %s\\n"" , name_in_config_file )"	954:2:25365:25447	3526137	0	True				
ANR	3526156	CallExpression	"dprintf ( D_ALWAYS , ""Canceling timer to re-start %s\\n"" , name_in_config_file )"		3526137	0					
ANR	3526157	Callee	dprintf		3526137	0					
ANR	3526158	Identifier	dprintf		3526137	0					
ANR	3526159	ArgumentList	D_ALWAYS		3526137	1					
ANR	3526160	Argument	D_ALWAYS		3526137	0					
ANR	3526161	Identifier	D_ALWAYS		3526137	0					
ANR	3526162	Argument	"""Canceling timer to re-start %s\\n"""		3526137	1					
ANR	3526163	PrimaryExpression	"""Canceling timer to re-start %s\\n"""		3526137	0					
ANR	3526164	Argument	name_in_config_file		3526137	2					
ANR	3526165	Identifier	name_in_config_file		3526137	0					
ANR	3526166	ExpressionStatement	daemonCore -> Cancel_Timer ( start_tid )	956:2:25451:25488	3526137	1	True				
ANR	3526167	CallExpression	daemonCore -> Cancel_Timer ( start_tid )		3526137	0					
ANR	3526168	Callee	daemonCore -> Cancel_Timer		3526137	0					
ANR	3526169	PtrMemberAccess	daemonCore -> Cancel_Timer		3526137	0					
ANR	3526170	Identifier	daemonCore		3526137	0					
ANR	3526171	Identifier	Cancel_Timer		3526137	1					
ANR	3526172	ArgumentList	start_tid		3526137	1					
ANR	3526173	Argument	start_tid		3526137	0					
ANR	3526174	Identifier	start_tid		3526137	0					
ANR	3526175	ExpressionStatement	start_tid = - 1	957:2:25492:25506	3526137	2	True				
ANR	3526176	AssignmentExpression	start_tid = - 1		3526137	0		=			
ANR	3526177	Identifier	start_tid		3526137	0					
ANR	3526178	UnaryOperationExpression	- 1		3526137	1					
ANR	3526179	UnaryOperator	-		3526137	0					
ANR	3526180	PrimaryExpression	1		3526137	1					
ANR	3526181	IfStatement	if ( ! pid )		3526137	2					
ANR	3526182	Condition	! pid	959:5:25516:25519	3526137	0	True				
ANR	3526183	UnaryOperationExpression	! pid		3526137	0					
ANR	3526184	UnaryOperator	!		3526137	0					
ANR	3526185	Identifier	pid		3526137	1					
ANR	3526186	CompoundStatement		16:12:440:440	3526137	1					
ANR	3526187	ReturnStatement	return ;	961:2:25565:25571	3526137	0	True				
ANR	3526188	IfStatement	if ( stop_state == PEACEFUL )		3526137	3					
ANR	3526189	Condition	stop_state == PEACEFUL	963:5:25581:25602	3526137	0	True				
ANR	3526190	EqualityExpression	stop_state == PEACEFUL		3526137	0		==			
ANR	3526191	Identifier	stop_state		3526137	0					
ANR	3526192	Identifier	PEACEFUL		3526137	1					
ANR	3526193	CompoundStatement		20:30:523:523	3526137	1					
ANR	3526194	ReturnStatement	return ;	965:2:25654:25660	3526137	0	True				
ANR	3526195	ExpressionStatement	stop_state = PEACEFUL	967:1:25666:25687	3526137	4	True				
ANR	3526196	AssignmentExpression	stop_state = PEACEFUL		3526137	0		=			
ANR	3526197	Identifier	stop_state		3526137	0					
ANR	3526198	Identifier	PEACEFUL		3526137	1					
ANR	3526199	ExpressionStatement	Kill ( SIGTERM )	975:1:26009:26024	3526137	5	True				
ANR	3526200	CallExpression	Kill ( SIGTERM )		3526137	0					
ANR	3526201	Callee	Kill		3526137	0					
ANR	3526202	Identifier	Kill		3526137	0					
ANR	3526203	ArgumentList	SIGTERM		3526137	1					
ANR	3526204	Argument	SIGTERM		3526137	0					
ANR	3526205	Identifier	SIGTERM		3526137	0					
ANR	3526206	ReturnType	void		3526137	1					
ANR	3526207	Identifier	daemon :: StopPeaceful		3526137	2					
ANR	3526208	ParameterList			3526137	3					
ANR	3526209	CFGEntryNode	ENTRY		3526137		True				
ANR	3526210	CFGExitNode	EXIT		3526137		True				
ANR	3526211	Symbol	DT_MASTER		3526137						
ANR	3526212	Symbol	daemonCore		3526137						
ANR	3526213	Symbol	stop_state		3526137						
ANR	3526214	Symbol	start_tid		3526137						
ANR	3526215	Symbol	D_ALWAYS		3526137						
ANR	3526216	Symbol	PEACEFUL		3526137						
ANR	3526217	Symbol	pid		3526137						
ANR	3526218	Symbol	SIGTERM		3526137						
ANR	3526219	Symbol	type		3526137						
ANR	3526220	Symbol	name_in_config_file		3526137						
ANR	3526221	Function	daemon :: StopFastTimer	978:0:26029:26078							
ANR	3526222	FunctionDef	daemon :: StopFastTimer ()		3526221	0					
ANR	3526223	CompoundStatement		980:0:26058:26078	3526221	0					
ANR	3526224	ExpressionStatement	StopFast ( false )	981:1:26061:26076	3526221	0	True				
ANR	3526225	CallExpression	StopFast ( false )		3526221	0					
ANR	3526226	Callee	StopFast		3526221	0					
ANR	3526227	Identifier	StopFast		3526221	0					
ANR	3526228	ArgumentList	false		3526221	1					
ANR	3526229	Argument	false		3526221	0					
ANR	3526230	Identifier	false		3526221	0					
ANR	3526231	ReturnType	void		3526221	1					
ANR	3526232	Identifier	daemon :: StopFastTimer		3526221	2					
ANR	3526233	ParameterList			3526221	3					
ANR	3526234	CFGEntryNode	ENTRY		3526221		True				
ANR	3526235	CFGExitNode	EXIT		3526221		True				
ANR	3526236	Symbol	false		3526221						
ANR	3526237	Function	daemon :: StopFast	984:0:26081:27293							
ANR	3526238	FunctionDef	daemon :: StopFast (bool never_forward)		3526237	0					
ANR	3526239	CompoundStatement		986:0:26125:27293	3526237	0					
ANR	3526240	IfStatement	if ( type == DT_MASTER )		3526237	0					
ANR	3526241	Condition	type == DT_MASTER	987:5:26132:26148	3526237	0	True				
ANR	3526242	EqualityExpression	type == DT_MASTER		3526237	0		==			
ANR	3526243	Identifier	type		3526237	0					
ANR	3526244	Identifier	DT_MASTER		3526237	1					
ANR	3526245	CompoundStatement		2:25:26:26	3526237	1					
ANR	3526246	ReturnStatement	return ;	989:2:26189:26195	3526237	0	True				
ANR	3526247	IfStatement	if ( controller )		3526237	1					
ANR	3526248	Condition	controller	991:6:26206:26215	3526237	0	True				
ANR	3526249	Identifier	controller		3526237	0					
ANR	3526250	CompoundStatement		6:19:93:93	3526237	1					
ANR	3526251	IfStatement	if ( ! never_forward )		3526237	0					
ANR	3526252	Condition	! never_forward	992:7:26228:26241	3526237	0	True				
ANR	3526253	UnaryOperationExpression	! never_forward		3526237	0					
ANR	3526254	UnaryOperator	!		3526237	0					
ANR	3526255	Identifier	never_forward		3526237	1					
ANR	3526256	CompoundStatement		7:24:119:119	3526237	1					
ANR	3526257	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Forwarding StopFast to %s's controller (%s)\\n"" , name_in_config_file , controller -> name_in_config_file )"	993:3:26250:26387	3526237	0	True				
ANR	3526258	CallExpression	"dprintf ( D_FULLDEBUG , ""Forwarding StopFast to %s's controller (%s)\\n"" , name_in_config_file , controller -> name_in_config_file )"		3526237	0					
ANR	3526259	Callee	dprintf		3526237	0					
ANR	3526260	Identifier	dprintf		3526237	0					
ANR	3526261	ArgumentList	D_FULLDEBUG		3526237	1					
ANR	3526262	Argument	D_FULLDEBUG		3526237	0					
ANR	3526263	Identifier	D_FULLDEBUG		3526237	0					
ANR	3526264	Argument	"""Forwarding StopFast to %s's controller (%s)\\n"""		3526237	1					
ANR	3526265	PrimaryExpression	"""Forwarding StopFast to %s's controller (%s)\\n"""		3526237	0					
ANR	3526266	Argument	name_in_config_file		3526237	2					
ANR	3526267	Identifier	name_in_config_file		3526237	0					
ANR	3526268	Argument	controller -> name_in_config_file		3526237	3					
ANR	3526269	PtrMemberAccess	controller -> name_in_config_file		3526237	0					
ANR	3526270	Identifier	controller		3526237	0					
ANR	3526271	Identifier	name_in_config_file		3526237	1					
ANR	3526272	ExpressionStatement	controller -> StopFast ( )	996:3:26392:26414	3526237	1	True				
ANR	3526273	CallExpression	controller -> StopFast ( )		3526237	0					
ANR	3526274	Callee	controller -> StopFast		3526237	0					
ANR	3526275	PtrMemberAccess	controller -> StopFast		3526237	0					
ANR	3526276	Identifier	controller		3526237	0					
ANR	3526277	Identifier	StopFast		3526237	1					
ANR	3526278	ArgumentList			3526237	1					
ANR	3526279	ReturnStatement	return ;	997:3:26419:26425	3526237	2	True				
ANR	3526280	ElseStatement	else		3526237	0					
ANR	3526281	CompoundStatement		13:9:310:310	3526237	0					
ANR	3526282	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Handling StopFast for %s myself\\n"" , name_in_config_file )"	999:3:26441:26533	3526237	0	True				
ANR	3526283	CallExpression	"dprintf ( D_FULLDEBUG , ""Handling StopFast for %s myself\\n"" , name_in_config_file )"		3526237	0					
ANR	3526284	Callee	dprintf		3526237	0					
ANR	3526285	Identifier	dprintf		3526237	0					
ANR	3526286	ArgumentList	D_FULLDEBUG		3526237	1					
ANR	3526287	Argument	D_FULLDEBUG		3526237	0					
ANR	3526288	Identifier	D_FULLDEBUG		3526237	0					
ANR	3526289	Argument	"""Handling StopFast for %s myself\\n"""		3526237	1					
ANR	3526290	PrimaryExpression	"""Handling StopFast for %s myself\\n"""		3526237	0					
ANR	3526291	Argument	name_in_config_file		3526237	2					
ANR	3526292	Identifier	name_in_config_file		3526237	0					
ANR	3526293	IfStatement	if ( start_tid != - 1 )		3526237	2					
ANR	3526294	Condition	start_tid != - 1	1004:5:26547:26561	3526237	0	True				
ANR	3526295	EqualityExpression	start_tid != - 1		3526237	0		!=			
ANR	3526296	Identifier	start_tid		3526237	0					
ANR	3526297	UnaryOperationExpression	- 1		3526237	1					
ANR	3526298	UnaryOperator	-		3526237	0					
ANR	3526299	PrimaryExpression	1		3526237	1					
ANR	3526300	CompoundStatement		19:23:439:439	3526237	1					
ANR	3526301	ExpressionStatement	"dprintf ( D_ALWAYS , ""Canceling timer to re-start %s\\n"" , name_in_config_file )"	1006:2:26632:26714	3526237	0	True				
ANR	3526302	CallExpression	"dprintf ( D_ALWAYS , ""Canceling timer to re-start %s\\n"" , name_in_config_file )"		3526237	0					
ANR	3526303	Callee	dprintf		3526237	0					
ANR	3526304	Identifier	dprintf		3526237	0					
ANR	3526305	ArgumentList	D_ALWAYS		3526237	1					
ANR	3526306	Argument	D_ALWAYS		3526237	0					
ANR	3526307	Identifier	D_ALWAYS		3526237	0					
ANR	3526308	Argument	"""Canceling timer to re-start %s\\n"""		3526237	1					
ANR	3526309	PrimaryExpression	"""Canceling timer to re-start %s\\n"""		3526237	0					
ANR	3526310	Argument	name_in_config_file		3526237	2					
ANR	3526311	Identifier	name_in_config_file		3526237	0					
ANR	3526312	ExpressionStatement	daemonCore -> Cancel_Timer ( start_tid )	1008:2:26718:26755	3526237	1	True				
ANR	3526313	CallExpression	daemonCore -> Cancel_Timer ( start_tid )		3526237	0					
ANR	3526314	Callee	daemonCore -> Cancel_Timer		3526237	0					
ANR	3526315	PtrMemberAccess	daemonCore -> Cancel_Timer		3526237	0					
ANR	3526316	Identifier	daemonCore		3526237	0					
ANR	3526317	Identifier	Cancel_Timer		3526237	1					
ANR	3526318	ArgumentList	start_tid		3526237	1					
ANR	3526319	Argument	start_tid		3526237	0					
ANR	3526320	Identifier	start_tid		3526237	0					
ANR	3526321	ExpressionStatement	start_tid = - 1	1009:2:26759:26773	3526237	2	True				
ANR	3526322	AssignmentExpression	start_tid = - 1		3526237	0		=			
ANR	3526323	Identifier	start_tid		3526237	0					
ANR	3526324	UnaryOperationExpression	- 1		3526237	1					
ANR	3526325	UnaryOperator	-		3526237	0					
ANR	3526326	PrimaryExpression	1		3526237	1					
ANR	3526327	IfStatement	if ( ! pid )		3526237	3					
ANR	3526328	Condition	! pid	1011:5:26783:26786	3526237	0	True				
ANR	3526329	UnaryOperationExpression	! pid		3526237	0					
ANR	3526330	UnaryOperator	!		3526237	0					
ANR	3526331	Identifier	pid		3526237	1					
ANR	3526332	CompoundStatement		26:12:664:664	3526237	1					
ANR	3526333	ReturnStatement	return ;	1013:2:26832:26838	3526237	0	True				
ANR	3526334	IfStatement	if ( stop_state == FAST )		3526237	4					
ANR	3526335	Condition	stop_state == FAST	1015:5:26848:26865	3526237	0	True				
ANR	3526336	EqualityExpression	stop_state == FAST		3526237	0		==			
ANR	3526337	Identifier	stop_state		3526237	0					
ANR	3526338	Identifier	FAST		3526237	1					
ANR	3526339	CompoundStatement		30:26:743:743	3526237	1					
ANR	3526340	ReturnStatement	return ;	1017:2:26917:26923	3526237	0	True				
ANR	3526341	ExpressionStatement	stop_state = FAST	1019:1:26929:26946	3526237	5	True				
ANR	3526342	AssignmentExpression	stop_state = FAST		3526237	0		=			
ANR	3526343	Identifier	stop_state		3526237	0					
ANR	3526344	Identifier	FAST		3526237	1					
ANR	3526345	IfStatement	if ( stop_fast_tid != - 1 )		3526237	6					
ANR	3526346	Condition	stop_fast_tid != - 1	1021:5:26954:26972	3526237	0	True				
ANR	3526347	EqualityExpression	stop_fast_tid != - 1		3526237	0		!=			
ANR	3526348	Identifier	stop_fast_tid		3526237	0					
ANR	3526349	UnaryOperationExpression	- 1		3526237	1					
ANR	3526350	UnaryOperator	-		3526237	0					
ANR	3526351	PrimaryExpression	1		3526237	1					
ANR	3526352	CompoundStatement		36:27:850:850	3526237	1					
ANR	3526353	ExpressionStatement	"dprintf ( D_ALWAYS , ""Timeout for graceful shutdown has expired for %s.\\n"" , name_in_config_file )"	1022:2:26980:27087	3526237	0	True				
ANR	3526354	CallExpression	"dprintf ( D_ALWAYS , ""Timeout for graceful shutdown has expired for %s.\\n"" , name_in_config_file )"		3526237	0					
ANR	3526355	Callee	dprintf		3526237	0					
ANR	3526356	Identifier	dprintf		3526237	0					
ANR	3526357	ArgumentList	D_ALWAYS		3526237	1					
ANR	3526358	Argument	D_ALWAYS		3526237	0					
ANR	3526359	Identifier	D_ALWAYS		3526237	0					
ANR	3526360	Argument	"""Timeout for graceful shutdown has expired for %s.\\n"""		3526237	1					
ANR	3526361	PrimaryExpression	"""Timeout for graceful shutdown has expired for %s.\\n"""		3526237	0					
ANR	3526362	Argument	name_in_config_file		3526237	2					
ANR	3526363	Identifier	name_in_config_file		3526237	0					
ANR	3526364	ExpressionStatement	stop_fast_tid = - 1	1025:2:27091:27109	3526237	1	True				
ANR	3526365	AssignmentExpression	stop_fast_tid = - 1		3526237	0		=			
ANR	3526366	Identifier	stop_fast_tid		3526237	0					
ANR	3526367	UnaryOperationExpression	- 1		3526237	1					
ANR	3526368	UnaryOperator	-		3526237	0					
ANR	3526369	PrimaryExpression	1		3526237	1					
ANR	3526370	ExpressionStatement	Kill ( SIGQUIT )	1028:1:27116:27131	3526237	7	True				
ANR	3526371	CallExpression	Kill ( SIGQUIT )		3526237	0					
ANR	3526372	Callee	Kill		3526237	0					
ANR	3526373	Identifier	Kill		3526237	0					
ANR	3526374	ArgumentList	SIGQUIT		3526237	1					
ANR	3526375	Argument	SIGQUIT		3526237	0					
ANR	3526376	Identifier	SIGQUIT		3526237	0					
ANR	3526377	ExpressionStatement	"hard_kill_tid = daemonCore -> Register_Timer ( shutdown_fast_timeout , 0 , ( TimerHandlercpp ) & daemon :: HardKill , ""daemon::HardKill()"" , this )"	1030:1:27135:27291	3526237	8	True				
ANR	3526378	AssignmentExpression	"hard_kill_tid = daemonCore -> Register_Timer ( shutdown_fast_timeout , 0 , ( TimerHandlercpp ) & daemon :: HardKill , ""daemon::HardKill()"" , this )"		3526237	0		=			
ANR	3526379	Identifier	hard_kill_tid		3526237	0					
ANR	3526380	CallExpression	"daemonCore -> Register_Timer ( shutdown_fast_timeout , 0 , ( TimerHandlercpp ) & daemon :: HardKill , ""daemon::HardKill()"" , this )"		3526237	1					
ANR	3526381	Callee	daemonCore -> Register_Timer		3526237	0					
ANR	3526382	PtrMemberAccess	daemonCore -> Register_Timer		3526237	0					
ANR	3526383	Identifier	daemonCore		3526237	0					
ANR	3526384	Identifier	Register_Timer		3526237	1					
ANR	3526385	ArgumentList	shutdown_fast_timeout		3526237	1					
ANR	3526386	Argument	shutdown_fast_timeout		3526237	0					
ANR	3526387	Identifier	shutdown_fast_timeout		3526237	0					
ANR	3526388	Argument	0		3526237	1					
ANR	3526389	PrimaryExpression	0		3526237	0					
ANR	3526390	Argument	( TimerHandlercpp ) & daemon :: HardKill		3526237	2					
ANR	3526391	CastExpression	( TimerHandlercpp ) & daemon :: HardKill		3526237	0					
ANR	3526392	CastTarget	TimerHandlercpp		3526237	0					
ANR	3526393	UnaryOperationExpression	& daemon :: HardKill		3526237	1					
ANR	3526394	UnaryOperator	&		3526237	0					
ANR	3526395	Identifier	daemon :: HardKill		3526237	1					
ANR	3526396	Argument	"""daemon::HardKill()"""		3526237	3					
ANR	3526397	PrimaryExpression	"""daemon::HardKill()"""		3526237	0					
ANR	3526398	Argument	this		3526237	4					
ANR	3526399	Identifier	this		3526237	0					
ANR	3526400	ReturnType	void		3526237	1					
ANR	3526401	Identifier	daemon :: StopFast		3526237	2					
ANR	3526402	ParameterList	bool never_forward		3526237	3					
ANR	3526403	Parameter	bool never_forward	985:18:26104:26121	3526237	0	True				
ANR	3526404	ParameterType	bool		3526237	0					
ANR	3526405	Identifier	never_forward		3526237	1					
ANR	3526406	CFGEntryNode	ENTRY		3526237		True				
ANR	3526407	CFGExitNode	EXIT		3526237		True				
ANR	3526408	Symbol	never_forward		3526237						
ANR	3526409	Symbol	controller		3526237						
ANR	3526410	Symbol	stop_fast_tid		3526237						
ANR	3526411	Symbol	SIGQUIT		3526237						
ANR	3526412	Symbol	shutdown_fast_timeout		3526237						
ANR	3526413	Symbol	controller -> name_in_config_file		3526237						
ANR	3526414	Symbol	start_tid		3526237						
ANR	3526415	Symbol	D_ALWAYS		3526237						
ANR	3526416	Symbol	this		3526237						
ANR	3526417	Symbol	D_FULLDEBUG		3526237						
ANR	3526418	Symbol	pid		3526237						
ANR	3526419	Symbol	* controller		3526237						
ANR	3526420	Symbol	type		3526237						
ANR	3526421	Symbol	name_in_config_file		3526237						
ANR	3526422	Symbol	hard_kill_tid		3526237						
ANR	3526423	Symbol	DT_MASTER		3526237						
ANR	3526424	Symbol	* daemonCore		3526237						
ANR	3526425	Symbol	daemonCore		3526237						
ANR	3526426	Symbol	stop_state		3526237						
ANR	3526427	Symbol	daemonCore -> Register_Timer		3526237						
ANR	3526428	Symbol	& daemon :: HardKill		3526237						
ANR	3526429	Symbol	FAST		3526237						
ANR	3526430	Function	daemon :: HardKill	1036:0:27296:27882							
ANR	3526431	FunctionDef	daemon :: HardKill ()		3526430	0					
ANR	3526432	CompoundStatement		1038:0:27320:27882	3526430	0					
ANR	3526433	IfStatement	if ( type == DT_MASTER )		3526430	0					
ANR	3526434	Condition	type == DT_MASTER	1039:5:27327:27343	3526430	0	True				
ANR	3526435	EqualityExpression	type == DT_MASTER		3526430	0		==			
ANR	3526436	Identifier	type		3526430	0					
ANR	3526437	Identifier	DT_MASTER		3526430	1					
ANR	3526438	CompoundStatement		2:25:26:26	3526430	1					
ANR	3526439	ReturnStatement	return ;	1041:2:27384:27390	3526430	0	True				
ANR	3526440	IfStatement	if ( ! pid )		3526430	1					
ANR	3526441	Condition	! pid	1043:5:27400:27403	3526430	0	True				
ANR	3526442	UnaryOperationExpression	! pid		3526430	0					
ANR	3526443	UnaryOperator	!		3526430	0					
ANR	3526444	Identifier	pid		3526430	1					
ANR	3526445	CompoundStatement		6:12:86:86	3526430	1					
ANR	3526446	ReturnStatement	return ;	1045:2:27449:27455	3526430	0	True				
ANR	3526447	IfStatement	if ( stop_state == KILL )		3526430	2					
ANR	3526448	Condition	stop_state == KILL	1047:5:27465:27482	3526430	0	True				
ANR	3526449	EqualityExpression	stop_state == KILL		3526430	0		==			
ANR	3526450	Identifier	stop_state		3526430	0					
ANR	3526451	Identifier	KILL		3526430	1					
ANR	3526452	CompoundStatement		10:26:165:165	3526430	1					
ANR	3526453	ReturnStatement	return ;	1049:2:27534:27540	3526430	0	True				
ANR	3526454	ExpressionStatement	stop_state = KILL	1051:1:27546:27563	3526430	3	True				
ANR	3526455	AssignmentExpression	stop_state = KILL		3526430	0		=			
ANR	3526456	Identifier	stop_state		3526430	0					
ANR	3526457	Identifier	KILL		3526430	1					
ANR	3526458	IfStatement	if ( hard_kill_tid != - 1 )		3526430	4					
ANR	3526459	Condition	hard_kill_tid != - 1	1053:5:27571:27589	3526430	0	True				
ANR	3526460	EqualityExpression	hard_kill_tid != - 1		3526430	0		!=			
ANR	3526461	Identifier	hard_kill_tid		3526430	0					
ANR	3526462	UnaryOperationExpression	- 1		3526430	1					
ANR	3526463	UnaryOperator	-		3526430	0					
ANR	3526464	PrimaryExpression	1		3526430	1					
ANR	3526465	CompoundStatement		16:27:272:272	3526430	1					
ANR	3526466	ExpressionStatement	"dprintf ( D_ALWAYS , ""Timeout for fast shutdown has expired for %s.\\n"" , name_in_config_file )"	1054:2:27597:27700	3526430	0	True				
ANR	3526467	CallExpression	"dprintf ( D_ALWAYS , ""Timeout for fast shutdown has expired for %s.\\n"" , name_in_config_file )"		3526430	0					
ANR	3526468	Callee	dprintf		3526430	0					
ANR	3526469	Identifier	dprintf		3526430	0					
ANR	3526470	ArgumentList	D_ALWAYS		3526430	1					
ANR	3526471	Argument	D_ALWAYS		3526430	0					
ANR	3526472	Identifier	D_ALWAYS		3526430	0					
ANR	3526473	Argument	"""Timeout for fast shutdown has expired for %s.\\n"""		3526430	1					
ANR	3526474	PrimaryExpression	"""Timeout for fast shutdown has expired for %s.\\n"""		3526430	0					
ANR	3526475	Argument	name_in_config_file		3526430	2					
ANR	3526476	Identifier	name_in_config_file		3526430	0					
ANR	3526477	ExpressionStatement	hard_kill_tid = - 1	1057:2:27704:27722	3526430	1	True				
ANR	3526478	AssignmentExpression	hard_kill_tid = - 1		3526430	0		=			
ANR	3526479	Identifier	hard_kill_tid		3526430	0					
ANR	3526480	UnaryOperationExpression	- 1		3526430	1					
ANR	3526481	UnaryOperator	-		3526430	0					
ANR	3526482	PrimaryExpression	1		3526430	1					
ANR	3526483	ExpressionStatement	KillFamily ( )	1061:1:27756:27768	3526430	5	True				
ANR	3526484	CallExpression	KillFamily ( )		3526430	0					
ANR	3526485	Callee	KillFamily		3526430	0					
ANR	3526486	Identifier	KillFamily		3526430	0					
ANR	3526487	ArgumentList			3526430	1					
ANR	3526488	ExpressionStatement	"dprintf ( D_ALWAYS , ""Sent SIGKILL to %s (pid %d) and all its children.\\n"" , name_in_config_file , pid )"	1062:1:27771:27880	3526430	6	True				
ANR	3526489	CallExpression	"dprintf ( D_ALWAYS , ""Sent SIGKILL to %s (pid %d) and all its children.\\n"" , name_in_config_file , pid )"		3526430	0					
ANR	3526490	Callee	dprintf		3526430	0					
ANR	3526491	Identifier	dprintf		3526430	0					
ANR	3526492	ArgumentList	D_ALWAYS		3526430	1					
ANR	3526493	Argument	D_ALWAYS		3526430	0					
ANR	3526494	Identifier	D_ALWAYS		3526430	0					
ANR	3526495	Argument	"""Sent SIGKILL to %s (pid %d) and all its children.\\n"""		3526430	1					
ANR	3526496	PrimaryExpression	"""Sent SIGKILL to %s (pid %d) and all its children.\\n"""		3526430	0					
ANR	3526497	Argument	name_in_config_file		3526430	2					
ANR	3526498	Identifier	name_in_config_file		3526430	0					
ANR	3526499	Argument	pid		3526430	3					
ANR	3526500	Identifier	pid		3526430	0					
ANR	3526501	ReturnType	void		3526430	1					
ANR	3526502	Identifier	daemon :: HardKill		3526430	2					
ANR	3526503	ParameterList			3526430	3					
ANR	3526504	CFGEntryNode	ENTRY		3526430		True				
ANR	3526505	CFGExitNode	EXIT		3526430		True				
ANR	3526506	Symbol	DT_MASTER		3526430						
ANR	3526507	Symbol	stop_state		3526430						
ANR	3526508	Symbol	D_ALWAYS		3526430						
ANR	3526509	Symbol	pid		3526430						
ANR	3526510	Symbol	type		3526430						
ANR	3526511	Symbol	KILL		3526430						
ANR	3526512	Symbol	name_in_config_file		3526430						
ANR	3526513	Symbol	hard_kill_tid		3526430						
ANR	3526514	Function	daemon :: Exited	1068:0:27886:29846							
ANR	3526515	FunctionDef	daemon :: Exited (int status)		3526514	0					
ANR	3526516	CompoundStatement		1070:0:27920:29846	3526514	0					
ANR	3526517	IdentifierDeclStatement	MyString msg ;	1071:1:27923:27935	3526514	0	True				
ANR	3526518	IdentifierDecl	msg		3526514	0					
ANR	3526519	IdentifierDeclType	MyString		3526514	0					
ANR	3526520	Identifier	msg		3526514	1					
ANR	3526521	ExpressionStatement	"msg . sprintf ( ""The %s (pid %d) "" , name_in_config_file , pid )"	1072:1:27938:27997	3526514	1	True				
ANR	3526522	CallExpression	"msg . sprintf ( ""The %s (pid %d) "" , name_in_config_file , pid )"		3526514	0					
ANR	3526523	Callee	msg . sprintf		3526514	0					
ANR	3526524	MemberAccess	msg . sprintf		3526514	0					
ANR	3526525	Identifier	msg		3526514	0					
ANR	3526526	Identifier	sprintf		3526514	1					
ANR	3526527	ArgumentList	"""The %s (pid %d) """		3526514	1					
ANR	3526528	Argument	"""The %s (pid %d) """		3526514	0					
ANR	3526529	PrimaryExpression	"""The %s (pid %d) """		3526514	0					
ANR	3526530	Argument	name_in_config_file		3526514	1					
ANR	3526531	Identifier	name_in_config_file		3526514	0					
ANR	3526532	Argument	pid		3526514	2					
ANR	3526533	Identifier	pid		3526514	0					
ANR	3526534	IdentifierDeclStatement	bool had_failure = true ;	1073:1:28000:28023	3526514	2	True				
ANR	3526535	IdentifierDecl	had_failure = true		3526514	0					
ANR	3526536	IdentifierDeclType	bool		3526514	0					
ANR	3526537	Identifier	had_failure		3526514	1					
ANR	3526538	AssignmentExpression	had_failure = true		3526514	2		=			
ANR	3526539	Identifier	true		3526514	0					
ANR	3526540	Identifier	true		3526514	1					
ANR	3526541	IfStatement	if ( daemonCore -> Was_Not_Responding ( pid ) )		3526514	3					
ANR	3526542	Condition	daemonCore -> Was_Not_Responding ( pid )	1074:5:28030:28064	3526514	0	True				
ANR	3526543	CallExpression	daemonCore -> Was_Not_Responding ( pid )		3526514	0					
ANR	3526544	Callee	daemonCore -> Was_Not_Responding		3526514	0					
ANR	3526545	PtrMemberAccess	daemonCore -> Was_Not_Responding		3526514	0					
ANR	3526546	Identifier	daemonCore		3526514	0					
ANR	3526547	Identifier	Was_Not_Responding		3526514	1					
ANR	3526548	ArgumentList	pid		3526514	1					
ANR	3526549	Argument	pid		3526514	0					
ANR	3526550	Identifier	pid		3526514	0					
ANR	3526551	CompoundStatement		5:42:146:146	3526514	1					
ANR	3526552	ExpressionStatement	"msg += ""was killed because it was no longer responding"""	1075:2:28071:28126	3526514	0	True				
ANR	3526553	AssignmentExpression	"msg += ""was killed because it was no longer responding"""		3526514	0		+=			
ANR	3526554	Identifier	msg		3526514	0					
ANR	3526555	PrimaryExpression	"""was killed because it was no longer responding"""		3526514	1					
ANR	3526556	ElseStatement	else		3526514	0					
ANR	3526557	IfStatement	if ( WIFSIGNALED ( status ) )		3526514	0					
ANR	3526558	Condition	WIFSIGNALED ( status )	1077:10:28141:28159	3526514	0	True				
ANR	3526559	CallExpression	WIFSIGNALED ( status )		3526514	0					
ANR	3526560	Callee	WIFSIGNALED		3526514	0					
ANR	3526561	Identifier	WIFSIGNALED		3526514	0					
ANR	3526562	ArgumentList	status		3526514	1					
ANR	3526563	Argument	status		3526514	0					
ANR	3526564	Identifier	status		3526514	0					
ANR	3526565	CompoundStatement		8:31:241:241	3526514	1					
ANR	3526566	ExpressionStatement	"msg += ""died due to """	1078:2:28166:28187	3526514	0	True				
ANR	3526567	AssignmentExpression	"msg += ""died due to """		3526514	0		+=			
ANR	3526568	Identifier	msg		3526514	0					
ANR	3526569	PrimaryExpression	"""died due to """		3526514	1					
ANR	3526570	ExpressionStatement	msg += daemonCore -> GetExceptionString ( status )	1079:2:28191:28236	3526514	1	True				
ANR	3526571	AssignmentExpression	msg += daemonCore -> GetExceptionString ( status )		3526514	0		+=			
ANR	3526572	Identifier	msg		3526514	0					
ANR	3526573	CallExpression	daemonCore -> GetExceptionString ( status )		3526514	1					
ANR	3526574	Callee	daemonCore -> GetExceptionString		3526514	0					
ANR	3526575	PtrMemberAccess	daemonCore -> GetExceptionString		3526514	0					
ANR	3526576	Identifier	daemonCore		3526514	0					
ANR	3526577	Identifier	GetExceptionString		3526514	1					
ANR	3526578	ArgumentList	status		3526514	1					
ANR	3526579	Argument	status		3526514	0					
ANR	3526580	Identifier	status		3526514	0					
ANR	3526581	ElseStatement	else		3526514	0					
ANR	3526582	CompoundStatement		12:6:326:326	3526514	0					
ANR	3526583	ExpressionStatement	"msg += ""exited with status """	1082:2:28251:28279	3526514	0	True				
ANR	3526584	AssignmentExpression	"msg += ""exited with status """		3526514	0		+=			
ANR	3526585	Identifier	msg		3526514	0					
ANR	3526586	PrimaryExpression	"""exited with status """		3526514	1					
ANR	3526587	ExpressionStatement	msg += WEXITSTATUS ( status )	1083:2:28283:28309	3526514	1	True				
ANR	3526588	AssignmentExpression	msg += WEXITSTATUS ( status )		3526514	0		+=			
ANR	3526589	Identifier	msg		3526514	0					
ANR	3526590	CallExpression	WEXITSTATUS ( status )		3526514	1					
ANR	3526591	Callee	WEXITSTATUS		3526514	0					
ANR	3526592	Identifier	WEXITSTATUS		3526514	0					
ANR	3526593	ArgumentList	status		3526514	1					
ANR	3526594	Argument	status		3526514	0					
ANR	3526595	Identifier	status		3526514	0					
ANR	3526596	IfStatement	if ( WEXITSTATUS ( status ) == DAEMON_NO_RESTART )		3526514	2					
ANR	3526597	Condition	WEXITSTATUS ( status ) == DAEMON_NO_RESTART	1084:6:28317:28356	3526514	0	True				
ANR	3526598	EqualityExpression	WEXITSTATUS ( status ) == DAEMON_NO_RESTART		3526514	0		==			
ANR	3526599	CallExpression	WEXITSTATUS ( status )		3526514	0					
ANR	3526600	Callee	WEXITSTATUS		3526514	0					
ANR	3526601	Identifier	WEXITSTATUS		3526514	0					
ANR	3526602	ArgumentList	status		3526514	1					
ANR	3526603	Argument	status		3526514	0					
ANR	3526604	Identifier	status		3526514	0					
ANR	3526605	Identifier	DAEMON_NO_RESTART		3526514	1					
ANR	3526606	CompoundStatement		15:49:439:439	3526514	1					
ANR	3526607	ExpressionStatement	had_failure = false	1085:3:28365:28384	3526514	0	True				
ANR	3526608	AssignmentExpression	had_failure = false		3526514	0		=			
ANR	3526609	Identifier	had_failure		3526514	0					
ANR	3526610	Identifier	false		3526514	1					
ANR	3526611	ExpressionStatement	"msg += "" (daemon will not restart automatically)"""	1086:3:28389:28438	3526514	1	True				
ANR	3526612	AssignmentExpression	"msg += "" (daemon will not restart automatically)"""		3526514	0		+=			
ANR	3526613	Identifier	msg		3526514	0					
ANR	3526614	PrimaryExpression	""" (daemon will not restart automatically)"""		3526514	1					
ANR	3526615	ExpressionStatement	on_hold = true	1092:3:28706:28720	3526514	2	True				
ANR	3526616	AssignmentExpression	on_hold = true		3526514	0		=			
ANR	3526617	Identifier	on_hold		3526514	0					
ANR	3526618	Identifier	true		3526514	1					
ANR	3526619	IdentifierDeclStatement	int d_flag = D_ALWAYS ;	1095:1:28730:28751	3526514	4	True				
ANR	3526620	IdentifierDecl	d_flag = D_ALWAYS		3526514	0					
ANR	3526621	IdentifierDeclType	int		3526514	0					
ANR	3526622	Identifier	d_flag		3526514	1					
ANR	3526623	AssignmentExpression	d_flag = D_ALWAYS		3526514	2		=			
ANR	3526624	Identifier	D_ALWAYS		3526514	0					
ANR	3526625	Identifier	D_ALWAYS		3526514	1					
ANR	3526626	IfStatement	if ( had_failure )		3526514	5					
ANR	3526627	Condition	had_failure	1096:5:28758:28768	3526514	0	True				
ANR	3526628	Identifier	had_failure		3526514	0					
ANR	3526629	CompoundStatement		27:19:851:851	3526514	1					
ANR	3526630	ExpressionStatement	d_flag |= D_FAILURE	1097:2:28776:28795	3526514	0	True				
ANR	3526631	AssignmentExpression	d_flag |= D_FAILURE		3526514	0		|=			
ANR	3526632	Identifier	d_flag		3526514	0					
ANR	3526633	Identifier	D_FAILURE		3526514	1					
ANR	3526634	ExpressionStatement	"dprintf ( d_flag , ""%s\\n"" , msg . Value ( ) )"	1099:1:28804:28840	3526514	6	True				
ANR	3526635	CallExpression	"dprintf ( d_flag , ""%s\\n"" , msg . Value ( ) )"		3526514	0					
ANR	3526636	Callee	dprintf		3526514	0					
ANR	3526637	Identifier	dprintf		3526514	0					
ANR	3526638	ArgumentList	d_flag		3526514	1					
ANR	3526639	Argument	d_flag		3526514	0					
ANR	3526640	Identifier	d_flag		3526514	0					
ANR	3526641	Argument	"""%s\\n"""		3526514	1					
ANR	3526642	PrimaryExpression	"""%s\\n"""		3526514	0					
ANR	3526643	Argument	msg . Value ( )		3526514	2					
ANR	3526644	CallExpression	msg . Value ( )		3526514	0					
ANR	3526645	Callee	msg . Value		3526514	0					
ANR	3526646	MemberAccess	msg . Value		3526514	0					
ANR	3526647	Identifier	msg		3526514	0					
ANR	3526648	Identifier	Value		3526514	1					
ANR	3526649	ArgumentList			3526514	1					
ANR	3526650	IfStatement	if ( is_ha && ha_lock )		3526514	7					
ANR	3526651	Condition	is_ha && ha_lock	1102:6:28879:28894	3526514	0	True				
ANR	3526652	AndExpression	is_ha && ha_lock		3526514	0		&&			
ANR	3526653	Identifier	is_ha		3526514	0					
ANR	3526654	Identifier	ha_lock		3526514	1					
ANR	3526655	CompoundStatement		33:25:977:977	3526514	1					
ANR	3526656	ExpressionStatement	ha_lock -> ReleaseLock ( )	1103:2:28902:28925	3526514	0	True				
ANR	3526657	CallExpression	ha_lock -> ReleaseLock ( )		3526514	0					
ANR	3526658	Callee	ha_lock -> ReleaseLock		3526514	0					
ANR	3526659	PtrMemberAccess	ha_lock -> ReleaseLock		3526514	0					
ANR	3526660	Identifier	ha_lock		3526514	0					
ANR	3526661	Identifier	ReleaseLock		3526514	1					
ANR	3526662	ArgumentList			3526514	1					
ANR	3526663	IfStatement	if ( controller && ( restarts >= 2 ) )		3526514	8					
ANR	3526664	Condition	controller && ( restarts >= 2 )	1107:6:28982:29012	3526514	0	True				
ANR	3526665	AndExpression	controller && ( restarts >= 2 )		3526514	0		&&			
ANR	3526666	Identifier	controller		3526514	0					
ANR	3526667	RelationalExpression	restarts >= 2		3526514	1		>=			
ANR	3526668	Identifier	restarts		3526514	0					
ANR	3526669	PrimaryExpression	2		3526514	1					
ANR	3526670	CompoundStatement		38:40:1095:1095	3526514	1					
ANR	3526671	ExpressionStatement	on_hold = true	1108:2:29020:29034	3526514	0	True				
ANR	3526672	AssignmentExpression	on_hold = true		3526514	0		=			
ANR	3526673	Identifier	on_hold		3526514	0					
ANR	3526674	Identifier	true		3526514	1					
ANR	3526675	IfStatement	if ( stop_state == NONE )		3526514	1					
ANR	3526676	Condition	stop_state == NONE	1109:7:29043:29060	3526514	0	True				
ANR	3526677	EqualityExpression	stop_state == NONE		3526514	0		==			
ANR	3526678	Identifier	stop_state		3526514	0					
ANR	3526679	Identifier	NONE		3526514	1					
ANR	3526680	CompoundStatement		40:28:1143:1143	3526514	1					
ANR	3526681	ExpressionStatement	"dprintf ( D_ALWAYS , ""Telling %s's controller (%s)\\n"" , name_in_config_file , controller -> name_in_config_file )"	1110:3:29069:29182	3526514	0	True				
ANR	3526682	CallExpression	"dprintf ( D_ALWAYS , ""Telling %s's controller (%s)\\n"" , name_in_config_file , controller -> name_in_config_file )"		3526514	0					
ANR	3526683	Callee	dprintf		3526514	0					
ANR	3526684	Identifier	dprintf		3526514	0					
ANR	3526685	ArgumentList	D_ALWAYS		3526514	1					
ANR	3526686	Argument	D_ALWAYS		3526514	0					
ANR	3526687	Identifier	D_ALWAYS		3526514	0					
ANR	3526688	Argument	"""Telling %s's controller (%s)\\n"""		3526514	1					
ANR	3526689	PrimaryExpression	"""Telling %s's controller (%s)\\n"""		3526514	0					
ANR	3526690	Argument	name_in_config_file		3526514	2					
ANR	3526691	Identifier	name_in_config_file		3526514	0					
ANR	3526692	Argument	controller -> name_in_config_file		3526514	3					
ANR	3526693	PtrMemberAccess	controller -> name_in_config_file		3526514	0					
ANR	3526694	Identifier	controller		3526514	0					
ANR	3526695	Identifier	name_in_config_file		3526514	1					
ANR	3526696	ExpressionStatement	controller -> Stop ( )	1112:3:29187:29206	3526514	1	True				
ANR	3526697	CallExpression	controller -> Stop ( )		3526514	0					
ANR	3526698	Callee	controller -> Stop		3526514	0					
ANR	3526699	PtrMemberAccess	controller -> Stop		3526514	0					
ANR	3526700	Identifier	controller		3526514	0					
ANR	3526701	Identifier	Stop		3526514	1					
ANR	3526702	ArgumentList			3526514	1					
ANR	3526703	ForStatement	for ( int num = 0 ; num < num_controllees ; num ++ )		3526514	9					
ANR	3526704	ForInit	int num = 0 ;	1117:6:29261:29272	3526514	0	True				
ANR	3526705	IdentifierDeclStatement	int num = 0 ;		3526514	0					
ANR	3526706	IdentifierDecl	num = 0		3526514	0					
ANR	3526707	IdentifierDeclType	int		3526514	0					
ANR	3526708	Identifier	num		3526514	1					
ANR	3526709	AssignmentExpression	num = 0		3526514	2		=			
ANR	3526710	Identifier	num		3526514	0					
ANR	3526711	PrimaryExpression	0		3526514	1					
ANR	3526712	Condition	num < num_controllees	1117:20:29275:29295	3526514	1	True				
ANR	3526713	RelationalExpression	num < num_controllees		3526514	0		<			
ANR	3526714	Identifier	num		3526514	0					
ANR	3526715	Identifier	num_controllees		3526514	1					
ANR	3526716	PostIncDecOperationExpression	num ++	1117:44:29299:29303	3526514	2	True				
ANR	3526717	Identifier	num		3526514	0					
ANR	3526718	IncDec	++		3526514	1					
ANR	3526719	CompoundStatement		48:52:1386:1386	3526514	3					
ANR	3526720	ExpressionStatement	"dprintf ( D_ALWAYS , ""Killing %s's controllee (%s)\\n"" , name_in_config_file , controllees [ num ] -> name_in_config_file )"	1118:2:29311:29434	3526514	0	True				
ANR	3526721	CallExpression	"dprintf ( D_ALWAYS , ""Killing %s's controllee (%s)\\n"" , name_in_config_file , controllees [ num ] -> name_in_config_file )"		3526514	0					
ANR	3526722	Callee	dprintf		3526514	0					
ANR	3526723	Identifier	dprintf		3526514	0					
ANR	3526724	ArgumentList	D_ALWAYS		3526514	1					
ANR	3526725	Argument	D_ALWAYS		3526514	0					
ANR	3526726	Identifier	D_ALWAYS		3526514	0					
ANR	3526727	Argument	"""Killing %s's controllee (%s)\\n"""		3526514	1					
ANR	3526728	PrimaryExpression	"""Killing %s's controllee (%s)\\n"""		3526514	0					
ANR	3526729	Argument	name_in_config_file		3526514	2					
ANR	3526730	Identifier	name_in_config_file		3526514	0					
ANR	3526731	Argument	controllees [ num ] -> name_in_config_file		3526514	3					
ANR	3526732	PtrMemberAccess	controllees [ num ] -> name_in_config_file		3526514	0					
ANR	3526733	ArrayIndexing	controllees [ num ]		3526514	0					
ANR	3526734	Identifier	controllees		3526514	0					
ANR	3526735	Identifier	num		3526514	1					
ANR	3526736	Identifier	name_in_config_file		3526514	1					
ANR	3526737	ExpressionStatement	controllees [ num ] -> StopFast ( true )	1121:2:29438:29472	3526514	1	True				
ANR	3526738	CallExpression	controllees [ num ] -> StopFast ( true )		3526514	0					
ANR	3526739	Callee	controllees [ num ] -> StopFast		3526514	0					
ANR	3526740	PtrMemberAccess	controllees [ num ] -> StopFast		3526514	0					
ANR	3526741	ArrayIndexing	controllees [ num ]		3526514	0					
ANR	3526742	Identifier	controllees		3526514	0					
ANR	3526743	Identifier	num		3526514	1					
ANR	3526744	Identifier	StopFast		3526514	1					
ANR	3526745	ArgumentList	true		3526514	1					
ANR	3526746	Argument	true		3526514	0					
ANR	3526747	Identifier	true		3526514	0					
ANR	3526748	ExpressionStatement	KillFamily ( )	1127:1:29630:29642	3526514	10	True				
ANR	3526749	CallExpression	KillFamily ( )		3526514	0					
ANR	3526750	Callee	KillFamily		3526514	0					
ANR	3526751	Identifier	KillFamily		3526514	0					
ANR	3526752	ArgumentList			3526514	1					
ANR	3526753	ExpressionStatement	was_not_responding = daemonCore -> Was_Not_Responding ( pid )	1130:1:29706:29762	3526514	11	True				
ANR	3526754	AssignmentExpression	was_not_responding = daemonCore -> Was_Not_Responding ( pid )		3526514	0		=			
ANR	3526755	Identifier	was_not_responding		3526514	0					
ANR	3526756	CallExpression	daemonCore -> Was_Not_Responding ( pid )		3526514	1					
ANR	3526757	Callee	daemonCore -> Was_Not_Responding		3526514	0					
ANR	3526758	PtrMemberAccess	daemonCore -> Was_Not_Responding		3526514	0					
ANR	3526759	Identifier	daemonCore		3526514	0					
ANR	3526760	Identifier	Was_Not_Responding		3526514	1					
ANR	3526761	ArgumentList	pid		3526514	1					
ANR	3526762	Argument	pid		3526514	0					
ANR	3526763	Identifier	pid		3526514	0					
ANR	3526764	ExpressionStatement	pid = 0	1133:1:29797:29804	3526514	12	True				
ANR	3526765	AssignmentExpression	pid = 0		3526514	0		=			
ANR	3526766	Identifier	pid		3526514	0					
ANR	3526767	PrimaryExpression	0		3526514	1					
ANR	3526768	ExpressionStatement	CancelAllTimers ( )	1134:1:29807:29824	3526514	13	True				
ANR	3526769	CallExpression	CancelAllTimers ( )		3526514	0					
ANR	3526770	Callee	CancelAllTimers		3526514	0					
ANR	3526771	Identifier	CancelAllTimers		3526514	0					
ANR	3526772	ArgumentList			3526514	1					
ANR	3526773	ExpressionStatement	stop_state = NONE	1135:1:29827:29844	3526514	14	True				
ANR	3526774	AssignmentExpression	stop_state = NONE		3526514	0		=			
ANR	3526775	Identifier	stop_state		3526514	0					
ANR	3526776	Identifier	NONE		3526514	1					
ANR	3526777	ReturnType	void		3526514	1					
ANR	3526778	Identifier	daemon :: Exited		3526514	2					
ANR	3526779	ParameterList	int status		3526514	3					
ANR	3526780	Parameter	int status	1069:16:27907:27916	3526514	0	True				
ANR	3526781	ParameterType	int		3526514	0					
ANR	3526782	Identifier	status		3526514	1					
ANR	3526783	CFGEntryNode	ENTRY		3526514		True				
ANR	3526784	CFGExitNode	EXIT		3526514		True				
ANR	3526785	Symbol	msg		3526514						
ANR	3526786	Symbol	num		3526514						
ANR	3526787	Symbol	daemonCore -> Was_Not_Responding		3526514						
ANR	3526788	Symbol	pid		3526514						
ANR	3526789	Symbol	ha_lock		3526514						
ANR	3526790	Symbol	controllees		3526514						
ANR	3526791	Symbol	WEXITSTATUS		3526514						
ANR	3526792	Symbol	name_in_config_file		3526514						
ANR	3526793	Symbol	* controllees		3526514						
ANR	3526794	Symbol	controllees [ num ] -> name_in_config_file		3526514						
ANR	3526795	Symbol	is_ha		3526514						
ANR	3526796	Symbol	had_failure		3526514						
ANR	3526797	Symbol	daemonCore		3526514						
ANR	3526798	Symbol	stop_state		3526514						
ANR	3526799	Symbol	* * num		3526514						
ANR	3526800	Symbol	NONE		3526514						
ANR	3526801	Symbol	WIFSIGNALED		3526514						
ANR	3526802	Symbol	controller		3526514						
ANR	3526803	Symbol	* * controllees		3526514						
ANR	3526804	Symbol	num_controllees		3526514						
ANR	3526805	Symbol	controller -> name_in_config_file		3526514						
ANR	3526806	Symbol	false		3526514						
ANR	3526807	Symbol	D_ALWAYS		3526514						
ANR	3526808	Symbol	d_flag		3526514						
ANR	3526809	Symbol	daemonCore -> GetExceptionString		3526514						
ANR	3526810	Symbol	on_hold		3526514						
ANR	3526811	Symbol	D_FAILURE		3526514						
ANR	3526812	Symbol	* controller		3526514						
ANR	3526813	Symbol	restarts		3526514						
ANR	3526814	Symbol	msg . Value		3526514						
ANR	3526815	Symbol	* num		3526514						
ANR	3526816	Symbol	* daemonCore		3526514						
ANR	3526817	Symbol	true		3526514						
ANR	3526818	Symbol	was_not_responding		3526514						
ANR	3526819	Symbol	status		3526514						
ANR	3526820	Symbol	DAEMON_NO_RESTART		3526514						
ANR	3526821	Function	daemon :: Obituary	1139:0:29850:32748							
ANR	3526822	FunctionDef	daemon :: Obituary (int status)		3526821	0					
ANR	3526823	CompoundStatement		1141:0:29886:32748	3526821	0					
ANR	3526824	IdentifierDeclStatement	FILE * mailer ;	1142:4:29892:29907	3526821	0	True				
ANR	3526825	IdentifierDecl	* mailer		3526821	0					
ANR	3526826	IdentifierDeclType	FILE *		3526821	0					
ANR	3526827	Identifier	mailer		3526821	1					
ANR	3526828	IfStatement	if ( restarts > 3 )		3526821	1					
ANR	3526829	Condition	restarts > 3	1149:9:30173:30184	3526821	0	True				
ANR	3526830	RelationalExpression	restarts > 3		3526821	0		>			
ANR	3526831	Identifier	restarts		3526821	0					
ANR	3526832	PrimaryExpression	3		3526821	1					
ANR	3526833	ReturnStatement	return ;	1149:24:30188:30194	3526821	1	True				
ANR	3526834	IfStatement	"if ( strcmp ( name_in_config_file , ""KBDD"" ) == 0 )"		3526821	2					
ANR	3526835	Condition	"strcmp ( name_in_config_file , ""KBDD"" ) == 0"	1152:8:30235:30275	3526821	0	True				
ANR	3526836	EqualityExpression	"strcmp ( name_in_config_file , ""KBDD"" ) == 0"		3526821	0		==			
ANR	3526837	CallExpression	"strcmp ( name_in_config_file , ""KBDD"" )"		3526821	0					
ANR	3526838	Callee	strcmp		3526821	0					
ANR	3526839	Identifier	strcmp		3526821	0					
ANR	3526840	ArgumentList	name_in_config_file		3526821	1					
ANR	3526841	Argument	name_in_config_file		3526821	0					
ANR	3526842	Identifier	name_in_config_file		3526821	0					
ANR	3526843	Argument	"""KBDD"""		3526821	1					
ANR	3526844	PrimaryExpression	"""KBDD"""		3526821	0					
ANR	3526845	PrimaryExpression	0		3526821	1					
ANR	3526846	CompoundStatement		12:52:392:392	3526821	1					
ANR	3526847	ReturnStatement	return ;	1153:8:30289:30295	3526821	0	True				
ANR	3526848	IfStatement	if ( ( WIFSIGNALED ( status ) ) && ( WTERMSIG ( status ) == SIGKILL ) && ! was_not_responding )		3526821	3					
ANR	3526849	Condition	( WIFSIGNALED ( status ) ) && ( WTERMSIG ( status ) == SIGKILL ) && ! was_not_responding	1163:6:30588:30667	3526821	0	True				
ANR	3526850	AndExpression	( WIFSIGNALED ( status ) ) && ( WTERMSIG ( status ) == SIGKILL ) && ! was_not_responding		3526821	0		&&			
ANR	3526851	CallExpression	WIFSIGNALED ( status )		3526821	0					
ANR	3526852	Callee	WIFSIGNALED		3526821	0					
ANR	3526853	Identifier	WIFSIGNALED		3526821	0					
ANR	3526854	ArgumentList	status		3526821	1					
ANR	3526855	Argument	status		3526821	0					
ANR	3526856	Identifier	status		3526821	0					
ANR	3526857	AndExpression	( WTERMSIG ( status ) == SIGKILL ) && ! was_not_responding		3526821	1		&&			
ANR	3526858	EqualityExpression	WTERMSIG ( status ) == SIGKILL		3526821	0		==			
ANR	3526859	CallExpression	WTERMSIG ( status )		3526821	0					
ANR	3526860	Callee	WTERMSIG		3526821	0					
ANR	3526861	Identifier	WTERMSIG		3526821	0					
ANR	3526862	ArgumentList	status		3526821	1					
ANR	3526863	Argument	status		3526821	0					
ANR	3526864	Identifier	status		3526821	0					
ANR	3526865	Identifier	SIGKILL		3526821	1					
ANR	3526866	UnaryOperationExpression	! was_not_responding		3526821	1					
ANR	3526867	UnaryOperator	!		3526821	0					
ANR	3526868	Identifier	was_not_responding		3526821	1					
ANR	3526869	CompoundStatement		24:26:783:783	3526821	1					
ANR	3526870	ReturnStatement	return ;	1165:2:30674:30680	3526821	0	True				
ANR	3526871	IfStatement	if ( ( WIFEXITED ( status ) ) && ( ( WEXITSTATUS ( status ) == 0 ) || ( WEXITSTATUS ( status ) == JOB_EXEC_FAILED ) || ( WEXITSTATUS ( status ) == DAEMON_NO_RESTART ) ) )		3526821	4					
ANR	3526872	Condition	( WIFEXITED ( status ) ) && ( ( WEXITSTATUS ( status ) == 0 ) || ( WEXITSTATUS ( status ) == JOB_EXEC_FAILED ) || ( WEXITSTATUS ( status ) == DAEMON_NO_RESTART ) )	1173:6:30913:31071	3526821	0	True				
ANR	3526873	AndExpression	( WIFEXITED ( status ) ) && ( ( WEXITSTATUS ( status ) == 0 ) || ( WEXITSTATUS ( status ) == JOB_EXEC_FAILED ) || ( WEXITSTATUS ( status ) == DAEMON_NO_RESTART ) )		3526821	0		&&			
ANR	3526874	CallExpression	WIFEXITED ( status )		3526821	0					
ANR	3526875	Callee	WIFEXITED		3526821	0					
ANR	3526876	Identifier	WIFEXITED		3526821	0					
ANR	3526877	ArgumentList	status		3526821	1					
ANR	3526878	Argument	status		3526821	0					
ANR	3526879	Identifier	status		3526821	0					
ANR	3526880	OrExpression	( WEXITSTATUS ( status ) == 0 ) || ( WEXITSTATUS ( status ) == JOB_EXEC_FAILED ) || ( WEXITSTATUS ( status ) == DAEMON_NO_RESTART )		3526821	1		||			
ANR	3526881	EqualityExpression	WEXITSTATUS ( status ) == 0		3526821	0		==			
ANR	3526882	CallExpression	WEXITSTATUS ( status )		3526821	0					
ANR	3526883	Callee	WEXITSTATUS		3526821	0					
ANR	3526884	Identifier	WEXITSTATUS		3526821	0					
ANR	3526885	ArgumentList	status		3526821	1					
ANR	3526886	Argument	status		3526821	0					
ANR	3526887	Identifier	status		3526821	0					
ANR	3526888	PrimaryExpression	0		3526821	1					
ANR	3526889	OrExpression	( WEXITSTATUS ( status ) == JOB_EXEC_FAILED ) || ( WEXITSTATUS ( status ) == DAEMON_NO_RESTART )		3526821	1		||			
ANR	3526890	EqualityExpression	WEXITSTATUS ( status ) == JOB_EXEC_FAILED		3526821	0		==			
ANR	3526891	CallExpression	WEXITSTATUS ( status )		3526821	0					
ANR	3526892	Callee	WEXITSTATUS		3526821	0					
ANR	3526893	Identifier	WEXITSTATUS		3526821	0					
ANR	3526894	ArgumentList	status		3526821	1					
ANR	3526895	Argument	status		3526821	0					
ANR	3526896	Identifier	status		3526821	0					
ANR	3526897	Identifier	JOB_EXEC_FAILED		3526821	1					
ANR	3526898	EqualityExpression	WEXITSTATUS ( status ) == DAEMON_NO_RESTART		3526821	1		==			
ANR	3526899	CallExpression	WEXITSTATUS ( status )		3526821	0					
ANR	3526900	Callee	WEXITSTATUS		3526821	0					
ANR	3526901	Identifier	WEXITSTATUS		3526821	0					
ANR	3526902	ArgumentList	status		3526821	1					
ANR	3526903	Argument	status		3526821	0					
ANR	3526904	Identifier	status		3526821	0					
ANR	3526905	Identifier	DAEMON_NO_RESTART		3526821	1					
ANR	3526906	CompoundStatement		36:52:1188:1188	3526821	1					
ANR	3526907	ReturnStatement	return ;	1177:2:31079:31085	3526821	0	True				
ANR	3526908	ExpressionStatement	"dprintf ( D_ALWAYS , ""Sending obituary for \\""%s\\""\\n"" , process_name )"	1180:4:31095:31163	3526821	5	True				
ANR	3526909	CallExpression	"dprintf ( D_ALWAYS , ""Sending obituary for \\""%s\\""\\n"" , process_name )"		3526821	0					
ANR	3526910	Callee	dprintf		3526821	0					
ANR	3526911	Identifier	dprintf		3526821	0					
ANR	3526912	ArgumentList	D_ALWAYS		3526821	1					
ANR	3526913	Argument	D_ALWAYS		3526821	0					
ANR	3526914	Identifier	D_ALWAYS		3526821	0					
ANR	3526915	Argument	"""Sending obituary for \\""%s\\""\\n"""		3526821	1					
ANR	3526916	PrimaryExpression	"""Sending obituary for \\""%s\\""\\n"""		3526821	0					
ANR	3526917	Argument	process_name		3526821	2					
ANR	3526918	Identifier	process_name		3526821	0					
ANR	3526919	IdentifierDeclStatement	char buf [ 1000 ] ;	1183:4:31170:31184	3526821	6	True				
ANR	3526920	IdentifierDecl	buf [ 1000 ]		3526821	0					
ANR	3526921	IdentifierDeclType	char [ 1000 ]		3526821	0					
ANR	3526922	Identifier	buf		3526821	1					
ANR	3526923	PrimaryExpression	1000		3526821	2					
ANR	3526924	IdentifierDeclStatement	MyString email_subject ;	1185:1:31188:31210	3526821	7	True				
ANR	3526925	IdentifierDecl	email_subject		3526821	0					
ANR	3526926	IdentifierDeclType	MyString		3526821	0					
ANR	3526927	Identifier	email_subject		3526821	1					
ANR	3526928	ExpressionStatement	"email_subject . sprintf ( ""Problem %s: %s "" , get_local_fqdn ( ) . Value ( ) , condor_basename ( process_name ) )"	1186:1:31213:31319	3526821	8	True				
ANR	3526929	CallExpression	"email_subject . sprintf ( ""Problem %s: %s "" , get_local_fqdn ( ) . Value ( ) , condor_basename ( process_name ) )"		3526821	0					
ANR	3526930	Callee	email_subject . sprintf		3526821	0					
ANR	3526931	MemberAccess	email_subject . sprintf		3526821	0					
ANR	3526932	Identifier	email_subject		3526821	0					
ANR	3526933	Identifier	sprintf		3526821	1					
ANR	3526934	ArgumentList	"""Problem %s: %s """		3526821	1					
ANR	3526935	Argument	"""Problem %s: %s """		3526821	0					
ANR	3526936	PrimaryExpression	"""Problem %s: %s """		3526821	0					
ANR	3526937	Argument	get_local_fqdn ( ) . Value ( )		3526821	1					
ANR	3526938	CallExpression	get_local_fqdn ( ) . Value ( )		3526821	0					
ANR	3526939	Callee	get_local_fqdn ( ) . Value		3526821	0					
ANR	3526940	MemberAccess	get_local_fqdn ( ) . Value		3526821	0					
ANR	3526941	CallExpression	get_local_fqdn ( )		3526821	0					
ANR	3526942	Callee	get_local_fqdn		3526821	0					
ANR	3526943	Identifier	get_local_fqdn		3526821	0					
ANR	3526944	ArgumentList			3526821	1					
ANR	3526945	Identifier	Value		3526821	1					
ANR	3526946	ArgumentList			3526821	1					
ANR	3526947	Argument	condor_basename ( process_name )		3526821	2					
ANR	3526948	CallExpression	condor_basename ( process_name )		3526821	0					
ANR	3526949	Callee	condor_basename		3526821	0					
ANR	3526950	Identifier	condor_basename		3526821	0					
ANR	3526951	ArgumentList	process_name		3526821	1					
ANR	3526952	Argument	process_name		3526821	0					
ANR	3526953	Identifier	process_name		3526821	0					
ANR	3526954	IfStatement	if ( was_not_responding )		3526821	9					
ANR	3526955	Condition	was_not_responding	1188:6:31327:31344	3526821	0	True				
ANR	3526956	Identifier	was_not_responding		3526821	0					
ANR	3526957	CompoundStatement		48:27:1461:1461	3526821	1					
ANR	3526958	ExpressionStatement	"email_subject += ""killed (unresponsive)"""	1189:2:31352:31392	3526821	0	True				
ANR	3526959	AssignmentExpression	"email_subject += ""killed (unresponsive)"""		3526821	0		+=			
ANR	3526960	Identifier	email_subject		3526821	0					
ANR	3526961	PrimaryExpression	"""killed (unresponsive)"""		3526821	1					
ANR	3526962	ElseStatement	else		3526821	0					
ANR	3526963	CompoundStatement		51:2:1519:1531	3526821	0					
ANR	3526964	IdentifierDeclStatement	MyString fmt ;	1191:2:31406:31418	3526821	0	True				
ANR	3526965	IdentifierDecl	fmt		3526821	0					
ANR	3526966	IdentifierDeclType	MyString		3526821	0					
ANR	3526967	Identifier	fmt		3526821	1					
ANR	3526968	IfStatement	if ( WIFSIGNALED ( status ) )		3526821	1					
ANR	3526969	Condition	WIFSIGNALED ( status )	1192:6:31426:31444	3526821	0	True				
ANR	3526970	CallExpression	WIFSIGNALED ( status )		3526821	0					
ANR	3526971	Callee	WIFSIGNALED		3526821	0					
ANR	3526972	Identifier	WIFSIGNALED		3526821	0					
ANR	3526973	ArgumentList	status		3526821	1					
ANR	3526974	Argument	status		3526821	0					
ANR	3526975	Identifier	status		3526821	0					
ANR	3526976	CompoundStatement		52:28:1561:1561	3526821	1					
ANR	3526977	ExpressionStatement	"fmt . sprintf ( ""died (%d)"" , WTERMSIG ( status ) )"	1193:3:31453:31495	3526821	0	True				
ANR	3526978	CallExpression	"fmt . sprintf ( ""died (%d)"" , WTERMSIG ( status ) )"		3526821	0					
ANR	3526979	Callee	fmt . sprintf		3526821	0					
ANR	3526980	MemberAccess	fmt . sprintf		3526821	0					
ANR	3526981	Identifier	fmt		3526821	0					
ANR	3526982	Identifier	sprintf		3526821	1					
ANR	3526983	ArgumentList	"""died (%d)"""		3526821	1					
ANR	3526984	Argument	"""died (%d)"""		3526821	0					
ANR	3526985	PrimaryExpression	"""died (%d)"""		3526821	0					
ANR	3526986	Argument	WTERMSIG ( status )		3526821	1					
ANR	3526987	CallExpression	WTERMSIG ( status )		3526821	0					
ANR	3526988	Callee	WTERMSIG		3526821	0					
ANR	3526989	Identifier	WTERMSIG		3526821	0					
ANR	3526990	ArgumentList	status		3526821	1					
ANR	3526991	Argument	status		3526821	0					
ANR	3526992	Identifier	status		3526821	0					
ANR	3526993	ElseStatement	else		3526821	0					
ANR	3526994	CompoundStatement		54:9:1619:1619	3526821	0					
ANR	3526995	ExpressionStatement	"fmt . sprintf ( ""exited (%d)"" , WEXITSTATUS ( status ) )"	1195:3:31511:31558	3526821	0	True				
ANR	3526996	CallExpression	"fmt . sprintf ( ""exited (%d)"" , WEXITSTATUS ( status ) )"		3526821	0					
ANR	3526997	Callee	fmt . sprintf		3526821	0					
ANR	3526998	MemberAccess	fmt . sprintf		3526821	0					
ANR	3526999	Identifier	fmt		3526821	0					
ANR	3527000	Identifier	sprintf		3526821	1					
ANR	3527001	ArgumentList	"""exited (%d)"""		3526821	1					
ANR	3527002	Argument	"""exited (%d)"""		3526821	0					
ANR	3527003	PrimaryExpression	"""exited (%d)"""		3526821	0					
ANR	3527004	Argument	WEXITSTATUS ( status )		3526821	1					
ANR	3527005	CallExpression	WEXITSTATUS ( status )		3526821	0					
ANR	3527006	Callee	WEXITSTATUS		3526821	0					
ANR	3527007	Identifier	WEXITSTATUS		3526821	0					
ANR	3527008	ArgumentList	status		3526821	1					
ANR	3527009	Argument	status		3526821	0					
ANR	3527010	Identifier	status		3526821	0					
ANR	3527011	ExpressionStatement	email_subject += fmt	1197:2:31566:31586	3526821	2	True				
ANR	3527012	AssignmentExpression	email_subject += fmt		3526821	0		+=			
ANR	3527013	Identifier	email_subject		3526821	0					
ANR	3527014	Identifier	fmt		3526821	1					
ANR	3527015	ExpressionStatement	"sprintf ( buf , ""%s_ADMIN_EMAIL"" , name_in_config_file )"	1200:4:31596:31649	3526821	10	True				
ANR	3527016	CallExpression	"sprintf ( buf , ""%s_ADMIN_EMAIL"" , name_in_config_file )"		3526821	0					
ANR	3527017	Callee	sprintf		3526821	0					
ANR	3527018	Identifier	sprintf		3526821	0					
ANR	3527019	ArgumentList	buf		3526821	1					
ANR	3527020	Argument	buf		3526821	0					
ANR	3527021	Identifier	buf		3526821	0					
ANR	3527022	Argument	"""%s_ADMIN_EMAIL"""		3526821	1					
ANR	3527023	PrimaryExpression	"""%s_ADMIN_EMAIL"""		3526821	0					
ANR	3527024	Argument	name_in_config_file		3526821	2					
ANR	3527025	Identifier	name_in_config_file		3526821	0					
ANR	3527026	IdentifierDeclStatement	char * address = param ( buf ) ;	1201:4:31655:31681	3526821	11	True				
ANR	3527027	IdentifierDecl	* address = param ( buf )		3526821	0					
ANR	3527028	IdentifierDeclType	char *		3526821	0					
ANR	3527029	Identifier	address		3526821	1					
ANR	3527030	AssignmentExpression	* address = param ( buf )		3526821	2		=			
ANR	3527031	Identifier	address		3526821	0					
ANR	3527032	CallExpression	param ( buf )		3526821	1					
ANR	3527033	Callee	param		3526821	0					
ANR	3527034	Identifier	param		3526821	0					
ANR	3527035	ArgumentList	buf		3526821	1					
ANR	3527036	Argument	buf		3526821	0					
ANR	3527037	Identifier	buf		3526821	0					
ANR	3527038	IfStatement	if ( address )		3526821	12					
ANR	3527039	Condition	address	1202:7:31690:31696	3526821	0	True				
ANR	3527040	Identifier	address		3526821	0					
ANR	3527041	CompoundStatement		62:16:1812:1812	3526821	1					
ANR	3527042	ExpressionStatement	"mailer = email_open ( address , email_subject . Value ( ) )"	1203:8:31709:31760	3526821	0	True				
ANR	3527043	AssignmentExpression	"mailer = email_open ( address , email_subject . Value ( ) )"		3526821	0		=			
ANR	3527044	Identifier	mailer		3526821	0					
ANR	3527045	CallExpression	"email_open ( address , email_subject . Value ( ) )"		3526821	1					
ANR	3527046	Callee	email_open		3526821	0					
ANR	3527047	Identifier	email_open		3526821	0					
ANR	3527048	ArgumentList	address		3526821	1					
ANR	3527049	Argument	address		3526821	0					
ANR	3527050	Identifier	address		3526821	0					
ANR	3527051	Argument	email_subject . Value ( )		3526821	1					
ANR	3527052	CallExpression	email_subject . Value ( )		3526821	0					
ANR	3527053	Callee	email_subject . Value		3526821	0					
ANR	3527054	MemberAccess	email_subject . Value		3526821	0					
ANR	3527055	Identifier	email_subject		3526821	0					
ANR	3527056	Identifier	Value		3526821	1					
ANR	3527057	ArgumentList			3526821	1					
ANR	3527058	ExpressionStatement	free ( address )	1204:8:31770:31783	3526821	1	True				
ANR	3527059	CallExpression	free ( address )		3526821	0					
ANR	3527060	Callee	free		3526821	0					
ANR	3527061	Identifier	free		3526821	0					
ANR	3527062	ArgumentList	address		3526821	1					
ANR	3527063	Argument	address		3526821	0					
ANR	3527064	Identifier	address		3526821	0					
ANR	3527065	ElseStatement	else		3526821	0					
ANR	3527066	CompoundStatement		65:11:1909:1909	3526821	0					
ANR	3527067	ExpressionStatement	mailer = email_admin_open ( email_subject . Value ( ) )	1206:8:31806:31854	3526821	0	True				
ANR	3527068	AssignmentExpression	mailer = email_admin_open ( email_subject . Value ( ) )		3526821	0		=			
ANR	3527069	Identifier	mailer		3526821	0					
ANR	3527070	CallExpression	email_admin_open ( email_subject . Value ( ) )		3526821	1					
ANR	3527071	Callee	email_admin_open		3526821	0					
ANR	3527072	Identifier	email_admin_open		3526821	0					
ANR	3527073	ArgumentList	email_subject . Value ( )		3526821	1					
ANR	3527074	Argument	email_subject . Value ( )		3526821	0					
ANR	3527075	CallExpression	email_subject . Value ( )		3526821	0					
ANR	3527076	Callee	email_subject . Value		3526821	0					
ANR	3527077	MemberAccess	email_subject . Value		3526821	0					
ANR	3527078	Identifier	email_subject		3526821	0					
ANR	3527079	Identifier	Value		3526821	1					
ANR	3527080	ArgumentList			3526821	1					
ANR	3527081	IfStatement	if ( mailer == NULL )		3526821	13					
ANR	3527082	Condition	mailer == NULL	1209:8:31871:31884	3526821	0	True				
ANR	3527083	EqualityExpression	mailer == NULL		3526821	0		==			
ANR	3527084	Identifier	mailer		3526821	0					
ANR	3527085	Identifier	NULL		3526821	1					
ANR	3527086	CompoundStatement		69:25:2001:2001	3526821	1					
ANR	3527087	ReturnStatement	return ;	1210:8:31898:31904	3526821	0	True				
ANR	3527088	ExpressionStatement	"fprintf ( mailer , ""\\""%s\\"" on \\""%s\\"" "" , process_name , get_local_fqdn ( ) . Value ( ) )"	1213:1:31914:31996	3526821	14	True				
ANR	3527089	CallExpression	"fprintf ( mailer , ""\\""%s\\"" on \\""%s\\"" "" , process_name , get_local_fqdn ( ) . Value ( ) )"		3526821	0					
ANR	3527090	Callee	fprintf		3526821	0					
ANR	3527091	Identifier	fprintf		3526821	0					
ANR	3527092	ArgumentList	mailer		3526821	1					
ANR	3527093	Argument	mailer		3526821	0					
ANR	3527094	Identifier	mailer		3526821	0					
ANR	3527095	Argument	"""\\""%s\\"" on \\""%s\\"" """		3526821	1					
ANR	3527096	PrimaryExpression	"""\\""%s\\"" on \\""%s\\"" """		3526821	0					
ANR	3527097	Argument	process_name		3526821	2					
ANR	3527098	Identifier	process_name		3526821	0					
ANR	3527099	Argument	get_local_fqdn ( ) . Value ( )		3526821	3					
ANR	3527100	CallExpression	get_local_fqdn ( ) . Value ( )		3526821	0					
ANR	3527101	Callee	get_local_fqdn ( ) . Value		3526821	0					
ANR	3527102	MemberAccess	get_local_fqdn ( ) . Value		3526821	0					
ANR	3527103	CallExpression	get_local_fqdn ( )		3526821	0					
ANR	3527104	Callee	get_local_fqdn		3526821	0					
ANR	3527105	Identifier	get_local_fqdn		3526821	0					
ANR	3527106	ArgumentList			3526821	1					
ANR	3527107	Identifier	Value		3526821	1					
ANR	3527108	ArgumentList			3526821	1					
ANR	3527109	IfStatement	if ( was_not_responding )		3526821	15					
ANR	3527110	Condition	was_not_responding	1216:6:32005:32022	3526821	0	True				
ANR	3527111	Identifier	was_not_responding		3526821	0					
ANR	3527112	CompoundStatement		76:27:2139:2139	3526821	1					
ANR	3527113	ExpressionStatement	"fprintf ( mailer , ""was killed because\\nit was no longer responding.\\n"" )"	1217:2:32030:32100	3526821	0	True				
ANR	3527114	CallExpression	"fprintf ( mailer , ""was killed because\\nit was no longer responding.\\n"" )"		3526821	0					
ANR	3527115	Callee	fprintf		3526821	0					
ANR	3527116	Identifier	fprintf		3526821	0					
ANR	3527117	ArgumentList	mailer		3526821	1					
ANR	3527118	Argument	mailer		3526821	0					
ANR	3527119	Identifier	mailer		3526821	0					
ANR	3527120	Argument	"""was killed because\\nit was no longer responding.\\n"""		3526821	1					
ANR	3527121	PrimaryExpression	"""was killed because\\nit was no longer responding.\\n"""		3526821	0					
ANR	3527122	ElseStatement	else		3526821	0					
ANR	3527123	CompoundStatement		78:8:2223:2223	3526821	0					
ANR	3527124	IfStatement	if ( WIFSIGNALED ( status ) )		3526821	0					
ANR	3527125	Condition	WIFSIGNALED ( status )	1219:6:32118:32136	3526821	0	True				
ANR	3527126	CallExpression	WIFSIGNALED ( status )		3526821	0					
ANR	3527127	Callee	WIFSIGNALED		3526821	0					
ANR	3527128	Identifier	WIFSIGNALED		3526821	0					
ANR	3527129	ArgumentList	status		3526821	1					
ANR	3527130	Argument	status		3526821	0					
ANR	3527131	Identifier	status		3526821	0					
ANR	3527132	CompoundStatement		79:28:2253:2253	3526821	1					
ANR	3527133	ExpressionStatement	"fprintf ( mailer , ""died due to %s.\\n"" , daemonCore -> GetExceptionString ( status ) )"	1220:3:32145:32227	3526821	0	True				
ANR	3527134	CallExpression	"fprintf ( mailer , ""died due to %s.\\n"" , daemonCore -> GetExceptionString ( status ) )"		3526821	0					
ANR	3527135	Callee	fprintf		3526821	0					
ANR	3527136	Identifier	fprintf		3526821	0					
ANR	3527137	ArgumentList	mailer		3526821	1					
ANR	3527138	Argument	mailer		3526821	0					
ANR	3527139	Identifier	mailer		3526821	0					
ANR	3527140	Argument	"""died due to %s.\\n"""		3526821	1					
ANR	3527141	PrimaryExpression	"""died due to %s.\\n"""		3526821	0					
ANR	3527142	Argument	daemonCore -> GetExceptionString ( status )		3526821	2					
ANR	3527143	CallExpression	daemonCore -> GetExceptionString ( status )		3526821	0					
ANR	3527144	Callee	daemonCore -> GetExceptionString		3526821	0					
ANR	3527145	PtrMemberAccess	daemonCore -> GetExceptionString		3526821	0					
ANR	3527146	Identifier	daemonCore		3526821	0					
ANR	3527147	Identifier	GetExceptionString		3526821	1					
ANR	3527148	ArgumentList	status		3526821	1					
ANR	3527149	Argument	status		3526821	0					
ANR	3527150	Identifier	status		3526821	0					
ANR	3527151	ElseStatement	else		3526821	0					
ANR	3527152	CompoundStatement		82:9:2351:2351	3526821	0					
ANR	3527153	ExpressionStatement	"fprintf ( mailer , ""exited with status %d.\\n"" , WEXITSTATUS ( status ) )"	1223:3:32243:32307	3526821	0	True				
ANR	3527154	CallExpression	"fprintf ( mailer , ""exited with status %d.\\n"" , WEXITSTATUS ( status ) )"		3526821	0					
ANR	3527155	Callee	fprintf		3526821	0					
ANR	3527156	Identifier	fprintf		3526821	0					
ANR	3527157	ArgumentList	mailer		3526821	1					
ANR	3527158	Argument	mailer		3526821	0					
ANR	3527159	Identifier	mailer		3526821	0					
ANR	3527160	Argument	"""exited with status %d.\\n"""		3526821	1					
ANR	3527161	PrimaryExpression	"""exited with status %d.\\n"""		3526821	0					
ANR	3527162	Argument	WEXITSTATUS ( status )		3526821	2					
ANR	3527163	CallExpression	WEXITSTATUS ( status )		3526821	0					
ANR	3527164	Callee	WEXITSTATUS		3526821	0					
ANR	3527165	Identifier	WEXITSTATUS		3526821	0					
ANR	3527166	ArgumentList	status		3526821	1					
ANR	3527167	Argument	status		3526821	0					
ANR	3527168	Identifier	status		3526821	0					
ANR	3527169	ExpressionStatement	"fprintf ( mailer , ""Condor will automatically restart this process in %d seconds.\\n"" , NextStart ( ) )"	1227:1:32318:32419	3526821	16	True				
ANR	3527170	CallExpression	"fprintf ( mailer , ""Condor will automatically restart this process in %d seconds.\\n"" , NextStart ( ) )"		3526821	0					
ANR	3527171	Callee	fprintf		3526821	0					
ANR	3527172	Identifier	fprintf		3526821	0					
ANR	3527173	ArgumentList	mailer		3526821	1					
ANR	3527174	Argument	mailer		3526821	0					
ANR	3527175	Identifier	mailer		3526821	0					
ANR	3527176	Argument	"""Condor will automatically restart this process in %d seconds.\\n"""		3526821	1					
ANR	3527177	PrimaryExpression	"""Condor will automatically restart this process in %d seconds.\\n"""		3526821	0					
ANR	3527178	Argument	NextStart ( )		3526821	2					
ANR	3527179	CallExpression	NextStart ( )		3526821	0					
ANR	3527180	Callee	NextStart		3526821	0					
ANR	3527181	Identifier	NextStart		3526821	0					
ANR	3527182	ArgumentList			3526821	1					
ANR	3527183	IfStatement	if ( log_name )		3526821	17					
ANR	3527184	Condition	log_name	1232:5:32428:32435	3526821	0	True				
ANR	3527185	Identifier	log_name		3526821	0					
ANR	3527186	CompoundStatement		92:16:2552:2552	3526821	1					
ANR	3527187	ExpressionStatement	"email_asciifile_tail ( mailer , log_name , Lines )"	1233:2:32443:32490	3526821	0	True				
ANR	3527188	CallExpression	"email_asciifile_tail ( mailer , log_name , Lines )"		3526821	0					
ANR	3527189	Callee	email_asciifile_tail		3526821	0					
ANR	3527190	Identifier	email_asciifile_tail		3526821	0					
ANR	3527191	ArgumentList	mailer		3526821	1					
ANR	3527192	Argument	mailer		3526821	0					
ANR	3527193	Identifier	mailer		3526821	0					
ANR	3527194	Argument	log_name		3526821	1					
ANR	3527195	Identifier	log_name		3526821	0					
ANR	3527196	Argument	Lines		3526821	2					
ANR	3527197	Identifier	Lines		3526821	0					
ANR	3527198	IfStatement	if ( WIFSIGNALED ( status ) )		3526821	18					
ANR	3527199	Condition	WIFSIGNALED ( status )	1238:6:32644:32662	3526821	0	True				
ANR	3527200	CallExpression	WIFSIGNALED ( status )		3526821	0					
ANR	3527201	Callee	WIFSIGNALED		3526821	0					
ANR	3527202	Identifier	WIFSIGNALED		3526821	0					
ANR	3527203	ArgumentList	status		3526821	1					
ANR	3527204	Argument	status		3526821	0					
ANR	3527205	Identifier	status		3526821	0					
ANR	3527206	CompoundStatement		98:28:2779:2779	3526821	1					
ANR	3527207	ExpressionStatement	"email_corefile_tail ( mailer , name_in_config_file )"	1239:2:32670:32720	3526821	0	True				
ANR	3527208	CallExpression	"email_corefile_tail ( mailer , name_in_config_file )"		3526821	0					
ANR	3527209	Callee	email_corefile_tail		3526821	0					
ANR	3527210	Identifier	email_corefile_tail		3526821	0					
ANR	3527211	ArgumentList	mailer		3526821	1					
ANR	3527212	Argument	mailer		3526821	0					
ANR	3527213	Identifier	mailer		3526821	0					
ANR	3527214	Argument	name_in_config_file		3526821	1					
ANR	3527215	Identifier	name_in_config_file		3526821	0					
ANR	3527216	ExpressionStatement	email_close ( mailer )	1242:1:32727:32746	3526821	19	True				
ANR	3527217	CallExpression	email_close ( mailer )		3526821	0					
ANR	3527218	Callee	email_close		3526821	0					
ANR	3527219	Identifier	email_close		3526821	0					
ANR	3527220	ArgumentList	mailer		3526821	1					
ANR	3527221	Argument	mailer		3526821	0					
ANR	3527222	Identifier	mailer		3526821	0					
ANR	3527223	ReturnType	void		3526821	1					
ANR	3527224	Identifier	daemon :: Obituary		3526821	2					
ANR	3527225	ParameterList	int status		3526821	3					
ANR	3527226	Parameter	int status	1140:18:29873:29882	3526821	0	True				
ANR	3527227	ParameterType	int		3526821	0					
ANR	3527228	Identifier	status		3526821	1					
ANR	3527229	CFGEntryNode	ENTRY		3526821		True				
ANR	3527230	CFGExitNode	EXIT		3526821		True				
ANR	3527231	Symbol	email_subject . Value		3526821						
ANR	3527232	Symbol	WEXITSTATUS		3526821						
ANR	3527233	Symbol	get_local_fqdn		3526821						
ANR	3527234	Symbol	fmt		3526821						
ANR	3527235	Symbol	name_in_config_file		3526821						
ANR	3527236	Symbol	SIGKILL		3526821						
ANR	3527237	Symbol	WIFEXITED		3526821						
ANR	3527238	Symbol	get_local_fqdn ( ) . Value		3526821						
ANR	3527239	Symbol	param		3526821						
ANR	3527240	Symbol	process_name		3526821						
ANR	3527241	Symbol	daemonCore		3526821						
ANR	3527242	Symbol	NextStart		3526821						
ANR	3527243	Symbol	email_open		3526821						
ANR	3527244	Symbol	strcmp		3526821						
ANR	3527245	Symbol	WIFSIGNALED		3526821						
ANR	3527246	Symbol	address		3526821						
ANR	3527247	Symbol	NULL		3526821						
ANR	3527248	Symbol	log_name		3526821						
ANR	3527249	Symbol	JOB_EXEC_FAILED		3526821						
ANR	3527250	Symbol	D_ALWAYS		3526821						
ANR	3527251	Symbol	daemonCore -> GetExceptionString		3526821						
ANR	3527252	Symbol	mailer		3526821						
ANR	3527253	Symbol	email_admin_open		3526821						
ANR	3527254	Symbol	restarts		3526821						
ANR	3527255	Symbol	buf		3526821						
ANR	3527256	Symbol	* daemonCore		3526821						
ANR	3527257	Symbol	was_not_responding		3526821						
ANR	3527258	Symbol	WTERMSIG		3526821						
ANR	3527259	Symbol	email_subject		3526821						
ANR	3527260	Symbol	condor_basename		3526821						
ANR	3527261	Symbol	status		3526821						
ANR	3527262	Symbol	DAEMON_NO_RESTART		3526821						
ANR	3527263	Symbol	Lines		3526821						
ANR	3527264	Function	daemon :: CancelAllTimers	1246:0:32752:33251							
ANR	3527265	FunctionDef	daemon :: CancelAllTimers ()		3527264	0					
ANR	3527266	CompoundStatement		1248:0:32783:33251	3527264	0					
ANR	3527267	IfStatement	if ( stop_tid != - 1 )		3527264	0					
ANR	3527268	Condition	stop_tid != - 1	1249:5:32790:32804	3527264	0	True				
ANR	3527269	EqualityExpression	stop_tid != - 1		3527264	0		!=			
ANR	3527270	Identifier	stop_tid		3527264	0					
ANR	3527271	UnaryOperationExpression	- 1		3527264	1					
ANR	3527272	UnaryOperator	-		3527264	0					
ANR	3527273	PrimaryExpression	1		3527264	1					
ANR	3527274	CompoundStatement		2:23:24:24	3527264	1					
ANR	3527275	ExpressionStatement	daemonCore -> Cancel_Timer ( stop_tid )	1250:2:32812:32848	3527264	0	True				
ANR	3527276	CallExpression	daemonCore -> Cancel_Timer ( stop_tid )		3527264	0					
ANR	3527277	Callee	daemonCore -> Cancel_Timer		3527264	0					
ANR	3527278	PtrMemberAccess	daemonCore -> Cancel_Timer		3527264	0					
ANR	3527279	Identifier	daemonCore		3527264	0					
ANR	3527280	Identifier	Cancel_Timer		3527264	1					
ANR	3527281	ArgumentList	stop_tid		3527264	1					
ANR	3527282	Argument	stop_tid		3527264	0					
ANR	3527283	Identifier	stop_tid		3527264	0					
ANR	3527284	ExpressionStatement	stop_tid = - 1	1251:2:32852:32865	3527264	1	True				
ANR	3527285	AssignmentExpression	stop_tid = - 1		3527264	0		=			
ANR	3527286	Identifier	stop_tid		3527264	0					
ANR	3527287	UnaryOperationExpression	- 1		3527264	1					
ANR	3527288	UnaryOperator	-		3527264	0					
ANR	3527289	PrimaryExpression	1		3527264	1					
ANR	3527290	IfStatement	if ( stop_fast_tid != - 1 )		3527264	1					
ANR	3527291	Condition	stop_fast_tid != - 1	1253:5:32875:32894	3527264	0	True				
ANR	3527292	EqualityExpression	stop_fast_tid != - 1		3527264	0		!=			
ANR	3527293	Identifier	stop_fast_tid		3527264	0					
ANR	3527294	UnaryOperationExpression	- 1		3527264	1					
ANR	3527295	UnaryOperator	-		3527264	0					
ANR	3527296	PrimaryExpression	1		3527264	1					
ANR	3527297	CompoundStatement		6:28:114:114	3527264	1					
ANR	3527298	ExpressionStatement	daemonCore -> Cancel_Timer ( stop_fast_tid )	1254:2:32902:32943	3527264	0	True				
ANR	3527299	CallExpression	daemonCore -> Cancel_Timer ( stop_fast_tid )		3527264	0					
ANR	3527300	Callee	daemonCore -> Cancel_Timer		3527264	0					
ANR	3527301	PtrMemberAccess	daemonCore -> Cancel_Timer		3527264	0					
ANR	3527302	Identifier	daemonCore		3527264	0					
ANR	3527303	Identifier	Cancel_Timer		3527264	1					
ANR	3527304	ArgumentList	stop_fast_tid		3527264	1					
ANR	3527305	Argument	stop_fast_tid		3527264	0					
ANR	3527306	Identifier	stop_fast_tid		3527264	0					
ANR	3527307	ExpressionStatement	stop_fast_tid = - 1	1255:2:32947:32965	3527264	1	True				
ANR	3527308	AssignmentExpression	stop_fast_tid = - 1		3527264	0		=			
ANR	3527309	Identifier	stop_fast_tid		3527264	0					
ANR	3527310	UnaryOperationExpression	- 1		3527264	1					
ANR	3527311	UnaryOperator	-		3527264	0					
ANR	3527312	PrimaryExpression	1		3527264	1					
ANR	3527313	IfStatement	if ( hard_kill_tid != - 1 )		3527264	2					
ANR	3527314	Condition	hard_kill_tid != - 1	1257:5:32975:32994	3527264	0	True				
ANR	3527315	EqualityExpression	hard_kill_tid != - 1		3527264	0		!=			
ANR	3527316	Identifier	hard_kill_tid		3527264	0					
ANR	3527317	UnaryOperationExpression	- 1		3527264	1					
ANR	3527318	UnaryOperator	-		3527264	0					
ANR	3527319	PrimaryExpression	1		3527264	1					
ANR	3527320	CompoundStatement		10:28:214:214	3527264	1					
ANR	3527321	ExpressionStatement	daemonCore -> Cancel_Timer ( hard_kill_tid )	1258:2:33002:33043	3527264	0	True				
ANR	3527322	CallExpression	daemonCore -> Cancel_Timer ( hard_kill_tid )		3527264	0					
ANR	3527323	Callee	daemonCore -> Cancel_Timer		3527264	0					
ANR	3527324	PtrMemberAccess	daemonCore -> Cancel_Timer		3527264	0					
ANR	3527325	Identifier	daemonCore		3527264	0					
ANR	3527326	Identifier	Cancel_Timer		3527264	1					
ANR	3527327	ArgumentList	hard_kill_tid		3527264	1					
ANR	3527328	Argument	hard_kill_tid		3527264	0					
ANR	3527329	Identifier	hard_kill_tid		3527264	0					
ANR	3527330	ExpressionStatement	hard_kill_tid = - 1	1259:2:33047:33065	3527264	1	True				
ANR	3527331	AssignmentExpression	hard_kill_tid = - 1		3527264	0		=			
ANR	3527332	Identifier	hard_kill_tid		3527264	0					
ANR	3527333	UnaryOperationExpression	- 1		3527264	1					
ANR	3527334	UnaryOperator	-		3527264	0					
ANR	3527335	PrimaryExpression	1		3527264	1					
ANR	3527336	IfStatement	if ( recover_tid != - 1 )		3527264	3					
ANR	3527337	Condition	recover_tid != - 1	1261:5:33075:33092	3527264	0	True				
ANR	3527338	EqualityExpression	recover_tid != - 1		3527264	0		!=			
ANR	3527339	Identifier	recover_tid		3527264	0					
ANR	3527340	UnaryOperationExpression	- 1		3527264	1					
ANR	3527341	UnaryOperator	-		3527264	0					
ANR	3527342	PrimaryExpression	1		3527264	1					
ANR	3527343	CompoundStatement		14:26:312:312	3527264	1					
ANR	3527344	ExpressionStatement	daemonCore -> Cancel_Timer ( recover_tid )	1262:2:33100:33139	3527264	0	True				
ANR	3527345	CallExpression	daemonCore -> Cancel_Timer ( recover_tid )		3527264	0					
ANR	3527346	Callee	daemonCore -> Cancel_Timer		3527264	0					
ANR	3527347	PtrMemberAccess	daemonCore -> Cancel_Timer		3527264	0					
ANR	3527348	Identifier	daemonCore		3527264	0					
ANR	3527349	Identifier	Cancel_Timer		3527264	1					
ANR	3527350	ArgumentList	recover_tid		3527264	1					
ANR	3527351	Argument	recover_tid		3527264	0					
ANR	3527352	Identifier	recover_tid		3527264	0					
ANR	3527353	ExpressionStatement	recover_tid = - 1	1263:2:33143:33159	3527264	1	True				
ANR	3527354	AssignmentExpression	recover_tid = - 1		3527264	0		=			
ANR	3527355	Identifier	recover_tid		3527264	0					
ANR	3527356	UnaryOperationExpression	- 1		3527264	1					
ANR	3527357	UnaryOperator	-		3527264	0					
ANR	3527358	PrimaryExpression	1		3527264	1					
ANR	3527359	IfStatement	if ( start_tid != - 1 )		3527264	4					
ANR	3527360	Condition	start_tid != - 1	1265:5:33169:33183	3527264	0	True				
ANR	3527361	EqualityExpression	start_tid != - 1		3527264	0		!=			
ANR	3527362	Identifier	start_tid		3527264	0					
ANR	3527363	UnaryOperationExpression	- 1		3527264	1					
ANR	3527364	UnaryOperator	-		3527264	0					
ANR	3527365	PrimaryExpression	1		3527264	1					
ANR	3527366	CompoundStatement		18:23:403:403	3527264	1					
ANR	3527367	ExpressionStatement	daemonCore -> Cancel_Timer ( start_tid )	1266:2:33191:33228	3527264	0	True				
ANR	3527368	CallExpression	daemonCore -> Cancel_Timer ( start_tid )		3527264	0					
ANR	3527369	Callee	daemonCore -> Cancel_Timer		3527264	0					
ANR	3527370	PtrMemberAccess	daemonCore -> Cancel_Timer		3527264	0					
ANR	3527371	Identifier	daemonCore		3527264	0					
ANR	3527372	Identifier	Cancel_Timer		3527264	1					
ANR	3527373	ArgumentList	start_tid		3527264	1					
ANR	3527374	Argument	start_tid		3527264	0					
ANR	3527375	Identifier	start_tid		3527264	0					
ANR	3527376	ExpressionStatement	start_tid = - 1	1267:2:33232:33246	3527264	1	True				
ANR	3527377	AssignmentExpression	start_tid = - 1		3527264	0		=			
ANR	3527378	Identifier	start_tid		3527264	0					
ANR	3527379	UnaryOperationExpression	- 1		3527264	1					
ANR	3527380	UnaryOperator	-		3527264	0					
ANR	3527381	PrimaryExpression	1		3527264	1					
ANR	3527382	ReturnType	void		3527264	1					
ANR	3527383	Identifier	daemon :: CancelAllTimers		3527264	2					
ANR	3527384	ParameterList			3527264	3					
ANR	3527385	CFGEntryNode	ENTRY		3527264		True				
ANR	3527386	CFGExitNode	EXIT		3527264		True				
ANR	3527387	Symbol	recover_tid		3527264						
ANR	3527388	Symbol	stop_fast_tid		3527264						
ANR	3527389	Symbol	daemonCore		3527264						
ANR	3527390	Symbol	start_tid		3527264						
ANR	3527391	Symbol	stop_tid		3527264						
ANR	3527392	Symbol	hard_kill_tid		3527264						
ANR	3527393	Function	daemon :: CancelRestartTimers	1272:0:33255:33559							
ANR	3527394	FunctionDef	daemon :: CancelRestartTimers ()		3527393	0					
ANR	3527395	CompoundStatement		1274:0:33290:33559	3527393	0					
ANR	3527396	IfStatement	if ( recover_tid != - 1 )		3527393	0					
ANR	3527397	Condition	recover_tid != - 1	1275:5:33297:33314	3527393	0	True				
ANR	3527398	EqualityExpression	recover_tid != - 1		3527393	0		!=			
ANR	3527399	Identifier	recover_tid		3527393	0					
ANR	3527400	UnaryOperationExpression	- 1		3527393	1					
ANR	3527401	UnaryOperator	-		3527393	0					
ANR	3527402	PrimaryExpression	1		3527393	1					
ANR	3527403	CompoundStatement		2:26:27:27	3527393	1					
ANR	3527404	ExpressionStatement	daemonCore -> Cancel_Timer ( recover_tid )	1276:2:33322:33361	3527393	0	True				
ANR	3527405	CallExpression	daemonCore -> Cancel_Timer ( recover_tid )		3527393	0					
ANR	3527406	Callee	daemonCore -> Cancel_Timer		3527393	0					
ANR	3527407	PtrMemberAccess	daemonCore -> Cancel_Timer		3527393	0					
ANR	3527408	Identifier	daemonCore		3527393	0					
ANR	3527409	Identifier	Cancel_Timer		3527393	1					
ANR	3527410	ArgumentList	recover_tid		3527393	1					
ANR	3527411	Argument	recover_tid		3527393	0					
ANR	3527412	Identifier	recover_tid		3527393	0					
ANR	3527413	ExpressionStatement	recover_tid = - 1	1277:2:33365:33381	3527393	1	True				
ANR	3527414	AssignmentExpression	recover_tid = - 1		3527393	0		=			
ANR	3527415	Identifier	recover_tid		3527393	0					
ANR	3527416	UnaryOperationExpression	- 1		3527393	1					
ANR	3527417	UnaryOperator	-		3527393	0					
ANR	3527418	PrimaryExpression	1		3527393	1					
ANR	3527419	IfStatement	if ( start_tid != - 1 )		3527393	1					
ANR	3527420	Condition	start_tid != - 1	1279:5:33391:33405	3527393	0	True				
ANR	3527421	EqualityExpression	start_tid != - 1		3527393	0		!=			
ANR	3527422	Identifier	start_tid		3527393	0					
ANR	3527423	UnaryOperationExpression	- 1		3527393	1					
ANR	3527424	UnaryOperator	-		3527393	0					
ANR	3527425	PrimaryExpression	1		3527393	1					
ANR	3527426	CompoundStatement		6:23:118:118	3527393	1					
ANR	3527427	ExpressionStatement	"dprintf ( D_ALWAYS , ""Canceling timer to re-start %s\\n"" , name_in_config_file )"	1280:2:33413:33495	3527393	0	True				
ANR	3527428	CallExpression	"dprintf ( D_ALWAYS , ""Canceling timer to re-start %s\\n"" , name_in_config_file )"		3527393	0					
ANR	3527429	Callee	dprintf		3527393	0					
ANR	3527430	Identifier	dprintf		3527393	0					
ANR	3527431	ArgumentList	D_ALWAYS		3527393	1					
ANR	3527432	Argument	D_ALWAYS		3527393	0					
ANR	3527433	Identifier	D_ALWAYS		3527393	0					
ANR	3527434	Argument	"""Canceling timer to re-start %s\\n"""		3527393	1					
ANR	3527435	PrimaryExpression	"""Canceling timer to re-start %s\\n"""		3527393	0					
ANR	3527436	Argument	name_in_config_file		3527393	2					
ANR	3527437	Identifier	name_in_config_file		3527393	0					
ANR	3527438	ExpressionStatement	daemonCore -> Cancel_Timer ( start_tid )	1282:2:33499:33536	3527393	1	True				
ANR	3527439	CallExpression	daemonCore -> Cancel_Timer ( start_tid )		3527393	0					
ANR	3527440	Callee	daemonCore -> Cancel_Timer		3527393	0					
ANR	3527441	PtrMemberAccess	daemonCore -> Cancel_Timer		3527393	0					
ANR	3527442	Identifier	daemonCore		3527393	0					
ANR	3527443	Identifier	Cancel_Timer		3527393	1					
ANR	3527444	ArgumentList	start_tid		3527393	1					
ANR	3527445	Argument	start_tid		3527393	0					
ANR	3527446	Identifier	start_tid		3527393	0					
ANR	3527447	ExpressionStatement	start_tid = - 1	1283:2:33540:33554	3527393	2	True				
ANR	3527448	AssignmentExpression	start_tid = - 1		3527393	0		=			
ANR	3527449	Identifier	start_tid		3527393	0					
ANR	3527450	UnaryOperationExpression	- 1		3527393	1					
ANR	3527451	UnaryOperator	-		3527393	0					
ANR	3527452	PrimaryExpression	1		3527393	1					
ANR	3527453	ReturnType	void		3527393	1					
ANR	3527454	Identifier	daemon :: CancelRestartTimers		3527393	2					
ANR	3527455	ParameterList			3527393	3					
ANR	3527456	CFGEntryNode	ENTRY		3527393		True				
ANR	3527457	CFGExitNode	EXIT		3527393		True				
ANR	3527458	Symbol	recover_tid		3527393						
ANR	3527459	Symbol	daemonCore		3527393						
ANR	3527460	Symbol	start_tid		3527393						
ANR	3527461	Symbol	D_ALWAYS		3527393						
ANR	3527462	Symbol	name_in_config_file		3527393						
ANR	3527463	Function	daemon :: Kill	1288:0:33563:34098							
ANR	3527464	FunctionDef	daemon :: Kill (int sig)		3527463	0					
ANR	3527465	CompoundStatement		1290:0:33592:34098	3527463	0					
ANR	3527466	IfStatement	if ( ( ! pid ) || ( pid == - 1 ) )		3527463	0					
ANR	3527467	Condition	( ! pid ) || ( pid == - 1 )	1291:5:33599:33619	3527463	0	True				
ANR	3527468	OrExpression	( ! pid ) || ( pid == - 1 )		3527463	0		||			
ANR	3527469	UnaryOperationExpression	! pid		3527463	0					
ANR	3527470	UnaryOperator	!		3527463	0					
ANR	3527471	Identifier	pid		3527463	1					
ANR	3527472	EqualityExpression	pid == - 1		3527463	1		==			
ANR	3527473	Identifier	pid		3527463	0					
ANR	3527474	UnaryOperationExpression	- 1		3527463	1					
ANR	3527475	UnaryOperator	-		3527463	0					
ANR	3527476	PrimaryExpression	1		3527463	1					
ANR	3527477	CompoundStatement		2:29:30:30	3527463	1					
ANR	3527478	ReturnStatement	return ;	1292:2:33627:33633	3527463	0	True				
ANR	3527479	IdentifierDeclStatement	int status ;	1294:1:33639:33649	3527463	1	True				
ANR	3527480	IdentifierDecl	status		3527463	0					
ANR	3527481	IdentifierDeclType	int		3527463	0					
ANR	3527482	Identifier	status		3527463	1					
ANR	3527483	ExpressionStatement	"status = daemonCore -> Send_Signal ( pid , sig )"	1295:1:33652:33693	3527463	2	True				
ANR	3527484	AssignmentExpression	"status = daemonCore -> Send_Signal ( pid , sig )"		3527463	0		=			
ANR	3527485	Identifier	status		3527463	0					
ANR	3527486	CallExpression	"daemonCore -> Send_Signal ( pid , sig )"		3527463	1					
ANR	3527487	Callee	daemonCore -> Send_Signal		3527463	0					
ANR	3527488	PtrMemberAccess	daemonCore -> Send_Signal		3527463	0					
ANR	3527489	Identifier	daemonCore		3527463	0					
ANR	3527490	Identifier	Send_Signal		3527463	1					
ANR	3527491	ArgumentList	pid		3527463	1					
ANR	3527492	Argument	pid		3527463	0					
ANR	3527493	Identifier	pid		3527463	0					
ANR	3527494	Argument	sig		3527463	1					
ANR	3527495	Identifier	sig		3527463	0					
ANR	3527496	IfStatement	if ( status == FALSE )		3527463	3					
ANR	3527497	Condition	status == FALSE	1296:6:33701:33715	3527463	0	True				
ANR	3527498	EqualityExpression	status == FALSE		3527463	0		==			
ANR	3527499	Identifier	status		3527463	0					
ANR	3527500	Identifier	FALSE		3527463	1					
ANR	3527501	ExpressionStatement	status = - 1	1297:2:33721:33732	3527463	1	True				
ANR	3527502	AssignmentExpression	status = - 1		3527463	0		=			
ANR	3527503	Identifier	status		3527463	0					
ANR	3527504	UnaryOperationExpression	- 1		3527463	1					
ANR	3527505	UnaryOperator	-		3527463	0					
ANR	3527506	PrimaryExpression	1		3527463	1					
ANR	3527507	ElseStatement	else		3527463	0					
ANR	3527508	ExpressionStatement	status = 1	1299:2:33742:33752	3527463	0	True				
ANR	3527509	AssignmentExpression	status = 1		3527463	0		=			
ANR	3527510	Identifier	status		3527463	0					
ANR	3527511	PrimaryExpression	1		3527463	1					
ANR	3527512	IdentifierDeclStatement	const char * sig_name = signalName ( sig ) ;	1301:1:33756:33796	3527463	4	True				
ANR	3527513	IdentifierDecl	* sig_name = signalName ( sig )		3527463	0					
ANR	3527514	IdentifierDeclType	const char *		3527463	0					
ANR	3527515	Identifier	sig_name		3527463	1					
ANR	3527516	AssignmentExpression	* sig_name = signalName ( sig )		3527463	2		=			
ANR	3527517	Identifier	sig_name		3527463	0					
ANR	3527518	CallExpression	signalName ( sig )		3527463	1					
ANR	3527519	Callee	signalName		3527463	0					
ANR	3527520	Identifier	signalName		3527463	0					
ANR	3527521	ArgumentList	sig		3527463	1					
ANR	3527522	Argument	sig		3527463	0					
ANR	3527523	Identifier	sig		3527463	0					
ANR	3527524	IdentifierDeclStatement	char buf [ 32 ] ;	1302:1:33799:33811	3527463	5	True				
ANR	3527525	IdentifierDecl	buf [ 32 ]		3527463	0					
ANR	3527526	IdentifierDeclType	char [ 32 ]		3527463	0					
ANR	3527527	Identifier	buf		3527463	1					
ANR	3527528	PrimaryExpression	32		3527463	2					
ANR	3527529	IfStatement	if ( ! sig_name )		3527463	6					
ANR	3527530	Condition	! sig_name	1303:5:33818:33827	3527463	0	True				
ANR	3527531	UnaryOperationExpression	! sig_name		3527463	0					
ANR	3527532	UnaryOperator	!		3527463	0					
ANR	3527533	Identifier	sig_name		3527463	1					
ANR	3527534	CompoundStatement		14:18:238:238	3527463	1					
ANR	3527535	ExpressionStatement	"sprintf ( buf , ""signal %d"" , sig )"	1304:2:33835:33867	3527463	0	True				
ANR	3527536	CallExpression	"sprintf ( buf , ""signal %d"" , sig )"		3527463	0					
ANR	3527537	Callee	sprintf		3527463	0					
ANR	3527538	Identifier	sprintf		3527463	0					
ANR	3527539	ArgumentList	buf		3527463	1					
ANR	3527540	Argument	buf		3527463	0					
ANR	3527541	Identifier	buf		3527463	0					
ANR	3527542	Argument	"""signal %d"""		3527463	1					
ANR	3527543	PrimaryExpression	"""signal %d"""		3527463	0					
ANR	3527544	Argument	sig		3527463	2					
ANR	3527545	Identifier	sig		3527463	0					
ANR	3527546	ExpressionStatement	sig_name = buf	1305:2:33871:33885	3527463	1	True				
ANR	3527547	AssignmentExpression	sig_name = buf		3527463	0		=			
ANR	3527548	Identifier	sig_name		3527463	0					
ANR	3527549	Identifier	buf		3527463	1					
ANR	3527550	IfStatement	if ( status < 0 )		3527463	7					
ANR	3527551	Condition	status < 0	1307:5:33895:33904	3527463	0	True				
ANR	3527552	RelationalExpression	status < 0		3527463	0		<			
ANR	3527553	Identifier	status		3527463	0					
ANR	3527554	PrimaryExpression	0		3527463	1					
ANR	3527555	CompoundStatement		18:18:315:315	3527463	1					
ANR	3527556	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: failed to send %s to pid %d\\n"" , sig_name , pid )"	1308:2:33912:33991	3527463	0	True				
ANR	3527557	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: failed to send %s to pid %d\\n"" , sig_name , pid )"		3527463	0					
ANR	3527558	Callee	dprintf		3527463	0					
ANR	3527559	Identifier	dprintf		3527463	0					
ANR	3527560	ArgumentList	D_ALWAYS		3527463	1					
ANR	3527561	Argument	D_ALWAYS		3527463	0					
ANR	3527562	Identifier	D_ALWAYS		3527463	0					
ANR	3527563	Argument	"""ERROR: failed to send %s to pid %d\\n"""		3527463	1					
ANR	3527564	PrimaryExpression	"""ERROR: failed to send %s to pid %d\\n"""		3527463	0					
ANR	3527565	Argument	sig_name		3527463	2					
ANR	3527566	Identifier	sig_name		3527463	0					
ANR	3527567	Argument	pid		3527463	3					
ANR	3527568	Identifier	pid		3527463	0					
ANR	3527569	ElseStatement	else		3527463	0					
ANR	3527570	CompoundStatement		21:8:408:408	3527463	0					
ANR	3527571	ExpressionStatement	"dprintf ( D_ALWAYS , ""Sent %s to %s (pid %d)\\n"" , sig_name , name_in_config_file , pid )"	1311:2:34005:34093	3527463	0	True				
ANR	3527572	CallExpression	"dprintf ( D_ALWAYS , ""Sent %s to %s (pid %d)\\n"" , sig_name , name_in_config_file , pid )"		3527463	0					
ANR	3527573	Callee	dprintf		3527463	0					
ANR	3527574	Identifier	dprintf		3527463	0					
ANR	3527575	ArgumentList	D_ALWAYS		3527463	1					
ANR	3527576	Argument	D_ALWAYS		3527463	0					
ANR	3527577	Identifier	D_ALWAYS		3527463	0					
ANR	3527578	Argument	"""Sent %s to %s (pid %d)\\n"""		3527463	1					
ANR	3527579	PrimaryExpression	"""Sent %s to %s (pid %d)\\n"""		3527463	0					
ANR	3527580	Argument	sig_name		3527463	2					
ANR	3527581	Identifier	sig_name		3527463	0					
ANR	3527582	Argument	name_in_config_file		3527463	3					
ANR	3527583	Identifier	name_in_config_file		3527463	0					
ANR	3527584	Argument	pid		3527463	4					
ANR	3527585	Identifier	pid		3527463	0					
ANR	3527586	ReturnType	void		3527463	1					
ANR	3527587	Identifier	daemon :: Kill		3527463	2					
ANR	3527588	ParameterList	int sig		3527463	3					
ANR	3527589	Parameter	int sig	1289:14:33582:33588	3527463	0	True				
ANR	3527590	ParameterType	int		3527463	0					
ANR	3527591	Identifier	sig		3527463	1					
ANR	3527592	CFGEntryNode	ENTRY		3527463		True				
ANR	3527593	CFGExitNode	EXIT		3527463		True				
ANR	3527594	Symbol	sig		3527463						
ANR	3527595	Symbol	signalName		3527463						
ANR	3527596	Symbol	buf		3527463						
ANR	3527597	Symbol	daemonCore -> Send_Signal		3527463						
ANR	3527598	Symbol	* daemonCore		3527463						
ANR	3527599	Symbol	daemonCore		3527463						
ANR	3527600	Symbol	D_ALWAYS		3527463						
ANR	3527601	Symbol	pid		3527463						
ANR	3527602	Symbol	FALSE		3527463						
ANR	3527603	Symbol	name_in_config_file		3527463						
ANR	3527604	Symbol	status		3527463						
ANR	3527605	Symbol	sig_name		3527463						
ANR	3527606	Function	daemon :: KillFamily	1317:0:34102:34319							
ANR	3527607	FunctionDef	daemon :: KillFamily ()		3527606	0					
ANR	3527608	CompoundStatement		1319:0:34135:34319	3527606	0					
ANR	3527609	IfStatement	if ( pid == 0 )		3527606	0					
ANR	3527610	Condition	pid == 0	1320:5:34142:34149	3527606	0	True				
ANR	3527611	EqualityExpression	pid == 0		3527606	0		==			
ANR	3527612	Identifier	pid		3527606	0					
ANR	3527613	PrimaryExpression	0		3527606	1					
ANR	3527614	CompoundStatement		2:16:17:17	3527606	1					
ANR	3527615	ReturnStatement	return ;	1321:2:34157:34163	3527606	0	True				
ANR	3527616	IfStatement	if ( daemonCore -> Kill_Family ( pid ) == FALSE )		3527606	1					
ANR	3527617	Condition	daemonCore -> Kill_Family ( pid ) == FALSE	1323:5:34173:34209	3527606	0	True				
ANR	3527618	EqualityExpression	daemonCore -> Kill_Family ( pid ) == FALSE		3527606	0		==			
ANR	3527619	CallExpression	daemonCore -> Kill_Family ( pid )		3527606	0					
ANR	3527620	Callee	daemonCore -> Kill_Family		3527606	0					
ANR	3527621	PtrMemberAccess	daemonCore -> Kill_Family		3527606	0					
ANR	3527622	Identifier	daemonCore		3527606	0					
ANR	3527623	Identifier	Kill_Family		3527606	1					
ANR	3527624	ArgumentList	pid		3527606	1					
ANR	3527625	Argument	pid		3527606	0					
ANR	3527626	Identifier	pid		3527606	0					
ANR	3527627	Identifier	FALSE		3527606	1					
ANR	3527628	CompoundStatement		5:44:76:76	3527606	1					
ANR	3527629	ExpressionStatement	"dprintf ( D_ALWAYS , ""error killing process family of daemon with pid %u\\n"" , pid )"	1324:2:34216:34314	3527606	0	True				
ANR	3527630	CallExpression	"dprintf ( D_ALWAYS , ""error killing process family of daemon with pid %u\\n"" , pid )"		3527606	0					
ANR	3527631	Callee	dprintf		3527606	0					
ANR	3527632	Identifier	dprintf		3527606	0					
ANR	3527633	ArgumentList	D_ALWAYS		3527606	1					
ANR	3527634	Argument	D_ALWAYS		3527606	0					
ANR	3527635	Identifier	D_ALWAYS		3527606	0					
ANR	3527636	Argument	"""error killing process family of daemon with pid %u\\n"""		3527606	1					
ANR	3527637	PrimaryExpression	"""error killing process family of daemon with pid %u\\n"""		3527606	0					
ANR	3527638	Argument	pid		3527606	2					
ANR	3527639	Identifier	pid		3527606	0					
ANR	3527640	ReturnType	void		3527606	1					
ANR	3527641	Identifier	daemon :: KillFamily		3527606	2					
ANR	3527642	ParameterList			3527606	3					
ANR	3527643	CFGEntryNode	ENTRY		3527606		True				
ANR	3527644	CFGExitNode	EXIT		3527606		True				
ANR	3527645	Symbol	daemonCore -> Kill_Family		3527606						
ANR	3527646	Symbol	* daemonCore		3527606						
ANR	3527647	Symbol	daemonCore		3527606						
ANR	3527648	Symbol	D_ALWAYS		3527606						
ANR	3527649	Symbol	pid		3527606						
ANR	3527650	Symbol	FALSE		3527606						
ANR	3527651	Function	daemon :: Reconfig	1331:0:34323:34522							
ANR	3527652	FunctionDef	daemon :: Reconfig ()		3527651	0					
ANR	3527653	CompoundStatement		1333:0:34347:34522	3527651	0					
ANR	3527654	IfStatement	if ( stop_state != NONE )		3527651	0					
ANR	3527655	Condition	stop_state != NONE	1334:5:34354:34371	3527651	0	True				
ANR	3527656	EqualityExpression	stop_state != NONE		3527651	0		!=			
ANR	3527657	Identifier	stop_state		3527651	0					
ANR	3527658	Identifier	NONE		3527651	1					
ANR	3527659	CompoundStatement		2:26:27:27	3527651	1					
ANR	3527660	ReturnStatement	return ;	1337:2:34474:34480	3527651	0	True				
ANR	3527661	ExpressionStatement	DoConfig ( false )	1339:1:34486:34503	3527651	1	True				
ANR	3527662	CallExpression	DoConfig ( false )		3527651	0					
ANR	3527663	Callee	DoConfig		3527651	0					
ANR	3527664	Identifier	DoConfig		3527651	0					
ANR	3527665	ArgumentList	false		3527651	1					
ANR	3527666	Argument	false		3527651	0					
ANR	3527667	Identifier	false		3527651	0					
ANR	3527668	ExpressionStatement	Kill ( SIGHUP )	1340:1:34506:34520	3527651	2	True				
ANR	3527669	CallExpression	Kill ( SIGHUP )		3527651	0					
ANR	3527670	Callee	Kill		3527651	0					
ANR	3527671	Identifier	Kill		3527651	0					
ANR	3527672	ArgumentList	SIGHUP		3527651	1					
ANR	3527673	Argument	SIGHUP		3527651	0					
ANR	3527674	Identifier	SIGHUP		3527651	0					
ANR	3527675	ReturnType	void		3527651	1					
ANR	3527676	Identifier	daemon :: Reconfig		3527651	2					
ANR	3527677	ParameterList			3527651	3					
ANR	3527678	CFGEntryNode	ENTRY		3527651		True				
ANR	3527679	CFGExitNode	EXIT		3527651		True				
ANR	3527680	Symbol	stop_state		3527651						
ANR	3527681	Symbol	false		3527651						
ANR	3527682	Symbol	SIGHUP		3527651						
ANR	3527683	Symbol	NONE		3527651						
ANR	3527684	Function	daemon :: InitParams	1344:0:34526:36029							
ANR	3527685	FunctionDef	daemon :: InitParams ()		3527684	0					
ANR	3527686	CompoundStatement		1346:0:34552:36029	3527684	0					
ANR	3527687	IdentifierDeclStatement	char * buf ;	1347:1:34555:34564	3527684	0	True				
ANR	3527688	IdentifierDecl	* buf		3527684	0					
ANR	3527689	IdentifierDeclType	char *		3527684	0					
ANR	3527690	Identifier	buf		3527684	1					
ANR	3527691	IdentifierDeclStatement	char * tmp = NULL ;	1348:1:34567:34583	3527684	1	True				
ANR	3527692	IdentifierDecl	* tmp = NULL		3527684	0					
ANR	3527693	IdentifierDeclType	char *		3527684	0					
ANR	3527694	Identifier	tmp		3527684	1					
ANR	3527695	AssignmentExpression	* tmp = NULL		3527684	2		=			
ANR	3527696	Identifier	NULL		3527684	0					
ANR	3527697	Identifier	NULL		3527684	1					
ANR	3527698	IfStatement	if ( process_name )		3527684	2					
ANR	3527699	Condition	process_name	1350:5:34591:34602	3527684	0	True				
ANR	3527700	Identifier	process_name		3527684	0					
ANR	3527701	CompoundStatement		5:20:53:53	3527684	1					
ANR	3527702	ExpressionStatement	tmp = process_name	1351:2:34610:34628	3527684	0	True				
ANR	3527703	AssignmentExpression	tmp = process_name		3527684	0		=			
ANR	3527704	Identifier	tmp		3527684	0					
ANR	3527705	Identifier	process_name		3527684	1					
ANR	3527706	ExpressionStatement	process_name = param ( name_in_config_file )	1353:1:34634:34675	3527684	3	True				
ANR	3527707	AssignmentExpression	process_name = param ( name_in_config_file )		3527684	0		=			
ANR	3527708	Identifier	process_name		3527684	0					
ANR	3527709	CallExpression	param ( name_in_config_file )		3527684	1					
ANR	3527710	Callee	param		3527684	0					
ANR	3527711	Identifier	param		3527684	0					
ANR	3527712	ArgumentList	name_in_config_file		3527684	1					
ANR	3527713	Argument	name_in_config_file		3527684	0					
ANR	3527714	Identifier	name_in_config_file		3527684	0					
ANR	3527715	IfStatement	if ( ! process_name )		3527684	4					
ANR	3527716	Condition	! process_name	1354:5:34682:34694	3527684	0	True				
ANR	3527717	UnaryOperationExpression	! process_name		3527684	0					
ANR	3527718	UnaryOperator	!		3527684	0					
ANR	3527719	Identifier	process_name		3527684	1					
ANR	3527720	CompoundStatement		9:21:145:145	3527684	1					
ANR	3527721	ExpressionStatement	"dprintf ( D_ALWAYS , ""%s is in the DAEMON_LIST parameter, but there is no executable path for it defined in the config files!\\n"" , name_in_config_file )"	1355:2:34702:34861	3527684	0	True				
ANR	3527722	CallExpression	"dprintf ( D_ALWAYS , ""%s is in the DAEMON_LIST parameter, but there is no executable path for it defined in the config files!\\n"" , name_in_config_file )"		3527684	0					
ANR	3527723	Callee	dprintf		3527684	0					
ANR	3527724	Identifier	dprintf		3527684	0					
ANR	3527725	ArgumentList	D_ALWAYS		3527684	1					
ANR	3527726	Argument	D_ALWAYS		3527684	0					
ANR	3527727	Identifier	D_ALWAYS		3527684	0					
ANR	3527728	Argument	"""%s is in the DAEMON_LIST parameter, but there is no executable path for it defined in the config files!\\n"""		3527684	1					
ANR	3527729	PrimaryExpression	"""%s is in the DAEMON_LIST parameter, but there is no executable path for it defined in the config files!\\n"""		3527684	0					
ANR	3527730	Argument	name_in_config_file		3527684	2					
ANR	3527731	Identifier	name_in_config_file		3527684	0					
ANR	3527732	ExpressionStatement	"EXCEPT ( ""Must have the path to %s defined."" , name_in_config_file )"	1358:2:34866:34932	3527684	1	True				
ANR	3527733	CallExpression	"EXCEPT ( ""Must have the path to %s defined."" , name_in_config_file )"		3527684	0					
ANR	3527734	Callee	EXCEPT		3527684	0					
ANR	3527735	Identifier	EXCEPT		3527684	0					
ANR	3527736	ArgumentList	"""Must have the path to %s defined."""		3527684	1					
ANR	3527737	Argument	"""Must have the path to %s defined."""		3527684	0					
ANR	3527738	PrimaryExpression	"""Must have the path to %s defined."""		3527684	0					
ANR	3527739	Argument	name_in_config_file		3527684	1					
ANR	3527740	Identifier	name_in_config_file		3527684	0					
ANR	3527741	IfStatement	"if ( tmp && strcmp ( process_name , tmp ) )"		3527684	5					
ANR	3527742	Condition	"tmp && strcmp ( process_name , tmp )"	1360:5:34943:34974	3527684	0	True				
ANR	3527743	AndExpression	"tmp && strcmp ( process_name , tmp )"		3527684	0		&&			
ANR	3527744	Identifier	tmp		3527684	0					
ANR	3527745	CallExpression	"strcmp ( process_name , tmp )"		3527684	1					
ANR	3527746	Callee	strcmp		3527684	0					
ANR	3527747	Identifier	strcmp		3527684	0					
ANR	3527748	ArgumentList	process_name		3527684	1					
ANR	3527749	Argument	process_name		3527684	0					
ANR	3527750	Identifier	process_name		3527684	0					
ANR	3527751	Argument	tmp		3527684	1					
ANR	3527752	Identifier	tmp		3527684	0					
ANR	3527753	CompoundStatement		15:40:425:425	3527684	1					
ANR	3527754	ExpressionStatement	newExec = TRUE	1363:2:35089:35103	3527684	0	True				
ANR	3527755	AssignmentExpression	newExec = TRUE		3527684	0		=			
ANR	3527756	Identifier	newExec		3527684	0					
ANR	3527757	Identifier	TRUE		3527684	1					
ANR	3527758	IfStatement	if ( tmp )		3527684	6					
ANR	3527759	Condition	tmp	1365:5:35113:35115	3527684	0	True				
ANR	3527760	Identifier	tmp		3527684	0					
ANR	3527761	CompoundStatement		20:10:565:565	3527684	1					
ANR	3527762	ExpressionStatement	free ( tmp )	1366:2:35122:35133	3527684	0	True				
ANR	3527763	CallExpression	free ( tmp )		3527684	0					
ANR	3527764	Callee	free		3527684	0					
ANR	3527765	Identifier	free		3527684	0					
ANR	3527766	ArgumentList	tmp		3527684	1					
ANR	3527767	Argument	tmp		3527684	0					
ANR	3527768	Identifier	tmp		3527684	0					
ANR	3527769	ExpressionStatement	tmp = NULL	1367:2:35137:35147	3527684	1	True				
ANR	3527770	AssignmentExpression	tmp = NULL		3527684	0		=			
ANR	3527771	Identifier	tmp		3527684	0					
ANR	3527772	Identifier	NULL		3527684	1					
ANR	3527773	IfStatement	if ( watch_name )		3527684	7					
ANR	3527774	Condition	watch_name	1369:5:35157:35166	3527684	0	True				
ANR	3527775	Identifier	watch_name		3527684	0					
ANR	3527776	CompoundStatement		24:18:617:617	3527684	1					
ANR	3527777	ExpressionStatement	tmp = watch_name	1370:2:35174:35190	3527684	0	True				
ANR	3527778	AssignmentExpression	tmp = watch_name		3527684	0		=			
ANR	3527779	Identifier	tmp		3527684	0					
ANR	3527780	Identifier	watch_name		3527684	1					
ANR	3527781	IdentifierDeclStatement	int length = strlen ( name_in_config_file ) + 32 ;	1373:1:35200:35245	3527684	8	True				
ANR	3527782	IdentifierDecl	length = strlen ( name_in_config_file ) + 32		3527684	0					
ANR	3527783	IdentifierDeclType	int		3527684	0					
ANR	3527784	Identifier	length		3527684	1					
ANR	3527785	AssignmentExpression	length = strlen ( name_in_config_file ) + 32		3527684	2		=			
ANR	3527786	Identifier	length		3527684	0					
ANR	3527787	AdditiveExpression	strlen ( name_in_config_file ) + 32		3527684	1		+			
ANR	3527788	CallExpression	strlen ( name_in_config_file )		3527684	0					
ANR	3527789	Callee	strlen		3527684	0					
ANR	3527790	Identifier	strlen		3527684	0					
ANR	3527791	ArgumentList	name_in_config_file		3527684	1					
ANR	3527792	Argument	name_in_config_file		3527684	0					
ANR	3527793	Identifier	name_in_config_file		3527684	0					
ANR	3527794	PrimaryExpression	32		3527684	1					
ANR	3527795	ExpressionStatement	buf = ( char * ) malloc ( length )	1374:1:35248:35276	3527684	9	True				
ANR	3527796	AssignmentExpression	buf = ( char * ) malloc ( length )		3527684	0		=			
ANR	3527797	Identifier	buf		3527684	0					
ANR	3527798	CastExpression	( char * ) malloc ( length )		3527684	1					
ANR	3527799	CastTarget	char *		3527684	0					
ANR	3527800	CallExpression	malloc ( length )		3527684	1					
ANR	3527801	Callee	malloc		3527684	0					
ANR	3527802	Identifier	malloc		3527684	0					
ANR	3527803	ArgumentList	length		3527684	1					
ANR	3527804	Argument	length		3527684	0					
ANR	3527805	Identifier	length		3527684	0					
ANR	3527806	ExpressionStatement	"snprintf ( buf , length , ""%s_WATCH_FILE"" , name_in_config_file )"	1375:1:35279:35340	3527684	10	True				
ANR	3527807	CallExpression	"snprintf ( buf , length , ""%s_WATCH_FILE"" , name_in_config_file )"		3527684	0					
ANR	3527808	Callee	snprintf		3527684	0					
ANR	3527809	Identifier	snprintf		3527684	0					
ANR	3527810	ArgumentList	buf		3527684	1					
ANR	3527811	Argument	buf		3527684	0					
ANR	3527812	Identifier	buf		3527684	0					
ANR	3527813	Argument	length		3527684	1					
ANR	3527814	Identifier	length		3527684	0					
ANR	3527815	Argument	"""%s_WATCH_FILE"""		3527684	2					
ANR	3527816	PrimaryExpression	"""%s_WATCH_FILE"""		3527684	0					
ANR	3527817	Argument	name_in_config_file		3527684	3					
ANR	3527818	Identifier	name_in_config_file		3527684	0					
ANR	3527819	ExpressionStatement	watch_name = param ( buf )	1376:1:35343:35368	3527684	11	True				
ANR	3527820	AssignmentExpression	watch_name = param ( buf )		3527684	0		=			
ANR	3527821	Identifier	watch_name		3527684	0					
ANR	3527822	CallExpression	param ( buf )		3527684	1					
ANR	3527823	Callee	param		3527684	0					
ANR	3527824	Identifier	param		3527684	0					
ANR	3527825	ArgumentList	buf		3527684	1					
ANR	3527826	Argument	buf		3527684	0					
ANR	3527827	Identifier	buf		3527684	0					
ANR	3527828	ExpressionStatement	free ( buf )	1377:1:35371:35380	3527684	12	True				
ANR	3527829	CallExpression	free ( buf )		3527684	0					
ANR	3527830	Callee	free		3527684	0					
ANR	3527831	Identifier	free		3527684	0					
ANR	3527832	ArgumentList	buf		3527684	1					
ANR	3527833	Argument	buf		3527684	0					
ANR	3527834	Identifier	buf		3527684	0					
ANR	3527835	IfStatement	if ( ! watch_name )		3527684	13					
ANR	3527836	Condition	! watch_name	1378:5:35387:35397	3527684	0	True				
ANR	3527837	UnaryOperationExpression	! watch_name		3527684	0					
ANR	3527838	UnaryOperator	!		3527684	0					
ANR	3527839	Identifier	watch_name		3527684	1					
ANR	3527840	CompoundStatement		33:18:847:847	3527684	1					
ANR	3527841	ExpressionStatement	watch_name = strdup ( process_name )	1379:2:35404:35437	3527684	0	True				
ANR	3527842	AssignmentExpression	watch_name = strdup ( process_name )		3527684	0		=			
ANR	3527843	Identifier	watch_name		3527684	0					
ANR	3527844	CallExpression	strdup ( process_name )		3527684	1					
ANR	3527845	Callee	strdup		3527684	0					
ANR	3527846	Identifier	strdup		3527684	0					
ANR	3527847	ArgumentList	process_name		3527684	1					
ANR	3527848	Argument	process_name		3527684	0					
ANR	3527849	Identifier	process_name		3527684	0					
ANR	3527850	IfStatement	"if ( tmp && strcmp ( watch_name , tmp ) )"		3527684	14					
ANR	3527851	Condition	"tmp && strcmp ( watch_name , tmp )"	1382:5:35449:35478	3527684	0	True				
ANR	3527852	AndExpression	"tmp && strcmp ( watch_name , tmp )"		3527684	0		&&			
ANR	3527853	Identifier	tmp		3527684	0					
ANR	3527854	CallExpression	"strcmp ( watch_name , tmp )"		3527684	1					
ANR	3527855	Callee	strcmp		3527684	0					
ANR	3527856	Identifier	strcmp		3527684	0					
ANR	3527857	ArgumentList	watch_name		3527684	1					
ANR	3527858	Argument	watch_name		3527684	0					
ANR	3527859	Identifier	watch_name		3527684	0					
ANR	3527860	Argument	tmp		3527684	1					
ANR	3527861	Identifier	tmp		3527684	0					
ANR	3527862	CompoundStatement		37:38:929:929	3527684	1					
ANR	3527863	ExpressionStatement	timeStamp = 0	1386:2:35641:35654	3527684	0	True				
ANR	3527864	AssignmentExpression	timeStamp = 0		3527684	0		=			
ANR	3527865	Identifier	timeStamp		3527684	0					
ANR	3527866	PrimaryExpression	0		3527684	1					
ANR	3527867	IfStatement	if ( tmp )		3527684	15					
ANR	3527868	Condition	tmp	1389:5:35665:35667	3527684	0	True				
ANR	3527869	Identifier	tmp		3527684	0					
ANR	3527870	CompoundStatement		44:10:1117:1117	3527684	1					
ANR	3527871	ExpressionStatement	free ( tmp )	1390:2:35674:35685	3527684	0	True				
ANR	3527872	CallExpression	free ( tmp )		3527684	0					
ANR	3527873	Callee	free		3527684	0					
ANR	3527874	Identifier	free		3527684	0					
ANR	3527875	ArgumentList	tmp		3527684	1					
ANR	3527876	Argument	tmp		3527684	0					
ANR	3527877	Identifier	tmp		3527684	0					
ANR	3527878	ExpressionStatement	tmp = NULL	1391:2:35689:35699	3527684	1	True				
ANR	3527879	AssignmentExpression	tmp = NULL		3527684	0		=			
ANR	3527880	Identifier	tmp		3527684	0					
ANR	3527881	Identifier	NULL		3527684	1					
ANR	3527882	IfStatement	if ( log_filename_in_config_file != NULL )		3527684	16					
ANR	3527883	Condition	log_filename_in_config_file != NULL	1395:6:35749:35783	3527684	0	True				
ANR	3527884	EqualityExpression	log_filename_in_config_file != NULL		3527684	0		!=			
ANR	3527885	Identifier	log_filename_in_config_file		3527684	0					
ANR	3527886	Identifier	NULL		3527684	1					
ANR	3527887	CompoundStatement		50:43:1233:1233	3527684	1					
ANR	3527888	IfStatement	if ( log_name )		3527684	0					
ANR	3527889	Condition	log_name	1396:6:35794:35801	3527684	0	True				
ANR	3527890	Identifier	log_name		3527684	0					
ANR	3527891	CompoundStatement		51:17:1252:1252	3527684	1					
ANR	3527892	ExpressionStatement	free ( log_name )	1397:3:35810:35826	3527684	0	True				
ANR	3527893	CallExpression	free ( log_name )		3527684	0					
ANR	3527894	Callee	free		3527684	0					
ANR	3527895	Identifier	free		3527684	0					
ANR	3527896	ArgumentList	log_name		3527684	1					
ANR	3527897	Argument	log_name		3527684	0					
ANR	3527898	Identifier	log_name		3527684	0					
ANR	3527899	ExpressionStatement	log_name = param ( log_filename_in_config_file )	1399:2:35834:35879	3527684	1	True				
ANR	3527900	AssignmentExpression	log_name = param ( log_filename_in_config_file )		3527684	0		=			
ANR	3527901	Identifier	log_name		3527684	0					
ANR	3527902	CallExpression	param ( log_filename_in_config_file )		3527684	1					
ANR	3527903	Callee	param		3527684	0					
ANR	3527904	Identifier	param		3527684	0					
ANR	3527905	ArgumentList	log_filename_in_config_file		3527684	1					
ANR	3527906	Argument	log_filename_in_config_file		3527684	0					
ANR	3527907	Identifier	log_filename_in_config_file		3527684	0					
ANR	3527908	IfStatement	if ( log_name == NULL && runs_here )		3527684	2					
ANR	3527909	Condition	log_name == NULL && runs_here	1400:7:35888:35916	3527684	0	True				
ANR	3527910	AndExpression	log_name == NULL && runs_here		3527684	0		&&			
ANR	3527911	EqualityExpression	log_name == NULL		3527684	0		==			
ANR	3527912	Identifier	log_name		3527684	0					
ANR	3527913	Identifier	NULL		3527684	1					
ANR	3527914	Identifier	runs_here		3527684	1					
ANR	3527915	CompoundStatement		55:39:1367:1367	3527684	1					
ANR	3527916	ExpressionStatement	"dprintf ( D_ALWAYS , ""Log file not found in config file: %s\\n"" , log_filename_in_config_file )"	1401:3:35925:36020	3527684	0	True				
ANR	3527917	CallExpression	"dprintf ( D_ALWAYS , ""Log file not found in config file: %s\\n"" , log_filename_in_config_file )"		3527684	0					
ANR	3527918	Callee	dprintf		3527684	0					
ANR	3527919	Identifier	dprintf		3527684	0					
ANR	3527920	ArgumentList	D_ALWAYS		3527684	1					
ANR	3527921	Argument	D_ALWAYS		3527684	0					
ANR	3527922	Identifier	D_ALWAYS		3527684	0					
ANR	3527923	Argument	"""Log file not found in config file: %s\\n"""		3527684	1					
ANR	3527924	PrimaryExpression	"""Log file not found in config file: %s\\n"""		3527684	0					
ANR	3527925	Argument	log_filename_in_config_file		3527684	2					
ANR	3527926	Identifier	log_filename_in_config_file		3527684	0					
ANR	3527927	ReturnType	void		3527684	1					
ANR	3527928	Identifier	daemon :: InitParams		3527684	2					
ANR	3527929	ParameterList			3527684	3					
ANR	3527930	CFGEntryNode	ENTRY		3527684		True				
ANR	3527931	CFGExitNode	EXIT		3527684		True				
ANR	3527932	Symbol	strcmp		3527684						
ANR	3527933	Symbol	malloc		3527684						
ANR	3527934	Symbol	NULL		3527684						
ANR	3527935	Symbol	newExec		3527684						
ANR	3527936	Symbol	log_name		3527684						
ANR	3527937	Symbol	D_ALWAYS		3527684						
ANR	3527938	Symbol	length		3527684						
ANR	3527939	Symbol	TRUE		3527684						
ANR	3527940	Symbol	name_in_config_file		3527684						
ANR	3527941	Symbol	timeStamp		3527684						
ANR	3527942	Symbol	strlen		3527684						
ANR	3527943	Symbol	log_filename_in_config_file		3527684						
ANR	3527944	Symbol	buf		3527684						
ANR	3527945	Symbol	watch_name		3527684						
ANR	3527946	Symbol	param		3527684						
ANR	3527947	Symbol	tmp		3527684						
ANR	3527948	Symbol	process_name		3527684						
ANR	3527949	Symbol	strdup		3527684						
ANR	3527950	Symbol	runs_here		3527684						
ANR	3527951	Function	daemon :: SetupHighAvailability	1408:0:36033:38492							
ANR	3527952	FunctionDef	daemon :: SetupHighAvailability ()		3527951	0					
ANR	3527953	CompoundStatement		1410:0:36075:38492	3527951	0					
ANR	3527954	IdentifierDeclStatement	char * tmp ;	1411:1:36078:36088	3527951	0	True				
ANR	3527955	IdentifierDecl	* tmp		3527951	0					
ANR	3527956	IdentifierDeclType	char *		3527951	0					
ANR	3527957	Identifier	tmp		3527951	1					
ANR	3527958	IdentifierDeclStatement	char * url ;	1412:1:36091:36101	3527951	1	True				
ANR	3527959	IdentifierDecl	* url		3527951	0					
ANR	3527960	IdentifierDeclType	char *		3527951	0					
ANR	3527961	Identifier	url		3527951	1					
ANR	3527962	IdentifierDeclStatement	MyString name ;	1413:1:36104:36117	3527951	2	True				
ANR	3527963	IdentifierDecl	name		3527951	0					
ANR	3527964	IdentifierDeclType	MyString		3527951	0					
ANR	3527965	Identifier	name		3527951	1					
ANR	3527966	ExpressionStatement	"name . sprintf ( ""HA_%s_LOCK_URL"" , name_in_config_file )"	1416:1:36137:36189	3527951	3	True				
ANR	3527967	CallExpression	"name . sprintf ( ""HA_%s_LOCK_URL"" , name_in_config_file )"		3527951	0					
ANR	3527968	Callee	name . sprintf		3527951	0					
ANR	3527969	MemberAccess	name . sprintf		3527951	0					
ANR	3527970	Identifier	name		3527951	0					
ANR	3527971	Identifier	sprintf		3527951	1					
ANR	3527972	ArgumentList	"""HA_%s_LOCK_URL"""		3527951	1					
ANR	3527973	Argument	"""HA_%s_LOCK_URL"""		3527951	0					
ANR	3527974	PrimaryExpression	"""HA_%s_LOCK_URL"""		3527951	0					
ANR	3527975	Argument	name_in_config_file		3527951	1					
ANR	3527976	Identifier	name_in_config_file		3527951	0					
ANR	3527977	ExpressionStatement	tmp = param ( name . Value ( ) )	1417:1:36192:36219	3527951	4	True				
ANR	3527978	AssignmentExpression	tmp = param ( name . Value ( ) )		3527951	0		=			
ANR	3527979	Identifier	tmp		3527951	0					
ANR	3527980	CallExpression	param ( name . Value ( ) )		3527951	1					
ANR	3527981	Callee	param		3527951	0					
ANR	3527982	Identifier	param		3527951	0					
ANR	3527983	ArgumentList	name . Value ( )		3527951	1					
ANR	3527984	Argument	name . Value ( )		3527951	0					
ANR	3527985	CallExpression	name . Value ( )		3527951	0					
ANR	3527986	Callee	name . Value		3527951	0					
ANR	3527987	MemberAccess	name . Value		3527951	0					
ANR	3527988	Identifier	name		3527951	0					
ANR	3527989	Identifier	Value		3527951	1					
ANR	3527990	ArgumentList			3527951	1					
ANR	3527991	IfStatement	if ( ! tmp )		3527951	5					
ANR	3527992	Condition	! tmp	1418:6:36227:36231	3527951	0	True				
ANR	3527993	UnaryOperationExpression	! tmp		3527951	0					
ANR	3527994	UnaryOperator	!		3527951	0					
ANR	3527995	Identifier	tmp		3527951	1					
ANR	3527996	CompoundStatement		9:14:159:159	3527951	1					
ANR	3527997	ExpressionStatement	"tmp = param ( ""HA_LOCK_URL"" )"	1419:2:36239:36267	3527951	0	True				
ANR	3527998	AssignmentExpression	"tmp = param ( ""HA_LOCK_URL"" )"		3527951	0		=			
ANR	3527999	Identifier	tmp		3527951	0					
ANR	3528000	CallExpression	"param ( ""HA_LOCK_URL"" )"		3527951	1					
ANR	3528001	Callee	param		3527951	0					
ANR	3528002	Identifier	param		3527951	0					
ANR	3528003	ArgumentList	"""HA_LOCK_URL"""		3527951	1					
ANR	3528004	Argument	"""HA_LOCK_URL"""		3527951	0					
ANR	3528005	PrimaryExpression	"""HA_LOCK_URL"""		3527951	0					
ANR	3528006	IfStatement	if ( ! tmp )		3527951	6					
ANR	3528007	Condition	! tmp	1421:6:36278:36282	3527951	0	True				
ANR	3528008	UnaryOperationExpression	! tmp		3527951	0					
ANR	3528009	UnaryOperator	!		3527951	0					
ANR	3528010	Identifier	tmp		3527951	1					
ANR	3528011	CompoundStatement		12:14:210:210	3527951	1					
ANR	3528012	Statement	dprintf	1422:2:36290:36296	3527951	0	True				
ANR	3528013	Statement	(	1422:9:36297:36297	3527951	1	True				
ANR	3528014	Statement	D_ALWAYS	1422:10:36298:36305	3527951	2	True				
ANR	3528015	Statement	","	1422:18:36306:36306	3527951	3	True				
ANR	3528016	Statement	"""Warning: %s listed in HA, """	1422:20:36308:36335	3527951	4	True				
ANR	3528017	Statement	"""but no HA lock URL provided!!\\n"""	1423:4:36341:36373	3527951	5	True				
ANR	3528018	Statement	","	1423:37:36374:36374	3527951	6	True				
ANR	3528019	Statement	name_in_config_file	1424:4:36380:36398	3527951	7	True				
ANR	3528020	Statement	)	1424:24:36400:36400	3527951	8	True				
ANR	3528021	ExpressionStatement		1424:25:36401:36401	3527951	9	True				
ANR	3528022	ReturnStatement	return - 1 ;	1425:2:36405:36414	3527951	10	True				
ANR	3528023	UnaryOperationExpression	- 1		3527951	0					
ANR	3528024	UnaryOperator	-		3527951	0					
ANR	3528025	PrimaryExpression	1		3527951	1					
ANR	3528026	ExpressionStatement	url = tmp	1427:1:36420:36429	3527951	7	True				
ANR	3528027	AssignmentExpression	url = tmp		3527951	0		=			
ANR	3528028	Identifier	url		3527951	0					
ANR	3528029	Identifier	tmp		3527951	1					
ANR	3528030	IdentifierDeclStatement	time_t lock_hold_time = 60 * 60 ;	1430:1:36464:36496	3527951	8	True				
ANR	3528031	IdentifierDecl	lock_hold_time = 60 * 60		3527951	0					
ANR	3528032	IdentifierDeclType	time_t		3527951	0					
ANR	3528033	Identifier	lock_hold_time		3527951	1					
ANR	3528034	AssignmentExpression	lock_hold_time = 60 * 60		3527951	2		=			
ANR	3528035	Identifier	lock_hold_time		3527951	0					
ANR	3528036	MultiplicativeExpression	60 * 60		3527951	1		*			
ANR	3528037	PrimaryExpression	60		3527951	0					
ANR	3528038	PrimaryExpression	60		3527951	1					
ANR	3528039	ExpressionStatement	"name . sprintf ( ""HA_%s_LOCK_HOLD_TIME"" , name_in_config_file )"	1431:1:36511:36570	3527951	9	True				
ANR	3528040	CallExpression	"name . sprintf ( ""HA_%s_LOCK_HOLD_TIME"" , name_in_config_file )"		3527951	0					
ANR	3528041	Callee	name . sprintf		3527951	0					
ANR	3528042	MemberAccess	name . sprintf		3527951	0					
ANR	3528043	Identifier	name		3527951	0					
ANR	3528044	Identifier	sprintf		3527951	1					
ANR	3528045	ArgumentList	"""HA_%s_LOCK_HOLD_TIME"""		3527951	1					
ANR	3528046	Argument	"""HA_%s_LOCK_HOLD_TIME"""		3527951	0					
ANR	3528047	PrimaryExpression	"""HA_%s_LOCK_HOLD_TIME"""		3527951	0					
ANR	3528048	Argument	name_in_config_file		3527951	1					
ANR	3528049	Identifier	name_in_config_file		3527951	0					
ANR	3528050	ExpressionStatement	tmp = param ( name . Value ( ) )	1432:1:36573:36601	3527951	10	True				
ANR	3528051	AssignmentExpression	tmp = param ( name . Value ( ) )		3527951	0		=			
ANR	3528052	Identifier	tmp		3527951	0					
ANR	3528053	CallExpression	param ( name . Value ( ) )		3527951	1					
ANR	3528054	Callee	param		3527951	0					
ANR	3528055	Identifier	param		3527951	0					
ANR	3528056	ArgumentList	name . Value ( )		3527951	1					
ANR	3528057	Argument	name . Value ( )		3527951	0					
ANR	3528058	CallExpression	name . Value ( )		3527951	0					
ANR	3528059	Callee	name . Value		3527951	0					
ANR	3528060	MemberAccess	name . Value		3527951	0					
ANR	3528061	Identifier	name		3527951	0					
ANR	3528062	Identifier	Value		3527951	1					
ANR	3528063	ArgumentList			3527951	1					
ANR	3528064	IfStatement	if ( ! tmp )		3527951	11					
ANR	3528065	Condition	! tmp	1433:6:36609:36613	3527951	0	True				
ANR	3528066	UnaryOperationExpression	! tmp		3527951	0					
ANR	3528067	UnaryOperator	!		3527951	0					
ANR	3528068	Identifier	tmp		3527951	1					
ANR	3528069	CompoundStatement		24:14:541:541	3527951	1					
ANR	3528070	ExpressionStatement	"tmp = param ( ""HA_LOCK_HOLD_TIME"" )"	1434:2:36621:36655	3527951	0	True				
ANR	3528071	AssignmentExpression	"tmp = param ( ""HA_LOCK_HOLD_TIME"" )"		3527951	0		=			
ANR	3528072	Identifier	tmp		3527951	0					
ANR	3528073	CallExpression	"param ( ""HA_LOCK_HOLD_TIME"" )"		3527951	1					
ANR	3528074	Callee	param		3527951	0					
ANR	3528075	Identifier	param		3527951	0					
ANR	3528076	ArgumentList	"""HA_LOCK_HOLD_TIME"""		3527951	1					
ANR	3528077	Argument	"""HA_LOCK_HOLD_TIME"""		3527951	0					
ANR	3528078	PrimaryExpression	"""HA_LOCK_HOLD_TIME"""		3527951	0					
ANR	3528079	IfStatement	if ( tmp )		3527951	12					
ANR	3528080	Condition	tmp	1436:6:36666:36668	3527951	0	True				
ANR	3528081	Identifier	tmp		3527951	0					
ANR	3528082	CompoundStatement		27:12:596:596	3527951	1					
ANR	3528083	IfStatement	if ( ! isdigit ( tmp [ 0 ] ) )		3527951	0					
ANR	3528084	Condition	! isdigit ( tmp [ 0 ] )	1437:7:36681:36698	3527951	0	True				
ANR	3528085	UnaryOperationExpression	! isdigit ( tmp [ 0 ] )		3527951	0					
ANR	3528086	UnaryOperator	!		3527951	0					
ANR	3528087	CallExpression	isdigit ( tmp [ 0 ] )		3527951	1					
ANR	3528088	Callee	isdigit		3527951	0					
ANR	3528089	Identifier	isdigit		3527951	0					
ANR	3528090	ArgumentList	tmp [ 0 ]		3527951	1					
ANR	3528091	Argument	tmp [ 0 ]		3527951	0					
ANR	3528092	ArrayIndexing	tmp [ 0 ]		3527951	0					
ANR	3528093	Identifier	tmp		3527951	0					
ANR	3528094	PrimaryExpression	0		3527951	1					
ANR	3528095	CompoundStatement		28:28:626:626	3527951	1					
ANR	3528096	ExpressionStatement	"dprintf ( D_ALWAYS , ""HA time '%s' is not a number; using default %ld\\n"" , tmp , ( long ) lock_hold_time )"	1438:3:36707:36815	3527951	0	True				
ANR	3528097	CallExpression	"dprintf ( D_ALWAYS , ""HA time '%s' is not a number; using default %ld\\n"" , tmp , ( long ) lock_hold_time )"		3527951	0					
ANR	3528098	Callee	dprintf		3527951	0					
ANR	3528099	Identifier	dprintf		3527951	0					
ANR	3528100	ArgumentList	D_ALWAYS		3527951	1					
ANR	3528101	Argument	D_ALWAYS		3527951	0					
ANR	3528102	Identifier	D_ALWAYS		3527951	0					
ANR	3528103	Argument	"""HA time '%s' is not a number; using default %ld\\n"""		3527951	1					
ANR	3528104	PrimaryExpression	"""HA time '%s' is not a number; using default %ld\\n"""		3527951	0					
ANR	3528105	Argument	tmp		3527951	2					
ANR	3528106	Identifier	tmp		3527951	0					
ANR	3528107	Argument	( long ) lock_hold_time		3527951	3					
ANR	3528108	CastExpression	( long ) lock_hold_time		3527951	0					
ANR	3528109	CastTarget	long		3527951	0					
ANR	3528110	Identifier	lock_hold_time		3527951	1					
ANR	3528111	ElseStatement	else		3527951	0					
ANR	3528112	CompoundStatement		32:9:750:750	3527951	0					
ANR	3528113	ExpressionStatement	lock_hold_time = ( time_t ) atol ( tmp )	1442:3:36831:36868	3527951	0	True				
ANR	3528114	AssignmentExpression	lock_hold_time = ( time_t ) atol ( tmp )		3527951	0		=			
ANR	3528115	Identifier	lock_hold_time		3527951	0					
ANR	3528116	CastExpression	( time_t ) atol ( tmp )		3527951	1					
ANR	3528117	CastTarget	time_t		3527951	0					
ANR	3528118	CallExpression	atol ( tmp )		3527951	1					
ANR	3528119	Callee	atol		3527951	0					
ANR	3528120	Identifier	atol		3527951	0					
ANR	3528121	ArgumentList	tmp		3527951	1					
ANR	3528122	Argument	tmp		3527951	0					
ANR	3528123	Identifier	tmp		3527951	0					
ANR	3528124	ExpressionStatement	free ( tmp )	1444:2:36876:36887	3527951	1	True				
ANR	3528125	CallExpression	free ( tmp )		3527951	0					
ANR	3528126	Callee	free		3527951	0					
ANR	3528127	Identifier	free		3527951	0					
ANR	3528128	ArgumentList	tmp		3527951	1					
ANR	3528129	Argument	tmp		3527951	0					
ANR	3528130	Identifier	tmp		3527951	0					
ANR	3528131	IdentifierDeclStatement	time_t poll_period = 5 * 60 ;	1448:1:36921:36949	3527951	13	True				
ANR	3528132	IdentifierDecl	poll_period = 5 * 60		3527951	0					
ANR	3528133	IdentifierDeclType	time_t		3527951	0					
ANR	3528134	Identifier	poll_period		3527951	1					
ANR	3528135	AssignmentExpression	poll_period = 5 * 60		3527951	2		=			
ANR	3528136	Identifier	poll_period		3527951	0					
ANR	3528137	MultiplicativeExpression	5 * 60		3527951	1		*			
ANR	3528138	PrimaryExpression	5		3527951	0					
ANR	3528139	PrimaryExpression	60		3527951	1					
ANR	3528140	ExpressionStatement	"name . sprintf ( ""HA_%s_POLL_PERIOD"" , name_in_config_file )"	1449:1:36969:37025	3527951	14	True				
ANR	3528141	CallExpression	"name . sprintf ( ""HA_%s_POLL_PERIOD"" , name_in_config_file )"		3527951	0					
ANR	3528142	Callee	name . sprintf		3527951	0					
ANR	3528143	MemberAccess	name . sprintf		3527951	0					
ANR	3528144	Identifier	name		3527951	0					
ANR	3528145	Identifier	sprintf		3527951	1					
ANR	3528146	ArgumentList	"""HA_%s_POLL_PERIOD"""		3527951	1					
ANR	3528147	Argument	"""HA_%s_POLL_PERIOD"""		3527951	0					
ANR	3528148	PrimaryExpression	"""HA_%s_POLL_PERIOD"""		3527951	0					
ANR	3528149	Argument	name_in_config_file		3527951	1					
ANR	3528150	Identifier	name_in_config_file		3527951	0					
ANR	3528151	ExpressionStatement	tmp = param ( name . Value ( ) )	1450:1:37028:37055	3527951	15	True				
ANR	3528152	AssignmentExpression	tmp = param ( name . Value ( ) )		3527951	0		=			
ANR	3528153	Identifier	tmp		3527951	0					
ANR	3528154	CallExpression	param ( name . Value ( ) )		3527951	1					
ANR	3528155	Callee	param		3527951	0					
ANR	3528156	Identifier	param		3527951	0					
ANR	3528157	ArgumentList	name . Value ( )		3527951	1					
ANR	3528158	Argument	name . Value ( )		3527951	0					
ANR	3528159	CallExpression	name . Value ( )		3527951	0					
ANR	3528160	Callee	name . Value		3527951	0					
ANR	3528161	MemberAccess	name . Value		3527951	0					
ANR	3528162	Identifier	name		3527951	0					
ANR	3528163	Identifier	Value		3527951	1					
ANR	3528164	ArgumentList			3527951	1					
ANR	3528165	IfStatement	if ( ! tmp )		3527951	16					
ANR	3528166	Condition	! tmp	1451:6:37063:37067	3527951	0	True				
ANR	3528167	UnaryOperationExpression	! tmp		3527951	0					
ANR	3528168	UnaryOperator	!		3527951	0					
ANR	3528169	Identifier	tmp		3527951	1					
ANR	3528170	CompoundStatement		42:14:995:995	3527951	1					
ANR	3528171	ExpressionStatement	"tmp = param ( ""HA_POLL_PERIOD"" )"	1452:2:37075:37106	3527951	0	True				
ANR	3528172	AssignmentExpression	"tmp = param ( ""HA_POLL_PERIOD"" )"		3527951	0		=			
ANR	3528173	Identifier	tmp		3527951	0					
ANR	3528174	CallExpression	"param ( ""HA_POLL_PERIOD"" )"		3527951	1					
ANR	3528175	Callee	param		3527951	0					
ANR	3528176	Identifier	param		3527951	0					
ANR	3528177	ArgumentList	"""HA_POLL_PERIOD"""		3527951	1					
ANR	3528178	Argument	"""HA_POLL_PERIOD"""		3527951	0					
ANR	3528179	PrimaryExpression	"""HA_POLL_PERIOD"""		3527951	0					
ANR	3528180	IfStatement	if ( tmp )		3527951	17					
ANR	3528181	Condition	tmp	1454:6:37117:37119	3527951	0	True				
ANR	3528182	Identifier	tmp		3527951	0					
ANR	3528183	CompoundStatement		45:12:1047:1047	3527951	1					
ANR	3528184	IfStatement	if ( ! isdigit ( tmp [ 0 ] ) )		3527951	0					
ANR	3528185	Condition	! isdigit ( tmp [ 0 ] )	1455:7:37132:37149	3527951	0	True				
ANR	3528186	UnaryOperationExpression	! isdigit ( tmp [ 0 ] )		3527951	0					
ANR	3528187	UnaryOperator	!		3527951	0					
ANR	3528188	CallExpression	isdigit ( tmp [ 0 ] )		3527951	1					
ANR	3528189	Callee	isdigit		3527951	0					
ANR	3528190	Identifier	isdigit		3527951	0					
ANR	3528191	ArgumentList	tmp [ 0 ]		3527951	1					
ANR	3528192	Argument	tmp [ 0 ]		3527951	0					
ANR	3528193	ArrayIndexing	tmp [ 0 ]		3527951	0					
ANR	3528194	Identifier	tmp		3527951	0					
ANR	3528195	PrimaryExpression	0		3527951	1					
ANR	3528196	CompoundStatement		46:28:1077:1077	3527951	1					
ANR	3528197	ExpressionStatement	"dprintf ( D_ALWAYS , ""HA time '%s' is not a number; using default %ld\\n"" , tmp , ( long ) poll_period )"	1456:3:37158:37263	3527951	0	True				
ANR	3528198	CallExpression	"dprintf ( D_ALWAYS , ""HA time '%s' is not a number; using default %ld\\n"" , tmp , ( long ) poll_period )"		3527951	0					
ANR	3528199	Callee	dprintf		3527951	0					
ANR	3528200	Identifier	dprintf		3527951	0					
ANR	3528201	ArgumentList	D_ALWAYS		3527951	1					
ANR	3528202	Argument	D_ALWAYS		3527951	0					
ANR	3528203	Identifier	D_ALWAYS		3527951	0					
ANR	3528204	Argument	"""HA time '%s' is not a number; using default %ld\\n"""		3527951	1					
ANR	3528205	PrimaryExpression	"""HA time '%s' is not a number; using default %ld\\n"""		3527951	0					
ANR	3528206	Argument	tmp		3527951	2					
ANR	3528207	Identifier	tmp		3527951	0					
ANR	3528208	Argument	( long ) poll_period		3527951	3					
ANR	3528209	CastExpression	( long ) poll_period		3527951	0					
ANR	3528210	CastTarget	long		3527951	0					
ANR	3528211	Identifier	poll_period		3527951	1					
ANR	3528212	ElseStatement	else		3527951	0					
ANR	3528213	CompoundStatement		50:9:1198:1198	3527951	0					
ANR	3528214	ExpressionStatement	poll_period = ( time_t ) atol ( tmp )	1460:3:37279:37313	3527951	0	True				
ANR	3528215	AssignmentExpression	poll_period = ( time_t ) atol ( tmp )		3527951	0		=			
ANR	3528216	Identifier	poll_period		3527951	0					
ANR	3528217	CastExpression	( time_t ) atol ( tmp )		3527951	1					
ANR	3528218	CastTarget	time_t		3527951	0					
ANR	3528219	CallExpression	atol ( tmp )		3527951	1					
ANR	3528220	Callee	atol		3527951	0					
ANR	3528221	Identifier	atol		3527951	0					
ANR	3528222	ArgumentList	tmp		3527951	1					
ANR	3528223	Argument	tmp		3527951	0					
ANR	3528224	Identifier	tmp		3527951	0					
ANR	3528225	ExpressionStatement	free ( tmp )	1462:2:37321:37332	3527951	1	True				
ANR	3528226	CallExpression	free ( tmp )		3527951	0					
ANR	3528227	Callee	free		3527951	0					
ANR	3528228	Identifier	free		3527951	0					
ANR	3528229	ArgumentList	tmp		3527951	1					
ANR	3528230	Argument	tmp		3527951	0					
ANR	3528231	Identifier	tmp		3527951	0					
ANR	3528232	IfStatement	if ( ha_lock )		3527951	18					
ANR	3528233	Condition	ha_lock	1466:6:37376:37382	3527951	0	True				
ANR	3528234	Identifier	ha_lock		3527951	0					
ANR	3528235	CompoundStatement		58:2:1314:1460	3527951	1					
ANR	3528236	IdentifierDeclStatement	"int status = ha_lock -> SetLockParams ( url , name_in_config_file , poll_period , lock_hold_time , true ) ;"	1467:2:37390:37536	3527951	0	True				
ANR	3528237	IdentifierDecl	"status = ha_lock -> SetLockParams ( url , name_in_config_file , poll_period , lock_hold_time , true )"		3527951	0					
ANR	3528238	IdentifierDeclType	int		3527951	0					
ANR	3528239	Identifier	status		3527951	1					
ANR	3528240	AssignmentExpression	"status = ha_lock -> SetLockParams ( url , name_in_config_file , poll_period , lock_hold_time , true )"		3527951	2		=			
ANR	3528241	Identifier	status		3527951	0					
ANR	3528242	CallExpression	"ha_lock -> SetLockParams ( url , name_in_config_file , poll_period , lock_hold_time , true )"		3527951	1					
ANR	3528243	Callee	ha_lock -> SetLockParams		3527951	0					
ANR	3528244	PtrMemberAccess	ha_lock -> SetLockParams		3527951	0					
ANR	3528245	Identifier	ha_lock		3527951	0					
ANR	3528246	Identifier	SetLockParams		3527951	1					
ANR	3528247	ArgumentList	url		3527951	1					
ANR	3528248	Argument	url		3527951	0					
ANR	3528249	Identifier	url		3527951	0					
ANR	3528250	Argument	name_in_config_file		3527951	1					
ANR	3528251	Identifier	name_in_config_file		3527951	0					
ANR	3528252	Argument	poll_period		3527951	2					
ANR	3528253	Identifier	poll_period		3527951	0					
ANR	3528254	Argument	lock_hold_time		3527951	3					
ANR	3528255	Identifier	lock_hold_time		3527951	0					
ANR	3528256	Argument	true		3527951	4					
ANR	3528257	Identifier	true		3527951	0					
ANR	3528258	IfStatement	if ( status )		3527951	1					
ANR	3528259	Condition	status	1472:7:37545:37550	3527951	0	True				
ANR	3528260	Identifier	status		3527951	0					
ANR	3528261	CompoundStatement		63:16:1478:1478	3527951	1					
ANR	3528262	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to change HA lock parameters\\n"" )"	1473:3:37559:37619	3527951	0	True				
ANR	3528263	CallExpression	"dprintf ( D_ALWAYS , ""Failed to change HA lock parameters\\n"" )"		3527951	0					
ANR	3528264	Callee	dprintf		3527951	0					
ANR	3528265	Identifier	dprintf		3527951	0					
ANR	3528266	ArgumentList	D_ALWAYS		3527951	1					
ANR	3528267	Argument	D_ALWAYS		3527951	0					
ANR	3528268	Identifier	D_ALWAYS		3527951	0					
ANR	3528269	Argument	"""Failed to change HA lock parameters\\n"""		3527951	1					
ANR	3528270	PrimaryExpression	"""Failed to change HA lock parameters\\n"""		3527951	0					
ANR	3528271	ElseStatement	else		3527951	0					
ANR	3528272	CompoundStatement		65:9:1554:1554	3527951	0					
ANR	3528273	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Set HA lock for %s; URL='%s' poll=%lds hold=%lds\\n"" , name_in_config_file , url , ( long ) poll_period , ( long ) lock_hold_time )"	1475:3:37635:37797	3527951	0	True				
ANR	3528274	CallExpression	"dprintf ( D_FULLDEBUG , ""Set HA lock for %s; URL='%s' poll=%lds hold=%lds\\n"" , name_in_config_file , url , ( long ) poll_period , ( long ) lock_hold_time )"		3527951	0					
ANR	3528275	Callee	dprintf		3527951	0					
ANR	3528276	Identifier	dprintf		3527951	0					
ANR	3528277	ArgumentList	D_FULLDEBUG		3527951	1					
ANR	3528278	Argument	D_FULLDEBUG		3527951	0					
ANR	3528279	Identifier	D_FULLDEBUG		3527951	0					
ANR	3528280	Argument	"""Set HA lock for %s; URL='%s' poll=%lds hold=%lds\\n"""		3527951	1					
ANR	3528281	PrimaryExpression	"""Set HA lock for %s; URL='%s' poll=%lds hold=%lds\\n"""		3527951	0					
ANR	3528282	Argument	name_in_config_file		3527951	2					
ANR	3528283	Identifier	name_in_config_file		3527951	0					
ANR	3528284	Argument	url		3527951	3					
ANR	3528285	Identifier	url		3527951	0					
ANR	3528286	Argument	( long ) poll_period		3527951	4					
ANR	3528287	CastExpression	( long ) poll_period		3527951	0					
ANR	3528288	CastTarget	long		3527951	0					
ANR	3528289	Identifier	poll_period		3527951	1					
ANR	3528290	Argument	( long ) lock_hold_time		3527951	5					
ANR	3528291	CastExpression	( long ) lock_hold_time		3527951	0					
ANR	3528292	CastTarget	long		3527951	0					
ANR	3528293	Identifier	lock_hold_time		3527951	1					
ANR	3528294	ElseStatement	else		3527951	0					
ANR	3528295	CompoundStatement		71:8:1735:1735	3527951	0					
ANR	3528296	ExpressionStatement	"ha_lock = new CondorLock ( url , name_in_config_file , this , ( LockEvent ) & daemon :: HaLockAcquired , ( LockEvent ) & daemon :: HaLockLost , poll_period , lock_hold_time , true )"	1481:2:37815:38048	3527951	0	True				
ANR	3528297	AssignmentExpression	"ha_lock = new CondorLock ( url , name_in_config_file , this , ( LockEvent ) & daemon :: HaLockAcquired , ( LockEvent ) & daemon :: HaLockLost , poll_period , lock_hold_time , true )"		3527951	0		=			
ANR	3528298	Identifier	ha_lock		3527951	0					
ANR	3528299	Expression	"url , name_in_config_file , this , ( LockEvent ) & daemon :: HaLockAcquired , ( LockEvent ) & daemon :: HaLockLost , poll_period , lock_hold_time , true"		3527951	1					
ANR	3528300	Identifier	url		3527951	0					
ANR	3528301	Expression	"name_in_config_file , this , ( LockEvent ) & daemon :: HaLockAcquired , ( LockEvent ) & daemon :: HaLockLost , poll_period , lock_hold_time , true"		3527951	1					
ANR	3528302	Identifier	name_in_config_file		3527951	0					
ANR	3528303	Expression	"this , ( LockEvent ) & daemon :: HaLockAcquired , ( LockEvent ) & daemon :: HaLockLost , poll_period , lock_hold_time , true"		3527951	1					
ANR	3528304	Identifier	this		3527951	0					
ANR	3528305	Expression	"( LockEvent ) & daemon :: HaLockAcquired , ( LockEvent ) & daemon :: HaLockLost , poll_period , lock_hold_time , true"		3527951	1					
ANR	3528306	CastExpression	( LockEvent ) & daemon :: HaLockAcquired		3527951	0					
ANR	3528307	CastTarget	LockEvent		3527951	0					
ANR	3528308	UnaryOperationExpression	& daemon :: HaLockAcquired		3527951	1					
ANR	3528309	UnaryOperator	&		3527951	0					
ANR	3528310	Identifier	daemon :: HaLockAcquired		3527951	1					
ANR	3528311	Expression	"( LockEvent ) & daemon :: HaLockLost , poll_period , lock_hold_time , true"		3527951	1					
ANR	3528312	CastExpression	( LockEvent ) & daemon :: HaLockLost		3527951	0					
ANR	3528313	CastTarget	LockEvent		3527951	0					
ANR	3528314	UnaryOperationExpression	& daemon :: HaLockLost		3527951	1					
ANR	3528315	UnaryOperator	&		3527951	0					
ANR	3528316	Identifier	daemon :: HaLockLost		3527951	1					
ANR	3528317	Expression	"poll_period , lock_hold_time , true"		3527951	1					
ANR	3528318	Identifier	poll_period		3527951	0					
ANR	3528319	Expression	"lock_hold_time , true"		3527951	1					
ANR	3528320	Identifier	lock_hold_time		3527951	0					
ANR	3528321	Identifier	true		3527951	1					
ANR	3528322	IfStatement	if ( ha_lock )		3527951	1					
ANR	3528323	Condition	ha_lock	1491:7:38106:38112	3527951	0	True				
ANR	3528324	Identifier	ha_lock		3527951	0					
ANR	3528325	CompoundStatement		82:17:2040:2040	3527951	1					
ANR	3528326	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Created HA lock for %s; URL='%s' poll=%lds hold=%lds\\n"" , name_in_config_file , url , ( long ) poll_period , ( long ) lock_hold_time )"	1492:3:38121:38287	3527951	0	True				
ANR	3528327	CallExpression	"dprintf ( D_FULLDEBUG , ""Created HA lock for %s; URL='%s' poll=%lds hold=%lds\\n"" , name_in_config_file , url , ( long ) poll_period , ( long ) lock_hold_time )"		3527951	0					
ANR	3528328	Callee	dprintf		3527951	0					
ANR	3528329	Identifier	dprintf		3527951	0					
ANR	3528330	ArgumentList	D_FULLDEBUG		3527951	1					
ANR	3528331	Argument	D_FULLDEBUG		3527951	0					
ANR	3528332	Identifier	D_FULLDEBUG		3527951	0					
ANR	3528333	Argument	"""Created HA lock for %s; URL='%s' poll=%lds hold=%lds\\n"""		3527951	1					
ANR	3528334	PrimaryExpression	"""Created HA lock for %s; URL='%s' poll=%lds hold=%lds\\n"""		3527951	0					
ANR	3528335	Argument	name_in_config_file		3527951	2					
ANR	3528336	Identifier	name_in_config_file		3527951	0					
ANR	3528337	Argument	url		3527951	3					
ANR	3528338	Identifier	url		3527951	0					
ANR	3528339	Argument	( long ) poll_period		3527951	4					
ANR	3528340	CastExpression	( long ) poll_period		3527951	0					
ANR	3528341	CastTarget	long		3527951	0					
ANR	3528342	Identifier	poll_period		3527951	1					
ANR	3528343	Argument	( long ) lock_hold_time		3527951	5					
ANR	3528344	CastExpression	( long ) lock_hold_time		3527951	0					
ANR	3528345	CastTarget	long		3527951	0					
ANR	3528346	Identifier	lock_hold_time		3527951	1					
ANR	3528347	ExpressionStatement	free ( url )	1498:1:38297:38308	3527951	19	True				
ANR	3528348	CallExpression	free ( url )		3527951	0					
ANR	3528349	Callee	free		3527951	0					
ANR	3528350	Identifier	free		3527951	0					
ANR	3528351	ArgumentList	url		3527951	1					
ANR	3528352	Argument	url		3527951	0					
ANR	3528353	Identifier	url		3527951	0					
ANR	3528354	IfStatement	if ( ! ha_lock )		3527951	20					
ANR	3528355	Condition	! ha_lock	1501:6:38347:38355	3527951	0	True				
ANR	3528356	UnaryOperationExpression	! ha_lock		3527951	0					
ANR	3528357	UnaryOperator	!		3527951	0					
ANR	3528358	Identifier	ha_lock		3527951	1					
ANR	3528359	CompoundStatement		92:18:2283:2283	3527951	1					
ANR	3528360	ExpressionStatement	"dprintf ( D_ALWAYS , ""HA Lock creation failed for URL '%s' / '%s'\\n"" , url , name_in_config_file )"	1502:2:38363:38462	3527951	0	True				
ANR	3528361	CallExpression	"dprintf ( D_ALWAYS , ""HA Lock creation failed for URL '%s' / '%s'\\n"" , url , name_in_config_file )"		3527951	0					
ANR	3528362	Callee	dprintf		3527951	0					
ANR	3528363	Identifier	dprintf		3527951	0					
ANR	3528364	ArgumentList	D_ALWAYS		3527951	1					
ANR	3528365	Argument	D_ALWAYS		3527951	0					
ANR	3528366	Identifier	D_ALWAYS		3527951	0					
ANR	3528367	Argument	"""HA Lock creation failed for URL '%s' / '%s'\\n"""		3527951	1					
ANR	3528368	PrimaryExpression	"""HA Lock creation failed for URL '%s' / '%s'\\n"""		3527951	0					
ANR	3528369	Argument	url		3527951	2					
ANR	3528370	Identifier	url		3527951	0					
ANR	3528371	Argument	name_in_config_file		3527951	3					
ANR	3528372	Identifier	name_in_config_file		3527951	0					
ANR	3528373	ReturnStatement	return - 1 ;	1504:2:38466:38475	3527951	1	True				
ANR	3528374	UnaryOperationExpression	- 1		3527951	0					
ANR	3528375	UnaryOperator	-		3527951	0					
ANR	3528376	PrimaryExpression	1		3527951	1					
ANR	3528377	ReturnStatement	return 0 ;	1507:1:38482:38490	3527951	21	True				
ANR	3528378	PrimaryExpression	0		3527951	0					
ANR	3528379	ReturnType	int		3527951	1					
ANR	3528380	Identifier	daemon :: SetupHighAvailability		3527951	2					
ANR	3528381	ParameterList			3527951	3					
ANR	3528382	CFGEntryNode	ENTRY		3527951		True				
ANR	3528383	CFGExitNode	EXIT		3527951		True				
ANR	3528384	Symbol	name . Value		3527951						
ANR	3528385	Symbol	* ha_lock		3527951						
ANR	3528386	Symbol	* tmp		3527951						
ANR	3528387	Symbol	& daemon :: HaLockLost		3527951						
ANR	3528388	Symbol	lock_hold_time		3527951						
ANR	3528389	Symbol	D_ALWAYS		3527951						
ANR	3528390	Symbol	this		3527951						
ANR	3528391	Symbol	ha_lock		3527951						
ANR	3528392	Symbol	D_FULLDEBUG		3527951						
ANR	3528393	Symbol	name_in_config_file		3527951						
ANR	3528394	Symbol	url		3527951						
ANR	3528395	Symbol	& daemon :: HaLockAcquired		3527951						
ANR	3528396	Symbol	param		3527951						
ANR	3528397	Symbol	tmp		3527951						
ANR	3528398	Symbol	poll_period		3527951						
ANR	3528399	Symbol	ha_lock -> SetLockParams		3527951						
ANR	3528400	Symbol	name		3527951						
ANR	3528401	Symbol	true		3527951						
ANR	3528402	Symbol	isdigit		3527951						
ANR	3528403	Symbol	atol		3527951						
ANR	3528404	Symbol	status		3527951						
ANR	3528405	Function	daemon :: HaLockAcquired	1511:0:38496:38721							
ANR	3528406	FunctionDef	daemon :: HaLockAcquired (LockEventSrc src)		3528405	0					
ANR	3528407	CompoundStatement		1513:0:38543:38721	3528405	0					
ANR	3528408	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""%s: Got HA lock (%s); starting\\n"" , name_in_config_file , ha_lock -> EventSrcString ( src ) )"	1514:1:38546:38659	3528405	0	True				
ANR	3528409	CallExpression	"dprintf ( D_FULLDEBUG , ""%s: Got HA lock (%s); starting\\n"" , name_in_config_file , ha_lock -> EventSrcString ( src ) )"		3528405	0					
ANR	3528410	Callee	dprintf		3528405	0					
ANR	3528411	Identifier	dprintf		3528405	0					
ANR	3528412	ArgumentList	D_FULLDEBUG		3528405	1					
ANR	3528413	Argument	D_FULLDEBUG		3528405	0					
ANR	3528414	Identifier	D_FULLDEBUG		3528405	0					
ANR	3528415	Argument	"""%s: Got HA lock (%s); starting\\n"""		3528405	1					
ANR	3528416	PrimaryExpression	"""%s: Got HA lock (%s); starting\\n"""		3528405	0					
ANR	3528417	Argument	name_in_config_file		3528405	2					
ANR	3528418	Identifier	name_in_config_file		3528405	0					
ANR	3528419	Argument	ha_lock -> EventSrcString ( src )		3528405	3					
ANR	3528420	CallExpression	ha_lock -> EventSrcString ( src )		3528405	0					
ANR	3528421	Callee	ha_lock -> EventSrcString		3528405	0					
ANR	3528422	PtrMemberAccess	ha_lock -> EventSrcString		3528405	0					
ANR	3528423	Identifier	ha_lock		3528405	0					
ANR	3528424	Identifier	EventSrcString		3528405	1					
ANR	3528425	ArgumentList	src		3528405	1					
ANR	3528426	Argument	src		3528405	0					
ANR	3528427	Identifier	src		3528405	0					
ANR	3528428	ReturnStatement	return RealStart ( ) ;	1518:1:38700:38719	3528405	1	True				
ANR	3528429	CallExpression	RealStart ( )		3528405	0					
ANR	3528430	Callee	RealStart		3528405	0					
ANR	3528431	Identifier	RealStart		3528405	0					
ANR	3528432	ArgumentList			3528405	1					
ANR	3528433	ReturnType	int		3528405	1					
ANR	3528434	Identifier	daemon :: HaLockAcquired		3528405	2					
ANR	3528435	ParameterList	LockEventSrc src		3528405	3					
ANR	3528436	Parameter	LockEventSrc src	1512:24:38524:38539	3528405	0	True				
ANR	3528437	ParameterType	LockEventSrc		3528405	0					
ANR	3528438	Identifier	src		3528405	1					
ANR	3528439	CFGEntryNode	ENTRY		3528405		True				
ANR	3528440	CFGExitNode	EXIT		3528405		True				
ANR	3528441	Symbol	* ha_lock		3528405						
ANR	3528442	Symbol	ha_lock -> EventSrcString		3528405						
ANR	3528443	Symbol	src		3528405						
ANR	3528444	Symbol	RealStart		3528405						
ANR	3528445	Symbol	ha_lock		3528405						
ANR	3528446	Symbol	D_FULLDEBUG		3528405						
ANR	3528447	Symbol	name_in_config_file		3528405						
ANR	3528448	Function	daemon :: HaLockLost	1522:0:38725:39230							
ANR	3528449	FunctionDef	daemon :: HaLockLost (LockEventSrc src)		3528448	0					
ANR	3528450	CompoundStatement		1524:0:38768:39230	3528448	0					
ANR	3528451	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""%s: Lost HA lock (%s); stoping\\n"" , name_in_config_file , ha_lock -> EventSrcString ( src ) )"	1525:1:38771:38884	3528448	0	True				
ANR	3528452	CallExpression	"dprintf ( D_FULLDEBUG , ""%s: Lost HA lock (%s); stoping\\n"" , name_in_config_file , ha_lock -> EventSrcString ( src ) )"		3528448	0					
ANR	3528453	Callee	dprintf		3528448	0					
ANR	3528454	Identifier	dprintf		3528448	0					
ANR	3528455	ArgumentList	D_FULLDEBUG		3528448	1					
ANR	3528456	Argument	D_FULLDEBUG		3528448	0					
ANR	3528457	Identifier	D_FULLDEBUG		3528448	0					
ANR	3528458	Argument	"""%s: Lost HA lock (%s); stoping\\n"""		3528448	1					
ANR	3528459	PrimaryExpression	"""%s: Lost HA lock (%s); stoping\\n"""		3528448	0					
ANR	3528460	Argument	name_in_config_file		3528448	2					
ANR	3528461	Identifier	name_in_config_file		3528448	0					
ANR	3528462	Argument	ha_lock -> EventSrcString ( src )		3528448	3					
ANR	3528463	CallExpression	ha_lock -> EventSrcString ( src )		3528448	0					
ANR	3528464	Callee	ha_lock -> EventSrcString		3528448	0					
ANR	3528465	PtrMemberAccess	ha_lock -> EventSrcString		3528448	0					
ANR	3528466	Identifier	ha_lock		3528448	0					
ANR	3528467	Identifier	EventSrcString		3528448	1					
ANR	3528468	ArgumentList	src		3528448	1					
ANR	3528469	Argument	src		3528448	0					
ANR	3528470	Identifier	src		3528448	0					
ANR	3528471	IfStatement	if ( LOCK_SRC_APP == src )		3528448	1					
ANR	3528472	Condition	LOCK_SRC_APP == src	1527:6:38892:38910	3528448	0	True				
ANR	3528473	EqualityExpression	LOCK_SRC_APP == src		3528448	0		==			
ANR	3528474	Identifier	LOCK_SRC_APP		3528448	0					
ANR	3528475	Identifier	src		3528448	1					
ANR	3528476	CompoundStatement		4:28:145:145	3528448	1					
ANR	3528477	ReturnStatement	return 0 ;	1530:2:39019:39027	3528448	0	True				
ANR	3528478	PrimaryExpression	0		3528448	0					
ANR	3528479	ExpressionStatement	"dprintf ( D_ALWAYS , ""%s: HA poll detected broken lock: emergency stop!!\\n"" , name_in_config_file )"	1534:1:39099:39203	3528448	2	True				
ANR	3528480	CallExpression	"dprintf ( D_ALWAYS , ""%s: HA poll detected broken lock: emergency stop!!\\n"" , name_in_config_file )"		3528448	0					
ANR	3528481	Callee	dprintf		3528448	0					
ANR	3528482	Identifier	dprintf		3528448	0					
ANR	3528483	ArgumentList	D_ALWAYS		3528448	1					
ANR	3528484	Argument	D_ALWAYS		3528448	0					
ANR	3528485	Identifier	D_ALWAYS		3528448	0					
ANR	3528486	Argument	"""%s: HA poll detected broken lock: emergency stop!!\\n"""		3528448	1					
ANR	3528487	PrimaryExpression	"""%s: HA poll detected broken lock: emergency stop!!\\n"""		3528448	0					
ANR	3528488	Argument	name_in_config_file		3528448	2					
ANR	3528489	Identifier	name_in_config_file		3528448	0					
ANR	3528490	ExpressionStatement	StopFast ( )	1537:1:39206:39217	3528448	3	True				
ANR	3528491	CallExpression	StopFast ( )		3528448	0					
ANR	3528492	Callee	StopFast		3528448	0					
ANR	3528493	Identifier	StopFast		3528448	0					
ANR	3528494	ArgumentList			3528448	1					
ANR	3528495	ReturnStatement	return 0 ;	1538:1:39220:39228	3528448	4	True				
ANR	3528496	PrimaryExpression	0		3528448	0					
ANR	3528497	ReturnType	int		3528448	1					
ANR	3528498	Identifier	daemon :: HaLockLost		3528448	2					
ANR	3528499	ParameterList	LockEventSrc src		3528448	3					
ANR	3528500	Parameter	LockEventSrc src	1523:20:38749:38764	3528448	0	True				
ANR	3528501	ParameterType	LockEventSrc		3528448	0					
ANR	3528502	Identifier	src		3528448	1					
ANR	3528503	CFGEntryNode	ENTRY		3528448		True				
ANR	3528504	CFGExitNode	EXIT		3528448		True				
ANR	3528505	Symbol	* ha_lock		3528448						
ANR	3528506	Symbol	LOCK_SRC_APP		3528448						
ANR	3528507	Symbol	ha_lock -> EventSrcString		3528448						
ANR	3528508	Symbol	src		3528448						
ANR	3528509	Symbol	D_ALWAYS		3528448						
ANR	3528510	Symbol	ha_lock		3528448						
ANR	3528511	Symbol	D_FULLDEBUG		3528448						
ANR	3528512	Symbol	name_in_config_file		3528448						
ANR	3528513	Function	daemon :: SetupController	1542:0:39234:39769							
ANR	3528514	FunctionDef	daemon :: SetupController ()		3528513	0					
ANR	3528515	CompoundStatement		1544:0:39270:39769	3528513	0					
ANR	3528516	IfStatement	if ( ! controller_name )		3528513	0					
ANR	3528517	Condition	! controller_name	1545:6:39278:39293	3528513	0	True				
ANR	3528518	UnaryOperationExpression	! controller_name		3528513	0					
ANR	3528519	UnaryOperator	!		3528513	0					
ANR	3528520	Identifier	controller_name		3528513	1					
ANR	3528521	CompoundStatement		2:25:26:26	3528513	1					
ANR	3528522	ReturnStatement	return 0 ;	1546:2:39301:39309	3528513	0	True				
ANR	3528523	PrimaryExpression	0		3528513	0					
ANR	3528524	ExpressionStatement	controller = daemons . FindDaemon ( controller_name )	1550:1:39353:39403	3528513	1	True				
ANR	3528525	AssignmentExpression	controller = daemons . FindDaemon ( controller_name )		3528513	0		=			
ANR	3528526	Identifier	controller		3528513	0					
ANR	3528527	CallExpression	daemons . FindDaemon ( controller_name )		3528513	1					
ANR	3528528	Callee	daemons . FindDaemon		3528513	0					
ANR	3528529	MemberAccess	daemons . FindDaemon		3528513	0					
ANR	3528530	Identifier	daemons		3528513	0					
ANR	3528531	Identifier	FindDaemon		3528513	1					
ANR	3528532	ArgumentList	controller_name		3528513	1					
ANR	3528533	Argument	controller_name		3528513	0					
ANR	3528534	Identifier	controller_name		3528513	0					
ANR	3528535	IfStatement	if ( ! controller )		3528513	2					
ANR	3528536	Condition	! controller	1551:6:39411:39422	3528513	0	True				
ANR	3528537	UnaryOperationExpression	! controller		3528513	0					
ANR	3528538	UnaryOperator	!		3528513	0					
ANR	3528539	Identifier	controller		3528513	1					
ANR	3528540	CompoundStatement		8:21:155:155	3528513	1					
ANR	3528541	ExpressionStatement	"dprintf ( D_ALWAYS , ""%s: Can't find my controller daemon '%s'\\n"" , name_in_config_file , controller_name )"	1552:2:39430:39543	3528513	0	True				
ANR	3528542	CallExpression	"dprintf ( D_ALWAYS , ""%s: Can't find my controller daemon '%s'\\n"" , name_in_config_file , controller_name )"		3528513	0					
ANR	3528543	Callee	dprintf		3528513	0					
ANR	3528544	Identifier	dprintf		3528513	0					
ANR	3528545	ArgumentList	D_ALWAYS		3528513	1					
ANR	3528546	Argument	D_ALWAYS		3528513	0					
ANR	3528547	Identifier	D_ALWAYS		3528513	0					
ANR	3528548	Argument	"""%s: Can't find my controller daemon '%s'\\n"""		3528513	1					
ANR	3528549	PrimaryExpression	"""%s: Can't find my controller daemon '%s'\\n"""		3528513	0					
ANR	3528550	Argument	name_in_config_file		3528513	2					
ANR	3528551	Identifier	name_in_config_file		3528513	0					
ANR	3528552	Argument	controller_name		3528513	3					
ANR	3528553	Identifier	controller_name		3528513	0					
ANR	3528554	ReturnStatement	return - 1 ;	1555:2:39547:39556	3528513	1	True				
ANR	3528555	UnaryOperationExpression	- 1		3528513	0					
ANR	3528556	UnaryOperator	-		3528513	0					
ANR	3528557	PrimaryExpression	1		3528513	1					
ANR	3528558	IfStatement	if ( controller -> RegisterControllee ( this ) < 0 )		3528513	3					
ANR	3528559	Condition	controller -> RegisterControllee ( this ) < 0	1557:6:39567:39608	3528513	0	True				
ANR	3528560	RelationalExpression	controller -> RegisterControllee ( this ) < 0		3528513	0		<			
ANR	3528561	CallExpression	controller -> RegisterControllee ( this )		3528513	0					
ANR	3528562	Callee	controller -> RegisterControllee		3528513	0					
ANR	3528563	PtrMemberAccess	controller -> RegisterControllee		3528513	0					
ANR	3528564	Identifier	controller		3528513	0					
ANR	3528565	Identifier	RegisterControllee		3528513	1					
ANR	3528566	ArgumentList	this		3528513	1					
ANR	3528567	Argument	this		3528513	0					
ANR	3528568	Identifier	this		3528513	0					
ANR	3528569	PrimaryExpression	0		3528513	1					
ANR	3528570	CompoundStatement		14:51:341:341	3528513	1					
ANR	3528571	ExpressionStatement	"dprintf ( D_ALWAYS , ""%s: Can't register controller daemon '%s'\\n"" , name_in_config_file , controller_name )"	1558:2:39616:39730	3528513	0	True				
ANR	3528572	CallExpression	"dprintf ( D_ALWAYS , ""%s: Can't register controller daemon '%s'\\n"" , name_in_config_file , controller_name )"		3528513	0					
ANR	3528573	Callee	dprintf		3528513	0					
ANR	3528574	Identifier	dprintf		3528513	0					
ANR	3528575	ArgumentList	D_ALWAYS		3528513	1					
ANR	3528576	Argument	D_ALWAYS		3528513	0					
ANR	3528577	Identifier	D_ALWAYS		3528513	0					
ANR	3528578	Argument	"""%s: Can't register controller daemon '%s'\\n"""		3528513	1					
ANR	3528579	PrimaryExpression	"""%s: Can't register controller daemon '%s'\\n"""		3528513	0					
ANR	3528580	Argument	name_in_config_file		3528513	2					
ANR	3528581	Identifier	name_in_config_file		3528513	0					
ANR	3528582	Argument	controller_name		3528513	3					
ANR	3528583	Identifier	controller_name		3528513	0					
ANR	3528584	ReturnStatement	return - 1 ;	1561:2:39734:39743	3528513	1	True				
ANR	3528585	UnaryOperationExpression	- 1		3528513	0					
ANR	3528586	UnaryOperator	-		3528513	0					
ANR	3528587	PrimaryExpression	1		3528513	1					
ANR	3528588	ReturnStatement	return 0 ;	1565:1:39759:39767	3528513	4	True				
ANR	3528589	PrimaryExpression	0		3528513	0					
ANR	3528590	ReturnType	int		3528513	1					
ANR	3528591	Identifier	daemon :: SetupController		3528513	2					
ANR	3528592	ParameterList			3528513	3					
ANR	3528593	CFGEntryNode	ENTRY		3528513		True				
ANR	3528594	CFGExitNode	EXIT		3528513		True				
ANR	3528595	Symbol	controller		3528513						
ANR	3528596	Symbol	controller_name		3528513						
ANR	3528597	Symbol	daemons		3528513						
ANR	3528598	Symbol	D_ALWAYS		3528513						
ANR	3528599	Symbol	this		3528513						
ANR	3528600	Symbol	daemons . FindDaemon		3528513						
ANR	3528601	Symbol	* controller		3528513						
ANR	3528602	Symbol	name_in_config_file		3528513						
ANR	3528603	Symbol	controller -> RegisterControllee		3528513						
ANR	3528604	Function	daemon :: RegisterControllee	1568:0:39772:39951							
ANR	3528605	FunctionDef	daemon :: RegisterControllee (class daemon * controllee)		3528604	0					
ANR	3528606	CompoundStatement		1570:0:39831:39951	3528604	0					
ANR	3528607	IfStatement	if ( num_controllees >= MAX_CONTROLLEES )		3528604	0					
ANR	3528608	Condition	num_controllees >= MAX_CONTROLLEES	1571:6:39839:39872	3528604	0	True				
ANR	3528609	RelationalExpression	num_controllees >= MAX_CONTROLLEES		3528604	0		>=			
ANR	3528610	Identifier	num_controllees		3528604	0					
ANR	3528611	Identifier	MAX_CONTROLLEES		3528604	1					
ANR	3528612	CompoundStatement		2:43:44:44	3528604	1					
ANR	3528613	ReturnStatement	return - 1 ;	1572:2:39880:39889	3528604	0	True				
ANR	3528614	UnaryOperationExpression	- 1		3528604	0					
ANR	3528615	UnaryOperator	-		3528604	0					
ANR	3528616	PrimaryExpression	1		3528604	1					
ANR	3528617	ExpressionStatement	controllees [ num_controllees ++ ] = controllee	1574:1:39895:39938	3528604	1	True				
ANR	3528618	AssignmentExpression	controllees [ num_controllees ++ ] = controllee		3528604	0		=			
ANR	3528619	ArrayIndexing	controllees [ num_controllees ++ ]		3528604	0					
ANR	3528620	Identifier	controllees		3528604	0					
ANR	3528621	PostIncDecOperationExpression	num_controllees ++		3528604	1					
ANR	3528622	Identifier	num_controllees		3528604	0					
ANR	3528623	IncDec	++		3528604	1					
ANR	3528624	Identifier	controllee		3528604	1					
ANR	3528625	ReturnStatement	return 0 ;	1575:1:39941:39949	3528604	2	True				
ANR	3528626	PrimaryExpression	0		3528604	0					
ANR	3528627	ReturnType	int		3528604	1					
ANR	3528628	Identifier	daemon :: RegisterControllee		3528604	2					
ANR	3528629	ParameterList	class daemon * controllee		3528604	3					
ANR	3528630	Parameter	class daemon * controllee	1569:28:39804:39827	3528604	0	True				
ANR	3528631	ParameterType	class daemon *		3528604	0					
ANR	3528632	Identifier	controllee		3528604	1					
ANR	3528633	CFGEntryNode	ENTRY		3528604		True				
ANR	3528634	CFGExitNode	EXIT		3528604		True				
ANR	3528635	Symbol	controllee		3528604						
ANR	3528636	Symbol	num_controllees		3528604						
ANR	3528637	Symbol	controllees		3528604						
ANR	3528638	Symbol	MAX_CONTROLLEES		3528604						
ANR	3528639	Symbol	* controllees		3528604						
ANR	3528640	Function	Daemons :: Daemons	1583:0:40126:40395							
ANR	3528641	FunctionDef	Daemons :: Daemons ()		3528640	0					
ANR	3528642	CompoundStatement		1584:0:40145:40395	3528640	0					
ANR	3528643	ExpressionStatement	check_new_exec_tid = - 1	1585:1:40148:40171	3528640	0	True				
ANR	3528644	AssignmentExpression	check_new_exec_tid = - 1		3528640	0		=			
ANR	3528645	Identifier	check_new_exec_tid		3528640	0					
ANR	3528646	UnaryOperationExpression	- 1		3528640	1					
ANR	3528647	UnaryOperator	-		3528640	0					
ANR	3528648	PrimaryExpression	1		3528640	1					
ANR	3528649	ExpressionStatement	update_tid = - 1	1586:1:40174:40189	3528640	1	True				
ANR	3528650	AssignmentExpression	update_tid = - 1		3528640	0		=			
ANR	3528651	Identifier	update_tid		3528640	0					
ANR	3528652	UnaryOperationExpression	- 1		3528640	1					
ANR	3528653	UnaryOperator	-		3528640	0					
ANR	3528654	PrimaryExpression	1		3528640	1					
ANR	3528655	ExpressionStatement	preen_tid = - 1	1587:1:40192:40206	3528640	2	True				
ANR	3528656	AssignmentExpression	preen_tid = - 1		3528640	0		=			
ANR	3528657	Identifier	preen_tid		3528640	0					
ANR	3528658	UnaryOperationExpression	- 1		3528640	1					
ANR	3528659	UnaryOperator	-		3528640	0					
ANR	3528660	PrimaryExpression	1		3528640	1					
ANR	3528661	ExpressionStatement	reaper = NO_R	1588:1:40209:40222	3528640	3	True				
ANR	3528662	AssignmentExpression	reaper = NO_R		3528640	0		=			
ANR	3528663	Identifier	reaper		3528640	0					
ANR	3528664	Identifier	NO_R		3528640	1					
ANR	3528665	ExpressionStatement	all_daemons_gone_action = MASTER_RESET	1589:1:40225:40263	3528640	4	True				
ANR	3528666	AssignmentExpression	all_daemons_gone_action = MASTER_RESET		3528640	0		=			
ANR	3528667	Identifier	all_daemons_gone_action		3528640	0					
ANR	3528668	Identifier	MASTER_RESET		3528640	1					
ANR	3528669	ExpressionStatement	immediate_restart = FALSE	1590:1:40266:40291	3528640	5	True				
ANR	3528670	AssignmentExpression	immediate_restart = FALSE		3528640	0		=			
ANR	3528671	Identifier	immediate_restart		3528640	0					
ANR	3528672	Identifier	FALSE		3528640	1					
ANR	3528673	ExpressionStatement	immediate_restart_master = FALSE	1591:1:40294:40326	3528640	6	True				
ANR	3528674	AssignmentExpression	immediate_restart_master = FALSE		3528640	0		=			
ANR	3528675	Identifier	immediate_restart_master		3528640	0					
ANR	3528676	Identifier	FALSE		3528640	1					
ANR	3528677	ExpressionStatement	prevLHF = 0	1592:1:40329:40340	3528640	7	True				
ANR	3528678	AssignmentExpression	prevLHF = 0		3528640	0		=			
ANR	3528679	Identifier	prevLHF		3528640	0					
ANR	3528680	PrimaryExpression	0		3528640	1					
ANR	3528681	ExpressionStatement	m_retry_start_all_daemons_tid = - 1	1593:1:40343:40377	3528640	8	True				
ANR	3528682	AssignmentExpression	m_retry_start_all_daemons_tid = - 1		3528640	0		=			
ANR	3528683	Identifier	m_retry_start_all_daemons_tid		3528640	0					
ANR	3528684	UnaryOperationExpression	- 1		3528640	1					
ANR	3528685	UnaryOperator	-		3528640	0					
ANR	3528686	PrimaryExpression	1		3528640	1					
ANR	3528687	ExpressionStatement	master = NULL	1594:1:40380:40393	3528640	9	True				
ANR	3528688	AssignmentExpression	master = NULL		3528640	0		=			
ANR	3528689	Identifier	master		3528640	0					
ANR	3528690	Identifier	NULL		3528640	1					
ANR	3528691	Identifier	Daemons :: Daemons		3528640	1					
ANR	3528692	ParameterList			3528640	2					
ANR	3528693	CFGEntryNode	ENTRY		3528640		True				
ANR	3528694	CFGExitNode	EXIT		3528640		True				
ANR	3528695	Symbol	m_retry_start_all_daemons_tid		3528640						
ANR	3528696	Symbol	NULL		3528640						
ANR	3528697	Symbol	MASTER_RESET		3528640						
ANR	3528698	Symbol	immediate_restart		3528640						
ANR	3528699	Symbol	reaper		3528640						
ANR	3528700	Symbol	check_new_exec_tid		3528640						
ANR	3528701	Symbol	master		3528640						
ANR	3528702	Symbol	NO_R		3528640						
ANR	3528703	Symbol	immediate_restart_master		3528640						
ANR	3528704	Symbol	update_tid		3528640						
ANR	3528705	Symbol	all_daemons_gone_action		3528640						
ANR	3528706	Symbol	FALSE		3528640						
ANR	3528707	Symbol	preen_tid		3528640						
ANR	3528708	Symbol	prevLHF		3528640						
ANR	3528709	Function	Daemons :: RegisterDaemon	1598:0:40399:40704							
ANR	3528710	FunctionDef	Daemons :: RegisterDaemon (class daemon * d)		3528709	0					
ANR	3528711	CompoundStatement		1600:0:40445:40704	3528709	0					
ANR	3528712	IdentifierDeclStatement	"std :: pair < std :: map < std :: string , class daemon * > :: iterator , bool > ret ;"	1601:1:40448:40513	3528709	0	True				
ANR	3528713	IdentifierDecl	ret		3528709	0					
ANR	3528714	IdentifierDeclType	"std :: pair < std :: map < std :: string , class daemon * > :: iterator , bool >"		3528709	0					
ANR	3528715	Identifier	ret		3528709	1					
ANR	3528716	Statement	ret	1603:1:40517:40519	3528709	1	True				
ANR	3528717	Statement	=	1603:5:40521:40521	3528709	2	True				
ANR	3528718	Statement	daemon_ptr	1603:7:40523:40532	3528709	3	True				
ANR	3528719	Statement	.	1603:17:40533:40533	3528709	4	True				
ANR	3528720	Statement	insert	1603:18:40534:40539	3528709	5	True				
ANR	3528721	Statement	(	1603:24:40540:40540	3528709	6	True				
ANR	3528722	Statement	std	1603:26:40542:40544	3528709	7	True				
ANR	3528723	Statement	::	1603:29:40545:40546	3528709	8	True				
ANR	3528724	Statement	pair	1603:31:40547:40550	3528709	9	True				
ANR	3528725	Statement	<	1603:35:40551:40551	3528709	10	True				
ANR	3528726	Statement	char	1603:36:40552:40555	3528709	11	True				
ANR	3528727	Statement	*	1603:40:40556:40556	3528709	12	True				
ANR	3528728	Statement	","	1603:41:40557:40557	3528709	13	True				
ANR	3528729	Statement	class	1603:43:40559:40563	3528709	14	True				
ANR	3528730	Statement	daemon	1603:49:40565:40570	3528709	15	True				
ANR	3528731	Statement	*	1603:55:40571:40571	3528709	16	True				
ANR	3528732	Statement	>	1603:56:40572:40572	3528709	17	True				
ANR	3528733	Statement	(	1603:57:40573:40573	3528709	18	True				
ANR	3528734	Statement	d	1603:58:40574:40574	3528709	19	True				
ANR	3528735	Statement	->	1603:59:40575:40576	3528709	20	True				
ANR	3528736	Statement	name_in_config_file	1603:61:40577:40595	3528709	21	True				
ANR	3528737	Statement	","	1603:80:40596:40596	3528709	22	True				
ANR	3528738	Statement	d	1603:82:40598:40598	3528709	23	True				
ANR	3528739	Statement	)	1603:83:40599:40599	3528709	24	True				
ANR	3528740	Statement	)	1603:85:40601:40601	3528709	25	True				
ANR	3528741	ExpressionStatement		1603:86:40602:40602	3528709	26	True				
ANR	3528742	IfStatement	if ( ret . second == false )		3528709	27					
ANR	3528743	Condition	ret . second == false	1604:5:40609:40627	3528709	0	True				
ANR	3528744	EqualityExpression	ret . second == false		3528709	0		==			
ANR	3528745	MemberAccess	ret . second		3528709	0					
ANR	3528746	Identifier	ret		3528709	0					
ANR	3528747	Identifier	second		3528709	1					
ANR	3528748	Identifier	false		3528709	1					
ANR	3528749	CompoundStatement		5:27:185:185	3528709	1					
ANR	3528750	ExpressionStatement	"EXCEPT ( ""Registering daemon %s failed"" , d -> name_in_config_file )"	1605:2:40635:40699	3528709	0	True				
ANR	3528751	CallExpression	"EXCEPT ( ""Registering daemon %s failed"" , d -> name_in_config_file )"		3528709	0					
ANR	3528752	Callee	EXCEPT		3528709	0					
ANR	3528753	Identifier	EXCEPT		3528709	0					
ANR	3528754	ArgumentList	"""Registering daemon %s failed"""		3528709	1					
ANR	3528755	Argument	"""Registering daemon %s failed"""		3528709	0					
ANR	3528756	PrimaryExpression	"""Registering daemon %s failed"""		3528709	0					
ANR	3528757	Argument	d -> name_in_config_file		3528709	1					
ANR	3528758	PtrMemberAccess	d -> name_in_config_file		3528709	0					
ANR	3528759	Identifier	d		3528709	0					
ANR	3528760	Identifier	name_in_config_file		3528709	1					
ANR	3528761	ReturnType	void		3528709	1					
ANR	3528762	Identifier	Daemons :: RegisterDaemon		3528709	2					
ANR	3528763	ParameterList	class daemon * d		3528709	3					
ANR	3528764	Parameter	class daemon * d	1599:24:40428:40442	3528709	0	True				
ANR	3528765	ParameterType	class daemon *		3528709	0					
ANR	3528766	Identifier	d		3528709	1					
ANR	3528767	CFGEntryNode	ENTRY		3528709		True				
ANR	3528768	CFGExitNode	EXIT		3528709		True				
ANR	3528769	Symbol	ret		3528709						
ANR	3528770	Symbol	ret . second		3528709						
ANR	3528771	Symbol	d		3528709						
ANR	3528772	Symbol	d -> name_in_config_file		3528709						
ANR	3528773	Symbol	false		3528709						
ANR	3528774	Symbol	* d		3528709						
ANR	3528775	Function	Daemons :: SetupControllers	1609:0:40707:41088							
ANR	3528776	FunctionDef	Daemons :: SetupControllers ()		3528775	0					
ANR	3528777	CompoundStatement		1611:0:40745:41088	3528775	0					
ANR	3528778	IdentifierDeclStatement	"std :: map < std :: string , class daemon * > :: iterator iter ;"	1613:1:40777:40828	3528775	0	True				
ANR	3528779	IdentifierDecl	iter		3528775	0					
ANR	3528780	IdentifierDeclType	"std :: map < std :: string , class daemon * > :: iterator"		3528775	0					
ANR	3528781	Identifier	iter		3528775	1					
ANR	3528782	ForStatement	for ( iter = daemon_ptr . begin ( ) ; iter != daemon_ptr . end ( ) ; iter ++ )		3528775	1					
ANR	3528783	ForInit	iter = daemon_ptr . begin ( ) ;	1615:6:40837:40862	3528775	0	True				
ANR	3528784	AssignmentExpression	iter = daemon_ptr . begin ( )		3528775	0		=			
ANR	3528785	Identifier	iter		3528775	0					
ANR	3528786	CallExpression	daemon_ptr . begin ( )		3528775	1					
ANR	3528787	Callee	daemon_ptr . begin		3528775	0					
ANR	3528788	MemberAccess	daemon_ptr . begin		3528775	0					
ANR	3528789	Identifier	daemon_ptr		3528775	0					
ANR	3528790	Identifier	begin		3528775	1					
ANR	3528791	ArgumentList			3528775	1					
ANR	3528792	Condition	iter != daemon_ptr . end ( )	1615:33:40864:40887	3528775	1	True				
ANR	3528793	EqualityExpression	iter != daemon_ptr . end ( )		3528775	0		!=			
ANR	3528794	Identifier	iter		3528775	0					
ANR	3528795	CallExpression	daemon_ptr . end ( )		3528775	1					
ANR	3528796	Callee	daemon_ptr . end		3528775	0					
ANR	3528797	MemberAccess	daemon_ptr . end		3528775	0					
ANR	3528798	Identifier	daemon_ptr		3528775	0					
ANR	3528799	Identifier	end		3528775	1					
ANR	3528800	ArgumentList			3528775	1					
ANR	3528801	PostIncDecOperationExpression	iter ++	1615:59:40890:40895	3528775	2	True				
ANR	3528802	Identifier	iter		3528775	0					
ANR	3528803	IncDec	++		3528775	1					
ANR	3528804	CompoundStatement		5:68:153:153	3528775	3					
ANR	3528805	IfStatement	if ( iter -> second -> SetupController ( ) < 0 )		3528775	0					
ANR	3528806	Condition	iter -> second -> SetupController ( ) < 0	1616:7:40908:40943	3528775	0	True				
ANR	3528807	RelationalExpression	iter -> second -> SetupController ( ) < 0		3528775	0		<			
ANR	3528808	CallExpression	iter -> second -> SetupController ( )		3528775	0					
ANR	3528809	Callee	iter -> second -> SetupController		3528775	0					
ANR	3528810	PtrMemberAccess	iter -> second -> SetupController		3528775	0					
ANR	3528811	PtrMemberAccess	iter -> second		3528775	0					
ANR	3528812	Identifier	iter		3528775	0					
ANR	3528813	Identifier	second		3528775	1					
ANR	3528814	Identifier	SetupController		3528775	1					
ANR	3528815	ArgumentList			3528775	1					
ANR	3528816	PrimaryExpression	0		3528775	1					
ANR	3528817	CompoundStatement		6:46:201:201	3528775	1					
ANR	3528818	ExpressionStatement	"dprintf ( D_ALWAYS , ""SetupControllers: Setup for daemon %s failed\\n"" , iter -> first . c_str ( ) )"	1617:3:40952:41054	3528775	0	True				
ANR	3528819	CallExpression	"dprintf ( D_ALWAYS , ""SetupControllers: Setup for daemon %s failed\\n"" , iter -> first . c_str ( ) )"		3528775	0					
ANR	3528820	Callee	dprintf		3528775	0					
ANR	3528821	Identifier	dprintf		3528775	0					
ANR	3528822	ArgumentList	D_ALWAYS		3528775	1					
ANR	3528823	Argument	D_ALWAYS		3528775	0					
ANR	3528824	Identifier	D_ALWAYS		3528775	0					
ANR	3528825	Argument	"""SetupControllers: Setup for daemon %s failed\\n"""		3528775	1					
ANR	3528826	PrimaryExpression	"""SetupControllers: Setup for daemon %s failed\\n"""		3528775	0					
ANR	3528827	Argument	iter -> first . c_str ( )		3528775	2					
ANR	3528828	CallExpression	iter -> first . c_str ( )		3528775	0					
ANR	3528829	Callee	iter -> first . c_str		3528775	0					
ANR	3528830	MemberAccess	iter -> first . c_str		3528775	0					
ANR	3528831	PtrMemberAccess	iter -> first		3528775	0					
ANR	3528832	Identifier	iter		3528775	0					
ANR	3528833	Identifier	first		3528775	1					
ANR	3528834	Identifier	c_str		3528775	1					
ANR	3528835	ArgumentList			3528775	1					
ANR	3528836	ReturnStatement	return - 1 ;	1620:3:41059:41068	3528775	1	True				
ANR	3528837	UnaryOperationExpression	- 1		3528775	0					
ANR	3528838	UnaryOperator	-		3528775	0					
ANR	3528839	PrimaryExpression	1		3528775	1					
ANR	3528840	ReturnStatement	return 0 ;	1623:1:41078:41086	3528775	2	True				
ANR	3528841	PrimaryExpression	0		3528775	0					
ANR	3528842	ReturnType	int		3528775	1					
ANR	3528843	Identifier	Daemons :: SetupControllers		3528775	2					
ANR	3528844	ParameterList			3528775	3					
ANR	3528845	CFGEntryNode	ENTRY		3528775		True				
ANR	3528846	CFGExitNode	EXIT		3528775		True				
ANR	3528847	Symbol	* iter -> second		3528775						
ANR	3528848	Symbol	* iter		3528775						
ANR	3528849	Symbol	daemon_ptr		3528775						
ANR	3528850	Symbol	daemon_ptr . begin		3528775						
ANR	3528851	Symbol	iter -> first		3528775						
ANR	3528852	Symbol	iter -> second -> SetupController		3528775						
ANR	3528853	Symbol	D_ALWAYS		3528775						
ANR	3528854	Symbol	iter		3528775						
ANR	3528855	Symbol	iter -> first . c_str		3528775						
ANR	3528856	Symbol	daemon_ptr . end		3528775						
ANR	3528857	Symbol	* * iter		3528775						
ANR	3528858	Symbol	iter -> second		3528775						
ANR	3528859	Function	Daemons :: InitParams	1626:0:41091:41278							
ANR	3528860	FunctionDef	Daemons :: InitParams ()		3528859	0					
ANR	3528861	CompoundStatement		1628:0:41118:41278	3528859	0					
ANR	3528862	IdentifierDeclStatement	"std :: map < std :: string , class daemon * > :: iterator iter ;"	1629:1:41121:41172	3528859	0	True				
ANR	3528863	IdentifierDecl	iter		3528859	0					
ANR	3528864	IdentifierDeclType	"std :: map < std :: string , class daemon * > :: iterator"		3528859	0					
ANR	3528865	Identifier	iter		3528859	1					
ANR	3528866	ForStatement	for ( iter = daemon_ptr . begin ( ) ; iter != daemon_ptr . end ( ) ; iter ++ )		3528859	1					
ANR	3528867	ForInit	iter = daemon_ptr . begin ( ) ;	1631:6:41181:41206	3528859	0	True				
ANR	3528868	AssignmentExpression	iter = daemon_ptr . begin ( )		3528859	0		=			
ANR	3528869	Identifier	iter		3528859	0					
ANR	3528870	CallExpression	daemon_ptr . begin ( )		3528859	1					
ANR	3528871	Callee	daemon_ptr . begin		3528859	0					
ANR	3528872	MemberAccess	daemon_ptr . begin		3528859	0					
ANR	3528873	Identifier	daemon_ptr		3528859	0					
ANR	3528874	Identifier	begin		3528859	1					
ANR	3528875	ArgumentList			3528859	1					
ANR	3528876	Condition	iter != daemon_ptr . end ( )	1631:33:41208:41231	3528859	1	True				
ANR	3528877	EqualityExpression	iter != daemon_ptr . end ( )		3528859	0		!=			
ANR	3528878	Identifier	iter		3528859	0					
ANR	3528879	CallExpression	daemon_ptr . end ( )		3528859	1					
ANR	3528880	Callee	daemon_ptr . end		3528859	0					
ANR	3528881	MemberAccess	daemon_ptr . end		3528859	0					
ANR	3528882	Identifier	daemon_ptr		3528859	0					
ANR	3528883	Identifier	end		3528859	1					
ANR	3528884	ArgumentList			3528859	1					
ANR	3528885	PostIncDecOperationExpression	iter ++	1631:59:41234:41239	3528859	2	True				
ANR	3528886	Identifier	iter		3528859	0					
ANR	3528887	IncDec	++		3528859	1					
ANR	3528888	CompoundStatement		4:68:124:124	3528859	3					
ANR	3528889	ExpressionStatement	iter -> second -> InitParams ( )	1632:2:41247:41273	3528859	0	True				
ANR	3528890	CallExpression	iter -> second -> InitParams ( )		3528859	0					
ANR	3528891	Callee	iter -> second -> InitParams		3528859	0					
ANR	3528892	PtrMemberAccess	iter -> second -> InitParams		3528859	0					
ANR	3528893	PtrMemberAccess	iter -> second		3528859	0					
ANR	3528894	Identifier	iter		3528859	0					
ANR	3528895	Identifier	second		3528859	1					
ANR	3528896	Identifier	InitParams		3528859	1					
ANR	3528897	ArgumentList			3528859	1					
ANR	3528898	ReturnType	void		3528859	1					
ANR	3528899	Identifier	Daemons :: InitParams		3528859	2					
ANR	3528900	ParameterList			3528859	3					
ANR	3528901	CFGEntryNode	ENTRY		3528859		True				
ANR	3528902	CFGExitNode	EXIT		3528859		True				
ANR	3528903	Symbol	* iter		3528859						
ANR	3528904	Symbol	daemon_ptr		3528859						
ANR	3528905	Symbol	daemon_ptr . begin		3528859						
ANR	3528906	Symbol	iter		3528859						
ANR	3528907	Symbol	daemon_ptr . end		3528859						
ANR	3528908	Symbol	iter -> second		3528859						
ANR	3528909	Function	Daemons :: FindDaemon	1637:0:41282:41511							
ANR	3528910	FunctionDef	Daemons :: FindDaemon (const char * name)		3528909	0					
ANR	3528911	CompoundStatement		1639:0:41337:41511	3528909	0					
ANR	3528912	IdentifierDeclStatement	"std :: map < std :: string , class daemon * > :: iterator iter ;"	1640:1:41340:41391	3528909	0	True				
ANR	3528913	IdentifierDecl	iter		3528909	0					
ANR	3528914	IdentifierDeclType	"std :: map < std :: string , class daemon * > :: iterator"		3528909	0					
ANR	3528915	Identifier	iter		3528909	1					
ANR	3528916	ExpressionStatement	iter = daemon_ptr . find ( name )	1642:1:41395:41423	3528909	1	True				
ANR	3528917	AssignmentExpression	iter = daemon_ptr . find ( name )		3528909	0		=			
ANR	3528918	Identifier	iter		3528909	0					
ANR	3528919	CallExpression	daemon_ptr . find ( name )		3528909	1					
ANR	3528920	Callee	daemon_ptr . find		3528909	0					
ANR	3528921	MemberAccess	daemon_ptr . find		3528909	0					
ANR	3528922	Identifier	daemon_ptr		3528909	0					
ANR	3528923	Identifier	find		3528909	1					
ANR	3528924	ArgumentList	name		3528909	1					
ANR	3528925	Argument	name		3528909	0					
ANR	3528926	Identifier	name		3528909	0					
ANR	3528927	IfStatement	if ( iter != daemon_ptr . end ( ) )		3528909	2					
ANR	3528928	Condition	iter != daemon_ptr . end ( )	1643:5:41430:41453	3528909	0	True				
ANR	3528929	EqualityExpression	iter != daemon_ptr . end ( )		3528909	0		!=			
ANR	3528930	Identifier	iter		3528909	0					
ANR	3528931	CallExpression	daemon_ptr . end ( )		3528909	1					
ANR	3528932	Callee	daemon_ptr . end		3528909	0					
ANR	3528933	MemberAccess	daemon_ptr . end		3528909	0					
ANR	3528934	Identifier	daemon_ptr		3528909	0					
ANR	3528935	Identifier	end		3528909	1					
ANR	3528936	ArgumentList			3528909	1					
ANR	3528937	CompoundStatement		5:32:119:119	3528909	1					
ANR	3528938	ReturnStatement	return iter -> second ;	1644:2:41461:41480	3528909	0	True				
ANR	3528939	PtrMemberAccess	iter -> second		3528909	0					
ANR	3528940	Identifier	iter		3528909	0					
ANR	3528941	Identifier	second		3528909	1					
ANR	3528942	ElseStatement	else		3528909	0					
ANR	3528943	CompoundStatement		8:6:153:153	3528909	0					
ANR	3528944	ReturnStatement	return NULL ;	1647:2:41495:41506	3528909	0	True				
ANR	3528945	Identifier	NULL		3528909	0					
ANR	3528946	ReturnType	class daemon *		3528909	1					
ANR	3528947	Identifier	Daemons :: FindDaemon		3528909	2					
ANR	3528948	ParameterList	const char * name		3528909	3					
ANR	3528949	Parameter	const char * name	1638:21:41318:41333	3528909	0	True				
ANR	3528950	ParameterType	const char *		3528909	0					
ANR	3528951	Identifier	name		3528909	1					
ANR	3528952	CFGEntryNode	ENTRY		3528909		True				
ANR	3528953	CFGExitNode	EXIT		3528909		True				
ANR	3528954	Symbol	* iter		3528909						
ANR	3528955	Symbol	daemon_ptr		3528909						
ANR	3528956	Symbol	NULL		3528909						
ANR	3528957	Symbol	name		3528909						
ANR	3528958	Symbol	iter		3528909						
ANR	3528959	Symbol	daemon_ptr . end		3528909						
ANR	3528960	Symbol	daemon_ptr . find		3528909						
ANR	3528961	Symbol	iter -> second		3528909						
ANR	3528962	Function	Daemons :: CheckForNewExecutable	1652:0:41515:43503							
ANR	3528963	FunctionDef	Daemons :: CheckForNewExecutable ()		3528962	0					
ANR	3528964	CompoundStatement		1654:0:41553:43503	3528962	0					
ANR	3528965	IdentifierDeclStatement	int found_new = FALSE ;	1655:1:41556:41577	3528962	0	True				
ANR	3528966	IdentifierDecl	found_new = FALSE		3528962	0					
ANR	3528967	IdentifierDeclType	int		3528962	0					
ANR	3528968	Identifier	found_new		3528962	1					
ANR	3528969	AssignmentExpression	found_new = FALSE		3528962	2		=			
ANR	3528970	Identifier	FALSE		3528962	0					
ANR	3528971	Identifier	FALSE		3528962	1					
ANR	3528972	IdentifierDeclStatement	"std :: map < std :: string , class daemon * > :: iterator iter ;"	1656:1:41580:41631	3528962	1	True				
ANR	3528973	IdentifierDecl	iter		3528962	0					
ANR	3528974	IdentifierDeclType	"std :: map < std :: string , class daemon * > :: iterator"		3528962	0					
ANR	3528975	Identifier	iter		3528962	1					
ANR	3528976	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""enter Daemons::CheckForNewExecutable\\n"" )"	1658:1:41635:41697	3528962	2	True				
ANR	3528977	CallExpression	"dprintf ( D_FULLDEBUG , ""enter Daemons::CheckForNewExecutable\\n"" )"		3528962	0					
ANR	3528978	Callee	dprintf		3528962	0					
ANR	3528979	Identifier	dprintf		3528962	0					
ANR	3528980	ArgumentList	D_FULLDEBUG		3528962	1					
ANR	3528981	Argument	D_FULLDEBUG		3528962	0					
ANR	3528982	Identifier	D_FULLDEBUG		3528962	0					
ANR	3528983	Argument	"""enter Daemons::CheckForNewExecutable\\n"""		3528962	1					
ANR	3528984	PrimaryExpression	"""enter Daemons::CheckForNewExecutable\\n"""		3528962	0					
ANR	3528985	IfStatement	if ( master -> newExec )		3528962	3					
ANR	3528986	Condition	master -> newExec	1660:5:41705:41719	3528962	0	True				
ANR	3528987	PtrMemberAccess	master -> newExec		3528962	0					
ANR	3528988	Identifier	master		3528962	0					
ANR	3528989	Identifier	newExec		3528962	1					
ANR	3528990	CompoundStatement		7:23:169:169	3528962	1					
ANR	3528991	ReturnStatement	return ;	1664:2:41864:41870	3528962	0	True				
ANR	3528992	IfStatement	"if ( NewExecutable ( master -> watch_name , & master -> timeStamp ) )"		3528962	4					
ANR	3528993	Condition	"NewExecutable ( master -> watch_name , & master -> timeStamp )"	1666:5:41880:41934	3528962	0	True				
ANR	3528994	CallExpression	"NewExecutable ( master -> watch_name , & master -> timeStamp )"		3528962	0					
ANR	3528995	Callee	NewExecutable		3528962	0					
ANR	3528996	Identifier	NewExecutable		3528962	0					
ANR	3528997	ArgumentList	master -> watch_name		3528962	1					
ANR	3528998	Argument	master -> watch_name		3528962	0					
ANR	3528999	PtrMemberAccess	master -> watch_name		3528962	0					
ANR	3529000	Identifier	master		3528962	0					
ANR	3529001	Identifier	watch_name		3528962	1					
ANR	3529002	Argument	& master -> timeStamp		3528962	1					
ANR	3529003	UnaryOperationExpression	& master -> timeStamp		3528962	0					
ANR	3529004	UnaryOperator	&		3528962	0					
ANR	3529005	PtrMemberAccess	master -> timeStamp		3528962	1					
ANR	3529006	Identifier	master		3528962	0					
ANR	3529007	Identifier	timeStamp		3528962	1					
ANR	3529008	CompoundStatement		13:63:384:384	3528962	1					
ANR	3529009	ExpressionStatement	"dprintf ( D_ALWAYS , ""%s was modified, restarting %s.\\n"" , master -> watch_name , master -> process_name )"	1667:2:41942:42051	3528962	0	True				
ANR	3529010	CallExpression	"dprintf ( D_ALWAYS , ""%s was modified, restarting %s.\\n"" , master -> watch_name , master -> process_name )"		3528962	0					
ANR	3529011	Callee	dprintf		3528962	0					
ANR	3529012	Identifier	dprintf		3528962	0					
ANR	3529013	ArgumentList	D_ALWAYS		3528962	1					
ANR	3529014	Argument	D_ALWAYS		3528962	0					
ANR	3529015	Identifier	D_ALWAYS		3528962	0					
ANR	3529016	Argument	"""%s was modified, restarting %s.\\n"""		3528962	1					
ANR	3529017	PrimaryExpression	"""%s was modified, restarting %s.\\n"""		3528962	0					
ANR	3529018	Argument	master -> watch_name		3528962	2					
ANR	3529019	PtrMemberAccess	master -> watch_name		3528962	0					
ANR	3529020	Identifier	master		3528962	0					
ANR	3529021	Identifier	watch_name		3528962	1					
ANR	3529022	Argument	master -> process_name		3528962	3					
ANR	3529023	PtrMemberAccess	master -> process_name		3528962	0					
ANR	3529024	Identifier	master		3528962	0					
ANR	3529025	Identifier	process_name		3528962	1					
ANR	3529026	ExpressionStatement	master -> newExec = TRUE	1670:2:42055:42077	3528962	1	True				
ANR	3529027	AssignmentExpression	master -> newExec = TRUE		3528962	0		=			
ANR	3529028	PtrMemberAccess	master -> newExec		3528962	0					
ANR	3529029	Identifier	master		3528962	0					
ANR	3529030	Identifier	newExec		3528962	1					
ANR	3529031	Identifier	TRUE		3528962	1					
ANR	3529032	ExpressionStatement	RestartMaster ( )	1673:2:42126:42141	3528962	2	True				
ANR	3529033	CallExpression	RestartMaster ( )		3528962	0					
ANR	3529034	Callee	RestartMaster		3528962	0					
ANR	3529035	Identifier	RestartMaster		3528962	0					
ANR	3529036	ArgumentList			3528962	1					
ANR	3529037	ReturnStatement	return ;	1674:2:42145:42151	3528962	3	True				
ANR	3529038	ForStatement	for ( iter = daemon_ptr . begin ( ) ; iter != daemon_ptr . end ( ) ; iter ++ )		3528962	5					
ANR	3529039	ForInit	iter = daemon_ptr . begin ( ) ;	1677:6:42163:42188	3528962	0	True				
ANR	3529040	AssignmentExpression	iter = daemon_ptr . begin ( )		3528962	0		=			
ANR	3529041	Identifier	iter		3528962	0					
ANR	3529042	CallExpression	daemon_ptr . begin ( )		3528962	1					
ANR	3529043	Callee	daemon_ptr . begin		3528962	0					
ANR	3529044	MemberAccess	daemon_ptr . begin		3528962	0					
ANR	3529045	Identifier	daemon_ptr		3528962	0					
ANR	3529046	Identifier	begin		3528962	1					
ANR	3529047	ArgumentList			3528962	1					
ANR	3529048	Condition	iter != daemon_ptr . end ( )	1677:33:42190:42213	3528962	1	True				
ANR	3529049	EqualityExpression	iter != daemon_ptr . end ( )		3528962	0		!=			
ANR	3529050	Identifier	iter		3528962	0					
ANR	3529051	CallExpression	daemon_ptr . end ( )		3528962	1					
ANR	3529052	Callee	daemon_ptr . end		3528962	0					
ANR	3529053	MemberAccess	daemon_ptr . end		3528962	0					
ANR	3529054	Identifier	daemon_ptr		3528962	0					
ANR	3529055	Identifier	end		3528962	1					
ANR	3529056	ArgumentList			3528962	1					
ANR	3529057	PostIncDecOperationExpression	iter ++	1677:59:42216:42221	3528962	2	True				
ANR	3529058	Identifier	iter		3528962	0					
ANR	3529059	IncDec	++		3528962	1					
ANR	3529060	CompoundStatement		24:68:671:671	3528962	3					
ANR	3529061	IfStatement	if ( iter -> second -> runs_here && ! iter -> second -> newExec && ! iter -> second -> OnHold ( ) && ! iter -> second -> OnlyStopWhenMasterStops ( ) )		3528962	0					
ANR	3529062	Condition	iter -> second -> runs_here && ! iter -> second -> newExec && ! iter -> second -> OnHold ( ) && ! iter -> second -> OnlyStopWhenMasterStops ( )	1678:6:42233:42359	3528962	0	True				
ANR	3529063	AndExpression	iter -> second -> runs_here && ! iter -> second -> newExec && ! iter -> second -> OnHold ( ) && ! iter -> second -> OnlyStopWhenMasterStops ( )		3528962	0		&&			
ANR	3529064	PtrMemberAccess	iter -> second -> runs_here		3528962	0					
ANR	3529065	PtrMemberAccess	iter -> second		3528962	0					
ANR	3529066	Identifier	iter		3528962	0					
ANR	3529067	Identifier	second		3528962	1					
ANR	3529068	Identifier	runs_here		3528962	1					
ANR	3529069	AndExpression	! iter -> second -> newExec && ! iter -> second -> OnHold ( ) && ! iter -> second -> OnlyStopWhenMasterStops ( )		3528962	1		&&			
ANR	3529070	UnaryOperationExpression	! iter -> second -> newExec		3528962	0					
ANR	3529071	UnaryOperator	!		3528962	0					
ANR	3529072	PtrMemberAccess	iter -> second -> newExec		3528962	1					
ANR	3529073	PtrMemberAccess	iter -> second		3528962	0					
ANR	3529074	Identifier	iter		3528962	0					
ANR	3529075	Identifier	second		3528962	1					
ANR	3529076	Identifier	newExec		3528962	1					
ANR	3529077	AndExpression	! iter -> second -> OnHold ( ) && ! iter -> second -> OnlyStopWhenMasterStops ( )		3528962	1		&&			
ANR	3529078	UnaryOperationExpression	! iter -> second -> OnHold ( )		3528962	0					
ANR	3529079	UnaryOperator	!		3528962	0					
ANR	3529080	CallExpression	iter -> second -> OnHold ( )		3528962	1					
ANR	3529081	Callee	iter -> second -> OnHold		3528962	0					
ANR	3529082	PtrMemberAccess	iter -> second -> OnHold		3528962	0					
ANR	3529083	PtrMemberAccess	iter -> second		3528962	0					
ANR	3529084	Identifier	iter		3528962	0					
ANR	3529085	Identifier	second		3528962	1					
ANR	3529086	Identifier	OnHold		3528962	1					
ANR	3529087	ArgumentList			3528962	1					
ANR	3529088	UnaryOperationExpression	! iter -> second -> OnlyStopWhenMasterStops ( )		3528962	1					
ANR	3529089	UnaryOperator	!		3528962	0					
ANR	3529090	CallExpression	iter -> second -> OnlyStopWhenMasterStops ( )		3528962	1					
ANR	3529091	Callee	iter -> second -> OnlyStopWhenMasterStops		3528962	0					
ANR	3529092	PtrMemberAccess	iter -> second -> OnlyStopWhenMasterStops		3528962	0					
ANR	3529093	PtrMemberAccess	iter -> second		3528962	0					
ANR	3529094	Identifier	iter		3528962	0					
ANR	3529095	Identifier	second		3528962	1					
ANR	3529096	Identifier	OnlyStopWhenMasterStops		3528962	1					
ANR	3529097	ArgumentList			3528962	1					
ANR	3529098	CompoundStatement		28:2:811:811	3528962	1					
ANR	3529099	IfStatement	"if ( NewExecutable ( iter -> second -> watch_name , & iter -> second -> timeStamp ) )"		3528962	0					
ANR	3529100	Condition	"NewExecutable ( iter -> second -> watch_name , & iter -> second -> timeStamp )"	1682:7:42374:42446	3528962	0	True				
ANR	3529101	CallExpression	"NewExecutable ( iter -> second -> watch_name , & iter -> second -> timeStamp )"		3528962	0					
ANR	3529102	Callee	NewExecutable		3528962	0					
ANR	3529103	Identifier	NewExecutable		3528962	0					
ANR	3529104	ArgumentList	iter -> second -> watch_name		3528962	1					
ANR	3529105	Argument	iter -> second -> watch_name		3528962	0					
ANR	3529106	PtrMemberAccess	iter -> second -> watch_name		3528962	0					
ANR	3529107	PtrMemberAccess	iter -> second		3528962	0					
ANR	3529108	Identifier	iter		3528962	0					
ANR	3529109	Identifier	second		3528962	1					
ANR	3529110	Identifier	watch_name		3528962	1					
ANR	3529111	Argument	& iter -> second -> timeStamp		3528962	1					
ANR	3529112	UnaryOperationExpression	& iter -> second -> timeStamp		3528962	0					
ANR	3529113	UnaryOperator	&		3528962	0					
ANR	3529114	PtrMemberAccess	iter -> second -> timeStamp		3528962	1					
ANR	3529115	PtrMemberAccess	iter -> second		3528962	0					
ANR	3529116	Identifier	iter		3528962	0					
ANR	3529117	Identifier	second		3528962	1					
ANR	3529118	Identifier	timeStamp		3528962	1					
ANR	3529119	CompoundStatement		30:35:896:896	3528962	1					
ANR	3529120	ExpressionStatement	found_new = TRUE	1684:4:42456:42472	3528962	0	True				
ANR	3529121	AssignmentExpression	found_new = TRUE		3528962	0		=			
ANR	3529122	Identifier	found_new		3528962	0					
ANR	3529123	Identifier	TRUE		3528962	1					
ANR	3529124	ExpressionStatement	iter -> second -> newExec = TRUE	1685:4:42478:42506	3528962	1	True				
ANR	3529125	AssignmentExpression	iter -> second -> newExec = TRUE		3528962	0		=			
ANR	3529126	PtrMemberAccess	iter -> second -> newExec		3528962	0					
ANR	3529127	PtrMemberAccess	iter -> second		3528962	0					
ANR	3529128	Identifier	iter		3528962	0					
ANR	3529129	Identifier	second		3528962	1					
ANR	3529130	Identifier	newExec		3528962	1					
ANR	3529131	Identifier	TRUE		3528962	1					
ANR	3529132	IfStatement	if ( immediate_restart )		3528962	2					
ANR	3529133	Condition	immediate_restart	1686:8:42516:42532	3528962	0	True				
ANR	3529134	Identifier	immediate_restart		3528962	0					
ANR	3529135	CompoundStatement		33:28:982:982	3528962	1					
ANR	3529136	ExpressionStatement	iter -> second -> newExec = FALSE	1693:5:42850:42879	3528962	0	True				
ANR	3529137	AssignmentExpression	iter -> second -> newExec = FALSE		3528962	0		=			
ANR	3529138	PtrMemberAccess	iter -> second -> newExec		3528962	0					
ANR	3529139	PtrMemberAccess	iter -> second		3528962	0					
ANR	3529140	Identifier	iter		3528962	0					
ANR	3529141	Identifier	second		3528962	1					
ANR	3529142	Identifier	newExec		3528962	1					
ANR	3529143	Identifier	FALSE		3528962	1					
ANR	3529144	ExpressionStatement	iter -> second -> restarts = 0	1694:5:42886:42912	3528962	1	True				
ANR	3529145	AssignmentExpression	iter -> second -> restarts = 0		3528962	0		=			
ANR	3529146	PtrMemberAccess	iter -> second -> restarts		3528962	0					
ANR	3529147	PtrMemberAccess	iter -> second		3528962	0					
ANR	3529148	Identifier	iter		3528962	0					
ANR	3529149	Identifier	second		3528962	1					
ANR	3529150	Identifier	restarts		3528962	1					
ANR	3529151	PrimaryExpression	0		3528962	1					
ANR	3529152	IfStatement	if ( iter -> second -> pid )		3528962	3					
ANR	3529153	Condition	iter -> second -> pid	1696:8:42928:42944	3528962	0	True				
ANR	3529154	PtrMemberAccess	iter -> second -> pid		3528962	0					
ANR	3529155	PtrMemberAccess	iter -> second		3528962	0					
ANR	3529156	Identifier	iter		3528962	0					
ANR	3529157	Identifier	second		3528962	1					
ANR	3529158	Identifier	pid		3528962	1					
ANR	3529159	CompoundStatement		43:28:1394:1394	3528962	1					
ANR	3529160	ExpressionStatement	"dprintf ( D_ALWAYS , ""%s was modified, killing %s.\\n"" , iter -> second -> watch_name , iter -> second -> process_name )"	1697:5:42955:43078	3528962	0	True				
ANR	3529161	CallExpression	"dprintf ( D_ALWAYS , ""%s was modified, killing %s.\\n"" , iter -> second -> watch_name , iter -> second -> process_name )"		3528962	0					
ANR	3529162	Callee	dprintf		3528962	0					
ANR	3529163	Identifier	dprintf		3528962	0					
ANR	3529164	ArgumentList	D_ALWAYS		3528962	1					
ANR	3529165	Argument	D_ALWAYS		3528962	0					
ANR	3529166	Identifier	D_ALWAYS		3528962	0					
ANR	3529167	Argument	"""%s was modified, killing %s.\\n"""		3528962	1					
ANR	3529168	PrimaryExpression	"""%s was modified, killing %s.\\n"""		3528962	0					
ANR	3529169	Argument	iter -> second -> watch_name		3528962	2					
ANR	3529170	PtrMemberAccess	iter -> second -> watch_name		3528962	0					
ANR	3529171	PtrMemberAccess	iter -> second		3528962	0					
ANR	3529172	Identifier	iter		3528962	0					
ANR	3529173	Identifier	second		3528962	1					
ANR	3529174	Identifier	watch_name		3528962	1					
ANR	3529175	Argument	iter -> second -> process_name		3528962	3					
ANR	3529176	PtrMemberAccess	iter -> second -> process_name		3528962	0					
ANR	3529177	PtrMemberAccess	iter -> second		3528962	0					
ANR	3529178	Identifier	iter		3528962	0					
ANR	3529179	Identifier	second		3528962	1					
ANR	3529180	Identifier	process_name		3528962	1					
ANR	3529181	ExpressionStatement	iter -> second -> Stop ( )	1700:5:43085:43105	3528962	1	True				
ANR	3529182	CallExpression	iter -> second -> Stop ( )		3528962	0					
ANR	3529183	Callee	iter -> second -> Stop		3528962	0					
ANR	3529184	PtrMemberAccess	iter -> second -> Stop		3528962	0					
ANR	3529185	PtrMemberAccess	iter -> second		3528962	0					
ANR	3529186	Identifier	iter		3528962	0					
ANR	3529187	Identifier	second		3528962	1					
ANR	3529188	Identifier	Stop		3528962	1					
ANR	3529189	ArgumentList			3528962	1					
ANR	3529190	ElseStatement	else		3528962	0					
ANR	3529191	CompoundStatement		48:11:1564:1564	3528962	0					
ANR	3529192	IfStatement	if ( immediate_restart )		3528962	0					
ANR	3529193	Condition	immediate_restart	1702:9:43129:43145	3528962	0	True				
ANR	3529194	Identifier	immediate_restart		3528962	0					
ANR	3529195	CompoundStatement		49:29:1595:1595	3528962	1					
ANR	3529196	ExpressionStatement	iter -> second -> CancelAllTimers ( )	1707:6:43307:43338	3528962	0	True				
ANR	3529197	CallExpression	iter -> second -> CancelAllTimers ( )		3528962	0					
ANR	3529198	Callee	iter -> second -> CancelAllTimers		3528962	0					
ANR	3529199	PtrMemberAccess	iter -> second -> CancelAllTimers		3528962	0					
ANR	3529200	PtrMemberAccess	iter -> second		3528962	0					
ANR	3529201	Identifier	iter		3528962	0					
ANR	3529202	Identifier	second		3528962	1					
ANR	3529203	Identifier	CancelAllTimers		3528962	1					
ANR	3529204	ArgumentList			3528962	1					
ANR	3529205	ExpressionStatement	iter -> second -> Restart ( )	1708:6:43346:43369	3528962	1	True				
ANR	3529206	CallExpression	iter -> second -> Restart ( )		3528962	0					
ANR	3529207	Callee	iter -> second -> Restart		3528962	0					
ANR	3529208	PtrMemberAccess	iter -> second -> Restart		3528962	0					
ANR	3529209	PtrMemberAccess	iter -> second		3528962	0					
ANR	3529210	Identifier	iter		3528962	0					
ANR	3529211	Identifier	second		3528962	1					
ANR	3529212	Identifier	Restart		3528962	1					
ANR	3529213	ArgumentList			3528962	1					
ANR	3529214	IfStatement	if ( found_new )		3528962	6					
ANR	3529215	Condition	found_new	1714:5:43401:43409	3528962	0	True				
ANR	3529216	Identifier	found_new		3528962	0					
ANR	3529217	CompoundStatement		61:17:1859:1859	3528962	1					
ANR	3529218	ExpressionStatement	UpdateCollector ( )	1715:2:43417:43434	3528962	0	True				
ANR	3529219	CallExpression	UpdateCollector ( )		3528962	0					
ANR	3529220	Callee	UpdateCollector		3528962	0					
ANR	3529221	Identifier	UpdateCollector		3528962	0					
ANR	3529222	ArgumentList			3528962	1					
ANR	3529223	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""exit Daemons::CheckForNewExecutable\\n"" )"	1717:1:43440:43501	3528962	7	True				
ANR	3529224	CallExpression	"dprintf ( D_FULLDEBUG , ""exit Daemons::CheckForNewExecutable\\n"" )"		3528962	0					
ANR	3529225	Callee	dprintf		3528962	0					
ANR	3529226	Identifier	dprintf		3528962	0					
ANR	3529227	ArgumentList	D_FULLDEBUG		3528962	1					
ANR	3529228	Argument	D_FULLDEBUG		3528962	0					
ANR	3529229	Identifier	D_FULLDEBUG		3528962	0					
ANR	3529230	Argument	"""exit Daemons::CheckForNewExecutable\\n"""		3528962	1					
ANR	3529231	PrimaryExpression	"""exit Daemons::CheckForNewExecutable\\n"""		3528962	0					
ANR	3529232	ReturnType	void		3528962	1					
ANR	3529233	Identifier	Daemons :: CheckForNewExecutable		3528962	2					
ANR	3529234	ParameterList			3528962	3					
ANR	3529235	CFGEntryNode	ENTRY		3528962		True				
ANR	3529236	CFGExitNode	EXIT		3528962		True				
ANR	3529237	Symbol	iter -> second -> pid		3528962						
ANR	3529238	Symbol	master -> newExec		3528962						
ANR	3529239	Symbol	iter -> second -> OnlyStopWhenMasterStops		3528962						
ANR	3529240	Symbol	& iter -> second -> timeStamp		3528962						
ANR	3529241	Symbol	iter -> second -> watch_name		3528962						
ANR	3529242	Symbol	* iter -> second		3528962						
ANR	3529243	Symbol	iter -> second -> OnHold		3528962						
ANR	3529244	Symbol	* iter		3528962						
ANR	3529245	Symbol	iter -> second -> runs_here		3528962						
ANR	3529246	Symbol	daemon_ptr		3528962						
ANR	3529247	Symbol	iter -> second -> newExec		3528962						
ANR	3529248	Symbol	daemon_ptr . end		3528962						
ANR	3529249	Symbol	* * iter		3528962						
ANR	3529250	Symbol	* master		3528962						
ANR	3529251	Symbol	master -> process_name		3528962						
ANR	3529252	Symbol	iter -> second -> restarts		3528962						
ANR	3529253	Symbol	found_new		3528962						
ANR	3529254	Symbol	D_ALWAYS		3528962						
ANR	3529255	Symbol	iter		3528962						
ANR	3529256	Symbol	TRUE		3528962						
ANR	3529257	Symbol	immediate_restart		3528962						
ANR	3529258	Symbol	D_FULLDEBUG		3528962						
ANR	3529259	Symbol	NewExecutable		3528962						
ANR	3529260	Symbol	master -> watch_name		3528962						
ANR	3529261	Symbol	master		3528962						
ANR	3529262	Symbol	daemon_ptr . begin		3528962						
ANR	3529263	Symbol	iter -> second -> process_name		3528962						
ANR	3529264	Symbol	FALSE		3528962						
ANR	3529265	Symbol	& master -> timeStamp		3528962						
ANR	3529266	Symbol	iter -> second		3528962						
ANR	3529267	Function	Daemons :: DaemonsOn	1721:0:43507:43687							
ANR	3529268	FunctionDef	Daemons :: DaemonsOn ()		3529267	0					
ANR	3529269	CompoundStatement		1723:0:43533:43687	3529267	0					
ANR	3529270	ExpressionStatement	StartDaemons = TRUE	1725:1:43600:43619	3529267	0	True				
ANR	3529271	AssignmentExpression	StartDaemons = TRUE		3529267	0		=			
ANR	3529272	Identifier	StartDaemons		3529267	0					
ANR	3529273	Identifier	TRUE		3529267	1					
ANR	3529274	ExpressionStatement	GotDaemonsOff = FALSE	1726:1:43622:43643	3529267	1	True				
ANR	3529275	AssignmentExpression	GotDaemonsOff = FALSE		3529267	0		=			
ANR	3529276	Identifier	GotDaemonsOff		3529267	0					
ANR	3529277	Identifier	FALSE		3529267	1					
ANR	3529278	ExpressionStatement	StartAllDaemons ( )	1727:1:43646:43663	3529267	2	True				
ANR	3529279	CallExpression	StartAllDaemons ( )		3529267	0					
ANR	3529280	Callee	StartAllDaemons		3529267	0					
ANR	3529281	Identifier	StartAllDaemons		3529267	0					
ANR	3529282	ArgumentList			3529267	1					
ANR	3529283	ExpressionStatement	StartNewExecTimer ( )	1728:1:43666:43685	3529267	3	True				
ANR	3529284	CallExpression	StartNewExecTimer ( )		3529267	0					
ANR	3529285	Callee	StartNewExecTimer		3529267	0					
ANR	3529286	Identifier	StartNewExecTimer		3529267	0					
ANR	3529287	ArgumentList			3529267	1					
ANR	3529288	ReturnType	void		3529267	1					
ANR	3529289	Identifier	Daemons :: DaemonsOn		3529267	2					
ANR	3529290	ParameterList			3529267	3					
ANR	3529291	CFGEntryNode	ENTRY		3529267		True				
ANR	3529292	CFGExitNode	EXIT		3529267		True				
ANR	3529293	Symbol	StartDaemons		3529267						
ANR	3529294	Symbol	GotDaemonsOff		3529267						
ANR	3529295	Symbol	TRUE		3529267						
ANR	3529296	Symbol	FALSE		3529267						
ANR	3529297	Function	Daemons :: DaemonsOff	1732:0:43691:43975							
ANR	3529298	FunctionDef	Daemons :: DaemonsOff (int fast)		3529297	0					
ANR	3529299	CompoundStatement		1734:0:43728:43975	3529297	0					
ANR	3529300	ExpressionStatement	StartDaemons = FALSE	1736:1:43795:43815	3529297	0	True				
ANR	3529301	AssignmentExpression	StartDaemons = FALSE		3529297	0		=			
ANR	3529302	Identifier	StartDaemons		3529297	0					
ANR	3529303	Identifier	FALSE		3529297	1					
ANR	3529304	ExpressionStatement	GotDaemonsOff = TRUE	1737:1:43818:43838	3529297	1	True				
ANR	3529305	AssignmentExpression	GotDaemonsOff = TRUE		3529297	0		=			
ANR	3529306	Identifier	GotDaemonsOff		3529297	0					
ANR	3529307	Identifier	TRUE		3529297	1					
ANR	3529308	ExpressionStatement	all_daemons_gone_action = MASTER_RESET	1738:1:43841:43879	3529297	2	True				
ANR	3529309	AssignmentExpression	all_daemons_gone_action = MASTER_RESET		3529297	0		=			
ANR	3529310	Identifier	all_daemons_gone_action		3529297	0					
ANR	3529311	Identifier	MASTER_RESET		3529297	1					
ANR	3529312	ExpressionStatement	CancelNewExecTimer ( )	1739:1:43882:43902	3529297	3	True				
ANR	3529313	CallExpression	CancelNewExecTimer ( )		3529297	0					
ANR	3529314	Callee	CancelNewExecTimer		3529297	0					
ANR	3529315	Identifier	CancelNewExecTimer		3529297	0					
ANR	3529316	ArgumentList			3529297	1					
ANR	3529317	IfStatement	if ( fast )		3529297	4					
ANR	3529318	Condition	fast	1740:5:43909:43912	3529297	0	True				
ANR	3529319	Identifier	fast		3529297	0					
ANR	3529320	CompoundStatement		7:12:187:187	3529297	1					
ANR	3529321	ExpressionStatement	StopFastAllDaemons ( )	1741:2:43920:43940	3529297	0	True				
ANR	3529322	CallExpression	StopFastAllDaemons ( )		3529297	0					
ANR	3529323	Callee	StopFastAllDaemons		3529297	0					
ANR	3529324	Identifier	StopFastAllDaemons		3529297	0					
ANR	3529325	ArgumentList			3529297	1					
ANR	3529326	ElseStatement	else		3529297	0					
ANR	3529327	CompoundStatement		9:8:221:221	3529297	0					
ANR	3529328	ExpressionStatement	StopAllDaemons ( )	1743:2:43954:43970	3529297	0	True				
ANR	3529329	CallExpression	StopAllDaemons ( )		3529297	0					
ANR	3529330	Callee	StopAllDaemons		3529297	0					
ANR	3529331	Identifier	StopAllDaemons		3529297	0					
ANR	3529332	ArgumentList			3529297	1					
ANR	3529333	ReturnType	void		3529297	1					
ANR	3529334	Identifier	Daemons :: DaemonsOff		3529297	2					
ANR	3529335	ParameterList	int fast		3529297	3					
ANR	3529336	Parameter	int fast	1733:21:43717:43724	3529297	0	True				
ANR	3529337	ParameterType	int		3529297	0					
ANR	3529338	Identifier	fast		3529297	1					
ANR	3529339	CFGEntryNode	ENTRY		3529297		True				
ANR	3529340	CFGExitNode	EXIT		3529297		True				
ANR	3529341	Symbol	StartDaemons		3529297						
ANR	3529342	Symbol	fast		3529297						
ANR	3529343	Symbol	GotDaemonsOff		3529297						
ANR	3529344	Symbol	MASTER_RESET		3529297						
ANR	3529345	Symbol	TRUE		3529297						
ANR	3529346	Symbol	FALSE		3529297						
ANR	3529347	Symbol	all_daemons_gone_action		3529297						
ANR	3529348	Function	Daemons :: DaemonsOffPeaceful	1747:0:43978:44217							
ANR	3529349	FunctionDef	Daemons :: DaemonsOffPeaceful ()		3529348	0					
ANR	3529350	CompoundStatement		1749:0:44014:44217	3529348	0					
ANR	3529351	ExpressionStatement	StartDaemons = FALSE	1751:1:44081:44101	3529348	0	True				
ANR	3529352	AssignmentExpression	StartDaemons = FALSE		3529348	0		=			
ANR	3529353	Identifier	StartDaemons		3529348	0					
ANR	3529354	Identifier	FALSE		3529348	1					
ANR	3529355	ExpressionStatement	GotDaemonsOff = TRUE	1752:1:44104:44124	3529348	1	True				
ANR	3529356	AssignmentExpression	GotDaemonsOff = TRUE		3529348	0		=			
ANR	3529357	Identifier	GotDaemonsOff		3529348	0					
ANR	3529358	Identifier	TRUE		3529348	1					
ANR	3529359	ExpressionStatement	all_daemons_gone_action = MASTER_RESET	1753:1:44127:44165	3529348	2	True				
ANR	3529360	AssignmentExpression	all_daemons_gone_action = MASTER_RESET		3529348	0		=			
ANR	3529361	Identifier	all_daemons_gone_action		3529348	0					
ANR	3529362	Identifier	MASTER_RESET		3529348	1					
ANR	3529363	ExpressionStatement	CancelNewExecTimer ( )	1754:1:44168:44188	3529348	3	True				
ANR	3529364	CallExpression	CancelNewExecTimer ( )		3529348	0					
ANR	3529365	Callee	CancelNewExecTimer		3529348	0					
ANR	3529366	Identifier	CancelNewExecTimer		3529348	0					
ANR	3529367	ArgumentList			3529348	1					
ANR	3529368	ExpressionStatement	StopPeacefulAllDaemons ( )	1755:1:44191:44215	3529348	4	True				
ANR	3529369	CallExpression	StopPeacefulAllDaemons ( )		3529348	0					
ANR	3529370	Callee	StopPeacefulAllDaemons		3529348	0					
ANR	3529371	Identifier	StopPeacefulAllDaemons		3529348	0					
ANR	3529372	ArgumentList			3529348	1					
ANR	3529373	ReturnType	void		3529348	1					
ANR	3529374	Identifier	Daemons :: DaemonsOffPeaceful		3529348	2					
ANR	3529375	ParameterList			3529348	3					
ANR	3529376	CFGEntryNode	ENTRY		3529348		True				
ANR	3529377	CFGExitNode	EXIT		3529348		True				
ANR	3529378	Symbol	StartDaemons		3529348						
ANR	3529379	Symbol	GotDaemonsOff		3529348						
ANR	3529380	Symbol	MASTER_RESET		3529348						
ANR	3529381	Symbol	TRUE		3529348						
ANR	3529382	Symbol	FALSE		3529348						
ANR	3529383	Symbol	all_daemons_gone_action		3529348						
ANR	3529384	Function	Daemons :: ScheduleRetryStartAllDaemons	1758:0:44220:44530							
ANR	3529385	FunctionDef	Daemons :: ScheduleRetryStartAllDaemons ()		3529384	0					
ANR	3529386	CompoundStatement		1760:0:44265:44530	3529384	0					
ANR	3529387	IfStatement	if ( m_retry_start_all_daemons_tid == - 1 )		3529384	0					
ANR	3529388	Condition	m_retry_start_all_daemons_tid == - 1	1761:5:44272:44306	3529384	0	True				
ANR	3529389	EqualityExpression	m_retry_start_all_daemons_tid == - 1		3529384	0		==			
ANR	3529390	Identifier	m_retry_start_all_daemons_tid		3529384	0					
ANR	3529391	UnaryOperationExpression	- 1		3529384	1					
ANR	3529392	UnaryOperator	-		3529384	0					
ANR	3529393	PrimaryExpression	1		3529384	1					
ANR	3529394	CompoundStatement		2:43:44:44	3529384	1					
ANR	3529395	ExpressionStatement	"m_retry_start_all_daemons_tid = daemonCore -> Register_Timer ( 1 , ( TimerHandlercpp ) & Daemons :: RetryStartAllDaemons , ""Daemons::RetryStartAllDaemons"" , this )"	1762:2:44314:44476	3529384	0	True				
ANR	3529396	AssignmentExpression	"m_retry_start_all_daemons_tid = daemonCore -> Register_Timer ( 1 , ( TimerHandlercpp ) & Daemons :: RetryStartAllDaemons , ""Daemons::RetryStartAllDaemons"" , this )"		3529384	0		=			
ANR	3529397	Identifier	m_retry_start_all_daemons_tid		3529384	0					
ANR	3529398	CallExpression	"daemonCore -> Register_Timer ( 1 , ( TimerHandlercpp ) & Daemons :: RetryStartAllDaemons , ""Daemons::RetryStartAllDaemons"" , this )"		3529384	1					
ANR	3529399	Callee	daemonCore -> Register_Timer		3529384	0					
ANR	3529400	PtrMemberAccess	daemonCore -> Register_Timer		3529384	0					
ANR	3529401	Identifier	daemonCore		3529384	0					
ANR	3529402	Identifier	Register_Timer		3529384	1					
ANR	3529403	ArgumentList	1		3529384	1					
ANR	3529404	Argument	1		3529384	0					
ANR	3529405	PrimaryExpression	1		3529384	0					
ANR	3529406	Argument	( TimerHandlercpp ) & Daemons :: RetryStartAllDaemons		3529384	1					
ANR	3529407	CastExpression	( TimerHandlercpp ) & Daemons :: RetryStartAllDaemons		3529384	0					
ANR	3529408	CastTarget	TimerHandlercpp		3529384	0					
ANR	3529409	UnaryOperationExpression	& Daemons :: RetryStartAllDaemons		3529384	1					
ANR	3529410	UnaryOperator	&		3529384	0					
ANR	3529411	Identifier	Daemons :: RetryStartAllDaemons		3529384	1					
ANR	3529412	Argument	"""Daemons::RetryStartAllDaemons"""		3529384	2					
ANR	3529413	PrimaryExpression	"""Daemons::RetryStartAllDaemons"""		3529384	0					
ANR	3529414	Argument	this		3529384	3					
ANR	3529415	Identifier	this		3529384	0					
ANR	3529416	ExpressionStatement	ASSERT ( m_retry_start_all_daemons_tid != - 1 )	1767:2:44480:44525	3529384	1	True				
ANR	3529417	CallExpression	ASSERT ( m_retry_start_all_daemons_tid != - 1 )		3529384	0					
ANR	3529418	Callee	ASSERT		3529384	0					
ANR	3529419	Identifier	ASSERT		3529384	0					
ANR	3529420	ArgumentList	m_retry_start_all_daemons_tid != - 1		3529384	1					
ANR	3529421	Argument	m_retry_start_all_daemons_tid != - 1		3529384	0					
ANR	3529422	EqualityExpression	m_retry_start_all_daemons_tid != - 1		3529384	0		!=			
ANR	3529423	Identifier	m_retry_start_all_daemons_tid		3529384	0					
ANR	3529424	UnaryOperationExpression	- 1		3529384	1					
ANR	3529425	UnaryOperator	-		3529384	0					
ANR	3529426	PrimaryExpression	1		3529384	1					
ANR	3529427	ReturnType	void		3529384	1					
ANR	3529428	Identifier	Daemons :: ScheduleRetryStartAllDaemons		3529384	2					
ANR	3529429	ParameterList			3529384	3					
ANR	3529430	CFGEntryNode	ENTRY		3529384		True				
ANR	3529431	CFGExitNode	EXIT		3529384		True				
ANR	3529432	Symbol	m_retry_start_all_daemons_tid		3529384						
ANR	3529433	Symbol	* daemonCore		3529384						
ANR	3529434	Symbol	daemonCore -> Register_Timer		3529384						
ANR	3529435	Symbol	daemonCore		3529384						
ANR	3529436	Symbol	this		3529384						
ANR	3529437	Symbol	& Daemons :: RetryStartAllDaemons		3529384						
ANR	3529438	Function	Daemons :: CancelRetryStartAllDaemons	1771:0:44533:44723							
ANR	3529439	FunctionDef	Daemons :: CancelRetryStartAllDaemons ()		3529438	0					
ANR	3529440	CompoundStatement		1773:0:44576:44723	3529438	0					
ANR	3529441	IfStatement	if ( m_retry_start_all_daemons_tid != - 1 )		3529438	0					
ANR	3529442	Condition	m_retry_start_all_daemons_tid != - 1	1774:5:44583:44617	3529438	0	True				
ANR	3529443	EqualityExpression	m_retry_start_all_daemons_tid != - 1		3529438	0		!=			
ANR	3529444	Identifier	m_retry_start_all_daemons_tid		3529438	0					
ANR	3529445	UnaryOperationExpression	- 1		3529438	1					
ANR	3529446	UnaryOperator	-		3529438	0					
ANR	3529447	PrimaryExpression	1		3529438	1					
ANR	3529448	CompoundStatement		2:43:44:44	3529438	1					
ANR	3529449	ExpressionStatement	daemonCore -> Cancel_Timer ( m_retry_start_all_daemons_tid )	1775:2:44625:44680	3529438	0	True				
ANR	3529450	CallExpression	daemonCore -> Cancel_Timer ( m_retry_start_all_daemons_tid )		3529438	0					
ANR	3529451	Callee	daemonCore -> Cancel_Timer		3529438	0					
ANR	3529452	PtrMemberAccess	daemonCore -> Cancel_Timer		3529438	0					
ANR	3529453	Identifier	daemonCore		3529438	0					
ANR	3529454	Identifier	Cancel_Timer		3529438	1					
ANR	3529455	ArgumentList	m_retry_start_all_daemons_tid		3529438	1					
ANR	3529456	Argument	m_retry_start_all_daemons_tid		3529438	0					
ANR	3529457	Identifier	m_retry_start_all_daemons_tid		3529438	0					
ANR	3529458	ExpressionStatement	m_retry_start_all_daemons_tid = - 1	1776:2:44684:44718	3529438	1	True				
ANR	3529459	AssignmentExpression	m_retry_start_all_daemons_tid = - 1		3529438	0		=			
ANR	3529460	Identifier	m_retry_start_all_daemons_tid		3529438	0					
ANR	3529461	UnaryOperationExpression	- 1		3529438	1					
ANR	3529462	UnaryOperator	-		3529438	0					
ANR	3529463	PrimaryExpression	1		3529438	1					
ANR	3529464	ReturnType	void		3529438	1					
ANR	3529465	Identifier	Daemons :: CancelRetryStartAllDaemons		3529438	2					
ANR	3529466	ParameterList			3529438	3					
ANR	3529467	CFGEntryNode	ENTRY		3529438		True				
ANR	3529468	CFGExitNode	EXIT		3529438		True				
ANR	3529469	Symbol	m_retry_start_all_daemons_tid		3529438						
ANR	3529470	Symbol	daemonCore		3529438						
ANR	3529471	Function	Daemons :: RetryStartAllDaemons	1780:0:44726:44822							
ANR	3529472	FunctionDef	Daemons :: RetryStartAllDaemons ()		3529471	0					
ANR	3529473	CompoundStatement		1782:0:44763:44822	3529471	0					
ANR	3529474	ExpressionStatement	m_retry_start_all_daemons_tid = - 1	1783:1:44766:44800	3529471	0	True				
ANR	3529475	AssignmentExpression	m_retry_start_all_daemons_tid = - 1		3529471	0		=			
ANR	3529476	Identifier	m_retry_start_all_daemons_tid		3529471	0					
ANR	3529477	UnaryOperationExpression	- 1		3529471	1					
ANR	3529478	UnaryOperator	-		3529471	0					
ANR	3529479	PrimaryExpression	1		3529471	1					
ANR	3529480	ExpressionStatement	StartAllDaemons ( )	1784:1:44803:44820	3529471	1	True				
ANR	3529481	CallExpression	StartAllDaemons ( )		3529471	0					
ANR	3529482	Callee	StartAllDaemons		3529471	0					
ANR	3529483	Identifier	StartAllDaemons		3529471	0					
ANR	3529484	ArgumentList			3529471	1					
ANR	3529485	ReturnType	void		3529471	1					
ANR	3529486	Identifier	Daemons :: RetryStartAllDaemons		3529471	2					
ANR	3529487	ParameterList			3529471	3					
ANR	3529488	CFGEntryNode	ENTRY		3529471		True				
ANR	3529489	CFGExitNode	EXIT		3529471		True				
ANR	3529490	Symbol	m_retry_start_all_daemons_tid		3529471						
ANR	3529491	Function	Daemons :: StartAllDaemons	1787:0:44825:45466							
ANR	3529492	FunctionDef	Daemons :: StartAllDaemons ()		3529491	0					
ANR	3529493	CompoundStatement		1789:0:44857:45466	3529491	0					
ANR	3529494	IdentifierDeclStatement	char * name ;	1790:1:44860:44870	3529491	0	True				
ANR	3529495	IdentifierDecl	* name		3529491	0					
ANR	3529496	IdentifierDeclType	char *		3529491	0					
ANR	3529497	Identifier	name		3529491	1					
ANR	3529498	IdentifierDeclStatement	class daemon * daemon ;	1791:1:44873:44893	3529491	1	True				
ANR	3529499	IdentifierDecl	* daemon		3529491	0					
ANR	3529500	IdentifierDeclType	class daemon *		3529491	0					
ANR	3529501	Identifier	daemon		3529491	1					
ANR	3529502	ExpressionStatement	ordered_daemon_names . rewind ( )	1793:1:44897:44926	3529491	2	True				
ANR	3529503	CallExpression	ordered_daemon_names . rewind ( )		3529491	0					
ANR	3529504	Callee	ordered_daemon_names . rewind		3529491	0					
ANR	3529505	MemberAccess	ordered_daemon_names . rewind		3529491	0					
ANR	3529506	Identifier	ordered_daemon_names		3529491	0					
ANR	3529507	Identifier	rewind		3529491	1					
ANR	3529508	ArgumentList			3529491	1					
ANR	3529509	WhileStatement	while ( ( name = ordered_daemon_names . next ( ) ) )		3529491	3					
ANR	3529510	Condition	name = ordered_daemon_names . next ( )	1794:8:44936:44971	3529491	0	True				
ANR	3529511	AssignmentExpression	name = ordered_daemon_names . next ( )		3529491	0		=			
ANR	3529512	Identifier	name		3529491	0					
ANR	3529513	CallExpression	ordered_daemon_names . next ( )		3529491	1					
ANR	3529514	Callee	ordered_daemon_names . next		3529491	0					
ANR	3529515	MemberAccess	ordered_daemon_names . next		3529491	0					
ANR	3529516	Identifier	ordered_daemon_names		3529491	0					
ANR	3529517	Identifier	next		3529491	1					
ANR	3529518	ArgumentList			3529491	1					
ANR	3529519	CompoundStatement		6:47:117:117	3529491	1					
ANR	3529520	ExpressionStatement	daemon = FindDaemon ( name )	1795:2:44979:45006	3529491	0	True				
ANR	3529521	AssignmentExpression	daemon = FindDaemon ( name )		3529491	0		=			
ANR	3529522	Identifier	daemon		3529491	0					
ANR	3529523	CallExpression	FindDaemon ( name )		3529491	1					
ANR	3529524	Callee	FindDaemon		3529491	0					
ANR	3529525	Identifier	FindDaemon		3529491	0					
ANR	3529526	ArgumentList	name		3529491	1					
ANR	3529527	Argument	name		3529491	0					
ANR	3529528	Identifier	name		3529491	0					
ANR	3529529	IfStatement	if ( daemon == NULL )		3529491	1					
ANR	3529530	Condition	daemon == NULL	1796:6:45014:45027	3529491	0	True				
ANR	3529531	EqualityExpression	daemon == NULL		3529491	0		==			
ANR	3529532	Identifier	daemon		3529491	0					
ANR	3529533	Identifier	NULL		3529491	1					
ANR	3529534	CompoundStatement		8:23:173:173	3529491	1					
ANR	3529535	ExpressionStatement	"EXCEPT ( ""Unable to start daemon %s"" , name )"	1797:3:45036:45077	3529491	0	True				
ANR	3529536	CallExpression	"EXCEPT ( ""Unable to start daemon %s"" , name )"		3529491	0					
ANR	3529537	Callee	EXCEPT		3529491	0					
ANR	3529538	Identifier	EXCEPT		3529491	0					
ANR	3529539	ArgumentList	"""Unable to start daemon %s"""		3529491	1					
ANR	3529540	Argument	"""Unable to start daemon %s"""		3529491	0					
ANR	3529541	PrimaryExpression	"""Unable to start daemon %s"""		3529491	0					
ANR	3529542	Argument	name		3529491	1					
ANR	3529543	Identifier	name		3529491	0					
ANR	3529544	IfStatement	if ( daemon -> pid > 0 )		3529491	2					
ANR	3529545	Condition	daemon -> pid > 0	1799:6:45089:45103	3529491	0	True				
ANR	3529546	RelationalExpression	daemon -> pid > 0		3529491	0		>			
ANR	3529547	PtrMemberAccess	daemon -> pid		3529491	0					
ANR	3529548	Identifier	daemon		3529491	0					
ANR	3529549	Identifier	pid		3529491	1					
ANR	3529550	PrimaryExpression	0		3529491	1					
ANR	3529551	CompoundStatement		11:24:249:249	3529491	1					
ANR	3529552	IfStatement	if ( daemon -> WaitBeforeStartingOtherDaemons ( false ) )		3529491	0					
ANR	3529553	Condition	daemon -> WaitBeforeStartingOtherDaemons ( false )	1800:7:45116:45160	3529491	0	True				
ANR	3529554	CallExpression	daemon -> WaitBeforeStartingOtherDaemons ( false )		3529491	0					
ANR	3529555	Callee	daemon -> WaitBeforeStartingOtherDaemons		3529491	0					
ANR	3529556	PtrMemberAccess	daemon -> WaitBeforeStartingOtherDaemons		3529491	0					
ANR	3529557	Identifier	daemon		3529491	0					
ANR	3529558	Identifier	WaitBeforeStartingOtherDaemons		3529491	1					
ANR	3529559	ArgumentList	false		3529491	1					
ANR	3529560	Argument	false		3529491	0					
ANR	3529561	Identifier	false		3529491	0					
ANR	3529562	CompoundStatement		12:55:306:306	3529491	1					
ANR	3529563	ExpressionStatement	ScheduleRetryStartAllDaemons ( )	1801:4:45170:45200	3529491	0	True				
ANR	3529564	CallExpression	ScheduleRetryStartAllDaemons ( )		3529491	0					
ANR	3529565	Callee	ScheduleRetryStartAllDaemons		3529491	0					
ANR	3529566	Identifier	ScheduleRetryStartAllDaemons		3529491	0					
ANR	3529567	ArgumentList			3529491	1					
ANR	3529568	ReturnStatement	return ;	1802:4:45206:45212	3529491	1	True				
ANR	3529569	ContinueStatement	continue ;	1806:3:45260:45268	3529491	1	True				
ANR	3529570	IfStatement	if ( ! daemon -> runs_here )		3529491	3					
ANR	3529571	Condition	! daemon -> runs_here	1808:6:45281:45299	3529491	0	True				
ANR	3529572	UnaryOperationExpression	! daemon -> runs_here		3529491	0					
ANR	3529573	UnaryOperator	!		3529491	0					
ANR	3529574	PtrMemberAccess	daemon -> runs_here		3529491	1					
ANR	3529575	Identifier	daemon		3529491	0					
ANR	3529576	Identifier	runs_here		3529491	1					
ANR	3529577	ContinueStatement	continue ;	1808:28:45303:45311	3529491	1	True				
ANR	3529578	ExpressionStatement	daemon -> Hold ( FALSE )	1809:2:45315:45336	3529491	4	True				
ANR	3529579	CallExpression	daemon -> Hold ( FALSE )		3529491	0					
ANR	3529580	Callee	daemon -> Hold		3529491	0					
ANR	3529581	PtrMemberAccess	daemon -> Hold		3529491	0					
ANR	3529582	Identifier	daemon		3529491	0					
ANR	3529583	Identifier	Hold		3529491	1					
ANR	3529584	ArgumentList	FALSE		3529491	1					
ANR	3529585	Argument	FALSE		3529491	0					
ANR	3529586	Identifier	FALSE		3529491	0					
ANR	3529587	ExpressionStatement	daemon -> Start ( )	1810:2:45340:45355	3529491	5	True				
ANR	3529588	CallExpression	daemon -> Start ( )		3529491	0					
ANR	3529589	Callee	daemon -> Start		3529491	0					
ANR	3529590	PtrMemberAccess	daemon -> Start		3529491	0					
ANR	3529591	Identifier	daemon		3529491	0					
ANR	3529592	Identifier	Start		3529491	1					
ANR	3529593	ArgumentList			3529491	1					
ANR	3529594	IfStatement	if ( daemon -> WaitBeforeStartingOtherDaemons ( true ) )		3529491	6					
ANR	3529595	Condition	daemon -> WaitBeforeStartingOtherDaemons ( true )	1812:6:45364:45407	3529491	0	True				
ANR	3529596	CallExpression	daemon -> WaitBeforeStartingOtherDaemons ( true )		3529491	0					
ANR	3529597	Callee	daemon -> WaitBeforeStartingOtherDaemons		3529491	0					
ANR	3529598	PtrMemberAccess	daemon -> WaitBeforeStartingOtherDaemons		3529491	0					
ANR	3529599	Identifier	daemon		3529491	0					
ANR	3529600	Identifier	WaitBeforeStartingOtherDaemons		3529491	1					
ANR	3529601	ArgumentList	true		3529491	1					
ANR	3529602	Argument	true		3529491	0					
ANR	3529603	Identifier	true		3529491	0					
ANR	3529604	CompoundStatement		24:53:553:553	3529491	1					
ANR	3529605	ExpressionStatement	ScheduleRetryStartAllDaemons ( )	1813:3:45416:45446	3529491	0	True				
ANR	3529606	CallExpression	ScheduleRetryStartAllDaemons ( )		3529491	0					
ANR	3529607	Callee	ScheduleRetryStartAllDaemons		3529491	0					
ANR	3529608	Identifier	ScheduleRetryStartAllDaemons		3529491	0					
ANR	3529609	ArgumentList			3529491	1					
ANR	3529610	ReturnStatement	return ;	1814:3:45451:45457	3529491	1	True				
ANR	3529611	ReturnType	void		3529491	1					
ANR	3529612	Identifier	Daemons :: StartAllDaemons		3529491	2					
ANR	3529613	ParameterList			3529491	3					
ANR	3529614	CFGEntryNode	ENTRY		3529491		True				
ANR	3529615	CFGExitNode	EXIT		3529491		True				
ANR	3529616	Symbol	NULL		3529491						
ANR	3529617	Symbol	false		3529491						
ANR	3529618	Symbol	daemon -> WaitBeforeStartingOtherDaemons		3529491						
ANR	3529619	Symbol	daemon -> pid		3529491						
ANR	3529620	Symbol	daemon		3529491						
ANR	3529621	Symbol	name		3529491						
ANR	3529622	Symbol	true		3529491						
ANR	3529623	Symbol	* daemon		3529491						
ANR	3529624	Symbol	ordered_daemon_names		3529491						
ANR	3529625	Symbol	FALSE		3529491						
ANR	3529626	Symbol	FindDaemon		3529491						
ANR	3529627	Symbol	daemon -> runs_here		3529491						
ANR	3529628	Symbol	ordered_daemon_names . next		3529491						
ANR	3529629	Function	Daemons :: StopAllDaemons	1820:0:45470:45898							
ANR	3529630	FunctionDef	Daemons :: StopAllDaemons ()		3529629	0					
ANR	3529631	CompoundStatement		1822:0:45502:45898	3529629	0					
ANR	3529632	ExpressionStatement	CancelRetryStartAllDaemons ( )	1823:1:45505:45533	3529629	0	True				
ANR	3529633	CallExpression	CancelRetryStartAllDaemons ( )		3529629	0					
ANR	3529634	Callee	CancelRetryStartAllDaemons		3529629	0					
ANR	3529635	Identifier	CancelRetryStartAllDaemons		3529629	0					
ANR	3529636	ArgumentList			3529629	1					
ANR	3529637	ExpressionStatement	daemons . SetAllReaper ( )	1824:1:45536:45558	3529629	1	True				
ANR	3529638	CallExpression	daemons . SetAllReaper ( )		3529629	0					
ANR	3529639	Callee	daemons . SetAllReaper		3529629	0					
ANR	3529640	MemberAccess	daemons . SetAllReaper		3529629	0					
ANR	3529641	Identifier	daemons		3529629	0					
ANR	3529642	Identifier	SetAllReaper		3529629	1					
ANR	3529643	ArgumentList			3529629	1					
ANR	3529644	IdentifierDeclStatement	int running = 0 ;	1825:1:45561:45576	3529629	2	True				
ANR	3529645	IdentifierDecl	running = 0		3529629	0					
ANR	3529646	IdentifierDeclType	int		3529629	0					
ANR	3529647	Identifier	running		3529629	1					
ANR	3529648	AssignmentExpression	running = 0		3529629	2		=			
ANR	3529649	Identifier	running		3529629	0					
ANR	3529650	PrimaryExpression	0		3529629	1					
ANR	3529651	IdentifierDeclStatement	"std :: map < std :: string , class daemon * > :: iterator iter ;"	1826:1:45579:45630	3529629	3	True				
ANR	3529652	IdentifierDecl	iter		3529629	0					
ANR	3529653	IdentifierDeclType	"std :: map < std :: string , class daemon * > :: iterator"		3529629	0					
ANR	3529654	Identifier	iter		3529629	1					
ANR	3529655	ForStatement	for ( iter = daemon_ptr . begin ( ) ; iter != daemon_ptr . end ( ) ; iter ++ )		3529629	4					
ANR	3529656	ForInit	iter = daemon_ptr . begin ( ) ;	1828:6:45639:45664	3529629	0	True				
ANR	3529657	AssignmentExpression	iter = daemon_ptr . begin ( )		3529629	0		=			
ANR	3529658	Identifier	iter		3529629	0					
ANR	3529659	CallExpression	daemon_ptr . begin ( )		3529629	1					
ANR	3529660	Callee	daemon_ptr . begin		3529629	0					
ANR	3529661	MemberAccess	daemon_ptr . begin		3529629	0					
ANR	3529662	Identifier	daemon_ptr		3529629	0					
ANR	3529663	Identifier	begin		3529629	1					
ANR	3529664	ArgumentList			3529629	1					
ANR	3529665	Condition	iter != daemon_ptr . end ( )	1828:33:45666:45689	3529629	1	True				
ANR	3529666	EqualityExpression	iter != daemon_ptr . end ( )		3529629	0		!=			
ANR	3529667	Identifier	iter		3529629	0					
ANR	3529668	CallExpression	daemon_ptr . end ( )		3529629	1					
ANR	3529669	Callee	daemon_ptr . end		3529629	0					
ANR	3529670	MemberAccess	daemon_ptr . end		3529629	0					
ANR	3529671	Identifier	daemon_ptr		3529629	0					
ANR	3529672	Identifier	end		3529629	1					
ANR	3529673	ArgumentList			3529629	1					
ANR	3529674	PostIncDecOperationExpression	iter ++	1828:59:45692:45697	3529629	2	True				
ANR	3529675	Identifier	iter		3529629	0					
ANR	3529676	IncDec	++		3529629	1					
ANR	3529677	CompoundStatement		7:68:198:198	3529629	3					
ANR	3529678	IfStatement	if ( iter -> second -> pid && iter -> second -> runs_here && ! iter -> second -> OnlyStopWhenMasterStops ( ) )		3529629	0					
ANR	3529679	Condition	iter -> second -> pid && iter -> second -> runs_here && ! iter -> second -> OnlyStopWhenMasterStops ( )	1829:6:45709:45799	3529629	0	True				
ANR	3529680	AndExpression	iter -> second -> pid && iter -> second -> runs_here && ! iter -> second -> OnlyStopWhenMasterStops ( )		3529629	0		&&			
ANR	3529681	PtrMemberAccess	iter -> second -> pid		3529629	0					
ANR	3529682	PtrMemberAccess	iter -> second		3529629	0					
ANR	3529683	Identifier	iter		3529629	0					
ANR	3529684	Identifier	second		3529629	1					
ANR	3529685	Identifier	pid		3529629	1					
ANR	3529686	AndExpression	iter -> second -> runs_here && ! iter -> second -> OnlyStopWhenMasterStops ( )		3529629	1		&&			
ANR	3529687	PtrMemberAccess	iter -> second -> runs_here		3529629	0					
ANR	3529688	PtrMemberAccess	iter -> second		3529629	0					
ANR	3529689	Identifier	iter		3529629	0					
ANR	3529690	Identifier	second		3529629	1					
ANR	3529691	Identifier	runs_here		3529629	1					
ANR	3529692	UnaryOperationExpression	! iter -> second -> OnlyStopWhenMasterStops ( )		3529629	1					
ANR	3529693	UnaryOperator	!		3529629	0					
ANR	3529694	CallExpression	iter -> second -> OnlyStopWhenMasterStops ( )		3529629	1					
ANR	3529695	Callee	iter -> second -> OnlyStopWhenMasterStops		3529629	0					
ANR	3529696	PtrMemberAccess	iter -> second -> OnlyStopWhenMasterStops		3529629	0					
ANR	3529697	PtrMemberAccess	iter -> second		3529629	0					
ANR	3529698	Identifier	iter		3529629	0					
ANR	3529699	Identifier	second		3529629	1					
ANR	3529700	Identifier	OnlyStopWhenMasterStops		3529629	1					
ANR	3529701	ArgumentList			3529629	1					
ANR	3529702	CompoundStatement		10:2:302:302	3529629	1					
ANR	3529703	ExpressionStatement	iter -> second -> Stop ( )	1832:3:45810:45830	3529629	0	True				
ANR	3529704	CallExpression	iter -> second -> Stop ( )		3529629	0					
ANR	3529705	Callee	iter -> second -> Stop		3529629	0					
ANR	3529706	PtrMemberAccess	iter -> second -> Stop		3529629	0					
ANR	3529707	PtrMemberAccess	iter -> second		3529629	0					
ANR	3529708	Identifier	iter		3529629	0					
ANR	3529709	Identifier	second		3529629	1					
ANR	3529710	Identifier	Stop		3529629	1					
ANR	3529711	ArgumentList			3529629	1					
ANR	3529712	ExpressionStatement	running ++	1833:3:45835:45844	3529629	1	True				
ANR	3529713	PostIncDecOperationExpression	running ++		3529629	0					
ANR	3529714	Identifier	running		3529629	0					
ANR	3529715	IncDec	++		3529629	1					
ANR	3529716	IfStatement	if ( ! running )		3529629	5					
ANR	3529717	Condition	! running	1836:5:45858:45865	3529629	0	True				
ANR	3529718	UnaryOperationExpression	! running		3529629	0					
ANR	3529719	UnaryOperator	!		3529629	0					
ANR	3529720	Identifier	running		3529629	1					
ANR	3529721	CompoundStatement		15:16:366:366	3529629	1					
ANR	3529722	ExpressionStatement	AllDaemonsGone ( )	1837:2:45873:45889	3529629	0	True				
ANR	3529723	CallExpression	AllDaemonsGone ( )		3529629	0					
ANR	3529724	Callee	AllDaemonsGone		3529629	0					
ANR	3529725	Identifier	AllDaemonsGone		3529629	0					
ANR	3529726	ArgumentList			3529629	1					
ANR	3529727	ReturnType	void		3529629	1					
ANR	3529728	Identifier	Daemons :: StopAllDaemons		3529629	2					
ANR	3529729	ParameterList			3529629	3					
ANR	3529730	CFGEntryNode	ENTRY		3529629		True				
ANR	3529731	CFGExitNode	EXIT		3529629		True				
ANR	3529732	Symbol	iter -> second -> pid		3529629						
ANR	3529733	Symbol	iter -> second -> OnlyStopWhenMasterStops		3529629						
ANR	3529734	Symbol	iter		3529629						
ANR	3529735	Symbol	running		3529629						
ANR	3529736	Symbol	* iter -> second		3529629						
ANR	3529737	Symbol	* iter		3529629						
ANR	3529738	Symbol	iter -> second -> runs_here		3529629						
ANR	3529739	Symbol	daemon_ptr		3529629						
ANR	3529740	Symbol	daemon_ptr . begin		3529629						
ANR	3529741	Symbol	daemons		3529629						
ANR	3529742	Symbol	daemon_ptr . end		3529629						
ANR	3529743	Symbol	* * iter		3529629						
ANR	3529744	Symbol	iter -> second		3529629						
ANR	3529745	Function	Daemons :: StopDaemon	1842:0:45902:46320							
ANR	3529746	FunctionDef	Daemons :: StopDaemon (char * name)		3529745	0					
ANR	3529747	CompoundStatement		1844:0:45941:46320	3529745	0					
ANR	3529748	IdentifierDeclStatement	"std :: map < std :: string , class daemon * > :: iterator iter ;"	1845:1:45944:45995	3529745	0	True				
ANR	3529749	IdentifierDecl	iter		3529745	0					
ANR	3529750	IdentifierDeclType	"std :: map < std :: string , class daemon * > :: iterator"		3529745	0					
ANR	3529751	Identifier	iter		3529745	1					
ANR	3529752	ExpressionStatement	iter = daemon_ptr . find ( name )	1847:1:45999:46029	3529745	1	True				
ANR	3529753	AssignmentExpression	iter = daemon_ptr . find ( name )		3529745	0		=			
ANR	3529754	Identifier	iter		3529745	0					
ANR	3529755	CallExpression	daemon_ptr . find ( name )		3529745	1					
ANR	3529756	Callee	daemon_ptr . find		3529745	0					
ANR	3529757	MemberAccess	daemon_ptr . find		3529745	0					
ANR	3529758	Identifier	daemon_ptr		3529745	0					
ANR	3529759	Identifier	find		3529745	1					
ANR	3529760	ArgumentList	name		3529745	1					
ANR	3529761	Argument	name		3529745	0					
ANR	3529762	Identifier	name		3529745	0					
ANR	3529763	IfStatement	if ( iter != daemon_ptr . end ( ) )		3529745	2					
ANR	3529764	Condition	iter != daemon_ptr . end ( )	1848:5:46036:46059	3529745	0	True				
ANR	3529765	EqualityExpression	iter != daemon_ptr . end ( )		3529745	0		!=			
ANR	3529766	Identifier	iter		3529745	0					
ANR	3529767	CallExpression	daemon_ptr . end ( )		3529745	1					
ANR	3529768	Callee	daemon_ptr . end		3529745	0					
ANR	3529769	MemberAccess	daemon_ptr . end		3529745	0					
ANR	3529770	Identifier	daemon_ptr		3529745	0					
ANR	3529771	Identifier	end		3529745	1					
ANR	3529772	ArgumentList			3529745	1					
ANR	3529773	CompoundStatement		5:32:121:121	3529745	1					
ANR	3529774	IfStatement	if ( iter -> second -> pid > 0 )		3529745	0					
ANR	3529775	Condition	iter -> second -> pid > 0	1849:6:46071:46091	3529745	0	True				
ANR	3529776	RelationalExpression	iter -> second -> pid > 0		3529745	0		>			
ANR	3529777	PtrMemberAccess	iter -> second -> pid		3529745	0					
ANR	3529778	PtrMemberAccess	iter -> second		3529745	0					
ANR	3529779	Identifier	iter		3529745	0					
ANR	3529780	Identifier	second		3529745	1					
ANR	3529781	Identifier	pid		3529745	1					
ANR	3529782	PrimaryExpression	0		3529745	1					
ANR	3529783	CompoundStatement		6:30:153:153	3529745	1					
ANR	3529784	Statement	exit_allowed	1850:3:46100:46111	3529745	0	True				
ANR	3529785	Statement	.	1850:15:46112:46112	3529745	1	True				
ANR	3529786	Statement	insert	1850:16:46113:46118	3529745	2	True				
ANR	3529787	Statement	(	1850:22:46119:46119	3529745	3	True				
ANR	3529788	Statement	std	1850:24:46121:46123	3529745	4	True				
ANR	3529789	Statement	::	1850:27:46124:46125	3529745	5	True				
ANR	3529790	Statement	pair	1850:29:46126:46129	3529745	6	True				
ANR	3529791	Statement	<	1850:33:46130:46130	3529745	7	True				
ANR	3529792	Statement	int	1850:34:46131:46133	3529745	8	True				
ANR	3529793	Statement	","	1850:37:46134:46134	3529745	9	True				
ANR	3529794	Statement	class	1850:39:46136:46140	3529745	10	True				
ANR	3529795	Statement	daemon	1850:45:46142:46147	3529745	11	True				
ANR	3529796	Statement	*	1850:51:46148:46148	3529745	12	True				
ANR	3529797	Statement	>	1850:52:46149:46149	3529745	13	True				
ANR	3529798	Statement	(	1850:53:46150:46150	3529745	14	True				
ANR	3529799	Statement	iter	1850:54:46151:46154	3529745	15	True				
ANR	3529800	Statement	->	1850:58:46155:46156	3529745	16	True				
ANR	3529801	Statement	second	1850:60:46157:46162	3529745	17	True				
ANR	3529802	Statement	->	1850:66:46163:46164	3529745	18	True				
ANR	3529803	Statement	pid	1850:68:46165:46167	3529745	19	True				
ANR	3529804	Statement	","	1850:71:46168:46168	3529745	20	True				
ANR	3529805	Statement	iter	1850:73:46170:46173	3529745	21	True				
ANR	3529806	Statement	->	1850:77:46174:46175	3529745	22	True				
ANR	3529807	Statement	second	1850:79:46176:46181	3529745	23	True				
ANR	3529808	Statement	)	1850:85:46182:46182	3529745	24	True				
ANR	3529809	Statement	)	1850:87:46184:46184	3529745	25	True				
ANR	3529810	ExpressionStatement		1850:88:46185:46185	3529745	26	True				
ANR	3529811	ExpressionStatement	iter -> second -> Stop ( )	1851:3:46190:46210	3529745	27	True				
ANR	3529812	CallExpression	iter -> second -> Stop ( )		3529745	0					
ANR	3529813	Callee	iter -> second -> Stop		3529745	0					
ANR	3529814	PtrMemberAccess	iter -> second -> Stop		3529745	0					
ANR	3529815	PtrMemberAccess	iter -> second		3529745	0					
ANR	3529816	Identifier	iter		3529745	0					
ANR	3529817	Identifier	second		3529745	1					
ANR	3529818	Identifier	Stop		3529745	1					
ANR	3529819	ArgumentList			3529745	1					
ANR	3529820	ElseStatement	else		3529745	0					
ANR	3529821	CompoundStatement		10:7:281:281	3529745	0					
ANR	3529822	ExpressionStatement	iter -> second -> CancelAllTimers ( )	1854:3:46228:46259	3529745	0	True				
ANR	3529823	CallExpression	iter -> second -> CancelAllTimers ( )		3529745	0					
ANR	3529824	Callee	iter -> second -> CancelAllTimers		3529745	0					
ANR	3529825	PtrMemberAccess	iter -> second -> CancelAllTimers		3529745	0					
ANR	3529826	PtrMemberAccess	iter -> second		3529745	0					
ANR	3529827	Identifier	iter		3529745	0					
ANR	3529828	Identifier	second		3529745	1					
ANR	3529829	Identifier	CancelAllTimers		3529745	1					
ANR	3529830	ArgumentList			3529745	1					
ANR	3529831	Statement	delete	1855:3:46264:46269	3529745	1	True				
ANR	3529832	ExpressionStatement	iter -> second	1855:10:46271:46283	3529745	2	True				
ANR	3529833	PtrMemberAccess	iter -> second		3529745	0					
ANR	3529834	Identifier	iter		3529745	0					
ANR	3529835	Identifier	second		3529745	1					
ANR	3529836	ExpressionStatement	daemon_ptr . erase ( iter )	1857:2:46291:46315	3529745	1	True				
ANR	3529837	CallExpression	daemon_ptr . erase ( iter )		3529745	0					
ANR	3529838	Callee	daemon_ptr . erase		3529745	0					
ANR	3529839	MemberAccess	daemon_ptr . erase		3529745	0					
ANR	3529840	Identifier	daemon_ptr		3529745	0					
ANR	3529841	Identifier	erase		3529745	1					
ANR	3529842	ArgumentList	iter		3529745	1					
ANR	3529843	Argument	iter		3529745	0					
ANR	3529844	Identifier	iter		3529745	0					
ANR	3529845	ReturnType	void		3529745	1					
ANR	3529846	Identifier	Daemons :: StopDaemon		3529745	2					
ANR	3529847	ParameterList	char * name		3529745	3					
ANR	3529848	Parameter	char * name	1843:21:45928:45937	3529745	0	True				
ANR	3529849	ParameterType	char *		3529745	0					
ANR	3529850	Identifier	name		3529745	1					
ANR	3529851	CFGEntryNode	ENTRY		3529745		True				
ANR	3529852	CFGExitNode	EXIT		3529745		True				
ANR	3529853	Symbol	* iter -> second		3529745						
ANR	3529854	Symbol	iter -> second -> pid		3529745						
ANR	3529855	Symbol	* iter		3529745						
ANR	3529856	Symbol	daemon_ptr		3529745						
ANR	3529857	Symbol	name		3529745						
ANR	3529858	Symbol	iter		3529745						
ANR	3529859	Symbol	daemon_ptr . end		3529745						
ANR	3529860	Symbol	* * iter		3529745						
ANR	3529861	Symbol	daemon_ptr . find		3529745						
ANR	3529862	Symbol	iter -> second		3529745						
ANR	3529863	Function	Daemons :: StopFastAllDaemons	1862:0:46324:46759							
ANR	3529864	FunctionDef	Daemons :: StopFastAllDaemons ()		3529863	0					
ANR	3529865	CompoundStatement		1864:0:46359:46759	3529863	0					
ANR	3529866	ExpressionStatement	CancelRetryStartAllDaemons ( )	1865:1:46362:46390	3529863	0	True				
ANR	3529867	CallExpression	CancelRetryStartAllDaemons ( )		3529863	0					
ANR	3529868	Callee	CancelRetryStartAllDaemons		3529863	0					
ANR	3529869	Identifier	CancelRetryStartAllDaemons		3529863	0					
ANR	3529870	ArgumentList			3529863	1					
ANR	3529871	ExpressionStatement	daemons . SetAllReaper ( )	1866:1:46393:46415	3529863	1	True				
ANR	3529872	CallExpression	daemons . SetAllReaper ( )		3529863	0					
ANR	3529873	Callee	daemons . SetAllReaper		3529863	0					
ANR	3529874	MemberAccess	daemons . SetAllReaper		3529863	0					
ANR	3529875	Identifier	daemons		3529863	0					
ANR	3529876	Identifier	SetAllReaper		3529863	1					
ANR	3529877	ArgumentList			3529863	1					
ANR	3529878	IdentifierDeclStatement	int running = 0 ;	1867:1:46418:46433	3529863	2	True				
ANR	3529879	IdentifierDecl	running = 0		3529863	0					
ANR	3529880	IdentifierDeclType	int		3529863	0					
ANR	3529881	Identifier	running		3529863	1					
ANR	3529882	AssignmentExpression	running = 0		3529863	2		=			
ANR	3529883	Identifier	running		3529863	0					
ANR	3529884	PrimaryExpression	0		3529863	1					
ANR	3529885	IdentifierDeclStatement	"std :: map < std :: string , class daemon * > :: iterator iter ;"	1868:1:46436:46487	3529863	3	True				
ANR	3529886	IdentifierDecl	iter		3529863	0					
ANR	3529887	IdentifierDeclType	"std :: map < std :: string , class daemon * > :: iterator"		3529863	0					
ANR	3529888	Identifier	iter		3529863	1					
ANR	3529889	ForStatement	for ( iter = daemon_ptr . begin ( ) ; iter != daemon_ptr . end ( ) ; iter ++ )		3529863	4					
ANR	3529890	ForInit	iter = daemon_ptr . begin ( ) ;	1870:6:46496:46521	3529863	0	True				
ANR	3529891	AssignmentExpression	iter = daemon_ptr . begin ( )		3529863	0		=			
ANR	3529892	Identifier	iter		3529863	0					
ANR	3529893	CallExpression	daemon_ptr . begin ( )		3529863	1					
ANR	3529894	Callee	daemon_ptr . begin		3529863	0					
ANR	3529895	MemberAccess	daemon_ptr . begin		3529863	0					
ANR	3529896	Identifier	daemon_ptr		3529863	0					
ANR	3529897	Identifier	begin		3529863	1					
ANR	3529898	ArgumentList			3529863	1					
ANR	3529899	Condition	iter != daemon_ptr . end ( )	1870:33:46523:46546	3529863	1	True				
ANR	3529900	EqualityExpression	iter != daemon_ptr . end ( )		3529863	0		!=			
ANR	3529901	Identifier	iter		3529863	0					
ANR	3529902	CallExpression	daemon_ptr . end ( )		3529863	1					
ANR	3529903	Callee	daemon_ptr . end		3529863	0					
ANR	3529904	MemberAccess	daemon_ptr . end		3529863	0					
ANR	3529905	Identifier	daemon_ptr		3529863	0					
ANR	3529906	Identifier	end		3529863	1					
ANR	3529907	ArgumentList			3529863	1					
ANR	3529908	PostIncDecOperationExpression	iter ++	1870:59:46549:46554	3529863	2	True				
ANR	3529909	Identifier	iter		3529863	0					
ANR	3529910	IncDec	++		3529863	1					
ANR	3529911	CompoundStatement		7:68:198:198	3529863	3					
ANR	3529912	IfStatement	if ( iter -> second -> pid && iter -> second -> runs_here && ! iter -> second -> OnlyStopWhenMasterStops ( ) )		3529863	0					
ANR	3529913	Condition	iter -> second -> pid && iter -> second -> runs_here && ! iter -> second -> OnlyStopWhenMasterStops ( )	1871:6:46566:46656	3529863	0	True				
ANR	3529914	AndExpression	iter -> second -> pid && iter -> second -> runs_here && ! iter -> second -> OnlyStopWhenMasterStops ( )		3529863	0		&&			
ANR	3529915	PtrMemberAccess	iter -> second -> pid		3529863	0					
ANR	3529916	PtrMemberAccess	iter -> second		3529863	0					
ANR	3529917	Identifier	iter		3529863	0					
ANR	3529918	Identifier	second		3529863	1					
ANR	3529919	Identifier	pid		3529863	1					
ANR	3529920	AndExpression	iter -> second -> runs_here && ! iter -> second -> OnlyStopWhenMasterStops ( )		3529863	1		&&			
ANR	3529921	PtrMemberAccess	iter -> second -> runs_here		3529863	0					
ANR	3529922	PtrMemberAccess	iter -> second		3529863	0					
ANR	3529923	Identifier	iter		3529863	0					
ANR	3529924	Identifier	second		3529863	1					
ANR	3529925	Identifier	runs_here		3529863	1					
ANR	3529926	UnaryOperationExpression	! iter -> second -> OnlyStopWhenMasterStops ( )		3529863	1					
ANR	3529927	UnaryOperator	!		3529863	0					
ANR	3529928	CallExpression	iter -> second -> OnlyStopWhenMasterStops ( )		3529863	1					
ANR	3529929	Callee	iter -> second -> OnlyStopWhenMasterStops		3529863	0					
ANR	3529930	PtrMemberAccess	iter -> second -> OnlyStopWhenMasterStops		3529863	0					
ANR	3529931	PtrMemberAccess	iter -> second		3529863	0					
ANR	3529932	Identifier	iter		3529863	0					
ANR	3529933	Identifier	second		3529863	1					
ANR	3529934	Identifier	OnlyStopWhenMasterStops		3529863	1					
ANR	3529935	ArgumentList			3529863	1					
ANR	3529936	CompoundStatement		10:2:302:302	3529863	1					
ANR	3529937	ExpressionStatement	iter -> second -> StopFast ( )	1874:3:46667:46691	3529863	0	True				
ANR	3529938	CallExpression	iter -> second -> StopFast ( )		3529863	0					
ANR	3529939	Callee	iter -> second -> StopFast		3529863	0					
ANR	3529940	PtrMemberAccess	iter -> second -> StopFast		3529863	0					
ANR	3529941	PtrMemberAccess	iter -> second		3529863	0					
ANR	3529942	Identifier	iter		3529863	0					
ANR	3529943	Identifier	second		3529863	1					
ANR	3529944	Identifier	StopFast		3529863	1					
ANR	3529945	ArgumentList			3529863	1					
ANR	3529946	ExpressionStatement	running ++	1875:3:46696:46705	3529863	1	True				
ANR	3529947	PostIncDecOperationExpression	running ++		3529863	0					
ANR	3529948	Identifier	running		3529863	0					
ANR	3529949	IncDec	++		3529863	1					
ANR	3529950	IfStatement	if ( ! running )		3529863	5					
ANR	3529951	Condition	! running	1878:5:46719:46726	3529863	0	True				
ANR	3529952	UnaryOperationExpression	! running		3529863	0					
ANR	3529953	UnaryOperator	!		3529863	0					
ANR	3529954	Identifier	running		3529863	1					
ANR	3529955	CompoundStatement		15:16:370:370	3529863	1					
ANR	3529956	ExpressionStatement	AllDaemonsGone ( )	1879:2:46734:46750	3529863	0	True				
ANR	3529957	CallExpression	AllDaemonsGone ( )		3529863	0					
ANR	3529958	Callee	AllDaemonsGone		3529863	0					
ANR	3529959	Identifier	AllDaemonsGone		3529863	0					
ANR	3529960	ArgumentList			3529863	1					
ANR	3529961	ReturnType	void		3529863	1					
ANR	3529962	Identifier	Daemons :: StopFastAllDaemons		3529863	2					
ANR	3529963	ParameterList			3529863	3					
ANR	3529964	CFGEntryNode	ENTRY		3529863		True				
ANR	3529965	CFGExitNode	EXIT		3529863		True				
ANR	3529966	Symbol	iter -> second -> pid		3529863						
ANR	3529967	Symbol	iter -> second -> OnlyStopWhenMasterStops		3529863						
ANR	3529968	Symbol	iter		3529863						
ANR	3529969	Symbol	running		3529863						
ANR	3529970	Symbol	* iter -> second		3529863						
ANR	3529971	Symbol	* iter		3529863						
ANR	3529972	Symbol	iter -> second -> runs_here		3529863						
ANR	3529973	Symbol	daemon_ptr		3529863						
ANR	3529974	Symbol	daemon_ptr . begin		3529863						
ANR	3529975	Symbol	daemons		3529863						
ANR	3529976	Symbol	daemon_ptr . end		3529863						
ANR	3529977	Symbol	* * iter		3529863						
ANR	3529978	Symbol	iter -> second		3529863						
ANR	3529979	Function	Daemons :: StopPeacefulAllDaemons	1883:0:46762:47205							
ANR	3529980	FunctionDef	Daemons :: StopPeacefulAllDaemons ()		3529979	0					
ANR	3529981	CompoundStatement		1885:0:46801:47205	3529979	0					
ANR	3529982	ExpressionStatement	CancelRetryStartAllDaemons ( )	1886:1:46804:46832	3529979	0	True				
ANR	3529983	CallExpression	CancelRetryStartAllDaemons ( )		3529979	0					
ANR	3529984	Callee	CancelRetryStartAllDaemons		3529979	0					
ANR	3529985	Identifier	CancelRetryStartAllDaemons		3529979	0					
ANR	3529986	ArgumentList			3529979	1					
ANR	3529987	ExpressionStatement	daemons . SetAllReaper ( )	1887:1:46835:46857	3529979	1	True				
ANR	3529988	CallExpression	daemons . SetAllReaper ( )		3529979	0					
ANR	3529989	Callee	daemons . SetAllReaper		3529979	0					
ANR	3529990	MemberAccess	daemons . SetAllReaper		3529979	0					
ANR	3529991	Identifier	daemons		3529979	0					
ANR	3529992	Identifier	SetAllReaper		3529979	1					
ANR	3529993	ArgumentList			3529979	1					
ANR	3529994	IdentifierDeclStatement	int running = 0 ;	1888:1:46860:46875	3529979	2	True				
ANR	3529995	IdentifierDecl	running = 0		3529979	0					
ANR	3529996	IdentifierDeclType	int		3529979	0					
ANR	3529997	Identifier	running		3529979	1					
ANR	3529998	AssignmentExpression	running = 0		3529979	2		=			
ANR	3529999	Identifier	running		3529979	0					
ANR	3530000	PrimaryExpression	0		3529979	1					
ANR	3530001	IdentifierDeclStatement	"std :: map < std :: string , class daemon * > :: iterator iter ;"	1889:1:46878:46929	3529979	3	True				
ANR	3530002	IdentifierDecl	iter		3529979	0					
ANR	3530003	IdentifierDeclType	"std :: map < std :: string , class daemon * > :: iterator"		3529979	0					
ANR	3530004	Identifier	iter		3529979	1					
ANR	3530005	ForStatement	for ( iter = daemon_ptr . begin ( ) ; iter != daemon_ptr . end ( ) ; iter ++ )		3529979	4					
ANR	3530006	ForInit	iter = daemon_ptr . begin ( ) ;	1891:6:46938:46963	3529979	0	True				
ANR	3530007	AssignmentExpression	iter = daemon_ptr . begin ( )		3529979	0		=			
ANR	3530008	Identifier	iter		3529979	0					
ANR	3530009	CallExpression	daemon_ptr . begin ( )		3529979	1					
ANR	3530010	Callee	daemon_ptr . begin		3529979	0					
ANR	3530011	MemberAccess	daemon_ptr . begin		3529979	0					
ANR	3530012	Identifier	daemon_ptr		3529979	0					
ANR	3530013	Identifier	begin		3529979	1					
ANR	3530014	ArgumentList			3529979	1					
ANR	3530015	Condition	iter != daemon_ptr . end ( )	1891:33:46965:46988	3529979	1	True				
ANR	3530016	EqualityExpression	iter != daemon_ptr . end ( )		3529979	0		!=			
ANR	3530017	Identifier	iter		3529979	0					
ANR	3530018	CallExpression	daemon_ptr . end ( )		3529979	1					
ANR	3530019	Callee	daemon_ptr . end		3529979	0					
ANR	3530020	MemberAccess	daemon_ptr . end		3529979	0					
ANR	3530021	Identifier	daemon_ptr		3529979	0					
ANR	3530022	Identifier	end		3529979	1					
ANR	3530023	ArgumentList			3529979	1					
ANR	3530024	PostIncDecOperationExpression	iter ++	1891:59:46991:46996	3529979	2	True				
ANR	3530025	Identifier	iter		3529979	0					
ANR	3530026	IncDec	++		3529979	1					
ANR	3530027	CompoundStatement		7:68:198:198	3529979	3					
ANR	3530028	IfStatement	if ( iter -> second -> pid && iter -> second -> runs_here && ! iter -> second -> OnlyStopWhenMasterStops ( ) )		3529979	0					
ANR	3530029	Condition	iter -> second -> pid && iter -> second -> runs_here && ! iter -> second -> OnlyStopWhenMasterStops ( )	1892:6:47008:47098	3529979	0	True				
ANR	3530030	AndExpression	iter -> second -> pid && iter -> second -> runs_here && ! iter -> second -> OnlyStopWhenMasterStops ( )		3529979	0		&&			
ANR	3530031	PtrMemberAccess	iter -> second -> pid		3529979	0					
ANR	3530032	PtrMemberAccess	iter -> second		3529979	0					
ANR	3530033	Identifier	iter		3529979	0					
ANR	3530034	Identifier	second		3529979	1					
ANR	3530035	Identifier	pid		3529979	1					
ANR	3530036	AndExpression	iter -> second -> runs_here && ! iter -> second -> OnlyStopWhenMasterStops ( )		3529979	1		&&			
ANR	3530037	PtrMemberAccess	iter -> second -> runs_here		3529979	0					
ANR	3530038	PtrMemberAccess	iter -> second		3529979	0					
ANR	3530039	Identifier	iter		3529979	0					
ANR	3530040	Identifier	second		3529979	1					
ANR	3530041	Identifier	runs_here		3529979	1					
ANR	3530042	UnaryOperationExpression	! iter -> second -> OnlyStopWhenMasterStops ( )		3529979	1					
ANR	3530043	UnaryOperator	!		3529979	0					
ANR	3530044	CallExpression	iter -> second -> OnlyStopWhenMasterStops ( )		3529979	1					
ANR	3530045	Callee	iter -> second -> OnlyStopWhenMasterStops		3529979	0					
ANR	3530046	PtrMemberAccess	iter -> second -> OnlyStopWhenMasterStops		3529979	0					
ANR	3530047	PtrMemberAccess	iter -> second		3529979	0					
ANR	3530048	Identifier	iter		3529979	0					
ANR	3530049	Identifier	second		3529979	1					
ANR	3530050	Identifier	OnlyStopWhenMasterStops		3529979	1					
ANR	3530051	ArgumentList			3529979	1					
ANR	3530052	CompoundStatement		10:2:302:302	3529979	1					
ANR	3530053	ExpressionStatement	iter -> second -> StopPeaceful ( )	1895:3:47109:47137	3529979	0	True				
ANR	3530054	CallExpression	iter -> second -> StopPeaceful ( )		3529979	0					
ANR	3530055	Callee	iter -> second -> StopPeaceful		3529979	0					
ANR	3530056	PtrMemberAccess	iter -> second -> StopPeaceful		3529979	0					
ANR	3530057	PtrMemberAccess	iter -> second		3529979	0					
ANR	3530058	Identifier	iter		3529979	0					
ANR	3530059	Identifier	second		3529979	1					
ANR	3530060	Identifier	StopPeaceful		3529979	1					
ANR	3530061	ArgumentList			3529979	1					
ANR	3530062	ExpressionStatement	running ++	1896:3:47142:47151	3529979	1	True				
ANR	3530063	PostIncDecOperationExpression	running ++		3529979	0					
ANR	3530064	Identifier	running		3529979	0					
ANR	3530065	IncDec	++		3529979	1					
ANR	3530066	IfStatement	if ( ! running )		3529979	5					
ANR	3530067	Condition	! running	1899:5:47165:47172	3529979	0	True				
ANR	3530068	UnaryOperationExpression	! running		3529979	0					
ANR	3530069	UnaryOperator	!		3529979	0					
ANR	3530070	Identifier	running		3529979	1					
ANR	3530071	CompoundStatement		15:16:374:374	3529979	1					
ANR	3530072	ExpressionStatement	AllDaemonsGone ( )	1900:2:47180:47196	3529979	0	True				
ANR	3530073	CallExpression	AllDaemonsGone ( )		3529979	0					
ANR	3530074	Callee	AllDaemonsGone		3529979	0					
ANR	3530075	Identifier	AllDaemonsGone		3529979	0					
ANR	3530076	ArgumentList			3529979	1					
ANR	3530077	ReturnType	void		3529979	1					
ANR	3530078	Identifier	Daemons :: StopPeacefulAllDaemons		3529979	2					
ANR	3530079	ParameterList			3529979	3					
ANR	3530080	CFGEntryNode	ENTRY		3529979		True				
ANR	3530081	CFGExitNode	EXIT		3529979		True				
ANR	3530082	Symbol	iter -> second -> pid		3529979						
ANR	3530083	Symbol	iter -> second -> OnlyStopWhenMasterStops		3529979						
ANR	3530084	Symbol	iter		3529979						
ANR	3530085	Symbol	running		3529979						
ANR	3530086	Symbol	* iter -> second		3529979						
ANR	3530087	Symbol	* iter		3529979						
ANR	3530088	Symbol	iter -> second -> runs_here		3529979						
ANR	3530089	Symbol	daemon_ptr		3529979						
ANR	3530090	Symbol	daemon_ptr . begin		3529979						
ANR	3530091	Symbol	daemons		3529979						
ANR	3530092	Symbol	daemon_ptr . end		3529979						
ANR	3530093	Symbol	* * iter		3529979						
ANR	3530094	Symbol	iter -> second		3529979						
ANR	3530095	Function	Daemons :: HardKillAllDaemons	1905:0:47209:47644							
ANR	3530096	FunctionDef	Daemons :: HardKillAllDaemons ()		3530095	0					
ANR	3530097	CompoundStatement		1907:0:47244:47644	3530095	0					
ANR	3530098	ExpressionStatement	CancelRetryStartAllDaemons ( )	1908:1:47247:47275	3530095	0	True				
ANR	3530099	CallExpression	CancelRetryStartAllDaemons ( )		3530095	0					
ANR	3530100	Callee	CancelRetryStartAllDaemons		3530095	0					
ANR	3530101	Identifier	CancelRetryStartAllDaemons		3530095	0					
ANR	3530102	ArgumentList			3530095	1					
ANR	3530103	ExpressionStatement	daemons . SetAllReaper ( )	1909:1:47278:47300	3530095	1	True				
ANR	3530104	CallExpression	daemons . SetAllReaper ( )		3530095	0					
ANR	3530105	Callee	daemons . SetAllReaper		3530095	0					
ANR	3530106	MemberAccess	daemons . SetAllReaper		3530095	0					
ANR	3530107	Identifier	daemons		3530095	0					
ANR	3530108	Identifier	SetAllReaper		3530095	1					
ANR	3530109	ArgumentList			3530095	1					
ANR	3530110	IdentifierDeclStatement	int running = 0 ;	1910:1:47303:47318	3530095	2	True				
ANR	3530111	IdentifierDecl	running = 0		3530095	0					
ANR	3530112	IdentifierDeclType	int		3530095	0					
ANR	3530113	Identifier	running		3530095	1					
ANR	3530114	AssignmentExpression	running = 0		3530095	2		=			
ANR	3530115	Identifier	running		3530095	0					
ANR	3530116	PrimaryExpression	0		3530095	1					
ANR	3530117	IdentifierDeclStatement	"std :: map < std :: string , class daemon * > :: iterator iter ;"	1911:1:47321:47372	3530095	3	True				
ANR	3530118	IdentifierDecl	iter		3530095	0					
ANR	3530119	IdentifierDeclType	"std :: map < std :: string , class daemon * > :: iterator"		3530095	0					
ANR	3530120	Identifier	iter		3530095	1					
ANR	3530121	ForStatement	for ( iter = daemon_ptr . begin ( ) ; iter != daemon_ptr . end ( ) ; iter ++ )		3530095	4					
ANR	3530122	ForInit	iter = daemon_ptr . begin ( ) ;	1913:6:47381:47406	3530095	0	True				
ANR	3530123	AssignmentExpression	iter = daemon_ptr . begin ( )		3530095	0		=			
ANR	3530124	Identifier	iter		3530095	0					
ANR	3530125	CallExpression	daemon_ptr . begin ( )		3530095	1					
ANR	3530126	Callee	daemon_ptr . begin		3530095	0					
ANR	3530127	MemberAccess	daemon_ptr . begin		3530095	0					
ANR	3530128	Identifier	daemon_ptr		3530095	0					
ANR	3530129	Identifier	begin		3530095	1					
ANR	3530130	ArgumentList			3530095	1					
ANR	3530131	Condition	iter != daemon_ptr . end ( )	1913:33:47408:47431	3530095	1	True				
ANR	3530132	EqualityExpression	iter != daemon_ptr . end ( )		3530095	0		!=			
ANR	3530133	Identifier	iter		3530095	0					
ANR	3530134	CallExpression	daemon_ptr . end ( )		3530095	1					
ANR	3530135	Callee	daemon_ptr . end		3530095	0					
ANR	3530136	MemberAccess	daemon_ptr . end		3530095	0					
ANR	3530137	Identifier	daemon_ptr		3530095	0					
ANR	3530138	Identifier	end		3530095	1					
ANR	3530139	ArgumentList			3530095	1					
ANR	3530140	PostIncDecOperationExpression	iter ++	1913:59:47434:47439	3530095	2	True				
ANR	3530141	Identifier	iter		3530095	0					
ANR	3530142	IncDec	++		3530095	1					
ANR	3530143	CompoundStatement		7:68:198:198	3530095	3					
ANR	3530144	IfStatement	if ( iter -> second -> pid && iter -> second -> runs_here && ! iter -> second -> OnlyStopWhenMasterStops ( ) )		3530095	0					
ANR	3530145	Condition	iter -> second -> pid && iter -> second -> runs_here && ! iter -> second -> OnlyStopWhenMasterStops ( )	1914:6:47451:47541	3530095	0	True				
ANR	3530146	AndExpression	iter -> second -> pid && iter -> second -> runs_here && ! iter -> second -> OnlyStopWhenMasterStops ( )		3530095	0		&&			
ANR	3530147	PtrMemberAccess	iter -> second -> pid		3530095	0					
ANR	3530148	PtrMemberAccess	iter -> second		3530095	0					
ANR	3530149	Identifier	iter		3530095	0					
ANR	3530150	Identifier	second		3530095	1					
ANR	3530151	Identifier	pid		3530095	1					
ANR	3530152	AndExpression	iter -> second -> runs_here && ! iter -> second -> OnlyStopWhenMasterStops ( )		3530095	1		&&			
ANR	3530153	PtrMemberAccess	iter -> second -> runs_here		3530095	0					
ANR	3530154	PtrMemberAccess	iter -> second		3530095	0					
ANR	3530155	Identifier	iter		3530095	0					
ANR	3530156	Identifier	second		3530095	1					
ANR	3530157	Identifier	runs_here		3530095	1					
ANR	3530158	UnaryOperationExpression	! iter -> second -> OnlyStopWhenMasterStops ( )		3530095	1					
ANR	3530159	UnaryOperator	!		3530095	0					
ANR	3530160	CallExpression	iter -> second -> OnlyStopWhenMasterStops ( )		3530095	1					
ANR	3530161	Callee	iter -> second -> OnlyStopWhenMasterStops		3530095	0					
ANR	3530162	PtrMemberAccess	iter -> second -> OnlyStopWhenMasterStops		3530095	0					
ANR	3530163	PtrMemberAccess	iter -> second		3530095	0					
ANR	3530164	Identifier	iter		3530095	0					
ANR	3530165	Identifier	second		3530095	1					
ANR	3530166	Identifier	OnlyStopWhenMasterStops		3530095	1					
ANR	3530167	ArgumentList			3530095	1					
ANR	3530168	CompoundStatement		10:2:302:302	3530095	1					
ANR	3530169	ExpressionStatement	iter -> second -> HardKill ( )	1917:3:47552:47576	3530095	0	True				
ANR	3530170	CallExpression	iter -> second -> HardKill ( )		3530095	0					
ANR	3530171	Callee	iter -> second -> HardKill		3530095	0					
ANR	3530172	PtrMemberAccess	iter -> second -> HardKill		3530095	0					
ANR	3530173	PtrMemberAccess	iter -> second		3530095	0					
ANR	3530174	Identifier	iter		3530095	0					
ANR	3530175	Identifier	second		3530095	1					
ANR	3530176	Identifier	HardKill		3530095	1					
ANR	3530177	ArgumentList			3530095	1					
ANR	3530178	ExpressionStatement	running ++	1918:3:47581:47590	3530095	1	True				
ANR	3530179	PostIncDecOperationExpression	running ++		3530095	0					
ANR	3530180	Identifier	running		3530095	0					
ANR	3530181	IncDec	++		3530095	1					
ANR	3530182	IfStatement	if ( ! running )		3530095	5					
ANR	3530183	Condition	! running	1921:5:47604:47611	3530095	0	True				
ANR	3530184	UnaryOperationExpression	! running		3530095	0					
ANR	3530185	UnaryOperator	!		3530095	0					
ANR	3530186	Identifier	running		3530095	1					
ANR	3530187	CompoundStatement		15:16:370:370	3530095	1					
ANR	3530188	ExpressionStatement	AllDaemonsGone ( )	1922:2:47619:47635	3530095	0	True				
ANR	3530189	CallExpression	AllDaemonsGone ( )		3530095	0					
ANR	3530190	Callee	AllDaemonsGone		3530095	0					
ANR	3530191	Identifier	AllDaemonsGone		3530095	0					
ANR	3530192	ArgumentList			3530095	1					
ANR	3530193	ReturnType	void		3530095	1					
ANR	3530194	Identifier	Daemons :: HardKillAllDaemons		3530095	2					
ANR	3530195	ParameterList			3530095	3					
ANR	3530196	CFGEntryNode	ENTRY		3530095		True				
ANR	3530197	CFGExitNode	EXIT		3530095		True				
ANR	3530198	Symbol	iter -> second -> pid		3530095						
ANR	3530199	Symbol	iter -> second -> OnlyStopWhenMasterStops		3530095						
ANR	3530200	Symbol	iter		3530095						
ANR	3530201	Symbol	running		3530095						
ANR	3530202	Symbol	* iter -> second		3530095						
ANR	3530203	Symbol	iter -> second -> runs_here		3530095						
ANR	3530204	Symbol	* iter		3530095						
ANR	3530205	Symbol	daemon_ptr		3530095						
ANR	3530206	Symbol	daemon_ptr . begin		3530095						
ANR	3530207	Symbol	daemons		3530095						
ANR	3530208	Symbol	daemon_ptr . end		3530095						
ANR	3530209	Symbol	* * iter		3530095						
ANR	3530210	Symbol	iter -> second		3530095						
ANR	3530211	Function	Daemons :: ReconfigAllDaemons	1926:0:47647:47962							
ANR	3530212	FunctionDef	Daemons :: ReconfigAllDaemons ()		3530211	0					
ANR	3530213	CompoundStatement		1928:0:47682:47962	3530211	0					
ANR	3530214	IdentifierDeclStatement	"std :: map < std :: string , class daemon * > :: iterator iter ;"	1929:1:47685:47736	3530211	0	True				
ANR	3530215	IdentifierDecl	iter		3530211	0					
ANR	3530216	IdentifierDeclType	"std :: map < std :: string , class daemon * > :: iterator"		3530211	0					
ANR	3530217	Identifier	iter		3530211	1					
ANR	3530218	ExpressionStatement	"dprintf ( D_ALWAYS , ""Reconfiguring all running daemons.\\n"" )"	1930:1:47739:47798	3530211	1	True				
ANR	3530219	CallExpression	"dprintf ( D_ALWAYS , ""Reconfiguring all running daemons.\\n"" )"		3530211	0					
ANR	3530220	Callee	dprintf		3530211	0					
ANR	3530221	Identifier	dprintf		3530211	0					
ANR	3530222	ArgumentList	D_ALWAYS		3530211	1					
ANR	3530223	Argument	D_ALWAYS		3530211	0					
ANR	3530224	Identifier	D_ALWAYS		3530211	0					
ANR	3530225	Argument	"""Reconfiguring all running daemons.\\n"""		3530211	1					
ANR	3530226	PrimaryExpression	"""Reconfiguring all running daemons.\\n"""		3530211	0					
ANR	3530227	ForStatement	for ( iter = daemon_ptr . begin ( ) ; iter != daemon_ptr . end ( ) ; iter ++ )		3530211	2					
ANR	3530228	ForInit	iter = daemon_ptr . begin ( ) ;	1932:6:47807:47832	3530211	0	True				
ANR	3530229	AssignmentExpression	iter = daemon_ptr . begin ( )		3530211	0		=			
ANR	3530230	Identifier	iter		3530211	0					
ANR	3530231	CallExpression	daemon_ptr . begin ( )		3530211	1					
ANR	3530232	Callee	daemon_ptr . begin		3530211	0					
ANR	3530233	MemberAccess	daemon_ptr . begin		3530211	0					
ANR	3530234	Identifier	daemon_ptr		3530211	0					
ANR	3530235	Identifier	begin		3530211	1					
ANR	3530236	ArgumentList			3530211	1					
ANR	3530237	Condition	iter != daemon_ptr . end ( )	1932:33:47834:47857	3530211	1	True				
ANR	3530238	EqualityExpression	iter != daemon_ptr . end ( )		3530211	0		!=			
ANR	3530239	Identifier	iter		3530211	0					
ANR	3530240	CallExpression	daemon_ptr . end ( )		3530211	1					
ANR	3530241	Callee	daemon_ptr . end		3530211	0					
ANR	3530242	MemberAccess	daemon_ptr . end		3530211	0					
ANR	3530243	Identifier	daemon_ptr		3530211	0					
ANR	3530244	Identifier	end		3530211	1					
ANR	3530245	ArgumentList			3530211	1					
ANR	3530246	PostIncDecOperationExpression	iter ++	1932:59:47860:47865	3530211	2	True				
ANR	3530247	Identifier	iter		3530211	0					
ANR	3530248	IncDec	++		3530211	1					
ANR	3530249	CompoundStatement		5:68:186:186	3530211	3					
ANR	3530250	IfStatement	if ( iter -> second -> pid && iter -> second -> runs_here )		3530211	0					
ANR	3530251	Condition	iter -> second -> pid && iter -> second -> runs_here	1933:6:47877:47920	3530211	0	True				
ANR	3530252	AndExpression	iter -> second -> pid && iter -> second -> runs_here		3530211	0		&&			
ANR	3530253	PtrMemberAccess	iter -> second -> pid		3530211	0					
ANR	3530254	PtrMemberAccess	iter -> second		3530211	0					
ANR	3530255	Identifier	iter		3530211	0					
ANR	3530256	Identifier	second		3530211	1					
ANR	3530257	Identifier	pid		3530211	1					
ANR	3530258	PtrMemberAccess	iter -> second -> runs_here		3530211	1					
ANR	3530259	PtrMemberAccess	iter -> second		3530211	0					
ANR	3530260	Identifier	iter		3530211	0					
ANR	3530261	Identifier	second		3530211	1					
ANR	3530262	Identifier	runs_here		3530211	1					
ANR	3530263	CompoundStatement		6:53:241:241	3530211	1					
ANR	3530264	ExpressionStatement	iter -> second -> Reconfig ( )	1934:3:47929:47953	3530211	0	True				
ANR	3530265	CallExpression	iter -> second -> Reconfig ( )		3530211	0					
ANR	3530266	Callee	iter -> second -> Reconfig		3530211	0					
ANR	3530267	PtrMemberAccess	iter -> second -> Reconfig		3530211	0					
ANR	3530268	PtrMemberAccess	iter -> second		3530211	0					
ANR	3530269	Identifier	iter		3530211	0					
ANR	3530270	Identifier	second		3530211	1					
ANR	3530271	Identifier	Reconfig		3530211	1					
ANR	3530272	ArgumentList			3530211	1					
ANR	3530273	ReturnType	void		3530211	1					
ANR	3530274	Identifier	Daemons :: ReconfigAllDaemons		3530211	2					
ANR	3530275	ParameterList			3530211	3					
ANR	3530276	CFGEntryNode	ENTRY		3530211		True				
ANR	3530277	CFGExitNode	EXIT		3530211		True				
ANR	3530278	Symbol	iter -> second -> pid		3530211						
ANR	3530279	Symbol	* iter -> second		3530211						
ANR	3530280	Symbol	* iter		3530211						
ANR	3530281	Symbol	iter -> second -> runs_here		3530211						
ANR	3530282	Symbol	daemon_ptr		3530211						
ANR	3530283	Symbol	daemon_ptr . begin		3530211						
ANR	3530284	Symbol	D_ALWAYS		3530211						
ANR	3530285	Symbol	iter		3530211						
ANR	3530286	Symbol	daemon_ptr . end		3530211						
ANR	3530287	Symbol	* * iter		3530211						
ANR	3530288	Symbol	iter -> second		3530211						
ANR	3530289	Function	Daemons :: InitMaster	1940:0:47966:48261							
ANR	3530290	FunctionDef	Daemons :: InitMaster ()		3530289	0					
ANR	3530291	CompoundStatement		1942:0:47993:48261	3530289	0					
ANR	3530292	ExpressionStatement	"master = FindDaemon ( ""MASTER"" )"	1944:1:48034:48063	3530289	0	True				
ANR	3530293	AssignmentExpression	"master = FindDaemon ( ""MASTER"" )"		3530289	0		=			
ANR	3530294	Identifier	master		3530289	0					
ANR	3530295	CallExpression	"FindDaemon ( ""MASTER"" )"		3530289	1					
ANR	3530296	Callee	FindDaemon		3530289	0					
ANR	3530297	Identifier	FindDaemon		3530289	0					
ANR	3530298	ArgumentList	"""MASTER"""		3530289	1					
ANR	3530299	Argument	"""MASTER"""		3530289	0					
ANR	3530300	PrimaryExpression	"""MASTER"""		3530289	0					
ANR	3530301	IfStatement	if ( master == NULL )		3530289	1					
ANR	3530302	Condition	master == NULL	1945:6:48071:48084	3530289	0	True				
ANR	3530303	EqualityExpression	master == NULL		3530289	0		==			
ANR	3530304	Identifier	master		3530289	0					
ANR	3530305	Identifier	NULL		3530289	1					
ANR	3530306	CompoundStatement		4:23:94:94	3530289	1					
ANR	3530307	ExpressionStatement	"EXCEPT ( ""InitMaster: MASTER not Specified"" )"	1946:2:48092:48134	3530289	0	True				
ANR	3530308	CallExpression	"EXCEPT ( ""InitMaster: MASTER not Specified"" )"		3530289	0					
ANR	3530309	Callee	EXCEPT		3530289	0					
ANR	3530310	Identifier	EXCEPT		3530289	0					
ANR	3530311	ArgumentList	"""InitMaster: MASTER not Specified"""		3530289	1					
ANR	3530312	Argument	"""InitMaster: MASTER not Specified"""		3530289	0					
ANR	3530313	PrimaryExpression	"""InitMaster: MASTER not Specified"""		3530289	0					
ANR	3530314	ExpressionStatement	master -> timeStamp = GetTimeStamp ( master -> watch_name )	1948:1:48140:48192	3530289	2	True				
ANR	3530315	AssignmentExpression	master -> timeStamp = GetTimeStamp ( master -> watch_name )		3530289	0		=			
ANR	3530316	PtrMemberAccess	master -> timeStamp		3530289	0					
ANR	3530317	Identifier	master		3530289	0					
ANR	3530318	Identifier	timeStamp		3530289	1					
ANR	3530319	CallExpression	GetTimeStamp ( master -> watch_name )		3530289	1					
ANR	3530320	Callee	GetTimeStamp		3530289	0					
ANR	3530321	Identifier	GetTimeStamp		3530289	0					
ANR	3530322	ArgumentList	master -> watch_name		3530289	1					
ANR	3530323	Argument	master -> watch_name		3530289	0					
ANR	3530324	PtrMemberAccess	master -> watch_name		3530289	0					
ANR	3530325	Identifier	master		3530289	0					
ANR	3530326	Identifier	watch_name		3530289	1					
ANR	3530327	ExpressionStatement	master -> startTime = time ( 0 )	1949:1:48195:48222	3530289	3	True				
ANR	3530328	AssignmentExpression	master -> startTime = time ( 0 )		3530289	0		=			
ANR	3530329	PtrMemberAccess	master -> startTime		3530289	0					
ANR	3530330	Identifier	master		3530289	0					
ANR	3530331	Identifier	startTime		3530289	1					
ANR	3530332	CallExpression	time ( 0 )		3530289	1					
ANR	3530333	Callee	time		3530289	0					
ANR	3530334	Identifier	time		3530289	0					
ANR	3530335	ArgumentList	0		3530289	1					
ANR	3530336	Argument	0		3530289	0					
ANR	3530337	PrimaryExpression	0		3530289	0					
ANR	3530338	ExpressionStatement	master -> pid = daemonCore -> getpid ( )	1950:1:48225:48259	3530289	4	True				
ANR	3530339	AssignmentExpression	master -> pid = daemonCore -> getpid ( )		3530289	0		=			
ANR	3530340	PtrMemberAccess	master -> pid		3530289	0					
ANR	3530341	Identifier	master		3530289	0					
ANR	3530342	Identifier	pid		3530289	1					
ANR	3530343	CallExpression	daemonCore -> getpid ( )		3530289	1					
ANR	3530344	Callee	daemonCore -> getpid		3530289	0					
ANR	3530345	PtrMemberAccess	daemonCore -> getpid		3530289	0					
ANR	3530346	Identifier	daemonCore		3530289	0					
ANR	3530347	Identifier	getpid		3530289	1					
ANR	3530348	ArgumentList			3530289	1					
ANR	3530349	ReturnType	void		3530289	1					
ANR	3530350	Identifier	Daemons :: InitMaster		3530289	2					
ANR	3530351	ParameterList			3530289	3					
ANR	3530352	CFGEntryNode	ENTRY		3530289		True				
ANR	3530353	CFGExitNode	EXIT		3530289		True				
ANR	3530354	Symbol	NULL		3530289						
ANR	3530355	Symbol	master -> timeStamp		3530289						
ANR	3530356	Symbol	daemonCore -> getpid		3530289						
ANR	3530357	Symbol	master -> watch_name		3530289						
ANR	3530358	Symbol	master -> startTime		3530289						
ANR	3530359	Symbol	master		3530289						
ANR	3530360	Symbol	master -> pid		3530289						
ANR	3530361	Symbol	* daemonCore		3530289						
ANR	3530362	Symbol	daemonCore		3530289						
ANR	3530363	Symbol	FindDaemon		3530289						
ANR	3530364	Symbol	time		3530289						
ANR	3530365	Symbol	* master		3530289						
ANR	3530366	Symbol	GetTimeStamp		3530289						
ANR	3530367	Function	Daemons :: RestartMaster	1954:0:48265:48457							
ANR	3530368	FunctionDef	Daemons :: RestartMaster ()		3530367	0					
ANR	3530369	CompoundStatement		1956:0:48295:48457	3530367	0					
ANR	3530370	ExpressionStatement	MasterShuttingDown = TRUE	1957:1:48298:48323	3530367	0	True				
ANR	3530371	AssignmentExpression	MasterShuttingDown = TRUE		3530367	0		=			
ANR	3530372	Identifier	MasterShuttingDown		3530367	0					
ANR	3530373	Identifier	TRUE		3530367	1					
ANR	3530374	ExpressionStatement	immediate_restart_master = immediate_restart	1958:1:48326:48370	3530367	1	True				
ANR	3530375	AssignmentExpression	immediate_restart_master = immediate_restart		3530367	0		=			
ANR	3530376	Identifier	immediate_restart_master		3530367	0					
ANR	3530377	Identifier	immediate_restart		3530367	1					
ANR	3530378	ExpressionStatement	all_daemons_gone_action = MASTER_RESTART	1959:1:48373:48413	3530367	2	True				
ANR	3530379	AssignmentExpression	all_daemons_gone_action = MASTER_RESTART		3530367	0		=			
ANR	3530380	Identifier	all_daemons_gone_action		3530367	0					
ANR	3530381	Identifier	MASTER_RESTART		3530367	1					
ANR	3530382	ExpressionStatement	StartDaemons = FALSE	1960:1:48416:48436	3530367	3	True				
ANR	3530383	AssignmentExpression	StartDaemons = FALSE		3530367	0		=			
ANR	3530384	Identifier	StartDaemons		3530367	0					
ANR	3530385	Identifier	FALSE		3530367	1					
ANR	3530386	ExpressionStatement	StopAllDaemons ( )	1961:1:48439:48455	3530367	4	True				
ANR	3530387	CallExpression	StopAllDaemons ( )		3530367	0					
ANR	3530388	Callee	StopAllDaemons		3530367	0					
ANR	3530389	Identifier	StopAllDaemons		3530367	0					
ANR	3530390	ArgumentList			3530367	1					
ANR	3530391	ReturnType	void		3530367	1					
ANR	3530392	Identifier	Daemons :: RestartMaster		3530367	2					
ANR	3530393	ParameterList			3530367	3					
ANR	3530394	CFGEntryNode	ENTRY		3530367		True				
ANR	3530395	CFGExitNode	EXIT		3530367		True				
ANR	3530396	Symbol	MasterShuttingDown		3530367						
ANR	3530397	Symbol	StartDaemons		3530367						
ANR	3530398	Symbol	immediate_restart_master		3530367						
ANR	3530399	Symbol	MASTER_RESTART		3530367						
ANR	3530400	Symbol	TRUE		3530367						
ANR	3530401	Symbol	immediate_restart		3530367						
ANR	3530402	Symbol	all_daemons_gone_action		3530367						
ANR	3530403	Symbol	FALSE		3530367						
ANR	3530404	Function	Daemons :: RestartMasterPeaceful	1964:0:48460:48668							
ANR	3530405	FunctionDef	Daemons :: RestartMasterPeaceful ()		3530404	0					
ANR	3530406	CompoundStatement		1966:0:48498:48668	3530404	0					
ANR	3530407	ExpressionStatement	MasterShuttingDown = TRUE	1967:1:48501:48526	3530404	0	True				
ANR	3530408	AssignmentExpression	MasterShuttingDown = TRUE		3530404	0		=			
ANR	3530409	Identifier	MasterShuttingDown		3530404	0					
ANR	3530410	Identifier	TRUE		3530404	1					
ANR	3530411	ExpressionStatement	immediate_restart_master = immediate_restart	1968:1:48529:48573	3530404	1	True				
ANR	3530412	AssignmentExpression	immediate_restart_master = immediate_restart		3530404	0		=			
ANR	3530413	Identifier	immediate_restart_master		3530404	0					
ANR	3530414	Identifier	immediate_restart		3530404	1					
ANR	3530415	ExpressionStatement	all_daemons_gone_action = MASTER_RESTART	1969:1:48576:48616	3530404	2	True				
ANR	3530416	AssignmentExpression	all_daemons_gone_action = MASTER_RESTART		3530404	0		=			
ANR	3530417	Identifier	all_daemons_gone_action		3530404	0					
ANR	3530418	Identifier	MASTER_RESTART		3530404	1					
ANR	3530419	ExpressionStatement	StartDaemons = FALSE	1970:1:48619:48639	3530404	3	True				
ANR	3530420	AssignmentExpression	StartDaemons = FALSE		3530404	0		=			
ANR	3530421	Identifier	StartDaemons		3530404	0					
ANR	3530422	Identifier	FALSE		3530404	1					
ANR	3530423	ExpressionStatement	StopPeacefulAllDaemons ( )	1971:1:48642:48666	3530404	4	True				
ANR	3530424	CallExpression	StopPeacefulAllDaemons ( )		3530404	0					
ANR	3530425	Callee	StopPeacefulAllDaemons		3530404	0					
ANR	3530426	Identifier	StopPeacefulAllDaemons		3530404	0					
ANR	3530427	ArgumentList			3530404	1					
ANR	3530428	ReturnType	void		3530404	1					
ANR	3530429	Identifier	Daemons :: RestartMasterPeaceful		3530404	2					
ANR	3530430	ParameterList			3530404	3					
ANR	3530431	CFGEntryNode	ENTRY		3530404		True				
ANR	3530432	CFGExitNode	EXIT		3530404		True				
ANR	3530433	Symbol	MasterShuttingDown		3530404						
ANR	3530434	Symbol	StartDaemons		3530404						
ANR	3530435	Symbol	immediate_restart_master		3530404						
ANR	3530436	Symbol	MASTER_RESTART		3530404						
ANR	3530437	Symbol	TRUE		3530404						
ANR	3530438	Symbol	immediate_restart		3530404						
ANR	3530439	Symbol	all_daemons_gone_action		3530404						
ANR	3530440	Symbol	FALSE		3530404						
ANR	3530441	Function	Daemons :: FinishRestartMaster	1979:0:48991:49394							
ANR	3530442	FunctionDef	Daemons :: FinishRestartMaster ()		3530441	0					
ANR	3530443	CompoundStatement		1981:0:49027:49394	3530441	0					
ANR	3530444	IfStatement	if ( immediate_restart_master )		3530441	0					
ANR	3530445	Condition	immediate_restart_master	1982:5:49034:49057	3530441	0	True				
ANR	3530446	Identifier	immediate_restart_master		3530441	0					
ANR	3530447	CompoundStatement		2:32:33:33	3530441	1					
ANR	3530448	ExpressionStatement	"dprintf ( D_ALWAYS , ""Restarting master right away.\\n"" )"	1983:2:49065:49119	3530441	0	True				
ANR	3530449	CallExpression	"dprintf ( D_ALWAYS , ""Restarting master right away.\\n"" )"		3530441	0					
ANR	3530450	Callee	dprintf		3530441	0					
ANR	3530451	Identifier	dprintf		3530441	0					
ANR	3530452	ArgumentList	D_ALWAYS		3530441	1					
ANR	3530453	Argument	D_ALWAYS		3530441	0					
ANR	3530454	Identifier	D_ALWAYS		3530441	0					
ANR	3530455	Argument	"""Restarting master right away.\\n"""		3530441	1					
ANR	3530456	PrimaryExpression	"""Restarting master right away.\\n"""		3530441	0					
ANR	3530457	ExpressionStatement	FinalRestartMaster ( )	1984:2:49123:49143	3530441	1	True				
ANR	3530458	CallExpression	FinalRestartMaster ( )		3530441	0					
ANR	3530459	Callee	FinalRestartMaster		3530441	0					
ANR	3530460	Identifier	FinalRestartMaster		3530441	0					
ANR	3530461	ArgumentList			3530441	1					
ANR	3530462	ElseStatement	else		3530441	0					
ANR	3530463	CompoundStatement		5:8:125:125	3530441	0					
ANR	3530464	ExpressionStatement	"dprintf ( D_ALWAYS , ""Restarting master in %d seconds.\\n"" , new_bin_delay )"	1986:2:49157:49234	3530441	0	True				
ANR	3530465	CallExpression	"dprintf ( D_ALWAYS , ""Restarting master in %d seconds.\\n"" , new_bin_delay )"		3530441	0					
ANR	3530466	Callee	dprintf		3530441	0					
ANR	3530467	Identifier	dprintf		3530441	0					
ANR	3530468	ArgumentList	D_ALWAYS		3530441	1					
ANR	3530469	Argument	D_ALWAYS		3530441	0					
ANR	3530470	Identifier	D_ALWAYS		3530441	0					
ANR	3530471	Argument	"""Restarting master in %d seconds.\\n"""		3530441	1					
ANR	3530472	PrimaryExpression	"""Restarting master in %d seconds.\\n"""		3530441	0					
ANR	3530473	Argument	new_bin_delay		3530441	2					
ANR	3530474	Identifier	new_bin_delay		3530441	0					
ANR	3530475	ExpressionStatement	"daemonCore -> Register_Timer ( new_bin_delay , 0 , ( TimerHandlercpp ) & Daemons :: FinalRestartMaster , ""Daemons::FinalRestartMaster()"" , this )"	1988:2:49238:49389	3530441	1	True				
ANR	3530476	CallExpression	"daemonCore -> Register_Timer ( new_bin_delay , 0 , ( TimerHandlercpp ) & Daemons :: FinalRestartMaster , ""Daemons::FinalRestartMaster()"" , this )"		3530441	0					
ANR	3530477	Callee	daemonCore -> Register_Timer		3530441	0					
ANR	3530478	PtrMemberAccess	daemonCore -> Register_Timer		3530441	0					
ANR	3530479	Identifier	daemonCore		3530441	0					
ANR	3530480	Identifier	Register_Timer		3530441	1					
ANR	3530481	ArgumentList	new_bin_delay		3530441	1					
ANR	3530482	Argument	new_bin_delay		3530441	0					
ANR	3530483	Identifier	new_bin_delay		3530441	0					
ANR	3530484	Argument	0		3530441	1					
ANR	3530485	PrimaryExpression	0		3530441	0					
ANR	3530486	Argument	( TimerHandlercpp ) & Daemons :: FinalRestartMaster		3530441	2					
ANR	3530487	CastExpression	( TimerHandlercpp ) & Daemons :: FinalRestartMaster		3530441	0					
ANR	3530488	CastTarget	TimerHandlercpp		3530441	0					
ANR	3530489	UnaryOperationExpression	& Daemons :: FinalRestartMaster		3530441	1					
ANR	3530490	UnaryOperator	&		3530441	0					
ANR	3530491	Identifier	Daemons :: FinalRestartMaster		3530441	1					
ANR	3530492	Argument	"""Daemons::FinalRestartMaster()"""		3530441	3					
ANR	3530493	PrimaryExpression	"""Daemons::FinalRestartMaster()"""		3530441	0					
ANR	3530494	Argument	this		3530441	4					
ANR	3530495	Identifier	this		3530441	0					
ANR	3530496	ReturnType	void		3530441	1					
ANR	3530497	Identifier	Daemons :: FinishRestartMaster		3530441	2					
ANR	3530498	ParameterList			3530441	3					
ANR	3530499	CFGEntryNode	ENTRY		3530441		True				
ANR	3530500	CFGExitNode	EXIT		3530441		True				
ANR	3530501	Symbol	immediate_restart_master		3530441						
ANR	3530502	Symbol	new_bin_delay		3530441						
ANR	3530503	Symbol	daemonCore		3530441						
ANR	3530504	Symbol	D_ALWAYS		3530441						
ANR	3530505	Symbol	this		3530441						
ANR	3530506	Symbol	& Daemons :: FinalRestartMaster		3530441						
ANR	3530507	Function	Daemons :: CleanupBeforeRestart	1995:0:49397:50758							
ANR	3530508	FunctionDef	Daemons :: CleanupBeforeRestart ()		3530507	0					
ANR	3530509	CompoundStatement		1997:0:49434:50758	3530507	0					
ANR	3530510	ExpressionStatement	daemonCore -> Proc_Family_Cleanup ( )	2002:1:49588:49621	3530507	0	True				
ANR	3530511	CallExpression	daemonCore -> Proc_Family_Cleanup ( )		3530507	0					
ANR	3530512	Callee	daemonCore -> Proc_Family_Cleanup		3530507	0					
ANR	3530513	PtrMemberAccess	daemonCore -> Proc_Family_Cleanup		3530507	0					
ANR	3530514	Identifier	daemonCore		3530507	0					
ANR	3530515	Identifier	Proc_Family_Cleanup		3530507	1					
ANR	3530516	ArgumentList			3530507	1					
ANR	3530517	IdentifierDeclStatement	int max_fds = getdtablesize ( ) ;	2005:1:49640:49669	3530507	1	True				
ANR	3530518	IdentifierDecl	max_fds = getdtablesize ( )		3530507	0					
ANR	3530519	IdentifierDeclType	int		3530507	0					
ANR	3530520	Identifier	max_fds		3530507	1					
ANR	3530521	AssignmentExpression	max_fds = getdtablesize ( )		3530507	2		=			
ANR	3530522	Identifier	max_fds		3530507	0					
ANR	3530523	CallExpression	getdtablesize ( )		3530507	1					
ANR	3530524	Callee	getdtablesize		3530507	0					
ANR	3530525	Identifier	getdtablesize		3530507	0					
ANR	3530526	ArgumentList			3530507	1					
ANR	3530527	IfStatement	if ( MasterLock -> release ( ) == FALSE )		3530507	2					
ANR	3530528	Condition	MasterLock -> release ( ) == FALSE	2008:6:49718:49747	3530507	0	True				
ANR	3530529	EqualityExpression	MasterLock -> release ( ) == FALSE		3530507	0		==			
ANR	3530530	CallExpression	MasterLock -> release ( )		3530507	0					
ANR	3530531	Callee	MasterLock -> release		3530507	0					
ANR	3530532	PtrMemberAccess	MasterLock -> release		3530507	0					
ANR	3530533	Identifier	MasterLock		3530507	0					
ANR	3530534	Identifier	release		3530507	1					
ANR	3530535	ArgumentList			3530507	1					
ANR	3530536	Identifier	FALSE		3530507	1					
ANR	3530537	CompoundStatement		12:39:316:316	3530507	1					
ANR	3530538	ExpressionStatement	"dprintf ( D_ALWAYS , ""Can't remove lock on \\""%s\\""\\n"" , master -> log_name )"	2009:2:49755:49828	3530507	0	True				
ANR	3530539	CallExpression	"dprintf ( D_ALWAYS , ""Can't remove lock on \\""%s\\""\\n"" , master -> log_name )"		3530507	0					
ANR	3530540	Callee	dprintf		3530507	0					
ANR	3530541	Identifier	dprintf		3530507	0					
ANR	3530542	ArgumentList	D_ALWAYS		3530507	1					
ANR	3530543	Argument	D_ALWAYS		3530507	0					
ANR	3530544	Identifier	D_ALWAYS		3530507	0					
ANR	3530545	Argument	"""Can't remove lock on \\""%s\\""\\n"""		3530507	1					
ANR	3530546	PrimaryExpression	"""Can't remove lock on \\""%s\\""\\n"""		3530507	0					
ANR	3530547	Argument	master -> log_name		3530507	2					
ANR	3530548	PtrMemberAccess	master -> log_name		3530507	0					
ANR	3530549	Identifier	master		3530507	0					
ANR	3530550	Identifier	log_name		3530507	1					
ANR	3530551	ExpressionStatement	"EXCEPT ( ""file_lock(%d)"" , MasterLockFD )"	2011:2:49832:49871	3530507	1	True				
ANR	3530552	CallExpression	"EXCEPT ( ""file_lock(%d)"" , MasterLockFD )"		3530507	0					
ANR	3530553	Callee	EXCEPT		3530507	0					
ANR	3530554	Identifier	EXCEPT		3530507	0					
ANR	3530555	ArgumentList	"""file_lock(%d)"""		3530507	1					
ANR	3530556	Argument	"""file_lock(%d)"""		3530507	0					
ANR	3530557	PrimaryExpression	"""file_lock(%d)"""		3530507	0					
ANR	3530558	Argument	MasterLockFD		3530507	1					
ANR	3530559	Identifier	MasterLockFD		3530507	0					
ANR	3530560	ExpressionStatement	( void ) close ( MasterLockFD )	2013:1:49877:49904	3530507	3	True				
ANR	3530561	CastExpression	( void ) close ( MasterLockFD )		3530507	0					
ANR	3530562	CastTarget	void		3530507	0					
ANR	3530563	CallExpression	close ( MasterLockFD )		3530507	1					
ANR	3530564	Callee	close		3530507	0					
ANR	3530565	Identifier	close		3530507	0					
ANR	3530566	ArgumentList	MasterLockFD		3530507	1					
ANR	3530567	Argument	MasterLockFD		3530507	0					
ANR	3530568	Identifier	MasterLockFD		3530507	0					
ANR	3530569	ForStatement	for ( int i = 3 ; i < max_fds ; i ++ )		3530507	4					
ANR	3530570	ForInit	int i = 3 ;	2021:6:50248:50255	3530507	0	True				
ANR	3530571	IdentifierDeclStatement	int i = 3 ;		3530507	0					
ANR	3530572	IdentifierDecl	i = 3		3530507	0					
ANR	3530573	IdentifierDeclType	int		3530507	0					
ANR	3530574	Identifier	i		3530507	1					
ANR	3530575	AssignmentExpression	i = 3		3530507	2		=			
ANR	3530576	Identifier	i		3530507	0					
ANR	3530577	PrimaryExpression	3		3530507	1					
ANR	3530578	Condition	i < max_fds	2021:15:50257:50267	3530507	1	True				
ANR	3530579	RelationalExpression	i < max_fds		3530507	0		<			
ANR	3530580	Identifier	i		3530507	0					
ANR	3530581	Identifier	max_fds		3530507	1					
ANR	3530582	PostIncDecOperationExpression	i ++	2021:28:50270:50272	3530507	2	True				
ANR	3530583	Identifier	i		3530507	0					
ANR	3530584	IncDec	++		3530507	1					
ANR	3530585	CompoundStatement		26:2:844:873	3530507	3					
ANR	3530586	IdentifierDeclStatement	"int flag = fcntl ( i , F_GETFD , 0 ) ;"	2022:2:50279:50308	3530507	0	True				
ANR	3530587	IdentifierDecl	"flag = fcntl ( i , F_GETFD , 0 )"		3530507	0					
ANR	3530588	IdentifierDeclType	int		3530507	0					
ANR	3530589	Identifier	flag		3530507	1					
ANR	3530590	AssignmentExpression	"flag = fcntl ( i , F_GETFD , 0 )"		3530507	2		=			
ANR	3530591	Identifier	flag		3530507	0					
ANR	3530592	CallExpression	"fcntl ( i , F_GETFD , 0 )"		3530507	1					
ANR	3530593	Callee	fcntl		3530507	0					
ANR	3530594	Identifier	fcntl		3530507	0					
ANR	3530595	ArgumentList	i		3530507	1					
ANR	3530596	Argument	i		3530507	0					
ANR	3530597	Identifier	i		3530507	0					
ANR	3530598	Argument	F_GETFD		3530507	1					
ANR	3530599	Identifier	F_GETFD		3530507	0					
ANR	3530600	Argument	0		3530507	2					
ANR	3530601	PrimaryExpression	0		3530507	0					
ANR	3530602	IfStatement	if ( flag != - 1 )		3530507	1					
ANR	3530603	Condition	flag != - 1	2023:6:50316:50325	3530507	0	True				
ANR	3530604	EqualityExpression	flag != - 1		3530507	0		!=			
ANR	3530605	Identifier	flag		3530507	0					
ANR	3530606	UnaryOperationExpression	- 1		3530507	1					
ANR	3530607	UnaryOperator	-		3530507	0					
ANR	3530608	PrimaryExpression	1		3530507	1					
ANR	3530609	CompoundStatement		27:19:894:894	3530507	1					
ANR	3530610	ExpressionStatement	"fcntl ( i , F_SETFD , flag | 1 )"	2024:3:50334:50359	3530507	0	True				
ANR	3530611	CallExpression	"fcntl ( i , F_SETFD , flag | 1 )"		3530507	0					
ANR	3530612	Callee	fcntl		3530507	0					
ANR	3530613	Identifier	fcntl		3530507	0					
ANR	3530614	ArgumentList	i		3530507	1					
ANR	3530615	Argument	i		3530507	0					
ANR	3530616	Identifier	i		3530507	0					
ANR	3530617	Argument	F_SETFD		3530507	1					
ANR	3530618	Identifier	F_SETFD		3530507	0					
ANR	3530619	Argument	flag | 1		3530507	2					
ANR	3530620	InclusiveOrExpression	flag | 1		3530507	0		|			
ANR	3530621	Identifier	flag		3530507	0					
ANR	3530622	PrimaryExpression	1		3530507	1					
ANR	3530623	IdentifierDeclStatement	char tmps [ 256 ] ;	2034:1:50673:50687	3530507	5	True				
ANR	3530624	IdentifierDecl	tmps [ 256 ]		3530507	0					
ANR	3530625	IdentifierDeclType	char [ 256 ]		3530507	0					
ANR	3530626	Identifier	tmps		3530507	1					
ANR	3530627	PrimaryExpression	256		3530507	2					
ANR	3530628	ExpressionStatement	"sprintf ( tmps , ""%s="" , EnvGetName ( ENV_INHERIT ) )"	2035:1:50690:50739	3530507	6	True				
ANR	3530629	CallExpression	"sprintf ( tmps , ""%s="" , EnvGetName ( ENV_INHERIT ) )"		3530507	0					
ANR	3530630	Callee	sprintf		3530507	0					
ANR	3530631	Identifier	sprintf		3530507	0					
ANR	3530632	ArgumentList	tmps		3530507	1					
ANR	3530633	Argument	tmps		3530507	0					
ANR	3530634	Identifier	tmps		3530507	0					
ANR	3530635	Argument	"""%s="""		3530507	1					
ANR	3530636	PrimaryExpression	"""%s="""		3530507	0					
ANR	3530637	Argument	EnvGetName ( ENV_INHERIT )		3530507	2					
ANR	3530638	CallExpression	EnvGetName ( ENV_INHERIT )		3530507	0					
ANR	3530639	Callee	EnvGetName		3530507	0					
ANR	3530640	Identifier	EnvGetName		3530507	0					
ANR	3530641	ArgumentList	ENV_INHERIT		3530507	1					
ANR	3530642	Argument	ENV_INHERIT		3530507	0					
ANR	3530643	Identifier	ENV_INHERIT		3530507	0					
ANR	3530644	ExpressionStatement	putenv ( tmps )	2036:1:50742:50756	3530507	7	True				
ANR	3530645	CallExpression	putenv ( tmps )		3530507	0					
ANR	3530646	Callee	putenv		3530507	0					
ANR	3530647	Identifier	putenv		3530507	0					
ANR	3530648	ArgumentList	tmps		3530507	1					
ANR	3530649	Argument	tmps		3530507	0					
ANR	3530650	Identifier	tmps		3530507	0					
ANR	3530651	ReturnType	void		3530507	1					
ANR	3530652	Identifier	Daemons :: CleanupBeforeRestart		3530507	2					
ANR	3530653	ParameterList			3530507	3					
ANR	3530654	CFGEntryNode	ENTRY		3530507		True				
ANR	3530655	CFGExitNode	EXIT		3530507		True				
ANR	3530656	Symbol	ENV_INHERIT		3530507						
ANR	3530657	Symbol	F_GETFD		3530507						
ANR	3530658	Symbol	flag		3530507						
ANR	3530659	Symbol	MasterLockFD		3530507						
ANR	3530660	Symbol	fcntl		3530507						
ANR	3530661	Symbol	F_SETFD		3530507						
ANR	3530662	Symbol	getdtablesize		3530507						
ANR	3530663	Symbol	D_ALWAYS		3530507						
ANR	3530664	Symbol	i		3530507						
ANR	3530665	Symbol	tmps		3530507						
ANR	3530666	Symbol	EnvGetName		3530507						
ANR	3530667	Symbol	MasterLock		3530507						
ANR	3530668	Symbol	max_fds		3530507						
ANR	3530669	Symbol	MasterLock -> release		3530507						
ANR	3530670	Symbol	master		3530507						
ANR	3530671	Symbol	daemonCore		3530507						
ANR	3530672	Symbol	FALSE		3530507						
ANR	3530673	Symbol	* MasterLock		3530507						
ANR	3530674	Symbol	* master		3530507						
ANR	3530675	Symbol	master -> log_name		3530507						
ANR	3530676	Function	Daemons :: ExecMaster	2039:0:50761:51948							
ANR	3530677	FunctionDef	Daemons :: ExecMaster ()		3530676	0					
ANR	3530678	CompoundStatement		2041:0:50788:51948	3530676	0					
ANR	3530679	IdentifierDeclStatement	"int i = 0 , j ;"	2042:1:50791:50800	3530676	0	True				
ANR	3530680	IdentifierDecl	i = 0		3530676	0					
ANR	3530681	IdentifierDeclType	int		3530676	0					
ANR	3530682	Identifier	i		3530676	1					
ANR	3530683	AssignmentExpression	i = 0		3530676	2		=			
ANR	3530684	Identifier	i		3530676	0					
ANR	3530685	PrimaryExpression	0		3530676	1					
ANR	3530686	IdentifierDecl	j		3530676	1					
ANR	3530687	IdentifierDeclType	int		3530676	0					
ANR	3530688	Identifier	j		3530676	1					
ANR	3530689	IdentifierDeclStatement	char * * argv = ( char * * ) malloc ( ( condor_main_argc + 2 ) * sizeof ( char * ) ) ;	2043:1:50803:50869	3530676	1	True				
ANR	3530690	IdentifierDecl	* * argv = ( char * * ) malloc ( ( condor_main_argc + 2 ) * sizeof ( char * ) )		3530676	0					
ANR	3530691	IdentifierDeclType	char * *		3530676	0					
ANR	3530692	Identifier	argv		3530676	1					
ANR	3530693	AssignmentExpression	* * argv = ( char * * ) malloc ( ( condor_main_argc + 2 ) * sizeof ( char * ) )		3530676	2		=			
ANR	3530694	Identifier	argv		3530676	0					
ANR	3530695	CastExpression	( char * * ) malloc ( ( condor_main_argc + 2 ) * sizeof ( char * ) )		3530676	1					
ANR	3530696	CastTarget	char * *		3530676	0					
ANR	3530697	CallExpression	malloc ( ( condor_main_argc + 2 ) * sizeof ( char * ) )		3530676	1					
ANR	3530698	Callee	malloc		3530676	0					
ANR	3530699	Identifier	malloc		3530676	0					
ANR	3530700	ArgumentList	( condor_main_argc + 2 ) * sizeof ( char * )		3530676	1					
ANR	3530701	Argument	( condor_main_argc + 2 ) * sizeof ( char * )		3530676	0					
ANR	3530702	MultiplicativeExpression	( condor_main_argc + 2 ) * sizeof ( char * )		3530676	0		*			
ANR	3530703	AdditiveExpression	condor_main_argc + 2		3530676	0		+			
ANR	3530704	Identifier	condor_main_argc		3530676	0					
ANR	3530705	PrimaryExpression	2		3530676	1					
ANR	3530706	SizeofExpression	sizeof ( char * )		3530676	1					
ANR	3530707	Sizeof	sizeof		3530676	0					
ANR	3530708	SizeofOperand	char *		3530676	1					
ANR	3530709	ExpressionStatement	ASSERT ( condor_main_argc > 0 )	2045:1:50873:50901	3530676	2	True				
ANR	3530710	CallExpression	ASSERT ( condor_main_argc > 0 )		3530676	0					
ANR	3530711	Callee	ASSERT		3530676	0					
ANR	3530712	Identifier	ASSERT		3530676	0					
ANR	3530713	ArgumentList	condor_main_argc > 0		3530676	1					
ANR	3530714	Argument	condor_main_argc > 0		3530676	0					
ANR	3530715	RelationalExpression	condor_main_argc > 0		3530676	0		>			
ANR	3530716	Identifier	condor_main_argc		3530676	0					
ANR	3530717	PrimaryExpression	0		3530676	1					
ANR	3530718	ExpressionStatement	argv [ i ++ ] = condor_main_argv [ 0 ]	2046:1:50904:50935	3530676	3	True				
ANR	3530719	AssignmentExpression	argv [ i ++ ] = condor_main_argv [ 0 ]		3530676	0		=			
ANR	3530720	ArrayIndexing	argv [ i ++ ]		3530676	0					
ANR	3530721	Identifier	argv		3530676	0					
ANR	3530722	PostIncDecOperationExpression	i ++		3530676	1					
ANR	3530723	Identifier	i		3530676	0					
ANR	3530724	IncDec	++		3530676	1					
ANR	3530725	ArrayIndexing	condor_main_argv [ 0 ]		3530676	1					
ANR	3530726	Identifier	condor_main_argv		3530676	0					
ANR	3530727	PrimaryExpression	0		3530676	1					
ANR	3530728	ExpressionStatement	"argv [ i ++ ] = ""-f"""	2049:1:50998:51014	3530676	4	True				
ANR	3530729	AssignmentExpression	"argv [ i ++ ] = ""-f"""		3530676	0		=			
ANR	3530730	ArrayIndexing	argv [ i ++ ]		3530676	0					
ANR	3530731	Identifier	argv		3530676	0					
ANR	3530732	PostIncDecOperationExpression	i ++		3530676	1					
ANR	3530733	Identifier	i		3530676	0					
ANR	3530734	IncDec	++		3530676	1					
ANR	3530735	PrimaryExpression	"""-f"""		3530676	1					
ANR	3530736	ForStatement	for ( j = 1 ; j < condor_main_argc ; j ++ )		3530676	5					
ANR	3530737	ForInit	j = 1 ;	2050:5:51021:51024	3530676	0	True				
ANR	3530738	AssignmentExpression	j = 1		3530676	0		=			
ANR	3530739	Identifier	j		3530676	0					
ANR	3530740	PrimaryExpression	1		3530676	1					
ANR	3530741	Condition	j < condor_main_argc	2050:9:51025:51042	3530676	1	True				
ANR	3530742	RelationalExpression	j < condor_main_argc		3530676	0		<			
ANR	3530743	Identifier	j		3530676	0					
ANR	3530744	Identifier	condor_main_argc		3530676	1					
ANR	3530745	PostIncDecOperationExpression	j ++	2050:28:51044:51046	3530676	2	True				
ANR	3530746	Identifier	j		3530676	0					
ANR	3530747	IncDec	++		3530676	1					
ANR	3530748	CompoundStatement		11:2:264:304	3530676	3					
ANR	3530749	IdentifierDeclStatement	size_t len = strlen ( condor_main_argv [ j ] ) ;	2051:2:51053:51093	3530676	0	True				
ANR	3530750	IdentifierDecl	len = strlen ( condor_main_argv [ j ] )		3530676	0					
ANR	3530751	IdentifierDeclType	size_t		3530676	0					
ANR	3530752	Identifier	len		3530676	1					
ANR	3530753	AssignmentExpression	len = strlen ( condor_main_argv [ j ] )		3530676	2		=			
ANR	3530754	Identifier	len		3530676	0					
ANR	3530755	CallExpression	strlen ( condor_main_argv [ j ] )		3530676	1					
ANR	3530756	Callee	strlen		3530676	0					
ANR	3530757	Identifier	strlen		3530676	0					
ANR	3530758	ArgumentList	condor_main_argv [ j ]		3530676	1					
ANR	3530759	Argument	condor_main_argv [ j ]		3530676	0					
ANR	3530760	ArrayIndexing	condor_main_argv [ j ]		3530676	0					
ANR	3530761	Identifier	condor_main_argv		3530676	0					
ANR	3530762	Identifier	j		3530676	1					
ANR	3530763	IfStatement	"if ( strncmp ( condor_main_argv [ j ] , ""-foreground"" , len ) == 0 )"		3530676	1					
ANR	3530764	Condition	"strncmp ( condor_main_argv [ j ] , ""-foreground"" , len ) == 0"	2052:6:51101:51149	3530676	0	True				
ANR	3530765	EqualityExpression	"strncmp ( condor_main_argv [ j ] , ""-foreground"" , len ) == 0"		3530676	0		==			
ANR	3530766	CallExpression	"strncmp ( condor_main_argv [ j ] , ""-foreground"" , len )"		3530676	0					
ANR	3530767	Callee	strncmp		3530676	0					
ANR	3530768	Identifier	strncmp		3530676	0					
ANR	3530769	ArgumentList	condor_main_argv [ j ]		3530676	1					
ANR	3530770	Argument	condor_main_argv [ j ]		3530676	0					
ANR	3530771	ArrayIndexing	condor_main_argv [ j ]		3530676	0					
ANR	3530772	Identifier	condor_main_argv		3530676	0					
ANR	3530773	Identifier	j		3530676	1					
ANR	3530774	Argument	"""-foreground"""		3530676	1					
ANR	3530775	PrimaryExpression	"""-foreground"""		3530676	0					
ANR	3530776	Argument	len		3530676	2					
ANR	3530777	Identifier	len		3530676	0					
ANR	3530778	PrimaryExpression	0		3530676	1					
ANR	3530779	CompoundStatement		12:58:364:364	3530676	1					
ANR	3530780	ExpressionStatement	i --	2053:3:51158:51161	3530676	0	True				
ANR	3530781	PostIncDecOperationExpression	i --		3530676	0					
ANR	3530782	Identifier	i		3530676	0					
ANR	3530783	IncDec	--		3530676	1					
ANR	3530784	BreakStatement	break ;	2054:3:51223:51228	3530676	1	True				
ANR	3530785	ForStatement	for ( j = 1 ; j < condor_main_argc ; j ++ )		3530676	6					
ANR	3530786	ForInit	j = 1 ;	2060:5:51333:51336	3530676	0	True				
ANR	3530787	AssignmentExpression	j = 1		3530676	0		=			
ANR	3530788	Identifier	j		3530676	0					
ANR	3530789	PrimaryExpression	1		3530676	1					
ANR	3530790	Condition	j < condor_main_argc	2060:9:51337:51354	3530676	1	True				
ANR	3530791	RelationalExpression	j < condor_main_argc		3530676	0		<			
ANR	3530792	Identifier	j		3530676	0					
ANR	3530793	Identifier	condor_main_argc		3530676	1					
ANR	3530794	PostIncDecOperationExpression	j ++	2060:28:51356:51358	3530676	2	True				
ANR	3530795	Identifier	j		3530676	0					
ANR	3530796	IncDec	++		3530676	1					
ANR	3530797	CompoundStatement		21:2:576:616	3530676	3					
ANR	3530798	IdentifierDeclStatement	size_t len = strlen ( condor_main_argv [ j ] ) ;	2061:2:51365:51405	3530676	0	True				
ANR	3530799	IdentifierDecl	len = strlen ( condor_main_argv [ j ] )		3530676	0					
ANR	3530800	IdentifierDeclType	size_t		3530676	0					
ANR	3530801	Identifier	len		3530676	1					
ANR	3530802	AssignmentExpression	len = strlen ( condor_main_argv [ j ] )		3530676	2		=			
ANR	3530803	Identifier	len		3530676	0					
ANR	3530804	CallExpression	strlen ( condor_main_argv [ j ] )		3530676	1					
ANR	3530805	Callee	strlen		3530676	0					
ANR	3530806	Identifier	strlen		3530676	0					
ANR	3530807	ArgumentList	condor_main_argv [ j ]		3530676	1					
ANR	3530808	Argument	condor_main_argv [ j ]		3530676	0					
ANR	3530809	ArrayIndexing	condor_main_argv [ j ]		3530676	0					
ANR	3530810	Identifier	condor_main_argv		3530676	0					
ANR	3530811	Identifier	j		3530676	1					
ANR	3530812	IfStatement	"if ( strncmp ( condor_main_argv [ j ] , ""-background"" , len ) != 0 )"		3530676	1					
ANR	3530813	Condition	"strncmp ( condor_main_argv [ j ] , ""-background"" , len ) != 0"	2062:6:51413:51461	3530676	0	True				
ANR	3530814	EqualityExpression	"strncmp ( condor_main_argv [ j ] , ""-background"" , len ) != 0"		3530676	0		!=			
ANR	3530815	CallExpression	"strncmp ( condor_main_argv [ j ] , ""-background"" , len )"		3530676	0					
ANR	3530816	Callee	strncmp		3530676	0					
ANR	3530817	Identifier	strncmp		3530676	0					
ANR	3530818	ArgumentList	condor_main_argv [ j ]		3530676	1					
ANR	3530819	Argument	condor_main_argv [ j ]		3530676	0					
ANR	3530820	ArrayIndexing	condor_main_argv [ j ]		3530676	0					
ANR	3530821	Identifier	condor_main_argv		3530676	0					
ANR	3530822	Identifier	j		3530676	1					
ANR	3530823	Argument	"""-background"""		3530676	1					
ANR	3530824	PrimaryExpression	"""-background"""		3530676	0					
ANR	3530825	Argument	len		3530676	2					
ANR	3530826	Identifier	len		3530676	0					
ANR	3530827	PrimaryExpression	0		3530676	1					
ANR	3530828	CompoundStatement		22:58:676:676	3530676	1					
ANR	3530829	ExpressionStatement	argv [ i ++ ] = condor_main_argv [ j ]	2063:3:51470:51501	3530676	0	True				
ANR	3530830	AssignmentExpression	argv [ i ++ ] = condor_main_argv [ j ]		3530676	0		=			
ANR	3530831	ArrayIndexing	argv [ i ++ ]		3530676	0					
ANR	3530832	Identifier	argv		3530676	0					
ANR	3530833	PostIncDecOperationExpression	i ++		3530676	1					
ANR	3530834	Identifier	i		3530676	0					
ANR	3530835	IncDec	++		3530676	1					
ANR	3530836	ArrayIndexing	condor_main_argv [ j ]		3530676	1					
ANR	3530837	Identifier	condor_main_argv		3530676	0					
ANR	3530838	Identifier	j		3530676	1					
ANR	3530839	IfStatement	"if ( daemon_stop_time && strncmp ( condor_main_argv [ j ] , ""-runfor"" , len ) == 0 && j + 1 < condor_main_argc )"		3530676	2					
ANR	3530840	Condition	"daemon_stop_time && strncmp ( condor_main_argv [ j ] , ""-runfor"" , len ) == 0 && j + 1 < condor_main_argc"	2066:6:51514:51602	3530676	0	True				
ANR	3530841	AndExpression	"daemon_stop_time && strncmp ( condor_main_argv [ j ] , ""-runfor"" , len ) == 0 && j + 1 < condor_main_argc"		3530676	0		&&			
ANR	3530842	Identifier	daemon_stop_time		3530676	0					
ANR	3530843	AndExpression	"strncmp ( condor_main_argv [ j ] , ""-runfor"" , len ) == 0 && j + 1 < condor_main_argc"		3530676	1		&&			
ANR	3530844	EqualityExpression	"strncmp ( condor_main_argv [ j ] , ""-runfor"" , len ) == 0"		3530676	0		==			
ANR	3530845	CallExpression	"strncmp ( condor_main_argv [ j ] , ""-runfor"" , len )"		3530676	0					
ANR	3530846	Callee	strncmp		3530676	0					
ANR	3530847	Identifier	strncmp		3530676	0					
ANR	3530848	ArgumentList	condor_main_argv [ j ]		3530676	1					
ANR	3530849	Argument	condor_main_argv [ j ]		3530676	0					
ANR	3530850	ArrayIndexing	condor_main_argv [ j ]		3530676	0					
ANR	3530851	Identifier	condor_main_argv		3530676	0					
ANR	3530852	Identifier	j		3530676	1					
ANR	3530853	Argument	"""-runfor"""		3530676	1					
ANR	3530854	PrimaryExpression	"""-runfor"""		3530676	0					
ANR	3530855	Argument	len		3530676	2					
ANR	3530856	Identifier	len		3530676	0					
ANR	3530857	PrimaryExpression	0		3530676	1					
ANR	3530858	RelationalExpression	j + 1 < condor_main_argc		3530676	1		<			
ANR	3530859	AdditiveExpression	j + 1		3530676	0		+			
ANR	3530860	Identifier	j		3530676	0					
ANR	3530861	PrimaryExpression	1		3530676	1					
ANR	3530862	Identifier	condor_main_argc		3530676	1					
ANR	3530863	CompoundStatement		34:3:976:995	3530676	1					
ANR	3530864	ExpressionStatement	j ++	2068:3:51649:51652	3530676	0	True				
ANR	3530865	PostIncDecOperationExpression	j ++		3530676	0					
ANR	3530866	Identifier	j		3530676	0					
ANR	3530867	IncDec	++		3530676	1					
ANR	3530868	IdentifierDeclStatement	int runfor = ( daemon_stop_time - time ( NULL ) ) / 60 ;	2070:3:51658:51703	3530676	1	True				
ANR	3530869	IdentifierDecl	runfor = ( daemon_stop_time - time ( NULL ) ) / 60		3530676	0					
ANR	3530870	IdentifierDeclType	int		3530676	0					
ANR	3530871	Identifier	runfor		3530676	1					
ANR	3530872	AssignmentExpression	runfor = ( daemon_stop_time - time ( NULL ) ) / 60		3530676	2		=			
ANR	3530873	Identifier	runfor		3530676	0					
ANR	3530874	MultiplicativeExpression	( daemon_stop_time - time ( NULL ) ) / 60		3530676	1		/			
ANR	3530875	AdditiveExpression	daemon_stop_time - time ( NULL )		3530676	0		-			
ANR	3530876	Identifier	daemon_stop_time		3530676	0					
ANR	3530877	CallExpression	time ( NULL )		3530676	1					
ANR	3530878	Callee	time		3530676	0					
ANR	3530879	Identifier	time		3530676	0					
ANR	3530880	ArgumentList	NULL		3530676	1					
ANR	3530881	Argument	NULL		3530676	0					
ANR	3530882	Identifier	NULL		3530676	0					
ANR	3530883	PrimaryExpression	60		3530676	1					
ANR	3530884	IfStatement	if ( runfor <= 0 )		3530676	2					
ANR	3530885	Condition	runfor <= 0	2071:7:51712:51722	3530676	0	True				
ANR	3530886	RelationalExpression	runfor <= 0		3530676	0		<=			
ANR	3530887	Identifier	runfor		3530676	0					
ANR	3530888	PrimaryExpression	0		3530676	1					
ANR	3530889	CompoundStatement		31:21:937:937	3530676	1					
ANR	3530890	ExpressionStatement	runfor = 1	2072:4:51732:51742	3530676	0	True				
ANR	3530891	AssignmentExpression	runfor = 1		3530676	0		=			
ANR	3530892	Identifier	runfor		3530676	0					
ANR	3530893	PrimaryExpression	1		3530676	1					
ANR	3530894	IdentifierDeclStatement	MyString runfor_str ;	2074:3:51765:51784	3530676	3	True				
ANR	3530895	IdentifierDecl	runfor_str		3530676	0					
ANR	3530896	IdentifierDeclType	MyString		3530676	0					
ANR	3530897	Identifier	runfor_str		3530676	1					
ANR	3530898	ExpressionStatement	"runfor_str . sprintf ( ""%d"" , runfor )"	2075:3:51789:51820	3530676	4	True				
ANR	3530899	CallExpression	"runfor_str . sprintf ( ""%d"" , runfor )"		3530676	0					
ANR	3530900	Callee	runfor_str . sprintf		3530676	0					
ANR	3530901	MemberAccess	runfor_str . sprintf		3530676	0					
ANR	3530902	Identifier	runfor_str		3530676	0					
ANR	3530903	Identifier	sprintf		3530676	1					
ANR	3530904	ArgumentList	"""%d"""		3530676	1					
ANR	3530905	Argument	"""%d"""		3530676	0					
ANR	3530906	PrimaryExpression	"""%d"""		3530676	0					
ANR	3530907	Argument	runfor		3530676	1					
ANR	3530908	Identifier	runfor		3530676	0					
ANR	3530909	ExpressionStatement	argv [ i ++ ] = strdup ( runfor_str . Value ( ) )	2076:3:51825:51863	3530676	5	True				
ANR	3530910	AssignmentExpression	argv [ i ++ ] = strdup ( runfor_str . Value ( ) )		3530676	0		=			
ANR	3530911	ArrayIndexing	argv [ i ++ ]		3530676	0					
ANR	3530912	Identifier	argv		3530676	0					
ANR	3530913	PostIncDecOperationExpression	i ++		3530676	1					
ANR	3530914	Identifier	i		3530676	0					
ANR	3530915	IncDec	++		3530676	1					
ANR	3530916	CallExpression	strdup ( runfor_str . Value ( ) )		3530676	1					
ANR	3530917	Callee	strdup		3530676	0					
ANR	3530918	Identifier	strdup		3530676	0					
ANR	3530919	ArgumentList	runfor_str . Value ( )		3530676	1					
ANR	3530920	Argument	runfor_str . Value ( )		3530676	0					
ANR	3530921	CallExpression	runfor_str . Value ( )		3530676	0					
ANR	3530922	Callee	runfor_str . Value		3530676	0					
ANR	3530923	MemberAccess	runfor_str . Value		3530676	0					
ANR	3530924	Identifier	runfor_str		3530676	0					
ANR	3530925	Identifier	Value		3530676	1					
ANR	3530926	ArgumentList			3530676	1					
ANR	3530927	ExpressionStatement	argv [ i ++ ] = NULL	2079:1:51873:51889	3530676	7	True				
ANR	3530928	AssignmentExpression	argv [ i ++ ] = NULL		3530676	0		=			
ANR	3530929	ArrayIndexing	argv [ i ++ ]		3530676	0					
ANR	3530930	Identifier	argv		3530676	0					
ANR	3530931	PostIncDecOperationExpression	i ++		3530676	1					
ANR	3530932	Identifier	i		3530676	0					
ANR	3530933	IncDec	++		3530676	1					
ANR	3530934	Identifier	NULL		3530676	1					
ANR	3530935	ExpressionStatement	"( void ) execv ( master -> process_name , argv )"	2081:1:51893:51932	3530676	8	True				
ANR	3530936	CastExpression	"( void ) execv ( master -> process_name , argv )"		3530676	0					
ANR	3530937	CastTarget	void		3530676	0					
ANR	3530938	CallExpression	"execv ( master -> process_name , argv )"		3530676	1					
ANR	3530939	Callee	execv		3530676	0					
ANR	3530940	Identifier	execv		3530676	0					
ANR	3530941	ArgumentList	master -> process_name		3530676	1					
ANR	3530942	Argument	master -> process_name		3530676	0					
ANR	3530943	PtrMemberAccess	master -> process_name		3530676	0					
ANR	3530944	Identifier	master		3530676	0					
ANR	3530945	Identifier	process_name		3530676	1					
ANR	3530946	Argument	argv		3530676	1					
ANR	3530947	Identifier	argv		3530676	0					
ANR	3530948	ExpressionStatement	free ( argv )	2083:1:51936:51946	3530676	9	True				
ANR	3530949	CallExpression	free ( argv )		3530676	0					
ANR	3530950	Callee	free		3530676	0					
ANR	3530951	Identifier	free		3530676	0					
ANR	3530952	ArgumentList	argv		3530676	1					
ANR	3530953	Argument	argv		3530676	0					
ANR	3530954	Identifier	argv		3530676	0					
ANR	3530955	ReturnType	void		3530676	1					
ANR	3530956	Identifier	Daemons :: ExecMaster		3530676	2					
ANR	3530957	ParameterList			3530676	3					
ANR	3530958	CFGEntryNode	ENTRY		3530676		True				
ANR	3530959	CFGExitNode	EXIT		3530676		True				
ANR	3530960	Symbol	malloc		3530676						
ANR	3530961	Symbol	NULL		3530676						
ANR	3530962	Symbol	runfor_str		3530676						
ANR	3530963	Symbol	runfor_str . Value		3530676						
ANR	3530964	Symbol	i		3530676						
ANR	3530965	Symbol	j		3530676						
ANR	3530966	Symbol	* argv		3530676						
ANR	3530967	Symbol	condor_main_argv		3530676						
ANR	3530968	Symbol	argv		3530676						
ANR	3530969	Symbol	master		3530676						
ANR	3530970	Symbol	* condor_main_argv		3530676						
ANR	3530971	Symbol	strlen		3530676						
ANR	3530972	Symbol	strncmp		3530676						
ANR	3530973	Symbol	daemon_stop_time		3530676						
ANR	3530974	Symbol	runfor		3530676						
ANR	3530975	Symbol	* j		3530676						
ANR	3530976	Symbol	len		3530676						
ANR	3530977	Symbol	time		3530676						
ANR	3530978	Symbol	strdup		3530676						
ANR	3530979	Symbol	* master		3530676						
ANR	3530980	Symbol	condor_main_argc		3530676						
ANR	3530981	Symbol	master -> process_name		3530676						
ANR	3530982	Function	Daemons :: FinalRestartMaster	2087:0:52009:53889							
ANR	3530983	FunctionDef	Daemons :: FinalRestartMaster ()		3530982	0					
ANR	3530984	CompoundStatement		2089:0:52044:53889	3530982	0					
ANR	3530985	IdentifierDeclStatement	int i ;	2090:1:52047:52052	3530982	0	True				
ANR	3530986	IdentifierDecl	i		3530982	0					
ANR	3530987	IdentifierDeclType	int		3530982	0					
ANR	3530988	Identifier	i		3530982	1					
ANR	3530989	ExpressionStatement	CleanupBeforeRestart ( )	2092:1:52056:52078	3530982	1	True				
ANR	3530990	CallExpression	CleanupBeforeRestart ( )		3530982	0					
ANR	3530991	Callee	CleanupBeforeRestart		3530982	0					
ANR	3530992	Identifier	CleanupBeforeRestart		3530982	0					
ANR	3530993	ArgumentList			3530982	1					
ANR	3530994	ExpressionStatement	"dprintf ( D_ALWAYS , ""Running as NT Service = %d\\n"" , NT_ServiceFlag )"	2095:1:52095:52159	3530982	2	True				
ANR	3530995	CallExpression	"dprintf ( D_ALWAYS , ""Running as NT Service = %d\\n"" , NT_ServiceFlag )"		3530982	0					
ANR	3530996	Callee	dprintf		3530982	0					
ANR	3530997	Identifier	dprintf		3530982	0					
ANR	3530998	ArgumentList	D_ALWAYS		3530982	1					
ANR	3530999	Argument	D_ALWAYS		3530982	0					
ANR	3531000	Identifier	D_ALWAYS		3530982	0					
ANR	3531001	Argument	"""Running as NT Service = %d\\n"""		3530982	1					
ANR	3531002	PrimaryExpression	"""Running as NT Service = %d\\n"""		3530982	0					
ANR	3531003	Argument	NT_ServiceFlag		3530982	2					
ANR	3531004	Identifier	NT_ServiceFlag		3530982	0					
ANR	3531005	WhileStatement	while ( 1 )		3530982	3					
ANR	3531006	Condition	1	2100:7:52318:52318	3530982	0	True				
ANR	3531007	PrimaryExpression	1		3530982	0					
ANR	3531008	CompoundStatement		12:10:276:276	3530982	1					
ANR	3531009	IfStatement	if ( NT_ServiceFlag == TRUE )		3530982	0					
ANR	3531010	Condition	NT_ServiceFlag == TRUE	2107:7:52695:52716	3530982	0	True				
ANR	3531011	EqualityExpression	NT_ServiceFlag == TRUE		3530982	0		==			
ANR	3531012	Identifier	NT_ServiceFlag		3530982	0					
ANR	3531013	Identifier	TRUE		3530982	1					
ANR	3531014	CompoundStatement		26:3:872:888	3530982	1					
ANR	3531015	IdentifierDeclStatement	char systemshell [ MAX_PATH ] ;	2109:3:52738:52764	3530982	0	True				
ANR	3531016	IdentifierDecl	systemshell [ MAX_PATH ]		3530982	0					
ANR	3531017	IdentifierDeclType	char [ MAX_PATH ]		3530982	0					
ANR	3531018	Identifier	systemshell		3530982	1					
ANR	3531019	Identifier	MAX_PATH		3530982	2					
ANR	3531020	IdentifierDeclStatement	extern char * _condor_myServiceName ;	2110:3:52769:52803	3530982	1	True				
ANR	3531021	IdentifierDecl	* _condor_myServiceName		3530982	0					
ANR	3531022	IdentifierDeclType	extern char *		3530982	0					
ANR	3531023	Identifier	_condor_myServiceName		3530982	1					
ANR	3531024	Statement	::	2112:3:52834:52835	3530982	2	True				
ANR	3531025	ExpressionStatement	"GetSystemDirectory ( systemshell , MAX_PATH )"	2112:5:52836:52876	3530982	3	True				
ANR	3531026	CallExpression	"GetSystemDirectory ( systemshell , MAX_PATH )"		3530982	0					
ANR	3531027	Callee	GetSystemDirectory		3530982	0					
ANR	3531028	Identifier	GetSystemDirectory		3530982	0					
ANR	3531029	ArgumentList	systemshell		3530982	1					
ANR	3531030	Argument	systemshell		3530982	0					
ANR	3531031	Identifier	systemshell		3530982	0					
ANR	3531032	Argument	MAX_PATH		3530982	1					
ANR	3531033	Identifier	MAX_PATH		3530982	0					
ANR	3531034	ExpressionStatement	"strcat ( systemshell , ""\\\\cmd.exe"" )"	2113:3:52881:52912	3530982	4	True				
ANR	3531035	CallExpression	"strcat ( systemshell , ""\\\\cmd.exe"" )"		3530982	0					
ANR	3531036	Callee	strcat		3530982	0					
ANR	3531037	Identifier	strcat		3530982	0					
ANR	3531038	ArgumentList	systemshell		3530982	1					
ANR	3531039	Argument	systemshell		3530982	0					
ANR	3531040	Identifier	systemshell		3530982	0					
ANR	3531041	Argument	"""\\\\cmd.exe"""		3530982	1					
ANR	3531042	PrimaryExpression	"""\\\\cmd.exe"""		3530982	0					
ANR	3531043	IdentifierDeclStatement	MyString command ;	2114:3:52917:52933	3530982	5	True				
ANR	3531044	IdentifierDecl	command		3530982	0					
ANR	3531045	IdentifierDeclType	MyString		3530982	0					
ANR	3531046	Identifier	command		3530982	1					
ANR	3531047	ExpressionStatement	"command . sprintf ( ""net stop %s & net start %s"" , _condor_myServiceName , _condor_myServiceName )"	2115:3:52938:53034	3530982	6	True				
ANR	3531048	CallExpression	"command . sprintf ( ""net stop %s & net start %s"" , _condor_myServiceName , _condor_myServiceName )"		3530982	0					
ANR	3531049	Callee	command . sprintf		3530982	0					
ANR	3531050	MemberAccess	command . sprintf		3530982	0					
ANR	3531051	Identifier	command		3530982	0					
ANR	3531052	Identifier	sprintf		3530982	1					
ANR	3531053	ArgumentList	"""net stop %s & net start %s"""		3530982	1					
ANR	3531054	Argument	"""net stop %s & net start %s"""		3530982	0					
ANR	3531055	PrimaryExpression	"""net stop %s & net start %s"""		3530982	0					
ANR	3531056	Argument	_condor_myServiceName		3530982	1					
ANR	3531057	Identifier	_condor_myServiceName		3530982	0					
ANR	3531058	Argument	_condor_myServiceName		3530982	2					
ANR	3531059	Identifier	_condor_myServiceName		3530982	0					
ANR	3531060	ExpressionStatement	"dprintf ( D_ALWAYS , ""Doing exec( \\""%s /Q /C %s\\"" )\\n"" , systemshell , command . Value ( ) )"	2117:3:53039:53127	3530982	7	True				
ANR	3531061	CallExpression	"dprintf ( D_ALWAYS , ""Doing exec( \\""%s /Q /C %s\\"" )\\n"" , systemshell , command . Value ( ) )"		3530982	0					
ANR	3531062	Callee	dprintf		3530982	0					
ANR	3531063	Identifier	dprintf		3530982	0					
ANR	3531064	ArgumentList	D_ALWAYS		3530982	1					
ANR	3531065	Argument	D_ALWAYS		3530982	0					
ANR	3531066	Identifier	D_ALWAYS		3530982	0					
ANR	3531067	Argument	"""Doing exec( \\""%s /Q /C %s\\"" )\\n"""		3530982	1					
ANR	3531068	PrimaryExpression	"""Doing exec( \\""%s /Q /C %s\\"" )\\n"""		3530982	0					
ANR	3531069	Argument	systemshell		3530982	2					
ANR	3531070	Identifier	systemshell		3530982	0					
ANR	3531071	Argument	command . Value ( )		3530982	3					
ANR	3531072	CallExpression	command . Value ( )		3530982	0					
ANR	3531073	Callee	command . Value		3530982	0					
ANR	3531074	MemberAccess	command . Value		3530982	0					
ANR	3531075	Identifier	command		3530982	0					
ANR	3531076	Identifier	Value		3530982	1					
ANR	3531077	ArgumentList			3530982	1					
ANR	3531078	ExpressionStatement	"( void ) execl ( systemshell , ""/Q"" , ""/C"" , command . Value ( ) , 0 )"	2119:3:53132:53192	3530982	8	True				
ANR	3531079	CastExpression	"( void ) execl ( systemshell , ""/Q"" , ""/C"" , command . Value ( ) , 0 )"		3530982	0					
ANR	3531080	CastTarget	void		3530982	0					
ANR	3531081	CallExpression	"execl ( systemshell , ""/Q"" , ""/C"" , command . Value ( ) , 0 )"		3530982	1					
ANR	3531082	Callee	execl		3530982	0					
ANR	3531083	Identifier	execl		3530982	0					
ANR	3531084	ArgumentList	systemshell		3530982	1					
ANR	3531085	Argument	systemshell		3530982	0					
ANR	3531086	Identifier	systemshell		3530982	0					
ANR	3531087	Argument	"""/Q"""		3530982	1					
ANR	3531088	PrimaryExpression	"""/Q"""		3530982	0					
ANR	3531089	Argument	"""/C"""		3530982	2					
ANR	3531090	PrimaryExpression	"""/C"""		3530982	0					
ANR	3531091	Argument	command . Value ( )		3530982	3					
ANR	3531092	CallExpression	command . Value ( )		3530982	0					
ANR	3531093	Callee	command . Value		3530982	0					
ANR	3531094	MemberAccess	command . Value		3530982	0					
ANR	3531095	Identifier	command		3530982	0					
ANR	3531096	Identifier	Value		3530982	1					
ANR	3531097	ArgumentList			3530982	1					
ANR	3531098	Argument	0		3530982	4					
ANR	3531099	PrimaryExpression	0		3530982	0					
ANR	3531100	ElseStatement	else		3530982	0					
ANR	3531101	CompoundStatement		41:3:1416:1459	3530982	0					
ANR	3531102	ExpressionStatement	"dprintf ( D_ALWAYS , ""Doing exec( \\""%s\\"" )\\n"" , master -> process_name )"	2123:3:53215:53287	3530982	0	True				
ANR	3531103	CallExpression	"dprintf ( D_ALWAYS , ""Doing exec( \\""%s\\"" )\\n"" , master -> process_name )"		3530982	0					
ANR	3531104	Callee	dprintf		3530982	0					
ANR	3531105	Identifier	dprintf		3530982	0					
ANR	3531106	ArgumentList	D_ALWAYS		3530982	1					
ANR	3531107	Argument	D_ALWAYS		3530982	0					
ANR	3531108	Identifier	D_ALWAYS		3530982	0					
ANR	3531109	Argument	"""Doing exec( \\""%s\\"" )\\n"""		3530982	1					
ANR	3531110	PrimaryExpression	"""Doing exec( \\""%s\\"" )\\n"""		3530982	0					
ANR	3531111	Argument	master -> process_name		3530982	2					
ANR	3531112	PtrMemberAccess	master -> process_name		3530982	0					
ANR	3531113	Identifier	master		3530982	0					
ANR	3531114	Identifier	process_name		3530982	1					
ANR	3531115	IdentifierDeclStatement	priv_state saved_priv = set_priv ( PRIV_ROOT ) ;	2129:3:53461:53504	3530982	1	True				
ANR	3531116	IdentifierDecl	saved_priv = set_priv ( PRIV_ROOT )		3530982	0					
ANR	3531117	IdentifierDeclType	priv_state		3530982	0					
ANR	3531118	Identifier	saved_priv		3530982	1					
ANR	3531119	AssignmentExpression	saved_priv = set_priv ( PRIV_ROOT )		3530982	2		=			
ANR	3531120	Identifier	saved_priv		3530982	0					
ANR	3531121	CallExpression	set_priv ( PRIV_ROOT )		3530982	1					
ANR	3531122	Callee	set_priv		3530982	0					
ANR	3531123	Identifier	set_priv		3530982	0					
ANR	3531124	ArgumentList	PRIV_ROOT		3530982	1					
ANR	3531125	Argument	PRIV_ROOT		3530982	0					
ANR	3531126	Identifier	PRIV_ROOT		3530982	0					
ANR	3531127	ExpressionStatement	ExecMaster ( )	2131:3:53510:53522	3530982	2	True				
ANR	3531128	CallExpression	ExecMaster ( )		3530982	0					
ANR	3531129	Callee	ExecMaster		3530982	0					
ANR	3531130	Identifier	ExecMaster		3530982	0					
ANR	3531131	ArgumentList			3530982	1					
ANR	3531132	ExpressionStatement	set_priv ( saved_priv )	2133:3:53528:53548	3530982	3	True				
ANR	3531133	CallExpression	set_priv ( saved_priv )		3530982	0					
ANR	3531134	Callee	set_priv		3530982	0					
ANR	3531135	Identifier	set_priv		3530982	0					
ANR	3531136	ArgumentList	saved_priv		3530982	1					
ANR	3531137	Argument	saved_priv		3530982	0					
ANR	3531138	Identifier	saved_priv		3530982	0					
ANR	3531139	ExpressionStatement	master -> restarts ++	2135:2:53556:53574	3530982	1	True				
ANR	3531140	PostIncDecOperationExpression	master -> restarts ++		3530982	0					
ANR	3531141	PtrMemberAccess	master -> restarts		3530982	0					
ANR	3531142	Identifier	master		3530982	0					
ANR	3531143	Identifier	restarts		3530982	1					
ANR	3531144	IncDec	++		3530982	1					
ANR	3531145	IfStatement	if ( NT_ServiceFlag == TRUE && master -> restarts > 7 )		3530982	2					
ANR	3531146	Condition	NT_ServiceFlag == TRUE && master -> restarts > 7	2136:7:53583:53628	3530982	0	True				
ANR	3531147	AndExpression	NT_ServiceFlag == TRUE && master -> restarts > 7		3530982	0		&&			
ANR	3531148	EqualityExpression	NT_ServiceFlag == TRUE		3530982	0		==			
ANR	3531149	Identifier	NT_ServiceFlag		3530982	0					
ANR	3531150	Identifier	TRUE		3530982	1					
ANR	3531151	RelationalExpression	master -> restarts > 7		3530982	1		>			
ANR	3531152	PtrMemberAccess	master -> restarts		3530982	0					
ANR	3531153	Identifier	master		3530982	0					
ANR	3531154	Identifier	restarts		3530982	1					
ANR	3531155	PrimaryExpression	7		3530982	1					
ANR	3531156	CompoundStatement		48:56:1587:1587	3530982	1					
ANR	3531157	ExpressionStatement	"dprintf ( D_ALWAYS , ""Unable to restart Condor service, aborting.\\n"" )"	2137:3:53637:53702	3530982	0	True				
ANR	3531158	CallExpression	"dprintf ( D_ALWAYS , ""Unable to restart Condor service, aborting.\\n"" )"		3530982	0					
ANR	3531159	Callee	dprintf		3530982	0					
ANR	3531160	Identifier	dprintf		3530982	0					
ANR	3531161	ArgumentList	D_ALWAYS		3530982	1					
ANR	3531162	Argument	D_ALWAYS		3530982	0					
ANR	3531163	Identifier	D_ALWAYS		3530982	0					
ANR	3531164	Argument	"""Unable to restart Condor service, aborting.\\n"""		3530982	1					
ANR	3531165	PrimaryExpression	"""Unable to restart Condor service, aborting.\\n"""		3530982	0					
ANR	3531166	ExpressionStatement	master_exit ( 1 )	2138:3:53707:53721	3530982	1	True				
ANR	3531167	CallExpression	master_exit ( 1 )		3530982	0					
ANR	3531168	Callee	master_exit		3530982	0					
ANR	3531169	Identifier	master_exit		3530982	0					
ANR	3531170	ArgumentList	1		3530982	1					
ANR	3531171	Argument	1		3530982	0					
ANR	3531172	PrimaryExpression	1		3530982	0					
ANR	3531173	ExpressionStatement	i = master -> NextStart ( )	2140:2:53729:53752	3530982	3	True				
ANR	3531174	AssignmentExpression	i = master -> NextStart ( )		3530982	0		=			
ANR	3531175	Identifier	i		3530982	0					
ANR	3531176	CallExpression	master -> NextStart ( )		3530982	1					
ANR	3531177	Callee	master -> NextStart		3530982	0					
ANR	3531178	PtrMemberAccess	master -> NextStart		3530982	0					
ANR	3531179	Identifier	master		3530982	0					
ANR	3531180	Identifier	NextStart		3530982	1					
ANR	3531181	ArgumentList			3530982	1					
ANR	3531182	ExpressionStatement	"dprintf ( D_ALWAYS , ""Cannot execute condor_master (errno=%d), will try again in %d seconds\\n"" , errno , i )"	2141:2:53756:53872	3530982	4	True				
ANR	3531183	CallExpression	"dprintf ( D_ALWAYS , ""Cannot execute condor_master (errno=%d), will try again in %d seconds\\n"" , errno , i )"		3530982	0					
ANR	3531184	Callee	dprintf		3530982	0					
ANR	3531185	Identifier	dprintf		3530982	0					
ANR	3531186	ArgumentList	D_ALWAYS		3530982	1					
ANR	3531187	Argument	D_ALWAYS		3530982	0					
ANR	3531188	Identifier	D_ALWAYS		3530982	0					
ANR	3531189	Argument	"""Cannot execute condor_master (errno=%d), will try again in %d seconds\\n"""		3530982	1					
ANR	3531190	PrimaryExpression	"""Cannot execute condor_master (errno=%d), will try again in %d seconds\\n"""		3530982	0					
ANR	3531191	Argument	errno		3530982	2					
ANR	3531192	Identifier	errno		3530982	0					
ANR	3531193	Argument	i		3530982	3					
ANR	3531194	Identifier	i		3530982	0					
ANR	3531195	ExpressionStatement	sleep ( i )	2144:2:53876:53884	3530982	5	True				
ANR	3531196	CallExpression	sleep ( i )		3530982	0					
ANR	3531197	Callee	sleep		3530982	0					
ANR	3531198	Identifier	sleep		3530982	0					
ANR	3531199	ArgumentList	i		3530982	1					
ANR	3531200	Argument	i		3530982	0					
ANR	3531201	Identifier	i		3530982	0					
ANR	3531202	ReturnType	void		3530982	1					
ANR	3531203	Identifier	Daemons :: FinalRestartMaster		3530982	2					
ANR	3531204	ParameterList			3530982	3					
ANR	3531205	CFGEntryNode	ENTRY		3530982		True				
ANR	3531206	CFGExitNode	EXIT		3530982		True				
ANR	3531207	Symbol	errno		3530982						
ANR	3531208	Symbol	_condor_myServiceName		3530982						
ANR	3531209	Symbol	command . Value		3530982						
ANR	3531210	Symbol	D_ALWAYS		3530982						
ANR	3531211	Symbol	i		3530982						
ANR	3531212	Symbol	TRUE		3530982						
ANR	3531213	Symbol	command		3530982						
ANR	3531214	Symbol	master -> NextStart		3530982						
ANR	3531215	Symbol	master		3530982						
ANR	3531216	Symbol	systemshell		3530982						
ANR	3531217	Symbol	set_priv		3530982						
ANR	3531218	Symbol	NT_ServiceFlag		3530982						
ANR	3531219	Symbol	saved_priv		3530982						
ANR	3531220	Symbol	PRIV_ROOT		3530982						
ANR	3531221	Symbol	MAX_PATH		3530982						
ANR	3531222	Symbol	master -> restarts		3530982						
ANR	3531223	Symbol	* master		3530982						
ANR	3531224	Symbol	master -> process_name		3530982						
ANR	3531225	Function	Daemons :: DaemonLog	2149:0:53893:54255							
ANR	3531226	FunctionDef	Daemons :: DaemonLog (int pid)		3531225	0					
ANR	3531227	CompoundStatement		2150:0:53929:54255	3531225	0					
ANR	3531228	IdentifierDeclStatement	"std :: map < std :: string , class daemon * > :: iterator iter ;"	2151:1:53932:53983	3531225	0	True				
ANR	3531229	IdentifierDecl	iter		3531225	0					
ANR	3531230	IdentifierDeclType	"std :: map < std :: string , class daemon * > :: iterator"		3531225	0					
ANR	3531231	Identifier	iter		3531225	1					
ANR	3531232	ForStatement	for ( iter = daemon_ptr . begin ( ) ; iter != daemon_ptr . end ( ) ; iter ++ )		3531225	1					
ANR	3531233	ForInit	iter = daemon_ptr . begin ( ) ;	2155:6:54088:54113	3531225	0	True				
ANR	3531234	AssignmentExpression	iter = daemon_ptr . begin ( )		3531225	0		=			
ANR	3531235	Identifier	iter		3531225	0					
ANR	3531236	CallExpression	daemon_ptr . begin ( )		3531225	1					
ANR	3531237	Callee	daemon_ptr . begin		3531225	0					
ANR	3531238	MemberAccess	daemon_ptr . begin		3531225	0					
ANR	3531239	Identifier	daemon_ptr		3531225	0					
ANR	3531240	Identifier	begin		3531225	1					
ANR	3531241	ArgumentList			3531225	1					
ANR	3531242	Condition	iter != daemon_ptr . end ( )	2155:33:54115:54138	3531225	1	True				
ANR	3531243	EqualityExpression	iter != daemon_ptr . end ( )		3531225	0		!=			
ANR	3531244	Identifier	iter		3531225	0					
ANR	3531245	CallExpression	daemon_ptr . end ( )		3531225	1					
ANR	3531246	Callee	daemon_ptr . end		3531225	0					
ANR	3531247	MemberAccess	daemon_ptr . end		3531225	0					
ANR	3531248	Identifier	daemon_ptr		3531225	0					
ANR	3531249	Identifier	end		3531225	1					
ANR	3531250	ArgumentList			3531225	1					
ANR	3531251	PostIncDecOperationExpression	iter ++	2155:59:54141:54146	3531225	2	True				
ANR	3531252	Identifier	iter		3531225	0					
ANR	3531253	IncDec	++		3531225	1					
ANR	3531254	CompoundStatement		6:68:220:220	3531225	3					
ANR	3531255	IfStatement	if ( iter -> second -> pid == pid )		3531225	0					
ANR	3531256	Condition	iter -> second -> pid == pid	2156:7:54159:54182	3531225	0	True				
ANR	3531257	EqualityExpression	iter -> second -> pid == pid		3531225	0		==			
ANR	3531258	PtrMemberAccess	iter -> second -> pid		3531225	0					
ANR	3531259	PtrMemberAccess	iter -> second		3531225	0					
ANR	3531260	Identifier	iter		3531225	0					
ANR	3531261	Identifier	second		3531225	1					
ANR	3531262	Identifier	pid		3531225	1					
ANR	3531263	Identifier	pid		3531225	1					
ANR	3531264	ReturnStatement	return ( iter -> second -> log_name ) ;	2157:3:54189:54220	3531225	1	True				
ANR	3531265	PtrMemberAccess	iter -> second -> log_name		3531225	0					
ANR	3531266	PtrMemberAccess	iter -> second		3531225	0					
ANR	3531267	Identifier	iter		3531225	0					
ANR	3531268	Identifier	second		3531225	1					
ANR	3531269	Identifier	log_name		3531225	1					
ANR	3531270	ReturnStatement	"return ""Unknown Program!!!"" ;"	2159:1:54226:54253	3531225	2	True				
ANR	3531271	PrimaryExpression	"""Unknown Program!!!"""		3531225	0					
ANR	3531272	ReturnType	char *		3531225	1					
ANR	3531273	Identifier	Daemons :: DaemonLog		3531225	2					
ANR	3531274	ParameterList	int pid		3531225	3					
ANR	3531275	Parameter	int pid	2149:26:53919:53925	3531225	0	True				
ANR	3531276	ParameterType	int		3531225	0					
ANR	3531277	Identifier	pid		3531225	1					
ANR	3531278	CFGEntryNode	ENTRY		3531225		True				
ANR	3531279	CFGExitNode	EXIT		3531225		True				
ANR	3531280	Symbol	iter -> second -> pid		3531225						
ANR	3531281	Symbol	* iter -> second		3531225						
ANR	3531282	Symbol	* iter		3531225						
ANR	3531283	Symbol	daemon_ptr		3531225						
ANR	3531284	Symbol	daemon_ptr . begin		3531225						
ANR	3531285	Symbol	iter		3531225						
ANR	3531286	Symbol	iter -> second -> log_name		3531225						
ANR	3531287	Symbol	pid		3531225						
ANR	3531288	Symbol	daemon_ptr . end		3531225						
ANR	3531289	Symbol	* * iter		3531225						
ANR	3531290	Symbol	iter -> second		3531225						
ANR	3531291	Function	Daemons :: SignalAll	2164:0:54265:54556							
ANR	3531292	FunctionDef	Daemons :: SignalAll (int signal)		3531291	0					
ANR	3531293	CompoundStatement		2166:0:54303:54556	3531291	0					
ANR	3531294	ForStatement	for ( int i = 0 ; i < no_daemons ; i ++ )		3531291	0					
ANR	3531295	ForInit	int i = 0 ;	2169:7:54422:54429	3531291	0	True				
ANR	3531296	IdentifierDeclStatement	int i = 0 ;		3531291	0					
ANR	3531297	IdentifierDecl	i = 0		3531291	0					
ANR	3531298	IdentifierDeclType	int		3531291	0					
ANR	3531299	Identifier	i		3531291	1					
ANR	3531300	AssignmentExpression	i = 0		3531291	2		=			
ANR	3531301	Identifier	i		3531291	0					
ANR	3531302	PrimaryExpression	0		3531291	1					
ANR	3531303	Condition	i < no_daemons	2169:16:54431:54444	3531291	1	True				
ANR	3531304	RelationalExpression	i < no_daemons		3531291	0		<			
ANR	3531305	Identifier	i		3531291	0					
ANR	3531306	Identifier	no_daemons		3531291	1					
ANR	3531307	PostIncDecOperationExpression	i ++	2169:32:54447:54449	3531291	2	True				
ANR	3531308	Identifier	i		3531291	0					
ANR	3531309	IncDec	++		3531291	1					
ANR	3531310	CompoundStatement		4:37:148:148	3531291	3					
ANR	3531311	IfStatement	if ( daemon_ptr [ i ] -> runs_here && ( daemon_ptr [ i ] -> pid > 0 ) )		3531291	0					
ANR	3531312	Condition	daemon_ptr [ i ] -> runs_here && ( daemon_ptr [ i ] -> pid > 0 )	2170:6:54460:54511	3531291	0	True				
ANR	3531313	AndExpression	daemon_ptr [ i ] -> runs_here && ( daemon_ptr [ i ] -> pid > 0 )		3531291	0		&&			
ANR	3531314	PtrMemberAccess	daemon_ptr [ i ] -> runs_here		3531291	0					
ANR	3531315	ArrayIndexing	daemon_ptr [ i ]		3531291	0					
ANR	3531316	Identifier	daemon_ptr		3531291	0					
ANR	3531317	Identifier	i		3531291	1					
ANR	3531318	Identifier	runs_here		3531291	1					
ANR	3531319	RelationalExpression	daemon_ptr [ i ] -> pid > 0		3531291	1		>			
ANR	3531320	PtrMemberAccess	daemon_ptr [ i ] -> pid		3531291	0					
ANR	3531321	ArrayIndexing	daemon_ptr [ i ]		3531291	0					
ANR	3531322	Identifier	daemon_ptr		3531291	0					
ANR	3531323	Identifier	i		3531291	1					
ANR	3531324	Identifier	pid		3531291	1					
ANR	3531325	PrimaryExpression	0		3531291	1					
ANR	3531326	CompoundStatement		5:61:211:211	3531291	1					
ANR	3531327	ExpressionStatement	daemon_ptr [ i ] -> Kill ( signal )	2171:3:54520:54547	3531291	0	True				
ANR	3531328	CallExpression	daemon_ptr [ i ] -> Kill ( signal )		3531291	0					
ANR	3531329	Callee	daemon_ptr [ i ] -> Kill		3531291	0					
ANR	3531330	PtrMemberAccess	daemon_ptr [ i ] -> Kill		3531291	0					
ANR	3531331	ArrayIndexing	daemon_ptr [ i ]		3531291	0					
ANR	3531332	Identifier	daemon_ptr		3531291	0					
ANR	3531333	Identifier	i		3531291	1					
ANR	3531334	Identifier	Kill		3531291	1					
ANR	3531335	ArgumentList	signal		3531291	1					
ANR	3531336	Argument	signal		3531291	0					
ANR	3531337	Identifier	signal		3531291	0					
ANR	3531338	ReturnType	void		3531291	1					
ANR	3531339	Identifier	Daemons :: SignalAll		3531291	2					
ANR	3531340	ParameterList	int signal		3531291	3					
ANR	3531341	Parameter	int signal	2165:20:54290:54299	3531291	0	True				
ANR	3531342	ParameterType	int		3531291	0					
ANR	3531343	Identifier	signal		3531291	1					
ANR	3531344	CFGEntryNode	ENTRY		3531291		True				
ANR	3531345	CFGExitNode	EXIT		3531291		True				
ANR	3531346	Symbol	daemon_ptr [ i ] -> pid		3531291						
ANR	3531347	Symbol	daemon_ptr		3531291						
ANR	3531348	Symbol	* * i		3531291						
ANR	3531349	Symbol	no_daemons		3531291						
ANR	3531350	Symbol	* i		3531291						
ANR	3531351	Symbol	daemon_ptr [ i ] -> runs_here		3531291						
ANR	3531352	Symbol	* daemon_ptr		3531291						
ANR	3531353	Symbol	i		3531291						
ANR	3531354	Symbol	signal		3531291						
ANR	3531355	Symbol	* * daemon_ptr		3531291						
ANR	3531356	Function	Daemons :: NumberOfChildren	2180:0:54674:55054							
ANR	3531357	FunctionDef	Daemons :: NumberOfChildren ()		3531356	0					
ANR	3531358	CompoundStatement		2181:0:54706:55054	3531356	0					
ANR	3531359	IdentifierDeclStatement	int result = 0 ;	2182:1:54709:54723	3531356	0	True				
ANR	3531360	IdentifierDecl	result = 0		3531356	0					
ANR	3531361	IdentifierDeclType	int		3531356	0					
ANR	3531362	Identifier	result		3531356	1					
ANR	3531363	AssignmentExpression	result = 0		3531356	2		=			
ANR	3531364	Identifier	result		3531356	0					
ANR	3531365	PrimaryExpression	0		3531356	1					
ANR	3531366	IdentifierDeclStatement	"std :: map < std :: string , class daemon * > :: iterator iter ;"	2183:1:54726:54777	3531356	1	True				
ANR	3531367	IdentifierDecl	iter		3531356	0					
ANR	3531368	IdentifierDeclType	"std :: map < std :: string , class daemon * > :: iterator"		3531356	0					
ANR	3531369	Identifier	iter		3531356	1					
ANR	3531370	ForStatement	for ( iter = daemon_ptr . begin ( ) ; iter != daemon_ptr . end ( ) ; iter ++ )		3531356	2					
ANR	3531371	ForInit	iter = daemon_ptr . begin ( ) ;	2185:6:54786:54811	3531356	0	True				
ANR	3531372	AssignmentExpression	iter = daemon_ptr . begin ( )		3531356	0		=			
ANR	3531373	Identifier	iter		3531356	0					
ANR	3531374	CallExpression	daemon_ptr . begin ( )		3531356	1					
ANR	3531375	Callee	daemon_ptr . begin		3531356	0					
ANR	3531376	MemberAccess	daemon_ptr . begin		3531356	0					
ANR	3531377	Identifier	daemon_ptr		3531356	0					
ANR	3531378	Identifier	begin		3531356	1					
ANR	3531379	ArgumentList			3531356	1					
ANR	3531380	Condition	iter != daemon_ptr . end ( )	2185:33:54813:54836	3531356	1	True				
ANR	3531381	EqualityExpression	iter != daemon_ptr . end ( )		3531356	0		!=			
ANR	3531382	Identifier	iter		3531356	0					
ANR	3531383	CallExpression	daemon_ptr . end ( )		3531356	1					
ANR	3531384	Callee	daemon_ptr . end		3531356	0					
ANR	3531385	MemberAccess	daemon_ptr . end		3531356	0					
ANR	3531386	Identifier	daemon_ptr		3531356	0					
ANR	3531387	Identifier	end		3531356	1					
ANR	3531388	ArgumentList			3531356	1					
ANR	3531389	PostIncDecOperationExpression	iter ++	2185:59:54839:54844	3531356	2	True				
ANR	3531390	Identifier	iter		3531356	0					
ANR	3531391	IncDec	++		3531356	1					
ANR	3531392	CompoundStatement		5:68:141:141	3531356	3					
ANR	3531393	IfStatement	if ( iter -> second -> runs_here && iter -> second -> pid && ! iter -> second -> OnlyStopWhenMasterStops ( ) )		3531356	0					
ANR	3531394	Condition	iter -> second -> runs_here && iter -> second -> pid && ! iter -> second -> OnlyStopWhenMasterStops ( )	2186:6:54856:54946	3531356	0	True				
ANR	3531395	AndExpression	iter -> second -> runs_here && iter -> second -> pid && ! iter -> second -> OnlyStopWhenMasterStops ( )		3531356	0		&&			
ANR	3531396	PtrMemberAccess	iter -> second -> runs_here		3531356	0					
ANR	3531397	PtrMemberAccess	iter -> second		3531356	0					
ANR	3531398	Identifier	iter		3531356	0					
ANR	3531399	Identifier	second		3531356	1					
ANR	3531400	Identifier	runs_here		3531356	1					
ANR	3531401	AndExpression	iter -> second -> pid && ! iter -> second -> OnlyStopWhenMasterStops ( )		3531356	1		&&			
ANR	3531402	PtrMemberAccess	iter -> second -> pid		3531356	0					
ANR	3531403	PtrMemberAccess	iter -> second		3531356	0					
ANR	3531404	Identifier	iter		3531356	0					
ANR	3531405	Identifier	second		3531356	1					
ANR	3531406	Identifier	pid		3531356	1					
ANR	3531407	UnaryOperationExpression	! iter -> second -> OnlyStopWhenMasterStops ( )		3531356	1					
ANR	3531408	UnaryOperator	!		3531356	0					
ANR	3531409	CallExpression	iter -> second -> OnlyStopWhenMasterStops ( )		3531356	1					
ANR	3531410	Callee	iter -> second -> OnlyStopWhenMasterStops		3531356	0					
ANR	3531411	PtrMemberAccess	iter -> second -> OnlyStopWhenMasterStops		3531356	0					
ANR	3531412	PtrMemberAccess	iter -> second		3531356	0					
ANR	3531413	Identifier	iter		3531356	0					
ANR	3531414	Identifier	second		3531356	1					
ANR	3531415	Identifier	OnlyStopWhenMasterStops		3531356	1					
ANR	3531416	ArgumentList			3531356	1					
ANR	3531417	CompoundStatement		7:49:243:243	3531356	1					
ANR	3531418	ExpressionStatement	result ++	2188:3:54955:54963	3531356	0	True				
ANR	3531419	PostIncDecOperationExpression	result ++		3531356	0					
ANR	3531420	Identifier	result		3531356	0					
ANR	3531421	IncDec	++		3531356	1					
ANR	3531422	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""NumberOfChildren() returning %d\\n"" , result )"	2191:1:54973:55036	3531356	3	True				
ANR	3531423	CallExpression	"dprintf ( D_FULLDEBUG , ""NumberOfChildren() returning %d\\n"" , result )"		3531356	0					
ANR	3531424	Callee	dprintf		3531356	0					
ANR	3531425	Identifier	dprintf		3531356	0					
ANR	3531426	ArgumentList	D_FULLDEBUG		3531356	1					
ANR	3531427	Argument	D_FULLDEBUG		3531356	0					
ANR	3531428	Identifier	D_FULLDEBUG		3531356	0					
ANR	3531429	Argument	"""NumberOfChildren() returning %d\\n"""		3531356	1					
ANR	3531430	PrimaryExpression	"""NumberOfChildren() returning %d\\n"""		3531356	0					
ANR	3531431	Argument	result		3531356	2					
ANR	3531432	Identifier	result		3531356	0					
ANR	3531433	ReturnStatement	return result ;	2192:1:55039:55052	3531356	4	True				
ANR	3531434	Identifier	result		3531356	0					
ANR	3531435	ReturnType	int		3531356	1					
ANR	3531436	Identifier	Daemons :: NumberOfChildren		3531356	2					
ANR	3531437	ParameterList			3531356	3					
ANR	3531438	CFGEntryNode	ENTRY		3531356		True				
ANR	3531439	CFGExitNode	EXIT		3531356		True				
ANR	3531440	Symbol	iter -> second -> pid		3531356						
ANR	3531441	Symbol	iter -> second -> OnlyStopWhenMasterStops		3531356						
ANR	3531442	Symbol	iter		3531356						
ANR	3531443	Symbol	D_FULLDEBUG		3531356						
ANR	3531444	Symbol	result		3531356						
ANR	3531445	Symbol	* iter -> second		3531356						
ANR	3531446	Symbol	* iter		3531356						
ANR	3531447	Symbol	iter -> second -> runs_here		3531356						
ANR	3531448	Symbol	daemon_ptr		3531356						
ANR	3531449	Symbol	daemon_ptr . begin		3531356						
ANR	3531450	Symbol	daemon_ptr . end		3531356						
ANR	3531451	Symbol	* * iter		3531356						
ANR	3531452	Symbol	iter -> second		3531356						
ANR	3531453	Function	Daemons :: AllReaper	2196:0:55058:55747							
ANR	3531454	FunctionDef	"Daemons :: AllReaper (int pid , int status)"		3531453	0					
ANR	3531455	CompoundStatement		2198:0:55102:55747	3531453	0					
ANR	3531456	IdentifierDeclStatement	"std :: map < std :: string , class daemon * > :: iterator iter ;"	2199:1:55105:55156	3531453	0	True				
ANR	3531457	IdentifierDecl	iter		3531453	0					
ANR	3531458	IdentifierDeclType	"std :: map < std :: string , class daemon * > :: iterator"		3531453	0					
ANR	3531459	Identifier	iter		3531453	1					
ANR	3531460	IdentifierDeclStatement	"std :: map < int , class daemon * > :: iterator valid_iter ;"	2200:1:55159:55208	3531453	1	True				
ANR	3531461	IdentifierDecl	valid_iter		3531453	0					
ANR	3531462	IdentifierDeclType	"std :: map < int , class daemon * > :: iterator"		3531453	0					
ANR	3531463	Identifier	valid_iter		3531453	1					
ANR	3531464	ExpressionStatement	valid_iter = exit_allowed . find ( pid )	2203:1:55244:55279	3531453	2	True				
ANR	3531465	AssignmentExpression	valid_iter = exit_allowed . find ( pid )		3531453	0		=			
ANR	3531466	Identifier	valid_iter		3531453	0					
ANR	3531467	CallExpression	exit_allowed . find ( pid )		3531453	1					
ANR	3531468	Callee	exit_allowed . find		3531453	0					
ANR	3531469	MemberAccess	exit_allowed . find		3531453	0					
ANR	3531470	Identifier	exit_allowed		3531453	0					
ANR	3531471	Identifier	find		3531453	1					
ANR	3531472	ArgumentList	pid		3531453	1					
ANR	3531473	Argument	pid		3531453	0					
ANR	3531474	Identifier	pid		3531453	0					
ANR	3531475	IfStatement	if ( valid_iter != exit_allowed . end ( ) )		3531453	3					
ANR	3531476	Condition	valid_iter != exit_allowed . end ( )	2204:5:55286:55317	3531453	0	True				
ANR	3531477	EqualityExpression	valid_iter != exit_allowed . end ( )		3531453	0		!=			
ANR	3531478	Identifier	valid_iter		3531453	0					
ANR	3531479	CallExpression	exit_allowed . end ( )		3531453	1					
ANR	3531480	Callee	exit_allowed . end		3531453	0					
ANR	3531481	MemberAccess	exit_allowed . end		3531453	0					
ANR	3531482	Identifier	exit_allowed		3531453	0					
ANR	3531483	Identifier	end		3531453	1					
ANR	3531484	ArgumentList			3531453	1					
ANR	3531485	CompoundStatement		7:40:218:218	3531453	1					
ANR	3531486	ExpressionStatement	valid_iter -> second -> Exited ( status )	2205:2:55325:55361	3531453	0	True				
ANR	3531487	CallExpression	valid_iter -> second -> Exited ( status )		3531453	0					
ANR	3531488	Callee	valid_iter -> second -> Exited		3531453	0					
ANR	3531489	PtrMemberAccess	valid_iter -> second -> Exited		3531453	0					
ANR	3531490	PtrMemberAccess	valid_iter -> second		3531453	0					
ANR	3531491	Identifier	valid_iter		3531453	0					
ANR	3531492	Identifier	second		3531453	1					
ANR	3531493	Identifier	Exited		3531453	1					
ANR	3531494	ArgumentList	status		3531453	1					
ANR	3531495	Argument	status		3531453	0					
ANR	3531496	Identifier	status		3531453	0					
ANR	3531497	Statement	delete	2206:3:55366:55371	3531453	1	True				
ANR	3531498	ExpressionStatement	valid_iter -> second	2206:10:55373:55391	3531453	2	True				
ANR	3531499	PtrMemberAccess	valid_iter -> second		3531453	0					
ANR	3531500	Identifier	valid_iter		3531453	0					
ANR	3531501	Identifier	second		3531453	1					
ANR	3531502	ExpressionStatement	exit_allowed . erase ( valid_iter )	2207:2:55395:55427	3531453	3	True				
ANR	3531503	CallExpression	exit_allowed . erase ( valid_iter )		3531453	0					
ANR	3531504	Callee	exit_allowed . erase		3531453	0					
ANR	3531505	MemberAccess	exit_allowed . erase		3531453	0					
ANR	3531506	Identifier	exit_allowed		3531453	0					
ANR	3531507	Identifier	erase		3531453	1					
ANR	3531508	ArgumentList	valid_iter		3531453	1					
ANR	3531509	Argument	valid_iter		3531453	0					
ANR	3531510	Identifier	valid_iter		3531453	0					
ANR	3531511	IfStatement	if ( NumberOfChildren ( ) == 0 )		3531453	4					
ANR	3531512	Condition	NumberOfChildren ( ) == 0	2208:6:55435:55457	3531453	0	True				
ANR	3531513	EqualityExpression	NumberOfChildren ( ) == 0		3531453	0		==			
ANR	3531514	CallExpression	NumberOfChildren ( )		3531453	0					
ANR	3531515	Callee	NumberOfChildren		3531453	0					
ANR	3531516	Identifier	NumberOfChildren		3531453	0					
ANR	3531517	ArgumentList			3531453	1					
ANR	3531518	PrimaryExpression	0		3531453	1					
ANR	3531519	CompoundStatement		11:32:358:358	3531453	1					
ANR	3531520	ExpressionStatement	AllDaemonsGone ( )	2209:3:55466:55482	3531453	0	True				
ANR	3531521	CallExpression	AllDaemonsGone ( )		3531453	0					
ANR	3531522	Callee	AllDaemonsGone		3531453	0					
ANR	3531523	Identifier	AllDaemonsGone		3531453	0					
ANR	3531524	ArgumentList			3531453	1					
ANR	3531525	ReturnStatement	return TRUE ;	2211:2:55490:55501	3531453	5	True				
ANR	3531526	Identifier	TRUE		3531453	0					
ANR	3531527	ForStatement	for ( iter = daemon_ptr . begin ( ) ; iter != daemon_ptr . end ( ) ; iter ++ )		3531453	4					
ANR	3531528	ForInit	iter = daemon_ptr . begin ( ) ;	2214:6:55513:55538	3531453	0	True				
ANR	3531529	AssignmentExpression	iter = daemon_ptr . begin ( )		3531453	0		=			
ANR	3531530	Identifier	iter		3531453	0					
ANR	3531531	CallExpression	daemon_ptr . begin ( )		3531453	1					
ANR	3531532	Callee	daemon_ptr . begin		3531453	0					
ANR	3531533	MemberAccess	daemon_ptr . begin		3531453	0					
ANR	3531534	Identifier	daemon_ptr		3531453	0					
ANR	3531535	Identifier	begin		3531453	1					
ANR	3531536	ArgumentList			3531453	1					
ANR	3531537	Condition	iter != daemon_ptr . end ( )	2214:33:55540:55563	3531453	1	True				
ANR	3531538	EqualityExpression	iter != daemon_ptr . end ( )		3531453	0		!=			
ANR	3531539	Identifier	iter		3531453	0					
ANR	3531540	CallExpression	daemon_ptr . end ( )		3531453	1					
ANR	3531541	Callee	daemon_ptr . end		3531453	0					
ANR	3531542	MemberAccess	daemon_ptr . end		3531453	0					
ANR	3531543	Identifier	daemon_ptr		3531453	0					
ANR	3531544	Identifier	end		3531453	1					
ANR	3531545	ArgumentList			3531453	1					
ANR	3531546	PostIncDecOperationExpression	iter ++	2214:59:55566:55571	3531453	2	True				
ANR	3531547	Identifier	iter		3531453	0					
ANR	3531548	IncDec	++		3531453	1					
ANR	3531549	CompoundStatement		17:68:472:472	3531453	3					
ANR	3531550	IfStatement	if ( pid == iter -> second -> pid )		3531453	0					
ANR	3531551	Condition	pid == iter -> second -> pid	2215:6:55583:55606	3531453	0	True				
ANR	3531552	EqualityExpression	pid == iter -> second -> pid		3531453	0		==			
ANR	3531553	Identifier	pid		3531453	0					
ANR	3531554	PtrMemberAccess	iter -> second -> pid		3531453	1					
ANR	3531555	PtrMemberAccess	iter -> second		3531453	0					
ANR	3531556	Identifier	iter		3531453	0					
ANR	3531557	Identifier	second		3531453	1					
ANR	3531558	Identifier	pid		3531453	1					
ANR	3531559	CompoundStatement		18:33:507:507	3531453	1					
ANR	3531560	ExpressionStatement	iter -> second -> Exited ( status )	2216:3:55615:55645	3531453	0	True				
ANR	3531561	CallExpression	iter -> second -> Exited ( status )		3531453	0					
ANR	3531562	Callee	iter -> second -> Exited		3531453	0					
ANR	3531563	PtrMemberAccess	iter -> second -> Exited		3531453	0					
ANR	3531564	PtrMemberAccess	iter -> second		3531453	0					
ANR	3531565	Identifier	iter		3531453	0					
ANR	3531566	Identifier	second		3531453	1					
ANR	3531567	Identifier	Exited		3531453	1					
ANR	3531568	ArgumentList	status		3531453	1					
ANR	3531569	Argument	status		3531453	0					
ANR	3531570	Identifier	status		3531453	0					
ANR	3531571	IfStatement	if ( NumberOfChildren ( ) == 0 )		3531453	1					
ANR	3531572	Condition	NumberOfChildren ( ) == 0	2217:7:55654:55676	3531453	0	True				
ANR	3531573	EqualityExpression	NumberOfChildren ( ) == 0		3531453	0		==			
ANR	3531574	CallExpression	NumberOfChildren ( )		3531453	0					
ANR	3531575	Callee	NumberOfChildren		3531453	0					
ANR	3531576	Identifier	NumberOfChildren		3531453	0					
ANR	3531577	ArgumentList			3531453	1					
ANR	3531578	PrimaryExpression	0		3531453	1					
ANR	3531579	CompoundStatement		20:33:577:577	3531453	1					
ANR	3531580	ExpressionStatement	AllDaemonsGone ( )	2218:4:55686:55702	3531453	0	True				
ANR	3531581	CallExpression	AllDaemonsGone ( )		3531453	0					
ANR	3531582	Callee	AllDaemonsGone		3531453	0					
ANR	3531583	Identifier	AllDaemonsGone		3531453	0					
ANR	3531584	ArgumentList			3531453	1					
ANR	3531585	ReturnStatement	return TRUE ;	2220:3:55712:55723	3531453	2	True				
ANR	3531586	Identifier	TRUE		3531453	0					
ANR	3531587	ReturnStatement	return TRUE ;	2224:1:55734:55745	3531453	5	True				
ANR	3531588	Identifier	TRUE		3531453	0					
ANR	3531589	ReturnType	int		3531453	1					
ANR	3531590	Identifier	Daemons :: AllReaper		3531453	2					
ANR	3531591	ParameterList	"int pid , int status"		3531453	3					
ANR	3531592	Parameter	int pid	2197:19:55081:55087	3531453	0	True				
ANR	3531593	ParameterType	int		3531453	0					
ANR	3531594	Identifier	pid		3531453	1					
ANR	3531595	Parameter	int status	2197:28:55090:55099	3531453	1	True				
ANR	3531596	ParameterType	int		3531453	0					
ANR	3531597	Identifier	status		3531453	1					
ANR	3531598	CFGEntryNode	ENTRY		3531453		True				
ANR	3531599	CFGExitNode	EXIT		3531453		True				
ANR	3531600	Symbol	iter -> second -> pid		3531453						
ANR	3531601	Symbol	iter		3531453						
ANR	3531602	Symbol	TRUE		3531453						
ANR	3531603	Symbol	pid		3531453						
ANR	3531604	Symbol	exit_allowed . find		3531453						
ANR	3531605	Symbol	exit_allowed		3531453						
ANR	3531606	Symbol	NumberOfChildren		3531453						
ANR	3531607	Symbol	* valid_iter		3531453						
ANR	3531608	Symbol	* iter -> second		3531453						
ANR	3531609	Symbol	* iter		3531453						
ANR	3531610	Symbol	valid_iter -> second		3531453						
ANR	3531611	Symbol	daemon_ptr		3531453						
ANR	3531612	Symbol	daemon_ptr . begin		3531453						
ANR	3531613	Symbol	daemon_ptr . end		3531453						
ANR	3531614	Symbol	* * iter		3531453						
ANR	3531615	Symbol	valid_iter		3531453						
ANR	3531616	Symbol	iter -> second		3531453						
ANR	3531617	Symbol	status		3531453						
ANR	3531618	Symbol	exit_allowed . end		3531453						
ANR	3531619	Function	Daemons :: DefaultReaper	2228:0:55751:56388							
ANR	3531620	FunctionDef	"Daemons :: DefaultReaper (int pid , int status)"		3531619	0					
ANR	3531621	CompoundStatement		2230:0:55799:56388	3531619	0					
ANR	3531622	IdentifierDeclStatement	"std :: map < std :: string , class daemon * > :: iterator iter ;"	2231:1:55802:55853	3531619	0	True				
ANR	3531623	IdentifierDecl	iter		3531619	0					
ANR	3531624	IdentifierDeclType	"std :: map < std :: string , class daemon * > :: iterator"		3531619	0					
ANR	3531625	Identifier	iter		3531619	1					
ANR	3531626	IdentifierDeclStatement	"std :: map < int , class daemon * > :: iterator valid_iter ;"	2232:1:55856:55905	3531619	1	True				
ANR	3531627	IdentifierDecl	valid_iter		3531619	0					
ANR	3531628	IdentifierDeclType	"std :: map < int , class daemon * > :: iterator"		3531619	0					
ANR	3531629	Identifier	valid_iter		3531619	1					
ANR	3531630	ExpressionStatement	valid_iter = exit_allowed . find ( pid )	2234:1:55909:55944	3531619	2	True				
ANR	3531631	AssignmentExpression	valid_iter = exit_allowed . find ( pid )		3531619	0		=			
ANR	3531632	Identifier	valid_iter		3531619	0					
ANR	3531633	CallExpression	exit_allowed . find ( pid )		3531619	1					
ANR	3531634	Callee	exit_allowed . find		3531619	0					
ANR	3531635	MemberAccess	exit_allowed . find		3531619	0					
ANR	3531636	Identifier	exit_allowed		3531619	0					
ANR	3531637	Identifier	find		3531619	1					
ANR	3531638	ArgumentList	pid		3531619	1					
ANR	3531639	Argument	pid		3531619	0					
ANR	3531640	Identifier	pid		3531619	0					
ANR	3531641	IfStatement	if ( valid_iter != exit_allowed . end ( ) )		3531619	3					
ANR	3531642	Condition	valid_iter != exit_allowed . end ( )	2235:5:55951:55982	3531619	0	True				
ANR	3531643	EqualityExpression	valid_iter != exit_allowed . end ( )		3531619	0		!=			
ANR	3531644	Identifier	valid_iter		3531619	0					
ANR	3531645	CallExpression	exit_allowed . end ( )		3531619	1					
ANR	3531646	Callee	exit_allowed . end		3531619	0					
ANR	3531647	MemberAccess	exit_allowed . end		3531619	0					
ANR	3531648	Identifier	exit_allowed		3531619	0					
ANR	3531649	Identifier	end		3531619	1					
ANR	3531650	ArgumentList			3531619	1					
ANR	3531651	CompoundStatement		6:40:186:186	3531619	1					
ANR	3531652	ExpressionStatement	valid_iter -> second -> Exited ( status )	2236:2:55990:56026	3531619	0	True				
ANR	3531653	CallExpression	valid_iter -> second -> Exited ( status )		3531619	0					
ANR	3531654	Callee	valid_iter -> second -> Exited		3531619	0					
ANR	3531655	PtrMemberAccess	valid_iter -> second -> Exited		3531619	0					
ANR	3531656	PtrMemberAccess	valid_iter -> second		3531619	0					
ANR	3531657	Identifier	valid_iter		3531619	0					
ANR	3531658	Identifier	second		3531619	1					
ANR	3531659	Identifier	Exited		3531619	1					
ANR	3531660	ArgumentList	status		3531619	1					
ANR	3531661	Argument	status		3531619	0					
ANR	3531662	Identifier	status		3531619	0					
ANR	3531663	Statement	delete	2237:3:56031:56036	3531619	1	True				
ANR	3531664	ExpressionStatement	valid_iter -> second	2237:10:56038:56056	3531619	2	True				
ANR	3531665	PtrMemberAccess	valid_iter -> second		3531619	0					
ANR	3531666	Identifier	valid_iter		3531619	0					
ANR	3531667	Identifier	second		3531619	1					
ANR	3531668	ExpressionStatement	exit_allowed . erase ( valid_iter )	2238:2:56060:56090	3531619	3	True				
ANR	3531669	CallExpression	exit_allowed . erase ( valid_iter )		3531619	0					
ANR	3531670	Callee	exit_allowed . erase		3531619	0					
ANR	3531671	MemberAccess	exit_allowed . erase		3531619	0					
ANR	3531672	Identifier	exit_allowed		3531619	0					
ANR	3531673	Identifier	erase		3531619	1					
ANR	3531674	ArgumentList	valid_iter		3531619	1					
ANR	3531675	Argument	valid_iter		3531619	0					
ANR	3531676	Identifier	valid_iter		3531619	0					
ANR	3531677	ReturnStatement	return TRUE ;	2239:2:56094:56105	3531619	4	True				
ANR	3531678	Identifier	TRUE		3531619	0					
ANR	3531679	ForStatement	for ( iter = daemon_ptr . begin ( ) ; iter != daemon_ptr . end ( ) ; iter ++ )		3531619	4					
ANR	3531680	ForInit	iter = daemon_ptr . begin ( ) ;	2242:6:56117:56142	3531619	0	True				
ANR	3531681	AssignmentExpression	iter = daemon_ptr . begin ( )		3531619	0		=			
ANR	3531682	Identifier	iter		3531619	0					
ANR	3531683	CallExpression	daemon_ptr . begin ( )		3531619	1					
ANR	3531684	Callee	daemon_ptr . begin		3531619	0					
ANR	3531685	MemberAccess	daemon_ptr . begin		3531619	0					
ANR	3531686	Identifier	daemon_ptr		3531619	0					
ANR	3531687	Identifier	begin		3531619	1					
ANR	3531688	ArgumentList			3531619	1					
ANR	3531689	Condition	iter != daemon_ptr . end ( )	2242:33:56144:56167	3531619	1	True				
ANR	3531690	EqualityExpression	iter != daemon_ptr . end ( )		3531619	0		!=			
ANR	3531691	Identifier	iter		3531619	0					
ANR	3531692	CallExpression	daemon_ptr . end ( )		3531619	1					
ANR	3531693	Callee	daemon_ptr . end		3531619	0					
ANR	3531694	MemberAccess	daemon_ptr . end		3531619	0					
ANR	3531695	Identifier	daemon_ptr		3531619	0					
ANR	3531696	Identifier	end		3531619	1					
ANR	3531697	ArgumentList			3531619	1					
ANR	3531698	PostIncDecOperationExpression	iter ++	2242:59:56170:56175	3531619	2	True				
ANR	3531699	Identifier	iter		3531619	0					
ANR	3531700	IncDec	++		3531619	1					
ANR	3531701	CompoundStatement		13:68:379:379	3531619	3					
ANR	3531702	IfStatement	if ( pid == iter -> second -> pid )		3531619	0					
ANR	3531703	Condition	pid == iter -> second -> pid	2243:6:56187:56210	3531619	0	True				
ANR	3531704	EqualityExpression	pid == iter -> second -> pid		3531619	0		==			
ANR	3531705	Identifier	pid		3531619	0					
ANR	3531706	PtrMemberAccess	iter -> second -> pid		3531619	1					
ANR	3531707	PtrMemberAccess	iter -> second		3531619	0					
ANR	3531708	Identifier	iter		3531619	0					
ANR	3531709	Identifier	second		3531619	1					
ANR	3531710	Identifier	pid		3531619	1					
ANR	3531711	CompoundStatement		14:33:414:414	3531619	1					
ANR	3531712	ExpressionStatement	iter -> second -> Exited ( status )	2244:3:56219:56249	3531619	0	True				
ANR	3531713	CallExpression	iter -> second -> Exited ( status )		3531619	0					
ANR	3531714	Callee	iter -> second -> Exited		3531619	0					
ANR	3531715	PtrMemberAccess	iter -> second -> Exited		3531619	0					
ANR	3531716	PtrMemberAccess	iter -> second		3531619	0					
ANR	3531717	Identifier	iter		3531619	0					
ANR	3531718	Identifier	second		3531619	1					
ANR	3531719	Identifier	Exited		3531619	1					
ANR	3531720	ArgumentList	status		3531619	1					
ANR	3531721	Argument	status		3531619	0					
ANR	3531722	Identifier	status		3531619	0					
ANR	3531723	IfStatement	if ( PublishObituaries )		3531619	1					
ANR	3531724	Condition	PublishObituaries	2245:7:56258:56274	3531619	0	True				
ANR	3531725	Identifier	PublishObituaries		3531619	0					
ANR	3531726	CompoundStatement		16:27:478:478	3531619	1					
ANR	3531727	ExpressionStatement	iter -> second -> Obituary ( status )	2246:4:56284:56316	3531619	0	True				
ANR	3531728	CallExpression	iter -> second -> Obituary ( status )		3531619	0					
ANR	3531729	Callee	iter -> second -> Obituary		3531619	0					
ANR	3531730	PtrMemberAccess	iter -> second -> Obituary		3531619	0					
ANR	3531731	PtrMemberAccess	iter -> second		3531619	0					
ANR	3531732	Identifier	iter		3531619	0					
ANR	3531733	Identifier	second		3531619	1					
ANR	3531734	Identifier	Obituary		3531619	1					
ANR	3531735	ArgumentList	status		3531619	1					
ANR	3531736	Argument	status		3531619	0					
ANR	3531737	Identifier	status		3531619	0					
ANR	3531738	ExpressionStatement	iter -> second -> Restart ( )	2248:3:56326:56349	3531619	2	True				
ANR	3531739	CallExpression	iter -> second -> Restart ( )		3531619	0					
ANR	3531740	Callee	iter -> second -> Restart		3531619	0					
ANR	3531741	PtrMemberAccess	iter -> second -> Restart		3531619	0					
ANR	3531742	PtrMemberAccess	iter -> second		3531619	0					
ANR	3531743	Identifier	iter		3531619	0					
ANR	3531744	Identifier	second		3531619	1					
ANR	3531745	Identifier	Restart		3531619	1					
ANR	3531746	ArgumentList			3531619	1					
ANR	3531747	ReturnStatement	return TRUE ;	2249:3:56354:56365	3531619	3	True				
ANR	3531748	Identifier	TRUE		3531619	0					
ANR	3531749	ReturnStatement	return TRUE ;	2252:1:56375:56386	3531619	5	True				
ANR	3531750	Identifier	TRUE		3531619	0					
ANR	3531751	ReturnType	int		3531619	1					
ANR	3531752	Identifier	Daemons :: DefaultReaper		3531619	2					
ANR	3531753	ParameterList	"int pid , int status"		3531619	3					
ANR	3531754	Parameter	int pid	2229:23:55778:55784	3531619	0	True				
ANR	3531755	ParameterType	int		3531619	0					
ANR	3531756	Identifier	pid		3531619	1					
ANR	3531757	Parameter	int status	2229:32:55787:55796	3531619	1	True				
ANR	3531758	ParameterType	int		3531619	0					
ANR	3531759	Identifier	status		3531619	1					
ANR	3531760	CFGEntryNode	ENTRY		3531619		True				
ANR	3531761	CFGExitNode	EXIT		3531619		True				
ANR	3531762	Symbol	iter -> second -> pid		3531619						
ANR	3531763	Symbol	iter		3531619						
ANR	3531764	Symbol	TRUE		3531619						
ANR	3531765	Symbol	pid		3531619						
ANR	3531766	Symbol	exit_allowed . find		3531619						
ANR	3531767	Symbol	exit_allowed		3531619						
ANR	3531768	Symbol	* valid_iter		3531619						
ANR	3531769	Symbol	* iter -> second		3531619						
ANR	3531770	Symbol	* iter		3531619						
ANR	3531771	Symbol	valid_iter -> second		3531619						
ANR	3531772	Symbol	daemon_ptr		3531619						
ANR	3531773	Symbol	daemon_ptr . begin		3531619						
ANR	3531774	Symbol	daemon_ptr . end		3531619						
ANR	3531775	Symbol	* * iter		3531619						
ANR	3531776	Symbol	valid_iter		3531619						
ANR	3531777	Symbol	iter -> second		3531619						
ANR	3531778	Symbol	status		3531619						
ANR	3531779	Symbol	exit_allowed . end		3531619						
ANR	3531780	Symbol	PublishObituaries		3531619						
ANR	3531781	Function	Daemons :: SetAllReaper	2259:0:56502:56759							
ANR	3531782	FunctionDef	Daemons :: SetAllReaper ()		3531781	0					
ANR	3531783	CompoundStatement		2261:0:56531:56759	3531781	0					
ANR	3531784	IfStatement	if ( reaper == ALL_R )		3531781	0					
ANR	3531785	Condition	reaper == ALL_R	2262:5:56538:56552	3531781	0	True				
ANR	3531786	EqualityExpression	reaper == ALL_R		3531781	0		==			
ANR	3531787	Identifier	reaper		3531781	0					
ANR	3531788	Identifier	ALL_R		3531781	1					
ANR	3531789	CompoundStatement		2:23:24:24	3531781	1					
ANR	3531790	ReturnStatement	return ;	2264:2:56593:56599	3531781	0	True				
ANR	3531791	ExpressionStatement	"daemonCore -> Reset_Reaper ( 1 , ""All Daemon Reaper"" , ( ReaperHandlercpp ) & Daemons :: AllReaper , ""Daemons::AllReaper()"" , this )"	2266:1:56605:56740	3531781	1	True				
ANR	3531792	CallExpression	"daemonCore -> Reset_Reaper ( 1 , ""All Daemon Reaper"" , ( ReaperHandlercpp ) & Daemons :: AllReaper , ""Daemons::AllReaper()"" , this )"		3531781	0					
ANR	3531793	Callee	daemonCore -> Reset_Reaper		3531781	0					
ANR	3531794	PtrMemberAccess	daemonCore -> Reset_Reaper		3531781	0					
ANR	3531795	Identifier	daemonCore		3531781	0					
ANR	3531796	Identifier	Reset_Reaper		3531781	1					
ANR	3531797	ArgumentList	1		3531781	1					
ANR	3531798	Argument	1		3531781	0					
ANR	3531799	PrimaryExpression	1		3531781	0					
ANR	3531800	Argument	"""All Daemon Reaper"""		3531781	1					
ANR	3531801	PrimaryExpression	"""All Daemon Reaper"""		3531781	0					
ANR	3531802	Argument	( ReaperHandlercpp ) & Daemons :: AllReaper		3531781	2					
ANR	3531803	CastExpression	( ReaperHandlercpp ) & Daemons :: AllReaper		3531781	0					
ANR	3531804	CastTarget	ReaperHandlercpp		3531781	0					
ANR	3531805	UnaryOperationExpression	& Daemons :: AllReaper		3531781	1					
ANR	3531806	UnaryOperator	&		3531781	0					
ANR	3531807	Identifier	Daemons :: AllReaper		3531781	1					
ANR	3531808	Argument	"""Daemons::AllReaper()"""		3531781	3					
ANR	3531809	PrimaryExpression	"""Daemons::AllReaper()"""		3531781	0					
ANR	3531810	Argument	this		3531781	4					
ANR	3531811	Identifier	this		3531781	0					
ANR	3531812	ExpressionStatement	reaper = ALL_R	2269:1:56743:56757	3531781	2	True				
ANR	3531813	AssignmentExpression	reaper = ALL_R		3531781	0		=			
ANR	3531814	Identifier	reaper		3531781	0					
ANR	3531815	Identifier	ALL_R		3531781	1					
ANR	3531816	ReturnType	void		3531781	1					
ANR	3531817	Identifier	Daemons :: SetAllReaper		3531781	2					
ANR	3531818	ParameterList			3531781	3					
ANR	3531819	CFGEntryNode	ENTRY		3531781		True				
ANR	3531820	CFGExitNode	EXIT		3531781		True				
ANR	3531821	Symbol	ALL_R		3531781						
ANR	3531822	Symbol	& Daemons :: AllReaper		3531781						
ANR	3531823	Symbol	daemonCore		3531781						
ANR	3531824	Symbol	this		3531781						
ANR	3531825	Symbol	reaper		3531781						
ANR	3531826	Function	Daemons :: SetDefaultReaper	2275:0:56872:57440							
ANR	3531827	FunctionDef	Daemons :: SetDefaultReaper ()		3531826	0					
ANR	3531828	CompoundStatement		2277:0:56905:57440	3531826	0					
ANR	3531829	IfStatement	if ( reaper == DEFAULT_R )		3531826	0					
ANR	3531830	Condition	reaper == DEFAULT_R	2278:5:56912:56930	3531826	0	True				
ANR	3531831	EqualityExpression	reaper == DEFAULT_R		3531826	0		==			
ANR	3531832	Identifier	reaper		3531826	0					
ANR	3531833	Identifier	DEFAULT_R		3531826	1					
ANR	3531834	CompoundStatement		2:27:28:28	3531826	1					
ANR	3531835	ReturnStatement	return ;	2280:2:56979:56985	3531826	0	True				
ANR	3531836	Statement	static	2282:1:56991:56996	3531826	1	True				
ANR	3531837	IdentifierDeclStatement	int already_registered_reaper = 0 ;	2282:8:56998:57031	3531826	2	True				
ANR	3531838	IdentifierDecl	already_registered_reaper = 0		3531826	0					
ANR	3531839	IdentifierDeclType	int		3531826	0					
ANR	3531840	Identifier	already_registered_reaper		3531826	1					
ANR	3531841	AssignmentExpression	already_registered_reaper = 0		3531826	2		=			
ANR	3531842	Identifier	already_registered_reaper		3531826	0					
ANR	3531843	PrimaryExpression	0		3531826	1					
ANR	3531844	IfStatement	if ( already_registered_reaper )		3531826	3					
ANR	3531845	Condition	already_registered_reaper	2283:6:57039:57063	3531826	0	True				
ANR	3531846	Identifier	already_registered_reaper		3531826	0					
ANR	3531847	CompoundStatement		7:34:161:161	3531826	1					
ANR	3531848	ExpressionStatement	"daemonCore -> Reset_Reaper ( 1 , ""Default Daemon Reaper"" , ( ReaperHandlercpp ) & Daemons :: DefaultReaper , ""Daemons::DefaultReaper()"" , this )"	2284:2:57071:57218	3531826	0	True				
ANR	3531849	CallExpression	"daemonCore -> Reset_Reaper ( 1 , ""Default Daemon Reaper"" , ( ReaperHandlercpp ) & Daemons :: DefaultReaper , ""Daemons::DefaultReaper()"" , this )"		3531826	0					
ANR	3531850	Callee	daemonCore -> Reset_Reaper		3531826	0					
ANR	3531851	PtrMemberAccess	daemonCore -> Reset_Reaper		3531826	0					
ANR	3531852	Identifier	daemonCore		3531826	0					
ANR	3531853	Identifier	Reset_Reaper		3531826	1					
ANR	3531854	ArgumentList	1		3531826	1					
ANR	3531855	Argument	1		3531826	0					
ANR	3531856	PrimaryExpression	1		3531826	0					
ANR	3531857	Argument	"""Default Daemon Reaper"""		3531826	1					
ANR	3531858	PrimaryExpression	"""Default Daemon Reaper"""		3531826	0					
ANR	3531859	Argument	( ReaperHandlercpp ) & Daemons :: DefaultReaper		3531826	2					
ANR	3531860	CastExpression	( ReaperHandlercpp ) & Daemons :: DefaultReaper		3531826	0					
ANR	3531861	CastTarget	ReaperHandlercpp		3531826	0					
ANR	3531862	UnaryOperationExpression	& Daemons :: DefaultReaper		3531826	1					
ANR	3531863	UnaryOperator	&		3531826	0					
ANR	3531864	Identifier	Daemons :: DefaultReaper		3531826	1					
ANR	3531865	Argument	"""Daemons::DefaultReaper()"""		3531826	3					
ANR	3531866	PrimaryExpression	"""Daemons::DefaultReaper()"""		3531826	0					
ANR	3531867	Argument	this		3531826	4					
ANR	3531868	Identifier	this		3531826	0					
ANR	3531869	ElseStatement	else		3531826	0					
ANR	3531870	CompoundStatement		11:8:322:322	3531826	0					
ANR	3531871	ExpressionStatement	already_registered_reaper = 1	2288:2:57232:57261	3531826	0	True				
ANR	3531872	AssignmentExpression	already_registered_reaper = 1		3531826	0		=			
ANR	3531873	Identifier	already_registered_reaper		3531826	0					
ANR	3531874	PrimaryExpression	1		3531826	1					
ANR	3531875	ExpressionStatement	"daemonCore -> Register_Reaper ( ""Default Daemon Reaper"" , ( ReaperHandlercpp ) & Daemons :: DefaultReaper , ""Daemons::DefaultReaper()"" , this )"	2289:2:57265:57414	3531826	1	True				
ANR	3531876	CallExpression	"daemonCore -> Register_Reaper ( ""Default Daemon Reaper"" , ( ReaperHandlercpp ) & Daemons :: DefaultReaper , ""Daemons::DefaultReaper()"" , this )"		3531826	0					
ANR	3531877	Callee	daemonCore -> Register_Reaper		3531826	0					
ANR	3531878	PtrMemberAccess	daemonCore -> Register_Reaper		3531826	0					
ANR	3531879	Identifier	daemonCore		3531826	0					
ANR	3531880	Identifier	Register_Reaper		3531826	1					
ANR	3531881	ArgumentList	"""Default Daemon Reaper"""		3531826	1					
ANR	3531882	Argument	"""Default Daemon Reaper"""		3531826	0					
ANR	3531883	PrimaryExpression	"""Default Daemon Reaper"""		3531826	0					
ANR	3531884	Argument	( ReaperHandlercpp ) & Daemons :: DefaultReaper		3531826	1					
ANR	3531885	CastExpression	( ReaperHandlercpp ) & Daemons :: DefaultReaper		3531826	0					
ANR	3531886	CastTarget	ReaperHandlercpp		3531826	0					
ANR	3531887	UnaryOperationExpression	& Daemons :: DefaultReaper		3531826	1					
ANR	3531888	UnaryOperator	&		3531826	0					
ANR	3531889	Identifier	Daemons :: DefaultReaper		3531826	1					
ANR	3531890	Argument	"""Daemons::DefaultReaper()"""		3531826	2					
ANR	3531891	PrimaryExpression	"""Daemons::DefaultReaper()"""		3531826	0					
ANR	3531892	Argument	this		3531826	3					
ANR	3531893	Identifier	this		3531826	0					
ANR	3531894	ExpressionStatement	reaper = DEFAULT_R	2293:1:57420:57438	3531826	4	True				
ANR	3531895	AssignmentExpression	reaper = DEFAULT_R		3531826	0		=			
ANR	3531896	Identifier	reaper		3531826	0					
ANR	3531897	Identifier	DEFAULT_R		3531826	1					
ANR	3531898	ReturnType	void		3531826	1					
ANR	3531899	Identifier	Daemons :: SetDefaultReaper		3531826	2					
ANR	3531900	ParameterList			3531826	3					
ANR	3531901	CFGEntryNode	ENTRY		3531826		True				
ANR	3531902	CFGExitNode	EXIT		3531826		True				
ANR	3531903	Symbol	& Daemons :: DefaultReaper		3531826						
ANR	3531904	Symbol	daemonCore		3531826						
ANR	3531905	Symbol	this		3531826						
ANR	3531906	Symbol	reaper		3531826						
ANR	3531907	Symbol	DEFAULT_R		3531826						
ANR	3531908	Symbol	already_registered_reaper		3531826						
ANR	3531909	Function	Daemons :: StopDaemonsBeforeMasterStops	2296:0:57443:57846							
ANR	3531910	FunctionDef	Daemons :: StopDaemonsBeforeMasterStops ()		3531909	0					
ANR	3531911	CompoundStatement		2298:0:57488:57846	3531909	0					
ANR	3531912	IdentifierDeclStatement	int running = 0 ;	2301:1:57583:57598	3531909	0	True				
ANR	3531913	IdentifierDecl	running = 0		3531909	0					
ANR	3531914	IdentifierDeclType	int		3531909	0					
ANR	3531915	Identifier	running		3531909	1					
ANR	3531916	AssignmentExpression	running = 0		3531909	2		=			
ANR	3531917	Identifier	running		3531909	0					
ANR	3531918	PrimaryExpression	0		3531909	1					
ANR	3531919	IdentifierDeclStatement	"std :: map < std :: string , class daemon * > :: iterator iter ;"	2302:1:57601:57652	3531909	1	True				
ANR	3531920	IdentifierDecl	iter		3531909	0					
ANR	3531921	IdentifierDeclType	"std :: map < std :: string , class daemon * > :: iterator"		3531909	0					
ANR	3531922	Identifier	iter		3531909	1					
ANR	3531923	ForStatement	for ( iter = daemon_ptr . begin ( ) ; iter != daemon_ptr . end ( ) ; iter ++ )		3531909	2					
ANR	3531924	ForInit	iter = daemon_ptr . begin ( ) ;	2304:6:57661:57686	3531909	0	True				
ANR	3531925	AssignmentExpression	iter = daemon_ptr . begin ( )		3531909	0		=			
ANR	3531926	Identifier	iter		3531909	0					
ANR	3531927	CallExpression	daemon_ptr . begin ( )		3531909	1					
ANR	3531928	Callee	daemon_ptr . begin		3531909	0					
ANR	3531929	MemberAccess	daemon_ptr . begin		3531909	0					
ANR	3531930	Identifier	daemon_ptr		3531909	0					
ANR	3531931	Identifier	begin		3531909	1					
ANR	3531932	ArgumentList			3531909	1					
ANR	3531933	Condition	iter != daemon_ptr . end ( )	2304:33:57688:57711	3531909	1	True				
ANR	3531934	EqualityExpression	iter != daemon_ptr . end ( )		3531909	0		!=			
ANR	3531935	Identifier	iter		3531909	0					
ANR	3531936	CallExpression	daemon_ptr . end ( )		3531909	1					
ANR	3531937	Callee	daemon_ptr . end		3531909	0					
ANR	3531938	MemberAccess	daemon_ptr . end		3531909	0					
ANR	3531939	Identifier	daemon_ptr		3531909	0					
ANR	3531940	Identifier	end		3531909	1					
ANR	3531941	ArgumentList			3531909	1					
ANR	3531942	PostIncDecOperationExpression	iter ++	2304:59:57714:57719	3531909	2	True				
ANR	3531943	Identifier	iter		3531909	0					
ANR	3531944	IncDec	++		3531909	1					
ANR	3531945	CompoundStatement		7:68:234:234	3531909	3					
ANR	3531946	IfStatement	if ( iter -> second -> pid && iter -> second -> runs_here )		3531909	0					
ANR	3531947	Condition	iter -> second -> pid && iter -> second -> runs_here	2305:6:57731:57774	3531909	0	True				
ANR	3531948	AndExpression	iter -> second -> pid && iter -> second -> runs_here		3531909	0		&&			
ANR	3531949	PtrMemberAccess	iter -> second -> pid		3531909	0					
ANR	3531950	PtrMemberAccess	iter -> second		3531909	0					
ANR	3531951	Identifier	iter		3531909	0					
ANR	3531952	Identifier	second		3531909	1					
ANR	3531953	Identifier	pid		3531909	1					
ANR	3531954	PtrMemberAccess	iter -> second -> runs_here		3531909	1					
ANR	3531955	PtrMemberAccess	iter -> second		3531909	0					
ANR	3531956	Identifier	iter		3531909	0					
ANR	3531957	Identifier	second		3531909	1					
ANR	3531958	Identifier	runs_here		3531909	1					
ANR	3531959	CompoundStatement		9:2:291:291	3531909	1					
ANR	3531960	ExpressionStatement	iter -> second -> Stop ( )	2307:3:57785:57805	3531909	0	True				
ANR	3531961	CallExpression	iter -> second -> Stop ( )		3531909	0					
ANR	3531962	Callee	iter -> second -> Stop		3531909	0					
ANR	3531963	PtrMemberAccess	iter -> second -> Stop		3531909	0					
ANR	3531964	PtrMemberAccess	iter -> second		3531909	0					
ANR	3531965	Identifier	iter		3531909	0					
ANR	3531966	Identifier	second		3531909	1					
ANR	3531967	Identifier	Stop		3531909	1					
ANR	3531968	ArgumentList			3531909	1					
ANR	3531969	ExpressionStatement	running ++	2308:3:57810:57819	3531909	1	True				
ANR	3531970	PostIncDecOperationExpression	running ++		3531909	0					
ANR	3531971	Identifier	running		3531909	0					
ANR	3531972	IncDec	++		3531909	1					
ANR	3531973	ReturnStatement	return ! running ;	2311:1:57829:57844	3531909	3	True				
ANR	3531974	UnaryOperationExpression	! running		3531909	0					
ANR	3531975	UnaryOperator	!		3531909	0					
ANR	3531976	Identifier	running		3531909	1					
ANR	3531977	ReturnType	bool		3531909	1					
ANR	3531978	Identifier	Daemons :: StopDaemonsBeforeMasterStops		3531909	2					
ANR	3531979	ParameterList			3531909	3					
ANR	3531980	CFGEntryNode	ENTRY		3531909		True				
ANR	3531981	CFGExitNode	EXIT		3531909		True				
ANR	3531982	Symbol	running		3531909						
ANR	3531983	Symbol	iter -> second -> pid		3531909						
ANR	3531984	Symbol	* iter -> second		3531909						
ANR	3531985	Symbol	iter -> second -> runs_here		3531909						
ANR	3531986	Symbol	* iter		3531909						
ANR	3531987	Symbol	daemon_ptr		3531909						
ANR	3531988	Symbol	daemon_ptr . begin		3531909						
ANR	3531989	Symbol	iter		3531909						
ANR	3531990	Symbol	daemon_ptr . end		3531909						
ANR	3531991	Symbol	* * iter		3531909						
ANR	3531992	Symbol	iter -> second		3531909						
ANR	3531993	Function	Daemons :: AllDaemonsGone	2314:0:57849:58362							
ANR	3531994	FunctionDef	Daemons :: AllDaemonsGone ()		3531993	0					
ANR	3531995	CompoundStatement		2316:0:57880:58362	3531993	0					
ANR	3531996	SwitchStatement	switch ( all_daemons_gone_action )		3531993	0					
ANR	3531997	Condition	all_daemons_gone_action	2317:9:57891:57913	3531993	0	True				
ANR	3531998	Identifier	all_daemons_gone_action		3531993	0					
ANR	3531999	CompoundStatement		2:35:36:36	3531993	1					
ANR	3532000	Label	case MASTER_RESET :	2318:1:57920:57937	3531993	0	True				
ANR	3532001	Identifier	MASTER_RESET		3531993	0					
ANR	3532002	ExpressionStatement	"dprintf ( D_ALWAYS , ""All daemons are gone.\\n"" )"	2319:2:57941:57987	3531993	1	True				
ANR	3532003	CallExpression	"dprintf ( D_ALWAYS , ""All daemons are gone.\\n"" )"		3531993	0					
ANR	3532004	Callee	dprintf		3531993	0					
ANR	3532005	Identifier	dprintf		3531993	0					
ANR	3532006	ArgumentList	D_ALWAYS		3531993	1					
ANR	3532007	Argument	D_ALWAYS		3531993	0					
ANR	3532008	Identifier	D_ALWAYS		3531993	0					
ANR	3532009	Argument	"""All daemons are gone.\\n"""		3531993	1					
ANR	3532010	PrimaryExpression	"""All daemons are gone.\\n"""		3531993	0					
ANR	3532011	ExpressionStatement	SetDefaultReaper ( )	2320:2:57991:58009	3531993	2	True				
ANR	3532012	CallExpression	SetDefaultReaper ( )		3531993	0					
ANR	3532013	Callee	SetDefaultReaper		3531993	0					
ANR	3532014	Identifier	SetDefaultReaper		3531993	0					
ANR	3532015	ArgumentList			3531993	1					
ANR	3532016	BreakStatement	break ;	2321:2:58013:58018	3531993	3	True				
ANR	3532017	Label	case MASTER_RESTART :	2322:1:58021:58040	3531993	4	True				
ANR	3532018	Identifier	MASTER_RESTART		3531993	0					
ANR	3532019	IfStatement	if ( ! StopDaemonsBeforeMasterStops ( ) )		3531993	5					
ANR	3532020	Condition	! StopDaemonsBeforeMasterStops ( )	2323:6:58048:58078	3531993	0	True				
ANR	3532021	UnaryOperationExpression	! StopDaemonsBeforeMasterStops ( )		3531993	0					
ANR	3532022	UnaryOperator	!		3531993	0					
ANR	3532023	CallExpression	StopDaemonsBeforeMasterStops ( )		3531993	1					
ANR	3532024	Callee	StopDaemonsBeforeMasterStops		3531993	0					
ANR	3532025	Identifier	StopDaemonsBeforeMasterStops		3531993	0					
ANR	3532026	ArgumentList			3531993	1					
ANR	3532027	CompoundStatement		8:40:201:201	3531993	1					
ANR	3532028	ReturnStatement	return ;	2324:3:58087:58093	3531993	0	True				
ANR	3532029	ExpressionStatement	"dprintf ( D_ALWAYS , ""All daemons are gone.  Restarting.\\n"" )"	2326:2:58101:58160	3531993	6	True				
ANR	3532030	CallExpression	"dprintf ( D_ALWAYS , ""All daemons are gone.  Restarting.\\n"" )"		3531993	0					
ANR	3532031	Callee	dprintf		3531993	0					
ANR	3532032	Identifier	dprintf		3531993	0					
ANR	3532033	ArgumentList	D_ALWAYS		3531993	1					
ANR	3532034	Argument	D_ALWAYS		3531993	0					
ANR	3532035	Identifier	D_ALWAYS		3531993	0					
ANR	3532036	Argument	"""All daemons are gone.  Restarting.\\n"""		3531993	1					
ANR	3532037	PrimaryExpression	"""All daemons are gone.  Restarting.\\n"""		3531993	0					
ANR	3532038	ExpressionStatement	FinishRestartMaster ( )	2327:2:58164:58185	3531993	7	True				
ANR	3532039	CallExpression	FinishRestartMaster ( )		3531993	0					
ANR	3532040	Callee	FinishRestartMaster		3531993	0					
ANR	3532041	Identifier	FinishRestartMaster		3531993	0					
ANR	3532042	ArgumentList			3531993	1					
ANR	3532043	BreakStatement	break ;	2328:2:58189:58194	3531993	8	True				
ANR	3532044	Label	case MASTER_EXIT :	2329:1:58197:58213	3531993	9	True				
ANR	3532045	Identifier	MASTER_EXIT		3531993	0					
ANR	3532046	IfStatement	if ( ! StopDaemonsBeforeMasterStops ( ) )		3531993	10					
ANR	3532047	Condition	! StopDaemonsBeforeMasterStops ( )	2330:6:58221:58251	3531993	0	True				
ANR	3532048	UnaryOperationExpression	! StopDaemonsBeforeMasterStops ( )		3531993	0					
ANR	3532049	UnaryOperator	!		3531993	0					
ANR	3532050	CallExpression	StopDaemonsBeforeMasterStops ( )		3531993	1					
ANR	3532051	Callee	StopDaemonsBeforeMasterStops		3531993	0					
ANR	3532052	Identifier	StopDaemonsBeforeMasterStops		3531993	0					
ANR	3532053	ArgumentList			3531993	1					
ANR	3532054	CompoundStatement		15:40:374:374	3531993	1					
ANR	3532055	ReturnStatement	return ;	2331:3:58260:58266	3531993	0	True				
ANR	3532056	ExpressionStatement	"dprintf ( D_ALWAYS , ""All daemons are gone.  Exiting.\\n"" )"	2333:2:58274:58330	3531993	11	True				
ANR	3532057	CallExpression	"dprintf ( D_ALWAYS , ""All daemons are gone.  Exiting.\\n"" )"		3531993	0					
ANR	3532058	Callee	dprintf		3531993	0					
ANR	3532059	Identifier	dprintf		3531993	0					
ANR	3532060	ArgumentList	D_ALWAYS		3531993	1					
ANR	3532061	Argument	D_ALWAYS		3531993	0					
ANR	3532062	Identifier	D_ALWAYS		3531993	0					
ANR	3532063	Argument	"""All daemons are gone.  Exiting.\\n"""		3531993	1					
ANR	3532064	PrimaryExpression	"""All daemons are gone.  Exiting.\\n"""		3531993	0					
ANR	3532065	ExpressionStatement	master_exit ( 0 )	2334:2:58334:58348	3531993	12	True				
ANR	3532066	CallExpression	master_exit ( 0 )		3531993	0					
ANR	3532067	Callee	master_exit		3531993	0					
ANR	3532068	Identifier	master_exit		3531993	0					
ANR	3532069	ArgumentList	0		3531993	1					
ANR	3532070	Argument	0		3531993	0					
ANR	3532071	PrimaryExpression	0		3531993	0					
ANR	3532072	BreakStatement	break ;	2335:2:58352:58357	3531993	13	True				
ANR	3532073	ReturnType	void		3531993	1					
ANR	3532074	Identifier	Daemons :: AllDaemonsGone		3531993	2					
ANR	3532075	ParameterList			3531993	3					
ANR	3532076	CFGEntryNode	ENTRY		3531993		True				
ANR	3532077	CFGExitNode	EXIT		3531993		True				
ANR	3532078	Symbol	StopDaemonsBeforeMasterStops		3531993						
ANR	3532079	Symbol	D_ALWAYS		3531993						
ANR	3532080	Symbol	all_daemons_gone_action		3531993						
ANR	3532081	Function	Daemons :: StartTimers	2340:0:58366:59560							
ANR	3532082	FunctionDef	Daemons :: StartTimers ()		3532081	0					
ANR	3532083	CompoundStatement		2342:0:58394:59560	3532081	0					
ANR	3532084	Statement	static	2343:1:58397:58402	3532081	0	True				
ANR	3532085	IdentifierDeclStatement	int old_update_int = - 1 ;	2343:8:58404:58427	3532081	1	True				
ANR	3532086	IdentifierDecl	old_update_int = - 1		3532081	0					
ANR	3532087	IdentifierDeclType	int		3532081	0					
ANR	3532088	Identifier	old_update_int		3532081	1					
ANR	3532089	AssignmentExpression	old_update_int = - 1		3532081	2		=			
ANR	3532090	Identifier	old_update_int		3532081	0					
ANR	3532091	UnaryOperationExpression	- 1		3532081	1					
ANR	3532092	UnaryOperator	-		3532081	0					
ANR	3532093	PrimaryExpression	1		3532081	1					
ANR	3532094	Statement	static	2344:1:58430:58435	3532081	2	True				
ANR	3532095	IdentifierDeclStatement	int old_check_int = - 1 ;	2344:8:58437:58459	3532081	3	True				
ANR	3532096	IdentifierDecl	old_check_int = - 1		3532081	0					
ANR	3532097	IdentifierDeclType	int		3532081	0					
ANR	3532098	Identifier	old_check_int		3532081	1					
ANR	3532099	AssignmentExpression	old_check_int = - 1		3532081	2		=			
ANR	3532100	Identifier	old_check_int		3532081	0					
ANR	3532101	UnaryOperationExpression	- 1		3532081	1					
ANR	3532102	UnaryOperator	-		3532081	0					
ANR	3532103	PrimaryExpression	1		3532081	1					
ANR	3532104	Statement	static	2345:1:58462:58467	3532081	4	True				
ANR	3532105	IdentifierDeclStatement	int old_preen_int = - 1 ;	2345:8:58469:58491	3532081	5	True				
ANR	3532106	IdentifierDecl	old_preen_int = - 1		3532081	0					
ANR	3532107	IdentifierDeclType	int		3532081	0					
ANR	3532108	Identifier	old_preen_int		3532081	1					
ANR	3532109	AssignmentExpression	old_preen_int = - 1		3532081	2		=			
ANR	3532110	Identifier	old_preen_int		3532081	0					
ANR	3532111	UnaryOperationExpression	- 1		3532081	1					
ANR	3532112	UnaryOperator	-		3532081	0					
ANR	3532113	PrimaryExpression	1		3532081	1					
ANR	3532114	IfStatement	if ( old_update_int != update_interval )		3532081	6					
ANR	3532115	Condition	old_update_int != update_interval	2347:5:58499:58531	3532081	0	True				
ANR	3532116	EqualityExpression	old_update_int != update_interval		3532081	0		!=			
ANR	3532117	Identifier	old_update_int		3532081	0					
ANR	3532118	Identifier	update_interval		3532081	1					
ANR	3532119	CompoundStatement		6:41:140:140	3532081	1					
ANR	3532120	IfStatement	if ( update_tid != - 1 )		3532081	0					
ANR	3532121	Condition	update_tid != - 1	2348:6:58543:58558	3532081	0	True				
ANR	3532122	EqualityExpression	update_tid != - 1		3532081	0		!=			
ANR	3532123	Identifier	update_tid		3532081	0					
ANR	3532124	UnaryOperationExpression	- 1		3532081	1					
ANR	3532125	UnaryOperator	-		3532081	0					
ANR	3532126	PrimaryExpression	1		3532081	1					
ANR	3532127	CompoundStatement		7:25:167:167	3532081	1					
ANR	3532128	ExpressionStatement	daemonCore -> Cancel_Timer ( update_tid )	2349:3:58567:58605	3532081	0	True				
ANR	3532129	CallExpression	daemonCore -> Cancel_Timer ( update_tid )		3532081	0					
ANR	3532130	Callee	daemonCore -> Cancel_Timer		3532081	0					
ANR	3532131	PtrMemberAccess	daemonCore -> Cancel_Timer		3532081	0					
ANR	3532132	Identifier	daemonCore		3532081	0					
ANR	3532133	Identifier	Cancel_Timer		3532081	1					
ANR	3532134	ArgumentList	update_tid		3532081	1					
ANR	3532135	Argument	update_tid		3532081	0					
ANR	3532136	Identifier	update_tid		3532081	0					
ANR	3532137	ExpressionStatement	"update_tid = daemonCore -> Register_Timer ( 5 , update_interval , ( TimerHandlercpp ) & Daemons :: UpdateCollector , ""Daemons::UpdateCollector()"" , this )"	2354:2:58787:58946	3532081	1	True				
ANR	3532138	AssignmentExpression	"update_tid = daemonCore -> Register_Timer ( 5 , update_interval , ( TimerHandlercpp ) & Daemons :: UpdateCollector , ""Daemons::UpdateCollector()"" , this )"		3532081	0		=			
ANR	3532139	Identifier	update_tid		3532081	0					
ANR	3532140	CallExpression	"daemonCore -> Register_Timer ( 5 , update_interval , ( TimerHandlercpp ) & Daemons :: UpdateCollector , ""Daemons::UpdateCollector()"" , this )"		3532081	1					
ANR	3532141	Callee	daemonCore -> Register_Timer		3532081	0					
ANR	3532142	PtrMemberAccess	daemonCore -> Register_Timer		3532081	0					
ANR	3532143	Identifier	daemonCore		3532081	0					
ANR	3532144	Identifier	Register_Timer		3532081	1					
ANR	3532145	ArgumentList	5		3532081	1					
ANR	3532146	Argument	5		3532081	0					
ANR	3532147	PrimaryExpression	5		3532081	0					
ANR	3532148	Argument	update_interval		3532081	1					
ANR	3532149	Identifier	update_interval		3532081	0					
ANR	3532150	Argument	( TimerHandlercpp ) & Daemons :: UpdateCollector		3532081	2					
ANR	3532151	CastExpression	( TimerHandlercpp ) & Daemons :: UpdateCollector		3532081	0					
ANR	3532152	CastTarget	TimerHandlercpp		3532081	0					
ANR	3532153	UnaryOperationExpression	& Daemons :: UpdateCollector		3532081	1					
ANR	3532154	UnaryOperator	&		3532081	0					
ANR	3532155	Identifier	Daemons :: UpdateCollector		3532081	1					
ANR	3532156	Argument	"""Daemons::UpdateCollector()"""		3532081	3					
ANR	3532157	PrimaryExpression	"""Daemons::UpdateCollector()"""		3532081	0					
ANR	3532158	Argument	this		3532081	4					
ANR	3532159	Identifier	this		3532081	0					
ANR	3532160	ExpressionStatement	old_update_int = update_interval	2358:2:58950:58982	3532081	2	True				
ANR	3532161	AssignmentExpression	old_update_int = update_interval		3532081	0		=			
ANR	3532162	Identifier	old_update_int		3532081	0					
ANR	3532163	Identifier	update_interval		3532081	1					
ANR	3532164	IdentifierDeclStatement	int new_preen = ( int ) ( old_preen_int != preen_interval ) ;	2361:1:58989:59045	3532081	7	True				
ANR	3532165	IdentifierDecl	new_preen = ( int ) ( old_preen_int != preen_interval )		3532081	0					
ANR	3532166	IdentifierDeclType	int		3532081	0					
ANR	3532167	Identifier	new_preen		3532081	1					
ANR	3532168	AssignmentExpression	new_preen = ( int ) ( old_preen_int != preen_interval )		3532081	2		=			
ANR	3532169	Identifier	new_preen		3532081	0					
ANR	3532170	CastExpression	( int ) ( old_preen_int != preen_interval )		3532081	1					
ANR	3532171	CastTarget	int		3532081	0					
ANR	3532172	EqualityExpression	old_preen_int != preen_interval		3532081	1		!=			
ANR	3532173	Identifier	old_preen_int		3532081	0					
ANR	3532174	Identifier	preen_interval		3532081	1					
ANR	3532175	IdentifierDeclStatement	"int first_preen = MIN ( HOUR , preen_interval ) ;"	2362:1:59048:59093	3532081	8	True				
ANR	3532176	IdentifierDecl	"first_preen = MIN ( HOUR , preen_interval )"		3532081	0					
ANR	3532177	IdentifierDeclType	int		3532081	0					
ANR	3532178	Identifier	first_preen		3532081	1					
ANR	3532179	AssignmentExpression	"first_preen = MIN ( HOUR , preen_interval )"		3532081	2		=			
ANR	3532180	Identifier	first_preen		3532081	0					
ANR	3532181	CallExpression	"MIN ( HOUR , preen_interval )"		3532081	1					
ANR	3532182	Callee	MIN		3532081	0					
ANR	3532183	Identifier	MIN		3532081	0					
ANR	3532184	ArgumentList	HOUR		3532081	1					
ANR	3532185	Argument	HOUR		3532081	0					
ANR	3532186	Identifier	HOUR		3532081	0					
ANR	3532187	Argument	preen_interval		3532081	1					
ANR	3532188	Identifier	preen_interval		3532081	0					
ANR	3532189	IfStatement	if ( ! FS_Preen || new_preen )		3532081	9					
ANR	3532190	Condition	! FS_Preen || new_preen	2363:5:59100:59121	3532081	0	True				
ANR	3532191	OrExpression	! FS_Preen || new_preen		3532081	0		||			
ANR	3532192	UnaryOperationExpression	! FS_Preen		3532081	0					
ANR	3532193	UnaryOperator	!		3532081	0					
ANR	3532194	Identifier	FS_Preen		3532081	1					
ANR	3532195	Identifier	new_preen		3532081	1					
ANR	3532196	CompoundStatement		22:30:730:730	3532081	1					
ANR	3532197	IfStatement	if ( preen_tid != - 1 )		3532081	0					
ANR	3532198	Condition	preen_tid != - 1	2364:6:59133:59147	3532081	0	True				
ANR	3532199	EqualityExpression	preen_tid != - 1		3532081	0		!=			
ANR	3532200	Identifier	preen_tid		3532081	0					
ANR	3532201	UnaryOperationExpression	- 1		3532081	1					
ANR	3532202	UnaryOperator	-		3532081	0					
ANR	3532203	PrimaryExpression	1		3532081	1					
ANR	3532204	CompoundStatement		23:24:756:756	3532081	1					
ANR	3532205	ExpressionStatement	daemonCore -> Cancel_Timer ( preen_tid )	2365:3:59156:59193	3532081	0	True				
ANR	3532206	CallExpression	daemonCore -> Cancel_Timer ( preen_tid )		3532081	0					
ANR	3532207	Callee	daemonCore -> Cancel_Timer		3532081	0					
ANR	3532208	PtrMemberAccess	daemonCore -> Cancel_Timer		3532081	0					
ANR	3532209	Identifier	daemonCore		3532081	0					
ANR	3532210	Identifier	Cancel_Timer		3532081	1					
ANR	3532211	ArgumentList	preen_tid		3532081	1					
ANR	3532212	Argument	preen_tid		3532081	0					
ANR	3532213	Identifier	preen_tid		3532081	0					
ANR	3532214	IfStatement	if ( new_preen && FS_Preen )		3532081	10					
ANR	3532215	Condition	new_preen && FS_Preen	2368:5:59207:59227	3532081	0	True				
ANR	3532216	AndExpression	new_preen && FS_Preen		3532081	0		&&			
ANR	3532217	Identifier	new_preen		3532081	0					
ANR	3532218	Identifier	FS_Preen		3532081	1					
ANR	3532219	CompoundStatement		27:29:836:836	3532081	1					
ANR	3532220	ExpressionStatement	"preen_tid = daemonCore -> Register_Timer ( first_preen , preen_interval , run_preen , ""run_preen()"" )"	2369:2:59235:59348	3532081	0	True				
ANR	3532221	AssignmentExpression	"preen_tid = daemonCore -> Register_Timer ( first_preen , preen_interval , run_preen , ""run_preen()"" )"		3532081	0		=			
ANR	3532222	Identifier	preen_tid		3532081	0					
ANR	3532223	CallExpression	"daemonCore -> Register_Timer ( first_preen , preen_interval , run_preen , ""run_preen()"" )"		3532081	1					
ANR	3532224	Callee	daemonCore -> Register_Timer		3532081	0					
ANR	3532225	PtrMemberAccess	daemonCore -> Register_Timer		3532081	0					
ANR	3532226	Identifier	daemonCore		3532081	0					
ANR	3532227	Identifier	Register_Timer		3532081	1					
ANR	3532228	ArgumentList	first_preen		3532081	1					
ANR	3532229	Argument	first_preen		3532081	0					
ANR	3532230	Identifier	first_preen		3532081	0					
ANR	3532231	Argument	preen_interval		3532081	1					
ANR	3532232	Identifier	preen_interval		3532081	0					
ANR	3532233	Argument	run_preen		3532081	2					
ANR	3532234	Identifier	run_preen		3532081	0					
ANR	3532235	Argument	"""run_preen()"""		3532081	3					
ANR	3532236	PrimaryExpression	"""run_preen()"""		3532081	0					
ANR	3532237	ExpressionStatement	old_preen_int = preen_interval	2374:1:59354:59384	3532081	11	True				
ANR	3532238	AssignmentExpression	old_preen_int = preen_interval		3532081	0		=			
ANR	3532239	Identifier	old_preen_int		3532081	0					
ANR	3532240	Identifier	preen_interval		3532081	1					
ANR	3532241	IfStatement	if ( old_check_int != check_new_exec_interval )		3532081	12					
ANR	3532242	Condition	old_check_int != check_new_exec_interval	2376:5:59392:59431	3532081	0	True				
ANR	3532243	EqualityExpression	old_check_int != check_new_exec_interval		3532081	0		!=			
ANR	3532244	Identifier	old_check_int		3532081	0					
ANR	3532245	Identifier	check_new_exec_interval		3532081	1					
ANR	3532246	CompoundStatement		35:48:1040:1040	3532081	1					
ANR	3532247	ExpressionStatement	CancelNewExecTimer ( )	2378:2:59470:59490	3532081	0	True				
ANR	3532248	CallExpression	CancelNewExecTimer ( )		3532081	0					
ANR	3532249	Callee	CancelNewExecTimer		3532081	0					
ANR	3532250	Identifier	CancelNewExecTimer		3532081	0					
ANR	3532251	ArgumentList			3532081	1					
ANR	3532252	ExpressionStatement	StartNewExecTimer ( )	2379:2:59494:59513	3532081	1	True				
ANR	3532253	CallExpression	StartNewExecTimer ( )		3532081	0					
ANR	3532254	Callee	StartNewExecTimer		3532081	0					
ANR	3532255	Identifier	StartNewExecTimer		3532081	0					
ANR	3532256	ArgumentList			3532081	1					
ANR	3532257	ExpressionStatement	old_check_int = check_new_exec_interval	2381:1:59519:59558	3532081	13	True				
ANR	3532258	AssignmentExpression	old_check_int = check_new_exec_interval		3532081	0		=			
ANR	3532259	Identifier	old_check_int		3532081	0					
ANR	3532260	Identifier	check_new_exec_interval		3532081	1					
ANR	3532261	ReturnType	void		3532081	1					
ANR	3532262	Identifier	Daemons :: StartTimers		3532081	2					
ANR	3532263	ParameterList			3532081	3					
ANR	3532264	CFGEntryNode	ENTRY		3532081		True				
ANR	3532265	CFGExitNode	EXIT		3532081		True				
ANR	3532266	Symbol	check_new_exec_interval		3532081						
ANR	3532267	Symbol	old_update_int		3532081						
ANR	3532268	Symbol	HOUR		3532081						
ANR	3532269	Symbol	this		3532081						
ANR	3532270	Symbol	FS_Preen		3532081						
ANR	3532271	Symbol	new_preen		3532081						
ANR	3532272	Symbol	first_preen		3532081						
ANR	3532273	Symbol	MIN		3532081						
ANR	3532274	Symbol	run_preen		3532081						
ANR	3532275	Symbol	update_interval		3532081						
ANR	3532276	Symbol	* daemonCore		3532081						
ANR	3532277	Symbol	daemonCore		3532081						
ANR	3532278	Symbol	daemonCore -> Register_Timer		3532081						
ANR	3532279	Symbol	update_tid		3532081						
ANR	3532280	Symbol	& Daemons :: UpdateCollector		3532081						
ANR	3532281	Symbol	old_preen_int		3532081						
ANR	3532282	Symbol	preen_tid		3532081						
ANR	3532283	Symbol	preen_interval		3532081						
ANR	3532284	Symbol	old_check_int		3532081						
ANR	3532285	Function	Daemons :: StartNewExecTimer	2385:0:59565:60188							
ANR	3532286	FunctionDef	Daemons :: StartNewExecTimer ()		3532285	0					
ANR	3532287	CompoundStatement		2387:0:59605:60188	3532285	0					
ANR	3532288	IfStatement	if ( ! check_new_exec_interval )		3532285	0					
ANR	3532289	Condition	! check_new_exec_interval	2388:5:59612:59636	3532285	0	True				
ANR	3532290	UnaryOperationExpression	! check_new_exec_interval		3532285	0					
ANR	3532291	UnaryOperator	!		3532285	0					
ANR	3532292	Identifier	check_new_exec_interval		3532285	1					
ANR	3532293	CompoundStatement		2:33:34:34	3532285	1					
ANR	3532294	ReturnStatement	return ;	2390:2:59665:59671	3532285	0	True				
ANR	3532295	IfStatement	if ( check_new_exec_tid != - 1 )		3532285	1					
ANR	3532296	Condition	check_new_exec_tid != - 1	2392:5:59681:59704	3532285	0	True				
ANR	3532297	EqualityExpression	check_new_exec_tid != - 1		3532285	0		!=			
ANR	3532298	Identifier	check_new_exec_tid		3532285	0					
ANR	3532299	UnaryOperationExpression	- 1		3532285	1					
ANR	3532300	UnaryOperator	-		3532285	0					
ANR	3532301	PrimaryExpression	1		3532285	1					
ANR	3532302	CompoundStatement		6:32:102:102	3532285	1					
ANR	3532303	ReturnStatement	return ;	2394:2:59751:59757	3532285	0	True				
ANR	3532304	IfStatement	if ( ! StartDaemons )		3532285	2					
ANR	3532305	Condition	! StartDaemons	2396:5:59767:59780	3532285	0	True				
ANR	3532306	UnaryOperationExpression	! StartDaemons		3532285	0					
ANR	3532307	UnaryOperator	!		3532285	0					
ANR	3532308	Identifier	StartDaemons		3532285	1					
ANR	3532309	CompoundStatement		10:22:178:178	3532285	1					
ANR	3532310	ReturnStatement	return ;	2399:2:59885:59891	3532285	0	True				
ANR	3532311	ExpressionStatement	"check_new_exec_tid = daemonCore -> Register_Timer ( 5 , check_new_exec_interval , ( TimerHandlercpp ) & Daemons :: CheckForNewExecutable , ""Daemons::CheckForNewExecutable()"" , this )"	2401:1:59897:60081	3532285	3	True				
ANR	3532312	AssignmentExpression	"check_new_exec_tid = daemonCore -> Register_Timer ( 5 , check_new_exec_interval , ( TimerHandlercpp ) & Daemons :: CheckForNewExecutable , ""Daemons::CheckForNewExecutable()"" , this )"		3532285	0		=			
ANR	3532313	Identifier	check_new_exec_tid		3532285	0					
ANR	3532314	CallExpression	"daemonCore -> Register_Timer ( 5 , check_new_exec_interval , ( TimerHandlercpp ) & Daemons :: CheckForNewExecutable , ""Daemons::CheckForNewExecutable()"" , this )"		3532285	1					
ANR	3532315	Callee	daemonCore -> Register_Timer		3532285	0					
ANR	3532316	PtrMemberAccess	daemonCore -> Register_Timer		3532285	0					
ANR	3532317	Identifier	daemonCore		3532285	0					
ANR	3532318	Identifier	Register_Timer		3532285	1					
ANR	3532319	ArgumentList	5		3532285	1					
ANR	3532320	Argument	5		3532285	0					
ANR	3532321	PrimaryExpression	5		3532285	0					
ANR	3532322	Argument	check_new_exec_interval		3532285	1					
ANR	3532323	Identifier	check_new_exec_interval		3532285	0					
ANR	3532324	Argument	( TimerHandlercpp ) & Daemons :: CheckForNewExecutable		3532285	2					
ANR	3532325	CastExpression	( TimerHandlercpp ) & Daemons :: CheckForNewExecutable		3532285	0					
ANR	3532326	CastTarget	TimerHandlercpp		3532285	0					
ANR	3532327	UnaryOperationExpression	& Daemons :: CheckForNewExecutable		3532285	1					
ANR	3532328	UnaryOperator	&		3532285	0					
ANR	3532329	Identifier	Daemons :: CheckForNewExecutable		3532285	1					
ANR	3532330	Argument	"""Daemons::CheckForNewExecutable()"""		3532285	3					
ANR	3532331	PrimaryExpression	"""Daemons::CheckForNewExecutable()"""		3532285	0					
ANR	3532332	Argument	this		3532285	4					
ANR	3532333	Identifier	this		3532285	0					
ANR	3532334	IfStatement	if ( check_new_exec_tid == - 1 )		3532285	4					
ANR	3532335	Condition	check_new_exec_tid == - 1	2405:5:60088:60111	3532285	0	True				
ANR	3532336	EqualityExpression	check_new_exec_tid == - 1		3532285	0		==			
ANR	3532337	Identifier	check_new_exec_tid		3532285	0					
ANR	3532338	UnaryOperationExpression	- 1		3532285	1					
ANR	3532339	UnaryOperator	-		3532285	0					
ANR	3532340	PrimaryExpression	1		3532285	1					
ANR	3532341	CompoundStatement		19:32:509:509	3532285	1					
ANR	3532342	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR! Can't register DaemonCore timer!\\n"" )"	2406:2:60119:60183	3532285	0	True				
ANR	3532343	CallExpression	"dprintf ( D_ALWAYS , ""ERROR! Can't register DaemonCore timer!\\n"" )"		3532285	0					
ANR	3532344	Callee	dprintf		3532285	0					
ANR	3532345	Identifier	dprintf		3532285	0					
ANR	3532346	ArgumentList	D_ALWAYS		3532285	1					
ANR	3532347	Argument	D_ALWAYS		3532285	0					
ANR	3532348	Identifier	D_ALWAYS		3532285	0					
ANR	3532349	Argument	"""ERROR! Can't register DaemonCore timer!\\n"""		3532285	1					
ANR	3532350	PrimaryExpression	"""ERROR! Can't register DaemonCore timer!\\n"""		3532285	0					
ANR	3532351	ReturnType	void		3532285	1					
ANR	3532352	Identifier	Daemons :: StartNewExecTimer		3532285	2					
ANR	3532353	ParameterList			3532285	3					
ANR	3532354	CFGEntryNode	ENTRY		3532285		True				
ANR	3532355	CFGExitNode	EXIT		3532285		True				
ANR	3532356	Symbol	StartDaemons		3532285						
ANR	3532357	Symbol	check_new_exec_interval		3532285						
ANR	3532358	Symbol	& Daemons :: CheckForNewExecutable		3532285						
ANR	3532359	Symbol	* daemonCore		3532285						
ANR	3532360	Symbol	daemonCore		3532285						
ANR	3532361	Symbol	daemonCore -> Register_Timer		3532285						
ANR	3532362	Symbol	this		3532285						
ANR	3532363	Symbol	D_ALWAYS		3532285						
ANR	3532364	Symbol	check_new_exec_tid		3532285						
ANR	3532365	Function	Daemons :: CancelNewExecTimer	2411:0:60192:60349							
ANR	3532366	FunctionDef	Daemons :: CancelNewExecTimer ()		3532365	0					
ANR	3532367	CompoundStatement		2413:0:60233:60349	3532365	0					
ANR	3532368	IfStatement	if ( check_new_exec_tid != - 1 )		3532365	0					
ANR	3532369	Condition	check_new_exec_tid != - 1	2414:5:60240:60263	3532365	0	True				
ANR	3532370	EqualityExpression	check_new_exec_tid != - 1		3532365	0		!=			
ANR	3532371	Identifier	check_new_exec_tid		3532365	0					
ANR	3532372	UnaryOperationExpression	- 1		3532365	1					
ANR	3532373	UnaryOperator	-		3532365	0					
ANR	3532374	PrimaryExpression	1		3532365	1					
ANR	3532375	CompoundStatement		2:32:33:33	3532365	1					
ANR	3532376	ExpressionStatement	daemonCore -> Cancel_Timer ( check_new_exec_tid )	2415:2:60271:60317	3532365	0	True				
ANR	3532377	CallExpression	daemonCore -> Cancel_Timer ( check_new_exec_tid )		3532365	0					
ANR	3532378	Callee	daemonCore -> Cancel_Timer		3532365	0					
ANR	3532379	PtrMemberAccess	daemonCore -> Cancel_Timer		3532365	0					
ANR	3532380	Identifier	daemonCore		3532365	0					
ANR	3532381	Identifier	Cancel_Timer		3532365	1					
ANR	3532382	ArgumentList	check_new_exec_tid		3532365	1					
ANR	3532383	Argument	check_new_exec_tid		3532365	0					
ANR	3532384	Identifier	check_new_exec_tid		3532365	0					
ANR	3532385	ExpressionStatement	check_new_exec_tid = - 1	2416:2:60321:60344	3532365	1	True				
ANR	3532386	AssignmentExpression	check_new_exec_tid = - 1		3532365	0		=			
ANR	3532387	Identifier	check_new_exec_tid		3532365	0					
ANR	3532388	UnaryOperationExpression	- 1		3532365	1					
ANR	3532389	UnaryOperator	-		3532365	0					
ANR	3532390	PrimaryExpression	1		3532365	1					
ANR	3532391	ReturnType	void		3532365	1					
ANR	3532392	Identifier	Daemons :: CancelNewExecTimer		3532365	2					
ANR	3532393	ParameterList			3532365	3					
ANR	3532394	CFGEntryNode	ENTRY		3532365		True				
ANR	3532395	CFGExitNode	EXIT		3532365		True				
ANR	3532396	Symbol	daemonCore		3532365						
ANR	3532397	Symbol	check_new_exec_tid		3532365						
ANR	3532398	Function	Daemons :: Update	2424:0:60539:61454							
ANR	3532399	FunctionDef	Daemons :: Update (ClassAd * ca)		3532398	0					
ANR	3532400	CompoundStatement		2426:0:60576:61454	3532398	0					
ANR	3532401	IdentifierDeclStatement	char buf [ 128 ] ;	2427:1:60579:60592	3532398	0	True				
ANR	3532402	IdentifierDecl	buf [ 128 ]		3532398	0					
ANR	3532403	IdentifierDeclType	char [ 128 ]		3532398	0					
ANR	3532404	Identifier	buf		3532398	1					
ANR	3532405	PrimaryExpression	128		3532398	2					
ANR	3532406	IdentifierDeclStatement	"std :: map < std :: string , class daemon * > :: iterator iter ;"	2428:1:60595:60646	3532398	1	True				
ANR	3532407	IdentifierDecl	iter		3532398	0					
ANR	3532408	IdentifierDeclType	"std :: map < std :: string , class daemon * > :: iterator"		3532398	0					
ANR	3532409	Identifier	iter		3532398	1					
ANR	3532410	ForStatement	for ( iter = daemon_ptr . begin ( ) ; iter != daemon_ptr . end ( ) ; iter ++ )		3532398	2					
ANR	3532411	ForInit	iter = daemon_ptr . begin ( ) ;	2430:6:60655:60680	3532398	0	True				
ANR	3532412	AssignmentExpression	iter = daemon_ptr . begin ( )		3532398	0		=			
ANR	3532413	Identifier	iter		3532398	0					
ANR	3532414	CallExpression	daemon_ptr . begin ( )		3532398	1					
ANR	3532415	Callee	daemon_ptr . begin		3532398	0					
ANR	3532416	MemberAccess	daemon_ptr . begin		3532398	0					
ANR	3532417	Identifier	daemon_ptr		3532398	0					
ANR	3532418	Identifier	begin		3532398	1					
ANR	3532419	ArgumentList			3532398	1					
ANR	3532420	Condition	iter != daemon_ptr . end ( )	2430:33:60682:60705	3532398	1	True				
ANR	3532421	EqualityExpression	iter != daemon_ptr . end ( )		3532398	0		!=			
ANR	3532422	Identifier	iter		3532398	0					
ANR	3532423	CallExpression	daemon_ptr . end ( )		3532398	1					
ANR	3532424	Callee	daemon_ptr . end		3532398	0					
ANR	3532425	MemberAccess	daemon_ptr . end		3532398	0					
ANR	3532426	Identifier	daemon_ptr		3532398	0					
ANR	3532427	Identifier	end		3532398	1					
ANR	3532428	ArgumentList			3532398	1					
ANR	3532429	PostIncDecOperationExpression	iter ++	2430:59:60708:60713	3532398	2	True				
ANR	3532430	Identifier	iter		3532398	0					
ANR	3532431	IncDec	++		3532398	1					
ANR	3532432	CompoundStatement		5:68:140:140	3532398	3					
ANR	3532433	IfStatement	if ( iter -> second -> runs_here || iter -> second == master )		3532398	0					
ANR	3532434	Condition	iter -> second -> runs_here || iter -> second == master	2431:6:60725:60773	3532398	0	True				
ANR	3532435	OrExpression	iter -> second -> runs_here || iter -> second == master		3532398	0		||			
ANR	3532436	PtrMemberAccess	iter -> second -> runs_here		3532398	0					
ANR	3532437	PtrMemberAccess	iter -> second		3532398	0					
ANR	3532438	Identifier	iter		3532398	0					
ANR	3532439	Identifier	second		3532398	1					
ANR	3532440	Identifier	runs_here		3532398	1					
ANR	3532441	EqualityExpression	iter -> second == master		3532398	1		==			
ANR	3532442	PtrMemberAccess	iter -> second		3532398	0					
ANR	3532443	Identifier	iter		3532398	0					
ANR	3532444	Identifier	second		3532398	1					
ANR	3532445	Identifier	master		3532398	1					
ANR	3532446	CompoundStatement		6:58:200:200	3532398	1					
ANR	3532447	ExpressionStatement	"sprintf ( buf , ""%s_Timestamp = %ld"" , iter -> second -> name_in_config_file , ( long ) iter -> second -> timeStamp )"	2432:3:60782:60899	3532398	0	True				
ANR	3532448	CallExpression	"sprintf ( buf , ""%s_Timestamp = %ld"" , iter -> second -> name_in_config_file , ( long ) iter -> second -> timeStamp )"		3532398	0					
ANR	3532449	Callee	sprintf		3532398	0					
ANR	3532450	Identifier	sprintf		3532398	0					
ANR	3532451	ArgumentList	buf		3532398	1					
ANR	3532452	Argument	buf		3532398	0					
ANR	3532453	Identifier	buf		3532398	0					
ANR	3532454	Argument	"""%s_Timestamp = %ld"""		3532398	1					
ANR	3532455	PrimaryExpression	"""%s_Timestamp = %ld"""		3532398	0					
ANR	3532456	Argument	iter -> second -> name_in_config_file		3532398	2					
ANR	3532457	PtrMemberAccess	iter -> second -> name_in_config_file		3532398	0					
ANR	3532458	PtrMemberAccess	iter -> second		3532398	0					
ANR	3532459	Identifier	iter		3532398	0					
ANR	3532460	Identifier	second		3532398	1					
ANR	3532461	Identifier	name_in_config_file		3532398	1					
ANR	3532462	Argument	( long ) iter -> second -> timeStamp		3532398	3					
ANR	3532463	CastExpression	( long ) iter -> second -> timeStamp		3532398	0					
ANR	3532464	CastTarget	long		3532398	0					
ANR	3532465	PtrMemberAccess	iter -> second -> timeStamp		3532398	1					
ANR	3532466	PtrMemberAccess	iter -> second		3532398	0					
ANR	3532467	Identifier	iter		3532398	0					
ANR	3532468	Identifier	second		3532398	1					
ANR	3532469	Identifier	timeStamp		3532398	1					
ANR	3532470	ExpressionStatement	ca -> Insert ( buf )	2435:3:60904:60921	3532398	1	True				
ANR	3532471	CallExpression	ca -> Insert ( buf )		3532398	0					
ANR	3532472	Callee	ca -> Insert		3532398	0					
ANR	3532473	PtrMemberAccess	ca -> Insert		3532398	0					
ANR	3532474	Identifier	ca		3532398	0					
ANR	3532475	Identifier	Insert		3532398	1					
ANR	3532476	ArgumentList	buf		3532398	1					
ANR	3532477	Argument	buf		3532398	0					
ANR	3532478	Identifier	buf		3532398	0					
ANR	3532479	IfStatement	if ( iter -> second -> pid )		3532398	2					
ANR	3532480	Condition	iter -> second -> pid	2436:7:60930:60946	3532398	0	True				
ANR	3532481	PtrMemberAccess	iter -> second -> pid		3532398	0					
ANR	3532482	PtrMemberAccess	iter -> second		3532398	0					
ANR	3532483	Identifier	iter		3532398	0					
ANR	3532484	Identifier	second		3532398	1					
ANR	3532485	Identifier	pid		3532398	1					
ANR	3532486	CompoundStatement		11:27:373:373	3532398	1					
ANR	3532487	ExpressionStatement	"sprintf ( buf , ""%s_StartTime = %ld"" , iter -> second -> name_in_config_file , ( long ) iter -> second -> startTime )"	2437:4:60956:61075	3532398	0	True				
ANR	3532488	CallExpression	"sprintf ( buf , ""%s_StartTime = %ld"" , iter -> second -> name_in_config_file , ( long ) iter -> second -> startTime )"		3532398	0					
ANR	3532489	Callee	sprintf		3532398	0					
ANR	3532490	Identifier	sprintf		3532398	0					
ANR	3532491	ArgumentList	buf		3532398	1					
ANR	3532492	Argument	buf		3532398	0					
ANR	3532493	Identifier	buf		3532398	0					
ANR	3532494	Argument	"""%s_StartTime = %ld"""		3532398	1					
ANR	3532495	PrimaryExpression	"""%s_StartTime = %ld"""		3532398	0					
ANR	3532496	Argument	iter -> second -> name_in_config_file		3532398	2					
ANR	3532497	PtrMemberAccess	iter -> second -> name_in_config_file		3532398	0					
ANR	3532498	PtrMemberAccess	iter -> second		3532398	0					
ANR	3532499	Identifier	iter		3532398	0					
ANR	3532500	Identifier	second		3532398	1					
ANR	3532501	Identifier	name_in_config_file		3532398	1					
ANR	3532502	Argument	( long ) iter -> second -> startTime		3532398	3					
ANR	3532503	CastExpression	( long ) iter -> second -> startTime		3532398	0					
ANR	3532504	CastTarget	long		3532398	0					
ANR	3532505	PtrMemberAccess	iter -> second -> startTime		3532398	1					
ANR	3532506	PtrMemberAccess	iter -> second		3532398	0					
ANR	3532507	Identifier	iter		3532398	0					
ANR	3532508	Identifier	second		3532398	1					
ANR	3532509	Identifier	startTime		3532398	1					
ANR	3532510	ExpressionStatement	ca -> Insert ( buf )	2440:4:61081:61098	3532398	1	True				
ANR	3532511	CallExpression	ca -> Insert ( buf )		3532398	0					
ANR	3532512	Callee	ca -> Insert		3532398	0					
ANR	3532513	PtrMemberAccess	ca -> Insert		3532398	0					
ANR	3532514	Identifier	ca		3532398	0					
ANR	3532515	Identifier	Insert		3532398	1					
ANR	3532516	ArgumentList	buf		3532398	1					
ANR	3532517	Argument	buf		3532398	0					
ANR	3532518	Identifier	buf		3532398	0					
ANR	3532519	ElseStatement	else		3532398	0					
ANR	3532520	CompoundStatement		16:10:533:533	3532398	0					
ANR	3532521	ExpressionStatement	"sprintf ( buf , ""%s_StartTime = 0"" , iter -> second -> name_in_config_file )"	2443:4:61169:61246	3532398	0	True				
ANR	3532522	CallExpression	"sprintf ( buf , ""%s_StartTime = 0"" , iter -> second -> name_in_config_file )"		3532398	0					
ANR	3532523	Callee	sprintf		3532398	0					
ANR	3532524	Identifier	sprintf		3532398	0					
ANR	3532525	ArgumentList	buf		3532398	1					
ANR	3532526	Argument	buf		3532398	0					
ANR	3532527	Identifier	buf		3532398	0					
ANR	3532528	Argument	"""%s_StartTime = 0"""		3532398	1					
ANR	3532529	PrimaryExpression	"""%s_StartTime = 0"""		3532398	0					
ANR	3532530	Argument	iter -> second -> name_in_config_file		3532398	2					
ANR	3532531	PtrMemberAccess	iter -> second -> name_in_config_file		3532398	0					
ANR	3532532	PtrMemberAccess	iter -> second		3532398	0					
ANR	3532533	Identifier	iter		3532398	0					
ANR	3532534	Identifier	second		3532398	1					
ANR	3532535	Identifier	name_in_config_file		3532398	1					
ANR	3532536	ExpressionStatement	ca -> Insert ( buf )	2445:4:61252:61269	3532398	1	True				
ANR	3532537	CallExpression	ca -> Insert ( buf )		3532398	0					
ANR	3532538	Callee	ca -> Insert		3532398	0					
ANR	3532539	PtrMemberAccess	ca -> Insert		3532398	0					
ANR	3532540	Identifier	ca		3532398	0					
ANR	3532541	Identifier	Insert		3532398	1					
ANR	3532542	ArgumentList	buf		3532398	1					
ANR	3532543	Argument	buf		3532398	0					
ANR	3532544	Identifier	buf		3532398	0					
ANR	3532545	ExpressionStatement	"ad -> Assign ( ATTR_MASTER_IP_ADDR , daemonCore -> InfoCommandSinfulString ( ) )"	2451:1:61296:61366	3532398	3	True				
ANR	3532546	CallExpression	"ad -> Assign ( ATTR_MASTER_IP_ADDR , daemonCore -> InfoCommandSinfulString ( ) )"		3532398	0					
ANR	3532547	Callee	ad -> Assign		3532398	0					
ANR	3532548	PtrMemberAccess	ad -> Assign		3532398	0					
ANR	3532549	Identifier	ad		3532398	0					
ANR	3532550	Identifier	Assign		3532398	1					
ANR	3532551	ArgumentList	ATTR_MASTER_IP_ADDR		3532398	1					
ANR	3532552	Argument	ATTR_MASTER_IP_ADDR		3532398	0					
ANR	3532553	Identifier	ATTR_MASTER_IP_ADDR		3532398	0					
ANR	3532554	Argument	daemonCore -> InfoCommandSinfulString ( )		3532398	1					
ANR	3532555	CallExpression	daemonCore -> InfoCommandSinfulString ( )		3532398	0					
ANR	3532556	Callee	daemonCore -> InfoCommandSinfulString		3532398	0					
ANR	3532557	PtrMemberAccess	daemonCore -> InfoCommandSinfulString		3532398	0					
ANR	3532558	Identifier	daemonCore		3532398	0					
ANR	3532559	Identifier	InfoCommandSinfulString		3532398	1					
ANR	3532560	ArgumentList			3532398	1					
ANR	3532561	ExpressionStatement	daemonCore -> publish ( ad )	2454:1:61425:61450	3532398	4	True				
ANR	3532562	CallExpression	daemonCore -> publish ( ad )		3532398	0					
ANR	3532563	Callee	daemonCore -> publish		3532398	0					
ANR	3532564	PtrMemberAccess	daemonCore -> publish		3532398	0					
ANR	3532565	Identifier	daemonCore		3532398	0					
ANR	3532566	Identifier	publish		3532398	1					
ANR	3532567	ArgumentList	ad		3532398	1					
ANR	3532568	Argument	ad		3532398	0					
ANR	3532569	Identifier	ad		3532398	0					
ANR	3532570	ReturnType	void		3532398	1					
ANR	3532571	Identifier	Daemons :: Update		3532398	2					
ANR	3532572	ParameterList	ClassAd * ca		3532398	3					
ANR	3532573	Parameter	ClassAd * ca	2425:17:60561:60571	3532398	0	True				
ANR	3532574	ParameterType	ClassAd *		3532398	0					
ANR	3532575	Identifier	ca		3532398	1					
ANR	3532576	CFGEntryNode	ENTRY		3532398		True				
ANR	3532577	CFGExitNode	EXIT		3532398		True				
ANR	3532578	Symbol	iter -> second -> pid		3532398						
ANR	3532579	Symbol	daemonCore -> InfoCommandSinfulString		3532398						
ANR	3532580	Symbol	ad		3532398						
ANR	3532581	Symbol	iter		3532398						
ANR	3532582	Symbol	iter -> second -> startTime		3532398						
ANR	3532583	Symbol	master		3532398						
ANR	3532584	Symbol	* iter -> second		3532398						
ANR	3532585	Symbol	iter -> second -> runs_here		3532398						
ANR	3532586	Symbol	* iter		3532398						
ANR	3532587	Symbol	ATTR_MASTER_IP_ADDR		3532398						
ANR	3532588	Symbol	buf		3532398						
ANR	3532589	Symbol	daemon_ptr		3532398						
ANR	3532590	Symbol	daemon_ptr . begin		3532398						
ANR	3532591	Symbol	iter -> second -> timeStamp		3532398						
ANR	3532592	Symbol	* daemonCore		3532398						
ANR	3532593	Symbol	daemonCore		3532398						
ANR	3532594	Symbol	daemon_ptr . end		3532398						
ANR	3532595	Symbol	* * iter		3532398						
ANR	3532596	Symbol	iter -> second -> name_in_config_file		3532398						
ANR	3532597	Symbol	ca		3532398						
ANR	3532598	Symbol	iter -> second		3532398						
ANR	3532599	Function	Daemons :: UpdateCollector	2458:0:61458:62209							
ANR	3532600	FunctionDef	Daemons :: UpdateCollector ()		3532599	0					
ANR	3532601	CompoundStatement		2460:0:61490:62209	3532599	0					
ANR	3532602	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""enter Daemons::UpdateCollector\\n"" )"	2461:1:61493:61549	3532599	0	True				
ANR	3532603	CallExpression	"dprintf ( D_FULLDEBUG , ""enter Daemons::UpdateCollector\\n"" )"		3532599	0					
ANR	3532604	Callee	dprintf		3532599	0					
ANR	3532605	Identifier	dprintf		3532599	0					
ANR	3532606	ArgumentList	D_FULLDEBUG		3532599	1					
ANR	3532607	Argument	D_FULLDEBUG		3532599	0					
ANR	3532608	Identifier	D_FULLDEBUG		3532599	0					
ANR	3532609	Argument	"""enter Daemons::UpdateCollector\\n"""		3532599	1					
ANR	3532610	PrimaryExpression	"""enter Daemons::UpdateCollector\\n"""		3532599	0					
ANR	3532611	ExpressionStatement	Update ( ad )	2463:1:61553:61563	3532599	1	True				
ANR	3532612	CallExpression	Update ( ad )		3532599	0					
ANR	3532613	Callee	Update		3532599	0					
ANR	3532614	Identifier	Update		3532599	0					
ANR	3532615	ArgumentList	ad		3532599	1					
ANR	3532616	Argument	ad		3532599	0					
ANR	3532617	Identifier	ad		3532599	0					
ANR	3532618	ExpressionStatement	daemonCore -> publish ( ad )	2464:4:61569:61592	3532599	2	True				
ANR	3532619	CallExpression	daemonCore -> publish ( ad )		3532599	0					
ANR	3532620	Callee	daemonCore -> publish		3532599	0					
ANR	3532621	PtrMemberAccess	daemonCore -> publish		3532599	0					
ANR	3532622	Identifier	daemonCore		3532599	0					
ANR	3532623	Identifier	publish		3532599	1					
ANR	3532624	ArgumentList	ad		3532599	1					
ANR	3532625	Argument	ad		3532599	0					
ANR	3532626	Identifier	ad		3532599	0					
ANR	3532627	ExpressionStatement	daemonCore -> dc_stats . Publish ( * ad )	2465:4:61598:61631	3532599	3	True				
ANR	3532628	CallExpression	daemonCore -> dc_stats . Publish ( * ad )		3532599	0					
ANR	3532629	Callee	daemonCore -> dc_stats . Publish		3532599	0					
ANR	3532630	MemberAccess	daemonCore -> dc_stats . Publish		3532599	0					
ANR	3532631	PtrMemberAccess	daemonCore -> dc_stats		3532599	0					
ANR	3532632	Identifier	daemonCore		3532599	0					
ANR	3532633	Identifier	dc_stats		3532599	1					
ANR	3532634	Identifier	Publish		3532599	1					
ANR	3532635	ArgumentList	* ad		3532599	1					
ANR	3532636	Argument	* ad		3532599	0					
ANR	3532637	UnaryOperationExpression	* ad		3532599	0					
ANR	3532638	UnaryOperator	*		3532599	0					
ANR	3532639	Identifier	ad		3532599	1					
ANR	3532640	ExpressionStatement	daemonCore -> monitor_data . ExportData ( ad )	2466:4:61637:61676	3532599	4	True				
ANR	3532641	CallExpression	daemonCore -> monitor_data . ExportData ( ad )		3532599	0					
ANR	3532642	Callee	daemonCore -> monitor_data . ExportData		3532599	0					
ANR	3532643	MemberAccess	daemonCore -> monitor_data . ExportData		3532599	0					
ANR	3532644	PtrMemberAccess	daemonCore -> monitor_data		3532599	0					
ANR	3532645	Identifier	daemonCore		3532599	0					
ANR	3532646	Identifier	monitor_data		3532599	1					
ANR	3532647	Identifier	ExportData		3532599	1					
ANR	3532648	ArgumentList	ad		3532599	1					
ANR	3532649	Argument	ad		3532599	0					
ANR	3532650	Identifier	ad		3532599	0					
ANR	3532651	ExpressionStatement	"daemonCore -> sendUpdates ( UPDATE_MASTER_AD , ad , NULL , true )"	2467:1:61679:61736	3532599	5	True				
ANR	3532652	CallExpression	"daemonCore -> sendUpdates ( UPDATE_MASTER_AD , ad , NULL , true )"		3532599	0					
ANR	3532653	Callee	daemonCore -> sendUpdates		3532599	0					
ANR	3532654	PtrMemberAccess	daemonCore -> sendUpdates		3532599	0					
ANR	3532655	Identifier	daemonCore		3532599	0					
ANR	3532656	Identifier	sendUpdates		3532599	1					
ANR	3532657	ArgumentList	UPDATE_MASTER_AD		3532599	1					
ANR	3532658	Argument	UPDATE_MASTER_AD		3532599	0					
ANR	3532659	Identifier	UPDATE_MASTER_AD		3532599	0					
ANR	3532660	Argument	ad		3532599	1					
ANR	3532661	Identifier	ad		3532599	0					
ANR	3532662	Argument	NULL		3532599	2					
ANR	3532663	Identifier	NULL		3532599	0					
ANR	3532664	Argument	true		3532599	3					
ANR	3532665	Identifier	true		3532599	0					
ANR	3532666	ExpressionStatement	MasterPluginManager :: Update ( ad )	2471:1:61837:61868	3532599	6	True				
ANR	3532667	CallExpression	MasterPluginManager :: Update ( ad )		3532599	0					
ANR	3532668	Callee	MasterPluginManager :: Update		3532599	0					
ANR	3532669	Identifier	MasterPluginManager :: Update		3532599	0					
ANR	3532670	ArgumentList	ad		3532599	1					
ANR	3532671	Argument	ad		3532599	0					
ANR	3532672	Identifier	ad		3532599	0					
ANR	3532673	ExpressionStatement	"FILESQL :: daemonAdInsert ( ad , ""MasterAd"" , FILEObj , prevLHF )"	2476:1:61948:62005	3532599	7	True				
ANR	3532674	CallExpression	"FILESQL :: daemonAdInsert ( ad , ""MasterAd"" , FILEObj , prevLHF )"		3532599	0					
ANR	3532675	Callee	FILESQL :: daemonAdInsert		3532599	0					
ANR	3532676	Identifier	FILESQL :: daemonAdInsert		3532599	0					
ANR	3532677	ArgumentList	ad		3532599	1					
ANR	3532678	Argument	ad		3532599	0					
ANR	3532679	Identifier	ad		3532599	0					
ANR	3532680	Argument	"""MasterAd"""		3532599	1					
ANR	3532681	PrimaryExpression	"""MasterAd"""		3532599	0					
ANR	3532682	Argument	FILEObj		3532599	2					
ANR	3532683	Identifier	FILEObj		3532599	0					
ANR	3532684	Argument	prevLHF		3532599	3					
ANR	3532685	Identifier	prevLHF		3532599	0					
ANR	3532686	ExpressionStatement	"daemonCore -> Reset_Timer ( update_tid , update_interval , update_interval )"	2479:1:62075:62146	3532599	8	True				
ANR	3532687	CallExpression	"daemonCore -> Reset_Timer ( update_tid , update_interval , update_interval )"		3532599	0					
ANR	3532688	Callee	daemonCore -> Reset_Timer		3532599	0					
ANR	3532689	PtrMemberAccess	daemonCore -> Reset_Timer		3532599	0					
ANR	3532690	Identifier	daemonCore		3532599	0					
ANR	3532691	Identifier	Reset_Timer		3532599	1					
ANR	3532692	ArgumentList	update_tid		3532599	1					
ANR	3532693	Argument	update_tid		3532599	0					
ANR	3532694	Identifier	update_tid		3532599	0					
ANR	3532695	Argument	update_interval		3532599	1					
ANR	3532696	Identifier	update_interval		3532599	0					
ANR	3532697	Argument	update_interval		3532599	2					
ANR	3532698	Identifier	update_interval		3532599	0					
ANR	3532699	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""exit Daemons::UpdateCollector\\n"" )"	2481:1:62150:62207	3532599	9	True				
ANR	3532700	CallExpression	"dprintf ( D_FULLDEBUG , ""exit Daemons::UpdateCollector\\n"" )"		3532599	0					
ANR	3532701	Callee	dprintf		3532599	0					
ANR	3532702	Identifier	dprintf		3532599	0					
ANR	3532703	ArgumentList	D_FULLDEBUG		3532599	1					
ANR	3532704	Argument	D_FULLDEBUG		3532599	0					
ANR	3532705	Identifier	D_FULLDEBUG		3532599	0					
ANR	3532706	Argument	"""exit Daemons::UpdateCollector\\n"""		3532599	1					
ANR	3532707	PrimaryExpression	"""exit Daemons::UpdateCollector\\n"""		3532599	0					
ANR	3532708	ReturnType	void		3532599	1					
ANR	3532709	Identifier	Daemons :: UpdateCollector		3532599	2					
ANR	3532710	ParameterList			3532599	3					
ANR	3532711	CFGEntryNode	ENTRY		3532599		True				
ANR	3532712	CFGExitNode	EXIT		3532599		True				
ANR	3532713	Symbol	ad		3532599						
ANR	3532714	Symbol	NULL		3532599						
ANR	3532715	Symbol	UPDATE_MASTER_AD		3532599						
ANR	3532716	Symbol	D_FULLDEBUG		3532599						
ANR	3532717	Symbol	* ad		3532599						
ANR	3532718	Symbol	FILEObj		3532599						
ANR	3532719	Symbol	daemonCore -> dc_stats		3532599						
ANR	3532720	Symbol	* daemonCore		3532599						
ANR	3532721	Symbol	update_interval		3532599						
ANR	3532722	Symbol	daemonCore		3532599						
ANR	3532723	Symbol	daemonCore -> monitor_data		3532599						
ANR	3532724	Symbol	true		3532599						
ANR	3532725	Symbol	update_tid		3532599						
ANR	3532726	Symbol	prevLHF		3532599						
ANR	3532727	Function	Daemons :: FindDaemon	2485:0:62213:62469							
ANR	3532728	FunctionDef	Daemons :: FindDaemon (daemon_t dt)		3532727	0					
ANR	3532729	CompoundStatement		2487:0:62262:62469	3532727	0					
ANR	3532730	IdentifierDeclStatement	"std :: map < std :: string , class daemon * > :: iterator iter ;"	2488:1:62265:62316	3532727	0	True				
ANR	3532731	IdentifierDecl	iter		3532727	0					
ANR	3532732	IdentifierDeclType	"std :: map < std :: string , class daemon * > :: iterator"		3532727	0					
ANR	3532733	Identifier	iter		3532727	1					
ANR	3532734	ForStatement	for ( iter = daemon_ptr . begin ( ) ; iter != daemon_ptr . end ( ) ; iter ++ )		3532727	1					
ANR	3532735	ForInit	iter = daemon_ptr . begin ( ) ;	2490:6:62325:62350	3532727	0	True				
ANR	3532736	AssignmentExpression	iter = daemon_ptr . begin ( )		3532727	0		=			
ANR	3532737	Identifier	iter		3532727	0					
ANR	3532738	CallExpression	daemon_ptr . begin ( )		3532727	1					
ANR	3532739	Callee	daemon_ptr . begin		3532727	0					
ANR	3532740	MemberAccess	daemon_ptr . begin		3532727	0					
ANR	3532741	Identifier	daemon_ptr		3532727	0					
ANR	3532742	Identifier	begin		3532727	1					
ANR	3532743	ArgumentList			3532727	1					
ANR	3532744	Condition	iter != daemon_ptr . end ( )	2490:33:62352:62375	3532727	1	True				
ANR	3532745	EqualityExpression	iter != daemon_ptr . end ( )		3532727	0		!=			
ANR	3532746	Identifier	iter		3532727	0					
ANR	3532747	CallExpression	daemon_ptr . end ( )		3532727	1					
ANR	3532748	Callee	daemon_ptr . end		3532727	0					
ANR	3532749	MemberAccess	daemon_ptr . end		3532727	0					
ANR	3532750	Identifier	daemon_ptr		3532727	0					
ANR	3532751	Identifier	end		3532727	1					
ANR	3532752	ArgumentList			3532727	1					
ANR	3532753	PostIncDecOperationExpression	iter ++	2490:59:62378:62383	3532727	2	True				
ANR	3532754	Identifier	iter		3532727	0					
ANR	3532755	IncDec	++		3532727	1					
ANR	3532756	CompoundStatement		4:68:124:124	3532727	3					
ANR	3532757	IfStatement	if ( iter -> second -> type == dt )		3532727	0					
ANR	3532758	Condition	iter -> second -> type == dt	2491:6:62395:62418	3532727	0	True				
ANR	3532759	EqualityExpression	iter -> second -> type == dt		3532727	0		==			
ANR	3532760	PtrMemberAccess	iter -> second -> type		3532727	0					
ANR	3532761	PtrMemberAccess	iter -> second		3532727	0					
ANR	3532762	Identifier	iter		3532727	0					
ANR	3532763	Identifier	second		3532727	1					
ANR	3532764	Identifier	type		3532727	1					
ANR	3532765	Identifier	dt		3532727	1					
ANR	3532766	CompoundStatement		5:33:159:159	3532727	1					
ANR	3532767	ReturnStatement	return iter -> second ;	2492:3:62427:62446	3532727	0	True				
ANR	3532768	PtrMemberAccess	iter -> second		3532727	0					
ANR	3532769	Identifier	iter		3532727	0					
ANR	3532770	Identifier	second		3532727	1					
ANR	3532771	ReturnStatement	return NULL ;	2495:1:62456:62467	3532727	2	True				
ANR	3532772	Identifier	NULL		3532727	0					
ANR	3532773	ReturnType	class daemon *		3532727	1					
ANR	3532774	Identifier	Daemons :: FindDaemon		3532727	2					
ANR	3532775	ParameterList	daemon_t dt		3532727	3					
ANR	3532776	Parameter	daemon_t dt	2486:21:62248:62258	3532727	0	True				
ANR	3532777	ParameterType	daemon_t		3532727	0					
ANR	3532778	Identifier	dt		3532727	1					
ANR	3532779	CFGEntryNode	ENTRY		3532727		True				
ANR	3532780	CFGExitNode	EXIT		3532727		True				
ANR	3532781	Symbol	dt		3532727						
ANR	3532782	Symbol	* iter -> second		3532727						
ANR	3532783	Symbol	* iter		3532727						
ANR	3532784	Symbol	daemon_ptr		3532727						
ANR	3532785	Symbol	daemon_ptr . begin		3532727						
ANR	3532786	Symbol	NULL		3532727						
ANR	3532787	Symbol	iter		3532727						
ANR	3532788	Symbol	daemon_ptr . end		3532727						
ANR	3532789	Symbol	iter -> second -> type		3532727						
ANR	3532790	Symbol	* * iter		3532727						
ANR	3532791	Symbol	iter -> second		3532727						
ANR	3532792	Function	Daemons :: CancelRestartTimers	2499:0:62473:63015							
ANR	3532793	FunctionDef	Daemons :: CancelRestartTimers ()		3532792	0					
ANR	3532794	CompoundStatement		2501:0:62515:63015	3532792	0					
ANR	3532795	IdentifierDeclStatement	"std :: map < std :: string , class daemon * > :: iterator iter ;"	2502:1:62518:62569	3532792	0	True				
ANR	3532796	IdentifierDecl	iter		3532792	0					
ANR	3532797	IdentifierDeclType	"std :: map < std :: string , class daemon * > :: iterator"		3532792	0					
ANR	3532798	Identifier	iter		3532792	1					
ANR	3532799	IfStatement	if ( check_new_exec_tid != - 1 )		3532792	1					
ANR	3532800	Condition	check_new_exec_tid != - 1	2505:5:62641:62664	3532792	0	True				
ANR	3532801	EqualityExpression	check_new_exec_tid != - 1		3532792	0		!=			
ANR	3532802	Identifier	check_new_exec_tid		3532792	0					
ANR	3532803	UnaryOperationExpression	- 1		3532792	1					
ANR	3532804	UnaryOperator	-		3532792	0					
ANR	3532805	PrimaryExpression	1		3532792	1					
ANR	3532806	CompoundStatement		5:32:152:152	3532792	1					
ANR	3532807	ExpressionStatement	daemonCore -> Cancel_Timer ( check_new_exec_tid )	2506:2:62672:62718	3532792	0	True				
ANR	3532808	CallExpression	daemonCore -> Cancel_Timer ( check_new_exec_tid )		3532792	0					
ANR	3532809	Callee	daemonCore -> Cancel_Timer		3532792	0					
ANR	3532810	PtrMemberAccess	daemonCore -> Cancel_Timer		3532792	0					
ANR	3532811	Identifier	daemonCore		3532792	0					
ANR	3532812	Identifier	Cancel_Timer		3532792	1					
ANR	3532813	ArgumentList	check_new_exec_tid		3532792	1					
ANR	3532814	Argument	check_new_exec_tid		3532792	0					
ANR	3532815	Identifier	check_new_exec_tid		3532792	0					
ANR	3532816	ExpressionStatement	check_new_exec_tid = - 1	2507:2:62722:62745	3532792	1	True				
ANR	3532817	AssignmentExpression	check_new_exec_tid = - 1		3532792	0		=			
ANR	3532818	Identifier	check_new_exec_tid		3532792	0					
ANR	3532819	UnaryOperationExpression	- 1		3532792	1					
ANR	3532820	UnaryOperator	-		3532792	0					
ANR	3532821	PrimaryExpression	1		3532792	1					
ANR	3532822	IfStatement	if ( preen_tid != - 1 )		3532792	2					
ANR	3532823	Condition	preen_tid != - 1	2509:5:62755:62769	3532792	0	True				
ANR	3532824	EqualityExpression	preen_tid != - 1		3532792	0		!=			
ANR	3532825	Identifier	preen_tid		3532792	0					
ANR	3532826	UnaryOperationExpression	- 1		3532792	1					
ANR	3532827	UnaryOperator	-		3532792	0					
ANR	3532828	PrimaryExpression	1		3532792	1					
ANR	3532829	CompoundStatement		9:23:257:257	3532792	1					
ANR	3532830	ExpressionStatement	daemonCore -> Cancel_Timer ( preen_tid )	2510:2:62777:62814	3532792	0	True				
ANR	3532831	CallExpression	daemonCore -> Cancel_Timer ( preen_tid )		3532792	0					
ANR	3532832	Callee	daemonCore -> Cancel_Timer		3532792	0					
ANR	3532833	PtrMemberAccess	daemonCore -> Cancel_Timer		3532792	0					
ANR	3532834	Identifier	daemonCore		3532792	0					
ANR	3532835	Identifier	Cancel_Timer		3532792	1					
ANR	3532836	ArgumentList	preen_tid		3532792	1					
ANR	3532837	Argument	preen_tid		3532792	0					
ANR	3532838	Identifier	preen_tid		3532792	0					
ANR	3532839	ExpressionStatement	preen_tid = - 1	2511:2:62818:62832	3532792	1	True				
ANR	3532840	AssignmentExpression	preen_tid = - 1		3532792	0		=			
ANR	3532841	Identifier	preen_tid		3532792	0					
ANR	3532842	UnaryOperationExpression	- 1		3532792	1					
ANR	3532843	UnaryOperator	-		3532792	0					
ANR	3532844	PrimaryExpression	1		3532792	1					
ANR	3532845	ForStatement	for ( iter = daemon_ptr . begin ( ) ; iter != daemon_ptr . end ( ) ; iter ++ )		3532792	3					
ANR	3532846	ForInit	iter = daemon_ptr . begin ( ) ;	2515:6:62909:62934	3532792	0	True				
ANR	3532847	AssignmentExpression	iter = daemon_ptr . begin ( )		3532792	0		=			
ANR	3532848	Identifier	iter		3532792	0					
ANR	3532849	CallExpression	daemon_ptr . begin ( )		3532792	1					
ANR	3532850	Callee	daemon_ptr . begin		3532792	0					
ANR	3532851	MemberAccess	daemon_ptr . begin		3532792	0					
ANR	3532852	Identifier	daemon_ptr		3532792	0					
ANR	3532853	Identifier	begin		3532792	1					
ANR	3532854	ArgumentList			3532792	1					
ANR	3532855	Condition	iter != daemon_ptr . end ( )	2515:33:62936:62959	3532792	1	True				
ANR	3532856	EqualityExpression	iter != daemon_ptr . end ( )		3532792	0		!=			
ANR	3532857	Identifier	iter		3532792	0					
ANR	3532858	CallExpression	daemon_ptr . end ( )		3532792	1					
ANR	3532859	Callee	daemon_ptr . end		3532792	0					
ANR	3532860	MemberAccess	daemon_ptr . end		3532792	0					
ANR	3532861	Identifier	daemon_ptr		3532792	0					
ANR	3532862	Identifier	end		3532792	1					
ANR	3532863	ArgumentList			3532792	1					
ANR	3532864	PostIncDecOperationExpression	iter ++	2515:59:62962:62967	3532792	2	True				
ANR	3532865	Identifier	iter		3532792	0					
ANR	3532866	IncDec	++		3532792	1					
ANR	3532867	CompoundStatement		15:68:455:455	3532792	3					
ANR	3532868	ExpressionStatement	iter -> second -> CancelRestartTimers ( )	2516:2:62975:63010	3532792	0	True				
ANR	3532869	CallExpression	iter -> second -> CancelRestartTimers ( )		3532792	0					
ANR	3532870	Callee	iter -> second -> CancelRestartTimers		3532792	0					
ANR	3532871	PtrMemberAccess	iter -> second -> CancelRestartTimers		3532792	0					
ANR	3532872	PtrMemberAccess	iter -> second		3532792	0					
ANR	3532873	Identifier	iter		3532792	0					
ANR	3532874	Identifier	second		3532792	1					
ANR	3532875	Identifier	CancelRestartTimers		3532792	1					
ANR	3532876	ArgumentList			3532792	1					
ANR	3532877	ReturnType	void		3532792	1					
ANR	3532878	Identifier	Daemons :: CancelRestartTimers		3532792	2					
ANR	3532879	ParameterList			3532792	3					
ANR	3532880	CFGEntryNode	ENTRY		3532792		True				
ANR	3532881	CFGExitNode	EXIT		3532792		True				
ANR	3532882	Symbol	* iter		3532792						
ANR	3532883	Symbol	daemon_ptr		3532792						
ANR	3532884	Symbol	daemon_ptr . begin		3532792						
ANR	3532885	Symbol	daemonCore		3532792						
ANR	3532886	Symbol	iter		3532792						
ANR	3532887	Symbol	daemon_ptr . end		3532792						
ANR	3532888	Symbol	preen_tid		3532792						
ANR	3532889	Symbol	check_new_exec_tid		3532792						
ANR	3532890	Symbol	iter -> second		3532792						
