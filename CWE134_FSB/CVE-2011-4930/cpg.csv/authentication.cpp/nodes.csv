command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	644488	File	data/converged/CVE-2011-4930_htcondor/authentication.cpp								
ANR	644489	DeclStmt									
ANR	644490	Decl							MapFile	MapFile *	Authentication :: global_map_file
ANR	644491	DeclStmt									
ANR	644492	Decl							bool	bool	Authentication :: global_map_file_load_attempted
ANR	644493	DeclStmt									
ANR	644494	Decl							bool	bool	Authentication :: globus_activated
ANR	644495	DeclStmt									
ANR	644496	Decl							char const	char const *	UNMAPPED_DOMAIN
ANR	644497	DeclStmt									
ANR	644498	Decl							char const	char const *	MATCHSESSION_DOMAIN
ANR	644499	DeclStmt									
ANR	644500	Decl							char const	char const *	UNAUTHENTICATED_FQU
ANR	644501	DeclStmt									
ANR	644502	Decl							char const	char const *	UNAUTHENTICATED_USER
ANR	644503	DeclStmt									
ANR	644504	Decl							char const	char const *	EXECUTE_SIDE_MATCHSESSION_FQU
ANR	644505	DeclStmt									
ANR	644506	Decl							char const	char const *	SUBMIT_SIDE_MATCHSESSION_FQU
ANR	644507	DeclStmt									
ANR	644508	Decl							char const	char const *	CONDOR_CHILD_FQU
ANR	644509	DeclStmt									
ANR	644510	Decl							char const	char const *	CONDOR_PARENT_FQU
ANR	644511	Function	Authentication :: Authentication	64:0:2153:2453							
ANR	644512	FunctionDef	Authentication :: Authentication (ReliSock * sock)		644511	0					
ANR	644513	CompoundStatement		65:0:2202:2453	644511	0					
ANR	644514	ExpressionStatement	mySock = sock	68:1:2332:2358	644511	0	True				
ANR	644515	AssignmentExpression	mySock = sock		644511	0		=			
ANR	644516	Identifier	mySock		644511	0					
ANR	644517	Identifier	sock		644511	1					
ANR	644518	ExpressionStatement	auth_status = CAUTH_NONE	69:1:2361:2393	644511	1	True				
ANR	644519	AssignmentExpression	auth_status = CAUTH_NONE		644511	0		=			
ANR	644520	Identifier	auth_status		644511	0					
ANR	644521	Identifier	CAUTH_NONE		644511	1					
ANR	644522	ExpressionStatement	method_used = NULL	70:1:2396:2422	644511	2	True				
ANR	644523	AssignmentExpression	method_used = NULL		644511	0		=			
ANR	644524	Identifier	method_used		644511	0					
ANR	644525	Identifier	NULL		644511	1					
ANR	644526	ExpressionStatement	authenticator_ = NULL	71:1:2425:2451	644511	3	True				
ANR	644527	AssignmentExpression	authenticator_ = NULL		644511	0		=			
ANR	644528	Identifier	authenticator_		644511	0					
ANR	644529	Identifier	NULL		644511	1					
ANR	644530	Identifier	Authentication :: Authentication		644511	1					
ANR	644531	ParameterList	ReliSock * sock		644511	2					
ANR	644532	Parameter	ReliSock * sock	64:32:2185:2198	644511	0	True				
ANR	644533	ParameterType	ReliSock *		644511	0					
ANR	644534	Identifier	sock		644511	1					
ANR	644535	CFGEntryNode	ENTRY		644511		True				
ANR	644536	CFGExitNode	EXIT		644511		True				
ANR	644537	Symbol	mySock		644511						
ANR	644538	Symbol	sock		644511						
ANR	644539	Symbol	NULL		644511						
ANR	644540	Symbol	CAUTH_NONE		644511						
ANR	644541	Symbol	auth_status		644511						
ANR	644542	Symbol	method_used		644511						
ANR	644543	Symbol	authenticator_		644511						
ANR	644544	Function	Authentication :: ~Authentication	74:0:2456:2621							
ANR	644545	FunctionDef	Authentication :: ~Authentication ()		644544	0					
ANR	644546	CompoundStatement		75:0:2490:2621	644544	0					
ANR	644547	ExpressionStatement	mySock = NULL	77:1:2527:2540	644544	0	True				
ANR	644548	AssignmentExpression	mySock = NULL		644544	0		=			
ANR	644549	Identifier	mySock		644544	0					
ANR	644550	Identifier	NULL		644544	1					
ANR	644551	Statement	delete	79:1:2544:2549	644544	1	True				
ANR	644552	ExpressionStatement	authenticator_	79:8:2551:2565	644544	2	True				
ANR	644553	Identifier	authenticator_		644544	0					
ANR	644554	IfStatement	if ( method_used )		644544	3					
ANR	644555	Condition	method_used	81:5:2573:2583	644544	0	True				
ANR	644556	Identifier	method_used		644544	0					
ANR	644557	CompoundStatement		7:18:95:95	644544	1					
ANR	644558	ExpressionStatement	free ( method_used )	82:2:2590:2608	644544	0	True				
ANR	644559	CallExpression	free ( method_used )		644544	0					
ANR	644560	Callee	free		644544	0					
ANR	644561	Identifier	free		644544	0					
ANR	644562	ArgumentList	method_used		644544	1					
ANR	644563	Argument	method_used		644544	0					
ANR	644564	Identifier	method_used		644544	0					
ANR	644565	Identifier	Authentication :: ~Authentication		644544	1					
ANR	644566	ParameterList			644544	2					
ANR	644567	CFGEntryNode	ENTRY		644544		True				
ANR	644568	CFGExitNode	EXIT		644544		True				
ANR	644569	Symbol	mySock		644544						
ANR	644570	Symbol	NULL		644544						
ANR	644571	Symbol	method_used		644544						
ANR	644572	Function	Authentication :: authenticate	88:0:2624:3346							
ANR	644573	FunctionDef	"Authentication :: authenticate (char * hostAddr , KeyInfo * & key , const char * auth_methods , CondorError * errstack , int timeout)"		644572	0					
ANR	644574	CompoundStatement		90:0:2763:3346	644572	0					
ANR	644575	IdentifierDeclStatement	"int retval = authenticate ( hostAddr , auth_methods , errstack , timeout ) ;"	91:4:2769:2837	644572	0	True				
ANR	644576	IdentifierDecl	"retval = authenticate ( hostAddr , auth_methods , errstack , timeout )"		644572	0					
ANR	644577	IdentifierDeclType	int		644572	0					
ANR	644578	Identifier	retval		644572	1					
ANR	644579	AssignmentExpression	"retval = authenticate ( hostAddr , auth_methods , errstack , timeout )"		644572	2		=			
ANR	644580	Identifier	retval		644572	0					
ANR	644581	CallExpression	"authenticate ( hostAddr , auth_methods , errstack , timeout )"		644572	1					
ANR	644582	Callee	authenticate		644572	0					
ANR	644583	Identifier	authenticate		644572	0					
ANR	644584	ArgumentList	hostAddr		644572	1					
ANR	644585	Argument	hostAddr		644572	0					
ANR	644586	Identifier	hostAddr		644572	0					
ANR	644587	Argument	auth_methods		644572	1					
ANR	644588	Identifier	auth_methods		644572	0					
ANR	644589	Argument	errstack		644572	2					
ANR	644590	Identifier	errstack		644572	0					
ANR	644591	Argument	timeout		644572	3					
ANR	644592	Identifier	timeout		644572	0					
ANR	644593	IfStatement	if ( retval )		644572	1					
ANR	644594	Condition	retval	94:8:2886:2891	644572	0	True				
ANR	644595	Identifier	retval		644572	0					
ANR	644596	CompoundStatement		5:16:130:130	644572	1					
ANR	644597	ExpressionStatement	mySock -> allow_empty_message_flag = FALSE	97:8:3053:3093	644572	0	True				
ANR	644598	AssignmentExpression	mySock -> allow_empty_message_flag = FALSE		644572	0		=			
ANR	644599	PtrMemberAccess	mySock -> allow_empty_message_flag		644572	0					
ANR	644600	Identifier	mySock		644572	0					
ANR	644601	Identifier	allow_empty_message_flag		644572	1					
ANR	644602	Identifier	FALSE		644572	1					
ANR	644603	ExpressionStatement	retval = exchangeKey ( key )	98:8:3103:3128	644572	1	True				
ANR	644604	AssignmentExpression	retval = exchangeKey ( key )		644572	0		=			
ANR	644605	Identifier	retval		644572	0					
ANR	644606	CallExpression	exchangeKey ( key )		644572	1					
ANR	644607	Callee	exchangeKey		644572	0					
ANR	644608	Identifier	exchangeKey		644572	0					
ANR	644609	ArgumentList	key		644572	1					
ANR	644610	Argument	key		644572	0					
ANR	644611	Identifier	key		644572	0					
ANR	644612	IfStatement	if ( ! retval )		644572	2					
ANR	644613	Condition	! retval	99:7:3137:3143	644572	0	True				
ANR	644614	UnaryOperationExpression	! retval		644572	0					
ANR	644615	UnaryOperator	!		644572	0					
ANR	644616	Identifier	retval		644572	1					
ANR	644617	CompoundStatement		10:17:383:383	644572	1					
ANR	644618	ExpressionStatement	"errstack -> push ( ""AUTHENTICATE"" , AUTHENTICATE_ERR_KEYEXCHANGE_FAILED , ""Failed to securely exchange session key"" )"	100:3:3152:3265	644572	0	True				
ANR	644619	CallExpression	"errstack -> push ( ""AUTHENTICATE"" , AUTHENTICATE_ERR_KEYEXCHANGE_FAILED , ""Failed to securely exchange session key"" )"		644572	0					
ANR	644620	Callee	errstack -> push		644572	0					
ANR	644621	PtrMemberAccess	errstack -> push		644572	0					
ANR	644622	Identifier	errstack		644572	0					
ANR	644623	Identifier	push		644572	1					
ANR	644624	ArgumentList	"""AUTHENTICATE"""		644572	1					
ANR	644625	Argument	"""AUTHENTICATE"""		644572	0					
ANR	644626	PrimaryExpression	"""AUTHENTICATE"""		644572	0					
ANR	644627	Argument	AUTHENTICATE_ERR_KEYEXCHANGE_FAILED		644572	1					
ANR	644628	Identifier	AUTHENTICATE_ERR_KEYEXCHANGE_FAILED		644572	0					
ANR	644629	Argument	"""Failed to securely exchange session key"""		644572	2					
ANR	644630	PrimaryExpression	"""Failed to securely exchange session key"""		644572	0					
ANR	644631	ExpressionStatement	mySock -> allow_one_empty_message ( )	103:8:3279:3312	644572	3	True				
ANR	644632	CallExpression	mySock -> allow_one_empty_message ( )		644572	0					
ANR	644633	Callee	mySock -> allow_one_empty_message		644572	0					
ANR	644634	PtrMemberAccess	mySock -> allow_one_empty_message		644572	0					
ANR	644635	Identifier	mySock		644572	0					
ANR	644636	Identifier	allow_one_empty_message		644572	1					
ANR	644637	ArgumentList			644572	1					
ANR	644638	ReturnStatement	return retval ;	106:4:3331:3344	644572	2	True				
ANR	644639	Identifier	retval		644572	0					
ANR	644640	ReturnType	int		644572	1					
ANR	644641	Identifier	Authentication :: authenticate		644572	2					
ANR	644642	ParameterList	"char * hostAddr , KeyInfo * & key , const char * auth_methods , CondorError * errstack , int timeout"		644572	3					
ANR	644643	Parameter	char * hostAddr	88:34:2658:2671	644572	0	True				
ANR	644644	ParameterType	char *		644572	0					
ANR	644645	Identifier	hostAddr		644572	1					
ANR	644646	Parameter	KeyInfo * & key	88:50:2674:2687	644572	1	True				
ANR	644647	ParameterType	KeyInfo * &		644572	0					
ANR	644648	Identifier	key		644572	1					
ANR	644649	Parameter	const char * auth_methods	89:10:2701:2724	644572	2	True				
ANR	644650	ParameterType	const char *		644572	0					
ANR	644651	Identifier	auth_methods		644572	1					
ANR	644652	Parameter	CondorError * errstack	89:36:2727:2747	644572	3	True				
ANR	644653	ParameterType	CondorError *		644572	0					
ANR	644654	Identifier	errstack		644572	1					
ANR	644655	Parameter	int timeout	89:59:2750:2760	644572	4	True				
ANR	644656	ParameterType	int		644572	0					
ANR	644657	Identifier	timeout		644572	1					
ANR	644658	CFGEntryNode	ENTRY		644572		True				
ANR	644659	CFGExitNode	EXIT		644572		True				
ANR	644660	Symbol	mySock		644572						
ANR	644661	Symbol	AUTHENTICATE_ERR_KEYEXCHANGE_FAILED		644572						
ANR	644662	Symbol	authenticate		644572						
ANR	644663	Symbol	mySock -> allow_empty_message_flag		644572						
ANR	644664	Symbol	timeout		644572						
ANR	644665	Symbol	retval		644572						
ANR	644666	Symbol	* mySock		644572						
ANR	644667	Symbol	errstack		644572						
ANR	644668	Symbol	hostAddr		644572						
ANR	644669	Symbol	auth_methods		644572						
ANR	644670	Symbol	exchangeKey		644572						
ANR	644671	Symbol	FALSE		644572						
ANR	644672	Symbol	key		644572						
ANR	644673	Function	Authentication :: authenticate	109:0:3349:3703							
ANR	644674	FunctionDef	"Authentication :: authenticate (char * hostAddr , const char * auth_methods , CondorError * errstack , int timeout)"		644673	0					
ANR	644675	CompoundStatement		111:0:3463:3703	644673	0					
ANR	644676	IdentifierDeclStatement	int retval ;	112:1:3466:3476	644673	0	True				
ANR	644677	IdentifierDecl	retval		644673	0					
ANR	644678	IdentifierDeclType	int		644673	0					
ANR	644679	Identifier	retval		644673	1					
ANR	644680	IdentifierDeclStatement	int old_timeout = 0 ;	113:1:3479:3496	644673	1	True				
ANR	644681	IdentifierDecl	old_timeout = 0		644673	0					
ANR	644682	IdentifierDeclType	int		644673	0					
ANR	644683	Identifier	old_timeout		644673	1					
ANR	644684	AssignmentExpression	old_timeout = 0		644673	2		=			
ANR	644685	Identifier	old_timeout		644673	0					
ANR	644686	PrimaryExpression	0		644673	1					
ANR	644687	IfStatement	if ( timeout >= 0 )		644673	2					
ANR	644688	Condition	timeout >= 0	114:5:3503:3512	644673	0	True				
ANR	644689	RelationalExpression	timeout >= 0		644673	0		>=			
ANR	644690	Identifier	timeout		644673	0					
ANR	644691	PrimaryExpression	0		644673	1					
ANR	644692	CompoundStatement		4:17:51:51	644673	1					
ANR	644693	ExpressionStatement	old_timeout = mySock -> timeout ( timeout )	115:2:3519:3555	644673	0	True				
ANR	644694	AssignmentExpression	old_timeout = mySock -> timeout ( timeout )		644673	0		=			
ANR	644695	Identifier	old_timeout		644673	0					
ANR	644696	CallExpression	mySock -> timeout ( timeout )		644673	1					
ANR	644697	Callee	mySock -> timeout		644673	0					
ANR	644698	PtrMemberAccess	mySock -> timeout		644673	0					
ANR	644699	Identifier	mySock		644673	0					
ANR	644700	Identifier	timeout		644673	1					
ANR	644701	ArgumentList	timeout		644673	1					
ANR	644702	Argument	timeout		644673	0					
ANR	644703	Identifier	timeout		644673	0					
ANR	644704	ExpressionStatement	"retval = authenticate_inner ( hostAddr , auth_methods , errstack , timeout )"	118:1:3562:3629	644673	3	True				
ANR	644705	AssignmentExpression	"retval = authenticate_inner ( hostAddr , auth_methods , errstack , timeout )"		644673	0		=			
ANR	644706	Identifier	retval		644673	0					
ANR	644707	CallExpression	"authenticate_inner ( hostAddr , auth_methods , errstack , timeout )"		644673	1					
ANR	644708	Callee	authenticate_inner		644673	0					
ANR	644709	Identifier	authenticate_inner		644673	0					
ANR	644710	ArgumentList	hostAddr		644673	1					
ANR	644711	Argument	hostAddr		644673	0					
ANR	644712	Identifier	hostAddr		644673	0					
ANR	644713	Argument	auth_methods		644673	1					
ANR	644714	Identifier	auth_methods		644673	0					
ANR	644715	Argument	errstack		644673	2					
ANR	644716	Identifier	errstack		644673	0					
ANR	644717	Argument	timeout		644673	3					
ANR	644718	Identifier	timeout		644673	0					
ANR	644719	IfStatement	if ( timeout >= 0 )		644673	4					
ANR	644720	Condition	timeout >= 0	120:5:3637:3646	644673	0	True				
ANR	644721	RelationalExpression	timeout >= 0		644673	0		>=			
ANR	644722	Identifier	timeout		644673	0					
ANR	644723	PrimaryExpression	0		644673	1					
ANR	644724	CompoundStatement		10:17:185:185	644673	1					
ANR	644725	ExpressionStatement	mySock -> timeout ( old_timeout )	121:2:3653:3681	644673	0	True				
ANR	644726	CallExpression	mySock -> timeout ( old_timeout )		644673	0					
ANR	644727	Callee	mySock -> timeout		644673	0					
ANR	644728	PtrMemberAccess	mySock -> timeout		644673	0					
ANR	644729	Identifier	mySock		644673	0					
ANR	644730	Identifier	timeout		644673	1					
ANR	644731	ArgumentList	old_timeout		644673	1					
ANR	644732	Argument	old_timeout		644673	0					
ANR	644733	Identifier	old_timeout		644673	0					
ANR	644734	ReturnStatement	return retval ;	124:1:3688:3701	644673	5	True				
ANR	644735	Identifier	retval		644673	0					
ANR	644736	ReturnType	int		644673	1					
ANR	644737	Identifier	Authentication :: authenticate		644673	2					
ANR	644738	ParameterList	"char * hostAddr , const char * auth_methods , CondorError * errstack , int timeout"		644673	3					
ANR	644739	Parameter	char * hostAddr	109:34:3383:3396	644673	0	True				
ANR	644740	ParameterType	char *		644673	0					
ANR	644741	Identifier	hostAddr		644673	1					
ANR	644742	Parameter	const char * auth_methods	109:50:3399:3422	644673	1	True				
ANR	644743	ParameterType	const char *		644673	0					
ANR	644744	Identifier	auth_methods		644673	1					
ANR	644745	Parameter	CondorError * errstack	110:2:3427:3447	644673	2	True				
ANR	644746	ParameterType	CondorError *		644673	0					
ANR	644747	Identifier	errstack		644673	1					
ANR	644748	Parameter	int timeout	110:25:3450:3460	644673	3	True				
ANR	644749	ParameterType	int		644673	0					
ANR	644750	Identifier	timeout		644673	1					
ANR	644751	CFGEntryNode	ENTRY		644673		True				
ANR	644752	CFGExitNode	EXIT		644673		True				
ANR	644753	Symbol	mySock		644673						
ANR	644754	Symbol	errstack		644673						
ANR	644755	Symbol	authenticate_inner		644673						
ANR	644756	Symbol	hostAddr		644673						
ANR	644757	Symbol	auth_methods		644673						
ANR	644758	Symbol	old_timeout		644673						
ANR	644759	Symbol	mySock -> timeout		644673						
ANR	644760	Symbol	timeout		644673						
ANR	644761	Symbol	retval		644673						
ANR	644762	Symbol	* mySock		644673						
ANR	644763	Function	Authentication :: authenticate_inner	127:0:3706:12541							
ANR	644764	FunctionDef	"Authentication :: authenticate_inner (char * hostAddr , const char * auth_methods , CondorError * errstack , int timeout)"		644763	0					
ANR	644765	CompoundStatement		129:0:3826:12541	644763	0					
ANR	644766	ExpressionStatement	"dprintf ( D_ALWAYS , ""Skipping....\\n"" )"	131:1:3862:3897	644763	0	True				
ANR	644767	CallExpression	"dprintf ( D_ALWAYS , ""Skipping....\\n"" )"		644763	0					
ANR	644768	Callee	dprintf		644763	0					
ANR	644769	Identifier	dprintf		644763	0					
ANR	644770	ArgumentList	D_ALWAYS		644763	1					
ANR	644771	Argument	D_ALWAYS		644763	0					
ANR	644772	Identifier	D_ALWAYS		644763	0					
ANR	644773	Argument	"""Skipping....\\n"""		644763	1					
ANR	644774	PrimaryExpression	"""Skipping....\\n"""		644763	0					
ANR	644775	ReturnStatement	return 0 ;	136:1:4024:4032	644763	1	True				
ANR	644776	PrimaryExpression	0		644763	0					
ANR	644777	ReturnType	int		644763	1					
ANR	644778	Identifier	Authentication :: authenticate_inner		644763	2					
ANR	644779	ParameterList	"char * hostAddr , const char * auth_methods , CondorError * errstack , int timeout"		644763	3					
ANR	644780	Parameter	char * hostAddr	127:40:3746:3759	644763	0	True				
ANR	644781	ParameterType	char *		644763	0					
ANR	644782	Identifier	hostAddr		644763	1					
ANR	644783	Parameter	const char * auth_methods	127:56:3762:3785	644763	1	True				
ANR	644784	ParameterType	const char *		644763	0					
ANR	644785	Identifier	auth_methods		644763	1					
ANR	644786	Parameter	CondorError * errstack	128:2:3790:3810	644763	2	True				
ANR	644787	ParameterType	CondorError *		644763	0					
ANR	644788	Identifier	errstack		644763	1					
ANR	644789	Parameter	int timeout	128:25:3813:3823	644763	3	True				
ANR	644790	ParameterType	int		644763	0					
ANR	644791	Identifier	timeout		644763	1					
ANR	644792	CFGEntryNode	ENTRY		644763		True				
ANR	644793	CFGExitNode	EXIT		644763		True				
ANR	644794	Symbol	errstack		644763						
ANR	644795	Symbol	hostAddr		644763						
ANR	644796	Symbol	auth_methods		644763						
ANR	644797	Symbol	D_ALWAYS		644763						
ANR	644798	Symbol	timeout		644763						
ANR	644799	Function	Authentication :: reconfigMapFile	383:0:12544:12626							
ANR	644800	FunctionDef	Authentication :: reconfigMapFile ()		644799	0					
ANR	644801	CompoundStatement		384:0:12583:12626	644799	0					
ANR	644802	ExpressionStatement	global_map_file_load_attempted = false	385:1:12586:12624	644799	0	True				
ANR	644803	AssignmentExpression	global_map_file_load_attempted = false		644799	0		=			
ANR	644804	Identifier	global_map_file_load_attempted		644799	0					
ANR	644805	Identifier	false		644799	1					
ANR	644806	ReturnType	void		644799	1					
ANR	644807	Identifier	Authentication :: reconfigMapFile		644799	2					
ANR	644808	ParameterList			644799	3					
ANR	644809	CFGEntryNode	ENTRY		644799		True				
ANR	644810	CFGExitNode	EXIT		644799		True				
ANR	644811	Symbol	global_map_file_load_attempted		644799						
ANR	644812	Symbol	false		644799						
ANR	644813	Function	Authentication :: map_authentication_name_to_canonical_name	393:0:12804:17252							
ANR	644814	FunctionDef	"Authentication :: map_authentication_name_to_canonical_name (int authentication_type , const char * method_string , const char * authentication_name)"		644813	0					
ANR	644815	CompoundStatement		393:148:12952:17252	644813	0					
ANR	644816	IfStatement	if ( global_map_file_load_attempted == false )		644813	0					
ANR	644817	Condition	global_map_file_load_attempted == false	396:5:13029:13067	644813	0	True				
ANR	644818	EqualityExpression	global_map_file_load_attempted == false		644813	0		==			
ANR	644819	Identifier	global_map_file_load_attempted		644813	0					
ANR	644820	Identifier	false		644813	1					
ANR	644821	CompoundStatement		13:8:297:322	644813	1					
ANR	644822	IfStatement	if ( global_map_file )		644813	0					
ANR	644823	Condition	global_map_file	397:6:13078:13092	644813	0	True				
ANR	644824	Identifier	global_map_file		644813	0					
ANR	644825	CompoundStatement		5:23:142:142	644813	1					
ANR	644826	Statement	delete	398:3:13100:13105	644813	0	True				
ANR	644827	ExpressionStatement	global_map_file	398:10:13107:13122	644813	1	True				
ANR	644828	Identifier	global_map_file		644813	0					
ANR	644829	ExpressionStatement	global_map_file = NULL	399:3:13127:13149	644813	2	True				
ANR	644830	AssignmentExpression	global_map_file = NULL		644813	0		=			
ANR	644831	Identifier	global_map_file		644813	0					
ANR	644832	Identifier	NULL		644813	1					
ANR	644833	ExpressionStatement	global_map_file = new MapFile ( )	402:2:13158:13189	644813	1	True				
ANR	644834	AssignmentExpression	global_map_file = new MapFile ( )		644813	0		=			
ANR	644835	Identifier	global_map_file		644813	0					
ANR	644836	UnaryExpression	new MapFile ( )		644813	1					
ANR	644837	ExpressionStatement	"dprintf ( D_ALWAYS , ""ZKM: Parsing map file.\\n"" )"	404:2:13194:13240	644813	2	True				
ANR	644838	CallExpression	"dprintf ( D_ALWAYS , ""ZKM: Parsing map file.\\n"" )"		644813	0					
ANR	644839	Callee	dprintf		644813	0					
ANR	644840	Identifier	dprintf		644813	0					
ANR	644841	ArgumentList	D_ALWAYS		644813	1					
ANR	644842	Argument	D_ALWAYS		644813	0					
ANR	644843	Identifier	D_ALWAYS		644813	0					
ANR	644844	Argument	"""ZKM: Parsing map file.\\n"""		644813	1					
ANR	644845	PrimaryExpression	"""ZKM: Parsing map file.\\n"""		644813	0					
ANR	644846	IdentifierDeclStatement	char * credential_mapfile ;	405:8:13250:13275	644813	3	True				
ANR	644847	IdentifierDecl	* credential_mapfile		644813	0					
ANR	644848	IdentifierDeclType	char *		644813	0					
ANR	644849	Identifier	credential_mapfile		644813	1					
ANR	644850	IfStatement	"if ( NULL == ( credential_mapfile = param ( ""CERTIFICATE_MAPFILE"" ) ) )"		644813	4					
ANR	644851	Condition	"NULL == ( credential_mapfile = param ( ""CERTIFICATE_MAPFILE"" ) )"	406:12:13289:13347	644813	0	True				
ANR	644852	EqualityExpression	"NULL == ( credential_mapfile = param ( ""CERTIFICATE_MAPFILE"" ) )"		644813	0		==			
ANR	644853	Identifier	NULL		644813	0					
ANR	644854	AssignmentExpression	"credential_mapfile = param ( ""CERTIFICATE_MAPFILE"" )"		644813	1		=			
ANR	644855	Identifier	credential_mapfile		644813	0					
ANR	644856	CallExpression	"param ( ""CERTIFICATE_MAPFILE"" )"		644813	1					
ANR	644857	Callee	param		644813	0					
ANR	644858	Identifier	param		644813	0					
ANR	644859	ArgumentList	"""CERTIFICATE_MAPFILE"""		644813	1					
ANR	644860	Argument	"""CERTIFICATE_MAPFILE"""		644813	0					
ANR	644861	PrimaryExpression	"""CERTIFICATE_MAPFILE"""		644813	0					
ANR	644862	CompoundStatement		14:73:397:397	644813	1					
ANR	644863	ExpressionStatement	"dprintf ( D_SECURITY , ""ZKM: No CERTIFICATE_MAPFILE defined\\n"" )"	407:12:13364:13424	644813	0	True				
ANR	644864	CallExpression	"dprintf ( D_SECURITY , ""ZKM: No CERTIFICATE_MAPFILE defined\\n"" )"		644813	0					
ANR	644865	Callee	dprintf		644813	0					
ANR	644866	Identifier	dprintf		644813	0					
ANR	644867	ArgumentList	D_SECURITY		644813	1					
ANR	644868	Argument	D_SECURITY		644813	0					
ANR	644869	Identifier	D_SECURITY		644813	0					
ANR	644870	Argument	"""ZKM: No CERTIFICATE_MAPFILE defined\\n"""		644813	1					
ANR	644871	PrimaryExpression	"""ZKM: No CERTIFICATE_MAPFILE defined\\n"""		644813	0					
ANR	644872	Statement	delete	408:3:13429:13434	644813	1	True				
ANR	644873	ExpressionStatement	global_map_file	408:10:13436:13451	644813	2	True				
ANR	644874	Identifier	global_map_file		644813	0					
ANR	644875	ExpressionStatement	global_map_file = NULL	409:3:13456:13478	644813	3	True				
ANR	644876	AssignmentExpression	global_map_file = NULL		644813	0		=			
ANR	644877	Identifier	global_map_file		644813	0					
ANR	644878	Identifier	NULL		644813	1					
ANR	644879	ElseStatement	else		644813	0					
ANR	644880	CompoundStatement		19:9:553:561	644813	0					
ANR	644881	IdentifierDeclStatement	int line ;	411:9:13506:13514	644813	0	True				
ANR	644882	IdentifierDecl	line		644813	0					
ANR	644883	IdentifierDeclType	int		644813	0					
ANR	644884	Identifier	line		644813	1					
ANR	644885	IfStatement	if ( 0 != ( line = global_map_file -> ParseCanonicalizationFile ( credential_mapfile ) ) )		644813	1					
ANR	644886	Condition	0 != ( line = global_map_file -> ParseCanonicalizationFile ( credential_mapfile ) )	412:13:13529:13604	644813	0	True				
ANR	644887	EqualityExpression	0 != ( line = global_map_file -> ParseCanonicalizationFile ( credential_mapfile ) )		644813	0		!=			
ANR	644888	PrimaryExpression	0		644813	0					
ANR	644889	AssignmentExpression	line = global_map_file -> ParseCanonicalizationFile ( credential_mapfile )		644813	1		=			
ANR	644890	Identifier	line		644813	0					
ANR	644891	CallExpression	global_map_file -> ParseCanonicalizationFile ( credential_mapfile )		644813	1					
ANR	644892	Callee	global_map_file -> ParseCanonicalizationFile		644813	0					
ANR	644893	PtrMemberAccess	global_map_file -> ParseCanonicalizationFile		644813	0					
ANR	644894	Identifier	global_map_file		644813	0					
ANR	644895	Identifier	ParseCanonicalizationFile		644813	1					
ANR	644896	ArgumentList	credential_mapfile		644813	1					
ANR	644897	Argument	credential_mapfile		644813	0					
ANR	644898	Identifier	credential_mapfile		644813	0					
ANR	644899	CompoundStatement		20:91:654:654	644813	1					
ANR	644900	ExpressionStatement	"dprintf ( D_SECURITY , ""ZKM: Error parsing %s at line %d"" , credential_mapfile , line )"	413:13:13622:13703	644813	0	True				
ANR	644901	CallExpression	"dprintf ( D_SECURITY , ""ZKM: Error parsing %s at line %d"" , credential_mapfile , line )"		644813	0					
ANR	644902	Callee	dprintf		644813	0					
ANR	644903	Identifier	dprintf		644813	0					
ANR	644904	ArgumentList	D_SECURITY		644813	1					
ANR	644905	Argument	D_SECURITY		644813	0					
ANR	644906	Identifier	D_SECURITY		644813	0					
ANR	644907	Argument	"""ZKM: Error parsing %s at line %d"""		644813	1					
ANR	644908	PrimaryExpression	"""ZKM: Error parsing %s at line %d"""		644813	0					
ANR	644909	Argument	credential_mapfile		644813	2					
ANR	644910	Identifier	credential_mapfile		644813	0					
ANR	644911	Argument	line		644813	3					
ANR	644912	Identifier	line		644813	0					
ANR	644913	Statement	delete	414:4:13709:13714	644813	1	True				
ANR	644914	ExpressionStatement	global_map_file	414:11:13716:13731	644813	2	True				
ANR	644915	Identifier	global_map_file		644813	0					
ANR	644916	ExpressionStatement	global_map_file = NULL	415:4:13737:13759	644813	3	True				
ANR	644917	AssignmentExpression	global_map_file = NULL		644813	0		=			
ANR	644918	Identifier	global_map_file		644813	0					
ANR	644919	Identifier	NULL		644813	1					
ANR	644920	ExpressionStatement	free ( credential_mapfile )	417:3:13769:13795	644813	2	True				
ANR	644921	CallExpression	free ( credential_mapfile )		644813	0					
ANR	644922	Callee	free		644813	0					
ANR	644923	Identifier	free		644813	0					
ANR	644924	ArgumentList	credential_mapfile		644813	1					
ANR	644925	Argument	credential_mapfile		644813	0					
ANR	644926	Identifier	credential_mapfile		644813	0					
ANR	644927	ExpressionStatement	global_map_file_load_attempted = true	419:2:13803:13840	644813	5	True				
ANR	644928	AssignmentExpression	global_map_file_load_attempted = true		644813	0		=			
ANR	644929	Identifier	global_map_file_load_attempted		644813	0					
ANR	644930	Identifier	true		644813	1					
ANR	644931	ElseStatement	else		644813	0					
ANR	644932	CompoundStatement		28:8:897:897	644813	0					
ANR	644933	ExpressionStatement	"dprintf ( D_SECURITY , ""ZKM: map file already loaded.\\n"" )"	421:2:13854:13909	644813	0	True				
ANR	644934	CallExpression	"dprintf ( D_SECURITY , ""ZKM: map file already loaded.\\n"" )"		644813	0					
ANR	644935	Callee	dprintf		644813	0					
ANR	644936	Identifier	dprintf		644813	0					
ANR	644937	ArgumentList	D_SECURITY		644813	1					
ANR	644938	Argument	D_SECURITY		644813	0					
ANR	644939	Identifier	D_SECURITY		644813	0					
ANR	644940	Argument	"""ZKM: map file already loaded.\\n"""		644813	1					
ANR	644941	PrimaryExpression	"""ZKM: map file already loaded.\\n"""		644813	0					
ANR	644942	IfStatement	if ( globus_activated == false )		644813	1					
ANR	644943	Condition	globus_activated == false	425:5:13949:13973	644813	0	True				
ANR	644944	EqualityExpression	globus_activated == false		644813	0		==			
ANR	644945	Identifier	globus_activated		644813	0					
ANR	644946	Identifier	false		644813	1					
ANR	644947	CompoundStatement		33:32:1023:1023	644813	1					
ANR	644948	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Activating Globus GSI_GSSAPI_ASSIST module.\\n"" )"	426:2:13980:14050	644813	0	True				
ANR	644949	CallExpression	"dprintf ( D_FULLDEBUG , ""Activating Globus GSI_GSSAPI_ASSIST module.\\n"" )"		644813	0					
ANR	644950	Callee	dprintf		644813	0					
ANR	644951	Identifier	dprintf		644813	0					
ANR	644952	ArgumentList	D_FULLDEBUG		644813	1					
ANR	644953	Argument	D_FULLDEBUG		644813	0					
ANR	644954	Identifier	D_FULLDEBUG		644813	0					
ANR	644955	Argument	"""Activating Globus GSI_GSSAPI_ASSIST module.\\n"""		644813	1					
ANR	644956	PrimaryExpression	"""Activating Globus GSI_GSSAPI_ASSIST module.\\n"""		644813	0					
ANR	644957	ExpressionStatement	globus_module_activate ( GLOBUS_GSI_GSS_ASSIST_MODULE )	427:2:14054:14106	644813	1	True				
ANR	644958	CallExpression	globus_module_activate ( GLOBUS_GSI_GSS_ASSIST_MODULE )		644813	0					
ANR	644959	Callee	globus_module_activate		644813	0					
ANR	644960	Identifier	globus_module_activate		644813	0					
ANR	644961	ArgumentList	GLOBUS_GSI_GSS_ASSIST_MODULE		644813	1					
ANR	644962	Argument	GLOBUS_GSI_GSS_ASSIST_MODULE		644813	0					
ANR	644963	Identifier	GLOBUS_GSI_GSS_ASSIST_MODULE		644813	0					
ANR	644964	ExpressionStatement	globus_activated = true	428:2:14110:14133	644813	2	True				
ANR	644965	AssignmentExpression	globus_activated = true		644813	0		=			
ANR	644966	Identifier	globus_activated		644813	0					
ANR	644967	Identifier	true		644813	1					
ANR	644968	ExpressionStatement	"dprintf ( D_SECURITY , ""ZKM: attempting to map '%s'\\n"" , authentication_name )"	433:1:14154:14228	644813	2	True				
ANR	644969	CallExpression	"dprintf ( D_SECURITY , ""ZKM: attempting to map '%s'\\n"" , authentication_name )"		644813	0					
ANR	644970	Callee	dprintf		644813	0					
ANR	644971	Identifier	dprintf		644813	0					
ANR	644972	ArgumentList	D_SECURITY		644813	1					
ANR	644973	Argument	D_SECURITY		644813	0					
ANR	644974	Identifier	D_SECURITY		644813	0					
ANR	644975	Argument	"""ZKM: attempting to map '%s'\\n"""		644813	1					
ANR	644976	PrimaryExpression	"""ZKM: attempting to map '%s'\\n"""		644813	0					
ANR	644977	Argument	authentication_name		644813	2					
ANR	644978	Identifier	authentication_name		644813	0					
ANR	644979	IdentifierDeclStatement	MyString auth_name_to_map = authentication_name ;	436:1:14288:14335	644813	3	True				
ANR	644980	IdentifierDecl	auth_name_to_map = authentication_name		644813	0					
ANR	644981	IdentifierDeclType	MyString		644813	0					
ANR	644982	Identifier	auth_name_to_map		644813	1					
ANR	644983	AssignmentExpression	auth_name_to_map = authentication_name		644813	2		=			
ANR	644984	Identifier	authentication_name		644813	0					
ANR	644985	Identifier	authentication_name		644813	1					
ANR	644986	IdentifierDeclStatement	bool included_voms = false ;	438:1:14339:14365	644813	4	True				
ANR	644987	IdentifierDecl	included_voms = false		644813	0					
ANR	644988	IdentifierDeclType	bool		644813	0					
ANR	644989	Identifier	included_voms		644813	1					
ANR	644990	AssignmentExpression	included_voms = false		644813	2		=			
ANR	644991	Identifier	false		644813	0					
ANR	644992	Identifier	false		644813	1					
ANR	644993	IfStatement	if ( authentication_type == CAUTH_GSI )		644813	5					
ANR	644994	Condition	authentication_type == CAUTH_GSI	442:5:14459:14490	644813	0	True				
ANR	644995	EqualityExpression	authentication_type == CAUTH_GSI		644813	0		==			
ANR	644996	Identifier	authentication_type		644813	0					
ANR	644997	Identifier	CAUTH_GSI		644813	1					
ANR	644998	CompoundStatement		51:2:1544:1609	644813	1					
ANR	644999	IdentifierDeclStatement	const char * fqan = ( ( Condor_Auth_X509 * ) authenticator_ ) -> getFQAN ( ) ;	443:2:14497:14562	644813	0	True				
ANR	645000	IdentifierDecl	* fqan = ( ( Condor_Auth_X509 * ) authenticator_ ) -> getFQAN ( )		644813	0					
ANR	645001	IdentifierDeclType	const char *		644813	0					
ANR	645002	Identifier	fqan		644813	1					
ANR	645003	AssignmentExpression	* fqan = ( ( Condor_Auth_X509 * ) authenticator_ ) -> getFQAN ( )		644813	2		=			
ANR	645004	Identifier	fqan		644813	0					
ANR	645005	CallExpression	( ( Condor_Auth_X509 * ) authenticator_ ) -> getFQAN ( )		644813	1					
ANR	645006	Callee	( ( Condor_Auth_X509 * ) authenticator_ ) -> getFQAN		644813	0					
ANR	645007	PtrMemberAccess	( ( Condor_Auth_X509 * ) authenticator_ ) -> getFQAN		644813	0					
ANR	645008	CastExpression	( Condor_Auth_X509 * ) authenticator_		644813	0					
ANR	645009	CastTarget	Condor_Auth_X509 *		644813	0					
ANR	645010	Identifier	authenticator_		644813	1					
ANR	645011	Identifier	getFQAN		644813	1					
ANR	645012	ArgumentList			644813	1					
ANR	645013	IfStatement	if ( fqan && fqan [ 0 ] )		644813	1					
ANR	645014	Condition	fqan && fqan [ 0 ]	444:6:14570:14584	644813	0	True				
ANR	645015	AndExpression	fqan && fqan [ 0 ]		644813	0		&&			
ANR	645016	Identifier	fqan		644813	0					
ANR	645017	ArrayIndexing	fqan [ 0 ]		644813	1					
ANR	645018	Identifier	fqan		644813	0					
ANR	645019	PrimaryExpression	0		644813	1					
ANR	645020	CompoundStatement		52:23:1634:1634	644813	1					
ANR	645021	ExpressionStatement	"dprintf ( D_ALWAYS , ""ZKM: GSI was used, and FQAN is present.\\n"" )"	445:3:14592:14655	644813	0	True				
ANR	645022	CallExpression	"dprintf ( D_ALWAYS , ""ZKM: GSI was used, and FQAN is present.\\n"" )"		644813	0					
ANR	645023	Callee	dprintf		644813	0					
ANR	645024	Identifier	dprintf		644813	0					
ANR	645025	ArgumentList	D_ALWAYS		644813	1					
ANR	645026	Argument	D_ALWAYS		644813	0					
ANR	645027	Identifier	D_ALWAYS		644813	0					
ANR	645028	Argument	"""ZKM: GSI was used, and FQAN is present.\\n"""		644813	1					
ANR	645029	PrimaryExpression	"""ZKM: GSI was used, and FQAN is present.\\n"""		644813	0					
ANR	645030	ExpressionStatement	auth_name_to_map = fqan	446:3:14660:14683	644813	1	True				
ANR	645031	AssignmentExpression	auth_name_to_map = fqan		644813	0		=			
ANR	645032	Identifier	auth_name_to_map		644813	0					
ANR	645033	Identifier	fqan		644813	1					
ANR	645034	ExpressionStatement	included_voms = true	447:3:14688:14708	644813	2	True				
ANR	645035	AssignmentExpression	included_voms = true		644813	0		=			
ANR	645036	Identifier	included_voms		644813	0					
ANR	645037	Identifier	true		644813	1					
ANR	645038	IfStatement	if ( global_map_file )		644813	6					
ANR	645039	Condition	global_map_file	452:5:14730:14744	644813	0	True				
ANR	645040	Identifier	global_map_file		644813	0					
ANR	645041	CompoundStatement		64:2:1910:2017	644813	1					
ANR	645042	IdentifierDeclStatement	MyString canonical_user ;	453:2:14751:14774	644813	0	True				
ANR	645043	IdentifierDecl	canonical_user		644813	0					
ANR	645044	IdentifierDeclType	MyString		644813	0					
ANR	645045	Identifier	canonical_user		644813	1					
ANR	645046	ExpressionStatement	"dprintf ( D_ALWAYS , ""ZKM: 1: attempting to map '%s'\\n"" , auth_name_to_map . Value ( ) )"	455:2:14779:14859	644813	1	True				
ANR	645047	CallExpression	"dprintf ( D_ALWAYS , ""ZKM: 1: attempting to map '%s'\\n"" , auth_name_to_map . Value ( ) )"		644813	0					
ANR	645048	Callee	dprintf		644813	0					
ANR	645049	Identifier	dprintf		644813	0					
ANR	645050	ArgumentList	D_ALWAYS		644813	1					
ANR	645051	Argument	D_ALWAYS		644813	0					
ANR	645052	Identifier	D_ALWAYS		644813	0					
ANR	645053	Argument	"""ZKM: 1: attempting to map '%s'\\n"""		644813	1					
ANR	645054	PrimaryExpression	"""ZKM: 1: attempting to map '%s'\\n"""		644813	0					
ANR	645055	Argument	auth_name_to_map . Value ( )		644813	2					
ANR	645056	CallExpression	auth_name_to_map . Value ( )		644813	0					
ANR	645057	Callee	auth_name_to_map . Value		644813	0					
ANR	645058	MemberAccess	auth_name_to_map . Value		644813	0					
ANR	645059	Identifier	auth_name_to_map		644813	0					
ANR	645060	Identifier	Value		644813	1					
ANR	645061	ArgumentList			644813	1					
ANR	645062	IdentifierDeclStatement	"bool mapret = global_map_file -> GetCanonicalization ( method_string , auth_name_to_map . Value ( ) , canonical_user ) ;"	456:2:14863:14970	644813	2	True				
ANR	645063	IdentifierDecl	"mapret = global_map_file -> GetCanonicalization ( method_string , auth_name_to_map . Value ( ) , canonical_user )"		644813	0					
ANR	645064	IdentifierDeclType	bool		644813	0					
ANR	645065	Identifier	mapret		644813	1					
ANR	645066	AssignmentExpression	"mapret = global_map_file -> GetCanonicalization ( method_string , auth_name_to_map . Value ( ) , canonical_user )"		644813	2		=			
ANR	645067	Identifier	mapret		644813	0					
ANR	645068	CallExpression	"global_map_file -> GetCanonicalization ( method_string , auth_name_to_map . Value ( ) , canonical_user )"		644813	1					
ANR	645069	Callee	global_map_file -> GetCanonicalization		644813	0					
ANR	645070	PtrMemberAccess	global_map_file -> GetCanonicalization		644813	0					
ANR	645071	Identifier	global_map_file		644813	0					
ANR	645072	Identifier	GetCanonicalization		644813	1					
ANR	645073	ArgumentList	method_string		644813	1					
ANR	645074	Argument	method_string		644813	0					
ANR	645075	Identifier	method_string		644813	0					
ANR	645076	Argument	auth_name_to_map . Value ( )		644813	1					
ANR	645077	CallExpression	auth_name_to_map . Value ( )		644813	0					
ANR	645078	Callee	auth_name_to_map . Value		644813	0					
ANR	645079	MemberAccess	auth_name_to_map . Value		644813	0					
ANR	645080	Identifier	auth_name_to_map		644813	0					
ANR	645081	Identifier	Value		644813	1					
ANR	645082	ArgumentList			644813	1					
ANR	645083	Argument	canonical_user		644813	2					
ANR	645084	Identifier	canonical_user		644813	0					
ANR	645085	ExpressionStatement	"dprintf ( D_ALWAYS , ""ZKM: 2: mapret: %i included_voms: %i canonical_user: %s\\n"" , mapret , included_voms , canonical_user . Value ( ) )"	457:2:14974:15100	644813	3	True				
ANR	645086	CallExpression	"dprintf ( D_ALWAYS , ""ZKM: 2: mapret: %i included_voms: %i canonical_user: %s\\n"" , mapret , included_voms , canonical_user . Value ( ) )"		644813	0					
ANR	645087	Callee	dprintf		644813	0					
ANR	645088	Identifier	dprintf		644813	0					
ANR	645089	ArgumentList	D_ALWAYS		644813	1					
ANR	645090	Argument	D_ALWAYS		644813	0					
ANR	645091	Identifier	D_ALWAYS		644813	0					
ANR	645092	Argument	"""ZKM: 2: mapret: %i included_voms: %i canonical_user: %s\\n"""		644813	1					
ANR	645093	PrimaryExpression	"""ZKM: 2: mapret: %i included_voms: %i canonical_user: %s\\n"""		644813	0					
ANR	645094	Argument	mapret		644813	2					
ANR	645095	Identifier	mapret		644813	0					
ANR	645096	Argument	included_voms		644813	3					
ANR	645097	Identifier	included_voms		644813	0					
ANR	645098	Argument	canonical_user . Value ( )		644813	4					
ANR	645099	CallExpression	canonical_user . Value ( )		644813	0					
ANR	645100	Callee	canonical_user . Value		644813	0					
ANR	645101	MemberAccess	canonical_user . Value		644813	0					
ANR	645102	Identifier	canonical_user		644813	0					
ANR	645103	Identifier	Value		644813	1					
ANR	645104	ArgumentList			644813	1					
ANR	645105	IfStatement	if ( mapret && included_voms )		644813	4					
ANR	645106	Condition	mapret && included_voms	460:6:15192:15214	644813	0	True				
ANR	645107	AndExpression	mapret && included_voms		644813	0		&&			
ANR	645108	Identifier	mapret		644813	0					
ANR	645109	Identifier	included_voms		644813	1					
ANR	645110	CompoundStatement		68:31:2264:2264	644813	1					
ANR	645111	ExpressionStatement	"dprintf ( D_ALWAYS , ""ZKM: now attempting to map '%s'\\n"" , authentication_name )"	461:3:15222:15298	644813	0	True				
ANR	645112	CallExpression	"dprintf ( D_ALWAYS , ""ZKM: now attempting to map '%s'\\n"" , authentication_name )"		644813	0					
ANR	645113	Callee	dprintf		644813	0					
ANR	645114	Identifier	dprintf		644813	0					
ANR	645115	ArgumentList	D_ALWAYS		644813	1					
ANR	645116	Argument	D_ALWAYS		644813	0					
ANR	645117	Identifier	D_ALWAYS		644813	0					
ANR	645118	Argument	"""ZKM: now attempting to map '%s'\\n"""		644813	1					
ANR	645119	PrimaryExpression	"""ZKM: now attempting to map '%s'\\n"""		644813	0					
ANR	645120	Argument	authentication_name		644813	2					
ANR	645121	Identifier	authentication_name		644813	0					
ANR	645122	ExpressionStatement	"mapret = global_map_file -> GetCanonicalization ( method_string , authentication_name , canonical_user )"	462:3:15303:15400	644813	1	True				
ANR	645123	AssignmentExpression	"mapret = global_map_file -> GetCanonicalization ( method_string , authentication_name , canonical_user )"		644813	0		=			
ANR	645124	Identifier	mapret		644813	0					
ANR	645125	CallExpression	"global_map_file -> GetCanonicalization ( method_string , authentication_name , canonical_user )"		644813	1					
ANR	645126	Callee	global_map_file -> GetCanonicalization		644813	0					
ANR	645127	PtrMemberAccess	global_map_file -> GetCanonicalization		644813	0					
ANR	645128	Identifier	global_map_file		644813	0					
ANR	645129	Identifier	GetCanonicalization		644813	1					
ANR	645130	ArgumentList	method_string		644813	1					
ANR	645131	Argument	method_string		644813	0					
ANR	645132	Identifier	method_string		644813	0					
ANR	645133	Argument	authentication_name		644813	1					
ANR	645134	Identifier	authentication_name		644813	0					
ANR	645135	Argument	canonical_user		644813	2					
ANR	645136	Identifier	canonical_user		644813	0					
ANR	645137	ExpressionStatement	"dprintf ( D_ALWAYS , ""ZKM: now 2: mapret: %i included_voms: %i canonical_user: %s\\n"" , mapret , included_voms , canonical_user . Value ( ) )"	463:3:15405:15535	644813	2	True				
ANR	645138	CallExpression	"dprintf ( D_ALWAYS , ""ZKM: now 2: mapret: %i included_voms: %i canonical_user: %s\\n"" , mapret , included_voms , canonical_user . Value ( ) )"		644813	0					
ANR	645139	Callee	dprintf		644813	0					
ANR	645140	Identifier	dprintf		644813	0					
ANR	645141	ArgumentList	D_ALWAYS		644813	1					
ANR	645142	Argument	D_ALWAYS		644813	0					
ANR	645143	Identifier	D_ALWAYS		644813	0					
ANR	645144	Argument	"""ZKM: now 2: mapret: %i included_voms: %i canonical_user: %s\\n"""		644813	1					
ANR	645145	PrimaryExpression	"""ZKM: now 2: mapret: %i included_voms: %i canonical_user: %s\\n"""		644813	0					
ANR	645146	Argument	mapret		644813	2					
ANR	645147	Identifier	mapret		644813	0					
ANR	645148	Argument	included_voms		644813	3					
ANR	645149	Identifier	included_voms		644813	0					
ANR	645150	Argument	canonical_user . Value ( )		644813	4					
ANR	645151	CallExpression	canonical_user . Value ( )		644813	0					
ANR	645152	Callee	canonical_user . Value		644813	0					
ANR	645153	MemberAccess	canonical_user . Value		644813	0					
ANR	645154	Identifier	canonical_user		644813	0					
ANR	645155	Identifier	Value		644813	1					
ANR	645156	ArgumentList			644813	1					
ANR	645157	IfStatement	if ( ! mapret )		644813	5					
ANR	645158	Condition	! mapret	466:6:15548:15554	644813	0	True				
ANR	645159	UnaryOperationExpression	! mapret		644813	0					
ANR	645160	UnaryOperator	!		644813	0					
ANR	645161	Identifier	mapret		644813	1					
ANR	645162	CompoundStatement		74:15:2604:2604	644813	1					
ANR	645163	ExpressionStatement	"dprintf ( D_ALWAYS , ""ZKM: successful mapping to %s\\n"" , canonical_user . Value ( ) )"	468:3:15593:15670	644813	0	True				
ANR	645164	CallExpression	"dprintf ( D_ALWAYS , ""ZKM: successful mapping to %s\\n"" , canonical_user . Value ( ) )"		644813	0					
ANR	645165	Callee	dprintf		644813	0					
ANR	645166	Identifier	dprintf		644813	0					
ANR	645167	ArgumentList	D_ALWAYS		644813	1					
ANR	645168	Argument	D_ALWAYS		644813	0					
ANR	645169	Identifier	D_ALWAYS		644813	0					
ANR	645170	Argument	"""ZKM: successful mapping to %s\\n"""		644813	1					
ANR	645171	PrimaryExpression	"""ZKM: successful mapping to %s\\n"""		644813	0					
ANR	645172	Argument	canonical_user . Value ( )		644813	2					
ANR	645173	CallExpression	canonical_user . Value ( )		644813	0					
ANR	645174	Callee	canonical_user . Value		644813	0					
ANR	645175	MemberAccess	canonical_user . Value		644813	0					
ANR	645176	Identifier	canonical_user		644813	0					
ANR	645177	Identifier	Value		644813	1					
ANR	645178	ArgumentList			644813	1					
ANR	645179	IfStatement	"if ( ( authentication_type == CAUTH_GSI ) && ( canonical_user == ""GSS_ASSIST_GRIDMAP"" ) )"		644813	1					
ANR	645180	Condition	"( authentication_type == CAUTH_GSI ) && ( canonical_user == ""GSS_ASSIST_GRIDMAP"" )"	477:7:16004:16081	644813	0	True				
ANR	645181	AndExpression	"( authentication_type == CAUTH_GSI ) && ( canonical_user == ""GSS_ASSIST_GRIDMAP"" )"		644813	0		&&			
ANR	645182	EqualityExpression	authentication_type == CAUTH_GSI		644813	0		==			
ANR	645183	Identifier	authentication_type		644813	0					
ANR	645184	Identifier	CAUTH_GSI		644813	1					
ANR	645185	EqualityExpression	"canonical_user == ""GSS_ASSIST_GRIDMAP"""		644813	1		==			
ANR	645186	Identifier	canonical_user		644813	0					
ANR	645187	PrimaryExpression	"""GSS_ASSIST_GRIDMAP"""		644813	1					
ANR	645188	CompoundStatement		85:87:3131:3131	644813	1					
ANR	645189	ExpressionStatement	"dprintf ( D_ALWAYS , ""ZKM: GRIDMAPPED!\\n"" )"	489:4:16576:16616	644813	0	True				
ANR	645190	CallExpression	"dprintf ( D_ALWAYS , ""ZKM: GRIDMAPPED!\\n"" )"		644813	0					
ANR	645191	Callee	dprintf		644813	0					
ANR	645192	Identifier	dprintf		644813	0					
ANR	645193	ArgumentList	D_ALWAYS		644813	1					
ANR	645194	Argument	D_ALWAYS		644813	0					
ANR	645195	Identifier	D_ALWAYS		644813	0					
ANR	645196	Argument	"""ZKM: GRIDMAPPED!\\n"""		644813	1					
ANR	645197	PrimaryExpression	"""ZKM: GRIDMAPPED!\\n"""		644813	0					
ANR	645198	ReturnStatement	return ;	493:4:16700:16706	644813	1	True				
ANR	645199	ElseStatement	else		644813	0					
ANR	645200	CompoundStatement		107:4:3878:3893	644813	0					
ANR	645201	ExpressionStatement	"dprintf ( D_SECURITY , ""ZKM: found user %s, splitting.\\n"" , canonical_user . Value ( ) )"	496:4:16725:16805	644813	0	True				
ANR	645202	CallExpression	"dprintf ( D_SECURITY , ""ZKM: found user %s, splitting.\\n"" , canonical_user . Value ( ) )"		644813	0					
ANR	645203	Callee	dprintf		644813	0					
ANR	645204	Identifier	dprintf		644813	0					
ANR	645205	ArgumentList	D_SECURITY		644813	1					
ANR	645206	Argument	D_SECURITY		644813	0					
ANR	645207	Identifier	D_SECURITY		644813	0					
ANR	645208	Argument	"""ZKM: found user %s, splitting.\\n"""		644813	1					
ANR	645209	PrimaryExpression	"""ZKM: found user %s, splitting.\\n"""		644813	0					
ANR	645210	Argument	canonical_user . Value ( )		644813	2					
ANR	645211	CallExpression	canonical_user . Value ( )		644813	0					
ANR	645212	Callee	canonical_user . Value		644813	0					
ANR	645213	MemberAccess	canonical_user . Value		644813	0					
ANR	645214	Identifier	canonical_user		644813	0					
ANR	645215	Identifier	Value		644813	1					
ANR	645216	ArgumentList			644813	1					
ANR	645217	IdentifierDeclStatement	MyString user ;	498:4:16812:16825	644813	1	True				
ANR	645218	IdentifierDecl	user		644813	0					
ANR	645219	IdentifierDeclType	MyString		644813	0					
ANR	645220	Identifier	user		644813	1					
ANR	645221	IdentifierDeclStatement	MyString domain ;	499:4:16831:16846	644813	2	True				
ANR	645222	IdentifierDecl	domain		644813	0					
ANR	645223	IdentifierDeclType	MyString		644813	0					
ANR	645224	Identifier	domain		644813	1					
ANR	645225	ExpressionStatement	"split_canonical_name ( canonical_user , user , domain )"	502:4:16886:16937	644813	3	True				
ANR	645226	CallExpression	"split_canonical_name ( canonical_user , user , domain )"		644813	0					
ANR	645227	Callee	split_canonical_name		644813	0					
ANR	645228	Identifier	split_canonical_name		644813	0					
ANR	645229	ArgumentList	canonical_user		644813	1					
ANR	645230	Argument	canonical_user		644813	0					
ANR	645231	Identifier	canonical_user		644813	0					
ANR	645232	Argument	user		644813	1					
ANR	645233	Identifier	user		644813	0					
ANR	645234	Argument	domain		644813	2					
ANR	645235	Identifier	domain		644813	0					
ANR	645236	ExpressionStatement	authenticator_ -> setRemoteUser ( user . Value ( ) )	504:4:16944:16989	644813	4	True				
ANR	645237	CallExpression	authenticator_ -> setRemoteUser ( user . Value ( ) )		644813	0					
ANR	645238	Callee	authenticator_ -> setRemoteUser		644813	0					
ANR	645239	PtrMemberAccess	authenticator_ -> setRemoteUser		644813	0					
ANR	645240	Identifier	authenticator_		644813	0					
ANR	645241	Identifier	setRemoteUser		644813	1					
ANR	645242	ArgumentList	user . Value ( )		644813	1					
ANR	645243	Argument	user . Value ( )		644813	0					
ANR	645244	CallExpression	user . Value ( )		644813	0					
ANR	645245	Callee	user . Value		644813	0					
ANR	645246	MemberAccess	user . Value		644813	0					
ANR	645247	Identifier	user		644813	0					
ANR	645248	Identifier	Value		644813	1					
ANR	645249	ArgumentList			644813	1					
ANR	645250	ExpressionStatement	authenticator_ -> setRemoteDomain ( domain . Value ( ) )	505:4:16995:17044	644813	5	True				
ANR	645251	CallExpression	authenticator_ -> setRemoteDomain ( domain . Value ( ) )		644813	0					
ANR	645252	Callee	authenticator_ -> setRemoteDomain		644813	0					
ANR	645253	PtrMemberAccess	authenticator_ -> setRemoteDomain		644813	0					
ANR	645254	Identifier	authenticator_		644813	0					
ANR	645255	Identifier	setRemoteDomain		644813	1					
ANR	645256	ArgumentList	domain . Value ( )		644813	1					
ANR	645257	Argument	domain . Value ( )		644813	0					
ANR	645258	CallExpression	domain . Value ( )		644813	0					
ANR	645259	Callee	domain . Value		644813	0					
ANR	645260	MemberAccess	domain . Value		644813	0					
ANR	645261	Identifier	domain		644813	0					
ANR	645262	Identifier	Value		644813	1					
ANR	645263	ArgumentList			644813	1					
ANR	645264	ReturnStatement	return ;	508:4:17070:17076	644813	6	True				
ANR	645265	ElseStatement	else		644813	0					
ANR	645266	CompoundStatement		118:9:4139:4139	644813	0					
ANR	645267	ExpressionStatement	"dprintf ( D_ALWAYS , ""ZKM: did not find user %s.\\n"" , canonical_user . Value ( ) )"	511:3:17097:17171	644813	0	True				
ANR	645268	CallExpression	"dprintf ( D_ALWAYS , ""ZKM: did not find user %s.\\n"" , canonical_user . Value ( ) )"		644813	0					
ANR	645269	Callee	dprintf		644813	0					
ANR	645270	Identifier	dprintf		644813	0					
ANR	645271	ArgumentList	D_ALWAYS		644813	1					
ANR	645272	Argument	D_ALWAYS		644813	0					
ANR	645273	Identifier	D_ALWAYS		644813	0					
ANR	645274	Argument	"""ZKM: did not find user %s.\\n"""		644813	1					
ANR	645275	PrimaryExpression	"""ZKM: did not find user %s.\\n"""		644813	0					
ANR	645276	Argument	canonical_user . Value ( )		644813	2					
ANR	645277	CallExpression	canonical_user . Value ( )		644813	0					
ANR	645278	Callee	canonical_user . Value		644813	0					
ANR	645279	MemberAccess	canonical_user . Value		644813	0					
ANR	645280	Identifier	canonical_user		644813	0					
ANR	645281	Identifier	Value		644813	1					
ANR	645282	ArgumentList			644813	1					
ANR	645283	ElseStatement	else		644813	0					
ANR	645284	CompoundStatement		121:8:4232:4232	644813	0					
ANR	645285	ExpressionStatement	"dprintf ( D_ALWAYS , ""ZKM: global_map_file not present!\\n"" )"	514:2:17189:17246	644813	0	True				
ANR	645286	CallExpression	"dprintf ( D_ALWAYS , ""ZKM: global_map_file not present!\\n"" )"		644813	0					
ANR	645287	Callee	dprintf		644813	0					
ANR	645288	Identifier	dprintf		644813	0					
ANR	645289	ArgumentList	D_ALWAYS		644813	1					
ANR	645290	Argument	D_ALWAYS		644813	0					
ANR	645291	Identifier	D_ALWAYS		644813	0					
ANR	645292	Argument	"""ZKM: global_map_file not present!\\n"""		644813	1					
ANR	645293	PrimaryExpression	"""ZKM: global_map_file not present!\\n"""		644813	0					
ANR	645294	ReturnType	void		644813	1					
ANR	645295	Identifier	Authentication :: map_authentication_name_to_canonical_name		644813	2					
ANR	645296	ParameterList	"int authentication_type , const char * method_string , const char * authentication_name"		644813	3					
ANR	645297	Parameter	int authentication_type	393:63:12867:12889	644813	0	True				
ANR	645298	ParameterType	int		644813	0					
ANR	645299	Identifier	authentication_type		644813	1					
ANR	645300	Parameter	const char * method_string	393:88:12892:12916	644813	1	True				
ANR	645301	ParameterType	const char *		644813	0					
ANR	645302	Identifier	method_string		644813	1					
ANR	645303	Parameter	const char * authentication_name	393:115:12919:12949	644813	2	True				
ANR	645304	ParameterType	const char *		644813	0					
ANR	645305	Identifier	authentication_name		644813	1					
ANR	645306	CFGEntryNode	ENTRY		644813		True				
ANR	645307	CFGExitNode	EXIT		644813		True				
ANR	645308	Symbol	* authenticator_		644813						
ANR	645309	Symbol	global_map_file		644813						
ANR	645310	Symbol	D_SECURITY		644813						
ANR	645311	Symbol	auth_name_to_map		644813						
ANR	645312	Symbol	line		644813						
ANR	645313	Symbol	CAUTH_GSI		644813						
ANR	645314	Symbol	fqan		644813						
ANR	645315	Symbol	auth_name_to_map . Value		644813						
ANR	645316	Symbol	GLOBUS_GSI_GSS_ASSIST_MODULE		644813						
ANR	645317	Symbol	authentication_type		644813						
ANR	645318	Symbol	global_map_file -> ParseCanonicalizationFile		644813						
ANR	645319	Symbol	mapret		644813						
ANR	645320	Symbol	domain . Value		644813						
ANR	645321	Symbol	method_string		644813						
ANR	645322	Symbol	global_map_file -> GetCanonicalization		644813						
ANR	645323	Symbol	global_map_file_load_attempted		644813						
ANR	645324	Symbol	param		644813						
ANR	645325	Symbol	* global_map_file		644813						
ANR	645326	Symbol	globus_activated		644813						
ANR	645327	Symbol	authentication_name		644813						
ANR	645328	Symbol	canonical_user		644813						
ANR	645329	Symbol	canonical_user . Value		644813						
ANR	645330	Symbol	user . Value		644813						
ANR	645331	Symbol	NULL		644813						
ANR	645332	Symbol	credential_mapfile		644813						
ANR	645333	Symbol	included_voms		644813						
ANR	645334	Symbol	false		644813						
ANR	645335	Symbol	D_ALWAYS		644813						
ANR	645336	Symbol	D_FULLDEBUG		644813						
ANR	645337	Symbol	( ( Condor_Auth_X509 * ) authenticator_ ) -> getFQAN		644813						
ANR	645338	Symbol	authenticator_		644813						
ANR	645339	Symbol	* fqan		644813						
ANR	645340	Symbol	domain		644813						
ANR	645341	Symbol	true		644813						
ANR	645342	Symbol	user		644813						
ANR	645343	Function	Authentication :: split_canonical_name	519:0:17255:17682							
ANR	645344	FunctionDef	"Authentication :: split_canonical_name (char const * can_name , char * * user , char * * domain)"		645343	0					
ANR	645345	CompoundStatement		519:90:17345:17682	645343	0					
ANR	645346	IdentifierDeclStatement	"MyString my_user , my_domain ;"	523:1:17531:17557	645343	0	True				
ANR	645347	IdentifierDecl	my_user		645343	0					
ANR	645348	IdentifierDeclType	MyString		645343	0					
ANR	645349	Identifier	my_user		645343	1					
ANR	645350	IdentifierDecl	my_domain		645343	1					
ANR	645351	IdentifierDeclType	MyString		645343	0					
ANR	645352	Identifier	my_domain		645343	1					
ANR	645353	ExpressionStatement	"split_canonical_name ( can_name , my_user , my_domain )"	524:1:17560:17608	645343	1	True				
ANR	645354	CallExpression	"split_canonical_name ( can_name , my_user , my_domain )"		645343	0					
ANR	645355	Callee	split_canonical_name		645343	0					
ANR	645356	Identifier	split_canonical_name		645343	0					
ANR	645357	ArgumentList	can_name		645343	1					
ANR	645358	Argument	can_name		645343	0					
ANR	645359	Identifier	can_name		645343	0					
ANR	645360	Argument	my_user		645343	1					
ANR	645361	Identifier	my_user		645343	0					
ANR	645362	Argument	my_domain		645343	2					
ANR	645363	Identifier	my_domain		645343	0					
ANR	645364	ExpressionStatement	* user = strdup ( my_user . Value ( ) )	525:1:17611:17642	645343	2	True				
ANR	645365	AssignmentExpression	* user = strdup ( my_user . Value ( ) )		645343	0		=			
ANR	645366	UnaryOperationExpression	* user		645343	0					
ANR	645367	UnaryOperator	*		645343	0					
ANR	645368	Identifier	user		645343	1					
ANR	645369	CallExpression	strdup ( my_user . Value ( ) )		645343	1					
ANR	645370	Callee	strdup		645343	0					
ANR	645371	Identifier	strdup		645343	0					
ANR	645372	ArgumentList	my_user . Value ( )		645343	1					
ANR	645373	Argument	my_user . Value ( )		645343	0					
ANR	645374	CallExpression	my_user . Value ( )		645343	0					
ANR	645375	Callee	my_user . Value		645343	0					
ANR	645376	MemberAccess	my_user . Value		645343	0					
ANR	645377	Identifier	my_user		645343	0					
ANR	645378	Identifier	Value		645343	1					
ANR	645379	ArgumentList			645343	1					
ANR	645380	ExpressionStatement	* domain = strdup ( my_domain . Value ( ) )	526:1:17645:17680	645343	3	True				
ANR	645381	AssignmentExpression	* domain = strdup ( my_domain . Value ( ) )		645343	0		=			
ANR	645382	UnaryOperationExpression	* domain		645343	0					
ANR	645383	UnaryOperator	*		645343	0					
ANR	645384	Identifier	domain		645343	1					
ANR	645385	CallExpression	strdup ( my_domain . Value ( ) )		645343	1					
ANR	645386	Callee	strdup		645343	0					
ANR	645387	Identifier	strdup		645343	0					
ANR	645388	ArgumentList	my_domain . Value ( )		645343	1					
ANR	645389	Argument	my_domain . Value ( )		645343	0					
ANR	645390	CallExpression	my_domain . Value ( )		645343	0					
ANR	645391	Callee	my_domain . Value		645343	0					
ANR	645392	MemberAccess	my_domain . Value		645343	0					
ANR	645393	Identifier	my_domain		645343	0					
ANR	645394	Identifier	Value		645343	1					
ANR	645395	ArgumentList			645343	1					
ANR	645396	ReturnType	void		645343	1					
ANR	645397	Identifier	Authentication :: split_canonical_name		645343	2					
ANR	645398	ParameterList	"char const * can_name , char * * user , char * * domain"		645343	3					
ANR	645399	Parameter	char const * can_name	519:42:17297:17316	645343	0	True				
ANR	645400	ParameterType	char const *		645343	0					
ANR	645401	Identifier	can_name		645343	1					
ANR	645402	Parameter	char * * user	519:63:17318:17328	645343	1	True				
ANR	645403	ParameterType	char * *		645343	0					
ANR	645404	Identifier	user		645343	1					
ANR	645405	Parameter	char * * domain	519:75:17330:17342	645343	2	True				
ANR	645406	ParameterType	char * *		645343	0					
ANR	645407	Identifier	domain		645343	1					
ANR	645408	CFGEntryNode	ENTRY		645343		True				
ANR	645409	CFGExitNode	EXIT		645343		True				
ANR	645410	Symbol	my_domain		645343						
ANR	645411	Symbol	* user		645343						
ANR	645412	Symbol	my_user . Value		645343						
ANR	645413	Symbol	* domain		645343						
ANR	645414	Symbol	domain		645343						
ANR	645415	Symbol	my_domain . Value		645343						
ANR	645416	Symbol	strdup		645343						
ANR	645417	Symbol	user		645343						
ANR	645418	Symbol	my_user		645343						
ANR	645419	Symbol	can_name		645343						
ANR	645420	Function	Authentication :: split_canonical_name	529:0:17685:18405							
ANR	645421	FunctionDef	"Authentication :: split_canonical_name (MyString can_name , MyString & user , MyString & domain)"		645420	0					
ANR	645422	CompoundStatement		529:96:17781:18405	645420	0					
ANR	645423	IdentifierDeclStatement	char local_user [ 256 ] ;	531:4:17788:17808	645420	0	True				
ANR	645424	IdentifierDecl	local_user [ 256 ]		645420	0					
ANR	645425	IdentifierDeclType	char [ 256 ]		645420	0					
ANR	645426	Identifier	local_user		645420	1					
ANR	645427	PrimaryExpression	256		645420	2					
ANR	645428	ExpressionStatement	"strncpy ( local_user , can_name . Value ( ) , 255 )"	534:1:17852:17895	645420	1	True				
ANR	645429	CallExpression	"strncpy ( local_user , can_name . Value ( ) , 255 )"		645420	0					
ANR	645430	Callee	strncpy		645420	0					
ANR	645431	Identifier	strncpy		645420	0					
ANR	645432	ArgumentList	local_user		645420	1					
ANR	645433	Argument	local_user		645420	0					
ANR	645434	Identifier	local_user		645420	0					
ANR	645435	Argument	can_name . Value ( )		645420	1					
ANR	645436	CallExpression	can_name . Value ( )		645420	0					
ANR	645437	Callee	can_name . Value		645420	0					
ANR	645438	MemberAccess	can_name . Value		645420	0					
ANR	645439	Identifier	can_name		645420	0					
ANR	645440	Identifier	Value		645420	1					
ANR	645441	ArgumentList			645420	1					
ANR	645442	Argument	255		645420	2					
ANR	645443	PrimaryExpression	255		645420	0					
ANR	645444	IdentifierDeclStatement	"char * tmp = strchr ( local_user , '@' ) ;"	537:4:17935:17970	645420	2	True				
ANR	645445	IdentifierDecl	"* tmp = strchr ( local_user , '@' )"		645420	0					
ANR	645446	IdentifierDeclType	char *		645420	0					
ANR	645447	Identifier	tmp		645420	1					
ANR	645448	AssignmentExpression	"* tmp = strchr ( local_user , '@' )"		645420	2		=			
ANR	645449	Identifier	tmp		645420	0					
ANR	645450	CallExpression	"strchr ( local_user , '@' )"		645420	1					
ANR	645451	Callee	strchr		645420	0					
ANR	645452	Identifier	strchr		645420	0					
ANR	645453	ArgumentList	local_user		645420	1					
ANR	645454	Argument	local_user		645420	0					
ANR	645455	Identifier	local_user		645420	0					
ANR	645456	Argument	'@'		645420	1					
ANR	645457	PrimaryExpression	'@'		645420	0					
ANR	645458	IfStatement	if ( tmp == NULL )		645420	3					
ANR	645459	Condition	tmp == NULL	538:8:17980:17990	645420	0	True				
ANR	645460	EqualityExpression	tmp == NULL		645420	0		==			
ANR	645461	Identifier	tmp		645420	0					
ANR	645462	Identifier	NULL		645420	1					
ANR	645463	CompoundStatement		12:8:248:287	645420	1					
ANR	645464	ExpressionStatement	user = local_user	539:8:18003:18020	645420	0	True				
ANR	645465	AssignmentExpression	user = local_user		645420	0		=			
ANR	645466	Identifier	user		645420	0					
ANR	645467	Identifier	local_user		645420	1					
ANR	645468	IdentifierDeclStatement	"char * uid_domain = param ( ""UID_DOMAIN"" ) ;"	540:8:18030:18069	645420	1	True				
ANR	645469	IdentifierDecl	"* uid_domain = param ( ""UID_DOMAIN"" )"		645420	0					
ANR	645470	IdentifierDeclType	char *		645420	0					
ANR	645471	Identifier	uid_domain		645420	1					
ANR	645472	AssignmentExpression	"* uid_domain = param ( ""UID_DOMAIN"" )"		645420	2		=			
ANR	645473	Identifier	uid_domain		645420	0					
ANR	645474	CallExpression	"param ( ""UID_DOMAIN"" )"		645420	1					
ANR	645475	Callee	param		645420	0					
ANR	645476	Identifier	param		645420	0					
ANR	645477	ArgumentList	"""UID_DOMAIN"""		645420	1					
ANR	645478	Argument	"""UID_DOMAIN"""		645420	0					
ANR	645479	PrimaryExpression	"""UID_DOMAIN"""		645420	0					
ANR	645480	IfStatement	if ( uid_domain )		645420	2					
ANR	645481	Condition	uid_domain	541:12:18083:18092	645420	0	True				
ANR	645482	Identifier	uid_domain		645420	0					
ANR	645483	CompoundStatement		13:24:313:313	645420	1					
ANR	645484	ExpressionStatement	domain = uid_domain	542:12:18109:18128	645420	0	True				
ANR	645485	AssignmentExpression	domain = uid_domain		645420	0		=			
ANR	645486	Identifier	domain		645420	0					
ANR	645487	Identifier	uid_domain		645420	1					
ANR	645488	ExpressionStatement	free ( uid_domain )	543:12:18142:18158	645420	1	True				
ANR	645489	CallExpression	free ( uid_domain )		645420	0					
ANR	645490	Callee	free		645420	0					
ANR	645491	Identifier	free		645420	0					
ANR	645492	ArgumentList	uid_domain		645420	1					
ANR	645493	Argument	uid_domain		645420	0					
ANR	645494	Identifier	uid_domain		645420	0					
ANR	645495	ElseStatement	else		645420	0					
ANR	645496	CompoundStatement		16:15:393:393	645420	0					
ANR	645497	ExpressionStatement	"dprintf ( D_SECURITY , ""AUTHENTICATION: UID_DOMAIN not defined.\\n"" )"	545:12:18189:18253	645420	0	True				
ANR	645498	CallExpression	"dprintf ( D_SECURITY , ""AUTHENTICATION: UID_DOMAIN not defined.\\n"" )"		645420	0					
ANR	645499	Callee	dprintf		645420	0					
ANR	645500	Identifier	dprintf		645420	0					
ANR	645501	ArgumentList	D_SECURITY		645420	1					
ANR	645502	Argument	D_SECURITY		645420	0					
ANR	645503	Identifier	D_SECURITY		645420	0					
ANR	645504	Argument	"""AUTHENTICATION: UID_DOMAIN not defined.\\n"""		645420	1					
ANR	645505	PrimaryExpression	"""AUTHENTICATION: UID_DOMAIN not defined.\\n"""		645420	0					
ANR	645506	ElseStatement	else		645420	0					
ANR	645507	CompoundStatement		19:11:494:494	645420	0					
ANR	645508	ExpressionStatement	* tmp = 0	549:8:18336:18344	645420	0	True				
ANR	645509	AssignmentExpression	* tmp = 0		645420	0		=			
ANR	645510	UnaryOperationExpression	* tmp		645420	0					
ANR	645511	UnaryOperator	*		645420	0					
ANR	645512	Identifier	tmp		645420	1					
ANR	645513	PrimaryExpression	0		645420	1					
ANR	645514	ExpressionStatement	user = local_user	550:8:18354:18371	645420	1	True				
ANR	645515	AssignmentExpression	user = local_user		645420	0		=			
ANR	645516	Identifier	user		645420	0					
ANR	645517	Identifier	local_user		645420	1					
ANR	645518	ExpressionStatement	domain = ( tmp + 1 )	551:8:18381:18397	645420	2	True				
ANR	645519	AssignmentExpression	domain = ( tmp + 1 )		645420	0		=			
ANR	645520	Identifier	domain		645420	0					
ANR	645521	AdditiveExpression	tmp + 1		645420	1		+			
ANR	645522	Identifier	tmp		645420	0					
ANR	645523	PrimaryExpression	1		645420	1					
ANR	645524	ReturnType	void		645420	1					
ANR	645525	Identifier	Authentication :: split_canonical_name		645420	2					
ANR	645526	ParameterList	"MyString can_name , MyString & user , MyString & domain"		645420	3					
ANR	645527	Parameter	MyString can_name	529:42:17727:17743	645420	0	True				
ANR	645528	ParameterType	MyString		645420	0					
ANR	645529	Identifier	can_name		645420	1					
ANR	645530	Parameter	MyString & user	529:61:17746:17759	645420	1	True				
ANR	645531	ParameterType	MyString &		645420	0					
ANR	645532	Identifier	user		645420	1					
ANR	645533	Parameter	MyString & domain	529:77:17762:17777	645420	2	True				
ANR	645534	ParameterType	MyString &		645420	0					
ANR	645535	Identifier	domain		645420	1					
ANR	645536	CFGEntryNode	ENTRY		645420		True				
ANR	645537	CFGExitNode	EXIT		645420		True				
ANR	645538	Symbol	* tmp		645420						
ANR	645539	Symbol	NULL		645420						
ANR	645540	Symbol	D_SECURITY		645420						
ANR	645541	Symbol	param		645420						
ANR	645542	Symbol	tmp		645420						
ANR	645543	Symbol	domain		645420						
ANR	645544	Symbol	uid_domain		645420						
ANR	645545	Symbol	strchr		645420						
ANR	645546	Symbol	local_user		645420						
ANR	645547	Symbol	can_name . Value		645420						
ANR	645548	Symbol	user		645420						
ANR	645549	Symbol	can_name		645420						
ANR	645550	Function	Authentication :: isAuthenticated	557:0:18438:18585							
ANR	645551	FunctionDef	Authentication :: isAuthenticated ()		645550	0					
ANR	645552	CompoundStatement		558:0:18482:18585	645550	0					
ANR	645553	ReturnStatement	return 0 ;	560:4:18521:18529	645550	0	True				
ANR	645554	PrimaryExpression	0		645550	0					
ANR	645555	ReturnType	int		645550	1					
ANR	645556	Identifier	Authentication :: isAuthenticated		645550	2					
ANR	645557	ParameterList			645550	3					
ANR	645558	CFGEntryNode	ENTRY		645550		True				
ANR	645559	CFGExitNode	EXIT		645550		True				
ANR	645560	Function	Authentication :: unAuthenticate	567:0:18589:18843							
ANR	645561	FunctionDef	Authentication :: unAuthenticate ()		645560	0					
ANR	645562	CompoundStatement		568:0:18627:18843	645560	0					
ANR	645563	ExpressionStatement	auth_status = CAUTH_NONE	570:4:18667:18691	645560	0	True				
ANR	645564	AssignmentExpression	auth_status = CAUTH_NONE		645560	0		=			
ANR	645565	Identifier	auth_status		645560	0					
ANR	645566	Identifier	CAUTH_NONE		645560	1					
ANR	645567	IfStatement	if ( authenticator_ )		645560	1					
ANR	645568	Condition	authenticator_	571:5:18698:18711	645560	0	True				
ANR	645569	Identifier	authenticator_		645560	0					
ANR	645570	CompoundStatement		4:21:86:86	645560	1					
ANR	645571	Statement	delete	572:5:18721:18726	645560	0	True				
ANR	645572	ExpressionStatement	authenticator_	572:12:18728:18742	645560	1	True				
ANR	645573	Identifier	authenticator_		645560	0					
ANR	645574	ExpressionStatement	authenticator_ = 0	573:5:18749:18767	645560	2	True				
ANR	645575	AssignmentExpression	authenticator_ = 0		645560	0		=			
ANR	645576	Identifier	authenticator_		645560	0					
ANR	645577	PrimaryExpression	0		645560	1					
ANR	645578	IfStatement	if ( method_used )		645560	2					
ANR	645579	Condition	method_used	575:5:18777:18787	645560	0	True				
ANR	645580	Identifier	method_used		645560	0					
ANR	645581	CompoundStatement		8:18:162:162	645560	1					
ANR	645582	ExpressionStatement	free ( method_used )	576:2:18794:18812	645560	0	True				
ANR	645583	CallExpression	free ( method_used )		645560	0					
ANR	645584	Callee	free		645560	0					
ANR	645585	Identifier	free		645560	0					
ANR	645586	ArgumentList	method_used		645560	1					
ANR	645587	Argument	method_used		645560	0					
ANR	645588	Identifier	method_used		645560	0					
ANR	645589	ExpressionStatement	method_used = 0	577:2:18816:18831	645560	1	True				
ANR	645590	AssignmentExpression	method_used = 0		645560	0		=			
ANR	645591	Identifier	method_used		645560	0					
ANR	645592	PrimaryExpression	0		645560	1					
ANR	645593	ReturnType	void		645560	1					
ANR	645594	Identifier	Authentication :: unAuthenticate		645560	2					
ANR	645595	ParameterList			645560	3					
ANR	645596	CFGEntryNode	ENTRY		645560		True				
ANR	645597	CFGExitNode	EXIT		645560		True				
ANR	645598	Symbol	CAUTH_NONE		645560						
ANR	645599	Symbol	auth_status		645560						
ANR	645600	Symbol	authenticator_		645560						
ANR	645601	Symbol	method_used		645560						
ANR	645602	Function	Authentication :: getMethodUsed	583:0:18847:18969							
ANR	645603	FunctionDef	Authentication :: getMethodUsed ()		645602	0					
ANR	645604	CompoundStatement		583:38:18885:18969	645602	0					
ANR	645605	ReturnStatement	return method_used ;	585:1:18922:18940	645602	0	True				
ANR	645606	Identifier	method_used		645602	0					
ANR	645607	ReturnType	char *		645602	1					
ANR	645608	Identifier	Authentication :: getMethodUsed		645602	2					
ANR	645609	ParameterList			645602	3					
ANR	645610	CFGEntryNode	ENTRY		645602		True				
ANR	645611	CFGExitNode	EXIT		645602		True				
ANR	645612	Symbol	method_used		645602						
ANR	645613	Function	Authentication :: setOwner	599:0:19086:19410							
ANR	645614	FunctionDef	Authentication :: setOwner (const char * owner)		645613	0					
ANR	645615	CompoundStatement		600:0:19137:19410	645613	0					
ANR	645616	ReturnStatement	return 0 ;	602:1:19173:19181	645613	0	True				
ANR	645617	PrimaryExpression	0		645613	0					
ANR	645618	ReturnType	int		645613	1					
ANR	645619	Identifier	Authentication :: setOwner		645613	2					
ANR	645620	ParameterList	const char * owner		645613	3					
ANR	645621	Parameter	const char * owner	599:30:19116:19132	645613	0	True				
ANR	645622	ParameterType	const char *		645613	0					
ANR	645623	Identifier	owner		645613	1					
ANR	645624	CFGEntryNode	ENTRY		645613		True				
ANR	645625	CFGExitNode	EXIT		645613		True				
ANR	645626	Symbol	owner		645613						
ANR	645627	Function	Authentication :: getRemoteAddress	620:0:19628:19903							
ANR	645628	FunctionDef	Authentication :: getRemoteAddress ()		645627	0					
ANR	645629	CompoundStatement		621:0:19684:19903	645627	0					
ANR	645630	ReturnStatement	return NULL ;	623:4:19723:19734	645627	0	True				
ANR	645631	Identifier	NULL		645627	0					
ANR	645632	ReturnType	const char *		645627	1					
ANR	645633	Identifier	Authentication :: getRemoteAddress		645627	2					
ANR	645634	ParameterList			645627	3					
ANR	645635	CFGEntryNode	ENTRY		645627		True				
ANR	645636	CFGExitNode	EXIT		645627		True				
ANR	645637	Symbol	NULL		645627						
ANR	645638	Function	Authentication :: getDomain	638:0:20093:20327							
ANR	645639	FunctionDef	Authentication :: getDomain ()		645638	0					
ANR	645640	CompoundStatement		639:0:20142:20327	645638	0					
ANR	645641	ReturnStatement	return NULL ;	641:4:20181:20192	645638	0	True				
ANR	645642	Identifier	NULL		645638	0					
ANR	645643	ReturnType	const char *		645638	1					
ANR	645644	Identifier	Authentication :: getDomain		645638	2					
ANR	645645	ParameterList			645638	3					
ANR	645646	CFGEntryNode	ENTRY		645638		True				
ANR	645647	CFGExitNode	EXIT		645638		True				
ANR	645648	Symbol	NULL		645638						
ANR	645649	Function	Authentication :: getOwner	652:0:20330:21073							
ANR	645650	FunctionDef	Authentication :: getOwner ()		645649	0					
ANR	645651	CompoundStatement		653:0:20376:21073	645649	0					
ANR	645652	ReturnStatement	return NULL ;	655:4:20415:20426	645649	0	True				
ANR	645653	Identifier	NULL		645649	0					
ANR	645654	ReturnType	const char *		645649	1					
ANR	645655	Identifier	Authentication :: getOwner		645649	2					
ANR	645656	ParameterList			645649	3					
ANR	645657	CFGEntryNode	ENTRY		645649		True				
ANR	645658	CFGExitNode	EXIT		645649		True				
ANR	645659	Symbol	NULL		645649						
ANR	645660	Function	Authentication :: getFullyQualifiedUser	680:0:21091:21624							
ANR	645661	FunctionDef	Authentication :: getFullyQualifiedUser ()		645660	0					
ANR	645662	CompoundStatement		681:0:21150:21624	645660	0					
ANR	645663	ReturnStatement	return NULL ;	683:4:21189:21200	645660	0	True				
ANR	645664	Identifier	NULL		645660	0					
ANR	645665	ReturnType	const char *		645660	1					
ANR	645666	Identifier	Authentication :: getFullyQualifiedUser		645660	2					
ANR	645667	ParameterList			645660	3					
ANR	645668	CFGEntryNode	ENTRY		645660		True				
ANR	645669	CFGExitNode	EXIT		645660		True				
ANR	645670	Symbol	NULL		645660						
ANR	645671	Function	Authentication :: end_time	699:0:21638:21832							
ANR	645672	FunctionDef	Authentication :: end_time ()		645671	0					
ANR	645673	CompoundStatement		700:0:21671:21832	645671	0					
ANR	645674	IdentifierDeclStatement	int endtime = 0 ;	701:4:21677:21692	645671	0	True				
ANR	645675	IdentifierDecl	endtime = 0		645671	0					
ANR	645676	IdentifierDeclType	int		645671	0					
ANR	645677	Identifier	endtime		645671	1					
ANR	645678	AssignmentExpression	endtime = 0		645671	2		=			
ANR	645679	Identifier	endtime		645671	0					
ANR	645680	PrimaryExpression	0		645671	1					
ANR	645681	IfStatement	if ( authenticator_ )		645671	1					
ANR	645682	Condition	authenticator_	703:8:21736:21749	645671	0	True				
ANR	645683	Identifier	authenticator_		645671	0					
ANR	645684	CompoundStatement		4:24:80:80	645671	1					
ANR	645685	ExpressionStatement	endtime = authenticator_ -> endTime ( )	704:8:21762:21797	645671	0	True				
ANR	645686	AssignmentExpression	endtime = authenticator_ -> endTime ( )		645671	0		=			
ANR	645687	Identifier	endtime		645671	0					
ANR	645688	CallExpression	authenticator_ -> endTime ( )		645671	1					
ANR	645689	Callee	authenticator_ -> endTime		645671	0					
ANR	645690	PtrMemberAccess	authenticator_ -> endTime		645671	0					
ANR	645691	Identifier	authenticator_		645671	0					
ANR	645692	Identifier	endTime		645671	1					
ANR	645693	ArgumentList			645671	1					
ANR	645694	ReturnStatement	return endtime ;	707:4:21816:21830	645671	2	True				
ANR	645695	Identifier	endtime		645671	0					
ANR	645696	ReturnType	int		645671	1					
ANR	645697	Identifier	Authentication :: end_time		645671	2					
ANR	645698	ParameterList			645671	3					
ANR	645699	CFGEntryNode	ENTRY		645671		True				
ANR	645700	CFGExitNode	EXIT		645671		True				
ANR	645701	Symbol	* authenticator_		645671						
ANR	645702	Symbol	authenticator_ -> endTime		645671						
ANR	645703	Symbol	endtime		645671						
ANR	645704	Symbol	authenticator_		645671						
ANR	645705	Function	Authentication :: is_valid	710:0:21835:22029							
ANR	645706	FunctionDef	Authentication :: is_valid ()		645705	0					
ANR	645707	CompoundStatement		711:0:21869:22029	645705	0					
ANR	645708	IdentifierDeclStatement	bool valid = FALSE ;	712:4:21875:21893	645705	0	True				
ANR	645709	IdentifierDecl	valid = FALSE		645705	0					
ANR	645710	IdentifierDeclType	bool		645705	0					
ANR	645711	Identifier	valid		645705	1					
ANR	645712	AssignmentExpression	valid = FALSE		645705	2		=			
ANR	645713	Identifier	FALSE		645705	0					
ANR	645714	Identifier	FALSE		645705	1					
ANR	645715	IfStatement	if ( authenticator_ )		645705	1					
ANR	645716	Condition	authenticator_	714:8:21937:21950	645705	0	True				
ANR	645717	Identifier	authenticator_		645705	0					
ANR	645718	CompoundStatement		4:24:83:83	645705	1					
ANR	645719	ExpressionStatement	valid = authenticator_ -> isValid ( )	715:8:21963:21996	645705	0	True				
ANR	645720	AssignmentExpression	valid = authenticator_ -> isValid ( )		645705	0		=			
ANR	645721	Identifier	valid		645705	0					
ANR	645722	CallExpression	authenticator_ -> isValid ( )		645705	1					
ANR	645723	Callee	authenticator_ -> isValid		645705	0					
ANR	645724	PtrMemberAccess	authenticator_ -> isValid		645705	0					
ANR	645725	Identifier	authenticator_		645705	0					
ANR	645726	Identifier	isValid		645705	1					
ANR	645727	ArgumentList			645705	1					
ANR	645728	ReturnStatement	return valid ;	718:4:22015:22027	645705	2	True				
ANR	645729	Identifier	valid		645705	0					
ANR	645730	ReturnType	bool		645705	1					
ANR	645731	Identifier	Authentication :: is_valid		645705	2					
ANR	645732	ParameterList			645705	3					
ANR	645733	CFGEntryNode	ENTRY		645705		True				
ANR	645734	CFGExitNode	EXIT		645705		True				
ANR	645735	Symbol	valid		645705						
ANR	645736	Symbol	* authenticator_		645705						
ANR	645737	Symbol	FALSE		645705						
ANR	645738	Symbol	authenticator_		645705						
ANR	645739	Symbol	authenticator_ -> isValid		645705						
ANR	645740	Function	Authentication :: wrap	721:0:22032:22399							
ANR	645741	FunctionDef	"Authentication :: wrap (char * input , int input_len , char * & output , int & output_len)"		645740	0					
ANR	645742	CompoundStatement		725:0:22145:22399	645740	0					
ANR	645743	ReturnStatement	return FALSE ;	727:4:22184:22196	645740	0	True				
ANR	645744	Identifier	FALSE		645740	0					
ANR	645745	ReturnType	int		645740	1					
ANR	645746	Identifier	Authentication :: wrap		645740	2					
ANR	645747	ParameterList	"char * input , int input_len , char * & output , int & output_len"		645740	3					
ANR	645748	Parameter	char * input	721:27:22059:22070	645740	0	True				
ANR	645749	ParameterType	char *		645740	0					
ANR	645750	Identifier	input		645740	1					
ANR	645751	Parameter	int input_len	722:6:22080:22095	645740	1	True				
ANR	645752	ParameterType	int		645740	0					
ANR	645753	Identifier	input_len		645740	1					
ANR	645754	Parameter	char * & output	723:6:22105:22117	645740	2	True				
ANR	645755	ParameterType	char * &		645740	0					
ANR	645756	Identifier	output		645740	1					
ANR	645757	Parameter	int & output_len	724:6:22126:22142	645740	3	True				
ANR	645758	ParameterType	int &		645740	0					
ANR	645759	Identifier	output_len		645740	1					
ANR	645760	CFGEntryNode	ENTRY		645740		True				
ANR	645761	CFGExitNode	EXIT		645740		True				
ANR	645762	Symbol	output		645740						
ANR	645763	Symbol	output_len		645740						
ANR	645764	Symbol	input		645740						
ANR	645765	Symbol	input_len		645740						
ANR	645766	Symbol	FALSE		645740						
ANR	645767	Function	Authentication :: unwrap	739:0:22403:22781							
ANR	645768	FunctionDef	"Authentication :: unwrap (char * input , int input_len , char * & output , int & output_len)"		645767	0					
ANR	645769	CompoundStatement		743:0:22525:22781	645767	0					
ANR	645770	ReturnStatement	return FALSE ;	745:4:22564:22576	645767	0	True				
ANR	645771	Identifier	FALSE		645767	0					
ANR	645772	ReturnType	int		645767	1					
ANR	645773	Identifier	Authentication :: unwrap		645767	2					
ANR	645774	ParameterList	"char * input , int input_len , char * & output , int & output_len"		645767	3					
ANR	645775	Parameter	char * input	739:29:22432:22443	645767	0	True				
ANR	645776	ParameterType	char *		645767	0					
ANR	645777	Identifier	input		645767	1					
ANR	645778	Parameter	int input_len	740:8:22455:22470	645767	1	True				
ANR	645779	ParameterType	int		645767	0					
ANR	645780	Identifier	input_len		645767	1					
ANR	645781	Parameter	char * & output	741:8:22482:22494	645767	2	True				
ANR	645782	ParameterType	char * &		645767	0					
ANR	645783	Identifier	output		645767	1					
ANR	645784	Parameter	int & output_len	742:8:22506:22522	645767	3	True				
ANR	645785	ParameterType	int &		645767	0					
ANR	645786	Identifier	output_len		645767	1					
ANR	645787	CFGEntryNode	ENTRY		645767		True				
ANR	645788	CFGExitNode	EXIT		645767		True				
ANR	645789	Symbol	output		645767						
ANR	645790	Symbol	output_len		645767						
ANR	645791	Symbol	input		645767						
ANR	645792	Symbol	input_len		645767						
ANR	645793	Symbol	FALSE		645767						
ANR	645794	Function	Authentication :: exchangeKey	760:0:22820:25080							
ANR	645795	FunctionDef	Authentication :: exchangeKey (KeyInfo * & key)		645794	0					
ANR	645796	CompoundStatement		761:0:22868:25080	645794	0					
ANR	645797	IdentifierDeclStatement	int retval = 1 ;	762:4:22874:22888	645794	0	True				
ANR	645798	IdentifierDecl	retval = 1		645794	0					
ANR	645799	IdentifierDeclType	int		645794	0					
ANR	645800	Identifier	retval		645794	1					
ANR	645801	AssignmentExpression	retval = 1		645794	2		=			
ANR	645802	Identifier	retval		645794	0					
ANR	645803	PrimaryExpression	1		645794	1					
ANR	645804	IdentifierDeclStatement	"int hasKey , keyLength , protocol , duration ;"	763:4:22894:22935	645794	1	True				
ANR	645805	IdentifierDecl	hasKey		645794	0					
ANR	645806	IdentifierDeclType	int		645794	0					
ANR	645807	Identifier	hasKey		645794	1					
ANR	645808	IdentifierDecl	keyLength		645794	1					
ANR	645809	IdentifierDeclType	int		645794	0					
ANR	645810	Identifier	keyLength		645794	1					
ANR	645811	IdentifierDecl	protocol		645794	2					
ANR	645812	IdentifierDeclType	int		645794	0					
ANR	645813	Identifier	protocol		645794	1					
ANR	645814	IdentifierDecl	duration		645794	3					
ANR	645815	IdentifierDeclType	int		645794	0					
ANR	645816	Identifier	duration		645794	1					
ANR	645817	IdentifierDeclStatement	"int outputLen , inputLen ;"	764:4:22941:22964	645794	2	True				
ANR	645818	IdentifierDecl	outputLen		645794	0					
ANR	645819	IdentifierDeclType	int		645794	0					
ANR	645820	Identifier	outputLen		645794	1					
ANR	645821	IdentifierDecl	inputLen		645794	1					
ANR	645822	IdentifierDeclType	int		645794	0					
ANR	645823	Identifier	inputLen		645794	1					
ANR	645824	IdentifierDeclStatement	"char * encryptedKey = 0 , * decryptedKey = 0 ;"	765:4:22970:23013	645794	3	True				
ANR	645825	IdentifierDecl	* encryptedKey = 0		645794	0					
ANR	645826	IdentifierDeclType	char *		645794	0					
ANR	645827	Identifier	encryptedKey		645794	1					
ANR	645828	AssignmentExpression	* encryptedKey = 0		645794	2		=			
ANR	645829	Identifier	encryptedKey		645794	0					
ANR	645830	PrimaryExpression	0		645794	1					
ANR	645831	IdentifierDecl	* decryptedKey = 0		645794	1					
ANR	645832	IdentifierDeclType	char *		645794	0					
ANR	645833	Identifier	decryptedKey		645794	1					
ANR	645834	AssignmentExpression	* decryptedKey = 0		645794	2		=			
ANR	645835	Identifier	decryptedKey		645794	0					
ANR	645836	PrimaryExpression	0		645794	1					
ANR	645837	IfStatement	if ( mySock -> isClient ( ) )		645794	4					
ANR	645838	Condition	mySock -> isClient ( )	767:8:23024:23041	645794	0	True				
ANR	645839	CallExpression	mySock -> isClient ( )		645794	0					
ANR	645840	Callee	mySock -> isClient		645794	0					
ANR	645841	PtrMemberAccess	mySock -> isClient		645794	0					
ANR	645842	Identifier	mySock		645794	0					
ANR	645843	Identifier	isClient		645794	1					
ANR	645844	ArgumentList			645794	1					
ANR	645845	CompoundStatement		7:28:175:175	645794	1					
ANR	645846	ExpressionStatement	mySock -> decode ( )	768:8:23054:23070	645794	0	True				
ANR	645847	CallExpression	mySock -> decode ( )		645794	0					
ANR	645848	Callee	mySock -> decode		645794	0					
ANR	645849	PtrMemberAccess	mySock -> decode		645794	0					
ANR	645850	Identifier	mySock		645794	0					
ANR	645851	Identifier	decode		645794	1					
ANR	645852	ArgumentList			645794	1					
ANR	645853	ExpressionStatement	mySock -> code ( hasKey )	769:8:23080:23100	645794	1	True				
ANR	645854	CallExpression	mySock -> code ( hasKey )		645794	0					
ANR	645855	Callee	mySock -> code		645794	0					
ANR	645856	PtrMemberAccess	mySock -> code		645794	0					
ANR	645857	Identifier	mySock		645794	0					
ANR	645858	Identifier	code		645794	1					
ANR	645859	ArgumentList	hasKey		645794	1					
ANR	645860	Argument	hasKey		645794	0					
ANR	645861	Identifier	hasKey		645794	0					
ANR	645862	ExpressionStatement	mySock -> end_of_message ( )	770:8:23110:23134	645794	2	True				
ANR	645863	CallExpression	mySock -> end_of_message ( )		645794	0					
ANR	645864	Callee	mySock -> end_of_message		645794	0					
ANR	645865	PtrMemberAccess	mySock -> end_of_message		645794	0					
ANR	645866	Identifier	mySock		645794	0					
ANR	645867	Identifier	end_of_message		645794	1					
ANR	645868	ArgumentList			645794	1					
ANR	645869	IfStatement	if ( hasKey )		645794	3					
ANR	645870	Condition	hasKey	771:12:23148:23153	645794	0	True				
ANR	645871	Identifier	hasKey		645794	0					
ANR	645872	CompoundStatement		11:20:287:287	645794	1					
ANR	645873	IfStatement	if ( ! mySock -> code ( keyLength ) || ! mySock -> code ( protocol ) || ! mySock -> code ( duration ) || ! mySock -> code ( inputLen ) )		645794	0					
ANR	645874	Condition	! mySock -> code ( keyLength ) || ! mySock -> code ( protocol ) || ! mySock -> code ( duration ) || ! mySock -> code ( inputLen )	772:16:23174:23328	645794	0	True				
ANR	645875	OrExpression	! mySock -> code ( keyLength ) || ! mySock -> code ( protocol ) || ! mySock -> code ( duration ) || ! mySock -> code ( inputLen )		645794	0		||			
ANR	645876	UnaryOperationExpression	! mySock -> code ( keyLength )		645794	0					
ANR	645877	UnaryOperator	!		645794	0					
ANR	645878	CallExpression	mySock -> code ( keyLength )		645794	1					
ANR	645879	Callee	mySock -> code		645794	0					
ANR	645880	PtrMemberAccess	mySock -> code		645794	0					
ANR	645881	Identifier	mySock		645794	0					
ANR	645882	Identifier	code		645794	1					
ANR	645883	ArgumentList	keyLength		645794	1					
ANR	645884	Argument	keyLength		645794	0					
ANR	645885	Identifier	keyLength		645794	0					
ANR	645886	OrExpression	! mySock -> code ( protocol ) || ! mySock -> code ( duration ) || ! mySock -> code ( inputLen )		645794	1		||			
ANR	645887	UnaryOperationExpression	! mySock -> code ( protocol )		645794	0					
ANR	645888	UnaryOperator	!		645794	0					
ANR	645889	CallExpression	mySock -> code ( protocol )		645794	1					
ANR	645890	Callee	mySock -> code		645794	0					
ANR	645891	PtrMemberAccess	mySock -> code		645794	0					
ANR	645892	Identifier	mySock		645794	0					
ANR	645893	Identifier	code		645794	1					
ANR	645894	ArgumentList	protocol		645794	1					
ANR	645895	Argument	protocol		645794	0					
ANR	645896	Identifier	protocol		645794	0					
ANR	645897	OrExpression	! mySock -> code ( duration ) || ! mySock -> code ( inputLen )		645794	1		||			
ANR	645898	UnaryOperationExpression	! mySock -> code ( duration )		645794	0					
ANR	645899	UnaryOperator	!		645794	0					
ANR	645900	CallExpression	mySock -> code ( duration )		645794	1					
ANR	645901	Callee	mySock -> code		645794	0					
ANR	645902	PtrMemberAccess	mySock -> code		645794	0					
ANR	645903	Identifier	mySock		645794	0					
ANR	645904	Identifier	code		645794	1					
ANR	645905	ArgumentList	duration		645794	1					
ANR	645906	Argument	duration		645794	0					
ANR	645907	Identifier	duration		645794	0					
ANR	645908	UnaryOperationExpression	! mySock -> code ( inputLen )		645794	1					
ANR	645909	UnaryOperator	!		645794	0					
ANR	645910	CallExpression	mySock -> code ( inputLen )		645794	1					
ANR	645911	Callee	mySock -> code		645794	0					
ANR	645912	PtrMemberAccess	mySock -> code		645794	0					
ANR	645913	Identifier	mySock		645794	0					
ANR	645914	Identifier	code		645794	1					
ANR	645915	ArgumentList	inputLen		645794	1					
ANR	645916	Argument	inputLen		645794	0					
ANR	645917	Identifier	inputLen		645794	0					
ANR	645918	CompoundStatement		15:41:462:462	645794	1					
ANR	645919	ReturnStatement	return 0 ;	776:16:23349:23357	645794	0	True				
ANR	645920	PrimaryExpression	0		645794	0					
ANR	645921	ExpressionStatement	encryptedKey = ( char * ) malloc ( inputLen )	778:12:23385:23425	645794	1	True				
ANR	645922	AssignmentExpression	encryptedKey = ( char * ) malloc ( inputLen )		645794	0		=			
ANR	645923	Identifier	encryptedKey		645794	0					
ANR	645924	CastExpression	( char * ) malloc ( inputLen )		645794	1					
ANR	645925	CastTarget	char *		645794	0					
ANR	645926	CallExpression	malloc ( inputLen )		645794	1					
ANR	645927	Callee	malloc		645794	0					
ANR	645928	Identifier	malloc		645794	0					
ANR	645929	ArgumentList	inputLen		645794	1					
ANR	645930	Argument	inputLen		645794	0					
ANR	645931	Identifier	inputLen		645794	0					
ANR	645932	ExpressionStatement	"mySock -> get_bytes ( encryptedKey , inputLen )"	779:12:23439:23480	645794	2	True				
ANR	645933	CallExpression	"mySock -> get_bytes ( encryptedKey , inputLen )"		645794	0					
ANR	645934	Callee	mySock -> get_bytes		645794	0					
ANR	645935	PtrMemberAccess	mySock -> get_bytes		645794	0					
ANR	645936	Identifier	mySock		645794	0					
ANR	645937	Identifier	get_bytes		645794	1					
ANR	645938	ArgumentList	encryptedKey		645794	1					
ANR	645939	Argument	encryptedKey		645794	0					
ANR	645940	Identifier	encryptedKey		645794	0					
ANR	645941	Argument	inputLen		645794	1					
ANR	645942	Identifier	inputLen		645794	0					
ANR	645943	ExpressionStatement	mySock -> end_of_message ( )	780:12:23494:23518	645794	3	True				
ANR	645944	CallExpression	mySock -> end_of_message ( )		645794	0					
ANR	645945	Callee	mySock -> end_of_message		645794	0					
ANR	645946	PtrMemberAccess	mySock -> end_of_message		645794	0					
ANR	645947	Identifier	mySock		645794	0					
ANR	645948	Identifier	end_of_message		645794	1					
ANR	645949	ArgumentList			645794	1					
ANR	645950	IfStatement	"if ( authenticator_ -> unwrap ( encryptedKey , inputLen , decryptedKey , outputLen ) )"		645794	4					
ANR	645951	Condition	"authenticator_ -> unwrap ( encryptedKey , inputLen , decryptedKey , outputLen )"	783:17:23571:23642	645794	0	True				
ANR	645952	CallExpression	"authenticator_ -> unwrap ( encryptedKey , inputLen , decryptedKey , outputLen )"		645794	0					
ANR	645953	Callee	authenticator_ -> unwrap		645794	0					
ANR	645954	PtrMemberAccess	authenticator_ -> unwrap		645794	0					
ANR	645955	Identifier	authenticator_		645794	0					
ANR	645956	Identifier	unwrap		645794	1					
ANR	645957	ArgumentList	encryptedKey		645794	1					
ANR	645958	Argument	encryptedKey		645794	0					
ANR	645959	Identifier	encryptedKey		645794	0					
ANR	645960	Argument	inputLen		645794	1					
ANR	645961	Identifier	inputLen		645794	0					
ANR	645962	Argument	decryptedKey		645794	2					
ANR	645963	Identifier	decryptedKey		645794	0					
ANR	645964	Argument	outputLen		645794	3					
ANR	645965	Identifier	outputLen		645794	0					
ANR	645966	CompoundStatement		23:92:777:777	645794	1					
ANR	645967	ExpressionStatement	"key = new KeyInfo ( ( unsigned char * ) decryptedKey , keyLength , ( Protocol ) protocol , duration )"	785:4:23668:23756	645794	0	True				
ANR	645968	AssignmentExpression	"key = new KeyInfo ( ( unsigned char * ) decryptedKey , keyLength , ( Protocol ) protocol , duration )"		645794	0		=			
ANR	645969	Identifier	key		645794	0					
ANR	645970	Expression	"( unsigned char * ) decryptedKey , keyLength , ( Protocol ) protocol , duration"		645794	1					
ANR	645971	CastExpression	( unsigned char * ) decryptedKey		645794	0					
ANR	645972	CastTarget	unsigned char *		645794	0					
ANR	645973	Identifier	decryptedKey		645794	1					
ANR	645974	Expression	"keyLength , ( Protocol ) protocol , duration"		645794	1					
ANR	645975	Identifier	keyLength		645794	0					
ANR	645976	Expression	"( Protocol ) protocol , duration"		645794	1					
ANR	645977	CastExpression	( Protocol ) protocol		645794	0					
ANR	645978	CastTarget	Protocol		645794	0					
ANR	645979	Identifier	protocol		645794	1					
ANR	645980	Identifier	duration		645794	1					
ANR	645981	ElseStatement	else		645794	0					
ANR	645982	CompoundStatement		26:10:899:899	645794	0					
ANR	645983	ExpressionStatement	retval = 0	788:4:23791:23801	645794	0	True				
ANR	645984	AssignmentExpression	retval = 0		645794	0		=			
ANR	645985	Identifier	retval		645794	0					
ANR	645986	PrimaryExpression	0		645794	1					
ANR	645987	ExpressionStatement	key = NULL	789:4:23807:23817	645794	1	True				
ANR	645988	AssignmentExpression	key = NULL		645794	0		=			
ANR	645989	Identifier	key		645794	0					
ANR	645990	Identifier	NULL		645794	1					
ANR	645991	ElseStatement	else		645794	0					
ANR	645992	CompoundStatement		32:13:978:978	645794	0					
ANR	645993	ExpressionStatement	key = NULL	793:12:23861:23871	645794	0	True				
ANR	645994	AssignmentExpression	key = NULL		645794	0		=			
ANR	645995	Identifier	key		645794	0					
ANR	645996	Identifier	NULL		645794	1					
ANR	645997	ElseStatement	else		645794	0					
ANR	645998	CompoundStatement		36:9:1029:1029	645794	0					
ANR	645999	ExpressionStatement	mySock -> encode ( )	797:8:23934:23950	645794	0	True				
ANR	646000	CallExpression	mySock -> encode ( )		645794	0					
ANR	646001	Callee	mySock -> encode		645794	0					
ANR	646002	PtrMemberAccess	mySock -> encode		645794	0					
ANR	646003	Identifier	mySock		645794	0					
ANR	646004	Identifier	encode		645794	1					
ANR	646005	ArgumentList			645794	1					
ANR	646006	IfStatement	if ( key == 0 )		645794	1					
ANR	646007	Condition	key == 0	798:12:23964:23971	645794	0	True				
ANR	646008	EqualityExpression	key == 0		645794	0		==			
ANR	646009	Identifier	key		645794	0					
ANR	646010	PrimaryExpression	0		645794	1					
ANR	646011	CompoundStatement		38:22:1105:1105	645794	1					
ANR	646012	ExpressionStatement	hasKey = 0	799:12:23988:23998	645794	0	True				
ANR	646013	AssignmentExpression	hasKey = 0		645794	0		=			
ANR	646014	Identifier	hasKey		645794	0					
ANR	646015	PrimaryExpression	0		645794	1					
ANR	646016	ExpressionStatement	mySock -> code ( hasKey )	800:12:24012:24032	645794	1	True				
ANR	646017	CallExpression	mySock -> code ( hasKey )		645794	0					
ANR	646018	Callee	mySock -> code		645794	0					
ANR	646019	PtrMemberAccess	mySock -> code		645794	0					
ANR	646020	Identifier	mySock		645794	0					
ANR	646021	Identifier	code		645794	1					
ANR	646022	ArgumentList	hasKey		645794	1					
ANR	646023	Argument	hasKey		645794	0					
ANR	646024	Identifier	hasKey		645794	0					
ANR	646025	ExpressionStatement	mySock -> end_of_message ( )	801:12:24046:24070	645794	2	True				
ANR	646026	CallExpression	mySock -> end_of_message ( )		645794	0					
ANR	646027	Callee	mySock -> end_of_message		645794	0					
ANR	646028	PtrMemberAccess	mySock -> end_of_message		645794	0					
ANR	646029	Identifier	mySock		645794	0					
ANR	646030	Identifier	end_of_message		645794	1					
ANR	646031	ArgumentList			645794	1					
ANR	646032	ReturnStatement	return 1 ;	802:12:24084:24092	645794	3	True				
ANR	646033	PrimaryExpression	1		645794	0					
ANR	646034	ElseStatement	else		645794	0					
ANR	646035	CompoundStatement		44:13:1248:1248	645794	0					
ANR	646036	ExpressionStatement	hasKey = 1	805:12:24149:24159	645794	0	True				
ANR	646037	AssignmentExpression	hasKey = 1		645794	0		=			
ANR	646038	Identifier	hasKey		645794	0					
ANR	646039	PrimaryExpression	1		645794	1					
ANR	646040	IfStatement	if ( ! mySock -> code ( hasKey ) || ! mySock -> end_of_message ( ) )		645794	1					
ANR	646041	Condition	! mySock -> code ( hasKey ) || ! mySock -> end_of_message ( )	806:16:24177:24226	645794	0	True				
ANR	646042	OrExpression	! mySock -> code ( hasKey ) || ! mySock -> end_of_message ( )		645794	0		||			
ANR	646043	UnaryOperationExpression	! mySock -> code ( hasKey )		645794	0					
ANR	646044	UnaryOperator	!		645794	0					
ANR	646045	CallExpression	mySock -> code ( hasKey )		645794	1					
ANR	646046	Callee	mySock -> code		645794	0					
ANR	646047	PtrMemberAccess	mySock -> code		645794	0					
ANR	646048	Identifier	mySock		645794	0					
ANR	646049	Identifier	code		645794	1					
ANR	646050	ArgumentList	hasKey		645794	1					
ANR	646051	Argument	hasKey		645794	0					
ANR	646052	Identifier	hasKey		645794	0					
ANR	646053	UnaryOperationExpression	! mySock -> end_of_message ( )		645794	1					
ANR	646054	UnaryOperator	!		645794	0					
ANR	646055	CallExpression	mySock -> end_of_message ( )		645794	1					
ANR	646056	Callee	mySock -> end_of_message		645794	0					
ANR	646057	PtrMemberAccess	mySock -> end_of_message		645794	0					
ANR	646058	Identifier	mySock		645794	0					
ANR	646059	Identifier	end_of_message		645794	1					
ANR	646060	ArgumentList			645794	1					
ANR	646061	CompoundStatement		46:68:1360:1360	645794	1					
ANR	646062	ReturnStatement	return 0 ;	807:16:24247:24255	645794	0	True				
ANR	646063	PrimaryExpression	0		645794	0					
ANR	646064	ExpressionStatement	keyLength = key -> getKeyLength ( )	809:12:24283:24314	645794	2	True				
ANR	646065	AssignmentExpression	keyLength = key -> getKeyLength ( )		645794	0		=			
ANR	646066	Identifier	keyLength		645794	0					
ANR	646067	CallExpression	key -> getKeyLength ( )		645794	1					
ANR	646068	Callee	key -> getKeyLength		645794	0					
ANR	646069	PtrMemberAccess	key -> getKeyLength		645794	0					
ANR	646070	Identifier	key		645794	0					
ANR	646071	Identifier	getKeyLength		645794	1					
ANR	646072	ArgumentList			645794	1					
ANR	646073	ExpressionStatement	protocol = ( int ) key -> getProtocol ( )	810:12:24328:24364	645794	3	True				
ANR	646074	AssignmentExpression	protocol = ( int ) key -> getProtocol ( )		645794	0		=			
ANR	646075	Identifier	protocol		645794	0					
ANR	646076	CastExpression	( int ) key -> getProtocol ( )		645794	1					
ANR	646077	CastTarget	int		645794	0					
ANR	646078	CallExpression	key -> getProtocol ( )		645794	1					
ANR	646079	Callee	key -> getProtocol		645794	0					
ANR	646080	PtrMemberAccess	key -> getProtocol		645794	0					
ANR	646081	Identifier	key		645794	0					
ANR	646082	Identifier	getProtocol		645794	1					
ANR	646083	ArgumentList			645794	1					
ANR	646084	ExpressionStatement	duration = key -> getDuration ( )	811:12:24378:24408	645794	4	True				
ANR	646085	AssignmentExpression	duration = key -> getDuration ( )		645794	0		=			
ANR	646086	Identifier	duration		645794	0					
ANR	646087	CallExpression	key -> getDuration ( )		645794	1					
ANR	646088	Callee	key -> getDuration		645794	0					
ANR	646089	PtrMemberAccess	key -> getDuration		645794	0					
ANR	646090	Identifier	key		645794	0					
ANR	646091	Identifier	getDuration		645794	1					
ANR	646092	ArgumentList			645794	1					
ANR	646093	IfStatement	"if ( ! authenticator_ -> wrap ( ( char * ) key -> getKeyData ( ) , keyLength , encryptedKey , outputLen ) )"		645794	5					
ANR	646094	Condition	"! authenticator_ -> wrap ( ( char * ) key -> getKeyData ( ) , keyLength , encryptedKey , outputLen )"	813:16:24427:24510	645794	0	True				
ANR	646095	UnaryOperationExpression	"! authenticator_ -> wrap ( ( char * ) key -> getKeyData ( ) , keyLength , encryptedKey , outputLen )"		645794	0					
ANR	646096	UnaryOperator	!		645794	0					
ANR	646097	CallExpression	"authenticator_ -> wrap ( ( char * ) key -> getKeyData ( ) , keyLength , encryptedKey , outputLen )"		645794	1					
ANR	646098	Callee	authenticator_ -> wrap		645794	0					
ANR	646099	PtrMemberAccess	authenticator_ -> wrap		645794	0					
ANR	646100	Identifier	authenticator_		645794	0					
ANR	646101	Identifier	wrap		645794	1					
ANR	646102	ArgumentList	( char * ) key -> getKeyData ( )		645794	1					
ANR	646103	Argument	( char * ) key -> getKeyData ( )		645794	0					
ANR	646104	CastExpression	( char * ) key -> getKeyData ( )		645794	0					
ANR	646105	CastTarget	char *		645794	0					
ANR	646106	CallExpression	key -> getKeyData ( )		645794	1					
ANR	646107	Callee	key -> getKeyData		645794	0					
ANR	646108	PtrMemberAccess	key -> getKeyData		645794	0					
ANR	646109	Identifier	key		645794	0					
ANR	646110	Identifier	getKeyData		645794	1					
ANR	646111	ArgumentList			645794	1					
ANR	646112	Argument	keyLength		645794	1					
ANR	646113	Identifier	keyLength		645794	0					
ANR	646114	Argument	encryptedKey		645794	2					
ANR	646115	Identifier	encryptedKey		645794	0					
ANR	646116	Argument	outputLen		645794	3					
ANR	646117	Identifier	outputLen		645794	0					
ANR	646118	CompoundStatement		54:3:1647:1647	645794	1					
ANR	646119	ReturnStatement	return 0 ;	816:4:24549:24557	645794	0	True				
ANR	646120	PrimaryExpression	0		645794	0					
ANR	646121	IfStatement	"if ( ! mySock -> code ( keyLength ) || ! mySock -> code ( protocol ) || ! mySock -> code ( duration ) || ! mySock -> code ( outputLen ) || ! mySock -> put_bytes ( encryptedKey , outputLen ) || ! mySock -> end_of_message ( ) )"		645794	6					
ANR	646122	Condition	"! mySock -> code ( keyLength ) || ! mySock -> code ( protocol ) || ! mySock -> code ( duration ) || ! mySock -> code ( outputLen ) || ! mySock -> put_bytes ( encryptedKey , outputLen ) || ! mySock -> end_of_message ( )"	819:16:24581:24845	645794	0	True				
ANR	646123	OrExpression	"! mySock -> code ( keyLength ) || ! mySock -> code ( protocol ) || ! mySock -> code ( duration ) || ! mySock -> code ( outputLen ) || ! mySock -> put_bytes ( encryptedKey , outputLen ) || ! mySock -> end_of_message ( )"		645794	0		||			
ANR	646124	UnaryOperationExpression	! mySock -> code ( keyLength )		645794	0					
ANR	646125	UnaryOperator	!		645794	0					
ANR	646126	CallExpression	mySock -> code ( keyLength )		645794	1					
ANR	646127	Callee	mySock -> code		645794	0					
ANR	646128	PtrMemberAccess	mySock -> code		645794	0					
ANR	646129	Identifier	mySock		645794	0					
ANR	646130	Identifier	code		645794	1					
ANR	646131	ArgumentList	keyLength		645794	1					
ANR	646132	Argument	keyLength		645794	0					
ANR	646133	Identifier	keyLength		645794	0					
ANR	646134	OrExpression	"! mySock -> code ( protocol ) || ! mySock -> code ( duration ) || ! mySock -> code ( outputLen ) || ! mySock -> put_bytes ( encryptedKey , outputLen ) || ! mySock -> end_of_message ( )"		645794	1		||			
ANR	646135	UnaryOperationExpression	! mySock -> code ( protocol )		645794	0					
ANR	646136	UnaryOperator	!		645794	0					
ANR	646137	CallExpression	mySock -> code ( protocol )		645794	1					
ANR	646138	Callee	mySock -> code		645794	0					
ANR	646139	PtrMemberAccess	mySock -> code		645794	0					
ANR	646140	Identifier	mySock		645794	0					
ANR	646141	Identifier	code		645794	1					
ANR	646142	ArgumentList	protocol		645794	1					
ANR	646143	Argument	protocol		645794	0					
ANR	646144	Identifier	protocol		645794	0					
ANR	646145	OrExpression	"! mySock -> code ( duration ) || ! mySock -> code ( outputLen ) || ! mySock -> put_bytes ( encryptedKey , outputLen ) || ! mySock -> end_of_message ( )"		645794	1		||			
ANR	646146	UnaryOperationExpression	! mySock -> code ( duration )		645794	0					
ANR	646147	UnaryOperator	!		645794	0					
ANR	646148	CallExpression	mySock -> code ( duration )		645794	1					
ANR	646149	Callee	mySock -> code		645794	0					
ANR	646150	PtrMemberAccess	mySock -> code		645794	0					
ANR	646151	Identifier	mySock		645794	0					
ANR	646152	Identifier	code		645794	1					
ANR	646153	ArgumentList	duration		645794	1					
ANR	646154	Argument	duration		645794	0					
ANR	646155	Identifier	duration		645794	0					
ANR	646156	OrExpression	"! mySock -> code ( outputLen ) || ! mySock -> put_bytes ( encryptedKey , outputLen ) || ! mySock -> end_of_message ( )"		645794	1		||			
ANR	646157	UnaryOperationExpression	! mySock -> code ( outputLen )		645794	0					
ANR	646158	UnaryOperator	!		645794	0					
ANR	646159	CallExpression	mySock -> code ( outputLen )		645794	1					
ANR	646160	Callee	mySock -> code		645794	0					
ANR	646161	PtrMemberAccess	mySock -> code		645794	0					
ANR	646162	Identifier	mySock		645794	0					
ANR	646163	Identifier	code		645794	1					
ANR	646164	ArgumentList	outputLen		645794	1					
ANR	646165	Argument	outputLen		645794	0					
ANR	646166	Identifier	outputLen		645794	0					
ANR	646167	OrExpression	"! mySock -> put_bytes ( encryptedKey , outputLen ) || ! mySock -> end_of_message ( )"		645794	1		||			
ANR	646168	UnaryOperationExpression	"! mySock -> put_bytes ( encryptedKey , outputLen )"		645794	0					
ANR	646169	UnaryOperator	!		645794	0					
ANR	646170	CallExpression	"mySock -> put_bytes ( encryptedKey , outputLen )"		645794	1					
ANR	646171	Callee	mySock -> put_bytes		645794	0					
ANR	646172	PtrMemberAccess	mySock -> put_bytes		645794	0					
ANR	646173	Identifier	mySock		645794	0					
ANR	646174	Identifier	put_bytes		645794	1					
ANR	646175	ArgumentList	encryptedKey		645794	1					
ANR	646176	Argument	encryptedKey		645794	0					
ANR	646177	Identifier	encryptedKey		645794	0					
ANR	646178	Argument	outputLen		645794	1					
ANR	646179	Identifier	outputLen		645794	0					
ANR	646180	UnaryOperationExpression	! mySock -> end_of_message ( )		645794	1					
ANR	646181	UnaryOperator	!		645794	0					
ANR	646182	CallExpression	mySock -> end_of_message ( )		645794	1					
ANR	646183	Callee	mySock -> end_of_message		645794	0					
ANR	646184	PtrMemberAccess	mySock -> end_of_message		645794	0					
ANR	646185	Identifier	mySock		645794	0					
ANR	646186	Identifier	end_of_message		645794	1					
ANR	646187	ArgumentList			645794	1					
ANR	646188	CompoundStatement		64:43:1979:1979	645794	1					
ANR	646189	ExpressionStatement	free ( encryptedKey )	825:16:24866:24884	645794	0	True				
ANR	646190	CallExpression	free ( encryptedKey )		645794	0					
ANR	646191	Callee	free		645794	0					
ANR	646192	Identifier	free		645794	0					
ANR	646193	ArgumentList	encryptedKey		645794	1					
ANR	646194	Argument	encryptedKey		645794	0					
ANR	646195	Identifier	encryptedKey		645794	0					
ANR	646196	ReturnStatement	return 0 ;	826:16:24902:24910	645794	1	True				
ANR	646197	PrimaryExpression	0		645794	0					
ANR	646198	IfStatement	if ( encryptedKey )		645794	5					
ANR	646199	Condition	encryptedKey	831:8:24951:24962	645794	0	True				
ANR	646200	Identifier	encryptedKey		645794	0					
ANR	646201	CompoundStatement		71:22:2096:2096	645794	1					
ANR	646202	ExpressionStatement	free ( encryptedKey )	832:8:24975:24993	645794	0	True				
ANR	646203	CallExpression	free ( encryptedKey )		645794	0					
ANR	646204	Callee	free		645794	0					
ANR	646205	Identifier	free		645794	0					
ANR	646206	ArgumentList	encryptedKey		645794	1					
ANR	646207	Argument	encryptedKey		645794	0					
ANR	646208	Identifier	encryptedKey		645794	0					
ANR	646209	IfStatement	if ( decryptedKey )		645794	6					
ANR	646210	Condition	decryptedKey	835:8:25010:25021	645794	0	True				
ANR	646211	Identifier	decryptedKey		645794	0					
ANR	646212	CompoundStatement		75:22:2155:2155	645794	1					
ANR	646213	ExpressionStatement	free ( decryptedKey )	836:8:25034:25052	645794	0	True				
ANR	646214	CallExpression	free ( decryptedKey )		645794	0					
ANR	646215	Callee	free		645794	0					
ANR	646216	Identifier	free		645794	0					
ANR	646217	ArgumentList	decryptedKey		645794	1					
ANR	646218	Argument	decryptedKey		645794	0					
ANR	646219	Identifier	decryptedKey		645794	0					
ANR	646220	ReturnStatement	return retval ;	839:4:25065:25078	645794	7	True				
ANR	646221	Identifier	retval		645794	0					
ANR	646222	ReturnType	int		645794	1					
ANR	646223	Identifier	Authentication :: exchangeKey		645794	2					
ANR	646224	ParameterList	KeyInfo * & key		645794	3					
ANR	646225	Parameter	KeyInfo * & key	760:32:22852:22865	645794	0	True				
ANR	646226	ParameterType	KeyInfo * &		645794	0					
ANR	646227	Identifier	key		645794	1					
ANR	646228	CFGEntryNode	ENTRY		645794		True				
ANR	646229	CFGExitNode	EXIT		645794		True				
ANR	646230	Symbol	mySock		645794						
ANR	646231	Symbol	* authenticator_		645794						
ANR	646232	Symbol	authenticator_ -> unwrap		645794						
ANR	646233	Symbol	decryptedKey		645794						
ANR	646234	Symbol	mySock -> isClient		645794						
ANR	646235	Symbol	* key		645794						
ANR	646236	Symbol	key -> getKeyData		645794						
ANR	646237	Symbol	* mySock		645794						
ANR	646238	Symbol	duration		645794						
ANR	646239	Symbol	mySock -> code		645794						
ANR	646240	Symbol	authenticator_ -> wrap		645794						
ANR	646241	Symbol	protocol		645794						
ANR	646242	Symbol	keyLength		645794						
ANR	646243	Symbol	mySock -> end_of_message		645794						
ANR	646244	Symbol	key -> getDuration		645794						
ANR	646245	Symbol	key		645794						
ANR	646246	Symbol	hasKey		645794						
ANR	646247	Symbol	malloc		645794						
ANR	646248	Symbol	NULL		645794						
ANR	646249	Symbol	inputLen		645794						
ANR	646250	Symbol	encryptedKey		645794						
ANR	646251	Symbol	key -> getKeyLength		645794						
ANR	646252	Symbol	authenticator_		645794						
ANR	646253	Symbol	retval		645794						
ANR	646254	Symbol	key -> getProtocol		645794						
ANR	646255	Symbol	mySock -> put_bytes		645794						
ANR	646256	Symbol	outputLen		645794						
ANR	646257	Function	Authentication :: setAuthType	843:0:25084:25157							
ANR	646258	FunctionDef	Authentication :: setAuthType (int state)		646257	0					
ANR	646259	CompoundStatement		843:46:25130:25157	646257	0					
ANR	646260	ExpressionStatement	auth_status = state	844:4:25136:25155	646257	0	True				
ANR	646261	AssignmentExpression	auth_status = state		646257	0		=			
ANR	646262	Identifier	auth_status		646257	0					
ANR	646263	Identifier	state		646257	1					
ANR	646264	ReturnType	void		646257	1					
ANR	646265	Identifier	Authentication :: setAuthType		646257	2					
ANR	646266	ParameterList	int state		646257	3					
ANR	646267	Parameter	int state	843:34:25118:25126	646257	0	True				
ANR	646268	ParameterType	int		646257	0					
ANR	646269	Identifier	state		646257	1					
ANR	646270	CFGEntryNode	ENTRY		646257		True				
ANR	646271	CFGExitNode	EXIT		646257		True				
ANR	646272	Symbol	state		646257						
ANR	646273	Symbol	auth_status		646257						
ANR	646274	Function	Authentication :: handshake	848:0:25161:26815							
ANR	646275	FunctionDef	Authentication :: handshake (MyString my_methods)		646274	0					
ANR	646276	CompoundStatement		848:51:25212:26815	646274	0					
ANR	646277	IdentifierDeclStatement	int shouldUseMethod = 0 ;	850:4:25219:25242	646274	0	True				
ANR	646278	IdentifierDecl	shouldUseMethod = 0		646274	0					
ANR	646279	IdentifierDeclType	int		646274	0					
ANR	646280	Identifier	shouldUseMethod		646274	1					
ANR	646281	AssignmentExpression	shouldUseMethod = 0		646274	2		=			
ANR	646282	Identifier	shouldUseMethod		646274	0					
ANR	646283	PrimaryExpression	0		646274	1					
ANR	646284	ExpressionStatement	"dprintf ( D_SECURITY , ""HANDSHAKE: in handshake(my_methods = '%s')\\n"" , my_methods . Value ( ) )"	852:4:25253:25342	646274	1	True				
ANR	646285	CallExpression	"dprintf ( D_SECURITY , ""HANDSHAKE: in handshake(my_methods = '%s')\\n"" , my_methods . Value ( ) )"		646274	0					
ANR	646286	Callee	dprintf		646274	0					
ANR	646287	Identifier	dprintf		646274	0					
ANR	646288	ArgumentList	D_SECURITY		646274	1					
ANR	646289	Argument	D_SECURITY		646274	0					
ANR	646290	Identifier	D_SECURITY		646274	0					
ANR	646291	Argument	"""HANDSHAKE: in handshake(my_methods = '%s')\\n"""		646274	1					
ANR	646292	PrimaryExpression	"""HANDSHAKE: in handshake(my_methods = '%s')\\n"""		646274	0					
ANR	646293	Argument	my_methods . Value ( )		646274	2					
ANR	646294	CallExpression	my_methods . Value ( )		646274	0					
ANR	646295	Callee	my_methods . Value		646274	0					
ANR	646296	MemberAccess	my_methods . Value		646274	0					
ANR	646297	Identifier	my_methods		646274	0					
ANR	646298	Identifier	Value		646274	1					
ANR	646299	ArgumentList			646274	1					
ANR	646300	IfStatement	if ( mySock -> isClient ( ) )		646274	2					
ANR	646301	Condition	mySock -> isClient ( )	854:9:25354:25371	646274	0	True				
ANR	646302	CallExpression	mySock -> isClient ( )		646274	0					
ANR	646303	Callee	mySock -> isClient		646274	0					
ANR	646304	PtrMemberAccess	mySock -> isClient		646274	0					
ANR	646305	Identifier	mySock		646274	0					
ANR	646306	Identifier	isClient		646274	1					
ANR	646307	ArgumentList			646274	1					
ANR	646308	CompoundStatement		13:2:282:345	646274	1					
ANR	646309	ExpressionStatement	"dprintf ( D_SECURITY , ""HANDSHAKE: handshake() - i am the client\\n"" )"	858:8:25399:25465	646274	0	True				
ANR	646310	CallExpression	"dprintf ( D_SECURITY , ""HANDSHAKE: handshake() - i am the client\\n"" )"		646274	0					
ANR	646311	Callee	dprintf		646274	0					
ANR	646312	Identifier	dprintf		646274	0					
ANR	646313	ArgumentList	D_SECURITY		646274	1					
ANR	646314	Argument	D_SECURITY		646274	0					
ANR	646315	Identifier	D_SECURITY		646274	0					
ANR	646316	Argument	"""HANDSHAKE: handshake() - i am the client\\n"""		646274	1					
ANR	646317	PrimaryExpression	"""HANDSHAKE: handshake() - i am the client\\n"""		646274	0					
ANR	646318	ExpressionStatement	mySock -> encode ( )	859:8:25475:25491	646274	1	True				
ANR	646319	CallExpression	mySock -> encode ( )		646274	0					
ANR	646320	Callee	mySock -> encode		646274	0					
ANR	646321	PtrMemberAccess	mySock -> encode		646274	0					
ANR	646322	Identifier	mySock		646274	0					
ANR	646323	Identifier	encode		646274	1					
ANR	646324	ArgumentList			646274	1					
ANR	646325	IdentifierDeclStatement	int method_bitmask = SecMan :: getAuthBitmask ( my_methods . Value ( ) ) ;	860:2:25495:25558	646274	2	True				
ANR	646326	IdentifierDecl	method_bitmask = SecMan :: getAuthBitmask ( my_methods . Value ( ) )		646274	0					
ANR	646327	IdentifierDeclType	int		646274	0					
ANR	646328	Identifier	method_bitmask		646274	1					
ANR	646329	AssignmentExpression	method_bitmask = SecMan :: getAuthBitmask ( my_methods . Value ( ) )		646274	2		=			
ANR	646330	Identifier	method_bitmask		646274	0					
ANR	646331	CallExpression	SecMan :: getAuthBitmask ( my_methods . Value ( ) )		646274	1					
ANR	646332	Callee	SecMan :: getAuthBitmask		646274	0					
ANR	646333	Identifier	SecMan :: getAuthBitmask		646274	0					
ANR	646334	ArgumentList	my_methods . Value ( )		646274	1					
ANR	646335	Argument	my_methods . Value ( )		646274	0					
ANR	646336	CallExpression	my_methods . Value ( )		646274	0					
ANR	646337	Callee	my_methods . Value		646274	0					
ANR	646338	MemberAccess	my_methods . Value		646274	0					
ANR	646339	Identifier	my_methods		646274	0					
ANR	646340	Identifier	Value		646274	1					
ANR	646341	ArgumentList			646274	1					
ANR	646342	ExpressionStatement	"dprintf ( D_SECURITY , ""HANDSHAKE: sending (methods == %i) to server\\n"" , method_bitmask )"	861:8:25568:25655	646274	3	True				
ANR	646343	CallExpression	"dprintf ( D_SECURITY , ""HANDSHAKE: sending (methods == %i) to server\\n"" , method_bitmask )"		646274	0					
ANR	646344	Callee	dprintf		646274	0					
ANR	646345	Identifier	dprintf		646274	0					
ANR	646346	ArgumentList	D_SECURITY		646274	1					
ANR	646347	Argument	D_SECURITY		646274	0					
ANR	646348	Identifier	D_SECURITY		646274	0					
ANR	646349	Argument	"""HANDSHAKE: sending (methods == %i) to server\\n"""		646274	1					
ANR	646350	PrimaryExpression	"""HANDSHAKE: sending (methods == %i) to server\\n"""		646274	0					
ANR	646351	Argument	method_bitmask		646274	2					
ANR	646352	Identifier	method_bitmask		646274	0					
ANR	646353	IfStatement	if ( ! mySock -> code ( method_bitmask ) || ! mySock -> end_of_message ( ) )		646274	4					
ANR	646354	Condition	! mySock -> code ( method_bitmask ) || ! mySock -> end_of_message ( )	862:13:25670:25729	646274	0	True				
ANR	646355	OrExpression	! mySock -> code ( method_bitmask ) || ! mySock -> end_of_message ( )		646274	0		||			
ANR	646356	UnaryOperationExpression	! mySock -> code ( method_bitmask )		646274	0					
ANR	646357	UnaryOperator	!		646274	0					
ANR	646358	CallExpression	mySock -> code ( method_bitmask )		646274	1					
ANR	646359	Callee	mySock -> code		646274	0					
ANR	646360	PtrMemberAccess	mySock -> code		646274	0					
ANR	646361	Identifier	mySock		646274	0					
ANR	646362	Identifier	code		646274	1					
ANR	646363	ArgumentList	method_bitmask		646274	1					
ANR	646364	Argument	method_bitmask		646274	0					
ANR	646365	Identifier	method_bitmask		646274	0					
ANR	646366	UnaryOperationExpression	! mySock -> end_of_message ( )		646274	1					
ANR	646367	UnaryOperator	!		646274	0					
ANR	646368	CallExpression	mySock -> end_of_message ( )		646274	1					
ANR	646369	Callee	mySock -> end_of_message		646274	0					
ANR	646370	PtrMemberAccess	mySock -> end_of_message		646274	0					
ANR	646371	Identifier	mySock		646274	0					
ANR	646372	Identifier	end_of_message		646274	1					
ANR	646373	ArgumentList			646274	1					
ANR	646374	CompoundStatement		15:76:520:520	646274	1					
ANR	646375	ReturnStatement	return - 1 ;	863:12:25747:25756	646274	0	True				
ANR	646376	UnaryOperationExpression	- 1		646274	0					
ANR	646377	UnaryOperator	-		646274	0					
ANR	646378	PrimaryExpression	1		646274	1					
ANR	646379	ExpressionStatement	mySock -> decode ( )	866:5:25774:25790	646274	5	True				
ANR	646380	CallExpression	mySock -> decode ( )		646274	0					
ANR	646381	Callee	mySock -> decode		646274	0					
ANR	646382	PtrMemberAccess	mySock -> decode		646274	0					
ANR	646383	Identifier	mySock		646274	0					
ANR	646384	Identifier	decode		646274	1					
ANR	646385	ArgumentList			646274	1					
ANR	646386	IfStatement	if ( ! mySock -> code ( shouldUseMethod ) || ! mySock -> end_of_message ( ) )		646274	6					
ANR	646387	Condition	! mySock -> code ( shouldUseMethod ) || ! mySock -> end_of_message ( )	867:10:25802:25862	646274	0	True				
ANR	646388	OrExpression	! mySock -> code ( shouldUseMethod ) || ! mySock -> end_of_message ( )		646274	0		||			
ANR	646389	UnaryOperationExpression	! mySock -> code ( shouldUseMethod )		646274	0					
ANR	646390	UnaryOperator	!		646274	0					
ANR	646391	CallExpression	mySock -> code ( shouldUseMethod )		646274	1					
ANR	646392	Callee	mySock -> code		646274	0					
ANR	646393	PtrMemberAccess	mySock -> code		646274	0					
ANR	646394	Identifier	mySock		646274	0					
ANR	646395	Identifier	code		646274	1					
ANR	646396	ArgumentList	shouldUseMethod		646274	1					
ANR	646397	Argument	shouldUseMethod		646274	0					
ANR	646398	Identifier	shouldUseMethod		646274	0					
ANR	646399	UnaryOperationExpression	! mySock -> end_of_message ( )		646274	1					
ANR	646400	UnaryOperator	!		646274	0					
ANR	646401	CallExpression	mySock -> end_of_message ( )		646274	1					
ANR	646402	Callee	mySock -> end_of_message		646274	0					
ANR	646403	PtrMemberAccess	mySock -> end_of_message		646274	0					
ANR	646404	Identifier	mySock		646274	0					
ANR	646405	Identifier	end_of_message		646274	1					
ANR	646406	ArgumentList			646274	1					
ANR	646407	CompoundStatement		20:75:654:654	646274	1					
ANR	646408	ReturnStatement	return - 1 ;	868:9:25878:25887	646274	0	True				
ANR	646409	UnaryOperationExpression	- 1		646274	0					
ANR	646410	UnaryOperator	-		646274	0					
ANR	646411	PrimaryExpression	1		646274	1					
ANR	646412	ExpressionStatement	"dprintf ( D_SECURITY , ""HANDSHAKE: server replied (method = %i)\\n"" , shouldUseMethod )"	870:5:25901:25984	646274	7	True				
ANR	646413	CallExpression	"dprintf ( D_SECURITY , ""HANDSHAKE: server replied (method = %i)\\n"" , shouldUseMethod )"		646274	0					
ANR	646414	Callee	dprintf		646274	0					
ANR	646415	Identifier	dprintf		646274	0					
ANR	646416	ArgumentList	D_SECURITY		646274	1					
ANR	646417	Argument	D_SECURITY		646274	0					
ANR	646418	Identifier	D_SECURITY		646274	0					
ANR	646419	Argument	"""HANDSHAKE: server replied (method = %i)\\n"""		646274	1					
ANR	646420	PrimaryExpression	"""HANDSHAKE: server replied (method = %i)\\n"""		646274	0					
ANR	646421	Argument	shouldUseMethod		646274	2					
ANR	646422	Identifier	shouldUseMethod		646274	0					
ANR	646423	ElseStatement	else		646274	0					
ANR	646424	CompoundStatement		29:2:802:824	646274	0					
ANR	646425	IdentifierDeclStatement	int client_methods = 0 ;	876:2:26015:26037	646274	0	True				
ANR	646426	IdentifierDecl	client_methods = 0		646274	0					
ANR	646427	IdentifierDeclType	int		646274	0					
ANR	646428	Identifier	client_methods		646274	1					
ANR	646429	AssignmentExpression	client_methods = 0		646274	2		=			
ANR	646430	Identifier	client_methods		646274	0					
ANR	646431	PrimaryExpression	0		646274	1					
ANR	646432	ExpressionStatement	"dprintf ( D_SECURITY , ""HANDSHAKE: handshake() - i am the server\\n"" )"	877:8:26047:26113	646274	1	True				
ANR	646433	CallExpression	"dprintf ( D_SECURITY , ""HANDSHAKE: handshake() - i am the server\\n"" )"		646274	0					
ANR	646434	Callee	dprintf		646274	0					
ANR	646435	Identifier	dprintf		646274	0					
ANR	646436	ArgumentList	D_SECURITY		646274	1					
ANR	646437	Argument	D_SECURITY		646274	0					
ANR	646438	Identifier	D_SECURITY		646274	0					
ANR	646439	Argument	"""HANDSHAKE: handshake() - i am the server\\n"""		646274	1					
ANR	646440	PrimaryExpression	"""HANDSHAKE: handshake() - i am the server\\n"""		646274	0					
ANR	646441	ExpressionStatement	mySock -> decode ( )	878:8:26123:26139	646274	2	True				
ANR	646442	CallExpression	mySock -> decode ( )		646274	0					
ANR	646443	Callee	mySock -> decode		646274	0					
ANR	646444	PtrMemberAccess	mySock -> decode		646274	0					
ANR	646445	Identifier	mySock		646274	0					
ANR	646446	Identifier	decode		646274	1					
ANR	646447	ArgumentList			646274	1					
ANR	646448	IfStatement	if ( ! mySock -> code ( client_methods ) || ! mySock -> end_of_message ( ) )		646274	3					
ANR	646449	Condition	! mySock -> code ( client_methods ) || ! mySock -> end_of_message ( )	879:13:26154:26213	646274	0	True				
ANR	646450	OrExpression	! mySock -> code ( client_methods ) || ! mySock -> end_of_message ( )		646274	0		||			
ANR	646451	UnaryOperationExpression	! mySock -> code ( client_methods )		646274	0					
ANR	646452	UnaryOperator	!		646274	0					
ANR	646453	CallExpression	mySock -> code ( client_methods )		646274	1					
ANR	646454	Callee	mySock -> code		646274	0					
ANR	646455	PtrMemberAccess	mySock -> code		646274	0					
ANR	646456	Identifier	mySock		646274	0					
ANR	646457	Identifier	code		646274	1					
ANR	646458	ArgumentList	client_methods		646274	1					
ANR	646459	Argument	client_methods		646274	0					
ANR	646460	Identifier	client_methods		646274	0					
ANR	646461	UnaryOperationExpression	! mySock -> end_of_message ( )		646274	1					
ANR	646462	UnaryOperator	!		646274	0					
ANR	646463	CallExpression	mySock -> end_of_message ( )		646274	1					
ANR	646464	Callee	mySock -> end_of_message		646274	0					
ANR	646465	PtrMemberAccess	mySock -> end_of_message		646274	0					
ANR	646466	Identifier	mySock		646274	0					
ANR	646467	Identifier	end_of_message		646274	1					
ANR	646468	ArgumentList			646274	1					
ANR	646469	CompoundStatement		32:76:1004:1004	646274	1					
ANR	646470	ReturnStatement	return - 1 ;	880:12:26231:26240	646274	0	True				
ANR	646471	UnaryOperationExpression	- 1		646274	0					
ANR	646472	UnaryOperator	-		646274	0					
ANR	646473	PrimaryExpression	1		646274	1					
ANR	646474	ExpressionStatement	"dprintf ( D_SECURITY , ""HANDSHAKE: client sent (methods == %i)\\n"" , client_methods )"	882:8:26260:26341	646274	4	True				
ANR	646475	CallExpression	"dprintf ( D_SECURITY , ""HANDSHAKE: client sent (methods == %i)\\n"" , client_methods )"		646274	0					
ANR	646476	Callee	dprintf		646274	0					
ANR	646477	Identifier	dprintf		646274	0					
ANR	646478	ArgumentList	D_SECURITY		646274	1					
ANR	646479	Argument	D_SECURITY		646274	0					
ANR	646480	Identifier	D_SECURITY		646274	0					
ANR	646481	Argument	"""HANDSHAKE: client sent (methods == %i)\\n"""		646274	1					
ANR	646482	PrimaryExpression	"""HANDSHAKE: client sent (methods == %i)\\n"""		646274	0					
ANR	646483	Argument	client_methods		646274	2					
ANR	646484	Identifier	client_methods		646274	0					
ANR	646485	ExpressionStatement	"shouldUseMethod = selectAuthenticationType ( my_methods , client_methods )"	884:8:26360:26432	646274	5	True				
ANR	646486	AssignmentExpression	"shouldUseMethod = selectAuthenticationType ( my_methods , client_methods )"		646274	0		=			
ANR	646487	Identifier	shouldUseMethod		646274	0					
ANR	646488	CallExpression	"selectAuthenticationType ( my_methods , client_methods )"		646274	1					
ANR	646489	Callee	selectAuthenticationType		646274	0					
ANR	646490	Identifier	selectAuthenticationType		646274	0					
ANR	646491	ArgumentList	my_methods		646274	1					
ANR	646492	Argument	my_methods		646274	0					
ANR	646493	Identifier	my_methods		646274	0					
ANR	646494	Argument	client_methods		646274	1					
ANR	646495	Identifier	client_methods		646274	0					
ANR	646496	ExpressionStatement	"dprintf ( D_SECURITY , ""HANDSHAKE: i picked (method == %i)\\n"" , shouldUseMethod )"	886:8:26443:26521	646274	6	True				
ANR	646497	CallExpression	"dprintf ( D_SECURITY , ""HANDSHAKE: i picked (method == %i)\\n"" , shouldUseMethod )"		646274	0					
ANR	646498	Callee	dprintf		646274	0					
ANR	646499	Identifier	dprintf		646274	0					
ANR	646500	ArgumentList	D_SECURITY		646274	1					
ANR	646501	Argument	D_SECURITY		646274	0					
ANR	646502	Identifier	D_SECURITY		646274	0					
ANR	646503	Argument	"""HANDSHAKE: i picked (method == %i)\\n"""		646274	1					
ANR	646504	PrimaryExpression	"""HANDSHAKE: i picked (method == %i)\\n"""		646274	0					
ANR	646505	Argument	shouldUseMethod		646274	2					
ANR	646506	Identifier	shouldUseMethod		646274	0					
ANR	646507	ExpressionStatement	mySock -> encode ( )	889:8:26549:26565	646274	7	True				
ANR	646508	CallExpression	mySock -> encode ( )		646274	0					
ANR	646509	Callee	mySock -> encode		646274	0					
ANR	646510	PtrMemberAccess	mySock -> encode		646274	0					
ANR	646511	Identifier	mySock		646274	0					
ANR	646512	Identifier	encode		646274	1					
ANR	646513	ArgumentList			646274	1					
ANR	646514	IfStatement	if ( ! mySock -> code ( shouldUseMethod ) || ! mySock -> end_of_message ( ) )		646274	8					
ANR	646515	Condition	! mySock -> code ( shouldUseMethod ) || ! mySock -> end_of_message ( )	890:13:26580:26640	646274	0	True				
ANR	646516	OrExpression	! mySock -> code ( shouldUseMethod ) || ! mySock -> end_of_message ( )		646274	0		||			
ANR	646517	UnaryOperationExpression	! mySock -> code ( shouldUseMethod )		646274	0					
ANR	646518	UnaryOperator	!		646274	0					
ANR	646519	CallExpression	mySock -> code ( shouldUseMethod )		646274	1					
ANR	646520	Callee	mySock -> code		646274	0					
ANR	646521	PtrMemberAccess	mySock -> code		646274	0					
ANR	646522	Identifier	mySock		646274	0					
ANR	646523	Identifier	code		646274	1					
ANR	646524	ArgumentList	shouldUseMethod		646274	1					
ANR	646525	Argument	shouldUseMethod		646274	0					
ANR	646526	Identifier	shouldUseMethod		646274	0					
ANR	646527	UnaryOperationExpression	! mySock -> end_of_message ( )		646274	1					
ANR	646528	UnaryOperator	!		646274	0					
ANR	646529	CallExpression	mySock -> end_of_message ( )		646274	1					
ANR	646530	Callee	mySock -> end_of_message		646274	0					
ANR	646531	PtrMemberAccess	mySock -> end_of_message		646274	0					
ANR	646532	Identifier	mySock		646274	0					
ANR	646533	Identifier	end_of_message		646274	1					
ANR	646534	ArgumentList			646274	1					
ANR	646535	CompoundStatement		43:77:1431:1431	646274	1					
ANR	646536	ReturnStatement	return - 1 ;	891:12:26658:26667	646274	0	True				
ANR	646537	UnaryOperationExpression	- 1		646274	0					
ANR	646538	UnaryOperator	-		646274	0					
ANR	646539	PrimaryExpression	1		646274	1					
ANR	646540	ExpressionStatement	"dprintf ( D_SECURITY , ""HANDSHAKE: client received (method == %i)\\n"" , shouldUseMethod )"	894:2:26690:26775	646274	9	True				
ANR	646541	CallExpression	"dprintf ( D_SECURITY , ""HANDSHAKE: client received (method == %i)\\n"" , shouldUseMethod )"		646274	0					
ANR	646542	Callee	dprintf		646274	0					
ANR	646543	Identifier	dprintf		646274	0					
ANR	646544	ArgumentList	D_SECURITY		646274	1					
ANR	646545	Argument	D_SECURITY		646274	0					
ANR	646546	Identifier	D_SECURITY		646274	0					
ANR	646547	Argument	"""HANDSHAKE: client received (method == %i)\\n"""		646274	1					
ANR	646548	PrimaryExpression	"""HANDSHAKE: client received (method == %i)\\n"""		646274	0					
ANR	646549	Argument	shouldUseMethod		646274	2					
ANR	646550	Identifier	shouldUseMethod		646274	0					
ANR	646551	ReturnStatement	return ( shouldUseMethod ) ;	897:4:26788:26813	646274	3	True				
ANR	646552	Identifier	shouldUseMethod		646274	0					
ANR	646553	ReturnType	int		646274	1					
ANR	646554	Identifier	Authentication :: handshake		646274	2					
ANR	646555	ParameterList	MyString my_methods		646274	3					
ANR	646556	Parameter	MyString my_methods	848:30:25191:25209	646274	0	True				
ANR	646557	ParameterType	MyString		646274	0					
ANR	646558	Identifier	my_methods		646274	1					
ANR	646559	CFGEntryNode	ENTRY		646274		True				
ANR	646560	CFGExitNode	EXIT		646274		True				
ANR	646561	Symbol	mySock		646274						
ANR	646562	Symbol	my_methods . Value		646274						
ANR	646563	Symbol	shouldUseMethod		646274						
ANR	646564	Symbol	D_SECURITY		646274						
ANR	646565	Symbol	mySock -> isClient		646274						
ANR	646566	Symbol	client_methods		646274						
ANR	646567	Symbol	SecMan :: getAuthBitmask		646274						
ANR	646568	Symbol	method_bitmask		646274						
ANR	646569	Symbol	selectAuthenticationType		646274						
ANR	646570	Symbol	* mySock		646274						
ANR	646571	Symbol	mySock -> code		646274						
ANR	646572	Symbol	mySock -> end_of_message		646274						
ANR	646573	Symbol	my_methods		646274						
ANR	646574	Function	Authentication :: selectAuthenticationType	902:0:26820:27305							
ANR	646575	FunctionDef	"Authentication :: selectAuthenticationType (MyString method_order , int remote_methods)"		646574	0					
ANR	646576	CompoundStatement		902:90:26910:27305	646574	0					
ANR	646577	IdentifierDeclStatement	StringList method_list ( method_order . Value ( ) ) ;	907:1:27025:27071	646574	0	True				
ANR	646578	IdentifierDecl	method_list ( method_order . Value ( ) )		646574	0					
ANR	646579	IdentifierDeclType	StringList		646574	0					
ANR	646580	Identifier	method_list		646574	1					
ANR	646581	CallExpression	method_order . Value ( )		646574	2					
ANR	646582	Callee	method_order . Value		646574	0					
ANR	646583	MemberAccess	method_order . Value		646574	0					
ANR	646584	Identifier	method_order		646574	0					
ANR	646585	Identifier	Value		646574	1					
ANR	646586	ArgumentList			646574	1					
ANR	646587	IdentifierDeclStatement	char * tmp = NULL ;	909:1:27075:27092	646574	1	True				
ANR	646588	IdentifierDecl	* tmp = NULL		646574	0					
ANR	646589	IdentifierDeclType	char *		646574	0					
ANR	646590	Identifier	tmp		646574	1					
ANR	646591	AssignmentExpression	* tmp = NULL		646574	2		=			
ANR	646592	Identifier	NULL		646574	0					
ANR	646593	Identifier	NULL		646574	1					
ANR	646594	ExpressionStatement	method_list . rewind ( )	910:1:27095:27115	646574	2	True				
ANR	646595	CallExpression	method_list . rewind ( )		646574	0					
ANR	646596	Callee	method_list . rewind		646574	0					
ANR	646597	MemberAccess	method_list . rewind		646574	0					
ANR	646598	Identifier	method_list		646574	0					
ANR	646599	Identifier	rewind		646574	1					
ANR	646600	ArgumentList			646574	1					
ANR	646601	WhileStatement	while ( ( tmp = method_list . next ( ) ) )		646574	3					
ANR	646602	Condition	tmp = method_list . next ( )	912:9:27127:27152	646574	0	True				
ANR	646603	AssignmentExpression	tmp = method_list . next ( )		646574	0		=			
ANR	646604	Identifier	tmp		646574	0					
ANR	646605	CallExpression	method_list . next ( )		646574	1					
ANR	646606	Callee	method_list . next		646574	0					
ANR	646607	MemberAccess	method_list . next		646574	0					
ANR	646608	Identifier	method_list		646574	0					
ANR	646609	Identifier	next		646574	1					
ANR	646610	ArgumentList			646574	1					
ANR	646611	CompoundStatement		12:2:249:293	646574	1					
ANR	646612	IdentifierDeclStatement	int that_bit = SecMan :: getAuthBitmask ( tmp ) ;	913:2:27160:27204	646574	0	True				
ANR	646613	IdentifierDecl	that_bit = SecMan :: getAuthBitmask ( tmp )		646574	0					
ANR	646614	IdentifierDeclType	int		646574	0					
ANR	646615	Identifier	that_bit		646574	1					
ANR	646616	AssignmentExpression	that_bit = SecMan :: getAuthBitmask ( tmp )		646574	2		=			
ANR	646617	Identifier	that_bit		646574	0					
ANR	646618	CallExpression	SecMan :: getAuthBitmask ( tmp )		646574	1					
ANR	646619	Callee	SecMan :: getAuthBitmask		646574	0					
ANR	646620	Identifier	SecMan :: getAuthBitmask		646574	0					
ANR	646621	ArgumentList	tmp		646574	1					
ANR	646622	Argument	tmp		646574	0					
ANR	646623	Identifier	tmp		646574	0					
ANR	646624	IfStatement	if ( remote_methods & that_bit )		646574	1					
ANR	646625	Condition	remote_methods & that_bit	914:7:27213:27237	646574	0	True				
ANR	646626	BitAndExpression	remote_methods & that_bit		646574	0		&			
ANR	646627	Identifier	remote_methods		646574	0					
ANR	646628	Identifier	that_bit		646574	1					
ANR	646629	CompoundStatement		13:35:330:330	646574	1					
ANR	646630	ReturnStatement	return that_bit ;	916:3:27269:27284	646574	0	True				
ANR	646631	Identifier	that_bit		646574	0					
ANR	646632	ReturnStatement	return 0 ;	920:1:27295:27303	646574	4	True				
ANR	646633	PrimaryExpression	0		646574	0					
ANR	646634	ReturnType	int		646574	1					
ANR	646635	Identifier	Authentication :: selectAuthenticationType		646574	2					
ANR	646636	ParameterList	"MyString method_order , int remote_methods"		646574	3					
ANR	646637	Parameter	MyString method_order	902:46:26866:26886	646574	0	True				
ANR	646638	ParameterType	MyString		646574	0					
ANR	646639	Identifier	method_order		646574	1					
ANR	646640	Parameter	int remote_methods	902:69:26889:26906	646574	1	True				
ANR	646641	ParameterType	int		646574	0					
ANR	646642	Identifier	remote_methods		646574	1					
ANR	646643	CFGEntryNode	ENTRY		646574		True				
ANR	646644	CFGExitNode	EXIT		646574		True				
ANR	646645	Symbol	that_bit		646574						
ANR	646646	Symbol	method_order		646574						
ANR	646647	Symbol	NULL		646574						
ANR	646648	Symbol	remote_methods		646574						
ANR	646649	Symbol	tmp		646574						
ANR	646650	Symbol	method_list		646574						
ANR	646651	Symbol	method_list . next		646574						
ANR	646652	Symbol	SecMan :: getAuthBitmask		646574						
