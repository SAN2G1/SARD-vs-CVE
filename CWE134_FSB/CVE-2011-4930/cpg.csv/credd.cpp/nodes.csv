command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1030468	File	data/converged/CVE-2011-4930_htcondor/credd.cpp								
ANR	1030469	DeclStmt									
ANR	1030470	Decl							SimpleList < CredentialWrapper * >	SimpleList < CredentialWrapper * >	credentials
ANR	1030471	DeclStmt									
ANR	1030472	Decl							extern int	extern int	myproxyGetDelegationReaperId
ANR	1030473	DeclStmt									
ANR	1030474	Decl							StringList	StringList	super_users
ANR	1030475	DeclStmt									
ANR	1030476	Decl							char	char *	cred_store_dir
ANR	1030477	DeclStmt									
ANR	1030478	Decl							char	char *	cred_index_file
ANR	1030479	DeclStmt									
ANR	1030480	Decl							int	int	CheckCredentials_interval
ANR	1030481	DeclStmt									
ANR	1030482	Decl							int	int	default_cred_expire_threshold
ANR	1030483	DeclStmt									
ANR	1030484	Decl							void	void *	data
ANR	1030485	DeclStmt									
ANR	1030486	Decl							int	int	rtnVal
ANR	1030487	DeclStmt									
ANR	1030488	Decl							int	int	rc
ANR	1030489	DeclStmt									
ANR	1030490	Decl							char	char *	temp_file_name
ANR	1030491	DeclStmt									
ANR	1030492	Decl							bool	bool	found_cred
ANR	1030493	DeclStmt									
ANR	1030494	Decl							CredentialWrapper	CredentialWrapper *	temp_cred
ANR	1030495	DeclStmt									
ANR	1030496	Decl							int	int	data_size
ANR	1030497	DeclStmt									
ANR	1030498	Decl							classad :: ClassAd	classad :: ClassAd *	_classad
ANR	1030499	DeclStmt									
ANR	1030500	Decl							classad :: ClassAd	classad :: ClassAd	classad
ANR	1030501	DeclStmt									
ANR	1030502	Decl							std :: string	std :: string	classad_cstr
ANR	1030503	DeclStmt									
ANR	1030504	Decl							char	char *	classad_str
ANR	1030505	DeclStmt									
ANR	1030506	Decl							classad :: ClassAdParser	classad :: ClassAdParser	parser
ANR	1030507	DeclStmt									
ANR	1030508	Decl							ReliSock	ReliSock *	socket
ANR	1030509	DeclStmt									
ANR	1030510	Decl							const char	const char *	user
ANR	1030511	DeclStmt									
ANR	1030512	Decl							CredentialWrapper	CredentialWrapper *	cred_wrapper
ANR	1030513	DeclStmt									
ANR	1030514	Decl							CondorError	CondorError	errstack
ANR	1030515	DeclStmt									
ANR	1030516	Decl							int	int	type
ANR	1030517	DeclStmt									
ANR	1030518	Decl							int	int	rcred
ANR	1030519	DeclStmt									
ANR	1030520	Decl							int	int	rcred
ANR	1030521	DeclStmt									
ANR	1030522	Decl							char	char *	name
ANR	1030523	DeclStmt									
ANR	1030524	Decl							int	int	rtnVal
ANR	1030525	DeclStmt									
ANR	1030526	Decl							bool	bool	found_cred
ANR	1030527	DeclStmt									
ANR	1030528	Decl							CredentialWrapper	CredentialWrapper *	cred
ANR	1030529	DeclStmt									
ANR	1030530	Decl							char	char *	owner
ANR	1030531	DeclStmt									
ANR	1030532	Decl							const char	const char *	user
ANR	1030533	DeclStmt									
ANR	1030534	Decl							void	void *	data
ANR	1030535	DeclStmt									
ANR	1030536	Decl							ReliSock	ReliSock *	socket
ANR	1030537	DeclStmt									
ANR	1030538	Decl							CondorError	CondorError	errstack
ANR	1030539	DeclStmt									
ANR	1030540	Decl							char	char *	pColon
ANR	1030541	DeclStmt									
ANR	1030542	Decl							int	int	data_size
ANR	1030543	DeclStmt									
ANR	1030544	Decl							int	int	rc
ANR	1030545	DeclStmt									
ANR	1030546	Decl							int	int	rc
ANR	1030547	DeclStmt									
ANR	1030548	Decl							classad :: ClassAdUnParser	classad :: ClassAdUnParser	unparser
ANR	1030549	DeclStmt									
ANR	1030550	Decl							std :: string	std :: string	adbuffer
ANR	1030551	DeclStmt									
ANR	1030552	Decl							char	char *	request
ANR	1030553	DeclStmt									
ANR	1030554	Decl							int	int	rtnVal
ANR	1030555	DeclStmt									
ANR	1030556	Decl							int	int	length
ANR	1030557	DeclStmt									
ANR	1030558	Decl							CredentialWrapper	CredentialWrapper *	cred
ANR	1030559	DeclStmt									
ANR	1030560	Decl							SimpleList < Credential * >	SimpleList < Credential * >	result_list
ANR	1030561	DeclStmt									
ANR	1030562	Decl							ReliSock	ReliSock *	socket
ANR	1030563	DeclStmt									
ANR	1030564	Decl							const char	const char *	user
ANR	1030565	DeclStmt									
ANR	1030566	Decl							CondorError	CondorError	errstack
ANR	1030567	DeclStmt									
ANR	1030568	Decl							Credential	Credential *	_cred
ANR	1030569	DeclStmt									
ANR	1030570	Decl							classad :: ClassAd	classad :: ClassAd *	_temp
ANR	1030571	DeclStmt									
ANR	1030572	Decl							char	char *	classad_str
ANR	1030573	DeclStmt									
ANR	1030574	Decl							char	char *	name
ANR	1030575	DeclStmt									
ANR	1030576	Decl							int	int	rtnVal
ANR	1030577	DeclStmt									
ANR	1030578	Decl							int	int	rc
ANR	1030579	DeclStmt									
ANR	1030580	Decl							bool	bool	found_cred
ANR	1030581	DeclStmt									
ANR	1030582	Decl							CredentialWrapper	CredentialWrapper *	cred_wrapper
ANR	1030583	DeclStmt									
ANR	1030584	Decl							char	char *	owner
ANR	1030585	DeclStmt									
ANR	1030586	Decl							const char	const char *	user
ANR	1030587	DeclStmt									
ANR	1030588	Decl							ReliSock	ReliSock *	socket
ANR	1030589	DeclStmt									
ANR	1030590	Decl							CondorError	CondorError	errstack
ANR	1030591	DeclStmt									
ANR	1030592	Decl							char	char *	pColon
ANR	1030593	DeclStmt									
ANR	1030594	Decl							priv_state	priv_state	priv
ANR	1030595	Function	SaveCredentialList	523:0:12990:13698							
ANR	1030596	FunctionDef	SaveCredentialList ()		1030595	0					
ANR	1030597	CompoundStatement		524:21:13015:13698	1030595	0					
ANR	1030598	IdentifierDeclStatement	priv_state priv = set_root_priv ( ) ;	525:2:13019:13052	1030595	0	True				
ANR	1030599	IdentifierDecl	priv = set_root_priv ( )		1030595	0					
ANR	1030600	IdentifierDeclType	priv_state		1030595	0					
ANR	1030601	Identifier	priv		1030595	1					
ANR	1030602	AssignmentExpression	priv = set_root_priv ( )		1030595	2		=			
ANR	1030603	Identifier	priv		1030595	0					
ANR	1030604	CallExpression	set_root_priv ( )		1030595	1					
ANR	1030605	Callee	set_root_priv		1030595	0					
ANR	1030606	Identifier	set_root_priv		1030595	0					
ANR	1030607	ArgumentList			1030595	1					
ANR	1030608	IdentifierDeclStatement	"FILE * fp = safe_fopen_wrapper ( cred_index_file , ""w"" ) ;"	526:2:13056:13108	1030595	1	True				
ANR	1030609	IdentifierDecl	"* fp = safe_fopen_wrapper ( cred_index_file , ""w"" )"		1030595	0					
ANR	1030610	IdentifierDeclType	FILE *		1030595	0					
ANR	1030611	Identifier	fp		1030595	1					
ANR	1030612	AssignmentExpression	"* fp = safe_fopen_wrapper ( cred_index_file , ""w"" )"		1030595	2		=			
ANR	1030613	Identifier	fp		1030595	0					
ANR	1030614	CallExpression	"safe_fopen_wrapper ( cred_index_file , ""w"" )"		1030595	1					
ANR	1030615	Callee	safe_fopen_wrapper		1030595	0					
ANR	1030616	Identifier	safe_fopen_wrapper		1030595	0					
ANR	1030617	ArgumentList	cred_index_file		1030595	1					
ANR	1030618	Argument	cred_index_file		1030595	0					
ANR	1030619	Identifier	cred_index_file		1030595	0					
ANR	1030620	Argument	"""w"""		1030595	1					
ANR	1030621	PrimaryExpression	"""w"""		1030595	0					
ANR	1030622	IfStatement	if ( ! fp )		1030595	2					
ANR	1030623	Condition	! fp	527:6:13116:13118	1030595	0	True				
ANR	1030624	UnaryOperationExpression	! fp		1030595	0					
ANR	1030625	UnaryOperator	!		1030595	0					
ANR	1030626	Identifier	fp		1030595	1					
ANR	1030627	CompoundStatement		4:11:105:105	1030595	1					
ANR	1030628	ExpressionStatement	set_priv ( priv )	528:4:13127:13142	1030595	0	True				
ANR	1030629	CallExpression	set_priv ( priv )		1030595	0					
ANR	1030630	Callee	set_priv		1030595	0					
ANR	1030631	Identifier	set_priv		1030595	0					
ANR	1030632	ArgumentList	priv		1030595	1					
ANR	1030633	Argument	priv		1030595	0					
ANR	1030634	Identifier	priv		1030595	0					
ANR	1030635	ExpressionStatement	"dprintf ( D_ALWAYS , ""Unable to open credential index file %s!\\n"" , cred_index_file )"	529:4:13148:13229	1030595	1	True				
ANR	1030636	CallExpression	"dprintf ( D_ALWAYS , ""Unable to open credential index file %s!\\n"" , cred_index_file )"		1030595	0					
ANR	1030637	Callee	dprintf		1030595	0					
ANR	1030638	Identifier	dprintf		1030595	0					
ANR	1030639	ArgumentList	D_ALWAYS		1030595	1					
ANR	1030640	Argument	D_ALWAYS		1030595	0					
ANR	1030641	Identifier	D_ALWAYS		1030595	0					
ANR	1030642	Argument	"""Unable to open credential index file %s!\\n"""		1030595	1					
ANR	1030643	PrimaryExpression	"""Unable to open credential index file %s!\\n"""		1030595	0					
ANR	1030644	Argument	cred_index_file		1030595	2					
ANR	1030645	Identifier	cred_index_file		1030595	0					
ANR	1030646	ReturnStatement	return FALSE ;	530:4:13235:13247	1030595	2	True				
ANR	1030647	Identifier	FALSE		1030595	0					
ANR	1030648	IdentifierDeclStatement	classad :: ClassAdXMLUnParser unparser ;	534:2:13257:13293	1030595	3	True				
ANR	1030649	IdentifierDecl	unparser		1030595	0					
ANR	1030650	IdentifierDeclType	classad :: ClassAdXMLUnParser		1030595	0					
ANR	1030651	Identifier	unparser		1030595	1					
ANR	1030652	IdentifierDeclStatement	CredentialWrapper * pCred = NULL ;	535:2:13297:13329	1030595	4	True				
ANR	1030653	IdentifierDecl	* pCred = NULL		1030595	0					
ANR	1030654	IdentifierDeclType	CredentialWrapper *		1030595	0					
ANR	1030655	Identifier	pCred		1030595	1					
ANR	1030656	AssignmentExpression	* pCred = NULL		1030595	2		=			
ANR	1030657	Identifier	NULL		1030595	0					
ANR	1030658	Identifier	NULL		1030595	1					
ANR	1030659	ExpressionStatement	credentials . Rewind ( )	538:2:13358:13378	1030595	5	True				
ANR	1030660	CallExpression	credentials . Rewind ( )		1030595	0					
ANR	1030661	Callee	credentials . Rewind		1030595	0					
ANR	1030662	MemberAccess	credentials . Rewind		1030595	0					
ANR	1030663	Identifier	credentials		1030595	0					
ANR	1030664	Identifier	Rewind		1030595	1					
ANR	1030665	ArgumentList			1030595	1					
ANR	1030666	WhileStatement	while ( credentials . Next ( pCred ) )		1030595	6					
ANR	1030667	Condition	credentials . Next ( pCred )	539:9:13389:13411	1030595	0	True				
ANR	1030668	CallExpression	credentials . Next ( pCred )		1030595	0					
ANR	1030669	Callee	credentials . Next		1030595	0					
ANR	1030670	MemberAccess	credentials . Next		1030595	0					
ANR	1030671	Identifier	credentials		1030595	0					
ANR	1030672	Identifier	Next		1030595	1					
ANR	1030673	ArgumentList	pCred		1030595	1					
ANR	1030674	Argument	pCred		1030595	0					
ANR	1030675	Identifier	pCred		1030595	0					
ANR	1030676	CompoundStatement		19:4:523:539	1030595	1					
ANR	1030677	IdentifierDeclStatement	const classad :: ClassAd * pclassad = pCred -> cred -> GetMetadata ( ) ;	540:4:13420:13482	1030595	0	True				
ANR	1030678	IdentifierDecl	* pclassad = pCred -> cred -> GetMetadata ( )		1030595	0					
ANR	1030679	IdentifierDeclType	const classad :: ClassAd *		1030595	0					
ANR	1030680	Identifier	pclassad		1030595	1					
ANR	1030681	AssignmentExpression	* pclassad = pCred -> cred -> GetMetadata ( )		1030595	2		=			
ANR	1030682	Identifier	pclassad		1030595	0					
ANR	1030683	CallExpression	pCred -> cred -> GetMetadata ( )		1030595	1					
ANR	1030684	Callee	pCred -> cred -> GetMetadata		1030595	0					
ANR	1030685	PtrMemberAccess	pCred -> cred -> GetMetadata		1030595	0					
ANR	1030686	PtrMemberAccess	pCred -> cred		1030595	0					
ANR	1030687	Identifier	pCred		1030595	0					
ANR	1030688	Identifier	cred		1030595	1					
ANR	1030689	Identifier	GetMetadata		1030595	1					
ANR	1030690	ArgumentList			1030595	1					
ANR	1030691	IdentifierDeclStatement	classad :: ClassAd temp_classad ( * pclassad ) ;	541:1:13485:13525	1030595	1	True				
ANR	1030692	IdentifierDecl	temp_classad ( * pclassad )		1030595	0					
ANR	1030693	IdentifierDeclType	classad :: ClassAd		1030595	0					
ANR	1030694	Identifier	temp_classad		1030595	1					
ANR	1030695	UnaryOperationExpression	* pclassad		1030595	2					
ANR	1030696	UnaryOperator	*		1030595	0					
ANR	1030697	Identifier	pclassad		1030595	1					
ANR	1030698	IdentifierDeclStatement	std :: string buff ;	542:4:13539:13555	1030595	2	True				
ANR	1030699	IdentifierDecl	buff		1030595	0					
ANR	1030700	IdentifierDeclType	std :: string		1030595	0					
ANR	1030701	Identifier	buff		1030595	1					
ANR	1030702	ExpressionStatement	"unparser . Unparse ( buff , & temp_classad )"	543:4:13561:13599	1030595	3	True				
ANR	1030703	CallExpression	"unparser . Unparse ( buff , & temp_classad )"		1030595	0					
ANR	1030704	Callee	unparser . Unparse		1030595	0					
ANR	1030705	MemberAccess	unparser . Unparse		1030595	0					
ANR	1030706	Identifier	unparser		1030595	0					
ANR	1030707	Identifier	Unparse		1030595	1					
ANR	1030708	ArgumentList	buff		1030595	1					
ANR	1030709	Argument	buff		1030595	0					
ANR	1030710	Identifier	buff		1030595	0					
ANR	1030711	Argument	& temp_classad		1030595	1					
ANR	1030712	UnaryOperationExpression	& temp_classad		1030595	0					
ANR	1030713	UnaryOperator	&		1030595	0					
ANR	1030714	Identifier	temp_classad		1030595	1					
ANR	1030715	ExpressionStatement	"fprintf ( fp , ""%s\\n"" , buff . c_str ( ) )"	544:4:13605:13639	1030595	4	True				
ANR	1030716	CallExpression	"fprintf ( fp , ""%s\\n"" , buff . c_str ( ) )"		1030595	0					
ANR	1030717	Callee	fprintf		1030595	0					
ANR	1030718	Identifier	fprintf		1030595	0					
ANR	1030719	ArgumentList	fp		1030595	1					
ANR	1030720	Argument	fp		1030595	0					
ANR	1030721	Identifier	fp		1030595	0					
ANR	1030722	Argument	"""%s\\n"""		1030595	1					
ANR	1030723	PrimaryExpression	"""%s\\n"""		1030595	0					
ANR	1030724	Argument	buff . c_str ( )		1030595	2					
ANR	1030725	CallExpression	buff . c_str ( )		1030595	0					
ANR	1030726	Callee	buff . c_str		1030595	0					
ANR	1030727	MemberAccess	buff . c_str		1030595	0					
ANR	1030728	Identifier	buff		1030595	0					
ANR	1030729	Identifier	c_str		1030595	1					
ANR	1030730	ArgumentList			1030595	1					
ANR	1030731	ExpressionStatement	fclose ( fp )	547:2:13648:13659	1030595	7	True				
ANR	1030732	CallExpression	fclose ( fp )		1030595	0					
ANR	1030733	Callee	fclose		1030595	0					
ANR	1030734	Identifier	fclose		1030595	0					
ANR	1030735	ArgumentList	fp		1030595	1					
ANR	1030736	Argument	fp		1030595	0					
ANR	1030737	Identifier	fp		1030595	0					
ANR	1030738	ExpressionStatement	set_priv ( priv )	549:2:13666:13681	1030595	8	True				
ANR	1030739	CallExpression	set_priv ( priv )		1030595	0					
ANR	1030740	Callee	set_priv		1030595	0					
ANR	1030741	Identifier	set_priv		1030595	0					
ANR	1030742	ArgumentList	priv		1030595	1					
ANR	1030743	Argument	priv		1030595	0					
ANR	1030744	Identifier	priv		1030595	0					
ANR	1030745	ReturnStatement	return TRUE ;	550:2:13685:13696	1030595	9	True				
ANR	1030746	Identifier	TRUE		1030595	0					
ANR	1030747	ReturnType	int		1030595	1					
ANR	1030748	Identifier	SaveCredentialList		1030595	2					
ANR	1030749	ParameterList			1030595	3					
ANR	1030750	CFGEntryNode	ENTRY		1030595		True				
ANR	1030751	CFGExitNode	EXIT		1030595		True				
ANR	1030752	Symbol	pCred -> cred		1030595						
ANR	1030753	Symbol	NULL		1030595						
ANR	1030754	Symbol	* pCred		1030595						
ANR	1030755	Symbol	safe_fopen_wrapper		1030595						
ANR	1030756	Symbol	credentials		1030595						
ANR	1030757	Symbol	& temp_classad		1030595						
ANR	1030758	Symbol	pCred -> cred -> GetMetadata		1030595						
ANR	1030759	Symbol	D_ALWAYS		1030595						
ANR	1030760	Symbol	TRUE		1030595						
ANR	1030761	Symbol	set_root_priv		1030595						
ANR	1030762	Symbol	fp		1030595						
ANR	1030763	Symbol	cred_index_file		1030595						
ANR	1030764	Symbol	pclassad		1030595						
ANR	1030765	Symbol	temp_classad		1030595						
ANR	1030766	Symbol	pCred		1030595						
ANR	1030767	Symbol	* pCred -> cred		1030595						
ANR	1030768	Symbol	* * pCred		1030595						
ANR	1030769	Symbol	FALSE		1030595						
ANR	1030770	Symbol	unparser		1030595						
ANR	1030771	Symbol	credentials . Next		1030595						
ANR	1030772	Symbol	priv		1030595						
ANR	1030773	Symbol	buff . c_str		1030595						
ANR	1030774	Symbol	buff		1030595						
ANR	1030775	Function	LoadCredentialList	553:0:13701:14908							
ANR	1030776	FunctionDef	LoadCredentialList ()		1030775	0					
ANR	1030777	CompoundStatement		554:22:13727:14908	1030775	0					
ANR	1030778	IdentifierDeclStatement	CredentialWrapper * pCred ;	555:2:13731:13756	1030775	0	True				
ANR	1030779	IdentifierDecl	* pCred		1030775	0					
ANR	1030780	IdentifierDeclType	CredentialWrapper *		1030775	0					
ANR	1030781	Identifier	pCred		1030775	1					
ANR	1030782	IfStatement	if ( ! credentials . IsEmpty ( ) )		1030775	1					
ANR	1030783	Condition	! credentials . IsEmpty ( )	558:6:13789:13810	1030775	0	True				
ANR	1030784	UnaryOperationExpression	! credentials . IsEmpty ( )		1030775	0					
ANR	1030785	UnaryOperator	!		1030775	0					
ANR	1030786	CallExpression	credentials . IsEmpty ( )		1030775	1					
ANR	1030787	Callee	credentials . IsEmpty		1030775	0					
ANR	1030788	MemberAccess	credentials . IsEmpty		1030775	0					
ANR	1030789	Identifier	credentials		1030775	0					
ANR	1030790	Identifier	IsEmpty		1030775	1					
ANR	1030791	ArgumentList			1030775	1					
ANR	1030792	CompoundStatement		5:30:85:85	1030775	1					
ANR	1030793	ExpressionStatement	credentials . Rewind ( )	559:4:13819:13839	1030775	0	True				
ANR	1030794	CallExpression	credentials . Rewind ( )		1030775	0					
ANR	1030795	Callee	credentials . Rewind		1030775	0					
ANR	1030796	MemberAccess	credentials . Rewind		1030775	0					
ANR	1030797	Identifier	credentials		1030775	0					
ANR	1030798	Identifier	Rewind		1030775	1					
ANR	1030799	ArgumentList			1030775	1					
ANR	1030800	WhileStatement	while ( credentials . Next ( pCred ) )		1030775	1					
ANR	1030801	Condition	credentials . Next ( pCred )	560:11:13852:13874	1030775	0	True				
ANR	1030802	CallExpression	credentials . Next ( pCred )		1030775	0					
ANR	1030803	Callee	credentials . Next		1030775	0					
ANR	1030804	MemberAccess	credentials . Next		1030775	0					
ANR	1030805	Identifier	credentials		1030775	0					
ANR	1030806	Identifier	Next		1030775	1					
ANR	1030807	ArgumentList	pCred		1030775	1					
ANR	1030808	Argument	pCred		1030775	0					
ANR	1030809	Identifier	pCred		1030775	0					
ANR	1030810	CompoundStatement		7:36:149:149	1030775	1					
ANR	1030811	ExpressionStatement	credentials . DeleteCurrent ( )	561:6:13885:13912	1030775	0	True				
ANR	1030812	CallExpression	credentials . DeleteCurrent ( )		1030775	0					
ANR	1030813	Callee	credentials . DeleteCurrent		1030775	0					
ANR	1030814	MemberAccess	credentials . DeleteCurrent		1030775	0					
ANR	1030815	Identifier	credentials		1030775	0					
ANR	1030816	Identifier	DeleteCurrent		1030775	1					
ANR	1030817	ArgumentList			1030775	1					
ANR	1030818	Statement	delete	562:6:13920:13925	1030775	1	True				
ANR	1030819	ExpressionStatement	pCred	562:13:13927:13932	1030775	2	True				
ANR	1030820	Identifier	pCred		1030775	0					
ANR	1030821	ExpressionStatement	credentials . Rewind ( )	566:2:13947:13967	1030775	2	True				
ANR	1030822	CallExpression	credentials . Rewind ( )		1030775	0					
ANR	1030823	Callee	credentials . Rewind		1030775	0					
ANR	1030824	MemberAccess	credentials . Rewind		1030775	0					
ANR	1030825	Identifier	credentials		1030775	0					
ANR	1030826	Identifier	Rewind		1030775	1					
ANR	1030827	ArgumentList			1030775	1					
ANR	1030828	IdentifierDeclStatement	classad :: ClassAdXMLParser parser ;	568:2:13974:14006	1030775	3	True				
ANR	1030829	IdentifierDecl	parser		1030775	0					
ANR	1030830	IdentifierDeclType	classad :: ClassAdXMLParser		1030775	0					
ANR	1030831	Identifier	parser		1030775	1					
ANR	1030832	IdentifierDeclStatement	char buff [ 50000 ] ;	569:2:14010:14026	1030775	4	True				
ANR	1030833	IdentifierDecl	buff [ 50000 ]		1030775	0					
ANR	1030834	IdentifierDeclType	char [ 50000 ]		1030775	0					
ANR	1030835	Identifier	buff		1030775	1					
ANR	1030836	PrimaryExpression	50000		1030775	2					
ANR	1030837	IdentifierDeclStatement	priv_state priv = set_root_priv ( ) ;	571:2:14033:14066	1030775	5	True				
ANR	1030838	IdentifierDecl	priv = set_root_priv ( )		1030775	0					
ANR	1030839	IdentifierDeclType	priv_state		1030775	0					
ANR	1030840	Identifier	priv		1030775	1					
ANR	1030841	AssignmentExpression	priv = set_root_priv ( )		1030775	2		=			
ANR	1030842	Identifier	priv		1030775	0					
ANR	1030843	CallExpression	set_root_priv ( )		1030775	1					
ANR	1030844	Callee	set_root_priv		1030775	0					
ANR	1030845	Identifier	set_root_priv		1030775	0					
ANR	1030846	ArgumentList			1030775	1					
ANR	1030847	IdentifierDeclStatement	"FILE * fp = safe_fopen_wrapper ( cred_index_file , ""r"" ) ;"	573:2:14071:14123	1030775	6	True				
ANR	1030848	IdentifierDecl	"* fp = safe_fopen_wrapper ( cred_index_file , ""r"" )"		1030775	0					
ANR	1030849	IdentifierDeclType	FILE *		1030775	0					
ANR	1030850	Identifier	fp		1030775	1					
ANR	1030851	AssignmentExpression	"* fp = safe_fopen_wrapper ( cred_index_file , ""r"" )"		1030775	2		=			
ANR	1030852	Identifier	fp		1030775	0					
ANR	1030853	CallExpression	"safe_fopen_wrapper ( cred_index_file , ""r"" )"		1030775	1					
ANR	1030854	Callee	safe_fopen_wrapper		1030775	0					
ANR	1030855	Identifier	safe_fopen_wrapper		1030775	0					
ANR	1030856	ArgumentList	cred_index_file		1030775	1					
ANR	1030857	Argument	cred_index_file		1030775	0					
ANR	1030858	Identifier	cred_index_file		1030775	0					
ANR	1030859	Argument	"""r"""		1030775	1					
ANR	1030860	PrimaryExpression	"""r"""		1030775	0					
ANR	1030861	IfStatement	if ( ! fp )		1030775	7					
ANR	1030862	Condition	! fp	575:6:14134:14136	1030775	0	True				
ANR	1030863	UnaryOperationExpression	! fp		1030775	0					
ANR	1030864	UnaryOperator	!		1030775	0					
ANR	1030865	Identifier	fp		1030775	1					
ANR	1030866	CompoundStatement		22:11:411:411	1030775	1					
ANR	1030867	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Credential database %s does not exist!\\n"" , cred_index_file )"	576:4:14145:14227	1030775	0	True				
ANR	1030868	CallExpression	"dprintf ( D_FULLDEBUG , ""Credential database %s does not exist!\\n"" , cred_index_file )"		1030775	0					
ANR	1030869	Callee	dprintf		1030775	0					
ANR	1030870	Identifier	dprintf		1030775	0					
ANR	1030871	ArgumentList	D_FULLDEBUG		1030775	1					
ANR	1030872	Argument	D_FULLDEBUG		1030775	0					
ANR	1030873	Identifier	D_FULLDEBUG		1030775	0					
ANR	1030874	Argument	"""Credential database %s does not exist!\\n"""		1030775	1					
ANR	1030875	PrimaryExpression	"""Credential database %s does not exist!\\n"""		1030775	0					
ANR	1030876	Argument	cred_index_file		1030775	2					
ANR	1030877	Identifier	cred_index_file		1030775	0					
ANR	1030878	ExpressionStatement	set_priv ( priv )	577:4:14233:14248	1030775	1	True				
ANR	1030879	CallExpression	set_priv ( priv )		1030775	0					
ANR	1030880	Callee	set_priv		1030775	0					
ANR	1030881	Identifier	set_priv		1030775	0					
ANR	1030882	ArgumentList	priv		1030775	1					
ANR	1030883	Argument	priv		1030775	0					
ANR	1030884	Identifier	priv		1030775	0					
ANR	1030885	ReturnStatement	return TRUE ;	578:4:14254:14265	1030775	2	True				
ANR	1030886	Identifier	TRUE		1030775	0					
ANR	1030887	WhileStatement	"while ( fgets ( buff , 50000 , fp ) )"		1030775	8					
ANR	1030888	Condition	"fgets ( buff , 50000 , fp )"	581:9:14281:14302	1030775	0	True				
ANR	1030889	CallExpression	"fgets ( buff , 50000 , fp )"		1030775	0					
ANR	1030890	Callee	fgets		1030775	0					
ANR	1030891	Identifier	fgets		1030775	0					
ANR	1030892	ArgumentList	buff		1030775	1					
ANR	1030893	Argument	buff		1030775	0					
ANR	1030894	Identifier	buff		1030775	0					
ANR	1030895	Argument	50000		1030775	1					
ANR	1030896	PrimaryExpression	50000		1030775	0					
ANR	1030897	Argument	fp		1030775	2					
ANR	1030898	Identifier	fp		1030775	0					
ANR	1030899	CompoundStatement		34:4:718:728	1030775	1					
ANR	1030900	IfStatement	if ( ( buff [ 0 ] == '\\n' ) || ( buff [ 0 ] == '\\r' ) )		1030775	0					
ANR	1030901	Condition	( buff [ 0 ] == '\\n' ) || ( buff [ 0 ] == '\\r' )	582:8:14315:14352	1030775	0	True				
ANR	1030902	OrExpression	( buff [ 0 ] == '\\n' ) || ( buff [ 0 ] == '\\r' )		1030775	0		||			
ANR	1030903	EqualityExpression	buff [ 0 ] == '\\n'		1030775	0		==			
ANR	1030904	ArrayIndexing	buff [ 0 ]		1030775	0					
ANR	1030905	Identifier	buff		1030775	0					
ANR	1030906	PrimaryExpression	0		1030775	1					
ANR	1030907	PrimaryExpression	'\\n'		1030775	1					
ANR	1030908	EqualityExpression	buff [ 0 ] == '\\r'		1030775	1		==			
ANR	1030909	ArrayIndexing	buff [ 0 ]		1030775	0					
ANR	1030910	Identifier	buff		1030775	0					
ANR	1030911	PrimaryExpression	0		1030775	1					
ANR	1030912	PrimaryExpression	'\\r'		1030775	1					
ANR	1030913	CompoundStatement		29:48:627:627	1030775	1					
ANR	1030914	ContinueStatement	continue ;	583:6:14363:14371	1030775	0	True				
ANR	1030915	IdentifierDeclStatement	classad :: ClassAd * classad = parser . ParseClassAd ( buff ) ;	586:1:14385:14440	1030775	1	True				
ANR	1030916	IdentifierDecl	* classad = parser . ParseClassAd ( buff )		1030775	0					
ANR	1030917	IdentifierDeclType	classad :: ClassAd *		1030775	0					
ANR	1030918	Identifier	classad		1030775	1					
ANR	1030919	AssignmentExpression	* classad = parser . ParseClassAd ( buff )		1030775	2		=			
ANR	1030920	Identifier	classad		1030775	0					
ANR	1030921	CallExpression	parser . ParseClassAd ( buff )		1030775	1					
ANR	1030922	Callee	parser . ParseClassAd		1030775	0					
ANR	1030923	MemberAccess	parser . ParseClassAd		1030775	0					
ANR	1030924	Identifier	parser		1030775	0					
ANR	1030925	Identifier	ParseClassAd		1030775	1					
ANR	1030926	ArgumentList	buff		1030775	1					
ANR	1030927	Argument	buff		1030775	0					
ANR	1030928	Identifier	buff		1030775	0					
ANR	1030929	IdentifierDeclStatement	int type = 0 ;	587:4:14446:14456	1030775	2	True				
ANR	1030930	IdentifierDecl	type = 0		1030775	0					
ANR	1030931	IdentifierDeclType	int		1030775	0					
ANR	1030932	Identifier	type		1030775	1					
ANR	1030933	AssignmentExpression	type = 0		1030775	2		=			
ANR	1030934	Identifier	type		1030775	0					
ANR	1030935	PrimaryExpression	0		1030775	1					
ANR	1030936	IfStatement	"if ( ( ! classad ) || ( ! classad -> EvaluateAttrInt ( ""Type"" , type ) ) )"		1030775	3					
ANR	1030937	Condition	"( ! classad ) || ( ! classad -> EvaluateAttrInt ( ""Type"" , type ) )"	589:8:14467:14522	1030775	0	True				
ANR	1030938	OrExpression	"( ! classad ) || ( ! classad -> EvaluateAttrInt ( ""Type"" , type ) )"		1030775	0		||			
ANR	1030939	UnaryOperationExpression	! classad		1030775	0					
ANR	1030940	UnaryOperator	!		1030775	0					
ANR	1030941	Identifier	classad		1030775	1					
ANR	1030942	UnaryOperationExpression	"! classad -> EvaluateAttrInt ( ""Type"" , type )"		1030775	1					
ANR	1030943	UnaryOperator	!		1030775	0					
ANR	1030944	CallExpression	"classad -> EvaluateAttrInt ( ""Type"" , type )"		1030775	1					
ANR	1030945	Callee	classad -> EvaluateAttrInt		1030775	0					
ANR	1030946	PtrMemberAccess	classad -> EvaluateAttrInt		1030775	0					
ANR	1030947	Identifier	classad		1030775	0					
ANR	1030948	Identifier	EvaluateAttrInt		1030775	1					
ANR	1030949	ArgumentList	"""Type"""		1030775	1					
ANR	1030950	Argument	"""Type"""		1030775	0					
ANR	1030951	PrimaryExpression	"""Type"""		1030775	0					
ANR	1030952	Argument	type		1030775	1					
ANR	1030953	Identifier	type		1030775	0					
ANR	1030954	CompoundStatement		36:66:797:797	1030775	1					
ANR	1030955	ExpressionStatement	"dprintf ( D_ALWAYS , ""Invalid classad %s\\n"" , buff )"	590:6:14533:14581	1030775	0	True				
ANR	1030956	CallExpression	"dprintf ( D_ALWAYS , ""Invalid classad %s\\n"" , buff )"		1030775	0					
ANR	1030957	Callee	dprintf		1030775	0					
ANR	1030958	Identifier	dprintf		1030775	0					
ANR	1030959	ArgumentList	D_ALWAYS		1030775	1					
ANR	1030960	Argument	D_ALWAYS		1030775	0					
ANR	1030961	Identifier	D_ALWAYS		1030775	0					
ANR	1030962	Argument	"""Invalid classad %s\\n"""		1030775	1					
ANR	1030963	PrimaryExpression	"""Invalid classad %s\\n"""		1030775	0					
ANR	1030964	Argument	buff		1030775	2					
ANR	1030965	Identifier	buff		1030775	0					
ANR	1030966	ExpressionStatement	set_priv ( priv )	591:6:14589:14604	1030775	1	True				
ANR	1030967	CallExpression	set_priv ( priv )		1030775	0					
ANR	1030968	Callee	set_priv		1030775	0					
ANR	1030969	Identifier	set_priv		1030775	0					
ANR	1030970	ArgumentList	priv		1030775	1					
ANR	1030971	Argument	priv		1030775	0					
ANR	1030972	Identifier	priv		1030775	0					
ANR	1030973	ExpressionStatement	fclose ( fp )	592:6:14612:14623	1030775	2	True				
ANR	1030974	CallExpression	fclose ( fp )		1030775	0					
ANR	1030975	Callee	fclose		1030775	0					
ANR	1030976	Identifier	fclose		1030775	0					
ANR	1030977	ArgumentList	fp		1030775	1					
ANR	1030978	Argument	fp		1030775	0					
ANR	1030979	Identifier	fp		1030775	0					
ANR	1030980	ReturnStatement	return FALSE ;	593:6:14631:14643	1030775	3	True				
ANR	1030981	Identifier	FALSE		1030775	0					
ANR	1030982	IfStatement	if ( type == X509_CREDENTIAL_TYPE )		1030775	4					
ANR	1030983	Condition	type == X509_CREDENTIAL_TYPE	596:8:14660:14687	1030775	0	True				
ANR	1030984	EqualityExpression	type == X509_CREDENTIAL_TYPE		1030775	0		==			
ANR	1030985	Identifier	type		1030775	0					
ANR	1030986	Identifier	X509_CREDENTIAL_TYPE		1030775	1					
ANR	1030987	CompoundStatement		43:38:962:962	1030775	1					
ANR	1030988	ExpressionStatement	pCred = new X509CredentialWrapper ( * classad )	597:6:14698:14742	1030775	0	True				
ANR	1030989	AssignmentExpression	pCred = new X509CredentialWrapper ( * classad )		1030775	0		=			
ANR	1030990	Identifier	pCred		1030775	0					
ANR	1030991	UnaryOperationExpression	* classad		1030775	1					
ANR	1030992	UnaryOperator	*		1030775	0					
ANR	1030993	Identifier	classad		1030775	1					
ANR	1030994	ExpressionStatement	credentials . Append ( pCred )	598:6:14750:14776	1030775	1	True				
ANR	1030995	CallExpression	credentials . Append ( pCred )		1030775	0					
ANR	1030996	Callee	credentials . Append		1030775	0					
ANR	1030997	MemberAccess	credentials . Append		1030775	0					
ANR	1030998	Identifier	credentials		1030775	0					
ANR	1030999	Identifier	Append		1030775	1					
ANR	1031000	ArgumentList	pCred		1030775	1					
ANR	1031001	Argument	pCred		1030775	0					
ANR	1031002	Identifier	pCred		1030775	0					
ANR	1031003	ElseStatement	else		1030775	0					
ANR	1031004	CompoundStatement		47:9:1065:1065	1030775	0					
ANR	1031005	ExpressionStatement	"dprintf ( D_ALWAYS , ""Invalid type %d\\n"" , type )"	601:6:14801:14845	1030775	0	True				
ANR	1031006	CallExpression	"dprintf ( D_ALWAYS , ""Invalid type %d\\n"" , type )"		1030775	0					
ANR	1031007	Callee	dprintf		1030775	0					
ANR	1031008	Identifier	dprintf		1030775	0					
ANR	1031009	ArgumentList	D_ALWAYS		1030775	1					
ANR	1031010	Argument	D_ALWAYS		1030775	0					
ANR	1031011	Identifier	D_ALWAYS		1030775	0					
ANR	1031012	Argument	"""Invalid type %d\\n"""		1030775	1					
ANR	1031013	PrimaryExpression	"""Invalid type %d\\n"""		1030775	0					
ANR	1031014	Argument	type		1030775	2					
ANR	1031015	Identifier	type		1030775	0					
ANR	1031016	ExpressionStatement	fclose ( fp )	604:2:14860:14871	1030775	9	True				
ANR	1031017	CallExpression	fclose ( fp )		1030775	0					
ANR	1031018	Callee	fclose		1030775	0					
ANR	1031019	Identifier	fclose		1030775	0					
ANR	1031020	ArgumentList	fp		1030775	1					
ANR	1031021	Argument	fp		1030775	0					
ANR	1031022	Identifier	fp		1030775	0					
ANR	1031023	ExpressionStatement	set_priv ( priv )	605:2:14875:14890	1030775	10	True				
ANR	1031024	CallExpression	set_priv ( priv )		1030775	0					
ANR	1031025	Callee	set_priv		1030775	0					
ANR	1031026	Identifier	set_priv		1030775	0					
ANR	1031027	ArgumentList	priv		1030775	1					
ANR	1031028	Argument	priv		1030775	0					
ANR	1031029	Identifier	priv		1030775	0					
ANR	1031030	ReturnStatement	return TRUE ;	607:2:14895:14906	1030775	11	True				
ANR	1031031	Identifier	TRUE		1030775	0					
ANR	1031032	ReturnType	int		1030775	1					
ANR	1031033	Identifier	LoadCredentialList		1030775	2					
ANR	1031034	ParameterList			1030775	3					
ANR	1031035	CFGEntryNode	ENTRY		1030775		True				
ANR	1031036	CFGExitNode	EXIT		1030775		True				
ANR	1031037	Symbol	safe_fopen_wrapper		1030775						
ANR	1031038	Symbol	* classad		1030775						
ANR	1031039	Symbol	credentials		1030775						
ANR	1031040	Symbol	D_ALWAYS		1030775						
ANR	1031041	Symbol	TRUE		1030775						
ANR	1031042	Symbol	set_root_priv		1030775						
ANR	1031043	Symbol	fp		1030775						
ANR	1031044	Symbol	D_FULLDEBUG		1030775						
ANR	1031045	Symbol	type		1030775						
ANR	1031046	Symbol	X509_CREDENTIAL_TYPE		1030775						
ANR	1031047	Symbol	cred_index_file		1030775						
ANR	1031048	Symbol	fgets		1030775						
ANR	1031049	Symbol	parser . ParseClassAd		1030775						
ANR	1031050	Symbol	pCred		1030775						
ANR	1031051	Symbol	parser		1030775						
ANR	1031052	Symbol	* buff		1030775						
ANR	1031053	Symbol	credentials . IsEmpty		1030775						
ANR	1031054	Symbol	credentials . Next		1030775						
ANR	1031055	Symbol	classad		1030775						
ANR	1031056	Symbol	classad -> EvaluateAttrInt		1030775						
ANR	1031057	Symbol	FALSE		1030775						
ANR	1031058	Symbol	priv		1030775						
ANR	1031059	Symbol	buff		1030775						
ANR	1031060	Function	CheckCredentials	610:0:14911:15956							
ANR	1031061	FunctionDef	CheckCredentials ()		1031060	0					
ANR	1031062	CompoundStatement		611:20:14936:15956	1031060	0					
ANR	1031063	IdentifierDeclStatement	CredentialWrapper * pCred ;	612:2:14940:14965	1031060	0	True				
ANR	1031064	IdentifierDecl	* pCred		1031060	0					
ANR	1031065	IdentifierDeclType	CredentialWrapper *		1031060	0					
ANR	1031066	Identifier	pCred		1031060	1					
ANR	1031067	ExpressionStatement	credentials . Rewind ( )	613:2:14969:14989	1031060	1	True				
ANR	1031068	CallExpression	credentials . Rewind ( )		1031060	0					
ANR	1031069	Callee	credentials . Rewind		1031060	0					
ANR	1031070	MemberAccess	credentials . Rewind		1031060	0					
ANR	1031071	Identifier	credentials		1031060	0					
ANR	1031072	Identifier	Rewind		1031060	1					
ANR	1031073	ArgumentList			1031060	1					
ANR	1031074	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""In CheckCredentials()\\n"" )"	614:2:14995:15043	1031060	2	True				
ANR	1031075	CallExpression	"dprintf ( D_FULLDEBUG , ""In CheckCredentials()\\n"" )"		1031060	0					
ANR	1031076	Callee	dprintf		1031060	0					
ANR	1031077	Identifier	dprintf		1031060	0					
ANR	1031078	ArgumentList	D_FULLDEBUG		1031060	1					
ANR	1031079	Argument	D_FULLDEBUG		1031060	0					
ANR	1031080	Identifier	D_FULLDEBUG		1031060	0					
ANR	1031081	Argument	"""In CheckCredentials()\\n"""		1031060	1					
ANR	1031082	PrimaryExpression	"""In CheckCredentials()\\n"""		1031060	0					
ANR	1031083	IdentifierDeclStatement	time_t now = time ( NULL ) ;	617:2:15070:15093	1031060	3	True				
ANR	1031084	IdentifierDecl	now = time ( NULL )		1031060	0					
ANR	1031085	IdentifierDeclType	time_t		1031060	0					
ANR	1031086	Identifier	now		1031060	1					
ANR	1031087	AssignmentExpression	now = time ( NULL )		1031060	2		=			
ANR	1031088	Identifier	now		1031060	0					
ANR	1031089	CallExpression	time ( NULL )		1031060	1					
ANR	1031090	Callee	time		1031060	0					
ANR	1031091	Identifier	time		1031060	0					
ANR	1031092	ArgumentList	NULL		1031060	1					
ANR	1031093	Argument	NULL		1031060	0					
ANR	1031094	Identifier	NULL		1031060	0					
ANR	1031095	WhileStatement	while ( credentials . Next ( pCred ) )		1031060	4					
ANR	1031096	Condition	credentials . Next ( pCred )	619:9:15105:15127	1031060	0	True				
ANR	1031097	CallExpression	credentials . Next ( pCred )		1031060	0					
ANR	1031098	Callee	credentials . Next		1031060	0					
ANR	1031099	MemberAccess	credentials . Next		1031060	0					
ANR	1031100	Identifier	credentials		1031060	0					
ANR	1031101	Identifier	Next		1031060	1					
ANR	1031102	ArgumentList	pCred		1031060	1					
ANR	1031103	Argument	pCred		1031060	0					
ANR	1031104	Identifier	pCred		1031060	0					
ANR	1031105	CompoundStatement		14:4:297:347	1031060	1					
ANR	1031106	ExpressionStatement	init_user_id_from_FQN ( pCred -> cred -> GetOwner ( ) )	621:4:15141:15188	1031060	0	True				
ANR	1031107	CallExpression	init_user_id_from_FQN ( pCred -> cred -> GetOwner ( ) )		1031060	0					
ANR	1031108	Callee	init_user_id_from_FQN		1031060	0					
ANR	1031109	Identifier	init_user_id_from_FQN		1031060	0					
ANR	1031110	ArgumentList	pCred -> cred -> GetOwner ( )		1031060	1					
ANR	1031111	Argument	pCred -> cred -> GetOwner ( )		1031060	0					
ANR	1031112	CallExpression	pCred -> cred -> GetOwner ( )		1031060	0					
ANR	1031113	Callee	pCred -> cred -> GetOwner		1031060	0					
ANR	1031114	PtrMemberAccess	pCred -> cred -> GetOwner		1031060	0					
ANR	1031115	PtrMemberAccess	pCred -> cred		1031060	0					
ANR	1031116	Identifier	pCred		1031060	0					
ANR	1031117	Identifier	cred		1031060	1					
ANR	1031118	Identifier	GetOwner		1031060	1					
ANR	1031119	ArgumentList			1031060	1					
ANR	1031120	IdentifierDeclStatement	priv_state priv = set_user_priv ( ) ;	622:4:15194:15227	1031060	1	True				
ANR	1031121	IdentifierDecl	priv = set_user_priv ( )		1031060	0					
ANR	1031122	IdentifierDeclType	priv_state		1031060	0					
ANR	1031123	Identifier	priv		1031060	1					
ANR	1031124	AssignmentExpression	priv = set_user_priv ( )		1031060	2		=			
ANR	1031125	Identifier	priv		1031060	0					
ANR	1031126	CallExpression	set_user_priv ( )		1031060	1					
ANR	1031127	Callee	set_user_priv		1031060	0					
ANR	1031128	Identifier	set_user_priv		1031060	0					
ANR	1031129	ArgumentList			1031060	1					
ANR	1031130	IdentifierDeclStatement	time_t time = pCred -> cred -> GetRealExpirationTime ( ) ;	624:4:15234:15284	1031060	2	True				
ANR	1031131	IdentifierDecl	time = pCred -> cred -> GetRealExpirationTime ( )		1031060	0					
ANR	1031132	IdentifierDeclType	time_t		1031060	0					
ANR	1031133	Identifier	time		1031060	1					
ANR	1031134	AssignmentExpression	time = pCred -> cred -> GetRealExpirationTime ( )		1031060	2		=			
ANR	1031135	Identifier	time		1031060	0					
ANR	1031136	CallExpression	pCred -> cred -> GetRealExpirationTime ( )		1031060	1					
ANR	1031137	Callee	pCred -> cred -> GetRealExpirationTime		1031060	0					
ANR	1031138	PtrMemberAccess	pCred -> cred -> GetRealExpirationTime		1031060	0					
ANR	1031139	PtrMemberAccess	pCred -> cred		1031060	0					
ANR	1031140	Identifier	pCred		1031060	0					
ANR	1031141	Identifier	cred		1031060	1					
ANR	1031142	Identifier	GetRealExpirationTime		1031060	1					
ANR	1031143	ArgumentList			1031060	1					
ANR	1031144	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Checking %s:%s = %ld\\n"" , pCred -> cred -> GetOwner ( ) , pCred -> cred -> GetName ( ) , time )"	625:4:15290:15423	1031060	3	True				
ANR	1031145	CallExpression	"dprintf ( D_FULLDEBUG , ""Checking %s:%s = %ld\\n"" , pCred -> cred -> GetOwner ( ) , pCred -> cred -> GetName ( ) , time )"		1031060	0					
ANR	1031146	Callee	dprintf		1031060	0					
ANR	1031147	Identifier	dprintf		1031060	0					
ANR	1031148	ArgumentList	D_FULLDEBUG		1031060	1					
ANR	1031149	Argument	D_FULLDEBUG		1031060	0					
ANR	1031150	Identifier	D_FULLDEBUG		1031060	0					
ANR	1031151	Argument	"""Checking %s:%s = %ld\\n"""		1031060	1					
ANR	1031152	PrimaryExpression	"""Checking %s:%s = %ld\\n"""		1031060	0					
ANR	1031153	Argument	pCred -> cred -> GetOwner ( )		1031060	2					
ANR	1031154	CallExpression	pCred -> cred -> GetOwner ( )		1031060	0					
ANR	1031155	Callee	pCred -> cred -> GetOwner		1031060	0					
ANR	1031156	PtrMemberAccess	pCred -> cred -> GetOwner		1031060	0					
ANR	1031157	PtrMemberAccess	pCred -> cred		1031060	0					
ANR	1031158	Identifier	pCred		1031060	0					
ANR	1031159	Identifier	cred		1031060	1					
ANR	1031160	Identifier	GetOwner		1031060	1					
ANR	1031161	ArgumentList			1031060	1					
ANR	1031162	Argument	pCred -> cred -> GetName ( )		1031060	3					
ANR	1031163	CallExpression	pCred -> cred -> GetName ( )		1031060	0					
ANR	1031164	Callee	pCred -> cred -> GetName		1031060	0					
ANR	1031165	PtrMemberAccess	pCred -> cred -> GetName		1031060	0					
ANR	1031166	PtrMemberAccess	pCred -> cred		1031060	0					
ANR	1031167	Identifier	pCred		1031060	0					
ANR	1031168	Identifier	cred		1031060	1					
ANR	1031169	Identifier	GetName		1031060	1					
ANR	1031170	ArgumentList			1031060	1					
ANR	1031171	Argument	time		1031060	4					
ANR	1031172	Identifier	time		1031060	0					
ANR	1031173	IfStatement	if ( time - now < 0 )		1031060	4					
ANR	1031174	Condition	time - now < 0	630:8:15434:15447	1031060	0	True				
ANR	1031175	RelationalExpression	time - now < 0		1031060	0		<			
ANR	1031176	AdditiveExpression	time - now		1031060	0		-			
ANR	1031177	Identifier	time		1031060	0					
ANR	1031178	Identifier	now		1031060	1					
ANR	1031179	PrimaryExpression	0		1031060	1					
ANR	1031180	CompoundStatement		20:24:513:513	1031060	1					
ANR	1031181	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Credential %s:%s expired!\\n"" , pCred -> cred -> GetOwner ( ) , pCred -> cred -> GetName ( ) )"	631:6:15458:15575	1031060	0	True				
ANR	1031182	CallExpression	"dprintf ( D_FULLDEBUG , ""Credential %s:%s expired!\\n"" , pCred -> cred -> GetOwner ( ) , pCred -> cred -> GetName ( ) )"		1031060	0					
ANR	1031183	Callee	dprintf		1031060	0					
ANR	1031184	Identifier	dprintf		1031060	0					
ANR	1031185	ArgumentList	D_FULLDEBUG		1031060	1					
ANR	1031186	Argument	D_FULLDEBUG		1031060	0					
ANR	1031187	Identifier	D_FULLDEBUG		1031060	0					
ANR	1031188	Argument	"""Credential %s:%s expired!\\n"""		1031060	1					
ANR	1031189	PrimaryExpression	"""Credential %s:%s expired!\\n"""		1031060	0					
ANR	1031190	Argument	pCred -> cred -> GetOwner ( )		1031060	2					
ANR	1031191	CallExpression	pCred -> cred -> GetOwner ( )		1031060	0					
ANR	1031192	Callee	pCred -> cred -> GetOwner		1031060	0					
ANR	1031193	PtrMemberAccess	pCred -> cred -> GetOwner		1031060	0					
ANR	1031194	PtrMemberAccess	pCred -> cred		1031060	0					
ANR	1031195	Identifier	pCred		1031060	0					
ANR	1031196	Identifier	cred		1031060	1					
ANR	1031197	Identifier	GetOwner		1031060	1					
ANR	1031198	ArgumentList			1031060	1					
ANR	1031199	Argument	pCred -> cred -> GetName ( )		1031060	3					
ANR	1031200	CallExpression	pCred -> cred -> GetName ( )		1031060	0					
ANR	1031201	Callee	pCred -> cred -> GetName		1031060	0					
ANR	1031202	PtrMemberAccess	pCred -> cred -> GetName		1031060	0					
ANR	1031203	PtrMemberAccess	pCred -> cred		1031060	0					
ANR	1031204	Identifier	pCred		1031060	0					
ANR	1031205	Identifier	cred		1031060	1					
ANR	1031206	Identifier	GetName		1031060	1					
ANR	1031207	ArgumentList			1031060	1					
ANR	1031208	ElseStatement	else		1031060	0					
ANR	1031209	IfStatement	if ( time - now < default_cred_expire_threshold )		1031060	0					
ANR	1031210	Condition	time - now < default_cred_expire_threshold	635:13:15596:15637	1031060	0	True				
ANR	1031211	RelationalExpression	time - now < default_cred_expire_threshold		1031060	0		<			
ANR	1031212	AdditiveExpression	time - now		1031060	0		-			
ANR	1031213	Identifier	time		1031060	0					
ANR	1031214	Identifier	now		1031060	1					
ANR	1031215	Identifier	default_cred_expire_threshold		1031060	1					
ANR	1031216	CompoundStatement		25:57:703:703	1031060	1					
ANR	1031217	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Credential %s:%s about to expire\\n"" , pCred -> cred -> GetOwner ( ) , pCred -> cred -> GetName ( ) )"	636:6:15648:15772	1031060	0	True				
ANR	1031218	CallExpression	"dprintf ( D_FULLDEBUG , ""Credential %s:%s about to expire\\n"" , pCred -> cred -> GetOwner ( ) , pCred -> cred -> GetName ( ) )"		1031060	0					
ANR	1031219	Callee	dprintf		1031060	0					
ANR	1031220	Identifier	dprintf		1031060	0					
ANR	1031221	ArgumentList	D_FULLDEBUG		1031060	1					
ANR	1031222	Argument	D_FULLDEBUG		1031060	0					
ANR	1031223	Identifier	D_FULLDEBUG		1031060	0					
ANR	1031224	Argument	"""Credential %s:%s about to expire\\n"""		1031060	1					
ANR	1031225	PrimaryExpression	"""Credential %s:%s about to expire\\n"""		1031060	0					
ANR	1031226	Argument	pCred -> cred -> GetOwner ( )		1031060	2					
ANR	1031227	CallExpression	pCred -> cred -> GetOwner ( )		1031060	0					
ANR	1031228	Callee	pCred -> cred -> GetOwner		1031060	0					
ANR	1031229	PtrMemberAccess	pCred -> cred -> GetOwner		1031060	0					
ANR	1031230	PtrMemberAccess	pCred -> cred		1031060	0					
ANR	1031231	Identifier	pCred		1031060	0					
ANR	1031232	Identifier	cred		1031060	1					
ANR	1031233	Identifier	GetOwner		1031060	1					
ANR	1031234	ArgumentList			1031060	1					
ANR	1031235	Argument	pCred -> cred -> GetName ( )		1031060	3					
ANR	1031236	CallExpression	pCred -> cred -> GetName ( )		1031060	0					
ANR	1031237	Callee	pCred -> cred -> GetName		1031060	0					
ANR	1031238	PtrMemberAccess	pCred -> cred -> GetName		1031060	0					
ANR	1031239	PtrMemberAccess	pCred -> cred		1031060	0					
ANR	1031240	Identifier	pCred		1031060	0					
ANR	1031241	Identifier	cred		1031060	1					
ANR	1031242	Identifier	GetName		1031060	1					
ANR	1031243	ArgumentList			1031060	1					
ANR	1031244	IfStatement	if ( pCred -> cred -> GetType ( ) == X509_CREDENTIAL_TYPE )		1031060	1					
ANR	1031245	Condition	pCred -> cred -> GetType ( ) == X509_CREDENTIAL_TYPE	639:10:15784:15829	1031060	0	True				
ANR	1031246	EqualityExpression	pCred -> cred -> GetType ( ) == X509_CREDENTIAL_TYPE		1031060	0		==			
ANR	1031247	CallExpression	pCred -> cred -> GetType ( )		1031060	0					
ANR	1031248	Callee	pCred -> cred -> GetType		1031060	0					
ANR	1031249	PtrMemberAccess	pCred -> cred -> GetType		1031060	0					
ANR	1031250	PtrMemberAccess	pCred -> cred		1031060	0					
ANR	1031251	Identifier	pCred		1031060	0					
ANR	1031252	Identifier	cred		1031060	1					
ANR	1031253	Identifier	GetType		1031060	1					
ANR	1031254	ArgumentList			1031060	1					
ANR	1031255	Identifier	X509_CREDENTIAL_TYPE		1031060	1					
ANR	1031256	CompoundStatement		29:58:895:895	1031060	1					
ANR	1031257	ExpressionStatement	RefreshProxyThruMyProxy ( ( X509CredentialWrapper * ) pCred )	640:1:15835:15890	1031060	0	True				
ANR	1031258	CallExpression	RefreshProxyThruMyProxy ( ( X509CredentialWrapper * ) pCred )		1031060	0					
ANR	1031259	Callee	RefreshProxyThruMyProxy		1031060	0					
ANR	1031260	Identifier	RefreshProxyThruMyProxy		1031060	0					
ANR	1031261	ArgumentList	( X509CredentialWrapper * ) pCred		1031060	1					
ANR	1031262	Argument	( X509CredentialWrapper * ) pCred		1031060	0					
ANR	1031263	CastExpression	( X509CredentialWrapper * ) pCred		1031060	0					
ANR	1031264	CastTarget	X509CredentialWrapper *		1031060	0					
ANR	1031265	Identifier	pCred		1031060	1					
ANR	1031266	ExpressionStatement	set_priv ( priv )	644:4:15915:15930	1031060	5	True				
ANR	1031267	CallExpression	set_priv ( priv )		1031060	0					
ANR	1031268	Callee	set_priv		1031060	0					
ANR	1031269	Identifier	set_priv		1031060	0					
ANR	1031270	ArgumentList	priv		1031060	1					
ANR	1031271	Argument	priv		1031060	0					
ANR	1031272	Identifier	priv		1031060	0					
ANR	1031273	ReturnType	void		1031060	1					
ANR	1031274	Identifier	CheckCredentials		1031060	2					
ANR	1031275	ParameterList			1031060	3					
ANR	1031276	CFGEntryNode	ENTRY		1031060		True				
ANR	1031277	CFGExitNode	EXIT		1031060		True				
ANR	1031278	Symbol	pCred -> cred		1031060						
ANR	1031279	Symbol	NULL		1031060						
ANR	1031280	Symbol	* pCred		1031060						
ANR	1031281	Symbol	pCred -> cred -> GetType		1031060						
ANR	1031282	Symbol	credentials		1031060						
ANR	1031283	Symbol	pCred -> cred -> GetName		1031060						
ANR	1031284	Symbol	set_user_priv		1031060						
ANR	1031285	Symbol	D_FULLDEBUG		1031060						
ANR	1031286	Symbol	X509_CREDENTIAL_TYPE		1031060						
ANR	1031287	Symbol	pCred		1031060						
ANR	1031288	Symbol	now		1031060						
ANR	1031289	Symbol	* pCred -> cred		1031060						
ANR	1031290	Symbol	pCred -> cred -> GetRealExpirationTime		1031060						
ANR	1031291	Symbol	* * pCred		1031060						
ANR	1031292	Symbol	credentials . Next		1031060						
ANR	1031293	Symbol	time		1031060						
ANR	1031294	Symbol	priv		1031060						
ANR	1031295	Symbol	default_cred_expire_threshold		1031060						
ANR	1031296	Symbol	pCred -> cred -> GetOwner		1031060						
ANR	1031297	Function	RefreshProxyThruMyProxy	649:0:15960:21777							
ANR	1031298	FunctionDef	RefreshProxyThruMyProxy (X509CredentialWrapper * proxy)		1031297	0					
ANR	1031299	CompoundStatement		650:0:16019:21777	1031297	0					
ANR	1031300	IdentifierDeclStatement	const char * proxy_filename = proxy -> GetStorageName ( ) ;	651:2:16023:16076	1031297	0	True				
ANR	1031301	IdentifierDecl	* proxy_filename = proxy -> GetStorageName ( )		1031297	0					
ANR	1031302	IdentifierDeclType	const char *		1031297	0					
ANR	1031303	Identifier	proxy_filename		1031297	1					
ANR	1031304	AssignmentExpression	* proxy_filename = proxy -> GetStorageName ( )		1031297	2		=			
ANR	1031305	Identifier	proxy_filename		1031297	0					
ANR	1031306	CallExpression	proxy -> GetStorageName ( )		1031297	1					
ANR	1031307	Callee	proxy -> GetStorageName		1031297	0					
ANR	1031308	PtrMemberAccess	proxy -> GetStorageName		1031297	0					
ANR	1031309	Identifier	proxy		1031297	0					
ANR	1031310	Identifier	GetStorageName		1031297	1					
ANR	1031311	ArgumentList			1031297	1					
ANR	1031312	IdentifierDeclStatement	char * myproxy_host = NULL ;	652:2:16080:16106	1031297	1	True				
ANR	1031313	IdentifierDecl	* myproxy_host = NULL		1031297	0					
ANR	1031314	IdentifierDeclType	char *		1031297	0					
ANR	1031315	Identifier	myproxy_host		1031297	1					
ANR	1031316	AssignmentExpression	* myproxy_host = NULL		1031297	2		=			
ANR	1031317	Identifier	NULL		1031297	0					
ANR	1031318	Identifier	NULL		1031297	1					
ANR	1031319	IdentifierDeclStatement	int status ;	653:2:16110:16120	1031297	2	True				
ANR	1031320	IdentifierDecl	status		1031297	0					
ANR	1031321	IdentifierDeclType	int		1031297	0					
ANR	1031322	Identifier	status		1031297	1					
ANR	1031323	IfStatement	if ( ( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost ( ) == NULL )		1031297	3					
ANR	1031324	Condition	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost ( ) == NULL	655:6:16129:16190	1031297	0	True				
ANR	1031325	EqualityExpression	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost ( ) == NULL		1031297	0		==			
ANR	1031326	CallExpression	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost ( )		1031297	0					
ANR	1031327	Callee	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost		1031297	0					
ANR	1031328	PtrMemberAccess	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost		1031297	0					
ANR	1031329	CastExpression	( X509Credential * ) proxy -> cred		1031297	0					
ANR	1031330	CastTarget	X509Credential *		1031297	0					
ANR	1031331	PtrMemberAccess	proxy -> cred		1031297	1					
ANR	1031332	Identifier	proxy		1031297	0					
ANR	1031333	Identifier	cred		1031297	1					
ANR	1031334	Identifier	GetMyProxyServerHost		1031297	1					
ANR	1031335	ArgumentList			1031297	1					
ANR	1031336	Identifier	NULL		1031297	1					
ANR	1031337	CompoundStatement		6:70:173:173	1031297	1					
ANR	1031338	ExpressionStatement	"dprintf ( D_ALWAYS , ""Skipping %s\\n"" , proxy -> cred -> GetName ( ) )"	656:4:16199:16258	1031297	0	True				
ANR	1031339	CallExpression	"dprintf ( D_ALWAYS , ""Skipping %s\\n"" , proxy -> cred -> GetName ( ) )"		1031297	0					
ANR	1031340	Callee	dprintf		1031297	0					
ANR	1031341	Identifier	dprintf		1031297	0					
ANR	1031342	ArgumentList	D_ALWAYS		1031297	1					
ANR	1031343	Argument	D_ALWAYS		1031297	0					
ANR	1031344	Identifier	D_ALWAYS		1031297	0					
ANR	1031345	Argument	"""Skipping %s\\n"""		1031297	1					
ANR	1031346	PrimaryExpression	"""Skipping %s\\n"""		1031297	0					
ANR	1031347	Argument	proxy -> cred -> GetName ( )		1031297	2					
ANR	1031348	CallExpression	proxy -> cred -> GetName ( )		1031297	0					
ANR	1031349	Callee	proxy -> cred -> GetName		1031297	0					
ANR	1031350	PtrMemberAccess	proxy -> cred -> GetName		1031297	0					
ANR	1031351	PtrMemberAccess	proxy -> cred		1031297	0					
ANR	1031352	Identifier	proxy		1031297	0					
ANR	1031353	Identifier	cred		1031297	1					
ANR	1031354	Identifier	GetName		1031297	1					
ANR	1031355	ArgumentList			1031297	1					
ANR	1031356	ReturnStatement	return FALSE ;	657:4:16264:16276	1031297	1	True				
ANR	1031357	Identifier	FALSE		1031297	0					
ANR	1031358	IdentifierDeclStatement	time_t now = time ( NULL ) ;	661:2:16342:16365	1031297	4	True				
ANR	1031359	IdentifierDecl	now = time ( NULL )		1031297	0					
ANR	1031360	IdentifierDeclType	time_t		1031297	0					
ANR	1031361	Identifier	now		1031297	1					
ANR	1031362	AssignmentExpression	now = time ( NULL )		1031297	2		=			
ANR	1031363	Identifier	now		1031297	0					
ANR	1031364	CallExpression	time ( NULL )		1031297	1					
ANR	1031365	Callee	time		1031297	0					
ANR	1031366	Identifier	time		1031297	0					
ANR	1031367	ArgumentList	NULL		1031297	1					
ANR	1031368	Argument	NULL		1031297	0					
ANR	1031369	Identifier	NULL		1031297	0					
ANR	1031370	IfStatement	if ( proxy -> get_delegation_pid != GET_DELEGATION_PID_NONE )		1031297	5					
ANR	1031371	Condition	proxy -> get_delegation_pid != GET_DELEGATION_PID_NONE	663:6:16374:16425	1031297	0	True				
ANR	1031372	EqualityExpression	proxy -> get_delegation_pid != GET_DELEGATION_PID_NONE		1031297	0		!=			
ANR	1031373	PtrMemberAccess	proxy -> get_delegation_pid		1031297	0					
ANR	1031374	Identifier	proxy		1031297	0					
ANR	1031375	Identifier	get_delegation_pid		1031297	1					
ANR	1031376	Identifier	GET_DELEGATION_PID_NONE		1031297	1					
ANR	1031377	CompoundStatement		15:4:414:473	1031297	1					
ANR	1031378	IdentifierDeclStatement	time_t time_started = proxy -> get_delegation_proc_start_time ;	664:4:16434:16493	1031297	0	True				
ANR	1031379	IdentifierDecl	time_started = proxy -> get_delegation_proc_start_time		1031297	0					
ANR	1031380	IdentifierDeclType	time_t		1031297	0					
ANR	1031381	Identifier	time_started		1031297	1					
ANR	1031382	AssignmentExpression	time_started = proxy -> get_delegation_proc_start_time		1031297	2		=			
ANR	1031383	Identifier	time_started		1031297	0					
ANR	1031384	PtrMemberAccess	proxy -> get_delegation_proc_start_time		1031297	1					
ANR	1031385	Identifier	proxy		1031297	0					
ANR	1031386	Identifier	get_delegation_proc_start_time		1031297	1					
ANR	1031387	IfStatement	if ( now - time_started > 500 )		1031297	1					
ANR	1031388	Condition	now - time_started > 500	667:8:16569:16592	1031297	0	True				
ANR	1031389	RelationalExpression	now - time_started > 500		1031297	0		>			
ANR	1031390	AdditiveExpression	now - time_started		1031297	0		-			
ANR	1031391	Identifier	now		1031297	0					
ANR	1031392	Identifier	time_started		1031297	1					
ANR	1031393	PrimaryExpression	500		1031297	1					
ANR	1031394	CompoundStatement		18:34:575:575	1031297	1					
ANR	1031395	Statement	dprintf	668:6:16603:16609	1031297	0	True				
ANR	1031396	Statement	(	668:14:16611:16611	1031297	1	True				
ANR	1031397	Statement	D_FULLDEBUG	668:15:16612:16622	1031297	2	True				
ANR	1031398	Statement	","	668:26:16623:16623	1031297	3	True				
ANR	1031399	Statement	"""MyProxy refresh process pid=%d still running, """	668:28:16625:16672	1031297	4	True				
ANR	1031400	Statement	"""sending signal %d\\n"""	669:5:16679:16699	1031297	5	True				
ANR	1031401	Statement	","	669:26:16700:16700	1031297	6	True				
ANR	1031402	Statement	proxy	670:6:16708:16712	1031297	7	True				
ANR	1031403	Statement	->	670:11:16713:16714	1031297	8	True				
ANR	1031404	Statement	get_delegation_pid	670:13:16715:16732	1031297	9	True				
ANR	1031405	Statement	","	670:31:16733:16733	1031297	10	True				
ANR	1031406	Statement	SIGKILL	670:33:16735:16741	1031297	11	True				
ANR	1031407	Statement	)	670:40:16742:16742	1031297	12	True				
ANR	1031408	ExpressionStatement		670:41:16743:16743	1031297	13	True				
ANR	1031409	ExpressionStatement	"daemonCore -> Send_Signal ( proxy -> get_delegation_pid , SIGKILL )"	671:6:16751:16811	1031297	14	True				
ANR	1031410	CallExpression	"daemonCore -> Send_Signal ( proxy -> get_delegation_pid , SIGKILL )"		1031297	0					
ANR	1031411	Callee	daemonCore -> Send_Signal		1031297	0					
ANR	1031412	PtrMemberAccess	daemonCore -> Send_Signal		1031297	0					
ANR	1031413	Identifier	daemonCore		1031297	0					
ANR	1031414	Identifier	Send_Signal		1031297	1					
ANR	1031415	ArgumentList	proxy -> get_delegation_pid		1031297	1					
ANR	1031416	Argument	proxy -> get_delegation_pid		1031297	0					
ANR	1031417	PtrMemberAccess	proxy -> get_delegation_pid		1031297	0					
ANR	1031418	Identifier	proxy		1031297	0					
ANR	1031419	Identifier	get_delegation_pid		1031297	1					
ANR	1031420	Argument	SIGKILL		1031297	1					
ANR	1031421	Identifier	SIGKILL		1031297	0					
ANR	1031422	ElseStatement	else		1031297	0					
ANR	1031423	CompoundStatement		24:11:838:838	1031297	0					
ANR	1031424	Statement	dprintf	674:6:16866:16872	1031297	0	True				
ANR	1031425	Statement	(	674:14:16874:16874	1031297	1	True				
ANR	1031426	Statement	D_FULLDEBUG	674:15:16875:16885	1031297	2	True				
ANR	1031427	Statement	","	674:26:16886:16886	1031297	3	True				
ANR	1031428	Statement	"""MyProxy refresh process pid=%d still running, """	674:28:16888:16935	1031297	4	True				
ANR	1031429	Statement	"""letting it finish\\n"""	675:5:16942:16962	1031297	5	True				
ANR	1031430	Statement	","	675:26:16963:16963	1031297	6	True				
ANR	1031431	Statement	proxy	676:6:16971:16975	1031297	7	True				
ANR	1031432	Statement	->	676:11:16976:16977	1031297	8	True				
ANR	1031433	Statement	get_delegation_pid	676:13:16978:16995	1031297	9	True				
ANR	1031434	Statement	)	676:31:16996:16996	1031297	10	True				
ANR	1031435	ExpressionStatement		676:32:16997:16997	1031297	11	True				
ANR	1031436	ReturnStatement	return FALSE ;	678:1:17003:17015	1031297	2	True				
ANR	1031437	Identifier	FALSE		1031297	0					
ANR	1031438	ExpressionStatement	proxy -> get_delegation_proc_start_time = now	681:2:17024:17067	1031297	6	True				
ANR	1031439	AssignmentExpression	proxy -> get_delegation_proc_start_time = now		1031297	0		=			
ANR	1031440	PtrMemberAccess	proxy -> get_delegation_proc_start_time		1031297	0					
ANR	1031441	Identifier	proxy		1031297	0					
ANR	1031442	Identifier	get_delegation_proc_start_time		1031297	1					
ANR	1031443	Identifier	now		1031297	1					
ANR	1031444	IdentifierDeclStatement	Env myEnv ;	684:2:17124:17133	1031297	7	True				
ANR	1031445	IdentifierDecl	myEnv		1031297	0					
ANR	1031446	IdentifierDeclType	Env		1031297	0					
ANR	1031447	Identifier	myEnv		1031297	1					
ANR	1031448	IdentifierDeclStatement	MyString strBuff ;	685:2:17137:17153	1031297	8	True				
ANR	1031449	IdentifierDecl	strBuff		1031297	0					
ANR	1031450	IdentifierDeclType	MyString		1031297	0					
ANR	1031451	Identifier	strBuff		1031297	1					
ANR	1031452	IfStatement	if ( ( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerDN ( ) )		1031297	9					
ANR	1031453	Condition	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerDN ( )	687:6:17162:17213	1031297	0	True				
ANR	1031454	CallExpression	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerDN ( )		1031297	0					
ANR	1031455	Callee	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerDN		1031297	0					
ANR	1031456	PtrMemberAccess	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerDN		1031297	0					
ANR	1031457	CastExpression	( X509Credential * ) proxy -> cred		1031297	0					
ANR	1031458	CastTarget	X509Credential *		1031297	0					
ANR	1031459	PtrMemberAccess	proxy -> cred		1031297	1					
ANR	1031460	Identifier	proxy		1031297	0					
ANR	1031461	Identifier	cred		1031297	1					
ANR	1031462	Identifier	GetMyProxyServerDN		1031297	1					
ANR	1031463	ArgumentList			1031297	1					
ANR	1031464	CompoundStatement		38:60:1196:1196	1031297	1					
ANR	1031465	ExpressionStatement	"strBuff = ""MYPROXY_SERVER_DN="""	688:4:17222:17250	1031297	0	True				
ANR	1031466	AssignmentExpression	"strBuff = ""MYPROXY_SERVER_DN="""		1031297	0		=			
ANR	1031467	Identifier	strBuff		1031297	0					
ANR	1031468	PrimaryExpression	"""MYPROXY_SERVER_DN="""		1031297	1					
ANR	1031469	ExpressionStatement	strBuff += ( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerDN ( )	689:4:17256:17318	1031297	1	True				
ANR	1031470	AssignmentExpression	strBuff += ( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerDN ( )		1031297	0		+=			
ANR	1031471	Identifier	strBuff		1031297	0					
ANR	1031472	CallExpression	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerDN ( )		1031297	1					
ANR	1031473	Callee	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerDN		1031297	0					
ANR	1031474	PtrMemberAccess	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerDN		1031297	0					
ANR	1031475	CastExpression	( X509Credential * ) proxy -> cred		1031297	0					
ANR	1031476	CastTarget	X509Credential *		1031297	0					
ANR	1031477	PtrMemberAccess	proxy -> cred		1031297	1					
ANR	1031478	Identifier	proxy		1031297	0					
ANR	1031479	Identifier	cred		1031297	1					
ANR	1031480	Identifier	GetMyProxyServerDN		1031297	1					
ANR	1031481	ArgumentList			1031297	1					
ANR	1031482	ExpressionStatement	myEnv . SetEnv ( strBuff . Value ( ) )	690:4:17324:17354	1031297	2	True				
ANR	1031483	CallExpression	myEnv . SetEnv ( strBuff . Value ( ) )		1031297	0					
ANR	1031484	Callee	myEnv . SetEnv		1031297	0					
ANR	1031485	MemberAccess	myEnv . SetEnv		1031297	0					
ANR	1031486	Identifier	myEnv		1031297	0					
ANR	1031487	Identifier	SetEnv		1031297	1					
ANR	1031488	ArgumentList	strBuff . Value ( )		1031297	1					
ANR	1031489	Argument	strBuff . Value ( )		1031297	0					
ANR	1031490	CallExpression	strBuff . Value ( )		1031297	0					
ANR	1031491	Callee	strBuff . Value		1031297	0					
ANR	1031492	MemberAccess	strBuff . Value		1031297	0					
ANR	1031493	Identifier	strBuff		1031297	0					
ANR	1031494	Identifier	Value		1031297	1					
ANR	1031495	ArgumentList			1031297	1					
ANR	1031496	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""%s\\n"" , strBuff . Value ( ) )"	691:4:17360:17406	1031297	3	True				
ANR	1031497	CallExpression	"dprintf ( D_FULLDEBUG , ""%s\\n"" , strBuff . Value ( ) )"		1031297	0					
ANR	1031498	Callee	dprintf		1031297	0					
ANR	1031499	Identifier	dprintf		1031297	0					
ANR	1031500	ArgumentList	D_FULLDEBUG		1031297	1					
ANR	1031501	Argument	D_FULLDEBUG		1031297	0					
ANR	1031502	Identifier	D_FULLDEBUG		1031297	0					
ANR	1031503	Argument	"""%s\\n"""		1031297	1					
ANR	1031504	PrimaryExpression	"""%s\\n"""		1031297	0					
ANR	1031505	Argument	strBuff . Value ( )		1031297	2					
ANR	1031506	CallExpression	strBuff . Value ( )		1031297	0					
ANR	1031507	Callee	strBuff . Value		1031297	0					
ANR	1031508	MemberAccess	strBuff . Value		1031297	0					
ANR	1031509	Identifier	strBuff		1031297	0					
ANR	1031510	Identifier	Value		1031297	1					
ANR	1031511	ArgumentList			1031297	1					
ANR	1031512	ExpressionStatement	"strBuff = ""X509_USER_PROXY="""	694:2:17415:17441	1031297	10	True				
ANR	1031513	AssignmentExpression	"strBuff = ""X509_USER_PROXY="""		1031297	0		=			
ANR	1031514	Identifier	strBuff		1031297	0					
ANR	1031515	PrimaryExpression	"""X509_USER_PROXY="""		1031297	1					
ANR	1031516	ExpressionStatement	strBuff += proxy -> GetStorageName ( )	695:2:17445:17477	1031297	11	True				
ANR	1031517	AssignmentExpression	strBuff += proxy -> GetStorageName ( )		1031297	0		+=			
ANR	1031518	Identifier	strBuff		1031297	0					
ANR	1031519	CallExpression	proxy -> GetStorageName ( )		1031297	1					
ANR	1031520	Callee	proxy -> GetStorageName		1031297	0					
ANR	1031521	PtrMemberAccess	proxy -> GetStorageName		1031297	0					
ANR	1031522	Identifier	proxy		1031297	0					
ANR	1031523	Identifier	GetStorageName		1031297	1					
ANR	1031524	ArgumentList			1031297	1					
ANR	1031525	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""%s\\n"" , strBuff . Value ( ) )"	696:2:17481:17527	1031297	12	True				
ANR	1031526	CallExpression	"dprintf ( D_FULLDEBUG , ""%s\\n"" , strBuff . Value ( ) )"		1031297	0					
ANR	1031527	Callee	dprintf		1031297	0					
ANR	1031528	Identifier	dprintf		1031297	0					
ANR	1031529	ArgumentList	D_FULLDEBUG		1031297	1					
ANR	1031530	Argument	D_FULLDEBUG		1031297	0					
ANR	1031531	Identifier	D_FULLDEBUG		1031297	0					
ANR	1031532	Argument	"""%s\\n"""		1031297	1					
ANR	1031533	PrimaryExpression	"""%s\\n"""		1031297	0					
ANR	1031534	Argument	strBuff . Value ( )		1031297	2					
ANR	1031535	CallExpression	strBuff . Value ( )		1031297	0					
ANR	1031536	Callee	strBuff . Value		1031297	0					
ANR	1031537	MemberAccess	strBuff . Value		1031297	0					
ANR	1031538	Identifier	strBuff		1031297	0					
ANR	1031539	Identifier	Value		1031297	1					
ANR	1031540	ArgumentList			1031297	1					
ANR	1031541	IdentifierDeclStatement	const char * myproxy_password = ( ( X509Credential * ) proxy -> cred ) -> GetRefreshPassword ( ) ;	699:2:17605:17688	1031297	13	True				
ANR	1031542	IdentifierDecl	* myproxy_password = ( ( X509Credential * ) proxy -> cred ) -> GetRefreshPassword ( )		1031297	0					
ANR	1031543	IdentifierDeclType	const char *		1031297	0					
ANR	1031544	Identifier	myproxy_password		1031297	1					
ANR	1031545	AssignmentExpression	* myproxy_password = ( ( X509Credential * ) proxy -> cred ) -> GetRefreshPassword ( )		1031297	2		=			
ANR	1031546	Identifier	myproxy_password		1031297	0					
ANR	1031547	CallExpression	( ( X509Credential * ) proxy -> cred ) -> GetRefreshPassword ( )		1031297	1					
ANR	1031548	Callee	( ( X509Credential * ) proxy -> cred ) -> GetRefreshPassword		1031297	0					
ANR	1031549	PtrMemberAccess	( ( X509Credential * ) proxy -> cred ) -> GetRefreshPassword		1031297	0					
ANR	1031550	CastExpression	( X509Credential * ) proxy -> cred		1031297	0					
ANR	1031551	CastTarget	X509Credential *		1031297	0					
ANR	1031552	PtrMemberAccess	proxy -> cred		1031297	1					
ANR	1031553	Identifier	proxy		1031297	0					
ANR	1031554	Identifier	cred		1031297	1					
ANR	1031555	Identifier	GetRefreshPassword		1031297	1					
ANR	1031556	ArgumentList			1031297	1					
ANR	1031557	IfStatement	if ( myproxy_password == NULL )		1031297	14					
ANR	1031558	Condition	myproxy_password == NULL	700:6:17696:17719	1031297	0	True				
ANR	1031559	EqualityExpression	myproxy_password == NULL		1031297	0		==			
ANR	1031560	Identifier	myproxy_password		1031297	0					
ANR	1031561	Identifier	NULL		1031297	1					
ANR	1031562	CompoundStatement		51:33:1703:1703	1031297	1					
ANR	1031563	ExpressionStatement	"dprintf ( D_ALWAYS , ""No MyProxy password specified for %s:%s\\n"" , proxy -> cred -> GetName ( ) , proxy -> cred -> GetOwner ( ) )"	701:4:17729:17853	1031297	0	True				
ANR	1031564	CallExpression	"dprintf ( D_ALWAYS , ""No MyProxy password specified for %s:%s\\n"" , proxy -> cred -> GetName ( ) , proxy -> cred -> GetOwner ( ) )"		1031297	0					
ANR	1031565	Callee	dprintf		1031297	0					
ANR	1031566	Identifier	dprintf		1031297	0					
ANR	1031567	ArgumentList	D_ALWAYS		1031297	1					
ANR	1031568	Argument	D_ALWAYS		1031297	0					
ANR	1031569	Identifier	D_ALWAYS		1031297	0					
ANR	1031570	Argument	"""No MyProxy password specified for %s:%s\\n"""		1031297	1					
ANR	1031571	PrimaryExpression	"""No MyProxy password specified for %s:%s\\n"""		1031297	0					
ANR	1031572	Argument	proxy -> cred -> GetName ( )		1031297	2					
ANR	1031573	CallExpression	proxy -> cred -> GetName ( )		1031297	0					
ANR	1031574	Callee	proxy -> cred -> GetName		1031297	0					
ANR	1031575	PtrMemberAccess	proxy -> cred -> GetName		1031297	0					
ANR	1031576	PtrMemberAccess	proxy -> cred		1031297	0					
ANR	1031577	Identifier	proxy		1031297	0					
ANR	1031578	Identifier	cred		1031297	1					
ANR	1031579	Identifier	GetName		1031297	1					
ANR	1031580	ArgumentList			1031297	1					
ANR	1031581	Argument	proxy -> cred -> GetOwner ( )		1031297	3					
ANR	1031582	CallExpression	proxy -> cred -> GetOwner ( )		1031297	0					
ANR	1031583	Callee	proxy -> cred -> GetOwner		1031297	0					
ANR	1031584	PtrMemberAccess	proxy -> cred -> GetOwner		1031297	0					
ANR	1031585	PtrMemberAccess	proxy -> cred		1031297	0					
ANR	1031586	Identifier	proxy		1031297	0					
ANR	1031587	Identifier	cred		1031297	1					
ANR	1031588	Identifier	GetOwner		1031297	1					
ANR	1031589	ArgumentList			1031297	1					
ANR	1031590	ExpressionStatement	"myproxy_password = """""	704:4:17859:17880	1031297	1	True				
ANR	1031591	AssignmentExpression	"myproxy_password = """""		1031297	0		=			
ANR	1031592	Identifier	myproxy_password		1031297	0					
ANR	1031593	PrimaryExpression	""""""		1031297	1					
ANR	1031594	ExpressionStatement	status = pipe ( proxy -> get_delegation_password_pipe )	707:2:17889:17940	1031297	15	True				
ANR	1031595	AssignmentExpression	status = pipe ( proxy -> get_delegation_password_pipe )		1031297	0		=			
ANR	1031596	Identifier	status		1031297	0					
ANR	1031597	CallExpression	pipe ( proxy -> get_delegation_password_pipe )		1031297	1					
ANR	1031598	Callee	pipe		1031297	0					
ANR	1031599	Identifier	pipe		1031297	0					
ANR	1031600	ArgumentList	proxy -> get_delegation_password_pipe		1031297	1					
ANR	1031601	Argument	proxy -> get_delegation_password_pipe		1031297	0					
ANR	1031602	PtrMemberAccess	proxy -> get_delegation_password_pipe		1031297	0					
ANR	1031603	Identifier	proxy		1031297	0					
ANR	1031604	Identifier	get_delegation_password_pipe		1031297	1					
ANR	1031605	IfStatement	if ( status == - 1 )		1031297	16					
ANR	1031606	Condition	status == - 1	708:6:17948:17959	1031297	0	True				
ANR	1031607	EqualityExpression	status == - 1		1031297	0		==			
ANR	1031608	Identifier	status		1031297	0					
ANR	1031609	UnaryOperationExpression	- 1		1031297	1					
ANR	1031610	UnaryOperator	-		1031297	0					
ANR	1031611	PrimaryExpression	1		1031297	1					
ANR	1031612	CompoundStatement		59:20:1942:1942	1031297	1					
ANR	1031613	ExpressionStatement	"dprintf ( D_ALWAYS , ""get_delegation pipe() failed: %s\\n"" , strerror ( errno ) )"	709:1:17965:18039	1031297	0	True				
ANR	1031614	CallExpression	"dprintf ( D_ALWAYS , ""get_delegation pipe() failed: %s\\n"" , strerror ( errno ) )"		1031297	0					
ANR	1031615	Callee	dprintf		1031297	0					
ANR	1031616	Identifier	dprintf		1031297	0					
ANR	1031617	ArgumentList	D_ALWAYS		1031297	1					
ANR	1031618	Argument	D_ALWAYS		1031297	0					
ANR	1031619	Identifier	D_ALWAYS		1031297	0					
ANR	1031620	Argument	"""get_delegation pipe() failed: %s\\n"""		1031297	1					
ANR	1031621	PrimaryExpression	"""get_delegation pipe() failed: %s\\n"""		1031297	0					
ANR	1031622	Argument	strerror ( errno )		1031297	2					
ANR	1031623	CallExpression	strerror ( errno )		1031297	0					
ANR	1031624	Callee	strerror		1031297	0					
ANR	1031625	Identifier	strerror		1031297	0					
ANR	1031626	ArgumentList	errno		1031297	1					
ANR	1031627	Argument	errno		1031297	0					
ANR	1031628	Identifier	errno		1031297	0					
ANR	1031629	ExpressionStatement	proxy -> get_delegation_reset ( )	710:1:18042:18071	1031297	1	True				
ANR	1031630	CallExpression	proxy -> get_delegation_reset ( )		1031297	0					
ANR	1031631	Callee	proxy -> get_delegation_reset		1031297	0					
ANR	1031632	PtrMemberAccess	proxy -> get_delegation_reset		1031297	0					
ANR	1031633	Identifier	proxy		1031297	0					
ANR	1031634	Identifier	get_delegation_reset		1031297	1					
ANR	1031635	ArgumentList			1031297	1					
ANR	1031636	ReturnStatement	return FALSE ;	711:1:18074:18086	1031297	2	True				
ANR	1031637	Identifier	FALSE		1031297	0					
ANR	1031638	ExpressionStatement	"write ( proxy -> get_delegation_password_pipe [ 1 ] , myproxy_password , strlen ( myproxy_password ) )"	714:2:18159:18254	1031297	17	True				
ANR	1031639	CallExpression	"write ( proxy -> get_delegation_password_pipe [ 1 ] , myproxy_password , strlen ( myproxy_password ) )"		1031297	0					
ANR	1031640	Callee	write		1031297	0					
ANR	1031641	Identifier	write		1031297	0					
ANR	1031642	ArgumentList	proxy -> get_delegation_password_pipe [ 1 ]		1031297	1					
ANR	1031643	Argument	proxy -> get_delegation_password_pipe [ 1 ]		1031297	0					
ANR	1031644	ArrayIndexing	proxy -> get_delegation_password_pipe [ 1 ]		1031297	0					
ANR	1031645	PtrMemberAccess	proxy -> get_delegation_password_pipe		1031297	0					
ANR	1031646	Identifier	proxy		1031297	0					
ANR	1031647	Identifier	get_delegation_password_pipe		1031297	1					
ANR	1031648	PrimaryExpression	1		1031297	1					
ANR	1031649	Argument	myproxy_password		1031297	1					
ANR	1031650	Identifier	myproxy_password		1031297	0					
ANR	1031651	Argument	strlen ( myproxy_password )		1031297	2					
ANR	1031652	CallExpression	strlen ( myproxy_password )		1031297	0					
ANR	1031653	Callee	strlen		1031297	0					
ANR	1031654	Identifier	strlen		1031297	0					
ANR	1031655	ArgumentList	myproxy_password		1031297	1					
ANR	1031656	Argument	myproxy_password		1031297	0					
ANR	1031657	Identifier	myproxy_password		1031297	0					
ANR	1031658	ExpressionStatement	"write ( proxy -> get_delegation_password_pipe [ 1 ] , ""\\n"" , 1 )"	717:2:18258:18313	1031297	18	True				
ANR	1031659	CallExpression	"write ( proxy -> get_delegation_password_pipe [ 1 ] , ""\\n"" , 1 )"		1031297	0					
ANR	1031660	Callee	write		1031297	0					
ANR	1031661	Identifier	write		1031297	0					
ANR	1031662	ArgumentList	proxy -> get_delegation_password_pipe [ 1 ]		1031297	1					
ANR	1031663	Argument	proxy -> get_delegation_password_pipe [ 1 ]		1031297	0					
ANR	1031664	ArrayIndexing	proxy -> get_delegation_password_pipe [ 1 ]		1031297	0					
ANR	1031665	PtrMemberAccess	proxy -> get_delegation_password_pipe		1031297	0					
ANR	1031666	Identifier	proxy		1031297	0					
ANR	1031667	Identifier	get_delegation_password_pipe		1031297	1					
ANR	1031668	PrimaryExpression	1		1031297	1					
ANR	1031669	Argument	"""\\n"""		1031297	1					
ANR	1031670	PrimaryExpression	"""\\n"""		1031297	0					
ANR	1031671	Argument	1		1031297	2					
ANR	1031672	PrimaryExpression	1		1031297	0					
ANR	1031673	IdentifierDeclStatement	const char * username = proxy -> cred -> GetOrigOwner ( ) ;	721:2:18346:18397	1031297	19	True				
ANR	1031674	IdentifierDecl	* username = proxy -> cred -> GetOrigOwner ( )		1031297	0					
ANR	1031675	IdentifierDeclType	const char *		1031297	0					
ANR	1031676	Identifier	username		1031297	1					
ANR	1031677	AssignmentExpression	* username = proxy -> cred -> GetOrigOwner ( )		1031297	2		=			
ANR	1031678	Identifier	username		1031297	0					
ANR	1031679	CallExpression	proxy -> cred -> GetOrigOwner ( )		1031297	1					
ANR	1031680	Callee	proxy -> cred -> GetOrigOwner		1031297	0					
ANR	1031681	PtrMemberAccess	proxy -> cred -> GetOrigOwner		1031297	0					
ANR	1031682	PtrMemberAccess	proxy -> cred		1031297	0					
ANR	1031683	Identifier	proxy		1031297	0					
ANR	1031684	Identifier	cred		1031297	1					
ANR	1031685	Identifier	GetOrigOwner		1031297	1					
ANR	1031686	ArgumentList			1031297	1					
ANR	1031687	ExpressionStatement	myproxy_host = getHostFromAddr ( ( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost ( ) )	724:2:18440:18527	1031297	20	True				
ANR	1031688	AssignmentExpression	myproxy_host = getHostFromAddr ( ( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost ( ) )		1031297	0		=			
ANR	1031689	Identifier	myproxy_host		1031297	0					
ANR	1031690	CallExpression	getHostFromAddr ( ( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost ( ) )		1031297	1					
ANR	1031691	Callee	getHostFromAddr		1031297	0					
ANR	1031692	Identifier	getHostFromAddr		1031297	0					
ANR	1031693	ArgumentList	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost ( )		1031297	1					
ANR	1031694	Argument	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost ( )		1031297	0					
ANR	1031695	CallExpression	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost ( )		1031297	0					
ANR	1031696	Callee	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost		1031297	0					
ANR	1031697	PtrMemberAccess	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost		1031297	0					
ANR	1031698	CastExpression	( X509Credential * ) proxy -> cred		1031297	0					
ANR	1031699	CastTarget	X509Credential *		1031297	0					
ANR	1031700	PtrMemberAccess	proxy -> cred		1031297	1					
ANR	1031701	Identifier	proxy		1031297	0					
ANR	1031702	Identifier	cred		1031297	1					
ANR	1031703	Identifier	GetMyProxyServerHost		1031297	1					
ANR	1031704	ArgumentList			1031297	1					
ANR	1031705	IdentifierDeclStatement	int myproxy_port = getPortFromAddr ( ( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost ( ) ) ;	725:2:18531:18622	1031297	21	True				
ANR	1031706	IdentifierDecl	myproxy_port = getPortFromAddr ( ( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost ( ) )		1031297	0					
ANR	1031707	IdentifierDeclType	int		1031297	0					
ANR	1031708	Identifier	myproxy_port		1031297	1					
ANR	1031709	AssignmentExpression	myproxy_port = getPortFromAddr ( ( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost ( ) )		1031297	2		=			
ANR	1031710	Identifier	myproxy_port		1031297	0					
ANR	1031711	CallExpression	getPortFromAddr ( ( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost ( ) )		1031297	1					
ANR	1031712	Callee	getPortFromAddr		1031297	0					
ANR	1031713	Identifier	getPortFromAddr		1031297	0					
ANR	1031714	ArgumentList	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost ( )		1031297	1					
ANR	1031715	Argument	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost ( )		1031297	0					
ANR	1031716	CallExpression	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost ( )		1031297	0					
ANR	1031717	Callee	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost		1031297	0					
ANR	1031718	PtrMemberAccess	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost		1031297	0					
ANR	1031719	CastExpression	( X509Credential * ) proxy -> cred		1031297	0					
ANR	1031720	CastTarget	X509Credential *		1031297	0					
ANR	1031721	PtrMemberAccess	proxy -> cred		1031297	1					
ANR	1031722	Identifier	proxy		1031297	0					
ANR	1031723	Identifier	cred		1031297	1					
ANR	1031724	Identifier	GetMyProxyServerHost		1031297	1					
ANR	1031725	ArgumentList			1031297	1					
ANR	1031726	IdentifierDeclStatement	ArgList args ;	728:2:18652:18664	1031297	22	True				
ANR	1031727	IdentifierDecl	args		1031297	0					
ANR	1031728	IdentifierDeclType	ArgList		1031297	0					
ANR	1031729	Identifier	args		1031297	1					
ANR	1031730	ExpressionStatement	"args . AppendArg ( ""--verbose "" )"	729:2:18668:18696	1031297	23	True				
ANR	1031731	CallExpression	"args . AppendArg ( ""--verbose "" )"		1031297	0					
ANR	1031732	Callee	args . AppendArg		1031297	0					
ANR	1031733	MemberAccess	args . AppendArg		1031297	0					
ANR	1031734	Identifier	args		1031297	0					
ANR	1031735	Identifier	AppendArg		1031297	1					
ANR	1031736	ArgumentList	"""--verbose """		1031297	1					
ANR	1031737	Argument	"""--verbose """		1031297	0					
ANR	1031738	PrimaryExpression	"""--verbose """		1031297	0					
ANR	1031739	ExpressionStatement	"args . AppendArg ( ""--out"" )"	731:2:18701:18724	1031297	24	True				
ANR	1031740	CallExpression	"args . AppendArg ( ""--out"" )"		1031297	0					
ANR	1031741	Callee	args . AppendArg		1031297	0					
ANR	1031742	MemberAccess	args . AppendArg		1031297	0					
ANR	1031743	Identifier	args		1031297	0					
ANR	1031744	Identifier	AppendArg		1031297	1					
ANR	1031745	ArgumentList	"""--out"""		1031297	1					
ANR	1031746	Argument	"""--out"""		1031297	0					
ANR	1031747	PrimaryExpression	"""--out"""		1031297	0					
ANR	1031748	ExpressionStatement	args . AppendArg ( proxy_filename )	732:2:18728:18758	1031297	25	True				
ANR	1031749	CallExpression	args . AppendArg ( proxy_filename )		1031297	0					
ANR	1031750	Callee	args . AppendArg		1031297	0					
ANR	1031751	MemberAccess	args . AppendArg		1031297	0					
ANR	1031752	Identifier	args		1031297	0					
ANR	1031753	Identifier	AppendArg		1031297	1					
ANR	1031754	ArgumentList	proxy_filename		1031297	1					
ANR	1031755	Argument	proxy_filename		1031297	0					
ANR	1031756	Identifier	proxy_filename		1031297	0					
ANR	1031757	ExpressionStatement	"args . AppendArg ( ""--pshost"" )"	734:2:18763:18789	1031297	26	True				
ANR	1031758	CallExpression	"args . AppendArg ( ""--pshost"" )"		1031297	0					
ANR	1031759	Callee	args . AppendArg		1031297	0					
ANR	1031760	MemberAccess	args . AppendArg		1031297	0					
ANR	1031761	Identifier	args		1031297	0					
ANR	1031762	Identifier	AppendArg		1031297	1					
ANR	1031763	ArgumentList	"""--pshost"""		1031297	1					
ANR	1031764	Argument	"""--pshost"""		1031297	0					
ANR	1031765	PrimaryExpression	"""--pshost"""		1031297	0					
ANR	1031766	ExpressionStatement	args . AppendArg ( myproxy_host )	735:2:18793:18821	1031297	27	True				
ANR	1031767	CallExpression	args . AppendArg ( myproxy_host )		1031297	0					
ANR	1031768	Callee	args . AppendArg		1031297	0					
ANR	1031769	MemberAccess	args . AppendArg		1031297	0					
ANR	1031770	Identifier	args		1031297	0					
ANR	1031771	Identifier	AppendArg		1031297	1					
ANR	1031772	ArgumentList	myproxy_host		1031297	1					
ANR	1031773	Argument	myproxy_host		1031297	0					
ANR	1031774	Identifier	myproxy_host		1031297	0					
ANR	1031775	IfStatement	if ( myproxy_host != NULL )		1031297	28					
ANR	1031776	Condition	myproxy_host != NULL	736:7:18830:18849	1031297	0	True				
ANR	1031777	EqualityExpression	myproxy_host != NULL		1031297	0		!=			
ANR	1031778	Identifier	myproxy_host		1031297	0					
ANR	1031779	Identifier	NULL		1031297	1					
ANR	1031780	CompoundStatement		87:30:2833:2833	1031297	1					
ANR	1031781	ExpressionStatement	free ( myproxy_host )	737:3:18858:18879	1031297	0	True				
ANR	1031782	CallExpression	free ( myproxy_host )		1031297	0					
ANR	1031783	Callee	free		1031297	0					
ANR	1031784	Identifier	free		1031297	0					
ANR	1031785	ArgumentList	myproxy_host		1031297	1					
ANR	1031786	Argument	myproxy_host		1031297	0					
ANR	1031787	Identifier	myproxy_host		1031297	0					
ANR	1031788	ExpressionStatement	"args . AppendArg ( ""--dn_as_username"" )"	740:2:18888:18922	1031297	29	True				
ANR	1031789	CallExpression	"args . AppendArg ( ""--dn_as_username"" )"		1031297	0					
ANR	1031790	Callee	args . AppendArg		1031297	0					
ANR	1031791	MemberAccess	args . AppendArg		1031297	0					
ANR	1031792	Identifier	args		1031297	0					
ANR	1031793	Identifier	AppendArg		1031297	1					
ANR	1031794	ArgumentList	"""--dn_as_username"""		1031297	1					
ANR	1031795	Argument	"""--dn_as_username"""		1031297	0					
ANR	1031796	PrimaryExpression	"""--dn_as_username"""		1031297	0					
ANR	1031797	ExpressionStatement	"args . AppendArg ( ""--proxy_lifetime"" )"	742:2:18927:18961	1031297	30	True				
ANR	1031798	CallExpression	"args . AppendArg ( ""--proxy_lifetime"" )"		1031297	0					
ANR	1031799	Callee	args . AppendArg		1031297	0					
ANR	1031800	MemberAccess	args . AppendArg		1031297	0					
ANR	1031801	Identifier	args		1031297	0					
ANR	1031802	Identifier	AppendArg		1031297	1					
ANR	1031803	ArgumentList	"""--proxy_lifetime"""		1031297	1					
ANR	1031804	Argument	"""--proxy_lifetime"""		1031297	0					
ANR	1031805	PrimaryExpression	"""--proxy_lifetime"""		1031297	0					
ANR	1031806	ExpressionStatement	args . AppendArg ( 6 )	743:2:18974:18991	1031297	31	True				
ANR	1031807	CallExpression	args . AppendArg ( 6 )		1031297	0					
ANR	1031808	Callee	args . AppendArg		1031297	0					
ANR	1031809	MemberAccess	args . AppendArg		1031297	0					
ANR	1031810	Identifier	args		1031297	0					
ANR	1031811	Identifier	AppendArg		1031297	1					
ANR	1031812	ArgumentList	6		1031297	1					
ANR	1031813	Argument	6		1031297	0					
ANR	1031814	PrimaryExpression	6		1031297	0					
ANR	1031815	ExpressionStatement	"args . AppendArg ( ""--stdin_pass"" )"	745:2:18996:19026	1031297	32	True				
ANR	1031816	CallExpression	"args . AppendArg ( ""--stdin_pass"" )"		1031297	0					
ANR	1031817	Callee	args . AppendArg		1031297	0					
ANR	1031818	MemberAccess	args . AppendArg		1031297	0					
ANR	1031819	Identifier	args		1031297	0					
ANR	1031820	Identifier	AppendArg		1031297	1					
ANR	1031821	ArgumentList	"""--stdin_pass"""		1031297	1					
ANR	1031822	Argument	"""--stdin_pass"""		1031297	0					
ANR	1031823	PrimaryExpression	"""--stdin_pass"""		1031297	0					
ANR	1031824	ExpressionStatement	"args . AppendArg ( ""--username"" )"	747:2:19031:19059	1031297	33	True				
ANR	1031825	CallExpression	"args . AppendArg ( ""--username"" )"		1031297	0					
ANR	1031826	Callee	args . AppendArg		1031297	0					
ANR	1031827	MemberAccess	args . AppendArg		1031297	0					
ANR	1031828	Identifier	args		1031297	0					
ANR	1031829	Identifier	AppendArg		1031297	1					
ANR	1031830	ArgumentList	"""--username"""		1031297	1					
ANR	1031831	Argument	"""--username"""		1031297	0					
ANR	1031832	PrimaryExpression	"""--username"""		1031297	0					
ANR	1031833	ExpressionStatement	args . AppendArg ( username )	748:2:19063:19087	1031297	34	True				
ANR	1031834	CallExpression	args . AppendArg ( username )		1031297	0					
ANR	1031835	Callee	args . AppendArg		1031297	0					
ANR	1031836	MemberAccess	args . AppendArg		1031297	0					
ANR	1031837	Identifier	args		1031297	0					
ANR	1031838	Identifier	AppendArg		1031297	1					
ANR	1031839	ArgumentList	username		1031297	1					
ANR	1031840	Argument	username		1031297	0					
ANR	1031841	Identifier	username		1031297	0					
ANR	1031842	IfStatement	if ( myproxy_port )		1031297	35					
ANR	1031843	Condition	myproxy_port	751:6:19124:19135	1031297	0	True				
ANR	1031844	Identifier	myproxy_port		1031297	0					
ANR	1031845	CompoundStatement		102:20:3118:3118	1031297	1					
ANR	1031846	ExpressionStatement	"args . AppendArg ( ""--psport"" )"	752:3:19143:19169	1031297	0	True				
ANR	1031847	CallExpression	"args . AppendArg ( ""--psport"" )"		1031297	0					
ANR	1031848	Callee	args . AppendArg		1031297	0					
ANR	1031849	MemberAccess	args . AppendArg		1031297	0					
ANR	1031850	Identifier	args		1031297	0					
ANR	1031851	Identifier	AppendArg		1031297	1					
ANR	1031852	ArgumentList	"""--psport"""		1031297	1					
ANR	1031853	Argument	"""--psport"""		1031297	0					
ANR	1031854	PrimaryExpression	"""--psport"""		1031297	0					
ANR	1031855	ExpressionStatement	args . AppendArg ( myproxy_port )	753:3:19174:19202	1031297	1	True				
ANR	1031856	CallExpression	args . AppendArg ( myproxy_port )		1031297	0					
ANR	1031857	Callee	args . AppendArg		1031297	0					
ANR	1031858	MemberAccess	args . AppendArg		1031297	0					
ANR	1031859	Identifier	args		1031297	0					
ANR	1031860	Identifier	AppendArg		1031297	1					
ANR	1031861	ArgumentList	myproxy_port		1031297	1					
ANR	1031862	Argument	myproxy_port		1031297	0					
ANR	1031863	Identifier	myproxy_port		1031297	0					
ANR	1031864	IfStatement	if ( ( ( X509Credential * ) proxy -> cred ) -> GetCredentialName ( ) && ( ( ( X509Credential * ) proxy -> cred ) -> GetCredentialName ( ) ) [ 0 ] )		1031297	36					
ANR	1031865	Condition	( ( X509Credential * ) proxy -> cred ) -> GetCredentialName ( ) && ( ( ( X509Credential * ) proxy -> cred ) -> GetCredentialName ( ) ) [ 0 ]	757:7:19246:19364	1031297	0	True				
ANR	1031866	AndExpression	( ( X509Credential * ) proxy -> cred ) -> GetCredentialName ( ) && ( ( ( X509Credential * ) proxy -> cred ) -> GetCredentialName ( ) ) [ 0 ]		1031297	0		&&			
ANR	1031867	CallExpression	( ( X509Credential * ) proxy -> cred ) -> GetCredentialName ( )		1031297	0					
ANR	1031868	Callee	( ( X509Credential * ) proxy -> cred ) -> GetCredentialName		1031297	0					
ANR	1031869	PtrMemberAccess	( ( X509Credential * ) proxy -> cred ) -> GetCredentialName		1031297	0					
ANR	1031870	CastExpression	( X509Credential * ) proxy -> cred		1031297	0					
ANR	1031871	CastTarget	X509Credential *		1031297	0					
ANR	1031872	PtrMemberAccess	proxy -> cred		1031297	1					
ANR	1031873	Identifier	proxy		1031297	0					
ANR	1031874	Identifier	cred		1031297	1					
ANR	1031875	Identifier	GetCredentialName		1031297	1					
ANR	1031876	ArgumentList			1031297	1					
ANR	1031877	ArrayIndexing	( ( ( X509Credential * ) proxy -> cred ) -> GetCredentialName ( ) ) [ 0 ]		1031297	1					
ANR	1031878	CallExpression	( ( X509Credential * ) proxy -> cred ) -> GetCredentialName ( )		1031297	0					
ANR	1031879	Callee	( ( X509Credential * ) proxy -> cred ) -> GetCredentialName		1031297	0					
ANR	1031880	PtrMemberAccess	( ( X509Credential * ) proxy -> cred ) -> GetCredentialName		1031297	0					
ANR	1031881	CastExpression	( X509Credential * ) proxy -> cred		1031297	0					
ANR	1031882	CastTarget	X509Credential *		1031297	0					
ANR	1031883	PtrMemberAccess	proxy -> cred		1031297	1					
ANR	1031884	Identifier	proxy		1031297	0					
ANR	1031885	Identifier	cred		1031297	1					
ANR	1031886	Identifier	GetCredentialName		1031297	1					
ANR	1031887	ArgumentList			1031297	1					
ANR	1031888	PrimaryExpression	0		1031297	1					
ANR	1031889	CompoundStatement		109:66:3348:3348	1031297	1					
ANR	1031890	ExpressionStatement	"args . AppendArg ( ""--credname"" )"	759:3:19373:19401	1031297	0	True				
ANR	1031891	CallExpression	"args . AppendArg ( ""--credname"" )"		1031297	0					
ANR	1031892	Callee	args . AppendArg		1031297	0					
ANR	1031893	MemberAccess	args . AppendArg		1031297	0					
ANR	1031894	Identifier	args		1031297	0					
ANR	1031895	Identifier	AppendArg		1031297	1					
ANR	1031896	ArgumentList	"""--credname"""		1031297	1					
ANR	1031897	Argument	"""--credname"""		1031297	0					
ANR	1031898	PrimaryExpression	"""--credname"""		1031297	0					
ANR	1031899	ExpressionStatement	args . AppendArg ( ( ( X509Credential * ) proxy -> cred ) -> GetCredentialName ( ) )	760:3:19406:19473	1031297	1	True				
ANR	1031900	CallExpression	args . AppendArg ( ( ( X509Credential * ) proxy -> cred ) -> GetCredentialName ( ) )		1031297	0					
ANR	1031901	Callee	args . AppendArg		1031297	0					
ANR	1031902	MemberAccess	args . AppendArg		1031297	0					
ANR	1031903	Identifier	args		1031297	0					
ANR	1031904	Identifier	AppendArg		1031297	1					
ANR	1031905	ArgumentList	( ( X509Credential * ) proxy -> cred ) -> GetCredentialName ( )		1031297	1					
ANR	1031906	Argument	( ( X509Credential * ) proxy -> cred ) -> GetCredentialName ( )		1031297	0					
ANR	1031907	CallExpression	( ( X509Credential * ) proxy -> cred ) -> GetCredentialName ( )		1031297	0					
ANR	1031908	Callee	( ( X509Credential * ) proxy -> cred ) -> GetCredentialName		1031297	0					
ANR	1031909	PtrMemberAccess	( ( X509Credential * ) proxy -> cred ) -> GetCredentialName		1031297	0					
ANR	1031910	CastExpression	( X509Credential * ) proxy -> cred		1031297	0					
ANR	1031911	CastTarget	X509Credential *		1031297	0					
ANR	1031912	PtrMemberAccess	proxy -> cred		1031297	1					
ANR	1031913	Identifier	proxy		1031297	0					
ANR	1031914	Identifier	cred		1031297	1					
ANR	1031915	Identifier	GetCredentialName		1031297	1					
ANR	1031916	ArgumentList			1031297	1					
ANR	1031917	IdentifierDeclStatement	priv_state priv = set_condor_priv ( ) ;	767:2:19601:19636	1031297	37	True				
ANR	1031918	IdentifierDecl	priv = set_condor_priv ( )		1031297	0					
ANR	1031919	IdentifierDeclType	priv_state		1031297	0					
ANR	1031920	Identifier	priv		1031297	1					
ANR	1031921	AssignmentExpression	priv = set_condor_priv ( )		1031297	2		=			
ANR	1031922	Identifier	priv		1031297	0					
ANR	1031923	CallExpression	set_condor_priv ( )		1031297	1					
ANR	1031924	Callee	set_condor_priv		1031297	0					
ANR	1031925	Identifier	set_condor_priv		1031297	0					
ANR	1031926	ArgumentList			1031297	1					
ANR	1031927	ExpressionStatement	proxy -> get_delegation_err_filename = create_temp_file ( )	768:2:19640:19695	1031297	38	True				
ANR	1031928	AssignmentExpression	proxy -> get_delegation_err_filename = create_temp_file ( )		1031297	0		=			
ANR	1031929	PtrMemberAccess	proxy -> get_delegation_err_filename		1031297	0					
ANR	1031930	Identifier	proxy		1031297	0					
ANR	1031931	Identifier	get_delegation_err_filename		1031297	1					
ANR	1031932	CallExpression	create_temp_file ( )		1031297	1					
ANR	1031933	Callee	create_temp_file		1031297	0					
ANR	1031934	Identifier	create_temp_file		1031297	0					
ANR	1031935	ArgumentList			1031297	1					
ANR	1031936	IfStatement	if ( proxy -> get_delegation_err_filename == NULL )		1031297	39					
ANR	1031937	Condition	proxy -> get_delegation_err_filename == NULL	769:6:19703:19744	1031297	0	True				
ANR	1031938	EqualityExpression	proxy -> get_delegation_err_filename == NULL		1031297	0		==			
ANR	1031939	PtrMemberAccess	proxy -> get_delegation_err_filename		1031297	0					
ANR	1031940	Identifier	proxy		1031297	0					
ANR	1031941	Identifier	get_delegation_err_filename		1031297	1					
ANR	1031942	Identifier	NULL		1031297	1					
ANR	1031943	CompoundStatement		120:50:3727:3727	1031297	1					
ANR	1031944	ExpressionStatement	"dprintf ( D_ALWAYS , ""get_delegation create_temp_file() failed: %s\\n"" , strerror ( errno ) )"	770:1:19750:19839	1031297	0	True				
ANR	1031945	CallExpression	"dprintf ( D_ALWAYS , ""get_delegation create_temp_file() failed: %s\\n"" , strerror ( errno ) )"		1031297	0					
ANR	1031946	Callee	dprintf		1031297	0					
ANR	1031947	Identifier	dprintf		1031297	0					
ANR	1031948	ArgumentList	D_ALWAYS		1031297	1					
ANR	1031949	Argument	D_ALWAYS		1031297	0					
ANR	1031950	Identifier	D_ALWAYS		1031297	0					
ANR	1031951	Argument	"""get_delegation create_temp_file() failed: %s\\n"""		1031297	1					
ANR	1031952	PrimaryExpression	"""get_delegation create_temp_file() failed: %s\\n"""		1031297	0					
ANR	1031953	Argument	strerror ( errno )		1031297	2					
ANR	1031954	CallExpression	strerror ( errno )		1031297	0					
ANR	1031955	Callee	strerror		1031297	0					
ANR	1031956	Identifier	strerror		1031297	0					
ANR	1031957	ArgumentList	errno		1031297	1					
ANR	1031958	Argument	errno		1031297	0					
ANR	1031959	Identifier	errno		1031297	0					
ANR	1031960	ExpressionStatement	proxy -> get_delegation_reset ( )	772:1:19842:19871	1031297	1	True				
ANR	1031961	CallExpression	proxy -> get_delegation_reset ( )		1031297	0					
ANR	1031962	Callee	proxy -> get_delegation_reset		1031297	0					
ANR	1031963	PtrMemberAccess	proxy -> get_delegation_reset		1031297	0					
ANR	1031964	Identifier	proxy		1031297	0					
ANR	1031965	Identifier	get_delegation_reset		1031297	1					
ANR	1031966	ArgumentList			1031297	1					
ANR	1031967	ReturnStatement	return FALSE ;	773:1:19874:19886	1031297	2	True				
ANR	1031968	Identifier	FALSE		1031297	0					
ANR	1031969	ExpressionStatement	"status = chmod ( proxy -> get_delegation_err_filename , 0600 )"	775:2:19894:19951	1031297	40	True				
ANR	1031970	AssignmentExpression	"status = chmod ( proxy -> get_delegation_err_filename , 0600 )"		1031297	0		=			
ANR	1031971	Identifier	status		1031297	0					
ANR	1031972	CallExpression	"chmod ( proxy -> get_delegation_err_filename , 0600 )"		1031297	1					
ANR	1031973	Callee	chmod		1031297	0					
ANR	1031974	Identifier	chmod		1031297	0					
ANR	1031975	ArgumentList	proxy -> get_delegation_err_filename		1031297	1					
ANR	1031976	Argument	proxy -> get_delegation_err_filename		1031297	0					
ANR	1031977	PtrMemberAccess	proxy -> get_delegation_err_filename		1031297	0					
ANR	1031978	Identifier	proxy		1031297	0					
ANR	1031979	Identifier	get_delegation_err_filename		1031297	1					
ANR	1031980	Argument	0600		1031297	1					
ANR	1031981	PrimaryExpression	0600		1031297	0					
ANR	1031982	IfStatement	if ( status == - 1 )		1031297	41					
ANR	1031983	Condition	status == - 1	776:6:19959:19970	1031297	0	True				
ANR	1031984	EqualityExpression	status == - 1		1031297	0		==			
ANR	1031985	Identifier	status		1031297	0					
ANR	1031986	UnaryOperationExpression	- 1		1031297	1					
ANR	1031987	UnaryOperator	-		1031297	0					
ANR	1031988	PrimaryExpression	1		1031297	1					
ANR	1031989	CompoundStatement		127:20:3953:3953	1031297	1					
ANR	1031990	ExpressionStatement	"dprintf ( D_ALWAYS , ""chmod() get_delegation_err_filename %s failed: %s\\n"" , proxy -> get_delegation_err_filename , strerror ( errno ) )"	777:1:19976:20106	1031297	0	True				
ANR	1031991	CallExpression	"dprintf ( D_ALWAYS , ""chmod() get_delegation_err_filename %s failed: %s\\n"" , proxy -> get_delegation_err_filename , strerror ( errno ) )"		1031297	0					
ANR	1031992	Callee	dprintf		1031297	0					
ANR	1031993	Identifier	dprintf		1031297	0					
ANR	1031994	ArgumentList	D_ALWAYS		1031297	1					
ANR	1031995	Argument	D_ALWAYS		1031297	0					
ANR	1031996	Identifier	D_ALWAYS		1031297	0					
ANR	1031997	Argument	"""chmod() get_delegation_err_filename %s failed: %s\\n"""		1031297	1					
ANR	1031998	PrimaryExpression	"""chmod() get_delegation_err_filename %s failed: %s\\n"""		1031297	0					
ANR	1031999	Argument	proxy -> get_delegation_err_filename		1031297	2					
ANR	1032000	PtrMemberAccess	proxy -> get_delegation_err_filename		1031297	0					
ANR	1032001	Identifier	proxy		1031297	0					
ANR	1032002	Identifier	get_delegation_err_filename		1031297	1					
ANR	1032003	Argument	strerror ( errno )		1031297	3					
ANR	1032004	CallExpression	strerror ( errno )		1031297	0					
ANR	1032005	Callee	strerror		1031297	0					
ANR	1032006	Identifier	strerror		1031297	0					
ANR	1032007	ArgumentList	errno		1031297	1					
ANR	1032008	Argument	errno		1031297	0					
ANR	1032009	Identifier	errno		1031297	0					
ANR	1032010	ExpressionStatement	proxy -> get_delegation_reset ( )	779:1:20109:20138	1031297	1	True				
ANR	1032011	CallExpression	proxy -> get_delegation_reset ( )		1031297	0					
ANR	1032012	Callee	proxy -> get_delegation_reset		1031297	0					
ANR	1032013	PtrMemberAccess	proxy -> get_delegation_reset		1031297	0					
ANR	1032014	Identifier	proxy		1031297	0					
ANR	1032015	Identifier	get_delegation_reset		1031297	1					
ANR	1032016	ArgumentList			1031297	1					
ANR	1032017	ReturnStatement	return FALSE ;	780:1:20141:20153	1031297	2	True				
ANR	1032018	Identifier	FALSE		1031297	0					
ANR	1032019	ExpressionStatement	"proxy -> get_delegation_err_fd = safe_open_wrapper_follow ( proxy -> get_delegation_err_filename , O_RDWR )"	784:2:20163:20261	1031297	42	True				
ANR	1032020	AssignmentExpression	"proxy -> get_delegation_err_fd = safe_open_wrapper_follow ( proxy -> get_delegation_err_filename , O_RDWR )"		1031297	0		=			
ANR	1032021	PtrMemberAccess	proxy -> get_delegation_err_fd		1031297	0					
ANR	1032022	Identifier	proxy		1031297	0					
ANR	1032023	Identifier	get_delegation_err_fd		1031297	1					
ANR	1032024	CallExpression	"safe_open_wrapper_follow ( proxy -> get_delegation_err_filename , O_RDWR )"		1031297	1					
ANR	1032025	Callee	safe_open_wrapper_follow		1031297	0					
ANR	1032026	Identifier	safe_open_wrapper_follow		1031297	0					
ANR	1032027	ArgumentList	proxy -> get_delegation_err_filename		1031297	1					
ANR	1032028	Argument	proxy -> get_delegation_err_filename		1031297	0					
ANR	1032029	PtrMemberAccess	proxy -> get_delegation_err_filename		1031297	0					
ANR	1032030	Identifier	proxy		1031297	0					
ANR	1032031	Identifier	get_delegation_err_filename		1031297	1					
ANR	1032032	Argument	O_RDWR		1031297	1					
ANR	1032033	Identifier	O_RDWR		1031297	0					
ANR	1032034	IfStatement	if ( proxy -> get_delegation_err_fd == - 1 )		1031297	43					
ANR	1032035	Condition	proxy -> get_delegation_err_fd == - 1	785:6:20269:20302	1031297	0	True				
ANR	1032036	EqualityExpression	proxy -> get_delegation_err_fd == - 1		1031297	0		==			
ANR	1032037	PtrMemberAccess	proxy -> get_delegation_err_fd		1031297	0					
ANR	1032038	Identifier	proxy		1031297	0					
ANR	1032039	Identifier	get_delegation_err_fd		1031297	1					
ANR	1032040	UnaryOperationExpression	- 1		1031297	1					
ANR	1032041	UnaryOperator	-		1031297	0					
ANR	1032042	PrimaryExpression	1		1031297	1					
ANR	1032043	CompoundStatement		136:42:4285:4285	1031297	1					
ANR	1032044	ExpressionStatement	"dprintf ( D_ALWAYS , ""Error opening get_delegation file %s: %s\\n"" , proxy -> get_delegation_err_filename , strerror ( errno ) )"	786:4:20311:20435	1031297	0	True				
ANR	1032045	CallExpression	"dprintf ( D_ALWAYS , ""Error opening get_delegation file %s: %s\\n"" , proxy -> get_delegation_err_filename , strerror ( errno ) )"		1031297	0					
ANR	1032046	Callee	dprintf		1031297	0					
ANR	1032047	Identifier	dprintf		1031297	0					
ANR	1032048	ArgumentList	D_ALWAYS		1031297	1					
ANR	1032049	Argument	D_ALWAYS		1031297	0					
ANR	1032050	Identifier	D_ALWAYS		1031297	0					
ANR	1032051	Argument	"""Error opening get_delegation file %s: %s\\n"""		1031297	1					
ANR	1032052	PrimaryExpression	"""Error opening get_delegation file %s: %s\\n"""		1031297	0					
ANR	1032053	Argument	proxy -> get_delegation_err_filename		1031297	2					
ANR	1032054	PtrMemberAccess	proxy -> get_delegation_err_filename		1031297	0					
ANR	1032055	Identifier	proxy		1031297	0					
ANR	1032056	Identifier	get_delegation_err_filename		1031297	1					
ANR	1032057	Argument	strerror ( errno )		1031297	3					
ANR	1032058	CallExpression	strerror ( errno )		1031297	0					
ANR	1032059	Callee	strerror		1031297	0					
ANR	1032060	Identifier	strerror		1031297	0					
ANR	1032061	ArgumentList	errno		1031297	1					
ANR	1032062	Argument	errno		1031297	0					
ANR	1032063	Identifier	errno		1031297	0					
ANR	1032064	ExpressionStatement	proxy -> get_delegation_reset ( )	788:1:20438:20467	1031297	1	True				
ANR	1032065	CallExpression	proxy -> get_delegation_reset ( )		1031297	0					
ANR	1032066	Callee	proxy -> get_delegation_reset		1031297	0					
ANR	1032067	PtrMemberAccess	proxy -> get_delegation_reset		1031297	0					
ANR	1032068	Identifier	proxy		1031297	0					
ANR	1032069	Identifier	get_delegation_reset		1031297	1					
ANR	1032070	ArgumentList			1031297	1					
ANR	1032071	ReturnStatement	return FALSE ;	789:1:20470:20482	1031297	2	True				
ANR	1032072	Identifier	FALSE		1031297	0					
ANR	1032073	ExpressionStatement	set_priv ( priv )	791:2:20490:20505	1031297	44	True				
ANR	1032074	CallExpression	set_priv ( priv )		1031297	0					
ANR	1032075	Callee	set_priv		1031297	0					
ANR	1032076	Identifier	set_priv		1031297	0					
ANR	1032077	ArgumentList	priv		1031297	1					
ANR	1032078	Argument	priv		1031297	0					
ANR	1032079	Identifier	priv		1031297	0					
ANR	1032080	IdentifierDeclStatement	int arrIO [ 3 ] ;	794:2:20511:20523	1031297	45	True				
ANR	1032081	IdentifierDecl	arrIO [ 3 ]		1031297	0					
ANR	1032082	IdentifierDeclType	int [ 3 ]		1031297	0					
ANR	1032083	Identifier	arrIO		1031297	1					
ANR	1032084	PrimaryExpression	3		1031297	2					
ANR	1032085	ExpressionStatement	arrIO [ 0 ] = proxy -> get_delegation_password_pipe [ 0 ]	795:2:20527:20574	1031297	46	True				
ANR	1032086	AssignmentExpression	arrIO [ 0 ] = proxy -> get_delegation_password_pipe [ 0 ]		1031297	0		=			
ANR	1032087	ArrayIndexing	arrIO [ 0 ]		1031297	0					
ANR	1032088	Identifier	arrIO		1031297	0					
ANR	1032089	PrimaryExpression	0		1031297	1					
ANR	1032090	ArrayIndexing	proxy -> get_delegation_password_pipe [ 0 ]		1031297	1					
ANR	1032091	PtrMemberAccess	proxy -> get_delegation_password_pipe		1031297	0					
ANR	1032092	Identifier	proxy		1031297	0					
ANR	1032093	Identifier	get_delegation_password_pipe		1031297	1					
ANR	1032094	PrimaryExpression	0		1031297	1					
ANR	1032095	ExpressionStatement	arrIO [ 1 ] = - 1	796:2:20586:20597	1031297	47	True				
ANR	1032096	AssignmentExpression	arrIO [ 1 ] = - 1		1031297	0		=			
ANR	1032097	ArrayIndexing	arrIO [ 1 ]		1031297	0					
ANR	1032098	Identifier	arrIO		1031297	0					
ANR	1032099	PrimaryExpression	1		1031297	1					
ANR	1032100	UnaryOperationExpression	- 1		1031297	1					
ANR	1032101	UnaryOperator	-		1031297	0					
ANR	1032102	PrimaryExpression	1		1031297	1					
ANR	1032103	ExpressionStatement	arrIO [ 2 ] = proxy -> get_delegation_err_fd	797:2:20633:20670	1031297	48	True				
ANR	1032104	AssignmentExpression	arrIO [ 2 ] = proxy -> get_delegation_err_fd		1031297	0		=			
ANR	1032105	ArrayIndexing	arrIO [ 2 ]		1031297	0					
ANR	1032106	Identifier	arrIO		1031297	0					
ANR	1032107	PrimaryExpression	2		1031297	1					
ANR	1032108	PtrMemberAccess	proxy -> get_delegation_err_fd		1031297	1					
ANR	1032109	Identifier	proxy		1031297	0					
ANR	1032110	Identifier	get_delegation_err_fd		1031297	1					
ANR	1032111	IdentifierDeclStatement	"char * myproxy_get_delegation_pgm = param ( ""MYPROXY_GET_DELEGATION"" ) ;"	800:2:20686:20754	1031297	49	True				
ANR	1032112	IdentifierDecl	"* myproxy_get_delegation_pgm = param ( ""MYPROXY_GET_DELEGATION"" )"		1031297	0					
ANR	1032113	IdentifierDeclType	char *		1031297	0					
ANR	1032114	Identifier	myproxy_get_delegation_pgm		1031297	1					
ANR	1032115	AssignmentExpression	"* myproxy_get_delegation_pgm = param ( ""MYPROXY_GET_DELEGATION"" )"		1031297	2		=			
ANR	1032116	Identifier	myproxy_get_delegation_pgm		1031297	0					
ANR	1032117	CallExpression	"param ( ""MYPROXY_GET_DELEGATION"" )"		1031297	1					
ANR	1032118	Callee	param		1031297	0					
ANR	1032119	Identifier	param		1031297	0					
ANR	1032120	ArgumentList	"""MYPROXY_GET_DELEGATION"""		1031297	1					
ANR	1032121	Argument	"""MYPROXY_GET_DELEGATION"""		1031297	0					
ANR	1032122	PrimaryExpression	"""MYPROXY_GET_DELEGATION"""		1031297	0					
ANR	1032123	IfStatement	if ( ! myproxy_get_delegation_pgm )		1031297	50					
ANR	1032124	Condition	! myproxy_get_delegation_pgm	801:6:20762:20788	1031297	0	True				
ANR	1032125	UnaryOperationExpression	! myproxy_get_delegation_pgm		1031297	0					
ANR	1032126	UnaryOperator	!		1031297	0					
ANR	1032127	Identifier	myproxy_get_delegation_pgm		1031297	1					
ANR	1032128	CompoundStatement		152:35:4771:4771	1031297	1					
ANR	1032129	ExpressionStatement	"dprintf ( D_ALWAYS , ""MYPROXY_GET_DELEGATION not defined in config file\\n"" )"	802:4:20797:20870	1031297	0	True				
ANR	1032130	CallExpression	"dprintf ( D_ALWAYS , ""MYPROXY_GET_DELEGATION not defined in config file\\n"" )"		1031297	0					
ANR	1032131	Callee	dprintf		1031297	0					
ANR	1032132	Identifier	dprintf		1031297	0					
ANR	1032133	ArgumentList	D_ALWAYS		1031297	1					
ANR	1032134	Argument	D_ALWAYS		1031297	0					
ANR	1032135	Identifier	D_ALWAYS		1031297	0					
ANR	1032136	Argument	"""MYPROXY_GET_DELEGATION not defined in config file\\n"""		1031297	1					
ANR	1032137	PrimaryExpression	"""MYPROXY_GET_DELEGATION not defined in config file\\n"""		1031297	0					
ANR	1032138	ReturnStatement	return FALSE ;	803:4:20876:20888	1031297	1	True				
ANR	1032139	Identifier	FALSE		1031297	0					
ANR	1032140	IdentifierDeclStatement	MyString args_string ;	805:2:20896:20916	1031297	51	True				
ANR	1032141	IdentifierDecl	args_string		1031297	0					
ANR	1032142	IdentifierDeclType	MyString		1031297	0					
ANR	1032143	Identifier	args_string		1031297	1					
ANR	1032144	ExpressionStatement	args . GetArgsStringForDisplay ( & args_string )	806:2:20920:20962	1031297	52	True				
ANR	1032145	CallExpression	args . GetArgsStringForDisplay ( & args_string )		1031297	0					
ANR	1032146	Callee	args . GetArgsStringForDisplay		1031297	0					
ANR	1032147	MemberAccess	args . GetArgsStringForDisplay		1031297	0					
ANR	1032148	Identifier	args		1031297	0					
ANR	1032149	Identifier	GetArgsStringForDisplay		1031297	1					
ANR	1032150	ArgumentList	& args_string		1031297	1					
ANR	1032151	Argument	& args_string		1031297	0					
ANR	1032152	UnaryOperationExpression	& args_string		1031297	0					
ANR	1032153	UnaryOperator	&		1031297	0					
ANR	1032154	Identifier	args_string		1031297	1					
ANR	1032155	ExpressionStatement	"dprintf ( D_ALWAYS , ""Calling %s %s\\n"" , myproxy_get_delegation_pgm , args_string . Value ( ) )"	807:2:20966:21052	1031297	53	True				
ANR	1032156	CallExpression	"dprintf ( D_ALWAYS , ""Calling %s %s\\n"" , myproxy_get_delegation_pgm , args_string . Value ( ) )"		1031297	0					
ANR	1032157	Callee	dprintf		1031297	0					
ANR	1032158	Identifier	dprintf		1031297	0					
ANR	1032159	ArgumentList	D_ALWAYS		1031297	1					
ANR	1032160	Argument	D_ALWAYS		1031297	0					
ANR	1032161	Identifier	D_ALWAYS		1031297	0					
ANR	1032162	Argument	"""Calling %s %s\\n"""		1031297	1					
ANR	1032163	PrimaryExpression	"""Calling %s %s\\n"""		1031297	0					
ANR	1032164	Argument	myproxy_get_delegation_pgm		1031297	2					
ANR	1032165	Identifier	myproxy_get_delegation_pgm		1031297	0					
ANR	1032166	Argument	args_string . Value ( )		1031297	3					
ANR	1032167	CallExpression	args_string . Value ( )		1031297	0					
ANR	1032168	Callee	args_string . Value		1031297	0					
ANR	1032169	MemberAccess	args_string . Value		1031297	0					
ANR	1032170	Identifier	args_string		1031297	0					
ANR	1032171	Identifier	Value		1031297	1					
ANR	1032172	ArgumentList			1031297	1					
ANR	1032173	IdentifierDeclStatement	"int pid = daemonCore -> Create_Process ( myproxy_get_delegation_pgm , args , PRIV_USER_FINAL , myproxyGetDelegationReaperId , FALSE , & myEnv , NULL , NULL , NULL , arrIO ) ;"	809:2:21057:21417	1031297	54	True				
ANR	1032174	IdentifierDecl	"pid = daemonCore -> Create_Process ( myproxy_get_delegation_pgm , args , PRIV_USER_FINAL , myproxyGetDelegationReaperId , FALSE , & myEnv , NULL , NULL , NULL , arrIO )"		1031297	0					
ANR	1032175	IdentifierDeclType	int		1031297	0					
ANR	1032176	Identifier	pid		1031297	1					
ANR	1032177	AssignmentExpression	"pid = daemonCore -> Create_Process ( myproxy_get_delegation_pgm , args , PRIV_USER_FINAL , myproxyGetDelegationReaperId , FALSE , & myEnv , NULL , NULL , NULL , arrIO )"		1031297	2		=			
ANR	1032178	Identifier	pid		1031297	0					
ANR	1032179	CallExpression	"daemonCore -> Create_Process ( myproxy_get_delegation_pgm , args , PRIV_USER_FINAL , myproxyGetDelegationReaperId , FALSE , & myEnv , NULL , NULL , NULL , arrIO )"		1031297	1					
ANR	1032180	Callee	daemonCore -> Create_Process		1031297	0					
ANR	1032181	PtrMemberAccess	daemonCore -> Create_Process		1031297	0					
ANR	1032182	Identifier	daemonCore		1031297	0					
ANR	1032183	Identifier	Create_Process		1031297	1					
ANR	1032184	ArgumentList	myproxy_get_delegation_pgm		1031297	1					
ANR	1032185	Argument	myproxy_get_delegation_pgm		1031297	0					
ANR	1032186	Identifier	myproxy_get_delegation_pgm		1031297	0					
ANR	1032187	Argument	args		1031297	1					
ANR	1032188	Identifier	args		1031297	0					
ANR	1032189	Argument	PRIV_USER_FINAL		1031297	2					
ANR	1032190	Identifier	PRIV_USER_FINAL		1031297	0					
ANR	1032191	Argument	myproxyGetDelegationReaperId		1031297	3					
ANR	1032192	Identifier	myproxyGetDelegationReaperId		1031297	0					
ANR	1032193	Argument	FALSE		1031297	4					
ANR	1032194	Identifier	FALSE		1031297	0					
ANR	1032195	Argument	& myEnv		1031297	5					
ANR	1032196	UnaryOperationExpression	& myEnv		1031297	0					
ANR	1032197	UnaryOperator	&		1031297	0					
ANR	1032198	Identifier	myEnv		1031297	1					
ANR	1032199	Argument	NULL		1031297	6					
ANR	1032200	Identifier	NULL		1031297	0					
ANR	1032201	Argument	NULL		1031297	7					
ANR	1032202	Identifier	NULL		1031297	0					
ANR	1032203	Argument	NULL		1031297	8					
ANR	1032204	Identifier	NULL		1031297	0					
ANR	1032205	Argument	arrIO		1031297	9					
ANR	1032206	Identifier	arrIO		1031297	0					
ANR	1032207	ExpressionStatement	free ( myproxy_get_delegation_pgm )	822:2:21505:21538	1031297	55	True				
ANR	1032208	CallExpression	free ( myproxy_get_delegation_pgm )		1031297	0					
ANR	1032209	Callee	free		1031297	0					
ANR	1032210	Identifier	free		1031297	0					
ANR	1032211	ArgumentList	myproxy_get_delegation_pgm		1031297	1					
ANR	1032212	Argument	myproxy_get_delegation_pgm		1031297	0					
ANR	1032213	Identifier	myproxy_get_delegation_pgm		1031297	0					
ANR	1032214	ExpressionStatement	myproxy_get_delegation_pgm = NULL	823:2:21542:21575	1031297	56	True				
ANR	1032215	AssignmentExpression	myproxy_get_delegation_pgm = NULL		1031297	0		=			
ANR	1032216	Identifier	myproxy_get_delegation_pgm		1031297	0					
ANR	1032217	Identifier	NULL		1031297	1					
ANR	1032218	IfStatement	if ( pid == FALSE )		1031297	57					
ANR	1032219	Condition	pid == FALSE	828:6:21589:21600	1031297	0	True				
ANR	1032220	EqualityExpression	pid == FALSE		1031297	0		==			
ANR	1032221	Identifier	pid		1031297	0					
ANR	1032222	Identifier	FALSE		1031297	1					
ANR	1032223	CompoundStatement		179:20:5583:5583	1031297	1					
ANR	1032224	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to run myproxy-get-delegation\\n"" )"	829:4:21609:21669	1031297	0	True				
ANR	1032225	CallExpression	"dprintf ( D_ALWAYS , ""Failed to run myproxy-get-delegation\\n"" )"		1031297	0					
ANR	1032226	Callee	dprintf		1031297	0					
ANR	1032227	Identifier	dprintf		1031297	0					
ANR	1032228	ArgumentList	D_ALWAYS		1031297	1					
ANR	1032229	Argument	D_ALWAYS		1031297	0					
ANR	1032230	Identifier	D_ALWAYS		1031297	0					
ANR	1032231	Argument	"""Failed to run myproxy-get-delegation\\n"""		1031297	1					
ANR	1032232	PrimaryExpression	"""Failed to run myproxy-get-delegation\\n"""		1031297	0					
ANR	1032233	ExpressionStatement	proxy -> get_delegation_reset ( )	830:1:21672:21701	1031297	1	True				
ANR	1032234	CallExpression	proxy -> get_delegation_reset ( )		1031297	0					
ANR	1032235	Callee	proxy -> get_delegation_reset		1031297	0					
ANR	1032236	PtrMemberAccess	proxy -> get_delegation_reset		1031297	0					
ANR	1032237	Identifier	proxy		1031297	0					
ANR	1032238	Identifier	get_delegation_reset		1031297	1					
ANR	1032239	ArgumentList			1031297	1					
ANR	1032240	ReturnStatement	return FALSE ;	831:4:21707:21719	1031297	2	True				
ANR	1032241	Identifier	FALSE		1031297	0					
ANR	1032242	ExpressionStatement	proxy -> get_delegation_pid = pid	834:2:21728:21759	1031297	58	True				
ANR	1032243	AssignmentExpression	proxy -> get_delegation_pid = pid		1031297	0		=			
ANR	1032244	PtrMemberAccess	proxy -> get_delegation_pid		1031297	0					
ANR	1032245	Identifier	proxy		1031297	0					
ANR	1032246	Identifier	get_delegation_pid		1031297	1					
ANR	1032247	Identifier	pid		1031297	1					
ANR	1032248	ReturnStatement	return TRUE ;	836:2:21764:21775	1031297	59	True				
ANR	1032249	Identifier	TRUE		1031297	0					
ANR	1032250	ReturnType	int		1031297	1					
ANR	1032251	Identifier	RefreshProxyThruMyProxy		1031297	2					
ANR	1032252	ParameterList	X509CredentialWrapper * proxy		1031297	3					
ANR	1032253	Parameter	X509CredentialWrapper * proxy	649:28:15988:16016	1031297	0	True				
ANR	1032254	ParameterType	X509CredentialWrapper *		1031297	0					
ANR	1032255	Identifier	proxy		1031297	1					
ANR	1032256	CFGEntryNode	ENTRY		1031297		True				
ANR	1032257	CFGExitNode	EXIT		1031297		True				
ANR	1032258	Symbol	daemonCore -> Create_Process		1031297						
ANR	1032259	Symbol	set_condor_priv		1031297						
ANR	1032260	Symbol	time_started		1031297						
ANR	1032261	Symbol	proxy -> cred -> GetOrigOwner		1031297						
ANR	1032262	Symbol	pid		1031297						
ANR	1032263	Symbol	* ( ( X509Credential * ) proxy -> cred ) -> GetCredentialName		1031297						
ANR	1032264	Symbol	getHostFromAddr		1031297						
ANR	1032265	Symbol	myproxy_port		1031297						
ANR	1032266	Symbol	strlen		1031297						
ANR	1032267	Symbol	proxy -> cred		1031297						
ANR	1032268	Symbol	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerDN		1031297						
ANR	1032269	Symbol	myEnv		1031297						
ANR	1032270	Symbol	pipe		1031297						
ANR	1032271	Symbol	priv		1031297						
ANR	1032272	Symbol	* * proxy		1031297						
ANR	1032273	Symbol	errno		1031297						
ANR	1032274	Symbol	NULL		1031297						
ANR	1032275	Symbol	strBuff . Value		1031297						
ANR	1032276	Symbol	args_string . Value		1031297						
ANR	1032277	Symbol	TRUE		1031297						
ANR	1032278	Symbol	D_FULLDEBUG		1031297						
ANR	1032279	Symbol	create_temp_file		1031297						
ANR	1032280	Symbol	( ( X509Credential * ) proxy -> cred ) -> GetMyProxyServerHost		1031297						
ANR	1032281	Symbol	strerror		1031297						
ANR	1032282	Symbol	proxy		1031297						
ANR	1032283	Symbol	* * proxy -> cred		1031297						
ANR	1032284	Symbol	* daemonCore		1031297						
ANR	1032285	Symbol	* proxy		1031297						
ANR	1032286	Symbol	proxy -> GetStorageName		1031297						
ANR	1032287	Symbol	* arrIO		1031297						
ANR	1032288	Symbol	myproxy_get_delegation_pgm		1031297						
ANR	1032289	Symbol	status		1031297						
ANR	1032290	Symbol	myproxyGetDelegationReaperId		1031297						
ANR	1032291	Symbol	& args_string		1031297						
ANR	1032292	Symbol	safe_open_wrapper_follow		1031297						
ANR	1032293	Symbol	* proxy -> cred		1031297						
ANR	1032294	Symbol	arrIO		1031297						
ANR	1032295	Symbol	GET_DELEGATION_PID_NONE		1031297						
ANR	1032296	Symbol	SIGKILL		1031297						
ANR	1032297	Symbol	myproxy_host		1031297						
ANR	1032298	Symbol	proxy -> get_delegation_proc_start_time		1031297						
ANR	1032299	Symbol	proxy -> cred -> GetOwner		1031297						
ANR	1032300	Symbol	O_RDWR		1031297						
ANR	1032301	Symbol	PRIV_USER_FINAL		1031297						
ANR	1032302	Symbol	proxy_filename		1031297						
ANR	1032303	Symbol	param		1031297						
ANR	1032304	Symbol	now		1031297						
ANR	1032305	Symbol	daemonCore		1031297						
ANR	1032306	Symbol	( ( X509Credential * ) proxy -> cred ) -> GetRefreshPassword		1031297						
ANR	1032307	Symbol	proxy -> get_delegation_err_fd		1031297						
ANR	1032308	Symbol	& myEnv		1031297						
ANR	1032309	Symbol	chmod		1031297						
ANR	1032310	Symbol	proxy -> get_delegation_pid		1031297						
ANR	1032311	Symbol	( ( X509Credential * ) proxy -> cred ) -> GetCredentialName		1031297						
ANR	1032312	Symbol	* * * proxy		1031297						
ANR	1032313	Symbol	strBuff		1031297						
ANR	1032314	Symbol	args_string		1031297						
ANR	1032315	Symbol	proxy -> get_delegation_err_filename		1031297						
ANR	1032316	Symbol	D_ALWAYS		1031297						
ANR	1032317	Symbol	myproxy_password		1031297						
ANR	1032318	Symbol	proxy -> get_delegation_password_pipe		1031297						
ANR	1032319	Symbol	proxy -> cred -> GetName		1031297						
ANR	1032320	Symbol	* proxy -> get_delegation_password_pipe		1031297						
ANR	1032321	Symbol	args		1031297						
ANR	1032322	Symbol	FALSE		1031297						
ANR	1032323	Symbol	time		1031297						
ANR	1032324	Symbol	getPortFromAddr		1031297						
ANR	1032325	Symbol	username		1031297						
ANR	1032326	DeclStmt									
ANR	1032327	Decl							CredentialWrapper	CredentialWrapper *	cred_wrapper
ANR	1032328	DeclStmt									
ANR	1032329	Decl							X509CredentialWrapper	X509CredentialWrapper *	matched_entry
ANR	1032330	DeclStmt									
ANR	1032331	Decl							int	int	read_fd
ANR	1032332	DeclStmt									
ANR	1032333	Decl							off_t	off_t	offset
ANR	1032334	DeclStmt									
ANR	1032335	Decl							struct stat	struct stat	statbuf
ANR	1032336	DeclStmt									
ANR	1032337	Decl							int	int	status
ANR	1032338	DeclStmt									
ANR	1032339	Decl							int	int	bytes_read
ANR	1032340	Function	isSuperUser	947:0:24868:25110							
ANR	1032341	FunctionDef	isSuperUser (const char * user)		1032340	0					
ANR	1032342	CompoundStatement		949:0:24905:25110	1032340	0					
ANR	1032343	IfStatement	if ( ! ( user ) )		1032340	0					
ANR	1032344	Condition	! ( user )	950:6:24913:24920	1032340	0	True				
ANR	1032345	UnaryOperationExpression	! ( user )		1032340	0					
ANR	1032346	UnaryOperator	!		1032340	0					
ANR	1032347	Identifier	user		1032340	1					
ANR	1032348	CompoundStatement		2:16:17:17	1032340	1					
ANR	1032349	ReturnStatement	return false ;	951:4:24929:24941	1032340	0	True				
ANR	1032350	Identifier	false		1032340	0					
ANR	1032351	ExpressionStatement	super_users . rewind ( )	954:2:24950:24970	1032340	1	True				
ANR	1032352	CallExpression	super_users . rewind ( )		1032340	0					
ANR	1032353	Callee	super_users . rewind		1032340	0					
ANR	1032354	MemberAccess	super_users . rewind		1032340	0					
ANR	1032355	Identifier	super_users		1032340	0					
ANR	1032356	Identifier	rewind		1032340	1					
ANR	1032357	ArgumentList			1032340	1					
ANR	1032358	IdentifierDeclStatement	char * next ;	955:2:24974:24985	1032340	2	True				
ANR	1032359	IdentifierDecl	* next		1032340	0					
ANR	1032360	IdentifierDeclType	char *		1032340	0					
ANR	1032361	Identifier	next		1032340	1					
ANR	1032362	WhileStatement	while ( ( next = super_users . next ( ) ) )		1032340	3					
ANR	1032363	Condition	next = super_users . next ( )	956:9:24996:25022	1032340	0	True				
ANR	1032364	AssignmentExpression	next = super_users . next ( )		1032340	0		=			
ANR	1032365	Identifier	next		1032340	0					
ANR	1032366	CallExpression	super_users . next ( )		1032340	1					
ANR	1032367	Callee	super_users . next		1032340	0					
ANR	1032368	MemberAccess	super_users . next		1032340	0					
ANR	1032369	Identifier	super_users		1032340	0					
ANR	1032370	Identifier	next		1032340	1					
ANR	1032371	ArgumentList			1032340	1					
ANR	1032372	CompoundStatement		8:38:119:119	1032340	1					
ANR	1032373	IfStatement	"if ( strcmp ( user , next ) == 0 )"		1032340	0					
ANR	1032374	Condition	"strcmp ( user , next ) == 0"	957:8:25035:25059	1032340	0	True				
ANR	1032375	EqualityExpression	"strcmp ( user , next ) == 0"		1032340	0		==			
ANR	1032376	CallExpression	"strcmp ( user , next )"		1032340	0					
ANR	1032377	Callee	strcmp		1032340	0					
ANR	1032378	Identifier	strcmp		1032340	0					
ANR	1032379	ArgumentList	user		1032340	1					
ANR	1032380	Argument	user		1032340	0					
ANR	1032381	Identifier	user		1032340	0					
ANR	1032382	Argument	next		1032340	1					
ANR	1032383	Identifier	next		1032340	0					
ANR	1032384	PrimaryExpression	0		1032340	1					
ANR	1032385	CompoundStatement		9:35:156:156	1032340	1					
ANR	1032386	ReturnStatement	return true ;	958:6:25070:25081	1032340	0	True				
ANR	1032387	Identifier	true		1032340	0					
ANR	1032388	ReturnStatement	return false ;	962:2:25096:25108	1032340	4	True				
ANR	1032389	Identifier	false		1032340	0					
ANR	1032390	ReturnType	bool		1032340	1					
ANR	1032391	Identifier	isSuperUser		1032340	2					
ANR	1032392	ParameterList	const char * user		1032340	3					
ANR	1032393	Parameter	const char * user	948:13:24886:24901	1032340	0	True				
ANR	1032394	ParameterType	const char *		1032340	0					
ANR	1032395	Identifier	user		1032340	1					
ANR	1032396	CFGEntryNode	ENTRY		1032340		True				
ANR	1032397	CFGExitNode	EXIT		1032340		True				
ANR	1032398	Symbol	next		1032340						
ANR	1032399	Symbol	strcmp		1032340						
ANR	1032400	Symbol	super_users . next		1032340						
ANR	1032401	Symbol	false		1032340						
ANR	1032402	Symbol	true		1032340						
ANR	1032403	Symbol	super_users		1032340						
ANR	1032404	Symbol	user		1032340						
ANR	1032405	Function	Init	966:0:25114:26961							
ANR	1032406	FunctionDef	Init ()		1032405	0					
ANR	1032407	CompoundStatement		967:7:25126:26961	1032405	0					
ANR	1032408	IdentifierDeclStatement	"char * tmp = param ( ""CRED_SUPER_USERS"" ) ;"	968:2:25130:25170	1032405	0	True				
ANR	1032409	IdentifierDecl	"* tmp = param ( ""CRED_SUPER_USERS"" )"		1032405	0					
ANR	1032410	IdentifierDeclType	char *		1032405	0					
ANR	1032411	Identifier	tmp		1032405	1					
ANR	1032412	AssignmentExpression	"* tmp = param ( ""CRED_SUPER_USERS"" )"		1032405	2		=			
ANR	1032413	Identifier	tmp		1032405	0					
ANR	1032414	CallExpression	"param ( ""CRED_SUPER_USERS"" )"		1032405	1					
ANR	1032415	Callee	param		1032405	0					
ANR	1032416	Identifier	param		1032405	0					
ANR	1032417	ArgumentList	"""CRED_SUPER_USERS"""		1032405	1					
ANR	1032418	Argument	"""CRED_SUPER_USERS"""		1032405	0					
ANR	1032419	PrimaryExpression	"""CRED_SUPER_USERS"""		1032405	0					
ANR	1032420	IfStatement	if ( tmp )		1032405	1					
ANR	1032421	Condition	tmp	969:6:25178:25180	1032405	0	True				
ANR	1032422	Identifier	tmp		1032405	0					
ANR	1032423	CompoundStatement		3:12:57:57	1032405	1					
ANR	1032424	ExpressionStatement	super_users . initializeFromString ( tmp )	970:4:25190:25229	1032405	0	True				
ANR	1032425	CallExpression	super_users . initializeFromString ( tmp )		1032405	0					
ANR	1032426	Callee	super_users . initializeFromString		1032405	0					
ANR	1032427	MemberAccess	super_users . initializeFromString		1032405	0					
ANR	1032428	Identifier	super_users		1032405	0					
ANR	1032429	Identifier	initializeFromString		1032405	1					
ANR	1032430	ArgumentList	tmp		1032405	1					
ANR	1032431	Argument	tmp		1032405	0					
ANR	1032432	Identifier	tmp		1032405	0					
ANR	1032433	ExpressionStatement	free ( tmp )	971:4:25235:25246	1032405	1	True				
ANR	1032434	CallExpression	free ( tmp )		1032405	0					
ANR	1032435	Callee	free		1032405	0					
ANR	1032436	Identifier	free		1032405	0					
ANR	1032437	ArgumentList	tmp		1032405	1					
ANR	1032438	Argument	tmp		1032405	0					
ANR	1032439	Identifier	tmp		1032405	0					
ANR	1032440	ElseStatement	else		1032405	0					
ANR	1032441	CompoundStatement		6:9:130:130	1032405	0					
ANR	1032442	ExpressionStatement	"super_users . initializeFromString ( ""Administrator"" )"	974:4:25282:25331	1032405	0	True				
ANR	1032443	CallExpression	"super_users . initializeFromString ( ""Administrator"" )"		1032405	0					
ANR	1032444	Callee	super_users . initializeFromString		1032405	0					
ANR	1032445	MemberAccess	super_users . initializeFromString		1032405	0					
ANR	1032446	Identifier	super_users		1032405	0					
ANR	1032447	Identifier	initializeFromString		1032405	1					
ANR	1032448	ArgumentList	"""Administrator"""		1032405	1					
ANR	1032449	Argument	"""Administrator"""		1032405	0					
ANR	1032450	PrimaryExpression	"""Administrator"""		1032405	0					
ANR	1032451	IdentifierDeclStatement	"char * spool = param ( ""SPOOL"" ) ;"	980:2:25399:25429	1032405	2	True				
ANR	1032452	IdentifierDecl	"* spool = param ( ""SPOOL"" )"		1032405	0					
ANR	1032453	IdentifierDeclType	char *		1032405	0					
ANR	1032454	Identifier	spool		1032405	1					
ANR	1032455	AssignmentExpression	"* spool = param ( ""SPOOL"" )"		1032405	2		=			
ANR	1032456	Identifier	spool		1032405	0					
ANR	1032457	CallExpression	"param ( ""SPOOL"" )"		1032405	1					
ANR	1032458	Callee	param		1032405	0					
ANR	1032459	Identifier	param		1032405	0					
ANR	1032460	ArgumentList	"""SPOOL"""		1032405	1					
ANR	1032461	Argument	"""SPOOL"""		1032405	0					
ANR	1032462	PrimaryExpression	"""SPOOL"""		1032405	0					
ANR	1032463	ExpressionStatement	"tmp = param ( ""CRED_STORE_DIR"" )"	982:2:25434:25466	1032405	3	True				
ANR	1032464	AssignmentExpression	"tmp = param ( ""CRED_STORE_DIR"" )"		1032405	0		=			
ANR	1032465	Identifier	tmp		1032405	0					
ANR	1032466	CallExpression	"param ( ""CRED_STORE_DIR"" )"		1032405	1					
ANR	1032467	Callee	param		1032405	0					
ANR	1032468	Identifier	param		1032405	0					
ANR	1032469	ArgumentList	"""CRED_STORE_DIR"""		1032405	1					
ANR	1032470	Argument	"""CRED_STORE_DIR"""		1032405	0					
ANR	1032471	PrimaryExpression	"""CRED_STORE_DIR"""		1032405	0					
ANR	1032472	IfStatement	if ( tmp )		1032405	4					
ANR	1032473	Condition	tmp	983:7:25475:25477	1032405	0	True				
ANR	1032474	Identifier	tmp		1032405	0					
ANR	1032475	CompoundStatement		17:13:354:354	1032405	1					
ANR	1032476	ExpressionStatement	cred_store_dir = tmp	984:4:25487:25507	1032405	0	True				
ANR	1032477	AssignmentExpression	cred_store_dir = tmp		1032405	0		=			
ANR	1032478	Identifier	cred_store_dir		1032405	0					
ANR	1032479	Identifier	tmp		1032405	1					
ANR	1032480	ElseStatement	else		1032405	0					
ANR	1032481	CompoundStatement		19:9:391:391	1032405	0					
ANR	1032482	ExpressionStatement	"cred_store_dir = dircat ( spool , ""cred"" )"	986:4:25524:25563	1032405	0	True				
ANR	1032483	AssignmentExpression	"cred_store_dir = dircat ( spool , ""cred"" )"		1032405	0		=			
ANR	1032484	Identifier	cred_store_dir		1032405	0					
ANR	1032485	CallExpression	"dircat ( spool , ""cred"" )"		1032405	1					
ANR	1032486	Callee	dircat		1032405	0					
ANR	1032487	Identifier	dircat		1032405	0					
ANR	1032488	ArgumentList	spool		1032405	1					
ANR	1032489	Argument	spool		1032405	0					
ANR	1032490	Identifier	spool		1032405	0					
ANR	1032491	Argument	"""cred"""		1032405	1					
ANR	1032492	PrimaryExpression	"""cred"""		1032405	0					
ANR	1032493	IfStatement	if ( spool != NULL )		1032405	5					
ANR	1032494	Condition	spool != NULL	988:7:25577:25589	1032405	0	True				
ANR	1032495	EqualityExpression	spool != NULL		1032405	0		!=			
ANR	1032496	Identifier	spool		1032405	0					
ANR	1032497	Identifier	NULL		1032405	1					
ANR	1032498	CompoundStatement		22:23:466:466	1032405	1					
ANR	1032499	ExpressionStatement	free ( spool )	989:3:25598:25610	1032405	0	True				
ANR	1032500	CallExpression	free ( spool )		1032405	0					
ANR	1032501	Callee	free		1032405	0					
ANR	1032502	Identifier	free		1032405	0					
ANR	1032503	ArgumentList	spool		1032405	1					
ANR	1032504	Argument	spool		1032405	0					
ANR	1032505	Identifier	spool		1032405	0					
ANR	1032506	ExpressionStatement	"tmp = param ( ""CRED_INDEX_FILE"" )"	992:2:25619:25652	1032405	6	True				
ANR	1032507	AssignmentExpression	"tmp = param ( ""CRED_INDEX_FILE"" )"		1032405	0		=			
ANR	1032508	Identifier	tmp		1032405	0					
ANR	1032509	CallExpression	"param ( ""CRED_INDEX_FILE"" )"		1032405	1					
ANR	1032510	Callee	param		1032405	0					
ANR	1032511	Identifier	param		1032405	0					
ANR	1032512	ArgumentList	"""CRED_INDEX_FILE"""		1032405	1					
ANR	1032513	Argument	"""CRED_INDEX_FILE"""		1032405	0					
ANR	1032514	PrimaryExpression	"""CRED_INDEX_FILE"""		1032405	0					
ANR	1032515	IfStatement	if ( tmp )		1032405	7					
ANR	1032516	Condition	tmp	993:6:25660:25662	1032405	0	True				
ANR	1032517	Identifier	tmp		1032405	0					
ANR	1032518	CompoundStatement		27:12:539:539	1032405	1					
ANR	1032519	ExpressionStatement	cred_index_file = tmp	994:4:25672:25693	1032405	0	True				
ANR	1032520	AssignmentExpression	cred_index_file = tmp		1032405	0		=			
ANR	1032521	Identifier	cred_index_file		1032405	0					
ANR	1032522	Identifier	tmp		1032405	1					
ANR	1032523	ElseStatement	else		1032405	0					
ANR	1032524	CompoundStatement		29:9:577:577	1032405	0					
ANR	1032525	ExpressionStatement	"cred_index_file = dircat ( cred_store_dir , ""cred-index"" )"	996:4:25710:25765	1032405	0	True				
ANR	1032526	AssignmentExpression	"cred_index_file = dircat ( cred_store_dir , ""cred-index"" )"		1032405	0		=			
ANR	1032527	Identifier	cred_index_file		1032405	0					
ANR	1032528	CallExpression	"dircat ( cred_store_dir , ""cred-index"" )"		1032405	1					
ANR	1032529	Callee	dircat		1032405	0					
ANR	1032530	Identifier	dircat		1032405	0					
ANR	1032531	ArgumentList	cred_store_dir		1032405	1					
ANR	1032532	Argument	cred_store_dir		1032405	0					
ANR	1032533	Identifier	cred_store_dir		1032405	0					
ANR	1032534	Argument	"""cred-index"""		1032405	1					
ANR	1032535	PrimaryExpression	"""cred-index"""		1032405	0					
ANR	1032536	ExpressionStatement	"default_cred_expire_threshold = param_integer ( ""DEFAULT_CRED_EXPIRE_THRESHOLD"" , 3600 )"	1000:2:25792:25877	1032405	8	True				
ANR	1032537	AssignmentExpression	"default_cred_expire_threshold = param_integer ( ""DEFAULT_CRED_EXPIRE_THRESHOLD"" , 3600 )"		1032405	0		=			
ANR	1032538	Identifier	default_cred_expire_threshold		1032405	0					
ANR	1032539	CallExpression	"param_integer ( ""DEFAULT_CRED_EXPIRE_THRESHOLD"" , 3600 )"		1032405	1					
ANR	1032540	Callee	param_integer		1032405	0					
ANR	1032541	Identifier	param_integer		1032405	0					
ANR	1032542	ArgumentList	"""DEFAULT_CRED_EXPIRE_THRESHOLD"""		1032405	1					
ANR	1032543	Argument	"""DEFAULT_CRED_EXPIRE_THRESHOLD"""		1032405	0					
ANR	1032544	PrimaryExpression	"""DEFAULT_CRED_EXPIRE_THRESHOLD"""		1032405	0					
ANR	1032545	Argument	3600		1032405	1					
ANR	1032546	PrimaryExpression	3600		1032405	0					
ANR	1032547	ExpressionStatement	"CheckCredentials_interval = param_integer ( ""CRED_CHECK_INTERVAL"" , DEF_CRED_CHECK_INTERVAL )"	1003:1:25902:26047	1032405	9	True				
ANR	1032548	AssignmentExpression	"CheckCredentials_interval = param_integer ( ""CRED_CHECK_INTERVAL"" , DEF_CRED_CHECK_INTERVAL )"		1032405	0		=			
ANR	1032549	Identifier	CheckCredentials_interval		1032405	0					
ANR	1032550	CallExpression	"param_integer ( ""CRED_CHECK_INTERVAL"" , DEF_CRED_CHECK_INTERVAL )"		1032405	1					
ANR	1032551	Callee	param_integer		1032405	0					
ANR	1032552	Identifier	param_integer		1032405	0					
ANR	1032553	ArgumentList	"""CRED_CHECK_INTERVAL"""		1032405	1					
ANR	1032554	Argument	"""CRED_CHECK_INTERVAL"""		1032405	0					
ANR	1032555	PrimaryExpression	"""CRED_CHECK_INTERVAL"""		1032405	0					
ANR	1032556	Argument	DEF_CRED_CHECK_INTERVAL		1032405	1					
ANR	1032557	Identifier	DEF_CRED_CHECK_INTERVAL		1032405	0					
ANR	1032558	IdentifierDeclStatement	struct stat stat_buff ;	1009:2:26052:26073	1032405	10	True				
ANR	1032559	IdentifierDecl	stat_buff		1032405	0					
ANR	1032560	IdentifierDeclType	struct stat		1032405	0					
ANR	1032561	Identifier	stat_buff		1032405	1					
ANR	1032562	IfStatement	"if ( stat ( cred_store_dir , & stat_buff ) )"		1032405	11					
ANR	1032563	Condition	"stat ( cred_store_dir , & stat_buff )"	1010:6:26081:26113	1032405	0	True				
ANR	1032564	CallExpression	"stat ( cred_store_dir , & stat_buff )"		1032405	0					
ANR	1032565	Callee	stat		1032405	0					
ANR	1032566	Identifier	stat		1032405	0					
ANR	1032567	ArgumentList	cred_store_dir		1032405	1					
ANR	1032568	Argument	cred_store_dir		1032405	0					
ANR	1032569	Identifier	cred_store_dir		1032405	0					
ANR	1032570	Argument	& stat_buff		1032405	1					
ANR	1032571	UnaryOperationExpression	& stat_buff		1032405	0					
ANR	1032572	UnaryOperator	&		1032405	0					
ANR	1032573	Identifier	stat_buff		1032405	1					
ANR	1032574	CompoundStatement		44:41:989:989	1032405	1					
ANR	1032575	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: Cred store directory %s does not exist\\n"" , cred_store_dir )"	1011:4:26122:26207	1032405	0	True				
ANR	1032576	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: Cred store directory %s does not exist\\n"" , cred_store_dir )"		1032405	0					
ANR	1032577	Callee	dprintf		1032405	0					
ANR	1032578	Identifier	dprintf		1032405	0					
ANR	1032579	ArgumentList	D_ALWAYS		1032405	1					
ANR	1032580	Argument	D_ALWAYS		1032405	0					
ANR	1032581	Identifier	D_ALWAYS		1032405	0					
ANR	1032582	Argument	"""ERROR: Cred store directory %s does not exist\\n"""		1032405	1					
ANR	1032583	PrimaryExpression	"""ERROR: Cred store directory %s does not exist\\n"""		1032405	0					
ANR	1032584	Argument	cred_store_dir		1032405	2					
ANR	1032585	Identifier	cred_store_dir		1032405	0					
ANR	1032586	ExpressionStatement	DC_Exit ( 1 )	1012:4:26213:26225	1032405	1	True				
ANR	1032587	CallExpression	DC_Exit ( 1 )		1032405	0					
ANR	1032588	Callee	DC_Exit		1032405	0					
ANR	1032589	Identifier	DC_Exit		1032405	0					
ANR	1032590	ArgumentList	1		1032405	1					
ANR	1032591	Argument	1		1032405	0					
ANR	1032592	PrimaryExpression	1		1032405	0					
ANR	1032593	IfStatement	"if ( stat ( cred_index_file , & stat_buff ) )"		1032405	12					
ANR	1032594	Condition	"stat ( cred_index_file , & stat_buff )"	1015:6:26238:26271	1032405	0	True				
ANR	1032595	CallExpression	"stat ( cred_index_file , & stat_buff )"		1032405	0					
ANR	1032596	Callee	stat		1032405	0					
ANR	1032597	Identifier	stat		1032405	0					
ANR	1032598	ArgumentList	cred_index_file		1032405	1					
ANR	1032599	Argument	cred_index_file		1032405	0					
ANR	1032600	Identifier	cred_index_file		1032405	0					
ANR	1032601	Argument	& stat_buff		1032405	1					
ANR	1032602	UnaryOperationExpression	& stat_buff		1032405	0					
ANR	1032603	UnaryOperator	&		1032405	0					
ANR	1032604	Identifier	stat_buff		1032405	1					
ANR	1032605	CompoundStatement		52:4:1272:1358	1032405	1					
ANR	1032606	ExpressionStatement	"dprintf ( D_ALWAYS , ""Creating credential index file %s\\n"" , cred_index_file )"	1016:4:26280:26354	1032405	0	True				
ANR	1032607	CallExpression	"dprintf ( D_ALWAYS , ""Creating credential index file %s\\n"" , cred_index_file )"		1032405	0					
ANR	1032608	Callee	dprintf		1032405	0					
ANR	1032609	Identifier	dprintf		1032405	0					
ANR	1032610	ArgumentList	D_ALWAYS		1032405	1					
ANR	1032611	Argument	D_ALWAYS		1032405	0					
ANR	1032612	Identifier	D_ALWAYS		1032405	0					
ANR	1032613	Argument	"""Creating credential index file %s\\n"""		1032405	1					
ANR	1032614	PrimaryExpression	"""Creating credential index file %s\\n"""		1032405	0					
ANR	1032615	Argument	cred_index_file		1032405	2					
ANR	1032616	Identifier	cred_index_file		1032405	0					
ANR	1032617	IdentifierDeclStatement	priv_state priv = set_root_priv ( ) ;	1017:4:26360:26393	1032405	1	True				
ANR	1032618	IdentifierDecl	priv = set_root_priv ( )		1032405	0					
ANR	1032619	IdentifierDeclType	priv_state		1032405	0					
ANR	1032620	Identifier	priv		1032405	1					
ANR	1032621	AssignmentExpression	priv = set_root_priv ( )		1032405	2		=			
ANR	1032622	Identifier	priv		1032405	0					
ANR	1032623	CallExpression	set_root_priv ( )		1032405	1					
ANR	1032624	Callee	set_root_priv		1032405	0					
ANR	1032625	Identifier	set_root_priv		1032405	0					
ANR	1032626	ArgumentList			1032405	1					
ANR	1032627	IdentifierDeclStatement	"int fd = safe_open_wrapper_follow ( cred_index_file , O_WRONLY | O_CREAT | O_TRUNC , 0600 ) ;"	1018:4:26399:26485	1032405	2	True				
ANR	1032628	IdentifierDecl	"fd = safe_open_wrapper_follow ( cred_index_file , O_WRONLY | O_CREAT | O_TRUNC , 0600 )"		1032405	0					
ANR	1032629	IdentifierDeclType	int		1032405	0					
ANR	1032630	Identifier	fd		1032405	1					
ANR	1032631	AssignmentExpression	"fd = safe_open_wrapper_follow ( cred_index_file , O_WRONLY | O_CREAT | O_TRUNC , 0600 )"		1032405	2		=			
ANR	1032632	Identifier	fd		1032405	0					
ANR	1032633	CallExpression	"safe_open_wrapper_follow ( cred_index_file , O_WRONLY | O_CREAT | O_TRUNC , 0600 )"		1032405	1					
ANR	1032634	Callee	safe_open_wrapper_follow		1032405	0					
ANR	1032635	Identifier	safe_open_wrapper_follow		1032405	0					
ANR	1032636	ArgumentList	cred_index_file		1032405	1					
ANR	1032637	Argument	cred_index_file		1032405	0					
ANR	1032638	Identifier	cred_index_file		1032405	0					
ANR	1032639	Argument	O_WRONLY | O_CREAT | O_TRUNC		1032405	1					
ANR	1032640	InclusiveOrExpression	O_WRONLY | O_CREAT | O_TRUNC		1032405	0		|			
ANR	1032641	Identifier	O_WRONLY		1032405	0					
ANR	1032642	InclusiveOrExpression	O_CREAT | O_TRUNC		1032405	1		|			
ANR	1032643	Identifier	O_CREAT		1032405	0					
ANR	1032644	Identifier	O_TRUNC		1032405	1					
ANR	1032645	Argument	0600		1032405	2					
ANR	1032646	PrimaryExpression	0600		1032405	0					
ANR	1032647	IfStatement	if ( fd != - 1 )		1032405	3					
ANR	1032648	Condition	fd != - 1	1019:8:26495:26502	1032405	0	True				
ANR	1032649	EqualityExpression	fd != - 1		1032405	0		!=			
ANR	1032650	Identifier	fd		1032405	0					
ANR	1032651	UnaryOperationExpression	- 1		1032405	1					
ANR	1032652	UnaryOperator	-		1032405	0					
ANR	1032653	PrimaryExpression	1		1032405	1					
ANR	1032654	CompoundStatement		53:18:1378:1378	1032405	1					
ANR	1032655	ExpressionStatement	close ( fd )	1020:6:26513:26523	1032405	0	True				
ANR	1032656	CallExpression	close ( fd )		1032405	0					
ANR	1032657	Callee	close		1032405	0					
ANR	1032658	Identifier	close		1032405	0					
ANR	1032659	ArgumentList	fd		1032405	1					
ANR	1032660	Argument	fd		1032405	0					
ANR	1032661	Identifier	fd		1032405	0					
ANR	1032662	ExpressionStatement	set_priv ( priv )	1021:6:26531:26546	1032405	1	True				
ANR	1032663	CallExpression	set_priv ( priv )		1032405	0					
ANR	1032664	Callee	set_priv		1032405	0					
ANR	1032665	Identifier	set_priv		1032405	0					
ANR	1032666	ArgumentList	priv		1032405	1					
ANR	1032667	Argument	priv		1032405	0					
ANR	1032668	Identifier	priv		1032405	0					
ANR	1032669	ElseStatement	else		1032405	0					
ANR	1032670	CompoundStatement		56:11:1432:1432	1032405	0					
ANR	1032671	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: Unable to create credential index file %s\\n"" , cred_index_file )"	1023:6:26567:26656	1032405	0	True				
ANR	1032672	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: Unable to create credential index file %s\\n"" , cred_index_file )"		1032405	0					
ANR	1032673	Callee	dprintf		1032405	0					
ANR	1032674	Identifier	dprintf		1032405	0					
ANR	1032675	ArgumentList	D_ALWAYS		1032405	1					
ANR	1032676	Argument	D_ALWAYS		1032405	0					
ANR	1032677	Identifier	D_ALWAYS		1032405	0					
ANR	1032678	Argument	"""ERROR: Unable to create credential index file %s\\n"""		1032405	1					
ANR	1032679	PrimaryExpression	"""ERROR: Unable to create credential index file %s\\n"""		1032405	0					
ANR	1032680	Argument	cred_index_file		1032405	2					
ANR	1032681	Identifier	cred_index_file		1032405	0					
ANR	1032682	ExpressionStatement	set_priv ( priv )	1024:6:26664:26679	1032405	1	True				
ANR	1032683	CallExpression	set_priv ( priv )		1032405	0					
ANR	1032684	Callee	set_priv		1032405	0					
ANR	1032685	Identifier	set_priv		1032405	0					
ANR	1032686	ArgumentList	priv		1032405	1					
ANR	1032687	Argument	priv		1032405	0					
ANR	1032688	Identifier	priv		1032405	0					
ANR	1032689	ExpressionStatement	DC_Exit ( 1 )	1025:6:26687:26699	1032405	2	True				
ANR	1032690	CallExpression	DC_Exit ( 1 )		1032405	0					
ANR	1032691	Callee	DC_Exit		1032405	0					
ANR	1032692	Identifier	DC_Exit		1032405	0					
ANR	1032693	ArgumentList	1		1032405	1					
ANR	1032694	Argument	1		1032405	0					
ANR	1032695	PrimaryExpression	1		1032405	0					
ANR	1032696	ElseStatement	else		1032405	0					
ANR	1032697	CompoundStatement		61:9:1589:1589	1032405	0					
ANR	1032698	IfStatement	if ( ( stat_buff . st_mode & ( S_IRWXG | S_IRWXO ) ) || ( stat_buff . st_uid != getuid ( ) ) )		1032405	0					
ANR	1032699	Condition	( stat_buff . st_mode & ( S_IRWXG | S_IRWXO ) ) || ( stat_buff . st_uid != getuid ( ) )	1028:8:26726:26801	1032405	0	True				
ANR	1032700	OrExpression	( stat_buff . st_mode & ( S_IRWXG | S_IRWXO ) ) || ( stat_buff . st_uid != getuid ( ) )		1032405	0		||			
ANR	1032701	BitAndExpression	stat_buff . st_mode & ( S_IRWXG | S_IRWXO )		1032405	0		&			
ANR	1032702	MemberAccess	stat_buff . st_mode		1032405	0					
ANR	1032703	Identifier	stat_buff		1032405	0					
ANR	1032704	Identifier	st_mode		1032405	1					
ANR	1032705	InclusiveOrExpression	S_IRWXG | S_IRWXO		1032405	1		|			
ANR	1032706	Identifier	S_IRWXG		1032405	0					
ANR	1032707	Identifier	S_IRWXO		1032405	1					
ANR	1032708	EqualityExpression	stat_buff . st_uid != getuid ( )		1032405	1		!=			
ANR	1032709	MemberAccess	stat_buff . st_uid		1032405	0					
ANR	1032710	Identifier	stat_buff		1032405	0					
ANR	1032711	Identifier	st_uid		1032405	1					
ANR	1032712	CallExpression	getuid ( )		1032405	1					
ANR	1032713	Callee	getuid		1032405	0					
ANR	1032714	Identifier	getuid		1032405	0					
ANR	1032715	ArgumentList			1032405	1					
ANR	1032716	CompoundStatement		63:33:1677:1677	1032405	1					
ANR	1032717	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: Invalid ownership / permissions on credential index file %s\\n"" , cred_index_file )"	1030:6:26812:26928	1032405	0	True				
ANR	1032718	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: Invalid ownership / permissions on credential index file %s\\n"" , cred_index_file )"		1032405	0					
ANR	1032719	Callee	dprintf		1032405	0					
ANR	1032720	Identifier	dprintf		1032405	0					
ANR	1032721	ArgumentList	D_ALWAYS		1032405	1					
ANR	1032722	Argument	D_ALWAYS		1032405	0					
ANR	1032723	Identifier	D_ALWAYS		1032405	0					
ANR	1032724	Argument	"""ERROR: Invalid ownership / permissions on credential index file %s\\n"""		1032405	1					
ANR	1032725	PrimaryExpression	"""ERROR: Invalid ownership / permissions on credential index file %s\\n"""		1032405	0					
ANR	1032726	Argument	cred_index_file		1032405	2					
ANR	1032727	Identifier	cred_index_file		1032405	0					
ANR	1032728	ExpressionStatement	DC_Exit ( 1 )	1032:6:26936:26948	1032405	1	True				
ANR	1032729	CallExpression	DC_Exit ( 1 )		1032405	0					
ANR	1032730	Callee	DC_Exit		1032405	0					
ANR	1032731	Identifier	DC_Exit		1032405	0					
ANR	1032732	ArgumentList	1		1032405	1					
ANR	1032733	Argument	1		1032405	0					
ANR	1032734	PrimaryExpression	1		1032405	0					
ANR	1032735	ReturnType	void		1032405	1					
ANR	1032736	Identifier	Init		1032405	2					
ANR	1032737	ParameterList			1032405	3					
ANR	1032738	CFGEntryNode	ENTRY		1032405		True				
ANR	1032739	CFGExitNode	EXIT		1032405		True				
ANR	1032740	Symbol	stat_buff		1032405						
ANR	1032741	Symbol	safe_open_wrapper_follow		1032405						
ANR	1032742	Symbol	spool		1032405						
ANR	1032743	Symbol	O_CREAT		1032405						
ANR	1032744	Symbol	dircat		1032405						
ANR	1032745	Symbol	cred_index_file		1032405						
ANR	1032746	Symbol	CheckCredentials_interval		1032405						
ANR	1032747	Symbol	param		1032405						
ANR	1032748	Symbol	tmp		1032405						
ANR	1032749	Symbol	cred_store_dir		1032405						
ANR	1032750	Symbol	super_users		1032405						
ANR	1032751	Symbol	& stat_buff		1032405						
ANR	1032752	Symbol	priv		1032405						
ANR	1032753	Symbol	default_cred_expire_threshold		1032405						
ANR	1032754	Symbol	DEF_CRED_CHECK_INTERVAL		1032405						
ANR	1032755	Symbol	stat		1032405						
ANR	1032756	Symbol	NULL		1032405						
ANR	1032757	Symbol	D_ALWAYS		1032405						
ANR	1032758	Symbol	set_root_priv		1032405						
ANR	1032759	Symbol	stat_buff . st_mode		1032405						
ANR	1032760	Symbol	O_TRUNC		1032405						
ANR	1032761	Symbol	getuid		1032405						
ANR	1032762	Symbol	stat_buff . st_uid		1032405						
ANR	1032763	Symbol	S_IRWXO		1032405						
ANR	1032764	Symbol	param_integer		1032405						
ANR	1032765	Symbol	O_WRONLY		1032405						
ANR	1032766	Symbol	S_IRWXG		1032405						
ANR	1032767	Symbol	fd		1032405						
ANR	1032768	Function	StoreData	1038:0:26964:27635							
ANR	1032769	FunctionDef	"StoreData (const char * file_name , const void * data , const int data_size)"		1032768	0					
ANR	1032770	CompoundStatement		1039:75:27043:27635	1032768	0					
ANR	1032771	IfStatement	if ( ! data )		1032768	0					
ANR	1032772	Condition	! data	1041:6:27052:27056	1032768	0	True				
ANR	1032773	UnaryOperationExpression	! data		1032768	0					
ANR	1032774	UnaryOperator	!		1032768	0					
ANR	1032775	Identifier	data		1032768	1					
ANR	1032776	CompoundStatement		3:13:15:15	1032768	1					
ANR	1032777	ReturnStatement	return FALSE ;	1042:4:27065:27077	1032768	0	True				
ANR	1032778	Identifier	FALSE		1032768	0					
ANR	1032779	IdentifierDeclStatement	priv_state priv = set_root_priv ( ) ;	1046:2:27087:27120	1032768	1	True				
ANR	1032780	IdentifierDecl	priv = set_root_priv ( )		1032768	0					
ANR	1032781	IdentifierDeclType	priv_state		1032768	0					
ANR	1032782	Identifier	priv		1032768	1					
ANR	1032783	AssignmentExpression	priv = set_root_priv ( )		1032768	2		=			
ANR	1032784	Identifier	priv		1032768	0					
ANR	1032785	CallExpression	set_root_priv ( )		1032768	1					
ANR	1032786	Callee	set_root_priv		1032768	0					
ANR	1032787	Identifier	set_root_priv		1032768	0					
ANR	1032788	ArgumentList			1032768	1					
ANR	1032789	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""in StoreData(), euid=%d\\n"" , geteuid ( ) )"	1047:2:27124:27185	1032768	2	True				
ANR	1032790	CallExpression	"dprintf ( D_FULLDEBUG , ""in StoreData(), euid=%d\\n"" , geteuid ( ) )"		1032768	0					
ANR	1032791	Callee	dprintf		1032768	0					
ANR	1032792	Identifier	dprintf		1032768	0					
ANR	1032793	ArgumentList	D_FULLDEBUG		1032768	1					
ANR	1032794	Argument	D_FULLDEBUG		1032768	0					
ANR	1032795	Identifier	D_FULLDEBUG		1032768	0					
ANR	1032796	Argument	"""in StoreData(), euid=%d\\n"""		1032768	1					
ANR	1032797	PrimaryExpression	"""in StoreData(), euid=%d\\n"""		1032768	0					
ANR	1032798	Argument	geteuid ( )		1032768	2					
ANR	1032799	CallExpression	geteuid ( )		1032768	0					
ANR	1032800	Callee	geteuid		1032768	0					
ANR	1032801	Identifier	geteuid		1032768	0					
ANR	1032802	ArgumentList			1032768	1					
ANR	1032803	IdentifierDeclStatement	"int fd = safe_open_wrapper_follow ( file_name , O_WRONLY | O_CREAT | O_TRUNC , 0600 ) ;"	1049:2:27190:27271	1032768	3	True				
ANR	1032804	IdentifierDecl	"fd = safe_open_wrapper_follow ( file_name , O_WRONLY | O_CREAT | O_TRUNC , 0600 )"		1032768	0					
ANR	1032805	IdentifierDeclType	int		1032768	0					
ANR	1032806	Identifier	fd		1032768	1					
ANR	1032807	AssignmentExpression	"fd = safe_open_wrapper_follow ( file_name , O_WRONLY | O_CREAT | O_TRUNC , 0600 )"		1032768	2		=			
ANR	1032808	Identifier	fd		1032768	0					
ANR	1032809	CallExpression	"safe_open_wrapper_follow ( file_name , O_WRONLY | O_CREAT | O_TRUNC , 0600 )"		1032768	1					
ANR	1032810	Callee	safe_open_wrapper_follow		1032768	0					
ANR	1032811	Identifier	safe_open_wrapper_follow		1032768	0					
ANR	1032812	ArgumentList	file_name		1032768	1					
ANR	1032813	Argument	file_name		1032768	0					
ANR	1032814	Identifier	file_name		1032768	0					
ANR	1032815	Argument	O_WRONLY | O_CREAT | O_TRUNC		1032768	1					
ANR	1032816	InclusiveOrExpression	O_WRONLY | O_CREAT | O_TRUNC		1032768	0		|			
ANR	1032817	Identifier	O_WRONLY		1032768	0					
ANR	1032818	InclusiveOrExpression	O_CREAT | O_TRUNC		1032768	1		|			
ANR	1032819	Identifier	O_CREAT		1032768	0					
ANR	1032820	Identifier	O_TRUNC		1032768	1					
ANR	1032821	Argument	0600		1032768	2					
ANR	1032822	PrimaryExpression	0600		1032768	0					
ANR	1032823	IfStatement	if ( fd == - 1 )		1032768	4					
ANR	1032824	Condition	fd == - 1	1050:6:27279:27286	1032768	0	True				
ANR	1032825	EqualityExpression	fd == - 1		1032768	0		==			
ANR	1032826	Identifier	fd		1032768	0					
ANR	1032827	UnaryOperationExpression	- 1		1032768	1					
ANR	1032828	UnaryOperator	-		1032768	0					
ANR	1032829	PrimaryExpression	1		1032768	1					
ANR	1032830	CompoundStatement		12:16:245:245	1032768	1					
ANR	1032831	ExpressionStatement	"dprintf ( D_ALWAYS , ""Unable to store in %s\\n"" , file_name )"	1051:4:27295:27351	1032768	0	True				
ANR	1032832	CallExpression	"dprintf ( D_ALWAYS , ""Unable to store in %s\\n"" , file_name )"		1032768	0					
ANR	1032833	Callee	dprintf		1032768	0					
ANR	1032834	Identifier	dprintf		1032768	0					
ANR	1032835	ArgumentList	D_ALWAYS		1032768	1					
ANR	1032836	Argument	D_ALWAYS		1032768	0					
ANR	1032837	Identifier	D_ALWAYS		1032768	0					
ANR	1032838	Argument	"""Unable to store in %s\\n"""		1032768	1					
ANR	1032839	PrimaryExpression	"""Unable to store in %s\\n"""		1032768	0					
ANR	1032840	Argument	file_name		1032768	2					
ANR	1032841	Identifier	file_name		1032768	0					
ANR	1032842	ExpressionStatement	set_priv ( priv )	1052:4:27357:27371	1032768	1	True				
ANR	1032843	CallExpression	set_priv ( priv )		1032768	0					
ANR	1032844	Callee	set_priv		1032768	0					
ANR	1032845	Identifier	set_priv		1032768	0					
ANR	1032846	ArgumentList	priv		1032768	1					
ANR	1032847	Argument	priv		1032768	0					
ANR	1032848	Identifier	priv		1032768	0					
ANR	1032849	ReturnStatement	return FALSE ;	1053:4:27377:27389	1032768	2	True				
ANR	1032850	Identifier	FALSE		1032768	0					
ANR	1032851	ExpressionStatement	"fchmod ( fd , S_IRUSR | S_IWUSR )"	1057:2:27475:27505	1032768	5	True				
ANR	1032852	CallExpression	"fchmod ( fd , S_IRUSR | S_IWUSR )"		1032768	0					
ANR	1032853	Callee	fchmod		1032768	0					
ANR	1032854	Identifier	fchmod		1032768	0					
ANR	1032855	ArgumentList	fd		1032768	1					
ANR	1032856	Argument	fd		1032768	0					
ANR	1032857	Identifier	fd		1032768	0					
ANR	1032858	Argument	S_IRUSR | S_IWUSR		1032768	1					
ANR	1032859	InclusiveOrExpression	S_IRUSR | S_IWUSR		1032768	0		|			
ANR	1032860	Identifier	S_IRUSR		1032768	0					
ANR	1032861	Identifier	S_IWUSR		1032768	1					
ANR	1032862	ExpressionStatement	"fchown ( fd , get_user_uid ( ) , get_user_gid ( ) )"	1058:2:27509:27552	1032768	6	True				
ANR	1032863	CallExpression	"fchown ( fd , get_user_uid ( ) , get_user_gid ( ) )"		1032768	0					
ANR	1032864	Callee	fchown		1032768	0					
ANR	1032865	Identifier	fchown		1032768	0					
ANR	1032866	ArgumentList	fd		1032768	1					
ANR	1032867	Argument	fd		1032768	0					
ANR	1032868	Identifier	fd		1032768	0					
ANR	1032869	Argument	get_user_uid ( )		1032768	1					
ANR	1032870	CallExpression	get_user_uid ( )		1032768	0					
ANR	1032871	Callee	get_user_uid		1032768	0					
ANR	1032872	Identifier	get_user_uid		1032768	0					
ANR	1032873	ArgumentList			1032768	1					
ANR	1032874	Argument	get_user_gid ( )		1032768	2					
ANR	1032875	CallExpression	get_user_gid ( )		1032768	0					
ANR	1032876	Callee	get_user_gid		1032768	0					
ANR	1032877	Identifier	get_user_gid		1032768	0					
ANR	1032878	ArgumentList			1032768	1					
ANR	1032879	ExpressionStatement	"write ( fd , data , data_size )"	1060:2:27557:27584	1032768	7	True				
ANR	1032880	CallExpression	"write ( fd , data , data_size )"		1032768	0					
ANR	1032881	Callee	write		1032768	0					
ANR	1032882	Identifier	write		1032768	0					
ANR	1032883	ArgumentList	fd		1032768	1					
ANR	1032884	Argument	fd		1032768	0					
ANR	1032885	Identifier	fd		1032768	0					
ANR	1032886	Argument	data		1032768	1					
ANR	1032887	Identifier	data		1032768	0					
ANR	1032888	Argument	data_size		1032768	2					
ANR	1032889	Identifier	data_size		1032768	0					
ANR	1032890	ExpressionStatement	close ( fd )	1062:2:27589:27599	1032768	8	True				
ANR	1032891	CallExpression	close ( fd )		1032768	0					
ANR	1032892	Callee	close		1032768	0					
ANR	1032893	Identifier	close		1032768	0					
ANR	1032894	ArgumentList	fd		1032768	1					
ANR	1032895	Argument	fd		1032768	0					
ANR	1032896	Identifier	fd		1032768	0					
ANR	1032897	ExpressionStatement	set_priv ( priv )	1064:2:27604:27618	1032768	9	True				
ANR	1032898	CallExpression	set_priv ( priv )		1032768	0					
ANR	1032899	Callee	set_priv		1032768	0					
ANR	1032900	Identifier	set_priv		1032768	0					
ANR	1032901	ArgumentList	priv		1032768	1					
ANR	1032902	Argument	priv		1032768	0					
ANR	1032903	Identifier	priv		1032768	0					
ANR	1032904	ReturnStatement	return TRUE ;	1065:2:27622:27633	1032768	10	True				
ANR	1032905	Identifier	TRUE		1032768	0					
ANR	1032906	ReturnType	int		1032768	1					
ANR	1032907	Identifier	StoreData		1032768	2					
ANR	1032908	ParameterList	"const char * file_name , const void * data , const int data_size"		1032768	3					
ANR	1032909	Parameter	const char * file_name	1039:11:26979:27000	1032768	0	True				
ANR	1032910	ParameterType	const char *		1032768	0					
ANR	1032911	Identifier	file_name		1032768	1					
ANR	1032912	Parameter	const void * data	1039:35:27003:27019	1032768	1	True				
ANR	1032913	ParameterType	const void *		1032768	0					
ANR	1032914	Identifier	data		1032768	1					
ANR	1032915	Parameter	const int data_size	1039:54:27022:27040	1032768	2	True				
ANR	1032916	ParameterType	const int		1032768	0					
ANR	1032917	Identifier	data_size		1032768	1					
ANR	1032918	CFGEntryNode	ENTRY		1032768		True				
ANR	1032919	CFGExitNode	EXIT		1032768		True				
ANR	1032920	Symbol	data_size		1032768						
ANR	1032921	Symbol	safe_open_wrapper_follow		1032768						
ANR	1032922	Symbol	data		1032768						
ANR	1032923	Symbol	file_name		1032768						
ANR	1032924	Symbol	O_CREAT		1032768						
ANR	1032925	Symbol	get_user_uid		1032768						
ANR	1032926	Symbol	D_ALWAYS		1032768						
ANR	1032927	Symbol	TRUE		1032768						
ANR	1032928	Symbol	set_root_priv		1032768						
ANR	1032929	Symbol	D_FULLDEBUG		1032768						
ANR	1032930	Symbol	geteuid		1032768						
ANR	1032931	Symbol	O_TRUNC		1032768						
ANR	1032932	Symbol	S_IRUSR		1032768						
ANR	1032933	Symbol	get_user_gid		1032768						
ANR	1032934	Symbol	S_IWUSR		1032768						
ANR	1032935	Symbol	FALSE		1032768						
ANR	1032936	Symbol	priv		1032768						
ANR	1032937	Symbol	O_WRONLY		1032768						
ANR	1032938	Symbol	fd		1032768						
ANR	1032939	Function	LoadData	1068:0:27638:28194							
ANR	1032940	FunctionDef	"LoadData (const char * file_name , void * & data , int & data_size)"		1032939	0					
ANR	1032941	CompoundStatement		1069:65:27707:28194	1032939	0					
ANR	1032942	IdentifierDeclStatement	priv_state priv = set_root_priv ( ) ;	1070:2:27711:27744	1032939	0	True				
ANR	1032943	IdentifierDecl	priv = set_root_priv ( )		1032939	0					
ANR	1032944	IdentifierDeclType	priv_state		1032939	0					
ANR	1032945	Identifier	priv		1032939	1					
ANR	1032946	AssignmentExpression	priv = set_root_priv ( )		1032939	2		=			
ANR	1032947	Identifier	priv		1032939	0					
ANR	1032948	CallExpression	set_root_priv ( )		1032939	1					
ANR	1032949	Callee	set_root_priv		1032939	0					
ANR	1032950	Identifier	set_root_priv		1032939	0					
ANR	1032951	ArgumentList			1032939	1					
ANR	1032952	IdentifierDeclStatement	"int fd = safe_open_wrapper_follow ( file_name , O_RDONLY ) ;"	1072:2:27751:27805	1032939	1	True				
ANR	1032953	IdentifierDecl	"fd = safe_open_wrapper_follow ( file_name , O_RDONLY )"		1032939	0					
ANR	1032954	IdentifierDeclType	int		1032939	0					
ANR	1032955	Identifier	fd		1032939	1					
ANR	1032956	AssignmentExpression	"fd = safe_open_wrapper_follow ( file_name , O_RDONLY )"		1032939	2		=			
ANR	1032957	Identifier	fd		1032939	0					
ANR	1032958	CallExpression	"safe_open_wrapper_follow ( file_name , O_RDONLY )"		1032939	1					
ANR	1032959	Callee	safe_open_wrapper_follow		1032939	0					
ANR	1032960	Identifier	safe_open_wrapper_follow		1032939	0					
ANR	1032961	ArgumentList	file_name		1032939	1					
ANR	1032962	Argument	file_name		1032939	0					
ANR	1032963	Identifier	file_name		1032939	0					
ANR	1032964	Argument	O_RDONLY		1032939	1					
ANR	1032965	Identifier	O_RDONLY		1032939	0					
ANR	1032966	IfStatement	if ( fd == - 1 )		1032939	2					
ANR	1032967	Condition	fd == - 1	1073:6:27813:27820	1032939	0	True				
ANR	1032968	EqualityExpression	fd == - 1		1032939	0		==			
ANR	1032969	Identifier	fd		1032939	0					
ANR	1032970	UnaryOperationExpression	- 1		1032939	1					
ANR	1032971	UnaryOperator	-		1032939	0					
ANR	1032972	PrimaryExpression	1		1032939	1					
ANR	1032973	CompoundStatement		5:16:115:115	1032939	1					
ANR	1032974	ExpressionStatement	"fprintf ( stderr , ""Can't open %s\\n"" , file_name )"	1074:4:27829:27875	1032939	0	True				
ANR	1032975	CallExpression	"fprintf ( stderr , ""Can't open %s\\n"" , file_name )"		1032939	0					
ANR	1032976	Callee	fprintf		1032939	0					
ANR	1032977	Identifier	fprintf		1032939	0					
ANR	1032978	ArgumentList	stderr		1032939	1					
ANR	1032979	Argument	stderr		1032939	0					
ANR	1032980	Identifier	stderr		1032939	0					
ANR	1032981	Argument	"""Can't open %s\\n"""		1032939	1					
ANR	1032982	PrimaryExpression	"""Can't open %s\\n"""		1032939	0					
ANR	1032983	Argument	file_name		1032939	2					
ANR	1032984	Identifier	file_name		1032939	0					
ANR	1032985	ExpressionStatement	set_priv ( priv )	1075:4:27881:27896	1032939	1	True				
ANR	1032986	CallExpression	set_priv ( priv )		1032939	0					
ANR	1032987	Callee	set_priv		1032939	0					
ANR	1032988	Identifier	set_priv		1032939	0					
ANR	1032989	ArgumentList	priv		1032939	1					
ANR	1032990	Argument	priv		1032939	0					
ANR	1032991	Identifier	priv		1032939	0					
ANR	1032992	ReturnStatement	return FALSE ;	1076:4:27902:27914	1032939	2	True				
ANR	1032993	Identifier	FALSE		1032939	0					
ANR	1032994	IdentifierDeclStatement	char buff [ MAX_CRED_DATA_SIZE + 1 ] ;	1079:2:27925:27957	1032939	3	True				
ANR	1032995	IdentifierDecl	buff [ MAX_CRED_DATA_SIZE + 1 ]		1032939	0					
ANR	1032996	IdentifierDeclType	char [ MAX_CRED_DATA_SIZE + 1 ]		1032939	0					
ANR	1032997	Identifier	buff		1032939	1					
ANR	1032998	AdditiveExpression	MAX_CRED_DATA_SIZE + 1		1032939	2		+			
ANR	1032999	Identifier	MAX_CRED_DATA_SIZE		1032939	0					
ANR	1033000	PrimaryExpression	1		1032939	1					
ANR	1033001	ExpressionStatement	"data_size = read ( fd , buff , MAX_CRED_DATA_SIZE )"	1080:2:27961:28008	1032939	4	True				
ANR	1033002	AssignmentExpression	"data_size = read ( fd , buff , MAX_CRED_DATA_SIZE )"		1032939	0		=			
ANR	1033003	Identifier	data_size		1032939	0					
ANR	1033004	CallExpression	"read ( fd , buff , MAX_CRED_DATA_SIZE )"		1032939	1					
ANR	1033005	Callee	read		1032939	0					
ANR	1033006	Identifier	read		1032939	0					
ANR	1033007	ArgumentList	fd		1032939	1					
ANR	1033008	Argument	fd		1032939	0					
ANR	1033009	Identifier	fd		1032939	0					
ANR	1033010	Argument	buff		1032939	1					
ANR	1033011	Identifier	buff		1032939	0					
ANR	1033012	Argument	MAX_CRED_DATA_SIZE		1032939	2					
ANR	1033013	Identifier	MAX_CRED_DATA_SIZE		1032939	0					
ANR	1033014	ExpressionStatement	close ( fd )	1082:2:28013:28023	1032939	5	True				
ANR	1033015	CallExpression	close ( fd )		1032939	0					
ANR	1033016	Callee	close		1032939	0					
ANR	1033017	Identifier	close		1032939	0					
ANR	1033018	ArgumentList	fd		1032939	1					
ANR	1033019	Argument	fd		1032939	0					
ANR	1033020	Identifier	fd		1032939	0					
ANR	1033021	IfStatement	if ( data_size <= 0 )		1032939	6					
ANR	1033022	Condition	data_size <= 0	1084:6:28032:28045	1032939	0	True				
ANR	1033023	RelationalExpression	data_size <= 0		1032939	0		<=			
ANR	1033024	Identifier	data_size		1032939	0					
ANR	1033025	PrimaryExpression	0		1032939	1					
ANR	1033026	CompoundStatement		16:22:340:340	1032939	1					
ANR	1033027	ExpressionStatement	set_priv ( priv )	1085:4:28054:28069	1032939	0	True				
ANR	1033028	CallExpression	set_priv ( priv )		1032939	0					
ANR	1033029	Callee	set_priv		1032939	0					
ANR	1033030	Identifier	set_priv		1032939	0					
ANR	1033031	ArgumentList	priv		1032939	1					
ANR	1033032	Argument	priv		1032939	0					
ANR	1033033	Identifier	priv		1032939	0					
ANR	1033034	ReturnStatement	return FALSE ;	1086:4:28075:28087	1032939	1	True				
ANR	1033035	Identifier	FALSE		1032939	0					
ANR	1033036	ExpressionStatement	data = malloc ( data_size )	1089:2:28096:28121	1032939	7	True				
ANR	1033037	AssignmentExpression	data = malloc ( data_size )		1032939	0		=			
ANR	1033038	Identifier	data		1032939	0					
ANR	1033039	CallExpression	malloc ( data_size )		1032939	1					
ANR	1033040	Callee	malloc		1032939	0					
ANR	1033041	Identifier	malloc		1032939	0					
ANR	1033042	ArgumentList	data_size		1032939	1					
ANR	1033043	Argument	data_size		1032939	0					
ANR	1033044	Identifier	data_size		1032939	0					
ANR	1033045	ExpressionStatement	"memcpy ( data , buff , data_size )"	1091:2:28126:28156	1032939	8	True				
ANR	1033046	CallExpression	"memcpy ( data , buff , data_size )"		1032939	0					
ANR	1033047	Callee	memcpy		1032939	0					
ANR	1033048	Identifier	memcpy		1032939	0					
ANR	1033049	ArgumentList	data		1032939	1					
ANR	1033050	Argument	data		1032939	0					
ANR	1033051	Identifier	data		1032939	0					
ANR	1033052	Argument	buff		1032939	1					
ANR	1033053	Identifier	buff		1032939	0					
ANR	1033054	Argument	data_size		1032939	2					
ANR	1033055	Identifier	data_size		1032939	0					
ANR	1033056	ExpressionStatement	set_priv ( priv )	1093:2:28161:28176	1032939	9	True				
ANR	1033057	CallExpression	set_priv ( priv )		1032939	0					
ANR	1033058	Callee	set_priv		1032939	0					
ANR	1033059	Identifier	set_priv		1032939	0					
ANR	1033060	ArgumentList	priv		1032939	1					
ANR	1033061	Argument	priv		1032939	0					
ANR	1033062	Identifier	priv		1032939	0					
ANR	1033063	ReturnStatement	return TRUE ;	1094:2:28180:28191	1032939	10	True				
ANR	1033064	Identifier	TRUE		1032939	0					
ANR	1033065	ReturnType	int		1032939	1					
ANR	1033066	Identifier	LoadData		1032939	2					
ANR	1033067	ParameterList	"const char * file_name , void * & data , int & data_size"		1032939	3					
ANR	1033068	Parameter	const char * file_name	1069:10:27652:27673	1032939	0	True				
ANR	1033069	ParameterType	const char *		1032939	0					
ANR	1033070	Identifier	file_name		1032939	1					
ANR	1033071	Parameter	void * & data	1069:34:27676:27687	1032939	1	True				
ANR	1033072	ParameterType	void * &		1032939	0					
ANR	1033073	Identifier	data		1032939	1					
ANR	1033074	Parameter	int & data_size	1069:48:27690:27704	1032939	2	True				
ANR	1033075	ParameterType	int &		1032939	0					
ANR	1033076	Identifier	data_size		1032939	1					
ANR	1033077	CFGEntryNode	ENTRY		1032939		True				
ANR	1033078	CFGExitNode	EXIT		1032939		True				
ANR	1033079	Symbol	data_size		1032939						
ANR	1033080	Symbol	malloc		1032939						
ANR	1033081	Symbol	safe_open_wrapper_follow		1032939						
ANR	1033082	Symbol	read		1032939						
ANR	1033083	Symbol	data		1032939						
ANR	1033084	Symbol	file_name		1032939						
ANR	1033085	Symbol	TRUE		1032939						
ANR	1033086	Symbol	set_root_priv		1032939						
ANR	1033087	Symbol	MAX_CRED_DATA_SIZE		1032939						
ANR	1033088	Symbol	stderr		1032939						
ANR	1033089	Symbol	O_RDONLY		1032939						
ANR	1033090	Symbol	FALSE		1032939						
ANR	1033091	Symbol	priv		1032939						
ANR	1033092	Symbol	buff		1032939						
ANR	1033093	Symbol	fd		1032939						
ANR	1033094	Function	init_user_id_from_FQN	1099:0:28198:28736							
ANR	1033095	FunctionDef	init_user_id_from_FQN (const char * _fqn)		1033094	0					
ANR	1033096	CompoundStatement		1100:42:28244:28736	1033094	0					
ANR	1033097	IdentifierDeclStatement	char * uid = NULL ;	1102:2:28249:28266	1033094	0	True				
ANR	1033098	IdentifierDecl	* uid = NULL		1033094	0					
ANR	1033099	IdentifierDeclType	char *		1033094	0					
ANR	1033100	Identifier	uid		1033094	1					
ANR	1033101	AssignmentExpression	* uid = NULL		1033094	2		=			
ANR	1033102	Identifier	NULL		1033094	0					
ANR	1033103	Identifier	NULL		1033094	1					
ANR	1033104	IdentifierDeclStatement	char * domain = NULL ;	1103:2:28270:28290	1033094	1	True				
ANR	1033105	IdentifierDecl	* domain = NULL		1033094	0					
ANR	1033106	IdentifierDeclType	char *		1033094	0					
ANR	1033107	Identifier	domain		1033094	1					
ANR	1033108	AssignmentExpression	* domain = NULL		1033094	2		=			
ANR	1033109	Identifier	NULL		1033094	0					
ANR	1033110	Identifier	NULL		1033094	1					
ANR	1033111	IdentifierDeclStatement	char * fqn = NULL ;	1104:2:28294:28311	1033094	2	True				
ANR	1033112	IdentifierDecl	* fqn = NULL		1033094	0					
ANR	1033113	IdentifierDeclType	char *		1033094	0					
ANR	1033114	Identifier	fqn		1033094	1					
ANR	1033115	AssignmentExpression	* fqn = NULL		1033094	2		=			
ANR	1033116	Identifier	NULL		1033094	0					
ANR	1033117	Identifier	NULL		1033094	1					
ANR	1033118	IdentifierDeclStatement	"char default_uid [ ] = ""nobody"" ;"	1105:2:28315:28345	1033094	3	True				
ANR	1033119	IdentifierDecl	"default_uid [ ] = ""nobody"""		1033094	0					
ANR	1033120	IdentifierDeclType	char [ ]		1033094	0					
ANR	1033121	Identifier	default_uid		1033094	1					
ANR	1033122	AssignmentExpression	"default_uid [ ] = ""nobody"""		1033094	2		=			
ANR	1033123	Identifier	default_uid		1033094	0					
ANR	1033124	PrimaryExpression	"""nobody"""		1033094	1					
ANR	1033125	IfStatement	if ( _fqn )		1033094	4					
ANR	1033126	Condition	_fqn	1107:6:28354:28357	1033094	0	True				
ANR	1033127	Identifier	_fqn		1033094	0					
ANR	1033128	CompoundStatement		13:4:177:207	1033094	1					
ANR	1033129	ExpressionStatement	fqn = strdup ( _fqn )	1108:4:28366:28385	1033094	0	True				
ANR	1033130	AssignmentExpression	fqn = strdup ( _fqn )		1033094	0		=			
ANR	1033131	Identifier	fqn		1033094	0					
ANR	1033132	CallExpression	strdup ( _fqn )		1033094	1					
ANR	1033133	Callee	strdup		1033094	0					
ANR	1033134	Identifier	strdup		1033094	0					
ANR	1033135	ArgumentList	_fqn		1033094	1					
ANR	1033136	Argument	_fqn		1033094	0					
ANR	1033137	Identifier	_fqn		1033094	0					
ANR	1033138	ExpressionStatement	uid = fqn	1109:4:28391:28400	1033094	1	True				
ANR	1033139	AssignmentExpression	uid = fqn		1033094	0		=			
ANR	1033140	Identifier	uid		1033094	0					
ANR	1033141	Identifier	fqn		1033094	1					
ANR	1033142	IdentifierDeclStatement	"char * pAt = strchr ( fqn , '@' ) ;"	1112:4:28422:28452	1033094	2	True				
ANR	1033143	IdentifierDecl	"* pAt = strchr ( fqn , '@' )"		1033094	0					
ANR	1033144	IdentifierDeclType	char *		1033094	0					
ANR	1033145	Identifier	pAt		1033094	1					
ANR	1033146	AssignmentExpression	"* pAt = strchr ( fqn , '@' )"		1033094	2		=			
ANR	1033147	Identifier	pAt		1033094	0					
ANR	1033148	CallExpression	"strchr ( fqn , '@' )"		1033094	1					
ANR	1033149	Callee	strchr		1033094	0					
ANR	1033150	Identifier	strchr		1033094	0					
ANR	1033151	ArgumentList	fqn		1033094	1					
ANR	1033152	Argument	fqn		1033094	0					
ANR	1033153	Identifier	fqn		1033094	0					
ANR	1033154	Argument	'@'		1033094	1					
ANR	1033155	PrimaryExpression	'@'		1033094	0					
ANR	1033156	IfStatement	if ( pAt )		1033094	3					
ANR	1033157	Condition	pAt	1113:8:28462:28464	1033094	0	True				
ANR	1033158	Identifier	pAt		1033094	0					
ANR	1033159	CompoundStatement		14:13:222:222	1033094	1					
ANR	1033160	ExpressionStatement	* pAt = '\\0'	1114:6:28475:28484	1033094	0	True				
ANR	1033161	AssignmentExpression	* pAt = '\\0'		1033094	0		=			
ANR	1033162	UnaryOperationExpression	* pAt		1033094	0					
ANR	1033163	UnaryOperator	*		1033094	0					
ANR	1033164	Identifier	pAt		1033094	1					
ANR	1033165	PrimaryExpression	'\\0'		1033094	1					
ANR	1033166	ExpressionStatement	domain = pAt + 1	1115:6:28492:28506	1033094	1	True				
ANR	1033167	AssignmentExpression	domain = pAt + 1		1033094	0		=			
ANR	1033168	Identifier	domain		1033094	0					
ANR	1033169	AdditiveExpression	pAt + 1		1033094	1		+			
ANR	1033170	Identifier	pAt		1033094	0					
ANR	1033171	PrimaryExpression	1		1033094	1					
ANR	1033172	IfStatement	if ( uid == NULL )		1033094	5					
ANR	1033173	Condition	uid == NULL	1119:6:28527:28537	1033094	0	True				
ANR	1033174	EqualityExpression	uid == NULL		1033094	0		==			
ANR	1033175	Identifier	uid		1033094	0					
ANR	1033176	Identifier	NULL		1033094	1					
ANR	1033177	CompoundStatement		20:19:295:295	1033094	1					
ANR	1033178	ExpressionStatement	uid = default_uid	1120:4:28546:28563	1033094	0	True				
ANR	1033179	AssignmentExpression	uid = default_uid		1033094	0		=			
ANR	1033180	Identifier	uid		1033094	0					
ANR	1033181	Identifier	default_uid		1033094	1					
ANR	1033182	IdentifierDeclStatement	"int rc = init_user_ids ( uid , domain ) ;"	1123:2:28572:28608	1033094	6	True				
ANR	1033183	IdentifierDecl	"rc = init_user_ids ( uid , domain )"		1033094	0					
ANR	1033184	IdentifierDeclType	int		1033094	0					
ANR	1033185	Identifier	rc		1033094	1					
ANR	1033186	AssignmentExpression	"rc = init_user_ids ( uid , domain )"		1033094	2		=			
ANR	1033187	Identifier	rc		1033094	0					
ANR	1033188	CallExpression	"init_user_ids ( uid , domain )"		1033094	1					
ANR	1033189	Callee	init_user_ids		1033094	0					
ANR	1033190	Identifier	init_user_ids		1033094	0					
ANR	1033191	ArgumentList	uid		1033094	1					
ANR	1033192	Argument	uid		1033094	0					
ANR	1033193	Identifier	uid		1033094	0					
ANR	1033194	Argument	domain		1033094	1					
ANR	1033195	Identifier	domain		1033094	0					
ANR	1033196	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Switching to user %s@%s, result = %d\\n"" , uid , domain , rc )"	1124:2:28612:28692	1033094	7	True				
ANR	1033197	CallExpression	"dprintf ( D_FULLDEBUG , ""Switching to user %s@%s, result = %d\\n"" , uid , domain , rc )"		1033094	0					
ANR	1033198	Callee	dprintf		1033094	0					
ANR	1033199	Identifier	dprintf		1033094	0					
ANR	1033200	ArgumentList	D_FULLDEBUG		1033094	1					
ANR	1033201	Argument	D_FULLDEBUG		1033094	0					
ANR	1033202	Identifier	D_FULLDEBUG		1033094	0					
ANR	1033203	Argument	"""Switching to user %s@%s, result = %d\\n"""		1033094	1					
ANR	1033204	PrimaryExpression	"""Switching to user %s@%s, result = %d\\n"""		1033094	0					
ANR	1033205	Argument	uid		1033094	2					
ANR	1033206	Identifier	uid		1033094	0					
ANR	1033207	Argument	domain		1033094	3					
ANR	1033208	Identifier	domain		1033094	0					
ANR	1033209	Argument	rc		1033094	4					
ANR	1033210	Identifier	rc		1033094	0					
ANR	1033211	IfStatement	if ( fqn )		1033094	8					
ANR	1033212	Condition	fqn	1126:6:28701:28703	1033094	0	True				
ANR	1033213	Identifier	fqn		1033094	0					
ANR	1033214	ExpressionStatement	free ( fqn )	1127:4:28710:28720	1033094	1	True				
ANR	1033215	CallExpression	free ( fqn )		1033094	0					
ANR	1033216	Callee	free		1033094	0					
ANR	1033217	Identifier	free		1033094	0					
ANR	1033218	ArgumentList	fqn		1033094	1					
ANR	1033219	Argument	fqn		1033094	0					
ANR	1033220	Identifier	fqn		1033094	0					
ANR	1033221	ReturnStatement	return rc ;	1129:2:28725:28734	1033094	9	True				
ANR	1033222	Identifier	rc		1033094	0					
ANR	1033223	ReturnType	int		1033094	1					
ANR	1033224	Identifier	init_user_id_from_FQN		1033094	2					
ANR	1033225	ParameterList	const char * _fqn		1033094	3					
ANR	1033226	Parameter	const char * _fqn	1100:23:28225:28241	1033094	0	True				
ANR	1033227	ParameterType	const char *		1033094	0					
ANR	1033228	Identifier	_fqn		1033094	1					
ANR	1033229	CFGEntryNode	ENTRY		1033094		True				
ANR	1033230	CFGExitNode	EXIT		1033094		True				
ANR	1033231	Symbol	fqn		1033094						
ANR	1033232	Symbol	pAt		1033094						
ANR	1033233	Symbol	NULL		1033094						
ANR	1033234	Symbol	_fqn		1033094						
ANR	1033235	Symbol	strchr		1033094						
ANR	1033236	Symbol	D_FULLDEBUG		1033094						
ANR	1033237	Symbol	default_uid		1033094						
ANR	1033238	Symbol	* pAt		1033094						
ANR	1033239	Symbol	uid		1033094						
ANR	1033240	Symbol	rc		1033094						
ANR	1033241	Symbol	domain		1033094						
ANR	1033242	Symbol	strdup		1033094						
ANR	1033243	Symbol	init_user_ids		1033094						
