command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	615126	File	data/converged/CVE-2011-4930_htcondor/advertise.cpp								
ANR	615127	Function	usage	34:0:1129:1793							
ANR	615128	FunctionDef	usage (char * cmd)		615127	0					
ANR	615129	CompoundStatement		36:0:1153:1793	615127	0					
ANR	615130	ExpressionStatement	"fprintf ( stderr , ""Usage: %s [options] <update-command> [<classad-filename>]\\n"" , cmd )"	37:1:1156:1237	615127	0	True				
ANR	615131	CallExpression	"fprintf ( stderr , ""Usage: %s [options] <update-command> [<classad-filename>]\\n"" , cmd )"		615127	0					
ANR	615132	Callee	fprintf		615127	0					
ANR	615133	Identifier	fprintf		615127	0					
ANR	615134	ArgumentList	stderr		615127	1					
ANR	615135	Argument	stderr		615127	0					
ANR	615136	Identifier	stderr		615127	0					
ANR	615137	Argument	"""Usage: %s [options] <update-command> [<classad-filename>]\\n"""		615127	1					
ANR	615138	PrimaryExpression	"""Usage: %s [options] <update-command> [<classad-filename>]\\n"""		615127	0					
ANR	615139	Argument	cmd		615127	2					
ANR	615140	Identifier	cmd		615127	0					
ANR	615141	ExpressionStatement	"fprintf ( stderr , ""Where options are:\\n"" )"	38:1:1240:1278	615127	1	True				
ANR	615142	CallExpression	"fprintf ( stderr , ""Where options are:\\n"" )"		615127	0					
ANR	615143	Callee	fprintf		615127	0					
ANR	615144	Identifier	fprintf		615127	0					
ANR	615145	ArgumentList	stderr		615127	1					
ANR	615146	Argument	stderr		615127	0					
ANR	615147	Identifier	stderr		615127	0					
ANR	615148	Argument	"""Where options are:\\n"""		615127	1					
ANR	615149	PrimaryExpression	"""Where options are:\\n"""		615127	0					
ANR	615150	ExpressionStatement	"fprintf ( stderr , ""    -help             Display options\\n"" )"	39:1:1281:1338	615127	2	True				
ANR	615151	CallExpression	"fprintf ( stderr , ""    -help             Display options\\n"" )"		615127	0					
ANR	615152	Callee	fprintf		615127	0					
ANR	615153	Identifier	fprintf		615127	0					
ANR	615154	ArgumentList	stderr		615127	1					
ANR	615155	Argument	stderr		615127	0					
ANR	615156	Identifier	stderr		615127	0					
ANR	615157	Argument	"""    -help             Display options\\n"""		615127	1					
ANR	615158	PrimaryExpression	"""    -help             Display options\\n"""		615127	0					
ANR	615159	ExpressionStatement	"fprintf ( stderr , ""    -version          Display Condor version\\n"" )"	40:1:1341:1405	615127	3	True				
ANR	615160	CallExpression	"fprintf ( stderr , ""    -version          Display Condor version\\n"" )"		615127	0					
ANR	615161	Callee	fprintf		615127	0					
ANR	615162	Identifier	fprintf		615127	0					
ANR	615163	ArgumentList	stderr		615127	1					
ANR	615164	Argument	stderr		615127	0					
ANR	615165	Identifier	stderr		615127	0					
ANR	615166	Argument	"""    -version          Display Condor version\\n"""		615127	1					
ANR	615167	PrimaryExpression	"""    -version          Display Condor version\\n"""		615127	0					
ANR	615168	ExpressionStatement	"fprintf ( stderr , ""    -pool <hostname>  Use this central manager\\n"" )"	41:1:1408:1474	615127	4	True				
ANR	615169	CallExpression	"fprintf ( stderr , ""    -pool <hostname>  Use this central manager\\n"" )"		615127	0					
ANR	615170	Callee	fprintf		615127	0					
ANR	615171	Identifier	fprintf		615127	0					
ANR	615172	ArgumentList	stderr		615127	1					
ANR	615173	Argument	stderr		615127	0					
ANR	615174	Identifier	stderr		615127	0					
ANR	615175	Argument	"""    -pool <hostname>  Use this central manager\\n"""		615127	1					
ANR	615176	PrimaryExpression	"""    -pool <hostname>  Use this central manager\\n"""		615127	0					
ANR	615177	ExpressionStatement	"fprintf ( stderr , ""    -debug            Show extra debugging info\\n"" )"	42:1:1477:1544	615127	5	True				
ANR	615178	CallExpression	"fprintf ( stderr , ""    -debug            Show extra debugging info\\n"" )"		615127	0					
ANR	615179	Callee	fprintf		615127	0					
ANR	615180	Identifier	fprintf		615127	0					
ANR	615181	ArgumentList	stderr		615127	1					
ANR	615182	Argument	stderr		615127	0					
ANR	615183	Identifier	stderr		615127	0					
ANR	615184	Argument	"""    -debug            Show extra debugging info\\n"""		615127	1					
ANR	615185	PrimaryExpression	"""    -debug            Show extra debugging info\\n"""		615127	0					
ANR	615186	ExpressionStatement	"fprintf ( stderr , ""    -tcp              Ship classad via TCP (default is UDP)\\n"" )"	43:1:1547:1626	615127	6	True				
ANR	615187	CallExpression	"fprintf ( stderr , ""    -tcp              Ship classad via TCP (default is UDP)\\n"" )"		615127	0					
ANR	615188	Callee	fprintf		615127	0					
ANR	615189	Identifier	fprintf		615127	0					
ANR	615190	ArgumentList	stderr		615127	1					
ANR	615191	Argument	stderr		615127	0					
ANR	615192	Identifier	stderr		615127	0					
ANR	615193	Argument	"""    -tcp              Ship classad via TCP (default is UDP)\\n"""		615127	1					
ANR	615194	PrimaryExpression	"""    -tcp              Ship classad via TCP (default is UDP)\\n"""		615127	0					
ANR	615195	ExpressionStatement	"fprintf ( stderr , ""    -multiple         Publish multiple ads, separated by blank lines\\n"" )"	44:1:1629:1717	615127	7	True				
ANR	615196	CallExpression	"fprintf ( stderr , ""    -multiple         Publish multiple ads, separated by blank lines\\n"" )"		615127	0					
ANR	615197	Callee	fprintf		615127	0					
ANR	615198	Identifier	fprintf		615127	0					
ANR	615199	ArgumentList	stderr		615127	1					
ANR	615200	Argument	stderr		615127	0					
ANR	615201	Identifier	stderr		615127	0					
ANR	615202	Argument	"""    -multiple         Publish multiple ads, separated by blank lines\\n"""		615127	1					
ANR	615203	PrimaryExpression	"""    -multiple         Publish multiple ads, separated by blank lines\\n"""		615127	0					
ANR	615204	ExpressionStatement	"fprintf ( stderr , ""\\nExample: %s -debug UPDATE_STORAGE_AD adfile\\n\\n"" , cmd )"	45:1:1720:1791	615127	8	True				
ANR	615205	CallExpression	"fprintf ( stderr , ""\\nExample: %s -debug UPDATE_STORAGE_AD adfile\\n\\n"" , cmd )"		615127	0					
ANR	615206	Callee	fprintf		615127	0					
ANR	615207	Identifier	fprintf		615127	0					
ANR	615208	ArgumentList	stderr		615127	1					
ANR	615209	Argument	stderr		615127	0					
ANR	615210	Identifier	stderr		615127	0					
ANR	615211	Argument	"""\\nExample: %s -debug UPDATE_STORAGE_AD adfile\\n\\n"""		615127	1					
ANR	615212	PrimaryExpression	"""\\nExample: %s -debug UPDATE_STORAGE_AD adfile\\n\\n"""		615127	0					
ANR	615213	Argument	cmd		615127	2					
ANR	615214	Identifier	cmd		615127	0					
ANR	615215	ReturnType	void		615127	1					
ANR	615216	Identifier	usage		615127	2					
ANR	615217	ParameterList	char * cmd		615127	3					
ANR	615218	Parameter	char * cmd	35:7:1141:1149	615127	0	True				
ANR	615219	ParameterType	char *		615127	0					
ANR	615220	Identifier	cmd		615127	1					
ANR	615221	CFGEntryNode	ENTRY		615127		True				
ANR	615222	CFGExitNode	EXIT		615127		True				
ANR	615223	Symbol	cmd		615127						
ANR	615224	Symbol	stderr		615127						
ANR	615225	Function	version	48:0:1796:1871							
ANR	615226	FunctionDef	version ()		615225	0					
ANR	615227	CompoundStatement		50:0:1811:1871	615225	0					
ANR	615228	ExpressionStatement	"printf ( ""%s\\n%s\\n"" , CondorVersion ( ) , CondorPlatform ( ) )"	51:1:1814:1869	615225	0	True				
ANR	615229	CallExpression	"printf ( ""%s\\n%s\\n"" , CondorVersion ( ) , CondorPlatform ( ) )"		615225	0					
ANR	615230	Callee	printf		615225	0					
ANR	615231	Identifier	printf		615225	0					
ANR	615232	ArgumentList	"""%s\\n%s\\n"""		615225	1					
ANR	615233	Argument	"""%s\\n%s\\n"""		615225	0					
ANR	615234	PrimaryExpression	"""%s\\n%s\\n"""		615225	0					
ANR	615235	Argument	CondorVersion ( )		615225	1					
ANR	615236	CallExpression	CondorVersion ( )		615225	0					
ANR	615237	Callee	CondorVersion		615225	0					
ANR	615238	Identifier	CondorVersion		615225	0					
ANR	615239	ArgumentList			615225	1					
ANR	615240	Argument	CondorPlatform ( )		615225	2					
ANR	615241	CallExpression	CondorPlatform ( )		615225	0					
ANR	615242	Callee	CondorPlatform		615225	0					
ANR	615243	Identifier	CondorPlatform		615225	0					
ANR	615244	ArgumentList			615225	1					
ANR	615245	ReturnType	void		615225	1					
ANR	615246	Identifier	version		615225	2					
ANR	615247	ParameterList			615225	3					
ANR	615248	CFGEntryNode	ENTRY		615225		True				
ANR	615249	CFGExitNode	EXIT		615225		True				
ANR	615250	Symbol	CondorVersion		615225						
ANR	615251	Symbol	CondorPlatform		615225						
ANR	615252	Function	main	54:0:1874:7141							
ANR	615253	FunctionDef	"main (int argc , char * argv [ ])"		615252	0					
ANR	615254	CompoundStatement		55:0:1909:7141	615252	0					
ANR	615255	IdentifierDeclStatement	const char * filename = 0 ;	56:1:1912:1934	615252	0	True				
ANR	615256	IdentifierDecl	* filename = 0		615252	0					
ANR	615257	IdentifierDeclType	const char *		615252	0					
ANR	615258	Identifier	filename		615252	1					
ANR	615259	AssignmentExpression	* filename = 0		615252	2		=			
ANR	615260	Identifier	filename		615252	0					
ANR	615261	PrimaryExpression	0		615252	1					
ANR	615262	IdentifierDeclStatement	char * pool = 0 ;	57:1:1937:1949	615252	1	True				
ANR	615263	IdentifierDecl	* pool = 0		615252	0					
ANR	615264	IdentifierDeclType	char *		615252	0					
ANR	615265	Identifier	pool		615252	1					
ANR	615266	AssignmentExpression	* pool = 0		615252	2		=			
ANR	615267	Identifier	pool		615252	0					
ANR	615268	PrimaryExpression	0		615252	1					
ANR	615269	IdentifierDeclStatement	int command = - 1 ;	58:1:1952:1966	615252	2	True				
ANR	615270	IdentifierDecl	command = - 1		615252	0					
ANR	615271	IdentifierDeclType	int		615252	0					
ANR	615272	Identifier	command		615252	1					
ANR	615273	AssignmentExpression	command = - 1		615252	2		=			
ANR	615274	Identifier	command		615252	0					
ANR	615275	UnaryOperationExpression	- 1		615252	1					
ANR	615276	UnaryOperator	-		615252	0					
ANR	615277	PrimaryExpression	1		615252	1					
ANR	615278	IdentifierDeclStatement	int i ;	59:1:1969:1974	615252	3	True				
ANR	615279	IdentifierDecl	i		615252	0					
ANR	615280	IdentifierDeclType	int		615252	0					
ANR	615281	Identifier	i		615252	1					
ANR	615282	IdentifierDeclStatement	bool use_tcp = false ;	60:1:1977:1997	615252	4	True				
ANR	615283	IdentifierDecl	use_tcp = false		615252	0					
ANR	615284	IdentifierDeclType	bool		615252	0					
ANR	615285	Identifier	use_tcp		615252	1					
ANR	615286	AssignmentExpression	use_tcp = false		615252	2		=			
ANR	615287	Identifier	false		615252	0					
ANR	615288	Identifier	false		615252	1					
ANR	615289	IdentifierDeclStatement	bool with_ack = false ;	61:1:2000:2021	615252	5	True				
ANR	615290	IdentifierDecl	with_ack = false		615252	0					
ANR	615291	IdentifierDeclType	bool		615252	0					
ANR	615292	Identifier	with_ack		615252	1					
ANR	615293	AssignmentExpression	with_ack = false		615252	2		=			
ANR	615294	Identifier	false		615252	0					
ANR	615295	Identifier	false		615252	1					
ANR	615296	IdentifierDeclStatement	bool allow_multiple = false ;	62:1:2024:2051	615252	6	True				
ANR	615297	IdentifierDecl	allow_multiple = false		615252	0					
ANR	615298	IdentifierDeclType	bool		615252	0					
ANR	615299	Identifier	allow_multiple		615252	1					
ANR	615300	AssignmentExpression	allow_multiple = false		615252	2		=			
ANR	615301	Identifier	false		615252	0					
ANR	615302	Identifier	false		615252	1					
ANR	615303	IdentifierDeclStatement	param_functions * p_funcs = NULL ;	63:1:2054:2085	615252	7	True				
ANR	615304	IdentifierDecl	* p_funcs = NULL		615252	0					
ANR	615305	IdentifierDeclType	param_functions *		615252	0					
ANR	615306	Identifier	p_funcs		615252	1					
ANR	615307	AssignmentExpression	* p_funcs = NULL		615252	2		=			
ANR	615308	Identifier	NULL		615252	0					
ANR	615309	Identifier	NULL		615252	1					
ANR	615310	ExpressionStatement	"myDistro -> Init ( argc , argv )"	66:1:2090:2118	615252	8	True				
ANR	615311	CallExpression	"myDistro -> Init ( argc , argv )"		615252	0					
ANR	615312	Callee	myDistro -> Init		615252	0					
ANR	615313	PtrMemberAccess	myDistro -> Init		615252	0					
ANR	615314	Identifier	myDistro		615252	0					
ANR	615315	Identifier	Init		615252	1					
ANR	615316	ArgumentList	argc		615252	1					
ANR	615317	Argument	argc		615252	0					
ANR	615318	Identifier	argc		615252	0					
ANR	615319	Argument	argv		615252	1					
ANR	615320	Identifier	argv		615252	0					
ANR	615321	ExpressionStatement	config ( )	67:1:2121:2129	615252	9	True				
ANR	615322	CallExpression	config ( )		615252	0					
ANR	615323	Callee	config		615252	0					
ANR	615324	Identifier	config		615252	0					
ANR	615325	ArgumentList			615252	1					
ANR	615326	ExpressionStatement	p_funcs = get_param_functions ( )	68:1:2132:2163	615252	10	True				
ANR	615327	AssignmentExpression	p_funcs = get_param_functions ( )		615252	0		=			
ANR	615328	Identifier	p_funcs		615252	0					
ANR	615329	CallExpression	get_param_functions ( )		615252	1					
ANR	615330	Callee	get_param_functions		615252	0					
ANR	615331	Identifier	get_param_functions		615252	0					
ANR	615332	ArgumentList			615252	1					
ANR	615333	ForStatement	for ( i = 1 ; i < argc ; i ++ )		615252	11					
ANR	615334	ForInit	i = 1 ;	70:6:2172:2175	615252	0	True				
ANR	615335	AssignmentExpression	i = 1		615252	0		=			
ANR	615336	Identifier	i		615252	0					
ANR	615337	PrimaryExpression	1		615252	1					
ANR	615338	Condition	i < argc	70:11:2177:2182	615252	1	True				
ANR	615339	RelationalExpression	i < argc		615252	0		<			
ANR	615340	Identifier	i		615252	0					
ANR	615341	Identifier	argc		615252	1					
ANR	615342	PostIncDecOperationExpression	i ++	70:19:2185:2187	615252	2	True				
ANR	615343	Identifier	i		615252	0					
ANR	615344	IncDec	++		615252	1					
ANR	615345	CompoundStatement		16:25:281:281	615252	3					
ANR	615346	IfStatement	"if ( ! strcmp ( argv [ i ] , ""-help"" ) )"		615252	0					
ANR	615347	Condition	"! strcmp ( argv [ i ] , ""-help"" )"	71:5:2198:2221	615252	0	True				
ANR	615348	UnaryOperationExpression	"! strcmp ( argv [ i ] , ""-help"" )"		615252	0					
ANR	615349	UnaryOperator	!		615252	0					
ANR	615350	CallExpression	"strcmp ( argv [ i ] , ""-help"" )"		615252	1					
ANR	615351	Callee	strcmp		615252	0					
ANR	615352	Identifier	strcmp		615252	0					
ANR	615353	ArgumentList	argv [ i ]		615252	1					
ANR	615354	Argument	argv [ i ]		615252	0					
ANR	615355	ArrayIndexing	argv [ i ]		615252	0					
ANR	615356	Identifier	argv		615252	0					
ANR	615357	Identifier	i		615252	1					
ANR	615358	Argument	"""-help"""		615252	1					
ANR	615359	PrimaryExpression	"""-help"""		615252	0					
ANR	615360	CompoundStatement		17:31:314:314	615252	1					
ANR	615361	ExpressionStatement	usage ( argv [ 0 ] )	72:3:2229:2243	615252	0	True				
ANR	615362	CallExpression	usage ( argv [ 0 ] )		615252	0					
ANR	615363	Callee	usage		615252	0					
ANR	615364	Identifier	usage		615252	0					
ANR	615365	ArgumentList	argv [ 0 ]		615252	1					
ANR	615366	Argument	argv [ 0 ]		615252	0					
ANR	615367	ArrayIndexing	argv [ 0 ]		615252	0					
ANR	615368	Identifier	argv		615252	0					
ANR	615369	PrimaryExpression	0		615252	1					
ANR	615370	ExpressionStatement	exit ( 0 )	73:3:2248:2255	615252	1	True				
ANR	615371	CallExpression	exit ( 0 )		615252	0					
ANR	615372	Callee	exit		615252	0					
ANR	615373	Identifier	exit		615252	0					
ANR	615374	ArgumentList	0		615252	1					
ANR	615375	Argument	0		615252	0					
ANR	615376	PrimaryExpression	0		615252	0					
ANR	615377	ElseStatement	else		615252	0					
ANR	615378	IfStatement	"if ( ! strcmp ( argv [ i ] , ""-pool"" ) )"		615252	0					
ANR	615379	Condition	"! strcmp ( argv [ i ] , ""-pool"" )"	74:12:2269:2292	615252	0	True				
ANR	615380	UnaryOperationExpression	"! strcmp ( argv [ i ] , ""-pool"" )"		615252	0					
ANR	615381	UnaryOperator	!		615252	0					
ANR	615382	CallExpression	"strcmp ( argv [ i ] , ""-pool"" )"		615252	1					
ANR	615383	Callee	strcmp		615252	0					
ANR	615384	Identifier	strcmp		615252	0					
ANR	615385	ArgumentList	argv [ i ]		615252	1					
ANR	615386	Argument	argv [ i ]		615252	0					
ANR	615387	ArrayIndexing	argv [ i ]		615252	0					
ANR	615388	Identifier	argv		615252	0					
ANR	615389	Identifier	i		615252	1					
ANR	615390	Argument	"""-pool"""		615252	1					
ANR	615391	PrimaryExpression	"""-pool"""		615252	0					
ANR	615392	CompoundStatement		20:38:385:385	615252	1					
ANR	615393	ExpressionStatement	i ++	75:3:2301:2304	615252	0	True				
ANR	615394	PostIncDecOperationExpression	i ++		615252	0					
ANR	615395	Identifier	i		615252	0					
ANR	615396	IncDec	++		615252	1					
ANR	615397	IfStatement	if ( ! argv [ i ] )		615252	1					
ANR	615398	Condition	! argv [ i ]	76:6:2312:2319	615252	0	True				
ANR	615399	UnaryOperationExpression	! argv [ i ]		615252	0					
ANR	615400	UnaryOperator	!		615252	0					
ANR	615401	ArrayIndexing	argv [ i ]		615252	1					
ANR	615402	Identifier	argv		615252	0					
ANR	615403	Identifier	i		615252	1					
ANR	615404	CompoundStatement		22:16:412:412	615252	1					
ANR	615405	ExpressionStatement	"fprintf ( stderr , ""-pool requires an argument.\\n\\n"" )"	77:4:2328:2377	615252	0	True				
ANR	615406	CallExpression	"fprintf ( stderr , ""-pool requires an argument.\\n\\n"" )"		615252	0					
ANR	615407	Callee	fprintf		615252	0					
ANR	615408	Identifier	fprintf		615252	0					
ANR	615409	ArgumentList	stderr		615252	1					
ANR	615410	Argument	stderr		615252	0					
ANR	615411	Identifier	stderr		615252	0					
ANR	615412	Argument	"""-pool requires an argument.\\n\\n"""		615252	1					
ANR	615413	PrimaryExpression	"""-pool requires an argument.\\n\\n"""		615252	0					
ANR	615414	ExpressionStatement	usage ( argv [ 0 ] )	78:4:2383:2397	615252	1	True				
ANR	615415	CallExpression	usage ( argv [ 0 ] )		615252	0					
ANR	615416	Callee	usage		615252	0					
ANR	615417	Identifier	usage		615252	0					
ANR	615418	ArgumentList	argv [ 0 ]		615252	1					
ANR	615419	Argument	argv [ 0 ]		615252	0					
ANR	615420	ArrayIndexing	argv [ 0 ]		615252	0					
ANR	615421	Identifier	argv		615252	0					
ANR	615422	PrimaryExpression	0		615252	1					
ANR	615423	ExpressionStatement	exit ( 1 )	79:4:2403:2410	615252	2	True				
ANR	615424	CallExpression	exit ( 1 )		615252	0					
ANR	615425	Callee	exit		615252	0					
ANR	615426	Identifier	exit		615252	0					
ANR	615427	ArgumentList	1		615252	1					
ANR	615428	Argument	1		615252	0					
ANR	615429	PrimaryExpression	1		615252	0					
ANR	615430	ExpressionStatement	pool = argv [ i ]	81:3:2420:2434	615252	2	True				
ANR	615431	AssignmentExpression	pool = argv [ i ]		615252	0		=			
ANR	615432	Identifier	pool		615252	0					
ANR	615433	ArrayIndexing	argv [ i ]		615252	1					
ANR	615434	Identifier	argv		615252	0					
ANR	615435	Identifier	i		615252	1					
ANR	615436	ElseStatement	else		615252	0					
ANR	615437	IfStatement	"if ( ! strncmp ( argv [ i ] , ""-tcp"" , strlen ( argv [ i ] ) ) )"		615252	0					
ANR	615438	Condition	"! strncmp ( argv [ i ] , ""-tcp"" , strlen ( argv [ i ] ) )"	82:12:2448:2487	615252	0	True				
ANR	615439	UnaryOperationExpression	"! strncmp ( argv [ i ] , ""-tcp"" , strlen ( argv [ i ] ) )"		615252	0					
ANR	615440	UnaryOperator	!		615252	0					
ANR	615441	CallExpression	"strncmp ( argv [ i ] , ""-tcp"" , strlen ( argv [ i ] ) )"		615252	1					
ANR	615442	Callee	strncmp		615252	0					
ANR	615443	Identifier	strncmp		615252	0					
ANR	615444	ArgumentList	argv [ i ]		615252	1					
ANR	615445	Argument	argv [ i ]		615252	0					
ANR	615446	ArrayIndexing	argv [ i ]		615252	0					
ANR	615447	Identifier	argv		615252	0					
ANR	615448	Identifier	i		615252	1					
ANR	615449	Argument	"""-tcp"""		615252	1					
ANR	615450	PrimaryExpression	"""-tcp"""		615252	0					
ANR	615451	Argument	strlen ( argv [ i ] )		615252	2					
ANR	615452	CallExpression	strlen ( argv [ i ] )		615252	0					
ANR	615453	Callee	strlen		615252	0					
ANR	615454	Identifier	strlen		615252	0					
ANR	615455	ArgumentList	argv [ i ]		615252	1					
ANR	615456	Argument	argv [ i ]		615252	0					
ANR	615457	ArrayIndexing	argv [ i ]		615252	0					
ANR	615458	Identifier	argv		615252	0					
ANR	615459	Identifier	i		615252	1					
ANR	615460	CompoundStatement		28:54:580:580	615252	1					
ANR	615461	ExpressionStatement	use_tcp = true	83:3:2495:2509	615252	0	True				
ANR	615462	AssignmentExpression	use_tcp = true		615252	0		=			
ANR	615463	Identifier	use_tcp		615252	0					
ANR	615464	Identifier	true		615252	1					
ANR	615465	ElseStatement	else		615252	0					
ANR	615466	IfStatement	"if ( ! strncmp ( argv [ i ] , ""-multiple"" , strlen ( argv [ i ] ) ) )"		615252	0					
ANR	615467	Condition	"! strncmp ( argv [ i ] , ""-multiple"" , strlen ( argv [ i ] ) )"	84:12:2523:2567	615252	0	True				
ANR	615468	UnaryOperationExpression	"! strncmp ( argv [ i ] , ""-multiple"" , strlen ( argv [ i ] ) )"		615252	0					
ANR	615469	UnaryOperator	!		615252	0					
ANR	615470	CallExpression	"strncmp ( argv [ i ] , ""-multiple"" , strlen ( argv [ i ] ) )"		615252	1					
ANR	615471	Callee	strncmp		615252	0					
ANR	615472	Identifier	strncmp		615252	0					
ANR	615473	ArgumentList	argv [ i ]		615252	1					
ANR	615474	Argument	argv [ i ]		615252	0					
ANR	615475	ArrayIndexing	argv [ i ]		615252	0					
ANR	615476	Identifier	argv		615252	0					
ANR	615477	Identifier	i		615252	1					
ANR	615478	Argument	"""-multiple"""		615252	1					
ANR	615479	PrimaryExpression	"""-multiple"""		615252	0					
ANR	615480	Argument	strlen ( argv [ i ] )		615252	2					
ANR	615481	CallExpression	strlen ( argv [ i ] )		615252	0					
ANR	615482	Callee	strlen		615252	0					
ANR	615483	Identifier	strlen		615252	0					
ANR	615484	ArgumentList	argv [ i ]		615252	1					
ANR	615485	Argument	argv [ i ]		615252	0					
ANR	615486	ArrayIndexing	argv [ i ]		615252	0					
ANR	615487	Identifier	argv		615252	0					
ANR	615488	Identifier	i		615252	1					
ANR	615489	CompoundStatement		30:59:660:660	615252	1					
ANR	615490	ExpressionStatement	allow_multiple = true	88:3:2724:2745	615252	0	True				
ANR	615491	AssignmentExpression	allow_multiple = true		615252	0		=			
ANR	615492	Identifier	allow_multiple		615252	0					
ANR	615493	Identifier	true		615252	1					
ANR	615494	ElseStatement	else		615252	0					
ANR	615495	IfStatement	"if ( ! strcmp ( argv [ i ] , ""-version"" ) )"		615252	0					
ANR	615496	Condition	"! strcmp ( argv [ i ] , ""-version"" )"	89:12:2759:2785	615252	0	True				
ANR	615497	UnaryOperationExpression	"! strcmp ( argv [ i ] , ""-version"" )"		615252	0					
ANR	615498	UnaryOperator	!		615252	0					
ANR	615499	CallExpression	"strcmp ( argv [ i ] , ""-version"" )"		615252	1					
ANR	615500	Callee	strcmp		615252	0					
ANR	615501	Identifier	strcmp		615252	0					
ANR	615502	ArgumentList	argv [ i ]		615252	1					
ANR	615503	Argument	argv [ i ]		615252	0					
ANR	615504	ArrayIndexing	argv [ i ]		615252	0					
ANR	615505	Identifier	argv		615252	0					
ANR	615506	Identifier	i		615252	1					
ANR	615507	Argument	"""-version"""		615252	1					
ANR	615508	PrimaryExpression	"""-version"""		615252	0					
ANR	615509	CompoundStatement		35:41:878:878	615252	1					
ANR	615510	ExpressionStatement	version ( )	90:3:2793:2802	615252	0	True				
ANR	615511	CallExpression	version ( )		615252	0					
ANR	615512	Callee	version		615252	0					
ANR	615513	Identifier	version		615252	0					
ANR	615514	ArgumentList			615252	1					
ANR	615515	ExpressionStatement	exit ( 0 )	91:3:2807:2814	615252	1	True				
ANR	615516	CallExpression	exit ( 0 )		615252	0					
ANR	615517	Callee	exit		615252	0					
ANR	615518	Identifier	exit		615252	0					
ANR	615519	ArgumentList	0		615252	1					
ANR	615520	Argument	0		615252	0					
ANR	615521	PrimaryExpression	0		615252	0					
ANR	615522	ElseStatement	else		615252	0					
ANR	615523	IfStatement	"if ( ! strcmp ( argv [ i ] , ""-debug"" ) )"		615252	0					
ANR	615524	Condition	"! strcmp ( argv [ i ] , ""-debug"" )"	92:12:2828:2852	615252	0	True				
ANR	615525	UnaryOperationExpression	"! strcmp ( argv [ i ] , ""-debug"" )"		615252	0					
ANR	615526	UnaryOperator	!		615252	0					
ANR	615527	CallExpression	"strcmp ( argv [ i ] , ""-debug"" )"		615252	1					
ANR	615528	Callee	strcmp		615252	0					
ANR	615529	Identifier	strcmp		615252	0					
ANR	615530	ArgumentList	argv [ i ]		615252	1					
ANR	615531	Argument	argv [ i ]		615252	0					
ANR	615532	ArrayIndexing	argv [ i ]		615252	0					
ANR	615533	Identifier	argv		615252	0					
ANR	615534	Identifier	i		615252	1					
ANR	615535	Argument	"""-debug"""		615252	1					
ANR	615536	PrimaryExpression	"""-debug"""		615252	0					
ANR	615537	CompoundStatement		38:39:945:945	615252	1					
ANR	615538	ExpressionStatement	Termlog = 1	94:3:2886:2897	615252	0	True				
ANR	615539	AssignmentExpression	Termlog = 1		615252	0		=			
ANR	615540	Identifier	Termlog		615252	0					
ANR	615541	PrimaryExpression	1		615252	1					
ANR	615542	ExpressionStatement	p_funcs = get_param_functions ( )	95:3:2902:2933	615252	1	True				
ANR	615543	AssignmentExpression	p_funcs = get_param_functions ( )		615252	0		=			
ANR	615544	Identifier	p_funcs		615252	0					
ANR	615545	CallExpression	get_param_functions ( )		615252	1					
ANR	615546	Callee	get_param_functions		615252	0					
ANR	615547	Identifier	get_param_functions		615252	0					
ANR	615548	ArgumentList			615252	1					
ANR	615549	ExpressionStatement	"dprintf_config ( ""TOOL"" , p_funcs )"	96:3:2938:2970	615252	2	True				
ANR	615550	CallExpression	"dprintf_config ( ""TOOL"" , p_funcs )"		615252	0					
ANR	615551	Callee	dprintf_config		615252	0					
ANR	615552	Identifier	dprintf_config		615252	0					
ANR	615553	ArgumentList	"""TOOL"""		615252	1					
ANR	615554	Argument	"""TOOL"""		615252	0					
ANR	615555	PrimaryExpression	"""TOOL"""		615252	0					
ANR	615556	Argument	p_funcs		615252	1					
ANR	615557	Identifier	p_funcs		615252	0					
ANR	615558	ElseStatement	else		615252	0					
ANR	615559	IfStatement	"if ( argv [ i ] [ 0 ] != '-' || ! strcmp ( argv [ i ] , ""-"" ) )"		615252	0					
ANR	615560	Condition	"argv [ i ] [ 0 ] != '-' || ! strcmp ( argv [ i ] , ""-"" )"	97:12:2984:3022	615252	0	True				
ANR	615561	OrExpression	"argv [ i ] [ 0 ] != '-' || ! strcmp ( argv [ i ] , ""-"" )"		615252	0		||			
ANR	615562	EqualityExpression	argv [ i ] [ 0 ] != '-'		615252	0		!=			
ANR	615563	ArrayIndexing	argv [ i ] [ 0 ]		615252	0					
ANR	615564	ArrayIndexing	argv [ i ]		615252	0					
ANR	615565	Identifier	argv		615252	0					
ANR	615566	Identifier	i		615252	1					
ANR	615567	PrimaryExpression	0		615252	1					
ANR	615568	PrimaryExpression	'-'		615252	1					
ANR	615569	UnaryOperationExpression	"! strcmp ( argv [ i ] , ""-"" )"		615252	1					
ANR	615570	UnaryOperator	!		615252	0					
ANR	615571	CallExpression	"strcmp ( argv [ i ] , ""-"" )"		615252	1					
ANR	615572	Callee	strcmp		615252	0					
ANR	615573	Identifier	strcmp		615252	0					
ANR	615574	ArgumentList	argv [ i ]		615252	1					
ANR	615575	Argument	argv [ i ]		615252	0					
ANR	615576	ArrayIndexing	argv [ i ]		615252	0					
ANR	615577	Identifier	argv		615252	0					
ANR	615578	Identifier	i		615252	1					
ANR	615579	Argument	"""-"""		615252	1					
ANR	615580	PrimaryExpression	"""-"""		615252	0					
ANR	615581	CompoundStatement		43:53:1115:1115	615252	1					
ANR	615582	IfStatement	if ( command == - 1 )		615252	0					
ANR	615583	Condition	command == - 1	98:6:3033:3043	615252	0	True				
ANR	615584	EqualityExpression	command == - 1		615252	0		==			
ANR	615585	Identifier	command		615252	0					
ANR	615586	UnaryOperationExpression	- 1		615252	1					
ANR	615587	UnaryOperator	-		615252	0					
ANR	615588	PrimaryExpression	1		615252	1					
ANR	615589	CompoundStatement		44:19:1136:1136	615252	1					
ANR	615590	ExpressionStatement	command = getCollectorCommandNum ( argv [ i ] )	99:4:3052:3093	615252	0	True				
ANR	615591	AssignmentExpression	command = getCollectorCommandNum ( argv [ i ] )		615252	0		=			
ANR	615592	Identifier	command		615252	0					
ANR	615593	CallExpression	getCollectorCommandNum ( argv [ i ] )		615252	1					
ANR	615594	Callee	getCollectorCommandNum		615252	0					
ANR	615595	Identifier	getCollectorCommandNum		615252	0					
ANR	615596	ArgumentList	argv [ i ]		615252	1					
ANR	615597	Argument	argv [ i ]		615252	0					
ANR	615598	ArrayIndexing	argv [ i ]		615252	0					
ANR	615599	Identifier	argv		615252	0					
ANR	615600	Identifier	i		615252	1					
ANR	615601	IfStatement	if ( command == - 1 )		615252	1					
ANR	615602	Condition	command == - 1	100:7:3102:3112	615252	0	True				
ANR	615603	EqualityExpression	command == - 1		615252	0		==			
ANR	615604	Identifier	command		615252	0					
ANR	615605	UnaryOperationExpression	- 1		615252	1					
ANR	615606	UnaryOperator	-		615252	0					
ANR	615607	PrimaryExpression	1		615252	1					
ANR	615608	CompoundStatement		46:20:1205:1205	615252	1					
ANR	615609	ExpressionStatement	"fprintf ( stderr , ""Unknown command name %s\\n\\n"" , argv [ i ] )"	101:5:3122:3175	615252	0	True				
ANR	615610	CallExpression	"fprintf ( stderr , ""Unknown command name %s\\n\\n"" , argv [ i ] )"		615252	0					
ANR	615611	Callee	fprintf		615252	0					
ANR	615612	Identifier	fprintf		615252	0					
ANR	615613	ArgumentList	stderr		615252	1					
ANR	615614	Argument	stderr		615252	0					
ANR	615615	Identifier	stderr		615252	0					
ANR	615616	Argument	"""Unknown command name %s\\n\\n"""		615252	1					
ANR	615617	PrimaryExpression	"""Unknown command name %s\\n\\n"""		615252	0					
ANR	615618	Argument	argv [ i ]		615252	2					
ANR	615619	ArrayIndexing	argv [ i ]		615252	0					
ANR	615620	Identifier	argv		615252	0					
ANR	615621	Identifier	i		615252	1					
ANR	615622	ExpressionStatement	usage ( argv [ 0 ] )	102:5:3182:3196	615252	1	True				
ANR	615623	CallExpression	usage ( argv [ 0 ] )		615252	0					
ANR	615624	Callee	usage		615252	0					
ANR	615625	Identifier	usage		615252	0					
ANR	615626	ArgumentList	argv [ 0 ]		615252	1					
ANR	615627	Argument	argv [ 0 ]		615252	0					
ANR	615628	ArrayIndexing	argv [ 0 ]		615252	0					
ANR	615629	Identifier	argv		615252	0					
ANR	615630	PrimaryExpression	0		615252	1					
ANR	615631	ExpressionStatement	exit ( 1 )	103:5:3203:3210	615252	2	True				
ANR	615632	CallExpression	exit ( 1 )		615252	0					
ANR	615633	Callee	exit		615252	0					
ANR	615634	Identifier	exit		615252	0					
ANR	615635	ArgumentList	1		615252	1					
ANR	615636	Argument	1		615252	0					
ANR	615637	PrimaryExpression	1		615252	0					
ANR	615638	ElseStatement	else		615252	0					
ANR	615639	IfStatement	if ( ! filename )		615252	0					
ANR	615640	Condition	! filename	105:13:3231:3239	615252	0	True				
ANR	615641	UnaryOperationExpression	! filename		615252	0					
ANR	615642	UnaryOperator	!		615252	0					
ANR	615643	Identifier	filename		615252	1					
ANR	615644	CompoundStatement		51:24:1332:1332	615252	1					
ANR	615645	ExpressionStatement	filename = argv [ i ]	106:4:3248:3266	615252	0	True				
ANR	615646	AssignmentExpression	filename = argv [ i ]		615252	0		=			
ANR	615647	Identifier	filename		615252	0					
ANR	615648	ArrayIndexing	argv [ i ]		615252	1					
ANR	615649	Identifier	argv		615252	0					
ANR	615650	Identifier	i		615252	1					
ANR	615651	ElseStatement	else		615252	0					
ANR	615652	CompoundStatement		53:10:1368:1368	615252	0					
ANR	615653	ExpressionStatement	"fprintf ( stderr , ""Extra argument: %s\\n\\n"" , argv [ i ] )"	108:4:3284:3332	615252	0	True				
ANR	615654	CallExpression	"fprintf ( stderr , ""Extra argument: %s\\n\\n"" , argv [ i ] )"		615252	0					
ANR	615655	Callee	fprintf		615252	0					
ANR	615656	Identifier	fprintf		615252	0					
ANR	615657	ArgumentList	stderr		615252	1					
ANR	615658	Argument	stderr		615252	0					
ANR	615659	Identifier	stderr		615252	0					
ANR	615660	Argument	"""Extra argument: %s\\n\\n"""		615252	1					
ANR	615661	PrimaryExpression	"""Extra argument: %s\\n\\n"""		615252	0					
ANR	615662	Argument	argv [ i ]		615252	2					
ANR	615663	ArrayIndexing	argv [ i ]		615252	0					
ANR	615664	Identifier	argv		615252	0					
ANR	615665	Identifier	i		615252	1					
ANR	615666	ExpressionStatement	usage ( argv [ 0 ] )	109:4:3338:3352	615252	1	True				
ANR	615667	CallExpression	usage ( argv [ 0 ] )		615252	0					
ANR	615668	Callee	usage		615252	0					
ANR	615669	Identifier	usage		615252	0					
ANR	615670	ArgumentList	argv [ 0 ]		615252	1					
ANR	615671	Argument	argv [ 0 ]		615252	0					
ANR	615672	ArrayIndexing	argv [ 0 ]		615252	0					
ANR	615673	Identifier	argv		615252	0					
ANR	615674	PrimaryExpression	0		615252	1					
ANR	615675	ExpressionStatement	exit ( 1 )	110:4:3358:3365	615252	2	True				
ANR	615676	CallExpression	exit ( 1 )		615252	0					
ANR	615677	Callee	exit		615252	0					
ANR	615678	Identifier	exit		615252	0					
ANR	615679	ArgumentList	1		615252	1					
ANR	615680	Argument	1		615252	0					
ANR	615681	PrimaryExpression	1		615252	0					
ANR	615682	ElseStatement	else		615252	0					
ANR	615683	CompoundStatement		58:9:1471:1471	615252	0					
ANR	615684	ExpressionStatement	"fprintf ( stderr , ""Unknown argument: %s\\n\\n"" , argv [ i ] )"	113:3:3386:3436	615252	0	True				
ANR	615685	CallExpression	"fprintf ( stderr , ""Unknown argument: %s\\n\\n"" , argv [ i ] )"		615252	0					
ANR	615686	Callee	fprintf		615252	0					
ANR	615687	Identifier	fprintf		615252	0					
ANR	615688	ArgumentList	stderr		615252	1					
ANR	615689	Argument	stderr		615252	0					
ANR	615690	Identifier	stderr		615252	0					
ANR	615691	Argument	"""Unknown argument: %s\\n\\n"""		615252	1					
ANR	615692	PrimaryExpression	"""Unknown argument: %s\\n\\n"""		615252	0					
ANR	615693	Argument	argv [ i ]		615252	2					
ANR	615694	ArrayIndexing	argv [ i ]		615252	0					
ANR	615695	Identifier	argv		615252	0					
ANR	615696	Identifier	i		615252	1					
ANR	615697	ExpressionStatement	usage ( argv [ 0 ] )	114:3:3441:3455	615252	1	True				
ANR	615698	CallExpression	usage ( argv [ 0 ] )		615252	0					
ANR	615699	Callee	usage		615252	0					
ANR	615700	Identifier	usage		615252	0					
ANR	615701	ArgumentList	argv [ 0 ]		615252	1					
ANR	615702	Argument	argv [ 0 ]		615252	0					
ANR	615703	ArrayIndexing	argv [ 0 ]		615252	0					
ANR	615704	Identifier	argv		615252	0					
ANR	615705	PrimaryExpression	0		615252	1					
ANR	615706	ExpressionStatement	exit ( 1 )	115:3:3460:3467	615252	2	True				
ANR	615707	CallExpression	exit ( 1 )		615252	0					
ANR	615708	Callee	exit		615252	0					
ANR	615709	Identifier	exit		615252	0					
ANR	615710	ArgumentList	1		615252	1					
ANR	615711	Argument	1		615252	0					
ANR	615712	PrimaryExpression	1		615252	0					
ANR	615713	IdentifierDeclStatement	FILE * file ;	119:1:3478:3488	615252	12	True				
ANR	615714	IdentifierDecl	* file		615252	0					
ANR	615715	IdentifierDeclType	FILE *		615252	0					
ANR	615716	Identifier	file		615252	1					
ANR	615717	IdentifierDeclStatement	ClassAdList ads ;	120:1:3491:3506	615252	13	True				
ANR	615718	IdentifierDecl	ads		615252	0					
ANR	615719	IdentifierDeclType	ClassAdList		615252	0					
ANR	615720	Identifier	ads		615252	1					
ANR	615721	IdentifierDeclStatement	Daemon * collector ;	121:1:3509:3526	615252	14	True				
ANR	615722	IdentifierDecl	* collector		615252	0					
ANR	615723	IdentifierDeclType	Daemon *		615252	0					
ANR	615724	Identifier	collector		615252	1					
ANR	615725	IdentifierDeclStatement	Sock * sock ;	122:1:3529:3539	615252	15	True				
ANR	615726	IdentifierDecl	* sock		615252	0					
ANR	615727	IdentifierDeclType	Sock *		615252	0					
ANR	615728	Identifier	sock		615252	1					
ANR	615729	SwitchStatement	switch ( command )		615252	16					
ANR	615730	Condition	command	124:9:3551:3557	615252	0	True				
ANR	615731	Identifier	command		615252	0					
ANR	615732	CompoundStatement		70:19:1651:1651	615252	1					
ANR	615733	Label	case UPDATE_STARTD_AD_WITH_ACK :	125:1:3564:3594	615252	0	True				
ANR	615734	Identifier	UPDATE_STARTD_AD_WITH_ACK		615252	0					
ANR	615735	ExpressionStatement	with_ack = true	126:2:3598:3613	615252	1	True				
ANR	615736	AssignmentExpression	with_ack = true		615252	0		=			
ANR	615737	Identifier	with_ack		615252	0					
ANR	615738	Identifier	true		615252	1					
ANR	615739	BreakStatement	break ;	127:2:3617:3622	615252	2	True				
ANR	615740	IfStatement	if ( with_ack )		615252	17					
ANR	615741	Condition	with_ack	130:5:3633:3640	615252	0	True				
ANR	615742	Identifier	with_ack		615252	0					
ANR	615743	CompoundStatement		76:16:1734:1734	615252	1					
ANR	615744	ExpressionStatement	use_tcp = true	131:2:3648:3663	615252	0	True				
ANR	615745	AssignmentExpression	use_tcp = true		615252	0		=			
ANR	615746	Identifier	use_tcp		615252	0					
ANR	615747	Identifier	true		615252	1					
ANR	615748	IfStatement	"if ( ! filename || ! strcmp ( filename , ""-"" ) )"		615252	18					
ANR	615749	Condition	"! filename || ! strcmp ( filename , ""-"" )"	134:4:3673:3706	615252	0	True				
ANR	615750	OrExpression	"! filename || ! strcmp ( filename , ""-"" )"		615252	0		||			
ANR	615751	UnaryOperationExpression	! filename		615252	0					
ANR	615752	UnaryOperator	!		615252	0					
ANR	615753	Identifier	filename		615252	1					
ANR	615754	UnaryOperationExpression	"! strcmp ( filename , ""-"" )"		615252	1					
ANR	615755	UnaryOperator	!		615252	0					
ANR	615756	CallExpression	"strcmp ( filename , ""-"" )"		615252	1					
ANR	615757	Callee	strcmp		615252	0					
ANR	615758	Identifier	strcmp		615252	0					
ANR	615759	ArgumentList	filename		615252	1					
ANR	615760	Argument	filename		615252	0					
ANR	615761	Identifier	filename		615252	0					
ANR	615762	Argument	"""-"""		615252	1					
ANR	615763	PrimaryExpression	"""-"""		615252	0					
ANR	615764	CompoundStatement		80:40:1799:1799	615252	1					
ANR	615765	ExpressionStatement	file = stdin	135:2:3713:3725	615252	0	True				
ANR	615766	AssignmentExpression	file = stdin		615252	0		=			
ANR	615767	Identifier	file		615252	0					
ANR	615768	Identifier	stdin		615252	1					
ANR	615769	ExpressionStatement	"filename = ""(stdin)"""	136:2:3729:3749	615252	1	True				
ANR	615770	AssignmentExpression	"filename = ""(stdin)"""		615252	0		=			
ANR	615771	Identifier	filename		615252	0					
ANR	615772	PrimaryExpression	"""(stdin)"""		615252	1					
ANR	615773	ElseStatement	else		615252	0					
ANR	615774	CompoundStatement		83:8:1849:1849	615252	0					
ANR	615775	ExpressionStatement	"file = safe_fopen_wrapper_follow ( filename , ""r"" )"	138:2:3763:3809	615252	0	True				
ANR	615776	AssignmentExpression	"file = safe_fopen_wrapper_follow ( filename , ""r"" )"		615252	0		=			
ANR	615777	Identifier	file		615252	0					
ANR	615778	CallExpression	"safe_fopen_wrapper_follow ( filename , ""r"" )"		615252	1					
ANR	615779	Callee	safe_fopen_wrapper_follow		615252	0					
ANR	615780	Identifier	safe_fopen_wrapper_follow		615252	0					
ANR	615781	ArgumentList	filename		615252	1					
ANR	615782	Argument	filename		615252	0					
ANR	615783	Identifier	filename		615252	0					
ANR	615784	Argument	"""r"""		615252	1					
ANR	615785	PrimaryExpression	"""r"""		615252	0					
ANR	615786	IfStatement	if ( ! file )		615252	19					
ANR	615787	Condition	! file	140:4:3818:3822	615252	0	True				
ANR	615788	UnaryOperationExpression	! file		615252	0					
ANR	615789	UnaryOperator	!		615252	0					
ANR	615790	Identifier	file		615252	1					
ANR	615791	CompoundStatement		86:11:1915:1915	615252	1					
ANR	615792	ExpressionStatement	"fprintf ( stderr , ""couldn't open %s: %s\\n"" , filename , strerror ( errno ) )"	141:2:3829:3894	615252	0	True				
ANR	615793	CallExpression	"fprintf ( stderr , ""couldn't open %s: %s\\n"" , filename , strerror ( errno ) )"		615252	0					
ANR	615794	Callee	fprintf		615252	0					
ANR	615795	Identifier	fprintf		615252	0					
ANR	615796	ArgumentList	stderr		615252	1					
ANR	615797	Argument	stderr		615252	0					
ANR	615798	Identifier	stderr		615252	0					
ANR	615799	Argument	"""couldn't open %s: %s\\n"""		615252	1					
ANR	615800	PrimaryExpression	"""couldn't open %s: %s\\n"""		615252	0					
ANR	615801	Argument	filename		615252	2					
ANR	615802	Identifier	filename		615252	0					
ANR	615803	Argument	strerror ( errno )		615252	3					
ANR	615804	CallExpression	strerror ( errno )		615252	0					
ANR	615805	Callee	strerror		615252	0					
ANR	615806	Identifier	strerror		615252	0					
ANR	615807	ArgumentList	errno		615252	1					
ANR	615808	Argument	errno		615252	0					
ANR	615809	Identifier	errno		615252	0					
ANR	615810	ReturnStatement	return 1 ;	142:2:3898:3906	615252	1	True				
ANR	615811	PrimaryExpression	1		615252	0					
ANR	615812	WhileStatement	while ( ! feof ( file ) )		615252	20					
ANR	615813	Condition	! feof ( file )	145:7:3919:3929	615252	0	True				
ANR	615814	UnaryOperationExpression	! feof ( file )		615252	0					
ANR	615815	UnaryOperator	!		615252	0					
ANR	615816	CallExpression	feof ( file )		615252	1					
ANR	615817	Callee	feof		615252	0					
ANR	615818	Identifier	feof		615252	0					
ANR	615819	ArgumentList	file		615252	1					
ANR	615820	Argument	file		615252	0					
ANR	615821	Identifier	file		615252	0					
ANR	615822	CompoundStatement		93:2:2055:2079	615252	1					
ANR	615823	IdentifierDeclStatement	"int eof = 0 , error = 0 , empty = 0 ;"	146:2:3936:3961	615252	0	True				
ANR	615824	IdentifierDecl	eof = 0		615252	0					
ANR	615825	IdentifierDeclType	int		615252	0					
ANR	615826	Identifier	eof		615252	1					
ANR	615827	AssignmentExpression	eof = 0		615252	2		=			
ANR	615828	Identifier	eof		615252	0					
ANR	615829	PrimaryExpression	0		615252	1					
ANR	615830	IdentifierDecl	error = 0		615252	1					
ANR	615831	IdentifierDeclType	int		615252	0					
ANR	615832	Identifier	error		615252	1					
ANR	615833	AssignmentExpression	error = 0		615252	2		=			
ANR	615834	Identifier	error		615252	0					
ANR	615835	PrimaryExpression	0		615252	1					
ANR	615836	IdentifierDecl	empty = 0		615252	2					
ANR	615837	IdentifierDeclType	int		615252	0					
ANR	615838	Identifier	empty		615252	1					
ANR	615839	AssignmentExpression	empty = 0		615252	2		=			
ANR	615840	Identifier	empty		615252	0					
ANR	615841	PrimaryExpression	0		615252	1					
ANR	615842	IdentifierDeclStatement	"char const * delim = ""\\n"" ;"	147:2:3965:3989	615252	1	True				
ANR	615843	IdentifierDecl	"* delim = ""\\n"""		615252	0					
ANR	615844	IdentifierDeclType	char const *		615252	0					
ANR	615845	Identifier	delim		615252	1					
ANR	615846	AssignmentExpression	"* delim = ""\\n"""		615252	2		=			
ANR	615847	Identifier	delim		615252	0					
ANR	615848	PrimaryExpression	"""\\n"""		615252	1					
ANR	615849	IfStatement	if ( ! allow_multiple )		615252	2					
ANR	615850	Condition	! allow_multiple	148:6:3997:4011	615252	0	True				
ANR	615851	UnaryOperationExpression	! allow_multiple		615252	0					
ANR	615852	UnaryOperator	!		615252	0					
ANR	615853	Identifier	allow_multiple		615252	1					
ANR	615854	CompoundStatement		94:24:2105:2105	615252	1					
ANR	615855	ExpressionStatement	"delim = ""***"""	149:3:4020:4033	615252	0	True				
ANR	615856	AssignmentExpression	"delim = ""***"""		615252	0		=			
ANR	615857	Identifier	delim		615252	0					
ANR	615858	PrimaryExpression	"""***"""		615252	1					
ANR	615859	Statement	ClassAd	151:2:4041:4047	615252	3	True				
ANR	615860	Statement	*	151:10:4049:4049	615252	4	True				
ANR	615861	Statement	ad	151:11:4050:4051	615252	5	True				
ANR	615862	Statement	=	151:14:4053:4053	615252	6	True				
ANR	615863	Statement	new	151:16:4055:4057	615252	7	True				
ANR	615864	Statement	ClassAd	151:20:4059:4065	615252	8	True				
ANR	615865	Statement	(	151:27:4066:4066	615252	9	True				
ANR	615866	Statement	file	151:28:4067:4070	615252	10	True				
ANR	615867	Statement	","	151:32:4071:4071	615252	11	True				
ANR	615868	Statement	const_cast	151:33:4072:4081	615252	12	True				
ANR	615869	Statement	<	151:43:4082:4082	615252	13	True				
ANR	615870	Statement	char	151:44:4083:4086	615252	14	True				
ANR	615871	Statement	*	151:49:4088:4088	615252	15	True				
ANR	615872	Statement	>	151:50:4089:4089	615252	16	True				
ANR	615873	Statement	(	151:51:4090:4090	615252	17	True				
ANR	615874	Statement	delim	151:52:4091:4095	615252	18	True				
ANR	615875	Statement	)	151:57:4096:4096	615252	19	True				
ANR	615876	Statement	","	151:58:4097:4097	615252	20	True				
ANR	615877	Statement	eof	151:59:4098:4100	615252	21	True				
ANR	615878	Statement	","	151:62:4101:4101	615252	22	True				
ANR	615879	Statement	error	151:63:4102:4106	615252	23	True				
ANR	615880	Statement	","	151:68:4107:4107	615252	24	True				
ANR	615881	Statement	empty	151:69:4108:4112	615252	25	True				
ANR	615882	Statement	)	151:74:4113:4113	615252	26	True				
ANR	615883	ExpressionStatement		151:75:4114:4114	615252	27	True				
ANR	615884	IfStatement	if ( error )		615252	28					
ANR	615885	Condition	error	152:5:4121:4125	615252	0	True				
ANR	615886	Identifier	error		615252	0					
ANR	615887	CompoundStatement		98:12:2218:2218	615252	1					
ANR	615888	ExpressionStatement	"fprintf ( stderr , ""couldn't parse ClassAd in %s\\n"" , filename )"	153:3:4133:4190	615252	0	True				
ANR	615889	CallExpression	"fprintf ( stderr , ""couldn't parse ClassAd in %s\\n"" , filename )"		615252	0					
ANR	615890	Callee	fprintf		615252	0					
ANR	615891	Identifier	fprintf		615252	0					
ANR	615892	ArgumentList	stderr		615252	1					
ANR	615893	Argument	stderr		615252	0					
ANR	615894	Identifier	stderr		615252	0					
ANR	615895	Argument	"""couldn't parse ClassAd in %s\\n"""		615252	1					
ANR	615896	PrimaryExpression	"""couldn't parse ClassAd in %s\\n"""		615252	0					
ANR	615897	Argument	filename		615252	2					
ANR	615898	Identifier	filename		615252	0					
ANR	615899	Statement	delete	154:3:4195:4200	615252	1	True				
ANR	615900	ExpressionStatement	ad	154:10:4202:4204	615252	2	True				
ANR	615901	Identifier	ad		615252	0					
ANR	615902	ReturnStatement	return 1 ;	155:3:4209:4217	615252	3	True				
ANR	615903	PrimaryExpression	1		615252	0					
ANR	615904	IfStatement	if ( empty )		615252	29					
ANR	615905	Condition	empty	157:6:4229:4233	615252	0	True				
ANR	615906	Identifier	empty		615252	0					
ANR	615907	CompoundStatement		103:14:2327:2327	615252	1					
ANR	615908	Statement	delete	158:3:4242:4247	615252	0	True				
ANR	615909	ExpressionStatement	ad	158:10:4249:4251	615252	1	True				
ANR	615910	Identifier	ad		615252	0					
ANR	615911	BreakStatement	break ;	159:3:4256:4261	615252	2	True				
ANR	615912	IfStatement	if ( ! allow_multiple && ads . Length ( ) > 0 )		615252	30					
ANR	615913	Condition	! allow_multiple && ads . Length ( ) > 0	161:6:4273:4307	615252	0	True				
ANR	615914	AndExpression	! allow_multiple && ads . Length ( ) > 0		615252	0		&&			
ANR	615915	UnaryOperationExpression	! allow_multiple		615252	0					
ANR	615916	UnaryOperator	!		615252	0					
ANR	615917	Identifier	allow_multiple		615252	1					
ANR	615918	RelationalExpression	ads . Length ( ) > 0		615252	1		>			
ANR	615919	CallExpression	ads . Length ( )		615252	0					
ANR	615920	Callee	ads . Length		615252	0					
ANR	615921	MemberAccess	ads . Length		615252	0					
ANR	615922	Identifier	ads		615252	0					
ANR	615923	Identifier	Length		615252	1					
ANR	615924	ArgumentList			615252	1					
ANR	615925	PrimaryExpression	0		615252	1					
ANR	615926	CompoundStatement		107:44:2401:2401	615252	1					
ANR	615927	ExpressionStatement	"fprintf ( stderr , ""ERROR: failed to parse '%s' as a ClassAd attribute\\n"" , delim )"	162:3:4316:4392	615252	0	True				
ANR	615928	CallExpression	"fprintf ( stderr , ""ERROR: failed to parse '%s' as a ClassAd attribute\\n"" , delim )"		615252	0					
ANR	615929	Callee	fprintf		615252	0					
ANR	615930	Identifier	fprintf		615252	0					
ANR	615931	ArgumentList	stderr		615252	1					
ANR	615932	Argument	stderr		615252	0					
ANR	615933	Identifier	stderr		615252	0					
ANR	615934	Argument	"""ERROR: failed to parse '%s' as a ClassAd attribute\\n"""		615252	1					
ANR	615935	PrimaryExpression	"""ERROR: failed to parse '%s' as a ClassAd attribute\\n"""		615252	0					
ANR	615936	Argument	delim		615252	2					
ANR	615937	Identifier	delim		615252	0					
ANR	615938	Statement	delete	163:3:4397:4402	615252	1	True				
ANR	615939	ExpressionStatement	ad	163:10:4404:4406	615252	2	True				
ANR	615940	Identifier	ad		615252	0					
ANR	615941	ReturnStatement	return 1 ;	164:3:4411:4419	615252	3	True				
ANR	615942	PrimaryExpression	1		615252	0					
ANR	615943	ExpressionStatement	ads . Insert ( ad )	166:2:4427:4441	615252	31	True				
ANR	615944	CallExpression	ads . Insert ( ad )		615252	0					
ANR	615945	Callee	ads . Insert		615252	0					
ANR	615946	MemberAccess	ads . Insert		615252	0					
ANR	615947	Identifier	ads		615252	0					
ANR	615948	Identifier	Insert		615252	1					
ANR	615949	ArgumentList	ad		615252	1					
ANR	615950	Argument	ad		615252	0					
ANR	615951	Identifier	ad		615252	0					
ANR	615952	IfStatement	if ( ads . Length ( ) == 0 )		615252	21					
ANR	615953	Condition	ads . Length ( ) == 0	169:4:4451:4467	615252	0	True				
ANR	615954	EqualityExpression	ads . Length ( ) == 0		615252	0		==			
ANR	615955	CallExpression	ads . Length ( )		615252	0					
ANR	615956	Callee	ads . Length		615252	0					
ANR	615957	MemberAccess	ads . Length		615252	0					
ANR	615958	Identifier	ads		615252	0					
ANR	615959	Identifier	Length		615252	1					
ANR	615960	ArgumentList			615252	1					
ANR	615961	PrimaryExpression	0		615252	1					
ANR	615962	CompoundStatement		115:23:2560:2560	615252	1					
ANR	615963	ExpressionStatement	"fprintf ( stderr , ""%s is empty\\n"" , filename )"	170:2:4474:4514	615252	0	True				
ANR	615964	CallExpression	"fprintf ( stderr , ""%s is empty\\n"" , filename )"		615252	0					
ANR	615965	Callee	fprintf		615252	0					
ANR	615966	Identifier	fprintf		615252	0					
ANR	615967	ArgumentList	stderr		615252	1					
ANR	615968	Argument	stderr		615252	0					
ANR	615969	Identifier	stderr		615252	0					
ANR	615970	Argument	"""%s is empty\\n"""		615252	1					
ANR	615971	PrimaryExpression	"""%s is empty\\n"""		615252	0					
ANR	615972	Argument	filename		615252	2					
ANR	615973	Identifier	filename		615252	0					
ANR	615974	ReturnStatement	return 1 ;	171:2:4518:4526	615252	1	True				
ANR	615975	PrimaryExpression	1		615252	0					
ANR	615976	IdentifierDeclStatement	CollectorList * collectors ;	174:1:4533:4559	615252	22	True				
ANR	615977	IdentifierDecl	* collectors		615252	0					
ANR	615978	IdentifierDeclType	CollectorList *		615252	0					
ANR	615979	Identifier	collectors		615252	1					
ANR	615980	IfStatement	if ( pool )		615252	23					
ANR	615981	Condition	pool	175:6:4567:4570	615252	0	True				
ANR	615982	Identifier	pool		615252	0					
ANR	615983	CompoundStatement		121:13:2664:2664	615252	1					
ANR	615984	ExpressionStatement	"collector = new Daemon ( DT_COLLECTOR , pool , 0 )"	176:2:4578:4625	615252	0	True				
ANR	615985	AssignmentExpression	"collector = new Daemon ( DT_COLLECTOR , pool , 0 )"		615252	0		=			
ANR	615986	Identifier	collector		615252	0					
ANR	615987	Expression	"DT_COLLECTOR , pool , 0"		615252	1					
ANR	615988	Identifier	DT_COLLECTOR		615252	0					
ANR	615989	Expression	"pool , 0"		615252	1					
ANR	615990	Identifier	pool		615252	0					
ANR	615991	PrimaryExpression	0		615252	1					
ANR	615992	ExpressionStatement	collectors = new CollectorList ( )	177:2:4629:4661	615252	1	True				
ANR	615993	AssignmentExpression	collectors = new CollectorList ( )		615252	0		=			
ANR	615994	Identifier	collectors		615252	0					
ANR	615995	UnaryExpression	new CollectorList ( )		615252	1					
ANR	615996	ExpressionStatement	collectors -> append ( collector )	178:2:4665:4695	615252	2	True				
ANR	615997	CallExpression	collectors -> append ( collector )		615252	0					
ANR	615998	Callee	collectors -> append		615252	0					
ANR	615999	PtrMemberAccess	collectors -> append		615252	0					
ANR	616000	Identifier	collectors		615252	0					
ANR	616001	Identifier	append		615252	1					
ANR	616002	ArgumentList	collector		615252	1					
ANR	616003	Argument	collector		615252	0					
ANR	616004	Identifier	collector		615252	0					
ANR	616005	ElseStatement	else		615252	0					
ANR	616006	CompoundStatement		125:8:2795:2795	615252	0					
ANR	616007	ExpressionStatement	collectors = CollectorList :: create ( )	180:2:4709:4745	615252	0	True				
ANR	616008	AssignmentExpression	collectors = CollectorList :: create ( )		615252	0		=			
ANR	616009	Identifier	collectors		615252	0					
ANR	616010	CallExpression	CollectorList :: create ( )		615252	1					
ANR	616011	Callee	CollectorList :: create		615252	0					
ANR	616012	Identifier	CollectorList :: create		615252	0					
ANR	616013	ArgumentList			615252	1					
ANR	616014	IdentifierDeclStatement	bool had_error = false ;	183:1:4752:4774	615252	24	True				
ANR	616015	IdentifierDecl	had_error = false		615252	0					
ANR	616016	IdentifierDeclType	bool		615252	0					
ANR	616017	Identifier	had_error		615252	1					
ANR	616018	AssignmentExpression	had_error = false		615252	2		=			
ANR	616019	Identifier	false		615252	0					
ANR	616020	Identifier	false		615252	1					
ANR	616021	ExpressionStatement	collectors -> rewind ( )	185:1:4778:4798	615252	25	True				
ANR	616022	CallExpression	collectors -> rewind ( )		615252	0					
ANR	616023	Callee	collectors -> rewind		615252	0					
ANR	616024	PtrMemberAccess	collectors -> rewind		615252	0					
ANR	616025	Identifier	collectors		615252	0					
ANR	616026	Identifier	rewind		615252	1					
ANR	616027	ArgumentList			615252	1					
ANR	616028	WhileStatement	while ( collectors -> next ( collector ) )		615252	26					
ANR	616029	Condition	collectors -> next ( collector )	186:8:4808:4834	615252	0	True				
ANR	616030	CallExpression	collectors -> next ( collector )		615252	0					
ANR	616031	Callee	collectors -> next		615252	0					
ANR	616032	PtrMemberAccess	collectors -> next		615252	0					
ANR	616033	Identifier	collectors		615252	0					
ANR	616034	Identifier	next		615252	1					
ANR	616035	ArgumentList	collector		615252	1					
ANR	616036	Argument	collector		615252	0					
ANR	616037	Identifier	collector		615252	0					
ANR	616038	CompoundStatement		149:2:3308:3329	615252	1					
ANR	616039	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""locating collector %s...\\n"" , collector -> name ( ) )"	188:2:4844:4912	615252	0	True				
ANR	616040	CallExpression	"dprintf ( D_FULLDEBUG , ""locating collector %s...\\n"" , collector -> name ( ) )"		615252	0					
ANR	616041	Callee	dprintf		615252	0					
ANR	616042	Identifier	dprintf		615252	0					
ANR	616043	ArgumentList	D_FULLDEBUG		615252	1					
ANR	616044	Argument	D_FULLDEBUG		615252	0					
ANR	616045	Identifier	D_FULLDEBUG		615252	0					
ANR	616046	Argument	"""locating collector %s...\\n"""		615252	1					
ANR	616047	PrimaryExpression	"""locating collector %s...\\n"""		615252	0					
ANR	616048	Argument	collector -> name ( )		615252	2					
ANR	616049	CallExpression	collector -> name ( )		615252	0					
ANR	616050	Callee	collector -> name		615252	0					
ANR	616051	PtrMemberAccess	collector -> name		615252	0					
ANR	616052	Identifier	collector		615252	0					
ANR	616053	Identifier	name		615252	1					
ANR	616054	ArgumentList			615252	1					
ANR	616055	IfStatement	if ( ! collector -> locate ( ) )		615252	1					
ANR	616056	Condition	! collector -> locate ( )	190:5:4920:4939	615252	0	True				
ANR	616057	UnaryOperationExpression	! collector -> locate ( )		615252	0					
ANR	616058	UnaryOperator	!		615252	0					
ANR	616059	CallExpression	collector -> locate ( )		615252	1					
ANR	616060	Callee	collector -> locate		615252	0					
ANR	616061	PtrMemberAccess	collector -> locate		615252	0					
ANR	616062	Identifier	collector		615252	0					
ANR	616063	Identifier	locate		615252	1					
ANR	616064	ArgumentList			615252	1					
ANR	616065	CompoundStatement		136:27:3032:3032	615252	1					
ANR	616066	ExpressionStatement	"fprintf ( stderr , ""couldn't locate collector: %s\\n"" , collector -> error ( ) )"	191:3:4947:5015	615252	0	True				
ANR	616067	CallExpression	"fprintf ( stderr , ""couldn't locate collector: %s\\n"" , collector -> error ( ) )"		615252	0					
ANR	616068	Callee	fprintf		615252	0					
ANR	616069	Identifier	fprintf		615252	0					
ANR	616070	ArgumentList	stderr		615252	1					
ANR	616071	Argument	stderr		615252	0					
ANR	616072	Identifier	stderr		615252	0					
ANR	616073	Argument	"""couldn't locate collector: %s\\n"""		615252	1					
ANR	616074	PrimaryExpression	"""couldn't locate collector: %s\\n"""		615252	0					
ANR	616075	Argument	collector -> error ( )		615252	2					
ANR	616076	CallExpression	collector -> error ( )		615252	0					
ANR	616077	Callee	collector -> error		615252	0					
ANR	616078	PtrMemberAccess	collector -> error		615252	0					
ANR	616079	Identifier	collector		615252	0					
ANR	616080	Identifier	error		615252	1					
ANR	616081	ArgumentList			615252	1					
ANR	616082	ExpressionStatement	had_error = true	192:3:5020:5036	615252	1	True				
ANR	616083	AssignmentExpression	had_error = true		615252	0		=			
ANR	616084	Identifier	had_error		615252	0					
ANR	616085	Identifier	true		615252	1					
ANR	616086	ContinueStatement	continue ;	193:3:5041:5049	615252	2	True				
ANR	616087	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""collector is %s located at %s\\n"" , collector -> hostname ( ) , collector -> addr ( ) )"	196:2:5058:5157	615252	2	True				
ANR	616088	CallExpression	"dprintf ( D_FULLDEBUG , ""collector is %s located at %s\\n"" , collector -> hostname ( ) , collector -> addr ( ) )"		615252	0					
ANR	616089	Callee	dprintf		615252	0					
ANR	616090	Identifier	dprintf		615252	0					
ANR	616091	ArgumentList	D_FULLDEBUG		615252	1					
ANR	616092	Argument	D_FULLDEBUG		615252	0					
ANR	616093	Identifier	D_FULLDEBUG		615252	0					
ANR	616094	Argument	"""collector is %s located at %s\\n"""		615252	1					
ANR	616095	PrimaryExpression	"""collector is %s located at %s\\n"""		615252	0					
ANR	616096	Argument	collector -> hostname ( )		615252	2					
ANR	616097	CallExpression	collector -> hostname ( )		615252	0					
ANR	616098	Callee	collector -> hostname		615252	0					
ANR	616099	PtrMemberAccess	collector -> hostname		615252	0					
ANR	616100	Identifier	collector		615252	0					
ANR	616101	Identifier	hostname		615252	1					
ANR	616102	ArgumentList			615252	1					
ANR	616103	Argument	collector -> addr ( )		615252	3					
ANR	616104	CallExpression	collector -> addr ( )		615252	0					
ANR	616105	Callee	collector -> addr		615252	0					
ANR	616106	PtrMemberAccess	collector -> addr		615252	0					
ANR	616107	Identifier	collector		615252	0					
ANR	616108	Identifier	addr		615252	1					
ANR	616109	ArgumentList			615252	1					
ANR	616110	ExpressionStatement	sock = NULL	199:2:5162:5173	615252	3	True				
ANR	616111	AssignmentExpression	sock = NULL		615252	0		=			
ANR	616112	Identifier	sock		615252	0					
ANR	616113	Identifier	NULL		615252	1					
ANR	616114	IdentifierDeclStatement	ClassAd * ad ;	201:2:5178:5189	615252	4	True				
ANR	616115	IdentifierDecl	* ad		615252	0					
ANR	616116	IdentifierDeclType	ClassAd *		615252	0					
ANR	616117	Identifier	ad		615252	1					
ANR	616118	IdentifierDeclStatement	int success_count = 0 ;	202:2:5193:5214	615252	5	True				
ANR	616119	IdentifierDecl	success_count = 0		615252	0					
ANR	616120	IdentifierDeclType	int		615252	0					
ANR	616121	Identifier	success_count		615252	1					
ANR	616122	AssignmentExpression	success_count = 0		615252	2		=			
ANR	616123	Identifier	success_count		615252	0					
ANR	616124	PrimaryExpression	0		615252	1					
ANR	616125	IdentifierDeclStatement	int failure_count = 0 ;	203:2:5218:5239	615252	6	True				
ANR	616126	IdentifierDecl	failure_count = 0		615252	0					
ANR	616127	IdentifierDeclType	int		615252	0					
ANR	616128	Identifier	failure_count		615252	1					
ANR	616129	AssignmentExpression	failure_count = 0		615252	2		=			
ANR	616130	Identifier	failure_count		615252	0					
ANR	616131	PrimaryExpression	0		615252	1					
ANR	616132	ExpressionStatement	ads . Rewind ( )	204:2:5243:5255	615252	7	True				
ANR	616133	CallExpression	ads . Rewind ( )		615252	0					
ANR	616134	Callee	ads . Rewind		615252	0					
ANR	616135	MemberAccess	ads . Rewind		615252	0					
ANR	616136	Identifier	ads		615252	0					
ANR	616137	Identifier	Rewind		615252	1					
ANR	616138	ArgumentList			615252	1					
ANR	616139	WhileStatement	while ( ( ad = ads . Next ( ) ) )		615252	8					
ANR	616140	Condition	ad = ads . Next ( )	205:9:5266:5280	615252	0	True				
ANR	616141	AssignmentExpression	ad = ads . Next ( )		615252	0		=			
ANR	616142	Identifier	ad		615252	0					
ANR	616143	CallExpression	ads . Next ( )		615252	1					
ANR	616144	Callee	ads . Next		615252	0					
ANR	616145	MemberAccess	ads . Next		615252	0					
ANR	616146	Identifier	ads		615252	0					
ANR	616147	Identifier	Next		615252	1					
ANR	616148	ArgumentList			615252	1					
ANR	616149	CompoundStatement		175:3:3946:3960	615252	1					
ANR	616150	IfStatement	if ( ! ad -> Lookup ( ATTR_MY_ADDRESS ) )		615252	0					
ANR	616151	Condition	! ad -> Lookup ( ATTR_MY_ADDRESS )	208:7:5343:5372	615252	0	True				
ANR	616152	UnaryOperationExpression	! ad -> Lookup ( ATTR_MY_ADDRESS )		615252	0					
ANR	616153	UnaryOperator	!		615252	0					
ANR	616154	CallExpression	ad -> Lookup ( ATTR_MY_ADDRESS )		615252	1					
ANR	616155	Callee	ad -> Lookup		615252	0					
ANR	616156	PtrMemberAccess	ad -> Lookup		615252	0					
ANR	616157	Identifier	ad		615252	0					
ANR	616158	Identifier	Lookup		615252	1					
ANR	616159	ArgumentList	ATTR_MY_ADDRESS		615252	1					
ANR	616160	Argument	ATTR_MY_ADDRESS		615252	0					
ANR	616161	Identifier	ATTR_MY_ADDRESS		615252	0					
ANR	616162	CompoundStatement		155:4:3472:3484	615252	1					
ANR	616163	IdentifierDeclStatement	MyString tmp ;	209:4:5382:5394	615252	0	True				
ANR	616164	IdentifierDecl	tmp		615252	0					
ANR	616165	IdentifierDeclType	MyString		615252	0					
ANR	616166	Identifier	tmp		615252	1					
ANR	616167	ExpressionStatement	"tmp . sprintf ( ""<%s:0>"" , my_ip_string ( ) )"	210:4:5400:5439	615252	1	True				
ANR	616168	CallExpression	"tmp . sprintf ( ""<%s:0>"" , my_ip_string ( ) )"		615252	0					
ANR	616169	Callee	tmp . sprintf		615252	0					
ANR	616170	MemberAccess	tmp . sprintf		615252	0					
ANR	616171	Identifier	tmp		615252	0					
ANR	616172	Identifier	sprintf		615252	1					
ANR	616173	ArgumentList	"""<%s:0>"""		615252	1					
ANR	616174	Argument	"""<%s:0>"""		615252	0					
ANR	616175	PrimaryExpression	"""<%s:0>"""		615252	0					
ANR	616176	Argument	my_ip_string ( )		615252	1					
ANR	616177	CallExpression	my_ip_string ( )		615252	0					
ANR	616178	Callee	my_ip_string		615252	0					
ANR	616179	Identifier	my_ip_string		615252	0					
ANR	616180	ArgumentList			615252	1					
ANR	616181	ExpressionStatement	"ad -> Assign ( ATTR_MY_ADDRESS , tmp . Value ( ) )"	211:4:5445:5487	615252	2	True				
ANR	616182	CallExpression	"ad -> Assign ( ATTR_MY_ADDRESS , tmp . Value ( ) )"		615252	0					
ANR	616183	Callee	ad -> Assign		615252	0					
ANR	616184	PtrMemberAccess	ad -> Assign		615252	0					
ANR	616185	Identifier	ad		615252	0					
ANR	616186	Identifier	Assign		615252	1					
ANR	616187	ArgumentList	ATTR_MY_ADDRESS		615252	1					
ANR	616188	Argument	ATTR_MY_ADDRESS		615252	0					
ANR	616189	Identifier	ATTR_MY_ADDRESS		615252	0					
ANR	616190	Argument	tmp . Value ( )		615252	1					
ANR	616191	CallExpression	tmp . Value ( )		615252	0					
ANR	616192	Callee	tmp . Value		615252	0					
ANR	616193	MemberAccess	tmp . Value		615252	0					
ANR	616194	Identifier	tmp		615252	0					
ANR	616195	Identifier	Value		615252	1					
ANR	616196	ArgumentList			615252	1					
ANR	616197	IfStatement	if ( use_tcp )		615252	1					
ANR	616198	Condition	use_tcp	214:8:5503:5509	615252	0	True				
ANR	616199	Identifier	use_tcp		615252	0					
ANR	616200	CompoundStatement		160:18:3603:3603	615252	1					
ANR	616201	IfStatement	if ( ! sock )		615252	0					
ANR	616202	Condition	! sock	215:8:5523:5527	615252	0	True				
ANR	616203	UnaryOperationExpression	! sock		615252	0					
ANR	616204	UnaryOperator	!		615252	0					
ANR	616205	Identifier	sock		615252	1					
ANR	616206	CompoundStatement		161:16:3621:3621	615252	1					
ANR	616207	ExpressionStatement	"sock = collector -> startCommand ( command , Stream :: reli_sock , 20 )"	216:5:5538:5598	615252	0	True				
ANR	616208	AssignmentExpression	"sock = collector -> startCommand ( command , Stream :: reli_sock , 20 )"		615252	0		=			
ANR	616209	Identifier	sock		615252	0					
ANR	616210	CallExpression	"collector -> startCommand ( command , Stream :: reli_sock , 20 )"		615252	1					
ANR	616211	Callee	collector -> startCommand		615252	0					
ANR	616212	PtrMemberAccess	collector -> startCommand		615252	0					
ANR	616213	Identifier	collector		615252	0					
ANR	616214	Identifier	startCommand		615252	1					
ANR	616215	ArgumentList	command		615252	1					
ANR	616216	Argument	command		615252	0					
ANR	616217	Identifier	command		615252	0					
ANR	616218	Argument	Stream :: reli_sock		615252	1					
ANR	616219	Identifier	Stream :: reli_sock		615252	0					
ANR	616220	Argument	20		615252	2					
ANR	616221	PrimaryExpression	20		615252	0					
ANR	616222	ElseStatement	else		615252	0					
ANR	616223	CompoundStatement		164:9:3705:3705	615252	0					
ANR	616224	ExpressionStatement	sock -> encode ( )	220:5:5656:5670	615252	0	True				
ANR	616225	CallExpression	sock -> encode ( )		615252	0					
ANR	616226	Callee	sock -> encode		615252	0					
ANR	616227	PtrMemberAccess	sock -> encode		615252	0					
ANR	616228	Identifier	sock		615252	0					
ANR	616229	Identifier	encode		615252	1					
ANR	616230	ArgumentList			615252	1					
ANR	616231	ExpressionStatement	sock -> put ( command )	221:5:5677:5695	615252	1	True				
ANR	616232	CallExpression	sock -> put ( command )		615252	0					
ANR	616233	Callee	sock -> put		615252	0					
ANR	616234	PtrMemberAccess	sock -> put		615252	0					
ANR	616235	Identifier	sock		615252	0					
ANR	616236	Identifier	put		615252	1					
ANR	616237	ArgumentList	command		615252	1					
ANR	616238	Argument	command		615252	0					
ANR	616239	Identifier	command		615252	0					
ANR	616240	ElseStatement	else		615252	0					
ANR	616241	CompoundStatement		169:10:3803:3803	615252	0					
ANR	616242	Statement	delete	225:4:5768:5773	615252	0	True				
ANR	616243	ExpressionStatement	sock	225:11:5775:5779	615252	1	True				
ANR	616244	Identifier	sock		615252	0					
ANR	616245	ExpressionStatement	"sock = collector -> startCommand ( command , Stream :: safe_sock , 20 )"	226:4:5785:5845	615252	2	True				
ANR	616246	AssignmentExpression	"sock = collector -> startCommand ( command , Stream :: safe_sock , 20 )"		615252	0		=			
ANR	616247	Identifier	sock		615252	0					
ANR	616248	CallExpression	"collector -> startCommand ( command , Stream :: safe_sock , 20 )"		615252	1					
ANR	616249	Callee	collector -> startCommand		615252	0					
ANR	616250	PtrMemberAccess	collector -> startCommand		615252	0					
ANR	616251	Identifier	collector		615252	0					
ANR	616252	Identifier	startCommand		615252	1					
ANR	616253	ArgumentList	command		615252	1					
ANR	616254	Argument	command		615252	0					
ANR	616255	Identifier	command		615252	0					
ANR	616256	Argument	Stream :: safe_sock		615252	1					
ANR	616257	Identifier	Stream :: safe_sock		615252	0					
ANR	616258	Argument	20		615252	2					
ANR	616259	PrimaryExpression	20		615252	0					
ANR	616260	IdentifierDeclStatement	int result = 0 ;	229:3:5856:5870	615252	2	True				
ANR	616261	IdentifierDecl	result = 0		615252	0					
ANR	616262	IdentifierDeclType	int		615252	0					
ANR	616263	Identifier	result		615252	1					
ANR	616264	AssignmentExpression	result = 0		615252	2		=			
ANR	616265	Identifier	result		615252	0					
ANR	616266	PrimaryExpression	0		615252	1					
ANR	616267	IfStatement	if ( sock )		615252	3					
ANR	616268	Condition	sock	230:8:5880:5883	615252	0	True				
ANR	616269	Identifier	sock		615252	0					
ANR	616270	CompoundStatement		176:15:3977:3977	615252	1					
ANR	616271	ExpressionStatement	result += ad -> put ( * sock )	231:4:5893:5919	615252	0	True				
ANR	616272	AssignmentExpression	result += ad -> put ( * sock )		615252	0		+=			
ANR	616273	Identifier	result		615252	0					
ANR	616274	CallExpression	ad -> put ( * sock )		615252	1					
ANR	616275	Callee	ad -> put		615252	0					
ANR	616276	PtrMemberAccess	ad -> put		615252	0					
ANR	616277	Identifier	ad		615252	0					
ANR	616278	Identifier	put		615252	1					
ANR	616279	ArgumentList	* sock		615252	1					
ANR	616280	Argument	* sock		615252	0					
ANR	616281	UnaryOperationExpression	* sock		615252	0					
ANR	616282	UnaryOperator	*		615252	0					
ANR	616283	Identifier	sock		615252	1					
ANR	616284	ExpressionStatement	result += sock -> end_of_message ( )	232:4:5925:5957	615252	1	True				
ANR	616285	AssignmentExpression	result += sock -> end_of_message ( )		615252	0		+=			
ANR	616286	Identifier	result		615252	0					
ANR	616287	CallExpression	sock -> end_of_message ( )		615252	1					
ANR	616288	Callee	sock -> end_of_message		615252	0					
ANR	616289	PtrMemberAccess	sock -> end_of_message		615252	0					
ANR	616290	Identifier	sock		615252	0					
ANR	616291	Identifier	end_of_message		615252	1					
ANR	616292	ArgumentList			615252	1					
ANR	616293	IfStatement	if ( result != 2 )		615252	4					
ANR	616294	Condition	result != 2	234:8:5972:5982	615252	0	True				
ANR	616295	EqualityExpression	result != 2		615252	0		!=			
ANR	616296	Identifier	result		615252	0					
ANR	616297	PrimaryExpression	2		615252	1					
ANR	616298	CompoundStatement		180:22:4076:4076	615252	1					
ANR	616299	ExpressionStatement	"fprintf ( stderr , ""failed to send classad to %s\\n"" , collector -> addr ( ) )"	235:4:5992:6058	615252	0	True				
ANR	616300	CallExpression	"fprintf ( stderr , ""failed to send classad to %s\\n"" , collector -> addr ( ) )"		615252	0					
ANR	616301	Callee	fprintf		615252	0					
ANR	616302	Identifier	fprintf		615252	0					
ANR	616303	ArgumentList	stderr		615252	1					
ANR	616304	Argument	stderr		615252	0					
ANR	616305	Identifier	stderr		615252	0					
ANR	616306	Argument	"""failed to send classad to %s\\n"""		615252	1					
ANR	616307	PrimaryExpression	"""failed to send classad to %s\\n"""		615252	0					
ANR	616308	Argument	collector -> addr ( )		615252	2					
ANR	616309	CallExpression	collector -> addr ( )		615252	0					
ANR	616310	Callee	collector -> addr		615252	0					
ANR	616311	PtrMemberAccess	collector -> addr		615252	0					
ANR	616312	Identifier	collector		615252	0					
ANR	616313	Identifier	addr		615252	1					
ANR	616314	ArgumentList			615252	1					
ANR	616315	ExpressionStatement	had_error = true	236:4:6064:6080	615252	1	True				
ANR	616316	AssignmentExpression	had_error = true		615252	0		=			
ANR	616317	Identifier	had_error		615252	0					
ANR	616318	Identifier	true		615252	1					
ANR	616319	ExpressionStatement	failure_count ++	237:4:6086:6101	615252	2	True				
ANR	616320	PostIncDecOperationExpression	failure_count ++		615252	0					
ANR	616321	Identifier	failure_count		615252	0					
ANR	616322	IncDec	++		615252	1					
ANR	616323	Statement	delete	238:4:6107:6112	615252	3	True				
ANR	616324	ExpressionStatement	sock	238:11:6114:6118	615252	4	True				
ANR	616325	Identifier	sock		615252	0					
ANR	616326	ExpressionStatement	sock = NULL	239:4:6124:6135	615252	5	True				
ANR	616327	AssignmentExpression	sock = NULL		615252	0		=			
ANR	616328	Identifier	sock		615252	0					
ANR	616329	Identifier	NULL		615252	1					
ANR	616330	ContinueStatement	continue ;	240:4:6141:6149	615252	6	True				
ANR	616331	IfStatement	if ( with_ack )		615252	5					
ANR	616332	Condition	with_ack	243:7:6164:6171	615252	0	True				
ANR	616333	Identifier	with_ack		615252	0					
ANR	616334	CompoundStatement		191:4:4291:4301	615252	1					
ANR	616335	ExpressionStatement	sock -> decode ( )	244:4:6181:6195	615252	0	True				
ANR	616336	CallExpression	sock -> decode ( )		615252	0					
ANR	616337	Callee	sock -> decode		615252	0					
ANR	616338	PtrMemberAccess	sock -> decode		615252	0					
ANR	616339	Identifier	sock		615252	0					
ANR	616340	Identifier	decode		615252	1					
ANR	616341	ArgumentList			615252	1					
ANR	616342	IdentifierDeclStatement	int ok = 0 ;	245:4:6201:6211	615252	1	True				
ANR	616343	IdentifierDecl	ok = 0		615252	0					
ANR	616344	IdentifierDeclType	int		615252	0					
ANR	616345	Identifier	ok		615252	1					
ANR	616346	AssignmentExpression	ok = 0		615252	2		=			
ANR	616347	Identifier	ok		615252	0					
ANR	616348	PrimaryExpression	0		615252	1					
ANR	616349	IfStatement	if ( ! sock -> get ( ok ) || ! sock -> end_of_message ( ) )		615252	2					
ANR	616350	Condition	! sock -> get ( ok ) || ! sock -> end_of_message ( )	246:8:6221:6261	615252	0	True				
ANR	616351	OrExpression	! sock -> get ( ok ) || ! sock -> end_of_message ( )		615252	0		||			
ANR	616352	UnaryOperationExpression	! sock -> get ( ok )		615252	0					
ANR	616353	UnaryOperator	!		615252	0					
ANR	616354	CallExpression	sock -> get ( ok )		615252	1					
ANR	616355	Callee	sock -> get		615252	0					
ANR	616356	PtrMemberAccess	sock -> get		615252	0					
ANR	616357	Identifier	sock		615252	0					
ANR	616358	Identifier	get		615252	1					
ANR	616359	ArgumentList	ok		615252	1					
ANR	616360	Argument	ok		615252	0					
ANR	616361	Identifier	ok		615252	0					
ANR	616362	UnaryOperationExpression	! sock -> end_of_message ( )		615252	1					
ANR	616363	UnaryOperator	!		615252	0					
ANR	616364	CallExpression	sock -> end_of_message ( )		615252	1					
ANR	616365	Callee	sock -> end_of_message		615252	0					
ANR	616366	PtrMemberAccess	sock -> end_of_message		615252	0					
ANR	616367	Identifier	sock		615252	0					
ANR	616368	Identifier	end_of_message		615252	1					
ANR	616369	ArgumentList			615252	1					
ANR	616370	CompoundStatement		192:52:4355:4355	615252	1					
ANR	616371	ExpressionStatement	"fprintf ( stderr , ""failed to get ack from %s\\n"" , collector -> addr ( ) )"	247:5:6272:6335	615252	0	True				
ANR	616372	CallExpression	"fprintf ( stderr , ""failed to get ack from %s\\n"" , collector -> addr ( ) )"		615252	0					
ANR	616373	Callee	fprintf		615252	0					
ANR	616374	Identifier	fprintf		615252	0					
ANR	616375	ArgumentList	stderr		615252	1					
ANR	616376	Argument	stderr		615252	0					
ANR	616377	Identifier	stderr		615252	0					
ANR	616378	Argument	"""failed to get ack from %s\\n"""		615252	1					
ANR	616379	PrimaryExpression	"""failed to get ack from %s\\n"""		615252	0					
ANR	616380	Argument	collector -> addr ( )		615252	2					
ANR	616381	CallExpression	collector -> addr ( )		615252	0					
ANR	616382	Callee	collector -> addr		615252	0					
ANR	616383	PtrMemberAccess	collector -> addr		615252	0					
ANR	616384	Identifier	collector		615252	0					
ANR	616385	Identifier	addr		615252	1					
ANR	616386	ArgumentList			615252	1					
ANR	616387	ExpressionStatement	had_error = true	248:5:6342:6358	615252	1	True				
ANR	616388	AssignmentExpression	had_error = true		615252	0		=			
ANR	616389	Identifier	had_error		615252	0					
ANR	616390	Identifier	true		615252	1					
ANR	616391	ExpressionStatement	failure_count ++	249:5:6365:6380	615252	2	True				
ANR	616392	PostIncDecOperationExpression	failure_count ++		615252	0					
ANR	616393	Identifier	failure_count		615252	0					
ANR	616394	IncDec	++		615252	1					
ANR	616395	Statement	delete	250:5:6387:6392	615252	3	True				
ANR	616396	ExpressionStatement	sock	250:12:6394:6398	615252	4	True				
ANR	616397	Identifier	sock		615252	0					
ANR	616398	ExpressionStatement	sock = NULL	251:5:6405:6416	615252	5	True				
ANR	616399	AssignmentExpression	sock = NULL		615252	0		=			
ANR	616400	Identifier	sock		615252	0					
ANR	616401	Identifier	NULL		615252	1					
ANR	616402	ContinueStatement	continue ;	252:5:6423:6431	615252	6	True				
ANR	616403	Statement	delete	257:4:6534:6539	615252	3	True				
ANR	616404	ExpressionStatement	sock	257:11:6541:6545	615252	4	True				
ANR	616405	Identifier	sock		615252	0					
ANR	616406	ExpressionStatement	sock = NULL	258:4:6551:6562	615252	5	True				
ANR	616407	AssignmentExpression	sock = NULL		615252	0		=			
ANR	616408	Identifier	sock		615252	0					
ANR	616409	Identifier	NULL		615252	1					
ANR	616410	ExpressionStatement	success_count ++	261:3:6573:6588	615252	6	True				
ANR	616411	PostIncDecOperationExpression	success_count ++		615252	0					
ANR	616412	Identifier	success_count		615252	0					
ANR	616413	IncDec	++		615252	1					
ANR	616414	IfStatement	if ( sock )		615252	9					
ANR	616415	Condition	sock	263:6:6600:6603	615252	0	True				
ANR	616416	Identifier	sock		615252	0					
ANR	616417	CompoundStatement		210:3:4702:4757	615252	1					
ANR	616418	IdentifierDeclStatement	CondorVersionInfo const * ver = sock -> get_peer_version ( ) ;	264:3:6612:6667	615252	0	True				
ANR	616419	IdentifierDecl	* ver = sock -> get_peer_version ( )		615252	0					
ANR	616420	IdentifierDeclType	CondorVersionInfo const *		615252	0					
ANR	616421	Identifier	ver		615252	1					
ANR	616422	AssignmentExpression	* ver = sock -> get_peer_version ( )		615252	2		=			
ANR	616423	Identifier	ver		615252	0					
ANR	616424	CallExpression	sock -> get_peer_version ( )		615252	1					
ANR	616425	Callee	sock -> get_peer_version		615252	0					
ANR	616426	PtrMemberAccess	sock -> get_peer_version		615252	0					
ANR	616427	Identifier	sock		615252	0					
ANR	616428	Identifier	get_peer_version		615252	1					
ANR	616429	ArgumentList			615252	1					
ANR	616430	IfStatement	"if ( ! ver || ver -> built_since_version ( 7 , 7 , 3 ) )"		615252	1					
ANR	616431	Condition	"! ver || ver -> built_since_version ( 7 , 7 , 3 )"	265:7:6676:6714	615252	0	True				
ANR	616432	OrExpression	"! ver || ver -> built_since_version ( 7 , 7 , 3 )"		615252	0		||			
ANR	616433	UnaryOperationExpression	! ver		615252	0					
ANR	616434	UnaryOperator	!		615252	0					
ANR	616435	Identifier	ver		615252	1					
ANR	616436	CallExpression	"ver -> built_since_version ( 7 , 7 , 3 )"		615252	1					
ANR	616437	Callee	ver -> built_since_version		615252	0					
ANR	616438	PtrMemberAccess	ver -> built_since_version		615252	0					
ANR	616439	Identifier	ver		615252	0					
ANR	616440	Identifier	built_since_version		615252	1					
ANR	616441	ArgumentList	7		615252	1					
ANR	616442	Argument	7		615252	0					
ANR	616443	PrimaryExpression	7		615252	0					
ANR	616444	Argument	7		615252	1					
ANR	616445	PrimaryExpression	7		615252	0					
ANR	616446	Argument	3		615252	2					
ANR	616447	PrimaryExpression	3		615252	0					
ANR	616448	CompoundStatement		211:49:4808:4808	615252	1					
ANR	616449	ExpressionStatement	sock -> encode ( )	267:4:6783:6797	615252	0	True				
ANR	616450	CallExpression	sock -> encode ( )		615252	0					
ANR	616451	Callee	sock -> encode		615252	0					
ANR	616452	PtrMemberAccess	sock -> encode		615252	0					
ANR	616453	Identifier	sock		615252	0					
ANR	616454	Identifier	encode		615252	1					
ANR	616455	ArgumentList			615252	1					
ANR	616456	ExpressionStatement	command = DC_NOP	268:4:6803:6819	615252	1	True				
ANR	616457	AssignmentExpression	command = DC_NOP		615252	0		=			
ANR	616458	Identifier	command		615252	0					
ANR	616459	Identifier	DC_NOP		615252	1					
ANR	616460	ExpressionStatement	sock -> put ( command )	269:4:6825:6843	615252	2	True				
ANR	616461	CallExpression	sock -> put ( command )		615252	0					
ANR	616462	Callee	sock -> put		615252	0					
ANR	616463	PtrMemberAccess	sock -> put		615252	0					
ANR	616464	Identifier	sock		615252	0					
ANR	616465	Identifier	put		615252	1					
ANR	616466	ArgumentList	command		615252	1					
ANR	616467	Argument	command		615252	0					
ANR	616468	Identifier	command		615252	0					
ANR	616469	ExpressionStatement	sock -> end_of_message ( )	270:4:6849:6871	615252	3	True				
ANR	616470	CallExpression	sock -> end_of_message ( )		615252	0					
ANR	616471	Callee	sock -> end_of_message		615252	0					
ANR	616472	PtrMemberAccess	sock -> end_of_message		615252	0					
ANR	616473	Identifier	sock		615252	0					
ANR	616474	Identifier	end_of_message		615252	1					
ANR	616475	ArgumentList			615252	1					
ANR	616476	Statement	delete	273:3:6882:6887	615252	2	True				
ANR	616477	ExpressionStatement	sock	273:10:6889:6893	615252	3	True				
ANR	616478	Identifier	sock		615252	0					
ANR	616479	ExpressionStatement	sock = NULL	274:3:6898:6909	615252	4	True				
ANR	616480	AssignmentExpression	sock = NULL		615252	0		=			
ANR	616481	Identifier	sock		615252	0					
ANR	616482	Identifier	NULL		615252	1					
ANR	616483	ExpressionStatement	"printf ( ""Sent %d of %d ad%s to %s.\\n"" , success_count , success_count + failure_count , success_count + failure_count == 1 ? """" : ""s"" , collector -> name ( ) )"	277:2:6918:7089	615252	10	True				
ANR	616484	CallExpression	"printf ( ""Sent %d of %d ad%s to %s.\\n"" , success_count , success_count + failure_count , success_count + failure_count == 1 ? """" : ""s"" , collector -> name ( ) )"		615252	0					
ANR	616485	Callee	printf		615252	0					
ANR	616486	Identifier	printf		615252	0					
ANR	616487	ArgumentList	"""Sent %d of %d ad%s to %s.\\n"""		615252	1					
ANR	616488	Argument	"""Sent %d of %d ad%s to %s.\\n"""		615252	0					
ANR	616489	PrimaryExpression	"""Sent %d of %d ad%s to %s.\\n"""		615252	0					
ANR	616490	Argument	success_count		615252	1					
ANR	616491	Identifier	success_count		615252	0					
ANR	616492	Argument	success_count + failure_count		615252	2					
ANR	616493	AdditiveExpression	success_count + failure_count		615252	0		+			
ANR	616494	Identifier	success_count		615252	0					
ANR	616495	Identifier	failure_count		615252	1					
ANR	616496	Argument	"success_count + failure_count == 1 ? """" : ""s"""		615252	3					
ANR	616497	ConditionalExpression	"success_count + failure_count == 1 ? """" : ""s"""		615252	0					
ANR	616498	Condition	success_count + failure_count == 1		615252	0					
ANR	616499	EqualityExpression	success_count + failure_count == 1		615252	0		==			
ANR	616500	AdditiveExpression	success_count + failure_count		615252	0		+			
ANR	616501	Identifier	success_count		615252	0					
ANR	616502	Identifier	failure_count		615252	1					
ANR	616503	PrimaryExpression	1		615252	1					
ANR	616504	PrimaryExpression	""""""		615252	1					
ANR	616505	PrimaryExpression	"""s"""		615252	2					
ANR	616506	Argument	collector -> name ( )		615252	4					
ANR	616507	CallExpression	collector -> name ( )		615252	0					
ANR	616508	Callee	collector -> name		615252	0					
ANR	616509	PtrMemberAccess	collector -> name		615252	0					
ANR	616510	Identifier	collector		615252	0					
ANR	616511	Identifier	name		615252	1					
ANR	616512	ArgumentList			615252	1					
ANR	616513	Statement	delete	284:1:7096:7101	615252	27	True				
ANR	616514	ExpressionStatement	collectors	284:8:7103:7113	615252	28	True				
ANR	616515	Identifier	collectors		615252	0					
ANR	616516	ReturnStatement	return ( had_error ) ? 1 : 0 ;	286:1:7117:7139	615252	29	True				
ANR	616517	ConditionalExpression	( had_error ) ? 1 : 0		615252	0					
ANR	616518	Condition	had_error		615252	0					
ANR	616519	Identifier	had_error		615252	0					
ANR	616520	PrimaryExpression	1		615252	1					
ANR	616521	PrimaryExpression	0		615252	2					
ANR	616522	ReturnType	int		615252	1					
ANR	616523	Identifier	main		615252	2					
ANR	616524	ParameterList	"int argc , char * argv [ ]"		615252	3					
ANR	616525	Parameter	int argc	54:10:1884:1891	615252	0	True				
ANR	616526	ParameterType	int		615252	0					
ANR	616527	Identifier	argc		615252	1					
ANR	616528	Parameter	char * argv [ ]	54:20:1894:1905	615252	1	True				
ANR	616529	ParameterType	char * [ ]		615252	0					
ANR	616530	Identifier	argv		615252	1					
ANR	616531	CFGEntryNode	ENTRY		615252		True				
ANR	616532	CFGExitNode	EXIT		615252		True				
ANR	616533	Symbol	my_ip_string		615252						
ANR	616534	Symbol	stdin		615252						
ANR	616535	Symbol	Stream :: safe_sock		615252						
ANR	616536	Symbol	ad -> Lookup		615252						
ANR	616537	Symbol	tmp . Value		615252						
ANR	616538	Symbol	DC_NOP		615252						
ANR	616539	Symbol	p_funcs		615252						
ANR	616540	Symbol	* argv		615252						
ANR	616541	Symbol	empty		615252						
ANR	616542	Symbol	strncmp		615252						
ANR	616543	Symbol	strlen		615252						
ANR	616544	Symbol	sock -> get_peer_version		615252						
ANR	616545	Symbol	myDistro		615252						
ANR	616546	Symbol	tmp		615252						
ANR	616547	Symbol	* * argv		615252						
ANR	616548	Symbol	Stream :: reli_sock		615252						
ANR	616549	Symbol	use_tcp		615252						
ANR	616550	Symbol	CollectorList :: create		615252						
ANR	616551	Symbol	strcmp		615252						
ANR	616552	Symbol	* * i		615252						
ANR	616553	Symbol	errno		615252						
ANR	616554	Symbol	ver		615252						
ANR	616555	Symbol	NULL		615252						
ANR	616556	Symbol	ad		615252						
ANR	616557	Symbol	ver -> built_since_version		615252						
ANR	616558	Symbol	get_param_functions		615252						
ANR	616559	Symbol	pool		615252						
ANR	616560	Symbol	DT_COLLECTOR		615252						
ANR	616561	Symbol	allow_multiple		615252						
ANR	616562	Symbol	D_FULLDEBUG		615252						
ANR	616563	Symbol	stderr		615252						
ANR	616564	Symbol	collector -> addr		615252						
ANR	616565	Symbol	strerror		615252						
ANR	616566	Symbol	ads		615252						
ANR	616567	Symbol	filename		615252						
ANR	616568	Symbol	collectors		615252						
ANR	616569	Symbol	true		615252						
ANR	616570	Symbol	had_error		615252						
ANR	616571	Symbol	collectors -> next		615252						
ANR	616572	Symbol	sock -> end_of_message		615252						
ANR	616573	Symbol	collector -> startCommand		615252						
ANR	616574	Symbol	ads . Length		615252						
ANR	616575	Symbol	collector -> locate		615252						
ANR	616576	Symbol	* ad		615252						
ANR	616577	Symbol	error		615252						
ANR	616578	Symbol	argv		615252						
ANR	616579	Symbol	* collectors		615252						
ANR	616580	Symbol	* ver		615252						
ANR	616581	Symbol	collector		615252						
ANR	616582	Symbol	collector -> name		615252						
ANR	616583	Symbol	result		615252						
ANR	616584	Symbol	ads . Next		615252						
ANR	616585	Symbol	collector -> hostname		615252						
ANR	616586	Symbol	ad -> put		615252						
ANR	616587	Symbol	file		615252						
ANR	616588	Symbol	getCollectorCommandNum		615252						
ANR	616589	Symbol	ATTR_MY_ADDRESS		615252						
ANR	616590	Symbol	ok		615252						
ANR	616591	Symbol	safe_fopen_wrapper_follow		615252						
ANR	616592	Symbol	* sock		615252						
ANR	616593	Symbol	delim		615252						
ANR	616594	Symbol	argc		615252						
ANR	616595	Symbol	* collector		615252						
ANR	616596	Symbol	with_ack		615252						
ANR	616597	Symbol	Termlog		615252						
ANR	616598	Symbol	false		615252						
ANR	616599	Symbol	success_count		615252						
ANR	616600	Symbol	i		615252						
ANR	616601	Symbol	failure_count		615252						
ANR	616602	Symbol	command		615252						
ANR	616603	Symbol	sock		615252						
ANR	616604	Symbol	* i		615252						
ANR	616605	Symbol	collector -> error		615252						
ANR	616606	Symbol	sock -> get		615252						
ANR	616607	Symbol	feof		615252						
ANR	616608	Symbol	eof		615252						
