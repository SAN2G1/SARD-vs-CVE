command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	146309	File	data/converged/CVE-2011-4930_htcondor/AviaryUtils.cpp								
ANR	146310	DeclStmt									
ANR	146311	Decl							const char	const char * [ ]	RESERVED
ANR	146312	Function	aviary :: util :: getPoolName	38:0:1075:1335							
ANR	146313	FunctionDef	aviary :: util :: getPoolName ()		146312	0					
ANR	146314	CompoundStatement		40:0:1110:1335	146312	0					
ANR	146315	IdentifierDeclStatement	string poolName ;	41:4:1116:1131	146312	0	True				
ANR	146316	IdentifierDecl	poolName		146312	0					
ANR	146317	IdentifierDeclType	string		146312	0					
ANR	146318	Identifier	poolName		146312	1					
ANR	146319	IdentifierDeclStatement	char * tmp = NULL ;	42:4:1137:1153	146312	1	True				
ANR	146320	IdentifierDecl	* tmp = NULL		146312	0					
ANR	146321	IdentifierDeclType	char *		146312	0					
ANR	146322	Identifier	tmp		146312	1					
ANR	146323	AssignmentExpression	* tmp = NULL		146312	2		=			
ANR	146324	Identifier	NULL		146312	0					
ANR	146325	Identifier	NULL		146312	1					
ANR	146326	ExpressionStatement	"tmp = param ( ""COLLECTOR_HOST"" )"	44:4:1160:1189	146312	2	True				
ANR	146327	AssignmentExpression	"tmp = param ( ""COLLECTOR_HOST"" )"		146312	0		=			
ANR	146328	Identifier	tmp		146312	0					
ANR	146329	CallExpression	"param ( ""COLLECTOR_HOST"" )"		146312	1					
ANR	146330	Callee	param		146312	0					
ANR	146331	Identifier	param		146312	0					
ANR	146332	ArgumentList	"""COLLECTOR_HOST"""		146312	1					
ANR	146333	Argument	"""COLLECTOR_HOST"""		146312	0					
ANR	146334	PrimaryExpression	"""COLLECTOR_HOST"""		146312	0					
ANR	146335	IfStatement	if ( ! tmp )		146312	3					
ANR	146336	Condition	! tmp	45:8:1199:1202	146312	0	True				
ANR	146337	UnaryOperationExpression	! tmp		146312	0					
ANR	146338	UnaryOperator	!		146312	0					
ANR	146339	Identifier	tmp		146312	1					
ANR	146340	CompoundStatement		6:14:94:94	146312	1					
ANR	146341	ExpressionStatement	"tmp = strdup ( ""NO COLLECTOR_HOST, NOT GOOD"" )"	46:8:1215:1258	146312	0	True				
ANR	146342	AssignmentExpression	"tmp = strdup ( ""NO COLLECTOR_HOST, NOT GOOD"" )"		146312	0		=			
ANR	146343	Identifier	tmp		146312	0					
ANR	146344	CallExpression	"strdup ( ""NO COLLECTOR_HOST, NOT GOOD"" )"		146312	1					
ANR	146345	Callee	strdup		146312	0					
ANR	146346	Identifier	strdup		146312	0					
ANR	146347	ArgumentList	"""NO COLLECTOR_HOST, NOT GOOD"""		146312	1					
ANR	146348	Argument	"""NO COLLECTOR_HOST, NOT GOOD"""		146312	0					
ANR	146349	PrimaryExpression	"""NO COLLECTOR_HOST, NOT GOOD"""		146312	0					
ANR	146350	ExpressionStatement	poolName = tmp	48:4:1270:1284	146312	4	True				
ANR	146351	AssignmentExpression	poolName = tmp		146312	0		=			
ANR	146352	Identifier	poolName		146312	0					
ANR	146353	Identifier	tmp		146312	1					
ANR	146354	ExpressionStatement	free ( tmp )	49:4:1290:1299	146312	5	True				
ANR	146355	CallExpression	free ( tmp )		146312	0					
ANR	146356	Callee	free		146312	0					
ANR	146357	Identifier	free		146312	0					
ANR	146358	ArgumentList	tmp		146312	1					
ANR	146359	Argument	tmp		146312	0					
ANR	146360	Identifier	tmp		146312	0					
ANR	146361	ExpressionStatement	tmp = NULL	49:15:1301:1311	146312	6	True				
ANR	146362	AssignmentExpression	tmp = NULL		146312	0		=			
ANR	146363	Identifier	tmp		146312	0					
ANR	146364	Identifier	NULL		146312	1					
ANR	146365	ReturnStatement	return poolName ;	51:4:1318:1333	146312	7	True				
ANR	146366	Identifier	poolName		146312	0					
ANR	146367	ReturnType	string		146312	1					
ANR	146368	Identifier	aviary :: util :: getPoolName		146312	2					
ANR	146369	ParameterList			146312	3					
ANR	146370	CFGEntryNode	ENTRY		146312		True				
ANR	146371	CFGExitNode	EXIT		146312		True				
ANR	146372	Symbol	NULL		146312						
ANR	146373	Symbol	param		146312						
ANR	146374	Symbol	tmp		146312						
ANR	146375	Symbol	strdup		146312						
ANR	146376	Symbol	poolName		146312						
ANR	146377	Function	aviary :: util :: getScheddName	54:0:1338:1601							
ANR	146378	FunctionDef	aviary :: util :: getScheddName ()		146377	0					
ANR	146379	CompoundStatement		55:30:1375:1601	146377	0					
ANR	146380	IdentifierDeclStatement	string scheddName ;	56:1:1378:1395	146377	0	True				
ANR	146381	IdentifierDecl	scheddName		146377	0					
ANR	146382	IdentifierDeclType	string		146377	0					
ANR	146383	Identifier	scheddName		146377	1					
ANR	146384	IdentifierDeclStatement	char * tmp = NULL ;	57:1:1398:1414	146377	1	True				
ANR	146385	IdentifierDecl	* tmp = NULL		146377	0					
ANR	146386	IdentifierDeclType	char *		146377	0					
ANR	146387	Identifier	tmp		146377	1					
ANR	146388	AssignmentExpression	* tmp = NULL		146377	2		=			
ANR	146389	Identifier	NULL		146377	0					
ANR	146390	Identifier	NULL		146377	1					
ANR	146391	ExpressionStatement	"tmp = param ( ""SCHEDD_NAME"" )"	59:1:1418:1444	146377	2	True				
ANR	146392	AssignmentExpression	"tmp = param ( ""SCHEDD_NAME"" )"		146377	0		=			
ANR	146393	Identifier	tmp		146377	0					
ANR	146394	CallExpression	"param ( ""SCHEDD_NAME"" )"		146377	1					
ANR	146395	Callee	param		146377	0					
ANR	146396	Identifier	param		146377	0					
ANR	146397	ArgumentList	"""SCHEDD_NAME"""		146377	1					
ANR	146398	Argument	"""SCHEDD_NAME"""		146377	0					
ANR	146399	PrimaryExpression	"""SCHEDD_NAME"""		146377	0					
ANR	146400	IfStatement	if ( ! tmp )		146377	3					
ANR	146401	Condition	! tmp	60:5:1451:1454	146377	0	True				
ANR	146402	UnaryOperationExpression	! tmp		146377	0					
ANR	146403	UnaryOperator	!		146377	0					
ANR	146404	Identifier	tmp		146377	1					
ANR	146405	CompoundStatement		6:11:81:81	146377	1					
ANR	146406	ExpressionStatement	scheddName = default_daemon_name ( )	61:2:1461:1495	146377	0	True				
ANR	146407	AssignmentExpression	scheddName = default_daemon_name ( )		146377	0		=			
ANR	146408	Identifier	scheddName		146377	0					
ANR	146409	CallExpression	default_daemon_name ( )		146377	1					
ANR	146410	Callee	default_daemon_name		146377	0					
ANR	146411	Identifier	default_daemon_name		146377	0					
ANR	146412	ArgumentList			146377	1					
ANR	146413	ElseStatement	else		146377	0					
ANR	146414	CompoundStatement		8:8:129:129	146377	0					
ANR	146415	ExpressionStatement	scheddName = build_valid_daemon_name ( tmp )	63:2:1509:1550	146377	0	True				
ANR	146416	AssignmentExpression	scheddName = build_valid_daemon_name ( tmp )		146377	0		=			
ANR	146417	Identifier	scheddName		146377	0					
ANR	146418	CallExpression	build_valid_daemon_name ( tmp )		146377	1					
ANR	146419	Callee	build_valid_daemon_name		146377	0					
ANR	146420	Identifier	build_valid_daemon_name		146377	0					
ANR	146421	ArgumentList	tmp		146377	1					
ANR	146422	Argument	tmp		146377	0					
ANR	146423	Identifier	tmp		146377	0					
ANR	146424	ExpressionStatement	free ( tmp )	64:2:1554:1563	146377	1	True				
ANR	146425	CallExpression	free ( tmp )		146377	0					
ANR	146426	Callee	free		146377	0					
ANR	146427	Identifier	free		146377	0					
ANR	146428	ArgumentList	tmp		146377	1					
ANR	146429	Argument	tmp		146377	0					
ANR	146430	Identifier	tmp		146377	0					
ANR	146431	ExpressionStatement	tmp = NULL	64:13:1565:1575	146377	2	True				
ANR	146432	AssignmentExpression	tmp = NULL		146377	0		=			
ANR	146433	Identifier	tmp		146377	0					
ANR	146434	Identifier	NULL		146377	1					
ANR	146435	ReturnStatement	return scheddName ;	67:1:1582:1599	146377	4	True				
ANR	146436	Identifier	scheddName		146377	0					
ANR	146437	ReturnType	string		146377	1					
ANR	146438	Identifier	aviary :: util :: getScheddName		146377	2					
ANR	146439	ParameterList			146377	3					
ANR	146440	CFGEntryNode	ENTRY		146377		True				
ANR	146441	CFGExitNode	EXIT		146377		True				
ANR	146442	Symbol	NULL		146377						
ANR	146443	Symbol	param		146377						
ANR	146444	Symbol	tmp		146377						
ANR	146445	Symbol	build_valid_daemon_name		146377						
ANR	146446	Symbol	scheddName		146377						
ANR	146447	Symbol	default_daemon_name		146377						
ANR	146448	Function	aviary :: util :: trimQuotes	71:0:1659:1980							
ANR	146449	FunctionDef	aviary :: util :: trimQuotes (const char * str)		146448	0					
ANR	146450	CompoundStatement		71:49:1708:1980	146448	0					
ANR	146451	IdentifierDeclStatement	string val = str ;	72:1:1711:1727	146448	0	True				
ANR	146452	IdentifierDecl	val = str		146448	0					
ANR	146453	IdentifierDeclType	string		146448	0					
ANR	146454	Identifier	val		146448	1					
ANR	146455	AssignmentExpression	val = str		146448	2		=			
ANR	146456	Identifier	str		146448	0					
ANR	146457	Identifier	str		146448	1					
ANR	146458	IdentifierDeclStatement	"size_t endpos = val . find_last_not_of ( ""\\\\\\"""" ) ;"	74:1:1731:1775	146448	1	True				
ANR	146459	IdentifierDecl	"endpos = val . find_last_not_of ( ""\\\\\\"""" )"		146448	0					
ANR	146460	IdentifierDeclType	size_t		146448	0					
ANR	146461	Identifier	endpos		146448	1					
ANR	146462	AssignmentExpression	"endpos = val . find_last_not_of ( ""\\\\\\"""" )"		146448	2		=			
ANR	146463	Identifier	endpos		146448	0					
ANR	146464	CallExpression	"val . find_last_not_of ( ""\\\\\\"""" )"		146448	1					
ANR	146465	Callee	val . find_last_not_of		146448	0					
ANR	146466	MemberAccess	val . find_last_not_of		146448	0					
ANR	146467	Identifier	val		146448	0					
ANR	146468	Identifier	find_last_not_of		146448	1					
ANR	146469	ArgumentList	"""\\\\\\"""""		146448	1					
ANR	146470	Argument	"""\\\\\\"""""		146448	0					
ANR	146471	PrimaryExpression	"""\\\\\\"""""		146448	0					
ANR	146472	IfStatement	if ( string :: npos != endpos )		146448	2					
ANR	146473	Condition	string :: npos != endpos	75:5:1782:1803	146448	0	True				
ANR	146474	EqualityExpression	string :: npos != endpos		146448	0		!=			
ANR	146475	Identifier	string :: npos		146448	0					
ANR	146476	Identifier	endpos		146448	1					
ANR	146477	CompoundStatement		5:30:98:98	146448	1					
ANR	146478	ExpressionStatement	"val = val . substr ( 0 , endpos + 1 )"	76:2:1811:1842	146448	0	True				
ANR	146479	AssignmentExpression	"val = val . substr ( 0 , endpos + 1 )"		146448	0		=			
ANR	146480	Identifier	val		146448	0					
ANR	146481	CallExpression	"val . substr ( 0 , endpos + 1 )"		146448	1					
ANR	146482	Callee	val . substr		146448	0					
ANR	146483	MemberAccess	val . substr		146448	0					
ANR	146484	Identifier	val		146448	0					
ANR	146485	Identifier	substr		146448	1					
ANR	146486	ArgumentList	0		146448	1					
ANR	146487	Argument	0		146448	0					
ANR	146488	PrimaryExpression	0		146448	0					
ANR	146489	Argument	endpos + 1		146448	1					
ANR	146490	AdditiveExpression	endpos + 1		146448	0		+			
ANR	146491	Identifier	endpos		146448	0					
ANR	146492	PrimaryExpression	1		146448	1					
ANR	146493	IdentifierDeclStatement	"size_t startpos = val . find_first_not_of ( ""\\\\\\"""" ) ;"	78:1:1848:1895	146448	3	True				
ANR	146494	IdentifierDecl	"startpos = val . find_first_not_of ( ""\\\\\\"""" )"		146448	0					
ANR	146495	IdentifierDeclType	size_t		146448	0					
ANR	146496	Identifier	startpos		146448	1					
ANR	146497	AssignmentExpression	"startpos = val . find_first_not_of ( ""\\\\\\"""" )"		146448	2		=			
ANR	146498	Identifier	startpos		146448	0					
ANR	146499	CallExpression	"val . find_first_not_of ( ""\\\\\\"""" )"		146448	1					
ANR	146500	Callee	val . find_first_not_of		146448	0					
ANR	146501	MemberAccess	val . find_first_not_of		146448	0					
ANR	146502	Identifier	val		146448	0					
ANR	146503	Identifier	find_first_not_of		146448	1					
ANR	146504	ArgumentList	"""\\\\\\"""""		146448	1					
ANR	146505	Argument	"""\\\\\\"""""		146448	0					
ANR	146506	PrimaryExpression	"""\\\\\\"""""		146448	0					
ANR	146507	IfStatement	if ( string :: npos != startpos )		146448	4					
ANR	146508	Condition	string :: npos != startpos	79:5:1902:1925	146448	0	True				
ANR	146509	EqualityExpression	string :: npos != startpos		146448	0		!=			
ANR	146510	Identifier	string :: npos		146448	0					
ANR	146511	Identifier	startpos		146448	1					
ANR	146512	CompoundStatement		9:32:220:220	146448	1					
ANR	146513	ExpressionStatement	val = val . substr ( startpos )	80:2:1933:1961	146448	0	True				
ANR	146514	AssignmentExpression	val = val . substr ( startpos )		146448	0		=			
ANR	146515	Identifier	val		146448	0					
ANR	146516	CallExpression	val . substr ( startpos )		146448	1					
ANR	146517	Callee	val . substr		146448	0					
ANR	146518	MemberAccess	val . substr		146448	0					
ANR	146519	Identifier	val		146448	0					
ANR	146520	Identifier	substr		146448	1					
ANR	146521	ArgumentList	startpos		146448	1					
ANR	146522	Argument	startpos		146448	0					
ANR	146523	Identifier	startpos		146448	0					
ANR	146524	ReturnStatement	return val ;	83:1:1968:1978	146448	5	True				
ANR	146525	Identifier	val		146448	0					
ANR	146526	ReturnType	string		146448	1					
ANR	146527	Identifier	aviary :: util :: trimQuotes		146448	2					
ANR	146528	ParameterList	const char * str		146448	3					
ANR	146529	Parameter	const char * str	71:32:1691:1705	146448	0	True				
ANR	146530	ParameterType	const char *		146448	0					
ANR	146531	Identifier	str		146448	1					
ANR	146532	CFGEntryNode	ENTRY		146448		True				
ANR	146533	CFGExitNode	EXIT		146448		True				
ANR	146534	Symbol	str		146448						
ANR	146535	Symbol	val		146448						
ANR	146536	Symbol	val . find_last_not_of		146448						
ANR	146537	Symbol	string :: npos		146448						
ANR	146538	Symbol	startpos		146448						
ANR	146539	Symbol	endpos		146448						
ANR	146540	Symbol	val . substr		146448						
ANR	146541	Symbol	val . find_first_not_of		146448						
ANR	146542	Function	aviary :: util :: isValidGroupUserName	88:0:2080:2481							
ANR	146543	FunctionDef	"aviary :: util :: isValidGroupUserName (const string & _name , string & _text)"		146542	0					
ANR	146544	CompoundStatement		88:76:2156:2481	146542	0					
ANR	146545	IdentifierDeclStatement	const char * ptr = _name . c_str ( ) ;	89:1:2159:2190	146542	0	True				
ANR	146546	IdentifierDecl	* ptr = _name . c_str ( )		146542	0					
ANR	146547	IdentifierDeclType	const char *		146542	0					
ANR	146548	Identifier	ptr		146542	1					
ANR	146549	AssignmentExpression	* ptr = _name . c_str ( )		146542	2		=			
ANR	146550	Identifier	ptr		146542	0					
ANR	146551	CallExpression	_name . c_str ( )		146542	1					
ANR	146552	Callee	_name . c_str		146542	0					
ANR	146553	MemberAccess	_name . c_str		146542	0					
ANR	146554	Identifier	_name		146542	0					
ANR	146555	Identifier	c_str		146542	1					
ANR	146556	ArgumentList			146542	1					
ANR	146557	WhileStatement	while ( * ptr )		146542	1					
ANR	146558	Condition	* ptr	90:8:2200:2203	146542	0	True				
ANR	146559	UnaryOperationExpression	* ptr		146542	0					
ANR	146560	UnaryOperator	*		146542	0					
ANR	146561	Identifier	ptr		146542	1					
ANR	146562	CompoundStatement		4:2:54:69	146542	1					
ANR	146563	IdentifierDeclStatement	char c = * ptr ++ ;	91:2:2211:2226	146542	0	True				
ANR	146564	IdentifierDecl	c = * ptr ++		146542	0					
ANR	146565	IdentifierDeclType	char		146542	0					
ANR	146566	Identifier	c		146542	1					
ANR	146567	AssignmentExpression	c = * ptr ++		146542	2		=			
ANR	146568	Identifier	c		146542	0					
ANR	146569	UnaryOperationExpression	* ptr ++		146542	1					
ANR	146570	UnaryOperator	*		146542	0					
ANR	146571	PostIncDecOperationExpression	ptr ++		146542	1					
ANR	146572	Identifier	ptr		146542	0					
ANR	146573	IncDec	++		146542	1					
ANR	146574	IfStatement	if ( ( 'a' > c || c > 'z' ) && ( 'A' > c || c > 'Z' ) && ( '0' > c || c > '9' ) && ( c != '_' ) && ( c != '.' ) )		146542	1					
ANR	146575	Condition	( 'a' > c || c > 'z' ) && ( 'A' > c || c > 'Z' ) && ( '0' > c || c > '9' ) && ( c != '_' ) && ( c != '.' )	92:7:2235:2344	146542	0	True				
ANR	146576	AndExpression	( 'a' > c || c > 'z' ) && ( 'A' > c || c > 'Z' ) && ( '0' > c || c > '9' ) && ( c != '_' ) && ( c != '.' )		146542	0		&&			
ANR	146577	OrExpression	'a' > c || c > 'z'		146542	0		||			
ANR	146578	RelationalExpression	'a' > c		146542	0		>			
ANR	146579	PrimaryExpression	'a'		146542	0					
ANR	146580	Identifier	c		146542	1					
ANR	146581	RelationalExpression	c > 'z'		146542	1		>			
ANR	146582	Identifier	c		146542	0					
ANR	146583	PrimaryExpression	'z'		146542	1					
ANR	146584	AndExpression	( 'A' > c || c > 'Z' ) && ( '0' > c || c > '9' ) && ( c != '_' ) && ( c != '.' )		146542	1		&&			
ANR	146585	OrExpression	'A' > c || c > 'Z'		146542	0		||			
ANR	146586	RelationalExpression	'A' > c		146542	0		>			
ANR	146587	PrimaryExpression	'A'		146542	0					
ANR	146588	Identifier	c		146542	1					
ANR	146589	RelationalExpression	c > 'Z'		146542	1		>			
ANR	146590	Identifier	c		146542	0					
ANR	146591	PrimaryExpression	'Z'		146542	1					
ANR	146592	AndExpression	( '0' > c || c > '9' ) && ( c != '_' ) && ( c != '.' )		146542	1		&&			
ANR	146593	OrExpression	'0' > c || c > '9'		146542	0		||			
ANR	146594	RelationalExpression	'0' > c		146542	0		>			
ANR	146595	PrimaryExpression	'0'		146542	0					
ANR	146596	Identifier	c		146542	1					
ANR	146597	RelationalExpression	c > '9'		146542	1		>			
ANR	146598	Identifier	c		146542	0					
ANR	146599	PrimaryExpression	'9'		146542	1					
ANR	146600	AndExpression	( c != '_' ) && ( c != '.' )		146542	1		&&			
ANR	146601	EqualityExpression	c != '_'		146542	0		!=			
ANR	146602	Identifier	c		146542	0					
ANR	146603	PrimaryExpression	'_'		146542	1					
ANR	146604	EqualityExpression	c != '.'		146542	1		!=			
ANR	146605	Identifier	c		146542	0					
ANR	146606	PrimaryExpression	'.'		146542	1					
ANR	146607	CompoundStatement		9:17:191:191	146542	1					
ANR	146608	ExpressionStatement	"_text = ""Invalid name for group/user - alphanumeric, underscore and dot characters only"""	97:3:2353:2441	146542	0	True				
ANR	146609	AssignmentExpression	"_text = ""Invalid name for group/user - alphanumeric, underscore and dot characters only"""		146542	0		=			
ANR	146610	Identifier	_text		146542	0					
ANR	146611	PrimaryExpression	"""Invalid name for group/user - alphanumeric, underscore and dot characters only"""		146542	1					
ANR	146612	ReturnStatement	return false ;	98:3:2446:2458	146542	1	True				
ANR	146613	Identifier	false		146542	0					
ANR	146614	ReturnStatement	return true ;	101:1:2468:2479	146542	2	True				
ANR	146615	Identifier	true		146542	0					
ANR	146616	ReturnType	bool		146542	1					
ANR	146617	Identifier	aviary :: util :: isValidGroupUserName		146542	2					
ANR	146618	ParameterList	"const string & _name , string & _text"		146542	3					
ANR	146619	Parameter	const string & _name	88:40:2120:2138	146542	0	True				
ANR	146620	ParameterType	const string &		146542	0					
ANR	146621	Identifier	_name		146542	1					
ANR	146622	Parameter	string & _text	88:61:2141:2153	146542	1	True				
ANR	146623	ParameterType	string &		146542	0					
ANR	146624	Identifier	_text		146542	1					
ANR	146625	CFGEntryNode	ENTRY		146542		True				
ANR	146626	CFGExitNode	EXIT		146542		True				
ANR	146627	Symbol	c		146542						
ANR	146628	Symbol	_name		146542						
ANR	146629	Symbol	* ptr ++		146542						
ANR	146630	Symbol	* ptr		146542						
ANR	146631	Symbol	false		146542						
ANR	146632	Symbol	true		146542						
ANR	146633	Symbol	_text		146542						
ANR	146634	Symbol	_name . c_str		146542						
ANR	146635	Symbol	ptr		146542						
ANR	146636	Function	aviary :: util :: isValidAttributeName	106:0:2563:2940							
ANR	146637	FunctionDef	"aviary :: util :: isValidAttributeName (const string & _name , string & _text)"		146636	0					
ANR	146638	CompoundStatement		106:76:2639:2940	146636	0					
ANR	146639	IdentifierDeclStatement	const char * ptr = _name . c_str ( ) ;	107:1:2642:2673	146636	0	True				
ANR	146640	IdentifierDecl	* ptr = _name . c_str ( )		146636	0					
ANR	146641	IdentifierDeclType	const char *		146636	0					
ANR	146642	Identifier	ptr		146636	1					
ANR	146643	AssignmentExpression	* ptr = _name . c_str ( )		146636	2		=			
ANR	146644	Identifier	ptr		146636	0					
ANR	146645	CallExpression	_name . c_str ( )		146636	1					
ANR	146646	Callee	_name . c_str		146636	0					
ANR	146647	MemberAccess	_name . c_str		146636	0					
ANR	146648	Identifier	_name		146636	0					
ANR	146649	Identifier	c_str		146636	1					
ANR	146650	ArgumentList			146636	1					
ANR	146651	WhileStatement	while ( * ptr )		146636	1					
ANR	146652	Condition	* ptr	108:8:2683:2686	146636	0	True				
ANR	146653	UnaryOperationExpression	* ptr		146636	0					
ANR	146654	UnaryOperator	*		146636	0					
ANR	146655	Identifier	ptr		146636	1					
ANR	146656	CompoundStatement		4:2:54:69	146636	1					
ANR	146657	IdentifierDeclStatement	char c = * ptr ++ ;	109:2:2694:2709	146636	0	True				
ANR	146658	IdentifierDecl	c = * ptr ++		146636	0					
ANR	146659	IdentifierDeclType	char		146636	0					
ANR	146660	Identifier	c		146636	1					
ANR	146661	AssignmentExpression	c = * ptr ++		146636	2		=			
ANR	146662	Identifier	c		146636	0					
ANR	146663	UnaryOperationExpression	* ptr ++		146636	1					
ANR	146664	UnaryOperator	*		146636	0					
ANR	146665	PostIncDecOperationExpression	ptr ++		146636	1					
ANR	146666	Identifier	ptr		146636	0					
ANR	146667	IncDec	++		146636	1					
ANR	146668	IfStatement	if ( ( 'a' > c || c > 'z' ) && ( 'A' > c || c > 'Z' ) && ( '0' > c || c > '9' ) && ( c != '_' ) )		146636	1					
ANR	146669	Condition	( 'a' > c || c > 'z' ) && ( 'A' > c || c > 'Z' ) && ( '0' > c || c > '9' ) && ( c != '_' )	110:7:2718:2809	146636	0	True				
ANR	146670	AndExpression	( 'a' > c || c > 'z' ) && ( 'A' > c || c > 'Z' ) && ( '0' > c || c > '9' ) && ( c != '_' )		146636	0		&&			
ANR	146671	OrExpression	'a' > c || c > 'z'		146636	0		||			
ANR	146672	RelationalExpression	'a' > c		146636	0		>			
ANR	146673	PrimaryExpression	'a'		146636	0					
ANR	146674	Identifier	c		146636	1					
ANR	146675	RelationalExpression	c > 'z'		146636	1		>			
ANR	146676	Identifier	c		146636	0					
ANR	146677	PrimaryExpression	'z'		146636	1					
ANR	146678	AndExpression	( 'A' > c || c > 'Z' ) && ( '0' > c || c > '9' ) && ( c != '_' )		146636	1		&&			
ANR	146679	OrExpression	'A' > c || c > 'Z'		146636	0		||			
ANR	146680	RelationalExpression	'A' > c		146636	0		>			
ANR	146681	PrimaryExpression	'A'		146636	0					
ANR	146682	Identifier	c		146636	1					
ANR	146683	RelationalExpression	c > 'Z'		146636	1		>			
ANR	146684	Identifier	c		146636	0					
ANR	146685	PrimaryExpression	'Z'		146636	1					
ANR	146686	AndExpression	( '0' > c || c > '9' ) && ( c != '_' )		146636	1		&&			
ANR	146687	OrExpression	'0' > c || c > '9'		146636	0		||			
ANR	146688	RelationalExpression	'0' > c		146636	0		>			
ANR	146689	PrimaryExpression	'0'		146636	0					
ANR	146690	Identifier	c		146636	1					
ANR	146691	RelationalExpression	c > '9'		146636	1		>			
ANR	146692	Identifier	c		146636	0					
ANR	146693	PrimaryExpression	'9'		146636	1					
ANR	146694	EqualityExpression	c != '_'		146636	1		!=			
ANR	146695	Identifier	c		146636	0					
ANR	146696	PrimaryExpression	'_'		146636	1					
ANR	146697	CompoundStatement		8:17:173:173	146636	1					
ANR	146698	ExpressionStatement	"_text = ""Invalid name for attribute - alphanumeric and underscore characters only"""	114:3:2818:2900	146636	0	True				
ANR	146699	AssignmentExpression	"_text = ""Invalid name for attribute - alphanumeric and underscore characters only"""		146636	0		=			
ANR	146700	Identifier	_text		146636	0					
ANR	146701	PrimaryExpression	"""Invalid name for attribute - alphanumeric and underscore characters only"""		146636	1					
ANR	146702	ReturnStatement	return false ;	115:3:2905:2917	146636	1	True				
ANR	146703	Identifier	false		146636	0					
ANR	146704	ReturnStatement	return true ;	118:1:2927:2938	146636	2	True				
ANR	146705	Identifier	true		146636	0					
ANR	146706	ReturnType	bool		146636	1					
ANR	146707	Identifier	aviary :: util :: isValidAttributeName		146636	2					
ANR	146708	ParameterList	"const string & _name , string & _text"		146636	3					
ANR	146709	Parameter	const string & _name	106:40:2603:2621	146636	0	True				
ANR	146710	ParameterType	const string &		146636	0					
ANR	146711	Identifier	_name		146636	1					
ANR	146712	Parameter	string & _text	106:61:2624:2636	146636	1	True				
ANR	146713	ParameterType	string &		146636	0					
ANR	146714	Identifier	_text		146636	1					
ANR	146715	CFGEntryNode	ENTRY		146636		True				
ANR	146716	CFGExitNode	EXIT		146636		True				
ANR	146717	Symbol	c		146636						
ANR	146718	Symbol	_name		146636						
ANR	146719	Symbol	* ptr ++		146636						
ANR	146720	Symbol	* ptr		146636						
ANR	146721	Symbol	false		146636						
ANR	146722	Symbol	true		146636						
ANR	146723	Symbol	_text		146636						
ANR	146724	Symbol	_name . c_str		146636						
ANR	146725	Symbol	ptr		146636						
ANR	146726	Function	aviary :: util :: checkRequiredAttrs	121:0:2943:3238							
ANR	146727	FunctionDef	"aviary :: util :: checkRequiredAttrs (compat_classad :: ClassAd & ad , const char * attrs [ ] , string & missing)"		146726	0					
ANR	146728	CompoundStatement		121:105:3048:3238	146726	0					
ANR	146729	IdentifierDeclStatement	bool status = true ;	122:1:3051:3069	146726	0	True				
ANR	146730	IdentifierDecl	status = true		146726	0					
ANR	146731	IdentifierDeclType	bool		146726	0					
ANR	146732	Identifier	status		146726	1					
ANR	146733	AssignmentExpression	status = true		146726	2		=			
ANR	146734	Identifier	true		146726	0					
ANR	146735	Identifier	true		146726	1					
ANR	146736	IdentifierDeclStatement	int i = 0 ;	123:1:3072:3081	146726	1	True				
ANR	146737	IdentifierDecl	i = 0		146726	0					
ANR	146738	IdentifierDeclType	int		146726	0					
ANR	146739	Identifier	i		146726	1					
ANR	146740	AssignmentExpression	i = 0		146726	2		=			
ANR	146741	Identifier	i		146726	0					
ANR	146742	PrimaryExpression	0		146726	1					
ANR	146743	WhileStatement	while ( NULL != attrs [ i ] )		146726	2					
ANR	146744	Condition	NULL != attrs [ i ]	125:15:3099:3114	146726	0	True				
ANR	146745	EqualityExpression	NULL != attrs [ i ]		146726	0		!=			
ANR	146746	Identifier	NULL		146726	0					
ANR	146747	ArrayIndexing	attrs [ i ]		146726	1					
ANR	146748	Identifier	attrs		146726	0					
ANR	146749	Identifier	i		146726	1					
ANR	146750	CompoundStatement		5:33:68:68	146726	1					
ANR	146751	IfStatement	if ( ! ad . Lookup ( attrs [ i ] ) )		146726	0					
ANR	146752	Condition	! ad . Lookup ( attrs [ i ] )	126:6:3125:3144	146726	0	True				
ANR	146753	UnaryOperationExpression	! ad . Lookup ( attrs [ i ] )		146726	0					
ANR	146754	UnaryOperator	!		146726	0					
ANR	146755	CallExpression	ad . Lookup ( attrs [ i ] )		146726	1					
ANR	146756	Callee	ad . Lookup		146726	0					
ANR	146757	MemberAccess	ad . Lookup		146726	0					
ANR	146758	Identifier	ad		146726	0					
ANR	146759	Identifier	Lookup		146726	1					
ANR	146760	ArgumentList	attrs [ i ]		146726	1					
ANR	146761	Argument	attrs [ i ]		146726	0					
ANR	146762	ArrayIndexing	attrs [ i ]		146726	0					
ANR	146763	Identifier	attrs		146726	0					
ANR	146764	Identifier	i		146726	1					
ANR	146765	CompoundStatement		6:28:98:98	146726	1					
ANR	146766	ExpressionStatement	"missing += "" """	127:3:3152:3166	146726	0	True				
ANR	146767	AssignmentExpression	"missing += "" """		146726	0		+=			
ANR	146768	Identifier	missing		146726	0					
ANR	146769	PrimaryExpression	""" """		146726	1					
ANR	146770	ExpressionStatement	missing += attrs [ i ]	127:19:3168:3187	146726	1	True				
ANR	146771	AssignmentExpression	missing += attrs [ i ]		146726	0		+=			
ANR	146772	Identifier	missing		146726	0					
ANR	146773	ArrayIndexing	attrs [ i ]		146726	1					
ANR	146774	Identifier	attrs		146726	0					
ANR	146775	Identifier	i		146726	1					
ANR	146776	ExpressionStatement	status = false	128:3:3192:3206	146726	2	True				
ANR	146777	AssignmentExpression	status = false		146726	0		=			
ANR	146778	Identifier	status		146726	0					
ANR	146779	Identifier	false		146726	1					
ANR	146780	ExpressionStatement	i ++	130:2:3214:3217	146726	1	True				
ANR	146781	PostIncDecOperationExpression	i ++		146726	0					
ANR	146782	Identifier	i		146726	0					
ANR	146783	IncDec	++		146726	1					
ANR	146784	ReturnStatement	return status ;	132:1:3223:3236	146726	3	True				
ANR	146785	Identifier	status		146726	0					
ANR	146786	ReturnType	bool		146726	1					
ANR	146787	Identifier	aviary :: util :: checkRequiredAttrs		146726	2					
ANR	146788	ParameterList	"compat_classad :: ClassAd & ad , const char * attrs [ ] , string & missing"		146726	3					
ANR	146789	Parameter	compat_classad :: ClassAd & ad	121:38:2981:3007	146726	0	True				
ANR	146790	ParameterType	compat_classad :: ClassAd &		146726	0					
ANR	146791	Identifier	ad		146726	1					
ANR	146792	Parameter	const char * attrs [ ]	121:67:3010:3028	146726	1	True				
ANR	146793	ParameterType	const char * [ ]		146726	0					
ANR	146794	Identifier	attrs		146726	1					
ANR	146795	Parameter	string & missing	121:88:3031:3045	146726	2	True				
ANR	146796	ParameterType	string &		146726	0					
ANR	146797	Identifier	missing		146726	1					
ANR	146798	CFGEntryNode	ENTRY		146726		True				
ANR	146799	CFGExitNode	EXIT		146726		True				
ANR	146800	Symbol	* attrs		146726						
ANR	146801	Symbol	ad		146726						
ANR	146802	Symbol	NULL		146726						
ANR	146803	Symbol	* i		146726						
ANR	146804	Symbol	missing		146726						
ANR	146805	Symbol	true		146726						
ANR	146806	Symbol	false		146726						
ANR	146807	Symbol	i		146726						
ANR	146808	Symbol	ad . Lookup		146726						
ANR	146809	Symbol	attrs		146726						
ANR	146810	Symbol	status		146726						
ANR	146811	Function	aviary :: util :: isKeyword	136:0:3285:3461							
ANR	146812	FunctionDef	aviary :: util :: isKeyword (const char * kw)		146811	0					
ANR	146813	CompoundStatement		136:45:3330:3461	146811	0					
ANR	146814	IdentifierDeclStatement	int i = 0 ;	137:1:3333:3342	146811	0	True				
ANR	146815	IdentifierDecl	i = 0		146811	0					
ANR	146816	IdentifierDeclType	int		146811	0					
ANR	146817	Identifier	i		146811	1					
ANR	146818	AssignmentExpression	i = 0		146811	2		=			
ANR	146819	Identifier	i		146811	0					
ANR	146820	PrimaryExpression	0		146811	1					
ANR	146821	WhileStatement	while ( NULL != RESERVED [ i ] )		146811	1					
ANR	146822	Condition	NULL != RESERVED [ i ]	138:8:3352:3370	146811	0	True				
ANR	146823	EqualityExpression	NULL != RESERVED [ i ]		146811	0		!=			
ANR	146824	Identifier	NULL		146811	0					
ANR	146825	ArrayIndexing	RESERVED [ i ]		146811	1					
ANR	146826	Identifier	RESERVED		146811	0					
ANR	146827	Identifier	i		146811	1					
ANR	146828	CompoundStatement		3:29:42:42	146811	1					
ANR	146829	IfStatement	"if ( strcasecmp ( kw , RESERVED [ i ] ) == 0 )"		146811	0					
ANR	146830	Condition	"strcasecmp ( kw , RESERVED [ i ] ) == 0"	139:6:3381:3411	146811	0	True				
ANR	146831	EqualityExpression	"strcasecmp ( kw , RESERVED [ i ] ) == 0"		146811	0		==			
ANR	146832	CallExpression	"strcasecmp ( kw , RESERVED [ i ] )"		146811	0					
ANR	146833	Callee	strcasecmp		146811	0					
ANR	146834	Identifier	strcasecmp		146811	0					
ANR	146835	ArgumentList	kw		146811	1					
ANR	146836	Argument	kw		146811	0					
ANR	146837	Identifier	kw		146811	0					
ANR	146838	Argument	RESERVED [ i ]		146811	1					
ANR	146839	ArrayIndexing	RESERVED [ i ]		146811	0					
ANR	146840	Identifier	RESERVED		146811	0					
ANR	146841	Identifier	i		146811	1					
ANR	146842	PrimaryExpression	0		146811	1					
ANR	146843	CompoundStatement		4:39:83:83	146811	1					
ANR	146844	ReturnStatement	return true ;	140:3:3419:3430	146811	0	True				
ANR	146845	Identifier	true		146811	0					
ANR	146846	ExpressionStatement	i ++	142:2:3438:3441	146811	1	True				
ANR	146847	PostIncDecOperationExpression	i ++		146811	0					
ANR	146848	Identifier	i		146811	0					
ANR	146849	IncDec	++		146811	1					
ANR	146850	ReturnStatement	return false ;	144:1:3447:3459	146811	2	True				
ANR	146851	Identifier	false		146811	0					
ANR	146852	ReturnType	bool		146811	1					
ANR	146853	Identifier	aviary :: util :: isKeyword		146811	2					
ANR	146854	ParameterList	const char * kw		146811	3					
ANR	146855	Parameter	const char * kw	136:29:3314:3327	146811	0	True				
ANR	146856	ParameterType	const char *		146811	0					
ANR	146857	Identifier	kw		146811	1					
ANR	146858	CFGEntryNode	ENTRY		146811		True				
ANR	146859	CFGExitNode	EXIT		146811		True				
ANR	146860	Symbol	* i		146811						
ANR	146861	Symbol	* RESERVED		146811						
ANR	146862	Symbol	NULL		146811						
ANR	146863	Symbol	true		146811						
ANR	146864	Symbol	false		146811						
ANR	146865	Symbol	i		146811						
ANR	146866	Symbol	RESERVED		146811						
ANR	146867	Symbol	kw		146811						
ANR	146868	Symbol	strcasecmp		146811						
ANR	146869	Function	aviary :: util :: isSubmissionChange	148:0:3537:3676							
ANR	146870	FunctionDef	aviary :: util :: isSubmissionChange (const char * attr)		146869	0					
ANR	146871	CompoundStatement		148:56:3593:3676	146869	0					
ANR	146872	IfStatement	"if ( strcasecmp ( attr , ATTR_JOB_SUBMISSION ) == 0 )"		146869	0					
ANR	146873	Condition	"strcasecmp ( attr , ATTR_JOB_SUBMISSION ) == 0"	149:5:3600:3638	146869	0	True				
ANR	146874	EqualityExpression	"strcasecmp ( attr , ATTR_JOB_SUBMISSION ) == 0"		146869	0		==			
ANR	146875	CallExpression	"strcasecmp ( attr , ATTR_JOB_SUBMISSION )"		146869	0					
ANR	146876	Callee	strcasecmp		146869	0					
ANR	146877	Identifier	strcasecmp		146869	0					
ANR	146878	ArgumentList	attr		146869	1					
ANR	146879	Argument	attr		146869	0					
ANR	146880	Identifier	attr		146869	0					
ANR	146881	Argument	ATTR_JOB_SUBMISSION		146869	1					
ANR	146882	Identifier	ATTR_JOB_SUBMISSION		146869	0					
ANR	146883	PrimaryExpression	0		146869	1					
ANR	146884	CompoundStatement		2:46:47:47	146869	1					
ANR	146885	ReturnStatement	return true ;	150:2:3645:3656	146869	0	True				
ANR	146886	Identifier	true		146869	0					
ANR	146887	ReturnStatement	return false ;	152:1:3662:3674	146869	1	True				
ANR	146888	Identifier	false		146869	0					
ANR	146889	ReturnType	bool		146869	1					
ANR	146890	Identifier	aviary :: util :: isSubmissionChange		146869	2					
ANR	146891	ParameterList	const char * attr		146869	3					
ANR	146892	Parameter	const char * attr	148:38:3575:3590	146869	0	True				
ANR	146893	ParameterType	const char *		146869	0					
ANR	146894	Identifier	attr		146869	1					
ANR	146895	CFGEntryNode	ENTRY		146869		True				
ANR	146896	CFGExitNode	EXIT		146869		True				
ANR	146897	Symbol	ATTR_JOB_SUBMISSION		146869						
ANR	146898	Symbol	true		146869						
ANR	146899	Symbol	false		146869						
ANR	146900	Symbol	attr		146869						
ANR	146901	Symbol	strcasecmp		146869						
