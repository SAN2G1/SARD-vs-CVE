command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	159598	File	data/converged/CVE-2011-4930_htcondor/CondorDagNodeScheduler.cpp								
ANR	159599	DeclStmt									
ANR	159600	Decl							float	float *	floatPtr
ANR	159601	DeclStmt									
ANR	159602	Decl							int	int *	intPtr
ANR	159603	Function	main	58:0:1685:22966							
ANR	159604	FunctionDef	"main (int argc , char * argv [ ])"		159603	0					
ANR	159605	CompoundStatement		59:0:1720:22966	159603	0					
ANR	159606	TryStatement	try		159603	0					
ANR	159607	CompoundStatement		588:2:16672:16686	159603	0					
ANR	159608	IdentifierDeclStatement	"int i , j , k ;"		159603	0					
ANR	159609	IdentifierDecl	i		159603	0					
ANR	159610	IdentifierDeclType	int		159603	0					
ANR	159611	Identifier	i		159603	1					
ANR	159612	IdentifierDecl	j		159603	1					
ANR	159613	IdentifierDeclType	int		159603	0					
ANR	159614	Identifier	j		159603	1					
ANR	159615	IdentifierDecl	k		159603	2					
ANR	159616	IdentifierDeclType	int		159603	0					
ANR	159617	Identifier	k		159603	1					
ANR	159618	IdentifierDeclStatement	float c ;		159603	1					
ANR	159619	IdentifierDecl	c		159603	0					
ANR	159620	IdentifierDeclType	float		159603	0					
ANR	159621	Identifier	c		159603	1					
ANR	159622	IdentifierDeclStatement	ConstituentLibrary lib ;		159603	2					
ANR	159623	IdentifierDecl	lib		159603	0					
ANR	159624	IdentifierDeclType	ConstituentLibrary		159603	0					
ANR	159625	Identifier	lib		159603	1					
ANR	159626	IdentifierDeclStatement	float done ;		159603	3					
ANR	159627	IdentifierDecl	done		159603	0					
ANR	159628	IdentifierDeclType	float		159603	0					
ANR	159629	Identifier	done		159603	1					
ANR	159630	IdentifierDeclStatement	float last ;		159603	4					
ANR	159631	IdentifierDecl	last		159603	0					
ANR	159632	IdentifierDeclType	float		159603	0					
ANR	159633	Identifier	last		159603	1					
ANR	159634	IdentifierDeclStatement	"clock_t start , finish ;"		159603	5					
ANR	159635	IdentifierDecl	start		159603	0					
ANR	159636	IdentifierDeclType	clock_t		159603	0					
ANR	159637	Identifier	start		159603	1					
ANR	159638	IdentifierDecl	finish		159603	1					
ANR	159639	IdentifierDeclType	clock_t		159603	0					
ANR	159640	Identifier	finish		159603	1					
ANR	159641	IdentifierDeclStatement	FILE * fPrio ;		159603	6					
ANR	159642	IdentifierDecl	* fPrio		159603	0					
ANR	159643	IdentifierDeclType	FILE *		159603	0					
ANR	159644	Identifier	fPrio		159603	1					
ANR	159645	ExpressionStatement	start = clock ( )		159603	7					
ANR	159646	AssignmentExpression	start = clock ( )		159603	0		=			
ANR	159647	Identifier	start		159603	0					
ANR	159648	CallExpression	clock ( )		159603	1					
ANR	159649	Callee	clock		159603	0					
ANR	159650	Identifier	clock		159603	0					
ANR	159651	ArgumentList			159603	1					
ANR	159652	IfStatement	if ( argc <= 1 )		159603	8					
ANR	159653	Condition	argc <= 1		159603	0					
ANR	159654	RelationalExpression	argc <= 1		159603	0		<=			
ANR	159655	Identifier	argc		159603	0					
ANR	159656	PrimaryExpression	1		159603	1					
ANR	159657	CompoundStatement		16:16:247:247	159603	1					
ANR	159658	Label	usage :		159603	0					
ANR	159659	Identifier	usage		159603	0					
ANR	159660	ExpressionStatement	"printf ( ""\\n"" )"		159603	1					
ANR	159661	CallExpression	"printf ( ""\\n"" )"		159603	0					
ANR	159662	Callee	printf		159603	0					
ANR	159663	Identifier	printf		159603	0					
ANR	159664	ArgumentList	"""\\n"""		159603	1					
ANR	159665	Argument	"""\\n"""		159603	0					
ANR	159666	PrimaryExpression	"""\\n"""		159603	0					
ANR	159667	ExpressionStatement	"printf ( ""NAME\\n"" )"		159603	2					
ANR	159668	CallExpression	"printf ( ""NAME\\n"" )"		159603	0					
ANR	159669	Callee	printf		159603	0					
ANR	159670	Identifier	printf		159603	0					
ANR	159671	ArgumentList	"""NAME\\n"""		159603	1					
ANR	159672	Argument	"""NAME\\n"""		159603	0					
ANR	159673	PrimaryExpression	"""NAME\\n"""		159603	0					
ANR	159674	ExpressionStatement	"printf ( ""   prio - a tool for prioritizing jobs of a DAGMan file\\n"" )"		159603	3					
ANR	159675	CallExpression	"printf ( ""   prio - a tool for prioritizing jobs of a DAGMan file\\n"" )"		159603	0					
ANR	159676	Callee	printf		159603	0					
ANR	159677	Identifier	printf		159603	0					
ANR	159678	ArgumentList	"""   prio - a tool for prioritizing jobs of a DAGMan file\\n"""		159603	1					
ANR	159679	Argument	"""   prio - a tool for prioritizing jobs of a DAGMan file\\n"""		159603	0					
ANR	159680	PrimaryExpression	"""   prio - a tool for prioritizing jobs of a DAGMan file\\n"""		159603	0					
ANR	159681	ExpressionStatement	"printf ( ""\\n"" )"		159603	4					
ANR	159682	CallExpression	"printf ( ""\\n"" )"		159603	0					
ANR	159683	Callee	printf		159603	0					
ANR	159684	Identifier	printf		159603	0					
ANR	159685	ArgumentList	"""\\n"""		159603	1					
ANR	159686	Argument	"""\\n"""		159603	0					
ANR	159687	PrimaryExpression	"""\\n"""		159603	0					
ANR	159688	ExpressionStatement	"printf ( ""SYNOPSIS\\n"" )"		159603	5					
ANR	159689	CallExpression	"printf ( ""SYNOPSIS\\n"" )"		159603	0					
ANR	159690	Callee	printf		159603	0					
ANR	159691	Identifier	printf		159603	0					
ANR	159692	ArgumentList	"""SYNOPSIS\\n"""		159603	1					
ANR	159693	Argument	"""SYNOPSIS\\n"""		159603	0					
ANR	159694	PrimaryExpression	"""SYNOPSIS\\n"""		159603	0					
ANR	159695	ExpressionStatement	"printf ( ""   prio [options] INOUTfile.dag\\n"" )"		159603	6					
ANR	159696	CallExpression	"printf ( ""   prio [options] INOUTfile.dag\\n"" )"		159603	0					
ANR	159697	Callee	printf		159603	0					
ANR	159698	Identifier	printf		159603	0					
ANR	159699	ArgumentList	"""   prio [options] INOUTfile.dag\\n"""		159603	1					
ANR	159700	Argument	"""   prio [options] INOUTfile.dag\\n"""		159603	0					
ANR	159701	PrimaryExpression	"""   prio [options] INOUTfile.dag\\n"""		159603	0					
ANR	159702	ExpressionStatement	"printf ( ""\\n"" )"		159603	7					
ANR	159703	CallExpression	"printf ( ""\\n"" )"		159603	0					
ANR	159704	Callee	printf		159603	0					
ANR	159705	Identifier	printf		159603	0					
ANR	159706	ArgumentList	"""\\n"""		159603	1					
ANR	159707	Argument	"""\\n"""		159603	0					
ANR	159708	PrimaryExpression	"""\\n"""		159603	0					
ANR	159709	ExpressionStatement	"printf ( ""DESCRIPTION\\n"" )"		159603	8					
ANR	159710	CallExpression	"printf ( ""DESCRIPTION\\n"" )"		159603	0					
ANR	159711	Callee	printf		159603	0					
ANR	159712	Identifier	printf		159603	0					
ANR	159713	ArgumentList	"""DESCRIPTION\\n"""		159603	1					
ANR	159714	Argument	"""DESCRIPTION\\n"""		159603	0					
ANR	159715	PrimaryExpression	"""DESCRIPTION\\n"""		159603	0					
ANR	159716	ExpressionStatement	"printf ( ""   Prioritizes jobs of a DAGMan file using an algorithm based on the paper\\n"" )"		159603	9					
ANR	159717	CallExpression	"printf ( ""   Prioritizes jobs of a DAGMan file using an algorithm based on the paper\\n"" )"		159603	0					
ANR	159718	Callee	printf		159603	0					
ANR	159719	Identifier	printf		159603	0					
ANR	159720	ArgumentList	"""   Prioritizes jobs of a DAGMan file using an algorithm based on the paper\\n"""		159603	1					
ANR	159721	Argument	"""   Prioritizes jobs of a DAGMan file using an algorithm based on the paper\\n"""		159603	0					
ANR	159722	PrimaryExpression	"""   Prioritizes jobs of a DAGMan file using an algorithm based on the paper\\n"""		159603	0					
ANR	159723	ExpressionStatement	"printf ( ""         Malewicz, G., Rosenberg, A., Yurkewych, M.:\\n"" )"		159603	10					
ANR	159724	CallExpression	"printf ( ""         Malewicz, G., Rosenberg, A., Yurkewych, M.:\\n"" )"		159603	0					
ANR	159725	Callee	printf		159603	0					
ANR	159726	Identifier	printf		159603	0					
ANR	159727	ArgumentList	"""         Malewicz, G., Rosenberg, A., Yurkewych, M.:\\n"""		159603	1					
ANR	159728	Argument	"""         Malewicz, G., Rosenberg, A., Yurkewych, M.:\\n"""		159603	0					
ANR	159729	PrimaryExpression	"""         Malewicz, G., Rosenberg, A., Yurkewych, M.:\\n"""		159603	0					
ANR	159730	ExpressionStatement	"printf ( ""         Toward a Theory for Scheduling Dags in Internet-Based Computing.\\n"" )"		159603	11					
ANR	159731	CallExpression	"printf ( ""         Toward a Theory for Scheduling Dags in Internet-Based Computing.\\n"" )"		159603	0					
ANR	159732	Callee	printf		159603	0					
ANR	159733	Identifier	printf		159603	0					
ANR	159734	ArgumentList	"""         Toward a Theory for Scheduling Dags in Internet-Based Computing.\\n"""		159603	1					
ANR	159735	Argument	"""         Toward a Theory for Scheduling Dags in Internet-Based Computing.\\n"""		159603	0					
ANR	159736	PrimaryExpression	"""         Toward a Theory for Scheduling Dags in Internet-Based Computing.\\n"""		159603	0					
ANR	159737	ExpressionStatement	"printf ( ""         IEEE Transactions on Computers (2005) to appear\\n"" )"		159603	12					
ANR	159738	CallExpression	"printf ( ""         IEEE Transactions on Computers (2005) to appear\\n"" )"		159603	0					
ANR	159739	Callee	printf		159603	0					
ANR	159740	Identifier	printf		159603	0					
ANR	159741	ArgumentList	"""         IEEE Transactions on Computers (2005) to appear\\n"""		159603	1					
ANR	159742	Argument	"""         IEEE Transactions on Computers (2005) to appear\\n"""		159603	0					
ANR	159743	PrimaryExpression	"""         IEEE Transactions on Computers (2005) to appear\\n"""		159603	0					
ANR	159744	ExpressionStatement	"printf ( ""         (preliminary version IPDPS'05)\\n"" )"		159603	13					
ANR	159745	CallExpression	"printf ( ""         (preliminary version IPDPS'05)\\n"" )"		159603	0					
ANR	159746	Callee	printf		159603	0					
ANR	159747	Identifier	printf		159603	0					
ANR	159748	ArgumentList	"""         (preliminary version IPDPS'05)\\n"""		159603	1					
ANR	159749	Argument	"""         (preliminary version IPDPS'05)\\n"""		159603	0					
ANR	159750	PrimaryExpression	"""         (preliminary version IPDPS'05)\\n"""		159603	0					
ANR	159751	ExpressionStatement	"printf ( ""   The algorithm prioritizes jobs so as to try to maximize the number\\n"" )"		159603	14					
ANR	159752	CallExpression	"printf ( ""   The algorithm prioritizes jobs so as to try to maximize the number\\n"" )"		159603	0					
ANR	159753	Callee	printf		159603	0					
ANR	159754	Identifier	printf		159603	0					
ANR	159755	ArgumentList	"""   The algorithm prioritizes jobs so as to try to maximize the number\\n"""		159603	1					
ANR	159756	Argument	"""   The algorithm prioritizes jobs so as to try to maximize the number\\n"""		159603	0					
ANR	159757	PrimaryExpression	"""   The algorithm prioritizes jobs so as to try to maximize the number\\n"""		159603	0					
ANR	159758	ExpressionStatement	"printf ( ""   of eligible jobs at any step of the computation, thus helping improve\\n"" )"		159603	15					
ANR	159759	CallExpression	"printf ( ""   of eligible jobs at any step of the computation, thus helping improve\\n"" )"		159603	0					
ANR	159760	Callee	printf		159603	0					
ANR	159761	Identifier	printf		159603	0					
ANR	159762	ArgumentList	"""   of eligible jobs at any step of the computation, thus helping improve\\n"""		159603	1					
ANR	159763	Argument	"""   of eligible jobs at any step of the computation, thus helping improve\\n"""		159603	0					
ANR	159764	PrimaryExpression	"""   of eligible jobs at any step of the computation, thus helping improve\\n"""		159603	0					
ANR	159765	ExpressionStatement	"printf ( ""   the utilization of workers in the presence of unpredictable variability\\n"" )"		159603	16					
ANR	159766	CallExpression	"printf ( ""   the utilization of workers in the presence of unpredictable variability\\n"" )"		159603	0					
ANR	159767	Callee	printf		159603	0					
ANR	159768	Identifier	printf		159603	0					
ANR	159769	ArgumentList	"""   the utilization of workers in the presence of unpredictable variability\\n"""		159603	1					
ANR	159770	Argument	"""   the utilization of workers in the presence of unpredictable variability\\n"""		159603	0					
ANR	159771	PrimaryExpression	"""   the utilization of workers in the presence of unpredictable variability\\n"""		159603	0					
ANR	159772	ExpressionStatement	"printf ( ""   in the number of workers available during the computation.\\n"" )"		159603	17					
ANR	159773	CallExpression	"printf ( ""   in the number of workers available during the computation.\\n"" )"		159603	0					
ANR	159774	Callee	printf		159603	0					
ANR	159775	Identifier	printf		159603	0					
ANR	159776	ArgumentList	"""   in the number of workers available during the computation.\\n"""		159603	1					
ANR	159777	Argument	"""   in the number of workers available during the computation.\\n"""		159603	0					
ANR	159778	PrimaryExpression	"""   in the number of workers available during the computation.\\n"""		159603	0					
ANR	159779	ExpressionStatement	"printf ( ""   The algorithm decomposes the dag of job dependencies extracted from\\n"" )"		159603	18					
ANR	159780	CallExpression	"printf ( ""   The algorithm decomposes the dag of job dependencies extracted from\\n"" )"		159603	0					
ANR	159781	Callee	printf		159603	0					
ANR	159782	Identifier	printf		159603	0					
ANR	159783	ArgumentList	"""   The algorithm decomposes the dag of job dependencies extracted from\\n"""		159603	1					
ANR	159784	Argument	"""   The algorithm decomposes the dag of job dependencies extracted from\\n"""		159603	0					
ANR	159785	PrimaryExpression	"""   The algorithm decomposes the dag of job dependencies extracted from\\n"""		159603	0					
ANR	159786	ExpressionStatement	"printf ( ""   the DAGMan file, prioritizes the components, and schedules them in\\n"" )"		159603	19					
ANR	159787	CallExpression	"printf ( ""   the DAGMan file, prioritizes the components, and schedules them in\\n"" )"		159603	0					
ANR	159788	Callee	printf		159603	0					
ANR	159789	Identifier	printf		159603	0					
ANR	159790	ArgumentList	"""   the DAGMan file, prioritizes the components, and schedules them in\\n"""		159603	1					
ANR	159791	Argument	"""   the DAGMan file, prioritizes the components, and schedules them in\\n"""		159603	0					
ANR	159792	PrimaryExpression	"""   the DAGMan file, prioritizes the components, and schedules them in\\n"""		159603	0					
ANR	159793	ExpressionStatement	"printf ( ""   a topological sort order observing the priorities. An optimal \\n"" )"		159603	20					
ANR	159794	CallExpression	"printf ( ""   a topological sort order observing the priorities. An optimal \\n"" )"		159603	0					
ANR	159795	Callee	printf		159603	0					
ANR	159796	Identifier	printf		159603	0					
ANR	159797	ArgumentList	"""   a topological sort order observing the priorities. An optimal \\n"""		159603	1					
ANR	159798	Argument	"""   a topological sort order observing the priorities. An optimal \\n"""		159603	0					
ANR	159799	PrimaryExpression	"""   a topological sort order observing the priorities. An optimal \\n"""		159603	0					
ANR	159800	ExpressionStatement	"printf ( ""   prioritization is produced for any dag composed of W-dags, M-dags, N-dags,\\n"" )"		159603	21					
ANR	159801	CallExpression	"printf ( ""   prioritization is produced for any dag composed of W-dags, M-dags, N-dags,\\n"" )"		159603	0					
ANR	159802	Callee	printf		159603	0					
ANR	159803	Identifier	printf		159603	0					
ANR	159804	ArgumentList	"""   prioritization is produced for any dag composed of W-dags, M-dags, N-dags,\\n"""		159603	1					
ANR	159805	Argument	"""   prioritization is produced for any dag composed of W-dags, M-dags, N-dags,\\n"""		159603	0					
ANR	159806	PrimaryExpression	"""   prioritization is produced for any dag composed of W-dags, M-dags, N-dags,\\n"""		159603	0					
ANR	159807	ExpressionStatement	"printf ( ""   C-dags, and Q-dags as defined in the paper. The tool instruments\\n"" )"		159603	22					
ANR	159808	CallExpression	"printf ( ""   C-dags, and Q-dags as defined in the paper. The tool instruments\\n"" )"		159603	0					
ANR	159809	Callee	printf		159603	0					
ANR	159810	Identifier	printf		159603	0					
ANR	159811	ArgumentList	"""   C-dags, and Q-dags as defined in the paper. The tool instruments\\n"""		159603	1					
ANR	159812	Argument	"""   C-dags, and Q-dags as defined in the paper. The tool instruments\\n"""		159603	0					
ANR	159813	PrimaryExpression	"""   C-dags, and Q-dags as defined in the paper. The tool instruments\\n"""		159603	0					
ANR	159814	ExpressionStatement	"printf ( ""   the DAGMan file, and corresponding submit description files,\\n"" )"		159603	23					
ANR	159815	CallExpression	"printf ( ""   the DAGMan file, and corresponding submit description files,\\n"" )"		159603	0					
ANR	159816	Callee	printf		159603	0					
ANR	159817	Identifier	printf		159603	0					
ANR	159818	ArgumentList	"""   the DAGMan file, and corresponding submit description files,\\n"""		159603	1					
ANR	159819	Argument	"""   the DAGMan file, and corresponding submit description files,\\n"""		159603	0					
ANR	159820	PrimaryExpression	"""   the DAGMan file, and corresponding submit description files,\\n"""		159603	0					
ANR	159821	ExpressionStatement	"printf ( ""   so as to utilize Condor's mechanism for sequencing job submissions.\\n"" )"		159603	24					
ANR	159822	CallExpression	"printf ( ""   so as to utilize Condor's mechanism for sequencing job submissions.\\n"" )"		159603	0					
ANR	159823	Callee	printf		159603	0					
ANR	159824	Identifier	printf		159603	0					
ANR	159825	ArgumentList	"""   so as to utilize Condor's mechanism for sequencing job submissions.\\n"""		159603	1					
ANR	159826	Argument	"""   so as to utilize Condor's mechanism for sequencing job submissions.\\n"""		159603	0					
ANR	159827	PrimaryExpression	"""   so as to utilize Condor's mechanism for sequencing job submissions.\\n"""		159603	0					
ANR	159828	ExpressionStatement	"printf ( ""   Original files are backed up with the suffix \\"".OLD\\"".\\n"" )"		159603	25					
ANR	159829	CallExpression	"printf ( ""   Original files are backed up with the suffix \\"".OLD\\"".\\n"" )"		159603	0					
ANR	159830	Callee	printf		159603	0					
ANR	159831	Identifier	printf		159603	0					
ANR	159832	ArgumentList	"""   Original files are backed up with the suffix \\"".OLD\\"".\\n"""		159603	1					
ANR	159833	Argument	"""   Original files are backed up with the suffix \\"".OLD\\"".\\n"""		159603	0					
ANR	159834	PrimaryExpression	"""   Original files are backed up with the suffix \\"".OLD\\"".\\n"""		159603	0					
ANR	159835	ExpressionStatement	"printf ( ""\\n"" )"		159603	26					
ANR	159836	CallExpression	"printf ( ""\\n"" )"		159603	0					
ANR	159837	Callee	printf		159603	0					
ANR	159838	Identifier	printf		159603	0					
ANR	159839	ArgumentList	"""\\n"""		159603	1					
ANR	159840	Argument	"""\\n"""		159603	0					
ANR	159841	PrimaryExpression	"""\\n"""		159603	0					
ANR	159842	ExpressionStatement	"printf ( ""TYPICAL USAGE\\n"" )"		159603	27					
ANR	159843	CallExpression	"printf ( ""TYPICAL USAGE\\n"" )"		159603	0					
ANR	159844	Callee	printf		159603	0					
ANR	159845	Identifier	printf		159603	0					
ANR	159846	ArgumentList	"""TYPICAL USAGE\\n"""		159603	1					
ANR	159847	Argument	"""TYPICAL USAGE\\n"""		159603	0					
ANR	159848	PrimaryExpression	"""TYPICAL USAGE\\n"""		159603	0					
ANR	159849	ExpressionStatement	"printf ( ""   First run\\n"" )"		159603	28					
ANR	159850	CallExpression	"printf ( ""   First run\\n"" )"		159603	0					
ANR	159851	Callee	printf		159603	0					
ANR	159852	Identifier	printf		159603	0					
ANR	159853	ArgumentList	"""   First run\\n"""		159603	1					
ANR	159854	Argument	"""   First run\\n"""		159603	0					
ANR	159855	PrimaryExpression	"""   First run\\n"""		159603	0					
ANR	159856	ExpressionStatement	"printf ( ""         prio foo.dag\\n"" )"		159603	29					
ANR	159857	CallExpression	"printf ( ""         prio foo.dag\\n"" )"		159603	0					
ANR	159858	Callee	printf		159603	0					
ANR	159859	Identifier	printf		159603	0					
ANR	159860	ArgumentList	"""         prio foo.dag\\n"""		159603	1					
ANR	159861	Argument	"""         prio foo.dag\\n"""		159603	0					
ANR	159862	PrimaryExpression	"""         prio foo.dag\\n"""		159603	0					
ANR	159863	ExpressionStatement	"printf ( ""   then run\\n"" )"		159603	30					
ANR	159864	CallExpression	"printf ( ""   then run\\n"" )"		159603	0					
ANR	159865	Callee	printf		159603	0					
ANR	159866	Identifier	printf		159603	0					
ANR	159867	ArgumentList	"""   then run\\n"""		159603	1					
ANR	159868	Argument	"""   then run\\n"""		159603	0					
ANR	159869	PrimaryExpression	"""   then run\\n"""		159603	0					
ANR	159870	ExpressionStatement	"printf ( ""         condor_submit_dag foo.dag\\n"" )"		159603	31					
ANR	159871	CallExpression	"printf ( ""         condor_submit_dag foo.dag\\n"" )"		159603	0					
ANR	159872	Callee	printf		159603	0					
ANR	159873	Identifier	printf		159603	0					
ANR	159874	ArgumentList	"""         condor_submit_dag foo.dag\\n"""		159603	1					
ANR	159875	Argument	"""         condor_submit_dag foo.dag\\n"""		159603	0					
ANR	159876	PrimaryExpression	"""         condor_submit_dag foo.dag\\n"""		159603	0					
ANR	159877	ExpressionStatement	"printf ( ""   Do not use the -maxjobs option for condor_submit_dag.\\n"" )"		159603	32					
ANR	159878	CallExpression	"printf ( ""   Do not use the -maxjobs option for condor_submit_dag.\\n"" )"		159603	0					
ANR	159879	Callee	printf		159603	0					
ANR	159880	Identifier	printf		159603	0					
ANR	159881	ArgumentList	"""   Do not use the -maxjobs option for condor_submit_dag.\\n"""		159603	1					
ANR	159882	Argument	"""   Do not use the -maxjobs option for condor_submit_dag.\\n"""		159603	0					
ANR	159883	PrimaryExpression	"""   Do not use the -maxjobs option for condor_submit_dag.\\n"""		159603	0					
ANR	159884	ExpressionStatement	"printf ( ""\\n"" )"		159603	33					
ANR	159885	CallExpression	"printf ( ""\\n"" )"		159603	0					
ANR	159886	Callee	printf		159603	0					
ANR	159887	Identifier	printf		159603	0					
ANR	159888	ArgumentList	"""\\n"""		159603	1					
ANR	159889	Argument	"""\\n"""		159603	0					
ANR	159890	PrimaryExpression	"""\\n"""		159603	0					
ANR	159891	ExpressionStatement	"printf ( ""OPTIONS\\n"" )"		159603	34					
ANR	159892	CallExpression	"printf ( ""OPTIONS\\n"" )"		159603	0					
ANR	159893	Callee	printf		159603	0					
ANR	159894	Identifier	printf		159603	0					
ANR	159895	ArgumentList	"""OPTIONS\\n"""		159603	1					
ANR	159896	Argument	"""OPTIONS\\n"""		159603	0					
ANR	159897	PrimaryExpression	"""OPTIONS\\n"""		159603	0					
ANR	159898	ExpressionStatement	"printf ( ""\\n"" )"		159603	35					
ANR	159899	CallExpression	"printf ( ""\\n"" )"		159603	0					
ANR	159900	Callee	printf		159603	0					
ANR	159901	Identifier	printf		159603	0					
ANR	159902	ArgumentList	"""\\n"""		159603	1					
ANR	159903	Argument	"""\\n"""		159603	0					
ANR	159904	PrimaryExpression	"""\\n"""		159603	0					
ANR	159905	ExpressionStatement	"printf ( ""   -s               does not instrument the submit description file of each\\n"" )"		159603	36					
ANR	159906	CallExpression	"printf ( ""   -s               does not instrument the submit description file of each\\n"" )"		159603	0					
ANR	159907	Callee	printf		159603	0					
ANR	159908	Identifier	printf		159603	0					
ANR	159909	ArgumentList	"""   -s               does not instrument the submit description file of each\\n"""		159603	1					
ANR	159910	Argument	"""   -s               does not instrument the submit description file of each\\n"""		159603	0					
ANR	159911	PrimaryExpression	"""   -s               does not instrument the submit description file of each\\n"""		159603	0					
ANR	159912	ExpressionStatement	"printf ( ""                    job to add there a JOBPRIORITY macro.\\n"" )"		159603	37					
ANR	159913	CallExpression	"printf ( ""                    job to add there a JOBPRIORITY macro.\\n"" )"		159603	0					
ANR	159914	Callee	printf		159603	0					
ANR	159915	Identifier	printf		159603	0					
ANR	159916	ArgumentList	"""                    job to add there a JOBPRIORITY macro.\\n"""		159603	1					
ANR	159917	Argument	"""                    job to add there a JOBPRIORITY macro.\\n"""		159603	0					
ANR	159918	PrimaryExpression	"""                    job to add there a JOBPRIORITY macro.\\n"""		159603	0					
ANR	159919	ExpressionStatement	"printf ( ""\\n"" )"		159603	38					
ANR	159920	CallExpression	"printf ( ""\\n"" )"		159603	0					
ANR	159921	Callee	printf		159603	0					
ANR	159922	Identifier	printf		159603	0					
ANR	159923	ArgumentList	"""\\n"""		159603	1					
ANR	159924	Argument	"""\\n"""		159603	0					
ANR	159925	PrimaryExpression	"""\\n"""		159603	0					
ANR	159926	ExpressionStatement	"printf ( ""   -p OUTfile.prio  saves a list of job names in the order from the highest\\n"" )"		159603	39					
ANR	159927	CallExpression	"printf ( ""   -p OUTfile.prio  saves a list of job names in the order from the highest\\n"" )"		159603	0					
ANR	159928	Callee	printf		159603	0					
ANR	159929	Identifier	printf		159603	0					
ANR	159930	ArgumentList	"""   -p OUTfile.prio  saves a list of job names in the order from the highest\\n"""		159603	1					
ANR	159931	Argument	"""   -p OUTfile.prio  saves a list of job names in the order from the highest\\n"""		159603	0					
ANR	159932	PrimaryExpression	"""   -p OUTfile.prio  saves a list of job names in the order from the highest\\n"""		159603	0					
ANR	159933	ExpressionStatement	"printf ( ""                    priority one to the lowest priority one.\\n"" )"		159603	40					
ANR	159934	CallExpression	"printf ( ""                    priority one to the lowest priority one.\\n"" )"		159603	0					
ANR	159935	Callee	printf		159603	0					
ANR	159936	Identifier	printf		159603	0					
ANR	159937	ArgumentList	"""                    priority one to the lowest priority one.\\n"""		159603	1					
ANR	159938	Argument	"""                    priority one to the lowest priority one.\\n"""		159603	0					
ANR	159939	PrimaryExpression	"""                    priority one to the lowest priority one.\\n"""		159603	0					
ANR	159940	ExpressionStatement	"printf ( ""\\n"" )"		159603	41					
ANR	159941	CallExpression	"printf ( ""\\n"" )"		159603	0					
ANR	159942	Callee	printf		159603	0					
ANR	159943	Identifier	printf		159603	0					
ANR	159944	ArgumentList	"""\\n"""		159603	1					
ANR	159945	Argument	"""\\n"""		159603	0					
ANR	159946	PrimaryExpression	"""\\n"""		159603	0					
ANR	159947	ExpressionStatement	"printf ( ""   -e OUTfile.elig  saves the eligibility plot when jobs are executed in\\n"" )"		159603	42					
ANR	159948	CallExpression	"printf ( ""   -e OUTfile.elig  saves the eligibility plot when jobs are executed in\\n"" )"		159603	0					
ANR	159949	Callee	printf		159603	0					
ANR	159950	Identifier	printf		159603	0					
ANR	159951	ArgumentList	"""   -e OUTfile.elig  saves the eligibility plot when jobs are executed in\\n"""		159603	1					
ANR	159952	Argument	"""   -e OUTfile.elig  saves the eligibility plot when jobs are executed in\\n"""		159603	0					
ANR	159953	PrimaryExpression	"""   -e OUTfile.elig  saves the eligibility plot when jobs are executed in\\n"""		159603	0					
ANR	159954	ExpressionStatement	"printf ( ""                    the order of the priorities.\\n"" )"		159603	43					
ANR	159955	CallExpression	"printf ( ""                    the order of the priorities.\\n"" )"		159603	0					
ANR	159956	Callee	printf		159603	0					
ANR	159957	Identifier	printf		159603	0					
ANR	159958	ArgumentList	"""                    the order of the priorities.\\n"""		159603	1					
ANR	159959	Argument	"""                    the order of the priorities.\\n"""		159603	0					
ANR	159960	PrimaryExpression	"""                    the order of the priorities.\\n"""		159603	0					
ANR	159961	ExpressionStatement	"printf ( ""\\n"" )"		159603	44					
ANR	159962	CallExpression	"printf ( ""\\n"" )"		159603	0					
ANR	159963	Callee	printf		159603	0					
ANR	159964	Identifier	printf		159603	0					
ANR	159965	ArgumentList	"""\\n"""		159603	1					
ANR	159966	Argument	"""\\n"""		159603	0					
ANR	159967	PrimaryExpression	"""\\n"""		159603	0					
ANR	159968	ExpressionStatement	"printf ( ""   -g OUTfile.dot   saves the dag in the DOT format for GraphViz.\\n"" )"		159603	45					
ANR	159969	CallExpression	"printf ( ""   -g OUTfile.dot   saves the dag in the DOT format for GraphViz.\\n"" )"		159603	0					
ANR	159970	Callee	printf		159603	0					
ANR	159971	Identifier	printf		159603	0					
ANR	159972	ArgumentList	"""   -g OUTfile.dot   saves the dag in the DOT format for GraphViz.\\n"""		159603	1					
ANR	159973	Argument	"""   -g OUTfile.dot   saves the dag in the DOT format for GraphViz.\\n"""		159603	0					
ANR	159974	PrimaryExpression	"""   -g OUTfile.dot   saves the dag in the DOT format for GraphViz.\\n"""		159603	0					
ANR	159975	ExpressionStatement	"printf ( ""\\n"" )"		159603	46					
ANR	159976	CallExpression	"printf ( ""\\n"" )"		159603	0					
ANR	159977	Callee	printf		159603	0					
ANR	159978	Identifier	printf		159603	0					
ANR	159979	ArgumentList	"""\\n"""		159603	1					
ANR	159980	Argument	"""\\n"""		159603	0					
ANR	159981	PrimaryExpression	"""\\n"""		159603	0					
ANR	159982	ExpressionStatement	"printf ( ""   -r OUTfileS.dot  saves the \\""superdag\\"" in the DOT format for GraphViz.\\n"" )"		159603	47					
ANR	159983	CallExpression	"printf ( ""   -r OUTfileS.dot  saves the \\""superdag\\"" in the DOT format for GraphViz.\\n"" )"		159603	0					
ANR	159984	Callee	printf		159603	0					
ANR	159985	Identifier	printf		159603	0					
ANR	159986	ArgumentList	"""   -r OUTfileS.dot  saves the \\""superdag\\"" in the DOT format for GraphViz.\\n"""		159603	1					
ANR	159987	Argument	"""   -r OUTfileS.dot  saves the \\""superdag\\"" in the DOT format for GraphViz.\\n"""		159603	0					
ANR	159988	PrimaryExpression	"""   -r OUTfileS.dot  saves the \\""superdag\\"" in the DOT format for GraphViz.\\n"""		159603	0					
ANR	159989	ExpressionStatement	"printf ( ""\\n"" )"		159603	48					
ANR	159990	CallExpression	"printf ( ""\\n"" )"		159603	0					
ANR	159991	Callee	printf		159603	0					
ANR	159992	Identifier	printf		159603	0					
ANR	159993	ArgumentList	"""\\n"""		159603	1					
ANR	159994	Argument	"""\\n"""		159603	0					
ANR	159995	PrimaryExpression	"""\\n"""		159603	0					
ANR	159996	ExpressionStatement	"printf ( ""   -c OUTfileC      saves each component of the dag in the DOT format for\\n"" )"		159603	49					
ANR	159997	CallExpression	"printf ( ""   -c OUTfileC      saves each component of the dag in the DOT format for\\n"" )"		159603	0					
ANR	159998	Callee	printf		159603	0					
ANR	159999	Identifier	printf		159603	0					
ANR	160000	ArgumentList	"""   -c OUTfileC      saves each component of the dag in the DOT format for\\n"""		159603	1					
ANR	160001	Argument	"""   -c OUTfileC      saves each component of the dag in the DOT format for\\n"""		159603	0					
ANR	160002	PrimaryExpression	"""   -c OUTfileC      saves each component of the dag in the DOT format for\\n"""		159603	0					
ANR	160003	ExpressionStatement	"printf ( ""                    GraphViz with an appended sequence number and \\"".dot\\"".\\n"" )"		159603	50					
ANR	160004	CallExpression	"printf ( ""                    GraphViz with an appended sequence number and \\"".dot\\"".\\n"" )"		159603	0					
ANR	160005	Callee	printf		159603	0					
ANR	160006	Identifier	printf		159603	0					
ANR	160007	ArgumentList	"""                    GraphViz with an appended sequence number and \\"".dot\\"".\\n"""		159603	1					
ANR	160008	Argument	"""                    GraphViz with an appended sequence number and \\"".dot\\"".\\n"""		159603	0					
ANR	160009	PrimaryExpression	"""                    GraphViz with an appended sequence number and \\"".dot\\"".\\n"""		159603	0					
ANR	160010	ExpressionStatement	"printf ( ""\\n"" )"		159603	51					
ANR	160011	CallExpression	"printf ( ""\\n"" )"		159603	0					
ANR	160012	Callee	printf		159603	0					
ANR	160013	Identifier	printf		159603	0					
ANR	160014	ArgumentList	"""\\n"""		159603	1					
ANR	160015	Argument	"""\\n"""		159603	0					
ANR	160016	PrimaryExpression	"""\\n"""		159603	0					
ANR	160017	ExpressionStatement	"printf ( ""AUTHOR\\n"" )"		159603	52					
ANR	160018	CallExpression	"printf ( ""AUTHOR\\n"" )"		159603	0					
ANR	160019	Callee	printf		159603	0					
ANR	160020	Identifier	printf		159603	0					
ANR	160021	ArgumentList	"""AUTHOR\\n"""		159603	1					
ANR	160022	Argument	"""AUTHOR\\n"""		159603	0					
ANR	160023	PrimaryExpression	"""AUTHOR\\n"""		159603	0					
ANR	160024	ExpressionStatement	"printf ( ""   Grzegorz Malewicz\\n"" )"		159603	53					
ANR	160025	CallExpression	"printf ( ""   Grzegorz Malewicz\\n"" )"		159603	0					
ANR	160026	Callee	printf		159603	0					
ANR	160027	Identifier	printf		159603	0					
ANR	160028	ArgumentList	"""   Grzegorz Malewicz\\n"""		159603	1					
ANR	160029	Argument	"""   Grzegorz Malewicz\\n"""		159603	0					
ANR	160030	PrimaryExpression	"""   Grzegorz Malewicz\\n"""		159603	0					
ANR	160031	ExpressionStatement	"printf ( ""\\n"" )"		159603	54					
ANR	160032	CallExpression	"printf ( ""\\n"" )"		159603	0					
ANR	160033	Callee	printf		159603	0					
ANR	160034	Identifier	printf		159603	0					
ANR	160035	ArgumentList	"""\\n"""		159603	1					
ANR	160036	Argument	"""\\n"""		159603	0					
ANR	160037	PrimaryExpression	"""\\n"""		159603	0					
ANR	160038	ExpressionStatement	"printf ( ""HISTORY\\n"" )"		159603	55					
ANR	160039	CallExpression	"printf ( ""HISTORY\\n"" )"		159603	0					
ANR	160040	Callee	printf		159603	0					
ANR	160041	Identifier	printf		159603	0					
ANR	160042	ArgumentList	"""HISTORY\\n"""		159603	1					
ANR	160043	Argument	"""HISTORY\\n"""		159603	0					
ANR	160044	PrimaryExpression	"""HISTORY\\n"""		159603	0					
ANR	160045	ExpressionStatement	"printf ( ""   Implemented during the summer of 2005. Released in October of 2005\\n"" )"		159603	56					
ANR	160046	CallExpression	"printf ( ""   Implemented during the summer of 2005. Released in October of 2005\\n"" )"		159603	0					
ANR	160047	Callee	printf		159603	0					
ANR	160048	Identifier	printf		159603	0					
ANR	160049	ArgumentList	"""   Implemented during the summer of 2005. Released in October of 2005\\n"""		159603	1					
ANR	160050	Argument	"""   Implemented during the summer of 2005. Released in October of 2005\\n"""		159603	0					
ANR	160051	PrimaryExpression	"""   Implemented during the summer of 2005. Released in October of 2005\\n"""		159603	0					
ANR	160052	ExpressionStatement	"printf ( ""   within the Condor Project (http://www.cs.wisc.edu/condor)\\n"" )"		159603	57					
ANR	160053	CallExpression	"printf ( ""   within the Condor Project (http://www.cs.wisc.edu/condor)\\n"" )"		159603	0					
ANR	160054	Callee	printf		159603	0					
ANR	160055	Identifier	printf		159603	0					
ANR	160056	ArgumentList	"""   within the Condor Project (http://www.cs.wisc.edu/condor)\\n"""		159603	1					
ANR	160057	Argument	"""   within the Condor Project (http://www.cs.wisc.edu/condor)\\n"""		159603	0					
ANR	160058	PrimaryExpression	"""   within the Condor Project (http://www.cs.wisc.edu/condor)\\n"""		159603	0					
ANR	160059	ExpressionStatement	"printf ( ""\\n"" )"		159603	58					
ANR	160060	CallExpression	"printf ( ""\\n"" )"		159603	0					
ANR	160061	Callee	printf		159603	0					
ANR	160062	Identifier	printf		159603	0					
ANR	160063	ArgumentList	"""\\n"""		159603	1					
ANR	160064	Argument	"""\\n"""		159603	0					
ANR	160065	PrimaryExpression	"""\\n"""		159603	0					
ANR	160066	ExpressionStatement	"printf ( ""ACKNOWLEDGEMENT\\n"" )"		159603	59					
ANR	160067	CallExpression	"printf ( ""ACKNOWLEDGEMENT\\n"" )"		159603	0					
ANR	160068	Callee	printf		159603	0					
ANR	160069	Identifier	printf		159603	0					
ANR	160070	ArgumentList	"""ACKNOWLEDGEMENT\\n"""		159603	1					
ANR	160071	Argument	"""ACKNOWLEDGEMENT\\n"""		159603	0					
ANR	160072	PrimaryExpression	"""ACKNOWLEDGEMENT\\n"""		159603	0					
ANR	160073	ExpressionStatement	"printf ( ""   The work of the author was supported in part by the National Science\\n"" )"		159603	60					
ANR	160074	CallExpression	"printf ( ""   The work of the author was supported in part by the National Science\\n"" )"		159603	0					
ANR	160075	Callee	printf		159603	0					
ANR	160076	Identifier	printf		159603	0					
ANR	160077	ArgumentList	"""   The work of the author was supported in part by the National Science\\n"""		159603	1					
ANR	160078	Argument	"""   The work of the author was supported in part by the National Science\\n"""		159603	0					
ANR	160079	PrimaryExpression	"""   The work of the author was supported in part by the National Science\\n"""		159603	0					
ANR	160080	ExpressionStatement	"printf ( ""   Foundation grant ITR-800864, and was performed during the author's\\n"" )"		159603	61					
ANR	160081	CallExpression	"printf ( ""   Foundation grant ITR-800864, and was performed during the author's\\n"" )"		159603	0					
ANR	160082	Callee	printf		159603	0					
ANR	160083	Identifier	printf		159603	0					
ANR	160084	ArgumentList	"""   Foundation grant ITR-800864, and was performed during the author's\\n"""		159603	1					
ANR	160085	Argument	"""   Foundation grant ITR-800864, and was performed during the author's\\n"""		159603	0					
ANR	160086	PrimaryExpression	"""   Foundation grant ITR-800864, and was performed during the author's\\n"""		159603	0					
ANR	160087	ExpressionStatement	"printf ( ""   summer 2005 visit to the Division of Mathematics and Computer Science,\\n"" )"		159603	62					
ANR	160088	CallExpression	"printf ( ""   summer 2005 visit to the Division of Mathematics and Computer Science,\\n"" )"		159603	0					
ANR	160089	Callee	printf		159603	0					
ANR	160090	Identifier	printf		159603	0					
ANR	160091	ArgumentList	"""   summer 2005 visit to the Division of Mathematics and Computer Science,\\n"""		159603	1					
ANR	160092	Argument	"""   summer 2005 visit to the Division of Mathematics and Computer Science,\\n"""		159603	0					
ANR	160093	PrimaryExpression	"""   summer 2005 visit to the Division of Mathematics and Computer Science,\\n"""		159603	0					
ANR	160094	ExpressionStatement	"printf ( ""   Argonne National Laboratory (http://www.mcs.anl.gov).\\n"" )"		159603	63					
ANR	160095	CallExpression	"printf ( ""   Argonne National Laboratory (http://www.mcs.anl.gov).\\n"" )"		159603	0					
ANR	160096	Callee	printf		159603	0					
ANR	160097	Identifier	printf		159603	0					
ANR	160098	ArgumentList	"""   Argonne National Laboratory (http://www.mcs.anl.gov).\\n"""		159603	1					
ANR	160099	Argument	"""   Argonne National Laboratory (http://www.mcs.anl.gov).\\n"""		159603	0					
ANR	160100	PrimaryExpression	"""   Argonne National Laboratory (http://www.mcs.anl.gov).\\n"""		159603	0					
ANR	160101	ReturnStatement	return - 1 ;		159603	64					
ANR	160102	UnaryOperationExpression	- 1		159603	0					
ANR	160103	UnaryOperator	-		159603	0					
ANR	160104	PrimaryExpression	1		159603	1					
ANR	160105	ExpressionStatement			159603	9					
ANR	160106	ForStatement	for ( i = 0 ; i < argc ; i ++ )		159603	10					
ANR	160107	ForInit	i = 0 ;		159603	0					
ANR	160108	AssignmentExpression	i = 0		159603	0		=			
ANR	160109	Identifier	i		159603	0					
ANR	160110	PrimaryExpression	0		159603	1					
ANR	160111	Condition	i < argc		159603	1					
ANR	160112	RelationalExpression	i < argc		159603	0		<			
ANR	160113	Identifier	i		159603	0					
ANR	160114	Identifier	argc		159603	1					
ANR	160115	PostIncDecOperationExpression	i ++		159603	2					
ANR	160116	Identifier	i		159603	0					
ANR	160117	IncDec	++		159603	1					
ANR	160118	CompoundStatement		86:26:4032:4032	159603	3					
ANR	160119	IfStatement	if ( MAX_ARGV_LEN - 5 < strlen ( argv [ i ] ) )		159603	0					
ANR	160120	Condition	MAX_ARGV_LEN - 5 < strlen ( argv [ i ] )		159603	0					
ANR	160121	RelationalExpression	MAX_ARGV_LEN - 5 < strlen ( argv [ i ] )		159603	0		<			
ANR	160122	AdditiveExpression	MAX_ARGV_LEN - 5		159603	0		-			
ANR	160123	Identifier	MAX_ARGV_LEN		159603	0					
ANR	160124	PrimaryExpression	5		159603	1					
ANR	160125	CallExpression	strlen ( argv [ i ] )		159603	1					
ANR	160126	Callee	strlen		159603	0					
ANR	160127	Identifier	strlen		159603	0					
ANR	160128	ArgumentList	argv [ i ]		159603	1					
ANR	160129	Argument	argv [ i ]		159603	0					
ANR	160130	ArrayIndexing	argv [ i ]		159603	0					
ANR	160131	Identifier	argv		159603	0					
ANR	160132	Identifier	i		159603	1					
ANR	160133	CompoundStatement		87:42:4076:4076	159603	1					
ANR	160134	ExpressionStatement	"alert ( """" )"		159603	0					
ANR	160135	CallExpression	"alert ( """" )"		159603	0					
ANR	160136	Callee	alert		159603	0					
ANR	160137	Identifier	alert		159603	0					
ANR	160138	ArgumentList	""""""		159603	1					
ANR	160139	Argument	""""""		159603	0					
ANR	160140	PrimaryExpression	""""""		159603	0					
ANR	160141	ExpressionStatement	"printf ( ""argument number %d exceeds %d characters\\n"" , i , MAX_ARGV_LEN - 5 )"		159603	1					
ANR	160142	CallExpression	"printf ( ""argument number %d exceeds %d characters\\n"" , i , MAX_ARGV_LEN - 5 )"		159603	0					
ANR	160143	Callee	printf		159603	0					
ANR	160144	Identifier	printf		159603	0					
ANR	160145	ArgumentList	"""argument number %d exceeds %d characters\\n"""		159603	1					
ANR	160146	Argument	"""argument number %d exceeds %d characters\\n"""		159603	0					
ANR	160147	PrimaryExpression	"""argument number %d exceeds %d characters\\n"""		159603	0					
ANR	160148	Argument	i		159603	1					
ANR	160149	Identifier	i		159603	0					
ANR	160150	Argument	MAX_ARGV_LEN - 5		159603	2					
ANR	160151	AdditiveExpression	MAX_ARGV_LEN - 5		159603	0		-			
ANR	160152	Identifier	MAX_ARGV_LEN		159603	0					
ANR	160153	PrimaryExpression	5		159603	1					
ANR	160154	ReturnStatement	return - 1 ;		159603	2					
ANR	160155	UnaryOperationExpression	- 1		159603	0					
ANR	160156	UnaryOperator	-		159603	0					
ANR	160157	PrimaryExpression	1		159603	1					
ANR	160158	ExpressionStatement			159603	11					
ANR	160159	ExpressionStatement	i = 1		159603	12					
ANR	160160	AssignmentExpression	i = 1		159603	0		=			
ANR	160161	Identifier	i		159603	0					
ANR	160162	PrimaryExpression	1		159603	1					
ANR	160163	IdentifierDeclStatement	bool argumSdf = true ;		159603	13					
ANR	160164	IdentifierDecl	argumSdf = true		159603	0					
ANR	160165	IdentifierDeclType	bool		159603	0					
ANR	160166	Identifier	argumSdf		159603	1					
ANR	160167	AssignmentExpression	argumSdf = true		159603	2		=			
ANR	160168	Identifier	true		159603	0					
ANR	160169	Identifier	true		159603	1					
ANR	160170	IdentifierDeclStatement	bool argumPrio = false ;		159603	14					
ANR	160171	IdentifierDecl	argumPrio = false		159603	0					
ANR	160172	IdentifierDeclType	bool		159603	0					
ANR	160173	Identifier	argumPrio		159603	1					
ANR	160174	AssignmentExpression	argumPrio = false		159603	2		=			
ANR	160175	Identifier	false		159603	0					
ANR	160176	Identifier	false		159603	1					
ANR	160177	IdentifierDeclStatement	bool argumElig = false ;		159603	15					
ANR	160178	IdentifierDecl	argumElig = false		159603	0					
ANR	160179	IdentifierDeclType	bool		159603	0					
ANR	160180	Identifier	argumElig		159603	1					
ANR	160181	AssignmentExpression	argumElig = false		159603	2		=			
ANR	160182	Identifier	false		159603	0					
ANR	160183	Identifier	false		159603	1					
ANR	160184	IdentifierDeclStatement	bool argumSupeRdag = false ;		159603	16					
ANR	160185	IdentifierDecl	argumSupeRdag = false		159603	0					
ANR	160186	IdentifierDeclType	bool		159603	0					
ANR	160187	Identifier	argumSupeRdag		159603	1					
ANR	160188	AssignmentExpression	argumSupeRdag = false		159603	2		=			
ANR	160189	Identifier	false		159603	0					
ANR	160190	Identifier	false		159603	1					
ANR	160191	IdentifierDeclStatement	bool argumDag = false ;		159603	17					
ANR	160192	IdentifierDecl	argumDag = false		159603	0					
ANR	160193	IdentifierDeclType	bool		159603	0					
ANR	160194	Identifier	argumDag		159603	1					
ANR	160195	AssignmentExpression	argumDag = false		159603	2		=			
ANR	160196	Identifier	false		159603	0					
ANR	160197	Identifier	false		159603	1					
ANR	160198	IdentifierDeclStatement	bool argumConstit = false ;		159603	18					
ANR	160199	IdentifierDecl	argumConstit = false		159603	0					
ANR	160200	IdentifierDeclType	bool		159603	0					
ANR	160201	Identifier	argumConstit		159603	1					
ANR	160202	AssignmentExpression	argumConstit = false		159603	2		=			
ANR	160203	Identifier	false		159603	0					
ANR	160204	Identifier	false		159603	1					
ANR	160205	IdentifierDeclStatement	char * fileNamePrio = NULL ;		159603	19					
ANR	160206	IdentifierDecl	* fileNamePrio = NULL		159603	0					
ANR	160207	IdentifierDeclType	char *		159603	0					
ANR	160208	Identifier	fileNamePrio		159603	1					
ANR	160209	AssignmentExpression	* fileNamePrio = NULL		159603	2		=			
ANR	160210	Identifier	NULL		159603	0					
ANR	160211	Identifier	NULL		159603	1					
ANR	160212	IdentifierDeclStatement	char * fileNameElig = NULL ;		159603	20					
ANR	160213	IdentifierDecl	* fileNameElig = NULL		159603	0					
ANR	160214	IdentifierDeclType	char *		159603	0					
ANR	160215	Identifier	fileNameElig		159603	1					
ANR	160216	AssignmentExpression	* fileNameElig = NULL		159603	2		=			
ANR	160217	Identifier	NULL		159603	0					
ANR	160218	Identifier	NULL		159603	1					
ANR	160219	IdentifierDeclStatement	char * fileNameSupeRdag = NULL ;		159603	21					
ANR	160220	IdentifierDecl	* fileNameSupeRdag = NULL		159603	0					
ANR	160221	IdentifierDeclType	char *		159603	0					
ANR	160222	Identifier	fileNameSupeRdag		159603	1					
ANR	160223	AssignmentExpression	* fileNameSupeRdag = NULL		159603	2		=			
ANR	160224	Identifier	NULL		159603	0					
ANR	160225	Identifier	NULL		159603	1					
ANR	160226	IdentifierDeclStatement	char * fileNameDag = NULL ;		159603	22					
ANR	160227	IdentifierDecl	* fileNameDag = NULL		159603	0					
ANR	160228	IdentifierDeclType	char *		159603	0					
ANR	160229	Identifier	fileNameDag		159603	1					
ANR	160230	AssignmentExpression	* fileNameDag = NULL		159603	2		=			
ANR	160231	Identifier	NULL		159603	0					
ANR	160232	Identifier	NULL		159603	1					
ANR	160233	IdentifierDeclStatement	char * fileNameConstit = NULL ;		159603	23					
ANR	160234	IdentifierDecl	* fileNameConstit = NULL		159603	0					
ANR	160235	IdentifierDeclType	char *		159603	0					
ANR	160236	Identifier	fileNameConstit		159603	1					
ANR	160237	AssignmentExpression	* fileNameConstit = NULL		159603	2		=			
ANR	160238	Identifier	NULL		159603	0					
ANR	160239	Identifier	NULL		159603	1					
ANR	160240	WhileStatement	while ( i < argc && '-' == argv [ i ] [ 0 ] )		159603	24					
ANR	160241	Condition	i < argc && '-' == argv [ i ] [ 0 ]		159603	0					
ANR	160242	AndExpression	i < argc && '-' == argv [ i ] [ 0 ]		159603	0		&&			
ANR	160243	RelationalExpression	i < argc		159603	0		<			
ANR	160244	Identifier	i		159603	0					
ANR	160245	Identifier	argc		159603	1					
ANR	160246	EqualityExpression	'-' == argv [ i ] [ 0 ]		159603	1		==			
ANR	160247	PrimaryExpression	'-'		159603	0					
ANR	160248	ArrayIndexing	argv [ i ] [ 0 ]		159603	1					
ANR	160249	ArrayIndexing	argv [ i ]		159603	0					
ANR	160250	Identifier	argv		159603	0					
ANR	160251	Identifier	i		159603	1					
ANR	160252	PrimaryExpression	0		159603	1					
ANR	160253	CompoundStatement		107:39:4563:4563	159603	1					
ANR	160254	IfStatement	"if ( 0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""s"" ) )"		159603	0					
ANR	160255	Condition	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""s"" )"		159603	0					
ANR	160256	EqualityExpression	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""s"" )"		159603	0		==			
ANR	160257	PrimaryExpression	0		159603	0					
ANR	160258	CallExpression	"strcmp ( & ( argv [ i ] [ 1 ] ) , ""s"" )"		159603	1					
ANR	160259	Callee	strcmp		159603	0					
ANR	160260	Identifier	strcmp		159603	0					
ANR	160261	ArgumentList	& ( argv [ i ] [ 1 ] )		159603	1					
ANR	160262	Argument	& ( argv [ i ] [ 1 ] )		159603	0					
ANR	160263	UnaryOperationExpression	& ( argv [ i ] [ 1 ] )		159603	0					
ANR	160264	UnaryOperator	&		159603	0					
ANR	160265	ArrayIndexing	argv [ i ] [ 1 ]		159603	1					
ANR	160266	ArrayIndexing	argv [ i ]		159603	0					
ANR	160267	Identifier	argv		159603	0					
ANR	160268	Identifier	i		159603	1					
ANR	160269	PrimaryExpression	1		159603	1					
ANR	160270	Argument	"""s"""		159603	1					
ANR	160271	PrimaryExpression	"""s"""		159603	0					
ANR	160272	CompoundStatement		109:41:4647:4647	159603	1					
ANR	160273	ExpressionStatement	argumSdf = false		159603	0					
ANR	160274	AssignmentExpression	argumSdf = false		159603	0		=			
ANR	160275	Identifier	argumSdf		159603	0					
ANR	160276	Identifier	false		159603	1					
ANR	160277	ExpressionStatement	i ++		159603	1					
ANR	160278	PostIncDecOperationExpression	i ++		159603	0					
ANR	160279	Identifier	i		159603	0					
ANR	160280	IncDec	++		159603	1					
ANR	160281	ElseStatement	else		159603	0					
ANR	160282	IfStatement	"if ( 0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""p"" ) )"		159603	0					
ANR	160283	Condition	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""p"" )"		159603	0					
ANR	160284	EqualityExpression	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""p"" )"		159603	0		==			
ANR	160285	PrimaryExpression	0		159603	0					
ANR	160286	CallExpression	"strcmp ( & ( argv [ i ] [ 1 ] ) , ""p"" )"		159603	1					
ANR	160287	Callee	strcmp		159603	0					
ANR	160288	Identifier	strcmp		159603	0					
ANR	160289	ArgumentList	& ( argv [ i ] [ 1 ] )		159603	1					
ANR	160290	Argument	& ( argv [ i ] [ 1 ] )		159603	0					
ANR	160291	UnaryOperationExpression	& ( argv [ i ] [ 1 ] )		159603	0					
ANR	160292	UnaryOperator	&		159603	0					
ANR	160293	ArrayIndexing	argv [ i ] [ 1 ]		159603	1					
ANR	160294	ArrayIndexing	argv [ i ]		159603	0					
ANR	160295	Identifier	argv		159603	0					
ANR	160296	Identifier	i		159603	1					
ANR	160297	PrimaryExpression	1		159603	1					
ANR	160298	Argument	"""p"""		159603	1					
ANR	160299	PrimaryExpression	"""p"""		159603	0					
ANR	160300	CompoundStatement		115:46:4779:4779	159603	1					
ANR	160301	ExpressionStatement	argumPrio = true		159603	0					
ANR	160302	AssignmentExpression	argumPrio = true		159603	0		=			
ANR	160303	Identifier	argumPrio		159603	0					
ANR	160304	Identifier	true		159603	1					
ANR	160305	ExpressionStatement	fileNamePrio = argv [ i + 1 ]		159603	1					
ANR	160306	AssignmentExpression	fileNamePrio = argv [ i + 1 ]		159603	0		=			
ANR	160307	Identifier	fileNamePrio		159603	0					
ANR	160308	ArrayIndexing	argv [ i + 1 ]		159603	1					
ANR	160309	Identifier	argv		159603	0					
ANR	160310	AdditiveExpression	i + 1		159603	1		+			
ANR	160311	Identifier	i		159603	0					
ANR	160312	PrimaryExpression	1		159603	1					
ANR	160313	ExpressionStatement	i += 2		159603	2					
ANR	160314	AssignmentExpression	i += 2		159603	0		+=			
ANR	160315	Identifier	i		159603	0					
ANR	160316	PrimaryExpression	2		159603	1					
ANR	160317	ElseStatement	else		159603	0					
ANR	160318	IfStatement	"if ( 0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""e"" ) )"		159603	0					
ANR	160319	Condition	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""e"" )"		159603	0					
ANR	160320	EqualityExpression	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""e"" )"		159603	0		==			
ANR	160321	PrimaryExpression	0		159603	0					
ANR	160322	CallExpression	"strcmp ( & ( argv [ i ] [ 1 ] ) , ""e"" )"		159603	1					
ANR	160323	Callee	strcmp		159603	0					
ANR	160324	Identifier	strcmp		159603	0					
ANR	160325	ArgumentList	& ( argv [ i ] [ 1 ] )		159603	1					
ANR	160326	Argument	& ( argv [ i ] [ 1 ] )		159603	0					
ANR	160327	UnaryOperationExpression	& ( argv [ i ] [ 1 ] )		159603	0					
ANR	160328	UnaryOperator	&		159603	0					
ANR	160329	ArrayIndexing	argv [ i ] [ 1 ]		159603	1					
ANR	160330	ArrayIndexing	argv [ i ]		159603	0					
ANR	160331	Identifier	argv		159603	0					
ANR	160332	Identifier	i		159603	1					
ANR	160333	PrimaryExpression	1		159603	1					
ANR	160334	Argument	"""e"""		159603	1					
ANR	160335	PrimaryExpression	"""e"""		159603	0					
ANR	160336	CompoundStatement		122:46:4921:4921	159603	1					
ANR	160337	ExpressionStatement	argumElig = true		159603	0					
ANR	160338	AssignmentExpression	argumElig = true		159603	0		=			
ANR	160339	Identifier	argumElig		159603	0					
ANR	160340	Identifier	true		159603	1					
ANR	160341	ExpressionStatement	fileNameElig = argv [ i + 1 ]		159603	1					
ANR	160342	AssignmentExpression	fileNameElig = argv [ i + 1 ]		159603	0		=			
ANR	160343	Identifier	fileNameElig		159603	0					
ANR	160344	ArrayIndexing	argv [ i + 1 ]		159603	1					
ANR	160345	Identifier	argv		159603	0					
ANR	160346	AdditiveExpression	i + 1		159603	1		+			
ANR	160347	Identifier	i		159603	0					
ANR	160348	PrimaryExpression	1		159603	1					
ANR	160349	ExpressionStatement	i += 2		159603	2					
ANR	160350	AssignmentExpression	i += 2		159603	0		+=			
ANR	160351	Identifier	i		159603	0					
ANR	160352	PrimaryExpression	2		159603	1					
ANR	160353	ElseStatement	else		159603	0					
ANR	160354	IfStatement	"if ( 0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""g"" ) )"		159603	0					
ANR	160355	Condition	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""g"" )"		159603	0					
ANR	160356	EqualityExpression	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""g"" )"		159603	0		==			
ANR	160357	PrimaryExpression	0		159603	0					
ANR	160358	CallExpression	"strcmp ( & ( argv [ i ] [ 1 ] ) , ""g"" )"		159603	1					
ANR	160359	Callee	strcmp		159603	0					
ANR	160360	Identifier	strcmp		159603	0					
ANR	160361	ArgumentList	& ( argv [ i ] [ 1 ] )		159603	1					
ANR	160362	Argument	& ( argv [ i ] [ 1 ] )		159603	0					
ANR	160363	UnaryOperationExpression	& ( argv [ i ] [ 1 ] )		159603	0					
ANR	160364	UnaryOperator	&		159603	0					
ANR	160365	ArrayIndexing	argv [ i ] [ 1 ]		159603	1					
ANR	160366	ArrayIndexing	argv [ i ]		159603	0					
ANR	160367	Identifier	argv		159603	0					
ANR	160368	Identifier	i		159603	1					
ANR	160369	PrimaryExpression	1		159603	1					
ANR	160370	Argument	"""g"""		159603	1					
ANR	160371	PrimaryExpression	"""g"""		159603	0					
ANR	160372	CompoundStatement		129:46:5066:5066	159603	1					
ANR	160373	ExpressionStatement	argumDag = true		159603	0					
ANR	160374	AssignmentExpression	argumDag = true		159603	0		=			
ANR	160375	Identifier	argumDag		159603	0					
ANR	160376	Identifier	true		159603	1					
ANR	160377	ExpressionStatement	fileNameDag = argv [ i + 1 ]		159603	1					
ANR	160378	AssignmentExpression	fileNameDag = argv [ i + 1 ]		159603	0		=			
ANR	160379	Identifier	fileNameDag		159603	0					
ANR	160380	ArrayIndexing	argv [ i + 1 ]		159603	1					
ANR	160381	Identifier	argv		159603	0					
ANR	160382	AdditiveExpression	i + 1		159603	1		+			
ANR	160383	Identifier	i		159603	0					
ANR	160384	PrimaryExpression	1		159603	1					
ANR	160385	ExpressionStatement	i += 2		159603	2					
ANR	160386	AssignmentExpression	i += 2		159603	0		+=			
ANR	160387	Identifier	i		159603	0					
ANR	160388	PrimaryExpression	2		159603	1					
ANR	160389	ElseStatement	else		159603	0					
ANR	160390	IfStatement	"if ( 0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""r"" ) )"		159603	0					
ANR	160391	Condition	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""r"" )"		159603	0					
ANR	160392	EqualityExpression	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""r"" )"		159603	0		==			
ANR	160393	PrimaryExpression	0		159603	0					
ANR	160394	CallExpression	"strcmp ( & ( argv [ i ] [ 1 ] ) , ""r"" )"		159603	1					
ANR	160395	Callee	strcmp		159603	0					
ANR	160396	Identifier	strcmp		159603	0					
ANR	160397	ArgumentList	& ( argv [ i ] [ 1 ] )		159603	1					
ANR	160398	Argument	& ( argv [ i ] [ 1 ] )		159603	0					
ANR	160399	UnaryOperationExpression	& ( argv [ i ] [ 1 ] )		159603	0					
ANR	160400	UnaryOperator	&		159603	0					
ANR	160401	ArrayIndexing	argv [ i ] [ 1 ]		159603	1					
ANR	160402	ArrayIndexing	argv [ i ]		159603	0					
ANR	160403	Identifier	argv		159603	0					
ANR	160404	Identifier	i		159603	1					
ANR	160405	PrimaryExpression	1		159603	1					
ANR	160406	Argument	"""r"""		159603	1					
ANR	160407	PrimaryExpression	"""r"""		159603	0					
ANR	160408	CompoundStatement		136:46:5203:5203	159603	1					
ANR	160409	ExpressionStatement	argumSupeRdag = true		159603	0					
ANR	160410	AssignmentExpression	argumSupeRdag = true		159603	0		=			
ANR	160411	Identifier	argumSupeRdag		159603	0					
ANR	160412	Identifier	true		159603	1					
ANR	160413	ExpressionStatement	fileNameSupeRdag = argv [ i + 1 ]		159603	1					
ANR	160414	AssignmentExpression	fileNameSupeRdag = argv [ i + 1 ]		159603	0		=			
ANR	160415	Identifier	fileNameSupeRdag		159603	0					
ANR	160416	ArrayIndexing	argv [ i + 1 ]		159603	1					
ANR	160417	Identifier	argv		159603	0					
ANR	160418	AdditiveExpression	i + 1		159603	1		+			
ANR	160419	Identifier	i		159603	0					
ANR	160420	PrimaryExpression	1		159603	1					
ANR	160421	ExpressionStatement	i += 2		159603	2					
ANR	160422	AssignmentExpression	i += 2		159603	0		+=			
ANR	160423	Identifier	i		159603	0					
ANR	160424	PrimaryExpression	2		159603	1					
ANR	160425	ElseStatement	else		159603	0					
ANR	160426	IfStatement	"if ( 0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""c"" ) )"		159603	0					
ANR	160427	Condition	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""c"" )"		159603	0					
ANR	160428	EqualityExpression	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""c"" )"		159603	0		==			
ANR	160429	PrimaryExpression	0		159603	0					
ANR	160430	CallExpression	"strcmp ( & ( argv [ i ] [ 1 ] ) , ""c"" )"		159603	1					
ANR	160431	Callee	strcmp		159603	0					
ANR	160432	Identifier	strcmp		159603	0					
ANR	160433	ArgumentList	& ( argv [ i ] [ 1 ] )		159603	1					
ANR	160434	Argument	& ( argv [ i ] [ 1 ] )		159603	0					
ANR	160435	UnaryOperationExpression	& ( argv [ i ] [ 1 ] )		159603	0					
ANR	160436	UnaryOperator	&		159603	0					
ANR	160437	ArrayIndexing	argv [ i ] [ 1 ]		159603	1					
ANR	160438	ArrayIndexing	argv [ i ]		159603	0					
ANR	160439	Identifier	argv		159603	0					
ANR	160440	Identifier	i		159603	1					
ANR	160441	PrimaryExpression	1		159603	1					
ANR	160442	Argument	"""c"""		159603	1					
ANR	160443	PrimaryExpression	"""c"""		159603	0					
ANR	160444	CompoundStatement		143:46:5355:5355	159603	1					
ANR	160445	ExpressionStatement	argumConstit = true		159603	0					
ANR	160446	AssignmentExpression	argumConstit = true		159603	0		=			
ANR	160447	Identifier	argumConstit		159603	0					
ANR	160448	Identifier	true		159603	1					
ANR	160449	ExpressionStatement	fileNameConstit = argv [ i + 1 ]		159603	1					
ANR	160450	AssignmentExpression	fileNameConstit = argv [ i + 1 ]		159603	0		=			
ANR	160451	Identifier	fileNameConstit		159603	0					
ANR	160452	ArrayIndexing	argv [ i + 1 ]		159603	1					
ANR	160453	Identifier	argv		159603	0					
ANR	160454	AdditiveExpression	i + 1		159603	1		+			
ANR	160455	Identifier	i		159603	0					
ANR	160456	PrimaryExpression	1		159603	1					
ANR	160457	ExpressionStatement	i += 2		159603	2					
ANR	160458	AssignmentExpression	i += 2		159603	0		+=			
ANR	160459	Identifier	i		159603	0					
ANR	160460	PrimaryExpression	2		159603	1					
ANR	160461	ElseStatement	else		159603	0					
ANR	160462	IfStatement	"if ( 0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""usage"" ) )"		159603	0					
ANR	160463	Condition	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""usage"" )"		159603	0					
ANR	160464	EqualityExpression	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""usage"" )"		159603	0		==			
ANR	160465	PrimaryExpression	0		159603	0					
ANR	160466	CallExpression	"strcmp ( & ( argv [ i ] [ 1 ] ) , ""usage"" )"		159603	1					
ANR	160467	Callee	strcmp		159603	0					
ANR	160468	Identifier	strcmp		159603	0					
ANR	160469	ArgumentList	& ( argv [ i ] [ 1 ] )		159603	1					
ANR	160470	Argument	& ( argv [ i ] [ 1 ] )		159603	0					
ANR	160471	UnaryOperationExpression	& ( argv [ i ] [ 1 ] )		159603	0					
ANR	160472	UnaryOperator	&		159603	0					
ANR	160473	ArrayIndexing	argv [ i ] [ 1 ]		159603	1					
ANR	160474	ArrayIndexing	argv [ i ]		159603	0					
ANR	160475	Identifier	argv		159603	0					
ANR	160476	Identifier	i		159603	1					
ANR	160477	PrimaryExpression	1		159603	1					
ANR	160478	Argument	"""usage"""		159603	1					
ANR	160479	PrimaryExpression	"""usage"""		159603	0					
ANR	160480	CompoundStatement		150:50:5517:5517	159603	1					
ANR	160481	GotoStatement	goto usage ;		159603	0					
ANR	160482	Identifier	usage		159603	0					
ANR	160483	ElseStatement	else		159603	0					
ANR	160484	CompoundStatement		154:8:5549:5549	159603	0					
ANR	160485	ExpressionStatement	"printf ( ""An unrecognized argument %s\\n"" , argv [ i ] )"		159603	0					
ANR	160486	CallExpression	"printf ( ""An unrecognized argument %s\\n"" , argv [ i ] )"		159603	0					
ANR	160487	Callee	printf		159603	0					
ANR	160488	Identifier	printf		159603	0					
ANR	160489	ArgumentList	"""An unrecognized argument %s\\n"""		159603	1					
ANR	160490	Argument	"""An unrecognized argument %s\\n"""		159603	0					
ANR	160491	PrimaryExpression	"""An unrecognized argument %s\\n"""		159603	0					
ANR	160492	Argument	argv [ i ]		159603	1					
ANR	160493	ArrayIndexing	argv [ i ]		159603	0					
ANR	160494	Identifier	argv		159603	0					
ANR	160495	Identifier	i		159603	1					
ANR	160496	ThrowStatement	"throw ""prio, unrecognized argument"" ;"		159603	1					
ANR	160497	PrimaryExpression	"""prio, unrecognized argument"""		159603	0					
ANR	160498	ExpressionStatement			159603	1					
ANR	160499	ExpressionStatement			159603	25					
ANR	160500	IfStatement	if ( i != argc - 1 )		159603	26					
ANR	160501	Condition	i != argc - 1		159603	0					
ANR	160502	EqualityExpression	i != argc - 1		159603	0		!=			
ANR	160503	Identifier	i		159603	0					
ANR	160504	AdditiveExpression	argc - 1		159603	1		-			
ANR	160505	Identifier	argc		159603	0					
ANR	160506	PrimaryExpression	1		159603	1					
ANR	160507	ThrowStatement	"throw ""prio, missing dagman file name"" ;"		159603	1					
ANR	160508	PrimaryExpression	"""prio, missing dagman file name"""		159603	0					
ANR	160509	IdentifierDeclStatement	char * fileNameDagman = argv [ i ] ;		159603	27					
ANR	160510	IdentifierDecl	* fileNameDagman = argv [ i ]		159603	0					
ANR	160511	IdentifierDeclType	char *		159603	0					
ANR	160512	Identifier	fileNameDagman		159603	1					
ANR	160513	AssignmentExpression	* fileNameDagman = argv [ i ]		159603	2		=			
ANR	160514	Identifier	fileNameDagman		159603	0					
ANR	160515	ArrayIndexing	argv [ i ]		159603	1					
ANR	160516	Identifier	argv		159603	0					
ANR	160517	Identifier	i		159603	1					
ANR	160518	IfStatement	if ( argumPrio )		159603	28					
ANR	160519	Condition	argumPrio		159603	0					
ANR	160520	Identifier	argumPrio		159603	0					
ANR	160521	CompoundStatement		169:18:5934:5934	159603	1					
ANR	160522	ExpressionStatement	"fPrio = fopen ( fileNamePrio , ""wt"" )"		159603	0					
ANR	160523	AssignmentExpression	"fPrio = fopen ( fileNamePrio , ""wt"" )"		159603	0		=			
ANR	160524	Identifier	fPrio		159603	0					
ANR	160525	CallExpression	"fopen ( fileNamePrio , ""wt"" )"		159603	1					
ANR	160526	Callee	fopen		159603	0					
ANR	160527	Identifier	fopen		159603	0					
ANR	160528	ArgumentList	fileNamePrio		159603	1					
ANR	160529	Argument	fileNamePrio		159603	0					
ANR	160530	Identifier	fileNamePrio		159603	0					
ANR	160531	Argument	"""wt"""		159603	1					
ANR	160532	PrimaryExpression	"""wt"""		159603	0					
ANR	160533	IfStatement	if ( NULL == fPrio )		159603	1					
ANR	160534	Condition	NULL == fPrio		159603	0					
ANR	160535	EqualityExpression	NULL == fPrio		159603	0		==			
ANR	160536	Identifier	NULL		159603	0					
ANR	160537	Identifier	fPrio		159603	1					
ANR	160538	ThrowStatement	"throw ""prio, priorities is NULL"" ;"		159603	1					
ANR	160539	PrimaryExpression	"""prio, priorities is NULL"""		159603	0					
ANR	160540	ExpressionStatement			159603	29					
ANR	160541	ExpressionStatement	"printf ( ""-- loading dagman file\\n"" )"		159603	30					
ANR	160542	CallExpression	"printf ( ""-- loading dagman file\\n"" )"		159603	0					
ANR	160543	Callee	printf		159603	0					
ANR	160544	Identifier	printf		159603	0					
ANR	160545	ArgumentList	"""-- loading dagman file\\n"""		159603	1					
ANR	160546	Argument	"""-- loading dagman file\\n"""		159603	0					
ANR	160547	PrimaryExpression	"""-- loading dagman file\\n"""		159603	0					
ANR	160548	IdentifierDeclStatement	DagmanDag g ( fileNameDagman ) ;		159603	31					
ANR	160549	IdentifierDecl	g ( fileNameDagman )		159603	0					
ANR	160550	IdentifierDeclType	DagmanDag		159603	0					
ANR	160551	Identifier	g		159603	1					
ANR	160552	Identifier	fileNameDagman		159603	2					
ANR	160553	IfStatement	if ( argumDag )		159603	32					
ANR	160554	Condition	argumDag		159603	0					
ANR	160555	Identifier	argumDag		159603	0					
ANR	160556	CompoundStatement		181:17:6147:6147	159603	1					
ANR	160557	ExpressionStatement	"printf ( ""-- saving dag as dot\\n"" )"		159603	0					
ANR	160558	CallExpression	"printf ( ""-- saving dag as dot\\n"" )"		159603	0					
ANR	160559	Callee	printf		159603	0					
ANR	160560	Identifier	printf		159603	0					
ANR	160561	ArgumentList	"""-- saving dag as dot\\n"""		159603	1					
ANR	160562	Argument	"""-- saving dag as dot\\n"""		159603	0					
ANR	160563	PrimaryExpression	"""-- saving dag as dot\\n"""		159603	0					
ANR	160564	ExpressionStatement	g . saveAsDot ( fileNameDag )		159603	1					
ANR	160565	CallExpression	g . saveAsDot ( fileNameDag )		159603	0					
ANR	160566	Callee	g . saveAsDot		159603	0					
ANR	160567	MemberAccess	g . saveAsDot		159603	0					
ANR	160568	Identifier	g		159603	0					
ANR	160569	Identifier	saveAsDot		159603	1					
ANR	160570	ArgumentList	fileNameDag		159603	1					
ANR	160571	Argument	fileNameDag		159603	0					
ANR	160572	Identifier	fileNameDag		159603	0					
ANR	160573	ExpressionStatement			159603	33					
ANR	160574	ExpressionStatement	"printf ( ""-- decomposing dag\\n"" )"		159603	34					
ANR	160575	CallExpression	"printf ( ""-- decomposing dag\\n"" )"		159603	0					
ANR	160576	Callee	printf		159603	0					
ANR	160577	Identifier	printf		159603	0					
ANR	160578	ArgumentList	"""-- decomposing dag\\n"""		159603	1					
ANR	160579	Argument	"""-- decomposing dag\\n"""		159603	0					
ANR	160580	PrimaryExpression	"""-- decomposing dag\\n"""		159603	0					
ANR	160581	IdentifierDeclStatement	Superdag superdag ( g ) ;		159603	35					
ANR	160582	IdentifierDecl	superdag ( g )		159603	0					
ANR	160583	IdentifierDeclType	Superdag		159603	0					
ANR	160584	Identifier	superdag		159603	1					
ANR	160585	Identifier	g		159603	2					
ANR	160586	IfStatement	if ( argumSupeRdag )		159603	36					
ANR	160587	Condition	argumSupeRdag		159603	0					
ANR	160588	Identifier	argumSupeRdag		159603	0					
ANR	160589	CompoundStatement		196:22:6379:6379	159603	1					
ANR	160590	ExpressionStatement	"printf ( ""-- saving superdag\\n"" )"		159603	0					
ANR	160591	CallExpression	"printf ( ""-- saving superdag\\n"" )"		159603	0					
ANR	160592	Callee	printf		159603	0					
ANR	160593	Identifier	printf		159603	0					
ANR	160594	ArgumentList	"""-- saving superdag\\n"""		159603	1					
ANR	160595	Argument	"""-- saving superdag\\n"""		159603	0					
ANR	160596	PrimaryExpression	"""-- saving superdag\\n"""		159603	0					
ANR	160597	ExpressionStatement	superdag . saveSuperdagAsDot ( fileNameSupeRdag )		159603	1					
ANR	160598	CallExpression	superdag . saveSuperdagAsDot ( fileNameSupeRdag )		159603	0					
ANR	160599	Callee	superdag . saveSuperdagAsDot		159603	0					
ANR	160600	MemberAccess	superdag . saveSuperdagAsDot		159603	0					
ANR	160601	Identifier	superdag		159603	0					
ANR	160602	Identifier	saveSuperdagAsDot		159603	1					
ANR	160603	ArgumentList	fileNameSupeRdag		159603	1					
ANR	160604	Argument	fileNameSupeRdag		159603	0					
ANR	160605	Identifier	fileNameSupeRdag		159603	0					
ANR	160606	ExpressionStatement			159603	37					
ANR	160607	IdentifierDeclStatement	int * numParents = superdag . getParentCountVector ( ) ;		159603	38					
ANR	160608	IdentifierDecl	* numParents = superdag . getParentCountVector ( )		159603	0					
ANR	160609	IdentifierDeclType	int *		159603	0					
ANR	160610	Identifier	numParents		159603	1					
ANR	160611	AssignmentExpression	* numParents = superdag . getParentCountVector ( )		159603	2		=			
ANR	160612	Identifier	numParents		159603	0					
ANR	160613	CallExpression	superdag . getParentCountVector ( )		159603	1					
ANR	160614	Callee	superdag . getParentCountVector		159603	0					
ANR	160615	MemberAccess	superdag . getParentCountVector		159603	0					
ANR	160616	Identifier	superdag		159603	0					
ANR	160617	Identifier	getParentCountVector		159603	1					
ANR	160618	ArgumentList			159603	1					
ANR	160619	IdentifierDeclStatement	int numNodes = superdag . getNumNodes ( ) ;		159603	39					
ANR	160620	IdentifierDecl	numNodes = superdag . getNumNodes ( )		159603	0					
ANR	160621	IdentifierDeclType	int		159603	0					
ANR	160622	Identifier	numNodes		159603	1					
ANR	160623	AssignmentExpression	numNodes = superdag . getNumNodes ( )		159603	2		=			
ANR	160624	Identifier	numNodes		159603	0					
ANR	160625	CallExpression	superdag . getNumNodes ( )		159603	1					
ANR	160626	Callee	superdag . getNumNodes		159603	0					
ANR	160627	MemberAccess	superdag . getNumNodes		159603	0					
ANR	160628	Identifier	superdag		159603	0					
ANR	160629	Identifier	getNumNodes		159603	1					
ANR	160630	ArgumentList			159603	1					
ANR	160631	IdentifierDeclStatement	int seq = 0 ;		159603	40					
ANR	160632	IdentifierDecl	seq = 0		159603	0					
ANR	160633	IdentifierDeclType	int		159603	0					
ANR	160634	Identifier	seq		159603	1					
ANR	160635	AssignmentExpression	seq = 0		159603	2		=			
ANR	160636	Identifier	seq		159603	0					
ANR	160637	PrimaryExpression	0		159603	1					
ANR	160638	IdentifierDeclStatement	int * sked = new int [ g . getNumNodes ( ) ] ;		159603	41					
ANR	160639	IdentifierDecl	* sked = new int [ g . getNumNodes ( ) ]		159603	0					
ANR	160640	IdentifierDeclType	int *		159603	0					
ANR	160641	Identifier	sked		159603	1					
ANR	160642	AssignmentExpression	* sked = new int [ g . getNumNodes ( ) ]		159603	2		=			
ANR	160643	Identifier	sked		159603	0					
ANR	160644	CallExpression	g . getNumNodes ( )		159603	1					
ANR	160645	Callee	g . getNumNodes		159603	0					
ANR	160646	MemberAccess	g . getNumNodes		159603	0					
ANR	160647	Identifier	g		159603	0					
ANR	160648	Identifier	getNumNodes		159603	1					
ANR	160649	ArgumentList			159603	1					
ANR	160650	IfStatement	if ( NULL == sked )		159603	42					
ANR	160651	Condition	NULL == sked		159603	0					
ANR	160652	EqualityExpression	NULL == sked		159603	0		==			
ANR	160653	Identifier	NULL		159603	0					
ANR	160654	Identifier	sked		159603	1					
ANR	160655	ThrowStatement	"throw ""prio, sked is NULL"" ;"		159603	1					
ANR	160656	PrimaryExpression	"""prio, sked is NULL"""		159603	0					
ANR	160657	IdentifierDeclStatement	int idx = 0 ;		159603	43					
ANR	160658	IdentifierDecl	idx = 0		159603	0					
ANR	160659	IdentifierDeclType	int		159603	0					
ANR	160660	Identifier	idx		159603	1					
ANR	160661	AssignmentExpression	idx = 0		159603	2		=			
ANR	160662	Identifier	idx		159603	0					
ANR	160663	PrimaryExpression	0		159603	1					
ANR	160664	ExpressionStatement	"printf ( ""-- scheduling each constituent\\n"" )"		159603	44					
ANR	160665	CallExpression	"printf ( ""-- scheduling each constituent\\n"" )"		159603	0					
ANR	160666	Callee	printf		159603	0					
ANR	160667	Identifier	printf		159603	0					
ANR	160668	ArgumentList	"""-- scheduling each constituent\\n"""		159603	1					
ANR	160669	Argument	"""-- scheduling each constituent\\n"""		159603	0					
ANR	160670	PrimaryExpression	"""-- scheduling each constituent\\n"""		159603	0					
ANR	160671	IdentifierDeclStatement	int * * schedule ;		159603	45					
ANR	160672	IdentifierDecl	* * schedule		159603	0					
ANR	160673	IdentifierDeclType	int * *		159603	0					
ANR	160674	Identifier	schedule		159603	1					
ANR	160675	ExpressionStatement	schedule = new intPtr [ numNodes ]		159603	46					
ANR	160676	AssignmentExpression	schedule = new intPtr [ numNodes ]		159603	0		=			
ANR	160677	Identifier	schedule		159603	0					
ANR	160678	Identifier	numNodes		159603	1					
ANR	160679	IfStatement	if ( NULL == schedule )		159603	47					
ANR	160680	Condition	NULL == schedule		159603	0					
ANR	160681	EqualityExpression	NULL == schedule		159603	0		==			
ANR	160682	Identifier	NULL		159603	0					
ANR	160683	Identifier	schedule		159603	1					
ANR	160684	ThrowStatement	"throw ""prio, schedule is NULL"" ;"		159603	1					
ANR	160685	PrimaryExpression	"""prio, schedule is NULL"""		159603	0					
ANR	160686	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		159603	48					
ANR	160687	ForInit	i = 0 ;		159603	0					
ANR	160688	AssignmentExpression	i = 0		159603	0		=			
ANR	160689	Identifier	i		159603	0					
ANR	160690	PrimaryExpression	0		159603	1					
ANR	160691	Condition	i < numNodes		159603	1					
ANR	160692	RelationalExpression	i < numNodes		159603	0		<			
ANR	160693	Identifier	i		159603	0					
ANR	160694	Identifier	numNodes		159603	1					
ANR	160695	PostIncDecOperationExpression	i ++		159603	2					
ANR	160696	Identifier	i		159603	0					
ANR	160697	IncDec	++		159603	1					
ANR	160698	CompoundStatement		225:30:7118:7118	159603	3					
ANR	160699	ExpressionStatement	schedule [ i ] = lib . getSchedule ( * ( superdag . getConstituent ( i ) ) )		159603	0					
ANR	160700	AssignmentExpression	schedule [ i ] = lib . getSchedule ( * ( superdag . getConstituent ( i ) ) )		159603	0		=			
ANR	160701	ArrayIndexing	schedule [ i ]		159603	0					
ANR	160702	Identifier	schedule		159603	0					
ANR	160703	Identifier	i		159603	1					
ANR	160704	CallExpression	lib . getSchedule ( * ( superdag . getConstituent ( i ) ) )		159603	1					
ANR	160705	Callee	lib . getSchedule		159603	0					
ANR	160706	MemberAccess	lib . getSchedule		159603	0					
ANR	160707	Identifier	lib		159603	0					
ANR	160708	Identifier	getSchedule		159603	1					
ANR	160709	ArgumentList	* ( superdag . getConstituent ( i ) )		159603	1					
ANR	160710	Argument	* ( superdag . getConstituent ( i ) )		159603	0					
ANR	160711	UnaryOperationExpression	* ( superdag . getConstituent ( i ) )		159603	0					
ANR	160712	UnaryOperator	*		159603	0					
ANR	160713	CallExpression	superdag . getConstituent ( i )		159603	1					
ANR	160714	Callee	superdag . getConstituent		159603	0					
ANR	160715	MemberAccess	superdag . getConstituent		159603	0					
ANR	160716	Identifier	superdag		159603	0					
ANR	160717	Identifier	getConstituent		159603	1					
ANR	160718	ArgumentList	i		159603	1					
ANR	160719	Argument	i		159603	0					
ANR	160720	Identifier	i		159603	0					
ANR	160721	IfStatement	if ( NULL == schedule [ i ] )		159603	1					
ANR	160722	Condition	NULL == schedule [ i ]		159603	0					
ANR	160723	EqualityExpression	NULL == schedule [ i ]		159603	0		==			
ANR	160724	Identifier	NULL		159603	0					
ANR	160725	ArrayIndexing	schedule [ i ]		159603	1					
ANR	160726	Identifier	schedule		159603	0					
ANR	160727	Identifier	i		159603	1					
ANR	160728	ThrowStatement	"throw ""prio, schedule[i] is NULL"" ;"		159603	1					
ANR	160729	PrimaryExpression	"""prio, schedule[i] is NULL"""		159603	0					
ANR	160730	ExpressionStatement			159603	49					
ANR	160731	ExpressionStatement	"printf ( ""-- building eligibility plots\\n"" )"		159603	50					
ANR	160732	CallExpression	"printf ( ""-- building eligibility plots\\n"" )"		159603	0					
ANR	160733	Callee	printf		159603	0					
ANR	160734	Identifier	printf		159603	0					
ANR	160735	ArgumentList	"""-- building eligibility plots\\n"""		159603	1					
ANR	160736	Argument	"""-- building eligibility plots\\n"""		159603	0					
ANR	160737	PrimaryExpression	"""-- building eligibility plots\\n"""		159603	0					
ANR	160738	IdentifierDeclStatement	int * * eligPlot ;		159603	51					
ANR	160739	IdentifierDecl	* * eligPlot		159603	0					
ANR	160740	IdentifierDeclType	int * *		159603	0					
ANR	160741	Identifier	eligPlot		159603	1					
ANR	160742	ExpressionStatement	eligPlot = new intPtr [ numNodes ]		159603	52					
ANR	160743	AssignmentExpression	eligPlot = new intPtr [ numNodes ]		159603	0		=			
ANR	160744	Identifier	eligPlot		159603	0					
ANR	160745	Identifier	numNodes		159603	1					
ANR	160746	IfStatement	if ( NULL == eligPlot )		159603	53					
ANR	160747	Condition	NULL == eligPlot		159603	0					
ANR	160748	EqualityExpression	NULL == eligPlot		159603	0		==			
ANR	160749	Identifier	NULL		159603	0					
ANR	160750	Identifier	eligPlot		159603	1					
ANR	160751	ThrowStatement	"throw ""prio, eligPlot is NULL"" ;"		159603	1					
ANR	160752	PrimaryExpression	"""prio, eligPlot is NULL"""		159603	0					
ANR	160753	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		159603	54					
ANR	160754	ForInit	i = 0 ;		159603	0					
ANR	160755	AssignmentExpression	i = 0		159603	0		=			
ANR	160756	Identifier	i		159603	0					
ANR	160757	PrimaryExpression	0		159603	1					
ANR	160758	Condition	i < numNodes		159603	1					
ANR	160759	RelationalExpression	i < numNodes		159603	0		<			
ANR	160760	Identifier	i		159603	0					
ANR	160761	Identifier	numNodes		159603	1					
ANR	160762	PostIncDecOperationExpression	i ++		159603	2					
ANR	160763	Identifier	i		159603	0					
ANR	160764	IncDec	++		159603	1					
ANR	160765	CompoundStatement		240:30:7501:7501	159603	3					
ANR	160766	ExpressionStatement	eligPlot [ i ] = ( superdag . getConstituent ( i ) ) -> getEligPlot ( schedule [ i ] )		159603	0					
ANR	160767	AssignmentExpression	eligPlot [ i ] = ( superdag . getConstituent ( i ) ) -> getEligPlot ( schedule [ i ] )		159603	0		=			
ANR	160768	ArrayIndexing	eligPlot [ i ]		159603	0					
ANR	160769	Identifier	eligPlot		159603	0					
ANR	160770	Identifier	i		159603	1					
ANR	160771	CallExpression	( superdag . getConstituent ( i ) ) -> getEligPlot ( schedule [ i ] )		159603	1					
ANR	160772	Callee	( superdag . getConstituent ( i ) ) -> getEligPlot		159603	0					
ANR	160773	PtrMemberAccess	( superdag . getConstituent ( i ) ) -> getEligPlot		159603	0					
ANR	160774	CallExpression	superdag . getConstituent ( i )		159603	0					
ANR	160775	Callee	superdag . getConstituent		159603	0					
ANR	160776	MemberAccess	superdag . getConstituent		159603	0					
ANR	160777	Identifier	superdag		159603	0					
ANR	160778	Identifier	getConstituent		159603	1					
ANR	160779	ArgumentList	i		159603	1					
ANR	160780	Argument	i		159603	0					
ANR	160781	Identifier	i		159603	0					
ANR	160782	Identifier	getEligPlot		159603	1					
ANR	160783	ArgumentList	schedule [ i ]		159603	1					
ANR	160784	Argument	schedule [ i ]		159603	0					
ANR	160785	ArrayIndexing	schedule [ i ]		159603	0					
ANR	160786	Identifier	schedule		159603	0					
ANR	160787	Identifier	i		159603	1					
ANR	160788	IfStatement	if ( NULL == eligPlot [ i ] )		159603	1					
ANR	160789	Condition	NULL == eligPlot [ i ]		159603	0					
ANR	160790	EqualityExpression	NULL == eligPlot [ i ]		159603	0		==			
ANR	160791	Identifier	NULL		159603	0					
ANR	160792	ArrayIndexing	eligPlot [ i ]		159603	1					
ANR	160793	Identifier	eligPlot		159603	0					
ANR	160794	Identifier	i		159603	1					
ANR	160795	ThrowStatement	"throw ""prio, eligPlot[i] is NULL"" ;"		159603	1					
ANR	160796	PrimaryExpression	"""prio, eligPlot[i] is NULL"""		159603	0					
ANR	160797	IdentifierDeclStatement	int * nonSink ;		159603	55					
ANR	160798	IdentifierDecl	* nonSink		159603	0					
ANR	160799	IdentifierDeclType	int *		159603	0					
ANR	160800	Identifier	nonSink		159603	1					
ANR	160801	ExpressionStatement	nonSink = new int [ numNodes ]		159603	56					
ANR	160802	AssignmentExpression	nonSink = new int [ numNodes ]		159603	0		=			
ANR	160803	Identifier	nonSink		159603	0					
ANR	160804	Identifier	numNodes		159603	1					
ANR	160805	IfStatement	if ( NULL == nonSink )		159603	57					
ANR	160806	Condition	NULL == nonSink		159603	0					
ANR	160807	EqualityExpression	NULL == nonSink		159603	0		==			
ANR	160808	Identifier	NULL		159603	0					
ANR	160809	Identifier	nonSink		159603	1					
ANR	160810	ThrowStatement	"throw ""prio, nonSink is NULL"" ;"		159603	1					
ANR	160811	PrimaryExpression	"""prio, nonSink is NULL"""		159603	0					
ANR	160812	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		159603	58					
ANR	160813	ForInit	i = 0 ;		159603	0					
ANR	160814	AssignmentExpression	i = 0		159603	0		=			
ANR	160815	Identifier	i		159603	0					
ANR	160816	PrimaryExpression	0		159603	1					
ANR	160817	Condition	i < numNodes		159603	1					
ANR	160818	RelationalExpression	i < numNodes		159603	0		<			
ANR	160819	Identifier	i		159603	0					
ANR	160820	Identifier	numNodes		159603	1					
ANR	160821	PostIncDecOperationExpression	i ++		159603	2					
ANR	160822	Identifier	i		159603	0					
ANR	160823	IncDec	++		159603	1					
ANR	160824	ExpressionStatement	nonSink [ i ] = superdag . getConstituent ( i ) -> getNumNodes ( ) - superdag . getConstituent ( i ) -> getNumSinks ( )		159603	3					
ANR	160825	AssignmentExpression	nonSink [ i ] = superdag . getConstituent ( i ) -> getNumNodes ( ) - superdag . getConstituent ( i ) -> getNumSinks ( )		159603	0		=			
ANR	160826	ArrayIndexing	nonSink [ i ]		159603	0					
ANR	160827	Identifier	nonSink		159603	0					
ANR	160828	Identifier	i		159603	1					
ANR	160829	AdditiveExpression	superdag . getConstituent ( i ) -> getNumNodes ( ) - superdag . getConstituent ( i ) -> getNumSinks ( )		159603	1		-			
ANR	160830	CallExpression	superdag . getConstituent ( i ) -> getNumNodes ( )		159603	0					
ANR	160831	Callee	superdag . getConstituent ( i ) -> getNumNodes		159603	0					
ANR	160832	PtrMemberAccess	superdag . getConstituent ( i ) -> getNumNodes		159603	0					
ANR	160833	CallExpression	superdag . getConstituent ( i )		159603	0					
ANR	160834	Callee	superdag . getConstituent		159603	0					
ANR	160835	MemberAccess	superdag . getConstituent		159603	0					
ANR	160836	Identifier	superdag		159603	0					
ANR	160837	Identifier	getConstituent		159603	1					
ANR	160838	ArgumentList	i		159603	1					
ANR	160839	Argument	i		159603	0					
ANR	160840	Identifier	i		159603	0					
ANR	160841	Identifier	getNumNodes		159603	1					
ANR	160842	ArgumentList			159603	1					
ANR	160843	CallExpression	superdag . getConstituent ( i ) -> getNumSinks ( )		159603	1					
ANR	160844	Callee	superdag . getConstituent ( i ) -> getNumSinks		159603	0					
ANR	160845	PtrMemberAccess	superdag . getConstituent ( i ) -> getNumSinks		159603	0					
ANR	160846	CallExpression	superdag . getConstituent ( i )		159603	0					
ANR	160847	Callee	superdag . getConstituent		159603	0					
ANR	160848	MemberAccess	superdag . getConstituent		159603	0					
ANR	160849	Identifier	superdag		159603	0					
ANR	160850	Identifier	getConstituent		159603	1					
ANR	160851	ArgumentList	i		159603	1					
ANR	160852	Argument	i		159603	0					
ANR	160853	Identifier	i		159603	0					
ANR	160854	Identifier	getNumSinks		159603	1					
ANR	160855	ArgumentList			159603	1					
ANR	160856	IdentifierDeclStatement	BTreePtr * btreeTab ;		159603	59					
ANR	160857	IdentifierDecl	* btreeTab		159603	0					
ANR	160858	IdentifierDeclType	BTreePtr *		159603	0					
ANR	160859	Identifier	btreeTab		159603	1					
ANR	160860	ExpressionStatement	btreeTab = new BTreePtr [ numNodes ]		159603	60					
ANR	160861	AssignmentExpression	btreeTab = new BTreePtr [ numNodes ]		159603	0		=			
ANR	160862	Identifier	btreeTab		159603	0					
ANR	160863	Identifier	numNodes		159603	1					
ANR	160864	IfStatement	if ( NULL == btreeTab )		159603	61					
ANR	160865	Condition	NULL == btreeTab		159603	0					
ANR	160866	EqualityExpression	NULL == btreeTab		159603	0		==			
ANR	160867	Identifier	NULL		159603	0					
ANR	160868	Identifier	btreeTab		159603	1					
ANR	160869	ThrowStatement	"throw ""prio, btreeTab is NULL"" ;"		159603	1					
ANR	160870	PrimaryExpression	"""prio, btreeTab is NULL"""		159603	0					
ANR	160871	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		159603	62					
ANR	160872	ForInit	i = 0 ;		159603	0					
ANR	160873	AssignmentExpression	i = 0		159603	0		=			
ANR	160874	Identifier	i		159603	0					
ANR	160875	PrimaryExpression	0		159603	1					
ANR	160876	Condition	i < numNodes		159603	1					
ANR	160877	RelationalExpression	i < numNodes		159603	0		<			
ANR	160878	Identifier	i		159603	0					
ANR	160879	Identifier	numNodes		159603	1					
ANR	160880	PostIncDecOperationExpression	i ++		159603	2					
ANR	160881	Identifier	i		159603	0					
ANR	160882	IncDec	++		159603	1					
ANR	160883	ExpressionStatement	btreeTab [ i ] = NULL		159603	3					
ANR	160884	AssignmentExpression	btreeTab [ i ] = NULL		159603	0		=			
ANR	160885	ArrayIndexing	btreeTab [ i ]		159603	0					
ANR	160886	Identifier	btreeTab		159603	0					
ANR	160887	Identifier	i		159603	1					
ANR	160888	Identifier	NULL		159603	1					
ANR	160889	IdentifierDeclStatement	ResizableArray < int > sources ;		159603	63					
ANR	160890	IdentifierDecl	sources		159603	0					
ANR	160891	IdentifierDeclType	ResizableArray < int >		159603	0					
ANR	160892	Identifier	sources		159603	1					
ANR	160893	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		159603	64					
ANR	160894	ForInit	i = 0 ;		159603	0					
ANR	160895	AssignmentExpression	i = 0		159603	0		=			
ANR	160896	Identifier	i		159603	0					
ANR	160897	PrimaryExpression	0		159603	1					
ANR	160898	Condition	i < numNodes		159603	1					
ANR	160899	RelationalExpression	i < numNodes		159603	0		<			
ANR	160900	Identifier	i		159603	0					
ANR	160901	Identifier	numNodes		159603	1					
ANR	160902	PostIncDecOperationExpression	i ++		159603	2					
ANR	160903	Identifier	i		159603	0					
ANR	160904	IncDec	++		159603	1					
ANR	160905	CompoundStatement		267:30:8222:8222	159603	3					
ANR	160906	IfStatement	if ( 0 == numParents [ i ] )		159603	0					
ANR	160907	Condition	0 == numParents [ i ]		159603	0					
ANR	160908	EqualityExpression	0 == numParents [ i ]		159603	0		==			
ANR	160909	PrimaryExpression	0		159603	0					
ANR	160910	ArrayIndexing	numParents [ i ]		159603	1					
ANR	160911	Identifier	numParents		159603	0					
ANR	160912	Identifier	i		159603	1					
ANR	160913	ExpressionStatement	sources . append ( i )		159603	1					
ANR	160914	CallExpression	sources . append ( i )		159603	0					
ANR	160915	Callee	sources . append		159603	0					
ANR	160916	MemberAccess	sources . append		159603	0					
ANR	160917	Identifier	sources		159603	0					
ANR	160918	Identifier	append		159603	1					
ANR	160919	ArgumentList	i		159603	1					
ANR	160920	Argument	i		159603	0					
ANR	160921	Identifier	i		159603	0					
ANR	160922	ExpressionStatement			159603	65					
ANR	160923	ExpressionStatement	"printf ( ""-- establishing priorities among all sources of superdag\\n"" )"		159603	66					
ANR	160924	CallExpression	"printf ( ""-- establishing priorities among all sources of superdag\\n"" )"		159603	0					
ANR	160925	Callee	printf		159603	0					
ANR	160926	Identifier	printf		159603	0					
ANR	160927	ArgumentList	"""-- establishing priorities among all sources of superdag\\n"""		159603	1					
ANR	160928	Argument	"""-- establishing priorities among all sources of superdag\\n"""		159603	0					
ANR	160929	PrimaryExpression	"""-- establishing priorities among all sources of superdag\\n"""		159603	0					
ANR	160930	ExpressionStatement	done = - 1		159603	67					
ANR	160931	AssignmentExpression	done = - 1		159603	0		=			
ANR	160932	Identifier	done		159603	0					
ANR	160933	UnaryOperationExpression	- 1		159603	1					
ANR	160934	UnaryOperator	-		159603	0					
ANR	160935	PrimaryExpression	1		159603	1					
ANR	160936	ExpressionStatement	last = - 1		159603	68					
ANR	160937	AssignmentExpression	last = - 1		159603	0		=			
ANR	160938	Identifier	last		159603	0					
ANR	160939	UnaryOperationExpression	- 1		159603	1					
ANR	160940	UnaryOperator	-		159603	0					
ANR	160941	PrimaryExpression	1		159603	1					
ANR	160942	ForStatement	for ( i = 0 ; i < sources . getNumElem ( ) ; i ++ )		159603	69					
ANR	160943	ForInit	i = 0 ;		159603	0					
ANR	160944	AssignmentExpression	i = 0		159603	0		=			
ANR	160945	Identifier	i		159603	0					
ANR	160946	PrimaryExpression	0		159603	1					
ANR	160947	Condition	i < sources . getNumElem ( )		159603	1					
ANR	160948	RelationalExpression	i < sources . getNumElem ( )		159603	0		<			
ANR	160949	Identifier	i		159603	0					
ANR	160950	CallExpression	sources . getNumElem ( )		159603	1					
ANR	160951	Callee	sources . getNumElem		159603	0					
ANR	160952	MemberAccess	sources . getNumElem		159603	0					
ANR	160953	Identifier	sources		159603	0					
ANR	160954	Identifier	getNumElem		159603	1					
ANR	160955	ArgumentList			159603	1					
ANR	160956	PostIncDecOperationExpression	i ++		159603	2					
ANR	160957	Identifier	i		159603	0					
ANR	160958	IncDec	++		159603	1					
ANR	160959	CompoundStatement		293:3:8772:8801	159603	3					
ANR	160960	ExpressionStatement	done ++		159603	0					
ANR	160961	PostIncDecOperationExpression	done ++		159603	0					
ANR	160962	Identifier	done		159603	0					
ANR	160963	IncDec	++		159603	1					
ANR	160964	IfStatement	if ( done / sources . getNumElem ( ) > last + 0.1 )		159603	1					
ANR	160965	Condition	done / sources . getNumElem ( ) > last + 0.1		159603	0					
ANR	160966	RelationalExpression	done / sources . getNumElem ( ) > last + 0.1		159603	0		>			
ANR	160967	MultiplicativeExpression	done / sources . getNumElem ( )		159603	0		/			
ANR	160968	Identifier	done		159603	0					
ANR	160969	CallExpression	sources . getNumElem ( )		159603	1					
ANR	160970	Callee	sources . getNumElem		159603	0					
ANR	160971	MemberAccess	sources . getNumElem		159603	0					
ANR	160972	Identifier	sources		159603	0					
ANR	160973	Identifier	getNumElem		159603	1					
ANR	160974	ArgumentList			159603	1					
ANR	160975	AdditiveExpression	last + 0.1		159603	1		+			
ANR	160976	Identifier	last		159603	0					
ANR	160977	PrimaryExpression	0.1		159603	1					
ANR	160978	CompoundStatement		285:46:8621:8621	159603	1					
ANR	160979	ExpressionStatement	last = done / sources . getNumElem ( )		159603	0					
ANR	160980	AssignmentExpression	last = done / sources . getNumElem ( )		159603	0		=			
ANR	160981	Identifier	last		159603	0					
ANR	160982	MultiplicativeExpression	done / sources . getNumElem ( )		159603	1		/			
ANR	160983	Identifier	done		159603	0					
ANR	160984	CallExpression	sources . getNumElem ( )		159603	1					
ANR	160985	Callee	sources . getNumElem		159603	0					
ANR	160986	MemberAccess	sources . getNumElem		159603	0					
ANR	160987	Identifier	sources		159603	0					
ANR	160988	Identifier	getNumElem		159603	1					
ANR	160989	ArgumentList			159603	1					
ANR	160990	ExpressionStatement	"printf ( ""    about %d percent done\\n"" , ( int ) ( last * 100 ) )"		159603	1					
ANR	160991	CallExpression	"printf ( ""    about %d percent done\\n"" , ( int ) ( last * 100 ) )"		159603	0					
ANR	160992	Callee	printf		159603	0					
ANR	160993	Identifier	printf		159603	0					
ANR	160994	ArgumentList	"""    about %d percent done\\n"""		159603	1					
ANR	160995	Argument	"""    about %d percent done\\n"""		159603	0					
ANR	160996	PrimaryExpression	"""    about %d percent done\\n"""		159603	0					
ANR	160997	Argument	( int ) ( last * 100 )		159603	1					
ANR	160998	CastExpression	( int ) ( last * 100 )		159603	0					
ANR	160999	CastTarget	int		159603	0					
ANR	161000	MultiplicativeExpression	last * 100		159603	1		*			
ANR	161001	Identifier	last		159603	0					
ANR	161002	PrimaryExpression	100		159603	1					
ANR	161003	ExpressionStatement			159603	2					
ANR	161004	IdentifierDeclStatement	int srcA = sources . getElem ( i ) ;		159603	3					
ANR	161005	IdentifierDecl	srcA = sources . getElem ( i )		159603	0					
ANR	161006	IdentifierDeclType	int		159603	0					
ANR	161007	Identifier	srcA		159603	1					
ANR	161008	AssignmentExpression	srcA = sources . getElem ( i )		159603	2		=			
ANR	161009	Identifier	srcA		159603	0					
ANR	161010	CallExpression	sources . getElem ( i )		159603	1					
ANR	161011	Callee	sources . getElem		159603	0					
ANR	161012	MemberAccess	sources . getElem		159603	0					
ANR	161013	Identifier	sources		159603	0					
ANR	161014	Identifier	getElem		159603	1					
ANR	161015	ArgumentList	i		159603	1					
ANR	161016	Argument	i		159603	0					
ANR	161017	Identifier	i		159603	0					
ANR	161018	ExpressionStatement	btreeTab [ srcA ] = new BTree ( )		159603	4					
ANR	161019	AssignmentExpression	btreeTab [ srcA ] = new BTree ( )		159603	0		=			
ANR	161020	ArrayIndexing	btreeTab [ srcA ]		159603	0					
ANR	161021	Identifier	btreeTab		159603	0					
ANR	161022	Identifier	srcA		159603	1					
ANR	161023	UnaryExpression	new BTree ( )		159603	1					
ANR	161024	IfStatement	if ( NULL == btreeTab [ srcA ] )		159603	5					
ANR	161025	Condition	NULL == btreeTab [ srcA ]		159603	0					
ANR	161026	EqualityExpression	NULL == btreeTab [ srcA ]		159603	0		==			
ANR	161027	Identifier	NULL		159603	0					
ANR	161028	ArrayIndexing	btreeTab [ srcA ]		159603	1					
ANR	161029	Identifier	btreeTab		159603	0					
ANR	161030	Identifier	srcA		159603	1					
ANR	161031	ThrowStatement	"throw ""prio, btreeTab[srcA] is NULL"" ;"		159603	1					
ANR	161032	PrimaryExpression	"""prio, btreeTab[srcA] is NULL"""		159603	0					
ANR	161033	ForStatement	for ( j = 0 ; j < sources . getNumElem ( ) ; j ++ )		159603	6					
ANR	161034	ForInit	j = 0 ;		159603	0					
ANR	161035	AssignmentExpression	j = 0		159603	0		=			
ANR	161036	Identifier	j		159603	0					
ANR	161037	PrimaryExpression	0		159603	1					
ANR	161038	Condition	j < sources . getNumElem ( )		159603	1					
ANR	161039	RelationalExpression	j < sources . getNumElem ( )		159603	0		<			
ANR	161040	Identifier	j		159603	0					
ANR	161041	CallExpression	sources . getNumElem ( )		159603	1					
ANR	161042	Callee	sources . getNumElem		159603	0					
ANR	161043	MemberAccess	sources . getNumElem		159603	0					
ANR	161044	Identifier	sources		159603	0					
ANR	161045	Identifier	getNumElem		159603	1					
ANR	161046	ArgumentList			159603	1					
ANR	161047	PostIncDecOperationExpression	j ++		159603	2					
ANR	161048	Identifier	j		159603	0					
ANR	161049	IncDec	++		159603	1					
ANR	161050	CompoundStatement		301:43:9029:9029	159603	3					
ANR	161051	IfStatement	if ( i == j )		159603	0					
ANR	161052	Condition	i == j		159603	0					
ANR	161053	EqualityExpression	i == j		159603	0		==			
ANR	161054	Identifier	i		159603	0					
ANR	161055	Identifier	j		159603	1					
ANR	161056	ContinueStatement	continue ;		159603	1					
ANR	161057	ElseStatement	else		159603	0					
ANR	161058	CompoundStatement		308:5:9265:9302	159603	0					
ANR	161059	IdentifierDeclStatement	int srcB = sources . getElem ( j ) ;		159603	0					
ANR	161060	IdentifierDecl	srcB = sources . getElem ( j )		159603	0					
ANR	161061	IdentifierDeclType	int		159603	0					
ANR	161062	Identifier	srcB		159603	1					
ANR	161063	AssignmentExpression	srcB = sources . getElem ( j )		159603	2		=			
ANR	161064	Identifier	srcB		159603	0					
ANR	161065	CallExpression	sources . getElem ( j )		159603	1					
ANR	161066	Callee	sources . getElem		159603	0					
ANR	161067	MemberAccess	sources . getElem		159603	0					
ANR	161068	Identifier	sources		159603	0					
ANR	161069	Identifier	getElem		159603	1					
ANR	161070	ArgumentList	j		159603	1					
ANR	161071	Argument	j		159603	0					
ANR	161072	Identifier	j		159603	0					
ANR	161073	ExpressionStatement	"c = lib . getPriority ( eligPlot [ srcA ] , nonSink [ srcA ] , eligPlot [ srcB ] , nonSink [ srcB ] )"		159603	1					
ANR	161074	AssignmentExpression	"c = lib . getPriority ( eligPlot [ srcA ] , nonSink [ srcA ] , eligPlot [ srcB ] , nonSink [ srcB ] )"		159603	0		=			
ANR	161075	Identifier	c		159603	0					
ANR	161076	CallExpression	"lib . getPriority ( eligPlot [ srcA ] , nonSink [ srcA ] , eligPlot [ srcB ] , nonSink [ srcB ] )"		159603	1					
ANR	161077	Callee	lib . getPriority		159603	0					
ANR	161078	MemberAccess	lib . getPriority		159603	0					
ANR	161079	Identifier	lib		159603	0					
ANR	161080	Identifier	getPriority		159603	1					
ANR	161081	ArgumentList	eligPlot [ srcA ]		159603	1					
ANR	161082	Argument	eligPlot [ srcA ]		159603	0					
ANR	161083	ArrayIndexing	eligPlot [ srcA ]		159603	0					
ANR	161084	Identifier	eligPlot		159603	0					
ANR	161085	Identifier	srcA		159603	1					
ANR	161086	Argument	nonSink [ srcA ]		159603	1					
ANR	161087	ArrayIndexing	nonSink [ srcA ]		159603	0					
ANR	161088	Identifier	nonSink		159603	0					
ANR	161089	Identifier	srcA		159603	1					
ANR	161090	Argument	eligPlot [ srcB ]		159603	2					
ANR	161091	ArrayIndexing	eligPlot [ srcB ]		159603	0					
ANR	161092	Identifier	eligPlot		159603	0					
ANR	161093	Identifier	srcB		159603	1					
ANR	161094	Argument	nonSink [ srcB ]		159603	3					
ANR	161095	ArrayIndexing	nonSink [ srcB ]		159603	0					
ANR	161096	Identifier	nonSink		159603	0					
ANR	161097	Identifier	srcB		159603	1					
ANR	161098	ExpressionStatement	c *= ULONG_MAX / 2		159603	2					
ANR	161099	AssignmentExpression	c *= ULONG_MAX / 2		159603	0		*=			
ANR	161100	Identifier	c		159603	0					
ANR	161101	MultiplicativeExpression	ULONG_MAX / 2		159603	1		/			
ANR	161102	Identifier	ULONG_MAX		159603	0					
ANR	161103	PrimaryExpression	2		159603	1					
ANR	161104	IdentifierDeclStatement	unsigned long key = ( unsigned long ) c ;		159603	3					
ANR	161105	IdentifierDecl	key = ( unsigned long ) c		159603	0					
ANR	161106	IdentifierDeclType	unsigned long		159603	0					
ANR	161107	Identifier	key		159603	1					
ANR	161108	AssignmentExpression	key = ( unsigned long ) c		159603	2		=			
ANR	161109	Identifier	key		159603	0					
ANR	161110	CastExpression	( unsigned long ) c		159603	1					
ANR	161111	CastTarget	unsigned long		159603	0					
ANR	161112	Identifier	c		159603	1					
ANR	161113	ExpressionStatement	"btreeTab [ srcA ] -> insert ( key , srcB )"		159603	4					
ANR	161114	CallExpression	"btreeTab [ srcA ] -> insert ( key , srcB )"		159603	0					
ANR	161115	Callee	btreeTab [ srcA ] -> insert		159603	0					
ANR	161116	PtrMemberAccess	btreeTab [ srcA ] -> insert		159603	0					
ANR	161117	ArrayIndexing	btreeTab [ srcA ]		159603	0					
ANR	161118	Identifier	btreeTab		159603	0					
ANR	161119	Identifier	srcA		159603	1					
ANR	161120	Identifier	insert		159603	1					
ANR	161121	ArgumentList	key		159603	1					
ANR	161122	Argument	key		159603	0					
ANR	161123	Identifier	key		159603	0					
ANR	161124	Argument	srcB		159603	1					
ANR	161125	Identifier	srcB		159603	0					
ANR	161126	ExpressionStatement			159603	1					
ANR	161127	ExpressionStatement			159603	7					
ANR	161128	ExpressionStatement			159603	70					
ANR	161129	ExpressionStatement	"printf ( ""-- scheduling superdag through prioritizing\\n"" )"		159603	71					
ANR	161130	CallExpression	"printf ( ""-- scheduling superdag through prioritizing\\n"" )"		159603	0					
ANR	161131	Callee	printf		159603	0					
ANR	161132	Identifier	printf		159603	0					
ANR	161133	ArgumentList	"""-- scheduling superdag through prioritizing\\n"""		159603	1					
ANR	161134	Argument	"""-- scheduling superdag through prioritizing\\n"""		159603	0					
ANR	161135	PrimaryExpression	"""-- scheduling superdag through prioritizing\\n"""		159603	0					
ANR	161136	ExpressionStatement	done = - 1		159603	72					
ANR	161137	AssignmentExpression	done = - 1		159603	0		=			
ANR	161138	Identifier	done		159603	0					
ANR	161139	UnaryOperationExpression	- 1		159603	1					
ANR	161140	UnaryOperator	-		159603	0					
ANR	161141	PrimaryExpression	1		159603	1					
ANR	161142	ExpressionStatement	last = - 1		159603	73					
ANR	161143	AssignmentExpression	last = - 1		159603	0		=			
ANR	161144	Identifier	last		159603	0					
ANR	161145	UnaryOperationExpression	- 1		159603	1					
ANR	161146	UnaryOperator	-		159603	0					
ANR	161147	PrimaryExpression	1		159603	1					
ANR	161148	WhileStatement	while ( sources . getNumElem ( ) > 0 )		159603	74					
ANR	161149	Condition	sources . getNumElem ( ) > 0		159603	0					
ANR	161150	RelationalExpression	sources . getNumElem ( ) > 0		159603	0		>			
ANR	161151	CallExpression	sources . getNumElem ( )		159603	0					
ANR	161152	Callee	sources . getNumElem		159603	0					
ANR	161153	MemberAccess	sources . getNumElem		159603	0					
ANR	161154	Identifier	sources		159603	0					
ANR	161155	Identifier	getNumElem		159603	1					
ANR	161156	ArgumentList			159603	1					
ANR	161157	PrimaryExpression	0		159603	1					
ANR	161158	CompoundStatement		337:3:9833:9843	159603	1					
ANR	161159	ExpressionStatement	done ++		159603	0					
ANR	161160	PostIncDecOperationExpression	done ++		159603	0					
ANR	161161	Identifier	done		159603	0					
ANR	161162	IncDec	++		159603	1					
ANR	161163	IfStatement	if ( done / numNodes > last + 0.01 )		159603	1					
ANR	161164	Condition	done / numNodes > last + 0.01		159603	0					
ANR	161165	RelationalExpression	done / numNodes > last + 0.01		159603	0		>			
ANR	161166	MultiplicativeExpression	done / numNodes		159603	0		/			
ANR	161167	Identifier	done		159603	0					
ANR	161168	Identifier	numNodes		159603	1					
ANR	161169	AdditiveExpression	last + 0.01		159603	1		+			
ANR	161170	Identifier	last		159603	0					
ANR	161171	PrimaryExpression	0.01		159603	1					
ANR	161172	CompoundStatement		326:35:9581:9581	159603	1					
ANR	161173	ExpressionStatement	last = done / numNodes		159603	0					
ANR	161174	AssignmentExpression	last = done / numNodes		159603	0		=			
ANR	161175	Identifier	last		159603	0					
ANR	161176	MultiplicativeExpression	done / numNodes		159603	1		/			
ANR	161177	Identifier	done		159603	0					
ANR	161178	Identifier	numNodes		159603	1					
ANR	161179	ExpressionStatement	"printf ( ""    about %d percent done\\n"" , ( int ) ( last * 100 ) )"		159603	1					
ANR	161180	CallExpression	"printf ( ""    about %d percent done\\n"" , ( int ) ( last * 100 ) )"		159603	0					
ANR	161181	Callee	printf		159603	0					
ANR	161182	Identifier	printf		159603	0					
ANR	161183	ArgumentList	"""    about %d percent done\\n"""		159603	1					
ANR	161184	Argument	"""    about %d percent done\\n"""		159603	0					
ANR	161185	PrimaryExpression	"""    about %d percent done\\n"""		159603	0					
ANR	161186	Argument	( int ) ( last * 100 )		159603	1					
ANR	161187	CastExpression	( int ) ( last * 100 )		159603	0					
ANR	161188	CastTarget	int		159603	0					
ANR	161189	MultiplicativeExpression	last * 100		159603	1		*			
ANR	161190	Identifier	last		159603	0					
ANR	161191	PrimaryExpression	100		159603	1					
ANR	161192	ExpressionStatement			159603	2					
ANR	161193	IdentifierDeclStatement	unsigned long maxPri = 0 ;		159603	3					
ANR	161194	IdentifierDecl	maxPri = 0		159603	0					
ANR	161195	IdentifierDeclType	unsigned long		159603	0					
ANR	161196	Identifier	maxPri		159603	1					
ANR	161197	AssignmentExpression	maxPri = 0		159603	2		=			
ANR	161198	Identifier	maxPri		159603	0					
ANR	161199	PrimaryExpression	0		159603	1					
ANR	161200	IdentifierDeclStatement	int maxSrc ;		159603	4					
ANR	161201	IdentifierDecl	maxSrc		159603	0					
ANR	161202	IdentifierDeclType	int		159603	0					
ANR	161203	Identifier	maxSrc		159603	1					
ANR	161204	IfStatement	if ( 1 == sources . getNumElem ( ) )		159603	5					
ANR	161205	Condition	1 == sources . getNumElem ( )		159603	0					
ANR	161206	EqualityExpression	1 == sources . getNumElem ( )		159603	0		==			
ANR	161207	PrimaryExpression	1		159603	0					
ANR	161208	CallExpression	sources . getNumElem ( )		159603	1					
ANR	161209	Callee	sources . getNumElem		159603	0					
ANR	161210	MemberAccess	sources . getNumElem		159603	0					
ANR	161211	Identifier	sources		159603	0					
ANR	161212	Identifier	getNumElem		159603	1					
ANR	161213	ArgumentList			159603	1					
ANR	161214	CompoundStatement		338:35:9880:9880	159603	1					
ANR	161215	ExpressionStatement	maxSrc = sources . getElem ( 0 )		159603	0					
ANR	161216	AssignmentExpression	maxSrc = sources . getElem ( 0 )		159603	0		=			
ANR	161217	Identifier	maxSrc		159603	0					
ANR	161218	CallExpression	sources . getElem ( 0 )		159603	1					
ANR	161219	Callee	sources . getElem		159603	0					
ANR	161220	MemberAccess	sources . getElem		159603	0					
ANR	161221	Identifier	sources		159603	0					
ANR	161222	Identifier	getElem		159603	1					
ANR	161223	ArgumentList	0		159603	1					
ANR	161224	Argument	0		159603	0					
ANR	161225	PrimaryExpression	0		159603	0					
ANR	161226	ElseStatement	else		159603	0					
ANR	161227	CompoundStatement		342:8:9985:9985	159603	0					
ANR	161228	ForStatement	for ( i = 0 ; i < sources . getNumElem ( ) ; i ++ )		159603	0					
ANR	161229	ForInit	i = 0 ;		159603	0					
ANR	161230	AssignmentExpression	i = 0		159603	0		=			
ANR	161231	Identifier	i		159603	0					
ANR	161232	PrimaryExpression	0		159603	1					
ANR	161233	Condition	i < sources . getNumElem ( )		159603	1					
ANR	161234	RelationalExpression	i < sources . getNumElem ( )		159603	0		<			
ANR	161235	Identifier	i		159603	0					
ANR	161236	CallExpression	sources . getNumElem ( )		159603	1					
ANR	161237	Callee	sources . getNumElem		159603	0					
ANR	161238	MemberAccess	sources . getNumElem		159603	0					
ANR	161239	Identifier	sources		159603	0					
ANR	161240	Identifier	getNumElem		159603	1					
ANR	161241	ArgumentList			159603	1					
ANR	161242	PostIncDecOperationExpression	i ++		159603	2					
ANR	161243	Identifier	i		159603	0					
ANR	161244	IncDec	++		159603	1					
ANR	161245	CompoundStatement		351:5:10388:10405	159603	3					
ANR	161246	IdentifierDeclStatement	int src = sources . getElem ( i ) ;		159603	0					
ANR	161247	IdentifierDecl	src = sources . getElem ( i )		159603	0					
ANR	161248	IdentifierDeclType	int		159603	0					
ANR	161249	Identifier	src		159603	1					
ANR	161250	AssignmentExpression	src = sources . getElem ( i )		159603	2		=			
ANR	161251	Identifier	src		159603	0					
ANR	161252	CallExpression	sources . getElem ( i )		159603	1					
ANR	161253	Callee	sources . getElem		159603	0					
ANR	161254	MemberAccess	sources . getElem		159603	0					
ANR	161255	Identifier	sources		159603	0					
ANR	161256	Identifier	getElem		159603	1					
ANR	161257	ArgumentList	i		159603	1					
ANR	161258	Argument	i		159603	0					
ANR	161259	Identifier	i		159603	0					
ANR	161260	IdentifierDeclStatement	unsigned long pri ;		159603	1					
ANR	161261	IdentifierDecl	pri		159603	0					
ANR	161262	IdentifierDeclType	unsigned long		159603	0					
ANR	161263	Identifier	pri		159603	1					
ANR	161264	WhileStatement	while ( true )		159603	2					
ANR	161265	Condition	true		159603	0					
ANR	161266	Identifier	true		159603	0					
ANR	161267	CompoundStatement		354:6:10473:10517	159603	1					
ANR	161268	ExpressionStatement	pri = btreeTab [ src ] -> findMinKey ( )		159603	0					
ANR	161269	AssignmentExpression	pri = btreeTab [ src ] -> findMinKey ( )		159603	0		=			
ANR	161270	Identifier	pri		159603	0					
ANR	161271	CallExpression	btreeTab [ src ] -> findMinKey ( )		159603	1					
ANR	161272	Callee	btreeTab [ src ] -> findMinKey		159603	0					
ANR	161273	PtrMemberAccess	btreeTab [ src ] -> findMinKey		159603	0					
ANR	161274	ArrayIndexing	btreeTab [ src ]		159603	0					
ANR	161275	Identifier	btreeTab		159603	0					
ANR	161276	Identifier	src		159603	1					
ANR	161277	Identifier	findMinKey		159603	1					
ANR	161278	ArgumentList			159603	1					
ANR	161279	IdentifierDeclStatement	int srcB = btreeTab [ src ] -> findValForMinKey ( ) ;		159603	1					
ANR	161280	IdentifierDecl	srcB = btreeTab [ src ] -> findValForMinKey ( )		159603	0					
ANR	161281	IdentifierDeclType	int		159603	0					
ANR	161282	Identifier	srcB		159603	1					
ANR	161283	AssignmentExpression	srcB = btreeTab [ src ] -> findValForMinKey ( )		159603	2		=			
ANR	161284	Identifier	srcB		159603	0					
ANR	161285	CallExpression	btreeTab [ src ] -> findValForMinKey ( )		159603	1					
ANR	161286	Callee	btreeTab [ src ] -> findValForMinKey		159603	0					
ANR	161287	PtrMemberAccess	btreeTab [ src ] -> findValForMinKey		159603	0					
ANR	161288	ArrayIndexing	btreeTab [ src ]		159603	0					
ANR	161289	Identifier	btreeTab		159603	0					
ANR	161290	Identifier	src		159603	1					
ANR	161291	Identifier	findValForMinKey		159603	1					
ANR	161292	ArgumentList			159603	1					
ANR	161293	IfStatement	if ( NULL != btreeTab [ srcB ] )		159603	2					
ANR	161294	Condition	NULL != btreeTab [ srcB ]		159603	0					
ANR	161295	EqualityExpression	NULL != btreeTab [ srcB ]		159603	0		!=			
ANR	161296	Identifier	NULL		159603	0					
ANR	161297	ArrayIndexing	btreeTab [ srcB ]		159603	1					
ANR	161298	Identifier	btreeTab		159603	0					
ANR	161299	Identifier	srcB		159603	1					
ANR	161300	BreakStatement	break ;		159603	1					
ANR	161301	ExpressionStatement	btreeTab [ src ] -> removeMin ( )		159603	3					
ANR	161302	CallExpression	btreeTab [ src ] -> removeMin ( )		159603	0					
ANR	161303	Callee	btreeTab [ src ] -> removeMin		159603	0					
ANR	161304	PtrMemberAccess	btreeTab [ src ] -> removeMin		159603	0					
ANR	161305	ArrayIndexing	btreeTab [ src ]		159603	0					
ANR	161306	Identifier	btreeTab		159603	0					
ANR	161307	Identifier	src		159603	1					
ANR	161308	Identifier	removeMin		159603	1					
ANR	161309	ArgumentList			159603	1					
ANR	161310	ExpressionStatement			159603	3					
ANR	161311	IfStatement	if ( pri > maxPri )		159603	4					
ANR	161312	Condition	pri > maxPri		159603	0					
ANR	161313	RelationalExpression	pri > maxPri		159603	0		>			
ANR	161314	Identifier	pri		159603	0					
ANR	161315	Identifier	maxPri		159603	1					
ANR	161316	CompoundStatement		360:24:10633:10633	159603	1					
ANR	161317	ExpressionStatement	maxPri = pri		159603	0					
ANR	161318	AssignmentExpression	maxPri = pri		159603	0		=			
ANR	161319	Identifier	maxPri		159603	0					
ANR	161320	Identifier	pri		159603	1					
ANR	161321	ExpressionStatement	maxSrc = src		159603	1					
ANR	161322	AssignmentExpression	maxSrc = src		159603	0		=			
ANR	161323	Identifier	maxSrc		159603	0					
ANR	161324	Identifier	src		159603	1					
ANR	161325	ExpressionStatement			159603	5					
ANR	161326	ExpressionStatement			159603	1					
ANR	161327	ExpressionStatement			159603	6					
ANR	161328	IfStatement	if ( argumConstit )		159603	7					
ANR	161329	Condition	argumConstit		159603	0					
ANR	161330	Identifier	argumConstit		159603	0					
ANR	161331	CompoundStatement		372:4:10796:10822	159603	1					
ANR	161332	IdentifierDeclStatement	char name [ MAX_ARGV_LEN + 40 ] ;		159603	0					
ANR	161333	IdentifierDecl	name [ MAX_ARGV_LEN + 40 ]		159603	0					
ANR	161334	IdentifierDeclType	char [ MAX_ARGV_LEN + 40 ]		159603	0					
ANR	161335	Identifier	name		159603	1					
ANR	161336	AdditiveExpression	MAX_ARGV_LEN + 40		159603	2		+			
ANR	161337	Identifier	MAX_ARGV_LEN		159603	0					
ANR	161338	PrimaryExpression	40		159603	1					
ANR	161339	ExpressionStatement	"snprintf ( name , MAX_ARGV_LEN , ""%s%06d.dot"" , fileNameConstit , seq )"		159603	1					
ANR	161340	CallExpression	"snprintf ( name , MAX_ARGV_LEN , ""%s%06d.dot"" , fileNameConstit , seq )"		159603	0					
ANR	161341	Callee	snprintf		159603	0					
ANR	161342	Identifier	snprintf		159603	0					
ANR	161343	ArgumentList	name		159603	1					
ANR	161344	Argument	name		159603	0					
ANR	161345	Identifier	name		159603	0					
ANR	161346	Argument	MAX_ARGV_LEN		159603	1					
ANR	161347	Identifier	MAX_ARGV_LEN		159603	0					
ANR	161348	Argument	"""%s%06d.dot"""		159603	2					
ANR	161349	PrimaryExpression	"""%s%06d.dot"""		159603	0					
ANR	161350	Argument	fileNameConstit		159603	3					
ANR	161351	Identifier	fileNameConstit		159603	0					
ANR	161352	Argument	seq		159603	4					
ANR	161353	Identifier	seq		159603	0					
ANR	161354	ExpressionStatement	seq ++		159603	2					
ANR	161355	PostIncDecOperationExpression	seq ++		159603	0					
ANR	161356	Identifier	seq		159603	0					
ANR	161357	IncDec	++		159603	1					
ANR	161358	ExpressionStatement	superdag . getConstituent ( maxSrc ) -> saveAsDot ( name )		159603	3					
ANR	161359	CallExpression	superdag . getConstituent ( maxSrc ) -> saveAsDot ( name )		159603	0					
ANR	161360	Callee	superdag . getConstituent ( maxSrc ) -> saveAsDot		159603	0					
ANR	161361	PtrMemberAccess	superdag . getConstituent ( maxSrc ) -> saveAsDot		159603	0					
ANR	161362	CallExpression	superdag . getConstituent ( maxSrc )		159603	0					
ANR	161363	Callee	superdag . getConstituent		159603	0					
ANR	161364	MemberAccess	superdag . getConstituent		159603	0					
ANR	161365	Identifier	superdag		159603	0					
ANR	161366	Identifier	getConstituent		159603	1					
ANR	161367	ArgumentList	maxSrc		159603	1					
ANR	161368	Argument	maxSrc		159603	0					
ANR	161369	Identifier	maxSrc		159603	0					
ANR	161370	Identifier	saveAsDot		159603	1					
ANR	161371	ArgumentList	name		159603	1					
ANR	161372	Argument	name		159603	0					
ANR	161373	Identifier	name		159603	0					
ANR	161374	ExpressionStatement			159603	8					
ANR	161375	ForStatement	for ( j = 0 ; j < nonSink [ maxSrc ] ; j ++ )		159603	9					
ANR	161376	ForInit	j = 0 ;		159603	0					
ANR	161377	AssignmentExpression	j = 0		159603	0		=			
ANR	161378	Identifier	j		159603	0					
ANR	161379	PrimaryExpression	0		159603	1					
ANR	161380	Condition	j < nonSink [ maxSrc ]		159603	1					
ANR	161381	RelationalExpression	j < nonSink [ maxSrc ]		159603	0		<			
ANR	161382	Identifier	j		159603	0					
ANR	161383	ArrayIndexing	nonSink [ maxSrc ]		159603	1					
ANR	161384	Identifier	nonSink		159603	0					
ANR	161385	Identifier	maxSrc		159603	1					
ANR	161386	PostIncDecOperationExpression	j ++		159603	2					
ANR	161387	Identifier	j		159603	0					
ANR	161388	IncDec	++		159603	1					
ANR	161389	CompoundStatement		400:4:11574:11626	159603	3					
ANR	161390	IdentifierDeclStatement	int node = schedule [ maxSrc ] [ j ] ;		159603	0					
ANR	161391	IdentifierDecl	node = schedule [ maxSrc ] [ j ]		159603	0					
ANR	161392	IdentifierDeclType	int		159603	0					
ANR	161393	Identifier	node		159603	1					
ANR	161394	AssignmentExpression	node = schedule [ maxSrc ] [ j ]		159603	2		=			
ANR	161395	Identifier	node		159603	0					
ANR	161396	ArrayIndexing	schedule [ maxSrc ] [ j ]		159603	1					
ANR	161397	ArrayIndexing	schedule [ maxSrc ]		159603	0					
ANR	161398	Identifier	schedule		159603	0					
ANR	161399	Identifier	maxSrc		159603	1					
ANR	161400	Identifier	j		159603	1					
ANR	161401	IdentifierDeclStatement	int intLabel = superdag . getConstituent ( maxSrc ) -> getLabelInt ( node ) ;		159603	1					
ANR	161402	IdentifierDecl	intLabel = superdag . getConstituent ( maxSrc ) -> getLabelInt ( node )		159603	0					
ANR	161403	IdentifierDeclType	int		159603	0					
ANR	161404	Identifier	intLabel		159603	1					
ANR	161405	AssignmentExpression	intLabel = superdag . getConstituent ( maxSrc ) -> getLabelInt ( node )		159603	2		=			
ANR	161406	Identifier	intLabel		159603	0					
ANR	161407	CallExpression	superdag . getConstituent ( maxSrc ) -> getLabelInt ( node )		159603	1					
ANR	161408	Callee	superdag . getConstituent ( maxSrc ) -> getLabelInt		159603	0					
ANR	161409	PtrMemberAccess	superdag . getConstituent ( maxSrc ) -> getLabelInt		159603	0					
ANR	161410	CallExpression	superdag . getConstituent ( maxSrc )		159603	0					
ANR	161411	Callee	superdag . getConstituent		159603	0					
ANR	161412	MemberAccess	superdag . getConstituent		159603	0					
ANR	161413	Identifier	superdag		159603	0					
ANR	161414	Identifier	getConstituent		159603	1					
ANR	161415	ArgumentList	maxSrc		159603	1					
ANR	161416	Argument	maxSrc		159603	0					
ANR	161417	Identifier	maxSrc		159603	0					
ANR	161418	Identifier	getLabelInt		159603	1					
ANR	161419	ArgumentList	node		159603	1					
ANR	161420	Argument	node		159603	0					
ANR	161421	Identifier	node		159603	0					
ANR	161422	ExpressionStatement	sked [ idx ] = intLabel		159603	2					
ANR	161423	AssignmentExpression	sked [ idx ] = intLabel		159603	0		=			
ANR	161424	ArrayIndexing	sked [ idx ]		159603	0					
ANR	161425	Identifier	sked		159603	0					
ANR	161426	Identifier	idx		159603	1					
ANR	161427	Identifier	intLabel		159603	1					
ANR	161428	ExpressionStatement	idx ++		159603	3					
ANR	161429	PostIncDecOperationExpression	idx ++		159603	0					
ANR	161430	Identifier	idx		159603	0					
ANR	161431	IncDec	++		159603	1					
ANR	161432	IdentifierDeclStatement	const char * stringLabel = g . getLabelString ( intLabel ) ;		159603	4					
ANR	161433	IdentifierDecl	* stringLabel = g . getLabelString ( intLabel )		159603	0					
ANR	161434	IdentifierDeclType	const char *		159603	0					
ANR	161435	Identifier	stringLabel		159603	1					
ANR	161436	AssignmentExpression	* stringLabel = g . getLabelString ( intLabel )		159603	2		=			
ANR	161437	Identifier	stringLabel		159603	0					
ANR	161438	CallExpression	g . getLabelString ( intLabel )		159603	1					
ANR	161439	Callee	g . getLabelString		159603	0					
ANR	161440	MemberAccess	g . getLabelString		159603	0					
ANR	161441	Identifier	g		159603	0					
ANR	161442	Identifier	getLabelString		159603	1					
ANR	161443	ArgumentList	intLabel		159603	1					
ANR	161444	Argument	intLabel		159603	0					
ANR	161445	Identifier	intLabel		159603	0					
ANR	161446	ExpressionStatement	"printf ( ""constituent %d  node %d  intLabel %d  stringLabel %s\\n"" , maxSrc , node , intLabel , stringLabel )"		159603	5					
ANR	161447	CallExpression	"printf ( ""constituent %d  node %d  intLabel %d  stringLabel %s\\n"" , maxSrc , node , intLabel , stringLabel )"		159603	0					
ANR	161448	Callee	printf		159603	0					
ANR	161449	Identifier	printf		159603	0					
ANR	161450	ArgumentList	"""constituent %d  node %d  intLabel %d  stringLabel %s\\n"""		159603	1					
ANR	161451	Argument	"""constituent %d  node %d  intLabel %d  stringLabel %s\\n"""		159603	0					
ANR	161452	PrimaryExpression	"""constituent %d  node %d  intLabel %d  stringLabel %s\\n"""		159603	0					
ANR	161453	Argument	maxSrc		159603	1					
ANR	161454	Identifier	maxSrc		159603	0					
ANR	161455	Argument	node		159603	2					
ANR	161456	Identifier	node		159603	0					
ANR	161457	Argument	intLabel		159603	3					
ANR	161458	Identifier	intLabel		159603	0					
ANR	161459	Argument	stringLabel		159603	4					
ANR	161460	Identifier	stringLabel		159603	0					
ANR	161461	IfStatement	if ( argumPrio )		159603	6					
ANR	161462	Condition	argumPrio		159603	0					
ANR	161463	Identifier	argumPrio		159603	0					
ANR	161464	CompoundStatement		407:20:11826:11826	159603	1					
ANR	161465	ExpressionStatement	"fprintf ( fPrio , ""%s\\n"" , stringLabel )"		159603	0					
ANR	161466	CallExpression	"fprintf ( fPrio , ""%s\\n"" , stringLabel )"		159603	0					
ANR	161467	Callee	fprintf		159603	0					
ANR	161468	Identifier	fprintf		159603	0					
ANR	161469	ArgumentList	fPrio		159603	1					
ANR	161470	Argument	fPrio		159603	0					
ANR	161471	Identifier	fPrio		159603	0					
ANR	161472	Argument	"""%s\\n"""		159603	1					
ANR	161473	PrimaryExpression	"""%s\\n"""		159603	0					
ANR	161474	Argument	stringLabel		159603	2					
ANR	161475	Identifier	stringLabel		159603	0					
ANR	161476	ExpressionStatement			159603	7					
ANR	161477	ExpressionStatement			159603	10					
ANR	161478	Statement	delete		159603	11					
ANR	161479	ExpressionStatement	btreeTab [ maxSrc ]		159603	12					
ANR	161480	ArrayIndexing	btreeTab [ maxSrc ]		159603	0					
ANR	161481	Identifier	btreeTab		159603	0					
ANR	161482	Identifier	maxSrc		159603	1					
ANR	161483	ExpressionStatement	btreeTab [ maxSrc ] = NULL		159603	13					
ANR	161484	AssignmentExpression	btreeTab [ maxSrc ] = NULL		159603	0		=			
ANR	161485	ArrayIndexing	btreeTab [ maxSrc ]		159603	0					
ANR	161486	Identifier	btreeTab		159603	0					
ANR	161487	Identifier	maxSrc		159603	1					
ANR	161488	Identifier	NULL		159603	1					
ANR	161489	ExpressionStatement	sources . removeElem ( maxSrc )		159603	14					
ANR	161490	CallExpression	sources . removeElem ( maxSrc )		159603	0					
ANR	161491	Callee	sources . removeElem		159603	0					
ANR	161492	MemberAccess	sources . removeElem		159603	0					
ANR	161493	Identifier	sources		159603	0					
ANR	161494	Identifier	removeElem		159603	1					
ANR	161495	ArgumentList	maxSrc		159603	1					
ANR	161496	Argument	maxSrc		159603	0					
ANR	161497	Identifier	maxSrc		159603	0					
ANR	161498	ExpressionStatement	numParents [ maxSrc ] = - 1		159603	15					
ANR	161499	AssignmentExpression	numParents [ maxSrc ] = - 1		159603	0		=			
ANR	161500	ArrayIndexing	numParents [ maxSrc ]		159603	0					
ANR	161501	Identifier	numParents		159603	0					
ANR	161502	Identifier	maxSrc		159603	1					
ANR	161503	UnaryOperationExpression	- 1		159603	1					
ANR	161504	UnaryOperator	-		159603	0					
ANR	161505	PrimaryExpression	1		159603	1					
ANR	161506	ForStatement	for ( k = 0 ; k < superdag . getNumArcs ( maxSrc ) ; k ++ )		159603	16					
ANR	161507	ForInit	k = 0 ;		159603	0					
ANR	161508	AssignmentExpression	k = 0		159603	0		=			
ANR	161509	Identifier	k		159603	0					
ANR	161510	PrimaryExpression	0		159603	1					
ANR	161511	Condition	k < superdag . getNumArcs ( maxSrc )		159603	1					
ANR	161512	RelationalExpression	k < superdag . getNumArcs ( maxSrc )		159603	0		<			
ANR	161513	Identifier	k		159603	0					
ANR	161514	CallExpression	superdag . getNumArcs ( maxSrc )		159603	1					
ANR	161515	Callee	superdag . getNumArcs		159603	0					
ANR	161516	MemberAccess	superdag . getNumArcs		159603	0					
ANR	161517	Identifier	superdag		159603	0					
ANR	161518	Identifier	getNumArcs		159603	1					
ANR	161519	ArgumentList	maxSrc		159603	1					
ANR	161520	Argument	maxSrc		159603	0					
ANR	161521	Identifier	maxSrc		159603	0					
ANR	161522	PostIncDecOperationExpression	k ++		159603	2					
ANR	161523	Identifier	k		159603	0					
ANR	161524	IncDec	++		159603	1					
ANR	161525	CompoundStatement		428:4:12348:12385	159603	3					
ANR	161526	IdentifierDeclStatement	"int child = superdag . getArc ( maxSrc , k ) ;"		159603	0					
ANR	161527	IdentifierDecl	"child = superdag . getArc ( maxSrc , k )"		159603	0					
ANR	161528	IdentifierDeclType	int		159603	0					
ANR	161529	Identifier	child		159603	1					
ANR	161530	AssignmentExpression	"child = superdag . getArc ( maxSrc , k )"		159603	2		=			
ANR	161531	Identifier	child		159603	0					
ANR	161532	CallExpression	"superdag . getArc ( maxSrc , k )"		159603	1					
ANR	161533	Callee	superdag . getArc		159603	0					
ANR	161534	MemberAccess	superdag . getArc		159603	0					
ANR	161535	Identifier	superdag		159603	0					
ANR	161536	Identifier	getArc		159603	1					
ANR	161537	ArgumentList	maxSrc		159603	1					
ANR	161538	Argument	maxSrc		159603	0					
ANR	161539	Identifier	maxSrc		159603	0					
ANR	161540	Argument	k		159603	1					
ANR	161541	Identifier	k		159603	0					
ANR	161542	ExpressionStatement	numParents [ child ] --		159603	1					
ANR	161543	PostIncDecOperationExpression	numParents [ child ] --		159603	0					
ANR	161544	ArrayIndexing	numParents [ child ]		159603	0					
ANR	161545	Identifier	numParents		159603	0					
ANR	161546	Identifier	child		159603	1					
ANR	161547	IncDec	--		159603	1					
ANR	161548	IfStatement	if ( 0 == numParents [ child ] )		159603	2					
ANR	161549	Condition	0 == numParents [ child ]		159603	0					
ANR	161550	EqualityExpression	0 == numParents [ child ]		159603	0		==			
ANR	161551	PrimaryExpression	0		159603	0					
ANR	161552	ArrayIndexing	numParents [ child ]		159603	1					
ANR	161553	Identifier	numParents		159603	0					
ANR	161554	Identifier	child		159603	1					
ANR	161555	CompoundStatement		432:33:12491:12491	159603	1					
ANR	161556	ExpressionStatement	btreeTab [ child ] = new BTree ( )		159603	0					
ANR	161557	AssignmentExpression	btreeTab [ child ] = new BTree ( )		159603	0		=			
ANR	161558	ArrayIndexing	btreeTab [ child ]		159603	0					
ANR	161559	Identifier	btreeTab		159603	0					
ANR	161560	Identifier	child		159603	1					
ANR	161561	UnaryExpression	new BTree ( )		159603	1					
ANR	161562	IfStatement	if ( NULL == btreeTab [ child ] )		159603	1					
ANR	161563	Condition	NULL == btreeTab [ child ]		159603	0					
ANR	161564	EqualityExpression	NULL == btreeTab [ child ]		159603	0		==			
ANR	161565	Identifier	NULL		159603	0					
ANR	161566	ArrayIndexing	btreeTab [ child ]		159603	1					
ANR	161567	Identifier	btreeTab		159603	0					
ANR	161568	Identifier	child		159603	1					
ANR	161569	ThrowStatement	"throw ""prio, btreeTab[child] is NULL"" ;"		159603	1					
ANR	161570	PrimaryExpression	"""prio, btreeTab[child] is NULL"""		159603	0					
ANR	161571	ForStatement	for ( j = 0 ; j < sources . getNumElem ( ) ; j ++ )		159603	2					
ANR	161572	ForInit	j = 0 ;		159603	0					
ANR	161573	AssignmentExpression	j = 0		159603	0		=			
ANR	161574	Identifier	j		159603	0					
ANR	161575	PrimaryExpression	0		159603	1					
ANR	161576	Condition	j < sources . getNumElem ( )		159603	1					
ANR	161577	RelationalExpression	j < sources . getNumElem ( )		159603	0		<			
ANR	161578	Identifier	j		159603	0					
ANR	161579	CallExpression	sources . getNumElem ( )		159603	1					
ANR	161580	Callee	sources . getNumElem		159603	0					
ANR	161581	MemberAccess	sources . getNumElem		159603	0					
ANR	161582	Identifier	sources		159603	0					
ANR	161583	Identifier	getNumElem		159603	1					
ANR	161584	ArgumentList			159603	1					
ANR	161585	PostIncDecOperationExpression	j ++		159603	2					
ANR	161586	Identifier	j		159603	0					
ANR	161587	IncDec	++		159603	1					
ANR	161588	CompoundStatement		444:6:12927:12964	159603	3					
ANR	161589	IdentifierDeclStatement	int srcB = sources . getElem ( j ) ;		159603	0					
ANR	161590	IdentifierDecl	srcB = sources . getElem ( j )		159603	0					
ANR	161591	IdentifierDeclType	int		159603	0					
ANR	161592	Identifier	srcB		159603	1					
ANR	161593	AssignmentExpression	srcB = sources . getElem ( j )		159603	2		=			
ANR	161594	Identifier	srcB		159603	0					
ANR	161595	CallExpression	sources . getElem ( j )		159603	1					
ANR	161596	Callee	sources . getElem		159603	0					
ANR	161597	MemberAccess	sources . getElem		159603	0					
ANR	161598	Identifier	sources		159603	0					
ANR	161599	Identifier	getElem		159603	1					
ANR	161600	ArgumentList	j		159603	1					
ANR	161601	Argument	j		159603	0					
ANR	161602	Identifier	j		159603	0					
ANR	161603	ExpressionStatement	"c = lib . getPriority ( eligPlot [ child ] , nonSink [ child ] , eligPlot [ srcB ] , nonSink [ srcB ] )"		159603	1					
ANR	161604	AssignmentExpression	"c = lib . getPriority ( eligPlot [ child ] , nonSink [ child ] , eligPlot [ srcB ] , nonSink [ srcB ] )"		159603	0		=			
ANR	161605	Identifier	c		159603	0					
ANR	161606	CallExpression	"lib . getPriority ( eligPlot [ child ] , nonSink [ child ] , eligPlot [ srcB ] , nonSink [ srcB ] )"		159603	1					
ANR	161607	Callee	lib . getPriority		159603	0					
ANR	161608	MemberAccess	lib . getPriority		159603	0					
ANR	161609	Identifier	lib		159603	0					
ANR	161610	Identifier	getPriority		159603	1					
ANR	161611	ArgumentList	eligPlot [ child ]		159603	1					
ANR	161612	Argument	eligPlot [ child ]		159603	0					
ANR	161613	ArrayIndexing	eligPlot [ child ]		159603	0					
ANR	161614	Identifier	eligPlot		159603	0					
ANR	161615	Identifier	child		159603	1					
ANR	161616	Argument	nonSink [ child ]		159603	1					
ANR	161617	ArrayIndexing	nonSink [ child ]		159603	0					
ANR	161618	Identifier	nonSink		159603	0					
ANR	161619	Identifier	child		159603	1					
ANR	161620	Argument	eligPlot [ srcB ]		159603	2					
ANR	161621	ArrayIndexing	eligPlot [ srcB ]		159603	0					
ANR	161622	Identifier	eligPlot		159603	0					
ANR	161623	Identifier	srcB		159603	1					
ANR	161624	Argument	nonSink [ srcB ]		159603	3					
ANR	161625	ArrayIndexing	nonSink [ srcB ]		159603	0					
ANR	161626	Identifier	nonSink		159603	0					
ANR	161627	Identifier	srcB		159603	1					
ANR	161628	ExpressionStatement	c *= ULONG_MAX / 2		159603	2					
ANR	161629	AssignmentExpression	c *= ULONG_MAX / 2		159603	0		*=			
ANR	161630	Identifier	c		159603	0					
ANR	161631	MultiplicativeExpression	ULONG_MAX / 2		159603	1		/			
ANR	161632	Identifier	ULONG_MAX		159603	0					
ANR	161633	PrimaryExpression	2		159603	1					
ANR	161634	IdentifierDeclStatement	unsigned long key = ( unsigned long ) c ;		159603	3					
ANR	161635	IdentifierDecl	key = ( unsigned long ) c		159603	0					
ANR	161636	IdentifierDeclType	unsigned long		159603	0					
ANR	161637	Identifier	key		159603	1					
ANR	161638	AssignmentExpression	key = ( unsigned long ) c		159603	2		=			
ANR	161639	Identifier	key		159603	0					
ANR	161640	CastExpression	( unsigned long ) c		159603	1					
ANR	161641	CastTarget	unsigned long		159603	0					
ANR	161642	Identifier	c		159603	1					
ANR	161643	ExpressionStatement	"btreeTab [ child ] -> insert ( key , srcB )"		159603	4					
ANR	161644	CallExpression	"btreeTab [ child ] -> insert ( key , srcB )"		159603	0					
ANR	161645	Callee	btreeTab [ child ] -> insert		159603	0					
ANR	161646	PtrMemberAccess	btreeTab [ child ] -> insert		159603	0					
ANR	161647	ArrayIndexing	btreeTab [ child ]		159603	0					
ANR	161648	Identifier	btreeTab		159603	0					
ANR	161649	Identifier	child		159603	1					
ANR	161650	Identifier	insert		159603	1					
ANR	161651	ArgumentList	key		159603	1					
ANR	161652	Argument	key		159603	0					
ANR	161653	Identifier	key		159603	0					
ANR	161654	Argument	srcB		159603	1					
ANR	161655	Identifier	srcB		159603	0					
ANR	161656	ExpressionStatement			159603	3					
ANR	161657	ForStatement	for ( j = 0 ; j < sources . getNumElem ( ) ; j ++ )		159603	4					
ANR	161658	ForInit	j = 0 ;		159603	0					
ANR	161659	AssignmentExpression	j = 0		159603	0		=			
ANR	161660	Identifier	j		159603	0					
ANR	161661	PrimaryExpression	0		159603	1					
ANR	161662	Condition	j < sources . getNumElem ( )		159603	1					
ANR	161663	RelationalExpression	j < sources . getNumElem ( )		159603	0		<			
ANR	161664	Identifier	j		159603	0					
ANR	161665	CallExpression	sources . getNumElem ( )		159603	1					
ANR	161666	Callee	sources . getNumElem		159603	0					
ANR	161667	MemberAccess	sources . getNumElem		159603	0					
ANR	161668	Identifier	sources		159603	0					
ANR	161669	Identifier	getNumElem		159603	1					
ANR	161670	ArgumentList			159603	1					
ANR	161671	PostIncDecOperationExpression	j ++		159603	2					
ANR	161672	Identifier	j		159603	0					
ANR	161673	IncDec	++		159603	1					
ANR	161674	CompoundStatement		453:6:13371:13408	159603	3					
ANR	161675	IdentifierDeclStatement	int srcB = sources . getElem ( j ) ;		159603	0					
ANR	161676	IdentifierDecl	srcB = sources . getElem ( j )		159603	0					
ANR	161677	IdentifierDeclType	int		159603	0					
ANR	161678	Identifier	srcB		159603	1					
ANR	161679	AssignmentExpression	srcB = sources . getElem ( j )		159603	2		=			
ANR	161680	Identifier	srcB		159603	0					
ANR	161681	CallExpression	sources . getElem ( j )		159603	1					
ANR	161682	Callee	sources . getElem		159603	0					
ANR	161683	MemberAccess	sources . getElem		159603	0					
ANR	161684	Identifier	sources		159603	0					
ANR	161685	Identifier	getElem		159603	1					
ANR	161686	ArgumentList	j		159603	1					
ANR	161687	Argument	j		159603	0					
ANR	161688	Identifier	j		159603	0					
ANR	161689	ExpressionStatement	"c = lib . getPriority ( eligPlot [ srcB ] , nonSink [ srcB ] , eligPlot [ child ] , nonSink [ child ] )"		159603	1					
ANR	161690	AssignmentExpression	"c = lib . getPriority ( eligPlot [ srcB ] , nonSink [ srcB ] , eligPlot [ child ] , nonSink [ child ] )"		159603	0		=			
ANR	161691	Identifier	c		159603	0					
ANR	161692	CallExpression	"lib . getPriority ( eligPlot [ srcB ] , nonSink [ srcB ] , eligPlot [ child ] , nonSink [ child ] )"		159603	1					
ANR	161693	Callee	lib . getPriority		159603	0					
ANR	161694	MemberAccess	lib . getPriority		159603	0					
ANR	161695	Identifier	lib		159603	0					
ANR	161696	Identifier	getPriority		159603	1					
ANR	161697	ArgumentList	eligPlot [ srcB ]		159603	1					
ANR	161698	Argument	eligPlot [ srcB ]		159603	0					
ANR	161699	ArrayIndexing	eligPlot [ srcB ]		159603	0					
ANR	161700	Identifier	eligPlot		159603	0					
ANR	161701	Identifier	srcB		159603	1					
ANR	161702	Argument	nonSink [ srcB ]		159603	1					
ANR	161703	ArrayIndexing	nonSink [ srcB ]		159603	0					
ANR	161704	Identifier	nonSink		159603	0					
ANR	161705	Identifier	srcB		159603	1					
ANR	161706	Argument	eligPlot [ child ]		159603	2					
ANR	161707	ArrayIndexing	eligPlot [ child ]		159603	0					
ANR	161708	Identifier	eligPlot		159603	0					
ANR	161709	Identifier	child		159603	1					
ANR	161710	Argument	nonSink [ child ]		159603	3					
ANR	161711	ArrayIndexing	nonSink [ child ]		159603	0					
ANR	161712	Identifier	nonSink		159603	0					
ANR	161713	Identifier	child		159603	1					
ANR	161714	ExpressionStatement	c *= ULONG_MAX / 2		159603	2					
ANR	161715	AssignmentExpression	c *= ULONG_MAX / 2		159603	0		*=			
ANR	161716	Identifier	c		159603	0					
ANR	161717	MultiplicativeExpression	ULONG_MAX / 2		159603	1		/			
ANR	161718	Identifier	ULONG_MAX		159603	0					
ANR	161719	PrimaryExpression	2		159603	1					
ANR	161720	IdentifierDeclStatement	unsigned long key = ( unsigned long ) c ;		159603	3					
ANR	161721	IdentifierDecl	key = ( unsigned long ) c		159603	0					
ANR	161722	IdentifierDeclType	unsigned long		159603	0					
ANR	161723	Identifier	key		159603	1					
ANR	161724	AssignmentExpression	key = ( unsigned long ) c		159603	2		=			
ANR	161725	Identifier	key		159603	0					
ANR	161726	CastExpression	( unsigned long ) c		159603	1					
ANR	161727	CastTarget	unsigned long		159603	0					
ANR	161728	Identifier	c		159603	1					
ANR	161729	ExpressionStatement	"btreeTab [ srcB ] -> insert ( key , child )"		159603	4					
ANR	161730	CallExpression	"btreeTab [ srcB ] -> insert ( key , child )"		159603	0					
ANR	161731	Callee	btreeTab [ srcB ] -> insert		159603	0					
ANR	161732	PtrMemberAccess	btreeTab [ srcB ] -> insert		159603	0					
ANR	161733	ArrayIndexing	btreeTab [ srcB ]		159603	0					
ANR	161734	Identifier	btreeTab		159603	0					
ANR	161735	Identifier	srcB		159603	1					
ANR	161736	Identifier	insert		159603	1					
ANR	161737	ArgumentList	key		159603	1					
ANR	161738	Argument	key		159603	0					
ANR	161739	Identifier	key		159603	0					
ANR	161740	Argument	child		159603	1					
ANR	161741	Identifier	child		159603	0					
ANR	161742	ExpressionStatement			159603	5					
ANR	161743	ExpressionStatement	sources . append ( child )		159603	6					
ANR	161744	CallExpression	sources . append ( child )		159603	0					
ANR	161745	Callee	sources . append		159603	0					
ANR	161746	MemberAccess	sources . append		159603	0					
ANR	161747	Identifier	sources		159603	0					
ANR	161748	Identifier	append		159603	1					
ANR	161749	ArgumentList	child		159603	1					
ANR	161750	Argument	child		159603	0					
ANR	161751	Identifier	child		159603	0					
ANR	161752	ExpressionStatement			159603	3					
ANR	161753	ExpressionStatement			159603	17					
ANR	161754	ExpressionStatement			159603	75					
ANR	161755	ExpressionStatement	"printf ( ""-- scheduling all sinks of G\\n"" )"		159603	76					
ANR	161756	CallExpression	"printf ( ""-- scheduling all sinks of G\\n"" )"		159603	0					
ANR	161757	Callee	printf		159603	0					
ANR	161758	Identifier	printf		159603	0					
ANR	161759	ArgumentList	"""-- scheduling all sinks of G\\n"""		159603	1					
ANR	161760	Argument	"""-- scheduling all sinks of G\\n"""		159603	0					
ANR	161761	PrimaryExpression	"""-- scheduling all sinks of G\\n"""		159603	0					
ANR	161762	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		159603	77					
ANR	161763	ForInit	i = 0 ;		159603	0					
ANR	161764	AssignmentExpression	i = 0		159603	0		=			
ANR	161765	Identifier	i		159603	0					
ANR	161766	PrimaryExpression	0		159603	1					
ANR	161767	Condition	i < g . getNumNodes ( )		159603	1					
ANR	161768	RelationalExpression	i < g . getNumNodes ( )		159603	0		<			
ANR	161769	Identifier	i		159603	0					
ANR	161770	CallExpression	g . getNumNodes ( )		159603	1					
ANR	161771	Callee	g . getNumNodes		159603	0					
ANR	161772	MemberAccess	g . getNumNodes		159603	0					
ANR	161773	Identifier	g		159603	0					
ANR	161774	Identifier	getNumNodes		159603	1					
ANR	161775	ArgumentList			159603	1					
ANR	161776	PostIncDecOperationExpression	i ++		159603	2					
ANR	161777	Identifier	i		159603	0					
ANR	161778	IncDec	++		159603	1					
ANR	161779	CompoundStatement		471:37:13695:13695	159603	3					
ANR	161780	IfStatement	if ( 0 == g . getNumArcs ( i ) )		159603	0					
ANR	161781	Condition	0 == g . getNumArcs ( i )		159603	0					
ANR	161782	EqualityExpression	0 == g . getNumArcs ( i )		159603	0		==			
ANR	161783	PrimaryExpression	0		159603	0					
ANR	161784	CallExpression	g . getNumArcs ( i )		159603	1					
ANR	161785	Callee	g . getNumArcs		159603	0					
ANR	161786	MemberAccess	g . getNumArcs		159603	0					
ANR	161787	Identifier	g		159603	0					
ANR	161788	Identifier	getNumArcs		159603	1					
ANR	161789	ArgumentList	i		159603	1					
ANR	161790	Argument	i		159603	0					
ANR	161791	Identifier	i		159603	0					
ANR	161792	CompoundStatement		478:4:13793:13839	159603	1					
ANR	161793	ExpressionStatement	sked [ idx ] = i		159603	0					
ANR	161794	AssignmentExpression	sked [ idx ] = i		159603	0		=			
ANR	161795	ArrayIndexing	sked [ idx ]		159603	0					
ANR	161796	Identifier	sked		159603	0					
ANR	161797	Identifier	idx		159603	1					
ANR	161798	Identifier	i		159603	1					
ANR	161799	ExpressionStatement	idx ++		159603	1					
ANR	161800	PostIncDecOperationExpression	idx ++		159603	0					
ANR	161801	Identifier	idx		159603	0					
ANR	161802	IncDec	++		159603	1					
ANR	161803	IdentifierDeclStatement	const char * stringLabel = g . getLabelString ( i ) ;		159603	2					
ANR	161804	IdentifierDecl	* stringLabel = g . getLabelString ( i )		159603	0					
ANR	161805	IdentifierDeclType	const char *		159603	0					
ANR	161806	Identifier	stringLabel		159603	1					
ANR	161807	AssignmentExpression	* stringLabel = g . getLabelString ( i )		159603	2		=			
ANR	161808	Identifier	stringLabel		159603	0					
ANR	161809	CallExpression	g . getLabelString ( i )		159603	1					
ANR	161810	Callee	g . getLabelString		159603	0					
ANR	161811	MemberAccess	g . getLabelString		159603	0					
ANR	161812	Identifier	g		159603	0					
ANR	161813	Identifier	getLabelString		159603	1					
ANR	161814	ArgumentList	i		159603	1					
ANR	161815	Argument	i		159603	0					
ANR	161816	Identifier	i		159603	0					
ANR	161817	ExpressionStatement	"printf ( ""%s \\n"" , stringLabel )"		159603	3					
ANR	161818	CallExpression	"printf ( ""%s \\n"" , stringLabel )"		159603	0					
ANR	161819	Callee	printf		159603	0					
ANR	161820	Identifier	printf		159603	0					
ANR	161821	ArgumentList	"""%s \\n"""		159603	1					
ANR	161822	Argument	"""%s \\n"""		159603	0					
ANR	161823	PrimaryExpression	"""%s \\n"""		159603	0					
ANR	161824	Argument	stringLabel		159603	1					
ANR	161825	Identifier	stringLabel		159603	0					
ANR	161826	IfStatement	if ( argumPrio )		159603	4					
ANR	161827	Condition	argumPrio		159603	0					
ANR	161828	Identifier	argumPrio		159603	0					
ANR	161829	CompoundStatement		485:20:13965:13965	159603	1					
ANR	161830	ExpressionStatement	"fprintf ( fPrio , ""%s\\n"" , stringLabel )"		159603	0					
ANR	161831	CallExpression	"fprintf ( fPrio , ""%s\\n"" , stringLabel )"		159603	0					
ANR	161832	Callee	fprintf		159603	0					
ANR	161833	Identifier	fprintf		159603	0					
ANR	161834	ArgumentList	fPrio		159603	1					
ANR	161835	Argument	fPrio		159603	0					
ANR	161836	Identifier	fPrio		159603	0					
ANR	161837	Argument	"""%s\\n"""		159603	1					
ANR	161838	PrimaryExpression	"""%s\\n"""		159603	0					
ANR	161839	Argument	stringLabel		159603	2					
ANR	161840	Identifier	stringLabel		159603	0					
ANR	161841	ExpressionStatement			159603	5					
ANR	161842	ExpressionStatement			159603	1					
ANR	161843	ExpressionStatement			159603	78					
ANR	161844	IfStatement	if ( argumPrio )		159603	79					
ANR	161845	Condition	argumPrio		159603	0					
ANR	161846	Identifier	argumPrio		159603	0					
ANR	161847	CompoundStatement		492:18:14048:14048	159603	1					
ANR	161848	ExpressionStatement	fclose ( fPrio )		159603	0					
ANR	161849	CallExpression	fclose ( fPrio )		159603	0					
ANR	161850	Callee	fclose		159603	0					
ANR	161851	Identifier	fclose		159603	0					
ANR	161852	ArgumentList	fPrio		159603	1					
ANR	161853	Argument	fPrio		159603	0					
ANR	161854	Identifier	fPrio		159603	0					
ANR	161855	ExpressionStatement			159603	80					
ANR	161856	IfStatement	if ( argumElig )		159603	81					
ANR	161857	Condition	argumElig		159603	0					
ANR	161858	Identifier	argumElig		159603	0					
ANR	161859	CompoundStatement		508:3:14307:14345	159603	1					
ANR	161860	ExpressionStatement	"printf ( ""-- computing eligibility plot\\n"" )"		159603	0					
ANR	161861	CallExpression	"printf ( ""-- computing eligibility plot\\n"" )"		159603	0					
ANR	161862	Callee	printf		159603	0					
ANR	161863	Identifier	printf		159603	0					
ANR	161864	ArgumentList	"""-- computing eligibility plot\\n"""		159603	1					
ANR	161865	Argument	"""-- computing eligibility plot\\n"""		159603	0					
ANR	161866	PrimaryExpression	"""-- computing eligibility plot\\n"""		159603	0					
ANR	161867	IdentifierDeclStatement	int * elig = g . getEligPlot ( sked ) ;		159603	1					
ANR	161868	IdentifierDecl	* elig = g . getEligPlot ( sked )		159603	0					
ANR	161869	IdentifierDeclType	int *		159603	0					
ANR	161870	Identifier	elig		159603	1					
ANR	161871	AssignmentExpression	* elig = g . getEligPlot ( sked )		159603	2		=			
ANR	161872	Identifier	elig		159603	0					
ANR	161873	CallExpression	g . getEligPlot ( sked )		159603	1					
ANR	161874	Callee	g . getEligPlot		159603	0					
ANR	161875	MemberAccess	g . getEligPlot		159603	0					
ANR	161876	Identifier	g		159603	0					
ANR	161877	Identifier	getEligPlot		159603	1					
ANR	161878	ArgumentList	sked		159603	1					
ANR	161879	Argument	sked		159603	0					
ANR	161880	Identifier	sked		159603	0					
ANR	161881	IfStatement	if ( NULL == elig )		159603	2					
ANR	161882	Condition	NULL == elig		159603	0					
ANR	161883	EqualityExpression	NULL == elig		159603	0		==			
ANR	161884	Identifier	NULL		159603	0					
ANR	161885	Identifier	elig		159603	1					
ANR	161886	ThrowStatement	"throw ""prio, elig is NULL"" ;"		159603	1					
ANR	161887	PrimaryExpression	"""prio, elig is NULL"""		159603	0					
ANR	161888	IdentifierDeclStatement	"FILE * fElig = fopen ( fileNameElig , ""wt"" ) ;"		159603	3					
ANR	161889	IdentifierDecl	"* fElig = fopen ( fileNameElig , ""wt"" )"		159603	0					
ANR	161890	IdentifierDeclType	FILE *		159603	0					
ANR	161891	Identifier	fElig		159603	1					
ANR	161892	AssignmentExpression	"* fElig = fopen ( fileNameElig , ""wt"" )"		159603	2		=			
ANR	161893	Identifier	fElig		159603	0					
ANR	161894	CallExpression	"fopen ( fileNameElig , ""wt"" )"		159603	1					
ANR	161895	Callee	fopen		159603	0					
ANR	161896	Identifier	fopen		159603	0					
ANR	161897	ArgumentList	fileNameElig		159603	1					
ANR	161898	Argument	fileNameElig		159603	0					
ANR	161899	Identifier	fileNameElig		159603	0					
ANR	161900	Argument	"""wt"""		159603	1					
ANR	161901	PrimaryExpression	"""wt"""		159603	0					
ANR	161902	IfStatement	if ( NULL == fElig )		159603	4					
ANR	161903	Condition	NULL == fElig		159603	0					
ANR	161904	EqualityExpression	NULL == fElig		159603	0		==			
ANR	161905	Identifier	NULL		159603	0					
ANR	161906	Identifier	fElig		159603	1					
ANR	161907	ThrowStatement	"throw ""prio, fElig is NULL"" ;"		159603	1					
ANR	161908	PrimaryExpression	"""prio, fElig is NULL"""		159603	0					
ANR	161909	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		159603	5					
ANR	161910	ForInit	i = 0 ;		159603	0					
ANR	161911	AssignmentExpression	i = 0		159603	0		=			
ANR	161912	Identifier	i		159603	0					
ANR	161913	PrimaryExpression	0		159603	1					
ANR	161914	Condition	i < g . getNumNodes ( )		159603	1					
ANR	161915	RelationalExpression	i < g . getNumNodes ( )		159603	0		<			
ANR	161916	Identifier	i		159603	0					
ANR	161917	CallExpression	g . getNumNodes ( )		159603	1					
ANR	161918	Callee	g . getNumNodes		159603	0					
ANR	161919	MemberAccess	g . getNumNodes		159603	0					
ANR	161920	Identifier	g		159603	0					
ANR	161921	Identifier	getNumNodes		159603	1					
ANR	161922	ArgumentList			159603	1					
ANR	161923	PostIncDecOperationExpression	i ++		159603	2					
ANR	161924	Identifier	i		159603	0					
ANR	161925	IncDec	++		159603	1					
ANR	161926	ExpressionStatement	"fprintf ( fElig , ""%d\\n"" , elig [ i ] )"		159603	3					
ANR	161927	CallExpression	"fprintf ( fElig , ""%d\\n"" , elig [ i ] )"		159603	0					
ANR	161928	Callee	fprintf		159603	0					
ANR	161929	Identifier	fprintf		159603	0					
ANR	161930	ArgumentList	fElig		159603	1					
ANR	161931	Argument	fElig		159603	0					
ANR	161932	Identifier	fElig		159603	0					
ANR	161933	Argument	"""%d\\n"""		159603	1					
ANR	161934	PrimaryExpression	"""%d\\n"""		159603	0					
ANR	161935	Argument	elig [ i ]		159603	2					
ANR	161936	ArrayIndexing	elig [ i ]		159603	0					
ANR	161937	Identifier	elig		159603	0					
ANR	161938	Identifier	i		159603	1					
ANR	161939	ExpressionStatement	fclose ( fElig )		159603	6					
ANR	161940	CallExpression	fclose ( fElig )		159603	0					
ANR	161941	Callee	fclose		159603	0					
ANR	161942	Identifier	fclose		159603	0					
ANR	161943	ArgumentList	fElig		159603	1					
ANR	161944	Argument	fElig		159603	0					
ANR	161945	Identifier	fElig		159603	0					
ANR	161946	ExpressionStatement			159603	82					
ANR	161947	ExpressionStatement	"printf ( ""-- instrumenting the DAGMan file with priorities (back up as \\"".OLD\\"")\\n"" )"		159603	83					
ANR	161948	CallExpression	"printf ( ""-- instrumenting the DAGMan file with priorities (back up as \\"".OLD\\"")\\n"" )"		159603	0					
ANR	161949	Callee	printf		159603	0					
ANR	161950	Identifier	printf		159603	0					
ANR	161951	ArgumentList	"""-- instrumenting the DAGMan file with priorities (back up as \\"".OLD\\"")\\n"""		159603	1					
ANR	161952	Argument	"""-- instrumenting the DAGMan file with priorities (back up as \\"".OLD\\"")\\n"""		159603	0					
ANR	161953	PrimaryExpression	"""-- instrumenting the DAGMan file with priorities (back up as \\"".OLD\\"")\\n"""		159603	0					
ANR	161954	IdentifierDeclStatement	const size_t bufSize = 10000 ;		159603	84					
ANR	161955	IdentifierDecl	bufSize = 10000		159603	0					
ANR	161956	IdentifierDeclType	const size_t		159603	0					
ANR	161957	Identifier	bufSize		159603	1					
ANR	161958	AssignmentExpression	bufSize = 10000		159603	2		=			
ANR	161959	Identifier	bufSize		159603	0					
ANR	161960	PrimaryExpression	10000		159603	1					
ANR	161961	IdentifierDeclStatement	char buffer1 [ bufSize ] ;		159603	85					
ANR	161962	IdentifierDecl	buffer1 [ bufSize ]		159603	0					
ANR	161963	IdentifierDeclType	char [ bufSize ]		159603	0					
ANR	161964	Identifier	buffer1		159603	1					
ANR	161965	Identifier	bufSize		159603	2					
ANR	161966	IdentifierDeclStatement	char buffer2 [ bufSize ] ;		159603	86					
ANR	161967	IdentifierDecl	buffer2 [ bufSize ]		159603	0					
ANR	161968	IdentifierDeclType	char [ bufSize ]		159603	0					
ANR	161969	Identifier	buffer2		159603	1					
ANR	161970	Identifier	bufSize		159603	2					
ANR	161971	IdentifierDeclStatement	char buffer3 [ bufSize ] ;		159603	87					
ANR	161972	IdentifierDecl	buffer3 [ bufSize ]		159603	0					
ANR	161973	IdentifierDeclType	char [ bufSize ]		159603	0					
ANR	161974	Identifier	buffer3		159603	1					
ANR	161975	Identifier	bufSize		159603	2					
ANR	161976	IdentifierDeclStatement	char fileNameDagmanPri [ 1000 ] ;		159603	88					
ANR	161977	IdentifierDecl	fileNameDagmanPri [ 1000 ]		159603	0					
ANR	161978	IdentifierDeclType	char [ 1000 ]		159603	0					
ANR	161979	Identifier	fileNameDagmanPri		159603	1					
ANR	161980	PrimaryExpression	1000		159603	2					
ANR	161981	ExpressionStatement	"snprintf ( fileNameDagmanPri , 1000 , ""%s.NEW"" , fileNameDagman )"		159603	89					
ANR	161982	CallExpression	"snprintf ( fileNameDagmanPri , 1000 , ""%s.NEW"" , fileNameDagman )"		159603	0					
ANR	161983	Callee	snprintf		159603	0					
ANR	161984	Identifier	snprintf		159603	0					
ANR	161985	ArgumentList	fileNameDagmanPri		159603	1					
ANR	161986	Argument	fileNameDagmanPri		159603	0					
ANR	161987	Identifier	fileNameDagmanPri		159603	0					
ANR	161988	Argument	1000		159603	1					
ANR	161989	PrimaryExpression	1000		159603	0					
ANR	161990	Argument	"""%s.NEW"""		159603	2					
ANR	161991	PrimaryExpression	"""%s.NEW"""		159603	0					
ANR	161992	Argument	fileNameDagman		159603	3					
ANR	161993	Identifier	fileNameDagman		159603	0					
ANR	161994	IdentifierDeclStatement	FILE * streamOUT ;		159603	90					
ANR	161995	IdentifierDecl	* streamOUT		159603	0					
ANR	161996	IdentifierDeclType	FILE *		159603	0					
ANR	161997	Identifier	streamOUT		159603	1					
ANR	161998	ExpressionStatement	"streamOUT = fopen ( fileNameDagmanPri , ""wt"" )"		159603	91					
ANR	161999	AssignmentExpression	"streamOUT = fopen ( fileNameDagmanPri , ""wt"" )"		159603	0		=			
ANR	162000	Identifier	streamOUT		159603	0					
ANR	162001	CallExpression	"fopen ( fileNameDagmanPri , ""wt"" )"		159603	1					
ANR	162002	Callee	fopen		159603	0					
ANR	162003	Identifier	fopen		159603	0					
ANR	162004	ArgumentList	fileNameDagmanPri		159603	1					
ANR	162005	Argument	fileNameDagmanPri		159603	0					
ANR	162006	Identifier	fileNameDagmanPri		159603	0					
ANR	162007	Argument	"""wt"""		159603	1					
ANR	162008	PrimaryExpression	"""wt"""		159603	0					
ANR	162009	IfStatement	if ( NULL == streamOUT )		159603	92					
ANR	162010	Condition	NULL == streamOUT		159603	0					
ANR	162011	EqualityExpression	NULL == streamOUT		159603	0		==			
ANR	162012	Identifier	NULL		159603	0					
ANR	162013	Identifier	streamOUT		159603	1					
ANR	162014	ThrowStatement	"throw ""prio, streamOUT is NULL"" ;"		159603	1					
ANR	162015	PrimaryExpression	"""prio, streamOUT is NULL"""		159603	0					
ANR	162016	IdentifierDeclStatement	StreamTokenizerWithCont * dagmanIN = new StreamTokenizerWithCont ( fileNameDagman ) ;		159603	93					
ANR	162017	IdentifierDecl	* dagmanIN = new StreamTokenizerWithCont ( fileNameDagman )		159603	0					
ANR	162018	IdentifierDeclType	StreamTokenizerWithCont *		159603	0					
ANR	162019	Identifier	dagmanIN		159603	1					
ANR	162020	AssignmentExpression	* dagmanIN = new StreamTokenizerWithCont ( fileNameDagman )		159603	2		=			
ANR	162021	Identifier	fileNameDagman		159603	0					
ANR	162022	Identifier	fileNameDagman		159603	1					
ANR	162023	IfStatement	if ( NULL == dagmanIN )		159603	94					
ANR	162024	Condition	NULL == dagmanIN		159603	0					
ANR	162025	EqualityExpression	NULL == dagmanIN		159603	0		==			
ANR	162026	Identifier	NULL		159603	0					
ANR	162027	Identifier	dagmanIN		159603	1					
ANR	162028	ThrowStatement	"throw ""prio, dagman is NULL"" ;"		159603	1					
ANR	162029	PrimaryExpression	"""prio, dagman is NULL"""		159603	0					
ANR	162030	WhileStatement	while ( ! dagmanIN -> isEOF ( ) )		159603	95					
ANR	162031	Condition	! dagmanIN -> isEOF ( )		159603	0					
ANR	162032	UnaryOperationExpression	! dagmanIN -> isEOF ( )		159603	0					
ANR	162033	UnaryOperator	!		159603	0					
ANR	162034	CallExpression	dagmanIN -> isEOF ( )		159603	1					
ANR	162035	Callee	dagmanIN -> isEOF		159603	0					
ANR	162036	PtrMemberAccess	dagmanIN -> isEOF		159603	0					
ANR	162037	Identifier	dagmanIN		159603	0					
ANR	162038	Identifier	isEOF		159603	1					
ANR	162039	ArgumentList			159603	1					
ANR	162040	CompoundStatement		546:3:15590:15637	159603	1					
ANR	162041	IdentifierDeclStatement	"int ret1 = dagmanIN -> readToken ( buffer1 , bufSize ) ;"		159603	0					
ANR	162042	IdentifierDecl	"ret1 = dagmanIN -> readToken ( buffer1 , bufSize )"		159603	0					
ANR	162043	IdentifierDeclType	int		159603	0					
ANR	162044	Identifier	ret1		159603	1					
ANR	162045	AssignmentExpression	"ret1 = dagmanIN -> readToken ( buffer1 , bufSize )"		159603	2		=			
ANR	162046	Identifier	ret1		159603	0					
ANR	162047	CallExpression	"dagmanIN -> readToken ( buffer1 , bufSize )"		159603	1					
ANR	162048	Callee	dagmanIN -> readToken		159603	0					
ANR	162049	PtrMemberAccess	dagmanIN -> readToken		159603	0					
ANR	162050	Identifier	dagmanIN		159603	0					
ANR	162051	Identifier	readToken		159603	1					
ANR	162052	ArgumentList	buffer1		159603	1					
ANR	162053	Argument	buffer1		159603	0					
ANR	162054	Identifier	buffer1		159603	0					
ANR	162055	Argument	bufSize		159603	1					
ANR	162056	Identifier	bufSize		159603	0					
ANR	162057	IdentifierDeclStatement	"int ret2 = dagmanIN -> readToken ( buffer2 , bufSize ) ;"		159603	1					
ANR	162058	IdentifierDecl	"ret2 = dagmanIN -> readToken ( buffer2 , bufSize )"		159603	0					
ANR	162059	IdentifierDeclType	int		159603	0					
ANR	162060	Identifier	ret2		159603	1					
ANR	162061	AssignmentExpression	"ret2 = dagmanIN -> readToken ( buffer2 , bufSize )"		159603	2		=			
ANR	162062	Identifier	ret2		159603	0					
ANR	162063	CallExpression	"dagmanIN -> readToken ( buffer2 , bufSize )"		159603	1					
ANR	162064	Callee	dagmanIN -> readToken		159603	0					
ANR	162065	PtrMemberAccess	dagmanIN -> readToken		159603	0					
ANR	162066	Identifier	dagmanIN		159603	0					
ANR	162067	Identifier	readToken		159603	1					
ANR	162068	ArgumentList	buffer2		159603	1					
ANR	162069	Argument	buffer2		159603	0					
ANR	162070	Identifier	buffer2		159603	0					
ANR	162071	Argument	bufSize		159603	1					
ANR	162072	Identifier	bufSize		159603	0					
ANR	162073	IdentifierDeclStatement	"int ret3 = dagmanIN -> readToken ( buffer3 , bufSize ) ;"		159603	2					
ANR	162074	IdentifierDecl	"ret3 = dagmanIN -> readToken ( buffer3 , bufSize )"		159603	0					
ANR	162075	IdentifierDeclType	int		159603	0					
ANR	162076	Identifier	ret3		159603	1					
ANR	162077	AssignmentExpression	"ret3 = dagmanIN -> readToken ( buffer3 , bufSize )"		159603	2		=			
ANR	162078	Identifier	ret3		159603	0					
ANR	162079	CallExpression	"dagmanIN -> readToken ( buffer3 , bufSize )"		159603	1					
ANR	162080	Callee	dagmanIN -> readToken		159603	0					
ANR	162081	PtrMemberAccess	dagmanIN -> readToken		159603	0					
ANR	162082	Identifier	dagmanIN		159603	0					
ANR	162083	Identifier	readToken		159603	1					
ANR	162084	ArgumentList	buffer3		159603	1					
ANR	162085	Argument	buffer3		159603	0					
ANR	162086	Identifier	buffer3		159603	0					
ANR	162087	Argument	bufSize		159603	1					
ANR	162088	Identifier	bufSize		159603	0					
ANR	162089	IfStatement	if ( 0 != ret1 && 0 != ret2 && 0 != ret3 )		159603	3					
ANR	162090	Condition	0 != ret1 && 0 != ret2 && 0 != ret3		159603	0					
ANR	162091	AndExpression	0 != ret1 && 0 != ret2 && 0 != ret3		159603	0		&&			
ANR	162092	EqualityExpression	0 != ret1		159603	0		!=			
ANR	162093	PrimaryExpression	0		159603	0					
ANR	162094	Identifier	ret1		159603	1					
ANR	162095	AndExpression	0 != ret2 && 0 != ret3		159603	1		&&			
ANR	162096	EqualityExpression	0 != ret2		159603	0		!=			
ANR	162097	PrimaryExpression	0		159603	0					
ANR	162098	Identifier	ret2		159603	1					
ANR	162099	EqualityExpression	0 != ret3		159603	1		!=			
ANR	162100	PrimaryExpression	0		159603	0					
ANR	162101	Identifier	ret3		159603	1					
ANR	162102	CompoundStatement		549:39:15723:15723	159603	1					
ANR	162103	IfStatement	"if ( 0 == stricmp ( buffer1 , ""Vars"" ) && 0 == strnicmp ( buffer3 , ""JOBPRIORITY"" , strlen ( ""JOBPRIORITY"" ) ) )"		159603	0					
ANR	162104	Condition	"0 == stricmp ( buffer1 , ""Vars"" ) && 0 == strnicmp ( buffer3 , ""JOBPRIORITY"" , strlen ( ""JOBPRIORITY"" ) )"		159603	0					
ANR	162105	AndExpression	"0 == stricmp ( buffer1 , ""Vars"" ) && 0 == strnicmp ( buffer3 , ""JOBPRIORITY"" , strlen ( ""JOBPRIORITY"" ) )"		159603	0		&&			
ANR	162106	EqualityExpression	"0 == stricmp ( buffer1 , ""Vars"" )"		159603	0		==			
ANR	162107	PrimaryExpression	0		159603	0					
ANR	162108	CallExpression	"stricmp ( buffer1 , ""Vars"" )"		159603	1					
ANR	162109	Callee	stricmp		159603	0					
ANR	162110	Identifier	stricmp		159603	0					
ANR	162111	ArgumentList	buffer1		159603	1					
ANR	162112	Argument	buffer1		159603	0					
ANR	162113	Identifier	buffer1		159603	0					
ANR	162114	Argument	"""Vars"""		159603	1					
ANR	162115	PrimaryExpression	"""Vars"""		159603	0					
ANR	162116	EqualityExpression	"0 == strnicmp ( buffer3 , ""JOBPRIORITY"" , strlen ( ""JOBPRIORITY"" ) )"		159603	1		==			
ANR	162117	PrimaryExpression	0		159603	0					
ANR	162118	CallExpression	"strnicmp ( buffer3 , ""JOBPRIORITY"" , strlen ( ""JOBPRIORITY"" ) )"		159603	1					
ANR	162119	Callee	strnicmp		159603	0					
ANR	162120	Identifier	strnicmp		159603	0					
ANR	162121	ArgumentList	buffer3		159603	1					
ANR	162122	Argument	buffer3		159603	0					
ANR	162123	Identifier	buffer3		159603	0					
ANR	162124	Argument	"""JOBPRIORITY"""		159603	1					
ANR	162125	PrimaryExpression	"""JOBPRIORITY"""		159603	0					
ANR	162126	Argument	"strlen ( ""JOBPRIORITY"" )"		159603	2					
ANR	162127	CallExpression	"strlen ( ""JOBPRIORITY"" )"		159603	0					
ANR	162128	Callee	strlen		159603	0					
ANR	162129	Identifier	strlen		159603	0					
ANR	162130	ArgumentList	"""JOBPRIORITY"""		159603	1					
ANR	162131	Argument	"""JOBPRIORITY"""		159603	0					
ANR	162132	PrimaryExpression	"""JOBPRIORITY"""		159603	0					
ANR	162133	CompoundStatement		555:7:15854:15854	159603	1					
ANR	162134	ExpressionStatement	dagmanIN -> skipLine ( )		159603	0					
ANR	162135	CallExpression	dagmanIN -> skipLine ( )		159603	0					
ANR	162136	Callee	dagmanIN -> skipLine		159603	0					
ANR	162137	PtrMemberAccess	dagmanIN -> skipLine		159603	0					
ANR	162138	Identifier	dagmanIN		159603	0					
ANR	162139	Identifier	skipLine		159603	1					
ANR	162140	ArgumentList			159603	1					
ANR	162141	ExpressionStatement	dagmanIN -> resetRecentLine ( )		159603	1					
ANR	162142	CallExpression	dagmanIN -> resetRecentLine ( )		159603	0					
ANR	162143	Callee	dagmanIN -> resetRecentLine		159603	0					
ANR	162144	PtrMemberAccess	dagmanIN -> resetRecentLine		159603	0					
ANR	162145	Identifier	dagmanIN		159603	0					
ANR	162146	Identifier	resetRecentLine		159603	1					
ANR	162147	ArgumentList			159603	1					
ANR	162148	ContinueStatement	continue ;		159603	2					
ANR	162149	ExpressionStatement			159603	4					
ANR	162150	ExpressionStatement	dagmanIN -> skipLine ( )		159603	5					
ANR	162151	CallExpression	dagmanIN -> skipLine ( )		159603	0					
ANR	162152	Callee	dagmanIN -> skipLine		159603	0					
ANR	162153	PtrMemberAccess	dagmanIN -> skipLine		159603	0					
ANR	162154	Identifier	dagmanIN		159603	0					
ANR	162155	Identifier	skipLine		159603	1					
ANR	162156	ArgumentList			159603	1					
ANR	162157	ExpressionStatement	dagmanIN -> saveRecentLine ( streamOUT )		159603	6					
ANR	162158	CallExpression	dagmanIN -> saveRecentLine ( streamOUT )		159603	0					
ANR	162159	Callee	dagmanIN -> saveRecentLine		159603	0					
ANR	162160	PtrMemberAccess	dagmanIN -> saveRecentLine		159603	0					
ANR	162161	Identifier	dagmanIN		159603	0					
ANR	162162	Identifier	saveRecentLine		159603	1					
ANR	162163	ArgumentList	streamOUT		159603	1					
ANR	162164	Argument	streamOUT		159603	0					
ANR	162165	Identifier	streamOUT		159603	0					
ANR	162166	ExpressionStatement	dagmanIN -> resetRecentLine ( )		159603	7					
ANR	162167	CallExpression	dagmanIN -> resetRecentLine ( )		159603	0					
ANR	162168	Callee	dagmanIN -> resetRecentLine		159603	0					
ANR	162169	PtrMemberAccess	dagmanIN -> resetRecentLine		159603	0					
ANR	162170	Identifier	dagmanIN		159603	0					
ANR	162171	Identifier	resetRecentLine		159603	1					
ANR	162172	ArgumentList			159603	1					
ANR	162173	ExpressionStatement			159603	96					
ANR	162174	Statement	delete		159603	97					
ANR	162175	ExpressionStatement	dagmanIN		159603	98					
ANR	162176	Identifier	dagmanIN		159603	0					
ANR	162177	ExpressionStatement	fclose ( streamOUT )		159603	99					
ANR	162178	CallExpression	fclose ( streamOUT )		159603	0					
ANR	162179	Callee	fclose		159603	0					
ANR	162180	Identifier	fclose		159603	0					
ANR	162181	ArgumentList	streamOUT		159603	1					
ANR	162182	Argument	streamOUT		159603	0					
ANR	162183	Identifier	streamOUT		159603	0					
ANR	162184	ExpressionStatement	"streamOUT = fopen ( fileNameDagmanPri , ""a+t"" )"		159603	100					
ANR	162185	AssignmentExpression	"streamOUT = fopen ( fileNameDagmanPri , ""a+t"" )"		159603	0		=			
ANR	162186	Identifier	streamOUT		159603	0					
ANR	162187	CallExpression	"fopen ( fileNameDagmanPri , ""a+t"" )"		159603	1					
ANR	162188	Callee	fopen		159603	0					
ANR	162189	Identifier	fopen		159603	0					
ANR	162190	ArgumentList	fileNameDagmanPri		159603	1					
ANR	162191	Argument	fileNameDagmanPri		159603	0					
ANR	162192	Identifier	fileNameDagmanPri		159603	0					
ANR	162193	Argument	"""a+t"""		159603	1					
ANR	162194	PrimaryExpression	"""a+t"""		159603	0					
ANR	162195	IfStatement	if ( NULL == streamOUT )		159603	101					
ANR	162196	Condition	NULL == streamOUT		159603	0					
ANR	162197	EqualityExpression	NULL == streamOUT		159603	0		==			
ANR	162198	Identifier	NULL		159603	0					
ANR	162199	Identifier	streamOUT		159603	1					
ANR	162200	ThrowStatement	"throw ""prio, streamOUT is NULL"" ;"		159603	1					
ANR	162201	PrimaryExpression	"""prio, streamOUT is NULL"""		159603	0					
ANR	162202	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		159603	102					
ANR	162203	ForInit	i = 0 ;		159603	0					
ANR	162204	AssignmentExpression	i = 0		159603	0		=			
ANR	162205	Identifier	i		159603	0					
ANR	162206	PrimaryExpression	0		159603	1					
ANR	162207	Condition	i < g . getNumNodes ( )		159603	1					
ANR	162208	RelationalExpression	i < g . getNumNodes ( )		159603	0		<			
ANR	162209	Identifier	i		159603	0					
ANR	162210	CallExpression	g . getNumNodes ( )		159603	1					
ANR	162211	Callee	g . getNumNodes		159603	0					
ANR	162212	MemberAccess	g . getNumNodes		159603	0					
ANR	162213	Identifier	g		159603	0					
ANR	162214	Identifier	getNumNodes		159603	1					
ANR	162215	ArgumentList			159603	1					
ANR	162216	PostIncDecOperationExpression	i ++		159603	2					
ANR	162217	Identifier	i		159603	0					
ANR	162218	IncDec	++		159603	1					
ANR	162219	CompoundStatement		582:3:16471:16525	159603	3					
ANR	162220	IdentifierDeclStatement	const char * stringLabel = g . getLabelString ( sked [ i ] ) ;		159603	0					
ANR	162221	IdentifierDecl	* stringLabel = g . getLabelString ( sked [ i ] )		159603	0					
ANR	162222	IdentifierDeclType	const char *		159603	0					
ANR	162223	Identifier	stringLabel		159603	1					
ANR	162224	AssignmentExpression	* stringLabel = g . getLabelString ( sked [ i ] )		159603	2		=			
ANR	162225	Identifier	stringLabel		159603	0					
ANR	162226	CallExpression	g . getLabelString ( sked [ i ] )		159603	1					
ANR	162227	Callee	g . getLabelString		159603	0					
ANR	162228	MemberAccess	g . getLabelString		159603	0					
ANR	162229	Identifier	g		159603	0					
ANR	162230	Identifier	getLabelString		159603	1					
ANR	162231	ArgumentList	sked [ i ]		159603	1					
ANR	162232	Argument	sked [ i ]		159603	0					
ANR	162233	ArrayIndexing	sked [ i ]		159603	0					
ANR	162234	Identifier	sked		159603	0					
ANR	162235	Identifier	i		159603	1					
ANR	162236	ExpressionStatement	"fprintf ( streamOUT , ""Vars %s JOBPRIORITY=\\""%d\\""\\n"" , stringLabel , g . getNumNodes ( ) - i )"		159603	1					
ANR	162237	CallExpression	"fprintf ( streamOUT , ""Vars %s JOBPRIORITY=\\""%d\\""\\n"" , stringLabel , g . getNumNodes ( ) - i )"		159603	0					
ANR	162238	Callee	fprintf		159603	0					
ANR	162239	Identifier	fprintf		159603	0					
ANR	162240	ArgumentList	streamOUT		159603	1					
ANR	162241	Argument	streamOUT		159603	0					
ANR	162242	Identifier	streamOUT		159603	0					
ANR	162243	Argument	"""Vars %s JOBPRIORITY=\\""%d\\""\\n"""		159603	1					
ANR	162244	PrimaryExpression	"""Vars %s JOBPRIORITY=\\""%d\\""\\n"""		159603	0					
ANR	162245	Argument	stringLabel		159603	2					
ANR	162246	Identifier	stringLabel		159603	0					
ANR	162247	Argument	g . getNumNodes ( ) - i		159603	3					
ANR	162248	AdditiveExpression	g . getNumNodes ( ) - i		159603	0		-			
ANR	162249	CallExpression	g . getNumNodes ( )		159603	0					
ANR	162250	Callee	g . getNumNodes		159603	0					
ANR	162251	MemberAccess	g . getNumNodes		159603	0					
ANR	162252	Identifier	g		159603	0					
ANR	162253	Identifier	getNumNodes		159603	1					
ANR	162254	ArgumentList			159603	1					
ANR	162255	Identifier	i		159603	1					
ANR	162256	ExpressionStatement			159603	103					
ANR	162257	ExpressionStatement	fclose ( streamOUT )		159603	104					
ANR	162258	CallExpression	fclose ( streamOUT )		159603	0					
ANR	162259	Callee	fclose		159603	0					
ANR	162260	Identifier	fclose		159603	0					
ANR	162261	ArgumentList	streamOUT		159603	1					
ANR	162262	Argument	streamOUT		159603	0					
ANR	162263	Identifier	streamOUT		159603	0					
ANR	162264	IdentifierDeclStatement	char old [ 1000 ] ;		159603	105					
ANR	162265	IdentifierDecl	old [ 1000 ]		159603	0					
ANR	162266	IdentifierDeclType	char [ 1000 ]		159603	0					
ANR	162267	Identifier	old		159603	1					
ANR	162268	PrimaryExpression	1000		159603	2					
ANR	162269	ExpressionStatement	"snprintf ( old , 1000 , ""%s.OLD"" , fileNameDagman )"		159603	106					
ANR	162270	CallExpression	"snprintf ( old , 1000 , ""%s.OLD"" , fileNameDagman )"		159603	0					
ANR	162271	Callee	snprintf		159603	0					
ANR	162272	Identifier	snprintf		159603	0					
ANR	162273	ArgumentList	old		159603	1					
ANR	162274	Argument	old		159603	0					
ANR	162275	Identifier	old		159603	0					
ANR	162276	Argument	1000		159603	1					
ANR	162277	PrimaryExpression	1000		159603	0					
ANR	162278	Argument	"""%s.OLD"""		159603	2					
ANR	162279	PrimaryExpression	"""%s.OLD"""		159603	0					
ANR	162280	Argument	fileNameDagman		159603	3					
ANR	162281	Identifier	fileNameDagman		159603	0					
ANR	162282	ExpressionStatement	remove ( old )		159603	107					
ANR	162283	CallExpression	remove ( old )		159603	0					
ANR	162284	Callee	remove		159603	0					
ANR	162285	Identifier	remove		159603	0					
ANR	162286	ArgumentList	old		159603	1					
ANR	162287	Argument	old		159603	0					
ANR	162288	Identifier	old		159603	0					
ANR	162289	ExpressionStatement	"rename ( fileNameDagman , old )"		159603	108					
ANR	162290	CallExpression	"rename ( fileNameDagman , old )"		159603	0					
ANR	162291	Callee	rename		159603	0					
ANR	162292	Identifier	rename		159603	0					
ANR	162293	ArgumentList	fileNameDagman		159603	1					
ANR	162294	Argument	fileNameDagman		159603	0					
ANR	162295	Identifier	fileNameDagman		159603	0					
ANR	162296	Argument	old		159603	1					
ANR	162297	Identifier	old		159603	0					
ANR	162298	ExpressionStatement	"rename ( fileNameDagmanPri , fileNameDagman )"		159603	109					
ANR	162299	CallExpression	"rename ( fileNameDagmanPri , fileNameDagman )"		159603	0					
ANR	162300	Callee	rename		159603	0					
ANR	162301	Identifier	rename		159603	0					
ANR	162302	ArgumentList	fileNameDagmanPri		159603	1					
ANR	162303	Argument	fileNameDagmanPri		159603	0					
ANR	162304	Identifier	fileNameDagmanPri		159603	0					
ANR	162305	Argument	fileNameDagman		159603	1					
ANR	162306	Identifier	fileNameDagman		159603	0					
ANR	162307	IfStatement	if ( argumSdf )		159603	110					
ANR	162308	Condition	argumSdf		159603	0					
ANR	162309	Identifier	argumSdf		159603	0					
ANR	162310	CompoundStatement		692:3:19581:19596	159603	1					
ANR	162311	ExpressionStatement	"printf ( ""-- instrumenting submit description files (back up as \\"".OLD\\"")\\n"" )"		159603	0					
ANR	162312	CallExpression	"printf ( ""-- instrumenting submit description files (back up as \\"".OLD\\"")\\n"" )"		159603	0					
ANR	162313	Callee	printf		159603	0					
ANR	162314	Identifier	printf		159603	0					
ANR	162315	ArgumentList	"""-- instrumenting submit description files (back up as \\"".OLD\\"")\\n"""		159603	1					
ANR	162316	Argument	"""-- instrumenting submit description files (back up as \\"".OLD\\"")\\n"""		159603	0					
ANR	162317	PrimaryExpression	"""-- instrumenting submit description files (back up as \\"".OLD\\"")\\n"""		159603	0					
ANR	162318	IdentifierDeclStatement	char buffer [ bufSize ] ;		159603	1					
ANR	162319	IdentifierDecl	buffer [ bufSize ]		159603	0					
ANR	162320	IdentifierDeclType	char [ bufSize ]		159603	0					
ANR	162321	Identifier	buffer		159603	1					
ANR	162322	Identifier	bufSize		159603	2					
ANR	162323	IdentifierDeclStatement	Trie * trie = new Trie ( ) ;		159603	2					
ANR	162324	IdentifierDecl	* trie = new Trie ( )		159603	0					
ANR	162325	IdentifierDeclType	Trie *		159603	0					
ANR	162326	Identifier	trie		159603	1					
ANR	162327	AssignmentExpression	* trie = new Trie ( )		159603	2		=			
ANR	162328	Identifier	trie		159603	0					
ANR	162329	UnaryExpression	new Trie ( )		159603	1					
ANR	162330	IfStatement	if ( NULL == trie )		159603	3					
ANR	162331	Condition	NULL == trie		159603	0					
ANR	162332	EqualityExpression	NULL == trie		159603	0		==			
ANR	162333	Identifier	NULL		159603	0					
ANR	162334	Identifier	trie		159603	1					
ANR	162335	ThrowStatement	"throw ""prio, trie is NULL"" ;"		159603	1					
ANR	162336	PrimaryExpression	"""prio, trie is NULL"""		159603	0					
ANR	162337	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		159603	4					
ANR	162338	ForInit	i = 0 ;		159603	0					
ANR	162339	AssignmentExpression	i = 0		159603	0		=			
ANR	162340	Identifier	i		159603	0					
ANR	162341	PrimaryExpression	0		159603	1					
ANR	162342	Condition	i < g . getNumNodes ( )		159603	1					
ANR	162343	RelationalExpression	i < g . getNumNodes ( )		159603	0		<			
ANR	162344	Identifier	i		159603	0					
ANR	162345	CallExpression	g . getNumNodes ( )		159603	1					
ANR	162346	Callee	g . getNumNodes		159603	0					
ANR	162347	MemberAccess	g . getNumNodes		159603	0					
ANR	162348	Identifier	g		159603	0					
ANR	162349	Identifier	getNumNodes		159603	1					
ANR	162350	ArgumentList			159603	1					
ANR	162351	PostIncDecOperationExpression	i ++		159603	2					
ANR	162352	Identifier	i		159603	0					
ANR	162353	IncDec	++		159603	1					
ANR	162354	CompoundStatement		638:4:18031:18112	159603	3					
ANR	162355	IfStatement	if ( - 1 != trie -> find ( g . getSdfName ( i ) ) )		159603	0					
ANR	162356	Condition	- 1 != trie -> find ( g . getSdfName ( i ) )		159603	0					
ANR	162357	EqualityExpression	- 1 != trie -> find ( g . getSdfName ( i ) )		159603	0		!=			
ANR	162358	UnaryOperationExpression	- 1		159603	0					
ANR	162359	UnaryOperator	-		159603	0					
ANR	162360	PrimaryExpression	1		159603	1					
ANR	162361	CallExpression	trie -> find ( g . getSdfName ( i ) )		159603	1					
ANR	162362	Callee	trie -> find		159603	0					
ANR	162363	PtrMemberAccess	trie -> find		159603	0					
ANR	162364	Identifier	trie		159603	0					
ANR	162365	Identifier	find		159603	1					
ANR	162366	ArgumentList	g . getSdfName ( i )		159603	1					
ANR	162367	Argument	g . getSdfName ( i )		159603	0					
ANR	162368	CallExpression	g . getSdfName ( i )		159603	0					
ANR	162369	Callee	g . getSdfName		159603	0					
ANR	162370	MemberAccess	g . getSdfName		159603	0					
ANR	162371	Identifier	g		159603	0					
ANR	162372	Identifier	getSdfName		159603	1					
ANR	162373	ArgumentList	i		159603	1					
ANR	162374	Argument	i		159603	0					
ANR	162375	Identifier	i		159603	0					
ANR	162376	CompoundStatement		616:44:17423:17423	159603	1					
ANR	162377	ContinueStatement	continue ;		159603	0					
ANR	162378	ExpressionStatement			159603	1					
ANR	162379	ExpressionStatement	"trie -> add ( g . getSdfName ( i ) , 1 )"		159603	2					
ANR	162380	CallExpression	"trie -> add ( g . getSdfName ( i ) , 1 )"		159603	0					
ANR	162381	Callee	trie -> add		159603	0					
ANR	162382	PtrMemberAccess	trie -> add		159603	0					
ANR	162383	Identifier	trie		159603	0					
ANR	162384	Identifier	add		159603	1					
ANR	162385	ArgumentList	g . getSdfName ( i )		159603	1					
ANR	162386	Argument	g . getSdfName ( i )		159603	0					
ANR	162387	CallExpression	g . getSdfName ( i )		159603	0					
ANR	162388	Callee	g . getSdfName		159603	0					
ANR	162389	MemberAccess	g . getSdfName		159603	0					
ANR	162390	Identifier	g		159603	0					
ANR	162391	Identifier	getSdfName		159603	1					
ANR	162392	ArgumentList	i		159603	1					
ANR	162393	Argument	i		159603	0					
ANR	162394	Identifier	i		159603	0					
ANR	162395	Argument	1		159603	1					
ANR	162396	PrimaryExpression	1		159603	0					
ANR	162397	IdentifierDeclStatement	char fileNameSdfNew [ 1000 ] ;		159603	3					
ANR	162398	IdentifierDecl	fileNameSdfNew [ 1000 ]		159603	0					
ANR	162399	IdentifierDeclType	char [ 1000 ]		159603	0					
ANR	162400	Identifier	fileNameSdfNew		159603	1					
ANR	162401	PrimaryExpression	1000		159603	2					
ANR	162402	IfStatement	if ( strlen ( g . getSdfName ( i ) ) > 1000 - 10 )		159603	4					
ANR	162403	Condition	strlen ( g . getSdfName ( i ) ) > 1000 - 10		159603	0					
ANR	162404	RelationalExpression	strlen ( g . getSdfName ( i ) ) > 1000 - 10		159603	0		>			
ANR	162405	CallExpression	strlen ( g . getSdfName ( i ) )		159603	0					
ANR	162406	Callee	strlen		159603	0					
ANR	162407	Identifier	strlen		159603	0					
ANR	162408	ArgumentList	g . getSdfName ( i )		159603	1					
ANR	162409	Argument	g . getSdfName ( i )		159603	0					
ANR	162410	CallExpression	g . getSdfName ( i )		159603	0					
ANR	162411	Callee	g . getSdfName		159603	0					
ANR	162412	MemberAccess	g . getSdfName		159603	0					
ANR	162413	Identifier	g		159603	0					
ANR	162414	Identifier	getSdfName		159603	1					
ANR	162415	ArgumentList	i		159603	1					
ANR	162416	Argument	i		159603	0					
ANR	162417	Identifier	i		159603	0					
ANR	162418	AdditiveExpression	1000 - 10		159603	1		-			
ANR	162419	PrimaryExpression	1000		159603	0					
ANR	162420	PrimaryExpression	10		159603	1					
ANR	162421	ThrowStatement	"throw ""prio, line too long 2"" ;"		159603	1					
ANR	162422	PrimaryExpression	"""prio, line too long 2"""		159603	0					
ANR	162423	ExpressionStatement	"snprintf ( fileNameSdfNew , 1000 , ""%s.NEW"" , g . getSdfName ( i ) )"		159603	5					
ANR	162424	CallExpression	"snprintf ( fileNameSdfNew , 1000 , ""%s.NEW"" , g . getSdfName ( i ) )"		159603	0					
ANR	162425	Callee	snprintf		159603	0					
ANR	162426	Identifier	snprintf		159603	0					
ANR	162427	ArgumentList	fileNameSdfNew		159603	1					
ANR	162428	Argument	fileNameSdfNew		159603	0					
ANR	162429	Identifier	fileNameSdfNew		159603	0					
ANR	162430	Argument	1000		159603	1					
ANR	162431	PrimaryExpression	1000		159603	0					
ANR	162432	Argument	"""%s.NEW"""		159603	2					
ANR	162433	PrimaryExpression	"""%s.NEW"""		159603	0					
ANR	162434	Argument	g . getSdfName ( i )		159603	3					
ANR	162435	CallExpression	g . getSdfName ( i )		159603	0					
ANR	162436	Callee	g . getSdfName		159603	0					
ANR	162437	MemberAccess	g . getSdfName		159603	0					
ANR	162438	Identifier	g		159603	0					
ANR	162439	Identifier	getSdfName		159603	1					
ANR	162440	ArgumentList	i		159603	1					
ANR	162441	Argument	i		159603	0					
ANR	162442	Identifier	i		159603	0					
ANR	162443	IdentifierDeclStatement	FILE * sdfNEW ;		159603	6					
ANR	162444	IdentifierDecl	* sdfNEW		159603	0					
ANR	162445	IdentifierDeclType	FILE *		159603	0					
ANR	162446	Identifier	sdfNEW		159603	1					
ANR	162447	ExpressionStatement	"sdfNEW = fopen ( fileNameSdfNew , ""wt"" )"		159603	7					
ANR	162448	AssignmentExpression	"sdfNEW = fopen ( fileNameSdfNew , ""wt"" )"		159603	0		=			
ANR	162449	Identifier	sdfNEW		159603	0					
ANR	162450	CallExpression	"fopen ( fileNameSdfNew , ""wt"" )"		159603	1					
ANR	162451	Callee	fopen		159603	0					
ANR	162452	Identifier	fopen		159603	0					
ANR	162453	ArgumentList	fileNameSdfNew		159603	1					
ANR	162454	Argument	fileNameSdfNew		159603	0					
ANR	162455	Identifier	fileNameSdfNew		159603	0					
ANR	162456	Argument	"""wt"""		159603	1					
ANR	162457	PrimaryExpression	"""wt"""		159603	0					
ANR	162458	IfStatement	if ( NULL == sdfNEW )		159603	8					
ANR	162459	Condition	NULL == sdfNEW		159603	0					
ANR	162460	EqualityExpression	NULL == sdfNEW		159603	0		==			
ANR	162461	Identifier	NULL		159603	0					
ANR	162462	Identifier	sdfNEW		159603	1					
ANR	162463	ThrowStatement	"throw ""prio, sdfNEW is NULL"" ;"		159603	1					
ANR	162464	PrimaryExpression	"""prio, sdfNEW is NULL"""		159603	0					
ANR	162465	IdentifierDeclStatement	StreamTokenizerWithCont * sdfStream = new StreamTokenizerWithCont ( g . getSdfName ( i ) ) ;		159603	9					
ANR	162466	IdentifierDecl	* sdfStream = new StreamTokenizerWithCont ( g . getSdfName ( i ) )		159603	0					
ANR	162467	IdentifierDeclType	StreamTokenizerWithCont *		159603	0					
ANR	162468	Identifier	sdfStream		159603	1					
ANR	162469	AssignmentExpression	* sdfStream = new StreamTokenizerWithCont ( g . getSdfName ( i ) )		159603	2		=			
ANR	162470	Identifier	sdfStream		159603	0					
ANR	162471	CallExpression	g . getSdfName ( i )		159603	1					
ANR	162472	Callee	g . getSdfName		159603	0					
ANR	162473	MemberAccess	g . getSdfName		159603	0					
ANR	162474	Identifier	g		159603	0					
ANR	162475	Identifier	getSdfName		159603	1					
ANR	162476	ArgumentList	i		159603	1					
ANR	162477	Argument	i		159603	0					
ANR	162478	Identifier	i		159603	0					
ANR	162479	IfStatement	if ( NULL == sdfStream )		159603	10					
ANR	162480	Condition	NULL == sdfStream		159603	0					
ANR	162481	EqualityExpression	NULL == sdfStream		159603	0		==			
ANR	162482	Identifier	NULL		159603	0					
ANR	162483	Identifier	sdfStream		159603	1					
ANR	162484	ThrowStatement	"throw ""prio, sdfStream is NULL"" ;"		159603	1					
ANR	162485	PrimaryExpression	"""prio, sdfStream is NULL"""		159603	0					
ANR	162486	WhileStatement	while ( ! sdfStream -> isEOF ( ) )		159603	11					
ANR	162487	Condition	! sdfStream -> isEOF ( )		159603	0					
ANR	162488	UnaryOperationExpression	! sdfStream -> isEOF ( )		159603	0					
ANR	162489	UnaryOperator	!		159603	0					
ANR	162490	CallExpression	sdfStream -> isEOF ( )		159603	1					
ANR	162491	Callee	sdfStream -> isEOF		159603	0					
ANR	162492	PtrMemberAccess	sdfStream -> isEOF		159603	0					
ANR	162493	Identifier	sdfStream		159603	0					
ANR	162494	Identifier	isEOF		159603	1					
ANR	162495	ArgumentList			159603	1					
ANR	162496	CompoundStatement		646:5:18339:18385	159603	1					
ANR	162497	IdentifierDeclStatement	"int ret = sdfStream -> readToken ( buffer , bufSize ) ;"		159603	0					
ANR	162498	IdentifierDecl	"ret = sdfStream -> readToken ( buffer , bufSize )"		159603	0					
ANR	162499	IdentifierDeclType	int		159603	0					
ANR	162500	Identifier	ret		159603	1					
ANR	162501	AssignmentExpression	"ret = sdfStream -> readToken ( buffer , bufSize )"		159603	2		=			
ANR	162502	Identifier	ret		159603	0					
ANR	162503	CallExpression	"sdfStream -> readToken ( buffer , bufSize )"		159603	1					
ANR	162504	Callee	sdfStream -> readToken		159603	0					
ANR	162505	PtrMemberAccess	sdfStream -> readToken		159603	0					
ANR	162506	Identifier	sdfStream		159603	0					
ANR	162507	Identifier	readToken		159603	1					
ANR	162508	ArgumentList	buffer		159603	1					
ANR	162509	Argument	buffer		159603	0					
ANR	162510	Identifier	buffer		159603	0					
ANR	162511	Argument	bufSize		159603	1					
ANR	162512	Identifier	bufSize		159603	0					
ANR	162513	IfStatement	if ( 0 != ret )		159603	1					
ANR	162514	Condition	0 != ret		159603	0					
ANR	162515	EqualityExpression	0 != ret		159603	0		!=			
ANR	162516	PrimaryExpression	0		159603	0					
ANR	162517	Identifier	ret		159603	1					
ANR	162518	CompoundStatement		649:18:18452:18452	159603	1					
ANR	162519	IfStatement	"if ( 0 == stricmp ( buffer , ""priority"" ) )"		159603	0					
ANR	162520	Condition	"0 == stricmp ( buffer , ""priority"" )"		159603	0					
ANR	162521	EqualityExpression	"0 == stricmp ( buffer , ""priority"" )"		159603	0		==			
ANR	162522	PrimaryExpression	0		159603	0					
ANR	162523	CallExpression	"stricmp ( buffer , ""priority"" )"		159603	1					
ANR	162524	Callee	stricmp		159603	0					
ANR	162525	Identifier	stricmp		159603	0					
ANR	162526	ArgumentList	buffer		159603	1					
ANR	162527	Argument	buffer		159603	0					
ANR	162528	Identifier	buffer		159603	0					
ANR	162529	Argument	"""priority"""		159603	1					
ANR	162530	PrimaryExpression	"""priority"""		159603	0					
ANR	162531	CompoundStatement		652:42:18509:18509	159603	1					
ANR	162532	ExpressionStatement	sdfStream -> skipLine ( )		159603	0					
ANR	162533	CallExpression	sdfStream -> skipLine ( )		159603	0					
ANR	162534	Callee	sdfStream -> skipLine		159603	0					
ANR	162535	PtrMemberAccess	sdfStream -> skipLine		159603	0					
ANR	162536	Identifier	sdfStream		159603	0					
ANR	162537	Identifier	skipLine		159603	1					
ANR	162538	ArgumentList			159603	1					
ANR	162539	ExpressionStatement	sdfStream -> resetRecentLine ( )		159603	1					
ANR	162540	CallExpression	sdfStream -> resetRecentLine ( )		159603	0					
ANR	162541	Callee	sdfStream -> resetRecentLine		159603	0					
ANR	162542	PtrMemberAccess	sdfStream -> resetRecentLine		159603	0					
ANR	162543	Identifier	sdfStream		159603	0					
ANR	162544	Identifier	resetRecentLine		159603	1					
ANR	162545	ArgumentList			159603	1					
ANR	162546	ContinueStatement	continue ;		159603	2					
ANR	162547	ExpressionStatement			159603	2					
ANR	162548	ExpressionStatement	sdfStream -> skipLine ( )		159603	3					
ANR	162549	CallExpression	sdfStream -> skipLine ( )		159603	0					
ANR	162550	Callee	sdfStream -> skipLine		159603	0					
ANR	162551	PtrMemberAccess	sdfStream -> skipLine		159603	0					
ANR	162552	Identifier	sdfStream		159603	0					
ANR	162553	Identifier	skipLine		159603	1					
ANR	162554	ArgumentList			159603	1					
ANR	162555	ExpressionStatement	sdfStream -> saveRecentLine ( sdfNEW )		159603	4					
ANR	162556	CallExpression	sdfStream -> saveRecentLine ( sdfNEW )		159603	0					
ANR	162557	Callee	sdfStream -> saveRecentLine		159603	0					
ANR	162558	PtrMemberAccess	sdfStream -> saveRecentLine		159603	0					
ANR	162559	Identifier	sdfStream		159603	0					
ANR	162560	Identifier	saveRecentLine		159603	1					
ANR	162561	ArgumentList	sdfNEW		159603	1					
ANR	162562	Argument	sdfNEW		159603	0					
ANR	162563	Identifier	sdfNEW		159603	0					
ANR	162564	ExpressionStatement	sdfStream -> resetRecentLine ( )		159603	5					
ANR	162565	CallExpression	sdfStream -> resetRecentLine ( )		159603	0					
ANR	162566	Callee	sdfStream -> resetRecentLine		159603	0					
ANR	162567	PtrMemberAccess	sdfStream -> resetRecentLine		159603	0					
ANR	162568	Identifier	sdfStream		159603	0					
ANR	162569	Identifier	resetRecentLine		159603	1					
ANR	162570	ArgumentList			159603	1					
ANR	162571	ExpressionStatement			159603	12					
ANR	162572	ExpressionStatement	"fprintf ( sdfNEW , ""priority = $(JOBPRIORITY)\\n"" )"		159603	13					
ANR	162573	CallExpression	"fprintf ( sdfNEW , ""priority = $(JOBPRIORITY)\\n"" )"		159603	0					
ANR	162574	Callee	fprintf		159603	0					
ANR	162575	Identifier	fprintf		159603	0					
ANR	162576	ArgumentList	sdfNEW		159603	1					
ANR	162577	Argument	sdfNEW		159603	0					
ANR	162578	Identifier	sdfNEW		159603	0					
ANR	162579	Argument	"""priority = $(JOBPRIORITY)\\n"""		159603	1					
ANR	162580	PrimaryExpression	"""priority = $(JOBPRIORITY)\\n"""		159603	0					
ANR	162581	Statement	delete		159603	14					
ANR	162582	ExpressionStatement	sdfStream		159603	15					
ANR	162583	Identifier	sdfStream		159603	0					
ANR	162584	ExpressionStatement	fclose ( sdfNEW )		159603	16					
ANR	162585	CallExpression	fclose ( sdfNEW )		159603	0					
ANR	162586	Callee	fclose		159603	0					
ANR	162587	Identifier	fclose		159603	0					
ANR	162588	ArgumentList	sdfNEW		159603	1					
ANR	162589	Argument	sdfNEW		159603	0					
ANR	162590	Identifier	sdfNEW		159603	0					
ANR	162591	ExpressionStatement			159603	5					
ANR	162592	Statement	delete		159603	6					
ANR	162593	ExpressionStatement	trie		159603	7					
ANR	162594	Identifier	trie		159603	0					
ANR	162595	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		159603	8					
ANR	162596	ForInit	i = 0 ;		159603	0					
ANR	162597	AssignmentExpression	i = 0		159603	0		=			
ANR	162598	Identifier	i		159603	0					
ANR	162599	PrimaryExpression	0		159603	1					
ANR	162600	Condition	i < g . getNumNodes ( )		159603	1					
ANR	162601	RelationalExpression	i < g . getNumNodes ( )		159603	0		<			
ANR	162602	Identifier	i		159603	0					
ANR	162603	CallExpression	g . getNumNodes ( )		159603	1					
ANR	162604	Callee	g . getNumNodes		159603	0					
ANR	162605	MemberAccess	g . getNumNodes		159603	0					
ANR	162606	Identifier	g		159603	0					
ANR	162607	Identifier	getNumNodes		159603	1					
ANR	162608	ArgumentList			159603	1					
ANR	162609	PostIncDecOperationExpression	i ++		159603	2					
ANR	162610	Identifier	i		159603	0					
ANR	162611	IncDec	++		159603	1					
ANR	162612	CompoundStatement		680:38:19110:19110	159603	3					
ANR	162613	IfStatement	if ( strlen ( g . getSdfName ( i ) ) > bufSize - 20 )		159603	0					
ANR	162614	Condition	strlen ( g . getSdfName ( i ) ) > bufSize - 20		159603	0					
ANR	162615	RelationalExpression	strlen ( g . getSdfName ( i ) ) > bufSize - 20		159603	0		>			
ANR	162616	CallExpression	strlen ( g . getSdfName ( i ) )		159603	0					
ANR	162617	Callee	strlen		159603	0					
ANR	162618	Identifier	strlen		159603	0					
ANR	162619	ArgumentList	g . getSdfName ( i )		159603	1					
ANR	162620	Argument	g . getSdfName ( i )		159603	0					
ANR	162621	CallExpression	g . getSdfName ( i )		159603	0					
ANR	162622	Callee	g . getSdfName		159603	0					
ANR	162623	MemberAccess	g . getSdfName		159603	0					
ANR	162624	Identifier	g		159603	0					
ANR	162625	Identifier	getSdfName		159603	1					
ANR	162626	ArgumentList	i		159603	1					
ANR	162627	Argument	i		159603	0					
ANR	162628	Identifier	i		159603	0					
ANR	162629	AdditiveExpression	bufSize - 20		159603	1		-			
ANR	162630	Identifier	bufSize		159603	0					
ANR	162631	PrimaryExpression	20		159603	1					
ANR	162632	ThrowStatement	"throw ""prio, too long line 4"" ;"		159603	1					
ANR	162633	PrimaryExpression	"""prio, too long line 4"""		159603	0					
ANR	162634	ExpressionStatement	"strncpy ( buffer , g . getSdfName ( i ) , bufSize - 10 )"		159603	1					
ANR	162635	CallExpression	"strncpy ( buffer , g . getSdfName ( i ) , bufSize - 10 )"		159603	0					
ANR	162636	Callee	strncpy		159603	0					
ANR	162637	Identifier	strncpy		159603	0					
ANR	162638	ArgumentList	buffer		159603	1					
ANR	162639	Argument	buffer		159603	0					
ANR	162640	Identifier	buffer		159603	0					
ANR	162641	Argument	g . getSdfName ( i )		159603	1					
ANR	162642	CallExpression	g . getSdfName ( i )		159603	0					
ANR	162643	Callee	g . getSdfName		159603	0					
ANR	162644	MemberAccess	g . getSdfName		159603	0					
ANR	162645	Identifier	g		159603	0					
ANR	162646	Identifier	getSdfName		159603	1					
ANR	162647	ArgumentList	i		159603	1					
ANR	162648	Argument	i		159603	0					
ANR	162649	Identifier	i		159603	0					
ANR	162650	Argument	bufSize - 10		159603	2					
ANR	162651	AdditiveExpression	bufSize - 10		159603	0		-			
ANR	162652	Identifier	bufSize		159603	0					
ANR	162653	PrimaryExpression	10		159603	1					
ANR	162654	ExpressionStatement	"strcat ( buffer , "".OLD"" )"		159603	2					
ANR	162655	CallExpression	"strcat ( buffer , "".OLD"" )"		159603	0					
ANR	162656	Callee	strcat		159603	0					
ANR	162657	Identifier	strcat		159603	0					
ANR	162658	ArgumentList	buffer		159603	1					
ANR	162659	Argument	buffer		159603	0					
ANR	162660	Identifier	buffer		159603	0					
ANR	162661	Argument	""".OLD"""		159603	1					
ANR	162662	PrimaryExpression	""".OLD"""		159603	0					
ANR	162663	ExpressionStatement	remove ( buffer )		159603	3					
ANR	162664	CallExpression	remove ( buffer )		159603	0					
ANR	162665	Callee	remove		159603	0					
ANR	162666	Identifier	remove		159603	0					
ANR	162667	ArgumentList	buffer		159603	1					
ANR	162668	Argument	buffer		159603	0					
ANR	162669	Identifier	buffer		159603	0					
ANR	162670	ExpressionStatement			159603	9					
ANR	162671	ExpressionStatement	trie = new Trie ( )		159603	10					
ANR	162672	AssignmentExpression	trie = new Trie ( )		159603	0		=			
ANR	162673	Identifier	trie		159603	0					
ANR	162674	UnaryExpression	new Trie ( )		159603	1					
ANR	162675	IfStatement	if ( NULL == trie )		159603	11					
ANR	162676	Condition	NULL == trie		159603	0					
ANR	162677	EqualityExpression	NULL == trie		159603	0		==			
ANR	162678	Identifier	NULL		159603	0					
ANR	162679	Identifier	trie		159603	1					
ANR	162680	ThrowStatement	"throw ""prio, trie is NULL, 2"" ;"		159603	1					
ANR	162681	PrimaryExpression	"""prio, trie is NULL, 2"""		159603	0					
ANR	162682	IdentifierDeclStatement	bool fail = false ;		159603	12					
ANR	162683	IdentifierDecl	fail = false		159603	0					
ANR	162684	IdentifierDeclType	bool		159603	0					
ANR	162685	Identifier	fail		159603	1					
ANR	162686	AssignmentExpression	fail = false		159603	2		=			
ANR	162687	Identifier	false		159603	0					
ANR	162688	Identifier	false		159603	1					
ANR	162689	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		159603	13					
ANR	162690	ForInit	i = 0 ;		159603	0					
ANR	162691	AssignmentExpression	i = 0		159603	0		=			
ANR	162692	Identifier	i		159603	0					
ANR	162693	PrimaryExpression	0		159603	1					
ANR	162694	Condition	i < g . getNumNodes ( )		159603	1					
ANR	162695	RelationalExpression	i < g . getNumNodes ( )		159603	0		<			
ANR	162696	Identifier	i		159603	0					
ANR	162697	CallExpression	g . getNumNodes ( )		159603	1					
ANR	162698	Callee	g . getNumNodes		159603	0					
ANR	162699	MemberAccess	g . getNumNodes		159603	0					
ANR	162700	Identifier	g		159603	0					
ANR	162701	Identifier	getNumNodes		159603	1					
ANR	162702	ArgumentList			159603	1					
ANR	162703	PostIncDecOperationExpression	i ++		159603	2					
ANR	162704	Identifier	i		159603	0					
ANR	162705	IncDec	++		159603	1					
ANR	162706	CompoundStatement		693:38:19636:19636	159603	3					
ANR	162707	IfStatement	if ( - 1 != trie -> find ( g . getSdfName ( i ) ) )		159603	0					
ANR	162708	Condition	- 1 != trie -> find ( g . getSdfName ( i ) )		159603	0					
ANR	162709	EqualityExpression	- 1 != trie -> find ( g . getSdfName ( i ) )		159603	0		!=			
ANR	162710	UnaryOperationExpression	- 1		159603	0					
ANR	162711	UnaryOperator	-		159603	0					
ANR	162712	PrimaryExpression	1		159603	1					
ANR	162713	CallExpression	trie -> find ( g . getSdfName ( i ) )		159603	1					
ANR	162714	Callee	trie -> find		159603	0					
ANR	162715	PtrMemberAccess	trie -> find		159603	0					
ANR	162716	Identifier	trie		159603	0					
ANR	162717	Identifier	find		159603	1					
ANR	162718	ArgumentList	g . getSdfName ( i )		159603	1					
ANR	162719	Argument	g . getSdfName ( i )		159603	0					
ANR	162720	CallExpression	g . getSdfName ( i )		159603	0					
ANR	162721	Callee	g . getSdfName		159603	0					
ANR	162722	MemberAccess	g . getSdfName		159603	0					
ANR	162723	Identifier	g		159603	0					
ANR	162724	Identifier	getSdfName		159603	1					
ANR	162725	ArgumentList	i		159603	1					
ANR	162726	Argument	i		159603	0					
ANR	162727	Identifier	i		159603	0					
ANR	162728	CompoundStatement		696:44:19761:19761	159603	1					
ANR	162729	ContinueStatement	continue ;		159603	0					
ANR	162730	ExpressionStatement			159603	1					
ANR	162731	ExpressionStatement	"trie -> add ( g . getSdfName ( i ) , 1 )"		159603	2					
ANR	162732	CallExpression	"trie -> add ( g . getSdfName ( i ) , 1 )"		159603	0					
ANR	162733	Callee	trie -> add		159603	0					
ANR	162734	PtrMemberAccess	trie -> add		159603	0					
ANR	162735	Identifier	trie		159603	0					
ANR	162736	Identifier	add		159603	1					
ANR	162737	ArgumentList	g . getSdfName ( i )		159603	1					
ANR	162738	Argument	g . getSdfName ( i )		159603	0					
ANR	162739	CallExpression	g . getSdfName ( i )		159603	0					
ANR	162740	Callee	g . getSdfName		159603	0					
ANR	162741	MemberAccess	g . getSdfName		159603	0					
ANR	162742	Identifier	g		159603	0					
ANR	162743	Identifier	getSdfName		159603	1					
ANR	162744	ArgumentList	i		159603	1					
ANR	162745	Argument	i		159603	0					
ANR	162746	Identifier	i		159603	0					
ANR	162747	Argument	1		159603	1					
ANR	162748	PrimaryExpression	1		159603	0					
ANR	162749	IfStatement	if ( strlen ( g . getSdfName ( i ) ) > bufSize - 20 )		159603	3					
ANR	162750	Condition	strlen ( g . getSdfName ( i ) ) > bufSize - 20		159603	0					
ANR	162751	RelationalExpression	strlen ( g . getSdfName ( i ) ) > bufSize - 20		159603	0		>			
ANR	162752	CallExpression	strlen ( g . getSdfName ( i ) )		159603	0					
ANR	162753	Callee	strlen		159603	0					
ANR	162754	Identifier	strlen		159603	0					
ANR	162755	ArgumentList	g . getSdfName ( i )		159603	1					
ANR	162756	Argument	g . getSdfName ( i )		159603	0					
ANR	162757	CallExpression	g . getSdfName ( i )		159603	0					
ANR	162758	Callee	g . getSdfName		159603	0					
ANR	162759	MemberAccess	g . getSdfName		159603	0					
ANR	162760	Identifier	g		159603	0					
ANR	162761	Identifier	getSdfName		159603	1					
ANR	162762	ArgumentList	i		159603	1					
ANR	162763	Argument	i		159603	0					
ANR	162764	Identifier	i		159603	0					
ANR	162765	AdditiveExpression	bufSize - 20		159603	1		-			
ANR	162766	Identifier	bufSize		159603	0					
ANR	162767	PrimaryExpression	20		159603	1					
ANR	162768	ThrowStatement	"throw ""prio, too long line 4"" ;"		159603	1					
ANR	162769	PrimaryExpression	"""prio, too long line 4"""		159603	0					
ANR	162770	ExpressionStatement	"strncpy ( buffer , g . getSdfName ( i ) , bufSize - 10 )"		159603	4					
ANR	162771	CallExpression	"strncpy ( buffer , g . getSdfName ( i ) , bufSize - 10 )"		159603	0					
ANR	162772	Callee	strncpy		159603	0					
ANR	162773	Identifier	strncpy		159603	0					
ANR	162774	ArgumentList	buffer		159603	1					
ANR	162775	Argument	buffer		159603	0					
ANR	162776	Identifier	buffer		159603	0					
ANR	162777	Argument	g . getSdfName ( i )		159603	1					
ANR	162778	CallExpression	g . getSdfName ( i )		159603	0					
ANR	162779	Callee	g . getSdfName		159603	0					
ANR	162780	MemberAccess	g . getSdfName		159603	0					
ANR	162781	Identifier	g		159603	0					
ANR	162782	Identifier	getSdfName		159603	1					
ANR	162783	ArgumentList	i		159603	1					
ANR	162784	Argument	i		159603	0					
ANR	162785	Identifier	i		159603	0					
ANR	162786	Argument	bufSize - 10		159603	2					
ANR	162787	AdditiveExpression	bufSize - 10		159603	0		-			
ANR	162788	Identifier	bufSize		159603	0					
ANR	162789	PrimaryExpression	10		159603	1					
ANR	162790	ExpressionStatement	"strcat ( buffer , "".OLD"" )"		159603	5					
ANR	162791	CallExpression	"strcat ( buffer , "".OLD"" )"		159603	0					
ANR	162792	Callee	strcat		159603	0					
ANR	162793	Identifier	strcat		159603	0					
ANR	162794	ArgumentList	buffer		159603	1					
ANR	162795	Argument	buffer		159603	0					
ANR	162796	Identifier	buffer		159603	0					
ANR	162797	Argument	""".OLD"""		159603	1					
ANR	162798	PrimaryExpression	""".OLD"""		159603	0					
ANR	162799	IfStatement	"if ( 0 != rename ( g . getSdfName ( i ) , buffer ) )"		159603	6					
ANR	162800	Condition	"0 != rename ( g . getSdfName ( i ) , buffer )"		159603	0					
ANR	162801	EqualityExpression	"0 != rename ( g . getSdfName ( i ) , buffer )"		159603	0		!=			
ANR	162802	PrimaryExpression	0		159603	0					
ANR	162803	CallExpression	"rename ( g . getSdfName ( i ) , buffer )"		159603	1					
ANR	162804	Callee	rename		159603	0					
ANR	162805	Identifier	rename		159603	0					
ANR	162806	ArgumentList	g . getSdfName ( i )		159603	1					
ANR	162807	Argument	g . getSdfName ( i )		159603	0					
ANR	162808	CallExpression	g . getSdfName ( i )		159603	0					
ANR	162809	Callee	g . getSdfName		159603	0					
ANR	162810	MemberAccess	g . getSdfName		159603	0					
ANR	162811	Identifier	g		159603	0					
ANR	162812	Identifier	getSdfName		159603	1					
ANR	162813	ArgumentList	i		159603	1					
ANR	162814	Argument	i		159603	0					
ANR	162815	Identifier	i		159603	0					
ANR	162816	Argument	buffer		159603	1					
ANR	162817	Identifier	buffer		159603	0					
ANR	162818	ExpressionStatement	fail = true		159603	1					
ANR	162819	AssignmentExpression	fail = true		159603	0		=			
ANR	162820	Identifier	fail		159603	0					
ANR	162821	Identifier	true		159603	1					
ANR	162822	ExpressionStatement			159603	14					
ANR	162823	Statement	delete		159603	15					
ANR	162824	ExpressionStatement	trie		159603	16					
ANR	162825	Identifier	trie		159603	0					
ANR	162826	IfStatement	if ( fail )		159603	17					
ANR	162827	Condition	fail		159603	0					
ANR	162828	Identifier	fail		159603	0					
ANR	162829	ThrowStatement	"throw ""prio, rename failed"" ;"		159603	1					
ANR	162830	PrimaryExpression	"""prio, rename failed"""		159603	0					
ANR	162831	ExpressionStatement	trie = new Trie ( )		159603	18					
ANR	162832	AssignmentExpression	trie = new Trie ( )		159603	0		=			
ANR	162833	Identifier	trie		159603	0					
ANR	162834	UnaryExpression	new Trie ( )		159603	1					
ANR	162835	IfStatement	if ( NULL == trie )		159603	19					
ANR	162836	Condition	NULL == trie		159603	0					
ANR	162837	EqualityExpression	NULL == trie		159603	0		==			
ANR	162838	Identifier	NULL		159603	0					
ANR	162839	Identifier	trie		159603	1					
ANR	162840	ThrowStatement	"throw ""prio, trie is NULL, 3"" ;"		159603	1					
ANR	162841	PrimaryExpression	"""prio, trie is NULL, 3"""		159603	0					
ANR	162842	ExpressionStatement	fail = false		159603	20					
ANR	162843	AssignmentExpression	fail = false		159603	0		=			
ANR	162844	Identifier	fail		159603	0					
ANR	162845	Identifier	false		159603	1					
ANR	162846	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		159603	21					
ANR	162847	ForInit	i = 0 ;		159603	0					
ANR	162848	AssignmentExpression	i = 0		159603	0		=			
ANR	162849	Identifier	i		159603	0					
ANR	162850	PrimaryExpression	0		159603	1					
ANR	162851	Condition	i < g . getNumNodes ( )		159603	1					
ANR	162852	RelationalExpression	i < g . getNumNodes ( )		159603	0		<			
ANR	162853	Identifier	i		159603	0					
ANR	162854	CallExpression	g . getNumNodes ( )		159603	1					
ANR	162855	Callee	g . getNumNodes		159603	0					
ANR	162856	MemberAccess	g . getNumNodes		159603	0					
ANR	162857	Identifier	g		159603	0					
ANR	162858	Identifier	getNumNodes		159603	1					
ANR	162859	ArgumentList			159603	1					
ANR	162860	PostIncDecOperationExpression	i ++		159603	2					
ANR	162861	Identifier	i		159603	0					
ANR	162862	IncDec	++		159603	1					
ANR	162863	CompoundStatement		718:38:20398:20398	159603	3					
ANR	162864	IfStatement	if ( - 1 != trie -> find ( g . getSdfName ( i ) ) )		159603	0					
ANR	162865	Condition	- 1 != trie -> find ( g . getSdfName ( i ) )		159603	0					
ANR	162866	EqualityExpression	- 1 != trie -> find ( g . getSdfName ( i ) )		159603	0		!=			
ANR	162867	UnaryOperationExpression	- 1		159603	0					
ANR	162868	UnaryOperator	-		159603	0					
ANR	162869	PrimaryExpression	1		159603	1					
ANR	162870	CallExpression	trie -> find ( g . getSdfName ( i ) )		159603	1					
ANR	162871	Callee	trie -> find		159603	0					
ANR	162872	PtrMemberAccess	trie -> find		159603	0					
ANR	162873	Identifier	trie		159603	0					
ANR	162874	Identifier	find		159603	1					
ANR	162875	ArgumentList	g . getSdfName ( i )		159603	1					
ANR	162876	Argument	g . getSdfName ( i )		159603	0					
ANR	162877	CallExpression	g . getSdfName ( i )		159603	0					
ANR	162878	Callee	g . getSdfName		159603	0					
ANR	162879	MemberAccess	g . getSdfName		159603	0					
ANR	162880	Identifier	g		159603	0					
ANR	162881	Identifier	getSdfName		159603	1					
ANR	162882	ArgumentList	i		159603	1					
ANR	162883	Argument	i		159603	0					
ANR	162884	Identifier	i		159603	0					
ANR	162885	CompoundStatement		721:44:20523:20523	159603	1					
ANR	162886	ContinueStatement	continue ;		159603	0					
ANR	162887	ExpressionStatement			159603	1					
ANR	162888	ExpressionStatement	"trie -> add ( g . getSdfName ( i ) , 1 )"		159603	2					
ANR	162889	CallExpression	"trie -> add ( g . getSdfName ( i ) , 1 )"		159603	0					
ANR	162890	Callee	trie -> add		159603	0					
ANR	162891	PtrMemberAccess	trie -> add		159603	0					
ANR	162892	Identifier	trie		159603	0					
ANR	162893	Identifier	add		159603	1					
ANR	162894	ArgumentList	g . getSdfName ( i )		159603	1					
ANR	162895	Argument	g . getSdfName ( i )		159603	0					
ANR	162896	CallExpression	g . getSdfName ( i )		159603	0					
ANR	162897	Callee	g . getSdfName		159603	0					
ANR	162898	MemberAccess	g . getSdfName		159603	0					
ANR	162899	Identifier	g		159603	0					
ANR	162900	Identifier	getSdfName		159603	1					
ANR	162901	ArgumentList	i		159603	1					
ANR	162902	Argument	i		159603	0					
ANR	162903	Identifier	i		159603	0					
ANR	162904	Argument	1		159603	1					
ANR	162905	PrimaryExpression	1		159603	0					
ANR	162906	IfStatement	if ( strlen ( g . getSdfName ( i ) ) > bufSize - 20 )		159603	3					
ANR	162907	Condition	strlen ( g . getSdfName ( i ) ) > bufSize - 20		159603	0					
ANR	162908	RelationalExpression	strlen ( g . getSdfName ( i ) ) > bufSize - 20		159603	0		>			
ANR	162909	CallExpression	strlen ( g . getSdfName ( i ) )		159603	0					
ANR	162910	Callee	strlen		159603	0					
ANR	162911	Identifier	strlen		159603	0					
ANR	162912	ArgumentList	g . getSdfName ( i )		159603	1					
ANR	162913	Argument	g . getSdfName ( i )		159603	0					
ANR	162914	CallExpression	g . getSdfName ( i )		159603	0					
ANR	162915	Callee	g . getSdfName		159603	0					
ANR	162916	MemberAccess	g . getSdfName		159603	0					
ANR	162917	Identifier	g		159603	0					
ANR	162918	Identifier	getSdfName		159603	1					
ANR	162919	ArgumentList	i		159603	1					
ANR	162920	Argument	i		159603	0					
ANR	162921	Identifier	i		159603	0					
ANR	162922	AdditiveExpression	bufSize - 20		159603	1		-			
ANR	162923	Identifier	bufSize		159603	0					
ANR	162924	PrimaryExpression	20		159603	1					
ANR	162925	ThrowStatement	"throw ""prio, too long line 5"" ;"		159603	1					
ANR	162926	PrimaryExpression	"""prio, too long line 5"""		159603	0					
ANR	162927	ExpressionStatement	"strncpy ( buffer , g . getSdfName ( i ) , bufSize - 10 )"		159603	4					
ANR	162928	CallExpression	"strncpy ( buffer , g . getSdfName ( i ) , bufSize - 10 )"		159603	0					
ANR	162929	Callee	strncpy		159603	0					
ANR	162930	Identifier	strncpy		159603	0					
ANR	162931	ArgumentList	buffer		159603	1					
ANR	162932	Argument	buffer		159603	0					
ANR	162933	Identifier	buffer		159603	0					
ANR	162934	Argument	g . getSdfName ( i )		159603	1					
ANR	162935	CallExpression	g . getSdfName ( i )		159603	0					
ANR	162936	Callee	g . getSdfName		159603	0					
ANR	162937	MemberAccess	g . getSdfName		159603	0					
ANR	162938	Identifier	g		159603	0					
ANR	162939	Identifier	getSdfName		159603	1					
ANR	162940	ArgumentList	i		159603	1					
ANR	162941	Argument	i		159603	0					
ANR	162942	Identifier	i		159603	0					
ANR	162943	Argument	bufSize - 10		159603	2					
ANR	162944	AdditiveExpression	bufSize - 10		159603	0		-			
ANR	162945	Identifier	bufSize		159603	0					
ANR	162946	PrimaryExpression	10		159603	1					
ANR	162947	ExpressionStatement	"strcat ( buffer , "".NEW"" )"		159603	5					
ANR	162948	CallExpression	"strcat ( buffer , "".NEW"" )"		159603	0					
ANR	162949	Callee	strcat		159603	0					
ANR	162950	Identifier	strcat		159603	0					
ANR	162951	ArgumentList	buffer		159603	1					
ANR	162952	Argument	buffer		159603	0					
ANR	162953	Identifier	buffer		159603	0					
ANR	162954	Argument	""".NEW"""		159603	1					
ANR	162955	PrimaryExpression	""".NEW"""		159603	0					
ANR	162956	IfStatement	"if ( 0 != rename ( buffer , g . getSdfName ( i ) ) )"		159603	6					
ANR	162957	Condition	"0 != rename ( buffer , g . getSdfName ( i ) )"		159603	0					
ANR	162958	EqualityExpression	"0 != rename ( buffer , g . getSdfName ( i ) )"		159603	0		!=			
ANR	162959	PrimaryExpression	0		159603	0					
ANR	162960	CallExpression	"rename ( buffer , g . getSdfName ( i ) )"		159603	1					
ANR	162961	Callee	rename		159603	0					
ANR	162962	Identifier	rename		159603	0					
ANR	162963	ArgumentList	buffer		159603	1					
ANR	162964	Argument	buffer		159603	0					
ANR	162965	Identifier	buffer		159603	0					
ANR	162966	Argument	g . getSdfName ( i )		159603	1					
ANR	162967	CallExpression	g . getSdfName ( i )		159603	0					
ANR	162968	Callee	g . getSdfName		159603	0					
ANR	162969	MemberAccess	g . getSdfName		159603	0					
ANR	162970	Identifier	g		159603	0					
ANR	162971	Identifier	getSdfName		159603	1					
ANR	162972	ArgumentList	i		159603	1					
ANR	162973	Argument	i		159603	0					
ANR	162974	Identifier	i		159603	0					
ANR	162975	ExpressionStatement	fail = true		159603	1					
ANR	162976	AssignmentExpression	fail = true		159603	0		=			
ANR	162977	Identifier	fail		159603	0					
ANR	162978	Identifier	true		159603	1					
ANR	162979	ExpressionStatement			159603	22					
ANR	162980	Statement	delete		159603	23					
ANR	162981	ExpressionStatement	trie		159603	24					
ANR	162982	Identifier	trie		159603	0					
ANR	162983	IfStatement	if ( fail )		159603	25					
ANR	162984	Condition	fail		159603	0					
ANR	162985	Identifier	fail		159603	0					
ANR	162986	ThrowStatement	"throw ""prio, rename failed 2"" ;"		159603	1					
ANR	162987	PrimaryExpression	"""prio, rename failed 2"""		159603	0					
ANR	162988	ExpressionStatement			159603	111					
ANR	162989	ExpressionStatement	finish = clock ( )		159603	112					
ANR	162990	AssignmentExpression	finish = clock ( )		159603	0		=			
ANR	162991	Identifier	finish		159603	0					
ANR	162992	CallExpression	clock ( )		159603	1					
ANR	162993	Callee	clock		159603	0					
ANR	162994	Identifier	clock		159603	0					
ANR	162995	ArgumentList			159603	1					
ANR	162996	ExpressionStatement	"printf ( ""-- total time %d seconds\\n"" , ( finish - start ) / CLOCKS_PER_SEC )"		159603	113					
ANR	162997	CallExpression	"printf ( ""-- total time %d seconds\\n"" , ( finish - start ) / CLOCKS_PER_SEC )"		159603	0					
ANR	162998	Callee	printf		159603	0					
ANR	162999	Identifier	printf		159603	0					
ANR	163000	ArgumentList	"""-- total time %d seconds\\n"""		159603	1					
ANR	163001	Argument	"""-- total time %d seconds\\n"""		159603	0					
ANR	163002	PrimaryExpression	"""-- total time %d seconds\\n"""		159603	0					
ANR	163003	Argument	( finish - start ) / CLOCKS_PER_SEC		159603	1					
ANR	163004	MultiplicativeExpression	( finish - start ) / CLOCKS_PER_SEC		159603	0		/			
ANR	163005	AdditiveExpression	finish - start		159603	0		-			
ANR	163006	Identifier	finish		159603	0					
ANR	163007	Identifier	start		159603	1					
ANR	163008	Identifier	CLOCKS_PER_SEC		159603	1					
ANR	163009	CatchList			159603	1					
ANR	163010	CatchStatement	catch ( char * msg )		159603	0					
ANR	163011	Identifier	msg		159603	0					
ANR	163012	CompoundStatement		747:22:21136:21136	159603	1					
ANR	163013	ExpressionStatement	alert ( msg )	806:2:22861:22871	159603	0	True				
ANR	163014	CallExpression	alert ( msg )		159603	0					
ANR	163015	Callee	alert		159603	0					
ANR	163016	Identifier	alert		159603	0					
ANR	163017	ArgumentList	msg		159603	1					
ANR	163018	Argument	msg		159603	0					
ANR	163019	Identifier	msg		159603	0					
ANR	163020	ReturnStatement	return - 1 ;	807:2:22875:22884	159603	1	True				
ANR	163021	UnaryOperationExpression	- 1		159603	0					
ANR	163022	UnaryOperator	-		159603	0					
ANR	163023	PrimaryExpression	1		159603	1					
ANR	163024	CatchStatement	catch ( ... )		159603	1					
ANR	163025	CompoundStatement		750:14:21179:21179	159603	0					
ANR	163026	ExpressionStatement	"alert ( ""Unrecognized exception"" )"		159603	0					
ANR	163027	CallExpression	"alert ( ""Unrecognized exception"" )"		159603	0					
ANR	163028	Callee	alert		159603	0					
ANR	163029	Identifier	alert		159603	0					
ANR	163030	ArgumentList	"""Unrecognized exception"""		159603	1					
ANR	163031	Argument	"""Unrecognized exception"""		159603	0					
ANR	163032	PrimaryExpression	"""Unrecognized exception"""		159603	0					
ANR	163033	ReturnStatement	return - 1 ;		159603	1					
ANR	163034	UnaryOperationExpression	- 1		159603	0					
ANR	163035	UnaryOperator	-		159603	0					
ANR	163036	PrimaryExpression	1		159603	1					
ANR	163037	ExpressionStatement		811:2:22952:22952	159603	1	True				
ANR	163038	ReturnStatement	return 0 ;	813:1:22956:22964	159603	2	True				
ANR	163039	PrimaryExpression	0		159603	0					
ANR	163040	ReturnType	int		159603	1					
ANR	163041	Identifier	main		159603	2					
ANR	163042	ParameterList	"int argc , char * argv [ ]"		159603	3					
ANR	163043	Parameter	int argc	58:10:1695:1702	159603	0	True				
ANR	163044	ParameterType	int		159603	0					
ANR	163045	Identifier	argc		159603	1					
ANR	163046	Parameter	char * argv [ ]	58:20:1705:1716	159603	1	True				
ANR	163047	ParameterType	char * [ ]		159603	0					
ANR	163048	Identifier	argv		159603	1					
ANR	163049	CFGEntryNode	ENTRY		159603		True				
ANR	163050	CFGExitNode	EXIT		159603		True				
ANR	163051	CFGErrorNode	ERROR		159603		True				
ANR	163052	Symbol	argc		159603						
ANR	163053	Symbol	argv		159603						
