command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3569990	File	data/converged/CVE-2011-4930_htcondor/src_condor_power_power_state.cpp								
ANR	3569991	ClassDef	<unnamed>	49:0:1335:1810							
ANR	3569992	DeclStmt									
ANR	3569993	Decl							const char	const char * [ ]	errmsgs
ANR	3569994	ClassDef	RunMode	80:0:2428:2479							
ANR	3569995	DeclStmt									
ANR	3569996	Decl							HibernatorBase :: SLEEP_STATE	HibernatorBase :: SLEEP_STATE	state_t
ANR	3569997	DeclStmt									
ANR	3569998	Decl							const char	const char *	name
ANR	3569999	DeclStmt									
ANR	3570000	Decl							const char	const char *	state
ANR	3570001	DeclStmt									
ANR	3570002	Decl							const char	const char *	method
ANR	3570003	DeclStmt									
ANR	3570004	Decl							RunMode	RunMode	run_mode
ANR	3570005	DeclStmt									
ANR	3570006	Decl							HibernatorBase	HibernatorBase *	hibernator
ANR	3570007	DeclStmt									
ANR	3570008	Decl							FILE	FILE *	out
ANR	3570009	Function	enable_debug	117:0:3480:3654							
ANR	3570010	FunctionDef	enable_debug ()		3570009	0					
ANR	3570011	CompoundStatement		119:0:3513:3654	3570009	0					
ANR	3570012	IdentifierDeclStatement	param_functions * p_funcs = get_param_functions ( ) ;	120:1:3516:3564	3570009	0	True				
ANR	3570013	IdentifierDecl	* p_funcs = get_param_functions ( )		3570009	0					
ANR	3570014	IdentifierDeclType	param_functions *		3570009	0					
ANR	3570015	Identifier	p_funcs		3570009	1					
ANR	3570016	AssignmentExpression	* p_funcs = get_param_functions ( )		3570009	2		=			
ANR	3570017	Identifier	p_funcs		3570009	0					
ANR	3570018	CallExpression	get_param_functions ( )		3570009	1					
ANR	3570019	Callee	get_param_functions		3570009	0					
ANR	3570020	Identifier	get_param_functions		3570009	0					
ANR	3570021	ArgumentList			3570009	1					
ANR	3570022	ExpressionStatement	Termlog = true	121:1:3567:3581	3570009	1	True				
ANR	3570023	AssignmentExpression	Termlog = true		3570009	0		=			
ANR	3570024	Identifier	Termlog		3570009	0					
ANR	3570025	Identifier	true		3570009	1					
ANR	3570026	ExpressionStatement	"dprintf_config ( ""TOOL"" , p_funcs )"	122:1:3584:3617	3570009	2	True				
ANR	3570027	CallExpression	"dprintf_config ( ""TOOL"" , p_funcs )"		3570009	0					
ANR	3570028	Callee	dprintf_config		3570009	0					
ANR	3570029	Identifier	dprintf_config		3570009	0					
ANR	3570030	ArgumentList	"""TOOL"""		3570009	1					
ANR	3570031	Argument	"""TOOL"""		3570009	0					
ANR	3570032	PrimaryExpression	"""TOOL"""		3570009	0					
ANR	3570033	Argument	p_funcs		3570009	1					
ANR	3570034	Identifier	p_funcs		3570009	0					
ANR	3570035	ExpressionStatement	"set_debug_flags ( ""D_FULLDEBUG"" )"	123:1:3620:3652	3570009	3	True				
ANR	3570036	CallExpression	"set_debug_flags ( ""D_FULLDEBUG"" )"		3570009	0					
ANR	3570037	Callee	set_debug_flags		3570009	0					
ANR	3570038	Identifier	set_debug_flags		3570009	0					
ANR	3570039	ArgumentList	"""D_FULLDEBUG"""		3570009	1					
ANR	3570040	Argument	"""D_FULLDEBUG"""		3570009	0					
ANR	3570041	PrimaryExpression	"""D_FULLDEBUG"""		3570009	0					
ANR	3570042	ReturnType	static void		3570009	1					
ANR	3570043	Identifier	enable_debug		3570009	2					
ANR	3570044	ParameterList			3570009	3					
ANR	3570045	CFGEntryNode	ENTRY		3570009		True				
ANR	3570046	CFGExitNode	EXIT		3570009		True				
ANR	3570047	Symbol	get_param_functions		3570009						
ANR	3570048	Symbol	Termlog		3570009						
ANR	3570049	Symbol	true		3570009						
ANR	3570050	Symbol	p_funcs		3570009						
ANR	3570051	Function	cleanup	126:0:3657:3753							
ANR	3570052	FunctionDef	cleanup ()		3570051	0					
ANR	3570053	CompoundStatement		128:0:3685:3753	3570051	0					
ANR	3570054	IfStatement	if ( hibernator )		3570051	0					
ANR	3570055	Condition	hibernator	129:6:3693:3702	3570051	0	True				
ANR	3570056	Identifier	hibernator		3570051	0					
ANR	3570057	CompoundStatement		2:19:20:20	3570051	1					
ANR	3570058	Statement	delete	130:2:3710:3715	3570051	0	True				
ANR	3570059	ExpressionStatement	hibernator	130:9:3717:3727	3570051	1	True				
ANR	3570060	Identifier	hibernator		3570051	0					
ANR	3570061	ExpressionStatement	hibernator = NULL	131:2:3731:3748	3570051	2	True				
ANR	3570062	AssignmentExpression	hibernator = NULL		3570051	0		=			
ANR	3570063	Identifier	hibernator		3570051	0					
ANR	3570064	Identifier	NULL		3570051	1					
ANR	3570065	ReturnType	static void		3570051	1					
ANR	3570066	Identifier	cleanup		3570051	2					
ANR	3570067	ParameterList			3570051	3					
ANR	3570068	CFGEntryNode	ENTRY		3570051		True				
ANR	3570069	CFGExitNode	EXIT		3570051		True				
ANR	3570070	Symbol	hibernator		3570051						
ANR	3570071	Symbol	NULL		3570051						
ANR	3570072	Function	error	135:0:3756:4143							
ANR	3570073	FunctionDef	error (int code)		3570072	0					
ANR	3570074	CompoundStatement		137:0:3791:4143	3570072	0					
ANR	3570075	IdentifierDeclStatement	va_list args ;	138:1:3794:3806	3570072	0	True				
ANR	3570076	IdentifierDecl	args		3570072	0					
ANR	3570077	IdentifierDeclType	va_list		3570072	0					
ANR	3570078	Identifier	args		3570072	1					
ANR	3570079	IdentifierDeclStatement	const char * msg ;	139:1:3809:3824	3570072	1	True				
ANR	3570080	IdentifierDecl	* msg		3570072	0					
ANR	3570081	IdentifierDeclType	const char *		3570072	0					
ANR	3570082	Identifier	msg		3570072	1					
ANR	3570083	ExpressionStatement	assert ( name )	141:1:3828:3843	3570072	2	True				
ANR	3570084	CallExpression	assert ( name )		3570072	0					
ANR	3570085	Callee	assert		3570072	0					
ANR	3570086	Identifier	assert		3570072	0					
ANR	3570087	ArgumentList	name		3570072	1					
ANR	3570088	Argument	name		3570072	0					
ANR	3570089	Identifier	name		3570072	0					
ANR	3570090	IfStatement	if ( code < E_UNKNOWN )		3570072	3					
ANR	3570091	Condition	code < E_UNKNOWN	143:6:3852:3867	3570072	0	True				
ANR	3570092	RelationalExpression	code < E_UNKNOWN		3570072	0		<			
ANR	3570093	Identifier	code		3570072	0					
ANR	3570094	Identifier	E_UNKNOWN		3570072	1					
ANR	3570095	CompoundStatement		7:25:79:79	3570072	1					
ANR	3570096	ExpressionStatement	code = E_UNKNOWN	144:2:3875:3891	3570072	0	True				
ANR	3570097	AssignmentExpression	code = E_UNKNOWN		3570072	0		=			
ANR	3570098	Identifier	code		3570072	0					
ANR	3570099	Identifier	E_UNKNOWN		3570072	1					
ANR	3570100	IfStatement	if ( code < 0 )		3570072	4					
ANR	3570101	Condition	code < 0	147:6:3903:3910	3570072	0	True				
ANR	3570102	RelationalExpression	code < 0		3570072	0		<			
ANR	3570103	Identifier	code		3570072	0					
ANR	3570104	PrimaryExpression	0		3570072	1					
ANR	3570105	CompoundStatement		11:17:122:122	3570072	1					
ANR	3570106	ExpressionStatement	msg = errmsgs [ - code ]	149:2:3919:3939	3570072	0	True				
ANR	3570107	AssignmentExpression	msg = errmsgs [ - code ]		3570072	0		=			
ANR	3570108	Identifier	msg		3570072	0					
ANR	3570109	ArrayIndexing	errmsgs [ - code ]		3570072	1					
ANR	3570110	Identifier	errmsgs		3570072	0					
ANR	3570111	UnaryOperationExpression	- code		3570072	1					
ANR	3570112	UnaryOperator	-		3570072	0					
ANR	3570113	Identifier	code		3570072	1					
ANR	3570114	IfStatement	if ( ! msg )		3570072	1					
ANR	3570115	Condition	! msg	151:7:3949:3952	3570072	0	True				
ANR	3570116	UnaryOperationExpression	! msg		3570072	0					
ANR	3570117	UnaryOperator	!		3570072	0					
ANR	3570118	Identifier	msg		3570072	1					
ANR	3570119	CompoundStatement		15:14:164:164	3570072	1					
ANR	3570120	ExpressionStatement	msg = errmsgs [ - E_UNKNOWN ]	152:3:3961:3986	3570072	0	True				
ANR	3570121	AssignmentExpression	msg = errmsgs [ - E_UNKNOWN ]		3570072	0		=			
ANR	3570122	Identifier	msg		3570072	0					
ANR	3570123	ArrayIndexing	errmsgs [ - E_UNKNOWN ]		3570072	1					
ANR	3570124	Identifier	errmsgs		3570072	0					
ANR	3570125	UnaryOperationExpression	- E_UNKNOWN		3570072	1					
ANR	3570126	UnaryOperator	-		3570072	0					
ANR	3570127	Identifier	E_UNKNOWN		3570072	1					
ANR	3570128	ExpressionStatement	"fprintf ( stderr , ""%s: "" , name )"	155:2:3995:4027	3570072	2	True				
ANR	3570129	CallExpression	"fprintf ( stderr , ""%s: "" , name )"		3570072	0					
ANR	3570130	Callee	fprintf		3570072	0					
ANR	3570131	Identifier	fprintf		3570072	0					
ANR	3570132	ArgumentList	stderr		3570072	1					
ANR	3570133	Argument	stderr		3570072	0					
ANR	3570134	Identifier	stderr		3570072	0					
ANR	3570135	Argument	"""%s: """		3570072	1					
ANR	3570136	PrimaryExpression	"""%s: """		3570072	0					
ANR	3570137	Argument	name		3570072	2					
ANR	3570138	Identifier	name		3570072	0					
ANR	3570139	ExpressionStatement	"va_start ( args , code )"	156:2:4031:4054	3570072	3	True				
ANR	3570140	CallExpression	"va_start ( args , code )"		3570072	0					
ANR	3570141	Callee	va_start		3570072	0					
ANR	3570142	Identifier	va_start		3570072	0					
ANR	3570143	ArgumentList	args		3570072	1					
ANR	3570144	Argument	args		3570072	0					
ANR	3570145	Identifier	args		3570072	0					
ANR	3570146	Argument	code		3570072	1					
ANR	3570147	Identifier	code		3570072	0					
ANR	3570148	ExpressionStatement	"vfprintf ( stderr , msg , args )"	157:2:4058:4088	3570072	4	True				
ANR	3570149	CallExpression	"vfprintf ( stderr , msg , args )"		3570072	0					
ANR	3570150	Callee	vfprintf		3570072	0					
ANR	3570151	Identifier	vfprintf		3570072	0					
ANR	3570152	ArgumentList	stderr		3570072	1					
ANR	3570153	Argument	stderr		3570072	0					
ANR	3570154	Identifier	stderr		3570072	0					
ANR	3570155	Argument	msg		3570072	1					
ANR	3570156	Identifier	msg		3570072	0					
ANR	3570157	Argument	args		3570072	2					
ANR	3570158	Identifier	args		3570072	0					
ANR	3570159	ExpressionStatement	va_end ( args )	158:2:4092:4107	3570072	5	True				
ANR	3570160	CallExpression	va_end ( args )		3570072	0					
ANR	3570161	Callee	va_end		3570072	0					
ANR	3570162	Identifier	va_end		3570072	0					
ANR	3570163	ArgumentList	args		3570072	1					
ANR	3570164	Argument	args		3570072	0					
ANR	3570165	Identifier	args		3570072	0					
ANR	3570166	ExpressionStatement	cleanup ( )	162:1:4115:4124	3570072	5	True				
ANR	3570167	CallExpression	cleanup ( )		3570072	0					
ANR	3570168	Callee	cleanup		3570072	0					
ANR	3570169	Identifier	cleanup		3570072	0					
ANR	3570170	ArgumentList			3570072	1					
ANR	3570171	ExpressionStatement	exit ( code )	164:1:4128:4141	3570072	6	True				
ANR	3570172	CallExpression	exit ( code )		3570072	0					
ANR	3570173	Callee	exit		3570072	0					
ANR	3570174	Identifier	exit		3570072	0					
ANR	3570175	ArgumentList	code		3570072	1					
ANR	3570176	Argument	code		3570072	0					
ANR	3570177	Identifier	code		3570072	0					
ANR	3570178	ReturnType	static void		3570072	1					
ANR	3570179	Identifier	error		3570072	2					
ANR	3570180	ParameterList	int code		3570072	3					
ANR	3570181	Parameter	int code	136:7:3775:3782	3570072	0	True				
ANR	3570182	ParameterType	int		3570072	0					
ANR	3570183	Identifier	code		3570072	1					
ANR	3570184	CFGEntryNode	ENTRY		3570072		True				
ANR	3570185	CFGExitNode	EXIT		3570072		True				
ANR	3570186	Symbol	args		3570072						
ANR	3570187	Symbol	msg		3570072						
ANR	3570188	Symbol	errmsgs		3570072						
ANR	3570189	Symbol	E_UNKNOWN		3570072						
ANR	3570190	Symbol	code		3570072						
ANR	3570191	Symbol	* errmsgs		3570072						
ANR	3570192	Symbol	name		3570072						
ANR	3570193	Symbol	* E_UNKNOWN		3570072						
ANR	3570194	Symbol	stderr		3570072						
ANR	3570195	Symbol	* code		3570072						
ANR	3570196	Function	parse_command_line	167:0:4146:4919							
ANR	3570197	FunctionDef	"parse_command_line (int argc , const char * argv [ ])"		3570196	0					
ANR	3570198	CompoundStatement		169:0:4209:4919	3570196	0					
ANR	3570199	IdentifierDeclStatement	int argno = 1 ;	170:1:4212:4226	3570196	0	True				
ANR	3570200	IdentifierDecl	argno = 1		3570196	0					
ANR	3570201	IdentifierDeclType	int		3570196	0					
ANR	3570202	Identifier	argno		3570196	1					
ANR	3570203	AssignmentExpression	argno = 1		3570196	2		=			
ANR	3570204	Identifier	argno		3570196	0					
ANR	3570205	PrimaryExpression	1		3570196	1					
ANR	3570206	WhileStatement	while ( argno < argc )		3570196	1					
ANR	3570207	Condition	argno < argc	171:9:4237:4248	3570196	0	True				
ANR	3570208	RelationalExpression	argno < argc		3570196	0		<			
ANR	3570209	Identifier	argno		3570196	0					
ANR	3570210	Identifier	argc		3570196	1					
ANR	3570211	CompoundStatement		4:2:46:80	3570196	1					
ANR	3570212	IdentifierDeclStatement	"SimpleArg arg ( argv , argc , argno ) ;"	172:2:4256:4290	3570196	0	True				
ANR	3570213	IdentifierDecl	"arg ( argv , argc , argno )"		3570196	0					
ANR	3570214	IdentifierDeclType	SimpleArg		3570196	0					
ANR	3570215	Identifier	arg		3570196	1					
ANR	3570216	Expression	"argv , argc , argno"		3570196	2					
ANR	3570217	Identifier	argv		3570196	0					
ANR	3570218	Expression	"argc , argno"		3570196	1					
ANR	3570219	Identifier	argc		3570196	0					
ANR	3570220	Identifier	argno		3570196	1					
ANR	3570221	IfStatement	if ( arg . Error ( ) )		3570196	1					
ANR	3570222	Condition	arg . Error ( )	174:7:4300:4310	3570196	0	True				
ANR	3570223	CallExpression	arg . Error ( )		3570196	0					
ANR	3570224	Callee	arg . Error		3570196	0					
ANR	3570225	MemberAccess	arg . Error		3570196	0					
ANR	3570226	Identifier	arg		3570196	0					
ANR	3570227	Identifier	Error		3570196	1					
ANR	3570228	ArgumentList			3570196	1					
ANR	3570229	CompoundStatement		6:21:104:104	3570196	1					
ANR	3570230	ExpressionStatement	usage ( )	175:3:4319:4326	3570196	0	True				
ANR	3570231	CallExpression	usage ( )		3570196	0					
ANR	3570232	Callee	usage		3570196	0					
ANR	3570233	Identifier	usage		3570196	0					
ANR	3570234	ArgumentList			3570196	1					
ANR	3570235	ExpressionStatement	"error ( E_OPTION , arg . Arg ( ) )"	176:3:4331:4359	3570196	1	True				
ANR	3570236	CallExpression	"error ( E_OPTION , arg . Arg ( ) )"		3570196	0					
ANR	3570237	Callee	error		3570196	0					
ANR	3570238	Identifier	error		3570196	0					
ANR	3570239	ArgumentList	E_OPTION		3570196	1					
ANR	3570240	Argument	E_OPTION		3570196	0					
ANR	3570241	Identifier	E_OPTION		3570196	0					
ANR	3570242	Argument	arg . Arg ( )		3570196	1					
ANR	3570243	CallExpression	arg . Arg ( )		3570196	0					
ANR	3570244	Callee	arg . Arg		3570196	0					
ANR	3570245	MemberAccess	arg . Arg		3570196	0					
ANR	3570246	Identifier	arg		3570196	0					
ANR	3570247	Identifier	Arg		3570196	1					
ANR	3570248	ArgumentList			3570196	1					
ANR	3570249	IfStatement	"if ( arg . Match ( 'd' , ""debug"" ) )"		3570196	2					
ANR	3570250	Condition	"arg . Match ( 'd' , ""debug"" )"	179:7:4373:4395	3570196	0	True				
ANR	3570251	CallExpression	"arg . Match ( 'd' , ""debug"" )"		3570196	0					
ANR	3570252	Callee	arg . Match		3570196	0					
ANR	3570253	MemberAccess	arg . Match		3570196	0					
ANR	3570254	Identifier	arg		3570196	0					
ANR	3570255	Identifier	Match		3570196	1					
ANR	3570256	ArgumentList	'd'		3570196	1					
ANR	3570257	Argument	'd'		3570196	0					
ANR	3570258	PrimaryExpression	'd'		3570196	0					
ANR	3570259	Argument	"""debug"""		3570196	1					
ANR	3570260	PrimaryExpression	"""debug"""		3570196	0					
ANR	3570261	CompoundStatement		11:33:189:189	3570196	1					
ANR	3570262	ExpressionStatement	enable_debug ( )	180:3:4404:4419	3570196	0	True				
ANR	3570263	CallExpression	enable_debug ( )		3570196	0					
ANR	3570264	Callee	enable_debug		3570196	0					
ANR	3570265	Identifier	enable_debug		3570196	0					
ANR	3570266	ArgumentList			3570196	1					
ANR	3570267	ElseStatement	else		3570196	0					
ANR	3570268	IfStatement	"if ( arg . Match ( 'h' , ""help"" ) )"		3570196	0					
ANR	3570269	Condition	"arg . Match ( 'h' , ""help"" )"	182:12:4437:4458	3570196	0	True				
ANR	3570270	CallExpression	"arg . Match ( 'h' , ""help"" )"		3570196	0					
ANR	3570271	Callee	arg . Match		3570196	0					
ANR	3570272	MemberAccess	arg . Match		3570196	0					
ANR	3570273	Identifier	arg		3570196	0					
ANR	3570274	Identifier	Match		3570196	1					
ANR	3570275	ArgumentList	'h'		3570196	1					
ANR	3570276	Argument	'h'		3570196	0					
ANR	3570277	PrimaryExpression	'h'		3570196	0					
ANR	3570278	Argument	"""help"""		3570196	1					
ANR	3570279	PrimaryExpression	"""help"""		3570196	0					
ANR	3570280	CompoundStatement		14:37:252:252	3570196	1					
ANR	3570281	ExpressionStatement	usage ( false )	183:3:4467:4481	3570196	0	True				
ANR	3570282	CallExpression	usage ( false )		3570196	0					
ANR	3570283	Callee	usage		3570196	0					
ANR	3570284	Identifier	usage		3570196	0					
ANR	3570285	ArgumentList	false		3570196	1					
ANR	3570286	Argument	false		3570196	0					
ANR	3570287	Identifier	false		3570196	0					
ANR	3570288	ElseStatement	else		3570196	0					
ANR	3570289	IfStatement	"if ( arg . Match ( 'm' , ""method"" ) )"		3570196	0					
ANR	3570290	Condition	"arg . Match ( 'm' , ""method"" )"	185:12:4499:4524	3570196	0	True				
ANR	3570291	CallExpression	"arg . Match ( 'm' , ""method"" )"		3570196	0					
ANR	3570292	Callee	arg . Match		3570196	0					
ANR	3570293	MemberAccess	arg . Match		3570196	0					
ANR	3570294	Identifier	arg		3570196	0					
ANR	3570295	Identifier	Match		3570196	1					
ANR	3570296	ArgumentList	'm'		3570196	1					
ANR	3570297	Argument	'm'		3570196	0					
ANR	3570298	PrimaryExpression	'm'		3570196	0					
ANR	3570299	Argument	"""method"""		3570196	1					
ANR	3570300	PrimaryExpression	"""method"""		3570196	0					
ANR	3570301	CompoundStatement		17:41:318:318	3570196	1					
ANR	3570302	IfStatement	if ( ! arg . getOpt ( method ) )		3570196	0					
ANR	3570303	Condition	! arg . getOpt ( method )	186:8:4538:4558	3570196	0	True				
ANR	3570304	UnaryOperationExpression	! arg . getOpt ( method )		3570196	0					
ANR	3570305	UnaryOperator	!		3570196	0					
ANR	3570306	CallExpression	arg . getOpt ( method )		3570196	1					
ANR	3570307	Callee	arg . getOpt		3570196	0					
ANR	3570308	MemberAccess	arg . getOpt		3570196	0					
ANR	3570309	Identifier	arg		3570196	0					
ANR	3570310	Identifier	getOpt		3570196	1					
ANR	3570311	ArgumentList	method		3570196	1					
ANR	3570312	Argument	method		3570196	0					
ANR	3570313	Identifier	method		3570196	0					
ANR	3570314	CompoundStatement		18:32:352:352	3570196	1					
ANR	3570315	ExpressionStatement	usage ( )	187:4:4568:4575	3570196	0	True				
ANR	3570316	CallExpression	usage ( )		3570196	0					
ANR	3570317	Callee	usage		3570196	0					
ANR	3570318	Identifier	usage		3570196	0					
ANR	3570319	ArgumentList			3570196	1					
ANR	3570320	ExpressionStatement	"error ( E_OPTARG , arg . Arg ( ) )"	188:4:4581:4609	3570196	1	True				
ANR	3570321	CallExpression	"error ( E_OPTARG , arg . Arg ( ) )"		3570196	0					
ANR	3570322	Callee	error		3570196	0					
ANR	3570323	Identifier	error		3570196	0					
ANR	3570324	ArgumentList	E_OPTARG		3570196	1					
ANR	3570325	Argument	E_OPTARG		3570196	0					
ANR	3570326	Identifier	E_OPTARG		3570196	0					
ANR	3570327	Argument	arg . Arg ( )		3570196	1					
ANR	3570328	CallExpression	arg . Arg ( )		3570196	0					
ANR	3570329	Callee	arg . Arg		3570196	0					
ANR	3570330	MemberAccess	arg . Arg		3570196	0					
ANR	3570331	Identifier	arg		3570196	0					
ANR	3570332	Identifier	Arg		3570196	1					
ANR	3570333	ArgumentList			3570196	1					
ANR	3570334	ElseStatement	else		3570196	0					
ANR	3570335	IfStatement	"if ( arg . fixedMatch ( ""ad"" ) )"		3570196	0					
ANR	3570336	Condition	"arg . fixedMatch ( ""ad"" )"	191:12:4632:4651	3570196	0	True				
ANR	3570337	CallExpression	"arg . fixedMatch ( ""ad"" )"		3570196	0					
ANR	3570338	Callee	arg . fixedMatch		3570196	0					
ANR	3570339	MemberAccess	arg . fixedMatch		3570196	0					
ANR	3570340	Identifier	arg		3570196	0					
ANR	3570341	Identifier	fixedMatch		3570196	1					
ANR	3570342	ArgumentList	"""ad"""		3570196	1					
ANR	3570343	Argument	"""ad"""		3570196	0					
ANR	3570344	PrimaryExpression	"""ad"""		3570196	0					
ANR	3570345	CompoundStatement		23:35:445:445	3570196	1					
ANR	3570346	ExpressionStatement	run_mode = MODE_AD	192:3:4660:4678	3570196	0	True				
ANR	3570347	AssignmentExpression	run_mode = MODE_AD		3570196	0		=			
ANR	3570348	Identifier	run_mode		3570196	0					
ANR	3570349	Identifier	MODE_AD		3570196	1					
ANR	3570350	ElseStatement	else		3570196	0					
ANR	3570351	IfStatement	"if ( arg . fixedMatch ( ""set"" ) )"		3570196	0					
ANR	3570352	Condition	"arg . fixedMatch ( ""set"" )"	194:12:4696:4716	3570196	0	True				
ANR	3570353	CallExpression	"arg . fixedMatch ( ""set"" )"		3570196	0					
ANR	3570354	Callee	arg . fixedMatch		3570196	0					
ANR	3570355	MemberAccess	arg . fixedMatch		3570196	0					
ANR	3570356	Identifier	arg		3570196	0					
ANR	3570357	Identifier	fixedMatch		3570196	1					
ANR	3570358	ArgumentList	"""set"""		3570196	1					
ANR	3570359	Argument	"""set"""		3570196	0					
ANR	3570360	PrimaryExpression	"""set"""		3570196	0					
ANR	3570361	CompoundStatement		26:36:510:510	3570196	1					
ANR	3570362	ExpressionStatement	run_mode = MODE_SET	195:3:4725:4744	3570196	0	True				
ANR	3570363	AssignmentExpression	run_mode = MODE_SET		3570196	0		=			
ANR	3570364	Identifier	run_mode		3570196	0					
ANR	3570365	Identifier	MODE_SET		3570196	1					
ANR	3570366	IfStatement	if ( ! arg . getOpt ( state ) )		3570196	1					
ANR	3570367	Condition	! arg . getOpt ( state )	196:8:4754:4773	3570196	0	True				
ANR	3570368	UnaryOperationExpression	! arg . getOpt ( state )		3570196	0					
ANR	3570369	UnaryOperator	!		3570196	0					
ANR	3570370	CallExpression	arg . getOpt ( state )		3570196	1					
ANR	3570371	Callee	arg . getOpt		3570196	0					
ANR	3570372	MemberAccess	arg . getOpt		3570196	0					
ANR	3570373	Identifier	arg		3570196	0					
ANR	3570374	Identifier	getOpt		3570196	1					
ANR	3570375	ArgumentList	state		3570196	1					
ANR	3570376	Argument	state		3570196	0					
ANR	3570377	Identifier	state		3570196	0					
ANR	3570378	CompoundStatement		28:31:567:567	3570196	1					
ANR	3570379	ExpressionStatement	usage ( )	197:4:4783:4790	3570196	0	True				
ANR	3570380	CallExpression	usage ( )		3570196	0					
ANR	3570381	Callee	usage		3570196	0					
ANR	3570382	Identifier	usage		3570196	0					
ANR	3570383	ArgumentList			3570196	1					
ANR	3570384	ExpressionStatement	"error ( E_OPTARG , arg . Arg ( ) )"	198:4:4796:4824	3570196	1	True				
ANR	3570385	CallExpression	"error ( E_OPTARG , arg . Arg ( ) )"		3570196	0					
ANR	3570386	Callee	error		3570196	0					
ANR	3570387	Identifier	error		3570196	0					
ANR	3570388	ArgumentList	E_OPTARG		3570196	1					
ANR	3570389	Argument	E_OPTARG		3570196	0					
ANR	3570390	Identifier	E_OPTARG		3570196	0					
ANR	3570391	Argument	arg . Arg ( )		3570196	1					
ANR	3570392	CallExpression	arg . Arg ( )		3570196	0					
ANR	3570393	Callee	arg . Arg		3570196	0					
ANR	3570394	MemberAccess	arg . Arg		3570196	0					
ANR	3570395	Identifier	arg		3570196	0					
ANR	3570396	Identifier	Arg		3570196	1					
ANR	3570397	ArgumentList			3570196	1					
ANR	3570398	ElseStatement	else		3570196	0					
ANR	3570399	CompoundStatement		33:7:632:632	3570196	0					
ANR	3570400	ExpressionStatement	usage ( )	202:3:4847:4854	3570196	0	True				
ANR	3570401	CallExpression	usage ( )		3570196	0					
ANR	3570402	Callee	usage		3570196	0					
ANR	3570403	Identifier	usage		3570196	0					
ANR	3570404	ArgumentList			3570196	1					
ANR	3570405	ExpressionStatement	"error ( E_OPTION , arg . Arg ( ) )"	203:3:4859:4887	3570196	1	True				
ANR	3570406	CallExpression	"error ( E_OPTION , arg . Arg ( ) )"		3570196	0					
ANR	3570407	Callee	error		3570196	0					
ANR	3570408	Identifier	error		3570196	0					
ANR	3570409	ArgumentList	E_OPTION		3570196	1					
ANR	3570410	Argument	E_OPTION		3570196	0					
ANR	3570411	Identifier	E_OPTION		3570196	0					
ANR	3570412	Argument	arg . Arg ( )		3570196	1					
ANR	3570413	CallExpression	arg . Arg ( )		3570196	0					
ANR	3570414	Callee	arg . Arg		3570196	0					
ANR	3570415	MemberAccess	arg . Arg		3570196	0					
ANR	3570416	Identifier	arg		3570196	0					
ANR	3570417	Identifier	Arg		3570196	1					
ANR	3570418	ArgumentList			3570196	1					
ANR	3570419	ExpressionStatement	argno = arg . Index ( )	205:2:4895:4914	3570196	3	True				
ANR	3570420	AssignmentExpression	argno = arg . Index ( )		3570196	0		=			
ANR	3570421	Identifier	argno		3570196	0					
ANR	3570422	CallExpression	arg . Index ( )		3570196	1					
ANR	3570423	Callee	arg . Index		3570196	0					
ANR	3570424	MemberAccess	arg . Index		3570196	0					
ANR	3570425	Identifier	arg		3570196	0					
ANR	3570426	Identifier	Index		3570196	1					
ANR	3570427	ArgumentList			3570196	1					
ANR	3570428	ReturnType	static void		3570196	1					
ANR	3570429	Identifier	parse_command_line		3570196	2					
ANR	3570430	ParameterList	"int argc , const char * argv [ ]"		3570196	3					
ANR	3570431	Parameter	int argc	168:20:4178:4185	3570196	0	True				
ANR	3570432	ParameterType	int		3570196	0					
ANR	3570433	Identifier	argc		3570196	1					
ANR	3570434	Parameter	const char * argv [ ]	168:30:4188:4205	3570196	1	True				
ANR	3570435	ParameterType	const char * [ ]		3570196	0					
ANR	3570436	Identifier	argv		3570196	1					
ANR	3570437	CFGEntryNode	ENTRY		3570196		True				
ANR	3570438	CFGExitNode	EXIT		3570196		True				
ANR	3570439	Symbol	argc		3570196						
ANR	3570440	Symbol	E_OPTARG		3570196						
ANR	3570441	Symbol	method		3570196						
ANR	3570442	Symbol	arg . Match		3570196						
ANR	3570443	Symbol	false		3570196						
ANR	3570444	Symbol	arg . Error		3570196						
ANR	3570445	Symbol	arg . Index		3570196						
ANR	3570446	Symbol	argv		3570196						
ANR	3570447	Symbol	MODE_SET		3570196						
ANR	3570448	Symbol	E_OPTION		3570196						
ANR	3570449	Symbol	arg . Arg		3570196						
ANR	3570450	Symbol	arg . fixedMatch		3570196						
ANR	3570451	Symbol	MODE_AD		3570196						
ANR	3570452	Symbol	run_mode		3570196						
ANR	3570453	Symbol	arg		3570196						
ANR	3570454	Symbol	argno		3570196						
ANR	3570455	Symbol	state		3570196						
ANR	3570456	Symbol	arg . getOpt		3570196						
ANR	3570457	Function	hibernate_machine	209:0:4922:5399							
ANR	3570458	FunctionDef	hibernate_machine ()		3570457	0					
ANR	3570459	CompoundStatement		211:0:4958:5399	3570457	0					
ANR	3570460	IdentifierDeclStatement	bool ok = false ;	213:1:4962:4978	3570457	0	True				
ANR	3570461	IdentifierDecl	ok = false		3570457	0					
ANR	3570462	IdentifierDeclType	bool		3570457	0					
ANR	3570463	Identifier	ok		3570457	1					
ANR	3570464	AssignmentExpression	ok = false		3570457	2		=			
ANR	3570465	Identifier	false		3570457	0					
ANR	3570466	Identifier	false		3570457	1					
ANR	3570467	IdentifierDeclStatement	state_t desired = HibernatorBase :: stringToSleepState ( state ) ;	214:1:4981:5042	3570457	1	True				
ANR	3570468	IdentifierDecl	desired = HibernatorBase :: stringToSleepState ( state )		3570457	0					
ANR	3570469	IdentifierDeclType	state_t		3570457	0					
ANR	3570470	Identifier	desired		3570457	1					
ANR	3570471	AssignmentExpression	desired = HibernatorBase :: stringToSleepState ( state )		3570457	2		=			
ANR	3570472	Identifier	desired		3570457	0					
ANR	3570473	CallExpression	HibernatorBase :: stringToSleepState ( state )		3570457	1					
ANR	3570474	Callee	HibernatorBase :: stringToSleepState		3570457	0					
ANR	3570475	Identifier	HibernatorBase :: stringToSleepState		3570457	0					
ANR	3570476	ArgumentList	state		3570457	1					
ANR	3570477	Argument	state		3570457	0					
ANR	3570478	Identifier	state		3570457	0					
ANR	3570479	IdentifierDeclStatement	state_t actual ;	215:1:5045:5059	3570457	2	True				
ANR	3570480	IdentifierDecl	actual		3570457	0					
ANR	3570481	IdentifierDeclType	state_t		3570457	0					
ANR	3570482	Identifier	actual		3570457	1					
ANR	3570483	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Switching to state %s\\n"" , HibernatorBase :: sleepStateToString ( desired ) )"	219:1:5128:5230	3570457	3	True				
ANR	3570484	CallExpression	"dprintf ( D_FULLDEBUG , ""Switching to state %s\\n"" , HibernatorBase :: sleepStateToString ( desired ) )"		3570457	0					
ANR	3570485	Callee	dprintf		3570457	0					
ANR	3570486	Identifier	dprintf		3570457	0					
ANR	3570487	ArgumentList	D_FULLDEBUG		3570457	1					
ANR	3570488	Argument	D_FULLDEBUG		3570457	0					
ANR	3570489	Identifier	D_FULLDEBUG		3570457	0					
ANR	3570490	Argument	"""Switching to state %s\\n"""		3570457	1					
ANR	3570491	PrimaryExpression	"""Switching to state %s\\n"""		3570457	0					
ANR	3570492	Argument	HibernatorBase :: sleepStateToString ( desired )		3570457	2					
ANR	3570493	CallExpression	HibernatorBase :: sleepStateToString ( desired )		3570457	0					
ANR	3570494	Callee	HibernatorBase :: sleepStateToString		3570457	0					
ANR	3570495	Identifier	HibernatorBase :: sleepStateToString		3570457	0					
ANR	3570496	ArgumentList	desired		3570457	1					
ANR	3570497	Argument	desired		3570457	0					
ANR	3570498	Identifier	desired		3570457	0					
ANR	3570499	ExpressionStatement	"ok = hibernator -> switchToState ( desired , actual )"	222:1:5233:5283	3570457	4	True				
ANR	3570500	AssignmentExpression	"ok = hibernator -> switchToState ( desired , actual )"		3570457	0		=			
ANR	3570501	Identifier	ok		3570457	0					
ANR	3570502	CallExpression	"hibernator -> switchToState ( desired , actual )"		3570457	1					
ANR	3570503	Callee	hibernator -> switchToState		3570457	0					
ANR	3570504	PtrMemberAccess	hibernator -> switchToState		3570457	0					
ANR	3570505	Identifier	hibernator		3570457	0					
ANR	3570506	Identifier	switchToState		3570457	1					
ANR	3570507	ArgumentList	desired		3570457	1					
ANR	3570508	Argument	desired		3570457	0					
ANR	3570509	Identifier	desired		3570457	0					
ANR	3570510	Argument	actual		3570457	1					
ANR	3570511	Identifier	actual		3570457	0					
ANR	3570512	IfStatement	if ( ( ! ok ) || ( desired != actual ) )		3570457	5					
ANR	3570513	Condition	( ! ok ) || ( desired != actual )	224:6:5292:5321	3570457	0	True				
ANR	3570514	OrExpression	( ! ok ) || ( desired != actual )		3570457	0		||			
ANR	3570515	UnaryOperationExpression	! ok		3570457	0					
ANR	3570516	UnaryOperator	!		3570457	0					
ANR	3570517	Identifier	ok		3570457	1					
ANR	3570518	EqualityExpression	desired != actual		3570457	1		!=			
ANR	3570519	Identifier	desired		3570457	0					
ANR	3570520	Identifier	actual		3570457	1					
ANR	3570521	CompoundStatement		14:39:366:366	3570457	1					
ANR	3570522	ExpressionStatement	error ( E_NOREST )	225:2:5329:5346	3570457	0	True				
ANR	3570523	CallExpression	error ( E_NOREST )		3570457	0					
ANR	3570524	Callee	error		3570457	0					
ANR	3570525	Identifier	error		3570457	0					
ANR	3570526	ArgumentList	E_NOREST		3570457	1					
ANR	3570527	Argument	E_NOREST		3570457	0					
ANR	3570528	Identifier	E_NOREST		3570457	0					
ANR	3570529	ExpressionStatement	"fprintf ( stderr , ""Power level change.\\n"" )"	228:1:5353:5396	3570457	6	True				
ANR	3570530	CallExpression	"fprintf ( stderr , ""Power level change.\\n"" )"		3570457	0					
ANR	3570531	Callee	fprintf		3570457	0					
ANR	3570532	Identifier	fprintf		3570457	0					
ANR	3570533	ArgumentList	stderr		3570457	1					
ANR	3570534	Argument	stderr		3570457	0					
ANR	3570535	Identifier	stderr		3570457	0					
ANR	3570536	Argument	"""Power level change.\\n"""		3570457	1					
ANR	3570537	PrimaryExpression	"""Power level change.\\n"""		3570457	0					
ANR	3570538	ReturnType	static void		3570457	1					
ANR	3570539	Identifier	hibernate_machine		3570457	2					
ANR	3570540	ParameterList			3570457	3					
ANR	3570541	CFGEntryNode	ENTRY		3570457		True				
ANR	3570542	CFGExitNode	EXIT		3570457		True				
ANR	3570543	Symbol	actual		3570457						
ANR	3570544	Symbol	hibernator		3570457						
ANR	3570545	Symbol	* hibernator		3570457						
ANR	3570546	Symbol	false		3570457						
ANR	3570547	Symbol	D_FULLDEBUG		3570457						
ANR	3570548	Symbol	stderr		3570457						
ANR	3570549	Symbol	desired		3570457						
ANR	3570550	Symbol	hibernator -> switchToState		3570457						
ANR	3570551	Symbol	E_NOREST		3570457						
ANR	3570552	Symbol	state		3570457						
ANR	3570553	Symbol	ok		3570457						
ANR	3570554	Symbol	HibernatorBase :: stringToSleepState		3570457						
ANR	3570555	Symbol	HibernatorBase :: sleepStateToString		3570457						
ANR	3570556	Function	dump_ad	232:0:5402:5774							
ANR	3570557	FunctionDef	dump_ad ()		3570556	0					
ANR	3570558	CompoundStatement		234:0:5430:5774	3570556	0					
ANR	3570559	IdentifierDeclStatement	unsigned mask = hibernator -> getStates ( ) ;	235:1:5433:5473	3570556	0	True				
ANR	3570560	IdentifierDecl	mask = hibernator -> getStates ( )		3570556	0					
ANR	3570561	IdentifierDeclType	unsigned		3570556	0					
ANR	3570562	Identifier	mask		3570556	1					
ANR	3570563	AssignmentExpression	mask = hibernator -> getStates ( )		3570556	2		=			
ANR	3570564	Identifier	mask		3570556	0					
ANR	3570565	CallExpression	hibernator -> getStates ( )		3570556	1					
ANR	3570566	Callee	hibernator -> getStates		3570556	0					
ANR	3570567	PtrMemberAccess	hibernator -> getStates		3570556	0					
ANR	3570568	Identifier	hibernator		3570556	0					
ANR	3570569	Identifier	getStates		3570556	1					
ANR	3570570	ArgumentList			3570556	1					
ANR	3570571	IdentifierDeclStatement	MyString states ;	236:1:5476:5491	3570556	1	True				
ANR	3570572	IdentifierDecl	states		3570556	0					
ANR	3570573	IdentifierDeclType	MyString		3570556	0					
ANR	3570574	Identifier	states		3570556	1					
ANR	3570575	IfStatement	"if ( ! HibernatorBase :: maskToString ( mask , states ) )"		3570556	2					
ANR	3570576	Condition	"! HibernatorBase :: maskToString ( mask , states )"	237:6:5499:5541	3570556	0	True				
ANR	3570577	UnaryOperationExpression	"! HibernatorBase :: maskToString ( mask , states )"		3570556	0					
ANR	3570578	UnaryOperator	!		3570556	0					
ANR	3570579	CallExpression	"HibernatorBase :: maskToString ( mask , states )"		3570556	1					
ANR	3570580	Callee	HibernatorBase :: maskToString		3570556	0					
ANR	3570581	Identifier	HibernatorBase :: maskToString		3570556	0					
ANR	3570582	ArgumentList	mask		3570556	1					
ANR	3570583	Argument	mask		3570556	0					
ANR	3570584	Identifier	mask		3570556	0					
ANR	3570585	Argument	states		3570556	1					
ANR	3570586	Identifier	states		3570556	0					
ANR	3570587	CompoundStatement		4:52:114:114	3570556	1					
ANR	3570588	ExpressionStatement	error ( E_STATES )	238:2:5549:5566	3570556	0	True				
ANR	3570589	CallExpression	error ( E_STATES )		3570556	0					
ANR	3570590	Callee	error		3570556	0					
ANR	3570591	Identifier	error		3570556	0					
ANR	3570592	ArgumentList	E_STATES		3570556	1					
ANR	3570593	Argument	E_STATES		3570556	0					
ANR	3570594	Identifier	E_STATES		3570556	0					
ANR	3570595	IdentifierDeclStatement	ClassAd ad ;	240:1:5572:5582	3570556	3	True				
ANR	3570596	IdentifierDecl	ad		3570556	0					
ANR	3570597	IdentifierDeclType	ClassAd		3570556	0					
ANR	3570598	Identifier	ad		3570556	1					
ANR	3570599	ExpressionStatement	"ad . Assign ( ATTR_HIBERNATION_METHOD , hibernator -> getMethod ( ) )"	241:1:5585:5646	3570556	4	True				
ANR	3570600	CallExpression	"ad . Assign ( ATTR_HIBERNATION_METHOD , hibernator -> getMethod ( ) )"		3570556	0					
ANR	3570601	Callee	ad . Assign		3570556	0					
ANR	3570602	MemberAccess	ad . Assign		3570556	0					
ANR	3570603	Identifier	ad		3570556	0					
ANR	3570604	Identifier	Assign		3570556	1					
ANR	3570605	ArgumentList	ATTR_HIBERNATION_METHOD		3570556	1					
ANR	3570606	Argument	ATTR_HIBERNATION_METHOD		3570556	0					
ANR	3570607	Identifier	ATTR_HIBERNATION_METHOD		3570556	0					
ANR	3570608	Argument	hibernator -> getMethod ( )		3570556	1					
ANR	3570609	CallExpression	hibernator -> getMethod ( )		3570556	0					
ANR	3570610	Callee	hibernator -> getMethod		3570556	0					
ANR	3570611	PtrMemberAccess	hibernator -> getMethod		3570556	0					
ANR	3570612	Identifier	hibernator		3570556	0					
ANR	3570613	Identifier	getMethod		3570556	1					
ANR	3570614	ArgumentList			3570556	1					
ANR	3570615	ExpressionStatement	"ad . Assign ( ATTR_HIBERNATION_SUPPORTED_STATES , states )"	242:1:5649:5703	3570556	5	True				
ANR	3570616	CallExpression	"ad . Assign ( ATTR_HIBERNATION_SUPPORTED_STATES , states )"		3570556	0					
ANR	3570617	Callee	ad . Assign		3570556	0					
ANR	3570618	MemberAccess	ad . Assign		3570556	0					
ANR	3570619	Identifier	ad		3570556	0					
ANR	3570620	Identifier	Assign		3570556	1					
ANR	3570621	ArgumentList	ATTR_HIBERNATION_SUPPORTED_STATES		3570556	1					
ANR	3570622	Argument	ATTR_HIBERNATION_SUPPORTED_STATES		3570556	0					
ANR	3570623	Identifier	ATTR_HIBERNATION_SUPPORTED_STATES		3570556	0					
ANR	3570624	Argument	states		3570556	1					
ANR	3570625	Identifier	states		3570556	0					
ANR	3570626	ExpressionStatement	"ad . Assign ( ATTR_HIBERNATION_RAW_MASK , mask )"	243:1:5706:5750	3570556	6	True				
ANR	3570627	CallExpression	"ad . Assign ( ATTR_HIBERNATION_RAW_MASK , mask )"		3570556	0					
ANR	3570628	Callee	ad . Assign		3570556	0					
ANR	3570629	MemberAccess	ad . Assign		3570556	0					
ANR	3570630	Identifier	ad		3570556	0					
ANR	3570631	Identifier	Assign		3570556	1					
ANR	3570632	ArgumentList	ATTR_HIBERNATION_RAW_MASK		3570556	1					
ANR	3570633	Argument	ATTR_HIBERNATION_RAW_MASK		3570556	0					
ANR	3570634	Identifier	ATTR_HIBERNATION_RAW_MASK		3570556	0					
ANR	3570635	Argument	mask		3570556	1					
ANR	3570636	Identifier	mask		3570556	0					
ANR	3570637	ExpressionStatement	ad . fPrint ( stdout )	244:1:5753:5772	3570556	7	True				
ANR	3570638	CallExpression	ad . fPrint ( stdout )		3570556	0					
ANR	3570639	Callee	ad . fPrint		3570556	0					
ANR	3570640	MemberAccess	ad . fPrint		3570556	0					
ANR	3570641	Identifier	ad		3570556	0					
ANR	3570642	Identifier	fPrint		3570556	1					
ANR	3570643	ArgumentList	stdout		3570556	1					
ANR	3570644	Argument	stdout		3570556	0					
ANR	3570645	Identifier	stdout		3570556	0					
ANR	3570646	ReturnType	static void		3570556	1					
ANR	3570647	Identifier	dump_ad		3570556	2					
ANR	3570648	ParameterList			3570556	3					
ANR	3570649	CFGEntryNode	ENTRY		3570556		True				
ANR	3570650	CFGExitNode	EXIT		3570556		True				
ANR	3570651	Symbol	hibernator		3570556						
ANR	3570652	Symbol	* hibernator		3570556						
ANR	3570653	Symbol	ad		3570556						
ANR	3570654	Symbol	stdout		3570556						
ANR	3570655	Symbol	ATTR_HIBERNATION_SUPPORTED_STATES		3570556						
ANR	3570656	Symbol	hibernator -> getMethod		3570556						
ANR	3570657	Symbol	ATTR_HIBERNATION_RAW_MASK		3570556						
ANR	3570658	Symbol	states		3570556						
ANR	3570659	Symbol	hibernator -> getStates		3570556						
ANR	3570660	Symbol	ATTR_HIBERNATION_METHOD		3570556						
ANR	3570661	Symbol	HibernatorBase :: maskToString		3570556						
ANR	3570662	Symbol	E_STATES		3570556						
ANR	3570663	Symbol	mask		3570556						
ANR	3570664	Function	main	247:0:5777:6472							
ANR	3570665	FunctionDef	"main (int argc , const char * argv [ ])"		3570664	0					
ANR	3570666	CompoundStatement		249:0:5818:6472	3570664	0					
ANR	3570667	ExpressionStatement	name = condor_basename ( argv [ 0 ] )	251:1:5857:5891	3570664	0	True				
ANR	3570668	AssignmentExpression	name = condor_basename ( argv [ 0 ] )		3570664	0		=			
ANR	3570669	Identifier	name		3570664	0					
ANR	3570670	CallExpression	condor_basename ( argv [ 0 ] )		3570664	1					
ANR	3570671	Callee	condor_basename		3570664	0					
ANR	3570672	Identifier	condor_basename		3570664	0					
ANR	3570673	ArgumentList	argv [ 0 ]		3570664	1					
ANR	3570674	Argument	argv [ 0 ]		3570664	0					
ANR	3570675	ArrayIndexing	argv [ 0 ]		3570664	0					
ANR	3570676	Identifier	argv		3570664	0					
ANR	3570677	PrimaryExpression	0		3570664	1					
ANR	3570678	IfStatement	if ( ! name )		3570664	1					
ANR	3570679	Condition	! name	252:6:5899:5903	3570664	0	True				
ANR	3570680	UnaryOperationExpression	! name		3570664	0					
ANR	3570681	UnaryOperator	!		3570664	0					
ANR	3570682	Identifier	name		3570664	1					
ANR	3570683	CompoundStatement		4:14:88:88	3570664	1					
ANR	3570684	ExpressionStatement	name = argv [ 0 ]	253:2:5911:5925	3570664	0	True				
ANR	3570685	AssignmentExpression	name = argv [ 0 ]		3570664	0		=			
ANR	3570686	Identifier	name		3570664	0					
ANR	3570687	ArrayIndexing	argv [ 0 ]		3570664	1					
ANR	3570688	Identifier	argv		3570664	0					
ANR	3570689	PrimaryExpression	0		3570664	1					
ANR	3570690	ExpressionStatement	"parse_command_line ( argc , argv )"	257:1:5993:6026	3570664	2	True				
ANR	3570691	CallExpression	"parse_command_line ( argc , argv )"		3570664	0					
ANR	3570692	Callee	parse_command_line		3570664	0					
ANR	3570693	Identifier	parse_command_line		3570664	0					
ANR	3570694	ArgumentList	argc		3570664	1					
ANR	3570695	Argument	argc		3570664	0					
ANR	3570696	Identifier	argc		3570664	0					
ANR	3570697	Argument	argv		3570664	1					
ANR	3570698	Identifier	argv		3570664	0					
ANR	3570699	IfStatement	if ( HIBERNATOR_TYPE_DEFINED )		3570664	3					
ANR	3570700	Condition	HIBERNATOR_TYPE_DEFINED	261:7:6079:6101	3570664	0	True				
ANR	3570701	Identifier	HIBERNATOR_TYPE_DEFINED		3570664	0					
ANR	3570702	Statement	hibernator	262:1:6106:6115	3570664	1	True				
ANR	3570703	Statement	=	262:12:6117:6117	3570664	4	True				
ANR	3570704	Statement	new	262:14:6119:6121	3570664	5	True				
ANR	3570705	ExpressionStatement	RealHibernator	262:18:6123:6137	3570664	6	True				
ANR	3570706	Identifier	RealHibernator		3570664	0					
ANR	3570707	Statement	endif	263:2:6141:6145	3570664	7	True				
ANR	3570708	IfStatement	if ( ! hibernator )		3570664	8					
ANR	3570709	Condition	! hibernator	264:6:6153:6163	3570664	0	True				
ANR	3570710	UnaryOperationExpression	! hibernator		3570664	0					
ANR	3570711	UnaryOperator	!		3570664	0					
ANR	3570712	Identifier	hibernator		3570664	1					
ANR	3570713	CompoundStatement		16:20:348:348	3570664	1					
ANR	3570714	ExpressionStatement	"error ( E_NOMEM , ""hibernator object."" )"	265:2:6171:6209	3570664	0	True				
ANR	3570715	CallExpression	"error ( E_NOMEM , ""hibernator object."" )"		3570664	0					
ANR	3570716	Callee	error		3570664	0					
ANR	3570717	Identifier	error		3570664	0					
ANR	3570718	ArgumentList	E_NOMEM		3570664	1					
ANR	3570719	Argument	E_NOMEM		3570664	0					
ANR	3570720	Identifier	E_NOMEM		3570664	0					
ANR	3570721	Argument	"""hibernator object."""		3570664	1					
ANR	3570722	PrimaryExpression	"""hibernator object."""		3570664	0					
ANR	3570723	IfStatement	if ( method )		3570664	9					
ANR	3570724	Condition	method	267:6:6220:6225	3570664	0	True				
ANR	3570725	Identifier	method		3570664	0					
ANR	3570726	CompoundStatement		19:15:410:410	3570664	1					
ANR	3570727	ExpressionStatement	hibernator -> setMethod ( method )	268:2:6233:6264	3570664	0	True				
ANR	3570728	CallExpression	hibernator -> setMethod ( method )		3570664	0					
ANR	3570729	Callee	hibernator -> setMethod		3570664	0					
ANR	3570730	PtrMemberAccess	hibernator -> setMethod		3570664	0					
ANR	3570731	Identifier	hibernator		3570664	0					
ANR	3570732	Identifier	setMethod		3570664	1					
ANR	3570733	ArgumentList	method		3570664	1					
ANR	3570734	Argument	method		3570664	0					
ANR	3570735	Identifier	method		3570664	0					
ANR	3570736	IfStatement	if ( ! hibernator -> initialize ( ) )		3570664	10					
ANR	3570737	Condition	! hibernator -> initialize ( )	270:6:6275:6299	3570664	0	True				
ANR	3570738	UnaryOperationExpression	! hibernator -> initialize ( )		3570664	0					
ANR	3570739	UnaryOperator	!		3570664	0					
ANR	3570740	CallExpression	hibernator -> initialize ( )		3570664	1					
ANR	3570741	Callee	hibernator -> initialize		3570664	0					
ANR	3570742	PtrMemberAccess	hibernator -> initialize		3570664	0					
ANR	3570743	Identifier	hibernator		3570664	0					
ANR	3570744	Identifier	initialize		3570664	1					
ANR	3570745	ArgumentList			3570664	1					
ANR	3570746	CompoundStatement		22:34:484:484	3570664	1					
ANR	3570747	ExpressionStatement	error ( E_INIT )	271:2:6307:6322	3570664	0	True				
ANR	3570748	CallExpression	error ( E_INIT )		3570664	0					
ANR	3570749	Callee	error		3570664	0					
ANR	3570750	Identifier	error		3570664	0					
ANR	3570751	ArgumentList	E_INIT		3570664	1					
ANR	3570752	Argument	E_INIT		3570664	0					
ANR	3570753	Identifier	E_INIT		3570664	0					
ANR	3570754	IfStatement	if ( MODE_AD == run_mode )		3570664	11					
ANR	3570755	Condition	MODE_AD == run_mode	274:6:6334:6352	3570664	0	True				
ANR	3570756	EqualityExpression	MODE_AD == run_mode		3570664	0		==			
ANR	3570757	Identifier	MODE_AD		3570664	0					
ANR	3570758	Identifier	run_mode		3570664	1					
ANR	3570759	CompoundStatement		26:28:537:537	3570664	1					
ANR	3570760	ExpressionStatement	dump_ad ( )	275:2:6360:6370	3570664	0	True				
ANR	3570761	CallExpression	dump_ad ( )		3570664	0					
ANR	3570762	Callee	dump_ad		3570664	0					
ANR	3570763	Identifier	dump_ad		3570664	0					
ANR	3570764	ArgumentList			3570664	1					
ANR	3570765	ElseStatement	else		3570664	0					
ANR	3570766	IfStatement	if ( MODE_SET == run_mode )		3570664	0					
ANR	3570767	Condition	MODE_SET == run_mode	277:11:6386:6405	3570664	0	True				
ANR	3570768	EqualityExpression	MODE_SET == run_mode		3570664	0		==			
ANR	3570769	Identifier	MODE_SET		3570664	0					
ANR	3570770	Identifier	run_mode		3570664	1					
ANR	3570771	CompoundStatement		29:34:590:590	3570664	1					
ANR	3570772	ExpressionStatement	hibernate_machine ( )	278:2:6413:6433	3570664	0	True				
ANR	3570773	CallExpression	hibernate_machine ( )		3570664	0					
ANR	3570774	Callee	hibernate_machine		3570664	0					
ANR	3570775	Identifier	hibernate_machine		3570664	0					
ANR	3570776	ArgumentList			3570664	1					
ANR	3570777	Statement	delete	281:1:6440:6445	3570664	12	True				
ANR	3570778	ExpressionStatement	hibernator	281:8:6447:6457	3570664	13	True				
ANR	3570779	Identifier	hibernator		3570664	0					
ANR	3570780	ReturnStatement	return 0 ;	283:1:6461:6469	3570664	14	True				
ANR	3570781	PrimaryExpression	0		3570664	0					
ANR	3570782	ReturnType	int		3570664	1					
ANR	3570783	Identifier	main		3570664	2					
ANR	3570784	ParameterList	"int argc , const char * argv [ ]"		3570664	3					
ANR	3570785	Parameter	int argc	248:6:5787:5794	3570664	0	True				
ANR	3570786	ParameterType	int		3570664	0					
ANR	3570787	Identifier	argc		3570664	1					
ANR	3570788	Parameter	const char * argv [ ]	248:16:5797:5814	3570664	1	True				
ANR	3570789	ParameterType	const char * [ ]		3570664	0					
ANR	3570790	Identifier	argv		3570664	1					
ANR	3570791	CFGEntryNode	ENTRY		3570664		True				
ANR	3570792	CFGExitNode	EXIT		3570664		True				
ANR	3570793	Symbol	argc		3570664						
ANR	3570794	Symbol	E_NOMEM		3570664						
ANR	3570795	Symbol	hibernator		3570664						
ANR	3570796	Symbol	* hibernator		3570664						
ANR	3570797	Symbol	method		3570664						
ANR	3570798	Symbol	HIBERNATOR_TYPE_DEFINED		3570664						
ANR	3570799	Symbol	* argv		3570664						
ANR	3570800	Symbol	argv		3570664						
ANR	3570801	Symbol	MODE_SET		3570664						
ANR	3570802	Symbol	E_INIT		3570664						
ANR	3570803	Symbol	MODE_AD		3570664						
ANR	3570804	Symbol	run_mode		3570664						
ANR	3570805	Symbol	name		3570664						
ANR	3570806	Symbol	hibernator -> initialize		3570664						
ANR	3570807	Symbol	condor_basename		3570664						
