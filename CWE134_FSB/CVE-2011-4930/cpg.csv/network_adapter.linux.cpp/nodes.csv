command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1905727	File	data/converged/CVE-2011-4930_htcondor/network_adapter.linux.cpp								
ANR	1905728	Function	LinuxNetworkAdapter :: LinuxNetworkAdapter	62:0:1674:1844							
ANR	1905729	FunctionDef	LinuxNetworkAdapter :: LinuxNetworkAdapter (const condor_sockaddr & ip_addr)		1905728	0					
ANR	1905730	CompoundStatement		64:0:1793:1844	1905728	0					
ANR	1905731	ExpressionStatement	m_wol_support_mask = 0	65:1:1796:1818	1905728	0	True				
ANR	1905732	AssignmentExpression	m_wol_support_mask = 0		1905728	0		=			
ANR	1905733	Identifier	m_wol_support_mask		1905728	0					
ANR	1905734	PrimaryExpression	0		1905728	1					
ANR	1905735	ExpressionStatement	m_wol_enable_mask = 0	66:1:1821:1842	1905728	1	True				
ANR	1905736	AssignmentExpression	m_wol_enable_mask = 0		1905728	0		=			
ANR	1905737	Identifier	m_wol_enable_mask		1905728	0					
ANR	1905738	PrimaryExpression	0		1905728	1					
ANR	1905739	Identifier	LinuxNetworkAdapter :: LinuxNetworkAdapter		1905728	1					
ANR	1905740	ParameterList	const condor_sockaddr & ip_addr		1905728	2					
ANR	1905741	Parameter	const condor_sockaddr & ip_addr	62:43:1717:1746	1905728	0	True				
ANR	1905742	ParameterType	const condor_sockaddr &		1905728	0					
ANR	1905743	Identifier	ip_addr		1905728	1					
ANR	1905744	CFGEntryNode	ENTRY		1905728		True				
ANR	1905745	CFGExitNode	EXIT		1905728		True				
ANR	1905746	Symbol	m_wol_enable_mask		1905728						
ANR	1905747	Symbol	ip_addr		1905728						
ANR	1905748	Symbol	m_wol_support_mask		1905728						
ANR	1905749	Function	LinuxNetworkAdapter :: LinuxNetworkAdapter	69:0:1847:1999							
ANR	1905750	FunctionDef	LinuxNetworkAdapter :: LinuxNetworkAdapter (const char * name)		1905749	0					
ANR	1905751	CompoundStatement		71:0:1948:1999	1905749	0					
ANR	1905752	ExpressionStatement	m_wol_support_mask = 0	72:1:1951:1973	1905749	0	True				
ANR	1905753	AssignmentExpression	m_wol_support_mask = 0		1905749	0		=			
ANR	1905754	Identifier	m_wol_support_mask		1905749	0					
ANR	1905755	PrimaryExpression	0		1905749	1					
ANR	1905756	ExpressionStatement	m_wol_enable_mask = 0	73:1:1976:1997	1905749	1	True				
ANR	1905757	AssignmentExpression	m_wol_enable_mask = 0		1905749	0		=			
ANR	1905758	Identifier	m_wol_enable_mask		1905749	0					
ANR	1905759	PrimaryExpression	0		1905749	1					
ANR	1905760	Identifier	LinuxNetworkAdapter :: LinuxNetworkAdapter		1905749	1					
ANR	1905761	ParameterList	const char * name		1905749	2					
ANR	1905762	Parameter	const char * name	69:43:1890:1905	1905749	0	True				
ANR	1905763	ParameterType	const char *		1905749	0					
ANR	1905764	Identifier	name		1905749	1					
ANR	1905765	CFGEntryNode	ENTRY		1905749		True				
ANR	1905766	CFGExitNode	EXIT		1905749		True				
ANR	1905767	Symbol	name		1905749						
ANR	1905768	Symbol	m_wol_enable_mask		1905749						
ANR	1905769	Symbol	m_wol_support_mask		1905749						
ANR	1905770	Function	LinuxNetworkAdapter :: ~LinuxNetworkAdapter	77:0:2017:2078							
ANR	1905771	FunctionDef	LinuxNetworkAdapter :: ~LinuxNetworkAdapter ()		1905770	0					
ANR	1905772	CompoundStatement		78:0:2076:2078	1905770	0					
ANR	1905773	Identifier	LinuxNetworkAdapter :: ~LinuxNetworkAdapter		1905770	1					
ANR	1905774	ParameterList			1905770	2					
ANR	1905775	CFGEntryNode	ENTRY		1905770		True				
ANR	1905776	CFGExitNode	EXIT		1905770		True				
ANR	1905777	Function	LinuxNetworkAdapter :: findAdapter	81:0:2081:4331							
ANR	1905778	FunctionDef	LinuxNetworkAdapter :: findAdapter (const condor_sockaddr & ip_addr)		1905777	0					
ANR	1905779	CompoundStatement		83:0:2153:4331	1905777	0					
ANR	1905780	IdentifierDeclStatement	bool found = false ;	84:1:2156:2176	1905777	0	True				
ANR	1905781	IdentifierDecl	found = false		1905777	0					
ANR	1905782	IdentifierDeclType	bool		1905777	0					
ANR	1905783	Identifier	found		1905777	1					
ANR	1905784	AssignmentExpression	found = false		1905777	2		=			
ANR	1905785	Identifier	false		1905777	0					
ANR	1905786	Identifier	false		1905777	1					
ANR	1905787	IfStatement	if ( HAVE_STRUCT_IFCONF )		1905777	1					
ANR	1905788	Condition	HAVE_STRUCT_IFCONF	85:6:2184:2201	1905777	0	True				
ANR	1905789	Identifier	HAVE_STRUCT_IFCONF		1905777	0					
ANR	1905790	Statement	&&	85:26:2204:2205	1905777	1	True				
ANR	1905791	Statement	(	85:29:2207:2207	1905777	2	True				
ANR	1905792	Statement	HAVE_STRUCT_IFREQ	85:30:2208:2224	1905777	3	True				
ANR	1905793	Statement	)	85:47:2225:2225	1905777	4	True				
ANR	1905794	Statement	&&	85:49:2227:2228	1905777	5	True				
ANR	1905795	Statement	(	85:52:2230:2230	1905777	6	True				
ANR	1905796	Statement	HAVE_DECL_SIOCGIFCONF	85:53:2231:2251	1905777	7	True				
ANR	1905797	Statement	)	85:74:2252:2252	1905777	8	True				
ANR	1905798	IdentifierDeclStatement	struct ifconf ifc ;	86:1:2255:2272	1905777	9	True				
ANR	1905799	IdentifierDecl	ifc		1905777	0					
ANR	1905800	IdentifierDeclType	struct ifconf		1905777	0					
ANR	1905801	Identifier	ifc		1905777	1					
ANR	1905802	IdentifierDeclStatement	int sock ;	87:1:2275:2286	1905777	10	True				
ANR	1905803	IdentifierDecl	sock		1905777	0					
ANR	1905804	IdentifierDeclType	int		1905777	0					
ANR	1905805	Identifier	sock		1905777	1					
ANR	1905806	IdentifierDeclStatement	int num_req = 3 ;	88:1:2289:2307	1905777	11	True				
ANR	1905807	IdentifierDecl	num_req = 3		1905777	0					
ANR	1905808	IdentifierDeclType	int		1905777	0					
ANR	1905809	Identifier	num_req		1905777	1					
ANR	1905810	AssignmentExpression	num_req = 3		1905777	2		=			
ANR	1905811	Identifier	num_req		1905777	0					
ANR	1905812	PrimaryExpression	3		1905777	1					
ANR	1905813	ExpressionStatement	"sock = socket ( AF_INET , SOCK_DGRAM , 0 )"	92:1:2423:2460	1905777	12	True				
ANR	1905814	AssignmentExpression	"sock = socket ( AF_INET , SOCK_DGRAM , 0 )"		1905777	0		=			
ANR	1905815	Identifier	sock		1905777	0					
ANR	1905816	CallExpression	"socket ( AF_INET , SOCK_DGRAM , 0 )"		1905777	1					
ANR	1905817	Callee	socket		1905777	0					
ANR	1905818	Identifier	socket		1905777	0					
ANR	1905819	ArgumentList	AF_INET		1905777	1					
ANR	1905820	Argument	AF_INET		1905777	0					
ANR	1905821	Identifier	AF_INET		1905777	0					
ANR	1905822	Argument	SOCK_DGRAM		1905777	1					
ANR	1905823	Identifier	SOCK_DGRAM		1905777	0					
ANR	1905824	Argument	0		1905777	2					
ANR	1905825	PrimaryExpression	0		1905777	0					
ANR	1905826	IfStatement	if ( sock < 0 )		1905777	13					
ANR	1905827	Condition	sock < 0	93:5:2467:2474	1905777	0	True				
ANR	1905828	RelationalExpression	sock < 0		1905777	0		<			
ANR	1905829	Identifier	sock		1905777	0					
ANR	1905830	PrimaryExpression	0		1905777	1					
ANR	1905831	CompoundStatement		11:15:323:323	1905777	1					
ANR	1905832	ExpressionStatement	"derror ( ""Cannot get control socket for WOL detection"" )"	94:2:2481:2536	1905777	0	True				
ANR	1905833	CallExpression	"derror ( ""Cannot get control socket for WOL detection"" )"		1905777	0					
ANR	1905834	Callee	derror		1905777	0					
ANR	1905835	Identifier	derror		1905777	0					
ANR	1905836	ArgumentList	"""Cannot get control socket for WOL detection"""		1905777	1					
ANR	1905837	Argument	"""Cannot get control socket for WOL detection"""		1905777	0					
ANR	1905838	PrimaryExpression	"""Cannot get control socket for WOL detection"""		1905777	0					
ANR	1905839	ReturnStatement	return false ;	95:2:2540:2552	1905777	1	True				
ANR	1905840	Identifier	false		1905777	0					
ANR	1905841	IdentifierDeclStatement	condor_sockaddr addr ;	101:1:2699:2719	1905777	14	True				
ANR	1905842	IdentifierDecl	addr		1905777	0					
ANR	1905843	IdentifierDeclType	condor_sockaddr		1905777	0					
ANR	1905844	Identifier	addr		1905777	1					
ANR	1905845	ExpressionStatement	ifc . ifc_buf = NULL	102:1:2722:2740	1905777	15	True				
ANR	1905846	AssignmentExpression	ifc . ifc_buf = NULL		1905777	0		=			
ANR	1905847	MemberAccess	ifc . ifc_buf		1905777	0					
ANR	1905848	Identifier	ifc		1905777	0					
ANR	1905849	Identifier	ifc_buf		1905777	1					
ANR	1905850	Identifier	NULL		1905777	1					
ANR	1905851	WhileStatement	while ( ! found )		1905777	16					
ANR	1905852	Condition	! found	107:8:2838:2843	1905777	0	True				
ANR	1905853	UnaryOperationExpression	! found		1905777	0					
ANR	1905854	UnaryOperator	!		1905777	0					
ANR	1905855	Identifier	found		1905777	1					
ANR	1905856	CompoundStatement		38:2:1036:1067	1905777	1					
ANR	1905857	IdentifierDeclStatement	int size = num_req * sizeof ( struct ifreq ) ;	108:2:2851:2892	1905777	0	True				
ANR	1905858	IdentifierDecl	size = num_req * sizeof ( struct ifreq )		1905777	0					
ANR	1905859	IdentifierDeclType	int		1905777	0					
ANR	1905860	Identifier	size		1905777	1					
ANR	1905861	AssignmentExpression	size = num_req * sizeof ( struct ifreq )		1905777	2		=			
ANR	1905862	Identifier	size		1905777	0					
ANR	1905863	MultiplicativeExpression	num_req * sizeof ( struct ifreq )		1905777	1		*			
ANR	1905864	Identifier	num_req		1905777	0					
ANR	1905865	SizeofExpression	sizeof ( struct ifreq )		1905777	1					
ANR	1905866	Sizeof	sizeof		1905777	0					
ANR	1905867	SizeofOperand	struct ifreq		1905777	1					
ANR	1905868	ExpressionStatement	"ifc . ifc_buf = ( char * ) calloc ( num_req , sizeof ( struct ifreq ) )"	109:2:2896:2958	1905777	1	True				
ANR	1905869	AssignmentExpression	"ifc . ifc_buf = ( char * ) calloc ( num_req , sizeof ( struct ifreq ) )"		1905777	0		=			
ANR	1905870	MemberAccess	ifc . ifc_buf		1905777	0					
ANR	1905871	Identifier	ifc		1905777	0					
ANR	1905872	Identifier	ifc_buf		1905777	1					
ANR	1905873	CastExpression	"( char * ) calloc ( num_req , sizeof ( struct ifreq ) )"		1905777	1					
ANR	1905874	CastTarget	char *		1905777	0					
ANR	1905875	CallExpression	"calloc ( num_req , sizeof ( struct ifreq ) )"		1905777	1					
ANR	1905876	Callee	calloc		1905777	0					
ANR	1905877	Identifier	calloc		1905777	0					
ANR	1905878	ArgumentList	num_req		1905777	1					
ANR	1905879	Argument	num_req		1905777	0					
ANR	1905880	Identifier	num_req		1905777	0					
ANR	1905881	Argument	sizeof ( struct ifreq )		1905777	1					
ANR	1905882	SizeofExpression	sizeof ( struct ifreq )		1905777	0					
ANR	1905883	Sizeof	sizeof		1905777	0					
ANR	1905884	SizeofOperand	struct ifreq		1905777	1					
ANR	1905885	ExpressionStatement	ifc . ifc_len = size	110:2:2962:2980	1905777	2	True				
ANR	1905886	AssignmentExpression	ifc . ifc_len = size		1905777	0		=			
ANR	1905887	MemberAccess	ifc . ifc_len		1905777	0					
ANR	1905888	Identifier	ifc		1905777	0					
ANR	1905889	Identifier	ifc_len		1905777	1					
ANR	1905890	Identifier	size		1905777	1					
ANR	1905891	IdentifierDeclStatement	"int status = ioctl ( sock , SIOCGIFCONF , & ifc ) ;"	112:2:2985:3030	1905777	3	True				
ANR	1905892	IdentifierDecl	"status = ioctl ( sock , SIOCGIFCONF , & ifc )"		1905777	0					
ANR	1905893	IdentifierDeclType	int		1905777	0					
ANR	1905894	Identifier	status		1905777	1					
ANR	1905895	AssignmentExpression	"status = ioctl ( sock , SIOCGIFCONF , & ifc )"		1905777	2		=			
ANR	1905896	Identifier	status		1905777	0					
ANR	1905897	CallExpression	"ioctl ( sock , SIOCGIFCONF , & ifc )"		1905777	1					
ANR	1905898	Callee	ioctl		1905777	0					
ANR	1905899	Identifier	ioctl		1905777	0					
ANR	1905900	ArgumentList	sock		1905777	1					
ANR	1905901	Argument	sock		1905777	0					
ANR	1905902	Identifier	sock		1905777	0					
ANR	1905903	Argument	SIOCGIFCONF		1905777	1					
ANR	1905904	Identifier	SIOCGIFCONF		1905777	0					
ANR	1905905	Argument	& ifc		1905777	2					
ANR	1905906	UnaryOperationExpression	& ifc		1905777	0					
ANR	1905907	UnaryOperator	&		1905777	0					
ANR	1905908	Identifier	ifc		1905777	1					
ANR	1905909	IfStatement	if ( status < 0 )		1905777	4					
ANR	1905910	Condition	status < 0	113:7:3039:3048	1905777	0	True				
ANR	1905911	RelationalExpression	status < 0		1905777	0		<			
ANR	1905912	Identifier	status		1905777	0					
ANR	1905913	PrimaryExpression	0		1905777	1					
ANR	1905914	CompoundStatement		31:20:898:898	1905777	1					
ANR	1905915	ExpressionStatement	"derror ( ""ioctl(SIOCGIFCONF)"" )"	114:3:3057:3087	1905777	0	True				
ANR	1905916	CallExpression	"derror ( ""ioctl(SIOCGIFCONF)"" )"		1905777	0					
ANR	1905917	Callee	derror		1905777	0					
ANR	1905918	Identifier	derror		1905777	0					
ANR	1905919	ArgumentList	"""ioctl(SIOCGIFCONF)"""		1905777	1					
ANR	1905920	Argument	"""ioctl(SIOCGIFCONF)"""		1905777	0					
ANR	1905921	PrimaryExpression	"""ioctl(SIOCGIFCONF)"""		1905777	0					
ANR	1905922	BreakStatement	break ;	115:3:3092:3097	1905777	1	True				
ANR	1905923	IdentifierDeclStatement	int num = ifc . ifc_len / sizeof ( struct ifreq ) ;	119:2:3138:3186	1905777	5	True				
ANR	1905924	IdentifierDecl	num = ifc . ifc_len / sizeof ( struct ifreq )		1905777	0					
ANR	1905925	IdentifierDeclType	int		1905777	0					
ANR	1905926	Identifier	num		1905777	1					
ANR	1905927	AssignmentExpression	num = ifc . ifc_len / sizeof ( struct ifreq )		1905777	2		=			
ANR	1905928	Identifier	num		1905777	0					
ANR	1905929	MultiplicativeExpression	ifc . ifc_len / sizeof ( struct ifreq )		1905777	1		/			
ANR	1905930	MemberAccess	ifc . ifc_len		1905777	0					
ANR	1905931	Identifier	ifc		1905777	0					
ANR	1905932	Identifier	ifc_len		1905777	1					
ANR	1905933	SizeofExpression	sizeof ( struct ifreq )		1905777	1					
ANR	1905934	Sizeof	sizeof		1905777	0					
ANR	1905935	SizeofOperand	struct ifreq		1905777	1					
ANR	1905936	IdentifierDeclStatement	struct ifreq * ifr = ifc . ifc_req ;	120:2:3190:3221	1905777	6	True				
ANR	1905937	IdentifierDecl	* ifr = ifc . ifc_req		1905777	0					
ANR	1905938	IdentifierDeclType	struct ifreq *		1905777	0					
ANR	1905939	Identifier	ifr		1905777	1					
ANR	1905940	AssignmentExpression	* ifr = ifc . ifc_req		1905777	2		=			
ANR	1905941	Identifier	ifr		1905777	0					
ANR	1905942	MemberAccess	ifc . ifc_req		1905777	1					
ANR	1905943	Identifier	ifc		1905777	0					
ANR	1905944	Identifier	ifc_req		1905777	1					
ANR	1905945	ForStatement	"for ( int i = 0 ; i < num ; i ++ , ifr ++ )"		1905777	7					
ANR	1905946	ForInit	int i = 0 ;	121:8:3231:3240	1905777	0	True				
ANR	1905947	IdentifierDeclStatement	int i = 0 ;		1905777	0					
ANR	1905948	IdentifierDecl	i = 0		1905777	0					
ANR	1905949	IdentifierDeclType	int		1905777	0					
ANR	1905950	Identifier	i		1905777	1					
ANR	1905951	AssignmentExpression	i = 0		1905777	2		=			
ANR	1905952	Identifier	i		1905777	0					
ANR	1905953	PrimaryExpression	0		1905777	1					
ANR	1905954	Condition	i < num	121:20:3243:3249	1905777	1	True				
ANR	1905955	RelationalExpression	i < num		1905777	0		<			
ANR	1905956	Identifier	i		1905777	0					
ANR	1905957	Identifier	num		1905777	1					
ANR	1905958	Expression	"i ++ , ifr ++"	121:30:3253:3262	1905777	2	True				
ANR	1905959	PostIncDecOperationExpression	i ++		1905777	0					
ANR	1905960	Identifier	i		1905777	0					
ANR	1905961	IncDec	++		1905777	1					
ANR	1905962	PostIncDecOperationExpression	ifr ++		1905777	1					
ANR	1905963	Identifier	ifr		1905777	0					
ANR	1905964	IncDec	++		1905777	1					
ANR	1905965	CompoundStatement		41:3:1186:1220	1905777	3					
ANR	1905966	IdentifierDeclStatement	condor_sockaddr in ( & ifr -> ifr_addr ) ;	123:3:3340:3374	1905777	0	True				
ANR	1905967	IdentifierDecl	in ( & ifr -> ifr_addr )		1905777	0					
ANR	1905968	IdentifierDeclType	condor_sockaddr		1905777	0					
ANR	1905969	Identifier	in		1905777	1					
ANR	1905970	UnaryOperationExpression	& ifr -> ifr_addr		1905777	2					
ANR	1905971	UnaryOperator	&		1905777	0					
ANR	1905972	PtrMemberAccess	ifr -> ifr_addr		1905777	1					
ANR	1905973	Identifier	ifr		1905777	0					
ANR	1905974	Identifier	ifr_addr		1905777	1					
ANR	1905975	ExpressionStatement	addr = in	125:3:3437:3446	1905777	1	True				
ANR	1905976	AssignmentExpression	addr = in		1905777	0		=			
ANR	1905977	Identifier	addr		1905777	0					
ANR	1905978	Identifier	in		1905777	1					
ANR	1905979	IfStatement	if ( in . compare_address ( ip_addr ) )		1905777	2					
ANR	1905980	Condition	in . compare_address ( ip_addr )	128:8:3502:3528	1905777	0	True				
ANR	1905981	CallExpression	in . compare_address ( ip_addr )		1905777	0					
ANR	1905982	Callee	in . compare_address		1905777	0					
ANR	1905983	MemberAccess	in . compare_address		1905777	0					
ANR	1905984	Identifier	in		1905777	0					
ANR	1905985	Identifier	compare_address		1905777	1					
ANR	1905986	ArgumentList	ip_addr		1905777	1					
ANR	1905987	Argument	ip_addr		1905777	0					
ANR	1905988	Identifier	ip_addr		1905777	0					
ANR	1905989	CompoundStatement		46:38:1378:1378	1905777	1					
ANR	1905990	ExpressionStatement	setIpAddr ( * ifr )	129:4:3538:3555	1905777	0	True				
ANR	1905991	CallExpression	setIpAddr ( * ifr )		1905777	0					
ANR	1905992	Callee	setIpAddr		1905777	0					
ANR	1905993	Identifier	setIpAddr		1905777	0					
ANR	1905994	ArgumentList	* ifr		1905777	1					
ANR	1905995	Argument	* ifr		1905777	0					
ANR	1905996	UnaryOperationExpression	* ifr		1905777	0					
ANR	1905997	UnaryOperator	*		1905777	0					
ANR	1905998	Identifier	ifr		1905777	1					
ANR	1905999	ExpressionStatement	setName ( * ifr )	130:4:3561:3576	1905777	1	True				
ANR	1906000	CallExpression	setName ( * ifr )		1905777	0					
ANR	1906001	Callee	setName		1905777	0					
ANR	1906002	Identifier	setName		1905777	0					
ANR	1906003	ArgumentList	* ifr		1905777	1					
ANR	1906004	Argument	* ifr		1905777	0					
ANR	1906005	UnaryOperationExpression	* ifr		1905777	0					
ANR	1906006	UnaryOperator	*		1905777	0					
ANR	1906007	Identifier	ifr		1905777	1					
ANR	1906008	ExpressionStatement	found = true	131:4:3582:3594	1905777	2	True				
ANR	1906009	AssignmentExpression	found = true		1905777	0		=			
ANR	1906010	Identifier	found		1905777	0					
ANR	1906011	Identifier	true		1905777	1					
ANR	1906012	BreakStatement	break ;	132:4:3600:3605	1905777	3	True				
ANR	1906013	IfStatement	if ( ( ! found ) && ( ifc . ifc_len == size ) )		1905777	8					
ANR	1906014	Condition	( ! found ) && ( ifc . ifc_len == size )	138:7:3746:3778	1905777	0	True				
ANR	1906015	AndExpression	( ! found ) && ( ifc . ifc_len == size )		1905777	0		&&			
ANR	1906016	UnaryOperationExpression	! found		1905777	0					
ANR	1906017	UnaryOperator	!		1905777	0					
ANR	1906018	Identifier	found		1905777	1					
ANR	1906019	EqualityExpression	ifc . ifc_len == size		1905777	1		==			
ANR	1906020	MemberAccess	ifc . ifc_len		1905777	0					
ANR	1906021	Identifier	ifc		1905777	0					
ANR	1906022	Identifier	ifc_len		1905777	1					
ANR	1906023	Identifier	size		1905777	1					
ANR	1906024	CompoundStatement		56:43:1628:1628	1905777	1					
ANR	1906025	ExpressionStatement	num_req += 2	139:3:3787:3799	1905777	0	True				
ANR	1906026	AssignmentExpression	num_req += 2		1905777	0		+=			
ANR	1906027	Identifier	num_req		1905777	0					
ANR	1906028	PrimaryExpression	2		1905777	1					
ANR	1906029	ExpressionStatement	free ( ifc . ifc_buf )	140:3:3804:3823	1905777	1	True				
ANR	1906030	CallExpression	free ( ifc . ifc_buf )		1905777	0					
ANR	1906031	Callee	free		1905777	0					
ANR	1906032	Identifier	free		1905777	0					
ANR	1906033	ArgumentList	ifc . ifc_buf		1905777	1					
ANR	1906034	Argument	ifc . ifc_buf		1905777	0					
ANR	1906035	MemberAccess	ifc . ifc_buf		1905777	0					
ANR	1906036	Identifier	ifc		1905777	0					
ANR	1906037	Identifier	ifc_buf		1905777	1					
ANR	1906038	ExpressionStatement	ifc . ifc_buf = NULL	141:3:3828:3846	1905777	2	True				
ANR	1906039	AssignmentExpression	ifc . ifc_buf = NULL		1905777	0		=			
ANR	1906040	MemberAccess	ifc . ifc_buf		1905777	0					
ANR	1906041	Identifier	ifc		1905777	0					
ANR	1906042	Identifier	ifc_buf		1905777	1					
ANR	1906043	Identifier	NULL		1905777	1					
ANR	1906044	ElseStatement	else		1905777	0					
ANR	1906045	CompoundStatement		61:7:1705:1705	1905777	0					
ANR	1906046	BreakStatement	break ;	144:3:3864:3869	1905777	0	True				
ANR	1906047	IfStatement	if ( ifc . ifc_buf )		1905777	17					
ANR	1906048	Condition	ifc . ifc_buf	149:6:3928:3938	1905777	0	True				
ANR	1906049	MemberAccess	ifc . ifc_buf		1905777	0					
ANR	1906050	Identifier	ifc		1905777	0					
ANR	1906051	Identifier	ifc_buf		1905777	1					
ANR	1906052	CompoundStatement		67:20:1788:1788	1905777	1					
ANR	1906053	ExpressionStatement	free ( ifc . ifc_buf )	150:2:3946:3965	1905777	0	True				
ANR	1906054	CallExpression	free ( ifc . ifc_buf )		1905777	0					
ANR	1906055	Callee	free		1905777	0					
ANR	1906056	Identifier	free		1905777	0					
ANR	1906057	ArgumentList	ifc . ifc_buf		1905777	1					
ANR	1906058	Argument	ifc . ifc_buf		1905777	0					
ANR	1906059	MemberAccess	ifc . ifc_buf		1905777	0					
ANR	1906060	Identifier	ifc		1905777	0					
ANR	1906061	Identifier	ifc_buf		1905777	1					
ANR	1906062	IfStatement	if ( found )		1905777	18					
ANR	1906063	Condition	found	153:6:3977:3981	1905777	0	True				
ANR	1906064	Identifier	found		1905777	0					
ANR	1906065	CompoundStatement		71:14:1831:1831	1905777	1					
ANR	1906066	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Found interface %s that matches %s\\n"" , interfaceName ( ) , addr . to_sinful ( ) . Value ( ) )"	154:2:3989:4115	1905777	0	True				
ANR	1906067	CallExpression	"dprintf ( D_FULLDEBUG , ""Found interface %s that matches %s\\n"" , interfaceName ( ) , addr . to_sinful ( ) . Value ( ) )"		1905777	0					
ANR	1906068	Callee	dprintf		1905777	0					
ANR	1906069	Identifier	dprintf		1905777	0					
ANR	1906070	ArgumentList	D_FULLDEBUG		1905777	1					
ANR	1906071	Argument	D_FULLDEBUG		1905777	0					
ANR	1906072	Identifier	D_FULLDEBUG		1905777	0					
ANR	1906073	Argument	"""Found interface %s that matches %s\\n"""		1905777	1					
ANR	1906074	PrimaryExpression	"""Found interface %s that matches %s\\n"""		1905777	0					
ANR	1906075	Argument	interfaceName ( )		1905777	2					
ANR	1906076	CallExpression	interfaceName ( )		1905777	0					
ANR	1906077	Callee	interfaceName		1905777	0					
ANR	1906078	Identifier	interfaceName		1905777	0					
ANR	1906079	ArgumentList			1905777	1					
ANR	1906080	Argument	addr . to_sinful ( ) . Value ( )		1905777	3					
ANR	1906081	CallExpression	addr . to_sinful ( ) . Value ( )		1905777	0					
ANR	1906082	Callee	addr . to_sinful ( ) . Value		1905777	0					
ANR	1906083	MemberAccess	addr . to_sinful ( ) . Value		1905777	0					
ANR	1906084	CallExpression	addr . to_sinful ( )		1905777	0					
ANR	1906085	Callee	addr . to_sinful		1905777	0					
ANR	1906086	MemberAccess	addr . to_sinful		1905777	0					
ANR	1906087	Identifier	addr		1905777	0					
ANR	1906088	Identifier	to_sinful		1905777	1					
ANR	1906089	ArgumentList			1905777	1					
ANR	1906090	Identifier	Value		1905777	1					
ANR	1906091	ArgumentList			1905777	1					
ANR	1906092	ElseStatement	else		1905777	0					
ANR	1906093	CompoundStatement		79:1:1973:1973	1905777	0					
ANR	1906094	ExpressionStatement	m_if_name = NULL	162:2:4131:4147	1905777	0	True				
ANR	1906095	AssignmentExpression	m_if_name = NULL		1905777	0		=			
ANR	1906096	Identifier	m_if_name		1905777	0					
ANR	1906097	Identifier	NULL		1905777	1					
ANR	1906098	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""No interface for address %s\\n"" , addr . to_sinful ( ) . Value ( ) )"	163:2:4151:4247	1905777	1	True				
ANR	1906099	CallExpression	"dprintf ( D_FULLDEBUG , ""No interface for address %s\\n"" , addr . to_sinful ( ) . Value ( ) )"		1905777	0					
ANR	1906100	Callee	dprintf		1905777	0					
ANR	1906101	Identifier	dprintf		1905777	0					
ANR	1906102	ArgumentList	D_FULLDEBUG		1905777	1					
ANR	1906103	Argument	D_FULLDEBUG		1905777	0					
ANR	1906104	Identifier	D_FULLDEBUG		1905777	0					
ANR	1906105	Argument	"""No interface for address %s\\n"""		1905777	1					
ANR	1906106	PrimaryExpression	"""No interface for address %s\\n"""		1905777	0					
ANR	1906107	Argument	addr . to_sinful ( ) . Value ( )		1905777	2					
ANR	1906108	CallExpression	addr . to_sinful ( ) . Value ( )		1905777	0					
ANR	1906109	Callee	addr . to_sinful ( ) . Value		1905777	0					
ANR	1906110	MemberAccess	addr . to_sinful ( ) . Value		1905777	0					
ANR	1906111	CallExpression	addr . to_sinful ( )		1905777	0					
ANR	1906112	Callee	addr . to_sinful		1905777	0					
ANR	1906113	MemberAccess	addr . to_sinful		1905777	0					
ANR	1906114	Identifier	addr		1905777	0					
ANR	1906115	Identifier	to_sinful		1905777	1					
ANR	1906116	ArgumentList			1905777	1					
ANR	1906117	Identifier	Value		1905777	1					
ANR	1906118	ArgumentList			1905777	1					
ANR	1906119	ExpressionStatement	close ( sock )	170:1:4292:4305	1905777	19	True				
ANR	1906120	CallExpression	close ( sock )		1905777	0					
ANR	1906121	Callee	close		1905777	0					
ANR	1906122	Identifier	close		1905777	0					
ANR	1906123	ArgumentList	sock		1905777	1					
ANR	1906124	Argument	sock		1905777	0					
ANR	1906125	Identifier	sock		1905777	0					
ANR	1906126	ReturnStatement	return found ;	173:1:4316:4328	1905777	20	True				
ANR	1906127	Identifier	found		1905777	0					
ANR	1906128	ReturnType	bool		1905777	1					
ANR	1906129	Identifier	LinuxNetworkAdapter :: findAdapter		1905777	2					
ANR	1906130	ParameterList	const condor_sockaddr & ip_addr		1905777	3					
ANR	1906131	Parameter	const condor_sockaddr & ip_addr	82:34:2120:2149	1905777	0	True				
ANR	1906132	ParameterType	const condor_sockaddr &		1905777	0					
ANR	1906133	Identifier	ip_addr		1905777	1					
ANR	1906134	CFGEntryNode	ENTRY		1905777		True				
ANR	1906135	CFGExitNode	EXIT		1905777		True				
ANR	1906136	Symbol	addr . to_sinful ( ) . Value		1905777						
ANR	1906137	Symbol	m_if_name		1905777						
ANR	1906138	Symbol	num		1905777						
ANR	1906139	Symbol	calloc		1905777						
ANR	1906140	Symbol	& ifc		1905777						
ANR	1906141	Symbol	ioctl		1905777						
ANR	1906142	Symbol	found		1905777						
ANR	1906143	Symbol	SIOCGIFCONF		1905777						
ANR	1906144	Symbol	interfaceName		1905777						
ANR	1906145	Symbol	addr		1905777						
ANR	1906146	Symbol	ifc . ifc_buf		1905777						
ANR	1906147	Symbol	HAVE_STRUCT_IFCONF		1905777						
ANR	1906148	Symbol	* ifr		1905777						
ANR	1906149	Symbol	ifc . ifc_len		1905777						
ANR	1906150	Symbol	NULL		1905777						
ANR	1906151	Symbol	num_req		1905777						
ANR	1906152	Symbol	in		1905777						
ANR	1906153	Symbol	ifc		1905777						
ANR	1906154	Symbol	false		1905777						
ANR	1906155	Symbol	i		1905777						
ANR	1906156	Symbol	D_FULLDEBUG		1905777						
ANR	1906157	Symbol	AF_INET		1905777						
ANR	1906158	Symbol	ifc . ifc_req		1905777						
ANR	1906159	Symbol	SOCK_DGRAM		1905777						
ANR	1906160	Symbol	sock		1905777						
ANR	1906161	Symbol	in . compare_address		1905777						
ANR	1906162	Symbol	size		1905777						
ANR	1906163	Symbol	ifr		1905777						
ANR	1906164	Symbol	addr . to_sinful		1905777						
ANR	1906165	Symbol	true		1905777						
ANR	1906166	Symbol	socket		1905777						
ANR	1906167	Symbol	ip_addr		1905777						
ANR	1906168	Symbol	status		1905777						
ANR	1906169	Function	LinuxNetworkAdapter :: findAdapter	177:0:4334:5308							
ANR	1906170	FunctionDef	LinuxNetworkAdapter :: findAdapter (const char * name)		1906169	0					
ANR	1906171	CompoundStatement		179:0:4392:5308	1906169	0					
ANR	1906172	IdentifierDeclStatement	bool found = false ;	180:1:4395:4415	1906169	0	True				
ANR	1906173	IdentifierDecl	found = false		1906169	0					
ANR	1906174	IdentifierDeclType	bool		1906169	0					
ANR	1906175	Identifier	found		1906169	1					
ANR	1906176	AssignmentExpression	found = false		1906169	2		=			
ANR	1906177	Identifier	false		1906169	0					
ANR	1906178	Identifier	false		1906169	1					
ANR	1906179	IfStatement	if ( HAVE_STRUCT_IFCONF )		1906169	1					
ANR	1906180	Condition	HAVE_STRUCT_IFCONF	181:6:4423:4440	1906169	0	True				
ANR	1906181	Identifier	HAVE_STRUCT_IFCONF		1906169	0					
ANR	1906182	Statement	&&	181:26:4443:4444	1906169	1	True				
ANR	1906183	Statement	(	181:29:4446:4446	1906169	2	True				
ANR	1906184	Statement	HAVE_STRUCT_IFREQ	181:30:4447:4463	1906169	3	True				
ANR	1906185	Statement	)	181:47:4464:4464	1906169	4	True				
ANR	1906186	Statement	&&	181:49:4466:4467	1906169	5	True				
ANR	1906187	Statement	(	181:52:4469:4469	1906169	6	True				
ANR	1906188	Statement	HAVE_DECL_SIOCGIFCONF	181:53:4470:4490	1906169	7	True				
ANR	1906189	Statement	)	181:74:4491:4491	1906169	8	True				
ANR	1906190	IdentifierDeclStatement	struct ifreq ifr ;	182:1:4494:4510	1906169	9	True				
ANR	1906191	IdentifierDecl	ifr		1906169	0					
ANR	1906192	IdentifierDeclType	struct ifreq		1906169	0					
ANR	1906193	Identifier	ifr		1906169	1					
ANR	1906194	IdentifierDeclStatement	int sock ;	183:1:4513:4524	1906169	10	True				
ANR	1906195	IdentifierDecl	sock		1906169	0					
ANR	1906196	IdentifierDeclType	int		1906169	0					
ANR	1906197	Identifier	sock		1906169	1					
ANR	1906198	ExpressionStatement	"sock = socket ( AF_INET , SOCK_DGRAM , 0 )"	186:1:4574:4611	1906169	11	True				
ANR	1906199	AssignmentExpression	"sock = socket ( AF_INET , SOCK_DGRAM , 0 )"		1906169	0		=			
ANR	1906200	Identifier	sock		1906169	0					
ANR	1906201	CallExpression	"socket ( AF_INET , SOCK_DGRAM , 0 )"		1906169	1					
ANR	1906202	Callee	socket		1906169	0					
ANR	1906203	Identifier	socket		1906169	0					
ANR	1906204	ArgumentList	AF_INET		1906169	1					
ANR	1906205	Argument	AF_INET		1906169	0					
ANR	1906206	Identifier	AF_INET		1906169	0					
ANR	1906207	Argument	SOCK_DGRAM		1906169	1					
ANR	1906208	Identifier	SOCK_DGRAM		1906169	0					
ANR	1906209	Argument	0		1906169	2					
ANR	1906210	PrimaryExpression	0		1906169	0					
ANR	1906211	IfStatement	if ( sock < 0 )		1906169	12					
ANR	1906212	Condition	sock < 0	187:5:4618:4625	1906169	0	True				
ANR	1906213	RelationalExpression	sock < 0		1906169	0		<			
ANR	1906214	Identifier	sock		1906169	0					
ANR	1906215	PrimaryExpression	0		1906169	1					
ANR	1906216	CompoundStatement		9:15:235:235	1906169	1					
ANR	1906217	ExpressionStatement	"derror ( ""Cannot get control socket for WOL detection"" )"	188:2:4632:4687	1906169	0	True				
ANR	1906218	CallExpression	"derror ( ""Cannot get control socket for WOL detection"" )"		1906169	0					
ANR	1906219	Callee	derror		1906169	0					
ANR	1906220	Identifier	derror		1906169	0					
ANR	1906221	ArgumentList	"""Cannot get control socket for WOL detection"""		1906169	1					
ANR	1906222	Argument	"""Cannot get control socket for WOL detection"""		1906169	0					
ANR	1906223	PrimaryExpression	"""Cannot get control socket for WOL detection"""		1906169	0					
ANR	1906224	ReturnStatement	return false ;	189:2:4691:4703	1906169	1	True				
ANR	1906225	Identifier	false		1906169	0					
ANR	1906226	ExpressionStatement	"getName ( ifr , name )"	194:1:4819:4839	1906169	13	True				
ANR	1906227	CallExpression	"getName ( ifr , name )"		1906169	0					
ANR	1906228	Callee	getName		1906169	0					
ANR	1906229	Identifier	getName		1906169	0					
ANR	1906230	ArgumentList	ifr		1906169	1					
ANR	1906231	Argument	ifr		1906169	0					
ANR	1906232	Identifier	ifr		1906169	0					
ANR	1906233	Argument	name		1906169	1					
ANR	1906234	Identifier	name		1906169	0					
ANR	1906235	IdentifierDeclStatement	"int status = ioctl ( sock , SIOCGIFADDR , & ifr ) ;"	195:1:4842:4887	1906169	14	True				
ANR	1906236	IdentifierDecl	"status = ioctl ( sock , SIOCGIFADDR , & ifr )"		1906169	0					
ANR	1906237	IdentifierDeclType	int		1906169	0					
ANR	1906238	Identifier	status		1906169	1					
ANR	1906239	AssignmentExpression	"status = ioctl ( sock , SIOCGIFADDR , & ifr )"		1906169	2		=			
ANR	1906240	Identifier	status		1906169	0					
ANR	1906241	CallExpression	"ioctl ( sock , SIOCGIFADDR , & ifr )"		1906169	1					
ANR	1906242	Callee	ioctl		1906169	0					
ANR	1906243	Identifier	ioctl		1906169	0					
ANR	1906244	ArgumentList	sock		1906169	1					
ANR	1906245	Argument	sock		1906169	0					
ANR	1906246	Identifier	sock		1906169	0					
ANR	1906247	Argument	SIOCGIFADDR		1906169	1					
ANR	1906248	Identifier	SIOCGIFADDR		1906169	0					
ANR	1906249	Argument	& ifr		1906169	2					
ANR	1906250	UnaryOperationExpression	& ifr		1906169	0					
ANR	1906251	UnaryOperator	&		1906169	0					
ANR	1906252	Identifier	ifr		1906169	1					
ANR	1906253	IfStatement	if ( status < 0 )		1906169	15					
ANR	1906254	Condition	status < 0	196:6:4895:4904	1906169	0	True				
ANR	1906255	RelationalExpression	status < 0		1906169	0		<			
ANR	1906256	Identifier	status		1906169	0					
ANR	1906257	PrimaryExpression	0		1906169	1					
ANR	1906258	CompoundStatement		18:19:515:515	1906169	1					
ANR	1906259	ExpressionStatement	"derror ( ""ioctl(SIOCGIFADDR)"" )"	197:2:4912:4942	1906169	0	True				
ANR	1906260	CallExpression	"derror ( ""ioctl(SIOCGIFADDR)"" )"		1906169	0					
ANR	1906261	Callee	derror		1906169	0					
ANR	1906262	Identifier	derror		1906169	0					
ANR	1906263	ArgumentList	"""ioctl(SIOCGIFADDR)"""		1906169	1					
ANR	1906264	Argument	"""ioctl(SIOCGIFADDR)"""		1906169	0					
ANR	1906265	PrimaryExpression	"""ioctl(SIOCGIFADDR)"""		1906169	0					
ANR	1906266	ElseStatement	else		1906169	0					
ANR	1906267	CompoundStatement		21:6:560:560	1906169	0					
ANR	1906268	ExpressionStatement	found = true	200:2:4957:4969	1906169	0	True				
ANR	1906269	AssignmentExpression	found = true		1906169	0		=			
ANR	1906270	Identifier	found		1906169	0					
ANR	1906271	Identifier	true		1906169	1					
ANR	1906272	ExpressionStatement	setIpAddr ( ifr )	201:2:4973:4989	1906169	1	True				
ANR	1906273	CallExpression	setIpAddr ( ifr )		1906169	0					
ANR	1906274	Callee	setIpAddr		1906169	0					
ANR	1906275	Identifier	setIpAddr		1906169	0					
ANR	1906276	ArgumentList	ifr		1906169	1					
ANR	1906277	Argument	ifr		1906169	0					
ANR	1906278	Identifier	ifr		1906169	0					
ANR	1906279	IfStatement	if ( found )		1906169	16					
ANR	1906280	Condition	found	204:6:5001:5005	1906169	0	True				
ANR	1906281	Identifier	found		1906169	0					
ANR	1906282	CompoundStatement		26:14:616:616	1906169	1					
ANR	1906283	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Found interface %s with ip %s\\n"" , name , m_ip_addr . to_ip_string ( ) . Value ( ) )"	205:2:5013:5130	1906169	0	True				
ANR	1906284	CallExpression	"dprintf ( D_FULLDEBUG , ""Found interface %s with ip %s\\n"" , name , m_ip_addr . to_ip_string ( ) . Value ( ) )"		1906169	0					
ANR	1906285	Callee	dprintf		1906169	0					
ANR	1906286	Identifier	dprintf		1906169	0					
ANR	1906287	ArgumentList	D_FULLDEBUG		1906169	1					
ANR	1906288	Argument	D_FULLDEBUG		1906169	0					
ANR	1906289	Identifier	D_FULLDEBUG		1906169	0					
ANR	1906290	Argument	"""Found interface %s with ip %s\\n"""		1906169	1					
ANR	1906291	PrimaryExpression	"""Found interface %s with ip %s\\n"""		1906169	0					
ANR	1906292	Argument	name		1906169	2					
ANR	1906293	Identifier	name		1906169	0					
ANR	1906294	Argument	m_ip_addr . to_ip_string ( ) . Value ( )		1906169	3					
ANR	1906295	CallExpression	m_ip_addr . to_ip_string ( ) . Value ( )		1906169	0					
ANR	1906296	Callee	m_ip_addr . to_ip_string ( ) . Value		1906169	0					
ANR	1906297	MemberAccess	m_ip_addr . to_ip_string ( ) . Value		1906169	0					
ANR	1906298	CallExpression	m_ip_addr . to_ip_string ( )		1906169	0					
ANR	1906299	Callee	m_ip_addr . to_ip_string		1906169	0					
ANR	1906300	MemberAccess	m_ip_addr . to_ip_string		1906169	0					
ANR	1906301	Identifier	m_ip_addr		1906169	0					
ANR	1906302	Identifier	to_ip_string		1906169	1					
ANR	1906303	ArgumentList			1906169	1					
ANR	1906304	Identifier	Value		1906169	1					
ANR	1906305	ArgumentList			1906169	1					
ANR	1906306	ElseStatement	else		1906169	0					
ANR	1906307	CompoundStatement		34:1:749:749	1906169	0					
ANR	1906308	ExpressionStatement	m_if_name = NULL	213:2:5146:5162	1906169	0	True				
ANR	1906309	AssignmentExpression	m_if_name = NULL		1906169	0		=			
ANR	1906310	Identifier	m_if_name		1906169	0					
ANR	1906311	Identifier	NULL		1906169	1					
ANR	1906312	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""No interface for name %s\\n"" , name )"	214:2:5166:5224	1906169	1	True				
ANR	1906313	CallExpression	"dprintf ( D_FULLDEBUG , ""No interface for name %s\\n"" , name )"		1906169	0					
ANR	1906314	Callee	dprintf		1906169	0					
ANR	1906315	Identifier	dprintf		1906169	0					
ANR	1906316	ArgumentList	D_FULLDEBUG		1906169	1					
ANR	1906317	Argument	D_FULLDEBUG		1906169	0					
ANR	1906318	Identifier	D_FULLDEBUG		1906169	0					
ANR	1906319	Argument	"""No interface for name %s\\n"""		1906169	1					
ANR	1906320	PrimaryExpression	"""No interface for name %s\\n"""		1906169	0					
ANR	1906321	Argument	name		1906169	2					
ANR	1906322	Identifier	name		1906169	0					
ANR	1906323	ExpressionStatement	close ( sock )	218:1:5269:5282	1906169	17	True				
ANR	1906324	CallExpression	close ( sock )		1906169	0					
ANR	1906325	Callee	close		1906169	0					
ANR	1906326	Identifier	close		1906169	0					
ANR	1906327	ArgumentList	sock		1906169	1					
ANR	1906328	Argument	sock		1906169	0					
ANR	1906329	Identifier	sock		1906169	0					
ANR	1906330	ReturnStatement	return found ;	221:1:5293:5305	1906169	18	True				
ANR	1906331	Identifier	found		1906169	0					
ANR	1906332	ReturnType	bool		1906169	1					
ANR	1906333	Identifier	LinuxNetworkAdapter :: findAdapter		1906169	2					
ANR	1906334	ParameterList	const char * name		1906169	3					
ANR	1906335	Parameter	const char * name	178:34:4373:4388	1906169	0	True				
ANR	1906336	ParameterType	const char *		1906169	0					
ANR	1906337	Identifier	name		1906169	1					
ANR	1906338	CFGEntryNode	ENTRY		1906169		True				
ANR	1906339	CFGExitNode	EXIT		1906169		True				
ANR	1906340	Symbol	SIOCGIFADDR		1906169						
ANR	1906341	Symbol	NULL		1906169						
ANR	1906342	Symbol	m_if_name		1906169						
ANR	1906343	Symbol	false		1906169						
ANR	1906344	Symbol	D_FULLDEBUG		1906169						
ANR	1906345	Symbol	AF_INET		1906169						
ANR	1906346	Symbol	SOCK_DGRAM		1906169						
ANR	1906347	Symbol	m_ip_addr . to_ip_string		1906169						
ANR	1906348	Symbol	ioctl		1906169						
ANR	1906349	Symbol	sock		1906169						
ANR	1906350	Symbol	found		1906169						
ANR	1906351	Symbol	ifr		1906169						
ANR	1906352	Symbol	m_ip_addr . to_ip_string ( ) . Value		1906169						
ANR	1906353	Symbol	name		1906169						
ANR	1906354	Symbol	true		1906169						
ANR	1906355	Symbol	socket		1906169						
ANR	1906356	Symbol	& ifr		1906169						
ANR	1906357	Symbol	HAVE_STRUCT_IFCONF		1906169						
ANR	1906358	Symbol	status		1906169						
ANR	1906359	Symbol	m_ip_addr		1906169						
ANR	1906360	Function	LinuxNetworkAdapter :: getAdapterInfo	225:0:5311:6127							
ANR	1906361	FunctionDef	LinuxNetworkAdapter :: getAdapterInfo ()		1906360	0					
ANR	1906362	CompoundStatement		227:0:5360:6127	1906360	0					
ANR	1906363	IdentifierDeclStatement	bool ok = true ;	228:1:5363:5379	1906360	0	True				
ANR	1906364	IdentifierDecl	ok = true		1906360	0					
ANR	1906365	IdentifierDeclType	bool		1906360	0					
ANR	1906366	Identifier	ok		1906360	1					
ANR	1906367	AssignmentExpression	ok = true		1906360	2		=			
ANR	1906368	Identifier	true		1906360	0					
ANR	1906369	Identifier	true		1906360	1					
ANR	1906370	IfStatement	if ( HAVE_STRUCT_IFCONF )		1906360	1					
ANR	1906371	Condition	HAVE_STRUCT_IFCONF	229:6:5387:5404	1906360	0	True				
ANR	1906372	Identifier	HAVE_STRUCT_IFCONF		1906360	0					
ANR	1906373	Statement	&&	229:26:5407:5408	1906360	1	True				
ANR	1906374	Statement	(	229:29:5410:5410	1906360	2	True				
ANR	1906375	Statement	HAVE_STRUCT_IFREQ	229:30:5411:5427	1906360	3	True				
ANR	1906376	Statement	)	229:47:5428:5428	1906360	4	True				
ANR	1906377	Statement	&&	229:49:5430:5431	1906360	5	True				
ANR	1906378	Statement	(	229:52:5433:5433	1906360	6	True				
ANR	1906379	Statement	HAVE_DECL_SIOCGIFCONF	229:53:5434:5454	1906360	7	True				
ANR	1906380	Statement	)	229:74:5455:5455	1906360	8	True				
ANR	1906381	IdentifierDeclStatement	struct ifreq ifr ;	230:1:5458:5474	1906360	9	True				
ANR	1906382	IdentifierDecl	ifr		1906360	0					
ANR	1906383	IdentifierDeclType	struct ifreq		1906360	0					
ANR	1906384	Identifier	ifr		1906360	1					
ANR	1906385	IdentifierDeclStatement	int sock ;	231:1:5477:5488	1906360	10	True				
ANR	1906386	IdentifierDecl	sock		1906360	0					
ANR	1906387	IdentifierDeclType	int		1906360	0					
ANR	1906388	Identifier	sock		1906360	1					
ANR	1906389	IdentifierDeclStatement	int status ;	232:1:5491:5504	1906360	11	True				
ANR	1906390	IdentifierDecl	status		1906360	0					
ANR	1906391	IdentifierDeclType	int		1906360	0					
ANR	1906392	Identifier	status		1906360	1					
ANR	1906393	ExpressionStatement	"sock = socket ( AF_INET , SOCK_DGRAM , 0 )"	235:1:5554:5591	1906360	12	True				
ANR	1906394	AssignmentExpression	"sock = socket ( AF_INET , SOCK_DGRAM , 0 )"		1906360	0		=			
ANR	1906395	Identifier	sock		1906360	0					
ANR	1906396	CallExpression	"socket ( AF_INET , SOCK_DGRAM , 0 )"		1906360	1					
ANR	1906397	Callee	socket		1906360	0					
ANR	1906398	Identifier	socket		1906360	0					
ANR	1906399	ArgumentList	AF_INET		1906360	1					
ANR	1906400	Argument	AF_INET		1906360	0					
ANR	1906401	Identifier	AF_INET		1906360	0					
ANR	1906402	Argument	SOCK_DGRAM		1906360	1					
ANR	1906403	Identifier	SOCK_DGRAM		1906360	0					
ANR	1906404	Argument	0		1906360	2					
ANR	1906405	PrimaryExpression	0		1906360	0					
ANR	1906406	IfStatement	if ( sock < 0 )		1906360	13					
ANR	1906407	Condition	sock < 0	236:5:5598:5605	1906360	0	True				
ANR	1906408	RelationalExpression	sock < 0		1906360	0		<			
ANR	1906409	Identifier	sock		1906360	0					
ANR	1906410	PrimaryExpression	0		1906360	1					
ANR	1906411	CompoundStatement		10:15:247:247	1906360	1					
ANR	1906412	ExpressionStatement	"derror ( ""Cannot get control socket for WOL detection"" )"	237:2:5612:5667	1906360	0	True				
ANR	1906413	CallExpression	"derror ( ""Cannot get control socket for WOL detection"" )"		1906360	0					
ANR	1906414	Callee	derror		1906360	0					
ANR	1906415	Identifier	derror		1906360	0					
ANR	1906416	ArgumentList	"""Cannot get control socket for WOL detection"""		1906360	1					
ANR	1906417	Argument	"""Cannot get control socket for WOL detection"""		1906360	0					
ANR	1906418	PrimaryExpression	"""Cannot get control socket for WOL detection"""		1906360	0					
ANR	1906419	ReturnStatement	return false ;	238:2:5671:5683	1906360	1	True				
ANR	1906420	Identifier	false		1906360	0					
ANR	1906421	ExpressionStatement	getName ( ifr )	242:1:5719:5733	1906360	14	True				
ANR	1906422	CallExpression	getName ( ifr )		1906360	0					
ANR	1906423	Callee	getName		1906360	0					
ANR	1906424	Identifier	getName		1906360	0					
ANR	1906425	ArgumentList	ifr		1906360	1					
ANR	1906426	Argument	ifr		1906360	0					
ANR	1906427	Identifier	ifr		1906360	0					
ANR	1906428	ExpressionStatement	"status = ioctl ( sock , SIOCGIFHWADDR , & ifr )"	243:1:5736:5779	1906360	15	True				
ANR	1906429	AssignmentExpression	"status = ioctl ( sock , SIOCGIFHWADDR , & ifr )"		1906360	0		=			
ANR	1906430	Identifier	status		1906360	0					
ANR	1906431	CallExpression	"ioctl ( sock , SIOCGIFHWADDR , & ifr )"		1906360	1					
ANR	1906432	Callee	ioctl		1906360	0					
ANR	1906433	Identifier	ioctl		1906360	0					
ANR	1906434	ArgumentList	sock		1906360	1					
ANR	1906435	Argument	sock		1906360	0					
ANR	1906436	Identifier	sock		1906360	0					
ANR	1906437	Argument	SIOCGIFHWADDR		1906360	1					
ANR	1906438	Identifier	SIOCGIFHWADDR		1906360	0					
ANR	1906439	Argument	& ifr		1906360	2					
ANR	1906440	UnaryOperationExpression	& ifr		1906360	0					
ANR	1906441	UnaryOperator	&		1906360	0					
ANR	1906442	Identifier	ifr		1906360	1					
ANR	1906443	IfStatement	if ( status < 0 )		1906360	16					
ANR	1906444	Condition	status < 0	244:6:5787:5796	1906360	0	True				
ANR	1906445	RelationalExpression	status < 0		1906360	0		<			
ANR	1906446	Identifier	status		1906360	0					
ANR	1906447	PrimaryExpression	0		1906360	1					
ANR	1906448	CompoundStatement		18:19:439:439	1906360	1					
ANR	1906449	ExpressionStatement	"derror ( ""ioctl(SIOCGIFHWADDR)"" )"	245:2:5804:5836	1906360	0	True				
ANR	1906450	CallExpression	"derror ( ""ioctl(SIOCGIFHWADDR)"" )"		1906360	0					
ANR	1906451	Callee	derror		1906360	0					
ANR	1906452	Identifier	derror		1906360	0					
ANR	1906453	ArgumentList	"""ioctl(SIOCGIFHWADDR)"""		1906360	1					
ANR	1906454	Argument	"""ioctl(SIOCGIFHWADDR)"""		1906360	0					
ANR	1906455	PrimaryExpression	"""ioctl(SIOCGIFHWADDR)"""		1906360	0					
ANR	1906456	ElseStatement	else		1906360	0					
ANR	1906457	CompoundStatement		21:6:486:486	1906360	0					
ANR	1906458	ExpressionStatement	setHwAddr ( ifr )	248:2:5851:5867	1906360	0	True				
ANR	1906459	CallExpression	setHwAddr ( ifr )		1906360	0					
ANR	1906460	Callee	setHwAddr		1906360	0					
ANR	1906461	Identifier	setHwAddr		1906360	0					
ANR	1906462	ArgumentList	ifr		1906360	1					
ANR	1906463	Argument	ifr		1906360	0					
ANR	1906464	Identifier	ifr		1906360	0					
ANR	1906465	ExpressionStatement	getName ( ifr )	252:1:5895:5909	1906360	17	True				
ANR	1906466	CallExpression	getName ( ifr )		1906360	0					
ANR	1906467	Callee	getName		1906360	0					
ANR	1906468	Identifier	getName		1906360	0					
ANR	1906469	ArgumentList	ifr		1906360	1					
ANR	1906470	Argument	ifr		1906360	0					
ANR	1906471	Identifier	ifr		1906360	0					
ANR	1906472	ExpressionStatement	ifr . ifr_addr . sa_family = AF_INET	253:1:5912:5944	1906360	18	True				
ANR	1906473	AssignmentExpression	ifr . ifr_addr . sa_family = AF_INET		1906360	0		=			
ANR	1906474	MemberAccess	ifr . ifr_addr . sa_family		1906360	0					
ANR	1906475	MemberAccess	ifr . ifr_addr		1906360	0					
ANR	1906476	Identifier	ifr		1906360	0					
ANR	1906477	Identifier	ifr_addr		1906360	1					
ANR	1906478	Identifier	sa_family		1906360	1					
ANR	1906479	Identifier	AF_INET		1906360	1					
ANR	1906480	ExpressionStatement	"status = ioctl ( sock , SIOCGIFNETMASK , & ifr )"	254:1:5947:5991	1906360	19	True				
ANR	1906481	AssignmentExpression	"status = ioctl ( sock , SIOCGIFNETMASK , & ifr )"		1906360	0		=			
ANR	1906482	Identifier	status		1906360	0					
ANR	1906483	CallExpression	"ioctl ( sock , SIOCGIFNETMASK , & ifr )"		1906360	1					
ANR	1906484	Callee	ioctl		1906360	0					
ANR	1906485	Identifier	ioctl		1906360	0					
ANR	1906486	ArgumentList	sock		1906360	1					
ANR	1906487	Argument	sock		1906360	0					
ANR	1906488	Identifier	sock		1906360	0					
ANR	1906489	Argument	SIOCGIFNETMASK		1906360	1					
ANR	1906490	Identifier	SIOCGIFNETMASK		1906360	0					
ANR	1906491	Argument	& ifr		1906360	2					
ANR	1906492	UnaryOperationExpression	& ifr		1906360	0					
ANR	1906493	UnaryOperator	&		1906360	0					
ANR	1906494	Identifier	ifr		1906360	1					
ANR	1906495	IfStatement	if ( status < 0 )		1906360	20					
ANR	1906496	Condition	status < 0	255:6:5999:6008	1906360	0	True				
ANR	1906497	RelationalExpression	status < 0		1906360	0		<			
ANR	1906498	Identifier	status		1906360	0					
ANR	1906499	PrimaryExpression	0		1906360	1					
ANR	1906500	CompoundStatement		29:19:651:651	1906360	1					
ANR	1906501	ExpressionStatement	"derror ( ""ioctl(SIOCGIFNETMASK)"" )"	256:2:6016:6049	1906360	0	True				
ANR	1906502	CallExpression	"derror ( ""ioctl(SIOCGIFNETMASK)"" )"		1906360	0					
ANR	1906503	Callee	derror		1906360	0					
ANR	1906504	Identifier	derror		1906360	0					
ANR	1906505	ArgumentList	"""ioctl(SIOCGIFNETMASK)"""		1906360	1					
ANR	1906506	Argument	"""ioctl(SIOCGIFNETMASK)"""		1906360	0					
ANR	1906507	PrimaryExpression	"""ioctl(SIOCGIFNETMASK)"""		1906360	0					
ANR	1906508	ElseStatement	else		1906360	0					
ANR	1906509	CompoundStatement		32:6:699:699	1906360	0					
ANR	1906510	ExpressionStatement	setNetMask ( ifr )	259:2:6064:6081	1906360	0	True				
ANR	1906511	CallExpression	setNetMask ( ifr )		1906360	0					
ANR	1906512	Callee	setNetMask		1906360	0					
ANR	1906513	Identifier	setNetMask		1906360	0					
ANR	1906514	ArgumentList	ifr		1906360	1					
ANR	1906515	Argument	ifr		1906360	0					
ANR	1906516	Identifier	ifr		1906360	0					
ANR	1906517	Statement	endif	263:2:6109:6113	1906360	21	True				
ANR	1906518	ReturnStatement	return ok ;	264:1:6116:6125	1906360	22	True				
ANR	1906519	Identifier	ok		1906360	0					
ANR	1906520	ReturnType	bool		1906360	1					
ANR	1906521	Identifier	LinuxNetworkAdapter :: getAdapterInfo		1906360	2					
ANR	1906522	ParameterList			1906360	3					
ANR	1906523	CFGEntryNode	ENTRY		1906360		True				
ANR	1906524	CFGExitNode	EXIT		1906360		True				
ANR	1906525	Symbol	ifr . ifr_addr . sa_family		1906360						
ANR	1906526	Symbol	SIOCGIFNETMASK		1906360						
ANR	1906527	Symbol	SIOCGIFHWADDR		1906360						
ANR	1906528	Symbol	false		1906360						
ANR	1906529	Symbol	AF_INET		1906360						
ANR	1906530	Symbol	SOCK_DGRAM		1906360						
ANR	1906531	Symbol	ioctl		1906360						
ANR	1906532	Symbol	sock		1906360						
ANR	1906533	Symbol	ifr		1906360						
ANR	1906534	Symbol	true		1906360						
ANR	1906535	Symbol	socket		1906360						
ANR	1906536	Symbol	ok		1906360						
ANR	1906537	Symbol	& ifr		1906360						
ANR	1906538	Symbol	ifr . ifr_addr		1906360						
ANR	1906539	Symbol	HAVE_STRUCT_IFCONF		1906360						
ANR	1906540	Symbol	status		1906360						
ANR	1906541	Function	LinuxNetworkAdapter :: detectWOL	267:0:6130:7655							
ANR	1906542	FunctionDef	LinuxNetworkAdapter :: detectWOL ()		1906541	0					
ANR	1906543	CompoundStatement		269:0:6175:7655	1906541	0					
ANR	1906544	IdentifierDeclStatement	bool ok = false ;	270:1:6178:6197	1906541	0	True				
ANR	1906545	IdentifierDecl	ok = false		1906541	0					
ANR	1906546	IdentifierDeclType	bool		1906541	0					
ANR	1906547	Identifier	ok		1906541	1					
ANR	1906548	AssignmentExpression	ok = false		1906541	2		=			
ANR	1906549	Identifier	false		1906541	0					
ANR	1906550	Identifier	false		1906541	1					
ANR	1906551	IdentifierDeclStatement	int err ;	272:1:6277:6289	1906541	1	True				
ANR	1906552	IdentifierDecl	err		1906541	0					
ANR	1906553	IdentifierDeclType	int		1906541	0					
ANR	1906554	Identifier	err		1906541	1					
ANR	1906555	IdentifierDeclStatement	struct ethtool_wolinfo wolinfo ;	273:1:6292:6322	1906541	2	True				
ANR	1906556	IdentifierDecl	wolinfo		1906541	0					
ANR	1906557	IdentifierDeclType	struct ethtool_wolinfo		1906541	0					
ANR	1906558	Identifier	wolinfo		1906541	1					
ANR	1906559	IdentifierDeclStatement	struct ifreq ifr ;	274:1:6325:6343	1906541	3	True				
ANR	1906560	IdentifierDecl	ifr		1906541	0					
ANR	1906561	IdentifierDeclType	struct ifreq		1906541	0					
ANR	1906562	Identifier	ifr		1906541	1					
ANR	1906563	IdentifierDeclStatement	"int sock = socket ( AF_INET , SOCK_DGRAM , 0 ) ;"	277:1:6372:6413	1906541	4	True				
ANR	1906564	IdentifierDecl	"sock = socket ( AF_INET , SOCK_DGRAM , 0 )"		1906541	0					
ANR	1906565	IdentifierDeclType	int		1906541	0					
ANR	1906566	Identifier	sock		1906541	1					
ANR	1906567	AssignmentExpression	"sock = socket ( AF_INET , SOCK_DGRAM , 0 )"		1906541	2		=			
ANR	1906568	Identifier	sock		1906541	0					
ANR	1906569	CallExpression	"socket ( AF_INET , SOCK_DGRAM , 0 )"		1906541	1					
ANR	1906570	Callee	socket		1906541	0					
ANR	1906571	Identifier	socket		1906541	0					
ANR	1906572	ArgumentList	AF_INET		1906541	1					
ANR	1906573	Argument	AF_INET		1906541	0					
ANR	1906574	Identifier	AF_INET		1906541	0					
ANR	1906575	Argument	SOCK_DGRAM		1906541	1					
ANR	1906576	Identifier	SOCK_DGRAM		1906541	0					
ANR	1906577	Argument	0		1906541	2					
ANR	1906578	PrimaryExpression	0		1906541	0					
ANR	1906579	IfStatement	if ( sock < 0 )		1906541	5					
ANR	1906580	Condition	sock < 0	278:5:6420:6427	1906541	0	True				
ANR	1906581	RelationalExpression	sock < 0		1906541	0		<			
ANR	1906582	Identifier	sock		1906541	0					
ANR	1906583	PrimaryExpression	0		1906541	1					
ANR	1906584	CompoundStatement		10:15:254:254	1906541	1					
ANR	1906585	ExpressionStatement	"dprintf ( D_ALWAYS , ""Cannot get control socket for WOL detection\\n"" )"	279:2:6434:6502	1906541	0	True				
ANR	1906586	CallExpression	"dprintf ( D_ALWAYS , ""Cannot get control socket for WOL detection\\n"" )"		1906541	0					
ANR	1906587	Callee	dprintf		1906541	0					
ANR	1906588	Identifier	dprintf		1906541	0					
ANR	1906589	ArgumentList	D_ALWAYS		1906541	1					
ANR	1906590	Argument	D_ALWAYS		1906541	0					
ANR	1906591	Identifier	D_ALWAYS		1906541	0					
ANR	1906592	Argument	"""Cannot get control socket for WOL detection\\n"""		1906541	1					
ANR	1906593	PrimaryExpression	"""Cannot get control socket for WOL detection\\n"""		1906541	0					
ANR	1906594	ReturnStatement	return false ;	280:2:6506:6518	1906541	1	True				
ANR	1906595	Identifier	false		1906541	0					
ANR	1906596	ExpressionStatement	wolinfo . cmd = ETHTOOL_GWOL	284:1:6575:6601	1906541	6	True				
ANR	1906597	AssignmentExpression	wolinfo . cmd = ETHTOOL_GWOL		1906541	0		=			
ANR	1906598	MemberAccess	wolinfo . cmd		1906541	0					
ANR	1906599	Identifier	wolinfo		1906541	0					
ANR	1906600	Identifier	cmd		1906541	1					
ANR	1906601	Identifier	ETHTOOL_GWOL		1906541	1					
ANR	1906602	ExpressionStatement	getName ( ifr )	285:1:6604:6618	1906541	7	True				
ANR	1906603	CallExpression	getName ( ifr )		1906541	0					
ANR	1906604	Callee	getName		1906541	0					
ANR	1906605	Identifier	getName		1906541	0					
ANR	1906606	ArgumentList	ifr		1906541	1					
ANR	1906607	Argument	ifr		1906541	0					
ANR	1906608	Identifier	ifr		1906541	0					
ANR	1906609	ExpressionStatement	ifr . ifr_data = ( caddr_t ) ( & wolinfo )	286:1:6621:6656	1906541	8	True				
ANR	1906610	AssignmentExpression	ifr . ifr_data = ( caddr_t ) ( & wolinfo )		1906541	0		=			
ANR	1906611	MemberAccess	ifr . ifr_data		1906541	0					
ANR	1906612	Identifier	ifr		1906541	0					
ANR	1906613	Identifier	ifr_data		1906541	1					
ANR	1906614	CastExpression	( caddr_t ) ( & wolinfo )		1906541	1					
ANR	1906615	CastTarget	caddr_t		1906541	0					
ANR	1906616	UnaryOperationExpression	& wolinfo		1906541	1					
ANR	1906617	UnaryOperator	&		1906541	0					
ANR	1906618	Identifier	wolinfo		1906541	1					
ANR	1906619	IdentifierDeclStatement	priv_state saved_priv = set_priv ( PRIV_ROOT ) ;	288:1:6660:6705	1906541	9	True				
ANR	1906620	IdentifierDecl	saved_priv = set_priv ( PRIV_ROOT )		1906541	0					
ANR	1906621	IdentifierDeclType	priv_state		1906541	0					
ANR	1906622	Identifier	saved_priv		1906541	1					
ANR	1906623	AssignmentExpression	saved_priv = set_priv ( PRIV_ROOT )		1906541	2		=			
ANR	1906624	Identifier	saved_priv		1906541	0					
ANR	1906625	CallExpression	set_priv ( PRIV_ROOT )		1906541	1					
ANR	1906626	Callee	set_priv		1906541	0					
ANR	1906627	Identifier	set_priv		1906541	0					
ANR	1906628	ArgumentList	PRIV_ROOT		1906541	1					
ANR	1906629	Argument	PRIV_ROOT		1906541	0					
ANR	1906630	Identifier	PRIV_ROOT		1906541	0					
ANR	1906631	ExpressionStatement	"err = ioctl ( sock , SIOCETHTOOL , & ifr )"	289:1:6708:6744	1906541	10	True				
ANR	1906632	AssignmentExpression	"err = ioctl ( sock , SIOCETHTOOL , & ifr )"		1906541	0		=			
ANR	1906633	Identifier	err		1906541	0					
ANR	1906634	CallExpression	"ioctl ( sock , SIOCETHTOOL , & ifr )"		1906541	1					
ANR	1906635	Callee	ioctl		1906541	0					
ANR	1906636	Identifier	ioctl		1906541	0					
ANR	1906637	ArgumentList	sock		1906541	1					
ANR	1906638	Argument	sock		1906541	0					
ANR	1906639	Identifier	sock		1906541	0					
ANR	1906640	Argument	SIOCETHTOOL		1906541	1					
ANR	1906641	Identifier	SIOCETHTOOL		1906541	0					
ANR	1906642	Argument	& ifr		1906541	2					
ANR	1906643	UnaryOperationExpression	& ifr		1906541	0					
ANR	1906644	UnaryOperator	&		1906541	0					
ANR	1906645	Identifier	ifr		1906541	1					
ANR	1906646	ExpressionStatement	set_priv ( saved_priv )	290:1:6747:6769	1906541	11	True				
ANR	1906647	CallExpression	set_priv ( saved_priv )		1906541	0					
ANR	1906648	Callee	set_priv		1906541	0					
ANR	1906649	Identifier	set_priv		1906541	0					
ANR	1906650	ArgumentList	saved_priv		1906541	1					
ANR	1906651	Argument	saved_priv		1906541	0					
ANR	1906652	Identifier	saved_priv		1906541	0					
ANR	1906653	IfStatement	if ( err < 0 )		1906541	12					
ANR	1906654	Condition	err < 0	292:6:6778:6784	1906541	0	True				
ANR	1906655	RelationalExpression	err < 0		1906541	0		<			
ANR	1906656	Identifier	err		1906541	0					
ANR	1906657	PrimaryExpression	0		1906541	1					
ANR	1906658	CompoundStatement		24:16:612:612	1906541	1					
ANR	1906659	IfStatement	if ( ( EPERM != errno ) || ( geteuid ( ) == 0 ) )		1906541	0					
ANR	1906660	Condition	( EPERM != errno ) || ( geteuid ( ) == 0 )	293:7:6797:6832	1906541	0	True				
ANR	1906661	OrExpression	( EPERM != errno ) || ( geteuid ( ) == 0 )		1906541	0		||			
ANR	1906662	EqualityExpression	EPERM != errno		1906541	0		!=			
ANR	1906663	Identifier	EPERM		1906541	0					
ANR	1906664	Identifier	errno		1906541	1					
ANR	1906665	EqualityExpression	geteuid ( ) == 0		1906541	1		==			
ANR	1906666	CallExpression	geteuid ( )		1906541	0					
ANR	1906667	Callee	geteuid		1906541	0					
ANR	1906668	Identifier	geteuid		1906541	0					
ANR	1906669	ArgumentList			1906541	1					
ANR	1906670	PrimaryExpression	0		1906541	1					
ANR	1906671	CompoundStatement		25:46:660:660	1906541	1					
ANR	1906672	ExpressionStatement	"derror ( ""ioctl(SIOCETHTOOL/GWOL)"" )"	294:3:6841:6876	1906541	0	True				
ANR	1906673	CallExpression	"derror ( ""ioctl(SIOCETHTOOL/GWOL)"" )"		1906541	0					
ANR	1906674	Callee	derror		1906541	0					
ANR	1906675	Identifier	derror		1906541	0					
ANR	1906676	ArgumentList	"""ioctl(SIOCETHTOOL/GWOL)"""		1906541	1					
ANR	1906677	Argument	"""ioctl(SIOCETHTOOL/GWOL)"""		1906541	0					
ANR	1906678	PrimaryExpression	"""ioctl(SIOCETHTOOL/GWOL)"""		1906541	0					
ANR	1906679	Statement	dprintf	295:3:6881:6887	1906541	1	True				
ANR	1906680	Statement	(	295:10:6888:6888	1906541	2	True				
ANR	1906681	Statement	D_ALWAYS	295:12:6890:6897	1906541	3	True				
ANR	1906682	Statement	","	295:20:6898:6898	1906541	4	True				
ANR	1906683	Statement	"""You can safely ignore the above error if you're not"""	296:6:6906:6958	1906541	5	True				
ANR	1906684	Statement	""" using hibernation\\n"""	297:6:6966:6987	1906541	6	True				
ANR	1906685	Statement	)	297:29:6989:6989	1906541	7	True				
ANR	1906686	ExpressionStatement		297:30:6990:6990	1906541	8	True				
ANR	1906687	ExpressionStatement	m_wol_support_mask = 0	299:2:6998:7020	1906541	1	True				
ANR	1906688	AssignmentExpression	m_wol_support_mask = 0		1906541	0		=			
ANR	1906689	Identifier	m_wol_support_mask		1906541	0					
ANR	1906690	PrimaryExpression	0		1906541	1					
ANR	1906691	ExpressionStatement	m_wol_enable_mask = 0	300:2:7024:7045	1906541	2	True				
ANR	1906692	AssignmentExpression	m_wol_enable_mask = 0		1906541	0		=			
ANR	1906693	Identifier	m_wol_enable_mask		1906541	0					
ANR	1906694	PrimaryExpression	0		1906541	1					
ANR	1906695	ElseStatement	else		1906541	0					
ANR	1906696	CompoundStatement		34:6:880:880	1906541	0					
ANR	1906697	ExpressionStatement	m_wol_support_mask = wolinfo . supported	303:2:7060:7098	1906541	0	True				
ANR	1906698	AssignmentExpression	m_wol_support_mask = wolinfo . supported		1906541	0		=			
ANR	1906699	Identifier	m_wol_support_mask		1906541	0					
ANR	1906700	MemberAccess	wolinfo . supported		1906541	1					
ANR	1906701	Identifier	wolinfo		1906541	0					
ANR	1906702	Identifier	supported		1906541	1					
ANR	1906703	ExpressionStatement	m_wol_enable_mask = wolinfo . wolopts	304:2:7102:7137	1906541	1	True				
ANR	1906704	AssignmentExpression	m_wol_enable_mask = wolinfo . wolopts		1906541	0		=			
ANR	1906705	Identifier	m_wol_enable_mask		1906541	0					
ANR	1906706	MemberAccess	wolinfo . wolopts		1906541	1					
ANR	1906707	Identifier	wolinfo		1906541	0					
ANR	1906708	Identifier	wolopts		1906541	1					
ANR	1906709	ExpressionStatement	ok = true	305:2:7141:7150	1906541	2	True				
ANR	1906710	AssignmentExpression	ok = true		1906541	0		=			
ANR	1906711	Identifier	ok		1906541	0					
ANR	1906712	Identifier	true		1906541	1					
ANR	1906713	ExpressionStatement	"setWolBits ( NetworkAdapterBase :: WOL_HW_SUPPORT , m_wol_support_mask )"	309:1:7207:7275	1906541	13	True				
ANR	1906714	CallExpression	"setWolBits ( NetworkAdapterBase :: WOL_HW_SUPPORT , m_wol_support_mask )"		1906541	0					
ANR	1906715	Callee	setWolBits		1906541	0					
ANR	1906716	Identifier	setWolBits		1906541	0					
ANR	1906717	ArgumentList	NetworkAdapterBase :: WOL_HW_SUPPORT		1906541	1					
ANR	1906718	Argument	NetworkAdapterBase :: WOL_HW_SUPPORT		1906541	0					
ANR	1906719	Identifier	NetworkAdapterBase :: WOL_HW_SUPPORT		1906541	0					
ANR	1906720	Argument	m_wol_support_mask		1906541	1					
ANR	1906721	Identifier	m_wol_support_mask		1906541	0					
ANR	1906722	ExpressionStatement	"setWolBits ( NetworkAdapterBase :: WOL_HW_ENABLED , m_wol_enable_mask )"	310:1:7278:7345	1906541	14	True				
ANR	1906723	CallExpression	"setWolBits ( NetworkAdapterBase :: WOL_HW_ENABLED , m_wol_enable_mask )"		1906541	0					
ANR	1906724	Callee	setWolBits		1906541	0					
ANR	1906725	Identifier	setWolBits		1906541	0					
ANR	1906726	ArgumentList	NetworkAdapterBase :: WOL_HW_ENABLED		1906541	1					
ANR	1906727	Argument	NetworkAdapterBase :: WOL_HW_ENABLED		1906541	0					
ANR	1906728	Identifier	NetworkAdapterBase :: WOL_HW_ENABLED		1906541	0					
ANR	1906729	Argument	m_wol_enable_mask		1906541	1					
ANR	1906730	Identifier	m_wol_enable_mask		1906541	0					
ANR	1906731	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""%s supports Wake-on: %s (raw: 0x%02x)\\n"" , m_if_name , isWakeSupported ( ) ? ""yes"" : ""no"" , m_wol_support_mask )"	311:1:7348:7482	1906541	15	True				
ANR	1906732	CallExpression	"dprintf ( D_FULLDEBUG , ""%s supports Wake-on: %s (raw: 0x%02x)\\n"" , m_if_name , isWakeSupported ( ) ? ""yes"" : ""no"" , m_wol_support_mask )"		1906541	0					
ANR	1906733	Callee	dprintf		1906541	0					
ANR	1906734	Identifier	dprintf		1906541	0					
ANR	1906735	ArgumentList	D_FULLDEBUG		1906541	1					
ANR	1906736	Argument	D_FULLDEBUG		1906541	0					
ANR	1906737	Identifier	D_FULLDEBUG		1906541	0					
ANR	1906738	Argument	"""%s supports Wake-on: %s (raw: 0x%02x)\\n"""		1906541	1					
ANR	1906739	PrimaryExpression	"""%s supports Wake-on: %s (raw: 0x%02x)\\n"""		1906541	0					
ANR	1906740	Argument	m_if_name		1906541	2					
ANR	1906741	Identifier	m_if_name		1906541	0					
ANR	1906742	Argument	"isWakeSupported ( ) ? ""yes"" : ""no"""		1906541	3					
ANR	1906743	ConditionalExpression	"isWakeSupported ( ) ? ""yes"" : ""no"""		1906541	0					
ANR	1906744	Condition	isWakeSupported ( )		1906541	0					
ANR	1906745	CallExpression	isWakeSupported ( )		1906541	0					
ANR	1906746	Callee	isWakeSupported		1906541	0					
ANR	1906747	Identifier	isWakeSupported		1906541	0					
ANR	1906748	ArgumentList			1906541	1					
ANR	1906749	PrimaryExpression	"""yes"""		1906541	1					
ANR	1906750	PrimaryExpression	"""no"""		1906541	2					
ANR	1906751	Argument	m_wol_support_mask		1906541	4					
ANR	1906752	Identifier	m_wol_support_mask		1906541	0					
ANR	1906753	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""%s enabled Wake-on: %s (raw: 0x%02x)\\n"" , m_if_name , isWakeEnabled ( ) ? ""yes"" : ""no"" , m_wol_enable_mask )"	313:1:7485:7615	1906541	16	True				
ANR	1906754	CallExpression	"dprintf ( D_FULLDEBUG , ""%s enabled Wake-on: %s (raw: 0x%02x)\\n"" , m_if_name , isWakeEnabled ( ) ? ""yes"" : ""no"" , m_wol_enable_mask )"		1906541	0					
ANR	1906755	Callee	dprintf		1906541	0					
ANR	1906756	Identifier	dprintf		1906541	0					
ANR	1906757	ArgumentList	D_FULLDEBUG		1906541	1					
ANR	1906758	Argument	D_FULLDEBUG		1906541	0					
ANR	1906759	Identifier	D_FULLDEBUG		1906541	0					
ANR	1906760	Argument	"""%s enabled Wake-on: %s (raw: 0x%02x)\\n"""		1906541	1					
ANR	1906761	PrimaryExpression	"""%s enabled Wake-on: %s (raw: 0x%02x)\\n"""		1906541	0					
ANR	1906762	Argument	m_if_name		1906541	2					
ANR	1906763	Identifier	m_if_name		1906541	0					
ANR	1906764	Argument	"isWakeEnabled ( ) ? ""yes"" : ""no"""		1906541	3					
ANR	1906765	ConditionalExpression	"isWakeEnabled ( ) ? ""yes"" : ""no"""		1906541	0					
ANR	1906766	Condition	isWakeEnabled ( )		1906541	0					
ANR	1906767	CallExpression	isWakeEnabled ( )		1906541	0					
ANR	1906768	Callee	isWakeEnabled		1906541	0					
ANR	1906769	Identifier	isWakeEnabled		1906541	0					
ANR	1906770	ArgumentList			1906541	1					
ANR	1906771	PrimaryExpression	"""yes"""		1906541	1					
ANR	1906772	PrimaryExpression	"""no"""		1906541	2					
ANR	1906773	Argument	m_wol_enable_mask		1906541	4					
ANR	1906774	Identifier	m_wol_enable_mask		1906541	0					
ANR	1906775	ExpressionStatement	close ( sock )	316:1:7619:7632	1906541	17	True				
ANR	1906776	CallExpression	close ( sock )		1906541	0					
ANR	1906777	Callee	close		1906541	0					
ANR	1906778	Identifier	close		1906541	0					
ANR	1906779	ArgumentList	sock		1906541	1					
ANR	1906780	Argument	sock		1906541	0					
ANR	1906781	Identifier	sock		1906541	0					
ANR	1906782	Statement	endif	317:3:7637:7641	1906541	18	True				
ANR	1906783	ReturnStatement	return ok ;	318:1:7644:7653	1906541	19	True				
ANR	1906784	Identifier	ok		1906541	0					
ANR	1906785	ReturnType	bool		1906541	1					
ANR	1906786	Identifier	LinuxNetworkAdapter :: detectWOL		1906541	2					
ANR	1906787	ParameterList			1906541	3					
ANR	1906788	CFGEntryNode	ENTRY		1906541		True				
ANR	1906789	CFGExitNode	EXIT		1906541		True				
ANR	1906790	Symbol	SIOCETHTOOL		1906541						
ANR	1906791	Symbol	EPERM		1906541						
ANR	1906792	Symbol	m_if_name		1906541						
ANR	1906793	Symbol	m_wol_enable_mask		1906541						
ANR	1906794	Symbol	NetworkAdapterBase :: WOL_HW_SUPPORT		1906541						
ANR	1906795	Symbol	ioctl		1906541						
ANR	1906796	Symbol	m_wol_support_mask		1906541						
ANR	1906797	Symbol	wolinfo		1906541						
ANR	1906798	Symbol	wolinfo . wolopts		1906541						
ANR	1906799	Symbol	ifr . ifr_data		1906541						
ANR	1906800	Symbol	wolinfo . cmd		1906541						
ANR	1906801	Symbol	ok		1906541						
ANR	1906802	Symbol	& ifr		1906541						
ANR	1906803	Symbol	errno		1906541						
ANR	1906804	Symbol	isWakeEnabled		1906541						
ANR	1906805	Symbol	err		1906541						
ANR	1906806	Symbol	ETHTOOL_GWOL		1906541						
ANR	1906807	Symbol	false		1906541						
ANR	1906808	Symbol	D_ALWAYS		1906541						
ANR	1906809	Symbol	& wolinfo		1906541						
ANR	1906810	Symbol	wolinfo . supported		1906541						
ANR	1906811	Symbol	D_FULLDEBUG		1906541						
ANR	1906812	Symbol	AF_INET		1906541						
ANR	1906813	Symbol	isWakeSupported		1906541						
ANR	1906814	Symbol	SOCK_DGRAM		1906541						
ANR	1906815	Symbol	geteuid		1906541						
ANR	1906816	Symbol	sock		1906541						
ANR	1906817	Symbol	set_priv		1906541						
ANR	1906818	Symbol	ifr		1906541						
ANR	1906819	Symbol	saved_priv		1906541						
ANR	1906820	Symbol	true		1906541						
ANR	1906821	Symbol	PRIV_ROOT		1906541						
ANR	1906822	Symbol	socket		1906541						
ANR	1906823	Symbol	NetworkAdapterBase :: WOL_HW_ENABLED		1906541						
ANR	1906824	ClassDef	WolTable	321:0:7658:7741							
ANR	1906825	DeclStmt									
ANR	1906826	Decl							unsigned	unsigned	bit_mask
ANR	1906827	DeclStmt									
ANR	1906828	Decl							NetworkAdapterBase :: WOL_BITS	NetworkAdapterBase :: WOL_BITS	wol_bits
ANR	1906829	DeclStmt									
ANR	1906830	Decl							WolTable	WolTable [ ]	wol_table
ANR	1906831	Function	LinuxNetworkAdapter :: setWolBits	340:0:8210:8537							
ANR	1906832	FunctionDef	"LinuxNetworkAdapter :: setWolBits (WOL_TYPE type , unsigned bits)"		1906831	0					
ANR	1906833	CompoundStatement		342:0:8280:8537	1906831	0					
ANR	1906834	IfStatement	if ( type == WOL_HW_SUPPORT )		1906831	0					
ANR	1906835	Condition	type == WOL_HW_SUPPORT	343:6:8288:8309	1906831	0	True				
ANR	1906836	EqualityExpression	type == WOL_HW_SUPPORT		1906831	0		==			
ANR	1906837	Identifier	type		1906831	0					
ANR	1906838	Identifier	WOL_HW_SUPPORT		1906831	1					
ANR	1906839	CompoundStatement		2:31:32:32	1906831	1					
ANR	1906840	ExpressionStatement	wolResetSupportBits ( )	344:2:8317:8339	1906831	0	True				
ANR	1906841	CallExpression	wolResetSupportBits ( )		1906831	0					
ANR	1906842	Callee	wolResetSupportBits		1906831	0					
ANR	1906843	Identifier	wolResetSupportBits		1906831	0					
ANR	1906844	ArgumentList			1906831	1					
ANR	1906845	ElseStatement	else		1906831	0					
ANR	1906846	CompoundStatement		5:6:69:69	1906831	0					
ANR	1906847	ExpressionStatement	wolResetEnableBits ( )	347:2:8354:8375	1906831	0	True				
ANR	1906848	CallExpression	wolResetEnableBits ( )		1906831	0					
ANR	1906849	Callee	wolResetEnableBits		1906831	0					
ANR	1906850	Identifier	wolResetEnableBits		1906831	0					
ANR	1906851	ArgumentList			1906831	1					
ANR	1906852	ForStatement	for ( unsigned bit = 0 ; wol_table [ bit ] . bit_mask ; bit ++ )		1906831	1					
ANR	1906853	ForInit	unsigned bit = 0 ;	349:6:8386:8402	1906831	0	True				
ANR	1906854	IdentifierDeclStatement	unsigned bit = 0 ;		1906831	0					
ANR	1906855	IdentifierDecl	bit = 0		1906831	0					
ANR	1906856	IdentifierDeclType	unsigned		1906831	0					
ANR	1906857	Identifier	bit		1906831	1					
ANR	1906858	AssignmentExpression	bit = 0		1906831	2		=			
ANR	1906859	Identifier	bit		1906831	0					
ANR	1906860	PrimaryExpression	0		1906831	1					
ANR	1906861	Condition	wol_table [ bit ] . bit_mask	349:25:8405:8427	1906831	1	True				
ANR	1906862	MemberAccess	wol_table [ bit ] . bit_mask		1906831	0					
ANR	1906863	ArrayIndexing	wol_table [ bit ]		1906831	0					
ANR	1906864	Identifier	wol_table		1906831	0					
ANR	1906865	Identifier	bit		1906831	1					
ANR	1906866	Identifier	bit_mask		1906831	1					
ANR	1906867	PostIncDecOperationExpression	bit ++	349:51:8431:8435	1906831	2	True				
ANR	1906868	Identifier	bit		1906831	0					
ANR	1906869	IncDec	++		1906831	1					
ANR	1906870	CompoundStatement		8:59:158:158	1906831	3					
ANR	1906871	IfStatement	if ( wol_table [ bit ] . bit_mask & bits )		1906831	0					
ANR	1906872	Condition	wol_table [ bit ] . bit_mask & bits	350:7:8448:8477	1906831	0	True				
ANR	1906873	BitAndExpression	wol_table [ bit ] . bit_mask & bits		1906831	0		&			
ANR	1906874	MemberAccess	wol_table [ bit ] . bit_mask		1906831	0					
ANR	1906875	ArrayIndexing	wol_table [ bit ]		1906831	0					
ANR	1906876	Identifier	wol_table		1906831	0					
ANR	1906877	Identifier	bit		1906831	1					
ANR	1906878	Identifier	bit_mask		1906831	1					
ANR	1906879	Identifier	bits		1906831	1					
ANR	1906880	CompoundStatement		9:40:200:200	1906831	1					
ANR	1906881	ExpressionStatement	"wolSetBit ( type , wol_table [ bit ] . wol_bits )"	351:3:8486:8528	1906831	0	True				
ANR	1906882	CallExpression	"wolSetBit ( type , wol_table [ bit ] . wol_bits )"		1906831	0					
ANR	1906883	Callee	wolSetBit		1906831	0					
ANR	1906884	Identifier	wolSetBit		1906831	0					
ANR	1906885	ArgumentList	type		1906831	1					
ANR	1906886	Argument	type		1906831	0					
ANR	1906887	Identifier	type		1906831	0					
ANR	1906888	Argument	wol_table [ bit ] . wol_bits		1906831	1					
ANR	1906889	MemberAccess	wol_table [ bit ] . wol_bits		1906831	0					
ANR	1906890	ArrayIndexing	wol_table [ bit ]		1906831	0					
ANR	1906891	Identifier	wol_table		1906831	0					
ANR	1906892	Identifier	bit		1906831	1					
ANR	1906893	Identifier	wol_bits		1906831	1					
ANR	1906894	ReturnType	void		1906831	1					
ANR	1906895	Identifier	LinuxNetworkAdapter :: setWolBits		1906831	2					
ANR	1906896	ParameterList	"WOL_TYPE type , unsigned bits"		1906831	3					
ANR	1906897	Parameter	WOL_TYPE type	341:34:8249:8261	1906831	0	True				
ANR	1906898	ParameterType	WOL_TYPE		1906831	0					
ANR	1906899	Identifier	type		1906831	1					
ANR	1906900	Parameter	unsigned bits	341:49:8264:8276	1906831	1	True				
ANR	1906901	ParameterType	unsigned		1906831	0					
ANR	1906902	Identifier	bits		1906831	1					
ANR	1906903	CFGEntryNode	ENTRY		1906831		True				
ANR	1906904	CFGExitNode	EXIT		1906831		True				
ANR	1906905	Symbol	wol_table [ bit ] . bit_mask		1906831						
ANR	1906906	Symbol	wol_table [ bit ] . wol_bits		1906831						
ANR	1906907	Symbol	bits		1906831						
ANR	1906908	Symbol	* bit		1906831						
ANR	1906909	Symbol	WOL_HW_SUPPORT		1906831						
ANR	1906910	Symbol	type		1906831						
ANR	1906911	Symbol	bit		1906831						
ANR	1906912	Symbol	wol_table		1906831						
ANR	1906913	Symbol	* wol_table		1906831						
