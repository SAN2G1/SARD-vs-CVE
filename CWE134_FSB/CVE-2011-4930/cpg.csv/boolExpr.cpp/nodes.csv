command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	679766	File	data/converged/CVE-2011-4930_htcondor/boolExpr.cpp								
ANR	679767	Function	BoolExpr :: BoolExpr	28:0:939:1002							
ANR	679768	FunctionDef	BoolExpr :: BoolExpr ()		679767	0					
ANR	679769	CompoundStatement		30:0:962:1002	679767	0					
ANR	679770	ExpressionStatement	initialized = false	31:1:965:984	679767	0	True				
ANR	679771	AssignmentExpression	initialized = false		679767	0		=			
ANR	679772	Identifier	initialized		679767	0					
ANR	679773	Identifier	false		679767	1					
ANR	679774	ExpressionStatement	myTree = NULL	32:1:987:1000	679767	1	True				
ANR	679775	AssignmentExpression	myTree = NULL		679767	0		=			
ANR	679776	Identifier	myTree		679767	0					
ANR	679777	Identifier	NULL		679767	1					
ANR	679778	Identifier	BoolExpr :: BoolExpr		679767	1					
ANR	679779	ParameterList			679767	2					
ANR	679780	CFGEntryNode	ENTRY		679767		True				
ANR	679781	CFGExitNode	EXIT		679767		True				
ANR	679782	Symbol	NULL		679767						
ANR	679783	Symbol	false		679767						
ANR	679784	Symbol	initialized		679767						
ANR	679785	Symbol	myTree		679767						
ANR	679786	Function	BoolExpr :: ~BoolExpr	35:0:1005:1067							
ANR	679787	FunctionDef	BoolExpr :: ~BoolExpr ()		679786	0					
ANR	679788	CompoundStatement		37:0:1029:1067	679786	0					
ANR	679789	IfStatement	if ( myTree )		679786	0					
ANR	679790	Condition	myTree	38:5:1036:1041	679786	0	True				
ANR	679791	Identifier	myTree		679786	0					
ANR	679792	CompoundStatement		2:14:15:15	679786	1					
ANR	679793	Statement	delete	39:2:1049:1054	679786	0	True				
ANR	679794	ExpressionStatement	myTree	39:9:1056:1062	679786	1	True				
ANR	679795	Identifier	myTree		679786	0					
ANR	679796	Identifier	BoolExpr :: ~BoolExpr		679786	1					
ANR	679797	ParameterList			679786	2					
ANR	679798	CFGEntryNode	ENTRY		679786		True				
ANR	679799	CFGExitNode	EXIT		679786		True				
ANR	679800	Symbol	myTree		679786						
ANR	679801	Function	BoolExpr :: ExprToMultiProfile	43:0:1070:3339							
ANR	679802	FunctionDef	"BoolExpr :: ExprToMultiProfile (classad :: ExprTree * expr , MultiProfile * & mp)"		679801	0					
ANR	679803	CompoundStatement		45:0:1151:3339	679801	0					
ANR	679804	IfStatement	if ( expr == NULL )		679801	0					
ANR	679805	Condition	expr == NULL	46:5:1158:1169	679801	0	True				
ANR	679806	EqualityExpression	expr == NULL		679801	0		==			
ANR	679807	Identifier	expr		679801	0					
ANR	679808	Identifier	NULL		679801	1					
ANR	679809	CompoundStatement		2:20:21:21	679801	1					
ANR	679810	ExpressionStatement	"cerr << ""error: input ExprTree is null"" << endl"	47:2:1177:1224	679801	0	True				
ANR	679811	ShiftExpression	"cerr << ""error: input ExprTree is null"" << endl"		679801	0		<<			
ANR	679812	Identifier	cerr		679801	0					
ANR	679813	ShiftExpression	"""error: input ExprTree is null"" << endl"		679801	1		<<			
ANR	679814	PrimaryExpression	"""error: input ExprTree is null"""		679801	0					
ANR	679815	Identifier	endl		679801	1					
ANR	679816	ReturnStatement	return false ;	49:2:1265:1277	679801	1	True				
ANR	679817	Identifier	false		679801	0					
ANR	679818	IfStatement	if ( ! mp -> Init ( expr ) )		679801	1					
ANR	679819	Condition	! mp -> Init ( expr )	52:5:1288:1304	679801	0	True				
ANR	679820	UnaryOperationExpression	! mp -> Init ( expr )		679801	0					
ANR	679821	UnaryOperator	!		679801	0					
ANR	679822	CallExpression	mp -> Init ( expr )		679801	1					
ANR	679823	Callee	mp -> Init		679801	0					
ANR	679824	PtrMemberAccess	mp -> Init		679801	0					
ANR	679825	Identifier	mp		679801	0					
ANR	679826	Identifier	Init		679801	1					
ANR	679827	ArgumentList	expr		679801	1					
ANR	679828	Argument	expr		679801	0					
ANR	679829	Identifier	expr		679801	0					
ANR	679830	CompoundStatement		8:25:156:156	679801	1					
ANR	679831	ExpressionStatement	"cerr << ""error: problem with MultiProfile::Init"" << endl"	53:2:1312:1368	679801	0	True				
ANR	679832	ShiftExpression	"cerr << ""error: problem with MultiProfile::Init"" << endl"		679801	0		<<			
ANR	679833	Identifier	cerr		679801	0					
ANR	679834	ShiftExpression	"""error: problem with MultiProfile::Init"" << endl"		679801	1		<<			
ANR	679835	PrimaryExpression	"""error: problem with MultiProfile::Init"""		679801	0					
ANR	679836	Identifier	endl		679801	1					
ANR	679837	ReturnStatement	return false ;	54:2:1372:1384	679801	1	True				
ANR	679838	Identifier	false		679801	0					
ANR	679839	IdentifierDeclStatement	classad :: ExprTree :: NodeKind kind ;	57:1:1391:1423	679801	2	True				
ANR	679840	IdentifierDecl	kind		679801	0					
ANR	679841	IdentifierDeclType	classad :: ExprTree :: NodeKind		679801	0					
ANR	679842	Identifier	kind		679801	1					
ANR	679843	IdentifierDeclStatement	classad :: Operation :: OpKind op ;	58:1:1426:1455	679801	3	True				
ANR	679844	IdentifierDecl	op		679801	0					
ANR	679845	IdentifierDeclType	classad :: Operation :: OpKind		679801	0					
ANR	679846	Identifier	op		679801	1					
ANR	679847	IdentifierDeclStatement	"classad :: ExprTree * left , * right , * junk ;"	59:1:1458:1496	679801	4	True				
ANR	679848	IdentifierDecl	* left		679801	0					
ANR	679849	IdentifierDeclType	classad :: ExprTree *		679801	0					
ANR	679850	Identifier	left		679801	1					
ANR	679851	IdentifierDecl	* right		679801	1					
ANR	679852	IdentifierDeclType	classad :: ExprTree *		679801	0					
ANR	679853	Identifier	right		679801	1					
ANR	679854	IdentifierDecl	* junk		679801	2					
ANR	679855	IdentifierDeclType	classad :: ExprTree *		679801	0					
ANR	679856	Identifier	junk		679801	1					
ANR	679857	Statement	Profile	60:1:1499:1505	679801	5	True				
ANR	679858	Statement	*	60:9:1507:1507	679801	6	True				
ANR	679859	Statement	currentProfile	60:10:1508:1521	679801	7	True				
ANR	679860	Statement	=	60:25:1523:1523	679801	8	True				
ANR	679861	Statement	new	60:27:1525:1527	679801	9	True				
ANR	679862	ExpressionStatement	Profile	60:31:1529:1536	679801	10	True				
ANR	679863	Identifier	Profile		679801	0					
ANR	679864	IdentifierDeclStatement	Stack < Profile > profStack ;	61:1:1539:1563	679801	11	True				
ANR	679865	IdentifierDecl	profStack		679801	0					
ANR	679866	IdentifierDeclType	Stack < Profile >		679801	0					
ANR	679867	Identifier	profStack		679801	1					
ANR	679868	IdentifierDeclStatement	classad :: Value val ;	62:1:1566:1584	679801	12	True				
ANR	679869	IdentifierDecl	val		679801	0					
ANR	679870	IdentifierDeclType	classad :: Value		679801	0					
ANR	679871	Identifier	val		679801	1					
ANR	679872	IdentifierDeclStatement	classad :: ExprTree * currentTree = expr ;	64:1:1588:1625	679801	13	True				
ANR	679873	IdentifierDecl	* currentTree = expr		679801	0					
ANR	679874	IdentifierDeclType	classad :: ExprTree *		679801	0					
ANR	679875	Identifier	currentTree		679801	1					
ANR	679876	AssignmentExpression	* currentTree = expr		679801	2		=			
ANR	679877	Identifier	expr		679801	0					
ANR	679878	Identifier	expr		679801	1					
ANR	679879	IdentifierDeclStatement	bool atLeftMostProfile = false ;	65:1:1628:1658	679801	14	True				
ANR	679880	IdentifierDecl	atLeftMostProfile = false		679801	0					
ANR	679881	IdentifierDeclType	bool		679801	0					
ANR	679882	Identifier	atLeftMostProfile		679801	1					
ANR	679883	AssignmentExpression	atLeftMostProfile = false		679801	2		=			
ANR	679884	Identifier	false		679801	0					
ANR	679885	Identifier	false		679801	1					
ANR	679886	WhileStatement	while ( ! atLeftMostProfile )		679801	15					
ANR	679887	Condition	! atLeftMostProfile	66:8:1668:1685	679801	0	True				
ANR	679888	UnaryOperationExpression	! atLeftMostProfile		679801	0					
ANR	679889	UnaryOperator	!		679801	0					
ANR	679890	Identifier	atLeftMostProfile		679801	1					
ANR	679891	CompoundStatement		22:29:537:537	679801	1					
ANR	679892	ExpressionStatement	kind = currentTree -> GetKind ( )	68:2:1694:1724	679801	0	True				
ANR	679893	AssignmentExpression	kind = currentTree -> GetKind ( )		679801	0		=			
ANR	679894	Identifier	kind		679801	0					
ANR	679895	CallExpression	currentTree -> GetKind ( )		679801	1					
ANR	679896	Callee	currentTree -> GetKind		679801	0					
ANR	679897	PtrMemberAccess	currentTree -> GetKind		679801	0					
ANR	679898	Identifier	currentTree		679801	0					
ANR	679899	Identifier	GetKind		679801	1					
ANR	679900	ArgumentList			679801	1					
ANR	679901	IfStatement	if ( kind == classad :: ExprTree :: ATTRREF_NODE || kind == classad :: ExprTree :: FN_CALL_NODE )		679801	1					
ANR	679902	Condition	kind == classad :: ExprTree :: ATTRREF_NODE || kind == classad :: ExprTree :: FN_CALL_NODE	70:6:1736:1820	679801	0	True				
ANR	679903	OrExpression	kind == classad :: ExprTree :: ATTRREF_NODE || kind == classad :: ExprTree :: FN_CALL_NODE		679801	0		||			
ANR	679904	EqualityExpression	kind == classad :: ExprTree :: ATTRREF_NODE		679801	0		==			
ANR	679905	Identifier	kind		679801	0					
ANR	679906	Identifier	classad :: ExprTree :: ATTRREF_NODE		679801	1					
ANR	679907	EqualityExpression	kind == classad :: ExprTree :: FN_CALL_NODE		679801	1		==			
ANR	679908	Identifier	kind		679801	0					
ANR	679909	Identifier	classad :: ExprTree :: FN_CALL_NODE		679801	1					
ANR	679910	CompoundStatement		28:2:674:674	679801	1					
ANR	679911	ExpressionStatement	atLeftMostProfile = true	73:3:1831:1855	679801	0	True				
ANR	679912	AssignmentExpression	atLeftMostProfile = true		679801	0		=			
ANR	679913	Identifier	atLeftMostProfile		679801	0					
ANR	679914	Identifier	true		679801	1					
ANR	679915	ContinueStatement	continue ;	74:3:1860:1868	679801	1	True				
ANR	679916	IfStatement	if ( kind != classad :: ExprTree :: OP_NODE )		679801	2					
ANR	679917	Condition	kind != classad :: ExprTree :: OP_NODE	77:6:1881:1914	679801	0	True				
ANR	679918	EqualityExpression	kind != classad :: ExprTree :: OP_NODE		679801	0		!=			
ANR	679919	Identifier	kind		679801	0					
ANR	679920	Identifier	classad :: ExprTree :: OP_NODE		679801	1					
ANR	679921	CompoundStatement		33:43:766:766	679801	1					
ANR	679922	ExpressionStatement	"cerr << ""error: bad form"" << endl"	78:3:1923:1956	679801	0	True				
ANR	679923	ShiftExpression	"cerr << ""error: bad form"" << endl"		679801	0		<<			
ANR	679924	Identifier	cerr		679801	0					
ANR	679925	ShiftExpression	"""error: bad form"" << endl"		679801	1		<<			
ANR	679926	PrimaryExpression	"""error: bad form"""		679801	0					
ANR	679927	Identifier	endl		679801	1					
ANR	679928	ReturnStatement	return false ;	80:3:1984:1996	679801	1	True				
ANR	679929	Identifier	false		679801	0					
ANR	679930	ExpressionStatement	"( ( classad :: Operation * ) currentTree ) -> GetComponents ( op , left , right , junk )"	83:2:2005:2100	679801	3	True				
ANR	679931	CallExpression	"( ( classad :: Operation * ) currentTree ) -> GetComponents ( op , left , right , junk )"		679801	0					
ANR	679932	Callee	( ( classad :: Operation * ) currentTree ) -> GetComponents		679801	0					
ANR	679933	PtrMemberAccess	( ( classad :: Operation * ) currentTree ) -> GetComponents		679801	0					
ANR	679934	CastExpression	( classad :: Operation * ) currentTree		679801	0					
ANR	679935	CastTarget	classad :: Operation *		679801	0					
ANR	679936	Identifier	currentTree		679801	1					
ANR	679937	Identifier	GetComponents		679801	1					
ANR	679938	ArgumentList	op		679801	1					
ANR	679939	Argument	op		679801	0					
ANR	679940	Identifier	op		679801	0					
ANR	679941	Argument	left		679801	1					
ANR	679942	Identifier	left		679801	0					
ANR	679943	Argument	right		679801	2					
ANR	679944	Identifier	right		679801	0					
ANR	679945	Argument	junk		679801	3					
ANR	679946	Identifier	junk		679801	0					
ANR	679947	WhileStatement	while ( op == classad :: Operation :: PARENTHESES_OP )		679801	4					
ANR	679948	Condition	op == classad :: Operation :: PARENTHESES_OP	86:9:2112:2151	679801	0	True				
ANR	679949	EqualityExpression	op == classad :: Operation :: PARENTHESES_OP		679801	0		==			
ANR	679950	Identifier	op		679801	0					
ANR	679951	Identifier	classad :: Operation :: PARENTHESES_OP		679801	1					
ANR	679952	CompoundStatement		42:52:1003:1003	679801	1					
ANR	679953	IfStatement	if ( left -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE )		679801	0					
ANR	679954	Condition	left -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE	87:7:2164:2214	679801	0	True				
ANR	679955	EqualityExpression	left -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE		679801	0		==			
ANR	679956	CallExpression	left -> GetKind ( )		679801	0					
ANR	679957	Callee	left -> GetKind		679801	0					
ANR	679958	PtrMemberAccess	left -> GetKind		679801	0					
ANR	679959	Identifier	left		679801	0					
ANR	679960	Identifier	GetKind		679801	1					
ANR	679961	ArgumentList			679801	1					
ANR	679962	Identifier	classad :: ExprTree :: ATTRREF_NODE		679801	1					
ANR	679963	CompoundStatement		43:61:1066:1066	679801	1					
ANR	679964	ExpressionStatement	atLeftMostProfile = true	88:4:2224:2248	679801	0	True				
ANR	679965	AssignmentExpression	atLeftMostProfile = true		679801	0		=			
ANR	679966	Identifier	atLeftMostProfile		679801	0					
ANR	679967	Identifier	true		679801	1					
ANR	679968	BreakStatement	break ;	89:4:2254:2259	679801	1	True				
ANR	679969	ExpressionStatement	"( ( classad :: Operation * ) left ) -> GetComponents ( op , left , right , junk )"	91:3:2269:2357	679801	1	True				
ANR	679970	CallExpression	"( ( classad :: Operation * ) left ) -> GetComponents ( op , left , right , junk )"		679801	0					
ANR	679971	Callee	( ( classad :: Operation * ) left ) -> GetComponents		679801	0					
ANR	679972	PtrMemberAccess	( ( classad :: Operation * ) left ) -> GetComponents		679801	0					
ANR	679973	CastExpression	( classad :: Operation * ) left		679801	0					
ANR	679974	CastTarget	classad :: Operation *		679801	0					
ANR	679975	Identifier	left		679801	1					
ANR	679976	Identifier	GetComponents		679801	1					
ANR	679977	ArgumentList	op		679801	1					
ANR	679978	Argument	op		679801	0					
ANR	679979	Identifier	op		679801	0					
ANR	679980	Argument	left		679801	1					
ANR	679981	Identifier	left		679801	0					
ANR	679982	Argument	right		679801	2					
ANR	679983	Identifier	right		679801	0					
ANR	679984	Argument	junk		679801	3					
ANR	679985	Identifier	junk		679801	0					
ANR	679986	IfStatement	if ( atLeftMostProfile == true )		679801	5					
ANR	679987	Condition	atLeftMostProfile == true	95:6:2370:2394	679801	0	True				
ANR	679988	EqualityExpression	atLeftMostProfile == true		679801	0		==			
ANR	679989	Identifier	atLeftMostProfile		679801	0					
ANR	679990	Identifier	true		679801	1					
ANR	679991	CompoundStatement		51:34:1246:1246	679801	1					
ANR	679992	ContinueStatement	continue ;	96:3:2403:2411	679801	0	True				
ANR	679993	IfStatement	if ( op != classad :: Operation :: LOGICAL_OR_OP )		679801	6					
ANR	679994	Condition	op != classad :: Operation :: LOGICAL_OR_OP	100:6:2476:2514	679801	0	True				
ANR	679995	EqualityExpression	op != classad :: Operation :: LOGICAL_OR_OP		679801	0		!=			
ANR	679996	Identifier	op		679801	0					
ANR	679997	Identifier	classad :: Operation :: LOGICAL_OR_OP		679801	1					
ANR	679998	CompoundStatement		56:48:1366:1366	679801	1					
ANR	679999	ExpressionStatement	atLeftMostProfile = true	101:3:2523:2547	679801	0	True				
ANR	680000	AssignmentExpression	atLeftMostProfile = true		679801	0		=			
ANR	680001	Identifier	atLeftMostProfile		679801	0					
ANR	680002	Identifier	true		679801	1					
ANR	680003	ContinueStatement	continue ;	102:3:2552:2560	679801	1	True				
ANR	680004	IfStatement	"if ( ! ExprToProfile ( right , currentProfile ) )"		679801	7					
ANR	680005	Condition	"! ExprToProfile ( right , currentProfile )"	106:6:2609:2647	679801	0	True				
ANR	680006	UnaryOperationExpression	"! ExprToProfile ( right , currentProfile )"		679801	0					
ANR	680007	UnaryOperator	!		679801	0					
ANR	680008	CallExpression	"ExprToProfile ( right , currentProfile )"		679801	1					
ANR	680009	Callee	ExprToProfile		679801	0					
ANR	680010	Identifier	ExprToProfile		679801	0					
ANR	680011	ArgumentList	right		679801	1					
ANR	680012	Argument	right		679801	0					
ANR	680013	Identifier	right		679801	0					
ANR	680014	Argument	currentProfile		679801	1					
ANR	680015	Identifier	currentProfile		679801	0					
ANR	680016	CompoundStatement		62:48:1499:1499	679801	1					
ANR	680017	ExpressionStatement	"cerr << ""error: problem with ExprToProfile"" << endl"	107:3:2656:2707	679801	0	True				
ANR	680018	ShiftExpression	"cerr << ""error: problem with ExprToProfile"" << endl"		679801	0		<<			
ANR	680019	Identifier	cerr		679801	0					
ANR	680020	ShiftExpression	"""error: problem with ExprToProfile"" << endl"		679801	1		<<			
ANR	680021	PrimaryExpression	"""error: problem with ExprToProfile"""		679801	0					
ANR	680022	Identifier	endl		679801	1					
ANR	680023	ReturnStatement	return false ;	109:3:2753:2765	679801	1	True				
ANR	680024	Identifier	false		679801	0					
ANR	680025	ElseStatement	else		679801	0					
ANR	680026	CompoundStatement		67:7:1626:1626	679801	0					
ANR	680027	ExpressionStatement	profStack . Push ( currentProfile )	112:3:2783:2815	679801	0	True				
ANR	680028	CallExpression	profStack . Push ( currentProfile )		679801	0					
ANR	680029	Callee	profStack . Push		679801	0					
ANR	680030	MemberAccess	profStack . Push		679801	0					
ANR	680031	Identifier	profStack		679801	0					
ANR	680032	Identifier	Push		679801	1					
ANR	680033	ArgumentList	currentProfile		679801	1					
ANR	680034	Argument	currentProfile		679801	0					
ANR	680035	Identifier	currentProfile		679801	0					
ANR	680036	ExpressionStatement	currentTree = left	113:3:2820:2838	679801	1	True				
ANR	680037	AssignmentExpression	currentTree = left		679801	0		=			
ANR	680038	Identifier	currentTree		679801	0					
ANR	680039	Identifier	left		679801	1					
ANR	680040	Statement	currentProfile	115:2:2846:2859	679801	8	True				
ANR	680041	Statement	=	115:17:2861:2861	679801	9	True				
ANR	680042	Statement	new	115:19:2863:2865	679801	10	True				
ANR	680043	ExpressionStatement	Profile	115:23:2867:2874	679801	11	True				
ANR	680044	Identifier	Profile		679801	0					
ANR	680045	IfStatement	"if ( ! ExprToProfile ( currentTree , currentProfile ) )"		679801	16					
ANR	680046	Condition	"! ExprToProfile ( currentTree , currentProfile )"	119:5:2919:2963	679801	0	True				
ANR	680047	UnaryOperationExpression	"! ExprToProfile ( currentTree , currentProfile )"		679801	0					
ANR	680048	UnaryOperator	!		679801	0					
ANR	680049	CallExpression	"ExprToProfile ( currentTree , currentProfile )"		679801	1					
ANR	680050	Callee	ExprToProfile		679801	0					
ANR	680051	Identifier	ExprToProfile		679801	0					
ANR	680052	ArgumentList	currentTree		679801	1					
ANR	680053	Argument	currentTree		679801	0					
ANR	680054	Identifier	currentTree		679801	0					
ANR	680055	Argument	currentProfile		679801	1					
ANR	680056	Identifier	currentProfile		679801	0					
ANR	680057	CompoundStatement		75:53:1815:1815	679801	1					
ANR	680058	ExpressionStatement	"cerr << ""error: problem with ExprToProfile"" << endl"	120:2:2971:3022	679801	0	True				
ANR	680059	ShiftExpression	"cerr << ""error: problem with ExprToProfile"" << endl"		679801	0		<<			
ANR	680060	Identifier	cerr		679801	0					
ANR	680061	ShiftExpression	"""error: problem with ExprToProfile"" << endl"		679801	1		<<			
ANR	680062	PrimaryExpression	"""error: problem with ExprToProfile"""		679801	0					
ANR	680063	Identifier	endl		679801	1					
ANR	680064	Statement	delete	122:2:3066:3071	679801	1	True				
ANR	680065	ExpressionStatement	currentProfile	122:9:3073:3087	679801	2	True				
ANR	680066	Identifier	currentProfile		679801	0					
ANR	680067	ReturnStatement	return false ;	123:2:3091:3103	679801	3	True				
ANR	680068	Identifier	false		679801	0					
ANR	680069	ExpressionStatement	mp -> AppendProfile ( currentProfile )	127:1:3183:3218	679801	17	True				
ANR	680070	CallExpression	mp -> AppendProfile ( currentProfile )		679801	0					
ANR	680071	Callee	mp -> AppendProfile		679801	0					
ANR	680072	PtrMemberAccess	mp -> AppendProfile		679801	0					
ANR	680073	Identifier	mp		679801	0					
ANR	680074	Identifier	AppendProfile		679801	1					
ANR	680075	ArgumentList	currentProfile		679801	1					
ANR	680076	Argument	currentProfile		679801	0					
ANR	680077	Identifier	currentProfile		679801	0					
ANR	680078	WhileStatement	while ( ! profStack . IsEmpty ( ) )		679801	18					
ANR	680079	Condition	! profStack . IsEmpty ( )	129:8:3229:3249	679801	0	True				
ANR	680080	UnaryOperationExpression	! profStack . IsEmpty ( )		679801	0					
ANR	680081	UnaryOperator	!		679801	0					
ANR	680082	CallExpression	profStack . IsEmpty ( )		679801	1					
ANR	680083	Callee	profStack . IsEmpty		679801	0					
ANR	680084	MemberAccess	profStack . IsEmpty		679801	0					
ANR	680085	Identifier	profStack		679801	0					
ANR	680086	Identifier	IsEmpty		679801	1					
ANR	680087	ArgumentList			679801	1					
ANR	680088	CompoundStatement		85:32:2101:2101	679801	1					
ANR	680089	ExpressionStatement	mp -> AppendProfile ( profStack . Pop ( ) )	130:2:3257:3294	679801	0	True				
ANR	680090	CallExpression	mp -> AppendProfile ( profStack . Pop ( ) )		679801	0					
ANR	680091	Callee	mp -> AppendProfile		679801	0					
ANR	680092	PtrMemberAccess	mp -> AppendProfile		679801	0					
ANR	680093	Identifier	mp		679801	0					
ANR	680094	Identifier	AppendProfile		679801	1					
ANR	680095	ArgumentList	profStack . Pop ( )		679801	1					
ANR	680096	Argument	profStack . Pop ( )		679801	0					
ANR	680097	CallExpression	profStack . Pop ( )		679801	0					
ANR	680098	Callee	profStack . Pop		679801	0					
ANR	680099	MemberAccess	profStack . Pop		679801	0					
ANR	680100	Identifier	profStack		679801	0					
ANR	680101	Identifier	Pop		679801	1					
ANR	680102	ArgumentList			679801	1					
ANR	680103	ExpressionStatement	mp -> isLiteral = false	133:1:3301:3322	679801	19	True				
ANR	680104	AssignmentExpression	mp -> isLiteral = false		679801	0		=			
ANR	680105	PtrMemberAccess	mp -> isLiteral		679801	0					
ANR	680106	Identifier	mp		679801	0					
ANR	680107	Identifier	isLiteral		679801	1					
ANR	680108	Identifier	false		679801	1					
ANR	680109	ReturnStatement	return true ;	135:1:3326:3337	679801	20	True				
ANR	680110	Identifier	true		679801	0					
ANR	680111	ReturnType	bool		679801	1					
ANR	680112	Identifier	BoolExpr :: ExprToMultiProfile		679801	2					
ANR	680113	ParameterList	"classad :: ExprTree * expr , MultiProfile * & mp"		679801	3					
ANR	680114	Parameter	classad :: ExprTree * expr	44:20:1106:1128	679801	0	True				
ANR	680115	ParameterType	classad :: ExprTree *		679801	0					
ANR	680116	Identifier	expr		679801	1					
ANR	680117	Parameter	MultiProfile * & mp	44:45:1131:1147	679801	1	True				
ANR	680118	ParameterType	MultiProfile * &		679801	0					
ANR	680119	Identifier	mp		679801	1					
ANR	680120	CFGEntryNode	ENTRY		679801		True				
ANR	680121	CFGExitNode	EXIT		679801		True				
ANR	680122	Symbol	classad :: ExprTree :: OP_NODE		679801						
ANR	680123	Symbol	left -> GetKind		679801						
ANR	680124	Symbol	mp -> Init		679801						
ANR	680125	Symbol	* currentTree		679801						
ANR	680126	Symbol	classad :: Operation :: PARENTHESES_OP		679801						
ANR	680127	Symbol	* mp		679801						
ANR	680128	Symbol	profStack		679801						
ANR	680129	Symbol	atLeftMostProfile		679801						
ANR	680130	Symbol	expr		679801						
ANR	680131	Symbol	classad :: ExprTree :: ATTRREF_NODE		679801						
ANR	680132	Symbol	* left		679801						
ANR	680133	Symbol	profStack . IsEmpty		679801						
ANR	680134	Symbol	val		679801						
ANR	680135	Symbol	op		679801						
ANR	680136	Symbol	currentTree		679801						
ANR	680137	Symbol	mp -> isLiteral		679801						
ANR	680138	Symbol	mp		679801						
ANR	680139	Symbol	NULL		679801						
ANR	680140	Symbol	kind		679801						
ANR	680141	Symbol	false		679801						
ANR	680142	Symbol	right		679801						
ANR	680143	Symbol	classad :: Operation :: LOGICAL_OR_OP		679801						
ANR	680144	Symbol	ExprToProfile		679801						
ANR	680145	Symbol	currentTree -> GetKind		679801						
ANR	680146	Symbol	left		679801						
ANR	680147	Symbol	true		679801						
ANR	680148	Symbol	junk		679801						
ANR	680149	Symbol	profStack . Pop		679801						
ANR	680150	Symbol	currentProfile		679801						
ANR	680151	Symbol	classad :: ExprTree :: FN_CALL_NODE		679801						
ANR	680152	Function	BoolExpr :: ValToMultiProfile	138:0:3342:3543							
ANR	680153	FunctionDef	"BoolExpr :: ValToMultiProfile (classad :: Value & val , MultiProfile * & mp)"		680152	0					
ANR	680154	CompoundStatement		140:0:3418:3543	680152	0					
ANR	680155	IfStatement	if ( ! mp -> InitVal ( val ) )		680152	0					
ANR	680156	Condition	! mp -> InitVal ( val )	141:5:3425:3443	680152	0	True				
ANR	680157	UnaryOperationExpression	! mp -> InitVal ( val )		680152	0					
ANR	680158	UnaryOperator	!		680152	0					
ANR	680159	CallExpression	mp -> InitVal ( val )		680152	1					
ANR	680160	Callee	mp -> InitVal		680152	0					
ANR	680161	PtrMemberAccess	mp -> InitVal		680152	0					
ANR	680162	Identifier	mp		680152	0					
ANR	680163	Identifier	InitVal		680152	1					
ANR	680164	ArgumentList	val		680152	1					
ANR	680165	Argument	val		680152	0					
ANR	680166	Identifier	val		680152	0					
ANR	680167	CompoundStatement		2:27:28:28	680152	1					
ANR	680168	ExpressionStatement	"cerr << ""error: problem with MultiProfile::Init"" << endl"	142:2:3451:3507	680152	0	True				
ANR	680169	ShiftExpression	"cerr << ""error: problem with MultiProfile::Init"" << endl"		680152	0		<<			
ANR	680170	Identifier	cerr		680152	0					
ANR	680171	ShiftExpression	"""error: problem with MultiProfile::Init"" << endl"		680152	1		<<			
ANR	680172	PrimaryExpression	"""error: problem with MultiProfile::Init"""		680152	0					
ANR	680173	Identifier	endl		680152	1					
ANR	680174	ReturnStatement	return false ;	143:2:3511:3523	680152	1	True				
ANR	680175	Identifier	false		680152	0					
ANR	680176	ReturnStatement	return true ;	145:1:3530:3541	680152	1	True				
ANR	680177	Identifier	true		680152	0					
ANR	680178	ReturnType	bool		680152	1					
ANR	680179	Identifier	BoolExpr :: ValToMultiProfile		680152	2					
ANR	680180	ParameterList	"classad :: Value & val , MultiProfile * & mp"		680152	3					
ANR	680181	Parameter	classad :: Value & val	139:19:3377:3395	680152	0	True				
ANR	680182	ParameterType	classad :: Value &		680152	0					
ANR	680183	Identifier	val		680152	1					
ANR	680184	Parameter	MultiProfile * & mp	139:40:3398:3414	680152	1	True				
ANR	680185	ParameterType	MultiProfile * &		680152	0					
ANR	680186	Identifier	mp		680152	1					
ANR	680187	CFGEntryNode	ENTRY		680152		True				
ANR	680188	CFGExitNode	EXIT		680152		True				
ANR	680189	Symbol	val		680152						
ANR	680190	Symbol	mp		680152						
ANR	680191	Symbol	false		680152						
ANR	680192	Symbol	true		680152						
ANR	680193	Symbol	* mp		680152						
ANR	680194	Symbol	mp -> InitVal		680152						
ANR	680195	Function	BoolExpr :: ExprToProfile	148:0:3546:5857							
ANR	680196	FunctionDef	"BoolExpr :: ExprToProfile (classad :: ExprTree * expr , Profile * & p)"		680195	0					
ANR	680197	CompoundStatement		150:0:3616:5857	680195	0					
ANR	680198	IfStatement	if ( expr == NULL )		680195	0					
ANR	680199	Condition	expr == NULL	151:5:3623:3634	680195	0	True				
ANR	680200	EqualityExpression	expr == NULL		680195	0		==			
ANR	680201	Identifier	expr		680195	0					
ANR	680202	Identifier	NULL		680195	1					
ANR	680203	CompoundStatement		2:20:21:21	680195	1					
ANR	680204	ExpressionStatement	"cerr << ""error: input ExprTree is null"" << endl"	152:2:3642:3689	680195	0	True				
ANR	680205	ShiftExpression	"cerr << ""error: input ExprTree is null"" << endl"		680195	0		<<			
ANR	680206	Identifier	cerr		680195	0					
ANR	680207	ShiftExpression	"""error: input ExprTree is null"" << endl"		680195	1		<<			
ANR	680208	PrimaryExpression	"""error: input ExprTree is null"""		680195	0					
ANR	680209	Identifier	endl		680195	1					
ANR	680210	ReturnStatement	return false ;	154:2:3730:3742	680195	1	True				
ANR	680211	Identifier	false		680195	0					
ANR	680212	IfStatement	if ( ! p -> Init ( expr ) )		680195	1					
ANR	680213	Condition	! p -> Init ( expr )	158:5:3784:3799	680195	0	True				
ANR	680214	UnaryOperationExpression	! p -> Init ( expr )		680195	0					
ANR	680215	UnaryOperator	!		680195	0					
ANR	680216	CallExpression	p -> Init ( expr )		680195	1					
ANR	680217	Callee	p -> Init		680195	0					
ANR	680218	PtrMemberAccess	p -> Init		680195	0					
ANR	680219	Identifier	p		680195	0					
ANR	680220	Identifier	Init		680195	1					
ANR	680221	ArgumentList	expr		680195	1					
ANR	680222	Argument	expr		680195	0					
ANR	680223	Identifier	expr		680195	0					
ANR	680224	CompoundStatement		9:24:186:186	680195	1					
ANR	680225	ExpressionStatement	"cerr << ""error: problem with Profile::Init"" << endl"	159:2:3807:3858	680195	0	True				
ANR	680226	ShiftExpression	"cerr << ""error: problem with Profile::Init"" << endl"		680195	0		<<			
ANR	680227	Identifier	cerr		680195	0					
ANR	680228	ShiftExpression	"""error: problem with Profile::Init"" << endl"		680195	1		<<			
ANR	680229	PrimaryExpression	"""error: problem with Profile::Init"""		680195	0					
ANR	680230	Identifier	endl		680195	1					
ANR	680231	ReturnStatement	return false ;	160:2:3862:3874	680195	1	True				
ANR	680232	Identifier	false		680195	0					
ANR	680233	IdentifierDeclStatement	classad :: ExprTree :: NodeKind kind ;	163:1:3882:3914	680195	2	True				
ANR	680234	IdentifierDecl	kind		680195	0					
ANR	680235	IdentifierDeclType	classad :: ExprTree :: NodeKind		680195	0					
ANR	680236	Identifier	kind		680195	1					
ANR	680237	IdentifierDeclStatement	classad :: Operation :: OpKind op ;	164:1:3917:3946	680195	3	True				
ANR	680238	IdentifierDecl	op		680195	0					
ANR	680239	IdentifierDeclType	classad :: Operation :: OpKind		680195	0					
ANR	680240	Identifier	op		680195	1					
ANR	680241	IdentifierDeclStatement	"classad :: ExprTree * left , * right , * junk ;"	165:1:3949:3987	680195	4	True				
ANR	680242	IdentifierDecl	* left		680195	0					
ANR	680243	IdentifierDeclType	classad :: ExprTree *		680195	0					
ANR	680244	Identifier	left		680195	1					
ANR	680245	IdentifierDecl	* right		680195	1					
ANR	680246	IdentifierDeclType	classad :: ExprTree *		680195	0					
ANR	680247	Identifier	right		680195	1					
ANR	680248	IdentifierDecl	* junk		680195	2					
ANR	680249	IdentifierDeclType	classad :: ExprTree *		680195	0					
ANR	680250	Identifier	junk		680195	1					
ANR	680251	Statement	Condition	166:1:3990:3998	680195	5	True				
ANR	680252	Statement	*	166:11:4000:4000	680195	6	True				
ANR	680253	Statement	currentCondition	166:12:4001:4016	680195	7	True				
ANR	680254	Statement	=	166:29:4018:4018	680195	8	True				
ANR	680255	Statement	new	166:31:4020:4022	680195	9	True				
ANR	680256	ExpressionStatement	Condition	166:35:4024:4033	680195	10	True				
ANR	680257	Identifier	Condition		680195	0					
ANR	680258	IdentifierDeclStatement	Stack < Condition > condStack ;	167:1:4036:4062	680195	11	True				
ANR	680259	IdentifierDecl	condStack		680195	0					
ANR	680260	IdentifierDeclType	Stack < Condition >		680195	0					
ANR	680261	Identifier	condStack		680195	1					
ANR	680262	IdentifierDeclStatement	classad :: Value val ;	168:1:4065:4083	680195	12	True				
ANR	680263	IdentifierDecl	val		680195	0					
ANR	680264	IdentifierDeclType	classad :: Value		680195	0					
ANR	680265	Identifier	val		680195	1					
ANR	680266	IdentifierDeclStatement	classad :: ExprTree * currentTree = expr ;	170:1:4088:4125	680195	13	True				
ANR	680267	IdentifierDecl	* currentTree = expr		680195	0					
ANR	680268	IdentifierDeclType	classad :: ExprTree *		680195	0					
ANR	680269	Identifier	currentTree		680195	1					
ANR	680270	AssignmentExpression	* currentTree = expr		680195	2		=			
ANR	680271	Identifier	expr		680195	0					
ANR	680272	Identifier	expr		680195	1					
ANR	680273	IdentifierDeclStatement	bool atLeftMostCondition = false ;	171:1:4128:4160	680195	14	True				
ANR	680274	IdentifierDecl	atLeftMostCondition = false		680195	0					
ANR	680275	IdentifierDeclType	bool		680195	0					
ANR	680276	Identifier	atLeftMostCondition		680195	1					
ANR	680277	AssignmentExpression	atLeftMostCondition = false		680195	2		=			
ANR	680278	Identifier	false		680195	0					
ANR	680279	Identifier	false		680195	1					
ANR	680280	WhileStatement	while ( ! atLeftMostCondition )		680195	15					
ANR	680281	Condition	! atLeftMostCondition	173:8:4171:4190	680195	0	True				
ANR	680282	UnaryOperationExpression	! atLeftMostCondition		680195	0					
ANR	680283	UnaryOperator	!		680195	0					
ANR	680284	Identifier	atLeftMostCondition		680195	1					
ANR	680285	CompoundStatement		24:31:577:577	680195	1					
ANR	680286	ExpressionStatement	kind = currentTree -> GetKind ( )	175:2:4199:4229	680195	0	True				
ANR	680287	AssignmentExpression	kind = currentTree -> GetKind ( )		680195	0		=			
ANR	680288	Identifier	kind		680195	0					
ANR	680289	CallExpression	currentTree -> GetKind ( )		680195	1					
ANR	680290	Callee	currentTree -> GetKind		680195	0					
ANR	680291	PtrMemberAccess	currentTree -> GetKind		680195	0					
ANR	680292	Identifier	currentTree		680195	0					
ANR	680293	Identifier	GetKind		680195	1					
ANR	680294	ArgumentList			680195	1					
ANR	680295	IfStatement	if ( kind == classad :: ExprTree :: ATTRREF_NODE || kind == classad :: ExprTree :: FN_CALL_NODE )		680195	1					
ANR	680296	Condition	kind == classad :: ExprTree :: ATTRREF_NODE || kind == classad :: ExprTree :: FN_CALL_NODE	177:6:4238:4322	680195	0	True				
ANR	680297	OrExpression	kind == classad :: ExprTree :: ATTRREF_NODE || kind == classad :: ExprTree :: FN_CALL_NODE		680195	0		||			
ANR	680298	EqualityExpression	kind == classad :: ExprTree :: ATTRREF_NODE		680195	0		==			
ANR	680299	Identifier	kind		680195	0					
ANR	680300	Identifier	classad :: ExprTree :: ATTRREF_NODE		680195	1					
ANR	680301	EqualityExpression	kind == classad :: ExprTree :: FN_CALL_NODE		680195	1		==			
ANR	680302	Identifier	kind		680195	0					
ANR	680303	Identifier	classad :: ExprTree :: FN_CALL_NODE		680195	1					
ANR	680304	CompoundStatement		30:2:711:711	680195	1					
ANR	680305	ExpressionStatement	atLeftMostCondition = true	180:3:4333:4359	680195	0	True				
ANR	680306	AssignmentExpression	atLeftMostCondition = true		680195	0		=			
ANR	680307	Identifier	atLeftMostCondition		680195	0					
ANR	680308	Identifier	true		680195	1					
ANR	680309	ContinueStatement	continue ;	181:3:4364:4372	680195	1	True				
ANR	680310	IfStatement	if ( kind != classad :: ExprTree :: OP_NODE )		680195	2					
ANR	680311	Condition	kind != classad :: ExprTree :: OP_NODE	184:6:4385:4418	680195	0	True				
ANR	680312	EqualityExpression	kind != classad :: ExprTree :: OP_NODE		680195	0		!=			
ANR	680313	Identifier	kind		680195	0					
ANR	680314	Identifier	classad :: ExprTree :: OP_NODE		680195	1					
ANR	680315	CompoundStatement		35:43:805:805	680195	1					
ANR	680316	ExpressionStatement	"cerr << ""error: bad form"" << endl"	185:3:4427:4460	680195	0	True				
ANR	680317	ShiftExpression	"cerr << ""error: bad form"" << endl"		680195	0		<<			
ANR	680318	Identifier	cerr		680195	0					
ANR	680319	ShiftExpression	"""error: bad form"" << endl"		680195	1		<<			
ANR	680320	PrimaryExpression	"""error: bad form"""		680195	0					
ANR	680321	Identifier	endl		680195	1					
ANR	680322	ReturnStatement	return false ;	187:3:4488:4500	680195	1	True				
ANR	680323	Identifier	false		680195	0					
ANR	680324	ExpressionStatement	"( ( classad :: Operation * ) currentTree ) -> GetComponents ( op , left , right , junk )"	190:2:4509:4604	680195	3	True				
ANR	680325	CallExpression	"( ( classad :: Operation * ) currentTree ) -> GetComponents ( op , left , right , junk )"		680195	0					
ANR	680326	Callee	( ( classad :: Operation * ) currentTree ) -> GetComponents		680195	0					
ANR	680327	PtrMemberAccess	( ( classad :: Operation * ) currentTree ) -> GetComponents		680195	0					
ANR	680328	CastExpression	( classad :: Operation * ) currentTree		680195	0					
ANR	680329	CastTarget	classad :: Operation *		680195	0					
ANR	680330	Identifier	currentTree		680195	1					
ANR	680331	Identifier	GetComponents		680195	1					
ANR	680332	ArgumentList	op		680195	1					
ANR	680333	Argument	op		680195	0					
ANR	680334	Identifier	op		680195	0					
ANR	680335	Argument	left		680195	1					
ANR	680336	Identifier	left		680195	0					
ANR	680337	Argument	right		680195	2					
ANR	680338	Identifier	right		680195	0					
ANR	680339	Argument	junk		680195	3					
ANR	680340	Identifier	junk		680195	0					
ANR	680341	WhileStatement	while ( op == classad :: Operation :: PARENTHESES_OP )		680195	4					
ANR	680342	Condition	op == classad :: Operation :: PARENTHESES_OP	193:9:4616:4655	680195	0	True				
ANR	680343	EqualityExpression	op == classad :: Operation :: PARENTHESES_OP		680195	0		==			
ANR	680344	Identifier	op		680195	0					
ANR	680345	Identifier	classad :: Operation :: PARENTHESES_OP		680195	1					
ANR	680346	CompoundStatement		44:52:1042:1042	680195	1					
ANR	680347	IfStatement	if ( left -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE )		680195	0					
ANR	680348	Condition	left -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE	194:7:4668:4718	680195	0	True				
ANR	680349	EqualityExpression	left -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE		680195	0		==			
ANR	680350	CallExpression	left -> GetKind ( )		680195	0					
ANR	680351	Callee	left -> GetKind		680195	0					
ANR	680352	PtrMemberAccess	left -> GetKind		680195	0					
ANR	680353	Identifier	left		680195	0					
ANR	680354	Identifier	GetKind		680195	1					
ANR	680355	ArgumentList			680195	1					
ANR	680356	Identifier	classad :: ExprTree :: ATTRREF_NODE		680195	1					
ANR	680357	CompoundStatement		45:61:1105:1105	680195	1					
ANR	680358	ExpressionStatement	atLeftMostCondition = true	195:4:4728:4754	680195	0	True				
ANR	680359	AssignmentExpression	atLeftMostCondition = true		680195	0		=			
ANR	680360	Identifier	atLeftMostCondition		680195	0					
ANR	680361	Identifier	true		680195	1					
ANR	680362	BreakStatement	break ;	196:4:4760:4765	680195	1	True				
ANR	680363	ExpressionStatement	"( ( classad :: Operation * ) left ) -> GetComponents ( op , left , right , junk )"	198:3:4775:4863	680195	1	True				
ANR	680364	CallExpression	"( ( classad :: Operation * ) left ) -> GetComponents ( op , left , right , junk )"		680195	0					
ANR	680365	Callee	( ( classad :: Operation * ) left ) -> GetComponents		680195	0					
ANR	680366	PtrMemberAccess	( ( classad :: Operation * ) left ) -> GetComponents		680195	0					
ANR	680367	CastExpression	( classad :: Operation * ) left		680195	0					
ANR	680368	CastTarget	classad :: Operation *		680195	0					
ANR	680369	Identifier	left		680195	1					
ANR	680370	Identifier	GetComponents		680195	1					
ANR	680371	ArgumentList	op		680195	1					
ANR	680372	Argument	op		680195	0					
ANR	680373	Identifier	op		680195	0					
ANR	680374	Argument	left		680195	1					
ANR	680375	Identifier	left		680195	0					
ANR	680376	Argument	right		680195	2					
ANR	680377	Identifier	right		680195	0					
ANR	680378	Argument	junk		680195	3					
ANR	680379	Identifier	junk		680195	0					
ANR	680380	IfStatement	if ( atLeftMostCondition == true )		680195	5					
ANR	680381	Condition	atLeftMostCondition == true	202:6:4876:4902	680195	0	True				
ANR	680382	EqualityExpression	atLeftMostCondition == true		680195	0		==			
ANR	680383	Identifier	atLeftMostCondition		680195	0					
ANR	680384	Identifier	true		680195	1					
ANR	680385	CompoundStatement		53:36:1289:1289	680195	1					
ANR	680386	ContinueStatement	continue ;	203:3:4911:4919	680195	0	True				
ANR	680387	IfStatement	if ( op != classad :: Operation :: LOGICAL_AND_OP )		680195	6					
ANR	680388	Condition	op != classad :: Operation :: LOGICAL_AND_OP	207:6:4986:5025	680195	0	True				
ANR	680389	EqualityExpression	op != classad :: Operation :: LOGICAL_AND_OP		680195	0		!=			
ANR	680390	Identifier	op		680195	0					
ANR	680391	Identifier	classad :: Operation :: LOGICAL_AND_OP		680195	1					
ANR	680392	CompoundStatement		58:49:1412:1412	680195	1					
ANR	680393	ExpressionStatement	atLeftMostCondition = true	208:3:5034:5060	680195	0	True				
ANR	680394	AssignmentExpression	atLeftMostCondition = true		680195	0		=			
ANR	680395	Identifier	atLeftMostCondition		680195	0					
ANR	680396	Identifier	true		680195	1					
ANR	680397	ContinueStatement	continue ;	209:3:5065:5073	680195	1	True				
ANR	680398	IfStatement	"if ( ! ExprToCondition ( right , currentCondition ) )"		680195	7					
ANR	680399	Condition	"! ExprToCondition ( right , currentCondition )"	213:6:5124:5166	680195	0	True				
ANR	680400	UnaryOperationExpression	"! ExprToCondition ( right , currentCondition )"		680195	0					
ANR	680401	UnaryOperator	!		680195	0					
ANR	680402	CallExpression	"ExprToCondition ( right , currentCondition )"		680195	1					
ANR	680403	Callee	ExprToCondition		680195	0					
ANR	680404	Identifier	ExprToCondition		680195	0					
ANR	680405	ArgumentList	right		680195	1					
ANR	680406	Argument	right		680195	0					
ANR	680407	Identifier	right		680195	0					
ANR	680408	Argument	currentCondition		680195	1					
ANR	680409	Identifier	currentCondition		680195	0					
ANR	680410	CompoundStatement		64:52:1553:1553	680195	1					
ANR	680411	ExpressionStatement	"cerr << ""error: found NULL ptr in expr"" << endl"	214:3:5175:5222	680195	0	True				
ANR	680412	ShiftExpression	"cerr << ""error: found NULL ptr in expr"" << endl"		680195	0		<<			
ANR	680413	Identifier	cerr		680195	0					
ANR	680414	ShiftExpression	"""error: found NULL ptr in expr"" << endl"		680195	1		<<			
ANR	680415	PrimaryExpression	"""error: found NULL ptr in expr"""		680195	0					
ANR	680416	Identifier	endl		680195	1					
ANR	680417	Statement	delete	216:3:5264:5269	680195	1	True				
ANR	680418	ExpressionStatement	currentCondition	216:10:5271:5287	680195	2	True				
ANR	680419	Identifier	currentCondition		680195	0					
ANR	680420	ReturnStatement	return false ;	217:3:5292:5304	680195	3	True				
ANR	680421	Identifier	false		680195	0					
ANR	680422	ElseStatement	else		680195	0					
ANR	680423	CompoundStatement		70:7:1700:1700	680195	0					
ANR	680424	ExpressionStatement	condStack . Push ( currentCondition )	220:3:5322:5356	680195	0	True				
ANR	680425	CallExpression	condStack . Push ( currentCondition )		680195	0					
ANR	680426	Callee	condStack . Push		680195	0					
ANR	680427	MemberAccess	condStack . Push		680195	0					
ANR	680428	Identifier	condStack		680195	0					
ANR	680429	Identifier	Push		680195	1					
ANR	680430	ArgumentList	currentCondition		680195	1					
ANR	680431	Argument	currentCondition		680195	0					
ANR	680432	Identifier	currentCondition		680195	0					
ANR	680433	ExpressionStatement	currentTree = left	221:3:5361:5379	680195	1	True				
ANR	680434	AssignmentExpression	currentTree = left		680195	0		=			
ANR	680435	Identifier	currentTree		680195	0					
ANR	680436	Identifier	left		680195	1					
ANR	680437	Statement	currentCondition	224:2:5388:5403	680195	8	True				
ANR	680438	Statement	=	224:19:5405:5405	680195	9	True				
ANR	680439	Statement	new	224:21:5407:5409	680195	10	True				
ANR	680440	ExpressionStatement	Condition	224:25:5411:5420	680195	11	True				
ANR	680441	Identifier	Condition		680195	0					
ANR	680442	IfStatement	"if ( ! ExprToCondition ( currentTree , currentCondition ) )"		680195	16					
ANR	680443	Condition	"! ExprToCondition ( currentTree , currentCondition )"	228:5:5467:5515	680195	0	True				
ANR	680444	UnaryOperationExpression	"! ExprToCondition ( currentTree , currentCondition )"		680195	0					
ANR	680445	UnaryOperator	!		680195	0					
ANR	680446	CallExpression	"ExprToCondition ( currentTree , currentCondition )"		680195	1					
ANR	680447	Callee	ExprToCondition		680195	0					
ANR	680448	Identifier	ExprToCondition		680195	0					
ANR	680449	ArgumentList	currentTree		680195	1					
ANR	680450	Argument	currentTree		680195	0					
ANR	680451	Identifier	currentTree		680195	0					
ANR	680452	Argument	currentCondition		680195	1					
ANR	680453	Identifier	currentCondition		680195	0					
ANR	680454	CompoundStatement		79:57:1902:1902	680195	1					
ANR	680455	ExpressionStatement	"cerr << ""error: found NULL ptr in expr"" << endl"	229:2:5523:5570	680195	0	True				
ANR	680456	ShiftExpression	"cerr << ""error: found NULL ptr in expr"" << endl"		680195	0		<<			
ANR	680457	Identifier	cerr		680195	0					
ANR	680458	ShiftExpression	"""error: found NULL ptr in expr"" << endl"		680195	1		<<			
ANR	680459	PrimaryExpression	"""error: found NULL ptr in expr"""		680195	0					
ANR	680460	Identifier	endl		680195	1					
ANR	680461	Statement	delete	231:2:5610:5615	680195	1	True				
ANR	680462	ExpressionStatement	currentCondition	231:9:5617:5633	680195	2	True				
ANR	680463	Identifier	currentCondition		680195	0					
ANR	680464	ReturnStatement	return false ;	232:2:5637:5649	680195	3	True				
ANR	680465	Identifier	false		680195	0					
ANR	680466	ExpressionStatement	p -> AppendCondition ( currentCondition )	236:1:5723:5761	680195	17	True				
ANR	680467	CallExpression	p -> AppendCondition ( currentCondition )		680195	0					
ANR	680468	Callee	p -> AppendCondition		680195	0					
ANR	680469	PtrMemberAccess	p -> AppendCondition		680195	0					
ANR	680470	Identifier	p		680195	0					
ANR	680471	Identifier	AppendCondition		680195	1					
ANR	680472	ArgumentList	currentCondition		680195	1					
ANR	680473	Argument	currentCondition		680195	0					
ANR	680474	Identifier	currentCondition		680195	0					
ANR	680475	WhileStatement	while ( ! condStack . IsEmpty ( ) )		680195	18					
ANR	680476	Condition	! condStack . IsEmpty ( )	237:8:5771:5791	680195	0	True				
ANR	680477	UnaryOperationExpression	! condStack . IsEmpty ( )		680195	0					
ANR	680478	UnaryOperator	!		680195	0					
ANR	680479	CallExpression	condStack . IsEmpty ( )		680195	1					
ANR	680480	Callee	condStack . IsEmpty		680195	0					
ANR	680481	MemberAccess	condStack . IsEmpty		680195	0					
ANR	680482	Identifier	condStack		680195	0					
ANR	680483	Identifier	IsEmpty		680195	1					
ANR	680484	ArgumentList			680195	1					
ANR	680485	CompoundStatement		88:32:2178:2178	680195	1					
ANR	680486	ExpressionStatement	p -> AppendCondition ( condStack . Pop ( ) )	238:2:5799:5837	680195	0	True				
ANR	680487	CallExpression	p -> AppendCondition ( condStack . Pop ( ) )		680195	0					
ANR	680488	Callee	p -> AppendCondition		680195	0					
ANR	680489	PtrMemberAccess	p -> AppendCondition		680195	0					
ANR	680490	Identifier	p		680195	0					
ANR	680491	Identifier	AppendCondition		680195	1					
ANR	680492	ArgumentList	condStack . Pop ( )		680195	1					
ANR	680493	Argument	condStack . Pop ( )		680195	0					
ANR	680494	CallExpression	condStack . Pop ( )		680195	0					
ANR	680495	Callee	condStack . Pop		680195	0					
ANR	680496	MemberAccess	condStack . Pop		680195	0					
ANR	680497	Identifier	condStack		680195	0					
ANR	680498	Identifier	Pop		680195	1					
ANR	680499	ArgumentList			680195	1					
ANR	680500	ReturnStatement	return true ;	241:1:5844:5855	680195	19	True				
ANR	680501	Identifier	true		680195	0					
ANR	680502	ReturnType	bool		680195	1					
ANR	680503	Identifier	BoolExpr :: ExprToProfile		680195	2					
ANR	680504	ParameterList	"classad :: ExprTree * expr , Profile * & p"		680195	3					
ANR	680505	Parameter	classad :: ExprTree * expr	149:15:3577:3599	680195	0	True				
ANR	680506	ParameterType	classad :: ExprTree *		680195	0					
ANR	680507	Identifier	expr		680195	1					
ANR	680508	Parameter	Profile * & p	149:40:3602:3612	680195	1	True				
ANR	680509	ParameterType	Profile * &		680195	0					
ANR	680510	Identifier	p		680195	1					
ANR	680511	CFGEntryNode	ENTRY		680195		True				
ANR	680512	CFGExitNode	EXIT		680195		True				
ANR	680513	Symbol	atLeftMostCondition		680195						
ANR	680514	Symbol	classad :: ExprTree :: OP_NODE		680195						
ANR	680515	Symbol	left -> GetKind		680195						
ANR	680516	Symbol	* currentTree		680195						
ANR	680517	Symbol	classad :: Operation :: PARENTHESES_OP		680195						
ANR	680518	Symbol	ExprToCondition		680195						
ANR	680519	Symbol	p -> Init		680195						
ANR	680520	Symbol	expr		680195						
ANR	680521	Symbol	classad :: ExprTree :: ATTRREF_NODE		680195						
ANR	680522	Symbol	* left		680195						
ANR	680523	Symbol	val		680195						
ANR	680524	Symbol	op		680195						
ANR	680525	Symbol	currentTree		680195						
ANR	680526	Symbol	classad :: Operation :: LOGICAL_AND_OP		680195						
ANR	680527	Symbol	NULL		680195						
ANR	680528	Symbol	condStack . IsEmpty		680195						
ANR	680529	Symbol	kind		680195						
ANR	680530	Symbol	false		680195						
ANR	680531	Symbol	currentCondition		680195						
ANR	680532	Symbol	right		680195						
ANR	680533	Symbol	p		680195						
ANR	680534	Symbol	currentTree -> GetKind		680195						
ANR	680535	Symbol	left		680195						
ANR	680536	Symbol	condStack		680195						
ANR	680537	Symbol	condStack . Pop		680195						
ANR	680538	Symbol	true		680195						
ANR	680539	Symbol	junk		680195						
ANR	680540	Symbol	* p		680195						
ANR	680541	Symbol	classad :: ExprTree :: FN_CALL_NODE		680195						
ANR	680542	Function	BoolExpr :: ExprToCondition	244:0:5860:12366							
ANR	680543	FunctionDef	"BoolExpr :: ExprToCondition (classad :: ExprTree * expr , Condition * & c)"		680542	0					
ANR	680544	CompoundStatement		246:0:5934:12366	680542	0					
ANR	680545	IfStatement	if ( expr == NULL )		680542	0					
ANR	680546	Condition	expr == NULL	247:5:5941:5952	680542	0	True				
ANR	680547	EqualityExpression	expr == NULL		680542	0		==			
ANR	680548	Identifier	expr		680542	0					
ANR	680549	Identifier	NULL		680542	1					
ANR	680550	CompoundStatement		2:20:21:21	680542	1					
ANR	680551	ExpressionStatement	"cerr << ""error: ExprToCondition given NULL ptr"" << endl"	248:2:5960:6015	680542	0	True				
ANR	680552	ShiftExpression	"cerr << ""error: ExprToCondition given NULL ptr"" << endl"		680542	0		<<			
ANR	680553	Identifier	cerr		680542	0					
ANR	680554	ShiftExpression	"""error: ExprToCondition given NULL ptr"" << endl"		680542	1		<<			
ANR	680555	PrimaryExpression	"""error: ExprToCondition given NULL ptr"""		680542	0					
ANR	680556	Identifier	endl		680542	1					
ANR	680557	ReturnStatement	return false ;	250:2:6063:6075	680542	1	True				
ANR	680558	Identifier	false		680542	0					
ANR	680559	IdentifierDeclStatement	classad :: ExprTree :: NodeKind kind ;	253:1:6082:6114	680542	1	True				
ANR	680560	IdentifierDecl	kind		680542	0					
ANR	680561	IdentifierDeclType	classad :: ExprTree :: NodeKind		680542	0					
ANR	680562	Identifier	kind		680542	1					
ANR	680563	IdentifierDeclStatement	classad :: Operation :: OpKind op = classad :: Operation :: __NO_OP__ ;	254:1:6118:6179	680542	2	True				
ANR	680564	IdentifierDecl	op = classad :: Operation :: __NO_OP__		680542	0					
ANR	680565	IdentifierDeclType	classad :: Operation :: OpKind		680542	0					
ANR	680566	Identifier	op		680542	1					
ANR	680567	AssignmentExpression	op = classad :: Operation :: __NO_OP__		680542	2		=			
ANR	680568	Identifier	classad :: Operation :: __NO_OP__		680542	0					
ANR	680569	Identifier	classad :: Operation :: __NO_OP__		680542	1					
ANR	680570	IdentifierDeclStatement	classad :: ExprTree * left = NULL ;	255:1:6182:6212	680542	3	True				
ANR	680571	IdentifierDecl	* left = NULL		680542	0					
ANR	680572	IdentifierDeclType	classad :: ExprTree *		680542	0					
ANR	680573	Identifier	left		680542	1					
ANR	680574	AssignmentExpression	* left = NULL		680542	2		=			
ANR	680575	Identifier	NULL		680542	0					
ANR	680576	Identifier	NULL		680542	1					
ANR	680577	IdentifierDeclStatement	classad :: ExprTree * right = NULL ;	256:1:6215:6246	680542	4	True				
ANR	680578	IdentifierDecl	* right = NULL		680542	0					
ANR	680579	IdentifierDeclType	classad :: ExprTree *		680542	0					
ANR	680580	Identifier	right		680542	1					
ANR	680581	AssignmentExpression	* right = NULL		680542	2		=			
ANR	680582	Identifier	NULL		680542	0					
ANR	680583	Identifier	NULL		680542	1					
ANR	680584	IdentifierDeclStatement	classad :: ExprTree * base = NULL ;	257:1:6249:6279	680542	5	True				
ANR	680585	IdentifierDecl	* base = NULL		680542	0					
ANR	680586	IdentifierDeclType	classad :: ExprTree *		680542	0					
ANR	680587	Identifier	base		680542	1					
ANR	680588	AssignmentExpression	* base = NULL		680542	2		=			
ANR	680589	Identifier	NULL		680542	0					
ANR	680590	Identifier	NULL		680542	1					
ANR	680591	IdentifierDeclStatement	classad :: ExprTree * junk = NULL ;	258:1:6282:6312	680542	6	True				
ANR	680592	IdentifierDecl	* junk = NULL		680542	0					
ANR	680593	IdentifierDeclType	classad :: ExprTree *		680542	0					
ANR	680594	Identifier	junk		680542	1					
ANR	680595	AssignmentExpression	* junk = NULL		680542	2		=			
ANR	680596	Identifier	NULL		680542	0					
ANR	680597	Identifier	NULL		680542	1					
ANR	680598	IdentifierDeclStatement	string attr ;	259:1:6315:6326	680542	7	True				
ANR	680599	IdentifierDecl	attr		680542	0					
ANR	680600	IdentifierDeclType	string		680542	0					
ANR	680601	Identifier	attr		680542	1					
ANR	680602	IdentifierDeclStatement	bool junkBool ;	260:1:6329:6342	680542	8	True				
ANR	680603	IdentifierDecl	junkBool		680542	0					
ANR	680604	IdentifierDeclType	bool		680542	0					
ANR	680605	Identifier	junkBool		680542	1					
ANR	680606	IdentifierDeclStatement	classad :: Value val ;	261:1:6345:6363	680542	9	True				
ANR	680607	IdentifierDecl	val		680542	0					
ANR	680608	IdentifierDeclType	classad :: Value		680542	0					
ANR	680609	Identifier	val		680542	1					
ANR	680610	ExpressionStatement	kind = expr -> GetKind ( )	264:1:6368:6391	680542	10	True				
ANR	680611	AssignmentExpression	kind = expr -> GetKind ( )		680542	0		=			
ANR	680612	Identifier	kind		680542	0					
ANR	680613	CallExpression	expr -> GetKind ( )		680542	1					
ANR	680614	Callee	expr -> GetKind		680542	0					
ANR	680615	PtrMemberAccess	expr -> GetKind		680542	0					
ANR	680616	Identifier	expr		680542	0					
ANR	680617	Identifier	GetKind		680542	1					
ANR	680618	ArgumentList			680542	1					
ANR	680619	IfStatement	if ( kind == classad :: ExprTree :: ATTRREF_NODE )		680542	11					
ANR	680620	Condition	kind == classad :: ExprTree :: ATTRREF_NODE	266:5:6399:6437	680542	0	True				
ANR	680621	EqualityExpression	kind == classad :: ExprTree :: ATTRREF_NODE		680542	0		==			
ANR	680622	Identifier	kind		680542	0					
ANR	680623	Identifier	classad :: ExprTree :: ATTRREF_NODE		680542	1					
ANR	680624	CompoundStatement		21:47:506:506	680542	1					
ANR	680625	ExpressionStatement	"( ( classad :: AttributeReference * ) expr ) -> GetComponents ( base , attr , junkBool )"	267:2:6445:6542	680542	0	True				
ANR	680626	CallExpression	"( ( classad :: AttributeReference * ) expr ) -> GetComponents ( base , attr , junkBool )"		680542	0					
ANR	680627	Callee	( ( classad :: AttributeReference * ) expr ) -> GetComponents		680542	0					
ANR	680628	PtrMemberAccess	( ( classad :: AttributeReference * ) expr ) -> GetComponents		680542	0					
ANR	680629	CastExpression	( classad :: AttributeReference * ) expr		680542	0					
ANR	680630	CastTarget	classad :: AttributeReference *		680542	0					
ANR	680631	Identifier	expr		680542	1					
ANR	680632	Identifier	GetComponents		680542	1					
ANR	680633	ArgumentList	base		680542	1					
ANR	680634	Argument	base		680542	0					
ANR	680635	Identifier	base		680542	0					
ANR	680636	Argument	attr		680542	1					
ANR	680637	Identifier	attr		680542	0					
ANR	680638	Argument	junkBool		680542	2					
ANR	680639	Identifier	junkBool		680542	0					
ANR	680640	IfStatement	"if ( ! c -> Init ( attr , expr -> Copy ( ) , true ) )"		680542	1					
ANR	680641	Condition	"! c -> Init ( attr , expr -> Copy ( ) , true )"	269:6:6550:6586	680542	0	True				
ANR	680642	UnaryOperationExpression	"! c -> Init ( attr , expr -> Copy ( ) , true )"		680542	0					
ANR	680643	UnaryOperator	!		680542	0					
ANR	680644	CallExpression	"c -> Init ( attr , expr -> Copy ( ) , true )"		680542	1					
ANR	680645	Callee	c -> Init		680542	0					
ANR	680646	PtrMemberAccess	c -> Init		680542	0					
ANR	680647	Identifier	c		680542	0					
ANR	680648	Identifier	Init		680542	1					
ANR	680649	ArgumentList	attr		680542	1					
ANR	680650	Argument	attr		680542	0					
ANR	680651	Identifier	attr		680542	0					
ANR	680652	Argument	expr -> Copy ( )		680542	1					
ANR	680653	CallExpression	expr -> Copy ( )		680542	0					
ANR	680654	Callee	expr -> Copy		680542	0					
ANR	680655	PtrMemberAccess	expr -> Copy		680542	0					
ANR	680656	Identifier	expr		680542	0					
ANR	680657	Identifier	Copy		680542	1					
ANR	680658	ArgumentList			680542	1					
ANR	680659	Argument	true		680542	2					
ANR	680660	Identifier	true		680542	0					
ANR	680661	CompoundStatement		24:46:655:655	680542	1					
ANR	680662	ExpressionStatement	"cerr << ""error: problem with Condition::Init"" << endl"	270:6:6598:6651	680542	0	True				
ANR	680663	ShiftExpression	"cerr << ""error: problem with Condition::Init"" << endl"		680542	0		<<			
ANR	680664	Identifier	cerr		680542	0					
ANR	680665	ShiftExpression	"""error: problem with Condition::Init"" << endl"		680542	1		<<			
ANR	680666	PrimaryExpression	"""error: problem with Condition::Init"""		680542	0					
ANR	680667	Identifier	endl		680542	1					
ANR	680668	ReturnStatement	return false ;	271:6:6659:6671	680542	1	True				
ANR	680669	Identifier	false		680542	0					
ANR	680670	ReturnStatement	return true ;	273:2:6679:6690	680542	2	True				
ANR	680671	Identifier	true		680542	0					
ANR	680672	IfStatement	if ( kind == classad :: ExprTree :: FN_CALL_NODE )		680542	12					
ANR	680673	Condition	kind == classad :: ExprTree :: FN_CALL_NODE	276:5:6701:6739	680542	0	True				
ANR	680674	EqualityExpression	kind == classad :: ExprTree :: FN_CALL_NODE		680542	0		==			
ANR	680675	Identifier	kind		680542	0					
ANR	680676	Identifier	classad :: ExprTree :: FN_CALL_NODE		680542	1					
ANR	680677	CompoundStatement		31:47:808:808	680542	1					
ANR	680678	IfStatement	if ( ! c -> InitComplex ( expr -> Copy ( ) ) )		680542	0					
ANR	680679	Condition	! c -> InitComplex ( expr -> Copy ( ) )	277:6:6751:6782	680542	0	True				
ANR	680680	UnaryOperationExpression	! c -> InitComplex ( expr -> Copy ( ) )		680542	0					
ANR	680681	UnaryOperator	!		680542	0					
ANR	680682	CallExpression	c -> InitComplex ( expr -> Copy ( ) )		680542	1					
ANR	680683	Callee	c -> InitComplex		680542	0					
ANR	680684	PtrMemberAccess	c -> InitComplex		680542	0					
ANR	680685	Identifier	c		680542	0					
ANR	680686	Identifier	InitComplex		680542	1					
ANR	680687	ArgumentList	expr -> Copy ( )		680542	1					
ANR	680688	Argument	expr -> Copy ( )		680542	0					
ANR	680689	CallExpression	expr -> Copy ( )		680542	0					
ANR	680690	Callee	expr -> Copy		680542	0					
ANR	680691	PtrMemberAccess	expr -> Copy		680542	0					
ANR	680692	Identifier	expr		680542	0					
ANR	680693	Identifier	Copy		680542	1					
ANR	680694	ArgumentList			680542	1					
ANR	680695	CompoundStatement		32:41:851:851	680542	1					
ANR	680696	ExpressionStatement	"cerr << ""error: problem with Condition::InitComplex"" << endl"	278:6:6794:6854	680542	0	True				
ANR	680697	ShiftExpression	"cerr << ""error: problem with Condition::InitComplex"" << endl"		680542	0		<<			
ANR	680698	Identifier	cerr		680542	0					
ANR	680699	ShiftExpression	"""error: problem with Condition::InitComplex"" << endl"		680542	1		<<			
ANR	680700	PrimaryExpression	"""error: problem with Condition::InitComplex"""		680542	0					
ANR	680701	Identifier	endl		680542	1					
ANR	680702	ReturnStatement	return false ;	279:6:6862:6874	680542	1	True				
ANR	680703	Identifier	false		680542	0					
ANR	680704	ReturnStatement	return true ;	281:2:6882:6893	680542	1	True				
ANR	680705	Identifier	true		680542	0					
ANR	680706	IfStatement	if ( kind != classad :: ExprTree :: OP_NODE )		680542	13					
ANR	680707	Condition	kind != classad :: ExprTree :: OP_NODE	284:5:6904:6937	680542	0	True				
ANR	680708	EqualityExpression	kind != classad :: ExprTree :: OP_NODE		680542	0		!=			
ANR	680709	Identifier	kind		680542	0					
ANR	680710	Identifier	classad :: ExprTree :: OP_NODE		680542	1					
ANR	680711	CompoundStatement		39:42:1006:1006	680542	1					
ANR	680712	ExpressionStatement	"cerr << ""error: no operator/attribute found"" << endl"	285:2:6945:6997	680542	0	True				
ANR	680713	ShiftExpression	"cerr << ""error: no operator/attribute found"" << endl"		680542	0		<<			
ANR	680714	Identifier	cerr		680542	0					
ANR	680715	ShiftExpression	"""error: no operator/attribute found"" << endl"		680542	1		<<			
ANR	680716	PrimaryExpression	"""error: no operator/attribute found"""		680542	0					
ANR	680717	Identifier	endl		680542	1					
ANR	680718	ReturnStatement	return false ;	287:2:7044:7056	680542	1	True				
ANR	680719	Identifier	false		680542	0					
ANR	680720	ExpressionStatement	"( ( classad :: Operation * ) expr ) -> GetComponents ( op , left , right , junk )"	290:1:7063:7135	680542	14	True				
ANR	680721	CallExpression	"( ( classad :: Operation * ) expr ) -> GetComponents ( op , left , right , junk )"		680542	0					
ANR	680722	Callee	( ( classad :: Operation * ) expr ) -> GetComponents		680542	0					
ANR	680723	PtrMemberAccess	( ( classad :: Operation * ) expr ) -> GetComponents		680542	0					
ANR	680724	CastExpression	( classad :: Operation * ) expr		680542	0					
ANR	680725	CastTarget	classad :: Operation *		680542	0					
ANR	680726	Identifier	expr		680542	1					
ANR	680727	Identifier	GetComponents		680542	1					
ANR	680728	ArgumentList	op		680542	1					
ANR	680729	Argument	op		680542	0					
ANR	680730	Identifier	op		680542	0					
ANR	680731	Argument	left		680542	1					
ANR	680732	Identifier	left		680542	0					
ANR	680733	Argument	right		680542	2					
ANR	680734	Identifier	right		680542	0					
ANR	680735	Argument	junk		680542	3					
ANR	680736	Identifier	junk		680542	0					
ANR	680737	WhileStatement	while ( op == classad :: Operation :: PARENTHESES_OP )		680542	15					
ANR	680738	Condition	op == classad :: Operation :: PARENTHESES_OP	292:8:7146:7185	680542	0	True				
ANR	680739	EqualityExpression	op == classad :: Operation :: PARENTHESES_OP		680542	0		==			
ANR	680740	Identifier	op		680542	0					
ANR	680741	Identifier	classad :: Operation :: PARENTHESES_OP		680542	1					
ANR	680742	CompoundStatement		47:51:1254:1254	680542	1					
ANR	680743	IfStatement	if ( left -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE )		680542	0					
ANR	680744	Condition	left -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE	293:6:7197:7247	680542	0	True				
ANR	680745	EqualityExpression	left -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE		680542	0		==			
ANR	680746	CallExpression	left -> GetKind ( )		680542	0					
ANR	680747	Callee	left -> GetKind		680542	0					
ANR	680748	PtrMemberAccess	left -> GetKind		680542	0					
ANR	680749	Identifier	left		680542	0					
ANR	680750	Identifier	GetKind		680542	1					
ANR	680751	ArgumentList			680542	1					
ANR	680752	Identifier	classad :: ExprTree :: ATTRREF_NODE		680542	1					
ANR	680753	CompoundStatement		48:60:1316:1316	680542	1					
ANR	680754	ExpressionStatement	"( ( classad :: AttributeReference * ) left ) -> GetComponents ( base , attr , junkBool )"	294:3:7256:7349	680542	0	True				
ANR	680755	CallExpression	"( ( classad :: AttributeReference * ) left ) -> GetComponents ( base , attr , junkBool )"		680542	0					
ANR	680756	Callee	( ( classad :: AttributeReference * ) left ) -> GetComponents		680542	0					
ANR	680757	PtrMemberAccess	( ( classad :: AttributeReference * ) left ) -> GetComponents		680542	0					
ANR	680758	CastExpression	( classad :: AttributeReference * ) left		680542	0					
ANR	680759	CastTarget	classad :: AttributeReference *		680542	0					
ANR	680760	Identifier	left		680542	1					
ANR	680761	Identifier	GetComponents		680542	1					
ANR	680762	ArgumentList	base		680542	1					
ANR	680763	Argument	base		680542	0					
ANR	680764	Identifier	base		680542	0					
ANR	680765	Argument	attr		680542	1					
ANR	680766	Identifier	attr		680542	0					
ANR	680767	Argument	junkBool		680542	2					
ANR	680768	Identifier	junkBool		680542	0					
ANR	680769	IfStatement	"if ( ! c -> Init ( attr , expr -> Copy ( ) , true ) )"		680542	1					
ANR	680770	Condition	"! c -> Init ( attr , expr -> Copy ( ) , true )"	296:7:7358:7394	680542	0	True				
ANR	680771	UnaryOperationExpression	"! c -> Init ( attr , expr -> Copy ( ) , true )"		680542	0					
ANR	680772	UnaryOperator	!		680542	0					
ANR	680773	CallExpression	"c -> Init ( attr , expr -> Copy ( ) , true )"		680542	1					
ANR	680774	Callee	c -> Init		680542	0					
ANR	680775	PtrMemberAccess	c -> Init		680542	0					
ANR	680776	Identifier	c		680542	0					
ANR	680777	Identifier	Init		680542	1					
ANR	680778	ArgumentList	attr		680542	1					
ANR	680779	Argument	attr		680542	0					
ANR	680780	Identifier	attr		680542	0					
ANR	680781	Argument	expr -> Copy ( )		680542	1					
ANR	680782	CallExpression	expr -> Copy ( )		680542	0					
ANR	680783	Callee	expr -> Copy		680542	0					
ANR	680784	PtrMemberAccess	expr -> Copy		680542	0					
ANR	680785	Identifier	expr		680542	0					
ANR	680786	Identifier	Copy		680542	1					
ANR	680787	ArgumentList			680542	1					
ANR	680788	Argument	true		680542	2					
ANR	680789	Identifier	true		680542	0					
ANR	680790	CompoundStatement		51:47:1463:1463	680542	1					
ANR	680791	ExpressionStatement	"cerr << ""error: problem with Condition::Init"" << endl"	297:6:7406:7459	680542	0	True				
ANR	680792	ShiftExpression	"cerr << ""error: problem with Condition::Init"" << endl"		680542	0		<<			
ANR	680793	Identifier	cerr		680542	0					
ANR	680794	ShiftExpression	"""error: problem with Condition::Init"" << endl"		680542	1		<<			
ANR	680795	PrimaryExpression	"""error: problem with Condition::Init"""		680542	0					
ANR	680796	Identifier	endl		680542	1					
ANR	680797	ReturnStatement	return false ;	298:6:7467:7479	680542	1	True				
ANR	680798	Identifier	false		680542	0					
ANR	680799	ReturnStatement	return true ;	300:3:7489:7500	680542	2	True				
ANR	680800	Identifier	true		680542	0					
ANR	680801	ExpressionStatement	"( ( classad :: Operation * ) left ) -> GetComponents ( op , left , right , junk )"	302:2:7509:7596	680542	1	True				
ANR	680802	CallExpression	"( ( classad :: Operation * ) left ) -> GetComponents ( op , left , right , junk )"		680542	0					
ANR	680803	Callee	( ( classad :: Operation * ) left ) -> GetComponents		680542	0					
ANR	680804	PtrMemberAccess	( ( classad :: Operation * ) left ) -> GetComponents		680542	0					
ANR	680805	CastExpression	( classad :: Operation * ) left		680542	0					
ANR	680806	CastTarget	classad :: Operation *		680542	0					
ANR	680807	Identifier	left		680542	1					
ANR	680808	Identifier	GetComponents		680542	1					
ANR	680809	ArgumentList	op		680542	1					
ANR	680810	Argument	op		680542	0					
ANR	680811	Identifier	op		680542	0					
ANR	680812	Argument	left		680542	1					
ANR	680813	Identifier	left		680542	0					
ANR	680814	Argument	right		680542	2					
ANR	680815	Identifier	right		680542	0					
ANR	680816	Argument	junk		680542	3					
ANR	680817	Identifier	junk		680542	0					
ANR	680818	IfStatement	if ( op == classad :: Operation :: LOGICAL_OR_OP )		680542	16					
ANR	680819	Condition	op == classad :: Operation :: LOGICAL_OR_OP	309:5:7742:7780	680542	0	True				
ANR	680820	EqualityExpression	op == classad :: Operation :: LOGICAL_OR_OP		680542	0		==			
ANR	680821	Identifier	op		680542	0					
ANR	680822	Identifier	classad :: Operation :: LOGICAL_OR_OP		680542	1					
ANR	680823	CompoundStatement		70:2:2041:2067	680542	1					
ANR	680824	IdentifierDeclStatement	"classad :: Operation :: OpKind leftOp , rightOp ;"	310:2:7788:7830	680542	0	True				
ANR	680825	IdentifierDecl	leftOp		680542	0					
ANR	680826	IdentifierDeclType	classad :: Operation :: OpKind		680542	0					
ANR	680827	Identifier	leftOp		680542	1					
ANR	680828	IdentifierDecl	rightOp		680542	1					
ANR	680829	IdentifierDeclType	classad :: Operation :: OpKind		680542	0					
ANR	680830	Identifier	rightOp		680542	1					
ANR	680831	IdentifierDeclStatement	classad :: ExprTree * left1 = NULL ;	311:2:7834:7865	680542	1	True				
ANR	680832	IdentifierDecl	* left1 = NULL		680542	0					
ANR	680833	IdentifierDeclType	classad :: ExprTree *		680542	0					
ANR	680834	Identifier	left1		680542	1					
ANR	680835	AssignmentExpression	* left1 = NULL		680542	2		=			
ANR	680836	Identifier	NULL		680542	0					
ANR	680837	Identifier	NULL		680542	1					
ANR	680838	IdentifierDeclStatement	classad :: ExprTree * right1 = NULL ;	312:2:7869:7901	680542	2	True				
ANR	680839	IdentifierDecl	* right1 = NULL		680542	0					
ANR	680840	IdentifierDeclType	classad :: ExprTree *		680542	0					
ANR	680841	Identifier	right1		680542	1					
ANR	680842	AssignmentExpression	* right1 = NULL		680542	2		=			
ANR	680843	Identifier	NULL		680542	0					
ANR	680844	Identifier	NULL		680542	1					
ANR	680845	IdentifierDeclStatement	classad :: ExprTree * left2 = NULL ;	313:2:7905:7936	680542	3	True				
ANR	680846	IdentifierDecl	* left2 = NULL		680542	0					
ANR	680847	IdentifierDeclType	classad :: ExprTree *		680542	0					
ANR	680848	Identifier	left2		680542	1					
ANR	680849	AssignmentExpression	* left2 = NULL		680542	2		=			
ANR	680850	Identifier	NULL		680542	0					
ANR	680851	Identifier	NULL		680542	1					
ANR	680852	IdentifierDeclStatement	classad :: ExprTree * right2 = NULL ;	314:2:7940:7972	680542	4	True				
ANR	680853	IdentifierDecl	* right2 = NULL		680542	0					
ANR	680854	IdentifierDeclType	classad :: ExprTree *		680542	0					
ANR	680855	Identifier	right2		680542	1					
ANR	680856	AssignmentExpression	* right2 = NULL		680542	2		=			
ANR	680857	Identifier	NULL		680542	0					
ANR	680858	Identifier	NULL		680542	1					
ANR	680859	IdentifierDeclStatement	"string leftAttr , rightAttr ;"	315:2:7976:8002	680542	5	True				
ANR	680860	IdentifierDecl	leftAttr		680542	0					
ANR	680861	IdentifierDeclType	string		680542	0					
ANR	680862	Identifier	leftAttr		680542	1					
ANR	680863	IdentifierDecl	rightAttr		680542	1					
ANR	680864	IdentifierDeclType	string		680542	0					
ANR	680865	Identifier	rightAttr		680542	1					
ANR	680866	IfStatement	if ( left != NULL && right != NULL && left -> GetKind ( ) == classad :: Operation :: OP_NODE && right -> GetKind ( ) == classad :: Operation :: OP_NODE )		680542	6					
ANR	680867	Condition	left != NULL && right != NULL && left -> GetKind ( ) == classad :: Operation :: OP_NODE && right -> GetKind ( ) == classad :: Operation :: OP_NODE	317:6:8011:8152	680542	0	True				
ANR	680868	AndExpression	left != NULL && right != NULL && left -> GetKind ( ) == classad :: Operation :: OP_NODE && right -> GetKind ( ) == classad :: Operation :: OP_NODE		680542	0		&&			
ANR	680869	EqualityExpression	left != NULL		680542	0		!=			
ANR	680870	Identifier	left		680542	0					
ANR	680871	Identifier	NULL		680542	1					
ANR	680872	AndExpression	right != NULL && left -> GetKind ( ) == classad :: Operation :: OP_NODE && right -> GetKind ( ) == classad :: Operation :: OP_NODE		680542	1		&&			
ANR	680873	EqualityExpression	right != NULL		680542	0		!=			
ANR	680874	Identifier	right		680542	0					
ANR	680875	Identifier	NULL		680542	1					
ANR	680876	AndExpression	left -> GetKind ( ) == classad :: Operation :: OP_NODE && right -> GetKind ( ) == classad :: Operation :: OP_NODE		680542	1		&&			
ANR	680877	EqualityExpression	left -> GetKind ( ) == classad :: Operation :: OP_NODE		680542	0		==			
ANR	680878	CallExpression	left -> GetKind ( )		680542	0					
ANR	680879	Callee	left -> GetKind		680542	0					
ANR	680880	PtrMemberAccess	left -> GetKind		680542	0					
ANR	680881	Identifier	left		680542	0					
ANR	680882	Identifier	GetKind		680542	1					
ANR	680883	ArgumentList			680542	1					
ANR	680884	Identifier	classad :: Operation :: OP_NODE		680542	1					
ANR	680885	EqualityExpression	right -> GetKind ( ) == classad :: Operation :: OP_NODE		680542	1		==			
ANR	680886	CallExpression	right -> GetKind ( )		680542	0					
ANR	680887	Callee	right -> GetKind		680542	0					
ANR	680888	PtrMemberAccess	right -> GetKind		680542	0					
ANR	680889	Identifier	right		680542	0					
ANR	680890	Identifier	GetKind		680542	1					
ANR	680891	ArgumentList			680542	1					
ANR	680892	Identifier	classad :: Operation :: OP_NODE		680542	1					
ANR	680893	CompoundStatement		75:54:2221:2221	680542	1					
ANR	680894	ExpressionStatement	"( ( classad :: Operation * ) left ) -> GetComponents ( leftOp , left1 , left2 , junk )"	321:3:8161:8254	680542	0	True				
ANR	680895	CallExpression	"( ( classad :: Operation * ) left ) -> GetComponents ( leftOp , left1 , left2 , junk )"		680542	0					
ANR	680896	Callee	( ( classad :: Operation * ) left ) -> GetComponents		680542	0					
ANR	680897	PtrMemberAccess	( ( classad :: Operation * ) left ) -> GetComponents		680542	0					
ANR	680898	CastExpression	( classad :: Operation * ) left		680542	0					
ANR	680899	CastTarget	classad :: Operation *		680542	0					
ANR	680900	Identifier	left		680542	1					
ANR	680901	Identifier	GetComponents		680542	1					
ANR	680902	ArgumentList	leftOp		680542	1					
ANR	680903	Argument	leftOp		680542	0					
ANR	680904	Identifier	leftOp		680542	0					
ANR	680905	Argument	left1		680542	1					
ANR	680906	Identifier	left1		680542	0					
ANR	680907	Argument	left2		680542	2					
ANR	680908	Identifier	left2		680542	0					
ANR	680909	Argument	junk		680542	3					
ANR	680910	Identifier	junk		680542	0					
ANR	680911	ExpressionStatement	"( ( classad :: Operation * ) right ) -> GetComponents ( rightOp , right1 , right2 , junk )"	323:3:8259:8357	680542	1	True				
ANR	680912	CallExpression	"( ( classad :: Operation * ) right ) -> GetComponents ( rightOp , right1 , right2 , junk )"		680542	0					
ANR	680913	Callee	( ( classad :: Operation * ) right ) -> GetComponents		680542	0					
ANR	680914	PtrMemberAccess	( ( classad :: Operation * ) right ) -> GetComponents		680542	0					
ANR	680915	CastExpression	( classad :: Operation * ) right		680542	0					
ANR	680916	CastTarget	classad :: Operation *		680542	0					
ANR	680917	Identifier	right		680542	1					
ANR	680918	Identifier	GetComponents		680542	1					
ANR	680919	ArgumentList	rightOp		680542	1					
ANR	680920	Argument	rightOp		680542	0					
ANR	680921	Identifier	rightOp		680542	0					
ANR	680922	Argument	right1		680542	1					
ANR	680923	Identifier	right1		680542	0					
ANR	680924	Argument	right2		680542	2					
ANR	680925	Identifier	right2		680542	0					
ANR	680926	Argument	junk		680542	3					
ANR	680927	Identifier	junk		680542	0					
ANR	680928	IfStatement	if ( leftOp == classad :: Operation :: PARENTHESES_OP && rightOp == classad :: Operation :: PARENTHESES_OP && left1 != NULL && right1 != NULL && left1 -> GetKind ( ) == classad :: Operation :: OP_NODE && right1 -> GetKind ( ) == classad :: Operation :: OP_NODE )		680542	2					
ANR	680929	Condition	leftOp == classad :: Operation :: PARENTHESES_OP && rightOp == classad :: Operation :: PARENTHESES_OP && left1 != NULL && right1 != NULL && left1 -> GetKind ( ) == classad :: Operation :: OP_NODE && right1 -> GetKind ( ) == classad :: Operation :: OP_NODE	325:7:8366:8619	680542	0	True				
ANR	680930	AndExpression	leftOp == classad :: Operation :: PARENTHESES_OP && rightOp == classad :: Operation :: PARENTHESES_OP && left1 != NULL && right1 != NULL && left1 -> GetKind ( ) == classad :: Operation :: OP_NODE && right1 -> GetKind ( ) == classad :: Operation :: OP_NODE		680542	0		&&			
ANR	680931	EqualityExpression	leftOp == classad :: Operation :: PARENTHESES_OP		680542	0		==			
ANR	680932	Identifier	leftOp		680542	0					
ANR	680933	Identifier	classad :: Operation :: PARENTHESES_OP		680542	1					
ANR	680934	AndExpression	rightOp == classad :: Operation :: PARENTHESES_OP && left1 != NULL && right1 != NULL && left1 -> GetKind ( ) == classad :: Operation :: OP_NODE && right1 -> GetKind ( ) == classad :: Operation :: OP_NODE		680542	1		&&			
ANR	680935	EqualityExpression	rightOp == classad :: Operation :: PARENTHESES_OP		680542	0		==			
ANR	680936	Identifier	rightOp		680542	0					
ANR	680937	Identifier	classad :: Operation :: PARENTHESES_OP		680542	1					
ANR	680938	AndExpression	left1 != NULL && right1 != NULL && left1 -> GetKind ( ) == classad :: Operation :: OP_NODE && right1 -> GetKind ( ) == classad :: Operation :: OP_NODE		680542	1		&&			
ANR	680939	EqualityExpression	left1 != NULL		680542	0		!=			
ANR	680940	Identifier	left1		680542	0					
ANR	680941	Identifier	NULL		680542	1					
ANR	680942	AndExpression	right1 != NULL && left1 -> GetKind ( ) == classad :: Operation :: OP_NODE && right1 -> GetKind ( ) == classad :: Operation :: OP_NODE		680542	1		&&			
ANR	680943	EqualityExpression	right1 != NULL		680542	0		!=			
ANR	680944	Identifier	right1		680542	0					
ANR	680945	Identifier	NULL		680542	1					
ANR	680946	AndExpression	left1 -> GetKind ( ) == classad :: Operation :: OP_NODE && right1 -> GetKind ( ) == classad :: Operation :: OP_NODE		680542	1		&&			
ANR	680947	EqualityExpression	left1 -> GetKind ( ) == classad :: Operation :: OP_NODE		680542	0		==			
ANR	680948	CallExpression	left1 -> GetKind ( )		680542	0					
ANR	680949	Callee	left1 -> GetKind		680542	0					
ANR	680950	PtrMemberAccess	left1 -> GetKind		680542	0					
ANR	680951	Identifier	left1		680542	0					
ANR	680952	Identifier	GetKind		680542	1					
ANR	680953	ArgumentList			680542	1					
ANR	680954	Identifier	classad :: Operation :: OP_NODE		680542	1					
ANR	680955	EqualityExpression	right1 -> GetKind ( ) == classad :: Operation :: OP_NODE		680542	1		==			
ANR	680956	CallExpression	right1 -> GetKind ( )		680542	0					
ANR	680957	Callee	right1 -> GetKind		680542	0					
ANR	680958	PtrMemberAccess	right1 -> GetKind		680542	0					
ANR	680959	Identifier	right1		680542	0					
ANR	680960	Identifier	GetKind		680542	1					
ANR	680961	ArgumentList			680542	1					
ANR	680962	Identifier	classad :: Operation :: OP_NODE		680542	1					
ANR	680963	CompoundStatement		85:56:2688:2688	680542	1					
ANR	680964	ExpressionStatement	"( ( classad :: Operation * ) left1 ) -> GetComponents ( leftOp , left1 , left2 , junk )"	331:4:8629:8744	680542	0	True				
ANR	680965	CallExpression	"( ( classad :: Operation * ) left1 ) -> GetComponents ( leftOp , left1 , left2 , junk )"		680542	0					
ANR	680966	Callee	( ( classad :: Operation * ) left1 ) -> GetComponents		680542	0					
ANR	680967	PtrMemberAccess	( ( classad :: Operation * ) left1 ) -> GetComponents		680542	0					
ANR	680968	CastExpression	( classad :: Operation * ) left1		680542	0					
ANR	680969	CastTarget	classad :: Operation *		680542	0					
ANR	680970	Identifier	left1		680542	1					
ANR	680971	Identifier	GetComponents		680542	1					
ANR	680972	ArgumentList	leftOp		680542	1					
ANR	680973	Argument	leftOp		680542	0					
ANR	680974	Identifier	leftOp		680542	0					
ANR	680975	Argument	left1		680542	1					
ANR	680976	Identifier	left1		680542	0					
ANR	680977	Argument	left2		680542	2					
ANR	680978	Identifier	left2		680542	0					
ANR	680979	Argument	junk		680542	3					
ANR	680980	Identifier	junk		680542	0					
ANR	680981	ExpressionStatement	"( ( classad :: Operation * ) right1 ) -> GetComponents ( rightOp , right1 , right2 , junk )"	334:4:8750:8889	680542	1	True				
ANR	680982	CallExpression	"( ( classad :: Operation * ) right1 ) -> GetComponents ( rightOp , right1 , right2 , junk )"		680542	0					
ANR	680983	Callee	( ( classad :: Operation * ) right1 ) -> GetComponents		680542	0					
ANR	680984	PtrMemberAccess	( ( classad :: Operation * ) right1 ) -> GetComponents		680542	0					
ANR	680985	CastExpression	( classad :: Operation * ) right1		680542	0					
ANR	680986	CastTarget	classad :: Operation *		680542	0					
ANR	680987	Identifier	right1		680542	1					
ANR	680988	Identifier	GetComponents		680542	1					
ANR	680989	ArgumentList	rightOp		680542	1					
ANR	680990	Argument	rightOp		680542	0					
ANR	680991	Identifier	rightOp		680542	0					
ANR	680992	Argument	right1		680542	1					
ANR	680993	Identifier	right1		680542	0					
ANR	680994	Argument	right2		680542	2					
ANR	680995	Identifier	right2		680542	0					
ANR	680996	Argument	junk		680542	3					
ANR	680997	Identifier	junk		680542	0					
ANR	680998	IfStatement	if ( left1 != NULL && right1 != NULL && leftOp >= classad :: Operation :: __COMPARISON_START__ && leftOp <= classad :: Operation :: __COMPARISON_END__ && rightOp >= classad :: Operation :: __COMPARISON_START__ && rightOp <= classad :: Operation :: __COMPARISON_END__ && left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE )		680542	3					
ANR	680999	Condition	left1 != NULL && right1 != NULL && leftOp >= classad :: Operation :: __COMPARISON_START__ && leftOp <= classad :: Operation :: __COMPARISON_END__ && rightOp >= classad :: Operation :: __COMPARISON_START__ && rightOp <= classad :: Operation :: __COMPARISON_END__ && left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE	339:10:8906:9415	680542	0	True				
ANR	681000	AndExpression	left1 != NULL && right1 != NULL && leftOp >= classad :: Operation :: __COMPARISON_START__ && leftOp <= classad :: Operation :: __COMPARISON_END__ && rightOp >= classad :: Operation :: __COMPARISON_START__ && rightOp <= classad :: Operation :: __COMPARISON_END__ && left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		680542	0		&&			
ANR	681001	EqualityExpression	left1 != NULL		680542	0		!=			
ANR	681002	Identifier	left1		680542	0					
ANR	681003	Identifier	NULL		680542	1					
ANR	681004	AndExpression	right1 != NULL && leftOp >= classad :: Operation :: __COMPARISON_START__ && leftOp <= classad :: Operation :: __COMPARISON_END__ && rightOp >= classad :: Operation :: __COMPARISON_START__ && rightOp <= classad :: Operation :: __COMPARISON_END__ && left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		680542	1		&&			
ANR	681005	EqualityExpression	right1 != NULL		680542	0		!=			
ANR	681006	Identifier	right1		680542	0					
ANR	681007	Identifier	NULL		680542	1					
ANR	681008	AndExpression	leftOp >= classad :: Operation :: __COMPARISON_START__ && leftOp <= classad :: Operation :: __COMPARISON_END__ && rightOp >= classad :: Operation :: __COMPARISON_START__ && rightOp <= classad :: Operation :: __COMPARISON_END__ && left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		680542	1		&&			
ANR	681009	RelationalExpression	leftOp >= classad :: Operation :: __COMPARISON_START__		680542	0		>=			
ANR	681010	Identifier	leftOp		680542	0					
ANR	681011	Identifier	classad :: Operation :: __COMPARISON_START__		680542	1					
ANR	681012	AndExpression	leftOp <= classad :: Operation :: __COMPARISON_END__ && rightOp >= classad :: Operation :: __COMPARISON_START__ && rightOp <= classad :: Operation :: __COMPARISON_END__ && left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		680542	1		&&			
ANR	681013	RelationalExpression	leftOp <= classad :: Operation :: __COMPARISON_END__		680542	0		<=			
ANR	681014	Identifier	leftOp		680542	0					
ANR	681015	Identifier	classad :: Operation :: __COMPARISON_END__		680542	1					
ANR	681016	AndExpression	rightOp >= classad :: Operation :: __COMPARISON_START__ && rightOp <= classad :: Operation :: __COMPARISON_END__ && left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		680542	1		&&			
ANR	681017	RelationalExpression	rightOp >= classad :: Operation :: __COMPARISON_START__		680542	0		>=			
ANR	681018	Identifier	rightOp		680542	0					
ANR	681019	Identifier	classad :: Operation :: __COMPARISON_START__		680542	1					
ANR	681020	AndExpression	rightOp <= classad :: Operation :: __COMPARISON_END__ && left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		680542	1		&&			
ANR	681021	RelationalExpression	rightOp <= classad :: Operation :: __COMPARISON_END__		680542	0		<=			
ANR	681022	Identifier	rightOp		680542	0					
ANR	681023	Identifier	classad :: Operation :: __COMPARISON_END__		680542	1					
ANR	681024	AndExpression	left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		680542	1		&&			
ANR	681025	EqualityExpression	left1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE		680542	0		==			
ANR	681026	CallExpression	left1 -> GetKind ( )		680542	0					
ANR	681027	Callee	left1 -> GetKind		680542	0					
ANR	681028	PtrMemberAccess	left1 -> GetKind		680542	0					
ANR	681029	Identifier	left1		680542	0					
ANR	681030	Identifier	GetKind		680542	1					
ANR	681031	ArgumentList			680542	1					
ANR	681032	Identifier	classad :: ExprTree :: ATTRREF_NODE		680542	1					
ANR	681033	AndExpression	right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE && left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		680542	1		&&			
ANR	681034	EqualityExpression	right1 -> GetKind ( ) == classad :: ExprTree :: ATTRREF_NODE		680542	0		==			
ANR	681035	CallExpression	right1 -> GetKind ( )		680542	0					
ANR	681036	Callee	right1 -> GetKind		680542	0					
ANR	681037	PtrMemberAccess	right1 -> GetKind		680542	0					
ANR	681038	Identifier	right1		680542	0					
ANR	681039	Identifier	GetKind		680542	1					
ANR	681040	ArgumentList			680542	1					
ANR	681041	Identifier	classad :: ExprTree :: ATTRREF_NODE		680542	1					
ANR	681042	AndExpression	left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE && right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		680542	1		&&			
ANR	681043	EqualityExpression	left2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		680542	0		==			
ANR	681044	CallExpression	left2 -> GetKind ( )		680542	0					
ANR	681045	Callee	left2 -> GetKind		680542	0					
ANR	681046	PtrMemberAccess	left2 -> GetKind		680542	0					
ANR	681047	Identifier	left2		680542	0					
ANR	681048	Identifier	GetKind		680542	1					
ANR	681049	ArgumentList			680542	1					
ANR	681050	Identifier	classad :: ExprTree :: LITERAL_NODE		680542	1					
ANR	681051	EqualityExpression	right2 -> GetKind ( ) == classad :: ExprTree :: LITERAL_NODE		680542	1		==			
ANR	681052	CallExpression	right2 -> GetKind ( )		680542	0					
ANR	681053	Callee	right2 -> GetKind		680542	0					
ANR	681054	PtrMemberAccess	right2 -> GetKind		680542	0					
ANR	681055	Identifier	right2		680542	0					
ANR	681056	Identifier	GetKind		680542	1					
ANR	681057	ArgumentList			680542	1					
ANR	681058	Identifier	classad :: ExprTree :: LITERAL_NODE		680542	1					
ANR	681059	CompoundStatement		103:60:3484:3484	680542	1					
ANR	681060	ExpressionStatement	"( ( classad :: AttributeReference * ) left1 ) -> GetComponents ( junk , leftAttr , junkBool )"	349:4:9425:9545	680542	0	True				
ANR	681061	CallExpression	"( ( classad :: AttributeReference * ) left1 ) -> GetComponents ( junk , leftAttr , junkBool )"		680542	0					
ANR	681062	Callee	( ( classad :: AttributeReference * ) left1 ) -> GetComponents		680542	0					
ANR	681063	PtrMemberAccess	( ( classad :: AttributeReference * ) left1 ) -> GetComponents		680542	0					
ANR	681064	CastExpression	( classad :: AttributeReference * ) left1		680542	0					
ANR	681065	CastTarget	classad :: AttributeReference *		680542	0					
ANR	681066	Identifier	left1		680542	1					
ANR	681067	Identifier	GetComponents		680542	1					
ANR	681068	ArgumentList	junk		680542	1					
ANR	681069	Argument	junk		680542	0					
ANR	681070	Identifier	junk		680542	0					
ANR	681071	Argument	leftAttr		680542	1					
ANR	681072	Identifier	leftAttr		680542	0					
ANR	681073	Argument	junkBool		680542	2					
ANR	681074	Identifier	junkBool		680542	0					
ANR	681075	ExpressionStatement	"( ( classad :: AttributeReference * ) right1 ) -> GetComponents ( junk , rightAttr , junkBool )"	352:4:9552:9676	680542	1	True				
ANR	681076	CallExpression	"( ( classad :: AttributeReference * ) right1 ) -> GetComponents ( junk , rightAttr , junkBool )"		680542	0					
ANR	681077	Callee	( ( classad :: AttributeReference * ) right1 ) -> GetComponents		680542	0					
ANR	681078	PtrMemberAccess	( ( classad :: AttributeReference * ) right1 ) -> GetComponents		680542	0					
ANR	681079	CastExpression	( classad :: AttributeReference * ) right1		680542	0					
ANR	681080	CastTarget	classad :: AttributeReference *		680542	0					
ANR	681081	Identifier	right1		680542	1					
ANR	681082	Identifier	GetComponents		680542	1					
ANR	681083	ArgumentList	junk		680542	1					
ANR	681084	Argument	junk		680542	0					
ANR	681085	Identifier	junk		680542	0					
ANR	681086	Argument	rightAttr		680542	1					
ANR	681087	Identifier	rightAttr		680542	0					
ANR	681088	Argument	junkBool		680542	2					
ANR	681089	Identifier	junkBool		680542	0					
ANR	681090	IfStatement	"if ( strcasecmp ( leftAttr . c_str ( ) , rightAttr . c_str ( ) ) == 0 )"		680542	2					
ANR	681091	Condition	"strcasecmp ( leftAttr . c_str ( ) , rightAttr . c_str ( ) ) == 0"	355:8:9686:9749	680542	0	True				
ANR	681092	EqualityExpression	"strcasecmp ( leftAttr . c_str ( ) , rightAttr . c_str ( ) ) == 0"		680542	0		==			
ANR	681093	CallExpression	"strcasecmp ( leftAttr . c_str ( ) , rightAttr . c_str ( ) )"		680542	0					
ANR	681094	Callee	strcasecmp		680542	0					
ANR	681095	Identifier	strcasecmp		680542	0					
ANR	681096	ArgumentList	leftAttr . c_str ( )		680542	1					
ANR	681097	Argument	leftAttr . c_str ( )		680542	0					
ANR	681098	CallExpression	leftAttr . c_str ( )		680542	0					
ANR	681099	Callee	leftAttr . c_str		680542	0					
ANR	681100	MemberAccess	leftAttr . c_str		680542	0					
ANR	681101	Identifier	leftAttr		680542	0					
ANR	681102	Identifier	c_str		680542	1					
ANR	681103	ArgumentList			680542	1					
ANR	681104	Argument	rightAttr . c_str ( )		680542	1					
ANR	681105	CallExpression	rightAttr . c_str ( )		680542	0					
ANR	681106	Callee	rightAttr . c_str		680542	0					
ANR	681107	MemberAccess	rightAttr . c_str		680542	0					
ANR	681108	Identifier	rightAttr		680542	0					
ANR	681109	Identifier	c_str		680542	1					
ANR	681110	ArgumentList			680542	1					
ANR	681111	PrimaryExpression	0		680542	1					
ANR	681112	CompoundStatement		112:5:3825:3857	680542	1					
ANR	681113	IdentifierDeclStatement	"classad :: Value leftVal , rightVal ;"	357:5:9760:9792	680542	0	True				
ANR	681114	IdentifierDecl	leftVal		680542	0					
ANR	681115	IdentifierDeclType	classad :: Value		680542	0					
ANR	681116	Identifier	leftVal		680542	1					
ANR	681117	IdentifierDecl	rightVal		680542	1					
ANR	681118	IdentifierDeclType	classad :: Value		680542	0					
ANR	681119	Identifier	rightVal		680542	1					
ANR	681120	ExpressionStatement	( ( classad :: Literal * ) left2 ) -> GetValue ( leftVal )	358:5:9799:9851	680542	1	True				
ANR	681121	CallExpression	( ( classad :: Literal * ) left2 ) -> GetValue ( leftVal )		680542	0					
ANR	681122	Callee	( ( classad :: Literal * ) left2 ) -> GetValue		680542	0					
ANR	681123	PtrMemberAccess	( ( classad :: Literal * ) left2 ) -> GetValue		680542	0					
ANR	681124	CastExpression	( classad :: Literal * ) left2		680542	0					
ANR	681125	CastTarget	classad :: Literal *		680542	0					
ANR	681126	Identifier	left2		680542	1					
ANR	681127	Identifier	GetValue		680542	1					
ANR	681128	ArgumentList	leftVal		680542	1					
ANR	681129	Argument	leftVal		680542	0					
ANR	681130	Identifier	leftVal		680542	0					
ANR	681131	ExpressionStatement	( ( classad :: Literal * ) right2 ) -> GetValue ( rightVal )	359:5:9858:9912	680542	2	True				
ANR	681132	CallExpression	( ( classad :: Literal * ) right2 ) -> GetValue ( rightVal )		680542	0					
ANR	681133	Callee	( ( classad :: Literal * ) right2 ) -> GetValue		680542	0					
ANR	681134	PtrMemberAccess	( ( classad :: Literal * ) right2 ) -> GetValue		680542	0					
ANR	681135	CastExpression	( classad :: Literal * ) right2		680542	0					
ANR	681136	CastTarget	classad :: Literal *		680542	0					
ANR	681137	Identifier	right2		680542	1					
ANR	681138	Identifier	GetValue		680542	1					
ANR	681139	ArgumentList	rightVal		680542	1					
ANR	681140	Argument	rightVal		680542	0					
ANR	681141	Identifier	rightVal		680542	0					
ANR	681142	IfStatement	"if ( ! c -> InitComplex ( leftAttr , leftOp , leftVal , rightOp , rightVal , expr ) )"		680542	3					
ANR	681143	Condition	"! c -> InitComplex ( leftAttr , leftOp , leftVal , rightOp , rightVal , expr )"	360:9:9923:10002	680542	0	True				
ANR	681144	UnaryOperationExpression	"! c -> InitComplex ( leftAttr , leftOp , leftVal , rightOp , rightVal , expr )"		680542	0					
ANR	681145	UnaryOperator	!		680542	0					
ANR	681146	CallExpression	"c -> InitComplex ( leftAttr , leftOp , leftVal , rightOp , rightVal , expr )"		680542	1					
ANR	681147	Callee	c -> InitComplex		680542	0					
ANR	681148	PtrMemberAccess	c -> InitComplex		680542	0					
ANR	681149	Identifier	c		680542	0					
ANR	681150	Identifier	InitComplex		680542	1					
ANR	681151	ArgumentList	leftAttr		680542	1					
ANR	681152	Argument	leftAttr		680542	0					
ANR	681153	Identifier	leftAttr		680542	0					
ANR	681154	Argument	leftOp		680542	1					
ANR	681155	Identifier	leftOp		680542	0					
ANR	681156	Argument	leftVal		680542	2					
ANR	681157	Identifier	leftVal		680542	0					
ANR	681158	Argument	rightOp		680542	3					
ANR	681159	Identifier	rightOp		680542	0					
ANR	681160	Argument	rightVal		680542	4					
ANR	681161	Identifier	rightVal		680542	0					
ANR	681162	Argument	expr		680542	5					
ANR	681163	Identifier	expr		680542	0					
ANR	681164	CompoundStatement		116:39:4071:4071	680542	1					
ANR	681165	ExpressionStatement	"cerr << ""error: problem with Condition:InitComplex"" << endl"	362:6:10014:10081	680542	0	True				
ANR	681166	ShiftExpression	"cerr << ""error: problem with Condition:InitComplex"" << endl"		680542	0		<<			
ANR	681167	Identifier	cerr		680542	0					
ANR	681168	ShiftExpression	"""error: problem with Condition:InitComplex"" << endl"		680542	1		<<			
ANR	681169	PrimaryExpression	"""error: problem with Condition:InitComplex"""		680542	0					
ANR	681170	Identifier	endl		680542	1					
ANR	681171	ReturnStatement	return false ;	364:6:10089:10101	680542	1	True				
ANR	681172	Identifier	false		680542	0					
ANR	681173	ReturnStatement	return true ;	366:5:10115:10126	680542	4	True				
ANR	681174	Identifier	true		680542	0					
ANR	681175	IfStatement	if ( op >= classad :: Operation :: __LOGIC_START__ && op <= classad :: Operation :: __LOGIC_END__ )		680542	17					
ANR	681176	Condition	op >= classad :: Operation :: __LOGIC_START__ && op <= classad :: Operation :: __LOGIC_END__	374:5:10154:10239	680542	0	True				
ANR	681177	AndExpression	op >= classad :: Operation :: __LOGIC_START__ && op <= classad :: Operation :: __LOGIC_END__		680542	0		&&			
ANR	681178	RelationalExpression	op >= classad :: Operation :: __LOGIC_START__		680542	0		>=			
ANR	681179	Identifier	op		680542	0					
ANR	681180	Identifier	classad :: Operation :: __LOGIC_START__		680542	1					
ANR	681181	RelationalExpression	op <= classad :: Operation :: __LOGIC_END__		680542	1		<=			
ANR	681182	Identifier	op		680542	0					
ANR	681183	Identifier	classad :: Operation :: __LOGIC_END__		680542	1					
ANR	681184	CompoundStatement		130:44:4308:4308	680542	1					
ANR	681185	IfStatement	if ( ! c -> InitComplex ( expr ) )		680542	0					
ANR	681186	Condition	! c -> InitComplex ( expr )	376:6:10251:10273	680542	0	True				
ANR	681187	UnaryOperationExpression	! c -> InitComplex ( expr )		680542	0					
ANR	681188	UnaryOperator	!		680542	0					
ANR	681189	CallExpression	c -> InitComplex ( expr )		680542	1					
ANR	681190	Callee	c -> InitComplex		680542	0					
ANR	681191	PtrMemberAccess	c -> InitComplex		680542	0					
ANR	681192	Identifier	c		680542	0					
ANR	681193	Identifier	InitComplex		680542	1					
ANR	681194	ArgumentList	expr		680542	1					
ANR	681195	Argument	expr		680542	0					
ANR	681196	Identifier	expr		680542	0					
ANR	681197	CompoundStatement		131:32:4342:4342	680542	1					
ANR	681198	ExpressionStatement	"cerr << ""error: problem with Condition:InitComplex"" << endl"	377:3:10282:10341	680542	0	True				
ANR	681199	ShiftExpression	"cerr << ""error: problem with Condition:InitComplex"" << endl"		680542	0		<<			
ANR	681200	Identifier	cerr		680542	0					
ANR	681201	ShiftExpression	"""error: problem with Condition:InitComplex"" << endl"		680542	1		<<			
ANR	681202	PrimaryExpression	"""error: problem with Condition:InitComplex"""		680542	0					
ANR	681203	Identifier	endl		680542	1					
ANR	681204	ReturnStatement	return false ;	378:3:10346:10358	680542	1	True				
ANR	681205	Identifier	false		680542	0					
ANR	681206	ReturnStatement	return true ;	380:2:10366:10377	680542	1	True				
ANR	681207	Identifier	true		680542	0					
ANR	681208	IfStatement	if ( ! ( op >= classad :: Operation :: __COMPARISON_START__ && op <= classad :: Operation :: __COMPARISON_END__ ) )		680542	18					
ANR	681209	Condition	! ( op >= classad :: Operation :: __COMPARISON_START__ && op <= classad :: Operation :: __COMPARISON_END__ )	383:5:10388:10491	680542	0	True				
ANR	681210	UnaryOperationExpression	! ( op >= classad :: Operation :: __COMPARISON_START__ && op <= classad :: Operation :: __COMPARISON_END__ )		680542	0					
ANR	681211	UnaryOperator	!		680542	0					
ANR	681212	AndExpression	op >= classad :: Operation :: __COMPARISON_START__ && op <= classad :: Operation :: __COMPARISON_END__		680542	1		&&			
ANR	681213	RelationalExpression	op >= classad :: Operation :: __COMPARISON_START__		680542	0		>=			
ANR	681214	Identifier	op		680542	0					
ANR	681215	Identifier	classad :: Operation :: __COMPARISON_START__		680542	1					
ANR	681216	RelationalExpression	op <= classad :: Operation :: __COMPARISON_END__		680542	1		<=			
ANR	681217	Identifier	op		680542	0					
ANR	681218	Identifier	classad :: Operation :: __COMPARISON_END__		680542	1					
ANR	681219	CompoundStatement		139:53:4560:4560	680542	1					
ANR	681220	IfStatement	if ( ! c -> InitComplex ( expr ) )		680542	0					
ANR	681221	Condition	! c -> InitComplex ( expr )	385:6:10503:10525	680542	0	True				
ANR	681222	UnaryOperationExpression	! c -> InitComplex ( expr )		680542	0					
ANR	681223	UnaryOperator	!		680542	0					
ANR	681224	CallExpression	c -> InitComplex ( expr )		680542	1					
ANR	681225	Callee	c -> InitComplex		680542	0					
ANR	681226	PtrMemberAccess	c -> InitComplex		680542	0					
ANR	681227	Identifier	c		680542	0					
ANR	681228	Identifier	InitComplex		680542	1					
ANR	681229	ArgumentList	expr		680542	1					
ANR	681230	Argument	expr		680542	0					
ANR	681231	Identifier	expr		680542	0					
ANR	681232	CompoundStatement		140:32:4594:4594	680542	1					
ANR	681233	ExpressionStatement	"cerr << ""error: operator not comparison: "" << ( int ) op << endl"	386:3:10534:10595	680542	0	True				
ANR	681234	ShiftExpression	"cerr << ""error: operator not comparison: "" << ( int ) op << endl"		680542	0		<<			
ANR	681235	Identifier	cerr		680542	0					
ANR	681236	ShiftExpression	"""error: operator not comparison: "" << ( int ) op << endl"		680542	1		<<			
ANR	681237	PrimaryExpression	"""error: operator not comparison: """		680542	0					
ANR	681238	ShiftExpression	( int ) op << endl		680542	1		<<			
ANR	681239	CastExpression	( int ) op		680542	0					
ANR	681240	CastTarget	int		680542	0					
ANR	681241	Identifier	op		680542	1					
ANR	681242	Identifier	endl		680542	1					
ANR	681243	ReturnStatement	return false ;	388:3:10638:10650	680542	1	True				
ANR	681244	Identifier	false		680542	0					
ANR	681245	ReturnStatement	return true ;	390:2:10658:10669	680542	1	True				
ANR	681246	Identifier	true		680542	0					
ANR	681247	IfStatement	if ( left == NULL || right == NULL )		680542	19					
ANR	681248	Condition	left == NULL || right == NULL	393:5:10680:10708	680542	0	True				
ANR	681249	OrExpression	left == NULL || right == NULL		680542	0		||			
ANR	681250	EqualityExpression	left == NULL		680542	0		==			
ANR	681251	Identifier	left		680542	0					
ANR	681252	Identifier	NULL		680542	1					
ANR	681253	EqualityExpression	right == NULL		680542	1		==			
ANR	681254	Identifier	right		680542	0					
ANR	681255	Identifier	NULL		680542	1					
ANR	681256	CompoundStatement		148:37:4777:4777	680542	1					
ANR	681257	ExpressionStatement	"cerr << ""error: NULL ptr in expr"" << endl"	394:2:10716:10757	680542	0	True				
ANR	681258	ShiftExpression	"cerr << ""error: NULL ptr in expr"" << endl"		680542	0		<<			
ANR	681259	Identifier	cerr		680542	0					
ANR	681260	ShiftExpression	"""error: NULL ptr in expr"" << endl"		680542	1		<<			
ANR	681261	PrimaryExpression	"""error: NULL ptr in expr"""		680542	0					
ANR	681262	Identifier	endl		680542	1					
ANR	681263	ReturnStatement	return false ;	396:2:10791:10803	680542	1	True				
ANR	681264	Identifier	false		680542	0					
ANR	681265	ExpressionStatement	kind = left -> GetKind ( )	399:1:10810:10833	680542	20	True				
ANR	681266	AssignmentExpression	kind = left -> GetKind ( )		680542	0		=			
ANR	681267	Identifier	kind		680542	0					
ANR	681268	CallExpression	left -> GetKind ( )		680542	1					
ANR	681269	Callee	left -> GetKind		680542	0					
ANR	681270	PtrMemberAccess	left -> GetKind		680542	0					
ANR	681271	Identifier	left		680542	0					
ANR	681272	Identifier	GetKind		680542	1					
ANR	681273	ArgumentList			680542	1					
ANR	681274	IfStatement	if ( kind == classad :: ExprTree :: ATTRREF_NODE )		680542	21					
ANR	681275	Condition	kind == classad :: ExprTree :: ATTRREF_NODE	401:5:10841:10879	680542	0	True				
ANR	681276	EqualityExpression	kind == classad :: ExprTree :: ATTRREF_NODE		680542	0		==			
ANR	681277	Identifier	kind		680542	0					
ANR	681278	Identifier	classad :: ExprTree :: ATTRREF_NODE		680542	1					
ANR	681279	CompoundStatement		156:47:4948:4948	680542	1					
ANR	681280	ExpressionStatement	kind = right -> GetKind ( )	402:2:10887:10911	680542	0	True				
ANR	681281	AssignmentExpression	kind = right -> GetKind ( )		680542	0		=			
ANR	681282	Identifier	kind		680542	0					
ANR	681283	CallExpression	right -> GetKind ( )		680542	1					
ANR	681284	Callee	right -> GetKind		680542	0					
ANR	681285	PtrMemberAccess	right -> GetKind		680542	0					
ANR	681286	Identifier	right		680542	0					
ANR	681287	Identifier	GetKind		680542	1					
ANR	681288	ArgumentList			680542	1					
ANR	681289	IfStatement	if ( kind == classad :: ExprTree :: LITERAL_NODE )		680542	1					
ANR	681290	Condition	kind == classad :: ExprTree :: LITERAL_NODE	403:6:10919:10957	680542	0	True				
ANR	681291	EqualityExpression	kind == classad :: ExprTree :: LITERAL_NODE		680542	0		==			
ANR	681292	Identifier	kind		680542	0					
ANR	681293	Identifier	classad :: ExprTree :: LITERAL_NODE		680542	1					
ANR	681294	CompoundStatement		158:48:5026:5026	680542	1					
ANR	681295	ExpressionStatement	"( ( classad :: AttributeReference * ) left ) -> GetComponents ( base , attr , junkBool )"	405:3:11026:11143	680542	0	True				
ANR	681296	CallExpression	"( ( classad :: AttributeReference * ) left ) -> GetComponents ( base , attr , junkBool )"		680542	0					
ANR	681297	Callee	( ( classad :: AttributeReference * ) left ) -> GetComponents		680542	0					
ANR	681298	PtrMemberAccess	( ( classad :: AttributeReference * ) left ) -> GetComponents		680542	0					
ANR	681299	CastExpression	( classad :: AttributeReference * ) left		680542	0					
ANR	681300	CastTarget	classad :: AttributeReference *		680542	0					
ANR	681301	Identifier	left		680542	1					
ANR	681302	Identifier	GetComponents		680542	1					
ANR	681303	ArgumentList	base		680542	1					
ANR	681304	Argument	base		680542	0					
ANR	681305	Identifier	base		680542	0					
ANR	681306	Argument	attr		680542	1					
ANR	681307	Identifier	attr		680542	0					
ANR	681308	Argument	junkBool		680542	2					
ANR	681309	Identifier	junkBool		680542	0					
ANR	681310	ExpressionStatement	( ( classad :: Literal * ) right ) -> GetValue ( val )	408:3:11148:11196	680542	1	True				
ANR	681311	CallExpression	( ( classad :: Literal * ) right ) -> GetValue ( val )		680542	0					
ANR	681312	Callee	( ( classad :: Literal * ) right ) -> GetValue		680542	0					
ANR	681313	PtrMemberAccess	( ( classad :: Literal * ) right ) -> GetValue		680542	0					
ANR	681314	CastExpression	( classad :: Literal * ) right		680542	0					
ANR	681315	CastTarget	classad :: Literal *		680542	0					
ANR	681316	Identifier	right		680542	1					
ANR	681317	Identifier	GetValue		680542	1					
ANR	681318	ArgumentList	val		680542	1					
ANR	681319	Argument	val		680542	0					
ANR	681320	Identifier	val		680542	0					
ANR	681321	IfStatement	"if ( ! c -> Init ( attr , op , val , expr -> Copy ( ) , Condition :: ATTR_POS_LEFT ) )"		680542	2					
ANR	681322	Condition	"! c -> Init ( attr , op , val , expr -> Copy ( ) , Condition :: ATTR_POS_LEFT )"	409:8:11207:11280	680542	0	True				
ANR	681323	UnaryOperationExpression	"! c -> Init ( attr , op , val , expr -> Copy ( ) , Condition :: ATTR_POS_LEFT )"		680542	0					
ANR	681324	UnaryOperator	!		680542	0					
ANR	681325	CallExpression	"c -> Init ( attr , op , val , expr -> Copy ( ) , Condition :: ATTR_POS_LEFT )"		680542	1					
ANR	681326	Callee	c -> Init		680542	0					
ANR	681327	PtrMemberAccess	c -> Init		680542	0					
ANR	681328	Identifier	c		680542	0					
ANR	681329	Identifier	Init		680542	1					
ANR	681330	ArgumentList	attr		680542	1					
ANR	681331	Argument	attr		680542	0					
ANR	681332	Identifier	attr		680542	0					
ANR	681333	Argument	op		680542	1					
ANR	681334	Identifier	op		680542	0					
ANR	681335	Argument	val		680542	2					
ANR	681336	Identifier	val		680542	0					
ANR	681337	Argument	expr -> Copy ( )		680542	3					
ANR	681338	CallExpression	expr -> Copy ( )		680542	0					
ANR	681339	Callee	expr -> Copy		680542	0					
ANR	681340	PtrMemberAccess	expr -> Copy		680542	0					
ANR	681341	Identifier	expr		680542	0					
ANR	681342	Identifier	Copy		680542	1					
ANR	681343	ArgumentList			680542	1					
ANR	681344	Argument	Condition :: ATTR_POS_LEFT		680542	4					
ANR	681345	Identifier	Condition :: ATTR_POS_LEFT		680542	0					
ANR	681346	CompoundStatement		165:37:5349:5349	680542	1					
ANR	681347	ExpressionStatement	"cerr << ""error: problem with Condition::Init"" << endl"	411:6:11292:11345	680542	0	True				
ANR	681348	ShiftExpression	"cerr << ""error: problem with Condition::Init"" << endl"		680542	0		<<			
ANR	681349	Identifier	cerr		680542	0					
ANR	681350	ShiftExpression	"""error: problem with Condition::Init"" << endl"		680542	1		<<			
ANR	681351	PrimaryExpression	"""error: problem with Condition::Init"""		680542	0					
ANR	681352	Identifier	endl		680542	1					
ANR	681353	ReturnStatement	return false ;	412:6:11353:11365	680542	1	True				
ANR	681354	Identifier	false		680542	0					
ANR	681355	ReturnStatement	return true ;	414:3:11377:11388	680542	3	True				
ANR	681356	Identifier	true		680542	0					
ANR	681357	IfStatement	if ( ! c -> InitComplex ( expr ) )		680542	2					
ANR	681358	Condition	! c -> InitComplex ( expr )	416:6:11400:11422	680542	0	True				
ANR	681359	UnaryOperationExpression	! c -> InitComplex ( expr )		680542	0					
ANR	681360	UnaryOperator	!		680542	0					
ANR	681361	CallExpression	c -> InitComplex ( expr )		680542	1					
ANR	681362	Callee	c -> InitComplex		680542	0					
ANR	681363	PtrMemberAccess	c -> InitComplex		680542	0					
ANR	681364	Identifier	c		680542	0					
ANR	681365	Identifier	InitComplex		680542	1					
ANR	681366	ArgumentList	expr		680542	1					
ANR	681367	Argument	expr		680542	0					
ANR	681368	Identifier	expr		680542	0					
ANR	681369	CompoundStatement		171:32:5491:5491	680542	1					
ANR	681370	ExpressionStatement	"cerr << ""error: problem with Condition:InitComplex"" << endl"	417:3:11431:11490	680542	0	True				
ANR	681371	ShiftExpression	"cerr << ""error: problem with Condition:InitComplex"" << endl"		680542	0		<<			
ANR	681372	Identifier	cerr		680542	0					
ANR	681373	ShiftExpression	"""error: problem with Condition:InitComplex"" << endl"		680542	1		<<			
ANR	681374	PrimaryExpression	"""error: problem with Condition:InitComplex"""		680542	0					
ANR	681375	Identifier	endl		680542	1					
ANR	681376	ReturnStatement	return false ;	418:3:11495:11507	680542	1	True				
ANR	681377	Identifier	false		680542	0					
ANR	681378	ReturnStatement	return true ;	420:2:11515:11526	680542	3	True				
ANR	681379	Identifier	true		680542	0					
ANR	681380	IfStatement	if ( kind == classad :: ExprTree :: LITERAL_NODE )		680542	22					
ANR	681381	Condition	kind == classad :: ExprTree :: LITERAL_NODE	423:5:11537:11575	680542	0	True				
ANR	681382	EqualityExpression	kind == classad :: ExprTree :: LITERAL_NODE		680542	0		==			
ANR	681383	Identifier	kind		680542	0					
ANR	681384	Identifier	classad :: ExprTree :: LITERAL_NODE		680542	1					
ANR	681385	CompoundStatement		178:47:5644:5644	680542	1					
ANR	681386	ExpressionStatement	kind = right -> GetKind ( )	424:2:11583:11607	680542	0	True				
ANR	681387	AssignmentExpression	kind = right -> GetKind ( )		680542	0		=			
ANR	681388	Identifier	kind		680542	0					
ANR	681389	CallExpression	right -> GetKind ( )		680542	1					
ANR	681390	Callee	right -> GetKind		680542	0					
ANR	681391	PtrMemberAccess	right -> GetKind		680542	0					
ANR	681392	Identifier	right		680542	0					
ANR	681393	Identifier	GetKind		680542	1					
ANR	681394	ArgumentList			680542	1					
ANR	681395	IfStatement	if ( kind == classad :: ExprTree :: ATTRREF_NODE )		680542	1					
ANR	681396	Condition	kind == classad :: ExprTree :: ATTRREF_NODE	425:6:11615:11653	680542	0	True				
ANR	681397	EqualityExpression	kind == classad :: ExprTree :: ATTRREF_NODE		680542	0		==			
ANR	681398	Identifier	kind		680542	0					
ANR	681399	Identifier	classad :: ExprTree :: ATTRREF_NODE		680542	1					
ANR	681400	CompoundStatement		180:48:5722:5722	680542	1					
ANR	681401	ExpressionStatement	"( ( classad :: AttributeReference * ) right ) -> GetComponents ( base , attr , junkBool )"	427:3:11730:11848	680542	0	True				
ANR	681402	CallExpression	"( ( classad :: AttributeReference * ) right ) -> GetComponents ( base , attr , junkBool )"		680542	0					
ANR	681403	Callee	( ( classad :: AttributeReference * ) right ) -> GetComponents		680542	0					
ANR	681404	PtrMemberAccess	( ( classad :: AttributeReference * ) right ) -> GetComponents		680542	0					
ANR	681405	CastExpression	( classad :: AttributeReference * ) right		680542	0					
ANR	681406	CastTarget	classad :: AttributeReference *		680542	0					
ANR	681407	Identifier	right		680542	1					
ANR	681408	Identifier	GetComponents		680542	1					
ANR	681409	ArgumentList	base		680542	1					
ANR	681410	Argument	base		680542	0					
ANR	681411	Identifier	base		680542	0					
ANR	681412	Argument	attr		680542	1					
ANR	681413	Identifier	attr		680542	0					
ANR	681414	Argument	junkBool		680542	2					
ANR	681415	Identifier	junkBool		680542	0					
ANR	681416	ExpressionStatement	( ( classad :: Literal * ) left ) -> GetValue ( val )	430:3:11853:11900	680542	1	True				
ANR	681417	CallExpression	( ( classad :: Literal * ) left ) -> GetValue ( val )		680542	0					
ANR	681418	Callee	( ( classad :: Literal * ) left ) -> GetValue		680542	0					
ANR	681419	PtrMemberAccess	( ( classad :: Literal * ) left ) -> GetValue		680542	0					
ANR	681420	CastExpression	( classad :: Literal * ) left		680542	0					
ANR	681421	CastTarget	classad :: Literal *		680542	0					
ANR	681422	Identifier	left		680542	1					
ANR	681423	Identifier	GetValue		680542	1					
ANR	681424	ArgumentList	val		680542	1					
ANR	681425	Argument	val		680542	0					
ANR	681426	Identifier	val		680542	0					
ANR	681427	IfStatement	"if ( ! c -> Init ( attr , op , val , expr -> Copy ( ) , Condition :: ATTR_POS_RIGHT ) )"		680542	2					
ANR	681428	Condition	"! c -> Init ( attr , op , val , expr -> Copy ( ) , Condition :: ATTR_POS_RIGHT )"	431:9:11911:11985	680542	0	True				
ANR	681429	UnaryOperationExpression	"! c -> Init ( attr , op , val , expr -> Copy ( ) , Condition :: ATTR_POS_RIGHT )"		680542	0					
ANR	681430	UnaryOperator	!		680542	0					
ANR	681431	CallExpression	"c -> Init ( attr , op , val , expr -> Copy ( ) , Condition :: ATTR_POS_RIGHT )"		680542	1					
ANR	681432	Callee	c -> Init		680542	0					
ANR	681433	PtrMemberAccess	c -> Init		680542	0					
ANR	681434	Identifier	c		680542	0					
ANR	681435	Identifier	Init		680542	1					
ANR	681436	ArgumentList	attr		680542	1					
ANR	681437	Argument	attr		680542	0					
ANR	681438	Identifier	attr		680542	0					
ANR	681439	Argument	op		680542	1					
ANR	681440	Identifier	op		680542	0					
ANR	681441	Argument	val		680542	2					
ANR	681442	Identifier	val		680542	0					
ANR	681443	Argument	expr -> Copy ( )		680542	3					
ANR	681444	CallExpression	expr -> Copy ( )		680542	0					
ANR	681445	Callee	expr -> Copy		680542	0					
ANR	681446	PtrMemberAccess	expr -> Copy		680542	0					
ANR	681447	Identifier	expr		680542	0					
ANR	681448	Identifier	Copy		680542	1					
ANR	681449	ArgumentList			680542	1					
ANR	681450	Argument	Condition :: ATTR_POS_RIGHT		680542	4					
ANR	681451	Identifier	Condition :: ATTR_POS_RIGHT		680542	0					
ANR	681452	CompoundStatement		187:38:6054:6054	680542	1					
ANR	681453	ExpressionStatement	"cerr << ""error: problem with Condition::Init"" << endl"	433:6:11997:12050	680542	0	True				
ANR	681454	ShiftExpression	"cerr << ""error: problem with Condition::Init"" << endl"		680542	0		<<			
ANR	681455	Identifier	cerr		680542	0					
ANR	681456	ShiftExpression	"""error: problem with Condition::Init"" << endl"		680542	1		<<			
ANR	681457	PrimaryExpression	"""error: problem with Condition::Init"""		680542	0					
ANR	681458	Identifier	endl		680542	1					
ANR	681459	ReturnStatement	return false ;	434:6:12058:12070	680542	1	True				
ANR	681460	Identifier	false		680542	0					
ANR	681461	ReturnStatement	return true ;	436:3:12082:12093	680542	3	True				
ANR	681462	Identifier	true		680542	0					
ANR	681463	IfStatement	if ( ! c -> InitComplex ( expr ) )		680542	2					
ANR	681464	Condition	! c -> InitComplex ( expr )	438:6:12105:12127	680542	0	True				
ANR	681465	UnaryOperationExpression	! c -> InitComplex ( expr )		680542	0					
ANR	681466	UnaryOperator	!		680542	0					
ANR	681467	CallExpression	c -> InitComplex ( expr )		680542	1					
ANR	681468	Callee	c -> InitComplex		680542	0					
ANR	681469	PtrMemberAccess	c -> InitComplex		680542	0					
ANR	681470	Identifier	c		680542	0					
ANR	681471	Identifier	InitComplex		680542	1					
ANR	681472	ArgumentList	expr		680542	1					
ANR	681473	Argument	expr		680542	0					
ANR	681474	Identifier	expr		680542	0					
ANR	681475	CompoundStatement		193:32:6196:6196	680542	1					
ANR	681476	ExpressionStatement	"cerr << ""error: problem with Condition:InitComplex"" << endl"	439:3:12136:12195	680542	0	True				
ANR	681477	ShiftExpression	"cerr << ""error: problem with Condition:InitComplex"" << endl"		680542	0		<<			
ANR	681478	Identifier	cerr		680542	0					
ANR	681479	ShiftExpression	"""error: problem with Condition:InitComplex"" << endl"		680542	1		<<			
ANR	681480	PrimaryExpression	"""error: problem with Condition:InitComplex"""		680542	0					
ANR	681481	Identifier	endl		680542	1					
ANR	681482	ReturnStatement	return false ;	440:3:12200:12212	680542	1	True				
ANR	681483	Identifier	false		680542	0					
ANR	681484	ReturnStatement	return true ;	442:2:12220:12231	680542	3	True				
ANR	681485	Identifier	true		680542	0					
ANR	681486	IfStatement	if ( ! c -> InitComplex ( expr ) )		680542	23					
ANR	681487	Condition	! c -> InitComplex ( expr )	445:5:12242:12264	680542	0	True				
ANR	681488	UnaryOperationExpression	! c -> InitComplex ( expr )		680542	0					
ANR	681489	UnaryOperator	!		680542	0					
ANR	681490	CallExpression	c -> InitComplex ( expr )		680542	1					
ANR	681491	Callee	c -> InitComplex		680542	0					
ANR	681492	PtrMemberAccess	c -> InitComplex		680542	0					
ANR	681493	Identifier	c		680542	0					
ANR	681494	Identifier	InitComplex		680542	1					
ANR	681495	ArgumentList	expr		680542	1					
ANR	681496	Argument	expr		680542	0					
ANR	681497	Identifier	expr		680542	0					
ANR	681498	CompoundStatement		200:31:6333:6333	680542	1					
ANR	681499	ExpressionStatement	"cerr << ""error: problem with Condition:InitComplex"" << endl"	446:2:12272:12331	680542	0	True				
ANR	681500	ShiftExpression	"cerr << ""error: problem with Condition:InitComplex"" << endl"		680542	0		<<			
ANR	681501	Identifier	cerr		680542	0					
ANR	681502	ShiftExpression	"""error: problem with Condition:InitComplex"" << endl"		680542	1		<<			
ANR	681503	PrimaryExpression	"""error: problem with Condition:InitComplex"""		680542	0					
ANR	681504	Identifier	endl		680542	1					
ANR	681505	ReturnStatement	return false ;	447:2:12335:12347	680542	1	True				
ANR	681506	Identifier	false		680542	0					
ANR	681507	ReturnStatement	return true ;	449:1:12353:12364	680542	24	True				
ANR	681508	Identifier	true		680542	0					
ANR	681509	ReturnType	bool		680542	1					
ANR	681510	Identifier	BoolExpr :: ExprToCondition		680542	2					
ANR	681511	ParameterList	"classad :: ExprTree * expr , Condition * & c"		680542	3					
ANR	681512	Parameter	classad :: ExprTree * expr	245:17:5893:5915	680542	0	True				
ANR	681513	ParameterType	classad :: ExprTree *		680542	0					
ANR	681514	Identifier	expr		680542	1					
ANR	681515	Parameter	Condition * & c	245:42:5918:5930	680542	1	True				
ANR	681516	ParameterType	Condition * &		680542	0					
ANR	681517	Identifier	c		680542	1					
ANR	681518	CFGEntryNode	ENTRY		680542		True				
ANR	681519	CFGExitNode	EXIT		680542		True				
ANR	681520	Symbol	classad :: ExprTree :: OP_NODE		680542						
ANR	681521	Symbol	left -> GetKind		680542						
ANR	681522	Symbol	rightVal		680542						
ANR	681523	Symbol	rightAttr . c_str		680542						
ANR	681524	Symbol	classad :: ExprTree :: LITERAL_NODE		680542						
ANR	681525	Symbol	rightOp		680542						
ANR	681526	Symbol	right1		680542						
ANR	681527	Symbol	right2		680542						
ANR	681528	Symbol	* left1		680542						
ANR	681529	Symbol	* left2		680542						
ANR	681530	Symbol	right2 -> GetKind		680542						
ANR	681531	Symbol	left1 -> GetKind		680542						
ANR	681532	Symbol	classad :: ExprTree :: ATTRREF_NODE		680542						
ANR	681533	Symbol	* left		680542						
ANR	681534	Symbol	strcasecmp		680542						
ANR	681535	Symbol	classad :: Operation :: __NO_OP__		680542						
ANR	681536	Symbol	val		680542						
ANR	681537	Symbol	NULL		680542						
ANR	681538	Symbol	right -> GetKind		680542						
ANR	681539	Symbol	classad :: Operation :: __COMPARISON_START__		680542						
ANR	681540	Symbol	kind		680542						
ANR	681541	Symbol	left2		680542						
ANR	681542	Symbol	classad :: Operation :: LOGICAL_OR_OP		680542						
ANR	681543	Symbol	left1		680542						
ANR	681544	Symbol	Condition :: ATTR_POS_RIGHT		680542						
ANR	681545	Symbol	left		680542						
ANR	681546	Symbol	* expr		680542						
ANR	681547	Symbol	true		680542						
ANR	681548	Symbol	leftOp		680542						
ANR	681549	Symbol	c -> Init		680542						
ANR	681550	Symbol	classad :: Operation :: OP_NODE		680542						
ANR	681551	Symbol	classad :: Operation :: PARENTHESES_OP		680542						
ANR	681552	Symbol	leftAttr . c_str		680542						
ANR	681553	Symbol	classad :: Operation :: __LOGIC_END__		680542						
ANR	681554	Symbol	right1 -> GetKind		680542						
ANR	681555	Symbol	expr -> Copy		680542						
ANR	681556	Symbol	c -> InitComplex		680542						
ANR	681557	Symbol	left2 -> GetKind		680542						
ANR	681558	Symbol	leftVal		680542						
ANR	681559	Symbol	classad :: Operation :: __COMPARISON_END__		680542						
ANR	681560	Symbol	expr		680542						
ANR	681561	Symbol	attr		680542						
ANR	681562	Symbol	rightAttr		680542						
ANR	681563	Symbol	op		680542						
ANR	681564	Symbol	expr -> GetKind		680542						
ANR	681565	Symbol	c		680542						
ANR	681566	Symbol	classad :: Operation :: __LOGIC_START__		680542						
ANR	681567	Symbol	false		680542						
ANR	681568	Symbol	right		680542						
ANR	681569	Symbol	* c		680542						
ANR	681570	Symbol	* right1		680542						
ANR	681571	Symbol	* right2		680542						
ANR	681572	Symbol	Condition :: ATTR_POS_LEFT		680542						
ANR	681573	Symbol	junk		680542						
ANR	681574	Symbol	junkBool		680542						
ANR	681575	Symbol	leftAttr		680542						
ANR	681576	Symbol	classad :: ExprTree :: FN_CALL_NODE		680542						
ANR	681577	Symbol	* right		680542						
ANR	681578	Symbol	base		680542						
ANR	681579	Function	BoolExpr :: EvalInContext	452:0:12369:13358							
ANR	681580	FunctionDef	"BoolExpr :: EvalInContext (classad :: MatchClassAd & mad , classad :: ClassAd * context , BoolValue & result)"		681579	0					
ANR	681581	CompoundStatement		455:0:12481:13358	681579	0					
ANR	681582	IfStatement	if ( ! initialized || ! context )		681579	0					
ANR	681583	Condition	! initialized || ! context	456:5:12488:12511	681579	0	True				
ANR	681584	OrExpression	! initialized || ! context		681579	0		||			
ANR	681585	UnaryOperationExpression	! initialized		681579	0					
ANR	681586	UnaryOperator	!		681579	0					
ANR	681587	Identifier	initialized		681579	1					
ANR	681588	UnaryOperationExpression	! context		681579	1					
ANR	681589	UnaryOperator	!		681579	0					
ANR	681590	Identifier	context		681579	1					
ANR	681591	CompoundStatement		2:32:33:33	681579	1					
ANR	681592	ReturnStatement	return false ;	457:2:12519:12531	681579	0	True				
ANR	681593	Identifier	false		681579	0					
ANR	681594	IdentifierDeclStatement	classad :: ClassAd * emptyAd = new classad :: ClassAd ( ) ;	459:1:12537:12588	681579	1	True				
ANR	681595	IdentifierDecl	* emptyAd = new classad :: ClassAd ( )		681579	0					
ANR	681596	IdentifierDeclType	classad :: ClassAd *		681579	0					
ANR	681597	Identifier	emptyAd		681579	1					
ANR	681598	AssignmentExpression	* emptyAd = new classad :: ClassAd ( )		681579	2		=			
ANR	681599	Identifier	emptyAd		681579	0					
ANR	681600	UnaryExpression	new classad :: ClassAd ( )		681579	1					
ANR	681601	IdentifierDeclStatement	classad :: Value val ;	460:1:12591:12609	681579	2	True				
ANR	681602	IdentifierDecl	val		681579	0					
ANR	681603	IdentifierDeclType	classad :: Value		681579	0					
ANR	681604	Identifier	val		681579	1					
ANR	681605	IdentifierDeclStatement	bool b ;	461:1:12612:12618	681579	3	True				
ANR	681606	IdentifierDecl	b		681579	0					
ANR	681607	IdentifierDeclType	bool		681579	0					
ANR	681608	Identifier	b		681579	1					
ANR	681609	ExpressionStatement	mad . ReplaceLeftAd ( emptyAd )	462:1:12621:12649	681579	4	True				
ANR	681610	CallExpression	mad . ReplaceLeftAd ( emptyAd )		681579	0					
ANR	681611	Callee	mad . ReplaceLeftAd		681579	0					
ANR	681612	MemberAccess	mad . ReplaceLeftAd		681579	0					
ANR	681613	Identifier	mad		681579	0					
ANR	681614	Identifier	ReplaceLeftAd		681579	1					
ANR	681615	ArgumentList	emptyAd		681579	1					
ANR	681616	Argument	emptyAd		681579	0					
ANR	681617	Identifier	emptyAd		681579	0					
ANR	681618	ExpressionStatement	mad . ReplaceRightAd ( context )	463:1:12652:12681	681579	5	True				
ANR	681619	CallExpression	mad . ReplaceRightAd ( context )		681579	0					
ANR	681620	Callee	mad . ReplaceRightAd		681579	0					
ANR	681621	MemberAccess	mad . ReplaceRightAd		681579	0					
ANR	681622	Identifier	mad		681579	0					
ANR	681623	Identifier	ReplaceRightAd		681579	1					
ANR	681624	ArgumentList	context		681579	1					
ANR	681625	Argument	context		681579	0					
ANR	681626	Identifier	context		681579	0					
ANR	681627	ExpressionStatement	myTree -> SetParentScope ( emptyAd )	464:1:12684:12717	681579	6	True				
ANR	681628	CallExpression	myTree -> SetParentScope ( emptyAd )		681579	0					
ANR	681629	Callee	myTree -> SetParentScope		681579	0					
ANR	681630	PtrMemberAccess	myTree -> SetParentScope		681579	0					
ANR	681631	Identifier	myTree		681579	0					
ANR	681632	Identifier	SetParentScope		681579	1					
ANR	681633	ArgumentList	emptyAd		681579	1					
ANR	681634	Argument	emptyAd		681579	0					
ANR	681635	Identifier	emptyAd		681579	0					
ANR	681636	IfStatement	"if ( ! emptyAd -> EvaluateExpr ( myTree , val ) )"		681579	7					
ANR	681637	Condition	"! emptyAd -> EvaluateExpr ( myTree , val )"	465:5:12724:12760	681579	0	True				
ANR	681638	UnaryOperationExpression	"! emptyAd -> EvaluateExpr ( myTree , val )"		681579	0					
ANR	681639	UnaryOperator	!		681579	0					
ANR	681640	CallExpression	"emptyAd -> EvaluateExpr ( myTree , val )"		681579	1					
ANR	681641	Callee	emptyAd -> EvaluateExpr		681579	0					
ANR	681642	PtrMemberAccess	emptyAd -> EvaluateExpr		681579	0					
ANR	681643	Identifier	emptyAd		681579	0					
ANR	681644	Identifier	EvaluateExpr		681579	1					
ANR	681645	ArgumentList	myTree		681579	1					
ANR	681646	Argument	myTree		681579	0					
ANR	681647	Identifier	myTree		681579	0					
ANR	681648	Argument	val		681579	1					
ANR	681649	Identifier	val		681579	0					
ANR	681650	CompoundStatement		11:45:282:282	681579	1					
ANR	681651	ExpressionStatement	mad . RemoveLeftAd ( )	466:2:12768:12787	681579	0	True				
ANR	681652	CallExpression	mad . RemoveLeftAd ( )		681579	0					
ANR	681653	Callee	mad . RemoveLeftAd		681579	0					
ANR	681654	MemberAccess	mad . RemoveLeftAd		681579	0					
ANR	681655	Identifier	mad		681579	0					
ANR	681656	Identifier	RemoveLeftAd		681579	1					
ANR	681657	ArgumentList			681579	1					
ANR	681658	ExpressionStatement	mad . RemoveRightAd ( )	467:2:12791:12811	681579	1	True				
ANR	681659	CallExpression	mad . RemoveRightAd ( )		681579	0					
ANR	681660	Callee	mad . RemoveRightAd		681579	0					
ANR	681661	MemberAccess	mad . RemoveRightAd		681579	0					
ANR	681662	Identifier	mad		681579	0					
ANR	681663	Identifier	RemoveRightAd		681579	1					
ANR	681664	ArgumentList			681579	1					
ANR	681665	ExpressionStatement	myTree -> SetParentScope ( NULL )	468:2:12815:12845	681579	2	True				
ANR	681666	CallExpression	myTree -> SetParentScope ( NULL )		681579	0					
ANR	681667	Callee	myTree -> SetParentScope		681579	0					
ANR	681668	PtrMemberAccess	myTree -> SetParentScope		681579	0					
ANR	681669	Identifier	myTree		681579	0					
ANR	681670	Identifier	SetParentScope		681579	1					
ANR	681671	ArgumentList	NULL		681579	1					
ANR	681672	Argument	NULL		681579	0					
ANR	681673	Identifier	NULL		681579	0					
ANR	681674	Statement	delete	469:2:12849:12854	681579	3	True				
ANR	681675	ExpressionStatement	emptyAd	469:9:12856:12863	681579	4	True				
ANR	681676	Identifier	emptyAd		681579	0					
ANR	681677	ReturnStatement	return false ;	470:2:12867:12879	681579	5	True				
ANR	681678	Identifier	false		681579	0					
ANR	681679	IfStatement	if ( val . IsBooleanValue ( b ) )		681579	8					
ANR	681680	Condition	val . IsBooleanValue ( b )	472:5:12889:12911	681579	0	True				
ANR	681681	CallExpression	val . IsBooleanValue ( b )		681579	0					
ANR	681682	Callee	val . IsBooleanValue		681579	0					
ANR	681683	MemberAccess	val . IsBooleanValue		681579	0					
ANR	681684	Identifier	val		681579	0					
ANR	681685	Identifier	IsBooleanValue		681579	1					
ANR	681686	ArgumentList	b		681579	1					
ANR	681687	Argument	b		681579	0					
ANR	681688	Identifier	b		681579	0					
ANR	681689	CompoundStatement		18:31:433:433	681579	1					
ANR	681690	IfStatement	if ( b )		681579	0					
ANR	681691	Condition	b	473:6:12923:12923	681579	0	True				
ANR	681692	Identifier	b		681579	0					
ANR	681693	CompoundStatement		19:10:445:445	681579	1					
ANR	681694	ExpressionStatement	result = TRUE_VALUE	474:3:12932:12951	681579	0	True				
ANR	681695	AssignmentExpression	result = TRUE_VALUE		681579	0		=			
ANR	681696	Identifier	result		681579	0					
ANR	681697	Identifier	TRUE_VALUE		681579	1					
ANR	681698	ElseStatement	else		681579	0					
ANR	681699	CompoundStatement		21:9:480:480	681579	0					
ANR	681700	ExpressionStatement	result = FALSE_VALUE	476:3:12967:12987	681579	0	True				
ANR	681701	AssignmentExpression	result = FALSE_VALUE		681579	0		=			
ANR	681702	Identifier	result		681579	0					
ANR	681703	Identifier	FALSE_VALUE		681579	1					
ANR	681704	ElseStatement	else		681579	0					
ANR	681705	IfStatement	if ( val . IsUndefinedValue ( ) )		681579	0					
ANR	681706	Condition	val . IsUndefinedValue ( )	478:12:13005:13027	681579	0	True				
ANR	681707	CallExpression	val . IsUndefinedValue ( )		681579	0					
ANR	681708	Callee	val . IsUndefinedValue		681579	0					
ANR	681709	MemberAccess	val . IsUndefinedValue		681579	0					
ANR	681710	Identifier	val		681579	0					
ANR	681711	Identifier	IsUndefinedValue		681579	1					
ANR	681712	ArgumentList			681579	1					
ANR	681713	CompoundStatement		24:38:549:549	681579	1					
ANR	681714	ExpressionStatement	result = UNDEFINED_VALUE	479:2:13035:13059	681579	0	True				
ANR	681715	AssignmentExpression	result = UNDEFINED_VALUE		681579	0		=			
ANR	681716	Identifier	result		681579	0					
ANR	681717	Identifier	UNDEFINED_VALUE		681579	1					
ANR	681718	ElseStatement	else		681579	0					
ANR	681719	IfStatement	if ( val . IsErrorValue ( ) )		681579	0					
ANR	681720	Condition	val . IsErrorValue ( )	480:12:13073:13091	681579	0	True				
ANR	681721	CallExpression	val . IsErrorValue ( )		681579	0					
ANR	681722	Callee	val . IsErrorValue		681579	0					
ANR	681723	MemberAccess	val . IsErrorValue		681579	0					
ANR	681724	Identifier	val		681579	0					
ANR	681725	Identifier	IsErrorValue		681579	1					
ANR	681726	ArgumentList			681579	1					
ANR	681727	CompoundStatement		26:34:613:613	681579	1					
ANR	681728	ExpressionStatement	result = ERROR_VALUE	481:2:13099:13119	681579	0	True				
ANR	681729	AssignmentExpression	result = ERROR_VALUE		681579	0		=			
ANR	681730	Identifier	result		681579	0					
ANR	681731	Identifier	ERROR_VALUE		681579	1					
ANR	681732	ElseStatement	else		681579	0					
ANR	681733	CompoundStatement		28:8:647:647	681579	0					
ANR	681734	ExpressionStatement	mad . RemoveLeftAd ( )	483:2:13133:13152	681579	0	True				
ANR	681735	CallExpression	mad . RemoveLeftAd ( )		681579	0					
ANR	681736	Callee	mad . RemoveLeftAd		681579	0					
ANR	681737	MemberAccess	mad . RemoveLeftAd		681579	0					
ANR	681738	Identifier	mad		681579	0					
ANR	681739	Identifier	RemoveLeftAd		681579	1					
ANR	681740	ArgumentList			681579	1					
ANR	681741	ExpressionStatement	mad . RemoveRightAd ( )	484:2:13156:13176	681579	1	True				
ANR	681742	CallExpression	mad . RemoveRightAd ( )		681579	0					
ANR	681743	Callee	mad . RemoveRightAd		681579	0					
ANR	681744	MemberAccess	mad . RemoveRightAd		681579	0					
ANR	681745	Identifier	mad		681579	0					
ANR	681746	Identifier	RemoveRightAd		681579	1					
ANR	681747	ArgumentList			681579	1					
ANR	681748	ExpressionStatement	myTree -> SetParentScope ( NULL )	485:2:13180:13210	681579	2	True				
ANR	681749	CallExpression	myTree -> SetParentScope ( NULL )		681579	0					
ANR	681750	Callee	myTree -> SetParentScope		681579	0					
ANR	681751	PtrMemberAccess	myTree -> SetParentScope		681579	0					
ANR	681752	Identifier	myTree		681579	0					
ANR	681753	Identifier	SetParentScope		681579	1					
ANR	681754	ArgumentList	NULL		681579	1					
ANR	681755	Argument	NULL		681579	0					
ANR	681756	Identifier	NULL		681579	0					
ANR	681757	Statement	delete	486:2:13214:13219	681579	3	True				
ANR	681758	ExpressionStatement	emptyAd	486:9:13221:13228	681579	4	True				
ANR	681759	Identifier	emptyAd		681579	0					
ANR	681760	ReturnStatement	return false ;	487:2:13232:13244	681579	5	True				
ANR	681761	Identifier	false		681579	0					
ANR	681762	ExpressionStatement	mad . RemoveLeftAd ( )	489:1:13250:13269	681579	9	True				
ANR	681763	CallExpression	mad . RemoveLeftAd ( )		681579	0					
ANR	681764	Callee	mad . RemoveLeftAd		681579	0					
ANR	681765	MemberAccess	mad . RemoveLeftAd		681579	0					
ANR	681766	Identifier	mad		681579	0					
ANR	681767	Identifier	RemoveLeftAd		681579	1					
ANR	681768	ArgumentList			681579	1					
ANR	681769	ExpressionStatement	mad . RemoveRightAd ( )	490:1:13272:13292	681579	10	True				
ANR	681770	CallExpression	mad . RemoveRightAd ( )		681579	0					
ANR	681771	Callee	mad . RemoveRightAd		681579	0					
ANR	681772	MemberAccess	mad . RemoveRightAd		681579	0					
ANR	681773	Identifier	mad		681579	0					
ANR	681774	Identifier	RemoveRightAd		681579	1					
ANR	681775	ArgumentList			681579	1					
ANR	681776	ExpressionStatement	myTree -> SetParentScope ( NULL )	491:1:13295:13325	681579	11	True				
ANR	681777	CallExpression	myTree -> SetParentScope ( NULL )		681579	0					
ANR	681778	Callee	myTree -> SetParentScope		681579	0					
ANR	681779	PtrMemberAccess	myTree -> SetParentScope		681579	0					
ANR	681780	Identifier	myTree		681579	0					
ANR	681781	Identifier	SetParentScope		681579	1					
ANR	681782	ArgumentList	NULL		681579	1					
ANR	681783	Argument	NULL		681579	0					
ANR	681784	Identifier	NULL		681579	0					
ANR	681785	Statement	delete	492:1:13328:13333	681579	12	True				
ANR	681786	ExpressionStatement	emptyAd	492:8:13335:13342	681579	13	True				
ANR	681787	Identifier	emptyAd		681579	0					
ANR	681788	ReturnStatement	return true ;	493:1:13345:13356	681579	14	True				
ANR	681789	Identifier	true		681579	0					
ANR	681790	ReturnType	bool		681579	1					
ANR	681791	Identifier	BoolExpr :: EvalInContext		681579	2					
ANR	681792	ParameterList	"classad :: MatchClassAd & mad , classad :: ClassAd * context , BoolValue & result"		681579	3					
ANR	681793	Parameter	classad :: MatchClassAd & mad	453:15:12400:12425	681579	0	True				
ANR	681794	ParameterType	classad :: MatchClassAd &		681579	0					
ANR	681795	Identifier	mad		681579	1					
ANR	681796	Parameter	classad :: ClassAd * context	453:43:12428:12452	681579	1	True				
ANR	681797	ParameterType	classad :: ClassAd *		681579	0					
ANR	681798	Identifier	context		681579	1					
ANR	681799	Parameter	BoolValue & result	454:6:12461:12477	681579	2	True				
ANR	681800	ParameterType	BoolValue &		681579	0					
ANR	681801	Identifier	result		681579	1					
ANR	681802	CFGEntryNode	ENTRY		681579		True				
ANR	681803	CFGExitNode	EXIT		681579		True				
ANR	681804	Symbol	val		681579						
ANR	681805	Symbol	b		681579						
ANR	681806	Symbol	UNDEFINED_VALUE		681579						
ANR	681807	Symbol	NULL		681579						
ANR	681808	Symbol	emptyAd		681579						
ANR	681809	Symbol	val . IsErrorValue		681579						
ANR	681810	Symbol	false		681579						
ANR	681811	Symbol	* emptyAd		681579						
ANR	681812	Symbol	val . IsUndefinedValue		681579						
ANR	681813	Symbol	TRUE_VALUE		681579						
ANR	681814	Symbol	val . IsBooleanValue		681579						
ANR	681815	Symbol	result		681579						
ANR	681816	Symbol	mad		681579						
ANR	681817	Symbol	emptyAd -> EvaluateExpr		681579						
ANR	681818	Symbol	ERROR_VALUE		681579						
ANR	681819	Symbol	FALSE_VALUE		681579						
ANR	681820	Symbol	context		681579						
ANR	681821	Symbol	true		681579						
ANR	681822	Symbol	initialized		681579						
ANR	681823	Symbol	myTree		681579						
ANR	681824	Function	BoolExpr :: ToString	496:0:13361:13518							
ANR	681825	FunctionDef	BoolExpr :: ToString (string & buffer)		681824	0					
ANR	681826	CompoundStatement		498:0:13404:13518	681824	0					
ANR	681827	IfStatement	if ( ! initialized )		681824	0					
ANR	681828	Condition	! initialized	499:5:13411:13422	681824	0	True				
ANR	681829	UnaryOperationExpression	! initialized		681824	0					
ANR	681830	UnaryOperator	!		681824	0					
ANR	681831	Identifier	initialized		681824	1					
ANR	681832	CompoundStatement		2:20:21:21	681824	1					
ANR	681833	ReturnStatement	return false ;	500:2:13430:13442	681824	0	True				
ANR	681834	Identifier	false		681824	0					
ANR	681835	IdentifierDeclStatement	classad :: PrettyPrint pp ;	502:1:13448:13471	681824	1	True				
ANR	681836	IdentifierDecl	pp		681824	0					
ANR	681837	IdentifierDeclType	classad :: PrettyPrint		681824	0					
ANR	681838	Identifier	pp		681824	1					
ANR	681839	ExpressionStatement	"pp . Unparse ( buffer , myTree )"	503:1:13474:13502	681824	2	True				
ANR	681840	CallExpression	"pp . Unparse ( buffer , myTree )"		681824	0					
ANR	681841	Callee	pp . Unparse		681824	0					
ANR	681842	MemberAccess	pp . Unparse		681824	0					
ANR	681843	Identifier	pp		681824	0					
ANR	681844	Identifier	Unparse		681824	1					
ANR	681845	ArgumentList	buffer		681824	1					
ANR	681846	Argument	buffer		681824	0					
ANR	681847	Identifier	buffer		681824	0					
ANR	681848	Argument	myTree		681824	1					
ANR	681849	Identifier	myTree		681824	0					
ANR	681850	ReturnStatement	return true ;	504:1:13505:13516	681824	3	True				
ANR	681851	Identifier	true		681824	0					
ANR	681852	ReturnType	bool		681824	1					
ANR	681853	Identifier	BoolExpr :: ToString		681824	2					
ANR	681854	ParameterList	string & buffer		681824	3					
ANR	681855	Parameter	string & buffer	497:10:13387:13400	681824	0	True				
ANR	681856	ParameterType	string &		681824	0					
ANR	681857	Identifier	buffer		681824	1					
ANR	681858	CFGEntryNode	ENTRY		681824		True				
ANR	681859	CFGExitNode	EXIT		681824		True				
ANR	681860	Symbol	pp		681824						
ANR	681861	Symbol	false		681824						
ANR	681862	Symbol	true		681824						
ANR	681863	Symbol	initialized		681824						
ANR	681864	Symbol	buffer		681824						
ANR	681865	Symbol	myTree		681824						
ANR	681866	Function	BoolExpr :: Init	507:0:13521:13702							
ANR	681867	FunctionDef	BoolExpr :: Init (classad :: ExprTree * tree)		681866	0					
ANR	681868	CompoundStatement		509:0:13570:13702	681866	0					
ANR	681869	IfStatement	if ( ! tree )		681866	0					
ANR	681870	Condition	! tree	510:5:13577:13581	681866	0	True				
ANR	681871	UnaryOperationExpression	! tree		681866	0					
ANR	681872	UnaryOperator	!		681866	0					
ANR	681873	Identifier	tree		681866	1					
ANR	681874	CompoundStatement		2:13:14:14	681866	1					
ANR	681875	ReturnStatement	return false ;	511:2:13589:13601	681866	0	True				
ANR	681876	Identifier	false		681866	0					
ANR	681877	IfStatement	if ( myTree )		681866	1					
ANR	681878	Condition	myTree	513:5:13611:13616	681866	0	True				
ANR	681879	Identifier	myTree		681866	0					
ANR	681880	CompoundStatement		5:14:49:49	681866	1					
ANR	681881	Statement	delete	514:2:13624:13629	681866	0	True				
ANR	681882	ExpressionStatement	myTree	514:9:13631:13637	681866	1	True				
ANR	681883	Identifier	myTree		681866	0					
ANR	681884	ExpressionStatement	myTree = tree -> Copy ( )	516:1:13643:13665	681866	2	True				
ANR	681885	AssignmentExpression	myTree = tree -> Copy ( )		681866	0		=			
ANR	681886	Identifier	myTree		681866	0					
ANR	681887	CallExpression	tree -> Copy ( )		681866	1					
ANR	681888	Callee	tree -> Copy		681866	0					
ANR	681889	PtrMemberAccess	tree -> Copy		681866	0					
ANR	681890	Identifier	tree		681866	0					
ANR	681891	Identifier	Copy		681866	1					
ANR	681892	ArgumentList			681866	1					
ANR	681893	ExpressionStatement	initialized = true	517:1:13668:13686	681866	3	True				
ANR	681894	AssignmentExpression	initialized = true		681866	0		=			
ANR	681895	Identifier	initialized		681866	0					
ANR	681896	Identifier	true		681866	1					
ANR	681897	ReturnStatement	return true ;	518:1:13689:13700	681866	4	True				
ANR	681898	Identifier	true		681866	0					
ANR	681899	ReturnType	bool		681866	1					
ANR	681900	Identifier	BoolExpr :: Init		681866	2					
ANR	681901	ParameterList	classad :: ExprTree * tree		681866	3					
ANR	681902	Parameter	classad :: ExprTree * tree	508:6:13543:13566	681866	0	True				
ANR	681903	ParameterType	classad :: ExprTree *		681866	0					
ANR	681904	Identifier	tree		681866	1					
ANR	681905	CFGEntryNode	ENTRY		681866		True				
ANR	681906	CFGExitNode	EXIT		681866		True				
ANR	681907	Symbol	* tree		681866						
ANR	681908	Symbol	tree		681866						
ANR	681909	Symbol	false		681866						
ANR	681910	Symbol	true		681866						
ANR	681911	Symbol	initialized		681866						
ANR	681912	Symbol	myTree		681866						
ANR	681913	Symbol	tree -> Copy		681866						
ANR	681914	Function	BoolExpr :: GetExpr	522:0:13706:13765							
ANR	681915	FunctionDef	BoolExpr :: GetExpr ()		681914	0					
ANR	681916	CompoundStatement		524:0:13747:13765	681914	0					
ANR	681917	ReturnStatement	return myTree ;	525:1:13750:13763	681914	0	True				
ANR	681918	Identifier	myTree		681914	0					
ANR	681919	ReturnType	classad :: ExprTree *		681914	1					
ANR	681920	Identifier	BoolExpr :: GetExpr		681914	2					
ANR	681921	ParameterList			681914	3					
ANR	681922	CFGEntryNode	ENTRY		681914		True				
ANR	681923	CFGExitNode	EXIT		681914		True				
ANR	681924	Symbol	myTree		681914						
