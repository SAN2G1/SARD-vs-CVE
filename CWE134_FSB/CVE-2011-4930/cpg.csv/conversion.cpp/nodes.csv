command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1006373	File	data/converged/CVE-2011-4930_htcondor/conversion.cpp								
ANR	1006374	Function	toNewClassAd	24:0:863:1878							
ANR	1006375	FunctionDef	toNewClassAd (ClassAd * ad)		1006374	0					
ANR	1006376	CompoundStatement		26:0:910:1878	1006374	0					
ANR	1006377	IdentifierDeclStatement	classad :: ClassAdParser parser ;	27:1:913:942	1006374	0	True				
ANR	1006378	IdentifierDecl	parser		1006374	0					
ANR	1006379	IdentifierDeclType	classad :: ClassAdParser		1006374	0					
ANR	1006380	Identifier	parser		1006374	1					
ANR	1006381	IdentifierDeclStatement	classad :: ClassAd * newAd ;	28:1:945:968	1006374	1	True				
ANR	1006382	IdentifierDecl	* newAd		1006374	0					
ANR	1006383	IdentifierDeclType	classad :: ClassAd *		1006374	0					
ANR	1006384	Identifier	newAd		1006374	1					
ANR	1006385	IdentifierDeclStatement	const char * name ;	29:1:971:987	1006374	2	True				
ANR	1006386	IdentifierDecl	* name		1006374	0					
ANR	1006387	IdentifierDeclType	const char *		1006374	0					
ANR	1006388	Identifier	name		1006374	1					
ANR	1006389	IdentifierDeclStatement	ExprTree * expr ;	30:1:990:1004	1006374	3	True				
ANR	1006390	IdentifierDecl	* expr		1006374	0					
ANR	1006391	IdentifierDeclType	ExprTree *		1006374	0					
ANR	1006392	Identifier	expr		1006374	1					
ANR	1006393	IdentifierDeclStatement	"std :: string buffer = ""["" ;"	33:2:1067:1091	1006374	4	True				
ANR	1006394	IdentifierDecl	"buffer = ""["""		1006374	0					
ANR	1006395	IdentifierDeclType	std :: string		1006374	0					
ANR	1006396	Identifier	buffer		1006374	1					
ANR	1006397	AssignmentExpression	"buffer = ""["""		1006374	2		=			
ANR	1006398	Identifier	buffer		1006374	0					
ANR	1006399	PrimaryExpression	"""["""		1006374	1					
ANR	1006400	ExpressionStatement	ad -> ResetExpr ( )	34:1:1094:1110	1006374	5	True				
ANR	1006401	CallExpression	ad -> ResetExpr ( )		1006374	0					
ANR	1006402	Callee	ad -> ResetExpr		1006374	0					
ANR	1006403	PtrMemberAccess	ad -> ResetExpr		1006374	0					
ANR	1006404	Identifier	ad		1006374	0					
ANR	1006405	Identifier	ResetExpr		1006374	1					
ANR	1006406	ArgumentList			1006374	1					
ANR	1006407	WhileStatement	"while ( ad -> NextExpr ( name , expr ) )"		1006374	6					
ANR	1006408	Condition	"ad -> NextExpr ( name , expr )"	35:8:1120:1145	1006374	0	True				
ANR	1006409	CallExpression	"ad -> NextExpr ( name , expr )"		1006374	0					
ANR	1006410	Callee	ad -> NextExpr		1006374	0					
ANR	1006411	PtrMemberAccess	ad -> NextExpr		1006374	0					
ANR	1006412	Identifier	ad		1006374	0					
ANR	1006413	Identifier	NextExpr		1006374	1					
ANR	1006414	ArgumentList	name		1006374	1					
ANR	1006415	Argument	name		1006374	0					
ANR	1006416	Identifier	name		1006374	0					
ANR	1006417	Argument	expr		1006374	1					
ANR	1006418	Identifier	expr		1006374	0					
ANR	1006419	CompoundStatement		10:37:238:238	1006374	1					
ANR	1006420	ExpressionStatement	buffer += name	36:2:1153:1167	1006374	0	True				
ANR	1006421	AssignmentExpression	buffer += name		1006374	0		+=			
ANR	1006422	Identifier	buffer		1006374	0					
ANR	1006423	Identifier	name		1006374	1					
ANR	1006424	ExpressionStatement	"buffer += ""="""	37:2:1171:1184	1006374	1	True				
ANR	1006425	AssignmentExpression	"buffer += ""="""		1006374	0		+=			
ANR	1006426	Identifier	buffer		1006374	0					
ANR	1006427	PrimaryExpression	"""="""		1006374	1					
ANR	1006428	ExpressionStatement	buffer += ExprTreeToString ( expr )	38:2:1188:1222	1006374	2	True				
ANR	1006429	AssignmentExpression	buffer += ExprTreeToString ( expr )		1006374	0		+=			
ANR	1006430	Identifier	buffer		1006374	0					
ANR	1006431	CallExpression	ExprTreeToString ( expr )		1006374	1					
ANR	1006432	Callee	ExprTreeToString		1006374	0					
ANR	1006433	Identifier	ExprTreeToString		1006374	0					
ANR	1006434	ArgumentList	expr		1006374	1					
ANR	1006435	Argument	expr		1006374	0					
ANR	1006436	Identifier	expr		1006374	0					
ANR	1006437	ExpressionStatement	"buffer += "";"""	39:2:1226:1239	1006374	3	True				
ANR	1006438	AssignmentExpression	"buffer += "";"""		1006374	0		+=			
ANR	1006439	Identifier	buffer		1006374	0					
ANR	1006440	PrimaryExpression	""";"""		1006374	1					
ANR	1006441	ExpressionStatement	"buffer += ""]"""	41:1:1245:1258	1006374	7	True				
ANR	1006442	AssignmentExpression	"buffer += ""]"""		1006374	0		+=			
ANR	1006443	Identifier	buffer		1006374	0					
ANR	1006444	PrimaryExpression	"""]"""		1006374	1					
ANR	1006445	ExpressionStatement	newAd = parser . ParseClassAd ( buffer )	43:1:1262:1299	1006374	8	True				
ANR	1006446	AssignmentExpression	newAd = parser . ParseClassAd ( buffer )		1006374	0		=			
ANR	1006447	Identifier	newAd		1006374	0					
ANR	1006448	CallExpression	parser . ParseClassAd ( buffer )		1006374	1					
ANR	1006449	Callee	parser . ParseClassAd		1006374	0					
ANR	1006450	MemberAccess	parser . ParseClassAd		1006374	0					
ANR	1006451	Identifier	parser		1006374	0					
ANR	1006452	Identifier	ParseClassAd		1006374	1					
ANR	1006453	ArgumentList	buffer		1006374	1					
ANR	1006454	Argument	buffer		1006374	0					
ANR	1006455	Identifier	buffer		1006374	0					
ANR	1006456	IfStatement	if ( newAd == NULL )		1006374	9					
ANR	1006457	Condition	newAd == NULL	45:5:1307:1319	1006374	0	True				
ANR	1006458	EqualityExpression	newAd == NULL		1006374	0		==			
ANR	1006459	Identifier	newAd		1006374	0					
ANR	1006460	Identifier	NULL		1006374	1					
ANR	1006461	CompoundStatement		20:21:412:412	1006374	1					
ANR	1006462	ExpressionStatement	"buffer = ""["""	47:2:1382:1394	1006374	0	True				
ANR	1006463	AssignmentExpression	"buffer = ""["""		1006374	0		=			
ANR	1006464	Identifier	buffer		1006374	0					
ANR	1006465	PrimaryExpression	"""["""		1006374	1					
ANR	1006466	ExpressionStatement	ad -> ResetExpr ( )	48:2:1398:1414	1006374	1	True				
ANR	1006467	CallExpression	ad -> ResetExpr ( )		1006374	0					
ANR	1006468	Callee	ad -> ResetExpr		1006374	0					
ANR	1006469	PtrMemberAccess	ad -> ResetExpr		1006374	0					
ANR	1006470	Identifier	ad		1006374	0					
ANR	1006471	Identifier	ResetExpr		1006374	1					
ANR	1006472	ArgumentList			1006374	1					
ANR	1006473	WhileStatement	"while ( ad -> NextExpr ( name , expr ) )"		1006374	2					
ANR	1006474	Condition	"ad -> NextExpr ( name , expr )"	49:9:1425:1450	1006374	0	True				
ANR	1006475	CallExpression	"ad -> NextExpr ( name , expr )"		1006374	0					
ANR	1006476	Callee	ad -> NextExpr		1006374	0					
ANR	1006477	PtrMemberAccess	ad -> NextExpr		1006374	0					
ANR	1006478	Identifier	ad		1006374	0					
ANR	1006479	Identifier	NextExpr		1006374	1					
ANR	1006480	ArgumentList	name		1006374	1					
ANR	1006481	Argument	name		1006374	0					
ANR	1006482	Identifier	name		1006374	0					
ANR	1006483	Argument	expr		1006374	1					
ANR	1006484	Identifier	expr		1006374	0					
ANR	1006485	CompoundStatement		24:38:543:543	1006374	1					
ANR	1006486	ExpressionStatement	"buffer += ""'"""	50:3:1459:1472	1006374	0	True				
ANR	1006487	AssignmentExpression	"buffer += ""'"""		1006374	0		+=			
ANR	1006488	Identifier	buffer		1006374	0					
ANR	1006489	PrimaryExpression	"""'"""		1006374	1					
ANR	1006490	ExpressionStatement	"buffer += std :: string ( name ) + ""' = """	51:3:1477:1515	1006374	1	True				
ANR	1006491	AssignmentExpression	"buffer += std :: string ( name ) + ""' = """		1006374	0		+=			
ANR	1006492	Identifier	buffer		1006374	0					
ANR	1006493	AdditiveExpression	"std :: string ( name ) + ""' = """		1006374	1		+			
ANR	1006494	CallExpression	std :: string ( name )		1006374	0					
ANR	1006495	Callee	std :: string		1006374	0					
ANR	1006496	Identifier	std :: string		1006374	0					
ANR	1006497	ArgumentList	name		1006374	1					
ANR	1006498	Argument	name		1006374	0					
ANR	1006499	Identifier	name		1006374	0					
ANR	1006500	PrimaryExpression	"""' = """		1006374	1					
ANR	1006501	ExpressionStatement	"buffer += std :: string ( ExprTreeToString ( expr ) ) + "";"""	52:3:1520:1575	1006374	2	True				
ANR	1006502	AssignmentExpression	"buffer += std :: string ( ExprTreeToString ( expr ) ) + "";"""		1006374	0		+=			
ANR	1006503	Identifier	buffer		1006374	0					
ANR	1006504	AdditiveExpression	"std :: string ( ExprTreeToString ( expr ) ) + "";"""		1006374	1		+			
ANR	1006505	CallExpression	std :: string ( ExprTreeToString ( expr ) )		1006374	0					
ANR	1006506	Callee	std :: string		1006374	0					
ANR	1006507	Identifier	std :: string		1006374	0					
ANR	1006508	ArgumentList	ExprTreeToString ( expr )		1006374	1					
ANR	1006509	Argument	ExprTreeToString ( expr )		1006374	0					
ANR	1006510	CallExpression	ExprTreeToString ( expr )		1006374	0					
ANR	1006511	Callee	ExprTreeToString		1006374	0					
ANR	1006512	Identifier	ExprTreeToString		1006374	0					
ANR	1006513	ArgumentList	expr		1006374	1					
ANR	1006514	Argument	expr		1006374	0					
ANR	1006515	Identifier	expr		1006374	0					
ANR	1006516	PrimaryExpression	""";"""		1006374	1					
ANR	1006517	ExpressionStatement	"buffer += ""]"""	54:2:1583:1596	1006374	3	True				
ANR	1006518	AssignmentExpression	"buffer += ""]"""		1006374	0		+=			
ANR	1006519	Identifier	buffer		1006374	0					
ANR	1006520	PrimaryExpression	"""]"""		1006374	1					
ANR	1006521	ExpressionStatement	newAd = parser . ParseClassAd ( buffer )	56:2:1601:1638	1006374	4	True				
ANR	1006522	AssignmentExpression	newAd = parser . ParseClassAd ( buffer )		1006374	0		=			
ANR	1006523	Identifier	newAd		1006374	0					
ANR	1006524	CallExpression	parser . ParseClassAd ( buffer )		1006374	1					
ANR	1006525	Callee	parser . ParseClassAd		1006374	0					
ANR	1006526	MemberAccess	parser . ParseClassAd		1006374	0					
ANR	1006527	Identifier	parser		1006374	0					
ANR	1006528	Identifier	ParseClassAd		1006374	1					
ANR	1006529	ArgumentList	buffer		1006374	1					
ANR	1006530	Argument	buffer		1006374	0					
ANR	1006531	Identifier	buffer		1006374	0					
ANR	1006532	IfStatement	if ( newAd == NULL )		1006374	5					
ANR	1006533	Condition	newAd == NULL	58:6:1647:1659	1006374	0	True				
ANR	1006534	EqualityExpression	newAd == NULL		1006374	0		==			
ANR	1006535	Identifier	newAd		1006374	0					
ANR	1006536	Identifier	NULL		1006374	1					
ANR	1006537	CompoundStatement		33:22:752:752	1006374	1					
ANR	1006538	ReturnStatement	return NULL ;	60:3:1696:1707	1006374	0	True				
ANR	1006539	Identifier	NULL		1006374	0					
ANR	1006540	ExpressionStatement	"newAd -> InsertAttr ( ""MyType"" , std :: string ( ad -> GetMyTypeName ( ) ) )"	64:1:1718:1784	1006374	10	True				
ANR	1006541	CallExpression	"newAd -> InsertAttr ( ""MyType"" , std :: string ( ad -> GetMyTypeName ( ) ) )"		1006374	0					
ANR	1006542	Callee	newAd -> InsertAttr		1006374	0					
ANR	1006543	PtrMemberAccess	newAd -> InsertAttr		1006374	0					
ANR	1006544	Identifier	newAd		1006374	0					
ANR	1006545	Identifier	InsertAttr		1006374	1					
ANR	1006546	ArgumentList	"""MyType"""		1006374	1					
ANR	1006547	Argument	"""MyType"""		1006374	0					
ANR	1006548	PrimaryExpression	"""MyType"""		1006374	0					
ANR	1006549	Argument	std :: string ( ad -> GetMyTypeName ( ) )		1006374	1					
ANR	1006550	CallExpression	std :: string ( ad -> GetMyTypeName ( ) )		1006374	0					
ANR	1006551	Callee	std :: string		1006374	0					
ANR	1006552	Identifier	std :: string		1006374	0					
ANR	1006553	ArgumentList	ad -> GetMyTypeName ( )		1006374	1					
ANR	1006554	Argument	ad -> GetMyTypeName ( )		1006374	0					
ANR	1006555	CallExpression	ad -> GetMyTypeName ( )		1006374	0					
ANR	1006556	Callee	ad -> GetMyTypeName		1006374	0					
ANR	1006557	PtrMemberAccess	ad -> GetMyTypeName		1006374	0					
ANR	1006558	Identifier	ad		1006374	0					
ANR	1006559	Identifier	GetMyTypeName		1006374	1					
ANR	1006560	ArgumentList			1006374	1					
ANR	1006561	ExpressionStatement	"newAd -> InsertAttr ( ""TargetType"" , std :: string ( ad -> GetTargetTypeName ( ) ) )"	65:1:1787:1861	1006374	11	True				
ANR	1006562	CallExpression	"newAd -> InsertAttr ( ""TargetType"" , std :: string ( ad -> GetTargetTypeName ( ) ) )"		1006374	0					
ANR	1006563	Callee	newAd -> InsertAttr		1006374	0					
ANR	1006564	PtrMemberAccess	newAd -> InsertAttr		1006374	0					
ANR	1006565	Identifier	newAd		1006374	0					
ANR	1006566	Identifier	InsertAttr		1006374	1					
ANR	1006567	ArgumentList	"""TargetType"""		1006374	1					
ANR	1006568	Argument	"""TargetType"""		1006374	0					
ANR	1006569	PrimaryExpression	"""TargetType"""		1006374	0					
ANR	1006570	Argument	std :: string ( ad -> GetTargetTypeName ( ) )		1006374	1					
ANR	1006571	CallExpression	std :: string ( ad -> GetTargetTypeName ( ) )		1006374	0					
ANR	1006572	Callee	std :: string		1006374	0					
ANR	1006573	Identifier	std :: string		1006374	0					
ANR	1006574	ArgumentList	ad -> GetTargetTypeName ( )		1006374	1					
ANR	1006575	Argument	ad -> GetTargetTypeName ( )		1006374	0					
ANR	1006576	CallExpression	ad -> GetTargetTypeName ( )		1006374	0					
ANR	1006577	Callee	ad -> GetTargetTypeName		1006374	0					
ANR	1006578	PtrMemberAccess	ad -> GetTargetTypeName		1006374	0					
ANR	1006579	Identifier	ad		1006374	0					
ANR	1006580	Identifier	GetTargetTypeName		1006374	1					
ANR	1006581	ArgumentList			1006374	1					
ANR	1006582	ReturnStatement	return newAd ;	66:1:1864:1876	1006374	12	True				
ANR	1006583	Identifier	newAd		1006374	0					
ANR	1006584	ReturnType	classad :: ClassAd *		1006374	1					
ANR	1006585	Identifier	toNewClassAd		1006374	2					
ANR	1006586	ParameterList	ClassAd * ad		1006374	3					
ANR	1006587	Parameter	ClassAd * ad	25:14:896:906	1006374	0	True				
ANR	1006588	ParameterType	ClassAd *		1006374	0					
ANR	1006589	Identifier	ad		1006374	1					
ANR	1006590	CFGEntryNode	ENTRY		1006374		True				
ANR	1006591	CFGExitNode	EXIT		1006374		True				
ANR	1006592	Symbol	ad		1006374						
ANR	1006593	Symbol	NULL		1006374						
ANR	1006594	Symbol	ad -> GetTargetTypeName		1006374						
ANR	1006595	Symbol	ExprTreeToString		1006374						
ANR	1006596	Symbol	* ad		1006374						
ANR	1006597	Symbol	ad -> NextExpr		1006374						
ANR	1006598	Symbol	parser . ParseClassAd		1006374						
ANR	1006599	Symbol	parser		1006374						
ANR	1006600	Symbol	std :: string		1006374						
ANR	1006601	Symbol	name		1006374						
ANR	1006602	Symbol	ad -> GetMyTypeName		1006374						
ANR	1006603	Symbol	expr		1006374						
ANR	1006604	Symbol	buffer		1006374						
ANR	1006605	Symbol	newAd		1006374						
ANR	1006606	Function	toOldClassAd	69:0:1881:2717							
ANR	1006607	FunctionDef	toOldClassAd (classad :: ClassAd * ad)		1006606	0					
ANR	1006608	CompoundStatement		71:0:1929:2717	1006606	0					
ANR	1006609	IdentifierDeclStatement	ClassAd * oldAd = new ClassAd ( ) ;	72:1:1932:1963	1006606	0	True				
ANR	1006610	IdentifierDecl	* oldAd = new ClassAd ( )		1006606	0					
ANR	1006611	IdentifierDeclType	ClassAd *		1006606	0					
ANR	1006612	Identifier	oldAd		1006606	1					
ANR	1006613	AssignmentExpression	* oldAd = new ClassAd ( )		1006606	2		=			
ANR	1006614	Identifier	oldAd		1006606	0					
ANR	1006615	UnaryExpression	new ClassAd ( )		1006606	1					
ANR	1006616	IdentifierDeclStatement	classad :: ClassAd :: iterator adIter ;	73:1:1966:1999	1006606	1	True				
ANR	1006617	IdentifierDecl	adIter		1006606	0					
ANR	1006618	IdentifierDeclType	classad :: ClassAd :: iterator		1006606	0					
ANR	1006619	Identifier	adIter		1006606	1					
ANR	1006620	IdentifierDeclStatement	classad :: ClassAdUnParser unp ;	74:4:2005:2033	1006606	2	True				
ANR	1006621	IdentifierDecl	unp		1006606	0					
ANR	1006622	IdentifierDeclType	classad :: ClassAdUnParser		1006606	0					
ANR	1006623	Identifier	unp		1006606	1					
ANR	1006624	ExpressionStatement	unp . SetOldClassAd ( true )	75:1:2036:2061	1006606	3	True				
ANR	1006625	CallExpression	unp . SetOldClassAd ( true )		1006606	0					
ANR	1006626	Callee	unp . SetOldClassAd		1006606	0					
ANR	1006627	MemberAccess	unp . SetOldClassAd		1006606	0					
ANR	1006628	Identifier	unp		1006606	0					
ANR	1006629	Identifier	SetOldClassAd		1006606	1					
ANR	1006630	ArgumentList	true		1006606	1					
ANR	1006631	Argument	true		1006606	0					
ANR	1006632	Identifier	true		1006606	0					
ANR	1006633	IdentifierDeclStatement	std :: string rhstring ;	76:1:2064:2084	1006606	4	True				
ANR	1006634	IdentifierDecl	rhstring		1006606	0					
ANR	1006635	IdentifierDeclType	std :: string		1006606	0					
ANR	1006636	Identifier	rhstring		1006606	1					
ANR	1006637	ForStatement	for ( adIter = ad -> begin ( ) ; adIter != ad -> end ( ) ; adIter ++ )		1006606	5					
ANR	1006638	ForInit	adIter = ad -> begin ( ) ;	77:6:2092:2113	1006606	0	True				
ANR	1006639	AssignmentExpression	adIter = ad -> begin ( )		1006606	0		=			
ANR	1006640	Identifier	adIter		1006606	0					
ANR	1006641	CallExpression	ad -> begin ( )		1006606	1					
ANR	1006642	Callee	ad -> begin		1006606	0					
ANR	1006643	PtrMemberAccess	ad -> begin		1006606	0					
ANR	1006644	Identifier	ad		1006606	0					
ANR	1006645	Identifier	begin		1006606	1					
ANR	1006646	ArgumentList			1006606	1					
ANR	1006647	Condition	adIter != ad -> end ( )	77:29:2115:2134	1006606	1	True				
ANR	1006648	EqualityExpression	adIter != ad -> end ( )		1006606	0		!=			
ANR	1006649	Identifier	adIter		1006606	0					
ANR	1006650	CallExpression	ad -> end ( )		1006606	1					
ANR	1006651	Callee	ad -> end		1006606	0					
ANR	1006652	PtrMemberAccess	ad -> end		1006606	0					
ANR	1006653	Identifier	ad		1006606	0					
ANR	1006654	Identifier	end		1006606	1					
ANR	1006655	ArgumentList			1006606	1					
ANR	1006656	PostIncDecOperationExpression	adIter ++	77:51:2137:2144	1006606	2	True				
ANR	1006657	Identifier	adIter		1006606	0					
ANR	1006658	IncDec	++		1006606	1					
ANR	1006659	CompoundStatement		7:62:218:218	1006606	3					
ANR	1006660	IfStatement	"if ( strcasecmp ( ""MyType"" , adIter -> first . c_str ( ) ) != 0 && strcasecmp ( ""TargetType"" , adIter -> first . c_str ( ) ) != 0 )"		1006606	0					
ANR	1006661	Condition	"strcasecmp ( ""MyType"" , adIter -> first . c_str ( ) ) != 0 && strcasecmp ( ""TargetType"" , adIter -> first . c_str ( ) ) != 0"	78:6:2156:2268	1006606	0	True				
ANR	1006662	AndExpression	"strcasecmp ( ""MyType"" , adIter -> first . c_str ( ) ) != 0 && strcasecmp ( ""TargetType"" , adIter -> first . c_str ( ) ) != 0"		1006606	0		&&			
ANR	1006663	EqualityExpression	"strcasecmp ( ""MyType"" , adIter -> first . c_str ( ) ) != 0"		1006606	0		!=			
ANR	1006664	CallExpression	"strcasecmp ( ""MyType"" , adIter -> first . c_str ( ) )"		1006606	0					
ANR	1006665	Callee	strcasecmp		1006606	0					
ANR	1006666	Identifier	strcasecmp		1006606	0					
ANR	1006667	ArgumentList	"""MyType"""		1006606	1					
ANR	1006668	Argument	"""MyType"""		1006606	0					
ANR	1006669	PrimaryExpression	"""MyType"""		1006606	0					
ANR	1006670	Argument	adIter -> first . c_str ( )		1006606	1					
ANR	1006671	CallExpression	adIter -> first . c_str ( )		1006606	0					
ANR	1006672	Callee	adIter -> first . c_str		1006606	0					
ANR	1006673	MemberAccess	adIter -> first . c_str		1006606	0					
ANR	1006674	PtrMemberAccess	adIter -> first		1006606	0					
ANR	1006675	Identifier	adIter		1006606	0					
ANR	1006676	Identifier	first		1006606	1					
ANR	1006677	Identifier	c_str		1006606	1					
ANR	1006678	ArgumentList			1006606	1					
ANR	1006679	PrimaryExpression	0		1006606	1					
ANR	1006680	EqualityExpression	"strcasecmp ( ""TargetType"" , adIter -> first . c_str ( ) ) != 0"		1006606	1		!=			
ANR	1006681	CallExpression	"strcasecmp ( ""TargetType"" , adIter -> first . c_str ( ) )"		1006606	0					
ANR	1006682	Callee	strcasecmp		1006606	0					
ANR	1006683	Identifier	strcasecmp		1006606	0					
ANR	1006684	ArgumentList	"""TargetType"""		1006606	1					
ANR	1006685	Argument	"""TargetType"""		1006606	0					
ANR	1006686	PrimaryExpression	"""TargetType"""		1006606	0					
ANR	1006687	Argument	adIter -> first . c_str ( )		1006606	1					
ANR	1006688	CallExpression	adIter -> first . c_str ( )		1006606	0					
ANR	1006689	Callee	adIter -> first . c_str		1006606	0					
ANR	1006690	MemberAccess	adIter -> first . c_str		1006606	0					
ANR	1006691	PtrMemberAccess	adIter -> first		1006606	0					
ANR	1006692	Identifier	adIter		1006606	0					
ANR	1006693	Identifier	first		1006606	1					
ANR	1006694	Identifier	c_str		1006606	1					
ANR	1006695	ArgumentList			1006606	1					
ANR	1006696	PrimaryExpression	0		1006606	1					
ANR	1006697	CompoundStatement		9:61:342:342	1006606	1					
ANR	1006698	ExpressionStatement	"rhstring = """""	80:3:2277:2290	1006606	0	True				
ANR	1006699	AssignmentExpression	"rhstring = """""		1006606	0		=			
ANR	1006700	Identifier	rhstring		1006606	0					
ANR	1006701	PrimaryExpression	""""""		1006606	1					
ANR	1006702	ExpressionStatement	"unp . Unparse ( rhstring , adIter -> second )"	81:3:2295:2334	1006606	1	True				
ANR	1006703	CallExpression	"unp . Unparse ( rhstring , adIter -> second )"		1006606	0					
ANR	1006704	Callee	unp . Unparse		1006606	0					
ANR	1006705	MemberAccess	unp . Unparse		1006606	0					
ANR	1006706	Identifier	unp		1006606	0					
ANR	1006707	Identifier	Unparse		1006606	1					
ANR	1006708	ArgumentList	rhstring		1006606	1					
ANR	1006709	Argument	rhstring		1006606	0					
ANR	1006710	Identifier	rhstring		1006606	0					
ANR	1006711	Argument	adIter -> second		1006606	1					
ANR	1006712	PtrMemberAccess	adIter -> second		1006606	0					
ANR	1006713	Identifier	adIter		1006606	0					
ANR	1006714	Identifier	second		1006606	1					
ANR	1006715	ExpressionStatement	"oldAd -> AssignExpr ( adIter -> first . c_str ( ) , rhstring . c_str ( ) )"	82:3:2339:2399	1006606	2	True				
ANR	1006716	CallExpression	"oldAd -> AssignExpr ( adIter -> first . c_str ( ) , rhstring . c_str ( ) )"		1006606	0					
ANR	1006717	Callee	oldAd -> AssignExpr		1006606	0					
ANR	1006718	PtrMemberAccess	oldAd -> AssignExpr		1006606	0					
ANR	1006719	Identifier	oldAd		1006606	0					
ANR	1006720	Identifier	AssignExpr		1006606	1					
ANR	1006721	ArgumentList	adIter -> first . c_str ( )		1006606	1					
ANR	1006722	Argument	adIter -> first . c_str ( )		1006606	0					
ANR	1006723	CallExpression	adIter -> first . c_str ( )		1006606	0					
ANR	1006724	Callee	adIter -> first . c_str		1006606	0					
ANR	1006725	MemberAccess	adIter -> first . c_str		1006606	0					
ANR	1006726	PtrMemberAccess	adIter -> first		1006606	0					
ANR	1006727	Identifier	adIter		1006606	0					
ANR	1006728	Identifier	first		1006606	1					
ANR	1006729	Identifier	c_str		1006606	1					
ANR	1006730	ArgumentList			1006606	1					
ANR	1006731	Argument	rhstring . c_str ( )		1006606	1					
ANR	1006732	CallExpression	rhstring . c_str ( )		1006606	0					
ANR	1006733	Callee	rhstring . c_str		1006606	0					
ANR	1006734	MemberAccess	rhstring . c_str		1006606	0					
ANR	1006735	Identifier	rhstring		1006606	0					
ANR	1006736	Identifier	c_str		1006606	1					
ANR	1006737	ArgumentList			1006606	1					
ANR	1006738	IdentifierDeclStatement	"std :: string buffer = """" ;"	86:1:2410:2433	1006606	6	True				
ANR	1006739	IdentifierDecl	"buffer = """""		1006606	0					
ANR	1006740	IdentifierDeclType	std :: string		1006606	0					
ANR	1006741	Identifier	buffer		1006606	1					
ANR	1006742	AssignmentExpression	"buffer = """""		1006606	2		=			
ANR	1006743	Identifier	buffer		1006606	0					
ANR	1006744	PrimaryExpression	""""""		1006606	1					
ANR	1006745	IfStatement	"if ( ! ad -> EvaluateAttrString ( ""MyType"" , buffer ) )"		1006606	7					
ANR	1006746	Condition	"! ad -> EvaluateAttrString ( ""MyType"" , buffer )"	87:5:2440:2479	1006606	0	True				
ANR	1006747	UnaryOperationExpression	"! ad -> EvaluateAttrString ( ""MyType"" , buffer )"		1006606	0					
ANR	1006748	UnaryOperator	!		1006606	0					
ANR	1006749	CallExpression	"ad -> EvaluateAttrString ( ""MyType"" , buffer )"		1006606	1					
ANR	1006750	Callee	ad -> EvaluateAttrString		1006606	0					
ANR	1006751	PtrMemberAccess	ad -> EvaluateAttrString		1006606	0					
ANR	1006752	Identifier	ad		1006606	0					
ANR	1006753	Identifier	EvaluateAttrString		1006606	1					
ANR	1006754	ArgumentList	"""MyType"""		1006606	1					
ANR	1006755	Argument	"""MyType"""		1006606	0					
ANR	1006756	PrimaryExpression	"""MyType"""		1006606	0					
ANR	1006757	Argument	buffer		1006606	1					
ANR	1006758	Identifier	buffer		1006606	0					
ANR	1006759	CompoundStatement		17:47:552:552	1006606	1					
ANR	1006760	ExpressionStatement	"buffer = ""(unknown type)"""	88:2:2486:2509	1006606	0	True				
ANR	1006761	AssignmentExpression	"buffer = ""(unknown type)"""		1006606	0		=			
ANR	1006762	Identifier	buffer		1006606	0					
ANR	1006763	PrimaryExpression	"""(unknown type)"""		1006606	1					
ANR	1006764	ExpressionStatement	oldAd -> SetMyTypeName ( buffer . c_str ( ) )	90:1:2515:2554	1006606	8	True				
ANR	1006765	CallExpression	oldAd -> SetMyTypeName ( buffer . c_str ( ) )		1006606	0					
ANR	1006766	Callee	oldAd -> SetMyTypeName		1006606	0					
ANR	1006767	PtrMemberAccess	oldAd -> SetMyTypeName		1006606	0					
ANR	1006768	Identifier	oldAd		1006606	0					
ANR	1006769	Identifier	SetMyTypeName		1006606	1					
ANR	1006770	ArgumentList	buffer . c_str ( )		1006606	1					
ANR	1006771	Argument	buffer . c_str ( )		1006606	0					
ANR	1006772	CallExpression	buffer . c_str ( )		1006606	0					
ANR	1006773	Callee	buffer . c_str		1006606	0					
ANR	1006774	MemberAccess	buffer . c_str		1006606	0					
ANR	1006775	Identifier	buffer		1006606	0					
ANR	1006776	Identifier	c_str		1006606	1					
ANR	1006777	ArgumentList			1006606	1					
ANR	1006778	ExpressionStatement	"buffer = """""	92:1:2558:2569	1006606	9	True				
ANR	1006779	AssignmentExpression	"buffer = """""		1006606	0		=			
ANR	1006780	Identifier	buffer		1006606	0					
ANR	1006781	PrimaryExpression	""""""		1006606	1					
ANR	1006782	IfStatement	"if ( ! ad -> EvaluateAttrString ( ""TargetType"" , buffer ) )"		1006606	10					
ANR	1006783	Condition	"! ad -> EvaluateAttrString ( ""TargetType"" , buffer )"	93:5:2576:2619	1006606	0	True				
ANR	1006784	UnaryOperationExpression	"! ad -> EvaluateAttrString ( ""TargetType"" , buffer )"		1006606	0					
ANR	1006785	UnaryOperator	!		1006606	0					
ANR	1006786	CallExpression	"ad -> EvaluateAttrString ( ""TargetType"" , buffer )"		1006606	1					
ANR	1006787	Callee	ad -> EvaluateAttrString		1006606	0					
ANR	1006788	PtrMemberAccess	ad -> EvaluateAttrString		1006606	0					
ANR	1006789	Identifier	ad		1006606	0					
ANR	1006790	Identifier	EvaluateAttrString		1006606	1					
ANR	1006791	ArgumentList	"""TargetType"""		1006606	1					
ANR	1006792	Argument	"""TargetType"""		1006606	0					
ANR	1006793	PrimaryExpression	"""TargetType"""		1006606	0					
ANR	1006794	Argument	buffer		1006606	1					
ANR	1006795	Identifier	buffer		1006606	0					
ANR	1006796	CompoundStatement		23:51:692:692	1006606	1					
ANR	1006797	ExpressionStatement	"buffer = ""(unknown type)"""	94:2:2626:2649	1006606	0	True				
ANR	1006798	AssignmentExpression	"buffer = ""(unknown type)"""		1006606	0		=			
ANR	1006799	Identifier	buffer		1006606	0					
ANR	1006800	PrimaryExpression	"""(unknown type)"""		1006606	1					
ANR	1006801	ExpressionStatement	oldAd -> SetTargetTypeName ( buffer . c_str ( ) )	96:1:2655:2698	1006606	11	True				
ANR	1006802	CallExpression	oldAd -> SetTargetTypeName ( buffer . c_str ( ) )		1006606	0					
ANR	1006803	Callee	oldAd -> SetTargetTypeName		1006606	0					
ANR	1006804	PtrMemberAccess	oldAd -> SetTargetTypeName		1006606	0					
ANR	1006805	Identifier	oldAd		1006606	0					
ANR	1006806	Identifier	SetTargetTypeName		1006606	1					
ANR	1006807	ArgumentList	buffer . c_str ( )		1006606	1					
ANR	1006808	Argument	buffer . c_str ( )		1006606	0					
ANR	1006809	CallExpression	buffer . c_str ( )		1006606	0					
ANR	1006810	Callee	buffer . c_str		1006606	0					
ANR	1006811	MemberAccess	buffer . c_str		1006606	0					
ANR	1006812	Identifier	buffer		1006606	0					
ANR	1006813	Identifier	c_str		1006606	1					
ANR	1006814	ArgumentList			1006606	1					
ANR	1006815	ReturnStatement	return oldAd ;	98:1:2703:2715	1006606	12	True				
ANR	1006816	Identifier	oldAd		1006606	0					
ANR	1006817	ReturnType	ClassAd *		1006606	1					
ANR	1006818	Identifier	toOldClassAd		1006606	2					
ANR	1006819	ParameterList	classad :: ClassAd * ad		1006606	3					
ANR	1006820	Parameter	classad :: ClassAd * ad	70:14:1905:1925	1006606	0	True				
ANR	1006821	ParameterType	classad :: ClassAd *		1006606	0					
ANR	1006822	Identifier	ad		1006606	1					
ANR	1006823	CFGEntryNode	ENTRY		1006606		True				
ANR	1006824	CFGExitNode	EXIT		1006606		True				
ANR	1006825	Symbol	buffer . c_str		1006606						
ANR	1006826	Symbol	ad		1006606						
ANR	1006827	Symbol	oldAd		1006606						
ANR	1006828	Symbol	rhstring		1006606						
ANR	1006829	Symbol	adIter -> first . c_str		1006606						
ANR	1006830	Symbol	ad -> end		1006606						
ANR	1006831	Symbol	* ad		1006606						
ANR	1006832	Symbol	adIter		1006606						
ANR	1006833	Symbol	rhstring . c_str		1006606						
ANR	1006834	Symbol	* adIter		1006606						
ANR	1006835	Symbol	unp		1006606						
ANR	1006836	Symbol	true		1006606						
ANR	1006837	Symbol	adIter -> first		1006606						
ANR	1006838	Symbol	adIter -> second		1006606						
ANR	1006839	Symbol	ad -> begin		1006606						
ANR	1006840	Symbol	buffer		1006606						
ANR	1006841	Symbol	strcasecmp		1006606						
ANR	1006842	Symbol	ad -> EvaluateAttrString		1006606						
ANR	1006843	Function	AddExplicitTargets	240:0:7061:7548							
ANR	1006844	FunctionDef	AddExplicitTargets (classad :: ClassAd * ad)		1006843	0					
ANR	1006845	CompoundStatement		242:0:7123:7548	1006843	0					
ANR	1006846	IdentifierDeclStatement	"std :: string attr = """" ;"	243:1:7126:7147	1006843	0	True				
ANR	1006847	IdentifierDecl	"attr = """""		1006843	0					
ANR	1006848	IdentifierDeclType	std :: string		1006843	0					
ANR	1006849	Identifier	attr		1006843	1					
ANR	1006850	AssignmentExpression	"attr = """""		1006843	2		=			
ANR	1006851	Identifier	attr		1006843	0					
ANR	1006852	PrimaryExpression	""""""		1006843	1					
ANR	1006853	IdentifierDeclStatement	"std :: set < std :: string , classad :: CaseIgnLTStr > definedAttrs ;"	244:1:7150:7209	1006843	1	True				
ANR	1006854	IdentifierDecl	definedAttrs		1006843	0					
ANR	1006855	IdentifierDeclType	"std :: set < std :: string , classad :: CaseIgnLTStr >"		1006843	0					
ANR	1006856	Identifier	definedAttrs		1006843	1					
ANR	1006857	ForStatement	for ( classad :: ClassAd :: iterator a = ad -> begin ( ) ; a != ad -> end ( ) ; a ++ )		1006843	2					
ANR	1006858	ForInit	classad :: ClassAd :: iterator a = ad -> begin ( ) ;	246:6:7219:7262	1006843	0	True				
ANR	1006859	IdentifierDeclStatement	classad :: ClassAd :: iterator a = ad -> begin ( ) ;		1006843	0					
ANR	1006860	IdentifierDecl	a = ad -> begin ( )		1006843	0					
ANR	1006861	IdentifierDeclType	classad :: ClassAd :: iterator		1006843	0					
ANR	1006862	Identifier	a		1006843	1					
ANR	1006863	AssignmentExpression	a = ad -> begin ( )		1006843	2		=			
ANR	1006864	Identifier	a		1006843	0					
ANR	1006865	CallExpression	ad -> begin ( )		1006843	1					
ANR	1006866	Callee	ad -> begin		1006843	0					
ANR	1006867	PtrMemberAccess	ad -> begin		1006843	0					
ANR	1006868	Identifier	ad		1006843	0					
ANR	1006869	Identifier	begin		1006843	1					
ANR	1006870	ArgumentList			1006843	1					
ANR	1006871	Condition	a != ad -> end ( )	246:51:7264:7278	1006843	1	True				
ANR	1006872	EqualityExpression	a != ad -> end ( )		1006843	0		!=			
ANR	1006873	Identifier	a		1006843	0					
ANR	1006874	CallExpression	ad -> end ( )		1006843	1					
ANR	1006875	Callee	ad -> end		1006843	0					
ANR	1006876	PtrMemberAccess	ad -> end		1006843	0					
ANR	1006877	Identifier	ad		1006843	0					
ANR	1006878	Identifier	end		1006843	1					
ANR	1006879	ArgumentList			1006843	1					
ANR	1006880	PostIncDecOperationExpression	a ++	246:68:7281:7283	1006843	2	True				
ANR	1006881	Identifier	a		1006843	0					
ANR	1006882	IncDec	++		1006843	1					
ANR	1006883	CompoundStatement		5:74:163:163	1006843	3					
ANR	1006884	ExpressionStatement	definedAttrs . insert ( a -> first )	247:2:7291:7322	1006843	0	True				
ANR	1006885	CallExpression	definedAttrs . insert ( a -> first )		1006843	0					
ANR	1006886	Callee	definedAttrs . insert		1006843	0					
ANR	1006887	MemberAccess	definedAttrs . insert		1006843	0					
ANR	1006888	Identifier	definedAttrs		1006843	0					
ANR	1006889	Identifier	insert		1006843	1					
ANR	1006890	ArgumentList	a -> first		1006843	1					
ANR	1006891	Argument	a -> first		1006843	0					
ANR	1006892	PtrMemberAccess	a -> first		1006843	0					
ANR	1006893	Identifier	a		1006843	0					
ANR	1006894	Identifier	first		1006843	1					
ANR	1006895	IdentifierDeclStatement	classad :: ClassAd * newAd = new classad :: ClassAd ( ) ;	250:1:7329:7378	1006843	3	True				
ANR	1006896	IdentifierDecl	* newAd = new classad :: ClassAd ( )		1006843	0					
ANR	1006897	IdentifierDeclType	classad :: ClassAd *		1006843	0					
ANR	1006898	Identifier	newAd		1006843	1					
ANR	1006899	AssignmentExpression	* newAd = new classad :: ClassAd ( )		1006843	2		=			
ANR	1006900	Identifier	newAd		1006843	0					
ANR	1006901	UnaryExpression	new classad :: ClassAd ( )		1006843	1					
ANR	1006902	ForStatement	for ( classad :: ClassAd :: iterator a = ad -> begin ( ) ; a != ad -> end ( ) ; a ++ )		1006843	4					
ANR	1006903	ForInit	classad :: ClassAd :: iterator a = ad -> begin ( ) ;	251:6:7386:7429	1006843	0	True				
ANR	1006904	IdentifierDeclStatement	classad :: ClassAd :: iterator a = ad -> begin ( ) ;		1006843	0					
ANR	1006905	IdentifierDecl	a = ad -> begin ( )		1006843	0					
ANR	1006906	IdentifierDeclType	classad :: ClassAd :: iterator		1006843	0					
ANR	1006907	Identifier	a		1006843	1					
ANR	1006908	AssignmentExpression	a = ad -> begin ( )		1006843	2		=			
ANR	1006909	Identifier	a		1006843	0					
ANR	1006910	CallExpression	ad -> begin ( )		1006843	1					
ANR	1006911	Callee	ad -> begin		1006843	0					
ANR	1006912	PtrMemberAccess	ad -> begin		1006843	0					
ANR	1006913	Identifier	ad		1006843	0					
ANR	1006914	Identifier	begin		1006843	1					
ANR	1006915	ArgumentList			1006843	1					
ANR	1006916	Condition	a != ad -> end ( )	251:51:7431:7445	1006843	1	True				
ANR	1006917	EqualityExpression	a != ad -> end ( )		1006843	0		!=			
ANR	1006918	Identifier	a		1006843	0					
ANR	1006919	CallExpression	ad -> end ( )		1006843	1					
ANR	1006920	Callee	ad -> end		1006843	0					
ANR	1006921	PtrMemberAccess	ad -> end		1006843	0					
ANR	1006922	Identifier	ad		1006843	0					
ANR	1006923	Identifier	end		1006843	1					
ANR	1006924	ArgumentList			1006843	1					
ANR	1006925	PostIncDecOperationExpression	a ++	251:68:7448:7450	1006843	2	True				
ANR	1006926	Identifier	a		1006843	0					
ANR	1006927	IncDec	++		1006843	1					
ANR	1006928	CompoundStatement		10:74:330:330	1006843	3					
ANR	1006929	ExpressionStatement	"newAd -> Insert ( a -> first , AddExplicitTargets ( a -> second , definedAttrs ) )"	252:2:7458:7528	1006843	0	True				
ANR	1006930	CallExpression	"newAd -> Insert ( a -> first , AddExplicitTargets ( a -> second , definedAttrs ) )"		1006843	0					
ANR	1006931	Callee	newAd -> Insert		1006843	0					
ANR	1006932	PtrMemberAccess	newAd -> Insert		1006843	0					
ANR	1006933	Identifier	newAd		1006843	0					
ANR	1006934	Identifier	Insert		1006843	1					
ANR	1006935	ArgumentList	a -> first		1006843	1					
ANR	1006936	Argument	a -> first		1006843	0					
ANR	1006937	PtrMemberAccess	a -> first		1006843	0					
ANR	1006938	Identifier	a		1006843	0					
ANR	1006939	Identifier	first		1006843	1					
ANR	1006940	Argument	"AddExplicitTargets ( a -> second , definedAttrs )"		1006843	1					
ANR	1006941	CallExpression	"AddExplicitTargets ( a -> second , definedAttrs )"		1006843	0					
ANR	1006942	Callee	AddExplicitTargets		1006843	0					
ANR	1006943	Identifier	AddExplicitTargets		1006843	0					
ANR	1006944	ArgumentList	a -> second		1006843	1					
ANR	1006945	Argument	a -> second		1006843	0					
ANR	1006946	PtrMemberAccess	a -> second		1006843	0					
ANR	1006947	Identifier	a		1006843	0					
ANR	1006948	Identifier	second		1006843	1					
ANR	1006949	Argument	definedAttrs		1006843	1					
ANR	1006950	Identifier	definedAttrs		1006843	0					
ANR	1006951	ReturnStatement	return newAd ;	254:1:7534:7546	1006843	5	True				
ANR	1006952	Identifier	newAd		1006843	0					
ANR	1006953	ReturnType	classad :: ClassAd *		1006843	1					
ANR	1006954	Identifier	AddExplicitTargets		1006843	2					
ANR	1006955	ParameterList	classad :: ClassAd * ad		1006843	3					
ANR	1006956	Parameter	classad :: ClassAd * ad	241:20:7100:7119	1006843	0	True				
ANR	1006957	ParameterType	classad :: ClassAd *		1006843	0					
ANR	1006958	Identifier	ad		1006843	1					
ANR	1006959	CFGEntryNode	ENTRY		1006843		True				
ANR	1006960	CFGExitNode	EXIT		1006843		True				
ANR	1006961	Symbol	definedAttrs		1006843						
ANR	1006962	Symbol	a		1006843						
ANR	1006963	Symbol	a -> first		1006843						
ANR	1006964	Symbol	ad		1006843						
ANR	1006965	Symbol	ad -> end		1006843						
ANR	1006966	Symbol	AddExplicitTargets		1006843						
ANR	1006967	Symbol	* ad		1006843						
ANR	1006968	Symbol	ad -> begin		1006843						
ANR	1006969	Symbol	* a		1006843						
ANR	1006970	Symbol	attr		1006843						
ANR	1006971	Symbol	a -> second		1006843						
ANR	1006972	Symbol	newAd		1006843						
ANR	1006973	Function	AddExplicitTargets	257:0:7551:9327							
ANR	1006974	FunctionDef	"AddExplicitTargets (classad :: ExprTree * tree , std :: set < std :: string , classad :: CaseIgnLTStr > & definedAttrs)"		1006973	0					
ANR	1006975	CompoundStatement		260:0:7685:9327	1006973	0					
ANR	1006976	IfStatement	if ( tree == NULL )		1006973	0					
ANR	1006977	Condition	tree == NULL	261:5:7692:7703	1006973	0	True				
ANR	1006978	EqualityExpression	tree == NULL		1006973	0		==			
ANR	1006979	Identifier	tree		1006973	0					
ANR	1006980	Identifier	NULL		1006973	1					
ANR	1006981	CompoundStatement		2:19:20:20	1006973	1					
ANR	1006982	ReturnStatement	return NULL ;	262:2:7710:7721	1006973	0	True				
ANR	1006983	Identifier	NULL		1006973	0					
ANR	1006984	IdentifierDeclStatement	classad :: ExprTree :: NodeKind nKind = tree -> GetKind ( ) ;	265:1:7728:7780	1006973	1	True				
ANR	1006985	IdentifierDecl	nKind = tree -> GetKind ( )		1006973	0					
ANR	1006986	IdentifierDeclType	classad :: ExprTree :: NodeKind		1006973	0					
ANR	1006987	Identifier	nKind		1006973	1					
ANR	1006988	AssignmentExpression	nKind = tree -> GetKind ( )		1006973	2		=			
ANR	1006989	Identifier	nKind		1006973	0					
ANR	1006990	CallExpression	tree -> GetKind ( )		1006973	1					
ANR	1006991	Callee	tree -> GetKind		1006973	0					
ANR	1006992	PtrMemberAccess	tree -> GetKind		1006973	0					
ANR	1006993	Identifier	tree		1006973	0					
ANR	1006994	Identifier	GetKind		1006973	1					
ANR	1006995	ArgumentList			1006973	1					
ANR	1006996	SwitchStatement	switch ( nKind )		1006973	2					
ANR	1006997	Condition	nKind	266:9:7791:7795	1006973	0	True				
ANR	1006998	Identifier	nKind		1006973	0					
ANR	1006999	CompoundStatement		7:17:113:113	1006973	1					
ANR	1007000	Label	case classad :: ExprTree :: ATTRREF_NODE :	268:1:7803:7839	1006973	0	True				
ANR	1007001	Identifier	classad :: ExprTree :: ATTRREF_NODE		1006973	0					
ANR	1007002	CompoundStatement		12:2:218:234	1006973	1					
ANR	1007003	IdentifierDeclStatement	classad :: ExprTree * expr = NULL ;	269:2:7845:7875	1006973	0	True				
ANR	1007004	IdentifierDecl	* expr = NULL		1006973	0					
ANR	1007005	IdentifierDeclType	classad :: ExprTree *		1006973	0					
ANR	1007006	Identifier	expr		1006973	1					
ANR	1007007	AssignmentExpression	* expr = NULL		1006973	2		=			
ANR	1007008	Identifier	NULL		1006973	0					
ANR	1007009	Identifier	NULL		1006973	1					
ANR	1007010	IdentifierDeclStatement	"std :: string attr = """" ;"	270:2:7879:7900	1006973	1	True				
ANR	1007011	IdentifierDecl	"attr = """""		1006973	0					
ANR	1007012	IdentifierDeclType	std :: string		1006973	0					
ANR	1007013	Identifier	attr		1006973	1					
ANR	1007014	AssignmentExpression	"attr = """""		1006973	2		=			
ANR	1007015	Identifier	attr		1006973	0					
ANR	1007016	PrimaryExpression	""""""		1006973	1					
ANR	1007017	IdentifierDeclStatement	bool abs = false ;	271:2:7904:7920	1006973	2	True				
ANR	1007018	IdentifierDecl	abs = false		1006973	0					
ANR	1007019	IdentifierDeclType	bool		1006973	0					
ANR	1007020	Identifier	abs		1006973	1					
ANR	1007021	AssignmentExpression	abs = false		1006973	2		=			
ANR	1007022	Identifier	false		1006973	0					
ANR	1007023	Identifier	false		1006973	1					
ANR	1007024	ExpressionStatement	"( ( classad :: AttributeReference * ) tree ) -> GetComponents ( expr , attr , abs )"	272:2:7924:7995	1006973	3	True				
ANR	1007025	CallExpression	"( ( classad :: AttributeReference * ) tree ) -> GetComponents ( expr , attr , abs )"		1006973	0					
ANR	1007026	Callee	( ( classad :: AttributeReference * ) tree ) -> GetComponents		1006973	0					
ANR	1007027	PtrMemberAccess	( ( classad :: AttributeReference * ) tree ) -> GetComponents		1006973	0					
ANR	1007028	CastExpression	( classad :: AttributeReference * ) tree		1006973	0					
ANR	1007029	CastTarget	classad :: AttributeReference *		1006973	0					
ANR	1007030	Identifier	tree		1006973	1					
ANR	1007031	Identifier	GetComponents		1006973	1					
ANR	1007032	ArgumentList	expr		1006973	1					
ANR	1007033	Argument	expr		1006973	0					
ANR	1007034	Identifier	expr		1006973	0					
ANR	1007035	Argument	attr		1006973	1					
ANR	1007036	Identifier	attr		1006973	0					
ANR	1007037	Argument	abs		1006973	2					
ANR	1007038	Identifier	abs		1006973	0					
ANR	1007039	IfStatement	if ( abs || expr != NULL )		1006973	4					
ANR	1007040	Condition	abs || expr != NULL	273:6:8003:8021	1006973	0	True				
ANR	1007041	OrExpression	abs || expr != NULL		1006973	0		||			
ANR	1007042	Identifier	abs		1006973	0					
ANR	1007043	EqualityExpression	expr != NULL		1006973	1		!=			
ANR	1007044	Identifier	expr		1006973	0					
ANR	1007045	Identifier	NULL		1006973	1					
ANR	1007046	CompoundStatement		14:28:339:339	1006973	1					
ANR	1007047	ReturnStatement	return tree -> Copy ( ) ;	274:3:8030:8050	1006973	0	True				
ANR	1007048	CallExpression	tree -> Copy ( )		1006973	0					
ANR	1007049	Callee	tree -> Copy		1006973	0					
ANR	1007050	PtrMemberAccess	tree -> Copy		1006973	0					
ANR	1007051	Identifier	tree		1006973	0					
ANR	1007052	Identifier	Copy		1006973	1					
ANR	1007053	ArgumentList			1006973	1					
ANR	1007054	ElseStatement	else		1006973	0					
ANR	1007055	CompoundStatement		17:7:377:377	1006973	0					
ANR	1007056	IfStatement	if ( definedAttrs . find ( attr ) == definedAttrs . end ( ) )		1006973	0					
ANR	1007057	Condition	definedAttrs . find ( attr ) == definedAttrs . end ( )	277:7:8072:8119	1006973	0	True				
ANR	1007058	EqualityExpression	definedAttrs . find ( attr ) == definedAttrs . end ( )		1006973	0		==			
ANR	1007059	CallExpression	definedAttrs . find ( attr )		1006973	0					
ANR	1007060	Callee	definedAttrs . find		1006973	0					
ANR	1007061	MemberAccess	definedAttrs . find		1006973	0					
ANR	1007062	Identifier	definedAttrs		1006973	0					
ANR	1007063	Identifier	find		1006973	1					
ANR	1007064	ArgumentList	attr		1006973	1					
ANR	1007065	Argument	attr		1006973	0					
ANR	1007066	Identifier	attr		1006973	0					
ANR	1007067	CallExpression	definedAttrs . end ( )		1006973	1					
ANR	1007068	Callee	definedAttrs . end		1006973	0					
ANR	1007069	MemberAccess	definedAttrs . end		1006973	0					
ANR	1007070	Identifier	definedAttrs		1006973	0					
ANR	1007071	Identifier	end		1006973	1					
ANR	1007072	ArgumentList			1006973	1					
ANR	1007073	CompoundStatement		20:4:496:538	1006973	1					
ANR	1007074	IdentifierDeclStatement	classad :: AttributeReference * target = NULL ;	279:4:8182:8224	1006973	0	True				
ANR	1007075	IdentifierDecl	* target = NULL		1006973	0					
ANR	1007076	IdentifierDeclType	classad :: AttributeReference *		1006973	0					
ANR	1007077	Identifier	target		1006973	1					
ANR	1007078	AssignmentExpression	* target = NULL		1006973	2		=			
ANR	1007079	Identifier	NULL		1006973	0					
ANR	1007080	Identifier	NULL		1006973	1					
ANR	1007081	ExpressionStatement	"target = classad :: AttributeReference :: MakeAttributeReference ( NULL , ""target"" )"	280:4:8230:8323	1006973	1	True				
ANR	1007082	AssignmentExpression	"target = classad :: AttributeReference :: MakeAttributeReference ( NULL , ""target"" )"		1006973	0		=			
ANR	1007083	Identifier	target		1006973	0					
ANR	1007084	CallExpression	"classad :: AttributeReference :: MakeAttributeReference ( NULL , ""target"" )"		1006973	1					
ANR	1007085	Callee	classad :: AttributeReference :: MakeAttributeReference		1006973	0					
ANR	1007086	Identifier	classad :: AttributeReference :: MakeAttributeReference		1006973	0					
ANR	1007087	ArgumentList	NULL		1006973	1					
ANR	1007088	Argument	NULL		1006973	0					
ANR	1007089	Identifier	NULL		1006973	0					
ANR	1007090	Argument	"""target"""		1006973	1					
ANR	1007091	PrimaryExpression	"""target"""		1006973	0					
ANR	1007092	ReturnStatement	"return classad :: AttributeReference :: MakeAttributeReference ( target , attr ) ;"	282:4:8329:8400	1006973	2	True				
ANR	1007093	CallExpression	"classad :: AttributeReference :: MakeAttributeReference ( target , attr )"		1006973	0					
ANR	1007094	Callee	classad :: AttributeReference :: MakeAttributeReference		1006973	0					
ANR	1007095	Identifier	classad :: AttributeReference :: MakeAttributeReference		1006973	0					
ANR	1007096	ArgumentList	target		1006973	1					
ANR	1007097	Argument	target		1006973	0					
ANR	1007098	Identifier	target		1006973	0					
ANR	1007099	Argument	attr		1006973	1					
ANR	1007100	Identifier	attr		1006973	0					
ANR	1007101	ElseStatement	else		1006973	0					
ANR	1007102	CompoundStatement		25:8:729:729	1006973	0					
ANR	1007103	ReturnStatement	return tree -> Copy ( ) ;	285:4:8421:8441	1006973	0	True				
ANR	1007104	CallExpression	tree -> Copy ( )		1006973	0					
ANR	1007105	Callee	tree -> Copy		1006973	0					
ANR	1007106	PtrMemberAccess	tree -> Copy		1006973	0					
ANR	1007107	Identifier	tree		1006973	0					
ANR	1007108	Identifier	Copy		1006973	1					
ANR	1007109	ArgumentList			1006973	1					
ANR	1007110	Label	case classad :: ExprTree :: OP_NODE :	290:1:8457:8488	1006973	2	True				
ANR	1007111	Identifier	classad :: ExprTree :: OP_NODE		1006973	0					
ANR	1007112	CompoundStatement		38:2:1030:1065	1006973	3					
ANR	1007113	IdentifierDeclStatement	classad :: Operation :: OpKind oKind ;	291:2:8494:8526	1006973	0	True				
ANR	1007114	IdentifierDecl	oKind		1006973	0					
ANR	1007115	IdentifierDeclType	classad :: Operation :: OpKind		1006973	0					
ANR	1007116	Identifier	oKind		1006973	1					
ANR	1007117	IdentifierDeclStatement	classad :: ExprTree * expr1 = NULL ;	292:2:8530:8562	1006973	1	True				
ANR	1007118	IdentifierDecl	* expr1 = NULL		1006973	0					
ANR	1007119	IdentifierDeclType	classad :: ExprTree *		1006973	0					
ANR	1007120	Identifier	expr1		1006973	1					
ANR	1007121	AssignmentExpression	* expr1 = NULL		1006973	2		=			
ANR	1007122	Identifier	NULL		1006973	0					
ANR	1007123	Identifier	NULL		1006973	1					
ANR	1007124	IdentifierDeclStatement	classad :: ExprTree * expr2 = NULL ;	293:2:8566:8598	1006973	2	True				
ANR	1007125	IdentifierDecl	* expr2 = NULL		1006973	0					
ANR	1007126	IdentifierDeclType	classad :: ExprTree *		1006973	0					
ANR	1007127	Identifier	expr2		1006973	1					
ANR	1007128	AssignmentExpression	* expr2 = NULL		1006973	2		=			
ANR	1007129	Identifier	NULL		1006973	0					
ANR	1007130	Identifier	NULL		1006973	1					
ANR	1007131	IdentifierDeclStatement	classad :: ExprTree * expr3 = NULL ;	294:2:8602:8634	1006973	3	True				
ANR	1007132	IdentifierDecl	* expr3 = NULL		1006973	0					
ANR	1007133	IdentifierDeclType	classad :: ExprTree *		1006973	0					
ANR	1007134	Identifier	expr3		1006973	1					
ANR	1007135	AssignmentExpression	* expr3 = NULL		1006973	2		=			
ANR	1007136	Identifier	NULL		1006973	0					
ANR	1007137	Identifier	NULL		1006973	1					
ANR	1007138	IdentifierDeclStatement	classad :: ExprTree * newExpr1 = NULL ;	295:2:8638:8673	1006973	4	True				
ANR	1007139	IdentifierDecl	* newExpr1 = NULL		1006973	0					
ANR	1007140	IdentifierDeclType	classad :: ExprTree *		1006973	0					
ANR	1007141	Identifier	newExpr1		1006973	1					
ANR	1007142	AssignmentExpression	* newExpr1 = NULL		1006973	2		=			
ANR	1007143	Identifier	NULL		1006973	0					
ANR	1007144	Identifier	NULL		1006973	1					
ANR	1007145	IdentifierDeclStatement	classad :: ExprTree * newExpr2 = NULL ;	296:2:8677:8712	1006973	5	True				
ANR	1007146	IdentifierDecl	* newExpr2 = NULL		1006973	0					
ANR	1007147	IdentifierDeclType	classad :: ExprTree *		1006973	0					
ANR	1007148	Identifier	newExpr2		1006973	1					
ANR	1007149	AssignmentExpression	* newExpr2 = NULL		1006973	2		=			
ANR	1007150	Identifier	NULL		1006973	0					
ANR	1007151	Identifier	NULL		1006973	1					
ANR	1007152	IdentifierDeclStatement	classad :: ExprTree * newExpr3 = NULL ;	297:2:8716:8751	1006973	6	True				
ANR	1007153	IdentifierDecl	* newExpr3 = NULL		1006973	0					
ANR	1007154	IdentifierDeclType	classad :: ExprTree *		1006973	0					
ANR	1007155	Identifier	newExpr3		1006973	1					
ANR	1007156	AssignmentExpression	* newExpr3 = NULL		1006973	2		=			
ANR	1007157	Identifier	NULL		1006973	0					
ANR	1007158	Identifier	NULL		1006973	1					
ANR	1007159	ExpressionStatement	"( ( classad :: Operation * ) tree ) -> GetComponents ( oKind , expr1 , expr2 , expr3 )"	298:2:8755:8832	1006973	7	True				
ANR	1007160	CallExpression	"( ( classad :: Operation * ) tree ) -> GetComponents ( oKind , expr1 , expr2 , expr3 )"		1006973	0					
ANR	1007161	Callee	( ( classad :: Operation * ) tree ) -> GetComponents		1006973	0					
ANR	1007162	PtrMemberAccess	( ( classad :: Operation * ) tree ) -> GetComponents		1006973	0					
ANR	1007163	CastExpression	( classad :: Operation * ) tree		1006973	0					
ANR	1007164	CastTarget	classad :: Operation *		1006973	0					
ANR	1007165	Identifier	tree		1006973	1					
ANR	1007166	Identifier	GetComponents		1006973	1					
ANR	1007167	ArgumentList	oKind		1006973	1					
ANR	1007168	Argument	oKind		1006973	0					
ANR	1007169	Identifier	oKind		1006973	0					
ANR	1007170	Argument	expr1		1006973	1					
ANR	1007171	Identifier	expr1		1006973	0					
ANR	1007172	Argument	expr2		1006973	2					
ANR	1007173	Identifier	expr2		1006973	0					
ANR	1007174	Argument	expr3		1006973	3					
ANR	1007175	Identifier	expr3		1006973	0					
ANR	1007176	IfStatement	if ( expr1 != NULL )		1006973	8					
ANR	1007177	Condition	expr1 != NULL	299:6:8840:8852	1006973	0	True				
ANR	1007178	EqualityExpression	expr1 != NULL		1006973	0		!=			
ANR	1007179	Identifier	expr1		1006973	0					
ANR	1007180	Identifier	NULL		1006973	1					
ANR	1007181	CompoundStatement		40:22:1170:1170	1006973	1					
ANR	1007182	ExpressionStatement	"newExpr1 = AddExplicitTargets ( expr1 , definedAttrs )"	300:3:8861:8913	1006973	0	True				
ANR	1007183	AssignmentExpression	"newExpr1 = AddExplicitTargets ( expr1 , definedAttrs )"		1006973	0		=			
ANR	1007184	Identifier	newExpr1		1006973	0					
ANR	1007185	CallExpression	"AddExplicitTargets ( expr1 , definedAttrs )"		1006973	1					
ANR	1007186	Callee	AddExplicitTargets		1006973	0					
ANR	1007187	Identifier	AddExplicitTargets		1006973	0					
ANR	1007188	ArgumentList	expr1		1006973	1					
ANR	1007189	Argument	expr1		1006973	0					
ANR	1007190	Identifier	expr1		1006973	0					
ANR	1007191	Argument	definedAttrs		1006973	1					
ANR	1007192	Identifier	definedAttrs		1006973	0					
ANR	1007193	IfStatement	if ( expr2 != NULL )		1006973	9					
ANR	1007194	Condition	expr2 != NULL	302:6:8925:8937	1006973	0	True				
ANR	1007195	EqualityExpression	expr2 != NULL		1006973	0		!=			
ANR	1007196	Identifier	expr2		1006973	0					
ANR	1007197	Identifier	NULL		1006973	1					
ANR	1007198	CompoundStatement		43:22:1255:1255	1006973	1					
ANR	1007199	ExpressionStatement	"newExpr2 = AddExplicitTargets ( expr2 , definedAttrs )"	303:3:8946:8998	1006973	0	True				
ANR	1007200	AssignmentExpression	"newExpr2 = AddExplicitTargets ( expr2 , definedAttrs )"		1006973	0		=			
ANR	1007201	Identifier	newExpr2		1006973	0					
ANR	1007202	CallExpression	"AddExplicitTargets ( expr2 , definedAttrs )"		1006973	1					
ANR	1007203	Callee	AddExplicitTargets		1006973	0					
ANR	1007204	Identifier	AddExplicitTargets		1006973	0					
ANR	1007205	ArgumentList	expr2		1006973	1					
ANR	1007206	Argument	expr2		1006973	0					
ANR	1007207	Identifier	expr2		1006973	0					
ANR	1007208	Argument	definedAttrs		1006973	1					
ANR	1007209	Identifier	definedAttrs		1006973	0					
ANR	1007210	IfStatement	if ( expr3 != NULL )		1006973	10					
ANR	1007211	Condition	expr3 != NULL	305:6:9010:9022	1006973	0	True				
ANR	1007212	EqualityExpression	expr3 != NULL		1006973	0		!=			
ANR	1007213	Identifier	expr3		1006973	0					
ANR	1007214	Identifier	NULL		1006973	1					
ANR	1007215	CompoundStatement		46:22:1340:1340	1006973	1					
ANR	1007216	ExpressionStatement	"newExpr3 = AddExplicitTargets ( expr3 , definedAttrs )"	306:3:9031:9083	1006973	0	True				
ANR	1007217	AssignmentExpression	"newExpr3 = AddExplicitTargets ( expr3 , definedAttrs )"		1006973	0		=			
ANR	1007218	Identifier	newExpr3		1006973	0					
ANR	1007219	CallExpression	"AddExplicitTargets ( expr3 , definedAttrs )"		1006973	1					
ANR	1007220	Callee	AddExplicitTargets		1006973	0					
ANR	1007221	Identifier	AddExplicitTargets		1006973	0					
ANR	1007222	ArgumentList	expr3		1006973	1					
ANR	1007223	Argument	expr3		1006973	0					
ANR	1007224	Identifier	expr3		1006973	0					
ANR	1007225	Argument	definedAttrs		1006973	1					
ANR	1007226	Identifier	definedAttrs		1006973	0					
ANR	1007227	ReturnStatement	"return classad :: Operation :: MakeOperation ( oKind , newExpr1 , newExpr2 , newExpr3 ) ;"	308:2:9091:9170	1006973	11	True				
ANR	1007228	CallExpression	"classad :: Operation :: MakeOperation ( oKind , newExpr1 , newExpr2 , newExpr3 )"		1006973	0					
ANR	1007229	Callee	classad :: Operation :: MakeOperation		1006973	0					
ANR	1007230	Identifier	classad :: Operation :: MakeOperation		1006973	0					
ANR	1007231	ArgumentList	oKind		1006973	1					
ANR	1007232	Argument	oKind		1006973	0					
ANR	1007233	Identifier	oKind		1006973	0					
ANR	1007234	Argument	newExpr1		1006973	1					
ANR	1007235	Identifier	newExpr1		1006973	0					
ANR	1007236	Argument	newExpr2		1006973	2					
ANR	1007237	Identifier	newExpr2		1006973	0					
ANR	1007238	Argument	newExpr3		1006973	3					
ANR	1007239	Identifier	newExpr3		1006973	0					
ANR	1007240	Label	default :	311:1:9177:9184	1006973	4	True				
ANR	1007241	Identifier	default		1006973	0					
ANR	1007242	CompoundStatement		52:10:1500:1500	1006973	5					
ANR	1007243	ReturnStatement	return tree -> Copy ( ) ;	314:2:9299:9319	1006973	0	True				
ANR	1007244	CallExpression	tree -> Copy ( )		1006973	0					
ANR	1007245	Callee	tree -> Copy		1006973	0					
ANR	1007246	PtrMemberAccess	tree -> Copy		1006973	0					
ANR	1007247	Identifier	tree		1006973	0					
ANR	1007248	Identifier	Copy		1006973	1					
ANR	1007249	ArgumentList			1006973	1					
ANR	1007250	ReturnType	classad :: ExprTree *		1006973	1					
ANR	1007251	Identifier	AddExplicitTargets		1006973	2					
ANR	1007252	ParameterList	"classad :: ExprTree * tree , std :: set < std :: string , classad :: CaseIgnLTStr > & definedAttrs"		1006973	3					
ANR	1007253	Parameter	classad :: ExprTree * tree	258:20:7591:7613	1006973	0	True				
ANR	1007254	ParameterType	classad :: ExprTree *		1006973	0					
ANR	1007255	Identifier	tree		1006973	1					
ANR	1007256	Parameter	"std :: set < std :: string , classad :: CaseIgnLTStr > & definedAttrs"	258:45:7616:7681	1006973	1	True				
ANR	1007257	ParameterType	"std :: set < std :: string , classad :: CaseIgnLTStr > &"		1006973	0					
ANR	1007258	Identifier	definedAttrs		1006973	1					
ANR	1007259	CFGEntryNode	ENTRY		1006973		True				
ANR	1007260	CFGExitNode	EXIT		1006973		True				
ANR	1007261	Symbol	definedAttrs		1006973						
ANR	1007262	Symbol	definedAttrs . find		1006973						
ANR	1007263	Symbol	NULL		1006973						
ANR	1007264	Symbol	definedAttrs . end		1006973						
ANR	1007265	Symbol	tree		1006973						
ANR	1007266	Symbol	false		1006973						
ANR	1007267	Symbol	classad :: Operation :: MakeOperation		1006973						
ANR	1007268	Symbol	target		1006973						
ANR	1007269	Symbol	* tree		1006973						
ANR	1007270	Symbol	nKind		1006973						
ANR	1007271	Symbol	abs		1006973						
ANR	1007272	Symbol	tree -> GetKind		1006973						
ANR	1007273	Symbol	newExpr3		1006973						
ANR	1007274	Symbol	newExpr2		1006973						
ANR	1007275	Symbol	newExpr1		1006973						
ANR	1007276	Symbol	expr3		1006973						
ANR	1007277	Symbol	AddExplicitTargets		1006973						
ANR	1007278	Symbol	expr		1006973						
ANR	1007279	Symbol	expr2		1006973						
ANR	1007280	Symbol	expr1		1006973						
ANR	1007281	Symbol	attr		1006973						
ANR	1007282	Symbol	oKind		1006973						
ANR	1007283	Symbol	tree -> Copy		1006973						
ANR	1007284	Symbol	classad :: AttributeReference :: MakeAttributeReference		1006973						
