command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1982827	File	data/converged/CVE-2011-4930_htcondor/pigeon.cpp								
ANR	1982828	Function	clean	44:0:1266:1492							
ANR	1982829	FunctionDef	clean ()		1982828	0					
ANR	1982830	CompoundStatement		45:0:1283:1492	1982828	0					
ANR	1982831	ExpressionStatement	"dprintf ( D_ALWAYS , ""clean called ... \\n"" )"	46:2:1287:1327	1982828	0	True				
ANR	1982832	CallExpression	"dprintf ( D_ALWAYS , ""clean called ... \\n"" )"		1982828	0					
ANR	1982833	Callee	dprintf		1982828	0					
ANR	1982834	Identifier	dprintf		1982828	0					
ANR	1982835	ArgumentList	D_ALWAYS		1982828	1					
ANR	1982836	Argument	D_ALWAYS		1982828	0					
ANR	1982837	Identifier	D_ALWAYS		1982828	0					
ANR	1982838	Argument	"""clean called ... \\n"""		1982828	1					
ANR	1982839	PrimaryExpression	"""clean called ... \\n"""		1982828	0					
ANR	1982840	IdentifierDeclStatement	char * path = getPortPath ( ) ;	47:2:1331:1357	1982828	1	True				
ANR	1982841	IdentifierDecl	* path = getPortPath ( )		1982828	0					
ANR	1982842	IdentifierDeclType	char *		1982828	0					
ANR	1982843	Identifier	path		1982828	1					
ANR	1982844	AssignmentExpression	* path = getPortPath ( )		1982828	2		=			
ANR	1982845	Identifier	path		1982828	0					
ANR	1982846	CallExpression	getPortPath ( )		1982828	1					
ANR	1982847	Callee	getPortPath		1982828	0					
ANR	1982848	Identifier	getPortPath		1982828	0					
ANR	1982849	ArgumentList			1982828	1					
ANR	1982850	IdentifierDeclStatement	int res = unlink ( path ) ;	48:2:1362:1384	1982828	2	True				
ANR	1982851	IdentifierDecl	res = unlink ( path )		1982828	0					
ANR	1982852	IdentifierDeclType	int		1982828	0					
ANR	1982853	Identifier	res		1982828	1					
ANR	1982854	AssignmentExpression	res = unlink ( path )		1982828	2		=			
ANR	1982855	Identifier	res		1982828	0					
ANR	1982856	CallExpression	unlink ( path )		1982828	1					
ANR	1982857	Callee	unlink		1982828	0					
ANR	1982858	Identifier	unlink		1982828	0					
ANR	1982859	ArgumentList	path		1982828	1					
ANR	1982860	Argument	path		1982828	0					
ANR	1982861	Identifier	path		1982828	0					
ANR	1982862	ExpressionStatement	"dprintf ( D_ALWAYS , ""Unlink %s ended with status %i and errno %i \\n"" , path , res , errno )"	49:2:1388:1473	1982828	3	True				
ANR	1982863	CallExpression	"dprintf ( D_ALWAYS , ""Unlink %s ended with status %i and errno %i \\n"" , path , res , errno )"		1982828	0					
ANR	1982864	Callee	dprintf		1982828	0					
ANR	1982865	Identifier	dprintf		1982828	0					
ANR	1982866	ArgumentList	D_ALWAYS		1982828	1					
ANR	1982867	Argument	D_ALWAYS		1982828	0					
ANR	1982868	Identifier	D_ALWAYS		1982828	0					
ANR	1982869	Argument	"""Unlink %s ended with status %i and errno %i \\n"""		1982828	1					
ANR	1982870	PrimaryExpression	"""Unlink %s ended with status %i and errno %i \\n"""		1982828	0					
ANR	1982871	Argument	path		1982828	2					
ANR	1982872	Identifier	path		1982828	0					
ANR	1982873	Argument	res		1982828	3					
ANR	1982874	Identifier	res		1982828	0					
ANR	1982875	Argument	errno		1982828	4					
ANR	1982876	Identifier	errno		1982828	0					
ANR	1982877	ExpressionStatement	free ( path )	50:2:1477:1487	1982828	4	True				
ANR	1982878	CallExpression	free ( path )		1982828	0					
ANR	1982879	Callee	free		1982828	0					
ANR	1982880	Identifier	free		1982828	0					
ANR	1982881	ArgumentList	path		1982828	1					
ANR	1982882	Argument	path		1982828	0					
ANR	1982883	Identifier	path		1982828	0					
ANR	1982884	ReturnType	void		1982828	1					
ANR	1982885	Identifier	clean		1982828	2					
ANR	1982886	ParameterList			1982828	3					
ANR	1982887	CFGEntryNode	ENTRY		1982828		True				
ANR	1982888	CFGExitNode	EXIT		1982828		True				
ANR	1982889	Symbol	path		1982828						
ANR	1982890	Symbol	res		1982828						
ANR	1982891	Symbol	errno		1982828						
ANR	1982892	Symbol	unlink		1982828						
ANR	1982893	Symbol	D_ALWAYS		1982828						
ANR	1982894	Symbol	getPortPath		1982828						
ANR	1982895	Function	Pigeon :: Pigeon	57:0:1510:1705							
ANR	1982896	FunctionDef	Pigeon :: Pigeon ()		1982895	0					
ANR	1982897	CompoundStatement		57:17:1527:1705	1982895	0					
ANR	1982898	ExpressionStatement	m_pid = - 1	58:2:1532:1545	1982895	0	True				
ANR	1982899	AssignmentExpression	m_pid = - 1		1982895	0		=			
ANR	1982900	Identifier	m_pid		1982895	0					
ANR	1982901	UnaryOperationExpression	- 1		1982895	1					
ANR	1982902	UnaryOperator	-		1982895	0					
ANR	1982903	PrimaryExpression	1		1982895	1					
ANR	1982904	ExpressionStatement	m_stdOut = - 1	59:2:1549:1570	1982895	1	True				
ANR	1982905	AssignmentExpression	m_stdOut = - 1		1982895	0		=			
ANR	1982906	Identifier	m_stdOut		1982895	0					
ANR	1982907	UnaryOperationExpression	- 1		1982895	1					
ANR	1982908	UnaryOperator	-		1982895	0					
ANR	1982909	PrimaryExpression	1		1982895	1					
ANR	1982910	ExpressionStatement	m_stdErr = - 1	60:2:1574:1595	1982895	2	True				
ANR	1982911	AssignmentExpression	m_stdErr = - 1		1982895	0		=			
ANR	1982912	Identifier	m_stdErr		1982895	0					
ANR	1982913	UnaryOperationExpression	- 1		1982895	1					
ANR	1982914	UnaryOperator	-		1982895	0					
ANR	1982915	PrimaryExpression	1		1982895	1					
ANR	1982916	ExpressionStatement	m_reaper = - 1	61:2:1599:1620	1982895	3	True				
ANR	1982917	AssignmentExpression	m_reaper = - 1		1982895	0		=			
ANR	1982918	Identifier	m_reaper		1982895	0					
ANR	1982919	UnaryOperationExpression	- 1		1982895	1					
ANR	1982920	UnaryOperator	-		1982895	0					
ANR	1982921	PrimaryExpression	1		1982895	1					
ANR	1982922	ExpressionStatement	m_state = STATE_NULL	62:2:1624:1653	1982895	4	True				
ANR	1982923	AssignmentExpression	m_state = STATE_NULL		1982895	0		=			
ANR	1982924	Identifier	m_state		1982895	0					
ANR	1982925	Identifier	STATE_NULL		1982895	1					
ANR	1982926	ExpressionStatement	m_adPubInterval = 30	63:2:1657:1678	1982895	5	True				
ANR	1982927	AssignmentExpression	m_adPubInterval = 30		1982895	0		=			
ANR	1982928	Identifier	m_adPubInterval		1982895	0					
ANR	1982929	PrimaryExpression	30		1982895	1					
ANR	1982930	ExpressionStatement	m_qpidHome = NULL	64:2:1682:1703	1982895	6	True				
ANR	1982931	AssignmentExpression	m_qpidHome = NULL		1982895	0		=			
ANR	1982932	Identifier	m_qpidHome		1982895	0					
ANR	1982933	Identifier	NULL		1982895	1					
ANR	1982934	Identifier	Pigeon :: Pigeon		1982895	1					
ANR	1982935	ParameterList			1982895	2					
ANR	1982936	CFGEntryNode	ENTRY		1982895		True				
ANR	1982937	CFGExitNode	EXIT		1982895		True				
ANR	1982938	Symbol	m_state		1982895						
ANR	1982939	Symbol	m_qpidHome		1982895						
ANR	1982940	Symbol	m_stdOut		1982895						
ANR	1982941	Symbol	NULL		1982895						
ANR	1982942	Symbol	m_reaper		1982895						
ANR	1982943	Symbol	m_adPubInterval		1982895						
ANR	1982944	Symbol	m_pid		1982895						
ANR	1982945	Symbol	m_stdErr		1982895						
ANR	1982946	Symbol	STATE_NULL		1982895						
ANR	1982947	Function	Pigeon :: main_config	67:0:1708:1736							
ANR	1982948	FunctionDef	Pigeon :: main_config ()		1982947	0					
ANR	1982949	CompoundStatement		67:27:1735:1736	1982947	0					
ANR	1982950	ReturnType	void		1982947	1					
ANR	1982951	Identifier	Pigeon :: main_config		1982947	2					
ANR	1982952	ParameterList			1982947	3					
ANR	1982953	CFGEntryNode	ENTRY		1982947		True				
ANR	1982954	CFGExitNode	EXIT		1982947		True				
ANR	1982955	Function	Pigeon :: initialize	69:0:1739:4890							
ANR	1982956	FunctionDef	Pigeon :: initialize ()		1982955	0					
ANR	1982957	CompoundStatement		69:26:1765:4890	1982955	0					
ANR	1982958	IdentifierDeclStatement	MyString * qpidPort ;	72:2:1818:1836	1982955	0	True				
ANR	1982959	IdentifierDecl	* qpidPort		1982955	0					
ANR	1982960	IdentifierDeclType	MyString *		1982955	0					
ANR	1982961	Identifier	qpidPort		1982955	1					
ANR	1982962	IdentifierDeclStatement	char * path = NULL ;	73:2:1840:1857	1982955	1	True				
ANR	1982963	IdentifierDecl	* path = NULL		1982955	0					
ANR	1982964	IdentifierDeclType	char *		1982955	0					
ANR	1982965	Identifier	path		1982955	1					
ANR	1982966	AssignmentExpression	* path = NULL		1982955	2		=			
ANR	1982967	Identifier	NULL		1982955	0					
ANR	1982968	Identifier	NULL		1982955	1					
ANR	1982969	ExpressionStatement	"m_reaper = daemonCore -> Register_Reaper ( ""reaperQpid"" , ( ReaperHandlercpp ) & Pigeon :: reaperResponse , ""Qpid process reaper"" , ( Service * ) this )"	75:2:1901:2056	1982955	2	True				
ANR	1982970	AssignmentExpression	"m_reaper = daemonCore -> Register_Reaper ( ""reaperQpid"" , ( ReaperHandlercpp ) & Pigeon :: reaperResponse , ""Qpid process reaper"" , ( Service * ) this )"		1982955	0		=			
ANR	1982971	Identifier	m_reaper		1982955	0					
ANR	1982972	CallExpression	"daemonCore -> Register_Reaper ( ""reaperQpid"" , ( ReaperHandlercpp ) & Pigeon :: reaperResponse , ""Qpid process reaper"" , ( Service * ) this )"		1982955	1					
ANR	1982973	Callee	daemonCore -> Register_Reaper		1982955	0					
ANR	1982974	PtrMemberAccess	daemonCore -> Register_Reaper		1982955	0					
ANR	1982975	Identifier	daemonCore		1982955	0					
ANR	1982976	Identifier	Register_Reaper		1982955	1					
ANR	1982977	ArgumentList	"""reaperQpid"""		1982955	1					
ANR	1982978	Argument	"""reaperQpid"""		1982955	0					
ANR	1982979	PrimaryExpression	"""reaperQpid"""		1982955	0					
ANR	1982980	Argument	( ReaperHandlercpp ) & Pigeon :: reaperResponse		1982955	1					
ANR	1982981	CastExpression	( ReaperHandlercpp ) & Pigeon :: reaperResponse		1982955	0					
ANR	1982982	CastTarget	ReaperHandlercpp		1982955	0					
ANR	1982983	UnaryOperationExpression	& Pigeon :: reaperResponse		1982955	1					
ANR	1982984	UnaryOperator	&		1982955	0					
ANR	1982985	Identifier	Pigeon :: reaperResponse		1982955	1					
ANR	1982986	Argument	"""Qpid process reaper"""		1982955	2					
ANR	1982987	PrimaryExpression	"""Qpid process reaper"""		1982955	0					
ANR	1982988	Argument	( Service * ) this		1982955	3					
ANR	1982989	CastExpression	( Service * ) this		1982955	0					
ANR	1982990	CastTarget	Service *		1982955	0					
ANR	1982991	Identifier	this		1982955	1					
ANR	1982992	ExpressionStatement	ASSERT ( m_reaper != FALSE )	80:2:2063:2088	1982955	3	True				
ANR	1982993	CallExpression	ASSERT ( m_reaper != FALSE )		1982955	0					
ANR	1982994	Callee	ASSERT		1982955	0					
ANR	1982995	Identifier	ASSERT		1982955	0					
ANR	1982996	ArgumentList	m_reaper != FALSE		1982955	1					
ANR	1982997	Argument	m_reaper != FALSE		1982955	0					
ANR	1982998	EqualityExpression	m_reaper != FALSE		1982955	0		!=			
ANR	1982999	Identifier	m_reaper		1982955	0					
ANR	1983000	Identifier	FALSE		1982955	1					
ANR	1983001	IdentifierDeclStatement	ArgList argClean ;	84:2:2141:2157	1982955	4	True				
ANR	1983002	IdentifierDecl	argClean		1982955	0					
ANR	1983003	IdentifierDeclType	ArgList		1982955	0					
ANR	1983004	Identifier	argClean		1982955	1					
ANR	1983005	ExpressionStatement	clean ( )	85:2:2161:2168	1982955	5	True				
ANR	1983006	CallExpression	clean ( )		1982955	0					
ANR	1983007	Callee	clean		1982955	0					
ANR	1983008	Identifier	clean		1982955	0					
ANR	1983009	ArgumentList			1982955	1					
ANR	1983010	IdentifierDeclStatement	"char * proc = param ( ""QPID_EXEC"" ) ;"	87:2:2173:2203	1982955	6	True				
ANR	1983011	IdentifierDecl	"* proc = param ( ""QPID_EXEC"" )"		1982955	0					
ANR	1983012	IdentifierDeclType	char *		1982955	0					
ANR	1983013	Identifier	proc		1982955	1					
ANR	1983014	AssignmentExpression	"* proc = param ( ""QPID_EXEC"" )"		1982955	2		=			
ANR	1983015	Identifier	proc		1982955	0					
ANR	1983016	CallExpression	"param ( ""QPID_EXEC"" )"		1982955	1					
ANR	1983017	Callee	param		1982955	0					
ANR	1983018	Identifier	param		1982955	0					
ANR	1983019	ArgumentList	"""QPID_EXEC"""		1982955	1					
ANR	1983020	Argument	"""QPID_EXEC"""		1982955	0					
ANR	1983021	PrimaryExpression	"""QPID_EXEC"""		1982955	0					
ANR	1983022	IfStatement	if ( ! proc )		1982955	7					
ANR	1983023	Condition	! proc	88:6:2211:2215	1982955	0	True				
ANR	1983024	UnaryOperationExpression	! proc		1982955	0					
ANR	1983025	UnaryOperator	!		1982955	0					
ANR	1983026	Identifier	proc		1982955	1					
ANR	1983027	CompoundStatement		20:13:452:452	1982955	1					
ANR	1983028	ExpressionStatement	"dprintf ( D_ALWAYS , ""You need to specify the QPID executable as QPID_EXEC in your condor config \\n"" )"	89:3:2223:2321	1982955	0	True				
ANR	1983029	CallExpression	"dprintf ( D_ALWAYS , ""You need to specify the QPID executable as QPID_EXEC in your condor config \\n"" )"		1982955	0					
ANR	1983030	Callee	dprintf		1982955	0					
ANR	1983031	Identifier	dprintf		1982955	0					
ANR	1983032	ArgumentList	D_ALWAYS		1982955	1					
ANR	1983033	Argument	D_ALWAYS		1982955	0					
ANR	1983034	Identifier	D_ALWAYS		1982955	0					
ANR	1983035	Argument	"""You need to specify the QPID executable as QPID_EXEC in your condor config \\n"""		1982955	1					
ANR	1983036	PrimaryExpression	"""You need to specify the QPID executable as QPID_EXEC in your condor config \\n"""		1982955	0					
ANR	1983037	ExpressionStatement	"EXCEPT ( ""No qpid executable (QPID_EXEC) specified!\\n"" )"	90:3:2326:2379	1982955	1	True				
ANR	1983038	CallExpression	"EXCEPT ( ""No qpid executable (QPID_EXEC) specified!\\n"" )"		1982955	0					
ANR	1983039	Callee	EXCEPT		1982955	0					
ANR	1983040	Identifier	EXCEPT		1982955	0					
ANR	1983041	ArgumentList	"""No qpid executable (QPID_EXEC) specified!\\n"""		1982955	1					
ANR	1983042	Argument	"""No qpid executable (QPID_EXEC) specified!\\n"""		1982955	0					
ANR	1983043	PrimaryExpression	"""No qpid executable (QPID_EXEC) specified!\\n"""		1982955	0					
ANR	1983044	IdentifierDeclStatement	char * hostname = my_full_hostname ( ) ;	92:2:2387:2423	1982955	8	True				
ANR	1983045	IdentifierDecl	* hostname = my_full_hostname ( )		1982955	0					
ANR	1983046	IdentifierDeclType	char *		1982955	0					
ANR	1983047	Identifier	hostname		1982955	1					
ANR	1983048	AssignmentExpression	* hostname = my_full_hostname ( )		1982955	2		=			
ANR	1983049	Identifier	hostname		1982955	0					
ANR	1983050	CallExpression	my_full_hostname ( )		1982955	1					
ANR	1983051	Callee	my_full_hostname		1982955	0					
ANR	1983052	Identifier	my_full_hostname		1982955	0					
ANR	1983053	ArgumentList			1982955	1					
ANR	1983054	IdentifierDeclStatement	ArgList arglist ;	94:2:2430:2445	1982955	9	True				
ANR	1983055	IdentifierDecl	arglist		1982955	0					
ANR	1983056	IdentifierDeclType	ArgList		1982955	0					
ANR	1983057	Identifier	arglist		1982955	1					
ANR	1983058	ExpressionStatement	"arglist . AppendArg ( ""qpidd"" )"	95:2:2450:2476	1982955	10	True				
ANR	1983059	CallExpression	"arglist . AppendArg ( ""qpidd"" )"		1982955	0					
ANR	1983060	Callee	arglist . AppendArg		1982955	0					
ANR	1983061	MemberAccess	arglist . AppendArg		1982955	0					
ANR	1983062	Identifier	arglist		1982955	0					
ANR	1983063	Identifier	AppendArg		1982955	1					
ANR	1983064	ArgumentList	"""qpidd"""		1982955	1					
ANR	1983065	Argument	"""qpidd"""		1982955	0					
ANR	1983066	PrimaryExpression	"""qpidd"""		1982955	0					
ANR	1983067	IdentifierDeclStatement	"char * qpidConf = param ( ""QPID_CONF"" ) ;"	96:2:2480:2515	1982955	11	True				
ANR	1983068	IdentifierDecl	"* qpidConf = param ( ""QPID_CONF"" )"		1982955	0					
ANR	1983069	IdentifierDeclType	char *		1982955	0					
ANR	1983070	Identifier	qpidConf		1982955	1					
ANR	1983071	AssignmentExpression	"* qpidConf = param ( ""QPID_CONF"" )"		1982955	2		=			
ANR	1983072	Identifier	qpidConf		1982955	0					
ANR	1983073	CallExpression	"param ( ""QPID_CONF"" )"		1982955	1					
ANR	1983074	Callee	param		1982955	0					
ANR	1983075	Identifier	param		1982955	0					
ANR	1983076	ArgumentList	"""QPID_CONF"""		1982955	1					
ANR	1983077	Argument	"""QPID_CONF"""		1982955	0					
ANR	1983078	PrimaryExpression	"""QPID_CONF"""		1982955	0					
ANR	1983079	IfStatement	if ( qpidConf )		1982955	12					
ANR	1983080	Condition	qpidConf	97:6:2523:2530	1982955	0	True				
ANR	1983081	Identifier	qpidConf		1982955	0					
ANR	1983082	CompoundStatement		29:16:767:767	1982955	1					
ANR	1983083	ExpressionStatement	"arglist . AppendArg ( ""--config"" )"	98:3:2538:2567	1982955	0	True				
ANR	1983084	CallExpression	"arglist . AppendArg ( ""--config"" )"		1982955	0					
ANR	1983085	Callee	arglist . AppendArg		1982955	0					
ANR	1983086	MemberAccess	arglist . AppendArg		1982955	0					
ANR	1983087	Identifier	arglist		1982955	0					
ANR	1983088	Identifier	AppendArg		1982955	1					
ANR	1983089	ArgumentList	"""--config"""		1982955	1					
ANR	1983090	Argument	"""--config"""		1982955	0					
ANR	1983091	PrimaryExpression	"""--config"""		1982955	0					
ANR	1983092	ExpressionStatement	arglist . AppendArg ( qpidConf )	99:3:2572:2599	1982955	1	True				
ANR	1983093	CallExpression	arglist . AppendArg ( qpidConf )		1982955	0					
ANR	1983094	Callee	arglist . AppendArg		1982955	0					
ANR	1983095	MemberAccess	arglist . AppendArg		1982955	0					
ANR	1983096	Identifier	arglist		1982955	0					
ANR	1983097	Identifier	AppendArg		1982955	1					
ANR	1983098	ArgumentList	qpidConf		1982955	1					
ANR	1983099	Argument	qpidConf		1982955	0					
ANR	1983100	Identifier	qpidConf		1982955	0					
ANR	1983101	ExpressionStatement	free ( qpidConf )	100:3:2604:2618	1982955	2	True				
ANR	1983102	CallExpression	free ( qpidConf )		1982955	0					
ANR	1983103	Callee	free		1982955	0					
ANR	1983104	Identifier	free		1982955	0					
ANR	1983105	ArgumentList	qpidConf		1982955	1					
ANR	1983106	Argument	qpidConf		1982955	0					
ANR	1983107	Identifier	qpidConf		1982955	0					
ANR	1983108	ElseStatement	else		1982955	0					
ANR	1983109	CompoundStatement		33:9:863:863	1982955	0					
ANR	1983110	ExpressionStatement	"arglist . AppendArg ( ""-p0"" )"	103:3:2638:2662	1982955	0	True				
ANR	1983111	CallExpression	"arglist . AppendArg ( ""-p0"" )"		1982955	0					
ANR	1983112	Callee	arglist . AppendArg		1982955	0					
ANR	1983113	MemberAccess	arglist . AppendArg		1982955	0					
ANR	1983114	Identifier	arglist		1982955	0					
ANR	1983115	Identifier	AppendArg		1982955	1					
ANR	1983116	ArgumentList	"""-p0"""		1982955	1					
ANR	1983117	Argument	"""-p0"""		1982955	0					
ANR	1983118	PrimaryExpression	"""-p0"""		1982955	0					
ANR	1983119	ExpressionStatement	"arglist . AppendArg ( ""--auth"" )"	104:3:2667:2694	1982955	1	True				
ANR	1983120	CallExpression	"arglist . AppendArg ( ""--auth"" )"		1982955	0					
ANR	1983121	Callee	arglist . AppendArg		1982955	0					
ANR	1983122	MemberAccess	arglist . AppendArg		1982955	0					
ANR	1983123	Identifier	arglist		1982955	0					
ANR	1983124	Identifier	AppendArg		1982955	1					
ANR	1983125	ArgumentList	"""--auth"""		1982955	1					
ANR	1983126	Argument	"""--auth"""		1982955	0					
ANR	1983127	PrimaryExpression	"""--auth"""		1982955	0					
ANR	1983128	ExpressionStatement	"arglist . AppendArg ( ""no"" )"	105:3:2699:2722	1982955	2	True				
ANR	1983129	CallExpression	"arglist . AppendArg ( ""no"" )"		1982955	0					
ANR	1983130	Callee	arglist . AppendArg		1982955	0					
ANR	1983131	MemberAccess	arglist . AppendArg		1982955	0					
ANR	1983132	Identifier	arglist		1982955	0					
ANR	1983133	Identifier	AppendArg		1982955	1					
ANR	1983134	ArgumentList	"""no"""		1982955	1					
ANR	1983135	Argument	"""no"""		1982955	0					
ANR	1983136	PrimaryExpression	"""no"""		1982955	0					
ANR	1983137	IdentifierDeclStatement	MyString argString ;	109:2:2736:2754	1982955	13	True				
ANR	1983138	IdentifierDecl	argString		1982955	0					
ANR	1983139	IdentifierDeclType	MyString		1982955	0					
ANR	1983140	Identifier	argString		1982955	1					
ANR	1983141	ExpressionStatement	arglist . GetArgsStringForDisplay ( & argString )	110:2:2758:2801	1982955	14	True				
ANR	1983142	CallExpression	arglist . GetArgsStringForDisplay ( & argString )		1982955	0					
ANR	1983143	Callee	arglist . GetArgsStringForDisplay		1982955	0					
ANR	1983144	MemberAccess	arglist . GetArgsStringForDisplay		1982955	0					
ANR	1983145	Identifier	arglist		1982955	0					
ANR	1983146	Identifier	GetArgsStringForDisplay		1982955	1					
ANR	1983147	ArgumentList	& argString		1982955	1					
ANR	1983148	Argument	& argString		1982955	0					
ANR	1983149	UnaryOperationExpression	& argString		1982955	0					
ANR	1983150	UnaryOperator	&		1982955	0					
ANR	1983151	Identifier	argString		1982955	1					
ANR	1983152	ExpressionStatement	"dprintf ( D_ALWAYS , ""\\n chk this chk this %s\\n"" , argString . Value ( ) )"	111:2:2805:2870	1982955	15	True				
ANR	1983153	CallExpression	"dprintf ( D_ALWAYS , ""\\n chk this chk this %s\\n"" , argString . Value ( ) )"		1982955	0					
ANR	1983154	Callee	dprintf		1982955	0					
ANR	1983155	Identifier	dprintf		1982955	0					
ANR	1983156	ArgumentList	D_ALWAYS		1982955	1					
ANR	1983157	Argument	D_ALWAYS		1982955	0					
ANR	1983158	Identifier	D_ALWAYS		1982955	0					
ANR	1983159	Argument	"""\\n chk this chk this %s\\n"""		1982955	1					
ANR	1983160	PrimaryExpression	"""\\n chk this chk this %s\\n"""		1982955	0					
ANR	1983161	Argument	argString . Value ( )		1982955	2					
ANR	1983162	CallExpression	argString . Value ( )		1982955	0					
ANR	1983163	Callee	argString . Value		1982955	0					
ANR	1983164	MemberAccess	argString . Value		1982955	0					
ANR	1983165	Identifier	argString		1982955	0					
ANR	1983166	Identifier	Value		1982955	1					
ANR	1983167	ArgumentList			1982955	1					
ANR	1983168	ExpressionStatement	path = getPortPath ( )	112:2:2874:2894	1982955	16	True				
ANR	1983169	AssignmentExpression	path = getPortPath ( )		1982955	0		=			
ANR	1983170	Identifier	path		1982955	0					
ANR	1983171	CallExpression	getPortPath ( )		1982955	1					
ANR	1983172	Callee	getPortPath		1982955	0					
ANR	1983173	Identifier	getPortPath		1982955	0					
ANR	1983174	ArgumentList			1982955	1					
ANR	1983175	IdentifierDeclStatement	"int fd_stdout = safe_open_wrapper ( path , O_RDWR | O_CREAT , 0666 ) ;"	113:2:2898:2959	1982955	17	True				
ANR	1983176	IdentifierDecl	"fd_stdout = safe_open_wrapper ( path , O_RDWR | O_CREAT , 0666 )"		1982955	0					
ANR	1983177	IdentifierDeclType	int		1982955	0					
ANR	1983178	Identifier	fd_stdout		1982955	1					
ANR	1983179	AssignmentExpression	"fd_stdout = safe_open_wrapper ( path , O_RDWR | O_CREAT , 0666 )"		1982955	2		=			
ANR	1983180	Identifier	fd_stdout		1982955	0					
ANR	1983181	CallExpression	"safe_open_wrapper ( path , O_RDWR | O_CREAT , 0666 )"		1982955	1					
ANR	1983182	Callee	safe_open_wrapper		1982955	0					
ANR	1983183	Identifier	safe_open_wrapper		1982955	0					
ANR	1983184	ArgumentList	path		1982955	1					
ANR	1983185	Argument	path		1982955	0					
ANR	1983186	Identifier	path		1982955	0					
ANR	1983187	Argument	O_RDWR | O_CREAT		1982955	1					
ANR	1983188	InclusiveOrExpression	O_RDWR | O_CREAT		1982955	0		|			
ANR	1983189	Identifier	O_RDWR		1982955	0					
ANR	1983190	Identifier	O_CREAT		1982955	1					
ANR	1983191	Argument	0666		1982955	2					
ANR	1983192	PrimaryExpression	0666		1982955	0					
ANR	1983193	ExpressionStatement	free ( path )	114:2:2963:2973	1982955	18	True				
ANR	1983194	CallExpression	free ( path )		1982955	0					
ANR	1983195	Callee	free		1982955	0					
ANR	1983196	Identifier	free		1982955	0					
ANR	1983197	ArgumentList	path		1982955	1					
ANR	1983198	Argument	path		1982955	0					
ANR	1983199	Identifier	path		1982955	0					
ANR	1983200	IdentifierDeclStatement	"int fds [ 3 ] = { - 1 , fd_stdout , 0 } ;"	115:2:2977:3008	1982955	19	True				
ANR	1983201	IdentifierDecl	"fds [ 3 ] = { - 1 , fd_stdout , 0 }"		1982955	0					
ANR	1983202	IdentifierDeclType	int [ 3 ]		1982955	0					
ANR	1983203	Identifier	fds		1982955	1					
ANR	1983204	PrimaryExpression	3		1982955	2					
ANR	1983205	AssignmentExpression	"fds [ 3 ] = { - 1 , fd_stdout , 0 }"		1982955	3		=			
ANR	1983206	Identifier	fds		1982955	0					
ANR	1983207	InitializerList	- 1		1982955	1					
ANR	1983208	UnaryOperationExpression	- 1		1982955	0					
ANR	1983209	UnaryOperator	-		1982955	0					
ANR	1983210	PrimaryExpression	1		1982955	1					
ANR	1983211	Identifier	fd_stdout		1982955	1					
ANR	1983212	PrimaryExpression	0		1982955	2					
ANR	1983213	IdentifierDeclStatement	"int mm_pid = daemonCore -> Create_Process ( proc , arglist , PRIV_CONDOR_FINAL , 0 , FALSE , NULL , NULL , NULL , NULL , fds ) ;"	116:2:3012:3116	1982955	20	True				
ANR	1983214	IdentifierDecl	"mm_pid = daemonCore -> Create_Process ( proc , arglist , PRIV_CONDOR_FINAL , 0 , FALSE , NULL , NULL , NULL , NULL , fds )"		1982955	0					
ANR	1983215	IdentifierDeclType	int		1982955	0					
ANR	1983216	Identifier	mm_pid		1982955	1					
ANR	1983217	AssignmentExpression	"mm_pid = daemonCore -> Create_Process ( proc , arglist , PRIV_CONDOR_FINAL , 0 , FALSE , NULL , NULL , NULL , NULL , fds )"		1982955	2		=			
ANR	1983218	Identifier	mm_pid		1982955	0					
ANR	1983219	CallExpression	"daemonCore -> Create_Process ( proc , arglist , PRIV_CONDOR_FINAL , 0 , FALSE , NULL , NULL , NULL , NULL , fds )"		1982955	1					
ANR	1983220	Callee	daemonCore -> Create_Process		1982955	0					
ANR	1983221	PtrMemberAccess	daemonCore -> Create_Process		1982955	0					
ANR	1983222	Identifier	daemonCore		1982955	0					
ANR	1983223	Identifier	Create_Process		1982955	1					
ANR	1983224	ArgumentList	proc		1982955	1					
ANR	1983225	Argument	proc		1982955	0					
ANR	1983226	Identifier	proc		1982955	0					
ANR	1983227	Argument	arglist		1982955	1					
ANR	1983228	Identifier	arglist		1982955	0					
ANR	1983229	Argument	PRIV_CONDOR_FINAL		1982955	2					
ANR	1983230	Identifier	PRIV_CONDOR_FINAL		1982955	0					
ANR	1983231	Argument	0		1982955	3					
ANR	1983232	PrimaryExpression	0		1982955	0					
ANR	1983233	Argument	FALSE		1982955	4					
ANR	1983234	Identifier	FALSE		1982955	0					
ANR	1983235	Argument	NULL		1982955	5					
ANR	1983236	Identifier	NULL		1982955	0					
ANR	1983237	Argument	NULL		1982955	6					
ANR	1983238	Identifier	NULL		1982955	0					
ANR	1983239	Argument	NULL		1982955	7					
ANR	1983240	Identifier	NULL		1982955	0					
ANR	1983241	Argument	NULL		1982955	8					
ANR	1983242	Identifier	NULL		1982955	0					
ANR	1983243	Argument	fds		1982955	9					
ANR	1983244	Identifier	fds		1982955	0					
ANR	1983245	IfStatement	if ( mm_pid <= 0 )		1982955	21					
ANR	1983246	Condition	mm_pid <= 0	117:6:3124:3134	1982955	0	True				
ANR	1983247	RelationalExpression	mm_pid <= 0		1982955	0		<=			
ANR	1983248	Identifier	mm_pid		1982955	0					
ANR	1983249	PrimaryExpression	0		1982955	1					
ANR	1983250	ExpressionStatement	"EXCEPT ( ""Failed to launch qpid process using Create_Process.\\n "" )"	118:4:3142:3206	1982955	1	True				
ANR	1983251	CallExpression	"EXCEPT ( ""Failed to launch qpid process using Create_Process.\\n "" )"		1982955	0					
ANR	1983252	Callee	EXCEPT		1982955	0					
ANR	1983253	Identifier	EXCEPT		1982955	0					
ANR	1983254	ArgumentList	"""Failed to launch qpid process using Create_Process.\\n """		1982955	1					
ANR	1983255	Argument	"""Failed to launch qpid process using Create_Process.\\n """		1982955	0					
ANR	1983256	PrimaryExpression	"""Failed to launch qpid process using Create_Process.\\n """		1982955	0					
ANR	1983257	ExpressionStatement	"dprintf ( D_ALWAYS , ""Launched qpid process pid=%d \\n"" , mm_pid )"	120:2:3211:3271	1982955	22	True				
ANR	1983258	CallExpression	"dprintf ( D_ALWAYS , ""Launched qpid process pid=%d \\n"" , mm_pid )"		1982955	0					
ANR	1983259	Callee	dprintf		1982955	0					
ANR	1983260	Identifier	dprintf		1982955	0					
ANR	1983261	ArgumentList	D_ALWAYS		1982955	1					
ANR	1983262	Argument	D_ALWAYS		1982955	0					
ANR	1983263	Identifier	D_ALWAYS		1982955	0					
ANR	1983264	Argument	"""Launched qpid process pid=%d \\n"""		1982955	1					
ANR	1983265	PrimaryExpression	"""Launched qpid process pid=%d \\n"""		1982955	0					
ANR	1983266	Argument	mm_pid		1982955	2					
ANR	1983267	Identifier	mm_pid		1982955	0					
ANR	1983268	ExpressionStatement	sleep ( 10 )	121:2:3275:3284	1982955	23	True				
ANR	1983269	CallExpression	sleep ( 10 )		1982955	0					
ANR	1983270	Callee	sleep		1982955	0					
ANR	1983271	Identifier	sleep		1982955	0					
ANR	1983272	ArgumentList	10		1982955	1					
ANR	1983273	Argument	10		1982955	0					
ANR	1983274	PrimaryExpression	10		1982955	0					
ANR	1983275	ExpressionStatement	close ( fd_stdout )	122:2:3288:3304	1982955	24	True				
ANR	1983276	CallExpression	close ( fd_stdout )		1982955	0					
ANR	1983277	Callee	close		1982955	0					
ANR	1983278	Identifier	close		1982955	0					
ANR	1983279	ArgumentList	fd_stdout		1982955	1					
ANR	1983280	Argument	fd_stdout		1982955	0					
ANR	1983281	Identifier	fd_stdout		1982955	0					
ANR	1983282	IdentifierDeclStatement	char * portChr = getPort ( false ) ;	124:2:3310:3340	1982955	25	True				
ANR	1983283	IdentifierDecl	* portChr = getPort ( false )		1982955	0					
ANR	1983284	IdentifierDeclType	char *		1982955	0					
ANR	1983285	Identifier	portChr		1982955	1					
ANR	1983286	AssignmentExpression	* portChr = getPort ( false )		1982955	2		=			
ANR	1983287	Identifier	portChr		1982955	0					
ANR	1983288	CallExpression	getPort ( false )		1982955	1					
ANR	1983289	Callee	getPort		1982955	0					
ANR	1983290	Identifier	getPort		1982955	0					
ANR	1983291	ArgumentList	false		1982955	1					
ANR	1983292	Argument	false		1982955	0					
ANR	1983293	Identifier	false		1982955	0					
ANR	1983294	IdentifierDeclStatement	string portStr = string ( portChr ) ;	125:2:3344:3376	1982955	26	True				
ANR	1983295	IdentifierDecl	portStr = string ( portChr )		1982955	0					
ANR	1983296	IdentifierDeclType	string		1982955	0					
ANR	1983297	Identifier	portStr		1982955	1					
ANR	1983298	AssignmentExpression	portStr = string ( portChr )		1982955	2		=			
ANR	1983299	Identifier	portStr		1982955	0					
ANR	1983300	CallExpression	string ( portChr )		1982955	1					
ANR	1983301	Callee	string		1982955	0					
ANR	1983302	Identifier	string		1982955	0					
ANR	1983303	ArgumentList	portChr		1982955	1					
ANR	1983304	Argument	portChr		1982955	0					
ANR	1983305	Identifier	portChr		1982955	0					
ANR	1983306	ExpressionStatement	free ( portChr )	126:2:3380:3393	1982955	27	True				
ANR	1983307	CallExpression	free ( portChr )		1982955	0					
ANR	1983308	Callee	free		1982955	0					
ANR	1983309	Identifier	free		1982955	0					
ANR	1983310	ArgumentList	portChr		1982955	1					
ANR	1983311	Argument	portChr		1982955	0					
ANR	1983312	Identifier	portChr		1982955	0					
ANR	1983313	ExpressionStatement	free ( proc )	127:2:3397:3407	1982955	28	True				
ANR	1983314	CallExpression	free ( proc )		1982955	0					
ANR	1983315	Callee	free		1982955	0					
ANR	1983316	Identifier	free		1982955	0					
ANR	1983317	ArgumentList	proc		1982955	1					
ANR	1983318	Argument	proc		1982955	0					
ANR	1983319	Identifier	proc		1982955	0					
ANR	1983320	IfStatement	"if ( strcmp ( portStr . c_str ( ) , """" ) != 0 )"		1982955	29					
ANR	1983321	Condition	"strcmp ( portStr . c_str ( ) , """" ) != 0"	128:5:3414:3444	1982955	0	True				
ANR	1983322	EqualityExpression	"strcmp ( portStr . c_str ( ) , """" ) != 0"		1982955	0		!=			
ANR	1983323	CallExpression	"strcmp ( portStr . c_str ( ) , """" )"		1982955	0					
ANR	1983324	Callee	strcmp		1982955	0					
ANR	1983325	Identifier	strcmp		1982955	0					
ANR	1983326	ArgumentList	portStr . c_str ( )		1982955	1					
ANR	1983327	Argument	portStr . c_str ( )		1982955	0					
ANR	1983328	CallExpression	portStr . c_str ( )		1982955	0					
ANR	1983329	Callee	portStr . c_str		1982955	0					
ANR	1983330	MemberAccess	portStr . c_str		1982955	0					
ANR	1983331	Identifier	portStr		1982955	0					
ANR	1983332	Identifier	c_str		1982955	1					
ANR	1983333	ArgumentList			1982955	1					
ANR	1983334	Argument	""""""		1982955	1					
ANR	1983335	PrimaryExpression	""""""		1982955	0					
ANR	1983336	PrimaryExpression	0		1982955	1					
ANR	1983337	CompoundStatement		60:37:1680:1680	1982955	1					
ANR	1983338	ExpressionStatement	"m_qpidAd . Assign ( ""PORT"" , portStr . c_str ( ) )"	129:4:3452:3492	1982955	0	True				
ANR	1983339	CallExpression	"m_qpidAd . Assign ( ""PORT"" , portStr . c_str ( ) )"		1982955	0					
ANR	1983340	Callee	m_qpidAd . Assign		1982955	0					
ANR	1983341	MemberAccess	m_qpidAd . Assign		1982955	0					
ANR	1983342	Identifier	m_qpidAd		1982955	0					
ANR	1983343	Identifier	Assign		1982955	1					
ANR	1983344	ArgumentList	"""PORT"""		1982955	1					
ANR	1983345	Argument	"""PORT"""		1982955	0					
ANR	1983346	PrimaryExpression	"""PORT"""		1982955	0					
ANR	1983347	Argument	portStr . c_str ( )		1982955	1					
ANR	1983348	CallExpression	portStr . c_str ( )		1982955	0					
ANR	1983349	Callee	portStr . c_str		1982955	0					
ANR	1983350	MemberAccess	portStr . c_str		1982955	0					
ANR	1983351	Identifier	portStr		1982955	0					
ANR	1983352	Identifier	c_str		1982955	1					
ANR	1983353	ArgumentList			1982955	1					
ANR	1983354	ExpressionStatement	"dprintf ( D_ALWAYS , ""qpid process started on port number %s \\n"" , portStr . c_str ( ) )"	130:4:3498:3576	1982955	1	True				
ANR	1983355	CallExpression	"dprintf ( D_ALWAYS , ""qpid process started on port number %s \\n"" , portStr . c_str ( ) )"		1982955	0					
ANR	1983356	Callee	dprintf		1982955	0					
ANR	1983357	Identifier	dprintf		1982955	0					
ANR	1983358	ArgumentList	D_ALWAYS		1982955	1					
ANR	1983359	Argument	D_ALWAYS		1982955	0					
ANR	1983360	Identifier	D_ALWAYS		1982955	0					
ANR	1983361	Argument	"""qpid process started on port number %s \\n"""		1982955	1					
ANR	1983362	PrimaryExpression	"""qpid process started on port number %s \\n"""		1982955	0					
ANR	1983363	Argument	portStr . c_str ( )		1982955	2					
ANR	1983364	CallExpression	portStr . c_str ( )		1982955	0					
ANR	1983365	Callee	portStr . c_str		1982955	0					
ANR	1983366	MemberAccess	portStr . c_str		1982955	0					
ANR	1983367	Identifier	portStr		1982955	0					
ANR	1983368	Identifier	c_str		1982955	1					
ANR	1983369	ArgumentList			1982955	1					
ANR	1983370	ExpressionStatement	m_qpidAd . SetMyTypeName ( GENERIC_ADTYPE )	132:2:3586:3624	1982955	30	True				
ANR	1983371	CallExpression	m_qpidAd . SetMyTypeName ( GENERIC_ADTYPE )		1982955	0					
ANR	1983372	Callee	m_qpidAd . SetMyTypeName		1982955	0					
ANR	1983373	MemberAccess	m_qpidAd . SetMyTypeName		1982955	0					
ANR	1983374	Identifier	m_qpidAd		1982955	0					
ANR	1983375	Identifier	SetMyTypeName		1982955	1					
ANR	1983376	ArgumentList	GENERIC_ADTYPE		1982955	1					
ANR	1983377	Argument	GENERIC_ADTYPE		1982955	0					
ANR	1983378	Identifier	GENERIC_ADTYPE		1982955	0					
ANR	1983379	ExpressionStatement	"m_qpidAd . SetTargetTypeName ( ""pigeon"" )"	133:2:3628:3664	1982955	31	True				
ANR	1983380	CallExpression	"m_qpidAd . SetTargetTypeName ( ""pigeon"" )"		1982955	0					
ANR	1983381	Callee	m_qpidAd . SetTargetTypeName		1982955	0					
ANR	1983382	MemberAccess	m_qpidAd . SetTargetTypeName		1982955	0					
ANR	1983383	Identifier	m_qpidAd		1982955	0					
ANR	1983384	Identifier	SetTargetTypeName		1982955	1					
ANR	1983385	ArgumentList	"""pigeon"""		1982955	1					
ANR	1983386	Argument	"""pigeon"""		1982955	0					
ANR	1983387	PrimaryExpression	"""pigeon"""		1982955	0					
ANR	1983388	IdentifierDeclStatement	"std :: string hostAddr = ""qpid@"" ;"	134:2:3668:3698	1982955	32	True				
ANR	1983389	IdentifierDecl	"hostAddr = ""qpid@"""		1982955	0					
ANR	1983390	IdentifierDeclType	std :: string		1982955	0					
ANR	1983391	Identifier	hostAddr		1982955	1					
ANR	1983392	AssignmentExpression	"hostAddr = ""qpid@"""		1982955	2		=			
ANR	1983393	Identifier	hostAddr		1982955	0					
ANR	1983394	PrimaryExpression	"""qpid@"""		1982955	1					
ANR	1983395	ExpressionStatement	hostAddr += hostname	135:2:3702:3722	1982955	33	True				
ANR	1983396	AssignmentExpression	hostAddr += hostname		1982955	0		+=			
ANR	1983397	Identifier	hostAddr		1982955	0					
ANR	1983398	Identifier	hostname		1982955	1					
ANR	1983399	ExpressionStatement	"m_qpidAd . Assign ( ATTR_NAME , hostAddr . c_str ( ) )"	136:2:3726:3770	1982955	34	True				
ANR	1983400	CallExpression	"m_qpidAd . Assign ( ATTR_NAME , hostAddr . c_str ( ) )"		1982955	0					
ANR	1983401	Callee	m_qpidAd . Assign		1982955	0					
ANR	1983402	MemberAccess	m_qpidAd . Assign		1982955	0					
ANR	1983403	Identifier	m_qpidAd		1982955	0					
ANR	1983404	Identifier	Assign		1982955	1					
ANR	1983405	ArgumentList	ATTR_NAME		1982955	1					
ANR	1983406	Argument	ATTR_NAME		1982955	0					
ANR	1983407	Identifier	ATTR_NAME		1982955	0					
ANR	1983408	Argument	hostAddr . c_str ( )		1982955	1					
ANR	1983409	CallExpression	hostAddr . c_str ( )		1982955	0					
ANR	1983410	Callee	hostAddr . c_str		1982955	0					
ANR	1983411	MemberAccess	hostAddr . c_str		1982955	0					
ANR	1983412	Identifier	hostAddr		1982955	0					
ANR	1983413	Identifier	c_str		1982955	1					
ANR	1983414	ArgumentList			1982955	1					
ANR	1983415	ExpressionStatement	"m_qpidAd . Assign ( ""Key"" , ""qpidKey"" )"	137:2:3774:3807	1982955	35	True				
ANR	1983416	CallExpression	"m_qpidAd . Assign ( ""Key"" , ""qpidKey"" )"		1982955	0					
ANR	1983417	Callee	m_qpidAd . Assign		1982955	0					
ANR	1983418	MemberAccess	m_qpidAd . Assign		1982955	0					
ANR	1983419	Identifier	m_qpidAd		1982955	0					
ANR	1983420	Identifier	Assign		1982955	1					
ANR	1983421	ArgumentList	"""Key"""		1982955	1					
ANR	1983422	Argument	"""Key"""		1982955	0					
ANR	1983423	PrimaryExpression	"""Key"""		1982955	0					
ANR	1983424	Argument	"""qpidKey"""		1982955	1					
ANR	1983425	PrimaryExpression	"""qpidKey"""		1982955	0					
ANR	1983426	ExpressionStatement	"m_qpidAd . Assign ( ""IP"" , ""128"" )"	138:2:3811:3839	1982955	36	True				
ANR	1983427	CallExpression	"m_qpidAd . Assign ( ""IP"" , ""128"" )"		1982955	0					
ANR	1983428	Callee	m_qpidAd . Assign		1982955	0					
ANR	1983429	MemberAccess	m_qpidAd . Assign		1982955	0					
ANR	1983430	Identifier	m_qpidAd		1982955	0					
ANR	1983431	Identifier	Assign		1982955	1					
ANR	1983432	ArgumentList	"""IP"""		1982955	1					
ANR	1983433	Argument	"""IP"""		1982955	0					
ANR	1983434	PrimaryExpression	"""IP"""		1982955	0					
ANR	1983435	Argument	"""128"""		1982955	1					
ANR	1983436	PrimaryExpression	"""128"""		1982955	0					
ANR	1983437	ExpressionStatement	daemonCore -> publish ( & m_qpidAd )	139:2:3843:3873	1982955	37	True				
ANR	1983438	CallExpression	daemonCore -> publish ( & m_qpidAd )		1982955	0					
ANR	1983439	Callee	daemonCore -> publish		1982955	0					
ANR	1983440	PtrMemberAccess	daemonCore -> publish		1982955	0					
ANR	1983441	Identifier	daemonCore		1982955	0					
ANR	1983442	Identifier	publish		1982955	1					
ANR	1983443	ArgumentList	& m_qpidAd		1982955	1					
ANR	1983444	Argument	& m_qpidAd		1982955	0					
ANR	1983445	UnaryOperationExpression	& m_qpidAd		1982955	0					
ANR	1983446	UnaryOperator	&		1982955	0					
ANR	1983447	Identifier	m_qpidAd		1982955	1					
ANR	1983448	ExpressionStatement	"dprintf ( D_ALWAYS , ""Calling the classAd publish()\\n"" )"	143:2:3987:4039	1982955	38	True				
ANR	1983449	CallExpression	"dprintf ( D_ALWAYS , ""Calling the classAd publish()\\n"" )"		1982955	0					
ANR	1983450	Callee	dprintf		1982955	0					
ANR	1983451	Identifier	dprintf		1982955	0					
ANR	1983452	ArgumentList	D_ALWAYS		1982955	1					
ANR	1983453	Argument	D_ALWAYS		1982955	0					
ANR	1983454	Identifier	D_ALWAYS		1982955	0					
ANR	1983455	Argument	"""Calling the classAd publish()\\n"""		1982955	1					
ANR	1983456	PrimaryExpression	"""Calling the classAd publish()\\n"""		1982955	0					
ANR	1983457	ExpressionStatement	"daemonCore -> Register_Timer ( 1 , m_adPubInterval , ( TimerHandlercpp ) & Pigeon :: publishClassAd , ""publishClassAd"" , this )"	144:2:4043:4163	1982955	39	True				
ANR	1983458	CallExpression	"daemonCore -> Register_Timer ( 1 , m_adPubInterval , ( TimerHandlercpp ) & Pigeon :: publishClassAd , ""publishClassAd"" , this )"		1982955	0					
ANR	1983459	Callee	daemonCore -> Register_Timer		1982955	0					
ANR	1983460	PtrMemberAccess	daemonCore -> Register_Timer		1982955	0					
ANR	1983461	Identifier	daemonCore		1982955	0					
ANR	1983462	Identifier	Register_Timer		1982955	1					
ANR	1983463	ArgumentList	1		1982955	1					
ANR	1983464	Argument	1		1982955	0					
ANR	1983465	PrimaryExpression	1		1982955	0					
ANR	1983466	Argument	m_adPubInterval		1982955	1					
ANR	1983467	Identifier	m_adPubInterval		1982955	0					
ANR	1983468	Argument	( TimerHandlercpp ) & Pigeon :: publishClassAd		1982955	2					
ANR	1983469	CastExpression	( TimerHandlercpp ) & Pigeon :: publishClassAd		1982955	0					
ANR	1983470	CastTarget	TimerHandlercpp		1982955	0					
ANR	1983471	UnaryOperationExpression	& Pigeon :: publishClassAd		1982955	1					
ANR	1983472	UnaryOperator	&		1982955	0					
ANR	1983473	Identifier	Pigeon :: publishClassAd		1982955	1					
ANR	1983474	Argument	"""publishClassAd"""		1982955	3					
ANR	1983475	PrimaryExpression	"""publishClassAd"""		1982955	0					
ANR	1983476	Argument	this		1982955	4					
ANR	1983477	Identifier	this		1982955	0					
ANR	1983478	ExpressionStatement	"dprintf ( D_ALWAYS , ""Launched qpid process pid=%d at port=|%s|\\n"" , mm_pid , portStr . c_str ( ) )"	147:2:4168:4256	1982955	40	True				
ANR	1983479	CallExpression	"dprintf ( D_ALWAYS , ""Launched qpid process pid=%d at port=|%s|\\n"" , mm_pid , portStr . c_str ( ) )"		1982955	0					
ANR	1983480	Callee	dprintf		1982955	0					
ANR	1983481	Identifier	dprintf		1982955	0					
ANR	1983482	ArgumentList	D_ALWAYS		1982955	1					
ANR	1983483	Argument	D_ALWAYS		1982955	0					
ANR	1983484	Identifier	D_ALWAYS		1982955	0					
ANR	1983485	Argument	"""Launched qpid process pid=%d at port=|%s|\\n"""		1982955	1					
ANR	1983486	PrimaryExpression	"""Launched qpid process pid=%d at port=|%s|\\n"""		1982955	0					
ANR	1983487	Argument	mm_pid		1982955	2					
ANR	1983488	Identifier	mm_pid		1982955	0					
ANR	1983489	Argument	portStr . c_str ( )		1982955	3					
ANR	1983490	CallExpression	portStr . c_str ( )		1982955	0					
ANR	1983491	Callee	portStr . c_str		1982955	0					
ANR	1983492	MemberAccess	portStr . c_str		1982955	0					
ANR	1983493	Identifier	portStr		1982955	0					
ANR	1983494	Identifier	c_str		1982955	1					
ANR	1983495	ArgumentList			1982955	1					
ANR	1983496	IdentifierDeclStatement	"char * execDir = param ( ""SBIN"" ) ;"	150:2:4266:4295	1982955	41	True				
ANR	1983497	IdentifierDecl	"* execDir = param ( ""SBIN"" )"		1982955	0					
ANR	1983498	IdentifierDeclType	char *		1982955	0					
ANR	1983499	Identifier	execDir		1982955	1					
ANR	1983500	AssignmentExpression	"* execDir = param ( ""SBIN"" )"		1982955	2		=			
ANR	1983501	Identifier	execDir		1982955	0					
ANR	1983502	CallExpression	"param ( ""SBIN"" )"		1982955	1					
ANR	1983503	Callee	param		1982955	0					
ANR	1983504	Identifier	param		1982955	0					
ANR	1983505	ArgumentList	"""SBIN"""		1982955	1					
ANR	1983506	Argument	"""SBIN"""		1982955	0					
ANR	1983507	PrimaryExpression	"""SBIN"""		1982955	0					
ANR	1983508	IfStatement	if ( execDir )		1982955	42					
ANR	1983509	Condition	execDir	151:6:4303:4309	1982955	0	True				
ANR	1983510	Identifier	execDir		1982955	0					
ANR	1983511	CompoundStatement		85:3:2600:2616	1982955	1					
ANR	1983512	ExpressionStatement	"dprintf ( D_ALWAYS , ""Declaring queues...  \\n"" )"	152:3:4317:4361	1982955	0	True				
ANR	1983513	CallExpression	"dprintf ( D_ALWAYS , ""Declaring queues...  \\n"" )"		1982955	0					
ANR	1983514	Callee	dprintf		1982955	0					
ANR	1983515	Identifier	dprintf		1982955	0					
ANR	1983516	ArgumentList	D_ALWAYS		1982955	1					
ANR	1983517	Argument	D_ALWAYS		1982955	0					
ANR	1983518	Identifier	D_ALWAYS		1982955	0					
ANR	1983519	Argument	"""Declaring queues...  \\n"""		1982955	1					
ANR	1983520	PrimaryExpression	"""Declaring queues...  \\n"""		1982955	0					
ANR	1983521	IdentifierDeclStatement	ArgList qArglist ;	153:3:4366:4382	1982955	1	True				
ANR	1983522	IdentifierDecl	qArglist		1982955	0					
ANR	1983523	IdentifierDeclType	ArgList		1982955	0					
ANR	1983524	Identifier	qArglist		1982955	1					
ANR	1983525	ExpressionStatement	proc = ( char * ) malloc ( strlen ( execDir ) + 15 )	154:3:4387:4429	1982955	2	True				
ANR	1983526	AssignmentExpression	proc = ( char * ) malloc ( strlen ( execDir ) + 15 )		1982955	0		=			
ANR	1983527	Identifier	proc		1982955	0					
ANR	1983528	CastExpression	( char * ) malloc ( strlen ( execDir ) + 15 )		1982955	1					
ANR	1983529	CastTarget	char *		1982955	0					
ANR	1983530	CallExpression	malloc ( strlen ( execDir ) + 15 )		1982955	1					
ANR	1983531	Callee	malloc		1982955	0					
ANR	1983532	Identifier	malloc		1982955	0					
ANR	1983533	ArgumentList	strlen ( execDir ) + 15		1982955	1					
ANR	1983534	Argument	strlen ( execDir ) + 15		1982955	0					
ANR	1983535	AdditiveExpression	strlen ( execDir ) + 15		1982955	0		+			
ANR	1983536	CallExpression	strlen ( execDir )		1982955	0					
ANR	1983537	Callee	strlen		1982955	0					
ANR	1983538	Identifier	strlen		1982955	0					
ANR	1983539	ArgumentList	execDir		1982955	1					
ANR	1983540	Argument	execDir		1982955	0					
ANR	1983541	Identifier	execDir		1982955	0					
ANR	1983542	PrimaryExpression	15		1982955	1					
ANR	1983543	ExpressionStatement	"sprintf ( proc , ""%s%c%s"" , execDir , DIR_DELIM_CHAR , ""declareQueues"" )"	155:3:4434:4498	1982955	3	True				
ANR	1983544	CallExpression	"sprintf ( proc , ""%s%c%s"" , execDir , DIR_DELIM_CHAR , ""declareQueues"" )"		1982955	0					
ANR	1983545	Callee	sprintf		1982955	0					
ANR	1983546	Identifier	sprintf		1982955	0					
ANR	1983547	ArgumentList	proc		1982955	1					
ANR	1983548	Argument	proc		1982955	0					
ANR	1983549	Identifier	proc		1982955	0					
ANR	1983550	Argument	"""%s%c%s"""		1982955	1					
ANR	1983551	PrimaryExpression	"""%s%c%s"""		1982955	0					
ANR	1983552	Argument	execDir		1982955	2					
ANR	1983553	Identifier	execDir		1982955	0					
ANR	1983554	Argument	DIR_DELIM_CHAR		1982955	3					
ANR	1983555	Identifier	DIR_DELIM_CHAR		1982955	0					
ANR	1983556	Argument	"""declareQueues"""		1982955	4					
ANR	1983557	PrimaryExpression	"""declareQueues"""		1982955	0					
ANR	1983558	ExpressionStatement	qArglist . AppendArg ( proc )	156:3:4503:4527	1982955	4	True				
ANR	1983559	CallExpression	qArglist . AppendArg ( proc )		1982955	0					
ANR	1983560	Callee	qArglist . AppendArg		1982955	0					
ANR	1983561	MemberAccess	qArglist . AppendArg		1982955	0					
ANR	1983562	Identifier	qArglist		1982955	0					
ANR	1983563	Identifier	AppendArg		1982955	1					
ANR	1983564	ArgumentList	proc		1982955	1					
ANR	1983565	Argument	proc		1982955	0					
ANR	1983566	Identifier	proc		1982955	0					
ANR	1983567	ExpressionStatement	qArglist . AppendArg ( hostname )	157:3:4532:4560	1982955	5	True				
ANR	1983568	CallExpression	qArglist . AppendArg ( hostname )		1982955	0					
ANR	1983569	Callee	qArglist . AppendArg		1982955	0					
ANR	1983570	MemberAccess	qArglist . AppendArg		1982955	0					
ANR	1983571	Identifier	qArglist		1982955	0					
ANR	1983572	Identifier	AppendArg		1982955	1					
ANR	1983573	ArgumentList	hostname		1982955	1					
ANR	1983574	Argument	hostname		1982955	0					
ANR	1983575	Identifier	hostname		1982955	0					
ANR	1983576	ExpressionStatement	qArglist . AppendArg ( portStr . c_str ( ) )	158:3:4565:4600	1982955	6	True				
ANR	1983577	CallExpression	qArglist . AppendArg ( portStr . c_str ( ) )		1982955	0					
ANR	1983578	Callee	qArglist . AppendArg		1982955	0					
ANR	1983579	MemberAccess	qArglist . AppendArg		1982955	0					
ANR	1983580	Identifier	qArglist		1982955	0					
ANR	1983581	Identifier	AppendArg		1982955	1					
ANR	1983582	ArgumentList	portStr . c_str ( )		1982955	1					
ANR	1983583	Argument	portStr . c_str ( )		1982955	0					
ANR	1983584	CallExpression	portStr . c_str ( )		1982955	0					
ANR	1983585	Callee	portStr . c_str		1982955	0					
ANR	1983586	MemberAccess	portStr . c_str		1982955	0					
ANR	1983587	Identifier	portStr		1982955	0					
ANR	1983588	Identifier	c_str		1982955	1					
ANR	1983589	ArgumentList			1982955	1					
ANR	1983590	ExpressionStatement	"mm_pid = daemonCore -> Create_Process ( proc , qArglist , PRIV_CONDOR_FINAL , 0 , FALSE , NULL , NULL , NULL , NULL )"	159:3:4605:4702	1982955	7	True				
ANR	1983591	AssignmentExpression	"mm_pid = daemonCore -> Create_Process ( proc , qArglist , PRIV_CONDOR_FINAL , 0 , FALSE , NULL , NULL , NULL , NULL )"		1982955	0		=			
ANR	1983592	Identifier	mm_pid		1982955	0					
ANR	1983593	CallExpression	"daemonCore -> Create_Process ( proc , qArglist , PRIV_CONDOR_FINAL , 0 , FALSE , NULL , NULL , NULL , NULL )"		1982955	1					
ANR	1983594	Callee	daemonCore -> Create_Process		1982955	0					
ANR	1983595	PtrMemberAccess	daemonCore -> Create_Process		1982955	0					
ANR	1983596	Identifier	daemonCore		1982955	0					
ANR	1983597	Identifier	Create_Process		1982955	1					
ANR	1983598	ArgumentList	proc		1982955	1					
ANR	1983599	Argument	proc		1982955	0					
ANR	1983600	Identifier	proc		1982955	0					
ANR	1983601	Argument	qArglist		1982955	1					
ANR	1983602	Identifier	qArglist		1982955	0					
ANR	1983603	Argument	PRIV_CONDOR_FINAL		1982955	2					
ANR	1983604	Identifier	PRIV_CONDOR_FINAL		1982955	0					
ANR	1983605	Argument	0		1982955	3					
ANR	1983606	PrimaryExpression	0		1982955	0					
ANR	1983607	Argument	FALSE		1982955	4					
ANR	1983608	Identifier	FALSE		1982955	0					
ANR	1983609	Argument	NULL		1982955	5					
ANR	1983610	Identifier	NULL		1982955	0					
ANR	1983611	Argument	NULL		1982955	6					
ANR	1983612	Identifier	NULL		1982955	0					
ANR	1983613	Argument	NULL		1982955	7					
ANR	1983614	Identifier	NULL		1982955	0					
ANR	1983615	Argument	NULL		1982955	8					
ANR	1983616	Identifier	NULL		1982955	0					
ANR	1983617	IfStatement	if ( mm_pid <= 0 )		1982955	8					
ANR	1983618	Condition	mm_pid <= 0	160:7:4711:4721	1982955	0	True				
ANR	1983619	RelationalExpression	mm_pid <= 0		1982955	0		<=			
ANR	1983620	Identifier	mm_pid		1982955	0					
ANR	1983621	PrimaryExpression	0		1982955	1					
ANR	1983622	ExpressionStatement	"EXCEPT ( ""Failed to launch declareQueues process using Create_Process.\\n "" )"	161:2:4727:4800	1982955	1	True				
ANR	1983623	CallExpression	"EXCEPT ( ""Failed to launch declareQueues process using Create_Process.\\n "" )"		1982955	0					
ANR	1983624	Callee	EXCEPT		1982955	0					
ANR	1983625	Identifier	EXCEPT		1982955	0					
ANR	1983626	ArgumentList	"""Failed to launch declareQueues process using Create_Process.\\n """		1982955	1					
ANR	1983627	Argument	"""Failed to launch declareQueues process using Create_Process.\\n """		1982955	0					
ANR	1983628	PrimaryExpression	"""Failed to launch declareQueues process using Create_Process.\\n """		1982955	0					
ANR	1983629	ExpressionStatement	free ( proc )	162:4:4806:4816	1982955	9	True				
ANR	1983630	CallExpression	free ( proc )		1982955	0					
ANR	1983631	Callee	free		1982955	0					
ANR	1983632	Identifier	free		1982955	0					
ANR	1983633	ArgumentList	proc		1982955	1					
ANR	1983634	Argument	proc		1982955	0					
ANR	1983635	Identifier	proc		1982955	0					
ANR	1983636	ExpressionStatement	free ( execDir )	163:4:4822:4835	1982955	10	True				
ANR	1983637	CallExpression	free ( execDir )		1982955	0					
ANR	1983638	Callee	free		1982955	0					
ANR	1983639	Identifier	free		1982955	0					
ANR	1983640	ArgumentList	execDir		1982955	1					
ANR	1983641	Argument	execDir		1982955	0					
ANR	1983642	Identifier	execDir		1982955	0					
ANR	1983643	ExpressionStatement	"dprintf ( D_ALWAYS , ""QPID queues declared. \\n"" )"	164:1:4838:4883	1982955	11	True				
ANR	1983644	CallExpression	"dprintf ( D_ALWAYS , ""QPID queues declared. \\n"" )"		1982955	0					
ANR	1983645	Callee	dprintf		1982955	0					
ANR	1983646	Identifier	dprintf		1982955	0					
ANR	1983647	ArgumentList	D_ALWAYS		1982955	1					
ANR	1983648	Argument	D_ALWAYS		1982955	0					
ANR	1983649	Identifier	D_ALWAYS		1982955	0					
ANR	1983650	Argument	"""QPID queues declared. \\n"""		1982955	1					
ANR	1983651	PrimaryExpression	"""QPID queues declared. \\n"""		1982955	0					
ANR	1983652	ReturnType	void		1982955	1					
ANR	1983653	Identifier	Pigeon :: initialize		1982955	2					
ANR	1983654	ParameterList			1982955	3					
ANR	1983655	CFGEntryNode	ENTRY		1982955		True				
ANR	1983656	CFGExitNode	EXIT		1982955		True				
ANR	1983657	Symbol	daemonCore -> Create_Process		1982955						
ANR	1983658	Symbol	ATTR_NAME		1982955						
ANR	1983659	Symbol	qArglist		1982955						
ANR	1983660	Symbol	O_CREAT		1982955						
ANR	1983661	Symbol	path		1982955						
ANR	1983662	Symbol	my_full_hostname		1982955						
ANR	1983663	Symbol	strlen		1982955						
ANR	1983664	Symbol	hostname		1982955						
ANR	1983665	Symbol	fd_stdout		1982955						
ANR	1983666	Symbol	portStr . c_str		1982955						
ANR	1983667	Symbol	argString		1982955						
ANR	1983668	Symbol	strcmp		1982955						
ANR	1983669	Symbol	NULL		1982955						
ANR	1983670	Symbol	this		1982955						
ANR	1983671	Symbol	argString . Value		1982955						
ANR	1983672	Symbol	safe_open_wrapper		1982955						
ANR	1983673	Symbol	m_qpidAd		1982955						
ANR	1983674	Symbol	& Pigeon :: reaperResponse		1982955						
ANR	1983675	Symbol	GENERIC_ADTYPE		1982955						
ANR	1983676	Symbol	m_adPubInterval		1982955						
ANR	1983677	Symbol	hostAddr		1982955						
ANR	1983678	Symbol	* daemonCore		1982955						
ANR	1983679	Symbol	& argString		1982955						
ANR	1983680	Symbol	mm_pid		1982955						
ANR	1983681	Symbol	hostAddr . c_str		1982955						
ANR	1983682	Symbol	string		1982955						
ANR	1983683	Symbol	portChr		1982955						
ANR	1983684	Symbol	& Pigeon :: publishClassAd		1982955						
ANR	1983685	Symbol	portStr		1982955						
ANR	1983686	Symbol	qpidConf		1982955						
ANR	1983687	Symbol	O_RDWR		1982955						
ANR	1983688	Symbol	param		1982955						
ANR	1983689	Symbol	daemonCore		1982955						
ANR	1983690	Symbol	arglist		1982955						
ANR	1983691	Symbol	PRIV_CONDOR_FINAL		1982955						
ANR	1983692	Symbol	malloc		1982955						
ANR	1983693	Symbol	proc		1982955						
ANR	1983694	Symbol	execDir		1982955						
ANR	1983695	Symbol	DIR_DELIM_CHAR		1982955						
ANR	1983696	Symbol	D_ALWAYS		1982955						
ANR	1983697	Symbol	false		1982955						
ANR	1983698	Symbol	qpidPort		1982955						
ANR	1983699	Symbol	argClean		1982955						
ANR	1983700	Symbol	daemonCore -> Register_Reaper		1982955						
ANR	1983701	Symbol	getPort		1982955						
ANR	1983702	Symbol	m_reaper		1982955						
ANR	1983703	Symbol	fds		1982955						
ANR	1983704	Symbol	FALSE		1982955						
ANR	1983705	Symbol	& m_qpidAd		1982955						
ANR	1983706	Symbol	getPortPath		1982955						
ANR	1983707	Function	Pigeon :: writeConfigFile	168:0:4893:8410							
ANR	1983708	FunctionDef	Pigeon :: writeConfigFile ()		1983707	0					
ANR	1983709	CompoundStatement		168:31:4924:8410	1983707	0					
ANR	1983710	IdentifierDeclStatement	MyString confFile ;	169:2:4928:4945	1983707	0	True				
ANR	1983711	IdentifierDecl	confFile		1983707	0					
ANR	1983712	IdentifierDeclType	MyString		1983707	0					
ANR	1983713	Identifier	confFile		1983707	1					
ANR	1983714	IdentifierDeclStatement	"char * logdir = param ( ""LOG"" ) ;"	170:2:4949:4976	1983707	1	True				
ANR	1983715	IdentifierDecl	"* logdir = param ( ""LOG"" )"		1983707	0					
ANR	1983716	IdentifierDeclType	char *		1983707	0					
ANR	1983717	Identifier	logdir		1983707	1					
ANR	1983718	AssignmentExpression	"* logdir = param ( ""LOG"" )"		1983707	2		=			
ANR	1983719	Identifier	logdir		1983707	0					
ANR	1983720	CallExpression	"param ( ""LOG"" )"		1983707	1					
ANR	1983721	Callee	param		1983707	0					
ANR	1983722	Identifier	param		1983707	0					
ANR	1983723	ArgumentList	"""LOG"""		1983707	1					
ANR	1983724	Argument	"""LOG"""		1983707	0					
ANR	1983725	PrimaryExpression	"""LOG"""		1983707	0					
ANR	1983726	IfStatement	if ( logdir == NULL )		1983707	2					
ANR	1983727	Condition	logdir == NULL	171:6:4984:4997	1983707	0	True				
ANR	1983728	EqualityExpression	logdir == NULL		1983707	0		==			
ANR	1983729	Identifier	logdir		1983707	0					
ANR	1983730	Identifier	NULL		1983707	1					
ANR	1983731	ExpressionStatement	"EXCEPT ( ""Misconfigured QPID!: log directory is not specified\\n"" )"	172:4:5005:5068	1983707	1	True				
ANR	1983732	CallExpression	"EXCEPT ( ""Misconfigured QPID!: log directory is not specified\\n"" )"		1983707	0					
ANR	1983733	Callee	EXCEPT		1983707	0					
ANR	1983734	Identifier	EXCEPT		1983707	0					
ANR	1983735	ArgumentList	"""Misconfigured QPID!: log directory is not specified\\n"""		1983707	1					
ANR	1983736	Argument	"""Misconfigured QPID!: log directory is not specified\\n"""		1983707	0					
ANR	1983737	PrimaryExpression	"""Misconfigured QPID!: log directory is not specified\\n"""		1983707	0					
ANR	1983738	ExpressionStatement	"confFile . sprintf ( ""%s/%s"" , logdir , m_siteFile . Value ( ) )"	174:2:5073:5126	1983707	3	True				
ANR	1983739	CallExpression	"confFile . sprintf ( ""%s/%s"" , logdir , m_siteFile . Value ( ) )"		1983707	0					
ANR	1983740	Callee	confFile . sprintf		1983707	0					
ANR	1983741	MemberAccess	confFile . sprintf		1983707	0					
ANR	1983742	Identifier	confFile		1983707	0					
ANR	1983743	Identifier	sprintf		1983707	1					
ANR	1983744	ArgumentList	"""%s/%s"""		1983707	1					
ANR	1983745	Argument	"""%s/%s"""		1983707	0					
ANR	1983746	PrimaryExpression	"""%s/%s"""		1983707	0					
ANR	1983747	Argument	logdir		1983707	1					
ANR	1983748	Identifier	logdir		1983707	0					
ANR	1983749	Argument	m_siteFile . Value ( )		1983707	2					
ANR	1983750	CallExpression	m_siteFile . Value ( )		1983707	0					
ANR	1983751	Callee	m_siteFile . Value		1983707	0					
ANR	1983752	MemberAccess	m_siteFile . Value		1983707	0					
ANR	1983753	Identifier	m_siteFile		1983707	0					
ANR	1983754	Identifier	Value		1983707	1					
ANR	1983755	ArgumentList			1983707	1					
ANR	1983756	ExpressionStatement	free ( logdir )	175:2:5130:5142	1983707	4	True				
ANR	1983757	CallExpression	free ( logdir )		1983707	0					
ANR	1983758	Callee	free		1983707	0					
ANR	1983759	Identifier	free		1983707	0					
ANR	1983760	ArgumentList	logdir		1983707	1					
ANR	1983761	Argument	logdir		1983707	0					
ANR	1983762	Identifier	logdir		1983707	0					
ANR	1983763	ExpressionStatement	"dprintf ( D_ALWAYS , ""Config file location %s\\n"" , confFile . Value ( ) )"	176:2:5146:5210	1983707	5	True				
ANR	1983764	CallExpression	"dprintf ( D_ALWAYS , ""Config file location %s\\n"" , confFile . Value ( ) )"		1983707	0					
ANR	1983765	Callee	dprintf		1983707	0					
ANR	1983766	Identifier	dprintf		1983707	0					
ANR	1983767	ArgumentList	D_ALWAYS		1983707	1					
ANR	1983768	Argument	D_ALWAYS		1983707	0					
ANR	1983769	Identifier	D_ALWAYS		1983707	0					
ANR	1983770	Argument	"""Config file location %s\\n"""		1983707	1					
ANR	1983771	PrimaryExpression	"""Config file location %s\\n"""		1983707	0					
ANR	1983772	Argument	confFile . Value ( )		1983707	2					
ANR	1983773	CallExpression	confFile . Value ( )		1983707	0					
ANR	1983774	Callee	confFile . Value		1983707	0					
ANR	1983775	MemberAccess	confFile . Value		1983707	0					
ANR	1983776	Identifier	confFile		1983707	0					
ANR	1983777	Identifier	Value		1983707	1					
ANR	1983778	ArgumentList			1983707	1					
ANR	1983779	IdentifierDeclStatement	"int fd = safe_create_replace_if_exists ( confFile . Value ( ) , O_CREAT | O_WRONLY ) ;"	178:2:5215:5289	1983707	6	True				
ANR	1983780	IdentifierDecl	"fd = safe_create_replace_if_exists ( confFile . Value ( ) , O_CREAT | O_WRONLY )"		1983707	0					
ANR	1983781	IdentifierDeclType	int		1983707	0					
ANR	1983782	Identifier	fd		1983707	1					
ANR	1983783	AssignmentExpression	"fd = safe_create_replace_if_exists ( confFile . Value ( ) , O_CREAT | O_WRONLY )"		1983707	2		=			
ANR	1983784	Identifier	fd		1983707	0					
ANR	1983785	CallExpression	"safe_create_replace_if_exists ( confFile . Value ( ) , O_CREAT | O_WRONLY )"		1983707	1					
ANR	1983786	Callee	safe_create_replace_if_exists		1983707	0					
ANR	1983787	Identifier	safe_create_replace_if_exists		1983707	0					
ANR	1983788	ArgumentList	confFile . Value ( )		1983707	1					
ANR	1983789	Argument	confFile . Value ( )		1983707	0					
ANR	1983790	CallExpression	confFile . Value ( )		1983707	0					
ANR	1983791	Callee	confFile . Value		1983707	0					
ANR	1983792	MemberAccess	confFile . Value		1983707	0					
ANR	1983793	Identifier	confFile		1983707	0					
ANR	1983794	Identifier	Value		1983707	1					
ANR	1983795	ArgumentList			1983707	1					
ANR	1983796	Argument	O_CREAT | O_WRONLY		1983707	1					
ANR	1983797	InclusiveOrExpression	O_CREAT | O_WRONLY		1983707	0		|			
ANR	1983798	Identifier	O_CREAT		1983707	0					
ANR	1983799	Identifier	O_WRONLY		1983707	1					
ANR	1983800	IfStatement	if ( fd == - 1 )		1983707	7					
ANR	1983801	Condition	fd == - 1	179:6:5297:5304	1983707	0	True				
ANR	1983802	EqualityExpression	fd == - 1		1983707	0		==			
ANR	1983803	Identifier	fd		1983707	0					
ANR	1983804	UnaryOperationExpression	- 1		1983707	1					
ANR	1983805	UnaryOperator	-		1983707	0					
ANR	1983806	PrimaryExpression	1		1983707	1					
ANR	1983807	CompoundStatement		12:16:382:382	1983707	1					
ANR	1983808	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to create qpid configuration file\\n"" )"	180:4:5313:5376	1983707	0	True				
ANR	1983809	CallExpression	"dprintf ( D_ALWAYS , ""Failed to create qpid configuration file\\n"" )"		1983707	0					
ANR	1983810	Callee	dprintf		1983707	0					
ANR	1983811	Identifier	dprintf		1983707	0					
ANR	1983812	ArgumentList	D_ALWAYS		1983707	1					
ANR	1983813	Argument	D_ALWAYS		1983707	0					
ANR	1983814	Identifier	D_ALWAYS		1983707	0					
ANR	1983815	Argument	"""Failed to create qpid configuration file\\n"""		1983707	1					
ANR	1983816	PrimaryExpression	"""Failed to create qpid configuration file\\n"""		1983707	0					
ANR	1983817	ExpressionStatement	exit ( 1 )	181:4:5382:5389	1983707	1	True				
ANR	1983818	CallExpression	exit ( 1 )		1983707	0					
ANR	1983819	Callee	exit		1983707	0					
ANR	1983820	Identifier	exit		1983707	0					
ANR	1983821	ArgumentList	1		1983707	1					
ANR	1983822	Argument	1		1983707	0					
ANR	1983823	PrimaryExpression	1		1983707	0					
ANR	1983824	IdentifierDeclStatement	"StringList xml ( """" , ""\\n"" ) ;"	184:2:5398:5422	1983707	8	True				
ANR	1983825	IdentifierDecl	"xml ( """" , ""\\n"" )"		1983707	0					
ANR	1983826	IdentifierDeclType	StringList		1983707	0					
ANR	1983827	Identifier	xml		1983707	1					
ANR	1983828	Expression	""""" , ""\\n"""		1983707	2					
ANR	1983829	PrimaryExpression	""""""		1983707	0					
ANR	1983830	PrimaryExpression	"""\\n"""		1983707	1					
ANR	1983831	ExpressionStatement		184:27:5423:5423	1983707	9	True				
ANR	1983832	ExpressionStatement	"xml . append ( ""<?xml version=\\""1.0\\""?>"" )"	185:2:5427:5464	1983707	10	True				
ANR	1983833	CallExpression	"xml . append ( ""<?xml version=\\""1.0\\""?>"" )"		1983707	0					
ANR	1983834	Callee	xml . append		1983707	0					
ANR	1983835	MemberAccess	xml . append		1983707	0					
ANR	1983836	Identifier	xml		1983707	0					
ANR	1983837	Identifier	append		1983707	1					
ANR	1983838	ArgumentList	"""<?xml version=\\""1.0\\""?>"""		1983707	1					
ANR	1983839	Argument	"""<?xml version=\\""1.0\\""?>"""		1983707	0					
ANR	1983840	PrimaryExpression	"""<?xml version=\\""1.0\\""?>"""		1983707	0					
ANR	1983841	ExpressionStatement	"xml . append ( ""<?xml-stylesheet type=\\""text/xsl\\"" href=\\""configuration.xsl\\""?>"" )"	186:2:5468:5545	1983707	11	True				
ANR	1983842	CallExpression	"xml . append ( ""<?xml-stylesheet type=\\""text/xsl\\"" href=\\""configuration.xsl\\""?>"" )"		1983707	0					
ANR	1983843	Callee	xml . append		1983707	0					
ANR	1983844	MemberAccess	xml . append		1983707	0					
ANR	1983845	Identifier	xml		1983707	0					
ANR	1983846	Identifier	append		1983707	1					
ANR	1983847	ArgumentList	"""<?xml-stylesheet type=\\""text/xsl\\"" href=\\""configuration.xsl\\""?>"""		1983707	1					
ANR	1983848	Argument	"""<?xml-stylesheet type=\\""text/xsl\\"" href=\\""configuration.xsl\\""?>"""		1983707	0					
ANR	1983849	PrimaryExpression	"""<?xml-stylesheet type=\\""text/xsl\\"" href=\\""configuration.xsl\\""?>"""		1983707	0					
ANR	1983850	ExpressionStatement	"xml . append ( ""<!-- DON'T MODIFY this file manually, as it is overwritten by CONDOR.-->"" )"	187:2:5549:5635	1983707	12	True				
ANR	1983851	CallExpression	"xml . append ( ""<!-- DON'T MODIFY this file manually, as it is overwritten by CONDOR.-->"" )"		1983707	0					
ANR	1983852	Callee	xml . append		1983707	0					
ANR	1983853	MemberAccess	xml . append		1983707	0					
ANR	1983854	Identifier	xml		1983707	0					
ANR	1983855	Identifier	append		1983707	1					
ANR	1983856	ArgumentList	"""<!-- DON'T MODIFY this file manually, as it is overwritten by CONDOR.-->"""		1983707	1					
ANR	1983857	Argument	"""<!-- DON'T MODIFY this file manually, as it is overwritten by CONDOR.-->"""		1983707	0					
ANR	1983858	PrimaryExpression	"""<!-- DON'T MODIFY this file manually, as it is overwritten by CONDOR.-->"""		1983707	0					
ANR	1983859	ExpressionStatement	"xml . append ( ""<configuration>"" )"	188:2:5639:5668	1983707	13	True				
ANR	1983860	CallExpression	"xml . append ( ""<configuration>"" )"		1983707	0					
ANR	1983861	Callee	xml . append		1983707	0					
ANR	1983862	MemberAccess	xml . append		1983707	0					
ANR	1983863	Identifier	xml		1983707	0					
ANR	1983864	Identifier	append		1983707	1					
ANR	1983865	ArgumentList	"""<configuration>"""		1983707	1					
ANR	1983866	Argument	"""<configuration>"""		1983707	0					
ANR	1983867	PrimaryExpression	"""<configuration>"""		1983707	0					
ANR	1983868	IdentifierDeclStatement	"char * namenode = param ( ""QPID_NAMENODE"" ) ;"	190:2:5673:5712	1983707	14	True				
ANR	1983869	IdentifierDecl	"* namenode = param ( ""QPID_NAMENODE"" )"		1983707	0					
ANR	1983870	IdentifierDeclType	char *		1983707	0					
ANR	1983871	Identifier	namenode		1983707	1					
ANR	1983872	AssignmentExpression	"* namenode = param ( ""QPID_NAMENODE"" )"		1983707	2		=			
ANR	1983873	Identifier	namenode		1983707	0					
ANR	1983874	CallExpression	"param ( ""QPID_NAMENODE"" )"		1983707	1					
ANR	1983875	Callee	param		1983707	0					
ANR	1983876	Identifier	param		1983707	0					
ANR	1983877	ArgumentList	"""QPID_NAMENODE"""		1983707	1					
ANR	1983878	Argument	"""QPID_NAMENODE"""		1983707	0					
ANR	1983879	PrimaryExpression	"""QPID_NAMENODE"""		1983707	0					
ANR	1983880	IfStatement	if ( namenode != NULL )		1983707	15					
ANR	1983881	Condition	namenode != NULL	191:6:5720:5735	1983707	0	True				
ANR	1983882	EqualityExpression	namenode != NULL		1983707	0		!=			
ANR	1983883	Identifier	namenode		1983707	0					
ANR	1983884	Identifier	NULL		1983707	1					
ANR	1983885	CompoundStatement		24:24:813:813	1983707	1					
ANR	1983886	ExpressionStatement	"writeXMLParam ( ""fs.default.name"" , namenode , & xml )"	192:4:5744:5792	1983707	0	True				
ANR	1983887	CallExpression	"writeXMLParam ( ""fs.default.name"" , namenode , & xml )"		1983707	0					
ANR	1983888	Callee	writeXMLParam		1983707	0					
ANR	1983889	Identifier	writeXMLParam		1983707	0					
ANR	1983890	ArgumentList	"""fs.default.name"""		1983707	1					
ANR	1983891	Argument	"""fs.default.name"""		1983707	0					
ANR	1983892	PrimaryExpression	"""fs.default.name"""		1983707	0					
ANR	1983893	Argument	namenode		1983707	1					
ANR	1983894	Identifier	namenode		1983707	0					
ANR	1983895	Argument	& xml		1983707	2					
ANR	1983896	UnaryOperationExpression	& xml		1983707	0					
ANR	1983897	UnaryOperator	&		1983707	0					
ANR	1983898	Identifier	xml		1983707	1					
ANR	1983899	ExpressionStatement	free ( namenode )	193:4:5798:5812	1983707	1	True				
ANR	1983900	CallExpression	free ( namenode )		1983707	0					
ANR	1983901	Callee	free		1983707	0					
ANR	1983902	Identifier	free		1983707	0					
ANR	1983903	ArgumentList	namenode		1983707	1					
ANR	1983904	Argument	namenode		1983707	0					
ANR	1983905	Identifier	namenode		1983707	0					
ANR	1983906	ExpressionStatement	"m_nameNodeDir = ""/tmp/qpid_name"""	196:2:5822:5857	1983707	16	True				
ANR	1983907	AssignmentExpression	"m_nameNodeDir = ""/tmp/qpid_name"""		1983707	0		=			
ANR	1983908	Identifier	m_nameNodeDir		1983707	0					
ANR	1983909	PrimaryExpression	"""/tmp/qpid_name"""		1983707	1					
ANR	1983910	IdentifierDeclStatement	"char * ndir = param ( ""QPID_NAMENODE_DIR"" ) ;"	197:2:5861:5900	1983707	17	True				
ANR	1983911	IdentifierDecl	"* ndir = param ( ""QPID_NAMENODE_DIR"" )"		1983707	0					
ANR	1983912	IdentifierDeclType	char *		1983707	0					
ANR	1983913	Identifier	ndir		1983707	1					
ANR	1983914	AssignmentExpression	"* ndir = param ( ""QPID_NAMENODE_DIR"" )"		1983707	2		=			
ANR	1983915	Identifier	ndir		1983707	0					
ANR	1983916	CallExpression	"param ( ""QPID_NAMENODE_DIR"" )"		1983707	1					
ANR	1983917	Callee	param		1983707	0					
ANR	1983918	Identifier	param		1983707	0					
ANR	1983919	ArgumentList	"""QPID_NAMENODE_DIR"""		1983707	1					
ANR	1983920	Argument	"""QPID_NAMENODE_DIR"""		1983707	0					
ANR	1983921	PrimaryExpression	"""QPID_NAMENODE_DIR"""		1983707	0					
ANR	1983922	IfStatement	if ( ndir != NULL )		1983707	18					
ANR	1983923	Condition	ndir != NULL	198:6:5908:5919	1983707	0	True				
ANR	1983924	EqualityExpression	ndir != NULL		1983707	0		!=			
ANR	1983925	Identifier	ndir		1983707	0					
ANR	1983926	Identifier	NULL		1983707	1					
ANR	1983927	CompoundStatement		31:20:997:997	1983707	1					
ANR	1983928	ExpressionStatement	"writeXMLParam ( ""dfs.name.dir"" , ndir , & xml )"	199:4:5928:5969	1983707	0	True				
ANR	1983929	CallExpression	"writeXMLParam ( ""dfs.name.dir"" , ndir , & xml )"		1983707	0					
ANR	1983930	Callee	writeXMLParam		1983707	0					
ANR	1983931	Identifier	writeXMLParam		1983707	0					
ANR	1983932	ArgumentList	"""dfs.name.dir"""		1983707	1					
ANR	1983933	Argument	"""dfs.name.dir"""		1983707	0					
ANR	1983934	PrimaryExpression	"""dfs.name.dir"""		1983707	0					
ANR	1983935	Argument	ndir		1983707	1					
ANR	1983936	Identifier	ndir		1983707	0					
ANR	1983937	Argument	& xml		1983707	2					
ANR	1983938	UnaryOperationExpression	& xml		1983707	0					
ANR	1983939	UnaryOperator	&		1983707	0					
ANR	1983940	Identifier	xml		1983707	1					
ANR	1983941	ExpressionStatement	m_nameNodeDir = ndir	200:4:5975:5995	1983707	1	True				
ANR	1983942	AssignmentExpression	m_nameNodeDir = ndir		1983707	0		=			
ANR	1983943	Identifier	m_nameNodeDir		1983707	0					
ANR	1983944	Identifier	ndir		1983707	1					
ANR	1983945	ExpressionStatement	free ( ndir )	201:4:6001:6011	1983707	2	True				
ANR	1983946	CallExpression	free ( ndir )		1983707	0					
ANR	1983947	Callee	free		1983707	0					
ANR	1983948	Identifier	free		1983707	0					
ANR	1983949	ArgumentList	ndir		1983707	1					
ANR	1983950	Argument	ndir		1983707	0					
ANR	1983951	Identifier	ndir		1983707	0					
ANR	1983952	IdentifierDeclStatement	"char * ddir = param ( ""QPID_DATANODE_DIR"" ) ;"	204:2:6020:6059	1983707	19	True				
ANR	1983953	IdentifierDecl	"* ddir = param ( ""QPID_DATANODE_DIR"" )"		1983707	0					
ANR	1983954	IdentifierDeclType	char *		1983707	0					
ANR	1983955	Identifier	ddir		1983707	1					
ANR	1983956	AssignmentExpression	"* ddir = param ( ""QPID_DATANODE_DIR"" )"		1983707	2		=			
ANR	1983957	Identifier	ddir		1983707	0					
ANR	1983958	CallExpression	"param ( ""QPID_DATANODE_DIR"" )"		1983707	1					
ANR	1983959	Callee	param		1983707	0					
ANR	1983960	Identifier	param		1983707	0					
ANR	1983961	ArgumentList	"""QPID_DATANODE_DIR"""		1983707	1					
ANR	1983962	Argument	"""QPID_DATANODE_DIR"""		1983707	0					
ANR	1983963	PrimaryExpression	"""QPID_DATANODE_DIR"""		1983707	0					
ANR	1983964	IfStatement	if ( ddir != NULL )		1983707	20					
ANR	1983965	Condition	ddir != NULL	205:6:6067:6078	1983707	0	True				
ANR	1983966	EqualityExpression	ddir != NULL		1983707	0		!=			
ANR	1983967	Identifier	ddir		1983707	0					
ANR	1983968	Identifier	NULL		1983707	1					
ANR	1983969	CompoundStatement		38:20:1156:1156	1983707	1					
ANR	1983970	ExpressionStatement	"writeXMLParam ( ""dfs.data.dir"" , ddir , & xml )"	206:4:6087:6128	1983707	0	True				
ANR	1983971	CallExpression	"writeXMLParam ( ""dfs.data.dir"" , ddir , & xml )"		1983707	0					
ANR	1983972	Callee	writeXMLParam		1983707	0					
ANR	1983973	Identifier	writeXMLParam		1983707	0					
ANR	1983974	ArgumentList	"""dfs.data.dir"""		1983707	1					
ANR	1983975	Argument	"""dfs.data.dir"""		1983707	0					
ANR	1983976	PrimaryExpression	"""dfs.data.dir"""		1983707	0					
ANR	1983977	Argument	ddir		1983707	1					
ANR	1983978	Identifier	ddir		1983707	0					
ANR	1983979	Argument	& xml		1983707	2					
ANR	1983980	UnaryOperationExpression	& xml		1983707	0					
ANR	1983981	UnaryOperator	&		1983707	0					
ANR	1983982	Identifier	xml		1983707	1					
ANR	1983983	ExpressionStatement	free ( ddir )	207:4:6134:6144	1983707	1	True				
ANR	1983984	CallExpression	free ( ddir )		1983707	0					
ANR	1983985	Callee	free		1983707	0					
ANR	1983986	Identifier	free		1983707	0					
ANR	1983987	ArgumentList	ddir		1983707	1					
ANR	1983988	Argument	ddir		1983707	0					
ANR	1983989	Identifier	ddir		1983707	0					
ANR	1983990	IdentifierDeclStatement	"char * dadd = param ( ""QPID_DATANODE_ADDRESS"" ) ;"	210:2:6153:6196	1983707	21	True				
ANR	1983991	IdentifierDecl	"* dadd = param ( ""QPID_DATANODE_ADDRESS"" )"		1983707	0					
ANR	1983992	IdentifierDeclType	char *		1983707	0					
ANR	1983993	Identifier	dadd		1983707	1					
ANR	1983994	AssignmentExpression	"* dadd = param ( ""QPID_DATANODE_ADDRESS"" )"		1983707	2		=			
ANR	1983995	Identifier	dadd		1983707	0					
ANR	1983996	CallExpression	"param ( ""QPID_DATANODE_ADDRESS"" )"		1983707	1					
ANR	1983997	Callee	param		1983707	0					
ANR	1983998	Identifier	param		1983707	0					
ANR	1983999	ArgumentList	"""QPID_DATANODE_ADDRESS"""		1983707	1					
ANR	1984000	Argument	"""QPID_DATANODE_ADDRESS"""		1983707	0					
ANR	1984001	PrimaryExpression	"""QPID_DATANODE_ADDRESS"""		1983707	0					
ANR	1984002	IfStatement	if ( dadd != NULL )		1983707	22					
ANR	1984003	Condition	dadd != NULL	211:6:6204:6215	1983707	0	True				
ANR	1984004	EqualityExpression	dadd != NULL		1983707	0		!=			
ANR	1984005	Identifier	dadd		1983707	0					
ANR	1984006	Identifier	NULL		1983707	1					
ANR	1984007	CompoundStatement		44:20:1293:1293	1983707	1					
ANR	1984008	ExpressionStatement	"writeXMLParam ( ""dfs.datanode.address"" , dadd , & xml )"	212:4:6224:6273	1983707	0	True				
ANR	1984009	CallExpression	"writeXMLParam ( ""dfs.datanode.address"" , dadd , & xml )"		1983707	0					
ANR	1984010	Callee	writeXMLParam		1983707	0					
ANR	1984011	Identifier	writeXMLParam		1983707	0					
ANR	1984012	ArgumentList	"""dfs.datanode.address"""		1983707	1					
ANR	1984013	Argument	"""dfs.datanode.address"""		1983707	0					
ANR	1984014	PrimaryExpression	"""dfs.datanode.address"""		1983707	0					
ANR	1984015	Argument	dadd		1983707	1					
ANR	1984016	Identifier	dadd		1983707	0					
ANR	1984017	Argument	& xml		1983707	2					
ANR	1984018	UnaryOperationExpression	& xml		1983707	0					
ANR	1984019	UnaryOperator	&		1983707	0					
ANR	1984020	Identifier	xml		1983707	1					
ANR	1984021	ExpressionStatement	free ( dadd )	213:4:6279:6289	1983707	1	True				
ANR	1984022	CallExpression	free ( dadd )		1983707	0					
ANR	1984023	Callee	free		1983707	0					
ANR	1984024	Identifier	free		1983707	0					
ANR	1984025	ArgumentList	dadd		1983707	1					
ANR	1984026	Argument	dadd		1983707	0					
ANR	1984027	Identifier	dadd		1983707	0					
ANR	1984028	IdentifierDeclStatement	"char * daddw = param ( ""QPID_DATANODE_WEB"" ) ;"	216:2:6298:6338	1983707	23	True				
ANR	1984029	IdentifierDecl	"* daddw = param ( ""QPID_DATANODE_WEB"" )"		1983707	0					
ANR	1984030	IdentifierDeclType	char *		1983707	0					
ANR	1984031	Identifier	daddw		1983707	1					
ANR	1984032	AssignmentExpression	"* daddw = param ( ""QPID_DATANODE_WEB"" )"		1983707	2		=			
ANR	1984033	Identifier	daddw		1983707	0					
ANR	1984034	CallExpression	"param ( ""QPID_DATANODE_WEB"" )"		1983707	1					
ANR	1984035	Callee	param		1983707	0					
ANR	1984036	Identifier	param		1983707	0					
ANR	1984037	ArgumentList	"""QPID_DATANODE_WEB"""		1983707	1					
ANR	1984038	Argument	"""QPID_DATANODE_WEB"""		1983707	0					
ANR	1984039	PrimaryExpression	"""QPID_DATANODE_WEB"""		1983707	0					
ANR	1984040	IfStatement	if ( daddw != NULL )		1983707	24					
ANR	1984041	Condition	daddw != NULL	217:6:6346:6358	1983707	0	True				
ANR	1984042	EqualityExpression	daddw != NULL		1983707	0		!=			
ANR	1984043	Identifier	daddw		1983707	0					
ANR	1984044	Identifier	NULL		1983707	1					
ANR	1984045	CompoundStatement		50:21:1436:1436	1983707	1					
ANR	1984046	ExpressionStatement	"writeXMLParam ( ""dfs.datanode.http.address"" , daddw , & xml )"	218:4:6367:6422	1983707	0	True				
ANR	1984047	CallExpression	"writeXMLParam ( ""dfs.datanode.http.address"" , daddw , & xml )"		1983707	0					
ANR	1984048	Callee	writeXMLParam		1983707	0					
ANR	1984049	Identifier	writeXMLParam		1983707	0					
ANR	1984050	ArgumentList	"""dfs.datanode.http.address"""		1983707	1					
ANR	1984051	Argument	"""dfs.datanode.http.address"""		1983707	0					
ANR	1984052	PrimaryExpression	"""dfs.datanode.http.address"""		1983707	0					
ANR	1984053	Argument	daddw		1983707	1					
ANR	1984054	Identifier	daddw		1983707	0					
ANR	1984055	Argument	& xml		1983707	2					
ANR	1984056	UnaryOperationExpression	& xml		1983707	0					
ANR	1984057	UnaryOperator	&		1983707	0					
ANR	1984058	Identifier	xml		1983707	1					
ANR	1984059	ExpressionStatement	free ( daddw )	219:4:6428:6439	1983707	1	True				
ANR	1984060	CallExpression	free ( daddw )		1983707	0					
ANR	1984061	Callee	free		1983707	0					
ANR	1984062	Identifier	free		1983707	0					
ANR	1984063	ArgumentList	daddw		1983707	1					
ANR	1984064	Argument	daddw		1983707	0					
ANR	1984065	Identifier	daddw		1983707	0					
ANR	1984066	IdentifierDeclStatement	"char * nnaddw = param ( ""QPID_NAMENODE_WEB"" ) ;"	222:2:6448:6489	1983707	25	True				
ANR	1984067	IdentifierDecl	"* nnaddw = param ( ""QPID_NAMENODE_WEB"" )"		1983707	0					
ANR	1984068	IdentifierDeclType	char *		1983707	0					
ANR	1984069	Identifier	nnaddw		1983707	1					
ANR	1984070	AssignmentExpression	"* nnaddw = param ( ""QPID_NAMENODE_WEB"" )"		1983707	2		=			
ANR	1984071	Identifier	nnaddw		1983707	0					
ANR	1984072	CallExpression	"param ( ""QPID_NAMENODE_WEB"" )"		1983707	1					
ANR	1984073	Callee	param		1983707	0					
ANR	1984074	Identifier	param		1983707	0					
ANR	1984075	ArgumentList	"""QPID_NAMENODE_WEB"""		1983707	1					
ANR	1984076	Argument	"""QPID_NAMENODE_WEB"""		1983707	0					
ANR	1984077	PrimaryExpression	"""QPID_NAMENODE_WEB"""		1983707	0					
ANR	1984078	IfStatement	if ( nnaddw != NULL )		1983707	26					
ANR	1984079	Condition	nnaddw != NULL	223:6:6497:6510	1983707	0	True				
ANR	1984080	EqualityExpression	nnaddw != NULL		1983707	0		!=			
ANR	1984081	Identifier	nnaddw		1983707	0					
ANR	1984082	Identifier	NULL		1983707	1					
ANR	1984083	CompoundStatement		56:22:1588:1588	1983707	1					
ANR	1984084	ExpressionStatement	"writeXMLParam ( ""dfs.http.address"" , nnaddw , & xml )"	224:4:6519:6566	1983707	0	True				
ANR	1984085	CallExpression	"writeXMLParam ( ""dfs.http.address"" , nnaddw , & xml )"		1983707	0					
ANR	1984086	Callee	writeXMLParam		1983707	0					
ANR	1984087	Identifier	writeXMLParam		1983707	0					
ANR	1984088	ArgumentList	"""dfs.http.address"""		1983707	1					
ANR	1984089	Argument	"""dfs.http.address"""		1983707	0					
ANR	1984090	PrimaryExpression	"""dfs.http.address"""		1983707	0					
ANR	1984091	Argument	nnaddw		1983707	1					
ANR	1984092	Identifier	nnaddw		1983707	0					
ANR	1984093	Argument	& xml		1983707	2					
ANR	1984094	UnaryOperationExpression	& xml		1983707	0					
ANR	1984095	UnaryOperator	&		1983707	0					
ANR	1984096	Identifier	xml		1983707	1					
ANR	1984097	ExpressionStatement	free ( nnaddw )	225:4:6572:6584	1983707	1	True				
ANR	1984098	CallExpression	free ( nnaddw )		1983707	0					
ANR	1984099	Callee	free		1983707	0					
ANR	1984100	Identifier	free		1983707	0					
ANR	1984101	ArgumentList	nnaddw		1983707	1					
ANR	1984102	Argument	nnaddw		1983707	0					
ANR	1984103	Identifier	nnaddw		1983707	0					
ANR	1984104	IdentifierDeclStatement	"char * rep = param ( ""QPID_REPLICATION"" ) ;"	228:2:6593:6630	1983707	27	True				
ANR	1984105	IdentifierDecl	"* rep = param ( ""QPID_REPLICATION"" )"		1983707	0					
ANR	1984106	IdentifierDeclType	char *		1983707	0					
ANR	1984107	Identifier	rep		1983707	1					
ANR	1984108	AssignmentExpression	"* rep = param ( ""QPID_REPLICATION"" )"		1983707	2		=			
ANR	1984109	Identifier	rep		1983707	0					
ANR	1984110	CallExpression	"param ( ""QPID_REPLICATION"" )"		1983707	1					
ANR	1984111	Callee	param		1983707	0					
ANR	1984112	Identifier	param		1983707	0					
ANR	1984113	ArgumentList	"""QPID_REPLICATION"""		1983707	1					
ANR	1984114	Argument	"""QPID_REPLICATION"""		1983707	0					
ANR	1984115	PrimaryExpression	"""QPID_REPLICATION"""		1983707	0					
ANR	1984116	IfStatement	if ( rep != NULL )		1983707	28					
ANR	1984117	Condition	rep != NULL	229:6:6638:6648	1983707	0	True				
ANR	1984118	EqualityExpression	rep != NULL		1983707	0		!=			
ANR	1984119	Identifier	rep		1983707	0					
ANR	1984120	Identifier	NULL		1983707	1					
ANR	1984121	CompoundStatement		62:19:1726:1726	1983707	1					
ANR	1984122	ExpressionStatement	"writeXMLParam ( ""dfs.replication"" , rep , & xml )"	230:4:6657:6700	1983707	0	True				
ANR	1984123	CallExpression	"writeXMLParam ( ""dfs.replication"" , rep , & xml )"		1983707	0					
ANR	1984124	Callee	writeXMLParam		1983707	0					
ANR	1984125	Identifier	writeXMLParam		1983707	0					
ANR	1984126	ArgumentList	"""dfs.replication"""		1983707	1					
ANR	1984127	Argument	"""dfs.replication"""		1983707	0					
ANR	1984128	PrimaryExpression	"""dfs.replication"""		1983707	0					
ANR	1984129	Argument	rep		1983707	1					
ANR	1984130	Identifier	rep		1983707	0					
ANR	1984131	Argument	& xml		1983707	2					
ANR	1984132	UnaryOperationExpression	& xml		1983707	0					
ANR	1984133	UnaryOperator	&		1983707	0					
ANR	1984134	Identifier	xml		1983707	1					
ANR	1984135	ExpressionStatement	free ( rep )	231:4:6706:6715	1983707	1	True				
ANR	1984136	CallExpression	free ( rep )		1983707	0					
ANR	1984137	Callee	free		1983707	0					
ANR	1984138	Identifier	free		1983707	0					
ANR	1984139	ArgumentList	rep		1983707	1					
ANR	1984140	Argument	rep		1983707	0					
ANR	1984141	Identifier	rep		1983707	0					
ANR	1984142	IdentifierDeclStatement	"char * qpid_allow = param ( ""QPID_ALLOW"" ) ;"	235:2:6762:6800	1983707	29	True				
ANR	1984143	IdentifierDecl	"* qpid_allow = param ( ""QPID_ALLOW"" )"		1983707	0					
ANR	1984144	IdentifierDeclType	char *		1983707	0					
ANR	1984145	Identifier	qpid_allow		1983707	1					
ANR	1984146	AssignmentExpression	"* qpid_allow = param ( ""QPID_ALLOW"" )"		1983707	2		=			
ANR	1984147	Identifier	qpid_allow		1983707	0					
ANR	1984148	CallExpression	"param ( ""QPID_ALLOW"" )"		1983707	1					
ANR	1984149	Callee	param		1983707	0					
ANR	1984150	Identifier	param		1983707	0					
ANR	1984151	ArgumentList	"""QPID_ALLOW"""		1983707	1					
ANR	1984152	Argument	"""QPID_ALLOW"""		1983707	0					
ANR	1984153	PrimaryExpression	"""QPID_ALLOW"""		1983707	0					
ANR	1984154	IfStatement	if ( qpid_allow != NULL )		1983707	30					
ANR	1984155	Condition	qpid_allow != NULL	236:6:6808:6825	1983707	0	True				
ANR	1984156	EqualityExpression	qpid_allow != NULL		1983707	0		!=			
ANR	1984157	Identifier	qpid_allow		1983707	0					
ANR	1984158	Identifier	NULL		1983707	1					
ANR	1984159	CompoundStatement		69:26:1903:1903	1983707	1					
ANR	1984160	ExpressionStatement	"writeXMLParam ( ""dfs.net.allow"" , qpid_allow , & xml )"	237:4:6834:6882	1983707	0	True				
ANR	1984161	CallExpression	"writeXMLParam ( ""dfs.net.allow"" , qpid_allow , & xml )"		1983707	0					
ANR	1984162	Callee	writeXMLParam		1983707	0					
ANR	1984163	Identifier	writeXMLParam		1983707	0					
ANR	1984164	ArgumentList	"""dfs.net.allow"""		1983707	1					
ANR	1984165	Argument	"""dfs.net.allow"""		1983707	0					
ANR	1984166	PrimaryExpression	"""dfs.net.allow"""		1983707	0					
ANR	1984167	Argument	qpid_allow		1983707	1					
ANR	1984168	Identifier	qpid_allow		1983707	0					
ANR	1984169	Argument	& xml		1983707	2					
ANR	1984170	UnaryOperationExpression	& xml		1983707	0					
ANR	1984171	UnaryOperator	&		1983707	0					
ANR	1984172	Identifier	xml		1983707	1					
ANR	1984173	ExpressionStatement	free ( qpid_allow )	238:4:6888:6904	1983707	1	True				
ANR	1984174	CallExpression	free ( qpid_allow )		1983707	0					
ANR	1984175	Callee	free		1983707	0					
ANR	1984176	Identifier	free		1983707	0					
ANR	1984177	ArgumentList	qpid_allow		1983707	1					
ANR	1984178	Argument	qpid_allow		1983707	0					
ANR	1984179	Identifier	qpid_allow		1983707	0					
ANR	1984180	ElseStatement	else		1983707	0					
ANR	1984181	CompoundStatement		85:4:2302:2357	1983707	0					
ANR	1984182	IdentifierDeclStatement	StringList allow_list ;	240:4:6921:6942	1983707	0	True				
ANR	1984183	IdentifierDecl	allow_list		1983707	0					
ANR	1984184	IdentifierDeclType	StringList		1983707	0					
ANR	1984185	Identifier	allow_list		1983707	1					
ANR	1984186	ExpressionStatement	"qpid_allow = param ( ""HOSTALLOW_READ"" )"	241:4:6948:6984	1983707	1	True				
ANR	1984187	AssignmentExpression	"qpid_allow = param ( ""HOSTALLOW_READ"" )"		1983707	0		=			
ANR	1984188	Identifier	qpid_allow		1983707	0					
ANR	1984189	CallExpression	"param ( ""HOSTALLOW_READ"" )"		1983707	1					
ANR	1984190	Callee	param		1983707	0					
ANR	1984191	Identifier	param		1983707	0					
ANR	1984192	ArgumentList	"""HOSTALLOW_READ"""		1983707	1					
ANR	1984193	Argument	"""HOSTALLOW_READ"""		1983707	0					
ANR	1984194	PrimaryExpression	"""HOSTALLOW_READ"""		1983707	0					
ANR	1984195	IfStatement	if ( qpid_allow != NULL )		1983707	2					
ANR	1984196	Condition	qpid_allow != NULL	242:8:6994:7011	1983707	0	True				
ANR	1984197	EqualityExpression	qpid_allow != NULL		1983707	0		!=			
ANR	1984198	Identifier	qpid_allow		1983707	0					
ANR	1984199	Identifier	NULL		1983707	1					
ANR	1984200	CompoundStatement		75:28:2089:2089	1983707	1					
ANR	1984201	ExpressionStatement	allow_list . append ( qpid_allow )	243:6:7022:7051	1983707	0	True				
ANR	1984202	CallExpression	allow_list . append ( qpid_allow )		1983707	0					
ANR	1984203	Callee	allow_list . append		1983707	0					
ANR	1984204	MemberAccess	allow_list . append		1983707	0					
ANR	1984205	Identifier	allow_list		1983707	0					
ANR	1984206	Identifier	append		1983707	1					
ANR	1984207	ArgumentList	qpid_allow		1983707	1					
ANR	1984208	Argument	qpid_allow		1983707	0					
ANR	1984209	Identifier	qpid_allow		1983707	0					
ANR	1984210	ExpressionStatement	free ( qpid_allow )	244:6:7059:7075	1983707	1	True				
ANR	1984211	CallExpression	free ( qpid_allow )		1983707	0					
ANR	1984212	Callee	free		1983707	0					
ANR	1984213	Identifier	free		1983707	0					
ANR	1984214	ArgumentList	qpid_allow		1983707	1					
ANR	1984215	Argument	qpid_allow		1983707	0					
ANR	1984216	Identifier	qpid_allow		1983707	0					
ANR	1984217	ExpressionStatement	"qpid_allow = param ( ""HOSTALLOW_WRITE"" )"	247:4:7088:7125	1983707	3	True				
ANR	1984218	AssignmentExpression	"qpid_allow = param ( ""HOSTALLOW_WRITE"" )"		1983707	0		=			
ANR	1984219	Identifier	qpid_allow		1983707	0					
ANR	1984220	CallExpression	"param ( ""HOSTALLOW_WRITE"" )"		1983707	1					
ANR	1984221	Callee	param		1983707	0					
ANR	1984222	Identifier	param		1983707	0					
ANR	1984223	ArgumentList	"""HOSTALLOW_WRITE"""		1983707	1					
ANR	1984224	Argument	"""HOSTALLOW_WRITE"""		1983707	0					
ANR	1984225	PrimaryExpression	"""HOSTALLOW_WRITE"""		1983707	0					
ANR	1984226	IfStatement	if ( qpid_allow != NULL )		1983707	4					
ANR	1984227	Condition	qpid_allow != NULL	248:7:7134:7151	1983707	0	True				
ANR	1984228	EqualityExpression	qpid_allow != NULL		1983707	0		!=			
ANR	1984229	Identifier	qpid_allow		1983707	0					
ANR	1984230	Identifier	NULL		1983707	1					
ANR	1984231	CompoundStatement		81:27:2229:2229	1983707	1					
ANR	1984232	ExpressionStatement	allow_list . append ( qpid_allow )	249:6:7162:7191	1983707	0	True				
ANR	1984233	CallExpression	allow_list . append ( qpid_allow )		1983707	0					
ANR	1984234	Callee	allow_list . append		1983707	0					
ANR	1984235	MemberAccess	allow_list . append		1983707	0					
ANR	1984236	Identifier	allow_list		1983707	0					
ANR	1984237	Identifier	append		1983707	1					
ANR	1984238	ArgumentList	qpid_allow		1983707	1					
ANR	1984239	Argument	qpid_allow		1983707	0					
ANR	1984240	Identifier	qpid_allow		1983707	0					
ANR	1984241	ExpressionStatement	free ( qpid_allow )	250:6:7199:7215	1983707	1	True				
ANR	1984242	CallExpression	free ( qpid_allow )		1983707	0					
ANR	1984243	Callee	free		1983707	0					
ANR	1984244	Identifier	free		1983707	0					
ANR	1984245	ArgumentList	qpid_allow		1983707	1					
ANR	1984246	Argument	qpid_allow		1983707	0					
ANR	1984247	Identifier	qpid_allow		1983707	0					
ANR	1984248	IdentifierDeclStatement	"char * tmp_str = allow_list . print_to_delimed_string ( "","" ) ;"	252:4:7227:7282	1983707	5	True				
ANR	1984249	IdentifierDecl	"* tmp_str = allow_list . print_to_delimed_string ( "","" )"		1983707	0					
ANR	1984250	IdentifierDeclType	char *		1983707	0					
ANR	1984251	Identifier	tmp_str		1983707	1					
ANR	1984252	AssignmentExpression	"* tmp_str = allow_list . print_to_delimed_string ( "","" )"		1983707	2		=			
ANR	1984253	Identifier	tmp_str		1983707	0					
ANR	1984254	CallExpression	"allow_list . print_to_delimed_string ( "","" )"		1983707	1					
ANR	1984255	Callee	allow_list . print_to_delimed_string		1983707	0					
ANR	1984256	MemberAccess	allow_list . print_to_delimed_string		1983707	0					
ANR	1984257	Identifier	allow_list		1983707	0					
ANR	1984258	Identifier	print_to_delimed_string		1983707	1					
ANR	1984259	ArgumentList	""","""		1983707	1					
ANR	1984260	Argument	""","""		1983707	0					
ANR	1984261	PrimaryExpression	""","""		1983707	0					
ANR	1984262	ExpressionStatement	ASSERT ( tmp_str != NULL )	253:4:7288:7312	1983707	6	True				
ANR	1984263	CallExpression	ASSERT ( tmp_str != NULL )		1983707	0					
ANR	1984264	Callee	ASSERT		1983707	0					
ANR	1984265	Identifier	ASSERT		1983707	0					
ANR	1984266	ArgumentList	tmp_str != NULL		1983707	1					
ANR	1984267	Argument	tmp_str != NULL		1983707	0					
ANR	1984268	EqualityExpression	tmp_str != NULL		1983707	0		!=			
ANR	1984269	Identifier	tmp_str		1983707	0					
ANR	1984270	Identifier	NULL		1983707	1					
ANR	1984271	ExpressionStatement	"writeXMLParam ( ""dfs.net.allow"" , tmp_str , & xml )"	254:4:7318:7364	1983707	7	True				
ANR	1984272	CallExpression	"writeXMLParam ( ""dfs.net.allow"" , tmp_str , & xml )"		1983707	0					
ANR	1984273	Callee	writeXMLParam		1983707	0					
ANR	1984274	Identifier	writeXMLParam		1983707	0					
ANR	1984275	ArgumentList	"""dfs.net.allow"""		1983707	1					
ANR	1984276	Argument	"""dfs.net.allow"""		1983707	0					
ANR	1984277	PrimaryExpression	"""dfs.net.allow"""		1983707	0					
ANR	1984278	Argument	tmp_str		1983707	1					
ANR	1984279	Identifier	tmp_str		1983707	0					
ANR	1984280	Argument	& xml		1983707	2					
ANR	1984281	UnaryOperationExpression	& xml		1983707	0					
ANR	1984282	UnaryOperator	&		1983707	0					
ANR	1984283	Identifier	xml		1983707	1					
ANR	1984284	ExpressionStatement	free ( tmp_str )	255:4:7370:7383	1983707	8	True				
ANR	1984285	CallExpression	free ( tmp_str )		1983707	0					
ANR	1984286	Callee	free		1983707	0					
ANR	1984287	Identifier	free		1983707	0					
ANR	1984288	ArgumentList	tmp_str		1983707	1					
ANR	1984289	Argument	tmp_str		1983707	0					
ANR	1984290	Identifier	tmp_str		1983707	0					
ANR	1984291	IdentifierDeclStatement	"char * qpid_deny = param ( ""QPID_DENY"" ) ;"	258:2:7392:7428	1983707	31	True				
ANR	1984292	IdentifierDecl	"* qpid_deny = param ( ""QPID_DENY"" )"		1983707	0					
ANR	1984293	IdentifierDeclType	char *		1983707	0					
ANR	1984294	Identifier	qpid_deny		1983707	1					
ANR	1984295	AssignmentExpression	"* qpid_deny = param ( ""QPID_DENY"" )"		1983707	2		=			
ANR	1984296	Identifier	qpid_deny		1983707	0					
ANR	1984297	CallExpression	"param ( ""QPID_DENY"" )"		1983707	1					
ANR	1984298	Callee	param		1983707	0					
ANR	1984299	Identifier	param		1983707	0					
ANR	1984300	ArgumentList	"""QPID_DENY"""		1983707	1					
ANR	1984301	Argument	"""QPID_DENY"""		1983707	0					
ANR	1984302	PrimaryExpression	"""QPID_DENY"""		1983707	0					
ANR	1984303	IfStatement	if ( qpid_deny != NULL )		1983707	32					
ANR	1984304	Condition	qpid_deny != NULL	259:6:7436:7452	1983707	0	True				
ANR	1984305	EqualityExpression	qpid_deny != NULL		1983707	0		!=			
ANR	1984306	Identifier	qpid_deny		1983707	0					
ANR	1984307	Identifier	NULL		1983707	1					
ANR	1984308	CompoundStatement		92:25:2530:2530	1983707	1					
ANR	1984309	ExpressionStatement	"writeXMLParam ( ""dfs.net.deny"" , qpid_deny , & xml )"	260:4:7461:7507	1983707	0	True				
ANR	1984310	CallExpression	"writeXMLParam ( ""dfs.net.deny"" , qpid_deny , & xml )"		1983707	0					
ANR	1984311	Callee	writeXMLParam		1983707	0					
ANR	1984312	Identifier	writeXMLParam		1983707	0					
ANR	1984313	ArgumentList	"""dfs.net.deny"""		1983707	1					
ANR	1984314	Argument	"""dfs.net.deny"""		1983707	0					
ANR	1984315	PrimaryExpression	"""dfs.net.deny"""		1983707	0					
ANR	1984316	Argument	qpid_deny		1983707	1					
ANR	1984317	Identifier	qpid_deny		1983707	0					
ANR	1984318	Argument	& xml		1983707	2					
ANR	1984319	UnaryOperationExpression	& xml		1983707	0					
ANR	1984320	UnaryOperator	&		1983707	0					
ANR	1984321	Identifier	xml		1983707	1					
ANR	1984322	ExpressionStatement	free ( qpid_deny )	261:4:7513:7528	1983707	1	True				
ANR	1984323	CallExpression	free ( qpid_deny )		1983707	0					
ANR	1984324	Callee	free		1983707	0					
ANR	1984325	Identifier	free		1983707	0					
ANR	1984326	ArgumentList	qpid_deny		1983707	1					
ANR	1984327	Argument	qpid_deny		1983707	0					
ANR	1984328	Identifier	qpid_deny		1983707	0					
ANR	1984329	ElseStatement	else		1983707	0					
ANR	1984330	CompoundStatement		107:4:2913:2967	1983707	0					
ANR	1984331	IdentifierDeclStatement	StringList deny_list ;	263:4:7545:7565	1983707	0	True				
ANR	1984332	IdentifierDecl	deny_list		1983707	0					
ANR	1984333	IdentifierDeclType	StringList		1983707	0					
ANR	1984334	Identifier	deny_list		1983707	1					
ANR	1984335	ExpressionStatement	"qpid_deny = param ( ""HOSTDENY_READ"" )"	264:4:7571:7605	1983707	1	True				
ANR	1984336	AssignmentExpression	"qpid_deny = param ( ""HOSTDENY_READ"" )"		1983707	0		=			
ANR	1984337	Identifier	qpid_deny		1983707	0					
ANR	1984338	CallExpression	"param ( ""HOSTDENY_READ"" )"		1983707	1					
ANR	1984339	Callee	param		1983707	0					
ANR	1984340	Identifier	param		1983707	0					
ANR	1984341	ArgumentList	"""HOSTDENY_READ"""		1983707	1					
ANR	1984342	Argument	"""HOSTDENY_READ"""		1983707	0					
ANR	1984343	PrimaryExpression	"""HOSTDENY_READ"""		1983707	0					
ANR	1984344	IfStatement	if ( qpid_deny != NULL )		1983707	2					
ANR	1984345	Condition	qpid_deny != NULL	265:8:7615:7631	1983707	0	True				
ANR	1984346	EqualityExpression	qpid_deny != NULL		1983707	0		!=			
ANR	1984347	Identifier	qpid_deny		1983707	0					
ANR	1984348	Identifier	NULL		1983707	1					
ANR	1984349	CompoundStatement		98:27:2709:2709	1983707	1					
ANR	1984350	ExpressionStatement	deny_list . append ( qpid_deny )	266:6:7642:7669	1983707	0	True				
ANR	1984351	CallExpression	deny_list . append ( qpid_deny )		1983707	0					
ANR	1984352	Callee	deny_list . append		1983707	0					
ANR	1984353	MemberAccess	deny_list . append		1983707	0					
ANR	1984354	Identifier	deny_list		1983707	0					
ANR	1984355	Identifier	append		1983707	1					
ANR	1984356	ArgumentList	qpid_deny		1983707	1					
ANR	1984357	Argument	qpid_deny		1983707	0					
ANR	1984358	Identifier	qpid_deny		1983707	0					
ANR	1984359	ExpressionStatement	free ( qpid_deny )	267:6:7677:7692	1983707	1	True				
ANR	1984360	CallExpression	free ( qpid_deny )		1983707	0					
ANR	1984361	Callee	free		1983707	0					
ANR	1984362	Identifier	free		1983707	0					
ANR	1984363	ArgumentList	qpid_deny		1983707	1					
ANR	1984364	Argument	qpid_deny		1983707	0					
ANR	1984365	Identifier	qpid_deny		1983707	0					
ANR	1984366	ExpressionStatement	"qpid_deny = param ( ""HOSTDENY_WRITE"" )"	269:4:7704:7739	1983707	3	True				
ANR	1984367	AssignmentExpression	"qpid_deny = param ( ""HOSTDENY_WRITE"" )"		1983707	0		=			
ANR	1984368	Identifier	qpid_deny		1983707	0					
ANR	1984369	CallExpression	"param ( ""HOSTDENY_WRITE"" )"		1983707	1					
ANR	1984370	Callee	param		1983707	0					
ANR	1984371	Identifier	param		1983707	0					
ANR	1984372	ArgumentList	"""HOSTDENY_WRITE"""		1983707	1					
ANR	1984373	Argument	"""HOSTDENY_WRITE"""		1983707	0					
ANR	1984374	PrimaryExpression	"""HOSTDENY_WRITE"""		1983707	0					
ANR	1984375	IfStatement	if ( qpid_deny != NULL )		1983707	4					
ANR	1984376	Condition	qpid_deny != NULL	270:7:7748:7764	1983707	0	True				
ANR	1984377	EqualityExpression	qpid_deny != NULL		1983707	0		!=			
ANR	1984378	Identifier	qpid_deny		1983707	0					
ANR	1984379	Identifier	NULL		1983707	1					
ANR	1984380	CompoundStatement		103:26:2842:2842	1983707	1					
ANR	1984381	ExpressionStatement	deny_list . append ( qpid_deny )	271:6:7775:7802	1983707	0	True				
ANR	1984382	CallExpression	deny_list . append ( qpid_deny )		1983707	0					
ANR	1984383	Callee	deny_list . append		1983707	0					
ANR	1984384	MemberAccess	deny_list . append		1983707	0					
ANR	1984385	Identifier	deny_list		1983707	0					
ANR	1984386	Identifier	append		1983707	1					
ANR	1984387	ArgumentList	qpid_deny		1983707	1					
ANR	1984388	Argument	qpid_deny		1983707	0					
ANR	1984389	Identifier	qpid_deny		1983707	0					
ANR	1984390	ExpressionStatement	free ( qpid_deny )	272:6:7811:7826	1983707	1	True				
ANR	1984391	CallExpression	free ( qpid_deny )		1983707	0					
ANR	1984392	Callee	free		1983707	0					
ANR	1984393	Identifier	free		1983707	0					
ANR	1984394	ArgumentList	qpid_deny		1983707	1					
ANR	1984395	Argument	qpid_deny		1983707	0					
ANR	1984396	Identifier	qpid_deny		1983707	0					
ANR	1984397	IdentifierDeclStatement	"char * tmp_str = deny_list . print_to_delimed_string ( "","" ) ;"	274:4:7838:7892	1983707	5	True				
ANR	1984398	IdentifierDecl	"* tmp_str = deny_list . print_to_delimed_string ( "","" )"		1983707	0					
ANR	1984399	IdentifierDeclType	char *		1983707	0					
ANR	1984400	Identifier	tmp_str		1983707	1					
ANR	1984401	AssignmentExpression	"* tmp_str = deny_list . print_to_delimed_string ( "","" )"		1983707	2		=			
ANR	1984402	Identifier	tmp_str		1983707	0					
ANR	1984403	CallExpression	"deny_list . print_to_delimed_string ( "","" )"		1983707	1					
ANR	1984404	Callee	deny_list . print_to_delimed_string		1983707	0					
ANR	1984405	MemberAccess	deny_list . print_to_delimed_string		1983707	0					
ANR	1984406	Identifier	deny_list		1983707	0					
ANR	1984407	Identifier	print_to_delimed_string		1983707	1					
ANR	1984408	ArgumentList	""","""		1983707	1					
ANR	1984409	Argument	""","""		1983707	0					
ANR	1984410	PrimaryExpression	""","""		1983707	0					
ANR	1984411	ExpressionStatement	ASSERT ( tmp_str != NULL )	275:4:7898:7922	1983707	6	True				
ANR	1984412	CallExpression	ASSERT ( tmp_str != NULL )		1983707	0					
ANR	1984413	Callee	ASSERT		1983707	0					
ANR	1984414	Identifier	ASSERT		1983707	0					
ANR	1984415	ArgumentList	tmp_str != NULL		1983707	1					
ANR	1984416	Argument	tmp_str != NULL		1983707	0					
ANR	1984417	EqualityExpression	tmp_str != NULL		1983707	0		!=			
ANR	1984418	Identifier	tmp_str		1983707	0					
ANR	1984419	Identifier	NULL		1983707	1					
ANR	1984420	ExpressionStatement	"writeXMLParam ( ""dfs.net.deny"" , tmp_str , & xml )"	276:4:7928:7973	1983707	7	True				
ANR	1984421	CallExpression	"writeXMLParam ( ""dfs.net.deny"" , tmp_str , & xml )"		1983707	0					
ANR	1984422	Callee	writeXMLParam		1983707	0					
ANR	1984423	Identifier	writeXMLParam		1983707	0					
ANR	1984424	ArgumentList	"""dfs.net.deny"""		1983707	1					
ANR	1984425	Argument	"""dfs.net.deny"""		1983707	0					
ANR	1984426	PrimaryExpression	"""dfs.net.deny"""		1983707	0					
ANR	1984427	Argument	tmp_str		1983707	1					
ANR	1984428	Identifier	tmp_str		1983707	0					
ANR	1984429	Argument	& xml		1983707	2					
ANR	1984430	UnaryOperationExpression	& xml		1983707	0					
ANR	1984431	UnaryOperator	&		1983707	0					
ANR	1984432	Identifier	xml		1983707	1					
ANR	1984433	ExpressionStatement	free ( tmp_str )	277:4:7979:7992	1983707	8	True				
ANR	1984434	CallExpression	free ( tmp_str )		1983707	0					
ANR	1984435	Callee	free		1983707	0					
ANR	1984436	Identifier	free		1983707	0					
ANR	1984437	ArgumentList	tmp_str		1983707	1					
ANR	1984438	Argument	tmp_str		1983707	0					
ANR	1984439	Identifier	tmp_str		1983707	0					
ANR	1984440	ExpressionStatement	"writeXMLParam ( ""dfs.namenode.plugins"" , ""edu.wisc.cs.condor.NameNodeAds"" , & xml )"	281:2:8040:8117	1983707	33	True				
ANR	1984441	CallExpression	"writeXMLParam ( ""dfs.namenode.plugins"" , ""edu.wisc.cs.condor.NameNodeAds"" , & xml )"		1983707	0					
ANR	1984442	Callee	writeXMLParam		1983707	0					
ANR	1984443	Identifier	writeXMLParam		1983707	0					
ANR	1984444	ArgumentList	"""dfs.namenode.plugins"""		1983707	1					
ANR	1984445	Argument	"""dfs.namenode.plugins"""		1983707	0					
ANR	1984446	PrimaryExpression	"""dfs.namenode.plugins"""		1983707	0					
ANR	1984447	Argument	"""edu.wisc.cs.condor.NameNodeAds"""		1983707	1					
ANR	1984448	PrimaryExpression	"""edu.wisc.cs.condor.NameNodeAds"""		1983707	0					
ANR	1984449	Argument	& xml		1983707	2					
ANR	1984450	UnaryOperationExpression	& xml		1983707	0					
ANR	1984451	UnaryOperator	&		1983707	0					
ANR	1984452	Identifier	xml		1983707	1					
ANR	1984453	ExpressionStatement	"writeXMLParam ( ""dfs.datanode.plugins"" , ""edu.wisc.cs.condor.DataNodeAds"" , & xml )"	282:2:8121:8198	1983707	34	True				
ANR	1984454	CallExpression	"writeXMLParam ( ""dfs.datanode.plugins"" , ""edu.wisc.cs.condor.DataNodeAds"" , & xml )"		1983707	0					
ANR	1984455	Callee	writeXMLParam		1983707	0					
ANR	1984456	Identifier	writeXMLParam		1983707	0					
ANR	1984457	ArgumentList	"""dfs.datanode.plugins"""		1983707	1					
ANR	1984458	Argument	"""dfs.datanode.plugins"""		1983707	0					
ANR	1984459	PrimaryExpression	"""dfs.datanode.plugins"""		1983707	0					
ANR	1984460	Argument	"""edu.wisc.cs.condor.DataNodeAds"""		1983707	1					
ANR	1984461	PrimaryExpression	"""edu.wisc.cs.condor.DataNodeAds"""		1983707	0					
ANR	1984462	Argument	& xml		1983707	2					
ANR	1984463	UnaryOperationExpression	& xml		1983707	0					
ANR	1984464	UnaryOperator	&		1983707	0					
ANR	1984465	Identifier	xml		1983707	1					
ANR	1984466	ExpressionStatement	"xml . append ( ""</configuration>"" )"	284:2:8203:8233	1983707	35	True				
ANR	1984467	CallExpression	"xml . append ( ""</configuration>"" )"		1983707	0					
ANR	1984468	Callee	xml . append		1983707	0					
ANR	1984469	MemberAccess	xml . append		1983707	0					
ANR	1984470	Identifier	xml		1983707	0					
ANR	1984471	Identifier	append		1983707	1					
ANR	1984472	ArgumentList	"""</configuration>"""		1983707	1					
ANR	1984473	Argument	"""</configuration>"""		1983707	0					
ANR	1984474	PrimaryExpression	"""</configuration>"""		1983707	0					
ANR	1984475	IdentifierDeclStatement	char * str = xml . print_to_delimed_string ( NULL ) ;	286:2:8238:8283	1983707	36	True				
ANR	1984476	IdentifierDecl	* str = xml . print_to_delimed_string ( NULL )		1983707	0					
ANR	1984477	IdentifierDeclType	char *		1983707	0					
ANR	1984478	Identifier	str		1983707	1					
ANR	1984479	AssignmentExpression	* str = xml . print_to_delimed_string ( NULL )		1983707	2		=			
ANR	1984480	Identifier	str		1983707	0					
ANR	1984481	CallExpression	xml . print_to_delimed_string ( NULL )		1983707	1					
ANR	1984482	Callee	xml . print_to_delimed_string		1983707	0					
ANR	1984483	MemberAccess	xml . print_to_delimed_string		1983707	0					
ANR	1984484	Identifier	xml		1983707	0					
ANR	1984485	Identifier	print_to_delimed_string		1983707	1					
ANR	1984486	ArgumentList	NULL		1983707	1					
ANR	1984487	Argument	NULL		1983707	0					
ANR	1984488	Identifier	NULL		1983707	0					
ANR	1984489	ExpressionStatement	ASSERT ( str != NULL )	287:2:8287:8306	1983707	37	True				
ANR	1984490	CallExpression	ASSERT ( str != NULL )		1983707	0					
ANR	1984491	Callee	ASSERT		1983707	0					
ANR	1984492	Identifier	ASSERT		1983707	0					
ANR	1984493	ArgumentList	str != NULL		1983707	1					
ANR	1984494	Argument	str != NULL		1983707	0					
ANR	1984495	EqualityExpression	str != NULL		1983707	0		!=			
ANR	1984496	Identifier	str		1983707	0					
ANR	1984497	Identifier	NULL		1983707	1					
ANR	1984498	IdentifierDeclStatement	"int len = full_write ( fd , str , strlen ( str ) ) ;"	288:2:8310:8352	1983707	38	True				
ANR	1984499	IdentifierDecl	"len = full_write ( fd , str , strlen ( str ) )"		1983707	0					
ANR	1984500	IdentifierDeclType	int		1983707	0					
ANR	1984501	Identifier	len		1983707	1					
ANR	1984502	AssignmentExpression	"len = full_write ( fd , str , strlen ( str ) )"		1983707	2		=			
ANR	1984503	Identifier	len		1983707	0					
ANR	1984504	CallExpression	"full_write ( fd , str , strlen ( str ) )"		1983707	1					
ANR	1984505	Callee	full_write		1983707	0					
ANR	1984506	Identifier	full_write		1983707	0					
ANR	1984507	ArgumentList	fd		1983707	1					
ANR	1984508	Argument	fd		1983707	0					
ANR	1984509	Identifier	fd		1983707	0					
ANR	1984510	Argument	str		1983707	1					
ANR	1984511	Identifier	str		1983707	0					
ANR	1984512	Argument	strlen ( str )		1983707	2					
ANR	1984513	CallExpression	strlen ( str )		1983707	0					
ANR	1984514	Callee	strlen		1983707	0					
ANR	1984515	Identifier	strlen		1983707	0					
ANR	1984516	ArgumentList	str		1983707	1					
ANR	1984517	Argument	str		1983707	0					
ANR	1984518	Identifier	str		1983707	0					
ANR	1984519	ExpressionStatement	ASSERT ( len == strlen ( str ) )	289:2:8356:8382	1983707	39	True				
ANR	1984520	CallExpression	ASSERT ( len == strlen ( str ) )		1983707	0					
ANR	1984521	Callee	ASSERT		1983707	0					
ANR	1984522	Identifier	ASSERT		1983707	0					
ANR	1984523	ArgumentList	len == strlen ( str )		1983707	1					
ANR	1984524	Argument	len == strlen ( str )		1983707	0					
ANR	1984525	EqualityExpression	len == strlen ( str )		1983707	0		==			
ANR	1984526	Identifier	len		1983707	0					
ANR	1984527	CallExpression	strlen ( str )		1983707	1					
ANR	1984528	Callee	strlen		1983707	0					
ANR	1984529	Identifier	strlen		1983707	0					
ANR	1984530	ArgumentList	str		1983707	1					
ANR	1984531	Argument	str		1983707	0					
ANR	1984532	Identifier	str		1983707	0					
ANR	1984533	ExpressionStatement	close ( fd )	290:2:8386:8395	1983707	40	True				
ANR	1984534	CallExpression	close ( fd )		1983707	0					
ANR	1984535	Callee	close		1983707	0					
ANR	1984536	Identifier	close		1983707	0					
ANR	1984537	ArgumentList	fd		1983707	1					
ANR	1984538	Argument	fd		1983707	0					
ANR	1984539	Identifier	fd		1983707	0					
ANR	1984540	ExpressionStatement	free ( str )	291:2:8399:8408	1983707	41	True				
ANR	1984541	CallExpression	free ( str )		1983707	0					
ANR	1984542	Callee	free		1983707	0					
ANR	1984543	Identifier	free		1983707	0					
ANR	1984544	ArgumentList	str		1983707	1					
ANR	1984545	Argument	str		1983707	0					
ANR	1984546	Identifier	str		1983707	0					
ANR	1984547	ReturnType	void		1983707	1					
ANR	1984548	Identifier	Pigeon :: writeConfigFile		1983707	2					
ANR	1984549	ParameterList			1983707	3					
ANR	1984550	CFGEntryNode	ENTRY		1983707		True				
ANR	1984551	CFGExitNode	EXIT		1983707		True				
ANR	1984552	Symbol	qpid_deny		1983707						
ANR	1984553	Symbol	O_CREAT		1983707						
ANR	1984554	Symbol	m_nameNodeDir		1983707						
ANR	1984555	Symbol	nnaddw		1983707						
ANR	1984556	Symbol	deny_list . print_to_delimed_string		1983707						
ANR	1984557	Symbol	ddir		1983707						
ANR	1984558	Symbol	qpid_allow		1983707						
ANR	1984559	Symbol	confFile . Value		1983707						
ANR	1984560	Symbol	namenode		1983707						
ANR	1984561	Symbol	strlen		1983707						
ANR	1984562	Symbol	dadd		1983707						
ANR	1984563	Symbol	allow_list . print_to_delimed_string		1983707						
ANR	1984564	Symbol	len		1983707						
ANR	1984565	Symbol	param		1983707						
ANR	1984566	Symbol	xml		1983707						
ANR	1984567	Symbol	deny_list		1983707						
ANR	1984568	Symbol	m_siteFile		1983707						
ANR	1984569	Symbol	allow_list		1983707						
ANR	1984570	Symbol	confFile		1983707						
ANR	1984571	Symbol	rep		1983707						
ANR	1984572	Symbol	logdir		1983707						
ANR	1984573	Symbol	xml . print_to_delimed_string		1983707						
ANR	1984574	Symbol	NULL		1983707						
ANR	1984575	Symbol	tmp_str		1983707						
ANR	1984576	Symbol	full_write		1983707						
ANR	1984577	Symbol	D_ALWAYS		1983707						
ANR	1984578	Symbol	ndir		1983707						
ANR	1984579	Symbol	str		1983707						
ANR	1984580	Symbol	daddw		1983707						
ANR	1984581	Symbol	m_siteFile . Value		1983707						
ANR	1984582	Symbol	safe_create_replace_if_exists		1983707						
ANR	1984583	Symbol	& xml		1983707						
ANR	1984584	Symbol	O_WRONLY		1983707						
ANR	1984585	Symbol	fd		1983707						
ANR	1984586	Function	Pigeon :: stop	295:2:8416:9278							
ANR	1984587	FunctionDef	Pigeon :: stop (bool fast)		1984586	0					
ANR	1984588	CompoundStatement		295:31:8445:9278	1984586	0					
ANR	1984589	IfStatement	if ( m_state == STATE_NULL )		1984586	0					
ANR	1984590	Condition	m_state == STATE_NULL	296:8:8455:8475	1984586	0	True				
ANR	1984591	EqualityExpression	m_state == STATE_NULL		1984586	0		==			
ANR	1984592	Identifier	m_state		1984586	0					
ANR	1984593	Identifier	STATE_NULL		1984586	1					
ANR	1984594	ReturnStatement	return ;	297:6:8484:8490	1984586	1	True				
ANR	1984595	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Qpid::stop() current_state = %d\\n"" , m_state )"	299:4:8497:8563	1984586	1	True				
ANR	1984596	CallExpression	"dprintf ( D_FULLDEBUG , ""Qpid::stop() current_state = %d\\n"" , m_state )"		1984586	0					
ANR	1984597	Callee	dprintf		1984586	0					
ANR	1984598	Identifier	dprintf		1984586	0					
ANR	1984599	ArgumentList	D_FULLDEBUG		1984586	1					
ANR	1984600	Argument	D_FULLDEBUG		1984586	0					
ANR	1984601	Identifier	D_FULLDEBUG		1984586	0					
ANR	1984602	Argument	"""Qpid::stop() current_state = %d\\n"""		1984586	1					
ANR	1984603	PrimaryExpression	"""Qpid::stop() current_state = %d\\n"""		1984586	0					
ANR	1984604	Argument	m_state		1984586	2					
ANR	1984605	Identifier	m_state		1984586	0					
ANR	1984606	IfStatement	if ( m_pid != - 1 )		1984586	2					
ANR	1984607	Condition	m_pid != - 1	301:8:8574:8584	1984586	0	True				
ANR	1984608	EqualityExpression	m_pid != - 1		1984586	0		!=			
ANR	1984609	Identifier	m_pid		1984586	0					
ANR	1984610	UnaryOperationExpression	- 1		1984586	1					
ANR	1984611	UnaryOperator	-		1984586	0					
ANR	1984612	PrimaryExpression	1		1984586	1					
ANR	1984613	CompoundStatement		7:21:141:141	1984586	1					
ANR	1984614	IfStatement	if ( m_state != STATE_REINIT )		1984586	0					
ANR	1984615	Condition	m_state != STATE_REINIT	308:10:8874:8896	1984586	0	True				
ANR	1984616	EqualityExpression	m_state != STATE_REINIT		1984586	0		!=			
ANR	1984617	Identifier	m_state		1984586	0					
ANR	1984618	Identifier	STATE_REINIT		1984586	1					
ANR	1984619	ExpressionStatement	m_state = STATE_STOP_REQUESTED	309:8:8907:8937	1984586	1	True				
ANR	1984620	AssignmentExpression	m_state = STATE_STOP_REQUESTED		1984586	0		=			
ANR	1984621	Identifier	m_state		1984586	0					
ANR	1984622	Identifier	STATE_STOP_REQUESTED		1984586	1					
ANR	1984623	ExpressionStatement	"daemonCore -> Send_Signal ( m_pid , ( fast ? SIGKILL : SIGTERM ) )"	311:6:8946:9005	1984586	1	True				
ANR	1984624	CallExpression	"daemonCore -> Send_Signal ( m_pid , ( fast ? SIGKILL : SIGTERM ) )"		1984586	0					
ANR	1984625	Callee	daemonCore -> Send_Signal		1984586	0					
ANR	1984626	PtrMemberAccess	daemonCore -> Send_Signal		1984586	0					
ANR	1984627	Identifier	daemonCore		1984586	0					
ANR	1984628	Identifier	Send_Signal		1984586	1					
ANR	1984629	ArgumentList	m_pid		1984586	1					
ANR	1984630	Argument	m_pid		1984586	0					
ANR	1984631	Identifier	m_pid		1984586	0					
ANR	1984632	Argument	fast ? SIGKILL : SIGTERM		1984586	1					
ANR	1984633	ConditionalExpression	fast ? SIGKILL : SIGTERM		1984586	0					
ANR	1984634	Condition	fast		1984586	0					
ANR	1984635	Identifier	fast		1984586	0					
ANR	1984636	Identifier	SIGKILL		1984586	1					
ANR	1984637	Identifier	SIGTERM		1984586	2					
ANR	1984638	IfStatement	if ( ! fast )		1984586	2					
ANR	1984639	Condition	! fast	312:10:9017:9021	1984586	0	True				
ANR	1984640	UnaryOperationExpression	! fast		1984586	0					
ANR	1984641	UnaryOperator	!		1984586	0					
ANR	1984642	Identifier	fast		1984586	1					
ANR	1984643	CompoundStatement		18:17:578:578	1984586	1					
ANR	1984644	ExpressionStatement	"dprintf ( D_ALWAYS , ""Created timer on daemon kill signal\\n"" )"	313:8:9034:9092	1984586	0	True				
ANR	1984645	CallExpression	"dprintf ( D_ALWAYS , ""Created timer on daemon kill signal\\n"" )"		1984586	0					
ANR	1984646	Callee	dprintf		1984586	0					
ANR	1984647	Identifier	dprintf		1984586	0					
ANR	1984648	ArgumentList	D_ALWAYS		1984586	1					
ANR	1984649	Argument	D_ALWAYS		1984586	0					
ANR	1984650	Identifier	D_ALWAYS		1984586	0					
ANR	1984651	Argument	"""Created timer on daemon kill signal\\n"""		1984586	1					
ANR	1984652	PrimaryExpression	"""Created timer on daemon kill signal\\n"""		1984586	0					
ANR	1984653	ExpressionStatement	"m_timer = daemonCore -> Register_Timer ( 5 , ( TimerHandlercpp ) & Pigeon :: killTimer , ""qpid kill timer"" , this )"	314:8:9102:9260	1984586	1	True				
ANR	1984654	AssignmentExpression	"m_timer = daemonCore -> Register_Timer ( 5 , ( TimerHandlercpp ) & Pigeon :: killTimer , ""qpid kill timer"" , this )"		1984586	0		=			
ANR	1984655	Identifier	m_timer		1984586	0					
ANR	1984656	CallExpression	"daemonCore -> Register_Timer ( 5 , ( TimerHandlercpp ) & Pigeon :: killTimer , ""qpid kill timer"" , this )"		1984586	1					
ANR	1984657	Callee	daemonCore -> Register_Timer		1984586	0					
ANR	1984658	PtrMemberAccess	daemonCore -> Register_Timer		1984586	0					
ANR	1984659	Identifier	daemonCore		1984586	0					
ANR	1984660	Identifier	Register_Timer		1984586	1					
ANR	1984661	ArgumentList	5		1984586	1					
ANR	1984662	Argument	5		1984586	0					
ANR	1984663	PrimaryExpression	5		1984586	0					
ANR	1984664	Argument	( TimerHandlercpp ) & Pigeon :: killTimer		1984586	1					
ANR	1984665	CastExpression	( TimerHandlercpp ) & Pigeon :: killTimer		1984586	0					
ANR	1984666	CastTarget	TimerHandlercpp		1984586	0					
ANR	1984667	UnaryOperationExpression	& Pigeon :: killTimer		1984586	1					
ANR	1984668	UnaryOperator	&		1984586	0					
ANR	1984669	Identifier	Pigeon :: killTimer		1984586	1					
ANR	1984670	Argument	"""qpid kill timer"""		1984586	2					
ANR	1984671	PrimaryExpression	"""qpid kill timer"""		1984586	0					
ANR	1984672	Argument	this		1984586	3					
ANR	1984673	Identifier	this		1984586	0					
ANR	1984674	ReturnType	void		1984586	1					
ANR	1984675	Identifier	Pigeon :: stop		1984586	2					
ANR	1984676	ParameterList	bool fast		1984586	3					
ANR	1984677	Parameter	bool fast	295:20:8434:8442	1984586	0	True				
ANR	1984678	ParameterType	bool		1984586	0					
ANR	1984679	Identifier	fast		1984586	1					
ANR	1984680	CFGEntryNode	ENTRY		1984586		True				
ANR	1984681	CFGExitNode	EXIT		1984586		True				
ANR	1984682	Symbol	m_timer		1984586						
ANR	1984683	Symbol	D_ALWAYS		1984586						
ANR	1984684	Symbol	this		1984586						
ANR	1984685	Symbol	D_FULLDEBUG		1984586						
ANR	1984686	Symbol	STATE_REINIT		1984586						
ANR	1984687	Symbol	STATE_NULL		1984586						
ANR	1984688	Symbol	SIGKILL		1984586						
ANR	1984689	Symbol	m_state		1984586						
ANR	1984690	Symbol	fast		1984586						
ANR	1984691	Symbol	STATE_STOP_REQUESTED		1984586						
ANR	1984692	Symbol	m_pid		1984586						
ANR	1984693	Symbol	* daemonCore		1984586						
ANR	1984694	Symbol	daemonCore		1984586						
ANR	1984695	Symbol	daemonCore -> Register_Timer		1984586						
ANR	1984696	Symbol	SIGTERM		1984586						
ANR	1984697	Symbol	& Pigeon :: killTimer		1984586						
ANR	1984698	Function	Pigeon :: reaperResponse	322:0:9281:9747							
ANR	1984699	FunctionDef	"Pigeon :: reaperResponse (int exit_pid , int exit_status)"		1984698	0					
ANR	1984700	CompoundStatement		322:58:9339:9747	1984698	0					
ANR	1984701	ExpressionStatement	"dprintf ( D_ALWAYS , ""QPID daemon returned %d\\n"" , exit_status )"	323:2:9343:9402	1984698	0	True				
ANR	1984702	CallExpression	"dprintf ( D_ALWAYS , ""QPID daemon returned %d\\n"" , exit_status )"		1984698	0					
ANR	1984703	Callee	dprintf		1984698	0					
ANR	1984704	Identifier	dprintf		1984698	0					
ANR	1984705	ArgumentList	D_ALWAYS		1984698	1					
ANR	1984706	Argument	D_ALWAYS		1984698	0					
ANR	1984707	Identifier	D_ALWAYS		1984698	0					
ANR	1984708	Argument	"""QPID daemon returned %d\\n"""		1984698	1					
ANR	1984709	PrimaryExpression	"""QPID daemon returned %d\\n"""		1984698	0					
ANR	1984710	Argument	exit_status		1984698	2					
ANR	1984711	Identifier	exit_status		1984698	0					
ANR	1984712	ExpressionStatement	daemonCore -> Cancel_Reaper ( m_reaper )	325:2:9407:9442	1984698	1	True				
ANR	1984713	CallExpression	daemonCore -> Cancel_Reaper ( m_reaper )		1984698	0					
ANR	1984714	Callee	daemonCore -> Cancel_Reaper		1984698	0					
ANR	1984715	PtrMemberAccess	daemonCore -> Cancel_Reaper		1984698	0					
ANR	1984716	Identifier	daemonCore		1984698	0					
ANR	1984717	Identifier	Cancel_Reaper		1984698	1					
ANR	1984718	ArgumentList	m_reaper		1984698	1					
ANR	1984719	Argument	m_reaper		1984698	0					
ANR	1984720	Identifier	m_reaper		1984698	0					
ANR	1984721	ExpressionStatement	m_pid = - 1	326:2:9446:9456	1984698	2	True				
ANR	1984722	AssignmentExpression	m_pid = - 1		1984698	0		=			
ANR	1984723	Identifier	m_pid		1984698	0					
ANR	1984724	UnaryOperationExpression	- 1		1984698	1					
ANR	1984725	UnaryOperator	-		1984698	0					
ANR	1984726	PrimaryExpression	1		1984698	1					
ANR	1984727	ExpressionStatement	m_reaper = - 1	327:2:9460:9473	1984698	3	True				
ANR	1984728	AssignmentExpression	m_reaper = - 1		1984698	0		=			
ANR	1984729	Identifier	m_reaper		1984698	0					
ANR	1984730	UnaryOperationExpression	- 1		1984698	1					
ANR	1984731	UnaryOperator	-		1984698	0					
ANR	1984732	PrimaryExpression	1		1984698	1					
ANR	1984733	IfStatement	if ( m_state == STATE_REINIT )		1984698	4					
ANR	1984734	Condition	m_state == STATE_REINIT	329:6:9482:9504	1984698	0	True				
ANR	1984735	EqualityExpression	m_state == STATE_REINIT		1984698	0		==			
ANR	1984736	Identifier	m_state		1984698	0					
ANR	1984737	Identifier	STATE_REINIT		1984698	1					
ANR	1984738	CompoundStatement		8:31:167:167	1984698	1					
ANR	1984739	ExpressionStatement	m_state = STATE_NULL	330:4:9513:9533	1984698	0	True				
ANR	1984740	AssignmentExpression	m_state = STATE_NULL		1984698	0		=			
ANR	1984741	Identifier	m_state		1984698	0					
ANR	1984742	Identifier	STATE_NULL		1984698	1					
ANR	1984743	ExpressionStatement	initialize ( )	331:4:9539:9551	1984698	1	True				
ANR	1984744	CallExpression	initialize ( )		1984698	0					
ANR	1984745	Callee	initialize		1984698	0					
ANR	1984746	Identifier	initialize		1984698	0					
ANR	1984747	ArgumentList			1984698	1					
ANR	1984748	ElseStatement	else		1984698	0					
ANR	1984749	IfStatement	if ( m_state != STATE_STOP_REQUESTED && exit_status != 0 )		1984698	0					
ANR	1984750	Condition	m_state != STATE_STOP_REQUESTED && exit_status != 0	333:12:9569:9619	1984698	0	True				
ANR	1984751	AndExpression	m_state != STATE_STOP_REQUESTED && exit_status != 0		1984698	0		&&			
ANR	1984752	EqualityExpression	m_state != STATE_STOP_REQUESTED		1984698	0		!=			
ANR	1984753	Identifier	m_state		1984698	0					
ANR	1984754	Identifier	STATE_STOP_REQUESTED		1984698	1					
ANR	1984755	EqualityExpression	exit_status != 0		1984698	1		!=			
ANR	1984756	Identifier	exit_status		1984698	0					
ANR	1984757	PrimaryExpression	0		1984698	1					
ANR	1984758	CompoundStatement		12:65:282:282	1984698	1					
ANR	1984759	ExpressionStatement	"EXCEPT ( ""qpid daemon %d was killed unexpectedly\\n"" , exit_pid )"	334:4:9628:9688	1984698	0	True				
ANR	1984760	CallExpression	"EXCEPT ( ""qpid daemon %d was killed unexpectedly\\n"" , exit_pid )"		1984698	0					
ANR	1984761	Callee	EXCEPT		1984698	0					
ANR	1984762	Identifier	EXCEPT		1984698	0					
ANR	1984763	ArgumentList	"""qpid daemon %d was killed unexpectedly\\n"""		1984698	1					
ANR	1984764	Argument	"""qpid daemon %d was killed unexpectedly\\n"""		1984698	0					
ANR	1984765	PrimaryExpression	"""qpid daemon %d was killed unexpectedly\\n"""		1984698	0					
ANR	1984766	Argument	exit_pid		1984698	1					
ANR	1984767	Identifier	exit_pid		1984698	0					
ANR	1984768	ExpressionStatement	m_state = STATE_NULL	337:2:9697:9717	1984698	5	True				
ANR	1984769	AssignmentExpression	m_state = STATE_NULL		1984698	0		=			
ANR	1984770	Identifier	m_state		1984698	0					
ANR	1984771	Identifier	STATE_NULL		1984698	1					
ANR	1984772	ExpressionStatement	DC_Exit ( 0 )	339:2:9722:9732	1984698	6	True				
ANR	1984773	CallExpression	DC_Exit ( 0 )		1984698	0					
ANR	1984774	Callee	DC_Exit		1984698	0					
ANR	1984775	Identifier	DC_Exit		1984698	0					
ANR	1984776	ArgumentList	0		1984698	1					
ANR	1984777	Argument	0		1984698	0					
ANR	1984778	PrimaryExpression	0		1984698	0					
ANR	1984779	ReturnStatement	return 0 ;	341:2:9737:9745	1984698	7	True				
ANR	1984780	PrimaryExpression	0		1984698	0					
ANR	1984781	ReturnType	int		1984698	1					
ANR	1984782	Identifier	Pigeon :: reaperResponse		1984698	2					
ANR	1984783	ParameterList	"int exit_pid , int exit_status"		1984698	3					
ANR	1984784	Parameter	int exit_pid	322:27:9308:9319	1984698	0	True				
ANR	1984785	ParameterType	int		1984698	0					
ANR	1984786	Identifier	exit_pid		1984698	1					
ANR	1984787	Parameter	int exit_status	322:41:9322:9336	1984698	1	True				
ANR	1984788	ParameterType	int		1984698	0					
ANR	1984789	Identifier	exit_status		1984698	1					
ANR	1984790	CFGEntryNode	ENTRY		1984698		True				
ANR	1984791	CFGExitNode	EXIT		1984698		True				
ANR	1984792	Symbol	m_state		1984698						
ANR	1984793	Symbol	exit_pid		1984698						
ANR	1984794	Symbol	m_reaper		1984698						
ANR	1984795	Symbol	STATE_STOP_REQUESTED		1984698						
ANR	1984796	Symbol	m_pid		1984698						
ANR	1984797	Symbol	daemonCore		1984698						
ANR	1984798	Symbol	D_ALWAYS		1984698						
ANR	1984799	Symbol	STATE_REINIT		1984698						
ANR	1984800	Symbol	exit_status		1984698						
ANR	1984801	Symbol	STATE_NULL		1984698						
ANR	1984802	Function	Pigeon :: killTimer	344:0:9750:9965							
ANR	1984803	FunctionDef	Pigeon :: killTimer ()		1984802	0					
ANR	1984804	CompoundStatement		344:24:9774:9965	1984802	0					
ANR	1984805	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Qpid::KillTimer()\\n"" )"	345:2:9786:9829	1984802	0	True				
ANR	1984806	CallExpression	"dprintf ( D_FULLDEBUG , ""Qpid::KillTimer()\\n"" )"		1984802	0					
ANR	1984807	Callee	dprintf		1984802	0					
ANR	1984808	Identifier	dprintf		1984802	0					
ANR	1984809	ArgumentList	D_FULLDEBUG		1984802	1					
ANR	1984810	Argument	D_FULLDEBUG		1984802	0					
ANR	1984811	Identifier	D_FULLDEBUG		1984802	0					
ANR	1984812	Argument	"""Qpid::KillTimer()\\n"""		1984802	1					
ANR	1984813	PrimaryExpression	"""Qpid::KillTimer()\\n"""		1984802	0					
ANR	1984814	ExpressionStatement	daemonCore -> Cancel_Timer ( m_timer )	346:2:9833:9866	1984802	1	True				
ANR	1984815	CallExpression	daemonCore -> Cancel_Timer ( m_timer )		1984802	0					
ANR	1984816	Callee	daemonCore -> Cancel_Timer		1984802	0					
ANR	1984817	PtrMemberAccess	daemonCore -> Cancel_Timer		1984802	0					
ANR	1984818	Identifier	daemonCore		1984802	0					
ANR	1984819	Identifier	Cancel_Timer		1984802	1					
ANR	1984820	ArgumentList	m_timer		1984802	1					
ANR	1984821	Argument	m_timer		1984802	0					
ANR	1984822	Identifier	m_timer		1984802	0					
ANR	1984823	IfStatement	if ( m_state != STATE_NULL )		1984802	2					
ANR	1984824	Condition	m_state != STATE_NULL	349:6:9913:9933	1984802	0	True				
ANR	1984825	EqualityExpression	m_state != STATE_NULL		1984802	0		!=			
ANR	1984826	Identifier	m_state		1984802	0					
ANR	1984827	Identifier	STATE_NULL		1984802	1					
ANR	1984828	ExpressionStatement	stop ( true )	350:4:9940:9950	1984802	1	True				
ANR	1984829	CallExpression	stop ( true )		1984802	0					
ANR	1984830	Callee	stop		1984802	0					
ANR	1984831	Identifier	stop		1984802	0					
ANR	1984832	ArgumentList	true		1984802	1					
ANR	1984833	Argument	true		1984802	0					
ANR	1984834	Identifier	true		1984802	0					
ANR	1984835	ReturnStatement	return 0 ;	352:2:9955:9963	1984802	3	True				
ANR	1984836	PrimaryExpression	0		1984802	0					
ANR	1984837	ReturnType	int		1984802	1					
ANR	1984838	Identifier	Pigeon :: killTimer		1984802	2					
ANR	1984839	ParameterList			1984802	3					
ANR	1984840	CFGEntryNode	ENTRY		1984802		True				
ANR	1984841	CFGExitNode	EXIT		1984802		True				
ANR	1984842	Symbol	m_state		1984802						
ANR	1984843	Symbol	m_timer		1984802						
ANR	1984844	Symbol	daemonCore		1984802						
ANR	1984845	Symbol	true		1984802						
ANR	1984846	Symbol	D_FULLDEBUG		1984802						
ANR	1984847	Symbol	STATE_NULL		1984802						
ANR	1984848	Function	Pigeon :: startServices	355:0:9968:10328							
ANR	1984849	FunctionDef	Pigeon :: startServices ()		1984848	0					
ANR	1984850	CompoundStatement		355:29:9997:10328	1984848	0					
ANR	1984851	IdentifierDeclStatement	"char * services = param ( ""QPID_SERVICES"" ) ;"	356:2:10001:10041	1984848	0	True				
ANR	1984852	IdentifierDecl	"* services = param ( ""QPID_SERVICES"" )"		1984848	0					
ANR	1984853	IdentifierDeclType	char *		1984848	0					
ANR	1984854	Identifier	services		1984848	1					
ANR	1984855	AssignmentExpression	"* services = param ( ""QPID_SERVICES"" )"		1984848	2		=			
ANR	1984856	Identifier	services		1984848	0					
ANR	1984857	CallExpression	"param ( ""QPID_SERVICES"" )"		1984848	1					
ANR	1984858	Callee	param		1984848	0					
ANR	1984859	Identifier	param		1984848	0					
ANR	1984860	ArgumentList	"""QPID_SERVICES"""		1984848	1					
ANR	1984861	Argument	"""QPID_SERVICES"""		1984848	0					
ANR	1984862	PrimaryExpression	"""QPID_SERVICES"""		1984848	0					
ANR	1984863	IfStatement	if ( services == NULL )		1984848	1					
ANR	1984864	Condition	services == NULL	358:6:10050:10065	1984848	0	True				
ANR	1984865	EqualityExpression	services == NULL		1984848	0		==			
ANR	1984866	Identifier	services		1984848	0					
ANR	1984867	Identifier	NULL		1984848	1					
ANR	1984868	CompoundStatement		4:24:70:70	1984848	1					
ANR	1984869	ExpressionStatement	startService ( QPID_DATANODE )	359:4:10074:10101	1984848	0	True				
ANR	1984870	CallExpression	startService ( QPID_DATANODE )		1984848	0					
ANR	1984871	Callee	startService		1984848	0					
ANR	1984872	Identifier	startService		1984848	0					
ANR	1984873	ArgumentList	QPID_DATANODE		1984848	1					
ANR	1984874	Argument	QPID_DATANODE		1984848	0					
ANR	1984875	Identifier	QPID_DATANODE		1984848	0					
ANR	1984876	ElseStatement	else		1984848	0					
ANR	1984877	CompoundStatement		8:4:123:143	1984848	0					
ANR	1984878	IdentifierDeclStatement	MyString s ( services ) ;	362:4:10121:10141	1984848	0	True				
ANR	1984879	IdentifierDecl	s ( services )		1984848	0					
ANR	1984880	IdentifierDeclType	MyString		1984848	0					
ANR	1984881	Identifier	s		1984848	1					
ANR	1984882	Identifier	services		1984848	2					
ANR	1984883	IfStatement	"if ( s == ""QPID_NAMENODE"" )"		1984848	1					
ANR	1984884	Condition	"s == ""QPID_NAMENODE"""	364:8:10152:10171	1984848	0	True				
ANR	1984885	EqualityExpression	"s == ""QPID_NAMENODE"""		1984848	0		==			
ANR	1984886	Identifier	s		1984848	0					
ANR	1984887	PrimaryExpression	"""QPID_NAMENODE"""		1984848	1					
ANR	1984888	ExpressionStatement	startService ( QPID_NAMENODE )	365:6:10180:10207	1984848	1	True				
ANR	1984889	CallExpression	startService ( QPID_NAMENODE )		1984848	0					
ANR	1984890	Callee	startService		1984848	0					
ANR	1984891	Identifier	startService		1984848	0					
ANR	1984892	ArgumentList	QPID_NAMENODE		1984848	1					
ANR	1984893	Argument	QPID_NAMENODE		1984848	0					
ANR	1984894	Identifier	QPID_NAMENODE		1984848	0					
ANR	1984895	ElseStatement	else		1984848	0					
ANR	1984896	IfStatement	"if ( s == ""QPID_DATANODE"" )"		1984848	0					
ANR	1984897	Condition	"s == ""QPID_DATANODE"""	366:13:10222:10241	1984848	0	True				
ANR	1984898	EqualityExpression	"s == ""QPID_DATANODE"""		1984848	0		==			
ANR	1984899	Identifier	s		1984848	0					
ANR	1984900	PrimaryExpression	"""QPID_DATANODE"""		1984848	1					
ANR	1984901	ExpressionStatement	startService ( QPID_DATANODE )	367:6:10250:10277	1984848	1	True				
ANR	1984902	CallExpression	startService ( QPID_DATANODE )		1984848	0					
ANR	1984903	Callee	startService		1984848	0					
ANR	1984904	Identifier	startService		1984848	0					
ANR	1984905	ArgumentList	QPID_DATANODE		1984848	1					
ANR	1984906	Argument	QPID_DATANODE		1984848	0					
ANR	1984907	Identifier	QPID_DATANODE		1984848	0					
ANR	1984908	ElseStatement	else		1984848	0					
ANR	1984909	ExpressionStatement	startService ( QPID_SECONDARY )	369:6:10294:10322	1984848	0	True				
ANR	1984910	CallExpression	startService ( QPID_SECONDARY )		1984848	0					
ANR	1984911	Callee	startService		1984848	0					
ANR	1984912	Identifier	startService		1984848	0					
ANR	1984913	ArgumentList	QPID_SECONDARY		1984848	1					
ANR	1984914	Argument	QPID_SECONDARY		1984848	0					
ANR	1984915	Identifier	QPID_SECONDARY		1984848	0					
ANR	1984916	ReturnType	void		1984848	1					
ANR	1984917	Identifier	Pigeon :: startServices		1984848	2					
ANR	1984918	ParameterList			1984848	3					
ANR	1984919	CFGEntryNode	ENTRY		1984848		True				
ANR	1984920	CFGExitNode	EXIT		1984848		True				
ANR	1984921	Symbol	NULL		1984848						
ANR	1984922	Symbol	s		1984848						
ANR	1984923	Symbol	param		1984848						
ANR	1984924	Symbol	QPID_DATANODE		1984848						
ANR	1984925	Symbol	services		1984848						
ANR	1984926	Symbol	QPID_SECONDARY		1984848						
ANR	1984927	Symbol	QPID_NAMENODE		1984848						
ANR	1984928	Function	Pigeon :: startService	373:0:10331:13857							
ANR	1984929	FunctionDef	Pigeon :: startService (int type)		1984928	0					
ANR	1984930	CompoundStatement		373:36:10367:13857	1984928	0					
ANR	1984931	ExpressionStatement	"dprintf ( D_ALWAYS , ""Starting qpid node service type = %d\\n"" , type )"	374:2:10371:10436	1984928	0	True				
ANR	1984932	CallExpression	"dprintf ( D_ALWAYS , ""Starting qpid node service type = %d\\n"" , type )"		1984928	0					
ANR	1984933	Callee	dprintf		1984928	0					
ANR	1984934	Identifier	dprintf		1984928	0					
ANR	1984935	ArgumentList	D_ALWAYS		1984928	1					
ANR	1984936	Argument	D_ALWAYS		1984928	0					
ANR	1984937	Identifier	D_ALWAYS		1984928	0					
ANR	1984938	Argument	"""Starting qpid node service type = %d\\n"""		1984928	1					
ANR	1984939	PrimaryExpression	"""Starting qpid node service type = %d\\n"""		1984928	0					
ANR	1984940	Argument	type		1984928	2					
ANR	1984941	Identifier	type		1984928	0					
ANR	1984942	IdentifierDeclStatement	ArgList arglist ;	375:2:10440:10455	1984928	1	True				
ANR	1984943	IdentifierDecl	arglist		1984928	0					
ANR	1984944	IdentifierDeclType	ArgList		1984928	0					
ANR	1984945	Identifier	arglist		1984928	1					
ANR	1984946	ExpressionStatement	"java_config ( m_java , & arglist , & m_classpath )"	377:2:10460:10503	1984928	2	True				
ANR	1984947	CallExpression	"java_config ( m_java , & arglist , & m_classpath )"		1984928	0					
ANR	1984948	Callee	java_config		1984928	0					
ANR	1984949	Identifier	java_config		1984928	0					
ANR	1984950	ArgumentList	m_java		1984928	1					
ANR	1984951	Argument	m_java		1984928	0					
ANR	1984952	Identifier	m_java		1984928	0					
ANR	1984953	Argument	& arglist		1984928	1					
ANR	1984954	UnaryOperationExpression	& arglist		1984928	0					
ANR	1984955	UnaryOperator	&		1984928	0					
ANR	1984956	Identifier	arglist		1984928	1					
ANR	1984957	Argument	& m_classpath		1984928	2					
ANR	1984958	UnaryOperationExpression	& m_classpath		1984928	0					
ANR	1984959	UnaryOperator	&		1984928	0					
ANR	1984960	Identifier	m_classpath		1984928	1					
ANR	1984961	IdentifierDeclStatement	"char * ldir = param ( ""LOG"" ) ;"	379:2:10508:10533	1984928	3	True				
ANR	1984962	IdentifierDecl	"* ldir = param ( ""LOG"" )"		1984928	0					
ANR	1984963	IdentifierDeclType	char *		1984928	0					
ANR	1984964	Identifier	ldir		1984928	1					
ANR	1984965	AssignmentExpression	"* ldir = param ( ""LOG"" )"		1984928	2		=			
ANR	1984966	Identifier	ldir		1984928	0					
ANR	1984967	CallExpression	"param ( ""LOG"" )"		1984928	1					
ANR	1984968	Callee	param		1984928	0					
ANR	1984969	Identifier	param		1984928	0					
ANR	1984970	ArgumentList	"""LOG"""		1984928	1					
ANR	1984971	Argument	"""LOG"""		1984928	0					
ANR	1984972	PrimaryExpression	"""LOG"""		1984928	0					
ANR	1984973	IfStatement	if ( ldir != NULL )		1984928	4					
ANR	1984974	Condition	ldir != NULL	380:6:10541:10552	1984928	0	True				
ANR	1984975	EqualityExpression	ldir != NULL		1984928	0		!=			
ANR	1984976	Identifier	ldir		1984928	0					
ANR	1984977	Identifier	NULL		1984928	1					
ANR	1984978	CompoundStatement		17:4:474:490	1984928	1					
ANR	1984979	IdentifierDeclStatement	"char * log4j = param ( ""QPID_LOG4J"" ) ;"	384:4:10652:10685	1984928	0	True				
ANR	1984980	IdentifierDecl	"* log4j = param ( ""QPID_LOG4J"" )"		1984928	0					
ANR	1984981	IdentifierDeclType	char *		1984928	0					
ANR	1984982	Identifier	log4j		1984928	1					
ANR	1984983	AssignmentExpression	"* log4j = param ( ""QPID_LOG4J"" )"		1984928	2		=			
ANR	1984984	Identifier	log4j		1984928	0					
ANR	1984985	CallExpression	"param ( ""QPID_LOG4J"" )"		1984928	1					
ANR	1984986	Callee	param		1984928	0					
ANR	1984987	Identifier	param		1984928	0					
ANR	1984988	ArgumentList	"""QPID_LOG4J"""		1984928	1					
ANR	1984989	Argument	"""QPID_LOG4J"""		1984928	0					
ANR	1984990	PrimaryExpression	"""QPID_LOG4J"""		1984928	0					
ANR	1984991	IdentifierDeclStatement	MyString log4jarg ;	385:4:10691:10708	1984928	1	True				
ANR	1984992	IdentifierDecl	log4jarg		1984928	0					
ANR	1984993	IdentifierDeclType	MyString		1984928	0					
ANR	1984994	Identifier	log4jarg		1984928	1					
ANR	1984995	ExpressionStatement	"log4jarg . sprintf ( ""-Dqpid.root.logger=%s,DRFA"" , ( log4j != NULL ? log4j : ""INFO"" ) )"	386:4:10714:10794	1984928	2	True				
ANR	1984996	CallExpression	"log4jarg . sprintf ( ""-Dqpid.root.logger=%s,DRFA"" , ( log4j != NULL ? log4j : ""INFO"" ) )"		1984928	0					
ANR	1984997	Callee	log4jarg . sprintf		1984928	0					
ANR	1984998	MemberAccess	log4jarg . sprintf		1984928	0					
ANR	1984999	Identifier	log4jarg		1984928	0					
ANR	1985000	Identifier	sprintf		1984928	1					
ANR	1985001	ArgumentList	"""-Dqpid.root.logger=%s,DRFA"""		1984928	1					
ANR	1985002	Argument	"""-Dqpid.root.logger=%s,DRFA"""		1984928	0					
ANR	1985003	PrimaryExpression	"""-Dqpid.root.logger=%s,DRFA"""		1984928	0					
ANR	1985004	Argument	"log4j != NULL ? log4j : ""INFO"""		1984928	1					
ANR	1985005	ConditionalExpression	"log4j != NULL ? log4j : ""INFO"""		1984928	0					
ANR	1985006	Condition	log4j != NULL		1984928	0					
ANR	1985007	EqualityExpression	log4j != NULL		1984928	0		!=			
ANR	1985008	Identifier	log4j		1984928	0					
ANR	1985009	Identifier	NULL		1984928	1					
ANR	1985010	Identifier	log4j		1984928	1					
ANR	1985011	PrimaryExpression	"""INFO"""		1984928	2					
ANR	1985012	ExpressionStatement	arglist . AppendArg ( log4jarg . Value ( ) )	387:4:10800:10835	1984928	3	True				
ANR	1985013	CallExpression	arglist . AppendArg ( log4jarg . Value ( ) )		1984928	0					
ANR	1985014	Callee	arglist . AppendArg		1984928	0					
ANR	1985015	MemberAccess	arglist . AppendArg		1984928	0					
ANR	1985016	Identifier	arglist		1984928	0					
ANR	1985017	Identifier	AppendArg		1984928	1					
ANR	1985018	ArgumentList	log4jarg . Value ( )		1984928	1					
ANR	1985019	Argument	log4jarg . Value ( )		1984928	0					
ANR	1985020	CallExpression	log4jarg . Value ( )		1984928	0					
ANR	1985021	Callee	log4jarg . Value		1984928	0					
ANR	1985022	MemberAccess	log4jarg . Value		1984928	0					
ANR	1985023	Identifier	log4jarg		1984928	0					
ANR	1985024	Identifier	Value		1984928	1					
ANR	1985025	ArgumentList			1984928	1					
ANR	1985026	IdentifierDeclStatement	MyString log_dir ;	389:4:10842:10858	1984928	4	True				
ANR	1985027	IdentifierDecl	log_dir		1984928	0					
ANR	1985028	IdentifierDeclType	MyString		1984928	0					
ANR	1985029	Identifier	log_dir		1984928	1					
ANR	1985030	ExpressionStatement	"log_dir . sprintf ( ""-Dqpid.log.dir=%s/QPID_Logs"" , ldir )"	390:4:10864:10916	1984928	5	True				
ANR	1985031	CallExpression	"log_dir . sprintf ( ""-Dqpid.log.dir=%s/QPID_Logs"" , ldir )"		1984928	0					
ANR	1985032	Callee	log_dir . sprintf		1984928	0					
ANR	1985033	MemberAccess	log_dir . sprintf		1984928	0					
ANR	1985034	Identifier	log_dir		1984928	0					
ANR	1985035	Identifier	sprintf		1984928	1					
ANR	1985036	ArgumentList	"""-Dqpid.log.dir=%s/QPID_Logs"""		1984928	1					
ANR	1985037	Argument	"""-Dqpid.log.dir=%s/QPID_Logs"""		1984928	0					
ANR	1985038	PrimaryExpression	"""-Dqpid.log.dir=%s/QPID_Logs"""		1984928	0					
ANR	1985039	Argument	ldir		1984928	1					
ANR	1985040	Identifier	ldir		1984928	0					
ANR	1985041	ExpressionStatement	arglist . AppendArg ( log_dir . Value ( ) )	391:4:10922:10956	1984928	6	True				
ANR	1985042	CallExpression	arglist . AppendArg ( log_dir . Value ( ) )		1984928	0					
ANR	1985043	Callee	arglist . AppendArg		1984928	0					
ANR	1985044	MemberAccess	arglist . AppendArg		1984928	0					
ANR	1985045	Identifier	arglist		1984928	0					
ANR	1985046	Identifier	AppendArg		1984928	1					
ANR	1985047	ArgumentList	log_dir . Value ( )		1984928	1					
ANR	1985048	Argument	log_dir . Value ( )		1984928	0					
ANR	1985049	CallExpression	log_dir . Value ( )		1984928	0					
ANR	1985050	Callee	log_dir . Value		1984928	0					
ANR	1985051	MemberAccess	log_dir . Value		1984928	0					
ANR	1985052	Identifier	log_dir		1984928	0					
ANR	1985053	Identifier	Value		1984928	1					
ANR	1985054	ArgumentList			1984928	1					
ANR	1985055	ExpressionStatement	"arglist . AppendArg ( ""-Dqpid.log.file=qpid.log"" )"	392:4:10962:11007	1984928	7	True				
ANR	1985056	CallExpression	"arglist . AppendArg ( ""-Dqpid.log.file=qpid.log"" )"		1984928	0					
ANR	1985057	Callee	arglist . AppendArg		1984928	0					
ANR	1985058	MemberAccess	arglist . AppendArg		1984928	0					
ANR	1985059	Identifier	arglist		1984928	0					
ANR	1985060	Identifier	AppendArg		1984928	1					
ANR	1985061	ArgumentList	"""-Dqpid.log.file=qpid.log"""		1984928	1					
ANR	1985062	Argument	"""-Dqpid.log.file=qpid.log"""		1984928	0					
ANR	1985063	PrimaryExpression	"""-Dqpid.log.file=qpid.log"""		1984928	0					
ANR	1985064	ExpressionStatement	free ( ldir )	393:4:11013:11023	1984928	8	True				
ANR	1985065	CallExpression	free ( ldir )		1984928	0					
ANR	1985066	Callee	free		1984928	0					
ANR	1985067	Identifier	free		1984928	0					
ANR	1985068	ArgumentList	ldir		1984928	1					
ANR	1985069	Argument	ldir		1984928	0					
ANR	1985070	Identifier	ldir		1984928	0					
ANR	1985071	IfStatement	if ( type == QPID_NAMENODE )		1984928	5					
ANR	1985072	Condition	type == QPID_NAMENODE	396:6:11036:11056	1984928	0	True				
ANR	1985073	EqualityExpression	type == QPID_NAMENODE		1984928	0		==			
ANR	1985074	Identifier	type		1984928	0					
ANR	1985075	Identifier	QPID_NAMENODE		1984928	1					
ANR	1985076	CompoundStatement		24:29:691:691	1984928	1					
ANR	1985077	ExpressionStatement	arglist . AppendArg ( m_nameNodeClass )	397:4:11065:11099	1984928	0	True				
ANR	1985078	CallExpression	arglist . AppendArg ( m_nameNodeClass )		1984928	0					
ANR	1985079	Callee	arglist . AppendArg		1984928	0					
ANR	1985080	MemberAccess	arglist . AppendArg		1984928	0					
ANR	1985081	Identifier	arglist		1984928	0					
ANR	1985082	Identifier	AppendArg		1984928	1					
ANR	1985083	ArgumentList	m_nameNodeClass		1984928	1					
ANR	1985084	Argument	m_nameNodeClass		1984928	0					
ANR	1985085	Identifier	m_nameNodeClass		1984928	0					
ANR	1985086	ElseStatement	else		1984928	0					
ANR	1985087	IfStatement	if ( type == QPID_DATANODE )		1984928	0					
ANR	1985088	Condition	type == QPID_DATANODE	399:11:11116:11136	1984928	0	True				
ANR	1985089	EqualityExpression	type == QPID_DATANODE		1984928	0		==			
ANR	1985090	Identifier	type		1984928	0					
ANR	1985091	Identifier	QPID_DATANODE		1984928	1					
ANR	1985092	CompoundStatement		27:34:771:771	1984928	1					
ANR	1985093	ExpressionStatement	arglist . AppendArg ( m_dataNodeClass )	400:4:11145:11179	1984928	0	True				
ANR	1985094	CallExpression	arglist . AppendArg ( m_dataNodeClass )		1984928	0					
ANR	1985095	Callee	arglist . AppendArg		1984928	0					
ANR	1985096	MemberAccess	arglist . AppendArg		1984928	0					
ANR	1985097	Identifier	arglist		1984928	0					
ANR	1985098	Identifier	AppendArg		1984928	1					
ANR	1985099	ArgumentList	m_dataNodeClass		1984928	1					
ANR	1985100	Argument	m_dataNodeClass		1984928	0					
ANR	1985101	Identifier	m_dataNodeClass		1984928	0					
ANR	1985102	ElseStatement	else		1984928	0					
ANR	1985103	IfStatement	if ( type == QPID_SECONDARY )		1984928	0					
ANR	1985104	Condition	type == QPID_SECONDARY	402:11:11196:11217	1984928	0	True				
ANR	1985105	EqualityExpression	type == QPID_SECONDARY		1984928	0		==			
ANR	1985106	Identifier	type		1984928	0					
ANR	1985107	Identifier	QPID_SECONDARY		1984928	1					
ANR	1985108	CompoundStatement		30:35:852:852	1984928	1					
ANR	1985109	ExpressionStatement	arglist . AppendArg ( m_secondaryNodeClass )	403:4:11226:11265	1984928	0	True				
ANR	1985110	CallExpression	arglist . AppendArg ( m_secondaryNodeClass )		1984928	0					
ANR	1985111	Callee	arglist . AppendArg		1984928	0					
ANR	1985112	MemberAccess	arglist . AppendArg		1984928	0					
ANR	1985113	Identifier	arglist		1984928	0					
ANR	1985114	Identifier	AppendArg		1984928	1					
ANR	1985115	ArgumentList	m_secondaryNodeClass		1984928	1					
ANR	1985116	Argument	m_secondaryNodeClass		1984928	0					
ANR	1985117	Identifier	m_secondaryNodeClass		1984928	0					
ANR	1985118	IdentifierDeclStatement	int arrIO [ 3 ] ;	406:2:11274:11286	1984928	6	True				
ANR	1985119	IdentifierDecl	arrIO [ 3 ]		1984928	0					
ANR	1985120	IdentifierDeclType	int [ 3 ]		1984928	0					
ANR	1985121	Identifier	arrIO		1984928	1					
ANR	1985122	PrimaryExpression	3		1984928	2					
ANR	1985123	ExpressionStatement	arrIO [ 0 ] = - 1	407:2:11290:11303	1984928	7	True				
ANR	1985124	AssignmentExpression	arrIO [ 0 ] = - 1		1984928	0		=			
ANR	1985125	ArrayIndexing	arrIO [ 0 ]		1984928	0					
ANR	1985126	Identifier	arrIO		1984928	0					
ANR	1985127	PrimaryExpression	0		1984928	1					
ANR	1985128	UnaryOperationExpression	- 1		1984928	1					
ANR	1985129	UnaryOperator	-		1984928	0					
ANR	1985130	PrimaryExpression	1		1984928	1					
ANR	1985131	ExpressionStatement	arrIO [ 1 ] = - 1	408:2:11307:11320	1984928	8	True				
ANR	1985132	AssignmentExpression	arrIO [ 1 ] = - 1		1984928	0		=			
ANR	1985133	ArrayIndexing	arrIO [ 1 ]		1984928	0					
ANR	1985134	Identifier	arrIO		1984928	0					
ANR	1985135	PrimaryExpression	1		1984928	1					
ANR	1985136	UnaryOperationExpression	- 1		1984928	1					
ANR	1985137	UnaryOperator	-		1984928	0					
ANR	1985138	PrimaryExpression	1		1984928	1					
ANR	1985139	ExpressionStatement	arrIO [ 2 ] = - 1	409:2:11324:11337	1984928	9	True				
ANR	1985140	AssignmentExpression	arrIO [ 2 ] = - 1		1984928	0		=			
ANR	1985141	ArrayIndexing	arrIO [ 2 ]		1984928	0					
ANR	1985142	Identifier	arrIO		1984928	0					
ANR	1985143	PrimaryExpression	2		1984928	1					
ANR	1985144	UnaryOperationExpression	- 1		1984928	1					
ANR	1985145	UnaryOperator	-		1984928	0					
ANR	1985146	PrimaryExpression	1		1984928	1					
ANR	1985147	IfStatement	"if ( ! daemonCore -> Create_Pipe ( & arrIO [ 1 ] , true , false , true ) )"		1984928	10					
ANR	1985148	Condition	"! daemonCore -> Create_Pipe ( & arrIO [ 1 ] , true , false , true )"	411:6:11346:11400	1984928	0	True				
ANR	1985149	UnaryOperationExpression	"! daemonCore -> Create_Pipe ( & arrIO [ 1 ] , true , false , true )"		1984928	0					
ANR	1985150	UnaryOperator	!		1984928	0					
ANR	1985151	CallExpression	"daemonCore -> Create_Pipe ( & arrIO [ 1 ] , true , false , true )"		1984928	1					
ANR	1985152	Callee	daemonCore -> Create_Pipe		1984928	0					
ANR	1985153	PtrMemberAccess	daemonCore -> Create_Pipe		1984928	0					
ANR	1985154	Identifier	daemonCore		1984928	0					
ANR	1985155	Identifier	Create_Pipe		1984928	1					
ANR	1985156	ArgumentList	& arrIO [ 1 ]		1984928	1					
ANR	1985157	Argument	& arrIO [ 1 ]		1984928	0					
ANR	1985158	UnaryOperationExpression	& arrIO [ 1 ]		1984928	0					
ANR	1985159	UnaryOperator	&		1984928	0					
ANR	1985160	ArrayIndexing	arrIO [ 1 ]		1984928	1					
ANR	1985161	Identifier	arrIO		1984928	0					
ANR	1985162	PrimaryExpression	1		1984928	1					
ANR	1985163	Argument	true		1984928	1					
ANR	1985164	Identifier	true		1984928	0					
ANR	1985165	Argument	false		1984928	2					
ANR	1985166	Identifier	false		1984928	0					
ANR	1985167	Argument	true		1984928	3					
ANR	1985168	Identifier	true		1984928	0					
ANR	1985169	CompoundStatement		39:64:1036:1036	1984928	1					
ANR	1985170	ExpressionStatement	"dprintf ( D_ALWAYS , ""Couldn't create a stdout pipe\\n"" )"	412:4:11410:11462	1984928	0	True				
ANR	1985171	CallExpression	"dprintf ( D_ALWAYS , ""Couldn't create a stdout pipe\\n"" )"		1984928	0					
ANR	1985172	Callee	dprintf		1984928	0					
ANR	1985173	Identifier	dprintf		1984928	0					
ANR	1985174	ArgumentList	D_ALWAYS		1984928	1					
ANR	1985175	Argument	D_ALWAYS		1984928	0					
ANR	1985176	Identifier	D_ALWAYS		1984928	0					
ANR	1985177	Argument	"""Couldn't create a stdout pipe\\n"""		1984928	1					
ANR	1985178	PrimaryExpression	"""Couldn't create a stdout pipe\\n"""		1984928	0					
ANR	1985179	ElseStatement	else		1984928	0					
ANR	1985180	CompoundStatement		41:9:1105:1105	1984928	0					
ANR	1985181	IfStatement	"if ( ! daemonCore -> Register_Pipe ( arrIO [ 1 ] , ""qpid stdout"" , ( PipeHandlercpp ) & Pigeon :: stdoutHandler , ""stdout"" , this ) )"		1984928	0					
ANR	1985182	Condition	"! daemonCore -> Register_Pipe ( arrIO [ 1 ] , ""qpid stdout"" , ( PipeHandlercpp ) & Pigeon :: stdoutHandler , ""stdout"" , this )"	414:8:11483:11611	1984928	0	True				
ANR	1985183	UnaryOperationExpression	"! daemonCore -> Register_Pipe ( arrIO [ 1 ] , ""qpid stdout"" , ( PipeHandlercpp ) & Pigeon :: stdoutHandler , ""stdout"" , this )"		1984928	0					
ANR	1985184	UnaryOperator	!		1984928	0					
ANR	1985185	CallExpression	"daemonCore -> Register_Pipe ( arrIO [ 1 ] , ""qpid stdout"" , ( PipeHandlercpp ) & Pigeon :: stdoutHandler , ""stdout"" , this )"		1984928	1					
ANR	1985186	Callee	daemonCore -> Register_Pipe		1984928	0					
ANR	1985187	PtrMemberAccess	daemonCore -> Register_Pipe		1984928	0					
ANR	1985188	Identifier	daemonCore		1984928	0					
ANR	1985189	Identifier	Register_Pipe		1984928	1					
ANR	1985190	ArgumentList	arrIO [ 1 ]		1984928	1					
ANR	1985191	Argument	arrIO [ 1 ]		1984928	0					
ANR	1985192	ArrayIndexing	arrIO [ 1 ]		1984928	0					
ANR	1985193	Identifier	arrIO		1984928	0					
ANR	1985194	PrimaryExpression	1		1984928	1					
ANR	1985195	Argument	"""qpid stdout"""		1984928	1					
ANR	1985196	PrimaryExpression	"""qpid stdout"""		1984928	0					
ANR	1985197	Argument	( PipeHandlercpp ) & Pigeon :: stdoutHandler		1984928	2					
ANR	1985198	CastExpression	( PipeHandlercpp ) & Pigeon :: stdoutHandler		1984928	0					
ANR	1985199	CastTarget	PipeHandlercpp		1984928	0					
ANR	1985200	UnaryOperationExpression	& Pigeon :: stdoutHandler		1984928	1					
ANR	1985201	UnaryOperator	&		1984928	0					
ANR	1985202	Identifier	Pigeon :: stdoutHandler		1984928	1					
ANR	1985203	Argument	"""stdout"""		1984928	3					
ANR	1985204	PrimaryExpression	"""stdout"""		1984928	0					
ANR	1985205	Argument	this		1984928	4					
ANR	1985206	Identifier	this		1984928	0					
ANR	1985207	CompoundStatement		44:28:1247:1247	1984928	1					
ANR	1985208	ExpressionStatement	"dprintf ( D_ALWAYS , ""Couldn't register stdout pipe\\n"" )"	418:6:11624:11676	1984928	0	True				
ANR	1985209	CallExpression	"dprintf ( D_ALWAYS , ""Couldn't register stdout pipe\\n"" )"		1984928	0					
ANR	1985210	Callee	dprintf		1984928	0					
ANR	1985211	Identifier	dprintf		1984928	0					
ANR	1985212	ArgumentList	D_ALWAYS		1984928	1					
ANR	1985213	Argument	D_ALWAYS		1984928	0					
ANR	1985214	Identifier	D_ALWAYS		1984928	0					
ANR	1985215	Argument	"""Couldn't register stdout pipe\\n"""		1984928	1					
ANR	1985216	PrimaryExpression	"""Couldn't register stdout pipe\\n"""		1984928	0					
ANR	1985217	ElseStatement	else		1984928	0					
ANR	1985218	CompoundStatement		47:11:1345:1345	1984928	0					
ANR	1985219	ExpressionStatement	m_stdOut = arrIO [ 1 ]	420:6:11721:11740	1984928	0	True				
ANR	1985220	AssignmentExpression	m_stdOut = arrIO [ 1 ]		1984928	0		=			
ANR	1985221	Identifier	m_stdOut		1984928	0					
ANR	1985222	ArrayIndexing	arrIO [ 1 ]		1984928	1					
ANR	1985223	Identifier	arrIO		1984928	0					
ANR	1985224	PrimaryExpression	1		1984928	1					
ANR	1985225	IfStatement	"if ( ! daemonCore -> Create_Pipe ( & arrIO [ 2 ] , true , false , true ) )"		1984928	11					
ANR	1985226	Condition	"! daemonCore -> Create_Pipe ( & arrIO [ 2 ] , true , false , true )"	424:6:11759:11813	1984928	0	True				
ANR	1985227	UnaryOperationExpression	"! daemonCore -> Create_Pipe ( & arrIO [ 2 ] , true , false , true )"		1984928	0					
ANR	1985228	UnaryOperator	!		1984928	0					
ANR	1985229	CallExpression	"daemonCore -> Create_Pipe ( & arrIO [ 2 ] , true , false , true )"		1984928	1					
ANR	1985230	Callee	daemonCore -> Create_Pipe		1984928	0					
ANR	1985231	PtrMemberAccess	daemonCore -> Create_Pipe		1984928	0					
ANR	1985232	Identifier	daemonCore		1984928	0					
ANR	1985233	Identifier	Create_Pipe		1984928	1					
ANR	1985234	ArgumentList	& arrIO [ 2 ]		1984928	1					
ANR	1985235	Argument	& arrIO [ 2 ]		1984928	0					
ANR	1985236	UnaryOperationExpression	& arrIO [ 2 ]		1984928	0					
ANR	1985237	UnaryOperator	&		1984928	0					
ANR	1985238	ArrayIndexing	arrIO [ 2 ]		1984928	1					
ANR	1985239	Identifier	arrIO		1984928	0					
ANR	1985240	PrimaryExpression	2		1984928	1					
ANR	1985241	Argument	true		1984928	1					
ANR	1985242	Identifier	true		1984928	0					
ANR	1985243	Argument	false		1984928	2					
ANR	1985244	Identifier	false		1984928	0					
ANR	1985245	Argument	true		1984928	3					
ANR	1985246	Identifier	true		1984928	0					
ANR	1985247	CompoundStatement		52:64:1449:1449	1984928	1					
ANR	1985248	ExpressionStatement	"dprintf ( D_ALWAYS , ""Couldn't create a stderr pipe\\n"" )"	425:4:11823:11875	1984928	0	True				
ANR	1985249	CallExpression	"dprintf ( D_ALWAYS , ""Couldn't create a stderr pipe\\n"" )"		1984928	0					
ANR	1985250	Callee	dprintf		1984928	0					
ANR	1985251	Identifier	dprintf		1984928	0					
ANR	1985252	ArgumentList	D_ALWAYS		1984928	1					
ANR	1985253	Argument	D_ALWAYS		1984928	0					
ANR	1985254	Identifier	D_ALWAYS		1984928	0					
ANR	1985255	Argument	"""Couldn't create a stderr pipe\\n"""		1984928	1					
ANR	1985256	PrimaryExpression	"""Couldn't create a stderr pipe\\n"""		1984928	0					
ANR	1985257	ElseStatement	else		1984928	0					
ANR	1985258	CompoundStatement		54:9:1518:1518	1984928	0					
ANR	1985259	IfStatement	"if ( ! daemonCore -> Register_Pipe ( arrIO [ 2 ] , ""qpid stderr"" , ( PipeHandlercpp ) & Pigeon :: stderrHandler , ""stderr"" , this ) )"		1984928	0					
ANR	1985260	Condition	"! daemonCore -> Register_Pipe ( arrIO [ 2 ] , ""qpid stderr"" , ( PipeHandlercpp ) & Pigeon :: stderrHandler , ""stderr"" , this )"	427:8:11896:12025	1984928	0	True				
ANR	1985261	UnaryOperationExpression	"! daemonCore -> Register_Pipe ( arrIO [ 2 ] , ""qpid stderr"" , ( PipeHandlercpp ) & Pigeon :: stderrHandler , ""stderr"" , this )"		1984928	0					
ANR	1985262	UnaryOperator	!		1984928	0					
ANR	1985263	CallExpression	"daemonCore -> Register_Pipe ( arrIO [ 2 ] , ""qpid stderr"" , ( PipeHandlercpp ) & Pigeon :: stderrHandler , ""stderr"" , this )"		1984928	1					
ANR	1985264	Callee	daemonCore -> Register_Pipe		1984928	0					
ANR	1985265	PtrMemberAccess	daemonCore -> Register_Pipe		1984928	0					
ANR	1985266	Identifier	daemonCore		1984928	0					
ANR	1985267	Identifier	Register_Pipe		1984928	1					
ANR	1985268	ArgumentList	arrIO [ 2 ]		1984928	1					
ANR	1985269	Argument	arrIO [ 2 ]		1984928	0					
ANR	1985270	ArrayIndexing	arrIO [ 2 ]		1984928	0					
ANR	1985271	Identifier	arrIO		1984928	0					
ANR	1985272	PrimaryExpression	2		1984928	1					
ANR	1985273	Argument	"""qpid stderr"""		1984928	1					
ANR	1985274	PrimaryExpression	"""qpid stderr"""		1984928	0					
ANR	1985275	Argument	( PipeHandlercpp ) & Pigeon :: stderrHandler		1984928	2					
ANR	1985276	CastExpression	( PipeHandlercpp ) & Pigeon :: stderrHandler		1984928	0					
ANR	1985277	CastTarget	PipeHandlercpp		1984928	0					
ANR	1985278	UnaryOperationExpression	& Pigeon :: stderrHandler		1984928	1					
ANR	1985279	UnaryOperator	&		1984928	0					
ANR	1985280	Identifier	Pigeon :: stderrHandler		1984928	1					
ANR	1985281	Argument	"""stderr"""		1984928	3					
ANR	1985282	PrimaryExpression	"""stderr"""		1984928	0					
ANR	1985283	Argument	this		1984928	4					
ANR	1985284	Identifier	this		1984928	0					
ANR	1985285	CompoundStatement		57:28:1661:1661	1984928	1					
ANR	1985286	ExpressionStatement	"dprintf ( D_ALWAYS , ""Couldn't register stderr, pipe\\n"" )"	431:6:12038:12091	1984928	0	True				
ANR	1985287	CallExpression	"dprintf ( D_ALWAYS , ""Couldn't register stderr, pipe\\n"" )"		1984928	0					
ANR	1985288	Callee	dprintf		1984928	0					
ANR	1985289	Identifier	dprintf		1984928	0					
ANR	1985290	ArgumentList	D_ALWAYS		1984928	1					
ANR	1985291	Argument	D_ALWAYS		1984928	0					
ANR	1985292	Identifier	D_ALWAYS		1984928	0					
ANR	1985293	Argument	"""Couldn't register stderr, pipe\\n"""		1984928	1					
ANR	1985294	PrimaryExpression	"""Couldn't register stderr, pipe\\n"""		1984928	0					
ANR	1985295	ElseStatement	else		1984928	0					
ANR	1985296	CompoundStatement		60:11:1736:1736	1984928	0					
ANR	1985297	ExpressionStatement	m_stdErr = arrIO [ 2 ]	433:6:12112:12131	1984928	0	True				
ANR	1985298	AssignmentExpression	m_stdErr = arrIO [ 2 ]		1984928	0		=			
ANR	1985299	Identifier	m_stdErr		1984928	0					
ANR	1985300	ArrayIndexing	arrIO [ 2 ]		1984928	1					
ANR	1985301	Identifier	arrIO		1984928	0					
ANR	1985302	PrimaryExpression	2		1984928	1					
ANR	1985303	IdentifierDeclStatement	Directory dir ( m_nameNodeDir . Value ( ) ) ;	437:2:12146:12182	1984928	12	True				
ANR	1985304	IdentifierDecl	dir ( m_nameNodeDir . Value ( ) )		1984928	0					
ANR	1985305	IdentifierDeclType	Directory		1984928	0					
ANR	1985306	Identifier	dir		1984928	1					
ANR	1985307	CallExpression	m_nameNodeDir . Value ( )		1984928	2					
ANR	1985308	Callee	m_nameNodeDir . Value		1984928	0					
ANR	1985309	MemberAccess	m_nameNodeDir . Value		1984928	0					
ANR	1985310	Identifier	m_nameNodeDir		1984928	0					
ANR	1985311	Identifier	Value		1984928	1					
ANR	1985312	ArgumentList			1984928	1					
ANR	1985313	IfStatement	if ( type == QPID_NAMENODE )		1984928	13					
ANR	1985314	Condition	type == QPID_NAMENODE	439:6:12191:12211	1984928	0	True				
ANR	1985315	EqualityExpression	type == QPID_NAMENODE		1984928	0		==			
ANR	1985316	Identifier	type		1984928	0					
ANR	1985317	Identifier	QPID_NAMENODE		1984928	1					
ANR	1985318	CompoundStatement		67:29:1846:1846	1984928	1					
ANR	1985319	ExpressionStatement	arglist . RemoveArg ( 0 )	440:4:12220:12240	1984928	0	True				
ANR	1985320	CallExpression	arglist . RemoveArg ( 0 )		1984928	0					
ANR	1985321	Callee	arglist . RemoveArg		1984928	0					
ANR	1985322	MemberAccess	arglist . RemoveArg		1984928	0					
ANR	1985323	Identifier	arglist		1984928	0					
ANR	1985324	Identifier	RemoveArg		1984928	1					
ANR	1985325	ArgumentList	0		1984928	1					
ANR	1985326	Argument	0		1984928	0					
ANR	1985327	PrimaryExpression	0		1984928	0					
ANR	1985328	ExpressionStatement	"arglist . InsertArg ( m_java . Value ( ) , 0 )"	441:4:12246:12282	1984928	1	True				
ANR	1985329	CallExpression	"arglist . InsertArg ( m_java . Value ( ) , 0 )"		1984928	0					
ANR	1985330	Callee	arglist . InsertArg		1984928	0					
ANR	1985331	MemberAccess	arglist . InsertArg		1984928	0					
ANR	1985332	Identifier	arglist		1984928	0					
ANR	1985333	Identifier	InsertArg		1984928	1					
ANR	1985334	ArgumentList	m_java . Value ( )		1984928	1					
ANR	1985335	Argument	m_java . Value ( )		1984928	0					
ANR	1985336	CallExpression	m_java . Value ( )		1984928	0					
ANR	1985337	Callee	m_java . Value		1984928	0					
ANR	1985338	MemberAccess	m_java . Value		1984928	0					
ANR	1985339	Identifier	m_java		1984928	0					
ANR	1985340	Identifier	Value		1984928	1					
ANR	1985341	ArgumentList			1984928	1					
ANR	1985342	Argument	0		1984928	1					
ANR	1985343	PrimaryExpression	0		1984928	0					
ANR	1985344	IfStatement	if ( dir . Next ( ) == NULL )		1984928	2					
ANR	1985345	Condition	dir . Next ( ) == NULL	443:8:12293:12310	1984928	0	True				
ANR	1985346	EqualityExpression	dir . Next ( ) == NULL		1984928	0		==			
ANR	1985347	CallExpression	dir . Next ( )		1984928	0					
ANR	1985348	Callee	dir . Next		1984928	0					
ANR	1985349	MemberAccess	dir . Next		1984928	0					
ANR	1985350	Identifier	dir		1984928	0					
ANR	1985351	Identifier	Next		1984928	1					
ANR	1985352	ArgumentList			1984928	1					
ANR	1985353	Identifier	NULL		1984928	1					
ANR	1985354	CompoundStatement		80:6:2195:2221	1984928	1					
ANR	1985355	ExpressionStatement	"arglist . AppendArg ( ""-format"" )"	444:6:12321:12349	1984928	0	True				
ANR	1985356	CallExpression	"arglist . AppendArg ( ""-format"" )"		1984928	0					
ANR	1985357	Callee	arglist . AppendArg		1984928	0					
ANR	1985358	MemberAccess	arglist . AppendArg		1984928	0					
ANR	1985359	Identifier	arglist		1984928	0					
ANR	1985360	Identifier	AppendArg		1984928	1					
ANR	1985361	ArgumentList	"""-format"""		1984928	1					
ANR	1985362	Argument	"""-format"""		1984928	0					
ANR	1985363	PrimaryExpression	"""-format"""		1984928	0					
ANR	1985364	IdentifierDeclStatement	MyString argString ;	446:6:12358:12376	1984928	1	True				
ANR	1985365	IdentifierDecl	argString		1984928	0					
ANR	1985366	IdentifierDeclType	MyString		1984928	0					
ANR	1985367	Identifier	argString		1984928	1					
ANR	1985368	ExpressionStatement	arglist . GetArgsStringForDisplay ( & argString )	447:6:12384:12427	1984928	2	True				
ANR	1985369	CallExpression	arglist . GetArgsStringForDisplay ( & argString )		1984928	0					
ANR	1985370	Callee	arglist . GetArgsStringForDisplay		1984928	0					
ANR	1985371	MemberAccess	arglist . GetArgsStringForDisplay		1984928	0					
ANR	1985372	Identifier	arglist		1984928	0					
ANR	1985373	Identifier	GetArgsStringForDisplay		1984928	1					
ANR	1985374	ArgumentList	& argString		1984928	1					
ANR	1985375	Argument	& argString		1984928	0					
ANR	1985376	UnaryOperationExpression	& argString		1984928	0					
ANR	1985377	UnaryOperator	&		1984928	0					
ANR	1985378	Identifier	argString		1984928	1					
ANR	1985379	ExpressionStatement	"dprintf ( D_ALWAYS , ""%s\\n"" , argString . Value ( ) )"	448:6:12435:12479	1984928	3	True				
ANR	1985380	CallExpression	"dprintf ( D_ALWAYS , ""%s\\n"" , argString . Value ( ) )"		1984928	0					
ANR	1985381	Callee	dprintf		1984928	0					
ANR	1985382	Identifier	dprintf		1984928	0					
ANR	1985383	ArgumentList	D_ALWAYS		1984928	1					
ANR	1985384	Argument	D_ALWAYS		1984928	0					
ANR	1985385	Identifier	D_ALWAYS		1984928	0					
ANR	1985386	Argument	"""%s\\n"""		1984928	1					
ANR	1985387	PrimaryExpression	"""%s\\n"""		1984928	0					
ANR	1985388	Argument	argString . Value ( )		1984928	2					
ANR	1985389	CallExpression	argString . Value ( )		1984928	0					
ANR	1985390	Callee	argString . Value		1984928	0					
ANR	1985391	MemberAccess	argString . Value		1984928	0					
ANR	1985392	Identifier	argString		1984928	0					
ANR	1985393	Identifier	Value		1984928	1					
ANR	1985394	ArgumentList			1984928	1					
ANR	1985395	IdentifierDeclStatement	"FILE * fp = my_popen ( arglist , ""w"" , 0 ) ;"	450:6:12488:12524	1984928	4	True				
ANR	1985396	IdentifierDecl	"* fp = my_popen ( arglist , ""w"" , 0 )"		1984928	0					
ANR	1985397	IdentifierDeclType	FILE *		1984928	0					
ANR	1985398	Identifier	fp		1984928	1					
ANR	1985399	AssignmentExpression	"* fp = my_popen ( arglist , ""w"" , 0 )"		1984928	2		=			
ANR	1985400	Identifier	fp		1984928	0					
ANR	1985401	CallExpression	"my_popen ( arglist , ""w"" , 0 )"		1984928	1					
ANR	1985402	Callee	my_popen		1984928	0					
ANR	1985403	Identifier	my_popen		1984928	0					
ANR	1985404	ArgumentList	arglist		1984928	1					
ANR	1985405	Argument	arglist		1984928	0					
ANR	1985406	Identifier	arglist		1984928	0					
ANR	1985407	Argument	"""w"""		1984928	1					
ANR	1985408	PrimaryExpression	"""w"""		1984928	0					
ANR	1985409	Argument	0		1984928	2					
ANR	1985410	PrimaryExpression	0		1984928	0					
ANR	1985411	ExpressionStatement	"fwrite ( ""Y\\n"" , 1 , 2 , fp )"	451:6:12532:12555	1984928	5	True				
ANR	1985412	CallExpression	"fwrite ( ""Y\\n"" , 1 , 2 , fp )"		1984928	0					
ANR	1985413	Callee	fwrite		1984928	0					
ANR	1985414	Identifier	fwrite		1984928	0					
ANR	1985415	ArgumentList	"""Y\\n"""		1984928	1					
ANR	1985416	Argument	"""Y\\n"""		1984928	0					
ANR	1985417	PrimaryExpression	"""Y\\n"""		1984928	0					
ANR	1985418	Argument	1		1984928	1					
ANR	1985419	PrimaryExpression	1		1984928	0					
ANR	1985420	Argument	2		1984928	2					
ANR	1985421	PrimaryExpression	2		1984928	0					
ANR	1985422	Argument	fp		1984928	3					
ANR	1985423	Identifier	fp		1984928	0					
ANR	1985424	IdentifierDeclStatement	int status = my_pclose ( fp ) ;	452:6:12563:12589	1984928	6	True				
ANR	1985425	IdentifierDecl	status = my_pclose ( fp )		1984928	0					
ANR	1985426	IdentifierDeclType	int		1984928	0					
ANR	1985427	Identifier	status		1984928	1					
ANR	1985428	AssignmentExpression	status = my_pclose ( fp )		1984928	2		=			
ANR	1985429	Identifier	status		1984928	0					
ANR	1985430	CallExpression	my_pclose ( fp )		1984928	1					
ANR	1985431	Callee	my_pclose		1984928	0					
ANR	1985432	Identifier	my_pclose		1984928	0					
ANR	1985433	ArgumentList	fp		1984928	1					
ANR	1985434	Argument	fp		1984928	0					
ANR	1985435	Identifier	fp		1984928	0					
ANR	1985436	ExpressionStatement	"dprintf ( D_ALWAYS , ""Performed a format on QPID with status %d\\n"" , status )"	453:6:12597:12669	1984928	7	True				
ANR	1985437	CallExpression	"dprintf ( D_ALWAYS , ""Performed a format on QPID with status %d\\n"" , status )"		1984928	0					
ANR	1985438	Callee	dprintf		1984928	0					
ANR	1985439	Identifier	dprintf		1984928	0					
ANR	1985440	ArgumentList	D_ALWAYS		1984928	1					
ANR	1985441	Argument	D_ALWAYS		1984928	0					
ANR	1985442	Identifier	D_ALWAYS		1984928	0					
ANR	1985443	Argument	"""Performed a format on QPID with status %d\\n"""		1984928	1					
ANR	1985444	PrimaryExpression	"""Performed a format on QPID with status %d\\n"""		1984928	0					
ANR	1985445	Argument	status		1984928	2					
ANR	1985446	Identifier	status		1984928	0					
ANR	1985447	ElseStatement	else		1984928	0					
ANR	1985448	CompoundStatement		92:6:2595:2622	1984928	0					
ANR	1985449	IdentifierDeclStatement	MyString argString ;	456:6:12691:12709	1984928	0	True				
ANR	1985450	IdentifierDecl	argString		1984928	0					
ANR	1985451	IdentifierDeclType	MyString		1984928	0					
ANR	1985452	Identifier	argString		1984928	1					
ANR	1985453	ExpressionStatement	"arglist . AppendArg ( ""-finalize"" )"	457:6:12740:12770	1984928	1	True				
ANR	1985454	CallExpression	"arglist . AppendArg ( ""-finalize"" )"		1984928	0					
ANR	1985455	Callee	arglist . AppendArg		1984928	0					
ANR	1985456	MemberAccess	arglist . AppendArg		1984928	0					
ANR	1985457	Identifier	arglist		1984928	0					
ANR	1985458	Identifier	AppendArg		1984928	1					
ANR	1985459	ArgumentList	"""-finalize"""		1984928	1					
ANR	1985460	Argument	"""-finalize"""		1984928	0					
ANR	1985461	PrimaryExpression	"""-finalize"""		1984928	0					
ANR	1985462	ExpressionStatement	arglist . GetArgsStringForDisplay ( & argString )	459:6:12779:12822	1984928	2	True				
ANR	1985463	CallExpression	arglist . GetArgsStringForDisplay ( & argString )		1984928	0					
ANR	1985464	Callee	arglist . GetArgsStringForDisplay		1984928	0					
ANR	1985465	MemberAccess	arglist . GetArgsStringForDisplay		1984928	0					
ANR	1985466	Identifier	arglist		1984928	0					
ANR	1985467	Identifier	GetArgsStringForDisplay		1984928	1					
ANR	1985468	ArgumentList	& argString		1984928	1					
ANR	1985469	Argument	& argString		1984928	0					
ANR	1985470	UnaryOperationExpression	& argString		1984928	0					
ANR	1985471	UnaryOperator	&		1984928	0					
ANR	1985472	Identifier	argString		1984928	1					
ANR	1985473	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""%s\\n"" , argString . Value ( ) )"	460:6:12830:12877	1984928	3	True				
ANR	1985474	CallExpression	"dprintf ( D_FULLDEBUG , ""%s\\n"" , argString . Value ( ) )"		1984928	0					
ANR	1985475	Callee	dprintf		1984928	0					
ANR	1985476	Identifier	dprintf		1984928	0					
ANR	1985477	ArgumentList	D_FULLDEBUG		1984928	1					
ANR	1985478	Argument	D_FULLDEBUG		1984928	0					
ANR	1985479	Identifier	D_FULLDEBUG		1984928	0					
ANR	1985480	Argument	"""%s\\n"""		1984928	1					
ANR	1985481	PrimaryExpression	"""%s\\n"""		1984928	0					
ANR	1985482	Argument	argString . Value ( )		1984928	2					
ANR	1985483	CallExpression	argString . Value ( )		1984928	0					
ANR	1985484	Callee	argString . Value		1984928	0					
ANR	1985485	MemberAccess	argString . Value		1984928	0					
ANR	1985486	Identifier	argString		1984928	0					
ANR	1985487	Identifier	Value		1984928	1					
ANR	1985488	ArgumentList			1984928	1					
ANR	1985489	IdentifierDeclStatement	"FILE * fp2 = my_popen ( arglist , ""w"" , 0 ) ;"	462:6:12886:12923	1984928	4	True				
ANR	1985490	IdentifierDecl	"* fp2 = my_popen ( arglist , ""w"" , 0 )"		1984928	0					
ANR	1985491	IdentifierDeclType	FILE *		1984928	0					
ANR	1985492	Identifier	fp2		1984928	1					
ANR	1985493	AssignmentExpression	"* fp2 = my_popen ( arglist , ""w"" , 0 )"		1984928	2		=			
ANR	1985494	Identifier	fp2		1984928	0					
ANR	1985495	CallExpression	"my_popen ( arglist , ""w"" , 0 )"		1984928	1					
ANR	1985496	Callee	my_popen		1984928	0					
ANR	1985497	Identifier	my_popen		1984928	0					
ANR	1985498	ArgumentList	arglist		1984928	1					
ANR	1985499	Argument	arglist		1984928	0					
ANR	1985500	Identifier	arglist		1984928	0					
ANR	1985501	Argument	"""w"""		1984928	1					
ANR	1985502	PrimaryExpression	"""w"""		1984928	0					
ANR	1985503	Argument	0		1984928	2					
ANR	1985504	PrimaryExpression	0		1984928	0					
ANR	1985505	ExpressionStatement	"fwrite ( ""Y\\n"" , 1 , 2 , fp2 )"	463:6:12931:12955	1984928	5	True				
ANR	1985506	CallExpression	"fwrite ( ""Y\\n"" , 1 , 2 , fp2 )"		1984928	0					
ANR	1985507	Callee	fwrite		1984928	0					
ANR	1985508	Identifier	fwrite		1984928	0					
ANR	1985509	ArgumentList	"""Y\\n"""		1984928	1					
ANR	1985510	Argument	"""Y\\n"""		1984928	0					
ANR	1985511	PrimaryExpression	"""Y\\n"""		1984928	0					
ANR	1985512	Argument	1		1984928	1					
ANR	1985513	PrimaryExpression	1		1984928	0					
ANR	1985514	Argument	2		1984928	2					
ANR	1985515	PrimaryExpression	2		1984928	0					
ANR	1985516	Argument	fp2		1984928	3					
ANR	1985517	Identifier	fp2		1984928	0					
ANR	1985518	IdentifierDeclStatement	int status = my_pclose ( fp2 ) ;	464:6:12963:12990	1984928	6	True				
ANR	1985519	IdentifierDecl	status = my_pclose ( fp2 )		1984928	0					
ANR	1985520	IdentifierDeclType	int		1984928	0					
ANR	1985521	Identifier	status		1984928	1					
ANR	1985522	AssignmentExpression	status = my_pclose ( fp2 )		1984928	2		=			
ANR	1985523	Identifier	status		1984928	0					
ANR	1985524	CallExpression	my_pclose ( fp2 )		1984928	1					
ANR	1985525	Callee	my_pclose		1984928	0					
ANR	1985526	Identifier	my_pclose		1984928	0					
ANR	1985527	ArgumentList	fp2		1984928	1					
ANR	1985528	Argument	fp2		1984928	0					
ANR	1985529	Identifier	fp2		1984928	0					
ANR	1985530	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Finalized any pending upgrades (status = %d)\\n"" , status )"	465:6:12998:13076	1984928	7	True				
ANR	1985531	CallExpression	"dprintf ( D_FULLDEBUG , ""Finalized any pending upgrades (status = %d)\\n"" , status )"		1984928	0					
ANR	1985532	Callee	dprintf		1984928	0					
ANR	1985533	Identifier	dprintf		1984928	0					
ANR	1985534	ArgumentList	D_FULLDEBUG		1984928	1					
ANR	1985535	Argument	D_FULLDEBUG		1984928	0					
ANR	1985536	Identifier	D_FULLDEBUG		1984928	0					
ANR	1985537	Argument	"""Finalized any pending upgrades (status = %d)\\n"""		1984928	1					
ANR	1985538	PrimaryExpression	"""Finalized any pending upgrades (status = %d)\\n"""		1984928	0					
ANR	1985539	Argument	status		1984928	2					
ANR	1985540	Identifier	status		1984928	0					
ANR	1985541	ExpressionStatement	arglist . RemoveArg ( arglist . Count ( ) - 1 )	469:4:13151:13189	1984928	3	True				
ANR	1985542	CallExpression	arglist . RemoveArg ( arglist . Count ( ) - 1 )		1984928	0					
ANR	1985543	Callee	arglist . RemoveArg		1984928	0					
ANR	1985544	MemberAccess	arglist . RemoveArg		1984928	0					
ANR	1985545	Identifier	arglist		1984928	0					
ANR	1985546	Identifier	RemoveArg		1984928	1					
ANR	1985547	ArgumentList	arglist . Count ( ) - 1		1984928	1					
ANR	1985548	Argument	arglist . Count ( ) - 1		1984928	0					
ANR	1985549	AdditiveExpression	arglist . Count ( ) - 1		1984928	0		-			
ANR	1985550	CallExpression	arglist . Count ( )		1984928	0					
ANR	1985551	Callee	arglist . Count		1984928	0					
ANR	1985552	MemberAccess	arglist . Count		1984928	0					
ANR	1985553	Identifier	arglist		1984928	0					
ANR	1985554	Identifier	Count		1984928	1					
ANR	1985555	ArgumentList			1984928	1					
ANR	1985556	PrimaryExpression	1		1984928	1					
ANR	1985557	ExpressionStatement	"arglist . AppendArg ( ""-upgrade"" )"	473:4:13315:13344	1984928	4	True				
ANR	1985558	CallExpression	"arglist . AppendArg ( ""-upgrade"" )"		1984928	0					
ANR	1985559	Callee	arglist . AppendArg		1984928	0					
ANR	1985560	MemberAccess	arglist . AppendArg		1984928	0					
ANR	1985561	Identifier	arglist		1984928	0					
ANR	1985562	Identifier	AppendArg		1984928	1					
ANR	1985563	ArgumentList	"""-upgrade"""		1984928	1					
ANR	1985564	Argument	"""-upgrade"""		1984928	0					
ANR	1985565	PrimaryExpression	"""-upgrade"""		1984928	0					
ANR	1985566	IdentifierDeclStatement	MyString argString ;	476:2:13353:13371	1984928	14	True				
ANR	1985567	IdentifierDecl	argString		1984928	0					
ANR	1985568	IdentifierDeclType	MyString		1984928	0					
ANR	1985569	Identifier	argString		1984928	1					
ANR	1985570	ExpressionStatement	arglist . GetArgsStringForDisplay ( & argString )	477:2:13375:13418	1984928	15	True				
ANR	1985571	CallExpression	arglist . GetArgsStringForDisplay ( & argString )		1984928	0					
ANR	1985572	Callee	arglist . GetArgsStringForDisplay		1984928	0					
ANR	1985573	MemberAccess	arglist . GetArgsStringForDisplay		1984928	0					
ANR	1985574	Identifier	arglist		1984928	0					
ANR	1985575	Identifier	GetArgsStringForDisplay		1984928	1					
ANR	1985576	ArgumentList	& argString		1984928	1					
ANR	1985577	Argument	& argString		1984928	0					
ANR	1985578	UnaryOperationExpression	& argString		1984928	0					
ANR	1985579	UnaryOperator	&		1984928	0					
ANR	1985580	Identifier	argString		1984928	1					
ANR	1985581	ExpressionStatement	"dprintf ( D_ALWAYS , ""%s\\n"" , argString . Value ( ) )"	478:2:13422:13466	1984928	16	True				
ANR	1985582	CallExpression	"dprintf ( D_ALWAYS , ""%s\\n"" , argString . Value ( ) )"		1984928	0					
ANR	1985583	Callee	dprintf		1984928	0					
ANR	1985584	Identifier	dprintf		1984928	0					
ANR	1985585	ArgumentList	D_ALWAYS		1984928	1					
ANR	1985586	Argument	D_ALWAYS		1984928	0					
ANR	1985587	Identifier	D_ALWAYS		1984928	0					
ANR	1985588	Argument	"""%s\\n"""		1984928	1					
ANR	1985589	PrimaryExpression	"""%s\\n"""		1984928	0					
ANR	1985590	Argument	argString . Value ( )		1984928	2					
ANR	1985591	CallExpression	argString . Value ( )		1984928	0					
ANR	1985592	Callee	argString . Value		1984928	0					
ANR	1985593	MemberAccess	argString . Value		1984928	0					
ANR	1985594	Identifier	argString		1984928	0					
ANR	1985595	Identifier	Value		1984928	1					
ANR	1985596	ArgumentList			1984928	1					
ANR	1985597	ExpressionStatement	"m_pid = daemonCore -> Create_Process ( m_java . Value ( ) , arglist , PRIV_CONDOR_FINAL , m_reaper , FALSE , NULL , NULL , NULL , NULL , arrIO )"	480:2:13471:13662	1984928	17	True				
ANR	1985598	AssignmentExpression	"m_pid = daemonCore -> Create_Process ( m_java . Value ( ) , arglist , PRIV_CONDOR_FINAL , m_reaper , FALSE , NULL , NULL , NULL , NULL , arrIO )"		1984928	0		=			
ANR	1985599	Identifier	m_pid		1984928	0					
ANR	1985600	CallExpression	"daemonCore -> Create_Process ( m_java . Value ( ) , arglist , PRIV_CONDOR_FINAL , m_reaper , FALSE , NULL , NULL , NULL , NULL , arrIO )"		1984928	1					
ANR	1985601	Callee	daemonCore -> Create_Process		1984928	0					
ANR	1985602	PtrMemberAccess	daemonCore -> Create_Process		1984928	0					
ANR	1985603	Identifier	daemonCore		1984928	0					
ANR	1985604	Identifier	Create_Process		1984928	1					
ANR	1985605	ArgumentList	m_java . Value ( )		1984928	1					
ANR	1985606	Argument	m_java . Value ( )		1984928	0					
ANR	1985607	CallExpression	m_java . Value ( )		1984928	0					
ANR	1985608	Callee	m_java . Value		1984928	0					
ANR	1985609	MemberAccess	m_java . Value		1984928	0					
ANR	1985610	Identifier	m_java		1984928	0					
ANR	1985611	Identifier	Value		1984928	1					
ANR	1985612	ArgumentList			1984928	1					
ANR	1985613	Argument	arglist		1984928	1					
ANR	1985614	Identifier	arglist		1984928	0					
ANR	1985615	Argument	PRIV_CONDOR_FINAL		1984928	2					
ANR	1985616	Identifier	PRIV_CONDOR_FINAL		1984928	0					
ANR	1985617	Argument	m_reaper		1984928	3					
ANR	1985618	Identifier	m_reaper		1984928	0					
ANR	1985619	Argument	FALSE		1984928	4					
ANR	1985620	Identifier	FALSE		1984928	0					
ANR	1985621	Argument	NULL		1984928	5					
ANR	1985622	Identifier	NULL		1984928	0					
ANR	1985623	Argument	NULL		1984928	6					
ANR	1985624	Identifier	NULL		1984928	0					
ANR	1985625	Argument	NULL		1984928	7					
ANR	1985626	Identifier	NULL		1984928	0					
ANR	1985627	Argument	NULL		1984928	8					
ANR	1985628	Identifier	NULL		1984928	0					
ANR	1985629	Argument	arrIO		1984928	9					
ANR	1985630	Identifier	arrIO		1984928	0					
ANR	1985631	IfStatement	if ( m_pid == FALSE )		1984928	18					
ANR	1985632	Condition	m_pid == FALSE	492:6:13671:13684	1984928	0	True				
ANR	1985633	EqualityExpression	m_pid == FALSE		1984928	0		==			
ANR	1985634	Identifier	m_pid		1984928	0					
ANR	1985635	Identifier	FALSE		1984928	1					
ANR	1985636	ExpressionStatement	"EXCEPT ( ""Failed to launch qpid process using Create_Process.\\n "" )"	493:4:13692:13756	1984928	1	True				
ANR	1985637	CallExpression	"EXCEPT ( ""Failed to launch qpid process using Create_Process.\\n "" )"		1984928	0					
ANR	1985638	Callee	EXCEPT		1984928	0					
ANR	1985639	Identifier	EXCEPT		1984928	0					
ANR	1985640	ArgumentList	"""Failed to launch qpid process using Create_Process.\\n """		1984928	1					
ANR	1985641	Argument	"""Failed to launch qpid process using Create_Process.\\n """		1984928	0					
ANR	1985642	PrimaryExpression	"""Failed to launch qpid process using Create_Process.\\n """		1984928	0					
ANR	1985643	ExpressionStatement	"dprintf ( D_ALWAYS , ""Launched qpid process %d pid=%d\\n"" , type , m_pid )"	495:2:13761:13828	1984928	19	True				
ANR	1985644	CallExpression	"dprintf ( D_ALWAYS , ""Launched qpid process %d pid=%d\\n"" , type , m_pid )"		1984928	0					
ANR	1985645	Callee	dprintf		1984928	0					
ANR	1985646	Identifier	dprintf		1984928	0					
ANR	1985647	ArgumentList	D_ALWAYS		1984928	1					
ANR	1985648	Argument	D_ALWAYS		1984928	0					
ANR	1985649	Identifier	D_ALWAYS		1984928	0					
ANR	1985650	Argument	"""Launched qpid process %d pid=%d\\n"""		1984928	1					
ANR	1985651	PrimaryExpression	"""Launched qpid process %d pid=%d\\n"""		1984928	0					
ANR	1985652	Argument	type		1984928	2					
ANR	1985653	Identifier	type		1984928	0					
ANR	1985654	Argument	m_pid		1984928	3					
ANR	1985655	Identifier	m_pid		1984928	0					
ANR	1985656	ExpressionStatement	m_state = STATE_RUNNING	496:2:13832:13855	1984928	20	True				
ANR	1985657	AssignmentExpression	m_state = STATE_RUNNING		1984928	0		=			
ANR	1985658	Identifier	m_state		1984928	0					
ANR	1985659	Identifier	STATE_RUNNING		1984928	1					
ANR	1985660	ReturnType	void		1984928	1					
ANR	1985661	Identifier	Pigeon :: startService		1984928	2					
ANR	1985662	ParameterList	int type		1984928	3					
ANR	1985663	Parameter	int type	373:26:10357:10364	1984928	0	True				
ANR	1985664	ParameterType	int		1984928	0					
ANR	1985665	Identifier	type		1984928	1					
ANR	1985666	CFGEntryNode	ENTRY		1984928		True				
ANR	1985667	CFGExitNode	EXIT		1984928		True				
ANR	1985668	Symbol	daemonCore -> Create_Process		1984928						
ANR	1985669	Symbol	log_dir . Value		1984928						
ANR	1985670	Symbol	& arglist		1984928						
ANR	1985671	Symbol	type		1984928						
ANR	1985672	Symbol	dir		1984928						
ANR	1985673	Symbol	dir . Next		1984928						
ANR	1985674	Symbol	& m_classpath		1984928						
ANR	1985675	Symbol	m_state		1984928						
ANR	1985676	Symbol	& Pigeon :: stdoutHandler		1984928						
ANR	1985677	Symbol	ldir		1984928						
ANR	1985678	Symbol	m_pid		1984928						
ANR	1985679	Symbol	argString		1984928						
ANR	1985680	Symbol	daemonCore -> Register_Pipe		1984928						
ANR	1985681	Symbol	NULL		1984928						
ANR	1985682	Symbol	m_stdOut		1984928						
ANR	1985683	Symbol	m_secondaryNodeClass		1984928						
ANR	1985684	Symbol	this		1984928						
ANR	1985685	Symbol	fp2		1984928						
ANR	1985686	Symbol	D_FULLDEBUG		1984928						
ANR	1985687	Symbol	argString . Value		1984928						
ANR	1985688	Symbol	m_nameNodeClass		1984928						
ANR	1985689	Symbol	arglist . Count		1984928						
ANR	1985690	Symbol	* daemonCore		1984928						
ANR	1985691	Symbol	log4jarg		1984928						
ANR	1985692	Symbol	true		1984928						
ANR	1985693	Symbol	QPID_DATANODE		1984928						
ANR	1985694	Symbol	daemonCore -> Create_Pipe		1984928						
ANR	1985695	Symbol	* arrIO		1984928						
ANR	1985696	Symbol	& argString		1984928						
ANR	1985697	Symbol	my_pclose		1984928						
ANR	1985698	Symbol	status		1984928						
ANR	1985699	Symbol	m_nameNodeDir		1984928						
ANR	1985700	Symbol	m_stdErr		1984928						
ANR	1985701	Symbol	fp		1984928						
ANR	1985702	Symbol	arrIO		1984928						
ANR	1985703	Symbol	my_popen		1984928						
ANR	1985704	Symbol	QPID_NAMENODE		1984928						
ANR	1985705	Symbol	param		1984928						
ANR	1985706	Symbol	arglist		1984928						
ANR	1985707	Symbol	daemonCore		1984928						
ANR	1985708	Symbol	m_java		1984928						
ANR	1985709	Symbol	log4jarg . Value		1984928						
ANR	1985710	Symbol	PRIV_CONDOR_FINAL		1984928						
ANR	1985711	Symbol	log4j		1984928						
ANR	1985712	Symbol	m_java . Value		1984928						
ANR	1985713	Symbol	D_ALWAYS		1984928						
ANR	1985714	Symbol	false		1984928						
ANR	1985715	Symbol	QPID_SECONDARY		1984928						
ANR	1985716	Symbol	m_dataNodeClass		1984928						
ANR	1985717	Symbol	log_dir		1984928						
ANR	1985718	Symbol	m_reaper		1984928						
ANR	1985719	Symbol	& Pigeon :: stderrHandler		1984928						
ANR	1985720	Symbol	FALSE		1984928						
ANR	1985721	Symbol	STATE_RUNNING		1984928						
ANR	1985722	Function	Pigeon :: writeXMLParam	499:0:13860:14177							
ANR	1985723	FunctionDef	"Pigeon :: writeXMLParam (const char * key , const char * value , StringList * buff)"		1985722	0					
ANR	1985724	CompoundStatement		499:81:13941:14177	1985722	0					
ANR	1985725	IdentifierDeclStatement	MyString temp ;	500:2:13945:13958	1985722	0	True				
ANR	1985726	IdentifierDecl	temp		1985722	0					
ANR	1985727	IdentifierDeclType	MyString		1985722	0					
ANR	1985728	Identifier	temp		1985722	1					
ANR	1985729	ExpressionStatement	"buff -> append ( ""<property>"" )"	502:2:13963:13989	1985722	1	True				
ANR	1985730	CallExpression	"buff -> append ( ""<property>"" )"		1985722	0					
ANR	1985731	Callee	buff -> append		1985722	0					
ANR	1985732	PtrMemberAccess	buff -> append		1985722	0					
ANR	1985733	Identifier	buff		1985722	0					
ANR	1985734	Identifier	append		1985722	1					
ANR	1985735	ArgumentList	"""<property>"""		1985722	1					
ANR	1985736	Argument	"""<property>"""		1985722	0					
ANR	1985737	PrimaryExpression	"""<property>"""		1985722	0					
ANR	1985738	ExpressionStatement	"temp . sprintf ( ""    <name>%s</name>"" , key )"	504:2:13994:14034	1985722	2	True				
ANR	1985739	CallExpression	"temp . sprintf ( ""    <name>%s</name>"" , key )"		1985722	0					
ANR	1985740	Callee	temp . sprintf		1985722	0					
ANR	1985741	MemberAccess	temp . sprintf		1985722	0					
ANR	1985742	Identifier	temp		1985722	0					
ANR	1985743	Identifier	sprintf		1985722	1					
ANR	1985744	ArgumentList	"""    <name>%s</name>"""		1985722	1					
ANR	1985745	Argument	"""    <name>%s</name>"""		1985722	0					
ANR	1985746	PrimaryExpression	"""    <name>%s</name>"""		1985722	0					
ANR	1985747	Argument	key		1985722	1					
ANR	1985748	Identifier	key		1985722	0					
ANR	1985749	ExpressionStatement	buff -> append ( temp . Value ( ) )	505:2:14038:14064	1985722	3	True				
ANR	1985750	CallExpression	buff -> append ( temp . Value ( ) )		1985722	0					
ANR	1985751	Callee	buff -> append		1985722	0					
ANR	1985752	PtrMemberAccess	buff -> append		1985722	0					
ANR	1985753	Identifier	buff		1985722	0					
ANR	1985754	Identifier	append		1985722	1					
ANR	1985755	ArgumentList	temp . Value ( )		1985722	1					
ANR	1985756	Argument	temp . Value ( )		1985722	0					
ANR	1985757	CallExpression	temp . Value ( )		1985722	0					
ANR	1985758	Callee	temp . Value		1985722	0					
ANR	1985759	MemberAccess	temp . Value		1985722	0					
ANR	1985760	Identifier	temp		1985722	0					
ANR	1985761	Identifier	Value		1985722	1					
ANR	1985762	ArgumentList			1985722	1					
ANR	1985763	ExpressionStatement	"temp . sprintf ( ""    <value>%s</value>"" , value )"	507:2:14069:14113	1985722	4	True				
ANR	1985764	CallExpression	"temp . sprintf ( ""    <value>%s</value>"" , value )"		1985722	0					
ANR	1985765	Callee	temp . sprintf		1985722	0					
ANR	1985766	MemberAccess	temp . sprintf		1985722	0					
ANR	1985767	Identifier	temp		1985722	0					
ANR	1985768	Identifier	sprintf		1985722	1					
ANR	1985769	ArgumentList	"""    <value>%s</value>"""		1985722	1					
ANR	1985770	Argument	"""    <value>%s</value>"""		1985722	0					
ANR	1985771	PrimaryExpression	"""    <value>%s</value>"""		1985722	0					
ANR	1985772	Argument	value		1985722	1					
ANR	1985773	Identifier	value		1985722	0					
ANR	1985774	ExpressionStatement	buff -> append ( temp . Value ( ) )	508:2:14117:14143	1985722	5	True				
ANR	1985775	CallExpression	buff -> append ( temp . Value ( ) )		1985722	0					
ANR	1985776	Callee	buff -> append		1985722	0					
ANR	1985777	PtrMemberAccess	buff -> append		1985722	0					
ANR	1985778	Identifier	buff		1985722	0					
ANR	1985779	Identifier	append		1985722	1					
ANR	1985780	ArgumentList	temp . Value ( )		1985722	1					
ANR	1985781	Argument	temp . Value ( )		1985722	0					
ANR	1985782	CallExpression	temp . Value ( )		1985722	0					
ANR	1985783	Callee	temp . Value		1985722	0					
ANR	1985784	MemberAccess	temp . Value		1985722	0					
ANR	1985785	Identifier	temp		1985722	0					
ANR	1985786	Identifier	Value		1985722	1					
ANR	1985787	ArgumentList			1985722	1					
ANR	1985788	ExpressionStatement	"buff -> append ( ""</property>"" )"	510:2:14148:14175	1985722	6	True				
ANR	1985789	CallExpression	"buff -> append ( ""</property>"" )"		1985722	0					
ANR	1985790	Callee	buff -> append		1985722	0					
ANR	1985791	PtrMemberAccess	buff -> append		1985722	0					
ANR	1985792	Identifier	buff		1985722	0					
ANR	1985793	Identifier	append		1985722	1					
ANR	1985794	ArgumentList	"""</property>"""		1985722	1					
ANR	1985795	Argument	"""</property>"""		1985722	0					
ANR	1985796	PrimaryExpression	"""</property>"""		1985722	0					
ANR	1985797	ReturnType	void		1985722	1					
ANR	1985798	Identifier	Pigeon :: writeXMLParam		1985722	2					
ANR	1985799	ParameterList	"const char * key , const char * value , StringList * buff"		1985722	3					
ANR	1985800	Parameter	const char * key	499:27:13887:13901	1985722	0	True				
ANR	1985801	ParameterType	const char *		1985722	0					
ANR	1985802	Identifier	key		1985722	1					
ANR	1985803	Parameter	const char * value	499:44:13904:13920	1985722	1	True				
ANR	1985804	ParameterType	const char *		1985722	0					
ANR	1985805	Identifier	value		1985722	1					
ANR	1985806	Parameter	StringList * buff	499:63:13923:13938	1985722	2	True				
ANR	1985807	ParameterType	StringList *		1985722	0					
ANR	1985808	Identifier	buff		1985722	1					
ANR	1985809	CFGEntryNode	ENTRY		1985722		True				
ANR	1985810	CFGExitNode	EXIT		1985722		True				
ANR	1985811	Symbol	temp		1985722						
ANR	1985812	Symbol	temp . Value		1985722						
ANR	1985813	Symbol	value		1985722						
ANR	1985814	Symbol	buff		1985722						
ANR	1985815	Symbol	key		1985722						
ANR	1985816	Function	Pigeon :: recurrBuildClasspath	513:0:14180:14610							
ANR	1985817	FunctionDef	Pigeon :: recurrBuildClasspath (const char * path)		1985816	0					
ANR	1985818	CompoundStatement		513:52:14232:14610	1985816	0					
ANR	1985819	IdentifierDeclStatement	Directory dir ( path ) ;	514:2:14236:14255	1985816	0	True				
ANR	1985820	IdentifierDecl	dir ( path )		1985816	0					
ANR	1985821	IdentifierDeclType	Directory		1985816	0					
ANR	1985822	Identifier	dir		1985816	1					
ANR	1985823	Identifier	path		1985816	2					
ANR	1985824	ExpressionStatement	dir . Rewind ( )	515:2:14259:14271	1985816	1	True				
ANR	1985825	CallExpression	dir . Rewind ( )		1985816	0					
ANR	1985826	Callee	dir . Rewind		1985816	0					
ANR	1985827	MemberAccess	dir . Rewind		1985816	0					
ANR	1985828	Identifier	dir		1985816	0					
ANR	1985829	Identifier	Rewind		1985816	1					
ANR	1985830	ArgumentList			1985816	1					
ANR	1985831	IdentifierDeclStatement	const char * ctmp ;	517:2:14276:14292	1985816	2	True				
ANR	1985832	IdentifierDecl	* ctmp		1985816	0					
ANR	1985833	IdentifierDeclType	const char *		1985816	0					
ANR	1985834	Identifier	ctmp		1985816	1					
ANR	1985835	WhileStatement	while ( ( ctmp = dir . Next ( ) ) )		1985816	3					
ANR	1985836	Condition	ctmp = dir . Next ( )	518:10:14304:14322	1985816	0	True				
ANR	1985837	AssignmentExpression	ctmp = dir . Next ( )		1985816	0		=			
ANR	1985838	Identifier	ctmp		1985816	0					
ANR	1985839	CallExpression	dir . Next ( )		1985816	1					
ANR	1985840	Callee	dir . Next		1985816	0					
ANR	1985841	MemberAccess	dir . Next		1985816	0					
ANR	1985842	Identifier	dir		1985816	0					
ANR	1985843	Identifier	Next		1985816	1					
ANR	1985844	ArgumentList			1985816	1					
ANR	1985845	CompoundStatement		7:4:98:138	1985816	1					
ANR	1985846	IdentifierDeclStatement	"const char * match = strstr ( ctmp , "".jar"" ) ;"	519:4:14331:14371	1985816	0	True				
ANR	1985847	IdentifierDecl	"* match = strstr ( ctmp , "".jar"" )"		1985816	0					
ANR	1985848	IdentifierDeclType	const char *		1985816	0					
ANR	1985849	Identifier	match		1985816	1					
ANR	1985850	AssignmentExpression	"* match = strstr ( ctmp , "".jar"" )"		1985816	2		=			
ANR	1985851	Identifier	match		1985816	0					
ANR	1985852	CallExpression	"strstr ( ctmp , "".jar"" )"		1985816	1					
ANR	1985853	Callee	strstr		1985816	0					
ANR	1985854	Identifier	strstr		1985816	0					
ANR	1985855	ArgumentList	ctmp		1985816	1					
ANR	1985856	Argument	ctmp		1985816	0					
ANR	1985857	Identifier	ctmp		1985816	0					
ANR	1985858	Argument	""".jar"""		1985816	1					
ANR	1985859	PrimaryExpression	""".jar"""		1985816	0					
ANR	1985860	IfStatement	if ( match && strlen ( match ) == 4 )		1985816	1					
ANR	1985861	Condition	match && strlen ( match ) == 4	520:8:14381:14407	1985816	0	True				
ANR	1985862	AndExpression	match && strlen ( match ) == 4		1985816	0		&&			
ANR	1985863	Identifier	match		1985816	0					
ANR	1985864	EqualityExpression	strlen ( match ) == 4		1985816	1		==			
ANR	1985865	CallExpression	strlen ( match )		1985816	0					
ANR	1985866	Callee	strlen		1985816	0					
ANR	1985867	Identifier	strlen		1985816	0					
ANR	1985868	ArgumentList	match		1985816	1					
ANR	1985869	Argument	match		1985816	0					
ANR	1985870	Identifier	match		1985816	0					
ANR	1985871	PrimaryExpression	4		1985816	1					
ANR	1985872	CompoundStatement		8:37:177:177	1985816	1					
ANR	1985873	ExpressionStatement	m_classpath . insert ( dir . GetFullPath ( ) )	521:6:14418:14455	1985816	0	True				
ANR	1985874	CallExpression	m_classpath . insert ( dir . GetFullPath ( ) )		1985816	0					
ANR	1985875	Callee	m_classpath . insert		1985816	0					
ANR	1985876	MemberAccess	m_classpath . insert		1985816	0					
ANR	1985877	Identifier	m_classpath		1985816	0					
ANR	1985878	Identifier	insert		1985816	1					
ANR	1985879	ArgumentList	dir . GetFullPath ( )		1985816	1					
ANR	1985880	Argument	dir . GetFullPath ( )		1985816	0					
ANR	1985881	CallExpression	dir . GetFullPath ( )		1985816	0					
ANR	1985882	Callee	dir . GetFullPath		1985816	0					
ANR	1985883	MemberAccess	dir . GetFullPath		1985816	0					
ANR	1985884	Identifier	dir		1985816	0					
ANR	1985885	Identifier	GetFullPath		1985816	1					
ANR	1985886	ArgumentList			1985816	1					
ANR	1985887	ElseStatement	else		1985816	0					
ANR	1985888	IfStatement	if ( dir . IsDirectory ( ) )		1985816	0					
ANR	1985889	Condition	dir . IsDirectory ( )	522:15:14472:14488	1985816	0	True				
ANR	1985890	CallExpression	dir . IsDirectory ( )		1985816	0					
ANR	1985891	Callee	dir . IsDirectory		1985816	0					
ANR	1985892	MemberAccess	dir . IsDirectory		1985816	0					
ANR	1985893	Identifier	dir		1985816	0					
ANR	1985894	Identifier	IsDirectory		1985816	1					
ANR	1985895	ArgumentList			1985816	1					
ANR	1985896	CompoundStatement		10:34:258:258	1985816	1					
ANR	1985897	ExpressionStatement	recurrBuildClasspath ( dir . GetFullPath ( ) )	524:6:14539:14578	1985816	0	True				
ANR	1985898	CallExpression	recurrBuildClasspath ( dir . GetFullPath ( ) )		1985816	0					
ANR	1985899	Callee	recurrBuildClasspath		1985816	0					
ANR	1985900	Identifier	recurrBuildClasspath		1985816	0					
ANR	1985901	ArgumentList	dir . GetFullPath ( )		1985816	1					
ANR	1985902	Argument	dir . GetFullPath ( )		1985816	0					
ANR	1985903	CallExpression	dir . GetFullPath ( )		1985816	0					
ANR	1985904	Callee	dir . GetFullPath		1985816	0					
ANR	1985905	MemberAccess	dir . GetFullPath		1985816	0					
ANR	1985906	Identifier	dir		1985816	0					
ANR	1985907	Identifier	GetFullPath		1985816	1					
ANR	1985908	ArgumentList			1985816	1					
ANR	1985909	ReturnType	void		1985816	1					
ANR	1985910	Identifier	Pigeon :: recurrBuildClasspath		1985816	2					
ANR	1985911	ParameterList	const char * path		1985816	3					
ANR	1985912	Parameter	const char * path	513:34:14214:14229	1985816	0	True				
ANR	1985913	ParameterType	const char *		1985816	0					
ANR	1985914	Identifier	path		1985816	1					
ANR	1985915	CFGEntryNode	ENTRY		1985816		True				
ANR	1985916	CFGExitNode	EXIT		1985816		True				
ANR	1985917	Symbol	dir . GetFullPath		1985816						
ANR	1985918	Symbol	path		1985816						
ANR	1985919	Symbol	strlen		1985816						
ANR	1985920	Symbol	m_classpath		1985816						
ANR	1985921	Symbol	strstr		1985816						
ANR	1985922	Symbol	match		1985816						
ANR	1985923	Symbol	ctmp		1985816						
ANR	1985924	Symbol	dir . IsDirectory		1985816						
ANR	1985925	Symbol	dir		1985816						
ANR	1985926	Symbol	dir . Next		1985816						
ANR	1985927	Function	Pigeon :: publishClassAd	529:0:14613:14917							
ANR	1985928	FunctionDef	Pigeon :: publishClassAd ()		1985927	0					
ANR	1985929	CompoundStatement		529:30:14643:14917	1985927	0					
ANR	1985930	ExpressionStatement	daemonCore -> UpdateLocalAd ( & m_qpidAd )	531:2:14711:14747	1985927	0	True				
ANR	1985931	CallExpression	daemonCore -> UpdateLocalAd ( & m_qpidAd )		1985927	0					
ANR	1985932	Callee	daemonCore -> UpdateLocalAd		1985927	0					
ANR	1985933	PtrMemberAccess	daemonCore -> UpdateLocalAd		1985927	0					
ANR	1985934	Identifier	daemonCore		1985927	0					
ANR	1985935	Identifier	UpdateLocalAd		1985927	1					
ANR	1985936	ArgumentList	& m_qpidAd		1985927	1					
ANR	1985937	Argument	& m_qpidAd		1985927	0					
ANR	1985938	UnaryOperationExpression	& m_qpidAd		1985927	0					
ANR	1985939	UnaryOperator	&		1985927	0					
ANR	1985940	Identifier	m_qpidAd		1985927	1					
ANR	1985941	IdentifierDeclStatement	"int stat = daemonCore -> sendUpdates ( UPDATE_AD_GENERIC , & m_qpidAd , NULL , true ) ;"	532:2:14751:14827	1985927	1	True				
ANR	1985942	IdentifierDecl	"stat = daemonCore -> sendUpdates ( UPDATE_AD_GENERIC , & m_qpidAd , NULL , true )"		1985927	0					
ANR	1985943	IdentifierDeclType	int		1985927	0					
ANR	1985944	Identifier	stat		1985927	1					
ANR	1985945	AssignmentExpression	"stat = daemonCore -> sendUpdates ( UPDATE_AD_GENERIC , & m_qpidAd , NULL , true )"		1985927	2		=			
ANR	1985946	Identifier	stat		1985927	0					
ANR	1985947	CallExpression	"daemonCore -> sendUpdates ( UPDATE_AD_GENERIC , & m_qpidAd , NULL , true )"		1985927	1					
ANR	1985948	Callee	daemonCore -> sendUpdates		1985927	0					
ANR	1985949	PtrMemberAccess	daemonCore -> sendUpdates		1985927	0					
ANR	1985950	Identifier	daemonCore		1985927	0					
ANR	1985951	Identifier	sendUpdates		1985927	1					
ANR	1985952	ArgumentList	UPDATE_AD_GENERIC		1985927	1					
ANR	1985953	Argument	UPDATE_AD_GENERIC		1985927	0					
ANR	1985954	Identifier	UPDATE_AD_GENERIC		1985927	0					
ANR	1985955	Argument	& m_qpidAd		1985927	1					
ANR	1985956	UnaryOperationExpression	& m_qpidAd		1985927	0					
ANR	1985957	UnaryOperator	&		1985927	0					
ANR	1985958	Identifier	m_qpidAd		1985927	1					
ANR	1985959	Argument	NULL		1985927	2					
ANR	1985960	Identifier	NULL		1985927	0					
ANR	1985961	Argument	true		1985927	3					
ANR	1985962	Identifier	true		1985927	0					
ANR	1985963	ExpressionStatement	"dprintf ( D_ALWAYS , ""************************ Updated ClassAds (status = %d)\\n"" , stat )"	533:2:14831:14915	1985927	2	True				
ANR	1985964	CallExpression	"dprintf ( D_ALWAYS , ""************************ Updated ClassAds (status = %d)\\n"" , stat )"		1985927	0					
ANR	1985965	Callee	dprintf		1985927	0					
ANR	1985966	Identifier	dprintf		1985927	0					
ANR	1985967	ArgumentList	D_ALWAYS		1985927	1					
ANR	1985968	Argument	D_ALWAYS		1985927	0					
ANR	1985969	Identifier	D_ALWAYS		1985927	0					
ANR	1985970	Argument	"""************************ Updated ClassAds (status = %d)\\n"""		1985927	1					
ANR	1985971	PrimaryExpression	"""************************ Updated ClassAds (status = %d)\\n"""		1985927	0					
ANR	1985972	Argument	stat		1985927	2					
ANR	1985973	Identifier	stat		1985927	0					
ANR	1985974	ReturnType	void		1985927	1					
ANR	1985975	Identifier	Pigeon :: publishClassAd		1985927	2					
ANR	1985976	ParameterList			1985927	3					
ANR	1985977	CFGEntryNode	ENTRY		1985927		True				
ANR	1985978	CFGExitNode	EXIT		1985927		True				
ANR	1985979	Symbol	stat		1985927						
ANR	1985980	Symbol	NULL		1985927						
ANR	1985981	Symbol	* daemonCore		1985927						
ANR	1985982	Symbol	daemonCore		1985927						
ANR	1985983	Symbol	UPDATE_AD_GENERIC		1985927						
ANR	1985984	Symbol	true		1985927						
ANR	1985985	Symbol	D_ALWAYS		1985927						
ANR	1985986	Symbol	& m_qpidAd		1985927						
ANR	1985987	Symbol	daemonCore -> sendUpdates		1985927						
ANR	1985988	DeclStmt									
ANR	1985989	Decl							char	char [ STDOUT_READBUF_SIZE ]	buff
ANR	1985990	DeclStmt									
ANR	1985991	Decl							int	int	bytes
ANR	1985992	DeclStmt									
ANR	1985993	Decl							int	int	ad_type
ANR	1985994	DeclStmt									
ANR	1985995	Decl							int	int	pos
ANR	1985996	DeclStmt									
ANR	1985997	Decl							MyString	MyString	line
ANR	1985998	DeclStmt									
ANR	1985999	Decl							MyString	MyString	adKey
ANR	1986000	Decl							MyString	MyString	adValue
ANR	1986001	DeclStmt									
ANR	1986002	Decl							char	char [ STDOUT_READBUF_SIZE ]	buff
ANR	1986003	DeclStmt									
ANR	1986004	Decl							int	int	bytes
ANR	1986005	DeclStmt									
ANR	1986006	Decl							int	int	pos
ANR	1986007	DeclStmt									
ANR	1986008	Decl							MyString	MyString	line
ANR	1986009	Function	Pigeon :: getKeyValue	601:0:17122:18162							
ANR	1986010	FunctionDef	"Pigeon :: getKeyValue (MyString line , MyString * key , MyString * value)"		1986009	0					
ANR	1986011	CompoundStatement		601:71:17193:18162	1986009	0					
ANR	1986012	IdentifierDeclStatement	int type = AD_NULL ;	602:2:17197:17215	1986009	0	True				
ANR	1986013	IdentifierDecl	type = AD_NULL		1986009	0					
ANR	1986014	IdentifierDeclType	int		1986009	0					
ANR	1986015	Identifier	type		1986009	1					
ANR	1986016	AssignmentExpression	type = AD_NULL		1986009	2		=			
ANR	1986017	Identifier	AD_NULL		1986009	0					
ANR	1986018	Identifier	AD_NULL		1986009	1					
ANR	1986019	IdentifierDeclStatement	int tokenno = - 1 ;	603:2:17219:17235	1986009	1	True				
ANR	1986020	IdentifierDecl	tokenno = - 1		1986009	0					
ANR	1986021	IdentifierDeclType	int		1986009	0					
ANR	1986022	Identifier	tokenno		1986009	1					
ANR	1986023	AssignmentExpression	tokenno = - 1		1986009	2		=			
ANR	1986024	Identifier	tokenno		1986009	0					
ANR	1986025	UnaryOperationExpression	- 1		1986009	1					
ANR	1986026	UnaryOperator	-		1986009	0					
ANR	1986027	PrimaryExpression	1		1986009	1					
ANR	1986028	IdentifierDeclStatement	char * s1 = 0 ;	604:2:17239:17251	1986009	2	True				
ANR	1986029	IdentifierDecl	* s1 = 0		1986009	0					
ANR	1986030	IdentifierDeclType	char *		1986009	0					
ANR	1986031	Identifier	s1		1986009	1					
ANR	1986032	AssignmentExpression	* s1 = 0		1986009	2		=			
ANR	1986033	Identifier	s1		1986009	0					
ANR	1986034	PrimaryExpression	0		1986009	1					
ANR	1986035	ExpressionStatement	line . Tokenize ( )	606:2:17256:17271	1986009	3	True				
ANR	1986036	CallExpression	line . Tokenize ( )		1986009	0					
ANR	1986037	Callee	line . Tokenize		1986009	0					
ANR	1986038	MemberAccess	line . Tokenize		1986009	0					
ANR	1986039	Identifier	line		1986009	0					
ANR	1986040	Identifier	Tokenize		1986009	1					
ANR	1986041	ArgumentList			1986009	1					
ANR	1986042	Statement	while	608:2:17276:17280	1986009	4	True				
ANR	1986043	Statement	(	608:7:17281:17281	1986009	5	True				
ANR	1986044	Statement	(	608:9:17283:17283	1986009	6	True				
ANR	1986045	Statement	s1	608:10:17284:17285	1986009	7	True				
ANR	1986046	Statement	=	608:13:17287:17287	1986009	8	True				
ANR	1986047	Statement	const_cast	608:15:17289:17298	1986009	9	True				
ANR	1986048	Statement	<	608:25:17299:17299	1986009	10	True				
ANR	1986049	Statement	char	608:26:17300:17303	1986009	11	True				
ANR	1986050	Statement	*	608:30:17304:17304	1986009	12	True				
ANR	1986051	Statement	>	608:31:17305:17305	1986009	13	True				
ANR	1986052	Statement	(	608:32:17306:17306	1986009	14	True				
ANR	1986053	Statement	line	608:33:17307:17310	1986009	15	True				
ANR	1986054	Statement	.	608:37:17311:17311	1986009	16	True				
ANR	1986055	Statement	GetNextToken	608:38:17312:17323	1986009	17	True				
ANR	1986056	Statement	(	608:50:17324:17324	1986009	18	True				
ANR	1986057	Statement	""" """	608:51:17325:17327	1986009	19	True				
ANR	1986058	Statement	","	608:54:17328:17328	1986009	20	True				
ANR	1986059	Statement	true	608:56:17330:17333	1986009	21	True				
ANR	1986060	Statement	)	608:60:17334:17334	1986009	22	True				
ANR	1986061	Statement	)	608:61:17335:17335	1986009	23	True				
ANR	1986062	Statement	)	608:62:17336:17336	1986009	24	True				
ANR	1986063	Statement	!=	608:64:17338:17339	1986009	25	True				
ANR	1986064	Statement	NULL	608:67:17341:17344	1986009	26	True				
ANR	1986065	Statement	)	608:71:17345:17345	1986009	27	True				
ANR	1986066	CompoundStatement		8:73:153:153	1986009	28					
ANR	1986067	ExpressionStatement	tokenno ++	609:4:17353:17362	1986009	0	True				
ANR	1986068	PostIncDecOperationExpression	tokenno ++		1986009	0					
ANR	1986069	Identifier	tokenno		1986009	0					
ANR	1986070	IncDec	++		1986009	1					
ANR	1986071	IfStatement	if ( strlen ( s1 ) < 1 )		1986009	1					
ANR	1986072	Condition	strlen ( s1 ) < 1	611:8:17373:17386	1986009	0	True				
ANR	1986073	RelationalExpression	strlen ( s1 ) < 1		1986009	0		<			
ANR	1986074	CallExpression	strlen ( s1 )		1986009	0					
ANR	1986075	Callee	strlen		1986009	0					
ANR	1986076	Identifier	strlen		1986009	0					
ANR	1986077	ArgumentList	s1		1986009	1					
ANR	1986078	Argument	s1		1986009	0					
ANR	1986079	Identifier	s1		1986009	0					
ANR	1986080	PrimaryExpression	1		1986009	1					
ANR	1986081	GotoStatement	goto end ;	612:6:17395:17403	1986009	1	True				
ANR	1986082	Identifier	end		1986009	0					
ANR	1986083	SwitchStatement	switch ( tokenno )		1986009	2					
ANR	1986084	Condition	tokenno	615:12:17478:17484	1986009	0	True				
ANR	1986085	Identifier	tokenno		1986009	0					
ANR	1986086	CompoundStatement		15:21:293:293	1986009	1					
ANR	1986087	Label	case 0 :	616:6:17495:17501	1986009	0	True				
ANR	1986088	IfStatement	"if ( strcmp ( s1 , ""START_AD"" ) != 0 )"		1986009	1					
ANR	1986089	Condition	"strcmp ( s1 , ""START_AD"" ) != 0"	617:12:17515:17541	1986009	0	True				
ANR	1986090	EqualityExpression	"strcmp ( s1 , ""START_AD"" ) != 0"		1986009	0		!=			
ANR	1986091	CallExpression	"strcmp ( s1 , ""START_AD"" )"		1986009	0					
ANR	1986092	Callee	strcmp		1986009	0					
ANR	1986093	Identifier	strcmp		1986009	0					
ANR	1986094	ArgumentList	s1		1986009	1					
ANR	1986095	Argument	s1		1986009	0					
ANR	1986096	Identifier	s1		1986009	0					
ANR	1986097	Argument	"""START_AD"""		1986009	1					
ANR	1986098	PrimaryExpression	"""START_AD"""		1986009	0					
ANR	1986099	PrimaryExpression	0		1986009	1					
ANR	1986100	GotoStatement	goto end ;	618:10:17555:17563	1986009	1	True				
ANR	1986101	Identifier	end		1986009	0					
ANR	1986102	BreakStatement	break ;	620:8:17574:17579	1986009	2	True				
ANR	1986103	Label	case 1 :	622:6:17588:17594	1986009	3	True				
ANR	1986104	IfStatement	if ( s1 [ 0 ] == 'S' )		1986009	4					
ANR	1986105	Condition	s1 [ 0 ] == 'S'	624:12:17635:17646	1986009	0	True				
ANR	1986106	EqualityExpression	s1 [ 0 ] == 'S'		1986009	0		==			
ANR	1986107	ArrayIndexing	s1 [ 0 ]		1986009	0					
ANR	1986108	Identifier	s1		1986009	0					
ANR	1986109	PrimaryExpression	0		1986009	1					
ANR	1986110	PrimaryExpression	'S'		1986009	1					
ANR	1986111	ExpressionStatement	type = AD_STRING	625:10:17659:17675	1986009	1	True				
ANR	1986112	AssignmentExpression	type = AD_STRING		1986009	0		=			
ANR	1986113	Identifier	type		1986009	0					
ANR	1986114	Identifier	AD_STRING		1986009	1					
ANR	1986115	ElseStatement	else		1986009	0					
ANR	1986116	IfStatement	if ( s1 [ 0 ] == 'I' )		1986009	0					
ANR	1986117	Condition	s1 [ 0 ] == 'I'	626:17:17694:17705	1986009	0	True				
ANR	1986118	EqualityExpression	s1 [ 0 ] == 'I'		1986009	0		==			
ANR	1986119	ArrayIndexing	s1 [ 0 ]		1986009	0					
ANR	1986120	Identifier	s1		1986009	0					
ANR	1986121	PrimaryExpression	0		1986009	1					
ANR	1986122	PrimaryExpression	'I'		1986009	1					
ANR	1986123	ExpressionStatement	type = AD_INT	627:10:17718:17731	1986009	1	True				
ANR	1986124	AssignmentExpression	type = AD_INT		1986009	0		=			
ANR	1986125	Identifier	type		1986009	0					
ANR	1986126	Identifier	AD_INT		1986009	1					
ANR	1986127	ElseStatement	else		1986009	0					
ANR	1986128	IfStatement	if ( s1 [ 0 ] == 'D' )		1986009	0					
ANR	1986129	Condition	s1 [ 0 ] == 'D'	628:17:17750:17761	1986009	0	True				
ANR	1986130	EqualityExpression	s1 [ 0 ] == 'D'		1986009	0		==			
ANR	1986131	ArrayIndexing	s1 [ 0 ]		1986009	0					
ANR	1986132	Identifier	s1		1986009	0					
ANR	1986133	PrimaryExpression	0		1986009	1					
ANR	1986134	PrimaryExpression	'D'		1986009	1					
ANR	1986135	ExpressionStatement	type = AD_DOUBLE	629:10:17774:17790	1986009	1	True				
ANR	1986136	AssignmentExpression	type = AD_DOUBLE		1986009	0		=			
ANR	1986137	Identifier	type		1986009	0					
ANR	1986138	Identifier	AD_DOUBLE		1986009	1					
ANR	1986139	ElseStatement	else		1986009	0					
ANR	1986140	IfStatement	if ( s1 [ 0 ] == 'B' )		1986009	0					
ANR	1986141	Condition	s1 [ 0 ] == 'B'	630:17:17809:17820	1986009	0	True				
ANR	1986142	EqualityExpression	s1 [ 0 ] == 'B'		1986009	0		==			
ANR	1986143	ArrayIndexing	s1 [ 0 ]		1986009	0					
ANR	1986144	Identifier	s1		1986009	0					
ANR	1986145	PrimaryExpression	0		1986009	1					
ANR	1986146	PrimaryExpression	'B'		1986009	1					
ANR	1986147	ExpressionStatement	type = AD_BOOLEAN	631:10:17833:17850	1986009	1	True				
ANR	1986148	AssignmentExpression	type = AD_BOOLEAN		1986009	0		=			
ANR	1986149	Identifier	type		1986009	0					
ANR	1986150	Identifier	AD_BOOLEAN		1986009	1					
ANR	1986151	BreakStatement	break ;	633:8:17861:17866	1986009	5	True				
ANR	1986152	Label	case 2 :	635:6:17875:17881	1986009	6	True				
ANR	1986153	ExpressionStatement	* key = s1	636:8:17891:17900	1986009	7	True				
ANR	1986154	AssignmentExpression	* key = s1		1986009	0		=			
ANR	1986155	UnaryOperationExpression	* key		1986009	0					
ANR	1986156	UnaryOperator	*		1986009	0					
ANR	1986157	Identifier	key		1986009	1					
ANR	1986158	Identifier	s1		1986009	1					
ANR	1986159	BreakStatement	break ;	637:8:17910:17915	1986009	8	True				
ANR	1986160	Label	case 3 :	639:6:17924:17930	1986009	9	True				
ANR	1986161	ExpressionStatement	* value = s1	640:8:17940:17951	1986009	10	True				
ANR	1986162	AssignmentExpression	* value = s1		1986009	0		=			
ANR	1986163	UnaryOperationExpression	* value		1986009	0					
ANR	1986164	UnaryOperator	*		1986009	0					
ANR	1986165	Identifier	value		1986009	1					
ANR	1986166	Identifier	s1		1986009	1					
ANR	1986167	BreakStatement	break ;	641:8:17961:17966	1986009	11	True				
ANR	1986168	Label	case 4 :	643:6:17975:17981	1986009	12	True				
ANR	1986169	IfStatement	"if ( strcmp ( s1 , ""END_AD"" ) != 0 )"		1986009	13					
ANR	1986170	Condition	"strcmp ( s1 , ""END_AD"" ) != 0"	644:12:17995:18019	1986009	0	True				
ANR	1986171	EqualityExpression	"strcmp ( s1 , ""END_AD"" ) != 0"		1986009	0		!=			
ANR	1986172	CallExpression	"strcmp ( s1 , ""END_AD"" )"		1986009	0					
ANR	1986173	Callee	strcmp		1986009	0					
ANR	1986174	Identifier	strcmp		1986009	0					
ANR	1986175	ArgumentList	s1		1986009	1					
ANR	1986176	Argument	s1		1986009	0					
ANR	1986177	Identifier	s1		1986009	0					
ANR	1986178	Argument	"""END_AD"""		1986009	1					
ANR	1986179	PrimaryExpression	"""END_AD"""		1986009	0					
ANR	1986180	PrimaryExpression	0		1986009	1					
ANR	1986181	ExpressionStatement	type = AD_NULL	645:10:18032:18046	1986009	1	True				
ANR	1986182	AssignmentExpression	type = AD_NULL		1986009	0		=			
ANR	1986183	Identifier	type		1986009	0					
ANR	1986184	Identifier	AD_NULL		1986009	1					
ANR	1986185	BreakStatement	break ;	647:8:18057:18062	1986009	14	True				
ANR	1986186	IfStatement	if ( tokenno < 4 )		1986009	29					
ANR	1986187	Condition	tokenno < 4	652:6:18108:18118	1986009	0	True				
ANR	1986188	RelationalExpression	tokenno < 4		1986009	0		<			
ANR	1986189	Identifier	tokenno		1986009	0					
ANR	1986190	PrimaryExpression	4		1986009	1					
ANR	1986191	ExpressionStatement	type = AD_NULL	653:4:18125:18139	1986009	1	True				
ANR	1986192	AssignmentExpression	type = AD_NULL		1986009	0		=			
ANR	1986193	Identifier	type		1986009	0					
ANR	1986194	Identifier	AD_NULL		1986009	1					
ANR	1986195	Label	end :	655:0:18142:18145	1986009	30	True				
ANR	1986196	Identifier	end		1986009	0					
ANR	1986197	ReturnStatement	return type ;	656:2:18149:18160	1986009	31	True				
ANR	1986198	Identifier	type		1986009	0					
ANR	1986199	ReturnType	int		1986009	1					
ANR	1986200	Identifier	Pigeon :: getKeyValue		1986009	2					
ANR	1986201	ParameterList	"MyString line , MyString * key , MyString * value"		1986009	3					
ANR	1986202	Parameter	MyString line	601:24:17146:17158	1986009	0	True				
ANR	1986203	ParameterType	MyString		1986009	0					
ANR	1986204	Identifier	line		1986009	1					
ANR	1986205	Parameter	MyString * key	601:39:17161:17173	1986009	1	True				
ANR	1986206	ParameterType	MyString *		1986009	0					
ANR	1986207	Identifier	key		1986009	1					
ANR	1986208	Parameter	MyString * value	601:54:17176:17190	1986009	2	True				
ANR	1986209	ParameterType	MyString *		1986009	0					
ANR	1986210	Identifier	value		1986009	1					
ANR	1986211	CFGEntryNode	ENTRY		1986009		True				
ANR	1986212	CFGExitNode	EXIT		1986009		True				
ANR	1986213	Symbol	strcmp		1986009						
ANR	1986214	Symbol	AD_STRING		1986009						
ANR	1986215	Symbol	AD_BOOLEAN		1986009						
ANR	1986216	Symbol	line		1986009						
ANR	1986217	Symbol	AD_INT		1986009						
ANR	1986218	Symbol	* s1		1986009						
ANR	1986219	Symbol	AD_DOUBLE		1986009						
ANR	1986220	Symbol	* key		1986009						
ANR	1986221	Symbol	tokenno		1986009						
ANR	1986222	Symbol	type		1986009						
ANR	1986223	Symbol	strlen		1986009						
ANR	1986224	Symbol	* value		1986009						
ANR	1986225	Symbol	value		1986009						
ANR	1986226	Symbol	AD_NULL		1986009						
ANR	1986227	Symbol	key		1986009						
ANR	1986228	Symbol	s1		1986009						
