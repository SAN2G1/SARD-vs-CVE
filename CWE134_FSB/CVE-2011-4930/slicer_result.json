[{"FileName": "credd_before.cpp", "Caller": "SaveCredentialList", "Source": false, "Sink": false, "idx": 0, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 544, "label": -3, "slices": ["  FILE * fp = safe_fopen_wrapper(cred_index_file, \"w\");\n", "  if (!fp) {\n", "  classad::ClassAdXMLUnParser unparser;\n", "  CredentialWrapper * pCred = NULL;\n", "  while (credentials.Next(pCred)) {\n", "    const classad::ClassAd * pclassad = pCred->cred->GetMetadata();\n", "    std::string buff;\n", "    unparser.Unparse (buff, &temp_classad);\n", "    fprintf (fp, \"%s\\n\", buff.c_str());\n", "  fclose (fp);\n"]}, {"FileName": "credd_before.cpp", "Caller": "SaveCredentialList", "Source": false, "Sink": false, "idx": 1, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fclose", "line": 547, "label": -3, "slices": ["  FILE * fp = safe_fopen_wrapper(cred_index_file, \"w\");\n", "  if (!fp) {\n", "  CredentialWrapper * pCred = NULL;\n", "  while (credentials.Next(pCred)) {\n", "    const classad::ClassAd * pclassad = pCred->cred->GetMetadata();\n", "    std::string buff;\n", "    fprintf (fp, \"%s\\n\", buff.c_str());\n", "  fclose (fp);\n"]}, {"FileName": "credd_before.cpp", "Caller": "LoadCredentialList", "Source": false, "Sink": false, "idx": 2, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fgets", "line": 581, "label": -3, "slices": ["  classad::ClassAdXMLParser parser;\n", "  char buff[50000];\n", "  FILE * fp = safe_fopen_wrapper(cred_index_file, \"r\");\n", "  if (!fp) {\n", "  while (fgets(buff, 50000, fp)) {\n", "    if ((buff[0] == '\\n') || (buff[0] == '\\r')) {\n", "\tclassad::ClassAd * classad = parser.ParseClassAd (buff);\n", "    int type=0;\n", "    if ((!classad) || (!classad->EvaluateAttrInt (\"Type\", type))) {\n", "      dprintf (D_ALWAYS, \"Invalid classad %s\\n\", buff);\n", "      fclose (fp);\n", "  fclose (fp);\n"]}, {"FileName": "credd_before.cpp", "Caller": "LoadCredentialList", "Source": false, "Sink": false, "idx": 3, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fclose", "line": 592, "label": -3, "slices": ["  char buff[50000];\n", "  FILE * fp = safe_fopen_wrapper(cred_index_file, \"r\");\n", "  if (!fp) {\n", "  while (fgets(buff, 50000, fp)) {\n", "    if ((buff[0] == '\\n') || (buff[0] == '\\r')) {\n", "\tclassad::ClassAd * classad = parser.ParseClassAd (buff);\n", "    int type=0;\n", "    if ((!classad) || (!classad->EvaluateAttrInt (\"Type\", type))) {\n", "      fclose (fp);\n", "  fclose (fp);\n"]}, {"FileName": "credd_before.cpp", "Caller": "LoadCredentialList", "Source": false, "Sink": false, "idx": 4, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fclose", "line": 604, "label": -3, "slices": ["  char buff[50000];\n", "  FILE * fp = safe_fopen_wrapper(cred_index_file, \"r\");\n", "  if (!fp) {\n", "  while (fgets(buff, 50000, fp)) {\n", "    if ((buff[0] == '\\n') || (buff[0] == '\\r')) {\n", "\tclassad::ClassAd * classad = parser.ParseClassAd (buff);\n", "    int type=0;\n", "    if ((!classad) || (!classad->EvaluateAttrInt (\"Type\", type))) {\n", "      fclose (fp);\n", "  fclose (fp);\n"]}, {"FileName": "credd_before.cpp", "Caller": "RefreshProxyThruMyProxy", "Source": false, "Sink": false, "idx": 5, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "strerror", "line": 709, "label": -3, "slices": ["  const char * proxy_filename = proxy->GetStorageName();\n", "  char * myproxy_host = NULL;\n", "  int status;\n", "  if (((X509Credential*)proxy->cred)->GetMyProxyServerHost() == NULL) {\n", "  time_t now = time(NULL);\n", "  if (proxy->get_delegation_pid != GET_DELEGATION_PID_NONE) {\n", "    time_t time_started = proxy->get_delegation_proc_start_time;\n", "  const char * myproxy_password =((X509Credential*)proxy->cred)->GetRefreshPassword();\n", "  if (status == -1) {\n", "\tdprintf (D_ALWAYS, \"get_delegation pipe() failed: %s\\n\", strerror(errno) );\n", "  const char * username = proxy->cred->GetOrigOwner();\n", "  int myproxy_port = getPortFromAddr (((X509Credential*)proxy->cred)->GetMyProxyServerHost());\n", "  int pid = daemonCore->Create_Process (\n\t\t\t\t\tmyproxy_get_delegation_pgm,\t\t// name\n\t\t\t\t\targs,\t\t\t\t \t\t\t// args\n\t\t\t\t\tPRIV_USER_FINAL,\t\t\t\t// priv\n\t\t\t\t\tmyproxyGetDelegationReaperId,\t// reaper_id\n\t\t\t\t\tFALSE,\t\t\t\t\t\t\t// want_command_port\n\t\t\t\t\t&myEnv,\t\t\t\t\t\t\t// env\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// cwd\t\t\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// family_info\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// sock_inherit_list\n\t\t\t\t\tarrIO);\t\t\t\t\t\t\t// in/out/err streams\n"]}, {"FileName": "credd_before.cpp", "Caller": "RefreshProxyThruMyProxy", "Source": false, "Sink": false, "idx": 6, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "write", "line": 714, "label": -3, "slices": ["int RefreshProxyThruMyProxy(X509CredentialWrapper * proxy)\n", "  const char * proxy_filename = proxy->GetStorageName();\n", "  char * myproxy_host = NULL;\n", "  int status;\n", "  if (((X509Credential*)proxy->cred)->GetMyProxyServerHost() == NULL) {\n", "    dprintf (D_ALWAYS, \"Skipping %s\\n\", proxy->cred->GetName());\n", "  time_t now = time(NULL);\n", "  if (proxy->get_delegation_pid != GET_DELEGATION_PID_NONE) {\n", "    time_t time_started = proxy->get_delegation_proc_start_time;\n", "    if (now - time_started > 500) {\n", "      daemonCore->Send_Signal (proxy->get_delegation_pid, SIGKILL);\n", "  proxy->get_delegation_proc_start_time = now;\n", "  MyString strBuff;\n", "  if (((X509Credential*)proxy->cred)->GetMyProxyServerDN()) {\n", "    strBuff+= ((X509Credential*)proxy->cred)->GetMyProxyServerDN();\n", "  strBuff+=proxy->GetStorageName();\n", "  const char * myproxy_password =((X509Credential*)proxy->cred)->GetRefreshPassword();\n", "  if (myproxy_password == NULL ) {\n", "    dprintf (D_ALWAYS, \"No MyProxy password specified for %s:%s\\n\",\n\t     proxy->cred->GetName(),\n\t     proxy->cred->GetOwner());\n", "    myproxy_password = \"\";\n", "  status = pipe (proxy->get_delegation_password_pipe);\n", "  if (status == -1) {\n", "\tproxy->get_delegation_reset();\n", "  write (proxy->get_delegation_password_pipe[1],\n\t myproxy_password,\n\t strlen (myproxy_password));\n", "  write (proxy->get_delegation_password_pipe[1], \"\\n\", 1);\n", "  const char * username = proxy->cred->GetOrigOwner();\n", "  myproxy_host = getHostFromAddr (((X509Credential*)proxy->cred)->GetMyProxyServerHost());\n", "  int myproxy_port = getPortFromAddr (((X509Credential*)proxy->cred)->GetMyProxyServerHost());\n", "  ArgList args;\n", "  if\t(\t((X509Credential*)proxy->cred)->GetCredentialName() && \n  \t\t\t( ((X509Credential*)proxy->cred)->GetCredentialName() )[0] ) {\n", "\t  args.AppendArg(((X509Credential*)proxy->cred)->GetCredentialName());\n", "  proxy->get_delegation_err_filename = create_temp_file();\n", "  if (proxy->get_delegation_err_filename == NULL) {\n", "\tproxy->get_delegation_reset();\n", "  status = chmod (proxy->get_delegation_err_filename, 0600);\n", "  if (status == -1) {\n", "\tdprintf (D_ALWAYS, \"chmod() get_delegation_err_filename %s failed: %s\\n\",\n\t\t\tproxy->get_delegation_err_filename, strerror(errno) );\n", "\tproxy->get_delegation_reset();\n", "  proxy->get_delegation_err_fd = safe_open_wrapper_follow(proxy->get_delegation_err_filename,O_RDWR);\n", "  if (proxy->get_delegation_err_fd == -1) {\n", "    dprintf (D_ALWAYS, \"Error opening get_delegation file %s: %s\\n\",\n\t     proxy->get_delegation_err_filename, strerror(errno) );\n", "\tproxy->get_delegation_reset();\n", "  int arrIO[3];\n", "  arrIO[0]=proxy->get_delegation_password_pipe[0]; //stdin\n", "  arrIO[2]=proxy->get_delegation_err_fd; // stderr\n", "  char * myproxy_get_delegation_pgm = param (\"MYPROXY_GET_DELEGATION\");\n", "  if (!myproxy_get_delegation_pgm) {\n", "  int pid = daemonCore->Create_Process (\n\t\t\t\t\tmyproxy_get_delegation_pgm,\t\t// name\n\t\t\t\t\targs,\t\t\t\t \t\t\t// args\n\t\t\t\t\tPRIV_USER_FINAL,\t\t\t\t// priv\n\t\t\t\t\tmyproxyGetDelegationReaperId,\t// reaper_id\n\t\t\t\t\tFALSE,\t\t\t\t\t\t\t// want_command_port\n\t\t\t\t\t&myEnv,\t\t\t\t\t\t\t// env\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// cwd\t\t\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// family_info\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// sock_inherit_list\n\t\t\t\t\tarrIO);\t\t\t\t\t\t\t// in/out/err streams\n", "  if (pid == FALSE) {\n", "\tproxy->get_delegation_reset();\n", "  proxy->get_delegation_pid = pid;\n"]}, {"FileName": "credd_before.cpp", "Caller": "RefreshProxyThruMyProxy", "Source": false, "Sink": false, "idx": 7, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "strlen", "line": 714, "label": -3, "slices": ["int RefreshProxyThruMyProxy(X509CredentialWrapper * proxy)\n", "  const char * proxy_filename = proxy->GetStorageName();\n", "  char * myproxy_host = NULL;\n", "  int status;\n", "  if (((X509Credential*)proxy->cred)->GetMyProxyServerHost() == NULL) {\n", "    dprintf (D_ALWAYS, \"Skipping %s\\n\", proxy->cred->GetName());\n", "  time_t now = time(NULL);\n", "  if (proxy->get_delegation_pid != GET_DELEGATION_PID_NONE) {\n", "    time_t time_started = proxy->get_delegation_proc_start_time;\n", "    if (now - time_started > 500) {\n", "      daemonCore->Send_Signal (proxy->get_delegation_pid, SIGKILL);\n", "  proxy->get_delegation_proc_start_time = now;\n", "  MyString strBuff;\n", "  if (((X509Credential*)proxy->cred)->GetMyProxyServerDN()) {\n", "    strBuff+= ((X509Credential*)proxy->cred)->GetMyProxyServerDN();\n", "  strBuff+=proxy->GetStorageName();\n", "  const char * myproxy_password =((X509Credential*)proxy->cred)->GetRefreshPassword();\n", "  if (myproxy_password == NULL ) {\n", "    dprintf (D_ALWAYS, \"No MyProxy password specified for %s:%s\\n\",\n\t     proxy->cred->GetName(),\n\t     proxy->cred->GetOwner());\n", "    myproxy_password = \"\";\n", "  status = pipe (proxy->get_delegation_password_pipe);\n", "  if (status == -1) {\n", "\tproxy->get_delegation_reset();\n", "  write (proxy->get_delegation_password_pipe[1],\n\t myproxy_password,\n\t strlen (myproxy_password));\n", "  write (proxy->get_delegation_password_pipe[1], \"\\n\", 1);\n", "  const char * username = proxy->cred->GetOrigOwner();\n", "  myproxy_host = getHostFromAddr (((X509Credential*)proxy->cred)->GetMyProxyServerHost());\n", "  int myproxy_port = getPortFromAddr (((X509Credential*)proxy->cred)->GetMyProxyServerHost());\n", "  ArgList args;\n", "  if\t(\t((X509Credential*)proxy->cred)->GetCredentialName() && \n  \t\t\t( ((X509Credential*)proxy->cred)->GetCredentialName() )[0] ) {\n", "\t  args.AppendArg(((X509Credential*)proxy->cred)->GetCredentialName());\n", "  proxy->get_delegation_err_filename = create_temp_file();\n", "  if (proxy->get_delegation_err_filename == NULL) {\n", "\tproxy->get_delegation_reset();\n", "  status = chmod (proxy->get_delegation_err_filename, 0600);\n", "  if (status == -1) {\n", "\tdprintf (D_ALWAYS, \"chmod() get_delegation_err_filename %s failed: %s\\n\",\n\t\t\tproxy->get_delegation_err_filename, strerror(errno) );\n", "\tproxy->get_delegation_reset();\n", "  proxy->get_delegation_err_fd = safe_open_wrapper_follow(proxy->get_delegation_err_filename,O_RDWR);\n", "  if (proxy->get_delegation_err_fd == -1) {\n", "    dprintf (D_ALWAYS, \"Error opening get_delegation file %s: %s\\n\",\n\t     proxy->get_delegation_err_filename, strerror(errno) );\n", "\tproxy->get_delegation_reset();\n", "  int arrIO[3];\n", "  arrIO[0]=proxy->get_delegation_password_pipe[0]; //stdin\n", "  arrIO[2]=proxy->get_delegation_err_fd; // stderr\n", "  char * myproxy_get_delegation_pgm = param (\"MYPROXY_GET_DELEGATION\");\n", "  if (!myproxy_get_delegation_pgm) {\n", "  int pid = daemonCore->Create_Process (\n\t\t\t\t\tmyproxy_get_delegation_pgm,\t\t// name\n\t\t\t\t\targs,\t\t\t\t \t\t\t// args\n\t\t\t\t\tPRIV_USER_FINAL,\t\t\t\t// priv\n\t\t\t\t\tmyproxyGetDelegationReaperId,\t// reaper_id\n\t\t\t\t\tFALSE,\t\t\t\t\t\t\t// want_command_port\n\t\t\t\t\t&myEnv,\t\t\t\t\t\t\t// env\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// cwd\t\t\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// family_info\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// sock_inherit_list\n\t\t\t\t\tarrIO);\t\t\t\t\t\t\t// in/out/err streams\n", "  if (pid == FALSE) {\n", "\tproxy->get_delegation_reset();\n", "  proxy->get_delegation_pid = pid;\n"]}, {"FileName": "credd_before.cpp", "Caller": "RefreshProxyThruMyProxy", "Source": false, "Sink": false, "idx": 8, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "write", "line": 717, "label": -3, "slices": ["int RefreshProxyThruMyProxy(X509CredentialWrapper * proxy)\n", "  const char * proxy_filename = proxy->GetStorageName();\n", "  char * myproxy_host = NULL;\n", "  int status;\n", "  if (((X509Credential*)proxy->cred)->GetMyProxyServerHost() == NULL) {\n", "    dprintf (D_ALWAYS, \"Skipping %s\\n\", proxy->cred->GetName());\n", "  time_t now = time(NULL);\n", "  if (proxy->get_delegation_pid != GET_DELEGATION_PID_NONE) {\n", "    time_t time_started = proxy->get_delegation_proc_start_time;\n", "    if (now - time_started > 500) {\n", "      daemonCore->Send_Signal (proxy->get_delegation_pid, SIGKILL);\n", "  proxy->get_delegation_proc_start_time = now;\n", "  MyString strBuff;\n", "  if (((X509Credential*)proxy->cred)->GetMyProxyServerDN()) {\n", "    strBuff+= ((X509Credential*)proxy->cred)->GetMyProxyServerDN();\n", "  strBuff+=proxy->GetStorageName();\n", "  const char * myproxy_password =((X509Credential*)proxy->cred)->GetRefreshPassword();\n", "  if (myproxy_password == NULL ) {\n", "    dprintf (D_ALWAYS, \"No MyProxy password specified for %s:%s\\n\",\n\t     proxy->cred->GetName(),\n\t     proxy->cred->GetOwner());\n", "  status = pipe (proxy->get_delegation_password_pipe);\n", "  if (status == -1) {\n", "\tproxy->get_delegation_reset();\n", "  write (proxy->get_delegation_password_pipe[1],\n\t myproxy_password,\n\t strlen (myproxy_password));\n", "  write (proxy->get_delegation_password_pipe[1], \"\\n\", 1);\n", "  const char * username = proxy->cred->GetOrigOwner();\n", "  myproxy_host = getHostFromAddr (((X509Credential*)proxy->cred)->GetMyProxyServerHost());\n", "  int myproxy_port = getPortFromAddr (((X509Credential*)proxy->cred)->GetMyProxyServerHost());\n", "  ArgList args;\n", "  if\t(\t((X509Credential*)proxy->cred)->GetCredentialName() && \n  \t\t\t( ((X509Credential*)proxy->cred)->GetCredentialName() )[0] ) {\n", "\t  args.AppendArg(((X509Credential*)proxy->cred)->GetCredentialName());\n", "  proxy->get_delegation_err_filename = create_temp_file();\n", "  if (proxy->get_delegation_err_filename == NULL) {\n", "\tproxy->get_delegation_reset();\n", "  status = chmod (proxy->get_delegation_err_filename, 0600);\n", "  if (status == -1) {\n", "\tdprintf (D_ALWAYS, \"chmod() get_delegation_err_filename %s failed: %s\\n\",\n\t\t\tproxy->get_delegation_err_filename, strerror(errno) );\n", "\tproxy->get_delegation_reset();\n", "  proxy->get_delegation_err_fd = safe_open_wrapper_follow(proxy->get_delegation_err_filename,O_RDWR);\n", "  if (proxy->get_delegation_err_fd == -1) {\n", "    dprintf (D_ALWAYS, \"Error opening get_delegation file %s: %s\\n\",\n\t     proxy->get_delegation_err_filename, strerror(errno) );\n", "\tproxy->get_delegation_reset();\n", "  int arrIO[3];\n", "  arrIO[0]=proxy->get_delegation_password_pipe[0]; //stdin\n", "  arrIO[2]=proxy->get_delegation_err_fd; // stderr\n", "  char * myproxy_get_delegation_pgm = param (\"MYPROXY_GET_DELEGATION\");\n", "  if (!myproxy_get_delegation_pgm) {\n", "  int pid = daemonCore->Create_Process (\n\t\t\t\t\tmyproxy_get_delegation_pgm,\t\t// name\n\t\t\t\t\targs,\t\t\t\t \t\t\t// args\n\t\t\t\t\tPRIV_USER_FINAL,\t\t\t\t// priv\n\t\t\t\t\tmyproxyGetDelegationReaperId,\t// reaper_id\n\t\t\t\t\tFALSE,\t\t\t\t\t\t\t// want_command_port\n\t\t\t\t\t&myEnv,\t\t\t\t\t\t\t// env\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// cwd\t\t\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// family_info\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// sock_inherit_list\n\t\t\t\t\tarrIO);\t\t\t\t\t\t\t// in/out/err streams\n", "  if (pid == FALSE) {\n", "\tproxy->get_delegation_reset();\n", "  proxy->get_delegation_pid = pid;\n"]}, {"FileName": "credd_before.cpp", "Caller": "RefreshProxyThruMyProxy", "Source": false, "Sink": false, "idx": 9, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "free", "line": 737, "label": -3, "slices": ["int RefreshProxyThruMyProxy(X509CredentialWrapper * proxy)\n", "  const char * proxy_filename = proxy->GetStorageName();\n", "  char * myproxy_host = NULL;\n", "  int status;\n", "  if (((X509Credential*)proxy->cred)->GetMyProxyServerHost() == NULL) {\n", "  time_t now = time(NULL);\n", "  if (proxy->get_delegation_pid != GET_DELEGATION_PID_NONE) {\n", "    time_t time_started = proxy->get_delegation_proc_start_time;\n", "  proxy->get_delegation_proc_start_time = now;\n", "  const char * myproxy_password =((X509Credential*)proxy->cred)->GetRefreshPassword();\n", "  if (status == -1) {\n", "  const char * username = proxy->cred->GetOrigOwner();\n", "  myproxy_host = getHostFromAddr (((X509Credential*)proxy->cred)->GetMyProxyServerHost());\n", "  int myproxy_port = getPortFromAddr (((X509Credential*)proxy->cred)->GetMyProxyServerHost());\n", "  ArgList args;\n", "  args.AppendArg(myproxy_host);\n", "  if ( myproxy_host != NULL ) {\n", "\t  free ( myproxy_host );\n", "  int pid = daemonCore->Create_Process (\n\t\t\t\t\tmyproxy_get_delegation_pgm,\t\t// name\n\t\t\t\t\targs,\t\t\t\t \t\t\t// args\n\t\t\t\t\tPRIV_USER_FINAL,\t\t\t\t// priv\n\t\t\t\t\tmyproxyGetDelegationReaperId,\t// reaper_id\n\t\t\t\t\tFALSE,\t\t\t\t\t\t\t// want_command_port\n\t\t\t\t\t&myEnv,\t\t\t\t\t\t\t// env\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// cwd\t\t\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// family_info\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// sock_inherit_list\n\t\t\t\t\tarrIO);\t\t\t\t\t\t\t// in/out/err streams\n"]}, {"FileName": "credd_before.cpp", "Caller": "RefreshProxyThruMyProxy", "Source": false, "Sink": false, "idx": 10, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "strerror", "line": 770, "label": -3, "slices": ["  const char * proxy_filename = proxy->GetStorageName();\n", "  char * myproxy_host = NULL;\n", "  int status;\n", "  if (((X509Credential*)proxy->cred)->GetMyProxyServerHost() == NULL) {\n", "  time_t now = time(NULL);\n", "  if (proxy->get_delegation_pid != GET_DELEGATION_PID_NONE) {\n", "    time_t time_started = proxy->get_delegation_proc_start_time;\n", "  const char * myproxy_password =((X509Credential*)proxy->cred)->GetRefreshPassword();\n", "  if (status == -1) {\n", "  const char * username = proxy->cred->GetOrigOwner();\n", "  int myproxy_port = getPortFromAddr (((X509Credential*)proxy->cred)->GetMyProxyServerHost());\n", "  if (proxy->get_delegation_err_filename == NULL) {\n", "\tdprintf (D_ALWAYS, \"get_delegation create_temp_file() failed: %s\\n\",\n\t\t\tstrerror(errno) );\n", "  int pid = daemonCore->Create_Process (\n\t\t\t\t\tmyproxy_get_delegation_pgm,\t\t// name\n\t\t\t\t\targs,\t\t\t\t \t\t\t// args\n\t\t\t\t\tPRIV_USER_FINAL,\t\t\t\t// priv\n\t\t\t\t\tmyproxyGetDelegationReaperId,\t// reaper_id\n\t\t\t\t\tFALSE,\t\t\t\t\t\t\t// want_command_port\n\t\t\t\t\t&myEnv,\t\t\t\t\t\t\t// env\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// cwd\t\t\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// family_info\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// sock_inherit_list\n\t\t\t\t\tarrIO);\t\t\t\t\t\t\t// in/out/err streams\n"]}, {"FileName": "credd_before.cpp", "Caller": "RefreshProxyThruMyProxy", "Source": false, "Sink": false, "idx": 11, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "chmod", "line": 775, "label": -3, "slices": ["int RefreshProxyThruMyProxy(X509CredentialWrapper * proxy)\n", "  const char * proxy_filename = proxy->GetStorageName();\n", "  char * myproxy_host = NULL;\n", "  int status;\n", "  if (((X509Credential*)proxy->cred)->GetMyProxyServerHost() == NULL) {\n", "    dprintf (D_ALWAYS, \"Skipping %s\\n\", proxy->cred->GetName());\n", "  time_t now = time(NULL);\n", "  if (proxy->get_delegation_pid != GET_DELEGATION_PID_NONE) {\n", "    time_t time_started = proxy->get_delegation_proc_start_time;\n", "    if (now - time_started > 500) {\n", "      daemonCore->Send_Signal (proxy->get_delegation_pid, SIGKILL);\n", "  proxy->get_delegation_proc_start_time = now;\n", "  MyString strBuff;\n", "  if (((X509Credential*)proxy->cred)->GetMyProxyServerDN()) {\n", "    strBuff+= ((X509Credential*)proxy->cred)->GetMyProxyServerDN();\n", "  strBuff+=proxy->GetStorageName();\n", "  const char * myproxy_password =((X509Credential*)proxy->cred)->GetRefreshPassword();\n", "  if (myproxy_password == NULL ) {\n", "    dprintf (D_ALWAYS, \"No MyProxy password specified for %s:%s\\n\",\n\t     proxy->cred->GetName(),\n\t     proxy->cred->GetOwner());\n", "  status = pipe (proxy->get_delegation_password_pipe);\n", "  if (status == -1) {\n", "\tproxy->get_delegation_reset();\n", "  write (proxy->get_delegation_password_pipe[1],\n\t myproxy_password,\n\t strlen (myproxy_password));\n", "  write (proxy->get_delegation_password_pipe[1], \"\\n\", 1);\n", "  const char * username = proxy->cred->GetOrigOwner();\n", "  myproxy_host = getHostFromAddr (((X509Credential*)proxy->cred)->GetMyProxyServerHost());\n", "  int myproxy_port = getPortFromAddr (((X509Credential*)proxy->cred)->GetMyProxyServerHost());\n", "  ArgList args;\n", "  if\t(\t((X509Credential*)proxy->cred)->GetCredentialName() && \n  \t\t\t( ((X509Credential*)proxy->cred)->GetCredentialName() )[0] ) {\n", "\t  args.AppendArg(((X509Credential*)proxy->cred)->GetCredentialName());\n", "  proxy->get_delegation_err_filename = create_temp_file();\n", "  if (proxy->get_delegation_err_filename == NULL) {\n", "\tproxy->get_delegation_reset();\n", "  status = chmod (proxy->get_delegation_err_filename, 0600);\n", "  if (status == -1) {\n", "\tdprintf (D_ALWAYS, \"chmod() get_delegation_err_filename %s failed: %s\\n\",\n\t\t\tproxy->get_delegation_err_filename, strerror(errno) );\n", "\tproxy->get_delegation_reset();\n", "  proxy->get_delegation_err_fd = safe_open_wrapper_follow(proxy->get_delegation_err_filename,O_RDWR);\n", "  if (proxy->get_delegation_err_fd == -1) {\n", "    dprintf (D_ALWAYS, \"Error opening get_delegation file %s: %s\\n\",\n\t     proxy->get_delegation_err_filename, strerror(errno) );\n", "\tproxy->get_delegation_reset();\n", "  int arrIO[3];\n", "  arrIO[0]=proxy->get_delegation_password_pipe[0]; //stdin\n", "  arrIO[2]=proxy->get_delegation_err_fd; // stderr\n", "  char * myproxy_get_delegation_pgm = param (\"MYPROXY_GET_DELEGATION\");\n", "  if (!myproxy_get_delegation_pgm) {\n", "  int pid = daemonCore->Create_Process (\n\t\t\t\t\tmyproxy_get_delegation_pgm,\t\t// name\n\t\t\t\t\targs,\t\t\t\t \t\t\t// args\n\t\t\t\t\tPRIV_USER_FINAL,\t\t\t\t// priv\n\t\t\t\t\tmyproxyGetDelegationReaperId,\t// reaper_id\n\t\t\t\t\tFALSE,\t\t\t\t\t\t\t// want_command_port\n\t\t\t\t\t&myEnv,\t\t\t\t\t\t\t// env\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// cwd\t\t\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// family_info\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// sock_inherit_list\n\t\t\t\t\tarrIO);\t\t\t\t\t\t\t// in/out/err streams\n", "  if (pid == FALSE) {\n", "\tproxy->get_delegation_reset();\n", "  proxy->get_delegation_pid = pid;\n"]}, {"FileName": "credd_before.cpp", "Caller": "RefreshProxyThruMyProxy", "Source": false, "Sink": false, "idx": 12, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "strerror", "line": 777, "label": -3, "slices": ["int RefreshProxyThruMyProxy(X509CredentialWrapper * proxy)\n", "  const char * proxy_filename = proxy->GetStorageName();\n", "  char * myproxy_host = NULL;\n", "  int status;\n", "  if (((X509Credential*)proxy->cred)->GetMyProxyServerHost() == NULL) {\n", "    dprintf (D_ALWAYS, \"Skipping %s\\n\", proxy->cred->GetName());\n", "  time_t now = time(NULL);\n", "  if (proxy->get_delegation_pid != GET_DELEGATION_PID_NONE) {\n", "    time_t time_started = proxy->get_delegation_proc_start_time;\n", "    if (now - time_started > 500) {\n", "      daemonCore->Send_Signal (proxy->get_delegation_pid, SIGKILL);\n", "  proxy->get_delegation_proc_start_time = now;\n", "  MyString strBuff;\n", "  if (((X509Credential*)proxy->cred)->GetMyProxyServerDN()) {\n", "    strBuff+= ((X509Credential*)proxy->cred)->GetMyProxyServerDN();\n", "  strBuff+=proxy->GetStorageName();\n", "  const char * myproxy_password =((X509Credential*)proxy->cred)->GetRefreshPassword();\n", "  if (myproxy_password == NULL ) {\n", "    dprintf (D_ALWAYS, \"No MyProxy password specified for %s:%s\\n\",\n\t     proxy->cred->GetName(),\n\t     proxy->cred->GetOwner());\n", "  status = pipe (proxy->get_delegation_password_pipe);\n", "  if (status == -1) {\n", "\tproxy->get_delegation_reset();\n", "  write (proxy->get_delegation_password_pipe[1],\n\t myproxy_password,\n\t strlen (myproxy_password));\n", "  write (proxy->get_delegation_password_pipe[1], \"\\n\", 1);\n", "  const char * username = proxy->cred->GetOrigOwner();\n", "  myproxy_host = getHostFromAddr (((X509Credential*)proxy->cred)->GetMyProxyServerHost());\n", "  int myproxy_port = getPortFromAddr (((X509Credential*)proxy->cred)->GetMyProxyServerHost());\n", "  ArgList args;\n", "  if\t(\t((X509Credential*)proxy->cred)->GetCredentialName() && \n  \t\t\t( ((X509Credential*)proxy->cred)->GetCredentialName() )[0] ) {\n", "\t  args.AppendArg(((X509Credential*)proxy->cred)->GetCredentialName());\n", "  proxy->get_delegation_err_filename = create_temp_file();\n", "  if (proxy->get_delegation_err_filename == NULL) {\n", "\tproxy->get_delegation_reset();\n", "  status = chmod (proxy->get_delegation_err_filename, 0600);\n", "  if (status == -1) {\n", "\tdprintf (D_ALWAYS, \"chmod() get_delegation_err_filename %s failed: %s\\n\",\n\t\t\tproxy->get_delegation_err_filename, strerror(errno) );\n", "\tproxy->get_delegation_reset();\n", "  proxy->get_delegation_err_fd = safe_open_wrapper_follow(proxy->get_delegation_err_filename,O_RDWR);\n", "  if (proxy->get_delegation_err_fd == -1) {\n", "    dprintf (D_ALWAYS, \"Error opening get_delegation file %s: %s\\n\",\n\t     proxy->get_delegation_err_filename, strerror(errno) );\n", "\tproxy->get_delegation_reset();\n", "  int arrIO[3];\n", "  arrIO[0]=proxy->get_delegation_password_pipe[0]; //stdin\n", "  arrIO[2]=proxy->get_delegation_err_fd; // stderr\n", "  char * myproxy_get_delegation_pgm = param (\"MYPROXY_GET_DELEGATION\");\n", "  if (!myproxy_get_delegation_pgm) {\n", "  int pid = daemonCore->Create_Process (\n\t\t\t\t\tmyproxy_get_delegation_pgm,\t\t// name\n\t\t\t\t\targs,\t\t\t\t \t\t\t// args\n\t\t\t\t\tPRIV_USER_FINAL,\t\t\t\t// priv\n\t\t\t\t\tmyproxyGetDelegationReaperId,\t// reaper_id\n\t\t\t\t\tFALSE,\t\t\t\t\t\t\t// want_command_port\n\t\t\t\t\t&myEnv,\t\t\t\t\t\t\t// env\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// cwd\t\t\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// family_info\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// sock_inherit_list\n\t\t\t\t\tarrIO);\t\t\t\t\t\t\t// in/out/err streams\n", "  if (pid == FALSE) {\n", "\tproxy->get_delegation_reset();\n", "  proxy->get_delegation_pid = pid;\n"]}, {"FileName": "credd_before.cpp", "Caller": "RefreshProxyThruMyProxy", "Source": false, "Sink": false, "idx": 13, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "strerror", "line": 786, "label": -3, "slices": ["int RefreshProxyThruMyProxy(X509CredentialWrapper * proxy)\n", "  const char * proxy_filename = proxy->GetStorageName();\n", "  char * myproxy_host = NULL;\n", "  int status;\n", "  if (((X509Credential*)proxy->cred)->GetMyProxyServerHost() == NULL) {\n", "    dprintf (D_ALWAYS, \"Skipping %s\\n\", proxy->cred->GetName());\n", "  time_t now = time(NULL);\n", "  if (proxy->get_delegation_pid != GET_DELEGATION_PID_NONE) {\n", "    time_t time_started = proxy->get_delegation_proc_start_time;\n", "    if (now - time_started > 500) {\n", "      daemonCore->Send_Signal (proxy->get_delegation_pid, SIGKILL);\n", "  proxy->get_delegation_proc_start_time = now;\n", "  MyString strBuff;\n", "  if (((X509Credential*)proxy->cred)->GetMyProxyServerDN()) {\n", "    strBuff+= ((X509Credential*)proxy->cred)->GetMyProxyServerDN();\n", "  strBuff+=proxy->GetStorageName();\n", "  const char * myproxy_password =((X509Credential*)proxy->cred)->GetRefreshPassword();\n", "  if (myproxy_password == NULL ) {\n", "    dprintf (D_ALWAYS, \"No MyProxy password specified for %s:%s\\n\",\n\t     proxy->cred->GetName(),\n\t     proxy->cred->GetOwner());\n", "  status = pipe (proxy->get_delegation_password_pipe);\n", "  if (status == -1) {\n", "\tproxy->get_delegation_reset();\n", "  write (proxy->get_delegation_password_pipe[1],\n\t myproxy_password,\n\t strlen (myproxy_password));\n", "  write (proxy->get_delegation_password_pipe[1], \"\\n\", 1);\n", "  const char * username = proxy->cred->GetOrigOwner();\n", "  myproxy_host = getHostFromAddr (((X509Credential*)proxy->cred)->GetMyProxyServerHost());\n", "  int myproxy_port = getPortFromAddr (((X509Credential*)proxy->cred)->GetMyProxyServerHost());\n", "  ArgList args;\n", "  if\t(\t((X509Credential*)proxy->cred)->GetCredentialName() && \n  \t\t\t( ((X509Credential*)proxy->cred)->GetCredentialName() )[0] ) {\n", "\t  args.AppendArg(((X509Credential*)proxy->cred)->GetCredentialName());\n", "  proxy->get_delegation_err_filename = create_temp_file();\n", "  if (proxy->get_delegation_err_filename == NULL) {\n", "\tproxy->get_delegation_reset();\n", "  status = chmod (proxy->get_delegation_err_filename, 0600);\n", "  if (status == -1) {\n", "\tdprintf (D_ALWAYS, \"chmod() get_delegation_err_filename %s failed: %s\\n\",\n\t\t\tproxy->get_delegation_err_filename, strerror(errno) );\n", "\tproxy->get_delegation_reset();\n", "  proxy->get_delegation_err_fd = safe_open_wrapper_follow(proxy->get_delegation_err_filename,O_RDWR);\n", "  if (proxy->get_delegation_err_fd == -1) {\n", "    dprintf (D_ALWAYS, \"Error opening get_delegation file %s: %s\\n\",\n\t     proxy->get_delegation_err_filename, strerror(errno) );\n", "\tproxy->get_delegation_reset();\n", "  int arrIO[3];\n", "  arrIO[0]=proxy->get_delegation_password_pipe[0]; //stdin\n", "  arrIO[2]=proxy->get_delegation_err_fd; // stderr\n", "  char * myproxy_get_delegation_pgm = param (\"MYPROXY_GET_DELEGATION\");\n", "  if (!myproxy_get_delegation_pgm) {\n", "  int pid = daemonCore->Create_Process (\n\t\t\t\t\tmyproxy_get_delegation_pgm,\t\t// name\n\t\t\t\t\targs,\t\t\t\t \t\t\t// args\n\t\t\t\t\tPRIV_USER_FINAL,\t\t\t\t// priv\n\t\t\t\t\tmyproxyGetDelegationReaperId,\t// reaper_id\n\t\t\t\t\tFALSE,\t\t\t\t\t\t\t// want_command_port\n\t\t\t\t\t&myEnv,\t\t\t\t\t\t\t// env\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// cwd\t\t\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// family_info\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// sock_inherit_list\n\t\t\t\t\tarrIO);\t\t\t\t\t\t\t// in/out/err streams\n", "  if (pid == FALSE) {\n", "\tproxy->get_delegation_reset();\n", "  proxy->get_delegation_pid = pid;\n"]}, {"FileName": "credd_before.cpp", "Caller": "RefreshProxyThruMyProxy", "Source": false, "Sink": false, "idx": 14, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "free", "line": 822, "label": -3, "slices": ["  const char * proxy_filename = proxy->GetStorageName();\n", "  char * myproxy_host = NULL;\n", "  int status;\n", "  if (((X509Credential*)proxy->cred)->GetMyProxyServerHost() == NULL) {\n", "  time_t now = time(NULL);\n", "  if (proxy->get_delegation_pid != GET_DELEGATION_PID_NONE) {\n", "    time_t time_started = proxy->get_delegation_proc_start_time;\n", "  const char * myproxy_password =((X509Credential*)proxy->cred)->GetRefreshPassword();\n", "  if (status == -1) {\n", "  const char * username = proxy->cred->GetOrigOwner();\n", "  int myproxy_port = getPortFromAddr (((X509Credential*)proxy->cred)->GetMyProxyServerHost());\n", "  ArgList args;\n", "  if (proxy->get_delegation_err_filename == NULL) {\n", "  if (status == -1) {\n", "  if (proxy->get_delegation_err_fd == -1) {\n", "  int arrIO[3];\n", "  char * myproxy_get_delegation_pgm = param (\"MYPROXY_GET_DELEGATION\");\n", "  if (!myproxy_get_delegation_pgm) {\n", "  MyString args_string;\n", "  dprintf (D_ALWAYS, \"Calling %s %s\\n\", myproxy_get_delegation_pgm, args_string.Value());\n", "  int pid = daemonCore->Create_Process (\n\t\t\t\t\tmyproxy_get_delegation_pgm,\t\t// name\n\t\t\t\t\targs,\t\t\t\t \t\t\t// args\n\t\t\t\t\tPRIV_USER_FINAL,\t\t\t\t// priv\n\t\t\t\t\tmyproxyGetDelegationReaperId,\t// reaper_id\n\t\t\t\t\tFALSE,\t\t\t\t\t\t\t// want_command_port\n\t\t\t\t\t&myEnv,\t\t\t\t\t\t\t// env\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// cwd\t\t\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// family_info\n\t\t\t\t\tNULL,\t\t\t\t\t\t\t// sock_inherit_list\n\t\t\t\t\tarrIO);\t\t\t\t\t\t\t// in/out/err streams\n", "  free (myproxy_get_delegation_pgm);\n"]}, {"FileName": "credd_before.cpp", "Caller": "isSuperUser", "Source": false, "Sink": false, "idx": 15, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "strcmp", "line": 957, "label": -3, "slices": ["isSuperUser( const char* user )\n", "  if( ! (user)) {\n", "  char * next;\n", "  while ((next = super_users.next())) {\n", "    if (strcmp (user, next ) == 0) {\n"]}, {"FileName": "credd_before.cpp", "Caller": "Init", "Source": false, "Sink": false, "idx": 16, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "free", "line": 971, "label": -3, "slices": ["  char * tmp = param( \"CRED_SUPER_USERS\" );\n", "  if( tmp ) {\n", "    super_users.initializeFromString( tmp );\n", "    free( tmp );\n", "  char * spool = param (\"SPOOL\");\n"]}, {"FileName": "credd_before.cpp", "Caller": "Init", "Source": false, "Sink": false, "idx": 17, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "free", "line": 989, "label": -3, "slices": ["  char * tmp = param( \"CRED_SUPER_USERS\" );\n", "  char * spool = param (\"SPOOL\");\n", "  if ( tmp ) {\n", "else\n", "    cred_store_dir = dircat (spool, \"cred\");\n", "  if ( spool != NULL ) {\n", "\t  free (spool);\n"]}, {"FileName": "credd_before.cpp", "Caller": "Init", "Source": false, "Sink": false, "idx": 18, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "close", "line": 1020, "label": -3, "slices": ["  char * tmp = param( \"CRED_SUPER_USERS\" );\n", "  char * spool = param (\"SPOOL\");\n", "  tmp = param ( \"CRED_STORE_DIR\" );\n", "  if ( tmp ) {\n", "    cred_store_dir = tmp;\n", "else\n", "    cred_store_dir = dircat (spool, \"cred\");\n", "  tmp = param ( \"CRED_INDEX_FILE\" );\n", "  if (tmp ) {\n", "    cred_index_file = tmp;\n", "else\n", "    cred_index_file = dircat (cred_store_dir, \"cred-index\");\n", "  if (stat (cred_index_file, &stat_buff)) {\n", "    int fd = safe_open_wrapper_follow(cred_index_file, O_WRONLY | O_CREAT | O_TRUNC, 0600);\n", "    if (fd != -1) {\n", "      close (fd);\n"]}, {"FileName": "credd_before.cpp", "Caller": "StoreData", "Source": false, "Sink": false, "idx": 19, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "write", "line": 1060, "label": -3, "slices": ["StoreData (const char * file_name, const void * data, const int data_size) {\n", "  if (!data) {\n", "  int fd = safe_open_wrapper_follow(file_name, O_WRONLY | O_CREAT | O_TRUNC, 0600 );\n", "  if (fd == -1) {\n", "  fchmod (fd, S_IRUSR | S_IWUSR);\n", "  fchown (fd, get_user_uid(), get_user_gid());\n", "  write (fd, data, data_size);\n", "  close (fd);\n"]}, {"FileName": "credd_before.cpp", "Caller": "StoreData", "Source": false, "Sink": false, "idx": 20, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "close", "line": 1062, "label": -3, "slices": ["StoreData (const char * file_name, const void * data, const int data_size) {\n", "  if (!data) {\n", "  int fd = safe_open_wrapper_follow(file_name, O_WRONLY | O_CREAT | O_TRUNC, 0600 );\n", "  if (fd == -1) {\n", "  fchmod (fd, S_IRUSR | S_IWUSR);\n", "  fchown (fd, get_user_uid(), get_user_gid());\n", "  write (fd, data, data_size);\n", "  close (fd);\n"]}, {"FileName": "credd_before.cpp", "Caller": "LoadData", "Source": false, "Sink": false, "idx": 21, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "fprintf", "line": 1074, "label": -3, "slices": ["LoadData (const char * file_name, void *& data, int & data_size) {\n", "  int fd = safe_open_wrapper_follow(file_name, O_RDONLY);\n", "  if (fd == -1) {\n", "    fprintf (stderr, \"Can't open %s\\n\", file_name);\n"]}, {"FileName": "credd_before.cpp", "Caller": "LoadData", "Source": false, "Sink": false, "idx": 22, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "read", "line": 1080, "label": -3, "slices": ["LoadData (const char * file_name, void *& data, int & data_size) {\n", "  int fd = safe_open_wrapper_follow(file_name, O_RDONLY);\n", "  if (fd == -1) {\n", "  char buff [MAX_CRED_DATA_SIZE+1];\n", "  data_size = read (fd, buff, MAX_CRED_DATA_SIZE);\n", "  close (fd);\n", "  if (data_size <= 0) {\n", "  data = malloc (data_size);\n", "  memcpy (data, buff, data_size);\n"]}, {"FileName": "credd_before.cpp", "Caller": "LoadData", "Source": false, "Sink": false, "idx": 23, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "close", "line": 1082, "label": -3, "slices": ["LoadData (const char * file_name, void *& data, int & data_size) {\n", "  int fd = safe_open_wrapper_follow(file_name, O_RDONLY);\n", "  if (fd == -1) {\n", "  char buff [MAX_CRED_DATA_SIZE+1];\n", "  data_size = read (fd, buff, MAX_CRED_DATA_SIZE);\n", "  close (fd);\n"]}, {"FileName": "credd_before.cpp", "Caller": "LoadData", "Source": false, "Sink": false, "idx": 24, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "malloc", "line": 1089, "label": -3, "slices": ["LoadData (const char * file_name, void *& data, int & data_size) {\n", "  int fd = safe_open_wrapper_follow(file_name, O_RDONLY);\n", "  if (fd == -1) {\n", "  char buff [MAX_CRED_DATA_SIZE+1];\n", "  data_size = read (fd, buff, MAX_CRED_DATA_SIZE);\n", "  if (data_size <= 0) {\n", "  data = malloc (data_size);\n", "  memcpy (data, buff, data_size);\n"]}, {"FileName": "credd_before.cpp", "Caller": "LoadData", "Source": false, "Sink": false, "idx": 25, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "memcpy", "line": 1091, "label": -3, "slices": ["LoadData (const char * file_name, void *& data, int & data_size) {\n", "  int fd = safe_open_wrapper_follow(file_name, O_RDONLY);\n", "  if (fd == -1) {\n", "  char buff [MAX_CRED_DATA_SIZE+1];\n", "  data_size = read (fd, buff, MAX_CRED_DATA_SIZE);\n", "  if (data_size <= 0) {\n", "  data = malloc (data_size);\n", "  memcpy (data, buff, data_size);\n"]}, {"FileName": "credd_before.cpp", "Caller": "init_user_id_from_FQN", "Source": false, "Sink": false, "idx": 26, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "strdup", "line": 1108, "label": -3, "slices": ["init_user_id_from_FQN (const char * _fqn) {\n", "  char * uid = NULL;\n", "  char * domain = NULL;\n", "  char * fqn = NULL;\n", "  if (_fqn) {\n", "    fqn = strdup (_fqn);\n", "    uid = fqn;\n", "    char * pAt = strchr (fqn, '@');\n", "    if (pAt) {\n", "      *pAt='\\0';\n", "      domain = pAt+1;\n", "  int rc = init_user_ids (uid, domain);\n", "  dprintf (D_FULLDEBUG, \"Switching to user %s@%s, result = %d\\n\", uid, domain, rc);\n", "  if (fqn)\n", "    free (fqn);\n", "  return rc;\n"]}, {"FileName": "credd_before.cpp", "Caller": "init_user_id_from_FQN", "Source": false, "Sink": false, "idx": 27, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "strchr", "line": 1112, "label": -3, "slices": ["init_user_id_from_FQN (const char * _fqn) {\n", "  char * uid = NULL;\n", "  char * domain = NULL;\n", "  char * fqn = NULL;\n", "  if (_fqn) {\n", "    fqn = strdup (_fqn);\n", "    uid = fqn;\n", "    char * pAt = strchr (fqn, '@');\n", "    if (pAt) {\n", "      *pAt='\\0';\n", "      domain = pAt+1;\n", "  int rc = init_user_ids (uid, domain);\n", "  dprintf (D_FULLDEBUG, \"Switching to user %s@%s, result = %d\\n\", uid, domain, rc);\n", "  if (fqn)\n", "    free (fqn);\n", "  return rc;\n"]}, {"FileName": "credd_before.cpp", "Caller": "init_user_id_from_FQN", "Source": false, "Sink": false, "idx": 28, "CWE-ID": "CWE-", "category": "CallExpression", "criterion": "free", "line": 1127, "label": -3, "slices": ["init_user_id_from_FQN (const char * _fqn) {\n", "  char * uid = NULL;\n", "  char * domain = NULL;\n", "  char * fqn = NULL;\n", "  if (_fqn) {\n", "    fqn = strdup (_fqn);\n", "    uid = fqn;\n", "    char * pAt = strchr (fqn, '@');\n", "  int rc = init_user_ids (uid, domain);\n", "  if (fqn)\n", "    free (fqn);\n"]}]