command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	335909	File	data/converged/CVE-2015-8617_php-src/Zend_zend_operators.h								
ANR	335910	DeclStmt									
ANR	335911	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	add_function
ANR	335912	DeclStmt									
ANR	335913	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	sub_function
ANR	335914	DeclStmt									
ANR	335915	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	mul_function
ANR	335916	DeclStmt									
ANR	335917	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	pow_function
ANR	335918	DeclStmt									
ANR	335919	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	div_function
ANR	335920	DeclStmt									
ANR	335921	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	mod_function
ANR	335922	DeclStmt									
ANR	335923	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	boolean_xor_function
ANR	335924	DeclStmt									
ANR	335925	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 )"	boolean_not_function
ANR	335926	DeclStmt									
ANR	335927	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 )"	bitwise_not_function
ANR	335928	DeclStmt									
ANR	335929	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	bitwise_or_function
ANR	335930	DeclStmt									
ANR	335931	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	bitwise_and_function
ANR	335932	DeclStmt									
ANR	335933	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	bitwise_xor_function
ANR	335934	DeclStmt									
ANR	335935	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	shift_left_function
ANR	335936	DeclStmt									
ANR	335937	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	shift_right_function
ANR	335938	DeclStmt									
ANR	335939	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	concat_function
ANR	335940	DeclStmt									
ANR	335941	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * op1 , zval * op2 )"	zend_is_identical
ANR	335942	DeclStmt									
ANR	335943	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	is_equal_function
ANR	335944	DeclStmt									
ANR	335945	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	is_identical_function
ANR	335946	DeclStmt									
ANR	335947	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	is_not_identical_function
ANR	335948	DeclStmt									
ANR	335949	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	is_not_equal_function
ANR	335950	DeclStmt									
ANR	335951	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	is_smaller_function
ANR	335952	DeclStmt									
ANR	335953	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	is_smaller_or_equal_function
ANR	335954	DeclStmt									
ANR	335955	Decl							ZEND_API zend_bool ZEND_FASTCALL	"ZEND_API zend_bool ZEND_FASTCALL ( const zend_class_entry * instance_ce , const zend_class_entry * ce , zend_bool interfaces_only )"	instanceof_function_ex
ANR	335956	DeclStmt									
ANR	335957	Decl							ZEND_API zend_bool ZEND_FASTCALL	"ZEND_API zend_bool ZEND_FASTCALL ( const zend_class_entry * instance_ce , const zend_class_entry * ce )"	instanceof_function
ANR	335958	DeclStmt									
ANR	335959	Decl							ZEND_API zend_uchar ZEND_FASTCALL	"ZEND_API zend_uchar ZEND_FASTCALL ( const char * str , size_t length , zend_long * lval , double * dval , int allow_errors , int * oflow_info )"	_is_numeric_string_ex
ANR	335960	DeclStmt									
ANR	335961	Decl							ZEND_FASTCALL	"ZEND_FASTCALL ( const char * haystack , const char * needle , size_t needle_len , const char * end )"	zend_memnstr_ex
ANR	335962	DeclStmt									
ANR	335963	Decl							ZEND_FASTCALL	"ZEND_FASTCALL ( const char * haystack , const char * needle , size_t needle_len , const char * end )"	zend_memnrstr_ex
ANR	335964	Function	zend_dval_to_lval	104:0:5311:5507							
ANR	335965	FunctionDef	zend_dval_to_lval (double d)		335964	0					
ANR	335966	CompoundStatement		105:0:5375:5507	335964	0					
ANR	335967	IfStatement	if ( EXPECTED ( zend_finite ( d ) ) && EXPECTED ( ! zend_isnan ( d ) ) )		335964	0					
ANR	335968	Condition	EXPECTED ( zend_finite ( d ) ) && EXPECTED ( ! zend_isnan ( d ) )	106:8:5385:5436	335964	0	True				
ANR	335969	AndExpression	EXPECTED ( zend_finite ( d ) ) && EXPECTED ( ! zend_isnan ( d ) )		335964	0		&&			
ANR	335970	CallExpression	EXPECTED ( zend_finite ( d ) )		335964	0					
ANR	335971	Callee	EXPECTED		335964	0					
ANR	335972	Identifier	EXPECTED		335964	0					
ANR	335973	ArgumentList	zend_finite ( d )		335964	1					
ANR	335974	Argument	zend_finite ( d )		335964	0					
ANR	335975	CallExpression	zend_finite ( d )		335964	0					
ANR	335976	Callee	zend_finite		335964	0					
ANR	335977	Identifier	zend_finite		335964	0					
ANR	335978	ArgumentList	d		335964	1					
ANR	335979	Argument	d		335964	0					
ANR	335980	Identifier	d		335964	0					
ANR	335981	CallExpression	EXPECTED ( ! zend_isnan ( d ) )		335964	1					
ANR	335982	Callee	EXPECTED		335964	0					
ANR	335983	Identifier	EXPECTED		335964	0					
ANR	335984	ArgumentList	! zend_isnan ( d )		335964	1					
ANR	335985	Argument	! zend_isnan ( d )		335964	0					
ANR	335986	UnaryOperationExpression	! zend_isnan ( d )		335964	0					
ANR	335987	UnaryOperator	!		335964	0					
ANR	335988	CallExpression	zend_isnan ( d )		335964	1					
ANR	335989	Callee	zend_isnan		335964	0					
ANR	335990	Identifier	zend_isnan		335964	0					
ANR	335991	ArgumentList	d		335964	1					
ANR	335992	Argument	d		335964	0					
ANR	335993	Identifier	d		335964	0					
ANR	335994	CompoundStatement		2:62:63:63	335964	1					
ANR	335995	ReturnStatement	return ( zend_long ) d ;	107:8:5449:5468	335964	0	True				
ANR	335996	CastExpression	( zend_long ) d		335964	0					
ANR	335997	CastTarget	zend_long		335964	0					
ANR	335998	Identifier	d		335964	1					
ANR	335999	ElseStatement	else		335964	0					
ANR	336000	CompoundStatement		4:11:105:105	335964	0					
ANR	336001	ReturnStatement	return 0 ;	109:8:5491:5499	335964	0	True				
ANR	336002	PrimaryExpression	0		335964	0					
ANR	336003	ReturnType	static zend_always_inline zend_long		335964	1					
ANR	336004	Identifier	zend_dval_to_lval		335964	2					
ANR	336005	ParameterList	double d		335964	3					
ANR	336006	Parameter	double d	104:54:5365:5372	335964	0	True				
ANR	336007	ParameterType	double		335964	0					
ANR	336008	Identifier	d		335964	1					
ANR	336009	CFGEntryNode	ENTRY		335964		True				
ANR	336010	CFGExitNode	EXIT		335964		True				
ANR	336011	Symbol	zend_finite		335964						
ANR	336012	Symbol	d		335964						
ANR	336013	Symbol	zend_isnan		335964						
ANR	336014	Symbol	EXPECTED		335964						
ANR	336015	DeclStmt									
ANR	336016	Decl							ZEND_API zend_long ZEND_FASTCALL	ZEND_API zend_long ZEND_FASTCALL ( double d )	zend_dval_to_lval_slow
ANR	336017	Function	zend_dval_to_lval	115:0:5583:5828							
ANR	336018	FunctionDef	zend_dval_to_lval (double d)		336017	0					
ANR	336019	CompoundStatement		116:0:5647:5828	336017	0					
ANR	336020	IfStatement	if ( UNEXPECTED ( ! zend_finite ( d ) ) || UNEXPECTED ( zend_isnan ( d ) ) )		336017	0					
ANR	336021	Condition	UNEXPECTED ( ! zend_finite ( d ) ) || UNEXPECTED ( zend_isnan ( d ) )	117:5:5654:5709	336017	0	True				
ANR	336022	OrExpression	UNEXPECTED ( ! zend_finite ( d ) ) || UNEXPECTED ( zend_isnan ( d ) )		336017	0		||			
ANR	336023	CallExpression	UNEXPECTED ( ! zend_finite ( d ) )		336017	0					
ANR	336024	Callee	UNEXPECTED		336017	0					
ANR	336025	Identifier	UNEXPECTED		336017	0					
ANR	336026	ArgumentList	! zend_finite ( d )		336017	1					
ANR	336027	Argument	! zend_finite ( d )		336017	0					
ANR	336028	UnaryOperationExpression	! zend_finite ( d )		336017	0					
ANR	336029	UnaryOperator	!		336017	0					
ANR	336030	CallExpression	zend_finite ( d )		336017	1					
ANR	336031	Callee	zend_finite		336017	0					
ANR	336032	Identifier	zend_finite		336017	0					
ANR	336033	ArgumentList	d		336017	1					
ANR	336034	Argument	d		336017	0					
ANR	336035	Identifier	d		336017	0					
ANR	336036	CallExpression	UNEXPECTED ( zend_isnan ( d ) )		336017	1					
ANR	336037	Callee	UNEXPECTED		336017	0					
ANR	336038	Identifier	UNEXPECTED		336017	0					
ANR	336039	ArgumentList	zend_isnan ( d )		336017	1					
ANR	336040	Argument	zend_isnan ( d )		336017	0					
ANR	336041	CallExpression	zend_isnan ( d )		336017	0					
ANR	336042	Callee	zend_isnan		336017	0					
ANR	336043	Identifier	zend_isnan		336017	0					
ANR	336044	ArgumentList	d		336017	1					
ANR	336045	Argument	d		336017	0					
ANR	336046	Identifier	d		336017	0					
ANR	336047	CompoundStatement		2:63:64:64	336017	1					
ANR	336048	ReturnStatement	return 0 ;	118:2:5716:5724	336017	0	True				
ANR	336049	PrimaryExpression	0		336017	0					
ANR	336050	ElseStatement	else		336017	0					
ANR	336051	IfStatement	if ( ! ZEND_DOUBLE_FITS_LONG ( d ) )		336017	0					
ANR	336052	Condition	! ZEND_DOUBLE_FITS_LONG ( d )	119:12:5738:5762	336017	0	True				
ANR	336053	UnaryOperationExpression	! ZEND_DOUBLE_FITS_LONG ( d )		336017	0					
ANR	336054	UnaryOperator	!		336017	0					
ANR	336055	CallExpression	ZEND_DOUBLE_FITS_LONG ( d )		336017	1					
ANR	336056	Callee	ZEND_DOUBLE_FITS_LONG		336017	0					
ANR	336057	Identifier	ZEND_DOUBLE_FITS_LONG		336017	0					
ANR	336058	ArgumentList	d		336017	1					
ANR	336059	Argument	d		336017	0					
ANR	336060	Identifier	d		336017	0					
ANR	336061	CompoundStatement		4:39:117:117	336017	1					
ANR	336062	ReturnStatement	return zend_dval_to_lval_slow ( d ) ;	120:2:5769:5801	336017	0	True				
ANR	336063	CallExpression	zend_dval_to_lval_slow ( d )		336017	0					
ANR	336064	Callee	zend_dval_to_lval_slow		336017	0					
ANR	336065	Identifier	zend_dval_to_lval_slow		336017	0					
ANR	336066	ArgumentList	d		336017	1					
ANR	336067	Argument	d		336017	0					
ANR	336068	Identifier	d		336017	0					
ANR	336069	ReturnStatement	return ( zend_long ) d ;	122:1:5807:5826	336017	1	True				
ANR	336070	CastExpression	( zend_long ) d		336017	0					
ANR	336071	CastTarget	zend_long		336017	0					
ANR	336072	Identifier	d		336017	1					
ANR	336073	ReturnType	static zend_always_inline zend_long		336017	1					
ANR	336074	Identifier	zend_dval_to_lval		336017	2					
ANR	336075	ParameterList	double d		336017	3					
ANR	336076	Parameter	double d	115:54:5637:5644	336017	0	True				
ANR	336077	ParameterType	double		336017	0					
ANR	336078	Identifier	d		336017	1					
ANR	336079	CFGEntryNode	ENTRY		336017		True				
ANR	336080	CFGExitNode	EXIT		336017		True				
ANR	336081	Symbol	zend_finite		336017						
ANR	336082	Symbol	UNEXPECTED		336017						
ANR	336083	Symbol	d		336017						
ANR	336084	Symbol	zend_isnan		336017						
ANR	336085	Symbol	ZEND_DOUBLE_FITS_LONG		336017						
ANR	336086	Symbol	zend_dval_to_lval_slow		336017						
ANR	336087	Function	is_numeric_string_ex	130:0:5986:6260							
ANR	336088	FunctionDef	"is_numeric_string_ex (const char * str , size_t length , zend_long * lval , double * dval , int allow_errors , int * oflow_info)"		336087	0					
ANR	336089	CompoundStatement		131:0:6142:6260	336087	0					
ANR	336090	IfStatement	if ( * str > '9' )		336087	0					
ANR	336091	Condition	* str > '9'	132:5:6149:6158	336087	0	True				
ANR	336092	RelationalExpression	* str > '9'		336087	0		>			
ANR	336093	UnaryOperationExpression	* str		336087	0					
ANR	336094	UnaryOperator	*		336087	0					
ANR	336095	Identifier	str		336087	1					
ANR	336096	PrimaryExpression	'9'		336087	1					
ANR	336097	CompoundStatement		2:17:18:18	336087	1					
ANR	336098	ReturnStatement	return 0 ;	133:2:6165:6173	336087	0	True				
ANR	336099	PrimaryExpression	0		336087	0					
ANR	336100	ReturnStatement	"return _is_numeric_string_ex ( str , length , lval , dval , allow_errors , oflow_info ) ;"	135:1:6179:6258	336087	1	True				
ANR	336101	CallExpression	"_is_numeric_string_ex ( str , length , lval , dval , allow_errors , oflow_info )"		336087	0					
ANR	336102	Callee	_is_numeric_string_ex		336087	0					
ANR	336103	Identifier	_is_numeric_string_ex		336087	0					
ANR	336104	ArgumentList	str		336087	1					
ANR	336105	Argument	str		336087	0					
ANR	336106	Identifier	str		336087	0					
ANR	336107	Argument	length		336087	1					
ANR	336108	Identifier	length		336087	0					
ANR	336109	Argument	lval		336087	2					
ANR	336110	Identifier	lval		336087	0					
ANR	336111	Argument	dval		336087	3					
ANR	336112	Identifier	dval		336087	0					
ANR	336113	Argument	allow_errors		336087	4					
ANR	336114	Identifier	allow_errors		336087	0					
ANR	336115	Argument	oflow_info		336087	5					
ANR	336116	Identifier	oflow_info		336087	0					
ANR	336117	ReturnType	static zend_always_inline zend_uchar		336087	1					
ANR	336118	Identifier	is_numeric_string_ex		336087	2					
ANR	336119	ParameterList	"const char * str , size_t length , zend_long * lval , double * dval , int allow_errors , int * oflow_info"		336087	3					
ANR	336120	Parameter	const char * str	130:58:6044:6058	336087	0	True				
ANR	336121	ParameterType	const char *		336087	0					
ANR	336122	Identifier	str		336087	1					
ANR	336123	Parameter	size_t length	130:75:6061:6073	336087	1	True				
ANR	336124	ParameterType	size_t		336087	0					
ANR	336125	Identifier	length		336087	1					
ANR	336126	Parameter	zend_long * lval	130:90:6076:6090	336087	2	True				
ANR	336127	ParameterType	zend_long *		336087	0					
ANR	336128	Identifier	lval		336087	1					
ANR	336129	Parameter	double * dval	130:107:6093:6104	336087	3	True				
ANR	336130	ParameterType	double *		336087	0					
ANR	336131	Identifier	dval		336087	1					
ANR	336132	Parameter	int allow_errors	130:121:6107:6122	336087	4	True				
ANR	336133	ParameterType	int		336087	0					
ANR	336134	Identifier	allow_errors		336087	1					
ANR	336135	Parameter	int * oflow_info	130:139:6125:6139	336087	5	True				
ANR	336136	ParameterType	int *		336087	0					
ANR	336137	Identifier	oflow_info		336087	1					
ANR	336138	CFGEntryNode	ENTRY		336087		True				
ANR	336139	CFGExitNode	EXIT		336087		True				
ANR	336140	Symbol	str		336087						
ANR	336141	Symbol	dval		336087						
ANR	336142	Symbol	allow_errors		336087						
ANR	336143	Symbol	lval		336087						
ANR	336144	Symbol	length		336087						
ANR	336145	Symbol	oflow_info		336087						
ANR	336146	Symbol	* str		336087						
ANR	336147	Symbol	_is_numeric_string_ex		336087						
ANR	336148	Function	is_numeric_string	138:0:6263:6479							
ANR	336149	FunctionDef	"is_numeric_string (const char * str , size_t length , zend_long * lval , double * dval , int allow_errors)"		336148	0					
ANR	336150	CompoundStatement		138:136:6399:6479	336148	0					
ANR	336151	ReturnStatement	"return is_numeric_string_ex ( str , length , lval , dval , allow_errors , NULL ) ;"	139:4:6405:6477	336148	0	True				
ANR	336152	CallExpression	"is_numeric_string_ex ( str , length , lval , dval , allow_errors , NULL )"		336148	0					
ANR	336153	Callee	is_numeric_string_ex		336148	0					
ANR	336154	Identifier	is_numeric_string_ex		336148	0					
ANR	336155	ArgumentList	str		336148	1					
ANR	336156	Argument	str		336148	0					
ANR	336157	Identifier	str		336148	0					
ANR	336158	Argument	length		336148	1					
ANR	336159	Identifier	length		336148	0					
ANR	336160	Argument	lval		336148	2					
ANR	336161	Identifier	lval		336148	0					
ANR	336162	Argument	dval		336148	3					
ANR	336163	Identifier	dval		336148	0					
ANR	336164	Argument	allow_errors		336148	4					
ANR	336165	Identifier	allow_errors		336148	0					
ANR	336166	Argument	NULL		336148	5					
ANR	336167	Identifier	NULL		336148	0					
ANR	336168	ReturnType	static zend_always_inline zend_uchar		336148	1					
ANR	336169	Identifier	is_numeric_string		336148	2					
ANR	336170	ParameterList	"const char * str , size_t length , zend_long * lval , double * dval , int allow_errors"		336148	3					
ANR	336171	Parameter	const char * str	138:55:6318:6332	336148	0	True				
ANR	336172	ParameterType	const char *		336148	0					
ANR	336173	Identifier	str		336148	1					
ANR	336174	Parameter	size_t length	138:72:6335:6347	336148	1	True				
ANR	336175	ParameterType	size_t		336148	0					
ANR	336176	Identifier	length		336148	1					
ANR	336177	Parameter	zend_long * lval	138:87:6350:6364	336148	2	True				
ANR	336178	ParameterType	zend_long *		336148	0					
ANR	336179	Identifier	lval		336148	1					
ANR	336180	Parameter	double * dval	138:104:6367:6378	336148	3	True				
ANR	336181	ParameterType	double *		336148	0					
ANR	336182	Identifier	dval		336148	1					
ANR	336183	Parameter	int allow_errors	138:118:6381:6396	336148	4	True				
ANR	336184	ParameterType	int		336148	0					
ANR	336185	Identifier	allow_errors		336148	1					
ANR	336186	CFGEntryNode	ENTRY		336148		True				
ANR	336187	CFGExitNode	EXIT		336148		True				
ANR	336188	Symbol	str		336148						
ANR	336189	Symbol	dval		336148						
ANR	336190	Symbol	NULL		336148						
ANR	336191	Symbol	allow_errors		336148						
ANR	336192	Symbol	lval		336148						
ANR	336193	Symbol	length		336148						
ANR	336194	Symbol	is_numeric_string_ex		336148						
ANR	336195	DeclStmt									
ANR	336196	Decl							ZEND_API zend_uchar ZEND_FASTCALL	"ZEND_API zend_uchar ZEND_FASTCALL ( const zend_string * str , zend_long * lval , double * dval )"	is_numeric_str_function
ANR	336197	Function	zend_memnstr	144:26:6623:7416							
ANR	336198	FunctionDef	"zend_memnstr (const char * haystack , const char * needle , size_t needle_len , const char * end)"		336197	0					
ANR	336199	CompoundStatement		146:0:6727:7416	336197	0					
ANR	336200	IdentifierDeclStatement	const char * p = haystack ;	147:1:6730:6754	336197	0	True				
ANR	336201	IdentifierDecl	* p = haystack		336197	0					
ANR	336202	IdentifierDeclType	const char *		336197	0					
ANR	336203	Identifier	p		336197	1					
ANR	336204	AssignmentExpression	* p = haystack		336197	2		=			
ANR	336205	Identifier	haystack		336197	0					
ANR	336206	Identifier	haystack		336197	1					
ANR	336207	IdentifierDeclStatement	const char ne = needle [ needle_len - 1 ] ;	148:1:6757:6793	336197	1	True				
ANR	336208	IdentifierDecl	ne = needle [ needle_len - 1 ]		336197	0					
ANR	336209	IdentifierDeclType	const char		336197	0					
ANR	336210	Identifier	ne		336197	1					
ANR	336211	AssignmentExpression	ne = needle [ needle_len - 1 ]		336197	2		=			
ANR	336212	Identifier	ne		336197	0					
ANR	336213	ArrayIndexing	needle [ needle_len - 1 ]		336197	1					
ANR	336214	Identifier	needle		336197	0					
ANR	336215	AdditiveExpression	needle_len - 1		336197	1		-			
ANR	336216	Identifier	needle_len		336197	0					
ANR	336217	PrimaryExpression	1		336197	1					
ANR	336218	IdentifierDeclStatement	ptrdiff_t off_p ;	149:1:6796:6811	336197	2	True				
ANR	336219	IdentifierDecl	off_p		336197	0					
ANR	336220	IdentifierDeclType	ptrdiff_t		336197	0					
ANR	336221	Identifier	off_p		336197	1					
ANR	336222	IdentifierDeclStatement	size_t off_s ;	150:1:6814:6826	336197	3	True				
ANR	336223	IdentifierDecl	off_s		336197	0					
ANR	336224	IdentifierDeclType	size_t		336197	0					
ANR	336225	Identifier	off_s		336197	1					
ANR	336226	IfStatement	if ( needle_len == 1 )		336197	4					
ANR	336227	Condition	needle_len == 1	152:5:6834:6848	336197	0	True				
ANR	336228	EqualityExpression	needle_len == 1		336197	0		==			
ANR	336229	Identifier	needle_len		336197	0					
ANR	336230	PrimaryExpression	1		336197	1					
ANR	336231	CompoundStatement		7:22:123:123	336197	1					
ANR	336232	ReturnStatement	"return ( const char * ) memchr ( p , * needle , ( end - p ) ) ;"	153:2:6855:6903	336197	0	True				
ANR	336233	CastExpression	"( const char * ) memchr ( p , * needle , ( end - p ) )"		336197	0					
ANR	336234	CastTarget	const char *		336197	0					
ANR	336235	CallExpression	"memchr ( p , * needle , ( end - p ) )"		336197	1					
ANR	336236	Callee	memchr		336197	0					
ANR	336237	Identifier	memchr		336197	0					
ANR	336238	ArgumentList	p		336197	1					
ANR	336239	Argument	p		336197	0					
ANR	336240	Identifier	p		336197	0					
ANR	336241	Argument	* needle		336197	1					
ANR	336242	UnaryOperationExpression	* needle		336197	0					
ANR	336243	UnaryOperator	*		336197	0					
ANR	336244	Identifier	needle		336197	1					
ANR	336245	Argument	end - p		336197	2					
ANR	336246	AdditiveExpression	end - p		336197	0		-			
ANR	336247	Identifier	end		336197	0					
ANR	336248	Identifier	p		336197	1					
ANR	336249	ExpressionStatement	off_p = end - haystack	156:1:6910:6932	336197	5	True				
ANR	336250	AssignmentExpression	off_p = end - haystack		336197	0		=			
ANR	336251	Identifier	off_p		336197	0					
ANR	336252	AdditiveExpression	end - haystack		336197	1		-			
ANR	336253	Identifier	end		336197	0					
ANR	336254	Identifier	haystack		336197	1					
ANR	336255	ExpressionStatement	off_s = ( off_p > 0 ) ? ( size_t ) off_p : 0	157:1:6935:6974	336197	6	True				
ANR	336256	AssignmentExpression	off_s = ( off_p > 0 ) ? ( size_t ) off_p : 0		336197	0		=			
ANR	336257	Identifier	off_s		336197	0					
ANR	336258	ConditionalExpression	( off_p > 0 ) ? ( size_t ) off_p : 0		336197	1					
ANR	336259	Condition	off_p > 0		336197	0					
ANR	336260	RelationalExpression	off_p > 0		336197	0		>			
ANR	336261	Identifier	off_p		336197	0					
ANR	336262	PrimaryExpression	0		336197	1					
ANR	336263	CastExpression	( size_t ) off_p		336197	1					
ANR	336264	CastTarget	size_t		336197	0					
ANR	336265	Identifier	off_p		336197	1					
ANR	336266	PrimaryExpression	0		336197	2					
ANR	336267	IfStatement	if ( needle_len > off_s )		336197	7					
ANR	336268	Condition	needle_len > off_s	159:5:6982:6999	336197	0	True				
ANR	336269	RelationalExpression	needle_len > off_s		336197	0		>			
ANR	336270	Identifier	needle_len		336197	0					
ANR	336271	Identifier	off_s		336197	1					
ANR	336272	CompoundStatement		14:25:274:274	336197	1					
ANR	336273	ReturnStatement	return NULL ;	160:2:7006:7017	336197	0	True				
ANR	336274	Identifier	NULL		336197	0					
ANR	336275	IfStatement	if ( EXPECTED ( off_s < 1024 || needle_len < 3 ) )		336197	8					
ANR	336276	Condition	EXPECTED ( off_s < 1024 || needle_len < 3 )	163:5:7028:7067	336197	0	True				
ANR	336277	CallExpression	EXPECTED ( off_s < 1024 || needle_len < 3 )		336197	0					
ANR	336278	Callee	EXPECTED		336197	0					
ANR	336279	Identifier	EXPECTED		336197	0					
ANR	336280	ArgumentList	off_s < 1024 || needle_len < 3		336197	1					
ANR	336281	Argument	off_s < 1024 || needle_len < 3		336197	0					
ANR	336282	OrExpression	off_s < 1024 || needle_len < 3		336197	0		||			
ANR	336283	RelationalExpression	off_s < 1024		336197	0		<			
ANR	336284	Identifier	off_s		336197	0					
ANR	336285	PrimaryExpression	1024		336197	1					
ANR	336286	RelationalExpression	needle_len < 3		336197	1		<			
ANR	336287	Identifier	needle_len		336197	0					
ANR	336288	PrimaryExpression	3		336197	1					
ANR	336289	CompoundStatement		18:47:342:342	336197	1					
ANR	336290	ExpressionStatement	end -= needle_len	164:2:7074:7091	336197	0	True				
ANR	336291	AssignmentExpression	end -= needle_len		336197	0		-=			
ANR	336292	Identifier	end		336197	0					
ANR	336293	Identifier	needle_len		336197	1					
ANR	336294	WhileStatement	while ( p <= end )		336197	1					
ANR	336295	Condition	p <= end	166:9:7103:7110	336197	0	True				
ANR	336296	RelationalExpression	p <= end		336197	0		<=			
ANR	336297	Identifier	p		336197	0					
ANR	336298	Identifier	end		336197	1					
ANR	336299	CompoundStatement		21:19:385:385	336197	1					
ANR	336300	IfStatement	"if ( ( p = ( const char * ) memchr ( p , * needle , ( end - p + 1 ) ) ) && ne == p [ needle_len - 1 ] )"		336197	0					
ANR	336301	Condition	"( p = ( const char * ) memchr ( p , * needle , ( end - p + 1 ) ) ) && ne == p [ needle_len - 1 ]"	167:7:7122:7195	336197	0	True				
ANR	336302	AndExpression	"( p = ( const char * ) memchr ( p , * needle , ( end - p + 1 ) ) ) && ne == p [ needle_len - 1 ]"		336197	0		&&			
ANR	336303	AssignmentExpression	"p = ( const char * ) memchr ( p , * needle , ( end - p + 1 ) )"		336197	0		=			
ANR	336304	Identifier	p		336197	0					
ANR	336305	CastExpression	"( const char * ) memchr ( p , * needle , ( end - p + 1 ) )"		336197	1					
ANR	336306	CastTarget	const char *		336197	0					
ANR	336307	CallExpression	"memchr ( p , * needle , ( end - p + 1 ) )"		336197	1					
ANR	336308	Callee	memchr		336197	0					
ANR	336309	Identifier	memchr		336197	0					
ANR	336310	ArgumentList	p		336197	1					
ANR	336311	Argument	p		336197	0					
ANR	336312	Identifier	p		336197	0					
ANR	336313	Argument	* needle		336197	1					
ANR	336314	UnaryOperationExpression	* needle		336197	0					
ANR	336315	UnaryOperator	*		336197	0					
ANR	336316	Identifier	needle		336197	1					
ANR	336317	Argument	end - p + 1		336197	2					
ANR	336318	AdditiveExpression	end - p + 1		336197	0		-			
ANR	336319	Identifier	end		336197	0					
ANR	336320	AdditiveExpression	p + 1		336197	1		+			
ANR	336321	Identifier	p		336197	0					
ANR	336322	PrimaryExpression	1		336197	1					
ANR	336323	EqualityExpression	ne == p [ needle_len - 1 ]		336197	1		==			
ANR	336324	Identifier	ne		336197	0					
ANR	336325	ArrayIndexing	p [ needle_len - 1 ]		336197	1					
ANR	336326	Identifier	p		336197	0					
ANR	336327	AdditiveExpression	needle_len - 1		336197	1		-			
ANR	336328	Identifier	needle_len		336197	0					
ANR	336329	PrimaryExpression	1		336197	1					
ANR	336330	CompoundStatement		22:83:470:470	336197	1					
ANR	336331	IfStatement	"if ( ! memcmp ( needle , p , needle_len - 1 ) )"		336197	0					
ANR	336332	Condition	"! memcmp ( needle , p , needle_len - 1 )"	168:8:7208:7239	336197	0	True				
ANR	336333	UnaryOperationExpression	"! memcmp ( needle , p , needle_len - 1 )"		336197	0					
ANR	336334	UnaryOperator	!		336197	0					
ANR	336335	CallExpression	"memcmp ( needle , p , needle_len - 1 )"		336197	1					
ANR	336336	Callee	memcmp		336197	0					
ANR	336337	Identifier	memcmp		336197	0					
ANR	336338	ArgumentList	needle		336197	1					
ANR	336339	Argument	needle		336197	0					
ANR	336340	Identifier	needle		336197	0					
ANR	336341	Argument	p		336197	1					
ANR	336342	Identifier	p		336197	0					
ANR	336343	Argument	needle_len - 1		336197	2					
ANR	336344	AdditiveExpression	needle_len - 1		336197	0		-			
ANR	336345	Identifier	needle_len		336197	0					
ANR	336346	PrimaryExpression	1		336197	1					
ANR	336347	CompoundStatement		23:42:514:514	336197	1					
ANR	336348	ReturnStatement	return p ;	169:5:7249:7257	336197	0	True				
ANR	336349	Identifier	p		336197	0					
ANR	336350	IfStatement	if ( p == NULL )		336197	1					
ANR	336351	Condition	p == NULL	173:7:7278:7286	336197	0	True				
ANR	336352	EqualityExpression	p == NULL		336197	0		==			
ANR	336353	Identifier	p		336197	0					
ANR	336354	Identifier	NULL		336197	1					
ANR	336355	CompoundStatement		28:18:561:561	336197	1					
ANR	336356	ReturnStatement	return NULL ;	174:4:7295:7306	336197	0	True				
ANR	336357	Identifier	NULL		336197	0					
ANR	336358	ExpressionStatement	p ++	177:3:7317:7320	336197	2	True				
ANR	336359	PostIncDecOperationExpression	p ++		336197	0					
ANR	336360	Identifier	p		336197	0					
ANR	336361	IncDec	++		336197	1					
ANR	336362	ReturnStatement	return NULL ;	180:2:7329:7340	336197	2	True				
ANR	336363	Identifier	NULL		336197	0					
ANR	336364	ElseStatement	else		336197	0					
ANR	336365	CompoundStatement		36:8:622:622	336197	0					
ANR	336366	ReturnStatement	"return zend_memnstr_ex ( haystack , needle , needle_len , end ) ;"	182:2:7354:7411	336197	0	True				
ANR	336367	CallExpression	"zend_memnstr_ex ( haystack , needle , needle_len , end )"		336197	0					
ANR	336368	Callee	zend_memnstr_ex		336197	0					
ANR	336369	Identifier	zend_memnstr_ex		336197	0					
ANR	336370	ArgumentList	haystack		336197	1					
ANR	336371	Argument	haystack		336197	0					
ANR	336372	Identifier	haystack		336197	0					
ANR	336373	Argument	needle		336197	1					
ANR	336374	Identifier	needle		336197	0					
ANR	336375	Argument	needle_len		336197	2					
ANR	336376	Identifier	needle_len		336197	0					
ANR	336377	Argument	end		336197	3					
ANR	336378	Identifier	end		336197	0					
ANR	336379	ReturnType	const char *		336197	1					
ANR	336380	Identifier	zend_memnstr		336197	2					
ANR	336381	ParameterList	"const char * haystack , const char * needle , size_t needle_len , const char * end"		336197	3					
ANR	336382	Parameter	const char * haystack	145:13:6649:6668	336197	0	True				
ANR	336383	ParameterType	const char *		336197	0					
ANR	336384	Identifier	haystack		336197	1					
ANR	336385	Parameter	const char * needle	145:35:6671:6688	336197	1	True				
ANR	336386	ParameterType	const char *		336197	0					
ANR	336387	Identifier	needle		336197	1					
ANR	336388	Parameter	size_t needle_len	145:55:6691:6707	336197	2	True				
ANR	336389	ParameterType	size_t		336197	0					
ANR	336390	Identifier	needle_len		336197	1					
ANR	336391	Parameter	const char * end	145:74:6710:6724	336197	3	True				
ANR	336392	ParameterType	const char *		336197	0					
ANR	336393	Identifier	end		336197	1					
ANR	336394	CFGEntryNode	ENTRY		336197		True				
ANR	336395	CFGExitNode	EXIT		336197		True				
ANR	336396	Symbol	NULL		336197						
ANR	336397	Symbol	* needle		336197						
ANR	336398	Symbol	* needle_len		336197						
ANR	336399	Symbol	off_p		336197						
ANR	336400	Symbol	off_s		336197						
ANR	336401	Symbol	p		336197						
ANR	336402	Symbol	zend_memnstr_ex		336197						
ANR	336403	Symbol	haystack		336197						
ANR	336404	Symbol	memcmp		336197						
ANR	336405	Symbol	ne		336197						
ANR	336406	Symbol	end		336197						
ANR	336407	Symbol	memchr		336197						
ANR	336408	Symbol	* p		336197						
ANR	336409	Symbol	needle		336197						
ANR	336410	Symbol	EXPECTED		336197						
ANR	336411	Symbol	needle_len		336197						
ANR	336412	Function	zend_memrchr	186:26:7445:7740							
ANR	336413	FunctionDef	"zend_memrchr (const void * s , int c , size_t n)"		336412	0					
ANR	336414	CompoundStatement		187:0:7502:7740	336412	0					
ANR	336415	Statement	register	188:1:7505:7512	336412	0	True				
ANR	336416	IdentifierDeclStatement	const unsigned char * e ;	188:10:7514:7536	336412	1	True				
ANR	336417	IdentifierDecl	* e		336412	0					
ANR	336418	IdentifierDeclType	const unsigned char *		336412	0					
ANR	336419	Identifier	e		336412	1					
ANR	336420	IfStatement	if ( n <= 0 )		336412	2					
ANR	336421	Condition	n <= 0	189:5:7543:7548	336412	0	True				
ANR	336422	RelationalExpression	n <= 0		336412	0		<=			
ANR	336423	Identifier	n		336412	0					
ANR	336424	PrimaryExpression	0		336412	1					
ANR	336425	CompoundStatement		3:13:48:48	336412	1					
ANR	336426	ReturnStatement	return NULL ;	190:2:7555:7566	336412	0	True				
ANR	336427	Identifier	NULL		336412	0					
ANR	336428	ForStatement	for ( e = ( const unsigned char * ) s + n - 1 ; e >= ( const unsigned char * ) s ; e -- )		336412	3					
ANR	336429	ForInit	e = ( const unsigned char * ) s + n - 1 ;	193:6:7578:7614	336412	0	True				
ANR	336430	AssignmentExpression	e = ( const unsigned char * ) s + n - 1		336412	0		=			
ANR	336431	Identifier	e		336412	0					
ANR	336432	AdditiveExpression	( const unsigned char * ) s + n - 1		336412	1		+			
ANR	336433	CastExpression	( const unsigned char * ) s		336412	0					
ANR	336434	CastTarget	const unsigned char *		336412	0					
ANR	336435	Identifier	s		336412	1					
ANR	336436	AdditiveExpression	n - 1		336412	1		-			
ANR	336437	Identifier	n		336412	0					
ANR	336438	PrimaryExpression	1		336412	1					
ANR	336439	Condition	e >= ( const unsigned char * ) s	193:44:7616:7644	336412	1	True				
ANR	336440	RelationalExpression	e >= ( const unsigned char * ) s		336412	0		>=			
ANR	336441	Identifier	e		336412	0					
ANR	336442	CastExpression	( const unsigned char * ) s		336412	1					
ANR	336443	CastTarget	const unsigned char *		336412	0					
ANR	336444	Identifier	s		336412	1					
ANR	336445	PostIncDecOperationExpression	e --	193:75:7647:7649	336412	2	True				
ANR	336446	Identifier	e		336412	0					
ANR	336447	IncDec	--		336412	1					
ANR	336448	CompoundStatement		7:80:149:149	336412	3					
ANR	336449	IfStatement	if ( * e == ( const unsigned char ) c )		336412	0					
ANR	336450	Condition	* e == ( const unsigned char ) c	194:6:7660:7687	336412	0	True				
ANR	336451	EqualityExpression	* e == ( const unsigned char ) c		336412	0		==			
ANR	336452	UnaryOperationExpression	* e		336412	0					
ANR	336453	UnaryOperator	*		336412	0					
ANR	336454	Identifier	e		336412	1					
ANR	336455	CastExpression	( const unsigned char ) c		336412	1					
ANR	336456	CastTarget	const unsigned char		336412	0					
ANR	336457	Identifier	c		336412	1					
ANR	336458	CompoundStatement		8:36:187:187	336412	1					
ANR	336459	ReturnStatement	return ( const void * ) e ;	195:3:7695:7717	336412	0	True				
ANR	336460	CastExpression	( const void * ) e		336412	0					
ANR	336461	CastTarget	const void *		336412	0					
ANR	336462	Identifier	e		336412	1					
ANR	336463	ReturnStatement	return NULL ;	198:1:7727:7738	336412	4	True				
ANR	336464	Identifier	NULL		336412	0					
ANR	336465	ReturnType	const void *		336412	1					
ANR	336466	Identifier	zend_memrchr		336412	2					
ANR	336467	ParameterList	"const void * s , int c , size_t n"		336412	3					
ANR	336468	Parameter	const void * s	186:51:7470:7482	336412	0	True				
ANR	336469	ParameterType	const void *		336412	0					
ANR	336470	Identifier	s		336412	1					
ANR	336471	Parameter	int c	186:66:7485:7489	336412	1	True				
ANR	336472	ParameterType	int		336412	0					
ANR	336473	Identifier	c		336412	1					
ANR	336474	Parameter	size_t n	186:73:7492:7499	336412	2	True				
ANR	336475	ParameterType	size_t		336412	0					
ANR	336476	Identifier	n		336412	1					
ANR	336477	CFGEntryNode	ENTRY		336412		True				
ANR	336478	CFGExitNode	EXIT		336412		True				
ANR	336479	Symbol	s		336412						
ANR	336480	Symbol	c		336412						
ANR	336481	Symbol	NULL		336412						
ANR	336482	Symbol	e		336412						
ANR	336483	Symbol	n		336412						
ANR	336484	Symbol	* e		336412						
ANR	336485	Function	zend_memnrstr	202:26:7770:8597							
ANR	336486	FunctionDef	"zend_memnrstr (const char * haystack , const char * needle , size_t needle_len , char * end)"		336485	0					
ANR	336487	CompoundStatement		204:0:7869:8597	336485	0					
ANR	336488	IdentifierDeclStatement	const char * p = end ;	205:4:7875:7894	336485	0	True				
ANR	336489	IdentifierDecl	* p = end		336485	0					
ANR	336490	IdentifierDeclType	const char *		336485	0					
ANR	336491	Identifier	p		336485	1					
ANR	336492	AssignmentExpression	* p = end		336485	2		=			
ANR	336493	Identifier	end		336485	0					
ANR	336494	Identifier	end		336485	1					
ANR	336495	IdentifierDeclStatement	const char ne = needle [ needle_len - 1 ] ;	206:4:7900:7936	336485	1	True				
ANR	336496	IdentifierDecl	ne = needle [ needle_len - 1 ]		336485	0					
ANR	336497	IdentifierDeclType	const char		336485	0					
ANR	336498	Identifier	ne		336485	1					
ANR	336499	AssignmentExpression	ne = needle [ needle_len - 1 ]		336485	2		=			
ANR	336500	Identifier	ne		336485	0					
ANR	336501	ArrayIndexing	needle [ needle_len - 1 ]		336485	1					
ANR	336502	Identifier	needle		336485	0					
ANR	336503	AdditiveExpression	needle_len - 1		336485	1		-			
ANR	336504	Identifier	needle_len		336485	0					
ANR	336505	PrimaryExpression	1		336485	1					
ANR	336506	IdentifierDeclStatement	ptrdiff_t off_p ;	207:4:7942:7957	336485	2	True				
ANR	336507	IdentifierDecl	off_p		336485	0					
ANR	336508	IdentifierDeclType	ptrdiff_t		336485	0					
ANR	336509	Identifier	off_p		336485	1					
ANR	336510	IdentifierDeclStatement	size_t off_s ;	208:4:7963:7975	336485	3	True				
ANR	336511	IdentifierDecl	off_s		336485	0					
ANR	336512	IdentifierDeclType	size_t		336485	0					
ANR	336513	Identifier	off_s		336485	1					
ANR	336514	IfStatement	if ( needle_len == 1 )		336485	4					
ANR	336515	Condition	needle_len == 1	210:8:7986:8000	336485	0	True				
ANR	336516	EqualityExpression	needle_len == 1		336485	0		==			
ANR	336517	Identifier	needle_len		336485	0					
ANR	336518	PrimaryExpression	1		336485	1					
ANR	336519	CompoundStatement		7:25:133:133	336485	1					
ANR	336520	ReturnStatement	"return ( const char * ) zend_memrchr ( haystack , * needle , ( p - haystack ) ) ;"	211:8:8013:8081	336485	0	True				
ANR	336521	CastExpression	"( const char * ) zend_memrchr ( haystack , * needle , ( p - haystack ) )"		336485	0					
ANR	336522	CastTarget	const char *		336485	0					
ANR	336523	CallExpression	"zend_memrchr ( haystack , * needle , ( p - haystack ) )"		336485	1					
ANR	336524	Callee	zend_memrchr		336485	0					
ANR	336525	Identifier	zend_memrchr		336485	0					
ANR	336526	ArgumentList	haystack		336485	1					
ANR	336527	Argument	haystack		336485	0					
ANR	336528	Identifier	haystack		336485	0					
ANR	336529	Argument	* needle		336485	1					
ANR	336530	UnaryOperationExpression	* needle		336485	0					
ANR	336531	UnaryOperator	*		336485	0					
ANR	336532	Identifier	needle		336485	1					
ANR	336533	Argument	p - haystack		336485	2					
ANR	336534	AdditiveExpression	p - haystack		336485	0		-			
ANR	336535	Identifier	p		336485	0					
ANR	336536	Identifier	haystack		336485	1					
ANR	336537	ExpressionStatement	off_p = end - haystack	214:4:8094:8116	336485	5	True				
ANR	336538	AssignmentExpression	off_p = end - haystack		336485	0		=			
ANR	336539	Identifier	off_p		336485	0					
ANR	336540	AdditiveExpression	end - haystack		336485	1		-			
ANR	336541	Identifier	end		336485	0					
ANR	336542	Identifier	haystack		336485	1					
ANR	336543	ExpressionStatement	off_s = ( off_p > 0 ) ? ( size_t ) off_p : 0	215:4:8122:8161	336485	6	True				
ANR	336544	AssignmentExpression	off_s = ( off_p > 0 ) ? ( size_t ) off_p : 0		336485	0		=			
ANR	336545	Identifier	off_s		336485	0					
ANR	336546	ConditionalExpression	( off_p > 0 ) ? ( size_t ) off_p : 0		336485	1					
ANR	336547	Condition	off_p > 0		336485	0					
ANR	336548	RelationalExpression	off_p > 0		336485	0		>			
ANR	336549	Identifier	off_p		336485	0					
ANR	336550	PrimaryExpression	0		336485	1					
ANR	336551	CastExpression	( size_t ) off_p		336485	1					
ANR	336552	CastTarget	size_t		336485	0					
ANR	336553	Identifier	off_p		336485	1					
ANR	336554	PrimaryExpression	0		336485	2					
ANR	336555	IfStatement	if ( needle_len > off_s )		336485	7					
ANR	336556	Condition	needle_len > off_s	217:8:8172:8189	336485	0	True				
ANR	336557	RelationalExpression	needle_len > off_s		336485	0		>			
ANR	336558	Identifier	needle_len		336485	0					
ANR	336559	Identifier	off_s		336485	1					
ANR	336560	CompoundStatement		14:28:322:322	336485	1					
ANR	336561	ReturnStatement	return NULL ;	218:8:8202:8213	336485	0	True				
ANR	336562	Identifier	NULL		336485	0					
ANR	336563	IfStatement	if ( EXPECTED ( off_s < 1024 || needle_len < 3 ) )		336485	8					
ANR	336564	Condition	EXPECTED ( off_s < 1024 || needle_len < 3 )	221:5:8227:8266	336485	0	True				
ANR	336565	CallExpression	EXPECTED ( off_s < 1024 || needle_len < 3 )		336485	0					
ANR	336566	Callee	EXPECTED		336485	0					
ANR	336567	Identifier	EXPECTED		336485	0					
ANR	336568	ArgumentList	off_s < 1024 || needle_len < 3		336485	1					
ANR	336569	Argument	off_s < 1024 || needle_len < 3		336485	0					
ANR	336570	OrExpression	off_s < 1024 || needle_len < 3		336485	0		||			
ANR	336571	RelationalExpression	off_s < 1024		336485	0		<			
ANR	336572	Identifier	off_s		336485	0					
ANR	336573	PrimaryExpression	1024		336485	1					
ANR	336574	RelationalExpression	needle_len < 3		336485	1		<			
ANR	336575	Identifier	needle_len		336485	0					
ANR	336576	PrimaryExpression	3		336485	1					
ANR	336577	CompoundStatement		18:47:399:399	336485	1					
ANR	336578	ExpressionStatement	p -= needle_len	222:2:8273:8288	336485	0	True				
ANR	336579	AssignmentExpression	p -= needle_len		336485	0		-=			
ANR	336580	Identifier	p		336485	0					
ANR	336581	Identifier	needle_len		336485	1					
ANR	336582	DoStatement	do		336485	1					
ANR	336583	CompoundStatement		21:5:426:426	336485	0					
ANR	336584	IfStatement	"if ( ( p = ( const char * ) zend_memrchr ( haystack , * needle , ( p - haystack ) + 1 ) ) && ne == p [ needle_len - 1 ] )"		336485	0					
ANR	336585	Condition	"( p = ( const char * ) zend_memrchr ( haystack , * needle , ( p - haystack ) + 1 ) ) && ne == p [ needle_len - 1 ]"	225:7:8305:8400	336485	0	True				
ANR	336586	AndExpression	"( p = ( const char * ) zend_memrchr ( haystack , * needle , ( p - haystack ) + 1 ) ) && ne == p [ needle_len - 1 ]"		336485	0		&&			
ANR	336587	AssignmentExpression	"p = ( const char * ) zend_memrchr ( haystack , * needle , ( p - haystack ) + 1 )"		336485	0		=			
ANR	336588	Identifier	p		336485	0					
ANR	336589	CastExpression	"( const char * ) zend_memrchr ( haystack , * needle , ( p - haystack ) + 1 )"		336485	1					
ANR	336590	CastTarget	const char *		336485	0					
ANR	336591	CallExpression	"zend_memrchr ( haystack , * needle , ( p - haystack ) + 1 )"		336485	1					
ANR	336592	Callee	zend_memrchr		336485	0					
ANR	336593	Identifier	zend_memrchr		336485	0					
ANR	336594	ArgumentList	haystack		336485	1					
ANR	336595	Argument	haystack		336485	0					
ANR	336596	Identifier	haystack		336485	0					
ANR	336597	Argument	* needle		336485	1					
ANR	336598	UnaryOperationExpression	* needle		336485	0					
ANR	336599	UnaryOperator	*		336485	0					
ANR	336600	Identifier	needle		336485	1					
ANR	336601	Argument	( p - haystack ) + 1		336485	2					
ANR	336602	AdditiveExpression	( p - haystack ) + 1		336485	0		+			
ANR	336603	AdditiveExpression	p - haystack		336485	0		-			
ANR	336604	Identifier	p		336485	0					
ANR	336605	Identifier	haystack		336485	1					
ANR	336606	PrimaryExpression	1		336485	1					
ANR	336607	EqualityExpression	ne == p [ needle_len - 1 ]		336485	1		==			
ANR	336608	Identifier	ne		336485	0					
ANR	336609	ArrayIndexing	p [ needle_len - 1 ]		336485	1					
ANR	336610	Identifier	p		336485	0					
ANR	336611	AdditiveExpression	needle_len - 1		336485	1		-			
ANR	336612	Identifier	needle_len		336485	0					
ANR	336613	PrimaryExpression	1		336485	1					
ANR	336614	CompoundStatement		22:105:533:533	336485	1					
ANR	336615	IfStatement	"if ( ! memcmp ( needle , p , needle_len - 1 ) )"		336485	0					
ANR	336616	Condition	"! memcmp ( needle , p , needle_len - 1 )"	226:8:8413:8446	336485	0	True				
ANR	336617	UnaryOperationExpression	"! memcmp ( needle , p , needle_len - 1 )"		336485	0					
ANR	336618	UnaryOperator	!		336485	0					
ANR	336619	CallExpression	"memcmp ( needle , p , needle_len - 1 )"		336485	1					
ANR	336620	Callee	memcmp		336485	0					
ANR	336621	Identifier	memcmp		336485	0					
ANR	336622	ArgumentList	needle		336485	1					
ANR	336623	Argument	needle		336485	0					
ANR	336624	Identifier	needle		336485	0					
ANR	336625	Argument	p		336485	1					
ANR	336626	Identifier	p		336485	0					
ANR	336627	Argument	needle_len - 1		336485	2					
ANR	336628	AdditiveExpression	needle_len - 1		336485	0		-			
ANR	336629	Identifier	needle_len		336485	0					
ANR	336630	PrimaryExpression	1		336485	1					
ANR	336631	CompoundStatement		23:44:579:579	336485	1					
ANR	336632	ReturnStatement	return p ;	227:5:8456:8464	336485	0	True				
ANR	336633	Identifier	p		336485	0					
ANR	336634	Condition	p -- >= haystack	230:11:8488:8502	336485	1	True				
ANR	336635	RelationalExpression	p -- >= haystack		336485	0		>=			
ANR	336636	PostIncDecOperationExpression	p --		336485	0					
ANR	336637	Identifier	p		336485	0					
ANR	336638	IncDec	--		336485	1					
ANR	336639	Identifier	haystack		336485	1					
ANR	336640	ReturnStatement	return NULL ;	232:2:8509:8520	336485	2	True				
ANR	336641	Identifier	NULL		336485	0					
ANR	336642	ElseStatement	else		336485	0					
ANR	336643	CompoundStatement		30:8:660:660	336485	0					
ANR	336644	ReturnStatement	"return zend_memnrstr_ex ( haystack , needle , needle_len , end ) ;"	234:2:8534:8592	336485	0	True				
ANR	336645	CallExpression	"zend_memnrstr_ex ( haystack , needle , needle_len , end )"		336485	0					
ANR	336646	Callee	zend_memnrstr_ex		336485	0					
ANR	336647	Identifier	zend_memnrstr_ex		336485	0					
ANR	336648	ArgumentList	haystack		336485	1					
ANR	336649	Argument	haystack		336485	0					
ANR	336650	Identifier	haystack		336485	0					
ANR	336651	Argument	needle		336485	1					
ANR	336652	Identifier	needle		336485	0					
ANR	336653	Argument	needle_len		336485	2					
ANR	336654	Identifier	needle_len		336485	0					
ANR	336655	Argument	end		336485	3					
ANR	336656	Identifier	end		336485	0					
ANR	336657	ReturnType	const char *		336485	1					
ANR	336658	Identifier	zend_memnrstr		336485	2					
ANR	336659	ParameterList	"const char * haystack , const char * needle , size_t needle_len , char * end"		336485	3					
ANR	336660	Parameter	const char * haystack	203:14:7797:7816	336485	0	True				
ANR	336661	ParameterType	const char *		336485	0					
ANR	336662	Identifier	haystack		336485	1					
ANR	336663	Parameter	const char * needle	203:36:7819:7836	336485	1	True				
ANR	336664	ParameterType	const char *		336485	0					
ANR	336665	Identifier	needle		336485	1					
ANR	336666	Parameter	size_t needle_len	203:56:7839:7855	336485	2	True				
ANR	336667	ParameterType	size_t		336485	0					
ANR	336668	Identifier	needle_len		336485	1					
ANR	336669	Parameter	char * end	203:75:7858:7866	336485	3	True				
ANR	336670	ParameterType	char *		336485	0					
ANR	336671	Identifier	end		336485	1					
ANR	336672	CFGEntryNode	ENTRY		336485		True				
ANR	336673	CFGExitNode	EXIT		336485		True				
ANR	336674	Symbol	zend_memrchr		336485						
ANR	336675	Symbol	NULL		336485						
ANR	336676	Symbol	* needle		336485						
ANR	336677	Symbol	zend_memnrstr_ex		336485						
ANR	336678	Symbol	* needle_len		336485						
ANR	336679	Symbol	off_p		336485						
ANR	336680	Symbol	off_s		336485						
ANR	336681	Symbol	p		336485						
ANR	336682	Symbol	haystack		336485						
ANR	336683	Symbol	memcmp		336485						
ANR	336684	Symbol	ne		336485						
ANR	336685	Symbol	end		336485						
ANR	336686	Symbol	* p		336485						
ANR	336687	Symbol	needle		336485						
ANR	336688	Symbol	EXPECTED		336485						
ANR	336689	Symbol	needle_len		336485						
ANR	336690	DeclStmt									
ANR	336691	Decl							ZEND_API int ZEND_FASTCALL	ZEND_API int ZEND_FASTCALL ( zval * op1 )	increment_function
ANR	336692	DeclStmt									
ANR	336693	Decl							ZEND_API int ZEND_FASTCALL	ZEND_API int ZEND_FASTCALL ( zval * op2 )	decrement_function
ANR	336694	DeclStmt									
ANR	336695	Decl							ZEND_API void ZEND_FASTCALL	ZEND_API void ZEND_FASTCALL ( zval * op )	convert_scalar_to_number
ANR	336696	DeclStmt									
ANR	336697	Decl							ZEND_API void ZEND_FASTCALL	ZEND_API void ZEND_FASTCALL ( zval * op )	convert_to_long
ANR	336698	DeclStmt									
ANR	336699	Decl							ZEND_API void ZEND_FASTCALL	ZEND_API void ZEND_FASTCALL ( zval * op )	convert_to_double
ANR	336700	DeclStmt									
ANR	336701	Decl							ZEND_API void ZEND_FASTCALL	"ZEND_API void ZEND_FASTCALL ( zval * op , int base )"	convert_to_long_base
ANR	336702	DeclStmt									
ANR	336703	Decl							ZEND_API void ZEND_FASTCALL	ZEND_API void ZEND_FASTCALL ( zval * op )	convert_to_null
ANR	336704	DeclStmt									
ANR	336705	Decl							ZEND_API void ZEND_FASTCALL	ZEND_API void ZEND_FASTCALL ( zval * op )	convert_to_boolean
ANR	336706	DeclStmt									
ANR	336707	Decl							ZEND_API void ZEND_FASTCALL	ZEND_API void ZEND_FASTCALL ( zval * op )	convert_to_array
ANR	336708	DeclStmt									
ANR	336709	Decl							ZEND_API void ZEND_FASTCALL	ZEND_API void ZEND_FASTCALL ( zval * op )	convert_to_object
ANR	336710	DeclStmt									
ANR	336711	Decl							ZEND_API zend_long ZEND_FASTCALL	ZEND_API zend_long ZEND_FASTCALL ( zval * op )	_zval_get_long_func
ANR	336712	DeclStmt									
ANR	336713	Decl							ZEND_API double ZEND_FASTCALL	ZEND_API double ZEND_FASTCALL ( zval * op )	_zval_get_double_func
ANR	336714	DeclStmt									
ANR	336715	Decl							ZEND_FASTCALL	ZEND_FASTCALL ( zval * op )	_zval_get_string_func
ANR	336716	Function	_zval_get_long	259:0:9718:9855							
ANR	336717	FunctionDef	_zval_get_long (zval * op)		336716	0					
ANR	336718	CompoundStatement		259:61:9779:9855	336716	0					
ANR	336719	ReturnStatement	return Z_TYPE_P ( op ) == IS_LONG ? Z_LVAL_P ( op ) : _zval_get_long_func ( op ) ;	260:1:9782:9853	336716	0	True				
ANR	336720	ConditionalExpression	Z_TYPE_P ( op ) == IS_LONG ? Z_LVAL_P ( op ) : _zval_get_long_func ( op )		336716	0					
ANR	336721	Condition	Z_TYPE_P ( op ) == IS_LONG		336716	0					
ANR	336722	EqualityExpression	Z_TYPE_P ( op ) == IS_LONG		336716	0		==			
ANR	336723	CallExpression	Z_TYPE_P ( op )		336716	0					
ANR	336724	Callee	Z_TYPE_P		336716	0					
ANR	336725	Identifier	Z_TYPE_P		336716	0					
ANR	336726	ArgumentList	op		336716	1					
ANR	336727	Argument	op		336716	0					
ANR	336728	Identifier	op		336716	0					
ANR	336729	Identifier	IS_LONG		336716	1					
ANR	336730	CallExpression	Z_LVAL_P ( op )		336716	1					
ANR	336731	Callee	Z_LVAL_P		336716	0					
ANR	336732	Identifier	Z_LVAL_P		336716	0					
ANR	336733	ArgumentList	op		336716	1					
ANR	336734	Argument	op		336716	0					
ANR	336735	Identifier	op		336716	0					
ANR	336736	CallExpression	_zval_get_long_func ( op )		336716	2					
ANR	336737	Callee	_zval_get_long_func		336716	0					
ANR	336738	Identifier	_zval_get_long_func		336716	0					
ANR	336739	ArgumentList	op		336716	1					
ANR	336740	Argument	op		336716	0					
ANR	336741	Identifier	op		336716	0					
ANR	336742	ReturnType	static zend_always_inline zend_long		336716	1					
ANR	336743	Identifier	_zval_get_long		336716	2					
ANR	336744	ParameterList	zval * op		336716	3					
ANR	336745	Parameter	zval * op	259:51:9769:9776	336716	0	True				
ANR	336746	ParameterType	zval *		336716	0					
ANR	336747	Identifier	op		336716	1					
ANR	336748	CFGEntryNode	ENTRY		336716		True				
ANR	336749	CFGExitNode	EXIT		336716		True				
ANR	336750	Symbol	op		336716						
ANR	336751	Symbol	IS_LONG		336716						
ANR	336752	Symbol	_zval_get_long_func		336716						
ANR	336753	Symbol	Z_TYPE_P		336716						
ANR	336754	Symbol	Z_LVAL_P		336716						
ANR	336755	Function	_zval_get_double	262:0:9857:9997							
ANR	336756	FunctionDef	_zval_get_double (zval * op)		336755	0					
ANR	336757	CompoundStatement		262:60:9917:9997	336755	0					
ANR	336758	ReturnStatement	return Z_TYPE_P ( op ) == IS_DOUBLE ? Z_DVAL_P ( op ) : _zval_get_double_func ( op ) ;	263:1:9920:9995	336755	0	True				
ANR	336759	ConditionalExpression	Z_TYPE_P ( op ) == IS_DOUBLE ? Z_DVAL_P ( op ) : _zval_get_double_func ( op )		336755	0					
ANR	336760	Condition	Z_TYPE_P ( op ) == IS_DOUBLE		336755	0					
ANR	336761	EqualityExpression	Z_TYPE_P ( op ) == IS_DOUBLE		336755	0		==			
ANR	336762	CallExpression	Z_TYPE_P ( op )		336755	0					
ANR	336763	Callee	Z_TYPE_P		336755	0					
ANR	336764	Identifier	Z_TYPE_P		336755	0					
ANR	336765	ArgumentList	op		336755	1					
ANR	336766	Argument	op		336755	0					
ANR	336767	Identifier	op		336755	0					
ANR	336768	Identifier	IS_DOUBLE		336755	1					
ANR	336769	CallExpression	Z_DVAL_P ( op )		336755	1					
ANR	336770	Callee	Z_DVAL_P		336755	0					
ANR	336771	Identifier	Z_DVAL_P		336755	0					
ANR	336772	ArgumentList	op		336755	1					
ANR	336773	Argument	op		336755	0					
ANR	336774	Identifier	op		336755	0					
ANR	336775	CallExpression	_zval_get_double_func ( op )		336755	2					
ANR	336776	Callee	_zval_get_double_func		336755	0					
ANR	336777	Identifier	_zval_get_double_func		336755	0					
ANR	336778	ArgumentList	op		336755	1					
ANR	336779	Argument	op		336755	0					
ANR	336780	Identifier	op		336755	0					
ANR	336781	ReturnType	static zend_always_inline double		336755	1					
ANR	336782	Identifier	_zval_get_double		336755	2					
ANR	336783	ParameterList	zval * op		336755	3					
ANR	336784	Parameter	zval * op	262:50:9907:9914	336755	0	True				
ANR	336785	ParameterType	zval *		336755	0					
ANR	336786	Identifier	op		336755	1					
ANR	336787	CFGEntryNode	ENTRY		336755		True				
ANR	336788	CFGExitNode	EXIT		336755		True				
ANR	336789	Symbol	op		336755						
ANR	336790	Symbol	IS_DOUBLE		336755						
ANR	336791	Symbol	Z_TYPE_P		336755						
ANR	336792	Symbol	Z_DVAL_P		336755						
ANR	336793	Symbol	_zval_get_double_func		336755						
ANR	336794	Function	_zval_get_string	265:0:9999:10162							
ANR	336795	FunctionDef	_zval_get_string (zval * op)		336794	0					
ANR	336796	CompoundStatement		265:66:10065:10162	336794	0					
ANR	336797	ReturnStatement	return Z_TYPE_P ( op ) == IS_STRING ? zend_string_copy ( Z_STR_P ( op ) ) : _zval_get_string_func ( op ) ;	266:1:10068:10160	336794	0	True				
ANR	336798	ConditionalExpression	Z_TYPE_P ( op ) == IS_STRING ? zend_string_copy ( Z_STR_P ( op ) ) : _zval_get_string_func ( op )		336794	0					
ANR	336799	Condition	Z_TYPE_P ( op ) == IS_STRING		336794	0					
ANR	336800	EqualityExpression	Z_TYPE_P ( op ) == IS_STRING		336794	0		==			
ANR	336801	CallExpression	Z_TYPE_P ( op )		336794	0					
ANR	336802	Callee	Z_TYPE_P		336794	0					
ANR	336803	Identifier	Z_TYPE_P		336794	0					
ANR	336804	ArgumentList	op		336794	1					
ANR	336805	Argument	op		336794	0					
ANR	336806	Identifier	op		336794	0					
ANR	336807	Identifier	IS_STRING		336794	1					
ANR	336808	CallExpression	zend_string_copy ( Z_STR_P ( op ) )		336794	1					
ANR	336809	Callee	zend_string_copy		336794	0					
ANR	336810	Identifier	zend_string_copy		336794	0					
ANR	336811	ArgumentList	Z_STR_P ( op )		336794	1					
ANR	336812	Argument	Z_STR_P ( op )		336794	0					
ANR	336813	CallExpression	Z_STR_P ( op )		336794	0					
ANR	336814	Callee	Z_STR_P		336794	0					
ANR	336815	Identifier	Z_STR_P		336794	0					
ANR	336816	ArgumentList	op		336794	1					
ANR	336817	Argument	op		336794	0					
ANR	336818	Identifier	op		336794	0					
ANR	336819	CallExpression	_zval_get_string_func ( op )		336794	2					
ANR	336820	Callee	_zval_get_string_func		336794	0					
ANR	336821	Identifier	_zval_get_string_func		336794	0					
ANR	336822	ArgumentList	op		336794	1					
ANR	336823	Argument	op		336794	0					
ANR	336824	Identifier	op		336794	0					
ANR	336825	ReturnType	static zend_always_inline zend_string *		336794	1					
ANR	336826	Identifier	_zval_get_string		336794	2					
ANR	336827	ParameterList	zval * op		336794	3					
ANR	336828	Parameter	zval * op	265:56:10055:10062	336794	0	True				
ANR	336829	ParameterType	zval *		336794	0					
ANR	336830	Identifier	op		336794	1					
ANR	336831	CFGEntryNode	ENTRY		336794		True				
ANR	336832	CFGExitNode	EXIT		336794		True				
ANR	336833	Symbol	op		336794						
ANR	336834	Symbol	_zval_get_string_func		336794						
ANR	336835	Symbol	IS_STRING		336794						
ANR	336836	Symbol	zend_string_copy		336794						
ANR	336837	Symbol	Z_STR_P		336794						
ANR	336838	Symbol	Z_TYPE_P		336794						
ANR	336839	DeclStmt									
ANR	336840	Decl							ZEND_API int ZEND_FASTCALL	ZEND_API int ZEND_FASTCALL ( zval * op )	zend_is_true
ANR	336841	DeclStmt									
ANR	336842	Decl							ZEND_API int ZEND_FASTCALL	ZEND_API int ZEND_FASTCALL ( zval * op )	zend_object_is_true
ANR	336843	Function	i_zend_is_true	283:0:10693:11471							
ANR	336844	FunctionDef	i_zend_is_true (zval * op)		336843	0					
ANR	336845	CompoundStatement		284:0:10748:11471	336843	0					
ANR	336846	IdentifierDeclStatement	int result = 0 ;	285:1:10751:10765	336843	0	True				
ANR	336847	IdentifierDecl	result = 0		336843	0					
ANR	336848	IdentifierDeclType	int		336843	0					
ANR	336849	Identifier	result		336843	1					
ANR	336850	AssignmentExpression	result = 0		336843	2		=			
ANR	336851	Identifier	result		336843	0					
ANR	336852	PrimaryExpression	0		336843	1					
ANR	336853	Label	again :	287:0:10768:10773	336843	1	True				
ANR	336854	Identifier	again		336843	0					
ANR	336855	SwitchStatement	switch ( Z_TYPE_P ( op ) )		336843	2					
ANR	336856	Condition	Z_TYPE_P ( op )	288:9:10784:10795	336843	0	True				
ANR	336857	CallExpression	Z_TYPE_P ( op )		336843	0					
ANR	336858	Callee	Z_TYPE_P		336843	0					
ANR	336859	Identifier	Z_TYPE_P		336843	0					
ANR	336860	ArgumentList	op		336843	1					
ANR	336861	Argument	op		336843	0					
ANR	336862	Identifier	op		336843	0					
ANR	336863	CompoundStatement		5:23:49:49	336843	1					
ANR	336864	Label	case IS_TRUE :	289:2:10802:10814	336843	0	True				
ANR	336865	Identifier	IS_TRUE		336843	0					
ANR	336866	ExpressionStatement	result = 1	290:3:10819:10829	336843	1	True				
ANR	336867	AssignmentExpression	result = 1		336843	0		=			
ANR	336868	Identifier	result		336843	0					
ANR	336869	PrimaryExpression	1		336843	1					
ANR	336870	BreakStatement	break ;	291:3:10834:10839	336843	2	True				
ANR	336871	Label	case IS_LONG :	292:2:10843:10855	336843	3	True				
ANR	336872	Identifier	IS_LONG		336843	0					
ANR	336873	IfStatement	if ( Z_LVAL_P ( op ) )		336843	4					
ANR	336874	Condition	Z_LVAL_P ( op )	293:7:10864:10875	336843	0	True				
ANR	336875	CallExpression	Z_LVAL_P ( op )		336843	0					
ANR	336876	Callee	Z_LVAL_P		336843	0					
ANR	336877	Identifier	Z_LVAL_P		336843	0					
ANR	336878	ArgumentList	op		336843	1					
ANR	336879	Argument	op		336843	0					
ANR	336880	Identifier	op		336843	0					
ANR	336881	CompoundStatement		10:21:129:129	336843	1					
ANR	336882	ExpressionStatement	result = 1	294:4:10884:10894	336843	0	True				
ANR	336883	AssignmentExpression	result = 1		336843	0		=			
ANR	336884	Identifier	result		336843	0					
ANR	336885	PrimaryExpression	1		336843	1					
ANR	336886	BreakStatement	break ;	296:3:10904:10909	336843	5	True				
ANR	336887	Label	case IS_DOUBLE :	297:2:10913:10927	336843	6	True				
ANR	336888	Identifier	IS_DOUBLE		336843	0					
ANR	336889	IfStatement	if ( Z_DVAL_P ( op ) )		336843	7					
ANR	336890	Condition	Z_DVAL_P ( op )	298:7:10936:10947	336843	0	True				
ANR	336891	CallExpression	Z_DVAL_P ( op )		336843	0					
ANR	336892	Callee	Z_DVAL_P		336843	0					
ANR	336893	Identifier	Z_DVAL_P		336843	0					
ANR	336894	ArgumentList	op		336843	1					
ANR	336895	Argument	op		336843	0					
ANR	336896	Identifier	op		336843	0					
ANR	336897	CompoundStatement		15:21:201:201	336843	1					
ANR	336898	ExpressionStatement	result = 1	299:4:10956:10966	336843	0	True				
ANR	336899	AssignmentExpression	result = 1		336843	0		=			
ANR	336900	Identifier	result		336843	0					
ANR	336901	PrimaryExpression	1		336843	1					
ANR	336902	BreakStatement	break ;	301:3:10976:10981	336843	8	True				
ANR	336903	Label	case IS_STRING :	302:2:10985:10999	336843	9	True				
ANR	336904	Identifier	IS_STRING		336843	0					
ANR	336905	IfStatement	if ( Z_STRLEN_P ( op ) > 1 || ( Z_STRLEN_P ( op ) && Z_STRVAL_P ( op ) [ 0 ] != '0' ) )		336843	10					
ANR	336906	Condition	Z_STRLEN_P ( op ) > 1 || ( Z_STRLEN_P ( op ) && Z_STRVAL_P ( op ) [ 0 ] != '0' )	303:7:11008:11073	336843	0	True				
ANR	336907	OrExpression	Z_STRLEN_P ( op ) > 1 || ( Z_STRLEN_P ( op ) && Z_STRVAL_P ( op ) [ 0 ] != '0' )		336843	0		||			
ANR	336908	RelationalExpression	Z_STRLEN_P ( op ) > 1		336843	0		>			
ANR	336909	CallExpression	Z_STRLEN_P ( op )		336843	0					
ANR	336910	Callee	Z_STRLEN_P		336843	0					
ANR	336911	Identifier	Z_STRLEN_P		336843	0					
ANR	336912	ArgumentList	op		336843	1					
ANR	336913	Argument	op		336843	0					
ANR	336914	Identifier	op		336843	0					
ANR	336915	PrimaryExpression	1		336843	1					
ANR	336916	AndExpression	Z_STRLEN_P ( op ) && Z_STRVAL_P ( op ) [ 0 ] != '0'		336843	1		&&			
ANR	336917	CallExpression	Z_STRLEN_P ( op )		336843	0					
ANR	336918	Callee	Z_STRLEN_P		336843	0					
ANR	336919	Identifier	Z_STRLEN_P		336843	0					
ANR	336920	ArgumentList	op		336843	1					
ANR	336921	Argument	op		336843	0					
ANR	336922	Identifier	op		336843	0					
ANR	336923	EqualityExpression	Z_STRVAL_P ( op ) [ 0 ] != '0'		336843	1		!=			
ANR	336924	ArrayIndexing	Z_STRVAL_P ( op ) [ 0 ]		336843	0					
ANR	336925	CallExpression	Z_STRVAL_P ( op )		336843	0					
ANR	336926	Callee	Z_STRVAL_P		336843	0					
ANR	336927	Identifier	Z_STRVAL_P		336843	0					
ANR	336928	ArgumentList	op		336843	1					
ANR	336929	Argument	op		336843	0					
ANR	336930	Identifier	op		336843	0					
ANR	336931	PrimaryExpression	0		336843	1					
ANR	336932	PrimaryExpression	'0'		336843	1					
ANR	336933	CompoundStatement		20:75:327:327	336843	1					
ANR	336934	ExpressionStatement	result = 1	304:4:11082:11092	336843	0	True				
ANR	336935	AssignmentExpression	result = 1		336843	0		=			
ANR	336936	Identifier	result		336843	0					
ANR	336937	PrimaryExpression	1		336843	1					
ANR	336938	BreakStatement	break ;	306:3:11102:11107	336843	11	True				
ANR	336939	Label	case IS_ARRAY :	307:2:11111:11124	336843	12	True				
ANR	336940	Identifier	IS_ARRAY		336843	0					
ANR	336941	IfStatement	if ( zend_hash_num_elements ( Z_ARRVAL_P ( op ) ) )		336843	13					
ANR	336942	Condition	zend_hash_num_elements ( Z_ARRVAL_P ( op ) )	308:7:11133:11170	336843	0	True				
ANR	336943	CallExpression	zend_hash_num_elements ( Z_ARRVAL_P ( op ) )		336843	0					
ANR	336944	Callee	zend_hash_num_elements		336843	0					
ANR	336945	Identifier	zend_hash_num_elements		336843	0					
ANR	336946	ArgumentList	Z_ARRVAL_P ( op )		336843	1					
ANR	336947	Argument	Z_ARRVAL_P ( op )		336843	0					
ANR	336948	CallExpression	Z_ARRVAL_P ( op )		336843	0					
ANR	336949	Callee	Z_ARRVAL_P		336843	0					
ANR	336950	Identifier	Z_ARRVAL_P		336843	0					
ANR	336951	ArgumentList	op		336843	1					
ANR	336952	Argument	op		336843	0					
ANR	336953	Identifier	op		336843	0					
ANR	336954	CompoundStatement		25:47:424:424	336843	1					
ANR	336955	ExpressionStatement	result = 1	309:4:11179:11189	336843	0	True				
ANR	336956	AssignmentExpression	result = 1		336843	0		=			
ANR	336957	Identifier	result		336843	0					
ANR	336958	PrimaryExpression	1		336843	1					
ANR	336959	BreakStatement	break ;	311:3:11199:11204	336843	14	True				
ANR	336960	Label	case IS_OBJECT :	312:2:11208:11222	336843	15	True				
ANR	336961	Identifier	IS_OBJECT		336843	0					
ANR	336962	ExpressionStatement	result = zend_object_is_true ( op )	313:3:11227:11259	336843	16	True				
ANR	336963	AssignmentExpression	result = zend_object_is_true ( op )		336843	0		=			
ANR	336964	Identifier	result		336843	0					
ANR	336965	CallExpression	zend_object_is_true ( op )		336843	1					
ANR	336966	Callee	zend_object_is_true		336843	0					
ANR	336967	Identifier	zend_object_is_true		336843	0					
ANR	336968	ArgumentList	op		336843	1					
ANR	336969	Argument	op		336843	0					
ANR	336970	Identifier	op		336843	0					
ANR	336971	BreakStatement	break ;	314:3:11264:11269	336843	17	True				
ANR	336972	Label	case IS_RESOURCE :	315:2:11273:11289	336843	18	True				
ANR	336973	Identifier	IS_RESOURCE		336843	0					
ANR	336974	IfStatement	if ( EXPECTED ( Z_RES_HANDLE_P ( op ) ) )		336843	19					
ANR	336975	Condition	EXPECTED ( Z_RES_HANDLE_P ( op ) )	316:7:11298:11325	336843	0	True				
ANR	336976	CallExpression	EXPECTED ( Z_RES_HANDLE_P ( op ) )		336843	0					
ANR	336977	Callee	EXPECTED		336843	0					
ANR	336978	Identifier	EXPECTED		336843	0					
ANR	336979	ArgumentList	Z_RES_HANDLE_P ( op )		336843	1					
ANR	336980	Argument	Z_RES_HANDLE_P ( op )		336843	0					
ANR	336981	CallExpression	Z_RES_HANDLE_P ( op )		336843	0					
ANR	336982	Callee	Z_RES_HANDLE_P		336843	0					
ANR	336983	Identifier	Z_RES_HANDLE_P		336843	0					
ANR	336984	ArgumentList	op		336843	1					
ANR	336985	Argument	op		336843	0					
ANR	336986	Identifier	op		336843	0					
ANR	336987	CompoundStatement		33:37:579:579	336843	1					
ANR	336988	ExpressionStatement	result = 1	317:4:11334:11344	336843	0	True				
ANR	336989	AssignmentExpression	result = 1		336843	0		=			
ANR	336990	Identifier	result		336843	0					
ANR	336991	PrimaryExpression	1		336843	1					
ANR	336992	BreakStatement	break ;	319:3:11354:11359	336843	20	True				
ANR	336993	Label	case IS_REFERENCE :	320:2:11363:11380	336843	21	True				
ANR	336994	Identifier	IS_REFERENCE		336843	0					
ANR	336995	ExpressionStatement	op = Z_REFVAL_P ( op )	321:3:11385:11404	336843	22	True				
ANR	336996	AssignmentExpression	op = Z_REFVAL_P ( op )		336843	0		=			
ANR	336997	Identifier	op		336843	0					
ANR	336998	CallExpression	Z_REFVAL_P ( op )		336843	1					
ANR	336999	Callee	Z_REFVAL_P		336843	0					
ANR	337000	Identifier	Z_REFVAL_P		336843	0					
ANR	337001	ArgumentList	op		336843	1					
ANR	337002	Argument	op		336843	0					
ANR	337003	Identifier	op		336843	0					
ANR	337004	GotoStatement	goto again ;	322:3:11409:11419	336843	23	True				
ANR	337005	Identifier	again		336843	0					
ANR	337006	BreakStatement	break ;	323:3:11424:11429	336843	24	True				
ANR	337007	Label	default :	324:2:11433:11440	336843	25	True				
ANR	337008	Identifier	default		336843	0					
ANR	337009	BreakStatement	break ;	325:3:11445:11450	336843	26	True				
ANR	337010	ReturnStatement	return result ;	327:1:11456:11469	336843	3	True				
ANR	337011	Identifier	result		336843	0					
ANR	337012	ReturnType	static zend_always_inline int		336843	1					
ANR	337013	Identifier	i_zend_is_true		336843	2					
ANR	337014	ParameterList	zval * op		336843	3					
ANR	337015	Parameter	zval * op	283:45:10738:10745	336843	0	True				
ANR	337016	ParameterType	zval *		336843	0					
ANR	337017	Identifier	op		336843	1					
ANR	337018	CFGEntryNode	ENTRY		336843		True				
ANR	337019	CFGExitNode	EXIT		336843		True				
ANR	337020	Symbol	Z_RES_HANDLE_P		336843						
ANR	337021	Symbol	op		336843						
ANR	337022	Symbol	zend_hash_num_elements		336843						
ANR	337023	Symbol	Z_TYPE_P		336843						
ANR	337024	Symbol	Z_STRVAL_P		336843						
ANR	337025	Symbol	Z_DVAL_P		336843						
ANR	337026	Symbol	Z_LVAL_P		336843						
ANR	337027	Symbol	result		336843						
ANR	337028	Symbol	zend_object_is_true		336843						
ANR	337029	Symbol	Z_REFVAL_P		336843						
ANR	337030	Symbol	Z_STRLEN_P		336843						
ANR	337031	Symbol	* Z_STRVAL_P		336843						
ANR	337032	Symbol	Z_ARRVAL_P		336843						
ANR	337033	Symbol	EXPECTED		336843						
ANR	337034	DeclStmt									
ANR	337035	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * result , zval * op1 , zval * op2 )"	compare_function
ANR	337036	DeclStmt									
ANR	337037	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * op1 , zval * op2 )"	numeric_compare_function
ANR	337038	DeclStmt									
ANR	337039	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * op1 , zval * op2 , zend_bool case_insensitive )"	string_compare_function_ex
ANR	337040	DeclStmt									
ANR	337041	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * op1 , zval * op2 )"	string_compare_function
ANR	337042	DeclStmt									
ANR	337043	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * op1 , zval * op2 )"	string_case_compare_function
ANR	337044	DeclStmt									
ANR	337045	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * op1 , zval * op2 )"	string_locale_compare_function
ANR	337046	DeclStmt									
ANR	337047	Decl							ZEND_API void ZEND_FASTCALL	"ZEND_API void ZEND_FASTCALL ( char * str , size_t length )"	zend_str_tolower
ANR	337048	DeclStmt									
ANR	337049	Decl							ZEND_FASTCALL	"ZEND_FASTCALL ( char * dest , const char * source , size_t length )"	zend_str_tolower_copy
ANR	337050	DeclStmt									
ANR	337051	Decl							ZEND_FASTCALL	"ZEND_FASTCALL ( const char * source , size_t length )"	zend_str_tolower_dup
ANR	337052	DeclStmt									
ANR	337053	Decl							ZEND_FASTCALL	"ZEND_FASTCALL ( const char * source , size_t length )"	zend_str_tolower_dup_ex
ANR	337054	DeclStmt									
ANR	337055	Decl							ZEND_FASTCALL	ZEND_FASTCALL ( zend_string * str )	zend_string_tolower
ANR	337056	DeclStmt									
ANR	337057	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * s1 , zval * s2 )"	zend_binary_zval_strcmp
ANR	337058	DeclStmt									
ANR	337059	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * s1 , zval * s2 , zval * s3 )"	zend_binary_zval_strncmp
ANR	337060	DeclStmt									
ANR	337061	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * s1 , zval * s2 )"	zend_binary_zval_strcasecmp
ANR	337062	DeclStmt									
ANR	337063	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * s1 , zval * s2 , zval * s3 )"	zend_binary_zval_strncasecmp
ANR	337064	DeclStmt									
ANR	337065	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( const char * s1 , size_t len1 , const char * s2 , size_t len2 )"	zend_binary_strcmp
ANR	337066	DeclStmt									
ANR	337067	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( const char * s1 , size_t len1 , const char * s2 , size_t len2 , size_t length )"	zend_binary_strncmp
ANR	337068	DeclStmt									
ANR	337069	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( const char * s1 , size_t len1 , const char * s2 , size_t len2 )"	zend_binary_strcasecmp
ANR	337070	DeclStmt									
ANR	337071	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( const char * s1 , size_t len1 , const char * s2 , size_t len2 , size_t length )"	zend_binary_strncasecmp
ANR	337072	DeclStmt									
ANR	337073	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( const char * s1 , size_t len1 , const char * s2 , size_t len2 )"	zend_binary_strcasecmp_l
ANR	337074	DeclStmt									
ANR	337075	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( const char * s1 , size_t len1 , const char * s2 , size_t len2 , size_t length )"	zend_binary_strncasecmp_l
ANR	337076	DeclStmt									
ANR	337077	Decl							ZEND_API zend_long ZEND_FASTCALL	"ZEND_API zend_long ZEND_FASTCALL ( zend_string * s1 , zend_string * s2 )"	zendi_smart_strcmp
ANR	337078	DeclStmt									
ANR	337079	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( HashTable * ht1 , HashTable * ht2 )"	zend_compare_symbol_tables
ANR	337080	DeclStmt									
ANR	337081	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * a1 , zval * a2 )"	zend_compare_arrays
ANR	337082	DeclStmt									
ANR	337083	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( zval * o1 , zval * o2 )"	zend_compare_objects
ANR	337084	DeclStmt									
ANR	337085	Decl							ZEND_API int ZEND_FASTCALL	"ZEND_API int ZEND_FASTCALL ( const char * str , int str_len )"	zend_atoi
ANR	337086	DeclStmt									
ANR	337087	Decl							ZEND_API zend_long ZEND_FASTCALL	"ZEND_API zend_long ZEND_FASTCALL ( const char * str , int str_len )"	zend_atol
ANR	337088	DeclStmt									
ANR	337089	Decl							convert_to_	convert_to_ ( pzv )	lower_type
ANR	337090	DeclStmt									
ANR	337091	Decl							ZEND_API void	ZEND_API void ( void )	zend_update_current_locale
ANR	337092	Function	fast_long_increment_function	435:0:16175:16942							
ANR	337093	FunctionDef	fast_long_increment_function (zval * op1)		337092	0					
ANR	337094	CompoundStatement		436:0:16246:16942	337092	0					
ANR	337095	Statement	__asm__	438:1:16292:16298	337092	0	True				
ANR	337096	Statement	(	438:8:16299:16299	337092	1	True				
ANR	337097	Statement	"""incl (%0)\\n\\t"""	439:2:16303:16317	337092	2	True				
ANR	337098	Statement	"""jno  0f\\n\\t"""	440:2:16321:16333	337092	3	True				
ANR	337099	Statement	"""movl $0x0, (%0)\\n\\t"""	441:2:16337:16357	337092	4	True				
ANR	337100	Statement	"""movl $0x41e00000, 0x4(%0)\\n\\t"""	442:2:16361:16391	337092	5	True				
ANR	337101	Statement	"""movl %1, %c2(%0)\\n"""	443:2:16395:16414	337092	6	True				
ANR	337102	Statement	"""0:"""	444:2:16418:16421	337092	7	True				
ANR	337103	Statement	:	445:2:16425:16425	337092	8	True				
ANR	337104	Statement	:	446:2:16429:16429	337092	9	True				
ANR	337105	Statement	"""r"""	446:4:16431:16433	337092	10	True				
ANR	337106	Statement	(	446:7:16434:16434	337092	11	True				
ANR	337107	Statement	&	446:8:16435:16435	337092	12	True				
ANR	337108	Statement	op1	446:9:16436:16438	337092	13	True				
ANR	337109	Statement	->	446:12:16439:16440	337092	14	True				
ANR	337110	Statement	value	446:14:16441:16445	337092	15	True				
ANR	337111	Statement	)	446:19:16446:16446	337092	16	True				
ANR	337112	Statement	","	446:20:16447:16447	337092	17	True				
ANR	337113	Statement	"""n"""	447:4:16453:16455	337092	18	True				
ANR	337114	Statement	(	447:7:16456:16456	337092	19	True				
ANR	337115	Statement	IS_DOUBLE	447:8:16457:16465	337092	20	True				
ANR	337116	Statement	)	447:17:16466:16466	337092	21	True				
ANR	337117	Statement	","	447:18:16467:16467	337092	22	True				
ANR	337118	Statement	"""n"""	448:4:16473:16475	337092	23	True				
ANR	337119	Statement	(	448:7:16476:16476	337092	24	True				
ANR	337120	Statement	ZVAL_OFFSETOF_TYPE	448:8:16477:16494	337092	25	True				
ANR	337121	Statement	)	448:26:16495:16495	337092	26	True				
ANR	337122	Statement	:	449:2:16499:16499	337092	27	True				
ANR	337123	Statement	"""cc"""	449:4:16501:16504	337092	28	True				
ANR	337124	Statement	)	449:8:16505:16505	337092	29	True				
ANR	337125	ExpressionStatement		449:9:16506:16506	337092	30	True				
ANR	337126	ReturnType	static zend_always_inline void		337092	1					
ANR	337127	Identifier	fast_long_increment_function		337092	2					
ANR	337128	ParameterList	zval * op1		337092	3					
ANR	337129	Parameter	zval * op1	435:60:16235:16243	337092	0	True				
ANR	337130	ParameterType	zval *		337092	0					
ANR	337131	Identifier	op1		337092	1					
ANR	337132	CFGEntryNode	ENTRY		337092		True				
ANR	337133	CFGExitNode	EXIT		337092		True				
ANR	337134	Symbol	op1		337092						
ANR	337135	Function	fast_long_decrement_function	473:0:16945:17724							
ANR	337136	FunctionDef	fast_long_decrement_function (zval * op1)		337135	0					
ANR	337137	CompoundStatement		474:0:17016:17724	337135	0					
ANR	337138	Statement	__asm__	476:1:17062:17068	337135	0	True				
ANR	337139	Statement	(	476:8:17069:17069	337135	1	True				
ANR	337140	Statement	"""decl (%0)\\n\\t"""	477:2:17073:17087	337135	2	True				
ANR	337141	Statement	"""jno  0f\\n\\t"""	478:2:17091:17103	337135	3	True				
ANR	337142	Statement	"""movl $0x00200000, (%0)\\n\\t"""	479:2:17107:17134	337135	4	True				
ANR	337143	Statement	"""movl $0xc1e00000, 0x4(%0)\\n\\t"""	480:2:17138:17168	337135	5	True				
ANR	337144	Statement	"""movl %1,%c2(%0)\\n"""	481:2:17172:17190	337135	6	True				
ANR	337145	Statement	"""0:"""	482:2:17194:17197	337135	7	True				
ANR	337146	Statement	:	483:2:17201:17201	337135	8	True				
ANR	337147	Statement	:	484:2:17205:17205	337135	9	True				
ANR	337148	Statement	"""r"""	484:4:17207:17209	337135	10	True				
ANR	337149	Statement	(	484:7:17210:17210	337135	11	True				
ANR	337150	Statement	&	484:8:17211:17211	337135	12	True				
ANR	337151	Statement	op1	484:9:17212:17214	337135	13	True				
ANR	337152	Statement	->	484:12:17215:17216	337135	14	True				
ANR	337153	Statement	value	484:14:17217:17221	337135	15	True				
ANR	337154	Statement	)	484:19:17222:17222	337135	16	True				
ANR	337155	Statement	","	484:20:17223:17223	337135	17	True				
ANR	337156	Statement	"""n"""	485:4:17229:17231	337135	18	True				
ANR	337157	Statement	(	485:7:17232:17232	337135	19	True				
ANR	337158	Statement	IS_DOUBLE	485:8:17233:17241	337135	20	True				
ANR	337159	Statement	)	485:17:17242:17242	337135	21	True				
ANR	337160	Statement	","	485:18:17243:17243	337135	22	True				
ANR	337161	Statement	"""n"""	486:4:17249:17251	337135	23	True				
ANR	337162	Statement	(	486:7:17252:17252	337135	24	True				
ANR	337163	Statement	ZVAL_OFFSETOF_TYPE	486:8:17253:17270	337135	25	True				
ANR	337164	Statement	)	486:26:17271:17271	337135	26	True				
ANR	337165	Statement	:	487:2:17275:17275	337135	27	True				
ANR	337166	Statement	"""cc"""	487:4:17277:17280	337135	28	True				
ANR	337167	Statement	)	487:8:17281:17281	337135	29	True				
ANR	337168	ExpressionStatement		487:9:17282:17282	337135	30	True				
ANR	337169	ReturnType	static zend_always_inline void		337135	1					
ANR	337170	Identifier	fast_long_decrement_function		337135	2					
ANR	337171	ParameterList	zval * op1		337135	3					
ANR	337172	Parameter	zval * op1	473:60:17005:17013	337135	0	True				
ANR	337173	ParameterType	zval *		337135	0					
ANR	337174	Identifier	op1		337135	1					
ANR	337175	CFGEntryNode	ENTRY		337135		True				
ANR	337176	CFGExitNode	EXIT		337135		True				
ANR	337177	Symbol	op1		337135						
ANR	337178	Function	fast_long_add_function	511:0:17727:19311							
ANR	337179	FunctionDef	"fast_long_add_function (zval * result , zval * op1 , zval * op2)"		337178	0					
ANR	337180	CompoundStatement		512:0:17817:19311	337178	0					
ANR	337181	Statement	__asm__	514:1:17906:17912	337178	0	True				
ANR	337182	Statement	(	514:8:17913:17913	337178	1	True				
ANR	337183	Statement	"""movl\\t(%1), %%eax\\n\\t"""	515:2:17917:17938	337178	2	True				
ANR	337184	Statement	"""addl   (%2), %%eax\\n\\t"""	516:2:17942:17965	337178	3	True				
ANR	337185	Statement	"""jo     0f\\n\\t"""	517:2:17969:17983	337178	4	True				
ANR	337186	Statement	"""movl   %%eax, (%0)\\n\\t"""	518:2:17987:18010	337178	5	True				
ANR	337187	Statement	"""movl   %3, %c5(%0)\\n\\t"""	519:2:18014:18037	337178	6	True				
ANR	337188	Statement	"""jmp    1f\\n"""	520:2:18041:18053	337178	7	True				
ANR	337189	Statement	"""0:\\n\\t"""	521:2:18057:18064	337178	8	True				
ANR	337190	Statement	"""fildl\\t(%1)\\n\\t"""	522:2:18068:18083	337178	9	True				
ANR	337191	Statement	"""fildl\\t(%2)\\n\\t"""	523:2:18087:18102	337178	10	True				
ANR	337192	Statement	"""faddp\\t%%st, %%st(1)\\n\\t"""	524:2:18106:18130	337178	11	True				
ANR	337193	Statement	"""movl   %4, %c5(%0)\\n\\t"""	525:2:18134:18157	337178	12	True				
ANR	337194	Statement	"""fstpl\\t(%0)\\n"""	526:2:18161:18174	337178	13	True				
ANR	337195	Statement	"""1:"""	527:2:18178:18181	337178	14	True				
ANR	337196	Statement	:	528:2:18185:18185	337178	15	True				
ANR	337197	Statement	:	529:2:18189:18189	337178	16	True				
ANR	337198	Statement	"""r"""	529:4:18191:18193	337178	17	True				
ANR	337199	Statement	(	529:7:18194:18194	337178	18	True				
ANR	337200	Statement	&	529:8:18195:18195	337178	19	True				
ANR	337201	Statement	result	529:9:18196:18201	337178	20	True				
ANR	337202	Statement	->	529:15:18202:18203	337178	21	True				
ANR	337203	Statement	value	529:17:18204:18208	337178	22	True				
ANR	337204	Statement	)	529:22:18209:18209	337178	23	True				
ANR	337205	Statement	","	529:23:18210:18210	337178	24	True				
ANR	337206	Statement	"""r"""	530:4:18216:18218	337178	25	True				
ANR	337207	Statement	(	530:7:18219:18219	337178	26	True				
ANR	337208	Statement	&	530:8:18220:18220	337178	27	True				
ANR	337209	Statement	op1	530:9:18221:18223	337178	28	True				
ANR	337210	Statement	->	530:12:18224:18225	337178	29	True				
ANR	337211	Statement	value	530:14:18226:18230	337178	30	True				
ANR	337212	Statement	)	530:19:18231:18231	337178	31	True				
ANR	337213	Statement	","	530:20:18232:18232	337178	32	True				
ANR	337214	Statement	"""r"""	531:4:18238:18240	337178	33	True				
ANR	337215	Statement	(	531:7:18241:18241	337178	34	True				
ANR	337216	Statement	&	531:8:18242:18242	337178	35	True				
ANR	337217	Statement	op2	531:9:18243:18245	337178	36	True				
ANR	337218	Statement	->	531:12:18246:18247	337178	37	True				
ANR	337219	Statement	value	531:14:18248:18252	337178	38	True				
ANR	337220	Statement	)	531:19:18253:18253	337178	39	True				
ANR	337221	Statement	","	531:20:18254:18254	337178	40	True				
ANR	337222	Statement	"""n"""	532:4:18260:18262	337178	41	True				
ANR	337223	Statement	(	532:7:18263:18263	337178	42	True				
ANR	337224	Statement	IS_LONG	532:8:18264:18270	337178	43	True				
ANR	337225	Statement	)	532:15:18271:18271	337178	44	True				
ANR	337226	Statement	","	532:16:18272:18272	337178	45	True				
ANR	337227	Statement	"""n"""	533:4:18278:18280	337178	46	True				
ANR	337228	Statement	(	533:7:18281:18281	337178	47	True				
ANR	337229	Statement	IS_DOUBLE	533:8:18282:18290	337178	48	True				
ANR	337230	Statement	)	533:17:18291:18291	337178	49	True				
ANR	337231	Statement	","	533:18:18292:18292	337178	50	True				
ANR	337232	Statement	"""n"""	534:4:18298:18300	337178	51	True				
ANR	337233	Statement	(	534:7:18301:18301	337178	52	True				
ANR	337234	Statement	ZVAL_OFFSETOF_TYPE	534:8:18302:18319	337178	53	True				
ANR	337235	Statement	)	534:26:18320:18320	337178	54	True				
ANR	337236	Statement	:	535:2:18324:18324	337178	55	True				
ANR	337237	Statement	"""eax"""	535:4:18326:18330	337178	56	True				
ANR	337238	Statement	","	535:9:18331:18331	337178	57	True				
ANR	337239	Statement	"""cc"""	535:10:18332:18335	337178	58	True				
ANR	337240	Statement	)	535:14:18336:18336	337178	59	True				
ANR	337241	ExpressionStatement		535:15:18337:18337	337178	60	True				
ANR	337242	ReturnType	static zend_always_inline void		337178	1					
ANR	337243	Identifier	fast_long_add_function		337178	2					
ANR	337244	ParameterList	"zval * result , zval * op1 , zval * op2"		337178	3					
ANR	337245	Parameter	zval * result	511:54:17781:17792	337178	0	True				
ANR	337246	ParameterType	zval *		337178	0					
ANR	337247	Identifier	result		337178	1					
ANR	337248	Parameter	zval * op1	511:68:17795:17803	337178	1	True				
ANR	337249	ParameterType	zval *		337178	0					
ANR	337250	Identifier	op1		337178	1					
ANR	337251	Parameter	zval * op2	511:79:17806:17814	337178	2	True				
ANR	337252	ParameterType	zval *		337178	0					
ANR	337253	Identifier	op2		337178	1					
ANR	337254	CFGEntryNode	ENTRY		337178		True				
ANR	337255	CFGExitNode	EXIT		337178		True				
ANR	337256	Symbol	result		337178						
ANR	337257	Symbol	op2		337178						
ANR	337258	Symbol	op1		337178						
ANR	337259	Function	fast_add_function	575:0:19314:20046							
ANR	337260	FunctionDef	"fast_add_function (zval * result , zval * op1 , zval * op2)"		337259	0					
ANR	337261	CompoundStatement		576:0:19398:20046	337259	0					
ANR	337262	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op1 ) == IS_LONG ) )		337259	0					
ANR	337263	Condition	EXPECTED ( Z_TYPE_P ( op1 ) == IS_LONG )	577:5:19405:19438	337259	0	True				
ANR	337264	CallExpression	EXPECTED ( Z_TYPE_P ( op1 ) == IS_LONG )		337259	0					
ANR	337265	Callee	EXPECTED		337259	0					
ANR	337266	Identifier	EXPECTED		337259	0					
ANR	337267	ArgumentList	Z_TYPE_P ( op1 ) == IS_LONG		337259	1					
ANR	337268	Argument	Z_TYPE_P ( op1 ) == IS_LONG		337259	0					
ANR	337269	EqualityExpression	Z_TYPE_P ( op1 ) == IS_LONG		337259	0		==			
ANR	337270	CallExpression	Z_TYPE_P ( op1 )		337259	0					
ANR	337271	Callee	Z_TYPE_P		337259	0					
ANR	337272	Identifier	Z_TYPE_P		337259	0					
ANR	337273	ArgumentList	op1		337259	1					
ANR	337274	Argument	op1		337259	0					
ANR	337275	Identifier	op1		337259	0					
ANR	337276	Identifier	IS_LONG		337259	1					
ANR	337277	CompoundStatement		2:41:42:42	337259	1					
ANR	337278	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG ) )		337259	0					
ANR	337279	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )	578:6:19449:19482	337259	0	True				
ANR	337280	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )		337259	0					
ANR	337281	Callee	EXPECTED		337259	0					
ANR	337282	Identifier	EXPECTED		337259	0					
ANR	337283	ArgumentList	Z_TYPE_P ( op2 ) == IS_LONG		337259	1					
ANR	337284	Argument	Z_TYPE_P ( op2 ) == IS_LONG		337259	0					
ANR	337285	EqualityExpression	Z_TYPE_P ( op2 ) == IS_LONG		337259	0		==			
ANR	337286	CallExpression	Z_TYPE_P ( op2 )		337259	0					
ANR	337287	Callee	Z_TYPE_P		337259	0					
ANR	337288	Identifier	Z_TYPE_P		337259	0					
ANR	337289	ArgumentList	op2		337259	1					
ANR	337290	Argument	op2		337259	0					
ANR	337291	Identifier	op2		337259	0					
ANR	337292	Identifier	IS_LONG		337259	1					
ANR	337293	CompoundStatement		3:42:86:86	337259	1					
ANR	337294	ExpressionStatement	"fast_long_add_function ( result , op1 , op2 )"	579:3:19490:19530	337259	0	True				
ANR	337295	CallExpression	"fast_long_add_function ( result , op1 , op2 )"		337259	0					
ANR	337296	Callee	fast_long_add_function		337259	0					
ANR	337297	Identifier	fast_long_add_function		337259	0					
ANR	337298	ArgumentList	result		337259	1					
ANR	337299	Argument	result		337259	0					
ANR	337300	Identifier	result		337259	0					
ANR	337301	Argument	op1		337259	1					
ANR	337302	Identifier	op1		337259	0					
ANR	337303	Argument	op2		337259	2					
ANR	337304	Identifier	op2		337259	0					
ANR	337305	ReturnStatement	return SUCCESS ;	580:3:19535:19549	337259	1	True				
ANR	337306	Identifier	SUCCESS		337259	0					
ANR	337307	ElseStatement	else		337259	0					
ANR	337308	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE ) )		337259	0					
ANR	337309	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE )	581:13:19564:19599	337259	0	True				
ANR	337310	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE )		337259	0					
ANR	337311	Callee	EXPECTED		337259	0					
ANR	337312	Identifier	EXPECTED		337259	0					
ANR	337313	ArgumentList	Z_TYPE_P ( op2 ) == IS_DOUBLE		337259	1					
ANR	337314	Argument	Z_TYPE_P ( op2 ) == IS_DOUBLE		337259	0					
ANR	337315	EqualityExpression	Z_TYPE_P ( op2 ) == IS_DOUBLE		337259	0		==			
ANR	337316	CallExpression	Z_TYPE_P ( op2 )		337259	0					
ANR	337317	Callee	Z_TYPE_P		337259	0					
ANR	337318	Identifier	Z_TYPE_P		337259	0					
ANR	337319	ArgumentList	op2		337259	1					
ANR	337320	Argument	op2		337259	0					
ANR	337321	Identifier	op2		337259	0					
ANR	337322	Identifier	IS_DOUBLE		337259	1					
ANR	337323	CompoundStatement		6:51:203:203	337259	1					
ANR	337324	ExpressionStatement	"ZVAL_DOUBLE ( result , ( ( double ) Z_LVAL_P ( op1 ) ) + Z_DVAL_P ( op2 ) )"	582:3:19607:19667	337259	0	True				
ANR	337325	CallExpression	"ZVAL_DOUBLE ( result , ( ( double ) Z_LVAL_P ( op1 ) ) + Z_DVAL_P ( op2 ) )"		337259	0					
ANR	337326	Callee	ZVAL_DOUBLE		337259	0					
ANR	337327	Identifier	ZVAL_DOUBLE		337259	0					
ANR	337328	ArgumentList	result		337259	1					
ANR	337329	Argument	result		337259	0					
ANR	337330	Identifier	result		337259	0					
ANR	337331	Argument	( ( double ) Z_LVAL_P ( op1 ) ) + Z_DVAL_P ( op2 )		337259	1					
ANR	337332	AdditiveExpression	( ( double ) Z_LVAL_P ( op1 ) ) + Z_DVAL_P ( op2 )		337259	0		+			
ANR	337333	CastExpression	( double ) Z_LVAL_P ( op1 )		337259	0					
ANR	337334	CastTarget	double		337259	0					
ANR	337335	CallExpression	Z_LVAL_P ( op1 )		337259	1					
ANR	337336	Callee	Z_LVAL_P		337259	0					
ANR	337337	Identifier	Z_LVAL_P		337259	0					
ANR	337338	ArgumentList	op1		337259	1					
ANR	337339	Argument	op1		337259	0					
ANR	337340	Identifier	op1		337259	0					
ANR	337341	CallExpression	Z_DVAL_P ( op2 )		337259	1					
ANR	337342	Callee	Z_DVAL_P		337259	0					
ANR	337343	Identifier	Z_DVAL_P		337259	0					
ANR	337344	ArgumentList	op2		337259	1					
ANR	337345	Argument	op2		337259	0					
ANR	337346	Identifier	op2		337259	0					
ANR	337347	ReturnStatement	return SUCCESS ;	583:3:19672:19686	337259	1	True				
ANR	337348	Identifier	SUCCESS		337259	0					
ANR	337349	ElseStatement	else		337259	0					
ANR	337350	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op1 ) == IS_DOUBLE ) )		337259	0					
ANR	337351	Condition	EXPECTED ( Z_TYPE_P ( op1 ) == IS_DOUBLE )	585:12:19704:19739	337259	0	True				
ANR	337352	CallExpression	EXPECTED ( Z_TYPE_P ( op1 ) == IS_DOUBLE )		337259	0					
ANR	337353	Callee	EXPECTED		337259	0					
ANR	337354	Identifier	EXPECTED		337259	0					
ANR	337355	ArgumentList	Z_TYPE_P ( op1 ) == IS_DOUBLE		337259	1					
ANR	337356	Argument	Z_TYPE_P ( op1 ) == IS_DOUBLE		337259	0					
ANR	337357	EqualityExpression	Z_TYPE_P ( op1 ) == IS_DOUBLE		337259	0		==			
ANR	337358	CallExpression	Z_TYPE_P ( op1 )		337259	0					
ANR	337359	Callee	Z_TYPE_P		337259	0					
ANR	337360	Identifier	Z_TYPE_P		337259	0					
ANR	337361	ArgumentList	op1		337259	1					
ANR	337362	Argument	op1		337259	0					
ANR	337363	Identifier	op1		337259	0					
ANR	337364	Identifier	IS_DOUBLE		337259	1					
ANR	337365	CompoundStatement		10:50:343:343	337259	1					
ANR	337366	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE ) )		337259	0					
ANR	337367	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE )	586:6:19750:19785	337259	0	True				
ANR	337368	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE )		337259	0					
ANR	337369	Callee	EXPECTED		337259	0					
ANR	337370	Identifier	EXPECTED		337259	0					
ANR	337371	ArgumentList	Z_TYPE_P ( op2 ) == IS_DOUBLE		337259	1					
ANR	337372	Argument	Z_TYPE_P ( op2 ) == IS_DOUBLE		337259	0					
ANR	337373	EqualityExpression	Z_TYPE_P ( op2 ) == IS_DOUBLE		337259	0		==			
ANR	337374	CallExpression	Z_TYPE_P ( op2 )		337259	0					
ANR	337375	Callee	Z_TYPE_P		337259	0					
ANR	337376	Identifier	Z_TYPE_P		337259	0					
ANR	337377	ArgumentList	op2		337259	1					
ANR	337378	Argument	op2		337259	0					
ANR	337379	Identifier	op2		337259	0					
ANR	337380	Identifier	IS_DOUBLE		337259	1					
ANR	337381	CompoundStatement		11:44:389:389	337259	1					
ANR	337382	ExpressionStatement	"ZVAL_DOUBLE ( result , Z_DVAL_P ( op1 ) + Z_DVAL_P ( op2 ) )"	587:3:19793:19843	337259	0	True				
ANR	337383	CallExpression	"ZVAL_DOUBLE ( result , Z_DVAL_P ( op1 ) + Z_DVAL_P ( op2 ) )"		337259	0					
ANR	337384	Callee	ZVAL_DOUBLE		337259	0					
ANR	337385	Identifier	ZVAL_DOUBLE		337259	0					
ANR	337386	ArgumentList	result		337259	1					
ANR	337387	Argument	result		337259	0					
ANR	337388	Identifier	result		337259	0					
ANR	337389	Argument	Z_DVAL_P ( op1 ) + Z_DVAL_P ( op2 )		337259	1					
ANR	337390	AdditiveExpression	Z_DVAL_P ( op1 ) + Z_DVAL_P ( op2 )		337259	0		+			
ANR	337391	CallExpression	Z_DVAL_P ( op1 )		337259	0					
ANR	337392	Callee	Z_DVAL_P		337259	0					
ANR	337393	Identifier	Z_DVAL_P		337259	0					
ANR	337394	ArgumentList	op1		337259	1					
ANR	337395	Argument	op1		337259	0					
ANR	337396	Identifier	op1		337259	0					
ANR	337397	CallExpression	Z_DVAL_P ( op2 )		337259	1					
ANR	337398	Callee	Z_DVAL_P		337259	0					
ANR	337399	Identifier	Z_DVAL_P		337259	0					
ANR	337400	ArgumentList	op2		337259	1					
ANR	337401	Argument	op2		337259	0					
ANR	337402	Identifier	op2		337259	0					
ANR	337403	ReturnStatement	return SUCCESS ;	588:3:19848:19862	337259	1	True				
ANR	337404	Identifier	SUCCESS		337259	0					
ANR	337405	ElseStatement	else		337259	0					
ANR	337406	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG ) )		337259	0					
ANR	337407	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )	589:13:19877:19910	337259	0	True				
ANR	337408	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )		337259	0					
ANR	337409	Callee	EXPECTED		337259	0					
ANR	337410	Identifier	EXPECTED		337259	0					
ANR	337411	ArgumentList	Z_TYPE_P ( op2 ) == IS_LONG		337259	1					
ANR	337412	Argument	Z_TYPE_P ( op2 ) == IS_LONG		337259	0					
ANR	337413	EqualityExpression	Z_TYPE_P ( op2 ) == IS_LONG		337259	0		==			
ANR	337414	CallExpression	Z_TYPE_P ( op2 )		337259	0					
ANR	337415	Callee	Z_TYPE_P		337259	0					
ANR	337416	Identifier	Z_TYPE_P		337259	0					
ANR	337417	ArgumentList	op2		337259	1					
ANR	337418	Argument	op2		337259	0					
ANR	337419	Identifier	op2		337259	0					
ANR	337420	Identifier	IS_LONG		337259	1					
ANR	337421	CompoundStatement		14:49:514:514	337259	1					
ANR	337422	ExpressionStatement	"ZVAL_DOUBLE ( result , Z_DVAL_P ( op1 ) + ( ( double ) Z_LVAL_P ( op2 ) ) )"	590:3:19918:19978	337259	0	True				
ANR	337423	CallExpression	"ZVAL_DOUBLE ( result , Z_DVAL_P ( op1 ) + ( ( double ) Z_LVAL_P ( op2 ) ) )"		337259	0					
ANR	337424	Callee	ZVAL_DOUBLE		337259	0					
ANR	337425	Identifier	ZVAL_DOUBLE		337259	0					
ANR	337426	ArgumentList	result		337259	1					
ANR	337427	Argument	result		337259	0					
ANR	337428	Identifier	result		337259	0					
ANR	337429	Argument	Z_DVAL_P ( op1 ) + ( ( double ) Z_LVAL_P ( op2 ) )		337259	1					
ANR	337430	AdditiveExpression	Z_DVAL_P ( op1 ) + ( ( double ) Z_LVAL_P ( op2 ) )		337259	0		+			
ANR	337431	CallExpression	Z_DVAL_P ( op1 )		337259	0					
ANR	337432	Callee	Z_DVAL_P		337259	0					
ANR	337433	Identifier	Z_DVAL_P		337259	0					
ANR	337434	ArgumentList	op1		337259	1					
ANR	337435	Argument	op1		337259	0					
ANR	337436	Identifier	op1		337259	0					
ANR	337437	CastExpression	( double ) Z_LVAL_P ( op2 )		337259	1					
ANR	337438	CastTarget	double		337259	0					
ANR	337439	CallExpression	Z_LVAL_P ( op2 )		337259	1					
ANR	337440	Callee	Z_LVAL_P		337259	0					
ANR	337441	Identifier	Z_LVAL_P		337259	0					
ANR	337442	ArgumentList	op2		337259	1					
ANR	337443	Argument	op2		337259	0					
ANR	337444	Identifier	op2		337259	0					
ANR	337445	ReturnStatement	return SUCCESS ;	591:3:19983:19997	337259	1	True				
ANR	337446	Identifier	SUCCESS		337259	0					
ANR	337447	ReturnStatement	"return add_function ( result , op1 , op2 ) ;"	594:1:20007:20044	337259	1	True				
ANR	337448	CallExpression	"add_function ( result , op1 , op2 )"		337259	0					
ANR	337449	Callee	add_function		337259	0					
ANR	337450	Identifier	add_function		337259	0					
ANR	337451	ArgumentList	result		337259	1					
ANR	337452	Argument	result		337259	0					
ANR	337453	Identifier	result		337259	0					
ANR	337454	Argument	op1		337259	1					
ANR	337455	Identifier	op1		337259	0					
ANR	337456	Argument	op2		337259	2					
ANR	337457	Identifier	op2		337259	0					
ANR	337458	ReturnType	static zend_always_inline int		337259	1					
ANR	337459	Identifier	fast_add_function		337259	2					
ANR	337460	ParameterList	"zval * result , zval * op1 , zval * op2"		337259	3					
ANR	337461	Parameter	zval * result	575:48:19362:19373	337259	0	True				
ANR	337462	ParameterType	zval *		337259	0					
ANR	337463	Identifier	result		337259	1					
ANR	337464	Parameter	zval * op1	575:62:19376:19384	337259	1	True				
ANR	337465	ParameterType	zval *		337259	0					
ANR	337466	Identifier	op1		337259	1					
ANR	337467	Parameter	zval * op2	575:73:19387:19395	337259	2	True				
ANR	337468	ParameterType	zval *		337259	0					
ANR	337469	Identifier	op2		337259	1					
ANR	337470	CFGEntryNode	ENTRY		337259		True				
ANR	337471	CFGExitNode	EXIT		337259		True				
ANR	337472	Symbol	result		337259						
ANR	337473	Symbol	op2		337259						
ANR	337474	Symbol	op1		337259						
ANR	337475	Symbol	SUCCESS		337259						
ANR	337476	Symbol	IS_LONG		337259						
ANR	337477	Symbol	IS_DOUBLE		337259						
ANR	337478	Symbol	Z_TYPE_P		337259						
ANR	337479	Symbol	add_function		337259						
ANR	337480	Symbol	EXPECTED		337259						
ANR	337481	Symbol	Z_DVAL_P		337259						
ANR	337482	Symbol	Z_LVAL_P		337259						
ANR	337483	Function	fast_long_sub_function	597:0:20049:21772							
ANR	337484	FunctionDef	"fast_long_sub_function (zval * result , zval * op1 , zval * op2)"		337483	0					
ANR	337485	CompoundStatement		598:0:20139:21772	337483	0					
ANR	337486	Statement	__asm__	600:1:20228:20234	337483	0	True				
ANR	337487	Statement	(	600:8:20235:20235	337483	1	True				
ANR	337488	Statement	"""movl\\t(%1), %%eax\\n\\t"""	601:2:20239:20260	337483	2	True				
ANR	337489	Statement	"""subl   (%2), %%eax\\n\\t"""	602:2:20264:20287	337483	3	True				
ANR	337490	Statement	"""jo     0f\\n\\t"""	603:2:20291:20305	337483	4	True				
ANR	337491	Statement	"""movl   %%eax, (%0)\\n\\t"""	604:2:20309:20332	337483	5	True				
ANR	337492	Statement	"""movl   %3, %c5(%0)\\n\\t"""	605:2:20336:20359	337483	6	True				
ANR	337493	Statement	"""jmp    1f\\n"""	606:2:20363:20375	337483	7	True				
ANR	337494	Statement	"""0:\\n\\t"""	607:2:20379:20386	337483	8	True				
ANR	337495	Statement	"""fildl\\t(%2)\\n\\t"""	608:2:20390:20405	337483	9	True				
ANR	337496	Statement	"""fildl\\t(%1)\\n\\t"""	609:2:20409:20424	337483	10	True				
ANR	337497	Statement	"""fsubp  %%st(1), %%st\\n\\t"""	611:2:20526:20551	337483	11	True				
ANR	337498	Statement	"""movl   %4, %c5(%0)\\n\\t"""	615:2:20618:20641	337483	12	True				
ANR	337499	Statement	"""fstpl\\t(%0)\\n"""	616:2:20645:20658	337483	13	True				
ANR	337500	Statement	"""1:"""	617:2:20662:20665	337483	14	True				
ANR	337501	Statement	:	618:2:20669:20669	337483	15	True				
ANR	337502	Statement	:	619:2:20673:20673	337483	16	True				
ANR	337503	Statement	"""r"""	619:4:20675:20677	337483	17	True				
ANR	337504	Statement	(	619:7:20678:20678	337483	18	True				
ANR	337505	Statement	&	619:8:20679:20679	337483	19	True				
ANR	337506	Statement	result	619:9:20680:20685	337483	20	True				
ANR	337507	Statement	->	619:15:20686:20687	337483	21	True				
ANR	337508	Statement	value	619:17:20688:20692	337483	22	True				
ANR	337509	Statement	)	619:22:20693:20693	337483	23	True				
ANR	337510	Statement	","	619:23:20694:20694	337483	24	True				
ANR	337511	Statement	"""r"""	620:4:20700:20702	337483	25	True				
ANR	337512	Statement	(	620:7:20703:20703	337483	26	True				
ANR	337513	Statement	&	620:8:20704:20704	337483	27	True				
ANR	337514	Statement	op1	620:9:20705:20707	337483	28	True				
ANR	337515	Statement	->	620:12:20708:20709	337483	29	True				
ANR	337516	Statement	value	620:14:20710:20714	337483	30	True				
ANR	337517	Statement	)	620:19:20715:20715	337483	31	True				
ANR	337518	Statement	","	620:20:20716:20716	337483	32	True				
ANR	337519	Statement	"""r"""	621:4:20722:20724	337483	33	True				
ANR	337520	Statement	(	621:7:20725:20725	337483	34	True				
ANR	337521	Statement	&	621:8:20726:20726	337483	35	True				
ANR	337522	Statement	op2	621:9:20727:20729	337483	36	True				
ANR	337523	Statement	->	621:12:20730:20731	337483	37	True				
ANR	337524	Statement	value	621:14:20732:20736	337483	38	True				
ANR	337525	Statement	)	621:19:20737:20737	337483	39	True				
ANR	337526	Statement	","	621:20:20738:20738	337483	40	True				
ANR	337527	Statement	"""n"""	622:4:20744:20746	337483	41	True				
ANR	337528	Statement	(	622:7:20747:20747	337483	42	True				
ANR	337529	Statement	IS_LONG	622:8:20748:20754	337483	43	True				
ANR	337530	Statement	)	622:15:20755:20755	337483	44	True				
ANR	337531	Statement	","	622:16:20756:20756	337483	45	True				
ANR	337532	Statement	"""n"""	623:4:20762:20764	337483	46	True				
ANR	337533	Statement	(	623:7:20765:20765	337483	47	True				
ANR	337534	Statement	IS_DOUBLE	623:8:20766:20774	337483	48	True				
ANR	337535	Statement	)	623:17:20775:20775	337483	49	True				
ANR	337536	Statement	","	623:18:20776:20776	337483	50	True				
ANR	337537	Statement	"""n"""	624:4:20782:20784	337483	51	True				
ANR	337538	Statement	(	624:7:20785:20785	337483	52	True				
ANR	337539	Statement	ZVAL_OFFSETOF_TYPE	624:8:20786:20803	337483	53	True				
ANR	337540	Statement	)	624:26:20804:20804	337483	54	True				
ANR	337541	Statement	:	625:2:20808:20808	337483	55	True				
ANR	337542	Statement	"""eax"""	625:4:20810:20814	337483	56	True				
ANR	337543	Statement	","	625:9:20815:20815	337483	57	True				
ANR	337544	Statement	"""cc"""	625:10:20816:20819	337483	58	True				
ANR	337545	Statement	)	625:14:20820:20820	337483	59	True				
ANR	337546	ExpressionStatement		625:15:20821:20821	337483	60	True				
ANR	337547	ReturnType	static zend_always_inline void		337483	1					
ANR	337548	Identifier	fast_long_sub_function		337483	2					
ANR	337549	ParameterList	"zval * result , zval * op1 , zval * op2"		337483	3					
ANR	337550	Parameter	zval * result	597:54:20103:20114	337483	0	True				
ANR	337551	ParameterType	zval *		337483	0					
ANR	337552	Identifier	result		337483	1					
ANR	337553	Parameter	zval * op1	597:68:20117:20125	337483	1	True				
ANR	337554	ParameterType	zval *		337483	0					
ANR	337555	Identifier	op1		337483	1					
ANR	337556	Parameter	zval * op2	597:79:20128:20136	337483	2	True				
ANR	337557	ParameterType	zval *		337483	0					
ANR	337558	Identifier	op2		337483	1					
ANR	337559	CFGEntryNode	ENTRY		337483		True				
ANR	337560	CFGExitNode	EXIT		337483		True				
ANR	337561	Symbol	result		337483						
ANR	337562	Symbol	op2		337483						
ANR	337563	Symbol	op1		337483						
ANR	337564	Function	fast_div_function	663:0:21775:21901							
ANR	337565	FunctionDef	"fast_div_function (zval * result , zval * op1 , zval * op2)"		337564	0					
ANR	337566	CompoundStatement		664:0:21859:21901	337564	0					
ANR	337567	ReturnStatement	"return div_function ( result , op1 , op2 ) ;"	665:1:21862:21899	337564	0	True				
ANR	337568	CallExpression	"div_function ( result , op1 , op2 )"		337564	0					
ANR	337569	Callee	div_function		337564	0					
ANR	337570	Identifier	div_function		337564	0					
ANR	337571	ArgumentList	result		337564	1					
ANR	337572	Argument	result		337564	0					
ANR	337573	Identifier	result		337564	0					
ANR	337574	Argument	op1		337564	1					
ANR	337575	Identifier	op1		337564	0					
ANR	337576	Argument	op2		337564	2					
ANR	337577	Identifier	op2		337564	0					
ANR	337578	ReturnType	static zend_always_inline int		337564	1					
ANR	337579	Identifier	fast_div_function		337564	2					
ANR	337580	ParameterList	"zval * result , zval * op1 , zval * op2"		337564	3					
ANR	337581	Parameter	zval * result	663:48:21823:21834	337564	0	True				
ANR	337582	ParameterType	zval *		337564	0					
ANR	337583	Identifier	result		337564	1					
ANR	337584	Parameter	zval * op1	663:62:21837:21845	337564	1	True				
ANR	337585	ParameterType	zval *		337564	0					
ANR	337586	Identifier	op1		337564	1					
ANR	337587	Parameter	zval * op2	663:73:21848:21856	337564	2	True				
ANR	337588	ParameterType	zval *		337564	0					
ANR	337589	Identifier	op2		337564	1					
ANR	337590	CFGEntryNode	ENTRY		337564		True				
ANR	337591	CFGExitNode	EXIT		337564		True				
ANR	337592	Symbol	result		337564						
ANR	337593	Symbol	op2		337564						
ANR	337594	Symbol	op1		337564						
ANR	337595	Symbol	div_function		337564						
ANR	337596	Function	fast_equal_check_function	668:0:21904:23015							
ANR	337597	FunctionDef	"fast_equal_check_function (zval * op1 , zval * op2)"		337596	0					
ANR	337598	CompoundStatement		669:0:21982:23015	337596	0					
ANR	337599	IdentifierDeclStatement	zval result ;	670:1:21985:21996	337596	0	True				
ANR	337600	IdentifierDecl	result		337596	0					
ANR	337601	IdentifierDeclType	zval		337596	0					
ANR	337602	Identifier	result		337596	1					
ANR	337603	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op1 ) == IS_LONG ) )		337596	1					
ANR	337604	Condition	EXPECTED ( Z_TYPE_P ( op1 ) == IS_LONG )	671:5:22003:22036	337596	0	True				
ANR	337605	CallExpression	EXPECTED ( Z_TYPE_P ( op1 ) == IS_LONG )		337596	0					
ANR	337606	Callee	EXPECTED		337596	0					
ANR	337607	Identifier	EXPECTED		337596	0					
ANR	337608	ArgumentList	Z_TYPE_P ( op1 ) == IS_LONG		337596	1					
ANR	337609	Argument	Z_TYPE_P ( op1 ) == IS_LONG		337596	0					
ANR	337610	EqualityExpression	Z_TYPE_P ( op1 ) == IS_LONG		337596	0		==			
ANR	337611	CallExpression	Z_TYPE_P ( op1 )		337596	0					
ANR	337612	Callee	Z_TYPE_P		337596	0					
ANR	337613	Identifier	Z_TYPE_P		337596	0					
ANR	337614	ArgumentList	op1		337596	1					
ANR	337615	Argument	op1		337596	0					
ANR	337616	Identifier	op1		337596	0					
ANR	337617	Identifier	IS_LONG		337596	1					
ANR	337618	CompoundStatement		3:41:56:56	337596	1					
ANR	337619	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG ) )		337596	0					
ANR	337620	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )	672:6:22047:22080	337596	0	True				
ANR	337621	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )		337596	0					
ANR	337622	Callee	EXPECTED		337596	0					
ANR	337623	Identifier	EXPECTED		337596	0					
ANR	337624	ArgumentList	Z_TYPE_P ( op2 ) == IS_LONG		337596	1					
ANR	337625	Argument	Z_TYPE_P ( op2 ) == IS_LONG		337596	0					
ANR	337626	EqualityExpression	Z_TYPE_P ( op2 ) == IS_LONG		337596	0		==			
ANR	337627	CallExpression	Z_TYPE_P ( op2 )		337596	0					
ANR	337628	Callee	Z_TYPE_P		337596	0					
ANR	337629	Identifier	Z_TYPE_P		337596	0					
ANR	337630	ArgumentList	op2		337596	1					
ANR	337631	Argument	op2		337596	0					
ANR	337632	Identifier	op2		337596	0					
ANR	337633	Identifier	IS_LONG		337596	1					
ANR	337634	CompoundStatement		4:42:100:100	337596	1					
ANR	337635	ReturnStatement	return Z_LVAL_P ( op1 ) == Z_LVAL_P ( op2 ) ;	673:3:22088:22125	337596	0	True				
ANR	337636	EqualityExpression	Z_LVAL_P ( op1 ) == Z_LVAL_P ( op2 )		337596	0		==			
ANR	337637	CallExpression	Z_LVAL_P ( op1 )		337596	0					
ANR	337638	Callee	Z_LVAL_P		337596	0					
ANR	337639	Identifier	Z_LVAL_P		337596	0					
ANR	337640	ArgumentList	op1		337596	1					
ANR	337641	Argument	op1		337596	0					
ANR	337642	Identifier	op1		337596	0					
ANR	337643	CallExpression	Z_LVAL_P ( op2 )		337596	1					
ANR	337644	Callee	Z_LVAL_P		337596	0					
ANR	337645	Identifier	Z_LVAL_P		337596	0					
ANR	337646	ArgumentList	op2		337596	1					
ANR	337647	Argument	op2		337596	0					
ANR	337648	Identifier	op2		337596	0					
ANR	337649	ElseStatement	else		337596	0					
ANR	337650	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE ) )		337596	0					
ANR	337651	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE )	674:13:22140:22175	337596	0	True				
ANR	337652	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE )		337596	0					
ANR	337653	Callee	EXPECTED		337596	0					
ANR	337654	Identifier	EXPECTED		337596	0					
ANR	337655	ArgumentList	Z_TYPE_P ( op2 ) == IS_DOUBLE		337596	1					
ANR	337656	Argument	Z_TYPE_P ( op2 ) == IS_DOUBLE		337596	0					
ANR	337657	EqualityExpression	Z_TYPE_P ( op2 ) == IS_DOUBLE		337596	0		==			
ANR	337658	CallExpression	Z_TYPE_P ( op2 )		337596	0					
ANR	337659	Callee	Z_TYPE_P		337596	0					
ANR	337660	Identifier	Z_TYPE_P		337596	0					
ANR	337661	ArgumentList	op2		337596	1					
ANR	337662	Argument	op2		337596	0					
ANR	337663	Identifier	op2		337596	0					
ANR	337664	Identifier	IS_DOUBLE		337596	1					
ANR	337665	CompoundStatement		6:51:195:195	337596	1					
ANR	337666	ReturnStatement	return ( ( double ) Z_LVAL_P ( op1 ) ) == Z_DVAL_P ( op2 ) ;	675:3:22183:22230	337596	0	True				
ANR	337667	EqualityExpression	( ( double ) Z_LVAL_P ( op1 ) ) == Z_DVAL_P ( op2 )		337596	0		==			
ANR	337668	CastExpression	( double ) Z_LVAL_P ( op1 )		337596	0					
ANR	337669	CastTarget	double		337596	0					
ANR	337670	CallExpression	Z_LVAL_P ( op1 )		337596	1					
ANR	337671	Callee	Z_LVAL_P		337596	0					
ANR	337672	Identifier	Z_LVAL_P		337596	0					
ANR	337673	ArgumentList	op1		337596	1					
ANR	337674	Argument	op1		337596	0					
ANR	337675	Identifier	op1		337596	0					
ANR	337676	CallExpression	Z_DVAL_P ( op2 )		337596	1					
ANR	337677	Callee	Z_DVAL_P		337596	0					
ANR	337678	Identifier	Z_DVAL_P		337596	0					
ANR	337679	ArgumentList	op2		337596	1					
ANR	337680	Argument	op2		337596	0					
ANR	337681	Identifier	op2		337596	0					
ANR	337682	ElseStatement	else		337596	0					
ANR	337683	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op1 ) == IS_DOUBLE ) )		337596	0					
ANR	337684	Condition	EXPECTED ( Z_TYPE_P ( op1 ) == IS_DOUBLE )	677:12:22248:22283	337596	0	True				
ANR	337685	CallExpression	EXPECTED ( Z_TYPE_P ( op1 ) == IS_DOUBLE )		337596	0					
ANR	337686	Callee	EXPECTED		337596	0					
ANR	337687	Identifier	EXPECTED		337596	0					
ANR	337688	ArgumentList	Z_TYPE_P ( op1 ) == IS_DOUBLE		337596	1					
ANR	337689	Argument	Z_TYPE_P ( op1 ) == IS_DOUBLE		337596	0					
ANR	337690	EqualityExpression	Z_TYPE_P ( op1 ) == IS_DOUBLE		337596	0		==			
ANR	337691	CallExpression	Z_TYPE_P ( op1 )		337596	0					
ANR	337692	Callee	Z_TYPE_P		337596	0					
ANR	337693	Identifier	Z_TYPE_P		337596	0					
ANR	337694	ArgumentList	op1		337596	1					
ANR	337695	Argument	op1		337596	0					
ANR	337696	Identifier	op1		337596	0					
ANR	337697	Identifier	IS_DOUBLE		337596	1					
ANR	337698	CompoundStatement		9:50:303:303	337596	1					
ANR	337699	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE ) )		337596	0					
ANR	337700	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE )	678:6:22294:22329	337596	0	True				
ANR	337701	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_DOUBLE )		337596	0					
ANR	337702	Callee	EXPECTED		337596	0					
ANR	337703	Identifier	EXPECTED		337596	0					
ANR	337704	ArgumentList	Z_TYPE_P ( op2 ) == IS_DOUBLE		337596	1					
ANR	337705	Argument	Z_TYPE_P ( op2 ) == IS_DOUBLE		337596	0					
ANR	337706	EqualityExpression	Z_TYPE_P ( op2 ) == IS_DOUBLE		337596	0		==			
ANR	337707	CallExpression	Z_TYPE_P ( op2 )		337596	0					
ANR	337708	Callee	Z_TYPE_P		337596	0					
ANR	337709	Identifier	Z_TYPE_P		337596	0					
ANR	337710	ArgumentList	op2		337596	1					
ANR	337711	Argument	op2		337596	0					
ANR	337712	Identifier	op2		337596	0					
ANR	337713	Identifier	IS_DOUBLE		337596	1					
ANR	337714	CompoundStatement		10:44:349:349	337596	1					
ANR	337715	ReturnStatement	return Z_DVAL_P ( op1 ) == Z_DVAL_P ( op2 ) ;	679:3:22337:22374	337596	0	True				
ANR	337716	EqualityExpression	Z_DVAL_P ( op1 ) == Z_DVAL_P ( op2 )		337596	0		==			
ANR	337717	CallExpression	Z_DVAL_P ( op1 )		337596	0					
ANR	337718	Callee	Z_DVAL_P		337596	0					
ANR	337719	Identifier	Z_DVAL_P		337596	0					
ANR	337720	ArgumentList	op1		337596	1					
ANR	337721	Argument	op1		337596	0					
ANR	337722	Identifier	op1		337596	0					
ANR	337723	CallExpression	Z_DVAL_P ( op2 )		337596	1					
ANR	337724	Callee	Z_DVAL_P		337596	0					
ANR	337725	Identifier	Z_DVAL_P		337596	0					
ANR	337726	ArgumentList	op2		337596	1					
ANR	337727	Argument	op2		337596	0					
ANR	337728	Identifier	op2		337596	0					
ANR	337729	ElseStatement	else		337596	0					
ANR	337730	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG ) )		337596	0					
ANR	337731	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )	680:13:22389:22422	337596	0	True				
ANR	337732	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )		337596	0					
ANR	337733	Callee	EXPECTED		337596	0					
ANR	337734	Identifier	EXPECTED		337596	0					
ANR	337735	ArgumentList	Z_TYPE_P ( op2 ) == IS_LONG		337596	1					
ANR	337736	Argument	Z_TYPE_P ( op2 ) == IS_LONG		337596	0					
ANR	337737	EqualityExpression	Z_TYPE_P ( op2 ) == IS_LONG		337596	0		==			
ANR	337738	CallExpression	Z_TYPE_P ( op2 )		337596	0					
ANR	337739	Callee	Z_TYPE_P		337596	0					
ANR	337740	Identifier	Z_TYPE_P		337596	0					
ANR	337741	ArgumentList	op2		337596	1					
ANR	337742	Argument	op2		337596	0					
ANR	337743	Identifier	op2		337596	0					
ANR	337744	Identifier	IS_LONG		337596	1					
ANR	337745	CompoundStatement		12:49:442:442	337596	1					
ANR	337746	ReturnStatement	return Z_DVAL_P ( op1 ) == ( ( double ) Z_LVAL_P ( op2 ) ) ;	681:3:22430:22477	337596	0	True				
ANR	337747	EqualityExpression	Z_DVAL_P ( op1 ) == ( ( double ) Z_LVAL_P ( op2 ) )		337596	0		==			
ANR	337748	CallExpression	Z_DVAL_P ( op1 )		337596	0					
ANR	337749	Callee	Z_DVAL_P		337596	0					
ANR	337750	Identifier	Z_DVAL_P		337596	0					
ANR	337751	ArgumentList	op1		337596	1					
ANR	337752	Argument	op1		337596	0					
ANR	337753	Identifier	op1		337596	0					
ANR	337754	CastExpression	( double ) Z_LVAL_P ( op2 )		337596	1					
ANR	337755	CastTarget	double		337596	0					
ANR	337756	CallExpression	Z_LVAL_P ( op2 )		337596	1					
ANR	337757	Callee	Z_LVAL_P		337596	0					
ANR	337758	Identifier	Z_LVAL_P		337596	0					
ANR	337759	ArgumentList	op2		337596	1					
ANR	337760	Argument	op2		337596	0					
ANR	337761	Identifier	op2		337596	0					
ANR	337762	ElseStatement	else		337596	0					
ANR	337763	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op1 ) == IS_STRING ) )		337596	0					
ANR	337764	Condition	EXPECTED ( Z_TYPE_P ( op1 ) == IS_STRING )	683:12:22495:22530	337596	0	True				
ANR	337765	CallExpression	EXPECTED ( Z_TYPE_P ( op1 ) == IS_STRING )		337596	0					
ANR	337766	Callee	EXPECTED		337596	0					
ANR	337767	Identifier	EXPECTED		337596	0					
ANR	337768	ArgumentList	Z_TYPE_P ( op1 ) == IS_STRING		337596	1					
ANR	337769	Argument	Z_TYPE_P ( op1 ) == IS_STRING		337596	0					
ANR	337770	EqualityExpression	Z_TYPE_P ( op1 ) == IS_STRING		337596	0		==			
ANR	337771	CallExpression	Z_TYPE_P ( op1 )		337596	0					
ANR	337772	Callee	Z_TYPE_P		337596	0					
ANR	337773	Identifier	Z_TYPE_P		337596	0					
ANR	337774	ArgumentList	op1		337596	1					
ANR	337775	Argument	op1		337596	0					
ANR	337776	Identifier	op1		337596	0					
ANR	337777	Identifier	IS_STRING		337596	1					
ANR	337778	CompoundStatement		15:50:550:550	337596	1					
ANR	337779	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_STRING ) )		337596	0					
ANR	337780	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_STRING )	684:6:22541:22576	337596	0	True				
ANR	337781	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_STRING )		337596	0					
ANR	337782	Callee	EXPECTED		337596	0					
ANR	337783	Identifier	EXPECTED		337596	0					
ANR	337784	ArgumentList	Z_TYPE_P ( op2 ) == IS_STRING		337596	1					
ANR	337785	Argument	Z_TYPE_P ( op2 ) == IS_STRING		337596	0					
ANR	337786	EqualityExpression	Z_TYPE_P ( op2 ) == IS_STRING		337596	0		==			
ANR	337787	CallExpression	Z_TYPE_P ( op2 )		337596	0					
ANR	337788	Callee	Z_TYPE_P		337596	0					
ANR	337789	Identifier	Z_TYPE_P		337596	0					
ANR	337790	ArgumentList	op2		337596	1					
ANR	337791	Argument	op2		337596	0					
ANR	337792	Identifier	op2		337596	0					
ANR	337793	Identifier	IS_STRING		337596	1					
ANR	337794	CompoundStatement		16:44:596:596	337596	1					
ANR	337795	IfStatement	if ( Z_STR_P ( op1 ) == Z_STR_P ( op2 ) )		337596	0					
ANR	337796	Condition	Z_STR_P ( op1 ) == Z_STR_P ( op2 )	685:7:22588:22615	337596	0	True				
ANR	337797	EqualityExpression	Z_STR_P ( op1 ) == Z_STR_P ( op2 )		337596	0		==			
ANR	337798	CallExpression	Z_STR_P ( op1 )		337596	0					
ANR	337799	Callee	Z_STR_P		337596	0					
ANR	337800	Identifier	Z_STR_P		337596	0					
ANR	337801	ArgumentList	op1		337596	1					
ANR	337802	Argument	op1		337596	0					
ANR	337803	Identifier	op1		337596	0					
ANR	337804	CallExpression	Z_STR_P ( op2 )		337596	1					
ANR	337805	Callee	Z_STR_P		337596	0					
ANR	337806	Identifier	Z_STR_P		337596	0					
ANR	337807	ArgumentList	op2		337596	1					
ANR	337808	Argument	op2		337596	0					
ANR	337809	Identifier	op2		337596	0					
ANR	337810	CompoundStatement		17:37:635:635	337596	1					
ANR	337811	ReturnStatement	return 1 ;	686:4:22624:22632	337596	0	True				
ANR	337812	PrimaryExpression	1		337596	0					
ANR	337813	ElseStatement	else		337596	0					
ANR	337814	IfStatement	if ( Z_STRVAL_P ( op1 ) [ 0 ] > '9' || Z_STRVAL_P ( op2 ) [ 0 ] > '9' )		337596	0					
ANR	337815	Condition	Z_STRVAL_P ( op1 ) [ 0 ] > '9' || Z_STRVAL_P ( op2 ) [ 0 ] > '9'	687:14:22648:22699	337596	0	True				
ANR	337816	OrExpression	Z_STRVAL_P ( op1 ) [ 0 ] > '9' || Z_STRVAL_P ( op2 ) [ 0 ] > '9'		337596	0		||			
ANR	337817	RelationalExpression	Z_STRVAL_P ( op1 ) [ 0 ] > '9'		337596	0		>			
ANR	337818	ArrayIndexing	Z_STRVAL_P ( op1 ) [ 0 ]		337596	0					
ANR	337819	CallExpression	Z_STRVAL_P ( op1 )		337596	0					
ANR	337820	Callee	Z_STRVAL_P		337596	0					
ANR	337821	Identifier	Z_STRVAL_P		337596	0					
ANR	337822	ArgumentList	op1		337596	1					
ANR	337823	Argument	op1		337596	0					
ANR	337824	Identifier	op1		337596	0					
ANR	337825	PrimaryExpression	0		337596	1					
ANR	337826	PrimaryExpression	'9'		337596	1					
ANR	337827	RelationalExpression	Z_STRVAL_P ( op2 ) [ 0 ] > '9'		337596	1		>			
ANR	337828	ArrayIndexing	Z_STRVAL_P ( op2 ) [ 0 ]		337596	0					
ANR	337829	CallExpression	Z_STRVAL_P ( op2 )		337596	0					
ANR	337830	Callee	Z_STRVAL_P		337596	0					
ANR	337831	Identifier	Z_STRVAL_P		337596	0					
ANR	337832	ArgumentList	op2		337596	1					
ANR	337833	Argument	op2		337596	0					
ANR	337834	Identifier	op2		337596	0					
ANR	337835	PrimaryExpression	0		337596	1					
ANR	337836	PrimaryExpression	'9'		337596	1					
ANR	337837	CompoundStatement		19:68:719:719	337596	1					
ANR	337838	IfStatement	if ( Z_STRLEN_P ( op1 ) != Z_STRLEN_P ( op2 ) )		337596	0					
ANR	337839	Condition	Z_STRLEN_P ( op1 ) != Z_STRLEN_P ( op2 )	688:8:22712:22745	337596	0	True				
ANR	337840	EqualityExpression	Z_STRLEN_P ( op1 ) != Z_STRLEN_P ( op2 )		337596	0		!=			
ANR	337841	CallExpression	Z_STRLEN_P ( op1 )		337596	0					
ANR	337842	Callee	Z_STRLEN_P		337596	0					
ANR	337843	Identifier	Z_STRLEN_P		337596	0					
ANR	337844	ArgumentList	op1		337596	1					
ANR	337845	Argument	op1		337596	0					
ANR	337846	Identifier	op1		337596	0					
ANR	337847	CallExpression	Z_STRLEN_P ( op2 )		337596	1					
ANR	337848	Callee	Z_STRLEN_P		337596	0					
ANR	337849	Identifier	Z_STRLEN_P		337596	0					
ANR	337850	ArgumentList	op2		337596	1					
ANR	337851	Argument	op2		337596	0					
ANR	337852	Identifier	op2		337596	0					
ANR	337853	CompoundStatement		20:44:765:765	337596	1					
ANR	337854	ReturnStatement	return 0 ;	689:5:22755:22763	337596	0	True				
ANR	337855	PrimaryExpression	0		337596	0					
ANR	337856	ElseStatement	else		337596	0					
ANR	337857	CompoundStatement		22:11:793:793	337596	0					
ANR	337858	ReturnStatement	"return memcmp ( Z_STRVAL_P ( op1 ) , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op1 ) ) == 0 ;"	691:5:22783:22852	337596	0	True				
ANR	337859	EqualityExpression	"memcmp ( Z_STRVAL_P ( op1 ) , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op1 ) ) == 0"		337596	0		==			
ANR	337860	CallExpression	"memcmp ( Z_STRVAL_P ( op1 ) , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op1 ) )"		337596	0					
ANR	337861	Callee	memcmp		337596	0					
ANR	337862	Identifier	memcmp		337596	0					
ANR	337863	ArgumentList	Z_STRVAL_P ( op1 )		337596	1					
ANR	337864	Argument	Z_STRVAL_P ( op1 )		337596	0					
ANR	337865	CallExpression	Z_STRVAL_P ( op1 )		337596	0					
ANR	337866	Callee	Z_STRVAL_P		337596	0					
ANR	337867	Identifier	Z_STRVAL_P		337596	0					
ANR	337868	ArgumentList	op1		337596	1					
ANR	337869	Argument	op1		337596	0					
ANR	337870	Identifier	op1		337596	0					
ANR	337871	Argument	Z_STRVAL_P ( op2 )		337596	1					
ANR	337872	CallExpression	Z_STRVAL_P ( op2 )		337596	0					
ANR	337873	Callee	Z_STRVAL_P		337596	0					
ANR	337874	Identifier	Z_STRVAL_P		337596	0					
ANR	337875	ArgumentList	op2		337596	1					
ANR	337876	Argument	op2		337596	0					
ANR	337877	Identifier	op2		337596	0					
ANR	337878	Argument	Z_STRLEN_P ( op1 )		337596	2					
ANR	337879	CallExpression	Z_STRLEN_P ( op1 )		337596	0					
ANR	337880	Callee	Z_STRLEN_P		337596	0					
ANR	337881	Identifier	Z_STRLEN_P		337596	0					
ANR	337882	ArgumentList	op1		337596	1					
ANR	337883	Argument	op1		337596	0					
ANR	337884	Identifier	op1		337596	0					
ANR	337885	PrimaryExpression	0		337596	1					
ANR	337886	ElseStatement	else		337596	0					
ANR	337887	CompoundStatement		25:10:887:887	337596	0					
ANR	337888	ReturnStatement	"return zendi_smart_strcmp ( Z_STR_P ( op1 ) , Z_STR_P ( op2 ) ) == 0 ;"	694:4:22876:22934	337596	0	True				
ANR	337889	EqualityExpression	"zendi_smart_strcmp ( Z_STR_P ( op1 ) , Z_STR_P ( op2 ) ) == 0"		337596	0		==			
ANR	337890	CallExpression	"zendi_smart_strcmp ( Z_STR_P ( op1 ) , Z_STR_P ( op2 ) )"		337596	0					
ANR	337891	Callee	zendi_smart_strcmp		337596	0					
ANR	337892	Identifier	zendi_smart_strcmp		337596	0					
ANR	337893	ArgumentList	Z_STR_P ( op1 )		337596	1					
ANR	337894	Argument	Z_STR_P ( op1 )		337596	0					
ANR	337895	CallExpression	Z_STR_P ( op1 )		337596	0					
ANR	337896	Callee	Z_STR_P		337596	0					
ANR	337897	Identifier	Z_STR_P		337596	0					
ANR	337898	ArgumentList	op1		337596	1					
ANR	337899	Argument	op1		337596	0					
ANR	337900	Identifier	op1		337596	0					
ANR	337901	Argument	Z_STR_P ( op2 )		337596	1					
ANR	337902	CallExpression	Z_STR_P ( op2 )		337596	0					
ANR	337903	Callee	Z_STR_P		337596	0					
ANR	337904	Identifier	Z_STR_P		337596	0					
ANR	337905	ArgumentList	op2		337596	1					
ANR	337906	Argument	op2		337596	0					
ANR	337907	Identifier	op2		337596	0					
ANR	337908	PrimaryExpression	0		337596	1					
ANR	337909	ExpressionStatement	"compare_function ( & result , op1 , op2 )"	698:1:22949:22984	337596	2	True				
ANR	337910	CallExpression	"compare_function ( & result , op1 , op2 )"		337596	0					
ANR	337911	Callee	compare_function		337596	0					
ANR	337912	Identifier	compare_function		337596	0					
ANR	337913	ArgumentList	& result		337596	1					
ANR	337914	Argument	& result		337596	0					
ANR	337915	UnaryOperationExpression	& result		337596	0					
ANR	337916	UnaryOperator	&		337596	0					
ANR	337917	Identifier	result		337596	1					
ANR	337918	Argument	op1		337596	1					
ANR	337919	Identifier	op1		337596	0					
ANR	337920	Argument	op2		337596	2					
ANR	337921	Identifier	op2		337596	0					
ANR	337922	ReturnStatement	return Z_LVAL ( result ) == 0 ;	699:1:22987:23013	337596	3	True				
ANR	337923	EqualityExpression	Z_LVAL ( result ) == 0		337596	0		==			
ANR	337924	CallExpression	Z_LVAL ( result )		337596	0					
ANR	337925	Callee	Z_LVAL		337596	0					
ANR	337926	Identifier	Z_LVAL		337596	0					
ANR	337927	ArgumentList	result		337596	1					
ANR	337928	Argument	result		337596	0					
ANR	337929	Identifier	result		337596	0					
ANR	337930	PrimaryExpression	0		337596	1					
ANR	337931	ReturnType	static zend_always_inline int		337596	1					
ANR	337932	Identifier	fast_equal_check_function		337596	2					
ANR	337933	ParameterList	"zval * op1 , zval * op2"		337596	3					
ANR	337934	Parameter	zval * op1	668:56:21960:21968	337596	0	True				
ANR	337935	ParameterType	zval *		337596	0					
ANR	337936	Identifier	op1		337596	1					
ANR	337937	Parameter	zval * op2	668:67:21971:21979	337596	1	True				
ANR	337938	ParameterType	zval *		337596	0					
ANR	337939	Identifier	op2		337596	1					
ANR	337940	CFGEntryNode	ENTRY		337596		True				
ANR	337941	CFGExitNode	EXIT		337596		True				
ANR	337942	Symbol	Z_LVAL		337596						
ANR	337943	Symbol	Z_TYPE_P		337596						
ANR	337944	Symbol	Z_STRVAL_P		337596						
ANR	337945	Symbol	Z_DVAL_P		337596						
ANR	337946	Symbol	zendi_smart_strcmp		337596						
ANR	337947	Symbol	Z_LVAL_P		337596						
ANR	337948	Symbol	op2		337596						
ANR	337949	Symbol	result		337596						
ANR	337950	Symbol	op1		337596						
ANR	337951	Symbol	memcmp		337596						
ANR	337952	Symbol	IS_LONG		337596						
ANR	337953	Symbol	& result		337596						
ANR	337954	Symbol	IS_DOUBLE		337596						
ANR	337955	Symbol	Z_STRLEN_P		337596						
ANR	337956	Symbol	IS_STRING		337596						
ANR	337957	Symbol	Z_STR_P		337596						
ANR	337958	Symbol	* Z_STRVAL_P		337596						
ANR	337959	Symbol	EXPECTED		337596						
ANR	337960	Function	fast_equal_check_long	702:0:23018:23262							
ANR	337961	FunctionDef	"fast_equal_check_long (zval * op1 , zval * op2)"		337960	0					
ANR	337962	CompoundStatement		703:0:23092:23262	337960	0					
ANR	337963	IdentifierDeclStatement	zval result ;	704:1:23095:23106	337960	0	True				
ANR	337964	IdentifierDecl	result		337960	0					
ANR	337965	IdentifierDeclType	zval		337960	0					
ANR	337966	Identifier	result		337960	1					
ANR	337967	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG ) )		337960	1					
ANR	337968	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )	705:5:23113:23146	337960	0	True				
ANR	337969	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_LONG )		337960	0					
ANR	337970	Callee	EXPECTED		337960	0					
ANR	337971	Identifier	EXPECTED		337960	0					
ANR	337972	ArgumentList	Z_TYPE_P ( op2 ) == IS_LONG		337960	1					
ANR	337973	Argument	Z_TYPE_P ( op2 ) == IS_LONG		337960	0					
ANR	337974	EqualityExpression	Z_TYPE_P ( op2 ) == IS_LONG		337960	0		==			
ANR	337975	CallExpression	Z_TYPE_P ( op2 )		337960	0					
ANR	337976	Callee	Z_TYPE_P		337960	0					
ANR	337977	Identifier	Z_TYPE_P		337960	0					
ANR	337978	ArgumentList	op2		337960	1					
ANR	337979	Argument	op2		337960	0					
ANR	337980	Identifier	op2		337960	0					
ANR	337981	Identifier	IS_LONG		337960	1					
ANR	337982	CompoundStatement		3:41:56:56	337960	1					
ANR	337983	ReturnStatement	return Z_LVAL_P ( op1 ) == Z_LVAL_P ( op2 ) ;	706:2:23153:23190	337960	0	True				
ANR	337984	EqualityExpression	Z_LVAL_P ( op1 ) == Z_LVAL_P ( op2 )		337960	0		==			
ANR	337985	CallExpression	Z_LVAL_P ( op1 )		337960	0					
ANR	337986	Callee	Z_LVAL_P		337960	0					
ANR	337987	Identifier	Z_LVAL_P		337960	0					
ANR	337988	ArgumentList	op1		337960	1					
ANR	337989	Argument	op1		337960	0					
ANR	337990	Identifier	op1		337960	0					
ANR	337991	CallExpression	Z_LVAL_P ( op2 )		337960	1					
ANR	337992	Callee	Z_LVAL_P		337960	0					
ANR	337993	Identifier	Z_LVAL_P		337960	0					
ANR	337994	ArgumentList	op2		337960	1					
ANR	337995	Argument	op2		337960	0					
ANR	337996	Identifier	op2		337960	0					
ANR	337997	ExpressionStatement	"compare_function ( & result , op1 , op2 )"	708:1:23196:23231	337960	2	True				
ANR	337998	CallExpression	"compare_function ( & result , op1 , op2 )"		337960	0					
ANR	337999	Callee	compare_function		337960	0					
ANR	338000	Identifier	compare_function		337960	0					
ANR	338001	ArgumentList	& result		337960	1					
ANR	338002	Argument	& result		337960	0					
ANR	338003	UnaryOperationExpression	& result		337960	0					
ANR	338004	UnaryOperator	&		337960	0					
ANR	338005	Identifier	result		337960	1					
ANR	338006	Argument	op1		337960	1					
ANR	338007	Identifier	op1		337960	0					
ANR	338008	Argument	op2		337960	2					
ANR	338009	Identifier	op2		337960	0					
ANR	338010	ReturnStatement	return Z_LVAL ( result ) == 0 ;	709:1:23234:23260	337960	3	True				
ANR	338011	EqualityExpression	Z_LVAL ( result ) == 0		337960	0		==			
ANR	338012	CallExpression	Z_LVAL ( result )		337960	0					
ANR	338013	Callee	Z_LVAL		337960	0					
ANR	338014	Identifier	Z_LVAL		337960	0					
ANR	338015	ArgumentList	result		337960	1					
ANR	338016	Argument	result		337960	0					
ANR	338017	Identifier	result		337960	0					
ANR	338018	PrimaryExpression	0		337960	1					
ANR	338019	ReturnType	static zend_always_inline int		337960	1					
ANR	338020	Identifier	fast_equal_check_long		337960	2					
ANR	338021	ParameterList	"zval * op1 , zval * op2"		337960	3					
ANR	338022	Parameter	zval * op1	702:52:23070:23078	337960	0	True				
ANR	338023	ParameterType	zval *		337960	0					
ANR	338024	Identifier	op1		337960	1					
ANR	338025	Parameter	zval * op2	702:63:23081:23089	337960	1	True				
ANR	338026	ParameterType	zval *		337960	0					
ANR	338027	Identifier	op2		337960	1					
ANR	338028	CFGEntryNode	ENTRY		337960		True				
ANR	338029	CFGExitNode	EXIT		337960		True				
ANR	338030	Symbol	op2		337960						
ANR	338031	Symbol	result		337960						
ANR	338032	Symbol	op1		337960						
ANR	338033	Symbol	IS_LONG		337960						
ANR	338034	Symbol	& result		337960						
ANR	338035	Symbol	Z_LVAL		337960						
ANR	338036	Symbol	Z_TYPE_P		337960						
ANR	338037	Symbol	EXPECTED		337960						
ANR	338038	Symbol	Z_LVAL_P		337960						
ANR	338039	Function	fast_equal_check_string	712:0:23265:23821							
ANR	338040	FunctionDef	"fast_equal_check_string (zval * op1 , zval * op2)"		338039	0					
ANR	338041	CompoundStatement		713:0:23341:23821	338039	0					
ANR	338042	IdentifierDeclStatement	zval result ;	714:1:23344:23355	338039	0	True				
ANR	338043	IdentifierDecl	result		338039	0					
ANR	338044	IdentifierDeclType	zval		338039	0					
ANR	338045	Identifier	result		338039	1					
ANR	338046	IfStatement	if ( EXPECTED ( Z_TYPE_P ( op2 ) == IS_STRING ) )		338039	1					
ANR	338047	Condition	EXPECTED ( Z_TYPE_P ( op2 ) == IS_STRING )	715:5:23362:23397	338039	0	True				
ANR	338048	CallExpression	EXPECTED ( Z_TYPE_P ( op2 ) == IS_STRING )		338039	0					
ANR	338049	Callee	EXPECTED		338039	0					
ANR	338050	Identifier	EXPECTED		338039	0					
ANR	338051	ArgumentList	Z_TYPE_P ( op2 ) == IS_STRING		338039	1					
ANR	338052	Argument	Z_TYPE_P ( op2 ) == IS_STRING		338039	0					
ANR	338053	EqualityExpression	Z_TYPE_P ( op2 ) == IS_STRING		338039	0		==			
ANR	338054	CallExpression	Z_TYPE_P ( op2 )		338039	0					
ANR	338055	Callee	Z_TYPE_P		338039	0					
ANR	338056	Identifier	Z_TYPE_P		338039	0					
ANR	338057	ArgumentList	op2		338039	1					
ANR	338058	Argument	op2		338039	0					
ANR	338059	Identifier	op2		338039	0					
ANR	338060	Identifier	IS_STRING		338039	1					
ANR	338061	CompoundStatement		3:43:58:58	338039	1					
ANR	338062	IfStatement	if ( Z_STR_P ( op1 ) == Z_STR_P ( op2 ) )		338039	0					
ANR	338063	Condition	Z_STR_P ( op1 ) == Z_STR_P ( op2 )	716:6:23408:23435	338039	0	True				
ANR	338064	EqualityExpression	Z_STR_P ( op1 ) == Z_STR_P ( op2 )		338039	0		==			
ANR	338065	CallExpression	Z_STR_P ( op1 )		338039	0					
ANR	338066	Callee	Z_STR_P		338039	0					
ANR	338067	Identifier	Z_STR_P		338039	0					
ANR	338068	ArgumentList	op1		338039	1					
ANR	338069	Argument	op1		338039	0					
ANR	338070	Identifier	op1		338039	0					
ANR	338071	CallExpression	Z_STR_P ( op2 )		338039	1					
ANR	338072	Callee	Z_STR_P		338039	0					
ANR	338073	Identifier	Z_STR_P		338039	0					
ANR	338074	ArgumentList	op2		338039	1					
ANR	338075	Argument	op2		338039	0					
ANR	338076	Identifier	op2		338039	0					
ANR	338077	CompoundStatement		4:36:96:96	338039	1					
ANR	338078	ReturnStatement	return 1 ;	717:3:23443:23451	338039	0	True				
ANR	338079	PrimaryExpression	1		338039	0					
ANR	338080	ElseStatement	else		338039	0					
ANR	338081	IfStatement	if ( Z_STRVAL_P ( op1 ) [ 0 ] > '9' || Z_STRVAL_P ( op2 ) [ 0 ] > '9' )		338039	0					
ANR	338082	Condition	Z_STRVAL_P ( op1 ) [ 0 ] > '9' || Z_STRVAL_P ( op2 ) [ 0 ] > '9'	718:13:23466:23517	338039	0	True				
ANR	338083	OrExpression	Z_STRVAL_P ( op1 ) [ 0 ] > '9' || Z_STRVAL_P ( op2 ) [ 0 ] > '9'		338039	0		||			
ANR	338084	RelationalExpression	Z_STRVAL_P ( op1 ) [ 0 ] > '9'		338039	0		>			
ANR	338085	ArrayIndexing	Z_STRVAL_P ( op1 ) [ 0 ]		338039	0					
ANR	338086	CallExpression	Z_STRVAL_P ( op1 )		338039	0					
ANR	338087	Callee	Z_STRVAL_P		338039	0					
ANR	338088	Identifier	Z_STRVAL_P		338039	0					
ANR	338089	ArgumentList	op1		338039	1					
ANR	338090	Argument	op1		338039	0					
ANR	338091	Identifier	op1		338039	0					
ANR	338092	PrimaryExpression	0		338039	1					
ANR	338093	PrimaryExpression	'9'		338039	1					
ANR	338094	RelationalExpression	Z_STRVAL_P ( op2 ) [ 0 ] > '9'		338039	1		>			
ANR	338095	ArrayIndexing	Z_STRVAL_P ( op2 ) [ 0 ]		338039	0					
ANR	338096	CallExpression	Z_STRVAL_P ( op2 )		338039	0					
ANR	338097	Callee	Z_STRVAL_P		338039	0					
ANR	338098	Identifier	Z_STRVAL_P		338039	0					
ANR	338099	ArgumentList	op2		338039	1					
ANR	338100	Argument	op2		338039	0					
ANR	338101	Identifier	op2		338039	0					
ANR	338102	PrimaryExpression	0		338039	1					
ANR	338103	PrimaryExpression	'9'		338039	1					
ANR	338104	CompoundStatement		6:67:178:178	338039	1					
ANR	338105	IfStatement	if ( Z_STRLEN_P ( op1 ) != Z_STRLEN_P ( op2 ) )		338039	0					
ANR	338106	Condition	Z_STRLEN_P ( op1 ) != Z_STRLEN_P ( op2 )	719:7:23529:23562	338039	0	True				
ANR	338107	EqualityExpression	Z_STRLEN_P ( op1 ) != Z_STRLEN_P ( op2 )		338039	0		!=			
ANR	338108	CallExpression	Z_STRLEN_P ( op1 )		338039	0					
ANR	338109	Callee	Z_STRLEN_P		338039	0					
ANR	338110	Identifier	Z_STRLEN_P		338039	0					
ANR	338111	ArgumentList	op1		338039	1					
ANR	338112	Argument	op1		338039	0					
ANR	338113	Identifier	op1		338039	0					
ANR	338114	CallExpression	Z_STRLEN_P ( op2 )		338039	1					
ANR	338115	Callee	Z_STRLEN_P		338039	0					
ANR	338116	Identifier	Z_STRLEN_P		338039	0					
ANR	338117	ArgumentList	op2		338039	1					
ANR	338118	Argument	op2		338039	0					
ANR	338119	Identifier	op2		338039	0					
ANR	338120	CompoundStatement		7:43:223:223	338039	1					
ANR	338121	ReturnStatement	return 0 ;	720:4:23571:23579	338039	0	True				
ANR	338122	PrimaryExpression	0		338039	0					
ANR	338123	ElseStatement	else		338039	0					
ANR	338124	CompoundStatement		9:10:249:249	338039	0					
ANR	338125	ReturnStatement	"return memcmp ( Z_STRVAL_P ( op1 ) , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op1 ) ) == 0 ;"	722:4:23597:23666	338039	0	True				
ANR	338126	EqualityExpression	"memcmp ( Z_STRVAL_P ( op1 ) , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op1 ) ) == 0"		338039	0		==			
ANR	338127	CallExpression	"memcmp ( Z_STRVAL_P ( op1 ) , Z_STRVAL_P ( op2 ) , Z_STRLEN_P ( op1 ) )"		338039	0					
ANR	338128	Callee	memcmp		338039	0					
ANR	338129	Identifier	memcmp		338039	0					
ANR	338130	ArgumentList	Z_STRVAL_P ( op1 )		338039	1					
ANR	338131	Argument	Z_STRVAL_P ( op1 )		338039	0					
ANR	338132	CallExpression	Z_STRVAL_P ( op1 )		338039	0					
ANR	338133	Callee	Z_STRVAL_P		338039	0					
ANR	338134	Identifier	Z_STRVAL_P		338039	0					
ANR	338135	ArgumentList	op1		338039	1					
ANR	338136	Argument	op1		338039	0					
ANR	338137	Identifier	op1		338039	0					
ANR	338138	Argument	Z_STRVAL_P ( op2 )		338039	1					
ANR	338139	CallExpression	Z_STRVAL_P ( op2 )		338039	0					
ANR	338140	Callee	Z_STRVAL_P		338039	0					
ANR	338141	Identifier	Z_STRVAL_P		338039	0					
ANR	338142	ArgumentList	op2		338039	1					
ANR	338143	Argument	op2		338039	0					
ANR	338144	Identifier	op2		338039	0					
ANR	338145	Argument	Z_STRLEN_P ( op1 )		338039	2					
ANR	338146	CallExpression	Z_STRLEN_P ( op1 )		338039	0					
ANR	338147	Callee	Z_STRLEN_P		338039	0					
ANR	338148	Identifier	Z_STRLEN_P		338039	0					
ANR	338149	ArgumentList	op1		338039	1					
ANR	338150	Argument	op1		338039	0					
ANR	338151	Identifier	op1		338039	0					
ANR	338152	PrimaryExpression	0		338039	1					
ANR	338153	ElseStatement	else		338039	0					
ANR	338154	CompoundStatement		12:9:340:340	338039	0					
ANR	338155	ReturnStatement	"return zendi_smart_strcmp ( Z_STR_P ( op1 ) , Z_STR_P ( op2 ) ) == 0 ;"	725:3:23687:23745	338039	0	True				
ANR	338156	EqualityExpression	"zendi_smart_strcmp ( Z_STR_P ( op1 ) , Z_STR_P ( op2 ) ) == 0"		338039	0		==			
ANR	338157	CallExpression	"zendi_smart_strcmp ( Z_STR_P ( op1 ) , Z_STR_P ( op2 ) )"		338039	0					
ANR	338158	Callee	zendi_smart_strcmp		338039	0					
ANR	338159	Identifier	zendi_smart_strcmp		338039	0					
ANR	338160	ArgumentList	Z_STR_P ( op1 )		338039	1					
ANR	338161	Argument	Z_STR_P ( op1 )		338039	0					
ANR	338162	CallExpression	Z_STR_P ( op1 )		338039	0					
ANR	338163	Callee	Z_STR_P		338039	0					
ANR	338164	Identifier	Z_STR_P		338039	0					
ANR	338165	ArgumentList	op1		338039	1					
ANR	338166	Argument	op1		338039	0					
ANR	338167	Identifier	op1		338039	0					
ANR	338168	Argument	Z_STR_P ( op2 )		338039	1					
ANR	338169	CallExpression	Z_STR_P ( op2 )		338039	0					
ANR	338170	Callee	Z_STR_P		338039	0					
ANR	338171	Identifier	Z_STR_P		338039	0					
ANR	338172	ArgumentList	op2		338039	1					
ANR	338173	Argument	op2		338039	0					
ANR	338174	Identifier	op2		338039	0					
ANR	338175	PrimaryExpression	0		338039	1					
ANR	338176	ExpressionStatement	"compare_function ( & result , op1 , op2 )"	728:1:23755:23790	338039	2	True				
ANR	338177	CallExpression	"compare_function ( & result , op1 , op2 )"		338039	0					
ANR	338178	Callee	compare_function		338039	0					
ANR	338179	Identifier	compare_function		338039	0					
ANR	338180	ArgumentList	& result		338039	1					
ANR	338181	Argument	& result		338039	0					
ANR	338182	UnaryOperationExpression	& result		338039	0					
ANR	338183	UnaryOperator	&		338039	0					
ANR	338184	Identifier	result		338039	1					
ANR	338185	Argument	op1		338039	1					
ANR	338186	Identifier	op1		338039	0					
ANR	338187	Argument	op2		338039	2					
ANR	338188	Identifier	op2		338039	0					
ANR	338189	ReturnStatement	return Z_LVAL ( result ) == 0 ;	729:1:23793:23819	338039	3	True				
ANR	338190	EqualityExpression	Z_LVAL ( result ) == 0		338039	0		==			
ANR	338191	CallExpression	Z_LVAL ( result )		338039	0					
ANR	338192	Callee	Z_LVAL		338039	0					
ANR	338193	Identifier	Z_LVAL		338039	0					
ANR	338194	ArgumentList	result		338039	1					
ANR	338195	Argument	result		338039	0					
ANR	338196	Identifier	result		338039	0					
ANR	338197	PrimaryExpression	0		338039	1					
ANR	338198	ReturnType	static zend_always_inline int		338039	1					
ANR	338199	Identifier	fast_equal_check_string		338039	2					
ANR	338200	ParameterList	"zval * op1 , zval * op2"		338039	3					
ANR	338201	Parameter	zval * op1	712:54:23319:23327	338039	0	True				
ANR	338202	ParameterType	zval *		338039	0					
ANR	338203	Identifier	op1		338039	1					
ANR	338204	Parameter	zval * op2	712:65:23330:23338	338039	1	True				
ANR	338205	ParameterType	zval *		338039	0					
ANR	338206	Identifier	op2		338039	1					
ANR	338207	CFGEntryNode	ENTRY		338039		True				
ANR	338208	CFGExitNode	EXIT		338039		True				
ANR	338209	Symbol	Z_LVAL		338039						
ANR	338210	Symbol	Z_TYPE_P		338039						
ANR	338211	Symbol	Z_STRVAL_P		338039						
ANR	338212	Symbol	zendi_smart_strcmp		338039						
ANR	338213	Symbol	op2		338039						
ANR	338214	Symbol	result		338039						
ANR	338215	Symbol	op1		338039						
ANR	338216	Symbol	memcmp		338039						
ANR	338217	Symbol	& result		338039						
ANR	338218	Symbol	Z_STRLEN_P		338039						
ANR	338219	Symbol	IS_STRING		338039						
ANR	338220	Symbol	Z_STR_P		338039						
ANR	338221	Symbol	* Z_STRVAL_P		338039						
ANR	338222	Symbol	EXPECTED		338039						
ANR	338223	Function	fast_is_identical_function	732:0:23824:24048							
ANR	338224	FunctionDef	"fast_is_identical_function (zval * op1 , zval * op2)"		338223	0					
ANR	338225	CompoundStatement		733:0:23903:24048	338223	0					
ANR	338226	IfStatement	if ( Z_TYPE_P ( op1 ) != Z_TYPE_P ( op2 ) )		338223	0					
ANR	338227	Condition	Z_TYPE_P ( op1 ) != Z_TYPE_P ( op2 )	734:5:23910:23939	338223	0	True				
ANR	338228	EqualityExpression	Z_TYPE_P ( op1 ) != Z_TYPE_P ( op2 )		338223	0		!=			
ANR	338229	CallExpression	Z_TYPE_P ( op1 )		338223	0					
ANR	338230	Callee	Z_TYPE_P		338223	0					
ANR	338231	Identifier	Z_TYPE_P		338223	0					
ANR	338232	ArgumentList	op1		338223	1					
ANR	338233	Argument	op1		338223	0					
ANR	338234	Identifier	op1		338223	0					
ANR	338235	CallExpression	Z_TYPE_P ( op2 )		338223	1					
ANR	338236	Callee	Z_TYPE_P		338223	0					
ANR	338237	Identifier	Z_TYPE_P		338223	0					
ANR	338238	ArgumentList	op2		338223	1					
ANR	338239	Argument	op2		338223	0					
ANR	338240	Identifier	op2		338223	0					
ANR	338241	CompoundStatement		2:37:38:38	338223	1					
ANR	338242	ReturnStatement	return 0 ;	735:2:23946:23954	338223	0	True				
ANR	338243	PrimaryExpression	0		338223	0					
ANR	338244	ElseStatement	else		338223	0					
ANR	338245	IfStatement	if ( Z_TYPE_P ( op1 ) <= IS_TRUE )		338223	0					
ANR	338246	Condition	Z_TYPE_P ( op1 ) <= IS_TRUE	736:12:23968:23991	338223	0	True				
ANR	338247	RelationalExpression	Z_TYPE_P ( op1 ) <= IS_TRUE		338223	0		<=			
ANR	338248	CallExpression	Z_TYPE_P ( op1 )		338223	0					
ANR	338249	Callee	Z_TYPE_P		338223	0					
ANR	338250	Identifier	Z_TYPE_P		338223	0					
ANR	338251	ArgumentList	op1		338223	1					
ANR	338252	Argument	op1		338223	0					
ANR	338253	Identifier	op1		338223	0					
ANR	338254	Identifier	IS_TRUE		338223	1					
ANR	338255	CompoundStatement		4:38:90:90	338223	1					
ANR	338256	ReturnStatement	return 1 ;	737:2:23998:24006	338223	0	True				
ANR	338257	PrimaryExpression	1		338223	0					
ANR	338258	ReturnStatement	"return zend_is_identical ( op1 , op2 ) ;"	739:1:24012:24046	338223	1	True				
ANR	338259	CallExpression	"zend_is_identical ( op1 , op2 )"		338223	0					
ANR	338260	Callee	zend_is_identical		338223	0					
ANR	338261	Identifier	zend_is_identical		338223	0					
ANR	338262	ArgumentList	op1		338223	1					
ANR	338263	Argument	op1		338223	0					
ANR	338264	Identifier	op1		338223	0					
ANR	338265	Argument	op2		338223	1					
ANR	338266	Identifier	op2		338223	0					
ANR	338267	ReturnType	static zend_always_inline int		338223	1					
ANR	338268	Identifier	fast_is_identical_function		338223	2					
ANR	338269	ParameterList	"zval * op1 , zval * op2"		338223	3					
ANR	338270	Parameter	zval * op1	732:57:23881:23889	338223	0	True				
ANR	338271	ParameterType	zval *		338223	0					
ANR	338272	Identifier	op1		338223	1					
ANR	338273	Parameter	zval * op2	732:68:23892:23900	338223	1	True				
ANR	338274	ParameterType	zval *		338223	0					
ANR	338275	Identifier	op2		338223	1					
ANR	338276	CFGEntryNode	ENTRY		338223		True				
ANR	338277	CFGExitNode	EXIT		338223		True				
ANR	338278	Symbol	op2		338223						
ANR	338279	Symbol	op1		338223						
ANR	338280	Symbol	zend_is_identical		338223						
ANR	338281	Symbol	IS_TRUE		338223						
ANR	338282	Symbol	Z_TYPE_P		338223						
ANR	338283	Function	fast_is_not_identical_function	742:0:24051:24280							
ANR	338284	FunctionDef	"fast_is_not_identical_function (zval * op1 , zval * op2)"		338283	0					
ANR	338285	CompoundStatement		743:0:24134:24280	338283	0					
ANR	338286	IfStatement	if ( Z_TYPE_P ( op1 ) != Z_TYPE_P ( op2 ) )		338283	0					
ANR	338287	Condition	Z_TYPE_P ( op1 ) != Z_TYPE_P ( op2 )	744:5:24141:24170	338283	0	True				
ANR	338288	EqualityExpression	Z_TYPE_P ( op1 ) != Z_TYPE_P ( op2 )		338283	0		!=			
ANR	338289	CallExpression	Z_TYPE_P ( op1 )		338283	0					
ANR	338290	Callee	Z_TYPE_P		338283	0					
ANR	338291	Identifier	Z_TYPE_P		338283	0					
ANR	338292	ArgumentList	op1		338283	1					
ANR	338293	Argument	op1		338283	0					
ANR	338294	Identifier	op1		338283	0					
ANR	338295	CallExpression	Z_TYPE_P ( op2 )		338283	1					
ANR	338296	Callee	Z_TYPE_P		338283	0					
ANR	338297	Identifier	Z_TYPE_P		338283	0					
ANR	338298	ArgumentList	op2		338283	1					
ANR	338299	Argument	op2		338283	0					
ANR	338300	Identifier	op2		338283	0					
ANR	338301	CompoundStatement		2:37:38:38	338283	1					
ANR	338302	ReturnStatement	return 1 ;	745:2:24177:24185	338283	0	True				
ANR	338303	PrimaryExpression	1		338283	0					
ANR	338304	ElseStatement	else		338283	0					
ANR	338305	IfStatement	if ( Z_TYPE_P ( op1 ) <= IS_TRUE )		338283	0					
ANR	338306	Condition	Z_TYPE_P ( op1 ) <= IS_TRUE	746:12:24199:24222	338283	0	True				
ANR	338307	RelationalExpression	Z_TYPE_P ( op1 ) <= IS_TRUE		338283	0		<=			
ANR	338308	CallExpression	Z_TYPE_P ( op1 )		338283	0					
ANR	338309	Callee	Z_TYPE_P		338283	0					
ANR	338310	Identifier	Z_TYPE_P		338283	0					
ANR	338311	ArgumentList	op1		338283	1					
ANR	338312	Argument	op1		338283	0					
ANR	338313	Identifier	op1		338283	0					
ANR	338314	Identifier	IS_TRUE		338283	1					
ANR	338315	CompoundStatement		4:38:90:90	338283	1					
ANR	338316	ReturnStatement	return 0 ;	747:2:24229:24237	338283	0	True				
ANR	338317	PrimaryExpression	0		338283	0					
ANR	338318	ReturnStatement	"return ! zend_is_identical ( op1 , op2 ) ;"	749:1:24243:24278	338283	1	True				
ANR	338319	UnaryOperationExpression	"! zend_is_identical ( op1 , op2 )"		338283	0					
ANR	338320	UnaryOperator	!		338283	0					
ANR	338321	CallExpression	"zend_is_identical ( op1 , op2 )"		338283	1					
ANR	338322	Callee	zend_is_identical		338283	0					
ANR	338323	Identifier	zend_is_identical		338283	0					
ANR	338324	ArgumentList	op1		338283	1					
ANR	338325	Argument	op1		338283	0					
ANR	338326	Identifier	op1		338283	0					
ANR	338327	Argument	op2		338283	1					
ANR	338328	Identifier	op2		338283	0					
ANR	338329	ReturnType	static zend_always_inline int		338283	1					
ANR	338330	Identifier	fast_is_not_identical_function		338283	2					
ANR	338331	ParameterList	"zval * op1 , zval * op2"		338283	3					
ANR	338332	Parameter	zval * op1	742:61:24112:24120	338283	0	True				
ANR	338333	ParameterType	zval *		338283	0					
ANR	338334	Identifier	op1		338283	1					
ANR	338335	Parameter	zval * op2	742:72:24123:24131	338283	1	True				
ANR	338336	ParameterType	zval *		338283	0					
ANR	338337	Identifier	op2		338283	1					
ANR	338338	CFGEntryNode	ENTRY		338283		True				
ANR	338339	CFGExitNode	EXIT		338283		True				
ANR	338340	Symbol	op2		338283						
ANR	338341	Symbol	op1		338283						
ANR	338342	Symbol	zend_is_identical		338283						
ANR	338343	Symbol	IS_TRUE		338283						
ANR	338344	Symbol	Z_TYPE_P		338283						
ANR	338345	DeclStmt									
ANR	338346	Decl							int	int	ret
ANR	338347	DeclStmt									
ANR	338348	Decl							zval	zval	rv
ANR	338349	DeclStmt									
ANR	338350	Decl							zval	zval *	objval
ANR	338351	Function	zend_print_ulong_to_buf	792:0:27560:27747							
ANR	338352	FunctionDef	"zend_print_ulong_to_buf (char * buf , zend_ulong num)"		338351	0					
ANR	338353	CompoundStatement		792:83:27643:27747	338351	0					
ANR	338354	ExpressionStatement	* buf = '\\0'	793:1:27646:27657	338351	0	True				
ANR	338355	AssignmentExpression	* buf = '\\0'		338351	0		=			
ANR	338356	UnaryOperationExpression	* buf		338351	0					
ANR	338357	UnaryOperator	*		338351	0					
ANR	338358	Identifier	buf		338351	1					
ANR	338359	PrimaryExpression	'\\0'		338351	1					
ANR	338360	DoStatement	do		338351	1					
ANR	338361	CompoundStatement		3:4:19:19	338351	0					
ANR	338362	ExpressionStatement	* -- buf = ( char ) ( num % 10 ) + '0'	795:2:27667:27699	338351	0	True				
ANR	338363	AssignmentExpression	* -- buf = ( char ) ( num % 10 ) + '0'		338351	0		=			
ANR	338364	UnaryOperationExpression	* -- buf		338351	0					
ANR	338365	UnaryOperator	*		338351	0					
ANR	338366	UnaryExpression	-- buf		338351	1					
ANR	338367	IncDec	--		338351	0					
ANR	338368	Identifier	buf		338351	1					
ANR	338369	AdditiveExpression	( char ) ( num % 10 ) + '0'		338351	1		+			
ANR	338370	CastExpression	( char ) ( num % 10 )		338351	0					
ANR	338371	CastTarget	char		338351	0					
ANR	338372	MultiplicativeExpression	num % 10		338351	1		%			
ANR	338373	Identifier	num		338351	0					
ANR	338374	PrimaryExpression	10		338351	1					
ANR	338375	PrimaryExpression	'0'		338351	1					
ANR	338376	ExpressionStatement	num /= 10	796:2:27703:27712	338351	1	True				
ANR	338377	AssignmentExpression	num /= 10		338351	0		/=			
ANR	338378	Identifier	num		338351	0					
ANR	338379	PrimaryExpression	10		338351	1					
ANR	338380	Condition	num > 0	797:10:27724:27730	338351	1	True				
ANR	338381	RelationalExpression	num > 0		338351	0		>			
ANR	338382	Identifier	num		338351	0					
ANR	338383	PrimaryExpression	0		338351	1					
ANR	338384	ReturnStatement	return buf ;	798:1:27735:27745	338351	2	True				
ANR	338385	Identifier	buf		338351	0					
ANR	338386	ReturnType	static zend_always_inline char *		338351	1					
ANR	338387	Identifier	zend_print_ulong_to_buf		338351	2					
ANR	338388	ParameterList	"char * buf , zend_ulong num"		338351	3					
ANR	338389	Parameter	char * buf	792:56:27616:27624	338351	0	True				
ANR	338390	ParameterType	char *		338351	0					
ANR	338391	Identifier	buf		338351	1					
ANR	338392	Parameter	zend_ulong num	792:67:27627:27640	338351	1	True				
ANR	338393	ParameterType	zend_ulong		338351	0					
ANR	338394	Identifier	num		338351	1					
ANR	338395	CFGEntryNode	ENTRY		338351		True				
ANR	338396	CFGExitNode	EXIT		338351		True				
ANR	338397	Symbol	buf		338351						
ANR	338398	Symbol	* buf		338351						
ANR	338399	Symbol	* -- buf		338351						
ANR	338400	Symbol	num		338351						
ANR	338401	Function	zend_print_long_to_buf	802:0:27792:28065							
ANR	338402	FunctionDef	"zend_print_long_to_buf (char * buf , zend_long num)"		338401	0					
ANR	338403	CompoundStatement		802:81:27873:28065	338401	0					
ANR	338404	IfStatement	if ( num < 0 )		338401	0					
ANR	338405	Condition	num < 0	803:5:27880:27886	338401	0	True				
ANR	338406	RelationalExpression	num < 0		338401	0		<			
ANR	338407	Identifier	num		338401	0					
ANR	338408	PrimaryExpression	0		338401	1					
ANR	338409	CompoundStatement		3:5:22:90	338401	1					
ANR	338410	IdentifierDeclStatement	"char * result = zend_print_ulong_to_buf ( buf , ~ ( ( zend_ulong ) num ) + 1 ) ;"	804:5:27896:27964	338401	0	True				
ANR	338411	IdentifierDecl	"* result = zend_print_ulong_to_buf ( buf , ~ ( ( zend_ulong ) num ) + 1 )"		338401	0					
ANR	338412	IdentifierDeclType	char *		338401	0					
ANR	338413	Identifier	result		338401	1					
ANR	338414	AssignmentExpression	"* result = zend_print_ulong_to_buf ( buf , ~ ( ( zend_ulong ) num ) + 1 )"		338401	2		=			
ANR	338415	Identifier	result		338401	0					
ANR	338416	CallExpression	"zend_print_ulong_to_buf ( buf , ~ ( ( zend_ulong ) num ) + 1 )"		338401	1					
ANR	338417	Callee	zend_print_ulong_to_buf		338401	0					
ANR	338418	Identifier	zend_print_ulong_to_buf		338401	0					
ANR	338419	ArgumentList	buf		338401	1					
ANR	338420	Argument	buf		338401	0					
ANR	338421	Identifier	buf		338401	0					
ANR	338422	Argument	~ ( ( zend_ulong ) num ) + 1		338401	1					
ANR	338423	AdditiveExpression	~ ( ( zend_ulong ) num ) + 1		338401	0		+			
ANR	338424	UnaryOperationExpression	~ ( ( zend_ulong ) num )		338401	0					
ANR	338425	UnaryOperator	~		338401	0					
ANR	338426	CastExpression	( zend_ulong ) num		338401	1					
ANR	338427	CastTarget	zend_ulong		338401	0					
ANR	338428	Identifier	num		338401	1					
ANR	338429	PrimaryExpression	1		338401	1					
ANR	338430	ExpressionStatement	* -- result = '-'	805:5:27971:27986	338401	1	True				
ANR	338431	AssignmentExpression	* -- result = '-'		338401	0		=			
ANR	338432	UnaryOperationExpression	* -- result		338401	0					
ANR	338433	UnaryOperator	*		338401	0					
ANR	338434	UnaryExpression	-- result		338401	1					
ANR	338435	IncDec	--		338401	0					
ANR	338436	Identifier	result		338401	1					
ANR	338437	PrimaryExpression	'-'		338401	1					
ANR	338438	ReturnStatement	return result ;	806:2:27990:28003	338401	2	True				
ANR	338439	Identifier	result		338401	0					
ANR	338440	ElseStatement	else		338401	0					
ANR	338441	CompoundStatement		6:8:139:139	338401	0					
ANR	338442	ReturnStatement	"return zend_print_ulong_to_buf ( buf , num ) ;"	808:5:28020:28060	338401	0	True				
ANR	338443	CallExpression	"zend_print_ulong_to_buf ( buf , num )"		338401	0					
ANR	338444	Callee	zend_print_ulong_to_buf		338401	0					
ANR	338445	Identifier	zend_print_ulong_to_buf		338401	0					
ANR	338446	ArgumentList	buf		338401	1					
ANR	338447	Argument	buf		338401	0					
ANR	338448	Identifier	buf		338401	0					
ANR	338449	Argument	num		338401	1					
ANR	338450	Identifier	num		338401	0					
ANR	338451	ReturnType	static zend_always_inline char *		338401	1					
ANR	338452	Identifier	zend_print_long_to_buf		338401	2					
ANR	338453	ParameterList	"char * buf , zend_long num"		338401	3					
ANR	338454	Parameter	char * buf	802:55:27847:27855	338401	0	True				
ANR	338455	ParameterType	char *		338401	0					
ANR	338456	Identifier	buf		338401	1					
ANR	338457	Parameter	zend_long num	802:66:27858:27870	338401	1	True				
ANR	338458	ParameterType	zend_long		338401	0					
ANR	338459	Identifier	num		338401	1					
ANR	338460	CFGEntryNode	ENTRY		338401		True				
ANR	338461	CFGExitNode	EXIT		338401		True				
ANR	338462	Symbol	result		338401						
ANR	338463	Symbol	buf		338401						
ANR	338464	Symbol	* -- result		338401						
ANR	338465	Symbol	* result		338401						
ANR	338466	Symbol	num		338401						
ANR	338467	Symbol	zend_print_ulong_to_buf		338401						
ANR	338468	DeclStmt									
ANR	338469	Decl							ZEND_FASTCALL	ZEND_FASTCALL ( zend_long num )	zend_long_to_str
