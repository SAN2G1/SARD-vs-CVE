command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1679158	File	data/converged/CVE-2015-8617_php-src/ext_pcre_pcrelib_sljit_sljitNativeX86_32.c								
ANR	1679159	Function	emit_do_imm	29:0:1499:1795							
ANR	1679160	FunctionDef	"emit_do_imm (struct sljit_compiler * compiler , sljit_ub opcode , sljit_sw imm)"		1679159	0					
ANR	1679161	CompoundStatement		30:0:1591:1795	1679159	0					
ANR	1679162	IdentifierDeclStatement	sljit_ub * inst ;	31:1:1594:1608	1679159	0	True				
ANR	1679163	IdentifierDecl	* inst		1679159	0					
ANR	1679164	IdentifierDeclType	sljit_ub *		1679159	0					
ANR	1679165	Identifier	inst		1679159	1					
ANR	1679166	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 + sizeof ( sljit_sw ) )"	33:1:1612:1676	1679159	1	True				
ANR	1679167	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 + sizeof ( sljit_sw ) )"		1679159	0		=			
ANR	1679168	Identifier	inst		1679159	0					
ANR	1679169	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 1 + sizeof ( sljit_sw ) )"		1679159	1					
ANR	1679170	CastTarget	sljit_ub *		1679159	0					
ANR	1679171	CallExpression	"ensure_buf ( compiler , 1 + 1 + sizeof ( sljit_sw ) )"		1679159	1					
ANR	1679172	Callee	ensure_buf		1679159	0					
ANR	1679173	Identifier	ensure_buf		1679159	0					
ANR	1679174	ArgumentList	compiler		1679159	1					
ANR	1679175	Argument	compiler		1679159	0					
ANR	1679176	Identifier	compiler		1679159	0					
ANR	1679177	Argument	1 + 1 + sizeof ( sljit_sw )		1679159	1					
ANR	1679178	AdditiveExpression	1 + 1 + sizeof ( sljit_sw )		1679159	0		+			
ANR	1679179	PrimaryExpression	1		1679159	0					
ANR	1679180	AdditiveExpression	1 + sizeof ( sljit_sw )		1679159	1		+			
ANR	1679181	PrimaryExpression	1		1679159	0					
ANR	1679182	SizeofExpression	sizeof ( sljit_sw )		1679159	1					
ANR	1679183	Sizeof	sizeof		1679159	0					
ANR	1679184	SizeofOperand	sljit_sw		1679159	1					
ANR	1679185	ExpressionStatement	FAIL_IF ( ! inst )	34:1:1679:1693	1679159	2	True				
ANR	1679186	CallExpression	FAIL_IF ( ! inst )		1679159	0					
ANR	1679187	Callee	FAIL_IF		1679159	0					
ANR	1679188	Identifier	FAIL_IF		1679159	0					
ANR	1679189	ArgumentList	! inst		1679159	1					
ANR	1679190	Argument	! inst		1679159	0					
ANR	1679191	UnaryOperationExpression	! inst		1679159	0					
ANR	1679192	UnaryOperator	!		1679159	0					
ANR	1679193	Identifier	inst		1679159	1					
ANR	1679194	ExpressionStatement	INC_SIZE ( 1 + sizeof ( sljit_sw ) )	35:1:1696:1726	1679159	3	True				
ANR	1679195	CallExpression	INC_SIZE ( 1 + sizeof ( sljit_sw ) )		1679159	0					
ANR	1679196	Callee	INC_SIZE		1679159	0					
ANR	1679197	Identifier	INC_SIZE		1679159	0					
ANR	1679198	ArgumentList	1 + sizeof ( sljit_sw )		1679159	1					
ANR	1679199	Argument	1 + sizeof ( sljit_sw )		1679159	0					
ANR	1679200	AdditiveExpression	1 + sizeof ( sljit_sw )		1679159	0		+			
ANR	1679201	PrimaryExpression	1		1679159	0					
ANR	1679202	SizeofExpression	sizeof ( sljit_sw )		1679159	1					
ANR	1679203	Sizeof	sizeof		1679159	0					
ANR	1679204	SizeofOperand	sljit_sw		1679159	1					
ANR	1679205	ExpressionStatement	* inst ++ = opcode	36:1:1729:1745	1679159	4	True				
ANR	1679206	AssignmentExpression	* inst ++ = opcode		1679159	0		=			
ANR	1679207	UnaryOperationExpression	* inst ++		1679159	0					
ANR	1679208	UnaryOperator	*		1679159	0					
ANR	1679209	PostIncDecOperationExpression	inst ++		1679159	1					
ANR	1679210	Identifier	inst		1679159	0					
ANR	1679211	IncDec	++		1679159	1					
ANR	1679212	Identifier	opcode		1679159	1					
ANR	1679213	ExpressionStatement	* ( sljit_sw * ) inst = imm	37:1:1748:1770	1679159	5	True				
ANR	1679214	AssignmentExpression	* ( sljit_sw * ) inst = imm		1679159	0		=			
ANR	1679215	UnaryOperationExpression	* ( sljit_sw * ) inst		1679159	0					
ANR	1679216	UnaryOperator	*		1679159	0					
ANR	1679217	CastExpression	( sljit_sw * ) inst		1679159	1					
ANR	1679218	CastTarget	sljit_sw *		1679159	0					
ANR	1679219	Identifier	inst		1679159	1					
ANR	1679220	Identifier	imm		1679159	1					
ANR	1679221	ReturnStatement	return SLJIT_SUCCESS ;	38:1:1773:1793	1679159	6	True				
ANR	1679222	Identifier	SLJIT_SUCCESS		1679159	0					
ANR	1679223	ReturnType	static sljit_si		1679159	1					
ANR	1679224	Identifier	emit_do_imm		1679159	2					
ANR	1679225	ParameterList	"struct sljit_compiler * compiler , sljit_ub opcode , sljit_sw imm"		1679159	3					
ANR	1679226	Parameter	struct sljit_compiler * compiler	29:28:1527:1557	1679159	0	True				
ANR	1679227	ParameterType	struct sljit_compiler *		1679159	0					
ANR	1679228	Identifier	compiler		1679159	1					
ANR	1679229	Parameter	sljit_ub opcode	29:61:1560:1574	1679159	1	True				
ANR	1679230	ParameterType	sljit_ub		1679159	0					
ANR	1679231	Identifier	opcode		1679159	1					
ANR	1679232	Parameter	sljit_sw imm	29:78:1577:1588	1679159	2	True				
ANR	1679233	ParameterType	sljit_sw		1679159	0					
ANR	1679234	Identifier	imm		1679159	1					
ANR	1679235	CFGEntryNode	ENTRY		1679159		True				
ANR	1679236	CFGExitNode	EXIT		1679159		True				
ANR	1679237	Symbol	* inst		1679159						
ANR	1679238	Symbol	inst		1679159						
ANR	1679239	Symbol	ensure_buf		1679159						
ANR	1679240	Symbol	imm		1679159						
ANR	1679241	Symbol	* inst ++		1679159						
ANR	1679242	Symbol	SLJIT_SUCCESS		1679159						
ANR	1679243	Symbol	* ( sljit_sw * ) inst		1679159						
ANR	1679244	Symbol	compiler		1679159						
ANR	1679245	Symbol	opcode		1679159						
ANR	1679246	Function	generate_far_jump_code	41:0:1798:2306							
ANR	1679247	FunctionDef	"generate_far_jump_code (struct sljit_jump * jump , sljit_ub * code_ptr , sljit_si type)"		1679246	0					
ANR	1679248	CompoundStatement		42:0:1898:2306	1679246	0					
ANR	1679249	IfStatement	if ( type == SLJIT_JUMP )		1679246	0					
ANR	1679250	Condition	type == SLJIT_JUMP	43:5:1905:1922	1679246	0	True				
ANR	1679251	EqualityExpression	type == SLJIT_JUMP		1679246	0		==			
ANR	1679252	Identifier	type		1679246	0					
ANR	1679253	Identifier	SLJIT_JUMP		1679246	1					
ANR	1679254	CompoundStatement		2:25:26:26	1679246	1					
ANR	1679255	ExpressionStatement	* code_ptr ++ = JMP_i32	44:2:1929:1950	1679246	0	True				
ANR	1679256	AssignmentExpression	* code_ptr ++ = JMP_i32		1679246	0		=			
ANR	1679257	UnaryOperationExpression	* code_ptr ++		1679246	0					
ANR	1679258	UnaryOperator	*		1679246	0					
ANR	1679259	PostIncDecOperationExpression	code_ptr ++		1679246	1					
ANR	1679260	Identifier	code_ptr		1679246	0					
ANR	1679261	IncDec	++		1679246	1					
ANR	1679262	Identifier	JMP_i32		1679246	1					
ANR	1679263	ExpressionStatement	jump -> addr ++	45:2:1954:1966	1679246	1	True				
ANR	1679264	PostIncDecOperationExpression	jump -> addr ++		1679246	0					
ANR	1679265	PtrMemberAccess	jump -> addr		1679246	0					
ANR	1679266	Identifier	jump		1679246	0					
ANR	1679267	Identifier	addr		1679246	1					
ANR	1679268	IncDec	++		1679246	1					
ANR	1679269	ElseStatement	else		1679246	0					
ANR	1679270	IfStatement	if ( type >= SLJIT_FAST_CALL )		1679246	0					
ANR	1679271	Condition	type >= SLJIT_FAST_CALL	47:10:1981:2003	1679246	0	True				
ANR	1679272	RelationalExpression	type >= SLJIT_FAST_CALL		1679246	0		>=			
ANR	1679273	Identifier	type		1679246	0					
ANR	1679274	Identifier	SLJIT_FAST_CALL		1679246	1					
ANR	1679275	CompoundStatement		6:35:107:107	1679246	1					
ANR	1679276	ExpressionStatement	* code_ptr ++ = CALL_i32	48:2:2010:2032	1679246	0	True				
ANR	1679277	AssignmentExpression	* code_ptr ++ = CALL_i32		1679246	0		=			
ANR	1679278	UnaryOperationExpression	* code_ptr ++		1679246	0					
ANR	1679279	UnaryOperator	*		1679246	0					
ANR	1679280	PostIncDecOperationExpression	code_ptr ++		1679246	1					
ANR	1679281	Identifier	code_ptr		1679246	0					
ANR	1679282	IncDec	++		1679246	1					
ANR	1679283	Identifier	CALL_i32		1679246	1					
ANR	1679284	ExpressionStatement	jump -> addr ++	49:2:2036:2048	1679246	1	True				
ANR	1679285	PostIncDecOperationExpression	jump -> addr ++		1679246	0					
ANR	1679286	PtrMemberAccess	jump -> addr		1679246	0					
ANR	1679287	Identifier	jump		1679246	0					
ANR	1679288	Identifier	addr		1679246	1					
ANR	1679289	IncDec	++		1679246	1					
ANR	1679290	ElseStatement	else		1679246	0					
ANR	1679291	CompoundStatement		10:6:160:160	1679246	0					
ANR	1679292	ExpressionStatement	* code_ptr ++ = GROUP_0F	52:2:2063:2085	1679246	0	True				
ANR	1679293	AssignmentExpression	* code_ptr ++ = GROUP_0F		1679246	0		=			
ANR	1679294	UnaryOperationExpression	* code_ptr ++		1679246	0					
ANR	1679295	UnaryOperator	*		1679246	0					
ANR	1679296	PostIncDecOperationExpression	code_ptr ++		1679246	1					
ANR	1679297	Identifier	code_ptr		1679246	0					
ANR	1679298	IncDec	++		1679246	1					
ANR	1679299	Identifier	GROUP_0F		1679246	1					
ANR	1679300	ExpressionStatement	* code_ptr ++ = get_jump_code ( type )	53:2:2089:2122	1679246	1	True				
ANR	1679301	AssignmentExpression	* code_ptr ++ = get_jump_code ( type )		1679246	0		=			
ANR	1679302	UnaryOperationExpression	* code_ptr ++		1679246	0					
ANR	1679303	UnaryOperator	*		1679246	0					
ANR	1679304	PostIncDecOperationExpression	code_ptr ++		1679246	1					
ANR	1679305	Identifier	code_ptr		1679246	0					
ANR	1679306	IncDec	++		1679246	1					
ANR	1679307	CallExpression	get_jump_code ( type )		1679246	1					
ANR	1679308	Callee	get_jump_code		1679246	0					
ANR	1679309	Identifier	get_jump_code		1679246	0					
ANR	1679310	ArgumentList	type		1679246	1					
ANR	1679311	Argument	type		1679246	0					
ANR	1679312	Identifier	type		1679246	0					
ANR	1679313	ExpressionStatement	jump -> addr += 2	54:2:2126:2141	1679246	2	True				
ANR	1679314	AssignmentExpression	jump -> addr += 2		1679246	0		+=			
ANR	1679315	PtrMemberAccess	jump -> addr		1679246	0					
ANR	1679316	Identifier	jump		1679246	0					
ANR	1679317	Identifier	addr		1679246	1					
ANR	1679318	PrimaryExpression	2		1679246	1					
ANR	1679319	IfStatement	if ( jump -> flags & JUMP_LABEL )		1679246	1					
ANR	1679320	Condition	jump -> flags & JUMP_LABEL	57:5:2152:2175	1679246	0	True				
ANR	1679321	BitAndExpression	jump -> flags & JUMP_LABEL		1679246	0		&			
ANR	1679322	PtrMemberAccess	jump -> flags		1679246	0					
ANR	1679323	Identifier	jump		1679246	0					
ANR	1679324	Identifier	flags		1679246	1					
ANR	1679325	Identifier	JUMP_LABEL		1679246	1					
ANR	1679326	ExpressionStatement	jump -> flags |= PATCH_MW	58:2:2180:2203	1679246	1	True				
ANR	1679327	AssignmentExpression	jump -> flags |= PATCH_MW		1679246	0		|=			
ANR	1679328	PtrMemberAccess	jump -> flags		1679246	0					
ANR	1679329	Identifier	jump		1679246	0					
ANR	1679330	Identifier	flags		1679246	1					
ANR	1679331	Identifier	PATCH_MW		1679246	1					
ANR	1679332	ElseStatement	else		1679246	0					
ANR	1679333	ExpressionStatement	* ( sljit_sw * ) code_ptr = jump -> u . target - ( jump -> addr + 4 )	60:2:2213:2269	1679246	0	True				
ANR	1679334	AssignmentExpression	* ( sljit_sw * ) code_ptr = jump -> u . target - ( jump -> addr + 4 )		1679246	0		=			
ANR	1679335	UnaryOperationExpression	* ( sljit_sw * ) code_ptr		1679246	0					
ANR	1679336	UnaryOperator	*		1679246	0					
ANR	1679337	CastExpression	( sljit_sw * ) code_ptr		1679246	1					
ANR	1679338	CastTarget	sljit_sw *		1679246	0					
ANR	1679339	Identifier	code_ptr		1679246	1					
ANR	1679340	AdditiveExpression	jump -> u . target - ( jump -> addr + 4 )		1679246	1		-			
ANR	1679341	MemberAccess	jump -> u . target		1679246	0					
ANR	1679342	PtrMemberAccess	jump -> u		1679246	0					
ANR	1679343	Identifier	jump		1679246	0					
ANR	1679344	Identifier	u		1679246	1					
ANR	1679345	Identifier	target		1679246	1					
ANR	1679346	AdditiveExpression	jump -> addr + 4		1679246	1		+			
ANR	1679347	PtrMemberAccess	jump -> addr		1679246	0					
ANR	1679348	Identifier	jump		1679246	0					
ANR	1679349	Identifier	addr		1679246	1					
ANR	1679350	PrimaryExpression	4		1679246	1					
ANR	1679351	ExpressionStatement	code_ptr += 4	61:1:2272:2285	1679246	2	True				
ANR	1679352	AssignmentExpression	code_ptr += 4		1679246	0		+=			
ANR	1679353	Identifier	code_ptr		1679246	0					
ANR	1679354	PrimaryExpression	4		1679246	1					
ANR	1679355	ReturnStatement	return code_ptr ;	63:1:2289:2304	1679246	3	True				
ANR	1679356	Identifier	code_ptr		1679246	0					
ANR	1679357	ReturnType	static sljit_ub *		1679246	1					
ANR	1679358	Identifier	generate_far_jump_code		1679246	2					
ANR	1679359	ParameterList	"struct sljit_jump * jump , sljit_ub * code_ptr , sljit_si type"		1679246	3					
ANR	1679360	Parameter	struct sljit_jump * jump	41:40:1838:1860	1679246	0	True				
ANR	1679361	ParameterType	struct sljit_jump *		1679246	0					
ANR	1679362	Identifier	jump		1679246	1					
ANR	1679363	Parameter	sljit_ub * code_ptr	41:65:1863:1880	1679246	1	True				
ANR	1679364	ParameterType	sljit_ub *		1679246	0					
ANR	1679365	Identifier	code_ptr		1679246	1					
ANR	1679366	Parameter	sljit_si type	41:85:1883:1895	1679246	2	True				
ANR	1679367	ParameterType	sljit_si		1679246	0					
ANR	1679368	Identifier	type		1679246	1					
ANR	1679369	CFGEntryNode	ENTRY		1679246		True				
ANR	1679370	CFGExitNode	EXIT		1679246		True				
ANR	1679371	Symbol	SLJIT_JUMP		1679246						
ANR	1679372	Symbol	GROUP_0F		1679246						
ANR	1679373	Symbol	* jump		1679246						
ANR	1679374	Symbol	jump -> u		1679246						
ANR	1679375	Symbol	CALL_i32		1679246						
ANR	1679376	Symbol	jump -> flags		1679246						
ANR	1679377	Symbol	JUMP_LABEL		1679246						
ANR	1679378	Symbol	jump -> addr		1679246						
ANR	1679379	Symbol	get_jump_code		1679246						
ANR	1679380	Symbol	type		1679246						
ANR	1679381	Symbol	JMP_i32		1679246						
ANR	1679382	Symbol	* code_ptr		1679246						
ANR	1679383	Symbol	code_ptr		1679246						
ANR	1679384	Symbol	SLJIT_FAST_CALL		1679246						
ANR	1679385	Symbol	jump -> u . target		1679246						
ANR	1679386	Symbol	* code_ptr ++		1679246						
ANR	1679387	Symbol	* ( sljit_sw * ) code_ptr		1679246						
ANR	1679388	Symbol	PATCH_MW		1679246						
ANR	1679389	Symbol	jump		1679246						
ANR	1679390	Function	sljit_emit_enter	66:0:2309:6319							
ANR	1679391	FunctionDef	"sljit_emit_enter (struct sljit_compiler * compiler , sljit_si options , sljit_si args , sljit_si scratches , sljit_si saveds , sljit_si fscratches , sljit_si fsaveds , sljit_si local_size)"		1679390	0					
ANR	1679392	CompoundStatement		69:0:2525:6319	1679390	0					
ANR	1679393	IdentifierDeclStatement	sljit_si size ;	70:1:2528:2541	1679390	0	True				
ANR	1679394	IdentifierDecl	size		1679390	0					
ANR	1679395	IdentifierDeclType	sljit_si		1679390	0					
ANR	1679396	Identifier	size		1679390	1					
ANR	1679397	IdentifierDeclStatement	sljit_ub * inst ;	71:1:2544:2558	1679390	1	True				
ANR	1679398	IdentifierDecl	* inst		1679390	0					
ANR	1679399	IdentifierDeclType	sljit_ub *		1679390	0					
ANR	1679400	Identifier	inst		1679390	1					
ANR	1679401	ExpressionStatement	CHECK_ERROR ( )	73:1:2562:2575	1679390	2	True				
ANR	1679402	CallExpression	CHECK_ERROR ( )		1679390	0					
ANR	1679403	Callee	CHECK_ERROR		1679390	0					
ANR	1679404	Identifier	CHECK_ERROR		1679390	0					
ANR	1679405	ArgumentList			1679390	1					
ANR	1679406	ExpressionStatement	"CHECK ( check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size ) )"	74:1:2578:2684	1679390	3	True				
ANR	1679407	CallExpression	"CHECK ( check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size ) )"		1679390	0					
ANR	1679408	Callee	CHECK		1679390	0					
ANR	1679409	Identifier	CHECK		1679390	0					
ANR	1679410	ArgumentList	"check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1679390	1					
ANR	1679411	Argument	"check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1679390	0					
ANR	1679412	CallExpression	"check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1679390	0					
ANR	1679413	Callee	check_sljit_emit_enter		1679390	0					
ANR	1679414	Identifier	check_sljit_emit_enter		1679390	0					
ANR	1679415	ArgumentList	compiler		1679390	1					
ANR	1679416	Argument	compiler		1679390	0					
ANR	1679417	Identifier	compiler		1679390	0					
ANR	1679418	Argument	options		1679390	1					
ANR	1679419	Identifier	options		1679390	0					
ANR	1679420	Argument	args		1679390	2					
ANR	1679421	Identifier	args		1679390	0					
ANR	1679422	Argument	scratches		1679390	3					
ANR	1679423	Identifier	scratches		1679390	0					
ANR	1679424	Argument	saveds		1679390	4					
ANR	1679425	Identifier	saveds		1679390	0					
ANR	1679426	Argument	fscratches		1679390	5					
ANR	1679427	Identifier	fscratches		1679390	0					
ANR	1679428	Argument	fsaveds		1679390	6					
ANR	1679429	Identifier	fsaveds		1679390	0					
ANR	1679430	Argument	local_size		1679390	7					
ANR	1679431	Identifier	local_size		1679390	0					
ANR	1679432	ExpressionStatement	"set_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"	75:1:2687:2778	1679390	4	True				
ANR	1679433	CallExpression	"set_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1679390	0					
ANR	1679434	Callee	set_emit_enter		1679390	0					
ANR	1679435	Identifier	set_emit_enter		1679390	0					
ANR	1679436	ArgumentList	compiler		1679390	1					
ANR	1679437	Argument	compiler		1679390	0					
ANR	1679438	Identifier	compiler		1679390	0					
ANR	1679439	Argument	options		1679390	1					
ANR	1679440	Identifier	options		1679390	0					
ANR	1679441	Argument	args		1679390	2					
ANR	1679442	Identifier	args		1679390	0					
ANR	1679443	Argument	scratches		1679390	3					
ANR	1679444	Identifier	scratches		1679390	0					
ANR	1679445	Argument	saveds		1679390	4					
ANR	1679446	Identifier	saveds		1679390	0					
ANR	1679447	Argument	fscratches		1679390	5					
ANR	1679448	Identifier	fscratches		1679390	0					
ANR	1679449	Argument	fsaveds		1679390	6					
ANR	1679450	Identifier	fsaveds		1679390	0					
ANR	1679451	Argument	local_size		1679390	7					
ANR	1679452	Identifier	local_size		1679390	0					
ANR	1679453	ExpressionStatement	compiler -> args = args	77:1:2782:2803	1679390	5	True				
ANR	1679454	AssignmentExpression	compiler -> args = args		1679390	0		=			
ANR	1679455	PtrMemberAccess	compiler -> args		1679390	0					
ANR	1679456	Identifier	compiler		1679390	0					
ANR	1679457	Identifier	args		1679390	1					
ANR	1679458	Identifier	args		1679390	1					
ANR	1679459	ExpressionStatement	compiler -> flags_saved = 0	78:1:2806:2831	1679390	6	True				
ANR	1679460	AssignmentExpression	compiler -> flags_saved = 0		1679390	0		=			
ANR	1679461	PtrMemberAccess	compiler -> flags_saved		1679390	0					
ANR	1679462	Identifier	compiler		1679390	0					
ANR	1679463	Identifier	flags_saved		1679390	1					
ANR	1679464	PrimaryExpression	0		1679390	1					
ANR	1679465	ExpressionStatement	size = 1 + ( scratches > 7 ? ( scratches - 7 ) : 0 ) + ( saveds <= 3 ? saveds : 3 )	80:1:2835:2912	1679390	7	True				
ANR	1679466	AssignmentExpression	size = 1 + ( scratches > 7 ? ( scratches - 7 ) : 0 ) + ( saveds <= 3 ? saveds : 3 )		1679390	0		=			
ANR	1679467	Identifier	size		1679390	0					
ANR	1679468	AdditiveExpression	1 + ( scratches > 7 ? ( scratches - 7 ) : 0 ) + ( saveds <= 3 ? saveds : 3 )		1679390	1		+			
ANR	1679469	PrimaryExpression	1		1679390	0					
ANR	1679470	AdditiveExpression	( scratches > 7 ? ( scratches - 7 ) : 0 ) + ( saveds <= 3 ? saveds : 3 )		1679390	1		+			
ANR	1679471	ConditionalExpression	scratches > 7 ? ( scratches - 7 ) : 0		1679390	0					
ANR	1679472	Condition	scratches > 7		1679390	0					
ANR	1679473	RelationalExpression	scratches > 7		1679390	0		>			
ANR	1679474	Identifier	scratches		1679390	0					
ANR	1679475	PrimaryExpression	7		1679390	1					
ANR	1679476	AdditiveExpression	scratches - 7		1679390	1		-			
ANR	1679477	Identifier	scratches		1679390	0					
ANR	1679478	PrimaryExpression	7		1679390	1					
ANR	1679479	PrimaryExpression	0		1679390	2					
ANR	1679480	ConditionalExpression	saveds <= 3 ? saveds : 3		1679390	1					
ANR	1679481	Condition	saveds <= 3		1679390	0					
ANR	1679482	RelationalExpression	saveds <= 3		1679390	0		<=			
ANR	1679483	Identifier	saveds		1679390	0					
ANR	1679484	PrimaryExpression	3		1679390	1					
ANR	1679485	Identifier	saveds		1679390	1					
ANR	1679486	PrimaryExpression	3		1679390	2					
ANR	1679487	ExpressionStatement	size += ( args > 0 ? ( args * 2 ) : 0 ) + ( args > 2 ? 2 : 0 )	82:1:2976:3032	1679390	8	True				
ANR	1679488	AssignmentExpression	size += ( args > 0 ? ( args * 2 ) : 0 ) + ( args > 2 ? 2 : 0 )		1679390	0		+=			
ANR	1679489	Identifier	size		1679390	0					
ANR	1679490	AdditiveExpression	( args > 0 ? ( args * 2 ) : 0 ) + ( args > 2 ? 2 : 0 )		1679390	1		+			
ANR	1679491	ConditionalExpression	args > 0 ? ( args * 2 ) : 0		1679390	0					
ANR	1679492	Condition	args > 0		1679390	0					
ANR	1679493	RelationalExpression	args > 0		1679390	0		>			
ANR	1679494	Identifier	args		1679390	0					
ANR	1679495	PrimaryExpression	0		1679390	1					
ANR	1679496	MultiplicativeExpression	args * 2		1679390	1		*			
ANR	1679497	Identifier	args		1679390	0					
ANR	1679498	PrimaryExpression	2		1679390	1					
ANR	1679499	PrimaryExpression	0		1679390	2					
ANR	1679500	ConditionalExpression	args > 2 ? 2 : 0		1679390	1					
ANR	1679501	Condition	args > 2		1679390	0					
ANR	1679502	RelationalExpression	args > 2		1679390	0		>			
ANR	1679503	Identifier	args		1679390	0					
ANR	1679504	PrimaryExpression	2		1679390	1					
ANR	1679505	PrimaryExpression	2		1679390	1					
ANR	1679506	PrimaryExpression	0		1679390	2					
ANR	1679507	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"	86:1:3090:3138	1679390	9	True				
ANR	1679508	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1679390	0		=			
ANR	1679509	Identifier	inst		1679390	0					
ANR	1679510	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1679390	1					
ANR	1679511	CastTarget	sljit_ub *		1679390	0					
ANR	1679512	CallExpression	"ensure_buf ( compiler , 1 + size )"		1679390	1					
ANR	1679513	Callee	ensure_buf		1679390	0					
ANR	1679514	Identifier	ensure_buf		1679390	0					
ANR	1679515	ArgumentList	compiler		1679390	1					
ANR	1679516	Argument	compiler		1679390	0					
ANR	1679517	Identifier	compiler		1679390	0					
ANR	1679518	Argument	1 + size		1679390	1					
ANR	1679519	AdditiveExpression	1 + size		1679390	0		+			
ANR	1679520	PrimaryExpression	1		1679390	0					
ANR	1679521	Identifier	size		1679390	1					
ANR	1679522	ExpressionStatement	FAIL_IF ( ! inst )	87:1:3141:3155	1679390	10	True				
ANR	1679523	CallExpression	FAIL_IF ( ! inst )		1679390	0					
ANR	1679524	Callee	FAIL_IF		1679390	0					
ANR	1679525	Identifier	FAIL_IF		1679390	0					
ANR	1679526	ArgumentList	! inst		1679390	1					
ANR	1679527	Argument	! inst		1679390	0					
ANR	1679528	UnaryOperationExpression	! inst		1679390	0					
ANR	1679529	UnaryOperator	!		1679390	0					
ANR	1679530	Identifier	inst		1679390	1					
ANR	1679531	ExpressionStatement	INC_SIZE ( size )	89:1:3159:3173	1679390	11	True				
ANR	1679532	CallExpression	INC_SIZE ( size )		1679390	0					
ANR	1679533	Callee	INC_SIZE		1679390	0					
ANR	1679534	Identifier	INC_SIZE		1679390	0					
ANR	1679535	ArgumentList	size		1679390	1					
ANR	1679536	Argument	size		1679390	0					
ANR	1679537	Identifier	size		1679390	0					
ANR	1679538	ExpressionStatement	PUSH_REG ( reg_map [ TMP_REG1 ] )	90:1:3176:3203	1679390	12	True				
ANR	1679539	CallExpression	PUSH_REG ( reg_map [ TMP_REG1 ] )		1679390	0					
ANR	1679540	Callee	PUSH_REG		1679390	0					
ANR	1679541	Identifier	PUSH_REG		1679390	0					
ANR	1679542	ArgumentList	reg_map [ TMP_REG1 ]		1679390	1					
ANR	1679543	Argument	reg_map [ TMP_REG1 ]		1679390	0					
ANR	1679544	ArrayIndexing	reg_map [ TMP_REG1 ]		1679390	0					
ANR	1679545	Identifier	reg_map		1679390	0					
ANR	1679546	Identifier	TMP_REG1		1679390	1					
ANR	1679547	IfStatement	if ( args > 0 )		1679390	13					
ANR	1679548	Condition	args > 0	92:5:3272:3279	1679390	0	True				
ANR	1679549	RelationalExpression	args > 0		1679390	0		>			
ANR	1679550	Identifier	args		1679390	0					
ANR	1679551	PrimaryExpression	0		1679390	1					
ANR	1679552	CompoundStatement		24:15:756:756	1679390	1					
ANR	1679553	ExpressionStatement	* inst ++ = MOV_r_rm	93:2:3286:3304	1679390	0	True				
ANR	1679554	AssignmentExpression	* inst ++ = MOV_r_rm		1679390	0		=			
ANR	1679555	UnaryOperationExpression	* inst ++		1679390	0					
ANR	1679556	UnaryOperator	*		1679390	0					
ANR	1679557	PostIncDecOperationExpression	inst ++		1679390	1					
ANR	1679558	Identifier	inst		1679390	0					
ANR	1679559	IncDec	++		1679390	1					
ANR	1679560	Identifier	MOV_r_rm		1679390	1					
ANR	1679561	ExpressionStatement	* inst ++ = MOD_REG | ( reg_map [ TMP_REG1 ] << 3 ) | 0x4	94:2:3308:3368	1679390	1	True				
ANR	1679562	AssignmentExpression	* inst ++ = MOD_REG | ( reg_map [ TMP_REG1 ] << 3 ) | 0x4		1679390	0		=			
ANR	1679563	UnaryOperationExpression	* inst ++		1679390	0					
ANR	1679564	UnaryOperator	*		1679390	0					
ANR	1679565	PostIncDecOperationExpression	inst ++		1679390	1					
ANR	1679566	Identifier	inst		1679390	0					
ANR	1679567	IncDec	++		1679390	1					
ANR	1679568	InclusiveOrExpression	MOD_REG | ( reg_map [ TMP_REG1 ] << 3 ) | 0x4		1679390	1		|			
ANR	1679569	Identifier	MOD_REG		1679390	0					
ANR	1679570	InclusiveOrExpression	( reg_map [ TMP_REG1 ] << 3 ) | 0x4		1679390	1		|			
ANR	1679571	ShiftExpression	reg_map [ TMP_REG1 ] << 3		1679390	0		<<			
ANR	1679572	ArrayIndexing	reg_map [ TMP_REG1 ]		1679390	0					
ANR	1679573	Identifier	reg_map		1679390	0					
ANR	1679574	Identifier	TMP_REG1		1679390	1					
ANR	1679575	PrimaryExpression	3		1679390	1					
ANR	1679576	PrimaryExpression	0x4		1679390	1					
ANR	1679577	IfStatement	if ( saveds > 2 || scratches > 7 )		1679390	14					
ANR	1679578	Condition	saveds > 2 || scratches > 7	97:5:3385:3411	1679390	0	True				
ANR	1679579	OrExpression	saveds > 2 || scratches > 7		1679390	0		||			
ANR	1679580	RelationalExpression	saveds > 2		1679390	0		>			
ANR	1679581	Identifier	saveds		1679390	0					
ANR	1679582	PrimaryExpression	2		1679390	1					
ANR	1679583	RelationalExpression	scratches > 7		1679390	1		>			
ANR	1679584	Identifier	scratches		1679390	0					
ANR	1679585	PrimaryExpression	7		1679390	1					
ANR	1679586	ExpressionStatement	PUSH_REG ( reg_map [ SLJIT_S2 ] )	98:2:3416:3443	1679390	1	True				
ANR	1679587	CallExpression	PUSH_REG ( reg_map [ SLJIT_S2 ] )		1679390	0					
ANR	1679588	Callee	PUSH_REG		1679390	0					
ANR	1679589	Identifier	PUSH_REG		1679390	0					
ANR	1679590	ArgumentList	reg_map [ SLJIT_S2 ]		1679390	1					
ANR	1679591	Argument	reg_map [ SLJIT_S2 ]		1679390	0					
ANR	1679592	ArrayIndexing	reg_map [ SLJIT_S2 ]		1679390	0					
ANR	1679593	Identifier	reg_map		1679390	0					
ANR	1679594	Identifier	SLJIT_S2		1679390	1					
ANR	1679595	IfStatement	if ( saveds > 1 || scratches > 8 )		1679390	15					
ANR	1679596	Condition	saveds > 1 || scratches > 8	99:5:3450:3476	1679390	0	True				
ANR	1679597	OrExpression	saveds > 1 || scratches > 8		1679390	0		||			
ANR	1679598	RelationalExpression	saveds > 1		1679390	0		>			
ANR	1679599	Identifier	saveds		1679390	0					
ANR	1679600	PrimaryExpression	1		1679390	1					
ANR	1679601	RelationalExpression	scratches > 8		1679390	1		>			
ANR	1679602	Identifier	scratches		1679390	0					
ANR	1679603	PrimaryExpression	8		1679390	1					
ANR	1679604	ExpressionStatement	PUSH_REG ( reg_map [ SLJIT_S1 ] )	100:2:3481:3508	1679390	1	True				
ANR	1679605	CallExpression	PUSH_REG ( reg_map [ SLJIT_S1 ] )		1679390	0					
ANR	1679606	Callee	PUSH_REG		1679390	0					
ANR	1679607	Identifier	PUSH_REG		1679390	0					
ANR	1679608	ArgumentList	reg_map [ SLJIT_S1 ]		1679390	1					
ANR	1679609	Argument	reg_map [ SLJIT_S1 ]		1679390	0					
ANR	1679610	ArrayIndexing	reg_map [ SLJIT_S1 ]		1679390	0					
ANR	1679611	Identifier	reg_map		1679390	0					
ANR	1679612	Identifier	SLJIT_S1		1679390	1					
ANR	1679613	IfStatement	if ( saveds > 0 || scratches > 9 )		1679390	16					
ANR	1679614	Condition	saveds > 0 || scratches > 9	101:5:3515:3541	1679390	0	True				
ANR	1679615	OrExpression	saveds > 0 || scratches > 9		1679390	0		||			
ANR	1679616	RelationalExpression	saveds > 0		1679390	0		>			
ANR	1679617	Identifier	saveds		1679390	0					
ANR	1679618	PrimaryExpression	0		1679390	1					
ANR	1679619	RelationalExpression	scratches > 9		1679390	1		>			
ANR	1679620	Identifier	scratches		1679390	0					
ANR	1679621	PrimaryExpression	9		1679390	1					
ANR	1679622	ExpressionStatement	PUSH_REG ( reg_map [ SLJIT_S0 ] )	102:2:3546:3573	1679390	1	True				
ANR	1679623	CallExpression	PUSH_REG ( reg_map [ SLJIT_S0 ] )		1679390	0					
ANR	1679624	Callee	PUSH_REG		1679390	0					
ANR	1679625	Identifier	PUSH_REG		1679390	0					
ANR	1679626	ArgumentList	reg_map [ SLJIT_S0 ]		1679390	1					
ANR	1679627	Argument	reg_map [ SLJIT_S0 ]		1679390	0					
ANR	1679628	ArrayIndexing	reg_map [ SLJIT_S0 ]		1679390	0					
ANR	1679629	Identifier	reg_map		1679390	0					
ANR	1679630	Identifier	SLJIT_S0		1679390	1					
ANR	1679631	IfStatement	if ( args > 0 )		1679390	17					
ANR	1679632	Condition	args > 0	105:5:3642:3649	1679390	0	True				
ANR	1679633	RelationalExpression	args > 0		1679390	0		>			
ANR	1679634	Identifier	args		1679390	0					
ANR	1679635	PrimaryExpression	0		1679390	1					
ANR	1679636	CompoundStatement		37:15:1126:1126	1679390	1					
ANR	1679637	ExpressionStatement	* inst ++ = MOV_r_rm	106:2:3656:3674	1679390	0	True				
ANR	1679638	AssignmentExpression	* inst ++ = MOV_r_rm		1679390	0		=			
ANR	1679639	UnaryOperationExpression	* inst ++		1679390	0					
ANR	1679640	UnaryOperator	*		1679390	0					
ANR	1679641	PostIncDecOperationExpression	inst ++		1679390	1					
ANR	1679642	Identifier	inst		1679390	0					
ANR	1679643	IncDec	++		1679390	1					
ANR	1679644	Identifier	MOV_r_rm		1679390	1					
ANR	1679645	ExpressionStatement	* inst ++ = MOD_REG | ( reg_map [ SLJIT_S0 ] << 3 ) | reg_map [ SLJIT_R2 ]	107:2:3678:3742	1679390	1	True				
ANR	1679646	AssignmentExpression	* inst ++ = MOD_REG | ( reg_map [ SLJIT_S0 ] << 3 ) | reg_map [ SLJIT_R2 ]		1679390	0		=			
ANR	1679647	UnaryOperationExpression	* inst ++		1679390	0					
ANR	1679648	UnaryOperator	*		1679390	0					
ANR	1679649	PostIncDecOperationExpression	inst ++		1679390	1					
ANR	1679650	Identifier	inst		1679390	0					
ANR	1679651	IncDec	++		1679390	1					
ANR	1679652	InclusiveOrExpression	MOD_REG | ( reg_map [ SLJIT_S0 ] << 3 ) | reg_map [ SLJIT_R2 ]		1679390	1		|			
ANR	1679653	Identifier	MOD_REG		1679390	0					
ANR	1679654	InclusiveOrExpression	( reg_map [ SLJIT_S0 ] << 3 ) | reg_map [ SLJIT_R2 ]		1679390	1		|			
ANR	1679655	ShiftExpression	reg_map [ SLJIT_S0 ] << 3		1679390	0		<<			
ANR	1679656	ArrayIndexing	reg_map [ SLJIT_S0 ]		1679390	0					
ANR	1679657	Identifier	reg_map		1679390	0					
ANR	1679658	Identifier	SLJIT_S0		1679390	1					
ANR	1679659	PrimaryExpression	3		1679390	1					
ANR	1679660	ArrayIndexing	reg_map [ SLJIT_R2 ]		1679390	1					
ANR	1679661	Identifier	reg_map		1679390	0					
ANR	1679662	Identifier	SLJIT_R2		1679390	1					
ANR	1679663	IfStatement	if ( args > 1 )		1679390	18					
ANR	1679664	Condition	args > 1	109:5:3752:3759	1679390	0	True				
ANR	1679665	RelationalExpression	args > 1		1679390	0		>			
ANR	1679666	Identifier	args		1679390	0					
ANR	1679667	PrimaryExpression	1		1679390	1					
ANR	1679668	CompoundStatement		41:15:1236:1236	1679390	1					
ANR	1679669	ExpressionStatement	* inst ++ = MOV_r_rm	110:2:3766:3784	1679390	0	True				
ANR	1679670	AssignmentExpression	* inst ++ = MOV_r_rm		1679390	0		=			
ANR	1679671	UnaryOperationExpression	* inst ++		1679390	0					
ANR	1679672	UnaryOperator	*		1679390	0					
ANR	1679673	PostIncDecOperationExpression	inst ++		1679390	1					
ANR	1679674	Identifier	inst		1679390	0					
ANR	1679675	IncDec	++		1679390	1					
ANR	1679676	Identifier	MOV_r_rm		1679390	1					
ANR	1679677	ExpressionStatement	* inst ++ = MOD_REG | ( reg_map [ SLJIT_S1 ] << 3 ) | reg_map [ SLJIT_R1 ]	111:2:3788:3852	1679390	1	True				
ANR	1679678	AssignmentExpression	* inst ++ = MOD_REG | ( reg_map [ SLJIT_S1 ] << 3 ) | reg_map [ SLJIT_R1 ]		1679390	0		=			
ANR	1679679	UnaryOperationExpression	* inst ++		1679390	0					
ANR	1679680	UnaryOperator	*		1679390	0					
ANR	1679681	PostIncDecOperationExpression	inst ++		1679390	1					
ANR	1679682	Identifier	inst		1679390	0					
ANR	1679683	IncDec	++		1679390	1					
ANR	1679684	InclusiveOrExpression	MOD_REG | ( reg_map [ SLJIT_S1 ] << 3 ) | reg_map [ SLJIT_R1 ]		1679390	1		|			
ANR	1679685	Identifier	MOD_REG		1679390	0					
ANR	1679686	InclusiveOrExpression	( reg_map [ SLJIT_S1 ] << 3 ) | reg_map [ SLJIT_R1 ]		1679390	1		|			
ANR	1679687	ShiftExpression	reg_map [ SLJIT_S1 ] << 3		1679390	0		<<			
ANR	1679688	ArrayIndexing	reg_map [ SLJIT_S1 ]		1679390	0					
ANR	1679689	Identifier	reg_map		1679390	0					
ANR	1679690	Identifier	SLJIT_S1		1679390	1					
ANR	1679691	PrimaryExpression	3		1679390	1					
ANR	1679692	ArrayIndexing	reg_map [ SLJIT_R1 ]		1679390	1					
ANR	1679693	Identifier	reg_map		1679390	0					
ANR	1679694	Identifier	SLJIT_R1		1679390	1					
ANR	1679695	IfStatement	if ( args > 2 )		1679390	19					
ANR	1679696	Condition	args > 2	113:5:3862:3869	1679390	0	True				
ANR	1679697	RelationalExpression	args > 2		1679390	0		>			
ANR	1679698	Identifier	args		1679390	0					
ANR	1679699	PrimaryExpression	2		1679390	1					
ANR	1679700	CompoundStatement		45:15:1346:1346	1679390	1					
ANR	1679701	ExpressionStatement	* inst ++ = MOV_r_rm	114:2:3876:3894	1679390	0	True				
ANR	1679702	AssignmentExpression	* inst ++ = MOV_r_rm		1679390	0		=			
ANR	1679703	UnaryOperationExpression	* inst ++		1679390	0					
ANR	1679704	UnaryOperator	*		1679390	0					
ANR	1679705	PostIncDecOperationExpression	inst ++		1679390	1					
ANR	1679706	Identifier	inst		1679390	0					
ANR	1679707	IncDec	++		1679390	1					
ANR	1679708	Identifier	MOV_r_rm		1679390	1					
ANR	1679709	ExpressionStatement	* inst ++ = MOD_DISP8 | ( reg_map [ SLJIT_S2 ] << 3 ) | 0x4	115:2:3898:3960	1679390	1	True				
ANR	1679710	AssignmentExpression	* inst ++ = MOD_DISP8 | ( reg_map [ SLJIT_S2 ] << 3 ) | 0x4		1679390	0		=			
ANR	1679711	UnaryOperationExpression	* inst ++		1679390	0					
ANR	1679712	UnaryOperator	*		1679390	0					
ANR	1679713	PostIncDecOperationExpression	inst ++		1679390	1					
ANR	1679714	Identifier	inst		1679390	0					
ANR	1679715	IncDec	++		1679390	1					
ANR	1679716	InclusiveOrExpression	MOD_DISP8 | ( reg_map [ SLJIT_S2 ] << 3 ) | 0x4		1679390	1		|			
ANR	1679717	Identifier	MOD_DISP8		1679390	0					
ANR	1679718	InclusiveOrExpression	( reg_map [ SLJIT_S2 ] << 3 ) | 0x4		1679390	1		|			
ANR	1679719	ShiftExpression	reg_map [ SLJIT_S2 ] << 3		1679390	0		<<			
ANR	1679720	ArrayIndexing	reg_map [ SLJIT_S2 ]		1679390	0					
ANR	1679721	Identifier	reg_map		1679390	0					
ANR	1679722	Identifier	SLJIT_S2		1679390	1					
ANR	1679723	PrimaryExpression	3		1679390	1					
ANR	1679724	PrimaryExpression	0x4		1679390	1					
ANR	1679725	ExpressionStatement	* inst ++ = 0x24	116:2:3964:3978	1679390	2	True				
ANR	1679726	AssignmentExpression	* inst ++ = 0x24		1679390	0		=			
ANR	1679727	UnaryOperationExpression	* inst ++		1679390	0					
ANR	1679728	UnaryOperator	*		1679390	0					
ANR	1679729	PostIncDecOperationExpression	inst ++		1679390	1					
ANR	1679730	Identifier	inst		1679390	0					
ANR	1679731	IncDec	++		1679390	1					
ANR	1679732	PrimaryExpression	0x24		1679390	1					
ANR	1679733	ExpressionStatement	* inst ++ = sizeof ( sljit_sw ) * ( 3 + 2 )	117:2:3982:4018	1679390	3	True				
ANR	1679734	AssignmentExpression	* inst ++ = sizeof ( sljit_sw ) * ( 3 + 2 )		1679390	0		=			
ANR	1679735	UnaryOperationExpression	* inst ++		1679390	0					
ANR	1679736	UnaryOperator	*		1679390	0					
ANR	1679737	PostIncDecOperationExpression	inst ++		1679390	1					
ANR	1679738	Identifier	inst		1679390	0					
ANR	1679739	IncDec	++		1679390	1					
ANR	1679740	MultiplicativeExpression	sizeof ( sljit_sw ) * ( 3 + 2 )		1679390	1		*			
ANR	1679741	SizeofExpression	sizeof ( sljit_sw )		1679390	0					
ANR	1679742	Sizeof	sizeof		1679390	0					
ANR	1679743	SizeofOperand	sljit_sw		1679390	1					
ANR	1679744	AdditiveExpression	3 + 2		1679390	1		+			
ANR	1679745	PrimaryExpression	3		1679390	0					
ANR	1679746	PrimaryExpression	2		1679390	1					
ANR	1679747	ExpressionStatement	"SLJIT_COMPILE_ASSERT ( SLJIT_LOCALS_OFFSET >= ( 2 + 4 ) * sizeof ( sljit_uw ) , require_at_least_two_words )"	137:1:4503:4602	1679390	20	True				
ANR	1679748	CallExpression	"SLJIT_COMPILE_ASSERT ( SLJIT_LOCALS_OFFSET >= ( 2 + 4 ) * sizeof ( sljit_uw ) , require_at_least_two_words )"		1679390	0					
ANR	1679749	Callee	SLJIT_COMPILE_ASSERT		1679390	0					
ANR	1679750	Identifier	SLJIT_COMPILE_ASSERT		1679390	0					
ANR	1679751	ArgumentList	SLJIT_LOCALS_OFFSET >= ( 2 + 4 ) * sizeof ( sljit_uw )		1679390	1					
ANR	1679752	Argument	SLJIT_LOCALS_OFFSET >= ( 2 + 4 ) * sizeof ( sljit_uw )		1679390	0					
ANR	1679753	RelationalExpression	SLJIT_LOCALS_OFFSET >= ( 2 + 4 ) * sizeof ( sljit_uw )		1679390	0		>=			
ANR	1679754	Identifier	SLJIT_LOCALS_OFFSET		1679390	0					
ANR	1679755	MultiplicativeExpression	( 2 + 4 ) * sizeof ( sljit_uw )		1679390	1		*			
ANR	1679756	AdditiveExpression	2 + 4		1679390	0		+			
ANR	1679757	PrimaryExpression	2		1679390	0					
ANR	1679758	PrimaryExpression	4		1679390	1					
ANR	1679759	SizeofExpression	sizeof ( sljit_uw )		1679390	1					
ANR	1679760	Sizeof	sizeof		1679390	0					
ANR	1679761	SizeofOperand	sljit_uw		1679390	1					
ANR	1679762	Argument	require_at_least_two_words		1679390	1					
ANR	1679763	Identifier	require_at_least_two_words		1679390	0					
ANR	1679764	ExpressionStatement	saveds = ( 2 + ( scratches > 7 ? ( scratches - 7 ) : 0 ) + ( saveds <= 3 ? saveds : 3 ) ) * sizeof ( sljit_uw )	140:1:4722:4822	1679390	21	True				
ANR	1679765	AssignmentExpression	saveds = ( 2 + ( scratches > 7 ? ( scratches - 7 ) : 0 ) + ( saveds <= 3 ? saveds : 3 ) ) * sizeof ( sljit_uw )		1679390	0		=			
ANR	1679766	Identifier	saveds		1679390	0					
ANR	1679767	MultiplicativeExpression	( 2 + ( scratches > 7 ? ( scratches - 7 ) : 0 ) + ( saveds <= 3 ? saveds : 3 ) ) * sizeof ( sljit_uw )		1679390	1		*			
ANR	1679768	AdditiveExpression	2 + ( scratches > 7 ? ( scratches - 7 ) : 0 ) + ( saveds <= 3 ? saveds : 3 )		1679390	0		+			
ANR	1679769	PrimaryExpression	2		1679390	0					
ANR	1679770	AdditiveExpression	( scratches > 7 ? ( scratches - 7 ) : 0 ) + ( saveds <= 3 ? saveds : 3 )		1679390	1		+			
ANR	1679771	ConditionalExpression	scratches > 7 ? ( scratches - 7 ) : 0		1679390	0					
ANR	1679772	Condition	scratches > 7		1679390	0					
ANR	1679773	RelationalExpression	scratches > 7		1679390	0		>			
ANR	1679774	Identifier	scratches		1679390	0					
ANR	1679775	PrimaryExpression	7		1679390	1					
ANR	1679776	AdditiveExpression	scratches - 7		1679390	1		-			
ANR	1679777	Identifier	scratches		1679390	0					
ANR	1679778	PrimaryExpression	7		1679390	1					
ANR	1679779	PrimaryExpression	0		1679390	2					
ANR	1679780	ConditionalExpression	saveds <= 3 ? saveds : 3		1679390	1					
ANR	1679781	Condition	saveds <= 3		1679390	0					
ANR	1679782	RelationalExpression	saveds <= 3		1679390	0		<=			
ANR	1679783	Identifier	saveds		1679390	0					
ANR	1679784	PrimaryExpression	3		1679390	1					
ANR	1679785	Identifier	saveds		1679390	1					
ANR	1679786	PrimaryExpression	3		1679390	2					
ANR	1679787	SizeofExpression	sizeof ( sljit_uw )		1679390	1					
ANR	1679788	Sizeof	sizeof		1679390	0					
ANR	1679789	SizeofOperand	sljit_uw		1679390	1					
ANR	1679790	ExpressionStatement	local_size = ( ( SLJIT_LOCALS_OFFSET + saveds + local_size + 15 ) & ~15 ) - saveds	141:1:4825:4903	1679390	22	True				
ANR	1679791	AssignmentExpression	local_size = ( ( SLJIT_LOCALS_OFFSET + saveds + local_size + 15 ) & ~15 ) - saveds		1679390	0		=			
ANR	1679792	Identifier	local_size		1679390	0					
ANR	1679793	AdditiveExpression	( ( SLJIT_LOCALS_OFFSET + saveds + local_size + 15 ) & ~15 ) - saveds		1679390	1		-			
ANR	1679794	BitAndExpression	( SLJIT_LOCALS_OFFSET + saveds + local_size + 15 ) & ~15		1679390	0		&			
ANR	1679795	AdditiveExpression	SLJIT_LOCALS_OFFSET + saveds + local_size + 15		1679390	0		+			
ANR	1679796	Identifier	SLJIT_LOCALS_OFFSET		1679390	0					
ANR	1679797	AdditiveExpression	saveds + local_size + 15		1679390	1		+			
ANR	1679798	Identifier	saveds		1679390	0					
ANR	1679799	AdditiveExpression	local_size + 15		1679390	1		+			
ANR	1679800	Identifier	local_size		1679390	0					
ANR	1679801	PrimaryExpression	15		1679390	1					
ANR	1679802	Identifier	~15		1679390	1					
ANR	1679803	Identifier	saveds		1679390	1					
ANR	1679804	ExpressionStatement	compiler -> local_size = local_size	166:1:5568:5601	1679390	23	True				
ANR	1679805	AssignmentExpression	compiler -> local_size = local_size		1679390	0		=			
ANR	1679806	PtrMemberAccess	compiler -> local_size		1679390	0					
ANR	1679807	Identifier	compiler		1679390	0					
ANR	1679808	Identifier	local_size		1679390	1					
ANR	1679809	Identifier	local_size		1679390	1					
ANR	1679810	IfStatement	if ( local_size > 1024 )		1679390	24					
ANR	1679811	Condition	local_size > 1024	168:5:5622:5638	1679390	0	True				
ANR	1679812	RelationalExpression	local_size > 1024		1679390	0		>			
ANR	1679813	Identifier	local_size		1679390	0					
ANR	1679814	PrimaryExpression	1024		1679390	1					
ANR	1679815	CompoundStatement		100:24:3115:3115	1679390	1					
ANR	1679816	ExpressionStatement	"FAIL_IF ( emit_do_imm ( compiler , MOV_r_i32 + reg_map [ SLJIT_R0 ] , local_size ) )"	170:2:5706:5779	1679390	0	True				
ANR	1679817	CallExpression	"FAIL_IF ( emit_do_imm ( compiler , MOV_r_i32 + reg_map [ SLJIT_R0 ] , local_size ) )"		1679390	0					
ANR	1679818	Callee	FAIL_IF		1679390	0					
ANR	1679819	Identifier	FAIL_IF		1679390	0					
ANR	1679820	ArgumentList	"emit_do_imm ( compiler , MOV_r_i32 + reg_map [ SLJIT_R0 ] , local_size )"		1679390	1					
ANR	1679821	Argument	"emit_do_imm ( compiler , MOV_r_i32 + reg_map [ SLJIT_R0 ] , local_size )"		1679390	0					
ANR	1679822	CallExpression	"emit_do_imm ( compiler , MOV_r_i32 + reg_map [ SLJIT_R0 ] , local_size )"		1679390	0					
ANR	1679823	Callee	emit_do_imm		1679390	0					
ANR	1679824	Identifier	emit_do_imm		1679390	0					
ANR	1679825	ArgumentList	compiler		1679390	1					
ANR	1679826	Argument	compiler		1679390	0					
ANR	1679827	Identifier	compiler		1679390	0					
ANR	1679828	Argument	MOV_r_i32 + reg_map [ SLJIT_R0 ]		1679390	1					
ANR	1679829	AdditiveExpression	MOV_r_i32 + reg_map [ SLJIT_R0 ]		1679390	0		+			
ANR	1679830	Identifier	MOV_r_i32		1679390	0					
ANR	1679831	ArrayIndexing	reg_map [ SLJIT_R0 ]		1679390	1					
ANR	1679832	Identifier	reg_map		1679390	0					
ANR	1679833	Identifier	SLJIT_R0		1679390	1					
ANR	1679834	Argument	local_size		1679390	2					
ANR	1679835	Identifier	local_size		1679390	0					
ANR	1679836	ExpressionStatement	"FAIL_IF ( sljit_emit_ijump ( compiler , SLJIT_CALL1 , SLJIT_IMM , SLJIT_FUNC_OFFSET ( sljit_grow_stack ) ) )"	177:2:6051:6147	1679390	1	True				
ANR	1679837	CallExpression	"FAIL_IF ( sljit_emit_ijump ( compiler , SLJIT_CALL1 , SLJIT_IMM , SLJIT_FUNC_OFFSET ( sljit_grow_stack ) ) )"		1679390	0					
ANR	1679838	Callee	FAIL_IF		1679390	0					
ANR	1679839	Identifier	FAIL_IF		1679390	0					
ANR	1679840	ArgumentList	"sljit_emit_ijump ( compiler , SLJIT_CALL1 , SLJIT_IMM , SLJIT_FUNC_OFFSET ( sljit_grow_stack ) )"		1679390	1					
ANR	1679841	Argument	"sljit_emit_ijump ( compiler , SLJIT_CALL1 , SLJIT_IMM , SLJIT_FUNC_OFFSET ( sljit_grow_stack ) )"		1679390	0					
ANR	1679842	CallExpression	"sljit_emit_ijump ( compiler , SLJIT_CALL1 , SLJIT_IMM , SLJIT_FUNC_OFFSET ( sljit_grow_stack ) )"		1679390	0					
ANR	1679843	Callee	sljit_emit_ijump		1679390	0					
ANR	1679844	Identifier	sljit_emit_ijump		1679390	0					
ANR	1679845	ArgumentList	compiler		1679390	1					
ANR	1679846	Argument	compiler		1679390	0					
ANR	1679847	Identifier	compiler		1679390	0					
ANR	1679848	Argument	SLJIT_CALL1		1679390	1					
ANR	1679849	Identifier	SLJIT_CALL1		1679390	0					
ANR	1679850	Argument	SLJIT_IMM		1679390	2					
ANR	1679851	Identifier	SLJIT_IMM		1679390	0					
ANR	1679852	Argument	SLJIT_FUNC_OFFSET ( sljit_grow_stack )		1679390	3					
ANR	1679853	CallExpression	SLJIT_FUNC_OFFSET ( sljit_grow_stack )		1679390	0					
ANR	1679854	Callee	SLJIT_FUNC_OFFSET		1679390	0					
ANR	1679855	Identifier	SLJIT_FUNC_OFFSET		1679390	0					
ANR	1679856	ArgumentList	sljit_grow_stack		1679390	1					
ANR	1679857	Argument	sljit_grow_stack		1679390	0					
ANR	1679858	Identifier	sljit_grow_stack		1679390	0					
ANR	1679859	ExpressionStatement	SLJIT_ASSERT ( local_size > 0 )	181:1:6161:6189	1679390	25	True				
ANR	1679860	CallExpression	SLJIT_ASSERT ( local_size > 0 )		1679390	0					
ANR	1679861	Callee	SLJIT_ASSERT		1679390	0					
ANR	1679862	Identifier	SLJIT_ASSERT		1679390	0					
ANR	1679863	ArgumentList	local_size > 0		1679390	1					
ANR	1679864	Argument	local_size > 0		1679390	0					
ANR	1679865	RelationalExpression	local_size > 0		1679390	0		>			
ANR	1679866	Identifier	local_size		1679390	0					
ANR	1679867	PrimaryExpression	0		1679390	1					
ANR	1679868	ReturnStatement	"return emit_non_cum_binary ( compiler , SUB_r_rm , SUB_rm_r , SUB , SUB_EAX_i32 , SLJIT_SP , 0 , SLJIT_SP , 0 , SLJIT_IMM , local_size ) ;"	182:1:6192:6317	1679390	26	True				
ANR	1679869	CallExpression	"emit_non_cum_binary ( compiler , SUB_r_rm , SUB_rm_r , SUB , SUB_EAX_i32 , SLJIT_SP , 0 , SLJIT_SP , 0 , SLJIT_IMM , local_size )"		1679390	0					
ANR	1679870	Callee	emit_non_cum_binary		1679390	0					
ANR	1679871	Identifier	emit_non_cum_binary		1679390	0					
ANR	1679872	ArgumentList	compiler		1679390	1					
ANR	1679873	Argument	compiler		1679390	0					
ANR	1679874	Identifier	compiler		1679390	0					
ANR	1679875	Argument	SUB_r_rm		1679390	1					
ANR	1679876	Identifier	SUB_r_rm		1679390	0					
ANR	1679877	Argument	SUB_rm_r		1679390	2					
ANR	1679878	Identifier	SUB_rm_r		1679390	0					
ANR	1679879	Argument	SUB		1679390	3					
ANR	1679880	Identifier	SUB		1679390	0					
ANR	1679881	Argument	SUB_EAX_i32		1679390	4					
ANR	1679882	Identifier	SUB_EAX_i32		1679390	0					
ANR	1679883	Argument	SLJIT_SP		1679390	5					
ANR	1679884	Identifier	SLJIT_SP		1679390	0					
ANR	1679885	Argument	0		1679390	6					
ANR	1679886	PrimaryExpression	0		1679390	0					
ANR	1679887	Argument	SLJIT_SP		1679390	7					
ANR	1679888	Identifier	SLJIT_SP		1679390	0					
ANR	1679889	Argument	0		1679390	8					
ANR	1679890	PrimaryExpression	0		1679390	0					
ANR	1679891	Argument	SLJIT_IMM		1679390	9					
ANR	1679892	Identifier	SLJIT_IMM		1679390	0					
ANR	1679893	Argument	local_size		1679390	10					
ANR	1679894	Identifier	local_size		1679390	0					
ANR	1679895	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1679390	1					
ANR	1679896	Identifier	sljit_emit_enter		1679390	2					
ANR	1679897	ParameterList	"struct sljit_compiler * compiler , sljit_si options , sljit_si args , sljit_si scratches , sljit_si saveds , sljit_si fscratches , sljit_si fsaveds , sljit_si local_size"		1679390	3					
ANR	1679898	Parameter	struct sljit_compiler * compiler	66:51:2360:2390	1679390	0	True				
ANR	1679899	ParameterType	struct sljit_compiler *		1679390	0					
ANR	1679900	Identifier	compiler		1679390	1					
ANR	1679901	Parameter	sljit_si options	67:1:2394:2409	1679390	1	True				
ANR	1679902	ParameterType	sljit_si		1679390	0					
ANR	1679903	Identifier	options		1679390	1					
ANR	1679904	Parameter	sljit_si args	67:19:2412:2424	1679390	2	True				
ANR	1679905	ParameterType	sljit_si		1679390	0					
ANR	1679906	Identifier	args		1679390	1					
ANR	1679907	Parameter	sljit_si scratches	67:34:2427:2444	1679390	3	True				
ANR	1679908	ParameterType	sljit_si		1679390	0					
ANR	1679909	Identifier	scratches		1679390	1					
ANR	1679910	Parameter	sljit_si saveds	67:54:2447:2461	1679390	4	True				
ANR	1679911	ParameterType	sljit_si		1679390	0					
ANR	1679912	Identifier	saveds		1679390	1					
ANR	1679913	Parameter	sljit_si fscratches	68:1:2465:2483	1679390	5	True				
ANR	1679914	ParameterType	sljit_si		1679390	0					
ANR	1679915	Identifier	fscratches		1679390	1					
ANR	1679916	Parameter	sljit_si fsaveds	68:22:2486:2501	1679390	6	True				
ANR	1679917	ParameterType	sljit_si		1679390	0					
ANR	1679918	Identifier	fsaveds		1679390	1					
ANR	1679919	Parameter	sljit_si local_size	68:40:2504:2522	1679390	7	True				
ANR	1679920	ParameterType	sljit_si		1679390	0					
ANR	1679921	Identifier	local_size		1679390	1					
ANR	1679922	CFGEntryNode	ENTRY		1679390		True				
ANR	1679923	CFGExitNode	EXIT		1679390		True				
ANR	1679924	Symbol	TMP_REG1		1679390						
ANR	1679925	Symbol	sljit_grow_stack		1679390						
ANR	1679926	Symbol	saveds		1679390						
ANR	1679927	Symbol	compiler -> flags_saved		1679390						
ANR	1679928	Symbol	* inst ++		1679390						
ANR	1679929	Symbol	reg_map		1679390						
ANR	1679930	Symbol	check_sljit_emit_enter		1679390						
ANR	1679931	Symbol	* compiler		1679390						
ANR	1679932	Symbol	SLJIT_R1		1679390						
ANR	1679933	Symbol	SLJIT_R2		1679390						
ANR	1679934	Symbol	MOD_DISP8		1679390						
ANR	1679935	Symbol	SLJIT_R0		1679390						
ANR	1679936	Symbol	* SLJIT_R1		1679390						
ANR	1679937	Symbol	* SLJIT_R2		1679390						
ANR	1679938	Symbol	SLJIT_IMM		1679390						
ANR	1679939	Symbol	SLJIT_LOCALS_OFFSET		1679390						
ANR	1679940	Symbol	options		1679390						
ANR	1679941	Symbol	* TMP_REG1		1679390						
ANR	1679942	Symbol	compiler -> args		1679390						
ANR	1679943	Symbol	* SLJIT_R0		1679390						
ANR	1679944	Symbol	SUB		1679390						
ANR	1679945	Symbol	~15		1679390						
ANR	1679946	Symbol	emit_non_cum_binary		1679390						
ANR	1679947	Symbol	* reg_map		1679390						
ANR	1679948	Symbol	SLJIT_S2		1679390						
ANR	1679949	Symbol	SLJIT_S0		1679390						
ANR	1679950	Symbol	SUB_rm_r		1679390						
ANR	1679951	Symbol	SLJIT_S1		1679390						
ANR	1679952	Symbol	fscratches		1679390						
ANR	1679953	Symbol	compiler -> local_size		1679390						
ANR	1679954	Symbol	fsaveds		1679390						
ANR	1679955	Symbol	size		1679390						
ANR	1679956	Symbol	scratches		1679390						
ANR	1679957	Symbol	sljit_emit_ijump		1679390						
ANR	1679958	Symbol	MOV_r_i32		1679390						
ANR	1679959	Symbol	SLJIT_SP		1679390						
ANR	1679960	Symbol	require_at_least_two_words		1679390						
ANR	1679961	Symbol	SLJIT_FUNC_OFFSET		1679390						
ANR	1679962	Symbol	compiler		1679390						
ANR	1679963	Symbol	SUB_EAX_i32		1679390						
ANR	1679964	Symbol	local_size		1679390						
ANR	1679965	Symbol	MOV_r_rm		1679390						
ANR	1679966	Symbol	SUB_r_rm		1679390						
ANR	1679967	Symbol	MOD_REG		1679390						
ANR	1679968	Symbol	args		1679390						
ANR	1679969	Symbol	* SLJIT_S2		1679390						
ANR	1679970	Symbol	emit_do_imm		1679390						
ANR	1679971	Symbol	inst		1679390						
ANR	1679972	Symbol	ensure_buf		1679390						
ANR	1679973	Symbol	SLJIT_CALL1		1679390						
ANR	1679974	Symbol	* SLJIT_S0		1679390						
ANR	1679975	Symbol	* SLJIT_S1		1679390						
ANR	1679976	Function	sljit_set_context	186:0:6322:7230							
ANR	1679977	FunctionDef	"sljit_set_context (struct sljit_compiler * compiler , sljit_si options , sljit_si args , sljit_si scratches , sljit_si saveds , sljit_si fscratches , sljit_si fsaveds , sljit_si local_size)"		1679976	0					
ANR	1679978	CompoundStatement		189:0:6539:7230	1679976	0					
ANR	1679979	ExpressionStatement	CHECK_ERROR ( )	190:1:6542:6555	1679976	0	True				
ANR	1679980	CallExpression	CHECK_ERROR ( )		1679976	0					
ANR	1679981	Callee	CHECK_ERROR		1679976	0					
ANR	1679982	Identifier	CHECK_ERROR		1679976	0					
ANR	1679983	ArgumentList			1679976	1					
ANR	1679984	ExpressionStatement	"CHECK ( check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size ) )"	191:1:6558:6665	1679976	1	True				
ANR	1679985	CallExpression	"CHECK ( check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size ) )"		1679976	0					
ANR	1679986	Callee	CHECK		1679976	0					
ANR	1679987	Identifier	CHECK		1679976	0					
ANR	1679988	ArgumentList	"check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1679976	1					
ANR	1679989	Argument	"check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1679976	0					
ANR	1679990	CallExpression	"check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1679976	0					
ANR	1679991	Callee	check_sljit_set_context		1679976	0					
ANR	1679992	Identifier	check_sljit_set_context		1679976	0					
ANR	1679993	ArgumentList	compiler		1679976	1					
ANR	1679994	Argument	compiler		1679976	0					
ANR	1679995	Identifier	compiler		1679976	0					
ANR	1679996	Argument	options		1679976	1					
ANR	1679997	Identifier	options		1679976	0					
ANR	1679998	Argument	args		1679976	2					
ANR	1679999	Identifier	args		1679976	0					
ANR	1680000	Argument	scratches		1679976	3					
ANR	1680001	Identifier	scratches		1679976	0					
ANR	1680002	Argument	saveds		1679976	4					
ANR	1680003	Identifier	saveds		1679976	0					
ANR	1680004	Argument	fscratches		1679976	5					
ANR	1680005	Identifier	fscratches		1679976	0					
ANR	1680006	Argument	fsaveds		1679976	6					
ANR	1680007	Identifier	fsaveds		1679976	0					
ANR	1680008	Argument	local_size		1679976	7					
ANR	1680009	Identifier	local_size		1679976	0					
ANR	1680010	ExpressionStatement	"set_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"	192:1:6668:6760	1679976	2	True				
ANR	1680011	CallExpression	"set_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1679976	0					
ANR	1680012	Callee	set_set_context		1679976	0					
ANR	1680013	Identifier	set_set_context		1679976	0					
ANR	1680014	ArgumentList	compiler		1679976	1					
ANR	1680015	Argument	compiler		1679976	0					
ANR	1680016	Identifier	compiler		1679976	0					
ANR	1680017	Argument	options		1679976	1					
ANR	1680018	Identifier	options		1679976	0					
ANR	1680019	Argument	args		1679976	2					
ANR	1680020	Identifier	args		1679976	0					
ANR	1680021	Argument	scratches		1679976	3					
ANR	1680022	Identifier	scratches		1679976	0					
ANR	1680023	Argument	saveds		1679976	4					
ANR	1680024	Identifier	saveds		1679976	0					
ANR	1680025	Argument	fscratches		1679976	5					
ANR	1680026	Identifier	fscratches		1679976	0					
ANR	1680027	Argument	fsaveds		1679976	6					
ANR	1680028	Identifier	fsaveds		1679976	0					
ANR	1680029	Argument	local_size		1679976	7					
ANR	1680030	Identifier	local_size		1679976	0					
ANR	1680031	ExpressionStatement	compiler -> args = args	194:1:6764:6785	1679976	3	True				
ANR	1680032	AssignmentExpression	compiler -> args = args		1679976	0		=			
ANR	1680033	PtrMemberAccess	compiler -> args		1679976	0					
ANR	1680034	Identifier	compiler		1679976	0					
ANR	1680035	Identifier	args		1679976	1					
ANR	1680036	Identifier	args		1679976	1					
ANR	1680037	ExpressionStatement	saveds = ( 2 + ( scratches > 7 ? ( scratches - 7 ) : 0 ) + ( saveds <= 3 ? saveds : 3 ) ) * sizeof ( sljit_uw )	197:1:6812:6912	1679976	4	True				
ANR	1680038	AssignmentExpression	saveds = ( 2 + ( scratches > 7 ? ( scratches - 7 ) : 0 ) + ( saveds <= 3 ? saveds : 3 ) ) * sizeof ( sljit_uw )		1679976	0		=			
ANR	1680039	Identifier	saveds		1679976	0					
ANR	1680040	MultiplicativeExpression	( 2 + ( scratches > 7 ? ( scratches - 7 ) : 0 ) + ( saveds <= 3 ? saveds : 3 ) ) * sizeof ( sljit_uw )		1679976	1		*			
ANR	1680041	AdditiveExpression	2 + ( scratches > 7 ? ( scratches - 7 ) : 0 ) + ( saveds <= 3 ? saveds : 3 )		1679976	0		+			
ANR	1680042	PrimaryExpression	2		1679976	0					
ANR	1680043	AdditiveExpression	( scratches > 7 ? ( scratches - 7 ) : 0 ) + ( saveds <= 3 ? saveds : 3 )		1679976	1		+			
ANR	1680044	ConditionalExpression	scratches > 7 ? ( scratches - 7 ) : 0		1679976	0					
ANR	1680045	Condition	scratches > 7		1679976	0					
ANR	1680046	RelationalExpression	scratches > 7		1679976	0		>			
ANR	1680047	Identifier	scratches		1679976	0					
ANR	1680048	PrimaryExpression	7		1679976	1					
ANR	1680049	AdditiveExpression	scratches - 7		1679976	1		-			
ANR	1680050	Identifier	scratches		1679976	0					
ANR	1680051	PrimaryExpression	7		1679976	1					
ANR	1680052	PrimaryExpression	0		1679976	2					
ANR	1680053	ConditionalExpression	saveds <= 3 ? saveds : 3		1679976	1					
ANR	1680054	Condition	saveds <= 3		1679976	0					
ANR	1680055	RelationalExpression	saveds <= 3		1679976	0		<=			
ANR	1680056	Identifier	saveds		1679976	0					
ANR	1680057	PrimaryExpression	3		1679976	1					
ANR	1680058	Identifier	saveds		1679976	1					
ANR	1680059	PrimaryExpression	3		1679976	2					
ANR	1680060	SizeofExpression	sizeof ( sljit_uw )		1679976	1					
ANR	1680061	Sizeof	sizeof		1679976	0					
ANR	1680062	SizeofOperand	sljit_uw		1679976	1					
ANR	1680063	ExpressionStatement	compiler -> local_size = ( ( SLJIT_LOCALS_OFFSET + saveds + local_size + 15 ) & ~15 ) - saveds	198:1:6915:7003	1679976	5	True				
ANR	1680064	AssignmentExpression	compiler -> local_size = ( ( SLJIT_LOCALS_OFFSET + saveds + local_size + 15 ) & ~15 ) - saveds		1679976	0		=			
ANR	1680065	PtrMemberAccess	compiler -> local_size		1679976	0					
ANR	1680066	Identifier	compiler		1679976	0					
ANR	1680067	Identifier	local_size		1679976	1					
ANR	1680068	AdditiveExpression	( ( SLJIT_LOCALS_OFFSET + saveds + local_size + 15 ) & ~15 ) - saveds		1679976	1		-			
ANR	1680069	BitAndExpression	( SLJIT_LOCALS_OFFSET + saveds + local_size + 15 ) & ~15		1679976	0		&			
ANR	1680070	AdditiveExpression	SLJIT_LOCALS_OFFSET + saveds + local_size + 15		1679976	0		+			
ANR	1680071	Identifier	SLJIT_LOCALS_OFFSET		1679976	0					
ANR	1680072	AdditiveExpression	saveds + local_size + 15		1679976	1		+			
ANR	1680073	Identifier	saveds		1679976	0					
ANR	1680074	AdditiveExpression	local_size + 15		1679976	1		+			
ANR	1680075	Identifier	local_size		1679976	0					
ANR	1680076	PrimaryExpression	15		1679976	1					
ANR	1680077	Identifier	~15		1679976	1					
ANR	1680078	Identifier	saveds		1679976	1					
ANR	1680079	ReturnStatement	return SLJIT_SUCCESS ;	205:1:7208:7228	1679976	6	True				
ANR	1680080	Identifier	SLJIT_SUCCESS		1679976	0					
ANR	1680081	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1679976	1					
ANR	1680082	Identifier	sljit_set_context		1679976	2					
ANR	1680083	ParameterList	"struct sljit_compiler * compiler , sljit_si options , sljit_si args , sljit_si scratches , sljit_si saveds , sljit_si fscratches , sljit_si fsaveds , sljit_si local_size"		1679976	3					
ANR	1680084	Parameter	struct sljit_compiler * compiler	186:52:6374:6404	1679976	0	True				
ANR	1680085	ParameterType	struct sljit_compiler *		1679976	0					
ANR	1680086	Identifier	compiler		1679976	1					
ANR	1680087	Parameter	sljit_si options	187:1:6408:6423	1679976	1	True				
ANR	1680088	ParameterType	sljit_si		1679976	0					
ANR	1680089	Identifier	options		1679976	1					
ANR	1680090	Parameter	sljit_si args	187:19:6426:6438	1679976	2	True				
ANR	1680091	ParameterType	sljit_si		1679976	0					
ANR	1680092	Identifier	args		1679976	1					
ANR	1680093	Parameter	sljit_si scratches	187:34:6441:6458	1679976	3	True				
ANR	1680094	ParameterType	sljit_si		1679976	0					
ANR	1680095	Identifier	scratches		1679976	1					
ANR	1680096	Parameter	sljit_si saveds	187:54:6461:6475	1679976	4	True				
ANR	1680097	ParameterType	sljit_si		1679976	0					
ANR	1680098	Identifier	saveds		1679976	1					
ANR	1680099	Parameter	sljit_si fscratches	188:1:6479:6497	1679976	5	True				
ANR	1680100	ParameterType	sljit_si		1679976	0					
ANR	1680101	Identifier	fscratches		1679976	1					
ANR	1680102	Parameter	sljit_si fsaveds	188:22:6500:6515	1679976	6	True				
ANR	1680103	ParameterType	sljit_si		1679976	0					
ANR	1680104	Identifier	fsaveds		1679976	1					
ANR	1680105	Parameter	sljit_si local_size	188:40:6518:6536	1679976	7	True				
ANR	1680106	ParameterType	sljit_si		1679976	0					
ANR	1680107	Identifier	local_size		1679976	1					
ANR	1680108	CFGEntryNode	ENTRY		1679976		True				
ANR	1680109	CFGExitNode	EXIT		1679976		True				
ANR	1680110	Symbol	local_size		1679976						
ANR	1680111	Symbol	~15		1679976						
ANR	1680112	Symbol	scratches		1679976						
ANR	1680113	Symbol	saveds		1679976						
ANR	1680114	Symbol	check_sljit_set_context		1679976						
ANR	1680115	Symbol	SLJIT_SUCCESS		1679976						
ANR	1680116	Symbol	* compiler		1679976						
ANR	1680117	Symbol	args		1679976						
ANR	1680118	Symbol	fscratches		1679976						
ANR	1680119	Symbol	compiler -> local_size		1679976						
ANR	1680120	Symbol	fsaveds		1679976						
ANR	1680121	Symbol	SLJIT_LOCALS_OFFSET		1679976						
ANR	1680122	Symbol	options		1679976						
ANR	1680123	Symbol	compiler		1679976						
ANR	1680124	Symbol	compiler -> args		1679976						
ANR	1680125	Function	sljit_emit_return	208:0:7233:8875							
ANR	1680126	FunctionDef	"sljit_emit_return (struct sljit_compiler * compiler , sljit_si op , sljit_si src , sljit_sw srcw)"		1680125	0					
ANR	1680127	CompoundStatement		209:0:7360:8875	1680125	0					
ANR	1680128	IdentifierDeclStatement	sljit_si size ;	210:1:7363:7376	1680125	0	True				
ANR	1680129	IdentifierDecl	size		1680125	0					
ANR	1680130	IdentifierDeclType	sljit_si		1680125	0					
ANR	1680131	Identifier	size		1680125	1					
ANR	1680132	IdentifierDeclStatement	sljit_ub * inst ;	211:1:7379:7393	1680125	1	True				
ANR	1680133	IdentifierDecl	* inst		1680125	0					
ANR	1680134	IdentifierDeclType	sljit_ub *		1680125	0					
ANR	1680135	Identifier	inst		1680125	1					
ANR	1680136	ExpressionStatement	CHECK_ERROR ( )	213:1:7397:7410	1680125	2	True				
ANR	1680137	CallExpression	CHECK_ERROR ( )		1680125	0					
ANR	1680138	Callee	CHECK_ERROR		1680125	0					
ANR	1680139	Identifier	CHECK_ERROR		1680125	0					
ANR	1680140	ArgumentList			1680125	1					
ANR	1680141	ExpressionStatement	"CHECK ( check_sljit_emit_return ( compiler , op , src , srcw ) )"	214:1:7413:7468	1680125	3	True				
ANR	1680142	CallExpression	"CHECK ( check_sljit_emit_return ( compiler , op , src , srcw ) )"		1680125	0					
ANR	1680143	Callee	CHECK		1680125	0					
ANR	1680144	Identifier	CHECK		1680125	0					
ANR	1680145	ArgumentList	"check_sljit_emit_return ( compiler , op , src , srcw )"		1680125	1					
ANR	1680146	Argument	"check_sljit_emit_return ( compiler , op , src , srcw )"		1680125	0					
ANR	1680147	CallExpression	"check_sljit_emit_return ( compiler , op , src , srcw )"		1680125	0					
ANR	1680148	Callee	check_sljit_emit_return		1680125	0					
ANR	1680149	Identifier	check_sljit_emit_return		1680125	0					
ANR	1680150	ArgumentList	compiler		1680125	1					
ANR	1680151	Argument	compiler		1680125	0					
ANR	1680152	Identifier	compiler		1680125	0					
ANR	1680153	Argument	op		1680125	1					
ANR	1680154	Identifier	op		1680125	0					
ANR	1680155	Argument	src		1680125	2					
ANR	1680156	Identifier	src		1680125	0					
ANR	1680157	Argument	srcw		1680125	3					
ANR	1680158	Identifier	srcw		1680125	0					
ANR	1680159	ExpressionStatement	SLJIT_ASSERT ( compiler -> args >= 0 )	215:1:7471:7504	1680125	4	True				
ANR	1680160	CallExpression	SLJIT_ASSERT ( compiler -> args >= 0 )		1680125	0					
ANR	1680161	Callee	SLJIT_ASSERT		1680125	0					
ANR	1680162	Identifier	SLJIT_ASSERT		1680125	0					
ANR	1680163	ArgumentList	compiler -> args >= 0		1680125	1					
ANR	1680164	Argument	compiler -> args >= 0		1680125	0					
ANR	1680165	RelationalExpression	compiler -> args >= 0		1680125	0		>=			
ANR	1680166	PtrMemberAccess	compiler -> args		1680125	0					
ANR	1680167	Identifier	compiler		1680125	0					
ANR	1680168	Identifier	args		1680125	1					
ANR	1680169	PrimaryExpression	0		1680125	1					
ANR	1680170	ExpressionStatement	compiler -> flags_saved = 0	217:1:7508:7533	1680125	5	True				
ANR	1680171	AssignmentExpression	compiler -> flags_saved = 0		1680125	0		=			
ANR	1680172	PtrMemberAccess	compiler -> flags_saved		1680125	0					
ANR	1680173	Identifier	compiler		1680125	0					
ANR	1680174	Identifier	flags_saved		1680125	1					
ANR	1680175	PrimaryExpression	0		1680125	1					
ANR	1680176	ExpressionStatement	"FAIL_IF ( emit_mov_before_return ( compiler , op , src , srcw ) )"	218:1:7536:7592	1680125	6	True				
ANR	1680177	CallExpression	"FAIL_IF ( emit_mov_before_return ( compiler , op , src , srcw ) )"		1680125	0					
ANR	1680178	Callee	FAIL_IF		1680125	0					
ANR	1680179	Identifier	FAIL_IF		1680125	0					
ANR	1680180	ArgumentList	"emit_mov_before_return ( compiler , op , src , srcw )"		1680125	1					
ANR	1680181	Argument	"emit_mov_before_return ( compiler , op , src , srcw )"		1680125	0					
ANR	1680182	CallExpression	"emit_mov_before_return ( compiler , op , src , srcw )"		1680125	0					
ANR	1680183	Callee	emit_mov_before_return		1680125	0					
ANR	1680184	Identifier	emit_mov_before_return		1680125	0					
ANR	1680185	ArgumentList	compiler		1680125	1					
ANR	1680186	Argument	compiler		1680125	0					
ANR	1680187	Identifier	compiler		1680125	0					
ANR	1680188	Argument	op		1680125	1					
ANR	1680189	Identifier	op		1680125	0					
ANR	1680190	Argument	src		1680125	2					
ANR	1680191	Identifier	src		1680125	0					
ANR	1680192	Argument	srcw		1680125	3					
ANR	1680193	Identifier	srcw		1680125	0					
ANR	1680194	ExpressionStatement	SLJIT_ASSERT ( compiler -> local_size > 0 )	220:1:7596:7634	1680125	7	True				
ANR	1680195	CallExpression	SLJIT_ASSERT ( compiler -> local_size > 0 )		1680125	0					
ANR	1680196	Callee	SLJIT_ASSERT		1680125	0					
ANR	1680197	Identifier	SLJIT_ASSERT		1680125	0					
ANR	1680198	ArgumentList	compiler -> local_size > 0		1680125	1					
ANR	1680199	Argument	compiler -> local_size > 0		1680125	0					
ANR	1680200	RelationalExpression	compiler -> local_size > 0		1680125	0		>			
ANR	1680201	PtrMemberAccess	compiler -> local_size		1680125	0					
ANR	1680202	Identifier	compiler		1680125	0					
ANR	1680203	Identifier	local_size		1680125	1					
ANR	1680204	PrimaryExpression	0		1680125	1					
ANR	1680205	ExpressionStatement	"FAIL_IF ( emit_cum_binary ( compiler , ADD_r_rm , ADD_rm_r , ADD , ADD_EAX_i32 , SLJIT_SP , 0 , SLJIT_SP , 0 , SLJIT_IMM , compiler -> local_size ) )"	221:1:7637:7770	1680125	8	True				
ANR	1680206	CallExpression	"FAIL_IF ( emit_cum_binary ( compiler , ADD_r_rm , ADD_rm_r , ADD , ADD_EAX_i32 , SLJIT_SP , 0 , SLJIT_SP , 0 , SLJIT_IMM , compiler -> local_size ) )"		1680125	0					
ANR	1680207	Callee	FAIL_IF		1680125	0					
ANR	1680208	Identifier	FAIL_IF		1680125	0					
ANR	1680209	ArgumentList	"emit_cum_binary ( compiler , ADD_r_rm , ADD_rm_r , ADD , ADD_EAX_i32 , SLJIT_SP , 0 , SLJIT_SP , 0 , SLJIT_IMM , compiler -> local_size )"		1680125	1					
ANR	1680210	Argument	"emit_cum_binary ( compiler , ADD_r_rm , ADD_rm_r , ADD , ADD_EAX_i32 , SLJIT_SP , 0 , SLJIT_SP , 0 , SLJIT_IMM , compiler -> local_size )"		1680125	0					
ANR	1680211	CallExpression	"emit_cum_binary ( compiler , ADD_r_rm , ADD_rm_r , ADD , ADD_EAX_i32 , SLJIT_SP , 0 , SLJIT_SP , 0 , SLJIT_IMM , compiler -> local_size )"		1680125	0					
ANR	1680212	Callee	emit_cum_binary		1680125	0					
ANR	1680213	Identifier	emit_cum_binary		1680125	0					
ANR	1680214	ArgumentList	compiler		1680125	1					
ANR	1680215	Argument	compiler		1680125	0					
ANR	1680216	Identifier	compiler		1680125	0					
ANR	1680217	Argument	ADD_r_rm		1680125	1					
ANR	1680218	Identifier	ADD_r_rm		1680125	0					
ANR	1680219	Argument	ADD_rm_r		1680125	2					
ANR	1680220	Identifier	ADD_rm_r		1680125	0					
ANR	1680221	Argument	ADD		1680125	3					
ANR	1680222	Identifier	ADD		1680125	0					
ANR	1680223	Argument	ADD_EAX_i32		1680125	4					
ANR	1680224	Identifier	ADD_EAX_i32		1680125	0					
ANR	1680225	Argument	SLJIT_SP		1680125	5					
ANR	1680226	Identifier	SLJIT_SP		1680125	0					
ANR	1680227	Argument	0		1680125	6					
ANR	1680228	PrimaryExpression	0		1680125	0					
ANR	1680229	Argument	SLJIT_SP		1680125	7					
ANR	1680230	Identifier	SLJIT_SP		1680125	0					
ANR	1680231	Argument	0		1680125	8					
ANR	1680232	PrimaryExpression	0		1680125	0					
ANR	1680233	Argument	SLJIT_IMM		1680125	9					
ANR	1680234	Identifier	SLJIT_IMM		1680125	0					
ANR	1680235	Argument	compiler -> local_size		1680125	10					
ANR	1680236	PtrMemberAccess	compiler -> local_size		1680125	0					
ANR	1680237	Identifier	compiler		1680125	0					
ANR	1680238	Identifier	local_size		1680125	1					
ANR	1680239	IfStatement	if ( compiler -> options & SLJIT_DOUBLE_ALIGNMENT )		1680125	9					
ANR	1680240	Condition	compiler -> options & SLJIT_DOUBLE_ALIGNMENT	225:5:7802:7843	1680125	0	True				
ANR	1680241	BitAndExpression	compiler -> options & SLJIT_DOUBLE_ALIGNMENT		1680125	0		&			
ANR	1680242	PtrMemberAccess	compiler -> options		1680125	0					
ANR	1680243	Identifier	compiler		1680125	0					
ANR	1680244	Identifier	options		1680125	1					
ANR	1680245	Identifier	SLJIT_DOUBLE_ALIGNMENT		1680125	1					
ANR	1680246	CompoundStatement		17:49:485:485	1680125	1					
ANR	1680247	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 3 )"	226:2:7850:7895	1680125	0	True				
ANR	1680248	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 3 )"		1680125	0		=			
ANR	1680249	Identifier	inst		1680125	0					
ANR	1680250	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 3 )"		1680125	1					
ANR	1680251	CastTarget	sljit_ub *		1680125	0					
ANR	1680252	CallExpression	"ensure_buf ( compiler , 1 + 3 )"		1680125	1					
ANR	1680253	Callee	ensure_buf		1680125	0					
ANR	1680254	Identifier	ensure_buf		1680125	0					
ANR	1680255	ArgumentList	compiler		1680125	1					
ANR	1680256	Argument	compiler		1680125	0					
ANR	1680257	Identifier	compiler		1680125	0					
ANR	1680258	Argument	1 + 3		1680125	1					
ANR	1680259	AdditiveExpression	1 + 3		1680125	0		+			
ANR	1680260	PrimaryExpression	1		1680125	0					
ANR	1680261	PrimaryExpression	3		1680125	1					
ANR	1680262	ExpressionStatement	FAIL_IF ( ! inst )	227:2:7899:7913	1680125	1	True				
ANR	1680263	CallExpression	FAIL_IF ( ! inst )		1680125	0					
ANR	1680264	Callee	FAIL_IF		1680125	0					
ANR	1680265	Identifier	FAIL_IF		1680125	0					
ANR	1680266	ArgumentList	! inst		1680125	1					
ANR	1680267	Argument	! inst		1680125	0					
ANR	1680268	UnaryOperationExpression	! inst		1680125	0					
ANR	1680269	UnaryOperator	!		1680125	0					
ANR	1680270	Identifier	inst		1680125	1					
ANR	1680271	ExpressionStatement	INC_SIZE ( 3 )	229:2:7918:7929	1680125	2	True				
ANR	1680272	CallExpression	INC_SIZE ( 3 )		1680125	0					
ANR	1680273	Callee	INC_SIZE		1680125	0					
ANR	1680274	Identifier	INC_SIZE		1680125	0					
ANR	1680275	ArgumentList	3		1680125	1					
ANR	1680276	Argument	3		1680125	0					
ANR	1680277	PrimaryExpression	3		1680125	0					
ANR	1680278	ExpressionStatement	inst [ 0 ] = MOV_r_rm	230:2:7933:7951	1680125	3	True				
ANR	1680279	AssignmentExpression	inst [ 0 ] = MOV_r_rm		1680125	0		=			
ANR	1680280	ArrayIndexing	inst [ 0 ]		1680125	0					
ANR	1680281	Identifier	inst		1680125	0					
ANR	1680282	PrimaryExpression	0		1680125	1					
ANR	1680283	Identifier	MOV_r_rm		1680125	1					
ANR	1680284	ExpressionStatement	inst [ 1 ] = ( reg_map [ SLJIT_SP ] << 3 ) | 0x4	231:2:7955:8005	1680125	4	True				
ANR	1680285	AssignmentExpression	inst [ 1 ] = ( reg_map [ SLJIT_SP ] << 3 ) | 0x4		1680125	0		=			
ANR	1680286	ArrayIndexing	inst [ 1 ]		1680125	0					
ANR	1680287	Identifier	inst		1680125	0					
ANR	1680288	PrimaryExpression	1		1680125	1					
ANR	1680289	InclusiveOrExpression	( reg_map [ SLJIT_SP ] << 3 ) | 0x4		1680125	1		|			
ANR	1680290	ShiftExpression	reg_map [ SLJIT_SP ] << 3		1680125	0		<<			
ANR	1680291	ArrayIndexing	reg_map [ SLJIT_SP ]		1680125	0					
ANR	1680292	Identifier	reg_map		1680125	0					
ANR	1680293	Identifier	SLJIT_SP		1680125	1					
ANR	1680294	PrimaryExpression	3		1680125	1					
ANR	1680295	PrimaryExpression	0x4		1680125	1					
ANR	1680296	ExpressionStatement	inst [ 2 ] = ( 4 << 3 ) | reg_map [ SLJIT_SP ]	232:2:8009:8047	1680125	5	True				
ANR	1680297	AssignmentExpression	inst [ 2 ] = ( 4 << 3 ) | reg_map [ SLJIT_SP ]		1680125	0		=			
ANR	1680298	ArrayIndexing	inst [ 2 ]		1680125	0					
ANR	1680299	Identifier	inst		1680125	0					
ANR	1680300	PrimaryExpression	2		1680125	1					
ANR	1680301	InclusiveOrExpression	( 4 << 3 ) | reg_map [ SLJIT_SP ]		1680125	1		|			
ANR	1680302	ShiftExpression	4 << 3		1680125	0		<<			
ANR	1680303	PrimaryExpression	4		1680125	0					
ANR	1680304	PrimaryExpression	3		1680125	1					
ANR	1680305	ArrayIndexing	reg_map [ SLJIT_SP ]		1680125	1					
ANR	1680306	Identifier	reg_map		1680125	0					
ANR	1680307	Identifier	SLJIT_SP		1680125	1					
ANR	1680308	ExpressionStatement	size = 2 + ( compiler -> scratches > 7 ? ( compiler -> scratches - 7 ) : 0 ) + ( compiler -> saveds <= 3 ? compiler -> saveds : 3 )	236:1:8061:8180	1680125	10	True				
ANR	1680309	AssignmentExpression	size = 2 + ( compiler -> scratches > 7 ? ( compiler -> scratches - 7 ) : 0 ) + ( compiler -> saveds <= 3 ? compiler -> saveds : 3 )		1680125	0		=			
ANR	1680310	Identifier	size		1680125	0					
ANR	1680311	AdditiveExpression	2 + ( compiler -> scratches > 7 ? ( compiler -> scratches - 7 ) : 0 ) + ( compiler -> saveds <= 3 ? compiler -> saveds : 3 )		1680125	1		+			
ANR	1680312	PrimaryExpression	2		1680125	0					
ANR	1680313	AdditiveExpression	( compiler -> scratches > 7 ? ( compiler -> scratches - 7 ) : 0 ) + ( compiler -> saveds <= 3 ? compiler -> saveds : 3 )		1680125	1		+			
ANR	1680314	ConditionalExpression	compiler -> scratches > 7 ? ( compiler -> scratches - 7 ) : 0		1680125	0					
ANR	1680315	Condition	compiler -> scratches > 7		1680125	0					
ANR	1680316	RelationalExpression	compiler -> scratches > 7		1680125	0		>			
ANR	1680317	PtrMemberAccess	compiler -> scratches		1680125	0					
ANR	1680318	Identifier	compiler		1680125	0					
ANR	1680319	Identifier	scratches		1680125	1					
ANR	1680320	PrimaryExpression	7		1680125	1					
ANR	1680321	AdditiveExpression	compiler -> scratches - 7		1680125	1		-			
ANR	1680322	PtrMemberAccess	compiler -> scratches		1680125	0					
ANR	1680323	Identifier	compiler		1680125	0					
ANR	1680324	Identifier	scratches		1680125	1					
ANR	1680325	PrimaryExpression	7		1680125	1					
ANR	1680326	PrimaryExpression	0		1680125	2					
ANR	1680327	ConditionalExpression	compiler -> saveds <= 3 ? compiler -> saveds : 3		1680125	1					
ANR	1680328	Condition	compiler -> saveds <= 3		1680125	0					
ANR	1680329	RelationalExpression	compiler -> saveds <= 3		1680125	0		<=			
ANR	1680330	PtrMemberAccess	compiler -> saveds		1680125	0					
ANR	1680331	Identifier	compiler		1680125	0					
ANR	1680332	Identifier	saveds		1680125	1					
ANR	1680333	PrimaryExpression	3		1680125	1					
ANR	1680334	PtrMemberAccess	compiler -> saveds		1680125	1					
ANR	1680335	Identifier	compiler		1680125	0					
ANR	1680336	Identifier	saveds		1680125	1					
ANR	1680337	PrimaryExpression	3		1680125	2					
ANR	1680338	IfStatement	if ( compiler -> args > 2 )		1680125	11					
ANR	1680339	Condition	compiler -> args > 2	239:5:8248:8265	1680125	0	True				
ANR	1680340	RelationalExpression	compiler -> args > 2		1680125	0		>			
ANR	1680341	PtrMemberAccess	compiler -> args		1680125	0					
ANR	1680342	Identifier	compiler		1680125	0					
ANR	1680343	Identifier	args		1680125	1					
ANR	1680344	PrimaryExpression	2		1680125	1					
ANR	1680345	ExpressionStatement	size += 2	240:2:8270:8279	1680125	1	True				
ANR	1680346	AssignmentExpression	size += 2		1680125	0		+=			
ANR	1680347	Identifier	size		1680125	0					
ANR	1680348	PrimaryExpression	2		1680125	1					
ANR	1680349	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"	245:1:8333:8381	1680125	12	True				
ANR	1680350	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1680125	0		=			
ANR	1680351	Identifier	inst		1680125	0					
ANR	1680352	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1680125	1					
ANR	1680353	CastTarget	sljit_ub *		1680125	0					
ANR	1680354	CallExpression	"ensure_buf ( compiler , 1 + size )"		1680125	1					
ANR	1680355	Callee	ensure_buf		1680125	0					
ANR	1680356	Identifier	ensure_buf		1680125	0					
ANR	1680357	ArgumentList	compiler		1680125	1					
ANR	1680358	Argument	compiler		1680125	0					
ANR	1680359	Identifier	compiler		1680125	0					
ANR	1680360	Argument	1 + size		1680125	1					
ANR	1680361	AdditiveExpression	1 + size		1680125	0		+			
ANR	1680362	PrimaryExpression	1		1680125	0					
ANR	1680363	Identifier	size		1680125	1					
ANR	1680364	ExpressionStatement	FAIL_IF ( ! inst )	246:1:8384:8398	1680125	13	True				
ANR	1680365	CallExpression	FAIL_IF ( ! inst )		1680125	0					
ANR	1680366	Callee	FAIL_IF		1680125	0					
ANR	1680367	Identifier	FAIL_IF		1680125	0					
ANR	1680368	ArgumentList	! inst		1680125	1					
ANR	1680369	Argument	! inst		1680125	0					
ANR	1680370	UnaryOperationExpression	! inst		1680125	0					
ANR	1680371	UnaryOperator	!		1680125	0					
ANR	1680372	Identifier	inst		1680125	1					
ANR	1680373	ExpressionStatement	INC_SIZE ( size )	248:1:8402:8416	1680125	14	True				
ANR	1680374	CallExpression	INC_SIZE ( size )		1680125	0					
ANR	1680375	Callee	INC_SIZE		1680125	0					
ANR	1680376	Identifier	INC_SIZE		1680125	0					
ANR	1680377	ArgumentList	size		1680125	1					
ANR	1680378	Argument	size		1680125	0					
ANR	1680379	Identifier	size		1680125	0					
ANR	1680380	IfStatement	if ( compiler -> saveds > 0 || compiler -> scratches > 9 )		1680125	15					
ANR	1680381	Condition	compiler -> saveds > 0 || compiler -> scratches > 9	250:5:8424:8470	1680125	0	True				
ANR	1680382	OrExpression	compiler -> saveds > 0 || compiler -> scratches > 9		1680125	0		||			
ANR	1680383	RelationalExpression	compiler -> saveds > 0		1680125	0		>			
ANR	1680384	PtrMemberAccess	compiler -> saveds		1680125	0					
ANR	1680385	Identifier	compiler		1680125	0					
ANR	1680386	Identifier	saveds		1680125	1					
ANR	1680387	PrimaryExpression	0		1680125	1					
ANR	1680388	RelationalExpression	compiler -> scratches > 9		1680125	1		>			
ANR	1680389	PtrMemberAccess	compiler -> scratches		1680125	0					
ANR	1680390	Identifier	compiler		1680125	0					
ANR	1680391	Identifier	scratches		1680125	1					
ANR	1680392	PrimaryExpression	9		1680125	1					
ANR	1680393	ExpressionStatement	POP_REG ( reg_map [ SLJIT_S0 ] )	251:2:8475:8501	1680125	1	True				
ANR	1680394	CallExpression	POP_REG ( reg_map [ SLJIT_S0 ] )		1680125	0					
ANR	1680395	Callee	POP_REG		1680125	0					
ANR	1680396	Identifier	POP_REG		1680125	0					
ANR	1680397	ArgumentList	reg_map [ SLJIT_S0 ]		1680125	1					
ANR	1680398	Argument	reg_map [ SLJIT_S0 ]		1680125	0					
ANR	1680399	ArrayIndexing	reg_map [ SLJIT_S0 ]		1680125	0					
ANR	1680400	Identifier	reg_map		1680125	0					
ANR	1680401	Identifier	SLJIT_S0		1680125	1					
ANR	1680402	IfStatement	if ( compiler -> saveds > 1 || compiler -> scratches > 8 )		1680125	16					
ANR	1680403	Condition	compiler -> saveds > 1 || compiler -> scratches > 8	252:5:8508:8554	1680125	0	True				
ANR	1680404	OrExpression	compiler -> saveds > 1 || compiler -> scratches > 8		1680125	0		||			
ANR	1680405	RelationalExpression	compiler -> saveds > 1		1680125	0		>			
ANR	1680406	PtrMemberAccess	compiler -> saveds		1680125	0					
ANR	1680407	Identifier	compiler		1680125	0					
ANR	1680408	Identifier	saveds		1680125	1					
ANR	1680409	PrimaryExpression	1		1680125	1					
ANR	1680410	RelationalExpression	compiler -> scratches > 8		1680125	1		>			
ANR	1680411	PtrMemberAccess	compiler -> scratches		1680125	0					
ANR	1680412	Identifier	compiler		1680125	0					
ANR	1680413	Identifier	scratches		1680125	1					
ANR	1680414	PrimaryExpression	8		1680125	1					
ANR	1680415	ExpressionStatement	POP_REG ( reg_map [ SLJIT_S1 ] )	253:2:8559:8585	1680125	1	True				
ANR	1680416	CallExpression	POP_REG ( reg_map [ SLJIT_S1 ] )		1680125	0					
ANR	1680417	Callee	POP_REG		1680125	0					
ANR	1680418	Identifier	POP_REG		1680125	0					
ANR	1680419	ArgumentList	reg_map [ SLJIT_S1 ]		1680125	1					
ANR	1680420	Argument	reg_map [ SLJIT_S1 ]		1680125	0					
ANR	1680421	ArrayIndexing	reg_map [ SLJIT_S1 ]		1680125	0					
ANR	1680422	Identifier	reg_map		1680125	0					
ANR	1680423	Identifier	SLJIT_S1		1680125	1					
ANR	1680424	IfStatement	if ( compiler -> saveds > 2 || compiler -> scratches > 7 )		1680125	17					
ANR	1680425	Condition	compiler -> saveds > 2 || compiler -> scratches > 7	254:5:8592:8638	1680125	0	True				
ANR	1680426	OrExpression	compiler -> saveds > 2 || compiler -> scratches > 7		1680125	0		||			
ANR	1680427	RelationalExpression	compiler -> saveds > 2		1680125	0		>			
ANR	1680428	PtrMemberAccess	compiler -> saveds		1680125	0					
ANR	1680429	Identifier	compiler		1680125	0					
ANR	1680430	Identifier	saveds		1680125	1					
ANR	1680431	PrimaryExpression	2		1680125	1					
ANR	1680432	RelationalExpression	compiler -> scratches > 7		1680125	1		>			
ANR	1680433	PtrMemberAccess	compiler -> scratches		1680125	0					
ANR	1680434	Identifier	compiler		1680125	0					
ANR	1680435	Identifier	scratches		1680125	1					
ANR	1680436	PrimaryExpression	7		1680125	1					
ANR	1680437	ExpressionStatement	POP_REG ( reg_map [ SLJIT_S2 ] )	255:2:8643:8669	1680125	1	True				
ANR	1680438	CallExpression	POP_REG ( reg_map [ SLJIT_S2 ] )		1680125	0					
ANR	1680439	Callee	POP_REG		1680125	0					
ANR	1680440	Identifier	POP_REG		1680125	0					
ANR	1680441	ArgumentList	reg_map [ SLJIT_S2 ]		1680125	1					
ANR	1680442	Argument	reg_map [ SLJIT_S2 ]		1680125	0					
ANR	1680443	ArrayIndexing	reg_map [ SLJIT_S2 ]		1680125	0					
ANR	1680444	Identifier	reg_map		1680125	0					
ANR	1680445	Identifier	SLJIT_S2		1680125	1					
ANR	1680446	ExpressionStatement	POP_REG ( reg_map [ TMP_REG1 ] )	256:1:8672:8698	1680125	18	True				
ANR	1680447	CallExpression	POP_REG ( reg_map [ TMP_REG1 ] )		1680125	0					
ANR	1680448	Callee	POP_REG		1680125	0					
ANR	1680449	Identifier	POP_REG		1680125	0					
ANR	1680450	ArgumentList	reg_map [ TMP_REG1 ]		1680125	1					
ANR	1680451	Argument	reg_map [ TMP_REG1 ]		1680125	0					
ANR	1680452	ArrayIndexing	reg_map [ TMP_REG1 ]		1680125	0					
ANR	1680453	Identifier	reg_map		1680125	0					
ANR	1680454	Identifier	TMP_REG1		1680125	1					
ANR	1680455	IfStatement	if ( compiler -> args > 2 )		1680125	19					
ANR	1680456	Condition	compiler -> args > 2	258:5:8766:8783	1680125	0	True				
ANR	1680457	RelationalExpression	compiler -> args > 2		1680125	0		>			
ANR	1680458	PtrMemberAccess	compiler -> args		1680125	0					
ANR	1680459	Identifier	compiler		1680125	0					
ANR	1680460	Identifier	args		1680125	1					
ANR	1680461	PrimaryExpression	2		1680125	1					
ANR	1680462	ExpressionStatement	RET_I16 ( sizeof ( sljit_sw ) )	259:2:8788:8813	1680125	1	True				
ANR	1680463	CallExpression	RET_I16 ( sizeof ( sljit_sw ) )		1680125	0					
ANR	1680464	Callee	RET_I16		1680125	0					
ANR	1680465	Identifier	RET_I16		1680125	0					
ANR	1680466	ArgumentList	sizeof ( sljit_sw )		1680125	1					
ANR	1680467	Argument	sizeof ( sljit_sw )		1680125	0					
ANR	1680468	SizeofExpression	sizeof ( sljit_sw )		1680125	0					
ANR	1680469	Sizeof	sizeof		1680125	0					
ANR	1680470	SizeofOperand	sljit_sw		1680125	1					
ANR	1680471	ElseStatement	else		1680125	0					
ANR	1680472	ExpressionStatement	RET ( )	261:2:8823:8828	1680125	0	True				
ANR	1680473	CallExpression	RET ( )		1680125	0					
ANR	1680474	Callee	RET		1680125	0					
ANR	1680475	Identifier	RET		1680125	0					
ANR	1680476	ArgumentList			1680125	1					
ANR	1680477	ReturnStatement	return SLJIT_SUCCESS ;	266:1:8853:8873	1680125	20	True				
ANR	1680478	Identifier	SLJIT_SUCCESS		1680125	0					
ANR	1680479	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1680125	1					
ANR	1680480	Identifier	sljit_emit_return		1680125	2					
ANR	1680481	ParameterList	"struct sljit_compiler * compiler , sljit_si op , sljit_si src , sljit_sw srcw"		1680125	3					
ANR	1680482	Parameter	struct sljit_compiler * compiler	208:52:7285:7315	1680125	0	True				
ANR	1680483	ParameterType	struct sljit_compiler *		1680125	0					
ANR	1680484	Identifier	compiler		1680125	1					
ANR	1680485	Parameter	sljit_si op	208:85:7318:7328	1680125	1	True				
ANR	1680486	ParameterType	sljit_si		1680125	0					
ANR	1680487	Identifier	op		1680125	1					
ANR	1680488	Parameter	sljit_si src	208:98:7331:7342	1680125	2	True				
ANR	1680489	ParameterType	sljit_si		1680125	0					
ANR	1680490	Identifier	src		1680125	1					
ANR	1680491	Parameter	sljit_sw srcw	208:112:7345:7357	1680125	3	True				
ANR	1680492	ParameterType	sljit_sw		1680125	0					
ANR	1680493	Identifier	srcw		1680125	1					
ANR	1680494	CFGEntryNode	ENTRY		1680125		True				
ANR	1680495	CFGExitNode	EXIT		1680125		True				
ANR	1680496	Symbol	ADD		1680125						
ANR	1680497	Symbol	compiler -> scratches		1680125						
ANR	1680498	Symbol	TMP_REG1		1680125						
ANR	1680499	Symbol	compiler -> flags_saved		1680125						
ANR	1680500	Symbol	ADD_EAX_i32		1680125						
ANR	1680501	Symbol	reg_map		1680125						
ANR	1680502	Symbol	* compiler		1680125						
ANR	1680503	Symbol	SLJIT_SP		1680125						
ANR	1680504	Symbol	SLJIT_IMM		1680125						
ANR	1680505	Symbol	check_sljit_emit_return		1680125						
ANR	1680506	Symbol	* TMP_REG1		1680125						
ANR	1680507	Symbol	compiler		1680125						
ANR	1680508	Symbol	* SLJIT_SP		1680125						
ANR	1680509	Symbol	compiler -> args		1680125						
ANR	1680510	Symbol	op		1680125						
ANR	1680511	Symbol	ADD_rm_r		1680125						
ANR	1680512	Symbol	* inst		1680125						
ANR	1680513	Symbol	MOV_r_rm		1680125						
ANR	1680514	Symbol	src		1680125						
ANR	1680515	Symbol	srcw		1680125						
ANR	1680516	Symbol	SLJIT_SUCCESS		1680125						
ANR	1680517	Symbol	ADD_r_rm		1680125						
ANR	1680518	Symbol	* reg_map		1680125						
ANR	1680519	Symbol	SLJIT_S2		1680125						
ANR	1680520	Symbol	SLJIT_S0		1680125						
ANR	1680521	Symbol	SLJIT_S1		1680125						
ANR	1680522	Symbol	* SLJIT_S2		1680125						
ANR	1680523	Symbol	compiler -> local_size		1680125						
ANR	1680524	Symbol	compiler -> saveds		1680125						
ANR	1680525	Symbol	size		1680125						
ANR	1680526	Symbol	compiler -> options		1680125						
ANR	1680527	Symbol	inst		1680125						
ANR	1680528	Symbol	ensure_buf		1680125						
ANR	1680529	Symbol	emit_mov_before_return		1680125						
ANR	1680530	Symbol	SLJIT_DOUBLE_ALIGNMENT		1680125						
ANR	1680531	Symbol	* SLJIT_S0		1680125						
ANR	1680532	Symbol	emit_cum_binary		1680125						
ANR	1680533	Symbol	* SLJIT_S1		1680125						
ANR	1680534	Function	emit_x86_instruction	274:0:9146:13536							
ANR	1680535	FunctionDef	"emit_x86_instruction (struct sljit_compiler * compiler , sljit_si size , sljit_si a , sljit_sw imma , sljit_si b , sljit_sw immb)"		1680534	0					
ANR	1680536	CompoundStatement		279:0:9374:13536	1680534	0					
ANR	1680537	IdentifierDeclStatement	sljit_ub * inst ;	280:1:9377:9391	1680534	0	True				
ANR	1680538	IdentifierDecl	* inst		1680534	0					
ANR	1680539	IdentifierDeclType	sljit_ub *		1680534	0					
ANR	1680540	Identifier	inst		1680534	1					
ANR	1680541	IdentifierDeclStatement	sljit_ub * buf_ptr ;	281:1:9394:9411	1680534	1	True				
ANR	1680542	IdentifierDecl	* buf_ptr		1680534	0					
ANR	1680543	IdentifierDeclType	sljit_ub *		1680534	0					
ANR	1680544	Identifier	buf_ptr		1680534	1					
ANR	1680545	IdentifierDeclStatement	sljit_si flags = size & ~0xf ;	282:1:9414:9442	1680534	2	True				
ANR	1680546	IdentifierDecl	flags = size & ~0xf		1680534	0					
ANR	1680547	IdentifierDeclType	sljit_si		1680534	0					
ANR	1680548	Identifier	flags		1680534	1					
ANR	1680549	AssignmentExpression	flags = size & ~0xf		1680534	2		=			
ANR	1680550	Identifier	flags		1680534	0					
ANR	1680551	BitAndExpression	size & ~0xf		1680534	1		&			
ANR	1680552	Identifier	size		1680534	0					
ANR	1680553	Identifier	~0xf		1680534	1					
ANR	1680554	IdentifierDeclStatement	sljit_si inst_size ;	283:1:9445:9463	1680534	3	True				
ANR	1680555	IdentifierDecl	inst_size		1680534	0					
ANR	1680556	IdentifierDeclType	sljit_si		1680534	0					
ANR	1680557	Identifier	inst_size		1680534	1					
ANR	1680558	ExpressionStatement	SLJIT_ASSERT ( ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) != ( EX86_BIN_INS | EX86_SHIFT_INS ) )	286:1:9502:9592	1680534	4	True				
ANR	1680559	CallExpression	SLJIT_ASSERT ( ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) != ( EX86_BIN_INS | EX86_SHIFT_INS ) )		1680534	0					
ANR	1680560	Callee	SLJIT_ASSERT		1680534	0					
ANR	1680561	Identifier	SLJIT_ASSERT		1680534	0					
ANR	1680562	ArgumentList	( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) != ( EX86_BIN_INS | EX86_SHIFT_INS )		1680534	1					
ANR	1680563	Argument	( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) != ( EX86_BIN_INS | EX86_SHIFT_INS )		1680534	0					
ANR	1680564	EqualityExpression	( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) != ( EX86_BIN_INS | EX86_SHIFT_INS )		1680534	0		!=			
ANR	1680565	BitAndExpression	flags & ( EX86_BIN_INS | EX86_SHIFT_INS )		1680534	0		&			
ANR	1680566	Identifier	flags		1680534	0					
ANR	1680567	InclusiveOrExpression	EX86_BIN_INS | EX86_SHIFT_INS		1680534	1		|			
ANR	1680568	Identifier	EX86_BIN_INS		1680534	0					
ANR	1680569	Identifier	EX86_SHIFT_INS		1680534	1					
ANR	1680570	InclusiveOrExpression	EX86_BIN_INS | EX86_SHIFT_INS		1680534	1		|			
ANR	1680571	Identifier	EX86_BIN_INS		1680534	0					
ANR	1680572	Identifier	EX86_SHIFT_INS		1680534	1					
ANR	1680573	ExpressionStatement	SLJIT_ASSERT ( ! ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) || ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) == 0 )	288:1:9649:9755	1680534	5	True				
ANR	1680574	CallExpression	SLJIT_ASSERT ( ! ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) || ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) == 0 )		1680534	0					
ANR	1680575	Callee	SLJIT_ASSERT		1680534	0					
ANR	1680576	Identifier	SLJIT_ASSERT		1680534	0					
ANR	1680577	ArgumentList	! ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) || ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) == 0		1680534	1					
ANR	1680578	Argument	! ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) || ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) == 0		1680534	0					
ANR	1680579	OrExpression	! ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) || ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) == 0		1680534	0		||			
ANR	1680580	UnaryOperationExpression	! ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) )		1680534	0					
ANR	1680581	UnaryOperator	!		1680534	0					
ANR	1680582	BitAndExpression	flags & ( EX86_BIN_INS | EX86_SHIFT_INS )		1680534	1		&			
ANR	1680583	Identifier	flags		1680534	0					
ANR	1680584	InclusiveOrExpression	EX86_BIN_INS | EX86_SHIFT_INS		1680534	1		|			
ANR	1680585	Identifier	EX86_BIN_INS		1680534	0					
ANR	1680586	Identifier	EX86_SHIFT_INS		1680534	1					
ANR	1680587	EqualityExpression	( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) == 0		1680534	1		==			
ANR	1680588	BitAndExpression	flags & ( EX86_BYTE_ARG | EX86_HALF_ARG )		1680534	0		&			
ANR	1680589	Identifier	flags		1680534	0					
ANR	1680590	InclusiveOrExpression	EX86_BYTE_ARG | EX86_HALF_ARG		1680534	1		|			
ANR	1680591	Identifier	EX86_BYTE_ARG		1680534	0					
ANR	1680592	Identifier	EX86_HALF_ARG		1680534	1					
ANR	1680593	PrimaryExpression	0		1680534	1					
ANR	1680594	ExpressionStatement	SLJIT_ASSERT ( ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) != ( EX86_BYTE_ARG | EX86_HALF_ARG ) )	290:1:9804:9894	1680534	6	True				
ANR	1680595	CallExpression	SLJIT_ASSERT ( ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) != ( EX86_BYTE_ARG | EX86_HALF_ARG ) )		1680534	0					
ANR	1680596	Callee	SLJIT_ASSERT		1680534	0					
ANR	1680597	Identifier	SLJIT_ASSERT		1680534	0					
ANR	1680598	ArgumentList	( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) != ( EX86_BYTE_ARG | EX86_HALF_ARG )		1680534	1					
ANR	1680599	Argument	( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) != ( EX86_BYTE_ARG | EX86_HALF_ARG )		1680534	0					
ANR	1680600	EqualityExpression	( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) != ( EX86_BYTE_ARG | EX86_HALF_ARG )		1680534	0		!=			
ANR	1680601	BitAndExpression	flags & ( EX86_BYTE_ARG | EX86_HALF_ARG )		1680534	0		&			
ANR	1680602	Identifier	flags		1680534	0					
ANR	1680603	InclusiveOrExpression	EX86_BYTE_ARG | EX86_HALF_ARG		1680534	1		|			
ANR	1680604	Identifier	EX86_BYTE_ARG		1680534	0					
ANR	1680605	Identifier	EX86_HALF_ARG		1680534	1					
ANR	1680606	InclusiveOrExpression	EX86_BYTE_ARG | EX86_HALF_ARG		1680534	1		|			
ANR	1680607	Identifier	EX86_BYTE_ARG		1680534	0					
ANR	1680608	Identifier	EX86_HALF_ARG		1680534	1					
ANR	1680609	ExpressionStatement	SLJIT_ASSERT ( ! ( a & SLJIT_IMM ) || ! ( flags & EX86_SSE2 ) )	292:1:9940:9994	1680534	7	True				
ANR	1680610	CallExpression	SLJIT_ASSERT ( ! ( a & SLJIT_IMM ) || ! ( flags & EX86_SSE2 ) )		1680534	0					
ANR	1680611	Callee	SLJIT_ASSERT		1680534	0					
ANR	1680612	Identifier	SLJIT_ASSERT		1680534	0					
ANR	1680613	ArgumentList	! ( a & SLJIT_IMM ) || ! ( flags & EX86_SSE2 )		1680534	1					
ANR	1680614	Argument	! ( a & SLJIT_IMM ) || ! ( flags & EX86_SSE2 )		1680534	0					
ANR	1680615	OrExpression	! ( a & SLJIT_IMM ) || ! ( flags & EX86_SSE2 )		1680534	0		||			
ANR	1680616	UnaryOperationExpression	! ( a & SLJIT_IMM )		1680534	0					
ANR	1680617	UnaryOperator	!		1680534	0					
ANR	1680618	BitAndExpression	a & SLJIT_IMM		1680534	1		&			
ANR	1680619	Identifier	a		1680534	0					
ANR	1680620	Identifier	SLJIT_IMM		1680534	1					
ANR	1680621	UnaryOperationExpression	! ( flags & EX86_SSE2 )		1680534	1					
ANR	1680622	UnaryOperator	!		1680534	0					
ANR	1680623	BitAndExpression	flags & EX86_SSE2		1680534	1		&			
ANR	1680624	Identifier	flags		1680534	0					
ANR	1680625	Identifier	EX86_SSE2		1680534	1					
ANR	1680626	ExpressionStatement	SLJIT_ASSERT ( ( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) ) != ( EX86_PREF_F2 | EX86_PREF_F3 ) && ( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 ) && ( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 ) )	293:1:9997:10239	1680534	8	True				
ANR	1680627	CallExpression	SLJIT_ASSERT ( ( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) ) != ( EX86_PREF_F2 | EX86_PREF_F3 ) && ( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 ) && ( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 ) )		1680534	0					
ANR	1680628	Callee	SLJIT_ASSERT		1680534	0					
ANR	1680629	Identifier	SLJIT_ASSERT		1680534	0					
ANR	1680630	ArgumentList	( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) ) != ( EX86_PREF_F2 | EX86_PREF_F3 ) && ( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 ) && ( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 )		1680534	1					
ANR	1680631	Argument	( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) ) != ( EX86_PREF_F2 | EX86_PREF_F3 ) && ( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 ) && ( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 )		1680534	0					
ANR	1680632	AndExpression	( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) ) != ( EX86_PREF_F2 | EX86_PREF_F3 ) && ( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 ) && ( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 )		1680534	0		&&			
ANR	1680633	EqualityExpression	( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) ) != ( EX86_PREF_F2 | EX86_PREF_F3 )		1680534	0		!=			
ANR	1680634	BitAndExpression	flags & ( EX86_PREF_F2 | EX86_PREF_F3 )		1680534	0		&			
ANR	1680635	Identifier	flags		1680534	0					
ANR	1680636	InclusiveOrExpression	EX86_PREF_F2 | EX86_PREF_F3		1680534	1		|			
ANR	1680637	Identifier	EX86_PREF_F2		1680534	0					
ANR	1680638	Identifier	EX86_PREF_F3		1680534	1					
ANR	1680639	InclusiveOrExpression	EX86_PREF_F2 | EX86_PREF_F3		1680534	1		|			
ANR	1680640	Identifier	EX86_PREF_F2		1680534	0					
ANR	1680641	Identifier	EX86_PREF_F3		1680534	1					
ANR	1680642	AndExpression	( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 ) && ( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 )		1680534	1		&&			
ANR	1680643	EqualityExpression	( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 )		1680534	0		!=			
ANR	1680644	BitAndExpression	flags & ( EX86_PREF_F2 | EX86_PREF_66 )		1680534	0		&			
ANR	1680645	Identifier	flags		1680534	0					
ANR	1680646	InclusiveOrExpression	EX86_PREF_F2 | EX86_PREF_66		1680534	1		|			
ANR	1680647	Identifier	EX86_PREF_F2		1680534	0					
ANR	1680648	Identifier	EX86_PREF_66		1680534	1					
ANR	1680649	InclusiveOrExpression	EX86_PREF_F2 | EX86_PREF_66		1680534	1		|			
ANR	1680650	Identifier	EX86_PREF_F2		1680534	0					
ANR	1680651	Identifier	EX86_PREF_66		1680534	1					
ANR	1680652	EqualityExpression	( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 )		1680534	1		!=			
ANR	1680653	BitAndExpression	flags & ( EX86_PREF_F3 | EX86_PREF_66 )		1680534	0		&			
ANR	1680654	Identifier	flags		1680534	0					
ANR	1680655	InclusiveOrExpression	EX86_PREF_F3 | EX86_PREF_66		1680534	1		|			
ANR	1680656	Identifier	EX86_PREF_F3		1680534	0					
ANR	1680657	Identifier	EX86_PREF_66		1680534	1					
ANR	1680658	InclusiveOrExpression	EX86_PREF_F3 | EX86_PREF_66		1680534	1		|			
ANR	1680659	Identifier	EX86_PREF_F3		1680534	0					
ANR	1680660	Identifier	EX86_PREF_66		1680534	1					
ANR	1680661	ExpressionStatement	size &= 0xf	297:1:10243:10254	1680534	9	True				
ANR	1680662	AssignmentExpression	size &= 0xf		1680534	0		&=			
ANR	1680663	Identifier	size		1680534	0					
ANR	1680664	PrimaryExpression	0xf		1680534	1					
ANR	1680665	ExpressionStatement	inst_size = size	298:1:10257:10273	1680534	10	True				
ANR	1680666	AssignmentExpression	inst_size = size		1680534	0		=			
ANR	1680667	Identifier	inst_size		1680534	0					
ANR	1680668	Identifier	size		1680534	1					
ANR	1680669	IfStatement	if ( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) )		1680534	11					
ANR	1680670	Condition	flags & ( EX86_PREF_F2 | EX86_PREF_F3 )	300:5:10281:10317	1680534	0	True				
ANR	1680671	BitAndExpression	flags & ( EX86_PREF_F2 | EX86_PREF_F3 )		1680534	0		&			
ANR	1680672	Identifier	flags		1680534	0					
ANR	1680673	InclusiveOrExpression	EX86_PREF_F2 | EX86_PREF_F3		1680534	1		|			
ANR	1680674	Identifier	EX86_PREF_F2		1680534	0					
ANR	1680675	Identifier	EX86_PREF_F3		1680534	1					
ANR	1680676	ExpressionStatement	inst_size ++	301:2:10322:10333	1680534	1	True				
ANR	1680677	PostIncDecOperationExpression	inst_size ++		1680534	0					
ANR	1680678	Identifier	inst_size		1680534	0					
ANR	1680679	IncDec	++		1680534	1					
ANR	1680680	IfStatement	if ( flags & EX86_PREF_66 )		1680534	12					
ANR	1680681	Condition	flags & EX86_PREF_66	302:5:10340:10359	1680534	0	True				
ANR	1680682	BitAndExpression	flags & EX86_PREF_66		1680534	0		&			
ANR	1680683	Identifier	flags		1680534	0					
ANR	1680684	Identifier	EX86_PREF_66		1680534	1					
ANR	1680685	ExpressionStatement	inst_size ++	303:2:10364:10375	1680534	1	True				
ANR	1680686	PostIncDecOperationExpression	inst_size ++		1680534	0					
ANR	1680687	Identifier	inst_size		1680534	0					
ANR	1680688	IncDec	++		1680534	1					
ANR	1680689	ExpressionStatement	inst_size += 1	306:1:10407:10421	1680534	13	True				
ANR	1680690	AssignmentExpression	inst_size += 1		1680534	0		+=			
ANR	1680691	Identifier	inst_size		1680534	0					
ANR	1680692	PrimaryExpression	1		1680534	1					
ANR	1680693	IfStatement	if ( b & SLJIT_MEM )		1680534	14					
ANR	1680694	Condition	b & SLJIT_MEM	307:5:10448:10460	1680534	0	True				
ANR	1680695	BitAndExpression	b & SLJIT_MEM		1680534	0		&			
ANR	1680696	Identifier	b		1680534	0					
ANR	1680697	Identifier	SLJIT_MEM		1680534	1					
ANR	1680698	CompoundStatement		29:20:1088:1088	1680534	1					
ANR	1680699	IfStatement	if ( ( b & REG_MASK ) == SLJIT_UNUSED )		1680534	0					
ANR	1680700	Condition	( b & REG_MASK ) == SLJIT_UNUSED	308:6:10471:10500	1680534	0	True				
ANR	1680701	EqualityExpression	( b & REG_MASK ) == SLJIT_UNUSED		1680534	0		==			
ANR	1680702	BitAndExpression	b & REG_MASK		1680534	0		&			
ANR	1680703	Identifier	b		1680534	0					
ANR	1680704	Identifier	REG_MASK		1680534	1					
ANR	1680705	Identifier	SLJIT_UNUSED		1680534	1					
ANR	1680706	ExpressionStatement	inst_size += sizeof ( sljit_sw )	309:3:10506:10535	1680534	1	True				
ANR	1680707	AssignmentExpression	inst_size += sizeof ( sljit_sw )		1680534	0		+=			
ANR	1680708	Identifier	inst_size		1680534	0					
ANR	1680709	SizeofExpression	sizeof ( sljit_sw )		1680534	1					
ANR	1680710	Sizeof	sizeof		1680534	0					
ANR	1680711	SizeofOperand	sljit_sw		1680534	1					
ANR	1680712	ElseStatement	else		1680534	0					
ANR	1680713	IfStatement	if ( immb != 0 && ! ( b & OFFS_REG_MASK ) )		1680534	0					
ANR	1680714	Condition	immb != 0 && ! ( b & OFFS_REG_MASK )	310:11:10548:10580	1680534	0	True				
ANR	1680715	AndExpression	immb != 0 && ! ( b & OFFS_REG_MASK )		1680534	0		&&			
ANR	1680716	EqualityExpression	immb != 0		1680534	0		!=			
ANR	1680717	Identifier	immb		1680534	0					
ANR	1680718	PrimaryExpression	0		1680534	1					
ANR	1680719	UnaryOperationExpression	! ( b & OFFS_REG_MASK )		1680534	1					
ANR	1680720	UnaryOperator	!		1680534	0					
ANR	1680721	BitAndExpression	b & OFFS_REG_MASK		1680534	1		&			
ANR	1680722	Identifier	b		1680534	0					
ANR	1680723	Identifier	OFFS_REG_MASK		1680534	1					
ANR	1680724	CompoundStatement		32:46:1208:1208	1680534	1					
ANR	1680725	IfStatement	if ( immb <= 127 && immb >= - 128 )		1680534	0					
ANR	1680726	Condition	immb <= 127 && immb >= - 128	312:7:10620:10646	1680534	0	True				
ANR	1680727	AndExpression	immb <= 127 && immb >= - 128		1680534	0		&&			
ANR	1680728	RelationalExpression	immb <= 127		1680534	0		<=			
ANR	1680729	Identifier	immb		1680534	0					
ANR	1680730	PrimaryExpression	127		1680534	1					
ANR	1680731	RelationalExpression	immb >= - 128		1680534	1		>=			
ANR	1680732	Identifier	immb		1680534	0					
ANR	1680733	UnaryOperationExpression	- 128		1680534	1					
ANR	1680734	UnaryOperator	-		1680534	0					
ANR	1680735	PrimaryExpression	128		1680534	1					
ANR	1680736	ExpressionStatement	inst_size += sizeof ( sljit_sb )	313:4:10653:10682	1680534	1	True				
ANR	1680737	AssignmentExpression	inst_size += sizeof ( sljit_sb )		1680534	0		+=			
ANR	1680738	Identifier	inst_size		1680534	0					
ANR	1680739	SizeofExpression	sizeof ( sljit_sb )		1680534	1					
ANR	1680740	Sizeof	sizeof		1680534	0					
ANR	1680741	SizeofOperand	sljit_sb		1680534	1					
ANR	1680742	ElseStatement	else		1680534	0					
ANR	1680743	ExpressionStatement	inst_size += sizeof ( sljit_sw )	315:4:10696:10725	1680534	0	True				
ANR	1680744	AssignmentExpression	inst_size += sizeof ( sljit_sw )		1680534	0		+=			
ANR	1680745	Identifier	inst_size		1680534	0					
ANR	1680746	SizeofExpression	sizeof ( sljit_sw )		1680534	1					
ANR	1680747	Sizeof	sizeof		1680534	0					
ANR	1680748	SizeofOperand	sljit_sw		1680534	1					
ANR	1680749	IfStatement	if ( ( b & REG_MASK ) == SLJIT_SP && ! ( b & OFFS_REG_MASK ) )		1680534	1					
ANR	1680750	Condition	( b & REG_MASK ) == SLJIT_SP && ! ( b & OFFS_REG_MASK )	318:6:10738:10787	1680534	0	True				
ANR	1680751	AndExpression	( b & REG_MASK ) == SLJIT_SP && ! ( b & OFFS_REG_MASK )		1680534	0		&&			
ANR	1680752	EqualityExpression	( b & REG_MASK ) == SLJIT_SP		1680534	0		==			
ANR	1680753	BitAndExpression	b & REG_MASK		1680534	0		&			
ANR	1680754	Identifier	b		1680534	0					
ANR	1680755	Identifier	REG_MASK		1680534	1					
ANR	1680756	Identifier	SLJIT_SP		1680534	1					
ANR	1680757	UnaryOperationExpression	! ( b & OFFS_REG_MASK )		1680534	1					
ANR	1680758	UnaryOperator	!		1680534	0					
ANR	1680759	BitAndExpression	b & OFFS_REG_MASK		1680534	1		&			
ANR	1680760	Identifier	b		1680534	0					
ANR	1680761	Identifier	OFFS_REG_MASK		1680534	1					
ANR	1680762	ExpressionStatement	b |= TO_OFFS_REG ( SLJIT_SP )	319:3:10793:10819	1680534	1	True				
ANR	1680763	AssignmentExpression	b |= TO_OFFS_REG ( SLJIT_SP )		1680534	0		|=			
ANR	1680764	Identifier	b		1680534	0					
ANR	1680765	CallExpression	TO_OFFS_REG ( SLJIT_SP )		1680534	1					
ANR	1680766	Callee	TO_OFFS_REG		1680534	0					
ANR	1680767	Identifier	TO_OFFS_REG		1680534	0					
ANR	1680768	ArgumentList	SLJIT_SP		1680534	1					
ANR	1680769	Argument	SLJIT_SP		1680534	0					
ANR	1680770	Identifier	SLJIT_SP		1680534	0					
ANR	1680771	IfStatement	if ( ( b & OFFS_REG_MASK ) != SLJIT_UNUSED )		1680534	2					
ANR	1680772	Condition	( b & OFFS_REG_MASK ) != SLJIT_UNUSED	321:6:10828:10862	1680534	0	True				
ANR	1680773	EqualityExpression	( b & OFFS_REG_MASK ) != SLJIT_UNUSED		1680534	0		!=			
ANR	1680774	BitAndExpression	b & OFFS_REG_MASK		1680534	0		&			
ANR	1680775	Identifier	b		1680534	0					
ANR	1680776	Identifier	OFFS_REG_MASK		1680534	1					
ANR	1680777	Identifier	SLJIT_UNUSED		1680534	1					
ANR	1680778	ExpressionStatement	inst_size += 1	322:3:10868:10882	1680534	1	True				
ANR	1680779	AssignmentExpression	inst_size += 1		1680534	0		+=			
ANR	1680780	Identifier	inst_size		1680534	0					
ANR	1680781	PrimaryExpression	1		1680534	1					
ANR	1680782	IfStatement	if ( a & SLJIT_IMM )		1680534	15					
ANR	1680783	Condition	a & SLJIT_IMM	326:5:10937:10949	1680534	0	True				
ANR	1680784	BitAndExpression	a & SLJIT_IMM		1680534	0		&			
ANR	1680785	Identifier	a		1680534	0					
ANR	1680786	Identifier	SLJIT_IMM		1680534	1					
ANR	1680787	CompoundStatement		48:20:1577:1577	1680534	1					
ANR	1680788	IfStatement	if ( flags & EX86_BIN_INS )		1680534	0					
ANR	1680789	Condition	flags & EX86_BIN_INS	327:6:10960:10979	1680534	0	True				
ANR	1680790	BitAndExpression	flags & EX86_BIN_INS		1680534	0		&			
ANR	1680791	Identifier	flags		1680534	0					
ANR	1680792	Identifier	EX86_BIN_INS		1680534	1					
ANR	1680793	CompoundStatement		49:28:1607:1607	1680534	1					
ANR	1680794	IfStatement	if ( imma <= 127 && imma >= - 128 )		1680534	0					
ANR	1680795	Condition	imma <= 127 && imma >= - 128	328:7:10991:11017	1680534	0	True				
ANR	1680796	AndExpression	imma <= 127 && imma >= - 128		1680534	0		&&			
ANR	1680797	RelationalExpression	imma <= 127		1680534	0		<=			
ANR	1680798	Identifier	imma		1680534	0					
ANR	1680799	PrimaryExpression	127		1680534	1					
ANR	1680800	RelationalExpression	imma >= - 128		1680534	1		>=			
ANR	1680801	Identifier	imma		1680534	0					
ANR	1680802	UnaryOperationExpression	- 128		1680534	1					
ANR	1680803	UnaryOperator	-		1680534	0					
ANR	1680804	PrimaryExpression	128		1680534	1					
ANR	1680805	CompoundStatement		50:36:1645:1645	1680534	1					
ANR	1680806	ExpressionStatement	inst_size += 1	329:4:11026:11040	1680534	0	True				
ANR	1680807	AssignmentExpression	inst_size += 1		1680534	0		+=			
ANR	1680808	Identifier	inst_size		1680534	0					
ANR	1680809	PrimaryExpression	1		1680534	1					
ANR	1680810	ExpressionStatement	flags |= EX86_BYTE_ARG	330:4:11046:11068	1680534	1	True				
ANR	1680811	AssignmentExpression	flags |= EX86_BYTE_ARG		1680534	0		|=			
ANR	1680812	Identifier	flags		1680534	0					
ANR	1680813	Identifier	EX86_BYTE_ARG		1680534	1					
ANR	1680814	ElseStatement	else		1680534	0					
ANR	1680815	ExpressionStatement	inst_size += 4	332:4:11084:11098	1680534	0	True				
ANR	1680816	AssignmentExpression	inst_size += 4		1680534	0		+=			
ANR	1680817	Identifier	inst_size		1680534	0					
ANR	1680818	PrimaryExpression	4		1680534	1					
ANR	1680819	ElseStatement	else		1680534	0					
ANR	1680820	IfStatement	if ( flags & EX86_SHIFT_INS )		1680534	0					
ANR	1680821	Condition	flags & EX86_SHIFT_INS	334:11:11115:11136	1680534	0	True				
ANR	1680822	BitAndExpression	flags & EX86_SHIFT_INS		1680534	0		&			
ANR	1680823	Identifier	flags		1680534	0					
ANR	1680824	Identifier	EX86_SHIFT_INS		1680534	1					
ANR	1680825	CompoundStatement		56:35:1764:1764	1680534	1					
ANR	1680826	ExpressionStatement	imma &= 0x1f	335:3:11144:11156	1680534	0	True				
ANR	1680827	AssignmentExpression	imma &= 0x1f		1680534	0		&=			
ANR	1680828	Identifier	imma		1680534	0					
ANR	1680829	PrimaryExpression	0x1f		1680534	1					
ANR	1680830	IfStatement	if ( imma != 1 )		1680534	1					
ANR	1680831	Condition	imma != 1	336:7:11165:11173	1680534	0	True				
ANR	1680832	EqualityExpression	imma != 1		1680534	0		!=			
ANR	1680833	Identifier	imma		1680534	0					
ANR	1680834	PrimaryExpression	1		1680534	1					
ANR	1680835	CompoundStatement		58:18:1801:1801	1680534	1					
ANR	1680836	ExpressionStatement	inst_size ++	337:4:11182:11194	1680534	0	True				
ANR	1680837	PostIncDecOperationExpression	inst_size ++		1680534	0					
ANR	1680838	Identifier	inst_size		1680534	0					
ANR	1680839	IncDec	++		1680534	1					
ANR	1680840	ExpressionStatement	flags |= EX86_BYTE_ARG	338:4:11200:11222	1680534	1	True				
ANR	1680841	AssignmentExpression	flags |= EX86_BYTE_ARG		1680534	0		|=			
ANR	1680842	Identifier	flags		1680534	0					
ANR	1680843	Identifier	EX86_BYTE_ARG		1680534	1					
ANR	1680844	ElseStatement	else		1680534	0					
ANR	1680845	IfStatement	if ( flags & EX86_BYTE_ARG )		1680534	0					
ANR	1680846	Condition	flags & EX86_BYTE_ARG	340:13:11242:11262	1680534	0	True				
ANR	1680847	BitAndExpression	flags & EX86_BYTE_ARG		1680534	0		&			
ANR	1680848	Identifier	flags		1680534	0					
ANR	1680849	Identifier	EX86_BYTE_ARG		1680534	1					
ANR	1680850	ExpressionStatement	inst_size ++	341:3:11268:11279	1680534	1	True				
ANR	1680851	PostIncDecOperationExpression	inst_size ++		1680534	0					
ANR	1680852	Identifier	inst_size		1680534	0					
ANR	1680853	IncDec	++		1680534	1					
ANR	1680854	ElseStatement	else		1680534	0					
ANR	1680855	IfStatement	if ( flags & EX86_HALF_ARG )		1680534	0					
ANR	1680856	Condition	flags & EX86_HALF_ARG	342:11:11292:11312	1680534	0	True				
ANR	1680857	BitAndExpression	flags & EX86_HALF_ARG		1680534	0		&			
ANR	1680858	Identifier	flags		1680534	0					
ANR	1680859	Identifier	EX86_HALF_ARG		1680534	1					
ANR	1680860	ExpressionStatement	inst_size += sizeof ( short )	343:3:11318:11344	1680534	1	True				
ANR	1680861	AssignmentExpression	inst_size += sizeof ( short )		1680534	0		+=			
ANR	1680862	Identifier	inst_size		1680534	0					
ANR	1680863	SizeofExpression	sizeof ( short )		1680534	1					
ANR	1680864	Sizeof	sizeof		1680534	0					
ANR	1680865	SizeofOperand	short		1680534	1					
ANR	1680866	ElseStatement	else		1680534	0					
ANR	1680867	ExpressionStatement	inst_size += sizeof ( sljit_sw )	345:3:11356:11385	1680534	0	True				
ANR	1680868	AssignmentExpression	inst_size += sizeof ( sljit_sw )		1680534	0		+=			
ANR	1680869	Identifier	inst_size		1680534	0					
ANR	1680870	SizeofExpression	sizeof ( sljit_sw )		1680534	1					
ANR	1680871	Sizeof	sizeof		1680534	0					
ANR	1680872	SizeofOperand	sljit_sw		1680534	1					
ANR	1680873	ElseStatement	else		1680534	0					
ANR	1680874	ExpressionStatement	SLJIT_ASSERT ( ! ( flags & EX86_SHIFT_INS ) || a == SLJIT_PREF_SHIFT_REG )	348:2:11398:11466	1680534	0	True				
ANR	1680875	CallExpression	SLJIT_ASSERT ( ! ( flags & EX86_SHIFT_INS ) || a == SLJIT_PREF_SHIFT_REG )		1680534	0					
ANR	1680876	Callee	SLJIT_ASSERT		1680534	0					
ANR	1680877	Identifier	SLJIT_ASSERT		1680534	0					
ANR	1680878	ArgumentList	! ( flags & EX86_SHIFT_INS ) || a == SLJIT_PREF_SHIFT_REG		1680534	1					
ANR	1680879	Argument	! ( flags & EX86_SHIFT_INS ) || a == SLJIT_PREF_SHIFT_REG		1680534	0					
ANR	1680880	OrExpression	! ( flags & EX86_SHIFT_INS ) || a == SLJIT_PREF_SHIFT_REG		1680534	0		||			
ANR	1680881	UnaryOperationExpression	! ( flags & EX86_SHIFT_INS )		1680534	0					
ANR	1680882	UnaryOperator	!		1680534	0					
ANR	1680883	BitAndExpression	flags & EX86_SHIFT_INS		1680534	1		&			
ANR	1680884	Identifier	flags		1680534	0					
ANR	1680885	Identifier	EX86_SHIFT_INS		1680534	1					
ANR	1680886	EqualityExpression	a == SLJIT_PREF_SHIFT_REG		1680534	1		==			
ANR	1680887	Identifier	a		1680534	0					
ANR	1680888	Identifier	SLJIT_PREF_SHIFT_REG		1680534	1					
ANR	1680889	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + inst_size )"	350:1:11470:11523	1680534	16	True				
ANR	1680890	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + inst_size )"		1680534	0		=			
ANR	1680891	Identifier	inst		1680534	0					
ANR	1680892	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + inst_size )"		1680534	1					
ANR	1680893	CastTarget	sljit_ub *		1680534	0					
ANR	1680894	CallExpression	"ensure_buf ( compiler , 1 + inst_size )"		1680534	1					
ANR	1680895	Callee	ensure_buf		1680534	0					
ANR	1680896	Identifier	ensure_buf		1680534	0					
ANR	1680897	ArgumentList	compiler		1680534	1					
ANR	1680898	Argument	compiler		1680534	0					
ANR	1680899	Identifier	compiler		1680534	0					
ANR	1680900	Argument	1 + inst_size		1680534	1					
ANR	1680901	AdditiveExpression	1 + inst_size		1680534	0		+			
ANR	1680902	PrimaryExpression	1		1680534	0					
ANR	1680903	Identifier	inst_size		1680534	1					
ANR	1680904	ExpressionStatement	PTR_FAIL_IF ( ! inst )	351:1:11526:11544	1680534	17	True				
ANR	1680905	CallExpression	PTR_FAIL_IF ( ! inst )		1680534	0					
ANR	1680906	Callee	PTR_FAIL_IF		1680534	0					
ANR	1680907	Identifier	PTR_FAIL_IF		1680534	0					
ANR	1680908	ArgumentList	! inst		1680534	1					
ANR	1680909	Argument	! inst		1680534	0					
ANR	1680910	UnaryOperationExpression	! inst		1680534	0					
ANR	1680911	UnaryOperator	!		1680534	0					
ANR	1680912	Identifier	inst		1680534	1					
ANR	1680913	ExpressionStatement	INC_SIZE ( inst_size )	354:1:11574:11593	1680534	18	True				
ANR	1680914	CallExpression	INC_SIZE ( inst_size )		1680534	0					
ANR	1680915	Callee	INC_SIZE		1680534	0					
ANR	1680916	Identifier	INC_SIZE		1680534	0					
ANR	1680917	ArgumentList	inst_size		1680534	1					
ANR	1680918	Argument	inst_size		1680534	0					
ANR	1680919	Identifier	inst_size		1680534	0					
ANR	1680920	IfStatement	if ( flags & EX86_PREF_F2 )		1680534	19					
ANR	1680921	Condition	flags & EX86_PREF_F2	355:5:11600:11619	1680534	0	True				
ANR	1680922	BitAndExpression	flags & EX86_PREF_F2		1680534	0		&			
ANR	1680923	Identifier	flags		1680534	0					
ANR	1680924	Identifier	EX86_PREF_F2		1680534	1					
ANR	1680925	ExpressionStatement	* inst ++ = 0xf2	356:2:11624:11638	1680534	1	True				
ANR	1680926	AssignmentExpression	* inst ++ = 0xf2		1680534	0		=			
ANR	1680927	UnaryOperationExpression	* inst ++		1680534	0					
ANR	1680928	UnaryOperator	*		1680534	0					
ANR	1680929	PostIncDecOperationExpression	inst ++		1680534	1					
ANR	1680930	Identifier	inst		1680534	0					
ANR	1680931	IncDec	++		1680534	1					
ANR	1680932	PrimaryExpression	0xf2		1680534	1					
ANR	1680933	IfStatement	if ( flags & EX86_PREF_F3 )		1680534	20					
ANR	1680934	Condition	flags & EX86_PREF_F3	357:5:11645:11664	1680534	0	True				
ANR	1680935	BitAndExpression	flags & EX86_PREF_F3		1680534	0		&			
ANR	1680936	Identifier	flags		1680534	0					
ANR	1680937	Identifier	EX86_PREF_F3		1680534	1					
ANR	1680938	ExpressionStatement	* inst ++ = 0xf3	358:2:11669:11683	1680534	1	True				
ANR	1680939	AssignmentExpression	* inst ++ = 0xf3		1680534	0		=			
ANR	1680940	UnaryOperationExpression	* inst ++		1680534	0					
ANR	1680941	UnaryOperator	*		1680534	0					
ANR	1680942	PostIncDecOperationExpression	inst ++		1680534	1					
ANR	1680943	Identifier	inst		1680534	0					
ANR	1680944	IncDec	++		1680534	1					
ANR	1680945	PrimaryExpression	0xf3		1680534	1					
ANR	1680946	IfStatement	if ( flags & EX86_PREF_66 )		1680534	21					
ANR	1680947	Condition	flags & EX86_PREF_66	359:5:11690:11709	1680534	0	True				
ANR	1680948	BitAndExpression	flags & EX86_PREF_66		1680534	0		&			
ANR	1680949	Identifier	flags		1680534	0					
ANR	1680950	Identifier	EX86_PREF_66		1680534	1					
ANR	1680951	ExpressionStatement	* inst ++ = 0x66	360:2:11714:11728	1680534	1	True				
ANR	1680952	AssignmentExpression	* inst ++ = 0x66		1680534	0		=			
ANR	1680953	UnaryOperationExpression	* inst ++		1680534	0					
ANR	1680954	UnaryOperator	*		1680534	0					
ANR	1680955	PostIncDecOperationExpression	inst ++		1680534	1					
ANR	1680956	Identifier	inst		1680534	0					
ANR	1680957	IncDec	++		1680534	1					
ANR	1680958	PrimaryExpression	0x66		1680534	1					
ANR	1680959	ExpressionStatement	buf_ptr = inst + size	362:1:11732:11753	1680534	22	True				
ANR	1680960	AssignmentExpression	buf_ptr = inst + size		1680534	0		=			
ANR	1680961	Identifier	buf_ptr		1680534	0					
ANR	1680962	AdditiveExpression	inst + size		1680534	1		+			
ANR	1680963	Identifier	inst		1680534	0					
ANR	1680964	Identifier	size		1680534	1					
ANR	1680965	IfStatement	if ( ! ( flags & EX86_SHIFT_INS ) )		1680534	23					
ANR	1680966	Condition	! ( flags & EX86_SHIFT_INS )	365:5:11788:11812	1680534	0	True				
ANR	1680967	UnaryOperationExpression	! ( flags & EX86_SHIFT_INS )		1680534	0					
ANR	1680968	UnaryOperator	!		1680534	0					
ANR	1680969	BitAndExpression	flags & EX86_SHIFT_INS		1680534	1		&			
ANR	1680970	Identifier	flags		1680534	0					
ANR	1680971	Identifier	EX86_SHIFT_INS		1680534	1					
ANR	1680972	CompoundStatement		87:32:2440:2440	1680534	1					
ANR	1680973	IfStatement	if ( ( flags & EX86_BIN_INS ) && ( a & SLJIT_IMM ) )		1680534	0					
ANR	1680974	Condition	( flags & EX86_BIN_INS ) && ( a & SLJIT_IMM )	366:6:11823:11863	1680534	0	True				
ANR	1680975	AndExpression	( flags & EX86_BIN_INS ) && ( a & SLJIT_IMM )		1680534	0		&&			
ANR	1680976	BitAndExpression	flags & EX86_BIN_INS		1680534	0		&			
ANR	1680977	Identifier	flags		1680534	0					
ANR	1680978	Identifier	EX86_BIN_INS		1680534	1					
ANR	1680979	BitAndExpression	a & SLJIT_IMM		1680534	1		&			
ANR	1680980	Identifier	a		1680534	0					
ANR	1680981	Identifier	SLJIT_IMM		1680534	1					
ANR	1680982	ExpressionStatement	* inst = ( flags & EX86_BYTE_ARG ) ? GROUP_BINARY_83 : GROUP_BINARY_81	367:3:11869:11936	1680534	1	True				
ANR	1680983	AssignmentExpression	* inst = ( flags & EX86_BYTE_ARG ) ? GROUP_BINARY_83 : GROUP_BINARY_81		1680534	0		=			
ANR	1680984	UnaryOperationExpression	* inst		1680534	0					
ANR	1680985	UnaryOperator	*		1680534	0					
ANR	1680986	Identifier	inst		1680534	1					
ANR	1680987	ConditionalExpression	( flags & EX86_BYTE_ARG ) ? GROUP_BINARY_83 : GROUP_BINARY_81		1680534	1					
ANR	1680988	Condition	flags & EX86_BYTE_ARG		1680534	0					
ANR	1680989	BitAndExpression	flags & EX86_BYTE_ARG		1680534	0		&			
ANR	1680990	Identifier	flags		1680534	0					
ANR	1680991	Identifier	EX86_BYTE_ARG		1680534	1					
ANR	1680992	Identifier	GROUP_BINARY_83		1680534	1					
ANR	1680993	Identifier	GROUP_BINARY_81		1680534	2					
ANR	1680994	IfStatement	if ( ( a & SLJIT_IMM ) || ( a == 0 ) )		1680534	1					
ANR	1680995	Condition	( a & SLJIT_IMM ) || ( a == 0 )	369:6:11945:11971	1680534	0	True				
ANR	1680996	OrExpression	( a & SLJIT_IMM ) || ( a == 0 )		1680534	0		||			
ANR	1680997	BitAndExpression	a & SLJIT_IMM		1680534	0		&			
ANR	1680998	Identifier	a		1680534	0					
ANR	1680999	Identifier	SLJIT_IMM		1680534	1					
ANR	1681000	EqualityExpression	a == 0		1680534	1		==			
ANR	1681001	Identifier	a		1680534	0					
ANR	1681002	PrimaryExpression	0		1680534	1					
ANR	1681003	ExpressionStatement	* buf_ptr = 0	370:3:11977:11989	1680534	1	True				
ANR	1681004	AssignmentExpression	* buf_ptr = 0		1680534	0		=			
ANR	1681005	UnaryOperationExpression	* buf_ptr		1680534	0					
ANR	1681006	UnaryOperator	*		1680534	0					
ANR	1681007	Identifier	buf_ptr		1680534	1					
ANR	1681008	PrimaryExpression	0		1680534	1					
ANR	1681009	ElseStatement	else		1680534	0					
ANR	1681010	IfStatement	if ( ! ( flags & EX86_SSE2_OP1 ) )		1680534	0					
ANR	1681011	Condition	! ( flags & EX86_SSE2_OP1 )	371:11:12002:12025	1680534	0	True				
ANR	1681012	UnaryOperationExpression	! ( flags & EX86_SSE2_OP1 )		1680534	0					
ANR	1681013	UnaryOperator	!		1680534	0					
ANR	1681014	BitAndExpression	flags & EX86_SSE2_OP1		1680534	1		&			
ANR	1681015	Identifier	flags		1680534	0					
ANR	1681016	Identifier	EX86_SSE2_OP1		1680534	1					
ANR	1681017	ExpressionStatement	* buf_ptr = reg_map [ a ] << 3	372:3:12031:12057	1680534	1	True				
ANR	1681018	AssignmentExpression	* buf_ptr = reg_map [ a ] << 3		1680534	0		=			
ANR	1681019	UnaryOperationExpression	* buf_ptr		1680534	0					
ANR	1681020	UnaryOperator	*		1680534	0					
ANR	1681021	Identifier	buf_ptr		1680534	1					
ANR	1681022	ShiftExpression	reg_map [ a ] << 3		1680534	1		<<			
ANR	1681023	ArrayIndexing	reg_map [ a ]		1680534	0					
ANR	1681024	Identifier	reg_map		1680534	0					
ANR	1681025	Identifier	a		1680534	1					
ANR	1681026	PrimaryExpression	3		1680534	1					
ANR	1681027	ElseStatement	else		1680534	0					
ANR	1681028	ExpressionStatement	* buf_ptr = a << 3	374:3:12069:12086	1680534	0	True				
ANR	1681029	AssignmentExpression	* buf_ptr = a << 3		1680534	0		=			
ANR	1681030	UnaryOperationExpression	* buf_ptr		1680534	0					
ANR	1681031	UnaryOperator	*		1680534	0					
ANR	1681032	Identifier	buf_ptr		1680534	1					
ANR	1681033	ShiftExpression	a << 3		1680534	1		<<			
ANR	1681034	Identifier	a		1680534	0					
ANR	1681035	PrimaryExpression	3		1680534	1					
ANR	1681036	ElseStatement	else		1680534	0					
ANR	1681037	CompoundStatement		98:6:2722:2722	1680534	0					
ANR	1681038	IfStatement	if ( a & SLJIT_IMM )		1680534	0					
ANR	1681039	Condition	a & SLJIT_IMM	377:6:12105:12117	1680534	0	True				
ANR	1681040	BitAndExpression	a & SLJIT_IMM		1680534	0		&			
ANR	1681041	Identifier	a		1680534	0					
ANR	1681042	Identifier	SLJIT_IMM		1680534	1					
ANR	1681043	CompoundStatement		99:21:2745:2745	1680534	1					
ANR	1681044	IfStatement	if ( imma == 1 )		1680534	0					
ANR	1681045	Condition	imma == 1	378:7:12129:12137	1680534	0	True				
ANR	1681046	EqualityExpression	imma == 1		1680534	0		==			
ANR	1681047	Identifier	imma		1680534	0					
ANR	1681048	PrimaryExpression	1		1680534	1					
ANR	1681049	ExpressionStatement	* inst = GROUP_SHIFT_1	379:4:12144:12165	1680534	1	True				
ANR	1681050	AssignmentExpression	* inst = GROUP_SHIFT_1		1680534	0		=			
ANR	1681051	UnaryOperationExpression	* inst		1680534	0					
ANR	1681052	UnaryOperator	*		1680534	0					
ANR	1681053	Identifier	inst		1680534	1					
ANR	1681054	Identifier	GROUP_SHIFT_1		1680534	1					
ANR	1681055	ElseStatement	else		1680534	0					
ANR	1681056	ExpressionStatement	* inst = GROUP_SHIFT_N	381:4:12179:12200	1680534	0	True				
ANR	1681057	AssignmentExpression	* inst = GROUP_SHIFT_N		1680534	0		=			
ANR	1681058	UnaryOperationExpression	* inst		1680534	0					
ANR	1681059	UnaryOperator	*		1680534	0					
ANR	1681060	Identifier	inst		1680534	1					
ANR	1681061	Identifier	GROUP_SHIFT_N		1680534	1					
ANR	1681062	ElseStatement	else		1680534	0					
ANR	1681063	ExpressionStatement	* inst = GROUP_SHIFT_CL	383:3:12214:12236	1680534	0	True				
ANR	1681064	AssignmentExpression	* inst = GROUP_SHIFT_CL		1680534	0		=			
ANR	1681065	UnaryOperationExpression	* inst		1680534	0					
ANR	1681066	UnaryOperator	*		1680534	0					
ANR	1681067	Identifier	inst		1680534	1					
ANR	1681068	Identifier	GROUP_SHIFT_CL		1680534	1					
ANR	1681069	ExpressionStatement	* buf_ptr = 0	384:2:12240:12252	1680534	1	True				
ANR	1681070	AssignmentExpression	* buf_ptr = 0		1680534	0		=			
ANR	1681071	UnaryOperationExpression	* buf_ptr		1680534	0					
ANR	1681072	UnaryOperator	*		1680534	0					
ANR	1681073	Identifier	buf_ptr		1680534	1					
ANR	1681074	PrimaryExpression	0		1680534	1					
ANR	1681075	IfStatement	if ( ! ( b & SLJIT_MEM ) )		1680534	24					
ANR	1681076	Condition	! ( b & SLJIT_MEM )	387:5:12263:12278	1680534	0	True				
ANR	1681077	UnaryOperationExpression	! ( b & SLJIT_MEM )		1680534	0					
ANR	1681078	UnaryOperator	!		1680534	0					
ANR	1681079	BitAndExpression	b & SLJIT_MEM		1680534	1		&			
ANR	1681080	Identifier	b		1680534	0					
ANR	1681081	Identifier	SLJIT_MEM		1680534	1					
ANR	1681082	ExpressionStatement	* buf_ptr ++ |= MOD_REG + ( ( ! ( flags & EX86_SSE2_OP2 ) ) ? reg_map [ b ] : b )	388:2:12283:12352	1680534	1	True				
ANR	1681083	AssignmentExpression	* buf_ptr ++ |= MOD_REG + ( ( ! ( flags & EX86_SSE2_OP2 ) ) ? reg_map [ b ] : b )		1680534	0		|=			
ANR	1681084	UnaryOperationExpression	* buf_ptr ++		1680534	0					
ANR	1681085	UnaryOperator	*		1680534	0					
ANR	1681086	PostIncDecOperationExpression	buf_ptr ++		1680534	1					
ANR	1681087	Identifier	buf_ptr		1680534	0					
ANR	1681088	IncDec	++		1680534	1					
ANR	1681089	AdditiveExpression	MOD_REG + ( ( ! ( flags & EX86_SSE2_OP2 ) ) ? reg_map [ b ] : b )		1680534	1		+			
ANR	1681090	Identifier	MOD_REG		1680534	0					
ANR	1681091	ConditionalExpression	( ! ( flags & EX86_SSE2_OP2 ) ) ? reg_map [ b ] : b		1680534	1					
ANR	1681092	Condition	! ( flags & EX86_SSE2_OP2 )		1680534	0					
ANR	1681093	UnaryOperationExpression	! ( flags & EX86_SSE2_OP2 )		1680534	0					
ANR	1681094	UnaryOperator	!		1680534	0					
ANR	1681095	BitAndExpression	flags & EX86_SSE2_OP2		1680534	1		&			
ANR	1681096	Identifier	flags		1680534	0					
ANR	1681097	Identifier	EX86_SSE2_OP2		1680534	1					
ANR	1681098	ArrayIndexing	reg_map [ b ]		1680534	1					
ANR	1681099	Identifier	reg_map		1680534	0					
ANR	1681100	Identifier	b		1680534	1					
ANR	1681101	Identifier	b		1680534	2					
ANR	1681102	ElseStatement	else		1680534	0					
ANR	1681103	IfStatement	if ( ( b & REG_MASK ) != SLJIT_UNUSED )		1680534	0					
ANR	1681104	Condition	( b & REG_MASK ) != SLJIT_UNUSED	389:10:12364:12393	1680534	0	True				
ANR	1681105	EqualityExpression	( b & REG_MASK ) != SLJIT_UNUSED		1680534	0		!=			
ANR	1681106	BitAndExpression	b & REG_MASK		1680534	0		&			
ANR	1681107	Identifier	b		1680534	0					
ANR	1681108	Identifier	REG_MASK		1680534	1					
ANR	1681109	Identifier	SLJIT_UNUSED		1680534	1					
ANR	1681110	CompoundStatement		111:42:3021:3021	1680534	1					
ANR	1681111	IfStatement	if ( ( b & OFFS_REG_MASK ) == SLJIT_UNUSED || ( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP ) )		1680534	0					
ANR	1681112	Condition	( b & OFFS_REG_MASK ) == SLJIT_UNUSED || ( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP )	390:6:12404:12486	1680534	0	True				
ANR	1681113	OrExpression	( b & OFFS_REG_MASK ) == SLJIT_UNUSED || ( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP )		1680534	0		||			
ANR	1681114	EqualityExpression	( b & OFFS_REG_MASK ) == SLJIT_UNUSED		1680534	0		==			
ANR	1681115	BitAndExpression	b & OFFS_REG_MASK		1680534	0		&			
ANR	1681116	Identifier	b		1680534	0					
ANR	1681117	Identifier	OFFS_REG_MASK		1680534	1					
ANR	1681118	Identifier	SLJIT_UNUSED		1680534	1					
ANR	1681119	EqualityExpression	( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP )		1680534	1		==			
ANR	1681120	BitAndExpression	b & OFFS_REG_MASK		1680534	0		&			
ANR	1681121	Identifier	b		1680534	0					
ANR	1681122	Identifier	OFFS_REG_MASK		1680534	1					
ANR	1681123	CallExpression	TO_OFFS_REG ( SLJIT_SP )		1680534	1					
ANR	1681124	Callee	TO_OFFS_REG		1680534	0					
ANR	1681125	Identifier	TO_OFFS_REG		1680534	0					
ANR	1681126	ArgumentList	SLJIT_SP		1680534	1					
ANR	1681127	Argument	SLJIT_SP		1680534	0					
ANR	1681128	Identifier	SLJIT_SP		1680534	0					
ANR	1681129	CompoundStatement		112:91:3114:3114	1680534	1					
ANR	1681130	IfStatement	if ( immb != 0 )		1680534	0					
ANR	1681131	Condition	immb != 0	391:7:12498:12506	1680534	0	True				
ANR	1681132	EqualityExpression	immb != 0		1680534	0		!=			
ANR	1681133	Identifier	immb		1680534	0					
ANR	1681134	PrimaryExpression	0		1680534	1					
ANR	1681135	CompoundStatement		113:18:3134:3134	1680534	1					
ANR	1681136	IfStatement	if ( immb <= 127 && immb >= - 128 )		1680534	0					
ANR	1681137	Condition	immb <= 127 && immb >= - 128	392:8:12519:12545	1680534	0	True				
ANR	1681138	AndExpression	immb <= 127 && immb >= - 128		1680534	0		&&			
ANR	1681139	RelationalExpression	immb <= 127		1680534	0		<=			
ANR	1681140	Identifier	immb		1680534	0					
ANR	1681141	PrimaryExpression	127		1680534	1					
ANR	1681142	RelationalExpression	immb >= - 128		1680534	1		>=			
ANR	1681143	Identifier	immb		1680534	0					
ANR	1681144	UnaryOperationExpression	- 128		1680534	1					
ANR	1681145	UnaryOperator	-		1680534	0					
ANR	1681146	PrimaryExpression	128		1680534	1					
ANR	1681147	ExpressionStatement	* buf_ptr |= 0x40	393:5:12553:12569	1680534	1	True				
ANR	1681148	AssignmentExpression	* buf_ptr |= 0x40		1680534	0		|=			
ANR	1681149	UnaryOperationExpression	* buf_ptr		1680534	0					
ANR	1681150	UnaryOperator	*		1680534	0					
ANR	1681151	Identifier	buf_ptr		1680534	1					
ANR	1681152	PrimaryExpression	0x40		1680534	1					
ANR	1681153	ElseStatement	else		1680534	0					
ANR	1681154	ExpressionStatement	* buf_ptr |= 0x80	395:5:12585:12601	1680534	0	True				
ANR	1681155	AssignmentExpression	* buf_ptr |= 0x80		1680534	0		|=			
ANR	1681156	UnaryOperationExpression	* buf_ptr		1680534	0					
ANR	1681157	UnaryOperator	*		1680534	0					
ANR	1681158	Identifier	buf_ptr		1680534	1					
ANR	1681159	PrimaryExpression	0x80		1680534	1					
ANR	1681160	IfStatement	if ( ( b & OFFS_REG_MASK ) == SLJIT_UNUSED )		1680534	1					
ANR	1681161	Condition	( b & OFFS_REG_MASK ) == SLJIT_UNUSED	398:7:12616:12650	1680534	0	True				
ANR	1681162	EqualityExpression	( b & OFFS_REG_MASK ) == SLJIT_UNUSED		1680534	0		==			
ANR	1681163	BitAndExpression	b & OFFS_REG_MASK		1680534	0		&			
ANR	1681164	Identifier	b		1680534	0					
ANR	1681165	Identifier	OFFS_REG_MASK		1680534	1					
ANR	1681166	Identifier	SLJIT_UNUSED		1680534	1					
ANR	1681167	ExpressionStatement	* buf_ptr ++ |= reg_map [ b & REG_MASK ]	399:4:12657:12692	1680534	1	True				
ANR	1681168	AssignmentExpression	* buf_ptr ++ |= reg_map [ b & REG_MASK ]		1680534	0		|=			
ANR	1681169	UnaryOperationExpression	* buf_ptr ++		1680534	0					
ANR	1681170	UnaryOperator	*		1680534	0					
ANR	1681171	PostIncDecOperationExpression	buf_ptr ++		1680534	1					
ANR	1681172	Identifier	buf_ptr		1680534	0					
ANR	1681173	IncDec	++		1680534	1					
ANR	1681174	ArrayIndexing	reg_map [ b & REG_MASK ]		1680534	1					
ANR	1681175	Identifier	reg_map		1680534	0					
ANR	1681176	BitAndExpression	b & REG_MASK		1680534	1		&			
ANR	1681177	Identifier	b		1680534	0					
ANR	1681178	Identifier	REG_MASK		1680534	1					
ANR	1681179	ElseStatement	else		1680534	0					
ANR	1681180	CompoundStatement		122:8:3327:3327	1680534	0					
ANR	1681181	ExpressionStatement	* buf_ptr ++ |= 0x04	401:4:12708:12726	1680534	0	True				
ANR	1681182	AssignmentExpression	* buf_ptr ++ |= 0x04		1680534	0		|=			
ANR	1681183	UnaryOperationExpression	* buf_ptr ++		1680534	0					
ANR	1681184	UnaryOperator	*		1680534	0					
ANR	1681185	PostIncDecOperationExpression	buf_ptr ++		1680534	1					
ANR	1681186	Identifier	buf_ptr		1680534	0					
ANR	1681187	IncDec	++		1680534	1					
ANR	1681188	PrimaryExpression	0x04		1680534	1					
ANR	1681189	ExpressionStatement	* buf_ptr ++ = reg_map [ b & REG_MASK ] | ( reg_map [ OFFS_REG ( b ) ] << 3 )	402:4:12732:12796	1680534	1	True				
ANR	1681190	AssignmentExpression	* buf_ptr ++ = reg_map [ b & REG_MASK ] | ( reg_map [ OFFS_REG ( b ) ] << 3 )		1680534	0		=			
ANR	1681191	UnaryOperationExpression	* buf_ptr ++		1680534	0					
ANR	1681192	UnaryOperator	*		1680534	0					
ANR	1681193	PostIncDecOperationExpression	buf_ptr ++		1680534	1					
ANR	1681194	Identifier	buf_ptr		1680534	0					
ANR	1681195	IncDec	++		1680534	1					
ANR	1681196	InclusiveOrExpression	reg_map [ b & REG_MASK ] | ( reg_map [ OFFS_REG ( b ) ] << 3 )		1680534	1		|			
ANR	1681197	ArrayIndexing	reg_map [ b & REG_MASK ]		1680534	0					
ANR	1681198	Identifier	reg_map		1680534	0					
ANR	1681199	BitAndExpression	b & REG_MASK		1680534	1		&			
ANR	1681200	Identifier	b		1680534	0					
ANR	1681201	Identifier	REG_MASK		1680534	1					
ANR	1681202	ShiftExpression	reg_map [ OFFS_REG ( b ) ] << 3		1680534	1		<<			
ANR	1681203	ArrayIndexing	reg_map [ OFFS_REG ( b ) ]		1680534	0					
ANR	1681204	Identifier	reg_map		1680534	0					
ANR	1681205	CallExpression	OFFS_REG ( b )		1680534	1					
ANR	1681206	Callee	OFFS_REG		1680534	0					
ANR	1681207	Identifier	OFFS_REG		1680534	0					
ANR	1681208	ArgumentList	b		1680534	1					
ANR	1681209	Argument	b		1680534	0					
ANR	1681210	Identifier	b		1680534	0					
ANR	1681211	PrimaryExpression	3		1680534	1					
ANR	1681212	IfStatement	if ( immb != 0 )		1680534	2					
ANR	1681213	Condition	immb != 0	405:7:12811:12819	1680534	0	True				
ANR	1681214	EqualityExpression	immb != 0		1680534	0		!=			
ANR	1681215	Identifier	immb		1680534	0					
ANR	1681216	PrimaryExpression	0		1680534	1					
ANR	1681217	CompoundStatement		127:18:3447:3447	1680534	1					
ANR	1681218	IfStatement	if ( immb <= 127 && immb >= - 128 )		1680534	0					
ANR	1681219	Condition	immb <= 127 && immb >= - 128	406:8:12832:12858	1680534	0	True				
ANR	1681220	AndExpression	immb <= 127 && immb >= - 128		1680534	0		&&			
ANR	1681221	RelationalExpression	immb <= 127		1680534	0		<=			
ANR	1681222	Identifier	immb		1680534	0					
ANR	1681223	PrimaryExpression	127		1680534	1					
ANR	1681224	RelationalExpression	immb >= - 128		1680534	1		>=			
ANR	1681225	Identifier	immb		1680534	0					
ANR	1681226	UnaryOperationExpression	- 128		1680534	1					
ANR	1681227	UnaryOperator	-		1680534	0					
ANR	1681228	PrimaryExpression	128		1680534	1					
ANR	1681229	ExpressionStatement	* buf_ptr ++ = immb	407:5:12866:12883	1680534	1	True				
ANR	1681230	AssignmentExpression	* buf_ptr ++ = immb		1680534	0		=			
ANR	1681231	UnaryOperationExpression	* buf_ptr ++		1680534	0					
ANR	1681232	UnaryOperator	*		1680534	0					
ANR	1681233	PostIncDecOperationExpression	buf_ptr ++		1680534	1					
ANR	1681234	Identifier	buf_ptr		1680534	0					
ANR	1681235	IncDec	++		1680534	1					
ANR	1681236	Identifier	immb		1680534	1					
ANR	1681237	ElseStatement	else		1680534	0					
ANR	1681238	CompoundStatement		130:9:3545:3545	1680534	0					
ANR	1681239	ExpressionStatement	* ( sljit_sw * ) buf_ptr = immb	409:5:12927:12953	1680534	0	True				
ANR	1681240	AssignmentExpression	* ( sljit_sw * ) buf_ptr = immb		1680534	0		=			
ANR	1681241	UnaryOperationExpression	* ( sljit_sw * ) buf_ptr		1680534	0					
ANR	1681242	UnaryOperator	*		1680534	0					
ANR	1681243	CastExpression	( sljit_sw * ) buf_ptr		1680534	1					
ANR	1681244	CastTarget	sljit_sw *		1680534	0					
ANR	1681245	Identifier	buf_ptr		1680534	1					
ANR	1681246	Identifier	immb		1680534	1					
ANR	1681247	ExpressionStatement	buf_ptr += sizeof ( sljit_sw )	410:5:12987:13014	1680534	1	True				
ANR	1681248	AssignmentExpression	buf_ptr += sizeof ( sljit_sw )		1680534	0		+=			
ANR	1681249	Identifier	buf_ptr		1680534	0					
ANR	1681250	SizeofExpression	sizeof ( sljit_sw )		1680534	1					
ANR	1681251	Sizeof	sizeof		1680534	0					
ANR	1681252	SizeofOperand	sljit_sw		1680534	1					
ANR	1681253	ElseStatement	else		1680534	0					
ANR	1681254	CompoundStatement		136:7:3663:3663	1680534	0					
ANR	1681255	ExpressionStatement	* buf_ptr ++ |= 0x04	415:3:13043:13061	1680534	0	True				
ANR	1681256	AssignmentExpression	* buf_ptr ++ |= 0x04		1680534	0		|=			
ANR	1681257	UnaryOperationExpression	* buf_ptr ++		1680534	0					
ANR	1681258	UnaryOperator	*		1680534	0					
ANR	1681259	PostIncDecOperationExpression	buf_ptr ++		1680534	1					
ANR	1681260	Identifier	buf_ptr		1680534	0					
ANR	1681261	IncDec	++		1680534	1					
ANR	1681262	PrimaryExpression	0x04		1680534	1					
ANR	1681263	ExpressionStatement	* buf_ptr ++ = reg_map [ b & REG_MASK ] | ( reg_map [ OFFS_REG ( b ) ] << 3 ) | ( immb << 6 )	416:3:13066:13144	1680534	1	True				
ANR	1681264	AssignmentExpression	* buf_ptr ++ = reg_map [ b & REG_MASK ] | ( reg_map [ OFFS_REG ( b ) ] << 3 ) | ( immb << 6 )		1680534	0		=			
ANR	1681265	UnaryOperationExpression	* buf_ptr ++		1680534	0					
ANR	1681266	UnaryOperator	*		1680534	0					
ANR	1681267	PostIncDecOperationExpression	buf_ptr ++		1680534	1					
ANR	1681268	Identifier	buf_ptr		1680534	0					
ANR	1681269	IncDec	++		1680534	1					
ANR	1681270	InclusiveOrExpression	reg_map [ b & REG_MASK ] | ( reg_map [ OFFS_REG ( b ) ] << 3 ) | ( immb << 6 )		1680534	1		|			
ANR	1681271	ArrayIndexing	reg_map [ b & REG_MASK ]		1680534	0					
ANR	1681272	Identifier	reg_map		1680534	0					
ANR	1681273	BitAndExpression	b & REG_MASK		1680534	1		&			
ANR	1681274	Identifier	b		1680534	0					
ANR	1681275	Identifier	REG_MASK		1680534	1					
ANR	1681276	InclusiveOrExpression	( reg_map [ OFFS_REG ( b ) ] << 3 ) | ( immb << 6 )		1680534	1		|			
ANR	1681277	ShiftExpression	reg_map [ OFFS_REG ( b ) ] << 3		1680534	0		<<			
ANR	1681278	ArrayIndexing	reg_map [ OFFS_REG ( b ) ]		1680534	0					
ANR	1681279	Identifier	reg_map		1680534	0					
ANR	1681280	CallExpression	OFFS_REG ( b )		1680534	1					
ANR	1681281	Callee	OFFS_REG		1680534	0					
ANR	1681282	Identifier	OFFS_REG		1680534	0					
ANR	1681283	ArgumentList	b		1680534	1					
ANR	1681284	Argument	b		1680534	0					
ANR	1681285	Identifier	b		1680534	0					
ANR	1681286	PrimaryExpression	3		1680534	1					
ANR	1681287	ShiftExpression	immb << 6		1680534	1		<<			
ANR	1681288	Identifier	immb		1680534	0					
ANR	1681289	PrimaryExpression	6		1680534	1					
ANR	1681290	ElseStatement	else		1680534	0					
ANR	1681291	CompoundStatement		141:6:3784:3784	1680534	0					
ANR	1681292	ExpressionStatement	* buf_ptr ++ |= 0x05	420:2:13163:13181	1680534	0	True				
ANR	1681293	AssignmentExpression	* buf_ptr ++ |= 0x05		1680534	0		|=			
ANR	1681294	UnaryOperationExpression	* buf_ptr ++		1680534	0					
ANR	1681295	UnaryOperator	*		1680534	0					
ANR	1681296	PostIncDecOperationExpression	buf_ptr ++		1680534	1					
ANR	1681297	Identifier	buf_ptr		1680534	0					
ANR	1681298	IncDec	++		1680534	1					
ANR	1681299	PrimaryExpression	0x05		1680534	1					
ANR	1681300	ExpressionStatement	* ( sljit_sw * ) buf_ptr = immb	421:2:13185:13211	1680534	1	True				
ANR	1681301	AssignmentExpression	* ( sljit_sw * ) buf_ptr = immb		1680534	0		=			
ANR	1681302	UnaryOperationExpression	* ( sljit_sw * ) buf_ptr		1680534	0					
ANR	1681303	UnaryOperator	*		1680534	0					
ANR	1681304	CastExpression	( sljit_sw * ) buf_ptr		1680534	1					
ANR	1681305	CastTarget	sljit_sw *		1680534	0					
ANR	1681306	Identifier	buf_ptr		1680534	1					
ANR	1681307	Identifier	immb		1680534	1					
ANR	1681308	ExpressionStatement	buf_ptr += sizeof ( sljit_sw )	422:2:13242:13269	1680534	2	True				
ANR	1681309	AssignmentExpression	buf_ptr += sizeof ( sljit_sw )		1680534	0		+=			
ANR	1681310	Identifier	buf_ptr		1680534	0					
ANR	1681311	SizeofExpression	sizeof ( sljit_sw )		1680534	1					
ANR	1681312	Sizeof	sizeof		1680534	0					
ANR	1681313	SizeofOperand	sljit_sw		1680534	1					
ANR	1681314	IfStatement	if ( a & SLJIT_IMM )		1680534	25					
ANR	1681315	Condition	a & SLJIT_IMM	425:5:13280:13292	1680534	0	True				
ANR	1681316	BitAndExpression	a & SLJIT_IMM		1680534	0		&			
ANR	1681317	Identifier	a		1680534	0					
ANR	1681318	Identifier	SLJIT_IMM		1680534	1					
ANR	1681319	CompoundStatement		147:20:3920:3920	1680534	1					
ANR	1681320	IfStatement	if ( flags & EX86_BYTE_ARG )		1680534	0					
ANR	1681321	Condition	flags & EX86_BYTE_ARG	426:6:13303:13323	1680534	0	True				
ANR	1681322	BitAndExpression	flags & EX86_BYTE_ARG		1680534	0		&			
ANR	1681323	Identifier	flags		1680534	0					
ANR	1681324	Identifier	EX86_BYTE_ARG		1680534	1					
ANR	1681325	ExpressionStatement	* buf_ptr = imma	427:3:13329:13344	1680534	1	True				
ANR	1681326	AssignmentExpression	* buf_ptr = imma		1680534	0		=			
ANR	1681327	UnaryOperationExpression	* buf_ptr		1680534	0					
ANR	1681328	UnaryOperator	*		1680534	0					
ANR	1681329	Identifier	buf_ptr		1680534	1					
ANR	1681330	Identifier	imma		1680534	1					
ANR	1681331	ElseStatement	else		1680534	0					
ANR	1681332	IfStatement	if ( flags & EX86_HALF_ARG )		1680534	0					
ANR	1681333	Condition	flags & EX86_HALF_ARG	428:11:13357:13377	1680534	0	True				
ANR	1681334	BitAndExpression	flags & EX86_HALF_ARG		1680534	0		&			
ANR	1681335	Identifier	flags		1680534	0					
ANR	1681336	Identifier	EX86_HALF_ARG		1680534	1					
ANR	1681337	ExpressionStatement	* ( short * ) buf_ptr = imma	429:3:13383:13406	1680534	1	True				
ANR	1681338	AssignmentExpression	* ( short * ) buf_ptr = imma		1680534	0		=			
ANR	1681339	UnaryOperationExpression	* ( short * ) buf_ptr		1680534	0					
ANR	1681340	UnaryOperator	*		1680534	0					
ANR	1681341	CastExpression	( short * ) buf_ptr		1680534	1					
ANR	1681342	CastTarget	short *		1680534	0					
ANR	1681343	Identifier	buf_ptr		1680534	1					
ANR	1681344	Identifier	imma		1680534	1					
ANR	1681345	ElseStatement	else		1680534	0					
ANR	1681346	IfStatement	if ( ! ( flags & EX86_SHIFT_INS ) )		1680534	0					
ANR	1681347	Condition	! ( flags & EX86_SHIFT_INS )	430:11:13419:13443	1680534	0	True				
ANR	1681348	UnaryOperationExpression	! ( flags & EX86_SHIFT_INS )		1680534	0					
ANR	1681349	UnaryOperator	!		1680534	0					
ANR	1681350	BitAndExpression	flags & EX86_SHIFT_INS		1680534	1		&			
ANR	1681351	Identifier	flags		1680534	0					
ANR	1681352	Identifier	EX86_SHIFT_INS		1680534	1					
ANR	1681353	ExpressionStatement	* ( sljit_sw * ) buf_ptr = imma	431:3:13449:13475	1680534	1	True				
ANR	1681354	AssignmentExpression	* ( sljit_sw * ) buf_ptr = imma		1680534	0		=			
ANR	1681355	UnaryOperationExpression	* ( sljit_sw * ) buf_ptr		1680534	0					
ANR	1681356	UnaryOperator	*		1680534	0					
ANR	1681357	CastExpression	( sljit_sw * ) buf_ptr		1680534	1					
ANR	1681358	CastTarget	sljit_sw *		1680534	0					
ANR	1681359	Identifier	buf_ptr		1680534	1					
ANR	1681360	Identifier	imma		1680534	1					
ANR	1681361	ReturnStatement	return ! ( flags & EX86_SHIFT_INS ) ? inst : ( inst + 1 ) ;	434:1:13482:13534	1680534	26	True				
ANR	1681362	ConditionalExpression	! ( flags & EX86_SHIFT_INS ) ? inst : ( inst + 1 )		1680534	0					
ANR	1681363	Condition	! ( flags & EX86_SHIFT_INS )		1680534	0					
ANR	1681364	UnaryOperationExpression	! ( flags & EX86_SHIFT_INS )		1680534	0					
ANR	1681365	UnaryOperator	!		1680534	0					
ANR	1681366	BitAndExpression	flags & EX86_SHIFT_INS		1680534	1		&			
ANR	1681367	Identifier	flags		1680534	0					
ANR	1681368	Identifier	EX86_SHIFT_INS		1680534	1					
ANR	1681369	Identifier	inst		1680534	1					
ANR	1681370	AdditiveExpression	inst + 1		1680534	2		+			
ANR	1681371	Identifier	inst		1680534	0					
ANR	1681372	PrimaryExpression	1		1680534	1					
ANR	1681373	ReturnType	static sljit_ub *		1680534	1					
ANR	1681374	Identifier	emit_x86_instruction		1680534	2					
ANR	1681375	ParameterList	"struct sljit_compiler * compiler , sljit_si size , sljit_si a , sljit_sw imma , sljit_si b , sljit_sw immb"		1680534	3					
ANR	1681376	Parameter	struct sljit_compiler * compiler	274:38:9184:9214	1680534	0	True				
ANR	1681377	ParameterType	struct sljit_compiler *		1680534	0					
ANR	1681378	Identifier	compiler		1680534	1					
ANR	1681379	Parameter	sljit_si size	274:71:9217:9229	1680534	1	True				
ANR	1681380	ParameterType	sljit_si		1680534	0					
ANR	1681381	Identifier	size		1680534	1					
ANR	1681382	Parameter	sljit_si a	276:1:9275:9284	1680534	2	True				
ANR	1681383	ParameterType	sljit_si		1680534	0					
ANR	1681384	Identifier	a		1680534	1					
ANR	1681385	Parameter	sljit_sw imma	276:13:9287:9299	1680534	3	True				
ANR	1681386	ParameterType	sljit_sw		1680534	0					
ANR	1681387	Identifier	imma		1680534	1					
ANR	1681388	Parameter	sljit_si b	278:1:9347:9356	1680534	4	True				
ANR	1681389	ParameterType	sljit_si		1680534	0					
ANR	1681390	Identifier	b		1680534	1					
ANR	1681391	Parameter	sljit_sw immb	278:13:9359:9371	1680534	5	True				
ANR	1681392	ParameterType	sljit_sw		1680534	0					
ANR	1681393	Identifier	immb		1680534	1					
ANR	1681394	CFGEntryNode	ENTRY		1680534		True				
ANR	1681395	CFGExitNode	EXIT		1680534		True				
ANR	1681396	Symbol	SLJIT_MEM		1680534						
ANR	1681397	Symbol	immb		1680534						
ANR	1681398	Symbol	* inst ++		1680534						
ANR	1681399	Symbol	imma		1680534						
ANR	1681400	Symbol	reg_map		1680534						
ANR	1681401	Symbol	SLJIT_IMM		1680534						
ANR	1681402	Symbol	GROUP_SHIFT_N		1680534						
ANR	1681403	Symbol	EX86_PREF_F2		1680534						
ANR	1681404	Symbol	EX86_PREF_F3		1680534						
ANR	1681405	Symbol	OFFS_REG_MASK		1680534						
ANR	1681406	Symbol	* buf_ptr ++		1680534						
ANR	1681407	Symbol	* reg_map		1680534						
ANR	1681408	Symbol	GROUP_SHIFT_CL		1680534						
ANR	1681409	Symbol	EX86_SSE2_OP2		1680534						
ANR	1681410	Symbol	buf_ptr		1680534						
ANR	1681411	Symbol	EX86_SSE2_OP1		1680534						
ANR	1681412	Symbol	size		1680534						
ANR	1681413	Symbol	EX86_SHIFT_INS		1680534						
ANR	1681414	Symbol	GROUP_BINARY_81		1680534						
ANR	1681415	Symbol	GROUP_BINARY_83		1680534						
ANR	1681416	Symbol	OFFS_REG		1680534						
ANR	1681417	Symbol	EX86_BYTE_ARG		1680534						
ANR	1681418	Symbol	* ( short * ) buf_ptr		1680534						
ANR	1681419	Symbol	* REG_MASK		1680534						
ANR	1681420	Symbol	EX86_SSE2		1680534						
ANR	1681421	Symbol	flags		1680534						
ANR	1681422	Symbol	SLJIT_SP		1680534						
ANR	1681423	Symbol	SLJIT_PREF_SHIFT_REG		1680534						
ANR	1681424	Symbol	EX86_PREF_66		1680534						
ANR	1681425	Symbol	~0xf		1680534						
ANR	1681426	Symbol	EX86_BIN_INS		1680534						
ANR	1681427	Symbol	compiler		1680534						
ANR	1681428	Symbol	* buf_ptr		1680534						
ANR	1681429	Symbol	a		1680534						
ANR	1681430	Symbol	TO_OFFS_REG		1680534						
ANR	1681431	Symbol	b		1680534						
ANR	1681432	Symbol	REG_MASK		1680534						
ANR	1681433	Symbol	* inst		1680534						
ANR	1681434	Symbol	* a		1680534						
ANR	1681435	Symbol	* b		1680534						
ANR	1681436	Symbol	* ( sljit_sw * ) buf_ptr		1680534						
ANR	1681437	Symbol	MOD_REG		1680534						
ANR	1681438	Symbol	* OFFS_REG		1680534						
ANR	1681439	Symbol	EX86_HALF_ARG		1680534						
ANR	1681440	Symbol	SLJIT_UNUSED		1680534						
ANR	1681441	Symbol	inst		1680534						
ANR	1681442	Symbol	ensure_buf		1680534						
ANR	1681443	Symbol	inst_size		1680534						
ANR	1681444	Symbol	GROUP_SHIFT_1		1680534						
ANR	1681445	Function	call_with_args	441:0:13768:14955							
ANR	1681446	FunctionDef	"call_with_args (struct sljit_compiler * compiler , sljit_si type)"		1681445	0					
ANR	1681447	CompoundStatement		442:0:13860:14955	1681445	0					
ANR	1681448	IdentifierDeclStatement	sljit_ub * inst ;	443:1:13863:13877	1681445	0	True				
ANR	1681449	IdentifierDecl	* inst		1681445	0					
ANR	1681450	IdentifierDeclType	sljit_ub *		1681445	0					
ANR	1681451	Identifier	inst		1681445	1					
ANR	1681452	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , type >= SLJIT_CALL3 ? 1 + 2 + 1 : 1 + 2 )"	446:1:13942:14021	1681445	1	True				
ANR	1681453	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , type >= SLJIT_CALL3 ? 1 + 2 + 1 : 1 + 2 )"		1681445	0		=			
ANR	1681454	Identifier	inst		1681445	0					
ANR	1681455	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , type >= SLJIT_CALL3 ? 1 + 2 + 1 : 1 + 2 )"		1681445	1					
ANR	1681456	CastTarget	sljit_ub *		1681445	0					
ANR	1681457	CallExpression	"ensure_buf ( compiler , type >= SLJIT_CALL3 ? 1 + 2 + 1 : 1 + 2 )"		1681445	1					
ANR	1681458	Callee	ensure_buf		1681445	0					
ANR	1681459	Identifier	ensure_buf		1681445	0					
ANR	1681460	ArgumentList	compiler		1681445	1					
ANR	1681461	Argument	compiler		1681445	0					
ANR	1681462	Identifier	compiler		1681445	0					
ANR	1681463	Argument	type >= SLJIT_CALL3 ? 1 + 2 + 1 : 1 + 2		1681445	1					
ANR	1681464	ConditionalExpression	type >= SLJIT_CALL3 ? 1 + 2 + 1 : 1 + 2		1681445	0					
ANR	1681465	Condition	type >= SLJIT_CALL3		1681445	0					
ANR	1681466	RelationalExpression	type >= SLJIT_CALL3		1681445	0		>=			
ANR	1681467	Identifier	type		1681445	0					
ANR	1681468	Identifier	SLJIT_CALL3		1681445	1					
ANR	1681469	AdditiveExpression	1 + 2 + 1		1681445	1		+			
ANR	1681470	PrimaryExpression	1		1681445	0					
ANR	1681471	AdditiveExpression	2 + 1		1681445	1		+			
ANR	1681472	PrimaryExpression	2		1681445	0					
ANR	1681473	PrimaryExpression	1		1681445	1					
ANR	1681474	AdditiveExpression	1 + 2		1681445	2		+			
ANR	1681475	PrimaryExpression	1		1681445	0					
ANR	1681476	PrimaryExpression	2		1681445	1					
ANR	1681477	ExpressionStatement	FAIL_IF ( ! inst )	447:1:14024:14038	1681445	2	True				
ANR	1681478	CallExpression	FAIL_IF ( ! inst )		1681445	0					
ANR	1681479	Callee	FAIL_IF		1681445	0					
ANR	1681480	Identifier	FAIL_IF		1681445	0					
ANR	1681481	ArgumentList	! inst		1681445	1					
ANR	1681482	Argument	! inst		1681445	0					
ANR	1681483	UnaryOperationExpression	! inst		1681445	0					
ANR	1681484	UnaryOperator	!		1681445	0					
ANR	1681485	Identifier	inst		1681445	1					
ANR	1681486	ExpressionStatement	INC_SIZE ( type >= SLJIT_CALL3 ? 2 + 1 : 2 )	448:1:14041:14082	1681445	3	True				
ANR	1681487	CallExpression	INC_SIZE ( type >= SLJIT_CALL3 ? 2 + 1 : 2 )		1681445	0					
ANR	1681488	Callee	INC_SIZE		1681445	0					
ANR	1681489	Identifier	INC_SIZE		1681445	0					
ANR	1681490	ArgumentList	type >= SLJIT_CALL3 ? 2 + 1 : 2		1681445	1					
ANR	1681491	Argument	type >= SLJIT_CALL3 ? 2 + 1 : 2		1681445	0					
ANR	1681492	ConditionalExpression	type >= SLJIT_CALL3 ? 2 + 1 : 2		1681445	0					
ANR	1681493	Condition	type >= SLJIT_CALL3		1681445	0					
ANR	1681494	RelationalExpression	type >= SLJIT_CALL3		1681445	0		>=			
ANR	1681495	Identifier	type		1681445	0					
ANR	1681496	Identifier	SLJIT_CALL3		1681445	1					
ANR	1681497	AdditiveExpression	2 + 1		1681445	1		+			
ANR	1681498	PrimaryExpression	2		1681445	0					
ANR	1681499	PrimaryExpression	1		1681445	1					
ANR	1681500	PrimaryExpression	2		1681445	2					
ANR	1681501	IfStatement	if ( type >= SLJIT_CALL3 )		1681445	4					
ANR	1681502	Condition	type >= SLJIT_CALL3	450:5:14090:14108	1681445	0	True				
ANR	1681503	RelationalExpression	type >= SLJIT_CALL3		1681445	0		>=			
ANR	1681504	Identifier	type		1681445	0					
ANR	1681505	Identifier	SLJIT_CALL3		1681445	1					
ANR	1681506	ExpressionStatement	PUSH_REG ( reg_map [ SLJIT_R2 ] )	451:2:14113:14140	1681445	1	True				
ANR	1681507	CallExpression	PUSH_REG ( reg_map [ SLJIT_R2 ] )		1681445	0					
ANR	1681508	Callee	PUSH_REG		1681445	0					
ANR	1681509	Identifier	PUSH_REG		1681445	0					
ANR	1681510	ArgumentList	reg_map [ SLJIT_R2 ]		1681445	1					
ANR	1681511	Argument	reg_map [ SLJIT_R2 ]		1681445	0					
ANR	1681512	ArrayIndexing	reg_map [ SLJIT_R2 ]		1681445	0					
ANR	1681513	Identifier	reg_map		1681445	0					
ANR	1681514	Identifier	SLJIT_R2		1681445	1					
ANR	1681515	ExpressionStatement	* inst ++ = MOV_r_rm	452:1:14143:14161	1681445	5	True				
ANR	1681516	AssignmentExpression	* inst ++ = MOV_r_rm		1681445	0		=			
ANR	1681517	UnaryOperationExpression	* inst ++		1681445	0					
ANR	1681518	UnaryOperator	*		1681445	0					
ANR	1681519	PostIncDecOperationExpression	inst ++		1681445	1					
ANR	1681520	Identifier	inst		1681445	0					
ANR	1681521	IncDec	++		1681445	1					
ANR	1681522	Identifier	MOV_r_rm		1681445	1					
ANR	1681523	ExpressionStatement	* inst ++ = MOD_REG | ( reg_map [ SLJIT_R2 ] << 3 ) | reg_map [ SLJIT_R0 ]	453:1:14164:14228	1681445	6	True				
ANR	1681524	AssignmentExpression	* inst ++ = MOD_REG | ( reg_map [ SLJIT_R2 ] << 3 ) | reg_map [ SLJIT_R0 ]		1681445	0		=			
ANR	1681525	UnaryOperationExpression	* inst ++		1681445	0					
ANR	1681526	UnaryOperator	*		1681445	0					
ANR	1681527	PostIncDecOperationExpression	inst ++		1681445	1					
ANR	1681528	Identifier	inst		1681445	0					
ANR	1681529	IncDec	++		1681445	1					
ANR	1681530	InclusiveOrExpression	MOD_REG | ( reg_map [ SLJIT_R2 ] << 3 ) | reg_map [ SLJIT_R0 ]		1681445	1		|			
ANR	1681531	Identifier	MOD_REG		1681445	0					
ANR	1681532	InclusiveOrExpression	( reg_map [ SLJIT_R2 ] << 3 ) | reg_map [ SLJIT_R0 ]		1681445	1		|			
ANR	1681533	ShiftExpression	reg_map [ SLJIT_R2 ] << 3		1681445	0		<<			
ANR	1681534	ArrayIndexing	reg_map [ SLJIT_R2 ]		1681445	0					
ANR	1681535	Identifier	reg_map		1681445	0					
ANR	1681536	Identifier	SLJIT_R2		1681445	1					
ANR	1681537	PrimaryExpression	3		1681445	1					
ANR	1681538	ArrayIndexing	reg_map [ SLJIT_R0 ]		1681445	1					
ANR	1681539	Identifier	reg_map		1681445	0					
ANR	1681540	Identifier	SLJIT_R0		1681445	1					
ANR	1681541	ReturnStatement	return SLJIT_SUCCESS ;	476:1:14933:14953	1681445	7	True				
ANR	1681542	Identifier	SLJIT_SUCCESS		1681445	0					
ANR	1681543	ReturnType	static SLJIT_INLINE sljit_si		1681445	1					
ANR	1681544	Identifier	call_with_args		1681445	2					
ANR	1681545	ParameterList	"struct sljit_compiler * compiler , sljit_si type"		1681445	3					
ANR	1681546	Parameter	struct sljit_compiler * compiler	441:44:13812:13842	1681445	0	True				
ANR	1681547	ParameterType	struct sljit_compiler *		1681445	0					
ANR	1681548	Identifier	compiler		1681445	1					
ANR	1681549	Parameter	sljit_si type	441:77:13845:13857	1681445	1	True				
ANR	1681550	ParameterType	sljit_si		1681445	0					
ANR	1681551	Identifier	type		1681445	1					
ANR	1681552	CFGEntryNode	ENTRY		1681445		True				
ANR	1681553	CFGExitNode	EXIT		1681445		True				
ANR	1681554	Symbol	MOV_r_rm		1681445						
ANR	1681555	Symbol	* inst ++		1681445						
ANR	1681556	Symbol	reg_map		1681445						
ANR	1681557	Symbol	SLJIT_SUCCESS		1681445						
ANR	1681558	Symbol	type		1681445						
ANR	1681559	Symbol	* reg_map		1681445						
ANR	1681560	Symbol	SLJIT_R2		1681445						
ANR	1681561	Symbol	MOD_REG		1681445						
ANR	1681562	Symbol	SLJIT_R0		1681445						
ANR	1681563	Symbol	* SLJIT_R2		1681445						
ANR	1681564	Symbol	inst		1681445						
ANR	1681565	Symbol	ensure_buf		1681445						
ANR	1681566	Symbol	SLJIT_CALL3		1681445						
ANR	1681567	Symbol	compiler		1681445						
ANR	1681568	Symbol	* SLJIT_R0		1681445						
ANR	1681569	Function	sljit_emit_fast_enter	479:0:14958:15669							
ANR	1681570	FunctionDef	"sljit_emit_fast_enter (struct sljit_compiler * compiler , sljit_si dst , sljit_sw dstw)"		1681569	0					
ANR	1681571	CompoundStatement		480:0:15076:15669	1681569	0					
ANR	1681572	IdentifierDeclStatement	sljit_ub * inst ;	481:1:15079:15093	1681569	0	True				
ANR	1681573	IdentifierDecl	* inst		1681569	0					
ANR	1681574	IdentifierDeclType	sljit_ub *		1681569	0					
ANR	1681575	Identifier	inst		1681569	1					
ANR	1681576	ExpressionStatement	CHECK_ERROR ( )	483:1:15097:15110	1681569	1	True				
ANR	1681577	CallExpression	CHECK_ERROR ( )		1681569	0					
ANR	1681578	Callee	CHECK_ERROR		1681569	0					
ANR	1681579	Identifier	CHECK_ERROR		1681569	0					
ANR	1681580	ArgumentList			1681569	1					
ANR	1681581	ExpressionStatement	"CHECK ( check_sljit_emit_fast_enter ( compiler , dst , dstw ) )"	484:1:15113:15168	1681569	2	True				
ANR	1681582	CallExpression	"CHECK ( check_sljit_emit_fast_enter ( compiler , dst , dstw ) )"		1681569	0					
ANR	1681583	Callee	CHECK		1681569	0					
ANR	1681584	Identifier	CHECK		1681569	0					
ANR	1681585	ArgumentList	"check_sljit_emit_fast_enter ( compiler , dst , dstw )"		1681569	1					
ANR	1681586	Argument	"check_sljit_emit_fast_enter ( compiler , dst , dstw )"		1681569	0					
ANR	1681587	CallExpression	"check_sljit_emit_fast_enter ( compiler , dst , dstw )"		1681569	0					
ANR	1681588	Callee	check_sljit_emit_fast_enter		1681569	0					
ANR	1681589	Identifier	check_sljit_emit_fast_enter		1681569	0					
ANR	1681590	ArgumentList	compiler		1681569	1					
ANR	1681591	Argument	compiler		1681569	0					
ANR	1681592	Identifier	compiler		1681569	0					
ANR	1681593	Argument	dst		1681569	1					
ANR	1681594	Identifier	dst		1681569	0					
ANR	1681595	Argument	dstw		1681569	2					
ANR	1681596	Identifier	dstw		1681569	0					
ANR	1681597	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( dst , dstw )"	485:1:15171:15201	1681569	3	True				
ANR	1681598	CallExpression	"ADJUST_LOCAL_OFFSET ( dst , dstw )"		1681569	0					
ANR	1681599	Callee	ADJUST_LOCAL_OFFSET		1681569	0					
ANR	1681600	Identifier	ADJUST_LOCAL_OFFSET		1681569	0					
ANR	1681601	ArgumentList	dst		1681569	1					
ANR	1681602	Argument	dst		1681569	0					
ANR	1681603	Identifier	dst		1681569	0					
ANR	1681604	Argument	dstw		1681569	1					
ANR	1681605	Identifier	dstw		1681569	0					
ANR	1681606	ExpressionStatement	"CHECK_EXTRA_REGS ( dst , dstw , ( void ) 0 )"	487:1:15205:15241	1681569	4	True				
ANR	1681607	CallExpression	"CHECK_EXTRA_REGS ( dst , dstw , ( void ) 0 )"		1681569	0					
ANR	1681608	Callee	CHECK_EXTRA_REGS		1681569	0					
ANR	1681609	Identifier	CHECK_EXTRA_REGS		1681569	0					
ANR	1681610	ArgumentList	dst		1681569	1					
ANR	1681611	Argument	dst		1681569	0					
ANR	1681612	Identifier	dst		1681569	0					
ANR	1681613	Argument	dstw		1681569	1					
ANR	1681614	Identifier	dstw		1681569	0					
ANR	1681615	Argument	( void ) 0		1681569	2					
ANR	1681616	CastExpression	( void ) 0		1681569	0					
ANR	1681617	CastTarget	void		1681569	0					
ANR	1681618	PrimaryExpression	0		1681569	1					
ANR	1681619	IfStatement	if ( dst == SLJIT_UNUSED )		1681569	5					
ANR	1681620	Condition	dst == SLJIT_UNUSED	490:5:15296:15314	1681569	0	True				
ANR	1681621	EqualityExpression	dst == SLJIT_UNUSED		1681569	0		==			
ANR	1681622	Identifier	dst		1681569	0					
ANR	1681623	Identifier	SLJIT_UNUSED		1681569	1					
ANR	1681624	ExpressionStatement	dst = TMP_REG1	491:2:15319:15333	1681569	1	True				
ANR	1681625	AssignmentExpression	dst = TMP_REG1		1681569	0		=			
ANR	1681626	Identifier	dst		1681569	0					
ANR	1681627	Identifier	TMP_REG1		1681569	1					
ANR	1681628	IfStatement	if ( FAST_IS_REG ( dst ) )		1681569	6					
ANR	1681629	Condition	FAST_IS_REG ( dst )	493:5:15341:15356	1681569	0	True				
ANR	1681630	CallExpression	FAST_IS_REG ( dst )		1681569	0					
ANR	1681631	Callee	FAST_IS_REG		1681569	0					
ANR	1681632	Identifier	FAST_IS_REG		1681569	0					
ANR	1681633	ArgumentList	dst		1681569	1					
ANR	1681634	Argument	dst		1681569	0					
ANR	1681635	Identifier	dst		1681569	0					
ANR	1681636	CompoundStatement		14:23:282:282	1681569	1					
ANR	1681637	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"	495:2:15401:15446	1681569	0	True				
ANR	1681638	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"		1681569	0		=			
ANR	1681639	Identifier	inst		1681569	0					
ANR	1681640	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"		1681569	1					
ANR	1681641	CastTarget	sljit_ub *		1681569	0					
ANR	1681642	CallExpression	"ensure_buf ( compiler , 1 + 1 )"		1681569	1					
ANR	1681643	Callee	ensure_buf		1681569	0					
ANR	1681644	Identifier	ensure_buf		1681569	0					
ANR	1681645	ArgumentList	compiler		1681569	1					
ANR	1681646	Argument	compiler		1681569	0					
ANR	1681647	Identifier	compiler		1681569	0					
ANR	1681648	Argument	1 + 1		1681569	1					
ANR	1681649	AdditiveExpression	1 + 1		1681569	0		+			
ANR	1681650	PrimaryExpression	1		1681569	0					
ANR	1681651	PrimaryExpression	1		1681569	1					
ANR	1681652	ExpressionStatement	FAIL_IF ( ! inst )	496:2:15450:15464	1681569	1	True				
ANR	1681653	CallExpression	FAIL_IF ( ! inst )		1681569	0					
ANR	1681654	Callee	FAIL_IF		1681569	0					
ANR	1681655	Identifier	FAIL_IF		1681569	0					
ANR	1681656	ArgumentList	! inst		1681569	1					
ANR	1681657	Argument	! inst		1681569	0					
ANR	1681658	UnaryOperationExpression	! inst		1681569	0					
ANR	1681659	UnaryOperator	!		1681569	0					
ANR	1681660	Identifier	inst		1681569	1					
ANR	1681661	ExpressionStatement	INC_SIZE ( 1 )	498:2:15469:15480	1681569	2	True				
ANR	1681662	CallExpression	INC_SIZE ( 1 )		1681569	0					
ANR	1681663	Callee	INC_SIZE		1681569	0					
ANR	1681664	Identifier	INC_SIZE		1681569	0					
ANR	1681665	ArgumentList	1		1681569	1					
ANR	1681666	Argument	1		1681569	0					
ANR	1681667	PrimaryExpression	1		1681569	0					
ANR	1681668	ExpressionStatement	POP_REG ( reg_map [ dst ] )	499:2:15484:15505	1681569	3	True				
ANR	1681669	CallExpression	POP_REG ( reg_map [ dst ] )		1681569	0					
ANR	1681670	Callee	POP_REG		1681569	0					
ANR	1681671	Identifier	POP_REG		1681569	0					
ANR	1681672	ArgumentList	reg_map [ dst ]		1681569	1					
ANR	1681673	Argument	reg_map [ dst ]		1681569	0					
ANR	1681674	ArrayIndexing	reg_map [ dst ]		1681569	0					
ANR	1681675	Identifier	reg_map		1681569	0					
ANR	1681676	Identifier	dst		1681569	1					
ANR	1681677	ReturnStatement	return SLJIT_SUCCESS ;	500:2:15509:15529	1681569	4	True				
ANR	1681678	Identifier	SLJIT_SUCCESS		1681569	0					
ANR	1681679	ExpressionStatement	"inst = emit_x86_instruction ( compiler , 1 , 0 , 0 , dst , dstw )"	504:1:15551:15608	1681569	7	True				
ANR	1681680	AssignmentExpression	"inst = emit_x86_instruction ( compiler , 1 , 0 , 0 , dst , dstw )"		1681569	0		=			
ANR	1681681	Identifier	inst		1681569	0					
ANR	1681682	CallExpression	"emit_x86_instruction ( compiler , 1 , 0 , 0 , dst , dstw )"		1681569	1					
ANR	1681683	Callee	emit_x86_instruction		1681569	0					
ANR	1681684	Identifier	emit_x86_instruction		1681569	0					
ANR	1681685	ArgumentList	compiler		1681569	1					
ANR	1681686	Argument	compiler		1681569	0					
ANR	1681687	Identifier	compiler		1681569	0					
ANR	1681688	Argument	1		1681569	1					
ANR	1681689	PrimaryExpression	1		1681569	0					
ANR	1681690	Argument	0		1681569	2					
ANR	1681691	PrimaryExpression	0		1681569	0					
ANR	1681692	Argument	0		1681569	3					
ANR	1681693	PrimaryExpression	0		1681569	0					
ANR	1681694	Argument	dst		1681569	4					
ANR	1681695	Identifier	dst		1681569	0					
ANR	1681696	Argument	dstw		1681569	5					
ANR	1681697	Identifier	dstw		1681569	0					
ANR	1681698	ExpressionStatement	FAIL_IF ( ! inst )	505:1:15611:15625	1681569	8	True				
ANR	1681699	CallExpression	FAIL_IF ( ! inst )		1681569	0					
ANR	1681700	Callee	FAIL_IF		1681569	0					
ANR	1681701	Identifier	FAIL_IF		1681569	0					
ANR	1681702	ArgumentList	! inst		1681569	1					
ANR	1681703	Argument	! inst		1681569	0					
ANR	1681704	UnaryOperationExpression	! inst		1681569	0					
ANR	1681705	UnaryOperator	!		1681569	0					
ANR	1681706	Identifier	inst		1681569	1					
ANR	1681707	ExpressionStatement	* inst ++ = POP_rm	506:1:15628:15644	1681569	9	True				
ANR	1681708	AssignmentExpression	* inst ++ = POP_rm		1681569	0		=			
ANR	1681709	UnaryOperationExpression	* inst ++		1681569	0					
ANR	1681710	UnaryOperator	*		1681569	0					
ANR	1681711	PostIncDecOperationExpression	inst ++		1681569	1					
ANR	1681712	Identifier	inst		1681569	0					
ANR	1681713	IncDec	++		1681569	1					
ANR	1681714	Identifier	POP_rm		1681569	1					
ANR	1681715	ReturnStatement	return SLJIT_SUCCESS ;	507:1:15647:15667	1681569	10	True				
ANR	1681716	Identifier	SLJIT_SUCCESS		1681569	0					
ANR	1681717	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1681569	1					
ANR	1681718	Identifier	sljit_emit_fast_enter		1681569	2					
ANR	1681719	ParameterList	"struct sljit_compiler * compiler , sljit_si dst , sljit_sw dstw"		1681569	3					
ANR	1681720	Parameter	struct sljit_compiler * compiler	479:56:15014:15044	1681569	0	True				
ANR	1681721	ParameterType	struct sljit_compiler *		1681569	0					
ANR	1681722	Identifier	compiler		1681569	1					
ANR	1681723	Parameter	sljit_si dst	479:89:15047:15058	1681569	1	True				
ANR	1681724	ParameterType	sljit_si		1681569	0					
ANR	1681725	Identifier	dst		1681569	1					
ANR	1681726	Parameter	sljit_sw dstw	479:103:15061:15073	1681569	2	True				
ANR	1681727	ParameterType	sljit_sw		1681569	0					
ANR	1681728	Identifier	dstw		1681569	1					
ANR	1681729	CFGEntryNode	ENTRY		1681569		True				
ANR	1681730	CFGExitNode	EXIT		1681569		True				
ANR	1681731	Symbol	check_sljit_emit_fast_enter		1681569						
ANR	1681732	Symbol	TMP_REG1		1681569						
ANR	1681733	Symbol	emit_x86_instruction		1681569						
ANR	1681734	Symbol	FAST_IS_REG		1681569						
ANR	1681735	Symbol	dst		1681569						
ANR	1681736	Symbol	* inst ++		1681569						
ANR	1681737	Symbol	reg_map		1681569						
ANR	1681738	Symbol	SLJIT_SUCCESS		1681569						
ANR	1681739	Symbol	POP_rm		1681569						
ANR	1681740	Symbol	* reg_map		1681569						
ANR	1681741	Symbol	* dst		1681569						
ANR	1681742	Symbol	SLJIT_UNUSED		1681569						
ANR	1681743	Symbol	inst		1681569						
ANR	1681744	Symbol	ensure_buf		1681569						
ANR	1681745	Symbol	compiler		1681569						
ANR	1681746	Symbol	dstw		1681569						
ANR	1681747	Function	sljit_emit_fast_return	510:0:15672:16571							
ANR	1681748	FunctionDef	"sljit_emit_fast_return (struct sljit_compiler * compiler , sljit_si src , sljit_sw srcw)"		1681747	0					
ANR	1681749	CompoundStatement		511:0:15791:16571	1681747	0					
ANR	1681750	IdentifierDeclStatement	sljit_ub * inst ;	512:1:15794:15808	1681747	0	True				
ANR	1681751	IdentifierDecl	* inst		1681747	0					
ANR	1681752	IdentifierDeclType	sljit_ub *		1681747	0					
ANR	1681753	Identifier	inst		1681747	1					
ANR	1681754	ExpressionStatement	CHECK_ERROR ( )	514:1:15812:15825	1681747	1	True				
ANR	1681755	CallExpression	CHECK_ERROR ( )		1681747	0					
ANR	1681756	Callee	CHECK_ERROR		1681747	0					
ANR	1681757	Identifier	CHECK_ERROR		1681747	0					
ANR	1681758	ArgumentList			1681747	1					
ANR	1681759	ExpressionStatement	"CHECK ( check_sljit_emit_fast_return ( compiler , src , srcw ) )"	515:1:15828:15884	1681747	2	True				
ANR	1681760	CallExpression	"CHECK ( check_sljit_emit_fast_return ( compiler , src , srcw ) )"		1681747	0					
ANR	1681761	Callee	CHECK		1681747	0					
ANR	1681762	Identifier	CHECK		1681747	0					
ANR	1681763	ArgumentList	"check_sljit_emit_fast_return ( compiler , src , srcw )"		1681747	1					
ANR	1681764	Argument	"check_sljit_emit_fast_return ( compiler , src , srcw )"		1681747	0					
ANR	1681765	CallExpression	"check_sljit_emit_fast_return ( compiler , src , srcw )"		1681747	0					
ANR	1681766	Callee	check_sljit_emit_fast_return		1681747	0					
ANR	1681767	Identifier	check_sljit_emit_fast_return		1681747	0					
ANR	1681768	ArgumentList	compiler		1681747	1					
ANR	1681769	Argument	compiler		1681747	0					
ANR	1681770	Identifier	compiler		1681747	0					
ANR	1681771	Argument	src		1681747	1					
ANR	1681772	Identifier	src		1681747	0					
ANR	1681773	Argument	srcw		1681747	2					
ANR	1681774	Identifier	srcw		1681747	0					
ANR	1681775	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( src , srcw )"	516:1:15887:15917	1681747	3	True				
ANR	1681776	CallExpression	"ADJUST_LOCAL_OFFSET ( src , srcw )"		1681747	0					
ANR	1681777	Callee	ADJUST_LOCAL_OFFSET		1681747	0					
ANR	1681778	Identifier	ADJUST_LOCAL_OFFSET		1681747	0					
ANR	1681779	ArgumentList	src		1681747	1					
ANR	1681780	Argument	src		1681747	0					
ANR	1681781	Identifier	src		1681747	0					
ANR	1681782	Argument	srcw		1681747	1					
ANR	1681783	Identifier	srcw		1681747	0					
ANR	1681784	ExpressionStatement	"CHECK_EXTRA_REGS ( src , srcw , ( void ) 0 )"	518:1:15921:15957	1681747	4	True				
ANR	1681785	CallExpression	"CHECK_EXTRA_REGS ( src , srcw , ( void ) 0 )"		1681747	0					
ANR	1681786	Callee	CHECK_EXTRA_REGS		1681747	0					
ANR	1681787	Identifier	CHECK_EXTRA_REGS		1681747	0					
ANR	1681788	ArgumentList	src		1681747	1					
ANR	1681789	Argument	src		1681747	0					
ANR	1681790	Identifier	src		1681747	0					
ANR	1681791	Argument	srcw		1681747	1					
ANR	1681792	Identifier	srcw		1681747	0					
ANR	1681793	Argument	( void ) 0		1681747	2					
ANR	1681794	CastExpression	( void ) 0		1681747	0					
ANR	1681795	CastTarget	void		1681747	0					
ANR	1681796	PrimaryExpression	0		1681747	1					
ANR	1681797	IfStatement	if ( FAST_IS_REG ( src ) )		1681747	5					
ANR	1681798	Condition	FAST_IS_REG ( src )	520:5:15965:15980	1681747	0	True				
ANR	1681799	CallExpression	FAST_IS_REG ( src )		1681747	0					
ANR	1681800	Callee	FAST_IS_REG		1681747	0					
ANR	1681801	Identifier	FAST_IS_REG		1681747	0					
ANR	1681802	ArgumentList	src		1681747	1					
ANR	1681803	Argument	src		1681747	0					
ANR	1681804	Identifier	src		1681747	0					
ANR	1681805	CompoundStatement		10:23:191:191	1681747	1					
ANR	1681806	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 + 1 )"	521:2:15987:16036	1681747	0	True				
ANR	1681807	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 + 1 )"		1681747	0		=			
ANR	1681808	Identifier	inst		1681747	0					
ANR	1681809	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 1 + 1 )"		1681747	1					
ANR	1681810	CastTarget	sljit_ub *		1681747	0					
ANR	1681811	CallExpression	"ensure_buf ( compiler , 1 + 1 + 1 )"		1681747	1					
ANR	1681812	Callee	ensure_buf		1681747	0					
ANR	1681813	Identifier	ensure_buf		1681747	0					
ANR	1681814	ArgumentList	compiler		1681747	1					
ANR	1681815	Argument	compiler		1681747	0					
ANR	1681816	Identifier	compiler		1681747	0					
ANR	1681817	Argument	1 + 1 + 1		1681747	1					
ANR	1681818	AdditiveExpression	1 + 1 + 1		1681747	0		+			
ANR	1681819	PrimaryExpression	1		1681747	0					
ANR	1681820	AdditiveExpression	1 + 1		1681747	1		+			
ANR	1681821	PrimaryExpression	1		1681747	0					
ANR	1681822	PrimaryExpression	1		1681747	1					
ANR	1681823	ExpressionStatement	FAIL_IF ( ! inst )	522:2:16040:16054	1681747	1	True				
ANR	1681824	CallExpression	FAIL_IF ( ! inst )		1681747	0					
ANR	1681825	Callee	FAIL_IF		1681747	0					
ANR	1681826	Identifier	FAIL_IF		1681747	0					
ANR	1681827	ArgumentList	! inst		1681747	1					
ANR	1681828	Argument	! inst		1681747	0					
ANR	1681829	UnaryOperationExpression	! inst		1681747	0					
ANR	1681830	UnaryOperator	!		1681747	0					
ANR	1681831	Identifier	inst		1681747	1					
ANR	1681832	ExpressionStatement	INC_SIZE ( 1 + 1 )	524:2:16059:16074	1681747	2	True				
ANR	1681833	CallExpression	INC_SIZE ( 1 + 1 )		1681747	0					
ANR	1681834	Callee	INC_SIZE		1681747	0					
ANR	1681835	Identifier	INC_SIZE		1681747	0					
ANR	1681836	ArgumentList	1 + 1		1681747	1					
ANR	1681837	Argument	1 + 1		1681747	0					
ANR	1681838	AdditiveExpression	1 + 1		1681747	0		+			
ANR	1681839	PrimaryExpression	1		1681747	0					
ANR	1681840	PrimaryExpression	1		1681747	1					
ANR	1681841	ExpressionStatement	PUSH_REG ( reg_map [ src ] )	525:2:16078:16100	1681747	3	True				
ANR	1681842	CallExpression	PUSH_REG ( reg_map [ src ] )		1681747	0					
ANR	1681843	Callee	PUSH_REG		1681747	0					
ANR	1681844	Identifier	PUSH_REG		1681747	0					
ANR	1681845	ArgumentList	reg_map [ src ]		1681747	1					
ANR	1681846	Argument	reg_map [ src ]		1681747	0					
ANR	1681847	ArrayIndexing	reg_map [ src ]		1681747	0					
ANR	1681848	Identifier	reg_map		1681747	0					
ANR	1681849	Identifier	src		1681747	1					
ANR	1681850	ElseStatement	else		1681747	0					
ANR	1681851	IfStatement	if ( src & SLJIT_MEM )		1681747	0					
ANR	1681852	Condition	src & SLJIT_MEM	527:10:16115:16129	1681747	0	True				
ANR	1681853	BitAndExpression	src & SLJIT_MEM		1681747	0		&			
ANR	1681854	Identifier	src		1681747	0					
ANR	1681855	Identifier	SLJIT_MEM		1681747	1					
ANR	1681856	CompoundStatement		17:27:340:340	1681747	1					
ANR	1681857	ExpressionStatement	"inst = emit_x86_instruction ( compiler , 1 , 0 , 0 , src , srcw )"	528:2:16136:16193	1681747	0	True				
ANR	1681858	AssignmentExpression	"inst = emit_x86_instruction ( compiler , 1 , 0 , 0 , src , srcw )"		1681747	0		=			
ANR	1681859	Identifier	inst		1681747	0					
ANR	1681860	CallExpression	"emit_x86_instruction ( compiler , 1 , 0 , 0 , src , srcw )"		1681747	1					
ANR	1681861	Callee	emit_x86_instruction		1681747	0					
ANR	1681862	Identifier	emit_x86_instruction		1681747	0					
ANR	1681863	ArgumentList	compiler		1681747	1					
ANR	1681864	Argument	compiler		1681747	0					
ANR	1681865	Identifier	compiler		1681747	0					
ANR	1681866	Argument	1		1681747	1					
ANR	1681867	PrimaryExpression	1		1681747	0					
ANR	1681868	Argument	0		1681747	2					
ANR	1681869	PrimaryExpression	0		1681747	0					
ANR	1681870	Argument	0		1681747	3					
ANR	1681871	PrimaryExpression	0		1681747	0					
ANR	1681872	Argument	src		1681747	4					
ANR	1681873	Identifier	src		1681747	0					
ANR	1681874	Argument	srcw		1681747	5					
ANR	1681875	Identifier	srcw		1681747	0					
ANR	1681876	ExpressionStatement	FAIL_IF ( ! inst )	529:2:16197:16211	1681747	1	True				
ANR	1681877	CallExpression	FAIL_IF ( ! inst )		1681747	0					
ANR	1681878	Callee	FAIL_IF		1681747	0					
ANR	1681879	Identifier	FAIL_IF		1681747	0					
ANR	1681880	ArgumentList	! inst		1681747	1					
ANR	1681881	Argument	! inst		1681747	0					
ANR	1681882	UnaryOperationExpression	! inst		1681747	0					
ANR	1681883	UnaryOperator	!		1681747	0					
ANR	1681884	Identifier	inst		1681747	1					
ANR	1681885	ExpressionStatement	* inst ++ = GROUP_FF	530:2:16215:16233	1681747	2	True				
ANR	1681886	AssignmentExpression	* inst ++ = GROUP_FF		1681747	0		=			
ANR	1681887	UnaryOperationExpression	* inst ++		1681747	0					
ANR	1681888	UnaryOperator	*		1681747	0					
ANR	1681889	PostIncDecOperationExpression	inst ++		1681747	1					
ANR	1681890	Identifier	inst		1681747	0					
ANR	1681891	IncDec	++		1681747	1					
ANR	1681892	Identifier	GROUP_FF		1681747	1					
ANR	1681893	ExpressionStatement	* inst |= PUSH_rm	531:2:16237:16253	1681747	3	True				
ANR	1681894	AssignmentExpression	* inst |= PUSH_rm		1681747	0		|=			
ANR	1681895	UnaryOperationExpression	* inst		1681747	0					
ANR	1681896	UnaryOperator	*		1681747	0					
ANR	1681897	Identifier	inst		1681747	1					
ANR	1681898	Identifier	PUSH_rm		1681747	1					
ANR	1681899	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"	533:2:16258:16303	1681747	4	True				
ANR	1681900	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"		1681747	0		=			
ANR	1681901	Identifier	inst		1681747	0					
ANR	1681902	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"		1681747	1					
ANR	1681903	CastTarget	sljit_ub *		1681747	0					
ANR	1681904	CallExpression	"ensure_buf ( compiler , 1 + 1 )"		1681747	1					
ANR	1681905	Callee	ensure_buf		1681747	0					
ANR	1681906	Identifier	ensure_buf		1681747	0					
ANR	1681907	ArgumentList	compiler		1681747	1					
ANR	1681908	Argument	compiler		1681747	0					
ANR	1681909	Identifier	compiler		1681747	0					
ANR	1681910	Argument	1 + 1		1681747	1					
ANR	1681911	AdditiveExpression	1 + 1		1681747	0		+			
ANR	1681912	PrimaryExpression	1		1681747	0					
ANR	1681913	PrimaryExpression	1		1681747	1					
ANR	1681914	ExpressionStatement	FAIL_IF ( ! inst )	534:2:16307:16321	1681747	5	True				
ANR	1681915	CallExpression	FAIL_IF ( ! inst )		1681747	0					
ANR	1681916	Callee	FAIL_IF		1681747	0					
ANR	1681917	Identifier	FAIL_IF		1681747	0					
ANR	1681918	ArgumentList	! inst		1681747	1					
ANR	1681919	Argument	! inst		1681747	0					
ANR	1681920	UnaryOperationExpression	! inst		1681747	0					
ANR	1681921	UnaryOperator	!		1681747	0					
ANR	1681922	Identifier	inst		1681747	1					
ANR	1681923	ExpressionStatement	INC_SIZE ( 1 )	535:2:16325:16336	1681747	6	True				
ANR	1681924	CallExpression	INC_SIZE ( 1 )		1681747	0					
ANR	1681925	Callee	INC_SIZE		1681747	0					
ANR	1681926	Identifier	INC_SIZE		1681747	0					
ANR	1681927	ArgumentList	1		1681747	1					
ANR	1681928	Argument	1		1681747	0					
ANR	1681929	PrimaryExpression	1		1681747	0					
ANR	1681930	ElseStatement	else		1681747	0					
ANR	1681931	CompoundStatement		27:6:555:555	1681747	0					
ANR	1681932	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 5 + 1 )"	539:2:16370:16419	1681747	0	True				
ANR	1681933	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 5 + 1 )"		1681747	0		=			
ANR	1681934	Identifier	inst		1681747	0					
ANR	1681935	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 5 + 1 )"		1681747	1					
ANR	1681936	CastTarget	sljit_ub *		1681747	0					
ANR	1681937	CallExpression	"ensure_buf ( compiler , 1 + 5 + 1 )"		1681747	1					
ANR	1681938	Callee	ensure_buf		1681747	0					
ANR	1681939	Identifier	ensure_buf		1681747	0					
ANR	1681940	ArgumentList	compiler		1681747	1					
ANR	1681941	Argument	compiler		1681747	0					
ANR	1681942	Identifier	compiler		1681747	0					
ANR	1681943	Argument	1 + 5 + 1		1681747	1					
ANR	1681944	AdditiveExpression	1 + 5 + 1		1681747	0		+			
ANR	1681945	PrimaryExpression	1		1681747	0					
ANR	1681946	AdditiveExpression	5 + 1		1681747	1		+			
ANR	1681947	PrimaryExpression	5		1681747	0					
ANR	1681948	PrimaryExpression	1		1681747	1					
ANR	1681949	ExpressionStatement	FAIL_IF ( ! inst )	540:2:16423:16437	1681747	1	True				
ANR	1681950	CallExpression	FAIL_IF ( ! inst )		1681747	0					
ANR	1681951	Callee	FAIL_IF		1681747	0					
ANR	1681952	Identifier	FAIL_IF		1681747	0					
ANR	1681953	ArgumentList	! inst		1681747	1					
ANR	1681954	Argument	! inst		1681747	0					
ANR	1681955	UnaryOperationExpression	! inst		1681747	0					
ANR	1681956	UnaryOperator	!		1681747	0					
ANR	1681957	Identifier	inst		1681747	1					
ANR	1681958	ExpressionStatement	INC_SIZE ( 5 + 1 )	542:2:16442:16457	1681747	2	True				
ANR	1681959	CallExpression	INC_SIZE ( 5 + 1 )		1681747	0					
ANR	1681960	Callee	INC_SIZE		1681747	0					
ANR	1681961	Identifier	INC_SIZE		1681747	0					
ANR	1681962	ArgumentList	5 + 1		1681747	1					
ANR	1681963	Argument	5 + 1		1681747	0					
ANR	1681964	AdditiveExpression	5 + 1		1681747	0		+			
ANR	1681965	PrimaryExpression	5		1681747	0					
ANR	1681966	PrimaryExpression	1		1681747	1					
ANR	1681967	ExpressionStatement	* inst ++ = PUSH_i32	543:2:16461:16479	1681747	3	True				
ANR	1681968	AssignmentExpression	* inst ++ = PUSH_i32		1681747	0		=			
ANR	1681969	UnaryOperationExpression	* inst ++		1681747	0					
ANR	1681970	UnaryOperator	*		1681747	0					
ANR	1681971	PostIncDecOperationExpression	inst ++		1681747	1					
ANR	1681972	Identifier	inst		1681747	0					
ANR	1681973	IncDec	++		1681747	1					
ANR	1681974	Identifier	PUSH_i32		1681747	1					
ANR	1681975	ExpressionStatement	* ( sljit_sw * ) inst = srcw	544:2:16483:16506	1681747	4	True				
ANR	1681976	AssignmentExpression	* ( sljit_sw * ) inst = srcw		1681747	0		=			
ANR	1681977	UnaryOperationExpression	* ( sljit_sw * ) inst		1681747	0					
ANR	1681978	UnaryOperator	*		1681747	0					
ANR	1681979	CastExpression	( sljit_sw * ) inst		1681747	1					
ANR	1681980	CastTarget	sljit_sw *		1681747	0					
ANR	1681981	Identifier	inst		1681747	1					
ANR	1681982	Identifier	srcw		1681747	1					
ANR	1681983	ExpressionStatement	inst += sizeof ( sljit_sw )	545:2:16510:16534	1681747	5	True				
ANR	1681984	AssignmentExpression	inst += sizeof ( sljit_sw )		1681747	0		+=			
ANR	1681985	Identifier	inst		1681747	0					
ANR	1681986	SizeofExpression	sizeof ( sljit_sw )		1681747	1					
ANR	1681987	Sizeof	sizeof		1681747	0					
ANR	1681988	SizeofOperand	sljit_sw		1681747	1					
ANR	1681989	ExpressionStatement	RET ( )	548:1:16541:16546	1681747	6	True				
ANR	1681990	CallExpression	RET ( )		1681747	0					
ANR	1681991	Callee	RET		1681747	0					
ANR	1681992	Identifier	RET		1681747	0					
ANR	1681993	ArgumentList			1681747	1					
ANR	1681994	ReturnStatement	return SLJIT_SUCCESS ;	549:1:16549:16569	1681747	7	True				
ANR	1681995	Identifier	SLJIT_SUCCESS		1681747	0					
ANR	1681996	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1681747	1					
ANR	1681997	Identifier	sljit_emit_fast_return		1681747	2					
ANR	1681998	ParameterList	"struct sljit_compiler * compiler , sljit_si src , sljit_sw srcw"		1681747	3					
ANR	1681999	Parameter	struct sljit_compiler * compiler	510:57:15729:15759	1681747	0	True				
ANR	1682000	ParameterType	struct sljit_compiler *		1681747	0					
ANR	1682001	Identifier	compiler		1681747	1					
ANR	1682002	Parameter	sljit_si src	510:90:15762:15773	1681747	1	True				
ANR	1682003	ParameterType	sljit_si		1681747	0					
ANR	1682004	Identifier	src		1681747	1					
ANR	1682005	Parameter	sljit_sw srcw	510:104:15776:15788	1681747	2	True				
ANR	1682006	ParameterType	sljit_sw		1681747	0					
ANR	1682007	Identifier	srcw		1681747	1					
ANR	1682008	CFGEntryNode	ENTRY		1681747		True				
ANR	1682009	CFGExitNode	EXIT		1681747		True				
ANR	1682010	Symbol	emit_x86_instruction		1681747						
ANR	1682011	Symbol	FAST_IS_REG		1681747						
ANR	1682012	Symbol	* inst		1681747						
ANR	1682013	Symbol	src		1681747						
ANR	1682014	Symbol	srcw		1681747						
ANR	1682015	Symbol	SLJIT_MEM		1681747						
ANR	1682016	Symbol	* inst ++		1681747						
ANR	1682017	Symbol	reg_map		1681747						
ANR	1682018	Symbol	SLJIT_SUCCESS		1681747						
ANR	1682019	Symbol	* ( sljit_sw * ) inst		1681747						
ANR	1682020	Symbol	* reg_map		1681747						
ANR	1682021	Symbol	* src		1681747						
ANR	1682022	Symbol	PUSH_rm		1681747						
ANR	1682023	Symbol	check_sljit_emit_fast_return		1681747						
ANR	1682024	Symbol	GROUP_FF		1681747						
ANR	1682025	Symbol	PUSH_i32		1681747						
ANR	1682026	Symbol	inst		1681747						
ANR	1682027	Symbol	ensure_buf		1681747						
ANR	1682028	Symbol	compiler		1681747						
