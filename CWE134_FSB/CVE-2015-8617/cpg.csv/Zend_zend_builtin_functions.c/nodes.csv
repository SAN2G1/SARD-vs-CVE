command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	82910	File	data/converged/CVE-2015-8617_php-src/Zend_zend_builtin_functions.c								
ANR	82911	DeclStmt									
ANR	82912	Decl							const zend_function_entry	const zend_function_entry [ ]	builtin_functions
ANR	82913	DeclStmt									
ANR	82914	Decl							zend_class_entry	zend_class_entry	class_entry
ANR	82915	DeclStmt									
ANR	82916	Decl							zend_module_entry	zend_module_entry	zend_builtin_module
ANR	82917	Function	zend_startup_builtin_functions	360:0:11550:11796							
ANR	82918	FunctionDef	zend_startup_builtin_functions ()		82917	0					
ANR	82919	CompoundStatement		361:0:11601:11796	82917	0					
ANR	82920	ExpressionStatement	zend_builtin_module . module_number = 0	362:1:11604:11641	82917	0	True				
ANR	82921	AssignmentExpression	zend_builtin_module . module_number = 0		82917	0		=			
ANR	82922	MemberAccess	zend_builtin_module . module_number		82917	0					
ANR	82923	Identifier	zend_builtin_module		82917	0					
ANR	82924	Identifier	module_number		82917	1					
ANR	82925	PrimaryExpression	0		82917	1					
ANR	82926	ExpressionStatement	zend_builtin_module . type = MODULE_PERSISTENT	363:1:11644:11688	82917	1	True				
ANR	82927	AssignmentExpression	zend_builtin_module . type = MODULE_PERSISTENT		82917	0		=			
ANR	82928	MemberAccess	zend_builtin_module . type		82917	0					
ANR	82929	Identifier	zend_builtin_module		82917	0					
ANR	82930	Identifier	type		82917	1					
ANR	82931	Identifier	MODULE_PERSISTENT		82917	1					
ANR	82932	ReturnStatement	return ( EG ( current_module ) = zend_register_module_ex ( & zend_builtin_module ) ) == NULL ? FAILURE : SUCCESS ;	364:1:11691:11794	82917	2	True				
ANR	82933	ConditionalExpression	( EG ( current_module ) = zend_register_module_ex ( & zend_builtin_module ) ) == NULL ? FAILURE : SUCCESS		82917	0					
ANR	82934	Condition	( EG ( current_module ) = zend_register_module_ex ( & zend_builtin_module ) ) == NULL		82917	0					
ANR	82935	EqualityExpression	( EG ( current_module ) = zend_register_module_ex ( & zend_builtin_module ) ) == NULL		82917	0		==			
ANR	82936	AssignmentExpression	EG ( current_module ) = zend_register_module_ex ( & zend_builtin_module )		82917	0		=			
ANR	82937	CallExpression	EG ( current_module )		82917	0					
ANR	82938	Callee	EG		82917	0					
ANR	82939	Identifier	EG		82917	0					
ANR	82940	ArgumentList	current_module		82917	1					
ANR	82941	Argument	current_module		82917	0					
ANR	82942	Identifier	current_module		82917	0					
ANR	82943	CallExpression	zend_register_module_ex ( & zend_builtin_module )		82917	1					
ANR	82944	Callee	zend_register_module_ex		82917	0					
ANR	82945	Identifier	zend_register_module_ex		82917	0					
ANR	82946	ArgumentList	& zend_builtin_module		82917	1					
ANR	82947	Argument	& zend_builtin_module		82917	0					
ANR	82948	UnaryOperationExpression	& zend_builtin_module		82917	0					
ANR	82949	UnaryOperator	&		82917	0					
ANR	82950	Identifier	zend_builtin_module		82917	1					
ANR	82951	Identifier	NULL		82917	1					
ANR	82952	Identifier	FAILURE		82917	1					
ANR	82953	Identifier	SUCCESS		82917	2					
ANR	82954	ReturnType	int		82917	1					
ANR	82955	Identifier	zend_startup_builtin_functions		82917	2					
ANR	82956	ParameterList			82917	3					
ANR	82957	CFGEntryNode	ENTRY		82917		True				
ANR	82958	CFGExitNode	EXIT		82917		True				
ANR	82959	Symbol	EG		82917						
ANR	82960	Symbol	SUCCESS		82917						
ANR	82961	Symbol	NULL		82917						
ANR	82962	Symbol	& zend_builtin_module		82917						
ANR	82963	Symbol	MODULE_PERSISTENT		82917						
ANR	82964	Symbol	zend_builtin_module		82917						
ANR	82965	Symbol	zend_builtin_module . type		82917						
ANR	82966	Symbol	zend_builtin_module . module_number		82917						
ANR	82967	Symbol	current_module		82917						
ANR	82968	Symbol	FAILURE		82917						
ANR	82969	Symbol	zend_register_module_ex		82917						
ANR	82970	DeclStmt									
ANR	82971	Decl							zend_string	zend_string *	key
ANR	82972	DeclStmt									
ANR	82973	Decl							zend_string	zend_string *	key
ANR	82974	DeclStmt									
ANR	82975	Decl							zend_execute_data	zend_execute_data *	ex
ANR	82976	DeclStmt									
ANR	82977	Decl							uint32_t	uint32_t	arg_count
ANR	82978	Decl							uint32_t	uint32_t	first_extra_arg
ANR	82979	DeclStmt									
ANR	82980	Decl							zval	zval *	arg
ANR	82981	DeclStmt									
ANR	82982	Decl							zend_long	zend_long	requested_offset
ANR	82983	DeclStmt									
ANR	82984	Decl							zend_execute_data	zend_execute_data *	ex
ANR	82985	DeclStmt									
ANR	82986	Decl							zval	zval *	p
ANR	82987	Decl							zval	zval *	q
ANR	82988	DeclStmt									
ANR	82989	Decl							uint32_t	uint32_t	arg_count
ANR	82990	Decl							uint32_t	uint32_t	first_extra_arg
ANR	82991	DeclStmt									
ANR	82992	Decl							uint32_t	uint32_t	i
ANR	82993	Decl							uint32_t	uint32_t	n
ANR	82994	DeclStmt									
ANR	82995	Decl							zend_execute_data	zend_execute_data *	ex
ANR	82996	Function	ZEND_HASH_FILL_PACKED	501:2:15551:16271							
ANR	82997	FunctionDef	ZEND_HASH_FILL_PACKED (Z_ARRVAL_P ( return_value ))		82996	0					
ANR	82998	CompoundStatement		501:50:15599:16271	82996	0					
ANR	82999	ExpressionStatement	i = 0	502:3:15604:15609	82996	0	True				
ANR	83000	AssignmentExpression	i = 0		82996	0		=			
ANR	83001	Identifier	i		82996	0					
ANR	83002	PrimaryExpression	0		82996	1					
ANR	83003	ExpressionStatement	n = 0	503:3:15614:15619	82996	1	True				
ANR	83004	AssignmentExpression	n = 0		82996	0		=			
ANR	83005	Identifier	n		82996	0					
ANR	83006	PrimaryExpression	0		82996	1					
ANR	83007	ExpressionStatement	"p = ZEND_CALL_ARG ( ex , 1 )"	504:3:15624:15648	82996	2	True				
ANR	83008	AssignmentExpression	"p = ZEND_CALL_ARG ( ex , 1 )"		82996	0		=			
ANR	83009	Identifier	p		82996	0					
ANR	83010	CallExpression	"ZEND_CALL_ARG ( ex , 1 )"		82996	1					
ANR	83011	Callee	ZEND_CALL_ARG		82996	0					
ANR	83012	Identifier	ZEND_CALL_ARG		82996	0					
ANR	83013	ArgumentList	ex		82996	1					
ANR	83014	Argument	ex		82996	0					
ANR	83015	Identifier	ex		82996	0					
ANR	83016	Argument	1		82996	1					
ANR	83017	PrimaryExpression	1		82996	0					
ANR	83018	IfStatement	if ( arg_count > first_extra_arg )		82996	3					
ANR	83019	Condition	arg_count > first_extra_arg	505:7:15657:15683	82996	0	True				
ANR	83020	RelationalExpression	arg_count > first_extra_arg		82996	0		>			
ANR	83021	Identifier	arg_count		82996	0					
ANR	83022	Identifier	first_extra_arg		82996	1					
ANR	83023	CompoundStatement		5:36:86:86	82996	1					
ANR	83024	WhileStatement	while ( i < first_extra_arg )		82996	0					
ANR	83025	Condition	i < first_extra_arg	506:11:15699:15717	82996	0	True				
ANR	83026	RelationalExpression	i < first_extra_arg		82996	0		<			
ANR	83027	Identifier	i		82996	0					
ANR	83028	Identifier	first_extra_arg		82996	1					
ANR	83029	CompoundStatement		6:32:120:120	82996	1					
ANR	83030	ExpressionStatement	q = p	507:5:15727:15732	82996	0	True				
ANR	83031	AssignmentExpression	q = p		82996	0		=			
ANR	83032	Identifier	q		82996	0					
ANR	83033	Identifier	p		82996	1					
ANR	83034	IfStatement	if ( EXPECTED ( Z_TYPE_INFO_P ( q ) != IS_UNDEF ) )		82996	1					
ANR	83035	Condition	EXPECTED ( Z_TYPE_INFO_P ( q ) != IS_UNDEF )	508:9:15743:15780	82996	0	True				
ANR	83036	CallExpression	EXPECTED ( Z_TYPE_INFO_P ( q ) != IS_UNDEF )		82996	0					
ANR	83037	Callee	EXPECTED		82996	0					
ANR	83038	Identifier	EXPECTED		82996	0					
ANR	83039	ArgumentList	Z_TYPE_INFO_P ( q ) != IS_UNDEF		82996	1					
ANR	83040	Argument	Z_TYPE_INFO_P ( q ) != IS_UNDEF		82996	0					
ANR	83041	EqualityExpression	Z_TYPE_INFO_P ( q ) != IS_UNDEF		82996	0		!=			
ANR	83042	CallExpression	Z_TYPE_INFO_P ( q )		82996	0					
ANR	83043	Callee	Z_TYPE_INFO_P		82996	0					
ANR	83044	Identifier	Z_TYPE_INFO_P		82996	0					
ANR	83045	ArgumentList	q		82996	1					
ANR	83046	Argument	q		82996	0					
ANR	83047	Identifier	q		82996	0					
ANR	83048	Identifier	IS_UNDEF		82996	1					
ANR	83049	CompoundStatement		8:49:183:183	82996	1					
ANR	83050	ExpressionStatement	ZVAL_DEREF ( q )	509:6:15791:15804	82996	0	True				
ANR	83051	CallExpression	ZVAL_DEREF ( q )		82996	0					
ANR	83052	Callee	ZVAL_DEREF		82996	0					
ANR	83053	Identifier	ZVAL_DEREF		82996	0					
ANR	83054	ArgumentList	q		82996	1					
ANR	83055	Argument	q		82996	0					
ANR	83056	Identifier	q		82996	0					
ANR	83057	IfStatement	if ( Z_OPT_REFCOUNTED_P ( q ) )		82996	1					
ANR	83058	Condition	Z_OPT_REFCOUNTED_P ( q )	510:10:15816:15836	82996	0	True				
ANR	83059	CallExpression	Z_OPT_REFCOUNTED_P ( q )		82996	0					
ANR	83060	Callee	Z_OPT_REFCOUNTED_P		82996	0					
ANR	83061	Identifier	Z_OPT_REFCOUNTED_P		82996	0					
ANR	83062	ArgumentList	q		82996	1					
ANR	83063	Argument	q		82996	0					
ANR	83064	Identifier	q		82996	0					
ANR	83065	CompoundStatement		10:33:239:239	82996	1					
ANR	83066	ExpressionStatement	Z_ADDREF_P ( q )	511:7:15849:15862	82996	0	True				
ANR	83067	CallExpression	Z_ADDREF_P ( q )		82996	0					
ANR	83068	Callee	Z_ADDREF_P		82996	0					
ANR	83069	Identifier	Z_ADDREF_P		82996	0					
ANR	83070	ArgumentList	q		82996	1					
ANR	83071	Argument	q		82996	0					
ANR	83072	Identifier	q		82996	0					
ANR	83073	ExpressionStatement	n ++	513:6:15878:15881	82996	2	True				
ANR	83074	PostIncDecOperationExpression	n ++		82996	0					
ANR	83075	Identifier	n		82996	0					
ANR	83076	IncDec	++		82996	1					
ANR	83077	ExpressionStatement	ZEND_HASH_FILL_ADD ( q )	515:5:15895:15916	82996	2	True				
ANR	83078	CallExpression	ZEND_HASH_FILL_ADD ( q )		82996	0					
ANR	83079	Callee	ZEND_HASH_FILL_ADD		82996	0					
ANR	83080	Identifier	ZEND_HASH_FILL_ADD		82996	0					
ANR	83081	ArgumentList	q		82996	1					
ANR	83082	Argument	q		82996	0					
ANR	83083	Identifier	q		82996	0					
ANR	83084	ExpressionStatement	p ++	516:5:15923:15926	82996	3	True				
ANR	83085	PostIncDecOperationExpression	p ++		82996	0					
ANR	83086	Identifier	p		82996	0					
ANR	83087	IncDec	++		82996	1					
ANR	83088	ExpressionStatement	i ++	517:5:15933:15936	82996	4	True				
ANR	83089	PostIncDecOperationExpression	i ++		82996	0					
ANR	83090	Identifier	i		82996	0					
ANR	83091	IncDec	++		82996	1					
ANR	83092	ExpressionStatement	"p = ZEND_CALL_VAR_NUM ( ex , ex -> func -> op_array . last_var + ex -> func -> op_array . T )"	519:4:15948:16025	82996	1	True				
ANR	83093	AssignmentExpression	"p = ZEND_CALL_VAR_NUM ( ex , ex -> func -> op_array . last_var + ex -> func -> op_array . T )"		82996	0		=			
ANR	83094	Identifier	p		82996	0					
ANR	83095	CallExpression	"ZEND_CALL_VAR_NUM ( ex , ex -> func -> op_array . last_var + ex -> func -> op_array . T )"		82996	1					
ANR	83096	Callee	ZEND_CALL_VAR_NUM		82996	0					
ANR	83097	Identifier	ZEND_CALL_VAR_NUM		82996	0					
ANR	83098	ArgumentList	ex		82996	1					
ANR	83099	Argument	ex		82996	0					
ANR	83100	Identifier	ex		82996	0					
ANR	83101	Argument	ex -> func -> op_array . last_var + ex -> func -> op_array . T		82996	1					
ANR	83102	AdditiveExpression	ex -> func -> op_array . last_var + ex -> func -> op_array . T		82996	0		+			
ANR	83103	MemberAccess	ex -> func -> op_array . last_var		82996	0					
ANR	83104	PtrMemberAccess	ex -> func -> op_array		82996	0					
ANR	83105	PtrMemberAccess	ex -> func		82996	0					
ANR	83106	Identifier	ex		82996	0					
ANR	83107	Identifier	func		82996	1					
ANR	83108	Identifier	op_array		82996	1					
ANR	83109	Identifier	last_var		82996	1					
ANR	83110	MemberAccess	ex -> func -> op_array . T		82996	1					
ANR	83111	PtrMemberAccess	ex -> func -> op_array		82996	0					
ANR	83112	PtrMemberAccess	ex -> func		82996	0					
ANR	83113	Identifier	ex		82996	0					
ANR	83114	Identifier	func		82996	1					
ANR	83115	Identifier	op_array		82996	1					
ANR	83116	Identifier	T		82996	1					
ANR	83117	WhileStatement	while ( i < arg_count )		82996	4					
ANR	83118	Condition	i < arg_count	521:10:16042:16054	82996	0	True				
ANR	83119	RelationalExpression	i < arg_count		82996	0		<			
ANR	83120	Identifier	i		82996	0					
ANR	83121	Identifier	arg_count		82996	1					
ANR	83122	CompoundStatement		21:25:457:457	82996	1					
ANR	83123	ExpressionStatement	q = p	522:4:16063:16068	82996	0	True				
ANR	83124	AssignmentExpression	q = p		82996	0		=			
ANR	83125	Identifier	q		82996	0					
ANR	83126	Identifier	p		82996	1					
ANR	83127	IfStatement	if ( EXPECTED ( Z_TYPE_INFO_P ( q ) != IS_UNDEF ) )		82996	1					
ANR	83128	Condition	EXPECTED ( Z_TYPE_INFO_P ( q ) != IS_UNDEF )	523:8:16078:16115	82996	0	True				
ANR	83129	CallExpression	EXPECTED ( Z_TYPE_INFO_P ( q ) != IS_UNDEF )		82996	0					
ANR	83130	Callee	EXPECTED		82996	0					
ANR	83131	Identifier	EXPECTED		82996	0					
ANR	83132	ArgumentList	Z_TYPE_INFO_P ( q ) != IS_UNDEF		82996	1					
ANR	83133	Argument	Z_TYPE_INFO_P ( q ) != IS_UNDEF		82996	0					
ANR	83134	EqualityExpression	Z_TYPE_INFO_P ( q ) != IS_UNDEF		82996	0		!=			
ANR	83135	CallExpression	Z_TYPE_INFO_P ( q )		82996	0					
ANR	83136	Callee	Z_TYPE_INFO_P		82996	0					
ANR	83137	Identifier	Z_TYPE_INFO_P		82996	0					
ANR	83138	ArgumentList	q		82996	1					
ANR	83139	Argument	q		82996	0					
ANR	83140	Identifier	q		82996	0					
ANR	83141	Identifier	IS_UNDEF		82996	1					
ANR	83142	CompoundStatement		23:48:518:518	82996	1					
ANR	83143	ExpressionStatement	ZVAL_DEREF ( q )	524:5:16125:16138	82996	0	True				
ANR	83144	CallExpression	ZVAL_DEREF ( q )		82996	0					
ANR	83145	Callee	ZVAL_DEREF		82996	0					
ANR	83146	Identifier	ZVAL_DEREF		82996	0					
ANR	83147	ArgumentList	q		82996	1					
ANR	83148	Argument	q		82996	0					
ANR	83149	Identifier	q		82996	0					
ANR	83150	IfStatement	if ( Z_OPT_REFCOUNTED_P ( q ) )		82996	1					
ANR	83151	Condition	Z_OPT_REFCOUNTED_P ( q )	525:9:16149:16169	82996	0	True				
ANR	83152	CallExpression	Z_OPT_REFCOUNTED_P ( q )		82996	0					
ANR	83153	Callee	Z_OPT_REFCOUNTED_P		82996	0					
ANR	83154	Identifier	Z_OPT_REFCOUNTED_P		82996	0					
ANR	83155	ArgumentList	q		82996	1					
ANR	83156	Argument	q		82996	0					
ANR	83157	Identifier	q		82996	0					
ANR	83158	CompoundStatement		25:32:572:572	82996	1					
ANR	83159	ExpressionStatement	Z_ADDREF_P ( q )	526:6:16181:16194	82996	0	True				
ANR	83160	CallExpression	Z_ADDREF_P ( q )		82996	0					
ANR	83161	Callee	Z_ADDREF_P		82996	0					
ANR	83162	Identifier	Z_ADDREF_P		82996	0					
ANR	83163	ArgumentList	q		82996	1					
ANR	83164	Argument	q		82996	0					
ANR	83165	Identifier	q		82996	0					
ANR	83166	ExpressionStatement	n ++	528:5:16208:16211	82996	2	True				
ANR	83167	PostIncDecOperationExpression	n ++		82996	0					
ANR	83168	Identifier	n		82996	0					
ANR	83169	IncDec	++		82996	1					
ANR	83170	ExpressionStatement	ZEND_HASH_FILL_ADD ( q )	530:4:16223:16244	82996	2	True				
ANR	83171	CallExpression	ZEND_HASH_FILL_ADD ( q )		82996	0					
ANR	83172	Callee	ZEND_HASH_FILL_ADD		82996	0					
ANR	83173	Identifier	ZEND_HASH_FILL_ADD		82996	0					
ANR	83174	ArgumentList	q		82996	1					
ANR	83175	Argument	q		82996	0					
ANR	83176	Identifier	q		82996	0					
ANR	83177	ExpressionStatement	p ++	531:4:16250:16253	82996	3	True				
ANR	83178	PostIncDecOperationExpression	p ++		82996	0					
ANR	83179	Identifier	p		82996	0					
ANR	83180	IncDec	++		82996	1					
ANR	83181	ExpressionStatement	i ++	532:4:16259:16262	82996	4	True				
ANR	83182	PostIncDecOperationExpression	i ++		82996	0					
ANR	83183	Identifier	i		82996	0					
ANR	83184	IncDec	++		82996	1					
ANR	83185	Identifier	ZEND_HASH_FILL_PACKED		82996	1					
ANR	83186	ParameterList	Z_ARRVAL_P ( return_value )		82996	2					
ANR	83187	Parameter	Z_ARRVAL_P ( return_value )	501:24:15573:15596	82996	0	True				
ANR	83188	ParameterType	(Z_ARRVAL_P)		82996	0					
ANR	83189	Identifier	return_value		82996	1					
ANR	83190	CFGEntryNode	ENTRY		82996		True				
ANR	83191	CFGExitNode	EXIT		82996		True				
ANR	83192	Symbol	return_value		82996						
ANR	83193	Symbol	Z_OPT_REFCOUNTED_P		82996						
ANR	83194	Symbol	ZEND_CALL_ARG		82996						
ANR	83195	Symbol	ex -> func -> op_array		82996						
ANR	83196	Symbol	i		82996						
ANR	83197	Symbol	ex -> func -> op_array . T		82996						
ANR	83198	Symbol	ex -> func		82996						
ANR	83199	Symbol	n		82996						
ANR	83200	Symbol	Z_TYPE_INFO_P		82996						
ANR	83201	Symbol	first_extra_arg		82996						
ANR	83202	Symbol	p		82996						
ANR	83203	Symbol	q		82996						
ANR	83204	Symbol	ex		82996						
ANR	83205	Symbol	ex -> func -> op_array . last_var		82996						
ANR	83206	Symbol	ZEND_CALL_VAR_NUM		82996						
ANR	83207	Symbol	* ex -> func		82996						
ANR	83208	Symbol	* ex		82996						
ANR	83209	Symbol	EXPECTED		82996						
ANR	83210	Symbol	* * ex		82996						
ANR	83211	Symbol	IS_UNDEF		82996						
ANR	83212	Symbol	arg_count		82996						
ANR	83213	DeclStmt									
ANR	83214	Decl							zend_string	zend_string *	s
ANR	83215	DeclStmt									
ANR	83216	Decl							zend_string	zend_string *	s1
ANR	83217	Decl							zend_string	zend_string *	s2
ANR	83218	DeclStmt									
ANR	83219	Decl							zend_string	zend_string *	s1
ANR	83220	Decl							zend_string	zend_string *	s2
ANR	83221	DeclStmt									
ANR	83222	Decl							zend_long	zend_long	len
ANR	83223	DeclStmt									
ANR	83224	Decl							zend_string	zend_string *	s1
ANR	83225	Decl							zend_string	zend_string *	s2
ANR	83226	DeclStmt									
ANR	83227	Decl							zend_string	zend_string *	s1
ANR	83228	Decl							zend_string	zend_string *	s2
ANR	83229	DeclStmt									
ANR	83230	Decl							zend_long	zend_long	len
ANR	83231	DeclStmt									
ANR	83232	Decl							zval	zval *	array
ANR	83233	Decl							zval	zval *	entry
ANR	83234	Decl							zval	zval	tmp
ANR	83235	DeclStmt									
ANR	83236	Decl							zend_ulong	zend_ulong	num_key
ANR	83237	DeclStmt									
ANR	83238	Decl							HashTable	HashTable *	target_hash
ANR	83239	DeclStmt									
ANR	83240	Decl							zend_string	zend_string *	key
ANR	83241	DeclStmt									
ANR	83242	Decl							zval	zval *	err
ANR	83243	DeclStmt									
ANR	83244	Decl							int	int	old_error_reporting
ANR	83245	DeclStmt									
ANR	83246	Decl							zend_ini_entry	zend_ini_entry *	p
ANR	83247	Function	validate_constant_array	746:0:21696:22469							
ANR	83248	FunctionDef	validate_constant_array (HashTable * ht)		83247	0					
ANR	83249	CompoundStatement		747:0:21756:22469	83247	0					
ANR	83250	IdentifierDeclStatement	int ret = 1 ;	748:1:21759:21770	83247	0	True				
ANR	83251	IdentifierDecl	ret = 1		83247	0					
ANR	83252	IdentifierDeclType	int		83247	0					
ANR	83253	Identifier	ret		83247	1					
ANR	83254	AssignmentExpression	ret = 1		83247	2		=			
ANR	83255	Identifier	ret		83247	0					
ANR	83256	PrimaryExpression	1		83247	1					
ANR	83257	IdentifierDeclStatement	zval * val ;	749:1:21773:21782	83247	1	True				
ANR	83258	IdentifierDecl	* val		83247	0					
ANR	83259	IdentifierDeclType	zval *		83247	0					
ANR	83260	Identifier	val		83247	1					
ANR	83261	ExpressionStatement	ht -> u . v . nApplyCount ++	751:1:21786:21807	83247	2	True				
ANR	83262	PostIncDecOperationExpression	ht -> u . v . nApplyCount ++		83247	0					
ANR	83263	MemberAccess	ht -> u . v . nApplyCount		83247	0					
ANR	83264	MemberAccess	ht -> u . v		83247	0					
ANR	83265	PtrMemberAccess	ht -> u		83247	0					
ANR	83266	Identifier	ht		83247	0					
ANR	83267	Identifier	u		83247	1					
ANR	83268	Identifier	v		83247	1					
ANR	83269	Identifier	nApplyCount		83247	1					
ANR	83270	IncDec	++		83247	1					
ANR	83271	Statement	ZEND_HASH_FOREACH_VAL_IND	752:1:21810:21834	83247	3	True				
ANR	83272	Statement	(	752:26:21835:21835	83247	4	True				
ANR	83273	Statement	ht	752:27:21836:21837	83247	5	True				
ANR	83274	Statement	","	752:29:21838:21838	83247	6	True				
ANR	83275	Statement	val	752:31:21840:21842	83247	7	True				
ANR	83276	Statement	)	752:34:21843:21843	83247	8	True				
ANR	83277	CompoundStatement		6:36:88:88	83247	9					
ANR	83278	ExpressionStatement	ZVAL_DEREF ( val )	753:2:21849:21864	83247	0	True				
ANR	83279	CallExpression	ZVAL_DEREF ( val )		83247	0					
ANR	83280	Callee	ZVAL_DEREF		83247	0					
ANR	83281	Identifier	ZVAL_DEREF		83247	0					
ANR	83282	ArgumentList	val		83247	1					
ANR	83283	Argument	val		83247	0					
ANR	83284	Identifier	val		83247	0					
ANR	83285	IfStatement	if ( Z_REFCOUNTED_P ( val ) )		83247	1					
ANR	83286	Condition	Z_REFCOUNTED_P ( val )	754:6:21872:21890	83247	0	True				
ANR	83287	CallExpression	Z_REFCOUNTED_P ( val )		83247	0					
ANR	83288	Callee	Z_REFCOUNTED_P		83247	0					
ANR	83289	Identifier	Z_REFCOUNTED_P		83247	0					
ANR	83290	ArgumentList	val		83247	1					
ANR	83291	Argument	val		83247	0					
ANR	83292	Identifier	val		83247	0					
ANR	83293	CompoundStatement		8:27:136:136	83247	1					
ANR	83294	IfStatement	if ( Z_TYPE_P ( val ) == IS_ARRAY )		83247	0					
ANR	83295	Condition	Z_TYPE_P ( val ) == IS_ARRAY	755:7:21902:21926	83247	0	True				
ANR	83296	EqualityExpression	Z_TYPE_P ( val ) == IS_ARRAY		83247	0		==			
ANR	83297	CallExpression	Z_TYPE_P ( val )		83247	0					
ANR	83298	Callee	Z_TYPE_P		83247	0					
ANR	83299	Identifier	Z_TYPE_P		83247	0					
ANR	83300	ArgumentList	val		83247	1					
ANR	83301	Argument	val		83247	0					
ANR	83302	Identifier	val		83247	0					
ANR	83303	Identifier	IS_ARRAY		83247	1					
ANR	83304	CompoundStatement		9:34:172:172	83247	1					
ANR	83305	IfStatement	if ( ! Z_IMMUTABLE_P ( val ) )		83247	0					
ANR	83306	Condition	! Z_IMMUTABLE_P ( val )	756:8:21939:21957	83247	0	True				
ANR	83307	UnaryOperationExpression	! Z_IMMUTABLE_P ( val )		83247	0					
ANR	83308	UnaryOperator	!		83247	0					
ANR	83309	CallExpression	Z_IMMUTABLE_P ( val )		83247	1					
ANR	83310	Callee	Z_IMMUTABLE_P		83247	0					
ANR	83311	Identifier	Z_IMMUTABLE_P		83247	0					
ANR	83312	ArgumentList	val		83247	1					
ANR	83313	Argument	val		83247	0					
ANR	83314	Identifier	val		83247	0					
ANR	83315	CompoundStatement		10:29:203:203	83247	1					
ANR	83316	IfStatement	if ( Z_ARRVAL_P ( val ) -> u . v . nApplyCount > 0 )		83247	0					
ANR	83317	Condition	Z_ARRVAL_P ( val ) -> u . v . nApplyCount > 0	757:9:21971:22006	83247	0	True				
ANR	83318	RelationalExpression	Z_ARRVAL_P ( val ) -> u . v . nApplyCount > 0		83247	0		>			
ANR	83319	MemberAccess	Z_ARRVAL_P ( val ) -> u . v . nApplyCount		83247	0					
ANR	83320	MemberAccess	Z_ARRVAL_P ( val ) -> u . v		83247	0					
ANR	83321	PtrMemberAccess	Z_ARRVAL_P ( val ) -> u		83247	0					
ANR	83322	CallExpression	Z_ARRVAL_P ( val )		83247	0					
ANR	83323	Callee	Z_ARRVAL_P		83247	0					
ANR	83324	Identifier	Z_ARRVAL_P		83247	0					
ANR	83325	ArgumentList	val		83247	1					
ANR	83326	Argument	val		83247	0					
ANR	83327	Identifier	val		83247	0					
ANR	83328	Identifier	u		83247	1					
ANR	83329	Identifier	v		83247	1					
ANR	83330	Identifier	nApplyCount		83247	1					
ANR	83331	PrimaryExpression	0		83247	1					
ANR	83332	CompoundStatement		11:47:252:252	83247	1					
ANR	83333	ExpressionStatement	"zend_error ( E_WARNING , ""Constants cannot be recursive arrays"" )"	758:6:22017:22078	83247	0	True				
ANR	83334	CallExpression	"zend_error ( E_WARNING , ""Constants cannot be recursive arrays"" )"		83247	0					
ANR	83335	Callee	zend_error		83247	0					
ANR	83336	Identifier	zend_error		83247	0					
ANR	83337	ArgumentList	E_WARNING		83247	1					
ANR	83338	Argument	E_WARNING		83247	0					
ANR	83339	Identifier	E_WARNING		83247	0					
ANR	83340	Argument	"""Constants cannot be recursive arrays"""		83247	1					
ANR	83341	PrimaryExpression	"""Constants cannot be recursive arrays"""		83247	0					
ANR	83342	ExpressionStatement	ret = 0	759:6:22086:22093	83247	1	True				
ANR	83343	AssignmentExpression	ret = 0		83247	0		=			
ANR	83344	Identifier	ret		83247	0					
ANR	83345	PrimaryExpression	0		83247	1					
ANR	83346	BreakStatement	break ;	760:6:22101:22106	83247	2	True				
ANR	83347	ElseStatement	else		83247	0					
ANR	83348	IfStatement	if ( ! validate_constant_array ( Z_ARRVAL_P ( val ) ) )		83247	0					
ANR	83349	Condition	! validate_constant_array ( Z_ARRVAL_P ( val ) )	761:16:22124:22164	83247	0	True				
ANR	83350	UnaryOperationExpression	! validate_constant_array ( Z_ARRVAL_P ( val ) )		83247	0					
ANR	83351	UnaryOperator	!		83247	0					
ANR	83352	CallExpression	validate_constant_array ( Z_ARRVAL_P ( val ) )		83247	1					
ANR	83353	Callee	validate_constant_array		83247	0					
ANR	83354	Identifier	validate_constant_array		83247	0					
ANR	83355	ArgumentList	Z_ARRVAL_P ( val )		83247	1					
ANR	83356	Argument	Z_ARRVAL_P ( val )		83247	0					
ANR	83357	CallExpression	Z_ARRVAL_P ( val )		83247	0					
ANR	83358	Callee	Z_ARRVAL_P		83247	0					
ANR	83359	Identifier	Z_ARRVAL_P		83247	0					
ANR	83360	ArgumentList	val		83247	1					
ANR	83361	Argument	val		83247	0					
ANR	83362	Identifier	val		83247	0					
ANR	83363	CompoundStatement		15:59:410:410	83247	1					
ANR	83364	ExpressionStatement	ret = 0	762:6:22175:22182	83247	0	True				
ANR	83365	AssignmentExpression	ret = 0		83247	0		=			
ANR	83366	Identifier	ret		83247	0					
ANR	83367	PrimaryExpression	0		83247	1					
ANR	83368	BreakStatement	break ;	763:6:22190:22195	83247	1	True				
ANR	83369	ElseStatement	else		83247	0					
ANR	83370	IfStatement	if ( Z_TYPE_P ( val ) != IS_STRING && Z_TYPE_P ( val ) != IS_RESOURCE )		83247	0					
ANR	83371	Condition	Z_TYPE_P ( val ) != IS_STRING && Z_TYPE_P ( val ) != IS_RESOURCE	766:14:22224:22281	83247	0	True				
ANR	83372	AndExpression	Z_TYPE_P ( val ) != IS_STRING && Z_TYPE_P ( val ) != IS_RESOURCE		83247	0		&&			
ANR	83373	EqualityExpression	Z_TYPE_P ( val ) != IS_STRING		83247	0		!=			
ANR	83374	CallExpression	Z_TYPE_P ( val )		83247	0					
ANR	83375	Callee	Z_TYPE_P		83247	0					
ANR	83376	Identifier	Z_TYPE_P		83247	0					
ANR	83377	ArgumentList	val		83247	1					
ANR	83378	Argument	val		83247	0					
ANR	83379	Identifier	val		83247	0					
ANR	83380	Identifier	IS_STRING		83247	1					
ANR	83381	EqualityExpression	Z_TYPE_P ( val ) != IS_RESOURCE		83247	1		!=			
ANR	83382	CallExpression	Z_TYPE_P ( val )		83247	0					
ANR	83383	Callee	Z_TYPE_P		83247	0					
ANR	83384	Identifier	Z_TYPE_P		83247	0					
ANR	83385	ArgumentList	val		83247	1					
ANR	83386	Argument	val		83247	0					
ANR	83387	Identifier	val		83247	0					
ANR	83388	Identifier	IS_RESOURCE		83247	1					
ANR	83389	CompoundStatement		20:74:527:527	83247	1					
ANR	83390	ExpressionStatement	"zend_error ( E_WARNING , ""Constants may only evaluate to scalar values or arrays"" )"	767:4:22290:22369	83247	0	True				
ANR	83391	CallExpression	"zend_error ( E_WARNING , ""Constants may only evaluate to scalar values or arrays"" )"		83247	0					
ANR	83392	Callee	zend_error		83247	0					
ANR	83393	Identifier	zend_error		83247	0					
ANR	83394	ArgumentList	E_WARNING		83247	1					
ANR	83395	Argument	E_WARNING		83247	0					
ANR	83396	Identifier	E_WARNING		83247	0					
ANR	83397	Argument	"""Constants may only evaluate to scalar values or arrays"""		83247	1					
ANR	83398	PrimaryExpression	"""Constants may only evaluate to scalar values or arrays"""		83247	0					
ANR	83399	ExpressionStatement	ret = 0	768:4:22375:22382	83247	1	True				
ANR	83400	AssignmentExpression	ret = 0		83247	0		=			
ANR	83401	Identifier	ret		83247	0					
ANR	83402	PrimaryExpression	0		83247	1					
ANR	83403	BreakStatement	break ;	769:4:22388:22393	83247	2	True				
ANR	83404	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	772:3:22407:22430	83247	10	True				
ANR	83405	CallExpression	ZEND_HASH_FOREACH_END ( )		83247	0					
ANR	83406	Callee	ZEND_HASH_FOREACH_END		83247	0					
ANR	83407	Identifier	ZEND_HASH_FOREACH_END		83247	0					
ANR	83408	ArgumentList			83247	1					
ANR	83409	ExpressionStatement	ht -> u . v . nApplyCount --	773:1:22433:22454	83247	11	True				
ANR	83410	PostIncDecOperationExpression	ht -> u . v . nApplyCount --		83247	0					
ANR	83411	MemberAccess	ht -> u . v . nApplyCount		83247	0					
ANR	83412	MemberAccess	ht -> u . v		83247	0					
ANR	83413	PtrMemberAccess	ht -> u		83247	0					
ANR	83414	Identifier	ht		83247	0					
ANR	83415	Identifier	u		83247	1					
ANR	83416	Identifier	v		83247	1					
ANR	83417	Identifier	nApplyCount		83247	1					
ANR	83418	IncDec	--		83247	1					
ANR	83419	ReturnStatement	return ret ;	774:1:22457:22467	83247	12	True				
ANR	83420	Identifier	ret		83247	0					
ANR	83421	ReturnType	static int		83247	1					
ANR	83422	Identifier	validate_constant_array		83247	2					
ANR	83423	ParameterList	HashTable * ht		83247	3					
ANR	83424	Parameter	HashTable * ht	746:35:21731:21743	83247	0	True				
ANR	83425	ParameterType	HashTable *		83247	0					
ANR	83426	Identifier	ht		83247	1					
ANR	83427	CFGEntryNode	ENTRY		83247		True				
ANR	83428	CFGExitNode	EXIT		83247		True				
ANR	83429	CFGErrorNode	ERROR		83247		True				
ANR	83430	Symbol	ret		83247						
ANR	83431	Symbol	val		83247						
ANR	83432	Symbol	ht -> u		83247						
ANR	83433	Symbol	validate_constant_array		83247						
ANR	83434	Symbol	Z_ARRVAL_P ( val ) -> u . v		83247						
ANR	83435	Symbol	* Z_ARRVAL_P		83247						
ANR	83436	Symbol	ht		83247						
ANR	83437	Symbol	Z_TYPE_P		83247						
ANR	83438	Symbol	Z_ARRVAL_P ( val ) -> u		83247						
ANR	83439	Symbol	ht -> u . v		83247						
ANR	83440	Symbol	Z_IMMUTABLE_P		83247						
ANR	83441	Symbol	E_WARNING		83247						
ANR	83442	Symbol	* ht		83247						
ANR	83443	Symbol	IS_ARRAY		83247						
ANR	83444	Symbol	Z_REFCOUNTED_P		83247						
ANR	83445	Symbol	Z_ARRVAL_P ( val ) -> u . v . nApplyCount		83247						
ANR	83446	Symbol	IS_STRING		83247						
ANR	83447	Symbol	Z_ARRVAL_P		83247						
ANR	83448	Symbol	ht -> u . v . nApplyCount		83247						
ANR	83449	Symbol	IS_RESOURCE		83247						
ANR	83450	Function	copy_constant_array	778:0:22482:23292							
ANR	83451	FunctionDef	"copy_constant_array (zval * dst , zval * src)"		83450	0					
ANR	83452	CompoundStatement		779:0:22546:23292	83450	0					
ANR	83453	IdentifierDeclStatement	zend_string * key ;	780:1:22549:22565	83450	0	True				
ANR	83454	IdentifierDecl	* key		83450	0					
ANR	83455	IdentifierDeclType	zend_string *		83450	0					
ANR	83456	Identifier	key		83450	1					
ANR	83457	IdentifierDeclStatement	zend_ulong idx ;	781:1:22568:22582	83450	1	True				
ANR	83458	IdentifierDecl	idx		83450	0					
ANR	83459	IdentifierDeclType	zend_ulong		83450	0					
ANR	83460	Identifier	idx		83450	1					
ANR	83461	IdentifierDeclStatement	"zval * new_val , * val ;"	782:1:22585:22604	83450	2	True				
ANR	83462	IdentifierDecl	* new_val		83450	0					
ANR	83463	IdentifierDeclType	zval *		83450	0					
ANR	83464	Identifier	new_val		83450	1					
ANR	83465	IdentifierDecl	* val		83450	1					
ANR	83466	IdentifierDeclType	zval *		83450	0					
ANR	83467	Identifier	val		83450	1					
ANR	83468	ExpressionStatement	"array_init_size ( dst , zend_hash_num_elements ( Z_ARRVAL_P ( src ) ) )"	784:1:22608:22669	83450	3	True				
ANR	83469	CallExpression	"array_init_size ( dst , zend_hash_num_elements ( Z_ARRVAL_P ( src ) ) )"		83450	0					
ANR	83470	Callee	array_init_size		83450	0					
ANR	83471	Identifier	array_init_size		83450	0					
ANR	83472	ArgumentList	dst		83450	1					
ANR	83473	Argument	dst		83450	0					
ANR	83474	Identifier	dst		83450	0					
ANR	83475	Argument	zend_hash_num_elements ( Z_ARRVAL_P ( src ) )		83450	1					
ANR	83476	CallExpression	zend_hash_num_elements ( Z_ARRVAL_P ( src ) )		83450	0					
ANR	83477	Callee	zend_hash_num_elements		83450	0					
ANR	83478	Identifier	zend_hash_num_elements		83450	0					
ANR	83479	ArgumentList	Z_ARRVAL_P ( src )		83450	1					
ANR	83480	Argument	Z_ARRVAL_P ( src )		83450	0					
ANR	83481	CallExpression	Z_ARRVAL_P ( src )		83450	0					
ANR	83482	Callee	Z_ARRVAL_P		83450	0					
ANR	83483	Identifier	Z_ARRVAL_P		83450	0					
ANR	83484	ArgumentList	src		83450	1					
ANR	83485	Argument	src		83450	0					
ANR	83486	Identifier	src		83450	0					
ANR	83487	Statement	ZEND_HASH_FOREACH_KEY_VAL_IND	785:1:22672:22700	83450	4	True				
ANR	83488	Statement	(	785:30:22701:22701	83450	5	True				
ANR	83489	Statement	Z_ARRVAL_P	785:31:22702:22711	83450	6	True				
ANR	83490	Statement	(	785:41:22712:22712	83450	7	True				
ANR	83491	Statement	src	785:42:22713:22715	83450	8	True				
ANR	83492	Statement	)	785:45:22716:22716	83450	9	True				
ANR	83493	Statement	","	785:46:22717:22717	83450	10	True				
ANR	83494	Statement	idx	785:48:22719:22721	83450	11	True				
ANR	83495	Statement	","	785:51:22722:22722	83450	12	True				
ANR	83496	Statement	key	785:53:22724:22726	83450	13	True				
ANR	83497	Statement	","	785:56:22727:22727	83450	14	True				
ANR	83498	Statement	val	785:58:22729:22731	83450	15	True				
ANR	83499	Statement	)	785:61:22732:22732	83450	16	True				
ANR	83500	CompoundStatement		7:63:187:187	83450	17					
ANR	83501	ExpressionStatement	ZVAL_DEREF ( val )	787:2:22787:22802	83450	0	True				
ANR	83502	CallExpression	ZVAL_DEREF ( val )		83450	0					
ANR	83503	Callee	ZVAL_DEREF		83450	0					
ANR	83504	Identifier	ZVAL_DEREF		83450	0					
ANR	83505	ArgumentList	val		83450	1					
ANR	83506	Argument	val		83450	0					
ANR	83507	Identifier	val		83450	0					
ANR	83508	IfStatement	if ( key )		83450	1					
ANR	83509	Condition	key	788:6:22810:22812	83450	0	True				
ANR	83510	Identifier	key		83450	0					
ANR	83511	CompoundStatement		10:11:268:268	83450	1					
ANR	83512	ExpressionStatement	"new_val = zend_hash_add_new ( Z_ARRVAL_P ( dst ) , key , val )"	789:3:22820:22874	83450	0	True				
ANR	83513	AssignmentExpression	"new_val = zend_hash_add_new ( Z_ARRVAL_P ( dst ) , key , val )"		83450	0		=			
ANR	83514	Identifier	new_val		83450	0					
ANR	83515	CallExpression	"zend_hash_add_new ( Z_ARRVAL_P ( dst ) , key , val )"		83450	1					
ANR	83516	Callee	zend_hash_add_new		83450	0					
ANR	83517	Identifier	zend_hash_add_new		83450	0					
ANR	83518	ArgumentList	Z_ARRVAL_P ( dst )		83450	1					
ANR	83519	Argument	Z_ARRVAL_P ( dst )		83450	0					
ANR	83520	CallExpression	Z_ARRVAL_P ( dst )		83450	0					
ANR	83521	Callee	Z_ARRVAL_P		83450	0					
ANR	83522	Identifier	Z_ARRVAL_P		83450	0					
ANR	83523	ArgumentList	dst		83450	1					
ANR	83524	Argument	dst		83450	0					
ANR	83525	Identifier	dst		83450	0					
ANR	83526	Argument	key		83450	1					
ANR	83527	Identifier	key		83450	0					
ANR	83528	Argument	val		83450	2					
ANR	83529	Identifier	val		83450	0					
ANR	83530	ElseStatement	else		83450	0					
ANR	83531	CompoundStatement		12:9:338:338	83450	0					
ANR	83532	ExpressionStatement	"new_val = zend_hash_index_add_new ( Z_ARRVAL_P ( dst ) , idx , val )"	791:3:22890:22950	83450	0	True				
ANR	83533	AssignmentExpression	"new_val = zend_hash_index_add_new ( Z_ARRVAL_P ( dst ) , idx , val )"		83450	0		=			
ANR	83534	Identifier	new_val		83450	0					
ANR	83535	CallExpression	"zend_hash_index_add_new ( Z_ARRVAL_P ( dst ) , idx , val )"		83450	1					
ANR	83536	Callee	zend_hash_index_add_new		83450	0					
ANR	83537	Identifier	zend_hash_index_add_new		83450	0					
ANR	83538	ArgumentList	Z_ARRVAL_P ( dst )		83450	1					
ANR	83539	Argument	Z_ARRVAL_P ( dst )		83450	0					
ANR	83540	CallExpression	Z_ARRVAL_P ( dst )		83450	0					
ANR	83541	Callee	Z_ARRVAL_P		83450	0					
ANR	83542	Identifier	Z_ARRVAL_P		83450	0					
ANR	83543	ArgumentList	dst		83450	1					
ANR	83544	Argument	dst		83450	0					
ANR	83545	Identifier	dst		83450	0					
ANR	83546	Argument	idx		83450	1					
ANR	83547	Identifier	idx		83450	0					
ANR	83548	Argument	val		83450	2					
ANR	83549	Identifier	val		83450	0					
ANR	83550	IfStatement	if ( Z_TYPE_P ( val ) == IS_ARRAY )		83450	2					
ANR	83551	Condition	Z_TYPE_P ( val ) == IS_ARRAY	793:6:22962:22986	83450	0	True				
ANR	83552	EqualityExpression	Z_TYPE_P ( val ) == IS_ARRAY		83450	0		==			
ANR	83553	CallExpression	Z_TYPE_P ( val )		83450	0					
ANR	83554	Callee	Z_TYPE_P		83450	0					
ANR	83555	Identifier	Z_TYPE_P		83450	0					
ANR	83556	ArgumentList	val		83450	1					
ANR	83557	Argument	val		83450	0					
ANR	83558	Identifier	val		83450	0					
ANR	83559	Identifier	IS_ARRAY		83450	1					
ANR	83560	CompoundStatement		15:33:442:442	83450	1					
ANR	83561	IfStatement	if ( ! Z_IMMUTABLE_P ( val ) )		83450	0					
ANR	83562	Condition	! Z_IMMUTABLE_P ( val )	794:7:22998:23016	83450	0	True				
ANR	83563	UnaryOperationExpression	! Z_IMMUTABLE_P ( val )		83450	0					
ANR	83564	UnaryOperator	!		83450	0					
ANR	83565	CallExpression	Z_IMMUTABLE_P ( val )		83450	1					
ANR	83566	Callee	Z_IMMUTABLE_P		83450	0					
ANR	83567	Identifier	Z_IMMUTABLE_P		83450	0					
ANR	83568	ArgumentList	val		83450	1					
ANR	83569	Argument	val		83450	0					
ANR	83570	Identifier	val		83450	0					
ANR	83571	CompoundStatement		16:28:472:472	83450	1					
ANR	83572	ExpressionStatement	"copy_constant_array ( new_val , val )"	795:4:23025:23058	83450	0	True				
ANR	83573	CallExpression	"copy_constant_array ( new_val , val )"		83450	0					
ANR	83574	Callee	copy_constant_array		83450	0					
ANR	83575	Identifier	copy_constant_array		83450	0					
ANR	83576	ArgumentList	new_val		83450	1					
ANR	83577	Argument	new_val		83450	0					
ANR	83578	Identifier	new_val		83450	0					
ANR	83579	Argument	val		83450	1					
ANR	83580	Identifier	val		83450	0					
ANR	83581	ElseStatement	else		83450	0					
ANR	83582	IfStatement	if ( Z_REFCOUNTED_P ( val ) )		83450	0					
ANR	83583	Condition	Z_REFCOUNTED_P ( val )	797:13:23078:23096	83450	0	True				
ANR	83584	CallExpression	Z_REFCOUNTED_P ( val )		83450	0					
ANR	83585	Callee	Z_REFCOUNTED_P		83450	0					
ANR	83586	Identifier	Z_REFCOUNTED_P		83450	0					
ANR	83587	ArgumentList	val		83450	1					
ANR	83588	Argument	val		83450	0					
ANR	83589	Identifier	val		83450	0					
ANR	83590	CompoundStatement		19:34:552:552	83450	1					
ANR	83591	ExpressionStatement	Z_ADDREF_P ( val )	798:3:23104:23119	83450	0	True				
ANR	83592	CallExpression	Z_ADDREF_P ( val )		83450	0					
ANR	83593	Callee	Z_ADDREF_P		83450	0					
ANR	83594	Identifier	Z_ADDREF_P		83450	0					
ANR	83595	ArgumentList	val		83450	1					
ANR	83596	Argument	val		83450	0					
ANR	83597	Identifier	val		83450	0					
ANR	83598	IfStatement	if ( UNEXPECTED ( Z_TYPE_INFO_P ( val ) == IS_RESOURCE_EX ) )		83450	1					
ANR	83599	Condition	UNEXPECTED ( Z_TYPE_INFO_P ( val ) == IS_RESOURCE_EX )	799:7:23128:23175	83450	0	True				
ANR	83600	CallExpression	UNEXPECTED ( Z_TYPE_INFO_P ( val ) == IS_RESOURCE_EX )		83450	0					
ANR	83601	Callee	UNEXPECTED		83450	0					
ANR	83602	Identifier	UNEXPECTED		83450	0					
ANR	83603	ArgumentList	Z_TYPE_INFO_P ( val ) == IS_RESOURCE_EX		83450	1					
ANR	83604	Argument	Z_TYPE_INFO_P ( val ) == IS_RESOURCE_EX		83450	0					
ANR	83605	EqualityExpression	Z_TYPE_INFO_P ( val ) == IS_RESOURCE_EX		83450	0		==			
ANR	83606	CallExpression	Z_TYPE_INFO_P ( val )		83450	0					
ANR	83607	Callee	Z_TYPE_INFO_P		83450	0					
ANR	83608	Identifier	Z_TYPE_INFO_P		83450	0					
ANR	83609	ArgumentList	val		83450	1					
ANR	83610	Argument	val		83450	0					
ANR	83611	Identifier	val		83450	0					
ANR	83612	Identifier	IS_RESOURCE_EX		83450	1					
ANR	83613	CompoundStatement		21:57:631:631	83450	1					
ANR	83614	ExpressionStatement	Z_TYPE_INFO_P ( new_val ) &= ~ ( IS_TYPE_REFCOUNTED << Z_TYPE_FLAGS_SHIFT )	800:4:23184:23253	83450	0	True				
ANR	83615	AssignmentExpression	Z_TYPE_INFO_P ( new_val ) &= ~ ( IS_TYPE_REFCOUNTED << Z_TYPE_FLAGS_SHIFT )		83450	0		&=			
ANR	83616	CallExpression	Z_TYPE_INFO_P ( new_val )		83450	0					
ANR	83617	Callee	Z_TYPE_INFO_P		83450	0					
ANR	83618	Identifier	Z_TYPE_INFO_P		83450	0					
ANR	83619	ArgumentList	new_val		83450	1					
ANR	83620	Argument	new_val		83450	0					
ANR	83621	Identifier	new_val		83450	0					
ANR	83622	UnaryOperationExpression	~ ( IS_TYPE_REFCOUNTED << Z_TYPE_FLAGS_SHIFT )		83450	1					
ANR	83623	UnaryOperator	~		83450	0					
ANR	83624	ShiftExpression	IS_TYPE_REFCOUNTED << Z_TYPE_FLAGS_SHIFT		83450	1		<<			
ANR	83625	Identifier	IS_TYPE_REFCOUNTED		83450	0					
ANR	83626	Identifier	Z_TYPE_FLAGS_SHIFT		83450	1					
ANR	83627	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	803:3:23267:23290	83450	18	True				
ANR	83628	CallExpression	ZEND_HASH_FOREACH_END ( )		83450	0					
ANR	83629	Callee	ZEND_HASH_FOREACH_END		83450	0					
ANR	83630	Identifier	ZEND_HASH_FOREACH_END		83450	0					
ANR	83631	ArgumentList			83450	1					
ANR	83632	ReturnType	static void		83450	1					
ANR	83633	Identifier	copy_constant_array		83450	2					
ANR	83634	ParameterList	"zval * dst , zval * src"		83450	3					
ANR	83635	Parameter	zval * dst	778:32:22514:22522	83450	0	True				
ANR	83636	ParameterType	zval *		83450	0					
ANR	83637	Identifier	dst		83450	1					
ANR	83638	Parameter	zval * src	778:43:22525:22533	83450	1	True				
ANR	83639	ParameterType	zval *		83450	0					
ANR	83640	Identifier	src		83450	1					
ANR	83641	CFGEntryNode	ENTRY		83450		True				
ANR	83642	CFGExitNode	EXIT		83450		True				
ANR	83643	Symbol	val		83450						
ANR	83644	Symbol	IS_RESOURCE_EX		83450						
ANR	83645	Symbol	new_val		83450						
ANR	83646	Symbol	dst		83450						
ANR	83647	Symbol	src		83450						
ANR	83648	Symbol	zend_hash_num_elements		83450						
ANR	83649	Symbol	Z_TYPE_FLAGS_SHIFT		83450						
ANR	83650	Symbol	zend_hash_add_new		83450						
ANR	83651	Symbol	Z_TYPE_P		83450						
ANR	83652	Symbol	IS_TYPE_REFCOUNTED		83450						
ANR	83653	Symbol	Z_IMMUTABLE_P		83450						
ANR	83654	Symbol	Z_TYPE_INFO_P		83450						
ANR	83655	Symbol	UNEXPECTED		83450						
ANR	83656	Symbol	IS_ARRAY		83450						
ANR	83657	Symbol	Z_REFCOUNTED_P		83450						
ANR	83658	Symbol	idx		83450						
ANR	83659	Symbol	Z_ARRVAL_P		83450						
ANR	83660	Symbol	zend_hash_index_add_new		83450						
ANR	83661	Symbol	key		83450						
ANR	83662	DeclStmt									
ANR	83663	Decl							zend_string	zend_string *	name
ANR	83664	DeclStmt									
ANR	83665	Decl							zval	zval *	val
ANR	83666	Decl							zval	zval	val_free
ANR	83667	DeclStmt									
ANR	83668	Decl							zend_bool	zend_bool	non_cs
ANR	83669	DeclStmt									
ANR	83670	Decl							int	int	case_sensitive
ANR	83671	DeclStmt									
ANR	83672	Decl							zend_constant	zend_constant	c
ANR	83673	DeclStmt									
ANR	83674	Decl							zval	zval	rv
ANR	83675	DeclStmt									
ANR	83676	Decl							zend_string	zend_string *	name
ANR	83677	DeclStmt									
ANR	83678	Decl							zval	zval *	obj
ANR	83679	DeclStmt									
ANR	83680	Decl							zend_class_entry	zend_class_entry *	called_scope
ANR	83681	DeclStmt									
ANR	83682	Decl							zval	zval *	arg
ANR	83683	DeclStmt									
ANR	83684	Decl							zend_class_entry	zend_class_entry *	ce
ANR	83685	DeclStmt									
ANR	83686	Decl							zval	zval *	obj
ANR	83687	DeclStmt									
ANR	83688	Decl							zend_string	zend_string *	class_name
ANR	83689	DeclStmt									
ANR	83690	Decl							zend_class_entry	zend_class_entry *	instance_ce
ANR	83691	DeclStmt									
ANR	83692	Decl							zend_class_entry	zend_class_entry *	ce
ANR	83693	DeclStmt									
ANR	83694	Decl							zend_bool	zend_bool	allow_string
ANR	83695	DeclStmt									
ANR	83696	Decl							zend_bool	zend_bool	retval
ANR	83697	Function	add_class_vars	1079:0:29830:31246							
ANR	83698	FunctionDef	"add_class_vars (zend_class_entry * ce , int statics , zval * return_value)"		83697	0					
ANR	83699	CompoundStatement		1080:0:29912:31246	83697	0					
ANR	83700	IdentifierDeclStatement	zend_property_info * prop_info ;	1081:1:29915:29944	83697	0	True				
ANR	83701	IdentifierDecl	* prop_info		83697	0					
ANR	83702	IdentifierDeclType	zend_property_info *		83697	0					
ANR	83703	Identifier	prop_info		83697	1					
ANR	83704	IdentifierDeclStatement	"zval * prop , prop_copy ;"	1082:1:29947:29968	83697	1	True				
ANR	83705	IdentifierDecl	* prop		83697	0					
ANR	83706	IdentifierDeclType	zval *		83697	0					
ANR	83707	Identifier	prop		83697	1					
ANR	83708	IdentifierDecl	prop_copy		83697	1					
ANR	83709	IdentifierDeclType	zval		83697	0					
ANR	83710	Identifier	prop_copy		83697	1					
ANR	83711	IdentifierDeclStatement	zend_string * key ;	1083:1:29971:29987	83697	2	True				
ANR	83712	IdentifierDecl	* key		83697	0					
ANR	83713	IdentifierDeclType	zend_string *		83697	0					
ANR	83714	Identifier	key		83697	1					
ANR	83715	Statement	ZEND_HASH_FOREACH_STR_KEY_PTR	1085:1:29991:30019	83697	3	True				
ANR	83716	Statement	(	1085:30:30020:30020	83697	4	True				
ANR	83717	Statement	&	1085:31:30021:30021	83697	5	True				
ANR	83718	Statement	ce	1085:32:30022:30023	83697	6	True				
ANR	83719	Statement	->	1085:34:30024:30025	83697	7	True				
ANR	83720	Statement	properties_info	1085:36:30026:30040	83697	8	True				
ANR	83721	Statement	","	1085:51:30041:30041	83697	9	True				
ANR	83722	Statement	key	1085:53:30043:30045	83697	10	True				
ANR	83723	Statement	","	1085:56:30046:30046	83697	11	True				
ANR	83724	Statement	prop_info	1085:58:30048:30056	83697	12	True				
ANR	83725	Statement	)	1085:67:30057:30057	83697	13	True				
ANR	83726	CompoundStatement		6:69:146:146	83697	14					
ANR	83727	IfStatement	"if ( ( ( prop_info -> flags & ZEND_ACC_SHADOW ) && prop_info -> ce != EG ( scope ) ) || ( ( prop_info -> flags & ZEND_ACC_PROTECTED ) && ! zend_check_protected ( prop_info -> ce , EG ( scope ) ) ) || ( ( prop_info -> flags & ZEND_ACC_PRIVATE ) && ce != EG ( scope ) && prop_info -> ce != EG ( scope ) ) )"		83697	0					
ANR	83728	Condition	"( ( prop_info -> flags & ZEND_ACC_SHADOW ) && prop_info -> ce != EG ( scope ) ) || ( ( prop_info -> flags & ZEND_ACC_PROTECTED ) && ! zend_check_protected ( prop_info -> ce , EG ( scope ) ) ) || ( ( prop_info -> flags & ZEND_ACC_PRIVATE ) && ce != EG ( scope ) && prop_info -> ce != EG ( scope ) )"	1086:6:30067:30361	83697	0	True				
ANR	83729	OrExpression	"( ( prop_info -> flags & ZEND_ACC_SHADOW ) && prop_info -> ce != EG ( scope ) ) || ( ( prop_info -> flags & ZEND_ACC_PROTECTED ) && ! zend_check_protected ( prop_info -> ce , EG ( scope ) ) ) || ( ( prop_info -> flags & ZEND_ACC_PRIVATE ) && ce != EG ( scope ) && prop_info -> ce != EG ( scope ) )"		83697	0		||			
ANR	83730	AndExpression	( prop_info -> flags & ZEND_ACC_SHADOW ) && prop_info -> ce != EG ( scope )		83697	0		&&			
ANR	83731	BitAndExpression	prop_info -> flags & ZEND_ACC_SHADOW		83697	0		&			
ANR	83732	PtrMemberAccess	prop_info -> flags		83697	0					
ANR	83733	Identifier	prop_info		83697	0					
ANR	83734	Identifier	flags		83697	1					
ANR	83735	Identifier	ZEND_ACC_SHADOW		83697	1					
ANR	83736	EqualityExpression	prop_info -> ce != EG ( scope )		83697	1		!=			
ANR	83737	PtrMemberAccess	prop_info -> ce		83697	0					
ANR	83738	Identifier	prop_info		83697	0					
ANR	83739	Identifier	ce		83697	1					
ANR	83740	CallExpression	EG ( scope )		83697	1					
ANR	83741	Callee	EG		83697	0					
ANR	83742	Identifier	EG		83697	0					
ANR	83743	ArgumentList	scope		83697	1					
ANR	83744	Argument	scope		83697	0					
ANR	83745	Identifier	scope		83697	0					
ANR	83746	OrExpression	"( ( prop_info -> flags & ZEND_ACC_PROTECTED ) && ! zend_check_protected ( prop_info -> ce , EG ( scope ) ) ) || ( ( prop_info -> flags & ZEND_ACC_PRIVATE ) && ce != EG ( scope ) && prop_info -> ce != EG ( scope ) )"		83697	1		||			
ANR	83747	AndExpression	"( prop_info -> flags & ZEND_ACC_PROTECTED ) && ! zend_check_protected ( prop_info -> ce , EG ( scope ) )"		83697	0		&&			
ANR	83748	BitAndExpression	prop_info -> flags & ZEND_ACC_PROTECTED		83697	0		&			
ANR	83749	PtrMemberAccess	prop_info -> flags		83697	0					
ANR	83750	Identifier	prop_info		83697	0					
ANR	83751	Identifier	flags		83697	1					
ANR	83752	Identifier	ZEND_ACC_PROTECTED		83697	1					
ANR	83753	UnaryOperationExpression	"! zend_check_protected ( prop_info -> ce , EG ( scope ) )"		83697	1					
ANR	83754	UnaryOperator	!		83697	0					
ANR	83755	CallExpression	"zend_check_protected ( prop_info -> ce , EG ( scope ) )"		83697	1					
ANR	83756	Callee	zend_check_protected		83697	0					
ANR	83757	Identifier	zend_check_protected		83697	0					
ANR	83758	ArgumentList	prop_info -> ce		83697	1					
ANR	83759	Argument	prop_info -> ce		83697	0					
ANR	83760	PtrMemberAccess	prop_info -> ce		83697	0					
ANR	83761	Identifier	prop_info		83697	0					
ANR	83762	Identifier	ce		83697	1					
ANR	83763	Argument	EG ( scope )		83697	1					
ANR	83764	CallExpression	EG ( scope )		83697	0					
ANR	83765	Callee	EG		83697	0					
ANR	83766	Identifier	EG		83697	0					
ANR	83767	ArgumentList	scope		83697	1					
ANR	83768	Argument	scope		83697	0					
ANR	83769	Identifier	scope		83697	0					
ANR	83770	AndExpression	( prop_info -> flags & ZEND_ACC_PRIVATE ) && ce != EG ( scope ) && prop_info -> ce != EG ( scope )		83697	1		&&			
ANR	83771	BitAndExpression	prop_info -> flags & ZEND_ACC_PRIVATE		83697	0		&			
ANR	83772	PtrMemberAccess	prop_info -> flags		83697	0					
ANR	83773	Identifier	prop_info		83697	0					
ANR	83774	Identifier	flags		83697	1					
ANR	83775	Identifier	ZEND_ACC_PRIVATE		83697	1					
ANR	83776	AndExpression	ce != EG ( scope ) && prop_info -> ce != EG ( scope )		83697	1		&&			
ANR	83777	EqualityExpression	ce != EG ( scope )		83697	0		!=			
ANR	83778	Identifier	ce		83697	0					
ANR	83779	CallExpression	EG ( scope )		83697	1					
ANR	83780	Callee	EG		83697	0					
ANR	83781	Identifier	EG		83697	0					
ANR	83782	ArgumentList	scope		83697	1					
ANR	83783	Argument	scope		83697	0					
ANR	83784	Identifier	scope		83697	0					
ANR	83785	EqualityExpression	prop_info -> ce != EG ( scope )		83697	1		!=			
ANR	83786	PtrMemberAccess	prop_info -> ce		83697	0					
ANR	83787	Identifier	prop_info		83697	0					
ANR	83788	Identifier	ce		83697	1					
ANR	83789	CallExpression	EG ( scope )		83697	1					
ANR	83790	Callee	EG		83697	0					
ANR	83791	Identifier	EG		83697	0					
ANR	83792	ArgumentList	scope		83697	1					
ANR	83793	Argument	scope		83697	0					
ANR	83794	Identifier	scope		83697	0					
ANR	83795	CompoundStatement		13:34:451:451	83697	1					
ANR	83796	ContinueStatement	continue ;	1093:3:30369:30377	83697	0	True				
ANR	83797	ExpressionStatement	prop = NULL	1095:2:30385:30396	83697	1	True				
ANR	83798	AssignmentExpression	prop = NULL		83697	0		=			
ANR	83799	Identifier	prop		83697	0					
ANR	83800	Identifier	NULL		83697	1					
ANR	83801	IfStatement	if ( statics && ( prop_info -> flags & ZEND_ACC_STATIC ) != 0 )		83697	2					
ANR	83802	Condition	statics && ( prop_info -> flags & ZEND_ACC_STATIC ) != 0	1096:6:30404:30455	83697	0	True				
ANR	83803	AndExpression	statics && ( prop_info -> flags & ZEND_ACC_STATIC ) != 0		83697	0		&&			
ANR	83804	Identifier	statics		83697	0					
ANR	83805	EqualityExpression	( prop_info -> flags & ZEND_ACC_STATIC ) != 0		83697	1		!=			
ANR	83806	BitAndExpression	prop_info -> flags & ZEND_ACC_STATIC		83697	0		&			
ANR	83807	PtrMemberAccess	prop_info -> flags		83697	0					
ANR	83808	Identifier	prop_info		83697	0					
ANR	83809	Identifier	flags		83697	1					
ANR	83810	Identifier	ZEND_ACC_STATIC		83697	1					
ANR	83811	PrimaryExpression	0		83697	1					
ANR	83812	CompoundStatement		17:60:545:545	83697	1					
ANR	83813	ExpressionStatement	prop = & ce -> default_static_members_table [ prop_info -> offset ]	1097:3:30463:30522	83697	0	True				
ANR	83814	AssignmentExpression	prop = & ce -> default_static_members_table [ prop_info -> offset ]		83697	0		=			
ANR	83815	Identifier	prop		83697	0					
ANR	83816	UnaryOperationExpression	& ce -> default_static_members_table [ prop_info -> offset ]		83697	1					
ANR	83817	UnaryOperator	&		83697	0					
ANR	83818	ArrayIndexing	ce -> default_static_members_table [ prop_info -> offset ]		83697	1					
ANR	83819	PtrMemberAccess	ce -> default_static_members_table		83697	0					
ANR	83820	Identifier	ce		83697	0					
ANR	83821	Identifier	default_static_members_table		83697	1					
ANR	83822	PtrMemberAccess	prop_info -> offset		83697	1					
ANR	83823	Identifier	prop_info		83697	0					
ANR	83824	Identifier	offset		83697	1					
ANR	83825	ElseStatement	else		83697	0					
ANR	83826	IfStatement	if ( ! statics && ( prop_info -> flags & ZEND_ACC_STATIC ) == 0 )		83697	0					
ANR	83827	Condition	! statics && ( prop_info -> flags & ZEND_ACC_STATIC ) == 0	1098:13:30537:30589	83697	0	True				
ANR	83828	AndExpression	! statics && ( prop_info -> flags & ZEND_ACC_STATIC ) == 0		83697	0		&&			
ANR	83829	UnaryOperationExpression	! statics		83697	0					
ANR	83830	UnaryOperator	!		83697	0					
ANR	83831	Identifier	statics		83697	1					
ANR	83832	EqualityExpression	( prop_info -> flags & ZEND_ACC_STATIC ) == 0		83697	1		==			
ANR	83833	BitAndExpression	prop_info -> flags & ZEND_ACC_STATIC		83697	0		&			
ANR	83834	PtrMemberAccess	prop_info -> flags		83697	0					
ANR	83835	Identifier	prop_info		83697	0					
ANR	83836	Identifier	flags		83697	1					
ANR	83837	Identifier	ZEND_ACC_STATIC		83697	1					
ANR	83838	PrimaryExpression	0		83697	1					
ANR	83839	CompoundStatement		19:68:679:679	83697	1					
ANR	83840	ExpressionStatement	prop = & ce -> default_properties_table [ OBJ_PROP_TO_NUM ( prop_info -> offset ) ]	1099:3:30597:30669	83697	0	True				
ANR	83841	AssignmentExpression	prop = & ce -> default_properties_table [ OBJ_PROP_TO_NUM ( prop_info -> offset ) ]		83697	0		=			
ANR	83842	Identifier	prop		83697	0					
ANR	83843	UnaryOperationExpression	& ce -> default_properties_table [ OBJ_PROP_TO_NUM ( prop_info -> offset ) ]		83697	1					
ANR	83844	UnaryOperator	&		83697	0					
ANR	83845	ArrayIndexing	ce -> default_properties_table [ OBJ_PROP_TO_NUM ( prop_info -> offset ) ]		83697	1					
ANR	83846	PtrMemberAccess	ce -> default_properties_table		83697	0					
ANR	83847	Identifier	ce		83697	0					
ANR	83848	Identifier	default_properties_table		83697	1					
ANR	83849	CallExpression	OBJ_PROP_TO_NUM ( prop_info -> offset )		83697	1					
ANR	83850	Callee	OBJ_PROP_TO_NUM		83697	0					
ANR	83851	Identifier	OBJ_PROP_TO_NUM		83697	0					
ANR	83852	ArgumentList	prop_info -> offset		83697	1					
ANR	83853	Argument	prop_info -> offset		83697	0					
ANR	83854	PtrMemberAccess	prop_info -> offset		83697	0					
ANR	83855	Identifier	prop_info		83697	0					
ANR	83856	Identifier	offset		83697	1					
ANR	83857	IfStatement	if ( ! prop || Z_TYPE_P ( prop ) == IS_UNDEF )		83697	3					
ANR	83858	Condition	! prop || Z_TYPE_P ( prop ) == IS_UNDEF	1101:6:30681:30715	83697	0	True				
ANR	83859	OrExpression	! prop || Z_TYPE_P ( prop ) == IS_UNDEF		83697	0		||			
ANR	83860	UnaryOperationExpression	! prop		83697	0					
ANR	83861	UnaryOperator	!		83697	0					
ANR	83862	Identifier	prop		83697	1					
ANR	83863	EqualityExpression	Z_TYPE_P ( prop ) == IS_UNDEF		83697	1		==			
ANR	83864	CallExpression	Z_TYPE_P ( prop )		83697	0					
ANR	83865	Callee	Z_TYPE_P		83697	0					
ANR	83866	Identifier	Z_TYPE_P		83697	0					
ANR	83867	ArgumentList	prop		83697	1					
ANR	83868	Argument	prop		83697	0					
ANR	83869	Identifier	prop		83697	0					
ANR	83870	Identifier	IS_UNDEF		83697	1					
ANR	83871	CompoundStatement		22:43:805:805	83697	1					
ANR	83872	ContinueStatement	continue ;	1102:3:30723:30731	83697	0	True				
ANR	83873	ExpressionStatement	ZVAL_DEREF ( prop )	1106:2:30779:30795	83697	4	True				
ANR	83874	CallExpression	ZVAL_DEREF ( prop )		83697	0					
ANR	83875	Callee	ZVAL_DEREF		83697	0					
ANR	83876	Identifier	ZVAL_DEREF		83697	0					
ANR	83877	ArgumentList	prop		83697	1					
ANR	83878	Argument	prop		83697	0					
ANR	83879	Identifier	prop		83697	0					
ANR	83880	IfStatement	if ( UNEXPECTED ( Z_COPYABLE_P ( prop ) ) )		83697	5					
ANR	83881	Condition	UNEXPECTED ( Z_COPYABLE_P ( prop ) )	1107:6:30803:30832	83697	0	True				
ANR	83882	CallExpression	UNEXPECTED ( Z_COPYABLE_P ( prop ) )		83697	0					
ANR	83883	Callee	UNEXPECTED		83697	0					
ANR	83884	Identifier	UNEXPECTED		83697	0					
ANR	83885	ArgumentList	Z_COPYABLE_P ( prop )		83697	1					
ANR	83886	Argument	Z_COPYABLE_P ( prop )		83697	0					
ANR	83887	CallExpression	Z_COPYABLE_P ( prop )		83697	0					
ANR	83888	Callee	Z_COPYABLE_P		83697	0					
ANR	83889	Identifier	Z_COPYABLE_P		83697	0					
ANR	83890	ArgumentList	prop		83697	1					
ANR	83891	Argument	prop		83697	0					
ANR	83892	Identifier	prop		83697	0					
ANR	83893	CompoundStatement		28:38:922:922	83697	1					
ANR	83894	ExpressionStatement	"ZVAL_DUP ( & prop_copy , prop )"	1108:3:30840:30866	83697	0	True				
ANR	83895	CallExpression	"ZVAL_DUP ( & prop_copy , prop )"		83697	0					
ANR	83896	Callee	ZVAL_DUP		83697	0					
ANR	83897	Identifier	ZVAL_DUP		83697	0					
ANR	83898	ArgumentList	& prop_copy		83697	1					
ANR	83899	Argument	& prop_copy		83697	0					
ANR	83900	UnaryOperationExpression	& prop_copy		83697	0					
ANR	83901	UnaryOperator	&		83697	0					
ANR	83902	Identifier	prop_copy		83697	1					
ANR	83903	Argument	prop		83697	1					
ANR	83904	Identifier	prop		83697	0					
ANR	83905	ExpressionStatement	prop = & prop_copy	1109:3:30871:30888	83697	1	True				
ANR	83906	AssignmentExpression	prop = & prop_copy		83697	0		=			
ANR	83907	Identifier	prop		83697	0					
ANR	83908	UnaryOperationExpression	& prop_copy		83697	1					
ANR	83909	UnaryOperator	&		83697	0					
ANR	83910	Identifier	prop_copy		83697	1					
ANR	83911	ElseStatement	else		83697	0					
ANR	83912	CompoundStatement		31:9:986:986	83697	0					
ANR	83913	ExpressionStatement	Z_TRY_ADDREF_P ( prop )	1111:3:30904:30924	83697	0	True				
ANR	83914	CallExpression	Z_TRY_ADDREF_P ( prop )		83697	0					
ANR	83915	Callee	Z_TRY_ADDREF_P		83697	0					
ANR	83916	Identifier	Z_TRY_ADDREF_P		83697	0					
ANR	83917	ArgumentList	prop		83697	1					
ANR	83918	Argument	prop		83697	0					
ANR	83919	Identifier	prop		83697	0					
ANR	83920	IfStatement	if ( Z_OPT_CONSTANT_P ( prop ) )		83697	6					
ANR	83921	Condition	Z_OPT_CONSTANT_P ( prop )	1116:6:31040:31061	83697	0	True				
ANR	83922	CallExpression	Z_OPT_CONSTANT_P ( prop )		83697	0					
ANR	83923	Callee	Z_OPT_CONSTANT_P		83697	0					
ANR	83924	Identifier	Z_OPT_CONSTANT_P		83697	0					
ANR	83925	ArgumentList	prop		83697	1					
ANR	83926	Argument	prop		83697	0					
ANR	83927	Identifier	prop		83697	0					
ANR	83928	CompoundStatement		37:30:1151:1151	83697	1					
ANR	83929	IfStatement	"if ( UNEXPECTED ( zval_update_constant_ex ( prop , 0 , NULL ) != SUCCESS ) )"		83697	0					
ANR	83930	Condition	"UNEXPECTED ( zval_update_constant_ex ( prop , 0 , NULL ) != SUCCESS )"	1117:7:31073:31133	83697	0	True				
ANR	83931	CallExpression	"UNEXPECTED ( zval_update_constant_ex ( prop , 0 , NULL ) != SUCCESS )"		83697	0					
ANR	83932	Callee	UNEXPECTED		83697	0					
ANR	83933	Identifier	UNEXPECTED		83697	0					
ANR	83934	ArgumentList	"zval_update_constant_ex ( prop , 0 , NULL ) != SUCCESS"		83697	1					
ANR	83935	Argument	"zval_update_constant_ex ( prop , 0 , NULL ) != SUCCESS"		83697	0					
ANR	83936	EqualityExpression	"zval_update_constant_ex ( prop , 0 , NULL ) != SUCCESS"		83697	0		!=			
ANR	83937	CallExpression	"zval_update_constant_ex ( prop , 0 , NULL )"		83697	0					
ANR	83938	Callee	zval_update_constant_ex		83697	0					
ANR	83939	Identifier	zval_update_constant_ex		83697	0					
ANR	83940	ArgumentList	prop		83697	1					
ANR	83941	Argument	prop		83697	0					
ANR	83942	Identifier	prop		83697	0					
ANR	83943	Argument	0		83697	1					
ANR	83944	PrimaryExpression	0		83697	0					
ANR	83945	Argument	NULL		83697	2					
ANR	83946	Identifier	NULL		83697	0					
ANR	83947	Identifier	SUCCESS		83697	1					
ANR	83948	CompoundStatement		38:70:1223:1223	83697	1					
ANR	83949	ReturnStatement	return ;	1118:4:31142:31148	83697	0	True				
ANR	83950	ExpressionStatement	"zend_hash_add_new ( Z_ARRVAL_P ( return_value ) , key , prop )"	1122:2:31162:31216	83697	7	True				
ANR	83951	CallExpression	"zend_hash_add_new ( Z_ARRVAL_P ( return_value ) , key , prop )"		83697	0					
ANR	83952	Callee	zend_hash_add_new		83697	0					
ANR	83953	Identifier	zend_hash_add_new		83697	0					
ANR	83954	ArgumentList	Z_ARRVAL_P ( return_value )		83697	1					
ANR	83955	Argument	Z_ARRVAL_P ( return_value )		83697	0					
ANR	83956	CallExpression	Z_ARRVAL_P ( return_value )		83697	0					
ANR	83957	Callee	Z_ARRVAL_P		83697	0					
ANR	83958	Identifier	Z_ARRVAL_P		83697	0					
ANR	83959	ArgumentList	return_value		83697	1					
ANR	83960	Argument	return_value		83697	0					
ANR	83961	Identifier	return_value		83697	0					
ANR	83962	Argument	key		83697	1					
ANR	83963	Identifier	key		83697	0					
ANR	83964	Argument	prop		83697	2					
ANR	83965	Identifier	prop		83697	0					
ANR	83966	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	1123:3:31221:31244	83697	15	True				
ANR	83967	CallExpression	ZEND_HASH_FOREACH_END ( )		83697	0					
ANR	83968	Callee	ZEND_HASH_FOREACH_END		83697	0					
ANR	83969	Identifier	ZEND_HASH_FOREACH_END		83697	0					
ANR	83970	ArgumentList			83697	1					
ANR	83971	ReturnType	static void		83697	1					
ANR	83972	Identifier	add_class_vars		83697	2					
ANR	83973	ParameterList	"zend_class_entry * ce , int statics , zval * return_value"		83697	3					
ANR	83974	Parameter	zend_class_entry * ce	1079:27:29857:29876	83697	0	True				
ANR	83975	ParameterType	zend_class_entry *		83697	0					
ANR	83976	Identifier	ce		83697	1					
ANR	83977	Parameter	int statics	1079:49:29879:29889	83697	1	True				
ANR	83978	ParameterType	int		83697	0					
ANR	83979	Identifier	statics		83697	1					
ANR	83980	Parameter	zval * return_value	1079:62:29892:29909	83697	2	True				
ANR	83981	ParameterType	zval *		83697	0					
ANR	83982	Identifier	return_value		83697	1					
ANR	83983	CFGEntryNode	ENTRY		83697		True				
ANR	83984	CFGExitNode	EXIT		83697		True				
ANR	83985	CFGErrorNode	ERROR		83697		True				
ANR	83986	Symbol	Z_OPT_CONSTANT_P		83697						
ANR	83987	Symbol	return_value		83697						
ANR	83988	Symbol	prop_copy		83697						
ANR	83989	Symbol	* ce		83697						
ANR	83990	Symbol	UNEXPECTED		83697						
ANR	83991	Symbol	ZEND_ACC_SHADOW		83697						
ANR	83992	Symbol	prop_info -> offset		83697						
ANR	83993	Symbol	prop		83697						
ANR	83994	Symbol	scope		83697						
ANR	83995	Symbol	ZEND_ACC_PROTECTED		83697						
ANR	83996	Symbol	ZEND_ACC_STATIC		83697						
ANR	83997	Symbol	* prop_info		83697						
ANR	83998	Symbol	Z_ARRVAL_P		83697						
ANR	83999	Symbol	key		83697						
ANR	84000	Symbol	IS_UNDEF		83697						
ANR	84001	Symbol	prop_info		83697						
ANR	84002	Symbol	OBJ_PROP_TO_NUM		83697						
ANR	84003	Symbol	ce		83697						
ANR	84004	Symbol	EG		83697						
ANR	84005	Symbol	NULL		83697						
ANR	84006	Symbol	SUCCESS		83697						
ANR	84007	Symbol	& prop_copy		83697						
ANR	84008	Symbol	Z_COPYABLE_P		83697						
ANR	84009	Symbol	ce -> default_properties_table		83697						
ANR	84010	Symbol	Z_TYPE_P		83697						
ANR	84011	Symbol	ce -> default_static_members_table		83697						
ANR	84012	Symbol	statics		83697						
ANR	84013	Symbol	ZEND_ACC_PRIVATE		83697						
ANR	84014	Symbol	prop_info -> flags		83697						
ANR	84015	Symbol	prop_info -> ce		83697						
ANR	84016	Symbol	zend_check_protected		83697						
ANR	84017	Symbol	zval_update_constant_ex		83697						
ANR	84018	DeclStmt									
ANR	84019	Decl							zend_string	zend_string *	class_name
ANR	84020	DeclStmt									
ANR	84021	Decl							zend_class_entry	zend_class_entry *	ce
ANR	84022	DeclStmt									
ANR	84023	Decl							zval	zval *	obj
ANR	84024	DeclStmt									
ANR	84025	Decl							zval	zval *	value
ANR	84026	DeclStmt									
ANR	84027	Decl							HashTable	HashTable *	properties
ANR	84028	DeclStmt									
ANR	84029	Decl							zend_string	zend_string *	key
ANR	84030	DeclStmt									
ANR	84031	Decl							zend_object	zend_object *	zobj
ANR	84032	DeclStmt									
ANR	84033	Decl							const char	const char *	prop_name
ANR	84034	Decl							const char	const char *	class_name
ANR	84035	DeclStmt									
ANR	84036	Decl							size_t	size_t	prop_len
ANR	84037	Function	same_name	1218:0:33530:33871							
ANR	84038	FunctionDef	"same_name (zend_string * key , zend_string * name)"		84037	0					
ANR	84039	CompoundStatement		1219:0:33598:33871	84037	0					
ANR	84040	IdentifierDeclStatement	zend_string * lcname ;	1220:1:33601:33620	84037	0	True				
ANR	84041	IdentifierDecl	* lcname		84037	0					
ANR	84042	IdentifierDeclType	zend_string *		84037	0					
ANR	84043	Identifier	lcname		84037	1					
ANR	84044	IdentifierDeclStatement	int ret ;	1221:1:33623:33630	84037	1	True				
ANR	84045	IdentifierDecl	ret		84037	0					
ANR	84046	IdentifierDeclType	int		84037	0					
ANR	84047	Identifier	ret		84037	1					
ANR	84048	IfStatement	if ( key == name )		84037	2					
ANR	84049	Condition	key == name	1223:5:33638:33648	84037	0	True				
ANR	84050	EqualityExpression	key == name		84037	0		==			
ANR	84051	Identifier	key		84037	0					
ANR	84052	Identifier	name		84037	1					
ANR	84053	CompoundStatement		5:18:52:52	84037	1					
ANR	84054	ReturnStatement	return 1 ;	1224:2:33655:33663	84037	0	True				
ANR	84055	PrimaryExpression	1		84037	0					
ANR	84056	IfStatement	if ( ZSTR_LEN ( key ) != ZSTR_LEN ( name ) )		84037	3					
ANR	84057	Condition	ZSTR_LEN ( key ) != ZSTR_LEN ( name )	1226:5:33673:33703	84037	0	True				
ANR	84058	EqualityExpression	ZSTR_LEN ( key ) != ZSTR_LEN ( name )		84037	0		!=			
ANR	84059	CallExpression	ZSTR_LEN ( key )		84037	0					
ANR	84060	Callee	ZSTR_LEN		84037	0					
ANR	84061	Identifier	ZSTR_LEN		84037	0					
ANR	84062	ArgumentList	key		84037	1					
ANR	84063	Argument	key		84037	0					
ANR	84064	Identifier	key		84037	0					
ANR	84065	CallExpression	ZSTR_LEN ( name )		84037	1					
ANR	84066	Callee	ZSTR_LEN		84037	0					
ANR	84067	Identifier	ZSTR_LEN		84037	0					
ANR	84068	ArgumentList	name		84037	1					
ANR	84069	Argument	name		84037	0					
ANR	84070	Identifier	name		84037	0					
ANR	84071	CompoundStatement		8:38:107:107	84037	1					
ANR	84072	ReturnStatement	return 0 ;	1227:2:33710:33718	84037	0	True				
ANR	84073	PrimaryExpression	0		84037	0					
ANR	84074	ExpressionStatement	lcname = zend_string_tolower ( name )	1229:1:33724:33758	84037	4	True				
ANR	84075	AssignmentExpression	lcname = zend_string_tolower ( name )		84037	0		=			
ANR	84076	Identifier	lcname		84037	0					
ANR	84077	CallExpression	zend_string_tolower ( name )		84037	1					
ANR	84078	Callee	zend_string_tolower		84037	0					
ANR	84079	Identifier	zend_string_tolower		84037	0					
ANR	84080	ArgumentList	name		84037	1					
ANR	84081	Argument	name		84037	0					
ANR	84082	Identifier	name		84037	0					
ANR	84083	ExpressionStatement	"ret = memcmp ( ZSTR_VAL ( lcname ) , ZSTR_VAL ( key ) , ZSTR_LEN ( key ) ) == 0"	1230:1:33761:33826	84037	5	True				
ANR	84084	AssignmentExpression	"ret = memcmp ( ZSTR_VAL ( lcname ) , ZSTR_VAL ( key ) , ZSTR_LEN ( key ) ) == 0"		84037	0		=			
ANR	84085	Identifier	ret		84037	0					
ANR	84086	EqualityExpression	"memcmp ( ZSTR_VAL ( lcname ) , ZSTR_VAL ( key ) , ZSTR_LEN ( key ) ) == 0"		84037	1		==			
ANR	84087	CallExpression	"memcmp ( ZSTR_VAL ( lcname ) , ZSTR_VAL ( key ) , ZSTR_LEN ( key ) )"		84037	0					
ANR	84088	Callee	memcmp		84037	0					
ANR	84089	Identifier	memcmp		84037	0					
ANR	84090	ArgumentList	ZSTR_VAL ( lcname )		84037	1					
ANR	84091	Argument	ZSTR_VAL ( lcname )		84037	0					
ANR	84092	CallExpression	ZSTR_VAL ( lcname )		84037	0					
ANR	84093	Callee	ZSTR_VAL		84037	0					
ANR	84094	Identifier	ZSTR_VAL		84037	0					
ANR	84095	ArgumentList	lcname		84037	1					
ANR	84096	Argument	lcname		84037	0					
ANR	84097	Identifier	lcname		84037	0					
ANR	84098	Argument	ZSTR_VAL ( key )		84037	1					
ANR	84099	CallExpression	ZSTR_VAL ( key )		84037	0					
ANR	84100	Callee	ZSTR_VAL		84037	0					
ANR	84101	Identifier	ZSTR_VAL		84037	0					
ANR	84102	ArgumentList	key		84037	1					
ANR	84103	Argument	key		84037	0					
ANR	84104	Identifier	key		84037	0					
ANR	84105	Argument	ZSTR_LEN ( key )		84037	2					
ANR	84106	CallExpression	ZSTR_LEN ( key )		84037	0					
ANR	84107	Callee	ZSTR_LEN		84037	0					
ANR	84108	Identifier	ZSTR_LEN		84037	0					
ANR	84109	ArgumentList	key		84037	1					
ANR	84110	Argument	key		84037	0					
ANR	84111	Identifier	key		84037	0					
ANR	84112	PrimaryExpression	0		84037	1					
ANR	84113	ExpressionStatement	zend_string_release ( lcname )	1231:1:33829:33856	84037	6	True				
ANR	84114	CallExpression	zend_string_release ( lcname )		84037	0					
ANR	84115	Callee	zend_string_release		84037	0					
ANR	84116	Identifier	zend_string_release		84037	0					
ANR	84117	ArgumentList	lcname		84037	1					
ANR	84118	Argument	lcname		84037	0					
ANR	84119	Identifier	lcname		84037	0					
ANR	84120	ReturnStatement	return ret ;	1232:1:33859:33869	84037	7	True				
ANR	84121	Identifier	ret		84037	0					
ANR	84122	ReturnType	static int		84037	1					
ANR	84123	Identifier	same_name		84037	2					
ANR	84124	ParameterList	"zend_string * key , zend_string * name"		84037	3					
ANR	84125	Parameter	zend_string * key	1218:21:33551:33566	84037	0	True				
ANR	84126	ParameterType	zend_string *		84037	0					
ANR	84127	Identifier	key		84037	1					
ANR	84128	Parameter	zend_string * name	1218:39:33569:33585	84037	1	True				
ANR	84129	ParameterType	zend_string *		84037	0					
ANR	84130	Identifier	name		84037	1					
ANR	84131	CFGEntryNode	ENTRY		84037		True				
ANR	84132	CFGExitNode	EXIT		84037		True				
ANR	84133	Symbol	ret		84037						
ANR	84134	Symbol	lcname		84037						
ANR	84135	Symbol	memcmp		84037						
ANR	84136	Symbol	name		84037						
ANR	84137	Symbol	ZSTR_LEN		84037						
ANR	84138	Symbol	key		84037						
ANR	84139	Symbol	zend_string_tolower		84037						
ANR	84140	Symbol	ZSTR_VAL		84037						
ANR	84141	DeclStmt									
ANR	84142	Decl							zval	zval *	klass
ANR	84143	DeclStmt									
ANR	84144	Decl							zval	zval	method_name
ANR	84145	DeclStmt									
ANR	84146	Decl							zend_class_entry	zend_class_entry *	ce
ANR	84147	DeclStmt									
ANR	84148	Decl							zend_function	zend_function *	mptr
ANR	84149	DeclStmt									
ANR	84150	Decl							zend_string	zend_string *	key
ANR	84151	DeclStmt									
ANR	84152	Decl							size_t	size_t	len
ANR	84153	DeclStmt									
ANR	84154	Decl							zval	zval *	klass
ANR	84155	DeclStmt									
ANR	84156	Decl							zend_string	zend_string *	method_name
ANR	84157	DeclStmt									
ANR	84158	Decl							zend_string	zend_string *	lcname
ANR	84159	DeclStmt									
ANR	84160	Decl							zend_class_entry	zend_class_entry *	ce
ANR	84161	DeclStmt									
ANR	84162	Decl							union _zend_function	union _zend_function *	func
ANR	84163	DeclStmt									
ANR	84164	Decl							zval	zval *	object
ANR	84165	DeclStmt									
ANR	84166	Decl							zend_string	zend_string *	property
ANR	84167	DeclStmt									
ANR	84168	Decl							zend_class_entry	zend_class_entry *	ce
ANR	84169	DeclStmt									
ANR	84170	Decl							zend_property_info	zend_property_info *	property_info
ANR	84171	DeclStmt									
ANR	84172	Decl							zval	zval	property_z
ANR	84173	DeclStmt									
ANR	84174	Decl							zend_string	zend_string *	class_name
ANR	84175	DeclStmt									
ANR	84176	Decl							zend_string	zend_string *	lc_name
ANR	84177	DeclStmt									
ANR	84178	Decl							zend_class_entry	zend_class_entry *	ce
ANR	84179	DeclStmt									
ANR	84180	Decl							zend_bool	zend_bool	autoload
ANR	84181	DeclStmt									
ANR	84182	Decl							zend_string	zend_string *	iface_name
ANR	84183	Decl							zend_string	zend_string *	lc_name
ANR	84184	DeclStmt									
ANR	84185	Decl							zend_class_entry	zend_class_entry *	ce
ANR	84186	DeclStmt									
ANR	84187	Decl							zend_bool	zend_bool	autoload
ANR	84188	DeclStmt									
ANR	84189	Decl							zend_string	zend_string *	trait_name
ANR	84190	Decl							zend_string	zend_string *	lc_name
ANR	84191	DeclStmt									
ANR	84192	Decl							zend_class_entry	zend_class_entry *	ce
ANR	84193	DeclStmt									
ANR	84194	Decl							zend_bool	zend_bool	autoload
ANR	84195	DeclStmt									
ANR	84196	Decl							zend_string	zend_string *	name
ANR	84197	DeclStmt									
ANR	84198	Decl							zend_function	zend_function *	func
ANR	84199	DeclStmt									
ANR	84200	Decl							zend_string	zend_string *	lcname
ANR	84201	DeclStmt									
ANR	84202	Decl							zend_string	zend_string *	class_name
ANR	84203	DeclStmt									
ANR	84204	Decl							char	char *	alias_name
ANR	84205	DeclStmt									
ANR	84206	Decl							zend_class_entry	zend_class_entry *	ce
ANR	84207	DeclStmt									
ANR	84208	Decl							size_t	size_t	alias_name_len
ANR	84209	DeclStmt									
ANR	84210	Decl							zend_bool	zend_bool	autoload
ANR	84211	DeclStmt									
ANR	84212	Decl							zend_long	zend_long	leakbytes
ANR	84213	DeclStmt									
ANR	84214	Decl							zval	zval *	zv
ANR	84215	DeclStmt									
ANR	84216	Decl							zend_bool	zend_bool	leak_data
ANR	84217	DeclStmt									
ANR	84218	Decl							char	char *	nowhere
ANR	84219	DeclStmt									
ANR	84220	Decl							zend_string	zend_string *	entry
ANR	84221	DeclStmt									
ANR	84222	Decl							zend_long	zend_long	error_type
ANR	84223	DeclStmt									
ANR	84224	Decl							char	char *	message
ANR	84225	DeclStmt									
ANR	84226	Decl							size_t	size_t	message_len
ANR	84227	DeclStmt									
ANR	84228	Decl							zval	zval *	error_handler
ANR	84229	DeclStmt									
ANR	84230	Decl							zend_string	zend_string *	error_handler_name
ANR	84231	DeclStmt									
ANR	84232	Decl							zend_long	zend_long	error_type
ANR	84233	DeclStmt									
ANR	84234	Decl							zval	zval	zeh
ANR	84235	DeclStmt									
ANR	84236	Decl							zval	zval *	tmp
ANR	84237	DeclStmt									
ANR	84238	Decl							zval	zval *	exception_handler
ANR	84239	DeclStmt									
ANR	84240	Decl							zend_string	zend_string *	exception_handler_name
ANR	84241	DeclStmt									
ANR	84242	Decl							zval	zval *	tmp
ANR	84243	Function	copy_class_or_interface_name	1834:0:50061:50740							
ANR	84244	FunctionDef	"copy_class_or_interface_name (zval * el , int num_args , va_list args , zend_hash_key * hash_key)"		84243	0					
ANR	84245	CompoundStatement		1835:0:50174:50740	84243	0					
ANR	84246	IdentifierDeclStatement	zend_class_entry * ce = ( zend_class_entry * ) Z_PTR_P ( el ) ;	1836:1:50177:50231	84243	0	True				
ANR	84247	IdentifierDecl	* ce = ( zend_class_entry * ) Z_PTR_P ( el )		84243	0					
ANR	84248	IdentifierDeclType	zend_class_entry *		84243	0					
ANR	84249	Identifier	ce		84243	1					
ANR	84250	AssignmentExpression	* ce = ( zend_class_entry * ) Z_PTR_P ( el )		84243	2		=			
ANR	84251	Identifier	ce		84243	0					
ANR	84252	CastExpression	( zend_class_entry * ) Z_PTR_P ( el )		84243	1					
ANR	84253	CastTarget	zend_class_entry *		84243	0					
ANR	84254	CallExpression	Z_PTR_P ( el )		84243	1					
ANR	84255	Callee	Z_PTR_P		84243	0					
ANR	84256	Identifier	Z_PTR_P		84243	0					
ANR	84257	ArgumentList	el		84243	1					
ANR	84258	Argument	el		84243	0					
ANR	84259	Identifier	el		84243	0					
ANR	84260	Statement	zval	1837:1:50234:50237	84243	1	True				
ANR	84261	Statement	*	1837:6:50239:50239	84243	2	True				
ANR	84262	Statement	array	1837:7:50240:50244	84243	3	True				
ANR	84263	Statement	=	1837:13:50246:50246	84243	4	True				
ANR	84264	Statement	va_arg	1837:15:50248:50253	84243	5	True				
ANR	84265	Statement	(	1837:21:50254:50254	84243	6	True				
ANR	84266	Statement	args	1837:22:50255:50258	84243	7	True				
ANR	84267	Statement	","	1837:26:50259:50259	84243	8	True				
ANR	84268	Statement	zval	1837:28:50261:50264	84243	9	True				
ANR	84269	Statement	*	1837:33:50266:50266	84243	10	True				
ANR	84270	Statement	)	1837:34:50267:50267	84243	11	True				
ANR	84271	ExpressionStatement		1837:35:50268:50268	84243	12	True				
ANR	84272	IdentifierDeclStatement	"uint32_t mask = va_arg ( args , uint32_t ) ;"	1838:1:50271:50309	84243	13	True				
ANR	84273	IdentifierDecl	"mask = va_arg ( args , uint32_t )"		84243	0					
ANR	84274	IdentifierDeclType	uint32_t		84243	0					
ANR	84275	Identifier	mask		84243	1					
ANR	84276	AssignmentExpression	"mask = va_arg ( args , uint32_t )"		84243	2		=			
ANR	84277	Identifier	mask		84243	0					
ANR	84278	CallExpression	"va_arg ( args , uint32_t )"		84243	1					
ANR	84279	Callee	va_arg		84243	0					
ANR	84280	Identifier	va_arg		84243	0					
ANR	84281	ArgumentList	args		84243	1					
ANR	84282	Argument	args		84243	0					
ANR	84283	Identifier	args		84243	0					
ANR	84284	Argument	uint32_t		84243	1					
ANR	84285	Identifier	uint32_t		84243	0					
ANR	84286	IdentifierDeclStatement	"uint32_t comply = va_arg ( args , uint32_t ) ;"	1839:1:50312:50352	84243	14	True				
ANR	84287	IdentifierDecl	"comply = va_arg ( args , uint32_t )"		84243	0					
ANR	84288	IdentifierDeclType	uint32_t		84243	0					
ANR	84289	Identifier	comply		84243	1					
ANR	84290	AssignmentExpression	"comply = va_arg ( args , uint32_t )"		84243	2		=			
ANR	84291	Identifier	comply		84243	0					
ANR	84292	CallExpression	"va_arg ( args , uint32_t )"		84243	1					
ANR	84293	Callee	va_arg		84243	0					
ANR	84294	Identifier	va_arg		84243	0					
ANR	84295	ArgumentList	args		84243	1					
ANR	84296	Argument	args		84243	0					
ANR	84297	Identifier	args		84243	0					
ANR	84298	Argument	uint32_t		84243	1					
ANR	84299	Identifier	uint32_t		84243	0					
ANR	84300	IdentifierDeclStatement	uint32_t comply_mask = ( comply ) ? mask : 0 ;	1840:1:50355:50394	84243	15	True				
ANR	84301	IdentifierDecl	comply_mask = ( comply ) ? mask : 0		84243	0					
ANR	84302	IdentifierDeclType	uint32_t		84243	0					
ANR	84303	Identifier	comply_mask		84243	1					
ANR	84304	AssignmentExpression	comply_mask = ( comply ) ? mask : 0		84243	2		=			
ANR	84305	Identifier	comply_mask		84243	0					
ANR	84306	ConditionalExpression	( comply ) ? mask : 0		84243	1					
ANR	84307	Condition	comply		84243	0					
ANR	84308	Identifier	comply		84243	0					
ANR	84309	Identifier	mask		84243	1					
ANR	84310	PrimaryExpression	0		84243	2					
ANR	84311	IfStatement	if ( ( hash_key -> key && ZSTR_VAL ( hash_key -> key ) [ 0 ] != 0 ) && ( comply_mask == ( ce -> ce_flags & mask ) ) )		84243	16					
ANR	84312	Condition	( hash_key -> key && ZSTR_VAL ( hash_key -> key ) [ 0 ] != 0 ) && ( comply_mask == ( ce -> ce_flags & mask ) )	1842:5:50402:50495	84243	0	True				
ANR	84313	AndExpression	( hash_key -> key && ZSTR_VAL ( hash_key -> key ) [ 0 ] != 0 ) && ( comply_mask == ( ce -> ce_flags & mask ) )		84243	0		&&			
ANR	84314	AndExpression	hash_key -> key && ZSTR_VAL ( hash_key -> key ) [ 0 ] != 0		84243	0		&&			
ANR	84315	PtrMemberAccess	hash_key -> key		84243	0					
ANR	84316	Identifier	hash_key		84243	0					
ANR	84317	Identifier	key		84243	1					
ANR	84318	EqualityExpression	ZSTR_VAL ( hash_key -> key ) [ 0 ] != 0		84243	1		!=			
ANR	84319	ArrayIndexing	ZSTR_VAL ( hash_key -> key ) [ 0 ]		84243	0					
ANR	84320	CallExpression	ZSTR_VAL ( hash_key -> key )		84243	0					
ANR	84321	Callee	ZSTR_VAL		84243	0					
ANR	84322	Identifier	ZSTR_VAL		84243	0					
ANR	84323	ArgumentList	hash_key -> key		84243	1					
ANR	84324	Argument	hash_key -> key		84243	0					
ANR	84325	PtrMemberAccess	hash_key -> key		84243	0					
ANR	84326	Identifier	hash_key		84243	0					
ANR	84327	Identifier	key		84243	1					
ANR	84328	PrimaryExpression	0		84243	1					
ANR	84329	PrimaryExpression	0		84243	1					
ANR	84330	EqualityExpression	comply_mask == ( ce -> ce_flags & mask )		84243	1		==			
ANR	84331	Identifier	comply_mask		84243	0					
ANR	84332	BitAndExpression	ce -> ce_flags & mask		84243	1		&			
ANR	84333	PtrMemberAccess	ce -> ce_flags		84243	0					
ANR	84334	Identifier	ce		84243	0					
ANR	84335	Identifier	ce_flags		84243	1					
ANR	84336	Identifier	mask		84243	1					
ANR	84337	CompoundStatement		9:45:323:323	84243	1					
ANR	84338	IfStatement	"if ( ce -> refcount > 1 && ! same_name ( hash_key -> key , ce -> name ) )"		84243	0					
ANR	84339	Condition	"ce -> refcount > 1 && ! same_name ( hash_key -> key , ce -> name )"	1844:6:50506:50566	84243	0	True				
ANR	84340	AndExpression	"ce -> refcount > 1 && ! same_name ( hash_key -> key , ce -> name )"		84243	0		&&			
ANR	84341	RelationalExpression	ce -> refcount > 1		84243	0		>			
ANR	84342	PtrMemberAccess	ce -> refcount		84243	0					
ANR	84343	Identifier	ce		84243	0					
ANR	84344	Identifier	refcount		84243	1					
ANR	84345	PrimaryExpression	1		84243	1					
ANR	84346	UnaryOperationExpression	"! same_name ( hash_key -> key , ce -> name )"		84243	1					
ANR	84347	UnaryOperator	!		84243	0					
ANR	84348	CallExpression	"same_name ( hash_key -> key , ce -> name )"		84243	1					
ANR	84349	Callee	same_name		84243	0					
ANR	84350	Identifier	same_name		84243	0					
ANR	84351	ArgumentList	hash_key -> key		84243	1					
ANR	84352	Argument	hash_key -> key		84243	0					
ANR	84353	PtrMemberAccess	hash_key -> key		84243	0					
ANR	84354	Identifier	hash_key		84243	0					
ANR	84355	Identifier	key		84243	1					
ANR	84356	Argument	ce -> name		84243	1					
ANR	84357	PtrMemberAccess	ce -> name		84243	0					
ANR	84358	Identifier	ce		84243	0					
ANR	84359	Identifier	name		84243	1					
ANR	84360	CompoundStatement		11:43:394:394	84243	1					
ANR	84361	ExpressionStatement	"add_next_index_str ( array , zend_string_copy ( hash_key -> key ) )"	1846:3:50574:50632	84243	0	True				
ANR	84362	CallExpression	"add_next_index_str ( array , zend_string_copy ( hash_key -> key ) )"		84243	0					
ANR	84363	Callee	add_next_index_str		84243	0					
ANR	84364	Identifier	add_next_index_str		84243	0					
ANR	84365	ArgumentList	array		84243	1					
ANR	84366	Argument	array		84243	0					
ANR	84367	Identifier	array		84243	0					
ANR	84368	Argument	zend_string_copy ( hash_key -> key )		84243	1					
ANR	84369	CallExpression	zend_string_copy ( hash_key -> key )		84243	0					
ANR	84370	Callee	zend_string_copy		84243	0					
ANR	84371	Identifier	zend_string_copy		84243	0					
ANR	84372	ArgumentList	hash_key -> key		84243	1					
ANR	84373	Argument	hash_key -> key		84243	0					
ANR	84374	PtrMemberAccess	hash_key -> key		84243	0					
ANR	84375	Identifier	hash_key		84243	0					
ANR	84376	Identifier	key		84243	1					
ANR	84377	ElseStatement	else		84243	0					
ANR	84378	CompoundStatement		13:9:468:468	84243	0					
ANR	84379	ExpressionStatement	"add_next_index_str ( array , zend_string_copy ( ce -> name ) )"	1848:3:50648:50701	84243	0	True				
ANR	84380	CallExpression	"add_next_index_str ( array , zend_string_copy ( ce -> name ) )"		84243	0					
ANR	84381	Callee	add_next_index_str		84243	0					
ANR	84382	Identifier	add_next_index_str		84243	0					
ANR	84383	ArgumentList	array		84243	1					
ANR	84384	Argument	array		84243	0					
ANR	84385	Identifier	array		84243	0					
ANR	84386	Argument	zend_string_copy ( ce -> name )		84243	1					
ANR	84387	CallExpression	zend_string_copy ( ce -> name )		84243	0					
ANR	84388	Callee	zend_string_copy		84243	0					
ANR	84389	Identifier	zend_string_copy		84243	0					
ANR	84390	ArgumentList	ce -> name		84243	1					
ANR	84391	Argument	ce -> name		84243	0					
ANR	84392	PtrMemberAccess	ce -> name		84243	0					
ANR	84393	Identifier	ce		84243	0					
ANR	84394	Identifier	name		84243	1					
ANR	84395	ReturnStatement	return ZEND_HASH_APPLY_KEEP ;	1851:1:50711:50738	84243	17	True				
ANR	84396	Identifier	ZEND_HASH_APPLY_KEEP		84243	0					
ANR	84397	ReturnType	static int		84243	1					
ANR	84398	Identifier	copy_class_or_interface_name		84243	2					
ANR	84399	ParameterList	"zval * el , int num_args , va_list args , zend_hash_key * hash_key"		84243	3					
ANR	84400	Parameter	zval * el	1834:40:50101:50108	84243	0	True				
ANR	84401	ParameterType	zval *		84243	0					
ANR	84402	Identifier	el		84243	1					
ANR	84403	Parameter	int num_args	1834:50:50111:50122	84243	1	True				
ANR	84404	ParameterType	int		84243	0					
ANR	84405	Identifier	num_args		84243	1					
ANR	84406	Parameter	va_list args	1834:64:50125:50136	84243	2	True				
ANR	84407	ParameterType	va_list		84243	0					
ANR	84408	Identifier	args		84243	1					
ANR	84409	Parameter	zend_hash_key * hash_key	1834:78:50139:50161	84243	3	True				
ANR	84410	ParameterType	zend_hash_key *		84243	0					
ANR	84411	Identifier	hash_key		84243	1					
ANR	84412	CFGEntryNode	ENTRY		84243		True				
ANR	84413	CFGExitNode	EXIT		84243		True				
ANR	84414	Symbol	Z_PTR_P		84243						
ANR	84415	Symbol	ce		84243						
ANR	84416	Symbol	comply		84243						
ANR	84417	Symbol	el		84243						
ANR	84418	Symbol	uint32_t		84243						
ANR	84419	Symbol	* ce		84243						
ANR	84420	Symbol	ce -> refcount		84243						
ANR	84421	Symbol	zend_string_copy		84243						
ANR	84422	Symbol	ZSTR_VAL		84243						
ANR	84423	Symbol	args		84243						
ANR	84424	Symbol	ce -> ce_flags		84243						
ANR	84425	Symbol	* hash_key		84243						
ANR	84426	Symbol	ZEND_HASH_APPLY_KEEP		84243						
ANR	84427	Symbol	hash_key		84243						
ANR	84428	Symbol	num_args		84243						
ANR	84429	Symbol	array		84243						
ANR	84430	Symbol	comply_mask		84243						
ANR	84431	Symbol	same_name		84243						
ANR	84432	Symbol	ce -> name		84243						
ANR	84433	Symbol	va_arg		84243						
ANR	84434	Symbol	mask		84243						
ANR	84435	Symbol	* ZSTR_VAL		84243						
ANR	84436	Symbol	hash_key -> key		84243						
ANR	84437	DeclStmt									
ANR	84438	Decl							uint32_t	uint32_t	mask
ANR	84439	DeclStmt									
ANR	84440	Decl							uint32_t	uint32_t	comply
ANR	84441	DeclStmt									
ANR	84442	Decl							uint32_t	uint32_t	mask
ANR	84443	DeclStmt									
ANR	84444	Decl							uint32_t	uint32_t	comply
ANR	84445	DeclStmt									
ANR	84446	Decl							uint32_t	uint32_t	mask
ANR	84447	DeclStmt									
ANR	84448	Decl							uint32_t	uint32_t	comply
ANR	84449	Function	copy_function_name	1903:0:51975:52524							
ANR	84450	FunctionDef	"copy_function_name (zval * zv , int num_args , va_list args , zend_hash_key * hash_key)"		84449	0					
ANR	84451	CompoundStatement		1904:0:52078:52524	84449	0					
ANR	84452	IdentifierDeclStatement	zend_function * func = Z_PTR_P ( zv ) ;	1905:1:52081:52114	84449	0	True				
ANR	84453	IdentifierDecl	* func = Z_PTR_P ( zv )		84449	0					
ANR	84454	IdentifierDeclType	zend_function *		84449	0					
ANR	84455	Identifier	func		84449	1					
ANR	84456	AssignmentExpression	* func = Z_PTR_P ( zv )		84449	2		=			
ANR	84457	Identifier	func		84449	0					
ANR	84458	CallExpression	Z_PTR_P ( zv )		84449	1					
ANR	84459	Callee	Z_PTR_P		84449	0					
ANR	84460	Identifier	Z_PTR_P		84449	0					
ANR	84461	ArgumentList	zv		84449	1					
ANR	84462	Argument	zv		84449	0					
ANR	84463	Identifier	zv		84449	0					
ANR	84464	Statement	zval	1906:1:52117:52120	84449	1	True				
ANR	84465	Statement	*	1906:6:52122:52122	84449	2	True				
ANR	84466	Statement	internal_ar	1906:7:52123:52133	84449	3	True				
ANR	84467	Statement	=	1906:19:52135:52135	84449	4	True				
ANR	84468	Statement	va_arg	1906:21:52137:52142	84449	5	True				
ANR	84469	Statement	(	1906:27:52143:52143	84449	6	True				
ANR	84470	Statement	args	1906:28:52144:52147	84449	7	True				
ANR	84471	Statement	","	1906:32:52148:52148	84449	8	True				
ANR	84472	Statement	zval	1906:34:52150:52153	84449	9	True				
ANR	84473	Statement	*	1906:39:52155:52155	84449	10	True				
ANR	84474	Statement	)	1906:40:52156:52156	84449	11	True				
ANR	84475	Statement	","	1906:41:52157:52157	84449	12	True				
ANR	84476	Statement	*	1907:6:52165:52165	84449	13	True				
ANR	84477	Statement	user_ar	1907:7:52166:52172	84449	14	True				
ANR	84478	Statement	=	1907:19:52178:52178	84449	15	True				
ANR	84479	Statement	va_arg	1907:21:52180:52185	84449	16	True				
ANR	84480	Statement	(	1907:27:52186:52186	84449	17	True				
ANR	84481	Statement	args	1907:28:52187:52190	84449	18	True				
ANR	84482	Statement	","	1907:32:52191:52191	84449	19	True				
ANR	84483	Statement	zval	1907:34:52193:52196	84449	20	True				
ANR	84484	Statement	*	1907:39:52198:52198	84449	21	True				
ANR	84485	Statement	)	1907:40:52199:52199	84449	22	True				
ANR	84486	ExpressionStatement		1907:41:52200:52200	84449	23	True				
ANR	84487	IfStatement	if ( hash_key -> key == NULL || ZSTR_VAL ( hash_key -> key ) [ 0 ] == 0 )		84449	24					
ANR	84488	Condition	hash_key -> key == NULL || ZSTR_VAL ( hash_key -> key ) [ 0 ] == 0	1909:5:52208:52263	84449	0	True				
ANR	84489	OrExpression	hash_key -> key == NULL || ZSTR_VAL ( hash_key -> key ) [ 0 ] == 0		84449	0		||			
ANR	84490	EqualityExpression	hash_key -> key == NULL		84449	0		==			
ANR	84491	PtrMemberAccess	hash_key -> key		84449	0					
ANR	84492	Identifier	hash_key		84449	0					
ANR	84493	Identifier	key		84449	1					
ANR	84494	Identifier	NULL		84449	1					
ANR	84495	EqualityExpression	ZSTR_VAL ( hash_key -> key ) [ 0 ] == 0		84449	1		==			
ANR	84496	ArrayIndexing	ZSTR_VAL ( hash_key -> key ) [ 0 ]		84449	0					
ANR	84497	CallExpression	ZSTR_VAL ( hash_key -> key )		84449	0					
ANR	84498	Callee	ZSTR_VAL		84449	0					
ANR	84499	Identifier	ZSTR_VAL		84449	0					
ANR	84500	ArgumentList	hash_key -> key		84449	1					
ANR	84501	Argument	hash_key -> key		84449	0					
ANR	84502	PtrMemberAccess	hash_key -> key		84449	0					
ANR	84503	Identifier	hash_key		84449	0					
ANR	84504	Identifier	key		84449	1					
ANR	84505	PrimaryExpression	0		84449	1					
ANR	84506	PrimaryExpression	0		84449	1					
ANR	84507	CompoundStatement		6:63:187:187	84449	1					
ANR	84508	ReturnStatement	return 0 ;	1910:2:52270:52278	84449	0	True				
ANR	84509	PrimaryExpression	0		84449	0					
ANR	84510	IfStatement	if ( func -> type == ZEND_INTERNAL_FUNCTION )		84449	25					
ANR	84511	Condition	func -> type == ZEND_INTERNAL_FUNCTION	1913:5:52289:52324	84449	0	True				
ANR	84512	EqualityExpression	func -> type == ZEND_INTERNAL_FUNCTION		84449	0		==			
ANR	84513	PtrMemberAccess	func -> type		84449	0					
ANR	84514	Identifier	func		84449	0					
ANR	84515	Identifier	type		84449	1					
ANR	84516	Identifier	ZEND_INTERNAL_FUNCTION		84449	1					
ANR	84517	CompoundStatement		10:43:248:248	84449	1					
ANR	84518	ExpressionStatement	"add_next_index_str ( internal_ar , zend_string_copy ( hash_key -> key ) )"	1914:2:52331:52395	84449	0	True				
ANR	84519	CallExpression	"add_next_index_str ( internal_ar , zend_string_copy ( hash_key -> key ) )"		84449	0					
ANR	84520	Callee	add_next_index_str		84449	0					
ANR	84521	Identifier	add_next_index_str		84449	0					
ANR	84522	ArgumentList	internal_ar		84449	1					
ANR	84523	Argument	internal_ar		84449	0					
ANR	84524	Identifier	internal_ar		84449	0					
ANR	84525	Argument	zend_string_copy ( hash_key -> key )		84449	1					
ANR	84526	CallExpression	zend_string_copy ( hash_key -> key )		84449	0					
ANR	84527	Callee	zend_string_copy		84449	0					
ANR	84528	Identifier	zend_string_copy		84449	0					
ANR	84529	ArgumentList	hash_key -> key		84449	1					
ANR	84530	Argument	hash_key -> key		84449	0					
ANR	84531	PtrMemberAccess	hash_key -> key		84449	0					
ANR	84532	Identifier	hash_key		84449	0					
ANR	84533	Identifier	key		84449	1					
ANR	84534	ElseStatement	else		84449	0					
ANR	84535	IfStatement	if ( func -> type == ZEND_USER_FUNCTION )		84449	0					
ANR	84536	Condition	func -> type == ZEND_USER_FUNCTION	1915:12:52409:52440	84449	0	True				
ANR	84537	EqualityExpression	func -> type == ZEND_USER_FUNCTION		84449	0		==			
ANR	84538	PtrMemberAccess	func -> type		84449	0					
ANR	84539	Identifier	func		84449	0					
ANR	84540	Identifier	type		84449	1					
ANR	84541	Identifier	ZEND_USER_FUNCTION		84449	1					
ANR	84542	CompoundStatement		12:46:364:364	84449	1					
ANR	84543	ExpressionStatement	"add_next_index_str ( user_ar , zend_string_copy ( hash_key -> key ) )"	1916:2:52447:52507	84449	0	True				
ANR	84544	CallExpression	"add_next_index_str ( user_ar , zend_string_copy ( hash_key -> key ) )"		84449	0					
ANR	84545	Callee	add_next_index_str		84449	0					
ANR	84546	Identifier	add_next_index_str		84449	0					
ANR	84547	ArgumentList	user_ar		84449	1					
ANR	84548	Argument	user_ar		84449	0					
ANR	84549	Identifier	user_ar		84449	0					
ANR	84550	Argument	zend_string_copy ( hash_key -> key )		84449	1					
ANR	84551	CallExpression	zend_string_copy ( hash_key -> key )		84449	0					
ANR	84552	Callee	zend_string_copy		84449	0					
ANR	84553	Identifier	zend_string_copy		84449	0					
ANR	84554	ArgumentList	hash_key -> key		84449	1					
ANR	84555	Argument	hash_key -> key		84449	0					
ANR	84556	PtrMemberAccess	hash_key -> key		84449	0					
ANR	84557	Identifier	hash_key		84449	0					
ANR	84558	Identifier	key		84449	1					
ANR	84559	ReturnStatement	return 0 ;	1919:1:52514:52522	84449	26	True				
ANR	84560	PrimaryExpression	0		84449	0					
ANR	84561	ReturnType	static int		84449	1					
ANR	84562	Identifier	copy_function_name		84449	2					
ANR	84563	ParameterList	"zval * zv , int num_args , va_list args , zend_hash_key * hash_key"		84449	3					
ANR	84564	Parameter	zval * zv	1903:30:52005:52012	84449	0	True				
ANR	84565	ParameterType	zval *		84449	0					
ANR	84566	Identifier	zv		84449	1					
ANR	84567	Parameter	int num_args	1903:40:52015:52026	84449	1	True				
ANR	84568	ParameterType	int		84449	0					
ANR	84569	Identifier	num_args		84449	1					
ANR	84570	Parameter	va_list args	1903:54:52029:52040	84449	2	True				
ANR	84571	ParameterType	va_list		84449	0					
ANR	84572	Identifier	args		84449	1					
ANR	84573	Parameter	zend_hash_key * hash_key	1903:68:52043:52065	84449	3	True				
ANR	84574	ParameterType	zend_hash_key *		84449	0					
ANR	84575	Identifier	hash_key		84449	1					
ANR	84576	CFGEntryNode	ENTRY		84449		True				
ANR	84577	CFGExitNode	EXIT		84449		True				
ANR	84578	Symbol	Z_PTR_P		84449						
ANR	84579	Symbol	NULL		84449						
ANR	84580	Symbol	* func		84449						
ANR	84581	Symbol	internal_ar		84449						
ANR	84582	Symbol	zend_string_copy		84449						
ANR	84583	Symbol	ZSTR_VAL		84449						
ANR	84584	Symbol	args		84449						
ANR	84585	Symbol	* hash_key		84449						
ANR	84586	Symbol	ZEND_INTERNAL_FUNCTION		84449						
ANR	84587	Symbol	hash_key		84449						
ANR	84588	Symbol	func		84449						
ANR	84589	Symbol	num_args		84449						
ANR	84590	Symbol	ZEND_USER_FUNCTION		84449						
ANR	84591	Symbol	func -> type		84449						
ANR	84592	Symbol	zv		84449						
ANR	84593	Symbol	* ZSTR_VAL		84449						
ANR	84594	Symbol	hash_key -> key		84449						
ANR	84595	Symbol	user_ar		84449						
ANR	84596	DeclStmt									
ANR	84597	Decl							zval	zval	internal
ANR	84598	Decl							zval	zval	user
ANR	84599	DeclStmt									
ANR	84600	Decl							zend_array	zend_array *	symbol_table
ANR	84601	DeclStmt									
ANR	84602	Decl							zend_string	zend_string *	function_name
ANR	84603	DeclStmt									
ANR	84604	Decl							char	char *	eval_code
ANR	84605	Decl							char	char *	function_args
ANR	84606	Decl							char	char *	function_code
ANR	84607	DeclStmt									
ANR	84608	Decl							size_t	size_t	eval_code_length
ANR	84609	Decl							size_t	size_t	function_args_len
ANR	84610	Decl							size_t	size_t	function_code_len
ANR	84611	DeclStmt									
ANR	84612	Decl							int	int	retval
ANR	84613	DeclStmt									
ANR	84614	Decl							char	char *	eval_name
ANR	84615	DeclStmt									
ANR	84616	Decl							zend_op_array	zend_op_array *	func
ANR	84617	DeclStmt									
ANR	84618	Decl							HashTable	HashTable *	static_variables
ANR	84619	DeclStmt									
ANR	84620	Decl							zval	zval *	arg1
ANR	84621	Decl							zval	zval *	arg2
ANR	84622	DeclStmt									
ANR	84623	Decl							zval	zval *	arg1
ANR	84624	Decl							zval	zval *	arg2
ANR	84625	DeclStmt									
ANR	84626	Decl							const char	const char *	resource_type
ANR	84627	DeclStmt									
ANR	84628	Decl							zval	zval *	z_resource_type
ANR	84629	DeclStmt									
ANR	84630	Decl							zend_string	zend_string *	type
ANR	84631	DeclStmt									
ANR	84632	Decl							zend_string	zend_string *	key
ANR	84633	DeclStmt									
ANR	84634	Decl							zend_ulong	zend_ulong	index
ANR	84635	DeclStmt									
ANR	84636	Decl							zval	zval *	val
ANR	84637	DeclStmt									
ANR	84638	Decl							int	int	id
ANR	84639	Function	add_extension_info	2118:0:58114:58337							
ANR	84640	FunctionDef	"add_extension_info (zval * item , void * arg)"		84639	0					
ANR	84641	CompoundStatement		2119:0:58177:58337	84639	0					
ANR	84642	IdentifierDeclStatement	zval * name_array = ( zval * ) arg ;	2120:1:58180:58210	84639	0	True				
ANR	84643	IdentifierDecl	* name_array = ( zval * ) arg		84639	0					
ANR	84644	IdentifierDeclType	zval *		84639	0					
ANR	84645	Identifier	name_array		84639	1					
ANR	84646	AssignmentExpression	* name_array = ( zval * ) arg		84639	2		=			
ANR	84647	Identifier	name_array		84639	0					
ANR	84648	CastExpression	( zval * ) arg		84639	1					
ANR	84649	CastTarget	zval *		84639	0					
ANR	84650	Identifier	arg		84639	1					
ANR	84651	IdentifierDeclStatement	zend_module_entry * module = ( zend_module_entry * ) Z_PTR_P ( item ) ;	2121:1:58213:58274	84639	1	True				
ANR	84652	IdentifierDecl	* module = ( zend_module_entry * ) Z_PTR_P ( item )		84639	0					
ANR	84653	IdentifierDeclType	zend_module_entry *		84639	0					
ANR	84654	Identifier	module		84639	1					
ANR	84655	AssignmentExpression	* module = ( zend_module_entry * ) Z_PTR_P ( item )		84639	2		=			
ANR	84656	Identifier	module		84639	0					
ANR	84657	CastExpression	( zend_module_entry * ) Z_PTR_P ( item )		84639	1					
ANR	84658	CastTarget	zend_module_entry *		84639	0					
ANR	84659	CallExpression	Z_PTR_P ( item )		84639	1					
ANR	84660	Callee	Z_PTR_P		84639	0					
ANR	84661	Identifier	Z_PTR_P		84639	0					
ANR	84662	ArgumentList	item		84639	1					
ANR	84663	Argument	item		84639	0					
ANR	84664	Identifier	item		84639	0					
ANR	84665	ExpressionStatement	"add_next_index_string ( name_array , module -> name )"	2122:1:58277:58324	84639	2	True				
ANR	84666	CallExpression	"add_next_index_string ( name_array , module -> name )"		84639	0					
ANR	84667	Callee	add_next_index_string		84639	0					
ANR	84668	Identifier	add_next_index_string		84639	0					
ANR	84669	ArgumentList	name_array		84639	1					
ANR	84670	Argument	name_array		84639	0					
ANR	84671	Identifier	name_array		84639	0					
ANR	84672	Argument	module -> name		84639	1					
ANR	84673	PtrMemberAccess	module -> name		84639	0					
ANR	84674	Identifier	module		84639	0					
ANR	84675	Identifier	name		84639	1					
ANR	84676	ReturnStatement	return 0 ;	2123:1:58327:58335	84639	3	True				
ANR	84677	PrimaryExpression	0		84639	0					
ANR	84678	ReturnType	static int		84639	1					
ANR	84679	Identifier	add_extension_info		84639	2					
ANR	84680	ParameterList	"zval * item , void * arg"		84639	3					
ANR	84681	Parameter	zval * item	2118:30:58144:58153	84639	0	True				
ANR	84682	ParameterType	zval *		84639	0					
ANR	84683	Identifier	item		84639	1					
ANR	84684	Parameter	void * arg	2118:42:58156:58164	84639	1	True				
ANR	84685	ParameterType	void *		84639	0					
ANR	84686	Identifier	arg		84639	1					
ANR	84687	CFGEntryNode	ENTRY		84639		True				
ANR	84688	CFGExitNode	EXIT		84639		True				
ANR	84689	Symbol	Z_PTR_P		84639						
ANR	84690	Symbol	item		84639						
ANR	84691	Symbol	module -> name		84639						
ANR	84692	Symbol	* module		84639						
ANR	84693	Symbol	arg		84639						
ANR	84694	Symbol	module		84639						
ANR	84695	Symbol	name_array		84639						
ANR	84696	Function	add_zendext_info	2127:0:58350:58513							
ANR	84697	FunctionDef	"add_zendext_info (zend_extension * ext , void * arg)"		84696	0					
ANR	84698	CompoundStatement		2128:0:58420:58513	84696	0					
ANR	84699	IdentifierDeclStatement	zval * name_array = ( zval * ) arg ;	2129:1:58423:58453	84696	0	True				
ANR	84700	IdentifierDecl	* name_array = ( zval * ) arg		84696	0					
ANR	84701	IdentifierDeclType	zval *		84696	0					
ANR	84702	Identifier	name_array		84696	1					
ANR	84703	AssignmentExpression	* name_array = ( zval * ) arg		84696	2		=			
ANR	84704	Identifier	name_array		84696	0					
ANR	84705	CastExpression	( zval * ) arg		84696	1					
ANR	84706	CastTarget	zval *		84696	0					
ANR	84707	Identifier	arg		84696	1					
ANR	84708	ExpressionStatement	"add_next_index_string ( name_array , ext -> name )"	2130:1:58456:58500	84696	1	True				
ANR	84709	CallExpression	"add_next_index_string ( name_array , ext -> name )"		84696	0					
ANR	84710	Callee	add_next_index_string		84696	0					
ANR	84711	Identifier	add_next_index_string		84696	0					
ANR	84712	ArgumentList	name_array		84696	1					
ANR	84713	Argument	name_array		84696	0					
ANR	84714	Identifier	name_array		84696	0					
ANR	84715	Argument	ext -> name		84696	1					
ANR	84716	PtrMemberAccess	ext -> name		84696	0					
ANR	84717	Identifier	ext		84696	0					
ANR	84718	Identifier	name		84696	1					
ANR	84719	ReturnStatement	return 0 ;	2131:1:58503:58511	84696	2	True				
ANR	84720	PrimaryExpression	0		84696	0					
ANR	84721	ReturnType	static int		84696	1					
ANR	84722	Identifier	add_zendext_info		84696	2					
ANR	84723	ParameterList	"zend_extension * ext , void * arg"		84696	3					
ANR	84724	Parameter	zend_extension * ext	2127:28:58378:58396	84696	0	True				
ANR	84725	ParameterType	zend_extension *		84696	0					
ANR	84726	Identifier	ext		84696	1					
ANR	84727	Parameter	void * arg	2127:49:58399:58407	84696	1	True				
ANR	84728	ParameterType	void *		84696	0					
ANR	84729	Identifier	arg		84696	1					
ANR	84730	CFGEntryNode	ENTRY		84696		True				
ANR	84731	CFGExitNode	EXIT		84696		True				
ANR	84732	Symbol	ext		84696						
ANR	84733	Symbol	ext -> name		84696						
ANR	84734	Symbol	* ext		84696						
ANR	84735	Symbol	arg		84696						
ANR	84736	Symbol	name_array		84696						
ANR	84737	Function	add_constant_info	2135:0:58526:58894							
ANR	84738	FunctionDef	"add_constant_info (zval * item , void * arg)"		84737	0					
ANR	84739	CompoundStatement		2136:0:58588:58894	84737	0					
ANR	84740	IdentifierDeclStatement	zval * name_array = ( zval * ) arg ;	2137:1:58591:58621	84737	0	True				
ANR	84741	IdentifierDecl	* name_array = ( zval * ) arg		84737	0					
ANR	84742	IdentifierDeclType	zval *		84737	0					
ANR	84743	Identifier	name_array		84737	1					
ANR	84744	AssignmentExpression	* name_array = ( zval * ) arg		84737	2		=			
ANR	84745	Identifier	name_array		84737	0					
ANR	84746	CastExpression	( zval * ) arg		84737	1					
ANR	84747	CastTarget	zval *		84737	0					
ANR	84748	Identifier	arg		84737	1					
ANR	84749	IdentifierDeclStatement	zend_constant * constant = ( zend_constant * ) Z_PTR_P ( item ) ;	2138:1:58624:58679	84737	1	True				
ANR	84750	IdentifierDecl	* constant = ( zend_constant * ) Z_PTR_P ( item )		84737	0					
ANR	84751	IdentifierDeclType	zend_constant *		84737	0					
ANR	84752	Identifier	constant		84737	1					
ANR	84753	AssignmentExpression	* constant = ( zend_constant * ) Z_PTR_P ( item )		84737	2		=			
ANR	84754	Identifier	constant		84737	0					
ANR	84755	CastExpression	( zend_constant * ) Z_PTR_P ( item )		84737	1					
ANR	84756	CastTarget	zend_constant *		84737	0					
ANR	84757	CallExpression	Z_PTR_P ( item )		84737	1					
ANR	84758	Callee	Z_PTR_P		84737	0					
ANR	84759	Identifier	Z_PTR_P		84737	0					
ANR	84760	ArgumentList	item		84737	1					
ANR	84761	Argument	item		84737	0					
ANR	84762	Identifier	item		84737	0					
ANR	84763	IdentifierDeclStatement	zval const_val ;	2139:1:58682:58696	84737	2	True				
ANR	84764	IdentifierDecl	const_val		84737	0					
ANR	84765	IdentifierDeclType	zval		84737	0					
ANR	84766	Identifier	const_val		84737	1					
ANR	84767	IfStatement	if ( ! constant -> name )		84737	3					
ANR	84768	Condition	! constant -> name	2141:5:58704:58718	84737	0	True				
ANR	84769	UnaryOperationExpression	! constant -> name		84737	0					
ANR	84770	UnaryOperator	!		84737	0					
ANR	84771	PtrMemberAccess	constant -> name		84737	1					
ANR	84772	Identifier	constant		84737	0					
ANR	84773	Identifier	name		84737	1					
ANR	84774	CompoundStatement		6:22:132:132	84737	1					
ANR	84775	ReturnStatement	return 0 ;	2143:2:58756:58764	84737	0	True				
ANR	84776	PrimaryExpression	0		84737	0					
ANR	84777	ExpressionStatement	"ZVAL_DUP ( & const_val , & constant -> value )"	2146:1:58771:58809	84737	4	True				
ANR	84778	CallExpression	"ZVAL_DUP ( & const_val , & constant -> value )"		84737	0					
ANR	84779	Callee	ZVAL_DUP		84737	0					
ANR	84780	Identifier	ZVAL_DUP		84737	0					
ANR	84781	ArgumentList	& const_val		84737	1					
ANR	84782	Argument	& const_val		84737	0					
ANR	84783	UnaryOperationExpression	& const_val		84737	0					
ANR	84784	UnaryOperator	&		84737	0					
ANR	84785	Identifier	const_val		84737	1					
ANR	84786	Argument	& constant -> value		84737	1					
ANR	84787	UnaryOperationExpression	& constant -> value		84737	0					
ANR	84788	UnaryOperator	&		84737	0					
ANR	84789	PtrMemberAccess	constant -> value		84737	1					
ANR	84790	Identifier	constant		84737	0					
ANR	84791	Identifier	value		84737	1					
ANR	84792	ExpressionStatement	"zend_hash_add_new ( Z_ARRVAL_P ( name_array ) , constant -> name , & const_val )"	2147:1:58812:58881	84737	5	True				
ANR	84793	CallExpression	"zend_hash_add_new ( Z_ARRVAL_P ( name_array ) , constant -> name , & const_val )"		84737	0					
ANR	84794	Callee	zend_hash_add_new		84737	0					
ANR	84795	Identifier	zend_hash_add_new		84737	0					
ANR	84796	ArgumentList	Z_ARRVAL_P ( name_array )		84737	1					
ANR	84797	Argument	Z_ARRVAL_P ( name_array )		84737	0					
ANR	84798	CallExpression	Z_ARRVAL_P ( name_array )		84737	0					
ANR	84799	Callee	Z_ARRVAL_P		84737	0					
ANR	84800	Identifier	Z_ARRVAL_P		84737	0					
ANR	84801	ArgumentList	name_array		84737	1					
ANR	84802	Argument	name_array		84737	0					
ANR	84803	Identifier	name_array		84737	0					
ANR	84804	Argument	constant -> name		84737	1					
ANR	84805	PtrMemberAccess	constant -> name		84737	0					
ANR	84806	Identifier	constant		84737	0					
ANR	84807	Identifier	name		84737	1					
ANR	84808	Argument	& const_val		84737	2					
ANR	84809	UnaryOperationExpression	& const_val		84737	0					
ANR	84810	UnaryOperator	&		84737	0					
ANR	84811	Identifier	const_val		84737	1					
ANR	84812	ReturnStatement	return 0 ;	2148:1:58884:58892	84737	6	True				
ANR	84813	PrimaryExpression	0		84737	0					
ANR	84814	ReturnType	static int		84737	1					
ANR	84815	Identifier	add_constant_info		84737	2					
ANR	84816	ParameterList	"zval * item , void * arg"		84737	3					
ANR	84817	Parameter	zval * item	2135:29:58555:58564	84737	0	True				
ANR	84818	ParameterType	zval *		84737	0					
ANR	84819	Identifier	item		84737	1					
ANR	84820	Parameter	void * arg	2135:41:58567:58575	84737	1	True				
ANR	84821	ParameterType	void *		84737	0					
ANR	84822	Identifier	arg		84737	1					
ANR	84823	CFGEntryNode	ENTRY		84737		True				
ANR	84824	CFGExitNode	EXIT		84737		True				
ANR	84825	Symbol	Z_PTR_P		84737						
ANR	84826	Symbol	item		84737						
ANR	84827	Symbol	constant -> name		84737						
ANR	84828	Symbol	constant		84737						
ANR	84829	Symbol	& constant -> value		84737						
ANR	84830	Symbol	const_val		84737						
ANR	84831	Symbol	arg		84737						
ANR	84832	Symbol	* constant		84737						
ANR	84833	Symbol	Z_ARRVAL_P		84737						
ANR	84834	Symbol	name_array		84737						
ANR	84835	Symbol	& const_val		84737						
ANR	84836	DeclStmt									
ANR	84837	Decl							zend_bool	zend_bool	zendext
ANR	84838	DeclStmt									
ANR	84839	Decl							zend_bool	zend_bool	categorize
ANR	84840	DeclStmt									
ANR	84841	Decl							zend_constant	zend_constant *	val
ANR	84842	DeclStmt									
ANR	84843	Decl							int	int	module_number
ANR	84844	DeclStmt									
ANR	84845	Decl							zval	zval *	modules
ANR	84846	Decl							zval	zval	const_val
ANR	84847	DeclStmt									
ANR	84848	Decl							char	char * *	module_names
ANR	84849	DeclStmt									
ANR	84850	Decl							zend_module_entry	zend_module_entry *	module
ANR	84851	DeclStmt									
ANR	84852	Decl							int	int	i
ANR	84853	Function	debug_backtrace_get_args	2234:0:61171:62316							
ANR	84854	FunctionDef	"debug_backtrace_get_args (zend_execute_data * call , zval * arg_array)"		84853	0					
ANR	84855	CompoundStatement		2235:0:61260:62316	84853	0					
ANR	84856	IdentifierDeclStatement	uint32_t num_args = ZEND_CALL_NUM_ARGS ( call ) ;	2236:1:61263:61307	84853	0	True				
ANR	84857	IdentifierDecl	num_args = ZEND_CALL_NUM_ARGS ( call )		84853	0					
ANR	84858	IdentifierDeclType	uint32_t		84853	0					
ANR	84859	Identifier	num_args		84853	1					
ANR	84860	AssignmentExpression	num_args = ZEND_CALL_NUM_ARGS ( call )		84853	2		=			
ANR	84861	Identifier	num_args		84853	0					
ANR	84862	CallExpression	ZEND_CALL_NUM_ARGS ( call )		84853	1					
ANR	84863	Callee	ZEND_CALL_NUM_ARGS		84853	0					
ANR	84864	Identifier	ZEND_CALL_NUM_ARGS		84853	0					
ANR	84865	ArgumentList	call		84853	1					
ANR	84866	Argument	call		84853	0					
ANR	84867	Identifier	call		84853	0					
ANR	84868	ExpressionStatement	"array_init_size ( arg_array , num_args )"	2238:1:61311:61347	84853	1	True				
ANR	84869	CallExpression	"array_init_size ( arg_array , num_args )"		84853	0					
ANR	84870	Callee	array_init_size		84853	0					
ANR	84871	Identifier	array_init_size		84853	0					
ANR	84872	ArgumentList	arg_array		84853	1					
ANR	84873	Argument	arg_array		84853	0					
ANR	84874	Identifier	arg_array		84853	0					
ANR	84875	Argument	num_args		84853	1					
ANR	84876	Identifier	num_args		84853	0					
ANR	84877	IfStatement	if ( num_args )		84853	2					
ANR	84878	Condition	num_args	2239:5:61354:61361	84853	0	True				
ANR	84879	Identifier	num_args		84853	0					
ANR	84880	CompoundStatement		8:2:143:175	84853	1					
ANR	84881	IdentifierDeclStatement	uint32_t i = 0 ;	2240:2:61368:61382	84853	0	True				
ANR	84882	IdentifierDecl	i = 0		84853	0					
ANR	84883	IdentifierDeclType	uint32_t		84853	0					
ANR	84884	Identifier	i		84853	1					
ANR	84885	AssignmentExpression	i = 0		84853	2		=			
ANR	84886	Identifier	i		84853	0					
ANR	84887	PrimaryExpression	0		84853	1					
ANR	84888	IdentifierDeclStatement	uint32_t n = 0 ;	2241:2:61386:61400	84853	1	True				
ANR	84889	IdentifierDecl	n = 0		84853	0					
ANR	84890	IdentifierDeclType	uint32_t		84853	0					
ANR	84891	Identifier	n		84853	1					
ANR	84892	AssignmentExpression	n = 0		84853	2		=			
ANR	84893	Identifier	n		84853	0					
ANR	84894	PrimaryExpression	0		84853	1					
ANR	84895	IdentifierDeclStatement	"zval * p = ZEND_CALL_ARG ( call , 1 ) ;"	2242:2:61404:61436	84853	2	True				
ANR	84896	IdentifierDecl	"* p = ZEND_CALL_ARG ( call , 1 )"		84853	0					
ANR	84897	IdentifierDeclType	zval *		84853	0					
ANR	84898	Identifier	p		84853	1					
ANR	84899	AssignmentExpression	"* p = ZEND_CALL_ARG ( call , 1 )"		84853	2		=			
ANR	84900	Identifier	p		84853	0					
ANR	84901	CallExpression	"ZEND_CALL_ARG ( call , 1 )"		84853	1					
ANR	84902	Callee	ZEND_CALL_ARG		84853	0					
ANR	84903	Identifier	ZEND_CALL_ARG		84853	0					
ANR	84904	ArgumentList	call		84853	1					
ANR	84905	Argument	call		84853	0					
ANR	84906	Identifier	call		84853	0					
ANR	84907	Argument	1		84853	1					
ANR	84908	PrimaryExpression	1		84853	0					
ANR	84909	ExpressionStatement	"zend_hash_real_init ( Z_ARRVAL_P ( arg_array ) , 1 )"	2244:2:61441:61486	84853	3	True				
ANR	84910	CallExpression	"zend_hash_real_init ( Z_ARRVAL_P ( arg_array ) , 1 )"		84853	0					
ANR	84911	Callee	zend_hash_real_init		84853	0					
ANR	84912	Identifier	zend_hash_real_init		84853	0					
ANR	84913	ArgumentList	Z_ARRVAL_P ( arg_array )		84853	1					
ANR	84914	Argument	Z_ARRVAL_P ( arg_array )		84853	0					
ANR	84915	CallExpression	Z_ARRVAL_P ( arg_array )		84853	0					
ANR	84916	Callee	Z_ARRVAL_P		84853	0					
ANR	84917	Identifier	Z_ARRVAL_P		84853	0					
ANR	84918	ArgumentList	arg_array		84853	1					
ANR	84919	Argument	arg_array		84853	0					
ANR	84920	Identifier	arg_array		84853	0					
ANR	84921	Argument	1		84853	1					
ANR	84922	PrimaryExpression	1		84853	0					
ANR	84923	Statement	ZEND_HASH_FILL_PACKED	2245:2:61490:61510	84853	4	True				
ANR	84924	Statement	(	2245:23:61511:61511	84853	5	True				
ANR	84925	Statement	Z_ARRVAL_P	2245:24:61512:61521	84853	6	True				
ANR	84926	Statement	(	2245:34:61522:61522	84853	7	True				
ANR	84927	Statement	arg_array	2245:35:61523:61531	84853	8	True				
ANR	84928	Statement	)	2245:44:61532:61532	84853	9	True				
ANR	84929	Statement	)	2245:45:61533:61533	84853	10	True				
ANR	84930	CompoundStatement		11:47:274:274	84853	11					
ANR	84931	IfStatement	if ( call -> func -> type == ZEND_USER_FUNCTION )		84853	0					
ANR	84932	Condition	call -> func -> type == ZEND_USER_FUNCTION	2246:7:61544:61581	84853	0	True				
ANR	84933	EqualityExpression	call -> func -> type == ZEND_USER_FUNCTION		84853	0		==			
ANR	84934	PtrMemberAccess	call -> func -> type		84853	0					
ANR	84935	PtrMemberAccess	call -> func		84853	0					
ANR	84936	Identifier	call		84853	0					
ANR	84937	Identifier	func		84853	1					
ANR	84938	Identifier	type		84853	1					
ANR	84939	Identifier	ZEND_USER_FUNCTION		84853	1					
ANR	84940	CompoundStatement		13:4:329:385	84853	1					
ANR	84941	IdentifierDeclStatement	uint32_t first_extra_arg = call -> func -> op_array . num_args ;	2247:4:61590:61646	84853	0	True				
ANR	84942	IdentifierDecl	first_extra_arg = call -> func -> op_array . num_args		84853	0					
ANR	84943	IdentifierDeclType	uint32_t		84853	0					
ANR	84944	Identifier	first_extra_arg		84853	1					
ANR	84945	AssignmentExpression	first_extra_arg = call -> func -> op_array . num_args		84853	2		=			
ANR	84946	Identifier	first_extra_arg		84853	0					
ANR	84947	MemberAccess	call -> func -> op_array . num_args		84853	1					
ANR	84948	PtrMemberAccess	call -> func -> op_array		84853	0					
ANR	84949	PtrMemberAccess	call -> func		84853	0					
ANR	84950	Identifier	call		84853	0					
ANR	84951	Identifier	func		84853	1					
ANR	84952	Identifier	op_array		84853	1					
ANR	84953	Identifier	num_args		84853	1					
ANR	84954	IfStatement	if ( ZEND_CALL_NUM_ARGS ( call ) > first_extra_arg )		84853	1					
ANR	84955	Condition	ZEND_CALL_NUM_ARGS ( call ) > first_extra_arg	2249:8:61657:61698	84853	0	True				
ANR	84956	RelationalExpression	ZEND_CALL_NUM_ARGS ( call ) > first_extra_arg		84853	0		>			
ANR	84957	CallExpression	ZEND_CALL_NUM_ARGS ( call )		84853	0					
ANR	84958	Callee	ZEND_CALL_NUM_ARGS		84853	0					
ANR	84959	Identifier	ZEND_CALL_NUM_ARGS		84853	0					
ANR	84960	ArgumentList	call		84853	1					
ANR	84961	Argument	call		84853	0					
ANR	84962	Identifier	call		84853	0					
ANR	84963	Identifier	first_extra_arg		84853	1					
ANR	84964	CompoundStatement		15:52:440:440	84853	1					
ANR	84965	WhileStatement	while ( i < first_extra_arg )		84853	0					
ANR	84966	Condition	i < first_extra_arg	2250:12:61715:61733	84853	0	True				
ANR	84967	RelationalExpression	i < first_extra_arg		84853	0		<			
ANR	84968	Identifier	i		84853	0					
ANR	84969	Identifier	first_extra_arg		84853	1					
ANR	84970	CompoundStatement		16:33:475:475	84853	1					
ANR	84971	IfStatement	if ( EXPECTED ( Z_TYPE_INFO_P ( p ) != IS_UNDEF ) )		84853	0					
ANR	84972	Condition	EXPECTED ( Z_TYPE_INFO_P ( p ) != IS_UNDEF )	2251:10:61748:61785	84853	0	True				
ANR	84973	CallExpression	EXPECTED ( Z_TYPE_INFO_P ( p ) != IS_UNDEF )		84853	0					
ANR	84974	Callee	EXPECTED		84853	0					
ANR	84975	Identifier	EXPECTED		84853	0					
ANR	84976	ArgumentList	Z_TYPE_INFO_P ( p ) != IS_UNDEF		84853	1					
ANR	84977	Argument	Z_TYPE_INFO_P ( p ) != IS_UNDEF		84853	0					
ANR	84978	EqualityExpression	Z_TYPE_INFO_P ( p ) != IS_UNDEF		84853	0		!=			
ANR	84979	CallExpression	Z_TYPE_INFO_P ( p )		84853	0					
ANR	84980	Callee	Z_TYPE_INFO_P		84853	0					
ANR	84981	Identifier	Z_TYPE_INFO_P		84853	0					
ANR	84982	ArgumentList	p		84853	1					
ANR	84983	Argument	p		84853	0					
ANR	84984	Identifier	p		84853	0					
ANR	84985	Identifier	IS_UNDEF		84853	1					
ANR	84986	CompoundStatement		17:50:527:527	84853	1					
ANR	84987	IfStatement	if ( Z_OPT_REFCOUNTED_P ( p ) )		84853	0					
ANR	84988	Condition	Z_OPT_REFCOUNTED_P ( p )	2252:11:61801:61821	84853	0	True				
ANR	84989	CallExpression	Z_OPT_REFCOUNTED_P ( p )		84853	0					
ANR	84990	Callee	Z_OPT_REFCOUNTED_P		84853	0					
ANR	84991	Identifier	Z_OPT_REFCOUNTED_P		84853	0					
ANR	84992	ArgumentList	p		84853	1					
ANR	84993	Argument	p		84853	0					
ANR	84994	Identifier	p		84853	0					
ANR	84995	CompoundStatement		18:34:563:563	84853	1					
ANR	84996	ExpressionStatement	Z_ADDREF_P ( p )	2253:8:61834:61847	84853	0	True				
ANR	84997	CallExpression	Z_ADDREF_P ( p )		84853	0					
ANR	84998	Callee	Z_ADDREF_P		84853	0					
ANR	84999	Identifier	Z_ADDREF_P		84853	0					
ANR	85000	ArgumentList	p		84853	1					
ANR	85001	Argument	p		84853	0					
ANR	85002	Identifier	p		84853	0					
ANR	85003	ExpressionStatement	n ++	2255:7:61865:61868	84853	1	True				
ANR	85004	PostIncDecOperationExpression	n ++		84853	0					
ANR	85005	Identifier	n		84853	0					
ANR	85006	IncDec	++		84853	1					
ANR	85007	ExpressionStatement	ZEND_HASH_FILL_ADD ( p )	2257:6:61884:61905	84853	1	True				
ANR	85008	CallExpression	ZEND_HASH_FILL_ADD ( p )		84853	0					
ANR	85009	Callee	ZEND_HASH_FILL_ADD		84853	0					
ANR	85010	Identifier	ZEND_HASH_FILL_ADD		84853	0					
ANR	85011	ArgumentList	p		84853	1					
ANR	85012	Argument	p		84853	0					
ANR	85013	Identifier	p		84853	0					
ANR	85014	ExpressionStatement	p ++	2258:6:61913:61916	84853	2	True				
ANR	85015	PostIncDecOperationExpression	p ++		84853	0					
ANR	85016	Identifier	p		84853	0					
ANR	85017	IncDec	++		84853	1					
ANR	85018	ExpressionStatement	i ++	2259:6:61924:61927	84853	3	True				
ANR	85019	PostIncDecOperationExpression	i ++		84853	0					
ANR	85020	Identifier	i		84853	0					
ANR	85021	IncDec	++		84853	1					
ANR	85022	ExpressionStatement	"p = ZEND_CALL_VAR_NUM ( call , call -> func -> op_array . last_var + call -> func -> op_array . T )"	2261:5:61941:62024	84853	1	True				
ANR	85023	AssignmentExpression	"p = ZEND_CALL_VAR_NUM ( call , call -> func -> op_array . last_var + call -> func -> op_array . T )"		84853	0		=			
ANR	85024	Identifier	p		84853	0					
ANR	85025	CallExpression	"ZEND_CALL_VAR_NUM ( call , call -> func -> op_array . last_var + call -> func -> op_array . T )"		84853	1					
ANR	85026	Callee	ZEND_CALL_VAR_NUM		84853	0					
ANR	85027	Identifier	ZEND_CALL_VAR_NUM		84853	0					
ANR	85028	ArgumentList	call		84853	1					
ANR	85029	Argument	call		84853	0					
ANR	85030	Identifier	call		84853	0					
ANR	85031	Argument	call -> func -> op_array . last_var + call -> func -> op_array . T		84853	1					
ANR	85032	AdditiveExpression	call -> func -> op_array . last_var + call -> func -> op_array . T		84853	0		+			
ANR	85033	MemberAccess	call -> func -> op_array . last_var		84853	0					
ANR	85034	PtrMemberAccess	call -> func -> op_array		84853	0					
ANR	85035	PtrMemberAccess	call -> func		84853	0					
ANR	85036	Identifier	call		84853	0					
ANR	85037	Identifier	func		84853	1					
ANR	85038	Identifier	op_array		84853	1					
ANR	85039	Identifier	last_var		84853	1					
ANR	85040	MemberAccess	call -> func -> op_array . T		84853	1					
ANR	85041	PtrMemberAccess	call -> func -> op_array		84853	0					
ANR	85042	PtrMemberAccess	call -> func		84853	0					
ANR	85043	Identifier	call		84853	0					
ANR	85044	Identifier	func		84853	1					
ANR	85045	Identifier	op_array		84853	1					
ANR	85046	Identifier	T		84853	1					
ANR	85047	WhileStatement	while ( i < num_args )		84853	1					
ANR	85048	Condition	i < num_args	2265:10:62048:62059	84853	0	True				
ANR	85049	RelationalExpression	i < num_args		84853	0		<			
ANR	85050	Identifier	i		84853	0					
ANR	85051	Identifier	num_args		84853	1					
ANR	85052	CompoundStatement		31:24:801:801	84853	1					
ANR	85053	IfStatement	if ( EXPECTED ( Z_TYPE_INFO_P ( p ) != IS_UNDEF ) )		84853	0					
ANR	85054	Condition	EXPECTED ( Z_TYPE_INFO_P ( p ) != IS_UNDEF )	2266:8:62072:62109	84853	0	True				
ANR	85055	CallExpression	EXPECTED ( Z_TYPE_INFO_P ( p ) != IS_UNDEF )		84853	0					
ANR	85056	Callee	EXPECTED		84853	0					
ANR	85057	Identifier	EXPECTED		84853	0					
ANR	85058	ArgumentList	Z_TYPE_INFO_P ( p ) != IS_UNDEF		84853	1					
ANR	85059	Argument	Z_TYPE_INFO_P ( p ) != IS_UNDEF		84853	0					
ANR	85060	EqualityExpression	Z_TYPE_INFO_P ( p ) != IS_UNDEF		84853	0		!=			
ANR	85061	CallExpression	Z_TYPE_INFO_P ( p )		84853	0					
ANR	85062	Callee	Z_TYPE_INFO_P		84853	0					
ANR	85063	Identifier	Z_TYPE_INFO_P		84853	0					
ANR	85064	ArgumentList	p		84853	1					
ANR	85065	Argument	p		84853	0					
ANR	85066	Identifier	p		84853	0					
ANR	85067	Identifier	IS_UNDEF		84853	1					
ANR	85068	CompoundStatement		32:48:851:851	84853	1					
ANR	85069	IfStatement	if ( Z_OPT_REFCOUNTED_P ( p ) )		84853	0					
ANR	85070	Condition	Z_OPT_REFCOUNTED_P ( p )	2267:9:62123:62143	84853	0	True				
ANR	85071	CallExpression	Z_OPT_REFCOUNTED_P ( p )		84853	0					
ANR	85072	Callee	Z_OPT_REFCOUNTED_P		84853	0					
ANR	85073	Identifier	Z_OPT_REFCOUNTED_P		84853	0					
ANR	85074	ArgumentList	p		84853	1					
ANR	85075	Argument	p		84853	0					
ANR	85076	Identifier	p		84853	0					
ANR	85077	CompoundStatement		33:32:885:885	84853	1					
ANR	85078	ExpressionStatement	Z_ADDREF_P ( p )	2268:6:62154:62167	84853	0	True				
ANR	85079	CallExpression	Z_ADDREF_P ( p )		84853	0					
ANR	85080	Callee	Z_ADDREF_P		84853	0					
ANR	85081	Identifier	Z_ADDREF_P		84853	0					
ANR	85082	ArgumentList	p		84853	1					
ANR	85083	Argument	p		84853	0					
ANR	85084	Identifier	p		84853	0					
ANR	85085	ExpressionStatement	n ++	2270:5:62181:62184	84853	1	True				
ANR	85086	PostIncDecOperationExpression	n ++		84853	0					
ANR	85087	Identifier	n		84853	0					
ANR	85088	IncDec	++		84853	1					
ANR	85089	ExpressionStatement	ZEND_HASH_FILL_ADD ( p )	2272:4:62196:62217	84853	1	True				
ANR	85090	CallExpression	ZEND_HASH_FILL_ADD ( p )		84853	0					
ANR	85091	Callee	ZEND_HASH_FILL_ADD		84853	0					
ANR	85092	Identifier	ZEND_HASH_FILL_ADD		84853	0					
ANR	85093	ArgumentList	p		84853	1					
ANR	85094	Argument	p		84853	0					
ANR	85095	Identifier	p		84853	0					
ANR	85096	ExpressionStatement	p ++	2273:4:62223:62226	84853	2	True				
ANR	85097	PostIncDecOperationExpression	p ++		84853	0					
ANR	85098	Identifier	p		84853	0					
ANR	85099	IncDec	++		84853	1					
ANR	85100	ExpressionStatement	i ++	2274:4:62232:62235	84853	3	True				
ANR	85101	PostIncDecOperationExpression	i ++		84853	0					
ANR	85102	Identifier	i		84853	0					
ANR	85103	IncDec	++		84853	1					
ANR	85104	ExpressionStatement	ZEND_HASH_FILL_END ( )	2276:4:62246:62266	84853	12	True				
ANR	85105	CallExpression	ZEND_HASH_FILL_END ( )		84853	0					
ANR	85106	Callee	ZEND_HASH_FILL_END		84853	0					
ANR	85107	Identifier	ZEND_HASH_FILL_END		84853	0					
ANR	85108	ArgumentList			84853	1					
ANR	85109	ExpressionStatement	Z_ARRVAL_P ( arg_array ) -> nNumOfElements = n	2277:2:62270:62311	84853	13	True				
ANR	85110	AssignmentExpression	Z_ARRVAL_P ( arg_array ) -> nNumOfElements = n		84853	0		=			
ANR	85111	PtrMemberAccess	Z_ARRVAL_P ( arg_array ) -> nNumOfElements		84853	0					
ANR	85112	CallExpression	Z_ARRVAL_P ( arg_array )		84853	0					
ANR	85113	Callee	Z_ARRVAL_P		84853	0					
ANR	85114	Identifier	Z_ARRVAL_P		84853	0					
ANR	85115	ArgumentList	arg_array		84853	1					
ANR	85116	Argument	arg_array		84853	0					
ANR	85117	Identifier	arg_array		84853	0					
ANR	85118	Identifier	nNumOfElements		84853	1					
ANR	85119	Identifier	n		84853	1					
ANR	85120	ReturnType	static void		84853	1					
ANR	85121	Identifier	debug_backtrace_get_args		84853	2					
ANR	85122	ParameterList	"zend_execute_data * call , zval * arg_array"		84853	3					
ANR	85123	Parameter	zend_execute_data * call	2234:37:61208:61230	84853	0	True				
ANR	85124	ParameterType	zend_execute_data *		84853	0					
ANR	85125	Identifier	call		84853	1					
ANR	85126	Parameter	zval * arg_array	2234:62:61233:61247	84853	1	True				
ANR	85127	ParameterType	zval *		84853	0					
ANR	85128	Identifier	arg_array		84853	1					
ANR	85129	CFGEntryNode	ENTRY		84853		True				
ANR	85130	CFGExitNode	EXIT		84853		True				
ANR	85131	Symbol	call -> func		84853						
ANR	85132	Symbol	call -> func -> op_array . num_args		84853						
ANR	85133	Symbol	call -> func -> op_array		84853						
ANR	85134	Symbol	ZEND_CALL_ARG		84853						
ANR	85135	Symbol	* call		84853						
ANR	85136	Symbol	* Z_ARRVAL_P		84853						
ANR	85137	Symbol	call -> func -> op_array . T		84853						
ANR	85138	Symbol	call -> func -> type		84853						
ANR	85139	Symbol	arg_array		84853						
ANR	85140	Symbol	first_extra_arg		84853						
ANR	85141	Symbol	* call -> func		84853						
ANR	85142	Symbol	num_args		84853						
ANR	85143	Symbol	ZEND_USER_FUNCTION		84853						
ANR	85144	Symbol	ZEND_CALL_NUM_ARGS		84853						
ANR	85145	Symbol	Z_ARRVAL_P		84853						
ANR	85146	Symbol	IS_UNDEF		84853						
ANR	85147	Symbol	* * call		84853						
ANR	85148	Symbol	Z_OPT_REFCOUNTED_P		84853						
ANR	85149	Symbol	call -> func -> op_array . last_var		84853						
ANR	85150	Symbol	i		84853						
ANR	85151	Symbol	n		84853						
ANR	85152	Symbol	Z_TYPE_INFO_P		84853						
ANR	85153	Symbol	call		84853						
ANR	85154	Symbol	p		84853						
ANR	85155	Symbol	Z_ARRVAL_P ( arg_array ) -> nNumOfElements		84853						
ANR	85156	Symbol	ZEND_CALL_VAR_NUM		84853						
ANR	85157	Symbol	EXPECTED		84853						
ANR	85158	Function	debug_print_backtrace_args	2282:0:62329:62564							
ANR	85159	FunctionDef	debug_print_backtrace_args (zval * arg_array)		85158	0					
ANR	85160	CompoundStatement		2283:0:62388:62564	85158	0					
ANR	85161	IdentifierDeclStatement	zval * tmp ;	2284:1:62391:62400	85158	0	True				
ANR	85162	IdentifierDecl	* tmp		85158	0					
ANR	85163	IdentifierDeclType	zval *		85158	0					
ANR	85164	Identifier	tmp		85158	1					
ANR	85165	IdentifierDeclStatement	int i = 0 ;	2285:1:62403:62412	85158	1	True				
ANR	85166	IdentifierDecl	i = 0		85158	0					
ANR	85167	IdentifierDeclType	int		85158	0					
ANR	85168	Identifier	i		85158	1					
ANR	85169	AssignmentExpression	i = 0		85158	2		=			
ANR	85170	Identifier	i		85158	0					
ANR	85171	PrimaryExpression	0		85158	1					
ANR	85172	Statement	ZEND_HASH_FOREACH_VAL	2287:1:62416:62436	85158	2	True				
ANR	85173	Statement	(	2287:22:62437:62437	85158	3	True				
ANR	85174	Statement	Z_ARRVAL_P	2287:23:62438:62447	85158	4	True				
ANR	85175	Statement	(	2287:33:62448:62448	85158	5	True				
ANR	85176	Statement	arg_array	2287:34:62449:62457	85158	6	True				
ANR	85177	Statement	)	2287:43:62458:62458	85158	7	True				
ANR	85178	Statement	","	2287:44:62459:62459	85158	8	True				
ANR	85179	Statement	tmp	2287:46:62461:62463	85158	9	True				
ANR	85180	Statement	)	2287:49:62464:62464	85158	10	True				
ANR	85181	CompoundStatement		5:51:77:77	85158	11					
ANR	85182	IfStatement	if ( i ++ )		85158	0					
ANR	85183	Condition	i ++	2288:6:62474:62476	85158	0	True				
ANR	85184	PostIncDecOperationExpression	i ++		85158	0					
ANR	85185	Identifier	i		85158	0					
ANR	85186	IncDec	++		85158	1					
ANR	85187	CompoundStatement		6:11:90:90	85158	1					
ANR	85188	ExpressionStatement	"ZEND_PUTS ( "", "" )"	2289:3:62484:62499	85158	0	True				
ANR	85189	CallExpression	"ZEND_PUTS ( "", "" )"		85158	0					
ANR	85190	Callee	ZEND_PUTS		85158	0					
ANR	85191	Identifier	ZEND_PUTS		85158	0					
ANR	85192	ArgumentList	""", """		85158	1					
ANR	85193	Argument	""", """		85158	0					
ANR	85194	PrimaryExpression	""", """		85158	0					
ANR	85195	ExpressionStatement	zend_print_flat_zval_r ( tmp )	2291:2:62507:62534	85158	1	True				
ANR	85196	CallExpression	zend_print_flat_zval_r ( tmp )		85158	0					
ANR	85197	Callee	zend_print_flat_zval_r		85158	0					
ANR	85198	Identifier	zend_print_flat_zval_r		85158	0					
ANR	85199	ArgumentList	tmp		85158	1					
ANR	85200	Argument	tmp		85158	0					
ANR	85201	Identifier	tmp		85158	0					
ANR	85202	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	2292:3:62539:62562	85158	12	True				
ANR	85203	CallExpression	ZEND_HASH_FOREACH_END ( )		85158	0					
ANR	85204	Callee	ZEND_HASH_FOREACH_END		85158	0					
ANR	85205	Identifier	ZEND_HASH_FOREACH_END		85158	0					
ANR	85206	ArgumentList			85158	1					
ANR	85207	ReturnType	void		85158	1					
ANR	85208	Identifier	debug_print_backtrace_args		85158	2					
ANR	85209	ParameterList	zval * arg_array		85158	3					
ANR	85210	Parameter	zval * arg_array	2282:32:62361:62375	85158	0	True				
ANR	85211	ParameterType	zval *		85158	0					
ANR	85212	Identifier	arg_array		85158	1					
ANR	85213	CFGEntryNode	ENTRY		85158		True				
ANR	85214	CFGExitNode	EXIT		85158		True				
ANR	85215	Symbol	tmp		85158						
ANR	85216	Symbol	i		85158						
ANR	85217	Symbol	arg_array		85158						
ANR	85218	DeclStmt									
ANR	85219	Decl							zend_execute_data	zend_execute_data *	call
ANR	85220	Decl							zend_execute_data	zend_execute_data *	ptr
ANR	85221	Decl							zend_execute_data	zend_execute_data *	skip
ANR	85222	DeclStmt									
ANR	85223	Decl							zend_object	zend_object *	object
ANR	85224	DeclStmt									
ANR	85225	Decl							int	int	lineno
ANR	85226	Decl							int	int	frameno
ANR	85227	DeclStmt									
ANR	85228	Decl							zend_function	zend_function *	func
ANR	85229	DeclStmt									
ANR	85230	Decl							const char	const char *	function_name
ANR	85231	DeclStmt									
ANR	85232	Decl							const char	const char *	filename
ANR	85233	DeclStmt									
ANR	85234	Decl							zend_string	zend_string *	class_name
ANR	85235	DeclStmt									
ANR	85236	Decl							char	char *	call_type
ANR	85237	DeclStmt									
ANR	85238	Decl							const char	const char *	include_filename
ANR	85239	DeclStmt									
ANR	85240	Decl							zval	zval	arg_array
ANR	85241	DeclStmt									
ANR	85242	Decl							int	int	indent
ANR	85243	DeclStmt									
ANR	85244	Decl							zend_long	zend_long	options
ANR	85245	DeclStmt									
ANR	85246	Decl							zend_long	zend_long	limit
ANR	85247	DeclStmt									
ANR	85248	Decl							zend_bool	zend_bool	build_filename_arg
ANR	85249	DeclStmt									
ANR	85250	Decl							zend_execute_data	zend_execute_data *	prev_call
ANR	85251	DeclStmt									
ANR	85252	Decl							zend_execute_data	zend_execute_data *	prev
ANR	85253	Function	zend_fetch_debug_backtrace	2482:0:67688:74221							
ANR	85254	FunctionDef	"zend_fetch_debug_backtrace (zval * return_value , int skip_last , int options , int limit)"		85253	0					
ANR	85255	CompoundStatement		2483:0:67798:74221	85253	0					
ANR	85256	IdentifierDeclStatement	"zend_execute_data * ptr , * skip , * call = NULL ;"	2484:1:67801:67844	85253	0	True				
ANR	85257	IdentifierDecl	* ptr		85253	0					
ANR	85258	IdentifierDeclType	zend_execute_data *		85253	0					
ANR	85259	Identifier	ptr		85253	1					
ANR	85260	IdentifierDecl	* skip		85253	1					
ANR	85261	IdentifierDeclType	zend_execute_data *		85253	0					
ANR	85262	Identifier	skip		85253	1					
ANR	85263	IdentifierDecl	* call = NULL		85253	2					
ANR	85264	IdentifierDeclType	zend_execute_data *		85253	0					
ANR	85265	Identifier	call		85253	1					
ANR	85266	AssignmentExpression	* call = NULL		85253	2		=			
ANR	85267	Identifier	NULL		85253	0					
ANR	85268	Identifier	NULL		85253	1					
ANR	85269	IdentifierDeclStatement	zend_object * object ;	2485:1:67847:67866	85253	1	True				
ANR	85270	IdentifierDecl	* object		85253	0					
ANR	85271	IdentifierDeclType	zend_object *		85253	0					
ANR	85272	Identifier	object		85253	1					
ANR	85273	IdentifierDeclStatement	"int lineno , frameno = 0 ;"	2486:1:67869:67892	85253	2	True				
ANR	85274	IdentifierDecl	lineno		85253	0					
ANR	85275	IdentifierDeclType	int		85253	0					
ANR	85276	Identifier	lineno		85253	1					
ANR	85277	IdentifierDecl	frameno = 0		85253	1					
ANR	85278	IdentifierDeclType	int		85253	0					
ANR	85279	Identifier	frameno		85253	1					
ANR	85280	AssignmentExpression	frameno = 0		85253	2		=			
ANR	85281	Identifier	frameno		85253	0					
ANR	85282	PrimaryExpression	0		85253	1					
ANR	85283	IdentifierDeclStatement	zend_function * func ;	2487:1:67895:67914	85253	3	True				
ANR	85284	IdentifierDecl	* func		85253	0					
ANR	85285	IdentifierDeclType	zend_function *		85253	0					
ANR	85286	Identifier	func		85253	1					
ANR	85287	IdentifierDeclStatement	zend_string * function_name ;	2488:1:67917:67943	85253	4	True				
ANR	85288	IdentifierDecl	* function_name		85253	0					
ANR	85289	IdentifierDeclType	zend_string *		85253	0					
ANR	85290	Identifier	function_name		85253	1					
ANR	85291	IdentifierDeclStatement	zend_string * filename ;	2489:1:67946:67967	85253	5	True				
ANR	85292	IdentifierDecl	* filename		85253	0					
ANR	85293	IdentifierDeclType	zend_string *		85253	0					
ANR	85294	Identifier	filename		85253	1					
ANR	85295	IdentifierDeclStatement	zend_string * include_filename = NULL ;	2490:1:67970:68006	85253	6	True				
ANR	85296	IdentifierDecl	* include_filename = NULL		85253	0					
ANR	85297	IdentifierDeclType	zend_string *		85253	0					
ANR	85298	Identifier	include_filename		85253	1					
ANR	85299	AssignmentExpression	* include_filename = NULL		85253	2		=			
ANR	85300	Identifier	NULL		85253	0					
ANR	85301	Identifier	NULL		85253	1					
ANR	85302	IdentifierDeclStatement	zval stack_frame ;	2491:1:68009:68025	85253	7	True				
ANR	85303	IdentifierDecl	stack_frame		85253	0					
ANR	85304	IdentifierDeclType	zval		85253	0					
ANR	85305	Identifier	stack_frame		85253	1					
ANR	85306	ExpressionStatement	array_init ( return_value )	2493:1:68029:68053	85253	8	True				
ANR	85307	CallExpression	array_init ( return_value )		85253	0					
ANR	85308	Callee	array_init		85253	0					
ANR	85309	Identifier	array_init		85253	0					
ANR	85310	ArgumentList	return_value		85253	1					
ANR	85311	Argument	return_value		85253	0					
ANR	85312	Identifier	return_value		85253	0					
ANR	85313	IfStatement	if ( ! ( ptr = EG ( current_execute_data ) ) )		85253	9					
ANR	85314	Condition	! ( ptr = EG ( current_execute_data ) )	2495:5:68061:68093	85253	0	True				
ANR	85315	UnaryOperationExpression	! ( ptr = EG ( current_execute_data ) )		85253	0					
ANR	85316	UnaryOperator	!		85253	0					
ANR	85317	AssignmentExpression	ptr = EG ( current_execute_data )		85253	1		=			
ANR	85318	Identifier	ptr		85253	0					
ANR	85319	CallExpression	EG ( current_execute_data )		85253	1					
ANR	85320	Callee	EG		85253	0					
ANR	85321	Identifier	EG		85253	0					
ANR	85322	ArgumentList	current_execute_data		85253	1					
ANR	85323	Argument	current_execute_data		85253	0					
ANR	85324	Identifier	current_execute_data		85253	0					
ANR	85325	CompoundStatement		13:40:297:297	85253	1					
ANR	85326	ReturnStatement	return ;	2496:2:68100:68106	85253	0	True				
ANR	85327	IfStatement	if ( ! ptr -> func || ! ZEND_USER_CODE ( ptr -> func -> common . type ) )		85253	10					
ANR	85328	Condition	! ptr -> func || ! ZEND_USER_CODE ( ptr -> func -> common . type )	2499:5:68117:68169	85253	0	True				
ANR	85329	OrExpression	! ptr -> func || ! ZEND_USER_CODE ( ptr -> func -> common . type )		85253	0		||			
ANR	85330	UnaryOperationExpression	! ptr -> func		85253	0					
ANR	85331	UnaryOperator	!		85253	0					
ANR	85332	PtrMemberAccess	ptr -> func		85253	1					
ANR	85333	Identifier	ptr		85253	0					
ANR	85334	Identifier	func		85253	1					
ANR	85335	UnaryOperationExpression	! ZEND_USER_CODE ( ptr -> func -> common . type )		85253	1					
ANR	85336	UnaryOperator	!		85253	0					
ANR	85337	CallExpression	ZEND_USER_CODE ( ptr -> func -> common . type )		85253	1					
ANR	85338	Callee	ZEND_USER_CODE		85253	0					
ANR	85339	Identifier	ZEND_USER_CODE		85253	0					
ANR	85340	ArgumentList	ptr -> func -> common . type		85253	1					
ANR	85341	Argument	ptr -> func -> common . type		85253	0					
ANR	85342	MemberAccess	ptr -> func -> common . type		85253	0					
ANR	85343	PtrMemberAccess	ptr -> func -> common		85253	0					
ANR	85344	PtrMemberAccess	ptr -> func		85253	0					
ANR	85345	Identifier	ptr		85253	0					
ANR	85346	Identifier	func		85253	1					
ANR	85347	Identifier	common		85253	1					
ANR	85348	Identifier	type		85253	1					
ANR	85349	CompoundStatement		17:60:373:373	85253	1					
ANR	85350	ExpressionStatement	call = ptr	2500:2:68176:68186	85253	0	True				
ANR	85351	AssignmentExpression	call = ptr		85253	0		=			
ANR	85352	Identifier	call		85253	0					
ANR	85353	Identifier	ptr		85253	1					
ANR	85354	ExpressionStatement	ptr = ptr -> prev_execute_data	2501:2:68190:68218	85253	1	True				
ANR	85355	AssignmentExpression	ptr = ptr -> prev_execute_data		85253	0		=			
ANR	85356	Identifier	ptr		85253	0					
ANR	85357	PtrMemberAccess	ptr -> prev_execute_data		85253	1					
ANR	85358	Identifier	ptr		85253	0					
ANR	85359	Identifier	prev_execute_data		85253	1					
ANR	85360	IfStatement	if ( ptr )		85253	11					
ANR	85361	Condition	ptr	2504:5:68229:68231	85253	0	True				
ANR	85362	Identifier	ptr		85253	0					
ANR	85363	CompoundStatement		22:10:435:435	85253	1					
ANR	85364	IfStatement	if ( skip_last )		85253	0					
ANR	85365	Condition	skip_last	2505:6:68242:68250	85253	0	True				
ANR	85366	Identifier	skip_last		85253	0					
ANR	85367	CompoundStatement		23:17:454:454	85253	1					
ANR	85368	ExpressionStatement	call = ptr	2507:3:68290:68300	85253	0	True				
ANR	85369	AssignmentExpression	call = ptr		85253	0		=			
ANR	85370	Identifier	call		85253	0					
ANR	85371	Identifier	ptr		85253	1					
ANR	85372	ExpressionStatement	ptr = ptr -> prev_execute_data	2508:3:68305:68333	85253	1	True				
ANR	85373	AssignmentExpression	ptr = ptr -> prev_execute_data		85253	0		=			
ANR	85374	Identifier	ptr		85253	0					
ANR	85375	PtrMemberAccess	ptr -> prev_execute_data		85253	1					
ANR	85376	Identifier	ptr		85253	0					
ANR	85377	Identifier	prev_execute_data		85253	1					
ANR	85378	ElseStatement	else		85253	0					
ANR	85379	CompoundStatement		27:9:545:545	85253	0					
ANR	85380	IfStatement	if ( ptr -> func && ZEND_USER_CODE ( ptr -> func -> common . type ) && ( ptr -> opline -> opcode == ZEND_NEW ) )		85253	0					
ANR	85381	Condition	ptr -> func && ZEND_USER_CODE ( ptr -> func -> common . type ) && ( ptr -> opline -> opcode == ZEND_NEW )	2511:7:68385:68472	85253	0	True				
ANR	85382	AndExpression	ptr -> func && ZEND_USER_CODE ( ptr -> func -> common . type ) && ( ptr -> opline -> opcode == ZEND_NEW )		85253	0		&&			
ANR	85383	PtrMemberAccess	ptr -> func		85253	0					
ANR	85384	Identifier	ptr		85253	0					
ANR	85385	Identifier	func		85253	1					
ANR	85386	AndExpression	ZEND_USER_CODE ( ptr -> func -> common . type ) && ( ptr -> opline -> opcode == ZEND_NEW )		85253	1		&&			
ANR	85387	CallExpression	ZEND_USER_CODE ( ptr -> func -> common . type )		85253	0					
ANR	85388	Callee	ZEND_USER_CODE		85253	0					
ANR	85389	Identifier	ZEND_USER_CODE		85253	0					
ANR	85390	ArgumentList	ptr -> func -> common . type		85253	1					
ANR	85391	Argument	ptr -> func -> common . type		85253	0					
ANR	85392	MemberAccess	ptr -> func -> common . type		85253	0					
ANR	85393	PtrMemberAccess	ptr -> func -> common		85253	0					
ANR	85394	PtrMemberAccess	ptr -> func		85253	0					
ANR	85395	Identifier	ptr		85253	0					
ANR	85396	Identifier	func		85253	1					
ANR	85397	Identifier	common		85253	1					
ANR	85398	Identifier	type		85253	1					
ANR	85399	EqualityExpression	ptr -> opline -> opcode == ZEND_NEW		85253	1		==			
ANR	85400	PtrMemberAccess	ptr -> opline -> opcode		85253	0					
ANR	85401	PtrMemberAccess	ptr -> opline		85253	0					
ANR	85402	Identifier	ptr		85253	0					
ANR	85403	Identifier	opline		85253	1					
ANR	85404	Identifier	opcode		85253	1					
ANR	85405	Identifier	ZEND_NEW		85253	1					
ANR	85406	CompoundStatement		29:97:676:676	85253	1					
ANR	85407	ExpressionStatement	call = ptr	2512:4:68481:68491	85253	0	True				
ANR	85408	AssignmentExpression	call = ptr		85253	0		=			
ANR	85409	Identifier	call		85253	0					
ANR	85410	Identifier	ptr		85253	1					
ANR	85411	ExpressionStatement	ptr = ptr -> prev_execute_data	2513:4:68497:68525	85253	1	True				
ANR	85412	AssignmentExpression	ptr = ptr -> prev_execute_data		85253	0		=			
ANR	85413	Identifier	ptr		85253	0					
ANR	85414	PtrMemberAccess	ptr -> prev_execute_data		85253	1					
ANR	85415	Identifier	ptr		85253	0					
ANR	85416	Identifier	prev_execute_data		85253	1					
ANR	85417	IfStatement	if ( ! call )		85253	1					
ANR	85418	Condition	! call	2516:6:68542:68546	85253	0	True				
ANR	85419	UnaryOperationExpression	! call		85253	0					
ANR	85420	UnaryOperator	!		85253	0					
ANR	85421	Identifier	call		85253	1					
ANR	85422	CompoundStatement		34:13:750:750	85253	1					
ANR	85423	ExpressionStatement	call = ptr	2517:3:68554:68564	85253	0	True				
ANR	85424	AssignmentExpression	call = ptr		85253	0		=			
ANR	85425	Identifier	call		85253	0					
ANR	85426	Identifier	ptr		85253	1					
ANR	85427	ExpressionStatement	ptr = ptr -> prev_execute_data	2518:3:68569:68597	85253	1	True				
ANR	85428	AssignmentExpression	ptr = ptr -> prev_execute_data		85253	0		=			
ANR	85429	Identifier	ptr		85253	0					
ANR	85430	PtrMemberAccess	ptr -> prev_execute_data		85253	1					
ANR	85431	Identifier	ptr		85253	0					
ANR	85432	Identifier	prev_execute_data		85253	1					
ANR	85433	WhileStatement	while ( ptr && ( limit == 0 || frameno < limit ) )		85253	12					
ANR	85434	Condition	ptr && ( limit == 0 || frameno < limit )	2522:8:68615:68652	85253	0	True				
ANR	85435	AndExpression	ptr && ( limit == 0 || frameno < limit )		85253	0		&&			
ANR	85436	Identifier	ptr		85253	0					
ANR	85437	OrExpression	limit == 0 || frameno < limit		85253	1		||			
ANR	85438	EqualityExpression	limit == 0		85253	0		==			
ANR	85439	Identifier	limit		85253	0					
ANR	85440	PrimaryExpression	0		85253	1					
ANR	85441	RelationalExpression	frameno < limit		85253	1		<			
ANR	85442	Identifier	frameno		85253	0					
ANR	85443	Identifier	limit		85253	1					
ANR	85444	CompoundStatement		40:48:856:856	85253	1					
ANR	85445	ExpressionStatement	frameno ++	2523:2:68659:68668	85253	0	True				
ANR	85446	PostIncDecOperationExpression	frameno ++		85253	0					
ANR	85447	Identifier	frameno		85253	0					
ANR	85448	IncDec	++		85253	1					
ANR	85449	ExpressionStatement	array_init ( & stack_frame )	2524:2:68672:68696	85253	1	True				
ANR	85450	CallExpression	array_init ( & stack_frame )		85253	0					
ANR	85451	Callee	array_init		85253	0					
ANR	85452	Identifier	array_init		85253	0					
ANR	85453	ArgumentList	& stack_frame		85253	1					
ANR	85454	Argument	& stack_frame		85253	0					
ANR	85455	UnaryOperationExpression	& stack_frame		85253	0					
ANR	85456	UnaryOperator	&		85253	0					
ANR	85457	Identifier	stack_frame		85253	1					
ANR	85458	ExpressionStatement	ptr = zend_generator_check_placeholder_frame ( ptr )	2526:2:68701:68750	85253	2	True				
ANR	85459	AssignmentExpression	ptr = zend_generator_check_placeholder_frame ( ptr )		85253	0		=			
ANR	85460	Identifier	ptr		85253	0					
ANR	85461	CallExpression	zend_generator_check_placeholder_frame ( ptr )		85253	1					
ANR	85462	Callee	zend_generator_check_placeholder_frame		85253	0					
ANR	85463	Identifier	zend_generator_check_placeholder_frame		85253	0					
ANR	85464	ArgumentList	ptr		85253	1					
ANR	85465	Argument	ptr		85253	0					
ANR	85466	Identifier	ptr		85253	0					
ANR	85467	ExpressionStatement	skip = ptr	2528:2:68755:68765	85253	3	True				
ANR	85468	AssignmentExpression	skip = ptr		85253	0		=			
ANR	85469	Identifier	skip		85253	0					
ANR	85470	Identifier	ptr		85253	1					
ANR	85471	IfStatement	if ( ( ! skip -> func || ! ZEND_USER_CODE ( skip -> func -> common . type ) ) && skip -> prev_execute_data && skip -> prev_execute_data -> func && ZEND_USER_CODE ( skip -> prev_execute_data -> func -> common . type ) && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_ICALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_UCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL_BY_NAME && skip -> prev_execute_data -> opline -> opcode != ZEND_INCLUDE_OR_EVAL )		85253	4					
ANR	85472	Condition	( ! skip -> func || ! ZEND_USER_CODE ( skip -> func -> common . type ) ) && skip -> prev_execute_data && skip -> prev_execute_data -> func && ZEND_USER_CODE ( skip -> prev_execute_data -> func -> common . type ) && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_ICALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_UCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL_BY_NAME && skip -> prev_execute_data -> opline -> opcode != ZEND_INCLUDE_OR_EVAL	2530:6:68803:69344	85253	0	True				
ANR	85473	AndExpression	( ! skip -> func || ! ZEND_USER_CODE ( skip -> func -> common . type ) ) && skip -> prev_execute_data && skip -> prev_execute_data -> func && ZEND_USER_CODE ( skip -> prev_execute_data -> func -> common . type ) && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_ICALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_UCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL_BY_NAME && skip -> prev_execute_data -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		85253	0		&&			
ANR	85474	OrExpression	! skip -> func || ! ZEND_USER_CODE ( skip -> func -> common . type )		85253	0		||			
ANR	85475	UnaryOperationExpression	! skip -> func		85253	0					
ANR	85476	UnaryOperator	!		85253	0					
ANR	85477	PtrMemberAccess	skip -> func		85253	1					
ANR	85478	Identifier	skip		85253	0					
ANR	85479	Identifier	func		85253	1					
ANR	85480	UnaryOperationExpression	! ZEND_USER_CODE ( skip -> func -> common . type )		85253	1					
ANR	85481	UnaryOperator	!		85253	0					
ANR	85482	CallExpression	ZEND_USER_CODE ( skip -> func -> common . type )		85253	1					
ANR	85483	Callee	ZEND_USER_CODE		85253	0					
ANR	85484	Identifier	ZEND_USER_CODE		85253	0					
ANR	85485	ArgumentList	skip -> func -> common . type		85253	1					
ANR	85486	Argument	skip -> func -> common . type		85253	0					
ANR	85487	MemberAccess	skip -> func -> common . type		85253	0					
ANR	85488	PtrMemberAccess	skip -> func -> common		85253	0					
ANR	85489	PtrMemberAccess	skip -> func		85253	0					
ANR	85490	Identifier	skip		85253	0					
ANR	85491	Identifier	func		85253	1					
ANR	85492	Identifier	common		85253	1					
ANR	85493	Identifier	type		85253	1					
ANR	85494	AndExpression	skip -> prev_execute_data && skip -> prev_execute_data -> func && ZEND_USER_CODE ( skip -> prev_execute_data -> func -> common . type ) && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_ICALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_UCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL_BY_NAME && skip -> prev_execute_data -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		85253	1		&&			
ANR	85495	PtrMemberAccess	skip -> prev_execute_data		85253	0					
ANR	85496	Identifier	skip		85253	0					
ANR	85497	Identifier	prev_execute_data		85253	1					
ANR	85498	AndExpression	skip -> prev_execute_data -> func && ZEND_USER_CODE ( skip -> prev_execute_data -> func -> common . type ) && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_ICALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_UCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL_BY_NAME && skip -> prev_execute_data -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		85253	1		&&			
ANR	85499	PtrMemberAccess	skip -> prev_execute_data -> func		85253	0					
ANR	85500	PtrMemberAccess	skip -> prev_execute_data		85253	0					
ANR	85501	Identifier	skip		85253	0					
ANR	85502	Identifier	prev_execute_data		85253	1					
ANR	85503	Identifier	func		85253	1					
ANR	85504	AndExpression	ZEND_USER_CODE ( skip -> prev_execute_data -> func -> common . type ) && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_ICALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_UCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL_BY_NAME && skip -> prev_execute_data -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		85253	1		&&			
ANR	85505	CallExpression	ZEND_USER_CODE ( skip -> prev_execute_data -> func -> common . type )		85253	0					
ANR	85506	Callee	ZEND_USER_CODE		85253	0					
ANR	85507	Identifier	ZEND_USER_CODE		85253	0					
ANR	85508	ArgumentList	skip -> prev_execute_data -> func -> common . type		85253	1					
ANR	85509	Argument	skip -> prev_execute_data -> func -> common . type		85253	0					
ANR	85510	MemberAccess	skip -> prev_execute_data -> func -> common . type		85253	0					
ANR	85511	PtrMemberAccess	skip -> prev_execute_data -> func -> common		85253	0					
ANR	85512	PtrMemberAccess	skip -> prev_execute_data -> func		85253	0					
ANR	85513	PtrMemberAccess	skip -> prev_execute_data		85253	0					
ANR	85514	Identifier	skip		85253	0					
ANR	85515	Identifier	prev_execute_data		85253	1					
ANR	85516	Identifier	func		85253	1					
ANR	85517	Identifier	common		85253	1					
ANR	85518	Identifier	type		85253	1					
ANR	85519	AndExpression	skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_ICALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_UCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL_BY_NAME && skip -> prev_execute_data -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		85253	1		&&			
ANR	85520	EqualityExpression	skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL		85253	0		!=			
ANR	85521	PtrMemberAccess	skip -> prev_execute_data -> opline -> opcode		85253	0					
ANR	85522	PtrMemberAccess	skip -> prev_execute_data -> opline		85253	0					
ANR	85523	PtrMemberAccess	skip -> prev_execute_data		85253	0					
ANR	85524	Identifier	skip		85253	0					
ANR	85525	Identifier	prev_execute_data		85253	1					
ANR	85526	Identifier	opline		85253	1					
ANR	85527	Identifier	opcode		85253	1					
ANR	85528	Identifier	ZEND_DO_FCALL		85253	1					
ANR	85529	AndExpression	skip -> prev_execute_data -> opline -> opcode != ZEND_DO_ICALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_UCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL_BY_NAME && skip -> prev_execute_data -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		85253	1		&&			
ANR	85530	EqualityExpression	skip -> prev_execute_data -> opline -> opcode != ZEND_DO_ICALL		85253	0		!=			
ANR	85531	PtrMemberAccess	skip -> prev_execute_data -> opline -> opcode		85253	0					
ANR	85532	PtrMemberAccess	skip -> prev_execute_data -> opline		85253	0					
ANR	85533	PtrMemberAccess	skip -> prev_execute_data		85253	0					
ANR	85534	Identifier	skip		85253	0					
ANR	85535	Identifier	prev_execute_data		85253	1					
ANR	85536	Identifier	opline		85253	1					
ANR	85537	Identifier	opcode		85253	1					
ANR	85538	Identifier	ZEND_DO_ICALL		85253	1					
ANR	85539	AndExpression	skip -> prev_execute_data -> opline -> opcode != ZEND_DO_UCALL && skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL_BY_NAME && skip -> prev_execute_data -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		85253	1		&&			
ANR	85540	EqualityExpression	skip -> prev_execute_data -> opline -> opcode != ZEND_DO_UCALL		85253	0		!=			
ANR	85541	PtrMemberAccess	skip -> prev_execute_data -> opline -> opcode		85253	0					
ANR	85542	PtrMemberAccess	skip -> prev_execute_data -> opline		85253	0					
ANR	85543	PtrMemberAccess	skip -> prev_execute_data		85253	0					
ANR	85544	Identifier	skip		85253	0					
ANR	85545	Identifier	prev_execute_data		85253	1					
ANR	85546	Identifier	opline		85253	1					
ANR	85547	Identifier	opcode		85253	1					
ANR	85548	Identifier	ZEND_DO_UCALL		85253	1					
ANR	85549	AndExpression	skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL_BY_NAME && skip -> prev_execute_data -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		85253	1		&&			
ANR	85550	EqualityExpression	skip -> prev_execute_data -> opline -> opcode != ZEND_DO_FCALL_BY_NAME		85253	0		!=			
ANR	85551	PtrMemberAccess	skip -> prev_execute_data -> opline -> opcode		85253	0					
ANR	85552	PtrMemberAccess	skip -> prev_execute_data -> opline		85253	0					
ANR	85553	PtrMemberAccess	skip -> prev_execute_data		85253	0					
ANR	85554	Identifier	skip		85253	0					
ANR	85555	Identifier	prev_execute_data		85253	1					
ANR	85556	Identifier	opline		85253	1					
ANR	85557	Identifier	opcode		85253	1					
ANR	85558	Identifier	ZEND_DO_FCALL_BY_NAME		85253	1					
ANR	85559	EqualityExpression	skip -> prev_execute_data -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		85253	1		!=			
ANR	85560	PtrMemberAccess	skip -> prev_execute_data -> opline -> opcode		85253	0					
ANR	85561	PtrMemberAccess	skip -> prev_execute_data -> opline		85253	0					
ANR	85562	PtrMemberAccess	skip -> prev_execute_data		85253	0					
ANR	85563	Identifier	skip		85253	0					
ANR	85564	Identifier	prev_execute_data		85253	1					
ANR	85565	Identifier	opline		85253	1					
ANR	85566	Identifier	opcode		85253	1					
ANR	85567	Identifier	ZEND_INCLUDE_OR_EVAL		85253	1					
ANR	85568	CompoundStatement		56:71:1548:1548	85253	1					
ANR	85569	ExpressionStatement	skip = skip -> prev_execute_data	2539:3:69352:69382	85253	0	True				
ANR	85570	AssignmentExpression	skip = skip -> prev_execute_data		85253	0		=			
ANR	85571	Identifier	skip		85253	0					
ANR	85572	PtrMemberAccess	skip -> prev_execute_data		85253	1					
ANR	85573	Identifier	skip		85253	0					
ANR	85574	Identifier	prev_execute_data		85253	1					
ANR	85575	IfStatement	if ( skip -> func && ZEND_USER_CODE ( skip -> func -> common . type ) )		85253	5					
ANR	85576	Condition	skip -> func && ZEND_USER_CODE ( skip -> func -> common . type )	2542:6:69395:69447	85253	0	True				
ANR	85577	AndExpression	skip -> func && ZEND_USER_CODE ( skip -> func -> common . type )		85253	0		&&			
ANR	85578	PtrMemberAccess	skip -> func		85253	0					
ANR	85579	Identifier	skip		85253	0					
ANR	85580	Identifier	func		85253	1					
ANR	85581	CallExpression	ZEND_USER_CODE ( skip -> func -> common . type )		85253	1					
ANR	85582	Callee	ZEND_USER_CODE		85253	0					
ANR	85583	Identifier	ZEND_USER_CODE		85253	0					
ANR	85584	ArgumentList	skip -> func -> common . type		85253	1					
ANR	85585	Argument	skip -> func -> common . type		85253	0					
ANR	85586	MemberAccess	skip -> func -> common . type		85253	0					
ANR	85587	PtrMemberAccess	skip -> func -> common		85253	0					
ANR	85588	PtrMemberAccess	skip -> func		85253	0					
ANR	85589	Identifier	skip		85253	0					
ANR	85590	Identifier	func		85253	1					
ANR	85591	Identifier	common		85253	1					
ANR	85592	Identifier	type		85253	1					
ANR	85593	CompoundStatement		60:61:1651:1651	85253	1					
ANR	85594	ExpressionStatement	filename = skip -> func -> op_array . filename	2543:3:69455:69495	85253	0	True				
ANR	85595	AssignmentExpression	filename = skip -> func -> op_array . filename		85253	0		=			
ANR	85596	Identifier	filename		85253	0					
ANR	85597	MemberAccess	skip -> func -> op_array . filename		85253	1					
ANR	85598	PtrMemberAccess	skip -> func -> op_array		85253	0					
ANR	85599	PtrMemberAccess	skip -> func		85253	0					
ANR	85600	Identifier	skip		85253	0					
ANR	85601	Identifier	func		85253	1					
ANR	85602	Identifier	op_array		85253	1					
ANR	85603	Identifier	filename		85253	1					
ANR	85604	IfStatement	if ( skip -> opline -> opcode == ZEND_HANDLE_EXCEPTION )		85253	1					
ANR	85605	Condition	skip -> opline -> opcode == ZEND_HANDLE_EXCEPTION	2544:7:69504:69548	85253	0	True				
ANR	85606	EqualityExpression	skip -> opline -> opcode == ZEND_HANDLE_EXCEPTION		85253	0		==			
ANR	85607	PtrMemberAccess	skip -> opline -> opcode		85253	0					
ANR	85608	PtrMemberAccess	skip -> opline		85253	0					
ANR	85609	Identifier	skip		85253	0					
ANR	85610	Identifier	opline		85253	1					
ANR	85611	Identifier	opcode		85253	1					
ANR	85612	Identifier	ZEND_HANDLE_EXCEPTION		85253	1					
ANR	85613	CompoundStatement		62:54:1752:1752	85253	1					
ANR	85614	IfStatement	if ( EG ( opline_before_exception ) )		85253	0					
ANR	85615	Condition	EG ( opline_before_exception )	2545:8:69561:69587	85253	0	True				
ANR	85616	CallExpression	EG ( opline_before_exception )		85253	0					
ANR	85617	Callee	EG		85253	0					
ANR	85618	Identifier	EG		85253	0					
ANR	85619	ArgumentList	opline_before_exception		85253	1					
ANR	85620	Argument	opline_before_exception		85253	0					
ANR	85621	Identifier	opline_before_exception		85253	0					
ANR	85622	CompoundStatement		63:37:1791:1791	85253	1					
ANR	85623	ExpressionStatement	lineno = EG ( opline_before_exception ) -> lineno	2546:5:69597:69641	85253	0	True				
ANR	85624	AssignmentExpression	lineno = EG ( opline_before_exception ) -> lineno		85253	0		=			
ANR	85625	Identifier	lineno		85253	0					
ANR	85626	PtrMemberAccess	EG ( opline_before_exception ) -> lineno		85253	1					
ANR	85627	CallExpression	EG ( opline_before_exception )		85253	0					
ANR	85628	Callee	EG		85253	0					
ANR	85629	Identifier	EG		85253	0					
ANR	85630	ArgumentList	opline_before_exception		85253	1					
ANR	85631	Argument	opline_before_exception		85253	0					
ANR	85632	Identifier	opline_before_exception		85253	0					
ANR	85633	Identifier	lineno		85253	1					
ANR	85634	ElseStatement	else		85253	0					
ANR	85635	CompoundStatement		65:11:1855:1855	85253	0					
ANR	85636	ExpressionStatement	lineno = skip -> func -> op_array . line_end	2548:5:69661:69699	85253	0	True				
ANR	85637	AssignmentExpression	lineno = skip -> func -> op_array . line_end		85253	0		=			
ANR	85638	Identifier	lineno		85253	0					
ANR	85639	MemberAccess	skip -> func -> op_array . line_end		85253	1					
ANR	85640	PtrMemberAccess	skip -> func -> op_array		85253	0					
ANR	85641	PtrMemberAccess	skip -> func		85253	0					
ANR	85642	Identifier	skip		85253	0					
ANR	85643	Identifier	func		85253	1					
ANR	85644	Identifier	op_array		85253	1					
ANR	85645	Identifier	line_end		85253	1					
ANR	85646	ElseStatement	else		85253	0					
ANR	85647	CompoundStatement		68:10:1918:1918	85253	0					
ANR	85648	ExpressionStatement	lineno = skip -> opline -> lineno	2551:4:69723:69752	85253	0	True				
ANR	85649	AssignmentExpression	lineno = skip -> opline -> lineno		85253	0		=			
ANR	85650	Identifier	lineno		85253	0					
ANR	85651	PtrMemberAccess	skip -> opline -> lineno		85253	1					
ANR	85652	PtrMemberAccess	skip -> opline		85253	0					
ANR	85653	Identifier	skip		85253	0					
ANR	85654	Identifier	opline		85253	1					
ANR	85655	Identifier	lineno		85253	1					
ANR	85656	ExpressionStatement	"add_assoc_str_ex ( & stack_frame , ""file"" , sizeof ( ""file"" ) - 1 , zend_string_copy ( filename ) )"	2553:3:69762:69846	85253	2	True				
ANR	85657	CallExpression	"add_assoc_str_ex ( & stack_frame , ""file"" , sizeof ( ""file"" ) - 1 , zend_string_copy ( filename ) )"		85253	0					
ANR	85658	Callee	add_assoc_str_ex		85253	0					
ANR	85659	Identifier	add_assoc_str_ex		85253	0					
ANR	85660	ArgumentList	& stack_frame		85253	1					
ANR	85661	Argument	& stack_frame		85253	0					
ANR	85662	UnaryOperationExpression	& stack_frame		85253	0					
ANR	85663	UnaryOperator	&		85253	0					
ANR	85664	Identifier	stack_frame		85253	1					
ANR	85665	Argument	"""file"""		85253	1					
ANR	85666	PrimaryExpression	"""file"""		85253	0					
ANR	85667	Argument	"sizeof ( ""file"" ) - 1"		85253	2					
ANR	85668	AdditiveExpression	"sizeof ( ""file"" ) - 1"		85253	0		-			
ANR	85669	SizeofExpression	"sizeof ( ""file"" )"		85253	0					
ANR	85670	Sizeof	sizeof		85253	0					
ANR	85671	PrimaryExpression	"""file"""		85253	1					
ANR	85672	PrimaryExpression	1		85253	1					
ANR	85673	Argument	zend_string_copy ( filename )		85253	3					
ANR	85674	CallExpression	zend_string_copy ( filename )		85253	0					
ANR	85675	Callee	zend_string_copy		85253	0					
ANR	85676	Identifier	zend_string_copy		85253	0					
ANR	85677	ArgumentList	filename		85253	1					
ANR	85678	Argument	filename		85253	0					
ANR	85679	Identifier	filename		85253	0					
ANR	85680	ExpressionStatement	"add_assoc_long_ex ( & stack_frame , ""line"" , sizeof ( ""line"" ) - 1 , lineno )"	2554:3:69851:69916	85253	3	True				
ANR	85681	CallExpression	"add_assoc_long_ex ( & stack_frame , ""line"" , sizeof ( ""line"" ) - 1 , lineno )"		85253	0					
ANR	85682	Callee	add_assoc_long_ex		85253	0					
ANR	85683	Identifier	add_assoc_long_ex		85253	0					
ANR	85684	ArgumentList	& stack_frame		85253	1					
ANR	85685	Argument	& stack_frame		85253	0					
ANR	85686	UnaryOperationExpression	& stack_frame		85253	0					
ANR	85687	UnaryOperator	&		85253	0					
ANR	85688	Identifier	stack_frame		85253	1					
ANR	85689	Argument	"""line"""		85253	1					
ANR	85690	PrimaryExpression	"""line"""		85253	0					
ANR	85691	Argument	"sizeof ( ""line"" ) - 1"		85253	2					
ANR	85692	AdditiveExpression	"sizeof ( ""line"" ) - 1"		85253	0		-			
ANR	85693	SizeofExpression	"sizeof ( ""line"" )"		85253	0					
ANR	85694	Sizeof	sizeof		85253	0					
ANR	85695	PrimaryExpression	"""line"""		85253	1					
ANR	85696	PrimaryExpression	1		85253	1					
ANR	85697	Argument	lineno		85253	3					
ANR	85698	Identifier	lineno		85253	0					
ANR	85699	ElseStatement	else		85253	0					
ANR	85700	CompoundStatement		79:3:2420:2469	85253	0					
ANR	85701	IdentifierDeclStatement	zend_execute_data * prev_call = skip ;	2560:3:70179:70214	85253	0	True				
ANR	85702	IdentifierDecl	* prev_call = skip		85253	0					
ANR	85703	IdentifierDeclType	zend_execute_data *		85253	0					
ANR	85704	Identifier	prev_call		85253	1					
ANR	85705	AssignmentExpression	* prev_call = skip		85253	2		=			
ANR	85706	Identifier	skip		85253	0					
ANR	85707	Identifier	skip		85253	1					
ANR	85708	IdentifierDeclStatement	zend_execute_data * prev = skip -> prev_execute_data ;	2561:3:70219:70268	85253	1	True				
ANR	85709	IdentifierDecl	* prev = skip -> prev_execute_data		85253	0					
ANR	85710	IdentifierDeclType	zend_execute_data *		85253	0					
ANR	85711	Identifier	prev		85253	1					
ANR	85712	AssignmentExpression	* prev = skip -> prev_execute_data		85253	2		=			
ANR	85713	Identifier	prev		85253	0					
ANR	85714	PtrMemberAccess	skip -> prev_execute_data		85253	1					
ANR	85715	Identifier	skip		85253	0					
ANR	85716	Identifier	prev_execute_data		85253	1					
ANR	85717	WhileStatement	while ( prev )		85253	2					
ANR	85718	Condition	prev	2563:10:70281:70284	85253	0	True				
ANR	85719	Identifier	prev		85253	0					
ANR	85720	CompoundStatement		81:16:2488:2488	85253	1					
ANR	85721	IfStatement	if ( prev_call && prev_call -> func && ! ZEND_USER_CODE ( prev_call -> func -> common . type ) && ! ( prev_call -> func -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) )		85253	0					
ANR	85722	Condition	prev_call && prev_call -> func && ! ZEND_USER_CODE ( prev_call -> func -> common . type ) && ! ( prev_call -> func -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE )	2564:8:70297:70461	85253	0	True				
ANR	85723	AndExpression	prev_call && prev_call -> func && ! ZEND_USER_CODE ( prev_call -> func -> common . type ) && ! ( prev_call -> func -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE )		85253	0		&&			
ANR	85724	Identifier	prev_call		85253	0					
ANR	85725	AndExpression	prev_call -> func && ! ZEND_USER_CODE ( prev_call -> func -> common . type ) && ! ( prev_call -> func -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE )		85253	1		&&			
ANR	85726	PtrMemberAccess	prev_call -> func		85253	0					
ANR	85727	Identifier	prev_call		85253	0					
ANR	85728	Identifier	func		85253	1					
ANR	85729	AndExpression	! ZEND_USER_CODE ( prev_call -> func -> common . type ) && ! ( prev_call -> func -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE )		85253	1		&&			
ANR	85730	UnaryOperationExpression	! ZEND_USER_CODE ( prev_call -> func -> common . type )		85253	0					
ANR	85731	UnaryOperator	!		85253	0					
ANR	85732	CallExpression	ZEND_USER_CODE ( prev_call -> func -> common . type )		85253	1					
ANR	85733	Callee	ZEND_USER_CODE		85253	0					
ANR	85734	Identifier	ZEND_USER_CODE		85253	0					
ANR	85735	ArgumentList	prev_call -> func -> common . type		85253	1					
ANR	85736	Argument	prev_call -> func -> common . type		85253	0					
ANR	85737	MemberAccess	prev_call -> func -> common . type		85253	0					
ANR	85738	PtrMemberAccess	prev_call -> func -> common		85253	0					
ANR	85739	PtrMemberAccess	prev_call -> func		85253	0					
ANR	85740	Identifier	prev_call		85253	0					
ANR	85741	Identifier	func		85253	1					
ANR	85742	Identifier	common		85253	1					
ANR	85743	Identifier	type		85253	1					
ANR	85744	UnaryOperationExpression	! ( prev_call -> func -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE )		85253	1					
ANR	85745	UnaryOperator	!		85253	0					
ANR	85746	BitAndExpression	prev_call -> func -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE		85253	1		&			
ANR	85747	MemberAccess	prev_call -> func -> common . fn_flags		85253	0					
ANR	85748	PtrMemberAccess	prev_call -> func -> common		85253	0					
ANR	85749	PtrMemberAccess	prev_call -> func		85253	0					
ANR	85750	Identifier	prev_call		85253	0					
ANR	85751	Identifier	func		85253	1					
ANR	85752	Identifier	common		85253	1					
ANR	85753	Identifier	fn_flags		85253	1					
ANR	85754	Identifier	ZEND_ACC_CALL_VIA_TRAMPOLINE		85253	1					
ANR	85755	CompoundStatement		85:73:2665:2665	85253	1					
ANR	85756	BreakStatement	break ;	2568:5:70471:70476	85253	0	True				
ANR	85757	IfStatement	if ( prev -> func && ZEND_USER_CODE ( prev -> func -> common . type ) )		85253	1					
ANR	85758	Condition	prev -> func && ZEND_USER_CODE ( prev -> func -> common . type )	2570:8:70492:70544	85253	0	True				
ANR	85759	AndExpression	prev -> func && ZEND_USER_CODE ( prev -> func -> common . type )		85253	0		&&			
ANR	85760	PtrMemberAccess	prev -> func		85253	0					
ANR	85761	Identifier	prev		85253	0					
ANR	85762	Identifier	func		85253	1					
ANR	85763	CallExpression	ZEND_USER_CODE ( prev -> func -> common . type )		85253	1					
ANR	85764	Callee	ZEND_USER_CODE		85253	0					
ANR	85765	Identifier	ZEND_USER_CODE		85253	0					
ANR	85766	ArgumentList	prev -> func -> common . type		85253	1					
ANR	85767	Argument	prev -> func -> common . type		85253	0					
ANR	85768	MemberAccess	prev -> func -> common . type		85253	0					
ANR	85769	PtrMemberAccess	prev -> func -> common		85253	0					
ANR	85770	PtrMemberAccess	prev -> func		85253	0					
ANR	85771	Identifier	prev		85253	0					
ANR	85772	Identifier	func		85253	1					
ANR	85773	Identifier	common		85253	1					
ANR	85774	Identifier	type		85253	1					
ANR	85775	CompoundStatement		88:63:2748:2748	85253	1					
ANR	85776	ExpressionStatement	"add_assoc_str_ex ( & stack_frame , ""file"" , sizeof ( ""file"" ) - 1 , zend_string_copy ( prev -> func -> op_array . filename ) )"	2571:5:70554:70659	85253	0	True				
ANR	85777	CallExpression	"add_assoc_str_ex ( & stack_frame , ""file"" , sizeof ( ""file"" ) - 1 , zend_string_copy ( prev -> func -> op_array . filename ) )"		85253	0					
ANR	85778	Callee	add_assoc_str_ex		85253	0					
ANR	85779	Identifier	add_assoc_str_ex		85253	0					
ANR	85780	ArgumentList	& stack_frame		85253	1					
ANR	85781	Argument	& stack_frame		85253	0					
ANR	85782	UnaryOperationExpression	& stack_frame		85253	0					
ANR	85783	UnaryOperator	&		85253	0					
ANR	85784	Identifier	stack_frame		85253	1					
ANR	85785	Argument	"""file"""		85253	1					
ANR	85786	PrimaryExpression	"""file"""		85253	0					
ANR	85787	Argument	"sizeof ( ""file"" ) - 1"		85253	2					
ANR	85788	AdditiveExpression	"sizeof ( ""file"" ) - 1"		85253	0		-			
ANR	85789	SizeofExpression	"sizeof ( ""file"" )"		85253	0					
ANR	85790	Sizeof	sizeof		85253	0					
ANR	85791	PrimaryExpression	"""file"""		85253	1					
ANR	85792	PrimaryExpression	1		85253	1					
ANR	85793	Argument	zend_string_copy ( prev -> func -> op_array . filename )		85253	3					
ANR	85794	CallExpression	zend_string_copy ( prev -> func -> op_array . filename )		85253	0					
ANR	85795	Callee	zend_string_copy		85253	0					
ANR	85796	Identifier	zend_string_copy		85253	0					
ANR	85797	ArgumentList	prev -> func -> op_array . filename		85253	1					
ANR	85798	Argument	prev -> func -> op_array . filename		85253	0					
ANR	85799	MemberAccess	prev -> func -> op_array . filename		85253	0					
ANR	85800	PtrMemberAccess	prev -> func -> op_array		85253	0					
ANR	85801	PtrMemberAccess	prev -> func		85253	0					
ANR	85802	Identifier	prev		85253	0					
ANR	85803	Identifier	func		85253	1					
ANR	85804	Identifier	op_array		85253	1					
ANR	85805	Identifier	filename		85253	1					
ANR	85806	ExpressionStatement	"add_assoc_long_ex ( & stack_frame , ""line"" , sizeof ( ""line"" ) - 1 , prev -> opline -> lineno )"	2572:5:70666:70745	85253	1	True				
ANR	85807	CallExpression	"add_assoc_long_ex ( & stack_frame , ""line"" , sizeof ( ""line"" ) - 1 , prev -> opline -> lineno )"		85253	0					
ANR	85808	Callee	add_assoc_long_ex		85253	0					
ANR	85809	Identifier	add_assoc_long_ex		85253	0					
ANR	85810	ArgumentList	& stack_frame		85253	1					
ANR	85811	Argument	& stack_frame		85253	0					
ANR	85812	UnaryOperationExpression	& stack_frame		85253	0					
ANR	85813	UnaryOperator	&		85253	0					
ANR	85814	Identifier	stack_frame		85253	1					
ANR	85815	Argument	"""line"""		85253	1					
ANR	85816	PrimaryExpression	"""line"""		85253	0					
ANR	85817	Argument	"sizeof ( ""line"" ) - 1"		85253	2					
ANR	85818	AdditiveExpression	"sizeof ( ""line"" ) - 1"		85253	0		-			
ANR	85819	SizeofExpression	"sizeof ( ""line"" )"		85253	0					
ANR	85820	Sizeof	sizeof		85253	0					
ANR	85821	PrimaryExpression	"""line"""		85253	1					
ANR	85822	PrimaryExpression	1		85253	1					
ANR	85823	Argument	prev -> opline -> lineno		85253	3					
ANR	85824	PtrMemberAccess	prev -> opline -> lineno		85253	0					
ANR	85825	PtrMemberAccess	prev -> opline		85253	0					
ANR	85826	Identifier	prev		85253	0					
ANR	85827	Identifier	opline		85253	1					
ANR	85828	Identifier	lineno		85253	1					
ANR	85829	BreakStatement	break ;	2573:5:70752:70757	85253	2	True				
ANR	85830	ExpressionStatement	prev_call = prev	2575:4:70769:70785	85253	2	True				
ANR	85831	AssignmentExpression	prev_call = prev		85253	0		=			
ANR	85832	Identifier	prev_call		85253	0					
ANR	85833	Identifier	prev		85253	1					
ANR	85834	ExpressionStatement	prev = prev -> prev_execute_data	2576:4:70791:70821	85253	3	True				
ANR	85835	AssignmentExpression	prev = prev -> prev_execute_data		85253	0		=			
ANR	85836	Identifier	prev		85253	0					
ANR	85837	PtrMemberAccess	prev -> prev_execute_data		85253	1					
ANR	85838	Identifier	prev		85253	0					
ANR	85839	Identifier	prev_execute_data		85253	1					
ANR	85840	ExpressionStatement	filename = NULL	2578:3:70831:70846	85253	3	True				
ANR	85841	AssignmentExpression	filename = NULL		85253	0		=			
ANR	85842	Identifier	filename		85253	0					
ANR	85843	Identifier	NULL		85253	1					
ANR	85844	ExpressionStatement	object = call ? Z_OBJ ( call -> This ) : NULL	2582:2:70915:70955	85253	6	True				
ANR	85845	AssignmentExpression	object = call ? Z_OBJ ( call -> This ) : NULL		85253	0		=			
ANR	85846	Identifier	object		85253	0					
ANR	85847	ConditionalExpression	call ? Z_OBJ ( call -> This ) : NULL		85253	1					
ANR	85848	Condition	call		85253	0					
ANR	85849	Identifier	call		85253	0					
ANR	85850	CallExpression	Z_OBJ ( call -> This )		85253	1					
ANR	85851	Callee	Z_OBJ		85253	0					
ANR	85852	Identifier	Z_OBJ		85253	0					
ANR	85853	ArgumentList	call -> This		85253	1					
ANR	85854	Argument	call -> This		85253	0					
ANR	85855	PtrMemberAccess	call -> This		85253	0					
ANR	85856	Identifier	call		85253	0					
ANR	85857	Identifier	This		85253	1					
ANR	85858	Identifier	NULL		85253	2					
ANR	85859	IfStatement	if ( call && call -> func )		85253	7					
ANR	85860	Condition	call && call -> func	2584:6:70964:70981	85253	0	True				
ANR	85861	AndExpression	call && call -> func		85253	0		&&			
ANR	85862	Identifier	call		85253	0					
ANR	85863	PtrMemberAccess	call -> func		85253	1					
ANR	85864	Identifier	call		85253	0					
ANR	85865	Identifier	func		85253	1					
ANR	85866	CompoundStatement		102:26:3185:3185	85253	1					
ANR	85867	ExpressionStatement	func = call -> func	2585:3:70989:71006	85253	0	True				
ANR	85868	AssignmentExpression	func = call -> func		85253	0		=			
ANR	85869	Identifier	func		85253	0					
ANR	85870	PtrMemberAccess	call -> func		85253	1					
ANR	85871	Identifier	call		85253	0					
ANR	85872	Identifier	func		85253	1					
ANR	85873	ExpressionStatement	"function_name = ( func -> common . scope && func -> common . scope -> trait_aliases ) ? zend_resolve_method_name ( ( object ? object -> ce : func -> common . scope ) , func ) : func -> common . function_name"	2586:3:71011:71224	85253	1	True				
ANR	85874	AssignmentExpression	"function_name = ( func -> common . scope && func -> common . scope -> trait_aliases ) ? zend_resolve_method_name ( ( object ? object -> ce : func -> common . scope ) , func ) : func -> common . function_name"		85253	0		=			
ANR	85875	Identifier	function_name		85253	0					
ANR	85876	ConditionalExpression	"( func -> common . scope && func -> common . scope -> trait_aliases ) ? zend_resolve_method_name ( ( object ? object -> ce : func -> common . scope ) , func ) : func -> common . function_name"		85253	1					
ANR	85877	Condition	func -> common . scope && func -> common . scope -> trait_aliases		85253	0					
ANR	85878	AndExpression	func -> common . scope && func -> common . scope -> trait_aliases		85253	0		&&			
ANR	85879	MemberAccess	func -> common . scope		85253	0					
ANR	85880	PtrMemberAccess	func -> common		85253	0					
ANR	85881	Identifier	func		85253	0					
ANR	85882	Identifier	common		85253	1					
ANR	85883	Identifier	scope		85253	1					
ANR	85884	PtrMemberAccess	func -> common . scope -> trait_aliases		85253	1					
ANR	85885	MemberAccess	func -> common . scope		85253	0					
ANR	85886	PtrMemberAccess	func -> common		85253	0					
ANR	85887	Identifier	func		85253	0					
ANR	85888	Identifier	common		85253	1					
ANR	85889	Identifier	scope		85253	1					
ANR	85890	Identifier	trait_aliases		85253	1					
ANR	85891	CallExpression	"zend_resolve_method_name ( ( object ? object -> ce : func -> common . scope ) , func )"		85253	1					
ANR	85892	Callee	zend_resolve_method_name		85253	0					
ANR	85893	Identifier	zend_resolve_method_name		85253	0					
ANR	85894	ArgumentList	object ? object -> ce : func -> common . scope		85253	1					
ANR	85895	Argument	object ? object -> ce : func -> common . scope		85253	0					
ANR	85896	ConditionalExpression	object ? object -> ce : func -> common . scope		85253	0					
ANR	85897	Condition	object		85253	0					
ANR	85898	Identifier	object		85253	0					
ANR	85899	PtrMemberAccess	object -> ce		85253	1					
ANR	85900	Identifier	object		85253	0					
ANR	85901	Identifier	ce		85253	1					
ANR	85902	MemberAccess	func -> common . scope		85253	2					
ANR	85903	PtrMemberAccess	func -> common		85253	0					
ANR	85904	Identifier	func		85253	0					
ANR	85905	Identifier	common		85253	1					
ANR	85906	Identifier	scope		85253	1					
ANR	85907	Argument	func		85253	1					
ANR	85908	Identifier	func		85253	0					
ANR	85909	MemberAccess	func -> common . function_name		85253	2					
ANR	85910	PtrMemberAccess	func -> common		85253	0					
ANR	85911	Identifier	func		85253	0					
ANR	85912	Identifier	common		85253	1					
ANR	85913	Identifier	function_name		85253	1					
ANR	85914	ElseStatement	else		85253	0					
ANR	85915	CompoundStatement		109:9:3436:3436	85253	0					
ANR	85916	ExpressionStatement	func = NULL	2592:3:71240:71251	85253	0	True				
ANR	85917	AssignmentExpression	func = NULL		85253	0		=			
ANR	85918	Identifier	func		85253	0					
ANR	85919	Identifier	NULL		85253	1					
ANR	85920	ExpressionStatement	function_name = NULL	2593:3:71256:71276	85253	1	True				
ANR	85921	AssignmentExpression	function_name = NULL		85253	0		=			
ANR	85922	Identifier	function_name		85253	0					
ANR	85923	Identifier	NULL		85253	1					
ANR	85924	IfStatement	if ( function_name )		85253	8					
ANR	85925	Condition	function_name	2596:6:71289:71301	85253	0	True				
ANR	85926	Identifier	function_name		85253	0					
ANR	85927	CompoundStatement		114:21:3505:3505	85253	1					
ANR	85928	ExpressionStatement	"add_assoc_str_ex ( & stack_frame , ""function"" , sizeof ( ""function"" ) - 1 , zend_string_copy ( function_name ) )"	2597:3:71309:71406	85253	0	True				
ANR	85929	CallExpression	"add_assoc_str_ex ( & stack_frame , ""function"" , sizeof ( ""function"" ) - 1 , zend_string_copy ( function_name ) )"		85253	0					
ANR	85930	Callee	add_assoc_str_ex		85253	0					
ANR	85931	Identifier	add_assoc_str_ex		85253	0					
ANR	85932	ArgumentList	& stack_frame		85253	1					
ANR	85933	Argument	& stack_frame		85253	0					
ANR	85934	UnaryOperationExpression	& stack_frame		85253	0					
ANR	85935	UnaryOperator	&		85253	0					
ANR	85936	Identifier	stack_frame		85253	1					
ANR	85937	Argument	"""function"""		85253	1					
ANR	85938	PrimaryExpression	"""function"""		85253	0					
ANR	85939	Argument	"sizeof ( ""function"" ) - 1"		85253	2					
ANR	85940	AdditiveExpression	"sizeof ( ""function"" ) - 1"		85253	0		-			
ANR	85941	SizeofExpression	"sizeof ( ""function"" )"		85253	0					
ANR	85942	Sizeof	sizeof		85253	0					
ANR	85943	PrimaryExpression	"""function"""		85253	1					
ANR	85944	PrimaryExpression	1		85253	1					
ANR	85945	Argument	zend_string_copy ( function_name )		85253	3					
ANR	85946	CallExpression	zend_string_copy ( function_name )		85253	0					
ANR	85947	Callee	zend_string_copy		85253	0					
ANR	85948	Identifier	zend_string_copy		85253	0					
ANR	85949	ArgumentList	function_name		85253	1					
ANR	85950	Argument	function_name		85253	0					
ANR	85951	Identifier	function_name		85253	0					
ANR	85952	IfStatement	if ( object )		85253	1					
ANR	85953	Condition	object	2599:7:71416:71421	85253	0	True				
ANR	85954	Identifier	object		85253	0					
ANR	85955	CompoundStatement		117:15:3625:3625	85253	1					
ANR	85956	IfStatement	if ( func -> common . scope )		85253	0					
ANR	85957	Condition	func -> common . scope	2600:8:71434:71451	85253	0	True				
ANR	85958	MemberAccess	func -> common . scope		85253	0					
ANR	85959	PtrMemberAccess	func -> common		85253	0					
ANR	85960	Identifier	func		85253	0					
ANR	85961	Identifier	common		85253	1					
ANR	85962	Identifier	scope		85253	1					
ANR	85963	CompoundStatement		118:28:3655:3655	85253	1					
ANR	85964	ExpressionStatement	"add_assoc_str_ex ( & stack_frame , ""class"" , sizeof ( ""class"" ) - 1 , zend_string_copy ( func -> common . scope -> name ) )"	2601:5:71461:71563	85253	0	True				
ANR	85965	CallExpression	"add_assoc_str_ex ( & stack_frame , ""class"" , sizeof ( ""class"" ) - 1 , zend_string_copy ( func -> common . scope -> name ) )"		85253	0					
ANR	85966	Callee	add_assoc_str_ex		85253	0					
ANR	85967	Identifier	add_assoc_str_ex		85253	0					
ANR	85968	ArgumentList	& stack_frame		85253	1					
ANR	85969	Argument	& stack_frame		85253	0					
ANR	85970	UnaryOperationExpression	& stack_frame		85253	0					
ANR	85971	UnaryOperator	&		85253	0					
ANR	85972	Identifier	stack_frame		85253	1					
ANR	85973	Argument	"""class"""		85253	1					
ANR	85974	PrimaryExpression	"""class"""		85253	0					
ANR	85975	Argument	"sizeof ( ""class"" ) - 1"		85253	2					
ANR	85976	AdditiveExpression	"sizeof ( ""class"" ) - 1"		85253	0		-			
ANR	85977	SizeofExpression	"sizeof ( ""class"" )"		85253	0					
ANR	85978	Sizeof	sizeof		85253	0					
ANR	85979	PrimaryExpression	"""class"""		85253	1					
ANR	85980	PrimaryExpression	1		85253	1					
ANR	85981	Argument	zend_string_copy ( func -> common . scope -> name )		85253	3					
ANR	85982	CallExpression	zend_string_copy ( func -> common . scope -> name )		85253	0					
ANR	85983	Callee	zend_string_copy		85253	0					
ANR	85984	Identifier	zend_string_copy		85253	0					
ANR	85985	ArgumentList	func -> common . scope -> name		85253	1					
ANR	85986	Argument	func -> common . scope -> name		85253	0					
ANR	85987	PtrMemberAccess	func -> common . scope -> name		85253	0					
ANR	85988	MemberAccess	func -> common . scope		85253	0					
ANR	85989	PtrMemberAccess	func -> common		85253	0					
ANR	85990	Identifier	func		85253	0					
ANR	85991	Identifier	common		85253	1					
ANR	85992	Identifier	scope		85253	1					
ANR	85993	Identifier	name		85253	1					
ANR	85994	ElseStatement	else		85253	0					
ANR	85995	CompoundStatement		120:11:3777:3777	85253	0					
ANR	85996	ExpressionStatement	"add_assoc_str_ex ( & stack_frame , ""class"" , sizeof ( ""class"" ) - 1 , zend_string_copy ( object -> ce -> name ) )"	2603:5:71583:71677	85253	0	True				
ANR	85997	CallExpression	"add_assoc_str_ex ( & stack_frame , ""class"" , sizeof ( ""class"" ) - 1 , zend_string_copy ( object -> ce -> name ) )"		85253	0					
ANR	85998	Callee	add_assoc_str_ex		85253	0					
ANR	85999	Identifier	add_assoc_str_ex		85253	0					
ANR	86000	ArgumentList	& stack_frame		85253	1					
ANR	86001	Argument	& stack_frame		85253	0					
ANR	86002	UnaryOperationExpression	& stack_frame		85253	0					
ANR	86003	UnaryOperator	&		85253	0					
ANR	86004	Identifier	stack_frame		85253	1					
ANR	86005	Argument	"""class"""		85253	1					
ANR	86006	PrimaryExpression	"""class"""		85253	0					
ANR	86007	Argument	"sizeof ( ""class"" ) - 1"		85253	2					
ANR	86008	AdditiveExpression	"sizeof ( ""class"" ) - 1"		85253	0		-			
ANR	86009	SizeofExpression	"sizeof ( ""class"" )"		85253	0					
ANR	86010	Sizeof	sizeof		85253	0					
ANR	86011	PrimaryExpression	"""class"""		85253	1					
ANR	86012	PrimaryExpression	1		85253	1					
ANR	86013	Argument	zend_string_copy ( object -> ce -> name )		85253	3					
ANR	86014	CallExpression	zend_string_copy ( object -> ce -> name )		85253	0					
ANR	86015	Callee	zend_string_copy		85253	0					
ANR	86016	Identifier	zend_string_copy		85253	0					
ANR	86017	ArgumentList	object -> ce -> name		85253	1					
ANR	86018	Argument	object -> ce -> name		85253	0					
ANR	86019	PtrMemberAccess	object -> ce -> name		85253	0					
ANR	86020	PtrMemberAccess	object -> ce		85253	0					
ANR	86021	Identifier	object		85253	0					
ANR	86022	Identifier	ce		85253	1					
ANR	86023	Identifier	name		85253	1					
ANR	86024	IfStatement	if ( ( options & DEBUG_BACKTRACE_PROVIDE_OBJECT ) != 0 )		85253	1					
ANR	86025	Condition	( options & DEBUG_BACKTRACE_PROVIDE_OBJECT ) != 0	2606:8:71694:71740	85253	0	True				
ANR	86026	EqualityExpression	( options & DEBUG_BACKTRACE_PROVIDE_OBJECT ) != 0		85253	0		!=			
ANR	86027	BitAndExpression	options & DEBUG_BACKTRACE_PROVIDE_OBJECT		85253	0		&			
ANR	86028	Identifier	options		85253	0					
ANR	86029	Identifier	DEBUG_BACKTRACE_PROVIDE_OBJECT		85253	1					
ANR	86030	PrimaryExpression	0		85253	1					
ANR	86031	CompoundStatement		125:5:3951:3958	85253	1					
ANR	86032	IdentifierDeclStatement	zval zv ;	2607:5:71750:71757	85253	0	True				
ANR	86033	IdentifierDecl	zv		85253	0					
ANR	86034	IdentifierDeclType	zval		85253	0					
ANR	86035	Identifier	zv		85253	1					
ANR	86036	ExpressionStatement	"ZVAL_OBJ ( & zv , object )"	2608:5:71764:71785	85253	1	True				
ANR	86037	CallExpression	"ZVAL_OBJ ( & zv , object )"		85253	0					
ANR	86038	Callee	ZVAL_OBJ		85253	0					
ANR	86039	Identifier	ZVAL_OBJ		85253	0					
ANR	86040	ArgumentList	& zv		85253	1					
ANR	86041	Argument	& zv		85253	0					
ANR	86042	UnaryOperationExpression	& zv		85253	0					
ANR	86043	UnaryOperator	&		85253	0					
ANR	86044	Identifier	zv		85253	1					
ANR	86045	Argument	object		85253	1					
ANR	86046	Identifier	object		85253	0					
ANR	86047	ExpressionStatement	"add_assoc_zval_ex ( & stack_frame , ""object"" , sizeof ( ""object"" ) - 1 , & zv )"	2609:5:71792:71858	85253	2	True				
ANR	86048	CallExpression	"add_assoc_zval_ex ( & stack_frame , ""object"" , sizeof ( ""object"" ) - 1 , & zv )"		85253	0					
ANR	86049	Callee	add_assoc_zval_ex		85253	0					
ANR	86050	Identifier	add_assoc_zval_ex		85253	0					
ANR	86051	ArgumentList	& stack_frame		85253	1					
ANR	86052	Argument	& stack_frame		85253	0					
ANR	86053	UnaryOperationExpression	& stack_frame		85253	0					
ANR	86054	UnaryOperator	&		85253	0					
ANR	86055	Identifier	stack_frame		85253	1					
ANR	86056	Argument	"""object"""		85253	1					
ANR	86057	PrimaryExpression	"""object"""		85253	0					
ANR	86058	Argument	"sizeof ( ""object"" ) - 1"		85253	2					
ANR	86059	AdditiveExpression	"sizeof ( ""object"" ) - 1"		85253	0		-			
ANR	86060	SizeofExpression	"sizeof ( ""object"" )"		85253	0					
ANR	86061	Sizeof	sizeof		85253	0					
ANR	86062	PrimaryExpression	"""object"""		85253	1					
ANR	86063	PrimaryExpression	1		85253	1					
ANR	86064	Argument	& zv		85253	3					
ANR	86065	UnaryOperationExpression	& zv		85253	0					
ANR	86066	UnaryOperator	&		85253	0					
ANR	86067	Identifier	zv		85253	1					
ANR	86068	ExpressionStatement	Z_ADDREF ( zv )	2610:5:71865:71877	85253	3	True				
ANR	86069	CallExpression	Z_ADDREF ( zv )		85253	0					
ANR	86070	Callee	Z_ADDREF		85253	0					
ANR	86071	Identifier	Z_ADDREF		85253	0					
ANR	86072	ArgumentList	zv		85253	1					
ANR	86073	Argument	zv		85253	0					
ANR	86074	Identifier	zv		85253	0					
ANR	86075	ExpressionStatement	"add_assoc_string_ex ( & stack_frame , ""type"" , sizeof ( ""type"" ) - 1 , ""->"" )"	2613:4:71890:71955	85253	2	True				
ANR	86076	CallExpression	"add_assoc_string_ex ( & stack_frame , ""type"" , sizeof ( ""type"" ) - 1 , ""->"" )"		85253	0					
ANR	86077	Callee	add_assoc_string_ex		85253	0					
ANR	86078	Identifier	add_assoc_string_ex		85253	0					
ANR	86079	ArgumentList	& stack_frame		85253	1					
ANR	86080	Argument	& stack_frame		85253	0					
ANR	86081	UnaryOperationExpression	& stack_frame		85253	0					
ANR	86082	UnaryOperator	&		85253	0					
ANR	86083	Identifier	stack_frame		85253	1					
ANR	86084	Argument	"""type"""		85253	1					
ANR	86085	PrimaryExpression	"""type"""		85253	0					
ANR	86086	Argument	"sizeof ( ""type"" ) - 1"		85253	2					
ANR	86087	AdditiveExpression	"sizeof ( ""type"" ) - 1"		85253	0		-			
ANR	86088	SizeofExpression	"sizeof ( ""type"" )"		85253	0					
ANR	86089	Sizeof	sizeof		85253	0					
ANR	86090	PrimaryExpression	"""type"""		85253	1					
ANR	86091	PrimaryExpression	1		85253	1					
ANR	86092	Argument	"""->"""		85253	3					
ANR	86093	PrimaryExpression	"""->"""		85253	0					
ANR	86094	ElseStatement	else		85253	0					
ANR	86095	IfStatement	if ( func -> common . scope )		85253	0					
ANR	86096	Condition	func -> common . scope	2614:14:71971:71988	85253	0	True				
ANR	86097	MemberAccess	func -> common . scope		85253	0					
ANR	86098	PtrMemberAccess	func -> common		85253	0					
ANR	86099	Identifier	func		85253	0					
ANR	86100	Identifier	common		85253	1					
ANR	86101	Identifier	scope		85253	1					
ANR	86102	CompoundStatement		132:34:4192:4192	85253	1					
ANR	86103	ExpressionStatement	"add_assoc_str_ex ( & stack_frame , ""class"" , sizeof ( ""class"" ) - 1 , zend_string_copy ( func -> common . scope -> name ) )"	2615:4:71997:72099	85253	0	True				
ANR	86104	CallExpression	"add_assoc_str_ex ( & stack_frame , ""class"" , sizeof ( ""class"" ) - 1 , zend_string_copy ( func -> common . scope -> name ) )"		85253	0					
ANR	86105	Callee	add_assoc_str_ex		85253	0					
ANR	86106	Identifier	add_assoc_str_ex		85253	0					
ANR	86107	ArgumentList	& stack_frame		85253	1					
ANR	86108	Argument	& stack_frame		85253	0					
ANR	86109	UnaryOperationExpression	& stack_frame		85253	0					
ANR	86110	UnaryOperator	&		85253	0					
ANR	86111	Identifier	stack_frame		85253	1					
ANR	86112	Argument	"""class"""		85253	1					
ANR	86113	PrimaryExpression	"""class"""		85253	0					
ANR	86114	Argument	"sizeof ( ""class"" ) - 1"		85253	2					
ANR	86115	AdditiveExpression	"sizeof ( ""class"" ) - 1"		85253	0		-			
ANR	86116	SizeofExpression	"sizeof ( ""class"" )"		85253	0					
ANR	86117	Sizeof	sizeof		85253	0					
ANR	86118	PrimaryExpression	"""class"""		85253	1					
ANR	86119	PrimaryExpression	1		85253	1					
ANR	86120	Argument	zend_string_copy ( func -> common . scope -> name )		85253	3					
ANR	86121	CallExpression	zend_string_copy ( func -> common . scope -> name )		85253	0					
ANR	86122	Callee	zend_string_copy		85253	0					
ANR	86123	Identifier	zend_string_copy		85253	0					
ANR	86124	ArgumentList	func -> common . scope -> name		85253	1					
ANR	86125	Argument	func -> common . scope -> name		85253	0					
ANR	86126	PtrMemberAccess	func -> common . scope -> name		85253	0					
ANR	86127	MemberAccess	func -> common . scope		85253	0					
ANR	86128	PtrMemberAccess	func -> common		85253	0					
ANR	86129	Identifier	func		85253	0					
ANR	86130	Identifier	common		85253	1					
ANR	86131	Identifier	scope		85253	1					
ANR	86132	Identifier	name		85253	1					
ANR	86133	ExpressionStatement	"add_assoc_string_ex ( & stack_frame , ""type"" , sizeof ( ""type"" ) - 1 , ""::"" )"	2616:4:72105:72170	85253	1	True				
ANR	86134	CallExpression	"add_assoc_string_ex ( & stack_frame , ""type"" , sizeof ( ""type"" ) - 1 , ""::"" )"		85253	0					
ANR	86135	Callee	add_assoc_string_ex		85253	0					
ANR	86136	Identifier	add_assoc_string_ex		85253	0					
ANR	86137	ArgumentList	& stack_frame		85253	1					
ANR	86138	Argument	& stack_frame		85253	0					
ANR	86139	UnaryOperationExpression	& stack_frame		85253	0					
ANR	86140	UnaryOperator	&		85253	0					
ANR	86141	Identifier	stack_frame		85253	1					
ANR	86142	Argument	"""type"""		85253	1					
ANR	86143	PrimaryExpression	"""type"""		85253	0					
ANR	86144	Argument	"sizeof ( ""type"" ) - 1"		85253	2					
ANR	86145	AdditiveExpression	"sizeof ( ""type"" ) - 1"		85253	0		-			
ANR	86146	SizeofExpression	"sizeof ( ""type"" )"		85253	0					
ANR	86147	Sizeof	sizeof		85253	0					
ANR	86148	PrimaryExpression	"""type"""		85253	1					
ANR	86149	PrimaryExpression	1		85253	1					
ANR	86150	Argument	"""::"""		85253	3					
ANR	86151	PrimaryExpression	"""::"""		85253	0					
ANR	86152	IfStatement	if ( ( options & DEBUG_BACKTRACE_IGNORE_ARGS ) == 0 && func -> type != ZEND_EVAL_CODE )		85253	2					
ANR	86153	Condition	( options & DEBUG_BACKTRACE_IGNORE_ARGS ) == 0 && func -> type != ZEND_EVAL_CODE	2619:7:72185:72264	85253	0	True				
ANR	86154	AndExpression	( options & DEBUG_BACKTRACE_IGNORE_ARGS ) == 0 && func -> type != ZEND_EVAL_CODE		85253	0		&&			
ANR	86155	EqualityExpression	( options & DEBUG_BACKTRACE_IGNORE_ARGS ) == 0		85253	0		==			
ANR	86156	BitAndExpression	options & DEBUG_BACKTRACE_IGNORE_ARGS		85253	0		&			
ANR	86157	Identifier	options		85253	0					
ANR	86158	Identifier	DEBUG_BACKTRACE_IGNORE_ARGS		85253	1					
ANR	86159	PrimaryExpression	0		85253	1					
ANR	86160	EqualityExpression	func -> type != ZEND_EVAL_CODE		85253	1		!=			
ANR	86161	PtrMemberAccess	func -> type		85253	0					
ANR	86162	Identifier	func		85253	0					
ANR	86163	Identifier	type		85253	1					
ANR	86164	Identifier	ZEND_EVAL_CODE		85253	1					
ANR	86165	CompoundStatement		139:4:4474:4483	85253	1					
ANR	86166	IdentifierDeclStatement	zval args ;	2621:4:72273:72282	85253	0	True				
ANR	86167	IdentifierDecl	args		85253	0					
ANR	86168	IdentifierDeclType	zval		85253	0					
ANR	86169	Identifier	args		85253	1					
ANR	86170	ExpressionStatement	"debug_backtrace_get_args ( call , & args )"	2623:4:72289:72326	85253	1	True				
ANR	86171	CallExpression	"debug_backtrace_get_args ( call , & args )"		85253	0					
ANR	86172	Callee	debug_backtrace_get_args		85253	0					
ANR	86173	Identifier	debug_backtrace_get_args		85253	0					
ANR	86174	ArgumentList	call		85253	1					
ANR	86175	Argument	call		85253	0					
ANR	86176	Identifier	call		85253	0					
ANR	86177	Argument	& args		85253	1					
ANR	86178	UnaryOperationExpression	& args		85253	0					
ANR	86179	UnaryOperator	&		85253	0					
ANR	86180	Identifier	args		85253	1					
ANR	86181	ExpressionStatement	"add_assoc_zval_ex ( & stack_frame , ""args"" , sizeof ( ""args"" ) - 1 , & args )"	2624:4:72332:72396	85253	2	True				
ANR	86182	CallExpression	"add_assoc_zval_ex ( & stack_frame , ""args"" , sizeof ( ""args"" ) - 1 , & args )"		85253	0					
ANR	86183	Callee	add_assoc_zval_ex		85253	0					
ANR	86184	Identifier	add_assoc_zval_ex		85253	0					
ANR	86185	ArgumentList	& stack_frame		85253	1					
ANR	86186	Argument	& stack_frame		85253	0					
ANR	86187	UnaryOperationExpression	& stack_frame		85253	0					
ANR	86188	UnaryOperator	&		85253	0					
ANR	86189	Identifier	stack_frame		85253	1					
ANR	86190	Argument	"""args"""		85253	1					
ANR	86191	PrimaryExpression	"""args"""		85253	0					
ANR	86192	Argument	"sizeof ( ""args"" ) - 1"		85253	2					
ANR	86193	AdditiveExpression	"sizeof ( ""args"" ) - 1"		85253	0		-			
ANR	86194	SizeofExpression	"sizeof ( ""args"" )"		85253	0					
ANR	86195	Sizeof	sizeof		85253	0					
ANR	86196	PrimaryExpression	"""args"""		85253	1					
ANR	86197	PrimaryExpression	1		85253	1					
ANR	86198	Argument	& args		85253	3					
ANR	86199	UnaryOperationExpression	& args		85253	0					
ANR	86200	UnaryOperator	&		85253	0					
ANR	86201	Identifier	args		85253	1					
ANR	86202	ElseStatement	else		85253	0					
ANR	86203	CompoundStatement		147:3:4755:4787	85253	0					
ANR	86204	IdentifierDeclStatement	zend_bool build_filename_arg = 1 ;	2628:3:72517:72549	85253	0	True				
ANR	86205	IdentifierDecl	build_filename_arg = 1		85253	0					
ANR	86206	IdentifierDeclType	zend_bool		85253	0					
ANR	86207	Identifier	build_filename_arg		85253	1					
ANR	86208	AssignmentExpression	build_filename_arg = 1		85253	2		=			
ANR	86209	Identifier	build_filename_arg		85253	0					
ANR	86210	PrimaryExpression	1		85253	1					
ANR	86211	IdentifierDeclStatement	const char * pseudo_function_name ;	2629:3:72554:72586	85253	1	True				
ANR	86212	IdentifierDecl	* pseudo_function_name		85253	0					
ANR	86213	IdentifierDeclType	const char *		85253	0					
ANR	86214	Identifier	pseudo_function_name		85253	1					
ANR	86215	IfStatement	if ( ! ptr -> func || ! ZEND_USER_CODE ( ptr -> func -> common . type ) || ptr -> opline -> opcode != ZEND_INCLUDE_OR_EVAL )		85253	2					
ANR	86216	Condition	! ptr -> func || ! ZEND_USER_CODE ( ptr -> func -> common . type ) || ptr -> opline -> opcode != ZEND_INCLUDE_OR_EVAL	2631:7:72596:72695	85253	0	True				
ANR	86217	OrExpression	! ptr -> func || ! ZEND_USER_CODE ( ptr -> func -> common . type ) || ptr -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		85253	0		||			
ANR	86218	UnaryOperationExpression	! ptr -> func		85253	0					
ANR	86219	UnaryOperator	!		85253	0					
ANR	86220	PtrMemberAccess	ptr -> func		85253	1					
ANR	86221	Identifier	ptr		85253	0					
ANR	86222	Identifier	func		85253	1					
ANR	86223	OrExpression	! ZEND_USER_CODE ( ptr -> func -> common . type ) || ptr -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		85253	1		||			
ANR	86224	UnaryOperationExpression	! ZEND_USER_CODE ( ptr -> func -> common . type )		85253	0					
ANR	86225	UnaryOperator	!		85253	0					
ANR	86226	CallExpression	ZEND_USER_CODE ( ptr -> func -> common . type )		85253	1					
ANR	86227	Callee	ZEND_USER_CODE		85253	0					
ANR	86228	Identifier	ZEND_USER_CODE		85253	0					
ANR	86229	ArgumentList	ptr -> func -> common . type		85253	1					
ANR	86230	Argument	ptr -> func -> common . type		85253	0					
ANR	86231	MemberAccess	ptr -> func -> common . type		85253	0					
ANR	86232	PtrMemberAccess	ptr -> func -> common		85253	0					
ANR	86233	PtrMemberAccess	ptr -> func		85253	0					
ANR	86234	Identifier	ptr		85253	0					
ANR	86235	Identifier	func		85253	1					
ANR	86236	Identifier	common		85253	1					
ANR	86237	Identifier	type		85253	1					
ANR	86238	EqualityExpression	ptr -> opline -> opcode != ZEND_INCLUDE_OR_EVAL		85253	1		!=			
ANR	86239	PtrMemberAccess	ptr -> opline -> opcode		85253	0					
ANR	86240	PtrMemberAccess	ptr -> opline		85253	0					
ANR	86241	Identifier	ptr		85253	0					
ANR	86242	Identifier	opline		85253	1					
ANR	86243	Identifier	opcode		85253	1					
ANR	86244	Identifier	ZEND_INCLUDE_OR_EVAL		85253	1					
ANR	86245	CompoundStatement		149:109:4899:4899	85253	1					
ANR	86246	ExpressionStatement	"pseudo_function_name = ""unknown"""	2633:4:72762:72794	85253	0	True				
ANR	86247	AssignmentExpression	"pseudo_function_name = ""unknown"""		85253	0		=			
ANR	86248	Identifier	pseudo_function_name		85253	0					
ANR	86249	PrimaryExpression	"""unknown"""		85253	1					
ANR	86250	ExpressionStatement	build_filename_arg = 0	2634:4:72800:72822	85253	1	True				
ANR	86251	AssignmentExpression	build_filename_arg = 0		85253	0		=			
ANR	86252	Identifier	build_filename_arg		85253	0					
ANR	86253	PrimaryExpression	0		85253	1					
ANR	86254	ElseStatement	else		85253	0					
ANR	86255	SwitchStatement	switch ( ptr -> opline -> extended_value )		85253	0					
ANR	86256	Condition	ptr -> opline -> extended_value	2636:11:72845:72871	85253	0	True				
ANR	86257	PtrMemberAccess	ptr -> opline -> extended_value		85253	0					
ANR	86258	PtrMemberAccess	ptr -> opline		85253	0					
ANR	86259	Identifier	ptr		85253	0					
ANR	86260	Identifier	opline		85253	1					
ANR	86261	Identifier	extended_value		85253	1					
ANR	86262	CompoundStatement		154:40:5075:5075	85253	1					
ANR	86263	Label	case ZEND_EVAL :	2637:4:72880:72894	85253	0	True				
ANR	86264	Identifier	ZEND_EVAL		85253	0					
ANR	86265	ExpressionStatement	"pseudo_function_name = ""eval"""	2638:5:72901:72930	85253	1	True				
ANR	86266	AssignmentExpression	"pseudo_function_name = ""eval"""		85253	0		=			
ANR	86267	Identifier	pseudo_function_name		85253	0					
ANR	86268	PrimaryExpression	"""eval"""		85253	1					
ANR	86269	ExpressionStatement	build_filename_arg = 0	2639:5:72937:72959	85253	2	True				
ANR	86270	AssignmentExpression	build_filename_arg = 0		85253	0		=			
ANR	86271	Identifier	build_filename_arg		85253	0					
ANR	86272	PrimaryExpression	0		85253	1					
ANR	86273	BreakStatement	break ;	2640:5:72966:72971	85253	3	True				
ANR	86274	Label	case ZEND_INCLUDE :	2641:4:72977:72994	85253	4	True				
ANR	86275	Identifier	ZEND_INCLUDE		85253	0					
ANR	86276	ExpressionStatement	"pseudo_function_name = ""include"""	2642:5:73001:73033	85253	5	True				
ANR	86277	AssignmentExpression	"pseudo_function_name = ""include"""		85253	0		=			
ANR	86278	Identifier	pseudo_function_name		85253	0					
ANR	86279	PrimaryExpression	"""include"""		85253	1					
ANR	86280	BreakStatement	break ;	2643:5:73040:73045	85253	6	True				
ANR	86281	Label	case ZEND_REQUIRE :	2644:4:73051:73068	85253	7	True				
ANR	86282	Identifier	ZEND_REQUIRE		85253	0					
ANR	86283	ExpressionStatement	"pseudo_function_name = ""require"""	2645:5:73075:73107	85253	8	True				
ANR	86284	AssignmentExpression	"pseudo_function_name = ""require"""		85253	0		=			
ANR	86285	Identifier	pseudo_function_name		85253	0					
ANR	86286	PrimaryExpression	"""require"""		85253	1					
ANR	86287	BreakStatement	break ;	2646:5:73114:73119	85253	9	True				
ANR	86288	Label	case ZEND_INCLUDE_ONCE :	2647:4:73125:73147	85253	10	True				
ANR	86289	Identifier	ZEND_INCLUDE_ONCE		85253	0					
ANR	86290	ExpressionStatement	"pseudo_function_name = ""include_once"""	2648:5:73154:73191	85253	11	True				
ANR	86291	AssignmentExpression	"pseudo_function_name = ""include_once"""		85253	0		=			
ANR	86292	Identifier	pseudo_function_name		85253	0					
ANR	86293	PrimaryExpression	"""include_once"""		85253	1					
ANR	86294	BreakStatement	break ;	2649:5:73198:73203	85253	12	True				
ANR	86295	Label	case ZEND_REQUIRE_ONCE :	2650:4:73209:73231	85253	13	True				
ANR	86296	Identifier	ZEND_REQUIRE_ONCE		85253	0					
ANR	86297	ExpressionStatement	"pseudo_function_name = ""require_once"""	2651:5:73238:73275	85253	14	True				
ANR	86298	AssignmentExpression	"pseudo_function_name = ""require_once"""		85253	0		=			
ANR	86299	Identifier	pseudo_function_name		85253	0					
ANR	86300	PrimaryExpression	"""require_once"""		85253	1					
ANR	86301	BreakStatement	break ;	2652:5:73282:73287	85253	15	True				
ANR	86302	Label	default :	2653:4:73293:73300	85253	16	True				
ANR	86303	Identifier	default		85253	0					
ANR	86304	ExpressionStatement	"pseudo_function_name = ""unknown"""	2656:5:73430:73462	85253	17	True				
ANR	86305	AssignmentExpression	"pseudo_function_name = ""unknown"""		85253	0		=			
ANR	86306	Identifier	pseudo_function_name		85253	0					
ANR	86307	PrimaryExpression	"""unknown"""		85253	1					
ANR	86308	ExpressionStatement	build_filename_arg = 0	2657:5:73469:73491	85253	18	True				
ANR	86309	AssignmentExpression	build_filename_arg = 0		85253	0		=			
ANR	86310	Identifier	build_filename_arg		85253	0					
ANR	86311	PrimaryExpression	0		85253	1					
ANR	86312	BreakStatement	break ;	2658:5:73498:73503	85253	19	True				
ANR	86313	IfStatement	if ( build_filename_arg && include_filename )		85253	3					
ANR	86314	Condition	build_filename_arg && include_filename	2661:7:73518:73555	85253	0	True				
ANR	86315	AndExpression	build_filename_arg && include_filename		85253	0		&&			
ANR	86316	Identifier	build_filename_arg		85253	0					
ANR	86317	Identifier	include_filename		85253	1					
ANR	86318	CompoundStatement		180:4:5765:5779	85253	1					
ANR	86319	IdentifierDeclStatement	zval arg_array ;	2662:4:73564:73578	85253	0	True				
ANR	86320	IdentifierDecl	arg_array		85253	0					
ANR	86321	IdentifierDeclType	zval		85253	0					
ANR	86322	Identifier	arg_array		85253	1					
ANR	86323	ExpressionStatement	array_init ( & arg_array )	2664:4:73585:73607	85253	1	True				
ANR	86324	CallExpression	array_init ( & arg_array )		85253	0					
ANR	86325	Callee	array_init		85253	0					
ANR	86326	Identifier	array_init		85253	0					
ANR	86327	ArgumentList	& arg_array		85253	1					
ANR	86328	Argument	& arg_array		85253	0					
ANR	86329	UnaryOperationExpression	& arg_array		85253	0					
ANR	86330	UnaryOperator	&		85253	0					
ANR	86331	Identifier	arg_array		85253	1					
ANR	86332	ExpressionStatement	"add_next_index_str ( & arg_array , zend_string_copy ( include_filename ) )"	2670:4:73805:73871	85253	2	True				
ANR	86333	CallExpression	"add_next_index_str ( & arg_array , zend_string_copy ( include_filename ) )"		85253	0					
ANR	86334	Callee	add_next_index_str		85253	0					
ANR	86335	Identifier	add_next_index_str		85253	0					
ANR	86336	ArgumentList	& arg_array		85253	1					
ANR	86337	Argument	& arg_array		85253	0					
ANR	86338	UnaryOperationExpression	& arg_array		85253	0					
ANR	86339	UnaryOperator	&		85253	0					
ANR	86340	Identifier	arg_array		85253	1					
ANR	86341	Argument	zend_string_copy ( include_filename )		85253	1					
ANR	86342	CallExpression	zend_string_copy ( include_filename )		85253	0					
ANR	86343	Callee	zend_string_copy		85253	0					
ANR	86344	Identifier	zend_string_copy		85253	0					
ANR	86345	ArgumentList	include_filename		85253	1					
ANR	86346	Argument	include_filename		85253	0					
ANR	86347	Identifier	include_filename		85253	0					
ANR	86348	ExpressionStatement	"add_assoc_zval_ex ( & stack_frame , ""args"" , sizeof ( ""args"" ) - 1 , & arg_array )"	2671:4:73877:73946	85253	3	True				
ANR	86349	CallExpression	"add_assoc_zval_ex ( & stack_frame , ""args"" , sizeof ( ""args"" ) - 1 , & arg_array )"		85253	0					
ANR	86350	Callee	add_assoc_zval_ex		85253	0					
ANR	86351	Identifier	add_assoc_zval_ex		85253	0					
ANR	86352	ArgumentList	& stack_frame		85253	1					
ANR	86353	Argument	& stack_frame		85253	0					
ANR	86354	UnaryOperationExpression	& stack_frame		85253	0					
ANR	86355	UnaryOperator	&		85253	0					
ANR	86356	Identifier	stack_frame		85253	1					
ANR	86357	Argument	"""args"""		85253	1					
ANR	86358	PrimaryExpression	"""args"""		85253	0					
ANR	86359	Argument	"sizeof ( ""args"" ) - 1"		85253	2					
ANR	86360	AdditiveExpression	"sizeof ( ""args"" ) - 1"		85253	0		-			
ANR	86361	SizeofExpression	"sizeof ( ""args"" )"		85253	0					
ANR	86362	Sizeof	sizeof		85253	0					
ANR	86363	PrimaryExpression	"""args"""		85253	1					
ANR	86364	PrimaryExpression	1		85253	1					
ANR	86365	Argument	& arg_array		85253	3					
ANR	86366	UnaryOperationExpression	& arg_array		85253	0					
ANR	86367	UnaryOperator	&		85253	0					
ANR	86368	Identifier	arg_array		85253	1					
ANR	86369	ExpressionStatement	"add_assoc_string_ex ( & stack_frame , ""function"" , sizeof ( ""function"" ) - 1 , ( char * ) pseudo_function_name )"	2674:3:73957:74055	85253	4	True				
ANR	86370	CallExpression	"add_assoc_string_ex ( & stack_frame , ""function"" , sizeof ( ""function"" ) - 1 , ( char * ) pseudo_function_name )"		85253	0					
ANR	86371	Callee	add_assoc_string_ex		85253	0					
ANR	86372	Identifier	add_assoc_string_ex		85253	0					
ANR	86373	ArgumentList	& stack_frame		85253	1					
ANR	86374	Argument	& stack_frame		85253	0					
ANR	86375	UnaryOperationExpression	& stack_frame		85253	0					
ANR	86376	UnaryOperator	&		85253	0					
ANR	86377	Identifier	stack_frame		85253	1					
ANR	86378	Argument	"""function"""		85253	1					
ANR	86379	PrimaryExpression	"""function"""		85253	0					
ANR	86380	Argument	"sizeof ( ""function"" ) - 1"		85253	2					
ANR	86381	AdditiveExpression	"sizeof ( ""function"" ) - 1"		85253	0		-			
ANR	86382	SizeofExpression	"sizeof ( ""function"" )"		85253	0					
ANR	86383	Sizeof	sizeof		85253	0					
ANR	86384	PrimaryExpression	"""function"""		85253	1					
ANR	86385	PrimaryExpression	1		85253	1					
ANR	86386	Argument	( char * ) pseudo_function_name		85253	3					
ANR	86387	CastExpression	( char * ) pseudo_function_name		85253	0					
ANR	86388	CastTarget	char *		85253	0					
ANR	86389	Identifier	pseudo_function_name		85253	1					
ANR	86390	ExpressionStatement	"zend_hash_next_index_insert_new ( Z_ARRVAL_P ( return_value ) , & stack_frame )"	2677:2:74064:74135	85253	9	True				
ANR	86391	CallExpression	"zend_hash_next_index_insert_new ( Z_ARRVAL_P ( return_value ) , & stack_frame )"		85253	0					
ANR	86392	Callee	zend_hash_next_index_insert_new		85253	0					
ANR	86393	Identifier	zend_hash_next_index_insert_new		85253	0					
ANR	86394	ArgumentList	Z_ARRVAL_P ( return_value )		85253	1					
ANR	86395	Argument	Z_ARRVAL_P ( return_value )		85253	0					
ANR	86396	CallExpression	Z_ARRVAL_P ( return_value )		85253	0					
ANR	86397	Callee	Z_ARRVAL_P		85253	0					
ANR	86398	Identifier	Z_ARRVAL_P		85253	0					
ANR	86399	ArgumentList	return_value		85253	1					
ANR	86400	Argument	return_value		85253	0					
ANR	86401	Identifier	return_value		85253	0					
ANR	86402	Argument	& stack_frame		85253	1					
ANR	86403	UnaryOperationExpression	& stack_frame		85253	0					
ANR	86404	UnaryOperator	&		85253	0					
ANR	86405	Identifier	stack_frame		85253	1					
ANR	86406	ExpressionStatement	include_filename = filename	2679:2:74140:74167	85253	10	True				
ANR	86407	AssignmentExpression	include_filename = filename		85253	0		=			
ANR	86408	Identifier	include_filename		85253	0					
ANR	86409	Identifier	filename		85253	1					
ANR	86410	ExpressionStatement	call = skip	2681:2:74172:74183	85253	11	True				
ANR	86411	AssignmentExpression	call = skip		85253	0		=			
ANR	86412	Identifier	call		85253	0					
ANR	86413	Identifier	skip		85253	1					
ANR	86414	ExpressionStatement	ptr = skip -> prev_execute_data	2682:2:74187:74216	85253	12	True				
ANR	86415	AssignmentExpression	ptr = skip -> prev_execute_data		85253	0		=			
ANR	86416	Identifier	ptr		85253	0					
ANR	86417	PtrMemberAccess	skip -> prev_execute_data		85253	1					
ANR	86418	Identifier	skip		85253	0					
ANR	86419	Identifier	prev_execute_data		85253	1					
ANR	86420	ReturnType	ZEND_API void		85253	1					
ANR	86421	Identifier	zend_fetch_debug_backtrace		85253	2					
ANR	86422	ParameterList	"zval * return_value , int skip_last , int options , int limit"		85253	3					
ANR	86423	Parameter	zval * return_value	2482:41:67729:67746	85253	0	True				
ANR	86424	ParameterType	zval *		85253	0					
ANR	86425	Identifier	return_value		85253	1					
ANR	86426	Parameter	int skip_last	2482:61:67749:67761	85253	1	True				
ANR	86427	ParameterType	int		85253	0					
ANR	86428	Identifier	skip_last		85253	1					
ANR	86429	Parameter	int options	2482:76:67764:67774	85253	2	True				
ANR	86430	ParameterType	int		85253	0					
ANR	86431	Identifier	options		85253	1					
ANR	86432	Parameter	int limit	2482:89:67777:67785	85253	3	True				
ANR	86433	ParameterType	int		85253	0					
ANR	86434	Identifier	limit		85253	1					
ANR	86435	CFGEntryNode	ENTRY		85253		True				
ANR	86436	CFGExitNode	EXIT		85253		True				
ANR	86437	Symbol	* skip -> opline		85253						
ANR	86438	Symbol	ptr -> opline		85253						
ANR	86439	Symbol	ZEND_DO_FCALL_BY_NAME		85253						
ANR	86440	Symbol	prev_call -> func -> common . type		85253						
ANR	86441	Symbol	prev		85253						
ANR	86442	Symbol	skip -> func -> op_array		85253						
ANR	86443	Symbol	* call		85253						
ANR	86444	Symbol	ZEND_HANDLE_EXCEPTION		85253						
ANR	86445	Symbol	prev -> func -> common . type		85253						
ANR	86446	Symbol	opline_before_exception		85253						
ANR	86447	Symbol	* skip		85253						
ANR	86448	Symbol	ZEND_EVAL_CODE		85253						
ANR	86449	Symbol	func -> common . scope -> name		85253						
ANR	86450	Symbol	func -> common		85253						
ANR	86451	Symbol	options		85253						
ANR	86452	Symbol	* object -> ce		85253						
ANR	86453	Symbol	frameno		85253						
ANR	86454	Symbol	skip -> prev_execute_data -> func -> common		85253						
ANR	86455	Symbol	build_filename_arg		85253						
ANR	86456	Symbol	prev -> func -> common		85253						
ANR	86457	Symbol	* prev -> opline		85253						
ANR	86458	Symbol	& arg_array		85253						
ANR	86459	Symbol	skip -> func -> common . type		85253						
ANR	86460	Symbol	* prev -> func		85253						
ANR	86461	Symbol	& stack_frame		85253						
ANR	86462	Symbol	skip -> func -> op_array . line_end		85253						
ANR	86463	Symbol	* func -> common . scope		85253						
ANR	86464	Symbol	ptr -> prev_execute_data		85253						
ANR	86465	Symbol	filename		85253						
ANR	86466	Symbol	ZEND_DO_FCALL		85253						
ANR	86467	Symbol	skip -> prev_execute_data -> opline		85253						
ANR	86468	Symbol	* * skip		85253						
ANR	86469	Symbol	func -> common . scope -> trait_aliases		85253						
ANR	86470	Symbol	ZEND_USER_CODE		85253						
ANR	86471	Symbol	prev -> func -> op_array		85253						
ANR	86472	Symbol	prev_call		85253						
ANR	86473	Symbol	zv		85253						
ANR	86474	Symbol	object		85253						
ANR	86475	Symbol	object -> ce -> name		85253						
ANR	86476	Symbol	return_value		85253						
ANR	86477	Symbol	* * ptr		85253						
ANR	86478	Symbol	* * prev		85253						
ANR	86479	Symbol	* * prev_call		85253						
ANR	86480	Symbol	skip		85253						
ANR	86481	Symbol	* ptr -> func		85253						
ANR	86482	Symbol	* EG		85253						
ANR	86483	Symbol	* object		85253						
ANR	86484	Symbol	arg_array		85253						
ANR	86485	Symbol	Z_OBJ		85253						
ANR	86486	Symbol	func -> common . scope		85253						
ANR	86487	Symbol	* prev_call -> func		85253						
ANR	86488	Symbol	* * * skip		85253						
ANR	86489	Symbol	skip -> opline -> opcode		85253						
ANR	86490	Symbol	func -> type		85253						
ANR	86491	Symbol	prev -> prev_execute_data		85253						
ANR	86492	Symbol	ZEND_NEW		85253						
ANR	86493	Symbol	skip -> func -> common		85253						
ANR	86494	Symbol	& args		85253						
ANR	86495	Symbol	ptr -> opline -> opcode		85253						
ANR	86496	Symbol	* func		85253						
ANR	86497	Symbol	& zv		85253						
ANR	86498	Symbol	call		85253						
ANR	86499	Symbol	DEBUG_BACKTRACE_IGNORE_ARGS		85253						
ANR	86500	Symbol	ZEND_DO_ICALL		85253						
ANR	86501	Symbol	* * object		85253						
ANR	86502	Symbol	ptr -> func -> common . type		85253						
ANR	86503	Symbol	call -> This		85253						
ANR	86504	Symbol	skip_last		85253						
ANR	86505	Symbol	call -> func		85253						
ANR	86506	Symbol	object -> ce		85253						
ANR	86507	Symbol	current_execute_data		85253						
ANR	86508	Symbol	pseudo_function_name		85253						
ANR	86509	Symbol	ptr -> func		85253						
ANR	86510	Symbol	zend_resolve_method_name		85253						
ANR	86511	Symbol	* skip -> prev_execute_data -> func		85253						
ANR	86512	Symbol	ZEND_DO_UCALL		85253						
ANR	86513	Symbol	prev_call -> func -> common		85253						
ANR	86514	Symbol	prev -> func		85253						
ANR	86515	Symbol	limit		85253						
ANR	86516	Symbol	* ptr		85253						
ANR	86517	Symbol	EG		85253						
ANR	86518	Symbol	NULL		85253						
ANR	86519	Symbol	EG ( opline_before_exception ) -> lineno		85253						
ANR	86520	Symbol	zend_string_copy		85253						
ANR	86521	Symbol	ZEND_ACC_CALL_VIA_TRAMPOLINE		85253						
ANR	86522	Symbol	* skip -> prev_execute_data -> opline		85253						
ANR	86523	Symbol	* func -> common		85253						
ANR	86524	Symbol	prev -> opline -> lineno		85253						
ANR	86525	Symbol	* skip -> prev_execute_data		85253						
ANR	86526	Symbol	zend_generator_check_placeholder_frame		85253						
ANR	86527	Symbol	skip -> prev_execute_data		85253						
ANR	86528	Symbol	skip -> opline -> lineno		85253						
ANR	86529	Symbol	ptr -> func -> common		85253						
ANR	86530	Symbol	* * skip -> prev_execute_data		85253						
ANR	86531	Symbol	skip -> prev_execute_data -> func -> common . type		85253						
ANR	86532	Symbol	* prev		85253						
ANR	86533	Symbol	prev -> func -> op_array . filename		85253						
ANR	86534	Symbol	* ptr -> opline		85253						
ANR	86535	Symbol	stack_frame		85253						
ANR	86536	Symbol	prev -> opline		85253						
ANR	86537	Symbol	ZEND_INCLUDE_OR_EVAL		85253						
ANR	86538	Symbol	ptr -> opline -> extended_value		85253						
ANR	86539	Symbol	Z_ARRVAL_P		85253						
ANR	86540	Symbol	skip -> opline		85253						
ANR	86541	Symbol	prev_call -> func		85253						
ANR	86542	Symbol	skip -> func		85253						
ANR	86543	Symbol	func -> common . function_name		85253						
ANR	86544	Symbol	* * func		85253						
ANR	86545	Symbol	skip -> prev_execute_data -> opline -> opcode		85253						
ANR	86546	Symbol	DEBUG_BACKTRACE_PROVIDE_OBJECT		85253						
ANR	86547	Symbol	ptr		85253						
ANR	86548	Symbol	* prev_call		85253						
ANR	86549	Symbol	args		85253						
ANR	86550	Symbol	lineno		85253						
ANR	86551	Symbol	func		85253						
ANR	86552	Symbol	function_name		85253						
ANR	86553	Symbol	prev_call -> func -> common . fn_flags		85253						
ANR	86554	Symbol	* skip -> func		85253						
ANR	86555	Symbol	skip -> prev_execute_data -> func		85253						
ANR	86556	Symbol	include_filename		85253						
ANR	86557	Symbol	skip -> func -> op_array . filename		85253						
ANR	86558	DeclStmt									
ANR	86559	Decl							zend_long	zend_long	options
ANR	86560	DeclStmt									
ANR	86561	Decl							zend_long	zend_long	limit
ANR	86562	DeclStmt									
ANR	86563	Decl							zend_string	zend_string *	extension_name
ANR	86564	DeclStmt									
ANR	86565	Decl							zend_string	zend_string *	lcname
ANR	86566	DeclStmt									
ANR	86567	Decl							zend_string	zend_string *	extension_name
ANR	86568	DeclStmt									
ANR	86569	Decl							zend_string	zend_string *	lcname
ANR	86570	DeclStmt									
ANR	86571	Decl							int	int	array
ANR	86572	DeclStmt									
ANR	86573	Decl							zend_module_entry	zend_module_entry *	module
ANR	86574	DeclStmt									
ANR	86575	Decl							zend_function	zend_function *	zif
