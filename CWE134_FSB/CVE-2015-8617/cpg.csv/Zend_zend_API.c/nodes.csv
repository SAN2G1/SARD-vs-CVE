command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	30572	File	data/converged/CVE-2015-8617_php-src/Zend_zend_API.c								
ANR	30573	DeclStmt									
ANR	30574	Decl							ZEND_API HashTable	ZEND_API HashTable	module_registry
ANR	30575	DeclStmt									
ANR	30576	Decl							zend_module_entry	zend_module_entry * *	module_request_startup_handlers
ANR	30577	DeclStmt									
ANR	30578	Decl							zend_module_entry	zend_module_entry * *	module_request_shutdown_handlers
ANR	30579	DeclStmt									
ANR	30580	Decl							zend_module_entry	zend_module_entry * *	module_post_deactivate_handlers
ANR	30581	DeclStmt									
ANR	30582	Decl							zend_class_entry	zend_class_entry * *	class_cleanup_handlers
ANR	30583	Function	zend_get_parameters	47:0:2060:2708							
ANR	30584	FunctionDef	"zend_get_parameters (int ht , int param_count)"		30583	0					
ANR	30585	CompoundStatement		48:0:2133:2708	30583	0					
ANR	30586	IdentifierDeclStatement	int arg_count ;	49:1:2136:2149	30583	0	True				
ANR	30587	IdentifierDecl	arg_count		30583	0					
ANR	30588	IdentifierDeclType	int		30583	0					
ANR	30589	Identifier	arg_count		30583	1					
ANR	30590	IdentifierDeclStatement	va_list ptr ;	50:1:2152:2163	30583	1	True				
ANR	30591	IdentifierDecl	ptr		30583	0					
ANR	30592	IdentifierDeclType	va_list		30583	0					
ANR	30593	Identifier	ptr		30583	1					
ANR	30594	IdentifierDeclStatement	"zval * * param , * param_ptr ;"	51:1:2166:2190	30583	2	True				
ANR	30595	IdentifierDecl	* * param		30583	0					
ANR	30596	IdentifierDeclType	zval * *		30583	0					
ANR	30597	Identifier	param		30583	1					
ANR	30598	IdentifierDecl	* param_ptr		30583	1					
ANR	30599	IdentifierDeclType	zval *		30583	0					
ANR	30600	Identifier	param_ptr		30583	1					
ANR	30601	ExpressionStatement	"param_ptr = ZEND_CALL_ARG ( EG ( current_execute_data ) , 1 )"	53:1:2194:2248	30583	3	True				
ANR	30602	AssignmentExpression	"param_ptr = ZEND_CALL_ARG ( EG ( current_execute_data ) , 1 )"		30583	0		=			
ANR	30603	Identifier	param_ptr		30583	0					
ANR	30604	CallExpression	"ZEND_CALL_ARG ( EG ( current_execute_data ) , 1 )"		30583	1					
ANR	30605	Callee	ZEND_CALL_ARG		30583	0					
ANR	30606	Identifier	ZEND_CALL_ARG		30583	0					
ANR	30607	ArgumentList	EG ( current_execute_data )		30583	1					
ANR	30608	Argument	EG ( current_execute_data )		30583	0					
ANR	30609	CallExpression	EG ( current_execute_data )		30583	0					
ANR	30610	Callee	EG		30583	0					
ANR	30611	Identifier	EG		30583	0					
ANR	30612	ArgumentList	current_execute_data		30583	1					
ANR	30613	Argument	current_execute_data		30583	0					
ANR	30614	Identifier	current_execute_data		30583	0					
ANR	30615	Argument	1		30583	1					
ANR	30616	PrimaryExpression	1		30583	0					
ANR	30617	ExpressionStatement	arg_count = ZEND_CALL_NUM_ARGS ( EG ( current_execute_data ) )	54:1:2251:2307	30583	4	True				
ANR	30618	AssignmentExpression	arg_count = ZEND_CALL_NUM_ARGS ( EG ( current_execute_data ) )		30583	0		=			
ANR	30619	Identifier	arg_count		30583	0					
ANR	30620	CallExpression	ZEND_CALL_NUM_ARGS ( EG ( current_execute_data ) )		30583	1					
ANR	30621	Callee	ZEND_CALL_NUM_ARGS		30583	0					
ANR	30622	Identifier	ZEND_CALL_NUM_ARGS		30583	0					
ANR	30623	ArgumentList	EG ( current_execute_data )		30583	1					
ANR	30624	Argument	EG ( current_execute_data )		30583	0					
ANR	30625	CallExpression	EG ( current_execute_data )		30583	0					
ANR	30626	Callee	EG		30583	0					
ANR	30627	Identifier	EG		30583	0					
ANR	30628	ArgumentList	current_execute_data		30583	1					
ANR	30629	Argument	current_execute_data		30583	0					
ANR	30630	Identifier	current_execute_data		30583	0					
ANR	30631	IfStatement	if ( param_count > arg_count )		30583	5					
ANR	30632	Condition	param_count > arg_count	56:5:2315:2335	30583	0	True				
ANR	30633	RelationalExpression	param_count > arg_count		30583	0		>			
ANR	30634	Identifier	param_count		30583	0					
ANR	30635	Identifier	arg_count		30583	1					
ANR	30636	CompoundStatement		9:28:204:204	30583	1					
ANR	30637	ReturnStatement	return FAILURE ;	57:2:2342:2356	30583	0	True				
ANR	30638	Identifier	FAILURE		30583	0					
ANR	30639	ExpressionStatement	"va_start ( ptr , param_count )"	60:1:2363:2389	30583	6	True				
ANR	30640	CallExpression	"va_start ( ptr , param_count )"		30583	0					
ANR	30641	Callee	va_start		30583	0					
ANR	30642	Identifier	va_start		30583	0					
ANR	30643	ArgumentList	ptr		30583	1					
ANR	30644	Argument	ptr		30583	0					
ANR	30645	Identifier	ptr		30583	0					
ANR	30646	Argument	param_count		30583	1					
ANR	30647	Identifier	param_count		30583	0					
ANR	30648	WhileStatement	while ( param_count -- > 0 )		30583	7					
ANR	30649	Condition	param_count -- > 0	62:8:2400:2414	30583	0	True				
ANR	30650	RelationalExpression	param_count -- > 0		30583	0		>			
ANR	30651	PostIncDecOperationExpression	param_count --		30583	0					
ANR	30652	Identifier	param_count		30583	0					
ANR	30653	IncDec	--		30583	1					
ANR	30654	PrimaryExpression	0		30583	1					
ANR	30655	CompoundStatement		15:25:283:283	30583	1					
ANR	30656	Statement	param	63:2:2421:2425	30583	0	True				
ANR	30657	Statement	=	63:8:2427:2427	30583	1	True				
ANR	30658	Statement	va_arg	63:10:2429:2434	30583	2	True				
ANR	30659	Statement	(	63:16:2435:2435	30583	3	True				
ANR	30660	Statement	ptr	63:17:2436:2438	30583	4	True				
ANR	30661	Statement	","	63:20:2439:2439	30583	5	True				
ANR	30662	Statement	zval	63:22:2441:2444	30583	6	True				
ANR	30663	Statement	*	63:27:2446:2446	30583	7	True				
ANR	30664	Statement	*	63:28:2447:2447	30583	8	True				
ANR	30665	Statement	)	63:29:2448:2448	30583	9	True				
ANR	30666	ExpressionStatement		63:30:2449:2449	30583	10	True				
ANR	30667	IfStatement	if ( ! Z_ISREF_P ( param_ptr ) && Z_REFCOUNT_P ( param_ptr ) > 1 )		30583	11					
ANR	30668	Condition	! Z_ISREF_P ( param_ptr ) && Z_REFCOUNT_P ( param_ptr ) > 1	64:6:2457:2508	30583	0	True				
ANR	30669	AndExpression	! Z_ISREF_P ( param_ptr ) && Z_REFCOUNT_P ( param_ptr ) > 1		30583	0		&&			
ANR	30670	UnaryOperationExpression	! Z_ISREF_P ( param_ptr )		30583	0					
ANR	30671	UnaryOperator	!		30583	0					
ANR	30672	CallExpression	Z_ISREF_P ( param_ptr )		30583	1					
ANR	30673	Callee	Z_ISREF_P		30583	0					
ANR	30674	Identifier	Z_ISREF_P		30583	0					
ANR	30675	ArgumentList	param_ptr		30583	1					
ANR	30676	Argument	param_ptr		30583	0					
ANR	30677	Identifier	param_ptr		30583	0					
ANR	30678	RelationalExpression	Z_REFCOUNT_P ( param_ptr ) > 1		30583	1		>			
ANR	30679	CallExpression	Z_REFCOUNT_P ( param_ptr )		30583	0					
ANR	30680	Callee	Z_REFCOUNT_P		30583	0					
ANR	30681	Identifier	Z_REFCOUNT_P		30583	0					
ANR	30682	ArgumentList	param_ptr		30583	1					
ANR	30683	Argument	param_ptr		30583	0					
ANR	30684	Identifier	param_ptr		30583	0					
ANR	30685	PrimaryExpression	1		30583	1					
ANR	30686	CompoundStatement		18:3:382:394	30583	1					
ANR	30687	IdentifierDeclStatement	zval new_tmp ;	65:3:2516:2528	30583	0	True				
ANR	30688	IdentifierDecl	new_tmp		30583	0					
ANR	30689	IdentifierDeclType	zval		30583	0					
ANR	30690	Identifier	new_tmp		30583	1					
ANR	30691	ExpressionStatement	"ZVAL_DUP ( & new_tmp , param_ptr )"	67:3:2534:2563	30583	1	True				
ANR	30692	CallExpression	"ZVAL_DUP ( & new_tmp , param_ptr )"		30583	0					
ANR	30693	Callee	ZVAL_DUP		30583	0					
ANR	30694	Identifier	ZVAL_DUP		30583	0					
ANR	30695	ArgumentList	& new_tmp		30583	1					
ANR	30696	Argument	& new_tmp		30583	0					
ANR	30697	UnaryOperationExpression	& new_tmp		30583	0					
ANR	30698	UnaryOperator	&		30583	0					
ANR	30699	Identifier	new_tmp		30583	1					
ANR	30700	Argument	param_ptr		30583	1					
ANR	30701	Identifier	param_ptr		30583	0					
ANR	30702	ExpressionStatement	Z_DELREF_P ( param_ptr )	68:3:2568:2589	30583	2	True				
ANR	30703	CallExpression	Z_DELREF_P ( param_ptr )		30583	0					
ANR	30704	Callee	Z_DELREF_P		30583	0					
ANR	30705	Identifier	Z_DELREF_P		30583	0					
ANR	30706	ArgumentList	param_ptr		30583	1					
ANR	30707	Argument	param_ptr		30583	0					
ANR	30708	Identifier	param_ptr		30583	0					
ANR	30709	ExpressionStatement	"ZVAL_COPY_VALUE ( param_ptr , & new_tmp )"	69:3:2594:2630	30583	3	True				
ANR	30710	CallExpression	"ZVAL_COPY_VALUE ( param_ptr , & new_tmp )"		30583	0					
ANR	30711	Callee	ZVAL_COPY_VALUE		30583	0					
ANR	30712	Identifier	ZVAL_COPY_VALUE		30583	0					
ANR	30713	ArgumentList	param_ptr		30583	1					
ANR	30714	Argument	param_ptr		30583	0					
ANR	30715	Identifier	param_ptr		30583	0					
ANR	30716	Argument	& new_tmp		30583	1					
ANR	30717	UnaryOperationExpression	& new_tmp		30583	0					
ANR	30718	UnaryOperator	&		30583	0					
ANR	30719	Identifier	new_tmp		30583	1					
ANR	30720	ExpressionStatement	* param = param_ptr	71:2:2638:2656	30583	12	True				
ANR	30721	AssignmentExpression	* param = param_ptr		30583	0		=			
ANR	30722	UnaryOperationExpression	* param		30583	0					
ANR	30723	UnaryOperator	*		30583	0					
ANR	30724	Identifier	param		30583	1					
ANR	30725	Identifier	param_ptr		30583	1					
ANR	30726	ExpressionStatement	param_ptr ++	72:2:2660:2671	30583	13	True				
ANR	30727	PostIncDecOperationExpression	param_ptr ++		30583	0					
ANR	30728	Identifier	param_ptr		30583	0					
ANR	30729	IncDec	++		30583	1					
ANR	30730	ExpressionStatement	va_end ( ptr )	74:1:2677:2688	30583	8	True				
ANR	30731	CallExpression	va_end ( ptr )		30583	0					
ANR	30732	Callee	va_end		30583	0					
ANR	30733	Identifier	va_end		30583	0					
ANR	30734	ArgumentList	ptr		30583	1					
ANR	30735	Argument	ptr		30583	0					
ANR	30736	Identifier	ptr		30583	0					
ANR	30737	ReturnStatement	return SUCCESS ;	76:1:2692:2706	30583	9	True				
ANR	30738	Identifier	SUCCESS		30583	0					
ANR	30739	ReturnType	ZEND_API int		30583	1					
ANR	30740	Identifier	zend_get_parameters		30583	2					
ANR	30741	ParameterList	"int ht , int param_count"		30583	3					
ANR	30742	Parameter	int ht	47:33:2093:2098	30583	0	True				
ANR	30743	ParameterType	int		30583	0					
ANR	30744	Identifier	ht		30583	1					
ANR	30745	Parameter	int param_count	47:41:2101:2115	30583	1	True				
ANR	30746	ParameterType	int		30583	0					
ANR	30747	Identifier	param_count		30583	1					
ANR	30748	CFGEntryNode	ENTRY		30583		True				
ANR	30749	CFGExitNode	EXIT		30583		True				
ANR	30750	Symbol	EG		30583						
ANR	30751	Symbol	SUCCESS		30583						
ANR	30752	Symbol	param_count		30583						
ANR	30753	Symbol	ZEND_CALL_ARG		30583						
ANR	30754	Symbol	param_ptr		30583						
ANR	30755	Symbol	current_execute_data		30583						
ANR	30756	Symbol	ht		30583						
ANR	30757	Symbol	FAILURE		30583						
ANR	30758	Symbol	Z_REFCOUNT_P		30583						
ANR	30759	Symbol	ptr		30583						
ANR	30760	Symbol	* param		30583						
ANR	30761	Symbol	& new_tmp		30583						
ANR	30762	Symbol	param		30583						
ANR	30763	Symbol	new_tmp		30583						
ANR	30764	Symbol	ZEND_CALL_NUM_ARGS		30583						
ANR	30765	Symbol	Z_ISREF_P		30583						
ANR	30766	Symbol	arg_count		30583						
ANR	30767	Function	zend_get_parameters_ex	82:0:2819:3276							
ANR	30768	FunctionDef	zend_get_parameters_ex (int param_count)		30767	0					
ANR	30769	CompoundStatement		83:0:2887:3276	30767	0					
ANR	30770	IdentifierDeclStatement	int arg_count ;	84:1:2890:2903	30767	0	True				
ANR	30771	IdentifierDecl	arg_count		30767	0					
ANR	30772	IdentifierDeclType	int		30767	0					
ANR	30773	Identifier	arg_count		30767	1					
ANR	30774	IdentifierDeclStatement	va_list ptr ;	85:1:2906:2917	30767	1	True				
ANR	30775	IdentifierDecl	ptr		30767	0					
ANR	30776	IdentifierDeclType	va_list		30767	0					
ANR	30777	Identifier	ptr		30767	1					
ANR	30778	IdentifierDeclStatement	"zval * * param , * param_ptr ;"	86:1:2920:2944	30767	2	True				
ANR	30779	IdentifierDecl	* * param		30767	0					
ANR	30780	IdentifierDeclType	zval * *		30767	0					
ANR	30781	Identifier	param		30767	1					
ANR	30782	IdentifierDecl	* param_ptr		30767	1					
ANR	30783	IdentifierDeclType	zval *		30767	0					
ANR	30784	Identifier	param_ptr		30767	1					
ANR	30785	ExpressionStatement	"param_ptr = ZEND_CALL_ARG ( EG ( current_execute_data ) , 1 )"	88:1:2948:3002	30767	3	True				
ANR	30786	AssignmentExpression	"param_ptr = ZEND_CALL_ARG ( EG ( current_execute_data ) , 1 )"		30767	0		=			
ANR	30787	Identifier	param_ptr		30767	0					
ANR	30788	CallExpression	"ZEND_CALL_ARG ( EG ( current_execute_data ) , 1 )"		30767	1					
ANR	30789	Callee	ZEND_CALL_ARG		30767	0					
ANR	30790	Identifier	ZEND_CALL_ARG		30767	0					
ANR	30791	ArgumentList	EG ( current_execute_data )		30767	1					
ANR	30792	Argument	EG ( current_execute_data )		30767	0					
ANR	30793	CallExpression	EG ( current_execute_data )		30767	0					
ANR	30794	Callee	EG		30767	0					
ANR	30795	Identifier	EG		30767	0					
ANR	30796	ArgumentList	current_execute_data		30767	1					
ANR	30797	Argument	current_execute_data		30767	0					
ANR	30798	Identifier	current_execute_data		30767	0					
ANR	30799	Argument	1		30767	1					
ANR	30800	PrimaryExpression	1		30767	0					
ANR	30801	ExpressionStatement	arg_count = ZEND_CALL_NUM_ARGS ( EG ( current_execute_data ) )	89:1:3005:3061	30767	4	True				
ANR	30802	AssignmentExpression	arg_count = ZEND_CALL_NUM_ARGS ( EG ( current_execute_data ) )		30767	0		=			
ANR	30803	Identifier	arg_count		30767	0					
ANR	30804	CallExpression	ZEND_CALL_NUM_ARGS ( EG ( current_execute_data ) )		30767	1					
ANR	30805	Callee	ZEND_CALL_NUM_ARGS		30767	0					
ANR	30806	Identifier	ZEND_CALL_NUM_ARGS		30767	0					
ANR	30807	ArgumentList	EG ( current_execute_data )		30767	1					
ANR	30808	Argument	EG ( current_execute_data )		30767	0					
ANR	30809	CallExpression	EG ( current_execute_data )		30767	0					
ANR	30810	Callee	EG		30767	0					
ANR	30811	Identifier	EG		30767	0					
ANR	30812	ArgumentList	current_execute_data		30767	1					
ANR	30813	Argument	current_execute_data		30767	0					
ANR	30814	Identifier	current_execute_data		30767	0					
ANR	30815	IfStatement	if ( param_count > arg_count )		30767	5					
ANR	30816	Condition	param_count > arg_count	91:5:3069:3089	30767	0	True				
ANR	30817	RelationalExpression	param_count > arg_count		30767	0		>			
ANR	30818	Identifier	param_count		30767	0					
ANR	30819	Identifier	arg_count		30767	1					
ANR	30820	CompoundStatement		9:28:204:204	30767	1					
ANR	30821	ReturnStatement	return FAILURE ;	92:2:3096:3110	30767	0	True				
ANR	30822	Identifier	FAILURE		30767	0					
ANR	30823	ExpressionStatement	"va_start ( ptr , param_count )"	95:1:3117:3143	30767	6	True				
ANR	30824	CallExpression	"va_start ( ptr , param_count )"		30767	0					
ANR	30825	Callee	va_start		30767	0					
ANR	30826	Identifier	va_start		30767	0					
ANR	30827	ArgumentList	ptr		30767	1					
ANR	30828	Argument	ptr		30767	0					
ANR	30829	Identifier	ptr		30767	0					
ANR	30830	Argument	param_count		30767	1					
ANR	30831	Identifier	param_count		30767	0					
ANR	30832	WhileStatement	while ( param_count -- > 0 )		30767	7					
ANR	30833	Condition	param_count -- > 0	96:8:3153:3167	30767	0	True				
ANR	30834	RelationalExpression	param_count -- > 0		30767	0		>			
ANR	30835	PostIncDecOperationExpression	param_count --		30767	0					
ANR	30836	Identifier	param_count		30767	0					
ANR	30837	IncDec	--		30767	1					
ANR	30838	PrimaryExpression	0		30767	1					
ANR	30839	CompoundStatement		14:25:282:282	30767	1					
ANR	30840	Statement	param	97:2:3174:3178	30767	0	True				
ANR	30841	Statement	=	97:8:3180:3180	30767	1	True				
ANR	30842	Statement	va_arg	97:10:3182:3187	30767	2	True				
ANR	30843	Statement	(	97:16:3188:3188	30767	3	True				
ANR	30844	Statement	ptr	97:17:3189:3191	30767	4	True				
ANR	30845	Statement	","	97:20:3192:3192	30767	5	True				
ANR	30846	Statement	zval	97:22:3194:3197	30767	6	True				
ANR	30847	Statement	*	97:27:3199:3199	30767	7	True				
ANR	30848	Statement	*	97:28:3200:3200	30767	8	True				
ANR	30849	Statement	)	97:29:3201:3201	30767	9	True				
ANR	30850	ExpressionStatement		97:30:3202:3202	30767	10	True				
ANR	30851	ExpressionStatement	* param = param_ptr	98:2:3206:3224	30767	11	True				
ANR	30852	AssignmentExpression	* param = param_ptr		30767	0		=			
ANR	30853	UnaryOperationExpression	* param		30767	0					
ANR	30854	UnaryOperator	*		30767	0					
ANR	30855	Identifier	param		30767	1					
ANR	30856	Identifier	param_ptr		30767	1					
ANR	30857	ExpressionStatement	param_ptr ++	99:2:3228:3239	30767	12	True				
ANR	30858	PostIncDecOperationExpression	param_ptr ++		30767	0					
ANR	30859	Identifier	param_ptr		30767	0					
ANR	30860	IncDec	++		30767	1					
ANR	30861	ExpressionStatement	va_end ( ptr )	101:1:3245:3256	30767	8	True				
ANR	30862	CallExpression	va_end ( ptr )		30767	0					
ANR	30863	Callee	va_end		30767	0					
ANR	30864	Identifier	va_end		30767	0					
ANR	30865	ArgumentList	ptr		30767	1					
ANR	30866	Argument	ptr		30767	0					
ANR	30867	Identifier	ptr		30767	0					
ANR	30868	ReturnStatement	return SUCCESS ;	103:1:3260:3274	30767	9	True				
ANR	30869	Identifier	SUCCESS		30767	0					
ANR	30870	ReturnType	ZEND_API int		30767	1					
ANR	30871	Identifier	zend_get_parameters_ex		30767	2					
ANR	30872	ParameterList	int param_count		30767	3					
ANR	30873	Parameter	int param_count	82:36:2855:2869	30767	0	True				
ANR	30874	ParameterType	int		30767	0					
ANR	30875	Identifier	param_count		30767	1					
ANR	30876	CFGEntryNode	ENTRY		30767		True				
ANR	30877	CFGExitNode	EXIT		30767		True				
ANR	30878	Symbol	EG		30767						
ANR	30879	Symbol	SUCCESS		30767						
ANR	30880	Symbol	param_count		30767						
ANR	30881	Symbol	param		30767						
ANR	30882	Symbol	ZEND_CALL_ARG		30767						
ANR	30883	Symbol	param_ptr		30767						
ANR	30884	Symbol	current_execute_data		30767						
ANR	30885	Symbol	ZEND_CALL_NUM_ARGS		30767						
ANR	30886	Symbol	FAILURE		30767						
ANR	30887	Symbol	arg_count		30767						
ANR	30888	Symbol	ptr		30767						
ANR	30889	Symbol	* param		30767						
ANR	30890	Function	_zend_get_parameters_array_ex	107:0:3289:3716							
ANR	30891	FunctionDef	"_zend_get_parameters_array_ex (int param_count , zval * argument_array)"		30890	0					
ANR	30892	CompoundStatement		108:0:3381:3716	30890	0					
ANR	30893	IdentifierDeclStatement	zval * param_ptr ;	109:1:3384:3399	30890	0	True				
ANR	30894	IdentifierDecl	* param_ptr		30890	0					
ANR	30895	IdentifierDeclType	zval *		30890	0					
ANR	30896	Identifier	param_ptr		30890	1					
ANR	30897	IdentifierDeclStatement	int arg_count ;	110:1:3402:3415	30890	1	True				
ANR	30898	IdentifierDecl	arg_count		30890	0					
ANR	30899	IdentifierDeclType	int		30890	0					
ANR	30900	Identifier	arg_count		30890	1					
ANR	30901	ExpressionStatement	"param_ptr = ZEND_CALL_ARG ( EG ( current_execute_data ) , 1 )"	112:1:3419:3473	30890	2	True				
ANR	30902	AssignmentExpression	"param_ptr = ZEND_CALL_ARG ( EG ( current_execute_data ) , 1 )"		30890	0		=			
ANR	30903	Identifier	param_ptr		30890	0					
ANR	30904	CallExpression	"ZEND_CALL_ARG ( EG ( current_execute_data ) , 1 )"		30890	1					
ANR	30905	Callee	ZEND_CALL_ARG		30890	0					
ANR	30906	Identifier	ZEND_CALL_ARG		30890	0					
ANR	30907	ArgumentList	EG ( current_execute_data )		30890	1					
ANR	30908	Argument	EG ( current_execute_data )		30890	0					
ANR	30909	CallExpression	EG ( current_execute_data )		30890	0					
ANR	30910	Callee	EG		30890	0					
ANR	30911	Identifier	EG		30890	0					
ANR	30912	ArgumentList	current_execute_data		30890	1					
ANR	30913	Argument	current_execute_data		30890	0					
ANR	30914	Identifier	current_execute_data		30890	0					
ANR	30915	Argument	1		30890	1					
ANR	30916	PrimaryExpression	1		30890	0					
ANR	30917	ExpressionStatement	arg_count = ZEND_CALL_NUM_ARGS ( EG ( current_execute_data ) )	113:1:3476:3532	30890	3	True				
ANR	30918	AssignmentExpression	arg_count = ZEND_CALL_NUM_ARGS ( EG ( current_execute_data ) )		30890	0		=			
ANR	30919	Identifier	arg_count		30890	0					
ANR	30920	CallExpression	ZEND_CALL_NUM_ARGS ( EG ( current_execute_data ) )		30890	1					
ANR	30921	Callee	ZEND_CALL_NUM_ARGS		30890	0					
ANR	30922	Identifier	ZEND_CALL_NUM_ARGS		30890	0					
ANR	30923	ArgumentList	EG ( current_execute_data )		30890	1					
ANR	30924	Argument	EG ( current_execute_data )		30890	0					
ANR	30925	CallExpression	EG ( current_execute_data )		30890	0					
ANR	30926	Callee	EG		30890	0					
ANR	30927	Identifier	EG		30890	0					
ANR	30928	ArgumentList	current_execute_data		30890	1					
ANR	30929	Argument	current_execute_data		30890	0					
ANR	30930	Identifier	current_execute_data		30890	0					
ANR	30931	IfStatement	if ( param_count > arg_count )		30890	4					
ANR	30932	Condition	param_count > arg_count	115:5:3540:3560	30890	0	True				
ANR	30933	RelationalExpression	param_count > arg_count		30890	0		>			
ANR	30934	Identifier	param_count		30890	0					
ANR	30935	Identifier	arg_count		30890	1					
ANR	30936	CompoundStatement		8:28:181:181	30890	1					
ANR	30937	ReturnStatement	return FAILURE ;	116:2:3567:3581	30890	0	True				
ANR	30938	Identifier	FAILURE		30890	0					
ANR	30939	WhileStatement	while ( param_count -- > 0 )		30890	5					
ANR	30940	Condition	param_count -- > 0	119:8:3595:3609	30890	0	True				
ANR	30941	RelationalExpression	param_count -- > 0		30890	0		>			
ANR	30942	PostIncDecOperationExpression	param_count --		30890	0					
ANR	30943	Identifier	param_count		30890	0					
ANR	30944	IncDec	--		30890	1					
ANR	30945	PrimaryExpression	0		30890	1					
ANR	30946	CompoundStatement		12:25:230:230	30890	1					
ANR	30947	ExpressionStatement	"ZVAL_COPY_VALUE ( argument_array , param_ptr )"	120:2:3616:3658	30890	0	True				
ANR	30948	CallExpression	"ZVAL_COPY_VALUE ( argument_array , param_ptr )"		30890	0					
ANR	30949	Callee	ZVAL_COPY_VALUE		30890	0					
ANR	30950	Identifier	ZVAL_COPY_VALUE		30890	0					
ANR	30951	ArgumentList	argument_array		30890	1					
ANR	30952	Argument	argument_array		30890	0					
ANR	30953	Identifier	argument_array		30890	0					
ANR	30954	Argument	param_ptr		30890	1					
ANR	30955	Identifier	param_ptr		30890	0					
ANR	30956	ExpressionStatement	argument_array ++	121:2:3662:3678	30890	1	True				
ANR	30957	PostIncDecOperationExpression	argument_array ++		30890	0					
ANR	30958	Identifier	argument_array		30890	0					
ANR	30959	IncDec	++		30890	1					
ANR	30960	ExpressionStatement	param_ptr ++	122:2:3682:3693	30890	2	True				
ANR	30961	PostIncDecOperationExpression	param_ptr ++		30890	0					
ANR	30962	Identifier	param_ptr		30890	0					
ANR	30963	IncDec	++		30890	1					
ANR	30964	ReturnStatement	return SUCCESS ;	125:1:3700:3714	30890	6	True				
ANR	30965	Identifier	SUCCESS		30890	0					
ANR	30966	ReturnType	ZEND_API int		30890	1					
ANR	30967	Identifier	_zend_get_parameters_array_ex		30890	2					
ANR	30968	ParameterList	"int param_count , zval * argument_array"		30890	3					
ANR	30969	Parameter	int param_count	107:43:3332:3346	30890	0	True				
ANR	30970	ParameterType	int		30890	0					
ANR	30971	Identifier	param_count		30890	1					
ANR	30972	Parameter	zval * argument_array	107:60:3349:3368	30890	1	True				
ANR	30973	ParameterType	zval *		30890	0					
ANR	30974	Identifier	argument_array		30890	1					
ANR	30975	CFGEntryNode	ENTRY		30890		True				
ANR	30976	CFGExitNode	EXIT		30890		True				
ANR	30977	Symbol	EG		30890						
ANR	30978	Symbol	SUCCESS		30890						
ANR	30979	Symbol	argument_array		30890						
ANR	30980	Symbol	param_count		30890						
ANR	30981	Symbol	ZEND_CALL_ARG		30890						
ANR	30982	Symbol	param_ptr		30890						
ANR	30983	Symbol	current_execute_data		30890						
ANR	30984	Symbol	ZEND_CALL_NUM_ARGS		30890						
ANR	30985	Symbol	FAILURE		30890						
ANR	30986	Symbol	arg_count		30890						
ANR	30987	Function	zend_copy_parameters_array	129:0:3729:4226							
ANR	30988	FunctionDef	"zend_copy_parameters_array (int param_count , zval * argument_array)"		30987	0					
ANR	30989	CompoundStatement		130:0:3818:4226	30987	0					
ANR	30990	IdentifierDeclStatement	zval * param_ptr ;	131:1:3821:3836	30987	0	True				
ANR	30991	IdentifierDecl	* param_ptr		30987	0					
ANR	30992	IdentifierDeclType	zval *		30987	0					
ANR	30993	Identifier	param_ptr		30987	1					
ANR	30994	IdentifierDeclStatement	int arg_count ;	132:1:3839:3852	30987	1	True				
ANR	30995	IdentifierDecl	arg_count		30987	0					
ANR	30996	IdentifierDeclType	int		30987	0					
ANR	30997	Identifier	arg_count		30987	1					
ANR	30998	ExpressionStatement	"param_ptr = ZEND_CALL_ARG ( EG ( current_execute_data ) , 1 )"	134:1:3856:3910	30987	2	True				
ANR	30999	AssignmentExpression	"param_ptr = ZEND_CALL_ARG ( EG ( current_execute_data ) , 1 )"		30987	0		=			
ANR	31000	Identifier	param_ptr		30987	0					
ANR	31001	CallExpression	"ZEND_CALL_ARG ( EG ( current_execute_data ) , 1 )"		30987	1					
ANR	31002	Callee	ZEND_CALL_ARG		30987	0					
ANR	31003	Identifier	ZEND_CALL_ARG		30987	0					
ANR	31004	ArgumentList	EG ( current_execute_data )		30987	1					
ANR	31005	Argument	EG ( current_execute_data )		30987	0					
ANR	31006	CallExpression	EG ( current_execute_data )		30987	0					
ANR	31007	Callee	EG		30987	0					
ANR	31008	Identifier	EG		30987	0					
ANR	31009	ArgumentList	current_execute_data		30987	1					
ANR	31010	Argument	current_execute_data		30987	0					
ANR	31011	Identifier	current_execute_data		30987	0					
ANR	31012	Argument	1		30987	1					
ANR	31013	PrimaryExpression	1		30987	0					
ANR	31014	ExpressionStatement	arg_count = ZEND_CALL_NUM_ARGS ( EG ( current_execute_data ) )	135:1:3913:3969	30987	3	True				
ANR	31015	AssignmentExpression	arg_count = ZEND_CALL_NUM_ARGS ( EG ( current_execute_data ) )		30987	0		=			
ANR	31016	Identifier	arg_count		30987	0					
ANR	31017	CallExpression	ZEND_CALL_NUM_ARGS ( EG ( current_execute_data ) )		30987	1					
ANR	31018	Callee	ZEND_CALL_NUM_ARGS		30987	0					
ANR	31019	Identifier	ZEND_CALL_NUM_ARGS		30987	0					
ANR	31020	ArgumentList	EG ( current_execute_data )		30987	1					
ANR	31021	Argument	EG ( current_execute_data )		30987	0					
ANR	31022	CallExpression	EG ( current_execute_data )		30987	0					
ANR	31023	Callee	EG		30987	0					
ANR	31024	Identifier	EG		30987	0					
ANR	31025	ArgumentList	current_execute_data		30987	1					
ANR	31026	Argument	current_execute_data		30987	0					
ANR	31027	Identifier	current_execute_data		30987	0					
ANR	31028	IfStatement	if ( param_count > arg_count )		30987	4					
ANR	31029	Condition	param_count > arg_count	137:5:3977:3997	30987	0	True				
ANR	31030	RelationalExpression	param_count > arg_count		30987	0		>			
ANR	31031	Identifier	param_count		30987	0					
ANR	31032	Identifier	arg_count		30987	1					
ANR	31033	CompoundStatement		8:28:181:181	30987	1					
ANR	31034	ReturnStatement	return FAILURE ;	138:2:4004:4018	30987	0	True				
ANR	31035	Identifier	FAILURE		30987	0					
ANR	31036	WhileStatement	while ( param_count -- > 0 )		30987	5					
ANR	31037	Condition	param_count -- > 0	141:8:4032:4046	30987	0	True				
ANR	31038	RelationalExpression	param_count -- > 0		30987	0		>			
ANR	31039	PostIncDecOperationExpression	param_count --		30987	0					
ANR	31040	Identifier	param_count		30987	0					
ANR	31041	IncDec	--		30987	1					
ANR	31042	PrimaryExpression	0		30987	1					
ANR	31043	CompoundStatement		12:25:230:230	30987	1					
ANR	31044	IfStatement	if ( Z_REFCOUNTED_P ( param_ptr ) )		30987	0					
ANR	31045	Condition	Z_REFCOUNTED_P ( param_ptr )	142:6:4057:4081	30987	0	True				
ANR	31046	CallExpression	Z_REFCOUNTED_P ( param_ptr )		30987	0					
ANR	31047	Callee	Z_REFCOUNTED_P		30987	0					
ANR	31048	Identifier	Z_REFCOUNTED_P		30987	0					
ANR	31049	ArgumentList	param_ptr		30987	1					
ANR	31050	Argument	param_ptr		30987	0					
ANR	31051	Identifier	param_ptr		30987	0					
ANR	31052	CompoundStatement		13:33:265:265	30987	1					
ANR	31053	ExpressionStatement	Z_ADDREF_P ( param_ptr )	143:3:4089:4110	30987	0	True				
ANR	31054	CallExpression	Z_ADDREF_P ( param_ptr )		30987	0					
ANR	31055	Callee	Z_ADDREF_P		30987	0					
ANR	31056	Identifier	Z_ADDREF_P		30987	0					
ANR	31057	ArgumentList	param_ptr		30987	1					
ANR	31058	Argument	param_ptr		30987	0					
ANR	31059	Identifier	param_ptr		30987	0					
ANR	31060	ExpressionStatement	"zend_hash_next_index_insert_new ( Z_ARRVAL_P ( argument_array ) , param_ptr )"	145:2:4118:4188	30987	1	True				
ANR	31061	CallExpression	"zend_hash_next_index_insert_new ( Z_ARRVAL_P ( argument_array ) , param_ptr )"		30987	0					
ANR	31062	Callee	zend_hash_next_index_insert_new		30987	0					
ANR	31063	Identifier	zend_hash_next_index_insert_new		30987	0					
ANR	31064	ArgumentList	Z_ARRVAL_P ( argument_array )		30987	1					
ANR	31065	Argument	Z_ARRVAL_P ( argument_array )		30987	0					
ANR	31066	CallExpression	Z_ARRVAL_P ( argument_array )		30987	0					
ANR	31067	Callee	Z_ARRVAL_P		30987	0					
ANR	31068	Identifier	Z_ARRVAL_P		30987	0					
ANR	31069	ArgumentList	argument_array		30987	1					
ANR	31070	Argument	argument_array		30987	0					
ANR	31071	Identifier	argument_array		30987	0					
ANR	31072	Argument	param_ptr		30987	1					
ANR	31073	Identifier	param_ptr		30987	0					
ANR	31074	ExpressionStatement	param_ptr ++	146:2:4192:4203	30987	2	True				
ANR	31075	PostIncDecOperationExpression	param_ptr ++		30987	0					
ANR	31076	Identifier	param_ptr		30987	0					
ANR	31077	IncDec	++		30987	1					
ANR	31078	ReturnStatement	return SUCCESS ;	149:1:4210:4224	30987	6	True				
ANR	31079	Identifier	SUCCESS		30987	0					
ANR	31080	ReturnType	ZEND_API int		30987	1					
ANR	31081	Identifier	zend_copy_parameters_array		30987	2					
ANR	31082	ParameterList	"int param_count , zval * argument_array"		30987	3					
ANR	31083	Parameter	int param_count	129:40:3769:3783	30987	0	True				
ANR	31084	ParameterType	int		30987	0					
ANR	31085	Identifier	param_count		30987	1					
ANR	31086	Parameter	zval * argument_array	129:57:3786:3805	30987	1	True				
ANR	31087	ParameterType	zval *		30987	0					
ANR	31088	Identifier	argument_array		30987	1					
ANR	31089	CFGEntryNode	ENTRY		30987		True				
ANR	31090	CFGExitNode	EXIT		30987		True				
ANR	31091	Symbol	EG		30987						
ANR	31092	Symbol	SUCCESS		30987						
ANR	31093	Symbol	argument_array		30987						
ANR	31094	Symbol	param_count		30987						
ANR	31095	Symbol	ZEND_CALL_ARG		30987						
ANR	31096	Symbol	param_ptr		30987						
ANR	31097	Symbol	current_execute_data		30987						
ANR	31098	Symbol	ZEND_CALL_NUM_ARGS		30987						
ANR	31099	Symbol	Z_REFCOUNTED_P		30987						
ANR	31100	Symbol	Z_ARRVAL_P		30987						
ANR	31101	Symbol	FAILURE		30987						
ANR	31102	Symbol	arg_count		30987						
ANR	31103	Function	zend_wrong_param_count	153:0:4239:4524							
ANR	31104	FunctionDef	zend_wrong_param_count ()		31103	0					
ANR	31105	CompoundStatement		154:0:4302:4524	31103	0					
ANR	31106	IdentifierDeclStatement	const char * space ;	155:1:4305:4322	31103	0	True				
ANR	31107	IdentifierDecl	* space		31103	0					
ANR	31108	IdentifierDeclType	const char *		31103	0					
ANR	31109	Identifier	space		31103	1					
ANR	31110	IdentifierDeclStatement	const char * class_name = get_active_class_name ( & space ) ;	156:1:4325:4379	31103	1	True				
ANR	31111	IdentifierDecl	* class_name = get_active_class_name ( & space )		31103	0					
ANR	31112	IdentifierDeclType	const char *		31103	0					
ANR	31113	Identifier	class_name		31103	1					
ANR	31114	AssignmentExpression	* class_name = get_active_class_name ( & space )		31103	2		=			
ANR	31115	Identifier	class_name		31103	0					
ANR	31116	CallExpression	get_active_class_name ( & space )		31103	1					
ANR	31117	Callee	get_active_class_name		31103	0					
ANR	31118	Identifier	get_active_class_name		31103	0					
ANR	31119	ArgumentList	& space		31103	1					
ANR	31120	Argument	& space		31103	0					
ANR	31121	UnaryOperationExpression	& space		31103	0					
ANR	31122	UnaryOperator	&		31103	0					
ANR	31123	Identifier	space		31103	1					
ANR	31124	ExpressionStatement	"zend_internal_type_error ( ZEND_ARG_USES_STRICT_TYPES ( ) , ""Wrong parameter count for %s%s%s()"" , class_name , space , get_active_function_name ( ) )"	158:1:4383:4522	31103	2	True				
ANR	31125	CallExpression	"zend_internal_type_error ( ZEND_ARG_USES_STRICT_TYPES ( ) , ""Wrong parameter count for %s%s%s()"" , class_name , space , get_active_function_name ( ) )"		31103	0					
ANR	31126	Callee	zend_internal_type_error		31103	0					
ANR	31127	Identifier	zend_internal_type_error		31103	0					
ANR	31128	ArgumentList	ZEND_ARG_USES_STRICT_TYPES ( )		31103	1					
ANR	31129	Argument	ZEND_ARG_USES_STRICT_TYPES ( )		31103	0					
ANR	31130	CallExpression	ZEND_ARG_USES_STRICT_TYPES ( )		31103	0					
ANR	31131	Callee	ZEND_ARG_USES_STRICT_TYPES		31103	0					
ANR	31132	Identifier	ZEND_ARG_USES_STRICT_TYPES		31103	0					
ANR	31133	ArgumentList			31103	1					
ANR	31134	Argument	"""Wrong parameter count for %s%s%s()"""		31103	1					
ANR	31135	PrimaryExpression	"""Wrong parameter count for %s%s%s()"""		31103	0					
ANR	31136	Argument	class_name		31103	2					
ANR	31137	Identifier	class_name		31103	0					
ANR	31138	Argument	space		31103	3					
ANR	31139	Identifier	space		31103	0					
ANR	31140	Argument	get_active_function_name ( )		31103	4					
ANR	31141	CallExpression	get_active_function_name ( )		31103	0					
ANR	31142	Callee	get_active_function_name		31103	0					
ANR	31143	Identifier	get_active_function_name		31103	0					
ANR	31144	ArgumentList			31103	1					
ANR	31145	ReturnType	ZEND_API ZEND_COLD void		31103	1					
ANR	31146	Identifier	zend_wrong_param_count		31103	2					
ANR	31147	ParameterList			31103	3					
ANR	31148	CFGEntryNode	ENTRY		31103		True				
ANR	31149	CFGExitNode	EXIT		31103		True				
ANR	31150	Symbol	ZEND_ARG_USES_STRICT_TYPES		31103						
ANR	31151	Symbol	get_active_function_name		31103						
ANR	31152	Symbol	get_active_class_name		31103						
ANR	31153	Symbol	& space		31103						
ANR	31154	Symbol	class_name		31103						
ANR	31155	Symbol	space		31103						
ANR	31156	Function	zend_get_type_by_const	163:0:4574:5060							
ANR	31157	FunctionDef	zend_get_type_by_const (int type)		31156	0					
ANR	31158	CompoundStatement		164:0:4632:5060	31156	0					
ANR	31159	SwitchStatement	switch ( type )		31156	0					
ANR	31160	Condition	type	165:8:4642:4645	31156	0	True				
ANR	31161	Identifier	type		31156	0					
ANR	31162	CompoundStatement		2:14:15:15	31156	1					
ANR	31163	Label	case IS_FALSE :	166:2:4652:4665	31156	0	True				
ANR	31164	Identifier	IS_FALSE		31156	0					
ANR	31165	Label	case IS_TRUE :	167:2:4669:4681	31156	1	True				
ANR	31166	Identifier	IS_TRUE		31156	0					
ANR	31167	Label	case _IS_BOOL :	168:2:4685:4698	31156	2	True				
ANR	31168	Identifier	_IS_BOOL		31156	0					
ANR	31169	ReturnStatement	"return ""boolean"" ;"	169:3:4703:4719	31156	3	True				
ANR	31170	PrimaryExpression	"""boolean"""		31156	0					
ANR	31171	Label	case IS_LONG :	170:2:4723:4735	31156	4	True				
ANR	31172	Identifier	IS_LONG		31156	0					
ANR	31173	ReturnStatement	"return ""integer"" ;"	171:3:4740:4756	31156	5	True				
ANR	31174	PrimaryExpression	"""integer"""		31156	0					
ANR	31175	Label	case IS_DOUBLE :	172:2:4760:4774	31156	6	True				
ANR	31176	Identifier	IS_DOUBLE		31156	0					
ANR	31177	ReturnStatement	"return ""float"" ;"	173:3:4779:4793	31156	7	True				
ANR	31178	PrimaryExpression	"""float"""		31156	0					
ANR	31179	Label	case IS_STRING :	174:2:4797:4811	31156	8	True				
ANR	31180	Identifier	IS_STRING		31156	0					
ANR	31181	ReturnStatement	"return ""string"" ;"	175:3:4816:4831	31156	9	True				
ANR	31182	PrimaryExpression	"""string"""		31156	0					
ANR	31183	Label	case IS_OBJECT :	176:2:4835:4849	31156	10	True				
ANR	31184	Identifier	IS_OBJECT		31156	0					
ANR	31185	ReturnStatement	"return ""object"" ;"	177:3:4854:4869	31156	11	True				
ANR	31186	PrimaryExpression	"""object"""		31156	0					
ANR	31187	Label	case IS_RESOURCE :	178:2:4873:4889	31156	12	True				
ANR	31188	Identifier	IS_RESOURCE		31156	0					
ANR	31189	ReturnStatement	"return ""resource"" ;"	179:3:4894:4911	31156	13	True				
ANR	31190	PrimaryExpression	"""resource"""		31156	0					
ANR	31191	Label	case IS_NULL :	180:2:4915:4927	31156	14	True				
ANR	31192	Identifier	IS_NULL		31156	0					
ANR	31193	ReturnStatement	"return ""null"" ;"	181:3:4932:4945	31156	15	True				
ANR	31194	PrimaryExpression	"""null"""		31156	0					
ANR	31195	Label	case IS_CALLABLE :	182:2:4949:4965	31156	16	True				
ANR	31196	Identifier	IS_CALLABLE		31156	0					
ANR	31197	ReturnStatement	"return ""callable"" ;"	183:3:4970:4987	31156	17	True				
ANR	31198	PrimaryExpression	"""callable"""		31156	0					
ANR	31199	Label	case IS_ARRAY :	184:2:4991:5004	31156	18	True				
ANR	31200	Identifier	IS_ARRAY		31156	0					
ANR	31201	ReturnStatement	"return ""array"" ;"	185:3:5009:5023	31156	19	True				
ANR	31202	PrimaryExpression	"""array"""		31156	0					
ANR	31203	Label	default :	186:2:5027:5034	31156	20	True				
ANR	31204	Identifier	default		31156	0					
ANR	31205	ReturnStatement	"return ""unknown"" ;"	187:3:5039:5055	31156	21	True				
ANR	31206	PrimaryExpression	"""unknown"""		31156	0					
ANR	31207	ReturnType	ZEND_API char *		31156	1					
ANR	31208	Identifier	zend_get_type_by_const		31156	2					
ANR	31209	ParameterList	int type		31156	3					
ANR	31210	Parameter	int type	163:38:4612:4619	31156	0	True				
ANR	31211	ParameterType	int		31156	0					
ANR	31212	Identifier	type		31156	1					
ANR	31213	CFGEntryNode	ENTRY		31156		True				
ANR	31214	CFGExitNode	EXIT		31156		True				
ANR	31215	Symbol	type		31156						
ANR	31216	Function	zend_zval_type_name	192:0:5073:5202							
ANR	31217	FunctionDef	zend_zval_type_name (const zval * arg)		31216	0					
ANR	31218	CompoundStatement		193:0:5135:5202	31216	0					
ANR	31219	ExpressionStatement	ZVAL_DEREF ( arg )	194:1:5138:5153	31216	0	True				
ANR	31220	CallExpression	ZVAL_DEREF ( arg )		31216	0					
ANR	31221	Callee	ZVAL_DEREF		31216	0					
ANR	31222	Identifier	ZVAL_DEREF		31216	0					
ANR	31223	ArgumentList	arg		31216	1					
ANR	31224	Argument	arg		31216	0					
ANR	31225	Identifier	arg		31216	0					
ANR	31226	ReturnStatement	return zend_get_type_by_const ( Z_TYPE_P ( arg ) ) ;	195:1:5156:5200	31216	1	True				
ANR	31227	CallExpression	zend_get_type_by_const ( Z_TYPE_P ( arg ) )		31216	0					
ANR	31228	Callee	zend_get_type_by_const		31216	0					
ANR	31229	Identifier	zend_get_type_by_const		31216	0					
ANR	31230	ArgumentList	Z_TYPE_P ( arg )		31216	1					
ANR	31231	Argument	Z_TYPE_P ( arg )		31216	0					
ANR	31232	CallExpression	Z_TYPE_P ( arg )		31216	0					
ANR	31233	Callee	Z_TYPE_P		31216	0					
ANR	31234	Identifier	Z_TYPE_P		31216	0					
ANR	31235	ArgumentList	arg		31216	1					
ANR	31236	Argument	arg		31216	0					
ANR	31237	Identifier	arg		31216	0					
ANR	31238	ReturnType	ZEND_API char *		31216	1					
ANR	31239	Identifier	zend_zval_type_name		31216	2					
ANR	31240	ParameterList	const zval * arg		31216	3					
ANR	31241	Parameter	const zval * arg	192:35:5108:5122	31216	0	True				
ANR	31242	ParameterType	const zval *		31216	0					
ANR	31243	Identifier	arg		31216	1					
ANR	31244	CFGEntryNode	ENTRY		31216		True				
ANR	31245	CFGExitNode	EXIT		31216		True				
ANR	31246	Symbol	zend_get_type_by_const		31216						
ANR	31247	Symbol	arg		31216						
ANR	31248	Symbol	Z_TYPE_P		31216						
ANR	31249	Function	zend_wrong_paramers_count_error	200:0:5231:5982							
ANR	31250	FunctionDef	"zend_wrong_paramers_count_error (int num_args , int min_num_args , int max_num_args)"		31249	0					
ANR	31251	CompoundStatement		201:0:5361:5982	31249	0					
ANR	31252	IdentifierDeclStatement	zend_function * active_function = EG ( current_execute_data ) -> func ;	202:1:5364:5427	31249	0	True				
ANR	31253	IdentifierDecl	* active_function = EG ( current_execute_data ) -> func		31249	0					
ANR	31254	IdentifierDeclType	zend_function *		31249	0					
ANR	31255	Identifier	active_function		31249	1					
ANR	31256	AssignmentExpression	* active_function = EG ( current_execute_data ) -> func		31249	2		=			
ANR	31257	Identifier	active_function		31249	0					
ANR	31258	PtrMemberAccess	EG ( current_execute_data ) -> func		31249	1					
ANR	31259	CallExpression	EG ( current_execute_data )		31249	0					
ANR	31260	Callee	EG		31249	0					
ANR	31261	Identifier	EG		31249	0					
ANR	31262	ArgumentList	current_execute_data		31249	1					
ANR	31263	Argument	current_execute_data		31249	0					
ANR	31264	Identifier	current_execute_data		31249	0					
ANR	31265	Identifier	func		31249	1					
ANR	31266	IdentifierDeclStatement	"const char * class_name = active_function -> common . scope ? ZSTR_VAL ( active_function -> common . scope -> name ) : """" ;"	203:1:5430:5537	31249	1	True				
ANR	31267	IdentifierDecl	"* class_name = active_function -> common . scope ? ZSTR_VAL ( active_function -> common . scope -> name ) : """""		31249	0					
ANR	31268	IdentifierDeclType	const char *		31249	0					
ANR	31269	Identifier	class_name		31249	1					
ANR	31270	AssignmentExpression	"* class_name = active_function -> common . scope ? ZSTR_VAL ( active_function -> common . scope -> name ) : """""		31249	2		=			
ANR	31271	Identifier	class_name		31249	0					
ANR	31272	ConditionalExpression	"active_function -> common . scope ? ZSTR_VAL ( active_function -> common . scope -> name ) : """""		31249	1					
ANR	31273	Condition	active_function -> common . scope		31249	0					
ANR	31274	MemberAccess	active_function -> common . scope		31249	0					
ANR	31275	PtrMemberAccess	active_function -> common		31249	0					
ANR	31276	Identifier	active_function		31249	0					
ANR	31277	Identifier	common		31249	1					
ANR	31278	Identifier	scope		31249	1					
ANR	31279	CallExpression	ZSTR_VAL ( active_function -> common . scope -> name )		31249	1					
ANR	31280	Callee	ZSTR_VAL		31249	0					
ANR	31281	Identifier	ZSTR_VAL		31249	0					
ANR	31282	ArgumentList	active_function -> common . scope -> name		31249	1					
ANR	31283	Argument	active_function -> common . scope -> name		31249	0					
ANR	31284	PtrMemberAccess	active_function -> common . scope -> name		31249	0					
ANR	31285	MemberAccess	active_function -> common . scope		31249	0					
ANR	31286	PtrMemberAccess	active_function -> common		31249	0					
ANR	31287	Identifier	active_function		31249	0					
ANR	31288	Identifier	common		31249	1					
ANR	31289	Identifier	scope		31249	1					
ANR	31290	Identifier	name		31249	1					
ANR	31291	PrimaryExpression	""""""		31249	2					
ANR	31292	ExpressionStatement	"zend_internal_type_error ( ZEND_ARG_USES_STRICT_TYPES ( ) , ""%s%s%s() expects %s %d parameter%s, %d given"" , class_name , class_name [ 0 ] ? ""::"" : """" , ZSTR_VAL ( active_function -> common . function_name ) , min_num_args == max_num_args ? ""exactly"" : num_args < min_num_args ? ""at least"" : ""at most"" , num_args < min_num_args ? min_num_args : max_num_args , ( num_args < min_num_args ? min_num_args : max_num_args ) == 1 ? """" : ""s"" , num_args )"	205:1:5541:5980	31249	2	True				
ANR	31293	CallExpression	"zend_internal_type_error ( ZEND_ARG_USES_STRICT_TYPES ( ) , ""%s%s%s() expects %s %d parameter%s, %d given"" , class_name , class_name [ 0 ] ? ""::"" : """" , ZSTR_VAL ( active_function -> common . function_name ) , min_num_args == max_num_args ? ""exactly"" : num_args < min_num_args ? ""at least"" : ""at most"" , num_args < min_num_args ? min_num_args : max_num_args , ( num_args < min_num_args ? min_num_args : max_num_args ) == 1 ? """" : ""s"" , num_args )"		31249	0					
ANR	31294	Callee	zend_internal_type_error		31249	0					
ANR	31295	Identifier	zend_internal_type_error		31249	0					
ANR	31296	ArgumentList	ZEND_ARG_USES_STRICT_TYPES ( )		31249	1					
ANR	31297	Argument	ZEND_ARG_USES_STRICT_TYPES ( )		31249	0					
ANR	31298	CallExpression	ZEND_ARG_USES_STRICT_TYPES ( )		31249	0					
ANR	31299	Callee	ZEND_ARG_USES_STRICT_TYPES		31249	0					
ANR	31300	Identifier	ZEND_ARG_USES_STRICT_TYPES		31249	0					
ANR	31301	ArgumentList			31249	1					
ANR	31302	Argument	"""%s%s%s() expects %s %d parameter%s, %d given"""		31249	1					
ANR	31303	PrimaryExpression	"""%s%s%s() expects %s %d parameter%s, %d given"""		31249	0					
ANR	31304	Argument	class_name		31249	2					
ANR	31305	Identifier	class_name		31249	0					
ANR	31306	Argument	"class_name [ 0 ] ? ""::"" : """""		31249	3					
ANR	31307	ConditionalExpression	"class_name [ 0 ] ? ""::"" : """""		31249	0					
ANR	31308	Condition	class_name [ 0 ]		31249	0					
ANR	31309	ArrayIndexing	class_name [ 0 ]		31249	0					
ANR	31310	Identifier	class_name		31249	0					
ANR	31311	PrimaryExpression	0		31249	1					
ANR	31312	PrimaryExpression	"""::"""		31249	1					
ANR	31313	PrimaryExpression	""""""		31249	2					
ANR	31314	Argument	ZSTR_VAL ( active_function -> common . function_name )		31249	4					
ANR	31315	CallExpression	ZSTR_VAL ( active_function -> common . function_name )		31249	0					
ANR	31316	Callee	ZSTR_VAL		31249	0					
ANR	31317	Identifier	ZSTR_VAL		31249	0					
ANR	31318	ArgumentList	active_function -> common . function_name		31249	1					
ANR	31319	Argument	active_function -> common . function_name		31249	0					
ANR	31320	MemberAccess	active_function -> common . function_name		31249	0					
ANR	31321	PtrMemberAccess	active_function -> common		31249	0					
ANR	31322	Identifier	active_function		31249	0					
ANR	31323	Identifier	common		31249	1					
ANR	31324	Identifier	function_name		31249	1					
ANR	31325	Argument	"min_num_args == max_num_args ? ""exactly"" : num_args < min_num_args ? ""at least"" : ""at most"""		31249	5					
ANR	31326	ConditionalExpression	"min_num_args == max_num_args ? ""exactly"" : num_args < min_num_args ? ""at least"" : ""at most"""		31249	0					
ANR	31327	Condition	min_num_args == max_num_args		31249	0					
ANR	31328	EqualityExpression	min_num_args == max_num_args		31249	0		==			
ANR	31329	Identifier	min_num_args		31249	0					
ANR	31330	Identifier	max_num_args		31249	1					
ANR	31331	PrimaryExpression	"""exactly"""		31249	1					
ANR	31332	ConditionalExpression	"num_args < min_num_args ? ""at least"" : ""at most"""		31249	2					
ANR	31333	Condition	num_args < min_num_args		31249	0					
ANR	31334	RelationalExpression	num_args < min_num_args		31249	0		<			
ANR	31335	Identifier	num_args		31249	0					
ANR	31336	Identifier	min_num_args		31249	1					
ANR	31337	PrimaryExpression	"""at least"""		31249	1					
ANR	31338	PrimaryExpression	"""at most"""		31249	2					
ANR	31339	Argument	num_args < min_num_args ? min_num_args : max_num_args		31249	6					
ANR	31340	ConditionalExpression	num_args < min_num_args ? min_num_args : max_num_args		31249	0					
ANR	31341	Condition	num_args < min_num_args		31249	0					
ANR	31342	RelationalExpression	num_args < min_num_args		31249	0		<			
ANR	31343	Identifier	num_args		31249	0					
ANR	31344	Identifier	min_num_args		31249	1					
ANR	31345	Identifier	min_num_args		31249	1					
ANR	31346	Identifier	max_num_args		31249	2					
ANR	31347	Argument	"( num_args < min_num_args ? min_num_args : max_num_args ) == 1 ? """" : ""s"""		31249	7					
ANR	31348	ConditionalExpression	"( num_args < min_num_args ? min_num_args : max_num_args ) == 1 ? """" : ""s"""		31249	0					
ANR	31349	Condition	( num_args < min_num_args ? min_num_args : max_num_args ) == 1		31249	0					
ANR	31350	EqualityExpression	( num_args < min_num_args ? min_num_args : max_num_args ) == 1		31249	0		==			
ANR	31351	ConditionalExpression	num_args < min_num_args ? min_num_args : max_num_args		31249	0					
ANR	31352	Condition	num_args < min_num_args		31249	0					
ANR	31353	RelationalExpression	num_args < min_num_args		31249	0		<			
ANR	31354	Identifier	num_args		31249	0					
ANR	31355	Identifier	min_num_args		31249	1					
ANR	31356	Identifier	min_num_args		31249	1					
ANR	31357	Identifier	max_num_args		31249	2					
ANR	31358	PrimaryExpression	1		31249	1					
ANR	31359	PrimaryExpression	""""""		31249	1					
ANR	31360	PrimaryExpression	"""s"""		31249	2					
ANR	31361	Argument	num_args		31249	8					
ANR	31362	Identifier	num_args		31249	0					
ANR	31363	ReturnType	ZEND_API ZEND_COLD void ZEND_FASTCALL		31249	1					
ANR	31364	Identifier	zend_wrong_paramers_count_error		31249	2					
ANR	31365	ParameterList	"int num_args , int min_num_args , int max_num_args"		31249	3					
ANR	31366	Parameter	int num_args	200:70:5301:5312	31249	0	True				
ANR	31367	ParameterType	int		31249	0					
ANR	31368	Identifier	num_args		31249	1					
ANR	31369	Parameter	int min_num_args	200:84:5315:5330	31249	1	True				
ANR	31370	ParameterType	int		31249	0					
ANR	31371	Identifier	min_num_args		31249	1					
ANR	31372	Parameter	int max_num_args	200:102:5333:5348	31249	2	True				
ANR	31373	ParameterType	int		31249	0					
ANR	31374	Identifier	max_num_args		31249	1					
ANR	31375	CFGEntryNode	ENTRY		31249		True				
ANR	31376	CFGExitNode	EXIT		31249		True				
ANR	31377	Symbol	EG		31249						
ANR	31378	Symbol	* * active_function		31249						
ANR	31379	Symbol	ZEND_ARG_USES_STRICT_TYPES		31249						
ANR	31380	Symbol	* class_name		31249						
ANR	31381	Symbol	min_num_args		31249						
ANR	31382	Symbol	active_function -> common . scope -> name		31249						
ANR	31383	Symbol	EG ( current_execute_data ) -> func		31249						
ANR	31384	Symbol	active_function -> common . function_name		31249						
ANR	31385	Symbol	current_execute_data		31249						
ANR	31386	Symbol	* EG		31249						
ANR	31387	Symbol	* active_function -> common		31249						
ANR	31388	Symbol	active_function -> common		31249						
ANR	31389	Symbol	active_function		31249						
ANR	31390	Symbol	* active_function		31249						
ANR	31391	Symbol	active_function -> common . scope		31249						
ANR	31392	Symbol	ZSTR_VAL		31249						
ANR	31393	Symbol	max_num_args		31249						
ANR	31394	Symbol	num_args		31249						
ANR	31395	Symbol	* active_function -> common . scope		31249						
ANR	31396	Symbol	class_name		31249						
ANR	31397	Function	zend_wrong_paramer_type_error	216:0:5995:6526							
ANR	31398	FunctionDef	"zend_wrong_paramer_type_error (int num , zend_expected_type expected_type , zval * arg)"		31397	0					
ANR	31399	CompoundStatement		217:0:6127:6526	31397	0					
ANR	31400	IdentifierDeclStatement	const char * space ;	218:1:6130:6147	31397	0	True				
ANR	31401	IdentifierDecl	* space		31397	0					
ANR	31402	IdentifierDeclType	const char *		31397	0					
ANR	31403	Identifier	space		31397	1					
ANR	31404	IdentifierDeclStatement	const char * class_name = get_active_class_name ( & space ) ;	219:1:6150:6204	31397	1	True				
ANR	31405	IdentifierDecl	* class_name = get_active_class_name ( & space )		31397	0					
ANR	31406	IdentifierDeclType	const char *		31397	0					
ANR	31407	Identifier	class_name		31397	1					
ANR	31408	AssignmentExpression	* class_name = get_active_class_name ( & space )		31397	2		=			
ANR	31409	Identifier	class_name		31397	0					
ANR	31410	CallExpression	get_active_class_name ( & space )		31397	1					
ANR	31411	Callee	get_active_class_name		31397	0					
ANR	31412	Identifier	get_active_class_name		31397	0					
ANR	31413	ArgumentList	& space		31397	1					
ANR	31414	Argument	& space		31397	0					
ANR	31415	UnaryOperationExpression	& space		31397	0					
ANR	31416	UnaryOperator	&		31397	0					
ANR	31417	Identifier	space		31397	1					
ANR	31418	Statement	static	220:1:6207:6212	31397	2	True				
ANR	31419	Statement	const	220:8:6214:6218	31397	3	True				
ANR	31420	Statement	char	220:14:6220:6223	31397	4	True				
ANR	31421	Statement	*	220:19:6225:6225	31397	5	True				
ANR	31422	Statement	const	220:21:6227:6231	31397	6	True				
ANR	31423	Statement	expected_error	220:27:6233:6246	31397	7	True				
ANR	31424	Statement	[	220:41:6247:6247	31397	8	True				
ANR	31425	Statement	]	220:42:6248:6248	31397	9	True				
ANR	31426	Statement	=	220:44:6250:6250	31397	10	True				
ANR	31427	CompoundStatement		4:46:124:124	31397	11					
ANR	31428	Statement	Z_EXPECTED_TYPES	221:2:6256:6271	31397	0	True				
ANR	31429	Statement	(	221:18:6272:6272	31397	1	True				
ANR	31430	Statement	Z_EXPECTED_TYPE_STR	221:19:6273:6291	31397	2	True				
ANR	31431	Statement	)	221:38:6292:6292	31397	3	True				
ANR	31432	Statement	NULL	222:2:6296:6299	31397	4	True				
ANR	31433	ExpressionStatement		223:2:6303:6303	31397	12	True				
ANR	31434	ExpressionStatement	"zend_internal_type_error ( ZEND_ARG_USES_STRICT_TYPES ( ) , ""%s%s%s() expects parameter %d to be %s, %s given"" , class_name , space , get_active_function_name ( ) , num , expected_error [ expected_type ] , zend_zval_type_name ( arg ) )"	225:1:6307:6524	31397	13	True				
ANR	31435	CallExpression	"zend_internal_type_error ( ZEND_ARG_USES_STRICT_TYPES ( ) , ""%s%s%s() expects parameter %d to be %s, %s given"" , class_name , space , get_active_function_name ( ) , num , expected_error [ expected_type ] , zend_zval_type_name ( arg ) )"		31397	0					
ANR	31436	Callee	zend_internal_type_error		31397	0					
ANR	31437	Identifier	zend_internal_type_error		31397	0					
ANR	31438	ArgumentList	ZEND_ARG_USES_STRICT_TYPES ( )		31397	1					
ANR	31439	Argument	ZEND_ARG_USES_STRICT_TYPES ( )		31397	0					
ANR	31440	CallExpression	ZEND_ARG_USES_STRICT_TYPES ( )		31397	0					
ANR	31441	Callee	ZEND_ARG_USES_STRICT_TYPES		31397	0					
ANR	31442	Identifier	ZEND_ARG_USES_STRICT_TYPES		31397	0					
ANR	31443	ArgumentList			31397	1					
ANR	31444	Argument	"""%s%s%s() expects parameter %d to be %s, %s given"""		31397	1					
ANR	31445	PrimaryExpression	"""%s%s%s() expects parameter %d to be %s, %s given"""		31397	0					
ANR	31446	Argument	class_name		31397	2					
ANR	31447	Identifier	class_name		31397	0					
ANR	31448	Argument	space		31397	3					
ANR	31449	Identifier	space		31397	0					
ANR	31450	Argument	get_active_function_name ( )		31397	4					
ANR	31451	CallExpression	get_active_function_name ( )		31397	0					
ANR	31452	Callee	get_active_function_name		31397	0					
ANR	31453	Identifier	get_active_function_name		31397	0					
ANR	31454	ArgumentList			31397	1					
ANR	31455	Argument	num		31397	5					
ANR	31456	Identifier	num		31397	0					
ANR	31457	Argument	expected_error [ expected_type ]		31397	6					
ANR	31458	ArrayIndexing	expected_error [ expected_type ]		31397	0					
ANR	31459	Identifier	expected_error		31397	0					
ANR	31460	Identifier	expected_type		31397	1					
ANR	31461	Argument	zend_zval_type_name ( arg )		31397	7					
ANR	31462	CallExpression	zend_zval_type_name ( arg )		31397	0					
ANR	31463	Callee	zend_zval_type_name		31397	0					
ANR	31464	Identifier	zend_zval_type_name		31397	0					
ANR	31465	ArgumentList	arg		31397	1					
ANR	31466	Argument	arg		31397	0					
ANR	31467	Identifier	arg		31397	0					
ANR	31468	ReturnType	ZEND_API ZEND_COLD void ZEND_FASTCALL		31397	1					
ANR	31469	Identifier	zend_wrong_paramer_type_error		31397	2					
ANR	31470	ParameterList	"int num , zend_expected_type expected_type , zval * arg"		31397	3					
ANR	31471	Parameter	int num	216:68:6063:6069	31397	0	True				
ANR	31472	ParameterType	int		31397	0					
ANR	31473	Identifier	num		31397	1					
ANR	31474	Parameter	zend_expected_type expected_type	216:77:6072:6103	31397	1	True				
ANR	31475	ParameterType	zend_expected_type		31397	0					
ANR	31476	Identifier	expected_type		31397	1					
ANR	31477	Parameter	zval * arg	216:111:6106:6114	31397	2	True				
ANR	31478	ParameterType	zval *		31397	0					
ANR	31479	Identifier	arg		31397	1					
ANR	31480	CFGEntryNode	ENTRY		31397		True				
ANR	31481	CFGExitNode	EXIT		31397		True				
ANR	31482	Symbol	ZEND_ARG_USES_STRICT_TYPES		31397						
ANR	31483	Symbol	num		31397						
ANR	31484	Symbol	expected_type		31397						
ANR	31485	Symbol	get_active_function_name		31397						
ANR	31486	Symbol	* expected_type		31397						
ANR	31487	Symbol	get_active_class_name		31397						
ANR	31488	Symbol	zend_zval_type_name		31397						
ANR	31489	Symbol	space		31397						
ANR	31490	Symbol	expected_error		31397						
ANR	31491	Symbol	arg		31397						
ANR	31492	Symbol	& space		31397						
ANR	31493	Symbol	class_name		31397						
ANR	31494	Symbol	* expected_error		31397						
ANR	31495	Function	zend_wrong_paramer_class_error	230:0:6539:6925							
ANR	31496	FunctionDef	"zend_wrong_paramer_class_error (int num , char * name , zval * arg)"		31495	0					
ANR	31497	CompoundStatement		231:0:6650:6925	31495	0					
ANR	31498	IdentifierDeclStatement	const char * space ;	232:1:6653:6670	31495	0	True				
ANR	31499	IdentifierDecl	* space		31495	0					
ANR	31500	IdentifierDeclType	const char *		31495	0					
ANR	31501	Identifier	space		31495	1					
ANR	31502	IdentifierDeclStatement	const char * class_name = get_active_class_name ( & space ) ;	233:1:6673:6727	31495	1	True				
ANR	31503	IdentifierDecl	* class_name = get_active_class_name ( & space )		31495	0					
ANR	31504	IdentifierDeclType	const char *		31495	0					
ANR	31505	Identifier	class_name		31495	1					
ANR	31506	AssignmentExpression	* class_name = get_active_class_name ( & space )		31495	2		=			
ANR	31507	Identifier	class_name		31495	0					
ANR	31508	CallExpression	get_active_class_name ( & space )		31495	1					
ANR	31509	Callee	get_active_class_name		31495	0					
ANR	31510	Identifier	get_active_class_name		31495	0					
ANR	31511	ArgumentList	& space		31495	1					
ANR	31512	Argument	& space		31495	0					
ANR	31513	UnaryOperationExpression	& space		31495	0					
ANR	31514	UnaryOperator	&		31495	0					
ANR	31515	Identifier	space		31495	1					
ANR	31516	ExpressionStatement	"zend_internal_type_error ( ZEND_ARG_USES_STRICT_TYPES ( ) , ""%s%s%s() expects parameter %d to be %s, %s given"" , class_name , space , get_active_function_name ( ) , num , name , zend_zval_type_name ( arg ) )"	235:1:6731:6923	31495	2	True				
ANR	31517	CallExpression	"zend_internal_type_error ( ZEND_ARG_USES_STRICT_TYPES ( ) , ""%s%s%s() expects parameter %d to be %s, %s given"" , class_name , space , get_active_function_name ( ) , num , name , zend_zval_type_name ( arg ) )"		31495	0					
ANR	31518	Callee	zend_internal_type_error		31495	0					
ANR	31519	Identifier	zend_internal_type_error		31495	0					
ANR	31520	ArgumentList	ZEND_ARG_USES_STRICT_TYPES ( )		31495	1					
ANR	31521	Argument	ZEND_ARG_USES_STRICT_TYPES ( )		31495	0					
ANR	31522	CallExpression	ZEND_ARG_USES_STRICT_TYPES ( )		31495	0					
ANR	31523	Callee	ZEND_ARG_USES_STRICT_TYPES		31495	0					
ANR	31524	Identifier	ZEND_ARG_USES_STRICT_TYPES		31495	0					
ANR	31525	ArgumentList			31495	1					
ANR	31526	Argument	"""%s%s%s() expects parameter %d to be %s, %s given"""		31495	1					
ANR	31527	PrimaryExpression	"""%s%s%s() expects parameter %d to be %s, %s given"""		31495	0					
ANR	31528	Argument	class_name		31495	2					
ANR	31529	Identifier	class_name		31495	0					
ANR	31530	Argument	space		31495	3					
ANR	31531	Identifier	space		31495	0					
ANR	31532	Argument	get_active_function_name ( )		31495	4					
ANR	31533	CallExpression	get_active_function_name ( )		31495	0					
ANR	31534	Callee	get_active_function_name		31495	0					
ANR	31535	Identifier	get_active_function_name		31495	0					
ANR	31536	ArgumentList			31495	1					
ANR	31537	Argument	num		31495	5					
ANR	31538	Identifier	num		31495	0					
ANR	31539	Argument	name		31495	6					
ANR	31540	Identifier	name		31495	0					
ANR	31541	Argument	zend_zval_type_name ( arg )		31495	7					
ANR	31542	CallExpression	zend_zval_type_name ( arg )		31495	0					
ANR	31543	Callee	zend_zval_type_name		31495	0					
ANR	31544	Identifier	zend_zval_type_name		31495	0					
ANR	31545	ArgumentList	arg		31495	1					
ANR	31546	Argument	arg		31495	0					
ANR	31547	Identifier	arg		31495	0					
ANR	31548	ReturnType	ZEND_API ZEND_COLD void ZEND_FASTCALL		31495	1					
ANR	31549	Identifier	zend_wrong_paramer_class_error		31495	2					
ANR	31550	ParameterList	"int num , char * name , zval * arg"		31495	3					
ANR	31551	Parameter	int num	230:69:6608:6614	31495	0	True				
ANR	31552	ParameterType	int		31495	0					
ANR	31553	Identifier	num		31495	1					
ANR	31554	Parameter	char * name	230:78:6617:6626	31495	1	True				
ANR	31555	ParameterType	char *		31495	0					
ANR	31556	Identifier	name		31495	1					
ANR	31557	Parameter	zval * arg	230:90:6629:6637	31495	2	True				
ANR	31558	ParameterType	zval *		31495	0					
ANR	31559	Identifier	arg		31495	1					
ANR	31560	CFGEntryNode	ENTRY		31495		True				
ANR	31561	CFGExitNode	EXIT		31495		True				
ANR	31562	Symbol	ZEND_ARG_USES_STRICT_TYPES		31495						
ANR	31563	Symbol	num		31495						
ANR	31564	Symbol	arg		31495						
ANR	31565	Symbol	name		31495						
ANR	31566	Symbol	get_active_function_name		31495						
ANR	31567	Symbol	get_active_class_name		31495						
ANR	31568	Symbol	& space		31495						
ANR	31569	Symbol	zend_zval_type_name		31495						
ANR	31570	Symbol	class_name		31495						
ANR	31571	Symbol	space		31495						
ANR	31572	Function	zend_wrong_callback_error	240:0:6938:7709							
ANR	31573	FunctionDef	"zend_wrong_callback_error (int severity , int num , char * error)"		31572	0					
ANR	31574	CompoundStatement		241:0:7048:7709	31572	0					
ANR	31575	IdentifierDeclStatement	const char * space ;	242:1:7051:7068	31572	0	True				
ANR	31576	IdentifierDecl	* space		31572	0					
ANR	31577	IdentifierDeclType	const char *		31572	0					
ANR	31578	Identifier	space		31572	1					
ANR	31579	IdentifierDeclStatement	const char * class_name = get_active_class_name ( & space ) ;	243:1:7071:7125	31572	1	True				
ANR	31580	IdentifierDecl	* class_name = get_active_class_name ( & space )		31572	0					
ANR	31581	IdentifierDeclType	const char *		31572	0					
ANR	31582	Identifier	class_name		31572	1					
ANR	31583	AssignmentExpression	* class_name = get_active_class_name ( & space )		31572	2		=			
ANR	31584	Identifier	class_name		31572	0					
ANR	31585	CallExpression	get_active_class_name ( & space )		31572	1					
ANR	31586	Callee	get_active_class_name		31572	0					
ANR	31587	Identifier	get_active_class_name		31572	0					
ANR	31588	ArgumentList	& space		31572	1					
ANR	31589	Argument	& space		31572	0					
ANR	31590	UnaryOperationExpression	& space		31572	0					
ANR	31591	UnaryOperator	&		31572	0					
ANR	31592	Identifier	space		31572	1					
ANR	31593	IfStatement	if ( severity == E_WARNING )		31572	2					
ANR	31594	Condition	severity == E_WARNING	245:5:7133:7153	31572	0	True				
ANR	31595	EqualityExpression	severity == E_WARNING		31572	0		==			
ANR	31596	Identifier	severity		31572	0					
ANR	31597	Identifier	E_WARNING		31572	1					
ANR	31598	CompoundStatement		5:28:107:107	31572	1					
ANR	31599	ExpressionStatement	"zend_internal_type_error ( ZEND_ARG_USES_STRICT_TYPES ( ) , ""%s%s%s() expects parameter %d to be a valid callback, %s"" , class_name , space , get_active_function_name ( ) , num , error )"	246:2:7160:7336	31572	0	True				
ANR	31600	CallExpression	"zend_internal_type_error ( ZEND_ARG_USES_STRICT_TYPES ( ) , ""%s%s%s() expects parameter %d to be a valid callback, %s"" , class_name , space , get_active_function_name ( ) , num , error )"		31572	0					
ANR	31601	Callee	zend_internal_type_error		31572	0					
ANR	31602	Identifier	zend_internal_type_error		31572	0					
ANR	31603	ArgumentList	ZEND_ARG_USES_STRICT_TYPES ( )		31572	1					
ANR	31604	Argument	ZEND_ARG_USES_STRICT_TYPES ( )		31572	0					
ANR	31605	CallExpression	ZEND_ARG_USES_STRICT_TYPES ( )		31572	0					
ANR	31606	Callee	ZEND_ARG_USES_STRICT_TYPES		31572	0					
ANR	31607	Identifier	ZEND_ARG_USES_STRICT_TYPES		31572	0					
ANR	31608	ArgumentList			31572	1					
ANR	31609	Argument	"""%s%s%s() expects parameter %d to be a valid callback, %s"""		31572	1					
ANR	31610	PrimaryExpression	"""%s%s%s() expects parameter %d to be a valid callback, %s"""		31572	0					
ANR	31611	Argument	class_name		31572	2					
ANR	31612	Identifier	class_name		31572	0					
ANR	31613	Argument	space		31572	3					
ANR	31614	Identifier	space		31572	0					
ANR	31615	Argument	get_active_function_name ( )		31572	4					
ANR	31616	CallExpression	get_active_function_name ( )		31572	0					
ANR	31617	Callee	get_active_function_name		31572	0					
ANR	31618	Identifier	get_active_function_name		31572	0					
ANR	31619	ArgumentList			31572	1					
ANR	31620	Argument	num		31572	5					
ANR	31621	Identifier	num		31572	0					
ANR	31622	Argument	error		31572	6					
ANR	31623	Identifier	error		31572	0					
ANR	31624	ElseStatement	else		31572	0					
ANR	31625	IfStatement	if ( severity == E_ERROR )		31572	0					
ANR	31626	Condition	severity == E_ERROR	248:12:7350:7368	31572	0	True				
ANR	31627	EqualityExpression	severity == E_ERROR		31572	0		==			
ANR	31628	Identifier	severity		31572	0					
ANR	31629	Identifier	E_ERROR		31572	1					
ANR	31630	CompoundStatement		8:33:322:322	31572	1					
ANR	31631	ExpressionStatement	"zend_throw_error ( zend_ce_type_error , ""%s%s%s() expects parameter %d to be a valid callback, %s"" , class_name , space , get_active_function_name ( ) , num , error )"	249:2:7375:7533	31572	0	True				
ANR	31632	CallExpression	"zend_throw_error ( zend_ce_type_error , ""%s%s%s() expects parameter %d to be a valid callback, %s"" , class_name , space , get_active_function_name ( ) , num , error )"		31572	0					
ANR	31633	Callee	zend_throw_error		31572	0					
ANR	31634	Identifier	zend_throw_error		31572	0					
ANR	31635	ArgumentList	zend_ce_type_error		31572	1					
ANR	31636	Argument	zend_ce_type_error		31572	0					
ANR	31637	Identifier	zend_ce_type_error		31572	0					
ANR	31638	Argument	"""%s%s%s() expects parameter %d to be a valid callback, %s"""		31572	1					
ANR	31639	PrimaryExpression	"""%s%s%s() expects parameter %d to be a valid callback, %s"""		31572	0					
ANR	31640	Argument	class_name		31572	2					
ANR	31641	Identifier	class_name		31572	0					
ANR	31642	Argument	space		31572	3					
ANR	31643	Identifier	space		31572	0					
ANR	31644	Argument	get_active_function_name ( )		31572	4					
ANR	31645	CallExpression	get_active_function_name ( )		31572	0					
ANR	31646	Callee	get_active_function_name		31572	0					
ANR	31647	Identifier	get_active_function_name		31572	0					
ANR	31648	ArgumentList			31572	1					
ANR	31649	Argument	num		31572	5					
ANR	31650	Identifier	num		31572	0					
ANR	31651	Argument	error		31572	6					
ANR	31652	Identifier	error		31572	0					
ANR	31653	ElseStatement	else		31572	0					
ANR	31654	CompoundStatement		11:8:494:494	31572	0					
ANR	31655	ExpressionStatement	"zend_error ( severity , ""%s%s%s() expects parameter %d to be a valid callback, %s"" , class_name , space , get_active_function_name ( ) , num , error )"	252:2:7547:7689	31572	0	True				
ANR	31656	CallExpression	"zend_error ( severity , ""%s%s%s() expects parameter %d to be a valid callback, %s"" , class_name , space , get_active_function_name ( ) , num , error )"		31572	0					
ANR	31657	Callee	zend_error		31572	0					
ANR	31658	Identifier	zend_error		31572	0					
ANR	31659	ArgumentList	severity		31572	1					
ANR	31660	Argument	severity		31572	0					
ANR	31661	Identifier	severity		31572	0					
ANR	31662	Argument	"""%s%s%s() expects parameter %d to be a valid callback, %s"""		31572	1					
ANR	31663	PrimaryExpression	"""%s%s%s() expects parameter %d to be a valid callback, %s"""		31572	0					
ANR	31664	Argument	class_name		31572	2					
ANR	31665	Identifier	class_name		31572	0					
ANR	31666	Argument	space		31572	3					
ANR	31667	Identifier	space		31572	0					
ANR	31668	Argument	get_active_function_name ( )		31572	4					
ANR	31669	CallExpression	get_active_function_name ( )		31572	0					
ANR	31670	Callee	get_active_function_name		31572	0					
ANR	31671	Identifier	get_active_function_name		31572	0					
ANR	31672	ArgumentList			31572	1					
ANR	31673	Argument	num		31572	5					
ANR	31674	Identifier	num		31572	0					
ANR	31675	Argument	error		31572	6					
ANR	31676	Identifier	error		31572	0					
ANR	31677	ExpressionStatement	efree ( error )	255:1:7695:7707	31572	3	True				
ANR	31678	CallExpression	efree ( error )		31572	0					
ANR	31679	Callee	efree		31572	0					
ANR	31680	Identifier	efree		31572	0					
ANR	31681	ArgumentList	error		31572	1					
ANR	31682	Argument	error		31572	0					
ANR	31683	Identifier	error		31572	0					
ANR	31684	ReturnType	ZEND_API ZEND_COLD void ZEND_FASTCALL		31572	1					
ANR	31685	Identifier	zend_wrong_callback_error		31572	2					
ANR	31686	ParameterList	"int severity , int num , char * error"		31572	3					
ANR	31687	Parameter	int severity	240:64:7002:7013	31572	0	True				
ANR	31688	ParameterType	int		31572	0					
ANR	31689	Identifier	severity		31572	1					
ANR	31690	Parameter	int num	240:78:7016:7022	31572	1	True				
ANR	31691	ParameterType	int		31572	0					
ANR	31692	Identifier	num		31572	1					
ANR	31693	Parameter	char * error	240:87:7025:7035	31572	2	True				
ANR	31694	ParameterType	char *		31572	0					
ANR	31695	Identifier	error		31572	1					
ANR	31696	CFGEntryNode	ENTRY		31572		True				
ANR	31697	CFGExitNode	EXIT		31572		True				
ANR	31698	Symbol	severity		31572						
ANR	31699	Symbol	E_WARNING		31572						
ANR	31700	Symbol	ZEND_ARG_USES_STRICT_TYPES		31572						
ANR	31701	Symbol	E_ERROR		31572						
ANR	31702	Symbol	num		31572						
ANR	31703	Symbol	zend_ce_type_error		31572						
ANR	31704	Symbol	get_active_function_name		31572						
ANR	31705	Symbol	error		31572						
ANR	31706	Symbol	get_active_class_name		31572						
ANR	31707	Symbol	& space		31572						
ANR	31708	Symbol	class_name		31572						
ANR	31709	Symbol	space		31572						
ANR	31710	Function	zend_parse_arg_class	259:0:7722:8778							
ANR	31711	FunctionDef	"zend_parse_arg_class (zval * arg , zend_class_entry * * pce , int num , int check_null)"		31710	0					
ANR	31712	CompoundStatement		260:0:7840:8778	31710	0					
ANR	31713	IdentifierDeclStatement	zend_class_entry * ce_base = * pce ;	261:1:7843:7875	31710	0	True				
ANR	31714	IdentifierDecl	* ce_base = * pce		31710	0					
ANR	31715	IdentifierDeclType	zend_class_entry *		31710	0					
ANR	31716	Identifier	ce_base		31710	1					
ANR	31717	AssignmentExpression	* ce_base = * pce		31710	2		=			
ANR	31718	Identifier	ce_base		31710	0					
ANR	31719	UnaryOperationExpression	* pce		31710	1					
ANR	31720	UnaryOperator	*		31710	0					
ANR	31721	Identifier	pce		31710	1					
ANR	31722	IfStatement	if ( check_null && Z_TYPE_P ( arg ) == IS_NULL )		31710	1					
ANR	31723	Condition	check_null && Z_TYPE_P ( arg ) == IS_NULL	263:5:7883:7920	31710	0	True				
ANR	31724	AndExpression	check_null && Z_TYPE_P ( arg ) == IS_NULL		31710	0		&&			
ANR	31725	Identifier	check_null		31710	0					
ANR	31726	EqualityExpression	Z_TYPE_P ( arg ) == IS_NULL		31710	1		==			
ANR	31727	CallExpression	Z_TYPE_P ( arg )		31710	0					
ANR	31728	Callee	Z_TYPE_P		31710	0					
ANR	31729	Identifier	Z_TYPE_P		31710	0					
ANR	31730	ArgumentList	arg		31710	1					
ANR	31731	Argument	arg		31710	0					
ANR	31732	Identifier	arg		31710	0					
ANR	31733	Identifier	IS_NULL		31710	1					
ANR	31734	CompoundStatement		4:45:82:82	31710	1					
ANR	31735	ExpressionStatement	* pce = NULL	264:2:7927:7938	31710	0	True				
ANR	31736	AssignmentExpression	* pce = NULL		31710	0		=			
ANR	31737	UnaryOperationExpression	* pce		31710	0					
ANR	31738	UnaryOperator	*		31710	0					
ANR	31739	Identifier	pce		31710	1					
ANR	31740	Identifier	NULL		31710	1					
ANR	31741	ReturnStatement	return 1 ;	265:2:7942:7950	31710	1	True				
ANR	31742	PrimaryExpression	1		31710	0					
ANR	31743	ExpressionStatement	convert_to_string_ex ( arg )	267:1:7956:7981	31710	2	True				
ANR	31744	CallExpression	convert_to_string_ex ( arg )		31710	0					
ANR	31745	Callee	convert_to_string_ex		31710	0					
ANR	31746	Identifier	convert_to_string_ex		31710	0					
ANR	31747	ArgumentList	arg		31710	1					
ANR	31748	Argument	arg		31710	0					
ANR	31749	Identifier	arg		31710	0					
ANR	31750	ExpressionStatement	* pce = zend_lookup_class ( Z_STR_P ( arg ) )	268:1:7984:8022	31710	3	True				
ANR	31751	AssignmentExpression	* pce = zend_lookup_class ( Z_STR_P ( arg ) )		31710	0		=			
ANR	31752	UnaryOperationExpression	* pce		31710	0					
ANR	31753	UnaryOperator	*		31710	0					
ANR	31754	Identifier	pce		31710	1					
ANR	31755	CallExpression	zend_lookup_class ( Z_STR_P ( arg ) )		31710	1					
ANR	31756	Callee	zend_lookup_class		31710	0					
ANR	31757	Identifier	zend_lookup_class		31710	0					
ANR	31758	ArgumentList	Z_STR_P ( arg )		31710	1					
ANR	31759	Argument	Z_STR_P ( arg )		31710	0					
ANR	31760	CallExpression	Z_STR_P ( arg )		31710	0					
ANR	31761	Callee	Z_STR_P		31710	0					
ANR	31762	Identifier	Z_STR_P		31710	0					
ANR	31763	ArgumentList	arg		31710	1					
ANR	31764	Argument	arg		31710	0					
ANR	31765	Identifier	arg		31710	0					
ANR	31766	IfStatement	if ( ce_base )		31710	4					
ANR	31767	Condition	ce_base	269:5:8029:8035	31710	0	True				
ANR	31768	Identifier	ce_base		31710	0					
ANR	31769	CompoundStatement		10:14:197:197	31710	1					
ANR	31770	IfStatement	"if ( ( ! * pce || ! instanceof_function ( * pce , ce_base ) ) )"		31710	0					
ANR	31771	Condition	"! * pce || ! instanceof_function ( * pce , ce_base )"	270:6:8046:8091	31710	0	True				
ANR	31772	OrExpression	"! * pce || ! instanceof_function ( * pce , ce_base )"		31710	0		||			
ANR	31773	UnaryOperationExpression	! * pce		31710	0					
ANR	31774	UnaryOperator	!		31710	0					
ANR	31775	UnaryOperationExpression	* pce		31710	1					
ANR	31776	UnaryOperator	*		31710	0					
ANR	31777	Identifier	pce		31710	1					
ANR	31778	UnaryOperationExpression	"! instanceof_function ( * pce , ce_base )"		31710	1					
ANR	31779	UnaryOperator	!		31710	0					
ANR	31780	CallExpression	"instanceof_function ( * pce , ce_base )"		31710	1					
ANR	31781	Callee	instanceof_function		31710	0					
ANR	31782	Identifier	instanceof_function		31710	0					
ANR	31783	ArgumentList	* pce		31710	1					
ANR	31784	Argument	* pce		31710	0					
ANR	31785	UnaryOperationExpression	* pce		31710	0					
ANR	31786	UnaryOperator	*		31710	0					
ANR	31787	Identifier	pce		31710	1					
ANR	31788	Argument	ce_base		31710	1					
ANR	31789	Identifier	ce_base		31710	0					
ANR	31790	CompoundStatement		13:3:280:334	31710	1					
ANR	31791	IdentifierDeclStatement	const char * space ;	271:3:8099:8116	31710	0	True				
ANR	31792	IdentifierDecl	* space		31710	0					
ANR	31793	IdentifierDeclType	const char *		31710	0					
ANR	31794	Identifier	space		31710	1					
ANR	31795	IdentifierDeclStatement	const char * class_name = get_active_class_name ( & space ) ;	272:3:8121:8175	31710	1	True				
ANR	31796	IdentifierDecl	* class_name = get_active_class_name ( & space )		31710	0					
ANR	31797	IdentifierDeclType	const char *		31710	0					
ANR	31798	Identifier	class_name		31710	1					
ANR	31799	AssignmentExpression	* class_name = get_active_class_name ( & space )		31710	2		=			
ANR	31800	Identifier	class_name		31710	0					
ANR	31801	CallExpression	get_active_class_name ( & space )		31710	1					
ANR	31802	Callee	get_active_class_name		31710	0					
ANR	31803	Identifier	get_active_class_name		31710	0					
ANR	31804	ArgumentList	& space		31710	1					
ANR	31805	Argument	& space		31710	0					
ANR	31806	UnaryOperationExpression	& space		31710	0					
ANR	31807	UnaryOperator	&		31710	0					
ANR	31808	Identifier	space		31710	1					
ANR	31809	ExpressionStatement	"zend_internal_type_error ( ZEND_ARG_USES_STRICT_TYPES ( ) , ""%s%s%s() expects parameter %d to be a class name derived from %s, '%s' given"" , class_name , space , get_active_function_name ( ) , num , ZSTR_VAL ( ce_base -> name ) , Z_STRVAL_P ( arg ) )"	274:3:8181:8417	31710	2	True				
ANR	31810	CallExpression	"zend_internal_type_error ( ZEND_ARG_USES_STRICT_TYPES ( ) , ""%s%s%s() expects parameter %d to be a class name derived from %s, '%s' given"" , class_name , space , get_active_function_name ( ) , num , ZSTR_VAL ( ce_base -> name ) , Z_STRVAL_P ( arg ) )"		31710	0					
ANR	31811	Callee	zend_internal_type_error		31710	0					
ANR	31812	Identifier	zend_internal_type_error		31710	0					
ANR	31813	ArgumentList	ZEND_ARG_USES_STRICT_TYPES ( )		31710	1					
ANR	31814	Argument	ZEND_ARG_USES_STRICT_TYPES ( )		31710	0					
ANR	31815	CallExpression	ZEND_ARG_USES_STRICT_TYPES ( )		31710	0					
ANR	31816	Callee	ZEND_ARG_USES_STRICT_TYPES		31710	0					
ANR	31817	Identifier	ZEND_ARG_USES_STRICT_TYPES		31710	0					
ANR	31818	ArgumentList			31710	1					
ANR	31819	Argument	"""%s%s%s() expects parameter %d to be a class name derived from %s, '%s' given"""		31710	1					
ANR	31820	PrimaryExpression	"""%s%s%s() expects parameter %d to be a class name derived from %s, '%s' given"""		31710	0					
ANR	31821	Argument	class_name		31710	2					
ANR	31822	Identifier	class_name		31710	0					
ANR	31823	Argument	space		31710	3					
ANR	31824	Identifier	space		31710	0					
ANR	31825	Argument	get_active_function_name ( )		31710	4					
ANR	31826	CallExpression	get_active_function_name ( )		31710	0					
ANR	31827	Callee	get_active_function_name		31710	0					
ANR	31828	Identifier	get_active_function_name		31710	0					
ANR	31829	ArgumentList			31710	1					
ANR	31830	Argument	num		31710	5					
ANR	31831	Identifier	num		31710	0					
ANR	31832	Argument	ZSTR_VAL ( ce_base -> name )		31710	6					
ANR	31833	CallExpression	ZSTR_VAL ( ce_base -> name )		31710	0					
ANR	31834	Callee	ZSTR_VAL		31710	0					
ANR	31835	Identifier	ZSTR_VAL		31710	0					
ANR	31836	ArgumentList	ce_base -> name		31710	1					
ANR	31837	Argument	ce_base -> name		31710	0					
ANR	31838	PtrMemberAccess	ce_base -> name		31710	0					
ANR	31839	Identifier	ce_base		31710	0					
ANR	31840	Identifier	name		31710	1					
ANR	31841	Argument	Z_STRVAL_P ( arg )		31710	7					
ANR	31842	CallExpression	Z_STRVAL_P ( arg )		31710	0					
ANR	31843	Callee	Z_STRVAL_P		31710	0					
ANR	31844	Identifier	Z_STRVAL_P		31710	0					
ANR	31845	ArgumentList	arg		31710	1					
ANR	31846	Argument	arg		31710	0					
ANR	31847	Identifier	arg		31710	0					
ANR	31848	ExpressionStatement	* pce = NULL	277:3:8422:8433	31710	3	True				
ANR	31849	AssignmentExpression	* pce = NULL		31710	0		=			
ANR	31850	UnaryOperationExpression	* pce		31710	0					
ANR	31851	UnaryOperator	*		31710	0					
ANR	31852	Identifier	pce		31710	1					
ANR	31853	Identifier	NULL		31710	1					
ANR	31854	ReturnStatement	return 0 ;	278:3:8438:8446	31710	4	True				
ANR	31855	PrimaryExpression	0		31710	0					
ANR	31856	IfStatement	if ( ! * pce )		31710	5					
ANR	31857	Condition	! * pce	281:5:8460:8464	31710	0	True				
ANR	31858	UnaryOperationExpression	! * pce		31710	0					
ANR	31859	UnaryOperator	!		31710	0					
ANR	31860	UnaryOperationExpression	* pce		31710	1					
ANR	31861	UnaryOperator	*		31710	0					
ANR	31862	Identifier	pce		31710	1					
ANR	31863	CompoundStatement		24:2:651:705	31710	1					
ANR	31864	IdentifierDeclStatement	const char * space ;	282:2:8471:8488	31710	0	True				
ANR	31865	IdentifierDecl	* space		31710	0					
ANR	31866	IdentifierDeclType	const char *		31710	0					
ANR	31867	Identifier	space		31710	1					
ANR	31868	IdentifierDeclStatement	const char * class_name = get_active_class_name ( & space ) ;	283:2:8492:8546	31710	1	True				
ANR	31869	IdentifierDecl	* class_name = get_active_class_name ( & space )		31710	0					
ANR	31870	IdentifierDeclType	const char *		31710	0					
ANR	31871	Identifier	class_name		31710	1					
ANR	31872	AssignmentExpression	* class_name = get_active_class_name ( & space )		31710	2		=			
ANR	31873	Identifier	class_name		31710	0					
ANR	31874	CallExpression	get_active_class_name ( & space )		31710	1					
ANR	31875	Callee	get_active_class_name		31710	0					
ANR	31876	Identifier	get_active_class_name		31710	0					
ANR	31877	ArgumentList	& space		31710	1					
ANR	31878	Argument	& space		31710	0					
ANR	31879	UnaryOperationExpression	& space		31710	0					
ANR	31880	UnaryOperator	&		31710	0					
ANR	31881	Identifier	space		31710	1					
ANR	31882	ExpressionStatement	"zend_internal_type_error ( ZEND_ARG_USES_STRICT_TYPES ( ) , ""%s%s%s() expects parameter %d to be a valid class name, '%s' given"" , class_name , space , get_active_function_name ( ) , num , Z_STRVAL_P ( arg ) )"	285:2:8551:8750	31710	2	True				
ANR	31883	CallExpression	"zend_internal_type_error ( ZEND_ARG_USES_STRICT_TYPES ( ) , ""%s%s%s() expects parameter %d to be a valid class name, '%s' given"" , class_name , space , get_active_function_name ( ) , num , Z_STRVAL_P ( arg ) )"		31710	0					
ANR	31884	Callee	zend_internal_type_error		31710	0					
ANR	31885	Identifier	zend_internal_type_error		31710	0					
ANR	31886	ArgumentList	ZEND_ARG_USES_STRICT_TYPES ( )		31710	1					
ANR	31887	Argument	ZEND_ARG_USES_STRICT_TYPES ( )		31710	0					
ANR	31888	CallExpression	ZEND_ARG_USES_STRICT_TYPES ( )		31710	0					
ANR	31889	Callee	ZEND_ARG_USES_STRICT_TYPES		31710	0					
ANR	31890	Identifier	ZEND_ARG_USES_STRICT_TYPES		31710	0					
ANR	31891	ArgumentList			31710	1					
ANR	31892	Argument	"""%s%s%s() expects parameter %d to be a valid class name, '%s' given"""		31710	1					
ANR	31893	PrimaryExpression	"""%s%s%s() expects parameter %d to be a valid class name, '%s' given"""		31710	0					
ANR	31894	Argument	class_name		31710	2					
ANR	31895	Identifier	class_name		31710	0					
ANR	31896	Argument	space		31710	3					
ANR	31897	Identifier	space		31710	0					
ANR	31898	Argument	get_active_function_name ( )		31710	4					
ANR	31899	CallExpression	get_active_function_name ( )		31710	0					
ANR	31900	Callee	get_active_function_name		31710	0					
ANR	31901	Identifier	get_active_function_name		31710	0					
ANR	31902	ArgumentList			31710	1					
ANR	31903	Argument	num		31710	5					
ANR	31904	Identifier	num		31710	0					
ANR	31905	Argument	Z_STRVAL_P ( arg )		31710	6					
ANR	31906	CallExpression	Z_STRVAL_P ( arg )		31710	0					
ANR	31907	Callee	Z_STRVAL_P		31710	0					
ANR	31908	Identifier	Z_STRVAL_P		31710	0					
ANR	31909	ArgumentList	arg		31710	1					
ANR	31910	Argument	arg		31710	0					
ANR	31911	Identifier	arg		31710	0					
ANR	31912	ReturnStatement	return 0 ;	288:2:8754:8762	31710	3	True				
ANR	31913	PrimaryExpression	0		31710	0					
ANR	31914	ReturnStatement	return 1 ;	290:1:8768:8776	31710	6	True				
ANR	31915	PrimaryExpression	1		31710	0					
ANR	31916	ReturnType	ZEND_API int ZEND_FASTCALL		31710	1					
ANR	31917	Identifier	zend_parse_arg_class		31710	2					
ANR	31918	ParameterList	"zval * arg , zend_class_entry * * pce , int num , int check_null"		31710	3					
ANR	31919	Parameter	zval * arg	259:48:7770:7778	31710	0	True				
ANR	31920	ParameterType	zval *		31710	0					
ANR	31921	Identifier	arg		31710	1					
ANR	31922	Parameter	zend_class_entry * * pce	259:59:7781:7802	31710	1	True				
ANR	31923	ParameterType	zend_class_entry * *		31710	0					
ANR	31924	Identifier	pce		31710	1					
ANR	31925	Parameter	int num	259:83:7805:7811	31710	2	True				
ANR	31926	ParameterType	int		31710	0					
ANR	31927	Identifier	num		31710	1					
ANR	31928	Parameter	int check_null	259:92:7814:7827	31710	3	True				
ANR	31929	ParameterType	int		31710	0					
ANR	31930	Identifier	check_null		31710	1					
ANR	31931	CFGEntryNode	ENTRY		31710		True				
ANR	31932	CFGExitNode	EXIT		31710		True				
ANR	31933	Symbol	instanceof_function		31710						
ANR	31934	Symbol	ZEND_ARG_USES_STRICT_TYPES		31710						
ANR	31935	Symbol	NULL		31710						
ANR	31936	Symbol	ce_base		31710						
ANR	31937	Symbol	check_null		31710						
ANR	31938	Symbol	num		31710						
ANR	31939	Symbol	get_active_function_name		31710						
ANR	31940	Symbol	ce_base -> name		31710						
ANR	31941	Symbol	Z_TYPE_P		31710						
ANR	31942	Symbol	zend_lookup_class		31710						
ANR	31943	Symbol	get_active_class_name		31710						
ANR	31944	Symbol	Z_STRVAL_P		31710						
ANR	31945	Symbol	space		31710						
ANR	31946	Symbol	ZSTR_VAL		31710						
ANR	31947	Symbol	* ce_base		31710						
ANR	31948	Symbol	pce		31710						
ANR	31949	Symbol	IS_NULL		31710						
ANR	31950	Symbol	arg		31710						
ANR	31951	Symbol	Z_STR_P		31710						
ANR	31952	Symbol	* pce		31710						
ANR	31953	Symbol	& space		31710						
ANR	31954	Symbol	class_name		31710						
ANR	31955	Function	zend_parse_arg_bool_weak	295:0:8798:9000							
ANR	31956	FunctionDef	"zend_parse_arg_bool_weak (zval * arg , zend_bool * dest)"		31955	0					
ANR	31957	CompoundStatement		296:0:8888:9000	31955	0					
ANR	31958	IfStatement	if ( EXPECTED ( Z_TYPE_P ( arg ) <= IS_STRING ) )		31955	0					
ANR	31959	Condition	EXPECTED ( Z_TYPE_P ( arg ) <= IS_STRING )	297:5:8895:8930	31955	0	True				
ANR	31960	CallExpression	EXPECTED ( Z_TYPE_P ( arg ) <= IS_STRING )		31955	0					
ANR	31961	Callee	EXPECTED		31955	0					
ANR	31962	Identifier	EXPECTED		31955	0					
ANR	31963	ArgumentList	Z_TYPE_P ( arg ) <= IS_STRING		31955	1					
ANR	31964	Argument	Z_TYPE_P ( arg ) <= IS_STRING		31955	0					
ANR	31965	RelationalExpression	Z_TYPE_P ( arg ) <= IS_STRING		31955	0		<=			
ANR	31966	CallExpression	Z_TYPE_P ( arg )		31955	0					
ANR	31967	Callee	Z_TYPE_P		31955	0					
ANR	31968	Identifier	Z_TYPE_P		31955	0					
ANR	31969	ArgumentList	arg		31955	1					
ANR	31970	Argument	arg		31955	0					
ANR	31971	Identifier	arg		31955	0					
ANR	31972	Identifier	IS_STRING		31955	1					
ANR	31973	CompoundStatement		2:43:44:44	31955	1					
ANR	31974	ExpressionStatement	* dest = zend_is_true ( arg )	298:2:8937:8962	31955	0	True				
ANR	31975	AssignmentExpression	* dest = zend_is_true ( arg )		31955	0		=			
ANR	31976	UnaryOperationExpression	* dest		31955	0					
ANR	31977	UnaryOperator	*		31955	0					
ANR	31978	Identifier	dest		31955	1					
ANR	31979	CallExpression	zend_is_true ( arg )		31955	1					
ANR	31980	Callee	zend_is_true		31955	0					
ANR	31981	Identifier	zend_is_true		31955	0					
ANR	31982	ArgumentList	arg		31955	1					
ANR	31983	Argument	arg		31955	0					
ANR	31984	Identifier	arg		31955	0					
ANR	31985	ElseStatement	else		31955	0					
ANR	31986	CompoundStatement		4:8:83:83	31955	0					
ANR	31987	ReturnStatement	return 0 ;	300:2:8976:8984	31955	0	True				
ANR	31988	PrimaryExpression	0		31955	0					
ANR	31989	ReturnStatement	return 1 ;	302:1:8990:8998	31955	1	True				
ANR	31990	PrimaryExpression	1		31955	0					
ANR	31991	ReturnType	ZEND_API int ZEND_FASTCALL		31955	1					
ANR	31992	Identifier	zend_parse_arg_bool_weak		31955	2					
ANR	31993	ParameterList	"zval * arg , zend_bool * dest"		31955	3					
ANR	31994	Parameter	zval * arg	295:52:8850:8858	31955	0	True				
ANR	31995	ParameterType	zval *		31955	0					
ANR	31996	Identifier	arg		31955	1					
ANR	31997	Parameter	zend_bool * dest	295:63:8861:8875	31955	1	True				
ANR	31998	ParameterType	zend_bool *		31955	0					
ANR	31999	Identifier	dest		31955	1					
ANR	32000	CFGEntryNode	ENTRY		31955		True				
ANR	32001	CFGExitNode	EXIT		31955		True				
ANR	32002	Symbol	* dest		31955						
ANR	32003	Symbol	arg		31955						
ANR	32004	Symbol	IS_STRING		31955						
ANR	32005	Symbol	dest		31955						
ANR	32006	Symbol	Z_TYPE_P		31955						
ANR	32007	Symbol	zend_is_true		31955						
ANR	32008	Symbol	EXPECTED		31955						
ANR	32009	Function	zend_parse_arg_bool_slow	306:0:9013:9214							
ANR	32010	FunctionDef	"zend_parse_arg_bool_slow (zval * arg , zend_bool * dest)"		32009	0					
ANR	32011	CompoundStatement		307:0:9103:9214	32009	0					
ANR	32012	IfStatement	if ( UNEXPECTED ( ZEND_ARG_USES_STRICT_TYPES ( ) ) )		32009	0					
ANR	32013	Condition	UNEXPECTED ( ZEND_ARG_USES_STRICT_TYPES ( ) )	308:5:9110:9149	32009	0	True				
ANR	32014	CallExpression	UNEXPECTED ( ZEND_ARG_USES_STRICT_TYPES ( ) )		32009	0					
ANR	32015	Callee	UNEXPECTED		32009	0					
ANR	32016	Identifier	UNEXPECTED		32009	0					
ANR	32017	ArgumentList	ZEND_ARG_USES_STRICT_TYPES ( )		32009	1					
ANR	32018	Argument	ZEND_ARG_USES_STRICT_TYPES ( )		32009	0					
ANR	32019	CallExpression	ZEND_ARG_USES_STRICT_TYPES ( )		32009	0					
ANR	32020	Callee	ZEND_ARG_USES_STRICT_TYPES		32009	0					
ANR	32021	Identifier	ZEND_ARG_USES_STRICT_TYPES		32009	0					
ANR	32022	ArgumentList			32009	1					
ANR	32023	CompoundStatement		2:47:48:48	32009	1					
ANR	32024	ReturnStatement	return 0 ;	309:2:9156:9164	32009	0	True				
ANR	32025	PrimaryExpression	0		32009	0					
ANR	32026	ReturnStatement	"return zend_parse_arg_bool_weak ( arg , dest ) ;"	311:1:9170:9212	32009	1	True				
ANR	32027	CallExpression	"zend_parse_arg_bool_weak ( arg , dest )"		32009	0					
ANR	32028	Callee	zend_parse_arg_bool_weak		32009	0					
ANR	32029	Identifier	zend_parse_arg_bool_weak		32009	0					
ANR	32030	ArgumentList	arg		32009	1					
ANR	32031	Argument	arg		32009	0					
ANR	32032	Identifier	arg		32009	0					
ANR	32033	Argument	dest		32009	1					
ANR	32034	Identifier	dest		32009	0					
ANR	32035	ReturnType	ZEND_API int ZEND_FASTCALL		32009	1					
ANR	32036	Identifier	zend_parse_arg_bool_slow		32009	2					
ANR	32037	ParameterList	"zval * arg , zend_bool * dest"		32009	3					
ANR	32038	Parameter	zval * arg	306:52:9065:9073	32009	0	True				
ANR	32039	ParameterType	zval *		32009	0					
ANR	32040	Identifier	arg		32009	1					
ANR	32041	Parameter	zend_bool * dest	306:63:9076:9090	32009	1	True				
ANR	32042	ParameterType	zend_bool *		32009	0					
ANR	32043	Identifier	dest		32009	1					
ANR	32044	CFGEntryNode	ENTRY		32009		True				
ANR	32045	CFGExitNode	EXIT		32009		True				
ANR	32046	Symbol	UNEXPECTED		32009						
ANR	32047	Symbol	ZEND_ARG_USES_STRICT_TYPES		32009						
ANR	32048	Symbol	zend_parse_arg_bool_weak		32009						
ANR	32049	Symbol	arg		32009						
ANR	32050	Symbol	dest		32009						
ANR	32051	Function	zend_parse_arg_long_weak	315:0:9227:10128							
ANR	32052	FunctionDef	"zend_parse_arg_long_weak (zval * arg , zend_long * dest)"		32051	0					
ANR	32053	CompoundStatement		316:0:9317:10128	32051	0					
ANR	32054	IfStatement	if ( EXPECTED ( Z_TYPE_P ( arg ) == IS_DOUBLE ) )		32051	0					
ANR	32055	Condition	EXPECTED ( Z_TYPE_P ( arg ) == IS_DOUBLE )	317:5:9324:9359	32051	0	True				
ANR	32056	CallExpression	EXPECTED ( Z_TYPE_P ( arg ) == IS_DOUBLE )		32051	0					
ANR	32057	Callee	EXPECTED		32051	0					
ANR	32058	Identifier	EXPECTED		32051	0					
ANR	32059	ArgumentList	Z_TYPE_P ( arg ) == IS_DOUBLE		32051	1					
ANR	32060	Argument	Z_TYPE_P ( arg ) == IS_DOUBLE		32051	0					
ANR	32061	EqualityExpression	Z_TYPE_P ( arg ) == IS_DOUBLE		32051	0		==			
ANR	32062	CallExpression	Z_TYPE_P ( arg )		32051	0					
ANR	32063	Callee	Z_TYPE_P		32051	0					
ANR	32064	Identifier	Z_TYPE_P		32051	0					
ANR	32065	ArgumentList	arg		32051	1					
ANR	32066	Argument	arg		32051	0					
ANR	32067	Identifier	arg		32051	0					
ANR	32068	Identifier	IS_DOUBLE		32051	1					
ANR	32069	CompoundStatement		2:43:44:44	32051	1					
ANR	32070	IfStatement	if ( UNEXPECTED ( zend_isnan ( Z_DVAL_P ( arg ) ) ) )		32051	0					
ANR	32071	Condition	UNEXPECTED ( zend_isnan ( Z_DVAL_P ( arg ) ) )	318:6:9370:9406	32051	0	True				
ANR	32072	CallExpression	UNEXPECTED ( zend_isnan ( Z_DVAL_P ( arg ) ) )		32051	0					
ANR	32073	Callee	UNEXPECTED		32051	0					
ANR	32074	Identifier	UNEXPECTED		32051	0					
ANR	32075	ArgumentList	zend_isnan ( Z_DVAL_P ( arg ) )		32051	1					
ANR	32076	Argument	zend_isnan ( Z_DVAL_P ( arg ) )		32051	0					
ANR	32077	CallExpression	zend_isnan ( Z_DVAL_P ( arg ) )		32051	0					
ANR	32078	Callee	zend_isnan		32051	0					
ANR	32079	Identifier	zend_isnan		32051	0					
ANR	32080	ArgumentList	Z_DVAL_P ( arg )		32051	1					
ANR	32081	Argument	Z_DVAL_P ( arg )		32051	0					
ANR	32082	CallExpression	Z_DVAL_P ( arg )		32051	0					
ANR	32083	Callee	Z_DVAL_P		32051	0					
ANR	32084	Identifier	Z_DVAL_P		32051	0					
ANR	32085	ArgumentList	arg		32051	1					
ANR	32086	Argument	arg		32051	0					
ANR	32087	Identifier	arg		32051	0					
ANR	32088	CompoundStatement		3:45:91:91	32051	1					
ANR	32089	ReturnStatement	return 0 ;	319:3:9414:9422	32051	0	True				
ANR	32090	PrimaryExpression	0		32051	0					
ANR	32091	IfStatement	if ( UNEXPECTED ( ! ZEND_DOUBLE_FITS_LONG ( Z_DVAL_P ( arg ) ) ) )		32051	1					
ANR	32092	Condition	UNEXPECTED ( ! ZEND_DOUBLE_FITS_LONG ( Z_DVAL_P ( arg ) ) )	321:6:9434:9482	32051	0	True				
ANR	32093	CallExpression	UNEXPECTED ( ! ZEND_DOUBLE_FITS_LONG ( Z_DVAL_P ( arg ) ) )		32051	0					
ANR	32094	Callee	UNEXPECTED		32051	0					
ANR	32095	Identifier	UNEXPECTED		32051	0					
ANR	32096	ArgumentList	! ZEND_DOUBLE_FITS_LONG ( Z_DVAL_P ( arg ) )		32051	1					
ANR	32097	Argument	! ZEND_DOUBLE_FITS_LONG ( Z_DVAL_P ( arg ) )		32051	0					
ANR	32098	UnaryOperationExpression	! ZEND_DOUBLE_FITS_LONG ( Z_DVAL_P ( arg ) )		32051	0					
ANR	32099	UnaryOperator	!		32051	0					
ANR	32100	CallExpression	ZEND_DOUBLE_FITS_LONG ( Z_DVAL_P ( arg ) )		32051	1					
ANR	32101	Callee	ZEND_DOUBLE_FITS_LONG		32051	0					
ANR	32102	Identifier	ZEND_DOUBLE_FITS_LONG		32051	0					
ANR	32103	ArgumentList	Z_DVAL_P ( arg )		32051	1					
ANR	32104	Argument	Z_DVAL_P ( arg )		32051	0					
ANR	32105	CallExpression	Z_DVAL_P ( arg )		32051	0					
ANR	32106	Callee	Z_DVAL_P		32051	0					
ANR	32107	Identifier	Z_DVAL_P		32051	0					
ANR	32108	ArgumentList	arg		32051	1					
ANR	32109	Argument	arg		32051	0					
ANR	32110	Identifier	arg		32051	0					
ANR	32111	CompoundStatement		6:57:167:167	32051	1					
ANR	32112	ReturnStatement	return 0 ;	322:3:9490:9498	32051	0	True				
ANR	32113	PrimaryExpression	0		32051	0					
ANR	32114	ElseStatement	else		32051	0					
ANR	32115	CompoundStatement		8:9:191:191	32051	0					
ANR	32116	ExpressionStatement	* dest = zend_dval_to_lval ( Z_DVAL_P ( arg ) )	324:3:9514:9554	32051	0	True				
ANR	32117	AssignmentExpression	* dest = zend_dval_to_lval ( Z_DVAL_P ( arg ) )		32051	0		=			
ANR	32118	UnaryOperationExpression	* dest		32051	0					
ANR	32119	UnaryOperator	*		32051	0					
ANR	32120	Identifier	dest		32051	1					
ANR	32121	CallExpression	zend_dval_to_lval ( Z_DVAL_P ( arg ) )		32051	1					
ANR	32122	Callee	zend_dval_to_lval		32051	0					
ANR	32123	Identifier	zend_dval_to_lval		32051	0					
ANR	32124	ArgumentList	Z_DVAL_P ( arg )		32051	1					
ANR	32125	Argument	Z_DVAL_P ( arg )		32051	0					
ANR	32126	CallExpression	Z_DVAL_P ( arg )		32051	0					
ANR	32127	Callee	Z_DVAL_P		32051	0					
ANR	32128	Identifier	Z_DVAL_P		32051	0					
ANR	32129	ArgumentList	arg		32051	1					
ANR	32130	Argument	arg		32051	0					
ANR	32131	Identifier	arg		32051	0					
ANR	32132	ElseStatement	else		32051	0					
ANR	32133	IfStatement	if ( EXPECTED ( Z_TYPE_P ( arg ) == IS_STRING ) )		32051	0					
ANR	32134	Condition	EXPECTED ( Z_TYPE_P ( arg ) == IS_STRING )	326:12:9572:9607	32051	0	True				
ANR	32135	CallExpression	EXPECTED ( Z_TYPE_P ( arg ) == IS_STRING )		32051	0					
ANR	32136	Callee	EXPECTED		32051	0					
ANR	32137	Identifier	EXPECTED		32051	0					
ANR	32138	ArgumentList	Z_TYPE_P ( arg ) == IS_STRING		32051	1					
ANR	32139	Argument	Z_TYPE_P ( arg ) == IS_STRING		32051	0					
ANR	32140	EqualityExpression	Z_TYPE_P ( arg ) == IS_STRING		32051	0		==			
ANR	32141	CallExpression	Z_TYPE_P ( arg )		32051	0					
ANR	32142	Callee	Z_TYPE_P		32051	0					
ANR	32143	Identifier	Z_TYPE_P		32051	0					
ANR	32144	ArgumentList	arg		32051	1					
ANR	32145	Argument	arg		32051	0					
ANR	32146	Identifier	arg		32051	0					
ANR	32147	Identifier	IS_STRING		32051	1					
ANR	32148	CompoundStatement		13:2:308:316	32051	1					
ANR	32149	IdentifierDeclStatement	double d ;	327:2:9614:9622	32051	0	True				
ANR	32150	IdentifierDecl	d		32051	0					
ANR	32151	IdentifierDeclType	double		32051	0					
ANR	32152	Identifier	d		32051	1					
ANR	32153	IdentifierDeclStatement	int type ;	328:2:9626:9634	32051	1	True				
ANR	32154	IdentifierDecl	type		32051	0					
ANR	32155	IdentifierDeclType	int		32051	0					
ANR	32156	Identifier	type		32051	1					
ANR	32157	IfStatement	"if ( UNEXPECTED ( ( type = is_numeric_str_function ( Z_STR_P ( arg ) , dest , & d ) ) != IS_LONG ) )"		32051	2					
ANR	32158	Condition	"UNEXPECTED ( ( type = is_numeric_str_function ( Z_STR_P ( arg ) , dest , & d ) ) != IS_LONG )"	330:6:9643:9721	32051	0	True				
ANR	32159	CallExpression	"UNEXPECTED ( ( type = is_numeric_str_function ( Z_STR_P ( arg ) , dest , & d ) ) != IS_LONG )"		32051	0					
ANR	32160	Callee	UNEXPECTED		32051	0					
ANR	32161	Identifier	UNEXPECTED		32051	0					
ANR	32162	ArgumentList	"( type = is_numeric_str_function ( Z_STR_P ( arg ) , dest , & d ) ) != IS_LONG"		32051	1					
ANR	32163	Argument	"( type = is_numeric_str_function ( Z_STR_P ( arg ) , dest , & d ) ) != IS_LONG"		32051	0					
ANR	32164	EqualityExpression	"( type = is_numeric_str_function ( Z_STR_P ( arg ) , dest , & d ) ) != IS_LONG"		32051	0		!=			
ANR	32165	AssignmentExpression	"type = is_numeric_str_function ( Z_STR_P ( arg ) , dest , & d )"		32051	0		=			
ANR	32166	Identifier	type		32051	0					
ANR	32167	CallExpression	"is_numeric_str_function ( Z_STR_P ( arg ) , dest , & d )"		32051	1					
ANR	32168	Callee	is_numeric_str_function		32051	0					
ANR	32169	Identifier	is_numeric_str_function		32051	0					
ANR	32170	ArgumentList	Z_STR_P ( arg )		32051	1					
ANR	32171	Argument	Z_STR_P ( arg )		32051	0					
ANR	32172	CallExpression	Z_STR_P ( arg )		32051	0					
ANR	32173	Callee	Z_STR_P		32051	0					
ANR	32174	Identifier	Z_STR_P		32051	0					
ANR	32175	ArgumentList	arg		32051	1					
ANR	32176	Argument	arg		32051	0					
ANR	32177	Identifier	arg		32051	0					
ANR	32178	Argument	dest		32051	1					
ANR	32179	Identifier	dest		32051	0					
ANR	32180	Argument	& d		32051	2					
ANR	32181	UnaryOperationExpression	& d		32051	0					
ANR	32182	UnaryOperator	&		32051	0					
ANR	32183	Identifier	d		32051	1					
ANR	32184	Identifier	IS_LONG		32051	1					
ANR	32185	CompoundStatement		15:87:406:406	32051	1					
ANR	32186	IfStatement	if ( EXPECTED ( type != 0 ) )		32051	0					
ANR	32187	Condition	EXPECTED ( type != 0 )	331:7:9733:9751	32051	0	True				
ANR	32188	CallExpression	EXPECTED ( type != 0 )		32051	0					
ANR	32189	Callee	EXPECTED		32051	0					
ANR	32190	Identifier	EXPECTED		32051	0					
ANR	32191	ArgumentList	type != 0		32051	1					
ANR	32192	Argument	type != 0		32051	0					
ANR	32193	EqualityExpression	type != 0		32051	0		!=			
ANR	32194	Identifier	type		32051	0					
ANR	32195	PrimaryExpression	0		32051	1					
ANR	32196	CompoundStatement		16:28:436:436	32051	1					
ANR	32197	IfStatement	if ( UNEXPECTED ( zend_isnan ( d ) ) )		32051	0					
ANR	32198	Condition	UNEXPECTED ( zend_isnan ( d ) )	332:8:9764:9788	32051	0	True				
ANR	32199	CallExpression	UNEXPECTED ( zend_isnan ( d ) )		32051	0					
ANR	32200	Callee	UNEXPECTED		32051	0					
ANR	32201	Identifier	UNEXPECTED		32051	0					
ANR	32202	ArgumentList	zend_isnan ( d )		32051	1					
ANR	32203	Argument	zend_isnan ( d )		32051	0					
ANR	32204	CallExpression	zend_isnan ( d )		32051	0					
ANR	32205	Callee	zend_isnan		32051	0					
ANR	32206	Identifier	zend_isnan		32051	0					
ANR	32207	ArgumentList	d		32051	1					
ANR	32208	Argument	d		32051	0					
ANR	32209	Identifier	d		32051	0					
ANR	32210	CompoundStatement		17:35:473:473	32051	1					
ANR	32211	ReturnStatement	return 0 ;	333:5:9798:9806	32051	0	True				
ANR	32212	PrimaryExpression	0		32051	0					
ANR	32213	IfStatement	if ( UNEXPECTED ( ! ZEND_DOUBLE_FITS_LONG ( d ) ) )		32051	1					
ANR	32214	Condition	UNEXPECTED ( ! ZEND_DOUBLE_FITS_LONG ( d ) )	335:8:9822:9858	32051	0	True				
ANR	32215	CallExpression	UNEXPECTED ( ! ZEND_DOUBLE_FITS_LONG ( d ) )		32051	0					
ANR	32216	Callee	UNEXPECTED		32051	0					
ANR	32217	Identifier	UNEXPECTED		32051	0					
ANR	32218	ArgumentList	! ZEND_DOUBLE_FITS_LONG ( d )		32051	1					
ANR	32219	Argument	! ZEND_DOUBLE_FITS_LONG ( d )		32051	0					
ANR	32220	UnaryOperationExpression	! ZEND_DOUBLE_FITS_LONG ( d )		32051	0					
ANR	32221	UnaryOperator	!		32051	0					
ANR	32222	CallExpression	ZEND_DOUBLE_FITS_LONG ( d )		32051	1					
ANR	32223	Callee	ZEND_DOUBLE_FITS_LONG		32051	0					
ANR	32224	Identifier	ZEND_DOUBLE_FITS_LONG		32051	0					
ANR	32225	ArgumentList	d		32051	1					
ANR	32226	Argument	d		32051	0					
ANR	32227	Identifier	d		32051	0					
ANR	32228	CompoundStatement		20:47:543:543	32051	1					
ANR	32229	ReturnStatement	return 0 ;	336:5:9868:9876	32051	0	True				
ANR	32230	PrimaryExpression	0		32051	0					
ANR	32231	ElseStatement	else		32051	0					
ANR	32232	CompoundStatement		22:11:571:571	32051	0					
ANR	32233	ExpressionStatement	* dest = zend_dval_to_lval ( d )	338:5:9896:9924	32051	0	True				
ANR	32234	AssignmentExpression	* dest = zend_dval_to_lval ( d )		32051	0		=			
ANR	32235	UnaryOperationExpression	* dest		32051	0					
ANR	32236	UnaryOperator	*		32051	0					
ANR	32237	Identifier	dest		32051	1					
ANR	32238	CallExpression	zend_dval_to_lval ( d )		32051	1					
ANR	32239	Callee	zend_dval_to_lval		32051	0					
ANR	32240	Identifier	zend_dval_to_lval		32051	0					
ANR	32241	ArgumentList	d		32051	1					
ANR	32242	Argument	d		32051	0					
ANR	32243	Identifier	d		32051	0					
ANR	32244	ElseStatement	else		32051	0					
ANR	32245	CompoundStatement		25:10:624:624	32051	0					
ANR	32246	ReturnStatement	return 0 ;	341:4:9948:9956	32051	0	True				
ANR	32247	PrimaryExpression	0		32051	0					
ANR	32248	ElseStatement	else		32051	0					
ANR	32249	IfStatement	if ( EXPECTED ( Z_TYPE_P ( arg ) < IS_TRUE ) )		32051	0					
ANR	32250	Condition	EXPECTED ( Z_TYPE_P ( arg ) < IS_TRUE )	344:12:9979:10011	32051	0	True				
ANR	32251	CallExpression	EXPECTED ( Z_TYPE_P ( arg ) < IS_TRUE )		32051	0					
ANR	32252	Callee	EXPECTED		32051	0					
ANR	32253	Identifier	EXPECTED		32051	0					
ANR	32254	ArgumentList	Z_TYPE_P ( arg ) < IS_TRUE		32051	1					
ANR	32255	Argument	Z_TYPE_P ( arg ) < IS_TRUE		32051	0					
ANR	32256	RelationalExpression	Z_TYPE_P ( arg ) < IS_TRUE		32051	0		<			
ANR	32257	CallExpression	Z_TYPE_P ( arg )		32051	0					
ANR	32258	Callee	Z_TYPE_P		32051	0					
ANR	32259	Identifier	Z_TYPE_P		32051	0					
ANR	32260	ArgumentList	arg		32051	1					
ANR	32261	Argument	arg		32051	0					
ANR	32262	Identifier	arg		32051	0					
ANR	32263	Identifier	IS_TRUE		32051	1					
ANR	32264	CompoundStatement		29:47:696:696	32051	1					
ANR	32265	ExpressionStatement	* dest = 0	345:2:10018:10027	32051	0	True				
ANR	32266	AssignmentExpression	* dest = 0		32051	0		=			
ANR	32267	UnaryOperationExpression	* dest		32051	0					
ANR	32268	UnaryOperator	*		32051	0					
ANR	32269	Identifier	dest		32051	1					
ANR	32270	PrimaryExpression	0		32051	1					
ANR	32271	ElseStatement	else		32051	0					
ANR	32272	IfStatement	if ( EXPECTED ( Z_TYPE_P ( arg ) == IS_TRUE ) )		32051	0					
ANR	32273	Condition	EXPECTED ( Z_TYPE_P ( arg ) == IS_TRUE )	346:12:10041:10074	32051	0	True				
ANR	32274	CallExpression	EXPECTED ( Z_TYPE_P ( arg ) == IS_TRUE )		32051	0					
ANR	32275	Callee	EXPECTED		32051	0					
ANR	32276	Identifier	EXPECTED		32051	0					
ANR	32277	ArgumentList	Z_TYPE_P ( arg ) == IS_TRUE		32051	1					
ANR	32278	Argument	Z_TYPE_P ( arg ) == IS_TRUE		32051	0					
ANR	32279	EqualityExpression	Z_TYPE_P ( arg ) == IS_TRUE		32051	0		==			
ANR	32280	CallExpression	Z_TYPE_P ( arg )		32051	0					
ANR	32281	Callee	Z_TYPE_P		32051	0					
ANR	32282	Identifier	Z_TYPE_P		32051	0					
ANR	32283	ArgumentList	arg		32051	1					
ANR	32284	Argument	arg		32051	0					
ANR	32285	Identifier	arg		32051	0					
ANR	32286	Identifier	IS_TRUE		32051	1					
ANR	32287	CompoundStatement		31:48:759:759	32051	1					
ANR	32288	ExpressionStatement	* dest = 1	347:2:10081:10090	32051	0	True				
ANR	32289	AssignmentExpression	* dest = 1		32051	0		=			
ANR	32290	UnaryOperationExpression	* dest		32051	0					
ANR	32291	UnaryOperator	*		32051	0					
ANR	32292	Identifier	dest		32051	1					
ANR	32293	PrimaryExpression	1		32051	1					
ANR	32294	ElseStatement	else		32051	0					
ANR	32295	CompoundStatement		33:8:782:782	32051	0					
ANR	32296	ReturnStatement	return 0 ;	349:2:10104:10112	32051	0	True				
ANR	32297	PrimaryExpression	0		32051	0					
ANR	32298	ReturnStatement	return 1 ;	351:1:10118:10126	32051	1	True				
ANR	32299	PrimaryExpression	1		32051	0					
ANR	32300	ReturnType	ZEND_API int ZEND_FASTCALL		32051	1					
ANR	32301	Identifier	zend_parse_arg_long_weak		32051	2					
ANR	32302	ParameterList	"zval * arg , zend_long * dest"		32051	3					
ANR	32303	Parameter	zval * arg	315:52:9279:9287	32051	0	True				
ANR	32304	ParameterType	zval *		32051	0					
ANR	32305	Identifier	arg		32051	1					
ANR	32306	Parameter	zend_long * dest	315:63:9290:9304	32051	1	True				
ANR	32307	ParameterType	zend_long *		32051	0					
ANR	32308	Identifier	dest		32051	1					
ANR	32309	CFGEntryNode	ENTRY		32051		True				
ANR	32310	CFGExitNode	EXIT		32051		True				
ANR	32311	Symbol	d		32051						
ANR	32312	Symbol	* dest		32051						
ANR	32313	Symbol	IS_TRUE		32051						
ANR	32314	Symbol	is_numeric_str_function		32051						
ANR	32315	Symbol	& d		32051						
ANR	32316	Symbol	dest		32051						
ANR	32317	Symbol	Z_TYPE_P		32051						
ANR	32318	Symbol	type		32051						
ANR	32319	Symbol	Z_DVAL_P		32051						
ANR	32320	Symbol	UNEXPECTED		32051						
ANR	32321	Symbol	zend_dval_to_lval		32051						
ANR	32322	Symbol	IS_LONG		32051						
ANR	32323	Symbol	arg		32051						
ANR	32324	Symbol	IS_DOUBLE		32051						
ANR	32325	Symbol	zend_isnan		32051						
ANR	32326	Symbol	ZEND_DOUBLE_FITS_LONG		32051						
ANR	32327	Symbol	IS_STRING		32051						
ANR	32328	Symbol	Z_STR_P		32051						
ANR	32329	Symbol	EXPECTED		32051						
ANR	32330	Function	zend_parse_arg_long_slow	355:0:10141:10342							
ANR	32331	FunctionDef	"zend_parse_arg_long_slow (zval * arg , zend_long * dest)"		32330	0					
ANR	32332	CompoundStatement		356:0:10231:10342	32330	0					
ANR	32333	IfStatement	if ( UNEXPECTED ( ZEND_ARG_USES_STRICT_TYPES ( ) ) )		32330	0					
ANR	32334	Condition	UNEXPECTED ( ZEND_ARG_USES_STRICT_TYPES ( ) )	357:5:10238:10277	32330	0	True				
ANR	32335	CallExpression	UNEXPECTED ( ZEND_ARG_USES_STRICT_TYPES ( ) )		32330	0					
ANR	32336	Callee	UNEXPECTED		32330	0					
ANR	32337	Identifier	UNEXPECTED		32330	0					
ANR	32338	ArgumentList	ZEND_ARG_USES_STRICT_TYPES ( )		32330	1					
ANR	32339	Argument	ZEND_ARG_USES_STRICT_TYPES ( )		32330	0					
ANR	32340	CallExpression	ZEND_ARG_USES_STRICT_TYPES ( )		32330	0					
ANR	32341	Callee	ZEND_ARG_USES_STRICT_TYPES		32330	0					
ANR	32342	Identifier	ZEND_ARG_USES_STRICT_TYPES		32330	0					
ANR	32343	ArgumentList			32330	1					
ANR	32344	CompoundStatement		2:47:48:48	32330	1					
ANR	32345	ReturnStatement	return 0 ;	358:2:10284:10292	32330	0	True				
ANR	32346	PrimaryExpression	0		32330	0					
ANR	32347	ReturnStatement	"return zend_parse_arg_long_weak ( arg , dest ) ;"	360:1:10298:10340	32330	1	True				
ANR	32348	CallExpression	"zend_parse_arg_long_weak ( arg , dest )"		32330	0					
ANR	32349	Callee	zend_parse_arg_long_weak		32330	0					
ANR	32350	Identifier	zend_parse_arg_long_weak		32330	0					
ANR	32351	ArgumentList	arg		32330	1					
ANR	32352	Argument	arg		32330	0					
ANR	32353	Identifier	arg		32330	0					
ANR	32354	Argument	dest		32330	1					
ANR	32355	Identifier	dest		32330	0					
ANR	32356	ReturnType	ZEND_API int ZEND_FASTCALL		32330	1					
ANR	32357	Identifier	zend_parse_arg_long_slow		32330	2					
ANR	32358	ParameterList	"zval * arg , zend_long * dest"		32330	3					
ANR	32359	Parameter	zval * arg	355:52:10193:10201	32330	0	True				
ANR	32360	ParameterType	zval *		32330	0					
ANR	32361	Identifier	arg		32330	1					
ANR	32362	Parameter	zend_long * dest	355:63:10204:10218	32330	1	True				
ANR	32363	ParameterType	zend_long *		32330	0					
ANR	32364	Identifier	dest		32330	1					
ANR	32365	CFGEntryNode	ENTRY		32330		True				
ANR	32366	CFGExitNode	EXIT		32330		True				
ANR	32367	Symbol	UNEXPECTED		32330						
ANR	32368	Symbol	ZEND_ARG_USES_STRICT_TYPES		32330						
ANR	32369	Symbol	zend_parse_arg_long_weak		32330						
ANR	32370	Symbol	arg		32330						
ANR	32371	Symbol	dest		32330						
ANR	32372	Function	zend_parse_arg_long_cap_weak	364:0:10355:11350							
ANR	32373	FunctionDef	"zend_parse_arg_long_cap_weak (zval * arg , zend_long * dest)"		32372	0					
ANR	32374	CompoundStatement		365:0:10449:11350	32372	0					
ANR	32375	IfStatement	if ( EXPECTED ( Z_TYPE_P ( arg ) == IS_DOUBLE ) )		32372	0					
ANR	32376	Condition	EXPECTED ( Z_TYPE_P ( arg ) == IS_DOUBLE )	366:5:10456:10491	32372	0	True				
ANR	32377	CallExpression	EXPECTED ( Z_TYPE_P ( arg ) == IS_DOUBLE )		32372	0					
ANR	32378	Callee	EXPECTED		32372	0					
ANR	32379	Identifier	EXPECTED		32372	0					
ANR	32380	ArgumentList	Z_TYPE_P ( arg ) == IS_DOUBLE		32372	1					
ANR	32381	Argument	Z_TYPE_P ( arg ) == IS_DOUBLE		32372	0					
ANR	32382	EqualityExpression	Z_TYPE_P ( arg ) == IS_DOUBLE		32372	0		==			
ANR	32383	CallExpression	Z_TYPE_P ( arg )		32372	0					
ANR	32384	Callee	Z_TYPE_P		32372	0					
ANR	32385	Identifier	Z_TYPE_P		32372	0					
ANR	32386	ArgumentList	arg		32372	1					
ANR	32387	Argument	arg		32372	0					
ANR	32388	Identifier	arg		32372	0					
ANR	32389	Identifier	IS_DOUBLE		32372	1					
ANR	32390	CompoundStatement		2:43:44:44	32372	1					
ANR	32391	IfStatement	if ( UNEXPECTED ( zend_isnan ( Z_DVAL_P ( arg ) ) ) )		32372	0					
ANR	32392	Condition	UNEXPECTED ( zend_isnan ( Z_DVAL_P ( arg ) ) )	367:6:10502:10538	32372	0	True				
ANR	32393	CallExpression	UNEXPECTED ( zend_isnan ( Z_DVAL_P ( arg ) ) )		32372	0					
ANR	32394	Callee	UNEXPECTED		32372	0					
ANR	32395	Identifier	UNEXPECTED		32372	0					
ANR	32396	ArgumentList	zend_isnan ( Z_DVAL_P ( arg ) )		32372	1					
ANR	32397	Argument	zend_isnan ( Z_DVAL_P ( arg ) )		32372	0					
ANR	32398	CallExpression	zend_isnan ( Z_DVAL_P ( arg ) )		32372	0					
ANR	32399	Callee	zend_isnan		32372	0					
ANR	32400	Identifier	zend_isnan		32372	0					
ANR	32401	ArgumentList	Z_DVAL_P ( arg )		32372	1					
ANR	32402	Argument	Z_DVAL_P ( arg )		32372	0					
ANR	32403	CallExpression	Z_DVAL_P ( arg )		32372	0					
ANR	32404	Callee	Z_DVAL_P		32372	0					
ANR	32405	Identifier	Z_DVAL_P		32372	0					
ANR	32406	ArgumentList	arg		32372	1					
ANR	32407	Argument	arg		32372	0					
ANR	32408	Identifier	arg		32372	0					
ANR	32409	CompoundStatement		3:45:91:91	32372	1					
ANR	32410	ReturnStatement	return 0 ;	368:3:10546:10554	32372	0	True				
ANR	32411	PrimaryExpression	0		32372	0					
ANR	32412	IfStatement	if ( UNEXPECTED ( ! ZEND_DOUBLE_FITS_LONG ( Z_DVAL_P ( arg ) ) ) )		32372	1					
ANR	32413	Condition	UNEXPECTED ( ! ZEND_DOUBLE_FITS_LONG ( Z_DVAL_P ( arg ) ) )	370:6:10566:10614	32372	0	True				
ANR	32414	CallExpression	UNEXPECTED ( ! ZEND_DOUBLE_FITS_LONG ( Z_DVAL_P ( arg ) ) )		32372	0					
ANR	32415	Callee	UNEXPECTED		32372	0					
ANR	32416	Identifier	UNEXPECTED		32372	0					
ANR	32417	ArgumentList	! ZEND_DOUBLE_FITS_LONG ( Z_DVAL_P ( arg ) )		32372	1					
ANR	32418	Argument	! ZEND_DOUBLE_FITS_LONG ( Z_DVAL_P ( arg ) )		32372	0					
ANR	32419	UnaryOperationExpression	! ZEND_DOUBLE_FITS_LONG ( Z_DVAL_P ( arg ) )		32372	0					
ANR	32420	UnaryOperator	!		32372	0					
ANR	32421	CallExpression	ZEND_DOUBLE_FITS_LONG ( Z_DVAL_P ( arg ) )		32372	1					
ANR	32422	Callee	ZEND_DOUBLE_FITS_LONG		32372	0					
ANR	32423	Identifier	ZEND_DOUBLE_FITS_LONG		32372	0					
ANR	32424	ArgumentList	Z_DVAL_P ( arg )		32372	1					
ANR	32425	Argument	Z_DVAL_P ( arg )		32372	0					
ANR	32426	CallExpression	Z_DVAL_P ( arg )		32372	0					
ANR	32427	Callee	Z_DVAL_P		32372	0					
ANR	32428	Identifier	Z_DVAL_P		32372	0					
ANR	32429	ArgumentList	arg		32372	1					
ANR	32430	Argument	arg		32372	0					
ANR	32431	Identifier	arg		32372	0					
ANR	32432	CompoundStatement		6:57:167:167	32372	1					
ANR	32433	ExpressionStatement	* dest = ( Z_DVAL_P ( arg ) > 0 ) ? ZEND_LONG_MAX : ZEND_LONG_MIN	371:3:10622:10681	32372	0	True				
ANR	32434	AssignmentExpression	* dest = ( Z_DVAL_P ( arg ) > 0 ) ? ZEND_LONG_MAX : ZEND_LONG_MIN		32372	0		=			
ANR	32435	UnaryOperationExpression	* dest		32372	0					
ANR	32436	UnaryOperator	*		32372	0					
ANR	32437	Identifier	dest		32372	1					
ANR	32438	ConditionalExpression	( Z_DVAL_P ( arg ) > 0 ) ? ZEND_LONG_MAX : ZEND_LONG_MIN		32372	1					
ANR	32439	Condition	Z_DVAL_P ( arg ) > 0		32372	0					
ANR	32440	RelationalExpression	Z_DVAL_P ( arg ) > 0		32372	0		>			
ANR	32441	CallExpression	Z_DVAL_P ( arg )		32372	0					
ANR	32442	Callee	Z_DVAL_P		32372	0					
ANR	32443	Identifier	Z_DVAL_P		32372	0					
ANR	32444	ArgumentList	arg		32372	1					
ANR	32445	Argument	arg		32372	0					
ANR	32446	Identifier	arg		32372	0					
ANR	32447	PrimaryExpression	0		32372	1					
ANR	32448	Identifier	ZEND_LONG_MAX		32372	1					
ANR	32449	Identifier	ZEND_LONG_MIN		32372	2					
ANR	32450	ElseStatement	else		32372	0					
ANR	32451	CompoundStatement		8:9:242:242	32372	0					
ANR	32452	ExpressionStatement	* dest = zend_dval_to_lval ( Z_DVAL_P ( arg ) )	373:3:10697:10737	32372	0	True				
ANR	32453	AssignmentExpression	* dest = zend_dval_to_lval ( Z_DVAL_P ( arg ) )		32372	0		=			
ANR	32454	UnaryOperationExpression	* dest		32372	0					
ANR	32455	UnaryOperator	*		32372	0					
ANR	32456	Identifier	dest		32372	1					
ANR	32457	CallExpression	zend_dval_to_lval ( Z_DVAL_P ( arg ) )		32372	1					
ANR	32458	Callee	zend_dval_to_lval		32372	0					
ANR	32459	Identifier	zend_dval_to_lval		32372	0					
ANR	32460	ArgumentList	Z_DVAL_P ( arg )		32372	1					
ANR	32461	Argument	Z_DVAL_P ( arg )		32372	0					
ANR	32462	CallExpression	Z_DVAL_P ( arg )		32372	0					
ANR	32463	Callee	Z_DVAL_P		32372	0					
ANR	32464	Identifier	Z_DVAL_P		32372	0					
ANR	32465	ArgumentList	arg		32372	1					
ANR	32466	Argument	arg		32372	0					
ANR	32467	Identifier	arg		32372	0					
ANR	32468	ElseStatement	else		32372	0					
ANR	32469	IfStatement	if ( EXPECTED ( Z_TYPE_P ( arg ) == IS_STRING ) )		32372	0					
ANR	32470	Condition	EXPECTED ( Z_TYPE_P ( arg ) == IS_STRING )	375:12:10755:10790	32372	0	True				
ANR	32471	CallExpression	EXPECTED ( Z_TYPE_P ( arg ) == IS_STRING )		32372	0					
ANR	32472	Callee	EXPECTED		32372	0					
ANR	32473	Identifier	EXPECTED		32372	0					
ANR	32474	ArgumentList	Z_TYPE_P ( arg ) == IS_STRING		32372	1					
ANR	32475	Argument	Z_TYPE_P ( arg ) == IS_STRING		32372	0					
ANR	32476	EqualityExpression	Z_TYPE_P ( arg ) == IS_STRING		32372	0		==			
ANR	32477	CallExpression	Z_TYPE_P ( arg )		32372	0					
ANR	32478	Callee	Z_TYPE_P		32372	0					
ANR	32479	Identifier	Z_TYPE_P		32372	0					
ANR	32480	ArgumentList	arg		32372	1					
ANR	32481	Argument	arg		32372	0					
ANR	32482	Identifier	arg		32372	0					
ANR	32483	Identifier	IS_STRING		32372	1					
ANR	32484	CompoundStatement		13:2:359:367	32372	1					
ANR	32485	IdentifierDeclStatement	double d ;	376:2:10797:10805	32372	0	True				
ANR	32486	IdentifierDecl	d		32372	0					
ANR	32487	IdentifierDeclType	double		32372	0					
ANR	32488	Identifier	d		32372	1					
ANR	32489	IdentifierDeclStatement	int type ;	377:2:10809:10817	32372	1	True				
ANR	32490	IdentifierDecl	type		32372	0					
ANR	32491	IdentifierDeclType	int		32372	0					
ANR	32492	Identifier	type		32372	1					
ANR	32493	IfStatement	"if ( UNEXPECTED ( ( type = is_numeric_str_function ( Z_STR_P ( arg ) , dest , & d ) ) != IS_LONG ) )"		32372	2					
ANR	32494	Condition	"UNEXPECTED ( ( type = is_numeric_str_function ( Z_STR_P ( arg ) , dest , & d ) ) != IS_LONG )"	379:6:10826:10904	32372	0	True				
ANR	32495	CallExpression	"UNEXPECTED ( ( type = is_numeric_str_function ( Z_STR_P ( arg ) , dest , & d ) ) != IS_LONG )"		32372	0					
ANR	32496	Callee	UNEXPECTED		32372	0					
ANR	32497	Identifier	UNEXPECTED		32372	0					
ANR	32498	ArgumentList	"( type = is_numeric_str_function ( Z_STR_P ( arg ) , dest , & d ) ) != IS_LONG"		32372	1					
ANR	32499	Argument	"( type = is_numeric_str_function ( Z_STR_P ( arg ) , dest , & d ) ) != IS_LONG"		32372	0					
ANR	32500	EqualityExpression	"( type = is_numeric_str_function ( Z_STR_P ( arg ) , dest , & d ) ) != IS_LONG"		32372	0		!=			
ANR	32501	AssignmentExpression	"type = is_numeric_str_function ( Z_STR_P ( arg ) , dest , & d )"		32372	0		=			
ANR	32502	Identifier	type		32372	0					
ANR	32503	CallExpression	"is_numeric_str_function ( Z_STR_P ( arg ) , dest , & d )"		32372	1					
ANR	32504	Callee	is_numeric_str_function		32372	0					
ANR	32505	Identifier	is_numeric_str_function		32372	0					
ANR	32506	ArgumentList	Z_STR_P ( arg )		32372	1					
ANR	32507	Argument	Z_STR_P ( arg )		32372	0					
ANR	32508	CallExpression	Z_STR_P ( arg )		32372	0					
ANR	32509	Callee	Z_STR_P		32372	0					
ANR	32510	Identifier	Z_STR_P		32372	0					
ANR	32511	ArgumentList	arg		32372	1					
ANR	32512	Argument	arg		32372	0					
ANR	32513	Identifier	arg		32372	0					
ANR	32514	Argument	dest		32372	1					
ANR	32515	Identifier	dest		32372	0					
ANR	32516	Argument	& d		32372	2					
ANR	32517	UnaryOperationExpression	& d		32372	0					
ANR	32518	UnaryOperator	&		32372	0					
ANR	32519	Identifier	d		32372	1					
ANR	32520	Identifier	IS_LONG		32372	1					
ANR	32521	CompoundStatement		15:87:457:457	32372	1					
ANR	32522	IfStatement	if ( EXPECTED ( type != 0 ) )		32372	0					
ANR	32523	Condition	EXPECTED ( type != 0 )	380:7:10916:10934	32372	0	True				
ANR	32524	CallExpression	EXPECTED ( type != 0 )		32372	0					
ANR	32525	Callee	EXPECTED		32372	0					
ANR	32526	Identifier	EXPECTED		32372	0					
ANR	32527	ArgumentList	type != 0		32372	1					
ANR	32528	Argument	type != 0		32372	0					
ANR	32529	EqualityExpression	type != 0		32372	0		!=			
ANR	32530	Identifier	type		32372	0					
ANR	32531	PrimaryExpression	0		32372	1					
ANR	32532	CompoundStatement		16:28:487:487	32372	1					
ANR	32533	IfStatement	if ( UNEXPECTED ( zend_isnan ( d ) ) )		32372	0					
ANR	32534	Condition	UNEXPECTED ( zend_isnan ( d ) )	381:8:10947:10971	32372	0	True				
ANR	32535	CallExpression	UNEXPECTED ( zend_isnan ( d ) )		32372	0					
ANR	32536	Callee	UNEXPECTED		32372	0					
ANR	32537	Identifier	UNEXPECTED		32372	0					
ANR	32538	ArgumentList	zend_isnan ( d )		32372	1					
ANR	32539	Argument	zend_isnan ( d )		32372	0					
ANR	32540	CallExpression	zend_isnan ( d )		32372	0					
ANR	32541	Callee	zend_isnan		32372	0					
ANR	32542	Identifier	zend_isnan		32372	0					
ANR	32543	ArgumentList	d		32372	1					
ANR	32544	Argument	d		32372	0					
ANR	32545	Identifier	d		32372	0					
ANR	32546	CompoundStatement		17:35:524:524	32372	1					
ANR	32547	ReturnStatement	return 0 ;	382:5:10981:10989	32372	0	True				
ANR	32548	PrimaryExpression	0		32372	0					
ANR	32549	IfStatement	if ( UNEXPECTED ( ! ZEND_DOUBLE_FITS_LONG ( d ) ) )		32372	1					
ANR	32550	Condition	UNEXPECTED ( ! ZEND_DOUBLE_FITS_LONG ( d ) )	384:8:11005:11041	32372	0	True				
ANR	32551	CallExpression	UNEXPECTED ( ! ZEND_DOUBLE_FITS_LONG ( d ) )		32372	0					
ANR	32552	Callee	UNEXPECTED		32372	0					
ANR	32553	Identifier	UNEXPECTED		32372	0					
ANR	32554	ArgumentList	! ZEND_DOUBLE_FITS_LONG ( d )		32372	1					
ANR	32555	Argument	! ZEND_DOUBLE_FITS_LONG ( d )		32372	0					
ANR	32556	UnaryOperationExpression	! ZEND_DOUBLE_FITS_LONG ( d )		32372	0					
ANR	32557	UnaryOperator	!		32372	0					
ANR	32558	CallExpression	ZEND_DOUBLE_FITS_LONG ( d )		32372	1					
ANR	32559	Callee	ZEND_DOUBLE_FITS_LONG		32372	0					
ANR	32560	Identifier	ZEND_DOUBLE_FITS_LONG		32372	0					
ANR	32561	ArgumentList	d		32372	1					
ANR	32562	Argument	d		32372	0					
ANR	32563	Identifier	d		32372	0					
ANR	32564	CompoundStatement		20:47:594:594	32372	1					
ANR	32565	ExpressionStatement	* dest = ( d > 0 ) ? ZEND_LONG_MAX : ZEND_LONG_MIN	385:5:11051:11098	32372	0	True				
ANR	32566	AssignmentExpression	* dest = ( d > 0 ) ? ZEND_LONG_MAX : ZEND_LONG_MIN		32372	0		=			
ANR	32567	UnaryOperationExpression	* dest		32372	0					
ANR	32568	UnaryOperator	*		32372	0					
ANR	32569	Identifier	dest		32372	1					
ANR	32570	ConditionalExpression	( d > 0 ) ? ZEND_LONG_MAX : ZEND_LONG_MIN		32372	1					
ANR	32571	Condition	d > 0		32372	0					
ANR	32572	RelationalExpression	d > 0		32372	0		>			
ANR	32573	Identifier	d		32372	0					
ANR	32574	PrimaryExpression	0		32372	1					
ANR	32575	Identifier	ZEND_LONG_MAX		32372	1					
ANR	32576	Identifier	ZEND_LONG_MIN		32372	2					
ANR	32577	ElseStatement	else		32372	0					
ANR	32578	CompoundStatement		22:11:661:661	32372	0					
ANR	32579	ExpressionStatement	* dest = zend_dval_to_lval ( d )	387:5:11118:11146	32372	0	True				
ANR	32580	AssignmentExpression	* dest = zend_dval_to_lval ( d )		32372	0		=			
ANR	32581	UnaryOperationExpression	* dest		32372	0					
ANR	32582	UnaryOperator	*		32372	0					
ANR	32583	Identifier	dest		32372	1					
ANR	32584	CallExpression	zend_dval_to_lval ( d )		32372	1					
ANR	32585	Callee	zend_dval_to_lval		32372	0					
ANR	32586	Identifier	zend_dval_to_lval		32372	0					
ANR	32587	ArgumentList	d		32372	1					
ANR	32588	Argument	d		32372	0					
ANR	32589	Identifier	d		32372	0					
ANR	32590	ElseStatement	else		32372	0					
ANR	32591	CompoundStatement		25:10:714:714	32372	0					
ANR	32592	ReturnStatement	return 0 ;	390:4:11170:11178	32372	0	True				
ANR	32593	PrimaryExpression	0		32372	0					
ANR	32594	ElseStatement	else		32372	0					
ANR	32595	IfStatement	if ( EXPECTED ( Z_TYPE_P ( arg ) < IS_TRUE ) )		32372	0					
ANR	32596	Condition	EXPECTED ( Z_TYPE_P ( arg ) < IS_TRUE )	393:12:11201:11233	32372	0	True				
ANR	32597	CallExpression	EXPECTED ( Z_TYPE_P ( arg ) < IS_TRUE )		32372	0					
ANR	32598	Callee	EXPECTED		32372	0					
ANR	32599	Identifier	EXPECTED		32372	0					
ANR	32600	ArgumentList	Z_TYPE_P ( arg ) < IS_TRUE		32372	1					
ANR	32601	Argument	Z_TYPE_P ( arg ) < IS_TRUE		32372	0					
ANR	32602	RelationalExpression	Z_TYPE_P ( arg ) < IS_TRUE		32372	0		<			
ANR	32603	CallExpression	Z_TYPE_P ( arg )		32372	0					
ANR	32604	Callee	Z_TYPE_P		32372	0					
ANR	32605	Identifier	Z_TYPE_P		32372	0					
ANR	32606	ArgumentList	arg		32372	1					
ANR	32607	Argument	arg		32372	0					
ANR	32608	Identifier	arg		32372	0					
ANR	32609	Identifier	IS_TRUE		32372	1					
ANR	32610	CompoundStatement		29:47:786:786	32372	1					
ANR	32611	ExpressionStatement	* dest = 0	394:2:11240:11249	32372	0	True				
ANR	32612	AssignmentExpression	* dest = 0		32372	0		=			
ANR	32613	UnaryOperationExpression	* dest		32372	0					
ANR	32614	UnaryOperator	*		32372	0					
ANR	32615	Identifier	dest		32372	1					
ANR	32616	PrimaryExpression	0		32372	1					
ANR	32617	ElseStatement	else		32372	0					
ANR	32618	IfStatement	if ( EXPECTED ( Z_TYPE_P ( arg ) == IS_TRUE ) )		32372	0					
ANR	32619	Condition	EXPECTED ( Z_TYPE_P ( arg ) == IS_TRUE )	395:12:11263:11296	32372	0	True				
ANR	32620	CallExpression	EXPECTED ( Z_TYPE_P ( arg ) == IS_TRUE )		32372	0					
ANR	32621	Callee	EXPECTED		32372	0					
ANR	32622	Identifier	EXPECTED		32372	0					
ANR	32623	ArgumentList	Z_TYPE_P ( arg ) == IS_TRUE		32372	1					
ANR	32624	Argument	Z_TYPE_P ( arg ) == IS_TRUE		32372	0					
ANR	32625	EqualityExpression	Z_TYPE_P ( arg ) == IS_TRUE		32372	0		==			
ANR	32626	CallExpression	Z_TYPE_P ( arg )		32372	0					
ANR	32627	Callee	Z_TYPE_P		32372	0					
ANR	32628	Identifier	Z_TYPE_P		32372	0					
ANR	32629	ArgumentList	arg		32372	1					
ANR	32630	Argument	arg		32372	0					
ANR	32631	Identifier	arg		32372	0					
ANR	32632	Identifier	IS_TRUE		32372	1					
ANR	32633	CompoundStatement		31:48:849:849	32372	1					
ANR	32634	ExpressionStatement	* dest = 1	396:2:11303:11312	32372	0	True				
ANR	32635	AssignmentExpression	* dest = 1		32372	0		=			
ANR	32636	UnaryOperationExpression	* dest		32372	0					
ANR	32637	UnaryOperator	*		32372	0					
ANR	32638	Identifier	dest		32372	1					
ANR	32639	PrimaryExpression	1		32372	1					
ANR	32640	ElseStatement	else		32372	0					
ANR	32641	CompoundStatement		33:8:872:872	32372	0					
ANR	32642	ReturnStatement	return 0 ;	398:2:11326:11334	32372	0	True				
ANR	32643	PrimaryExpression	0		32372	0					
ANR	32644	ReturnStatement	return 1 ;	400:1:11340:11348	32372	1	True				
ANR	32645	PrimaryExpression	1		32372	0					
ANR	32646	ReturnType	ZEND_API int ZEND_FASTCALL		32372	1					
ANR	32647	Identifier	zend_parse_arg_long_cap_weak		32372	2					
ANR	32648	ParameterList	"zval * arg , zend_long * dest"		32372	3					
ANR	32649	Parameter	zval * arg	364:56:10411:10419	32372	0	True				
ANR	32650	ParameterType	zval *		32372	0					
ANR	32651	Identifier	arg		32372	1					
ANR	32652	Parameter	zend_long * dest	364:67:10422:10436	32372	1	True				
ANR	32653	ParameterType	zend_long *		32372	0					
ANR	32654	Identifier	dest		32372	1					
ANR	32655	CFGEntryNode	ENTRY		32372		True				
ANR	32656	CFGExitNode	EXIT		32372		True				
ANR	32657	Symbol	ZEND_LONG_MAX		32372						
ANR	32658	Symbol	d		32372						
ANR	32659	Symbol	* dest		32372						
ANR	32660	Symbol	IS_TRUE		32372						
ANR	32661	Symbol	is_numeric_str_function		32372						
ANR	32662	Symbol	& d		32372						
ANR	32663	Symbol	dest		32372						
ANR	32664	Symbol	Z_TYPE_P		32372						
ANR	32665	Symbol	type		32372						
ANR	32666	Symbol	Z_DVAL_P		32372						
ANR	32667	Symbol	UNEXPECTED		32372						
ANR	32668	Symbol	zend_dval_to_lval		32372						
ANR	32669	Symbol	ZEND_LONG_MIN		32372						
ANR	32670	Symbol	IS_LONG		32372						
ANR	32671	Symbol	arg		32372						
ANR	32672	Symbol	IS_DOUBLE		32372						
ANR	32673	Symbol	zend_isnan		32372						
ANR	32674	Symbol	ZEND_DOUBLE_FITS_LONG		32372						
ANR	32675	Symbol	IS_STRING		32372						
ANR	32676	Symbol	Z_STR_P		32372						
ANR	32677	Symbol	EXPECTED		32372						
ANR	32678	Function	zend_parse_arg_long_cap_slow	404:0:11363:11572							
ANR	32679	FunctionDef	"zend_parse_arg_long_cap_slow (zval * arg , zend_long * dest)"		32678	0					
ANR	32680	CompoundStatement		405:0:11457:11572	32678	0					
ANR	32681	IfStatement	if ( UNEXPECTED ( ZEND_ARG_USES_STRICT_TYPES ( ) ) )		32678	0					
ANR	32682	Condition	UNEXPECTED ( ZEND_ARG_USES_STRICT_TYPES ( ) )	406:5:11464:11503	32678	0	True				
ANR	32683	CallExpression	UNEXPECTED ( ZEND_ARG_USES_STRICT_TYPES ( ) )		32678	0					
ANR	32684	Callee	UNEXPECTED		32678	0					
ANR	32685	Identifier	UNEXPECTED		32678	0					
ANR	32686	ArgumentList	ZEND_ARG_USES_STRICT_TYPES ( )		32678	1					
ANR	32687	Argument	ZEND_ARG_USES_STRICT_TYPES ( )		32678	0					
ANR	32688	CallExpression	ZEND_ARG_USES_STRICT_TYPES ( )		32678	0					
ANR	32689	Callee	ZEND_ARG_USES_STRICT_TYPES		32678	0					
ANR	32690	Identifier	ZEND_ARG_USES_STRICT_TYPES		32678	0					
ANR	32691	ArgumentList			32678	1					
ANR	32692	CompoundStatement		2:47:48:48	32678	1					
ANR	32693	ReturnStatement	return 0 ;	407:2:11510:11518	32678	0	True				
ANR	32694	PrimaryExpression	0		32678	0					
ANR	32695	ReturnStatement	"return zend_parse_arg_long_cap_weak ( arg , dest ) ;"	409:1:11524:11570	32678	1	True				
ANR	32696	CallExpression	"zend_parse_arg_long_cap_weak ( arg , dest )"		32678	0					
ANR	32697	Callee	zend_parse_arg_long_cap_weak		32678	0					
ANR	32698	Identifier	zend_parse_arg_long_cap_weak		32678	0					
ANR	32699	ArgumentList	arg		32678	1					
ANR	32700	Argument	arg		32678	0					
ANR	32701	Identifier	arg		32678	0					
ANR	32702	Argument	dest		32678	1					
ANR	32703	Identifier	dest		32678	0					
ANR	32704	ReturnType	ZEND_API int ZEND_FASTCALL		32678	1					
ANR	32705	Identifier	zend_parse_arg_long_cap_slow		32678	2					
ANR	32706	ParameterList	"zval * arg , zend_long * dest"		32678	3					
ANR	32707	Parameter	zval * arg	404:56:11419:11427	32678	0	True				
ANR	32708	ParameterType	zval *		32678	0					
ANR	32709	Identifier	arg		32678	1					
ANR	32710	Parameter	zend_long * dest	404:67:11430:11444	32678	1	True				
ANR	32711	ParameterType	zend_long *		32678	0					
ANR	32712	Identifier	dest		32678	1					
ANR	32713	CFGEntryNode	ENTRY		32678		True				
ANR	32714	CFGExitNode	EXIT		32678		True				
ANR	32715	Symbol	UNEXPECTED		32678						
ANR	32716	Symbol	zend_parse_arg_long_cap_weak		32678						
ANR	32717	Symbol	ZEND_ARG_USES_STRICT_TYPES		32678						
ANR	32718	Symbol	arg		32678						
ANR	32719	Symbol	dest		32678						
ANR	32720	Function	zend_parse_arg_double_weak	413:0:11585:12178							
ANR	32721	FunctionDef	"zend_parse_arg_double_weak (zval * arg , double * dest)"		32720	0					
ANR	32722	CompoundStatement		414:0:11674:12178	32720	0					
ANR	32723	IfStatement	if ( EXPECTED ( Z_TYPE_P ( arg ) == IS_LONG ) )		32720	0					
ANR	32724	Condition	EXPECTED ( Z_TYPE_P ( arg ) == IS_LONG )	415:5:11681:11714	32720	0	True				
ANR	32725	CallExpression	EXPECTED ( Z_TYPE_P ( arg ) == IS_LONG )		32720	0					
ANR	32726	Callee	EXPECTED		32720	0					
ANR	32727	Identifier	EXPECTED		32720	0					
ANR	32728	ArgumentList	Z_TYPE_P ( arg ) == IS_LONG		32720	1					
ANR	32729	Argument	Z_TYPE_P ( arg ) == IS_LONG		32720	0					
ANR	32730	EqualityExpression	Z_TYPE_P ( arg ) == IS_LONG		32720	0		==			
ANR	32731	CallExpression	Z_TYPE_P ( arg )		32720	0					
ANR	32732	Callee	Z_TYPE_P		32720	0					
ANR	32733	Identifier	Z_TYPE_P		32720	0					
ANR	32734	ArgumentList	arg		32720	1					
ANR	32735	Argument	arg		32720	0					
ANR	32736	Identifier	arg		32720	0					
ANR	32737	Identifier	IS_LONG		32720	1					
ANR	32738	CompoundStatement		2:41:42:42	32720	1					
ANR	32739	ExpressionStatement	* dest = ( double ) Z_LVAL_P ( arg )	416:2:11721:11750	32720	0	True				
ANR	32740	AssignmentExpression	* dest = ( double ) Z_LVAL_P ( arg )		32720	0		=			
ANR	32741	UnaryOperationExpression	* dest		32720	0					
ANR	32742	UnaryOperator	*		32720	0					
ANR	32743	Identifier	dest		32720	1					
ANR	32744	CastExpression	( double ) Z_LVAL_P ( arg )		32720	1					
ANR	32745	CastTarget	double		32720	0					
ANR	32746	CallExpression	Z_LVAL_P ( arg )		32720	1					
ANR	32747	Callee	Z_LVAL_P		32720	0					
ANR	32748	Identifier	Z_LVAL_P		32720	0					
ANR	32749	ArgumentList	arg		32720	1					
ANR	32750	Argument	arg		32720	0					
ANR	32751	Identifier	arg		32720	0					
ANR	32752	ElseStatement	else		32720	0					
ANR	32753	IfStatement	if ( EXPECTED ( Z_TYPE_P ( arg ) == IS_STRING ) )		32720	0					
ANR	32754	Condition	EXPECTED ( Z_TYPE_P ( arg ) == IS_STRING )	417:12:11764:11799	32720	0	True				
ANR	32755	CallExpression	EXPECTED ( Z_TYPE_P ( arg ) == IS_STRING )		32720	0					
ANR	32756	Callee	EXPECTED		32720	0					
ANR	32757	Identifier	EXPECTED		32720	0					
ANR	32758	ArgumentList	Z_TYPE_P ( arg ) == IS_STRING		32720	1					
ANR	32759	Argument	Z_TYPE_P ( arg ) == IS_STRING		32720	0					
ANR	32760	EqualityExpression	Z_TYPE_P ( arg ) == IS_STRING		32720	0		==			
ANR	32761	CallExpression	Z_TYPE_P ( arg )		32720	0					
ANR	32762	Callee	Z_TYPE_P		32720	0					
ANR	32763	Identifier	Z_TYPE_P		32720	0					
ANR	32764	ArgumentList	arg		32720	1					
ANR	32765	Argument	arg		32720	0					
ANR	32766	Identifier	arg		32720	0					
ANR	32767	Identifier	IS_STRING		32720	1					
ANR	32768	CompoundStatement		6:2:146:154	32720	1					
ANR	32769	IdentifierDeclStatement	zend_long l ;	418:2:11806:11817	32720	0	True				
ANR	32770	IdentifierDecl	l		32720	0					
ANR	32771	IdentifierDeclType	zend_long		32720	0					
ANR	32772	Identifier	l		32720	1					
ANR	32773	IdentifierDeclStatement	int type ;	419:2:11821:11829	32720	1	True				
ANR	32774	IdentifierDecl	type		32720	0					
ANR	32775	IdentifierDeclType	int		32720	0					
ANR	32776	Identifier	type		32720	1					
ANR	32777	IfStatement	"if ( UNEXPECTED ( ( type = is_numeric_str_function ( Z_STR_P ( arg ) , & l , dest ) ) != IS_DOUBLE ) )"		32720	2					
ANR	32778	Condition	"UNEXPECTED ( ( type = is_numeric_str_function ( Z_STR_P ( arg ) , & l , dest ) ) != IS_DOUBLE )"	421:6:11838:11918	32720	0	True				
ANR	32779	CallExpression	"UNEXPECTED ( ( type = is_numeric_str_function ( Z_STR_P ( arg ) , & l , dest ) ) != IS_DOUBLE )"		32720	0					
ANR	32780	Callee	UNEXPECTED		32720	0					
ANR	32781	Identifier	UNEXPECTED		32720	0					
ANR	32782	ArgumentList	"( type = is_numeric_str_function ( Z_STR_P ( arg ) , & l , dest ) ) != IS_DOUBLE"		32720	1					
ANR	32783	Argument	"( type = is_numeric_str_function ( Z_STR_P ( arg ) , & l , dest ) ) != IS_DOUBLE"		32720	0					
ANR	32784	EqualityExpression	"( type = is_numeric_str_function ( Z_STR_P ( arg ) , & l , dest ) ) != IS_DOUBLE"		32720	0		!=			
ANR	32785	AssignmentExpression	"type = is_numeric_str_function ( Z_STR_P ( arg ) , & l , dest )"		32720	0		=			
ANR	32786	Identifier	type		32720	0					
ANR	32787	CallExpression	"is_numeric_str_function ( Z_STR_P ( arg ) , & l , dest )"		32720	1					
ANR	32788	Callee	is_numeric_str_function		32720	0					
ANR	32789	Identifier	is_numeric_str_function		32720	0					
ANR	32790	ArgumentList	Z_STR_P ( arg )		32720	1					
ANR	32791	Argument	Z_STR_P ( arg )		32720	0					
ANR	32792	CallExpression	Z_STR_P ( arg )		32720	0					
ANR	32793	Callee	Z_STR_P		32720	0					
ANR	32794	Identifier	Z_STR_P		32720	0					
ANR	32795	ArgumentList	arg		32720	1					
ANR	32796	Argument	arg		32720	0					
ANR	32797	Identifier	arg		32720	0					
ANR	32798	Argument	& l		32720	1					
ANR	32799	UnaryOperationExpression	& l		32720	0					
ANR	32800	UnaryOperator	&		32720	0					
ANR	32801	Identifier	l		32720	1					
ANR	32802	Argument	dest		32720	2					
ANR	32803	Identifier	dest		32720	0					
ANR	32804	Identifier	IS_DOUBLE		32720	1					
ANR	32805	CompoundStatement		8:89:246:246	32720	1					
ANR	32806	IfStatement	if ( EXPECTED ( type != 0 ) )		32720	0					
ANR	32807	Condition	EXPECTED ( type != 0 )	422:7:11930:11948	32720	0	True				
ANR	32808	CallExpression	EXPECTED ( type != 0 )		32720	0					
ANR	32809	Callee	EXPECTED		32720	0					
ANR	32810	Identifier	EXPECTED		32720	0					
ANR	32811	ArgumentList	type != 0		32720	1					
ANR	32812	Argument	type != 0		32720	0					
ANR	32813	EqualityExpression	type != 0		32720	0		!=			
ANR	32814	Identifier	type		32720	0					
ANR	32815	PrimaryExpression	0		32720	1					
ANR	32816	CompoundStatement		9:28:276:276	32720	1					
ANR	32817	ExpressionStatement	* dest = ( double ) ( l )	423:4:11957:11976	32720	0	True				
ANR	32818	AssignmentExpression	* dest = ( double ) ( l )		32720	0		=			
ANR	32819	UnaryOperationExpression	* dest		32720	0					
ANR	32820	UnaryOperator	*		32720	0					
ANR	32821	Identifier	dest		32720	1					
ANR	32822	CastExpression	( double ) ( l )		32720	1					
ANR	32823	CastTarget	double		32720	0					
ANR	32824	Identifier	l		32720	1					
ANR	32825	ElseStatement	else		32720	0					
ANR	32826	CompoundStatement		11:10:313:313	32720	0					
ANR	32827	ReturnStatement	return 0 ;	425:4:11994:12002	32720	0	True				
ANR	32828	PrimaryExpression	0		32720	0					
ANR	32829	ElseStatement	else		32720	0					
ANR	32830	IfStatement	if ( EXPECTED ( Z_TYPE_P ( arg ) < IS_TRUE ) )		32720	0					
ANR	32831	Condition	EXPECTED ( Z_TYPE_P ( arg ) < IS_TRUE )	428:12:12025:12057	32720	0	True				
ANR	32832	CallExpression	EXPECTED ( Z_TYPE_P ( arg ) < IS_TRUE )		32720	0					
ANR	32833	Callee	EXPECTED		32720	0					
ANR	32834	Identifier	EXPECTED		32720	0					
ANR	32835	ArgumentList	Z_TYPE_P ( arg ) < IS_TRUE		32720	1					
ANR	32836	Argument	Z_TYPE_P ( arg ) < IS_TRUE		32720	0					
ANR	32837	RelationalExpression	Z_TYPE_P ( arg ) < IS_TRUE		32720	0		<			
ANR	32838	CallExpression	Z_TYPE_P ( arg )		32720	0					
ANR	32839	Callee	Z_TYPE_P		32720	0					
ANR	32840	Identifier	Z_TYPE_P		32720	0					
ANR	32841	ArgumentList	arg		32720	1					
ANR	32842	Argument	arg		32720	0					
ANR	32843	Identifier	arg		32720	0					
ANR	32844	Identifier	IS_TRUE		32720	1					
ANR	32845	CompoundStatement		15:47:385:385	32720	1					
ANR	32846	ExpressionStatement	* dest = 0.0	429:2:12064:12075	32720	0	True				
ANR	32847	AssignmentExpression	* dest = 0.0		32720	0		=			
ANR	32848	UnaryOperationExpression	* dest		32720	0					
ANR	32849	UnaryOperator	*		32720	0					
ANR	32850	Identifier	dest		32720	1					
ANR	32851	PrimaryExpression	0.0		32720	1					
ANR	32852	ElseStatement	else		32720	0					
ANR	32853	IfStatement	if ( EXPECTED ( Z_TYPE_P ( arg ) == IS_TRUE ) )		32720	0					
ANR	32854	Condition	EXPECTED ( Z_TYPE_P ( arg ) == IS_TRUE )	430:12:12089:12122	32720	0	True				
ANR	32855	CallExpression	EXPECTED ( Z_TYPE_P ( arg ) == IS_TRUE )		32720	0					
ANR	32856	Callee	EXPECTED		32720	0					
ANR	32857	Identifier	EXPECTED		32720	0					
ANR	32858	ArgumentList	Z_TYPE_P ( arg ) == IS_TRUE		32720	1					
ANR	32859	Argument	Z_TYPE_P ( arg ) == IS_TRUE		32720	0					
ANR	32860	EqualityExpression	Z_TYPE_P ( arg ) == IS_TRUE		32720	0		==			
ANR	32861	CallExpression	Z_TYPE_P ( arg )		32720	0					
ANR	32862	Callee	Z_TYPE_P		32720	0					
ANR	32863	Identifier	Z_TYPE_P		32720	0					
ANR	32864	ArgumentList	arg		32720	1					
ANR	32865	Argument	arg		32720	0					
ANR	32866	Identifier	arg		32720	0					
ANR	32867	Identifier	IS_TRUE		32720	1					
ANR	32868	CompoundStatement		17:48:450:450	32720	1					
ANR	32869	ExpressionStatement	* dest = 1.0	431:2:12129:12140	32720	0	True				
ANR	32870	AssignmentExpression	* dest = 1.0		32720	0		=			
ANR	32871	UnaryOperationExpression	* dest		32720	0					
ANR	32872	UnaryOperator	*		32720	0					
ANR	32873	Identifier	dest		32720	1					
ANR	32874	PrimaryExpression	1.0		32720	1					
ANR	32875	ElseStatement	else		32720	0					
ANR	32876	CompoundStatement		19:8:475:475	32720	0					
ANR	32877	ReturnStatement	return 0 ;	433:2:12154:12162	32720	0	True				
ANR	32878	PrimaryExpression	0		32720	0					
ANR	32879	ReturnStatement	return 1 ;	435:1:12168:12176	32720	1	True				
ANR	32880	PrimaryExpression	1		32720	0					
ANR	32881	ReturnType	ZEND_API int ZEND_FASTCALL		32720	1					
ANR	32882	Identifier	zend_parse_arg_double_weak		32720	2					
ANR	32883	ParameterList	"zval * arg , double * dest"		32720	3					
ANR	32884	Parameter	zval * arg	413:54:11639:11647	32720	0	True				
ANR	32885	ParameterType	zval *		32720	0					
ANR	32886	Identifier	arg		32720	1					
ANR	32887	Parameter	double * dest	413:65:11650:11661	32720	1	True				
ANR	32888	ParameterType	double *		32720	0					
ANR	32889	Identifier	dest		32720	1					
ANR	32890	CFGEntryNode	ENTRY		32720		True				
ANR	32891	CFGExitNode	EXIT		32720		True				
ANR	32892	Symbol	* dest		32720						
ANR	32893	Symbol	IS_TRUE		32720						
ANR	32894	Symbol	is_numeric_str_function		32720						
ANR	32895	Symbol	dest		32720						
ANR	32896	Symbol	Z_TYPE_P		32720						
ANR	32897	Symbol	l		32720						
ANR	32898	Symbol	type		32720						
ANR	32899	Symbol	Z_LVAL_P		32720						
ANR	32900	Symbol	UNEXPECTED		32720						
ANR	32901	Symbol	& l		32720						
ANR	32902	Symbol	IS_LONG		32720						
ANR	32903	Symbol	arg		32720						
ANR	32904	Symbol	IS_DOUBLE		32720						
ANR	32905	Symbol	IS_STRING		32720						
ANR	32906	Symbol	Z_STR_P		32720						
ANR	32907	Symbol	EXPECTED		32720						
ANR	32908	Function	zend_parse_arg_double_slow	439:0:12191:12545							
ANR	32909	FunctionDef	"zend_parse_arg_double_slow (zval * arg , double * dest)"		32908	0					
ANR	32910	CompoundStatement		440:0:12280:12545	32908	0					
ANR	32911	IfStatement	if ( EXPECTED ( Z_TYPE_P ( arg ) == IS_LONG ) )		32908	0					
ANR	32912	Condition	EXPECTED ( Z_TYPE_P ( arg ) == IS_LONG )	441:5:12287:12320	32908	0	True				
ANR	32913	CallExpression	EXPECTED ( Z_TYPE_P ( arg ) == IS_LONG )		32908	0					
ANR	32914	Callee	EXPECTED		32908	0					
ANR	32915	Identifier	EXPECTED		32908	0					
ANR	32916	ArgumentList	Z_TYPE_P ( arg ) == IS_LONG		32908	1					
ANR	32917	Argument	Z_TYPE_P ( arg ) == IS_LONG		32908	0					
ANR	32918	EqualityExpression	Z_TYPE_P ( arg ) == IS_LONG		32908	0		==			
ANR	32919	CallExpression	Z_TYPE_P ( arg )		32908	0					
ANR	32920	Callee	Z_TYPE_P		32908	0					
ANR	32921	Identifier	Z_TYPE_P		32908	0					
ANR	32922	ArgumentList	arg		32908	1					
ANR	32923	Argument	arg		32908	0					
ANR	32924	Identifier	arg		32908	0					
ANR	32925	Identifier	IS_LONG		32908	1					
ANR	32926	CompoundStatement		2:41:42:42	32908	1					
ANR	32927	ExpressionStatement	* dest = ( double ) Z_LVAL_P ( arg )	443:2:12396:12425	32908	0	True				
ANR	32928	AssignmentExpression	* dest = ( double ) Z_LVAL_P ( arg )		32908	0		=			
ANR	32929	UnaryOperationExpression	* dest		32908	0					
ANR	32930	UnaryOperator	*		32908	0					
ANR	32931	Identifier	dest		32908	1					
ANR	32932	CastExpression	( double ) Z_LVAL_P ( arg )		32908	1					
ANR	32933	CastTarget	double		32908	0					
ANR	32934	CallExpression	Z_LVAL_P ( arg )		32908	1					
ANR	32935	Callee	Z_LVAL_P		32908	0					
ANR	32936	Identifier	Z_LVAL_P		32908	0					
ANR	32937	ArgumentList	arg		32908	1					
ANR	32938	Argument	arg		32908	0					
ANR	32939	Identifier	arg		32908	0					
ANR	32940	ElseStatement	else		32908	0					
ANR	32941	IfStatement	if ( UNEXPECTED ( ZEND_ARG_USES_STRICT_TYPES ( ) ) )		32908	0					
ANR	32942	Condition	UNEXPECTED ( ZEND_ARG_USES_STRICT_TYPES ( ) )	444:12:12439:12478	32908	0	True				
ANR	32943	CallExpression	UNEXPECTED ( ZEND_ARG_USES_STRICT_TYPES ( ) )		32908	0					
ANR	32944	Callee	UNEXPECTED		32908	0					
ANR	32945	Identifier	UNEXPECTED		32908	0					
ANR	32946	ArgumentList	ZEND_ARG_USES_STRICT_TYPES ( )		32908	1					
ANR	32947	Argument	ZEND_ARG_USES_STRICT_TYPES ( )		32908	0					
ANR	32948	CallExpression	ZEND_ARG_USES_STRICT_TYPES ( )		32908	0					
ANR	32949	Callee	ZEND_ARG_USES_STRICT_TYPES		32908	0					
ANR	32950	Identifier	ZEND_ARG_USES_STRICT_TYPES		32908	0					
ANR	32951	ArgumentList			32908	1					
ANR	32952	CompoundStatement		5:54:200:200	32908	1					
ANR	32953	ReturnStatement	return 0 ;	445:2:12485:12493	32908	0	True				
ANR	32954	PrimaryExpression	0		32908	0					
ANR	32955	ReturnStatement	"return zend_parse_arg_double_weak ( arg , dest ) ;"	447:1:12499:12543	32908	1	True				
ANR	32956	CallExpression	"zend_parse_arg_double_weak ( arg , dest )"		32908	0					
ANR	32957	Callee	zend_parse_arg_double_weak		32908	0					
ANR	32958	Identifier	zend_parse_arg_double_weak		32908	0					
ANR	32959	ArgumentList	arg		32908	1					
ANR	32960	Argument	arg		32908	0					
ANR	32961	Identifier	arg		32908	0					
ANR	32962	Argument	dest		32908	1					
ANR	32963	Identifier	dest		32908	0					
ANR	32964	ReturnType	ZEND_API int ZEND_FASTCALL		32908	1					
ANR	32965	Identifier	zend_parse_arg_double_slow		32908	2					
ANR	32966	ParameterList	"zval * arg , double * dest"		32908	3					
ANR	32967	Parameter	zval * arg	439:54:12245:12253	32908	0	True				
ANR	32968	ParameterType	zval *		32908	0					
ANR	32969	Identifier	arg		32908	1					
ANR	32970	Parameter	double * dest	439:65:12256:12267	32908	1	True				
ANR	32971	ParameterType	double *		32908	0					
ANR	32972	Identifier	dest		32908	1					
ANR	32973	CFGEntryNode	ENTRY		32908		True				
ANR	32974	CFGExitNode	EXIT		32908		True				
ANR	32975	Symbol	UNEXPECTED		32908						
ANR	32976	Symbol	ZEND_ARG_USES_STRICT_TYPES		32908						
ANR	32977	Symbol	* dest		32908						
ANR	32978	Symbol	zend_parse_arg_double_weak		32908						
ANR	32979	Symbol	IS_LONG		32908						
ANR	32980	Symbol	arg		32908						
ANR	32981	Symbol	dest		32908						
ANR	32982	Symbol	Z_TYPE_P		32908						
ANR	32983	Symbol	EXPECTED		32908						
ANR	32984	Symbol	Z_LVAL_P		32908						
ANR	32985	Function	zend_parse_arg_str_weak	451:0:12558:13431							
ANR	32986	FunctionDef	"zend_parse_arg_str_weak (zval * arg , zend_string * * dest)"		32985	0					
ANR	32987	CompoundStatement		452:0:12650:13431	32985	0					
ANR	32988	IfStatement	if ( EXPECTED ( Z_TYPE_P ( arg ) < IS_STRING ) )		32985	0					
ANR	32989	Condition	EXPECTED ( Z_TYPE_P ( arg ) < IS_STRING )	453:5:12657:12691	32985	0	True				
ANR	32990	CallExpression	EXPECTED ( Z_TYPE_P ( arg ) < IS_STRING )		32985	0					
ANR	32991	Callee	EXPECTED		32985	0					
ANR	32992	Identifier	EXPECTED		32985	0					
ANR	32993	ArgumentList	Z_TYPE_P ( arg ) < IS_STRING		32985	1					
ANR	32994	Argument	Z_TYPE_P ( arg ) < IS_STRING		32985	0					
ANR	32995	RelationalExpression	Z_TYPE_P ( arg ) < IS_STRING		32985	0		<			
ANR	32996	CallExpression	Z_TYPE_P ( arg )		32985	0					
ANR	32997	Callee	Z_TYPE_P		32985	0					
ANR	32998	Identifier	Z_TYPE_P		32985	0					
ANR	32999	ArgumentList	arg		32985	1					
ANR	33000	Argument	arg		32985	0					
ANR	33001	Identifier	arg		32985	0					
ANR	33002	Identifier	IS_STRING		32985	1					
ANR	33003	CompoundStatement		2:42:43:43	32985	1					
ANR	33004	ExpressionStatement	convert_to_string ( arg )	454:2:12698:12720	32985	0	True				
ANR	33005	CallExpression	convert_to_string ( arg )		32985	0					
ANR	33006	Callee	convert_to_string		32985	0					
ANR	33007	Identifier	convert_to_string		32985	0					
ANR	33008	ArgumentList	arg		32985	1					
ANR	33009	Argument	arg		32985	0					
ANR	33010	Identifier	arg		32985	0					
ANR	33011	ExpressionStatement	* dest = Z_STR_P ( arg )	455:2:12724:12744	32985	1	True				
ANR	33012	AssignmentExpression	* dest = Z_STR_P ( arg )		32985	0		=			
ANR	33013	UnaryOperationExpression	* dest		32985	0					
ANR	33014	UnaryOperator	*		32985	0					
ANR	33015	Identifier	dest		32985	1					
ANR	33016	CallExpression	Z_STR_P ( arg )		32985	1					
ANR	33017	Callee	Z_STR_P		32985	0					
ANR	33018	Identifier	Z_STR_P		32985	0					
ANR	33019	ArgumentList	arg		32985	1					
ANR	33020	Argument	arg		32985	0					
ANR	33021	Identifier	arg		32985	0					
ANR	33022	ElseStatement	else		32985	0					
ANR	33023	IfStatement	if ( UNEXPECTED ( Z_TYPE_P ( arg ) == IS_OBJECT ) )		32985	0					
ANR	33024	Condition	UNEXPECTED ( Z_TYPE_P ( arg ) == IS_OBJECT )	456:12:12758:12795	32985	0	True				
ANR	33025	CallExpression	UNEXPECTED ( Z_TYPE_P ( arg ) == IS_OBJECT )		32985	0					
ANR	33026	Callee	UNEXPECTED		32985	0					
ANR	33027	Identifier	UNEXPECTED		32985	0					
ANR	33028	ArgumentList	Z_TYPE_P ( arg ) == IS_OBJECT		32985	1					
ANR	33029	Argument	Z_TYPE_P ( arg ) == IS_OBJECT		32985	0					
ANR	33030	EqualityExpression	Z_TYPE_P ( arg ) == IS_OBJECT		32985	0		==			
ANR	33031	CallExpression	Z_TYPE_P ( arg )		32985	0					
ANR	33032	Callee	Z_TYPE_P		32985	0					
ANR	33033	Identifier	Z_TYPE_P		32985	0					
ANR	33034	ArgumentList	arg		32985	1					
ANR	33035	Argument	arg		32985	0					
ANR	33036	Identifier	arg		32985	0					
ANR	33037	Identifier	IS_OBJECT		32985	1					
ANR	33038	CompoundStatement		5:52:147:147	32985	1					
ANR	33039	IfStatement	"if ( Z_OBJ_HANDLER_P ( arg , cast_object ) )"		32985	0					
ANR	33040	Condition	"Z_OBJ_HANDLER_P ( arg , cast_object )"	457:6:12806:12838	32985	0	True				
ANR	33041	CallExpression	"Z_OBJ_HANDLER_P ( arg , cast_object )"		32985	0					
ANR	33042	Callee	Z_OBJ_HANDLER_P		32985	0					
ANR	33043	Identifier	Z_OBJ_HANDLER_P		32985	0					
ANR	33044	ArgumentList	arg		32985	1					
ANR	33045	Argument	arg		32985	0					
ANR	33046	Identifier	arg		32985	0					
ANR	33047	Argument	cast_object		32985	1					
ANR	33048	Identifier	cast_object		32985	0					
ANR	33049	CompoundStatement		7:3:195:203	32985	1					
ANR	33050	IdentifierDeclStatement	zval obj ;	458:3:12846:12854	32985	0	True				
ANR	33051	IdentifierDecl	obj		32985	0					
ANR	33052	IdentifierDeclType	zval		32985	0					
ANR	33053	Identifier	obj		32985	1					
ANR	33054	IfStatement	"if ( Z_OBJ_HANDLER_P ( arg , cast_object ) ( arg , & obj , IS_STRING ) == SUCCESS )"		32985	1					
ANR	33055	Condition	"Z_OBJ_HANDLER_P ( arg , cast_object ) ( arg , & obj , IS_STRING ) == SUCCESS"	459:7:12863:12928	32985	0	True				
ANR	33056	EqualityExpression	"Z_OBJ_HANDLER_P ( arg , cast_object ) ( arg , & obj , IS_STRING ) == SUCCESS"		32985	0		==			
ANR	33057	CallExpression	"Z_OBJ_HANDLER_P ( arg , cast_object ) ( arg , & obj , IS_STRING )"		32985	0					
ANR	33058	Callee	"Z_OBJ_HANDLER_P ( arg , cast_object )"		32985	0					
ANR	33059	CallExpression	"Z_OBJ_HANDLER_P ( arg , cast_object )"		32985	0					
ANR	33060	Callee	Z_OBJ_HANDLER_P		32985	0					
ANR	33061	Identifier	Z_OBJ_HANDLER_P		32985	0					
ANR	33062	ArgumentList	arg		32985	1					
ANR	33063	Argument	arg		32985	0					
ANR	33064	Identifier	arg		32985	0					
ANR	33065	Argument	cast_object		32985	1					
ANR	33066	Identifier	cast_object		32985	0					
ANR	33067	ArgumentList	arg		32985	1					
ANR	33068	Argument	arg		32985	0					
ANR	33069	Identifier	arg		32985	0					
ANR	33070	Argument	& obj		32985	1					
ANR	33071	UnaryOperationExpression	& obj		32985	0					
ANR	33072	UnaryOperator	&		32985	0					
ANR	33073	Identifier	obj		32985	1					
ANR	33074	Argument	IS_STRING		32985	2					
ANR	33075	Identifier	IS_STRING		32985	0					
ANR	33076	Identifier	SUCCESS		32985	1					
ANR	33077	CompoundStatement		8:75:280:280	32985	1					
ANR	33078	ExpressionStatement	zval_ptr_dtor ( arg )	460:4:12937:12955	32985	0	True				
ANR	33079	CallExpression	zval_ptr_dtor ( arg )		32985	0					
ANR	33080	Callee	zval_ptr_dtor		32985	0					
ANR	33081	Identifier	zval_ptr_dtor		32985	0					
ANR	33082	ArgumentList	arg		32985	1					
ANR	33083	Argument	arg		32985	0					
ANR	33084	Identifier	arg		32985	0					
ANR	33085	ExpressionStatement	"ZVAL_COPY_VALUE ( arg , & obj )"	461:4:12961:12987	32985	1	True				
ANR	33086	CallExpression	"ZVAL_COPY_VALUE ( arg , & obj )"		32985	0					
ANR	33087	Callee	ZVAL_COPY_VALUE		32985	0					
ANR	33088	Identifier	ZVAL_COPY_VALUE		32985	0					
ANR	33089	ArgumentList	arg		32985	1					
ANR	33090	Argument	arg		32985	0					
ANR	33091	Identifier	arg		32985	0					
ANR	33092	Argument	& obj		32985	1					
ANR	33093	UnaryOperationExpression	& obj		32985	0					
ANR	33094	UnaryOperator	&		32985	0					
ANR	33095	Identifier	obj		32985	1					
ANR	33096	ExpressionStatement	* dest = Z_STR_P ( arg )	462:4:12993:13013	32985	2	True				
ANR	33097	AssignmentExpression	* dest = Z_STR_P ( arg )		32985	0		=			
ANR	33098	UnaryOperationExpression	* dest		32985	0					
ANR	33099	UnaryOperator	*		32985	0					
ANR	33100	Identifier	dest		32985	1					
ANR	33101	CallExpression	Z_STR_P ( arg )		32985	1					
ANR	33102	Callee	Z_STR_P		32985	0					
ANR	33103	Identifier	Z_STR_P		32985	0					
ANR	33104	ArgumentList	arg		32985	1					
ANR	33105	Argument	arg		32985	0					
ANR	33106	Identifier	arg		32985	0					
ANR	33107	ReturnStatement	return 1 ;	463:4:13019:13027	32985	3	True				
ANR	33108	PrimaryExpression	1		32985	0					
ANR	33109	ElseStatement	else		32985	0					
ANR	33110	IfStatement	"if ( Z_OBJ_HANDLER_P ( arg , get ) )"		32985	0					
ANR	33111	Condition	"Z_OBJ_HANDLER_P ( arg , get )"	465:13:13047:13071	32985	0	True				
ANR	33112	CallExpression	"Z_OBJ_HANDLER_P ( arg , get )"		32985	0					
ANR	33113	Callee	Z_OBJ_HANDLER_P		32985	0					
ANR	33114	Identifier	Z_OBJ_HANDLER_P		32985	0					
ANR	33115	ArgumentList	arg		32985	1					
ANR	33116	Argument	arg		32985	0					
ANR	33117	Identifier	arg		32985	0					
ANR	33118	Argument	get		32985	1					
ANR	33119	Identifier	get		32985	0					
ANR	33120	CompoundStatement		16:3:440:485	32985	1					
ANR	33121	IdentifierDeclStatement	zval rv ;	466:3:13079:13086	32985	0	True				
ANR	33122	IdentifierDecl	rv		32985	0					
ANR	33123	IdentifierDeclType	zval		32985	0					
ANR	33124	Identifier	rv		32985	1					
ANR	33125	IdentifierDeclStatement	"zval * z = Z_OBJ_HANDLER_P ( arg , get ) ( arg , & rv ) ;"	467:3:13091:13136	32985	1	True				
ANR	33126	IdentifierDecl	"* z = Z_OBJ_HANDLER_P ( arg , get ) ( arg , & rv )"		32985	0					
ANR	33127	IdentifierDeclType	zval *		32985	0					
ANR	33128	Identifier	z		32985	1					
ANR	33129	AssignmentExpression	"* z = Z_OBJ_HANDLER_P ( arg , get ) ( arg , & rv )"		32985	2		=			
ANR	33130	Identifier	z		32985	0					
ANR	33131	CallExpression	"Z_OBJ_HANDLER_P ( arg , get ) ( arg , & rv )"		32985	1					
ANR	33132	Callee	"Z_OBJ_HANDLER_P ( arg , get )"		32985	0					
ANR	33133	CallExpression	"Z_OBJ_HANDLER_P ( arg , get )"		32985	0					
ANR	33134	Callee	Z_OBJ_HANDLER_P		32985	0					
ANR	33135	Identifier	Z_OBJ_HANDLER_P		32985	0					
ANR	33136	ArgumentList	arg		32985	1					
ANR	33137	Argument	arg		32985	0					
ANR	33138	Identifier	arg		32985	0					
ANR	33139	Argument	get		32985	1					
ANR	33140	Identifier	get		32985	0					
ANR	33141	ArgumentList	arg		32985	1					
ANR	33142	Argument	arg		32985	0					
ANR	33143	Identifier	arg		32985	0					
ANR	33144	Argument	& rv		32985	1					
ANR	33145	UnaryOperationExpression	& rv		32985	0					
ANR	33146	UnaryOperator	&		32985	0					
ANR	33147	Identifier	rv		32985	1					
ANR	33148	ExpressionStatement	Z_ADDREF_P ( z )	469:3:13142:13155	32985	2	True				
ANR	33149	CallExpression	Z_ADDREF_P ( z )		32985	0					
ANR	33150	Callee	Z_ADDREF_P		32985	0					
ANR	33151	Identifier	Z_ADDREF_P		32985	0					
ANR	33152	ArgumentList	z		32985	1					
ANR	33153	Argument	z		32985	0					
ANR	33154	Identifier	z		32985	0					
ANR	33155	IfStatement	if ( Z_TYPE_P ( z ) != IS_OBJECT )		32985	3					
ANR	33156	Condition	Z_TYPE_P ( z ) != IS_OBJECT	470:7:13164:13187	32985	0	True				
ANR	33157	EqualityExpression	Z_TYPE_P ( z ) != IS_OBJECT		32985	0		!=			
ANR	33158	CallExpression	Z_TYPE_P ( z )		32985	0					
ANR	33159	Callee	Z_TYPE_P		32985	0					
ANR	33160	Identifier	Z_TYPE_P		32985	0					
ANR	33161	ArgumentList	z		32985	1					
ANR	33162	Argument	z		32985	0					
ANR	33163	Identifier	z		32985	0					
ANR	33164	Identifier	IS_OBJECT		32985	1					
ANR	33165	CompoundStatement		19:33:539:539	32985	1					
ANR	33166	ExpressionStatement	zval_dtor ( arg )	471:4:13196:13210	32985	0	True				
ANR	33167	CallExpression	zval_dtor ( arg )		32985	0					
ANR	33168	Callee	zval_dtor		32985	0					
ANR	33169	Identifier	zval_dtor		32985	0					
ANR	33170	ArgumentList	arg		32985	1					
ANR	33171	Argument	arg		32985	0					
ANR	33172	Identifier	arg		32985	0					
ANR	33173	ExpressionStatement	ZVAL_NULL ( arg )	472:4:13216:13230	32985	1	True				
ANR	33174	CallExpression	ZVAL_NULL ( arg )		32985	0					
ANR	33175	Callee	ZVAL_NULL		32985	0					
ANR	33176	Identifier	ZVAL_NULL		32985	0					
ANR	33177	ArgumentList	arg		32985	1					
ANR	33178	Argument	arg		32985	0					
ANR	33179	Identifier	arg		32985	0					
ANR	33180	IfStatement	"if ( ! zend_make_printable_zval ( z , arg ) )"		32985	2					
ANR	33181	Condition	"! zend_make_printable_zval ( z , arg )"	473:8:13240:13272	32985	0	True				
ANR	33182	UnaryOperationExpression	"! zend_make_printable_zval ( z , arg )"		32985	0					
ANR	33183	UnaryOperator	!		32985	0					
ANR	33184	CallExpression	"zend_make_printable_zval ( z , arg )"		32985	1					
ANR	33185	Callee	zend_make_printable_zval		32985	0					
ANR	33186	Identifier	zend_make_printable_zval		32985	0					
ANR	33187	ArgumentList	z		32985	1					
ANR	33188	Argument	z		32985	0					
ANR	33189	Identifier	z		32985	0					
ANR	33190	Argument	arg		32985	1					
ANR	33191	Identifier	arg		32985	0					
ANR	33192	CompoundStatement		22:43:624:624	32985	1					
ANR	33193	ExpressionStatement	"ZVAL_COPY_VALUE ( arg , z )"	474:5:13282:13305	32985	0	True				
ANR	33194	CallExpression	"ZVAL_COPY_VALUE ( arg , z )"		32985	0					
ANR	33195	Callee	ZVAL_COPY_VALUE		32985	0					
ANR	33196	Identifier	ZVAL_COPY_VALUE		32985	0					
ANR	33197	ArgumentList	arg		32985	1					
ANR	33198	Argument	arg		32985	0					
ANR	33199	Identifier	arg		32985	0					
ANR	33200	Argument	z		32985	1					
ANR	33201	Identifier	z		32985	0					
ANR	33202	ExpressionStatement	* dest = Z_STR_P ( arg )	476:4:13317:13337	32985	3	True				
ANR	33203	AssignmentExpression	* dest = Z_STR_P ( arg )		32985	0		=			
ANR	33204	UnaryOperationExpression	* dest		32985	0					
ANR	33205	UnaryOperator	*		32985	0					
ANR	33206	Identifier	dest		32985	1					
ANR	33207	CallExpression	Z_STR_P ( arg )		32985	1					
ANR	33208	Callee	Z_STR_P		32985	0					
ANR	33209	Identifier	Z_STR_P		32985	0					
ANR	33210	ArgumentList	arg		32985	1					
ANR	33211	Argument	arg		32985	0					
ANR	33212	Identifier	arg		32985	0					
ANR	33213	ReturnStatement	return 1 ;	477:4:13343:13351	32985	4	True				
ANR	33214	PrimaryExpression	1		32985	0					
ANR	33215	ExpressionStatement	zval_ptr_dtor ( z )	479:3:13361:13377	32985	4	True				
ANR	33216	CallExpression	zval_ptr_dtor ( z )		32985	0					
ANR	33217	Callee	zval_ptr_dtor		32985	0					
ANR	33218	Identifier	zval_ptr_dtor		32985	0					
ANR	33219	ArgumentList	z		32985	1					
ANR	33220	Argument	z		32985	0					
ANR	33221	Identifier	z		32985	0					
ANR	33222	ReturnStatement	return 0 ;	481:2:13385:13393	32985	1	True				
ANR	33223	PrimaryExpression	0		32985	0					
ANR	33224	ElseStatement	else		32985	0					
ANR	33225	CompoundStatement		31:8:752:752	32985	0					
ANR	33226	ReturnStatement	return 0 ;	483:2:13407:13415	32985	0	True				
ANR	33227	PrimaryExpression	0		32985	0					
ANR	33228	ReturnStatement	return 1 ;	485:1:13421:13429	32985	1	True				
ANR	33229	PrimaryExpression	1		32985	0					
ANR	33230	ReturnType	ZEND_API int ZEND_FASTCALL		32985	1					
ANR	33231	Identifier	zend_parse_arg_str_weak		32985	2					
ANR	33232	ParameterList	"zval * arg , zend_string * * dest"		32985	3					
ANR	33233	Parameter	zval * arg	451:51:12609:12617	32985	0	True				
ANR	33234	ParameterType	zval *		32985	0					
ANR	33235	Identifier	arg		32985	1					
ANR	33236	Parameter	zend_string * * dest	451:62:12620:12637	32985	1	True				
ANR	33237	ParameterType	zend_string * *		32985	0					
ANR	33238	Identifier	dest		32985	1					
ANR	33239	CFGEntryNode	ENTRY		32985		True				
ANR	33240	CFGExitNode	EXIT		32985		True				
ANR	33241	Symbol	SUCCESS		32985						
ANR	33242	Symbol	cast_object		32985						
ANR	33243	Symbol	rv		32985						
ANR	33244	Symbol	* dest		32985						
ANR	33245	Symbol	zend_make_printable_zval		32985						
ANR	33246	Symbol	dest		32985						
ANR	33247	Symbol	Z_TYPE_P		32985						
ANR	33248	Symbol	& rv		32985						
ANR	33249	Symbol	UNEXPECTED		32985						
ANR	33250	Symbol	obj		32985						
ANR	33251	Symbol	arg		32985						
ANR	33252	Symbol	get		32985						
ANR	33253	Symbol	Z_OBJ_HANDLER_P		32985						
ANR	33254	Symbol	& obj		32985						
ANR	33255	Symbol	z		32985						
ANR	33256	Symbol	IS_STRING		32985						
ANR	33257	Symbol	Z_STR_P		32985						
ANR	33258	Symbol	IS_OBJECT		32985						
ANR	33259	Symbol	EXPECTED		32985						
ANR	33260	Function	zend_parse_arg_str_slow	489:0:13444:13646							
ANR	33261	FunctionDef	"zend_parse_arg_str_slow (zval * arg , zend_string * * dest)"		33260	0					
ANR	33262	CompoundStatement		490:0:13536:13646	33260	0					
ANR	33263	IfStatement	if ( UNEXPECTED ( ZEND_ARG_USES_STRICT_TYPES ( ) ) )		33260	0					
ANR	33264	Condition	UNEXPECTED ( ZEND_ARG_USES_STRICT_TYPES ( ) )	491:5:13543:13582	33260	0	True				
ANR	33265	CallExpression	UNEXPECTED ( ZEND_ARG_USES_STRICT_TYPES ( ) )		33260	0					
ANR	33266	Callee	UNEXPECTED		33260	0					
ANR	33267	Identifier	UNEXPECTED		33260	0					
ANR	33268	ArgumentList	ZEND_ARG_USES_STRICT_TYPES ( )		33260	1					
ANR	33269	Argument	ZEND_ARG_USES_STRICT_TYPES ( )		33260	0					
ANR	33270	CallExpression	ZEND_ARG_USES_STRICT_TYPES ( )		33260	0					
ANR	33271	Callee	ZEND_ARG_USES_STRICT_TYPES		33260	0					
ANR	33272	Identifier	ZEND_ARG_USES_STRICT_TYPES		33260	0					
ANR	33273	ArgumentList			33260	1					
ANR	33274	CompoundStatement		2:47:48:48	33260	1					
ANR	33275	ReturnStatement	return 0 ;	492:2:13589:13597	33260	0	True				
ANR	33276	PrimaryExpression	0		33260	0					
ANR	33277	ReturnStatement	"return zend_parse_arg_str_weak ( arg , dest ) ;"	494:1:13603:13644	33260	1	True				
ANR	33278	CallExpression	"zend_parse_arg_str_weak ( arg , dest )"		33260	0					
ANR	33279	Callee	zend_parse_arg_str_weak		33260	0					
ANR	33280	Identifier	zend_parse_arg_str_weak		33260	0					
ANR	33281	ArgumentList	arg		33260	1					
ANR	33282	Argument	arg		33260	0					
ANR	33283	Identifier	arg		33260	0					
ANR	33284	Argument	dest		33260	1					
ANR	33285	Identifier	dest		33260	0					
ANR	33286	ReturnType	ZEND_API int ZEND_FASTCALL		33260	1					
ANR	33287	Identifier	zend_parse_arg_str_slow		33260	2					
ANR	33288	ParameterList	"zval * arg , zend_string * * dest"		33260	3					
ANR	33289	Parameter	zval * arg	489:51:13495:13503	33260	0	True				
ANR	33290	ParameterType	zval *		33260	0					
ANR	33291	Identifier	arg		33260	1					
ANR	33292	Parameter	zend_string * * dest	489:62:13506:13523	33260	1	True				
ANR	33293	ParameterType	zend_string * *		33260	0					
ANR	33294	Identifier	dest		33260	1					
ANR	33295	CFGEntryNode	ENTRY		33260		True				
ANR	33296	CFGExitNode	EXIT		33260		True				
ANR	33297	Symbol	UNEXPECTED		33260						
ANR	33298	Symbol	ZEND_ARG_USES_STRICT_TYPES		33260						
ANR	33299	Symbol	arg		33260						
ANR	33300	Symbol	dest		33260						
ANR	33301	Symbol	zend_parse_arg_str_weak		33260						
ANR	33302	Function	zend_parse_arg_impl	498:0:13659:18644							
ANR	33303	FunctionDef	"zend_parse_arg_impl (int arg_num , zval * arg , va_list * va , const char * * spec , char * * error , int * severity)"		33302	0					
ANR	33304	CompoundStatement		499:0:13793:18644	33302	0					
ANR	33305	IdentifierDeclStatement	const char * spec_walk = * spec ;	500:1:13796:13825	33302	0	True				
ANR	33306	IdentifierDecl	* spec_walk = * spec		33302	0					
ANR	33307	IdentifierDeclType	const char *		33302	0					
ANR	33308	Identifier	spec_walk		33302	1					
ANR	33309	AssignmentExpression	* spec_walk = * spec		33302	2		=			
ANR	33310	Identifier	spec_walk		33302	0					
ANR	33311	UnaryOperationExpression	* spec		33302	1					
ANR	33312	UnaryOperator	*		33302	0					
ANR	33313	Identifier	spec		33302	1					
ANR	33314	IdentifierDeclStatement	char c = * spec_walk ++ ;	501:1:13828:13849	33302	1	True				
ANR	33315	IdentifierDecl	c = * spec_walk ++		33302	0					
ANR	33316	IdentifierDeclType	char		33302	0					
ANR	33317	Identifier	c		33302	1					
ANR	33318	AssignmentExpression	c = * spec_walk ++		33302	2		=			
ANR	33319	Identifier	c		33302	0					
ANR	33320	UnaryOperationExpression	* spec_walk ++		33302	1					
ANR	33321	UnaryOperator	*		33302	0					
ANR	33322	PostIncDecOperationExpression	spec_walk ++		33302	1					
ANR	33323	Identifier	spec_walk		33302	0					
ANR	33324	IncDec	++		33302	1					
ANR	33325	IdentifierDeclStatement	int check_null = 0 ;	502:1:13852:13870	33302	2	True				
ANR	33326	IdentifierDecl	check_null = 0		33302	0					
ANR	33327	IdentifierDeclType	int		33302	0					
ANR	33328	Identifier	check_null		33302	1					
ANR	33329	AssignmentExpression	check_null = 0		33302	2		=			
ANR	33330	Identifier	check_null		33302	0					
ANR	33331	PrimaryExpression	0		33302	1					
ANR	33332	IdentifierDeclStatement	zval * real_arg = arg ;	503:1:13873:13893	33302	3	True				
ANR	33333	IdentifierDecl	* real_arg = arg		33302	0					
ANR	33334	IdentifierDeclType	zval *		33302	0					
ANR	33335	Identifier	real_arg		33302	1					
ANR	33336	AssignmentExpression	* real_arg = arg		33302	2		=			
ANR	33337	Identifier	arg		33302	0					
ANR	33338	Identifier	arg		33302	1					
ANR	33339	ExpressionStatement	ZVAL_DEREF ( arg )	506:1:13927:13942	33302	4	True				
ANR	33340	CallExpression	ZVAL_DEREF ( arg )		33302	0					
ANR	33341	Callee	ZVAL_DEREF		33302	0					
ANR	33342	Identifier	ZVAL_DEREF		33302	0					
ANR	33343	ArgumentList	arg		33302	1					
ANR	33344	Argument	arg		33302	0					
ANR	33345	Identifier	arg		33302	0					
ANR	33346	WhileStatement	while ( 1 )		33302	5					
ANR	33347	Condition	1	507:8:13952:13952	33302	0	True				
ANR	33348	PrimaryExpression	1		33302	0					
ANR	33349	CompoundStatement		9:11:161:161	33302	1					
ANR	33350	IfStatement	if ( * spec_walk == '/' )		33302	0					
ANR	33351	Condition	* spec_walk == '/'	508:6:13963:13979	33302	0	True				
ANR	33352	EqualityExpression	* spec_walk == '/'		33302	0		==			
ANR	33353	UnaryOperationExpression	* spec_walk		33302	0					
ANR	33354	UnaryOperator	*		33302	0					
ANR	33355	Identifier	spec_walk		33302	1					
ANR	33356	PrimaryExpression	'/'		33302	1					
ANR	33357	CompoundStatement		10:25:188:188	33302	1					
ANR	33358	ExpressionStatement	SEPARATE_ZVAL_NOREF ( arg )	509:3:13987:14011	33302	0	True				
ANR	33359	CallExpression	SEPARATE_ZVAL_NOREF ( arg )		33302	0					
ANR	33360	Callee	SEPARATE_ZVAL_NOREF		33302	0					
ANR	33361	Identifier	SEPARATE_ZVAL_NOREF		33302	0					
ANR	33362	ArgumentList	arg		33302	1					
ANR	33363	Argument	arg		33302	0					
ANR	33364	Identifier	arg		33302	0					
ANR	33365	ExpressionStatement	real_arg = arg	510:3:14016:14030	33302	1	True				
ANR	33366	AssignmentExpression	real_arg = arg		33302	0		=			
ANR	33367	Identifier	real_arg		33302	0					
ANR	33368	Identifier	arg		33302	1					
ANR	33369	ElseStatement	else		33302	0					
ANR	33370	IfStatement	if ( * spec_walk == '!' )		33302	0					
ANR	33371	Condition	* spec_walk == '!'	511:13:14045:14061	33302	0	True				
ANR	33372	EqualityExpression	* spec_walk == '!'		33302	0		==			
ANR	33373	UnaryOperationExpression	* spec_walk		33302	0					
ANR	33374	UnaryOperator	*		33302	0					
ANR	33375	Identifier	spec_walk		33302	1					
ANR	33376	PrimaryExpression	'!'		33302	1					
ANR	33377	CompoundStatement		13:32:270:270	33302	1					
ANR	33378	ExpressionStatement	check_null = 1	512:3:14069:14083	33302	0	True				
ANR	33379	AssignmentExpression	check_null = 1		33302	0		=			
ANR	33380	Identifier	check_null		33302	0					
ANR	33381	PrimaryExpression	1		33302	1					
ANR	33382	ElseStatement	else		33302	0					
ANR	33383	CompoundStatement		15:9:300:300	33302	0					
ANR	33384	BreakStatement	break ;	514:3:14099:14104	33302	0	True				
ANR	33385	ExpressionStatement	spec_walk ++	516:2:14112:14123	33302	1	True				
ANR	33386	PostIncDecOperationExpression	spec_walk ++		33302	0					
ANR	33387	Identifier	spec_walk		33302	0					
ANR	33388	IncDec	++		33302	1					
ANR	33389	SwitchStatement	switch ( c )		33302	6					
ANR	33390	Condition	c	519:9:14138:14138	33302	0	True				
ANR	33391	Identifier	c		33302	0					
ANR	33392	CompoundStatement		21:12:347:347	33302	1					
ANR	33393	Label	case 'l' :	520:2:14145:14153	33302	0	True				
ANR	33394	Label	case 'L' :	521:2:14157:14165	33302	1	True				
ANR	33395	CompoundStatement		26:4:427:452	33302	2					
ANR	33396	Statement	zend_long	523:4:14176:14184	33302	0	True				
ANR	33397	Statement	*	523:14:14186:14186	33302	1	True				
ANR	33398	Statement	p	523:15:14187:14187	33302	2	True				
ANR	33399	Statement	=	523:17:14189:14189	33302	3	True				
ANR	33400	Statement	va_arg	523:19:14191:14196	33302	4	True				
ANR	33401	Statement	(	523:25:14197:14197	33302	5	True				
ANR	33402	Statement	*	523:26:14198:14198	33302	6	True				
ANR	33403	Statement	va	523:27:14199:14200	33302	7	True				
ANR	33404	Statement	","	523:29:14201:14201	33302	8	True				
ANR	33405	Statement	zend_long	523:31:14203:14211	33302	9	True				
ANR	33406	Statement	*	523:41:14213:14213	33302	10	True				
ANR	33407	Statement	)	523:42:14214:14214	33302	11	True				
ANR	33408	ExpressionStatement		523:43:14215:14215	33302	12	True				
ANR	33409	IdentifierDeclStatement	zend_bool * is_null = NULL ;	524:4:14221:14246	33302	13	True				
ANR	33410	IdentifierDecl	* is_null = NULL		33302	0					
ANR	33411	IdentifierDeclType	zend_bool *		33302	0					
ANR	33412	Identifier	is_null		33302	1					
ANR	33413	AssignmentExpression	* is_null = NULL		33302	2		=			
ANR	33414	Identifier	NULL		33302	0					
ANR	33415	Identifier	NULL		33302	1					
ANR	33416	IfStatement	if ( check_null )		33302	14					
ANR	33417	Condition	check_null	526:8:14257:14266	33302	0	True				
ANR	33418	Identifier	check_null		33302	0					
ANR	33419	CompoundStatement		28:20:475:475	33302	1					
ANR	33420	Statement	is_null	527:5:14276:14282	33302	0	True				
ANR	33421	Statement	=	527:13:14284:14284	33302	1	True				
ANR	33422	Statement	va_arg	527:15:14286:14291	33302	2	True				
ANR	33423	Statement	(	527:21:14292:14292	33302	3	True				
ANR	33424	Statement	*	527:22:14293:14293	33302	4	True				
ANR	33425	Statement	va	527:23:14294:14295	33302	5	True				
ANR	33426	Statement	","	527:25:14296:14296	33302	6	True				
ANR	33427	Statement	zend_bool	527:27:14298:14306	33302	7	True				
ANR	33428	Statement	*	527:37:14308:14308	33302	8	True				
ANR	33429	Statement	)	527:38:14309:14309	33302	9	True				
ANR	33430	ExpressionStatement		527:39:14310:14310	33302	10	True				
ANR	33431	IfStatement	"if ( ! zend_parse_arg_long ( arg , p , is_null , check_null , c == 'L' ) )"		33302	15					
ANR	33432	Condition	"! zend_parse_arg_long ( arg , p , is_null , check_null , c == 'L' )"	530:8:14327:14385	33302	0	True				
ANR	33433	UnaryOperationExpression	"! zend_parse_arg_long ( arg , p , is_null , check_null , c == 'L' )"		33302	0					
ANR	33434	UnaryOperator	!		33302	0					
ANR	33435	CallExpression	"zend_parse_arg_long ( arg , p , is_null , check_null , c == 'L' )"		33302	1					
ANR	33436	Callee	zend_parse_arg_long		33302	0					
ANR	33437	Identifier	zend_parse_arg_long		33302	0					
ANR	33438	ArgumentList	arg		33302	1					
ANR	33439	Argument	arg		33302	0					
ANR	33440	Identifier	arg		33302	0					
ANR	33441	Argument	p		33302	1					
ANR	33442	Identifier	p		33302	0					
ANR	33443	Argument	is_null		33302	2					
ANR	33444	Identifier	is_null		33302	0					
ANR	33445	Argument	check_null		33302	3					
ANR	33446	Identifier	check_null		33302	0					
ANR	33447	Argument	c == 'L'		33302	4					
ANR	33448	EqualityExpression	c == 'L'		33302	0		==			
ANR	33449	Identifier	c		33302	0					
ANR	33450	PrimaryExpression	'L'		33302	1					
ANR	33451	CompoundStatement		32:69:594:594	33302	1					
ANR	33452	ReturnStatement	"return ""integer"" ;"	531:5:14395:14411	33302	0	True				
ANR	33453	PrimaryExpression	"""integer"""		33302	0					
ANR	33454	BreakStatement	break ;	534:3:14427:14432	33302	3	True				
ANR	33455	Label	case 'd' :	536:2:14437:14445	33302	4	True				
ANR	33456	CompoundStatement		41:4:701:726	33302	5					
ANR	33457	Statement	double	538:4:14456:14461	33302	0	True				
ANR	33458	Statement	*	538:11:14463:14463	33302	1	True				
ANR	33459	Statement	p	538:12:14464:14464	33302	2	True				
ANR	33460	Statement	=	538:14:14466:14466	33302	3	True				
ANR	33461	Statement	va_arg	538:16:14468:14473	33302	4	True				
ANR	33462	Statement	(	538:22:14474:14474	33302	5	True				
ANR	33463	Statement	*	538:23:14475:14475	33302	6	True				
ANR	33464	Statement	va	538:24:14476:14477	33302	7	True				
ANR	33465	Statement	","	538:26:14478:14478	33302	8	True				
ANR	33466	Statement	double	538:28:14480:14485	33302	9	True				
ANR	33467	Statement	*	538:35:14487:14487	33302	10	True				
ANR	33468	Statement	)	538:36:14488:14488	33302	11	True				
ANR	33469	ExpressionStatement		538:37:14489:14489	33302	12	True				
ANR	33470	IdentifierDeclStatement	zend_bool * is_null = NULL ;	539:4:14495:14520	33302	13	True				
ANR	33471	IdentifierDecl	* is_null = NULL		33302	0					
ANR	33472	IdentifierDeclType	zend_bool *		33302	0					
ANR	33473	Identifier	is_null		33302	1					
ANR	33474	AssignmentExpression	* is_null = NULL		33302	2		=			
ANR	33475	Identifier	NULL		33302	0					
ANR	33476	Identifier	NULL		33302	1					
ANR	33477	IfStatement	if ( check_null )		33302	14					
ANR	33478	Condition	check_null	541:8:14531:14540	33302	0	True				
ANR	33479	Identifier	check_null		33302	0					
ANR	33480	CompoundStatement		43:20:749:749	33302	1					
ANR	33481	Statement	is_null	542:5:14550:14556	33302	0	True				
ANR	33482	Statement	=	542:13:14558:14558	33302	1	True				
ANR	33483	Statement	va_arg	542:15:14560:14565	33302	2	True				
ANR	33484	Statement	(	542:21:14566:14566	33302	3	True				
ANR	33485	Statement	*	542:22:14567:14567	33302	4	True				
ANR	33486	Statement	va	542:23:14568:14569	33302	5	True				
ANR	33487	Statement	","	542:25:14570:14570	33302	6	True				
ANR	33488	Statement	zend_bool	542:27:14572:14580	33302	7	True				
ANR	33489	Statement	*	542:37:14582:14582	33302	8	True				
ANR	33490	Statement	)	542:38:14583:14583	33302	9	True				
ANR	33491	ExpressionStatement		542:39:14584:14584	33302	10	True				
ANR	33492	IfStatement	"if ( ! zend_parse_arg_double ( arg , p , is_null , check_null ) )"		33302	15					
ANR	33493	Condition	"! zend_parse_arg_double ( arg , p , is_null , check_null )"	545:8:14601:14651	33302	0	True				
ANR	33494	UnaryOperationExpression	"! zend_parse_arg_double ( arg , p , is_null , check_null )"		33302	0					
ANR	33495	UnaryOperator	!		33302	0					
ANR	33496	CallExpression	"zend_parse_arg_double ( arg , p , is_null , check_null )"		33302	1					
ANR	33497	Callee	zend_parse_arg_double		33302	0					
ANR	33498	Identifier	zend_parse_arg_double		33302	0					
ANR	33499	ArgumentList	arg		33302	1					
ANR	33500	Argument	arg		33302	0					
ANR	33501	Identifier	arg		33302	0					
ANR	33502	Argument	p		33302	1					
ANR	33503	Identifier	p		33302	0					
ANR	33504	Argument	is_null		33302	2					
ANR	33505	Identifier	is_null		33302	0					
ANR	33506	Argument	check_null		33302	3					
ANR	33507	Identifier	check_null		33302	0					
ANR	33508	CompoundStatement		47:61:860:860	33302	1					
ANR	33509	ReturnStatement	"return ""float"" ;"	546:5:14661:14675	33302	0	True				
ANR	33510	PrimaryExpression	"""float"""		33302	0					
ANR	33511	BreakStatement	break ;	549:3:14691:14696	33302	6	True				
ANR	33512	Label	case 's' :	551:2:14701:14709	33302	7	True				
ANR	33513	CompoundStatement		54:3:920:920	33302	8					
ANR	33514	Statement	char	553:4:14720:14723	33302	0	True				
ANR	33515	Statement	*	553:9:14725:14725	33302	1	True				
ANR	33516	Statement	*	553:10:14726:14726	33302	2	True				
ANR	33517	Statement	p	553:11:14727:14727	33302	3	True				
ANR	33518	Statement	=	553:13:14729:14729	33302	4	True				
ANR	33519	Statement	va_arg	553:15:14731:14736	33302	5	True				
ANR	33520	Statement	(	553:21:14737:14737	33302	6	True				
ANR	33521	Statement	*	553:22:14738:14738	33302	7	True				
ANR	33522	Statement	va	553:23:14739:14740	33302	8	True				
ANR	33523	Statement	","	553:25:14741:14741	33302	9	True				
ANR	33524	Statement	char	553:27:14743:14746	33302	10	True				
ANR	33525	Statement	*	553:32:14748:14748	33302	11	True				
ANR	33526	Statement	*	553:33:14749:14749	33302	12	True				
ANR	33527	Statement	)	553:34:14750:14750	33302	13	True				
ANR	33528	ExpressionStatement		553:35:14751:14751	33302	14	True				
ANR	33529	Statement	size_t	554:4:14757:14762	33302	15	True				
ANR	33530	Statement	*	554:11:14764:14764	33302	16	True				
ANR	33531	Statement	pl	554:12:14765:14766	33302	17	True				
ANR	33532	Statement	=	554:15:14768:14768	33302	18	True				
ANR	33533	Statement	va_arg	554:17:14770:14775	33302	19	True				
ANR	33534	Statement	(	554:23:14776:14776	33302	20	True				
ANR	33535	Statement	*	554:24:14777:14777	33302	21	True				
ANR	33536	Statement	va	554:25:14778:14779	33302	22	True				
ANR	33537	Statement	","	554:27:14780:14780	33302	23	True				
ANR	33538	Statement	size_t	554:29:14782:14787	33302	24	True				
ANR	33539	Statement	*	554:36:14789:14789	33302	25	True				
ANR	33540	Statement	)	554:37:14790:14790	33302	26	True				
ANR	33541	ExpressionStatement		554:38:14791:14791	33302	27	True				
ANR	33542	IfStatement	"if ( ! zend_parse_arg_string ( arg , p , pl , check_null ) )"		33302	28					
ANR	33543	Condition	"! zend_parse_arg_string ( arg , p , pl , check_null )"	555:8:14801:14846	33302	0	True				
ANR	33544	UnaryOperationExpression	"! zend_parse_arg_string ( arg , p , pl , check_null )"		33302	0					
ANR	33545	UnaryOperator	!		33302	0					
ANR	33546	CallExpression	"zend_parse_arg_string ( arg , p , pl , check_null )"		33302	1					
ANR	33547	Callee	zend_parse_arg_string		33302	0					
ANR	33548	Identifier	zend_parse_arg_string		33302	0					
ANR	33549	ArgumentList	arg		33302	1					
ANR	33550	Argument	arg		33302	0					
ANR	33551	Identifier	arg		33302	0					
ANR	33552	Argument	p		33302	1					
ANR	33553	Identifier	p		33302	0					
ANR	33554	Argument	pl		33302	2					
ANR	33555	Identifier	pl		33302	0					
ANR	33556	Argument	check_null		33302	3					
ANR	33557	Identifier	check_null		33302	0					
ANR	33558	CompoundStatement		57:56:1055:1055	33302	1					
ANR	33559	ReturnStatement	"return ""string"" ;"	556:5:14856:14871	33302	0	True				
ANR	33560	PrimaryExpression	"""string"""		33302	0					
ANR	33561	BreakStatement	break ;	559:3:14887:14892	33302	9	True				
ANR	33562	Label	case 'p' :	561:2:14897:14905	33302	10	True				
ANR	33563	CompoundStatement		64:3:1116:1116	33302	11					
ANR	33564	Statement	char	563:4:14916:14919	33302	0	True				
ANR	33565	Statement	*	563:9:14921:14921	33302	1	True				
ANR	33566	Statement	*	563:10:14922:14922	33302	2	True				
ANR	33567	Statement	p	563:11:14923:14923	33302	3	True				
ANR	33568	Statement	=	563:13:14925:14925	33302	4	True				
ANR	33569	Statement	va_arg	563:15:14927:14932	33302	5	True				
ANR	33570	Statement	(	563:21:14933:14933	33302	6	True				
ANR	33571	Statement	*	563:22:14934:14934	33302	7	True				
ANR	33572	Statement	va	563:23:14935:14936	33302	8	True				
ANR	33573	Statement	","	563:25:14937:14937	33302	9	True				
ANR	33574	Statement	char	563:27:14939:14942	33302	10	True				
ANR	33575	Statement	*	563:32:14944:14944	33302	11	True				
ANR	33576	Statement	*	563:33:14945:14945	33302	12	True				
ANR	33577	Statement	)	563:34:14946:14946	33302	13	True				
ANR	33578	ExpressionStatement		563:35:14947:14947	33302	14	True				
ANR	33579	Statement	size_t	564:4:14953:14958	33302	15	True				
ANR	33580	Statement	*	564:11:14960:14960	33302	16	True				
ANR	33581	Statement	pl	564:12:14961:14962	33302	17	True				
ANR	33582	Statement	=	564:15:14964:14964	33302	18	True				
ANR	33583	Statement	va_arg	564:17:14966:14971	33302	19	True				
ANR	33584	Statement	(	564:23:14972:14972	33302	20	True				
ANR	33585	Statement	*	564:24:14973:14973	33302	21	True				
ANR	33586	Statement	va	564:25:14974:14975	33302	22	True				
ANR	33587	Statement	","	564:27:14976:14976	33302	23	True				
ANR	33588	Statement	size_t	564:29:14978:14983	33302	24	True				
ANR	33589	Statement	*	564:36:14985:14985	33302	25	True				
ANR	33590	Statement	)	564:37:14986:14986	33302	26	True				
ANR	33591	ExpressionStatement		564:38:14987:14987	33302	27	True				
ANR	33592	IfStatement	"if ( ! zend_parse_arg_path ( arg , p , pl , check_null ) )"		33302	28					
ANR	33593	Condition	"! zend_parse_arg_path ( arg , p , pl , check_null )"	565:8:14997:15040	33302	0	True				
ANR	33594	UnaryOperationExpression	"! zend_parse_arg_path ( arg , p , pl , check_null )"		33302	0					
ANR	33595	UnaryOperator	!		33302	0					
ANR	33596	CallExpression	"zend_parse_arg_path ( arg , p , pl , check_null )"		33302	1					
ANR	33597	Callee	zend_parse_arg_path		33302	0					
ANR	33598	Identifier	zend_parse_arg_path		33302	0					
ANR	33599	ArgumentList	arg		33302	1					
ANR	33600	Argument	arg		33302	0					
ANR	33601	Identifier	arg		33302	0					
ANR	33602	Argument	p		33302	1					
ANR	33603	Identifier	p		33302	0					
ANR	33604	Argument	pl		33302	2					
ANR	33605	Identifier	pl		33302	0					
ANR	33606	Argument	check_null		33302	3					
ANR	33607	Identifier	check_null		33302	0					
ANR	33608	CompoundStatement		67:54:1249:1249	33302	1					
ANR	33609	ReturnStatement	"return ""a valid path"" ;"	566:5:15050:15071	33302	0	True				
ANR	33610	PrimaryExpression	"""a valid path"""		33302	0					
ANR	33611	BreakStatement	break ;	569:3:15087:15092	33302	12	True				
ANR	33612	Label	case 'P' :	571:2:15097:15105	33302	13	True				
ANR	33613	CompoundStatement		74:3:1316:1316	33302	14					
ANR	33614	Statement	zend_string	573:4:15116:15126	33302	0	True				
ANR	33615	Statement	*	573:16:15128:15128	33302	1	True				
ANR	33616	Statement	*	573:17:15129:15129	33302	2	True				
ANR	33617	Statement	str	573:18:15130:15132	33302	3	True				
ANR	33618	Statement	=	573:22:15134:15134	33302	4	True				
ANR	33619	Statement	va_arg	573:24:15136:15141	33302	5	True				
ANR	33620	Statement	(	573:30:15142:15142	33302	6	True				
ANR	33621	Statement	*	573:31:15143:15143	33302	7	True				
ANR	33622	Statement	va	573:32:15144:15145	33302	8	True				
ANR	33623	Statement	","	573:34:15146:15146	33302	9	True				
ANR	33624	Statement	zend_string	573:36:15148:15158	33302	10	True				
ANR	33625	Statement	*	573:48:15160:15160	33302	11	True				
ANR	33626	Statement	*	573:49:15161:15161	33302	12	True				
ANR	33627	Statement	)	573:50:15162:15162	33302	13	True				
ANR	33628	ExpressionStatement		573:51:15163:15163	33302	14	True				
ANR	33629	IfStatement	"if ( ! zend_parse_arg_path_str ( arg , str , check_null ) )"		33302	15					
ANR	33630	Condition	"! zend_parse_arg_path_str ( arg , str , check_null )"	574:8:15173:15218	33302	0	True				
ANR	33631	UnaryOperationExpression	"! zend_parse_arg_path_str ( arg , str , check_null )"		33302	0					
ANR	33632	UnaryOperator	!		33302	0					
ANR	33633	CallExpression	"zend_parse_arg_path_str ( arg , str , check_null )"		33302	1					
ANR	33634	Callee	zend_parse_arg_path_str		33302	0					
ANR	33635	Identifier	zend_parse_arg_path_str		33302	0					
ANR	33636	ArgumentList	arg		33302	1					
ANR	33637	Argument	arg		33302	0					
ANR	33638	Identifier	arg		33302	0					
ANR	33639	Argument	str		33302	1					
ANR	33640	Identifier	str		33302	0					
ANR	33641	Argument	check_null		33302	2					
ANR	33642	Identifier	check_null		33302	0					
ANR	33643	CompoundStatement		76:56:1427:1427	33302	1					
ANR	33644	ReturnStatement	"return ""a valid path"" ;"	575:5:15228:15249	33302	0	True				
ANR	33645	PrimaryExpression	"""a valid path"""		33302	0					
ANR	33646	BreakStatement	break ;	578:3:15265:15270	33302	15	True				
ANR	33647	Label	case 'S' :	580:2:15275:15283	33302	16	True				
ANR	33648	CompoundStatement		83:3:1494:1494	33302	17					
ANR	33649	Statement	zend_string	582:4:15294:15304	33302	0	True				
ANR	33650	Statement	*	582:16:15306:15306	33302	1	True				
ANR	33651	Statement	*	582:17:15307:15307	33302	2	True				
ANR	33652	Statement	str	582:18:15308:15310	33302	3	True				
ANR	33653	Statement	=	582:22:15312:15312	33302	4	True				
ANR	33654	Statement	va_arg	582:24:15314:15319	33302	5	True				
ANR	33655	Statement	(	582:30:15320:15320	33302	6	True				
ANR	33656	Statement	*	582:31:15321:15321	33302	7	True				
ANR	33657	Statement	va	582:32:15322:15323	33302	8	True				
ANR	33658	Statement	","	582:34:15324:15324	33302	9	True				
ANR	33659	Statement	zend_string	582:36:15326:15336	33302	10	True				
ANR	33660	Statement	*	582:48:15338:15338	33302	11	True				
ANR	33661	Statement	*	582:49:15339:15339	33302	12	True				
ANR	33662	Statement	)	582:50:15340:15340	33302	13	True				
ANR	33663	ExpressionStatement		582:51:15341:15341	33302	14	True				
ANR	33664	IfStatement	"if ( ! zend_parse_arg_str ( arg , str , check_null ) )"		33302	15					
ANR	33665	Condition	"! zend_parse_arg_str ( arg , str , check_null )"	583:8:15351:15391	33302	0	True				
ANR	33666	UnaryOperationExpression	"! zend_parse_arg_str ( arg , str , check_null )"		33302	0					
ANR	33667	UnaryOperator	!		33302	0					
ANR	33668	CallExpression	"zend_parse_arg_str ( arg , str , check_null )"		33302	1					
ANR	33669	Callee	zend_parse_arg_str		33302	0					
ANR	33670	Identifier	zend_parse_arg_str		33302	0					
ANR	33671	ArgumentList	arg		33302	1					
ANR	33672	Argument	arg		33302	0					
ANR	33673	Identifier	arg		33302	0					
ANR	33674	Argument	str		33302	1					
ANR	33675	Identifier	str		33302	0					
ANR	33676	Argument	check_null		33302	2					
ANR	33677	Identifier	check_null		33302	0					
ANR	33678	CompoundStatement		85:51:1600:1600	33302	1					
ANR	33679	ReturnStatement	"return ""string"" ;"	584:5:15401:15416	33302	0	True				
ANR	33680	PrimaryExpression	"""string"""		33302	0					
ANR	33681	BreakStatement	break ;	587:3:15432:15437	33302	18	True				
ANR	33682	Label	case 'b' :	589:2:15442:15450	33302	19	True				
ANR	33683	CompoundStatement		94:4:1712:1737	33302	20					
ANR	33684	Statement	zend_bool	591:4:15461:15469	33302	0	True				
ANR	33685	Statement	*	591:14:15471:15471	33302	1	True				
ANR	33686	Statement	p	591:15:15472:15472	33302	2	True				
ANR	33687	Statement	=	591:17:15474:15474	33302	3	True				
ANR	33688	Statement	va_arg	591:19:15476:15481	33302	4	True				
ANR	33689	Statement	(	591:25:15482:15482	33302	5	True				
ANR	33690	Statement	*	591:26:15483:15483	33302	6	True				
ANR	33691	Statement	va	591:27:15484:15485	33302	7	True				
ANR	33692	Statement	","	591:29:15486:15486	33302	8	True				
ANR	33693	Statement	zend_bool	591:31:15488:15496	33302	9	True				
ANR	33694	Statement	*	591:41:15498:15498	33302	10	True				
ANR	33695	Statement	)	591:42:15499:15499	33302	11	True				
ANR	33696	ExpressionStatement		591:43:15500:15500	33302	12	True				
ANR	33697	IdentifierDeclStatement	zend_bool * is_null = NULL ;	592:4:15506:15531	33302	13	True				
ANR	33698	IdentifierDecl	* is_null = NULL		33302	0					
ANR	33699	IdentifierDeclType	zend_bool *		33302	0					
ANR	33700	Identifier	is_null		33302	1					
ANR	33701	AssignmentExpression	* is_null = NULL		33302	2		=			
ANR	33702	Identifier	NULL		33302	0					
ANR	33703	Identifier	NULL		33302	1					
ANR	33704	IfStatement	if ( check_null )		33302	14					
ANR	33705	Condition	check_null	594:8:15542:15551	33302	0	True				
ANR	33706	Identifier	check_null		33302	0					
ANR	33707	CompoundStatement		96:20:1760:1760	33302	1					
ANR	33708	Statement	is_null	595:5:15561:15567	33302	0	True				
ANR	33709	Statement	=	595:13:15569:15569	33302	1	True				
ANR	33710	Statement	va_arg	595:15:15571:15576	33302	2	True				
ANR	33711	Statement	(	595:21:15577:15577	33302	3	True				
ANR	33712	Statement	*	595:22:15578:15578	33302	4	True				
ANR	33713	Statement	va	595:23:15579:15580	33302	5	True				
ANR	33714	Statement	","	595:25:15581:15581	33302	6	True				
ANR	33715	Statement	zend_bool	595:27:15583:15591	33302	7	True				
ANR	33716	Statement	*	595:37:15593:15593	33302	8	True				
ANR	33717	Statement	)	595:38:15594:15594	33302	9	True				
ANR	33718	ExpressionStatement		595:39:15595:15595	33302	10	True				
ANR	33719	IfStatement	"if ( ! zend_parse_arg_bool ( arg , p , is_null , check_null ) )"		33302	15					
ANR	33720	Condition	"! zend_parse_arg_bool ( arg , p , is_null , check_null )"	598:8:15612:15660	33302	0	True				
ANR	33721	UnaryOperationExpression	"! zend_parse_arg_bool ( arg , p , is_null , check_null )"		33302	0					
ANR	33722	UnaryOperator	!		33302	0					
ANR	33723	CallExpression	"zend_parse_arg_bool ( arg , p , is_null , check_null )"		33302	1					
ANR	33724	Callee	zend_parse_arg_bool		33302	0					
ANR	33725	Identifier	zend_parse_arg_bool		33302	0					
ANR	33726	ArgumentList	arg		33302	1					
ANR	33727	Argument	arg		33302	0					
ANR	33728	Identifier	arg		33302	0					
ANR	33729	Argument	p		33302	1					
ANR	33730	Identifier	p		33302	0					
ANR	33731	Argument	is_null		33302	2					
ANR	33732	Identifier	is_null		33302	0					
ANR	33733	Argument	check_null		33302	3					
ANR	33734	Identifier	check_null		33302	0					
ANR	33735	CompoundStatement		100:59:1869:1869	33302	1					
ANR	33736	ReturnStatement	"return ""boolean"" ;"	599:5:15670:15686	33302	0	True				
ANR	33737	PrimaryExpression	"""boolean"""		33302	0					
ANR	33738	BreakStatement	break ;	602:3:15702:15707	33302	21	True				
ANR	33739	Label	case 'r' :	604:2:15712:15720	33302	22	True				
ANR	33740	CompoundStatement		107:3:1931:1931	33302	23					
ANR	33741	Statement	zval	606:4:15731:15734	33302	0	True				
ANR	33742	Statement	*	606:9:15736:15736	33302	1	True				
ANR	33743	Statement	*	606:10:15737:15737	33302	2	True				
ANR	33744	Statement	p	606:11:15738:15738	33302	3	True				
ANR	33745	Statement	=	606:13:15740:15740	33302	4	True				
ANR	33746	Statement	va_arg	606:15:15742:15747	33302	5	True				
ANR	33747	Statement	(	606:21:15748:15748	33302	6	True				
ANR	33748	Statement	*	606:22:15749:15749	33302	7	True				
ANR	33749	Statement	va	606:23:15750:15751	33302	8	True				
ANR	33750	Statement	","	606:25:15752:15752	33302	9	True				
ANR	33751	Statement	zval	606:27:15754:15757	33302	10	True				
ANR	33752	Statement	*	606:32:15759:15759	33302	11	True				
ANR	33753	Statement	*	606:33:15760:15760	33302	12	True				
ANR	33754	Statement	)	606:34:15761:15761	33302	13	True				
ANR	33755	ExpressionStatement		606:35:15762:15762	33302	14	True				
ANR	33756	IfStatement	"if ( ! zend_parse_arg_resource ( arg , p , check_null ) )"		33302	15					
ANR	33757	Condition	"! zend_parse_arg_resource ( arg , p , check_null )"	608:8:15773:15816	33302	0	True				
ANR	33758	UnaryOperationExpression	"! zend_parse_arg_resource ( arg , p , check_null )"		33302	0					
ANR	33759	UnaryOperator	!		33302	0					
ANR	33760	CallExpression	"zend_parse_arg_resource ( arg , p , check_null )"		33302	1					
ANR	33761	Callee	zend_parse_arg_resource		33302	0					
ANR	33762	Identifier	zend_parse_arg_resource		33302	0					
ANR	33763	ArgumentList	arg		33302	1					
ANR	33764	Argument	arg		33302	0					
ANR	33765	Identifier	arg		33302	0					
ANR	33766	Argument	p		33302	1					
ANR	33767	Identifier	p		33302	0					
ANR	33768	Argument	check_null		33302	2					
ANR	33769	Identifier	check_null		33302	0					
ANR	33770	CompoundStatement		110:54:2025:2025	33302	1					
ANR	33771	ReturnStatement	"return ""resource"" ;"	609:5:15826:15843	33302	0	True				
ANR	33772	PrimaryExpression	"""resource"""		33302	0					
ANR	33773	BreakStatement	break ;	612:3:15859:15864	33302	24	True				
ANR	33774	Label	case 'A' :	614:2:15869:15877	33302	25	True				
ANR	33775	Label	case 'a' :	615:2:15881:15889	33302	26	True				
ANR	33776	CompoundStatement		118:3:2100:2100	33302	27					
ANR	33777	Statement	zval	617:4:15900:15903	33302	0	True				
ANR	33778	Statement	*	617:9:15905:15905	33302	1	True				
ANR	33779	Statement	*	617:10:15906:15906	33302	2	True				
ANR	33780	Statement	p	617:11:15907:15907	33302	3	True				
ANR	33781	Statement	=	617:13:15909:15909	33302	4	True				
ANR	33782	Statement	va_arg	617:15:15911:15916	33302	5	True				
ANR	33783	Statement	(	617:21:15917:15917	33302	6	True				
ANR	33784	Statement	*	617:22:15918:15918	33302	7	True				
ANR	33785	Statement	va	617:23:15919:15920	33302	8	True				
ANR	33786	Statement	","	617:25:15921:15921	33302	9	True				
ANR	33787	Statement	zval	617:27:15923:15926	33302	10	True				
ANR	33788	Statement	*	617:32:15928:15928	33302	11	True				
ANR	33789	Statement	*	617:33:15929:15929	33302	12	True				
ANR	33790	Statement	)	617:34:15930:15930	33302	13	True				
ANR	33791	ExpressionStatement		617:35:15931:15931	33302	14	True				
ANR	33792	IfStatement	"if ( ! zend_parse_arg_array ( arg , p , check_null , c == 'A' ) )"		33302	15					
ANR	33793	Condition	"! zend_parse_arg_array ( arg , p , check_null , c == 'A' )"	619:8:15942:15992	33302	0	True				
ANR	33794	UnaryOperationExpression	"! zend_parse_arg_array ( arg , p , check_null , c == 'A' )"		33302	0					
ANR	33795	UnaryOperator	!		33302	0					
ANR	33796	CallExpression	"zend_parse_arg_array ( arg , p , check_null , c == 'A' )"		33302	1					
ANR	33797	Callee	zend_parse_arg_array		33302	0					
ANR	33798	Identifier	zend_parse_arg_array		33302	0					
ANR	33799	ArgumentList	arg		33302	1					
ANR	33800	Argument	arg		33302	0					
ANR	33801	Identifier	arg		33302	0					
ANR	33802	Argument	p		33302	1					
ANR	33803	Identifier	p		33302	0					
ANR	33804	Argument	check_null		33302	2					
ANR	33805	Identifier	check_null		33302	0					
ANR	33806	Argument	c == 'A'		33302	3					
ANR	33807	EqualityExpression	c == 'A'		33302	0		==			
ANR	33808	Identifier	c		33302	0					
ANR	33809	PrimaryExpression	'A'		33302	1					
ANR	33810	CompoundStatement		121:61:2201:2201	33302	1					
ANR	33811	ReturnStatement	"return ""array"" ;"	620:5:16002:16016	33302	0	True				
ANR	33812	PrimaryExpression	"""array"""		33302	0					
ANR	33813	BreakStatement	break ;	623:3:16032:16037	33302	28	True				
ANR	33814	Label	case 'H' :	625:2:16042:16050	33302	29	True				
ANR	33815	Label	case 'h' :	626:2:16054:16062	33302	30	True				
ANR	33816	CompoundStatement		129:3:2273:2273	33302	31					
ANR	33817	Statement	HashTable	628:4:16073:16081	33302	0	True				
ANR	33818	Statement	*	628:14:16083:16083	33302	1	True				
ANR	33819	Statement	*	628:15:16084:16084	33302	2	True				
ANR	33820	Statement	p	628:16:16085:16085	33302	3	True				
ANR	33821	Statement	=	628:18:16087:16087	33302	4	True				
ANR	33822	Statement	va_arg	628:20:16089:16094	33302	5	True				
ANR	33823	Statement	(	628:26:16095:16095	33302	6	True				
ANR	33824	Statement	*	628:27:16096:16096	33302	7	True				
ANR	33825	Statement	va	628:28:16097:16098	33302	8	True				
ANR	33826	Statement	","	628:30:16099:16099	33302	9	True				
ANR	33827	Statement	HashTable	628:32:16101:16109	33302	10	True				
ANR	33828	Statement	*	628:42:16111:16111	33302	11	True				
ANR	33829	Statement	*	628:43:16112:16112	33302	12	True				
ANR	33830	Statement	)	628:44:16113:16113	33302	13	True				
ANR	33831	ExpressionStatement		628:45:16114:16114	33302	14	True				
ANR	33832	IfStatement	"if ( ! zend_parse_arg_array_ht ( arg , p , check_null , c == 'H' ) )"		33302	15					
ANR	33833	Condition	"! zend_parse_arg_array_ht ( arg , p , check_null , c == 'H' )"	630:8:16125:16178	33302	0	True				
ANR	33834	UnaryOperationExpression	"! zend_parse_arg_array_ht ( arg , p , check_null , c == 'H' )"		33302	0					
ANR	33835	UnaryOperator	!		33302	0					
ANR	33836	CallExpression	"zend_parse_arg_array_ht ( arg , p , check_null , c == 'H' )"		33302	1					
ANR	33837	Callee	zend_parse_arg_array_ht		33302	0					
ANR	33838	Identifier	zend_parse_arg_array_ht		33302	0					
ANR	33839	ArgumentList	arg		33302	1					
ANR	33840	Argument	arg		33302	0					
ANR	33841	Identifier	arg		33302	0					
ANR	33842	Argument	p		33302	1					
ANR	33843	Identifier	p		33302	0					
ANR	33844	Argument	check_null		33302	2					
ANR	33845	Identifier	check_null		33302	0					
ANR	33846	Argument	c == 'H'		33302	3					
ANR	33847	EqualityExpression	c == 'H'		33302	0		==			
ANR	33848	Identifier	c		33302	0					
ANR	33849	PrimaryExpression	'H'		33302	1					
ANR	33850	CompoundStatement		132:64:2387:2387	33302	1					
ANR	33851	ReturnStatement	"return ""array"" ;"	631:5:16188:16202	33302	0	True				
ANR	33852	PrimaryExpression	"""array"""		33302	0					
ANR	33853	BreakStatement	break ;	634:3:16218:16223	33302	32	True				
ANR	33854	Label	case 'o' :	636:2:16228:16236	33302	33	True				
ANR	33855	CompoundStatement		139:3:2447:2447	33302	34					
ANR	33856	Statement	zval	638:4:16247:16250	33302	0	True				
ANR	33857	Statement	*	638:9:16252:16252	33302	1	True				
ANR	33858	Statement	*	638:10:16253:16253	33302	2	True				
ANR	33859	Statement	p	638:11:16254:16254	33302	3	True				
ANR	33860	Statement	=	638:13:16256:16256	33302	4	True				
ANR	33861	Statement	va_arg	638:15:16258:16263	33302	5	True				
ANR	33862	Statement	(	638:21:16264:16264	33302	6	True				
ANR	33863	Statement	*	638:22:16265:16265	33302	7	True				
ANR	33864	Statement	va	638:23:16266:16267	33302	8	True				
ANR	33865	Statement	","	638:25:16268:16268	33302	9	True				
ANR	33866	Statement	zval	638:27:16270:16273	33302	10	True				
ANR	33867	Statement	*	638:32:16275:16275	33302	11	True				
ANR	33868	Statement	*	638:33:16276:16276	33302	12	True				
ANR	33869	Statement	)	638:34:16277:16277	33302	13	True				
ANR	33870	ExpressionStatement		638:35:16278:16278	33302	14	True				
ANR	33871	IfStatement	"if ( ! zend_parse_arg_object ( arg , p , NULL , check_null ) )"		33302	15					
ANR	33872	Condition	"! zend_parse_arg_object ( arg , p , NULL , check_null )"	640:8:16289:16336	33302	0	True				
ANR	33873	UnaryOperationExpression	"! zend_parse_arg_object ( arg , p , NULL , check_null )"		33302	0					
ANR	33874	UnaryOperator	!		33302	0					
ANR	33875	CallExpression	"zend_parse_arg_object ( arg , p , NULL , check_null )"		33302	1					
ANR	33876	Callee	zend_parse_arg_object		33302	0					
ANR	33877	Identifier	zend_parse_arg_object		33302	0					
ANR	33878	ArgumentList	arg		33302	1					
ANR	33879	Argument	arg		33302	0					
ANR	33880	Identifier	arg		33302	0					
ANR	33881	Argument	p		33302	1					
ANR	33882	Identifier	p		33302	0					
ANR	33883	Argument	NULL		33302	2					
ANR	33884	Identifier	NULL		33302	0					
ANR	33885	Argument	check_null		33302	3					
ANR	33886	Identifier	check_null		33302	0					
ANR	33887	CompoundStatement		142:58:2545:2545	33302	1					
ANR	33888	ReturnStatement	"return ""object"" ;"	641:5:16346:16361	33302	0	True				
ANR	33889	PrimaryExpression	"""object"""		33302	0					
ANR	33890	BreakStatement	break ;	644:3:16377:16382	33302	35	True				
ANR	33891	Label	case 'O' :	646:2:16387:16395	33302	36	True				
ANR	33892	CompoundStatement		149:3:2606:2606	33302	37					
ANR	33893	Statement	zval	648:4:16406:16409	33302	0	True				
ANR	33894	Statement	*	648:9:16411:16411	33302	1	True				
ANR	33895	Statement	*	648:10:16412:16412	33302	2	True				
ANR	33896	Statement	p	648:11:16413:16413	33302	3	True				
ANR	33897	Statement	=	648:13:16415:16415	33302	4	True				
ANR	33898	Statement	va_arg	648:15:16417:16422	33302	5	True				
ANR	33899	Statement	(	648:21:16423:16423	33302	6	True				
ANR	33900	Statement	*	648:22:16424:16424	33302	7	True				
ANR	33901	Statement	va	648:23:16425:16426	33302	8	True				
ANR	33902	Statement	","	648:25:16427:16427	33302	9	True				
ANR	33903	Statement	zval	648:27:16429:16432	33302	10	True				
ANR	33904	Statement	*	648:32:16434:16434	33302	11	True				
ANR	33905	Statement	*	648:33:16435:16435	33302	12	True				
ANR	33906	Statement	)	648:34:16436:16436	33302	13	True				
ANR	33907	ExpressionStatement		648:35:16437:16437	33302	14	True				
ANR	33908	Statement	zend_class_entry	649:4:16443:16458	33302	15	True				
ANR	33909	Statement	*	649:21:16460:16460	33302	16	True				
ANR	33910	Statement	ce	649:22:16461:16462	33302	17	True				
ANR	33911	Statement	=	649:25:16464:16464	33302	18	True				
ANR	33912	Statement	va_arg	649:27:16466:16471	33302	19	True				
ANR	33913	Statement	(	649:33:16472:16472	33302	20	True				
ANR	33914	Statement	*	649:34:16473:16473	33302	21	True				
ANR	33915	Statement	va	649:35:16474:16475	33302	22	True				
ANR	33916	Statement	","	649:37:16476:16476	33302	23	True				
ANR	33917	Statement	zend_class_entry	649:39:16478:16493	33302	24	True				
ANR	33918	Statement	*	649:56:16495:16495	33302	25	True				
ANR	33919	Statement	)	649:57:16496:16496	33302	26	True				
ANR	33920	ExpressionStatement		649:58:16497:16497	33302	27	True				
ANR	33921	IfStatement	"if ( ! zend_parse_arg_object ( arg , p , ce , check_null ) )"		33302	28					
ANR	33922	Condition	"! zend_parse_arg_object ( arg , p , ce , check_null )"	651:8:16508:16553	33302	0	True				
ANR	33923	UnaryOperationExpression	"! zend_parse_arg_object ( arg , p , ce , check_null )"		33302	0					
ANR	33924	UnaryOperator	!		33302	0					
ANR	33925	CallExpression	"zend_parse_arg_object ( arg , p , ce , check_null )"		33302	1					
ANR	33926	Callee	zend_parse_arg_object		33302	0					
ANR	33927	Identifier	zend_parse_arg_object		33302	0					
ANR	33928	ArgumentList	arg		33302	1					
ANR	33929	Argument	arg		33302	0					
ANR	33930	Identifier	arg		33302	0					
ANR	33931	Argument	p		33302	1					
ANR	33932	Identifier	p		33302	0					
ANR	33933	Argument	ce		33302	2					
ANR	33934	Identifier	ce		33302	0					
ANR	33935	Argument	check_null		33302	3					
ANR	33936	Identifier	check_null		33302	0					
ANR	33937	CompoundStatement		153:56:2762:2762	33302	1					
ANR	33938	IfStatement	if ( ce )		33302	0					
ANR	33939	Condition	ce	652:9:16567:16568	33302	0	True				
ANR	33940	Identifier	ce		33302	0					
ANR	33941	CompoundStatement		154:13:2777:2777	33302	1					
ANR	33942	ReturnStatement	return ZSTR_VAL ( ce -> name ) ;	653:6:16579:16604	33302	0	True				
ANR	33943	CallExpression	ZSTR_VAL ( ce -> name )		33302	0					
ANR	33944	Callee	ZSTR_VAL		33302	0					
ANR	33945	Identifier	ZSTR_VAL		33302	0					
ANR	33946	ArgumentList	ce -> name		33302	1					
ANR	33947	Argument	ce -> name		33302	0					
ANR	33948	PtrMemberAccess	ce -> name		33302	0					
ANR	33949	Identifier	ce		33302	0					
ANR	33950	Identifier	name		33302	1					
ANR	33951	ElseStatement	else		33302	0					
ANR	33952	CompoundStatement		156:12:2824:2824	33302	0					
ANR	33953	ReturnStatement	"return ""object"" ;"	655:6:16626:16641	33302	0	True				
ANR	33954	PrimaryExpression	"""object"""		33302	0					
ANR	33955	BreakStatement	break ;	659:3:16664:16669	33302	38	True				
ANR	33956	Label	case 'C' :	661:2:16674:16682	33302	39	True				
ANR	33957	CompoundStatement		166:4:2971:3003	33302	40					
ANR	33958	Statement	zend_class_entry	663:4:16693:16708	33302	0	True				
ANR	33959	Statement	*	663:21:16710:16710	33302	1	True				
ANR	33960	Statement	lookup	663:22:16711:16716	33302	2	True				
ANR	33961	Statement	","	663:28:16717:16717	33302	3	True				
ANR	33962	Statement	*	663:30:16719:16719	33302	4	True				
ANR	33963	Statement	*	663:31:16720:16720	33302	5	True				
ANR	33964	Statement	pce	663:32:16721:16723	33302	6	True				
ANR	33965	Statement	=	663:36:16725:16725	33302	7	True				
ANR	33966	Statement	va_arg	663:38:16727:16732	33302	8	True				
ANR	33967	Statement	(	663:44:16733:16733	33302	9	True				
ANR	33968	Statement	*	663:45:16734:16734	33302	10	True				
ANR	33969	Statement	va	663:46:16735:16736	33302	11	True				
ANR	33970	Statement	","	663:48:16737:16737	33302	12	True				
ANR	33971	Statement	zend_class_entry	663:50:16739:16754	33302	13	True				
ANR	33972	Statement	*	663:67:16756:16756	33302	14	True				
ANR	33973	Statement	*	663:68:16757:16757	33302	15	True				
ANR	33974	Statement	)	663:69:16758:16758	33302	16	True				
ANR	33975	ExpressionStatement		663:70:16759:16759	33302	17	True				
ANR	33976	IdentifierDeclStatement	zend_class_entry * ce_base = * pce ;	664:4:16765:16797	33302	18	True				
ANR	33977	IdentifierDecl	* ce_base = * pce		33302	0					
ANR	33978	IdentifierDeclType	zend_class_entry *		33302	0					
ANR	33979	Identifier	ce_base		33302	1					
ANR	33980	AssignmentExpression	* ce_base = * pce		33302	2		=			
ANR	33981	Identifier	ce_base		33302	0					
ANR	33982	UnaryOperationExpression	* pce		33302	1					
ANR	33983	UnaryOperator	*		33302	0					
ANR	33984	Identifier	pce		33302	1					
ANR	33985	IfStatement	if ( check_null && Z_TYPE_P ( arg ) == IS_NULL )		33302	19					
ANR	33986	Condition	check_null && Z_TYPE_P ( arg ) == IS_NULL	666:8:16808:16845	33302	0	True				
ANR	33987	AndExpression	check_null && Z_TYPE_P ( arg ) == IS_NULL		33302	0		&&			
ANR	33988	Identifier	check_null		33302	0					
ANR	33989	EqualityExpression	Z_TYPE_P ( arg ) == IS_NULL		33302	1		==			
ANR	33990	CallExpression	Z_TYPE_P ( arg )		33302	0					
ANR	33991	Callee	Z_TYPE_P		33302	0					
ANR	33992	Identifier	Z_TYPE_P		33302	0					
ANR	33993	ArgumentList	arg		33302	1					
ANR	33994	Argument	arg		33302	0					
ANR	33995	Identifier	arg		33302	0					
ANR	33996	Identifier	IS_NULL		33302	1					
ANR	33997	CompoundStatement		168:48:3054:3054	33302	1					
ANR	33998	ExpressionStatement	* pce = NULL	667:5:16855:16866	33302	0	True				
ANR	33999	AssignmentExpression	* pce = NULL		33302	0		=			
ANR	34000	UnaryOperationExpression	* pce		33302	0					
ANR	34001	UnaryOperator	*		33302	0					
ANR	34002	Identifier	pce		33302	1					
ANR	34003	Identifier	NULL		33302	1					
ANR	34004	BreakStatement	break ;	668:5:16873:16878	33302	1	True				
ANR	34005	ExpressionStatement	convert_to_string_ex ( arg )	670:4:16890:16915	33302	20	True				
ANR	34006	CallExpression	convert_to_string_ex ( arg )		33302	0					
ANR	34007	Callee	convert_to_string_ex		33302	0					
ANR	34008	Identifier	convert_to_string_ex		33302	0					
ANR	34009	ArgumentList	arg		33302	1					
ANR	34010	Argument	arg		33302	0					
ANR	34011	Identifier	arg		33302	0					
ANR	34012	IfStatement	if ( ( lookup = zend_lookup_class ( Z_STR_P ( arg ) ) ) == NULL )		33302	21					
ANR	34013	Condition	( lookup = zend_lookup_class ( Z_STR_P ( arg ) ) ) == NULL	671:8:16925:16974	33302	0	True				
ANR	34014	EqualityExpression	( lookup = zend_lookup_class ( Z_STR_P ( arg ) ) ) == NULL		33302	0		==			
ANR	34015	AssignmentExpression	lookup = zend_lookup_class ( Z_STR_P ( arg ) )		33302	0		=			
ANR	34016	Identifier	lookup		33302	0					
ANR	34017	CallExpression	zend_lookup_class ( Z_STR_P ( arg ) )		33302	1					
ANR	34018	Callee	zend_lookup_class		33302	0					
ANR	34019	Identifier	zend_lookup_class		33302	0					
ANR	34020	ArgumentList	Z_STR_P ( arg )		33302	1					
ANR	34021	Argument	Z_STR_P ( arg )		33302	0					
ANR	34022	CallExpression	Z_STR_P ( arg )		33302	0					
ANR	34023	Callee	Z_STR_P		33302	0					
ANR	34024	Identifier	Z_STR_P		33302	0					
ANR	34025	ArgumentList	arg		33302	1					
ANR	34026	Argument	arg		33302	0					
ANR	34027	Identifier	arg		33302	0					
ANR	34028	Identifier	NULL		33302	1					
ANR	34029	CompoundStatement		173:60:3183:3183	33302	1					
ANR	34030	ExpressionStatement	* pce = NULL	672:5:16984:16995	33302	0	True				
ANR	34031	AssignmentExpression	* pce = NULL		33302	0		=			
ANR	34032	UnaryOperationExpression	* pce		33302	0					
ANR	34033	UnaryOperator	*		33302	0					
ANR	34034	Identifier	pce		33302	1					
ANR	34035	Identifier	NULL		33302	1					
ANR	34036	ElseStatement	else		33302	0					
ANR	34037	CompoundStatement		175:11:3214:3214	33302	0					
ANR	34038	ExpressionStatement	* pce = lookup	674:5:17015:17028	33302	0	True				
ANR	34039	AssignmentExpression	* pce = lookup		33302	0		=			
ANR	34040	UnaryOperationExpression	* pce		33302	0					
ANR	34041	UnaryOperator	*		33302	0					
ANR	34042	Identifier	pce		33302	1					
ANR	34043	Identifier	lookup		33302	1					
ANR	34044	IfStatement	if ( ce_base )		33302	22					
ANR	34045	Condition	ce_base	676:8:17044:17050	33302	0	True				
ANR	34046	Identifier	ce_base		33302	0					
ANR	34047	CompoundStatement		178:17:3259:3259	33302	1					
ANR	34048	IfStatement	"if ( ( ! * pce || ! instanceof_function ( * pce , ce_base ) ) )"		33302	0					
ANR	34049	Condition	"! * pce || ! instanceof_function ( * pce , ce_base )"	677:9:17064:17109	33302	0	True				
ANR	34050	OrExpression	"! * pce || ! instanceof_function ( * pce , ce_base )"		33302	0		||			
ANR	34051	UnaryOperationExpression	! * pce		33302	0					
ANR	34052	UnaryOperator	!		33302	0					
ANR	34053	UnaryOperationExpression	* pce		33302	1					
ANR	34054	UnaryOperator	*		33302	0					
ANR	34055	Identifier	pce		33302	1					
ANR	34056	UnaryOperationExpression	"! instanceof_function ( * pce , ce_base )"		33302	1					
ANR	34057	UnaryOperator	!		33302	0					
ANR	34058	CallExpression	"instanceof_function ( * pce , ce_base )"		33302	1					
ANR	34059	Callee	instanceof_function		33302	0					
ANR	34060	Identifier	instanceof_function		33302	0					
ANR	34061	ArgumentList	* pce		33302	1					
ANR	34062	Argument	* pce		33302	0					
ANR	34063	UnaryOperationExpression	* pce		33302	0					
ANR	34064	UnaryOperator	*		33302	0					
ANR	34065	Identifier	pce		33302	1					
ANR	34066	Argument	ce_base		33302	1					
ANR	34067	Identifier	ce_base		33302	0					
ANR	34068	CompoundStatement		179:57:3318:3318	33302	1					
ANR	34069	ExpressionStatement	"zend_spprintf ( error , 0 , ""to be a class name derived from %s, '%s' given"" , ZSTR_VAL ( ce_base -> name ) , Z_STRVAL_P ( arg ) )"	678:6:17120:17242	33302	0	True				
ANR	34070	CallExpression	"zend_spprintf ( error , 0 , ""to be a class name derived from %s, '%s' given"" , ZSTR_VAL ( ce_base -> name ) , Z_STRVAL_P ( arg ) )"		33302	0					
ANR	34071	Callee	zend_spprintf		33302	0					
ANR	34072	Identifier	zend_spprintf		33302	0					
ANR	34073	ArgumentList	error		33302	1					
ANR	34074	Argument	error		33302	0					
ANR	34075	Identifier	error		33302	0					
ANR	34076	Argument	0		33302	1					
ANR	34077	PrimaryExpression	0		33302	0					
ANR	34078	Argument	"""to be a class name derived from %s, '%s' given"""		33302	2					
ANR	34079	PrimaryExpression	"""to be a class name derived from %s, '%s' given"""		33302	0					
ANR	34080	Argument	ZSTR_VAL ( ce_base -> name )		33302	3					
ANR	34081	CallExpression	ZSTR_VAL ( ce_base -> name )		33302	0					
ANR	34082	Callee	ZSTR_VAL		33302	0					
ANR	34083	Identifier	ZSTR_VAL		33302	0					
ANR	34084	ArgumentList	ce_base -> name		33302	1					
ANR	34085	Argument	ce_base -> name		33302	0					
ANR	34086	PtrMemberAccess	ce_base -> name		33302	0					
ANR	34087	Identifier	ce_base		33302	0					
ANR	34088	Identifier	name		33302	1					
ANR	34089	Argument	Z_STRVAL_P ( arg )		33302	4					
ANR	34090	CallExpression	Z_STRVAL_P ( arg )		33302	0					
ANR	34091	Callee	Z_STRVAL_P		33302	0					
ANR	34092	Identifier	Z_STRVAL_P		33302	0					
ANR	34093	ArgumentList	arg		33302	1					
ANR	34094	Argument	arg		33302	0					
ANR	34095	Identifier	arg		33302	0					
ANR	34096	ExpressionStatement	* pce = NULL	680:6:17250:17261	33302	1	True				
ANR	34097	AssignmentExpression	* pce = NULL		33302	0		=			
ANR	34098	UnaryOperationExpression	* pce		33302	0					
ANR	34099	UnaryOperator	*		33302	0					
ANR	34100	Identifier	pce		33302	1					
ANR	34101	Identifier	NULL		33302	1					
ANR	34102	ReturnStatement	"return """" ;"	681:6:17269:17278	33302	2	True				
ANR	34103	PrimaryExpression	""""""		33302	0					
ANR	34104	IfStatement	if ( ! * pce )		33302	23					
ANR	34105	Condition	! * pce	684:8:17301:17305	33302	0	True				
ANR	34106	UnaryOperationExpression	! * pce		33302	0					
ANR	34107	UnaryOperator	!		33302	0					
ANR	34108	UnaryOperationExpression	* pce		33302	1					
ANR	34109	UnaryOperator	*		33302	0					
ANR	34110	Identifier	pce		33302	1					
ANR	34111	CompoundStatement		186:15:3514:3514	33302	1					
ANR	34112	ExpressionStatement	"zend_spprintf ( error , 0 , ""to be a valid class name, '%s' given"" , Z_STRVAL_P ( arg ) )"	685:5:17315:17401	33302	0	True				
ANR	34113	CallExpression	"zend_spprintf ( error , 0 , ""to be a valid class name, '%s' given"" , Z_STRVAL_P ( arg ) )"		33302	0					
ANR	34114	Callee	zend_spprintf		33302	0					
ANR	34115	Identifier	zend_spprintf		33302	0					
ANR	34116	ArgumentList	error		33302	1					
ANR	34117	Argument	error		33302	0					
ANR	34118	Identifier	error		33302	0					
ANR	34119	Argument	0		33302	1					
ANR	34120	PrimaryExpression	0		33302	0					
ANR	34121	Argument	"""to be a valid class name, '%s' given"""		33302	2					
ANR	34122	PrimaryExpression	"""to be a valid class name, '%s' given"""		33302	0					
ANR	34123	Argument	Z_STRVAL_P ( arg )		33302	3					
ANR	34124	CallExpression	Z_STRVAL_P ( arg )		33302	0					
ANR	34125	Callee	Z_STRVAL_P		33302	0					
ANR	34126	Identifier	Z_STRVAL_P		33302	0					
ANR	34127	ArgumentList	arg		33302	1					
ANR	34128	Argument	arg		33302	0					
ANR	34129	Identifier	arg		33302	0					
ANR	34130	ReturnStatement	"return """" ;"	687:5:17408:17417	33302	1	True				
ANR	34131	PrimaryExpression	""""""		33302	0					
ANR	34132	BreakStatement	break ;	689:4:17429:17434	33302	24	True				
ANR	34133	BreakStatement	break ;	692:3:17445:17450	33302	41	True				
ANR	34134	Label	case 'f' :	694:2:17455:17463	33302	42	True				
ANR	34135	CompoundStatement		200:4:3810:3840	33302	43					
ANR	34136	Statement	zend_fcall_info	696:4:17474:17488	33302	0	True				
ANR	34137	Statement	*	696:20:17490:17490	33302	1	True				
ANR	34138	Statement	fci	696:21:17491:17493	33302	2	True				
ANR	34139	Statement	=	696:25:17495:17495	33302	3	True				
ANR	34140	Statement	va_arg	696:27:17497:17502	33302	4	True				
ANR	34141	Statement	(	696:33:17503:17503	33302	5	True				
ANR	34142	Statement	*	696:34:17504:17504	33302	6	True				
ANR	34143	Statement	va	696:35:17505:17506	33302	7	True				
ANR	34144	Statement	","	696:37:17507:17507	33302	8	True				
ANR	34145	Statement	zend_fcall_info	696:39:17509:17523	33302	9	True				
ANR	34146	Statement	*	696:55:17525:17525	33302	10	True				
ANR	34147	Statement	)	696:56:17526:17526	33302	11	True				
ANR	34148	ExpressionStatement		696:57:17527:17527	33302	12	True				
ANR	34149	Statement	zend_fcall_info_cache	697:4:17533:17553	33302	13	True				
ANR	34150	Statement	*	697:26:17555:17555	33302	14	True				
ANR	34151	Statement	fcc	697:27:17556:17558	33302	15	True				
ANR	34152	Statement	=	697:31:17560:17560	33302	16	True				
ANR	34153	Statement	va_arg	697:33:17562:17567	33302	17	True				
ANR	34154	Statement	(	697:39:17568:17568	33302	18	True				
ANR	34155	Statement	*	697:40:17569:17569	33302	19	True				
ANR	34156	Statement	va	697:41:17570:17571	33302	20	True				
ANR	34157	Statement	","	697:43:17572:17572	33302	21	True				
ANR	34158	Statement	zend_fcall_info_cache	697:45:17574:17594	33302	22	True				
ANR	34159	Statement	*	697:67:17596:17596	33302	23	True				
ANR	34160	Statement	)	697:68:17597:17597	33302	24	True				
ANR	34161	ExpressionStatement		697:69:17598:17598	33302	25	True				
ANR	34162	IdentifierDeclStatement	char * is_callable_error = NULL ;	698:4:17604:17634	33302	26	True				
ANR	34163	IdentifierDecl	* is_callable_error = NULL		33302	0					
ANR	34164	IdentifierDeclType	char *		33302	0					
ANR	34165	Identifier	is_callable_error		33302	1					
ANR	34166	AssignmentExpression	* is_callable_error = NULL		33302	2		=			
ANR	34167	Identifier	NULL		33302	0					
ANR	34168	Identifier	NULL		33302	1					
ANR	34169	IfStatement	if ( check_null && Z_TYPE_P ( arg ) == IS_NULL )		33302	27					
ANR	34170	Condition	check_null && Z_TYPE_P ( arg ) == IS_NULL	700:8:17645:17682	33302	0	True				
ANR	34171	AndExpression	check_null && Z_TYPE_P ( arg ) == IS_NULL		33302	0		&&			
ANR	34172	Identifier	check_null		33302	0					
ANR	34173	EqualityExpression	Z_TYPE_P ( arg ) == IS_NULL		33302	1		==			
ANR	34174	CallExpression	Z_TYPE_P ( arg )		33302	0					
ANR	34175	Callee	Z_TYPE_P		33302	0					
ANR	34176	Identifier	Z_TYPE_P		33302	0					
ANR	34177	ArgumentList	arg		33302	1					
ANR	34178	Argument	arg		33302	0					
ANR	34179	Identifier	arg		33302	0					
ANR	34180	Identifier	IS_NULL		33302	1					
ANR	34181	CompoundStatement		202:48:3891:3891	33302	1					
ANR	34182	ExpressionStatement	fci -> size = 0	701:5:17692:17705	33302	0	True				
ANR	34183	AssignmentExpression	fci -> size = 0		33302	0		=			
ANR	34184	PtrMemberAccess	fci -> size		33302	0					
ANR	34185	Identifier	fci		33302	0					
ANR	34186	Identifier	size		33302	1					
ANR	34187	PrimaryExpression	0		33302	1					
ANR	34188	ExpressionStatement	fcc -> initialized = 0	702:5:17712:17732	33302	1	True				
ANR	34189	AssignmentExpression	fcc -> initialized = 0		33302	0		=			
ANR	34190	PtrMemberAccess	fcc -> initialized		33302	0					
ANR	34191	Identifier	fcc		33302	0					
ANR	34192	Identifier	initialized		33302	1					
ANR	34193	PrimaryExpression	0		33302	1					
ANR	34194	BreakStatement	break ;	703:5:17739:17744	33302	2	True				
ANR	34195	IfStatement	"if ( zend_fcall_info_init ( arg , 0 , fci , fcc , NULL , & is_callable_error ) == SUCCESS )"		33302	28					
ANR	34196	Condition	"zend_fcall_info_init ( arg , 0 , fci , fcc , NULL , & is_callable_error ) == SUCCESS"	706:8:17761:17835	33302	0	True				
ANR	34197	EqualityExpression	"zend_fcall_info_init ( arg , 0 , fci , fcc , NULL , & is_callable_error ) == SUCCESS"		33302	0		==			
ANR	34198	CallExpression	"zend_fcall_info_init ( arg , 0 , fci , fcc , NULL , & is_callable_error )"		33302	0					
ANR	34199	Callee	zend_fcall_info_init		33302	0					
ANR	34200	Identifier	zend_fcall_info_init		33302	0					
ANR	34201	ArgumentList	arg		33302	1					
ANR	34202	Argument	arg		33302	0					
ANR	34203	Identifier	arg		33302	0					
ANR	34204	Argument	0		33302	1					
ANR	34205	PrimaryExpression	0		33302	0					
ANR	34206	Argument	fci		33302	2					
ANR	34207	Identifier	fci		33302	0					
ANR	34208	Argument	fcc		33302	3					
ANR	34209	Identifier	fcc		33302	0					
ANR	34210	Argument	NULL		33302	4					
ANR	34211	Identifier	NULL		33302	0					
ANR	34212	Argument	& is_callable_error		33302	5					
ANR	34213	UnaryOperationExpression	& is_callable_error		33302	0					
ANR	34214	UnaryOperator	&		33302	0					
ANR	34215	Identifier	is_callable_error		33302	1					
ANR	34216	Identifier	SUCCESS		33302	1					
ANR	34217	CompoundStatement		208:85:4044:4044	33302	1					
ANR	34218	IfStatement	if ( is_callable_error )		33302	0					
ANR	34219	Condition	is_callable_error	707:9:17849:17865	33302	0	True				
ANR	34220	Identifier	is_callable_error		33302	0					
ANR	34221	CompoundStatement		209:28:4074:4074	33302	1					
ANR	34222	ExpressionStatement	* severity = E_DEPRECATED	708:6:17876:17900	33302	0	True				
ANR	34223	AssignmentExpression	* severity = E_DEPRECATED		33302	0		=			
ANR	34224	UnaryOperationExpression	* severity		33302	0					
ANR	34225	UnaryOperator	*		33302	0					
ANR	34226	Identifier	severity		33302	1					
ANR	34227	Identifier	E_DEPRECATED		33302	1					
ANR	34228	ExpressionStatement	"zend_spprintf ( error , 0 , ""to be a valid callback, %s"" , is_callable_error )"	709:6:17908:17980	33302	1	True				
ANR	34229	CallExpression	"zend_spprintf ( error , 0 , ""to be a valid callback, %s"" , is_callable_error )"		33302	0					
ANR	34230	Callee	zend_spprintf		33302	0					
ANR	34231	Identifier	zend_spprintf		33302	0					
ANR	34232	ArgumentList	error		33302	1					
ANR	34233	Argument	error		33302	0					
ANR	34234	Identifier	error		33302	0					
ANR	34235	Argument	0		33302	1					
ANR	34236	PrimaryExpression	0		33302	0					
ANR	34237	Argument	"""to be a valid callback, %s"""		33302	2					
ANR	34238	PrimaryExpression	"""to be a valid callback, %s"""		33302	0					
ANR	34239	Argument	is_callable_error		33302	3					
ANR	34240	Identifier	is_callable_error		33302	0					
ANR	34241	ExpressionStatement	efree ( is_callable_error )	710:6:17988:18012	33302	2	True				
ANR	34242	CallExpression	efree ( is_callable_error )		33302	0					
ANR	34243	Callee	efree		33302	0					
ANR	34244	Identifier	efree		33302	0					
ANR	34245	ArgumentList	is_callable_error		33302	1					
ANR	34246	Argument	is_callable_error		33302	0					
ANR	34247	Identifier	is_callable_error		33302	0					
ANR	34248	ExpressionStatement	* spec = spec_walk	711:6:18020:18037	33302	3	True				
ANR	34249	AssignmentExpression	* spec = spec_walk		33302	0		=			
ANR	34250	UnaryOperationExpression	* spec		33302	0					
ANR	34251	UnaryOperator	*		33302	0					
ANR	34252	Identifier	spec		33302	1					
ANR	34253	Identifier	spec_walk		33302	1					
ANR	34254	ReturnStatement	"return """" ;"	712:6:18045:18054	33302	4	True				
ANR	34255	PrimaryExpression	""""""		33302	0					
ANR	34256	BreakStatement	break ;	714:5:18068:18073	33302	1	True				
ANR	34257	ElseStatement	else		33302	0					
ANR	34258	CompoundStatement		217:11:4292:4292	33302	0					
ANR	34259	IfStatement	if ( is_callable_error )		33302	0					
ANR	34260	Condition	is_callable_error	716:9:18097:18113	33302	0	True				
ANR	34261	Identifier	is_callable_error		33302	0					
ANR	34262	CompoundStatement		218:28:4322:4322	33302	1					
ANR	34263	ExpressionStatement	* severity = E_ERROR	717:6:18124:18143	33302	0	True				
ANR	34264	AssignmentExpression	* severity = E_ERROR		33302	0		=			
ANR	34265	UnaryOperationExpression	* severity		33302	0					
ANR	34266	UnaryOperator	*		33302	0					
ANR	34267	Identifier	severity		33302	1					
ANR	34268	Identifier	E_ERROR		33302	1					
ANR	34269	ExpressionStatement	"zend_spprintf ( error , 0 , ""to be a valid callback, %s"" , is_callable_error )"	718:6:18151:18223	33302	1	True				
ANR	34270	CallExpression	"zend_spprintf ( error , 0 , ""to be a valid callback, %s"" , is_callable_error )"		33302	0					
ANR	34271	Callee	zend_spprintf		33302	0					
ANR	34272	Identifier	zend_spprintf		33302	0					
ANR	34273	ArgumentList	error		33302	1					
ANR	34274	Argument	error		33302	0					
ANR	34275	Identifier	error		33302	0					
ANR	34276	Argument	0		33302	1					
ANR	34277	PrimaryExpression	0		33302	0					
ANR	34278	Argument	"""to be a valid callback, %s"""		33302	2					
ANR	34279	PrimaryExpression	"""to be a valid callback, %s"""		33302	0					
ANR	34280	Argument	is_callable_error		33302	3					
ANR	34281	Identifier	is_callable_error		33302	0					
ANR	34282	ExpressionStatement	efree ( is_callable_error )	719:6:18231:18255	33302	2	True				
ANR	34283	CallExpression	efree ( is_callable_error )		33302	0					
ANR	34284	Callee	efree		33302	0					
ANR	34285	Identifier	efree		33302	0					
ANR	34286	ArgumentList	is_callable_error		33302	1					
ANR	34287	Argument	is_callable_error		33302	0					
ANR	34288	Identifier	is_callable_error		33302	0					
ANR	34289	ReturnStatement	"return """" ;"	720:6:18263:18272	33302	3	True				
ANR	34290	PrimaryExpression	""""""		33302	0					
ANR	34291	ElseStatement	else		33302	0					
ANR	34292	CompoundStatement		223:12:4492:4492	33302	0					
ANR	34293	ReturnStatement	"return ""valid callback"" ;"	722:6:18294:18317	33302	0	True				
ANR	34294	PrimaryExpression	"""valid callback"""		33302	0					
ANR	34295	Label	case 'z' :	727:2:18340:18348	33302	44	True				
ANR	34296	CompoundStatement		230:3:4559:4559	33302	45					
ANR	34297	Statement	zval	729:4:18359:18362	33302	0	True				
ANR	34298	Statement	*	729:9:18364:18364	33302	1	True				
ANR	34299	Statement	*	729:10:18365:18365	33302	2	True				
ANR	34300	Statement	p	729:11:18366:18366	33302	3	True				
ANR	34301	Statement	=	729:13:18368:18368	33302	4	True				
ANR	34302	Statement	va_arg	729:15:18370:18375	33302	5	True				
ANR	34303	Statement	(	729:21:18376:18376	33302	6	True				
ANR	34304	Statement	*	729:22:18377:18377	33302	7	True				
ANR	34305	Statement	va	729:23:18378:18379	33302	8	True				
ANR	34306	Statement	","	729:25:18380:18380	33302	9	True				
ANR	34307	Statement	zval	729:27:18382:18385	33302	10	True				
ANR	34308	Statement	*	729:32:18387:18387	33302	11	True				
ANR	34309	Statement	*	729:33:18388:18388	33302	12	True				
ANR	34310	Statement	)	729:34:18389:18389	33302	13	True				
ANR	34311	ExpressionStatement		729:35:18390:18390	33302	14	True				
ANR	34312	ExpressionStatement	"zend_parse_arg_zval_deref ( real_arg , p , check_null )"	731:4:18397:18447	33302	15	True				
ANR	34313	CallExpression	"zend_parse_arg_zval_deref ( real_arg , p , check_null )"		33302	0					
ANR	34314	Callee	zend_parse_arg_zval_deref		33302	0					
ANR	34315	Identifier	zend_parse_arg_zval_deref		33302	0					
ANR	34316	ArgumentList	real_arg		33302	1					
ANR	34317	Argument	real_arg		33302	0					
ANR	34318	Identifier	real_arg		33302	0					
ANR	34319	Argument	p		33302	1					
ANR	34320	Identifier	p		33302	0					
ANR	34321	Argument	check_null		33302	2					
ANR	34322	Identifier	check_null		33302	0					
ANR	34323	BreakStatement	break ;	733:3:18457:18462	33302	46	True				
ANR	34324	Label	case 'Z' :	735:2:18467:18475	33302	47	True				
ANR	34325	ExpressionStatement	ZEND_ASSERT ( c != 'Z' )	737:3:18550:18571	33302	48	True				
ANR	34326	CallExpression	ZEND_ASSERT ( c != 'Z' )		33302	0					
ANR	34327	Callee	ZEND_ASSERT		33302	0					
ANR	34328	Identifier	ZEND_ASSERT		33302	0					
ANR	34329	ArgumentList	c != 'Z'		33302	1					
ANR	34330	Argument	c != 'Z'		33302	0					
ANR	34331	EqualityExpression	c != 'Z'		33302	0		!=			
ANR	34332	Identifier	c		33302	0					
ANR	34333	PrimaryExpression	'Z'		33302	1					
ANR	34334	Label	default :	738:2:18575:18582	33302	49	True				
ANR	34335	Identifier	default		33302	0					
ANR	34336	ReturnStatement	"return ""unknown"" ;"	739:3:18587:18603	33302	50	True				
ANR	34337	PrimaryExpression	"""unknown"""		33302	0					
ANR	34338	ExpressionStatement	* spec = spec_walk	742:1:18610:18627	33302	7	True				
ANR	34339	AssignmentExpression	* spec = spec_walk		33302	0		=			
ANR	34340	UnaryOperationExpression	* spec		33302	0					
ANR	34341	UnaryOperator	*		33302	0					
ANR	34342	Identifier	spec		33302	1					
ANR	34343	Identifier	spec_walk		33302	1					
ANR	34344	ReturnStatement	return NULL ;	744:1:18631:18642	33302	8	True				
ANR	34345	Identifier	NULL		33302	0					
ANR	34346	ReturnType	static const char *		33302	1					
ANR	34347	Identifier	zend_parse_arg_impl		33302	2					
ANR	34348	ParameterList	"int arg_num , zval * arg , va_list * va , const char * * spec , char * * error , int * severity"		33302	3					
ANR	34349	Parameter	int arg_num	498:39:13698:13708	33302	0	True				
ANR	34350	ParameterType	int		33302	0					
ANR	34351	Identifier	arg_num		33302	1					
ANR	34352	Parameter	zval * arg	498:52:13711:13719	33302	1	True				
ANR	34353	ParameterType	zval *		33302	0					
ANR	34354	Identifier	arg		33302	1					
ANR	34355	Parameter	va_list * va	498:63:13722:13732	33302	2	True				
ANR	34356	ParameterType	va_list *		33302	0					
ANR	34357	Identifier	va		33302	1					
ANR	34358	Parameter	const char * * spec	498:76:13735:13751	33302	3	True				
ANR	34359	ParameterType	const char * *		33302	0					
ANR	34360	Identifier	spec		33302	1					
ANR	34361	Parameter	char * * error	498:95:13754:13765	33302	4	True				
ANR	34362	ParameterType	char * *		33302	0					
ANR	34363	Identifier	error		33302	1					
ANR	34364	Parameter	int * severity	498:109:13768:13780	33302	5	True				
ANR	34365	ParameterType	int *		33302	0					
ANR	34366	Identifier	severity		33302	1					
ANR	34367	CFGEntryNode	ENTRY		33302		True				
ANR	34368	CFGExitNode	EXIT		33302		True				
ANR	34369	Symbol	arg_num		33302						
ANR	34370	Symbol	* severity		33302						
ANR	34371	Symbol	* spec_walk ++		33302						
ANR	34372	Symbol	ce_base -> name		33302						
ANR	34373	Symbol	* fci		33302						
ANR	34374	Symbol	zend_parse_arg_array_ht		33302						
ANR	34375	Symbol	* ce		33302						
ANR	34376	Symbol	spec		33302						
ANR	34377	Symbol	* fcc		33302						
ANR	34378	Symbol	zend_parse_arg_bool		33302						
ANR	34379	Symbol	zend_parse_arg_double		33302						
ANR	34380	Symbol	ce -> name		33302						
ANR	34381	Symbol	NULL		33302						
ANR	34382	Symbol	zend_parse_arg_string		33302						
ANR	34383	Symbol	zend_parse_arg_array		33302						
ANR	34384	Symbol	va		33302						
ANR	34385	Symbol	zend_lookup_class		33302						
ANR	34386	Symbol	str		33302						
ANR	34387	Symbol	* ce_base		33302						
ANR	34388	Symbol	E_DEPRECATED		33302						
ANR	34389	Symbol	spec_walk		33302						
ANR	34390	Symbol	Z_STR_P		33302						
ANR	34391	Symbol	* pce		33302						
ANR	34392	Symbol	zend_parse_arg_long		33302						
ANR	34393	Symbol	instanceof_function		33302						
ANR	34394	Symbol	zend_parse_arg_str		33302						
ANR	34395	Symbol	is_callable_error		33302						
ANR	34396	Symbol	ce_base		33302						
ANR	34397	Symbol	& is_callable_error		33302						
ANR	34398	Symbol	zend_fcall_info_init		33302						
ANR	34399	Symbol	check_null		33302						
ANR	34400	Symbol	fci -> size		33302						
ANR	34401	Symbol	fcc		33302						
ANR	34402	Symbol	error		33302						
ANR	34403	Symbol	zend_parse_arg_path		33302						
ANR	34404	Symbol	fci		33302						
ANR	34405	Symbol	zend_parse_arg_path_str		33302						
ANR	34406	Symbol	pce		33302						
ANR	34407	Symbol	IS_NULL		33302						
ANR	34408	Symbol	* spec		33302						
ANR	34409	Symbol	arg		33302						
ANR	34410	Symbol	fcc -> initialized		33302						
ANR	34411	Symbol	severity		33302						
ANR	34412	Symbol	lookup		33302						
ANR	34413	Symbol	ce		33302						
ANR	34414	Symbol	c		33302						
ANR	34415	Symbol	SUCCESS		33302						
ANR	34416	Symbol	is_null		33302						
ANR	34417	Symbol	zend_parse_arg_resource		33302						
ANR	34418	Symbol	zend_parse_arg_object		33302						
ANR	34419	Symbol	Z_TYPE_P		33302						
ANR	34420	Symbol	Z_STRVAL_P		33302						
ANR	34421	Symbol	ZSTR_VAL		33302						
ANR	34422	Symbol	p		33302						
ANR	34423	Symbol	E_ERROR		33302						
ANR	34424	Symbol	real_arg		33302						
ANR	34425	Symbol	* spec_walk		33302						
ANR	34426	Symbol	pl		33302						
ANR	34427	Function	zend_parse_arg	748:0:18657:19697							
ANR	34428	FunctionDef	"zend_parse_arg (int arg_num , zval * arg , va_list * va , const char * * spec , int flags)"		34427	0					
ANR	34429	CompoundStatement		749:0:18760:19697	34427	0					
ANR	34430	IdentifierDeclStatement	const char * expected_type = NULL ;	750:1:18763:18795	34427	0	True				
ANR	34431	IdentifierDecl	* expected_type = NULL		34427	0					
ANR	34432	IdentifierDeclType	const char *		34427	0					
ANR	34433	Identifier	expected_type		34427	1					
ANR	34434	AssignmentExpression	* expected_type = NULL		34427	2		=			
ANR	34435	Identifier	NULL		34427	0					
ANR	34436	Identifier	NULL		34427	1					
ANR	34437	IdentifierDeclStatement	char * error = NULL ;	751:1:18798:18816	34427	1	True				
ANR	34438	IdentifierDecl	* error = NULL		34427	0					
ANR	34439	IdentifierDeclType	char *		34427	0					
ANR	34440	Identifier	error		34427	1					
ANR	34441	AssignmentExpression	* error = NULL		34427	2		=			
ANR	34442	Identifier	NULL		34427	0					
ANR	34443	Identifier	NULL		34427	1					
ANR	34444	IdentifierDeclStatement	int severity = 0 ;	752:1:18819:18835	34427	2	True				
ANR	34445	IdentifierDecl	severity = 0		34427	0					
ANR	34446	IdentifierDeclType	int		34427	0					
ANR	34447	Identifier	severity		34427	1					
ANR	34448	AssignmentExpression	severity = 0		34427	2		=			
ANR	34449	Identifier	severity		34427	0					
ANR	34450	PrimaryExpression	0		34427	1					
ANR	34451	ExpressionStatement	"expected_type = zend_parse_arg_impl ( arg_num , arg , va , spec , & error , & severity )"	754:1:18839:18917	34427	3	True				
ANR	34452	AssignmentExpression	"expected_type = zend_parse_arg_impl ( arg_num , arg , va , spec , & error , & severity )"		34427	0		=			
ANR	34453	Identifier	expected_type		34427	0					
ANR	34454	CallExpression	"zend_parse_arg_impl ( arg_num , arg , va , spec , & error , & severity )"		34427	1					
ANR	34455	Callee	zend_parse_arg_impl		34427	0					
ANR	34456	Identifier	zend_parse_arg_impl		34427	0					
ANR	34457	ArgumentList	arg_num		34427	1					
ANR	34458	Argument	arg_num		34427	0					
ANR	34459	Identifier	arg_num		34427	0					
ANR	34460	Argument	arg		34427	1					
ANR	34461	Identifier	arg		34427	0					
ANR	34462	Argument	va		34427	2					
ANR	34463	Identifier	va		34427	0					
ANR	34464	Argument	spec		34427	3					
ANR	34465	Identifier	spec		34427	0					
ANR	34466	Argument	& error		34427	4					
ANR	34467	UnaryOperationExpression	& error		34427	0					
ANR	34468	UnaryOperator	&		34427	0					
ANR	34469	Identifier	error		34427	1					
ANR	34470	Argument	& severity		34427	5					
ANR	34471	UnaryOperationExpression	& severity		34427	0					
ANR	34472	UnaryOperator	&		34427	0					
ANR	34473	Identifier	severity		34427	1					
ANR	34474	IfStatement	if ( expected_type )		34427	4					
ANR	34475	Condition	expected_type	755:5:18924:18936	34427	0	True				
ANR	34476	Identifier	expected_type		34427	0					
ANR	34477	CompoundStatement		7:20:178:178	34427	1					
ANR	34478	IfStatement	if ( ! ( flags & ZEND_PARSE_PARAMS_QUIET ) && ( * expected_type || error ) )		34427	0					
ANR	34479	Condition	! ( flags & ZEND_PARSE_PARAMS_QUIET ) && ( * expected_type || error )	756:6:18947:19009	34427	0	True				
ANR	34480	AndExpression	! ( flags & ZEND_PARSE_PARAMS_QUIET ) && ( * expected_type || error )		34427	0		&&			
ANR	34481	UnaryOperationExpression	! ( flags & ZEND_PARSE_PARAMS_QUIET )		34427	0					
ANR	34482	UnaryOperator	!		34427	0					
ANR	34483	BitAndExpression	flags & ZEND_PARSE_PARAMS_QUIET		34427	1		&			
ANR	34484	Identifier	flags		34427	0					
ANR	34485	Identifier	ZEND_PARSE_PARAMS_QUIET		34427	1					
ANR	34486	OrExpression	* expected_type || error		34427	1		||			
ANR	34487	UnaryOperationExpression	* expected_type		34427	0					
ANR	34488	UnaryOperator	*		34427	0					
ANR	34489	Identifier	expected_type		34427	1					
ANR	34490	Identifier	error		34427	1					
ANR	34491	CompoundStatement		11:3:337:434	34427	1					
ANR	34492	IdentifierDeclStatement	const char * space ;	757:3:19017:19034	34427	0	True				
ANR	34493	IdentifierDecl	* space		34427	0					
ANR	34494	IdentifierDeclType	const char *		34427	0					
ANR	34495	Identifier	space		34427	1					
ANR	34496	IdentifierDeclStatement	const char * class_name = get_active_class_name ( & space ) ;	758:3:19039:19093	34427	1	True				
ANR	34497	IdentifierDecl	* class_name = get_active_class_name ( & space )		34427	0					
ANR	34498	IdentifierDeclType	const char *		34427	0					
ANR	34499	Identifier	class_name		34427	1					
ANR	34500	AssignmentExpression	* class_name = get_active_class_name ( & space )		34427	2		=			
ANR	34501	Identifier	class_name		34427	0					
ANR	34502	CallExpression	get_active_class_name ( & space )		34427	1					
ANR	34503	Callee	get_active_class_name		34427	0					
ANR	34504	Identifier	get_active_class_name		34427	0					
ANR	34505	ArgumentList	& space		34427	1					
ANR	34506	Argument	& space		34427	0					
ANR	34507	UnaryOperationExpression	& space		34427	0					
ANR	34508	UnaryOperator	&		34427	0					
ANR	34509	Identifier	space		34427	1					
ANR	34510	IdentifierDeclStatement	zend_bool throw_exception = ZEND_ARG_USES_STRICT_TYPES ( ) || ( flags & ZEND_PARSE_PARAMS_THROW ) ;	759:3:19098:19195	34427	2	True				
ANR	34511	IdentifierDecl	throw_exception = ZEND_ARG_USES_STRICT_TYPES ( ) || ( flags & ZEND_PARSE_PARAMS_THROW )		34427	0					
ANR	34512	IdentifierDeclType	zend_bool		34427	0					
ANR	34513	Identifier	throw_exception		34427	1					
ANR	34514	AssignmentExpression	throw_exception = ZEND_ARG_USES_STRICT_TYPES ( ) || ( flags & ZEND_PARSE_PARAMS_THROW )		34427	2		=			
ANR	34515	Identifier	throw_exception		34427	0					
ANR	34516	OrExpression	ZEND_ARG_USES_STRICT_TYPES ( ) || ( flags & ZEND_PARSE_PARAMS_THROW )		34427	1		||			
ANR	34517	CallExpression	ZEND_ARG_USES_STRICT_TYPES ( )		34427	0					
ANR	34518	Callee	ZEND_ARG_USES_STRICT_TYPES		34427	0					
ANR	34519	Identifier	ZEND_ARG_USES_STRICT_TYPES		34427	0					
ANR	34520	ArgumentList			34427	1					
ANR	34521	BitAndExpression	flags & ZEND_PARSE_PARAMS_THROW		34427	1		&			
ANR	34522	Identifier	flags		34427	0					
ANR	34523	Identifier	ZEND_PARSE_PARAMS_THROW		34427	1					
ANR	34524	IfStatement	if ( error )		34427	3					
ANR	34525	Condition	error	762:7:19205:19209	34427	0	True				
ANR	34526	Identifier	error		34427	0					
ANR	34527	CompoundStatement		14:14:451:451	34427	1					
ANR	34528	ExpressionStatement	"zend_internal_type_error ( throw_exception , ""%s%s%s() expects parameter %d %s"" , class_name , space , get_active_function_name ( ) , arg_num , error )"	763:4:19218:19364	34427	0	True				
ANR	34529	CallExpression	"zend_internal_type_error ( throw_exception , ""%s%s%s() expects parameter %d %s"" , class_name , space , get_active_function_name ( ) , arg_num , error )"		34427	0					
ANR	34530	Callee	zend_internal_type_error		34427	0					
ANR	34531	Identifier	zend_internal_type_error		34427	0					
ANR	34532	ArgumentList	throw_exception		34427	1					
ANR	34533	Argument	throw_exception		34427	0					
ANR	34534	Identifier	throw_exception		34427	0					
ANR	34535	Argument	"""%s%s%s() expects parameter %d %s"""		34427	1					
ANR	34536	PrimaryExpression	"""%s%s%s() expects parameter %d %s"""		34427	0					
ANR	34537	Argument	class_name		34427	2					
ANR	34538	Identifier	class_name		34427	0					
ANR	34539	Argument	space		34427	3					
ANR	34540	Identifier	space		34427	0					
ANR	34541	Argument	get_active_function_name ( )		34427	4					
ANR	34542	CallExpression	get_active_function_name ( )		34427	0					
ANR	34543	Callee	get_active_function_name		34427	0					
ANR	34544	Identifier	get_active_function_name		34427	0					
ANR	34545	ArgumentList			34427	1					
ANR	34546	Argument	arg_num		34427	5					
ANR	34547	Identifier	arg_num		34427	0					
ANR	34548	Argument	error		34427	6					
ANR	34549	Identifier	error		34427	0					
ANR	34550	ExpressionStatement	efree ( error )	765:4:19370:19382	34427	1	True				
ANR	34551	CallExpression	efree ( error )		34427	0					
ANR	34552	Callee	efree		34427	0					
ANR	34553	Identifier	efree		34427	0					
ANR	34554	ArgumentList	error		34427	1					
ANR	34555	Argument	error		34427	0					
ANR	34556	Identifier	error		34427	0					
ANR	34557	ElseStatement	else		34427	0					
ANR	34558	CompoundStatement		18:10:633:633	34427	0					
ANR	34559	ExpressionStatement	"zend_internal_type_error ( throw_exception , ""%s%s%s() expects parameter %d to be %s, %s given"" , class_name , space , get_active_function_name ( ) , arg_num , expected_type , zend_zval_type_name ( arg ) )"	767:4:19400:19608	34427	0	True				
ANR	34560	CallExpression	"zend_internal_type_error ( throw_exception , ""%s%s%s() expects parameter %d to be %s, %s given"" , class_name , space , get_active_function_name ( ) , arg_num , expected_type , zend_zval_type_name ( arg ) )"		34427	0					
ANR	34561	Callee	zend_internal_type_error		34427	0					
ANR	34562	Identifier	zend_internal_type_error		34427	0					
ANR	34563	ArgumentList	throw_exception		34427	1					
ANR	34564	Argument	throw_exception		34427	0					
ANR	34565	Identifier	throw_exception		34427	0					
ANR	34566	Argument	"""%s%s%s() expects parameter %d to be %s, %s given"""		34427	1					
ANR	34567	PrimaryExpression	"""%s%s%s() expects parameter %d to be %s, %s given"""		34427	0					
ANR	34568	Argument	class_name		34427	2					
ANR	34569	Identifier	class_name		34427	0					
ANR	34570	Argument	space		34427	3					
ANR	34571	Identifier	space		34427	0					
ANR	34572	Argument	get_active_function_name ( )		34427	4					
ANR	34573	CallExpression	get_active_function_name ( )		34427	0					
ANR	34574	Callee	get_active_function_name		34427	0					
ANR	34575	Identifier	get_active_function_name		34427	0					
ANR	34576	ArgumentList			34427	1					
ANR	34577	Argument	arg_num		34427	5					
ANR	34578	Identifier	arg_num		34427	0					
ANR	34579	Argument	expected_type		34427	6					
ANR	34580	Identifier	expected_type		34427	0					
ANR	34581	Argument	zend_zval_type_name ( arg )		34427	7					
ANR	34582	CallExpression	zend_zval_type_name ( arg )		34427	0					
ANR	34583	Callee	zend_zval_type_name		34427	0					
ANR	34584	Identifier	zend_zval_type_name		34427	0					
ANR	34585	ArgumentList	arg		34427	1					
ANR	34586	Argument	arg		34427	0					
ANR	34587	Identifier	arg		34427	0					
ANR	34588	IfStatement	if ( severity != E_DEPRECATED )		34427	1					
ANR	34589	Condition	severity != E_DEPRECATED	773:6:19625:19648	34427	0	True				
ANR	34590	EqualityExpression	severity != E_DEPRECATED		34427	0		!=			
ANR	34591	Identifier	severity		34427	0					
ANR	34592	Identifier	E_DEPRECATED		34427	1					
ANR	34593	CompoundStatement		25:32:890:890	34427	1					
ANR	34594	ReturnStatement	return FAILURE ;	774:3:19656:19670	34427	0	True				
ANR	34595	Identifier	FAILURE		34427	0					
ANR	34596	ReturnStatement	return SUCCESS ;	778:1:19681:19695	34427	5	True				
ANR	34597	Identifier	SUCCESS		34427	0					
ANR	34598	ReturnType	static int		34427	1					
ANR	34599	Identifier	zend_parse_arg		34427	2					
ANR	34600	ParameterList	"int arg_num , zval * arg , va_list * va , const char * * spec , int flags"		34427	3					
ANR	34601	Parameter	int arg_num	748:26:18683:18693	34427	0	True				
ANR	34602	ParameterType	int		34427	0					
ANR	34603	Identifier	arg_num		34427	1					
ANR	34604	Parameter	zval * arg	748:39:18696:18704	34427	1	True				
ANR	34605	ParameterType	zval *		34427	0					
ANR	34606	Identifier	arg		34427	1					
ANR	34607	Parameter	va_list * va	748:50:18707:18717	34427	2	True				
ANR	34608	ParameterType	va_list *		34427	0					
ANR	34609	Identifier	va		34427	1					
ANR	34610	Parameter	const char * * spec	748:63:18720:18736	34427	3	True				
ANR	34611	ParameterType	const char * *		34427	0					
ANR	34612	Identifier	spec		34427	1					
ANR	34613	Parameter	int flags	748:82:18739:18747	34427	4	True				
ANR	34614	ParameterType	int		34427	0					
ANR	34615	Identifier	flags		34427	1					
ANR	34616	CFGEntryNode	ENTRY		34427		True				
ANR	34617	CFGExitNode	EXIT		34427		True				
ANR	34618	Symbol	arg_num		34427						
ANR	34619	Symbol	& error		34427						
ANR	34620	Symbol	zend_parse_arg_impl		34427						
ANR	34621	Symbol	flags		34427						
ANR	34622	Symbol	expected_type		34427						
ANR	34623	Symbol	* expected_type		34427						
ANR	34624	Symbol	error		34427						
ANR	34625	Symbol	get_active_class_name		34427						
ANR	34626	Symbol	zend_zval_type_name		34427						
ANR	34627	Symbol	spec		34427						
ANR	34628	Symbol	space		34427						
ANR	34629	Symbol	ZEND_PARSE_PARAMS_THROW		34427						
ANR	34630	Symbol	arg		34427						
ANR	34631	Symbol	& space		34427						
ANR	34632	Symbol	class_name		34427						
ANR	34633	Symbol	severity		34427						
ANR	34634	Symbol	ZEND_ARG_USES_STRICT_TYPES		34427						
ANR	34635	Symbol	NULL		34427						
ANR	34636	Symbol	SUCCESS		34427						
ANR	34637	Symbol	& severity		34427						
ANR	34638	Symbol	get_active_function_name		34427						
ANR	34639	Symbol	va		34427						
ANR	34640	Symbol	FAILURE		34427						
ANR	34641	Symbol	throw_exception		34427						
ANR	34642	Symbol	E_DEPRECATED		34427						
ANR	34643	Symbol	ZEND_PARSE_PARAMS_QUIET		34427						
ANR	34644	Function	zend_parse_parameter	782:0:19710:19932							
ANR	34645	FunctionDef	"zend_parse_parameter (int flags , int arg_num , zval * arg , const char * spec)"		34644	0					
ANR	34646	CompoundStatement		783:0:19802:19932	34644	0					
ANR	34647	IdentifierDeclStatement	va_list va ;	784:1:19805:19815	34644	0	True				
ANR	34648	IdentifierDecl	va		34644	0					
ANR	34649	IdentifierDeclType	va_list		34644	0					
ANR	34650	Identifier	va		34644	1					
ANR	34651	IdentifierDeclStatement	int ret ;	785:1:19818:19825	34644	1	True				
ANR	34652	IdentifierDecl	ret		34644	0					
ANR	34653	IdentifierDeclType	int		34644	0					
ANR	34654	Identifier	ret		34644	1					
ANR	34655	ExpressionStatement	"va_start ( va , spec )"	787:1:19829:19847	34644	2	True				
ANR	34656	CallExpression	"va_start ( va , spec )"		34644	0					
ANR	34657	Callee	va_start		34644	0					
ANR	34658	Identifier	va_start		34644	0					
ANR	34659	ArgumentList	va		34644	1					
ANR	34660	Argument	va		34644	0					
ANR	34661	Identifier	va		34644	0					
ANR	34662	Argument	spec		34644	1					
ANR	34663	Identifier	spec		34644	0					
ANR	34664	ExpressionStatement	"ret = zend_parse_arg ( arg_num , arg , & va , & spec , flags )"	788:1:19850:19903	34644	3	True				
ANR	34665	AssignmentExpression	"ret = zend_parse_arg ( arg_num , arg , & va , & spec , flags )"		34644	0		=			
ANR	34666	Identifier	ret		34644	0					
ANR	34667	CallExpression	"zend_parse_arg ( arg_num , arg , & va , & spec , flags )"		34644	1					
ANR	34668	Callee	zend_parse_arg		34644	0					
ANR	34669	Identifier	zend_parse_arg		34644	0					
ANR	34670	ArgumentList	arg_num		34644	1					
ANR	34671	Argument	arg_num		34644	0					
ANR	34672	Identifier	arg_num		34644	0					
ANR	34673	Argument	arg		34644	1					
ANR	34674	Identifier	arg		34644	0					
ANR	34675	Argument	& va		34644	2					
ANR	34676	UnaryOperationExpression	& va		34644	0					
ANR	34677	UnaryOperator	&		34644	0					
ANR	34678	Identifier	va		34644	1					
ANR	34679	Argument	& spec		34644	3					
ANR	34680	UnaryOperationExpression	& spec		34644	0					
ANR	34681	UnaryOperator	&		34644	0					
ANR	34682	Identifier	spec		34644	1					
ANR	34683	Argument	flags		34644	4					
ANR	34684	Identifier	flags		34644	0					
ANR	34685	ExpressionStatement	va_end ( va )	789:1:19906:19916	34644	4	True				
ANR	34686	CallExpression	va_end ( va )		34644	0					
ANR	34687	Callee	va_end		34644	0					
ANR	34688	Identifier	va_end		34644	0					
ANR	34689	ArgumentList	va		34644	1					
ANR	34690	Argument	va		34644	0					
ANR	34691	Identifier	va		34644	0					
ANR	34692	ReturnStatement	return ret ;	791:1:19920:19930	34644	5	True				
ANR	34693	Identifier	ret		34644	0					
ANR	34694	ReturnType	ZEND_API int		34644	1					
ANR	34695	Identifier	zend_parse_parameter		34644	2					
ANR	34696	ParameterList	"int flags , int arg_num , zval * arg , const char * spec"		34644	3					
ANR	34697	Parameter	int flags	782:34:19744:19752	34644	0	True				
ANR	34698	ParameterType	int		34644	0					
ANR	34699	Identifier	flags		34644	1					
ANR	34700	Parameter	int arg_num	782:45:19755:19765	34644	1	True				
ANR	34701	ParameterType	int		34644	0					
ANR	34702	Identifier	arg_num		34644	1					
ANR	34703	Parameter	zval * arg	782:58:19768:19776	34644	2	True				
ANR	34704	ParameterType	zval *		34644	0					
ANR	34705	Identifier	arg		34644	1					
ANR	34706	Parameter	const char * spec	782:69:19779:19794	34644	3	True				
ANR	34707	ParameterType	const char *		34644	0					
ANR	34708	Identifier	spec		34644	1					
ANR	34709	CFGEntryNode	ENTRY		34644		True				
ANR	34710	CFGExitNode	EXIT		34644		True				
ANR	34711	Symbol	arg_num		34644						
ANR	34712	Symbol	ret		34644						
ANR	34713	Symbol	& va		34644						
ANR	34714	Symbol	& spec		34644						
ANR	34715	Symbol	arg		34644						
ANR	34716	Symbol	flags		34644						
ANR	34717	Symbol	va		34644						
ANR	34718	Symbol	zend_parse_arg		34644						
ANR	34719	Symbol	spec		34644						
ANR	34720	Function	zend_parse_parameters_debug_error	794:0:19935:20337							
ANR	34721	FunctionDef	zend_parse_parameters_debug_error (const char * msg)		34720	0					
ANR	34722	CompoundStatement		794:73:20008:20337	34720	0					
ANR	34723	IdentifierDeclStatement	zend_function * active_function = EG ( current_execute_data ) -> func ;	795:1:20011:20074	34720	0	True				
ANR	34724	IdentifierDecl	* active_function = EG ( current_execute_data ) -> func		34720	0					
ANR	34725	IdentifierDeclType	zend_function *		34720	0					
ANR	34726	Identifier	active_function		34720	1					
ANR	34727	AssignmentExpression	* active_function = EG ( current_execute_data ) -> func		34720	2		=			
ANR	34728	Identifier	active_function		34720	0					
ANR	34729	PtrMemberAccess	EG ( current_execute_data ) -> func		34720	1					
ANR	34730	CallExpression	EG ( current_execute_data )		34720	0					
ANR	34731	Callee	EG		34720	0					
ANR	34732	Identifier	EG		34720	0					
ANR	34733	ArgumentList	current_execute_data		34720	1					
ANR	34734	Argument	current_execute_data		34720	0					
ANR	34735	Identifier	current_execute_data		34720	0					
ANR	34736	Identifier	func		34720	1					
ANR	34737	IdentifierDeclStatement	"const char * class_name = active_function -> common . scope ? ZSTR_VAL ( active_function -> common . scope -> name ) : """" ;"	796:1:20077:20186	34720	1	True				
ANR	34738	IdentifierDecl	"* class_name = active_function -> common . scope ? ZSTR_VAL ( active_function -> common . scope -> name ) : """""		34720	0					
ANR	34739	IdentifierDeclType	const char *		34720	0					
ANR	34740	Identifier	class_name		34720	1					
ANR	34741	AssignmentExpression	"* class_name = active_function -> common . scope ? ZSTR_VAL ( active_function -> common . scope -> name ) : """""		34720	2		=			
ANR	34742	Identifier	class_name		34720	0					
ANR	34743	ConditionalExpression	"active_function -> common . scope ? ZSTR_VAL ( active_function -> common . scope -> name ) : """""		34720	1					
ANR	34744	Condition	active_function -> common . scope		34720	0					
ANR	34745	MemberAccess	active_function -> common . scope		34720	0					
ANR	34746	PtrMemberAccess	active_function -> common		34720	0					
ANR	34747	Identifier	active_function		34720	0					
ANR	34748	Identifier	common		34720	1					
ANR	34749	Identifier	scope		34720	1					
ANR	34750	CallExpression	ZSTR_VAL ( active_function -> common . scope -> name )		34720	1					
ANR	34751	Callee	ZSTR_VAL		34720	0					
ANR	34752	Identifier	ZSTR_VAL		34720	0					
ANR	34753	ArgumentList	active_function -> common . scope -> name		34720	1					
ANR	34754	Argument	active_function -> common . scope -> name		34720	0					
ANR	34755	PtrMemberAccess	active_function -> common . scope -> name		34720	0					
ANR	34756	MemberAccess	active_function -> common . scope		34720	0					
ANR	34757	PtrMemberAccess	active_function -> common		34720	0					
ANR	34758	Identifier	active_function		34720	0					
ANR	34759	Identifier	common		34720	1					
ANR	34760	Identifier	scope		34720	1					
ANR	34761	Identifier	name		34720	1					
ANR	34762	PrimaryExpression	""""""		34720	2					
ANR	34763	ExpressionStatement	"zend_error_noreturn ( E_CORE_ERROR , ""%s%s%s(): %s"" , class_name , class_name [ 0 ] ? ""::"" : """" , ZSTR_VAL ( active_function -> common . function_name ) , msg )"	798:1:20189:20335	34720	2	True				
ANR	34764	CallExpression	"zend_error_noreturn ( E_CORE_ERROR , ""%s%s%s(): %s"" , class_name , class_name [ 0 ] ? ""::"" : """" , ZSTR_VAL ( active_function -> common . function_name ) , msg )"		34720	0					
ANR	34765	Callee	zend_error_noreturn		34720	0					
ANR	34766	Identifier	zend_error_noreturn		34720	0					
ANR	34767	ArgumentList	E_CORE_ERROR		34720	1					
ANR	34768	Argument	E_CORE_ERROR		34720	0					
ANR	34769	Identifier	E_CORE_ERROR		34720	0					
ANR	34770	Argument	"""%s%s%s(): %s"""		34720	1					
ANR	34771	PrimaryExpression	"""%s%s%s(): %s"""		34720	0					
ANR	34772	Argument	class_name		34720	2					
ANR	34773	Identifier	class_name		34720	0					
ANR	34774	Argument	"class_name [ 0 ] ? ""::"" : """""		34720	3					
ANR	34775	ConditionalExpression	"class_name [ 0 ] ? ""::"" : """""		34720	0					
ANR	34776	Condition	class_name [ 0 ]		34720	0					
ANR	34777	ArrayIndexing	class_name [ 0 ]		34720	0					
ANR	34778	Identifier	class_name		34720	0					
ANR	34779	PrimaryExpression	0		34720	1					
ANR	34780	PrimaryExpression	"""::"""		34720	1					
ANR	34781	PrimaryExpression	""""""		34720	2					
ANR	34782	Argument	ZSTR_VAL ( active_function -> common . function_name )		34720	4					
ANR	34783	CallExpression	ZSTR_VAL ( active_function -> common . function_name )		34720	0					
ANR	34784	Callee	ZSTR_VAL		34720	0					
ANR	34785	Identifier	ZSTR_VAL		34720	0					
ANR	34786	ArgumentList	active_function -> common . function_name		34720	1					
ANR	34787	Argument	active_function -> common . function_name		34720	0					
ANR	34788	MemberAccess	active_function -> common . function_name		34720	0					
ANR	34789	PtrMemberAccess	active_function -> common		34720	0					
ANR	34790	Identifier	active_function		34720	0					
ANR	34791	Identifier	common		34720	1					
ANR	34792	Identifier	function_name		34720	1					
ANR	34793	Argument	msg		34720	5					
ANR	34794	Identifier	msg		34720	0					
ANR	34795	ReturnType	static ZEND_COLD void		34720	1					
ANR	34796	Identifier	zend_parse_parameters_debug_error		34720	2					
ANR	34797	ParameterList	const char * msg		34720	3					
ANR	34798	Parameter	const char * msg	794:56:19991:20005	34720	0	True				
ANR	34799	ParameterType	const char *		34720	0					
ANR	34800	Identifier	msg		34720	1					
ANR	34801	CFGEntryNode	ENTRY		34720		True				
ANR	34802	CFGExitNode	EXIT		34720		True				
ANR	34803	Symbol	msg		34720						
ANR	34804	Symbol	EG		34720						
ANR	34805	Symbol	* * active_function		34720						
ANR	34806	Symbol	* class_name		34720						
ANR	34807	Symbol	active_function -> common . scope -> name		34720						
ANR	34808	Symbol	EG ( current_execute_data ) -> func		34720						
ANR	34809	Symbol	active_function -> common . function_name		34720						
ANR	34810	Symbol	current_execute_data		34720						
ANR	34811	Symbol	* EG		34720						
ANR	34812	Symbol	* active_function -> common		34720						
ANR	34813	Symbol	active_function -> common		34720						
ANR	34814	Symbol	active_function		34720						
ANR	34815	Symbol	* active_function		34720						
ANR	34816	Symbol	active_function -> common . scope		34720						
ANR	34817	Symbol	ZSTR_VAL		34720						
ANR	34818	Symbol	E_CORE_ERROR		34720						
ANR	34819	Symbol	* active_function -> common . scope		34720						
ANR	34820	Symbol	class_name		34720						
ANR	34821	Function	zend_parse_va_args	803:0:20340:23856							
ANR	34822	FunctionDef	"zend_parse_va_args (int num_args , const char * type_spec , va_list * va , int flags)"		34821	0					
ANR	34823	CompoundStatement		804:0:20441:23856	34821	0					
ANR	34824	IdentifierDeclStatement	const char * spec_walk ;	805:1:20444:20466	34821	0	True				
ANR	34825	IdentifierDecl	* spec_walk		34821	0					
ANR	34826	IdentifierDeclType	const char *		34821	0					
ANR	34827	Identifier	spec_walk		34821	1					
ANR	34828	IdentifierDeclStatement	"int c , i ;"	806:1:20469:20477	34821	1	True				
ANR	34829	IdentifierDecl	c		34821	0					
ANR	34830	IdentifierDeclType	int		34821	0					
ANR	34831	Identifier	c		34821	1					
ANR	34832	IdentifierDecl	i		34821	1					
ANR	34833	IdentifierDeclType	int		34821	0					
ANR	34834	Identifier	i		34821	1					
ANR	34835	IdentifierDeclStatement	int min_num_args = - 1 ;	807:1:20480:20501	34821	2	True				
ANR	34836	IdentifierDecl	min_num_args = - 1		34821	0					
ANR	34837	IdentifierDeclType	int		34821	0					
ANR	34838	Identifier	min_num_args		34821	1					
ANR	34839	AssignmentExpression	min_num_args = - 1		34821	2		=			
ANR	34840	Identifier	min_num_args		34821	0					
ANR	34841	UnaryOperationExpression	- 1		34821	1					
ANR	34842	UnaryOperator	-		34821	0					
ANR	34843	PrimaryExpression	1		34821	1					
ANR	34844	IdentifierDeclStatement	int max_num_args = 0 ;	808:1:20504:20524	34821	3	True				
ANR	34845	IdentifierDecl	max_num_args = 0		34821	0					
ANR	34846	IdentifierDeclType	int		34821	0					
ANR	34847	Identifier	max_num_args		34821	1					
ANR	34848	AssignmentExpression	max_num_args = 0		34821	2		=			
ANR	34849	Identifier	max_num_args		34821	0					
ANR	34850	PrimaryExpression	0		34821	1					
ANR	34851	IdentifierDeclStatement	int post_varargs = 0 ;	809:1:20527:20547	34821	4	True				
ANR	34852	IdentifierDecl	post_varargs = 0		34821	0					
ANR	34853	IdentifierDeclType	int		34821	0					
ANR	34854	Identifier	post_varargs		34821	1					
ANR	34855	AssignmentExpression	post_varargs = 0		34821	2		=			
ANR	34856	Identifier	post_varargs		34821	0					
ANR	34857	PrimaryExpression	0		34821	1					
ANR	34858	IdentifierDeclStatement	zval * arg ;	810:1:20550:20559	34821	5	True				
ANR	34859	IdentifierDecl	* arg		34821	0					
ANR	34860	IdentifierDeclType	zval *		34821	0					
ANR	34861	Identifier	arg		34821	1					
ANR	34862	IdentifierDeclStatement	int arg_count ;	811:1:20562:20575	34821	6	True				
ANR	34863	IdentifierDecl	arg_count		34821	0					
ANR	34864	IdentifierDeclType	int		34821	0					
ANR	34865	Identifier	arg_count		34821	1					
ANR	34866	IdentifierDeclStatement	zend_bool have_varargs = 0 ;	812:1:20578:20604	34821	7	True				
ANR	34867	IdentifierDecl	have_varargs = 0		34821	0					
ANR	34868	IdentifierDeclType	zend_bool		34821	0					
ANR	34869	Identifier	have_varargs		34821	1					
ANR	34870	AssignmentExpression	have_varargs = 0		34821	2		=			
ANR	34871	Identifier	have_varargs		34821	0					
ANR	34872	PrimaryExpression	0		34821	1					
ANR	34873	IdentifierDeclStatement	zval * * varargs = NULL ;	813:1:20607:20628	34821	8	True				
ANR	34874	IdentifierDecl	* * varargs = NULL		34821	0					
ANR	34875	IdentifierDeclType	zval * *		34821	0					
ANR	34876	Identifier	varargs		34821	1					
ANR	34877	AssignmentExpression	* * varargs = NULL		34821	2		=			
ANR	34878	Identifier	NULL		34821	0					
ANR	34879	Identifier	NULL		34821	1					
ANR	34880	IdentifierDeclStatement	int * n_varargs = NULL ;	814:1:20631:20652	34821	9	True				
ANR	34881	IdentifierDecl	* n_varargs = NULL		34821	0					
ANR	34882	IdentifierDeclType	int *		34821	0					
ANR	34883	Identifier	n_varargs		34821	1					
ANR	34884	AssignmentExpression	* n_varargs = NULL		34821	2		=			
ANR	34885	Identifier	NULL		34821	0					
ANR	34886	Identifier	NULL		34821	1					
ANR	34887	ForStatement	for ( spec_walk = type_spec ; * spec_walk ; spec_walk ++ )		34821	10					
ANR	34888	ForInit	spec_walk = type_spec ;	816:6:20661:20682	34821	0	True				
ANR	34889	AssignmentExpression	spec_walk = type_spec		34821	0		=			
ANR	34890	Identifier	spec_walk		34821	0					
ANR	34891	Identifier	type_spec		34821	1					
ANR	34892	Condition	* spec_walk	816:29:20684:20693	34821	1	True				
ANR	34893	UnaryOperationExpression	* spec_walk		34821	0					
ANR	34894	UnaryOperator	*		34821	0					
ANR	34895	Identifier	spec_walk		34821	1					
ANR	34896	PostIncDecOperationExpression	spec_walk ++	816:41:20696:20706	34821	2	True				
ANR	34897	Identifier	spec_walk		34821	0					
ANR	34898	IncDec	++		34821	1					
ANR	34899	CompoundStatement		13:54:267:267	34821	3					
ANR	34900	ExpressionStatement	c = * spec_walk	817:2:20713:20727	34821	0	True				
ANR	34901	AssignmentExpression	c = * spec_walk		34821	0		=			
ANR	34902	Identifier	c		34821	0					
ANR	34903	UnaryOperationExpression	* spec_walk		34821	1					
ANR	34904	UnaryOperator	*		34821	0					
ANR	34905	Identifier	spec_walk		34821	1					
ANR	34906	SwitchStatement	switch ( c )		34821	1					
ANR	34907	Condition	c	818:10:20739:20739	34821	0	True				
ANR	34908	Identifier	c		34821	0					
ANR	34909	CompoundStatement		15:13:300:300	34821	1					
ANR	34910	Label	case 'l' :	819:3:20747:20755	34821	0	True				
ANR	34911	Label	case 'd' :	819:13:20757:20765	34821	1	True				
ANR	34912	Label	case 's' :	820:3:20770:20778	34821	2	True				
ANR	34913	Label	case 'b' :	820:13:20780:20788	34821	3	True				
ANR	34914	Label	case 'r' :	821:3:20793:20801	34821	4	True				
ANR	34915	Label	case 'a' :	821:13:20803:20811	34821	5	True				
ANR	34916	Label	case 'o' :	822:3:20816:20824	34821	6	True				
ANR	34917	Label	case 'O' :	822:13:20826:20834	34821	7	True				
ANR	34918	Label	case 'z' :	823:3:20839:20847	34821	8	True				
ANR	34919	Label	case 'Z' :	823:13:20849:20857	34821	9	True				
ANR	34920	Label	case 'C' :	824:3:20862:20870	34821	10	True				
ANR	34921	Label	case 'h' :	824:13:20872:20880	34821	11	True				
ANR	34922	Label	case 'f' :	825:3:20885:20893	34821	12	True				
ANR	34923	Label	case 'A' :	825:13:20895:20903	34821	13	True				
ANR	34924	Label	case 'H' :	826:3:20908:20916	34821	14	True				
ANR	34925	Label	case 'p' :	826:13:20918:20926	34821	15	True				
ANR	34926	Label	case 'S' :	827:3:20931:20939	34821	16	True				
ANR	34927	Label	case 'P' :	827:13:20941:20949	34821	17	True				
ANR	34928	Label	case 'L' :	828:3:20954:20962	34821	18	True				
ANR	34929	ExpressionStatement	max_num_args ++	829:4:20968:20982	34821	19	True				
ANR	34930	PostIncDecOperationExpression	max_num_args ++		34821	0					
ANR	34931	Identifier	max_num_args		34821	0					
ANR	34932	IncDec	++		34821	1					
ANR	34933	BreakStatement	break ;	830:4:20988:20993	34821	20	True				
ANR	34934	Label	case '|' :	832:3:20999:21007	34821	21	True				
ANR	34935	ExpressionStatement	min_num_args = max_num_args	833:4:21013:21040	34821	22	True				
ANR	34936	AssignmentExpression	min_num_args = max_num_args		34821	0		=			
ANR	34937	Identifier	min_num_args		34821	0					
ANR	34938	Identifier	max_num_args		34821	1					
ANR	34939	BreakStatement	break ;	834:4:21046:21051	34821	23	True				
ANR	34940	Label	case '/' :	836:3:21057:21065	34821	24	True				
ANR	34941	Label	case '!' :	837:3:21070:21078	34821	25	True				
ANR	34942	BreakStatement	break ;	839:4:21099:21104	34821	26	True				
ANR	34943	Label	case '*' :	841:3:21110:21118	34821	27	True				
ANR	34944	Label	case '+' :	842:3:21123:21131	34821	28	True				
ANR	34945	IfStatement	if ( have_varargs )		34821	29					
ANR	34946	Condition	have_varargs	843:8:21141:21152	34821	0	True				
ANR	34947	Identifier	have_varargs		34821	0					
ANR	34948	CompoundStatement		40:22:713:713	34821	1					
ANR	34949	ExpressionStatement	"zend_parse_parameters_debug_error ( ""only one varargs specifier (* or +) is permitted"" )"	844:5:21162:21254	34821	0	True				
ANR	34950	CallExpression	"zend_parse_parameters_debug_error ( ""only one varargs specifier (* or +) is permitted"" )"		34821	0					
ANR	34951	Callee	zend_parse_parameters_debug_error		34821	0					
ANR	34952	Identifier	zend_parse_parameters_debug_error		34821	0					
ANR	34953	ArgumentList	"""only one varargs specifier (* or +) is permitted"""		34821	1					
ANR	34954	Argument	"""only one varargs specifier (* or +) is permitted"""		34821	0					
ANR	34955	PrimaryExpression	"""only one varargs specifier (* or +) is permitted"""		34821	0					
ANR	34956	ReturnStatement	return FAILURE ;	846:5:21261:21275	34821	1	True				
ANR	34957	Identifier	FAILURE		34821	0					
ANR	34958	ExpressionStatement	have_varargs = 1	848:4:21287:21303	34821	30	True				
ANR	34959	AssignmentExpression	have_varargs = 1		34821	0		=			
ANR	34960	Identifier	have_varargs		34821	0					
ANR	34961	PrimaryExpression	1		34821	1					
ANR	34962	IfStatement	if ( c == '+' )		34821	31					
ANR	34963	Condition	c == '+'	850:8:21367:21374	34821	0	True				
ANR	34964	EqualityExpression	c == '+'		34821	0		==			
ANR	34965	Identifier	c		34821	0					
ANR	34966	PrimaryExpression	'+'		34821	1					
ANR	34967	CompoundStatement		47:18:935:935	34821	1					
ANR	34968	ExpressionStatement	max_num_args ++	851:5:21384:21398	34821	0	True				
ANR	34969	PostIncDecOperationExpression	max_num_args ++		34821	0					
ANR	34970	Identifier	max_num_args		34821	0					
ANR	34971	IncDec	++		34821	1					
ANR	34972	ExpressionStatement	post_varargs = max_num_args	854:4:21450:21477	34821	32	True				
ANR	34973	AssignmentExpression	post_varargs = max_num_args		34821	0		=			
ANR	34974	Identifier	post_varargs		34821	0					
ANR	34975	Identifier	max_num_args		34821	1					
ANR	34976	BreakStatement	break ;	855:4:21483:21488	34821	33	True				
ANR	34977	Label	default :	857:3:21494:21501	34821	34	True				
ANR	34978	Identifier	default		34821	0					
ANR	34979	ExpressionStatement	"zend_parse_parameters_debug_error ( ""bad type specifier while parsing parameters"" )"	858:4:21507:21587	34821	35	True				
ANR	34980	CallExpression	"zend_parse_parameters_debug_error ( ""bad type specifier while parsing parameters"" )"		34821	0					
ANR	34981	Callee	zend_parse_parameters_debug_error		34821	0					
ANR	34982	Identifier	zend_parse_parameters_debug_error		34821	0					
ANR	34983	ArgumentList	"""bad type specifier while parsing parameters"""		34821	1					
ANR	34984	Argument	"""bad type specifier while parsing parameters"""		34821	0					
ANR	34985	PrimaryExpression	"""bad type specifier while parsing parameters"""		34821	0					
ANR	34986	ReturnStatement	return FAILURE ;	859:4:21593:21607	34821	36	True				
ANR	34987	Identifier	FAILURE		34821	0					
ANR	34988	IfStatement	if ( min_num_args < 0 )		34821	11					
ANR	34989	Condition	min_num_args < 0	863:5:21622:21637	34821	0	True				
ANR	34990	RelationalExpression	min_num_args < 0		34821	0		<			
ANR	34991	Identifier	min_num_args		34821	0					
ANR	34992	PrimaryExpression	0		34821	1					
ANR	34993	CompoundStatement		60:23:1198:1198	34821	1					
ANR	34994	ExpressionStatement	min_num_args = max_num_args	864:2:21644:21671	34821	0	True				
ANR	34995	AssignmentExpression	min_num_args = max_num_args		34821	0		=			
ANR	34996	Identifier	min_num_args		34821	0					
ANR	34997	Identifier	max_num_args		34821	1					
ANR	34998	IfStatement	if ( have_varargs )		34821	12					
ANR	34999	Condition	have_varargs	867:5:21682:21693	34821	0	True				
ANR	35000	Identifier	have_varargs		34821	0					
ANR	35001	CompoundStatement		64:19:1254:1254	34821	1					
ANR	35002	ExpressionStatement	post_varargs = max_num_args - post_varargs	869:2:21778:21820	34821	0	True				
ANR	35003	AssignmentExpression	post_varargs = max_num_args - post_varargs		34821	0		=			
ANR	35004	Identifier	post_varargs		34821	0					
ANR	35005	AdditiveExpression	max_num_args - post_varargs		34821	1		-			
ANR	35006	Identifier	max_num_args		34821	0					
ANR	35007	Identifier	post_varargs		34821	1					
ANR	35008	ExpressionStatement	max_num_args = - 1	870:2:21824:21841	34821	1	True				
ANR	35009	AssignmentExpression	max_num_args = - 1		34821	0		=			
ANR	35010	Identifier	max_num_args		34821	0					
ANR	35011	UnaryOperationExpression	- 1		34821	1					
ANR	35012	UnaryOperator	-		34821	0					
ANR	35013	PrimaryExpression	1		34821	1					
ANR	35014	IfStatement	if ( num_args < min_num_args || ( num_args > max_num_args && max_num_args >= 0 ) )		34821	13					
ANR	35015	Condition	num_args < min_num_args || ( num_args > max_num_args && max_num_args >= 0 )	873:5:21852:21924	34821	0	True				
ANR	35016	OrExpression	num_args < min_num_args || ( num_args > max_num_args && max_num_args >= 0 )		34821	0		||			
ANR	35017	RelationalExpression	num_args < min_num_args		34821	0		<			
ANR	35018	Identifier	num_args		34821	0					
ANR	35019	Identifier	min_num_args		34821	1					
ANR	35020	AndExpression	num_args > max_num_args && max_num_args >= 0		34821	1		&&			
ANR	35021	RelationalExpression	num_args > max_num_args		34821	0		>			
ANR	35022	Identifier	num_args		34821	0					
ANR	35023	Identifier	max_num_args		34821	1					
ANR	35024	RelationalExpression	max_num_args >= 0		34821	1		>=			
ANR	35025	Identifier	max_num_args		34821	0					
ANR	35026	PrimaryExpression	0		34821	1					
ANR	35027	CompoundStatement		70:80:1485:1485	34821	1					
ANR	35028	IfStatement	if ( ! ( flags & ZEND_PARSE_PARAMS_QUIET ) )		34821	0					
ANR	35029	Condition	! ( flags & ZEND_PARSE_PARAMS_QUIET )	874:6:21935:21968	34821	0	True				
ANR	35030	UnaryOperationExpression	! ( flags & ZEND_PARSE_PARAMS_QUIET )		34821	0					
ANR	35031	UnaryOperator	!		34821	0					
ANR	35032	BitAndExpression	flags & ZEND_PARSE_PARAMS_QUIET		34821	1		&			
ANR	35033	Identifier	flags		34821	0					
ANR	35034	Identifier	ZEND_PARSE_PARAMS_QUIET		34821	1					
ANR	35035	CompoundStatement		74:3:1714:1807	34821	1					
ANR	35036	IdentifierDeclStatement	zend_function * active_function = EG ( current_execute_data ) -> func ;	875:3:21976:22039	34821	0	True				
ANR	35037	IdentifierDecl	* active_function = EG ( current_execute_data ) -> func		34821	0					
ANR	35038	IdentifierDeclType	zend_function *		34821	0					
ANR	35039	Identifier	active_function		34821	1					
ANR	35040	AssignmentExpression	* active_function = EG ( current_execute_data ) -> func		34821	2		=			
ANR	35041	Identifier	active_function		34821	0					
ANR	35042	PtrMemberAccess	EG ( current_execute_data ) -> func		34821	1					
ANR	35043	CallExpression	EG ( current_execute_data )		34821	0					
ANR	35044	Callee	EG		34821	0					
ANR	35045	Identifier	EG		34821	0					
ANR	35046	ArgumentList	current_execute_data		34821	1					
ANR	35047	Argument	current_execute_data		34821	0					
ANR	35048	Identifier	current_execute_data		34821	0					
ANR	35049	Identifier	func		34821	1					
ANR	35050	IdentifierDeclStatement	"const char * class_name = active_function -> common . scope ? ZSTR_VAL ( active_function -> common . scope -> name ) : """" ;"	876:3:22044:22151	34821	1	True				
ANR	35051	IdentifierDecl	"* class_name = active_function -> common . scope ? ZSTR_VAL ( active_function -> common . scope -> name ) : """""		34821	0					
ANR	35052	IdentifierDeclType	const char *		34821	0					
ANR	35053	Identifier	class_name		34821	1					
ANR	35054	AssignmentExpression	"* class_name = active_function -> common . scope ? ZSTR_VAL ( active_function -> common . scope -> name ) : """""		34821	2		=			
ANR	35055	Identifier	class_name		34821	0					
ANR	35056	ConditionalExpression	"active_function -> common . scope ? ZSTR_VAL ( active_function -> common . scope -> name ) : """""		34821	1					
ANR	35057	Condition	active_function -> common . scope		34821	0					
ANR	35058	MemberAccess	active_function -> common . scope		34821	0					
ANR	35059	PtrMemberAccess	active_function -> common		34821	0					
ANR	35060	Identifier	active_function		34821	0					
ANR	35061	Identifier	common		34821	1					
ANR	35062	Identifier	scope		34821	1					
ANR	35063	CallExpression	ZSTR_VAL ( active_function -> common . scope -> name )		34821	1					
ANR	35064	Callee	ZSTR_VAL		34821	0					
ANR	35065	Identifier	ZSTR_VAL		34821	0					
ANR	35066	ArgumentList	active_function -> common . scope -> name		34821	1					
ANR	35067	Argument	active_function -> common . scope -> name		34821	0					
ANR	35068	PtrMemberAccess	active_function -> common . scope -> name		34821	0					
ANR	35069	MemberAccess	active_function -> common . scope		34821	0					
ANR	35070	PtrMemberAccess	active_function -> common		34821	0					
ANR	35071	Identifier	active_function		34821	0					
ANR	35072	Identifier	common		34821	1					
ANR	35073	Identifier	scope		34821	1					
ANR	35074	Identifier	name		34821	1					
ANR	35075	PrimaryExpression	""""""		34821	2					
ANR	35076	IdentifierDeclStatement	zend_bool throw_exception = ZEND_ARG_USES_STRICT_TYPES ( ) || ( flags & ZEND_PARSE_PARAMS_THROW ) ;	877:3:22156:22249	34821	2	True				
ANR	35077	IdentifierDecl	throw_exception = ZEND_ARG_USES_STRICT_TYPES ( ) || ( flags & ZEND_PARSE_PARAMS_THROW )		34821	0					
ANR	35078	IdentifierDeclType	zend_bool		34821	0					
ANR	35079	Identifier	throw_exception		34821	1					
ANR	35080	AssignmentExpression	throw_exception = ZEND_ARG_USES_STRICT_TYPES ( ) || ( flags & ZEND_PARSE_PARAMS_THROW )		34821	2		=			
ANR	35081	Identifier	throw_exception		34821	0					
ANR	35082	OrExpression	ZEND_ARG_USES_STRICT_TYPES ( ) || ( flags & ZEND_PARSE_PARAMS_THROW )		34821	1		||			
ANR	35083	CallExpression	ZEND_ARG_USES_STRICT_TYPES ( )		34821	0					
ANR	35084	Callee	ZEND_ARG_USES_STRICT_TYPES		34821	0					
ANR	35085	Identifier	ZEND_ARG_USES_STRICT_TYPES		34821	0					
ANR	35086	ArgumentList			34821	1					
ANR	35087	BitAndExpression	flags & ZEND_PARSE_PARAMS_THROW		34821	1		&			
ANR	35088	Identifier	flags		34821	0					
ANR	35089	Identifier	ZEND_PARSE_PARAMS_THROW		34821	1					
ANR	35090	ExpressionStatement	"zend_internal_type_error ( throw_exception , ""%s%s%s() expects %s %d parameter%s, %d given"" , class_name , class_name [ 0 ] ? ""::"" : """" , ZSTR_VAL ( active_function -> common . function_name ) , min_num_args == max_num_args ? ""exactly"" : num_args < min_num_args ? ""at least"" : ""at most"" , num_args < min_num_args ? min_num_args : max_num_args , ( num_args < min_num_args ? min_num_args : max_num_args ) == 1 ? """" : ""s"" , num_args )"	878:3:22254:22697	34821	3	True				
ANR	35091	CallExpression	"zend_internal_type_error ( throw_exception , ""%s%s%s() expects %s %d parameter%s, %d given"" , class_name , class_name [ 0 ] ? ""::"" : """" , ZSTR_VAL ( active_function -> common . function_name ) , min_num_args == max_num_args ? ""exactly"" : num_args < min_num_args ? ""at least"" : ""at most"" , num_args < min_num_args ? min_num_args : max_num_args , ( num_args < min_num_args ? min_num_args : max_num_args ) == 1 ? """" : ""s"" , num_args )"		34821	0					
ANR	35092	Callee	zend_internal_type_error		34821	0					
ANR	35093	Identifier	zend_internal_type_error		34821	0					
ANR	35094	ArgumentList	throw_exception		34821	1					
ANR	35095	Argument	throw_exception		34821	0					
ANR	35096	Identifier	throw_exception		34821	0					
ANR	35097	Argument	"""%s%s%s() expects %s %d parameter%s, %d given"""		34821	1					
ANR	35098	PrimaryExpression	"""%s%s%s() expects %s %d parameter%s, %d given"""		34821	0					
ANR	35099	Argument	class_name		34821	2					
ANR	35100	Identifier	class_name		34821	0					
ANR	35101	Argument	"class_name [ 0 ] ? ""::"" : """""		34821	3					
ANR	35102	ConditionalExpression	"class_name [ 0 ] ? ""::"" : """""		34821	0					
ANR	35103	Condition	class_name [ 0 ]		34821	0					
ANR	35104	ArrayIndexing	class_name [ 0 ]		34821	0					
ANR	35105	Identifier	class_name		34821	0					
ANR	35106	PrimaryExpression	0		34821	1					
ANR	35107	PrimaryExpression	"""::"""		34821	1					
ANR	35108	PrimaryExpression	""""""		34821	2					
ANR	35109	Argument	ZSTR_VAL ( active_function -> common . function_name )		34821	4					
ANR	35110	CallExpression	ZSTR_VAL ( active_function -> common . function_name )		34821	0					
ANR	35111	Callee	ZSTR_VAL		34821	0					
ANR	35112	Identifier	ZSTR_VAL		34821	0					
ANR	35113	ArgumentList	active_function -> common . function_name		34821	1					
ANR	35114	Argument	active_function -> common . function_name		34821	0					
ANR	35115	MemberAccess	active_function -> common . function_name		34821	0					
ANR	35116	PtrMemberAccess	active_function -> common		34821	0					
ANR	35117	Identifier	active_function		34821	0					
ANR	35118	Identifier	common		34821	1					
ANR	35119	Identifier	function_name		34821	1					
ANR	35120	Argument	"min_num_args == max_num_args ? ""exactly"" : num_args < min_num_args ? ""at least"" : ""at most"""		34821	5					
ANR	35121	ConditionalExpression	"min_num_args == max_num_args ? ""exactly"" : num_args < min_num_args ? ""at least"" : ""at most"""		34821	0					
ANR	35122	Condition	min_num_args == max_num_args		34821	0					
ANR	35123	EqualityExpression	min_num_args == max_num_args		34821	0		==			
ANR	35124	Identifier	min_num_args		34821	0					
ANR	35125	Identifier	max_num_args		34821	1					
ANR	35126	PrimaryExpression	"""exactly"""		34821	1					
ANR	35127	ConditionalExpression	"num_args < min_num_args ? ""at least"" : ""at most"""		34821	2					
ANR	35128	Condition	num_args < min_num_args		34821	0					
ANR	35129	RelationalExpression	num_args < min_num_args		34821	0		<			
ANR	35130	Identifier	num_args		34821	0					
ANR	35131	Identifier	min_num_args		34821	1					
ANR	35132	PrimaryExpression	"""at least"""		34821	1					
ANR	35133	PrimaryExpression	"""at most"""		34821	2					
ANR	35134	Argument	num_args < min_num_args ? min_num_args : max_num_args		34821	6					
ANR	35135	ConditionalExpression	num_args < min_num_args ? min_num_args : max_num_args		34821	0					
ANR	35136	Condition	num_args < min_num_args		34821	0					
ANR	35137	RelationalExpression	num_args < min_num_args		34821	0		<			
ANR	35138	Identifier	num_args		34821	0					
ANR	35139	Identifier	min_num_args		34821	1					
ANR	35140	Identifier	min_num_args		34821	1					
ANR	35141	Identifier	max_num_args		34821	2					
ANR	35142	Argument	"( num_args < min_num_args ? min_num_args : max_num_args ) == 1 ? """" : ""s"""		34821	7					
ANR	35143	ConditionalExpression	"( num_args < min_num_args ? min_num_args : max_num_args ) == 1 ? """" : ""s"""		34821	0					
ANR	35144	Condition	( num_args < min_num_args ? min_num_args : max_num_args ) == 1		34821	0					
ANR	35145	EqualityExpression	( num_args < min_num_args ? min_num_args : max_num_args ) == 1		34821	0		==			
ANR	35146	ConditionalExpression	num_args < min_num_args ? min_num_args : max_num_args		34821	0					
ANR	35147	Condition	num_args < min_num_args		34821	0					
ANR	35148	RelationalExpression	num_args < min_num_args		34821	0		<			
ANR	35149	Identifier	num_args		34821	0					
ANR	35150	Identifier	min_num_args		34821	1					
ANR	35151	Identifier	min_num_args		34821	1					
ANR	35152	Identifier	max_num_args		34821	2					
ANR	35153	PrimaryExpression	1		34821	1					
ANR	35154	PrimaryExpression	""""""		34821	1					
ANR	35155	PrimaryExpression	"""s"""		34821	2					
ANR	35156	Argument	num_args		34821	8					
ANR	35157	Identifier	num_args		34821	0					
ANR	35158	ReturnStatement	return FAILURE ;	887:2:22705:22719	34821	1	True				
ANR	35159	Identifier	FAILURE		34821	0					
ANR	35160	ExpressionStatement	arg_count = ZEND_CALL_NUM_ARGS ( EG ( current_execute_data ) )	890:1:22726:22782	34821	14	True				
ANR	35161	AssignmentExpression	arg_count = ZEND_CALL_NUM_ARGS ( EG ( current_execute_data ) )		34821	0		=			
ANR	35162	Identifier	arg_count		34821	0					
ANR	35163	CallExpression	ZEND_CALL_NUM_ARGS ( EG ( current_execute_data ) )		34821	1					
ANR	35164	Callee	ZEND_CALL_NUM_ARGS		34821	0					
ANR	35165	Identifier	ZEND_CALL_NUM_ARGS		34821	0					
ANR	35166	ArgumentList	EG ( current_execute_data )		34821	1					
ANR	35167	Argument	EG ( current_execute_data )		34821	0					
ANR	35168	CallExpression	EG ( current_execute_data )		34821	0					
ANR	35169	Callee	EG		34821	0					
ANR	35170	Identifier	EG		34821	0					
ANR	35171	ArgumentList	current_execute_data		34821	1					
ANR	35172	Argument	current_execute_data		34821	0					
ANR	35173	Identifier	current_execute_data		34821	0					
ANR	35174	IfStatement	if ( num_args > arg_count )		34821	15					
ANR	35175	Condition	num_args > arg_count	892:5:22790:22809	34821	0	True				
ANR	35176	RelationalExpression	num_args > arg_count		34821	0		>			
ANR	35177	Identifier	num_args		34821	0					
ANR	35178	Identifier	arg_count		34821	1					
ANR	35179	CompoundStatement		89:27:2370:2370	34821	1					
ANR	35180	ExpressionStatement	"zend_parse_parameters_debug_error ( ""could not obtain parameters for parsing"" )"	893:2:22816:22892	34821	0	True				
ANR	35181	CallExpression	"zend_parse_parameters_debug_error ( ""could not obtain parameters for parsing"" )"		34821	0					
ANR	35182	Callee	zend_parse_parameters_debug_error		34821	0					
ANR	35183	Identifier	zend_parse_parameters_debug_error		34821	0					
ANR	35184	ArgumentList	"""could not obtain parameters for parsing"""		34821	1					
ANR	35185	Argument	"""could not obtain parameters for parsing"""		34821	0					
ANR	35186	PrimaryExpression	"""could not obtain parameters for parsing"""		34821	0					
ANR	35187	ReturnStatement	return FAILURE ;	894:2:22896:22910	34821	1	True				
ANR	35188	Identifier	FAILURE		34821	0					
ANR	35189	ExpressionStatement	i = 0	897:1:22917:22922	34821	16	True				
ANR	35190	AssignmentExpression	i = 0		34821	0		=			
ANR	35191	Identifier	i		34821	0					
ANR	35192	PrimaryExpression	0		34821	1					
ANR	35193	WhileStatement	while ( num_args -- > 0 )		34821	17					
ANR	35194	Condition	num_args -- > 0	898:8:22932:22945	34821	0	True				
ANR	35195	RelationalExpression	num_args -- > 0		34821	0		>			
ANR	35196	PostIncDecOperationExpression	num_args --		34821	0					
ANR	35197	Identifier	num_args		34821	0					
ANR	35198	IncDec	--		34821	1					
ANR	35199	PrimaryExpression	0		34821	1					
ANR	35200	CompoundStatement		95:24:2506:2506	34821	1					
ANR	35201	IfStatement	if ( * type_spec == '|' )		34821	0					
ANR	35202	Condition	* type_spec == '|'	899:6:22956:22972	34821	0	True				
ANR	35203	EqualityExpression	* type_spec == '|'		34821	0		==			
ANR	35204	UnaryOperationExpression	* type_spec		34821	0					
ANR	35205	UnaryOperator	*		34821	0					
ANR	35206	Identifier	type_spec		34821	1					
ANR	35207	PrimaryExpression	'|'		34821	1					
ANR	35208	CompoundStatement		96:25:2533:2533	34821	1					
ANR	35209	ExpressionStatement	type_spec ++	900:3:22980:22991	34821	0	True				
ANR	35210	PostIncDecOperationExpression	type_spec ++		34821	0					
ANR	35211	Identifier	type_spec		34821	0					
ANR	35212	IncDec	++		34821	1					
ANR	35213	IfStatement	if ( * type_spec == '*' || * type_spec == '+' )		34821	1					
ANR	35214	Condition	* type_spec == '*' || * type_spec == '+'	903:6:23004:23041	34821	0	True				
ANR	35215	OrExpression	* type_spec == '*' || * type_spec == '+'		34821	0		||			
ANR	35216	EqualityExpression	* type_spec == '*'		34821	0		==			
ANR	35217	UnaryOperationExpression	* type_spec		34821	0					
ANR	35218	UnaryOperator	*		34821	0					
ANR	35219	Identifier	type_spec		34821	1					
ANR	35220	PrimaryExpression	'*'		34821	1					
ANR	35221	EqualityExpression	* type_spec == '+'		34821	1		==			
ANR	35222	UnaryOperationExpression	* type_spec		34821	0					
ANR	35223	UnaryOperator	*		34821	0					
ANR	35224	Identifier	type_spec		34821	1					
ANR	35225	PrimaryExpression	'+'		34821	1					
ANR	35226	CompoundStatement		101:3:2607:2652	34821	1					
ANR	35227	IdentifierDeclStatement	int num_varargs = num_args + 1 - post_varargs ;	904:3:23049:23094	34821	0	True				
ANR	35228	IdentifierDecl	num_varargs = num_args + 1 - post_varargs		34821	0					
ANR	35229	IdentifierDeclType	int		34821	0					
ANR	35230	Identifier	num_varargs		34821	1					
ANR	35231	AssignmentExpression	num_varargs = num_args + 1 - post_varargs		34821	2		=			
ANR	35232	Identifier	num_varargs		34821	0					
ANR	35233	AdditiveExpression	num_args + 1 - post_varargs		34821	1		+			
ANR	35234	Identifier	num_args		34821	0					
ANR	35235	AdditiveExpression	1 - post_varargs		34821	1		-			
ANR	35236	PrimaryExpression	1		34821	0					
ANR	35237	Identifier	post_varargs		34821	1					
ANR	35238	Statement	varargs	907:3:23181:23187	34821	1	True				
ANR	35239	Statement	=	907:11:23189:23189	34821	2	True				
ANR	35240	Statement	va_arg	907:13:23191:23196	34821	3	True				
ANR	35241	Statement	(	907:19:23197:23197	34821	4	True				
ANR	35242	Statement	*	907:20:23198:23198	34821	5	True				
ANR	35243	Statement	va	907:21:23199:23200	34821	6	True				
ANR	35244	Statement	","	907:23:23201:23201	34821	7	True				
ANR	35245	Statement	zval	907:25:23203:23206	34821	8	True				
ANR	35246	Statement	*	907:30:23208:23208	34821	9	True				
ANR	35247	Statement	*	907:31:23209:23209	34821	10	True				
ANR	35248	Statement	)	907:32:23210:23210	34821	11	True				
ANR	35249	ExpressionStatement		907:33:23211:23211	34821	12	True				
ANR	35250	Statement	n_varargs	908:3:23216:23224	34821	13	True				
ANR	35251	Statement	=	908:13:23226:23226	34821	14	True				
ANR	35252	Statement	va_arg	908:15:23228:23233	34821	15	True				
ANR	35253	Statement	(	908:21:23234:23234	34821	16	True				
ANR	35254	Statement	*	908:22:23235:23235	34821	17	True				
ANR	35255	Statement	va	908:23:23236:23237	34821	18	True				
ANR	35256	Statement	","	908:25:23238:23238	34821	19	True				
ANR	35257	Statement	int	908:27:23240:23242	34821	20	True				
ANR	35258	Statement	*	908:31:23244:23244	34821	21	True				
ANR	35259	Statement	)	908:32:23245:23245	34821	22	True				
ANR	35260	ExpressionStatement		908:33:23246:23246	34821	23	True				
ANR	35261	ExpressionStatement	type_spec ++	909:3:23251:23262	34821	24	True				
ANR	35262	PostIncDecOperationExpression	type_spec ++		34821	0					
ANR	35263	Identifier	type_spec		34821	0					
ANR	35264	IncDec	++		34821	1					
ANR	35265	IfStatement	if ( num_varargs > 0 )		34821	25					
ANR	35266	Condition	num_varargs > 0	911:7:23272:23286	34821	0	True				
ANR	35267	RelationalExpression	num_varargs > 0		34821	0		>			
ANR	35268	Identifier	num_varargs		34821	0					
ANR	35269	PrimaryExpression	0		34821	1					
ANR	35270	CompoundStatement		108:24:2847:2847	34821	1					
ANR	35271	ExpressionStatement	* n_varargs = num_varargs	912:4:23295:23319	34821	0	True				
ANR	35272	AssignmentExpression	* n_varargs = num_varargs		34821	0		=			
ANR	35273	UnaryOperationExpression	* n_varargs		34821	0					
ANR	35274	UnaryOperator	*		34821	0					
ANR	35275	Identifier	n_varargs		34821	1					
ANR	35276	Identifier	num_varargs		34821	1					
ANR	35277	ExpressionStatement	"* varargs = ZEND_CALL_ARG ( EG ( current_execute_data ) , i + 1 )"	913:4:23325:23382	34821	1	True				
ANR	35278	AssignmentExpression	"* varargs = ZEND_CALL_ARG ( EG ( current_execute_data ) , i + 1 )"		34821	0		=			
ANR	35279	UnaryOperationExpression	* varargs		34821	0					
ANR	35280	UnaryOperator	*		34821	0					
ANR	35281	Identifier	varargs		34821	1					
ANR	35282	CallExpression	"ZEND_CALL_ARG ( EG ( current_execute_data ) , i + 1 )"		34821	1					
ANR	35283	Callee	ZEND_CALL_ARG		34821	0					
ANR	35284	Identifier	ZEND_CALL_ARG		34821	0					
ANR	35285	ArgumentList	EG ( current_execute_data )		34821	1					
ANR	35286	Argument	EG ( current_execute_data )		34821	0					
ANR	35287	CallExpression	EG ( current_execute_data )		34821	0					
ANR	35288	Callee	EG		34821	0					
ANR	35289	Identifier	EG		34821	0					
ANR	35290	ArgumentList	current_execute_data		34821	1					
ANR	35291	Argument	current_execute_data		34821	0					
ANR	35292	Identifier	current_execute_data		34821	0					
ANR	35293	Argument	i + 1		34821	1					
ANR	35294	AdditiveExpression	i + 1		34821	0		+			
ANR	35295	Identifier	i		34821	0					
ANR	35296	PrimaryExpression	1		34821	1					
ANR	35297	ExpressionStatement	num_args += 1 - num_varargs	915:4:23449:23476	34821	2	True				
ANR	35298	AssignmentExpression	num_args += 1 - num_varargs		34821	0		+=			
ANR	35299	Identifier	num_args		34821	0					
ANR	35300	AdditiveExpression	1 - num_varargs		34821	1		-			
ANR	35301	PrimaryExpression	1		34821	0					
ANR	35302	Identifier	num_varargs		34821	1					
ANR	35303	ExpressionStatement	i += num_varargs	916:4:23482:23498	34821	3	True				
ANR	35304	AssignmentExpression	i += num_varargs		34821	0		+=			
ANR	35305	Identifier	i		34821	0					
ANR	35306	Identifier	num_varargs		34821	1					
ANR	35307	ContinueStatement	continue ;	917:4:23504:23512	34821	4	True				
ANR	35308	ElseStatement	else		34821	0					
ANR	35309	CompoundStatement		115:10:3082:3082	34821	0					
ANR	35310	ExpressionStatement	* varargs = NULL	919:4:23530:23545	34821	0	True				
ANR	35311	AssignmentExpression	* varargs = NULL		34821	0		=			
ANR	35312	UnaryOperationExpression	* varargs		34821	0					
ANR	35313	UnaryOperator	*		34821	0					
ANR	35314	Identifier	varargs		34821	1					
ANR	35315	Identifier	NULL		34821	1					
ANR	35316	ExpressionStatement	* n_varargs = 0	920:4:23551:23565	34821	1	True				
ANR	35317	AssignmentExpression	* n_varargs = 0		34821	0		=			
ANR	35318	UnaryOperationExpression	* n_varargs		34821	0					
ANR	35319	UnaryOperator	*		34821	0					
ANR	35320	Identifier	n_varargs		34821	1					
ANR	35321	PrimaryExpression	0		34821	1					
ANR	35322	ExpressionStatement	"arg = ZEND_CALL_ARG ( EG ( current_execute_data ) , i + 1 )"	924:2:23579:23631	34821	2	True				
ANR	35323	AssignmentExpression	"arg = ZEND_CALL_ARG ( EG ( current_execute_data ) , i + 1 )"		34821	0		=			
ANR	35324	Identifier	arg		34821	0					
ANR	35325	CallExpression	"ZEND_CALL_ARG ( EG ( current_execute_data ) , i + 1 )"		34821	1					
ANR	35326	Callee	ZEND_CALL_ARG		34821	0					
ANR	35327	Identifier	ZEND_CALL_ARG		34821	0					
ANR	35328	ArgumentList	EG ( current_execute_data )		34821	1					
ANR	35329	Argument	EG ( current_execute_data )		34821	0					
ANR	35330	CallExpression	EG ( current_execute_data )		34821	0					
ANR	35331	Callee	EG		34821	0					
ANR	35332	Identifier	EG		34821	0					
ANR	35333	ArgumentList	current_execute_data		34821	1					
ANR	35334	Argument	current_execute_data		34821	0					
ANR	35335	Identifier	current_execute_data		34821	0					
ANR	35336	Argument	i + 1		34821	1					
ANR	35337	AdditiveExpression	i + 1		34821	0		+			
ANR	35338	Identifier	i		34821	0					
ANR	35339	PrimaryExpression	1		34821	1					
ANR	35340	IfStatement	"if ( zend_parse_arg ( i + 1 , arg , va , & type_spec , flags ) == FAILURE )"		34821	3					
ANR	35341	Condition	"zend_parse_arg ( i + 1 , arg , va , & type_spec , flags ) == FAILURE"	926:6:23640:23697	34821	0	True				
ANR	35342	EqualityExpression	"zend_parse_arg ( i + 1 , arg , va , & type_spec , flags ) == FAILURE"		34821	0		==			
ANR	35343	CallExpression	"zend_parse_arg ( i + 1 , arg , va , & type_spec , flags )"		34821	0					
ANR	35344	Callee	zend_parse_arg		34821	0					
ANR	35345	Identifier	zend_parse_arg		34821	0					
ANR	35346	ArgumentList	i + 1		34821	1					
ANR	35347	Argument	i + 1		34821	0					
ANR	35348	AdditiveExpression	i + 1		34821	0		+			
ANR	35349	Identifier	i		34821	0					
ANR	35350	PrimaryExpression	1		34821	1					
ANR	35351	Argument	arg		34821	1					
ANR	35352	Identifier	arg		34821	0					
ANR	35353	Argument	va		34821	2					
ANR	35354	Identifier	va		34821	0					
ANR	35355	Argument	& type_spec		34821	3					
ANR	35356	UnaryOperationExpression	& type_spec		34821	0					
ANR	35357	UnaryOperator	&		34821	0					
ANR	35358	Identifier	type_spec		34821	1					
ANR	35359	Argument	flags		34821	4					
ANR	35360	Identifier	flags		34821	0					
ANR	35361	Identifier	FAILURE		34821	1					
ANR	35362	CompoundStatement		123:66:3258:3258	34821	1					
ANR	35363	IfStatement	if ( varargs && * varargs )		34821	0					
ANR	35364	Condition	varargs && * varargs	928:7:23756:23774	34821	0	True				
ANR	35365	AndExpression	varargs && * varargs		34821	0		&&			
ANR	35366	Identifier	varargs		34821	0					
ANR	35367	UnaryOperationExpression	* varargs		34821	1					
ANR	35368	UnaryOperator	*		34821	0					
ANR	35369	Identifier	varargs		34821	1					
ANR	35370	CompoundStatement		125:28:3335:3335	34821	1					
ANR	35371	ExpressionStatement	* varargs = NULL	929:4:23783:23798	34821	0	True				
ANR	35372	AssignmentExpression	* varargs = NULL		34821	0		=			
ANR	35373	UnaryOperationExpression	* varargs		34821	0					
ANR	35374	UnaryOperator	*		34821	0					
ANR	35375	Identifier	varargs		34821	1					
ANR	35376	Identifier	NULL		34821	1					
ANR	35377	ReturnStatement	return FAILURE ;	931:3:23808:23822	34821	1	True				
ANR	35378	Identifier	FAILURE		34821	0					
ANR	35379	ExpressionStatement	i ++	933:2:23830:23833	34821	4	True				
ANR	35380	PostIncDecOperationExpression	i ++		34821	0					
ANR	35381	Identifier	i		34821	0					
ANR	35382	IncDec	++		34821	1					
ANR	35383	ReturnStatement	return SUCCESS ;	936:1:23840:23854	34821	18	True				
ANR	35384	Identifier	SUCCESS		34821	0					
ANR	35385	ReturnType	static int		34821	1					
ANR	35386	Identifier	zend_parse_va_args		34821	2					
ANR	35387	ParameterList	"int num_args , const char * type_spec , va_list * va , int flags"		34821	3					
ANR	35388	Parameter	int num_args	803:30:20370:20381	34821	0	True				
ANR	35389	ParameterType	int		34821	0					
ANR	35390	Identifier	num_args		34821	1					
ANR	35391	Parameter	const char * type_spec	803:44:20384:20404	34821	1	True				
ANR	35392	ParameterType	const char *		34821	0					
ANR	35393	Identifier	type_spec		34821	1					
ANR	35394	Parameter	va_list * va	803:67:20407:20417	34821	2	True				
ANR	35395	ParameterType	va_list *		34821	0					
ANR	35396	Identifier	va		34821	1					
ANR	35397	Parameter	int flags	803:80:20420:20428	34821	3	True				
ANR	35398	ParameterType	int		34821	0					
ANR	35399	Identifier	flags		34821	1					
ANR	35400	CFGEntryNode	ENTRY		34821		True				
ANR	35401	CFGExitNode	EXIT		34821		True				
ANR	35402	Symbol	* * active_function		34821						
ANR	35403	Symbol	* type_spec		34821						
ANR	35404	Symbol	* class_name		34821						
ANR	35405	Symbol	min_num_args		34821						
ANR	35406	Symbol	ZEND_CALL_ARG		34821						
ANR	35407	Symbol	EG ( current_execute_data ) -> func		34821						
ANR	35408	Symbol	active_function -> common . function_name		34821						
ANR	35409	Symbol	current_execute_data		34821						
ANR	35410	Symbol	flags		34821						
ANR	35411	Symbol	* EG		34821						
ANR	35412	Symbol	* active_function -> common		34821						
ANR	35413	Symbol	active_function		34821						
ANR	35414	Symbol	type_spec		34821						
ANR	35415	Symbol	num_args		34821						
ANR	35416	Symbol	ZEND_PARSE_PARAMS_THROW		34821						
ANR	35417	Symbol	arg		34821						
ANR	35418	Symbol	ZEND_CALL_NUM_ARGS		34821						
ANR	35419	Symbol	varargs		34821						
ANR	35420	Symbol	class_name		34821						
ANR	35421	Symbol	n_varargs		34821						
ANR	35422	Symbol	EG		34821						
ANR	35423	Symbol	ZEND_ARG_USES_STRICT_TYPES		34821						
ANR	35424	Symbol	c		34821						
ANR	35425	Symbol	NULL		34821						
ANR	35426	Symbol	SUCCESS		34821						
ANR	35427	Symbol	active_function -> common . scope -> name		34821						
ANR	35428	Symbol	i		34821						
ANR	35429	Symbol	num_varargs		34821						
ANR	35430	Symbol	va		34821						
ANR	35431	Symbol	active_function -> common		34821						
ANR	35432	Symbol	FAILURE		34821						
ANR	35433	Symbol	* active_function		34821						
ANR	35434	Symbol	post_varargs		34821						
ANR	35435	Symbol	active_function -> common . scope		34821						
ANR	35436	Symbol	ZSTR_VAL		34821						
ANR	35437	Symbol	max_num_args		34821						
ANR	35438	Symbol	throw_exception		34821						
ANR	35439	Symbol	& type_spec		34821						
ANR	35440	Symbol	spec_walk		34821						
ANR	35441	Symbol	* varargs		34821						
ANR	35442	Symbol	ZEND_PARSE_PARAMS_QUIET		34821						
ANR	35443	Symbol	* n_varargs		34821						
ANR	35444	Symbol	have_varargs		34821						
ANR	35445	Symbol	* spec_walk		34821						
ANR	35446	Symbol	* active_function -> common . scope		34821						
ANR	35447	Symbol	zend_parse_arg		34821						
ANR	35448	Symbol	arg_count		34821						
ANR	35449	Function	zend_parse_parameters_ex	940:0:23869:24118							
ANR	35450	FunctionDef	"zend_parse_parameters_ex (int flags , int num_args , const char * type_spec)"		35449	0					
ANR	35451	CompoundStatement		941:0:23970:24118	35449	0					
ANR	35452	IdentifierDeclStatement	va_list va ;	942:1:23973:23983	35449	0	True				
ANR	35453	IdentifierDecl	va		35449	0					
ANR	35454	IdentifierDeclType	va_list		35449	0					
ANR	35455	Identifier	va		35449	1					
ANR	35456	IdentifierDeclStatement	int retval ;	943:1:23986:23996	35449	1	True				
ANR	35457	IdentifierDecl	retval		35449	0					
ANR	35458	IdentifierDeclType	int		35449	0					
ANR	35459	Identifier	retval		35449	1					
ANR	35460	ExpressionStatement	"va_start ( va , type_spec )"	945:1:24000:24023	35449	2	True				
ANR	35461	CallExpression	"va_start ( va , type_spec )"		35449	0					
ANR	35462	Callee	va_start		35449	0					
ANR	35463	Identifier	va_start		35449	0					
ANR	35464	ArgumentList	va		35449	1					
ANR	35465	Argument	va		35449	0					
ANR	35466	Identifier	va		35449	0					
ANR	35467	Argument	type_spec		35449	1					
ANR	35468	Identifier	type_spec		35449	0					
ANR	35469	ExpressionStatement	"retval = zend_parse_va_args ( num_args , type_spec , & va , flags )"	946:1:24026:24086	35449	3	True				
ANR	35470	AssignmentExpression	"retval = zend_parse_va_args ( num_args , type_spec , & va , flags )"		35449	0		=			
ANR	35471	Identifier	retval		35449	0					
ANR	35472	CallExpression	"zend_parse_va_args ( num_args , type_spec , & va , flags )"		35449	1					
ANR	35473	Callee	zend_parse_va_args		35449	0					
ANR	35474	Identifier	zend_parse_va_args		35449	0					
ANR	35475	ArgumentList	num_args		35449	1					
ANR	35476	Argument	num_args		35449	0					
ANR	35477	Identifier	num_args		35449	0					
ANR	35478	Argument	type_spec		35449	1					
ANR	35479	Identifier	type_spec		35449	0					
ANR	35480	Argument	& va		35449	2					
ANR	35481	UnaryOperationExpression	& va		35449	0					
ANR	35482	UnaryOperator	&		35449	0					
ANR	35483	Identifier	va		35449	1					
ANR	35484	Argument	flags		35449	3					
ANR	35485	Identifier	flags		35449	0					
ANR	35486	ExpressionStatement	va_end ( va )	947:1:24089:24099	35449	4	True				
ANR	35487	CallExpression	va_end ( va )		35449	0					
ANR	35488	Callee	va_end		35449	0					
ANR	35489	Identifier	va_end		35449	0					
ANR	35490	ArgumentList	va		35449	1					
ANR	35491	Argument	va		35449	0					
ANR	35492	Identifier	va		35449	0					
ANR	35493	ReturnStatement	return retval ;	949:1:24103:24116	35449	5	True				
ANR	35494	Identifier	retval		35449	0					
ANR	35495	ReturnType	ZEND_API int		35449	1					
ANR	35496	Identifier	zend_parse_parameters_ex		35449	2					
ANR	35497	ParameterList	"int flags , int num_args , const char * type_spec"		35449	3					
ANR	35498	Parameter	int flags	940:38:23907:23915	35449	0	True				
ANR	35499	ParameterType	int		35449	0					
ANR	35500	Identifier	flags		35449	1					
ANR	35501	Parameter	int num_args	940:49:23918:23929	35449	1	True				
ANR	35502	ParameterType	int		35449	0					
ANR	35503	Identifier	num_args		35449	1					
ANR	35504	Parameter	const char * type_spec	940:63:23932:23952	35449	2	True				
ANR	35505	ParameterType	const char *		35449	0					
ANR	35506	Identifier	type_spec		35449	1					
ANR	35507	CFGEntryNode	ENTRY		35449		True				
ANR	35508	CFGExitNode	EXIT		35449		True				
ANR	35509	Symbol	type_spec		35449						
ANR	35510	Symbol	& va		35449						
ANR	35511	Symbol	num_args		35449						
ANR	35512	Symbol	zend_parse_va_args		35449						
ANR	35513	Symbol	flags		35449						
ANR	35514	Symbol	va		35449						
ANR	35515	Symbol	retval		35449						
ANR	35516	Function	zend_parse_parameters	953:0:24131:24382							
ANR	35517	FunctionDef	"zend_parse_parameters (int num_args , const char * type_spec)"		35516	0					
ANR	35518	CompoundStatement		954:0:24218:24382	35516	0					
ANR	35519	IdentifierDeclStatement	va_list va ;	955:1:24221:24231	35516	0	True				
ANR	35520	IdentifierDecl	va		35516	0					
ANR	35521	IdentifierDeclType	va_list		35516	0					
ANR	35522	Identifier	va		35516	1					
ANR	35523	IdentifierDeclStatement	int retval ;	956:1:24234:24244	35516	1	True				
ANR	35524	IdentifierDecl	retval		35516	0					
ANR	35525	IdentifierDeclType	int		35516	0					
ANR	35526	Identifier	retval		35516	1					
ANR	35527	IdentifierDeclStatement	int flags = 0 ;	957:1:24247:24260	35516	2	True				
ANR	35528	IdentifierDecl	flags = 0		35516	0					
ANR	35529	IdentifierDeclType	int		35516	0					
ANR	35530	Identifier	flags		35516	1					
ANR	35531	AssignmentExpression	flags = 0		35516	2		=			
ANR	35532	Identifier	flags		35516	0					
ANR	35533	PrimaryExpression	0		35516	1					
ANR	35534	ExpressionStatement	"va_start ( va , type_spec )"	959:1:24264:24287	35516	3	True				
ANR	35535	CallExpression	"va_start ( va , type_spec )"		35516	0					
ANR	35536	Callee	va_start		35516	0					
ANR	35537	Identifier	va_start		35516	0					
ANR	35538	ArgumentList	va		35516	1					
ANR	35539	Argument	va		35516	0					
ANR	35540	Identifier	va		35516	0					
ANR	35541	Argument	type_spec		35516	1					
ANR	35542	Identifier	type_spec		35516	0					
ANR	35543	ExpressionStatement	"retval = zend_parse_va_args ( num_args , type_spec , & va , flags )"	960:1:24290:24350	35516	4	True				
ANR	35544	AssignmentExpression	"retval = zend_parse_va_args ( num_args , type_spec , & va , flags )"		35516	0		=			
ANR	35545	Identifier	retval		35516	0					
ANR	35546	CallExpression	"zend_parse_va_args ( num_args , type_spec , & va , flags )"		35516	1					
ANR	35547	Callee	zend_parse_va_args		35516	0					
ANR	35548	Identifier	zend_parse_va_args		35516	0					
ANR	35549	ArgumentList	num_args		35516	1					
ANR	35550	Argument	num_args		35516	0					
ANR	35551	Identifier	num_args		35516	0					
ANR	35552	Argument	type_spec		35516	1					
ANR	35553	Identifier	type_spec		35516	0					
ANR	35554	Argument	& va		35516	2					
ANR	35555	UnaryOperationExpression	& va		35516	0					
ANR	35556	UnaryOperator	&		35516	0					
ANR	35557	Identifier	va		35516	1					
ANR	35558	Argument	flags		35516	3					
ANR	35559	Identifier	flags		35516	0					
ANR	35560	ExpressionStatement	va_end ( va )	961:1:24353:24363	35516	5	True				
ANR	35561	CallExpression	va_end ( va )		35516	0					
ANR	35562	Callee	va_end		35516	0					
ANR	35563	Identifier	va_end		35516	0					
ANR	35564	ArgumentList	va		35516	1					
ANR	35565	Argument	va		35516	0					
ANR	35566	Identifier	va		35516	0					
ANR	35567	ReturnStatement	return retval ;	963:1:24367:24380	35516	6	True				
ANR	35568	Identifier	retval		35516	0					
ANR	35569	ReturnType	ZEND_API int		35516	1					
ANR	35570	Identifier	zend_parse_parameters		35516	2					
ANR	35571	ParameterList	"int num_args , const char * type_spec"		35516	3					
ANR	35572	Parameter	int num_args	953:35:24166:24177	35516	0	True				
ANR	35573	ParameterType	int		35516	0					
ANR	35574	Identifier	num_args		35516	1					
ANR	35575	Parameter	const char * type_spec	953:49:24180:24200	35516	1	True				
ANR	35576	ParameterType	const char *		35516	0					
ANR	35577	Identifier	type_spec		35516	1					
ANR	35578	CFGEntryNode	ENTRY		35516		True				
ANR	35579	CFGExitNode	EXIT		35516		True				
ANR	35580	Symbol	type_spec		35516						
ANR	35581	Symbol	& va		35516						
ANR	35582	Symbol	num_args		35516						
ANR	35583	Symbol	zend_parse_va_args		35516						
ANR	35584	Symbol	flags		35516						
ANR	35585	Symbol	va		35516						
ANR	35586	Symbol	retval		35516						
ANR	35587	Function	zend_parse_parameters_throw	967:0:24395:24674							
ANR	35588	FunctionDef	"zend_parse_parameters_throw (int num_args , const char * type_spec)"		35587	0					
ANR	35589	CompoundStatement		968:0:24488:24674	35587	0					
ANR	35590	IdentifierDeclStatement	va_list va ;	969:1:24491:24501	35587	0	True				
ANR	35591	IdentifierDecl	va		35587	0					
ANR	35592	IdentifierDeclType	va_list		35587	0					
ANR	35593	Identifier	va		35587	1					
ANR	35594	IdentifierDeclStatement	int retval ;	970:1:24504:24514	35587	1	True				
ANR	35595	IdentifierDecl	retval		35587	0					
ANR	35596	IdentifierDeclType	int		35587	0					
ANR	35597	Identifier	retval		35587	1					
ANR	35598	IdentifierDeclStatement	int flags = ZEND_PARSE_PARAMS_THROW ;	971:1:24517:24552	35587	2	True				
ANR	35599	IdentifierDecl	flags = ZEND_PARSE_PARAMS_THROW		35587	0					
ANR	35600	IdentifierDeclType	int		35587	0					
ANR	35601	Identifier	flags		35587	1					
ANR	35602	AssignmentExpression	flags = ZEND_PARSE_PARAMS_THROW		35587	2		=			
ANR	35603	Identifier	ZEND_PARSE_PARAMS_THROW		35587	0					
ANR	35604	Identifier	ZEND_PARSE_PARAMS_THROW		35587	1					
ANR	35605	ExpressionStatement	"va_start ( va , type_spec )"	973:1:24556:24579	35587	3	True				
ANR	35606	CallExpression	"va_start ( va , type_spec )"		35587	0					
ANR	35607	Callee	va_start		35587	0					
ANR	35608	Identifier	va_start		35587	0					
ANR	35609	ArgumentList	va		35587	1					
ANR	35610	Argument	va		35587	0					
ANR	35611	Identifier	va		35587	0					
ANR	35612	Argument	type_spec		35587	1					
ANR	35613	Identifier	type_spec		35587	0					
ANR	35614	ExpressionStatement	"retval = zend_parse_va_args ( num_args , type_spec , & va , flags )"	974:1:24582:24642	35587	4	True				
ANR	35615	AssignmentExpression	"retval = zend_parse_va_args ( num_args , type_spec , & va , flags )"		35587	0		=			
ANR	35616	Identifier	retval		35587	0					
ANR	35617	CallExpression	"zend_parse_va_args ( num_args , type_spec , & va , flags )"		35587	1					
ANR	35618	Callee	zend_parse_va_args		35587	0					
ANR	35619	Identifier	zend_parse_va_args		35587	0					
ANR	35620	ArgumentList	num_args		35587	1					
ANR	35621	Argument	num_args		35587	0					
ANR	35622	Identifier	num_args		35587	0					
ANR	35623	Argument	type_spec		35587	1					
ANR	35624	Identifier	type_spec		35587	0					
ANR	35625	Argument	& va		35587	2					
ANR	35626	UnaryOperationExpression	& va		35587	0					
ANR	35627	UnaryOperator	&		35587	0					
ANR	35628	Identifier	va		35587	1					
ANR	35629	Argument	flags		35587	3					
ANR	35630	Identifier	flags		35587	0					
ANR	35631	ExpressionStatement	va_end ( va )	975:1:24645:24655	35587	5	True				
ANR	35632	CallExpression	va_end ( va )		35587	0					
ANR	35633	Callee	va_end		35587	0					
ANR	35634	Identifier	va_end		35587	0					
ANR	35635	ArgumentList	va		35587	1					
ANR	35636	Argument	va		35587	0					
ANR	35637	Identifier	va		35587	0					
ANR	35638	ReturnStatement	return retval ;	977:1:24659:24672	35587	6	True				
ANR	35639	Identifier	retval		35587	0					
ANR	35640	ReturnType	ZEND_API int		35587	1					
ANR	35641	Identifier	zend_parse_parameters_throw		35587	2					
ANR	35642	ParameterList	"int num_args , const char * type_spec"		35587	3					
ANR	35643	Parameter	int num_args	967:41:24436:24447	35587	0	True				
ANR	35644	ParameterType	int		35587	0					
ANR	35645	Identifier	num_args		35587	1					
ANR	35646	Parameter	const char * type_spec	967:55:24450:24470	35587	1	True				
ANR	35647	ParameterType	const char *		35587	0					
ANR	35648	Identifier	type_spec		35587	1					
ANR	35649	CFGEntryNode	ENTRY		35587		True				
ANR	35650	CFGExitNode	EXIT		35587		True				
ANR	35651	Symbol	type_spec		35587						
ANR	35652	Symbol	& va		35587						
ANR	35653	Symbol	num_args		35587						
ANR	35654	Symbol	ZEND_PARSE_PARAMS_THROW		35587						
ANR	35655	Symbol	zend_parse_va_args		35587						
ANR	35656	Symbol	flags		35587						
ANR	35657	Symbol	va		35587						
ANR	35658	Symbol	retval		35587						
ANR	35659	Function	zend_parse_method_parameters	981:0:24687:25938							
ANR	35660	FunctionDef	"zend_parse_method_parameters (int num_args , zval * this_ptr , const char * type_spec)"		35659	0					
ANR	35661	CompoundStatement		982:0:24797:25938	35659	0					
ANR	35662	IdentifierDeclStatement	va_list va ;	983:1:24800:24810	35659	0	True				
ANR	35663	IdentifierDecl	va		35659	0					
ANR	35664	IdentifierDeclType	va_list		35659	0					
ANR	35665	Identifier	va		35659	1					
ANR	35666	IdentifierDeclStatement	int retval ;	984:1:24813:24823	35659	1	True				
ANR	35667	IdentifierDecl	retval		35659	0					
ANR	35668	IdentifierDeclType	int		35659	0					
ANR	35669	Identifier	retval		35659	1					
ANR	35670	IdentifierDeclStatement	int flags = 0 ;	985:1:24826:24839	35659	2	True				
ANR	35671	IdentifierDecl	flags = 0		35659	0					
ANR	35672	IdentifierDeclType	int		35659	0					
ANR	35673	Identifier	flags		35659	1					
ANR	35674	AssignmentExpression	flags = 0		35659	2		=			
ANR	35675	Identifier	flags		35659	0					
ANR	35676	PrimaryExpression	0		35659	1					
ANR	35677	IdentifierDeclStatement	const char * p = type_spec ;	986:1:24842:24867	35659	3	True				
ANR	35678	IdentifierDecl	* p = type_spec		35659	0					
ANR	35679	IdentifierDeclType	const char *		35659	0					
ANR	35680	Identifier	p		35659	1					
ANR	35681	AssignmentExpression	* p = type_spec		35659	2		=			
ANR	35682	Identifier	type_spec		35659	0					
ANR	35683	Identifier	type_spec		35659	1					
ANR	35684	IdentifierDeclStatement	zval * * object ;	987:1:24870:24883	35659	4	True				
ANR	35685	IdentifierDecl	* * object		35659	0					
ANR	35686	IdentifierDeclType	zval * *		35659	0					
ANR	35687	Identifier	object		35659	1					
ANR	35688	IdentifierDeclStatement	zend_class_entry * ce ;	988:1:24886:24906	35659	5	True				
ANR	35689	IdentifierDecl	* ce		35659	0					
ANR	35690	IdentifierDeclType	zend_class_entry *		35659	0					
ANR	35691	Identifier	ce		35659	1					
ANR	35692	IdentifierDeclStatement	zend_bool is_method = EG ( current_execute_data ) -> func -> common . scope != NULL ;	994:1:25199:25273	35659	6	True				
ANR	35693	IdentifierDecl	is_method = EG ( current_execute_data ) -> func -> common . scope != NULL		35659	0					
ANR	35694	IdentifierDeclType	zend_bool		35659	0					
ANR	35695	Identifier	is_method		35659	1					
ANR	35696	AssignmentExpression	is_method = EG ( current_execute_data ) -> func -> common . scope != NULL		35659	2		=			
ANR	35697	Identifier	is_method		35659	0					
ANR	35698	EqualityExpression	EG ( current_execute_data ) -> func -> common . scope != NULL		35659	1		!=			
ANR	35699	MemberAccess	EG ( current_execute_data ) -> func -> common . scope		35659	0					
ANR	35700	PtrMemberAccess	EG ( current_execute_data ) -> func -> common		35659	0					
ANR	35701	PtrMemberAccess	EG ( current_execute_data ) -> func		35659	0					
ANR	35702	CallExpression	EG ( current_execute_data )		35659	0					
ANR	35703	Callee	EG		35659	0					
ANR	35704	Identifier	EG		35659	0					
ANR	35705	ArgumentList	current_execute_data		35659	1					
ANR	35706	Argument	current_execute_data		35659	0					
ANR	35707	Identifier	current_execute_data		35659	0					
ANR	35708	Identifier	func		35659	1					
ANR	35709	Identifier	common		35659	1					
ANR	35710	Identifier	scope		35659	1					
ANR	35711	Identifier	NULL		35659	1					
ANR	35712	IfStatement	if ( ! is_method || ! this_ptr || Z_TYPE_P ( this_ptr ) != IS_OBJECT )		35659	7					
ANR	35713	Condition	! is_method || ! this_ptr || Z_TYPE_P ( this_ptr ) != IS_OBJECT	996:5:25281:25338	35659	0	True				
ANR	35714	OrExpression	! is_method || ! this_ptr || Z_TYPE_P ( this_ptr ) != IS_OBJECT		35659	0		||			
ANR	35715	UnaryOperationExpression	! is_method		35659	0					
ANR	35716	UnaryOperator	!		35659	0					
ANR	35717	Identifier	is_method		35659	1					
ANR	35718	OrExpression	! this_ptr || Z_TYPE_P ( this_ptr ) != IS_OBJECT		35659	1		||			
ANR	35719	UnaryOperationExpression	! this_ptr		35659	0					
ANR	35720	UnaryOperator	!		35659	0					
ANR	35721	Identifier	this_ptr		35659	1					
ANR	35722	EqualityExpression	Z_TYPE_P ( this_ptr ) != IS_OBJECT		35659	1		!=			
ANR	35723	CallExpression	Z_TYPE_P ( this_ptr )		35659	0					
ANR	35724	Callee	Z_TYPE_P		35659	0					
ANR	35725	Identifier	Z_TYPE_P		35659	0					
ANR	35726	ArgumentList	this_ptr		35659	1					
ANR	35727	Argument	this_ptr		35659	0					
ANR	35728	Identifier	this_ptr		35659	0					
ANR	35729	Identifier	IS_OBJECT		35659	1					
ANR	35730	CompoundStatement		15:65:543:543	35659	1					
ANR	35731	ExpressionStatement	"va_start ( va , type_spec )"	997:2:25345:25368	35659	0	True				
ANR	35732	CallExpression	"va_start ( va , type_spec )"		35659	0					
ANR	35733	Callee	va_start		35659	0					
ANR	35734	Identifier	va_start		35659	0					
ANR	35735	ArgumentList	va		35659	1					
ANR	35736	Argument	va		35659	0					
ANR	35737	Identifier	va		35659	0					
ANR	35738	Argument	type_spec		35659	1					
ANR	35739	Identifier	type_spec		35659	0					
ANR	35740	ExpressionStatement	"retval = zend_parse_va_args ( num_args , type_spec , & va , flags )"	998:2:25372:25432	35659	1	True				
ANR	35741	AssignmentExpression	"retval = zend_parse_va_args ( num_args , type_spec , & va , flags )"		35659	0		=			
ANR	35742	Identifier	retval		35659	0					
ANR	35743	CallExpression	"zend_parse_va_args ( num_args , type_spec , & va , flags )"		35659	1					
ANR	35744	Callee	zend_parse_va_args		35659	0					
ANR	35745	Identifier	zend_parse_va_args		35659	0					
ANR	35746	ArgumentList	num_args		35659	1					
ANR	35747	Argument	num_args		35659	0					
ANR	35748	Identifier	num_args		35659	0					
ANR	35749	Argument	type_spec		35659	1					
ANR	35750	Identifier	type_spec		35659	0					
ANR	35751	Argument	& va		35659	2					
ANR	35752	UnaryOperationExpression	& va		35659	0					
ANR	35753	UnaryOperator	&		35659	0					
ANR	35754	Identifier	va		35659	1					
ANR	35755	Argument	flags		35659	3					
ANR	35756	Identifier	flags		35659	0					
ANR	35757	ExpressionStatement	va_end ( va )	999:2:25436:25446	35659	2	True				
ANR	35758	CallExpression	va_end ( va )		35659	0					
ANR	35759	Callee	va_end		35659	0					
ANR	35760	Identifier	va_end		35659	0					
ANR	35761	ArgumentList	va		35659	1					
ANR	35762	Argument	va		35659	0					
ANR	35763	Identifier	va		35659	0					
ANR	35764	ElseStatement	else		35659	0					
ANR	35765	CompoundStatement		19:8:658:658	35659	0					
ANR	35766	ExpressionStatement	p ++	1001:2:25460:25463	35659	0	True				
ANR	35767	PostIncDecOperationExpression	p ++		35659	0					
ANR	35768	Identifier	p		35659	0					
ANR	35769	IncDec	++		35659	1					
ANR	35770	ExpressionStatement	"va_start ( va , type_spec )"	1003:2:25468:25491	35659	1	True				
ANR	35771	CallExpression	"va_start ( va , type_spec )"		35659	0					
ANR	35772	Callee	va_start		35659	0					
ANR	35773	Identifier	va_start		35659	0					
ANR	35774	ArgumentList	va		35659	1					
ANR	35775	Argument	va		35659	0					
ANR	35776	Identifier	va		35659	0					
ANR	35777	Argument	type_spec		35659	1					
ANR	35778	Identifier	type_spec		35659	0					
ANR	35779	Statement	object	1005:2:25496:25501	35659	2	True				
ANR	35780	Statement	=	1005:9:25503:25503	35659	3	True				
ANR	35781	Statement	va_arg	1005:11:25505:25510	35659	4	True				
ANR	35782	Statement	(	1005:17:25511:25511	35659	5	True				
ANR	35783	Statement	va	1005:18:25512:25513	35659	6	True				
ANR	35784	Statement	","	1005:20:25514:25514	35659	7	True				
ANR	35785	Statement	zval	1005:22:25516:25519	35659	8	True				
ANR	35786	Statement	*	1005:27:25521:25521	35659	9	True				
ANR	35787	Statement	*	1005:28:25522:25522	35659	10	True				
ANR	35788	Statement	)	1005:29:25523:25523	35659	11	True				
ANR	35789	ExpressionStatement		1005:30:25524:25524	35659	12	True				
ANR	35790	Statement	ce	1006:2:25528:25529	35659	13	True				
ANR	35791	Statement	=	1006:5:25531:25531	35659	14	True				
ANR	35792	Statement	va_arg	1006:7:25533:25538	35659	15	True				
ANR	35793	Statement	(	1006:13:25539:25539	35659	16	True				
ANR	35794	Statement	va	1006:14:25540:25541	35659	17	True				
ANR	35795	Statement	","	1006:16:25542:25542	35659	18	True				
ANR	35796	Statement	zend_class_entry	1006:18:25544:25559	35659	19	True				
ANR	35797	Statement	*	1006:35:25561:25561	35659	20	True				
ANR	35798	Statement	)	1006:36:25562:25562	35659	21	True				
ANR	35799	ExpressionStatement		1006:37:25563:25563	35659	22	True				
ANR	35800	ExpressionStatement	* object = this_ptr	1007:2:25567:25585	35659	23	True				
ANR	35801	AssignmentExpression	* object = this_ptr		35659	0		=			
ANR	35802	UnaryOperationExpression	* object		35659	0					
ANR	35803	UnaryOperator	*		35659	0					
ANR	35804	Identifier	object		35659	1					
ANR	35805	Identifier	this_ptr		35659	1					
ANR	35806	IfStatement	"if ( ce && ! instanceof_function ( Z_OBJCE_P ( this_ptr ) , ce ) )"		35659	24					
ANR	35807	Condition	"ce && ! instanceof_function ( Z_OBJCE_P ( this_ptr ) , ce )"	1009:6:25594:25644	35659	0	True				
ANR	35808	AndExpression	"ce && ! instanceof_function ( Z_OBJCE_P ( this_ptr ) , ce )"		35659	0		&&			
ANR	35809	Identifier	ce		35659	0					
ANR	35810	UnaryOperationExpression	"! instanceof_function ( Z_OBJCE_P ( this_ptr ) , ce )"		35659	1					
ANR	35811	UnaryOperator	!		35659	0					
ANR	35812	CallExpression	"instanceof_function ( Z_OBJCE_P ( this_ptr ) , ce )"		35659	1					
ANR	35813	Callee	instanceof_function		35659	0					
ANR	35814	Identifier	instanceof_function		35659	0					
ANR	35815	ArgumentList	Z_OBJCE_P ( this_ptr )		35659	1					
ANR	35816	Argument	Z_OBJCE_P ( this_ptr )		35659	0					
ANR	35817	CallExpression	Z_OBJCE_P ( this_ptr )		35659	0					
ANR	35818	Callee	Z_OBJCE_P		35659	0					
ANR	35819	Identifier	Z_OBJCE_P		35659	0					
ANR	35820	ArgumentList	this_ptr		35659	1					
ANR	35821	Argument	this_ptr		35659	0					
ANR	35822	Identifier	this_ptr		35659	0					
ANR	35823	Argument	ce		35659	1					
ANR	35824	Identifier	ce		35659	0					
ANR	35825	CompoundStatement		28:59:849:849	35659	1					
ANR	35826	ExpressionStatement	"zend_error_noreturn ( E_CORE_ERROR , ""%s::%s() must be derived from %s::%s"" , ZSTR_VAL ( Z_OBJCE_P ( this_ptr ) -> name ) , get_active_function_name ( ) , ZSTR_VAL ( ce -> name ) , get_active_function_name ( ) )"	1010:3:25652:25842	35659	0	True				
ANR	35827	CallExpression	"zend_error_noreturn ( E_CORE_ERROR , ""%s::%s() must be derived from %s::%s"" , ZSTR_VAL ( Z_OBJCE_P ( this_ptr ) -> name ) , get_active_function_name ( ) , ZSTR_VAL ( ce -> name ) , get_active_function_name ( ) )"		35659	0					
ANR	35828	Callee	zend_error_noreturn		35659	0					
ANR	35829	Identifier	zend_error_noreturn		35659	0					
ANR	35830	ArgumentList	E_CORE_ERROR		35659	1					
ANR	35831	Argument	E_CORE_ERROR		35659	0					
ANR	35832	Identifier	E_CORE_ERROR		35659	0					
ANR	35833	Argument	"""%s::%s() must be derived from %s::%s"""		35659	1					
ANR	35834	PrimaryExpression	"""%s::%s() must be derived from %s::%s"""		35659	0					
ANR	35835	Argument	ZSTR_VAL ( Z_OBJCE_P ( this_ptr ) -> name )		35659	2					
ANR	35836	CallExpression	ZSTR_VAL ( Z_OBJCE_P ( this_ptr ) -> name )		35659	0					
ANR	35837	Callee	ZSTR_VAL		35659	0					
ANR	35838	Identifier	ZSTR_VAL		35659	0					
ANR	35839	ArgumentList	Z_OBJCE_P ( this_ptr ) -> name		35659	1					
ANR	35840	Argument	Z_OBJCE_P ( this_ptr ) -> name		35659	0					
ANR	35841	PtrMemberAccess	Z_OBJCE_P ( this_ptr ) -> name		35659	0					
ANR	35842	CallExpression	Z_OBJCE_P ( this_ptr )		35659	0					
ANR	35843	Callee	Z_OBJCE_P		35659	0					
ANR	35844	Identifier	Z_OBJCE_P		35659	0					
ANR	35845	ArgumentList	this_ptr		35659	1					
ANR	35846	Argument	this_ptr		35659	0					
ANR	35847	Identifier	this_ptr		35659	0					
ANR	35848	Identifier	name		35659	1					
ANR	35849	Argument	get_active_function_name ( )		35659	3					
ANR	35850	CallExpression	get_active_function_name ( )		35659	0					
ANR	35851	Callee	get_active_function_name		35659	0					
ANR	35852	Identifier	get_active_function_name		35659	0					
ANR	35853	ArgumentList			35659	1					
ANR	35854	Argument	ZSTR_VAL ( ce -> name )		35659	4					
ANR	35855	CallExpression	ZSTR_VAL ( ce -> name )		35659	0					
ANR	35856	Callee	ZSTR_VAL		35659	0					
ANR	35857	Identifier	ZSTR_VAL		35659	0					
ANR	35858	ArgumentList	ce -> name		35659	1					
ANR	35859	Argument	ce -> name		35659	0					
ANR	35860	PtrMemberAccess	ce -> name		35659	0					
ANR	35861	Identifier	ce		35659	0					
ANR	35862	Identifier	name		35659	1					
ANR	35863	Argument	get_active_function_name ( )		35659	5					
ANR	35864	CallExpression	get_active_function_name ( )		35659	0					
ANR	35865	Callee	get_active_function_name		35659	0					
ANR	35866	Identifier	get_active_function_name		35659	0					
ANR	35867	ArgumentList			35659	1					
ANR	35868	ExpressionStatement	"retval = zend_parse_va_args ( num_args , p , & va , flags )"	1014:2:25851:25903	35659	25	True				
ANR	35869	AssignmentExpression	"retval = zend_parse_va_args ( num_args , p , & va , flags )"		35659	0		=			
ANR	35870	Identifier	retval		35659	0					
ANR	35871	CallExpression	"zend_parse_va_args ( num_args , p , & va , flags )"		35659	1					
ANR	35872	Callee	zend_parse_va_args		35659	0					
ANR	35873	Identifier	zend_parse_va_args		35659	0					
ANR	35874	ArgumentList	num_args		35659	1					
ANR	35875	Argument	num_args		35659	0					
ANR	35876	Identifier	num_args		35659	0					
ANR	35877	Argument	p		35659	1					
ANR	35878	Identifier	p		35659	0					
ANR	35879	Argument	& va		35659	2					
ANR	35880	UnaryOperationExpression	& va		35659	0					
ANR	35881	UnaryOperator	&		35659	0					
ANR	35882	Identifier	va		35659	1					
ANR	35883	Argument	flags		35659	3					
ANR	35884	Identifier	flags		35659	0					
ANR	35885	ExpressionStatement	va_end ( va )	1015:2:25907:25917	35659	26	True				
ANR	35886	CallExpression	va_end ( va )		35659	0					
ANR	35887	Callee	va_end		35659	0					
ANR	35888	Identifier	va_end		35659	0					
ANR	35889	ArgumentList	va		35659	1					
ANR	35890	Argument	va		35659	0					
ANR	35891	Identifier	va		35659	0					
ANR	35892	ReturnStatement	return retval ;	1017:1:25923:25936	35659	8	True				
ANR	35893	Identifier	retval		35659	0					
ANR	35894	ReturnType	ZEND_API int		35659	1					
ANR	35895	Identifier	zend_parse_method_parameters		35659	2					
ANR	35896	ParameterList	"int num_args , zval * this_ptr , const char * type_spec"		35659	3					
ANR	35897	Parameter	int num_args	981:42:24729:24740	35659	0	True				
ANR	35898	ParameterType	int		35659	0					
ANR	35899	Identifier	num_args		35659	1					
ANR	35900	Parameter	zval * this_ptr	981:56:24743:24756	35659	1	True				
ANR	35901	ParameterType	zval *		35659	0					
ANR	35902	Identifier	this_ptr		35659	1					
ANR	35903	Parameter	const char * type_spec	981:72:24759:24779	35659	2	True				
ANR	35904	ParameterType	const char *		35659	0					
ANR	35905	Identifier	type_spec		35659	1					
ANR	35906	CFGEntryNode	ENTRY		35659		True				
ANR	35907	CFGExitNode	EXIT		35659		True				
ANR	35908	Symbol	instanceof_function		35659						
ANR	35909	Symbol	EG ( current_execute_data ) -> func		35659						
ANR	35910	Symbol	current_execute_data		35659						
ANR	35911	Symbol	flags		35659						
ANR	35912	Symbol	EG ( current_execute_data ) -> func -> common . scope		35659						
ANR	35913	Symbol	* EG		35659						
ANR	35914	Symbol	* ce		35659						
ANR	35915	Symbol	* * EG		35659						
ANR	35916	Symbol	* object		35659						
ANR	35917	Symbol	type_spec		35659						
ANR	35918	Symbol	num_args		35659						
ANR	35919	Symbol	E_CORE_ERROR		35659						
ANR	35920	Symbol	zend_parse_va_args		35659						
ANR	35921	Symbol	Z_OBJCE_P		35659						
ANR	35922	Symbol	ce -> name		35659						
ANR	35923	Symbol	* Z_OBJCE_P		35659						
ANR	35924	Symbol	ce		35659						
ANR	35925	Symbol	EG		35659						
ANR	35926	Symbol	NULL		35659						
ANR	35927	Symbol	Z_OBJCE_P ( this_ptr ) -> name		35659						
ANR	35928	Symbol	get_active_function_name		35659						
ANR	35929	Symbol	va		35659						
ANR	35930	Symbol	* EG ( current_execute_data ) -> func		35659						
ANR	35931	Symbol	Z_TYPE_P		35659						
ANR	35932	Symbol	retval		35659						
ANR	35933	Symbol	ZSTR_VAL		35659						
ANR	35934	Symbol	p		35659						
ANR	35935	Symbol	this_ptr		35659						
ANR	35936	Symbol	& va		35659						
ANR	35937	Symbol	EG ( current_execute_data ) -> func -> common		35659						
ANR	35938	Symbol	is_method		35659						
ANR	35939	Symbol	IS_OBJECT		35659						
ANR	35940	Symbol	object		35659						
ANR	35941	Function	zend_parse_method_parameters_ex	1021:0:25951:26869							
ANR	35942	FunctionDef	"zend_parse_method_parameters_ex (int flags , int num_args , zval * this_ptr , const char * type_spec)"		35941	0					
ANR	35943	CompoundStatement		1022:0:26075:26869	35941	0					
ANR	35944	IdentifierDeclStatement	va_list va ;	1023:1:26078:26088	35941	0	True				
ANR	35945	IdentifierDecl	va		35941	0					
ANR	35946	IdentifierDeclType	va_list		35941	0					
ANR	35947	Identifier	va		35941	1					
ANR	35948	IdentifierDeclStatement	int retval ;	1024:1:26091:26101	35941	1	True				
ANR	35949	IdentifierDecl	retval		35941	0					
ANR	35950	IdentifierDeclType	int		35941	0					
ANR	35951	Identifier	retval		35941	1					
ANR	35952	IdentifierDeclStatement	const char * p = type_spec ;	1025:1:26104:26129	35941	2	True				
ANR	35953	IdentifierDecl	* p = type_spec		35941	0					
ANR	35954	IdentifierDeclType	const char *		35941	0					
ANR	35955	Identifier	p		35941	1					
ANR	35956	AssignmentExpression	* p = type_spec		35941	2		=			
ANR	35957	Identifier	type_spec		35941	0					
ANR	35958	Identifier	type_spec		35941	1					
ANR	35959	IdentifierDeclStatement	zval * * object ;	1026:1:26132:26145	35941	3	True				
ANR	35960	IdentifierDecl	* * object		35941	0					
ANR	35961	IdentifierDeclType	zval * *		35941	0					
ANR	35962	Identifier	object		35941	1					
ANR	35963	IdentifierDeclStatement	zend_class_entry * ce ;	1027:1:26148:26168	35941	4	True				
ANR	35964	IdentifierDecl	* ce		35941	0					
ANR	35965	IdentifierDeclType	zend_class_entry *		35941	0					
ANR	35966	Identifier	ce		35941	1					
ANR	35967	IfStatement	if ( ! this_ptr )		35941	5					
ANR	35968	Condition	! this_ptr	1029:5:26176:26184	35941	0	True				
ANR	35969	UnaryOperationExpression	! this_ptr		35941	0					
ANR	35970	UnaryOperator	!		35941	0					
ANR	35971	Identifier	this_ptr		35941	1					
ANR	35972	CompoundStatement		8:16:111:111	35941	1					
ANR	35973	ExpressionStatement	"va_start ( va , type_spec )"	1030:2:26191:26214	35941	0	True				
ANR	35974	CallExpression	"va_start ( va , type_spec )"		35941	0					
ANR	35975	Callee	va_start		35941	0					
ANR	35976	Identifier	va_start		35941	0					
ANR	35977	ArgumentList	va		35941	1					
ANR	35978	Argument	va		35941	0					
ANR	35979	Identifier	va		35941	0					
ANR	35980	Argument	type_spec		35941	1					
ANR	35981	Identifier	type_spec		35941	0					
ANR	35982	ExpressionStatement	"retval = zend_parse_va_args ( num_args , type_spec , & va , flags )"	1031:2:26218:26278	35941	1	True				
ANR	35983	AssignmentExpression	"retval = zend_parse_va_args ( num_args , type_spec , & va , flags )"		35941	0		=			
ANR	35984	Identifier	retval		35941	0					
ANR	35985	CallExpression	"zend_parse_va_args ( num_args , type_spec , & va , flags )"		35941	1					
ANR	35986	Callee	zend_parse_va_args		35941	0					
ANR	35987	Identifier	zend_parse_va_args		35941	0					
ANR	35988	ArgumentList	num_args		35941	1					
ANR	35989	Argument	num_args		35941	0					
ANR	35990	Identifier	num_args		35941	0					
ANR	35991	Argument	type_spec		35941	1					
ANR	35992	Identifier	type_spec		35941	0					
ANR	35993	Argument	& va		35941	2					
ANR	35994	UnaryOperationExpression	& va		35941	0					
ANR	35995	UnaryOperator	&		35941	0					
ANR	35996	Identifier	va		35941	1					
ANR	35997	Argument	flags		35941	3					
ANR	35998	Identifier	flags		35941	0					
ANR	35999	ExpressionStatement	va_end ( va )	1032:2:26282:26292	35941	2	True				
ANR	36000	CallExpression	va_end ( va )		35941	0					
ANR	36001	Callee	va_end		35941	0					
ANR	36002	Identifier	va_end		35941	0					
ANR	36003	ArgumentList	va		35941	1					
ANR	36004	Argument	va		35941	0					
ANR	36005	Identifier	va		35941	0					
ANR	36006	ElseStatement	else		35941	0					
ANR	36007	CompoundStatement		12:8:226:226	35941	0					
ANR	36008	ExpressionStatement	p ++	1034:2:26306:26309	35941	0	True				
ANR	36009	PostIncDecOperationExpression	p ++		35941	0					
ANR	36010	Identifier	p		35941	0					
ANR	36011	IncDec	++		35941	1					
ANR	36012	ExpressionStatement	"va_start ( va , type_spec )"	1035:2:26313:26336	35941	1	True				
ANR	36013	CallExpression	"va_start ( va , type_spec )"		35941	0					
ANR	36014	Callee	va_start		35941	0					
ANR	36015	Identifier	va_start		35941	0					
ANR	36016	ArgumentList	va		35941	1					
ANR	36017	Argument	va		35941	0					
ANR	36018	Identifier	va		35941	0					
ANR	36019	Argument	type_spec		35941	1					
ANR	36020	Identifier	type_spec		35941	0					
ANR	36021	Statement	object	1037:2:26341:26346	35941	2	True				
ANR	36022	Statement	=	1037:9:26348:26348	35941	3	True				
ANR	36023	Statement	va_arg	1037:11:26350:26355	35941	4	True				
ANR	36024	Statement	(	1037:17:26356:26356	35941	5	True				
ANR	36025	Statement	va	1037:18:26357:26358	35941	6	True				
ANR	36026	Statement	","	1037:20:26359:26359	35941	7	True				
ANR	36027	Statement	zval	1037:22:26361:26364	35941	8	True				
ANR	36028	Statement	*	1037:27:26366:26366	35941	9	True				
ANR	36029	Statement	*	1037:28:26367:26367	35941	10	True				
ANR	36030	Statement	)	1037:29:26368:26368	35941	11	True				
ANR	36031	ExpressionStatement		1037:30:26369:26369	35941	12	True				
ANR	36032	Statement	ce	1038:2:26373:26374	35941	13	True				
ANR	36033	Statement	=	1038:5:26376:26376	35941	14	True				
ANR	36034	Statement	va_arg	1038:7:26378:26383	35941	15	True				
ANR	36035	Statement	(	1038:13:26384:26384	35941	16	True				
ANR	36036	Statement	va	1038:14:26385:26386	35941	17	True				
ANR	36037	Statement	","	1038:16:26387:26387	35941	18	True				
ANR	36038	Statement	zend_class_entry	1038:18:26389:26404	35941	19	True				
ANR	36039	Statement	*	1038:35:26406:26406	35941	20	True				
ANR	36040	Statement	)	1038:36:26407:26407	35941	21	True				
ANR	36041	ExpressionStatement		1038:37:26408:26408	35941	22	True				
ANR	36042	ExpressionStatement	* object = this_ptr	1039:2:26412:26430	35941	23	True				
ANR	36043	AssignmentExpression	* object = this_ptr		35941	0		=			
ANR	36044	UnaryOperationExpression	* object		35941	0					
ANR	36045	UnaryOperator	*		35941	0					
ANR	36046	Identifier	object		35941	1					
ANR	36047	Identifier	this_ptr		35941	1					
ANR	36048	IfStatement	"if ( ce && ! instanceof_function ( Z_OBJCE_P ( this_ptr ) , ce ) )"		35941	24					
ANR	36049	Condition	"ce && ! instanceof_function ( Z_OBJCE_P ( this_ptr ) , ce )"	1041:6:26439:26489	35941	0	True				
ANR	36050	AndExpression	"ce && ! instanceof_function ( Z_OBJCE_P ( this_ptr ) , ce )"		35941	0		&&			
ANR	36051	Identifier	ce		35941	0					
ANR	36052	UnaryOperationExpression	"! instanceof_function ( Z_OBJCE_P ( this_ptr ) , ce )"		35941	1					
ANR	36053	UnaryOperator	!		35941	0					
ANR	36054	CallExpression	"instanceof_function ( Z_OBJCE_P ( this_ptr ) , ce )"		35941	1					
ANR	36055	Callee	instanceof_function		35941	0					
ANR	36056	Identifier	instanceof_function		35941	0					
ANR	36057	ArgumentList	Z_OBJCE_P ( this_ptr )		35941	1					
ANR	36058	Argument	Z_OBJCE_P ( this_ptr )		35941	0					
ANR	36059	CallExpression	Z_OBJCE_P ( this_ptr )		35941	0					
ANR	36060	Callee	Z_OBJCE_P		35941	0					
ANR	36061	Identifier	Z_OBJCE_P		35941	0					
ANR	36062	ArgumentList	this_ptr		35941	1					
ANR	36063	Argument	this_ptr		35941	0					
ANR	36064	Identifier	this_ptr		35941	0					
ANR	36065	Argument	ce		35941	1					
ANR	36066	Identifier	ce		35941	0					
ANR	36067	CompoundStatement		20:59:416:416	35941	1					
ANR	36068	IfStatement	if ( ! ( flags & ZEND_PARSE_PARAMS_QUIET ) )		35941	0					
ANR	36069	Condition	! ( flags & ZEND_PARSE_PARAMS_QUIET )	1042:7:26501:26534	35941	0	True				
ANR	36070	UnaryOperationExpression	! ( flags & ZEND_PARSE_PARAMS_QUIET )		35941	0					
ANR	36071	UnaryOperator	!		35941	0					
ANR	36072	BitAndExpression	flags & ZEND_PARSE_PARAMS_QUIET		35941	1		&			
ANR	36073	Identifier	flags		35941	0					
ANR	36074	Identifier	ZEND_PARSE_PARAMS_QUIET		35941	1					
ANR	36075	CompoundStatement		21:43:461:461	35941	1					
ANR	36076	ExpressionStatement	"zend_error_noreturn ( E_CORE_ERROR , ""%s::%s() must be derived from %s::%s"" , ZSTR_VAL ( ce -> name ) , get_active_function_name ( ) , ZSTR_VAL ( Z_OBJCE_P ( this_ptr ) -> name ) , get_active_function_name ( ) )"	1043:4:26543:26734	35941	0	True				
ANR	36077	CallExpression	"zend_error_noreturn ( E_CORE_ERROR , ""%s::%s() must be derived from %s::%s"" , ZSTR_VAL ( ce -> name ) , get_active_function_name ( ) , ZSTR_VAL ( Z_OBJCE_P ( this_ptr ) -> name ) , get_active_function_name ( ) )"		35941	0					
ANR	36078	Callee	zend_error_noreturn		35941	0					
ANR	36079	Identifier	zend_error_noreturn		35941	0					
ANR	36080	ArgumentList	E_CORE_ERROR		35941	1					
ANR	36081	Argument	E_CORE_ERROR		35941	0					
ANR	36082	Identifier	E_CORE_ERROR		35941	0					
ANR	36083	Argument	"""%s::%s() must be derived from %s::%s"""		35941	1					
ANR	36084	PrimaryExpression	"""%s::%s() must be derived from %s::%s"""		35941	0					
ANR	36085	Argument	ZSTR_VAL ( ce -> name )		35941	2					
ANR	36086	CallExpression	ZSTR_VAL ( ce -> name )		35941	0					
ANR	36087	Callee	ZSTR_VAL		35941	0					
ANR	36088	Identifier	ZSTR_VAL		35941	0					
ANR	36089	ArgumentList	ce -> name		35941	1					
ANR	36090	Argument	ce -> name		35941	0					
ANR	36091	PtrMemberAccess	ce -> name		35941	0					
ANR	36092	Identifier	ce		35941	0					
ANR	36093	Identifier	name		35941	1					
ANR	36094	Argument	get_active_function_name ( )		35941	3					
ANR	36095	CallExpression	get_active_function_name ( )		35941	0					
ANR	36096	Callee	get_active_function_name		35941	0					
ANR	36097	Identifier	get_active_function_name		35941	0					
ANR	36098	ArgumentList			35941	1					
ANR	36099	Argument	ZSTR_VAL ( Z_OBJCE_P ( this_ptr ) -> name )		35941	4					
ANR	36100	CallExpression	ZSTR_VAL ( Z_OBJCE_P ( this_ptr ) -> name )		35941	0					
ANR	36101	Callee	ZSTR_VAL		35941	0					
ANR	36102	Identifier	ZSTR_VAL		35941	0					
ANR	36103	ArgumentList	Z_OBJCE_P ( this_ptr ) -> name		35941	1					
ANR	36104	Argument	Z_OBJCE_P ( this_ptr ) -> name		35941	0					
ANR	36105	PtrMemberAccess	Z_OBJCE_P ( this_ptr ) -> name		35941	0					
ANR	36106	CallExpression	Z_OBJCE_P ( this_ptr )		35941	0					
ANR	36107	Callee	Z_OBJCE_P		35941	0					
ANR	36108	Identifier	Z_OBJCE_P		35941	0					
ANR	36109	ArgumentList	this_ptr		35941	1					
ANR	36110	Argument	this_ptr		35941	0					
ANR	36111	Identifier	this_ptr		35941	0					
ANR	36112	Identifier	name		35941	1					
ANR	36113	Argument	get_active_function_name ( )		35941	5					
ANR	36114	CallExpression	get_active_function_name ( )		35941	0					
ANR	36115	Callee	get_active_function_name		35941	0					
ANR	36116	Identifier	get_active_function_name		35941	0					
ANR	36117	ArgumentList			35941	1					
ANR	36118	ExpressionStatement	va_end ( va )	1046:3:26744:26754	35941	1	True				
ANR	36119	CallExpression	va_end ( va )		35941	0					
ANR	36120	Callee	va_end		35941	0					
ANR	36121	Identifier	va_end		35941	0					
ANR	36122	ArgumentList	va		35941	1					
ANR	36123	Argument	va		35941	0					
ANR	36124	Identifier	va		35941	0					
ANR	36125	ReturnStatement	return FAILURE ;	1047:3:26759:26773	35941	2	True				
ANR	36126	Identifier	FAILURE		35941	0					
ANR	36127	ExpressionStatement	"retval = zend_parse_va_args ( num_args , p , & va , flags )"	1050:2:26782:26834	35941	25	True				
ANR	36128	AssignmentExpression	"retval = zend_parse_va_args ( num_args , p , & va , flags )"		35941	0		=			
ANR	36129	Identifier	retval		35941	0					
ANR	36130	CallExpression	"zend_parse_va_args ( num_args , p , & va , flags )"		35941	1					
ANR	36131	Callee	zend_parse_va_args		35941	0					
ANR	36132	Identifier	zend_parse_va_args		35941	0					
ANR	36133	ArgumentList	num_args		35941	1					
ANR	36134	Argument	num_args		35941	0					
ANR	36135	Identifier	num_args		35941	0					
ANR	36136	Argument	p		35941	1					
ANR	36137	Identifier	p		35941	0					
ANR	36138	Argument	& va		35941	2					
ANR	36139	UnaryOperationExpression	& va		35941	0					
ANR	36140	UnaryOperator	&		35941	0					
ANR	36141	Identifier	va		35941	1					
ANR	36142	Argument	flags		35941	3					
ANR	36143	Identifier	flags		35941	0					
ANR	36144	ExpressionStatement	va_end ( va )	1051:2:26838:26848	35941	26	True				
ANR	36145	CallExpression	va_end ( va )		35941	0					
ANR	36146	Callee	va_end		35941	0					
ANR	36147	Identifier	va_end		35941	0					
ANR	36148	ArgumentList	va		35941	1					
ANR	36149	Argument	va		35941	0					
ANR	36150	Identifier	va		35941	0					
ANR	36151	ReturnStatement	return retval ;	1053:1:26854:26867	35941	6	True				
ANR	36152	Identifier	retval		35941	0					
ANR	36153	ReturnType	ZEND_API int		35941	1					
ANR	36154	Identifier	zend_parse_method_parameters_ex		35941	2					
ANR	36155	ParameterList	"int flags , int num_args , zval * this_ptr , const char * type_spec"		35941	3					
ANR	36156	Parameter	int flags	1021:45:25996:26004	35941	0	True				
ANR	36157	ParameterType	int		35941	0					
ANR	36158	Identifier	flags		35941	1					
ANR	36159	Parameter	int num_args	1021:56:26007:26018	35941	1	True				
ANR	36160	ParameterType	int		35941	0					
ANR	36161	Identifier	num_args		35941	1					
ANR	36162	Parameter	zval * this_ptr	1021:70:26021:26034	35941	2	True				
ANR	36163	ParameterType	zval *		35941	0					
ANR	36164	Identifier	this_ptr		35941	1					
ANR	36165	Parameter	const char * type_spec	1021:86:26037:26057	35941	3	True				
ANR	36166	ParameterType	const char *		35941	0					
ANR	36167	Identifier	type_spec		35941	1					
ANR	36168	CFGEntryNode	ENTRY		35941		True				
ANR	36169	CFGExitNode	EXIT		35941		True				
ANR	36170	Symbol	instanceof_function		35941						
ANR	36171	Symbol	ce		35941						
ANR	36172	Symbol	Z_OBJCE_P ( this_ptr ) -> name		35941						
ANR	36173	Symbol	flags		35941						
ANR	36174	Symbol	get_active_function_name		35941						
ANR	36175	Symbol	va		35941						
ANR	36176	Symbol	* ce		35941						
ANR	36177	Symbol	* object		35941						
ANR	36178	Symbol	FAILURE		35941						
ANR	36179	Symbol	retval		35941						
ANR	36180	Symbol	ZSTR_VAL		35941						
ANR	36181	Symbol	p		35941						
ANR	36182	Symbol	this_ptr		35941						
ANR	36183	Symbol	type_spec		35941						
ANR	36184	Symbol	& va		35941						
ANR	36185	Symbol	num_args		35941						
ANR	36186	Symbol	E_CORE_ERROR		35941						
ANR	36187	Symbol	zend_parse_va_args		35941						
ANR	36188	Symbol	Z_OBJCE_P		35941						
ANR	36189	Symbol	ZEND_PARSE_PARAMS_QUIET		35941						
ANR	36190	Symbol	ce -> name		35941						
ANR	36191	Symbol	object		35941						
ANR	36192	Symbol	* Z_OBJCE_P		35941						
ANR	36193	Function	_array_init	1058:0:26919:27120							
ANR	36194	FunctionDef	"_array_init (zval * arg , uint32_t size ZEND_FILE_LINE_DC)"		36193	0					
ANR	36195	CompoundStatement		1059:0:26998:27120	36193	0					
ANR	36196	ExpressionStatement	ZVAL_NEW_ARR ( arg )	1060:1:27001:27018	36193	0	True				
ANR	36197	CallExpression	ZVAL_NEW_ARR ( arg )		36193	0					
ANR	36198	Callee	ZVAL_NEW_ARR		36193	0					
ANR	36199	Identifier	ZVAL_NEW_ARR		36193	0					
ANR	36200	ArgumentList	arg		36193	1					
ANR	36201	Argument	arg		36193	0					
ANR	36202	Identifier	arg		36193	0					
ANR	36203	Statement	_zend_hash_init	1061:1:27021:27035	36193	1	True				
ANR	36204	Statement	(	1061:16:27036:27036	36193	2	True				
ANR	36205	Statement	Z_ARRVAL_P	1061:17:27037:27046	36193	3	True				
ANR	36206	Statement	(	1061:27:27047:27047	36193	4	True				
ANR	36207	Statement	arg	1061:28:27048:27050	36193	5	True				
ANR	36208	Statement	)	1061:31:27051:27051	36193	6	True				
ANR	36209	Statement	","	1061:32:27052:27052	36193	7	True				
ANR	36210	Statement	size	1061:34:27054:27057	36193	8	True				
ANR	36211	Statement	","	1061:38:27058:27058	36193	9	True				
ANR	36212	Statement	ZVAL_PTR_DTOR	1061:40:27060:27072	36193	10	True				
ANR	36213	Statement	","	1061:53:27073:27073	36193	11	True				
ANR	36214	Statement	0	1061:55:27075:27075	36193	12	True				
ANR	36215	Statement	ZEND_FILE_LINE_RELAY_CC	1061:57:27077:27099	36193	13	True				
ANR	36216	Statement	)	1061:80:27100:27100	36193	14	True				
ANR	36217	ExpressionStatement		1061:81:27101:27101	36193	15	True				
ANR	36218	ReturnStatement	return SUCCESS ;	1062:1:27104:27118	36193	16	True				
ANR	36219	Identifier	SUCCESS		36193	0					
ANR	36220	ReturnType	ZEND_API int		36193	1					
ANR	36221	Identifier	_array_init		36193	2					
ANR	36222	ParameterList	"zval * arg , uint32_t size ZEND_FILE_LINE_DC"		36193	3					
ANR	36223	Parameter	zval * arg	1058:25:26944:26952	36193	0	True				
ANR	36224	ParameterType	zval *		36193	0					
ANR	36225	Identifier	arg		36193	1					
ANR	36226	Parameter	uint32_t size ZEND_FILE_LINE_DC	1058:36:26955:26985	36193	1	True				
ANR	36227	ParameterType	uint32_t size		36193	0					
ANR	36228	Identifier	ZEND_FILE_LINE_DC		36193	1					
ANR	36229	CFGEntryNode	ENTRY		36193		True				
ANR	36230	CFGExitNode	EXIT		36193		True				
ANR	36231	Symbol	SUCCESS		36193						
ANR	36232	Symbol	arg		36193						
ANR	36233	Symbol	ZEND_FILE_LINE_DC		36193						
ANR	36234	Function	zend_merge_properties	1068:0:27278:27744							
ANR	36235	FunctionDef	"zend_merge_properties (zval * obj , HashTable * properties)"		36234	0					
ANR	36236	CompoundStatement		1069:0:27358:27744	36234	0					
ANR	36237	IdentifierDeclStatement	const zend_object_handlers * obj_ht = Z_OBJ_HT_P ( obj ) ;	1070:1:27361:27413	36234	0	True				
ANR	36238	IdentifierDecl	* obj_ht = Z_OBJ_HT_P ( obj )		36234	0					
ANR	36239	IdentifierDeclType	const zend_object_handlers *		36234	0					
ANR	36240	Identifier	obj_ht		36234	1					
ANR	36241	AssignmentExpression	* obj_ht = Z_OBJ_HT_P ( obj )		36234	2		=			
ANR	36242	Identifier	obj_ht		36234	0					
ANR	36243	CallExpression	Z_OBJ_HT_P ( obj )		36234	1					
ANR	36244	Callee	Z_OBJ_HT_P		36234	0					
ANR	36245	Identifier	Z_OBJ_HT_P		36234	0					
ANR	36246	ArgumentList	obj		36234	1					
ANR	36247	Argument	obj		36234	0					
ANR	36248	Identifier	obj		36234	0					
ANR	36249	IdentifierDeclStatement	zend_class_entry * old_scope = EG ( scope ) ;	1071:1:27416:27455	36234	1	True				
ANR	36250	IdentifierDecl	* old_scope = EG ( scope )		36234	0					
ANR	36251	IdentifierDeclType	zend_class_entry *		36234	0					
ANR	36252	Identifier	old_scope		36234	1					
ANR	36253	AssignmentExpression	* old_scope = EG ( scope )		36234	2		=			
ANR	36254	Identifier	old_scope		36234	0					
ANR	36255	CallExpression	EG ( scope )		36234	1					
ANR	36256	Callee	EG		36234	0					
ANR	36257	Identifier	EG		36234	0					
ANR	36258	ArgumentList	scope		36234	1					
ANR	36259	Argument	scope		36234	0					
ANR	36260	Identifier	scope		36234	0					
ANR	36261	IdentifierDeclStatement	zend_string * key ;	1072:1:27458:27474	36234	2	True				
ANR	36262	IdentifierDecl	* key		36234	0					
ANR	36263	IdentifierDeclType	zend_string *		36234	0					
ANR	36264	Identifier	key		36234	1					
ANR	36265	IdentifierDeclStatement	zval * value ;	1073:1:27477:27488	36234	3	True				
ANR	36266	IdentifierDecl	* value		36234	0					
ANR	36267	IdentifierDeclType	zval *		36234	0					
ANR	36268	Identifier	value		36234	1					
ANR	36269	ExpressionStatement	EG ( scope ) = Z_OBJCE_P ( obj )	1075:1:27492:27518	36234	4	True				
ANR	36270	AssignmentExpression	EG ( scope ) = Z_OBJCE_P ( obj )		36234	0		=			
ANR	36271	CallExpression	EG ( scope )		36234	0					
ANR	36272	Callee	EG		36234	0					
ANR	36273	Identifier	EG		36234	0					
ANR	36274	ArgumentList	scope		36234	1					
ANR	36275	Argument	scope		36234	0					
ANR	36276	Identifier	scope		36234	0					
ANR	36277	CallExpression	Z_OBJCE_P ( obj )		36234	1					
ANR	36278	Callee	Z_OBJCE_P		36234	0					
ANR	36279	Identifier	Z_OBJCE_P		36234	0					
ANR	36280	ArgumentList	obj		36234	1					
ANR	36281	Argument	obj		36234	0					
ANR	36282	Identifier	obj		36234	0					
ANR	36283	Statement	ZEND_HASH_FOREACH_STR_KEY_VAL	1076:1:27521:27549	36234	5	True				
ANR	36284	Statement	(	1076:30:27550:27550	36234	6	True				
ANR	36285	Statement	properties	1076:31:27551:27560	36234	7	True				
ANR	36286	Statement	","	1076:41:27561:27561	36234	8	True				
ANR	36287	Statement	key	1076:43:27563:27565	36234	9	True				
ANR	36288	Statement	","	1076:46:27566:27566	36234	10	True				
ANR	36289	Statement	value	1076:48:27568:27572	36234	11	True				
ANR	36290	Statement	)	1076:53:27573:27573	36234	12	True				
ANR	36291	CompoundStatement		8:55:216:216	36234	13					
ANR	36292	IfStatement	if ( key )		36234	0					
ANR	36293	Condition	key	1077:6:27583:27585	36234	0	True				
ANR	36294	Identifier	key		36234	0					
ANR	36295	CompoundStatement		10:3:234:245	36234	1					
ANR	36296	IdentifierDeclStatement	zval member ;	1078:3:27593:27604	36234	0	True				
ANR	36297	IdentifierDecl	member		36234	0					
ANR	36298	IdentifierDeclType	zval		36234	0					
ANR	36299	Identifier	member		36234	1					
ANR	36300	ExpressionStatement	"ZVAL_STR ( & member , key )"	1080:3:27610:27632	36234	1	True				
ANR	36301	CallExpression	"ZVAL_STR ( & member , key )"		36234	0					
ANR	36302	Callee	ZVAL_STR		36234	0					
ANR	36303	Identifier	ZVAL_STR		36234	0					
ANR	36304	ArgumentList	& member		36234	1					
ANR	36305	Argument	& member		36234	0					
ANR	36306	UnaryOperationExpression	& member		36234	0					
ANR	36307	UnaryOperator	&		36234	0					
ANR	36308	Identifier	member		36234	1					
ANR	36309	Argument	key		36234	1					
ANR	36310	Identifier	key		36234	0					
ANR	36311	ExpressionStatement	"obj_ht -> write_property ( obj , & member , value , NULL )"	1081:3:27637:27686	36234	2	True				
ANR	36312	CallExpression	"obj_ht -> write_property ( obj , & member , value , NULL )"		36234	0					
ANR	36313	Callee	obj_ht -> write_property		36234	0					
ANR	36314	PtrMemberAccess	obj_ht -> write_property		36234	0					
ANR	36315	Identifier	obj_ht		36234	0					
ANR	36316	Identifier	write_property		36234	1					
ANR	36317	ArgumentList	obj		36234	1					
ANR	36318	Argument	obj		36234	0					
ANR	36319	Identifier	obj		36234	0					
ANR	36320	Argument	& member		36234	1					
ANR	36321	UnaryOperationExpression	& member		36234	0					
ANR	36322	UnaryOperator	&		36234	0					
ANR	36323	Identifier	member		36234	1					
ANR	36324	Argument	value		36234	2					
ANR	36325	Identifier	value		36234	0					
ANR	36326	Argument	NULL		36234	3					
ANR	36327	Identifier	NULL		36234	0					
ANR	36328	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	1083:3:27695:27718	36234	14	True				
ANR	36329	CallExpression	ZEND_HASH_FOREACH_END ( )		36234	0					
ANR	36330	Callee	ZEND_HASH_FOREACH_END		36234	0					
ANR	36331	Identifier	ZEND_HASH_FOREACH_END		36234	0					
ANR	36332	ArgumentList			36234	1					
ANR	36333	ExpressionStatement	EG ( scope ) = old_scope	1084:1:27721:27742	36234	15	True				
ANR	36334	AssignmentExpression	EG ( scope ) = old_scope		36234	0		=			
ANR	36335	CallExpression	EG ( scope )		36234	0					
ANR	36336	Callee	EG		36234	0					
ANR	36337	Identifier	EG		36234	0					
ANR	36338	ArgumentList	scope		36234	1					
ANR	36339	Argument	scope		36234	0					
ANR	36340	Identifier	scope		36234	0					
ANR	36341	Identifier	old_scope		36234	1					
ANR	36342	ReturnType	ZEND_API void		36234	1					
ANR	36343	Identifier	zend_merge_properties		36234	2					
ANR	36344	ParameterList	"zval * obj , HashTable * properties"		36234	3					
ANR	36345	Parameter	zval * obj	1068:36:27314:27322	36234	0	True				
ANR	36346	ParameterType	zval *		36234	0					
ANR	36347	Identifier	obj		36234	1					
ANR	36348	Parameter	HashTable * properties	1068:47:27325:27345	36234	1	True				
ANR	36349	ParameterType	HashTable *		36234	0					
ANR	36350	Identifier	properties		36234	1					
ANR	36351	CFGEntryNode	ENTRY		36234		True				
ANR	36352	CFGExitNode	EXIT		36234		True				
ANR	36353	Symbol	EG		36234						
ANR	36354	Symbol	& member		36234						
ANR	36355	Symbol	NULL		36234						
ANR	36356	Symbol	old_scope		36234						
ANR	36357	Symbol	obj_ht		36234						
ANR	36358	Symbol	obj		36234						
ANR	36359	Symbol	scope		36234						
ANR	36360	Symbol	Z_OBJ_HT_P		36234						
ANR	36361	Symbol	Z_OBJCE_P		36234						
ANR	36362	Symbol	member		36234						
ANR	36363	Symbol	value		36234						
ANR	36364	Symbol	properties		36234						
ANR	36365	Symbol	key		36234						
ANR	36366	Function	zend_update_class_constants	1088:0:27757:30321							
ANR	36367	FunctionDef	zend_update_class_constants (zend_class_entry * class_type)		36366	0					
ANR	36368	CompoundStatement		1089:0:27838:30321	36366	0					
ANR	36369	IfStatement	if ( ! ( class_type -> ce_flags & ZEND_ACC_CONSTANTS_UPDATED ) )		36366	0					
ANR	36370	Condition	! ( class_type -> ce_flags & ZEND_ACC_CONSTANTS_UPDATED )	1090:5:27845:27896	36366	0	True				
ANR	36371	UnaryOperationExpression	! ( class_type -> ce_flags & ZEND_ACC_CONSTANTS_UPDATED )		36366	0					
ANR	36372	UnaryOperator	!		36366	0					
ANR	36373	BitAndExpression	class_type -> ce_flags & ZEND_ACC_CONSTANTS_UPDATED		36366	1		&			
ANR	36374	PtrMemberAccess	class_type -> ce_flags		36366	0					
ANR	36375	Identifier	class_type		36366	0					
ANR	36376	Identifier	ce_flags		36366	1					
ANR	36377	Identifier	ZEND_ACC_CONSTANTS_UPDATED		36366	1					
ANR	36378	CompoundStatement		2:59:60:60	36366	1					
ANR	36379	ExpressionStatement	class_type -> ce_flags |= ZEND_ACC_CONSTANTS_UPDATED	1091:2:27903:27953	36366	0	True				
ANR	36380	AssignmentExpression	class_type -> ce_flags |= ZEND_ACC_CONSTANTS_UPDATED		36366	0		|=			
ANR	36381	PtrMemberAccess	class_type -> ce_flags		36366	0					
ANR	36382	Identifier	class_type		36366	0					
ANR	36383	Identifier	ce_flags		36366	1					
ANR	36384	Identifier	ZEND_ACC_CONSTANTS_UPDATED		36366	1					
ANR	36385	IfStatement	if ( class_type -> parent )		36366	1					
ANR	36386	Condition	class_type -> parent	1093:6:27962:27979	36366	0	True				
ANR	36387	PtrMemberAccess	class_type -> parent		36366	0					
ANR	36388	Identifier	class_type		36366	0					
ANR	36389	Identifier	parent		36366	1					
ANR	36390	CompoundStatement		5:26:143:143	36366	1					
ANR	36391	IfStatement	if ( UNEXPECTED ( zend_update_class_constants ( class_type -> parent ) != SUCCESS ) )		36366	0					
ANR	36392	Condition	UNEXPECTED ( zend_update_class_constants ( class_type -> parent ) != SUCCESS )	1094:7:27991:28060	36366	0	True				
ANR	36393	CallExpression	UNEXPECTED ( zend_update_class_constants ( class_type -> parent ) != SUCCESS )		36366	0					
ANR	36394	Callee	UNEXPECTED		36366	0					
ANR	36395	Identifier	UNEXPECTED		36366	0					
ANR	36396	ArgumentList	zend_update_class_constants ( class_type -> parent ) != SUCCESS		36366	1					
ANR	36397	Argument	zend_update_class_constants ( class_type -> parent ) != SUCCESS		36366	0					
ANR	36398	EqualityExpression	zend_update_class_constants ( class_type -> parent ) != SUCCESS		36366	0		!=			
ANR	36399	CallExpression	zend_update_class_constants ( class_type -> parent )		36366	0					
ANR	36400	Callee	zend_update_class_constants		36366	0					
ANR	36401	Identifier	zend_update_class_constants		36366	0					
ANR	36402	ArgumentList	class_type -> parent		36366	1					
ANR	36403	Argument	class_type -> parent		36366	0					
ANR	36404	PtrMemberAccess	class_type -> parent		36366	0					
ANR	36405	Identifier	class_type		36366	0					
ANR	36406	Identifier	parent		36366	1					
ANR	36407	Identifier	SUCCESS		36366	1					
ANR	36408	CompoundStatement		6:79:224:224	36366	1					
ANR	36409	ReturnStatement	return FAILURE ;	1095:4:28069:28083	36366	0	True				
ANR	36410	Identifier	FAILURE		36366	0					
ANR	36411	IfStatement	if ( ! CE_STATIC_MEMBERS ( class_type ) && class_type -> default_static_members_count )		36366	2					
ANR	36412	Condition	! CE_STATIC_MEMBERS ( class_type ) && class_type -> default_static_members_count	1099:6:28101:28174	36366	0	True				
ANR	36413	AndExpression	! CE_STATIC_MEMBERS ( class_type ) && class_type -> default_static_members_count		36366	0		&&			
ANR	36414	UnaryOperationExpression	! CE_STATIC_MEMBERS ( class_type )		36366	0					
ANR	36415	UnaryOperator	!		36366	0					
ANR	36416	CallExpression	CE_STATIC_MEMBERS ( class_type )		36366	1					
ANR	36417	Callee	CE_STATIC_MEMBERS		36366	0					
ANR	36418	Identifier	CE_STATIC_MEMBERS		36366	0					
ANR	36419	ArgumentList	class_type		36366	1					
ANR	36420	Argument	class_type		36366	0					
ANR	36421	Identifier	class_type		36366	0					
ANR	36422	PtrMemberAccess	class_type -> default_static_members_count		36366	1					
ANR	36423	Identifier	class_type		36366	0					
ANR	36424	Identifier	default_static_members_count		36366	1					
ANR	36425	CompoundStatement		14:3:406:413	36366	1					
ANR	36426	IdentifierDeclStatement	int i ;	1101:3:28235:28240	36366	0	True				
ANR	36427	IdentifierDecl	i		36366	0					
ANR	36428	IdentifierDeclType	int		36366	0					
ANR	36429	Identifier	i		36366	1					
ANR	36430	IdentifierDeclStatement	zval * p ;	1102:3:28245:28252	36366	1	True				
ANR	36431	IdentifierDecl	* p		36366	0					
ANR	36432	IdentifierDeclType	zval *		36366	0					
ANR	36433	Identifier	p		36366	1					
ANR	36434	ExpressionStatement	CG ( static_members_table ) [ ( zend_intptr_t ) ( class_type -> static_members_table ) ] = emalloc ( sizeof ( zval ) * class_type -> default_static_members_count )	1105:3:28266:28408	36366	2	True				
ANR	36435	AssignmentExpression	CG ( static_members_table ) [ ( zend_intptr_t ) ( class_type -> static_members_table ) ] = emalloc ( sizeof ( zval ) * class_type -> default_static_members_count )		36366	0		=			
ANR	36436	ArrayIndexing	CG ( static_members_table ) [ ( zend_intptr_t ) ( class_type -> static_members_table ) ]		36366	0					
ANR	36437	CallExpression	CG ( static_members_table )		36366	0					
ANR	36438	Callee	CG		36366	0					
ANR	36439	Identifier	CG		36366	0					
ANR	36440	ArgumentList	static_members_table		36366	1					
ANR	36441	Argument	static_members_table		36366	0					
ANR	36442	Identifier	static_members_table		36366	0					
ANR	36443	CastExpression	( zend_intptr_t ) ( class_type -> static_members_table )		36366	1					
ANR	36444	CastTarget	zend_intptr_t		36366	0					
ANR	36445	PtrMemberAccess	class_type -> static_members_table		36366	1					
ANR	36446	Identifier	class_type		36366	0					
ANR	36447	Identifier	static_members_table		36366	1					
ANR	36448	CallExpression	emalloc ( sizeof ( zval ) * class_type -> default_static_members_count )		36366	1					
ANR	36449	Callee	emalloc		36366	0					
ANR	36450	Identifier	emalloc		36366	0					
ANR	36451	ArgumentList	sizeof ( zval ) * class_type -> default_static_members_count		36366	1					
ANR	36452	Argument	sizeof ( zval ) * class_type -> default_static_members_count		36366	0					
ANR	36453	MultiplicativeExpression	sizeof ( zval ) * class_type -> default_static_members_count		36366	0		*			
ANR	36454	SizeofExpression	sizeof ( zval )		36366	0					
ANR	36455	Sizeof	sizeof		36366	0					
ANR	36456	SizeofOperand	zval		36366	1					
ANR	36457	PtrMemberAccess	class_type -> default_static_members_count		36366	1					
ANR	36458	Identifier	class_type		36366	0					
ANR	36459	Identifier	default_static_members_count		36366	1					
ANR	36460	ForStatement	for ( i = 0 ; i < class_type -> default_static_members_count ; i ++ )		36366	3					
ANR	36461	ForInit	i = 0 ;	1109:8:28535:28540	36366	0	True				
ANR	36462	AssignmentExpression	i = 0		36366	0		=			
ANR	36463	Identifier	i		36366	0					
ANR	36464	PrimaryExpression	0		36366	1					
ANR	36465	Condition	i < class_type -> default_static_members_count	1109:15:28542:28585	36366	1	True				
ANR	36466	RelationalExpression	i < class_type -> default_static_members_count		36366	0		<			
ANR	36467	Identifier	i		36366	0					
ANR	36468	PtrMemberAccess	class_type -> default_static_members_count		36366	1					
ANR	36469	Identifier	class_type		36366	0					
ANR	36470	Identifier	default_static_members_count		36366	1					
ANR	36471	PostIncDecOperationExpression	i ++	1109:61:28588:28590	36366	2	True				
ANR	36472	Identifier	i		36366	0					
ANR	36473	IncDec	++		36366	1					
ANR	36474	CompoundStatement		21:66:754:754	36366	3					
ANR	36475	ExpressionStatement	p = & class_type -> default_static_members_table [ i ]	1110:4:28599:28647	36366	0	True				
ANR	36476	AssignmentExpression	p = & class_type -> default_static_members_table [ i ]		36366	0		=			
ANR	36477	Identifier	p		36366	0					
ANR	36478	UnaryOperationExpression	& class_type -> default_static_members_table [ i ]		36366	1					
ANR	36479	UnaryOperator	&		36366	0					
ANR	36480	ArrayIndexing	class_type -> default_static_members_table [ i ]		36366	1					
ANR	36481	PtrMemberAccess	class_type -> default_static_members_table		36366	0					
ANR	36482	Identifier	class_type		36366	0					
ANR	36483	Identifier	default_static_members_table		36366	1					
ANR	36484	Identifier	i		36366	1					
ANR	36485	IfStatement	if ( Z_ISREF_P ( p ) && class_type -> parent && i < class_type -> parent -> default_static_members_count && p == & class_type -> parent -> default_static_members_table [ i ] && Z_TYPE ( CE_STATIC_MEMBERS ( class_type -> parent ) [ i ] ) != IS_UNDEF )		36366	1					
ANR	36486	Condition	Z_ISREF_P ( p ) && class_type -> parent && i < class_type -> parent -> default_static_members_count && p == & class_type -> parent -> default_static_members_table [ i ] && Z_TYPE ( CE_STATIC_MEMBERS ( class_type -> parent ) [ i ] ) != IS_UNDEF	1111:8:28657:28891	36366	0	True				
ANR	36487	AndExpression	Z_ISREF_P ( p ) && class_type -> parent && i < class_type -> parent -> default_static_members_count && p == & class_type -> parent -> default_static_members_table [ i ] && Z_TYPE ( CE_STATIC_MEMBERS ( class_type -> parent ) [ i ] ) != IS_UNDEF		36366	0		&&			
ANR	36488	CallExpression	Z_ISREF_P ( p )		36366	0					
ANR	36489	Callee	Z_ISREF_P		36366	0					
ANR	36490	Identifier	Z_ISREF_P		36366	0					
ANR	36491	ArgumentList	p		36366	1					
ANR	36492	Argument	p		36366	0					
ANR	36493	Identifier	p		36366	0					
ANR	36494	AndExpression	class_type -> parent && i < class_type -> parent -> default_static_members_count && p == & class_type -> parent -> default_static_members_table [ i ] && Z_TYPE ( CE_STATIC_MEMBERS ( class_type -> parent ) [ i ] ) != IS_UNDEF		36366	1		&&			
ANR	36495	PtrMemberAccess	class_type -> parent		36366	0					
ANR	36496	Identifier	class_type		36366	0					
ANR	36497	Identifier	parent		36366	1					
ANR	36498	AndExpression	i < class_type -> parent -> default_static_members_count && p == & class_type -> parent -> default_static_members_table [ i ] && Z_TYPE ( CE_STATIC_MEMBERS ( class_type -> parent ) [ i ] ) != IS_UNDEF		36366	1		&&			
ANR	36499	RelationalExpression	i < class_type -> parent -> default_static_members_count		36366	0		<			
ANR	36500	Identifier	i		36366	0					
ANR	36501	PtrMemberAccess	class_type -> parent -> default_static_members_count		36366	1					
ANR	36502	PtrMemberAccess	class_type -> parent		36366	0					
ANR	36503	Identifier	class_type		36366	0					
ANR	36504	Identifier	parent		36366	1					
ANR	36505	Identifier	default_static_members_count		36366	1					
ANR	36506	AndExpression	p == & class_type -> parent -> default_static_members_table [ i ] && Z_TYPE ( CE_STATIC_MEMBERS ( class_type -> parent ) [ i ] ) != IS_UNDEF		36366	1		&&			
ANR	36507	EqualityExpression	p == & class_type -> parent -> default_static_members_table [ i ]		36366	0		==			
ANR	36508	Identifier	p		36366	0					
ANR	36509	UnaryOperationExpression	& class_type -> parent -> default_static_members_table [ i ]		36366	1					
ANR	36510	UnaryOperator	&		36366	0					
ANR	36511	ArrayIndexing	class_type -> parent -> default_static_members_table [ i ]		36366	1					
ANR	36512	PtrMemberAccess	class_type -> parent -> default_static_members_table		36366	0					
ANR	36513	PtrMemberAccess	class_type -> parent		36366	0					
ANR	36514	Identifier	class_type		36366	0					
ANR	36515	Identifier	parent		36366	1					
ANR	36516	Identifier	default_static_members_table		36366	1					
ANR	36517	Identifier	i		36366	1					
ANR	36518	EqualityExpression	Z_TYPE ( CE_STATIC_MEMBERS ( class_type -> parent ) [ i ] ) != IS_UNDEF		36366	1		!=			
ANR	36519	CallExpression	Z_TYPE ( CE_STATIC_MEMBERS ( class_type -> parent ) [ i ] )		36366	0					
ANR	36520	Callee	Z_TYPE		36366	0					
ANR	36521	Identifier	Z_TYPE		36366	0					
ANR	36522	ArgumentList	CE_STATIC_MEMBERS ( class_type -> parent ) [ i ]		36366	1					
ANR	36523	Argument	CE_STATIC_MEMBERS ( class_type -> parent ) [ i ]		36366	0					
ANR	36524	ArrayIndexing	CE_STATIC_MEMBERS ( class_type -> parent ) [ i ]		36366	0					
ANR	36525	CallExpression	CE_STATIC_MEMBERS ( class_type -> parent )		36366	0					
ANR	36526	Callee	CE_STATIC_MEMBERS		36366	0					
ANR	36527	Identifier	CE_STATIC_MEMBERS		36366	0					
ANR	36528	ArgumentList	class_type -> parent		36366	1					
ANR	36529	Argument	class_type -> parent		36366	0					
ANR	36530	PtrMemberAccess	class_type -> parent		36366	0					
ANR	36531	Identifier	class_type		36366	0					
ANR	36532	Identifier	parent		36366	1					
ANR	36533	Identifier	i		36366	1					
ANR	36534	Identifier	IS_UNDEF		36366	1					
ANR	36535	CompoundStatement		29:5:1067:1118	36366	1					
ANR	36536	IdentifierDeclStatement	zval * q = & CE_STATIC_MEMBERS ( class_type -> parent ) [ i ] ;	1117:5:28906:28957	36366	0	True				
ANR	36537	IdentifierDecl	* q = & CE_STATIC_MEMBERS ( class_type -> parent ) [ i ]		36366	0					
ANR	36538	IdentifierDeclType	zval *		36366	0					
ANR	36539	Identifier	q		36366	1					
ANR	36540	AssignmentExpression	* q = & CE_STATIC_MEMBERS ( class_type -> parent ) [ i ]		36366	2		=			
ANR	36541	Identifier	q		36366	0					
ANR	36542	UnaryOperationExpression	& CE_STATIC_MEMBERS ( class_type -> parent ) [ i ]		36366	1					
ANR	36543	UnaryOperator	&		36366	0					
ANR	36544	ArrayIndexing	CE_STATIC_MEMBERS ( class_type -> parent ) [ i ]		36366	1					
ANR	36545	CallExpression	CE_STATIC_MEMBERS ( class_type -> parent )		36366	0					
ANR	36546	Callee	CE_STATIC_MEMBERS		36366	0					
ANR	36547	Identifier	CE_STATIC_MEMBERS		36366	0					
ANR	36548	ArgumentList	class_type -> parent		36366	1					
ANR	36549	Argument	class_type -> parent		36366	0					
ANR	36550	PtrMemberAccess	class_type -> parent		36366	0					
ANR	36551	Identifier	class_type		36366	0					
ANR	36552	Identifier	parent		36366	1					
ANR	36553	Identifier	i		36366	1					
ANR	36554	ExpressionStatement	"ZVAL_NEW_REF ( q , q )"	1119:5:28965:28983	36366	1	True				
ANR	36555	CallExpression	"ZVAL_NEW_REF ( q , q )"		36366	0					
ANR	36556	Callee	ZVAL_NEW_REF		36366	0					
ANR	36557	Identifier	ZVAL_NEW_REF		36366	0					
ANR	36558	ArgumentList	q		36366	1					
ANR	36559	Argument	q		36366	0					
ANR	36560	Identifier	q		36366	0					
ANR	36561	Argument	q		36366	1					
ANR	36562	Identifier	q		36366	0					
ANR	36563	ExpressionStatement	"ZVAL_COPY_VALUE ( & CE_STATIC_MEMBERS ( class_type ) [ i ] , q )"	1120:5:28990:29043	36366	2	True				
ANR	36564	CallExpression	"ZVAL_COPY_VALUE ( & CE_STATIC_MEMBERS ( class_type ) [ i ] , q )"		36366	0					
ANR	36565	Callee	ZVAL_COPY_VALUE		36366	0					
ANR	36566	Identifier	ZVAL_COPY_VALUE		36366	0					
ANR	36567	ArgumentList	& CE_STATIC_MEMBERS ( class_type ) [ i ]		36366	1					
ANR	36568	Argument	& CE_STATIC_MEMBERS ( class_type ) [ i ]		36366	0					
ANR	36569	UnaryOperationExpression	& CE_STATIC_MEMBERS ( class_type ) [ i ]		36366	0					
ANR	36570	UnaryOperator	&		36366	0					
ANR	36571	ArrayIndexing	CE_STATIC_MEMBERS ( class_type ) [ i ]		36366	1					
ANR	36572	CallExpression	CE_STATIC_MEMBERS ( class_type )		36366	0					
ANR	36573	Callee	CE_STATIC_MEMBERS		36366	0					
ANR	36574	Identifier	CE_STATIC_MEMBERS		36366	0					
ANR	36575	ArgumentList	class_type		36366	1					
ANR	36576	Argument	class_type		36366	0					
ANR	36577	Identifier	class_type		36366	0					
ANR	36578	Identifier	i		36366	1					
ANR	36579	Argument	q		36366	1					
ANR	36580	Identifier	q		36366	0					
ANR	36581	ExpressionStatement	Z_ADDREF_P ( q )	1121:5:29050:29063	36366	3	True				
ANR	36582	CallExpression	Z_ADDREF_P ( q )		36366	0					
ANR	36583	Callee	Z_ADDREF_P		36366	0					
ANR	36584	Identifier	Z_ADDREF_P		36366	0					
ANR	36585	ArgumentList	q		36366	1					
ANR	36586	Argument	q		36366	0					
ANR	36587	Identifier	q		36366	0					
ANR	36588	ElseStatement	else		36366	0					
ANR	36589	CompoundStatement		34:11:1237:1237	36366	0					
ANR	36590	ExpressionStatement	"ZVAL_DUP ( & CE_STATIC_MEMBERS ( class_type ) [ i ] , p )"	1123:5:29083:29129	36366	0	True				
ANR	36591	CallExpression	"ZVAL_DUP ( & CE_STATIC_MEMBERS ( class_type ) [ i ] , p )"		36366	0					
ANR	36592	Callee	ZVAL_DUP		36366	0					
ANR	36593	Identifier	ZVAL_DUP		36366	0					
ANR	36594	ArgumentList	& CE_STATIC_MEMBERS ( class_type ) [ i ]		36366	1					
ANR	36595	Argument	& CE_STATIC_MEMBERS ( class_type ) [ i ]		36366	0					
ANR	36596	UnaryOperationExpression	& CE_STATIC_MEMBERS ( class_type ) [ i ]		36366	0					
ANR	36597	UnaryOperator	&		36366	0					
ANR	36598	ArrayIndexing	CE_STATIC_MEMBERS ( class_type ) [ i ]		36366	1					
ANR	36599	CallExpression	CE_STATIC_MEMBERS ( class_type )		36366	0					
ANR	36600	Callee	CE_STATIC_MEMBERS		36366	0					
ANR	36601	Identifier	CE_STATIC_MEMBERS		36366	0					
ANR	36602	ArgumentList	class_type		36366	1					
ANR	36603	Argument	class_type		36366	0					
ANR	36604	Identifier	class_type		36366	0					
ANR	36605	Identifier	i		36366	1					
ANR	36606	Argument	p		36366	1					
ANR	36607	Identifier	p		36366	0					
ANR	36608	ElseStatement	else		36366	0					
ANR	36609	CompoundStatement		43:3:1492:1521	36366	0					
ANR	36610	IdentifierDeclStatement	zend_class_entry * * scope = EG ( current_execute_data ) ? & EG ( scope ) : & CG ( active_class_entry ) ;	1127:3:29156:29246	36366	0	True				
ANR	36611	IdentifierDecl	* * scope = EG ( current_execute_data ) ? & EG ( scope ) : & CG ( active_class_entry )		36366	0					
ANR	36612	IdentifierDeclType	zend_class_entry * *		36366	0					
ANR	36613	Identifier	scope		36366	1					
ANR	36614	AssignmentExpression	* * scope = EG ( current_execute_data ) ? & EG ( scope ) : & CG ( active_class_entry )		36366	2		=			
ANR	36615	Identifier	scope		36366	0					
ANR	36616	ConditionalExpression	EG ( current_execute_data ) ? & EG ( scope ) : & CG ( active_class_entry )		36366	1					
ANR	36617	Condition	EG ( current_execute_data )		36366	0					
ANR	36618	CallExpression	EG ( current_execute_data )		36366	0					
ANR	36619	Callee	EG		36366	0					
ANR	36620	Identifier	EG		36366	0					
ANR	36621	ArgumentList	current_execute_data		36366	1					
ANR	36622	Argument	current_execute_data		36366	0					
ANR	36623	Identifier	current_execute_data		36366	0					
ANR	36624	UnaryOperationExpression	& EG ( scope )		36366	1					
ANR	36625	UnaryOperator	&		36366	0					
ANR	36626	CallExpression	EG ( scope )		36366	1					
ANR	36627	Callee	EG		36366	0					
ANR	36628	Identifier	EG		36366	0					
ANR	36629	ArgumentList	scope		36366	1					
ANR	36630	Argument	scope		36366	0					
ANR	36631	Identifier	scope		36366	0					
ANR	36632	UnaryOperationExpression	& CG ( active_class_entry )		36366	2					
ANR	36633	UnaryOperator	&		36366	0					
ANR	36634	CallExpression	CG ( active_class_entry )		36366	1					
ANR	36635	Callee	CG		36366	0					
ANR	36636	Identifier	CG		36366	0					
ANR	36637	ArgumentList	active_class_entry		36366	1					
ANR	36638	Argument	active_class_entry		36366	0					
ANR	36639	Identifier	active_class_entry		36366	0					
ANR	36640	IdentifierDeclStatement	zend_class_entry * old_scope = * scope ;	1128:3:29251:29287	36366	1	True				
ANR	36641	IdentifierDecl	* old_scope = * scope		36366	0					
ANR	36642	IdentifierDeclType	zend_class_entry *		36366	0					
ANR	36643	Identifier	old_scope		36366	1					
ANR	36644	AssignmentExpression	* old_scope = * scope		36366	2		=			
ANR	36645	Identifier	old_scope		36366	0					
ANR	36646	UnaryOperationExpression	* scope		36366	1					
ANR	36647	UnaryOperator	*		36366	0					
ANR	36648	Identifier	scope		36366	1					
ANR	36649	IdentifierDeclStatement	zend_class_entry * ce ;	1129:3:29292:29312	36366	2	True				
ANR	36650	IdentifierDecl	* ce		36366	0					
ANR	36651	IdentifierDeclType	zend_class_entry *		36366	0					
ANR	36652	Identifier	ce		36366	1					
ANR	36653	IdentifierDeclStatement	zval * val ;	1130:3:29317:29326	36366	3	True				
ANR	36654	IdentifierDecl	* val		36366	0					
ANR	36655	IdentifierDeclType	zval *		36366	0					
ANR	36656	Identifier	val		36366	1					
ANR	36657	IdentifierDeclStatement	zend_property_info * prop_info ;	1131:3:29331:29360	36366	4	True				
ANR	36658	IdentifierDecl	* prop_info		36366	0					
ANR	36659	IdentifierDeclType	zend_property_info *		36366	0					
ANR	36660	Identifier	prop_info		36366	1					
ANR	36661	ExpressionStatement	* scope = class_type	1133:3:29366:29385	36366	5	True				
ANR	36662	AssignmentExpression	* scope = class_type		36366	0		=			
ANR	36663	UnaryOperationExpression	* scope		36366	0					
ANR	36664	UnaryOperator	*		36366	0					
ANR	36665	Identifier	scope		36366	1					
ANR	36666	Identifier	class_type		36366	1					
ANR	36667	Statement	ZEND_HASH_FOREACH_VAL	1134:3:29390:29410	36366	6	True				
ANR	36668	Statement	(	1134:24:29411:29411	36366	7	True				
ANR	36669	Statement	&	1134:25:29412:29412	36366	8	True				
ANR	36670	Statement	class_type	1134:26:29413:29422	36366	9	True				
ANR	36671	Statement	->	1134:36:29423:29424	36366	10	True				
ANR	36672	Statement	constants_table	1134:38:29425:29439	36366	11	True				
ANR	36673	Statement	","	1134:53:29440:29440	36366	12	True				
ANR	36674	Statement	val	1134:55:29442:29444	36366	13	True				
ANR	36675	Statement	)	1134:58:29445:29445	36366	14	True				
ANR	36676	CompoundStatement		46:60:1608:1608	36366	15					
ANR	36677	ExpressionStatement	ZVAL_DEREF ( val )	1135:4:29453:29468	36366	0	True				
ANR	36678	CallExpression	ZVAL_DEREF ( val )		36366	0					
ANR	36679	Callee	ZVAL_DEREF		36366	0					
ANR	36680	Identifier	ZVAL_DEREF		36366	0					
ANR	36681	ArgumentList	val		36366	1					
ANR	36682	Argument	val		36366	0					
ANR	36683	Identifier	val		36366	0					
ANR	36684	IfStatement	if ( Z_CONSTANT_P ( val ) )		36366	1					
ANR	36685	Condition	Z_CONSTANT_P ( val )	1136:8:29478:29494	36366	0	True				
ANR	36686	CallExpression	Z_CONSTANT_P ( val )		36366	0					
ANR	36687	Callee	Z_CONSTANT_P		36366	0					
ANR	36688	Identifier	Z_CONSTANT_P		36366	0					
ANR	36689	ArgumentList	val		36366	1					
ANR	36690	Argument	val		36366	0					
ANR	36691	Identifier	val		36366	0					
ANR	36692	CompoundStatement		48:27:1658:1658	36366	1					
ANR	36693	IfStatement	"if ( UNEXPECTED ( zval_update_constant_ex ( val , 1 , class_type ) != SUCCESS ) )"		36366	0					
ANR	36694	Condition	"UNEXPECTED ( zval_update_constant_ex ( val , 1 , class_type ) != SUCCESS )"	1137:9:29508:29573	36366	0	True				
ANR	36695	CallExpression	"UNEXPECTED ( zval_update_constant_ex ( val , 1 , class_type ) != SUCCESS )"		36366	0					
ANR	36696	Callee	UNEXPECTED		36366	0					
ANR	36697	Identifier	UNEXPECTED		36366	0					
ANR	36698	ArgumentList	"zval_update_constant_ex ( val , 1 , class_type ) != SUCCESS"		36366	1					
ANR	36699	Argument	"zval_update_constant_ex ( val , 1 , class_type ) != SUCCESS"		36366	0					
ANR	36700	EqualityExpression	"zval_update_constant_ex ( val , 1 , class_type ) != SUCCESS"		36366	0		!=			
ANR	36701	CallExpression	"zval_update_constant_ex ( val , 1 , class_type )"		36366	0					
ANR	36702	Callee	zval_update_constant_ex		36366	0					
ANR	36703	Identifier	zval_update_constant_ex		36366	0					
ANR	36704	ArgumentList	val		36366	1					
ANR	36705	Argument	val		36366	0					
ANR	36706	Identifier	val		36366	0					
ANR	36707	Argument	1		36366	1					
ANR	36708	PrimaryExpression	1		36366	0					
ANR	36709	Argument	class_type		36366	2					
ANR	36710	Identifier	class_type		36366	0					
ANR	36711	Identifier	SUCCESS		36366	1					
ANR	36712	CompoundStatement		49:77:1737:1737	36366	1					
ANR	36713	ReturnStatement	return FAILURE ;	1138:6:29584:29598	36366	0	True				
ANR	36714	Identifier	FAILURE		36366	0					
ANR	36715	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	1141:5:29618:29641	36366	16	True				
ANR	36716	CallExpression	ZEND_HASH_FOREACH_END ( )		36366	0					
ANR	36717	Callee	ZEND_HASH_FOREACH_END		36366	0					
ANR	36718	Identifier	ZEND_HASH_FOREACH_END		36366	0					
ANR	36719	ArgumentList			36366	1					
ANR	36720	ExpressionStatement	ce = class_type	1143:3:29647:29662	36366	17	True				
ANR	36721	AssignmentExpression	ce = class_type		36366	0		=			
ANR	36722	Identifier	ce		36366	0					
ANR	36723	Identifier	class_type		36366	1					
ANR	36724	WhileStatement	while ( ce )		36366	18					
ANR	36725	Condition	ce	1144:10:29674:29675	36366	0	True				
ANR	36726	Identifier	ce		36366	0					
ANR	36727	CompoundStatement		56:14:1839:1839	36366	1					
ANR	36728	Statement	ZEND_HASH_FOREACH_PTR	1145:4:29684:29704	36366	0	True				
ANR	36729	Statement	(	1145:25:29705:29705	36366	1	True				
ANR	36730	Statement	&	1145:26:29706:29706	36366	2	True				
ANR	36731	Statement	ce	1145:27:29707:29708	36366	3	True				
ANR	36732	Statement	->	1145:29:29709:29710	36366	4	True				
ANR	36733	Statement	properties_info	1145:31:29711:29725	36366	5	True				
ANR	36734	Statement	","	1145:46:29726:29726	36366	6	True				
ANR	36735	Statement	prop_info	1145:48:29728:29736	36366	7	True				
ANR	36736	Statement	)	1145:57:29737:29737	36366	8	True				
ANR	36737	CompoundStatement		57:59:1900:1900	36366	9					
ANR	36738	IfStatement	if ( prop_info -> ce == ce )		36366	0					
ANR	36739	Condition	prop_info -> ce == ce	1146:9:29750:29768	36366	0	True				
ANR	36740	EqualityExpression	prop_info -> ce == ce		36366	0		==			
ANR	36741	PtrMemberAccess	prop_info -> ce		36366	0					
ANR	36742	Identifier	prop_info		36366	0					
ANR	36743	Identifier	ce		36366	1					
ANR	36744	Identifier	ce		36366	1					
ANR	36745	CompoundStatement		58:30:1932:1932	36366	1					
ANR	36746	IfStatement	if ( prop_info -> flags & ZEND_ACC_STATIC )		36366	0					
ANR	36747	Condition	prop_info -> flags & ZEND_ACC_STATIC	1147:10:29783:29816	36366	0	True				
ANR	36748	BitAndExpression	prop_info -> flags & ZEND_ACC_STATIC		36366	0		&			
ANR	36749	PtrMemberAccess	prop_info -> flags		36366	0					
ANR	36750	Identifier	prop_info		36366	0					
ANR	36751	Identifier	flags		36366	1					
ANR	36752	Identifier	ZEND_ACC_STATIC		36366	1					
ANR	36753	CompoundStatement		59:46:1980:1980	36366	1					
ANR	36754	ExpressionStatement	val = CE_STATIC_MEMBERS ( class_type ) + prop_info -> offset	1148:7:29828:29883	36366	0	True				
ANR	36755	AssignmentExpression	val = CE_STATIC_MEMBERS ( class_type ) + prop_info -> offset		36366	0		=			
ANR	36756	Identifier	val		36366	0					
ANR	36757	AdditiveExpression	CE_STATIC_MEMBERS ( class_type ) + prop_info -> offset		36366	1		+			
ANR	36758	CallExpression	CE_STATIC_MEMBERS ( class_type )		36366	0					
ANR	36759	Callee	CE_STATIC_MEMBERS		36366	0					
ANR	36760	Identifier	CE_STATIC_MEMBERS		36366	0					
ANR	36761	ArgumentList	class_type		36366	1					
ANR	36762	Argument	class_type		36366	0					
ANR	36763	Identifier	class_type		36366	0					
ANR	36764	PtrMemberAccess	prop_info -> offset		36366	1					
ANR	36765	Identifier	prop_info		36366	0					
ANR	36766	Identifier	offset		36366	1					
ANR	36767	ElseStatement	else		36366	0					
ANR	36768	CompoundStatement		61:13:2059:2059	36366	0					
ANR	36769	ExpressionStatement	val = ( zval * ) ( ( char * ) class_type -> default_properties_table + prop_info -> offset - OBJ_PROP_TO_OFFSET ( 0 ) )	1150:7:29907:30009	36366	0	True				
ANR	36770	AssignmentExpression	val = ( zval * ) ( ( char * ) class_type -> default_properties_table + prop_info -> offset - OBJ_PROP_TO_OFFSET ( 0 ) )		36366	0		=			
ANR	36771	Identifier	val		36366	0					
ANR	36772	CastExpression	( zval * ) ( ( char * ) class_type -> default_properties_table + prop_info -> offset - OBJ_PROP_TO_OFFSET ( 0 ) )		36366	1					
ANR	36773	CastTarget	zval *		36366	0					
ANR	36774	AdditiveExpression	( char * ) class_type -> default_properties_table + prop_info -> offset - OBJ_PROP_TO_OFFSET ( 0 )		36366	1		+			
ANR	36775	CastExpression	( char * ) class_type -> default_properties_table		36366	0					
ANR	36776	CastTarget	char *		36366	0					
ANR	36777	PtrMemberAccess	class_type -> default_properties_table		36366	1					
ANR	36778	Identifier	class_type		36366	0					
ANR	36779	Identifier	default_properties_table		36366	1					
ANR	36780	AdditiveExpression	prop_info -> offset - OBJ_PROP_TO_OFFSET ( 0 )		36366	1		-			
ANR	36781	PtrMemberAccess	prop_info -> offset		36366	0					
ANR	36782	Identifier	prop_info		36366	0					
ANR	36783	Identifier	offset		36366	1					
ANR	36784	CallExpression	OBJ_PROP_TO_OFFSET ( 0 )		36366	1					
ANR	36785	Callee	OBJ_PROP_TO_OFFSET		36366	0					
ANR	36786	Identifier	OBJ_PROP_TO_OFFSET		36366	0					
ANR	36787	ArgumentList	0		36366	1					
ANR	36788	Argument	0		36366	0					
ANR	36789	PrimaryExpression	0		36366	0					
ANR	36790	ExpressionStatement	ZVAL_DEREF ( val )	1152:6:30025:30040	36366	1	True				
ANR	36791	CallExpression	ZVAL_DEREF ( val )		36366	0					
ANR	36792	Callee	ZVAL_DEREF		36366	0					
ANR	36793	Identifier	ZVAL_DEREF		36366	0					
ANR	36794	ArgumentList	val		36366	1					
ANR	36795	Argument	val		36366	0					
ANR	36796	Identifier	val		36366	0					
ANR	36797	IfStatement	if ( Z_CONSTANT_P ( val ) )		36366	2					
ANR	36798	Condition	Z_CONSTANT_P ( val )	1153:10:30052:30068	36366	0	True				
ANR	36799	CallExpression	Z_CONSTANT_P ( val )		36366	0					
ANR	36800	Callee	Z_CONSTANT_P		36366	0					
ANR	36801	Identifier	Z_CONSTANT_P		36366	0					
ANR	36802	ArgumentList	val		36366	1					
ANR	36803	Argument	val		36366	0					
ANR	36804	Identifier	val		36366	0					
ANR	36805	CompoundStatement		65:29:2232:2232	36366	1					
ANR	36806	ExpressionStatement	* scope = ce	1154:7:30080:30091	36366	0	True				
ANR	36807	AssignmentExpression	* scope = ce		36366	0		=			
ANR	36808	UnaryOperationExpression	* scope		36366	0					
ANR	36809	UnaryOperator	*		36366	0					
ANR	36810	Identifier	scope		36366	1					
ANR	36811	Identifier	ce		36366	1					
ANR	36812	IfStatement	"if ( UNEXPECTED ( zval_update_constant_ex ( val , 1 , NULL ) != SUCCESS ) )"		36366	1					
ANR	36813	Condition	"UNEXPECTED ( zval_update_constant_ex ( val , 1 , NULL ) != SUCCESS )"	1155:11:30104:30163	36366	0	True				
ANR	36814	CallExpression	"UNEXPECTED ( zval_update_constant_ex ( val , 1 , NULL ) != SUCCESS )"		36366	0					
ANR	36815	Callee	UNEXPECTED		36366	0					
ANR	36816	Identifier	UNEXPECTED		36366	0					
ANR	36817	ArgumentList	"zval_update_constant_ex ( val , 1 , NULL ) != SUCCESS"		36366	1					
ANR	36818	Argument	"zval_update_constant_ex ( val , 1 , NULL ) != SUCCESS"		36366	0					
ANR	36819	EqualityExpression	"zval_update_constant_ex ( val , 1 , NULL ) != SUCCESS"		36366	0		!=			
ANR	36820	CallExpression	"zval_update_constant_ex ( val , 1 , NULL )"		36366	0					
ANR	36821	Callee	zval_update_constant_ex		36366	0					
ANR	36822	Identifier	zval_update_constant_ex		36366	0					
ANR	36823	ArgumentList	val		36366	1					
ANR	36824	Argument	val		36366	0					
ANR	36825	Identifier	val		36366	0					
ANR	36826	Argument	1		36366	1					
ANR	36827	PrimaryExpression	1		36366	0					
ANR	36828	Argument	NULL		36366	2					
ANR	36829	Identifier	NULL		36366	0					
ANR	36830	Identifier	SUCCESS		36366	1					
ANR	36831	CompoundStatement		67:73:2327:2327	36366	1					
ANR	36832	ReturnStatement	return FAILURE ;	1156:8:30176:30190	36366	0	True				
ANR	36833	Identifier	FAILURE		36366	0					
ANR	36834	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	1160:6:30222:30245	36366	10	True				
ANR	36835	CallExpression	ZEND_HASH_FOREACH_END ( )		36366	0					
ANR	36836	Callee	ZEND_HASH_FOREACH_END		36366	0					
ANR	36837	Identifier	ZEND_HASH_FOREACH_END		36366	0					
ANR	36838	ArgumentList			36366	1					
ANR	36839	ExpressionStatement	ce = ce -> parent	1161:4:30251:30266	36366	11	True				
ANR	36840	AssignmentExpression	ce = ce -> parent		36366	0		=			
ANR	36841	Identifier	ce		36366	0					
ANR	36842	PtrMemberAccess	ce -> parent		36366	1					
ANR	36843	Identifier	ce		36366	0					
ANR	36844	Identifier	parent		36366	1					
ANR	36845	ExpressionStatement	* scope = old_scope	1164:3:30277:30295	36366	19	True				
ANR	36846	AssignmentExpression	* scope = old_scope		36366	0		=			
ANR	36847	UnaryOperationExpression	* scope		36366	0					
ANR	36848	UnaryOperator	*		36366	0					
ANR	36849	Identifier	scope		36366	1					
ANR	36850	Identifier	old_scope		36366	1					
ANR	36851	ReturnStatement	return SUCCESS ;	1167:1:30305:30319	36366	1	True				
ANR	36852	Identifier	SUCCESS		36366	0					
ANR	36853	ReturnType	ZEND_API int		36366	1					
ANR	36854	Identifier	zend_update_class_constants		36366	2					
ANR	36855	ParameterList	zend_class_entry * class_type		36366	3					
ANR	36856	Parameter	zend_class_entry * class_type	1088:41:27798:27825	36366	0	True				
ANR	36857	ParameterType	zend_class_entry *		36366	0					
ANR	36858	Identifier	class_type		36366	1					
ANR	36859	CFGEntryNode	ENTRY		36366		True				
ANR	36860	CFGExitNode	EXIT		36366		True				
ANR	36861	Symbol	Z_CONSTANT_P		36366						
ANR	36862	Symbol	old_scope		36366						
ANR	36863	Symbol	current_execute_data		36366						
ANR	36864	Symbol	active_class_entry		36366						
ANR	36865	Symbol	OBJ_PROP_TO_OFFSET		36366						
ANR	36866	Symbol	* CG		36366						
ANR	36867	Symbol	Z_TYPE		36366						
ANR	36868	Symbol	* ce		36366						
ANR	36869	Symbol	& CG		36366						
ANR	36870	Symbol	class_type -> parent -> default_static_members_table		36366						
ANR	36871	Symbol	class_type		36366						
ANR	36872	Symbol	prop_info -> offset		36366						
ANR	36873	Symbol	* class_type -> static_members_table		36366						
ANR	36874	Symbol	class_type -> default_properties_table		36366						
ANR	36875	Symbol	* CE_STATIC_MEMBERS		36366						
ANR	36876	Symbol	IS_UNDEF		36366						
ANR	36877	Symbol	class_type -> default_static_members_count		36366						
ANR	36878	Symbol	prop_info		36366						
ANR	36879	Symbol	val		36366						
ANR	36880	Symbol	EG		36366						
ANR	36881	Symbol	NULL		36366						
ANR	36882	Symbol	ce -> parent		36366						
ANR	36883	Symbol	CE_STATIC_MEMBERS		36366						
ANR	36884	Symbol	class_type -> parent		36366						
ANR	36885	Symbol	class_type -> ce_flags		36366						
ANR	36886	Symbol	* class_type		36366						
ANR	36887	Symbol	class_type -> parent -> default_static_members_count		36366						
ANR	36888	Symbol	* scope		36366						
ANR	36889	Symbol	Z_ISREF_P		36366						
ANR	36890	Symbol	* * class_type		36366						
ANR	36891	Symbol	ZEND_ACC_CONSTANTS_UPDATED		36366						
ANR	36892	Symbol	class_type -> default_static_members_table		36366						
ANR	36893	Symbol	static_members_table		36366						
ANR	36894	Symbol	& EG		36366						
ANR	36895	Symbol	UNEXPECTED		36366						
ANR	36896	Symbol	* class_type -> parent		36366						
ANR	36897	Symbol	emalloc		36366						
ANR	36898	Symbol	zend_update_class_constants		36366						
ANR	36899	Symbol	scope		36366						
ANR	36900	Symbol	ZEND_ACC_STATIC		36366						
ANR	36901	Symbol	* prop_info		36366						
ANR	36902	Symbol	ce		36366						
ANR	36903	Symbol	SUCCESS		36366						
ANR	36904	Symbol	CG		36366						
ANR	36905	Symbol	i		36366						
ANR	36906	Symbol	FAILURE		36366						
ANR	36907	Symbol	p		36366						
ANR	36908	Symbol	q		36366						
ANR	36909	Symbol	* i		36366						
ANR	36910	Symbol	prop_info -> flags		36366						
ANR	36911	Symbol	class_type -> static_members_table		36366						
ANR	36912	Symbol	prop_info -> ce		36366						
ANR	36913	Symbol	zval_update_constant_ex		36366						
ANR	36914	Function	object_properties_init	1171:0:30334:30781							
ANR	36915	FunctionDef	"object_properties_init (zend_object * object , zend_class_entry * class_type)"		36914	0					
ANR	36916	CompoundStatement		1172:0:30432:30781	36914	0					
ANR	36917	IfStatement	if ( class_type -> default_properties_count )		36914	0					
ANR	36918	Condition	class_type -> default_properties_count	1173:5:30439:30474	36914	0	True				
ANR	36919	PtrMemberAccess	class_type -> default_properties_count		36914	0					
ANR	36920	Identifier	class_type		36914	0					
ANR	36921	Identifier	default_properties_count		36914	1					
ANR	36922	CompoundStatement		5:2:140:194	36914	1					
ANR	36923	IdentifierDeclStatement	zval * src = class_type -> default_properties_table ;	1174:2:30481:30529	36914	0	True				
ANR	36924	IdentifierDecl	* src = class_type -> default_properties_table		36914	0					
ANR	36925	IdentifierDeclType	zval *		36914	0					
ANR	36926	Identifier	src		36914	1					
ANR	36927	AssignmentExpression	* src = class_type -> default_properties_table		36914	2		=			
ANR	36928	Identifier	src		36914	0					
ANR	36929	PtrMemberAccess	class_type -> default_properties_table		36914	1					
ANR	36930	Identifier	class_type		36914	0					
ANR	36931	Identifier	default_properties_table		36914	1					
ANR	36932	IdentifierDeclStatement	zval * dst = object -> properties_table ;	1175:2:30533:30569	36914	1	True				
ANR	36933	IdentifierDecl	* dst = object -> properties_table		36914	0					
ANR	36934	IdentifierDeclType	zval *		36914	0					
ANR	36935	Identifier	dst		36914	1					
ANR	36936	AssignmentExpression	* dst = object -> properties_table		36914	2		=			
ANR	36937	Identifier	dst		36914	0					
ANR	36938	PtrMemberAccess	object -> properties_table		36914	1					
ANR	36939	Identifier	object		36914	0					
ANR	36940	Identifier	properties_table		36914	1					
ANR	36941	IdentifierDeclStatement	zval * end = src + class_type -> default_properties_count ;	1176:2:30573:30627	36914	2	True				
ANR	36942	IdentifierDecl	* end = src + class_type -> default_properties_count		36914	0					
ANR	36943	IdentifierDeclType	zval *		36914	0					
ANR	36944	Identifier	end		36914	1					
ANR	36945	AssignmentExpression	* end = src + class_type -> default_properties_count		36914	2		=			
ANR	36946	Identifier	end		36914	0					
ANR	36947	AdditiveExpression	src + class_type -> default_properties_count		36914	1		+			
ANR	36948	Identifier	src		36914	0					
ANR	36949	PtrMemberAccess	class_type -> default_properties_count		36914	1					
ANR	36950	Identifier	class_type		36914	0					
ANR	36951	Identifier	default_properties_count		36914	1					
ANR	36952	DoStatement	do		36914	3					
ANR	36953	CompoundStatement		7:5:202:202	36914	0					
ANR	36954	ExpressionStatement	"ZVAL_DUP ( dst , src )"	1180:3:30648:30666	36914	0	True				
ANR	36955	CallExpression	"ZVAL_DUP ( dst , src )"		36914	0					
ANR	36956	Callee	ZVAL_DUP		36914	0					
ANR	36957	Identifier	ZVAL_DUP		36914	0					
ANR	36958	ArgumentList	dst		36914	1					
ANR	36959	Argument	dst		36914	0					
ANR	36960	Identifier	dst		36914	0					
ANR	36961	Argument	src		36914	1					
ANR	36962	Identifier	src		36914	0					
ANR	36963	ExpressionStatement	src ++	1184:3:30708:30713	36914	1	True				
ANR	36964	PostIncDecOperationExpression	src ++		36914	0					
ANR	36965	Identifier	src		36914	0					
ANR	36966	IncDec	++		36914	1					
ANR	36967	ExpressionStatement	dst ++	1185:3:30718:30723	36914	2	True				
ANR	36968	PostIncDecOperationExpression	dst ++		36914	0					
ANR	36969	Identifier	dst		36914	0					
ANR	36970	IncDec	++		36914	1					
ANR	36971	Condition	src != end	1186:11:30736:30745	36914	1	True				
ANR	36972	EqualityExpression	src != end		36914	0		!=			
ANR	36973	Identifier	src		36914	0					
ANR	36974	Identifier	end		36914	1					
ANR	36975	ExpressionStatement	object -> properties = NULL	1187:2:30751:30776	36914	4	True				
ANR	36976	AssignmentExpression	object -> properties = NULL		36914	0		=			
ANR	36977	PtrMemberAccess	object -> properties		36914	0					
ANR	36978	Identifier	object		36914	0					
ANR	36979	Identifier	properties		36914	1					
ANR	36980	Identifier	NULL		36914	1					
ANR	36981	ReturnType	ZEND_API void		36914	1					
ANR	36982	Identifier	object_properties_init		36914	2					
ANR	36983	ParameterList	"zend_object * object , zend_class_entry * class_type"		36914	3					
ANR	36984	Parameter	zend_object * object	1171:37:30371:30389	36914	0	True				
ANR	36985	ParameterType	zend_object *		36914	0					
ANR	36986	Identifier	object		36914	1					
ANR	36987	Parameter	zend_class_entry * class_type	1171:58:30392:30419	36914	1	True				
ANR	36988	ParameterType	zend_class_entry *		36914	0					
ANR	36989	Identifier	class_type		36914	1					
ANR	36990	CFGEntryNode	ENTRY		36914		True				
ANR	36991	CFGExitNode	EXIT		36914		True				
ANR	36992	Symbol	object -> properties		36914						
ANR	36993	Symbol	class_type		36914						
ANR	36994	Symbol	NULL		36914						
ANR	36995	Symbol	dst		36914						
ANR	36996	Symbol	src		36914						
ANR	36997	Symbol	class_type -> default_properties_table		36914						
ANR	36998	Symbol	* class_type		36914						
ANR	36999	Symbol	end		36914						
ANR	37000	Symbol	* object		36914						
ANR	37001	Symbol	object -> properties_table		36914						
ANR	37002	Symbol	object		36914						
ANR	37003	Symbol	class_type -> default_properties_count		36914						
ANR	37004	Function	object_properties_init_ex	1192:0:30794:31464							
ANR	37005	FunctionDef	"object_properties_init_ex (zend_object * object , HashTable * properties)"		37004	0					
ANR	37006	CompoundStatement		1193:0:30888:31464	37004	0					
ANR	37007	ExpressionStatement	object -> properties = properties	1194:1:30891:30922	37004	0	True				
ANR	37008	AssignmentExpression	object -> properties = properties		37004	0		=			
ANR	37009	PtrMemberAccess	object -> properties		37004	0					
ANR	37010	Identifier	object		37004	0					
ANR	37011	Identifier	properties		37004	1					
ANR	37012	Identifier	properties		37004	1					
ANR	37013	IfStatement	if ( object -> ce -> default_properties_count )		37004	1					
ANR	37014	Condition	object -> ce -> default_properties_count	1195:5:30929:30964	37004	0	True				
ANR	37015	PtrMemberAccess	object -> ce -> default_properties_count		37004	0					
ANR	37016	PtrMemberAccess	object -> ce		37004	0					
ANR	37017	Identifier	object		37004	0					
ANR	37018	Identifier	ce		37004	1					
ANR	37019	Identifier	default_properties_count		37004	1					
ANR	37020	CompoundStatement		6:5:125:158	37004	1					
ANR	37021	IdentifierDeclStatement	zval * prop ;	1196:5:30974:30984	37004	0	True				
ANR	37022	IdentifierDecl	* prop		37004	0					
ANR	37023	IdentifierDeclType	zval *		37004	0					
ANR	37024	Identifier	prop		37004	1					
ANR	37025	IdentifierDeclStatement	zend_string * key ;	1197:5:30991:31007	37004	1	True				
ANR	37026	IdentifierDecl	* key		37004	0					
ANR	37027	IdentifierDeclType	zend_string *		37004	0					
ANR	37028	Identifier	key		37004	1					
ANR	37029	IdentifierDeclStatement	zend_property_info * property_info ;	1198:5:31014:31047	37004	2	True				
ANR	37030	IdentifierDecl	* property_info		37004	0					
ANR	37031	IdentifierDeclType	zend_property_info *		37004	0					
ANR	37032	Identifier	property_info		37004	1					
ANR	37033	Statement	ZEND_HASH_FOREACH_STR_KEY_VAL	1200:5:31055:31083	37004	3	True				
ANR	37034	Statement	(	1200:34:31084:31084	37004	4	True				
ANR	37035	Statement	properties	1200:35:31085:31094	37004	5	True				
ANR	37036	Statement	","	1200:45:31095:31095	37004	6	True				
ANR	37037	Statement	key	1200:47:31097:31099	37004	7	True				
ANR	37038	Statement	","	1200:50:31100:31100	37004	8	True				
ANR	37039	Statement	prop	1200:52:31102:31105	37004	9	True				
ANR	37040	Statement	)	1200:56:31106:31106	37004	10	True				
ANR	37041	CompoundStatement		8:58:219:219	37004	11					
ANR	37042	ExpressionStatement	"property_info = zend_get_property_info ( object -> ce , key , 1 )"	1201:3:31113:31171	37004	0	True				
ANR	37043	AssignmentExpression	"property_info = zend_get_property_info ( object -> ce , key , 1 )"		37004	0		=			
ANR	37044	Identifier	property_info		37004	0					
ANR	37045	CallExpression	"zend_get_property_info ( object -> ce , key , 1 )"		37004	1					
ANR	37046	Callee	zend_get_property_info		37004	0					
ANR	37047	Identifier	zend_get_property_info		37004	0					
ANR	37048	ArgumentList	object -> ce		37004	1					
ANR	37049	Argument	object -> ce		37004	0					
ANR	37050	PtrMemberAccess	object -> ce		37004	0					
ANR	37051	Identifier	object		37004	0					
ANR	37052	Identifier	ce		37004	1					
ANR	37053	Argument	key		37004	1					
ANR	37054	Identifier	key		37004	0					
ANR	37055	Argument	1		37004	2					
ANR	37056	PrimaryExpression	1		37004	0					
ANR	37057	IfStatement	if ( property_info != ZEND_WRONG_PROPERTY_INFO && property_info && ( property_info -> flags & ZEND_ACC_STATIC ) == 0 )		37004	1					
ANR	37058	Condition	property_info != ZEND_WRONG_PROPERTY_INFO && property_info && ( property_info -> flags & ZEND_ACC_STATIC ) == 0	1202:7:31180:31300	37004	0	True				
ANR	37059	AndExpression	property_info != ZEND_WRONG_PROPERTY_INFO && property_info && ( property_info -> flags & ZEND_ACC_STATIC ) == 0		37004	0		&&			
ANR	37060	EqualityExpression	property_info != ZEND_WRONG_PROPERTY_INFO		37004	0		!=			
ANR	37061	Identifier	property_info		37004	0					
ANR	37062	Identifier	ZEND_WRONG_PROPERTY_INFO		37004	1					
ANR	37063	AndExpression	property_info && ( property_info -> flags & ZEND_ACC_STATIC ) == 0		37004	1		&&			
ANR	37064	Identifier	property_info		37004	0					
ANR	37065	EqualityExpression	( property_info -> flags & ZEND_ACC_STATIC ) == 0		37004	1		==			
ANR	37066	BitAndExpression	property_info -> flags & ZEND_ACC_STATIC		37004	0		&			
ANR	37067	PtrMemberAccess	property_info -> flags		37004	0					
ANR	37068	Identifier	property_info		37004	0					
ANR	37069	Identifier	flags		37004	1					
ANR	37070	Identifier	ZEND_ACC_STATIC		37004	1					
ANR	37071	PrimaryExpression	0		37004	1					
ANR	37072	CompoundStatement		13:4:420:472	37004	1					
ANR	37073	IdentifierDeclStatement	"zval * slot = OBJ_PROP ( object , property_info -> offset ) ;"	1205:4:31309:31361	37004	0	True				
ANR	37074	IdentifierDecl	"* slot = OBJ_PROP ( object , property_info -> offset )"		37004	0					
ANR	37075	IdentifierDeclType	zval *		37004	0					
ANR	37076	Identifier	slot		37004	1					
ANR	37077	AssignmentExpression	"* slot = OBJ_PROP ( object , property_info -> offset )"		37004	2		=			
ANR	37078	Identifier	slot		37004	0					
ANR	37079	CallExpression	"OBJ_PROP ( object , property_info -> offset )"		37004	1					
ANR	37080	Callee	OBJ_PROP		37004	0					
ANR	37081	Identifier	OBJ_PROP		37004	0					
ANR	37082	ArgumentList	object		37004	1					
ANR	37083	Argument	object		37004	0					
ANR	37084	Identifier	object		37004	0					
ANR	37085	Argument	property_info -> offset		37004	1					
ANR	37086	PtrMemberAccess	property_info -> offset		37004	0					
ANR	37087	Identifier	property_info		37004	0					
ANR	37088	Identifier	offset		37004	1					
ANR	37089	ExpressionStatement	"ZVAL_COPY_VALUE ( slot , prop )"	1206:4:31367:31394	37004	1	True				
ANR	37090	CallExpression	"ZVAL_COPY_VALUE ( slot , prop )"		37004	0					
ANR	37091	Callee	ZVAL_COPY_VALUE		37004	0					
ANR	37092	Identifier	ZVAL_COPY_VALUE		37004	0					
ANR	37093	ArgumentList	slot		37004	1					
ANR	37094	Argument	slot		37004	0					
ANR	37095	Identifier	slot		37004	0					
ANR	37096	Argument	prop		37004	1					
ANR	37097	Identifier	prop		37004	0					
ANR	37098	ExpressionStatement	"ZVAL_INDIRECT ( prop , slot )"	1207:4:31400:31425	37004	2	True				
ANR	37099	CallExpression	"ZVAL_INDIRECT ( prop , slot )"		37004	0					
ANR	37100	Callee	ZVAL_INDIRECT		37004	0					
ANR	37101	Identifier	ZVAL_INDIRECT		37004	0					
ANR	37102	ArgumentList	prop		37004	1					
ANR	37103	Argument	prop		37004	0					
ANR	37104	Identifier	prop		37004	0					
ANR	37105	Argument	slot		37004	1					
ANR	37106	Identifier	slot		37004	0					
ANR	37107	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	1209:4:31436:31459	37004	12	True				
ANR	37108	CallExpression	ZEND_HASH_FOREACH_END ( )		37004	0					
ANR	37109	Callee	ZEND_HASH_FOREACH_END		37004	0					
ANR	37110	Identifier	ZEND_HASH_FOREACH_END		37004	0					
ANR	37111	ArgumentList			37004	1					
ANR	37112	ReturnType	ZEND_API void		37004	1					
ANR	37113	Identifier	object_properties_init_ex		37004	2					
ANR	37114	ParameterList	"zend_object * object , HashTable * properties"		37004	3					
ANR	37115	Parameter	zend_object * object	1192:40:30834:30852	37004	0	True				
ANR	37116	ParameterType	zend_object *		37004	0					
ANR	37117	Identifier	object		37004	1					
ANR	37118	Parameter	HashTable * properties	1192:61:30855:30875	37004	1	True				
ANR	37119	ParameterType	HashTable *		37004	0					
ANR	37120	Identifier	properties		37004	1					
ANR	37121	CFGEntryNode	ENTRY		37004		True				
ANR	37122	CFGExitNode	EXIT		37004		True				
ANR	37123	Symbol	property_info		37004						
ANR	37124	Symbol	property_info -> offset		37004						
ANR	37125	Symbol	object -> ce		37004						
ANR	37126	Symbol	slot		37004						
ANR	37127	Symbol	* object		37004						
ANR	37128	Symbol	object -> ce -> default_properties_count		37004						
ANR	37129	Symbol	object -> properties		37004						
ANR	37130	Symbol	ZEND_WRONG_PROPERTY_INFO		37004						
ANR	37131	Symbol	* property_info		37004						
ANR	37132	Symbol	OBJ_PROP		37004						
ANR	37133	Symbol	prop		37004						
ANR	37134	Symbol	zend_get_property_info		37004						
ANR	37135	Symbol	* * object		37004						
ANR	37136	Symbol	ZEND_ACC_STATIC		37004						
ANR	37137	Symbol	properties		37004						
ANR	37138	Symbol	* object -> ce		37004						
ANR	37139	Symbol	key		37004						
ANR	37140	Symbol	property_info -> flags		37004						
ANR	37141	Symbol	object		37004						
ANR	37142	Function	object_properties_load	1214:0:31477:33030							
ANR	37143	FunctionDef	"object_properties_load (zend_object * object , HashTable * properties)"		37142	0					
ANR	37144	CompoundStatement		1215:0:31568:33030	37142	0					
ANR	37145	IdentifierDeclStatement	"zval * prop , tmp ;"	1216:4:31574:31589	37142	0	True				
ANR	37146	IdentifierDecl	* prop		37142	0					
ANR	37147	IdentifierDeclType	zval *		37142	0					
ANR	37148	Identifier	prop		37142	1					
ANR	37149	IdentifierDecl	tmp		37142	1					
ANR	37150	IdentifierDeclType	zval		37142	0					
ANR	37151	Identifier	tmp		37142	1					
ANR	37152	IdentifierDeclStatement	zend_string * key ;	1217:4:31595:31611	37142	1	True				
ANR	37153	IdentifierDecl	* key		37142	0					
ANR	37154	IdentifierDeclType	zend_string *		37142	0					
ANR	37155	Identifier	key		37142	1					
ANR	37156	IdentifierDeclStatement	zend_long h ;	1218:4:31617:31628	37142	2	True				
ANR	37157	IdentifierDecl	h		37142	0					
ANR	37158	IdentifierDeclType	zend_long		37142	0					
ANR	37159	Identifier	h		37142	1					
ANR	37160	IdentifierDeclStatement	zend_property_info * property_info ;	1219:4:31634:31667	37142	3	True				
ANR	37161	IdentifierDecl	* property_info		37142	0					
ANR	37162	IdentifierDeclType	zend_property_info *		37142	0					
ANR	37163	Identifier	property_info		37142	1					
ANR	37164	Statement	ZEND_HASH_FOREACH_KEY_VAL	1221:4:31674:31698	37142	4	True				
ANR	37165	Statement	(	1221:29:31699:31699	37142	5	True				
ANR	37166	Statement	properties	1221:30:31700:31709	37142	6	True				
ANR	37167	Statement	","	1221:40:31710:31710	37142	7	True				
ANR	37168	Statement	h	1221:42:31712:31712	37142	8	True				
ANR	37169	Statement	","	1221:43:31713:31713	37142	9	True				
ANR	37170	Statement	key	1221:45:31715:31717	37142	10	True				
ANR	37171	Statement	","	1221:48:31718:31718	37142	11	True				
ANR	37172	Statement	prop	1221:50:31720:31723	37142	12	True				
ANR	37173	Statement	)	1221:54:31724:31724	37142	13	True				
ANR	37174	CompoundStatement		7:56:157:157	37142	14					
ANR	37175	IfStatement	if ( key )		37142	0					
ANR	37176	Condition	key	1222:6:31734:31736	37142	0	True				
ANR	37177	Identifier	key		37142	0					
ANR	37178	CompoundStatement		8:11:170:170	37142	1					
ANR	37179	IfStatement	if ( ZSTR_VAL ( key ) [ 0 ] == '\\0' )		37142	0					
ANR	37180	Condition	ZSTR_VAL ( key ) [ 0 ] == '\\0'	1223:7:31748:31771	37142	0	True				
ANR	37181	EqualityExpression	ZSTR_VAL ( key ) [ 0 ] == '\\0'		37142	0		==			
ANR	37182	ArrayIndexing	ZSTR_VAL ( key ) [ 0 ]		37142	0					
ANR	37183	CallExpression	ZSTR_VAL ( key )		37142	0					
ANR	37184	Callee	ZSTR_VAL		37142	0					
ANR	37185	Identifier	ZSTR_VAL		37142	0					
ANR	37186	ArgumentList	key		37142	1					
ANR	37187	Argument	key		37142	0					
ANR	37188	Identifier	key		37142	0					
ANR	37189	PrimaryExpression	0		37142	1					
ANR	37190	PrimaryExpression	'\\0'		37142	1					
ANR	37191	CompoundStatement		11:4:251:271	37142	1					
ANR	37192	IdentifierDeclStatement	"const char * class_name , * prop_name ;"	1224:4:31780:31814	37142	0	True				
ANR	37193	IdentifierDecl	* class_name		37142	0					
ANR	37194	IdentifierDeclType	const char *		37142	0					
ANR	37195	Identifier	class_name		37142	1					
ANR	37196	IdentifierDecl	* prop_name		37142	1					
ANR	37197	IdentifierDeclType	const char *		37142	0					
ANR	37198	Identifier	prop_name		37142	1					
ANR	37199	IdentifierDeclStatement	size_t prop_name_len ;	1225:4:31820:31840	37142	1	True				
ANR	37200	IdentifierDecl	prop_name_len		37142	0					
ANR	37201	IdentifierDeclType	size_t		37142	0					
ANR	37202	Identifier	prop_name_len		37142	1					
ANR	37203	IfStatement	"if ( zend_unmangle_property_name_ex ( key , & class_name , & prop_name , & prop_name_len ) == SUCCESS )"		37142	2					
ANR	37204	Condition	"zend_unmangle_property_name_ex ( key , & class_name , & prop_name , & prop_name_len ) == SUCCESS"	1226:8:31850:31936	37142	0	True				
ANR	37205	EqualityExpression	"zend_unmangle_property_name_ex ( key , & class_name , & prop_name , & prop_name_len ) == SUCCESS"		37142	0		==			
ANR	37206	CallExpression	"zend_unmangle_property_name_ex ( key , & class_name , & prop_name , & prop_name_len )"		37142	0					
ANR	37207	Callee	zend_unmangle_property_name_ex		37142	0					
ANR	37208	Identifier	zend_unmangle_property_name_ex		37142	0					
ANR	37209	ArgumentList	key		37142	1					
ANR	37210	Argument	key		37142	0					
ANR	37211	Identifier	key		37142	0					
ANR	37212	Argument	& class_name		37142	1					
ANR	37213	UnaryOperationExpression	& class_name		37142	0					
ANR	37214	UnaryOperator	&		37142	0					
ANR	37215	Identifier	class_name		37142	1					
ANR	37216	Argument	& prop_name		37142	2					
ANR	37217	UnaryOperationExpression	& prop_name		37142	0					
ANR	37218	UnaryOperator	&		37142	0					
ANR	37219	Identifier	prop_name		37142	1					
ANR	37220	Argument	& prop_name_len		37142	3					
ANR	37221	UnaryOperationExpression	& prop_name_len		37142	0					
ANR	37222	UnaryOperator	&		37142	0					
ANR	37223	Identifier	prop_name_len		37142	1					
ANR	37224	Identifier	SUCCESS		37142	1					
ANR	37225	CompoundStatement		13:5:377:443	37142	1					
ANR	37226	IdentifierDeclStatement	"zend_string * pname = zend_string_init ( prop_name , prop_name_len , 0 ) ;"	1227:5:31946:32012	37142	0	True				
ANR	37227	IdentifierDecl	"* pname = zend_string_init ( prop_name , prop_name_len , 0 )"		37142	0					
ANR	37228	IdentifierDeclType	zend_string *		37142	0					
ANR	37229	Identifier	pname		37142	1					
ANR	37230	AssignmentExpression	"* pname = zend_string_init ( prop_name , prop_name_len , 0 )"		37142	2		=			
ANR	37231	Identifier	pname		37142	0					
ANR	37232	CallExpression	"zend_string_init ( prop_name , prop_name_len , 0 )"		37142	1					
ANR	37233	Callee	zend_string_init		37142	0					
ANR	37234	Identifier	zend_string_init		37142	0					
ANR	37235	ArgumentList	prop_name		37142	1					
ANR	37236	Argument	prop_name		37142	0					
ANR	37237	Identifier	prop_name		37142	0					
ANR	37238	Argument	prop_name_len		37142	1					
ANR	37239	Identifier	prop_name_len		37142	0					
ANR	37240	Argument	0		37142	2					
ANR	37241	PrimaryExpression	0		37142	0					
ANR	37242	ExpressionStatement	"property_info = zend_get_property_info ( object -> ce , pname , 1 )"	1228:5:32019:32079	37142	1	True				
ANR	37243	AssignmentExpression	"property_info = zend_get_property_info ( object -> ce , pname , 1 )"		37142	0		=			
ANR	37244	Identifier	property_info		37142	0					
ANR	37245	CallExpression	"zend_get_property_info ( object -> ce , pname , 1 )"		37142	1					
ANR	37246	Callee	zend_get_property_info		37142	0					
ANR	37247	Identifier	zend_get_property_info		37142	0					
ANR	37248	ArgumentList	object -> ce		37142	1					
ANR	37249	Argument	object -> ce		37142	0					
ANR	37250	PtrMemberAccess	object -> ce		37142	0					
ANR	37251	Identifier	object		37142	0					
ANR	37252	Identifier	ce		37142	1					
ANR	37253	Argument	pname		37142	1					
ANR	37254	Identifier	pname		37142	0					
ANR	37255	Argument	1		37142	2					
ANR	37256	PrimaryExpression	1		37142	0					
ANR	37257	ExpressionStatement	zend_string_release ( pname )	1229:5:32086:32112	37142	2	True				
ANR	37258	CallExpression	zend_string_release ( pname )		37142	0					
ANR	37259	Callee	zend_string_release		37142	0					
ANR	37260	Identifier	zend_string_release		37142	0					
ANR	37261	ArgumentList	pname		37142	1					
ANR	37262	Argument	pname		37142	0					
ANR	37263	Identifier	pname		37142	0					
ANR	37264	ElseStatement	else		37142	0					
ANR	37265	CompoundStatement		16:11:556:556	37142	0					
ANR	37266	ExpressionStatement	property_info = ZEND_WRONG_PROPERTY_INFO	1231:5:32132:32172	37142	0	True				
ANR	37267	AssignmentExpression	property_info = ZEND_WRONG_PROPERTY_INFO		37142	0		=			
ANR	37268	Identifier	property_info		37142	0					
ANR	37269	Identifier	ZEND_WRONG_PROPERTY_INFO		37142	1					
ANR	37270	ElseStatement	else		37142	0					
ANR	37271	CompoundStatement		19:10:621:621	37142	0					
ANR	37272	ExpressionStatement	"property_info = zend_get_property_info ( object -> ce , key , 1 )"	1234:4:32196:32254	37142	0	True				
ANR	37273	AssignmentExpression	"property_info = zend_get_property_info ( object -> ce , key , 1 )"		37142	0		=			
ANR	37274	Identifier	property_info		37142	0					
ANR	37275	CallExpression	"zend_get_property_info ( object -> ce , key , 1 )"		37142	1					
ANR	37276	Callee	zend_get_property_info		37142	0					
ANR	37277	Identifier	zend_get_property_info		37142	0					
ANR	37278	ArgumentList	object -> ce		37142	1					
ANR	37279	Argument	object -> ce		37142	0					
ANR	37280	PtrMemberAccess	object -> ce		37142	0					
ANR	37281	Identifier	object		37142	0					
ANR	37282	Identifier	ce		37142	1					
ANR	37283	Argument	key		37142	1					
ANR	37284	Identifier	key		37142	0					
ANR	37285	Argument	1		37142	2					
ANR	37286	PrimaryExpression	1		37142	0					
ANR	37287	IfStatement	if ( property_info != ZEND_WRONG_PROPERTY_INFO && property_info && ( property_info -> flags & ZEND_ACC_STATIC ) == 0 )		37142	1					
ANR	37288	Condition	property_info != ZEND_WRONG_PROPERTY_INFO && property_info && ( property_info -> flags & ZEND_ACC_STATIC ) == 0	1236:7:32268:32382	37142	0	True				
ANR	37289	AndExpression	property_info != ZEND_WRONG_PROPERTY_INFO && property_info && ( property_info -> flags & ZEND_ACC_STATIC ) == 0		37142	0		&&			
ANR	37290	EqualityExpression	property_info != ZEND_WRONG_PROPERTY_INFO		37142	0		!=			
ANR	37291	Identifier	property_info		37142	0					
ANR	37292	Identifier	ZEND_WRONG_PROPERTY_INFO		37142	1					
ANR	37293	AndExpression	property_info && ( property_info -> flags & ZEND_ACC_STATIC ) == 0		37142	1		&&			
ANR	37294	Identifier	property_info		37142	0					
ANR	37295	EqualityExpression	( property_info -> flags & ZEND_ACC_STATIC ) == 0		37142	1		==			
ANR	37296	BitAndExpression	property_info -> flags & ZEND_ACC_STATIC		37142	0		&			
ANR	37297	PtrMemberAccess	property_info -> flags		37142	0					
ANR	37298	Identifier	property_info		37142	0					
ANR	37299	Identifier	flags		37142	1					
ANR	37300	Identifier	ZEND_ACC_STATIC		37142	1					
ANR	37301	PrimaryExpression	0		37142	1					
ANR	37302	CompoundStatement		25:4:822:874	37142	1					
ANR	37303	IdentifierDeclStatement	"zval * slot = OBJ_PROP ( object , property_info -> offset ) ;"	1239:4:32391:32443	37142	0	True				
ANR	37304	IdentifierDecl	"* slot = OBJ_PROP ( object , property_info -> offset )"		37142	0					
ANR	37305	IdentifierDeclType	zval *		37142	0					
ANR	37306	Identifier	slot		37142	1					
ANR	37307	AssignmentExpression	"* slot = OBJ_PROP ( object , property_info -> offset )"		37142	2		=			
ANR	37308	Identifier	slot		37142	0					
ANR	37309	CallExpression	"OBJ_PROP ( object , property_info -> offset )"		37142	1					
ANR	37310	Callee	OBJ_PROP		37142	0					
ANR	37311	Identifier	OBJ_PROP		37142	0					
ANR	37312	ArgumentList	object		37142	1					
ANR	37313	Argument	object		37142	0					
ANR	37314	Identifier	object		37142	0					
ANR	37315	Argument	property_info -> offset		37142	1					
ANR	37316	PtrMemberAccess	property_info -> offset		37142	0					
ANR	37317	Identifier	property_info		37142	0					
ANR	37318	Identifier	offset		37142	1					
ANR	37319	ExpressionStatement	zval_ptr_dtor ( slot )	1240:4:32449:32468	37142	1	True				
ANR	37320	CallExpression	zval_ptr_dtor ( slot )		37142	0					
ANR	37321	Callee	zval_ptr_dtor		37142	0					
ANR	37322	Identifier	zval_ptr_dtor		37142	0					
ANR	37323	ArgumentList	slot		37142	1					
ANR	37324	Argument	slot		37142	0					
ANR	37325	Identifier	slot		37142	0					
ANR	37326	ExpressionStatement	"ZVAL_COPY_VALUE ( slot , prop )"	1241:4:32474:32501	37142	2	True				
ANR	37327	CallExpression	"ZVAL_COPY_VALUE ( slot , prop )"		37142	0					
ANR	37328	Callee	ZVAL_COPY_VALUE		37142	0					
ANR	37329	Identifier	ZVAL_COPY_VALUE		37142	0					
ANR	37330	ArgumentList	slot		37142	1					
ANR	37331	Argument	slot		37142	0					
ANR	37332	Identifier	slot		37142	0					
ANR	37333	Argument	prop		37142	1					
ANR	37334	Identifier	prop		37142	0					
ANR	37335	ExpressionStatement	zval_add_ref ( slot )	1242:4:32507:32525	37142	3	True				
ANR	37336	CallExpression	zval_add_ref ( slot )		37142	0					
ANR	37337	Callee	zval_add_ref		37142	0					
ANR	37338	Identifier	zval_add_ref		37142	0					
ANR	37339	ArgumentList	slot		37142	1					
ANR	37340	Argument	slot		37142	0					
ANR	37341	Identifier	slot		37142	0					
ANR	37342	IfStatement	if ( object -> properties )		37142	4					
ANR	37343	Condition	object -> properties	1243:8:32535:32552	37142	0	True				
ANR	37344	PtrMemberAccess	object -> properties		37142	0					
ANR	37345	Identifier	object		37142	0					
ANR	37346	Identifier	properties		37142	1					
ANR	37347	CompoundStatement		29:28:986:986	37142	1					
ANR	37348	ExpressionStatement	"ZVAL_INDIRECT ( & tmp , slot )"	1244:5:32562:32587	37142	0	True				
ANR	37349	CallExpression	"ZVAL_INDIRECT ( & tmp , slot )"		37142	0					
ANR	37350	Callee	ZVAL_INDIRECT		37142	0					
ANR	37351	Identifier	ZVAL_INDIRECT		37142	0					
ANR	37352	ArgumentList	& tmp		37142	1					
ANR	37353	Argument	& tmp		37142	0					
ANR	37354	UnaryOperationExpression	& tmp		37142	0					
ANR	37355	UnaryOperator	&		37142	0					
ANR	37356	Identifier	tmp		37142	1					
ANR	37357	Argument	slot		37142	1					
ANR	37358	Identifier	slot		37142	0					
ANR	37359	ExpressionStatement	"zend_hash_update ( object -> properties , key , & tmp )"	1245:5:32594:32641	37142	1	True				
ANR	37360	CallExpression	"zend_hash_update ( object -> properties , key , & tmp )"		37142	0					
ANR	37361	Callee	zend_hash_update		37142	0					
ANR	37362	Identifier	zend_hash_update		37142	0					
ANR	37363	ArgumentList	object -> properties		37142	1					
ANR	37364	Argument	object -> properties		37142	0					
ANR	37365	PtrMemberAccess	object -> properties		37142	0					
ANR	37366	Identifier	object		37142	0					
ANR	37367	Identifier	properties		37142	1					
ANR	37368	Argument	key		37142	1					
ANR	37369	Identifier	key		37142	0					
ANR	37370	Argument	& tmp		37142	2					
ANR	37371	UnaryOperationExpression	& tmp		37142	0					
ANR	37372	UnaryOperator	&		37142	0					
ANR	37373	Identifier	tmp		37142	1					
ANR	37374	ElseStatement	else		37142	0					
ANR	37375	CompoundStatement		33:10:1090:1090	37142	0					
ANR	37376	IfStatement	if ( ! object -> properties )		37142	0					
ANR	37377	Condition	! object -> properties	1248:8:32669:32687	37142	0	True				
ANR	37378	UnaryOperationExpression	! object -> properties		37142	0					
ANR	37379	UnaryOperator	!		37142	0					
ANR	37380	PtrMemberAccess	object -> properties		37142	1					
ANR	37381	Identifier	object		37142	0					
ANR	37382	Identifier	properties		37142	1					
ANR	37383	CompoundStatement		34:29:1121:1121	37142	1					
ANR	37384	ExpressionStatement	rebuild_object_properties ( object )	1249:5:32697:32730	37142	0	True				
ANR	37385	CallExpression	rebuild_object_properties ( object )		37142	0					
ANR	37386	Callee	rebuild_object_properties		37142	0					
ANR	37387	Identifier	rebuild_object_properties		37142	0					
ANR	37388	ArgumentList	object		37142	1					
ANR	37389	Argument	object		37142	0					
ANR	37390	Identifier	object		37142	0					
ANR	37391	ExpressionStatement	"prop = zend_hash_update ( object -> properties , key , prop )"	1251:4:32742:32796	37142	1	True				
ANR	37392	AssignmentExpression	"prop = zend_hash_update ( object -> properties , key , prop )"		37142	0		=			
ANR	37393	Identifier	prop		37142	0					
ANR	37394	CallExpression	"zend_hash_update ( object -> properties , key , prop )"		37142	1					
ANR	37395	Callee	zend_hash_update		37142	0					
ANR	37396	Identifier	zend_hash_update		37142	0					
ANR	37397	ArgumentList	object -> properties		37142	1					
ANR	37398	Argument	object -> properties		37142	0					
ANR	37399	PtrMemberAccess	object -> properties		37142	0					
ANR	37400	Identifier	object		37142	0					
ANR	37401	Identifier	properties		37142	1					
ANR	37402	Argument	key		37142	1					
ANR	37403	Identifier	key		37142	0					
ANR	37404	Argument	prop		37142	2					
ANR	37405	Identifier	prop		37142	0					
ANR	37406	ExpressionStatement	zval_add_ref ( prop )	1252:4:32802:32820	37142	2	True				
ANR	37407	CallExpression	zval_add_ref ( prop )		37142	0					
ANR	37408	Callee	zval_add_ref		37142	0					
ANR	37409	Identifier	zval_add_ref		37142	0					
ANR	37410	ArgumentList	prop		37142	1					
ANR	37411	Argument	prop		37142	0					
ANR	37412	Identifier	prop		37142	0					
ANR	37413	ElseStatement	else		37142	0					
ANR	37414	CompoundStatement		40:9:1267:1267	37142	0					
ANR	37415	IfStatement	if ( ! object -> properties )		37142	0					
ANR	37416	Condition	! object -> properties	1255:7:32845:32863	37142	0	True				
ANR	37417	UnaryOperationExpression	! object -> properties		37142	0					
ANR	37418	UnaryOperator	!		37142	0					
ANR	37419	PtrMemberAccess	object -> properties		37142	1					
ANR	37420	Identifier	object		37142	0					
ANR	37421	Identifier	properties		37142	1					
ANR	37422	CompoundStatement		41:28:1297:1297	37142	1					
ANR	37423	ExpressionStatement	rebuild_object_properties ( object )	1256:4:32872:32905	37142	0	True				
ANR	37424	CallExpression	rebuild_object_properties ( object )		37142	0					
ANR	37425	Callee	rebuild_object_properties		37142	0					
ANR	37426	Identifier	rebuild_object_properties		37142	0					
ANR	37427	ArgumentList	object		37142	1					
ANR	37428	Argument	object		37142	0					
ANR	37429	Identifier	object		37142	0					
ANR	37430	ExpressionStatement	"prop = zend_hash_index_update ( object -> properties , h , prop )"	1258:3:32915:32973	37142	1	True				
ANR	37431	AssignmentExpression	"prop = zend_hash_index_update ( object -> properties , h , prop )"		37142	0		=			
ANR	37432	Identifier	prop		37142	0					
ANR	37433	CallExpression	"zend_hash_index_update ( object -> properties , h , prop )"		37142	1					
ANR	37434	Callee	zend_hash_index_update		37142	0					
ANR	37435	Identifier	zend_hash_index_update		37142	0					
ANR	37436	ArgumentList	object -> properties		37142	1					
ANR	37437	Argument	object -> properties		37142	0					
ANR	37438	PtrMemberAccess	object -> properties		37142	0					
ANR	37439	Identifier	object		37142	0					
ANR	37440	Identifier	properties		37142	1					
ANR	37441	Argument	h		37142	1					
ANR	37442	Identifier	h		37142	0					
ANR	37443	Argument	prop		37142	2					
ANR	37444	Identifier	prop		37142	0					
ANR	37445	ExpressionStatement	zval_add_ref ( prop )	1259:3:32978:32996	37142	2	True				
ANR	37446	CallExpression	zval_add_ref ( prop )		37142	0					
ANR	37447	Callee	zval_add_ref		37142	0					
ANR	37448	Identifier	zval_add_ref		37142	0					
ANR	37449	ArgumentList	prop		37142	1					
ANR	37450	Argument	prop		37142	0					
ANR	37451	Identifier	prop		37142	0					
ANR	37452	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	1261:3:33005:33028	37142	15	True				
ANR	37453	CallExpression	ZEND_HASH_FOREACH_END ( )		37142	0					
ANR	37454	Callee	ZEND_HASH_FOREACH_END		37142	0					
ANR	37455	Identifier	ZEND_HASH_FOREACH_END		37142	0					
ANR	37456	ArgumentList			37142	1					
ANR	37457	ReturnType	ZEND_API void		37142	1					
ANR	37458	Identifier	object_properties_load		37142	2					
ANR	37459	ParameterList	"zend_object * object , HashTable * properties"		37142	3					
ANR	37460	Parameter	zend_object * object	1214:37:31514:31532	37142	0	True				
ANR	37461	ParameterType	zend_object *		37142	0					
ANR	37462	Identifier	object		37142	1					
ANR	37463	Parameter	HashTable * properties	1214:58:31535:31555	37142	1	True				
ANR	37464	ParameterType	HashTable *		37142	0					
ANR	37465	Identifier	properties		37142	1					
ANR	37466	CFGEntryNode	ENTRY		37142		True				
ANR	37467	CFGExitNode	EXIT		37142		True				
ANR	37468	Symbol	property_info -> offset		37142						
ANR	37469	Symbol	object -> ce		37142						
ANR	37470	Symbol	& class_name		37142						
ANR	37471	Symbol	slot		37142						
ANR	37472	Symbol	* object		37142						
ANR	37473	Symbol	zend_string_init		37142						
ANR	37474	Symbol	* property_info		37142						
ANR	37475	Symbol	tmp		37142						
ANR	37476	Symbol	prop		37142						
ANR	37477	Symbol	ZEND_ACC_STATIC		37142						
ANR	37478	Symbol	& prop_name		37142						
ANR	37479	Symbol	zend_hash_update		37142						
ANR	37480	Symbol	class_name		37142						
ANR	37481	Symbol	key		37142						
ANR	37482	Symbol	property_info -> flags		37142						
ANR	37483	Symbol	* ZSTR_VAL		37142						
ANR	37484	Symbol	property_info		37142						
ANR	37485	Symbol	& prop_name_len		37142						
ANR	37486	Symbol	SUCCESS		37142						
ANR	37487	Symbol	prop_name_len		37142						
ANR	37488	Symbol	pname		37142						
ANR	37489	Symbol	zend_hash_index_update		37142						
ANR	37490	Symbol	h		37142						
ANR	37491	Symbol	ZSTR_VAL		37142						
ANR	37492	Symbol	prop_name		37142						
ANR	37493	Symbol	object -> properties		37142						
ANR	37494	Symbol	ZEND_WRONG_PROPERTY_INFO		37142						
ANR	37495	Symbol	zend_unmangle_property_name_ex		37142						
ANR	37496	Symbol	OBJ_PROP		37142						
ANR	37497	Symbol	zend_get_property_info		37142						
ANR	37498	Symbol	& tmp		37142						
ANR	37499	Symbol	properties		37142						
ANR	37500	Symbol	object		37142						
ANR	37501	Function	add_assoc_long_ex	1318:0:34945:35187							
ANR	37502	FunctionDef	"add_assoc_long_ex (zval * arg , const char * key , size_t key_len , zend_long n)"		37501	0					
ANR	37503	CompoundStatement		1319:0:35043:35187	37501	0					
ANR	37504	IdentifierDeclStatement	"zval * ret , tmp ;"	1320:1:35046:35060	37501	0	True				
ANR	37505	IdentifierDecl	* ret		37501	0					
ANR	37506	IdentifierDeclType	zval *		37501	0					
ANR	37507	Identifier	ret		37501	1					
ANR	37508	IdentifierDecl	tmp		37501	1					
ANR	37509	IdentifierDeclType	zval		37501	0					
ANR	37510	Identifier	tmp		37501	1					
ANR	37511	ExpressionStatement	"ZVAL_LONG ( & tmp , n )"	1322:1:35064:35082	37501	1	True				
ANR	37512	CallExpression	"ZVAL_LONG ( & tmp , n )"		37501	0					
ANR	37513	Callee	ZVAL_LONG		37501	0					
ANR	37514	Identifier	ZVAL_LONG		37501	0					
ANR	37515	ArgumentList	& tmp		37501	1					
ANR	37516	Argument	& tmp		37501	0					
ANR	37517	UnaryOperationExpression	& tmp		37501	0					
ANR	37518	UnaryOperator	&		37501	0					
ANR	37519	Identifier	tmp		37501	1					
ANR	37520	Argument	n		37501	1					
ANR	37521	Identifier	n		37501	0					
ANR	37522	ExpressionStatement	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"	1323:1:35085:35152	37501	2	True				
ANR	37523	AssignmentExpression	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		37501	0		=			
ANR	37524	Identifier	ret		37501	0					
ANR	37525	CallExpression	"zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		37501	1					
ANR	37526	Callee	zend_symtable_str_update		37501	0					
ANR	37527	Identifier	zend_symtable_str_update		37501	0					
ANR	37528	ArgumentList	Z_ARRVAL_P ( arg )		37501	1					
ANR	37529	Argument	Z_ARRVAL_P ( arg )		37501	0					
ANR	37530	CallExpression	Z_ARRVAL_P ( arg )		37501	0					
ANR	37531	Callee	Z_ARRVAL_P		37501	0					
ANR	37532	Identifier	Z_ARRVAL_P		37501	0					
ANR	37533	ArgumentList	arg		37501	1					
ANR	37534	Argument	arg		37501	0					
ANR	37535	Identifier	arg		37501	0					
ANR	37536	Argument	key		37501	1					
ANR	37537	Identifier	key		37501	0					
ANR	37538	Argument	key_len		37501	2					
ANR	37539	Identifier	key_len		37501	0					
ANR	37540	Argument	& tmp		37501	3					
ANR	37541	UnaryOperationExpression	& tmp		37501	0					
ANR	37542	UnaryOperator	&		37501	0					
ANR	37543	Identifier	tmp		37501	1					
ANR	37544	ReturnStatement	return ret ? SUCCESS : FAILURE ;	1324:1:35155:35185	37501	3	True				
ANR	37545	ConditionalExpression	ret ? SUCCESS : FAILURE		37501	0					
ANR	37546	Condition	ret		37501	0					
ANR	37547	Identifier	ret		37501	0					
ANR	37548	Identifier	SUCCESS		37501	1					
ANR	37549	Identifier	FAILURE		37501	2					
ANR	37550	ReturnType	ZEND_API int		37501	1					
ANR	37551	Identifier	add_assoc_long_ex		37501	2					
ANR	37552	ParameterList	"zval * arg , const char * key , size_t key_len , zend_long n"		37501	3					
ANR	37553	Parameter	zval * arg	1318:31:34976:34984	37501	0	True				
ANR	37554	ParameterType	zval *		37501	0					
ANR	37555	Identifier	arg		37501	1					
ANR	37556	Parameter	const char * key	1318:42:34987:35001	37501	1	True				
ANR	37557	ParameterType	const char *		37501	0					
ANR	37558	Identifier	key		37501	1					
ANR	37559	Parameter	size_t key_len	1318:59:35004:35017	37501	2	True				
ANR	37560	ParameterType	size_t		37501	0					
ANR	37561	Identifier	key_len		37501	1					
ANR	37562	Parameter	zend_long n	1318:75:35020:35030	37501	3	True				
ANR	37563	ParameterType	zend_long		37501	0					
ANR	37564	Identifier	n		37501	1					
ANR	37565	CFGEntryNode	ENTRY		37501		True				
ANR	37566	CFGExitNode	EXIT		37501		True				
ANR	37567	Symbol	ret		37501						
ANR	37568	Symbol	SUCCESS		37501						
ANR	37569	Symbol	tmp		37501						
ANR	37570	Symbol	arg		37501						
ANR	37571	Symbol	& tmp		37501						
ANR	37572	Symbol	zend_symtable_str_update		37501						
ANR	37573	Symbol	Z_ARRVAL_P		37501						
ANR	37574	Symbol	FAILURE		37501						
ANR	37575	Symbol	key		37501						
ANR	37576	Symbol	n		37501						
ANR	37577	Symbol	key_len		37501						
ANR	37578	Function	add_assoc_null_ex	1328:0:35200:35426							
ANR	37579	FunctionDef	"add_assoc_null_ex (zval * arg , const char * key , size_t key_len)"		37578	0					
ANR	37580	CompoundStatement		1329:0:35285:35426	37578	0					
ANR	37581	IdentifierDeclStatement	"zval * ret , tmp ;"	1330:1:35288:35302	37578	0	True				
ANR	37582	IdentifierDecl	* ret		37578	0					
ANR	37583	IdentifierDeclType	zval *		37578	0					
ANR	37584	Identifier	ret		37578	1					
ANR	37585	IdentifierDecl	tmp		37578	1					
ANR	37586	IdentifierDeclType	zval		37578	0					
ANR	37587	Identifier	tmp		37578	1					
ANR	37588	ExpressionStatement	ZVAL_NULL ( & tmp )	1332:1:35306:35321	37578	1	True				
ANR	37589	CallExpression	ZVAL_NULL ( & tmp )		37578	0					
ANR	37590	Callee	ZVAL_NULL		37578	0					
ANR	37591	Identifier	ZVAL_NULL		37578	0					
ANR	37592	ArgumentList	& tmp		37578	1					
ANR	37593	Argument	& tmp		37578	0					
ANR	37594	UnaryOperationExpression	& tmp		37578	0					
ANR	37595	UnaryOperator	&		37578	0					
ANR	37596	Identifier	tmp		37578	1					
ANR	37597	ExpressionStatement	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"	1333:1:35324:35391	37578	2	True				
ANR	37598	AssignmentExpression	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		37578	0		=			
ANR	37599	Identifier	ret		37578	0					
ANR	37600	CallExpression	"zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		37578	1					
ANR	37601	Callee	zend_symtable_str_update		37578	0					
ANR	37602	Identifier	zend_symtable_str_update		37578	0					
ANR	37603	ArgumentList	Z_ARRVAL_P ( arg )		37578	1					
ANR	37604	Argument	Z_ARRVAL_P ( arg )		37578	0					
ANR	37605	CallExpression	Z_ARRVAL_P ( arg )		37578	0					
ANR	37606	Callee	Z_ARRVAL_P		37578	0					
ANR	37607	Identifier	Z_ARRVAL_P		37578	0					
ANR	37608	ArgumentList	arg		37578	1					
ANR	37609	Argument	arg		37578	0					
ANR	37610	Identifier	arg		37578	0					
ANR	37611	Argument	key		37578	1					
ANR	37612	Identifier	key		37578	0					
ANR	37613	Argument	key_len		37578	2					
ANR	37614	Identifier	key_len		37578	0					
ANR	37615	Argument	& tmp		37578	3					
ANR	37616	UnaryOperationExpression	& tmp		37578	0					
ANR	37617	UnaryOperator	&		37578	0					
ANR	37618	Identifier	tmp		37578	1					
ANR	37619	ReturnStatement	return ret ? SUCCESS : FAILURE ;	1334:1:35394:35424	37578	3	True				
ANR	37620	ConditionalExpression	ret ? SUCCESS : FAILURE		37578	0					
ANR	37621	Condition	ret		37578	0					
ANR	37622	Identifier	ret		37578	0					
ANR	37623	Identifier	SUCCESS		37578	1					
ANR	37624	Identifier	FAILURE		37578	2					
ANR	37625	ReturnType	ZEND_API int		37578	1					
ANR	37626	Identifier	add_assoc_null_ex		37578	2					
ANR	37627	ParameterList	"zval * arg , const char * key , size_t key_len"		37578	3					
ANR	37628	Parameter	zval * arg	1328:31:35231:35239	37578	0	True				
ANR	37629	ParameterType	zval *		37578	0					
ANR	37630	Identifier	arg		37578	1					
ANR	37631	Parameter	const char * key	1328:42:35242:35256	37578	1	True				
ANR	37632	ParameterType	const char *		37578	0					
ANR	37633	Identifier	key		37578	1					
ANR	37634	Parameter	size_t key_len	1328:59:35259:35272	37578	2	True				
ANR	37635	ParameterType	size_t		37578	0					
ANR	37636	Identifier	key_len		37578	1					
ANR	37637	CFGEntryNode	ENTRY		37578		True				
ANR	37638	CFGExitNode	EXIT		37578		True				
ANR	37639	Symbol	ret		37578						
ANR	37640	Symbol	SUCCESS		37578						
ANR	37641	Symbol	tmp		37578						
ANR	37642	Symbol	arg		37578						
ANR	37643	Symbol	& tmp		37578						
ANR	37644	Symbol	zend_symtable_str_update		37578						
ANR	37645	Symbol	Z_ARRVAL_P		37578						
ANR	37646	Symbol	FAILURE		37578						
ANR	37647	Symbol	key		37578						
ANR	37648	Symbol	key_len		37578						
ANR	37649	Function	add_assoc_bool_ex	1338:0:35439:35675							
ANR	37650	FunctionDef	"add_assoc_bool_ex (zval * arg , const char * key , size_t key_len , int b)"		37649	0					
ANR	37651	CompoundStatement		1339:0:35531:35675	37649	0					
ANR	37652	IdentifierDeclStatement	"zval * ret , tmp ;"	1340:1:35534:35548	37649	0	True				
ANR	37653	IdentifierDecl	* ret		37649	0					
ANR	37654	IdentifierDeclType	zval *		37649	0					
ANR	37655	Identifier	ret		37649	1					
ANR	37656	IdentifierDecl	tmp		37649	1					
ANR	37657	IdentifierDeclType	zval		37649	0					
ANR	37658	Identifier	tmp		37649	1					
ANR	37659	ExpressionStatement	"ZVAL_BOOL ( & tmp , b )"	1342:1:35552:35570	37649	1	True				
ANR	37660	CallExpression	"ZVAL_BOOL ( & tmp , b )"		37649	0					
ANR	37661	Callee	ZVAL_BOOL		37649	0					
ANR	37662	Identifier	ZVAL_BOOL		37649	0					
ANR	37663	ArgumentList	& tmp		37649	1					
ANR	37664	Argument	& tmp		37649	0					
ANR	37665	UnaryOperationExpression	& tmp		37649	0					
ANR	37666	UnaryOperator	&		37649	0					
ANR	37667	Identifier	tmp		37649	1					
ANR	37668	Argument	b		37649	1					
ANR	37669	Identifier	b		37649	0					
ANR	37670	ExpressionStatement	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"	1343:1:35573:35640	37649	2	True				
ANR	37671	AssignmentExpression	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		37649	0		=			
ANR	37672	Identifier	ret		37649	0					
ANR	37673	CallExpression	"zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		37649	1					
ANR	37674	Callee	zend_symtable_str_update		37649	0					
ANR	37675	Identifier	zend_symtable_str_update		37649	0					
ANR	37676	ArgumentList	Z_ARRVAL_P ( arg )		37649	1					
ANR	37677	Argument	Z_ARRVAL_P ( arg )		37649	0					
ANR	37678	CallExpression	Z_ARRVAL_P ( arg )		37649	0					
ANR	37679	Callee	Z_ARRVAL_P		37649	0					
ANR	37680	Identifier	Z_ARRVAL_P		37649	0					
ANR	37681	ArgumentList	arg		37649	1					
ANR	37682	Argument	arg		37649	0					
ANR	37683	Identifier	arg		37649	0					
ANR	37684	Argument	key		37649	1					
ANR	37685	Identifier	key		37649	0					
ANR	37686	Argument	key_len		37649	2					
ANR	37687	Identifier	key_len		37649	0					
ANR	37688	Argument	& tmp		37649	3					
ANR	37689	UnaryOperationExpression	& tmp		37649	0					
ANR	37690	UnaryOperator	&		37649	0					
ANR	37691	Identifier	tmp		37649	1					
ANR	37692	ReturnStatement	return ret ? SUCCESS : FAILURE ;	1344:1:35643:35673	37649	3	True				
ANR	37693	ConditionalExpression	ret ? SUCCESS : FAILURE		37649	0					
ANR	37694	Condition	ret		37649	0					
ANR	37695	Identifier	ret		37649	0					
ANR	37696	Identifier	SUCCESS		37649	1					
ANR	37697	Identifier	FAILURE		37649	2					
ANR	37698	ReturnType	ZEND_API int		37649	1					
ANR	37699	Identifier	add_assoc_bool_ex		37649	2					
ANR	37700	ParameterList	"zval * arg , const char * key , size_t key_len , int b"		37649	3					
ANR	37701	Parameter	zval * arg	1338:31:35470:35478	37649	0	True				
ANR	37702	ParameterType	zval *		37649	0					
ANR	37703	Identifier	arg		37649	1					
ANR	37704	Parameter	const char * key	1338:42:35481:35495	37649	1	True				
ANR	37705	ParameterType	const char *		37649	0					
ANR	37706	Identifier	key		37649	1					
ANR	37707	Parameter	size_t key_len	1338:59:35498:35511	37649	2	True				
ANR	37708	ParameterType	size_t		37649	0					
ANR	37709	Identifier	key_len		37649	1					
ANR	37710	Parameter	int b	1338:75:35514:35518	37649	3	True				
ANR	37711	ParameterType	int		37649	0					
ANR	37712	Identifier	b		37649	1					
ANR	37713	CFGEntryNode	ENTRY		37649		True				
ANR	37714	CFGExitNode	EXIT		37649		True				
ANR	37715	Symbol	ret		37649						
ANR	37716	Symbol	b		37649						
ANR	37717	Symbol	SUCCESS		37649						
ANR	37718	Symbol	tmp		37649						
ANR	37719	Symbol	arg		37649						
ANR	37720	Symbol	& tmp		37649						
ANR	37721	Symbol	zend_symtable_str_update		37649						
ANR	37722	Symbol	Z_ARRVAL_P		37649						
ANR	37723	Symbol	FAILURE		37649						
ANR	37724	Symbol	key		37649						
ANR	37725	Symbol	key_len		37649						
ANR	37726	Function	add_assoc_resource_ex	1348:0:35688:35938							
ANR	37727	FunctionDef	"add_assoc_resource_ex (zval * arg , const char * key , size_t key_len , zend_resource * r)"		37726	0					
ANR	37728	CompoundStatement		1349:0:35795:35938	37726	0					
ANR	37729	IdentifierDeclStatement	"zval * ret , tmp ;"	1350:1:35798:35812	37726	0	True				
ANR	37730	IdentifierDecl	* ret		37726	0					
ANR	37731	IdentifierDeclType	zval *		37726	0					
ANR	37732	Identifier	ret		37726	1					
ANR	37733	IdentifierDecl	tmp		37726	1					
ANR	37734	IdentifierDeclType	zval		37726	0					
ANR	37735	Identifier	tmp		37726	1					
ANR	37736	ExpressionStatement	"ZVAL_RES ( & tmp , r )"	1352:1:35816:35833	37726	1	True				
ANR	37737	CallExpression	"ZVAL_RES ( & tmp , r )"		37726	0					
ANR	37738	Callee	ZVAL_RES		37726	0					
ANR	37739	Identifier	ZVAL_RES		37726	0					
ANR	37740	ArgumentList	& tmp		37726	1					
ANR	37741	Argument	& tmp		37726	0					
ANR	37742	UnaryOperationExpression	& tmp		37726	0					
ANR	37743	UnaryOperator	&		37726	0					
ANR	37744	Identifier	tmp		37726	1					
ANR	37745	Argument	r		37726	1					
ANR	37746	Identifier	r		37726	0					
ANR	37747	ExpressionStatement	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"	1353:1:35836:35903	37726	2	True				
ANR	37748	AssignmentExpression	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		37726	0		=			
ANR	37749	Identifier	ret		37726	0					
ANR	37750	CallExpression	"zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		37726	1					
ANR	37751	Callee	zend_symtable_str_update		37726	0					
ANR	37752	Identifier	zend_symtable_str_update		37726	0					
ANR	37753	ArgumentList	Z_ARRVAL_P ( arg )		37726	1					
ANR	37754	Argument	Z_ARRVAL_P ( arg )		37726	0					
ANR	37755	CallExpression	Z_ARRVAL_P ( arg )		37726	0					
ANR	37756	Callee	Z_ARRVAL_P		37726	0					
ANR	37757	Identifier	Z_ARRVAL_P		37726	0					
ANR	37758	ArgumentList	arg		37726	1					
ANR	37759	Argument	arg		37726	0					
ANR	37760	Identifier	arg		37726	0					
ANR	37761	Argument	key		37726	1					
ANR	37762	Identifier	key		37726	0					
ANR	37763	Argument	key_len		37726	2					
ANR	37764	Identifier	key_len		37726	0					
ANR	37765	Argument	& tmp		37726	3					
ANR	37766	UnaryOperationExpression	& tmp		37726	0					
ANR	37767	UnaryOperator	&		37726	0					
ANR	37768	Identifier	tmp		37726	1					
ANR	37769	ReturnStatement	return ret ? SUCCESS : FAILURE ;	1354:1:35906:35936	37726	3	True				
ANR	37770	ConditionalExpression	ret ? SUCCESS : FAILURE		37726	0					
ANR	37771	Condition	ret		37726	0					
ANR	37772	Identifier	ret		37726	0					
ANR	37773	Identifier	SUCCESS		37726	1					
ANR	37774	Identifier	FAILURE		37726	2					
ANR	37775	ReturnType	ZEND_API int		37726	1					
ANR	37776	Identifier	add_assoc_resource_ex		37726	2					
ANR	37777	ParameterList	"zval * arg , const char * key , size_t key_len , zend_resource * r"		37726	3					
ANR	37778	Parameter	zval * arg	1348:35:35723:35731	37726	0	True				
ANR	37779	ParameterType	zval *		37726	0					
ANR	37780	Identifier	arg		37726	1					
ANR	37781	Parameter	const char * key	1348:46:35734:35748	37726	1	True				
ANR	37782	ParameterType	const char *		37726	0					
ANR	37783	Identifier	key		37726	1					
ANR	37784	Parameter	size_t key_len	1348:63:35751:35764	37726	2	True				
ANR	37785	ParameterType	size_t		37726	0					
ANR	37786	Identifier	key_len		37726	1					
ANR	37787	Parameter	zend_resource * r	1348:79:35767:35782	37726	3	True				
ANR	37788	ParameterType	zend_resource *		37726	0					
ANR	37789	Identifier	r		37726	1					
ANR	37790	CFGEntryNode	ENTRY		37726		True				
ANR	37791	CFGExitNode	EXIT		37726		True				
ANR	37792	Symbol	ret		37726						
ANR	37793	Symbol	r		37726						
ANR	37794	Symbol	SUCCESS		37726						
ANR	37795	Symbol	tmp		37726						
ANR	37796	Symbol	arg		37726						
ANR	37797	Symbol	& tmp		37726						
ANR	37798	Symbol	zend_symtable_str_update		37726						
ANR	37799	Symbol	Z_ARRVAL_P		37726						
ANR	37800	Symbol	FAILURE		37726						
ANR	37801	Symbol	key		37726						
ANR	37802	Symbol	key_len		37726						
ANR	37803	Function	add_assoc_double_ex	1358:0:35951:36194							
ANR	37804	FunctionDef	"add_assoc_double_ex (zval * arg , const char * key , size_t key_len , double d)"		37803	0					
ANR	37805	CompoundStatement		1359:0:36048:36194	37803	0					
ANR	37806	IdentifierDeclStatement	"zval * ret , tmp ;"	1360:1:36051:36065	37803	0	True				
ANR	37807	IdentifierDecl	* ret		37803	0					
ANR	37808	IdentifierDeclType	zval *		37803	0					
ANR	37809	Identifier	ret		37803	1					
ANR	37810	IdentifierDecl	tmp		37803	1					
ANR	37811	IdentifierDeclType	zval		37803	0					
ANR	37812	Identifier	tmp		37803	1					
ANR	37813	ExpressionStatement	"ZVAL_DOUBLE ( & tmp , d )"	1362:1:36069:36089	37803	1	True				
ANR	37814	CallExpression	"ZVAL_DOUBLE ( & tmp , d )"		37803	0					
ANR	37815	Callee	ZVAL_DOUBLE		37803	0					
ANR	37816	Identifier	ZVAL_DOUBLE		37803	0					
ANR	37817	ArgumentList	& tmp		37803	1					
ANR	37818	Argument	& tmp		37803	0					
ANR	37819	UnaryOperationExpression	& tmp		37803	0					
ANR	37820	UnaryOperator	&		37803	0					
ANR	37821	Identifier	tmp		37803	1					
ANR	37822	Argument	d		37803	1					
ANR	37823	Identifier	d		37803	0					
ANR	37824	ExpressionStatement	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"	1363:1:36092:36159	37803	2	True				
ANR	37825	AssignmentExpression	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		37803	0		=			
ANR	37826	Identifier	ret		37803	0					
ANR	37827	CallExpression	"zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		37803	1					
ANR	37828	Callee	zend_symtable_str_update		37803	0					
ANR	37829	Identifier	zend_symtable_str_update		37803	0					
ANR	37830	ArgumentList	Z_ARRVAL_P ( arg )		37803	1					
ANR	37831	Argument	Z_ARRVAL_P ( arg )		37803	0					
ANR	37832	CallExpression	Z_ARRVAL_P ( arg )		37803	0					
ANR	37833	Callee	Z_ARRVAL_P		37803	0					
ANR	37834	Identifier	Z_ARRVAL_P		37803	0					
ANR	37835	ArgumentList	arg		37803	1					
ANR	37836	Argument	arg		37803	0					
ANR	37837	Identifier	arg		37803	0					
ANR	37838	Argument	key		37803	1					
ANR	37839	Identifier	key		37803	0					
ANR	37840	Argument	key_len		37803	2					
ANR	37841	Identifier	key_len		37803	0					
ANR	37842	Argument	& tmp		37803	3					
ANR	37843	UnaryOperationExpression	& tmp		37803	0					
ANR	37844	UnaryOperator	&		37803	0					
ANR	37845	Identifier	tmp		37803	1					
ANR	37846	ReturnStatement	return ret ? SUCCESS : FAILURE ;	1364:1:36162:36192	37803	3	True				
ANR	37847	ConditionalExpression	ret ? SUCCESS : FAILURE		37803	0					
ANR	37848	Condition	ret		37803	0					
ANR	37849	Identifier	ret		37803	0					
ANR	37850	Identifier	SUCCESS		37803	1					
ANR	37851	Identifier	FAILURE		37803	2					
ANR	37852	ReturnType	ZEND_API int		37803	1					
ANR	37853	Identifier	add_assoc_double_ex		37803	2					
ANR	37854	ParameterList	"zval * arg , const char * key , size_t key_len , double d"		37803	3					
ANR	37855	Parameter	zval * arg	1358:33:35984:35992	37803	0	True				
ANR	37856	ParameterType	zval *		37803	0					
ANR	37857	Identifier	arg		37803	1					
ANR	37858	Parameter	const char * key	1358:44:35995:36009	37803	1	True				
ANR	37859	ParameterType	const char *		37803	0					
ANR	37860	Identifier	key		37803	1					
ANR	37861	Parameter	size_t key_len	1358:61:36012:36025	37803	2	True				
ANR	37862	ParameterType	size_t		37803	0					
ANR	37863	Identifier	key_len		37803	1					
ANR	37864	Parameter	double d	1358:77:36028:36035	37803	3	True				
ANR	37865	ParameterType	double		37803	0					
ANR	37866	Identifier	d		37803	1					
ANR	37867	CFGEntryNode	ENTRY		37803		True				
ANR	37868	CFGExitNode	EXIT		37803		True				
ANR	37869	Symbol	ret		37803						
ANR	37870	Symbol	SUCCESS		37803						
ANR	37871	Symbol	d		37803						
ANR	37872	Symbol	tmp		37803						
ANR	37873	Symbol	arg		37803						
ANR	37874	Symbol	& tmp		37803						
ANR	37875	Symbol	zend_symtable_str_update		37803						
ANR	37876	Symbol	Z_ARRVAL_P		37803						
ANR	37877	Symbol	FAILURE		37803						
ANR	37878	Symbol	key		37803						
ANR	37879	Symbol	key_len		37803						
ANR	37880	Function	add_assoc_str_ex	1368:0:36207:36454							
ANR	37881	FunctionDef	"add_assoc_str_ex (zval * arg , const char * key , size_t key_len , zend_string * str)"		37880	0					
ANR	37882	CompoundStatement		1369:0:36309:36454	37880	0					
ANR	37883	IdentifierDeclStatement	"zval * ret , tmp ;"	1370:1:36312:36326	37880	0	True				
ANR	37884	IdentifierDecl	* ret		37880	0					
ANR	37885	IdentifierDeclType	zval *		37880	0					
ANR	37886	Identifier	ret		37880	1					
ANR	37887	IdentifierDecl	tmp		37880	1					
ANR	37888	IdentifierDeclType	zval		37880	0					
ANR	37889	Identifier	tmp		37880	1					
ANR	37890	ExpressionStatement	"ZVAL_STR ( & tmp , str )"	1372:1:36330:36349	37880	1	True				
ANR	37891	CallExpression	"ZVAL_STR ( & tmp , str )"		37880	0					
ANR	37892	Callee	ZVAL_STR		37880	0					
ANR	37893	Identifier	ZVAL_STR		37880	0					
ANR	37894	ArgumentList	& tmp		37880	1					
ANR	37895	Argument	& tmp		37880	0					
ANR	37896	UnaryOperationExpression	& tmp		37880	0					
ANR	37897	UnaryOperator	&		37880	0					
ANR	37898	Identifier	tmp		37880	1					
ANR	37899	Argument	str		37880	1					
ANR	37900	Identifier	str		37880	0					
ANR	37901	ExpressionStatement	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"	1373:1:36352:36419	37880	2	True				
ANR	37902	AssignmentExpression	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		37880	0		=			
ANR	37903	Identifier	ret		37880	0					
ANR	37904	CallExpression	"zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		37880	1					
ANR	37905	Callee	zend_symtable_str_update		37880	0					
ANR	37906	Identifier	zend_symtable_str_update		37880	0					
ANR	37907	ArgumentList	Z_ARRVAL_P ( arg )		37880	1					
ANR	37908	Argument	Z_ARRVAL_P ( arg )		37880	0					
ANR	37909	CallExpression	Z_ARRVAL_P ( arg )		37880	0					
ANR	37910	Callee	Z_ARRVAL_P		37880	0					
ANR	37911	Identifier	Z_ARRVAL_P		37880	0					
ANR	37912	ArgumentList	arg		37880	1					
ANR	37913	Argument	arg		37880	0					
ANR	37914	Identifier	arg		37880	0					
ANR	37915	Argument	key		37880	1					
ANR	37916	Identifier	key		37880	0					
ANR	37917	Argument	key_len		37880	2					
ANR	37918	Identifier	key_len		37880	0					
ANR	37919	Argument	& tmp		37880	3					
ANR	37920	UnaryOperationExpression	& tmp		37880	0					
ANR	37921	UnaryOperator	&		37880	0					
ANR	37922	Identifier	tmp		37880	1					
ANR	37923	ReturnStatement	return ret ? SUCCESS : FAILURE ;	1374:1:36422:36452	37880	3	True				
ANR	37924	ConditionalExpression	ret ? SUCCESS : FAILURE		37880	0					
ANR	37925	Condition	ret		37880	0					
ANR	37926	Identifier	ret		37880	0					
ANR	37927	Identifier	SUCCESS		37880	1					
ANR	37928	Identifier	FAILURE		37880	2					
ANR	37929	ReturnType	ZEND_API int		37880	1					
ANR	37930	Identifier	add_assoc_str_ex		37880	2					
ANR	37931	ParameterList	"zval * arg , const char * key , size_t key_len , zend_string * str"		37880	3					
ANR	37932	Parameter	zval * arg	1368:30:36237:36245	37880	0	True				
ANR	37933	ParameterType	zval *		37880	0					
ANR	37934	Identifier	arg		37880	1					
ANR	37935	Parameter	const char * key	1368:41:36248:36262	37880	1	True				
ANR	37936	ParameterType	const char *		37880	0					
ANR	37937	Identifier	key		37880	1					
ANR	37938	Parameter	size_t key_len	1368:58:36265:36278	37880	2	True				
ANR	37939	ParameterType	size_t		37880	0					
ANR	37940	Identifier	key_len		37880	1					
ANR	37941	Parameter	zend_string * str	1368:74:36281:36296	37880	3	True				
ANR	37942	ParameterType	zend_string *		37880	0					
ANR	37943	Identifier	str		37880	1					
ANR	37944	CFGEntryNode	ENTRY		37880		True				
ANR	37945	CFGExitNode	EXIT		37880		True				
ANR	37946	Symbol	str		37880						
ANR	37947	Symbol	ret		37880						
ANR	37948	Symbol	SUCCESS		37880						
ANR	37949	Symbol	tmp		37880						
ANR	37950	Symbol	arg		37880						
ANR	37951	Symbol	& tmp		37880						
ANR	37952	Symbol	zend_symtable_str_update		37880						
ANR	37953	Symbol	Z_ARRVAL_P		37880						
ANR	37954	Symbol	FAILURE		37880						
ANR	37955	Symbol	key		37880						
ANR	37956	Symbol	key_len		37880						
ANR	37957	Function	add_assoc_string_ex	1378:0:36467:36713							
ANR	37958	FunctionDef	"add_assoc_string_ex (zval * arg , const char * key , size_t key_len , char * str)"		37957	0					
ANR	37959	CompoundStatement		1379:0:36565:36713	37957	0					
ANR	37960	IdentifierDeclStatement	"zval * ret , tmp ;"	1380:1:36568:36582	37957	0	True				
ANR	37961	IdentifierDecl	* ret		37957	0					
ANR	37962	IdentifierDeclType	zval *		37957	0					
ANR	37963	Identifier	ret		37957	1					
ANR	37964	IdentifierDecl	tmp		37957	1					
ANR	37965	IdentifierDeclType	zval		37957	0					
ANR	37966	Identifier	tmp		37957	1					
ANR	37967	ExpressionStatement	"ZVAL_STRING ( & tmp , str )"	1382:1:36586:36608	37957	1	True				
ANR	37968	CallExpression	"ZVAL_STRING ( & tmp , str )"		37957	0					
ANR	37969	Callee	ZVAL_STRING		37957	0					
ANR	37970	Identifier	ZVAL_STRING		37957	0					
ANR	37971	ArgumentList	& tmp		37957	1					
ANR	37972	Argument	& tmp		37957	0					
ANR	37973	UnaryOperationExpression	& tmp		37957	0					
ANR	37974	UnaryOperator	&		37957	0					
ANR	37975	Identifier	tmp		37957	1					
ANR	37976	Argument	str		37957	1					
ANR	37977	Identifier	str		37957	0					
ANR	37978	ExpressionStatement	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"	1383:1:36611:36678	37957	2	True				
ANR	37979	AssignmentExpression	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		37957	0		=			
ANR	37980	Identifier	ret		37957	0					
ANR	37981	CallExpression	"zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		37957	1					
ANR	37982	Callee	zend_symtable_str_update		37957	0					
ANR	37983	Identifier	zend_symtable_str_update		37957	0					
ANR	37984	ArgumentList	Z_ARRVAL_P ( arg )		37957	1					
ANR	37985	Argument	Z_ARRVAL_P ( arg )		37957	0					
ANR	37986	CallExpression	Z_ARRVAL_P ( arg )		37957	0					
ANR	37987	Callee	Z_ARRVAL_P		37957	0					
ANR	37988	Identifier	Z_ARRVAL_P		37957	0					
ANR	37989	ArgumentList	arg		37957	1					
ANR	37990	Argument	arg		37957	0					
ANR	37991	Identifier	arg		37957	0					
ANR	37992	Argument	key		37957	1					
ANR	37993	Identifier	key		37957	0					
ANR	37994	Argument	key_len		37957	2					
ANR	37995	Identifier	key_len		37957	0					
ANR	37996	Argument	& tmp		37957	3					
ANR	37997	UnaryOperationExpression	& tmp		37957	0					
ANR	37998	UnaryOperator	&		37957	0					
ANR	37999	Identifier	tmp		37957	1					
ANR	38000	ReturnStatement	return ret ? SUCCESS : FAILURE ;	1384:1:36681:36711	37957	3	True				
ANR	38001	ConditionalExpression	ret ? SUCCESS : FAILURE		37957	0					
ANR	38002	Condition	ret		37957	0					
ANR	38003	Identifier	ret		37957	0					
ANR	38004	Identifier	SUCCESS		37957	1					
ANR	38005	Identifier	FAILURE		37957	2					
ANR	38006	ReturnType	ZEND_API int		37957	1					
ANR	38007	Identifier	add_assoc_string_ex		37957	2					
ANR	38008	ParameterList	"zval * arg , const char * key , size_t key_len , char * str"		37957	3					
ANR	38009	Parameter	zval * arg	1378:33:36500:36508	37957	0	True				
ANR	38010	ParameterType	zval *		37957	0					
ANR	38011	Identifier	arg		37957	1					
ANR	38012	Parameter	const char * key	1378:44:36511:36525	37957	1	True				
ANR	38013	ParameterType	const char *		37957	0					
ANR	38014	Identifier	key		37957	1					
ANR	38015	Parameter	size_t key_len	1378:61:36528:36541	37957	2	True				
ANR	38016	ParameterType	size_t		37957	0					
ANR	38017	Identifier	key_len		37957	1					
ANR	38018	Parameter	char * str	1378:77:36544:36552	37957	3	True				
ANR	38019	ParameterType	char *		37957	0					
ANR	38020	Identifier	str		37957	1					
ANR	38021	CFGEntryNode	ENTRY		37957		True				
ANR	38022	CFGExitNode	EXIT		37957		True				
ANR	38023	Symbol	str		37957						
ANR	38024	Symbol	ret		37957						
ANR	38025	Symbol	SUCCESS		37957						
ANR	38026	Symbol	tmp		37957						
ANR	38027	Symbol	arg		37957						
ANR	38028	Symbol	& tmp		37957						
ANR	38029	Symbol	zend_symtable_str_update		37957						
ANR	38030	Symbol	Z_ARRVAL_P		37957						
ANR	38031	Symbol	FAILURE		37957						
ANR	38032	Symbol	key		37957						
ANR	38033	Symbol	key_len		37957						
ANR	38034	Function	add_assoc_stringl_ex	1388:0:36726:36997							
ANR	38035	FunctionDef	"add_assoc_stringl_ex (zval * arg , const char * key , size_t key_len , char * str , size_t length)"		38034	0					
ANR	38036	CompoundStatement		1389:0:36840:36997	38034	0					
ANR	38037	IdentifierDeclStatement	"zval * ret , tmp ;"	1390:1:36843:36857	38034	0	True				
ANR	38038	IdentifierDecl	* ret		38034	0					
ANR	38039	IdentifierDeclType	zval *		38034	0					
ANR	38040	Identifier	ret		38034	1					
ANR	38041	IdentifierDecl	tmp		38034	1					
ANR	38042	IdentifierDeclType	zval		38034	0					
ANR	38043	Identifier	tmp		38034	1					
ANR	38044	ExpressionStatement	"ZVAL_STRINGL ( & tmp , str , length )"	1392:1:36861:36892	38034	1	True				
ANR	38045	CallExpression	"ZVAL_STRINGL ( & tmp , str , length )"		38034	0					
ANR	38046	Callee	ZVAL_STRINGL		38034	0					
ANR	38047	Identifier	ZVAL_STRINGL		38034	0					
ANR	38048	ArgumentList	& tmp		38034	1					
ANR	38049	Argument	& tmp		38034	0					
ANR	38050	UnaryOperationExpression	& tmp		38034	0					
ANR	38051	UnaryOperator	&		38034	0					
ANR	38052	Identifier	tmp		38034	1					
ANR	38053	Argument	str		38034	1					
ANR	38054	Identifier	str		38034	0					
ANR	38055	Argument	length		38034	2					
ANR	38056	Identifier	length		38034	0					
ANR	38057	ExpressionStatement	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"	1393:1:36895:36962	38034	2	True				
ANR	38058	AssignmentExpression	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		38034	0		=			
ANR	38059	Identifier	ret		38034	0					
ANR	38060	CallExpression	"zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		38034	1					
ANR	38061	Callee	zend_symtable_str_update		38034	0					
ANR	38062	Identifier	zend_symtable_str_update		38034	0					
ANR	38063	ArgumentList	Z_ARRVAL_P ( arg )		38034	1					
ANR	38064	Argument	Z_ARRVAL_P ( arg )		38034	0					
ANR	38065	CallExpression	Z_ARRVAL_P ( arg )		38034	0					
ANR	38066	Callee	Z_ARRVAL_P		38034	0					
ANR	38067	Identifier	Z_ARRVAL_P		38034	0					
ANR	38068	ArgumentList	arg		38034	1					
ANR	38069	Argument	arg		38034	0					
ANR	38070	Identifier	arg		38034	0					
ANR	38071	Argument	key		38034	1					
ANR	38072	Identifier	key		38034	0					
ANR	38073	Argument	key_len		38034	2					
ANR	38074	Identifier	key_len		38034	0					
ANR	38075	Argument	& tmp		38034	3					
ANR	38076	UnaryOperationExpression	& tmp		38034	0					
ANR	38077	UnaryOperator	&		38034	0					
ANR	38078	Identifier	tmp		38034	1					
ANR	38079	ReturnStatement	return ret ? SUCCESS : FAILURE ;	1394:1:36965:36995	38034	3	True				
ANR	38080	ConditionalExpression	ret ? SUCCESS : FAILURE		38034	0					
ANR	38081	Condition	ret		38034	0					
ANR	38082	Identifier	ret		38034	0					
ANR	38083	Identifier	SUCCESS		38034	1					
ANR	38084	Identifier	FAILURE		38034	2					
ANR	38085	ReturnType	ZEND_API int		38034	1					
ANR	38086	Identifier	add_assoc_stringl_ex		38034	2					
ANR	38087	ParameterList	"zval * arg , const char * key , size_t key_len , char * str , size_t length"		38034	3					
ANR	38088	Parameter	zval * arg	1388:34:36760:36768	38034	0	True				
ANR	38089	ParameterType	zval *		38034	0					
ANR	38090	Identifier	arg		38034	1					
ANR	38091	Parameter	const char * key	1388:45:36771:36785	38034	1	True				
ANR	38092	ParameterType	const char *		38034	0					
ANR	38093	Identifier	key		38034	1					
ANR	38094	Parameter	size_t key_len	1388:62:36788:36801	38034	2	True				
ANR	38095	ParameterType	size_t		38034	0					
ANR	38096	Identifier	key_len		38034	1					
ANR	38097	Parameter	char * str	1388:78:36804:36812	38034	3	True				
ANR	38098	ParameterType	char *		38034	0					
ANR	38099	Identifier	str		38034	1					
ANR	38100	Parameter	size_t length	1388:89:36815:36827	38034	4	True				
ANR	38101	ParameterType	size_t		38034	0					
ANR	38102	Identifier	length		38034	1					
ANR	38103	CFGEntryNode	ENTRY		38034		True				
ANR	38104	CFGExitNode	EXIT		38034		True				
ANR	38105	Symbol	str		38034						
ANR	38106	Symbol	ret		38034						
ANR	38107	Symbol	SUCCESS		38034						
ANR	38108	Symbol	tmp		38034						
ANR	38109	Symbol	arg		38034						
ANR	38110	Symbol	length		38034						
ANR	38111	Symbol	& tmp		38034						
ANR	38112	Symbol	zend_symtable_str_update		38034						
ANR	38113	Symbol	Z_ARRVAL_P		38034						
ANR	38114	Symbol	FAILURE		38034						
ANR	38115	Symbol	key		38034						
ANR	38116	Symbol	key_len		38034						
ANR	38117	Function	add_assoc_zval_ex	1398:0:37010:37227							
ANR	38118	FunctionDef	"add_assoc_zval_ex (zval * arg , const char * key , size_t key_len , zval * value)"		38117	0					
ANR	38119	CompoundStatement		1399:0:37108:37227	38117	0					
ANR	38120	IdentifierDeclStatement	zval * ret ;	1400:1:37111:37120	38117	0	True				
ANR	38121	IdentifierDecl	* ret		38117	0					
ANR	38122	IdentifierDeclType	zval *		38117	0					
ANR	38123	Identifier	ret		38117	1					
ANR	38124	ExpressionStatement	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , value )"	1402:1:37124:37192	38117	1	True				
ANR	38125	AssignmentExpression	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , value )"		38117	0		=			
ANR	38126	Identifier	ret		38117	0					
ANR	38127	CallExpression	"zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , value )"		38117	1					
ANR	38128	Callee	zend_symtable_str_update		38117	0					
ANR	38129	Identifier	zend_symtable_str_update		38117	0					
ANR	38130	ArgumentList	Z_ARRVAL_P ( arg )		38117	1					
ANR	38131	Argument	Z_ARRVAL_P ( arg )		38117	0					
ANR	38132	CallExpression	Z_ARRVAL_P ( arg )		38117	0					
ANR	38133	Callee	Z_ARRVAL_P		38117	0					
ANR	38134	Identifier	Z_ARRVAL_P		38117	0					
ANR	38135	ArgumentList	arg		38117	1					
ANR	38136	Argument	arg		38117	0					
ANR	38137	Identifier	arg		38117	0					
ANR	38138	Argument	key		38117	1					
ANR	38139	Identifier	key		38117	0					
ANR	38140	Argument	key_len		38117	2					
ANR	38141	Identifier	key_len		38117	0					
ANR	38142	Argument	value		38117	3					
ANR	38143	Identifier	value		38117	0					
ANR	38144	ReturnStatement	return ret ? SUCCESS : FAILURE ;	1403:1:37195:37225	38117	2	True				
ANR	38145	ConditionalExpression	ret ? SUCCESS : FAILURE		38117	0					
ANR	38146	Condition	ret		38117	0					
ANR	38147	Identifier	ret		38117	0					
ANR	38148	Identifier	SUCCESS		38117	1					
ANR	38149	Identifier	FAILURE		38117	2					
ANR	38150	ReturnType	ZEND_API int		38117	1					
ANR	38151	Identifier	add_assoc_zval_ex		38117	2					
ANR	38152	ParameterList	"zval * arg , const char * key , size_t key_len , zval * value"		38117	3					
ANR	38153	Parameter	zval * arg	1398:31:37041:37049	38117	0	True				
ANR	38154	ParameterType	zval *		38117	0					
ANR	38155	Identifier	arg		38117	1					
ANR	38156	Parameter	const char * key	1398:42:37052:37066	38117	1	True				
ANR	38157	ParameterType	const char *		38117	0					
ANR	38158	Identifier	key		38117	1					
ANR	38159	Parameter	size_t key_len	1398:59:37069:37082	38117	2	True				
ANR	38160	ParameterType	size_t		38117	0					
ANR	38161	Identifier	key_len		38117	1					
ANR	38162	Parameter	zval * value	1398:75:37085:37095	38117	3	True				
ANR	38163	ParameterType	zval *		38117	0					
ANR	38164	Identifier	value		38117	1					
ANR	38165	CFGEntryNode	ENTRY		38117		True				
ANR	38166	CFGExitNode	EXIT		38117		True				
ANR	38167	Symbol	ret		38117						
ANR	38168	Symbol	SUCCESS		38117						
ANR	38169	Symbol	arg		38117						
ANR	38170	Symbol	zend_symtable_str_update		38117						
ANR	38171	Symbol	Z_ARRVAL_P		38117						
ANR	38172	Symbol	value		38117						
ANR	38173	Symbol	FAILURE		38117						
ANR	38174	Symbol	key		38117						
ANR	38175	Symbol	key_len		38117						
ANR	38176	Function	add_index_long	1407:0:37240:37437							
ANR	38177	FunctionDef	"add_index_long (zval * arg , zend_ulong index , zend_long n)"		38176	0					
ANR	38178	CompoundStatement		1408:0:37320:37437	38176	0					
ANR	38179	IdentifierDeclStatement	zval tmp ;	1409:1:37323:37331	38176	0	True				
ANR	38180	IdentifierDecl	tmp		38176	0					
ANR	38181	IdentifierDeclType	zval		38176	0					
ANR	38182	Identifier	tmp		38176	1					
ANR	38183	ExpressionStatement	"ZVAL_LONG ( & tmp , n )"	1411:1:37335:37353	38176	1	True				
ANR	38184	CallExpression	"ZVAL_LONG ( & tmp , n )"		38176	0					
ANR	38185	Callee	ZVAL_LONG		38176	0					
ANR	38186	Identifier	ZVAL_LONG		38176	0					
ANR	38187	ArgumentList	& tmp		38176	1					
ANR	38188	Argument	& tmp		38176	0					
ANR	38189	UnaryOperationExpression	& tmp		38176	0					
ANR	38190	UnaryOperator	&		38176	0					
ANR	38191	Identifier	tmp		38176	1					
ANR	38192	Argument	n		38176	1					
ANR	38193	Identifier	n		38176	0					
ANR	38194	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ? SUCCESS : FAILURE ;"	1412:1:37356:37435	38176	2	True				
ANR	38195	ConditionalExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ? SUCCESS : FAILURE"		38176	0					
ANR	38196	Condition	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		38176	0					
ANR	38197	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		38176	0					
ANR	38198	Callee	zend_hash_index_update		38176	0					
ANR	38199	Identifier	zend_hash_index_update		38176	0					
ANR	38200	ArgumentList	Z_ARRVAL_P ( arg )		38176	1					
ANR	38201	Argument	Z_ARRVAL_P ( arg )		38176	0					
ANR	38202	CallExpression	Z_ARRVAL_P ( arg )		38176	0					
ANR	38203	Callee	Z_ARRVAL_P		38176	0					
ANR	38204	Identifier	Z_ARRVAL_P		38176	0					
ANR	38205	ArgumentList	arg		38176	1					
ANR	38206	Argument	arg		38176	0					
ANR	38207	Identifier	arg		38176	0					
ANR	38208	Argument	index		38176	1					
ANR	38209	Identifier	index		38176	0					
ANR	38210	Argument	& tmp		38176	2					
ANR	38211	UnaryOperationExpression	& tmp		38176	0					
ANR	38212	UnaryOperator	&		38176	0					
ANR	38213	Identifier	tmp		38176	1					
ANR	38214	Identifier	SUCCESS		38176	1					
ANR	38215	Identifier	FAILURE		38176	2					
ANR	38216	ReturnType	ZEND_API int		38176	1					
ANR	38217	Identifier	add_index_long		38176	2					
ANR	38218	ParameterList	"zval * arg , zend_ulong index , zend_long n"		38176	3					
ANR	38219	Parameter	zval * arg	1407:28:37268:37276	38176	0	True				
ANR	38220	ParameterType	zval *		38176	0					
ANR	38221	Identifier	arg		38176	1					
ANR	38222	Parameter	zend_ulong index	1407:39:37279:37294	38176	1	True				
ANR	38223	ParameterType	zend_ulong		38176	0					
ANR	38224	Identifier	index		38176	1					
ANR	38225	Parameter	zend_long n	1407:57:37297:37307	38176	2	True				
ANR	38226	ParameterType	zend_long		38176	0					
ANR	38227	Identifier	n		38176	1					
ANR	38228	CFGEntryNode	ENTRY		38176		True				
ANR	38229	CFGExitNode	EXIT		38176		True				
ANR	38230	Symbol	SUCCESS		38176						
ANR	38231	Symbol	tmp		38176						
ANR	38232	Symbol	zend_hash_index_update		38176						
ANR	38233	Symbol	arg		38176						
ANR	38234	Symbol	index		38176						
ANR	38235	Symbol	& tmp		38176						
ANR	38236	Symbol	Z_ARRVAL_P		38176						
ANR	38237	Symbol	FAILURE		38176						
ANR	38238	Symbol	n		38176						
ANR	38239	Function	add_index_null	1416:0:37450:37631							
ANR	38240	FunctionDef	"add_index_null (zval * arg , zend_ulong index)"		38239	0					
ANR	38241	CompoundStatement		1417:0:37517:37631	38239	0					
ANR	38242	IdentifierDeclStatement	zval tmp ;	1418:1:37520:37528	38239	0	True				
ANR	38243	IdentifierDecl	tmp		38239	0					
ANR	38244	IdentifierDeclType	zval		38239	0					
ANR	38245	Identifier	tmp		38239	1					
ANR	38246	ExpressionStatement	ZVAL_NULL ( & tmp )	1420:1:37532:37547	38239	1	True				
ANR	38247	CallExpression	ZVAL_NULL ( & tmp )		38239	0					
ANR	38248	Callee	ZVAL_NULL		38239	0					
ANR	38249	Identifier	ZVAL_NULL		38239	0					
ANR	38250	ArgumentList	& tmp		38239	1					
ANR	38251	Argument	& tmp		38239	0					
ANR	38252	UnaryOperationExpression	& tmp		38239	0					
ANR	38253	UnaryOperator	&		38239	0					
ANR	38254	Identifier	tmp		38239	1					
ANR	38255	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ? SUCCESS : FAILURE ;"	1421:1:37550:37629	38239	2	True				
ANR	38256	ConditionalExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ? SUCCESS : FAILURE"		38239	0					
ANR	38257	Condition	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		38239	0					
ANR	38258	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		38239	0					
ANR	38259	Callee	zend_hash_index_update		38239	0					
ANR	38260	Identifier	zend_hash_index_update		38239	0					
ANR	38261	ArgumentList	Z_ARRVAL_P ( arg )		38239	1					
ANR	38262	Argument	Z_ARRVAL_P ( arg )		38239	0					
ANR	38263	CallExpression	Z_ARRVAL_P ( arg )		38239	0					
ANR	38264	Callee	Z_ARRVAL_P		38239	0					
ANR	38265	Identifier	Z_ARRVAL_P		38239	0					
ANR	38266	ArgumentList	arg		38239	1					
ANR	38267	Argument	arg		38239	0					
ANR	38268	Identifier	arg		38239	0					
ANR	38269	Argument	index		38239	1					
ANR	38270	Identifier	index		38239	0					
ANR	38271	Argument	& tmp		38239	2					
ANR	38272	UnaryOperationExpression	& tmp		38239	0					
ANR	38273	UnaryOperator	&		38239	0					
ANR	38274	Identifier	tmp		38239	1					
ANR	38275	Identifier	SUCCESS		38239	1					
ANR	38276	Identifier	FAILURE		38239	2					
ANR	38277	ReturnType	ZEND_API int		38239	1					
ANR	38278	Identifier	add_index_null		38239	2					
ANR	38279	ParameterList	"zval * arg , zend_ulong index"		38239	3					
ANR	38280	Parameter	zval * arg	1416:28:37478:37486	38239	0	True				
ANR	38281	ParameterType	zval *		38239	0					
ANR	38282	Identifier	arg		38239	1					
ANR	38283	Parameter	zend_ulong index	1416:39:37489:37504	38239	1	True				
ANR	38284	ParameterType	zend_ulong		38239	0					
ANR	38285	Identifier	index		38239	1					
ANR	38286	CFGEntryNode	ENTRY		38239		True				
ANR	38287	CFGExitNode	EXIT		38239		True				
ANR	38288	Symbol	SUCCESS		38239						
ANR	38289	Symbol	tmp		38239						
ANR	38290	Symbol	zend_hash_index_update		38239						
ANR	38291	Symbol	arg		38239						
ANR	38292	Symbol	index		38239						
ANR	38293	Symbol	& tmp		38239						
ANR	38294	Symbol	Z_ARRVAL_P		38239						
ANR	38295	Symbol	FAILURE		38239						
ANR	38296	Function	add_index_bool	1425:0:37644:37835							
ANR	38297	FunctionDef	"add_index_bool (zval * arg , zend_ulong index , int b)"		38296	0					
ANR	38298	CompoundStatement		1426:0:37718:37835	38296	0					
ANR	38299	IdentifierDeclStatement	zval tmp ;	1427:1:37721:37729	38296	0	True				
ANR	38300	IdentifierDecl	tmp		38296	0					
ANR	38301	IdentifierDeclType	zval		38296	0					
ANR	38302	Identifier	tmp		38296	1					
ANR	38303	ExpressionStatement	"ZVAL_BOOL ( & tmp , b )"	1429:1:37733:37751	38296	1	True				
ANR	38304	CallExpression	"ZVAL_BOOL ( & tmp , b )"		38296	0					
ANR	38305	Callee	ZVAL_BOOL		38296	0					
ANR	38306	Identifier	ZVAL_BOOL		38296	0					
ANR	38307	ArgumentList	& tmp		38296	1					
ANR	38308	Argument	& tmp		38296	0					
ANR	38309	UnaryOperationExpression	& tmp		38296	0					
ANR	38310	UnaryOperator	&		38296	0					
ANR	38311	Identifier	tmp		38296	1					
ANR	38312	Argument	b		38296	1					
ANR	38313	Identifier	b		38296	0					
ANR	38314	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ? SUCCESS : FAILURE ;"	1430:1:37754:37833	38296	2	True				
ANR	38315	ConditionalExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ? SUCCESS : FAILURE"		38296	0					
ANR	38316	Condition	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		38296	0					
ANR	38317	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		38296	0					
ANR	38318	Callee	zend_hash_index_update		38296	0					
ANR	38319	Identifier	zend_hash_index_update		38296	0					
ANR	38320	ArgumentList	Z_ARRVAL_P ( arg )		38296	1					
ANR	38321	Argument	Z_ARRVAL_P ( arg )		38296	0					
ANR	38322	CallExpression	Z_ARRVAL_P ( arg )		38296	0					
ANR	38323	Callee	Z_ARRVAL_P		38296	0					
ANR	38324	Identifier	Z_ARRVAL_P		38296	0					
ANR	38325	ArgumentList	arg		38296	1					
ANR	38326	Argument	arg		38296	0					
ANR	38327	Identifier	arg		38296	0					
ANR	38328	Argument	index		38296	1					
ANR	38329	Identifier	index		38296	0					
ANR	38330	Argument	& tmp		38296	2					
ANR	38331	UnaryOperationExpression	& tmp		38296	0					
ANR	38332	UnaryOperator	&		38296	0					
ANR	38333	Identifier	tmp		38296	1					
ANR	38334	Identifier	SUCCESS		38296	1					
ANR	38335	Identifier	FAILURE		38296	2					
ANR	38336	ReturnType	ZEND_API int		38296	1					
ANR	38337	Identifier	add_index_bool		38296	2					
ANR	38338	ParameterList	"zval * arg , zend_ulong index , int b"		38296	3					
ANR	38339	Parameter	zval * arg	1425:28:37672:37680	38296	0	True				
ANR	38340	ParameterType	zval *		38296	0					
ANR	38341	Identifier	arg		38296	1					
ANR	38342	Parameter	zend_ulong index	1425:39:37683:37698	38296	1	True				
ANR	38343	ParameterType	zend_ulong		38296	0					
ANR	38344	Identifier	index		38296	1					
ANR	38345	Parameter	int b	1425:57:37701:37705	38296	2	True				
ANR	38346	ParameterType	int		38296	0					
ANR	38347	Identifier	b		38296	1					
ANR	38348	CFGEntryNode	ENTRY		38296		True				
ANR	38349	CFGExitNode	EXIT		38296		True				
ANR	38350	Symbol	b		38296						
ANR	38351	Symbol	SUCCESS		38296						
ANR	38352	Symbol	tmp		38296						
ANR	38353	Symbol	zend_hash_index_update		38296						
ANR	38354	Symbol	arg		38296						
ANR	38355	Symbol	index		38296						
ANR	38356	Symbol	& tmp		38296						
ANR	38357	Symbol	Z_ARRVAL_P		38296						
ANR	38358	Symbol	FAILURE		38296						
ANR	38359	Function	add_index_resource	1434:0:37848:38053							
ANR	38360	FunctionDef	"add_index_resource (zval * arg , zend_ulong index , zend_resource * r)"		38359	0					
ANR	38361	CompoundStatement		1435:0:37937:38053	38359	0					
ANR	38362	IdentifierDeclStatement	zval tmp ;	1436:1:37940:37948	38359	0	True				
ANR	38363	IdentifierDecl	tmp		38359	0					
ANR	38364	IdentifierDeclType	zval		38359	0					
ANR	38365	Identifier	tmp		38359	1					
ANR	38366	ExpressionStatement	"ZVAL_RES ( & tmp , r )"	1438:1:37952:37969	38359	1	True				
ANR	38367	CallExpression	"ZVAL_RES ( & tmp , r )"		38359	0					
ANR	38368	Callee	ZVAL_RES		38359	0					
ANR	38369	Identifier	ZVAL_RES		38359	0					
ANR	38370	ArgumentList	& tmp		38359	1					
ANR	38371	Argument	& tmp		38359	0					
ANR	38372	UnaryOperationExpression	& tmp		38359	0					
ANR	38373	UnaryOperator	&		38359	0					
ANR	38374	Identifier	tmp		38359	1					
ANR	38375	Argument	r		38359	1					
ANR	38376	Identifier	r		38359	0					
ANR	38377	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ? SUCCESS : FAILURE ;"	1439:1:37972:38051	38359	2	True				
ANR	38378	ConditionalExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ? SUCCESS : FAILURE"		38359	0					
ANR	38379	Condition	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		38359	0					
ANR	38380	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		38359	0					
ANR	38381	Callee	zend_hash_index_update		38359	0					
ANR	38382	Identifier	zend_hash_index_update		38359	0					
ANR	38383	ArgumentList	Z_ARRVAL_P ( arg )		38359	1					
ANR	38384	Argument	Z_ARRVAL_P ( arg )		38359	0					
ANR	38385	CallExpression	Z_ARRVAL_P ( arg )		38359	0					
ANR	38386	Callee	Z_ARRVAL_P		38359	0					
ANR	38387	Identifier	Z_ARRVAL_P		38359	0					
ANR	38388	ArgumentList	arg		38359	1					
ANR	38389	Argument	arg		38359	0					
ANR	38390	Identifier	arg		38359	0					
ANR	38391	Argument	index		38359	1					
ANR	38392	Identifier	index		38359	0					
ANR	38393	Argument	& tmp		38359	2					
ANR	38394	UnaryOperationExpression	& tmp		38359	0					
ANR	38395	UnaryOperator	&		38359	0					
ANR	38396	Identifier	tmp		38359	1					
ANR	38397	Identifier	SUCCESS		38359	1					
ANR	38398	Identifier	FAILURE		38359	2					
ANR	38399	ReturnType	ZEND_API int		38359	1					
ANR	38400	Identifier	add_index_resource		38359	2					
ANR	38401	ParameterList	"zval * arg , zend_ulong index , zend_resource * r"		38359	3					
ANR	38402	Parameter	zval * arg	1434:32:37880:37888	38359	0	True				
ANR	38403	ParameterType	zval *		38359	0					
ANR	38404	Identifier	arg		38359	1					
ANR	38405	Parameter	zend_ulong index	1434:43:37891:37906	38359	1	True				
ANR	38406	ParameterType	zend_ulong		38359	0					
ANR	38407	Identifier	index		38359	1					
ANR	38408	Parameter	zend_resource * r	1434:61:37909:37924	38359	2	True				
ANR	38409	ParameterType	zend_resource *		38359	0					
ANR	38410	Identifier	r		38359	1					
ANR	38411	CFGEntryNode	ENTRY		38359		True				
ANR	38412	CFGExitNode	EXIT		38359		True				
ANR	38413	Symbol	r		38359						
ANR	38414	Symbol	SUCCESS		38359						
ANR	38415	Symbol	tmp		38359						
ANR	38416	Symbol	zend_hash_index_update		38359						
ANR	38417	Symbol	arg		38359						
ANR	38418	Symbol	index		38359						
ANR	38419	Symbol	& tmp		38359						
ANR	38420	Symbol	Z_ARRVAL_P		38359						
ANR	38421	Symbol	FAILURE		38359						
ANR	38422	Function	add_index_double	1443:0:38066:38264							
ANR	38423	FunctionDef	"add_index_double (zval * arg , zend_ulong index , double d)"		38422	0					
ANR	38424	CompoundStatement		1444:0:38145:38264	38422	0					
ANR	38425	IdentifierDeclStatement	zval tmp ;	1445:1:38148:38156	38422	0	True				
ANR	38426	IdentifierDecl	tmp		38422	0					
ANR	38427	IdentifierDeclType	zval		38422	0					
ANR	38428	Identifier	tmp		38422	1					
ANR	38429	ExpressionStatement	"ZVAL_DOUBLE ( & tmp , d )"	1447:1:38160:38180	38422	1	True				
ANR	38430	CallExpression	"ZVAL_DOUBLE ( & tmp , d )"		38422	0					
ANR	38431	Callee	ZVAL_DOUBLE		38422	0					
ANR	38432	Identifier	ZVAL_DOUBLE		38422	0					
ANR	38433	ArgumentList	& tmp		38422	1					
ANR	38434	Argument	& tmp		38422	0					
ANR	38435	UnaryOperationExpression	& tmp		38422	0					
ANR	38436	UnaryOperator	&		38422	0					
ANR	38437	Identifier	tmp		38422	1					
ANR	38438	Argument	d		38422	1					
ANR	38439	Identifier	d		38422	0					
ANR	38440	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ? SUCCESS : FAILURE ;"	1448:1:38183:38262	38422	2	True				
ANR	38441	ConditionalExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ? SUCCESS : FAILURE"		38422	0					
ANR	38442	Condition	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		38422	0					
ANR	38443	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		38422	0					
ANR	38444	Callee	zend_hash_index_update		38422	0					
ANR	38445	Identifier	zend_hash_index_update		38422	0					
ANR	38446	ArgumentList	Z_ARRVAL_P ( arg )		38422	1					
ANR	38447	Argument	Z_ARRVAL_P ( arg )		38422	0					
ANR	38448	CallExpression	Z_ARRVAL_P ( arg )		38422	0					
ANR	38449	Callee	Z_ARRVAL_P		38422	0					
ANR	38450	Identifier	Z_ARRVAL_P		38422	0					
ANR	38451	ArgumentList	arg		38422	1					
ANR	38452	Argument	arg		38422	0					
ANR	38453	Identifier	arg		38422	0					
ANR	38454	Argument	index		38422	1					
ANR	38455	Identifier	index		38422	0					
ANR	38456	Argument	& tmp		38422	2					
ANR	38457	UnaryOperationExpression	& tmp		38422	0					
ANR	38458	UnaryOperator	&		38422	0					
ANR	38459	Identifier	tmp		38422	1					
ANR	38460	Identifier	SUCCESS		38422	1					
ANR	38461	Identifier	FAILURE		38422	2					
ANR	38462	ReturnType	ZEND_API int		38422	1					
ANR	38463	Identifier	add_index_double		38422	2					
ANR	38464	ParameterList	"zval * arg , zend_ulong index , double d"		38422	3					
ANR	38465	Parameter	zval * arg	1443:30:38096:38104	38422	0	True				
ANR	38466	ParameterType	zval *		38422	0					
ANR	38467	Identifier	arg		38422	1					
ANR	38468	Parameter	zend_ulong index	1443:41:38107:38122	38422	1	True				
ANR	38469	ParameterType	zend_ulong		38422	0					
ANR	38470	Identifier	index		38422	1					
ANR	38471	Parameter	double d	1443:59:38125:38132	38422	2	True				
ANR	38472	ParameterType	double		38422	0					
ANR	38473	Identifier	d		38422	1					
ANR	38474	CFGEntryNode	ENTRY		38422		True				
ANR	38475	CFGExitNode	EXIT		38422		True				
ANR	38476	Symbol	SUCCESS		38422						
ANR	38477	Symbol	d		38422						
ANR	38478	Symbol	tmp		38422						
ANR	38479	Symbol	zend_hash_index_update		38422						
ANR	38480	Symbol	arg		38422						
ANR	38481	Symbol	index		38422						
ANR	38482	Symbol	& tmp		38422						
ANR	38483	Symbol	Z_ARRVAL_P		38422						
ANR	38484	Symbol	FAILURE		38422						
ANR	38485	Function	add_index_str	1452:0:38277:38479							
ANR	38486	FunctionDef	"add_index_str (zval * arg , zend_ulong index , zend_string * str)"		38485	0					
ANR	38487	CompoundStatement		1453:0:38361:38479	38485	0					
ANR	38488	IdentifierDeclStatement	zval tmp ;	1454:1:38364:38372	38485	0	True				
ANR	38489	IdentifierDecl	tmp		38485	0					
ANR	38490	IdentifierDeclType	zval		38485	0					
ANR	38491	Identifier	tmp		38485	1					
ANR	38492	ExpressionStatement	"ZVAL_STR ( & tmp , str )"	1456:1:38376:38395	38485	1	True				
ANR	38493	CallExpression	"ZVAL_STR ( & tmp , str )"		38485	0					
ANR	38494	Callee	ZVAL_STR		38485	0					
ANR	38495	Identifier	ZVAL_STR		38485	0					
ANR	38496	ArgumentList	& tmp		38485	1					
ANR	38497	Argument	& tmp		38485	0					
ANR	38498	UnaryOperationExpression	& tmp		38485	0					
ANR	38499	UnaryOperator	&		38485	0					
ANR	38500	Identifier	tmp		38485	1					
ANR	38501	Argument	str		38485	1					
ANR	38502	Identifier	str		38485	0					
ANR	38503	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ? SUCCESS : FAILURE ;"	1457:1:38398:38477	38485	2	True				
ANR	38504	ConditionalExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ? SUCCESS : FAILURE"		38485	0					
ANR	38505	Condition	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		38485	0					
ANR	38506	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		38485	0					
ANR	38507	Callee	zend_hash_index_update		38485	0					
ANR	38508	Identifier	zend_hash_index_update		38485	0					
ANR	38509	ArgumentList	Z_ARRVAL_P ( arg )		38485	1					
ANR	38510	Argument	Z_ARRVAL_P ( arg )		38485	0					
ANR	38511	CallExpression	Z_ARRVAL_P ( arg )		38485	0					
ANR	38512	Callee	Z_ARRVAL_P		38485	0					
ANR	38513	Identifier	Z_ARRVAL_P		38485	0					
ANR	38514	ArgumentList	arg		38485	1					
ANR	38515	Argument	arg		38485	0					
ANR	38516	Identifier	arg		38485	0					
ANR	38517	Argument	index		38485	1					
ANR	38518	Identifier	index		38485	0					
ANR	38519	Argument	& tmp		38485	2					
ANR	38520	UnaryOperationExpression	& tmp		38485	0					
ANR	38521	UnaryOperator	&		38485	0					
ANR	38522	Identifier	tmp		38485	1					
ANR	38523	Identifier	SUCCESS		38485	1					
ANR	38524	Identifier	FAILURE		38485	2					
ANR	38525	ReturnType	ZEND_API int		38485	1					
ANR	38526	Identifier	add_index_str		38485	2					
ANR	38527	ParameterList	"zval * arg , zend_ulong index , zend_string * str"		38485	3					
ANR	38528	Parameter	zval * arg	1452:27:38304:38312	38485	0	True				
ANR	38529	ParameterType	zval *		38485	0					
ANR	38530	Identifier	arg		38485	1					
ANR	38531	Parameter	zend_ulong index	1452:38:38315:38330	38485	1	True				
ANR	38532	ParameterType	zend_ulong		38485	0					
ANR	38533	Identifier	index		38485	1					
ANR	38534	Parameter	zend_string * str	1452:56:38333:38348	38485	2	True				
ANR	38535	ParameterType	zend_string *		38485	0					
ANR	38536	Identifier	str		38485	1					
ANR	38537	CFGEntryNode	ENTRY		38485		True				
ANR	38538	CFGExitNode	EXIT		38485		True				
ANR	38539	Symbol	str		38485						
ANR	38540	Symbol	SUCCESS		38485						
ANR	38541	Symbol	tmp		38485						
ANR	38542	Symbol	zend_hash_index_update		38485						
ANR	38543	Symbol	arg		38485						
ANR	38544	Symbol	index		38485						
ANR	38545	Symbol	& tmp		38485						
ANR	38546	Symbol	Z_ARRVAL_P		38485						
ANR	38547	Symbol	FAILURE		38485						
ANR	38548	Function	add_index_string	1461:0:38492:38699							
ANR	38549	FunctionDef	"add_index_string (zval * arg , zend_ulong index , const char * str)"		38548	0					
ANR	38550	CompoundStatement		1462:0:38578:38699	38548	0					
ANR	38551	IdentifierDeclStatement	zval tmp ;	1463:1:38581:38589	38548	0	True				
ANR	38552	IdentifierDecl	tmp		38548	0					
ANR	38553	IdentifierDeclType	zval		38548	0					
ANR	38554	Identifier	tmp		38548	1					
ANR	38555	ExpressionStatement	"ZVAL_STRING ( & tmp , str )"	1465:1:38593:38615	38548	1	True				
ANR	38556	CallExpression	"ZVAL_STRING ( & tmp , str )"		38548	0					
ANR	38557	Callee	ZVAL_STRING		38548	0					
ANR	38558	Identifier	ZVAL_STRING		38548	0					
ANR	38559	ArgumentList	& tmp		38548	1					
ANR	38560	Argument	& tmp		38548	0					
ANR	38561	UnaryOperationExpression	& tmp		38548	0					
ANR	38562	UnaryOperator	&		38548	0					
ANR	38563	Identifier	tmp		38548	1					
ANR	38564	Argument	str		38548	1					
ANR	38565	Identifier	str		38548	0					
ANR	38566	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ? SUCCESS : FAILURE ;"	1466:1:38618:38697	38548	2	True				
ANR	38567	ConditionalExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ? SUCCESS : FAILURE"		38548	0					
ANR	38568	Condition	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		38548	0					
ANR	38569	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		38548	0					
ANR	38570	Callee	zend_hash_index_update		38548	0					
ANR	38571	Identifier	zend_hash_index_update		38548	0					
ANR	38572	ArgumentList	Z_ARRVAL_P ( arg )		38548	1					
ANR	38573	Argument	Z_ARRVAL_P ( arg )		38548	0					
ANR	38574	CallExpression	Z_ARRVAL_P ( arg )		38548	0					
ANR	38575	Callee	Z_ARRVAL_P		38548	0					
ANR	38576	Identifier	Z_ARRVAL_P		38548	0					
ANR	38577	ArgumentList	arg		38548	1					
ANR	38578	Argument	arg		38548	0					
ANR	38579	Identifier	arg		38548	0					
ANR	38580	Argument	index		38548	1					
ANR	38581	Identifier	index		38548	0					
ANR	38582	Argument	& tmp		38548	2					
ANR	38583	UnaryOperationExpression	& tmp		38548	0					
ANR	38584	UnaryOperator	&		38548	0					
ANR	38585	Identifier	tmp		38548	1					
ANR	38586	Identifier	SUCCESS		38548	1					
ANR	38587	Identifier	FAILURE		38548	2					
ANR	38588	ReturnType	ZEND_API int		38548	1					
ANR	38589	Identifier	add_index_string		38548	2					
ANR	38590	ParameterList	"zval * arg , zend_ulong index , const char * str"		38548	3					
ANR	38591	Parameter	zval * arg	1461:30:38522:38530	38548	0	True				
ANR	38592	ParameterType	zval *		38548	0					
ANR	38593	Identifier	arg		38548	1					
ANR	38594	Parameter	zend_ulong index	1461:41:38533:38548	38548	1	True				
ANR	38595	ParameterType	zend_ulong		38548	0					
ANR	38596	Identifier	index		38548	1					
ANR	38597	Parameter	const char * str	1461:59:38551:38565	38548	2	True				
ANR	38598	ParameterType	const char *		38548	0					
ANR	38599	Identifier	str		38548	1					
ANR	38600	CFGEntryNode	ENTRY		38548		True				
ANR	38601	CFGExitNode	EXIT		38548		True				
ANR	38602	Symbol	str		38548						
ANR	38603	Symbol	SUCCESS		38548						
ANR	38604	Symbol	tmp		38548						
ANR	38605	Symbol	zend_hash_index_update		38548						
ANR	38606	Symbol	arg		38548						
ANR	38607	Symbol	index		38548						
ANR	38608	Symbol	& tmp		38548						
ANR	38609	Symbol	Z_ARRVAL_P		38548						
ANR	38610	Symbol	FAILURE		38548						
ANR	38611	Function	add_index_stringl	1470:0:38712:38944							
ANR	38612	FunctionDef	"add_index_stringl (zval * arg , zend_ulong index , const char * str , size_t length)"		38611	0					
ANR	38613	CompoundStatement		1471:0:38814:38944	38611	0					
ANR	38614	IdentifierDeclStatement	zval tmp ;	1472:1:38817:38825	38611	0	True				
ANR	38615	IdentifierDecl	tmp		38611	0					
ANR	38616	IdentifierDeclType	zval		38611	0					
ANR	38617	Identifier	tmp		38611	1					
ANR	38618	ExpressionStatement	"ZVAL_STRINGL ( & tmp , str , length )"	1474:1:38829:38860	38611	1	True				
ANR	38619	CallExpression	"ZVAL_STRINGL ( & tmp , str , length )"		38611	0					
ANR	38620	Callee	ZVAL_STRINGL		38611	0					
ANR	38621	Identifier	ZVAL_STRINGL		38611	0					
ANR	38622	ArgumentList	& tmp		38611	1					
ANR	38623	Argument	& tmp		38611	0					
ANR	38624	UnaryOperationExpression	& tmp		38611	0					
ANR	38625	UnaryOperator	&		38611	0					
ANR	38626	Identifier	tmp		38611	1					
ANR	38627	Argument	str		38611	1					
ANR	38628	Identifier	str		38611	0					
ANR	38629	Argument	length		38611	2					
ANR	38630	Identifier	length		38611	0					
ANR	38631	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ? SUCCESS : FAILURE ;"	1475:1:38863:38942	38611	2	True				
ANR	38632	ConditionalExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ? SUCCESS : FAILURE"		38611	0					
ANR	38633	Condition	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		38611	0					
ANR	38634	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		38611	0					
ANR	38635	Callee	zend_hash_index_update		38611	0					
ANR	38636	Identifier	zend_hash_index_update		38611	0					
ANR	38637	ArgumentList	Z_ARRVAL_P ( arg )		38611	1					
ANR	38638	Argument	Z_ARRVAL_P ( arg )		38611	0					
ANR	38639	CallExpression	Z_ARRVAL_P ( arg )		38611	0					
ANR	38640	Callee	Z_ARRVAL_P		38611	0					
ANR	38641	Identifier	Z_ARRVAL_P		38611	0					
ANR	38642	ArgumentList	arg		38611	1					
ANR	38643	Argument	arg		38611	0					
ANR	38644	Identifier	arg		38611	0					
ANR	38645	Argument	index		38611	1					
ANR	38646	Identifier	index		38611	0					
ANR	38647	Argument	& tmp		38611	2					
ANR	38648	UnaryOperationExpression	& tmp		38611	0					
ANR	38649	UnaryOperator	&		38611	0					
ANR	38650	Identifier	tmp		38611	1					
ANR	38651	Identifier	SUCCESS		38611	1					
ANR	38652	Identifier	FAILURE		38611	2					
ANR	38653	ReturnType	ZEND_API int		38611	1					
ANR	38654	Identifier	add_index_stringl		38611	2					
ANR	38655	ParameterList	"zval * arg , zend_ulong index , const char * str , size_t length"		38611	3					
ANR	38656	Parameter	zval * arg	1470:31:38743:38751	38611	0	True				
ANR	38657	ParameterType	zval *		38611	0					
ANR	38658	Identifier	arg		38611	1					
ANR	38659	Parameter	zend_ulong index	1470:42:38754:38769	38611	1	True				
ANR	38660	ParameterType	zend_ulong		38611	0					
ANR	38661	Identifier	index		38611	1					
ANR	38662	Parameter	const char * str	1470:60:38772:38786	38611	2	True				
ANR	38663	ParameterType	const char *		38611	0					
ANR	38664	Identifier	str		38611	1					
ANR	38665	Parameter	size_t length	1470:77:38789:38801	38611	3	True				
ANR	38666	ParameterType	size_t		38611	0					
ANR	38667	Identifier	length		38611	1					
ANR	38668	CFGEntryNode	ENTRY		38611		True				
ANR	38669	CFGExitNode	EXIT		38611		True				
ANR	38670	Symbol	str		38611						
ANR	38671	Symbol	SUCCESS		38611						
ANR	38672	Symbol	tmp		38611						
ANR	38673	Symbol	zend_hash_index_update		38611						
ANR	38674	Symbol	arg		38611						
ANR	38675	Symbol	length		38611						
ANR	38676	Symbol	index		38611						
ANR	38677	Symbol	& tmp		38611						
ANR	38678	Symbol	Z_ARRVAL_P		38611						
ANR	38679	Symbol	FAILURE		38611						
ANR	38680	Function	add_index_zval	1479:0:38957:39122							
ANR	38681	FunctionDef	"add_index_zval (zval * arg , zend_ulong index , zval * value)"		38680	0					
ANR	38682	CompoundStatement		1480:0:39037:39122	38680	0					
ANR	38683	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , value ) ? SUCCESS : FAILURE ;"	1481:1:39040:39120	38680	0	True				
ANR	38684	ConditionalExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , value ) ? SUCCESS : FAILURE"		38680	0					
ANR	38685	Condition	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , value )"		38680	0					
ANR	38686	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , value )"		38680	0					
ANR	38687	Callee	zend_hash_index_update		38680	0					
ANR	38688	Identifier	zend_hash_index_update		38680	0					
ANR	38689	ArgumentList	Z_ARRVAL_P ( arg )		38680	1					
ANR	38690	Argument	Z_ARRVAL_P ( arg )		38680	0					
ANR	38691	CallExpression	Z_ARRVAL_P ( arg )		38680	0					
ANR	38692	Callee	Z_ARRVAL_P		38680	0					
ANR	38693	Identifier	Z_ARRVAL_P		38680	0					
ANR	38694	ArgumentList	arg		38680	1					
ANR	38695	Argument	arg		38680	0					
ANR	38696	Identifier	arg		38680	0					
ANR	38697	Argument	index		38680	1					
ANR	38698	Identifier	index		38680	0					
ANR	38699	Argument	value		38680	2					
ANR	38700	Identifier	value		38680	0					
ANR	38701	Identifier	SUCCESS		38680	1					
ANR	38702	Identifier	FAILURE		38680	2					
ANR	38703	ReturnType	ZEND_API int		38680	1					
ANR	38704	Identifier	add_index_zval		38680	2					
ANR	38705	ParameterList	"zval * arg , zend_ulong index , zval * value"		38680	3					
ANR	38706	Parameter	zval * arg	1479:28:38985:38993	38680	0	True				
ANR	38707	ParameterType	zval *		38680	0					
ANR	38708	Identifier	arg		38680	1					
ANR	38709	Parameter	zend_ulong index	1479:39:38996:39011	38680	1	True				
ANR	38710	ParameterType	zend_ulong		38680	0					
ANR	38711	Identifier	index		38680	1					
ANR	38712	Parameter	zval * value	1479:57:39014:39024	38680	2	True				
ANR	38713	ParameterType	zval *		38680	0					
ANR	38714	Identifier	value		38680	1					
ANR	38715	CFGEntryNode	ENTRY		38680		True				
ANR	38716	CFGExitNode	EXIT		38680		True				
ANR	38717	Symbol	SUCCESS		38680						
ANR	38718	Symbol	zend_hash_index_update		38680						
ANR	38719	Symbol	arg		38680						
ANR	38720	Symbol	index		38680						
ANR	38721	Symbol	Z_ARRVAL_P		38680						
ANR	38722	Symbol	value		38680						
ANR	38723	Symbol	FAILURE		38680						
ANR	38724	Function	add_next_index_long	1485:0:39135:39317							
ANR	38725	FunctionDef	"add_next_index_long (zval * arg , zend_long n)"		38724	0					
ANR	38726	CompoundStatement		1486:0:39202:39317	38724	0					
ANR	38727	IdentifierDeclStatement	zval tmp ;	1487:1:39205:39213	38724	0	True				
ANR	38728	IdentifierDecl	tmp		38724	0					
ANR	38729	IdentifierDeclType	zval		38724	0					
ANR	38730	Identifier	tmp		38724	1					
ANR	38731	ExpressionStatement	"ZVAL_LONG ( & tmp , n )"	1489:1:39217:39235	38724	1	True				
ANR	38732	CallExpression	"ZVAL_LONG ( & tmp , n )"		38724	0					
ANR	38733	Callee	ZVAL_LONG		38724	0					
ANR	38734	Identifier	ZVAL_LONG		38724	0					
ANR	38735	ArgumentList	& tmp		38724	1					
ANR	38736	Argument	& tmp		38724	0					
ANR	38737	UnaryOperationExpression	& tmp		38724	0					
ANR	38738	UnaryOperator	&		38724	0					
ANR	38739	Identifier	tmp		38724	1					
ANR	38740	Argument	n		38724	1					
ANR	38741	Identifier	n		38724	0					
ANR	38742	ReturnStatement	"return zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp ) ? SUCCESS : FAILURE ;"	1490:1:39238:39315	38724	2	True				
ANR	38743	ConditionalExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp ) ? SUCCESS : FAILURE"		38724	0					
ANR	38744	Condition	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp )"		38724	0					
ANR	38745	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp )"		38724	0					
ANR	38746	Callee	zend_hash_next_index_insert		38724	0					
ANR	38747	Identifier	zend_hash_next_index_insert		38724	0					
ANR	38748	ArgumentList	Z_ARRVAL_P ( arg )		38724	1					
ANR	38749	Argument	Z_ARRVAL_P ( arg )		38724	0					
ANR	38750	CallExpression	Z_ARRVAL_P ( arg )		38724	0					
ANR	38751	Callee	Z_ARRVAL_P		38724	0					
ANR	38752	Identifier	Z_ARRVAL_P		38724	0					
ANR	38753	ArgumentList	arg		38724	1					
ANR	38754	Argument	arg		38724	0					
ANR	38755	Identifier	arg		38724	0					
ANR	38756	Argument	& tmp		38724	1					
ANR	38757	UnaryOperationExpression	& tmp		38724	0					
ANR	38758	UnaryOperator	&		38724	0					
ANR	38759	Identifier	tmp		38724	1					
ANR	38760	Identifier	SUCCESS		38724	1					
ANR	38761	Identifier	FAILURE		38724	2					
ANR	38762	ReturnType	ZEND_API int		38724	1					
ANR	38763	Identifier	add_next_index_long		38724	2					
ANR	38764	ParameterList	"zval * arg , zend_long n"		38724	3					
ANR	38765	Parameter	zval * arg	1485:33:39168:39176	38724	0	True				
ANR	38766	ParameterType	zval *		38724	0					
ANR	38767	Identifier	arg		38724	1					
ANR	38768	Parameter	zend_long n	1485:44:39179:39189	38724	1	True				
ANR	38769	ParameterType	zend_long		38724	0					
ANR	38770	Identifier	n		38724	1					
ANR	38771	CFGEntryNode	ENTRY		38724		True				
ANR	38772	CFGExitNode	EXIT		38724		True				
ANR	38773	Symbol	zend_hash_next_index_insert		38724						
ANR	38774	Symbol	SUCCESS		38724						
ANR	38775	Symbol	tmp		38724						
ANR	38776	Symbol	arg		38724						
ANR	38777	Symbol	& tmp		38724						
ANR	38778	Symbol	Z_ARRVAL_P		38724						
ANR	38779	Symbol	FAILURE		38724						
ANR	38780	Symbol	n		38724						
ANR	38781	Function	add_next_index_null	1494:0:39330:39496							
ANR	38782	FunctionDef	add_next_index_null (zval * arg)		38781	0					
ANR	38783	CompoundStatement		1495:0:39384:39496	38781	0					
ANR	38784	IdentifierDeclStatement	zval tmp ;	1496:1:39387:39395	38781	0	True				
ANR	38785	IdentifierDecl	tmp		38781	0					
ANR	38786	IdentifierDeclType	zval		38781	0					
ANR	38787	Identifier	tmp		38781	1					
ANR	38788	ExpressionStatement	ZVAL_NULL ( & tmp )	1498:1:39399:39414	38781	1	True				
ANR	38789	CallExpression	ZVAL_NULL ( & tmp )		38781	0					
ANR	38790	Callee	ZVAL_NULL		38781	0					
ANR	38791	Identifier	ZVAL_NULL		38781	0					
ANR	38792	ArgumentList	& tmp		38781	1					
ANR	38793	Argument	& tmp		38781	0					
ANR	38794	UnaryOperationExpression	& tmp		38781	0					
ANR	38795	UnaryOperator	&		38781	0					
ANR	38796	Identifier	tmp		38781	1					
ANR	38797	ReturnStatement	"return zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp ) ? SUCCESS : FAILURE ;"	1499:1:39417:39494	38781	2	True				
ANR	38798	ConditionalExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp ) ? SUCCESS : FAILURE"		38781	0					
ANR	38799	Condition	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp )"		38781	0					
ANR	38800	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp )"		38781	0					
ANR	38801	Callee	zend_hash_next_index_insert		38781	0					
ANR	38802	Identifier	zend_hash_next_index_insert		38781	0					
ANR	38803	ArgumentList	Z_ARRVAL_P ( arg )		38781	1					
ANR	38804	Argument	Z_ARRVAL_P ( arg )		38781	0					
ANR	38805	CallExpression	Z_ARRVAL_P ( arg )		38781	0					
ANR	38806	Callee	Z_ARRVAL_P		38781	0					
ANR	38807	Identifier	Z_ARRVAL_P		38781	0					
ANR	38808	ArgumentList	arg		38781	1					
ANR	38809	Argument	arg		38781	0					
ANR	38810	Identifier	arg		38781	0					
ANR	38811	Argument	& tmp		38781	1					
ANR	38812	UnaryOperationExpression	& tmp		38781	0					
ANR	38813	UnaryOperator	&		38781	0					
ANR	38814	Identifier	tmp		38781	1					
ANR	38815	Identifier	SUCCESS		38781	1					
ANR	38816	Identifier	FAILURE		38781	2					
ANR	38817	ReturnType	ZEND_API int		38781	1					
ANR	38818	Identifier	add_next_index_null		38781	2					
ANR	38819	ParameterList	zval * arg		38781	3					
ANR	38820	Parameter	zval * arg	1494:33:39363:39371	38781	0	True				
ANR	38821	ParameterType	zval *		38781	0					
ANR	38822	Identifier	arg		38781	1					
ANR	38823	CFGEntryNode	ENTRY		38781		True				
ANR	38824	CFGExitNode	EXIT		38781		True				
ANR	38825	Symbol	zend_hash_next_index_insert		38781						
ANR	38826	Symbol	SUCCESS		38781						
ANR	38827	Symbol	tmp		38781						
ANR	38828	Symbol	arg		38781						
ANR	38829	Symbol	& tmp		38781						
ANR	38830	Symbol	Z_ARRVAL_P		38781						
ANR	38831	Symbol	FAILURE		38781						
ANR	38832	Function	add_next_index_bool	1503:0:39509:39685							
ANR	38833	FunctionDef	"add_next_index_bool (zval * arg , int b)"		38832	0					
ANR	38834	CompoundStatement		1504:0:39570:39685	38832	0					
ANR	38835	IdentifierDeclStatement	zval tmp ;	1505:1:39573:39581	38832	0	True				
ANR	38836	IdentifierDecl	tmp		38832	0					
ANR	38837	IdentifierDeclType	zval		38832	0					
ANR	38838	Identifier	tmp		38832	1					
ANR	38839	ExpressionStatement	"ZVAL_BOOL ( & tmp , b )"	1507:1:39585:39603	38832	1	True				
ANR	38840	CallExpression	"ZVAL_BOOL ( & tmp , b )"		38832	0					
ANR	38841	Callee	ZVAL_BOOL		38832	0					
ANR	38842	Identifier	ZVAL_BOOL		38832	0					
ANR	38843	ArgumentList	& tmp		38832	1					
ANR	38844	Argument	& tmp		38832	0					
ANR	38845	UnaryOperationExpression	& tmp		38832	0					
ANR	38846	UnaryOperator	&		38832	0					
ANR	38847	Identifier	tmp		38832	1					
ANR	38848	Argument	b		38832	1					
ANR	38849	Identifier	b		38832	0					
ANR	38850	ReturnStatement	"return zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp ) ? SUCCESS : FAILURE ;"	1508:1:39606:39683	38832	2	True				
ANR	38851	ConditionalExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp ) ? SUCCESS : FAILURE"		38832	0					
ANR	38852	Condition	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp )"		38832	0					
ANR	38853	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp )"		38832	0					
ANR	38854	Callee	zend_hash_next_index_insert		38832	0					
ANR	38855	Identifier	zend_hash_next_index_insert		38832	0					
ANR	38856	ArgumentList	Z_ARRVAL_P ( arg )		38832	1					
ANR	38857	Argument	Z_ARRVAL_P ( arg )		38832	0					
ANR	38858	CallExpression	Z_ARRVAL_P ( arg )		38832	0					
ANR	38859	Callee	Z_ARRVAL_P		38832	0					
ANR	38860	Identifier	Z_ARRVAL_P		38832	0					
ANR	38861	ArgumentList	arg		38832	1					
ANR	38862	Argument	arg		38832	0					
ANR	38863	Identifier	arg		38832	0					
ANR	38864	Argument	& tmp		38832	1					
ANR	38865	UnaryOperationExpression	& tmp		38832	0					
ANR	38866	UnaryOperator	&		38832	0					
ANR	38867	Identifier	tmp		38832	1					
ANR	38868	Identifier	SUCCESS		38832	1					
ANR	38869	Identifier	FAILURE		38832	2					
ANR	38870	ReturnType	ZEND_API int		38832	1					
ANR	38871	Identifier	add_next_index_bool		38832	2					
ANR	38872	ParameterList	"zval * arg , int b"		38832	3					
ANR	38873	Parameter	zval * arg	1503:33:39542:39550	38832	0	True				
ANR	38874	ParameterType	zval *		38832	0					
ANR	38875	Identifier	arg		38832	1					
ANR	38876	Parameter	int b	1503:44:39553:39557	38832	1	True				
ANR	38877	ParameterType	int		38832	0					
ANR	38878	Identifier	b		38832	1					
ANR	38879	CFGEntryNode	ENTRY		38832		True				
ANR	38880	CFGExitNode	EXIT		38832		True				
ANR	38881	Symbol	b		38832						
ANR	38882	Symbol	zend_hash_next_index_insert		38832						
ANR	38883	Symbol	SUCCESS		38832						
ANR	38884	Symbol	tmp		38832						
ANR	38885	Symbol	arg		38832						
ANR	38886	Symbol	& tmp		38832						
ANR	38887	Symbol	Z_ARRVAL_P		38832						
ANR	38888	Symbol	FAILURE		38832						
ANR	38889	Function	add_next_index_resource	1512:0:39698:39888							
ANR	38890	FunctionDef	"add_next_index_resource (zval * arg , zend_resource * r)"		38889	0					
ANR	38891	CompoundStatement		1513:0:39774:39888	38889	0					
ANR	38892	IdentifierDeclStatement	zval tmp ;	1514:1:39777:39785	38889	0	True				
ANR	38893	IdentifierDecl	tmp		38889	0					
ANR	38894	IdentifierDeclType	zval		38889	0					
ANR	38895	Identifier	tmp		38889	1					
ANR	38896	ExpressionStatement	"ZVAL_RES ( & tmp , r )"	1516:1:39789:39806	38889	1	True				
ANR	38897	CallExpression	"ZVAL_RES ( & tmp , r )"		38889	0					
ANR	38898	Callee	ZVAL_RES		38889	0					
ANR	38899	Identifier	ZVAL_RES		38889	0					
ANR	38900	ArgumentList	& tmp		38889	1					
ANR	38901	Argument	& tmp		38889	0					
ANR	38902	UnaryOperationExpression	& tmp		38889	0					
ANR	38903	UnaryOperator	&		38889	0					
ANR	38904	Identifier	tmp		38889	1					
ANR	38905	Argument	r		38889	1					
ANR	38906	Identifier	r		38889	0					
ANR	38907	ReturnStatement	"return zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp ) ? SUCCESS : FAILURE ;"	1517:1:39809:39886	38889	2	True				
ANR	38908	ConditionalExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp ) ? SUCCESS : FAILURE"		38889	0					
ANR	38909	Condition	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp )"		38889	0					
ANR	38910	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp )"		38889	0					
ANR	38911	Callee	zend_hash_next_index_insert		38889	0					
ANR	38912	Identifier	zend_hash_next_index_insert		38889	0					
ANR	38913	ArgumentList	Z_ARRVAL_P ( arg )		38889	1					
ANR	38914	Argument	Z_ARRVAL_P ( arg )		38889	0					
ANR	38915	CallExpression	Z_ARRVAL_P ( arg )		38889	0					
ANR	38916	Callee	Z_ARRVAL_P		38889	0					
ANR	38917	Identifier	Z_ARRVAL_P		38889	0					
ANR	38918	ArgumentList	arg		38889	1					
ANR	38919	Argument	arg		38889	0					
ANR	38920	Identifier	arg		38889	0					
ANR	38921	Argument	& tmp		38889	1					
ANR	38922	UnaryOperationExpression	& tmp		38889	0					
ANR	38923	UnaryOperator	&		38889	0					
ANR	38924	Identifier	tmp		38889	1					
ANR	38925	Identifier	SUCCESS		38889	1					
ANR	38926	Identifier	FAILURE		38889	2					
ANR	38927	ReturnType	ZEND_API int		38889	1					
ANR	38928	Identifier	add_next_index_resource		38889	2					
ANR	38929	ParameterList	"zval * arg , zend_resource * r"		38889	3					
ANR	38930	Parameter	zval * arg	1512:37:39735:39743	38889	0	True				
ANR	38931	ParameterType	zval *		38889	0					
ANR	38932	Identifier	arg		38889	1					
ANR	38933	Parameter	zend_resource * r	1512:48:39746:39761	38889	1	True				
ANR	38934	ParameterType	zend_resource *		38889	0					
ANR	38935	Identifier	r		38889	1					
ANR	38936	CFGEntryNode	ENTRY		38889		True				
ANR	38937	CFGExitNode	EXIT		38889		True				
ANR	38938	Symbol	r		38889						
ANR	38939	Symbol	zend_hash_next_index_insert		38889						
ANR	38940	Symbol	SUCCESS		38889						
ANR	38941	Symbol	tmp		38889						
ANR	38942	Symbol	arg		38889						
ANR	38943	Symbol	& tmp		38889						
ANR	38944	Symbol	Z_ARRVAL_P		38889						
ANR	38945	Symbol	FAILURE		38889						
ANR	38946	Function	add_next_index_double	1521:0:39901:40084							
ANR	38947	FunctionDef	"add_next_index_double (zval * arg , double d)"		38946	0					
ANR	38948	CompoundStatement		1522:0:39967:40084	38946	0					
ANR	38949	IdentifierDeclStatement	zval tmp ;	1523:1:39970:39978	38946	0	True				
ANR	38950	IdentifierDecl	tmp		38946	0					
ANR	38951	IdentifierDeclType	zval		38946	0					
ANR	38952	Identifier	tmp		38946	1					
ANR	38953	ExpressionStatement	"ZVAL_DOUBLE ( & tmp , d )"	1525:1:39982:40002	38946	1	True				
ANR	38954	CallExpression	"ZVAL_DOUBLE ( & tmp , d )"		38946	0					
ANR	38955	Callee	ZVAL_DOUBLE		38946	0					
ANR	38956	Identifier	ZVAL_DOUBLE		38946	0					
ANR	38957	ArgumentList	& tmp		38946	1					
ANR	38958	Argument	& tmp		38946	0					
ANR	38959	UnaryOperationExpression	& tmp		38946	0					
ANR	38960	UnaryOperator	&		38946	0					
ANR	38961	Identifier	tmp		38946	1					
ANR	38962	Argument	d		38946	1					
ANR	38963	Identifier	d		38946	0					
ANR	38964	ReturnStatement	"return zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp ) ? SUCCESS : FAILURE ;"	1526:1:40005:40082	38946	2	True				
ANR	38965	ConditionalExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp ) ? SUCCESS : FAILURE"		38946	0					
ANR	38966	Condition	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp )"		38946	0					
ANR	38967	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp )"		38946	0					
ANR	38968	Callee	zend_hash_next_index_insert		38946	0					
ANR	38969	Identifier	zend_hash_next_index_insert		38946	0					
ANR	38970	ArgumentList	Z_ARRVAL_P ( arg )		38946	1					
ANR	38971	Argument	Z_ARRVAL_P ( arg )		38946	0					
ANR	38972	CallExpression	Z_ARRVAL_P ( arg )		38946	0					
ANR	38973	Callee	Z_ARRVAL_P		38946	0					
ANR	38974	Identifier	Z_ARRVAL_P		38946	0					
ANR	38975	ArgumentList	arg		38946	1					
ANR	38976	Argument	arg		38946	0					
ANR	38977	Identifier	arg		38946	0					
ANR	38978	Argument	& tmp		38946	1					
ANR	38979	UnaryOperationExpression	& tmp		38946	0					
ANR	38980	UnaryOperator	&		38946	0					
ANR	38981	Identifier	tmp		38946	1					
ANR	38982	Identifier	SUCCESS		38946	1					
ANR	38983	Identifier	FAILURE		38946	2					
ANR	38984	ReturnType	ZEND_API int		38946	1					
ANR	38985	Identifier	add_next_index_double		38946	2					
ANR	38986	ParameterList	"zval * arg , double d"		38946	3					
ANR	38987	Parameter	zval * arg	1521:35:39936:39944	38946	0	True				
ANR	38988	ParameterType	zval *		38946	0					
ANR	38989	Identifier	arg		38946	1					
ANR	38990	Parameter	double d	1521:46:39947:39954	38946	1	True				
ANR	38991	ParameterType	double		38946	0					
ANR	38992	Identifier	d		38946	1					
ANR	38993	CFGEntryNode	ENTRY		38946		True				
ANR	38994	CFGExitNode	EXIT		38946		True				
ANR	38995	Symbol	zend_hash_next_index_insert		38946						
ANR	38996	Symbol	SUCCESS		38946						
ANR	38997	Symbol	d		38946						
ANR	38998	Symbol	tmp		38946						
ANR	38999	Symbol	arg		38946						
ANR	39000	Symbol	& tmp		38946						
ANR	39001	Symbol	Z_ARRVAL_P		38946						
ANR	39002	Symbol	FAILURE		38946						
ANR	39003	Function	add_next_index_str	1530:0:40097:40284							
ANR	39004	FunctionDef	"add_next_index_str (zval * arg , zend_string * str)"		39003	0					
ANR	39005	CompoundStatement		1531:0:40168:40284	39003	0					
ANR	39006	IdentifierDeclStatement	zval tmp ;	1532:1:40171:40179	39003	0	True				
ANR	39007	IdentifierDecl	tmp		39003	0					
ANR	39008	IdentifierDeclType	zval		39003	0					
ANR	39009	Identifier	tmp		39003	1					
ANR	39010	ExpressionStatement	"ZVAL_STR ( & tmp , str )"	1534:1:40183:40202	39003	1	True				
ANR	39011	CallExpression	"ZVAL_STR ( & tmp , str )"		39003	0					
ANR	39012	Callee	ZVAL_STR		39003	0					
ANR	39013	Identifier	ZVAL_STR		39003	0					
ANR	39014	ArgumentList	& tmp		39003	1					
ANR	39015	Argument	& tmp		39003	0					
ANR	39016	UnaryOperationExpression	& tmp		39003	0					
ANR	39017	UnaryOperator	&		39003	0					
ANR	39018	Identifier	tmp		39003	1					
ANR	39019	Argument	str		39003	1					
ANR	39020	Identifier	str		39003	0					
ANR	39021	ReturnStatement	"return zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp ) ? SUCCESS : FAILURE ;"	1535:1:40205:40282	39003	2	True				
ANR	39022	ConditionalExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp ) ? SUCCESS : FAILURE"		39003	0					
ANR	39023	Condition	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp )"		39003	0					
ANR	39024	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp )"		39003	0					
ANR	39025	Callee	zend_hash_next_index_insert		39003	0					
ANR	39026	Identifier	zend_hash_next_index_insert		39003	0					
ANR	39027	ArgumentList	Z_ARRVAL_P ( arg )		39003	1					
ANR	39028	Argument	Z_ARRVAL_P ( arg )		39003	0					
ANR	39029	CallExpression	Z_ARRVAL_P ( arg )		39003	0					
ANR	39030	Callee	Z_ARRVAL_P		39003	0					
ANR	39031	Identifier	Z_ARRVAL_P		39003	0					
ANR	39032	ArgumentList	arg		39003	1					
ANR	39033	Argument	arg		39003	0					
ANR	39034	Identifier	arg		39003	0					
ANR	39035	Argument	& tmp		39003	1					
ANR	39036	UnaryOperationExpression	& tmp		39003	0					
ANR	39037	UnaryOperator	&		39003	0					
ANR	39038	Identifier	tmp		39003	1					
ANR	39039	Identifier	SUCCESS		39003	1					
ANR	39040	Identifier	FAILURE		39003	2					
ANR	39041	ReturnType	ZEND_API int		39003	1					
ANR	39042	Identifier	add_next_index_str		39003	2					
ANR	39043	ParameterList	"zval * arg , zend_string * str"		39003	3					
ANR	39044	Parameter	zval * arg	1530:32:40129:40137	39003	0	True				
ANR	39045	ParameterType	zval *		39003	0					
ANR	39046	Identifier	arg		39003	1					
ANR	39047	Parameter	zend_string * str	1530:43:40140:40155	39003	1	True				
ANR	39048	ParameterType	zend_string *		39003	0					
ANR	39049	Identifier	str		39003	1					
ANR	39050	CFGEntryNode	ENTRY		39003		True				
ANR	39051	CFGExitNode	EXIT		39003		True				
ANR	39052	Symbol	str		39003						
ANR	39053	Symbol	zend_hash_next_index_insert		39003						
ANR	39054	Symbol	SUCCESS		39003						
ANR	39055	Symbol	tmp		39003						
ANR	39056	Symbol	arg		39003						
ANR	39057	Symbol	& tmp		39003						
ANR	39058	Symbol	Z_ARRVAL_P		39003						
ANR	39059	Symbol	FAILURE		39003						
ANR	39060	Function	add_next_index_string	1539:0:40297:40489							
ANR	39061	FunctionDef	"add_next_index_string (zval * arg , const char * str)"		39060	0					
ANR	39062	CompoundStatement		1540:0:40370:40489	39060	0					
ANR	39063	IdentifierDeclStatement	zval tmp ;	1541:1:40373:40381	39060	0	True				
ANR	39064	IdentifierDecl	tmp		39060	0					
ANR	39065	IdentifierDeclType	zval		39060	0					
ANR	39066	Identifier	tmp		39060	1					
ANR	39067	ExpressionStatement	"ZVAL_STRING ( & tmp , str )"	1543:1:40385:40407	39060	1	True				
ANR	39068	CallExpression	"ZVAL_STRING ( & tmp , str )"		39060	0					
ANR	39069	Callee	ZVAL_STRING		39060	0					
ANR	39070	Identifier	ZVAL_STRING		39060	0					
ANR	39071	ArgumentList	& tmp		39060	1					
ANR	39072	Argument	& tmp		39060	0					
ANR	39073	UnaryOperationExpression	& tmp		39060	0					
ANR	39074	UnaryOperator	&		39060	0					
ANR	39075	Identifier	tmp		39060	1					
ANR	39076	Argument	str		39060	1					
ANR	39077	Identifier	str		39060	0					
ANR	39078	ReturnStatement	"return zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp ) ? SUCCESS : FAILURE ;"	1544:1:40410:40487	39060	2	True				
ANR	39079	ConditionalExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp ) ? SUCCESS : FAILURE"		39060	0					
ANR	39080	Condition	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp )"		39060	0					
ANR	39081	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp )"		39060	0					
ANR	39082	Callee	zend_hash_next_index_insert		39060	0					
ANR	39083	Identifier	zend_hash_next_index_insert		39060	0					
ANR	39084	ArgumentList	Z_ARRVAL_P ( arg )		39060	1					
ANR	39085	Argument	Z_ARRVAL_P ( arg )		39060	0					
ANR	39086	CallExpression	Z_ARRVAL_P ( arg )		39060	0					
ANR	39087	Callee	Z_ARRVAL_P		39060	0					
ANR	39088	Identifier	Z_ARRVAL_P		39060	0					
ANR	39089	ArgumentList	arg		39060	1					
ANR	39090	Argument	arg		39060	0					
ANR	39091	Identifier	arg		39060	0					
ANR	39092	Argument	& tmp		39060	1					
ANR	39093	UnaryOperationExpression	& tmp		39060	0					
ANR	39094	UnaryOperator	&		39060	0					
ANR	39095	Identifier	tmp		39060	1					
ANR	39096	Identifier	SUCCESS		39060	1					
ANR	39097	Identifier	FAILURE		39060	2					
ANR	39098	ReturnType	ZEND_API int		39060	1					
ANR	39099	Identifier	add_next_index_string		39060	2					
ANR	39100	ParameterList	"zval * arg , const char * str"		39060	3					
ANR	39101	Parameter	zval * arg	1539:35:40332:40340	39060	0	True				
ANR	39102	ParameterType	zval *		39060	0					
ANR	39103	Identifier	arg		39060	1					
ANR	39104	Parameter	const char * str	1539:46:40343:40357	39060	1	True				
ANR	39105	ParameterType	const char *		39060	0					
ANR	39106	Identifier	str		39060	1					
ANR	39107	CFGEntryNode	ENTRY		39060		True				
ANR	39108	CFGExitNode	EXIT		39060		True				
ANR	39109	Symbol	str		39060						
ANR	39110	Symbol	zend_hash_next_index_insert		39060						
ANR	39111	Symbol	SUCCESS		39060						
ANR	39112	Symbol	tmp		39060						
ANR	39113	Symbol	arg		39060						
ANR	39114	Symbol	& tmp		39060						
ANR	39115	Symbol	Z_ARRVAL_P		39060						
ANR	39116	Symbol	FAILURE		39060						
ANR	39117	Function	add_next_index_stringl	1548:0:40502:40719							
ANR	39118	FunctionDef	"add_next_index_stringl (zval * arg , const char * str , size_t length)"		39117	0					
ANR	39119	CompoundStatement		1549:0:40591:40719	39117	0					
ANR	39120	IdentifierDeclStatement	zval tmp ;	1550:1:40594:40602	39117	0	True				
ANR	39121	IdentifierDecl	tmp		39117	0					
ANR	39122	IdentifierDeclType	zval		39117	0					
ANR	39123	Identifier	tmp		39117	1					
ANR	39124	ExpressionStatement	"ZVAL_STRINGL ( & tmp , str , length )"	1552:1:40606:40637	39117	1	True				
ANR	39125	CallExpression	"ZVAL_STRINGL ( & tmp , str , length )"		39117	0					
ANR	39126	Callee	ZVAL_STRINGL		39117	0					
ANR	39127	Identifier	ZVAL_STRINGL		39117	0					
ANR	39128	ArgumentList	& tmp		39117	1					
ANR	39129	Argument	& tmp		39117	0					
ANR	39130	UnaryOperationExpression	& tmp		39117	0					
ANR	39131	UnaryOperator	&		39117	0					
ANR	39132	Identifier	tmp		39117	1					
ANR	39133	Argument	str		39117	1					
ANR	39134	Identifier	str		39117	0					
ANR	39135	Argument	length		39117	2					
ANR	39136	Identifier	length		39117	0					
ANR	39137	ReturnStatement	"return zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp ) ? SUCCESS : FAILURE ;"	1553:1:40640:40717	39117	2	True				
ANR	39138	ConditionalExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp ) ? SUCCESS : FAILURE"		39117	0					
ANR	39139	Condition	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp )"		39117	0					
ANR	39140	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , & tmp )"		39117	0					
ANR	39141	Callee	zend_hash_next_index_insert		39117	0					
ANR	39142	Identifier	zend_hash_next_index_insert		39117	0					
ANR	39143	ArgumentList	Z_ARRVAL_P ( arg )		39117	1					
ANR	39144	Argument	Z_ARRVAL_P ( arg )		39117	0					
ANR	39145	CallExpression	Z_ARRVAL_P ( arg )		39117	0					
ANR	39146	Callee	Z_ARRVAL_P		39117	0					
ANR	39147	Identifier	Z_ARRVAL_P		39117	0					
ANR	39148	ArgumentList	arg		39117	1					
ANR	39149	Argument	arg		39117	0					
ANR	39150	Identifier	arg		39117	0					
ANR	39151	Argument	& tmp		39117	1					
ANR	39152	UnaryOperationExpression	& tmp		39117	0					
ANR	39153	UnaryOperator	&		39117	0					
ANR	39154	Identifier	tmp		39117	1					
ANR	39155	Identifier	SUCCESS		39117	1					
ANR	39156	Identifier	FAILURE		39117	2					
ANR	39157	ReturnType	ZEND_API int		39117	1					
ANR	39158	Identifier	add_next_index_stringl		39117	2					
ANR	39159	ParameterList	"zval * arg , const char * str , size_t length"		39117	3					
ANR	39160	Parameter	zval * arg	1548:36:40538:40546	39117	0	True				
ANR	39161	ParameterType	zval *		39117	0					
ANR	39162	Identifier	arg		39117	1					
ANR	39163	Parameter	const char * str	1548:47:40549:40563	39117	1	True				
ANR	39164	ParameterType	const char *		39117	0					
ANR	39165	Identifier	str		39117	1					
ANR	39166	Parameter	size_t length	1548:64:40566:40578	39117	2	True				
ANR	39167	ParameterType	size_t		39117	0					
ANR	39168	Identifier	length		39117	1					
ANR	39169	CFGEntryNode	ENTRY		39117		True				
ANR	39170	CFGExitNode	EXIT		39117		True				
ANR	39171	Symbol	str		39117						
ANR	39172	Symbol	zend_hash_next_index_insert		39117						
ANR	39173	Symbol	SUCCESS		39117						
ANR	39174	Symbol	tmp		39117						
ANR	39175	Symbol	arg		39117						
ANR	39176	Symbol	length		39117						
ANR	39177	Symbol	& tmp		39117						
ANR	39178	Symbol	Z_ARRVAL_P		39117						
ANR	39179	Symbol	FAILURE		39117						
ANR	39180	Function	add_next_index_zval	1557:0:40732:40882							
ANR	39181	FunctionDef	"add_next_index_zval (zval * arg , zval * value)"		39180	0					
ANR	39182	CompoundStatement		1558:0:40799:40882	39180	0					
ANR	39183	ReturnStatement	"return zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , value ) ? SUCCESS : FAILURE ;"	1559:1:40802:40880	39180	0	True				
ANR	39184	ConditionalExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , value ) ? SUCCESS : FAILURE"		39180	0					
ANR	39185	Condition	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , value )"		39180	0					
ANR	39186	CallExpression	"zend_hash_next_index_insert ( Z_ARRVAL_P ( arg ) , value )"		39180	0					
ANR	39187	Callee	zend_hash_next_index_insert		39180	0					
ANR	39188	Identifier	zend_hash_next_index_insert		39180	0					
ANR	39189	ArgumentList	Z_ARRVAL_P ( arg )		39180	1					
ANR	39190	Argument	Z_ARRVAL_P ( arg )		39180	0					
ANR	39191	CallExpression	Z_ARRVAL_P ( arg )		39180	0					
ANR	39192	Callee	Z_ARRVAL_P		39180	0					
ANR	39193	Identifier	Z_ARRVAL_P		39180	0					
ANR	39194	ArgumentList	arg		39180	1					
ANR	39195	Argument	arg		39180	0					
ANR	39196	Identifier	arg		39180	0					
ANR	39197	Argument	value		39180	1					
ANR	39198	Identifier	value		39180	0					
ANR	39199	Identifier	SUCCESS		39180	1					
ANR	39200	Identifier	FAILURE		39180	2					
ANR	39201	ReturnType	ZEND_API int		39180	1					
ANR	39202	Identifier	add_next_index_zval		39180	2					
ANR	39203	ParameterList	"zval * arg , zval * value"		39180	3					
ANR	39204	Parameter	zval * arg	1557:33:40765:40773	39180	0	True				
ANR	39205	ParameterType	zval *		39180	0					
ANR	39206	Identifier	arg		39180	1					
ANR	39207	Parameter	zval * value	1557:44:40776:40786	39180	1	True				
ANR	39208	ParameterType	zval *		39180	0					
ANR	39209	Identifier	value		39180	1					
ANR	39210	CFGEntryNode	ENTRY		39180		True				
ANR	39211	CFGExitNode	EXIT		39180		True				
ANR	39212	Symbol	zend_hash_next_index_insert		39180						
ANR	39213	Symbol	SUCCESS		39180						
ANR	39214	Symbol	arg		39180						
ANR	39215	Symbol	Z_ARRVAL_P		39180						
ANR	39216	Symbol	value		39180						
ANR	39217	Symbol	FAILURE		39180						
ANR	39218	Function	add_get_assoc_string_ex	1563:0:40895:41131							
ANR	39219	FunctionDef	"add_get_assoc_string_ex (zval * arg , const char * key , uint key_len , const char * str)"		39218	0					
ANR	39220	CompoundStatement		1564:0:41003:41131	39218	0					
ANR	39221	IdentifierDeclStatement	"zval tmp , * ret ;"	1565:1:41006:41020	39218	0	True				
ANR	39222	IdentifierDecl	tmp		39218	0					
ANR	39223	IdentifierDeclType	zval		39218	0					
ANR	39224	Identifier	tmp		39218	1					
ANR	39225	IdentifierDecl	* ret		39218	1					
ANR	39226	IdentifierDeclType	zval *		39218	0					
ANR	39227	Identifier	ret		39218	1					
ANR	39228	ExpressionStatement	"ZVAL_STRING ( & tmp , str )"	1567:1:41024:41046	39218	1	True				
ANR	39229	CallExpression	"ZVAL_STRING ( & tmp , str )"		39218	0					
ANR	39230	Callee	ZVAL_STRING		39218	0					
ANR	39231	Identifier	ZVAL_STRING		39218	0					
ANR	39232	ArgumentList	& tmp		39218	1					
ANR	39233	Argument	& tmp		39218	0					
ANR	39234	UnaryOperationExpression	& tmp		39218	0					
ANR	39235	UnaryOperator	&		39218	0					
ANR	39236	Identifier	tmp		39218	1					
ANR	39237	Argument	str		39218	1					
ANR	39238	Identifier	str		39218	0					
ANR	39239	ExpressionStatement	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"	1568:1:41049:41116	39218	2	True				
ANR	39240	AssignmentExpression	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		39218	0		=			
ANR	39241	Identifier	ret		39218	0					
ANR	39242	CallExpression	"zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		39218	1					
ANR	39243	Callee	zend_symtable_str_update		39218	0					
ANR	39244	Identifier	zend_symtable_str_update		39218	0					
ANR	39245	ArgumentList	Z_ARRVAL_P ( arg )		39218	1					
ANR	39246	Argument	Z_ARRVAL_P ( arg )		39218	0					
ANR	39247	CallExpression	Z_ARRVAL_P ( arg )		39218	0					
ANR	39248	Callee	Z_ARRVAL_P		39218	0					
ANR	39249	Identifier	Z_ARRVAL_P		39218	0					
ANR	39250	ArgumentList	arg		39218	1					
ANR	39251	Argument	arg		39218	0					
ANR	39252	Identifier	arg		39218	0					
ANR	39253	Argument	key		39218	1					
ANR	39254	Identifier	key		39218	0					
ANR	39255	Argument	key_len		39218	2					
ANR	39256	Identifier	key_len		39218	0					
ANR	39257	Argument	& tmp		39218	3					
ANR	39258	UnaryOperationExpression	& tmp		39218	0					
ANR	39259	UnaryOperator	&		39218	0					
ANR	39260	Identifier	tmp		39218	1					
ANR	39261	ReturnStatement	return ret ;	1569:1:41119:41129	39218	3	True				
ANR	39262	Identifier	ret		39218	0					
ANR	39263	ReturnType	ZEND_API zval *		39218	1					
ANR	39264	Identifier	add_get_assoc_string_ex		39218	2					
ANR	39265	ParameterList	"zval * arg , const char * key , uint key_len , const char * str"		39218	3					
ANR	39266	Parameter	zval * arg	1563:39:40934:40942	39218	0	True				
ANR	39267	ParameterType	zval *		39218	0					
ANR	39268	Identifier	arg		39218	1					
ANR	39269	Parameter	const char * key	1563:50:40945:40959	39218	1	True				
ANR	39270	ParameterType	const char *		39218	0					
ANR	39271	Identifier	key		39218	1					
ANR	39272	Parameter	uint key_len	1563:67:40962:40973	39218	2	True				
ANR	39273	ParameterType	uint		39218	0					
ANR	39274	Identifier	key_len		39218	1					
ANR	39275	Parameter	const char * str	1563:81:40976:40990	39218	3	True				
ANR	39276	ParameterType	const char *		39218	0					
ANR	39277	Identifier	str		39218	1					
ANR	39278	CFGEntryNode	ENTRY		39218		True				
ANR	39279	CFGExitNode	EXIT		39218		True				
ANR	39280	Symbol	str		39218						
ANR	39281	Symbol	ret		39218						
ANR	39282	Symbol	tmp		39218						
ANR	39283	Symbol	arg		39218						
ANR	39284	Symbol	& tmp		39218						
ANR	39285	Symbol	zend_symtable_str_update		39218						
ANR	39286	Symbol	Z_ARRVAL_P		39218						
ANR	39287	Symbol	key		39218						
ANR	39288	Symbol	key_len		39218						
ANR	39289	Function	add_get_assoc_stringl_ex	1573:0:41144:41405							
ANR	39290	FunctionDef	"add_get_assoc_stringl_ex (zval * arg , const char * key , uint key_len , const char * str , size_t length)"		39289	0					
ANR	39291	CompoundStatement		1574:0:41268:41405	39289	0					
ANR	39292	IdentifierDeclStatement	"zval tmp , * ret ;"	1575:1:41271:41285	39289	0	True				
ANR	39293	IdentifierDecl	tmp		39289	0					
ANR	39294	IdentifierDeclType	zval		39289	0					
ANR	39295	Identifier	tmp		39289	1					
ANR	39296	IdentifierDecl	* ret		39289	1					
ANR	39297	IdentifierDeclType	zval *		39289	0					
ANR	39298	Identifier	ret		39289	1					
ANR	39299	ExpressionStatement	"ZVAL_STRINGL ( & tmp , str , length )"	1577:1:41289:41320	39289	1	True				
ANR	39300	CallExpression	"ZVAL_STRINGL ( & tmp , str , length )"		39289	0					
ANR	39301	Callee	ZVAL_STRINGL		39289	0					
ANR	39302	Identifier	ZVAL_STRINGL		39289	0					
ANR	39303	ArgumentList	& tmp		39289	1					
ANR	39304	Argument	& tmp		39289	0					
ANR	39305	UnaryOperationExpression	& tmp		39289	0					
ANR	39306	UnaryOperator	&		39289	0					
ANR	39307	Identifier	tmp		39289	1					
ANR	39308	Argument	str		39289	1					
ANR	39309	Identifier	str		39289	0					
ANR	39310	Argument	length		39289	2					
ANR	39311	Identifier	length		39289	0					
ANR	39312	ExpressionStatement	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"	1578:1:41323:41390	39289	2	True				
ANR	39313	AssignmentExpression	"ret = zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		39289	0		=			
ANR	39314	Identifier	ret		39289	0					
ANR	39315	CallExpression	"zend_symtable_str_update ( Z_ARRVAL_P ( arg ) , key , key_len , & tmp )"		39289	1					
ANR	39316	Callee	zend_symtable_str_update		39289	0					
ANR	39317	Identifier	zend_symtable_str_update		39289	0					
ANR	39318	ArgumentList	Z_ARRVAL_P ( arg )		39289	1					
ANR	39319	Argument	Z_ARRVAL_P ( arg )		39289	0					
ANR	39320	CallExpression	Z_ARRVAL_P ( arg )		39289	0					
ANR	39321	Callee	Z_ARRVAL_P		39289	0					
ANR	39322	Identifier	Z_ARRVAL_P		39289	0					
ANR	39323	ArgumentList	arg		39289	1					
ANR	39324	Argument	arg		39289	0					
ANR	39325	Identifier	arg		39289	0					
ANR	39326	Argument	key		39289	1					
ANR	39327	Identifier	key		39289	0					
ANR	39328	Argument	key_len		39289	2					
ANR	39329	Identifier	key_len		39289	0					
ANR	39330	Argument	& tmp		39289	3					
ANR	39331	UnaryOperationExpression	& tmp		39289	0					
ANR	39332	UnaryOperator	&		39289	0					
ANR	39333	Identifier	tmp		39289	1					
ANR	39334	ReturnStatement	return ret ;	1579:1:41393:41403	39289	3	True				
ANR	39335	Identifier	ret		39289	0					
ANR	39336	ReturnType	ZEND_API zval *		39289	1					
ANR	39337	Identifier	add_get_assoc_stringl_ex		39289	2					
ANR	39338	ParameterList	"zval * arg , const char * key , uint key_len , const char * str , size_t length"		39289	3					
ANR	39339	Parameter	zval * arg	1573:40:41184:41192	39289	0	True				
ANR	39340	ParameterType	zval *		39289	0					
ANR	39341	Identifier	arg		39289	1					
ANR	39342	Parameter	const char * key	1573:51:41195:41209	39289	1	True				
ANR	39343	ParameterType	const char *		39289	0					
ANR	39344	Identifier	key		39289	1					
ANR	39345	Parameter	uint key_len	1573:68:41212:41223	39289	2	True				
ANR	39346	ParameterType	uint		39289	0					
ANR	39347	Identifier	key_len		39289	1					
ANR	39348	Parameter	const char * str	1573:82:41226:41240	39289	3	True				
ANR	39349	ParameterType	const char *		39289	0					
ANR	39350	Identifier	str		39289	1					
ANR	39351	Parameter	size_t length	1573:99:41243:41255	39289	4	True				
ANR	39352	ParameterType	size_t		39289	0					
ANR	39353	Identifier	length		39289	1					
ANR	39354	CFGEntryNode	ENTRY		39289		True				
ANR	39355	CFGExitNode	EXIT		39289		True				
ANR	39356	Symbol	str		39289						
ANR	39357	Symbol	ret		39289						
ANR	39358	Symbol	tmp		39289						
ANR	39359	Symbol	arg		39289						
ANR	39360	Symbol	length		39289						
ANR	39361	Symbol	& tmp		39289						
ANR	39362	Symbol	zend_symtable_str_update		39289						
ANR	39363	Symbol	Z_ARRVAL_P		39289						
ANR	39364	Symbol	key		39289						
ANR	39365	Symbol	key_len		39289						
ANR	39366	Function	add_get_index_long	1583:0:41418:41601							
ANR	39367	FunctionDef	"add_get_index_long (zval * arg , zend_ulong index , zend_long l)"		39366	0					
ANR	39368	CompoundStatement		1584:0:41504:41601	39366	0					
ANR	39369	IdentifierDeclStatement	zval tmp ;	1585:1:41507:41515	39366	0	True				
ANR	39370	IdentifierDecl	tmp		39366	0					
ANR	39371	IdentifierDeclType	zval		39366	0					
ANR	39372	Identifier	tmp		39366	1					
ANR	39373	ExpressionStatement	"ZVAL_LONG ( & tmp , l )"	1587:1:41519:41537	39366	1	True				
ANR	39374	CallExpression	"ZVAL_LONG ( & tmp , l )"		39366	0					
ANR	39375	Callee	ZVAL_LONG		39366	0					
ANR	39376	Identifier	ZVAL_LONG		39366	0					
ANR	39377	ArgumentList	& tmp		39366	1					
ANR	39378	Argument	& tmp		39366	0					
ANR	39379	UnaryOperationExpression	& tmp		39366	0					
ANR	39380	UnaryOperator	&		39366	0					
ANR	39381	Identifier	tmp		39366	1					
ANR	39382	Argument	l		39366	1					
ANR	39383	Identifier	l		39366	0					
ANR	39384	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ;"	1588:1:41540:41599	39366	2	True				
ANR	39385	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		39366	0					
ANR	39386	Callee	zend_hash_index_update		39366	0					
ANR	39387	Identifier	zend_hash_index_update		39366	0					
ANR	39388	ArgumentList	Z_ARRVAL_P ( arg )		39366	1					
ANR	39389	Argument	Z_ARRVAL_P ( arg )		39366	0					
ANR	39390	CallExpression	Z_ARRVAL_P ( arg )		39366	0					
ANR	39391	Callee	Z_ARRVAL_P		39366	0					
ANR	39392	Identifier	Z_ARRVAL_P		39366	0					
ANR	39393	ArgumentList	arg		39366	1					
ANR	39394	Argument	arg		39366	0					
ANR	39395	Identifier	arg		39366	0					
ANR	39396	Argument	index		39366	1					
ANR	39397	Identifier	index		39366	0					
ANR	39398	Argument	& tmp		39366	2					
ANR	39399	UnaryOperationExpression	& tmp		39366	0					
ANR	39400	UnaryOperator	&		39366	0					
ANR	39401	Identifier	tmp		39366	1					
ANR	39402	ReturnType	ZEND_API zval *		39366	1					
ANR	39403	Identifier	add_get_index_long		39366	2					
ANR	39404	ParameterList	"zval * arg , zend_ulong index , zend_long l"		39366	3					
ANR	39405	Parameter	zval * arg	1583:34:41452:41460	39366	0	True				
ANR	39406	ParameterType	zval *		39366	0					
ANR	39407	Identifier	arg		39366	1					
ANR	39408	Parameter	zend_ulong index	1583:45:41463:41478	39366	1	True				
ANR	39409	ParameterType	zend_ulong		39366	0					
ANR	39410	Identifier	index		39366	1					
ANR	39411	Parameter	zend_long l	1583:63:41481:41491	39366	2	True				
ANR	39412	ParameterType	zend_long		39366	0					
ANR	39413	Identifier	l		39366	1					
ANR	39414	CFGEntryNode	ENTRY		39366		True				
ANR	39415	CFGExitNode	EXIT		39366		True				
ANR	39416	Symbol	tmp		39366						
ANR	39417	Symbol	zend_hash_index_update		39366						
ANR	39418	Symbol	arg		39366						
ANR	39419	Symbol	index		39366						
ANR	39420	Symbol	& tmp		39366						
ANR	39421	Symbol	l		39366						
ANR	39422	Symbol	Z_ARRVAL_P		39366						
ANR	39423	Function	add_get_index_double	1592:0:41614:41798							
ANR	39424	FunctionDef	"add_get_index_double (zval * arg , zend_ulong index , double d)"		39423	0					
ANR	39425	CompoundStatement		1593:0:41699:41798	39423	0					
ANR	39426	IdentifierDeclStatement	zval tmp ;	1594:1:41702:41710	39423	0	True				
ANR	39427	IdentifierDecl	tmp		39423	0					
ANR	39428	IdentifierDeclType	zval		39423	0					
ANR	39429	Identifier	tmp		39423	1					
ANR	39430	ExpressionStatement	"ZVAL_DOUBLE ( & tmp , d )"	1596:1:41714:41734	39423	1	True				
ANR	39431	CallExpression	"ZVAL_DOUBLE ( & tmp , d )"		39423	0					
ANR	39432	Callee	ZVAL_DOUBLE		39423	0					
ANR	39433	Identifier	ZVAL_DOUBLE		39423	0					
ANR	39434	ArgumentList	& tmp		39423	1					
ANR	39435	Argument	& tmp		39423	0					
ANR	39436	UnaryOperationExpression	& tmp		39423	0					
ANR	39437	UnaryOperator	&		39423	0					
ANR	39438	Identifier	tmp		39423	1					
ANR	39439	Argument	d		39423	1					
ANR	39440	Identifier	d		39423	0					
ANR	39441	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ;"	1597:1:41737:41796	39423	2	True				
ANR	39442	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		39423	0					
ANR	39443	Callee	zend_hash_index_update		39423	0					
ANR	39444	Identifier	zend_hash_index_update		39423	0					
ANR	39445	ArgumentList	Z_ARRVAL_P ( arg )		39423	1					
ANR	39446	Argument	Z_ARRVAL_P ( arg )		39423	0					
ANR	39447	CallExpression	Z_ARRVAL_P ( arg )		39423	0					
ANR	39448	Callee	Z_ARRVAL_P		39423	0					
ANR	39449	Identifier	Z_ARRVAL_P		39423	0					
ANR	39450	ArgumentList	arg		39423	1					
ANR	39451	Argument	arg		39423	0					
ANR	39452	Identifier	arg		39423	0					
ANR	39453	Argument	index		39423	1					
ANR	39454	Identifier	index		39423	0					
ANR	39455	Argument	& tmp		39423	2					
ANR	39456	UnaryOperationExpression	& tmp		39423	0					
ANR	39457	UnaryOperator	&		39423	0					
ANR	39458	Identifier	tmp		39423	1					
ANR	39459	ReturnType	ZEND_API zval *		39423	1					
ANR	39460	Identifier	add_get_index_double		39423	2					
ANR	39461	ParameterList	"zval * arg , zend_ulong index , double d"		39423	3					
ANR	39462	Parameter	zval * arg	1592:36:41650:41658	39423	0	True				
ANR	39463	ParameterType	zval *		39423	0					
ANR	39464	Identifier	arg		39423	1					
ANR	39465	Parameter	zend_ulong index	1592:47:41661:41676	39423	1	True				
ANR	39466	ParameterType	zend_ulong		39423	0					
ANR	39467	Identifier	index		39423	1					
ANR	39468	Parameter	double d	1592:65:41679:41686	39423	2	True				
ANR	39469	ParameterType	double		39423	0					
ANR	39470	Identifier	d		39423	1					
ANR	39471	CFGEntryNode	ENTRY		39423		True				
ANR	39472	CFGExitNode	EXIT		39423		True				
ANR	39473	Symbol	d		39423						
ANR	39474	Symbol	tmp		39423						
ANR	39475	Symbol	zend_hash_index_update		39423						
ANR	39476	Symbol	arg		39423						
ANR	39477	Symbol	index		39423						
ANR	39478	Symbol	& tmp		39423						
ANR	39479	Symbol	Z_ARRVAL_P		39423						
ANR	39480	Function	add_get_index_str	1601:0:41811:41999							
ANR	39481	FunctionDef	"add_get_index_str (zval * arg , zend_ulong index , zend_string * str)"		39480	0					
ANR	39482	CompoundStatement		1602:0:41901:41999	39480	0					
ANR	39483	IdentifierDeclStatement	zval tmp ;	1603:1:41904:41912	39480	0	True				
ANR	39484	IdentifierDecl	tmp		39480	0					
ANR	39485	IdentifierDeclType	zval		39480	0					
ANR	39486	Identifier	tmp		39480	1					
ANR	39487	ExpressionStatement	"ZVAL_STR ( & tmp , str )"	1605:1:41916:41935	39480	1	True				
ANR	39488	CallExpression	"ZVAL_STR ( & tmp , str )"		39480	0					
ANR	39489	Callee	ZVAL_STR		39480	0					
ANR	39490	Identifier	ZVAL_STR		39480	0					
ANR	39491	ArgumentList	& tmp		39480	1					
ANR	39492	Argument	& tmp		39480	0					
ANR	39493	UnaryOperationExpression	& tmp		39480	0					
ANR	39494	UnaryOperator	&		39480	0					
ANR	39495	Identifier	tmp		39480	1					
ANR	39496	Argument	str		39480	1					
ANR	39497	Identifier	str		39480	0					
ANR	39498	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ;"	1606:1:41938:41997	39480	2	True				
ANR	39499	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		39480	0					
ANR	39500	Callee	zend_hash_index_update		39480	0					
ANR	39501	Identifier	zend_hash_index_update		39480	0					
ANR	39502	ArgumentList	Z_ARRVAL_P ( arg )		39480	1					
ANR	39503	Argument	Z_ARRVAL_P ( arg )		39480	0					
ANR	39504	CallExpression	Z_ARRVAL_P ( arg )		39480	0					
ANR	39505	Callee	Z_ARRVAL_P		39480	0					
ANR	39506	Identifier	Z_ARRVAL_P		39480	0					
ANR	39507	ArgumentList	arg		39480	1					
ANR	39508	Argument	arg		39480	0					
ANR	39509	Identifier	arg		39480	0					
ANR	39510	Argument	index		39480	1					
ANR	39511	Identifier	index		39480	0					
ANR	39512	Argument	& tmp		39480	2					
ANR	39513	UnaryOperationExpression	& tmp		39480	0					
ANR	39514	UnaryOperator	&		39480	0					
ANR	39515	Identifier	tmp		39480	1					
ANR	39516	ReturnType	ZEND_API zval *		39480	1					
ANR	39517	Identifier	add_get_index_str		39480	2					
ANR	39518	ParameterList	"zval * arg , zend_ulong index , zend_string * str"		39480	3					
ANR	39519	Parameter	zval * arg	1601:33:41844:41852	39480	0	True				
ANR	39520	ParameterType	zval *		39480	0					
ANR	39521	Identifier	arg		39480	1					
ANR	39522	Parameter	zend_ulong index	1601:44:41855:41870	39480	1	True				
ANR	39523	ParameterType	zend_ulong		39480	0					
ANR	39524	Identifier	index		39480	1					
ANR	39525	Parameter	zend_string * str	1601:62:41873:41888	39480	2	True				
ANR	39526	ParameterType	zend_string *		39480	0					
ANR	39527	Identifier	str		39480	1					
ANR	39528	CFGEntryNode	ENTRY		39480		True				
ANR	39529	CFGExitNode	EXIT		39480		True				
ANR	39530	Symbol	str		39480						
ANR	39531	Symbol	tmp		39480						
ANR	39532	Symbol	zend_hash_index_update		39480						
ANR	39533	Symbol	arg		39480						
ANR	39534	Symbol	index		39480						
ANR	39535	Symbol	& tmp		39480						
ANR	39536	Symbol	Z_ARRVAL_P		39480						
ANR	39537	Function	add_get_index_string	1610:0:42012:42205							
ANR	39538	FunctionDef	"add_get_index_string (zval * arg , zend_ulong index , const char * str)"		39537	0					
ANR	39539	CompoundStatement		1611:0:42104:42205	39537	0					
ANR	39540	IdentifierDeclStatement	zval tmp ;	1612:1:42107:42115	39537	0	True				
ANR	39541	IdentifierDecl	tmp		39537	0					
ANR	39542	IdentifierDeclType	zval		39537	0					
ANR	39543	Identifier	tmp		39537	1					
ANR	39544	ExpressionStatement	"ZVAL_STRING ( & tmp , str )"	1614:1:42119:42141	39537	1	True				
ANR	39545	CallExpression	"ZVAL_STRING ( & tmp , str )"		39537	0					
ANR	39546	Callee	ZVAL_STRING		39537	0					
ANR	39547	Identifier	ZVAL_STRING		39537	0					
ANR	39548	ArgumentList	& tmp		39537	1					
ANR	39549	Argument	& tmp		39537	0					
ANR	39550	UnaryOperationExpression	& tmp		39537	0					
ANR	39551	UnaryOperator	&		39537	0					
ANR	39552	Identifier	tmp		39537	1					
ANR	39553	Argument	str		39537	1					
ANR	39554	Identifier	str		39537	0					
ANR	39555	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ;"	1615:1:42144:42203	39537	2	True				
ANR	39556	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		39537	0					
ANR	39557	Callee	zend_hash_index_update		39537	0					
ANR	39558	Identifier	zend_hash_index_update		39537	0					
ANR	39559	ArgumentList	Z_ARRVAL_P ( arg )		39537	1					
ANR	39560	Argument	Z_ARRVAL_P ( arg )		39537	0					
ANR	39561	CallExpression	Z_ARRVAL_P ( arg )		39537	0					
ANR	39562	Callee	Z_ARRVAL_P		39537	0					
ANR	39563	Identifier	Z_ARRVAL_P		39537	0					
ANR	39564	ArgumentList	arg		39537	1					
ANR	39565	Argument	arg		39537	0					
ANR	39566	Identifier	arg		39537	0					
ANR	39567	Argument	index		39537	1					
ANR	39568	Identifier	index		39537	0					
ANR	39569	Argument	& tmp		39537	2					
ANR	39570	UnaryOperationExpression	& tmp		39537	0					
ANR	39571	UnaryOperator	&		39537	0					
ANR	39572	Identifier	tmp		39537	1					
ANR	39573	ReturnType	ZEND_API zval *		39537	1					
ANR	39574	Identifier	add_get_index_string		39537	2					
ANR	39575	ParameterList	"zval * arg , zend_ulong index , const char * str"		39537	3					
ANR	39576	Parameter	zval * arg	1610:36:42048:42056	39537	0	True				
ANR	39577	ParameterType	zval *		39537	0					
ANR	39578	Identifier	arg		39537	1					
ANR	39579	Parameter	zend_ulong index	1610:47:42059:42074	39537	1	True				
ANR	39580	ParameterType	zend_ulong		39537	0					
ANR	39581	Identifier	index		39537	1					
ANR	39582	Parameter	const char * str	1610:65:42077:42091	39537	2	True				
ANR	39583	ParameterType	const char *		39537	0					
ANR	39584	Identifier	str		39537	1					
ANR	39585	CFGEntryNode	ENTRY		39537		True				
ANR	39586	CFGExitNode	EXIT		39537		True				
ANR	39587	Symbol	str		39537						
ANR	39588	Symbol	tmp		39537						
ANR	39589	Symbol	zend_hash_index_update		39537						
ANR	39590	Symbol	arg		39537						
ANR	39591	Symbol	index		39537						
ANR	39592	Symbol	& tmp		39537						
ANR	39593	Symbol	Z_ARRVAL_P		39537						
ANR	39594	Function	add_get_index_stringl	1619:0:42218:42436							
ANR	39595	FunctionDef	"add_get_index_stringl (zval * arg , zend_ulong index , const char * str , size_t length)"		39594	0					
ANR	39596	CompoundStatement		1620:0:42326:42436	39594	0					
ANR	39597	IdentifierDeclStatement	zval tmp ;	1621:1:42329:42337	39594	0	True				
ANR	39598	IdentifierDecl	tmp		39594	0					
ANR	39599	IdentifierDeclType	zval		39594	0					
ANR	39600	Identifier	tmp		39594	1					
ANR	39601	ExpressionStatement	"ZVAL_STRINGL ( & tmp , str , length )"	1623:1:42341:42372	39594	1	True				
ANR	39602	CallExpression	"ZVAL_STRINGL ( & tmp , str , length )"		39594	0					
ANR	39603	Callee	ZVAL_STRINGL		39594	0					
ANR	39604	Identifier	ZVAL_STRINGL		39594	0					
ANR	39605	ArgumentList	& tmp		39594	1					
ANR	39606	Argument	& tmp		39594	0					
ANR	39607	UnaryOperationExpression	& tmp		39594	0					
ANR	39608	UnaryOperator	&		39594	0					
ANR	39609	Identifier	tmp		39594	1					
ANR	39610	Argument	str		39594	1					
ANR	39611	Identifier	str		39594	0					
ANR	39612	Argument	length		39594	2					
ANR	39613	Identifier	length		39594	0					
ANR	39614	ReturnStatement	"return zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp ) ;"	1624:1:42375:42434	39594	2	True				
ANR	39615	CallExpression	"zend_hash_index_update ( Z_ARRVAL_P ( arg ) , index , & tmp )"		39594	0					
ANR	39616	Callee	zend_hash_index_update		39594	0					
ANR	39617	Identifier	zend_hash_index_update		39594	0					
ANR	39618	ArgumentList	Z_ARRVAL_P ( arg )		39594	1					
ANR	39619	Argument	Z_ARRVAL_P ( arg )		39594	0					
ANR	39620	CallExpression	Z_ARRVAL_P ( arg )		39594	0					
ANR	39621	Callee	Z_ARRVAL_P		39594	0					
ANR	39622	Identifier	Z_ARRVAL_P		39594	0					
ANR	39623	ArgumentList	arg		39594	1					
ANR	39624	Argument	arg		39594	0					
ANR	39625	Identifier	arg		39594	0					
ANR	39626	Argument	index		39594	1					
ANR	39627	Identifier	index		39594	0					
ANR	39628	Argument	& tmp		39594	2					
ANR	39629	UnaryOperationExpression	& tmp		39594	0					
ANR	39630	UnaryOperator	&		39594	0					
ANR	39631	Identifier	tmp		39594	1					
ANR	39632	ReturnType	ZEND_API zval *		39594	1					
ANR	39633	Identifier	add_get_index_stringl		39594	2					
ANR	39634	ParameterList	"zval * arg , zend_ulong index , const char * str , size_t length"		39594	3					
ANR	39635	Parameter	zval * arg	1619:37:42255:42263	39594	0	True				
ANR	39636	ParameterType	zval *		39594	0					
ANR	39637	Identifier	arg		39594	1					
ANR	39638	Parameter	zend_ulong index	1619:48:42266:42281	39594	1	True				
ANR	39639	ParameterType	zend_ulong		39594	0					
ANR	39640	Identifier	index		39594	1					
ANR	39641	Parameter	const char * str	1619:66:42284:42298	39594	2	True				
ANR	39642	ParameterType	const char *		39594	0					
ANR	39643	Identifier	str		39594	1					
ANR	39644	Parameter	size_t length	1619:83:42301:42313	39594	3	True				
ANR	39645	ParameterType	size_t		39594	0					
ANR	39646	Identifier	length		39594	1					
ANR	39647	CFGEntryNode	ENTRY		39594		True				
ANR	39648	CFGExitNode	EXIT		39594		True				
ANR	39649	Symbol	str		39594						
ANR	39650	Symbol	tmp		39594						
ANR	39651	Symbol	zend_hash_index_update		39594						
ANR	39652	Symbol	arg		39594						
ANR	39653	Symbol	length		39594						
ANR	39654	Symbol	index		39594						
ANR	39655	Symbol	& tmp		39594						
ANR	39656	Symbol	Z_ARRVAL_P		39594						
ANR	39657	Function	array_set_zval_key	1628:0:42449:43546							
ANR	39658	FunctionDef	"array_set_zval_key (HashTable * ht , zval * key , zval * value)"		39657	0					
ANR	39659	CompoundStatement		1629:0:42530:43546	39657	0					
ANR	39660	IdentifierDeclStatement	zval * result ;	1630:1:42533:42545	39657	0	True				
ANR	39661	IdentifierDecl	* result		39657	0					
ANR	39662	IdentifierDeclType	zval *		39657	0					
ANR	39663	Identifier	result		39657	1					
ANR	39664	SwitchStatement	switch ( Z_TYPE_P ( key ) )		39657	1					
ANR	39665	Condition	Z_TYPE_P ( key )	1632:9:42557:42569	39657	0	True				
ANR	39666	CallExpression	Z_TYPE_P ( key )		39657	0					
ANR	39667	Callee	Z_TYPE_P		39657	0					
ANR	39668	Identifier	Z_TYPE_P		39657	0					
ANR	39669	ArgumentList	key		39657	1					
ANR	39670	Argument	key		39657	0					
ANR	39671	Identifier	key		39657	0					
ANR	39672	CompoundStatement		4:24:41:41	39657	1					
ANR	39673	Label	case IS_STRING :	1633:2:42576:42590	39657	0	True				
ANR	39674	Identifier	IS_STRING		39657	0					
ANR	39675	ExpressionStatement	"result = zend_symtable_update ( ht , Z_STR_P ( key ) , value )"	1634:3:42595:42649	39657	1	True				
ANR	39676	AssignmentExpression	"result = zend_symtable_update ( ht , Z_STR_P ( key ) , value )"		39657	0		=			
ANR	39677	Identifier	result		39657	0					
ANR	39678	CallExpression	"zend_symtable_update ( ht , Z_STR_P ( key ) , value )"		39657	1					
ANR	39679	Callee	zend_symtable_update		39657	0					
ANR	39680	Identifier	zend_symtable_update		39657	0					
ANR	39681	ArgumentList	ht		39657	1					
ANR	39682	Argument	ht		39657	0					
ANR	39683	Identifier	ht		39657	0					
ANR	39684	Argument	Z_STR_P ( key )		39657	1					
ANR	39685	CallExpression	Z_STR_P ( key )		39657	0					
ANR	39686	Callee	Z_STR_P		39657	0					
ANR	39687	Identifier	Z_STR_P		39657	0					
ANR	39688	ArgumentList	key		39657	1					
ANR	39689	Argument	key		39657	0					
ANR	39690	Identifier	key		39657	0					
ANR	39691	Argument	value		39657	2					
ANR	39692	Identifier	value		39657	0					
ANR	39693	BreakStatement	break ;	1635:3:42654:42659	39657	2	True				
ANR	39694	Label	case IS_NULL :	1636:2:42663:42675	39657	3	True				
ANR	39695	Identifier	IS_NULL		39657	0					
ANR	39696	ExpressionStatement	"result = zend_symtable_update ( ht , ZSTR_EMPTY_ALLOC ( ) , value )"	1637:3:42680:42740	39657	4	True				
ANR	39697	AssignmentExpression	"result = zend_symtable_update ( ht , ZSTR_EMPTY_ALLOC ( ) , value )"		39657	0		=			
ANR	39698	Identifier	result		39657	0					
ANR	39699	CallExpression	"zend_symtable_update ( ht , ZSTR_EMPTY_ALLOC ( ) , value )"		39657	1					
ANR	39700	Callee	zend_symtable_update		39657	0					
ANR	39701	Identifier	zend_symtable_update		39657	0					
ANR	39702	ArgumentList	ht		39657	1					
ANR	39703	Argument	ht		39657	0					
ANR	39704	Identifier	ht		39657	0					
ANR	39705	Argument	ZSTR_EMPTY_ALLOC ( )		39657	1					
ANR	39706	CallExpression	ZSTR_EMPTY_ALLOC ( )		39657	0					
ANR	39707	Callee	ZSTR_EMPTY_ALLOC		39657	0					
ANR	39708	Identifier	ZSTR_EMPTY_ALLOC		39657	0					
ANR	39709	ArgumentList			39657	1					
ANR	39710	Argument	value		39657	2					
ANR	39711	Identifier	value		39657	0					
ANR	39712	BreakStatement	break ;	1638:3:42745:42750	39657	5	True				
ANR	39713	Label	case IS_RESOURCE :	1639:2:42754:42770	39657	6	True				
ANR	39714	Identifier	IS_RESOURCE		39657	0					
ANR	39715	Statement	zend_error	1640:3:42775:42784	39657	7	True				
ANR	39716	Statement	(	1640:13:42785:42785	39657	8	True				
ANR	39717	Statement	E_NOTICE	1640:14:42786:42793	39657	9	True				
ANR	39718	Statement	","	1640:22:42794:42794	39657	10	True				
ANR	39719	Statement	"""Resource ID#"""	1640:24:42796:42809	39657	11	True				
ANR	39720	Statement	ZEND_LONG_FMT	1640:39:42811:42823	39657	12	True				
ANR	39721	Statement	""" used as offset, casting to integer (%pd)"""	1640:53:42825:42867	39657	13	True				
ANR	39722	Statement	","	1640:96:42868:42868	39657	14	True				
ANR	39723	Statement	Z_RES_HANDLE_P	1640:98:42870:42883	39657	15	True				
ANR	39724	Statement	(	1640:112:42884:42884	39657	16	True				
ANR	39725	Statement	key	1640:113:42885:42887	39657	17	True				
ANR	39726	Statement	)	1640:116:42888:42888	39657	18	True				
ANR	39727	Statement	","	1640:117:42889:42889	39657	19	True				
ANR	39728	Statement	Z_RES_HANDLE_P	1640:119:42891:42904	39657	20	True				
ANR	39729	Statement	(	1640:133:42905:42905	39657	21	True				
ANR	39730	Statement	key	1640:134:42906:42908	39657	22	True				
ANR	39731	Statement	)	1640:137:42909:42909	39657	23	True				
ANR	39732	Statement	)	1640:138:42910:42910	39657	24	True				
ANR	39733	ExpressionStatement		1640:139:42911:42911	39657	25	True				
ANR	39734	ExpressionStatement	"result = zend_hash_index_update ( ht , Z_RES_HANDLE_P ( key ) , value )"	1641:3:42916:42979	39657	26	True				
ANR	39735	AssignmentExpression	"result = zend_hash_index_update ( ht , Z_RES_HANDLE_P ( key ) , value )"		39657	0		=			
ANR	39736	Identifier	result		39657	0					
ANR	39737	CallExpression	"zend_hash_index_update ( ht , Z_RES_HANDLE_P ( key ) , value )"		39657	1					
ANR	39738	Callee	zend_hash_index_update		39657	0					
ANR	39739	Identifier	zend_hash_index_update		39657	0					
ANR	39740	ArgumentList	ht		39657	1					
ANR	39741	Argument	ht		39657	0					
ANR	39742	Identifier	ht		39657	0					
ANR	39743	Argument	Z_RES_HANDLE_P ( key )		39657	1					
ANR	39744	CallExpression	Z_RES_HANDLE_P ( key )		39657	0					
ANR	39745	Callee	Z_RES_HANDLE_P		39657	0					
ANR	39746	Identifier	Z_RES_HANDLE_P		39657	0					
ANR	39747	ArgumentList	key		39657	1					
ANR	39748	Argument	key		39657	0					
ANR	39749	Identifier	key		39657	0					
ANR	39750	Argument	value		39657	2					
ANR	39751	Identifier	value		39657	0					
ANR	39752	BreakStatement	break ;	1642:3:42984:42989	39657	27	True				
ANR	39753	Label	case IS_FALSE :	1643:2:42993:43006	39657	28	True				
ANR	39754	Identifier	IS_FALSE		39657	0					
ANR	39755	ExpressionStatement	"result = zend_hash_index_update ( ht , 0 , value )"	1644:3:43011:43056	39657	29	True				
ANR	39756	AssignmentExpression	"result = zend_hash_index_update ( ht , 0 , value )"		39657	0		=			
ANR	39757	Identifier	result		39657	0					
ANR	39758	CallExpression	"zend_hash_index_update ( ht , 0 , value )"		39657	1					
ANR	39759	Callee	zend_hash_index_update		39657	0					
ANR	39760	Identifier	zend_hash_index_update		39657	0					
ANR	39761	ArgumentList	ht		39657	1					
ANR	39762	Argument	ht		39657	0					
ANR	39763	Identifier	ht		39657	0					
ANR	39764	Argument	0		39657	1					
ANR	39765	PrimaryExpression	0		39657	0					
ANR	39766	Argument	value		39657	2					
ANR	39767	Identifier	value		39657	0					
ANR	39768	BreakStatement	break ;	1645:3:43061:43066	39657	30	True				
ANR	39769	Label	case IS_TRUE :	1646:2:43070:43082	39657	31	True				
ANR	39770	Identifier	IS_TRUE		39657	0					
ANR	39771	ExpressionStatement	"result = zend_hash_index_update ( ht , 1 , value )"	1647:3:43087:43132	39657	32	True				
ANR	39772	AssignmentExpression	"result = zend_hash_index_update ( ht , 1 , value )"		39657	0		=			
ANR	39773	Identifier	result		39657	0					
ANR	39774	CallExpression	"zend_hash_index_update ( ht , 1 , value )"		39657	1					
ANR	39775	Callee	zend_hash_index_update		39657	0					
ANR	39776	Identifier	zend_hash_index_update		39657	0					
ANR	39777	ArgumentList	ht		39657	1					
ANR	39778	Argument	ht		39657	0					
ANR	39779	Identifier	ht		39657	0					
ANR	39780	Argument	1		39657	1					
ANR	39781	PrimaryExpression	1		39657	0					
ANR	39782	Argument	value		39657	2					
ANR	39783	Identifier	value		39657	0					
ANR	39784	BreakStatement	break ;	1648:3:43137:43142	39657	33	True				
ANR	39785	Label	case IS_LONG :	1649:2:43146:43158	39657	34	True				
ANR	39786	Identifier	IS_LONG		39657	0					
ANR	39787	ExpressionStatement	"result = zend_hash_index_update ( ht , Z_LVAL_P ( key ) , value )"	1650:3:43163:43220	39657	35	True				
ANR	39788	AssignmentExpression	"result = zend_hash_index_update ( ht , Z_LVAL_P ( key ) , value )"		39657	0		=			
ANR	39789	Identifier	result		39657	0					
ANR	39790	CallExpression	"zend_hash_index_update ( ht , Z_LVAL_P ( key ) , value )"		39657	1					
ANR	39791	Callee	zend_hash_index_update		39657	0					
ANR	39792	Identifier	zend_hash_index_update		39657	0					
ANR	39793	ArgumentList	ht		39657	1					
ANR	39794	Argument	ht		39657	0					
ANR	39795	Identifier	ht		39657	0					
ANR	39796	Argument	Z_LVAL_P ( key )		39657	1					
ANR	39797	CallExpression	Z_LVAL_P ( key )		39657	0					
ANR	39798	Callee	Z_LVAL_P		39657	0					
ANR	39799	Identifier	Z_LVAL_P		39657	0					
ANR	39800	ArgumentList	key		39657	1					
ANR	39801	Argument	key		39657	0					
ANR	39802	Identifier	key		39657	0					
ANR	39803	Argument	value		39657	2					
ANR	39804	Identifier	value		39657	0					
ANR	39805	BreakStatement	break ;	1651:3:43225:43230	39657	36	True				
ANR	39806	Label	case IS_DOUBLE :	1652:2:43234:43248	39657	37	True				
ANR	39807	Identifier	IS_DOUBLE		39657	0					
ANR	39808	ExpressionStatement	"result = zend_hash_index_update ( ht , zend_dval_to_lval ( Z_DVAL_P ( key ) ) , value )"	1653:3:43253:43329	39657	38	True				
ANR	39809	AssignmentExpression	"result = zend_hash_index_update ( ht , zend_dval_to_lval ( Z_DVAL_P ( key ) ) , value )"		39657	0		=			
ANR	39810	Identifier	result		39657	0					
ANR	39811	CallExpression	"zend_hash_index_update ( ht , zend_dval_to_lval ( Z_DVAL_P ( key ) ) , value )"		39657	1					
ANR	39812	Callee	zend_hash_index_update		39657	0					
ANR	39813	Identifier	zend_hash_index_update		39657	0					
ANR	39814	ArgumentList	ht		39657	1					
ANR	39815	Argument	ht		39657	0					
ANR	39816	Identifier	ht		39657	0					
ANR	39817	Argument	zend_dval_to_lval ( Z_DVAL_P ( key ) )		39657	1					
ANR	39818	CallExpression	zend_dval_to_lval ( Z_DVAL_P ( key ) )		39657	0					
ANR	39819	Callee	zend_dval_to_lval		39657	0					
ANR	39820	Identifier	zend_dval_to_lval		39657	0					
ANR	39821	ArgumentList	Z_DVAL_P ( key )		39657	1					
ANR	39822	Argument	Z_DVAL_P ( key )		39657	0					
ANR	39823	CallExpression	Z_DVAL_P ( key )		39657	0					
ANR	39824	Callee	Z_DVAL_P		39657	0					
ANR	39825	Identifier	Z_DVAL_P		39657	0					
ANR	39826	ArgumentList	key		39657	1					
ANR	39827	Argument	key		39657	0					
ANR	39828	Identifier	key		39657	0					
ANR	39829	Argument	value		39657	2					
ANR	39830	Identifier	value		39657	0					
ANR	39831	BreakStatement	break ;	1654:3:43334:43339	39657	39	True				
ANR	39832	Label	default :	1655:2:43343:43350	39657	40	True				
ANR	39833	Identifier	default		39657	0					
ANR	39834	ExpressionStatement	"zend_error ( E_WARNING , ""Illegal offset type"" )"	1656:3:43355:43399	39657	41	True				
ANR	39835	CallExpression	"zend_error ( E_WARNING , ""Illegal offset type"" )"		39657	0					
ANR	39836	Callee	zend_error		39657	0					
ANR	39837	Identifier	zend_error		39657	0					
ANR	39838	ArgumentList	E_WARNING		39657	1					
ANR	39839	Argument	E_WARNING		39657	0					
ANR	39840	Identifier	E_WARNING		39657	0					
ANR	39841	Argument	"""Illegal offset type"""		39657	1					
ANR	39842	PrimaryExpression	"""Illegal offset type"""		39657	0					
ANR	39843	ExpressionStatement	result = NULL	1657:3:43404:43417	39657	42	True				
ANR	39844	AssignmentExpression	result = NULL		39657	0		=			
ANR	39845	Identifier	result		39657	0					
ANR	39846	Identifier	NULL		39657	1					
ANR	39847	IfStatement	if ( result )		39657	2					
ANR	39848	Condition	result	1660:5:43428:43433	39657	0	True				
ANR	39849	Identifier	result		39657	0					
ANR	39850	CompoundStatement		32:13:905:905	39657	1					
ANR	39851	IfStatement	if ( Z_REFCOUNTED_P ( result ) )		39657	0					
ANR	39852	Condition	Z_REFCOUNTED_P ( result )	1661:6:43444:43465	39657	0	True				
ANR	39853	CallExpression	Z_REFCOUNTED_P ( result )		39657	0					
ANR	39854	Callee	Z_REFCOUNTED_P		39657	0					
ANR	39855	Identifier	Z_REFCOUNTED_P		39657	0					
ANR	39856	ArgumentList	result		39657	1					
ANR	39857	Argument	result		39657	0					
ANR	39858	Identifier	result		39657	0					
ANR	39859	CompoundStatement		33:30:937:937	39657	1					
ANR	39860	ExpressionStatement	Z_ADDREF_P ( result )	1662:3:43473:43491	39657	0	True				
ANR	39861	CallExpression	Z_ADDREF_P ( result )		39657	0					
ANR	39862	Callee	Z_ADDREF_P		39657	0					
ANR	39863	Identifier	Z_ADDREF_P		39657	0					
ANR	39864	ArgumentList	result		39657	1					
ANR	39865	Argument	result		39657	0					
ANR	39866	Identifier	result		39657	0					
ANR	39867	ReturnStatement	return SUCCESS ;	1664:2:43499:43513	39657	1	True				
ANR	39868	Identifier	SUCCESS		39657	0					
ANR	39869	ElseStatement	else		39657	0					
ANR	39870	CompoundStatement		37:8:992:992	39657	0					
ANR	39871	ReturnStatement	return FAILURE ;	1666:2:43527:43541	39657	0	True				
ANR	39872	Identifier	FAILURE		39657	0					
ANR	39873	ReturnType	ZEND_API int		39657	1					
ANR	39874	Identifier	array_set_zval_key		39657	2					
ANR	39875	ParameterList	"HashTable * ht , zval * key , zval * value"		39657	3					
ANR	39876	Parameter	HashTable * ht	1628:32:42481:42493	39657	0	True				
ANR	39877	ParameterType	HashTable *		39657	0					
ANR	39878	Identifier	ht		39657	1					
ANR	39879	Parameter	zval * key	1628:47:42496:42504	39657	1	True				
ANR	39880	ParameterType	zval *		39657	0					
ANR	39881	Identifier	key		39657	1					
ANR	39882	Parameter	zval * value	1628:58:42507:42517	39657	2	True				
ANR	39883	ParameterType	zval *		39657	0					
ANR	39884	Identifier	value		39657	1					
ANR	39885	CFGEntryNode	ENTRY		39657		True				
ANR	39886	CFGExitNode	EXIT		39657		True				
ANR	39887	Symbol	Z_RES_HANDLE_P		39657						
ANR	39888	Symbol	NULL		39657						
ANR	39889	Symbol	SUCCESS		39657						
ANR	39890	Symbol	zend_hash_index_update		39657						
ANR	39891	Symbol	ht		39657						
ANR	39892	Symbol	Z_TYPE_P		39657						
ANR	39893	Symbol	FAILURE		39657						
ANR	39894	Symbol	ZSTR_EMPTY_ALLOC		39657						
ANR	39895	Symbol	Z_DVAL_P		39657						
ANR	39896	Symbol	Z_LVAL_P		39657						
ANR	39897	Symbol	result		39657						
ANR	39898	Symbol	zend_dval_to_lval		39657						
ANR	39899	Symbol	E_WARNING		39657						
ANR	39900	Symbol	Z_STR_P		39657						
ANR	39901	Symbol	Z_REFCOUNTED_P		39657						
ANR	39902	Symbol	value		39657						
ANR	39903	Symbol	key		39657						
ANR	39904	Symbol	zend_symtable_update		39657						
ANR	39905	Function	add_property_long_ex	1671:0:43559:43916							
ANR	39906	FunctionDef	"add_property_long_ex (zval * arg , const char * key , size_t key_len , zend_long n)"		39905	0					
ANR	39907	CompoundStatement		1672:0:43660:43916	39905	0					
ANR	39908	IdentifierDeclStatement	zval tmp ;	1673:1:43663:43671	39905	0	True				
ANR	39909	IdentifierDecl	tmp		39905	0					
ANR	39910	IdentifierDeclType	zval		39905	0					
ANR	39911	Identifier	tmp		39905	1					
ANR	39912	IdentifierDeclStatement	zval z_key ;	1674:1:43674:43684	39905	1	True				
ANR	39913	IdentifierDecl	z_key		39905	0					
ANR	39914	IdentifierDeclType	zval		39905	0					
ANR	39915	Identifier	z_key		39905	1					
ANR	39916	ExpressionStatement	"ZVAL_LONG ( & tmp , n )"	1676:1:43688:43706	39905	2	True				
ANR	39917	CallExpression	"ZVAL_LONG ( & tmp , n )"		39905	0					
ANR	39918	Callee	ZVAL_LONG		39905	0					
ANR	39919	Identifier	ZVAL_LONG		39905	0					
ANR	39920	ArgumentList	& tmp		39905	1					
ANR	39921	Argument	& tmp		39905	0					
ANR	39922	UnaryOperationExpression	& tmp		39905	0					
ANR	39923	UnaryOperator	&		39905	0					
ANR	39924	Identifier	tmp		39905	1					
ANR	39925	Argument	n		39905	1					
ANR	39926	Identifier	n		39905	0					
ANR	39927	ExpressionStatement	"ZVAL_STRINGL ( & z_key , key , key_len )"	1677:1:43709:43743	39905	3	True				
ANR	39928	CallExpression	"ZVAL_STRINGL ( & z_key , key , key_len )"		39905	0					
ANR	39929	Callee	ZVAL_STRINGL		39905	0					
ANR	39930	Identifier	ZVAL_STRINGL		39905	0					
ANR	39931	ArgumentList	& z_key		39905	1					
ANR	39932	Argument	& z_key		39905	0					
ANR	39933	UnaryOperationExpression	& z_key		39905	0					
ANR	39934	UnaryOperator	&		39905	0					
ANR	39935	Identifier	z_key		39905	1					
ANR	39936	Argument	key		39905	1					
ANR	39937	Identifier	key		39905	0					
ANR	39938	Argument	key_len		39905	2					
ANR	39939	Identifier	key_len		39905	0					
ANR	39940	ExpressionStatement	"Z_OBJ_HANDLER_P ( arg , write_property ) ( arg , & z_key , & tmp , NULL )"	1678:1:43746:43807	39905	4	True				
ANR	39941	CallExpression	"Z_OBJ_HANDLER_P ( arg , write_property ) ( arg , & z_key , & tmp , NULL )"		39905	0					
ANR	39942	Callee	"Z_OBJ_HANDLER_P ( arg , write_property )"		39905	0					
ANR	39943	CallExpression	"Z_OBJ_HANDLER_P ( arg , write_property )"		39905	0					
ANR	39944	Callee	Z_OBJ_HANDLER_P		39905	0					
ANR	39945	Identifier	Z_OBJ_HANDLER_P		39905	0					
ANR	39946	ArgumentList	arg		39905	1					
ANR	39947	Argument	arg		39905	0					
ANR	39948	Identifier	arg		39905	0					
ANR	39949	Argument	write_property		39905	1					
ANR	39950	Identifier	write_property		39905	0					
ANR	39951	ArgumentList	arg		39905	1					
ANR	39952	Argument	arg		39905	0					
ANR	39953	Identifier	arg		39905	0					
ANR	39954	Argument	& z_key		39905	1					
ANR	39955	UnaryOperationExpression	& z_key		39905	0					
ANR	39956	UnaryOperator	&		39905	0					
ANR	39957	Identifier	z_key		39905	1					
ANR	39958	Argument	& tmp		39905	2					
ANR	39959	UnaryOperationExpression	& tmp		39905	0					
ANR	39960	UnaryOperator	&		39905	0					
ANR	39961	Identifier	tmp		39905	1					
ANR	39962	Argument	NULL		39905	3					
ANR	39963	Identifier	NULL		39905	0					
ANR	39964	ExpressionStatement	zval_ptr_dtor ( & tmp )	1679:1:43810:43829	39905	5	True				
ANR	39965	CallExpression	zval_ptr_dtor ( & tmp )		39905	0					
ANR	39966	Callee	zval_ptr_dtor		39905	0					
ANR	39967	Identifier	zval_ptr_dtor		39905	0					
ANR	39968	ArgumentList	& tmp		39905	1					
ANR	39969	Argument	& tmp		39905	0					
ANR	39970	UnaryOperationExpression	& tmp		39905	0					
ANR	39971	UnaryOperator	&		39905	0					
ANR	39972	Identifier	tmp		39905	1					
ANR	39973	ExpressionStatement	zval_ptr_dtor ( & z_key )	1680:1:43876:43897	39905	6	True				
ANR	39974	CallExpression	zval_ptr_dtor ( & z_key )		39905	0					
ANR	39975	Callee	zval_ptr_dtor		39905	0					
ANR	39976	Identifier	zval_ptr_dtor		39905	0					
ANR	39977	ArgumentList	& z_key		39905	1					
ANR	39978	Argument	& z_key		39905	0					
ANR	39979	UnaryOperationExpression	& z_key		39905	0					
ANR	39980	UnaryOperator	&		39905	0					
ANR	39981	Identifier	z_key		39905	1					
ANR	39982	ReturnStatement	return SUCCESS ;	1681:1:43900:43914	39905	7	True				
ANR	39983	Identifier	SUCCESS		39905	0					
ANR	39984	ReturnType	ZEND_API int		39905	1					
ANR	39985	Identifier	add_property_long_ex		39905	2					
ANR	39986	ParameterList	"zval * arg , const char * key , size_t key_len , zend_long n"		39905	3					
ANR	39987	Parameter	zval * arg	1671:34:43593:43601	39905	0	True				
ANR	39988	ParameterType	zval *		39905	0					
ANR	39989	Identifier	arg		39905	1					
ANR	39990	Parameter	const char * key	1671:45:43604:43618	39905	1	True				
ANR	39991	ParameterType	const char *		39905	0					
ANR	39992	Identifier	key		39905	1					
ANR	39993	Parameter	size_t key_len	1671:62:43621:43634	39905	2	True				
ANR	39994	ParameterType	size_t		39905	0					
ANR	39995	Identifier	key_len		39905	1					
ANR	39996	Parameter	zend_long n	1671:78:43637:43647	39905	3	True				
ANR	39997	ParameterType	zend_long		39905	0					
ANR	39998	Identifier	n		39905	1					
ANR	39999	CFGEntryNode	ENTRY		39905		True				
ANR	40000	CFGExitNode	EXIT		39905		True				
ANR	40001	Symbol	NULL		39905						
ANR	40002	Symbol	SUCCESS		39905						
ANR	40003	Symbol	tmp		39905						
ANR	40004	Symbol	arg		39905						
ANR	40005	Symbol	write_property		39905						
ANR	40006	Symbol	& tmp		39905						
ANR	40007	Symbol	& z_key		39905						
ANR	40008	Symbol	key		39905						
ANR	40009	Symbol	n		39905						
ANR	40010	Symbol	z_key		39905						
ANR	40011	Symbol	key_len		39905						
ANR	40012	Function	add_property_bool_ex	1685:0:43929:44286							
ANR	40013	FunctionDef	"add_property_bool_ex (zval * arg , const char * key , size_t key_len , zend_long b)"		40012	0					
ANR	40014	CompoundStatement		1686:0:44030:44286	40012	0					
ANR	40015	IdentifierDeclStatement	zval tmp ;	1687:1:44033:44041	40012	0	True				
ANR	40016	IdentifierDecl	tmp		40012	0					
ANR	40017	IdentifierDeclType	zval		40012	0					
ANR	40018	Identifier	tmp		40012	1					
ANR	40019	IdentifierDeclStatement	zval z_key ;	1688:1:44044:44054	40012	1	True				
ANR	40020	IdentifierDecl	z_key		40012	0					
ANR	40021	IdentifierDeclType	zval		40012	0					
ANR	40022	Identifier	z_key		40012	1					
ANR	40023	ExpressionStatement	"ZVAL_BOOL ( & tmp , b )"	1690:1:44058:44076	40012	2	True				
ANR	40024	CallExpression	"ZVAL_BOOL ( & tmp , b )"		40012	0					
ANR	40025	Callee	ZVAL_BOOL		40012	0					
ANR	40026	Identifier	ZVAL_BOOL		40012	0					
ANR	40027	ArgumentList	& tmp		40012	1					
ANR	40028	Argument	& tmp		40012	0					
ANR	40029	UnaryOperationExpression	& tmp		40012	0					
ANR	40030	UnaryOperator	&		40012	0					
ANR	40031	Identifier	tmp		40012	1					
ANR	40032	Argument	b		40012	1					
ANR	40033	Identifier	b		40012	0					
ANR	40034	ExpressionStatement	"ZVAL_STRINGL ( & z_key , key , key_len )"	1691:1:44079:44113	40012	3	True				
ANR	40035	CallExpression	"ZVAL_STRINGL ( & z_key , key , key_len )"		40012	0					
ANR	40036	Callee	ZVAL_STRINGL		40012	0					
ANR	40037	Identifier	ZVAL_STRINGL		40012	0					
ANR	40038	ArgumentList	& z_key		40012	1					
ANR	40039	Argument	& z_key		40012	0					
ANR	40040	UnaryOperationExpression	& z_key		40012	0					
ANR	40041	UnaryOperator	&		40012	0					
ANR	40042	Identifier	z_key		40012	1					
ANR	40043	Argument	key		40012	1					
ANR	40044	Identifier	key		40012	0					
ANR	40045	Argument	key_len		40012	2					
ANR	40046	Identifier	key_len		40012	0					
ANR	40047	ExpressionStatement	"Z_OBJ_HANDLER_P ( arg , write_property ) ( arg , & z_key , & tmp , NULL )"	1692:1:44116:44177	40012	4	True				
ANR	40048	CallExpression	"Z_OBJ_HANDLER_P ( arg , write_property ) ( arg , & z_key , & tmp , NULL )"		40012	0					
ANR	40049	Callee	"Z_OBJ_HANDLER_P ( arg , write_property )"		40012	0					
ANR	40050	CallExpression	"Z_OBJ_HANDLER_P ( arg , write_property )"		40012	0					
ANR	40051	Callee	Z_OBJ_HANDLER_P		40012	0					
ANR	40052	Identifier	Z_OBJ_HANDLER_P		40012	0					
ANR	40053	ArgumentList	arg		40012	1					
ANR	40054	Argument	arg		40012	0					
ANR	40055	Identifier	arg		40012	0					
ANR	40056	Argument	write_property		40012	1					
ANR	40057	Identifier	write_property		40012	0					
ANR	40058	ArgumentList	arg		40012	1					
ANR	40059	Argument	arg		40012	0					
ANR	40060	Identifier	arg		40012	0					
ANR	40061	Argument	& z_key		40012	1					
ANR	40062	UnaryOperationExpression	& z_key		40012	0					
ANR	40063	UnaryOperator	&		40012	0					
ANR	40064	Identifier	z_key		40012	1					
ANR	40065	Argument	& tmp		40012	2					
ANR	40066	UnaryOperationExpression	& tmp		40012	0					
ANR	40067	UnaryOperator	&		40012	0					
ANR	40068	Identifier	tmp		40012	1					
ANR	40069	Argument	NULL		40012	3					
ANR	40070	Identifier	NULL		40012	0					
ANR	40071	ExpressionStatement	zval_ptr_dtor ( & tmp )	1693:1:44180:44199	40012	5	True				
ANR	40072	CallExpression	zval_ptr_dtor ( & tmp )		40012	0					
ANR	40073	Callee	zval_ptr_dtor		40012	0					
ANR	40074	Identifier	zval_ptr_dtor		40012	0					
ANR	40075	ArgumentList	& tmp		40012	1					
ANR	40076	Argument	& tmp		40012	0					
ANR	40077	UnaryOperationExpression	& tmp		40012	0					
ANR	40078	UnaryOperator	&		40012	0					
ANR	40079	Identifier	tmp		40012	1					
ANR	40080	ExpressionStatement	zval_ptr_dtor ( & z_key )	1694:1:44246:44267	40012	6	True				
ANR	40081	CallExpression	zval_ptr_dtor ( & z_key )		40012	0					
ANR	40082	Callee	zval_ptr_dtor		40012	0					
ANR	40083	Identifier	zval_ptr_dtor		40012	0					
ANR	40084	ArgumentList	& z_key		40012	1					
ANR	40085	Argument	& z_key		40012	0					
ANR	40086	UnaryOperationExpression	& z_key		40012	0					
ANR	40087	UnaryOperator	&		40012	0					
ANR	40088	Identifier	z_key		40012	1					
ANR	40089	ReturnStatement	return SUCCESS ;	1695:1:44270:44284	40012	7	True				
ANR	40090	Identifier	SUCCESS		40012	0					
ANR	40091	ReturnType	ZEND_API int		40012	1					
ANR	40092	Identifier	add_property_bool_ex		40012	2					
ANR	40093	ParameterList	"zval * arg , const char * key , size_t key_len , zend_long b"		40012	3					
ANR	40094	Parameter	zval * arg	1685:34:43963:43971	40012	0	True				
ANR	40095	ParameterType	zval *		40012	0					
ANR	40096	Identifier	arg		40012	1					
ANR	40097	Parameter	const char * key	1685:45:43974:43988	40012	1	True				
ANR	40098	ParameterType	const char *		40012	0					
ANR	40099	Identifier	key		40012	1					
ANR	40100	Parameter	size_t key_len	1685:62:43991:44004	40012	2	True				
ANR	40101	ParameterType	size_t		40012	0					
ANR	40102	Identifier	key_len		40012	1					
ANR	40103	Parameter	zend_long b	1685:78:44007:44017	40012	3	True				
ANR	40104	ParameterType	zend_long		40012	0					
ANR	40105	Identifier	b		40012	1					
ANR	40106	CFGEntryNode	ENTRY		40012		True				
ANR	40107	CFGExitNode	EXIT		40012		True				
ANR	40108	Symbol	b		40012						
ANR	40109	Symbol	NULL		40012						
ANR	40110	Symbol	SUCCESS		40012						
ANR	40111	Symbol	tmp		40012						
ANR	40112	Symbol	arg		40012						
ANR	40113	Symbol	write_property		40012						
ANR	40114	Symbol	& tmp		40012						
ANR	40115	Symbol	& z_key		40012						
ANR	40116	Symbol	key		40012						
ANR	40117	Symbol	z_key		40012						
ANR	40118	Symbol	key_len		40012						
ANR	40119	Function	add_property_null_ex	1699:0:44299:44640							
ANR	40120	FunctionDef	"add_property_null_ex (zval * arg , const char * key , size_t key_len)"		40119	0					
ANR	40121	CompoundStatement		1700:0:44387:44640	40119	0					
ANR	40122	IdentifierDeclStatement	zval tmp ;	1701:1:44390:44398	40119	0	True				
ANR	40123	IdentifierDecl	tmp		40119	0					
ANR	40124	IdentifierDeclType	zval		40119	0					
ANR	40125	Identifier	tmp		40119	1					
ANR	40126	IdentifierDeclStatement	zval z_key ;	1702:1:44401:44411	40119	1	True				
ANR	40127	IdentifierDecl	z_key		40119	0					
ANR	40128	IdentifierDeclType	zval		40119	0					
ANR	40129	Identifier	z_key		40119	1					
ANR	40130	ExpressionStatement	ZVAL_NULL ( & tmp )	1704:1:44415:44430	40119	2	True				
ANR	40131	CallExpression	ZVAL_NULL ( & tmp )		40119	0					
ANR	40132	Callee	ZVAL_NULL		40119	0					
ANR	40133	Identifier	ZVAL_NULL		40119	0					
ANR	40134	ArgumentList	& tmp		40119	1					
ANR	40135	Argument	& tmp		40119	0					
ANR	40136	UnaryOperationExpression	& tmp		40119	0					
ANR	40137	UnaryOperator	&		40119	0					
ANR	40138	Identifier	tmp		40119	1					
ANR	40139	ExpressionStatement	"ZVAL_STRINGL ( & z_key , key , key_len )"	1705:1:44433:44467	40119	3	True				
ANR	40140	CallExpression	"ZVAL_STRINGL ( & z_key , key , key_len )"		40119	0					
ANR	40141	Callee	ZVAL_STRINGL		40119	0					
ANR	40142	Identifier	ZVAL_STRINGL		40119	0					
ANR	40143	ArgumentList	& z_key		40119	1					
ANR	40144	Argument	& z_key		40119	0					
ANR	40145	UnaryOperationExpression	& z_key		40119	0					
ANR	40146	UnaryOperator	&		40119	0					
ANR	40147	Identifier	z_key		40119	1					
ANR	40148	Argument	key		40119	1					
ANR	40149	Identifier	key		40119	0					
ANR	40150	Argument	key_len		40119	2					
ANR	40151	Identifier	key_len		40119	0					
ANR	40152	ExpressionStatement	"Z_OBJ_HANDLER_P ( arg , write_property ) ( arg , & z_key , & tmp , NULL )"	1706:1:44470:44531	40119	4	True				
ANR	40153	CallExpression	"Z_OBJ_HANDLER_P ( arg , write_property ) ( arg , & z_key , & tmp , NULL )"		40119	0					
ANR	40154	Callee	"Z_OBJ_HANDLER_P ( arg , write_property )"		40119	0					
ANR	40155	CallExpression	"Z_OBJ_HANDLER_P ( arg , write_property )"		40119	0					
ANR	40156	Callee	Z_OBJ_HANDLER_P		40119	0					
ANR	40157	Identifier	Z_OBJ_HANDLER_P		40119	0					
ANR	40158	ArgumentList	arg		40119	1					
ANR	40159	Argument	arg		40119	0					
ANR	40160	Identifier	arg		40119	0					
ANR	40161	Argument	write_property		40119	1					
ANR	40162	Identifier	write_property		40119	0					
ANR	40163	ArgumentList	arg		40119	1					
ANR	40164	Argument	arg		40119	0					
ANR	40165	Identifier	arg		40119	0					
ANR	40166	Argument	& z_key		40119	1					
ANR	40167	UnaryOperationExpression	& z_key		40119	0					
ANR	40168	UnaryOperator	&		40119	0					
ANR	40169	Identifier	z_key		40119	1					
ANR	40170	Argument	& tmp		40119	2					
ANR	40171	UnaryOperationExpression	& tmp		40119	0					
ANR	40172	UnaryOperator	&		40119	0					
ANR	40173	Identifier	tmp		40119	1					
ANR	40174	Argument	NULL		40119	3					
ANR	40175	Identifier	NULL		40119	0					
ANR	40176	ExpressionStatement	zval_ptr_dtor ( & tmp )	1707:1:44534:44553	40119	5	True				
ANR	40177	CallExpression	zval_ptr_dtor ( & tmp )		40119	0					
ANR	40178	Callee	zval_ptr_dtor		40119	0					
ANR	40179	Identifier	zval_ptr_dtor		40119	0					
ANR	40180	ArgumentList	& tmp		40119	1					
ANR	40181	Argument	& tmp		40119	0					
ANR	40182	UnaryOperationExpression	& tmp		40119	0					
ANR	40183	UnaryOperator	&		40119	0					
ANR	40184	Identifier	tmp		40119	1					
ANR	40185	ExpressionStatement	zval_ptr_dtor ( & z_key )	1708:1:44600:44621	40119	6	True				
ANR	40186	CallExpression	zval_ptr_dtor ( & z_key )		40119	0					
ANR	40187	Callee	zval_ptr_dtor		40119	0					
ANR	40188	Identifier	zval_ptr_dtor		40119	0					
ANR	40189	ArgumentList	& z_key		40119	1					
ANR	40190	Argument	& z_key		40119	0					
ANR	40191	UnaryOperationExpression	& z_key		40119	0					
ANR	40192	UnaryOperator	&		40119	0					
ANR	40193	Identifier	z_key		40119	1					
ANR	40194	ReturnStatement	return SUCCESS ;	1709:1:44624:44638	40119	7	True				
ANR	40195	Identifier	SUCCESS		40119	0					
ANR	40196	ReturnType	ZEND_API int		40119	1					
ANR	40197	Identifier	add_property_null_ex		40119	2					
ANR	40198	ParameterList	"zval * arg , const char * key , size_t key_len"		40119	3					
ANR	40199	Parameter	zval * arg	1699:34:44333:44341	40119	0	True				
ANR	40200	ParameterType	zval *		40119	0					
ANR	40201	Identifier	arg		40119	1					
ANR	40202	Parameter	const char * key	1699:45:44344:44358	40119	1	True				
ANR	40203	ParameterType	const char *		40119	0					
ANR	40204	Identifier	key		40119	1					
ANR	40205	Parameter	size_t key_len	1699:62:44361:44374	40119	2	True				
ANR	40206	ParameterType	size_t		40119	0					
ANR	40207	Identifier	key_len		40119	1					
ANR	40208	CFGEntryNode	ENTRY		40119		True				
ANR	40209	CFGExitNode	EXIT		40119		True				
ANR	40210	Symbol	NULL		40119						
ANR	40211	Symbol	SUCCESS		40119						
ANR	40212	Symbol	tmp		40119						
ANR	40213	Symbol	arg		40119						
ANR	40214	Symbol	write_property		40119						
ANR	40215	Symbol	& tmp		40119						
ANR	40216	Symbol	& z_key		40119						
ANR	40217	Symbol	key		40119						
ANR	40218	Symbol	z_key		40119						
ANR	40219	Symbol	key_len		40119						
ANR	40220	Function	add_property_resource_ex	1713:0:44653:45018							
ANR	40221	FunctionDef	"add_property_resource_ex (zval * arg , const char * key , size_t key_len , zend_resource * r)"		40220	0					
ANR	40222	CompoundStatement		1714:0:44763:45018	40220	0					
ANR	40223	IdentifierDeclStatement	zval tmp ;	1715:1:44766:44774	40220	0	True				
ANR	40224	IdentifierDecl	tmp		40220	0					
ANR	40225	IdentifierDeclType	zval		40220	0					
ANR	40226	Identifier	tmp		40220	1					
ANR	40227	IdentifierDeclStatement	zval z_key ;	1716:1:44777:44787	40220	1	True				
ANR	40228	IdentifierDecl	z_key		40220	0					
ANR	40229	IdentifierDeclType	zval		40220	0					
ANR	40230	Identifier	z_key		40220	1					
ANR	40231	ExpressionStatement	"ZVAL_RES ( & tmp , r )"	1718:1:44791:44808	40220	2	True				
ANR	40232	CallExpression	"ZVAL_RES ( & tmp , r )"		40220	0					
ANR	40233	Callee	ZVAL_RES		40220	0					
ANR	40234	Identifier	ZVAL_RES		40220	0					
ANR	40235	ArgumentList	& tmp		40220	1					
ANR	40236	Argument	& tmp		40220	0					
ANR	40237	UnaryOperationExpression	& tmp		40220	0					
ANR	40238	UnaryOperator	&		40220	0					
ANR	40239	Identifier	tmp		40220	1					
ANR	40240	Argument	r		40220	1					
ANR	40241	Identifier	r		40220	0					
ANR	40242	ExpressionStatement	"ZVAL_STRINGL ( & z_key , key , key_len )"	1719:1:44811:44845	40220	3	True				
ANR	40243	CallExpression	"ZVAL_STRINGL ( & z_key , key , key_len )"		40220	0					
ANR	40244	Callee	ZVAL_STRINGL		40220	0					
ANR	40245	Identifier	ZVAL_STRINGL		40220	0					
ANR	40246	ArgumentList	& z_key		40220	1					
ANR	40247	Argument	& z_key		40220	0					
ANR	40248	UnaryOperationExpression	& z_key		40220	0					
ANR	40249	UnaryOperator	&		40220	0					
ANR	40250	Identifier	z_key		40220	1					
ANR	40251	Argument	key		40220	1					
ANR	40252	Identifier	key		40220	0					
ANR	40253	Argument	key_len		40220	2					
ANR	40254	Identifier	key_len		40220	0					
ANR	40255	ExpressionStatement	"Z_OBJ_HANDLER_P ( arg , write_property ) ( arg , & z_key , & tmp , NULL )"	1720:1:44848:44909	40220	4	True				
ANR	40256	CallExpression	"Z_OBJ_HANDLER_P ( arg , write_property ) ( arg , & z_key , & tmp , NULL )"		40220	0					
ANR	40257	Callee	"Z_OBJ_HANDLER_P ( arg , write_property )"		40220	0					
ANR	40258	CallExpression	"Z_OBJ_HANDLER_P ( arg , write_property )"		40220	0					
ANR	40259	Callee	Z_OBJ_HANDLER_P		40220	0					
ANR	40260	Identifier	Z_OBJ_HANDLER_P		40220	0					
ANR	40261	ArgumentList	arg		40220	1					
ANR	40262	Argument	arg		40220	0					
ANR	40263	Identifier	arg		40220	0					
ANR	40264	Argument	write_property		40220	1					
ANR	40265	Identifier	write_property		40220	0					
ANR	40266	ArgumentList	arg		40220	1					
ANR	40267	Argument	arg		40220	0					
ANR	40268	Identifier	arg		40220	0					
ANR	40269	Argument	& z_key		40220	1					
ANR	40270	UnaryOperationExpression	& z_key		40220	0					
ANR	40271	UnaryOperator	&		40220	0					
ANR	40272	Identifier	z_key		40220	1					
ANR	40273	Argument	& tmp		40220	2					
ANR	40274	UnaryOperationExpression	& tmp		40220	0					
ANR	40275	UnaryOperator	&		40220	0					
ANR	40276	Identifier	tmp		40220	1					
ANR	40277	Argument	NULL		40220	3					
ANR	40278	Identifier	NULL		40220	0					
ANR	40279	ExpressionStatement	zval_ptr_dtor ( & tmp )	1721:1:44912:44931	40220	5	True				
ANR	40280	CallExpression	zval_ptr_dtor ( & tmp )		40220	0					
ANR	40281	Callee	zval_ptr_dtor		40220	0					
ANR	40282	Identifier	zval_ptr_dtor		40220	0					
ANR	40283	ArgumentList	& tmp		40220	1					
ANR	40284	Argument	& tmp		40220	0					
ANR	40285	UnaryOperationExpression	& tmp		40220	0					
ANR	40286	UnaryOperator	&		40220	0					
ANR	40287	Identifier	tmp		40220	1					
ANR	40288	ExpressionStatement	zval_ptr_dtor ( & z_key )	1722:1:44978:44999	40220	6	True				
ANR	40289	CallExpression	zval_ptr_dtor ( & z_key )		40220	0					
ANR	40290	Callee	zval_ptr_dtor		40220	0					
ANR	40291	Identifier	zval_ptr_dtor		40220	0					
ANR	40292	ArgumentList	& z_key		40220	1					
ANR	40293	Argument	& z_key		40220	0					
ANR	40294	UnaryOperationExpression	& z_key		40220	0					
ANR	40295	UnaryOperator	&		40220	0					
ANR	40296	Identifier	z_key		40220	1					
ANR	40297	ReturnStatement	return SUCCESS ;	1723:1:45002:45016	40220	7	True				
ANR	40298	Identifier	SUCCESS		40220	0					
ANR	40299	ReturnType	ZEND_API int		40220	1					
ANR	40300	Identifier	add_property_resource_ex		40220	2					
ANR	40301	ParameterList	"zval * arg , const char * key , size_t key_len , zend_resource * r"		40220	3					
ANR	40302	Parameter	zval * arg	1713:38:44691:44699	40220	0	True				
ANR	40303	ParameterType	zval *		40220	0					
ANR	40304	Identifier	arg		40220	1					
ANR	40305	Parameter	const char * key	1713:49:44702:44716	40220	1	True				
ANR	40306	ParameterType	const char *		40220	0					
ANR	40307	Identifier	key		40220	1					
ANR	40308	Parameter	size_t key_len	1713:66:44719:44732	40220	2	True				
ANR	40309	ParameterType	size_t		40220	0					
ANR	40310	Identifier	key_len		40220	1					
ANR	40311	Parameter	zend_resource * r	1713:82:44735:44750	40220	3	True				
ANR	40312	ParameterType	zend_resource *		40220	0					
ANR	40313	Identifier	r		40220	1					
ANR	40314	CFGEntryNode	ENTRY		40220		True				
ANR	40315	CFGExitNode	EXIT		40220		True				
ANR	40316	Symbol	r		40220						
ANR	40317	Symbol	NULL		40220						
ANR	40318	Symbol	SUCCESS		40220						
ANR	40319	Symbol	tmp		40220						
ANR	40320	Symbol	arg		40220						
ANR	40321	Symbol	write_property		40220						
ANR	40322	Symbol	& tmp		40220						
ANR	40323	Symbol	& z_key		40220						
ANR	40324	Symbol	key		40220						
ANR	40325	Symbol	z_key		40220						
ANR	40326	Symbol	key_len		40220						
ANR	40327	Function	add_property_double_ex	1727:0:45031:45389							
ANR	40328	FunctionDef	"add_property_double_ex (zval * arg , const char * key , size_t key_len , double d)"		40327	0					
ANR	40329	CompoundStatement		1728:0:45131:45389	40327	0					
ANR	40330	IdentifierDeclStatement	zval tmp ;	1729:1:45134:45142	40327	0	True				
ANR	40331	IdentifierDecl	tmp		40327	0					
ANR	40332	IdentifierDeclType	zval		40327	0					
ANR	40333	Identifier	tmp		40327	1					
ANR	40334	IdentifierDeclStatement	zval z_key ;	1730:1:45145:45155	40327	1	True				
ANR	40335	IdentifierDecl	z_key		40327	0					
ANR	40336	IdentifierDeclType	zval		40327	0					
ANR	40337	Identifier	z_key		40327	1					
ANR	40338	ExpressionStatement	"ZVAL_DOUBLE ( & tmp , d )"	1732:1:45159:45179	40327	2	True				
ANR	40339	CallExpression	"ZVAL_DOUBLE ( & tmp , d )"		40327	0					
ANR	40340	Callee	ZVAL_DOUBLE		40327	0					
ANR	40341	Identifier	ZVAL_DOUBLE		40327	0					
ANR	40342	ArgumentList	& tmp		40327	1					
ANR	40343	Argument	& tmp		40327	0					
ANR	40344	UnaryOperationExpression	& tmp		40327	0					
ANR	40345	UnaryOperator	&		40327	0					
ANR	40346	Identifier	tmp		40327	1					
ANR	40347	Argument	d		40327	1					
ANR	40348	Identifier	d		40327	0					
ANR	40349	ExpressionStatement	"ZVAL_STRINGL ( & z_key , key , key_len )"	1733:1:45182:45216	40327	3	True				
ANR	40350	CallExpression	"ZVAL_STRINGL ( & z_key , key , key_len )"		40327	0					
ANR	40351	Callee	ZVAL_STRINGL		40327	0					
ANR	40352	Identifier	ZVAL_STRINGL		40327	0					
ANR	40353	ArgumentList	& z_key		40327	1					
ANR	40354	Argument	& z_key		40327	0					
ANR	40355	UnaryOperationExpression	& z_key		40327	0					
ANR	40356	UnaryOperator	&		40327	0					
ANR	40357	Identifier	z_key		40327	1					
ANR	40358	Argument	key		40327	1					
ANR	40359	Identifier	key		40327	0					
ANR	40360	Argument	key_len		40327	2					
ANR	40361	Identifier	key_len		40327	0					
ANR	40362	ExpressionStatement	"Z_OBJ_HANDLER_P ( arg , write_property ) ( arg , & z_key , & tmp , NULL )"	1734:1:45219:45280	40327	4	True				
ANR	40363	CallExpression	"Z_OBJ_HANDLER_P ( arg , write_property ) ( arg , & z_key , & tmp , NULL )"		40327	0					
ANR	40364	Callee	"Z_OBJ_HANDLER_P ( arg , write_property )"		40327	0					
ANR	40365	CallExpression	"Z_OBJ_HANDLER_P ( arg , write_property )"		40327	0					
ANR	40366	Callee	Z_OBJ_HANDLER_P		40327	0					
ANR	40367	Identifier	Z_OBJ_HANDLER_P		40327	0					
ANR	40368	ArgumentList	arg		40327	1					
ANR	40369	Argument	arg		40327	0					
ANR	40370	Identifier	arg		40327	0					
ANR	40371	Argument	write_property		40327	1					
ANR	40372	Identifier	write_property		40327	0					
ANR	40373	ArgumentList	arg		40327	1					
ANR	40374	Argument	arg		40327	0					
ANR	40375	Identifier	arg		40327	0					
ANR	40376	Argument	& z_key		40327	1					
ANR	40377	UnaryOperationExpression	& z_key		40327	0					
ANR	40378	UnaryOperator	&		40327	0					
ANR	40379	Identifier	z_key		40327	1					
ANR	40380	Argument	& tmp		40327	2					
ANR	40381	UnaryOperationExpression	& tmp		40327	0					
ANR	40382	UnaryOperator	&		40327	0					
ANR	40383	Identifier	tmp		40327	1					
ANR	40384	Argument	NULL		40327	3					
ANR	40385	Identifier	NULL		40327	0					
ANR	40386	ExpressionStatement	zval_ptr_dtor ( & tmp )	1735:1:45283:45302	40327	5	True				
ANR	40387	CallExpression	zval_ptr_dtor ( & tmp )		40327	0					
ANR	40388	Callee	zval_ptr_dtor		40327	0					
ANR	40389	Identifier	zval_ptr_dtor		40327	0					
ANR	40390	ArgumentList	& tmp		40327	1					
ANR	40391	Argument	& tmp		40327	0					
ANR	40392	UnaryOperationExpression	& tmp		40327	0					
ANR	40393	UnaryOperator	&		40327	0					
ANR	40394	Identifier	tmp		40327	1					
ANR	40395	ExpressionStatement	zval_ptr_dtor ( & z_key )	1736:1:45349:45370	40327	6	True				
ANR	40396	CallExpression	zval_ptr_dtor ( & z_key )		40327	0					
ANR	40397	Callee	zval_ptr_dtor		40327	0					
ANR	40398	Identifier	zval_ptr_dtor		40327	0					
ANR	40399	ArgumentList	& z_key		40327	1					
ANR	40400	Argument	& z_key		40327	0					
ANR	40401	UnaryOperationExpression	& z_key		40327	0					
ANR	40402	UnaryOperator	&		40327	0					
ANR	40403	Identifier	z_key		40327	1					
ANR	40404	ReturnStatement	return SUCCESS ;	1737:1:45373:45387	40327	7	True				
ANR	40405	Identifier	SUCCESS		40327	0					
ANR	40406	ReturnType	ZEND_API int		40327	1					
ANR	40407	Identifier	add_property_double_ex		40327	2					
ANR	40408	ParameterList	"zval * arg , const char * key , size_t key_len , double d"		40327	3					
ANR	40409	Parameter	zval * arg	1727:36:45067:45075	40327	0	True				
ANR	40410	ParameterType	zval *		40327	0					
ANR	40411	Identifier	arg		40327	1					
ANR	40412	Parameter	const char * key	1727:47:45078:45092	40327	1	True				
ANR	40413	ParameterType	const char *		40327	0					
ANR	40414	Identifier	key		40327	1					
ANR	40415	Parameter	size_t key_len	1727:64:45095:45108	40327	2	True				
ANR	40416	ParameterType	size_t		40327	0					
ANR	40417	Identifier	key_len		40327	1					
ANR	40418	Parameter	double d	1727:80:45111:45118	40327	3	True				
ANR	40419	ParameterType	double		40327	0					
ANR	40420	Identifier	d		40327	1					
ANR	40421	CFGEntryNode	ENTRY		40327		True				
ANR	40422	CFGExitNode	EXIT		40327		True				
ANR	40423	Symbol	NULL		40327						
ANR	40424	Symbol	SUCCESS		40327						
ANR	40425	Symbol	d		40327						
ANR	40426	Symbol	tmp		40327						
ANR	40427	Symbol	arg		40327						
ANR	40428	Symbol	write_property		40327						
ANR	40429	Symbol	& tmp		40327						
ANR	40430	Symbol	& z_key		40327						
ANR	40431	Symbol	key		40327						
ANR	40432	Symbol	z_key		40327						
ANR	40433	Symbol	key_len		40327						
ANR	40434	Function	add_property_str_ex	1741:0:45402:45764							
ANR	40435	FunctionDef	"add_property_str_ex (zval * arg , const char * key , size_t key_len , zend_string * str)"		40434	0					
ANR	40436	CompoundStatement		1742:0:45507:45764	40434	0					
ANR	40437	IdentifierDeclStatement	zval tmp ;	1743:1:45510:45518	40434	0	True				
ANR	40438	IdentifierDecl	tmp		40434	0					
ANR	40439	IdentifierDeclType	zval		40434	0					
ANR	40440	Identifier	tmp		40434	1					
ANR	40441	IdentifierDeclStatement	zval z_key ;	1744:1:45521:45531	40434	1	True				
ANR	40442	IdentifierDecl	z_key		40434	0					
ANR	40443	IdentifierDeclType	zval		40434	0					
ANR	40444	Identifier	z_key		40434	1					
ANR	40445	ExpressionStatement	"ZVAL_STR ( & tmp , str )"	1746:1:45535:45554	40434	2	True				
ANR	40446	CallExpression	"ZVAL_STR ( & tmp , str )"		40434	0					
ANR	40447	Callee	ZVAL_STR		40434	0					
ANR	40448	Identifier	ZVAL_STR		40434	0					
ANR	40449	ArgumentList	& tmp		40434	1					
ANR	40450	Argument	& tmp		40434	0					
ANR	40451	UnaryOperationExpression	& tmp		40434	0					
ANR	40452	UnaryOperator	&		40434	0					
ANR	40453	Identifier	tmp		40434	1					
ANR	40454	Argument	str		40434	1					
ANR	40455	Identifier	str		40434	0					
ANR	40456	ExpressionStatement	"ZVAL_STRINGL ( & z_key , key , key_len )"	1747:1:45557:45591	40434	3	True				
ANR	40457	CallExpression	"ZVAL_STRINGL ( & z_key , key , key_len )"		40434	0					
ANR	40458	Callee	ZVAL_STRINGL		40434	0					
ANR	40459	Identifier	ZVAL_STRINGL		40434	0					
ANR	40460	ArgumentList	& z_key		40434	1					
ANR	40461	Argument	& z_key		40434	0					
ANR	40462	UnaryOperationExpression	& z_key		40434	0					
ANR	40463	UnaryOperator	&		40434	0					
ANR	40464	Identifier	z_key		40434	1					
ANR	40465	Argument	key		40434	1					
ANR	40466	Identifier	key		40434	0					
ANR	40467	Argument	key_len		40434	2					
ANR	40468	Identifier	key_len		40434	0					
ANR	40469	ExpressionStatement	"Z_OBJ_HANDLER_P ( arg , write_property ) ( arg , & z_key , & tmp , NULL )"	1748:1:45594:45655	40434	4	True				
ANR	40470	CallExpression	"Z_OBJ_HANDLER_P ( arg , write_property ) ( arg , & z_key , & tmp , NULL )"		40434	0					
ANR	40471	Callee	"Z_OBJ_HANDLER_P ( arg , write_property )"		40434	0					
ANR	40472	CallExpression	"Z_OBJ_HANDLER_P ( arg , write_property )"		40434	0					
ANR	40473	Callee	Z_OBJ_HANDLER_P		40434	0					
ANR	40474	Identifier	Z_OBJ_HANDLER_P		40434	0					
ANR	40475	ArgumentList	arg		40434	1					
ANR	40476	Argument	arg		40434	0					
ANR	40477	Identifier	arg		40434	0					
ANR	40478	Argument	write_property		40434	1					
ANR	40479	Identifier	write_property		40434	0					
ANR	40480	ArgumentList	arg		40434	1					
ANR	40481	Argument	arg		40434	0					
ANR	40482	Identifier	arg		40434	0					
ANR	40483	Argument	& z_key		40434	1					
ANR	40484	UnaryOperationExpression	& z_key		40434	0					
ANR	40485	UnaryOperator	&		40434	0					
ANR	40486	Identifier	z_key		40434	1					
ANR	40487	Argument	& tmp		40434	2					
ANR	40488	UnaryOperationExpression	& tmp		40434	0					
ANR	40489	UnaryOperator	&		40434	0					
ANR	40490	Identifier	tmp		40434	1					
ANR	40491	Argument	NULL		40434	3					
ANR	40492	Identifier	NULL		40434	0					
ANR	40493	ExpressionStatement	zval_ptr_dtor ( & tmp )	1749:1:45658:45677	40434	5	True				
ANR	40494	CallExpression	zval_ptr_dtor ( & tmp )		40434	0					
ANR	40495	Callee	zval_ptr_dtor		40434	0					
ANR	40496	Identifier	zval_ptr_dtor		40434	0					
ANR	40497	ArgumentList	& tmp		40434	1					
ANR	40498	Argument	& tmp		40434	0					
ANR	40499	UnaryOperationExpression	& tmp		40434	0					
ANR	40500	UnaryOperator	&		40434	0					
ANR	40501	Identifier	tmp		40434	1					
ANR	40502	ExpressionStatement	zval_ptr_dtor ( & z_key )	1750:1:45724:45745	40434	6	True				
ANR	40503	CallExpression	zval_ptr_dtor ( & z_key )		40434	0					
ANR	40504	Callee	zval_ptr_dtor		40434	0					
ANR	40505	Identifier	zval_ptr_dtor		40434	0					
ANR	40506	ArgumentList	& z_key		40434	1					
ANR	40507	Argument	& z_key		40434	0					
ANR	40508	UnaryOperationExpression	& z_key		40434	0					
ANR	40509	UnaryOperator	&		40434	0					
ANR	40510	Identifier	z_key		40434	1					
ANR	40511	ReturnStatement	return SUCCESS ;	1751:1:45748:45762	40434	7	True				
ANR	40512	Identifier	SUCCESS		40434	0					
ANR	40513	ReturnType	ZEND_API int		40434	1					
ANR	40514	Identifier	add_property_str_ex		40434	2					
ANR	40515	ParameterList	"zval * arg , const char * key , size_t key_len , zend_string * str"		40434	3					
ANR	40516	Parameter	zval * arg	1741:33:45435:45443	40434	0	True				
ANR	40517	ParameterType	zval *		40434	0					
ANR	40518	Identifier	arg		40434	1					
ANR	40519	Parameter	const char * key	1741:44:45446:45460	40434	1	True				
ANR	40520	ParameterType	const char *		40434	0					
ANR	40521	Identifier	key		40434	1					
ANR	40522	Parameter	size_t key_len	1741:61:45463:45476	40434	2	True				
ANR	40523	ParameterType	size_t		40434	0					
ANR	40524	Identifier	key_len		40434	1					
ANR	40525	Parameter	zend_string * str	1741:77:45479:45494	40434	3	True				
ANR	40526	ParameterType	zend_string *		40434	0					
ANR	40527	Identifier	str		40434	1					
ANR	40528	CFGEntryNode	ENTRY		40434		True				
ANR	40529	CFGExitNode	EXIT		40434		True				
ANR	40530	Symbol	str		40434						
ANR	40531	Symbol	NULL		40434						
ANR	40532	Symbol	SUCCESS		40434						
ANR	40533	Symbol	tmp		40434						
ANR	40534	Symbol	arg		40434						
ANR	40535	Symbol	write_property		40434						
ANR	40536	Symbol	& tmp		40434						
ANR	40537	Symbol	& z_key		40434						
ANR	40538	Symbol	key		40434						
ANR	40539	Symbol	z_key		40434						
ANR	40540	Symbol	key_len		40434						
ANR	40541	Function	add_property_string_ex	1755:0:45777:46144							
ANR	40542	FunctionDef	"add_property_string_ex (zval * arg , const char * key , size_t key_len , const char * str)"		40541	0					
ANR	40543	CompoundStatement		1756:0:45884:46144	40541	0					
ANR	40544	IdentifierDeclStatement	zval tmp ;	1757:1:45887:45895	40541	0	True				
ANR	40545	IdentifierDecl	tmp		40541	0					
ANR	40546	IdentifierDeclType	zval		40541	0					
ANR	40547	Identifier	tmp		40541	1					
ANR	40548	IdentifierDeclStatement	zval z_key ;	1758:1:45898:45908	40541	1	True				
ANR	40549	IdentifierDecl	z_key		40541	0					
ANR	40550	IdentifierDeclType	zval		40541	0					
ANR	40551	Identifier	z_key		40541	1					
ANR	40552	ExpressionStatement	"ZVAL_STRING ( & tmp , str )"	1760:1:45912:45934	40541	2	True				
ANR	40553	CallExpression	"ZVAL_STRING ( & tmp , str )"		40541	0					
ANR	40554	Callee	ZVAL_STRING		40541	0					
ANR	40555	Identifier	ZVAL_STRING		40541	0					
ANR	40556	ArgumentList	& tmp		40541	1					
ANR	40557	Argument	& tmp		40541	0					
ANR	40558	UnaryOperationExpression	& tmp		40541	0					
ANR	40559	UnaryOperator	&		40541	0					
ANR	40560	Identifier	tmp		40541	1					
ANR	40561	Argument	str		40541	1					
ANR	40562	Identifier	str		40541	0					
ANR	40563	ExpressionStatement	"ZVAL_STRINGL ( & z_key , key , key_len )"	1761:1:45937:45971	40541	3	True				
ANR	40564	CallExpression	"ZVAL_STRINGL ( & z_key , key , key_len )"		40541	0					
ANR	40565	Callee	ZVAL_STRINGL		40541	0					
ANR	40566	Identifier	ZVAL_STRINGL		40541	0					
ANR	40567	ArgumentList	& z_key		40541	1					
ANR	40568	Argument	& z_key		40541	0					
ANR	40569	UnaryOperationExpression	& z_key		40541	0					
ANR	40570	UnaryOperator	&		40541	0					
ANR	40571	Identifier	z_key		40541	1					
ANR	40572	Argument	key		40541	1					
ANR	40573	Identifier	key		40541	0					
ANR	40574	Argument	key_len		40541	2					
ANR	40575	Identifier	key_len		40541	0					
ANR	40576	ExpressionStatement	"Z_OBJ_HANDLER_P ( arg , write_property ) ( arg , & z_key , & tmp , NULL )"	1762:1:45974:46035	40541	4	True				
ANR	40577	CallExpression	"Z_OBJ_HANDLER_P ( arg , write_property ) ( arg , & z_key , & tmp , NULL )"		40541	0					
ANR	40578	Callee	"Z_OBJ_HANDLER_P ( arg , write_property )"		40541	0					
ANR	40579	CallExpression	"Z_OBJ_HANDLER_P ( arg , write_property )"		40541	0					
ANR	40580	Callee	Z_OBJ_HANDLER_P		40541	0					
ANR	40581	Identifier	Z_OBJ_HANDLER_P		40541	0					
ANR	40582	ArgumentList	arg		40541	1					
ANR	40583	Argument	arg		40541	0					
ANR	40584	Identifier	arg		40541	0					
ANR	40585	Argument	write_property		40541	1					
ANR	40586	Identifier	write_property		40541	0					
ANR	40587	ArgumentList	arg		40541	1					
ANR	40588	Argument	arg		40541	0					
ANR	40589	Identifier	arg		40541	0					
ANR	40590	Argument	& z_key		40541	1					
ANR	40591	UnaryOperationExpression	& z_key		40541	0					
ANR	40592	UnaryOperator	&		40541	0					
ANR	40593	Identifier	z_key		40541	1					
ANR	40594	Argument	& tmp		40541	2					
ANR	40595	UnaryOperationExpression	& tmp		40541	0					
ANR	40596	UnaryOperator	&		40541	0					
ANR	40597	Identifier	tmp		40541	1					
ANR	40598	Argument	NULL		40541	3					
ANR	40599	Identifier	NULL		40541	0					
ANR	40600	ExpressionStatement	zval_ptr_dtor ( & tmp )	1763:1:46038:46057	40541	5	True				
ANR	40601	CallExpression	zval_ptr_dtor ( & tmp )		40541	0					
ANR	40602	Callee	zval_ptr_dtor		40541	0					
ANR	40603	Identifier	zval_ptr_dtor		40541	0					
ANR	40604	ArgumentList	& tmp		40541	1					
ANR	40605	Argument	& tmp		40541	0					
ANR	40606	UnaryOperationExpression	& tmp		40541	0					
ANR	40607	UnaryOperator	&		40541	0					
ANR	40608	Identifier	tmp		40541	1					
ANR	40609	ExpressionStatement	zval_ptr_dtor ( & z_key )	1764:1:46104:46125	40541	6	True				
ANR	40610	CallExpression	zval_ptr_dtor ( & z_key )		40541	0					
ANR	40611	Callee	zval_ptr_dtor		40541	0					
ANR	40612	Identifier	zval_ptr_dtor		40541	0					
ANR	40613	ArgumentList	& z_key		40541	1					
ANR	40614	Argument	& z_key		40541	0					
ANR	40615	UnaryOperationExpression	& z_key		40541	0					
ANR	40616	UnaryOperator	&		40541	0					
ANR	40617	Identifier	z_key		40541	1					
ANR	40618	ReturnStatement	return SUCCESS ;	1765:1:46128:46142	40541	7	True				
ANR	40619	Identifier	SUCCESS		40541	0					
ANR	40620	ReturnType	ZEND_API int		40541	1					
ANR	40621	Identifier	add_property_string_ex		40541	2					
ANR	40622	ParameterList	"zval * arg , const char * key , size_t key_len , const char * str"		40541	3					
ANR	40623	Parameter	zval * arg	1755:36:45813:45821	40541	0	True				
ANR	40624	ParameterType	zval *		40541	0					
ANR	40625	Identifier	arg		40541	1					
ANR	40626	Parameter	const char * key	1755:47:45824:45838	40541	1	True				
ANR	40627	ParameterType	const char *		40541	0					
ANR	40628	Identifier	key		40541	1					
ANR	40629	Parameter	size_t key_len	1755:64:45841:45854	40541	2	True				
ANR	40630	ParameterType	size_t		40541	0					
ANR	40631	Identifier	key_len		40541	1					
ANR	40632	Parameter	const char * str	1755:80:45857:45871	40541	3	True				
ANR	40633	ParameterType	const char *		40541	0					
ANR	40634	Identifier	str		40541	1					
ANR	40635	CFGEntryNode	ENTRY		40541		True				
ANR	40636	CFGExitNode	EXIT		40541		True				
ANR	40637	Symbol	str		40541						
ANR	40638	Symbol	NULL		40541						
ANR	40639	Symbol	SUCCESS		40541						
ANR	40640	Symbol	tmp		40541						
ANR	40641	Symbol	arg		40541						
ANR	40642	Symbol	write_property		40541						
ANR	40643	Symbol	& tmp		40541						
ANR	40644	Symbol	& z_key		40541						
ANR	40645	Symbol	key		40541						
ANR	40646	Symbol	z_key		40541						
ANR	40647	Symbol	key_len		40541						
ANR	40648	Function	add_property_stringl_ex	1769:0:46157:46549							
ANR	40649	FunctionDef	"add_property_stringl_ex (zval * arg , const char * key , size_t key_len , const char * str , size_t length)"		40648	0					
ANR	40650	CompoundStatement		1770:0:46280:46549	40648	0					
ANR	40651	IdentifierDeclStatement	zval tmp ;	1771:1:46283:46291	40648	0	True				
ANR	40652	IdentifierDecl	tmp		40648	0					
ANR	40653	IdentifierDeclType	zval		40648	0					
ANR	40654	Identifier	tmp		40648	1					
ANR	40655	IdentifierDeclStatement	zval z_key ;	1772:1:46294:46304	40648	1	True				
ANR	40656	IdentifierDecl	z_key		40648	0					
ANR	40657	IdentifierDeclType	zval		40648	0					
ANR	40658	Identifier	z_key		40648	1					
ANR	40659	ExpressionStatement	"ZVAL_STRINGL ( & tmp , str , length )"	1774:1:46308:46339	40648	2	True				
ANR	40660	CallExpression	"ZVAL_STRINGL ( & tmp , str , length )"		40648	0					
ANR	40661	Callee	ZVAL_STRINGL		40648	0					
ANR	40662	Identifier	ZVAL_STRINGL		40648	0					
ANR	40663	ArgumentList	& tmp		40648	1					
ANR	40664	Argument	& tmp		40648	0					
ANR	40665	UnaryOperationExpression	& tmp		40648	0					
ANR	40666	UnaryOperator	&		40648	0					
ANR	40667	Identifier	tmp		40648	1					
ANR	40668	Argument	str		40648	1					
ANR	40669	Identifier	str		40648	0					
ANR	40670	Argument	length		40648	2					
ANR	40671	Identifier	length		40648	0					
ANR	40672	ExpressionStatement	"ZVAL_STRINGL ( & z_key , key , key_len )"	1775:1:46342:46376	40648	3	True				
ANR	40673	CallExpression	"ZVAL_STRINGL ( & z_key , key , key_len )"		40648	0					
ANR	40674	Callee	ZVAL_STRINGL		40648	0					
ANR	40675	Identifier	ZVAL_STRINGL		40648	0					
ANR	40676	ArgumentList	& z_key		40648	1					
ANR	40677	Argument	& z_key		40648	0					
ANR	40678	UnaryOperationExpression	& z_key		40648	0					
ANR	40679	UnaryOperator	&		40648	0					
ANR	40680	Identifier	z_key		40648	1					
ANR	40681	Argument	key		40648	1					
ANR	40682	Identifier	key		40648	0					
ANR	40683	Argument	key_len		40648	2					
ANR	40684	Identifier	key_len		40648	0					
ANR	40685	ExpressionStatement	"Z_OBJ_HANDLER_P ( arg , write_property ) ( arg , & z_key , & tmp , NULL )"	1776:1:46379:46440	40648	4	True				
ANR	40686	CallExpression	"Z_OBJ_HANDLER_P ( arg , write_property ) ( arg , & z_key , & tmp , NULL )"		40648	0					
ANR	40687	Callee	"Z_OBJ_HANDLER_P ( arg , write_property )"		40648	0					
ANR	40688	CallExpression	"Z_OBJ_HANDLER_P ( arg , write_property )"		40648	0					
ANR	40689	Callee	Z_OBJ_HANDLER_P		40648	0					
ANR	40690	Identifier	Z_OBJ_HANDLER_P		40648	0					
ANR	40691	ArgumentList	arg		40648	1					
ANR	40692	Argument	arg		40648	0					
ANR	40693	Identifier	arg		40648	0					
ANR	40694	Argument	write_property		40648	1					
ANR	40695	Identifier	write_property		40648	0					
ANR	40696	ArgumentList	arg		40648	1					
ANR	40697	Argument	arg		40648	0					
ANR	40698	Identifier	arg		40648	0					
ANR	40699	Argument	& z_key		40648	1					
ANR	40700	UnaryOperationExpression	& z_key		40648	0					
ANR	40701	UnaryOperator	&		40648	0					
ANR	40702	Identifier	z_key		40648	1					
ANR	40703	Argument	& tmp		40648	2					
ANR	40704	UnaryOperationExpression	& tmp		40648	0					
ANR	40705	UnaryOperator	&		40648	0					
ANR	40706	Identifier	tmp		40648	1					
ANR	40707	Argument	NULL		40648	3					
ANR	40708	Identifier	NULL		40648	0					
ANR	40709	ExpressionStatement	zval_ptr_dtor ( & tmp )	1777:1:46443:46462	40648	5	True				
ANR	40710	CallExpression	zval_ptr_dtor ( & tmp )		40648	0					
ANR	40711	Callee	zval_ptr_dtor		40648	0					
ANR	40712	Identifier	zval_ptr_dtor		40648	0					
ANR	40713	ArgumentList	& tmp		40648	1					
ANR	40714	Argument	& tmp		40648	0					
ANR	40715	UnaryOperationExpression	& tmp		40648	0					
ANR	40716	UnaryOperator	&		40648	0					
ANR	40717	Identifier	tmp		40648	1					
ANR	40718	ExpressionStatement	zval_ptr_dtor ( & z_key )	1778:1:46509:46530	40648	6	True				
ANR	40719	CallExpression	zval_ptr_dtor ( & z_key )		40648	0					
ANR	40720	Callee	zval_ptr_dtor		40648	0					
ANR	40721	Identifier	zval_ptr_dtor		40648	0					
ANR	40722	ArgumentList	& z_key		40648	1					
ANR	40723	Argument	& z_key		40648	0					
ANR	40724	UnaryOperationExpression	& z_key		40648	0					
ANR	40725	UnaryOperator	&		40648	0					
ANR	40726	Identifier	z_key		40648	1					
ANR	40727	ReturnStatement	return SUCCESS ;	1779:1:46533:46547	40648	7	True				
ANR	40728	Identifier	SUCCESS		40648	0					
ANR	40729	ReturnType	ZEND_API int		40648	1					
ANR	40730	Identifier	add_property_stringl_ex		40648	2					
ANR	40731	ParameterList	"zval * arg , const char * key , size_t key_len , const char * str , size_t length"		40648	3					
ANR	40732	Parameter	zval * arg	1769:37:46194:46202	40648	0	True				
ANR	40733	ParameterType	zval *		40648	0					
ANR	40734	Identifier	arg		40648	1					
ANR	40735	Parameter	const char * key	1769:48:46205:46219	40648	1	True				
ANR	40736	ParameterType	const char *		40648	0					
ANR	40737	Identifier	key		40648	1					
ANR	40738	Parameter	size_t key_len	1769:65:46222:46235	40648	2	True				
ANR	40739	ParameterType	size_t		40648	0					
ANR	40740	Identifier	key_len		40648	1					
ANR	40741	Parameter	const char * str	1769:81:46238:46252	40648	3	True				
ANR	40742	ParameterType	const char *		40648	0					
ANR	40743	Identifier	str		40648	1					
ANR	40744	Parameter	size_t length	1769:98:46255:46267	40648	4	True				
ANR	40745	ParameterType	size_t		40648	0					
ANR	40746	Identifier	length		40648	1					
ANR	40747	CFGEntryNode	ENTRY		40648		True				
ANR	40748	CFGExitNode	EXIT		40648		True				
ANR	40749	Symbol	str		40648						
ANR	40750	Symbol	NULL		40648						
ANR	40751	Symbol	SUCCESS		40648						
ANR	40752	Symbol	tmp		40648						
ANR	40753	Symbol	arg		40648						
ANR	40754	Symbol	length		40648						
ANR	40755	Symbol	write_property		40648						
ANR	40756	Symbol	& tmp		40648						
ANR	40757	Symbol	& z_key		40648						
ANR	40758	Symbol	key		40648						
ANR	40759	Symbol	z_key		40648						
ANR	40760	Symbol	key_len		40648						
ANR	40761	Function	add_property_zval_ex	1783:0:46562:46822							
ANR	40762	FunctionDef	"add_property_zval_ex (zval * arg , const char * key , size_t key_len , zval * value)"		40761	0					
ANR	40763	CompoundStatement		1784:0:46663:46822	40761	0					
ANR	40764	IdentifierDeclStatement	zval z_key ;	1785:1:46666:46676	40761	0	True				
ANR	40765	IdentifierDecl	z_key		40761	0					
ANR	40766	IdentifierDeclType	zval		40761	0					
ANR	40767	Identifier	z_key		40761	1					
ANR	40768	ExpressionStatement	"ZVAL_STRINGL ( & z_key , key , key_len )"	1787:1:46680:46714	40761	1	True				
ANR	40769	CallExpression	"ZVAL_STRINGL ( & z_key , key , key_len )"		40761	0					
ANR	40770	Callee	ZVAL_STRINGL		40761	0					
ANR	40771	Identifier	ZVAL_STRINGL		40761	0					
ANR	40772	ArgumentList	& z_key		40761	1					
ANR	40773	Argument	& z_key		40761	0					
ANR	40774	UnaryOperationExpression	& z_key		40761	0					
ANR	40775	UnaryOperator	&		40761	0					
ANR	40776	Identifier	z_key		40761	1					
ANR	40777	Argument	key		40761	1					
ANR	40778	Identifier	key		40761	0					
ANR	40779	Argument	key_len		40761	2					
ANR	40780	Identifier	key_len		40761	0					
ANR	40781	ExpressionStatement	"Z_OBJ_HANDLER_P ( arg , write_property ) ( arg , & z_key , value , NULL )"	1788:1:46717:46779	40761	2	True				
ANR	40782	CallExpression	"Z_OBJ_HANDLER_P ( arg , write_property ) ( arg , & z_key , value , NULL )"		40761	0					
ANR	40783	Callee	"Z_OBJ_HANDLER_P ( arg , write_property )"		40761	0					
ANR	40784	CallExpression	"Z_OBJ_HANDLER_P ( arg , write_property )"		40761	0					
ANR	40785	Callee	Z_OBJ_HANDLER_P		40761	0					
ANR	40786	Identifier	Z_OBJ_HANDLER_P		40761	0					
ANR	40787	ArgumentList	arg		40761	1					
ANR	40788	Argument	arg		40761	0					
ANR	40789	Identifier	arg		40761	0					
ANR	40790	Argument	write_property		40761	1					
ANR	40791	Identifier	write_property		40761	0					
ANR	40792	ArgumentList	arg		40761	1					
ANR	40793	Argument	arg		40761	0					
ANR	40794	Identifier	arg		40761	0					
ANR	40795	Argument	& z_key		40761	1					
ANR	40796	UnaryOperationExpression	& z_key		40761	0					
ANR	40797	UnaryOperator	&		40761	0					
ANR	40798	Identifier	z_key		40761	1					
ANR	40799	Argument	value		40761	2					
ANR	40800	Identifier	value		40761	0					
ANR	40801	Argument	NULL		40761	3					
ANR	40802	Identifier	NULL		40761	0					
ANR	40803	ExpressionStatement	zval_ptr_dtor ( & z_key )	1789:1:46782:46803	40761	3	True				
ANR	40804	CallExpression	zval_ptr_dtor ( & z_key )		40761	0					
ANR	40805	Callee	zval_ptr_dtor		40761	0					
ANR	40806	Identifier	zval_ptr_dtor		40761	0					
ANR	40807	ArgumentList	& z_key		40761	1					
ANR	40808	Argument	& z_key		40761	0					
ANR	40809	UnaryOperationExpression	& z_key		40761	0					
ANR	40810	UnaryOperator	&		40761	0					
ANR	40811	Identifier	z_key		40761	1					
ANR	40812	ReturnStatement	return SUCCESS ;	1790:1:46806:46820	40761	4	True				
ANR	40813	Identifier	SUCCESS		40761	0					
ANR	40814	ReturnType	ZEND_API int		40761	1					
ANR	40815	Identifier	add_property_zval_ex		40761	2					
ANR	40816	ParameterList	"zval * arg , const char * key , size_t key_len , zval * value"		40761	3					
ANR	40817	Parameter	zval * arg	1783:34:46596:46604	40761	0	True				
ANR	40818	ParameterType	zval *		40761	0					
ANR	40819	Identifier	arg		40761	1					
ANR	40820	Parameter	const char * key	1783:45:46607:46621	40761	1	True				
ANR	40821	ParameterType	const char *		40761	0					
ANR	40822	Identifier	key		40761	1					
ANR	40823	Parameter	size_t key_len	1783:62:46624:46637	40761	2	True				
ANR	40824	ParameterType	size_t		40761	0					
ANR	40825	Identifier	key_len		40761	1					
ANR	40826	Parameter	zval * value	1783:78:46640:46650	40761	3	True				
ANR	40827	ParameterType	zval *		40761	0					
ANR	40828	Identifier	value		40761	1					
ANR	40829	CFGEntryNode	ENTRY		40761		True				
ANR	40830	CFGExitNode	EXIT		40761		True				
ANR	40831	Symbol	NULL		40761						
ANR	40832	Symbol	SUCCESS		40761						
ANR	40833	Symbol	arg		40761						
ANR	40834	Symbol	write_property		40761						
ANR	40835	Symbol	& z_key		40761						
ANR	40836	Symbol	value		40761						
ANR	40837	Symbol	key		40761						
ANR	40838	Symbol	z_key		40761						
ANR	40839	Symbol	key_len		40761						
ANR	40840	Function	zend_startup_module_ex	1794:0:46835:48444							
ANR	40841	FunctionDef	zend_startup_module_ex (zend_module_entry * module)		40840	0					
ANR	40842	CompoundStatement		1795:0:46908:48444	40840	0					
ANR	40843	IdentifierDeclStatement	size_t name_len ;	1796:1:46911:46926	40840	0	True				
ANR	40844	IdentifierDecl	name_len		40840	0					
ANR	40845	IdentifierDeclType	size_t		40840	0					
ANR	40846	Identifier	name_len		40840	1					
ANR	40847	IdentifierDeclStatement	zend_string * lcname ;	1797:1:46929:46948	40840	1	True				
ANR	40848	IdentifierDecl	* lcname		40840	0					
ANR	40849	IdentifierDeclType	zend_string *		40840	0					
ANR	40850	Identifier	lcname		40840	1					
ANR	40851	IfStatement	if ( module -> module_started )		40840	2					
ANR	40852	Condition	module -> module_started	1799:5:46956:46977	40840	0	True				
ANR	40853	PtrMemberAccess	module -> module_started		40840	0					
ANR	40854	Identifier	module		40840	0					
ANR	40855	Identifier	module_started		40840	1					
ANR	40856	CompoundStatement		5:29:71:71	40840	1					
ANR	40857	ReturnStatement	return SUCCESS ;	1800:2:46984:46998	40840	0	True				
ANR	40858	Identifier	SUCCESS		40840	0					
ANR	40859	ExpressionStatement	module -> module_started = 1	1802:1:47004:47030	40840	3	True				
ANR	40860	AssignmentExpression	module -> module_started = 1		40840	0		=			
ANR	40861	PtrMemberAccess	module -> module_started		40840	0					
ANR	40862	Identifier	module		40840	0					
ANR	40863	Identifier	module_started		40840	1					
ANR	40864	PrimaryExpression	1		40840	1					
ANR	40865	IfStatement	if ( module -> deps )		40840	4					
ANR	40866	Condition	module -> deps	1805:5:47071:47082	40840	0	True				
ANR	40867	PtrMemberAccess	module -> deps		40840	0					
ANR	40868	Identifier	module		40840	0					
ANR	40869	Identifier	deps		40840	1					
ANR	40870	CompoundStatement		12:2:180:221	40840	1					
ANR	40871	IdentifierDeclStatement	const zend_module_dep * dep = module -> deps ;	1806:2:47089:47130	40840	0	True				
ANR	40872	IdentifierDecl	* dep = module -> deps		40840	0					
ANR	40873	IdentifierDeclType	const zend_module_dep *		40840	0					
ANR	40874	Identifier	dep		40840	1					
ANR	40875	AssignmentExpression	* dep = module -> deps		40840	2		=			
ANR	40876	Identifier	dep		40840	0					
ANR	40877	PtrMemberAccess	module -> deps		40840	1					
ANR	40878	Identifier	module		40840	0					
ANR	40879	Identifier	deps		40840	1					
ANR	40880	WhileStatement	while ( dep -> name )		40840	1					
ANR	40881	Condition	dep -> name	1808:9:47142:47150	40840	0	True				
ANR	40882	PtrMemberAccess	dep -> name		40840	0					
ANR	40883	Identifier	dep		40840	0					
ANR	40884	Identifier	name		40840	1					
ANR	40885	CompoundStatement		14:20:244:244	40840	1					
ANR	40886	IfStatement	if ( dep -> type == MODULE_DEP_REQUIRED )		40840	0					
ANR	40887	Condition	dep -> type == MODULE_DEP_REQUIRED	1809:7:47162:47193	40840	0	True				
ANR	40888	EqualityExpression	dep -> type == MODULE_DEP_REQUIRED		40840	0		==			
ANR	40889	PtrMemberAccess	dep -> type		40840	0					
ANR	40890	Identifier	dep		40840	0					
ANR	40891	Identifier	type		40840	1					
ANR	40892	Identifier	MODULE_DEP_REQUIRED		40840	1					
ANR	40893	CompoundStatement		16:4:293:319	40840	1					
ANR	40894	IdentifierDeclStatement	zend_module_entry * req_mod ;	1810:4:47202:47228	40840	0	True				
ANR	40895	IdentifierDecl	* req_mod		40840	0					
ANR	40896	IdentifierDeclType	zend_module_entry *		40840	0					
ANR	40897	Identifier	req_mod		40840	1					
ANR	40898	ExpressionStatement	name_len = strlen ( dep -> name )	1812:4:47235:47263	40840	1	True				
ANR	40899	AssignmentExpression	name_len = strlen ( dep -> name )		40840	0		=			
ANR	40900	Identifier	name_len		40840	0					
ANR	40901	CallExpression	strlen ( dep -> name )		40840	1					
ANR	40902	Callee	strlen		40840	0					
ANR	40903	Identifier	strlen		40840	0					
ANR	40904	ArgumentList	dep -> name		40840	1					
ANR	40905	Argument	dep -> name		40840	0					
ANR	40906	PtrMemberAccess	dep -> name		40840	0					
ANR	40907	Identifier	dep		40840	0					
ANR	40908	Identifier	name		40840	1					
ANR	40909	ExpressionStatement	"lcname = zend_string_alloc ( name_len , 0 )"	1813:4:47269:47308	40840	2	True				
ANR	40910	AssignmentExpression	"lcname = zend_string_alloc ( name_len , 0 )"		40840	0		=			
ANR	40911	Identifier	lcname		40840	0					
ANR	40912	CallExpression	"zend_string_alloc ( name_len , 0 )"		40840	1					
ANR	40913	Callee	zend_string_alloc		40840	0					
ANR	40914	Identifier	zend_string_alloc		40840	0					
ANR	40915	ArgumentList	name_len		40840	1					
ANR	40916	Argument	name_len		40840	0					
ANR	40917	Identifier	name_len		40840	0					
ANR	40918	Argument	0		40840	1					
ANR	40919	PrimaryExpression	0		40840	0					
ANR	40920	ExpressionStatement	"zend_str_tolower_copy ( ZSTR_VAL ( lcname ) , dep -> name , name_len )"	1814:4:47314:47374	40840	3	True				
ANR	40921	CallExpression	"zend_str_tolower_copy ( ZSTR_VAL ( lcname ) , dep -> name , name_len )"		40840	0					
ANR	40922	Callee	zend_str_tolower_copy		40840	0					
ANR	40923	Identifier	zend_str_tolower_copy		40840	0					
ANR	40924	ArgumentList	ZSTR_VAL ( lcname )		40840	1					
ANR	40925	Argument	ZSTR_VAL ( lcname )		40840	0					
ANR	40926	CallExpression	ZSTR_VAL ( lcname )		40840	0					
ANR	40927	Callee	ZSTR_VAL		40840	0					
ANR	40928	Identifier	ZSTR_VAL		40840	0					
ANR	40929	ArgumentList	lcname		40840	1					
ANR	40930	Argument	lcname		40840	0					
ANR	40931	Identifier	lcname		40840	0					
ANR	40932	Argument	dep -> name		40840	1					
ANR	40933	PtrMemberAccess	dep -> name		40840	0					
ANR	40934	Identifier	dep		40840	0					
ANR	40935	Identifier	name		40840	1					
ANR	40936	Argument	name_len		40840	2					
ANR	40937	Identifier	name_len		40840	0					
ANR	40938	IfStatement	"if ( ( req_mod = zend_hash_find_ptr ( & module_registry , lcname ) ) == NULL || ! req_mod -> module_started )"		40840	4					
ANR	40939	Condition	"( req_mod = zend_hash_find_ptr ( & module_registry , lcname ) ) == NULL || ! req_mod -> module_started"	1816:8:47385:47476	40840	0	True				
ANR	40940	OrExpression	"( req_mod = zend_hash_find_ptr ( & module_registry , lcname ) ) == NULL || ! req_mod -> module_started"		40840	0		||			
ANR	40941	EqualityExpression	"( req_mod = zend_hash_find_ptr ( & module_registry , lcname ) ) == NULL"		40840	0		==			
ANR	40942	AssignmentExpression	"req_mod = zend_hash_find_ptr ( & module_registry , lcname )"		40840	0		=			
ANR	40943	Identifier	req_mod		40840	0					
ANR	40944	CallExpression	"zend_hash_find_ptr ( & module_registry , lcname )"		40840	1					
ANR	40945	Callee	zend_hash_find_ptr		40840	0					
ANR	40946	Identifier	zend_hash_find_ptr		40840	0					
ANR	40947	ArgumentList	& module_registry		40840	1					
ANR	40948	Argument	& module_registry		40840	0					
ANR	40949	UnaryOperationExpression	& module_registry		40840	0					
ANR	40950	UnaryOperator	&		40840	0					
ANR	40951	Identifier	module_registry		40840	1					
ANR	40952	Argument	lcname		40840	1					
ANR	40953	Identifier	lcname		40840	0					
ANR	40954	Identifier	NULL		40840	1					
ANR	40955	UnaryOperationExpression	! req_mod -> module_started		40840	1					
ANR	40956	UnaryOperator	!		40840	0					
ANR	40957	PtrMemberAccess	req_mod -> module_started		40840	1					
ANR	40958	Identifier	req_mod		40840	0					
ANR	40959	Identifier	module_started		40840	1					
ANR	40960	CompoundStatement		22:102:570:570	40840	1					
ANR	40961	ExpressionStatement	zend_string_free ( lcname )	1817:5:47486:47510	40840	0	True				
ANR	40962	CallExpression	zend_string_free ( lcname )		40840	0					
ANR	40963	Callee	zend_string_free		40840	0					
ANR	40964	Identifier	zend_string_free		40840	0					
ANR	40965	ArgumentList	lcname		40840	1					
ANR	40966	Argument	lcname		40840	0					
ANR	40967	Identifier	lcname		40840	0					
ANR	40968	ExpressionStatement	"zend_error ( E_CORE_WARNING , ""Cannot load module '%s' because required module '%s' is not loaded"" , module -> name , dep -> name )"	1819:5:47561:47682	40840	1	True				
ANR	40969	CallExpression	"zend_error ( E_CORE_WARNING , ""Cannot load module '%s' because required module '%s' is not loaded"" , module -> name , dep -> name )"		40840	0					
ANR	40970	Callee	zend_error		40840	0					
ANR	40971	Identifier	zend_error		40840	0					
ANR	40972	ArgumentList	E_CORE_WARNING		40840	1					
ANR	40973	Argument	E_CORE_WARNING		40840	0					
ANR	40974	Identifier	E_CORE_WARNING		40840	0					
ANR	40975	Argument	"""Cannot load module '%s' because required module '%s' is not loaded"""		40840	1					
ANR	40976	PrimaryExpression	"""Cannot load module '%s' because required module '%s' is not loaded"""		40840	0					
ANR	40977	Argument	module -> name		40840	2					
ANR	40978	PtrMemberAccess	module -> name		40840	0					
ANR	40979	Identifier	module		40840	0					
ANR	40980	Identifier	name		40840	1					
ANR	40981	Argument	dep -> name		40840	3					
ANR	40982	PtrMemberAccess	dep -> name		40840	0					
ANR	40983	Identifier	dep		40840	0					
ANR	40984	Identifier	name		40840	1					
ANR	40985	ExpressionStatement	module -> module_started = 0	1820:5:47689:47715	40840	2	True				
ANR	40986	AssignmentExpression	module -> module_started = 0		40840	0		=			
ANR	40987	PtrMemberAccess	module -> module_started		40840	0					
ANR	40988	Identifier	module		40840	0					
ANR	40989	Identifier	module_started		40840	1					
ANR	40990	PrimaryExpression	0		40840	1					
ANR	40991	ReturnStatement	return FAILURE ;	1821:5:47722:47736	40840	3	True				
ANR	40992	Identifier	FAILURE		40840	0					
ANR	40993	ExpressionStatement	zend_string_free ( lcname )	1823:4:47748:47772	40840	5	True				
ANR	40994	CallExpression	zend_string_free ( lcname )		40840	0					
ANR	40995	Callee	zend_string_free		40840	0					
ANR	40996	Identifier	zend_string_free		40840	0					
ANR	40997	ArgumentList	lcname		40840	1					
ANR	40998	Argument	lcname		40840	0					
ANR	40999	Identifier	lcname		40840	0					
ANR	41000	ExpressionStatement	++ dep	1825:3:47782:47787	40840	1	True				
ANR	41001	UnaryExpression	++ dep		40840	0					
ANR	41002	IncDec	++		40840	0					
ANR	41003	Identifier	dep		40840	1					
ANR	41004	IfStatement	if ( module -> globals_size )		40840	5					
ANR	41005	Condition	module -> globals_size	1830:5:47835:47854	40840	0	True				
ANR	41006	PtrMemberAccess	module -> globals_size		40840	0					
ANR	41007	Identifier	module		40840	0					
ANR	41008	Identifier	globals_size		40840	1					
ANR	41009	CompoundStatement		36:27:948:948	40840	1					
ANR	41010	ExpressionStatement	"ts_allocate_id ( module -> globals_id_ptr , module -> globals_size , ( ts_allocate_ctor ) module -> globals_ctor , ( ts_allocate_dtor ) module -> globals_dtor )"	1832:2:47872:48014	40840	0	True				
ANR	41011	CallExpression	"ts_allocate_id ( module -> globals_id_ptr , module -> globals_size , ( ts_allocate_ctor ) module -> globals_ctor , ( ts_allocate_dtor ) module -> globals_dtor )"		40840	0					
ANR	41012	Callee	ts_allocate_id		40840	0					
ANR	41013	Identifier	ts_allocate_id		40840	0					
ANR	41014	ArgumentList	module -> globals_id_ptr		40840	1					
ANR	41015	Argument	module -> globals_id_ptr		40840	0					
ANR	41016	PtrMemberAccess	module -> globals_id_ptr		40840	0					
ANR	41017	Identifier	module		40840	0					
ANR	41018	Identifier	globals_id_ptr		40840	1					
ANR	41019	Argument	module -> globals_size		40840	1					
ANR	41020	PtrMemberAccess	module -> globals_size		40840	0					
ANR	41021	Identifier	module		40840	0					
ANR	41022	Identifier	globals_size		40840	1					
ANR	41023	Argument	( ts_allocate_ctor ) module -> globals_ctor		40840	2					
ANR	41024	CastExpression	( ts_allocate_ctor ) module -> globals_ctor		40840	0					
ANR	41025	CastTarget	ts_allocate_ctor		40840	0					
ANR	41026	PtrMemberAccess	module -> globals_ctor		40840	1					
ANR	41027	Identifier	module		40840	0					
ANR	41028	Identifier	globals_ctor		40840	1					
ANR	41029	Argument	( ts_allocate_dtor ) module -> globals_dtor		40840	3					
ANR	41030	CastExpression	( ts_allocate_dtor ) module -> globals_dtor		40840	0					
ANR	41031	CastTarget	ts_allocate_dtor		40840	0					
ANR	41032	PtrMemberAccess	module -> globals_dtor		40840	1					
ANR	41033	Identifier	module		40840	0					
ANR	41034	Identifier	globals_dtor		40840	1					
ANR	41035	IfStatement	if ( module -> module_startup_func )		40840	6					
ANR	41036	Condition	module -> module_startup_func	1839:5:48117:48143	40840	0	True				
ANR	41037	PtrMemberAccess	module -> module_startup_func		40840	0					
ANR	41038	Identifier	module		40840	0					
ANR	41039	Identifier	module_startup_func		40840	1					
ANR	41040	CompoundStatement		45:34:1237:1237	40840	1					
ANR	41041	ExpressionStatement	EG ( current_module ) = module	1840:2:48150:48177	40840	0	True				
ANR	41042	AssignmentExpression	EG ( current_module ) = module		40840	0		=			
ANR	41043	CallExpression	EG ( current_module )		40840	0					
ANR	41044	Callee	EG		40840	0					
ANR	41045	Identifier	EG		40840	0					
ANR	41046	ArgumentList	current_module		40840	1					
ANR	41047	Argument	current_module		40840	0					
ANR	41048	Identifier	current_module		40840	0					
ANR	41049	Identifier	module		40840	1					
ANR	41050	IfStatement	"if ( module -> module_startup_func ( module -> type , module -> module_number ) == FAILURE )"		40840	1					
ANR	41051	Condition	"module -> module_startup_func ( module -> type , module -> module_number ) == FAILURE"	1841:6:48185:48257	40840	0	True				
ANR	41052	EqualityExpression	"module -> module_startup_func ( module -> type , module -> module_number ) == FAILURE"		40840	0		==			
ANR	41053	CallExpression	"module -> module_startup_func ( module -> type , module -> module_number )"		40840	0					
ANR	41054	Callee	module -> module_startup_func		40840	0					
ANR	41055	PtrMemberAccess	module -> module_startup_func		40840	0					
ANR	41056	Identifier	module		40840	0					
ANR	41057	Identifier	module_startup_func		40840	1					
ANR	41058	ArgumentList	module -> type		40840	1					
ANR	41059	Argument	module -> type		40840	0					
ANR	41060	PtrMemberAccess	module -> type		40840	0					
ANR	41061	Identifier	module		40840	0					
ANR	41062	Identifier	type		40840	1					
ANR	41063	Argument	module -> module_number		40840	1					
ANR	41064	PtrMemberAccess	module -> module_number		40840	0					
ANR	41065	Identifier	module		40840	0					
ANR	41066	Identifier	module_number		40840	1					
ANR	41067	Identifier	FAILURE		40840	1					
ANR	41068	CompoundStatement		47:81:1351:1351	40840	1					
ANR	41069	ExpressionStatement	"zend_error_noreturn ( E_CORE_ERROR , ""Unable to start %s module"" , module -> name )"	1842:3:48265:48340	40840	0	True				
ANR	41070	CallExpression	"zend_error_noreturn ( E_CORE_ERROR , ""Unable to start %s module"" , module -> name )"		40840	0					
ANR	41071	Callee	zend_error_noreturn		40840	0					
ANR	41072	Identifier	zend_error_noreturn		40840	0					
ANR	41073	ArgumentList	E_CORE_ERROR		40840	1					
ANR	41074	Argument	E_CORE_ERROR		40840	0					
ANR	41075	Identifier	E_CORE_ERROR		40840	0					
ANR	41076	Argument	"""Unable to start %s module"""		40840	1					
ANR	41077	PrimaryExpression	"""Unable to start %s module"""		40840	0					
ANR	41078	Argument	module -> name		40840	2					
ANR	41079	PtrMemberAccess	module -> name		40840	0					
ANR	41080	Identifier	module		40840	0					
ANR	41081	Identifier	name		40840	1					
ANR	41082	ExpressionStatement	EG ( current_module ) = NULL	1843:3:48345:48370	40840	1	True				
ANR	41083	AssignmentExpression	EG ( current_module ) = NULL		40840	0		=			
ANR	41084	CallExpression	EG ( current_module )		40840	0					
ANR	41085	Callee	EG		40840	0					
ANR	41086	Identifier	EG		40840	0					
ANR	41087	ArgumentList	current_module		40840	1					
ANR	41088	Argument	current_module		40840	0					
ANR	41089	Identifier	current_module		40840	0					
ANR	41090	Identifier	NULL		40840	1					
ANR	41091	ReturnStatement	return FAILURE ;	1844:3:48375:48389	40840	2	True				
ANR	41092	Identifier	FAILURE		40840	0					
ANR	41093	ExpressionStatement	EG ( current_module ) = NULL	1846:2:48397:48422	40840	2	True				
ANR	41094	AssignmentExpression	EG ( current_module ) = NULL		40840	0		=			
ANR	41095	CallExpression	EG ( current_module )		40840	0					
ANR	41096	Callee	EG		40840	0					
ANR	41097	Identifier	EG		40840	0					
ANR	41098	ArgumentList	current_module		40840	1					
ANR	41099	Argument	current_module		40840	0					
ANR	41100	Identifier	current_module		40840	0					
ANR	41101	Identifier	NULL		40840	1					
ANR	41102	ReturnStatement	return SUCCESS ;	1848:1:48428:48442	40840	7	True				
ANR	41103	Identifier	SUCCESS		40840	0					
ANR	41104	ReturnType	ZEND_API int		40840	1					
ANR	41105	Identifier	zend_startup_module_ex		40840	2					
ANR	41106	ParameterList	zend_module_entry * module		40840	3					
ANR	41107	Parameter	zend_module_entry * module	1794:36:46871:46895	40840	0	True				
ANR	41108	ParameterType	zend_module_entry *		40840	0					
ANR	41109	Identifier	module		40840	1					
ANR	41110	CFGEntryNode	ENTRY		40840		True				
ANR	41111	CFGExitNode	EXIT		40840		True				
ANR	41112	Symbol	module -> module_started		40840						
ANR	41113	Symbol	* dep		40840						
ANR	41114	Symbol	E_CORE_WARNING		40840						
ANR	41115	Symbol	req_mod -> module_started		40840						
ANR	41116	Symbol	current_module		40840						
ANR	41117	Symbol	dep		40840						
ANR	41118	Symbol	* req_mod		40840						
ANR	41119	Symbol	strlen		40840						
ANR	41120	Symbol	module -> globals_dtor		40840						
ANR	41121	Symbol	E_CORE_ERROR		40840						
ANR	41122	Symbol	module -> module_startup_func		40840						
ANR	41123	Symbol	name_len		40840						
ANR	41124	Symbol	dep -> type		40840						
ANR	41125	Symbol	MODULE_DEP_REQUIRED		40840						
ANR	41126	Symbol	zend_hash_find_ptr		40840						
ANR	41127	Symbol	module -> type		40840						
ANR	41128	Symbol	module -> deps		40840						
ANR	41129	Symbol	zend_string_alloc		40840						
ANR	41130	Symbol	EG		40840						
ANR	41131	Symbol	SUCCESS		40840						
ANR	41132	Symbol	NULL		40840						
ANR	41133	Symbol	module -> name		40840						
ANR	41134	Symbol	req_mod		40840						
ANR	41135	Symbol	module -> globals_size		40840						
ANR	41136	Symbol	* module		40840						
ANR	41137	Symbol	module		40840						
ANR	41138	Symbol	& module_registry		40840						
ANR	41139	Symbol	dep -> name		40840						
ANR	41140	Symbol	FAILURE		40840						
ANR	41141	Symbol	ZSTR_VAL		40840						
ANR	41142	Symbol	lcname		40840						
ANR	41143	Symbol	module -> module_number		40840						
ANR	41144	Symbol	module -> globals_id_ptr		40840						
ANR	41145	Symbol	module -> globals_ctor		40840						
ANR	41146	Function	zend_startup_module_zval	1852:0:48457:48598							
ANR	41147	FunctionDef	zend_startup_module_zval (zval * zv)		41146	0					
ANR	41148	CompoundStatement		1853:0:48513:48598	41146	0					
ANR	41149	IdentifierDeclStatement	zend_module_entry * module = Z_PTR_P ( zv ) ;	1854:1:48516:48555	41146	0	True				
ANR	41150	IdentifierDecl	* module = Z_PTR_P ( zv )		41146	0					
ANR	41151	IdentifierDeclType	zend_module_entry *		41146	0					
ANR	41152	Identifier	module		41146	1					
ANR	41153	AssignmentExpression	* module = Z_PTR_P ( zv )		41146	2		=			
ANR	41154	Identifier	module		41146	0					
ANR	41155	CallExpression	Z_PTR_P ( zv )		41146	1					
ANR	41156	Callee	Z_PTR_P		41146	0					
ANR	41157	Identifier	Z_PTR_P		41146	0					
ANR	41158	ArgumentList	zv		41146	1					
ANR	41159	Argument	zv		41146	0					
ANR	41160	Identifier	zv		41146	0					
ANR	41161	ReturnStatement	return zend_startup_module_ex ( module ) ;	1856:1:48559:48596	41146	1	True				
ANR	41162	CallExpression	zend_startup_module_ex ( module )		41146	0					
ANR	41163	Callee	zend_startup_module_ex		41146	0					
ANR	41164	Identifier	zend_startup_module_ex		41146	0					
ANR	41165	ArgumentList	module		41146	1					
ANR	41166	Argument	module		41146	0					
ANR	41167	Identifier	module		41146	0					
ANR	41168	ReturnType	static int		41146	1					
ANR	41169	Identifier	zend_startup_module_zval		41146	2					
ANR	41170	ParameterList	zval * zv		41146	3					
ANR	41171	Parameter	zval * zv	1852:36:48493:48500	41146	0	True				
ANR	41172	ParameterType	zval *		41146	0					
ANR	41173	Identifier	zv		41146	1					
ANR	41174	CFGEntryNode	ENTRY		41146		True				
ANR	41175	CFGExitNode	EXIT		41146		True				
ANR	41176	Symbol	Z_PTR_P		41146						
ANR	41177	Symbol	module		41146						
ANR	41178	Symbol	zv		41146						
ANR	41179	Symbol	zend_startup_module_ex		41146						
ANR	41180	Function	zend_sort_modules	1860:0:48611:49367							
ANR	41181	FunctionDef	"zend_sort_modules (void * base , size_t count , size_t siz , compare_func_t compare , swap_func_t swp)"		41180	0					
ANR	41182	CompoundStatement		1861:0:48730:49367	41180	0					
ANR	41183	IdentifierDeclStatement	Bucket * b1 = base ;	1862:1:48733:48750	41180	0	True				
ANR	41184	IdentifierDecl	* b1 = base		41180	0					
ANR	41185	IdentifierDeclType	Bucket *		41180	0					
ANR	41186	Identifier	b1		41180	1					
ANR	41187	AssignmentExpression	* b1 = base		41180	2		=			
ANR	41188	Identifier	base		41180	0					
ANR	41189	Identifier	base		41180	1					
ANR	41190	IdentifierDeclStatement	Bucket * b2 ;	1863:1:48753:48763	41180	1	True				
ANR	41191	IdentifierDecl	* b2		41180	0					
ANR	41192	IdentifierDeclType	Bucket *		41180	0					
ANR	41193	Identifier	b2		41180	1					
ANR	41194	IdentifierDeclStatement	Bucket * end = b1 + count ;	1864:1:48766:48790	41180	2	True				
ANR	41195	IdentifierDecl	* end = b1 + count		41180	0					
ANR	41196	IdentifierDeclType	Bucket *		41180	0					
ANR	41197	Identifier	end		41180	1					
ANR	41198	AssignmentExpression	* end = b1 + count		41180	2		=			
ANR	41199	Identifier	end		41180	0					
ANR	41200	AdditiveExpression	b1 + count		41180	1		+			
ANR	41201	Identifier	b1		41180	0					
ANR	41202	Identifier	count		41180	1					
ANR	41203	IdentifierDeclStatement	Bucket tmp ;	1865:1:48793:48803	41180	3	True				
ANR	41204	IdentifierDecl	tmp		41180	0					
ANR	41205	IdentifierDeclType	Bucket		41180	0					
ANR	41206	Identifier	tmp		41180	1					
ANR	41207	IdentifierDeclStatement	"zend_module_entry * m , * r ;"	1866:1:48806:48830	41180	4	True				
ANR	41208	IdentifierDecl	* m		41180	0					
ANR	41209	IdentifierDeclType	zend_module_entry *		41180	0					
ANR	41210	Identifier	m		41180	1					
ANR	41211	IdentifierDecl	* r		41180	1					
ANR	41212	IdentifierDeclType	zend_module_entry *		41180	0					
ANR	41213	Identifier	r		41180	1					
ANR	41214	WhileStatement	while ( b1 < end )		41180	5					
ANR	41215	Condition	b1 < end	1868:8:48841:48848	41180	0	True				
ANR	41216	RelationalExpression	b1 < end		41180	0		<			
ANR	41217	Identifier	b1		41180	0					
ANR	41218	Identifier	end		41180	1					
ANR	41219	CompoundStatement		8:18:120:120	41180	1					
ANR	41220	Label	try_again :	1869:0:48853:48862	41180	0	True				
ANR	41221	Identifier	try_again		41180	0					
ANR	41222	ExpressionStatement	m = ( zend_module_entry * ) Z_PTR ( b1 -> val )	1870:2:48866:48904	41180	1	True				
ANR	41223	AssignmentExpression	m = ( zend_module_entry * ) Z_PTR ( b1 -> val )		41180	0		=			
ANR	41224	Identifier	m		41180	0					
ANR	41225	CastExpression	( zend_module_entry * ) Z_PTR ( b1 -> val )		41180	1					
ANR	41226	CastTarget	zend_module_entry *		41180	0					
ANR	41227	CallExpression	Z_PTR ( b1 -> val )		41180	1					
ANR	41228	Callee	Z_PTR		41180	0					
ANR	41229	Identifier	Z_PTR		41180	0					
ANR	41230	ArgumentList	b1 -> val		41180	1					
ANR	41231	Argument	b1 -> val		41180	0					
ANR	41232	PtrMemberAccess	b1 -> val		41180	0					
ANR	41233	Identifier	b1		41180	0					
ANR	41234	Identifier	val		41180	1					
ANR	41235	IfStatement	if ( ! m -> module_started && m -> deps )		41180	2					
ANR	41236	Condition	! m -> module_started && m -> deps	1871:6:48912:48940	41180	0	True				
ANR	41237	AndExpression	! m -> module_started && m -> deps		41180	0		&&			
ANR	41238	UnaryOperationExpression	! m -> module_started		41180	0					
ANR	41239	UnaryOperator	!		41180	0					
ANR	41240	PtrMemberAccess	m -> module_started		41180	1					
ANR	41241	Identifier	m		41180	0					
ANR	41242	Identifier	module_started		41180	1					
ANR	41243	PtrMemberAccess	m -> deps		41180	1					
ANR	41244	Identifier	m		41180	0					
ANR	41245	Identifier	deps		41180	1					
ANR	41246	CompoundStatement		12:3:217:253	41180	1					
ANR	41247	IdentifierDeclStatement	const zend_module_dep * dep = m -> deps ;	1872:3:48948:48984	41180	0	True				
ANR	41248	IdentifierDecl	* dep = m -> deps		41180	0					
ANR	41249	IdentifierDeclType	const zend_module_dep *		41180	0					
ANR	41250	Identifier	dep		41180	1					
ANR	41251	AssignmentExpression	* dep = m -> deps		41180	2		=			
ANR	41252	Identifier	dep		41180	0					
ANR	41253	PtrMemberAccess	m -> deps		41180	1					
ANR	41254	Identifier	m		41180	0					
ANR	41255	Identifier	deps		41180	1					
ANR	41256	WhileStatement	while ( dep -> name )		41180	1					
ANR	41257	Condition	dep -> name	1873:10:48996:49004	41180	0	True				
ANR	41258	PtrMemberAccess	dep -> name		41180	0					
ANR	41259	Identifier	dep		41180	0					
ANR	41260	Identifier	name		41180	1					
ANR	41261	CompoundStatement		13:21:276:276	41180	1					
ANR	41262	IfStatement	if ( dep -> type == MODULE_DEP_REQUIRED || dep -> type == MODULE_DEP_OPTIONAL )		41180	0					
ANR	41263	Condition	dep -> type == MODULE_DEP_REQUIRED || dep -> type == MODULE_DEP_OPTIONAL	1874:8:49017:49084	41180	0	True				
ANR	41264	OrExpression	dep -> type == MODULE_DEP_REQUIRED || dep -> type == MODULE_DEP_OPTIONAL		41180	0		||			
ANR	41265	EqualityExpression	dep -> type == MODULE_DEP_REQUIRED		41180	0		==			
ANR	41266	PtrMemberAccess	dep -> type		41180	0					
ANR	41267	Identifier	dep		41180	0					
ANR	41268	Identifier	type		41180	1					
ANR	41269	Identifier	MODULE_DEP_REQUIRED		41180	1					
ANR	41270	EqualityExpression	dep -> type == MODULE_DEP_OPTIONAL		41180	1		==			
ANR	41271	PtrMemberAccess	dep -> type		41180	0					
ANR	41272	Identifier	dep		41180	0					
ANR	41273	Identifier	type		41180	1					
ANR	41274	Identifier	MODULE_DEP_OPTIONAL		41180	1					
ANR	41275	CompoundStatement		14:78:356:356	41180	1					
ANR	41276	ExpressionStatement	b2 = b1 + 1	1875:5:49094:49105	41180	0	True				
ANR	41277	AssignmentExpression	b2 = b1 + 1		41180	0		=			
ANR	41278	Identifier	b2		41180	0					
ANR	41279	AdditiveExpression	b1 + 1		41180	1		+			
ANR	41280	Identifier	b1		41180	0					
ANR	41281	PrimaryExpression	1		41180	1					
ANR	41282	WhileStatement	while ( b2 < end )		41180	1					
ANR	41283	Condition	b2 < end	1876:12:49119:49126	41180	0	True				
ANR	41284	RelationalExpression	b2 < end		41180	0		<			
ANR	41285	Identifier	b2		41180	0					
ANR	41286	Identifier	end		41180	1					
ANR	41287	CompoundStatement		16:22:398:398	41180	1					
ANR	41288	ExpressionStatement	r = ( zend_module_entry * ) Z_PTR ( b2 -> val )	1877:6:49137:49175	41180	0	True				
ANR	41289	AssignmentExpression	r = ( zend_module_entry * ) Z_PTR ( b2 -> val )		41180	0		=			
ANR	41290	Identifier	r		41180	0					
ANR	41291	CastExpression	( zend_module_entry * ) Z_PTR ( b2 -> val )		41180	1					
ANR	41292	CastTarget	zend_module_entry *		41180	0					
ANR	41293	CallExpression	Z_PTR ( b2 -> val )		41180	1					
ANR	41294	Callee	Z_PTR		41180	0					
ANR	41295	Identifier	Z_PTR		41180	0					
ANR	41296	ArgumentList	b2 -> val		41180	1					
ANR	41297	Argument	b2 -> val		41180	0					
ANR	41298	PtrMemberAccess	b2 -> val		41180	0					
ANR	41299	Identifier	b2		41180	0					
ANR	41300	Identifier	val		41180	1					
ANR	41301	IfStatement	"if ( strcasecmp ( dep -> name , r -> name ) == 0 )"		41180	1					
ANR	41302	Condition	"strcasecmp ( dep -> name , r -> name ) == 0"	1878:10:49187:49221	41180	0	True				
ANR	41303	EqualityExpression	"strcasecmp ( dep -> name , r -> name ) == 0"		41180	0		==			
ANR	41304	CallExpression	"strcasecmp ( dep -> name , r -> name )"		41180	0					
ANR	41305	Callee	strcasecmp		41180	0					
ANR	41306	Identifier	strcasecmp		41180	0					
ANR	41307	ArgumentList	dep -> name		41180	1					
ANR	41308	Argument	dep -> name		41180	0					
ANR	41309	PtrMemberAccess	dep -> name		41180	0					
ANR	41310	Identifier	dep		41180	0					
ANR	41311	Identifier	name		41180	1					
ANR	41312	Argument	r -> name		41180	1					
ANR	41313	PtrMemberAccess	r -> name		41180	0					
ANR	41314	Identifier	r		41180	0					
ANR	41315	Identifier	name		41180	1					
ANR	41316	PrimaryExpression	0		41180	1					
ANR	41317	CompoundStatement		18:47:493:493	41180	1					
ANR	41318	ExpressionStatement	tmp = * b1	1879:7:49233:49242	41180	0	True				
ANR	41319	AssignmentExpression	tmp = * b1		41180	0		=			
ANR	41320	Identifier	tmp		41180	0					
ANR	41321	UnaryOperationExpression	* b1		41180	1					
ANR	41322	UnaryOperator	*		41180	0					
ANR	41323	Identifier	b1		41180	1					
ANR	41324	ExpressionStatement	* b1 = * b2	1880:7:49251:49260	41180	1	True				
ANR	41325	AssignmentExpression	* b1 = * b2		41180	0		=			
ANR	41326	UnaryOperationExpression	* b1		41180	0					
ANR	41327	UnaryOperator	*		41180	0					
ANR	41328	Identifier	b1		41180	1					
ANR	41329	UnaryOperationExpression	* b2		41180	1					
ANR	41330	UnaryOperator	*		41180	0					
ANR	41331	Identifier	b2		41180	1					
ANR	41332	ExpressionStatement	* b2 = tmp	1881:7:49269:49278	41180	2	True				
ANR	41333	AssignmentExpression	* b2 = tmp		41180	0		=			
ANR	41334	UnaryOperationExpression	* b2		41180	0					
ANR	41335	UnaryOperator	*		41180	0					
ANR	41336	Identifier	b2		41180	1					
ANR	41337	Identifier	tmp		41180	1					
ANR	41338	GotoStatement	goto try_again ;	1882:7:49287:49301	41180	3	True				
ANR	41339	Identifier	try_again		41180	0					
ANR	41340	ExpressionStatement	b2 ++	1884:6:49317:49321	41180	2	True				
ANR	41341	PostIncDecOperationExpression	b2 ++		41180	0					
ANR	41342	Identifier	b2		41180	0					
ANR	41343	IncDec	++		41180	1					
ANR	41344	ExpressionStatement	dep ++	1887:4:49340:49345	41180	1	True				
ANR	41345	PostIncDecOperationExpression	dep ++		41180	0					
ANR	41346	Identifier	dep		41180	0					
ANR	41347	IncDec	++		41180	1					
ANR	41348	ExpressionStatement	b1 ++	1890:2:49358:49362	41180	3	True				
ANR	41349	PostIncDecOperationExpression	b1 ++		41180	0					
ANR	41350	Identifier	b1		41180	0					
ANR	41351	IncDec	++		41180	1					
ANR	41352	ReturnType	static void		41180	1					
ANR	41353	Identifier	zend_sort_modules		41180	2					
ANR	41354	ParameterList	"void * base , size_t count , size_t siz , compare_func_t compare , swap_func_t swp"		41180	3					
ANR	41355	Parameter	void * base	1860:30:48641:48650	41180	0	True				
ANR	41356	ParameterType	void *		41180	0					
ANR	41357	Identifier	base		41180	1					
ANR	41358	Parameter	size_t count	1860:42:48653:48664	41180	1	True				
ANR	41359	ParameterType	size_t		41180	0					
ANR	41360	Identifier	count		41180	1					
ANR	41361	Parameter	size_t siz	1860:56:48667:48676	41180	2	True				
ANR	41362	ParameterType	size_t		41180	0					
ANR	41363	Identifier	siz		41180	1					
ANR	41364	Parameter	compare_func_t compare	1860:68:48679:48700	41180	3	True				
ANR	41365	ParameterType	compare_func_t		41180	0					
ANR	41366	Identifier	compare		41180	1					
ANR	41367	Parameter	swap_func_t swp	1860:92:48703:48717	41180	4	True				
ANR	41368	ParameterType	swap_func_t		41180	0					
ANR	41369	Identifier	swp		41180	1					
ANR	41370	CFGEntryNode	ENTRY		41180		True				
ANR	41371	CFGExitNode	EXIT		41180		True				
ANR	41372	Symbol	compare		41180						
ANR	41373	Symbol	* dep		41180						
ANR	41374	Symbol	Z_PTR		41180						
ANR	41375	Symbol	swp		41180						
ANR	41376	Symbol	m -> module_started		41180						
ANR	41377	Symbol	dep		41180						
ANR	41378	Symbol	b1		41180						
ANR	41379	Symbol	b2		41180						
ANR	41380	Symbol	* b2		41180						
ANR	41381	Symbol	tmp		41180						
ANR	41382	Symbol	* b1		41180						
ANR	41383	Symbol	end		41180						
ANR	41384	Symbol	MODULE_DEP_OPTIONAL		41180						
ANR	41385	Symbol	dep -> type		41180						
ANR	41386	Symbol	strcasecmp		41180						
ANR	41387	Symbol	MODULE_DEP_REQUIRED		41180						
ANR	41388	Symbol	m -> deps		41180						
ANR	41389	Symbol	siz		41180						
ANR	41390	Symbol	count		41180						
ANR	41391	Symbol	dep -> name		41180						
ANR	41392	Symbol	m		41180						
ANR	41393	Symbol	r		41180						
ANR	41394	Symbol	b1 -> val		41180						
ANR	41395	Symbol	r -> name		41180						
ANR	41396	Symbol	* m		41180						
ANR	41397	Symbol	b2 -> val		41180						
ANR	41398	Symbol	* r		41180						
ANR	41399	Symbol	base		41180						
ANR	41400	Function	zend_collect_module_handlers	1895:0:49380:51529							
ANR	41401	FunctionDef	zend_collect_module_handlers ()		41400	0					
ANR	41402	CompoundStatement		1896:0:49439:51529	41400	0					
ANR	41403	IdentifierDeclStatement	zend_module_entry * module ;	1897:1:49442:49467	41400	0	True				
ANR	41404	IdentifierDecl	* module		41400	0					
ANR	41405	IdentifierDeclType	zend_module_entry *		41400	0					
ANR	41406	Identifier	module		41400	1					
ANR	41407	IdentifierDeclStatement	int startup_count = 0 ;	1898:1:49470:49491	41400	1	True				
ANR	41408	IdentifierDecl	startup_count = 0		41400	0					
ANR	41409	IdentifierDeclType	int		41400	0					
ANR	41410	Identifier	startup_count		41400	1					
ANR	41411	AssignmentExpression	startup_count = 0		41400	2		=			
ANR	41412	Identifier	startup_count		41400	0					
ANR	41413	PrimaryExpression	0		41400	1					
ANR	41414	IdentifierDeclStatement	int shutdown_count = 0 ;	1899:1:49494:49516	41400	2	True				
ANR	41415	IdentifierDecl	shutdown_count = 0		41400	0					
ANR	41416	IdentifierDeclType	int		41400	0					
ANR	41417	Identifier	shutdown_count		41400	1					
ANR	41418	AssignmentExpression	shutdown_count = 0		41400	2		=			
ANR	41419	Identifier	shutdown_count		41400	0					
ANR	41420	PrimaryExpression	0		41400	1					
ANR	41421	IdentifierDeclStatement	int post_deactivate_count = 0 ;	1900:1:49519:49548	41400	3	True				
ANR	41422	IdentifierDecl	post_deactivate_count = 0		41400	0					
ANR	41423	IdentifierDeclType	int		41400	0					
ANR	41424	Identifier	post_deactivate_count		41400	1					
ANR	41425	AssignmentExpression	post_deactivate_count = 0		41400	2		=			
ANR	41426	Identifier	post_deactivate_count		41400	0					
ANR	41427	PrimaryExpression	0		41400	1					
ANR	41428	IdentifierDeclStatement	zend_class_entry * ce ;	1901:1:49551:49571	41400	4	True				
ANR	41429	IdentifierDecl	* ce		41400	0					
ANR	41430	IdentifierDeclType	zend_class_entry *		41400	0					
ANR	41431	Identifier	ce		41400	1					
ANR	41432	IdentifierDeclStatement	int class_count = 0 ;	1902:1:49574:49593	41400	5	True				
ANR	41433	IdentifierDecl	class_count = 0		41400	0					
ANR	41434	IdentifierDeclType	int		41400	0					
ANR	41435	Identifier	class_count		41400	1					
ANR	41436	AssignmentExpression	class_count = 0		41400	2		=			
ANR	41437	Identifier	class_count		41400	0					
ANR	41438	PrimaryExpression	0		41400	1					
ANR	41439	Statement	ZEND_HASH_FOREACH_PTR	1905:1:49662:49682	41400	6	True				
ANR	41440	Statement	(	1905:22:49683:49683	41400	7	True				
ANR	41441	Statement	&	1905:23:49684:49684	41400	8	True				
ANR	41442	Statement	module_registry	1905:24:49685:49699	41400	9	True				
ANR	41443	Statement	","	1905:39:49700:49700	41400	10	True				
ANR	41444	Statement	module	1905:41:49702:49707	41400	11	True				
ANR	41445	Statement	)	1905:47:49708:49708	41400	12	True				
ANR	41446	CompoundStatement		10:49:270:270	41400	13					
ANR	41447	IfStatement	if ( module -> request_startup_func )		41400	0					
ANR	41448	Condition	module -> request_startup_func	1906:6:49718:49745	41400	0	True				
ANR	41449	PtrMemberAccess	module -> request_startup_func		41400	0					
ANR	41450	Identifier	module		41400	0					
ANR	41451	Identifier	request_startup_func		41400	1					
ANR	41452	CompoundStatement		11:36:308:308	41400	1					
ANR	41453	ExpressionStatement	startup_count ++	1907:3:49753:49768	41400	0	True				
ANR	41454	PostIncDecOperationExpression	startup_count ++		41400	0					
ANR	41455	Identifier	startup_count		41400	0					
ANR	41456	IncDec	++		41400	1					
ANR	41457	IfStatement	if ( module -> request_shutdown_func )		41400	1					
ANR	41458	Condition	module -> request_shutdown_func	1909:6:49780:49808	41400	0	True				
ANR	41459	PtrMemberAccess	module -> request_shutdown_func		41400	0					
ANR	41460	Identifier	module		41400	0					
ANR	41461	Identifier	request_shutdown_func		41400	1					
ANR	41462	CompoundStatement		14:37:371:371	41400	1					
ANR	41463	ExpressionStatement	shutdown_count ++	1910:3:49816:49832	41400	0	True				
ANR	41464	PostIncDecOperationExpression	shutdown_count ++		41400	0					
ANR	41465	Identifier	shutdown_count		41400	0					
ANR	41466	IncDec	++		41400	1					
ANR	41467	IfStatement	if ( module -> post_deactivate_func )		41400	2					
ANR	41468	Condition	module -> post_deactivate_func	1912:6:49844:49871	41400	0	True				
ANR	41469	PtrMemberAccess	module -> post_deactivate_func		41400	0					
ANR	41470	Identifier	module		41400	0					
ANR	41471	Identifier	post_deactivate_func		41400	1					
ANR	41472	CompoundStatement		17:36:434:434	41400	1					
ANR	41473	ExpressionStatement	post_deactivate_count ++	1913:3:49879:49902	41400	0	True				
ANR	41474	PostIncDecOperationExpression	post_deactivate_count ++		41400	0					
ANR	41475	Identifier	post_deactivate_count		41400	0					
ANR	41476	IncDec	++		41400	1					
ANR	41477	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	1915:3:49911:49934	41400	14	True				
ANR	41478	CallExpression	ZEND_HASH_FOREACH_END ( )		41400	0					
ANR	41479	Callee	ZEND_HASH_FOREACH_END		41400	0					
ANR	41480	Identifier	ZEND_HASH_FOREACH_END		41400	0					
ANR	41481	ArgumentList			41400	1					
ANR	41482	ExpressionStatement	module_request_startup_handlers = ( zend_module_entry * * ) malloc ( sizeof ( zend_module_entry * ) * ( startup_count + 1 + shutdown_count + 1 + post_deactivate_count + 1 ) )	1916:1:49937:50111	41400	15	True				
ANR	41483	AssignmentExpression	module_request_startup_handlers = ( zend_module_entry * * ) malloc ( sizeof ( zend_module_entry * ) * ( startup_count + 1 + shutdown_count + 1 + post_deactivate_count + 1 ) )		41400	0		=			
ANR	41484	Identifier	module_request_startup_handlers		41400	0					
ANR	41485	CastExpression	( zend_module_entry * * ) malloc ( sizeof ( zend_module_entry * ) * ( startup_count + 1 + shutdown_count + 1 + post_deactivate_count + 1 ) )		41400	1					
ANR	41486	CastTarget	zend_module_entry * *		41400	0					
ANR	41487	CallExpression	malloc ( sizeof ( zend_module_entry * ) * ( startup_count + 1 + shutdown_count + 1 + post_deactivate_count + 1 ) )		41400	1					
ANR	41488	Callee	malloc		41400	0					
ANR	41489	Identifier	malloc		41400	0					
ANR	41490	ArgumentList	sizeof ( zend_module_entry * ) * ( startup_count + 1 + shutdown_count + 1 + post_deactivate_count + 1 )		41400	1					
ANR	41491	Argument	sizeof ( zend_module_entry * ) * ( startup_count + 1 + shutdown_count + 1 + post_deactivate_count + 1 )		41400	0					
ANR	41492	MultiplicativeExpression	sizeof ( zend_module_entry * ) * ( startup_count + 1 + shutdown_count + 1 + post_deactivate_count + 1 )		41400	0		*			
ANR	41493	SizeofExpression	sizeof ( zend_module_entry * )		41400	0					
ANR	41494	Sizeof	sizeof		41400	0					
ANR	41495	SizeofOperand	zend_module_entry *		41400	1					
ANR	41496	AdditiveExpression	startup_count + 1 + shutdown_count + 1 + post_deactivate_count + 1		41400	1		+			
ANR	41497	Identifier	startup_count		41400	0					
ANR	41498	AdditiveExpression	1 + shutdown_count + 1 + post_deactivate_count + 1		41400	1		+			
ANR	41499	PrimaryExpression	1		41400	0					
ANR	41500	AdditiveExpression	shutdown_count + 1 + post_deactivate_count + 1		41400	1		+			
ANR	41501	Identifier	shutdown_count		41400	0					
ANR	41502	AdditiveExpression	1 + post_deactivate_count + 1		41400	1		+			
ANR	41503	PrimaryExpression	1		41400	0					
ANR	41504	AdditiveExpression	post_deactivate_count + 1		41400	1		+			
ANR	41505	Identifier	post_deactivate_count		41400	0					
ANR	41506	PrimaryExpression	1		41400	1					
ANR	41507	ExpressionStatement	module_request_startup_handlers [ startup_count ] = NULL	1921:1:50114:50167	41400	16	True				
ANR	41508	AssignmentExpression	module_request_startup_handlers [ startup_count ] = NULL		41400	0		=			
ANR	41509	ArrayIndexing	module_request_startup_handlers [ startup_count ]		41400	0					
ANR	41510	Identifier	module_request_startup_handlers		41400	0					
ANR	41511	Identifier	startup_count		41400	1					
ANR	41512	Identifier	NULL		41400	1					
ANR	41513	ExpressionStatement	module_request_shutdown_handlers = module_request_startup_handlers + startup_count + 1	1922:1:50170:50256	41400	17	True				
ANR	41514	AssignmentExpression	module_request_shutdown_handlers = module_request_startup_handlers + startup_count + 1		41400	0		=			
ANR	41515	Identifier	module_request_shutdown_handlers		41400	0					
ANR	41516	AdditiveExpression	module_request_startup_handlers + startup_count + 1		41400	1		+			
ANR	41517	Identifier	module_request_startup_handlers		41400	0					
ANR	41518	AdditiveExpression	startup_count + 1		41400	1		+			
ANR	41519	Identifier	startup_count		41400	0					
ANR	41520	PrimaryExpression	1		41400	1					
ANR	41521	ExpressionStatement	module_request_shutdown_handlers [ shutdown_count ] = NULL	1923:1:50259:50314	41400	18	True				
ANR	41522	AssignmentExpression	module_request_shutdown_handlers [ shutdown_count ] = NULL		41400	0		=			
ANR	41523	ArrayIndexing	module_request_shutdown_handlers [ shutdown_count ]		41400	0					
ANR	41524	Identifier	module_request_shutdown_handlers		41400	0					
ANR	41525	Identifier	shutdown_count		41400	1					
ANR	41526	Identifier	NULL		41400	1					
ANR	41527	ExpressionStatement	module_post_deactivate_handlers = module_request_shutdown_handlers + shutdown_count + 1	1924:1:50317:50404	41400	19	True				
ANR	41528	AssignmentExpression	module_post_deactivate_handlers = module_request_shutdown_handlers + shutdown_count + 1		41400	0		=			
ANR	41529	Identifier	module_post_deactivate_handlers		41400	0					
ANR	41530	AdditiveExpression	module_request_shutdown_handlers + shutdown_count + 1		41400	1		+			
ANR	41531	Identifier	module_request_shutdown_handlers		41400	0					
ANR	41532	AdditiveExpression	shutdown_count + 1		41400	1		+			
ANR	41533	Identifier	shutdown_count		41400	0					
ANR	41534	PrimaryExpression	1		41400	1					
ANR	41535	ExpressionStatement	module_post_deactivate_handlers [ post_deactivate_count ] = NULL	1925:1:50407:50468	41400	20	True				
ANR	41536	AssignmentExpression	module_post_deactivate_handlers [ post_deactivate_count ] = NULL		41400	0		=			
ANR	41537	ArrayIndexing	module_post_deactivate_handlers [ post_deactivate_count ]		41400	0					
ANR	41538	Identifier	module_post_deactivate_handlers		41400	0					
ANR	41539	Identifier	post_deactivate_count		41400	1					
ANR	41540	Identifier	NULL		41400	1					
ANR	41541	ExpressionStatement	startup_count = 0	1926:1:50471:50488	41400	21	True				
ANR	41542	AssignmentExpression	startup_count = 0		41400	0		=			
ANR	41543	Identifier	startup_count		41400	0					
ANR	41544	PrimaryExpression	0		41400	1					
ANR	41545	Statement	ZEND_HASH_FOREACH_PTR	1928:1:50492:50512	41400	22	True				
ANR	41546	Statement	(	1928:22:50513:50513	41400	23	True				
ANR	41547	Statement	&	1928:23:50514:50514	41400	24	True				
ANR	41548	Statement	module_registry	1928:24:50515:50529	41400	25	True				
ANR	41549	Statement	","	1928:39:50530:50530	41400	26	True				
ANR	41550	Statement	module	1928:41:50532:50537	41400	27	True				
ANR	41551	Statement	)	1928:47:50538:50538	41400	28	True				
ANR	41552	CompoundStatement		33:49:1100:1100	41400	29					
ANR	41553	IfStatement	if ( module -> request_startup_func )		41400	0					
ANR	41554	Condition	module -> request_startup_func	1929:6:50548:50575	41400	0	True				
ANR	41555	PtrMemberAccess	module -> request_startup_func		41400	0					
ANR	41556	Identifier	module		41400	0					
ANR	41557	Identifier	request_startup_func		41400	1					
ANR	41558	CompoundStatement		34:36:1138:1138	41400	1					
ANR	41559	ExpressionStatement	module_request_startup_handlers [ startup_count ++ ] = module	1930:3:50583:50640	41400	0	True				
ANR	41560	AssignmentExpression	module_request_startup_handlers [ startup_count ++ ] = module		41400	0		=			
ANR	41561	ArrayIndexing	module_request_startup_handlers [ startup_count ++ ]		41400	0					
ANR	41562	Identifier	module_request_startup_handlers		41400	0					
ANR	41563	PostIncDecOperationExpression	startup_count ++		41400	1					
ANR	41564	Identifier	startup_count		41400	0					
ANR	41565	IncDec	++		41400	1					
ANR	41566	Identifier	module		41400	1					
ANR	41567	IfStatement	if ( module -> request_shutdown_func )		41400	1					
ANR	41568	Condition	module -> request_shutdown_func	1932:6:50652:50680	41400	0	True				
ANR	41569	PtrMemberAccess	module -> request_shutdown_func		41400	0					
ANR	41570	Identifier	module		41400	0					
ANR	41571	Identifier	request_shutdown_func		41400	1					
ANR	41572	CompoundStatement		37:37:1243:1243	41400	1					
ANR	41573	ExpressionStatement	module_request_shutdown_handlers [ -- shutdown_count ] = module	1933:3:50688:50747	41400	0	True				
ANR	41574	AssignmentExpression	module_request_shutdown_handlers [ -- shutdown_count ] = module		41400	0		=			
ANR	41575	ArrayIndexing	module_request_shutdown_handlers [ -- shutdown_count ]		41400	0					
ANR	41576	Identifier	module_request_shutdown_handlers		41400	0					
ANR	41577	UnaryExpression	-- shutdown_count		41400	1					
ANR	41578	IncDec	--		41400	0					
ANR	41579	Identifier	shutdown_count		41400	1					
ANR	41580	Identifier	module		41400	1					
ANR	41581	IfStatement	if ( module -> post_deactivate_func )		41400	2					
ANR	41582	Condition	module -> post_deactivate_func	1935:6:50759:50786	41400	0	True				
ANR	41583	PtrMemberAccess	module -> post_deactivate_func		41400	0					
ANR	41584	Identifier	module		41400	0					
ANR	41585	Identifier	post_deactivate_func		41400	1					
ANR	41586	CompoundStatement		40:36:1349:1349	41400	1					
ANR	41587	ExpressionStatement	module_post_deactivate_handlers [ -- post_deactivate_count ] = module	1936:3:50794:50859	41400	0	True				
ANR	41588	AssignmentExpression	module_post_deactivate_handlers [ -- post_deactivate_count ] = module		41400	0		=			
ANR	41589	ArrayIndexing	module_post_deactivate_handlers [ -- post_deactivate_count ]		41400	0					
ANR	41590	Identifier	module_post_deactivate_handlers		41400	0					
ANR	41591	UnaryExpression	-- post_deactivate_count		41400	1					
ANR	41592	IncDec	--		41400	0					
ANR	41593	Identifier	post_deactivate_count		41400	1					
ANR	41594	Identifier	module		41400	1					
ANR	41595	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	1938:3:50868:50891	41400	30	True				
ANR	41596	CallExpression	ZEND_HASH_FOREACH_END ( )		41400	0					
ANR	41597	Callee	ZEND_HASH_FOREACH_END		41400	0					
ANR	41598	Identifier	ZEND_HASH_FOREACH_END		41400	0					
ANR	41599	ArgumentList			41400	1					
ANR	41600	Statement	ZEND_HASH_FOREACH_PTR	1941:1:50947:50967	41400	31	True				
ANR	41601	Statement	(	1941:22:50968:50968	41400	32	True				
ANR	41602	Statement	CG	1941:23:50969:50970	41400	33	True				
ANR	41603	Statement	(	1941:25:50971:50971	41400	34	True				
ANR	41604	Statement	class_table	1941:26:50972:50982	41400	35	True				
ANR	41605	Statement	)	1941:37:50983:50983	41400	36	True				
ANR	41606	Statement	","	1941:38:50984:50984	41400	37	True				
ANR	41607	Statement	ce	1941:40:50986:50987	41400	38	True				
ANR	41608	Statement	)	1941:42:50988:50988	41400	39	True				
ANR	41609	CompoundStatement		46:44:1550:1550	41400	40					
ANR	41610	IfStatement	if ( ce -> type == ZEND_INTERNAL_CLASS && ce -> default_static_members_count > 0 )		41400	0					
ANR	41611	Condition	ce -> type == ZEND_INTERNAL_CLASS && ce -> default_static_members_count > 0	1942:6:50998:51074	41400	0	True				
ANR	41612	AndExpression	ce -> type == ZEND_INTERNAL_CLASS && ce -> default_static_members_count > 0		41400	0		&&			
ANR	41613	EqualityExpression	ce -> type == ZEND_INTERNAL_CLASS		41400	0		==			
ANR	41614	PtrMemberAccess	ce -> type		41400	0					
ANR	41615	Identifier	ce		41400	0					
ANR	41616	Identifier	type		41400	1					
ANR	41617	Identifier	ZEND_INTERNAL_CLASS		41400	1					
ANR	41618	RelationalExpression	ce -> default_static_members_count > 0		41400	1		>			
ANR	41619	PtrMemberAccess	ce -> default_static_members_count		41400	0					
ANR	41620	Identifier	ce		41400	0					
ANR	41621	Identifier	default_static_members_count		41400	1					
ANR	41622	PrimaryExpression	0		41400	1					
ANR	41623	CompoundStatement		48:44:1637:1637	41400	1					
ANR	41624	ExpressionStatement	class_count ++	1944:6:51085:51098	41400	0	True				
ANR	41625	PostIncDecOperationExpression	class_count ++		41400	0					
ANR	41626	Identifier	class_count		41400	0					
ANR	41627	IncDec	++		41400	1					
ANR	41628	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	1946:3:51107:51130	41400	41	True				
ANR	41629	CallExpression	ZEND_HASH_FOREACH_END ( )		41400	0					
ANR	41630	Callee	ZEND_HASH_FOREACH_END		41400	0					
ANR	41631	Identifier	ZEND_HASH_FOREACH_END		41400	0					
ANR	41632	ArgumentList			41400	1					
ANR	41633	ExpressionStatement	class_cleanup_handlers = ( zend_class_entry * * ) malloc ( sizeof ( zend_class_entry * ) * ( class_count + 1 ) )	1948:1:51134:51237	41400	42	True				
ANR	41634	AssignmentExpression	class_cleanup_handlers = ( zend_class_entry * * ) malloc ( sizeof ( zend_class_entry * ) * ( class_count + 1 ) )		41400	0		=			
ANR	41635	Identifier	class_cleanup_handlers		41400	0					
ANR	41636	CastExpression	( zend_class_entry * * ) malloc ( sizeof ( zend_class_entry * ) * ( class_count + 1 ) )		41400	1					
ANR	41637	CastTarget	zend_class_entry * *		41400	0					
ANR	41638	CallExpression	malloc ( sizeof ( zend_class_entry * ) * ( class_count + 1 ) )		41400	1					
ANR	41639	Callee	malloc		41400	0					
ANR	41640	Identifier	malloc		41400	0					
ANR	41641	ArgumentList	sizeof ( zend_class_entry * ) * ( class_count + 1 )		41400	1					
ANR	41642	Argument	sizeof ( zend_class_entry * ) * ( class_count + 1 )		41400	0					
ANR	41643	MultiplicativeExpression	sizeof ( zend_class_entry * ) * ( class_count + 1 )		41400	0		*			
ANR	41644	SizeofExpression	sizeof ( zend_class_entry * )		41400	0					
ANR	41645	Sizeof	sizeof		41400	0					
ANR	41646	SizeofOperand	zend_class_entry *		41400	1					
ANR	41647	AdditiveExpression	class_count + 1		41400	1		+			
ANR	41648	Identifier	class_count		41400	0					
ANR	41649	PrimaryExpression	1		41400	1					
ANR	41650	ExpressionStatement	class_cleanup_handlers [ class_count ] = NULL	1951:1:51240:51282	41400	43	True				
ANR	41651	AssignmentExpression	class_cleanup_handlers [ class_count ] = NULL		41400	0		=			
ANR	41652	ArrayIndexing	class_cleanup_handlers [ class_count ]		41400	0					
ANR	41653	Identifier	class_cleanup_handlers		41400	0					
ANR	41654	Identifier	class_count		41400	1					
ANR	41655	Identifier	NULL		41400	1					
ANR	41656	IfStatement	if ( class_count )		41400	44					
ANR	41657	Condition	class_count	1953:5:51290:51300	41400	0	True				
ANR	41658	Identifier	class_count		41400	0					
ANR	41659	CompoundStatement		58:18:1863:1863	41400	1					
ANR	41660	Statement	ZEND_HASH_FOREACH_PTR	1954:2:51307:51327	41400	0	True				
ANR	41661	Statement	(	1954:23:51328:51328	41400	1	True				
ANR	41662	Statement	CG	1954:24:51329:51330	41400	2	True				
ANR	41663	Statement	(	1954:26:51331:51331	41400	3	True				
ANR	41664	Statement	class_table	1954:27:51332:51342	41400	4	True				
ANR	41665	Statement	)	1954:38:51343:51343	41400	5	True				
ANR	41666	Statement	","	1954:39:51344:51344	41400	6	True				
ANR	41667	Statement	ce	1954:41:51346:51347	41400	7	True				
ANR	41668	Statement	)	1954:43:51348:51348	41400	8	True				
ANR	41669	CompoundStatement		59:45:1910:1910	41400	9					
ANR	41670	IfStatement	if ( ce -> type == ZEND_INTERNAL_CLASS && ce -> default_static_members_count > 0 )		41400	0					
ANR	41671	Condition	ce -> type == ZEND_INTERNAL_CLASS && ce -> default_static_members_count > 0	1955:7:51359:51436	41400	0	True				
ANR	41672	AndExpression	ce -> type == ZEND_INTERNAL_CLASS && ce -> default_static_members_count > 0		41400	0		&&			
ANR	41673	EqualityExpression	ce -> type == ZEND_INTERNAL_CLASS		41400	0		==			
ANR	41674	PtrMemberAccess	ce -> type		41400	0					
ANR	41675	Identifier	ce		41400	0					
ANR	41676	Identifier	type		41400	1					
ANR	41677	Identifier	ZEND_INTERNAL_CLASS		41400	1					
ANR	41678	RelationalExpression	ce -> default_static_members_count > 0		41400	1		>			
ANR	41679	PtrMemberAccess	ce -> default_static_members_count		41400	0					
ANR	41680	Identifier	ce		41400	0					
ANR	41681	Identifier	default_static_members_count		41400	1					
ANR	41682	PrimaryExpression	0		41400	1					
ANR	41683	CompoundStatement		61:45:1999:1999	41400	1					
ANR	41684	ExpressionStatement	class_cleanup_handlers [ -- class_count ] = ce	1957:7:51448:51490	41400	0	True				
ANR	41685	AssignmentExpression	class_cleanup_handlers [ -- class_count ] = ce		41400	0		=			
ANR	41686	ArrayIndexing	class_cleanup_handlers [ -- class_count ]		41400	0					
ANR	41687	Identifier	class_cleanup_handlers		41400	0					
ANR	41688	UnaryExpression	-- class_count		41400	1					
ANR	41689	IncDec	--		41400	0					
ANR	41690	Identifier	class_count		41400	1					
ANR	41691	Identifier	ce		41400	1					
ANR	41692	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	1959:4:51501:51524	41400	10	True				
ANR	41693	CallExpression	ZEND_HASH_FOREACH_END ( )		41400	0					
ANR	41694	Callee	ZEND_HASH_FOREACH_END		41400	0					
ANR	41695	Identifier	ZEND_HASH_FOREACH_END		41400	0					
ANR	41696	ArgumentList			41400	1					
ANR	41697	ReturnType	ZEND_API void		41400	1					
ANR	41698	Identifier	zend_collect_module_handlers		41400	2					
ANR	41699	ParameterList			41400	3					
ANR	41700	CFGEntryNode	ENTRY		41400		True				
ANR	41701	CFGExitNode	EXIT		41400		True				
ANR	41702	Symbol	shutdown_count		41400						
ANR	41703	Symbol	* module_request_shutdown_handlers		41400						
ANR	41704	Symbol	ce -> type		41400						
ANR	41705	Symbol	* class_cleanup_handlers		41400						
ANR	41706	Symbol	ce -> default_static_members_count		41400						
ANR	41707	Symbol	class_cleanup_handlers		41400						
ANR	41708	Symbol	module -> request_startup_func		41400						
ANR	41709	Symbol	module -> request_shutdown_func		41400						
ANR	41710	Symbol	* ce		41400						
ANR	41711	Symbol	* module_post_deactivate_handlers		41400						
ANR	41712	Symbol	* startup_count		41400						
ANR	41713	Symbol	* post_deactivate_count		41400						
ANR	41714	Symbol	module_request_shutdown_handlers		41400						
ANR	41715	Symbol	module_request_startup_handlers		41400						
ANR	41716	Symbol	* shutdown_count		41400						
ANR	41717	Symbol	ZEND_INTERNAL_CLASS		41400						
ANR	41718	Symbol	malloc		41400						
ANR	41719	Symbol	ce		41400						
ANR	41720	Symbol	NULL		41400						
ANR	41721	Symbol	* module_request_startup_handlers		41400						
ANR	41722	Symbol	* module		41400						
ANR	41723	Symbol	module		41400						
ANR	41724	Symbol	startup_count		41400						
ANR	41725	Symbol	module -> post_deactivate_func		41400						
ANR	41726	Symbol	* class_count		41400						
ANR	41727	Symbol	post_deactivate_count		41400						
ANR	41728	Symbol	module_post_deactivate_handlers		41400						
ANR	41729	Symbol	class_count		41400						
ANR	41730	Function	zend_startup_modules	1964:0:51542:51739							
ANR	41731	FunctionDef	zend_startup_modules ()		41730	0					
ANR	41732	CompoundStatement		1965:0:51592:51739	41730	0					
ANR	41733	ExpressionStatement	"zend_hash_sort_ex ( & module_registry , zend_sort_modules , NULL , 0 )"	1966:1:51595:51658	41730	0	True				
ANR	41734	CallExpression	"zend_hash_sort_ex ( & module_registry , zend_sort_modules , NULL , 0 )"		41730	0					
ANR	41735	Callee	zend_hash_sort_ex		41730	0					
ANR	41736	Identifier	zend_hash_sort_ex		41730	0					
ANR	41737	ArgumentList	& module_registry		41730	1					
ANR	41738	Argument	& module_registry		41730	0					
ANR	41739	UnaryOperationExpression	& module_registry		41730	0					
ANR	41740	UnaryOperator	&		41730	0					
ANR	41741	Identifier	module_registry		41730	1					
ANR	41742	Argument	zend_sort_modules		41730	1					
ANR	41743	Identifier	zend_sort_modules		41730	0					
ANR	41744	Argument	NULL		41730	2					
ANR	41745	Identifier	NULL		41730	0					
ANR	41746	Argument	0		41730	3					
ANR	41747	PrimaryExpression	0		41730	0					
ANR	41748	ExpressionStatement	"zend_hash_apply ( & module_registry , zend_startup_module_zval )"	1967:1:51661:51720	41730	1	True				
ANR	41749	CallExpression	"zend_hash_apply ( & module_registry , zend_startup_module_zval )"		41730	0					
ANR	41750	Callee	zend_hash_apply		41730	0					
ANR	41751	Identifier	zend_hash_apply		41730	0					
ANR	41752	ArgumentList	& module_registry		41730	1					
ANR	41753	Argument	& module_registry		41730	0					
ANR	41754	UnaryOperationExpression	& module_registry		41730	0					
ANR	41755	UnaryOperator	&		41730	0					
ANR	41756	Identifier	module_registry		41730	1					
ANR	41757	Argument	zend_startup_module_zval		41730	1					
ANR	41758	Identifier	zend_startup_module_zval		41730	0					
ANR	41759	ReturnStatement	return SUCCESS ;	1968:1:51723:51737	41730	2	True				
ANR	41760	Identifier	SUCCESS		41730	0					
ANR	41761	ReturnType	ZEND_API int		41730	1					
ANR	41762	Identifier	zend_startup_modules		41730	2					
ANR	41763	ParameterList			41730	3					
ANR	41764	CFGEntryNode	ENTRY		41730		True				
ANR	41765	CFGExitNode	EXIT		41730		True				
ANR	41766	Symbol	NULL		41730						
ANR	41767	Symbol	SUCCESS		41730						
ANR	41768	Symbol	zend_sort_modules		41730						
ANR	41769	Symbol	zend_startup_module_zval		41730						
ANR	41770	Symbol	& module_registry		41730						
ANR	41771	Function	zend_destroy_modules	1972:0:51752:51931							
ANR	41772	FunctionDef	zend_destroy_modules ()		41771	0					
ANR	41773	CompoundStatement		1973:0:51803:51931	41771	0					
ANR	41774	ExpressionStatement	free ( class_cleanup_handlers )	1974:1:51806:51834	41771	0	True				
ANR	41775	CallExpression	free ( class_cleanup_handlers )		41771	0					
ANR	41776	Callee	free		41771	0					
ANR	41777	Identifier	free		41771	0					
ANR	41778	ArgumentList	class_cleanup_handlers		41771	1					
ANR	41779	Argument	class_cleanup_handlers		41771	0					
ANR	41780	Identifier	class_cleanup_handlers		41771	0					
ANR	41781	ExpressionStatement	free ( module_request_startup_handlers )	1975:1:51837:51874	41771	1	True				
ANR	41782	CallExpression	free ( module_request_startup_handlers )		41771	0					
ANR	41783	Callee	free		41771	0					
ANR	41784	Identifier	free		41771	0					
ANR	41785	ArgumentList	module_request_startup_handlers		41771	1					
ANR	41786	Argument	module_request_startup_handlers		41771	0					
ANR	41787	Identifier	module_request_startup_handlers		41771	0					
ANR	41788	ExpressionStatement	zend_hash_graceful_reverse_destroy ( & module_registry )	1976:1:51877:51929	41771	2	True				
ANR	41789	CallExpression	zend_hash_graceful_reverse_destroy ( & module_registry )		41771	0					
ANR	41790	Callee	zend_hash_graceful_reverse_destroy		41771	0					
ANR	41791	Identifier	zend_hash_graceful_reverse_destroy		41771	0					
ANR	41792	ArgumentList	& module_registry		41771	1					
ANR	41793	Argument	& module_registry		41771	0					
ANR	41794	UnaryOperationExpression	& module_registry		41771	0					
ANR	41795	UnaryOperator	&		41771	0					
ANR	41796	Identifier	module_registry		41771	1					
ANR	41797	ReturnType	ZEND_API void		41771	1					
ANR	41798	Identifier	zend_destroy_modules		41771	2					
ANR	41799	ParameterList			41771	3					
ANR	41800	CFGEntryNode	ENTRY		41771		True				
ANR	41801	CFGExitNode	EXIT		41771		True				
ANR	41802	Symbol	class_cleanup_handlers		41771						
ANR	41803	Symbol	& module_registry		41771						
ANR	41804	Symbol	module_request_startup_handlers		41771						
ANR	41805	Function	zend_register_module_ex	1980:0:51944:53645							
ANR	41806	FunctionDef	zend_register_module_ex (zend_module_entry * module)		41805	0					
ANR	41807	CompoundStatement		1981:0:52033:53645	41805	0					
ANR	41808	IdentifierDeclStatement	size_t name_len ;	1982:1:52036:52051	41805	0	True				
ANR	41809	IdentifierDecl	name_len		41805	0					
ANR	41810	IdentifierDeclType	size_t		41805	0					
ANR	41811	Identifier	name_len		41805	1					
ANR	41812	IdentifierDeclStatement	zend_string * lcname ;	1983:1:52054:52073	41805	1	True				
ANR	41813	IdentifierDecl	* lcname		41805	0					
ANR	41814	IdentifierDeclType	zend_string *		41805	0					
ANR	41815	Identifier	lcname		41805	1					
ANR	41816	IdentifierDeclStatement	zend_module_entry * module_ptr ;	1984:1:52076:52105	41805	2	True				
ANR	41817	IdentifierDecl	* module_ptr		41805	0					
ANR	41818	IdentifierDeclType	zend_module_entry *		41805	0					
ANR	41819	Identifier	module_ptr		41805	1					
ANR	41820	IfStatement	if ( ! module )		41805	3					
ANR	41821	Condition	! module	1986:5:52113:52119	41805	0	True				
ANR	41822	UnaryOperationExpression	! module		41805	0					
ANR	41823	UnaryOperator	!		41805	0					
ANR	41824	Identifier	module		41805	1					
ANR	41825	CompoundStatement		6:14:88:88	41805	1					
ANR	41826	ReturnStatement	return NULL ;	1987:2:52126:52137	41805	0	True				
ANR	41827	Identifier	NULL		41805	0					
ANR	41828	ExpressionStatement	"zend_printf ( ""%s: Registering module %d\\n"" , module -> name , module -> module_number )"	1991:1:52150:52229	41805	4	True				
ANR	41829	CallExpression	"zend_printf ( ""%s: Registering module %d\\n"" , module -> name , module -> module_number )"		41805	0					
ANR	41830	Callee	zend_printf		41805	0					
ANR	41831	Identifier	zend_printf		41805	0					
ANR	41832	ArgumentList	"""%s: Registering module %d\\n"""		41805	1					
ANR	41833	Argument	"""%s: Registering module %d\\n"""		41805	0					
ANR	41834	PrimaryExpression	"""%s: Registering module %d\\n"""		41805	0					
ANR	41835	Argument	module -> name		41805	1					
ANR	41836	PtrMemberAccess	module -> name		41805	0					
ANR	41837	Identifier	module		41805	0					
ANR	41838	Identifier	name		41805	1					
ANR	41839	Argument	module -> module_number		41805	2					
ANR	41840	PtrMemberAccess	module -> module_number		41805	0					
ANR	41841	Identifier	module		41805	0					
ANR	41842	Identifier	module_number		41805	1					
ANR	41843	IfStatement	if ( module -> deps )		41805	5					
ANR	41844	Condition	module -> deps	1995:5:52277:52288	41805	0	True				
ANR	41845	PtrMemberAccess	module -> deps		41805	0					
ANR	41846	Identifier	module		41805	0					
ANR	41847	Identifier	deps		41805	1					
ANR	41848	CompoundStatement		16:2:261:302	41805	1					
ANR	41849	IdentifierDeclStatement	const zend_module_dep * dep = module -> deps ;	1996:2:52295:52336	41805	0	True				
ANR	41850	IdentifierDecl	* dep = module -> deps		41805	0					
ANR	41851	IdentifierDeclType	const zend_module_dep *		41805	0					
ANR	41852	Identifier	dep		41805	1					
ANR	41853	AssignmentExpression	* dep = module -> deps		41805	2		=			
ANR	41854	Identifier	dep		41805	0					
ANR	41855	PtrMemberAccess	module -> deps		41805	1					
ANR	41856	Identifier	module		41805	0					
ANR	41857	Identifier	deps		41805	1					
ANR	41858	WhileStatement	while ( dep -> name )		41805	1					
ANR	41859	Condition	dep -> name	1998:9:52348:52356	41805	0	True				
ANR	41860	PtrMemberAccess	dep -> name		41805	0					
ANR	41861	Identifier	dep		41805	0					
ANR	41862	Identifier	name		41805	1					
ANR	41863	CompoundStatement		18:20:325:325	41805	1					
ANR	41864	IfStatement	if ( dep -> type == MODULE_DEP_CONFLICTS )		41805	0					
ANR	41865	Condition	dep -> type == MODULE_DEP_CONFLICTS	1999:7:52368:52400	41805	0	True				
ANR	41866	EqualityExpression	dep -> type == MODULE_DEP_CONFLICTS		41805	0		==			
ANR	41867	PtrMemberAccess	dep -> type		41805	0					
ANR	41868	Identifier	dep		41805	0					
ANR	41869	Identifier	type		41805	1					
ANR	41870	Identifier	MODULE_DEP_CONFLICTS		41805	1					
ANR	41871	CompoundStatement		19:42:369:369	41805	1					
ANR	41872	ExpressionStatement	name_len = strlen ( dep -> name )	2000:4:52409:52437	41805	0	True				
ANR	41873	AssignmentExpression	name_len = strlen ( dep -> name )		41805	0		=			
ANR	41874	Identifier	name_len		41805	0					
ANR	41875	CallExpression	strlen ( dep -> name )		41805	1					
ANR	41876	Callee	strlen		41805	0					
ANR	41877	Identifier	strlen		41805	0					
ANR	41878	ArgumentList	dep -> name		41805	1					
ANR	41879	Argument	dep -> name		41805	0					
ANR	41880	PtrMemberAccess	dep -> name		41805	0					
ANR	41881	Identifier	dep		41805	0					
ANR	41882	Identifier	name		41805	1					
ANR	41883	ExpressionStatement	"lcname = zend_string_alloc ( name_len , 0 )"	2001:4:52443:52482	41805	1	True				
ANR	41884	AssignmentExpression	"lcname = zend_string_alloc ( name_len , 0 )"		41805	0		=			
ANR	41885	Identifier	lcname		41805	0					
ANR	41886	CallExpression	"zend_string_alloc ( name_len , 0 )"		41805	1					
ANR	41887	Callee	zend_string_alloc		41805	0					
ANR	41888	Identifier	zend_string_alloc		41805	0					
ANR	41889	ArgumentList	name_len		41805	1					
ANR	41890	Argument	name_len		41805	0					
ANR	41891	Identifier	name_len		41805	0					
ANR	41892	Argument	0		41805	1					
ANR	41893	PrimaryExpression	0		41805	0					
ANR	41894	ExpressionStatement	"zend_str_tolower_copy ( ZSTR_VAL ( lcname ) , dep -> name , name_len )"	2002:4:52488:52548	41805	2	True				
ANR	41895	CallExpression	"zend_str_tolower_copy ( ZSTR_VAL ( lcname ) , dep -> name , name_len )"		41805	0					
ANR	41896	Callee	zend_str_tolower_copy		41805	0					
ANR	41897	Identifier	zend_str_tolower_copy		41805	0					
ANR	41898	ArgumentList	ZSTR_VAL ( lcname )		41805	1					
ANR	41899	Argument	ZSTR_VAL ( lcname )		41805	0					
ANR	41900	CallExpression	ZSTR_VAL ( lcname )		41805	0					
ANR	41901	Callee	ZSTR_VAL		41805	0					
ANR	41902	Identifier	ZSTR_VAL		41805	0					
ANR	41903	ArgumentList	lcname		41805	1					
ANR	41904	Argument	lcname		41805	0					
ANR	41905	Identifier	lcname		41805	0					
ANR	41906	Argument	dep -> name		41805	1					
ANR	41907	PtrMemberAccess	dep -> name		41805	0					
ANR	41908	Identifier	dep		41805	0					
ANR	41909	Identifier	name		41805	1					
ANR	41910	Argument	name_len		41805	2					
ANR	41911	Identifier	name_len		41805	0					
ANR	41912	IfStatement	"if ( zend_hash_exists ( & module_registry , lcname ) )"		41805	3					
ANR	41913	Condition	"zend_hash_exists ( & module_registry , lcname )"	2004:8:52559:52600	41805	0	True				
ANR	41914	CallExpression	"zend_hash_exists ( & module_registry , lcname )"		41805	0					
ANR	41915	Callee	zend_hash_exists		41805	0					
ANR	41916	Identifier	zend_hash_exists		41805	0					
ANR	41917	ArgumentList	& module_registry		41805	1					
ANR	41918	Argument	& module_registry		41805	0					
ANR	41919	UnaryOperationExpression	& module_registry		41805	0					
ANR	41920	UnaryOperator	&		41805	0					
ANR	41921	Identifier	module_registry		41805	1					
ANR	41922	Argument	lcname		41805	1					
ANR	41923	Identifier	lcname		41805	0					
ANR	41924	CompoundStatement		24:52:569:569	41805	1					
ANR	41925	ExpressionStatement	zend_string_free ( lcname )	2005:5:52610:52634	41805	0	True				
ANR	41926	CallExpression	zend_string_free ( lcname )		41805	0					
ANR	41927	Callee	zend_string_free		41805	0					
ANR	41928	Identifier	zend_string_free		41805	0					
ANR	41929	ArgumentList	lcname		41805	1					
ANR	41930	Argument	lcname		41805	0					
ANR	41931	Identifier	lcname		41805	0					
ANR	41932	ExpressionStatement	"zend_error ( E_CORE_WARNING , ""Cannot load module '%s' because conflicting module '%s' is already loaded"" , module -> name , dep -> name )"	2007:5:52685:52813	41805	1	True				
ANR	41933	CallExpression	"zend_error ( E_CORE_WARNING , ""Cannot load module '%s' because conflicting module '%s' is already loaded"" , module -> name , dep -> name )"		41805	0					
ANR	41934	Callee	zend_error		41805	0					
ANR	41935	Identifier	zend_error		41805	0					
ANR	41936	ArgumentList	E_CORE_WARNING		41805	1					
ANR	41937	Argument	E_CORE_WARNING		41805	0					
ANR	41938	Identifier	E_CORE_WARNING		41805	0					
ANR	41939	Argument	"""Cannot load module '%s' because conflicting module '%s' is already loaded"""		41805	1					
ANR	41940	PrimaryExpression	"""Cannot load module '%s' because conflicting module '%s' is already loaded"""		41805	0					
ANR	41941	Argument	module -> name		41805	2					
ANR	41942	PtrMemberAccess	module -> name		41805	0					
ANR	41943	Identifier	module		41805	0					
ANR	41944	Identifier	name		41805	1					
ANR	41945	Argument	dep -> name		41805	3					
ANR	41946	PtrMemberAccess	dep -> name		41805	0					
ANR	41947	Identifier	dep		41805	0					
ANR	41948	Identifier	name		41805	1					
ANR	41949	ReturnStatement	return NULL ;	2008:5:52820:52831	41805	2	True				
ANR	41950	Identifier	NULL		41805	0					
ANR	41951	ExpressionStatement	zend_string_free ( lcname )	2010:4:52843:52867	41805	4	True				
ANR	41952	CallExpression	zend_string_free ( lcname )		41805	0					
ANR	41953	Callee	zend_string_free		41805	0					
ANR	41954	Identifier	zend_string_free		41805	0					
ANR	41955	ArgumentList	lcname		41805	1					
ANR	41956	Argument	lcname		41805	0					
ANR	41957	Identifier	lcname		41805	0					
ANR	41958	ExpressionStatement	++ dep	2012:3:52877:52882	41805	1	True				
ANR	41959	UnaryExpression	++ dep		41805	0					
ANR	41960	IncDec	++		41805	0					
ANR	41961	Identifier	dep		41805	1					
ANR	41962	ExpressionStatement	name_len = strlen ( module -> name )	2016:1:52893:52924	41805	6	True				
ANR	41963	AssignmentExpression	name_len = strlen ( module -> name )		41805	0		=			
ANR	41964	Identifier	name_len		41805	0					
ANR	41965	CallExpression	strlen ( module -> name )		41805	1					
ANR	41966	Callee	strlen		41805	0					
ANR	41967	Identifier	strlen		41805	0					
ANR	41968	ArgumentList	module -> name		41805	1					
ANR	41969	Argument	module -> name		41805	0					
ANR	41970	PtrMemberAccess	module -> name		41805	0					
ANR	41971	Identifier	module		41805	0					
ANR	41972	Identifier	name		41805	1					
ANR	41973	ExpressionStatement	"lcname = zend_string_alloc ( name_len , 1 )"	2017:1:52927:52966	41805	7	True				
ANR	41974	AssignmentExpression	"lcname = zend_string_alloc ( name_len , 1 )"		41805	0		=			
ANR	41975	Identifier	lcname		41805	0					
ANR	41976	CallExpression	"zend_string_alloc ( name_len , 1 )"		41805	1					
ANR	41977	Callee	zend_string_alloc		41805	0					
ANR	41978	Identifier	zend_string_alloc		41805	0					
ANR	41979	ArgumentList	name_len		41805	1					
ANR	41980	Argument	name_len		41805	0					
ANR	41981	Identifier	name_len		41805	0					
ANR	41982	Argument	1		41805	1					
ANR	41983	PrimaryExpression	1		41805	0					
ANR	41984	ExpressionStatement	"zend_str_tolower_copy ( ZSTR_VAL ( lcname ) , module -> name , name_len )"	2018:1:52969:53032	41805	8	True				
ANR	41985	CallExpression	"zend_str_tolower_copy ( ZSTR_VAL ( lcname ) , module -> name , name_len )"		41805	0					
ANR	41986	Callee	zend_str_tolower_copy		41805	0					
ANR	41987	Identifier	zend_str_tolower_copy		41805	0					
ANR	41988	ArgumentList	ZSTR_VAL ( lcname )		41805	1					
ANR	41989	Argument	ZSTR_VAL ( lcname )		41805	0					
ANR	41990	CallExpression	ZSTR_VAL ( lcname )		41805	0					
ANR	41991	Callee	ZSTR_VAL		41805	0					
ANR	41992	Identifier	ZSTR_VAL		41805	0					
ANR	41993	ArgumentList	lcname		41805	1					
ANR	41994	Argument	lcname		41805	0					
ANR	41995	Identifier	lcname		41805	0					
ANR	41996	Argument	module -> name		41805	1					
ANR	41997	PtrMemberAccess	module -> name		41805	0					
ANR	41998	Identifier	module		41805	0					
ANR	41999	Identifier	name		41805	1					
ANR	42000	Argument	name_len		41805	2					
ANR	42001	Identifier	name_len		41805	0					
ANR	42002	IfStatement	"if ( ( module_ptr = zend_hash_add_mem ( & module_registry , lcname , module , sizeof ( zend_module_entry ) ) ) == NULL )"		41805	9					
ANR	42003	Condition	"( module_ptr = zend_hash_add_mem ( & module_registry , lcname , module , sizeof ( zend_module_entry ) ) ) == NULL"	2020:5:53040:53140	41805	0	True				
ANR	42004	EqualityExpression	"( module_ptr = zend_hash_add_mem ( & module_registry , lcname , module , sizeof ( zend_module_entry ) ) ) == NULL"		41805	0		==			
ANR	42005	AssignmentExpression	"module_ptr = zend_hash_add_mem ( & module_registry , lcname , module , sizeof ( zend_module_entry ) )"		41805	0		=			
ANR	42006	Identifier	module_ptr		41805	0					
ANR	42007	CallExpression	"zend_hash_add_mem ( & module_registry , lcname , module , sizeof ( zend_module_entry ) )"		41805	1					
ANR	42008	Callee	zend_hash_add_mem		41805	0					
ANR	42009	Identifier	zend_hash_add_mem		41805	0					
ANR	42010	ArgumentList	& module_registry		41805	1					
ANR	42011	Argument	& module_registry		41805	0					
ANR	42012	UnaryOperationExpression	& module_registry		41805	0					
ANR	42013	UnaryOperator	&		41805	0					
ANR	42014	Identifier	module_registry		41805	1					
ANR	42015	Argument	lcname		41805	1					
ANR	42016	Identifier	lcname		41805	0					
ANR	42017	Argument	module		41805	2					
ANR	42018	Identifier	module		41805	0					
ANR	42019	Argument	sizeof ( zend_module_entry )		41805	3					
ANR	42020	SizeofExpression	sizeof ( zend_module_entry )		41805	0					
ANR	42021	Sizeof	sizeof		41805	0					
ANR	42022	SizeofOperand	zend_module_entry		41805	1					
ANR	42023	Identifier	NULL		41805	1					
ANR	42024	CompoundStatement		40:108:1109:1109	41805	1					
ANR	42025	ExpressionStatement	"zend_error ( E_CORE_WARNING , ""Module '%s' already loaded"" , module -> name )"	2021:2:53147:53217	41805	0	True				
ANR	42026	CallExpression	"zend_error ( E_CORE_WARNING , ""Module '%s' already loaded"" , module -> name )"		41805	0					
ANR	42027	Callee	zend_error		41805	0					
ANR	42028	Identifier	zend_error		41805	0					
ANR	42029	ArgumentList	E_CORE_WARNING		41805	1					
ANR	42030	Argument	E_CORE_WARNING		41805	0					
ANR	42031	Identifier	E_CORE_WARNING		41805	0					
ANR	42032	Argument	"""Module '%s' already loaded"""		41805	1					
ANR	42033	PrimaryExpression	"""Module '%s' already loaded"""		41805	0					
ANR	42034	Argument	module -> name		41805	2					
ANR	42035	PtrMemberAccess	module -> name		41805	0					
ANR	42036	Identifier	module		41805	0					
ANR	42037	Identifier	name		41805	1					
ANR	42038	ExpressionStatement	zend_string_release ( lcname )	2022:2:53221:53248	41805	1	True				
ANR	42039	CallExpression	zend_string_release ( lcname )		41805	0					
ANR	42040	Callee	zend_string_release		41805	0					
ANR	42041	Identifier	zend_string_release		41805	0					
ANR	42042	ArgumentList	lcname		41805	1					
ANR	42043	Argument	lcname		41805	0					
ANR	42044	Identifier	lcname		41805	0					
ANR	42045	ReturnStatement	return NULL ;	2023:2:53252:53263	41805	2	True				
ANR	42046	Identifier	NULL		41805	0					
ANR	42047	ExpressionStatement	zend_string_release ( lcname )	2025:1:53269:53296	41805	10	True				
ANR	42048	CallExpression	zend_string_release ( lcname )		41805	0					
ANR	42049	Callee	zend_string_release		41805	0					
ANR	42050	Identifier	zend_string_release		41805	0					
ANR	42051	ArgumentList	lcname		41805	1					
ANR	42052	Argument	lcname		41805	0					
ANR	42053	Identifier	lcname		41805	0					
ANR	42054	ExpressionStatement	module = module_ptr	2026:1:53299:53318	41805	11	True				
ANR	42055	AssignmentExpression	module = module_ptr		41805	0		=			
ANR	42056	Identifier	module		41805	0					
ANR	42057	Identifier	module_ptr		41805	1					
ANR	42058	ExpressionStatement	EG ( current_module ) = module	2027:1:53321:53348	41805	12	True				
ANR	42059	AssignmentExpression	EG ( current_module ) = module		41805	0		=			
ANR	42060	CallExpression	EG ( current_module )		41805	0					
ANR	42061	Callee	EG		41805	0					
ANR	42062	Identifier	EG		41805	0					
ANR	42063	ArgumentList	current_module		41805	1					
ANR	42064	Argument	current_module		41805	0					
ANR	42065	Identifier	current_module		41805	0					
ANR	42066	Identifier	module		41805	1					
ANR	42067	IfStatement	"if ( module -> functions && zend_register_functions ( NULL , module -> functions , NULL , module -> type ) == FAILURE )"		41805	13					
ANR	42068	Condition	"module -> functions && zend_register_functions ( NULL , module -> functions , NULL , module -> type ) == FAILURE"	2029:5:53356:53453	41805	0	True				
ANR	42069	AndExpression	"module -> functions && zend_register_functions ( NULL , module -> functions , NULL , module -> type ) == FAILURE"		41805	0		&&			
ANR	42070	PtrMemberAccess	module -> functions		41805	0					
ANR	42071	Identifier	module		41805	0					
ANR	42072	Identifier	functions		41805	1					
ANR	42073	EqualityExpression	"zend_register_functions ( NULL , module -> functions , NULL , module -> type ) == FAILURE"		41805	1		==			
ANR	42074	CallExpression	"zend_register_functions ( NULL , module -> functions , NULL , module -> type )"		41805	0					
ANR	42075	Callee	zend_register_functions		41805	0					
ANR	42076	Identifier	zend_register_functions		41805	0					
ANR	42077	ArgumentList	NULL		41805	1					
ANR	42078	Argument	NULL		41805	0					
ANR	42079	Identifier	NULL		41805	0					
ANR	42080	Argument	module -> functions		41805	1					
ANR	42081	PtrMemberAccess	module -> functions		41805	0					
ANR	42082	Identifier	module		41805	0					
ANR	42083	Identifier	functions		41805	1					
ANR	42084	Argument	NULL		41805	2					
ANR	42085	Identifier	NULL		41805	0					
ANR	42086	Argument	module -> type		41805	3					
ANR	42087	PtrMemberAccess	module -> type		41805	0					
ANR	42088	Identifier	module		41805	0					
ANR	42089	Identifier	type		41805	1					
ANR	42090	Identifier	FAILURE		41805	1					
ANR	42091	CompoundStatement		49:105:1422:1422	41805	1					
ANR	42092	ExpressionStatement	EG ( current_module ) = NULL	2030:2:53460:53485	41805	0	True				
ANR	42093	AssignmentExpression	EG ( current_module ) = NULL		41805	0		=			
ANR	42094	CallExpression	EG ( current_module )		41805	0					
ANR	42095	Callee	EG		41805	0					
ANR	42096	Identifier	EG		41805	0					
ANR	42097	ArgumentList	current_module		41805	1					
ANR	42098	Argument	current_module		41805	0					
ANR	42099	Identifier	current_module		41805	0					
ANR	42100	Identifier	NULL		41805	1					
ANR	42101	ExpressionStatement	"zend_error ( E_CORE_WARNING , ""%s: Unable to register functions, unable to load"" , module -> name )"	2031:2:53489:53580	41805	1	True				
ANR	42102	CallExpression	"zend_error ( E_CORE_WARNING , ""%s: Unable to register functions, unable to load"" , module -> name )"		41805	0					
ANR	42103	Callee	zend_error		41805	0					
ANR	42104	Identifier	zend_error		41805	0					
ANR	42105	ArgumentList	E_CORE_WARNING		41805	1					
ANR	42106	Argument	E_CORE_WARNING		41805	0					
ANR	42107	Identifier	E_CORE_WARNING		41805	0					
ANR	42108	Argument	"""%s: Unable to register functions, unable to load"""		41805	1					
ANR	42109	PrimaryExpression	"""%s: Unable to register functions, unable to load"""		41805	0					
ANR	42110	Argument	module -> name		41805	2					
ANR	42111	PtrMemberAccess	module -> name		41805	0					
ANR	42112	Identifier	module		41805	0					
ANR	42113	Identifier	name		41805	1					
ANR	42114	ReturnStatement	return NULL ;	2032:2:53584:53595	41805	2	True				
ANR	42115	Identifier	NULL		41805	0					
ANR	42116	ExpressionStatement	EG ( current_module ) = NULL	2035:1:53602:53627	41805	14	True				
ANR	42117	AssignmentExpression	EG ( current_module ) = NULL		41805	0		=			
ANR	42118	CallExpression	EG ( current_module )		41805	0					
ANR	42119	Callee	EG		41805	0					
ANR	42120	Identifier	EG		41805	0					
ANR	42121	ArgumentList	current_module		41805	1					
ANR	42122	Argument	current_module		41805	0					
ANR	42123	Identifier	current_module		41805	0					
ANR	42124	Identifier	NULL		41805	1					
ANR	42125	ReturnStatement	return module ;	2036:1:53630:53643	41805	15	True				
ANR	42126	Identifier	module		41805	0					
ANR	42127	ReturnType	ZEND_API zend_module_entry *		41805	1					
ANR	42128	Identifier	zend_register_module_ex		41805	2					
ANR	42129	ParameterList	zend_module_entry * module		41805	3					
ANR	42130	Parameter	zend_module_entry * module	1980:52:51996:52020	41805	0	True				
ANR	42131	ParameterType	zend_module_entry *		41805	0					
ANR	42132	Identifier	module		41805	1					
ANR	42133	CFGEntryNode	ENTRY		41805		True				
ANR	42134	CFGExitNode	EXIT		41805		True				
ANR	42135	Symbol	* dep		41805						
ANR	42136	Symbol	E_CORE_WARNING		41805						
ANR	42137	Symbol	zend_hash_exists		41805						
ANR	42138	Symbol	current_module		41805						
ANR	42139	Symbol	dep		41805						
ANR	42140	Symbol	module -> functions		41805						
ANR	42141	Symbol	strlen		41805						
ANR	42142	Symbol	zend_register_functions		41805						
ANR	42143	Symbol	name_len		41805						
ANR	42144	Symbol	dep -> type		41805						
ANR	42145	Symbol	module -> type		41805						
ANR	42146	Symbol	module -> deps		41805						
ANR	42147	Symbol	zend_string_alloc		41805						
ANR	42148	Symbol	zend_hash_add_mem		41805						
ANR	42149	Symbol	EG		41805						
ANR	42150	Symbol	NULL		41805						
ANR	42151	Symbol	module -> name		41805						
ANR	42152	Symbol	* module		41805						
ANR	42153	Symbol	module		41805						
ANR	42154	Symbol	& module_registry		41805						
ANR	42155	Symbol	dep -> name		41805						
ANR	42156	Symbol	FAILURE		41805						
ANR	42157	Symbol	ZSTR_VAL		41805						
ANR	42158	Symbol	lcname		41805						
ANR	42159	Symbol	module -> module_number		41805						
ANR	42160	Symbol	module_ptr		41805						
ANR	42161	Symbol	MODULE_DEP_CONFLICTS		41805						
ANR	42162	Function	zend_register_internal_module	2040:0:53658:53881							
ANR	42163	FunctionDef	zend_register_internal_module (zend_module_entry * module)		42162	0					
ANR	42164	CompoundStatement		2041:0:53753:53881	42162	0					
ANR	42165	ExpressionStatement	module -> module_number = zend_next_free_module ( )	2042:1:53756:53803	42162	0	True				
ANR	42166	AssignmentExpression	module -> module_number = zend_next_free_module ( )		42162	0		=			
ANR	42167	PtrMemberAccess	module -> module_number		42162	0					
ANR	42168	Identifier	module		42162	0					
ANR	42169	Identifier	module_number		42162	1					
ANR	42170	CallExpression	zend_next_free_module ( )		42162	1					
ANR	42171	Callee	zend_next_free_module		42162	0					
ANR	42172	Identifier	zend_next_free_module		42162	0					
ANR	42173	ArgumentList			42162	1					
ANR	42174	ExpressionStatement	module -> type = MODULE_PERSISTENT	2043:1:53806:53838	42162	1	True				
ANR	42175	AssignmentExpression	module -> type = MODULE_PERSISTENT		42162	0		=			
ANR	42176	PtrMemberAccess	module -> type		42162	0					
ANR	42177	Identifier	module		42162	0					
ANR	42178	Identifier	type		42162	1					
ANR	42179	Identifier	MODULE_PERSISTENT		42162	1					
ANR	42180	ReturnStatement	return zend_register_module_ex ( module ) ;	2044:1:53841:53879	42162	2	True				
ANR	42181	CallExpression	zend_register_module_ex ( module )		42162	0					
ANR	42182	Callee	zend_register_module_ex		42162	0					
ANR	42183	Identifier	zend_register_module_ex		42162	0					
ANR	42184	ArgumentList	module		42162	1					
ANR	42185	Argument	module		42162	0					
ANR	42186	Identifier	module		42162	0					
ANR	42187	ReturnType	ZEND_API zend_module_entry *		42162	1					
ANR	42188	Identifier	zend_register_internal_module		42162	2					
ANR	42189	ParameterList	zend_module_entry * module		42162	3					
ANR	42190	Parameter	zend_module_entry * module	2040:58:53716:53740	42162	0	True				
ANR	42191	ParameterType	zend_module_entry *		42162	0					
ANR	42192	Identifier	module		42162	1					
ANR	42193	CFGEntryNode	ENTRY		42162		True				
ANR	42194	CFGExitNode	EXIT		42162		True				
ANR	42195	Symbol	zend_next_free_module		42162						
ANR	42196	Symbol	module -> module_number		42162						
ANR	42197	Symbol	* module		42162						
ANR	42198	Symbol	module		42162						
ANR	42199	Symbol	MODULE_PERSISTENT		42162						
ANR	42200	Symbol	module -> type		42162						
ANR	42201	Symbol	zend_register_module_ex		42162						
ANR	42202	Function	zend_check_magic_method_implementation	2048:0:53894:58490							
ANR	42203	FunctionDef	"zend_check_magic_method_implementation (const zend_class_entry * ce , const zend_function * fptr , int error_type)"		42202	0					
ANR	42204	CompoundStatement		2049:0:54028:58490	42202	0					
ANR	42205	IdentifierDeclStatement	char lcname [ 16 ] ;	2050:1:54031:54046	42202	0	True				
ANR	42206	IdentifierDecl	lcname [ 16 ]		42202	0					
ANR	42207	IdentifierDeclType	char [ 16 ]		42202	0					
ANR	42208	Identifier	lcname		42202	1					
ANR	42209	PrimaryExpression	16		42202	2					
ANR	42210	IdentifierDeclStatement	size_t name_len ;	2051:1:54049:54064	42202	1	True				
ANR	42211	IdentifierDecl	name_len		42202	0					
ANR	42212	IdentifierDeclType	size_t		42202	0					
ANR	42213	Identifier	name_len		42202	1					
ANR	42214	ExpressionStatement	name_len = ZSTR_LEN ( fptr -> common . function_name )	2055:1:54204:54251	42202	2	True				
ANR	42215	AssignmentExpression	name_len = ZSTR_LEN ( fptr -> common . function_name )		42202	0		=			
ANR	42216	Identifier	name_len		42202	0					
ANR	42217	CallExpression	ZSTR_LEN ( fptr -> common . function_name )		42202	1					
ANR	42218	Callee	ZSTR_LEN		42202	0					
ANR	42219	Identifier	ZSTR_LEN		42202	0					
ANR	42220	ArgumentList	fptr -> common . function_name		42202	1					
ANR	42221	Argument	fptr -> common . function_name		42202	0					
ANR	42222	MemberAccess	fptr -> common . function_name		42202	0					
ANR	42223	PtrMemberAccess	fptr -> common		42202	0					
ANR	42224	Identifier	fptr		42202	0					
ANR	42225	Identifier	common		42202	1					
ANR	42226	Identifier	function_name		42202	1					
ANR	42227	ExpressionStatement	"zend_str_tolower_copy ( lcname , ZSTR_VAL ( fptr -> common . function_name ) , MIN ( name_len , sizeof ( lcname ) - 1 ) )"	2056:1:54254:54354	42202	3	True				
ANR	42228	CallExpression	"zend_str_tolower_copy ( lcname , ZSTR_VAL ( fptr -> common . function_name ) , MIN ( name_len , sizeof ( lcname ) - 1 ) )"		42202	0					
ANR	42229	Callee	zend_str_tolower_copy		42202	0					
ANR	42230	Identifier	zend_str_tolower_copy		42202	0					
ANR	42231	ArgumentList	lcname		42202	1					
ANR	42232	Argument	lcname		42202	0					
ANR	42233	Identifier	lcname		42202	0					
ANR	42234	Argument	ZSTR_VAL ( fptr -> common . function_name )		42202	1					
ANR	42235	CallExpression	ZSTR_VAL ( fptr -> common . function_name )		42202	0					
ANR	42236	Callee	ZSTR_VAL		42202	0					
ANR	42237	Identifier	ZSTR_VAL		42202	0					
ANR	42238	ArgumentList	fptr -> common . function_name		42202	1					
ANR	42239	Argument	fptr -> common . function_name		42202	0					
ANR	42240	MemberAccess	fptr -> common . function_name		42202	0					
ANR	42241	PtrMemberAccess	fptr -> common		42202	0					
ANR	42242	Identifier	fptr		42202	0					
ANR	42243	Identifier	common		42202	1					
ANR	42244	Identifier	function_name		42202	1					
ANR	42245	Argument	"MIN ( name_len , sizeof ( lcname ) - 1 )"		42202	2					
ANR	42246	CallExpression	"MIN ( name_len , sizeof ( lcname ) - 1 )"		42202	0					
ANR	42247	Callee	MIN		42202	0					
ANR	42248	Identifier	MIN		42202	0					
ANR	42249	ArgumentList	name_len		42202	1					
ANR	42250	Argument	name_len		42202	0					
ANR	42251	Identifier	name_len		42202	0					
ANR	42252	Argument	sizeof ( lcname ) - 1		42202	1					
ANR	42253	AdditiveExpression	sizeof ( lcname ) - 1		42202	0		-			
ANR	42254	SizeofExpression	sizeof ( lcname )		42202	0					
ANR	42255	Sizeof	sizeof		42202	0					
ANR	42256	SizeofOperand	lcname		42202	1					
ANR	42257	PrimaryExpression	1		42202	1					
ANR	42258	ExpressionStatement	lcname [ sizeof ( lcname ) - 1 ] = '\\0'	2057:1:54357:54388	42202	4	True				
ANR	42259	AssignmentExpression	lcname [ sizeof ( lcname ) - 1 ] = '\\0'		42202	0		=			
ANR	42260	ArrayIndexing	lcname [ sizeof ( lcname ) - 1 ]		42202	0					
ANR	42261	Identifier	lcname		42202	0					
ANR	42262	AdditiveExpression	sizeof ( lcname ) - 1		42202	1		-			
ANR	42263	SizeofExpression	sizeof ( lcname )		42202	0					
ANR	42264	Sizeof	sizeof		42202	0					
ANR	42265	SizeofOperand	lcname		42202	1					
ANR	42266	PrimaryExpression	1		42202	1					
ANR	42267	PrimaryExpression	'\\0'		42202	1					
ANR	42268	IfStatement	"if ( name_len == sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_DESTRUCTOR_FUNC_NAME , sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0 )"		42202	5					
ANR	42269	Condition	"name_len == sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_DESTRUCTOR_FUNC_NAME , sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"	2059:5:54460:54623	42202	0	True				
ANR	42270	AndExpression	"name_len == sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_DESTRUCTOR_FUNC_NAME , sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"		42202	0		&&			
ANR	42271	EqualityExpression	name_len == sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1		42202	0		==			
ANR	42272	Identifier	name_len		42202	0					
ANR	42273	AdditiveExpression	sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1		42202	1		-			
ANR	42274	SizeofExpression	sizeof ( ZEND_DESTRUCTOR_FUNC_NAME )		42202	0					
ANR	42275	Sizeof	sizeof		42202	0					
ANR	42276	SizeofOperand	ZEND_DESTRUCTOR_FUNC_NAME		42202	1					
ANR	42277	PrimaryExpression	1		42202	1					
ANR	42278	AndExpression	"! memcmp ( lcname , ZEND_DESTRUCTOR_FUNC_NAME , sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"		42202	1		&&			
ANR	42279	UnaryOperationExpression	"! memcmp ( lcname , ZEND_DESTRUCTOR_FUNC_NAME , sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 )"		42202	0					
ANR	42280	UnaryOperator	!		42202	0					
ANR	42281	CallExpression	"memcmp ( lcname , ZEND_DESTRUCTOR_FUNC_NAME , sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1 )"		42202	1					
ANR	42282	Callee	memcmp		42202	0					
ANR	42283	Identifier	memcmp		42202	0					
ANR	42284	ArgumentList	lcname		42202	1					
ANR	42285	Argument	lcname		42202	0					
ANR	42286	Identifier	lcname		42202	0					
ANR	42287	Argument	ZEND_DESTRUCTOR_FUNC_NAME		42202	1					
ANR	42288	Identifier	ZEND_DESTRUCTOR_FUNC_NAME		42202	0					
ANR	42289	Argument	sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1		42202	2					
ANR	42290	AdditiveExpression	sizeof ( ZEND_DESTRUCTOR_FUNC_NAME ) - 1		42202	0		-			
ANR	42291	SizeofExpression	sizeof ( ZEND_DESTRUCTOR_FUNC_NAME )		42202	0					
ANR	42292	Sizeof	sizeof		42202	0					
ANR	42293	SizeofOperand	ZEND_DESTRUCTOR_FUNC_NAME		42202	1					
ANR	42294	PrimaryExpression	1		42202	1					
ANR	42295	EqualityExpression	fptr -> common . num_args != 0		42202	1		!=			
ANR	42296	MemberAccess	fptr -> common . num_args		42202	0					
ANR	42297	PtrMemberAccess	fptr -> common		42202	0					
ANR	42298	Identifier	fptr		42202	0					
ANR	42299	Identifier	common		42202	1					
ANR	42300	Identifier	num_args		42202	1					
ANR	42301	PrimaryExpression	0		42202	1					
ANR	42302	CompoundStatement		11:171:597:597	42202	1					
ANR	42303	ExpressionStatement	"zend_error ( error_type , ""Destructor %s::%s() cannot take arguments"" , ZSTR_VAL ( ce -> name ) , ZEND_DESTRUCTOR_FUNC_NAME )"	2060:2:54630:54744	42202	0	True				
ANR	42304	CallExpression	"zend_error ( error_type , ""Destructor %s::%s() cannot take arguments"" , ZSTR_VAL ( ce -> name ) , ZEND_DESTRUCTOR_FUNC_NAME )"		42202	0					
ANR	42305	Callee	zend_error		42202	0					
ANR	42306	Identifier	zend_error		42202	0					
ANR	42307	ArgumentList	error_type		42202	1					
ANR	42308	Argument	error_type		42202	0					
ANR	42309	Identifier	error_type		42202	0					
ANR	42310	Argument	"""Destructor %s::%s() cannot take arguments"""		42202	1					
ANR	42311	PrimaryExpression	"""Destructor %s::%s() cannot take arguments"""		42202	0					
ANR	42312	Argument	ZSTR_VAL ( ce -> name )		42202	2					
ANR	42313	CallExpression	ZSTR_VAL ( ce -> name )		42202	0					
ANR	42314	Callee	ZSTR_VAL		42202	0					
ANR	42315	Identifier	ZSTR_VAL		42202	0					
ANR	42316	ArgumentList	ce -> name		42202	1					
ANR	42317	Argument	ce -> name		42202	0					
ANR	42318	PtrMemberAccess	ce -> name		42202	0					
ANR	42319	Identifier	ce		42202	0					
ANR	42320	Identifier	name		42202	1					
ANR	42321	Argument	ZEND_DESTRUCTOR_FUNC_NAME		42202	3					
ANR	42322	Identifier	ZEND_DESTRUCTOR_FUNC_NAME		42202	0					
ANR	42323	ElseStatement	else		42202	0					
ANR	42324	IfStatement	"if ( name_len == sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_CLONE_FUNC_NAME , sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0 )"		42202	0					
ANR	42325	Condition	"name_len == sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_CLONE_FUNC_NAME , sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"	2061:12:54758:54906	42202	0	True				
ANR	42326	AndExpression	"name_len == sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_CLONE_FUNC_NAME , sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"		42202	0		&&			
ANR	42327	EqualityExpression	name_len == sizeof ( ZEND_CLONE_FUNC_NAME ) - 1		42202	0		==			
ANR	42328	Identifier	name_len		42202	0					
ANR	42329	AdditiveExpression	sizeof ( ZEND_CLONE_FUNC_NAME ) - 1		42202	1		-			
ANR	42330	SizeofExpression	sizeof ( ZEND_CLONE_FUNC_NAME )		42202	0					
ANR	42331	Sizeof	sizeof		42202	0					
ANR	42332	SizeofOperand	ZEND_CLONE_FUNC_NAME		42202	1					
ANR	42333	PrimaryExpression	1		42202	1					
ANR	42334	AndExpression	"! memcmp ( lcname , ZEND_CLONE_FUNC_NAME , sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"		42202	1		&&			
ANR	42335	UnaryOperationExpression	"! memcmp ( lcname , ZEND_CLONE_FUNC_NAME , sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 )"		42202	0					
ANR	42336	UnaryOperator	!		42202	0					
ANR	42337	CallExpression	"memcmp ( lcname , ZEND_CLONE_FUNC_NAME , sizeof ( ZEND_CLONE_FUNC_NAME ) - 1 )"		42202	1					
ANR	42338	Callee	memcmp		42202	0					
ANR	42339	Identifier	memcmp		42202	0					
ANR	42340	ArgumentList	lcname		42202	1					
ANR	42341	Argument	lcname		42202	0					
ANR	42342	Identifier	lcname		42202	0					
ANR	42343	Argument	ZEND_CLONE_FUNC_NAME		42202	1					
ANR	42344	Identifier	ZEND_CLONE_FUNC_NAME		42202	0					
ANR	42345	Argument	sizeof ( ZEND_CLONE_FUNC_NAME ) - 1		42202	2					
ANR	42346	AdditiveExpression	sizeof ( ZEND_CLONE_FUNC_NAME ) - 1		42202	0		-			
ANR	42347	SizeofExpression	sizeof ( ZEND_CLONE_FUNC_NAME )		42202	0					
ANR	42348	Sizeof	sizeof		42202	0					
ANR	42349	SizeofOperand	ZEND_CLONE_FUNC_NAME		42202	1					
ANR	42350	PrimaryExpression	1		42202	1					
ANR	42351	EqualityExpression	fptr -> common . num_args != 0		42202	1		!=			
ANR	42352	MemberAccess	fptr -> common . num_args		42202	0					
ANR	42353	PtrMemberAccess	fptr -> common		42202	0					
ANR	42354	Identifier	fptr		42202	0					
ANR	42355	Identifier	common		42202	1					
ANR	42356	Identifier	num_args		42202	1					
ANR	42357	PrimaryExpression	0		42202	1					
ANR	42358	CompoundStatement		13:163:880:880	42202	1					
ANR	42359	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot accept any arguments"" , ZSTR_VAL ( ce -> name ) , ZEND_CLONE_FUNC_NAME )"	2062:2:54913:55024	42202	0	True				
ANR	42360	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot accept any arguments"" , ZSTR_VAL ( ce -> name ) , ZEND_CLONE_FUNC_NAME )"		42202	0					
ANR	42361	Callee	zend_error		42202	0					
ANR	42362	Identifier	zend_error		42202	0					
ANR	42363	ArgumentList	error_type		42202	1					
ANR	42364	Argument	error_type		42202	0					
ANR	42365	Identifier	error_type		42202	0					
ANR	42366	Argument	"""Method %s::%s() cannot accept any arguments"""		42202	1					
ANR	42367	PrimaryExpression	"""Method %s::%s() cannot accept any arguments"""		42202	0					
ANR	42368	Argument	ZSTR_VAL ( ce -> name )		42202	2					
ANR	42369	CallExpression	ZSTR_VAL ( ce -> name )		42202	0					
ANR	42370	Callee	ZSTR_VAL		42202	0					
ANR	42371	Identifier	ZSTR_VAL		42202	0					
ANR	42372	ArgumentList	ce -> name		42202	1					
ANR	42373	Argument	ce -> name		42202	0					
ANR	42374	PtrMemberAccess	ce -> name		42202	0					
ANR	42375	Identifier	ce		42202	0					
ANR	42376	Identifier	name		42202	1					
ANR	42377	Argument	ZEND_CLONE_FUNC_NAME		42202	3					
ANR	42378	Identifier	ZEND_CLONE_FUNC_NAME		42202	0					
ANR	42379	ElseStatement	else		42202	0					
ANR	42380	IfStatement	"if ( name_len == sizeof ( ZEND_GET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_GET_FUNC_NAME , sizeof ( ZEND_GET_FUNC_NAME ) - 1 ) )"		42202	0					
ANR	42381	Condition	"name_len == sizeof ( ZEND_GET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_GET_FUNC_NAME , sizeof ( ZEND_GET_FUNC_NAME ) - 1 )"	2063:12:55038:55150	42202	0	True				
ANR	42382	AndExpression	"name_len == sizeof ( ZEND_GET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_GET_FUNC_NAME , sizeof ( ZEND_GET_FUNC_NAME ) - 1 )"		42202	0		&&			
ANR	42383	EqualityExpression	name_len == sizeof ( ZEND_GET_FUNC_NAME ) - 1		42202	0		==			
ANR	42384	Identifier	name_len		42202	0					
ANR	42385	AdditiveExpression	sizeof ( ZEND_GET_FUNC_NAME ) - 1		42202	1		-			
ANR	42386	SizeofExpression	sizeof ( ZEND_GET_FUNC_NAME )		42202	0					
ANR	42387	Sizeof	sizeof		42202	0					
ANR	42388	SizeofOperand	ZEND_GET_FUNC_NAME		42202	1					
ANR	42389	PrimaryExpression	1		42202	1					
ANR	42390	UnaryOperationExpression	"! memcmp ( lcname , ZEND_GET_FUNC_NAME , sizeof ( ZEND_GET_FUNC_NAME ) - 1 )"		42202	1					
ANR	42391	UnaryOperator	!		42202	0					
ANR	42392	CallExpression	"memcmp ( lcname , ZEND_GET_FUNC_NAME , sizeof ( ZEND_GET_FUNC_NAME ) - 1 )"		42202	1					
ANR	42393	Callee	memcmp		42202	0					
ANR	42394	Identifier	memcmp		42202	0					
ANR	42395	ArgumentList	lcname		42202	1					
ANR	42396	Argument	lcname		42202	0					
ANR	42397	Identifier	lcname		42202	0					
ANR	42398	Argument	ZEND_GET_FUNC_NAME		42202	1					
ANR	42399	Identifier	ZEND_GET_FUNC_NAME		42202	0					
ANR	42400	Argument	sizeof ( ZEND_GET_FUNC_NAME ) - 1		42202	2					
ANR	42401	AdditiveExpression	sizeof ( ZEND_GET_FUNC_NAME ) - 1		42202	0		-			
ANR	42402	SizeofExpression	sizeof ( ZEND_GET_FUNC_NAME )		42202	0					
ANR	42403	Sizeof	sizeof		42202	0					
ANR	42404	SizeofOperand	ZEND_GET_FUNC_NAME		42202	1					
ANR	42405	PrimaryExpression	1		42202	1					
ANR	42406	CompoundStatement		15:127:1124:1124	42202	1					
ANR	42407	IfStatement	if ( fptr -> common . num_args != 1 )		42202	0					
ANR	42408	Condition	fptr -> common . num_args != 1	2064:6:55161:55186	42202	0	True				
ANR	42409	EqualityExpression	fptr -> common . num_args != 1		42202	0		!=			
ANR	42410	MemberAccess	fptr -> common . num_args		42202	0					
ANR	42411	PtrMemberAccess	fptr -> common		42202	0					
ANR	42412	Identifier	fptr		42202	0					
ANR	42413	Identifier	common		42202	1					
ANR	42414	Identifier	num_args		42202	1					
ANR	42415	PrimaryExpression	1		42202	1					
ANR	42416	CompoundStatement		16:34:1160:1160	42202	1					
ANR	42417	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() must take exactly 1 argument"" , ZSTR_VAL ( ce -> name ) , ZEND_GET_FUNC_NAME )"	2065:3:55194:55304	42202	0	True				
ANR	42418	CallExpression	"zend_error ( error_type , ""Method %s::%s() must take exactly 1 argument"" , ZSTR_VAL ( ce -> name ) , ZEND_GET_FUNC_NAME )"		42202	0					
ANR	42419	Callee	zend_error		42202	0					
ANR	42420	Identifier	zend_error		42202	0					
ANR	42421	ArgumentList	error_type		42202	1					
ANR	42422	Argument	error_type		42202	0					
ANR	42423	Identifier	error_type		42202	0					
ANR	42424	Argument	"""Method %s::%s() must take exactly 1 argument"""		42202	1					
ANR	42425	PrimaryExpression	"""Method %s::%s() must take exactly 1 argument"""		42202	0					
ANR	42426	Argument	ZSTR_VAL ( ce -> name )		42202	2					
ANR	42427	CallExpression	ZSTR_VAL ( ce -> name )		42202	0					
ANR	42428	Callee	ZSTR_VAL		42202	0					
ANR	42429	Identifier	ZSTR_VAL		42202	0					
ANR	42430	ArgumentList	ce -> name		42202	1					
ANR	42431	Argument	ce -> name		42202	0					
ANR	42432	PtrMemberAccess	ce -> name		42202	0					
ANR	42433	Identifier	ce		42202	0					
ANR	42434	Identifier	name		42202	1					
ANR	42435	Argument	ZEND_GET_FUNC_NAME		42202	3					
ANR	42436	Identifier	ZEND_GET_FUNC_NAME		42202	0					
ANR	42437	ElseStatement	else		42202	0					
ANR	42438	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) )"		42202	0					
ANR	42439	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 )"	2066:13:55319:55352	42202	0	True				
ANR	42440	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 )"		42202	0					
ANR	42441	Callee	ARG_SHOULD_BE_SENT_BY_REF		42202	0					
ANR	42442	Identifier	ARG_SHOULD_BE_SENT_BY_REF		42202	0					
ANR	42443	ArgumentList	fptr		42202	1					
ANR	42444	Argument	fptr		42202	0					
ANR	42445	Identifier	fptr		42202	0					
ANR	42446	Argument	1		42202	1					
ANR	42447	PrimaryExpression	1		42202	0					
ANR	42448	CompoundStatement		18:49:1326:1326	42202	1					
ANR	42449	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ZSTR_VAL ( ce -> name ) , ZEND_GET_FUNC_NAME )"	2067:3:55360:55476	42202	0	True				
ANR	42450	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ZSTR_VAL ( ce -> name ) , ZEND_GET_FUNC_NAME )"		42202	0					
ANR	42451	Callee	zend_error		42202	0					
ANR	42452	Identifier	zend_error		42202	0					
ANR	42453	ArgumentList	error_type		42202	1					
ANR	42454	Argument	error_type		42202	0					
ANR	42455	Identifier	error_type		42202	0					
ANR	42456	Argument	"""Method %s::%s() cannot take arguments by reference"""		42202	1					
ANR	42457	PrimaryExpression	"""Method %s::%s() cannot take arguments by reference"""		42202	0					
ANR	42458	Argument	ZSTR_VAL ( ce -> name )		42202	2					
ANR	42459	CallExpression	ZSTR_VAL ( ce -> name )		42202	0					
ANR	42460	Callee	ZSTR_VAL		42202	0					
ANR	42461	Identifier	ZSTR_VAL		42202	0					
ANR	42462	ArgumentList	ce -> name		42202	1					
ANR	42463	Argument	ce -> name		42202	0					
ANR	42464	PtrMemberAccess	ce -> name		42202	0					
ANR	42465	Identifier	ce		42202	0					
ANR	42466	Identifier	name		42202	1					
ANR	42467	Argument	ZEND_GET_FUNC_NAME		42202	3					
ANR	42468	Identifier	ZEND_GET_FUNC_NAME		42202	0					
ANR	42469	ElseStatement	else		42202	0					
ANR	42470	IfStatement	"if ( name_len == sizeof ( ZEND_SET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_SET_FUNC_NAME , sizeof ( ZEND_SET_FUNC_NAME ) - 1 ) )"		42202	0					
ANR	42471	Condition	"name_len == sizeof ( ZEND_SET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_SET_FUNC_NAME , sizeof ( ZEND_SET_FUNC_NAME ) - 1 )"	2069:12:55494:55606	42202	0	True				
ANR	42472	AndExpression	"name_len == sizeof ( ZEND_SET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_SET_FUNC_NAME , sizeof ( ZEND_SET_FUNC_NAME ) - 1 )"		42202	0		&&			
ANR	42473	EqualityExpression	name_len == sizeof ( ZEND_SET_FUNC_NAME ) - 1		42202	0		==			
ANR	42474	Identifier	name_len		42202	0					
ANR	42475	AdditiveExpression	sizeof ( ZEND_SET_FUNC_NAME ) - 1		42202	1		-			
ANR	42476	SizeofExpression	sizeof ( ZEND_SET_FUNC_NAME )		42202	0					
ANR	42477	Sizeof	sizeof		42202	0					
ANR	42478	SizeofOperand	ZEND_SET_FUNC_NAME		42202	1					
ANR	42479	PrimaryExpression	1		42202	1					
ANR	42480	UnaryOperationExpression	"! memcmp ( lcname , ZEND_SET_FUNC_NAME , sizeof ( ZEND_SET_FUNC_NAME ) - 1 )"		42202	1					
ANR	42481	UnaryOperator	!		42202	0					
ANR	42482	CallExpression	"memcmp ( lcname , ZEND_SET_FUNC_NAME , sizeof ( ZEND_SET_FUNC_NAME ) - 1 )"		42202	1					
ANR	42483	Callee	memcmp		42202	0					
ANR	42484	Identifier	memcmp		42202	0					
ANR	42485	ArgumentList	lcname		42202	1					
ANR	42486	Argument	lcname		42202	0					
ANR	42487	Identifier	lcname		42202	0					
ANR	42488	Argument	ZEND_SET_FUNC_NAME		42202	1					
ANR	42489	Identifier	ZEND_SET_FUNC_NAME		42202	0					
ANR	42490	Argument	sizeof ( ZEND_SET_FUNC_NAME ) - 1		42202	2					
ANR	42491	AdditiveExpression	sizeof ( ZEND_SET_FUNC_NAME ) - 1		42202	0		-			
ANR	42492	SizeofExpression	sizeof ( ZEND_SET_FUNC_NAME )		42202	0					
ANR	42493	Sizeof	sizeof		42202	0					
ANR	42494	SizeofOperand	ZEND_SET_FUNC_NAME		42202	1					
ANR	42495	PrimaryExpression	1		42202	1					
ANR	42496	CompoundStatement		21:127:1580:1580	42202	1					
ANR	42497	IfStatement	if ( fptr -> common . num_args != 2 )		42202	0					
ANR	42498	Condition	fptr -> common . num_args != 2	2070:6:55617:55642	42202	0	True				
ANR	42499	EqualityExpression	fptr -> common . num_args != 2		42202	0		!=			
ANR	42500	MemberAccess	fptr -> common . num_args		42202	0					
ANR	42501	PtrMemberAccess	fptr -> common		42202	0					
ANR	42502	Identifier	fptr		42202	0					
ANR	42503	Identifier	common		42202	1					
ANR	42504	Identifier	num_args		42202	1					
ANR	42505	PrimaryExpression	2		42202	1					
ANR	42506	CompoundStatement		22:34:1616:1616	42202	1					
ANR	42507	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() must take exactly 2 arguments"" , ZSTR_VAL ( ce -> name ) , ZEND_SET_FUNC_NAME )"	2071:3:55650:55761	42202	0	True				
ANR	42508	CallExpression	"zend_error ( error_type , ""Method %s::%s() must take exactly 2 arguments"" , ZSTR_VAL ( ce -> name ) , ZEND_SET_FUNC_NAME )"		42202	0					
ANR	42509	Callee	zend_error		42202	0					
ANR	42510	Identifier	zend_error		42202	0					
ANR	42511	ArgumentList	error_type		42202	1					
ANR	42512	Argument	error_type		42202	0					
ANR	42513	Identifier	error_type		42202	0					
ANR	42514	Argument	"""Method %s::%s() must take exactly 2 arguments"""		42202	1					
ANR	42515	PrimaryExpression	"""Method %s::%s() must take exactly 2 arguments"""		42202	0					
ANR	42516	Argument	ZSTR_VAL ( ce -> name )		42202	2					
ANR	42517	CallExpression	ZSTR_VAL ( ce -> name )		42202	0					
ANR	42518	Callee	ZSTR_VAL		42202	0					
ANR	42519	Identifier	ZSTR_VAL		42202	0					
ANR	42520	ArgumentList	ce -> name		42202	1					
ANR	42521	Argument	ce -> name		42202	0					
ANR	42522	PtrMemberAccess	ce -> name		42202	0					
ANR	42523	Identifier	ce		42202	0					
ANR	42524	Identifier	name		42202	1					
ANR	42525	Argument	ZEND_SET_FUNC_NAME		42202	3					
ANR	42526	Identifier	ZEND_SET_FUNC_NAME		42202	0					
ANR	42527	ElseStatement	else		42202	0					
ANR	42528	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) || ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 ) )"		42202	0					
ANR	42529	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) || ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 )"	2072:13:55776:55847	42202	0	True				
ANR	42530	OrExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) || ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 )"		42202	0		||			
ANR	42531	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 )"		42202	0					
ANR	42532	Callee	ARG_SHOULD_BE_SENT_BY_REF		42202	0					
ANR	42533	Identifier	ARG_SHOULD_BE_SENT_BY_REF		42202	0					
ANR	42534	ArgumentList	fptr		42202	1					
ANR	42535	Argument	fptr		42202	0					
ANR	42536	Identifier	fptr		42202	0					
ANR	42537	Argument	1		42202	1					
ANR	42538	PrimaryExpression	1		42202	0					
ANR	42539	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 )"		42202	1					
ANR	42540	Callee	ARG_SHOULD_BE_SENT_BY_REF		42202	0					
ANR	42541	Identifier	ARG_SHOULD_BE_SENT_BY_REF		42202	0					
ANR	42542	ArgumentList	fptr		42202	1					
ANR	42543	Argument	fptr		42202	0					
ANR	42544	Identifier	fptr		42202	0					
ANR	42545	Argument	2		42202	1					
ANR	42546	PrimaryExpression	2		42202	0					
ANR	42547	CompoundStatement		24:87:1821:1821	42202	1					
ANR	42548	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ZSTR_VAL ( ce -> name ) , ZEND_SET_FUNC_NAME )"	2073:3:55855:55971	42202	0	True				
ANR	42549	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ZSTR_VAL ( ce -> name ) , ZEND_SET_FUNC_NAME )"		42202	0					
ANR	42550	Callee	zend_error		42202	0					
ANR	42551	Identifier	zend_error		42202	0					
ANR	42552	ArgumentList	error_type		42202	1					
ANR	42553	Argument	error_type		42202	0					
ANR	42554	Identifier	error_type		42202	0					
ANR	42555	Argument	"""Method %s::%s() cannot take arguments by reference"""		42202	1					
ANR	42556	PrimaryExpression	"""Method %s::%s() cannot take arguments by reference"""		42202	0					
ANR	42557	Argument	ZSTR_VAL ( ce -> name )		42202	2					
ANR	42558	CallExpression	ZSTR_VAL ( ce -> name )		42202	0					
ANR	42559	Callee	ZSTR_VAL		42202	0					
ANR	42560	Identifier	ZSTR_VAL		42202	0					
ANR	42561	ArgumentList	ce -> name		42202	1					
ANR	42562	Argument	ce -> name		42202	0					
ANR	42563	PtrMemberAccess	ce -> name		42202	0					
ANR	42564	Identifier	ce		42202	0					
ANR	42565	Identifier	name		42202	1					
ANR	42566	Argument	ZEND_SET_FUNC_NAME		42202	3					
ANR	42567	Identifier	ZEND_SET_FUNC_NAME		42202	0					
ANR	42568	ElseStatement	else		42202	0					
ANR	42569	IfStatement	"if ( name_len == sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_UNSET_FUNC_NAME , sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 ) )"		42202	0					
ANR	42570	Condition	"name_len == sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_UNSET_FUNC_NAME , sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 )"	2075:12:55989:56107	42202	0	True				
ANR	42571	AndExpression	"name_len == sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_UNSET_FUNC_NAME , sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 )"		42202	0		&&			
ANR	42572	EqualityExpression	name_len == sizeof ( ZEND_UNSET_FUNC_NAME ) - 1		42202	0		==			
ANR	42573	Identifier	name_len		42202	0					
ANR	42574	AdditiveExpression	sizeof ( ZEND_UNSET_FUNC_NAME ) - 1		42202	1		-			
ANR	42575	SizeofExpression	sizeof ( ZEND_UNSET_FUNC_NAME )		42202	0					
ANR	42576	Sizeof	sizeof		42202	0					
ANR	42577	SizeofOperand	ZEND_UNSET_FUNC_NAME		42202	1					
ANR	42578	PrimaryExpression	1		42202	1					
ANR	42579	UnaryOperationExpression	"! memcmp ( lcname , ZEND_UNSET_FUNC_NAME , sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 )"		42202	1					
ANR	42580	UnaryOperator	!		42202	0					
ANR	42581	CallExpression	"memcmp ( lcname , ZEND_UNSET_FUNC_NAME , sizeof ( ZEND_UNSET_FUNC_NAME ) - 1 )"		42202	1					
ANR	42582	Callee	memcmp		42202	0					
ANR	42583	Identifier	memcmp		42202	0					
ANR	42584	ArgumentList	lcname		42202	1					
ANR	42585	Argument	lcname		42202	0					
ANR	42586	Identifier	lcname		42202	0					
ANR	42587	Argument	ZEND_UNSET_FUNC_NAME		42202	1					
ANR	42588	Identifier	ZEND_UNSET_FUNC_NAME		42202	0					
ANR	42589	Argument	sizeof ( ZEND_UNSET_FUNC_NAME ) - 1		42202	2					
ANR	42590	AdditiveExpression	sizeof ( ZEND_UNSET_FUNC_NAME ) - 1		42202	0		-			
ANR	42591	SizeofExpression	sizeof ( ZEND_UNSET_FUNC_NAME )		42202	0					
ANR	42592	Sizeof	sizeof		42202	0					
ANR	42593	SizeofOperand	ZEND_UNSET_FUNC_NAME		42202	1					
ANR	42594	PrimaryExpression	1		42202	1					
ANR	42595	CompoundStatement		27:133:2081:2081	42202	1					
ANR	42596	IfStatement	if ( fptr -> common . num_args != 1 )		42202	0					
ANR	42597	Condition	fptr -> common . num_args != 1	2076:6:56118:56143	42202	0	True				
ANR	42598	EqualityExpression	fptr -> common . num_args != 1		42202	0		!=			
ANR	42599	MemberAccess	fptr -> common . num_args		42202	0					
ANR	42600	PtrMemberAccess	fptr -> common		42202	0					
ANR	42601	Identifier	fptr		42202	0					
ANR	42602	Identifier	common		42202	1					
ANR	42603	Identifier	num_args		42202	1					
ANR	42604	PrimaryExpression	1		42202	1					
ANR	42605	CompoundStatement		28:34:2117:2117	42202	1					
ANR	42606	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() must take exactly 1 argument"" , ZSTR_VAL ( ce -> name ) , ZEND_UNSET_FUNC_NAME )"	2077:3:56151:56263	42202	0	True				
ANR	42607	CallExpression	"zend_error ( error_type , ""Method %s::%s() must take exactly 1 argument"" , ZSTR_VAL ( ce -> name ) , ZEND_UNSET_FUNC_NAME )"		42202	0					
ANR	42608	Callee	zend_error		42202	0					
ANR	42609	Identifier	zend_error		42202	0					
ANR	42610	ArgumentList	error_type		42202	1					
ANR	42611	Argument	error_type		42202	0					
ANR	42612	Identifier	error_type		42202	0					
ANR	42613	Argument	"""Method %s::%s() must take exactly 1 argument"""		42202	1					
ANR	42614	PrimaryExpression	"""Method %s::%s() must take exactly 1 argument"""		42202	0					
ANR	42615	Argument	ZSTR_VAL ( ce -> name )		42202	2					
ANR	42616	CallExpression	ZSTR_VAL ( ce -> name )		42202	0					
ANR	42617	Callee	ZSTR_VAL		42202	0					
ANR	42618	Identifier	ZSTR_VAL		42202	0					
ANR	42619	ArgumentList	ce -> name		42202	1					
ANR	42620	Argument	ce -> name		42202	0					
ANR	42621	PtrMemberAccess	ce -> name		42202	0					
ANR	42622	Identifier	ce		42202	0					
ANR	42623	Identifier	name		42202	1					
ANR	42624	Argument	ZEND_UNSET_FUNC_NAME		42202	3					
ANR	42625	Identifier	ZEND_UNSET_FUNC_NAME		42202	0					
ANR	42626	ElseStatement	else		42202	0					
ANR	42627	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) )"		42202	0					
ANR	42628	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 )"	2078:13:56278:56311	42202	0	True				
ANR	42629	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 )"		42202	0					
ANR	42630	Callee	ARG_SHOULD_BE_SENT_BY_REF		42202	0					
ANR	42631	Identifier	ARG_SHOULD_BE_SENT_BY_REF		42202	0					
ANR	42632	ArgumentList	fptr		42202	1					
ANR	42633	Argument	fptr		42202	0					
ANR	42634	Identifier	fptr		42202	0					
ANR	42635	Argument	1		42202	1					
ANR	42636	PrimaryExpression	1		42202	0					
ANR	42637	CompoundStatement		30:49:2285:2285	42202	1					
ANR	42638	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ZSTR_VAL ( ce -> name ) , ZEND_UNSET_FUNC_NAME )"	2079:3:56319:56437	42202	0	True				
ANR	42639	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ZSTR_VAL ( ce -> name ) , ZEND_UNSET_FUNC_NAME )"		42202	0					
ANR	42640	Callee	zend_error		42202	0					
ANR	42641	Identifier	zend_error		42202	0					
ANR	42642	ArgumentList	error_type		42202	1					
ANR	42643	Argument	error_type		42202	0					
ANR	42644	Identifier	error_type		42202	0					
ANR	42645	Argument	"""Method %s::%s() cannot take arguments by reference"""		42202	1					
ANR	42646	PrimaryExpression	"""Method %s::%s() cannot take arguments by reference"""		42202	0					
ANR	42647	Argument	ZSTR_VAL ( ce -> name )		42202	2					
ANR	42648	CallExpression	ZSTR_VAL ( ce -> name )		42202	0					
ANR	42649	Callee	ZSTR_VAL		42202	0					
ANR	42650	Identifier	ZSTR_VAL		42202	0					
ANR	42651	ArgumentList	ce -> name		42202	1					
ANR	42652	Argument	ce -> name		42202	0					
ANR	42653	PtrMemberAccess	ce -> name		42202	0					
ANR	42654	Identifier	ce		42202	0					
ANR	42655	Identifier	name		42202	1					
ANR	42656	Argument	ZEND_UNSET_FUNC_NAME		42202	3					
ANR	42657	Identifier	ZEND_UNSET_FUNC_NAME		42202	0					
ANR	42658	ElseStatement	else		42202	0					
ANR	42659	IfStatement	"if ( name_len == sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_ISSET_FUNC_NAME , sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 ) )"		42202	0					
ANR	42660	Condition	"name_len == sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_ISSET_FUNC_NAME , sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 )"	2081:12:56455:56573	42202	0	True				
ANR	42661	AndExpression	"name_len == sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_ISSET_FUNC_NAME , sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 )"		42202	0		&&			
ANR	42662	EqualityExpression	name_len == sizeof ( ZEND_ISSET_FUNC_NAME ) - 1		42202	0		==			
ANR	42663	Identifier	name_len		42202	0					
ANR	42664	AdditiveExpression	sizeof ( ZEND_ISSET_FUNC_NAME ) - 1		42202	1		-			
ANR	42665	SizeofExpression	sizeof ( ZEND_ISSET_FUNC_NAME )		42202	0					
ANR	42666	Sizeof	sizeof		42202	0					
ANR	42667	SizeofOperand	ZEND_ISSET_FUNC_NAME		42202	1					
ANR	42668	PrimaryExpression	1		42202	1					
ANR	42669	UnaryOperationExpression	"! memcmp ( lcname , ZEND_ISSET_FUNC_NAME , sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 )"		42202	1					
ANR	42670	UnaryOperator	!		42202	0					
ANR	42671	CallExpression	"memcmp ( lcname , ZEND_ISSET_FUNC_NAME , sizeof ( ZEND_ISSET_FUNC_NAME ) - 1 )"		42202	1					
ANR	42672	Callee	memcmp		42202	0					
ANR	42673	Identifier	memcmp		42202	0					
ANR	42674	ArgumentList	lcname		42202	1					
ANR	42675	Argument	lcname		42202	0					
ANR	42676	Identifier	lcname		42202	0					
ANR	42677	Argument	ZEND_ISSET_FUNC_NAME		42202	1					
ANR	42678	Identifier	ZEND_ISSET_FUNC_NAME		42202	0					
ANR	42679	Argument	sizeof ( ZEND_ISSET_FUNC_NAME ) - 1		42202	2					
ANR	42680	AdditiveExpression	sizeof ( ZEND_ISSET_FUNC_NAME ) - 1		42202	0		-			
ANR	42681	SizeofExpression	sizeof ( ZEND_ISSET_FUNC_NAME )		42202	0					
ANR	42682	Sizeof	sizeof		42202	0					
ANR	42683	SizeofOperand	ZEND_ISSET_FUNC_NAME		42202	1					
ANR	42684	PrimaryExpression	1		42202	1					
ANR	42685	CompoundStatement		33:133:2547:2547	42202	1					
ANR	42686	IfStatement	if ( fptr -> common . num_args != 1 )		42202	0					
ANR	42687	Condition	fptr -> common . num_args != 1	2082:6:56584:56609	42202	0	True				
ANR	42688	EqualityExpression	fptr -> common . num_args != 1		42202	0		!=			
ANR	42689	MemberAccess	fptr -> common . num_args		42202	0					
ANR	42690	PtrMemberAccess	fptr -> common		42202	0					
ANR	42691	Identifier	fptr		42202	0					
ANR	42692	Identifier	common		42202	1					
ANR	42693	Identifier	num_args		42202	1					
ANR	42694	PrimaryExpression	1		42202	1					
ANR	42695	CompoundStatement		34:34:2583:2583	42202	1					
ANR	42696	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() must take exactly 1 argument"" , ZSTR_VAL ( ce -> name ) , ZEND_ISSET_FUNC_NAME )"	2083:3:56617:56729	42202	0	True				
ANR	42697	CallExpression	"zend_error ( error_type , ""Method %s::%s() must take exactly 1 argument"" , ZSTR_VAL ( ce -> name ) , ZEND_ISSET_FUNC_NAME )"		42202	0					
ANR	42698	Callee	zend_error		42202	0					
ANR	42699	Identifier	zend_error		42202	0					
ANR	42700	ArgumentList	error_type		42202	1					
ANR	42701	Argument	error_type		42202	0					
ANR	42702	Identifier	error_type		42202	0					
ANR	42703	Argument	"""Method %s::%s() must take exactly 1 argument"""		42202	1					
ANR	42704	PrimaryExpression	"""Method %s::%s() must take exactly 1 argument"""		42202	0					
ANR	42705	Argument	ZSTR_VAL ( ce -> name )		42202	2					
ANR	42706	CallExpression	ZSTR_VAL ( ce -> name )		42202	0					
ANR	42707	Callee	ZSTR_VAL		42202	0					
ANR	42708	Identifier	ZSTR_VAL		42202	0					
ANR	42709	ArgumentList	ce -> name		42202	1					
ANR	42710	Argument	ce -> name		42202	0					
ANR	42711	PtrMemberAccess	ce -> name		42202	0					
ANR	42712	Identifier	ce		42202	0					
ANR	42713	Identifier	name		42202	1					
ANR	42714	Argument	ZEND_ISSET_FUNC_NAME		42202	3					
ANR	42715	Identifier	ZEND_ISSET_FUNC_NAME		42202	0					
ANR	42716	ElseStatement	else		42202	0					
ANR	42717	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) )"		42202	0					
ANR	42718	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 )"	2084:13:56744:56777	42202	0	True				
ANR	42719	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 )"		42202	0					
ANR	42720	Callee	ARG_SHOULD_BE_SENT_BY_REF		42202	0					
ANR	42721	Identifier	ARG_SHOULD_BE_SENT_BY_REF		42202	0					
ANR	42722	ArgumentList	fptr		42202	1					
ANR	42723	Argument	fptr		42202	0					
ANR	42724	Identifier	fptr		42202	0					
ANR	42725	Argument	1		42202	1					
ANR	42726	PrimaryExpression	1		42202	0					
ANR	42727	CompoundStatement		36:49:2751:2751	42202	1					
ANR	42728	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ZSTR_VAL ( ce -> name ) , ZEND_ISSET_FUNC_NAME )"	2085:3:56785:56903	42202	0	True				
ANR	42729	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ZSTR_VAL ( ce -> name ) , ZEND_ISSET_FUNC_NAME )"		42202	0					
ANR	42730	Callee	zend_error		42202	0					
ANR	42731	Identifier	zend_error		42202	0					
ANR	42732	ArgumentList	error_type		42202	1					
ANR	42733	Argument	error_type		42202	0					
ANR	42734	Identifier	error_type		42202	0					
ANR	42735	Argument	"""Method %s::%s() cannot take arguments by reference"""		42202	1					
ANR	42736	PrimaryExpression	"""Method %s::%s() cannot take arguments by reference"""		42202	0					
ANR	42737	Argument	ZSTR_VAL ( ce -> name )		42202	2					
ANR	42738	CallExpression	ZSTR_VAL ( ce -> name )		42202	0					
ANR	42739	Callee	ZSTR_VAL		42202	0					
ANR	42740	Identifier	ZSTR_VAL		42202	0					
ANR	42741	ArgumentList	ce -> name		42202	1					
ANR	42742	Argument	ce -> name		42202	0					
ANR	42743	PtrMemberAccess	ce -> name		42202	0					
ANR	42744	Identifier	ce		42202	0					
ANR	42745	Identifier	name		42202	1					
ANR	42746	Argument	ZEND_ISSET_FUNC_NAME		42202	3					
ANR	42747	Identifier	ZEND_ISSET_FUNC_NAME		42202	0					
ANR	42748	ElseStatement	else		42202	0					
ANR	42749	IfStatement	"if ( name_len == sizeof ( ZEND_CALL_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_CALL_FUNC_NAME , sizeof ( ZEND_CALL_FUNC_NAME ) - 1 ) )"		42202	0					
ANR	42750	Condition	"name_len == sizeof ( ZEND_CALL_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_CALL_FUNC_NAME , sizeof ( ZEND_CALL_FUNC_NAME ) - 1 )"	2087:12:56921:57036	42202	0	True				
ANR	42751	AndExpression	"name_len == sizeof ( ZEND_CALL_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_CALL_FUNC_NAME , sizeof ( ZEND_CALL_FUNC_NAME ) - 1 )"		42202	0		&&			
ANR	42752	EqualityExpression	name_len == sizeof ( ZEND_CALL_FUNC_NAME ) - 1		42202	0		==			
ANR	42753	Identifier	name_len		42202	0					
ANR	42754	AdditiveExpression	sizeof ( ZEND_CALL_FUNC_NAME ) - 1		42202	1		-			
ANR	42755	SizeofExpression	sizeof ( ZEND_CALL_FUNC_NAME )		42202	0					
ANR	42756	Sizeof	sizeof		42202	0					
ANR	42757	SizeofOperand	ZEND_CALL_FUNC_NAME		42202	1					
ANR	42758	PrimaryExpression	1		42202	1					
ANR	42759	UnaryOperationExpression	"! memcmp ( lcname , ZEND_CALL_FUNC_NAME , sizeof ( ZEND_CALL_FUNC_NAME ) - 1 )"		42202	1					
ANR	42760	UnaryOperator	!		42202	0					
ANR	42761	CallExpression	"memcmp ( lcname , ZEND_CALL_FUNC_NAME , sizeof ( ZEND_CALL_FUNC_NAME ) - 1 )"		42202	1					
ANR	42762	Callee	memcmp		42202	0					
ANR	42763	Identifier	memcmp		42202	0					
ANR	42764	ArgumentList	lcname		42202	1					
ANR	42765	Argument	lcname		42202	0					
ANR	42766	Identifier	lcname		42202	0					
ANR	42767	Argument	ZEND_CALL_FUNC_NAME		42202	1					
ANR	42768	Identifier	ZEND_CALL_FUNC_NAME		42202	0					
ANR	42769	Argument	sizeof ( ZEND_CALL_FUNC_NAME ) - 1		42202	2					
ANR	42770	AdditiveExpression	sizeof ( ZEND_CALL_FUNC_NAME ) - 1		42202	0		-			
ANR	42771	SizeofExpression	sizeof ( ZEND_CALL_FUNC_NAME )		42202	0					
ANR	42772	Sizeof	sizeof		42202	0					
ANR	42773	SizeofOperand	ZEND_CALL_FUNC_NAME		42202	1					
ANR	42774	PrimaryExpression	1		42202	1					
ANR	42775	CompoundStatement		39:130:3010:3010	42202	1					
ANR	42776	IfStatement	if ( fptr -> common . num_args != 2 )		42202	0					
ANR	42777	Condition	fptr -> common . num_args != 2	2088:6:57047:57072	42202	0	True				
ANR	42778	EqualityExpression	fptr -> common . num_args != 2		42202	0		!=			
ANR	42779	MemberAccess	fptr -> common . num_args		42202	0					
ANR	42780	PtrMemberAccess	fptr -> common		42202	0					
ANR	42781	Identifier	fptr		42202	0					
ANR	42782	Identifier	common		42202	1					
ANR	42783	Identifier	num_args		42202	1					
ANR	42784	PrimaryExpression	2		42202	1					
ANR	42785	CompoundStatement		40:34:3046:3046	42202	1					
ANR	42786	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() must take exactly 2 arguments"" , ZSTR_VAL ( ce -> name ) , ZEND_CALL_FUNC_NAME )"	2089:3:57080:57192	42202	0	True				
ANR	42787	CallExpression	"zend_error ( error_type , ""Method %s::%s() must take exactly 2 arguments"" , ZSTR_VAL ( ce -> name ) , ZEND_CALL_FUNC_NAME )"		42202	0					
ANR	42788	Callee	zend_error		42202	0					
ANR	42789	Identifier	zend_error		42202	0					
ANR	42790	ArgumentList	error_type		42202	1					
ANR	42791	Argument	error_type		42202	0					
ANR	42792	Identifier	error_type		42202	0					
ANR	42793	Argument	"""Method %s::%s() must take exactly 2 arguments"""		42202	1					
ANR	42794	PrimaryExpression	"""Method %s::%s() must take exactly 2 arguments"""		42202	0					
ANR	42795	Argument	ZSTR_VAL ( ce -> name )		42202	2					
ANR	42796	CallExpression	ZSTR_VAL ( ce -> name )		42202	0					
ANR	42797	Callee	ZSTR_VAL		42202	0					
ANR	42798	Identifier	ZSTR_VAL		42202	0					
ANR	42799	ArgumentList	ce -> name		42202	1					
ANR	42800	Argument	ce -> name		42202	0					
ANR	42801	PtrMemberAccess	ce -> name		42202	0					
ANR	42802	Identifier	ce		42202	0					
ANR	42803	Identifier	name		42202	1					
ANR	42804	Argument	ZEND_CALL_FUNC_NAME		42202	3					
ANR	42805	Identifier	ZEND_CALL_FUNC_NAME		42202	0					
ANR	42806	ElseStatement	else		42202	0					
ANR	42807	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) || ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 ) )"		42202	0					
ANR	42808	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) || ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 )"	2090:13:57207:57278	42202	0	True				
ANR	42809	OrExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) || ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 )"		42202	0		||			
ANR	42810	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 )"		42202	0					
ANR	42811	Callee	ARG_SHOULD_BE_SENT_BY_REF		42202	0					
ANR	42812	Identifier	ARG_SHOULD_BE_SENT_BY_REF		42202	0					
ANR	42813	ArgumentList	fptr		42202	1					
ANR	42814	Argument	fptr		42202	0					
ANR	42815	Identifier	fptr		42202	0					
ANR	42816	Argument	1		42202	1					
ANR	42817	PrimaryExpression	1		42202	0					
ANR	42818	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 )"		42202	1					
ANR	42819	Callee	ARG_SHOULD_BE_SENT_BY_REF		42202	0					
ANR	42820	Identifier	ARG_SHOULD_BE_SENT_BY_REF		42202	0					
ANR	42821	ArgumentList	fptr		42202	1					
ANR	42822	Argument	fptr		42202	0					
ANR	42823	Identifier	fptr		42202	0					
ANR	42824	Argument	2		42202	1					
ANR	42825	PrimaryExpression	2		42202	0					
ANR	42826	CompoundStatement		42:87:3252:3252	42202	1					
ANR	42827	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ZSTR_VAL ( ce -> name ) , ZEND_CALL_FUNC_NAME )"	2091:3:57286:57403	42202	0	True				
ANR	42828	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot take arguments by reference"" , ZSTR_VAL ( ce -> name ) , ZEND_CALL_FUNC_NAME )"		42202	0					
ANR	42829	Callee	zend_error		42202	0					
ANR	42830	Identifier	zend_error		42202	0					
ANR	42831	ArgumentList	error_type		42202	1					
ANR	42832	Argument	error_type		42202	0					
ANR	42833	Identifier	error_type		42202	0					
ANR	42834	Argument	"""Method %s::%s() cannot take arguments by reference"""		42202	1					
ANR	42835	PrimaryExpression	"""Method %s::%s() cannot take arguments by reference"""		42202	0					
ANR	42836	Argument	ZSTR_VAL ( ce -> name )		42202	2					
ANR	42837	CallExpression	ZSTR_VAL ( ce -> name )		42202	0					
ANR	42838	Callee	ZSTR_VAL		42202	0					
ANR	42839	Identifier	ZSTR_VAL		42202	0					
ANR	42840	ArgumentList	ce -> name		42202	1					
ANR	42841	Argument	ce -> name		42202	0					
ANR	42842	PtrMemberAccess	ce -> name		42202	0					
ANR	42843	Identifier	ce		42202	0					
ANR	42844	Identifier	name		42202	1					
ANR	42845	Argument	ZEND_CALL_FUNC_NAME		42202	3					
ANR	42846	Identifier	ZEND_CALL_FUNC_NAME		42202	0					
ANR	42847	ElseStatement	else		42202	0					
ANR	42848	IfStatement	"if ( name_len == sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_CALLSTATIC_FUNC_NAME , sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 ) )"		42202	0					
ANR	42849	Condition	"name_len == sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_CALLSTATIC_FUNC_NAME , sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 )"	2093:12:57421:57554	42202	0	True				
ANR	42850	AndExpression	"name_len == sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_CALLSTATIC_FUNC_NAME , sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 )"		42202	0		&&			
ANR	42851	EqualityExpression	name_len == sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1		42202	0		==			
ANR	42852	Identifier	name_len		42202	0					
ANR	42853	AdditiveExpression	sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1		42202	1		-			
ANR	42854	SizeofExpression	sizeof ( ZEND_CALLSTATIC_FUNC_NAME )		42202	0					
ANR	42855	Sizeof	sizeof		42202	0					
ANR	42856	SizeofOperand	ZEND_CALLSTATIC_FUNC_NAME		42202	1					
ANR	42857	PrimaryExpression	1		42202	1					
ANR	42858	UnaryOperationExpression	"! memcmp ( lcname , ZEND_CALLSTATIC_FUNC_NAME , sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 )"		42202	1					
ANR	42859	UnaryOperator	!		42202	0					
ANR	42860	CallExpression	"memcmp ( lcname , ZEND_CALLSTATIC_FUNC_NAME , sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1 )"		42202	1					
ANR	42861	Callee	memcmp		42202	0					
ANR	42862	Identifier	memcmp		42202	0					
ANR	42863	ArgumentList	lcname		42202	1					
ANR	42864	Argument	lcname		42202	0					
ANR	42865	Identifier	lcname		42202	0					
ANR	42866	Argument	ZEND_CALLSTATIC_FUNC_NAME		42202	1					
ANR	42867	Identifier	ZEND_CALLSTATIC_FUNC_NAME		42202	0					
ANR	42868	Argument	sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1		42202	2					
ANR	42869	AdditiveExpression	sizeof ( ZEND_CALLSTATIC_FUNC_NAME ) - 1		42202	0		-			
ANR	42870	SizeofExpression	sizeof ( ZEND_CALLSTATIC_FUNC_NAME )		42202	0					
ANR	42871	Sizeof	sizeof		42202	0					
ANR	42872	SizeofOperand	ZEND_CALLSTATIC_FUNC_NAME		42202	1					
ANR	42873	PrimaryExpression	1		42202	1					
ANR	42874	CompoundStatement		47:3:3530:3530	42202	1					
ANR	42875	IfStatement	if ( fptr -> common . num_args != 2 )		42202	0					
ANR	42876	Condition	fptr -> common . num_args != 2	2096:6:57567:57592	42202	0	True				
ANR	42877	EqualityExpression	fptr -> common . num_args != 2		42202	0		!=			
ANR	42878	MemberAccess	fptr -> common . num_args		42202	0					
ANR	42879	PtrMemberAccess	fptr -> common		42202	0					
ANR	42880	Identifier	fptr		42202	0					
ANR	42881	Identifier	common		42202	1					
ANR	42882	Identifier	num_args		42202	1					
ANR	42883	PrimaryExpression	2		42202	1					
ANR	42884	CompoundStatement		48:34:3566:3566	42202	1					
ANR	42885	ExpressionStatement	"zend_error ( error_type , ""Method %s::__callStatic() must take exactly 2 arguments"" , ZSTR_VAL ( ce -> name ) )"	2097:3:57600:57701	42202	0	True				
ANR	42886	CallExpression	"zend_error ( error_type , ""Method %s::__callStatic() must take exactly 2 arguments"" , ZSTR_VAL ( ce -> name ) )"		42202	0					
ANR	42887	Callee	zend_error		42202	0					
ANR	42888	Identifier	zend_error		42202	0					
ANR	42889	ArgumentList	error_type		42202	1					
ANR	42890	Argument	error_type		42202	0					
ANR	42891	Identifier	error_type		42202	0					
ANR	42892	Argument	"""Method %s::__callStatic() must take exactly 2 arguments"""		42202	1					
ANR	42893	PrimaryExpression	"""Method %s::__callStatic() must take exactly 2 arguments"""		42202	0					
ANR	42894	Argument	ZSTR_VAL ( ce -> name )		42202	2					
ANR	42895	CallExpression	ZSTR_VAL ( ce -> name )		42202	0					
ANR	42896	Callee	ZSTR_VAL		42202	0					
ANR	42897	Identifier	ZSTR_VAL		42202	0					
ANR	42898	ArgumentList	ce -> name		42202	1					
ANR	42899	Argument	ce -> name		42202	0					
ANR	42900	PtrMemberAccess	ce -> name		42202	0					
ANR	42901	Identifier	ce		42202	0					
ANR	42902	Identifier	name		42202	1					
ANR	42903	ElseStatement	else		42202	0					
ANR	42904	IfStatement	"if ( ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) || ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 ) )"		42202	0					
ANR	42905	Condition	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) || ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 )"	2098:13:57716:57787	42202	0	True				
ANR	42906	OrExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 ) || ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 )"		42202	0		||			
ANR	42907	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 1 )"		42202	0					
ANR	42908	Callee	ARG_SHOULD_BE_SENT_BY_REF		42202	0					
ANR	42909	Identifier	ARG_SHOULD_BE_SENT_BY_REF		42202	0					
ANR	42910	ArgumentList	fptr		42202	1					
ANR	42911	Argument	fptr		42202	0					
ANR	42912	Identifier	fptr		42202	0					
ANR	42913	Argument	1		42202	1					
ANR	42914	PrimaryExpression	1		42202	0					
ANR	42915	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( fptr , 2 )"		42202	1					
ANR	42916	Callee	ARG_SHOULD_BE_SENT_BY_REF		42202	0					
ANR	42917	Identifier	ARG_SHOULD_BE_SENT_BY_REF		42202	0					
ANR	42918	ArgumentList	fptr		42202	1					
ANR	42919	Argument	fptr		42202	0					
ANR	42920	Identifier	fptr		42202	0					
ANR	42921	Argument	2		42202	1					
ANR	42922	PrimaryExpression	2		42202	0					
ANR	42923	CompoundStatement		50:87:3761:3761	42202	1					
ANR	42924	ExpressionStatement	"zend_error ( error_type , ""Method %s::__callStatic() cannot take arguments by reference"" , ZSTR_VAL ( ce -> name ) )"	2099:3:57795:57901	42202	0	True				
ANR	42925	CallExpression	"zend_error ( error_type , ""Method %s::__callStatic() cannot take arguments by reference"" , ZSTR_VAL ( ce -> name ) )"		42202	0					
ANR	42926	Callee	zend_error		42202	0					
ANR	42927	Identifier	zend_error		42202	0					
ANR	42928	ArgumentList	error_type		42202	1					
ANR	42929	Argument	error_type		42202	0					
ANR	42930	Identifier	error_type		42202	0					
ANR	42931	Argument	"""Method %s::__callStatic() cannot take arguments by reference"""		42202	1					
ANR	42932	PrimaryExpression	"""Method %s::__callStatic() cannot take arguments by reference"""		42202	0					
ANR	42933	Argument	ZSTR_VAL ( ce -> name )		42202	2					
ANR	42934	CallExpression	ZSTR_VAL ( ce -> name )		42202	0					
ANR	42935	Callee	ZSTR_VAL		42202	0					
ANR	42936	Identifier	ZSTR_VAL		42202	0					
ANR	42937	ArgumentList	ce -> name		42202	1					
ANR	42938	Argument	ce -> name		42202	0					
ANR	42939	PtrMemberAccess	ce -> name		42202	0					
ANR	42940	Identifier	ce		42202	0					
ANR	42941	Identifier	name		42202	1					
ANR	42942	ElseStatement	else		42202	0					
ANR	42943	IfStatement	"if ( name_len == sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_TOSTRING_FUNC_NAME , sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0 )"		42202	0					
ANR	42944	Condition	"name_len == sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_TOSTRING_FUNC_NAME , sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"	2101:13:57920:58078	42202	0	True				
ANR	42945	AndExpression	"name_len == sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_TOSTRING_FUNC_NAME , sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"		42202	0		&&			
ANR	42946	EqualityExpression	name_len == sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1		42202	0		==			
ANR	42947	Identifier	name_len		42202	0					
ANR	42948	AdditiveExpression	sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1		42202	1		-			
ANR	42949	SizeofExpression	sizeof ( ZEND_TOSTRING_FUNC_NAME )		42202	0					
ANR	42950	Sizeof	sizeof		42202	0					
ANR	42951	SizeofOperand	ZEND_TOSTRING_FUNC_NAME		42202	1					
ANR	42952	PrimaryExpression	1		42202	1					
ANR	42953	AndExpression	"! memcmp ( lcname , ZEND_TOSTRING_FUNC_NAME , sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"		42202	1		&&			
ANR	42954	UnaryOperationExpression	"! memcmp ( lcname , ZEND_TOSTRING_FUNC_NAME , sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 )"		42202	0					
ANR	42955	UnaryOperator	!		42202	0					
ANR	42956	CallExpression	"memcmp ( lcname , ZEND_TOSTRING_FUNC_NAME , sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1 )"		42202	1					
ANR	42957	Callee	memcmp		42202	0					
ANR	42958	Identifier	memcmp		42202	0					
ANR	42959	ArgumentList	lcname		42202	1					
ANR	42960	Argument	lcname		42202	0					
ANR	42961	Identifier	lcname		42202	0					
ANR	42962	Argument	ZEND_TOSTRING_FUNC_NAME		42202	1					
ANR	42963	Identifier	ZEND_TOSTRING_FUNC_NAME		42202	0					
ANR	42964	Argument	sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1		42202	2					
ANR	42965	AdditiveExpression	sizeof ( ZEND_TOSTRING_FUNC_NAME ) - 1		42202	0		-			
ANR	42966	SizeofExpression	sizeof ( ZEND_TOSTRING_FUNC_NAME )		42202	0					
ANR	42967	Sizeof	sizeof		42202	0					
ANR	42968	SizeofOperand	ZEND_TOSTRING_FUNC_NAME		42202	1					
ANR	42969	PrimaryExpression	1		42202	1					
ANR	42970	EqualityExpression	fptr -> common . num_args != 0		42202	1		!=			
ANR	42971	MemberAccess	fptr -> common . num_args		42202	0					
ANR	42972	PtrMemberAccess	fptr -> common		42202	0					
ANR	42973	Identifier	fptr		42202	0					
ANR	42974	Identifier	common		42202	1					
ANR	42975	Identifier	num_args		42202	1					
ANR	42976	PrimaryExpression	0		42202	1					
ANR	42977	CompoundStatement		55:3:4054:4054	42202	1					
ANR	42978	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot take arguments"" , ZSTR_VAL ( ce -> name ) , ZEND_TOSTRING_FUNC_NAME )"	2104:2:58087:58195	42202	0	True				
ANR	42979	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot take arguments"" , ZSTR_VAL ( ce -> name ) , ZEND_TOSTRING_FUNC_NAME )"		42202	0					
ANR	42980	Callee	zend_error		42202	0					
ANR	42981	Identifier	zend_error		42202	0					
ANR	42982	ArgumentList	error_type		42202	1					
ANR	42983	Argument	error_type		42202	0					
ANR	42984	Identifier	error_type		42202	0					
ANR	42985	Argument	"""Method %s::%s() cannot take arguments"""		42202	1					
ANR	42986	PrimaryExpression	"""Method %s::%s() cannot take arguments"""		42202	0					
ANR	42987	Argument	ZSTR_VAL ( ce -> name )		42202	2					
ANR	42988	CallExpression	ZSTR_VAL ( ce -> name )		42202	0					
ANR	42989	Callee	ZSTR_VAL		42202	0					
ANR	42990	Identifier	ZSTR_VAL		42202	0					
ANR	42991	ArgumentList	ce -> name		42202	1					
ANR	42992	Argument	ce -> name		42202	0					
ANR	42993	PtrMemberAccess	ce -> name		42202	0					
ANR	42994	Identifier	ce		42202	0					
ANR	42995	Identifier	name		42202	1					
ANR	42996	Argument	ZEND_TOSTRING_FUNC_NAME		42202	3					
ANR	42997	Identifier	ZEND_TOSTRING_FUNC_NAME		42202	0					
ANR	42998	ElseStatement	else		42202	0					
ANR	42999	IfStatement	"if ( name_len == sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_DEBUGINFO_FUNC_NAME , sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0 )"		42202	0					
ANR	43000	Condition	"name_len == sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_DEBUGINFO_FUNC_NAME , sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"	2105:12:58209:58369	42202	0	True				
ANR	43001	AndExpression	"name_len == sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 && ! memcmp ( lcname , ZEND_DEBUGINFO_FUNC_NAME , sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"		42202	0		&&			
ANR	43002	EqualityExpression	name_len == sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1		42202	0		==			
ANR	43003	Identifier	name_len		42202	0					
ANR	43004	AdditiveExpression	sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1		42202	1		-			
ANR	43005	SizeofExpression	sizeof ( ZEND_DEBUGINFO_FUNC_NAME )		42202	0					
ANR	43006	Sizeof	sizeof		42202	0					
ANR	43007	SizeofOperand	ZEND_DEBUGINFO_FUNC_NAME		42202	1					
ANR	43008	PrimaryExpression	1		42202	1					
ANR	43009	AndExpression	"! memcmp ( lcname , ZEND_DEBUGINFO_FUNC_NAME , sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 ) && fptr -> common . num_args != 0"		42202	1		&&			
ANR	43010	UnaryOperationExpression	"! memcmp ( lcname , ZEND_DEBUGINFO_FUNC_NAME , sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 )"		42202	0					
ANR	43011	UnaryOperator	!		42202	0					
ANR	43012	CallExpression	"memcmp ( lcname , ZEND_DEBUGINFO_FUNC_NAME , sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1 )"		42202	1					
ANR	43013	Callee	memcmp		42202	0					
ANR	43014	Identifier	memcmp		42202	0					
ANR	43015	ArgumentList	lcname		42202	1					
ANR	43016	Argument	lcname		42202	0					
ANR	43017	Identifier	lcname		42202	0					
ANR	43018	Argument	ZEND_DEBUGINFO_FUNC_NAME		42202	1					
ANR	43019	Identifier	ZEND_DEBUGINFO_FUNC_NAME		42202	0					
ANR	43020	Argument	sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1		42202	2					
ANR	43021	AdditiveExpression	sizeof ( ZEND_DEBUGINFO_FUNC_NAME ) - 1		42202	0		-			
ANR	43022	SizeofExpression	sizeof ( ZEND_DEBUGINFO_FUNC_NAME )		42202	0					
ANR	43023	Sizeof	sizeof		42202	0					
ANR	43024	SizeofOperand	ZEND_DEBUGINFO_FUNC_NAME		42202	1					
ANR	43025	PrimaryExpression	1		42202	1					
ANR	43026	EqualityExpression	fptr -> common . num_args != 0		42202	1		!=			
ANR	43027	MemberAccess	fptr -> common . num_args		42202	0					
ANR	43028	PtrMemberAccess	fptr -> common		42202	0					
ANR	43029	Identifier	fptr		42202	0					
ANR	43030	Identifier	common		42202	1					
ANR	43031	Identifier	num_args		42202	1					
ANR	43032	PrimaryExpression	0		42202	1					
ANR	43033	CompoundStatement		58:111:4343:4343	42202	1					
ANR	43034	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot take arguments"" , ZSTR_VAL ( ce -> name ) , ZEND_DEBUGINFO_FUNC_NAME )"	2107:2:58376:58485	42202	0	True				
ANR	43035	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot take arguments"" , ZSTR_VAL ( ce -> name ) , ZEND_DEBUGINFO_FUNC_NAME )"		42202	0					
ANR	43036	Callee	zend_error		42202	0					
ANR	43037	Identifier	zend_error		42202	0					
ANR	43038	ArgumentList	error_type		42202	1					
ANR	43039	Argument	error_type		42202	0					
ANR	43040	Identifier	error_type		42202	0					
ANR	43041	Argument	"""Method %s::%s() cannot take arguments"""		42202	1					
ANR	43042	PrimaryExpression	"""Method %s::%s() cannot take arguments"""		42202	0					
ANR	43043	Argument	ZSTR_VAL ( ce -> name )		42202	2					
ANR	43044	CallExpression	ZSTR_VAL ( ce -> name )		42202	0					
ANR	43045	Callee	ZSTR_VAL		42202	0					
ANR	43046	Identifier	ZSTR_VAL		42202	0					
ANR	43047	ArgumentList	ce -> name		42202	1					
ANR	43048	Argument	ce -> name		42202	0					
ANR	43049	PtrMemberAccess	ce -> name		42202	0					
ANR	43050	Identifier	ce		42202	0					
ANR	43051	Identifier	name		42202	1					
ANR	43052	Argument	ZEND_DEBUGINFO_FUNC_NAME		42202	3					
ANR	43053	Identifier	ZEND_DEBUGINFO_FUNC_NAME		42202	0					
ANR	43054	ReturnType	ZEND_API void		42202	1					
ANR	43055	Identifier	zend_check_magic_method_implementation		42202	2					
ANR	43056	ParameterList	"const zend_class_entry * ce , const zend_function * fptr , int error_type"		42202	3					
ANR	43057	Parameter	const zend_class_entry * ce	2048:53:53947:53972	42202	0	True				
ANR	43058	ParameterType	const zend_class_entry *		42202	0					
ANR	43059	Identifier	ce		42202	1					
ANR	43060	Parameter	const zend_function * fptr	2048:81:53975:53999	42202	1	True				
ANR	43061	ParameterType	const zend_function *		42202	0					
ANR	43062	Identifier	fptr		42202	1					
ANR	43063	Parameter	int error_type	2048:108:54002:54015	42202	2	True				
ANR	43064	ParameterType	int		42202	0					
ANR	43065	Identifier	error_type		42202	1					
ANR	43066	CFGEntryNode	ENTRY		42202		True				
ANR	43067	CFGExitNode	EXIT		42202		True				
ANR	43068	Symbol	ARG_SHOULD_BE_SENT_BY_REF		42202						
ANR	43069	Symbol	ZEND_CALLSTATIC_FUNC_NAME		42202						
ANR	43070	Symbol	fptr -> common . num_args		42202						
ANR	43071	Symbol	* ce		42202						
ANR	43072	Symbol	ZEND_GET_FUNC_NAME		42202						
ANR	43073	Symbol	ZEND_DEBUGINFO_FUNC_NAME		42202						
ANR	43074	Symbol	ZEND_CALL_FUNC_NAME		42202						
ANR	43075	Symbol	* lcname		42202						
ANR	43076	Symbol	memcmp		42202						
ANR	43077	Symbol	ZEND_CLONE_FUNC_NAME		42202						
ANR	43078	Symbol	error_type		42202						
ANR	43079	Symbol	ZEND_ISSET_FUNC_NAME		42202						
ANR	43080	Symbol	name_len		42202						
ANR	43081	Symbol	ce -> name		42202						
ANR	43082	Symbol	ZEND_SET_FUNC_NAME		42202						
ANR	43083	Symbol	* fptr		42202						
ANR	43084	Symbol	ce		42202						
ANR	43085	Symbol	fptr -> common		42202						
ANR	43086	Symbol	ZSTR_VAL		42202						
ANR	43087	Symbol	fptr -> common . function_name		42202						
ANR	43088	Symbol	lcname		42202						
ANR	43089	Symbol	MIN		42202						
ANR	43090	Symbol	fptr		42202						
ANR	43091	Symbol	ZSTR_LEN		42202						
ANR	43092	Symbol	ZEND_DESTRUCTOR_FUNC_NAME		42202						
ANR	43093	Symbol	ZEND_TOSTRING_FUNC_NAME		42202						
ANR	43094	Symbol	ZEND_UNSET_FUNC_NAME		42202						
ANR	43095	Function	zend_register_functions	2113:0:58576:71438							
ANR	43096	FunctionDef	"zend_register_functions (zend_class_entry * scope , const zend_function_entry * functions , HashTable * function_table , int type)"		43095	0					
ANR	43097	CompoundStatement		2114:0:58723:71438	43095	0					
ANR	43098	IdentifierDeclStatement	const zend_function_entry * ptr = functions ;	2115:1:58726:58768	43095	0	True				
ANR	43099	IdentifierDecl	* ptr = functions		43095	0					
ANR	43100	IdentifierDeclType	const zend_function_entry *		43095	0					
ANR	43101	Identifier	ptr		43095	1					
ANR	43102	AssignmentExpression	* ptr = functions		43095	2		=			
ANR	43103	Identifier	functions		43095	0					
ANR	43104	Identifier	functions		43095	1					
ANR	43105	IdentifierDeclStatement	"zend_function function , * reg_function ;"	2116:1:58771:58808	43095	1	True				
ANR	43106	IdentifierDecl	function		43095	0					
ANR	43107	IdentifierDeclType	zend_function		43095	0					
ANR	43108	Identifier	function		43095	1					
ANR	43109	IdentifierDecl	* reg_function		43095	1					
ANR	43110	IdentifierDeclType	zend_function *		43095	0					
ANR	43111	Identifier	reg_function		43095	1					
ANR	43112	IdentifierDeclStatement	zend_internal_function * internal_function = ( zend_internal_function * ) & function ;	2117:1:58811:58890	43095	2	True				
ANR	43113	IdentifierDecl	* internal_function = ( zend_internal_function * ) & function		43095	0					
ANR	43114	IdentifierDeclType	zend_internal_function *		43095	0					
ANR	43115	Identifier	internal_function		43095	1					
ANR	43116	AssignmentExpression	* internal_function = ( zend_internal_function * ) & function		43095	2		=			
ANR	43117	Identifier	internal_function		43095	0					
ANR	43118	CastExpression	( zend_internal_function * ) & function		43095	1					
ANR	43119	CastTarget	zend_internal_function *		43095	0					
ANR	43120	UnaryOperationExpression	& function		43095	1					
ANR	43121	UnaryOperator	&		43095	0					
ANR	43122	Identifier	function		43095	1					
ANR	43123	IdentifierDeclStatement	"int count = 0 , unload = 0 ;"	2118:1:58893:58914	43095	3	True				
ANR	43124	IdentifierDecl	count = 0		43095	0					
ANR	43125	IdentifierDeclType	int		43095	0					
ANR	43126	Identifier	count		43095	1					
ANR	43127	AssignmentExpression	count = 0		43095	2		=			
ANR	43128	Identifier	count		43095	0					
ANR	43129	PrimaryExpression	0		43095	1					
ANR	43130	IdentifierDecl	unload = 0		43095	1					
ANR	43131	IdentifierDeclType	int		43095	0					
ANR	43132	Identifier	unload		43095	1					
ANR	43133	AssignmentExpression	unload = 0		43095	2		=			
ANR	43134	Identifier	unload		43095	0					
ANR	43135	PrimaryExpression	0		43095	1					
ANR	43136	IdentifierDeclStatement	HashTable * target_function_table = function_table ;	2119:1:58917:58966	43095	4	True				
ANR	43137	IdentifierDecl	* target_function_table = function_table		43095	0					
ANR	43138	IdentifierDeclType	HashTable *		43095	0					
ANR	43139	Identifier	target_function_table		43095	1					
ANR	43140	AssignmentExpression	* target_function_table = function_table		43095	2		=			
ANR	43141	Identifier	function_table		43095	0					
ANR	43142	Identifier	function_table		43095	1					
ANR	43143	IdentifierDeclStatement	int error_type ;	2120:1:58969:58983	43095	5	True				
ANR	43144	IdentifierDecl	error_type		43095	0					
ANR	43145	IdentifierDeclType	int		43095	0					
ANR	43146	Identifier	error_type		43095	1					
ANR	43147	IdentifierDeclStatement	"zend_function * ctor = NULL , * dtor = NULL , * clone = NULL , * __get = NULL , * __set = NULL , * __unset = NULL , * __isset = NULL , * __call = NULL , * __callstatic = NULL , * __tostring = NULL , * __debugInfo = NULL ;"	2121:1:58986:59184	43095	6	True				
ANR	43148	IdentifierDecl	* ctor = NULL		43095	0					
ANR	43149	IdentifierDeclType	zend_function *		43095	0					
ANR	43150	Identifier	ctor		43095	1					
ANR	43151	AssignmentExpression	* ctor = NULL		43095	2		=			
ANR	43152	Identifier	NULL		43095	0					
ANR	43153	Identifier	NULL		43095	1					
ANR	43154	IdentifierDecl	* dtor = NULL		43095	1					
ANR	43155	IdentifierDeclType	zend_function *		43095	0					
ANR	43156	Identifier	dtor		43095	1					
ANR	43157	AssignmentExpression	* dtor = NULL		43095	2		=			
ANR	43158	Identifier	NULL		43095	0					
ANR	43159	Identifier	NULL		43095	1					
ANR	43160	IdentifierDecl	* clone = NULL		43095	2					
ANR	43161	IdentifierDeclType	zend_function *		43095	0					
ANR	43162	Identifier	clone		43095	1					
ANR	43163	AssignmentExpression	* clone = NULL		43095	2		=			
ANR	43164	Identifier	NULL		43095	0					
ANR	43165	Identifier	NULL		43095	1					
ANR	43166	IdentifierDecl	* __get = NULL		43095	3					
ANR	43167	IdentifierDeclType	zend_function *		43095	0					
ANR	43168	Identifier	__get		43095	1					
ANR	43169	AssignmentExpression	* __get = NULL		43095	2		=			
ANR	43170	Identifier	NULL		43095	0					
ANR	43171	Identifier	NULL		43095	1					
ANR	43172	IdentifierDecl	* __set = NULL		43095	4					
ANR	43173	IdentifierDeclType	zend_function *		43095	0					
ANR	43174	Identifier	__set		43095	1					
ANR	43175	AssignmentExpression	* __set = NULL		43095	2		=			
ANR	43176	Identifier	NULL		43095	0					
ANR	43177	Identifier	NULL		43095	1					
ANR	43178	IdentifierDecl	* __unset = NULL		43095	5					
ANR	43179	IdentifierDeclType	zend_function *		43095	0					
ANR	43180	Identifier	__unset		43095	1					
ANR	43181	AssignmentExpression	* __unset = NULL		43095	2		=			
ANR	43182	Identifier	NULL		43095	0					
ANR	43183	Identifier	NULL		43095	1					
ANR	43184	IdentifierDecl	* __isset = NULL		43095	6					
ANR	43185	IdentifierDeclType	zend_function *		43095	0					
ANR	43186	Identifier	__isset		43095	1					
ANR	43187	AssignmentExpression	* __isset = NULL		43095	2		=			
ANR	43188	Identifier	NULL		43095	0					
ANR	43189	Identifier	NULL		43095	1					
ANR	43190	IdentifierDecl	* __call = NULL		43095	7					
ANR	43191	IdentifierDeclType	zend_function *		43095	0					
ANR	43192	Identifier	__call		43095	1					
ANR	43193	AssignmentExpression	* __call = NULL		43095	2		=			
ANR	43194	Identifier	NULL		43095	0					
ANR	43195	Identifier	NULL		43095	1					
ANR	43196	IdentifierDecl	* __callstatic = NULL		43095	8					
ANR	43197	IdentifierDeclType	zend_function *		43095	0					
ANR	43198	Identifier	__callstatic		43095	1					
ANR	43199	AssignmentExpression	* __callstatic = NULL		43095	2		=			
ANR	43200	Identifier	NULL		43095	0					
ANR	43201	Identifier	NULL		43095	1					
ANR	43202	IdentifierDecl	* __tostring = NULL		43095	9					
ANR	43203	IdentifierDeclType	zend_function *		43095	0					
ANR	43204	Identifier	__tostring		43095	1					
ANR	43205	AssignmentExpression	* __tostring = NULL		43095	2		=			
ANR	43206	Identifier	NULL		43095	0					
ANR	43207	Identifier	NULL		43095	1					
ANR	43208	IdentifierDecl	* __debugInfo = NULL		43095	10					
ANR	43209	IdentifierDeclType	zend_function *		43095	0					
ANR	43210	Identifier	__debugInfo		43095	1					
ANR	43211	AssignmentExpression	* __debugInfo = NULL		43095	2		=			
ANR	43212	Identifier	NULL		43095	0					
ANR	43213	Identifier	NULL		43095	1					
ANR	43214	IdentifierDeclStatement	zend_string * lowercase_name ;	2122:1:59187:59214	43095	7	True				
ANR	43215	IdentifierDecl	* lowercase_name		43095	0					
ANR	43216	IdentifierDeclType	zend_string *		43095	0					
ANR	43217	Identifier	lowercase_name		43095	1					
ANR	43218	IdentifierDeclStatement	size_t fname_len ;	2123:1:59217:59233	43095	8	True				
ANR	43219	IdentifierDecl	fname_len		43095	0					
ANR	43220	IdentifierDeclType	size_t		43095	0					
ANR	43221	Identifier	fname_len		43095	1					
ANR	43222	IdentifierDeclStatement	const char * lc_class_name = NULL ;	2124:1:59236:59268	43095	9	True				
ANR	43223	IdentifierDecl	* lc_class_name = NULL		43095	0					
ANR	43224	IdentifierDeclType	const char *		43095	0					
ANR	43225	Identifier	lc_class_name		43095	1					
ANR	43226	AssignmentExpression	* lc_class_name = NULL		43095	2		=			
ANR	43227	Identifier	NULL		43095	0					
ANR	43228	Identifier	NULL		43095	1					
ANR	43229	IdentifierDeclStatement	size_t class_name_len = 0 ;	2125:1:59271:59296	43095	10	True				
ANR	43230	IdentifierDecl	class_name_len = 0		43095	0					
ANR	43231	IdentifierDeclType	size_t		43095	0					
ANR	43232	Identifier	class_name_len		43095	1					
ANR	43233	AssignmentExpression	class_name_len = 0		43095	2		=			
ANR	43234	Identifier	class_name_len		43095	0					
ANR	43235	PrimaryExpression	0		43095	1					
ANR	43236	IfStatement	if ( type == MODULE_PERSISTENT )		43095	11					
ANR	43237	Condition	type == MODULE_PERSISTENT	2127:5:59304:59326	43095	0	True				
ANR	43238	EqualityExpression	type == MODULE_PERSISTENT		43095	0		==			
ANR	43239	Identifier	type		43095	0					
ANR	43240	Identifier	MODULE_PERSISTENT		43095	1					
ANR	43241	CompoundStatement		14:30:605:605	43095	1					
ANR	43242	ExpressionStatement	error_type = E_CORE_WARNING	2128:2:59333:59360	43095	0	True				
ANR	43243	AssignmentExpression	error_type = E_CORE_WARNING		43095	0		=			
ANR	43244	Identifier	error_type		43095	0					
ANR	43245	Identifier	E_CORE_WARNING		43095	1					
ANR	43246	ElseStatement	else		43095	0					
ANR	43247	CompoundStatement		16:8:646:646	43095	0					
ANR	43248	ExpressionStatement	error_type = E_WARNING	2130:2:59374:59396	43095	0	True				
ANR	43249	AssignmentExpression	error_type = E_WARNING		43095	0		=			
ANR	43250	Identifier	error_type		43095	0					
ANR	43251	Identifier	E_WARNING		43095	1					
ANR	43252	IfStatement	if ( ! target_function_table )		43095	12					
ANR	43253	Condition	! target_function_table	2133:5:59407:59428	43095	0	True				
ANR	43254	UnaryOperationExpression	! target_function_table		43095	0					
ANR	43255	UnaryOperator	!		43095	0					
ANR	43256	Identifier	target_function_table		43095	1					
ANR	43257	CompoundStatement		20:29:707:707	43095	1					
ANR	43258	ExpressionStatement	target_function_table = CG ( function_table )	2134:2:59435:59477	43095	0	True				
ANR	43259	AssignmentExpression	target_function_table = CG ( function_table )		43095	0		=			
ANR	43260	Identifier	target_function_table		43095	0					
ANR	43261	CallExpression	CG ( function_table )		43095	1					
ANR	43262	Callee	CG		43095	0					
ANR	43263	Identifier	CG		43095	0					
ANR	43264	ArgumentList	function_table		43095	1					
ANR	43265	Argument	function_table		43095	0					
ANR	43266	Identifier	function_table		43095	0					
ANR	43267	ExpressionStatement	internal_function -> type = ZEND_INTERNAL_FUNCTION	2136:1:59483:59531	43095	13	True				
ANR	43268	AssignmentExpression	internal_function -> type = ZEND_INTERNAL_FUNCTION		43095	0		=			
ANR	43269	PtrMemberAccess	internal_function -> type		43095	0					
ANR	43270	Identifier	internal_function		43095	0					
ANR	43271	Identifier	type		43095	1					
ANR	43272	Identifier	ZEND_INTERNAL_FUNCTION		43095	1					
ANR	43273	ExpressionStatement	internal_function -> module = EG ( current_module )	2137:1:59534:59580	43095	14	True				
ANR	43274	AssignmentExpression	internal_function -> module = EG ( current_module )		43095	0		=			
ANR	43275	PtrMemberAccess	internal_function -> module		43095	0					
ANR	43276	Identifier	internal_function		43095	0					
ANR	43277	Identifier	module		43095	1					
ANR	43278	CallExpression	EG ( current_module )		43095	1					
ANR	43279	Callee	EG		43095	0					
ANR	43280	Identifier	EG		43095	0					
ANR	43281	ArgumentList	current_module		43095	1					
ANR	43282	Argument	current_module		43095	0					
ANR	43283	Identifier	current_module		43095	0					
ANR	43284	ExpressionStatement	"memset ( internal_function -> reserved , 0 , ZEND_MAX_RESERVED_RESOURCES * sizeof ( void * ) )"	2138:1:59583:59666	43095	15	True				
ANR	43285	CallExpression	"memset ( internal_function -> reserved , 0 , ZEND_MAX_RESERVED_RESOURCES * sizeof ( void * ) )"		43095	0					
ANR	43286	Callee	memset		43095	0					
ANR	43287	Identifier	memset		43095	0					
ANR	43288	ArgumentList	internal_function -> reserved		43095	1					
ANR	43289	Argument	internal_function -> reserved		43095	0					
ANR	43290	PtrMemberAccess	internal_function -> reserved		43095	0					
ANR	43291	Identifier	internal_function		43095	0					
ANR	43292	Identifier	reserved		43095	1					
ANR	43293	Argument	0		43095	1					
ANR	43294	PrimaryExpression	0		43095	0					
ANR	43295	Argument	ZEND_MAX_RESERVED_RESOURCES * sizeof ( void * )		43095	2					
ANR	43296	MultiplicativeExpression	ZEND_MAX_RESERVED_RESOURCES * sizeof ( void * )		43095	0		*			
ANR	43297	Identifier	ZEND_MAX_RESERVED_RESOURCES		43095	0					
ANR	43298	SizeofExpression	sizeof ( void * )		43095	1					
ANR	43299	Sizeof	sizeof		43095	0					
ANR	43300	SizeofOperand	void *		43095	1					
ANR	43301	IfStatement	if ( scope )		43095	16					
ANR	43302	Condition	scope	2140:5:59674:59678	43095	0	True				
ANR	43303	Identifier	scope		43095	0					
ANR	43304	CompoundStatement		27:12:957:957	43095	1					
ANR	43305	ExpressionStatement	class_name_len = ZSTR_LEN ( scope -> name )	2141:2:59685:59723	43095	0	True				
ANR	43306	AssignmentExpression	class_name_len = ZSTR_LEN ( scope -> name )		43095	0		=			
ANR	43307	Identifier	class_name_len		43095	0					
ANR	43308	CallExpression	ZSTR_LEN ( scope -> name )		43095	1					
ANR	43309	Callee	ZSTR_LEN		43095	0					
ANR	43310	Identifier	ZSTR_LEN		43095	0					
ANR	43311	ArgumentList	scope -> name		43095	1					
ANR	43312	Argument	scope -> name		43095	0					
ANR	43313	PtrMemberAccess	scope -> name		43095	0					
ANR	43314	Identifier	scope		43095	0					
ANR	43315	Identifier	name		43095	1					
ANR	43316	IfStatement	"if ( ( lc_class_name = zend_memrchr ( ZSTR_VAL ( scope -> name ) , '\\\\' , class_name_len ) ) )"		43095	1					
ANR	43317	Condition	"lc_class_name = zend_memrchr ( ZSTR_VAL ( scope -> name ) , '\\\\' , class_name_len )"	2142:6:59731:59805	43095	0	True				
ANR	43318	AssignmentExpression	"lc_class_name = zend_memrchr ( ZSTR_VAL ( scope -> name ) , '\\\\' , class_name_len )"		43095	0		=			
ANR	43319	Identifier	lc_class_name		43095	0					
ANR	43320	CallExpression	"zend_memrchr ( ZSTR_VAL ( scope -> name ) , '\\\\' , class_name_len )"		43095	1					
ANR	43321	Callee	zend_memrchr		43095	0					
ANR	43322	Identifier	zend_memrchr		43095	0					
ANR	43323	ArgumentList	ZSTR_VAL ( scope -> name )		43095	1					
ANR	43324	Argument	ZSTR_VAL ( scope -> name )		43095	0					
ANR	43325	CallExpression	ZSTR_VAL ( scope -> name )		43095	0					
ANR	43326	Callee	ZSTR_VAL		43095	0					
ANR	43327	Identifier	ZSTR_VAL		43095	0					
ANR	43328	ArgumentList	scope -> name		43095	1					
ANR	43329	Argument	scope -> name		43095	0					
ANR	43330	PtrMemberAccess	scope -> name		43095	0					
ANR	43331	Identifier	scope		43095	0					
ANR	43332	Identifier	name		43095	1					
ANR	43333	Argument	'\\\\'		43095	1					
ANR	43334	PrimaryExpression	'\\\\'		43095	0					
ANR	43335	Argument	class_name_len		43095	2					
ANR	43336	Identifier	class_name_len		43095	0					
ANR	43337	CompoundStatement		29:83:1084:1084	43095	1					
ANR	43338	ExpressionStatement	++ lc_class_name	2143:3:59813:59828	43095	0	True				
ANR	43339	UnaryExpression	++ lc_class_name		43095	0					
ANR	43340	IncDec	++		43095	0					
ANR	43341	Identifier	lc_class_name		43095	1					
ANR	43342	ExpressionStatement	class_name_len -= ( lc_class_name - ZSTR_VAL ( scope -> name ) )	2144:3:59833:59890	43095	1	True				
ANR	43343	AssignmentExpression	class_name_len -= ( lc_class_name - ZSTR_VAL ( scope -> name ) )		43095	0		-=			
ANR	43344	Identifier	class_name_len		43095	0					
ANR	43345	AdditiveExpression	lc_class_name - ZSTR_VAL ( scope -> name )		43095	1		-			
ANR	43346	Identifier	lc_class_name		43095	0					
ANR	43347	CallExpression	ZSTR_VAL ( scope -> name )		43095	1					
ANR	43348	Callee	ZSTR_VAL		43095	0					
ANR	43349	Identifier	ZSTR_VAL		43095	0					
ANR	43350	ArgumentList	scope -> name		43095	1					
ANR	43351	Argument	scope -> name		43095	0					
ANR	43352	PtrMemberAccess	scope -> name		43095	0					
ANR	43353	Identifier	scope		43095	0					
ANR	43354	Identifier	name		43095	1					
ANR	43355	ExpressionStatement	"lc_class_name = zend_str_tolower_dup ( lc_class_name , class_name_len )"	2145:3:59895:59962	43095	2	True				
ANR	43356	AssignmentExpression	"lc_class_name = zend_str_tolower_dup ( lc_class_name , class_name_len )"		43095	0		=			
ANR	43357	Identifier	lc_class_name		43095	0					
ANR	43358	CallExpression	"zend_str_tolower_dup ( lc_class_name , class_name_len )"		43095	1					
ANR	43359	Callee	zend_str_tolower_dup		43095	0					
ANR	43360	Identifier	zend_str_tolower_dup		43095	0					
ANR	43361	ArgumentList	lc_class_name		43095	1					
ANR	43362	Argument	lc_class_name		43095	0					
ANR	43363	Identifier	lc_class_name		43095	0					
ANR	43364	Argument	class_name_len		43095	1					
ANR	43365	Identifier	class_name_len		43095	0					
ANR	43366	ElseStatement	else		43095	0					
ANR	43367	CompoundStatement		33:9:1249:1249	43095	0					
ANR	43368	ExpressionStatement	"lc_class_name = zend_str_tolower_dup ( ZSTR_VAL ( scope -> name ) , class_name_len )"	2147:3:59978:60053	43095	0	True				
ANR	43369	AssignmentExpression	"lc_class_name = zend_str_tolower_dup ( ZSTR_VAL ( scope -> name ) , class_name_len )"		43095	0		=			
ANR	43370	Identifier	lc_class_name		43095	0					
ANR	43371	CallExpression	"zend_str_tolower_dup ( ZSTR_VAL ( scope -> name ) , class_name_len )"		43095	1					
ANR	43372	Callee	zend_str_tolower_dup		43095	0					
ANR	43373	Identifier	zend_str_tolower_dup		43095	0					
ANR	43374	ArgumentList	ZSTR_VAL ( scope -> name )		43095	1					
ANR	43375	Argument	ZSTR_VAL ( scope -> name )		43095	0					
ANR	43376	CallExpression	ZSTR_VAL ( scope -> name )		43095	0					
ANR	43377	Callee	ZSTR_VAL		43095	0					
ANR	43378	Identifier	ZSTR_VAL		43095	0					
ANR	43379	ArgumentList	scope -> name		43095	1					
ANR	43380	Argument	scope -> name		43095	0					
ANR	43381	PtrMemberAccess	scope -> name		43095	0					
ANR	43382	Identifier	scope		43095	0					
ANR	43383	Identifier	name		43095	1					
ANR	43384	Argument	class_name_len		43095	1					
ANR	43385	Identifier	class_name_len		43095	0					
ANR	43386	WhileStatement	while ( ptr -> fname )		43095	17					
ANR	43387	Condition	ptr -> fname	2151:8:60071:60080	43095	0	True				
ANR	43388	PtrMemberAccess	ptr -> fname		43095	0					
ANR	43389	Identifier	ptr		43095	0					
ANR	43390	Identifier	fname		43095	1					
ANR	43391	CompoundStatement		38:20:1359:1359	43095	1					
ANR	43392	ExpressionStatement	fname_len = strlen ( ptr -> fname )	2152:2:60087:60117	43095	0	True				
ANR	43393	AssignmentExpression	fname_len = strlen ( ptr -> fname )		43095	0		=			
ANR	43394	Identifier	fname_len		43095	0					
ANR	43395	CallExpression	strlen ( ptr -> fname )		43095	1					
ANR	43396	Callee	strlen		43095	0					
ANR	43397	Identifier	strlen		43095	0					
ANR	43398	ArgumentList	ptr -> fname		43095	1					
ANR	43399	Argument	ptr -> fname		43095	0					
ANR	43400	PtrMemberAccess	ptr -> fname		43095	0					
ANR	43401	Identifier	ptr		43095	0					
ANR	43402	Identifier	fname		43095	1					
ANR	43403	ExpressionStatement	internal_function -> handler = ptr -> handler	2153:2:60121:60162	43095	1	True				
ANR	43404	AssignmentExpression	internal_function -> handler = ptr -> handler		43095	0		=			
ANR	43405	PtrMemberAccess	internal_function -> handler		43095	0					
ANR	43406	Identifier	internal_function		43095	0					
ANR	43407	Identifier	handler		43095	1					
ANR	43408	PtrMemberAccess	ptr -> handler		43095	1					
ANR	43409	Identifier	ptr		43095	0					
ANR	43410	Identifier	handler		43095	1					
ANR	43411	ExpressionStatement	"internal_function -> function_name = zend_new_interned_string ( zend_string_init ( ptr -> fname , fname_len , 1 ) )"	2154:2:60166:60269	43095	2	True				
ANR	43412	AssignmentExpression	"internal_function -> function_name = zend_new_interned_string ( zend_string_init ( ptr -> fname , fname_len , 1 ) )"		43095	0		=			
ANR	43413	PtrMemberAccess	internal_function -> function_name		43095	0					
ANR	43414	Identifier	internal_function		43095	0					
ANR	43415	Identifier	function_name		43095	1					
ANR	43416	CallExpression	"zend_new_interned_string ( zend_string_init ( ptr -> fname , fname_len , 1 ) )"		43095	1					
ANR	43417	Callee	zend_new_interned_string		43095	0					
ANR	43418	Identifier	zend_new_interned_string		43095	0					
ANR	43419	ArgumentList	"zend_string_init ( ptr -> fname , fname_len , 1 )"		43095	1					
ANR	43420	Argument	"zend_string_init ( ptr -> fname , fname_len , 1 )"		43095	0					
ANR	43421	CallExpression	"zend_string_init ( ptr -> fname , fname_len , 1 )"		43095	0					
ANR	43422	Callee	zend_string_init		43095	0					
ANR	43423	Identifier	zend_string_init		43095	0					
ANR	43424	ArgumentList	ptr -> fname		43095	1					
ANR	43425	Argument	ptr -> fname		43095	0					
ANR	43426	PtrMemberAccess	ptr -> fname		43095	0					
ANR	43427	Identifier	ptr		43095	0					
ANR	43428	Identifier	fname		43095	1					
ANR	43429	Argument	fname_len		43095	1					
ANR	43430	Identifier	fname_len		43095	0					
ANR	43431	Argument	1		43095	2					
ANR	43432	PrimaryExpression	1		43095	0					
ANR	43433	ExpressionStatement	internal_function -> scope = scope	2155:2:60273:60305	43095	3	True				
ANR	43434	AssignmentExpression	internal_function -> scope = scope		43095	0		=			
ANR	43435	PtrMemberAccess	internal_function -> scope		43095	0					
ANR	43436	Identifier	internal_function		43095	0					
ANR	43437	Identifier	scope		43095	1					
ANR	43438	Identifier	scope		43095	1					
ANR	43439	ExpressionStatement	internal_function -> prototype = NULL	2156:2:60309:60344	43095	4	True				
ANR	43440	AssignmentExpression	internal_function -> prototype = NULL		43095	0		=			
ANR	43441	PtrMemberAccess	internal_function -> prototype		43095	0					
ANR	43442	Identifier	internal_function		43095	0					
ANR	43443	Identifier	prototype		43095	1					
ANR	43444	Identifier	NULL		43095	1					
ANR	43445	IfStatement	if ( ptr -> flags )		43095	5					
ANR	43446	Condition	ptr -> flags	2157:6:60352:60361	43095	0	True				
ANR	43447	PtrMemberAccess	ptr -> flags		43095	0					
ANR	43448	Identifier	ptr		43095	0					
ANR	43449	Identifier	flags		43095	1					
ANR	43450	CompoundStatement		44:18:1640:1640	43095	1					
ANR	43451	IfStatement	if ( ! ( ptr -> flags & ZEND_ACC_PPP_MASK ) )		43095	0					
ANR	43452	Condition	! ( ptr -> flags & ZEND_ACC_PPP_MASK )	2158:7:60373:60405	43095	0	True				
ANR	43453	UnaryOperationExpression	! ( ptr -> flags & ZEND_ACC_PPP_MASK )		43095	0					
ANR	43454	UnaryOperator	!		43095	0					
ANR	43455	BitAndExpression	ptr -> flags & ZEND_ACC_PPP_MASK		43095	1		&			
ANR	43456	PtrMemberAccess	ptr -> flags		43095	0					
ANR	43457	Identifier	ptr		43095	0					
ANR	43458	Identifier	flags		43095	1					
ANR	43459	Identifier	ZEND_ACC_PPP_MASK		43095	1					
ANR	43460	CompoundStatement		45:42:1684:1684	43095	1					
ANR	43461	IfStatement	if ( ptr -> flags != ZEND_ACC_DEPRECATED || scope )		43095	0					
ANR	43462	Condition	ptr -> flags != ZEND_ACC_DEPRECATED || scope	2159:8:60418:60459	43095	0	True				
ANR	43463	OrExpression	ptr -> flags != ZEND_ACC_DEPRECATED || scope		43095	0		||			
ANR	43464	EqualityExpression	ptr -> flags != ZEND_ACC_DEPRECATED		43095	0		!=			
ANR	43465	PtrMemberAccess	ptr -> flags		43095	0					
ANR	43466	Identifier	ptr		43095	0					
ANR	43467	Identifier	flags		43095	1					
ANR	43468	Identifier	ZEND_ACC_DEPRECATED		43095	1					
ANR	43469	Identifier	scope		43095	1					
ANR	43470	CompoundStatement		46:52:1738:1738	43095	1					
ANR	43471	ExpressionStatement	"zend_error ( error_type , ""Invalid access level for %s%s%s() - access must be exactly one of public, protected or private"" , scope ? ZSTR_VAL ( scope -> name ) : """" , scope ? ""::"" : """" , ptr -> fname )"	2160:5:60469:60656	43095	0	True				
ANR	43472	CallExpression	"zend_error ( error_type , ""Invalid access level for %s%s%s() - access must be exactly one of public, protected or private"" , scope ? ZSTR_VAL ( scope -> name ) : """" , scope ? ""::"" : """" , ptr -> fname )"		43095	0					
ANR	43473	Callee	zend_error		43095	0					
ANR	43474	Identifier	zend_error		43095	0					
ANR	43475	ArgumentList	error_type		43095	1					
ANR	43476	Argument	error_type		43095	0					
ANR	43477	Identifier	error_type		43095	0					
ANR	43478	Argument	"""Invalid access level for %s%s%s() - access must be exactly one of public, protected or private"""		43095	1					
ANR	43479	PrimaryExpression	"""Invalid access level for %s%s%s() - access must be exactly one of public, protected or private"""		43095	0					
ANR	43480	Argument	"scope ? ZSTR_VAL ( scope -> name ) : """""		43095	2					
ANR	43481	ConditionalExpression	"scope ? ZSTR_VAL ( scope -> name ) : """""		43095	0					
ANR	43482	Condition	scope		43095	0					
ANR	43483	Identifier	scope		43095	0					
ANR	43484	CallExpression	ZSTR_VAL ( scope -> name )		43095	1					
ANR	43485	Callee	ZSTR_VAL		43095	0					
ANR	43486	Identifier	ZSTR_VAL		43095	0					
ANR	43487	ArgumentList	scope -> name		43095	1					
ANR	43488	Argument	scope -> name		43095	0					
ANR	43489	PtrMemberAccess	scope -> name		43095	0					
ANR	43490	Identifier	scope		43095	0					
ANR	43491	Identifier	name		43095	1					
ANR	43492	PrimaryExpression	""""""		43095	2					
ANR	43493	Argument	"scope ? ""::"" : """""		43095	3					
ANR	43494	ConditionalExpression	"scope ? ""::"" : """""		43095	0					
ANR	43495	Condition	scope		43095	0					
ANR	43496	Identifier	scope		43095	0					
ANR	43497	PrimaryExpression	"""::"""		43095	1					
ANR	43498	PrimaryExpression	""""""		43095	2					
ANR	43499	Argument	ptr -> fname		43095	4					
ANR	43500	PtrMemberAccess	ptr -> fname		43095	0					
ANR	43501	Identifier	ptr		43095	0					
ANR	43502	Identifier	fname		43095	1					
ANR	43503	ExpressionStatement	internal_function -> fn_flags = ZEND_ACC_PUBLIC | ptr -> flags	2162:4:60668:60726	43095	1	True				
ANR	43504	AssignmentExpression	internal_function -> fn_flags = ZEND_ACC_PUBLIC | ptr -> flags		43095	0		=			
ANR	43505	PtrMemberAccess	internal_function -> fn_flags		43095	0					
ANR	43506	Identifier	internal_function		43095	0					
ANR	43507	Identifier	fn_flags		43095	1					
ANR	43508	InclusiveOrExpression	ZEND_ACC_PUBLIC | ptr -> flags		43095	1		|			
ANR	43509	Identifier	ZEND_ACC_PUBLIC		43095	0					
ANR	43510	PtrMemberAccess	ptr -> flags		43095	1					
ANR	43511	Identifier	ptr		43095	0					
ANR	43512	Identifier	flags		43095	1					
ANR	43513	ElseStatement	else		43095	0					
ANR	43514	CompoundStatement		50:10:2014:2014	43095	0					
ANR	43515	ExpressionStatement	internal_function -> fn_flags = ptr -> flags	2164:4:60744:60784	43095	0	True				
ANR	43516	AssignmentExpression	internal_function -> fn_flags = ptr -> flags		43095	0		=			
ANR	43517	PtrMemberAccess	internal_function -> fn_flags		43095	0					
ANR	43518	Identifier	internal_function		43095	0					
ANR	43519	Identifier	fn_flags		43095	1					
ANR	43520	PtrMemberAccess	ptr -> flags		43095	1					
ANR	43521	Identifier	ptr		43095	0					
ANR	43522	Identifier	flags		43095	1					
ANR	43523	ElseStatement	else		43095	0					
ANR	43524	CompoundStatement		53:9:2076:2076	43095	0					
ANR	43525	ExpressionStatement	internal_function -> fn_flags = ZEND_ACC_PUBLIC	2167:3:60805:60850	43095	0	True				
ANR	43526	AssignmentExpression	internal_function -> fn_flags = ZEND_ACC_PUBLIC		43095	0		=			
ANR	43527	PtrMemberAccess	internal_function -> fn_flags		43095	0					
ANR	43528	Identifier	internal_function		43095	0					
ANR	43529	Identifier	fn_flags		43095	1					
ANR	43530	Identifier	ZEND_ACC_PUBLIC		43095	1					
ANR	43531	IfStatement	if ( ptr -> arg_info )		43095	6					
ANR	43532	Condition	ptr -> arg_info	2169:6:60862:60874	43095	0	True				
ANR	43533	PtrMemberAccess	ptr -> arg_info		43095	0					
ANR	43534	Identifier	ptr		43095	0					
ANR	43535	Identifier	arg_info		43095	1					
ANR	43536	CompoundStatement		57:3:2158:2237	43095	1					
ANR	43537	IdentifierDeclStatement	zend_internal_function_info * info = ( zend_internal_function_info * ) ptr -> arg_info ;	2170:3:60882:60961	43095	0	True				
ANR	43538	IdentifierDecl	* info = ( zend_internal_function_info * ) ptr -> arg_info		43095	0					
ANR	43539	IdentifierDeclType	zend_internal_function_info *		43095	0					
ANR	43540	Identifier	info		43095	1					
ANR	43541	AssignmentExpression	* info = ( zend_internal_function_info * ) ptr -> arg_info		43095	2		=			
ANR	43542	Identifier	info		43095	0					
ANR	43543	CastExpression	( zend_internal_function_info * ) ptr -> arg_info		43095	1					
ANR	43544	CastTarget	zend_internal_function_info *		43095	0					
ANR	43545	PtrMemberAccess	ptr -> arg_info		43095	1					
ANR	43546	Identifier	ptr		43095	0					
ANR	43547	Identifier	arg_info		43095	1					
ANR	43548	ExpressionStatement	internal_function -> arg_info = ( zend_internal_arg_info * ) ptr -> arg_info + 1	2172:3:60967:61037	43095	1	True				
ANR	43549	AssignmentExpression	internal_function -> arg_info = ( zend_internal_arg_info * ) ptr -> arg_info + 1		43095	0		=			
ANR	43550	PtrMemberAccess	internal_function -> arg_info		43095	0					
ANR	43551	Identifier	internal_function		43095	0					
ANR	43552	Identifier	arg_info		43095	1					
ANR	43553	AdditiveExpression	( zend_internal_arg_info * ) ptr -> arg_info + 1		43095	1		+			
ANR	43554	CastExpression	( zend_internal_arg_info * ) ptr -> arg_info		43095	0					
ANR	43555	CastTarget	zend_internal_arg_info *		43095	0					
ANR	43556	PtrMemberAccess	ptr -> arg_info		43095	1					
ANR	43557	Identifier	ptr		43095	0					
ANR	43558	Identifier	arg_info		43095	1					
ANR	43559	PrimaryExpression	1		43095	1					
ANR	43560	ExpressionStatement	internal_function -> num_args = ptr -> num_args	2173:3:61042:61085	43095	2	True				
ANR	43561	AssignmentExpression	internal_function -> num_args = ptr -> num_args		43095	0		=			
ANR	43562	PtrMemberAccess	internal_function -> num_args		43095	0					
ANR	43563	Identifier	internal_function		43095	0					
ANR	43564	Identifier	num_args		43095	1					
ANR	43565	PtrMemberAccess	ptr -> num_args		43095	1					
ANR	43566	Identifier	ptr		43095	0					
ANR	43567	Identifier	num_args		43095	1					
ANR	43568	IfStatement	if ( info -> required_num_args == ( zend_uintptr_t ) - 1 )		43095	3					
ANR	43569	Condition	info -> required_num_args == ( zend_uintptr_t ) - 1	2175:7:61189:61233	43095	0	True				
ANR	43570	EqualityExpression	info -> required_num_args == ( zend_uintptr_t ) - 1		43095	0		==			
ANR	43571	PtrMemberAccess	info -> required_num_args		43095	0					
ANR	43572	Identifier	info		43095	0					
ANR	43573	Identifier	required_num_args		43095	1					
ANR	43574	CastExpression	( zend_uintptr_t ) - 1		43095	1					
ANR	43575	CastTarget	zend_uintptr_t		43095	0					
ANR	43576	UnaryOperationExpression	- 1		43095	1					
ANR	43577	UnaryOperator	-		43095	0					
ANR	43578	PrimaryExpression	1		43095	1					
ANR	43579	CompoundStatement		62:54:2512:2512	43095	1					
ANR	43580	ExpressionStatement	internal_function -> required_num_args = ptr -> num_args	2176:4:61242:61294	43095	0	True				
ANR	43581	AssignmentExpression	internal_function -> required_num_args = ptr -> num_args		43095	0		=			
ANR	43582	PtrMemberAccess	internal_function -> required_num_args		43095	0					
ANR	43583	Identifier	internal_function		43095	0					
ANR	43584	Identifier	required_num_args		43095	1					
ANR	43585	PtrMemberAccess	ptr -> num_args		43095	1					
ANR	43586	Identifier	ptr		43095	0					
ANR	43587	Identifier	num_args		43095	1					
ANR	43588	ElseStatement	else		43095	0					
ANR	43589	CompoundStatement		64:10:2582:2582	43095	0					
ANR	43590	ExpressionStatement	internal_function -> required_num_args = info -> required_num_args	2178:4:61312:61374	43095	0	True				
ANR	43591	AssignmentExpression	internal_function -> required_num_args = info -> required_num_args		43095	0		=			
ANR	43592	PtrMemberAccess	internal_function -> required_num_args		43095	0					
ANR	43593	Identifier	internal_function		43095	0					
ANR	43594	Identifier	required_num_args		43095	1					
ANR	43595	PtrMemberAccess	info -> required_num_args		43095	1					
ANR	43596	Identifier	info		43095	0					
ANR	43597	Identifier	required_num_args		43095	1					
ANR	43598	IfStatement	if ( info -> return_reference )		43095	4					
ANR	43599	Condition	info -> return_reference	2180:7:61388:61409	43095	0	True				
ANR	43600	PtrMemberAccess	info -> return_reference		43095	0					
ANR	43601	Identifier	info		43095	0					
ANR	43602	Identifier	return_reference		43095	1					
ANR	43603	CompoundStatement		67:31:2688:2688	43095	1					
ANR	43604	ExpressionStatement	internal_function -> fn_flags |= ZEND_ACC_RETURN_REFERENCE	2181:4:61418:61474	43095	0	True				
ANR	43605	AssignmentExpression	internal_function -> fn_flags |= ZEND_ACC_RETURN_REFERENCE		43095	0		|=			
ANR	43606	PtrMemberAccess	internal_function -> fn_flags		43095	0					
ANR	43607	Identifier	internal_function		43095	0					
ANR	43608	Identifier	fn_flags		43095	1					
ANR	43609	Identifier	ZEND_ACC_RETURN_REFERENCE		43095	1					
ANR	43610	IfStatement	if ( ptr -> arg_info [ ptr -> num_args ] . is_variadic )		43095	5					
ANR	43611	Condition	ptr -> arg_info [ ptr -> num_args ] . is_variadic	2183:7:61488:61527	43095	0	True				
ANR	43612	MemberAccess	ptr -> arg_info [ ptr -> num_args ] . is_variadic		43095	0					
ANR	43613	ArrayIndexing	ptr -> arg_info [ ptr -> num_args ]		43095	0					
ANR	43614	PtrMemberAccess	ptr -> arg_info		43095	0					
ANR	43615	Identifier	ptr		43095	0					
ANR	43616	Identifier	arg_info		43095	1					
ANR	43617	PtrMemberAccess	ptr -> num_args		43095	1					
ANR	43618	Identifier	ptr		43095	0					
ANR	43619	Identifier	num_args		43095	1					
ANR	43620	Identifier	is_variadic		43095	1					
ANR	43621	CompoundStatement		70:49:2806:2806	43095	1					
ANR	43622	ExpressionStatement	internal_function -> fn_flags |= ZEND_ACC_VARIADIC	2184:4:61536:61584	43095	0	True				
ANR	43623	AssignmentExpression	internal_function -> fn_flags |= ZEND_ACC_VARIADIC		43095	0		|=			
ANR	43624	PtrMemberAccess	internal_function -> fn_flags		43095	0					
ANR	43625	Identifier	internal_function		43095	0					
ANR	43626	Identifier	fn_flags		43095	1					
ANR	43627	Identifier	ZEND_ACC_VARIADIC		43095	1					
ANR	43628	ExpressionStatement	internal_function -> num_args --	2186:4:61634:61663	43095	1	True				
ANR	43629	PostIncDecOperationExpression	internal_function -> num_args --		43095	0					
ANR	43630	PtrMemberAccess	internal_function -> num_args		43095	0					
ANR	43631	Identifier	internal_function		43095	0					
ANR	43632	Identifier	num_args		43095	1					
ANR	43633	IncDec	--		43095	1					
ANR	43634	IfStatement	if ( info -> type_hint )		43095	6					
ANR	43635	Condition	info -> type_hint	2188:7:61677:61691	43095	0	True				
ANR	43636	PtrMemberAccess	info -> type_hint		43095	0					
ANR	43637	Identifier	info		43095	0					
ANR	43638	Identifier	type_hint		43095	1					
ANR	43639	CompoundStatement		75:24:2970:2970	43095	1					
ANR	43640	IfStatement	if ( info -> class_name )		43095	0					
ANR	43641	Condition	info -> class_name	2189:8:61704:61719	43095	0	True				
ANR	43642	PtrMemberAccess	info -> class_name		43095	0					
ANR	43643	Identifier	info		43095	0					
ANR	43644	Identifier	class_name		43095	1					
ANR	43645	CompoundStatement		76:26:2998:2998	43095	1					
ANR	43646	ExpressionStatement	ZEND_ASSERT ( info -> type_hint == IS_OBJECT )	2190:5:61729:61770	43095	0	True				
ANR	43647	CallExpression	ZEND_ASSERT ( info -> type_hint == IS_OBJECT )		43095	0					
ANR	43648	Callee	ZEND_ASSERT		43095	0					
ANR	43649	Identifier	ZEND_ASSERT		43095	0					
ANR	43650	ArgumentList	info -> type_hint == IS_OBJECT		43095	1					
ANR	43651	Argument	info -> type_hint == IS_OBJECT		43095	0					
ANR	43652	EqualityExpression	info -> type_hint == IS_OBJECT		43095	0		==			
ANR	43653	PtrMemberAccess	info -> type_hint		43095	0					
ANR	43654	Identifier	info		43095	0					
ANR	43655	Identifier	type_hint		43095	1					
ANR	43656	Identifier	IS_OBJECT		43095	1					
ANR	43657	IfStatement	"if ( ! scope && ( ! strcasecmp ( info -> class_name , ""self"" ) || ! strcasecmp ( info -> class_name , ""parent"" ) ) )"		43095	1					
ANR	43658	Condition	"! scope && ( ! strcasecmp ( info -> class_name , ""self"" ) || ! strcasecmp ( info -> class_name , ""parent"" ) )"	2191:9:61781:61872	43095	0	True				
ANR	43659	AndExpression	"! scope && ( ! strcasecmp ( info -> class_name , ""self"" ) || ! strcasecmp ( info -> class_name , ""parent"" ) )"		43095	0		&&			
ANR	43660	UnaryOperationExpression	! scope		43095	0					
ANR	43661	UnaryOperator	!		43095	0					
ANR	43662	Identifier	scope		43095	1					
ANR	43663	OrExpression	"! strcasecmp ( info -> class_name , ""self"" ) || ! strcasecmp ( info -> class_name , ""parent"" )"		43095	1		||			
ANR	43664	UnaryOperationExpression	"! strcasecmp ( info -> class_name , ""self"" )"		43095	0					
ANR	43665	UnaryOperator	!		43095	0					
ANR	43666	CallExpression	"strcasecmp ( info -> class_name , ""self"" )"		43095	1					
ANR	43667	Callee	strcasecmp		43095	0					
ANR	43668	Identifier	strcasecmp		43095	0					
ANR	43669	ArgumentList	info -> class_name		43095	1					
ANR	43670	Argument	info -> class_name		43095	0					
ANR	43671	PtrMemberAccess	info -> class_name		43095	0					
ANR	43672	Identifier	info		43095	0					
ANR	43673	Identifier	class_name		43095	1					
ANR	43674	Argument	"""self"""		43095	1					
ANR	43675	PrimaryExpression	"""self"""		43095	0					
ANR	43676	UnaryOperationExpression	"! strcasecmp ( info -> class_name , ""parent"" )"		43095	1					
ANR	43677	UnaryOperator	!		43095	0					
ANR	43678	CallExpression	"strcasecmp ( info -> class_name , ""parent"" )"		43095	1					
ANR	43679	Callee	strcasecmp		43095	0					
ANR	43680	Identifier	strcasecmp		43095	0					
ANR	43681	ArgumentList	info -> class_name		43095	1					
ANR	43682	Argument	info -> class_name		43095	0					
ANR	43683	PtrMemberAccess	info -> class_name		43095	0					
ANR	43684	Identifier	info		43095	0					
ANR	43685	Identifier	class_name		43095	1					
ANR	43686	Argument	"""parent"""		43095	1					
ANR	43687	PrimaryExpression	"""parent"""		43095	0					
ANR	43688	CompoundStatement		78:103:3151:3151	43095	1					
ANR	43689	ExpressionStatement	"zend_error_noreturn ( E_CORE_ERROR , ""Cannot declare a return type of %s outside of a class scope"" , info -> class_name )"	2192:6:61883:61997	43095	0	True				
ANR	43690	CallExpression	"zend_error_noreturn ( E_CORE_ERROR , ""Cannot declare a return type of %s outside of a class scope"" , info -> class_name )"		43095	0					
ANR	43691	Callee	zend_error_noreturn		43095	0					
ANR	43692	Identifier	zend_error_noreturn		43095	0					
ANR	43693	ArgumentList	E_CORE_ERROR		43095	1					
ANR	43694	Argument	E_CORE_ERROR		43095	0					
ANR	43695	Identifier	E_CORE_ERROR		43095	0					
ANR	43696	Argument	"""Cannot declare a return type of %s outside of a class scope"""		43095	1					
ANR	43697	PrimaryExpression	"""Cannot declare a return type of %s outside of a class scope"""		43095	0					
ANR	43698	Argument	info -> class_name		43095	2					
ANR	43699	PtrMemberAccess	info -> class_name		43095	0					
ANR	43700	Identifier	info		43095	0					
ANR	43701	Identifier	class_name		43095	1					
ANR	43702	ExpressionStatement	internal_function -> fn_flags |= ZEND_ACC_HAS_RETURN_TYPE	2196:4:62017:62072	43095	1	True				
ANR	43703	AssignmentExpression	internal_function -> fn_flags |= ZEND_ACC_HAS_RETURN_TYPE		43095	0		|=			
ANR	43704	PtrMemberAccess	internal_function -> fn_flags		43095	0					
ANR	43705	Identifier	internal_function		43095	0					
ANR	43706	Identifier	fn_flags		43095	1					
ANR	43707	Identifier	ZEND_ACC_HAS_RETURN_TYPE		43095	1					
ANR	43708	ElseStatement	else		43095	0					
ANR	43709	CompoundStatement		85:9:3364:3364	43095	0					
ANR	43710	ExpressionStatement	internal_function -> arg_info = NULL	2199:3:62093:62127	43095	0	True				
ANR	43711	AssignmentExpression	internal_function -> arg_info = NULL		43095	0		=			
ANR	43712	PtrMemberAccess	internal_function -> arg_info		43095	0					
ANR	43713	Identifier	internal_function		43095	0					
ANR	43714	Identifier	arg_info		43095	1					
ANR	43715	Identifier	NULL		43095	1					
ANR	43716	ExpressionStatement	internal_function -> num_args = 0	2200:3:62132:62163	43095	1	True				
ANR	43717	AssignmentExpression	internal_function -> num_args = 0		43095	0		=			
ANR	43718	PtrMemberAccess	internal_function -> num_args		43095	0					
ANR	43719	Identifier	internal_function		43095	0					
ANR	43720	Identifier	num_args		43095	1					
ANR	43721	PrimaryExpression	0		43095	1					
ANR	43722	ExpressionStatement	internal_function -> required_num_args = 0	2201:3:62168:62208	43095	2	True				
ANR	43723	AssignmentExpression	internal_function -> required_num_args = 0		43095	0		=			
ANR	43724	PtrMemberAccess	internal_function -> required_num_args		43095	0					
ANR	43725	Identifier	internal_function		43095	0					
ANR	43726	Identifier	required_num_args		43095	1					
ANR	43727	PrimaryExpression	0		43095	1					
ANR	43728	ExpressionStatement	zend_set_function_arg_flags ( ( zend_function * ) internal_function )	2203:2:62216:62278	43095	7	True				
ANR	43729	CallExpression	zend_set_function_arg_flags ( ( zend_function * ) internal_function )		43095	0					
ANR	43730	Callee	zend_set_function_arg_flags		43095	0					
ANR	43731	Identifier	zend_set_function_arg_flags		43095	0					
ANR	43732	ArgumentList	( zend_function * ) internal_function		43095	1					
ANR	43733	Argument	( zend_function * ) internal_function		43095	0					
ANR	43734	CastExpression	( zend_function * ) internal_function		43095	0					
ANR	43735	CastTarget	zend_function *		43095	0					
ANR	43736	Identifier	internal_function		43095	1					
ANR	43737	IfStatement	if ( ptr -> flags & ZEND_ACC_ABSTRACT )		43095	8					
ANR	43738	Condition	ptr -> flags & ZEND_ACC_ABSTRACT	2204:6:62286:62315	43095	0	True				
ANR	43739	BitAndExpression	ptr -> flags & ZEND_ACC_ABSTRACT		43095	0		&			
ANR	43740	PtrMemberAccess	ptr -> flags		43095	0					
ANR	43741	Identifier	ptr		43095	0					
ANR	43742	Identifier	flags		43095	1					
ANR	43743	Identifier	ZEND_ACC_ABSTRACT		43095	1					
ANR	43744	CompoundStatement		91:38:3594:3594	43095	1					
ANR	43745	IfStatement	if ( scope )		43095	0					
ANR	43746	Condition	scope	2205:7:62327:62331	43095	0	True				
ANR	43747	Identifier	scope		43095	0					
ANR	43748	CompoundStatement		92:14:3610:3610	43095	1					
ANR	43749	ExpressionStatement	scope -> ce_flags |= ZEND_ACC_IMPLICIT_ABSTRACT_CLASS	2207:4:62424:62475	43095	0	True				
ANR	43750	AssignmentExpression	scope -> ce_flags |= ZEND_ACC_IMPLICIT_ABSTRACT_CLASS		43095	0		|=			
ANR	43751	PtrMemberAccess	scope -> ce_flags		43095	0					
ANR	43752	Identifier	scope		43095	0					
ANR	43753	Identifier	ce_flags		43095	1					
ANR	43754	Identifier	ZEND_ACC_IMPLICIT_ABSTRACT_CLASS		43095	1					
ANR	43755	IfStatement	if ( ! ( scope -> ce_flags & ZEND_ACC_INTERFACE ) )		43095	1					
ANR	43756	Condition	! ( scope -> ce_flags & ZEND_ACC_INTERFACE )	2208:8:62485:62523	43095	0	True				
ANR	43757	UnaryOperationExpression	! ( scope -> ce_flags & ZEND_ACC_INTERFACE )		43095	0					
ANR	43758	UnaryOperator	!		43095	0					
ANR	43759	BitAndExpression	scope -> ce_flags & ZEND_ACC_INTERFACE		43095	1		&			
ANR	43760	PtrMemberAccess	scope -> ce_flags		43095	0					
ANR	43761	Identifier	scope		43095	0					
ANR	43762	Identifier	ce_flags		43095	1					
ANR	43763	Identifier	ZEND_ACC_INTERFACE		43095	1					
ANR	43764	CompoundStatement		95:49:3802:3802	43095	1					
ANR	43765	ExpressionStatement	scope -> ce_flags |= ZEND_ACC_EXPLICIT_ABSTRACT_CLASS	2212:5:62781:62832	43095	0	True				
ANR	43766	AssignmentExpression	scope -> ce_flags |= ZEND_ACC_EXPLICIT_ABSTRACT_CLASS		43095	0		|=			
ANR	43767	PtrMemberAccess	scope -> ce_flags		43095	0					
ANR	43768	Identifier	scope		43095	0					
ANR	43769	Identifier	ce_flags		43095	1					
ANR	43770	Identifier	ZEND_ACC_EXPLICIT_ABSTRACT_CLASS		43095	1					
ANR	43771	IfStatement	if ( ptr -> flags & ZEND_ACC_STATIC && ( ! scope || ! ( scope -> ce_flags & ZEND_ACC_INTERFACE ) ) )		43095	1					
ANR	43772	Condition	ptr -> flags & ZEND_ACC_STATIC && ( ! scope || ! ( scope -> ce_flags & ZEND_ACC_INTERFACE ) )	2215:7:62852:62934	43095	0	True				
ANR	43773	AndExpression	ptr -> flags & ZEND_ACC_STATIC && ( ! scope || ! ( scope -> ce_flags & ZEND_ACC_INTERFACE ) )		43095	0		&&			
ANR	43774	BitAndExpression	ptr -> flags & ZEND_ACC_STATIC		43095	0		&			
ANR	43775	PtrMemberAccess	ptr -> flags		43095	0					
ANR	43776	Identifier	ptr		43095	0					
ANR	43777	Identifier	flags		43095	1					
ANR	43778	Identifier	ZEND_ACC_STATIC		43095	1					
ANR	43779	OrExpression	! scope || ! ( scope -> ce_flags & ZEND_ACC_INTERFACE )		43095	1		||			
ANR	43780	UnaryOperationExpression	! scope		43095	0					
ANR	43781	UnaryOperator	!		43095	0					
ANR	43782	Identifier	scope		43095	1					
ANR	43783	UnaryOperationExpression	! ( scope -> ce_flags & ZEND_ACC_INTERFACE )		43095	1					
ANR	43784	UnaryOperator	!		43095	0					
ANR	43785	BitAndExpression	scope -> ce_flags & ZEND_ACC_INTERFACE		43095	1		&			
ANR	43786	PtrMemberAccess	scope -> ce_flags		43095	0					
ANR	43787	Identifier	scope		43095	0					
ANR	43788	Identifier	ce_flags		43095	1					
ANR	43789	Identifier	ZEND_ACC_INTERFACE		43095	1					
ANR	43790	CompoundStatement		102:92:4213:4213	43095	1					
ANR	43791	ExpressionStatement	"zend_error ( error_type , ""Static function %s%s%s() cannot be abstract"" , scope ? ZSTR_VAL ( scope -> name ) : """" , scope ? ""::"" : """" , ptr -> fname )"	2216:4:62943:63079	43095	0	True				
ANR	43792	CallExpression	"zend_error ( error_type , ""Static function %s%s%s() cannot be abstract"" , scope ? ZSTR_VAL ( scope -> name ) : """" , scope ? ""::"" : """" , ptr -> fname )"		43095	0					
ANR	43793	Callee	zend_error		43095	0					
ANR	43794	Identifier	zend_error		43095	0					
ANR	43795	ArgumentList	error_type		43095	1					
ANR	43796	Argument	error_type		43095	0					
ANR	43797	Identifier	error_type		43095	0					
ANR	43798	Argument	"""Static function %s%s%s() cannot be abstract"""		43095	1					
ANR	43799	PrimaryExpression	"""Static function %s%s%s() cannot be abstract"""		43095	0					
ANR	43800	Argument	"scope ? ZSTR_VAL ( scope -> name ) : """""		43095	2					
ANR	43801	ConditionalExpression	"scope ? ZSTR_VAL ( scope -> name ) : """""		43095	0					
ANR	43802	Condition	scope		43095	0					
ANR	43803	Identifier	scope		43095	0					
ANR	43804	CallExpression	ZSTR_VAL ( scope -> name )		43095	1					
ANR	43805	Callee	ZSTR_VAL		43095	0					
ANR	43806	Identifier	ZSTR_VAL		43095	0					
ANR	43807	ArgumentList	scope -> name		43095	1					
ANR	43808	Argument	scope -> name		43095	0					
ANR	43809	PtrMemberAccess	scope -> name		43095	0					
ANR	43810	Identifier	scope		43095	0					
ANR	43811	Identifier	name		43095	1					
ANR	43812	PrimaryExpression	""""""		43095	2					
ANR	43813	Argument	"scope ? ""::"" : """""		43095	3					
ANR	43814	ConditionalExpression	"scope ? ""::"" : """""		43095	0					
ANR	43815	Condition	scope		43095	0					
ANR	43816	Identifier	scope		43095	0					
ANR	43817	PrimaryExpression	"""::"""		43095	1					
ANR	43818	PrimaryExpression	""""""		43095	2					
ANR	43819	Argument	ptr -> fname		43095	4					
ANR	43820	PtrMemberAccess	ptr -> fname		43095	0					
ANR	43821	Identifier	ptr		43095	0					
ANR	43822	Identifier	fname		43095	1					
ANR	43823	ElseStatement	else		43095	0					
ANR	43824	CompoundStatement		105:9:4371:4371	43095	0					
ANR	43825	IfStatement	if ( scope && ( scope -> ce_flags & ZEND_ACC_INTERFACE ) )		43095	0					
ANR	43826	Condition	scope && ( scope -> ce_flags & ZEND_ACC_INTERFACE )	2219:7:63104:63150	43095	0	True				
ANR	43827	AndExpression	scope && ( scope -> ce_flags & ZEND_ACC_INTERFACE )		43095	0		&&			
ANR	43828	Identifier	scope		43095	0					
ANR	43829	BitAndExpression	scope -> ce_flags & ZEND_ACC_INTERFACE		43095	1		&			
ANR	43830	PtrMemberAccess	scope -> ce_flags		43095	0					
ANR	43831	Identifier	scope		43095	0					
ANR	43832	Identifier	ce_flags		43095	1					
ANR	43833	Identifier	ZEND_ACC_INTERFACE		43095	1					
ANR	43834	CompoundStatement		106:56:4429:4429	43095	1					
ANR	43835	ExpressionStatement	efree ( ( char * ) lc_class_name )	2220:4:63159:63186	43095	0	True				
ANR	43836	CallExpression	efree ( ( char * ) lc_class_name )		43095	0					
ANR	43837	Callee	efree		43095	0					
ANR	43838	Identifier	efree		43095	0					
ANR	43839	ArgumentList	( char * ) lc_class_name		43095	1					
ANR	43840	Argument	( char * ) lc_class_name		43095	0					
ANR	43841	CastExpression	( char * ) lc_class_name		43095	0					
ANR	43842	CastTarget	char *		43095	0					
ANR	43843	Identifier	lc_class_name		43095	1					
ANR	43844	ExpressionStatement	"zend_error ( error_type , ""Interface %s cannot contain non abstract method %s()"" , ZSTR_VAL ( scope -> name ) , ptr -> fname )"	2221:4:63192:63305	43095	1	True				
ANR	43845	CallExpression	"zend_error ( error_type , ""Interface %s cannot contain non abstract method %s()"" , ZSTR_VAL ( scope -> name ) , ptr -> fname )"		43095	0					
ANR	43846	Callee	zend_error		43095	0					
ANR	43847	Identifier	zend_error		43095	0					
ANR	43848	ArgumentList	error_type		43095	1					
ANR	43849	Argument	error_type		43095	0					
ANR	43850	Identifier	error_type		43095	0					
ANR	43851	Argument	"""Interface %s cannot contain non abstract method %s()"""		43095	1					
ANR	43852	PrimaryExpression	"""Interface %s cannot contain non abstract method %s()"""		43095	0					
ANR	43853	Argument	ZSTR_VAL ( scope -> name )		43095	2					
ANR	43854	CallExpression	ZSTR_VAL ( scope -> name )		43095	0					
ANR	43855	Callee	ZSTR_VAL		43095	0					
ANR	43856	Identifier	ZSTR_VAL		43095	0					
ANR	43857	ArgumentList	scope -> name		43095	1					
ANR	43858	Argument	scope -> name		43095	0					
ANR	43859	PtrMemberAccess	scope -> name		43095	0					
ANR	43860	Identifier	scope		43095	0					
ANR	43861	Identifier	name		43095	1					
ANR	43862	Argument	ptr -> fname		43095	3					
ANR	43863	PtrMemberAccess	ptr -> fname		43095	0					
ANR	43864	Identifier	ptr		43095	0					
ANR	43865	Identifier	fname		43095	1					
ANR	43866	ReturnStatement	return FAILURE ;	2222:4:63311:63325	43095	2	True				
ANR	43867	Identifier	FAILURE		43095	0					
ANR	43868	IfStatement	if ( ! internal_function -> handler )		43095	1					
ANR	43869	Condition	! internal_function -> handler	2224:7:63339:63365	43095	0	True				
ANR	43870	UnaryOperationExpression	! internal_function -> handler		43095	0					
ANR	43871	UnaryOperator	!		43095	0					
ANR	43872	PtrMemberAccess	internal_function -> handler		43095	1					
ANR	43873	Identifier	internal_function		43095	0					
ANR	43874	Identifier	handler		43095	1					
ANR	43875	CompoundStatement		111:36:4644:4644	43095	1					
ANR	43876	IfStatement	if ( scope )		43095	0					
ANR	43877	Condition	scope	2225:8:63378:63382	43095	0	True				
ANR	43878	Identifier	scope		43095	0					
ANR	43879	CompoundStatement		112:15:4661:4661	43095	1					
ANR	43880	ExpressionStatement	efree ( ( char * ) lc_class_name )	2226:5:63392:63419	43095	0	True				
ANR	43881	CallExpression	efree ( ( char * ) lc_class_name )		43095	0					
ANR	43882	Callee	efree		43095	0					
ANR	43883	Identifier	efree		43095	0					
ANR	43884	ArgumentList	( char * ) lc_class_name		43095	1					
ANR	43885	Argument	( char * ) lc_class_name		43095	0					
ANR	43886	CastExpression	( char * ) lc_class_name		43095	0					
ANR	43887	CastTarget	char *		43095	0					
ANR	43888	Identifier	lc_class_name		43095	1					
ANR	43889	ExpressionStatement	"zend_error ( error_type , ""Method %s%s%s() cannot be a NULL function"" , scope ? ZSTR_VAL ( scope -> name ) : """" , scope ? ""::"" : """" , ptr -> fname )"	2228:4:63431:63565	43095	1	True				
ANR	43890	CallExpression	"zend_error ( error_type , ""Method %s%s%s() cannot be a NULL function"" , scope ? ZSTR_VAL ( scope -> name ) : """" , scope ? ""::"" : """" , ptr -> fname )"		43095	0					
ANR	43891	Callee	zend_error		43095	0					
ANR	43892	Identifier	zend_error		43095	0					
ANR	43893	ArgumentList	error_type		43095	1					
ANR	43894	Argument	error_type		43095	0					
ANR	43895	Identifier	error_type		43095	0					
ANR	43896	Argument	"""Method %s%s%s() cannot be a NULL function"""		43095	1					
ANR	43897	PrimaryExpression	"""Method %s%s%s() cannot be a NULL function"""		43095	0					
ANR	43898	Argument	"scope ? ZSTR_VAL ( scope -> name ) : """""		43095	2					
ANR	43899	ConditionalExpression	"scope ? ZSTR_VAL ( scope -> name ) : """""		43095	0					
ANR	43900	Condition	scope		43095	0					
ANR	43901	Identifier	scope		43095	0					
ANR	43902	CallExpression	ZSTR_VAL ( scope -> name )		43095	1					
ANR	43903	Callee	ZSTR_VAL		43095	0					
ANR	43904	Identifier	ZSTR_VAL		43095	0					
ANR	43905	ArgumentList	scope -> name		43095	1					
ANR	43906	Argument	scope -> name		43095	0					
ANR	43907	PtrMemberAccess	scope -> name		43095	0					
ANR	43908	Identifier	scope		43095	0					
ANR	43909	Identifier	name		43095	1					
ANR	43910	PrimaryExpression	""""""		43095	2					
ANR	43911	Argument	"scope ? ""::"" : """""		43095	3					
ANR	43912	ConditionalExpression	"scope ? ""::"" : """""		43095	0					
ANR	43913	Condition	scope		43095	0					
ANR	43914	Identifier	scope		43095	0					
ANR	43915	PrimaryExpression	"""::"""		43095	1					
ANR	43916	PrimaryExpression	""""""		43095	2					
ANR	43917	Argument	ptr -> fname		43095	4					
ANR	43918	PtrMemberAccess	ptr -> fname		43095	0					
ANR	43919	Identifier	ptr		43095	0					
ANR	43920	Identifier	fname		43095	1					
ANR	43921	ExpressionStatement	"zend_unregister_functions ( functions , count , target_function_table )"	2229:4:63571:63637	43095	2	True				
ANR	43922	CallExpression	"zend_unregister_functions ( functions , count , target_function_table )"		43095	0					
ANR	43923	Callee	zend_unregister_functions		43095	0					
ANR	43924	Identifier	zend_unregister_functions		43095	0					
ANR	43925	ArgumentList	functions		43095	1					
ANR	43926	Argument	functions		43095	0					
ANR	43927	Identifier	functions		43095	0					
ANR	43928	Argument	count		43095	1					
ANR	43929	Identifier	count		43095	0					
ANR	43930	Argument	target_function_table		43095	2					
ANR	43931	Identifier	target_function_table		43095	0					
ANR	43932	ReturnStatement	return FAILURE ;	2230:4:63643:63657	43095	3	True				
ANR	43933	Identifier	FAILURE		43095	0					
ANR	43934	ExpressionStatement	"lowercase_name = zend_string_alloc ( fname_len , 1 )"	2233:2:63670:63718	43095	9	True				
ANR	43935	AssignmentExpression	"lowercase_name = zend_string_alloc ( fname_len , 1 )"		43095	0		=			
ANR	43936	Identifier	lowercase_name		43095	0					
ANR	43937	CallExpression	"zend_string_alloc ( fname_len , 1 )"		43095	1					
ANR	43938	Callee	zend_string_alloc		43095	0					
ANR	43939	Identifier	zend_string_alloc		43095	0					
ANR	43940	ArgumentList	fname_len		43095	1					
ANR	43941	Argument	fname_len		43095	0					
ANR	43942	Identifier	fname_len		43095	0					
ANR	43943	Argument	1		43095	1					
ANR	43944	PrimaryExpression	1		43095	0					
ANR	43945	ExpressionStatement	"zend_str_tolower_copy ( ZSTR_VAL ( lowercase_name ) , ptr -> fname , fname_len )"	2234:2:63722:63792	43095	10	True				
ANR	43946	CallExpression	"zend_str_tolower_copy ( ZSTR_VAL ( lowercase_name ) , ptr -> fname , fname_len )"		43095	0					
ANR	43947	Callee	zend_str_tolower_copy		43095	0					
ANR	43948	Identifier	zend_str_tolower_copy		43095	0					
ANR	43949	ArgumentList	ZSTR_VAL ( lowercase_name )		43095	1					
ANR	43950	Argument	ZSTR_VAL ( lowercase_name )		43095	0					
ANR	43951	CallExpression	ZSTR_VAL ( lowercase_name )		43095	0					
ANR	43952	Callee	ZSTR_VAL		43095	0					
ANR	43953	Identifier	ZSTR_VAL		43095	0					
ANR	43954	ArgumentList	lowercase_name		43095	1					
ANR	43955	Argument	lowercase_name		43095	0					
ANR	43956	Identifier	lowercase_name		43095	0					
ANR	43957	Argument	ptr -> fname		43095	1					
ANR	43958	PtrMemberAccess	ptr -> fname		43095	0					
ANR	43959	Identifier	ptr		43095	0					
ANR	43960	Identifier	fname		43095	1					
ANR	43961	Argument	fname_len		43095	2					
ANR	43962	Identifier	fname_len		43095	0					
ANR	43963	ExpressionStatement	lowercase_name = zend_new_interned_string ( lowercase_name )	2235:2:63796:63853	43095	11	True				
ANR	43964	AssignmentExpression	lowercase_name = zend_new_interned_string ( lowercase_name )		43095	0		=			
ANR	43965	Identifier	lowercase_name		43095	0					
ANR	43966	CallExpression	zend_new_interned_string ( lowercase_name )		43095	1					
ANR	43967	Callee	zend_new_interned_string		43095	0					
ANR	43968	Identifier	zend_new_interned_string		43095	0					
ANR	43969	ArgumentList	lowercase_name		43095	1					
ANR	43970	Argument	lowercase_name		43095	0					
ANR	43971	Identifier	lowercase_name		43095	0					
ANR	43972	ExpressionStatement	reg_function = malloc ( sizeof ( zend_internal_function ) )	2236:2:63857:63910	43095	12	True				
ANR	43973	AssignmentExpression	reg_function = malloc ( sizeof ( zend_internal_function ) )		43095	0		=			
ANR	43974	Identifier	reg_function		43095	0					
ANR	43975	CallExpression	malloc ( sizeof ( zend_internal_function ) )		43095	1					
ANR	43976	Callee	malloc		43095	0					
ANR	43977	Identifier	malloc		43095	0					
ANR	43978	ArgumentList	sizeof ( zend_internal_function )		43095	1					
ANR	43979	Argument	sizeof ( zend_internal_function )		43095	0					
ANR	43980	SizeofExpression	sizeof ( zend_internal_function )		43095	0					
ANR	43981	Sizeof	sizeof		43095	0					
ANR	43982	SizeofOperand	zend_internal_function		43095	1					
ANR	43983	ExpressionStatement	"memcpy ( reg_function , & function , sizeof ( zend_internal_function ) )"	2237:2:63914:63977	43095	13	True				
ANR	43984	CallExpression	"memcpy ( reg_function , & function , sizeof ( zend_internal_function ) )"		43095	0					
ANR	43985	Callee	memcpy		43095	0					
ANR	43986	Identifier	memcpy		43095	0					
ANR	43987	ArgumentList	reg_function		43095	1					
ANR	43988	Argument	reg_function		43095	0					
ANR	43989	Identifier	reg_function		43095	0					
ANR	43990	Argument	& function		43095	1					
ANR	43991	UnaryOperationExpression	& function		43095	0					
ANR	43992	UnaryOperator	&		43095	0					
ANR	43993	Identifier	function		43095	1					
ANR	43994	Argument	sizeof ( zend_internal_function )		43095	2					
ANR	43995	SizeofExpression	sizeof ( zend_internal_function )		43095	0					
ANR	43996	Sizeof	sizeof		43095	0					
ANR	43997	SizeofOperand	zend_internal_function		43095	1					
ANR	43998	IfStatement	"if ( zend_hash_add_ptr ( target_function_table , lowercase_name , reg_function ) == NULL )"		43095	14					
ANR	43999	Condition	"zend_hash_add_ptr ( target_function_table , lowercase_name , reg_function ) == NULL"	2238:6:63985:64062	43095	0	True				
ANR	44000	EqualityExpression	"zend_hash_add_ptr ( target_function_table , lowercase_name , reg_function ) == NULL"		43095	0		==			
ANR	44001	CallExpression	"zend_hash_add_ptr ( target_function_table , lowercase_name , reg_function )"		43095	0					
ANR	44002	Callee	zend_hash_add_ptr		43095	0					
ANR	44003	Identifier	zend_hash_add_ptr		43095	0					
ANR	44004	ArgumentList	target_function_table		43095	1					
ANR	44005	Argument	target_function_table		43095	0					
ANR	44006	Identifier	target_function_table		43095	0					
ANR	44007	Argument	lowercase_name		43095	1					
ANR	44008	Identifier	lowercase_name		43095	0					
ANR	44009	Argument	reg_function		43095	2					
ANR	44010	Identifier	reg_function		43095	0					
ANR	44011	Identifier	NULL		43095	1					
ANR	44012	CompoundStatement		125:86:5341:5341	43095	1					
ANR	44013	ExpressionStatement	unload = 1	2239:3:64070:64078	43095	0	True				
ANR	44014	AssignmentExpression	unload = 1		43095	0		=			
ANR	44015	Identifier	unload		43095	0					
ANR	44016	PrimaryExpression	1		43095	1					
ANR	44017	ExpressionStatement	free ( reg_function )	2240:3:64083:64101	43095	1	True				
ANR	44018	CallExpression	free ( reg_function )		43095	0					
ANR	44019	Callee	free		43095	0					
ANR	44020	Identifier	free		43095	0					
ANR	44021	ArgumentList	reg_function		43095	1					
ANR	44022	Argument	reg_function		43095	0					
ANR	44023	Identifier	reg_function		43095	0					
ANR	44024	ExpressionStatement	zend_string_release ( lowercase_name )	2241:3:64106:64141	43095	2	True				
ANR	44025	CallExpression	zend_string_release ( lowercase_name )		43095	0					
ANR	44026	Callee	zend_string_release		43095	0					
ANR	44027	Identifier	zend_string_release		43095	0					
ANR	44028	ArgumentList	lowercase_name		43095	1					
ANR	44029	Argument	lowercase_name		43095	0					
ANR	44030	Identifier	lowercase_name		43095	0					
ANR	44031	BreakStatement	break ;	2242:3:64146:64151	43095	3	True				
ANR	44032	IfStatement	if ( reg_function -> common . arg_info && reg_function -> common . num_args )		43095	15					
ANR	44033	Condition	reg_function -> common . arg_info && reg_function -> common . num_args	2246:6:64213:64274	43095	0	True				
ANR	44034	AndExpression	reg_function -> common . arg_info && reg_function -> common . num_args		43095	0		&&			
ANR	44035	MemberAccess	reg_function -> common . arg_info		43095	0					
ANR	44036	PtrMemberAccess	reg_function -> common		43095	0					
ANR	44037	Identifier	reg_function		43095	0					
ANR	44038	Identifier	common		43095	1					
ANR	44039	Identifier	arg_info		43095	1					
ANR	44040	MemberAccess	reg_function -> common . num_args		43095	1					
ANR	44041	PtrMemberAccess	reg_function -> common		43095	0					
ANR	44042	Identifier	reg_function		43095	0					
ANR	44043	Identifier	common		43095	1					
ANR	44044	Identifier	num_args		43095	1					
ANR	44045	CompoundStatement		134:3:5558:5568	43095	1					
ANR	44046	IdentifierDeclStatement	uint32_t i ;	2247:3:64282:64292	43095	0	True				
ANR	44047	IdentifierDecl	i		43095	0					
ANR	44048	IdentifierDeclType	uint32_t		43095	0					
ANR	44049	Identifier	i		43095	1					
ANR	44050	ForStatement	for ( i = 0 ; i < reg_function -> common . num_args ; i ++ )		43095	1					
ANR	44051	ForInit	i = 0 ;	2248:8:64302:64307	43095	0	True				
ANR	44052	AssignmentExpression	i = 0		43095	0		=			
ANR	44053	Identifier	i		43095	0					
ANR	44054	PrimaryExpression	0		43095	1					
ANR	44055	Condition	i < reg_function -> common . num_args	2248:15:64309:64341	43095	1	True				
ANR	44056	RelationalExpression	i < reg_function -> common . num_args		43095	0		<			
ANR	44057	Identifier	i		43095	0					
ANR	44058	MemberAccess	reg_function -> common . num_args		43095	1					
ANR	44059	PtrMemberAccess	reg_function -> common		43095	0					
ANR	44060	Identifier	reg_function		43095	0					
ANR	44061	Identifier	common		43095	1					
ANR	44062	Identifier	num_args		43095	1					
ANR	44063	PostIncDecOperationExpression	i ++	2248:50:64344:64346	43095	2	True				
ANR	44064	Identifier	i		43095	0					
ANR	44065	IncDec	++		43095	1					
ANR	44066	CompoundStatement		135:55:5625:5625	43095	3					
ANR	44067	IfStatement	if ( reg_function -> common . arg_info [ i ] . class_name || reg_function -> common . arg_info [ i ] . type_hint )		43095	0					
ANR	44068	Condition	reg_function -> common . arg_info [ i ] . class_name || reg_function -> common . arg_info [ i ] . type_hint	2249:8:64359:64455	43095	0	True				
ANR	44069	OrExpression	reg_function -> common . arg_info [ i ] . class_name || reg_function -> common . arg_info [ i ] . type_hint		43095	0		||			
ANR	44070	MemberAccess	reg_function -> common . arg_info [ i ] . class_name		43095	0					
ANR	44071	ArrayIndexing	reg_function -> common . arg_info [ i ]		43095	0					
ANR	44072	MemberAccess	reg_function -> common . arg_info		43095	0					
ANR	44073	PtrMemberAccess	reg_function -> common		43095	0					
ANR	44074	Identifier	reg_function		43095	0					
ANR	44075	Identifier	common		43095	1					
ANR	44076	Identifier	arg_info		43095	1					
ANR	44077	Identifier	i		43095	1					
ANR	44078	Identifier	class_name		43095	1					
ANR	44079	MemberAccess	reg_function -> common . arg_info [ i ] . type_hint		43095	1					
ANR	44080	ArrayIndexing	reg_function -> common . arg_info [ i ]		43095	0					
ANR	44081	MemberAccess	reg_function -> common . arg_info		43095	0					
ANR	44082	PtrMemberAccess	reg_function -> common		43095	0					
ANR	44083	Identifier	reg_function		43095	0					
ANR	44084	Identifier	common		43095	1					
ANR	44085	Identifier	arg_info		43095	1					
ANR	44086	Identifier	i		43095	1					
ANR	44087	Identifier	type_hint		43095	1					
ANR	44088	CompoundStatement		137:52:5734:5734	43095	1					
ANR	44089	ExpressionStatement	reg_function -> common . fn_flags |= ZEND_ACC_HAS_TYPE_HINTS	2251:8:64468:64524	43095	0	True				
ANR	44090	AssignmentExpression	reg_function -> common . fn_flags |= ZEND_ACC_HAS_TYPE_HINTS		43095	0		|=			
ANR	44091	MemberAccess	reg_function -> common . fn_flags		43095	0					
ANR	44092	PtrMemberAccess	reg_function -> common		43095	0					
ANR	44093	Identifier	reg_function		43095	0					
ANR	44094	Identifier	common		43095	1					
ANR	44095	Identifier	fn_flags		43095	1					
ANR	44096	Identifier	ZEND_ACC_HAS_TYPE_HINTS		43095	1					
ANR	44097	BreakStatement	break ;	2252:5:64531:64536	43095	1	True				
ANR	44098	IfStatement	if ( scope )		43095	16					
ANR	44099	Condition	scope	2257:6:64560:64564	43095	0	True				
ANR	44100	Identifier	scope		43095	0					
ANR	44101	CompoundStatement		144:13:5843:5843	43095	1					
ANR	44102	IfStatement	"if ( ( fname_len == class_name_len ) && ! ctor && ! memcmp ( ZSTR_VAL ( lowercase_name ) , lc_class_name , class_name_len + 1 ) )"		43095	0					
ANR	44103	Condition	"( fname_len == class_name_len ) && ! ctor && ! memcmp ( ZSTR_VAL ( lowercase_name ) , lc_class_name , class_name_len + 1 )"	2262:7:64716:64823	43095	0	True				
ANR	44104	AndExpression	"( fname_len == class_name_len ) && ! ctor && ! memcmp ( ZSTR_VAL ( lowercase_name ) , lc_class_name , class_name_len + 1 )"		43095	0		&&			
ANR	44105	EqualityExpression	fname_len == class_name_len		43095	0		==			
ANR	44106	Identifier	fname_len		43095	0					
ANR	44107	Identifier	class_name_len		43095	1					
ANR	44108	AndExpression	"! ctor && ! memcmp ( ZSTR_VAL ( lowercase_name ) , lc_class_name , class_name_len + 1 )"		43095	1		&&			
ANR	44109	UnaryOperationExpression	! ctor		43095	0					
ANR	44110	UnaryOperator	!		43095	0					
ANR	44111	Identifier	ctor		43095	1					
ANR	44112	UnaryOperationExpression	"! memcmp ( ZSTR_VAL ( lowercase_name ) , lc_class_name , class_name_len + 1 )"		43095	1					
ANR	44113	UnaryOperator	!		43095	0					
ANR	44114	CallExpression	"memcmp ( ZSTR_VAL ( lowercase_name ) , lc_class_name , class_name_len + 1 )"		43095	1					
ANR	44115	Callee	memcmp		43095	0					
ANR	44116	Identifier	memcmp		43095	0					
ANR	44117	ArgumentList	ZSTR_VAL ( lowercase_name )		43095	1					
ANR	44118	Argument	ZSTR_VAL ( lowercase_name )		43095	0					
ANR	44119	CallExpression	ZSTR_VAL ( lowercase_name )		43095	0					
ANR	44120	Callee	ZSTR_VAL		43095	0					
ANR	44121	Identifier	ZSTR_VAL		43095	0					
ANR	44122	ArgumentList	lowercase_name		43095	1					
ANR	44123	Argument	lowercase_name		43095	0					
ANR	44124	Identifier	lowercase_name		43095	0					
ANR	44125	Argument	lc_class_name		43095	1					
ANR	44126	Identifier	lc_class_name		43095	0					
ANR	44127	Argument	class_name_len + 1		43095	2					
ANR	44128	AdditiveExpression	class_name_len + 1		43095	0		+			
ANR	44129	Identifier	class_name_len		43095	0					
ANR	44130	PrimaryExpression	1		43095	1					
ANR	44131	CompoundStatement		149:117:6102:6102	43095	1					
ANR	44132	ExpressionStatement	ctor = reg_function	2263:4:64832:64851	43095	0	True				
ANR	44133	AssignmentExpression	ctor = reg_function		43095	0		=			
ANR	44134	Identifier	ctor		43095	0					
ANR	44135	Identifier	reg_function		43095	1					
ANR	44136	ElseStatement	else		43095	0					
ANR	44137	IfStatement	"if ( zend_string_equals_literal ( lowercase_name , ZEND_CONSTRUCTOR_FUNC_NAME ) )"		43095	0					
ANR	44138	Condition	"zend_string_equals_literal ( lowercase_name , ZEND_CONSTRUCTOR_FUNC_NAME )"	2264:14:64867:64936	43095	0	True				
ANR	44139	CallExpression	"zend_string_equals_literal ( lowercase_name , ZEND_CONSTRUCTOR_FUNC_NAME )"		43095	0					
ANR	44140	Callee	zend_string_equals_literal		43095	0					
ANR	44141	Identifier	zend_string_equals_literal		43095	0					
ANR	44142	ArgumentList	lowercase_name		43095	1					
ANR	44143	Argument	lowercase_name		43095	0					
ANR	44144	Identifier	lowercase_name		43095	0					
ANR	44145	Argument	ZEND_CONSTRUCTOR_FUNC_NAME		43095	1					
ANR	44146	Identifier	ZEND_CONSTRUCTOR_FUNC_NAME		43095	0					
ANR	44147	CompoundStatement		151:86:6215:6215	43095	1					
ANR	44148	ExpressionStatement	ctor = reg_function	2265:4:64945:64964	43095	0	True				
ANR	44149	AssignmentExpression	ctor = reg_function		43095	0		=			
ANR	44150	Identifier	ctor		43095	0					
ANR	44151	Identifier	reg_function		43095	1					
ANR	44152	ElseStatement	else		43095	0					
ANR	44153	IfStatement	"if ( zend_string_equals_literal ( lowercase_name , ZEND_DESTRUCTOR_FUNC_NAME ) )"		43095	0					
ANR	44154	Condition	"zend_string_equals_literal ( lowercase_name , ZEND_DESTRUCTOR_FUNC_NAME )"	2266:14:64980:65048	43095	0	True				
ANR	44155	CallExpression	"zend_string_equals_literal ( lowercase_name , ZEND_DESTRUCTOR_FUNC_NAME )"		43095	0					
ANR	44156	Callee	zend_string_equals_literal		43095	0					
ANR	44157	Identifier	zend_string_equals_literal		43095	0					
ANR	44158	ArgumentList	lowercase_name		43095	1					
ANR	44159	Argument	lowercase_name		43095	0					
ANR	44160	Identifier	lowercase_name		43095	0					
ANR	44161	Argument	ZEND_DESTRUCTOR_FUNC_NAME		43095	1					
ANR	44162	Identifier	ZEND_DESTRUCTOR_FUNC_NAME		43095	0					
ANR	44163	CompoundStatement		153:85:6327:6327	43095	1					
ANR	44164	ExpressionStatement	dtor = reg_function	2267:4:65057:65076	43095	0	True				
ANR	44165	AssignmentExpression	dtor = reg_function		43095	0		=			
ANR	44166	Identifier	dtor		43095	0					
ANR	44167	Identifier	reg_function		43095	1					
ANR	44168	IfStatement	if ( internal_function -> num_args )		43095	1					
ANR	44169	Condition	internal_function -> num_args	2268:8:65086:65112	43095	0	True				
ANR	44170	PtrMemberAccess	internal_function -> num_args		43095	0					
ANR	44171	Identifier	internal_function		43095	0					
ANR	44172	Identifier	num_args		43095	1					
ANR	44173	CompoundStatement		155:37:6391:6391	43095	1					
ANR	44174	ExpressionStatement	"zend_error ( error_type , ""Destructor %s::%s() cannot take arguments"" , ZSTR_VAL ( scope -> name ) , ptr -> fname )"	2269:5:65122:65224	43095	0	True				
ANR	44175	CallExpression	"zend_error ( error_type , ""Destructor %s::%s() cannot take arguments"" , ZSTR_VAL ( scope -> name ) , ptr -> fname )"		43095	0					
ANR	44176	Callee	zend_error		43095	0					
ANR	44177	Identifier	zend_error		43095	0					
ANR	44178	ArgumentList	error_type		43095	1					
ANR	44179	Argument	error_type		43095	0					
ANR	44180	Identifier	error_type		43095	0					
ANR	44181	Argument	"""Destructor %s::%s() cannot take arguments"""		43095	1					
ANR	44182	PrimaryExpression	"""Destructor %s::%s() cannot take arguments"""		43095	0					
ANR	44183	Argument	ZSTR_VAL ( scope -> name )		43095	2					
ANR	44184	CallExpression	ZSTR_VAL ( scope -> name )		43095	0					
ANR	44185	Callee	ZSTR_VAL		43095	0					
ANR	44186	Identifier	ZSTR_VAL		43095	0					
ANR	44187	ArgumentList	scope -> name		43095	1					
ANR	44188	Argument	scope -> name		43095	0					
ANR	44189	PtrMemberAccess	scope -> name		43095	0					
ANR	44190	Identifier	scope		43095	0					
ANR	44191	Identifier	name		43095	1					
ANR	44192	Argument	ptr -> fname		43095	3					
ANR	44193	PtrMemberAccess	ptr -> fname		43095	0					
ANR	44194	Identifier	ptr		43095	0					
ANR	44195	Identifier	fname		43095	1					
ANR	44196	ElseStatement	else		43095	0					
ANR	44197	IfStatement	"if ( zend_string_equals_literal ( lowercase_name , ZEND_CLONE_FUNC_NAME ) )"		43095	0					
ANR	44198	Condition	"zend_string_equals_literal ( lowercase_name , ZEND_CLONE_FUNC_NAME )"	2271:14:65246:65309	43095	0	True				
ANR	44199	CallExpression	"zend_string_equals_literal ( lowercase_name , ZEND_CLONE_FUNC_NAME )"		43095	0					
ANR	44200	Callee	zend_string_equals_literal		43095	0					
ANR	44201	Identifier	zend_string_equals_literal		43095	0					
ANR	44202	ArgumentList	lowercase_name		43095	1					
ANR	44203	Argument	lowercase_name		43095	0					
ANR	44204	Identifier	lowercase_name		43095	0					
ANR	44205	Argument	ZEND_CLONE_FUNC_NAME		43095	1					
ANR	44206	Identifier	ZEND_CLONE_FUNC_NAME		43095	0					
ANR	44207	CompoundStatement		158:80:6588:6588	43095	1					
ANR	44208	ExpressionStatement	clone = reg_function	2272:4:65318:65338	43095	0	True				
ANR	44209	AssignmentExpression	clone = reg_function		43095	0		=			
ANR	44210	Identifier	clone		43095	0					
ANR	44211	Identifier	reg_function		43095	1					
ANR	44212	ElseStatement	else		43095	0					
ANR	44213	IfStatement	"if ( zend_string_equals_literal ( lowercase_name , ZEND_CALL_FUNC_NAME ) )"		43095	0					
ANR	44214	Condition	"zend_string_equals_literal ( lowercase_name , ZEND_CALL_FUNC_NAME )"	2273:14:65354:65416	43095	0	True				
ANR	44215	CallExpression	"zend_string_equals_literal ( lowercase_name , ZEND_CALL_FUNC_NAME )"		43095	0					
ANR	44216	Callee	zend_string_equals_literal		43095	0					
ANR	44217	Identifier	zend_string_equals_literal		43095	0					
ANR	44218	ArgumentList	lowercase_name		43095	1					
ANR	44219	Argument	lowercase_name		43095	0					
ANR	44220	Identifier	lowercase_name		43095	0					
ANR	44221	Argument	ZEND_CALL_FUNC_NAME		43095	1					
ANR	44222	Identifier	ZEND_CALL_FUNC_NAME		43095	0					
ANR	44223	CompoundStatement		160:79:6695:6695	43095	1					
ANR	44224	ExpressionStatement	__call = reg_function	2274:4:65425:65446	43095	0	True				
ANR	44225	AssignmentExpression	__call = reg_function		43095	0		=			
ANR	44226	Identifier	__call		43095	0					
ANR	44227	Identifier	reg_function		43095	1					
ANR	44228	ElseStatement	else		43095	0					
ANR	44229	IfStatement	"if ( zend_string_equals_literal ( lowercase_name , ZEND_CALLSTATIC_FUNC_NAME ) )"		43095	0					
ANR	44230	Condition	"zend_string_equals_literal ( lowercase_name , ZEND_CALLSTATIC_FUNC_NAME )"	2275:14:65462:65530	43095	0	True				
ANR	44231	CallExpression	"zend_string_equals_literal ( lowercase_name , ZEND_CALLSTATIC_FUNC_NAME )"		43095	0					
ANR	44232	Callee	zend_string_equals_literal		43095	0					
ANR	44233	Identifier	zend_string_equals_literal		43095	0					
ANR	44234	ArgumentList	lowercase_name		43095	1					
ANR	44235	Argument	lowercase_name		43095	0					
ANR	44236	Identifier	lowercase_name		43095	0					
ANR	44237	Argument	ZEND_CALLSTATIC_FUNC_NAME		43095	1					
ANR	44238	Identifier	ZEND_CALLSTATIC_FUNC_NAME		43095	0					
ANR	44239	CompoundStatement		162:85:6809:6809	43095	1					
ANR	44240	ExpressionStatement	__callstatic = reg_function	2276:4:65539:65566	43095	0	True				
ANR	44241	AssignmentExpression	__callstatic = reg_function		43095	0		=			
ANR	44242	Identifier	__callstatic		43095	0					
ANR	44243	Identifier	reg_function		43095	1					
ANR	44244	ElseStatement	else		43095	0					
ANR	44245	IfStatement	"if ( zend_string_equals_literal ( lowercase_name , ZEND_TOSTRING_FUNC_NAME ) )"		43095	0					
ANR	44246	Condition	"zend_string_equals_literal ( lowercase_name , ZEND_TOSTRING_FUNC_NAME )"	2277:14:65582:65648	43095	0	True				
ANR	44247	CallExpression	"zend_string_equals_literal ( lowercase_name , ZEND_TOSTRING_FUNC_NAME )"		43095	0					
ANR	44248	Callee	zend_string_equals_literal		43095	0					
ANR	44249	Identifier	zend_string_equals_literal		43095	0					
ANR	44250	ArgumentList	lowercase_name		43095	1					
ANR	44251	Argument	lowercase_name		43095	0					
ANR	44252	Identifier	lowercase_name		43095	0					
ANR	44253	Argument	ZEND_TOSTRING_FUNC_NAME		43095	1					
ANR	44254	Identifier	ZEND_TOSTRING_FUNC_NAME		43095	0					
ANR	44255	CompoundStatement		164:83:6927:6927	43095	1					
ANR	44256	ExpressionStatement	__tostring = reg_function	2278:4:65657:65682	43095	0	True				
ANR	44257	AssignmentExpression	__tostring = reg_function		43095	0		=			
ANR	44258	Identifier	__tostring		43095	0					
ANR	44259	Identifier	reg_function		43095	1					
ANR	44260	ElseStatement	else		43095	0					
ANR	44261	IfStatement	"if ( zend_string_equals_literal ( lowercase_name , ZEND_GET_FUNC_NAME ) )"		43095	0					
ANR	44262	Condition	"zend_string_equals_literal ( lowercase_name , ZEND_GET_FUNC_NAME )"	2279:14:65698:65759	43095	0	True				
ANR	44263	CallExpression	"zend_string_equals_literal ( lowercase_name , ZEND_GET_FUNC_NAME )"		43095	0					
ANR	44264	Callee	zend_string_equals_literal		43095	0					
ANR	44265	Identifier	zend_string_equals_literal		43095	0					
ANR	44266	ArgumentList	lowercase_name		43095	1					
ANR	44267	Argument	lowercase_name		43095	0					
ANR	44268	Identifier	lowercase_name		43095	0					
ANR	44269	Argument	ZEND_GET_FUNC_NAME		43095	1					
ANR	44270	Identifier	ZEND_GET_FUNC_NAME		43095	0					
ANR	44271	CompoundStatement		166:78:7038:7038	43095	1					
ANR	44272	ExpressionStatement	__get = reg_function	2280:4:65768:65788	43095	0	True				
ANR	44273	AssignmentExpression	__get = reg_function		43095	0		=			
ANR	44274	Identifier	__get		43095	0					
ANR	44275	Identifier	reg_function		43095	1					
ANR	44276	ExpressionStatement	scope -> ce_flags |= ZEND_ACC_USE_GUARDS	2281:4:65794:65832	43095	1	True				
ANR	44277	AssignmentExpression	scope -> ce_flags |= ZEND_ACC_USE_GUARDS		43095	0		|=			
ANR	44278	PtrMemberAccess	scope -> ce_flags		43095	0					
ANR	44279	Identifier	scope		43095	0					
ANR	44280	Identifier	ce_flags		43095	1					
ANR	44281	Identifier	ZEND_ACC_USE_GUARDS		43095	1					
ANR	44282	ElseStatement	else		43095	0					
ANR	44283	IfStatement	"if ( zend_string_equals_literal ( lowercase_name , ZEND_SET_FUNC_NAME ) )"		43095	0					
ANR	44284	Condition	"zend_string_equals_literal ( lowercase_name , ZEND_SET_FUNC_NAME )"	2282:14:65848:65909	43095	0	True				
ANR	44285	CallExpression	"zend_string_equals_literal ( lowercase_name , ZEND_SET_FUNC_NAME )"		43095	0					
ANR	44286	Callee	zend_string_equals_literal		43095	0					
ANR	44287	Identifier	zend_string_equals_literal		43095	0					
ANR	44288	ArgumentList	lowercase_name		43095	1					
ANR	44289	Argument	lowercase_name		43095	0					
ANR	44290	Identifier	lowercase_name		43095	0					
ANR	44291	Argument	ZEND_SET_FUNC_NAME		43095	1					
ANR	44292	Identifier	ZEND_SET_FUNC_NAME		43095	0					
ANR	44293	CompoundStatement		169:78:7188:7188	43095	1					
ANR	44294	ExpressionStatement	__set = reg_function	2283:4:65918:65938	43095	0	True				
ANR	44295	AssignmentExpression	__set = reg_function		43095	0		=			
ANR	44296	Identifier	__set		43095	0					
ANR	44297	Identifier	reg_function		43095	1					
ANR	44298	ExpressionStatement	scope -> ce_flags |= ZEND_ACC_USE_GUARDS	2284:4:65944:65982	43095	1	True				
ANR	44299	AssignmentExpression	scope -> ce_flags |= ZEND_ACC_USE_GUARDS		43095	0		|=			
ANR	44300	PtrMemberAccess	scope -> ce_flags		43095	0					
ANR	44301	Identifier	scope		43095	0					
ANR	44302	Identifier	ce_flags		43095	1					
ANR	44303	Identifier	ZEND_ACC_USE_GUARDS		43095	1					
ANR	44304	ElseStatement	else		43095	0					
ANR	44305	IfStatement	"if ( zend_string_equals_literal ( lowercase_name , ZEND_UNSET_FUNC_NAME ) )"		43095	0					
ANR	44306	Condition	"zend_string_equals_literal ( lowercase_name , ZEND_UNSET_FUNC_NAME )"	2285:14:65998:66061	43095	0	True				
ANR	44307	CallExpression	"zend_string_equals_literal ( lowercase_name , ZEND_UNSET_FUNC_NAME )"		43095	0					
ANR	44308	Callee	zend_string_equals_literal		43095	0					
ANR	44309	Identifier	zend_string_equals_literal		43095	0					
ANR	44310	ArgumentList	lowercase_name		43095	1					
ANR	44311	Argument	lowercase_name		43095	0					
ANR	44312	Identifier	lowercase_name		43095	0					
ANR	44313	Argument	ZEND_UNSET_FUNC_NAME		43095	1					
ANR	44314	Identifier	ZEND_UNSET_FUNC_NAME		43095	0					
ANR	44315	CompoundStatement		172:80:7340:7340	43095	1					
ANR	44316	ExpressionStatement	__unset = reg_function	2286:4:66070:66092	43095	0	True				
ANR	44317	AssignmentExpression	__unset = reg_function		43095	0		=			
ANR	44318	Identifier	__unset		43095	0					
ANR	44319	Identifier	reg_function		43095	1					
ANR	44320	ExpressionStatement	scope -> ce_flags |= ZEND_ACC_USE_GUARDS	2287:4:66098:66136	43095	1	True				
ANR	44321	AssignmentExpression	scope -> ce_flags |= ZEND_ACC_USE_GUARDS		43095	0		|=			
ANR	44322	PtrMemberAccess	scope -> ce_flags		43095	0					
ANR	44323	Identifier	scope		43095	0					
ANR	44324	Identifier	ce_flags		43095	1					
ANR	44325	Identifier	ZEND_ACC_USE_GUARDS		43095	1					
ANR	44326	ElseStatement	else		43095	0					
ANR	44327	IfStatement	"if ( zend_string_equals_literal ( lowercase_name , ZEND_ISSET_FUNC_NAME ) )"		43095	0					
ANR	44328	Condition	"zend_string_equals_literal ( lowercase_name , ZEND_ISSET_FUNC_NAME )"	2288:14:66152:66215	43095	0	True				
ANR	44329	CallExpression	"zend_string_equals_literal ( lowercase_name , ZEND_ISSET_FUNC_NAME )"		43095	0					
ANR	44330	Callee	zend_string_equals_literal		43095	0					
ANR	44331	Identifier	zend_string_equals_literal		43095	0					
ANR	44332	ArgumentList	lowercase_name		43095	1					
ANR	44333	Argument	lowercase_name		43095	0					
ANR	44334	Identifier	lowercase_name		43095	0					
ANR	44335	Argument	ZEND_ISSET_FUNC_NAME		43095	1					
ANR	44336	Identifier	ZEND_ISSET_FUNC_NAME		43095	0					
ANR	44337	CompoundStatement		175:80:7494:7494	43095	1					
ANR	44338	ExpressionStatement	__isset = reg_function	2289:4:66224:66246	43095	0	True				
ANR	44339	AssignmentExpression	__isset = reg_function		43095	0		=			
ANR	44340	Identifier	__isset		43095	0					
ANR	44341	Identifier	reg_function		43095	1					
ANR	44342	ExpressionStatement	scope -> ce_flags |= ZEND_ACC_USE_GUARDS	2290:4:66252:66290	43095	1	True				
ANR	44343	AssignmentExpression	scope -> ce_flags |= ZEND_ACC_USE_GUARDS		43095	0		|=			
ANR	44344	PtrMemberAccess	scope -> ce_flags		43095	0					
ANR	44345	Identifier	scope		43095	0					
ANR	44346	Identifier	ce_flags		43095	1					
ANR	44347	Identifier	ZEND_ACC_USE_GUARDS		43095	1					
ANR	44348	ElseStatement	else		43095	0					
ANR	44349	IfStatement	"if ( zend_string_equals_literal ( lowercase_name , ZEND_DEBUGINFO_FUNC_NAME ) )"		43095	0					
ANR	44350	Condition	"zend_string_equals_literal ( lowercase_name , ZEND_DEBUGINFO_FUNC_NAME )"	2291:14:66306:66373	43095	0	True				
ANR	44351	CallExpression	"zend_string_equals_literal ( lowercase_name , ZEND_DEBUGINFO_FUNC_NAME )"		43095	0					
ANR	44352	Callee	zend_string_equals_literal		43095	0					
ANR	44353	Identifier	zend_string_equals_literal		43095	0					
ANR	44354	ArgumentList	lowercase_name		43095	1					
ANR	44355	Argument	lowercase_name		43095	0					
ANR	44356	Identifier	lowercase_name		43095	0					
ANR	44357	Argument	ZEND_DEBUGINFO_FUNC_NAME		43095	1					
ANR	44358	Identifier	ZEND_DEBUGINFO_FUNC_NAME		43095	0					
ANR	44359	CompoundStatement		178:84:7652:7652	43095	1					
ANR	44360	ExpressionStatement	__debugInfo = reg_function	2292:4:66382:66408	43095	0	True				
ANR	44361	AssignmentExpression	__debugInfo = reg_function		43095	0		=			
ANR	44362	Identifier	__debugInfo		43095	0					
ANR	44363	Identifier	reg_function		43095	1					
ANR	44364	ElseStatement	else		43095	0					
ANR	44365	CompoundStatement		180:10:7696:7696	43095	0					
ANR	44366	ExpressionStatement	reg_function = NULL	2294:4:66426:66445	43095	0	True				
ANR	44367	AssignmentExpression	reg_function = NULL		43095	0		=			
ANR	44368	Identifier	reg_function		43095	0					
ANR	44369	Identifier	NULL		43095	1					
ANR	44370	IfStatement	if ( reg_function )		43095	1					
ANR	44371	Condition	reg_function	2296:7:66459:66470	43095	0	True				
ANR	44372	Identifier	reg_function		43095	0					
ANR	44373	CompoundStatement		183:21:7749:7749	43095	1					
ANR	44374	ExpressionStatement	"zend_check_magic_method_implementation ( scope , reg_function , error_type )"	2297:4:66479:66550	43095	0	True				
ANR	44375	CallExpression	"zend_check_magic_method_implementation ( scope , reg_function , error_type )"		43095	0					
ANR	44376	Callee	zend_check_magic_method_implementation		43095	0					
ANR	44377	Identifier	zend_check_magic_method_implementation		43095	0					
ANR	44378	ArgumentList	scope		43095	1					
ANR	44379	Argument	scope		43095	0					
ANR	44380	Identifier	scope		43095	0					
ANR	44381	Argument	reg_function		43095	1					
ANR	44382	Identifier	reg_function		43095	0					
ANR	44383	Argument	error_type		43095	2					
ANR	44384	Identifier	error_type		43095	0					
ANR	44385	ExpressionStatement	ptr ++	2300:2:66563:66568	43095	17	True				
ANR	44386	PostIncDecOperationExpression	ptr ++		43095	0					
ANR	44387	Identifier	ptr		43095	0					
ANR	44388	IncDec	++		43095	1					
ANR	44389	ExpressionStatement	count ++	2301:2:66572:66579	43095	18	True				
ANR	44390	PostIncDecOperationExpression	count ++		43095	0					
ANR	44391	Identifier	count		43095	0					
ANR	44392	IncDec	++		43095	1					
ANR	44393	ExpressionStatement	zend_string_release ( lowercase_name )	2302:2:66583:66618	43095	19	True				
ANR	44394	CallExpression	zend_string_release ( lowercase_name )		43095	0					
ANR	44395	Callee	zend_string_release		43095	0					
ANR	44396	Identifier	zend_string_release		43095	0					
ANR	44397	ArgumentList	lowercase_name		43095	1					
ANR	44398	Argument	lowercase_name		43095	0					
ANR	44399	Identifier	lowercase_name		43095	0					
ANR	44400	IfStatement	if ( unload )		43095	18					
ANR	44401	Condition	unload	2304:5:66628:66633	43095	0	True				
ANR	44402	Identifier	unload		43095	0					
ANR	44403	CompoundStatement		191:13:7912:7912	43095	1					
ANR	44404	IfStatement	if ( scope )		43095	0					
ANR	44405	Condition	scope	2305:6:66717:66721	43095	0	True				
ANR	44406	Identifier	scope		43095	0					
ANR	44407	CompoundStatement		192:13:8000:8000	43095	1					
ANR	44408	ExpressionStatement	efree ( ( char * ) lc_class_name )	2306:3:66729:66756	43095	0	True				
ANR	44409	CallExpression	efree ( ( char * ) lc_class_name )		43095	0					
ANR	44410	Callee	efree		43095	0					
ANR	44411	Identifier	efree		43095	0					
ANR	44412	ArgumentList	( char * ) lc_class_name		43095	1					
ANR	44413	Argument	( char * ) lc_class_name		43095	0					
ANR	44414	CastExpression	( char * ) lc_class_name		43095	0					
ANR	44415	CastTarget	char *		43095	0					
ANR	44416	Identifier	lc_class_name		43095	1					
ANR	44417	WhileStatement	while ( ptr -> fname )		43095	1					
ANR	44418	Condition	ptr -> fname	2308:9:66771:66780	43095	0	True				
ANR	44419	PtrMemberAccess	ptr -> fname		43095	0					
ANR	44420	Identifier	ptr		43095	0					
ANR	44421	Identifier	fname		43095	1					
ANR	44422	CompoundStatement		195:21:8059:8059	43095	1					
ANR	44423	ExpressionStatement	fname_len = strlen ( ptr -> fname )	2309:3:66788:66818	43095	0	True				
ANR	44424	AssignmentExpression	fname_len = strlen ( ptr -> fname )		43095	0		=			
ANR	44425	Identifier	fname_len		43095	0					
ANR	44426	CallExpression	strlen ( ptr -> fname )		43095	1					
ANR	44427	Callee	strlen		43095	0					
ANR	44428	Identifier	strlen		43095	0					
ANR	44429	ArgumentList	ptr -> fname		43095	1					
ANR	44430	Argument	ptr -> fname		43095	0					
ANR	44431	PtrMemberAccess	ptr -> fname		43095	0					
ANR	44432	Identifier	ptr		43095	0					
ANR	44433	Identifier	fname		43095	1					
ANR	44434	ExpressionStatement	"lowercase_name = zend_string_alloc ( fname_len , 0 )"	2310:3:66823:66871	43095	1	True				
ANR	44435	AssignmentExpression	"lowercase_name = zend_string_alloc ( fname_len , 0 )"		43095	0		=			
ANR	44436	Identifier	lowercase_name		43095	0					
ANR	44437	CallExpression	"zend_string_alloc ( fname_len , 0 )"		43095	1					
ANR	44438	Callee	zend_string_alloc		43095	0					
ANR	44439	Identifier	zend_string_alloc		43095	0					
ANR	44440	ArgumentList	fname_len		43095	1					
ANR	44441	Argument	fname_len		43095	0					
ANR	44442	Identifier	fname_len		43095	0					
ANR	44443	Argument	0		43095	1					
ANR	44444	PrimaryExpression	0		43095	0					
ANR	44445	ExpressionStatement	"zend_str_tolower_copy ( ZSTR_VAL ( lowercase_name ) , ptr -> fname , fname_len )"	2311:3:66876:66946	43095	2	True				
ANR	44446	CallExpression	"zend_str_tolower_copy ( ZSTR_VAL ( lowercase_name ) , ptr -> fname , fname_len )"		43095	0					
ANR	44447	Callee	zend_str_tolower_copy		43095	0					
ANR	44448	Identifier	zend_str_tolower_copy		43095	0					
ANR	44449	ArgumentList	ZSTR_VAL ( lowercase_name )		43095	1					
ANR	44450	Argument	ZSTR_VAL ( lowercase_name )		43095	0					
ANR	44451	CallExpression	ZSTR_VAL ( lowercase_name )		43095	0					
ANR	44452	Callee	ZSTR_VAL		43095	0					
ANR	44453	Identifier	ZSTR_VAL		43095	0					
ANR	44454	ArgumentList	lowercase_name		43095	1					
ANR	44455	Argument	lowercase_name		43095	0					
ANR	44456	Identifier	lowercase_name		43095	0					
ANR	44457	Argument	ptr -> fname		43095	1					
ANR	44458	PtrMemberAccess	ptr -> fname		43095	0					
ANR	44459	Identifier	ptr		43095	0					
ANR	44460	Identifier	fname		43095	1					
ANR	44461	Argument	fname_len		43095	2					
ANR	44462	Identifier	fname_len		43095	0					
ANR	44463	IfStatement	"if ( zend_hash_exists ( target_function_table , lowercase_name ) )"		43095	3					
ANR	44464	Condition	"zend_hash_exists ( target_function_table , lowercase_name )"	2312:7:66955:67009	43095	0	True				
ANR	44465	CallExpression	"zend_hash_exists ( target_function_table , lowercase_name )"		43095	0					
ANR	44466	Callee	zend_hash_exists		43095	0					
ANR	44467	Identifier	zend_hash_exists		43095	0					
ANR	44468	ArgumentList	target_function_table		43095	1					
ANR	44469	Argument	target_function_table		43095	0					
ANR	44470	Identifier	target_function_table		43095	0					
ANR	44471	Argument	lowercase_name		43095	1					
ANR	44472	Identifier	lowercase_name		43095	0					
ANR	44473	CompoundStatement		199:64:8288:8288	43095	1					
ANR	44474	ExpressionStatement	"zend_error ( error_type , ""Function registration failed - duplicate name - %s%s%s"" , scope ? ZSTR_VAL ( scope -> name ) : """" , scope ? ""::"" : """" , ptr -> fname )"	2313:4:67018:67165	43095	0	True				
ANR	44475	CallExpression	"zend_error ( error_type , ""Function registration failed - duplicate name - %s%s%s"" , scope ? ZSTR_VAL ( scope -> name ) : """" , scope ? ""::"" : """" , ptr -> fname )"		43095	0					
ANR	44476	Callee	zend_error		43095	0					
ANR	44477	Identifier	zend_error		43095	0					
ANR	44478	ArgumentList	error_type		43095	1					
ANR	44479	Argument	error_type		43095	0					
ANR	44480	Identifier	error_type		43095	0					
ANR	44481	Argument	"""Function registration failed - duplicate name - %s%s%s"""		43095	1					
ANR	44482	PrimaryExpression	"""Function registration failed - duplicate name - %s%s%s"""		43095	0					
ANR	44483	Argument	"scope ? ZSTR_VAL ( scope -> name ) : """""		43095	2					
ANR	44484	ConditionalExpression	"scope ? ZSTR_VAL ( scope -> name ) : """""		43095	0					
ANR	44485	Condition	scope		43095	0					
ANR	44486	Identifier	scope		43095	0					
ANR	44487	CallExpression	ZSTR_VAL ( scope -> name )		43095	1					
ANR	44488	Callee	ZSTR_VAL		43095	0					
ANR	44489	Identifier	ZSTR_VAL		43095	0					
ANR	44490	ArgumentList	scope -> name		43095	1					
ANR	44491	Argument	scope -> name		43095	0					
ANR	44492	PtrMemberAccess	scope -> name		43095	0					
ANR	44493	Identifier	scope		43095	0					
ANR	44494	Identifier	name		43095	1					
ANR	44495	PrimaryExpression	""""""		43095	2					
ANR	44496	Argument	"scope ? ""::"" : """""		43095	3					
ANR	44497	ConditionalExpression	"scope ? ""::"" : """""		43095	0					
ANR	44498	Condition	scope		43095	0					
ANR	44499	Identifier	scope		43095	0					
ANR	44500	PrimaryExpression	"""::"""		43095	1					
ANR	44501	PrimaryExpression	""""""		43095	2					
ANR	44502	Argument	ptr -> fname		43095	4					
ANR	44503	PtrMemberAccess	ptr -> fname		43095	0					
ANR	44504	Identifier	ptr		43095	0					
ANR	44505	Identifier	fname		43095	1					
ANR	44506	ExpressionStatement	zend_string_free ( lowercase_name )	2315:3:67175:67207	43095	4	True				
ANR	44507	CallExpression	zend_string_free ( lowercase_name )		43095	0					
ANR	44508	Callee	zend_string_free		43095	0					
ANR	44509	Identifier	zend_string_free		43095	0					
ANR	44510	ArgumentList	lowercase_name		43095	1					
ANR	44511	Argument	lowercase_name		43095	0					
ANR	44512	Identifier	lowercase_name		43095	0					
ANR	44513	ExpressionStatement	ptr ++	2316:3:67212:67217	43095	5	True				
ANR	44514	PostIncDecOperationExpression	ptr ++		43095	0					
ANR	44515	Identifier	ptr		43095	0					
ANR	44516	IncDec	++		43095	1					
ANR	44517	ExpressionStatement	"zend_unregister_functions ( functions , count , target_function_table )"	2318:2:67225:67291	43095	2	True				
ANR	44518	CallExpression	"zend_unregister_functions ( functions , count , target_function_table )"		43095	0					
ANR	44519	Callee	zend_unregister_functions		43095	0					
ANR	44520	Identifier	zend_unregister_functions		43095	0					
ANR	44521	ArgumentList	functions		43095	1					
ANR	44522	Argument	functions		43095	0					
ANR	44523	Identifier	functions		43095	0					
ANR	44524	Argument	count		43095	1					
ANR	44525	Identifier	count		43095	0					
ANR	44526	Argument	target_function_table		43095	2					
ANR	44527	Identifier	target_function_table		43095	0					
ANR	44528	ReturnStatement	return FAILURE ;	2319:2:67295:67309	43095	3	True				
ANR	44529	Identifier	FAILURE		43095	0					
ANR	44530	IfStatement	if ( scope )		43095	19					
ANR	44531	Condition	scope	2321:5:67319:67323	43095	0	True				
ANR	44532	Identifier	scope		43095	0					
ANR	44533	CompoundStatement		208:12:8602:8602	43095	1					
ANR	44534	ExpressionStatement	scope -> constructor = ctor	2322:2:67330:67355	43095	0	True				
ANR	44535	AssignmentExpression	scope -> constructor = ctor		43095	0		=			
ANR	44536	PtrMemberAccess	scope -> constructor		43095	0					
ANR	44537	Identifier	scope		43095	0					
ANR	44538	Identifier	constructor		43095	1					
ANR	44539	Identifier	ctor		43095	1					
ANR	44540	ExpressionStatement	scope -> destructor = dtor	2323:2:67359:67383	43095	1	True				
ANR	44541	AssignmentExpression	scope -> destructor = dtor		43095	0		=			
ANR	44542	PtrMemberAccess	scope -> destructor		43095	0					
ANR	44543	Identifier	scope		43095	0					
ANR	44544	Identifier	destructor		43095	1					
ANR	44545	Identifier	dtor		43095	1					
ANR	44546	ExpressionStatement	scope -> clone = clone	2324:2:67387:67407	43095	2	True				
ANR	44547	AssignmentExpression	scope -> clone = clone		43095	0		=			
ANR	44548	PtrMemberAccess	scope -> clone		43095	0					
ANR	44549	Identifier	scope		43095	0					
ANR	44550	Identifier	clone		43095	1					
ANR	44551	Identifier	clone		43095	1					
ANR	44552	ExpressionStatement	scope -> __call = __call	2325:2:67411:67433	43095	3	True				
ANR	44553	AssignmentExpression	scope -> __call = __call		43095	0		=			
ANR	44554	PtrMemberAccess	scope -> __call		43095	0					
ANR	44555	Identifier	scope		43095	0					
ANR	44556	Identifier	__call		43095	1					
ANR	44557	Identifier	__call		43095	1					
ANR	44558	ExpressionStatement	scope -> __callstatic = __callstatic	2326:2:67437:67471	43095	4	True				
ANR	44559	AssignmentExpression	scope -> __callstatic = __callstatic		43095	0		=			
ANR	44560	PtrMemberAccess	scope -> __callstatic		43095	0					
ANR	44561	Identifier	scope		43095	0					
ANR	44562	Identifier	__callstatic		43095	1					
ANR	44563	Identifier	__callstatic		43095	1					
ANR	44564	ExpressionStatement	scope -> __tostring = __tostring	2327:2:67475:67505	43095	5	True				
ANR	44565	AssignmentExpression	scope -> __tostring = __tostring		43095	0		=			
ANR	44566	PtrMemberAccess	scope -> __tostring		43095	0					
ANR	44567	Identifier	scope		43095	0					
ANR	44568	Identifier	__tostring		43095	1					
ANR	44569	Identifier	__tostring		43095	1					
ANR	44570	ExpressionStatement	scope -> __get = __get	2328:2:67509:67529	43095	6	True				
ANR	44571	AssignmentExpression	scope -> __get = __get		43095	0		=			
ANR	44572	PtrMemberAccess	scope -> __get		43095	0					
ANR	44573	Identifier	scope		43095	0					
ANR	44574	Identifier	__get		43095	1					
ANR	44575	Identifier	__get		43095	1					
ANR	44576	ExpressionStatement	scope -> __set = __set	2329:2:67533:67553	43095	7	True				
ANR	44577	AssignmentExpression	scope -> __set = __set		43095	0		=			
ANR	44578	PtrMemberAccess	scope -> __set		43095	0					
ANR	44579	Identifier	scope		43095	0					
ANR	44580	Identifier	__set		43095	1					
ANR	44581	Identifier	__set		43095	1					
ANR	44582	ExpressionStatement	scope -> __unset = __unset	2330:2:67557:67581	43095	8	True				
ANR	44583	AssignmentExpression	scope -> __unset = __unset		43095	0		=			
ANR	44584	PtrMemberAccess	scope -> __unset		43095	0					
ANR	44585	Identifier	scope		43095	0					
ANR	44586	Identifier	__unset		43095	1					
ANR	44587	Identifier	__unset		43095	1					
ANR	44588	ExpressionStatement	scope -> __isset = __isset	2331:2:67585:67609	43095	9	True				
ANR	44589	AssignmentExpression	scope -> __isset = __isset		43095	0		=			
ANR	44590	PtrMemberAccess	scope -> __isset		43095	0					
ANR	44591	Identifier	scope		43095	0					
ANR	44592	Identifier	__isset		43095	1					
ANR	44593	Identifier	__isset		43095	1					
ANR	44594	ExpressionStatement	scope -> __debugInfo = __debugInfo	2332:2:67613:67645	43095	10	True				
ANR	44595	AssignmentExpression	scope -> __debugInfo = __debugInfo		43095	0		=			
ANR	44596	PtrMemberAccess	scope -> __debugInfo		43095	0					
ANR	44597	Identifier	scope		43095	0					
ANR	44598	Identifier	__debugInfo		43095	1					
ANR	44599	Identifier	__debugInfo		43095	1					
ANR	44600	IfStatement	if ( ctor )		43095	11					
ANR	44601	Condition	ctor	2333:6:67653:67656	43095	0	True				
ANR	44602	Identifier	ctor		43095	0					
ANR	44603	CompoundStatement		220:12:8935:8935	43095	1					
ANR	44604	ExpressionStatement	ctor -> common . fn_flags |= ZEND_ACC_CTOR	2334:3:67664:67702	43095	0	True				
ANR	44605	AssignmentExpression	ctor -> common . fn_flags |= ZEND_ACC_CTOR		43095	0		|=			
ANR	44606	MemberAccess	ctor -> common . fn_flags		43095	0					
ANR	44607	PtrMemberAccess	ctor -> common		43095	0					
ANR	44608	Identifier	ctor		43095	0					
ANR	44609	Identifier	common		43095	1					
ANR	44610	Identifier	fn_flags		43095	1					
ANR	44611	Identifier	ZEND_ACC_CTOR		43095	1					
ANR	44612	IfStatement	if ( ctor -> common . fn_flags & ZEND_ACC_STATIC )		43095	1					
ANR	44613	Condition	ctor -> common . fn_flags & ZEND_ACC_STATIC	2335:7:67711:67749	43095	0	True				
ANR	44614	BitAndExpression	ctor -> common . fn_flags & ZEND_ACC_STATIC		43095	0		&			
ANR	44615	MemberAccess	ctor -> common . fn_flags		43095	0					
ANR	44616	PtrMemberAccess	ctor -> common		43095	0					
ANR	44617	Identifier	ctor		43095	0					
ANR	44618	Identifier	common		43095	1					
ANR	44619	Identifier	fn_flags		43095	1					
ANR	44620	Identifier	ZEND_ACC_STATIC		43095	1					
ANR	44621	CompoundStatement		222:48:9028:9028	43095	1					
ANR	44622	ExpressionStatement	"zend_error ( error_type , ""Constructor %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( ctor -> common . function_name ) )"	2336:4:67758:67882	43095	0	True				
ANR	44623	CallExpression	"zend_error ( error_type , ""Constructor %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( ctor -> common . function_name ) )"		43095	0					
ANR	44624	Callee	zend_error		43095	0					
ANR	44625	Identifier	zend_error		43095	0					
ANR	44626	ArgumentList	error_type		43095	1					
ANR	44627	Argument	error_type		43095	0					
ANR	44628	Identifier	error_type		43095	0					
ANR	44629	Argument	"""Constructor %s::%s() cannot be static"""		43095	1					
ANR	44630	PrimaryExpression	"""Constructor %s::%s() cannot be static"""		43095	0					
ANR	44631	Argument	ZSTR_VAL ( scope -> name )		43095	2					
ANR	44632	CallExpression	ZSTR_VAL ( scope -> name )		43095	0					
ANR	44633	Callee	ZSTR_VAL		43095	0					
ANR	44634	Identifier	ZSTR_VAL		43095	0					
ANR	44635	ArgumentList	scope -> name		43095	1					
ANR	44636	Argument	scope -> name		43095	0					
ANR	44637	PtrMemberAccess	scope -> name		43095	0					
ANR	44638	Identifier	scope		43095	0					
ANR	44639	Identifier	name		43095	1					
ANR	44640	Argument	ZSTR_VAL ( ctor -> common . function_name )		43095	3					
ANR	44641	CallExpression	ZSTR_VAL ( ctor -> common . function_name )		43095	0					
ANR	44642	Callee	ZSTR_VAL		43095	0					
ANR	44643	Identifier	ZSTR_VAL		43095	0					
ANR	44644	ArgumentList	ctor -> common . function_name		43095	1					
ANR	44645	Argument	ctor -> common . function_name		43095	0					
ANR	44646	MemberAccess	ctor -> common . function_name		43095	0					
ANR	44647	PtrMemberAccess	ctor -> common		43095	0					
ANR	44648	Identifier	ctor		43095	0					
ANR	44649	Identifier	common		43095	1					
ANR	44650	Identifier	function_name		43095	1					
ANR	44651	ExpressionStatement	ctor -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC	2338:3:67892:67939	43095	2	True				
ANR	44652	AssignmentExpression	ctor -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC		43095	0		&=			
ANR	44653	MemberAccess	ctor -> common . fn_flags		43095	0					
ANR	44654	PtrMemberAccess	ctor -> common		43095	0					
ANR	44655	Identifier	ctor		43095	0					
ANR	44656	Identifier	common		43095	1					
ANR	44657	Identifier	fn_flags		43095	1					
ANR	44658	Identifier	~ZEND_ACC_ALLOW_STATIC		43095	1					
ANR	44659	IfStatement	if ( dtor )		43095	12					
ANR	44660	Condition	dtor	2340:6:67951:67954	43095	0	True				
ANR	44661	Identifier	dtor		43095	0					
ANR	44662	CompoundStatement		227:12:9233:9233	43095	1					
ANR	44663	ExpressionStatement	dtor -> common . fn_flags |= ZEND_ACC_DTOR	2341:3:67962:68000	43095	0	True				
ANR	44664	AssignmentExpression	dtor -> common . fn_flags |= ZEND_ACC_DTOR		43095	0		|=			
ANR	44665	MemberAccess	dtor -> common . fn_flags		43095	0					
ANR	44666	PtrMemberAccess	dtor -> common		43095	0					
ANR	44667	Identifier	dtor		43095	0					
ANR	44668	Identifier	common		43095	1					
ANR	44669	Identifier	fn_flags		43095	1					
ANR	44670	Identifier	ZEND_ACC_DTOR		43095	1					
ANR	44671	IfStatement	if ( dtor -> common . fn_flags & ZEND_ACC_STATIC )		43095	1					
ANR	44672	Condition	dtor -> common . fn_flags & ZEND_ACC_STATIC	2342:7:68009:68047	43095	0	True				
ANR	44673	BitAndExpression	dtor -> common . fn_flags & ZEND_ACC_STATIC		43095	0		&			
ANR	44674	MemberAccess	dtor -> common . fn_flags		43095	0					
ANR	44675	PtrMemberAccess	dtor -> common		43095	0					
ANR	44676	Identifier	dtor		43095	0					
ANR	44677	Identifier	common		43095	1					
ANR	44678	Identifier	fn_flags		43095	1					
ANR	44679	Identifier	ZEND_ACC_STATIC		43095	1					
ANR	44680	CompoundStatement		229:48:9326:9326	43095	1					
ANR	44681	ExpressionStatement	"zend_error ( error_type , ""Destructor %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( dtor -> common . function_name ) )"	2343:4:68056:68179	43095	0	True				
ANR	44682	CallExpression	"zend_error ( error_type , ""Destructor %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( dtor -> common . function_name ) )"		43095	0					
ANR	44683	Callee	zend_error		43095	0					
ANR	44684	Identifier	zend_error		43095	0					
ANR	44685	ArgumentList	error_type		43095	1					
ANR	44686	Argument	error_type		43095	0					
ANR	44687	Identifier	error_type		43095	0					
ANR	44688	Argument	"""Destructor %s::%s() cannot be static"""		43095	1					
ANR	44689	PrimaryExpression	"""Destructor %s::%s() cannot be static"""		43095	0					
ANR	44690	Argument	ZSTR_VAL ( scope -> name )		43095	2					
ANR	44691	CallExpression	ZSTR_VAL ( scope -> name )		43095	0					
ANR	44692	Callee	ZSTR_VAL		43095	0					
ANR	44693	Identifier	ZSTR_VAL		43095	0					
ANR	44694	ArgumentList	scope -> name		43095	1					
ANR	44695	Argument	scope -> name		43095	0					
ANR	44696	PtrMemberAccess	scope -> name		43095	0					
ANR	44697	Identifier	scope		43095	0					
ANR	44698	Identifier	name		43095	1					
ANR	44699	Argument	ZSTR_VAL ( dtor -> common . function_name )		43095	3					
ANR	44700	CallExpression	ZSTR_VAL ( dtor -> common . function_name )		43095	0					
ANR	44701	Callee	ZSTR_VAL		43095	0					
ANR	44702	Identifier	ZSTR_VAL		43095	0					
ANR	44703	ArgumentList	dtor -> common . function_name		43095	1					
ANR	44704	Argument	dtor -> common . function_name		43095	0					
ANR	44705	MemberAccess	dtor -> common . function_name		43095	0					
ANR	44706	PtrMemberAccess	dtor -> common		43095	0					
ANR	44707	Identifier	dtor		43095	0					
ANR	44708	Identifier	common		43095	1					
ANR	44709	Identifier	function_name		43095	1					
ANR	44710	ExpressionStatement	dtor -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC	2345:3:68189:68236	43095	2	True				
ANR	44711	AssignmentExpression	dtor -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC		43095	0		&=			
ANR	44712	MemberAccess	dtor -> common . fn_flags		43095	0					
ANR	44713	PtrMemberAccess	dtor -> common		43095	0					
ANR	44714	Identifier	dtor		43095	0					
ANR	44715	Identifier	common		43095	1					
ANR	44716	Identifier	fn_flags		43095	1					
ANR	44717	Identifier	~ZEND_ACC_ALLOW_STATIC		43095	1					
ANR	44718	IfStatement	if ( clone )		43095	13					
ANR	44719	Condition	clone	2347:6:68248:68252	43095	0	True				
ANR	44720	Identifier	clone		43095	0					
ANR	44721	CompoundStatement		234:13:9531:9531	43095	1					
ANR	44722	ExpressionStatement	clone -> common . fn_flags |= ZEND_ACC_CLONE	2348:3:68260:68300	43095	0	True				
ANR	44723	AssignmentExpression	clone -> common . fn_flags |= ZEND_ACC_CLONE		43095	0		|=			
ANR	44724	MemberAccess	clone -> common . fn_flags		43095	0					
ANR	44725	PtrMemberAccess	clone -> common		43095	0					
ANR	44726	Identifier	clone		43095	0					
ANR	44727	Identifier	common		43095	1					
ANR	44728	Identifier	fn_flags		43095	1					
ANR	44729	Identifier	ZEND_ACC_CLONE		43095	1					
ANR	44730	IfStatement	if ( clone -> common . fn_flags & ZEND_ACC_STATIC )		43095	1					
ANR	44731	Condition	clone -> common . fn_flags & ZEND_ACC_STATIC	2349:7:68309:68348	43095	0	True				
ANR	44732	BitAndExpression	clone -> common . fn_flags & ZEND_ACC_STATIC		43095	0		&			
ANR	44733	MemberAccess	clone -> common . fn_flags		43095	0					
ANR	44734	PtrMemberAccess	clone -> common		43095	0					
ANR	44735	Identifier	clone		43095	0					
ANR	44736	Identifier	common		43095	1					
ANR	44737	Identifier	fn_flags		43095	1					
ANR	44738	Identifier	ZEND_ACC_STATIC		43095	1					
ANR	44739	CompoundStatement		236:49:9627:9627	43095	1					
ANR	44740	ExpressionStatement	"zend_error ( error_type , ""Constructor %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( clone -> common . function_name ) )"	2350:4:68357:68482	43095	0	True				
ANR	44741	CallExpression	"zend_error ( error_type , ""Constructor %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( clone -> common . function_name ) )"		43095	0					
ANR	44742	Callee	zend_error		43095	0					
ANR	44743	Identifier	zend_error		43095	0					
ANR	44744	ArgumentList	error_type		43095	1					
ANR	44745	Argument	error_type		43095	0					
ANR	44746	Identifier	error_type		43095	0					
ANR	44747	Argument	"""Constructor %s::%s() cannot be static"""		43095	1					
ANR	44748	PrimaryExpression	"""Constructor %s::%s() cannot be static"""		43095	0					
ANR	44749	Argument	ZSTR_VAL ( scope -> name )		43095	2					
ANR	44750	CallExpression	ZSTR_VAL ( scope -> name )		43095	0					
ANR	44751	Callee	ZSTR_VAL		43095	0					
ANR	44752	Identifier	ZSTR_VAL		43095	0					
ANR	44753	ArgumentList	scope -> name		43095	1					
ANR	44754	Argument	scope -> name		43095	0					
ANR	44755	PtrMemberAccess	scope -> name		43095	0					
ANR	44756	Identifier	scope		43095	0					
ANR	44757	Identifier	name		43095	1					
ANR	44758	Argument	ZSTR_VAL ( clone -> common . function_name )		43095	3					
ANR	44759	CallExpression	ZSTR_VAL ( clone -> common . function_name )		43095	0					
ANR	44760	Callee	ZSTR_VAL		43095	0					
ANR	44761	Identifier	ZSTR_VAL		43095	0					
ANR	44762	ArgumentList	clone -> common . function_name		43095	1					
ANR	44763	Argument	clone -> common . function_name		43095	0					
ANR	44764	MemberAccess	clone -> common . function_name		43095	0					
ANR	44765	PtrMemberAccess	clone -> common		43095	0					
ANR	44766	Identifier	clone		43095	0					
ANR	44767	Identifier	common		43095	1					
ANR	44768	Identifier	function_name		43095	1					
ANR	44769	ExpressionStatement	clone -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC	2352:3:68492:68540	43095	2	True				
ANR	44770	AssignmentExpression	clone -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC		43095	0		&=			
ANR	44771	MemberAccess	clone -> common . fn_flags		43095	0					
ANR	44772	PtrMemberAccess	clone -> common		43095	0					
ANR	44773	Identifier	clone		43095	0					
ANR	44774	Identifier	common		43095	1					
ANR	44775	Identifier	fn_flags		43095	1					
ANR	44776	Identifier	~ZEND_ACC_ALLOW_STATIC		43095	1					
ANR	44777	IfStatement	if ( __call )		43095	14					
ANR	44778	Condition	__call	2354:6:68552:68557	43095	0	True				
ANR	44779	Identifier	__call		43095	0					
ANR	44780	CompoundStatement		241:14:9836:9836	43095	1					
ANR	44781	IfStatement	if ( __call -> common . fn_flags & ZEND_ACC_STATIC )		43095	0					
ANR	44782	Condition	__call -> common . fn_flags & ZEND_ACC_STATIC	2355:7:68569:68609	43095	0	True				
ANR	44783	BitAndExpression	__call -> common . fn_flags & ZEND_ACC_STATIC		43095	0		&			
ANR	44784	MemberAccess	__call -> common . fn_flags		43095	0					
ANR	44785	PtrMemberAccess	__call -> common		43095	0					
ANR	44786	Identifier	__call		43095	0					
ANR	44787	Identifier	common		43095	1					
ANR	44788	Identifier	fn_flags		43095	1					
ANR	44789	Identifier	ZEND_ACC_STATIC		43095	1					
ANR	44790	CompoundStatement		242:50:9888:9888	43095	1					
ANR	44791	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( __call -> common . function_name ) )"	2356:4:68618:68739	43095	0	True				
ANR	44792	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( __call -> common . function_name ) )"		43095	0					
ANR	44793	Callee	zend_error		43095	0					
ANR	44794	Identifier	zend_error		43095	0					
ANR	44795	ArgumentList	error_type		43095	1					
ANR	44796	Argument	error_type		43095	0					
ANR	44797	Identifier	error_type		43095	0					
ANR	44798	Argument	"""Method %s::%s() cannot be static"""		43095	1					
ANR	44799	PrimaryExpression	"""Method %s::%s() cannot be static"""		43095	0					
ANR	44800	Argument	ZSTR_VAL ( scope -> name )		43095	2					
ANR	44801	CallExpression	ZSTR_VAL ( scope -> name )		43095	0					
ANR	44802	Callee	ZSTR_VAL		43095	0					
ANR	44803	Identifier	ZSTR_VAL		43095	0					
ANR	44804	ArgumentList	scope -> name		43095	1					
ANR	44805	Argument	scope -> name		43095	0					
ANR	44806	PtrMemberAccess	scope -> name		43095	0					
ANR	44807	Identifier	scope		43095	0					
ANR	44808	Identifier	name		43095	1					
ANR	44809	Argument	ZSTR_VAL ( __call -> common . function_name )		43095	3					
ANR	44810	CallExpression	ZSTR_VAL ( __call -> common . function_name )		43095	0					
ANR	44811	Callee	ZSTR_VAL		43095	0					
ANR	44812	Identifier	ZSTR_VAL		43095	0					
ANR	44813	ArgumentList	__call -> common . function_name		43095	1					
ANR	44814	Argument	__call -> common . function_name		43095	0					
ANR	44815	MemberAccess	__call -> common . function_name		43095	0					
ANR	44816	PtrMemberAccess	__call -> common		43095	0					
ANR	44817	Identifier	__call		43095	0					
ANR	44818	Identifier	common		43095	1					
ANR	44819	Identifier	function_name		43095	1					
ANR	44820	ExpressionStatement	__call -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC	2358:3:68749:68798	43095	1	True				
ANR	44821	AssignmentExpression	__call -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC		43095	0		&=			
ANR	44822	MemberAccess	__call -> common . fn_flags		43095	0					
ANR	44823	PtrMemberAccess	__call -> common		43095	0					
ANR	44824	Identifier	__call		43095	0					
ANR	44825	Identifier	common		43095	1					
ANR	44826	Identifier	fn_flags		43095	1					
ANR	44827	Identifier	~ZEND_ACC_ALLOW_STATIC		43095	1					
ANR	44828	IfStatement	if ( __callstatic )		43095	15					
ANR	44829	Condition	__callstatic	2360:6:68810:68821	43095	0	True				
ANR	44830	Identifier	__callstatic		43095	0					
ANR	44831	CompoundStatement		247:20:10100:10100	43095	1					
ANR	44832	IfStatement	if ( ! ( __callstatic -> common . fn_flags & ZEND_ACC_STATIC ) )		43095	0					
ANR	44833	Condition	! ( __callstatic -> common . fn_flags & ZEND_ACC_STATIC )	2361:7:68833:68882	43095	0	True				
ANR	44834	UnaryOperationExpression	! ( __callstatic -> common . fn_flags & ZEND_ACC_STATIC )		43095	0					
ANR	44835	UnaryOperator	!		43095	0					
ANR	44836	BitAndExpression	__callstatic -> common . fn_flags & ZEND_ACC_STATIC		43095	1		&			
ANR	44837	MemberAccess	__callstatic -> common . fn_flags		43095	0					
ANR	44838	PtrMemberAccess	__callstatic -> common		43095	0					
ANR	44839	Identifier	__callstatic		43095	0					
ANR	44840	Identifier	common		43095	1					
ANR	44841	Identifier	fn_flags		43095	1					
ANR	44842	Identifier	ZEND_ACC_STATIC		43095	1					
ANR	44843	CompoundStatement		248:59:10161:10161	43095	1					
ANR	44844	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() must be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( __callstatic -> common . function_name ) )"	2362:4:68891:69016	43095	0	True				
ANR	44845	CallExpression	"zend_error ( error_type , ""Method %s::%s() must be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( __callstatic -> common . function_name ) )"		43095	0					
ANR	44846	Callee	zend_error		43095	0					
ANR	44847	Identifier	zend_error		43095	0					
ANR	44848	ArgumentList	error_type		43095	1					
ANR	44849	Argument	error_type		43095	0					
ANR	44850	Identifier	error_type		43095	0					
ANR	44851	Argument	"""Method %s::%s() must be static"""		43095	1					
ANR	44852	PrimaryExpression	"""Method %s::%s() must be static"""		43095	0					
ANR	44853	Argument	ZSTR_VAL ( scope -> name )		43095	2					
ANR	44854	CallExpression	ZSTR_VAL ( scope -> name )		43095	0					
ANR	44855	Callee	ZSTR_VAL		43095	0					
ANR	44856	Identifier	ZSTR_VAL		43095	0					
ANR	44857	ArgumentList	scope -> name		43095	1					
ANR	44858	Argument	scope -> name		43095	0					
ANR	44859	PtrMemberAccess	scope -> name		43095	0					
ANR	44860	Identifier	scope		43095	0					
ANR	44861	Identifier	name		43095	1					
ANR	44862	Argument	ZSTR_VAL ( __callstatic -> common . function_name )		43095	3					
ANR	44863	CallExpression	ZSTR_VAL ( __callstatic -> common . function_name )		43095	0					
ANR	44864	Callee	ZSTR_VAL		43095	0					
ANR	44865	Identifier	ZSTR_VAL		43095	0					
ANR	44866	ArgumentList	__callstatic -> common . function_name		43095	1					
ANR	44867	Argument	__callstatic -> common . function_name		43095	0					
ANR	44868	MemberAccess	__callstatic -> common . function_name		43095	0					
ANR	44869	PtrMemberAccess	__callstatic -> common		43095	0					
ANR	44870	Identifier	__callstatic		43095	0					
ANR	44871	Identifier	common		43095	1					
ANR	44872	Identifier	function_name		43095	1					
ANR	44873	ExpressionStatement	__callstatic -> common . fn_flags |= ZEND_ACC_STATIC	2364:3:69026:69074	43095	1	True				
ANR	44874	AssignmentExpression	__callstatic -> common . fn_flags |= ZEND_ACC_STATIC		43095	0		|=			
ANR	44875	MemberAccess	__callstatic -> common . fn_flags		43095	0					
ANR	44876	PtrMemberAccess	__callstatic -> common		43095	0					
ANR	44877	Identifier	__callstatic		43095	0					
ANR	44878	Identifier	common		43095	1					
ANR	44879	Identifier	fn_flags		43095	1					
ANR	44880	Identifier	ZEND_ACC_STATIC		43095	1					
ANR	44881	IfStatement	if ( __tostring )		43095	16					
ANR	44882	Condition	__tostring	2366:6:69086:69095	43095	0	True				
ANR	44883	Identifier	__tostring		43095	0					
ANR	44884	CompoundStatement		253:18:10374:10374	43095	1					
ANR	44885	IfStatement	if ( __tostring -> common . fn_flags & ZEND_ACC_STATIC )		43095	0					
ANR	44886	Condition	__tostring -> common . fn_flags & ZEND_ACC_STATIC	2367:7:69107:69151	43095	0	True				
ANR	44887	BitAndExpression	__tostring -> common . fn_flags & ZEND_ACC_STATIC		43095	0		&			
ANR	44888	MemberAccess	__tostring -> common . fn_flags		43095	0					
ANR	44889	PtrMemberAccess	__tostring -> common		43095	0					
ANR	44890	Identifier	__tostring		43095	0					
ANR	44891	Identifier	common		43095	1					
ANR	44892	Identifier	fn_flags		43095	1					
ANR	44893	Identifier	ZEND_ACC_STATIC		43095	1					
ANR	44894	CompoundStatement		254:54:10430:10430	43095	1					
ANR	44895	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( __tostring -> common . function_name ) )"	2368:4:69160:69285	43095	0	True				
ANR	44896	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( __tostring -> common . function_name ) )"		43095	0					
ANR	44897	Callee	zend_error		43095	0					
ANR	44898	Identifier	zend_error		43095	0					
ANR	44899	ArgumentList	error_type		43095	1					
ANR	44900	Argument	error_type		43095	0					
ANR	44901	Identifier	error_type		43095	0					
ANR	44902	Argument	"""Method %s::%s() cannot be static"""		43095	1					
ANR	44903	PrimaryExpression	"""Method %s::%s() cannot be static"""		43095	0					
ANR	44904	Argument	ZSTR_VAL ( scope -> name )		43095	2					
ANR	44905	CallExpression	ZSTR_VAL ( scope -> name )		43095	0					
ANR	44906	Callee	ZSTR_VAL		43095	0					
ANR	44907	Identifier	ZSTR_VAL		43095	0					
ANR	44908	ArgumentList	scope -> name		43095	1					
ANR	44909	Argument	scope -> name		43095	0					
ANR	44910	PtrMemberAccess	scope -> name		43095	0					
ANR	44911	Identifier	scope		43095	0					
ANR	44912	Identifier	name		43095	1					
ANR	44913	Argument	ZSTR_VAL ( __tostring -> common . function_name )		43095	3					
ANR	44914	CallExpression	ZSTR_VAL ( __tostring -> common . function_name )		43095	0					
ANR	44915	Callee	ZSTR_VAL		43095	0					
ANR	44916	Identifier	ZSTR_VAL		43095	0					
ANR	44917	ArgumentList	__tostring -> common . function_name		43095	1					
ANR	44918	Argument	__tostring -> common . function_name		43095	0					
ANR	44919	MemberAccess	__tostring -> common . function_name		43095	0					
ANR	44920	PtrMemberAccess	__tostring -> common		43095	0					
ANR	44921	Identifier	__tostring		43095	0					
ANR	44922	Identifier	common		43095	1					
ANR	44923	Identifier	function_name		43095	1					
ANR	44924	ExpressionStatement	__tostring -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC	2370:3:69295:69348	43095	1	True				
ANR	44925	AssignmentExpression	__tostring -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC		43095	0		&=			
ANR	44926	MemberAccess	__tostring -> common . fn_flags		43095	0					
ANR	44927	PtrMemberAccess	__tostring -> common		43095	0					
ANR	44928	Identifier	__tostring		43095	0					
ANR	44929	Identifier	common		43095	1					
ANR	44930	Identifier	fn_flags		43095	1					
ANR	44931	Identifier	~ZEND_ACC_ALLOW_STATIC		43095	1					
ANR	44932	IfStatement	if ( __get )		43095	17					
ANR	44933	Condition	__get	2372:6:69360:69364	43095	0	True				
ANR	44934	Identifier	__get		43095	0					
ANR	44935	CompoundStatement		259:13:10643:10643	43095	1					
ANR	44936	IfStatement	if ( __get -> common . fn_flags & ZEND_ACC_STATIC )		43095	0					
ANR	44937	Condition	__get -> common . fn_flags & ZEND_ACC_STATIC	2373:7:69376:69415	43095	0	True				
ANR	44938	BitAndExpression	__get -> common . fn_flags & ZEND_ACC_STATIC		43095	0		&			
ANR	44939	MemberAccess	__get -> common . fn_flags		43095	0					
ANR	44940	PtrMemberAccess	__get -> common		43095	0					
ANR	44941	Identifier	__get		43095	0					
ANR	44942	Identifier	common		43095	1					
ANR	44943	Identifier	fn_flags		43095	1					
ANR	44944	Identifier	ZEND_ACC_STATIC		43095	1					
ANR	44945	CompoundStatement		260:49:10694:10694	43095	1					
ANR	44946	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( __get -> common . function_name ) )"	2374:4:69424:69544	43095	0	True				
ANR	44947	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( __get -> common . function_name ) )"		43095	0					
ANR	44948	Callee	zend_error		43095	0					
ANR	44949	Identifier	zend_error		43095	0					
ANR	44950	ArgumentList	error_type		43095	1					
ANR	44951	Argument	error_type		43095	0					
ANR	44952	Identifier	error_type		43095	0					
ANR	44953	Argument	"""Method %s::%s() cannot be static"""		43095	1					
ANR	44954	PrimaryExpression	"""Method %s::%s() cannot be static"""		43095	0					
ANR	44955	Argument	ZSTR_VAL ( scope -> name )		43095	2					
ANR	44956	CallExpression	ZSTR_VAL ( scope -> name )		43095	0					
ANR	44957	Callee	ZSTR_VAL		43095	0					
ANR	44958	Identifier	ZSTR_VAL		43095	0					
ANR	44959	ArgumentList	scope -> name		43095	1					
ANR	44960	Argument	scope -> name		43095	0					
ANR	44961	PtrMemberAccess	scope -> name		43095	0					
ANR	44962	Identifier	scope		43095	0					
ANR	44963	Identifier	name		43095	1					
ANR	44964	Argument	ZSTR_VAL ( __get -> common . function_name )		43095	3					
ANR	44965	CallExpression	ZSTR_VAL ( __get -> common . function_name )		43095	0					
ANR	44966	Callee	ZSTR_VAL		43095	0					
ANR	44967	Identifier	ZSTR_VAL		43095	0					
ANR	44968	ArgumentList	__get -> common . function_name		43095	1					
ANR	44969	Argument	__get -> common . function_name		43095	0					
ANR	44970	MemberAccess	__get -> common . function_name		43095	0					
ANR	44971	PtrMemberAccess	__get -> common		43095	0					
ANR	44972	Identifier	__get		43095	0					
ANR	44973	Identifier	common		43095	1					
ANR	44974	Identifier	function_name		43095	1					
ANR	44975	ExpressionStatement	__get -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC	2376:3:69554:69602	43095	1	True				
ANR	44976	AssignmentExpression	__get -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC		43095	0		&=			
ANR	44977	MemberAccess	__get -> common . fn_flags		43095	0					
ANR	44978	PtrMemberAccess	__get -> common		43095	0					
ANR	44979	Identifier	__get		43095	0					
ANR	44980	Identifier	common		43095	1					
ANR	44981	Identifier	fn_flags		43095	1					
ANR	44982	Identifier	~ZEND_ACC_ALLOW_STATIC		43095	1					
ANR	44983	IfStatement	if ( __set )		43095	18					
ANR	44984	Condition	__set	2378:6:69614:69618	43095	0	True				
ANR	44985	Identifier	__set		43095	0					
ANR	44986	CompoundStatement		265:13:10897:10897	43095	1					
ANR	44987	IfStatement	if ( __set -> common . fn_flags & ZEND_ACC_STATIC )		43095	0					
ANR	44988	Condition	__set -> common . fn_flags & ZEND_ACC_STATIC	2379:7:69630:69669	43095	0	True				
ANR	44989	BitAndExpression	__set -> common . fn_flags & ZEND_ACC_STATIC		43095	0		&			
ANR	44990	MemberAccess	__set -> common . fn_flags		43095	0					
ANR	44991	PtrMemberAccess	__set -> common		43095	0					
ANR	44992	Identifier	__set		43095	0					
ANR	44993	Identifier	common		43095	1					
ANR	44994	Identifier	fn_flags		43095	1					
ANR	44995	Identifier	ZEND_ACC_STATIC		43095	1					
ANR	44996	CompoundStatement		266:49:10948:10948	43095	1					
ANR	44997	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( __set -> common . function_name ) )"	2380:4:69678:69798	43095	0	True				
ANR	44998	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( __set -> common . function_name ) )"		43095	0					
ANR	44999	Callee	zend_error		43095	0					
ANR	45000	Identifier	zend_error		43095	0					
ANR	45001	ArgumentList	error_type		43095	1					
ANR	45002	Argument	error_type		43095	0					
ANR	45003	Identifier	error_type		43095	0					
ANR	45004	Argument	"""Method %s::%s() cannot be static"""		43095	1					
ANR	45005	PrimaryExpression	"""Method %s::%s() cannot be static"""		43095	0					
ANR	45006	Argument	ZSTR_VAL ( scope -> name )		43095	2					
ANR	45007	CallExpression	ZSTR_VAL ( scope -> name )		43095	0					
ANR	45008	Callee	ZSTR_VAL		43095	0					
ANR	45009	Identifier	ZSTR_VAL		43095	0					
ANR	45010	ArgumentList	scope -> name		43095	1					
ANR	45011	Argument	scope -> name		43095	0					
ANR	45012	PtrMemberAccess	scope -> name		43095	0					
ANR	45013	Identifier	scope		43095	0					
ANR	45014	Identifier	name		43095	1					
ANR	45015	Argument	ZSTR_VAL ( __set -> common . function_name )		43095	3					
ANR	45016	CallExpression	ZSTR_VAL ( __set -> common . function_name )		43095	0					
ANR	45017	Callee	ZSTR_VAL		43095	0					
ANR	45018	Identifier	ZSTR_VAL		43095	0					
ANR	45019	ArgumentList	__set -> common . function_name		43095	1					
ANR	45020	Argument	__set -> common . function_name		43095	0					
ANR	45021	MemberAccess	__set -> common . function_name		43095	0					
ANR	45022	PtrMemberAccess	__set -> common		43095	0					
ANR	45023	Identifier	__set		43095	0					
ANR	45024	Identifier	common		43095	1					
ANR	45025	Identifier	function_name		43095	1					
ANR	45026	ExpressionStatement	__set -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC	2382:3:69808:69856	43095	1	True				
ANR	45027	AssignmentExpression	__set -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC		43095	0		&=			
ANR	45028	MemberAccess	__set -> common . fn_flags		43095	0					
ANR	45029	PtrMemberAccess	__set -> common		43095	0					
ANR	45030	Identifier	__set		43095	0					
ANR	45031	Identifier	common		43095	1					
ANR	45032	Identifier	fn_flags		43095	1					
ANR	45033	Identifier	~ZEND_ACC_ALLOW_STATIC		43095	1					
ANR	45034	IfStatement	if ( __unset )		43095	19					
ANR	45035	Condition	__unset	2384:6:69868:69874	43095	0	True				
ANR	45036	Identifier	__unset		43095	0					
ANR	45037	CompoundStatement		271:15:11153:11153	43095	1					
ANR	45038	IfStatement	if ( __unset -> common . fn_flags & ZEND_ACC_STATIC )		43095	0					
ANR	45039	Condition	__unset -> common . fn_flags & ZEND_ACC_STATIC	2385:7:69886:69927	43095	0	True				
ANR	45040	BitAndExpression	__unset -> common . fn_flags & ZEND_ACC_STATIC		43095	0		&			
ANR	45041	MemberAccess	__unset -> common . fn_flags		43095	0					
ANR	45042	PtrMemberAccess	__unset -> common		43095	0					
ANR	45043	Identifier	__unset		43095	0					
ANR	45044	Identifier	common		43095	1					
ANR	45045	Identifier	fn_flags		43095	1					
ANR	45046	Identifier	ZEND_ACC_STATIC		43095	1					
ANR	45047	CompoundStatement		272:51:11206:11206	43095	1					
ANR	45048	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( __unset -> common . function_name ) )"	2386:4:69936:70058	43095	0	True				
ANR	45049	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( __unset -> common . function_name ) )"		43095	0					
ANR	45050	Callee	zend_error		43095	0					
ANR	45051	Identifier	zend_error		43095	0					
ANR	45052	ArgumentList	error_type		43095	1					
ANR	45053	Argument	error_type		43095	0					
ANR	45054	Identifier	error_type		43095	0					
ANR	45055	Argument	"""Method %s::%s() cannot be static"""		43095	1					
ANR	45056	PrimaryExpression	"""Method %s::%s() cannot be static"""		43095	0					
ANR	45057	Argument	ZSTR_VAL ( scope -> name )		43095	2					
ANR	45058	CallExpression	ZSTR_VAL ( scope -> name )		43095	0					
ANR	45059	Callee	ZSTR_VAL		43095	0					
ANR	45060	Identifier	ZSTR_VAL		43095	0					
ANR	45061	ArgumentList	scope -> name		43095	1					
ANR	45062	Argument	scope -> name		43095	0					
ANR	45063	PtrMemberAccess	scope -> name		43095	0					
ANR	45064	Identifier	scope		43095	0					
ANR	45065	Identifier	name		43095	1					
ANR	45066	Argument	ZSTR_VAL ( __unset -> common . function_name )		43095	3					
ANR	45067	CallExpression	ZSTR_VAL ( __unset -> common . function_name )		43095	0					
ANR	45068	Callee	ZSTR_VAL		43095	0					
ANR	45069	Identifier	ZSTR_VAL		43095	0					
ANR	45070	ArgumentList	__unset -> common . function_name		43095	1					
ANR	45071	Argument	__unset -> common . function_name		43095	0					
ANR	45072	MemberAccess	__unset -> common . function_name		43095	0					
ANR	45073	PtrMemberAccess	__unset -> common		43095	0					
ANR	45074	Identifier	__unset		43095	0					
ANR	45075	Identifier	common		43095	1					
ANR	45076	Identifier	function_name		43095	1					
ANR	45077	ExpressionStatement	__unset -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC	2388:3:70068:70118	43095	1	True				
ANR	45078	AssignmentExpression	__unset -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC		43095	0		&=			
ANR	45079	MemberAccess	__unset -> common . fn_flags		43095	0					
ANR	45080	PtrMemberAccess	__unset -> common		43095	0					
ANR	45081	Identifier	__unset		43095	0					
ANR	45082	Identifier	common		43095	1					
ANR	45083	Identifier	fn_flags		43095	1					
ANR	45084	Identifier	~ZEND_ACC_ALLOW_STATIC		43095	1					
ANR	45085	IfStatement	if ( __isset )		43095	20					
ANR	45086	Condition	__isset	2390:6:70130:70136	43095	0	True				
ANR	45087	Identifier	__isset		43095	0					
ANR	45088	CompoundStatement		277:15:11415:11415	43095	1					
ANR	45089	IfStatement	if ( __isset -> common . fn_flags & ZEND_ACC_STATIC )		43095	0					
ANR	45090	Condition	__isset -> common . fn_flags & ZEND_ACC_STATIC	2391:7:70148:70189	43095	0	True				
ANR	45091	BitAndExpression	__isset -> common . fn_flags & ZEND_ACC_STATIC		43095	0		&			
ANR	45092	MemberAccess	__isset -> common . fn_flags		43095	0					
ANR	45093	PtrMemberAccess	__isset -> common		43095	0					
ANR	45094	Identifier	__isset		43095	0					
ANR	45095	Identifier	common		43095	1					
ANR	45096	Identifier	fn_flags		43095	1					
ANR	45097	Identifier	ZEND_ACC_STATIC		43095	1					
ANR	45098	CompoundStatement		278:51:11468:11468	43095	1					
ANR	45099	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( __isset -> common . function_name ) )"	2392:4:70198:70320	43095	0	True				
ANR	45100	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( __isset -> common . function_name ) )"		43095	0					
ANR	45101	Callee	zend_error		43095	0					
ANR	45102	Identifier	zend_error		43095	0					
ANR	45103	ArgumentList	error_type		43095	1					
ANR	45104	Argument	error_type		43095	0					
ANR	45105	Identifier	error_type		43095	0					
ANR	45106	Argument	"""Method %s::%s() cannot be static"""		43095	1					
ANR	45107	PrimaryExpression	"""Method %s::%s() cannot be static"""		43095	0					
ANR	45108	Argument	ZSTR_VAL ( scope -> name )		43095	2					
ANR	45109	CallExpression	ZSTR_VAL ( scope -> name )		43095	0					
ANR	45110	Callee	ZSTR_VAL		43095	0					
ANR	45111	Identifier	ZSTR_VAL		43095	0					
ANR	45112	ArgumentList	scope -> name		43095	1					
ANR	45113	Argument	scope -> name		43095	0					
ANR	45114	PtrMemberAccess	scope -> name		43095	0					
ANR	45115	Identifier	scope		43095	0					
ANR	45116	Identifier	name		43095	1					
ANR	45117	Argument	ZSTR_VAL ( __isset -> common . function_name )		43095	3					
ANR	45118	CallExpression	ZSTR_VAL ( __isset -> common . function_name )		43095	0					
ANR	45119	Callee	ZSTR_VAL		43095	0					
ANR	45120	Identifier	ZSTR_VAL		43095	0					
ANR	45121	ArgumentList	__isset -> common . function_name		43095	1					
ANR	45122	Argument	__isset -> common . function_name		43095	0					
ANR	45123	MemberAccess	__isset -> common . function_name		43095	0					
ANR	45124	PtrMemberAccess	__isset -> common		43095	0					
ANR	45125	Identifier	__isset		43095	0					
ANR	45126	Identifier	common		43095	1					
ANR	45127	Identifier	function_name		43095	1					
ANR	45128	ExpressionStatement	__isset -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC	2394:3:70330:70380	43095	1	True				
ANR	45129	AssignmentExpression	__isset -> common . fn_flags &= ~ZEND_ACC_ALLOW_STATIC		43095	0		&=			
ANR	45130	MemberAccess	__isset -> common . fn_flags		43095	0					
ANR	45131	PtrMemberAccess	__isset -> common		43095	0					
ANR	45132	Identifier	__isset		43095	0					
ANR	45133	Identifier	common		43095	1					
ANR	45134	Identifier	fn_flags		43095	1					
ANR	45135	Identifier	~ZEND_ACC_ALLOW_STATIC		43095	1					
ANR	45136	IfStatement	if ( __debugInfo )		43095	21					
ANR	45137	Condition	__debugInfo	2396:6:70392:70402	43095	0	True				
ANR	45138	Identifier	__debugInfo		43095	0					
ANR	45139	CompoundStatement		283:19:11681:11681	43095	1					
ANR	45140	IfStatement	if ( __debugInfo -> common . fn_flags & ZEND_ACC_STATIC )		43095	0					
ANR	45141	Condition	__debugInfo -> common . fn_flags & ZEND_ACC_STATIC	2397:7:70414:70459	43095	0	True				
ANR	45142	BitAndExpression	__debugInfo -> common . fn_flags & ZEND_ACC_STATIC		43095	0		&			
ANR	45143	MemberAccess	__debugInfo -> common . fn_flags		43095	0					
ANR	45144	PtrMemberAccess	__debugInfo -> common		43095	0					
ANR	45145	Identifier	__debugInfo		43095	0					
ANR	45146	Identifier	common		43095	1					
ANR	45147	Identifier	fn_flags		43095	1					
ANR	45148	Identifier	ZEND_ACC_STATIC		43095	1					
ANR	45149	CompoundStatement		284:55:11738:11738	43095	1					
ANR	45150	ExpressionStatement	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( __debugInfo -> common . function_name ) )"	2398:4:70468:70594	43095	0	True				
ANR	45151	CallExpression	"zend_error ( error_type , ""Method %s::%s() cannot be static"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( __debugInfo -> common . function_name ) )"		43095	0					
ANR	45152	Callee	zend_error		43095	0					
ANR	45153	Identifier	zend_error		43095	0					
ANR	45154	ArgumentList	error_type		43095	1					
ANR	45155	Argument	error_type		43095	0					
ANR	45156	Identifier	error_type		43095	0					
ANR	45157	Argument	"""Method %s::%s() cannot be static"""		43095	1					
ANR	45158	PrimaryExpression	"""Method %s::%s() cannot be static"""		43095	0					
ANR	45159	Argument	ZSTR_VAL ( scope -> name )		43095	2					
ANR	45160	CallExpression	ZSTR_VAL ( scope -> name )		43095	0					
ANR	45161	Callee	ZSTR_VAL		43095	0					
ANR	45162	Identifier	ZSTR_VAL		43095	0					
ANR	45163	ArgumentList	scope -> name		43095	1					
ANR	45164	Argument	scope -> name		43095	0					
ANR	45165	PtrMemberAccess	scope -> name		43095	0					
ANR	45166	Identifier	scope		43095	0					
ANR	45167	Identifier	name		43095	1					
ANR	45168	Argument	ZSTR_VAL ( __debugInfo -> common . function_name )		43095	3					
ANR	45169	CallExpression	ZSTR_VAL ( __debugInfo -> common . function_name )		43095	0					
ANR	45170	Callee	ZSTR_VAL		43095	0					
ANR	45171	Identifier	ZSTR_VAL		43095	0					
ANR	45172	ArgumentList	__debugInfo -> common . function_name		43095	1					
ANR	45173	Argument	__debugInfo -> common . function_name		43095	0					
ANR	45174	MemberAccess	__debugInfo -> common . function_name		43095	0					
ANR	45175	PtrMemberAccess	__debugInfo -> common		43095	0					
ANR	45176	Identifier	__debugInfo		43095	0					
ANR	45177	Identifier	common		43095	1					
ANR	45178	Identifier	function_name		43095	1					
ANR	45179	IfStatement	if ( ctor && ctor -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE && ctor -> common . fn_flags & ZEND_ACC_CTOR )		43095	22					
ANR	45180	Condition	ctor && ctor -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE && ctor -> common . fn_flags & ZEND_ACC_CTOR	2402:6:70612:70708	43095	0	True				
ANR	45181	AndExpression	ctor && ctor -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE && ctor -> common . fn_flags & ZEND_ACC_CTOR		43095	0		&&			
ANR	45182	Identifier	ctor		43095	0					
ANR	45183	AndExpression	ctor -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE && ctor -> common . fn_flags & ZEND_ACC_CTOR		43095	1		&&			
ANR	45184	BitAndExpression	ctor -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE		43095	0		&			
ANR	45185	MemberAccess	ctor -> common . fn_flags		43095	0					
ANR	45186	PtrMemberAccess	ctor -> common		43095	0					
ANR	45187	Identifier	ctor		43095	0					
ANR	45188	Identifier	common		43095	1					
ANR	45189	Identifier	fn_flags		43095	1					
ANR	45190	Identifier	ZEND_ACC_HAS_RETURN_TYPE		43095	1					
ANR	45191	BitAndExpression	ctor -> common . fn_flags & ZEND_ACC_CTOR		43095	1		&			
ANR	45192	MemberAccess	ctor -> common . fn_flags		43095	0					
ANR	45193	PtrMemberAccess	ctor -> common		43095	0					
ANR	45194	Identifier	ctor		43095	0					
ANR	45195	Identifier	common		43095	1					
ANR	45196	Identifier	fn_flags		43095	1					
ANR	45197	Identifier	ZEND_ACC_CTOR		43095	1					
ANR	45198	CompoundStatement		289:105:11987:11987	43095	1					
ANR	45199	ExpressionStatement	"zend_error_noreturn ( E_CORE_ERROR , ""Constructor %s::%s() cannot declare a return type"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( ctor -> common . function_name ) )"	2403:3:70716:70863	43095	0	True				
ANR	45200	CallExpression	"zend_error_noreturn ( E_CORE_ERROR , ""Constructor %s::%s() cannot declare a return type"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( ctor -> common . function_name ) )"		43095	0					
ANR	45201	Callee	zend_error_noreturn		43095	0					
ANR	45202	Identifier	zend_error_noreturn		43095	0					
ANR	45203	ArgumentList	E_CORE_ERROR		43095	1					
ANR	45204	Argument	E_CORE_ERROR		43095	0					
ANR	45205	Identifier	E_CORE_ERROR		43095	0					
ANR	45206	Argument	"""Constructor %s::%s() cannot declare a return type"""		43095	1					
ANR	45207	PrimaryExpression	"""Constructor %s::%s() cannot declare a return type"""		43095	0					
ANR	45208	Argument	ZSTR_VAL ( scope -> name )		43095	2					
ANR	45209	CallExpression	ZSTR_VAL ( scope -> name )		43095	0					
ANR	45210	Callee	ZSTR_VAL		43095	0					
ANR	45211	Identifier	ZSTR_VAL		43095	0					
ANR	45212	ArgumentList	scope -> name		43095	1					
ANR	45213	Argument	scope -> name		43095	0					
ANR	45214	PtrMemberAccess	scope -> name		43095	0					
ANR	45215	Identifier	scope		43095	0					
ANR	45216	Identifier	name		43095	1					
ANR	45217	Argument	ZSTR_VAL ( ctor -> common . function_name )		43095	3					
ANR	45218	CallExpression	ZSTR_VAL ( ctor -> common . function_name )		43095	0					
ANR	45219	Callee	ZSTR_VAL		43095	0					
ANR	45220	Identifier	ZSTR_VAL		43095	0					
ANR	45221	ArgumentList	ctor -> common . function_name		43095	1					
ANR	45222	Argument	ctor -> common . function_name		43095	0					
ANR	45223	MemberAccess	ctor -> common . function_name		43095	0					
ANR	45224	PtrMemberAccess	ctor -> common		43095	0					
ANR	45225	Identifier	ctor		43095	0					
ANR	45226	Identifier	common		43095	1					
ANR	45227	Identifier	function_name		43095	1					
ANR	45228	IfStatement	if ( dtor && dtor -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE && dtor -> common . fn_flags & ZEND_ACC_DTOR )		43095	23					
ANR	45229	Condition	dtor && dtor -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE && dtor -> common . fn_flags & ZEND_ACC_DTOR	2406:6:70876:70972	43095	0	True				
ANR	45230	AndExpression	dtor && dtor -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE && dtor -> common . fn_flags & ZEND_ACC_DTOR		43095	0		&&			
ANR	45231	Identifier	dtor		43095	0					
ANR	45232	AndExpression	dtor -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE && dtor -> common . fn_flags & ZEND_ACC_DTOR		43095	1		&&			
ANR	45233	BitAndExpression	dtor -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE		43095	0		&			
ANR	45234	MemberAccess	dtor -> common . fn_flags		43095	0					
ANR	45235	PtrMemberAccess	dtor -> common		43095	0					
ANR	45236	Identifier	dtor		43095	0					
ANR	45237	Identifier	common		43095	1					
ANR	45238	Identifier	fn_flags		43095	1					
ANR	45239	Identifier	ZEND_ACC_HAS_RETURN_TYPE		43095	1					
ANR	45240	BitAndExpression	dtor -> common . fn_flags & ZEND_ACC_DTOR		43095	1		&			
ANR	45241	MemberAccess	dtor -> common . fn_flags		43095	0					
ANR	45242	PtrMemberAccess	dtor -> common		43095	0					
ANR	45243	Identifier	dtor		43095	0					
ANR	45244	Identifier	common		43095	1					
ANR	45245	Identifier	fn_flags		43095	1					
ANR	45246	Identifier	ZEND_ACC_DTOR		43095	1					
ANR	45247	CompoundStatement		293:105:12251:12251	43095	1					
ANR	45248	ExpressionStatement	"zend_error_noreturn ( E_CORE_ERROR , ""Destructor %s::%s() cannot declare a return type"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( dtor -> common . function_name ) )"	2407:3:70980:71126	43095	0	True				
ANR	45249	CallExpression	"zend_error_noreturn ( E_CORE_ERROR , ""Destructor %s::%s() cannot declare a return type"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( dtor -> common . function_name ) )"		43095	0					
ANR	45250	Callee	zend_error_noreturn		43095	0					
ANR	45251	Identifier	zend_error_noreturn		43095	0					
ANR	45252	ArgumentList	E_CORE_ERROR		43095	1					
ANR	45253	Argument	E_CORE_ERROR		43095	0					
ANR	45254	Identifier	E_CORE_ERROR		43095	0					
ANR	45255	Argument	"""Destructor %s::%s() cannot declare a return type"""		43095	1					
ANR	45256	PrimaryExpression	"""Destructor %s::%s() cannot declare a return type"""		43095	0					
ANR	45257	Argument	ZSTR_VAL ( scope -> name )		43095	2					
ANR	45258	CallExpression	ZSTR_VAL ( scope -> name )		43095	0					
ANR	45259	Callee	ZSTR_VAL		43095	0					
ANR	45260	Identifier	ZSTR_VAL		43095	0					
ANR	45261	ArgumentList	scope -> name		43095	1					
ANR	45262	Argument	scope -> name		43095	0					
ANR	45263	PtrMemberAccess	scope -> name		43095	0					
ANR	45264	Identifier	scope		43095	0					
ANR	45265	Identifier	name		43095	1					
ANR	45266	Argument	ZSTR_VAL ( dtor -> common . function_name )		43095	3					
ANR	45267	CallExpression	ZSTR_VAL ( dtor -> common . function_name )		43095	0					
ANR	45268	Callee	ZSTR_VAL		43095	0					
ANR	45269	Identifier	ZSTR_VAL		43095	0					
ANR	45270	ArgumentList	dtor -> common . function_name		43095	1					
ANR	45271	Argument	dtor -> common . function_name		43095	0					
ANR	45272	MemberAccess	dtor -> common . function_name		43095	0					
ANR	45273	PtrMemberAccess	dtor -> common		43095	0					
ANR	45274	Identifier	dtor		43095	0					
ANR	45275	Identifier	common		43095	1					
ANR	45276	Identifier	function_name		43095	1					
ANR	45277	IfStatement	if ( clone && clone -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE && dtor -> common . fn_flags & ZEND_ACC_DTOR )		43095	24					
ANR	45278	Condition	clone && clone -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE && dtor -> common . fn_flags & ZEND_ACC_DTOR	2410:6:71139:71237	43095	0	True				
ANR	45279	AndExpression	clone && clone -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE && dtor -> common . fn_flags & ZEND_ACC_DTOR		43095	0		&&			
ANR	45280	Identifier	clone		43095	0					
ANR	45281	AndExpression	clone -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE && dtor -> common . fn_flags & ZEND_ACC_DTOR		43095	1		&&			
ANR	45282	BitAndExpression	clone -> common . fn_flags & ZEND_ACC_HAS_RETURN_TYPE		43095	0		&			
ANR	45283	MemberAccess	clone -> common . fn_flags		43095	0					
ANR	45284	PtrMemberAccess	clone -> common		43095	0					
ANR	45285	Identifier	clone		43095	0					
ANR	45286	Identifier	common		43095	1					
ANR	45287	Identifier	fn_flags		43095	1					
ANR	45288	Identifier	ZEND_ACC_HAS_RETURN_TYPE		43095	1					
ANR	45289	BitAndExpression	dtor -> common . fn_flags & ZEND_ACC_DTOR		43095	1		&			
ANR	45290	MemberAccess	dtor -> common . fn_flags		43095	0					
ANR	45291	PtrMemberAccess	dtor -> common		43095	0					
ANR	45292	Identifier	dtor		43095	0					
ANR	45293	Identifier	common		43095	1					
ANR	45294	Identifier	fn_flags		43095	1					
ANR	45295	Identifier	ZEND_ACC_DTOR		43095	1					
ANR	45296	CompoundStatement		297:107:12516:12516	43095	1					
ANR	45297	ExpressionStatement	"zend_error_noreturn ( E_CORE_ERROR , ""%s::%s() cannot declare a return type"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( clone -> common . function_name ) )"	2411:3:71245:71381	43095	0	True				
ANR	45298	CallExpression	"zend_error_noreturn ( E_CORE_ERROR , ""%s::%s() cannot declare a return type"" , ZSTR_VAL ( scope -> name ) , ZSTR_VAL ( clone -> common . function_name ) )"		43095	0					
ANR	45299	Callee	zend_error_noreturn		43095	0					
ANR	45300	Identifier	zend_error_noreturn		43095	0					
ANR	45301	ArgumentList	E_CORE_ERROR		43095	1					
ANR	45302	Argument	E_CORE_ERROR		43095	0					
ANR	45303	Identifier	E_CORE_ERROR		43095	0					
ANR	45304	Argument	"""%s::%s() cannot declare a return type"""		43095	1					
ANR	45305	PrimaryExpression	"""%s::%s() cannot declare a return type"""		43095	0					
ANR	45306	Argument	ZSTR_VAL ( scope -> name )		43095	2					
ANR	45307	CallExpression	ZSTR_VAL ( scope -> name )		43095	0					
ANR	45308	Callee	ZSTR_VAL		43095	0					
ANR	45309	Identifier	ZSTR_VAL		43095	0					
ANR	45310	ArgumentList	scope -> name		43095	1					
ANR	45311	Argument	scope -> name		43095	0					
ANR	45312	PtrMemberAccess	scope -> name		43095	0					
ANR	45313	Identifier	scope		43095	0					
ANR	45314	Identifier	name		43095	1					
ANR	45315	Argument	ZSTR_VAL ( clone -> common . function_name )		43095	3					
ANR	45316	CallExpression	ZSTR_VAL ( clone -> common . function_name )		43095	0					
ANR	45317	Callee	ZSTR_VAL		43095	0					
ANR	45318	Identifier	ZSTR_VAL		43095	0					
ANR	45319	ArgumentList	clone -> common . function_name		43095	1					
ANR	45320	Argument	clone -> common . function_name		43095	0					
ANR	45321	MemberAccess	clone -> common . function_name		43095	0					
ANR	45322	PtrMemberAccess	clone -> common		43095	0					
ANR	45323	Identifier	clone		43095	0					
ANR	45324	Identifier	common		43095	1					
ANR	45325	Identifier	function_name		43095	1					
ANR	45326	ExpressionStatement	efree ( ( char * ) lc_class_name )	2413:2:71389:71416	43095	25	True				
ANR	45327	CallExpression	efree ( ( char * ) lc_class_name )		43095	0					
ANR	45328	Callee	efree		43095	0					
ANR	45329	Identifier	efree		43095	0					
ANR	45330	ArgumentList	( char * ) lc_class_name		43095	1					
ANR	45331	Argument	( char * ) lc_class_name		43095	0					
ANR	45332	CastExpression	( char * ) lc_class_name		43095	0					
ANR	45333	CastTarget	char *		43095	0					
ANR	45334	Identifier	lc_class_name		43095	1					
ANR	45335	ReturnStatement	return SUCCESS ;	2415:1:71422:71436	43095	20	True				
ANR	45336	Identifier	SUCCESS		43095	0					
ANR	45337	ReturnType	ZEND_API int		43095	1					
ANR	45338	Identifier	zend_register_functions		43095	2					
ANR	45339	ParameterList	"zend_class_entry * scope , const zend_function_entry * functions , HashTable * function_table , int type"		43095	3					
ANR	45340	Parameter	zend_class_entry * scope	2113:37:58613:58635	43095	0	True				
ANR	45341	ParameterType	zend_class_entry *		43095	0					
ANR	45342	Identifier	scope		43095	1					
ANR	45343	Parameter	const zend_function_entry * functions	2113:62:58638:58673	43095	1	True				
ANR	45344	ParameterType	const zend_function_entry *		43095	0					
ANR	45345	Identifier	functions		43095	1					
ANR	45346	Parameter	HashTable * function_table	2113:100:58676:58700	43095	2	True				
ANR	45347	ParameterType	HashTable *		43095	0					
ANR	45348	Identifier	function_table		43095	1					
ANR	45349	Parameter	int type	2113:127:58703:58710	43095	3	True				
ANR	45350	ParameterType	int		43095	0					
ANR	45351	Identifier	type		43095	1					
ANR	45352	CFGEntryNode	ENTRY		43095		True				
ANR	45353	CFGExitNode	EXIT		43095		True				
ANR	45354	Symbol	zend_string_equals_literal		43095						
ANR	45355	Symbol	* reg_function		43095						
ANR	45356	Symbol	functions		43095						
ANR	45357	Symbol	scope -> ce_flags		43095						
ANR	45358	Symbol	ZEND_ACC_USE_GUARDS		43095						
ANR	45359	Symbol	__call -> common . fn_flags		43095						
ANR	45360	Symbol	type		43095						
ANR	45361	Symbol	__set -> common		43095						
ANR	45362	Symbol	__get		43095						
ANR	45363	Symbol	zend_string_init		43095						
ANR	45364	Symbol	ZEND_ACC_IMPLICIT_ABSTRACT_CLASS		43095						
ANR	45365	Symbol	__isset -> common		43095						
ANR	45366	Symbol	ZEND_CLONE_FUNC_NAME		43095						
ANR	45367	Symbol	internal_function -> fn_flags		43095						
ANR	45368	Symbol	ptr -> flags		43095						
ANR	45369	Symbol	unload		43095						
ANR	45370	Symbol	ZEND_ACC_INTERFACE		43095						
ANR	45371	Symbol	__callstatic		43095						
ANR	45372	Symbol	ZEND_MAX_RESERVED_RESOURCES		43095						
ANR	45373	Symbol	ZEND_ACC_VARIADIC		43095						
ANR	45374	Symbol	ZEND_ACC_CTOR		43095						
ANR	45375	Symbol	* dtor		43095						
ANR	45376	Symbol	__unset -> common		43095						
ANR	45377	Symbol	scope -> constructor		43095						
ANR	45378	Symbol	* __debugInfo		43095						
ANR	45379	Symbol	__callstatic -> common . fn_flags		43095						
ANR	45380	Symbol	fname_len		43095						
ANR	45381	Symbol	ctor		43095						
ANR	45382	Symbol	* scope		43095						
ANR	45383	Symbol	clone -> common . function_name		43095						
ANR	45384	Symbol	function_table		43095						
ANR	45385	Symbol	lc_class_name		43095						
ANR	45386	Symbol	__tostring -> common . fn_flags		43095						
ANR	45387	Symbol	* * ptr		43095						
ANR	45388	Symbol	__unset -> common . function_name		43095						
ANR	45389	Symbol	scope -> __isset		43095						
ANR	45390	Symbol	E_CORE_WARNING		43095						
ANR	45391	Symbol	scope -> __debugInfo		43095						
ANR	45392	Symbol	ptr -> handler		43095						
ANR	45393	Symbol	ZEND_ACC_DTOR		43095						
ANR	45394	Symbol	ptr -> arg_info [ ptr -> num_args ] . is_variadic		43095						
ANR	45395	Symbol	~ZEND_ACC_ALLOW_STATIC		43095						
ANR	45396	Symbol	target_function_table		43095						
ANR	45397	Symbol	current_module		43095						
ANR	45398	Symbol	ZEND_GET_FUNC_NAME		43095						
ANR	45399	Symbol	ZEND_DEBUGINFO_FUNC_NAME		43095						
ANR	45400	Symbol	* ptr -> num_args		43095						
ANR	45401	Symbol	internal_function -> scope		43095						
ANR	45402	Symbol	E_WARNING		43095						
ANR	45403	Symbol	__set -> common . function_name		43095						
ANR	45404	Symbol	scope -> destructor		43095						
ANR	45405	Symbol	__get -> common . fn_flags		43095						
ANR	45406	Symbol	& function		43095						
ANR	45407	Symbol	internal_function		43095						
ANR	45408	Symbol	info -> required_num_args		43095						
ANR	45409	Symbol	ctor -> common . function_name		43095						
ANR	45410	Symbol	dtor		43095						
ANR	45411	Symbol	zend_memrchr		43095						
ANR	45412	Symbol	__debugInfo -> common . function_name		43095						
ANR	45413	Symbol	malloc		43095						
ANR	45414	Symbol	SUCCESS		43095						
ANR	45415	Symbol	CG		43095						
ANR	45416	Symbol	reg_function -> common . num_args		43095						
ANR	45417	Symbol	MODULE_PERSISTENT		43095						
ANR	45418	Symbol	dtor -> common		43095						
ANR	45419	Symbol	i		43095						
ANR	45420	Symbol	reg_function -> common . arg_info [ i ] . class_name		43095						
ANR	45421	Symbol	FAILURE		43095						
ANR	45422	Symbol	__callstatic -> common		43095						
ANR	45423	Symbol	ctor -> common . fn_flags		43095						
ANR	45424	Symbol	ZEND_ACC_ABSTRACT		43095						
ANR	45425	Symbol	__unset		43095						
ANR	45426	Symbol	* reg_function -> common		43095						
ANR	45427	Symbol	scope -> __unset		43095						
ANR	45428	Symbol	__debugInfo -> common . fn_flags		43095						
ANR	45429	Symbol	__tostring		43095						
ANR	45430	Symbol	* info		43095						
ANR	45431	Symbol	class_name_len		43095						
ANR	45432	Symbol	IS_OBJECT		43095						
ANR	45433	Symbol	internal_function -> prototype		43095						
ANR	45434	Symbol	internal_function -> required_num_args		43095						
ANR	45435	Symbol	ZEND_CALLSTATIC_FUNC_NAME		43095						
ANR	45436	Symbol	ZEND_CONSTRUCTOR_FUNC_NAME		43095						
ANR	45437	Symbol	__debugInfo		43095						
ANR	45438	Symbol	zend_hash_exists		43095						
ANR	45439	Symbol	ZEND_INTERNAL_FUNCTION		43095						
ANR	45440	Symbol	strlen		43095						
ANR	45441	Symbol	__isset		43095						
ANR	45442	Symbol	internal_function -> type		43095						
ANR	45443	Symbol	memcmp		43095						
ANR	45444	Symbol	ZEND_ACC_DEPRECATED		43095						
ANR	45445	Symbol	__tostring -> common . function_name		43095						
ANR	45446	Symbol	function		43095						
ANR	45447	Symbol	error_type		43095						
ANR	45448	Symbol	* ptr		43095						
ANR	45449	Symbol	reg_function -> common . arg_info [ i ] . type_hint		43095						
ANR	45450	Symbol	scope -> __callstatic		43095						
ANR	45451	Symbol	ZEND_ISSET_FUNC_NAME		43095						
ANR	45452	Symbol	strcasecmp		43095						
ANR	45453	Symbol	scope -> __tostring		43095						
ANR	45454	Symbol	__get -> common . function_name		43095						
ANR	45455	Symbol	__unset -> common . fn_flags		43095						
ANR	45456	Symbol	info		43095						
ANR	45457	Symbol	clone -> common . fn_flags		43095						
ANR	45458	Symbol	EG		43095						
ANR	45459	Symbol	zend_string_alloc		43095						
ANR	45460	Symbol	NULL		43095						
ANR	45461	Symbol	count		43095						
ANR	45462	Symbol	reg_function -> common		43095						
ANR	45463	Symbol	info -> return_reference		43095						
ANR	45464	Symbol	ptr -> num_args		43095						
ANR	45465	Symbol	ZEND_ACC_CLONE		43095						
ANR	45466	Symbol	__call -> common . function_name		43095						
ANR	45467	Symbol	* __callstatic		43095						
ANR	45468	Symbol	__debugInfo -> common		43095						
ANR	45469	Symbol	reg_function		43095						
ANR	45470	Symbol	internal_function -> function_name		43095						
ANR	45471	Symbol	clone -> common		43095						
ANR	45472	Symbol	lowercase_name		43095						
ANR	45473	Symbol	* * reg_function		43095						
ANR	45474	Symbol	ZEND_DESTRUCTOR_FUNC_NAME		43095						
ANR	45475	Symbol	ZEND_TOSTRING_FUNC_NAME		43095						
ANR	45476	Symbol	__call		43095						
ANR	45477	Symbol	zend_hash_add_ptr		43095						
ANR	45478	Symbol	ZEND_UNSET_FUNC_NAME		43095						
ANR	45479	Symbol	dtor -> common . fn_flags		43095						
ANR	45480	Symbol	* __unset		43095						
ANR	45481	Symbol	* __set		43095						
ANR	45482	Symbol	ZEND_ACC_PPP_MASK		43095						
ANR	45483	Symbol	internal_function -> arg_info		43095						
ANR	45484	Symbol	ZEND_ACC_PUBLIC		43095						
ANR	45485	Symbol	* __get		43095						
ANR	45486	Symbol	ptr -> arg_info		43095						
ANR	45487	Symbol	* __call		43095						
ANR	45488	Symbol	* __isset		43095						
ANR	45489	Symbol	* reg_function -> common . arg_info		43095						
ANR	45490	Symbol	ZEND_CALL_FUNC_NAME		43095						
ANR	45491	Symbol	ZEND_ACC_HAS_TYPE_HINTS		43095						
ANR	45492	Symbol	__callstatic -> common . function_name		43095						
ANR	45493	Symbol	scope -> __get		43095						
ANR	45494	Symbol	E_CORE_ERROR		43095						
ANR	45495	Symbol	scope		43095						
ANR	45496	Symbol	* ctor		43095						
ANR	45497	Symbol	* internal_function		43095						
ANR	45498	Symbol	ZEND_ACC_STATIC		43095						
ANR	45499	Symbol	__tostring -> common		43095						
ANR	45500	Symbol	scope -> __set		43095						
ANR	45501	Symbol	ZEND_SET_FUNC_NAME		43095						
ANR	45502	Symbol	reg_function -> common . arg_info		43095						
ANR	45503	Symbol	zend_str_tolower_dup		43095						
ANR	45504	Symbol	internal_function -> num_args		43095						
ANR	45505	Symbol	__set -> common . fn_flags		43095						
ANR	45506	Symbol	* clone		43095						
ANR	45507	Symbol	scope -> __call		43095						
ANR	45508	Symbol	info -> type_hint		43095						
ANR	45509	Symbol	__set		43095						
ANR	45510	Symbol	__isset -> common . function_name		43095						
ANR	45511	Symbol	ZEND_ACC_HAS_RETURN_TYPE		43095						
ANR	45512	Symbol	* ptr -> arg_info		43095						
ANR	45513	Symbol	ctor -> common		43095						
ANR	45514	Symbol	internal_function -> reserved		43095						
ANR	45515	Symbol	ptr -> fname		43095						
ANR	45516	Symbol	ZEND_ACC_EXPLICIT_ABSTRACT_CLASS		43095						
ANR	45517	Symbol	dtor -> common . function_name		43095						
ANR	45518	Symbol	info -> class_name		43095						
ANR	45519	Symbol	ptr		43095						
ANR	45520	Symbol	ZSTR_VAL		43095						
ANR	45521	Symbol	* __tostring		43095						
ANR	45522	Symbol	__call -> common		43095						
ANR	45523	Symbol	zend_new_interned_string		43095						
ANR	45524	Symbol	* i		43095						
ANR	45525	Symbol	__isset -> common . fn_flags		43095						
ANR	45526	Symbol	scope -> name		43095						
ANR	45527	Symbol	clone		43095						
ANR	45528	Symbol	ZSTR_LEN		43095						
ANR	45529	Symbol	ZEND_ACC_RETURN_REFERENCE		43095						
ANR	45530	Symbol	reg_function -> common . fn_flags		43095						
ANR	45531	Symbol	scope -> clone		43095						
ANR	45532	Symbol	internal_function -> handler		43095						
ANR	45533	Symbol	internal_function -> module		43095						
ANR	45534	Symbol	__get -> common		43095						
ANR	45535	Function	zend_unregister_functions	2422:0:71540:72243							
ANR	45536	FunctionDef	"zend_unregister_functions (const zend_function_entry * functions , int count , HashTable * function_table)"		45535	0					
ANR	45537	CompoundStatement		2423:0:71666:72243	45535	0					
ANR	45538	IdentifierDeclStatement	const zend_function_entry * ptr = functions ;	2424:1:71669:71711	45535	0	True				
ANR	45539	IdentifierDecl	* ptr = functions		45535	0					
ANR	45540	IdentifierDeclType	const zend_function_entry *		45535	0					
ANR	45541	Identifier	ptr		45535	1					
ANR	45542	AssignmentExpression	* ptr = functions		45535	2		=			
ANR	45543	Identifier	functions		45535	0					
ANR	45544	Identifier	functions		45535	1					
ANR	45545	IdentifierDeclStatement	int i = 0 ;	2425:1:71714:71721	45535	1	True				
ANR	45546	IdentifierDecl	i = 0		45535	0					
ANR	45547	IdentifierDeclType	int		45535	0					
ANR	45548	Identifier	i		45535	1					
ANR	45549	AssignmentExpression	i = 0		45535	2		=			
ANR	45550	Identifier	i		45535	0					
ANR	45551	PrimaryExpression	0		45535	1					
ANR	45552	IdentifierDeclStatement	HashTable * target_function_table = function_table ;	2426:1:71724:71773	45535	2	True				
ANR	45553	IdentifierDecl	* target_function_table = function_table		45535	0					
ANR	45554	IdentifierDeclType	HashTable *		45535	0					
ANR	45555	Identifier	target_function_table		45535	1					
ANR	45556	AssignmentExpression	* target_function_table = function_table		45535	2		=			
ANR	45557	Identifier	function_table		45535	0					
ANR	45558	Identifier	function_table		45535	1					
ANR	45559	IdentifierDeclStatement	zend_string * lowercase_name ;	2427:1:71776:71803	45535	3	True				
ANR	45560	IdentifierDecl	* lowercase_name		45535	0					
ANR	45561	IdentifierDeclType	zend_string *		45535	0					
ANR	45562	Identifier	lowercase_name		45535	1					
ANR	45563	IdentifierDeclStatement	size_t fname_len ;	2428:1:71806:71822	45535	4	True				
ANR	45564	IdentifierDecl	fname_len		45535	0					
ANR	45565	IdentifierDeclType	size_t		45535	0					
ANR	45566	Identifier	fname_len		45535	1					
ANR	45567	IfStatement	if ( ! target_function_table )		45535	5					
ANR	45568	Condition	! target_function_table	2430:5:71830:71851	45535	0	True				
ANR	45569	UnaryOperationExpression	! target_function_table		45535	0					
ANR	45570	UnaryOperator	!		45535	0					
ANR	45571	Identifier	target_function_table		45535	1					
ANR	45572	CompoundStatement		8:29:187:187	45535	1					
ANR	45573	ExpressionStatement	target_function_table = CG ( function_table )	2431:2:71858:71900	45535	0	True				
ANR	45574	AssignmentExpression	target_function_table = CG ( function_table )		45535	0		=			
ANR	45575	Identifier	target_function_table		45535	0					
ANR	45576	CallExpression	CG ( function_table )		45535	1					
ANR	45577	Callee	CG		45535	0					
ANR	45578	Identifier	CG		45535	0					
ANR	45579	ArgumentList	function_table		45535	1					
ANR	45580	Argument	function_table		45535	0					
ANR	45581	Identifier	function_table		45535	0					
ANR	45582	WhileStatement	while ( ptr -> fname )		45535	6					
ANR	45583	Condition	ptr -> fname	2433:8:71913:71922	45535	0	True				
ANR	45584	PtrMemberAccess	ptr -> fname		45535	0					
ANR	45585	Identifier	ptr		45535	0					
ANR	45586	Identifier	fname		45535	1					
ANR	45587	CompoundStatement		11:20:258:258	45535	1					
ANR	45588	IfStatement	if ( count != - 1 && i >= count )		45535	0					
ANR	45589	Condition	count != - 1 && i >= count	2434:6:71933:71953	45535	0	True				
ANR	45590	AndExpression	count != - 1 && i >= count		45535	0		&&			
ANR	45591	EqualityExpression	count != - 1		45535	0		!=			
ANR	45592	Identifier	count		45535	0					
ANR	45593	UnaryOperationExpression	- 1		45535	1					
ANR	45594	UnaryOperator	-		45535	0					
ANR	45595	PrimaryExpression	1		45535	1					
ANR	45596	RelationalExpression	i >= count		45535	1		>=			
ANR	45597	Identifier	i		45535	0					
ANR	45598	Identifier	count		45535	1					
ANR	45599	CompoundStatement		12:29:289:289	45535	1					
ANR	45600	BreakStatement	break ;	2435:3:71961:71966	45535	0	True				
ANR	45601	ExpressionStatement	fname_len = strlen ( ptr -> fname )	2437:2:71974:72004	45535	1	True				
ANR	45602	AssignmentExpression	fname_len = strlen ( ptr -> fname )		45535	0		=			
ANR	45603	Identifier	fname_len		45535	0					
ANR	45604	CallExpression	strlen ( ptr -> fname )		45535	1					
ANR	45605	Callee	strlen		45535	0					
ANR	45606	Identifier	strlen		45535	0					
ANR	45607	ArgumentList	ptr -> fname		45535	1					
ANR	45608	Argument	ptr -> fname		45535	0					
ANR	45609	PtrMemberAccess	ptr -> fname		45535	0					
ANR	45610	Identifier	ptr		45535	0					
ANR	45611	Identifier	fname		45535	1					
ANR	45612	ExpressionStatement	"lowercase_name = zend_string_alloc ( fname_len , 0 )"	2438:2:72008:72056	45535	2	True				
ANR	45613	AssignmentExpression	"lowercase_name = zend_string_alloc ( fname_len , 0 )"		45535	0		=			
ANR	45614	Identifier	lowercase_name		45535	0					
ANR	45615	CallExpression	"zend_string_alloc ( fname_len , 0 )"		45535	1					
ANR	45616	Callee	zend_string_alloc		45535	0					
ANR	45617	Identifier	zend_string_alloc		45535	0					
ANR	45618	ArgumentList	fname_len		45535	1					
ANR	45619	Argument	fname_len		45535	0					
ANR	45620	Identifier	fname_len		45535	0					
ANR	45621	Argument	0		45535	1					
ANR	45622	PrimaryExpression	0		45535	0					
ANR	45623	ExpressionStatement	"zend_str_tolower_copy ( ZSTR_VAL ( lowercase_name ) , ptr -> fname , fname_len )"	2439:2:72060:72130	45535	3	True				
ANR	45624	CallExpression	"zend_str_tolower_copy ( ZSTR_VAL ( lowercase_name ) , ptr -> fname , fname_len )"		45535	0					
ANR	45625	Callee	zend_str_tolower_copy		45535	0					
ANR	45626	Identifier	zend_str_tolower_copy		45535	0					
ANR	45627	ArgumentList	ZSTR_VAL ( lowercase_name )		45535	1					
ANR	45628	Argument	ZSTR_VAL ( lowercase_name )		45535	0					
ANR	45629	CallExpression	ZSTR_VAL ( lowercase_name )		45535	0					
ANR	45630	Callee	ZSTR_VAL		45535	0					
ANR	45631	Identifier	ZSTR_VAL		45535	0					
ANR	45632	ArgumentList	lowercase_name		45535	1					
ANR	45633	Argument	lowercase_name		45535	0					
ANR	45634	Identifier	lowercase_name		45535	0					
ANR	45635	Argument	ptr -> fname		45535	1					
ANR	45636	PtrMemberAccess	ptr -> fname		45535	0					
ANR	45637	Identifier	ptr		45535	0					
ANR	45638	Identifier	fname		45535	1					
ANR	45639	Argument	fname_len		45535	2					
ANR	45640	Identifier	fname_len		45535	0					
ANR	45641	ExpressionStatement	"zend_hash_del ( target_function_table , lowercase_name )"	2440:2:72134:72186	45535	4	True				
ANR	45642	CallExpression	"zend_hash_del ( target_function_table , lowercase_name )"		45535	0					
ANR	45643	Callee	zend_hash_del		45535	0					
ANR	45644	Identifier	zend_hash_del		45535	0					
ANR	45645	ArgumentList	target_function_table		45535	1					
ANR	45646	Argument	target_function_table		45535	0					
ANR	45647	Identifier	target_function_table		45535	0					
ANR	45648	Argument	lowercase_name		45535	1					
ANR	45649	Identifier	lowercase_name		45535	0					
ANR	45650	ExpressionStatement	zend_string_free ( lowercase_name )	2441:2:72190:72222	45535	5	True				
ANR	45651	CallExpression	zend_string_free ( lowercase_name )		45535	0					
ANR	45652	Callee	zend_string_free		45535	0					
ANR	45653	Identifier	zend_string_free		45535	0					
ANR	45654	ArgumentList	lowercase_name		45535	1					
ANR	45655	Argument	lowercase_name		45535	0					
ANR	45656	Identifier	lowercase_name		45535	0					
ANR	45657	ExpressionStatement	ptr ++	2442:2:72226:72231	45535	6	True				
ANR	45658	PostIncDecOperationExpression	ptr ++		45535	0					
ANR	45659	Identifier	ptr		45535	0					
ANR	45660	IncDec	++		45535	1					
ANR	45661	ExpressionStatement	i ++	2443:2:72235:72238	45535	7	True				
ANR	45662	PostIncDecOperationExpression	i ++		45535	0					
ANR	45663	Identifier	i		45535	0					
ANR	45664	IncDec	++		45535	1					
ANR	45665	ReturnType	ZEND_API void		45535	1					
ANR	45666	Identifier	zend_unregister_functions		45535	2					
ANR	45667	ParameterList	"const zend_function_entry * functions , int count , HashTable * function_table"		45535	3					
ANR	45668	Parameter	const zend_function_entry * functions	2422:40:71580:71615	45535	0	True				
ANR	45669	ParameterType	const zend_function_entry *		45535	0					
ANR	45670	Identifier	functions		45535	1					
ANR	45671	Parameter	int count	2422:78:71618:71626	45535	1	True				
ANR	45672	ParameterType	int		45535	0					
ANR	45673	Identifier	count		45535	1					
ANR	45674	Parameter	HashTable * function_table	2422:89:71629:71653	45535	2	True				
ANR	45675	ParameterType	HashTable *		45535	0					
ANR	45676	Identifier	function_table		45535	1					
ANR	45677	CFGEntryNode	ENTRY		45535		True				
ANR	45678	CFGExitNode	EXIT		45535		True				
ANR	45679	Symbol	zend_string_alloc		45535						
ANR	45680	Symbol	functions		45535						
ANR	45681	Symbol	CG		45535						
ANR	45682	Symbol	count		45535						
ANR	45683	Symbol	i		45535						
ANR	45684	Symbol	ptr -> fname		45535						
ANR	45685	Symbol	target_function_table		45535						
ANR	45686	Symbol	ptr		45535						
ANR	45687	Symbol	ZSTR_VAL		45535						
ANR	45688	Symbol	strlen		45535						
ANR	45689	Symbol	* ptr		45535						
ANR	45690	Symbol	lowercase_name		45535						
ANR	45691	Symbol	fname_len		45535						
ANR	45692	Symbol	function_table		45535						
ANR	45693	Function	zend_startup_module	2448:0:72256:72476							
ANR	45694	FunctionDef	zend_startup_module (zend_module_entry * module)		45693	0					
ANR	45695	CompoundStatement		2449:0:72326:72476	45693	0					
ANR	45696	IfStatement	if ( ( module = zend_register_internal_module ( module ) ) != NULL && zend_startup_module_ex ( module ) == SUCCESS )		45693	0					
ANR	45697	Condition	( module = zend_register_internal_module ( module ) ) != NULL && zend_startup_module_ex ( module ) == SUCCESS	2450:5:72333:72433	45693	0	True				
ANR	45698	AndExpression	( module = zend_register_internal_module ( module ) ) != NULL && zend_startup_module_ex ( module ) == SUCCESS		45693	0		&&			
ANR	45699	EqualityExpression	( module = zend_register_internal_module ( module ) ) != NULL		45693	0		!=			
ANR	45700	AssignmentExpression	module = zend_register_internal_module ( module )		45693	0		=			
ANR	45701	Identifier	module		45693	0					
ANR	45702	CallExpression	zend_register_internal_module ( module )		45693	1					
ANR	45703	Callee	zend_register_internal_module		45693	0					
ANR	45704	Identifier	zend_register_internal_module		45693	0					
ANR	45705	ArgumentList	module		45693	1					
ANR	45706	Argument	module		45693	0					
ANR	45707	Identifier	module		45693	0					
ANR	45708	Identifier	NULL		45693	1					
ANR	45709	EqualityExpression	zend_startup_module_ex ( module ) == SUCCESS		45693	1		==			
ANR	45710	CallExpression	zend_startup_module_ex ( module )		45693	0					
ANR	45711	Callee	zend_startup_module_ex		45693	0					
ANR	45712	Identifier	zend_startup_module_ex		45693	0					
ANR	45713	ArgumentList	module		45693	1					
ANR	45714	Argument	module		45693	0					
ANR	45715	Identifier	module		45693	0					
ANR	45716	Identifier	SUCCESS		45693	1					
ANR	45717	CompoundStatement		2:108:109:109	45693	1					
ANR	45718	ReturnStatement	return SUCCESS ;	2451:2:72440:72454	45693	0	True				
ANR	45719	Identifier	SUCCESS		45693	0					
ANR	45720	ReturnStatement	return FAILURE ;	2453:1:72460:72474	45693	1	True				
ANR	45721	Identifier	FAILURE		45693	0					
ANR	45722	ReturnType	ZEND_API int		45693	1					
ANR	45723	Identifier	zend_startup_module		45693	2					
ANR	45724	ParameterList	zend_module_entry * module		45693	3					
ANR	45725	Parameter	zend_module_entry * module	2448:33:72289:72313	45693	0	True				
ANR	45726	ParameterType	zend_module_entry *		45693	0					
ANR	45727	Identifier	module		45693	1					
ANR	45728	CFGEntryNode	ENTRY		45693		True				
ANR	45729	CFGExitNode	EXIT		45693		True				
ANR	45730	Symbol	SUCCESS		45693						
ANR	45731	Symbol	NULL		45693						
ANR	45732	Symbol	module		45693						
ANR	45733	Symbol	zend_register_internal_module		45693						
ANR	45734	Symbol	FAILURE		45693						
ANR	45735	Symbol	zend_startup_module_ex		45693						
ANR	45736	Function	zend_get_module_started	2457:0:72489:72742							
ANR	45737	FunctionDef	zend_get_module_started (const char * module_name)		45736	0					
ANR	45738	CompoundStatement		2458:0:72561:72742	45736	0					
ANR	45739	IdentifierDeclStatement	zend_module_entry * module ;	2459:1:72564:72589	45736	0	True				
ANR	45740	IdentifierDecl	* module		45736	0					
ANR	45741	IdentifierDeclType	zend_module_entry *		45736	0					
ANR	45742	Identifier	module		45736	1					
ANR	45743	ExpressionStatement	"module = zend_hash_str_find_ptr ( & module_registry , module_name , strlen ( module_name ) )"	2461:1:72593:72676	45736	1	True				
ANR	45744	AssignmentExpression	"module = zend_hash_str_find_ptr ( & module_registry , module_name , strlen ( module_name ) )"		45736	0		=			
ANR	45745	Identifier	module		45736	0					
ANR	45746	CallExpression	"zend_hash_str_find_ptr ( & module_registry , module_name , strlen ( module_name ) )"		45736	1					
ANR	45747	Callee	zend_hash_str_find_ptr		45736	0					
ANR	45748	Identifier	zend_hash_str_find_ptr		45736	0					
ANR	45749	ArgumentList	& module_registry		45736	1					
ANR	45750	Argument	& module_registry		45736	0					
ANR	45751	UnaryOperationExpression	& module_registry		45736	0					
ANR	45752	UnaryOperator	&		45736	0					
ANR	45753	Identifier	module_registry		45736	1					
ANR	45754	Argument	module_name		45736	1					
ANR	45755	Identifier	module_name		45736	0					
ANR	45756	Argument	strlen ( module_name )		45736	2					
ANR	45757	CallExpression	strlen ( module_name )		45736	0					
ANR	45758	Callee	strlen		45736	0					
ANR	45759	Identifier	strlen		45736	0					
ANR	45760	ArgumentList	module_name		45736	1					
ANR	45761	Argument	module_name		45736	0					
ANR	45762	Identifier	module_name		45736	0					
ANR	45763	ReturnStatement	return ( module && module -> module_started ) ? SUCCESS : FAILURE ;	2462:1:72679:72740	45736	2	True				
ANR	45764	ConditionalExpression	( module && module -> module_started ) ? SUCCESS : FAILURE		45736	0					
ANR	45765	Condition	module && module -> module_started		45736	0					
ANR	45766	AndExpression	module && module -> module_started		45736	0		&&			
ANR	45767	Identifier	module		45736	0					
ANR	45768	PtrMemberAccess	module -> module_started		45736	1					
ANR	45769	Identifier	module		45736	0					
ANR	45770	Identifier	module_started		45736	1					
ANR	45771	Identifier	SUCCESS		45736	1					
ANR	45772	Identifier	FAILURE		45736	2					
ANR	45773	ReturnType	ZEND_API int		45736	1					
ANR	45774	Identifier	zend_get_module_started		45736	2					
ANR	45775	ParameterList	const char * module_name		45736	3					
ANR	45776	Parameter	const char * module_name	2457:37:72526:72548	45736	0	True				
ANR	45777	ParameterType	const char *		45736	0					
ANR	45778	Identifier	module_name		45736	1					
ANR	45779	CFGEntryNode	ENTRY		45736		True				
ANR	45780	CFGExitNode	EXIT		45736		True				
ANR	45781	Symbol	strlen		45736						
ANR	45782	Symbol	module -> module_started		45736						
ANR	45783	Symbol	SUCCESS		45736						
ANR	45784	Symbol	* module		45736						
ANR	45785	Symbol	module		45736						
ANR	45786	Symbol	& module_registry		45736						
ANR	45787	Symbol	zend_hash_str_find_ptr		45736						
ANR	45788	Symbol	module_name		45736						
ANR	45789	Symbol	FAILURE		45736						
ANR	45790	Function	clean_module_class	2466:0:72755:73086							
ANR	45791	FunctionDef	"clean_module_class (zval * el , void * arg)"		45790	0					
ANR	45792	CompoundStatement		2467:0:72816:73086	45790	0					
ANR	45793	IdentifierDeclStatement	zend_class_entry * ce = ( zend_class_entry * ) Z_PTR_P ( el ) ;	2468:1:72819:72873	45790	0	True				
ANR	45794	IdentifierDecl	* ce = ( zend_class_entry * ) Z_PTR_P ( el )		45790	0					
ANR	45795	IdentifierDeclType	zend_class_entry *		45790	0					
ANR	45796	Identifier	ce		45790	1					
ANR	45797	AssignmentExpression	* ce = ( zend_class_entry * ) Z_PTR_P ( el )		45790	2		=			
ANR	45798	Identifier	ce		45790	0					
ANR	45799	CastExpression	( zend_class_entry * ) Z_PTR_P ( el )		45790	1					
ANR	45800	CastTarget	zend_class_entry *		45790	0					
ANR	45801	CallExpression	Z_PTR_P ( el )		45790	1					
ANR	45802	Callee	Z_PTR_P		45790	0					
ANR	45803	Identifier	Z_PTR_P		45790	0					
ANR	45804	ArgumentList	el		45790	1					
ANR	45805	Argument	el		45790	0					
ANR	45806	Identifier	el		45790	0					
ANR	45807	IdentifierDeclStatement	int module_number = * ( int * ) arg ;	2469:1:72876:72907	45790	1	True				
ANR	45808	IdentifierDecl	module_number = * ( int * ) arg		45790	0					
ANR	45809	IdentifierDeclType	int		45790	0					
ANR	45810	Identifier	module_number		45790	1					
ANR	45811	AssignmentExpression	module_number = * ( int * ) arg		45790	2		=			
ANR	45812	Identifier	module_number		45790	0					
ANR	45813	UnaryOperationExpression	* ( int * ) arg		45790	1					
ANR	45814	UnaryOperator	*		45790	0					
ANR	45815	CastExpression	( int * ) arg		45790	1					
ANR	45816	CastTarget	int *		45790	0					
ANR	45817	Identifier	arg		45790	1					
ANR	45818	IfStatement	if ( ce -> type == ZEND_INTERNAL_CLASS && ce -> info . internal . module -> module_number == module_number )		45790	2					
ANR	45819	Condition	ce -> type == ZEND_INTERNAL_CLASS && ce -> info . internal . module -> module_number == module_number	2470:5:72914:73004	45790	0	True				
ANR	45820	AndExpression	ce -> type == ZEND_INTERNAL_CLASS && ce -> info . internal . module -> module_number == module_number		45790	0		&&			
ANR	45821	EqualityExpression	ce -> type == ZEND_INTERNAL_CLASS		45790	0		==			
ANR	45822	PtrMemberAccess	ce -> type		45790	0					
ANR	45823	Identifier	ce		45790	0					
ANR	45824	Identifier	type		45790	1					
ANR	45825	Identifier	ZEND_INTERNAL_CLASS		45790	1					
ANR	45826	EqualityExpression	ce -> info . internal . module -> module_number == module_number		45790	1		==			
ANR	45827	PtrMemberAccess	ce -> info . internal . module -> module_number		45790	0					
ANR	45828	MemberAccess	ce -> info . internal . module		45790	0					
ANR	45829	MemberAccess	ce -> info . internal		45790	0					
ANR	45830	PtrMemberAccess	ce -> info		45790	0					
ANR	45831	Identifier	ce		45790	0					
ANR	45832	Identifier	info		45790	1					
ANR	45833	Identifier	internal		45790	1					
ANR	45834	Identifier	module		45790	1					
ANR	45835	Identifier	module_number		45790	1					
ANR	45836	Identifier	module_number		45790	1					
ANR	45837	CompoundStatement		4:98:190:190	45790	1					
ANR	45838	ReturnStatement	return ZEND_HASH_APPLY_REMOVE ;	2471:2:73011:73040	45790	0	True				
ANR	45839	Identifier	ZEND_HASH_APPLY_REMOVE		45790	0					
ANR	45840	ElseStatement	else		45790	0					
ANR	45841	CompoundStatement		6:8:233:233	45790	0					
ANR	45842	ReturnStatement	return ZEND_HASH_APPLY_KEEP ;	2473:2:73054:73081	45790	0	True				
ANR	45843	Identifier	ZEND_HASH_APPLY_KEEP		45790	0					
ANR	45844	ReturnType	static int		45790	1					
ANR	45845	Identifier	clean_module_class		45790	2					
ANR	45846	ParameterList	"zval * el , void * arg"		45790	3					
ANR	45847	Parameter	zval * el	2466:30:72785:72792	45790	0	True				
ANR	45848	ParameterType	zval *		45790	0					
ANR	45849	Identifier	el		45790	1					
ANR	45850	Parameter	void * arg	2466:40:72795:72803	45790	1	True				
ANR	45851	ParameterType	void *		45790	0					
ANR	45852	Identifier	arg		45790	1					
ANR	45853	CFGEntryNode	ENTRY		45790		True				
ANR	45854	CFGExitNode	EXIT		45790		True				
ANR	45855	Symbol	ZEND_INTERNAL_CLASS		45790						
ANR	45856	Symbol	Z_PTR_P		45790						
ANR	45857	Symbol	ce -> type		45790						
ANR	45858	Symbol	ce		45790						
ANR	45859	Symbol	el		45790						
ANR	45860	Symbol	ce -> info . internal . module		45790						
ANR	45861	Symbol	module_number		45790						
ANR	45862	Symbol	* ce -> info . internal . module		45790						
ANR	45863	Symbol	* ce		45790						
ANR	45864	Symbol	* * ce		45790						
ANR	45865	Symbol	ZEND_HASH_APPLY_KEEP		45790						
ANR	45866	Symbol	* ce -> info . internal		45790						
ANR	45867	Symbol	ce -> info . internal . module -> module_number		45790						
ANR	45868	Symbol	* ce -> info		45790						
ANR	45869	Symbol	* ( int * ) arg		45790						
ANR	45870	Symbol	arg		45790						
ANR	45871	Symbol	ce -> info		45790						
ANR	45872	Symbol	ZEND_HASH_APPLY_REMOVE		45790						
ANR	45873	Symbol	ce -> info . internal		45790						
ANR	45874	Symbol	* arg		45790						
ANR	45875	Function	clean_module_classes	2478:0:73099:73257							
ANR	45876	FunctionDef	clean_module_classes (int module_number)		45875	0					
ANR	45877	CompoundStatement		2479:0:73161:73257	45875	0					
ANR	45878	ExpressionStatement	"zend_hash_apply_with_argument ( EG ( class_table ) , clean_module_class , ( void * ) & module_number )"	2480:1:73164:73255	45875	0	True				
ANR	45879	CallExpression	"zend_hash_apply_with_argument ( EG ( class_table ) , clean_module_class , ( void * ) & module_number )"		45875	0					
ANR	45880	Callee	zend_hash_apply_with_argument		45875	0					
ANR	45881	Identifier	zend_hash_apply_with_argument		45875	0					
ANR	45882	ArgumentList	EG ( class_table )		45875	1					
ANR	45883	Argument	EG ( class_table )		45875	0					
ANR	45884	CallExpression	EG ( class_table )		45875	0					
ANR	45885	Callee	EG		45875	0					
ANR	45886	Identifier	EG		45875	0					
ANR	45887	ArgumentList	class_table		45875	1					
ANR	45888	Argument	class_table		45875	0					
ANR	45889	Identifier	class_table		45875	0					
ANR	45890	Argument	clean_module_class		45875	1					
ANR	45891	Identifier	clean_module_class		45875	0					
ANR	45892	Argument	( void * ) & module_number		45875	2					
ANR	45893	CastExpression	( void * ) & module_number		45875	0					
ANR	45894	CastTarget	void *		45875	0					
ANR	45895	UnaryOperationExpression	& module_number		45875	1					
ANR	45896	UnaryOperator	&		45875	0					
ANR	45897	Identifier	module_number		45875	1					
ANR	45898	ReturnType	static void		45875	1					
ANR	45899	Identifier	clean_module_classes		45875	2					
ANR	45900	ParameterList	int module_number		45875	3					
ANR	45901	Parameter	int module_number	2478:33:73132:73148	45875	0	True				
ANR	45902	ParameterType	int		45875	0					
ANR	45903	Identifier	module_number		45875	1					
ANR	45904	CFGEntryNode	ENTRY		45875		True				
ANR	45905	CFGExitNode	EXIT		45875		True				
ANR	45906	Symbol	clean_module_class		45875						
ANR	45907	Symbol	EG		45875						
ANR	45908	Symbol	& module_number		45875						
ANR	45909	Symbol	module_number		45875						
ANR	45910	Symbol	class_table		45875						
ANR	45911	Function	module_destructor	2484:0:73270:74270							
ANR	45912	FunctionDef	module_destructor (zend_module_entry * module)		45911	0					
ANR	45913	CompoundStatement		2485:0:73330:74270	45911	0					
ANR	45914	IfStatement	if ( module -> type == MODULE_TEMPORARY )		45911	0					
ANR	45915	Condition	module -> type == MODULE_TEMPORARY	2487:5:73338:73369	45911	0	True				
ANR	45916	EqualityExpression	module -> type == MODULE_TEMPORARY		45911	0		==			
ANR	45917	PtrMemberAccess	module -> type		45911	0					
ANR	45918	Identifier	module		45911	0					
ANR	45919	Identifier	type		45911	1					
ANR	45920	Identifier	MODULE_TEMPORARY		45911	1					
ANR	45921	CompoundStatement		3:39:41:41	45911	1					
ANR	45922	ExpressionStatement	zend_clean_module_rsrc_dtors ( module -> module_number )	2488:2:73376:73427	45911	0	True				
ANR	45923	CallExpression	zend_clean_module_rsrc_dtors ( module -> module_number )		45911	0					
ANR	45924	Callee	zend_clean_module_rsrc_dtors		45911	0					
ANR	45925	Identifier	zend_clean_module_rsrc_dtors		45911	0					
ANR	45926	ArgumentList	module -> module_number		45911	1					
ANR	45927	Argument	module -> module_number		45911	0					
ANR	45928	PtrMemberAccess	module -> module_number		45911	0					
ANR	45929	Identifier	module		45911	0					
ANR	45930	Identifier	module_number		45911	1					
ANR	45931	ExpressionStatement	clean_module_constants ( module -> module_number )	2489:2:73431:73476	45911	1	True				
ANR	45932	CallExpression	clean_module_constants ( module -> module_number )		45911	0					
ANR	45933	Callee	clean_module_constants		45911	0					
ANR	45934	Identifier	clean_module_constants		45911	0					
ANR	45935	ArgumentList	module -> module_number		45911	1					
ANR	45936	Argument	module -> module_number		45911	0					
ANR	45937	PtrMemberAccess	module -> module_number		45911	0					
ANR	45938	Identifier	module		45911	0					
ANR	45939	Identifier	module_number		45911	1					
ANR	45940	ExpressionStatement	clean_module_classes ( module -> module_number )	2490:2:73480:73523	45911	2	True				
ANR	45941	CallExpression	clean_module_classes ( module -> module_number )		45911	0					
ANR	45942	Callee	clean_module_classes		45911	0					
ANR	45943	Identifier	clean_module_classes		45911	0					
ANR	45944	ArgumentList	module -> module_number		45911	1					
ANR	45945	Argument	module -> module_number		45911	0					
ANR	45946	PtrMemberAccess	module -> module_number		45911	0					
ANR	45947	Identifier	module		45911	0					
ANR	45948	Identifier	module_number		45911	1					
ANR	45949	IfStatement	if ( module -> module_started && module -> module_shutdown_func )		45911	1					
ANR	45950	Condition	module -> module_started && module -> module_shutdown_func	2493:5:73534:73587	45911	0	True				
ANR	45951	AndExpression	module -> module_started && module -> module_shutdown_func		45911	0		&&			
ANR	45952	PtrMemberAccess	module -> module_started		45911	0					
ANR	45953	Identifier	module		45911	0					
ANR	45954	Identifier	module_started		45911	1					
ANR	45955	PtrMemberAccess	module -> module_shutdown_func		45911	1					
ANR	45956	Identifier	module		45911	0					
ANR	45957	Identifier	module_shutdown_func		45911	1					
ANR	45958	CompoundStatement		9:61:259:259	45911	1					
ANR	45959	ExpressionStatement	"zend_printf ( ""%s: Module shutdown\\n"" , module -> name )"	2495:2:73600:73650	45911	0	True				
ANR	45960	CallExpression	"zend_printf ( ""%s: Module shutdown\\n"" , module -> name )"		45911	0					
ANR	45961	Callee	zend_printf		45911	0					
ANR	45962	Identifier	zend_printf		45911	0					
ANR	45963	ArgumentList	"""%s: Module shutdown\\n"""		45911	1					
ANR	45964	Argument	"""%s: Module shutdown\\n"""		45911	0					
ANR	45965	PrimaryExpression	"""%s: Module shutdown\\n"""		45911	0					
ANR	45966	Argument	module -> name		45911	1					
ANR	45967	PtrMemberAccess	module -> name		45911	0					
ANR	45968	Identifier	module		45911	0					
ANR	45969	Identifier	name		45911	1					
ANR	45970	ExpressionStatement	"module -> module_shutdown_func ( module -> type , module -> module_number )"	2497:2:73661:73726	45911	1	True				
ANR	45971	CallExpression	"module -> module_shutdown_func ( module -> type , module -> module_number )"		45911	0					
ANR	45972	Callee	module -> module_shutdown_func		45911	0					
ANR	45973	PtrMemberAccess	module -> module_shutdown_func		45911	0					
ANR	45974	Identifier	module		45911	0					
ANR	45975	Identifier	module_shutdown_func		45911	1					
ANR	45976	ArgumentList	module -> type		45911	1					
ANR	45977	Argument	module -> type		45911	0					
ANR	45978	PtrMemberAccess	module -> type		45911	0					
ANR	45979	Identifier	module		45911	0					
ANR	45980	Identifier	type		45911	1					
ANR	45981	Argument	module -> module_number		45911	1					
ANR	45982	PtrMemberAccess	module -> module_number		45911	0					
ANR	45983	Identifier	module		45911	0					
ANR	45984	Identifier	module_number		45911	1					
ANR	45985	IfStatement	if ( module -> globals_size )		45911	2					
ANR	45986	Condition	module -> globals_size	2501:5:73772:73791	45911	0	True				
ANR	45987	PtrMemberAccess	module -> globals_size		45911	0					
ANR	45988	Identifier	module		45911	0					
ANR	45989	Identifier	globals_size		45911	1					
ANR	45990	CompoundStatement		17:27:463:463	45911	1					
ANR	45991	IfStatement	if ( * module -> globals_id_ptr )		45911	0					
ANR	45992	Condition	* module -> globals_id_ptr	2503:6:73813:73835	45911	0	True				
ANR	45993	UnaryOperationExpression	* module -> globals_id_ptr		45911	0					
ANR	45994	UnaryOperator	*		45911	0					
ANR	45995	PtrMemberAccess	module -> globals_id_ptr		45911	1					
ANR	45996	Identifier	module		45911	0					
ANR	45997	Identifier	globals_id_ptr		45911	1					
ANR	45998	CompoundStatement		19:31:507:507	45911	1					
ANR	45999	ExpressionStatement	ts_free_id ( * module -> globals_id_ptr )	2504:3:73843:73878	45911	0	True				
ANR	46000	CallExpression	ts_free_id ( * module -> globals_id_ptr )		45911	0					
ANR	46001	Callee	ts_free_id		45911	0					
ANR	46002	Identifier	ts_free_id		45911	0					
ANR	46003	ArgumentList	* module -> globals_id_ptr		45911	1					
ANR	46004	Argument	* module -> globals_id_ptr		45911	0					
ANR	46005	UnaryOperationExpression	* module -> globals_id_ptr		45911	0					
ANR	46006	UnaryOperator	*		45911	0					
ANR	46007	PtrMemberAccess	module -> globals_id_ptr		45911	1					
ANR	46008	Identifier	module		45911	0					
ANR	46009	Identifier	globals_id_ptr		45911	1					
ANR	46010	ExpressionStatement	module -> module_started = 0	2513:1:73982:74006	45911	3	True				
ANR	46011	AssignmentExpression	module -> module_started = 0		45911	0		=			
ANR	46012	PtrMemberAccess	module -> module_started		45911	0					
ANR	46013	Identifier	module		45911	0					
ANR	46014	Identifier	module_started		45911	1					
ANR	46015	PrimaryExpression	0		45911	1					
ANR	46016	IfStatement	if ( module -> functions )		45911	4					
ANR	46017	Condition	module -> functions	2514:5:74013:74029	45911	0	True				
ANR	46018	PtrMemberAccess	module -> functions		45911	0					
ANR	46019	Identifier	module		45911	0					
ANR	46020	Identifier	functions		45911	1					
ANR	46021	CompoundStatement		30:24:701:701	45911	1					
ANR	46022	ExpressionStatement	"zend_unregister_functions ( module -> functions , - 1 , NULL )"	2515:2:74036:74090	45911	0	True				
ANR	46023	CallExpression	"zend_unregister_functions ( module -> functions , - 1 , NULL )"		45911	0					
ANR	46024	Callee	zend_unregister_functions		45911	0					
ANR	46025	Identifier	zend_unregister_functions		45911	0					
ANR	46026	ArgumentList	module -> functions		45911	1					
ANR	46027	Argument	module -> functions		45911	0					
ANR	46028	PtrMemberAccess	module -> functions		45911	0					
ANR	46029	Identifier	module		45911	0					
ANR	46030	Identifier	functions		45911	1					
ANR	46031	Argument	- 1		45911	1					
ANR	46032	UnaryOperationExpression	- 1		45911	0					
ANR	46033	UnaryOperator	-		45911	0					
ANR	46034	PrimaryExpression	1		45911	1					
ANR	46035	Argument	NULL		45911	2					
ANR	46036	Identifier	NULL		45911	0					
ANR	46037	IfStatement	"if ( module -> handle && ! getenv ( ""ZEND_DONT_UNLOAD_MODULES"" ) )"		45911	5					
ANR	46038	Condition	"module -> handle && ! getenv ( ""ZEND_DONT_UNLOAD_MODULES"" )"	2520:5:74167:74219	45911	0	True				
ANR	46039	AndExpression	"module -> handle && ! getenv ( ""ZEND_DONT_UNLOAD_MODULES"" )"		45911	0		&&			
ANR	46040	PtrMemberAccess	module -> handle		45911	0					
ANR	46041	Identifier	module		45911	0					
ANR	46042	Identifier	handle		45911	1					
ANR	46043	UnaryOperationExpression	"! getenv ( ""ZEND_DONT_UNLOAD_MODULES"" )"		45911	1					
ANR	46044	UnaryOperator	!		45911	0					
ANR	46045	CallExpression	"getenv ( ""ZEND_DONT_UNLOAD_MODULES"" )"		45911	1					
ANR	46046	Callee	getenv		45911	0					
ANR	46047	Identifier	getenv		45911	0					
ANR	46048	ArgumentList	"""ZEND_DONT_UNLOAD_MODULES"""		45911	1					
ANR	46049	Argument	"""ZEND_DONT_UNLOAD_MODULES"""		45911	0					
ANR	46050	PrimaryExpression	"""ZEND_DONT_UNLOAD_MODULES"""		45911	0					
ANR	46051	CompoundStatement		36:60:891:891	45911	1					
ANR	46052	ExpressionStatement	DL_UNLOAD ( module -> handle )	2521:2:74226:74251	45911	0	True				
ANR	46053	CallExpression	DL_UNLOAD ( module -> handle )		45911	0					
ANR	46054	Callee	DL_UNLOAD		45911	0					
ANR	46055	Identifier	DL_UNLOAD		45911	0					
ANR	46056	ArgumentList	module -> handle		45911	1					
ANR	46057	Argument	module -> handle		45911	0					
ANR	46058	PtrMemberAccess	module -> handle		45911	0					
ANR	46059	Identifier	module		45911	0					
ANR	46060	Identifier	handle		45911	1					
ANR	46061	ReturnType	void		45911	1					
ANR	46062	Identifier	module_destructor		45911	2					
ANR	46063	ParameterList	zend_module_entry * module		45911	3					
ANR	46064	Parameter	zend_module_entry * module	2484:23:73293:73317	45911	0	True				
ANR	46065	ParameterType	zend_module_entry *		45911	0					
ANR	46066	Identifier	module		45911	1					
ANR	46067	CFGEntryNode	ENTRY		45911		True				
ANR	46068	CFGExitNode	EXIT		45911		True				
ANR	46069	Symbol	module -> module_started		45911						
ANR	46070	Symbol	module -> name		45911						
ANR	46071	Symbol	NULL		45911						
ANR	46072	Symbol	module -> globals_size		45911						
ANR	46073	Symbol	* module		45911						
ANR	46074	Symbol	* * module		45911						
ANR	46075	Symbol	module		45911						
ANR	46076	Symbol	module -> functions		45911						
ANR	46077	Symbol	module -> module_number		45911						
ANR	46078	Symbol	module -> handle		45911						
ANR	46079	Symbol	MODULE_TEMPORARY		45911						
ANR	46080	Symbol	module -> globals_id_ptr		45911						
ANR	46081	Symbol	module -> module_shutdown_func		45911						
ANR	46082	Symbol	module -> type		45911						
ANR	46083	Symbol	* module -> globals_id_ptr		45911						
ANR	46084	Symbol	getenv		45911						
ANR	46085	Function	zend_activate_modules	2528:0:74283:74637							
ANR	46086	FunctionDef	zend_activate_modules ()		46085	0					
ANR	46087	CompoundStatement		2529:0:74335:74637	46085	0					
ANR	46088	IdentifierDeclStatement	zend_module_entry * * p = module_request_startup_handlers ;	2530:1:74338:74393	46085	0	True				
ANR	46089	IdentifierDecl	* * p = module_request_startup_handlers		46085	0					
ANR	46090	IdentifierDeclType	zend_module_entry * *		46085	0					
ANR	46091	Identifier	p		46085	1					
ANR	46092	AssignmentExpression	* * p = module_request_startup_handlers		46085	2		=			
ANR	46093	Identifier	module_request_startup_handlers		46085	0					
ANR	46094	Identifier	module_request_startup_handlers		46085	1					
ANR	46095	WhileStatement	while ( * p )		46085	1					
ANR	46096	Condition	* p	2532:8:74404:74405	46085	0	True				
ANR	46097	UnaryOperationExpression	* p		46085	0					
ANR	46098	UnaryOperator	*		46085	0					
ANR	46099	Identifier	p		46085	1					
ANR	46100	CompoundStatement		5:2:76:106	46085	1					
ANR	46101	IdentifierDeclStatement	zend_module_entry * module = * p ;	2533:2:74412:74442	46085	0	True				
ANR	46102	IdentifierDecl	* module = * p		46085	0					
ANR	46103	IdentifierDeclType	zend_module_entry *		46085	0					
ANR	46104	Identifier	module		46085	1					
ANR	46105	AssignmentExpression	* module = * p		46085	2		=			
ANR	46106	Identifier	module		46085	0					
ANR	46107	UnaryOperationExpression	* p		46085	1					
ANR	46108	UnaryOperator	*		46085	0					
ANR	46109	Identifier	p		46085	1					
ANR	46110	IfStatement	"if ( module -> request_startup_func ( module -> type , module -> module_number ) == FAILURE )"		46085	1					
ANR	46111	Condition	"module -> request_startup_func ( module -> type , module -> module_number ) == FAILURE"	2535:6:74451:74524	46085	0	True				
ANR	46112	EqualityExpression	"module -> request_startup_func ( module -> type , module -> module_number ) == FAILURE"		46085	0		==			
ANR	46113	CallExpression	"module -> request_startup_func ( module -> type , module -> module_number )"		46085	0					
ANR	46114	Callee	module -> request_startup_func		46085	0					
ANR	46115	PtrMemberAccess	module -> request_startup_func		46085	0					
ANR	46116	Identifier	module		46085	0					
ANR	46117	Identifier	request_startup_func		46085	1					
ANR	46118	ArgumentList	module -> type		46085	1					
ANR	46119	Argument	module -> type		46085	0					
ANR	46120	PtrMemberAccess	module -> type		46085	0					
ANR	46121	Identifier	module		46085	0					
ANR	46122	Identifier	type		46085	1					
ANR	46123	Argument	module -> module_number		46085	1					
ANR	46124	PtrMemberAccess	module -> module_number		46085	0					
ANR	46125	Identifier	module		46085	0					
ANR	46126	Identifier	module_number		46085	1					
ANR	46127	Identifier	FAILURE		46085	1					
ANR	46128	CompoundStatement		7:82:191:191	46085	1					
ANR	46129	ExpressionStatement	"zend_error ( E_WARNING , ""request_startup() for %s module failed"" , module -> name )"	2536:3:74532:74609	46085	0	True				
ANR	46130	CallExpression	"zend_error ( E_WARNING , ""request_startup() for %s module failed"" , module -> name )"		46085	0					
ANR	46131	Callee	zend_error		46085	0					
ANR	46132	Identifier	zend_error		46085	0					
ANR	46133	ArgumentList	E_WARNING		46085	1					
ANR	46134	Argument	E_WARNING		46085	0					
ANR	46135	Identifier	E_WARNING		46085	0					
ANR	46136	Argument	"""request_startup() for %s module failed"""		46085	1					
ANR	46137	PrimaryExpression	"""request_startup() for %s module failed"""		46085	0					
ANR	46138	Argument	module -> name		46085	2					
ANR	46139	PtrMemberAccess	module -> name		46085	0					
ANR	46140	Identifier	module		46085	0					
ANR	46141	Identifier	name		46085	1					
ANR	46142	ExpressionStatement	exit ( 1 )	2537:3:74614:74621	46085	1	True				
ANR	46143	CallExpression	exit ( 1 )		46085	0					
ANR	46144	Callee	exit		46085	0					
ANR	46145	Identifier	exit		46085	0					
ANR	46146	ArgumentList	1		46085	1					
ANR	46147	Argument	1		46085	0					
ANR	46148	PrimaryExpression	1		46085	0					
ANR	46149	ExpressionStatement	p ++	2539:2:74629:74632	46085	2	True				
ANR	46150	PostIncDecOperationExpression	p ++		46085	0					
ANR	46151	Identifier	p		46085	0					
ANR	46152	IncDec	++		46085	1					
ANR	46153	ReturnType	ZEND_API void		46085	1					
ANR	46154	Identifier	zend_activate_modules		46085	2					
ANR	46155	ParameterList			46085	3					
ANR	46156	CFGEntryNode	ENTRY		46085		True				
ANR	46157	CFGExitNode	EXIT		46085		True				
ANR	46158	Symbol	p		46085						
ANR	46159	Symbol	E_WARNING		46085						
ANR	46160	Symbol	module -> module_number		46085						
ANR	46161	Symbol	module -> name		46085						
ANR	46162	Symbol	* module		46085						
ANR	46163	Symbol	module		46085						
ANR	46164	Symbol	module -> request_startup_func		46085						
ANR	46165	Symbol	* p		46085						
ANR	46166	Symbol	module -> type		46085						
ANR	46167	Symbol	FAILURE		46085						
ANR	46168	Symbol	module_request_startup_handlers		46085						
ANR	46169	Function	module_registry_cleanup	2545:0:74694:74984							
ANR	46170	FunctionDef	module_registry_cleanup (zval * zv)		46169	0					
ANR	46171	CompoundStatement		2546:0:74749:74984	46169	0					
ANR	46172	IdentifierDeclStatement	zend_module_entry * module = Z_PTR_P ( zv ) ;	2547:1:74752:74791	46169	0	True				
ANR	46173	IdentifierDecl	* module = Z_PTR_P ( zv )		46169	0					
ANR	46174	IdentifierDeclType	zend_module_entry *		46169	0					
ANR	46175	Identifier	module		46169	1					
ANR	46176	AssignmentExpression	* module = Z_PTR_P ( zv )		46169	2		=			
ANR	46177	Identifier	module		46169	0					
ANR	46178	CallExpression	Z_PTR_P ( zv )		46169	1					
ANR	46179	Callee	Z_PTR_P		46169	0					
ANR	46180	Identifier	Z_PTR_P		46169	0					
ANR	46181	ArgumentList	zv		46169	1					
ANR	46182	Argument	zv		46169	0					
ANR	46183	Identifier	zv		46169	0					
ANR	46184	IfStatement	if ( module -> request_shutdown_func )		46169	1					
ANR	46185	Condition	module -> request_shutdown_func	2549:5:74799:74827	46169	0	True				
ANR	46186	PtrMemberAccess	module -> request_shutdown_func		46169	0					
ANR	46187	Identifier	module		46169	0					
ANR	46188	Identifier	request_shutdown_func		46169	1					
ANR	46189	CompoundStatement		4:36:80:80	46169	1					
ANR	46190	ExpressionStatement	"zend_printf ( ""%s: Request shutdown\\n"" , module -> name )"	2551:2:74840:74891	46169	0	True				
ANR	46191	CallExpression	"zend_printf ( ""%s: Request shutdown\\n"" , module -> name )"		46169	0					
ANR	46192	Callee	zend_printf		46169	0					
ANR	46193	Identifier	zend_printf		46169	0					
ANR	46194	ArgumentList	"""%s: Request shutdown\\n"""		46169	1					
ANR	46195	Argument	"""%s: Request shutdown\\n"""		46169	0					
ANR	46196	PrimaryExpression	"""%s: Request shutdown\\n"""		46169	0					
ANR	46197	Argument	module -> name		46169	1					
ANR	46198	PtrMemberAccess	module -> name		46169	0					
ANR	46199	Identifier	module		46169	0					
ANR	46200	Identifier	name		46169	1					
ANR	46201	ExpressionStatement	"module -> request_shutdown_func ( module -> type , module -> module_number )"	2553:2:74902:74968	46169	1	True				
ANR	46202	CallExpression	"module -> request_shutdown_func ( module -> type , module -> module_number )"		46169	0					
ANR	46203	Callee	module -> request_shutdown_func		46169	0					
ANR	46204	PtrMemberAccess	module -> request_shutdown_func		46169	0					
ANR	46205	Identifier	module		46169	0					
ANR	46206	Identifier	request_shutdown_func		46169	1					
ANR	46207	ArgumentList	module -> type		46169	1					
ANR	46208	Argument	module -> type		46169	0					
ANR	46209	PtrMemberAccess	module -> type		46169	0					
ANR	46210	Identifier	module		46169	0					
ANR	46211	Identifier	type		46169	1					
ANR	46212	Argument	module -> module_number		46169	1					
ANR	46213	PtrMemberAccess	module -> module_number		46169	0					
ANR	46214	Identifier	module		46169	0					
ANR	46215	Identifier	module_number		46169	1					
ANR	46216	ReturnStatement	return 0 ;	2555:1:74974:74982	46169	2	True				
ANR	46217	PrimaryExpression	0		46169	0					
ANR	46218	ReturnType	static int		46169	1					
ANR	46219	Identifier	module_registry_cleanup		46169	2					
ANR	46220	ParameterList	zval * zv		46169	3					
ANR	46221	Parameter	zval * zv	2545:35:74729:74736	46169	0	True				
ANR	46222	ParameterType	zval *		46169	0					
ANR	46223	Identifier	zv		46169	1					
ANR	46224	CFGEntryNode	ENTRY		46169		True				
ANR	46225	CFGExitNode	EXIT		46169		True				
ANR	46226	Symbol	Z_PTR_P		46169						
ANR	46227	Symbol	module -> name		46169						
ANR	46228	Symbol	module -> module_number		46169						
ANR	46229	Symbol	* module		46169						
ANR	46230	Symbol	module		46169						
ANR	46231	Symbol	module -> request_shutdown_func		46169						
ANR	46232	Symbol	zv		46169						
ANR	46233	Symbol	module -> type		46169						
ANR	46234	Function	zend_deactivate_modules	2559:0:74997:75480							
ANR	46235	FunctionDef	zend_deactivate_modules ()		46234	0					
ANR	46236	CompoundStatement		2560:0:75051:75480	46234	0					
ANR	46237	ExpressionStatement	EG ( current_execute_data ) = NULL	2561:1:75054:75085	46234	0	True				
ANR	46238	AssignmentExpression	EG ( current_execute_data ) = NULL		46234	0		=			
ANR	46239	CallExpression	EG ( current_execute_data )		46234	0					
ANR	46240	Callee	EG		46234	0					
ANR	46241	Identifier	EG		46234	0					
ANR	46242	ArgumentList	current_execute_data		46234	1					
ANR	46243	Argument	current_execute_data		46234	0					
ANR	46244	Identifier	current_execute_data		46234	0					
ANR	46245	Identifier	NULL		46234	1					
ANR	46246	Statement	zend_try	2563:1:75130:75137	46234	1	True				
ANR	46247	CompoundStatement		4:10:87:87	46234	2					
ANR	46248	IfStatement	if ( EG ( full_tables_cleanup ) )		46234	0					
ANR	46249	Condition	EG ( full_tables_cleanup )	2564:6:75147:75169	46234	0	True				
ANR	46250	CallExpression	EG ( full_tables_cleanup )		46234	0					
ANR	46251	Callee	EG		46234	0					
ANR	46252	Identifier	EG		46234	0					
ANR	46253	ArgumentList	full_tables_cleanup		46234	1					
ANR	46254	Argument	full_tables_cleanup		46234	0					
ANR	46255	Identifier	full_tables_cleanup		46234	0					
ANR	46256	CompoundStatement		5:31:120:120	46234	1					
ANR	46257	ExpressionStatement	"zend_hash_reverse_apply ( & module_registry , module_registry_cleanup )"	2565:3:75177:75243	46234	0	True				
ANR	46258	CallExpression	"zend_hash_reverse_apply ( & module_registry , module_registry_cleanup )"		46234	0					
ANR	46259	Callee	zend_hash_reverse_apply		46234	0					
ANR	46260	Identifier	zend_hash_reverse_apply		46234	0					
ANR	46261	ArgumentList	& module_registry		46234	1					
ANR	46262	Argument	& module_registry		46234	0					
ANR	46263	UnaryOperationExpression	& module_registry		46234	0					
ANR	46264	UnaryOperator	&		46234	0					
ANR	46265	Identifier	module_registry		46234	1					
ANR	46266	Argument	module_registry_cleanup		46234	1					
ANR	46267	Identifier	module_registry_cleanup		46234	0					
ANR	46268	ElseStatement	else		46234	0					
ANR	46269	CompoundStatement		8:3:207:263	46234	0					
ANR	46270	IdentifierDeclStatement	zend_module_entry * * p = module_request_shutdown_handlers ;	2567:3:75259:75315	46234	0	True				
ANR	46271	IdentifierDecl	* * p = module_request_shutdown_handlers		46234	0					
ANR	46272	IdentifierDeclType	zend_module_entry * *		46234	0					
ANR	46273	Identifier	p		46234	1					
ANR	46274	AssignmentExpression	* * p = module_request_shutdown_handlers		46234	2		=			
ANR	46275	Identifier	module_request_shutdown_handlers		46234	0					
ANR	46276	Identifier	module_request_shutdown_handlers		46234	1					
ANR	46277	WhileStatement	while ( * p )		46234	1					
ANR	46278	Condition	* p	2569:10:75328:75329	46234	0	True				
ANR	46279	UnaryOperationExpression	* p		46234	0					
ANR	46280	UnaryOperator	*		46234	0					
ANR	46281	Identifier	p		46234	1					
ANR	46282	CompoundStatement		11:4:286:316	46234	1					
ANR	46283	IdentifierDeclStatement	zend_module_entry * module = * p ;	2570:4:75338:75368	46234	0	True				
ANR	46284	IdentifierDecl	* module = * p		46234	0					
ANR	46285	IdentifierDeclType	zend_module_entry *		46234	0					
ANR	46286	Identifier	module		46234	1					
ANR	46287	AssignmentExpression	* module = * p		46234	2		=			
ANR	46288	Identifier	module		46234	0					
ANR	46289	UnaryOperationExpression	* p		46234	1					
ANR	46290	UnaryOperator	*		46234	0					
ANR	46291	Identifier	p		46234	1					
ANR	46292	ExpressionStatement	"module -> request_shutdown_func ( module -> type , module -> module_number )"	2572:4:75375:75441	46234	1	True				
ANR	46293	CallExpression	"module -> request_shutdown_func ( module -> type , module -> module_number )"		46234	0					
ANR	46294	Callee	module -> request_shutdown_func		46234	0					
ANR	46295	PtrMemberAccess	module -> request_shutdown_func		46234	0					
ANR	46296	Identifier	module		46234	0					
ANR	46297	Identifier	request_shutdown_func		46234	1					
ANR	46298	ArgumentList	module -> type		46234	1					
ANR	46299	Argument	module -> type		46234	0					
ANR	46300	PtrMemberAccess	module -> type		46234	0					
ANR	46301	Identifier	module		46234	0					
ANR	46302	Identifier	type		46234	1					
ANR	46303	Argument	module -> module_number		46234	1					
ANR	46304	PtrMemberAccess	module -> module_number		46234	0					
ANR	46305	Identifier	module		46234	0					
ANR	46306	Identifier	module_number		46234	1					
ANR	46307	ExpressionStatement	p ++	2573:4:75447:75450	46234	2	True				
ANR	46308	PostIncDecOperationExpression	p ++		46234	0					
ANR	46309	Identifier	p		46234	0					
ANR	46310	IncDec	++		46234	1					
ANR	46311	ExpressionStatement	zend_end_try ( )	2576:3:75464:75478	46234	3	True				
ANR	46312	CallExpression	zend_end_try ( )		46234	0					
ANR	46313	Callee	zend_end_try		46234	0					
ANR	46314	Identifier	zend_end_try		46234	0					
ANR	46315	ArgumentList			46234	1					
ANR	46316	ReturnType	ZEND_API void		46234	1					
ANR	46317	Identifier	zend_deactivate_modules		46234	2					
ANR	46318	ParameterList			46234	3					
ANR	46319	CFGEntryNode	ENTRY		46234		True				
ANR	46320	CFGExitNode	EXIT		46234		True				
ANR	46321	Symbol	EG		46234						
ANR	46322	Symbol	NULL		46234						
ANR	46323	Symbol	* module		46234						
ANR	46324	Symbol	current_execute_data		46234						
ANR	46325	Symbol	module		46234						
ANR	46326	Symbol	& module_registry		46234						
ANR	46327	Symbol	module_registry_cleanup		46234						
ANR	46328	Symbol	p		46234						
ANR	46329	Symbol	full_tables_cleanup		46234						
ANR	46330	Symbol	module -> module_number		46234						
ANR	46331	Symbol	module_request_shutdown_handlers		46234						
ANR	46332	Symbol	* p		46234						
ANR	46333	Symbol	module -> type		46234						
ANR	46334	Function	zend_cleanup_internal_classes	2580:0:75493:75668							
ANR	46335	FunctionDef	zend_cleanup_internal_classes ()		46334	0					
ANR	46336	CompoundStatement		2581:0:75553:75668	46334	0					
ANR	46337	IdentifierDeclStatement	zend_class_entry * * p = class_cleanup_handlers ;	2582:1:75556:75601	46334	0	True				
ANR	46338	IdentifierDecl	* * p = class_cleanup_handlers		46334	0					
ANR	46339	IdentifierDeclType	zend_class_entry * *		46334	0					
ANR	46340	Identifier	p		46334	1					
ANR	46341	AssignmentExpression	* * p = class_cleanup_handlers		46334	2		=			
ANR	46342	Identifier	class_cleanup_handlers		46334	0					
ANR	46343	Identifier	class_cleanup_handlers		46334	1					
ANR	46344	WhileStatement	while ( * p )		46334	1					
ANR	46345	Condition	* p	2584:8:75612:75613	46334	0	True				
ANR	46346	UnaryOperationExpression	* p		46334	0					
ANR	46347	UnaryOperator	*		46334	0					
ANR	46348	Identifier	p		46334	1					
ANR	46349	CompoundStatement		4:12:62:62	46334	1					
ANR	46350	ExpressionStatement	zend_cleanup_internal_class_data ( * p )	2585:2:75620:75656	46334	0	True				
ANR	46351	CallExpression	zend_cleanup_internal_class_data ( * p )		46334	0					
ANR	46352	Callee	zend_cleanup_internal_class_data		46334	0					
ANR	46353	Identifier	zend_cleanup_internal_class_data		46334	0					
ANR	46354	ArgumentList	* p		46334	1					
ANR	46355	Argument	* p		46334	0					
ANR	46356	UnaryOperationExpression	* p		46334	0					
ANR	46357	UnaryOperator	*		46334	0					
ANR	46358	Identifier	p		46334	1					
ANR	46359	ExpressionStatement	p ++	2586:2:75660:75663	46334	1	True				
ANR	46360	PostIncDecOperationExpression	p ++		46334	0					
ANR	46361	Identifier	p		46334	0					
ANR	46362	IncDec	++		46334	1					
ANR	46363	ReturnType	ZEND_API void		46334	1					
ANR	46364	Identifier	zend_cleanup_internal_classes		46334	2					
ANR	46365	ParameterList			46334	3					
ANR	46366	CFGEntryNode	ENTRY		46334		True				
ANR	46367	CFGExitNode	EXIT		46334		True				
ANR	46368	Symbol	p		46334						
ANR	46369	Symbol	class_cleanup_handlers		46334						
ANR	46370	Symbol	* p		46334						
ANR	46371	Function	module_registry_unload_temp	2591:0:75681:75850							
ANR	46372	FunctionDef	module_registry_unload_temp (const zend_module_entry * module)		46371	0					
ANR	46373	CompoundStatement		2592:0:75756:75850	46371	0					
ANR	46374	ReturnStatement	return ( module -> type == MODULE_TEMPORARY ) ? ZEND_HASH_APPLY_REMOVE : ZEND_HASH_APPLY_STOP ;	2593:1:75759:75848	46371	0	True				
ANR	46375	ConditionalExpression	( module -> type == MODULE_TEMPORARY ) ? ZEND_HASH_APPLY_REMOVE : ZEND_HASH_APPLY_STOP		46371	0					
ANR	46376	Condition	module -> type == MODULE_TEMPORARY		46371	0					
ANR	46377	EqualityExpression	module -> type == MODULE_TEMPORARY		46371	0		==			
ANR	46378	PtrMemberAccess	module -> type		46371	0					
ANR	46379	Identifier	module		46371	0					
ANR	46380	Identifier	type		46371	1					
ANR	46381	Identifier	MODULE_TEMPORARY		46371	1					
ANR	46382	Identifier	ZEND_HASH_APPLY_REMOVE		46371	1					
ANR	46383	Identifier	ZEND_HASH_APPLY_STOP		46371	2					
ANR	46384	ReturnType	int		46371	1					
ANR	46385	Identifier	module_registry_unload_temp		46371	2					
ANR	46386	ParameterList	const zend_module_entry * module		46371	3					
ANR	46387	Parameter	const zend_module_entry * module	2591:32:75713:75743	46371	0	True				
ANR	46388	ParameterType	const zend_module_entry *		46371	0					
ANR	46389	Identifier	module		46371	1					
ANR	46390	CFGEntryNode	ENTRY		46371		True				
ANR	46391	CFGExitNode	EXIT		46371		True				
ANR	46392	Symbol	MODULE_TEMPORARY		46371						
ANR	46393	Symbol	* module		46371						
ANR	46394	Symbol	module		46371						
ANR	46395	Symbol	ZEND_HASH_APPLY_REMOVE		46371						
ANR	46396	Symbol	ZEND_HASH_APPLY_STOP		46371						
ANR	46397	Symbol	module -> type		46371						
ANR	46398	Function	module_registry_unload_temp_wrapper	2597:0:75863:76067							
ANR	46399	FunctionDef	module_registry_unload_temp_wrapper (zval * el)		46398	0					
ANR	46400	CompoundStatement		2598:0:75930:76067	46398	0					
ANR	46401	IdentifierDeclStatement	zend_module_entry * module = ( zend_module_entry * ) Z_PTR_P ( el ) ;	2599:1:75933:75993	46398	0	True				
ANR	46402	IdentifierDecl	* module = ( zend_module_entry * ) Z_PTR_P ( el )		46398	0					
ANR	46403	IdentifierDeclType	zend_module_entry *		46398	0					
ANR	46404	Identifier	module		46398	1					
ANR	46405	AssignmentExpression	* module = ( zend_module_entry * ) Z_PTR_P ( el )		46398	2		=			
ANR	46406	Identifier	module		46398	0					
ANR	46407	CastExpression	( zend_module_entry * ) Z_PTR_P ( el )		46398	1					
ANR	46408	CastTarget	zend_module_entry *		46398	0					
ANR	46409	CallExpression	Z_PTR_P ( el )		46398	1					
ANR	46410	Callee	Z_PTR_P		46398	0					
ANR	46411	Identifier	Z_PTR_P		46398	0					
ANR	46412	ArgumentList	el		46398	1					
ANR	46413	Argument	el		46398	0					
ANR	46414	Identifier	el		46398	0					
ANR	46415	ReturnStatement	return module_registry_unload_temp ( ( const zend_module_entry * ) module ) ;	2600:1:75996:76065	46398	1	True				
ANR	46416	CallExpression	module_registry_unload_temp ( ( const zend_module_entry * ) module )		46398	0					
ANR	46417	Callee	module_registry_unload_temp		46398	0					
ANR	46418	Identifier	module_registry_unload_temp		46398	0					
ANR	46419	ArgumentList	( const zend_module_entry * ) module		46398	1					
ANR	46420	Argument	( const zend_module_entry * ) module		46398	0					
ANR	46421	CastExpression	( const zend_module_entry * ) module		46398	0					
ANR	46422	CastTarget	const zend_module_entry *		46398	0					
ANR	46423	Identifier	module		46398	1					
ANR	46424	ReturnType	static int		46398	1					
ANR	46425	Identifier	module_registry_unload_temp_wrapper		46398	2					
ANR	46426	ParameterList	zval * el		46398	3					
ANR	46427	Parameter	zval * el	2597:47:75910:75917	46398	0	True				
ANR	46428	ParameterType	zval *		46398	0					
ANR	46429	Identifier	el		46398	1					
ANR	46430	CFGEntryNode	ENTRY		46398		True				
ANR	46431	CFGExitNode	EXIT		46398		True				
ANR	46432	Symbol	Z_PTR_P		46398						
ANR	46433	Symbol	module_registry_unload_temp		46398						
ANR	46434	Symbol	el		46398						
ANR	46435	Symbol	module		46398						
ANR	46436	Function	exec_done_cb	2604:0:76080:76274							
ANR	46437	FunctionDef	exec_done_cb (zval * el)		46436	0					
ANR	46438	CompoundStatement		2605:0:76124:76274	46436	0					
ANR	46439	IdentifierDeclStatement	zend_module_entry * module = ( zend_module_entry * ) Z_PTR_P ( el ) ;	2606:1:76127:76187	46436	0	True				
ANR	46440	IdentifierDecl	* module = ( zend_module_entry * ) Z_PTR_P ( el )		46436	0					
ANR	46441	IdentifierDeclType	zend_module_entry *		46436	0					
ANR	46442	Identifier	module		46436	1					
ANR	46443	AssignmentExpression	* module = ( zend_module_entry * ) Z_PTR_P ( el )		46436	2		=			
ANR	46444	Identifier	module		46436	0					
ANR	46445	CastExpression	( zend_module_entry * ) Z_PTR_P ( el )		46436	1					
ANR	46446	CastTarget	zend_module_entry *		46436	0					
ANR	46447	CallExpression	Z_PTR_P ( el )		46436	1					
ANR	46448	Callee	Z_PTR_P		46436	0					
ANR	46449	Identifier	Z_PTR_P		46436	0					
ANR	46450	ArgumentList	el		46436	1					
ANR	46451	Argument	el		46436	0					
ANR	46452	Identifier	el		46436	0					
ANR	46453	IfStatement	if ( module -> post_deactivate_func )		46436	1					
ANR	46454	Condition	module -> post_deactivate_func	2607:5:76194:76221	46436	0	True				
ANR	46455	PtrMemberAccess	module -> post_deactivate_func		46436	0					
ANR	46456	Identifier	module		46436	0					
ANR	46457	Identifier	post_deactivate_func		46436	1					
ANR	46458	CompoundStatement		3:35:99:99	46436	1					
ANR	46459	ExpressionStatement	module -> post_deactivate_func ( )	2608:2:76228:76258	46436	0	True				
ANR	46460	CallExpression	module -> post_deactivate_func ( )		46436	0					
ANR	46461	Callee	module -> post_deactivate_func		46436	0					
ANR	46462	PtrMemberAccess	module -> post_deactivate_func		46436	0					
ANR	46463	Identifier	module		46436	0					
ANR	46464	Identifier	post_deactivate_func		46436	1					
ANR	46465	ArgumentList			46436	1					
ANR	46466	ReturnStatement	return 0 ;	2610:1:76264:76272	46436	2	True				
ANR	46467	PrimaryExpression	0		46436	0					
ANR	46468	ReturnType	static int		46436	1					
ANR	46469	Identifier	exec_done_cb		46436	2					
ANR	46470	ParameterList	zval * el		46436	3					
ANR	46471	Parameter	zval * el	2604:24:76104:76111	46436	0	True				
ANR	46472	ParameterType	zval *		46436	0					
ANR	46473	Identifier	el		46436	1					
ANR	46474	CFGEntryNode	ENTRY		46436		True				
ANR	46475	CFGExitNode	EXIT		46436		True				
ANR	46476	Symbol	Z_PTR_P		46436						
ANR	46477	Symbol	module -> post_deactivate_func		46436						
ANR	46478	Symbol	* module		46436						
ANR	46479	Symbol	el		46436						
ANR	46480	Symbol	module		46436						
ANR	46481	Function	zend_post_deactivate_modules	2614:0:76287:76684							
ANR	46482	FunctionDef	zend_post_deactivate_modules ()		46481	0					
ANR	46483	CompoundStatement		2615:0:76346:76684	46481	0					
ANR	46484	IfStatement	if ( EG ( full_tables_cleanup ) )		46481	0					
ANR	46485	Condition	EG ( full_tables_cleanup )	2616:5:76353:76375	46481	0	True				
ANR	46486	CallExpression	EG ( full_tables_cleanup )		46481	0					
ANR	46487	Callee	EG		46481	0					
ANR	46488	Identifier	EG		46481	0					
ANR	46489	ArgumentList	full_tables_cleanup		46481	1					
ANR	46490	Argument	full_tables_cleanup		46481	0					
ANR	46491	Identifier	full_tables_cleanup		46481	0					
ANR	46492	CompoundStatement		2:30:31:31	46481	1					
ANR	46493	ExpressionStatement	"zend_hash_apply ( & module_registry , exec_done_cb )"	2617:2:76382:76429	46481	0	True				
ANR	46494	CallExpression	"zend_hash_apply ( & module_registry , exec_done_cb )"		46481	0					
ANR	46495	Callee	zend_hash_apply		46481	0					
ANR	46496	Identifier	zend_hash_apply		46481	0					
ANR	46497	ArgumentList	& module_registry		46481	1					
ANR	46498	Argument	& module_registry		46481	0					
ANR	46499	UnaryOperationExpression	& module_registry		46481	0					
ANR	46500	UnaryOperator	&		46481	0					
ANR	46501	Identifier	module_registry		46481	1					
ANR	46502	Argument	exec_done_cb		46481	1					
ANR	46503	Identifier	exec_done_cb		46481	0					
ANR	46504	ExpressionStatement	"zend_hash_reverse_apply ( & module_registry , module_registry_unload_temp_wrapper )"	2618:2:76433:76511	46481	1	True				
ANR	46505	CallExpression	"zend_hash_reverse_apply ( & module_registry , module_registry_unload_temp_wrapper )"		46481	0					
ANR	46506	Callee	zend_hash_reverse_apply		46481	0					
ANR	46507	Identifier	zend_hash_reverse_apply		46481	0					
ANR	46508	ArgumentList	& module_registry		46481	1					
ANR	46509	Argument	& module_registry		46481	0					
ANR	46510	UnaryOperationExpression	& module_registry		46481	0					
ANR	46511	UnaryOperator	&		46481	0					
ANR	46512	Identifier	module_registry		46481	1					
ANR	46513	Argument	module_registry_unload_temp_wrapper		46481	1					
ANR	46514	Identifier	module_registry_unload_temp_wrapper		46481	0					
ANR	46515	ElseStatement	else		46481	0					
ANR	46516	CompoundStatement		6:2:178:233	46481	0					
ANR	46517	IdentifierDeclStatement	zend_module_entry * * p = module_post_deactivate_handlers ;	2620:2:76525:76580	46481	0	True				
ANR	46518	IdentifierDecl	* * p = module_post_deactivate_handlers		46481	0					
ANR	46519	IdentifierDeclType	zend_module_entry * *		46481	0					
ANR	46520	Identifier	p		46481	1					
ANR	46521	AssignmentExpression	* * p = module_post_deactivate_handlers		46481	2		=			
ANR	46522	Identifier	module_post_deactivate_handlers		46481	0					
ANR	46523	Identifier	module_post_deactivate_handlers		46481	1					
ANR	46524	WhileStatement	while ( * p )		46481	1					
ANR	46525	Condition	* p	2622:9:76592:76593	46481	0	True				
ANR	46526	UnaryOperationExpression	* p		46481	0					
ANR	46527	UnaryOperator	*		46481	0					
ANR	46528	Identifier	p		46481	1					
ANR	46529	CompoundStatement		9:3:254:284	46481	1					
ANR	46530	IdentifierDeclStatement	zend_module_entry * module = * p ;	2623:3:76601:76631	46481	0	True				
ANR	46531	IdentifierDecl	* module = * p		46481	0					
ANR	46532	IdentifierDeclType	zend_module_entry *		46481	0					
ANR	46533	Identifier	module		46481	1					
ANR	46534	AssignmentExpression	* module = * p		46481	2		=			
ANR	46535	Identifier	module		46481	0					
ANR	46536	UnaryOperationExpression	* p		46481	1					
ANR	46537	UnaryOperator	*		46481	0					
ANR	46538	Identifier	p		46481	1					
ANR	46539	ExpressionStatement	module -> post_deactivate_func ( )	2625:3:76637:76667	46481	1	True				
ANR	46540	CallExpression	module -> post_deactivate_func ( )		46481	0					
ANR	46541	Callee	module -> post_deactivate_func		46481	0					
ANR	46542	PtrMemberAccess	module -> post_deactivate_func		46481	0					
ANR	46543	Identifier	module		46481	0					
ANR	46544	Identifier	post_deactivate_func		46481	1					
ANR	46545	ArgumentList			46481	1					
ANR	46546	ExpressionStatement	p ++	2626:3:76672:76675	46481	2	True				
ANR	46547	PostIncDecOperationExpression	p ++		46481	0					
ANR	46548	Identifier	p		46481	0					
ANR	46549	IncDec	++		46481	1					
ANR	46550	ReturnType	ZEND_API void		46481	1					
ANR	46551	Identifier	zend_post_deactivate_modules		46481	2					
ANR	46552	ParameterList			46481	3					
ANR	46553	CFGEntryNode	ENTRY		46481		True				
ANR	46554	CFGExitNode	EXIT		46481		True				
ANR	46555	Symbol	p		46481						
ANR	46556	Symbol	EG		46481						
ANR	46557	Symbol	full_tables_cleanup		46481						
ANR	46558	Symbol	module		46481						
ANR	46559	Symbol	& module_registry		46481						
ANR	46560	Symbol	module_post_deactivate_handlers		46481						
ANR	46561	Symbol	* p		46481						
ANR	46562	Symbol	exec_done_cb		46481						
ANR	46563	Symbol	module_registry_unload_temp_wrapper		46481						
ANR	46564	Function	zend_next_free_module	2633:0:76738:76845							
ANR	46565	FunctionDef	zend_next_free_module ()		46564	0					
ANR	46566	CompoundStatement		2634:0:76789:76845	46564	0					
ANR	46567	ReturnStatement	return zend_hash_num_elements ( & module_registry ) + 1 ;	2635:1:76792:76843	46564	0	True				
ANR	46568	AdditiveExpression	zend_hash_num_elements ( & module_registry ) + 1		46564	0		+			
ANR	46569	CallExpression	zend_hash_num_elements ( & module_registry )		46564	0					
ANR	46570	Callee	zend_hash_num_elements		46564	0					
ANR	46571	Identifier	zend_hash_num_elements		46564	0					
ANR	46572	ArgumentList	& module_registry		46564	1					
ANR	46573	Argument	& module_registry		46564	0					
ANR	46574	UnaryOperationExpression	& module_registry		46564	0					
ANR	46575	UnaryOperator	&		46564	0					
ANR	46576	Identifier	module_registry		46564	1					
ANR	46577	PrimaryExpression	1		46564	1					
ANR	46578	ReturnType	ZEND_API int		46564	1					
ANR	46579	Identifier	zend_next_free_module		46564	2					
ANR	46580	ParameterList			46564	3					
ANR	46581	CFGEntryNode	ENTRY		46564		True				
ANR	46582	CFGExitNode	EXIT		46564		True				
ANR	46583	Symbol	zend_hash_num_elements		46564						
ANR	46584	Symbol	& module_registry		46564						
ANR	46585	Function	do_register_internal_class	2639:0:76858:77869							
ANR	46586	FunctionDef	"do_register_internal_class (zend_class_entry * orig_class_entry , uint32_t ce_flags)"		46585	0					
ANR	46587	CompoundStatement		2640:0:76975:77869	46585	0					
ANR	46588	IdentifierDeclStatement	zend_class_entry * class_entry = malloc ( sizeof ( zend_class_entry ) ) ;	2641:1:76978:77042	46585	0	True				
ANR	46589	IdentifierDecl	* class_entry = malloc ( sizeof ( zend_class_entry ) )		46585	0					
ANR	46590	IdentifierDeclType	zend_class_entry *		46585	0					
ANR	46591	Identifier	class_entry		46585	1					
ANR	46592	AssignmentExpression	* class_entry = malloc ( sizeof ( zend_class_entry ) )		46585	2		=			
ANR	46593	Identifier	class_entry		46585	0					
ANR	46594	CallExpression	malloc ( sizeof ( zend_class_entry ) )		46585	1					
ANR	46595	Callee	malloc		46585	0					
ANR	46596	Identifier	malloc		46585	0					
ANR	46597	ArgumentList	sizeof ( zend_class_entry )		46585	1					
ANR	46598	Argument	sizeof ( zend_class_entry )		46585	0					
ANR	46599	SizeofExpression	sizeof ( zend_class_entry )		46585	0					
ANR	46600	Sizeof	sizeof		46585	0					
ANR	46601	SizeofOperand	zend_class_entry		46585	1					
ANR	46602	IdentifierDeclStatement	"zend_string * lowercase_name = zend_string_alloc ( ZSTR_LEN ( orig_class_entry -> name ) , 1 ) ;"	2642:1:77045:77129	46585	1	True				
ANR	46603	IdentifierDecl	"* lowercase_name = zend_string_alloc ( ZSTR_LEN ( orig_class_entry -> name ) , 1 )"		46585	0					
ANR	46604	IdentifierDeclType	zend_string *		46585	0					
ANR	46605	Identifier	lowercase_name		46585	1					
ANR	46606	AssignmentExpression	"* lowercase_name = zend_string_alloc ( ZSTR_LEN ( orig_class_entry -> name ) , 1 )"		46585	2		=			
ANR	46607	Identifier	lowercase_name		46585	0					
ANR	46608	CallExpression	"zend_string_alloc ( ZSTR_LEN ( orig_class_entry -> name ) , 1 )"		46585	1					
ANR	46609	Callee	zend_string_alloc		46585	0					
ANR	46610	Identifier	zend_string_alloc		46585	0					
ANR	46611	ArgumentList	ZSTR_LEN ( orig_class_entry -> name )		46585	1					
ANR	46612	Argument	ZSTR_LEN ( orig_class_entry -> name )		46585	0					
ANR	46613	CallExpression	ZSTR_LEN ( orig_class_entry -> name )		46585	0					
ANR	46614	Callee	ZSTR_LEN		46585	0					
ANR	46615	Identifier	ZSTR_LEN		46585	0					
ANR	46616	ArgumentList	orig_class_entry -> name		46585	1					
ANR	46617	Argument	orig_class_entry -> name		46585	0					
ANR	46618	PtrMemberAccess	orig_class_entry -> name		46585	0					
ANR	46619	Identifier	orig_class_entry		46585	0					
ANR	46620	Identifier	name		46585	1					
ANR	46621	Argument	1		46585	1					
ANR	46622	PrimaryExpression	1		46585	0					
ANR	46623	ExpressionStatement	* class_entry = * orig_class_entry	2643:1:77132:77164	46585	2	True				
ANR	46624	AssignmentExpression	* class_entry = * orig_class_entry		46585	0		=			
ANR	46625	UnaryOperationExpression	* class_entry		46585	0					
ANR	46626	UnaryOperator	*		46585	0					
ANR	46627	Identifier	class_entry		46585	1					
ANR	46628	UnaryOperationExpression	* orig_class_entry		46585	1					
ANR	46629	UnaryOperator	*		46585	0					
ANR	46630	Identifier	orig_class_entry		46585	1					
ANR	46631	ExpressionStatement	class_entry -> type = ZEND_INTERNAL_CLASS	2645:1:77168:77207	46585	3	True				
ANR	46632	AssignmentExpression	class_entry -> type = ZEND_INTERNAL_CLASS		46585	0		=			
ANR	46633	PtrMemberAccess	class_entry -> type		46585	0					
ANR	46634	Identifier	class_entry		46585	0					
ANR	46635	Identifier	type		46585	1					
ANR	46636	Identifier	ZEND_INTERNAL_CLASS		46585	1					
ANR	46637	ExpressionStatement	"zend_initialize_class_data ( class_entry , 0 )"	2646:1:77210:77252	46585	4	True				
ANR	46638	CallExpression	"zend_initialize_class_data ( class_entry , 0 )"		46585	0					
ANR	46639	Callee	zend_initialize_class_data		46585	0					
ANR	46640	Identifier	zend_initialize_class_data		46585	0					
ANR	46641	ArgumentList	class_entry		46585	1					
ANR	46642	Argument	class_entry		46585	0					
ANR	46643	Identifier	class_entry		46585	0					
ANR	46644	Argument	0		46585	1					
ANR	46645	PrimaryExpression	0		46585	0					
ANR	46646	ExpressionStatement	class_entry -> ce_flags = ce_flags | ZEND_ACC_CONSTANTS_UPDATED	2647:1:77255:77316	46585	5	True				
ANR	46647	AssignmentExpression	class_entry -> ce_flags = ce_flags | ZEND_ACC_CONSTANTS_UPDATED		46585	0		=			
ANR	46648	PtrMemberAccess	class_entry -> ce_flags		46585	0					
ANR	46649	Identifier	class_entry		46585	0					
ANR	46650	Identifier	ce_flags		46585	1					
ANR	46651	InclusiveOrExpression	ce_flags | ZEND_ACC_CONSTANTS_UPDATED		46585	1		|			
ANR	46652	Identifier	ce_flags		46585	0					
ANR	46653	Identifier	ZEND_ACC_CONSTANTS_UPDATED		46585	1					
ANR	46654	ExpressionStatement	class_entry -> info . internal . module = EG ( current_module )	2648:1:77319:77373	46585	6	True				
ANR	46655	AssignmentExpression	class_entry -> info . internal . module = EG ( current_module )		46585	0		=			
ANR	46656	MemberAccess	class_entry -> info . internal . module		46585	0					
ANR	46657	MemberAccess	class_entry -> info . internal		46585	0					
ANR	46658	PtrMemberAccess	class_entry -> info		46585	0					
ANR	46659	Identifier	class_entry		46585	0					
ANR	46660	Identifier	info		46585	1					
ANR	46661	Identifier	internal		46585	1					
ANR	46662	Identifier	module		46585	1					
ANR	46663	CallExpression	EG ( current_module )		46585	1					
ANR	46664	Callee	EG		46585	0					
ANR	46665	Identifier	EG		46585	0					
ANR	46666	ArgumentList	current_module		46585	1					
ANR	46667	Argument	current_module		46585	0					
ANR	46668	Identifier	current_module		46585	0					
ANR	46669	IfStatement	if ( class_entry -> info . internal . builtin_functions )		46585	7					
ANR	46670	Condition	class_entry -> info . internal . builtin_functions	2650:5:77381:77424	46585	0	True				
ANR	46671	MemberAccess	class_entry -> info . internal . builtin_functions		46585	0					
ANR	46672	MemberAccess	class_entry -> info . internal		46585	0					
ANR	46673	PtrMemberAccess	class_entry -> info		46585	0					
ANR	46674	Identifier	class_entry		46585	0					
ANR	46675	Identifier	info		46585	1					
ANR	46676	Identifier	internal		46585	1					
ANR	46677	Identifier	builtin_functions		46585	1					
ANR	46678	CompoundStatement		11:51:451:451	46585	1					
ANR	46679	ExpressionStatement	"zend_register_functions ( class_entry , class_entry -> info . internal . builtin_functions , & class_entry -> function_table , MODULE_PERSISTENT )"	2651:2:77431:77562	46585	0	True				
ANR	46680	CallExpression	"zend_register_functions ( class_entry , class_entry -> info . internal . builtin_functions , & class_entry -> function_table , MODULE_PERSISTENT )"		46585	0					
ANR	46681	Callee	zend_register_functions		46585	0					
ANR	46682	Identifier	zend_register_functions		46585	0					
ANR	46683	ArgumentList	class_entry		46585	1					
ANR	46684	Argument	class_entry		46585	0					
ANR	46685	Identifier	class_entry		46585	0					
ANR	46686	Argument	class_entry -> info . internal . builtin_functions		46585	1					
ANR	46687	MemberAccess	class_entry -> info . internal . builtin_functions		46585	0					
ANR	46688	MemberAccess	class_entry -> info . internal		46585	0					
ANR	46689	PtrMemberAccess	class_entry -> info		46585	0					
ANR	46690	Identifier	class_entry		46585	0					
ANR	46691	Identifier	info		46585	1					
ANR	46692	Identifier	internal		46585	1					
ANR	46693	Identifier	builtin_functions		46585	1					
ANR	46694	Argument	& class_entry -> function_table		46585	2					
ANR	46695	UnaryOperationExpression	& class_entry -> function_table		46585	0					
ANR	46696	UnaryOperator	&		46585	0					
ANR	46697	PtrMemberAccess	class_entry -> function_table		46585	1					
ANR	46698	Identifier	class_entry		46585	0					
ANR	46699	Identifier	function_table		46585	1					
ANR	46700	Argument	MODULE_PERSISTENT		46585	3					
ANR	46701	Identifier	MODULE_PERSISTENT		46585	0					
ANR	46702	ExpressionStatement	"zend_str_tolower_copy ( ZSTR_VAL ( lowercase_name ) , ZSTR_VAL ( orig_class_entry -> name ) , ZSTR_LEN ( class_entry -> name ) )"	2654:1:77569:77679	46585	8	True				
ANR	46703	CallExpression	"zend_str_tolower_copy ( ZSTR_VAL ( lowercase_name ) , ZSTR_VAL ( orig_class_entry -> name ) , ZSTR_LEN ( class_entry -> name ) )"		46585	0					
ANR	46704	Callee	zend_str_tolower_copy		46585	0					
ANR	46705	Identifier	zend_str_tolower_copy		46585	0					
ANR	46706	ArgumentList	ZSTR_VAL ( lowercase_name )		46585	1					
ANR	46707	Argument	ZSTR_VAL ( lowercase_name )		46585	0					
ANR	46708	CallExpression	ZSTR_VAL ( lowercase_name )		46585	0					
ANR	46709	Callee	ZSTR_VAL		46585	0					
ANR	46710	Identifier	ZSTR_VAL		46585	0					
ANR	46711	ArgumentList	lowercase_name		46585	1					
ANR	46712	Argument	lowercase_name		46585	0					
ANR	46713	Identifier	lowercase_name		46585	0					
ANR	46714	Argument	ZSTR_VAL ( orig_class_entry -> name )		46585	1					
ANR	46715	CallExpression	ZSTR_VAL ( orig_class_entry -> name )		46585	0					
ANR	46716	Callee	ZSTR_VAL		46585	0					
ANR	46717	Identifier	ZSTR_VAL		46585	0					
ANR	46718	ArgumentList	orig_class_entry -> name		46585	1					
ANR	46719	Argument	orig_class_entry -> name		46585	0					
ANR	46720	PtrMemberAccess	orig_class_entry -> name		46585	0					
ANR	46721	Identifier	orig_class_entry		46585	0					
ANR	46722	Identifier	name		46585	1					
ANR	46723	Argument	ZSTR_LEN ( class_entry -> name )		46585	2					
ANR	46724	CallExpression	ZSTR_LEN ( class_entry -> name )		46585	0					
ANR	46725	Callee	ZSTR_LEN		46585	0					
ANR	46726	Identifier	ZSTR_LEN		46585	0					
ANR	46727	ArgumentList	class_entry -> name		46585	1					
ANR	46728	Argument	class_entry -> name		46585	0					
ANR	46729	PtrMemberAccess	class_entry -> name		46585	0					
ANR	46730	Identifier	class_entry		46585	0					
ANR	46731	Identifier	name		46585	1					
ANR	46732	ExpressionStatement	lowercase_name = zend_new_interned_string ( lowercase_name )	2655:1:77682:77739	46585	9	True				
ANR	46733	AssignmentExpression	lowercase_name = zend_new_interned_string ( lowercase_name )		46585	0		=			
ANR	46734	Identifier	lowercase_name		46585	0					
ANR	46735	CallExpression	zend_new_interned_string ( lowercase_name )		46585	1					
ANR	46736	Callee	zend_new_interned_string		46585	0					
ANR	46737	Identifier	zend_new_interned_string		46585	0					
ANR	46738	ArgumentList	lowercase_name		46585	1					
ANR	46739	Argument	lowercase_name		46585	0					
ANR	46740	Identifier	lowercase_name		46585	0					
ANR	46741	ExpressionStatement	"zend_hash_update_ptr ( CG ( class_table ) , lowercase_name , class_entry )"	2656:1:77742:77808	46585	10	True				
ANR	46742	CallExpression	"zend_hash_update_ptr ( CG ( class_table ) , lowercase_name , class_entry )"		46585	0					
ANR	46743	Callee	zend_hash_update_ptr		46585	0					
ANR	46744	Identifier	zend_hash_update_ptr		46585	0					
ANR	46745	ArgumentList	CG ( class_table )		46585	1					
ANR	46746	Argument	CG ( class_table )		46585	0					
ANR	46747	CallExpression	CG ( class_table )		46585	0					
ANR	46748	Callee	CG		46585	0					
ANR	46749	Identifier	CG		46585	0					
ANR	46750	ArgumentList	class_table		46585	1					
ANR	46751	Argument	class_table		46585	0					
ANR	46752	Identifier	class_table		46585	0					
ANR	46753	Argument	lowercase_name		46585	1					
ANR	46754	Identifier	lowercase_name		46585	0					
ANR	46755	Argument	class_entry		46585	2					
ANR	46756	Identifier	class_entry		46585	0					
ANR	46757	ExpressionStatement	zend_string_release ( lowercase_name )	2657:1:77811:77846	46585	11	True				
ANR	46758	CallExpression	zend_string_release ( lowercase_name )		46585	0					
ANR	46759	Callee	zend_string_release		46585	0					
ANR	46760	Identifier	zend_string_release		46585	0					
ANR	46761	ArgumentList	lowercase_name		46585	1					
ANR	46762	Argument	lowercase_name		46585	0					
ANR	46763	Identifier	lowercase_name		46585	0					
ANR	46764	ReturnStatement	return class_entry ;	2658:1:77849:77867	46585	12	True				
ANR	46765	Identifier	class_entry		46585	0					
ANR	46766	ReturnType	static zend_class_entry *		46585	1					
ANR	46767	Identifier	do_register_internal_class		46585	2					
ANR	46768	ParameterList	"zend_class_entry * orig_class_entry , uint32_t ce_flags"		46585	3					
ANR	46769	Parameter	zend_class_entry * orig_class_entry	2639:52:76910:76943	46585	0	True				
ANR	46770	ParameterType	zend_class_entry *		46585	0					
ANR	46771	Identifier	orig_class_entry		46585	1					
ANR	46772	Parameter	uint32_t ce_flags	2639:88:76946:76962	46585	1	True				
ANR	46773	ParameterType	uint32_t		46585	0					
ANR	46774	Identifier	ce_flags		46585	1					
ANR	46775	CFGEntryNode	ENTRY		46585		True				
ANR	46776	CFGExitNode	EXIT		46585		True				
ANR	46777	Symbol	ZEND_ACC_CONSTANTS_UPDATED		46585						
ANR	46778	Symbol	class_entry -> info		46585						
ANR	46779	Symbol	current_module		46585						
ANR	46780	Symbol	class_entry -> ce_flags		46585						
ANR	46781	Symbol	class_entry -> info . internal . builtin_functions		46585						
ANR	46782	Symbol	orig_class_entry -> name		46585						
ANR	46783	Symbol	class_table		46585						
ANR	46784	Symbol	class_entry -> type		46585						
ANR	46785	Symbol	ZEND_INTERNAL_CLASS		46585						
ANR	46786	Symbol	class_entry -> info . internal . module		46585						
ANR	46787	Symbol	malloc		46585						
ANR	46788	Symbol	zend_string_alloc		46585						
ANR	46789	Symbol	EG		46585						
ANR	46790	Symbol	class_entry -> name		46585						
ANR	46791	Symbol	CG		46585						
ANR	46792	Symbol	class_entry		46585						
ANR	46793	Symbol	MODULE_PERSISTENT		46585						
ANR	46794	Symbol	* orig_class_entry		46585						
ANR	46795	Symbol	ZSTR_VAL		46585						
ANR	46796	Symbol	orig_class_entry		46585						
ANR	46797	Symbol	class_entry -> info . internal		46585						
ANR	46798	Symbol	zend_new_interned_string		46585						
ANR	46799	Symbol	* class_entry		46585						
ANR	46800	Symbol	ZSTR_LEN		46585						
ANR	46801	Symbol	lowercase_name		46585						
ANR	46802	Symbol	ce_flags		46585						
ANR	46803	Symbol	& class_entry -> function_table		46585						
ANR	46804	Function	zend_register_internal_class_ex	2667:0:78187:78511							
ANR	46805	FunctionDef	"zend_register_internal_class_ex (zend_class_entry * class_entry , zend_class_entry * parent_ce)"		46804	0					
ANR	46806	CompoundStatement		2668:0:78316:78511	46804	0					
ANR	46807	IdentifierDeclStatement	zend_class_entry * register_class ;	2669:1:78319:78351	46804	0	True				
ANR	46808	IdentifierDecl	* register_class		46804	0					
ANR	46809	IdentifierDeclType	zend_class_entry *		46804	0					
ANR	46810	Identifier	register_class		46804	1					
ANR	46811	ExpressionStatement	register_class = zend_register_internal_class ( class_entry )	2671:1:78355:78413	46804	1	True				
ANR	46812	AssignmentExpression	register_class = zend_register_internal_class ( class_entry )		46804	0		=			
ANR	46813	Identifier	register_class		46804	0					
ANR	46814	CallExpression	zend_register_internal_class ( class_entry )		46804	1					
ANR	46815	Callee	zend_register_internal_class		46804	0					
ANR	46816	Identifier	zend_register_internal_class		46804	0					
ANR	46817	ArgumentList	class_entry		46804	1					
ANR	46818	Argument	class_entry		46804	0					
ANR	46819	Identifier	class_entry		46804	0					
ANR	46820	IfStatement	if ( parent_ce )		46804	2					
ANR	46821	Condition	parent_ce	2673:5:78421:78429	46804	0	True				
ANR	46822	Identifier	parent_ce		46804	0					
ANR	46823	CompoundStatement		6:16:115:115	46804	1					
ANR	46824	ExpressionStatement	"zend_do_inheritance ( register_class , parent_ce )"	2674:2:78436:78482	46804	0	True				
ANR	46825	CallExpression	"zend_do_inheritance ( register_class , parent_ce )"		46804	0					
ANR	46826	Callee	zend_do_inheritance		46804	0					
ANR	46827	Identifier	zend_do_inheritance		46804	0					
ANR	46828	ArgumentList	register_class		46804	1					
ANR	46829	Argument	register_class		46804	0					
ANR	46830	Identifier	register_class		46804	0					
ANR	46831	Argument	parent_ce		46804	1					
ANR	46832	Identifier	parent_ce		46804	0					
ANR	46833	ReturnStatement	return register_class ;	2676:1:78488:78509	46804	3	True				
ANR	46834	Identifier	register_class		46804	0					
ANR	46835	ReturnType	ZEND_API zend_class_entry *		46804	1					
ANR	46836	Identifier	zend_register_internal_class_ex		46804	2					
ANR	46837	ParameterList	"zend_class_entry * class_entry , zend_class_entry * parent_ce"		46804	3					
ANR	46838	Parameter	zend_class_entry * class_entry	2667:59:78246:78274	46804	0	True				
ANR	46839	ParameterType	zend_class_entry *		46804	0					
ANR	46840	Identifier	class_entry		46804	1					
ANR	46841	Parameter	zend_class_entry * parent_ce	2667:90:78277:78303	46804	1	True				
ANR	46842	ParameterType	zend_class_entry *		46804	0					
ANR	46843	Identifier	parent_ce		46804	1					
ANR	46844	CFGEntryNode	ENTRY		46804		True				
ANR	46845	CFGExitNode	EXIT		46804		True				
ANR	46846	Symbol	parent_ce		46804						
ANR	46847	Symbol	class_entry		46804						
ANR	46848	Symbol	register_class		46804						
ANR	46849	Symbol	zend_register_internal_class		46804						
ANR	46850	Function	zend_class_implements	2680:0:78524:78915							
ANR	46851	FunctionDef	"zend_class_implements (zend_class_entry * class_entry , int num_interfaces)"		46850	0					
ANR	46852	CompoundStatement		2681:0:78626:78915	46850	0					
ANR	46853	IdentifierDeclStatement	zend_class_entry * interface_entry ;	2682:1:78629:78662	46850	0	True				
ANR	46854	IdentifierDecl	* interface_entry		46850	0					
ANR	46855	IdentifierDeclType	zend_class_entry *		46850	0					
ANR	46856	Identifier	interface_entry		46850	1					
ANR	46857	IdentifierDeclStatement	va_list interface_list ;	2683:1:78665:78687	46850	1	True				
ANR	46858	IdentifierDecl	interface_list		46850	0					
ANR	46859	IdentifierDeclType	va_list		46850	0					
ANR	46860	Identifier	interface_list		46850	1					
ANR	46861	ExpressionStatement	"va_start ( interface_list , num_interfaces )"	2684:1:78690:78730	46850	2	True				
ANR	46862	CallExpression	"va_start ( interface_list , num_interfaces )"		46850	0					
ANR	46863	Callee	va_start		46850	0					
ANR	46864	Identifier	va_start		46850	0					
ANR	46865	ArgumentList	interface_list		46850	1					
ANR	46866	Argument	interface_list		46850	0					
ANR	46867	Identifier	interface_list		46850	0					
ANR	46868	Argument	num_interfaces		46850	1					
ANR	46869	Identifier	num_interfaces		46850	0					
ANR	46870	WhileStatement	while ( num_interfaces -- )		46850	3					
ANR	46871	Condition	num_interfaces --	2686:8:78741:78756	46850	0	True				
ANR	46872	PostIncDecOperationExpression	num_interfaces --		46850	0					
ANR	46873	Identifier	num_interfaces		46850	0					
ANR	46874	IncDec	--		46850	1					
ANR	46875	CompoundStatement		6:26:132:132	46850	1					
ANR	46876	Statement	interface_entry	2687:2:78763:78777	46850	0	True				
ANR	46877	Statement	=	2687:18:78779:78779	46850	1	True				
ANR	46878	Statement	va_arg	2687:20:78781:78786	46850	2	True				
ANR	46879	Statement	(	2687:26:78787:78787	46850	3	True				
ANR	46880	Statement	interface_list	2687:27:78788:78801	46850	4	True				
ANR	46881	Statement	","	2687:41:78802:78802	46850	5	True				
ANR	46882	Statement	zend_class_entry	2687:43:78804:78819	46850	6	True				
ANR	46883	Statement	*	2687:60:78821:78821	46850	7	True				
ANR	46884	Statement	)	2687:61:78822:78822	46850	8	True				
ANR	46885	ExpressionStatement		2687:62:78823:78823	46850	9	True				
ANR	46886	ExpressionStatement	"zend_do_implement_interface ( class_entry , interface_entry )"	2688:2:78827:78884	46850	10	True				
ANR	46887	CallExpression	"zend_do_implement_interface ( class_entry , interface_entry )"		46850	0					
ANR	46888	Callee	zend_do_implement_interface		46850	0					
ANR	46889	Identifier	zend_do_implement_interface		46850	0					
ANR	46890	ArgumentList	class_entry		46850	1					
ANR	46891	Argument	class_entry		46850	0					
ANR	46892	Identifier	class_entry		46850	0					
ANR	46893	Argument	interface_entry		46850	1					
ANR	46894	Identifier	interface_entry		46850	0					
ANR	46895	ExpressionStatement	va_end ( interface_list )	2691:1:78891:78913	46850	4	True				
ANR	46896	CallExpression	va_end ( interface_list )		46850	0					
ANR	46897	Callee	va_end		46850	0					
ANR	46898	Identifier	va_end		46850	0					
ANR	46899	ArgumentList	interface_list		46850	1					
ANR	46900	Argument	interface_list		46850	0					
ANR	46901	Identifier	interface_list		46850	0					
ANR	46902	ReturnType	ZEND_API void		46850	1					
ANR	46903	Identifier	zend_class_implements		46850	2					
ANR	46904	ParameterList	"zend_class_entry * class_entry , int num_interfaces"		46850	3					
ANR	46905	Parameter	zend_class_entry * class_entry	2680:36:78560:78588	46850	0	True				
ANR	46906	ParameterType	zend_class_entry *		46850	0					
ANR	46907	Identifier	class_entry		46850	1					
ANR	46908	Parameter	int num_interfaces	2680:67:78591:78608	46850	1	True				
ANR	46909	ParameterType	int		46850	0					
ANR	46910	Identifier	num_interfaces		46850	1					
ANR	46911	CFGEntryNode	ENTRY		46850		True				
ANR	46912	CFGExitNode	EXIT		46850		True				
ANR	46913	Symbol	class_entry		46850						
ANR	46914	Symbol	num_interfaces		46850						
ANR	46915	Symbol	interface_list		46850						
ANR	46916	Symbol	interface_entry		46850						
ANR	46917	Function	zend_register_internal_class	2697:0:79027:79188							
ANR	46918	FunctionDef	zend_register_internal_class (zend_class_entry * orig_class_entry)		46917	0					
ANR	46919	CompoundStatement		2698:0:79129:79188	46917	0					
ANR	46920	ReturnStatement	"return do_register_internal_class ( orig_class_entry , 0 ) ;"	2699:1:79132:79186	46917	0	True				
ANR	46921	CallExpression	"do_register_internal_class ( orig_class_entry , 0 )"		46917	0					
ANR	46922	Callee	do_register_internal_class		46917	0					
ANR	46923	Identifier	do_register_internal_class		46917	0					
ANR	46924	ArgumentList	orig_class_entry		46917	1					
ANR	46925	Argument	orig_class_entry		46917	0					
ANR	46926	Identifier	orig_class_entry		46917	0					
ANR	46927	Argument	0		46917	1					
ANR	46928	PrimaryExpression	0		46917	0					
ANR	46929	ReturnType	ZEND_API zend_class_entry *		46917	1					
ANR	46930	Identifier	zend_register_internal_class		46917	2					
ANR	46931	ParameterList	zend_class_entry * orig_class_entry		46917	3					
ANR	46932	Parameter	zend_class_entry * orig_class_entry	2697:56:79083:79116	46917	0	True				
ANR	46933	ParameterType	zend_class_entry *		46917	0					
ANR	46934	Identifier	orig_class_entry		46917	1					
ANR	46935	CFGEntryNode	ENTRY		46917		True				
ANR	46936	CFGExitNode	EXIT		46917		True				
ANR	46937	Symbol	orig_class_entry		46917						
ANR	46938	Symbol	do_register_internal_class		46917						
ANR	46939	Function	zend_register_internal_interface	2703:0:79201:79383							
ANR	46940	FunctionDef	zend_register_internal_interface (zend_class_entry * orig_class_entry)		46939	0					
ANR	46941	CompoundStatement		2704:0:79307:79383	46939	0					
ANR	46942	ReturnStatement	"return do_register_internal_class ( orig_class_entry , ZEND_ACC_INTERFACE ) ;"	2705:1:79310:79381	46939	0	True				
ANR	46943	CallExpression	"do_register_internal_class ( orig_class_entry , ZEND_ACC_INTERFACE )"		46939	0					
ANR	46944	Callee	do_register_internal_class		46939	0					
ANR	46945	Identifier	do_register_internal_class		46939	0					
ANR	46946	ArgumentList	orig_class_entry		46939	1					
ANR	46947	Argument	orig_class_entry		46939	0					
ANR	46948	Identifier	orig_class_entry		46939	0					
ANR	46949	Argument	ZEND_ACC_INTERFACE		46939	1					
ANR	46950	Identifier	ZEND_ACC_INTERFACE		46939	0					
ANR	46951	ReturnType	ZEND_API zend_class_entry *		46939	1					
ANR	46952	Identifier	zend_register_internal_interface		46939	2					
ANR	46953	ParameterList	zend_class_entry * orig_class_entry		46939	3					
ANR	46954	Parameter	zend_class_entry * orig_class_entry	2703:60:79261:79294	46939	0	True				
ANR	46955	ParameterType	zend_class_entry *		46939	0					
ANR	46956	Identifier	orig_class_entry		46939	1					
ANR	46957	CFGEntryNode	ENTRY		46939		True				
ANR	46958	CFGExitNode	EXIT		46939		True				
ANR	46959	Symbol	orig_class_entry		46939						
ANR	46960	Symbol	do_register_internal_class		46939						
ANR	46961	Symbol	ZEND_ACC_INTERFACE		46939						
ANR	46962	Function	zend_register_class_alias_ex	2709:0:79396:79969							
ANR	46963	FunctionDef	"zend_register_class_alias_ex (const char * name , size_t name_len , zend_class_entry * ce)"		46962	0					
ANR	46964	CompoundStatement		2710:0:79505:79969	46962	0					
ANR	46965	IdentifierDeclStatement	zend_string * lcname ;	2711:1:79508:79527	46962	0	True				
ANR	46966	IdentifierDecl	* lcname		46962	0					
ANR	46967	IdentifierDeclType	zend_string *		46962	0					
ANR	46968	Identifier	lcname		46962	1					
ANR	46969	IfStatement	if ( name [ 0 ] == '\\\\' )		46962	1					
ANR	46970	Condition	name [ 0 ] == '\\\\'	2713:5:79535:79549	46962	0	True				
ANR	46971	EqualityExpression	name [ 0 ] == '\\\\'		46962	0		==			
ANR	46972	ArrayIndexing	name [ 0 ]		46962	0					
ANR	46973	Identifier	name		46962	0					
ANR	46974	PrimaryExpression	0		46962	1					
ANR	46975	PrimaryExpression	'\\\\'		46962	1					
ANR	46976	CompoundStatement		4:22:46:46	46962	1					
ANR	46977	ExpressionStatement	"lcname = zend_string_alloc ( name_len - 1 , 1 )"	2714:2:79556:79597	46962	0	True				
ANR	46978	AssignmentExpression	"lcname = zend_string_alloc ( name_len - 1 , 1 )"		46962	0		=			
ANR	46979	Identifier	lcname		46962	0					
ANR	46980	CallExpression	"zend_string_alloc ( name_len - 1 , 1 )"		46962	1					
ANR	46981	Callee	zend_string_alloc		46962	0					
ANR	46982	Identifier	zend_string_alloc		46962	0					
ANR	46983	ArgumentList	name_len - 1		46962	1					
ANR	46984	Argument	name_len - 1		46962	0					
ANR	46985	AdditiveExpression	name_len - 1		46962	0		-			
ANR	46986	Identifier	name_len		46962	0					
ANR	46987	PrimaryExpression	1		46962	1					
ANR	46988	Argument	1		46962	1					
ANR	46989	PrimaryExpression	1		46962	0					
ANR	46990	ExpressionStatement	"zend_str_tolower_copy ( ZSTR_VAL ( lcname ) , name + 1 , name_len - 1 )"	2715:2:79601:79660	46962	1	True				
ANR	46991	CallExpression	"zend_str_tolower_copy ( ZSTR_VAL ( lcname ) , name + 1 , name_len - 1 )"		46962	0					
ANR	46992	Callee	zend_str_tolower_copy		46962	0					
ANR	46993	Identifier	zend_str_tolower_copy		46962	0					
ANR	46994	ArgumentList	ZSTR_VAL ( lcname )		46962	1					
ANR	46995	Argument	ZSTR_VAL ( lcname )		46962	0					
ANR	46996	CallExpression	ZSTR_VAL ( lcname )		46962	0					
ANR	46997	Callee	ZSTR_VAL		46962	0					
ANR	46998	Identifier	ZSTR_VAL		46962	0					
ANR	46999	ArgumentList	lcname		46962	1					
ANR	47000	Argument	lcname		46962	0					
ANR	47001	Identifier	lcname		46962	0					
ANR	47002	Argument	name + 1		46962	1					
ANR	47003	AdditiveExpression	name + 1		46962	0		+			
ANR	47004	Identifier	name		46962	0					
ANR	47005	PrimaryExpression	1		46962	1					
ANR	47006	Argument	name_len - 1		46962	2					
ANR	47007	AdditiveExpression	name_len - 1		46962	0		-			
ANR	47008	Identifier	name_len		46962	0					
ANR	47009	PrimaryExpression	1		46962	1					
ANR	47010	ElseStatement	else		46962	0					
ANR	47011	CompoundStatement		7:8:164:164	46962	0					
ANR	47012	ExpressionStatement	"lcname = zend_string_alloc ( name_len , 1 )"	2717:2:79674:79713	46962	0	True				
ANR	47013	AssignmentExpression	"lcname = zend_string_alloc ( name_len , 1 )"		46962	0		=			
ANR	47014	Identifier	lcname		46962	0					
ANR	47015	CallExpression	"zend_string_alloc ( name_len , 1 )"		46962	1					
ANR	47016	Callee	zend_string_alloc		46962	0					
ANR	47017	Identifier	zend_string_alloc		46962	0					
ANR	47018	ArgumentList	name_len		46962	1					
ANR	47019	Argument	name_len		46962	0					
ANR	47020	Identifier	name_len		46962	0					
ANR	47021	Argument	1		46962	1					
ANR	47022	PrimaryExpression	1		46962	0					
ANR	47023	ExpressionStatement	"zend_str_tolower_copy ( ZSTR_VAL ( lcname ) , name , name_len )"	2718:2:79717:79772	46962	1	True				
ANR	47024	CallExpression	"zend_str_tolower_copy ( ZSTR_VAL ( lcname ) , name , name_len )"		46962	0					
ANR	47025	Callee	zend_str_tolower_copy		46962	0					
ANR	47026	Identifier	zend_str_tolower_copy		46962	0					
ANR	47027	ArgumentList	ZSTR_VAL ( lcname )		46962	1					
ANR	47028	Argument	ZSTR_VAL ( lcname )		46962	0					
ANR	47029	CallExpression	ZSTR_VAL ( lcname )		46962	0					
ANR	47030	Callee	ZSTR_VAL		46962	0					
ANR	47031	Identifier	ZSTR_VAL		46962	0					
ANR	47032	ArgumentList	lcname		46962	1					
ANR	47033	Argument	lcname		46962	0					
ANR	47034	Identifier	lcname		46962	0					
ANR	47035	Argument	name		46962	1					
ANR	47036	Identifier	name		46962	0					
ANR	47037	Argument	name_len		46962	2					
ANR	47038	Identifier	name_len		46962	0					
ANR	47039	ExpressionStatement	zend_assert_valid_class_name ( lcname )	2721:1:79779:79815	46962	2	True				
ANR	47040	CallExpression	zend_assert_valid_class_name ( lcname )		46962	0					
ANR	47041	Callee	zend_assert_valid_class_name		46962	0					
ANR	47042	Identifier	zend_assert_valid_class_name		46962	0					
ANR	47043	ArgumentList	lcname		46962	1					
ANR	47044	Argument	lcname		46962	0					
ANR	47045	Identifier	lcname		46962	0					
ANR	47046	ExpressionStatement	"ce = zend_hash_add_ptr ( CG ( class_table ) , lcname , ce )"	2723:1:79819:79870	46962	3	True				
ANR	47047	AssignmentExpression	"ce = zend_hash_add_ptr ( CG ( class_table ) , lcname , ce )"		46962	0		=			
ANR	47048	Identifier	ce		46962	0					
ANR	47049	CallExpression	"zend_hash_add_ptr ( CG ( class_table ) , lcname , ce )"		46962	1					
ANR	47050	Callee	zend_hash_add_ptr		46962	0					
ANR	47051	Identifier	zend_hash_add_ptr		46962	0					
ANR	47052	ArgumentList	CG ( class_table )		46962	1					
ANR	47053	Argument	CG ( class_table )		46962	0					
ANR	47054	CallExpression	CG ( class_table )		46962	0					
ANR	47055	Callee	CG		46962	0					
ANR	47056	Identifier	CG		46962	0					
ANR	47057	ArgumentList	class_table		46962	1					
ANR	47058	Argument	class_table		46962	0					
ANR	47059	Identifier	class_table		46962	0					
ANR	47060	Argument	lcname		46962	1					
ANR	47061	Identifier	lcname		46962	0					
ANR	47062	Argument	ce		46962	2					
ANR	47063	Identifier	ce		46962	0					
ANR	47064	ExpressionStatement	zend_string_release ( lcname )	2724:1:79873:79900	46962	4	True				
ANR	47065	CallExpression	zend_string_release ( lcname )		46962	0					
ANR	47066	Callee	zend_string_release		46962	0					
ANR	47067	Identifier	zend_string_release		46962	0					
ANR	47068	ArgumentList	lcname		46962	1					
ANR	47069	Argument	lcname		46962	0					
ANR	47070	Identifier	lcname		46962	0					
ANR	47071	IfStatement	if ( ce )		46962	5					
ANR	47072	Condition	ce	2725:5:79907:79908	46962	0	True				
ANR	47073	Identifier	ce		46962	0					
ANR	47074	CompoundStatement		16:9:405:405	46962	1					
ANR	47075	ExpressionStatement	ce -> refcount ++	2726:2:79915:79929	46962	0	True				
ANR	47076	PostIncDecOperationExpression	ce -> refcount ++		46962	0					
ANR	47077	PtrMemberAccess	ce -> refcount		46962	0					
ANR	47078	Identifier	ce		46962	0					
ANR	47079	Identifier	refcount		46962	1					
ANR	47080	IncDec	++		46962	1					
ANR	47081	ReturnStatement	return SUCCESS ;	2727:2:79933:79947	46962	1	True				
ANR	47082	Identifier	SUCCESS		46962	0					
ANR	47083	ReturnStatement	return FAILURE ;	2729:1:79953:79967	46962	6	True				
ANR	47084	Identifier	FAILURE		46962	0					
ANR	47085	ReturnType	ZEND_API int		46962	1					
ANR	47086	Identifier	zend_register_class_alias_ex		46962	2					
ANR	47087	ParameterList	"const char * name , size_t name_len , zend_class_entry * ce"		46962	3					
ANR	47088	Parameter	const char * name	2709:42:79438:79453	46962	0	True				
ANR	47089	ParameterType	const char *		46962	0					
ANR	47090	Identifier	name		46962	1					
ANR	47091	Parameter	size_t name_len	2709:60:79456:79470	46962	1	True				
ANR	47092	ParameterType	size_t		46962	0					
ANR	47093	Identifier	name_len		46962	1					
ANR	47094	Parameter	zend_class_entry * ce	2709:77:79473:79492	46962	2	True				
ANR	47095	ParameterType	zend_class_entry *		46962	0					
ANR	47096	Identifier	ce		46962	1					
ANR	47097	CFGEntryNode	ENTRY		46962		True				
ANR	47098	CFGExitNode	EXIT		46962		True				
ANR	47099	Symbol	* name		46962						
ANR	47100	Symbol	ce		46962						
ANR	47101	Symbol	zend_string_alloc		46962						
ANR	47102	Symbol	SUCCESS		46962						
ANR	47103	Symbol	CG		46962						
ANR	47104	Symbol	* ce		46962						
ANR	47105	Symbol	ce -> refcount		46962						
ANR	47106	Symbol	FAILURE		46962						
ANR	47107	Symbol	ZSTR_VAL		46962						
ANR	47108	Symbol	lcname		46962						
ANR	47109	Symbol	name		46962						
ANR	47110	Symbol	name_len		46962						
ANR	47111	Symbol	zend_hash_add_ptr		46962						
ANR	47112	Symbol	class_table		46962						
ANR	47113	Function	zend_set_hash_symbol	2733:0:79982:80581							
ANR	47114	FunctionDef	"zend_set_hash_symbol (zval * symbol , const char * name , int name_length , zend_bool is_ref , int num_symbol_tables)"		47113	0					
ANR	47115	CompoundStatement		2734:0:80121:80581	47113	0					
ANR	47116	IdentifierDeclStatement	HashTable * symbol_table ;	2735:1:80124:80147	47113	0	True				
ANR	47117	IdentifierDecl	* symbol_table		47113	0					
ANR	47118	IdentifierDeclType	HashTable *		47113	0					
ANR	47119	Identifier	symbol_table		47113	1					
ANR	47120	IdentifierDeclStatement	va_list symbol_table_list ;	2736:1:80150:80175	47113	1	True				
ANR	47121	IdentifierDecl	symbol_table_list		47113	0					
ANR	47122	IdentifierDeclType	va_list		47113	0					
ANR	47123	Identifier	symbol_table_list		47113	1					
ANR	47124	IfStatement	if ( num_symbol_tables <= 0 )		47113	2					
ANR	47125	Condition	num_symbol_tables <= 0	2738:5:80183:80204	47113	0	True				
ANR	47126	RelationalExpression	num_symbol_tables <= 0		47113	0		<=			
ANR	47127	Identifier	num_symbol_tables		47113	0					
ANR	47128	PrimaryExpression	0		47113	1					
ANR	47129	ReturnStatement	return FAILURE ;	2738:29:80207:80221	47113	1	True				
ANR	47130	Identifier	FAILURE		47113	0					
ANR	47131	IfStatement	if ( is_ref )		47113	3					
ANR	47132	Condition	is_ref	2740:5:80229:80234	47113	0	True				
ANR	47133	Identifier	is_ref		47113	0					
ANR	47134	CompoundStatement		7:13:115:115	47113	1					
ANR	47135	ExpressionStatement	ZVAL_MAKE_REF ( symbol )	2741:2:80241:80262	47113	0	True				
ANR	47136	CallExpression	ZVAL_MAKE_REF ( symbol )		47113	0					
ANR	47137	Callee	ZVAL_MAKE_REF		47113	0					
ANR	47138	Identifier	ZVAL_MAKE_REF		47113	0					
ANR	47139	ArgumentList	symbol		47113	1					
ANR	47140	Argument	symbol		47113	0					
ANR	47141	Identifier	symbol		47113	0					
ANR	47142	ExpressionStatement	"va_start ( symbol_table_list , num_symbol_tables )"	2744:1:80269:80315	47113	4	True				
ANR	47143	CallExpression	"va_start ( symbol_table_list , num_symbol_tables )"		47113	0					
ANR	47144	Callee	va_start		47113	0					
ANR	47145	Identifier	va_start		47113	0					
ANR	47146	ArgumentList	symbol_table_list		47113	1					
ANR	47147	Argument	symbol_table_list		47113	0					
ANR	47148	Identifier	symbol_table_list		47113	0					
ANR	47149	Argument	num_symbol_tables		47113	1					
ANR	47150	Identifier	num_symbol_tables		47113	0					
ANR	47151	WhileStatement	while ( num_symbol_tables -- > 0 )		47113	5					
ANR	47152	Condition	num_symbol_tables -- > 0	2745:8:80325:80347	47113	0	True				
ANR	47153	RelationalExpression	num_symbol_tables -- > 0		47113	0		>			
ANR	47154	PostIncDecOperationExpression	num_symbol_tables --		47113	0					
ANR	47155	Identifier	num_symbol_tables		47113	0					
ANR	47156	IncDec	--		47113	1					
ANR	47157	PrimaryExpression	0		47113	1					
ANR	47158	CompoundStatement		12:33:228:228	47113	1					
ANR	47159	Statement	symbol_table	2746:2:80354:80365	47113	0	True				
ANR	47160	Statement	=	2746:15:80367:80367	47113	1	True				
ANR	47161	Statement	va_arg	2746:17:80369:80374	47113	2	True				
ANR	47162	Statement	(	2746:23:80375:80375	47113	3	True				
ANR	47163	Statement	symbol_table_list	2746:24:80376:80392	47113	4	True				
ANR	47164	Statement	","	2746:41:80393:80393	47113	5	True				
ANR	47165	Statement	HashTable	2746:43:80395:80403	47113	6	True				
ANR	47166	Statement	*	2746:53:80405:80405	47113	7	True				
ANR	47167	Statement	)	2746:54:80406:80406	47113	8	True				
ANR	47168	ExpressionStatement		2746:55:80407:80407	47113	9	True				
ANR	47169	ExpressionStatement	"zend_hash_str_update ( symbol_table , name , name_length , symbol )"	2747:2:80411:80472	47113	10	True				
ANR	47170	CallExpression	"zend_hash_str_update ( symbol_table , name , name_length , symbol )"		47113	0					
ANR	47171	Callee	zend_hash_str_update		47113	0					
ANR	47172	Identifier	zend_hash_str_update		47113	0					
ANR	47173	ArgumentList	symbol_table		47113	1					
ANR	47174	Argument	symbol_table		47113	0					
ANR	47175	Identifier	symbol_table		47113	0					
ANR	47176	Argument	name		47113	1					
ANR	47177	Identifier	name		47113	0					
ANR	47178	Argument	name_length		47113	2					
ANR	47179	Identifier	name_length		47113	0					
ANR	47180	Argument	symbol		47113	3					
ANR	47181	Identifier	symbol		47113	0					
ANR	47182	IfStatement	if ( Z_REFCOUNTED_P ( symbol ) )		47113	11					
ANR	47183	Condition	Z_REFCOUNTED_P ( symbol )	2748:6:80480:80501	47113	0	True				
ANR	47184	CallExpression	Z_REFCOUNTED_P ( symbol )		47113	0					
ANR	47185	Callee	Z_REFCOUNTED_P		47113	0					
ANR	47186	Identifier	Z_REFCOUNTED_P		47113	0					
ANR	47187	ArgumentList	symbol		47113	1					
ANR	47188	Argument	symbol		47113	0					
ANR	47189	Identifier	symbol		47113	0					
ANR	47190	CompoundStatement		15:30:382:382	47113	1					
ANR	47191	ExpressionStatement	Z_ADDREF_P ( symbol )	2749:3:80509:80527	47113	0	True				
ANR	47192	CallExpression	Z_ADDREF_P ( symbol )		47113	0					
ANR	47193	Callee	Z_ADDREF_P		47113	0					
ANR	47194	Identifier	Z_ADDREF_P		47113	0					
ANR	47195	ArgumentList	symbol		47113	1					
ANR	47196	Argument	symbol		47113	0					
ANR	47197	Identifier	symbol		47113	0					
ANR	47198	ExpressionStatement	va_end ( symbol_table_list )	2752:1:80537:80562	47113	6	True				
ANR	47199	CallExpression	va_end ( symbol_table_list )		47113	0					
ANR	47200	Callee	va_end		47113	0					
ANR	47201	Identifier	va_end		47113	0					
ANR	47202	ArgumentList	symbol_table_list		47113	1					
ANR	47203	Argument	symbol_table_list		47113	0					
ANR	47204	Identifier	symbol_table_list		47113	0					
ANR	47205	ReturnStatement	return SUCCESS ;	2753:1:80565:80579	47113	7	True				
ANR	47206	Identifier	SUCCESS		47113	0					
ANR	47207	ReturnType	ZEND_API int		47113	1					
ANR	47208	Identifier	zend_set_hash_symbol		47113	2					
ANR	47209	ParameterList	"zval * symbol , const char * name , int name_length , zend_bool is_ref , int num_symbol_tables"		47113	3					
ANR	47210	Parameter	zval * symbol	2733:34:80016:80027	47113	0	True				
ANR	47211	ParameterType	zval *		47113	0					
ANR	47212	Identifier	symbol		47113	1					
ANR	47213	Parameter	const char * name	2733:48:80030:80045	47113	1	True				
ANR	47214	ParameterType	const char *		47113	0					
ANR	47215	Identifier	name		47113	1					
ANR	47216	Parameter	int name_length	2733:66:80048:80062	47113	2	True				
ANR	47217	ParameterType	int		47113	0					
ANR	47218	Identifier	name_length		47113	1					
ANR	47219	Parameter	zend_bool is_ref	2733:83:80065:80080	47113	3	True				
ANR	47220	ParameterType	zend_bool		47113	0					
ANR	47221	Identifier	is_ref		47113	1					
ANR	47222	Parameter	int num_symbol_tables	2733:101:80083:80103	47113	4	True				
ANR	47223	ParameterType	int		47113	0					
ANR	47224	Identifier	num_symbol_tables		47113	1					
ANR	47225	CFGEntryNode	ENTRY		47113		True				
ANR	47226	CFGExitNode	EXIT		47113		True				
ANR	47227	Symbol	is_ref		47113						
ANR	47228	Symbol	symbol		47113						
ANR	47229	Symbol	symbol_table_list		47113						
ANR	47230	Symbol	SUCCESS		47113						
ANR	47231	Symbol	num_symbol_tables		47113						
ANR	47232	Symbol	name		47113						
ANR	47233	Symbol	name_length		47113						
ANR	47234	Symbol	symbol_table		47113						
ANR	47235	Symbol	Z_REFCOUNTED_P		47113						
ANR	47236	Symbol	FAILURE		47113						
ANR	47237	Function	zend_disable_function	2767:0:80920:81355							
ANR	47238	FunctionDef	"zend_disable_function (char * function_name , size_t function_name_length)"		47237	0					
ANR	47239	CompoundStatement		2768:0:81015:81355	47237	0					
ANR	47240	IdentifierDeclStatement	zend_internal_function * func ;	2769:1:81018:81046	47237	0	True				
ANR	47241	IdentifierDecl	* func		47237	0					
ANR	47242	IdentifierDeclType	zend_internal_function *		47237	0					
ANR	47243	Identifier	func		47237	1					
ANR	47244	IfStatement	"if ( ( func = zend_hash_str_find_ptr ( CG ( function_table ) , function_name , function_name_length ) ) )"		47237	1					
ANR	47245	Condition	"func = zend_hash_str_find_ptr ( CG ( function_table ) , function_name , function_name_length )"	2770:5:81053:81140	47237	0	True				
ANR	47246	AssignmentExpression	"func = zend_hash_str_find_ptr ( CG ( function_table ) , function_name , function_name_length )"		47237	0		=			
ANR	47247	Identifier	func		47237	0					
ANR	47248	CallExpression	"zend_hash_str_find_ptr ( CG ( function_table ) , function_name , function_name_length )"		47237	1					
ANR	47249	Callee	zend_hash_str_find_ptr		47237	0					
ANR	47250	Identifier	zend_hash_str_find_ptr		47237	0					
ANR	47251	ArgumentList	CG ( function_table )		47237	1					
ANR	47252	Argument	CG ( function_table )		47237	0					
ANR	47253	CallExpression	CG ( function_table )		47237	0					
ANR	47254	Callee	CG		47237	0					
ANR	47255	Identifier	CG		47237	0					
ANR	47256	ArgumentList	function_table		47237	1					
ANR	47257	Argument	function_table		47237	0					
ANR	47258	Identifier	function_table		47237	0					
ANR	47259	Argument	function_name		47237	1					
ANR	47260	Identifier	function_name		47237	0					
ANR	47261	Argument	function_name_length		47237	2					
ANR	47262	Identifier	function_name_length		47237	0					
ANR	47263	CompoundStatement		3:95:127:127	47237	1					
ANR	47264	ExpressionStatement	func -> fn_flags &= ~ ( ZEND_ACC_VARIADIC | ZEND_ACC_HAS_TYPE_HINTS )	2771:5:81150:81214	47237	0	True				
ANR	47265	AssignmentExpression	func -> fn_flags &= ~ ( ZEND_ACC_VARIADIC | ZEND_ACC_HAS_TYPE_HINTS )		47237	0		&=			
ANR	47266	PtrMemberAccess	func -> fn_flags		47237	0					
ANR	47267	Identifier	func		47237	0					
ANR	47268	Identifier	fn_flags		47237	1					
ANR	47269	UnaryOperationExpression	~ ( ZEND_ACC_VARIADIC | ZEND_ACC_HAS_TYPE_HINTS )		47237	1					
ANR	47270	UnaryOperator	~		47237	0					
ANR	47271	InclusiveOrExpression	ZEND_ACC_VARIADIC | ZEND_ACC_HAS_TYPE_HINTS		47237	1		|			
ANR	47272	Identifier	ZEND_ACC_VARIADIC		47237	0					
ANR	47273	Identifier	ZEND_ACC_HAS_TYPE_HINTS		47237	1					
ANR	47274	ExpressionStatement	func -> num_args = 0	2772:2:81218:81236	47237	1	True				
ANR	47275	AssignmentExpression	func -> num_args = 0		47237	0		=			
ANR	47276	PtrMemberAccess	func -> num_args		47237	0					
ANR	47277	Identifier	func		47237	0					
ANR	47278	Identifier	num_args		47237	1					
ANR	47279	PrimaryExpression	0		47237	1					
ANR	47280	ExpressionStatement	func -> arg_info = NULL	2773:2:81240:81261	47237	2	True				
ANR	47281	AssignmentExpression	func -> arg_info = NULL		47237	0		=			
ANR	47282	PtrMemberAccess	func -> arg_info		47237	0					
ANR	47283	Identifier	func		47237	0					
ANR	47284	Identifier	arg_info		47237	1					
ANR	47285	Identifier	NULL		47237	1					
ANR	47286	ExpressionStatement	func -> handler = ZEND_FN ( display_disabled_function )	2774:2:81265:81315	47237	3	True				
ANR	47287	AssignmentExpression	func -> handler = ZEND_FN ( display_disabled_function )		47237	0		=			
ANR	47288	PtrMemberAccess	func -> handler		47237	0					
ANR	47289	Identifier	func		47237	0					
ANR	47290	Identifier	handler		47237	1					
ANR	47291	CallExpression	ZEND_FN ( display_disabled_function )		47237	1					
ANR	47292	Callee	ZEND_FN		47237	0					
ANR	47293	Identifier	ZEND_FN		47237	0					
ANR	47294	ArgumentList	display_disabled_function		47237	1					
ANR	47295	Argument	display_disabled_function		47237	0					
ANR	47296	Identifier	display_disabled_function		47237	0					
ANR	47297	ReturnStatement	return SUCCESS ;	2775:2:81319:81333	47237	4	True				
ANR	47298	Identifier	SUCCESS		47237	0					
ANR	47299	ReturnStatement	return FAILURE ;	2777:1:81339:81353	47237	2	True				
ANR	47300	Identifier	FAILURE		47237	0					
ANR	47301	ReturnType	ZEND_API int		47237	1					
ANR	47302	Identifier	zend_disable_function		47237	2					
ANR	47303	ParameterList	"char * function_name , size_t function_name_length"		47237	3					
ANR	47304	Parameter	char * function_name	2767:35:80955:80973	47237	0	True				
ANR	47305	ParameterType	char *		47237	0					
ANR	47306	Identifier	function_name		47237	1					
ANR	47307	Parameter	size_t function_name_length	2767:56:80976:81002	47237	1	True				
ANR	47308	ParameterType	size_t		47237	0					
ANR	47309	Identifier	function_name_length		47237	1					
ANR	47310	CFGEntryNode	ENTRY		47237		True				
ANR	47311	CFGExitNode	EXIT		47237		True				
ANR	47312	Symbol	NULL		47237						
ANR	47313	Symbol	SUCCESS		47237						
ANR	47314	Symbol	CG		47237						
ANR	47315	Symbol	* func		47237						
ANR	47316	Symbol	func -> num_args		47237						
ANR	47317	Symbol	func -> fn_flags		47237						
ANR	47318	Symbol	display_disabled_function		47237						
ANR	47319	Symbol	FAILURE		47237						
ANR	47320	Symbol	ZEND_ACC_HAS_TYPE_HINTS		47237						
ANR	47321	Symbol	func -> arg_info		47237						
ANR	47322	Symbol	ZEND_ACC_VARIADIC		47237						
ANR	47323	Symbol	func		47237						
ANR	47324	Symbol	function_name_length		47237						
ANR	47325	Symbol	function_name		47237						
ANR	47326	Symbol	zend_hash_str_find_ptr		47237						
ANR	47327	Symbol	func -> handler		47237						
ANR	47328	Symbol	function_table		47237						
ANR	47329	Symbol	ZEND_FN		47237						
ANR	47330	Function	display_disabled_class	2784:0:81419:81682							
ANR	47331	FunctionDef	display_disabled_class (zend_class_entry * class_type)		47330	0					
ANR	47332	CompoundStatement		2785:0:81502:81682	47330	0					
ANR	47333	IdentifierDeclStatement	zend_object * intern ;	2786:1:81505:81524	47330	0	True				
ANR	47334	IdentifierDecl	* intern		47330	0					
ANR	47335	IdentifierDeclType	zend_object *		47330	0					
ANR	47336	Identifier	intern		47330	1					
ANR	47337	ExpressionStatement	intern = zend_objects_new ( class_type )	2788:1:81528:81565	47330	1	True				
ANR	47338	AssignmentExpression	intern = zend_objects_new ( class_type )		47330	0		=			
ANR	47339	Identifier	intern		47330	0					
ANR	47340	CallExpression	zend_objects_new ( class_type )		47330	1					
ANR	47341	Callee	zend_objects_new		47330	0					
ANR	47342	Identifier	zend_objects_new		47330	0					
ANR	47343	ArgumentList	class_type		47330	1					
ANR	47344	Argument	class_type		47330	0					
ANR	47345	Identifier	class_type		47330	0					
ANR	47346	ExpressionStatement	"zend_error ( E_WARNING , ""%s() has been disabled for security reasons"" , ZSTR_VAL ( class_type -> name ) )"	2789:1:81568:81664	47330	2	True				
ANR	47347	CallExpression	"zend_error ( E_WARNING , ""%s() has been disabled for security reasons"" , ZSTR_VAL ( class_type -> name ) )"		47330	0					
ANR	47348	Callee	zend_error		47330	0					
ANR	47349	Identifier	zend_error		47330	0					
ANR	47350	ArgumentList	E_WARNING		47330	1					
ANR	47351	Argument	E_WARNING		47330	0					
ANR	47352	Identifier	E_WARNING		47330	0					
ANR	47353	Argument	"""%s() has been disabled for security reasons"""		47330	1					
ANR	47354	PrimaryExpression	"""%s() has been disabled for security reasons"""		47330	0					
ANR	47355	Argument	ZSTR_VAL ( class_type -> name )		47330	2					
ANR	47356	CallExpression	ZSTR_VAL ( class_type -> name )		47330	0					
ANR	47357	Callee	ZSTR_VAL		47330	0					
ANR	47358	Identifier	ZSTR_VAL		47330	0					
ANR	47359	ArgumentList	class_type -> name		47330	1					
ANR	47360	Argument	class_type -> name		47330	0					
ANR	47361	PtrMemberAccess	class_type -> name		47330	0					
ANR	47362	Identifier	class_type		47330	0					
ANR	47363	Identifier	name		47330	1					
ANR	47364	ReturnStatement	return intern ;	2790:1:81667:81680	47330	3	True				
ANR	47365	Identifier	intern		47330	0					
ANR	47366	ReturnType	static zend_object *		47330	1					
ANR	47367	Identifier	display_disabled_class		47330	2					
ANR	47368	ParameterList	zend_class_entry * class_type		47330	3					
ANR	47369	Parameter	zend_class_entry * class_type	2784:43:81462:81489	47330	0	True				
ANR	47370	ParameterType	zend_class_entry *		47330	0					
ANR	47371	Identifier	class_type		47330	1					
ANR	47372	CFGEntryNode	ENTRY		47330		True				
ANR	47373	CFGExitNode	EXIT		47330		True				
ANR	47374	Symbol	E_WARNING		47330						
ANR	47375	Symbol	class_type		47330						
ANR	47376	Symbol	intern		47330						
ANR	47377	Symbol	* class_type		47330						
ANR	47378	Symbol	zend_objects_new		47330						
ANR	47379	Symbol	class_type -> name		47330						
ANR	47380	Symbol	ZSTR_VAL		47330						
ANR	47381	DeclStmt									
ANR	47382	Decl							const zend_function_entry	const zend_function_entry [ ]	disabled_class_new
ANR	47383	Function	zend_disable_class	2801:0:81820:82412							
ANR	47384	FunctionDef	"zend_disable_class (char * class_name , size_t class_name_length)"		47383	0					
ANR	47385	CompoundStatement		2802:0:81906:82412	47383	0					
ANR	47386	IdentifierDeclStatement	zend_class_entry * disabled_class ;	2803:1:81909:81941	47383	0	True				
ANR	47387	IdentifierDecl	* disabled_class		47383	0					
ANR	47388	IdentifierDeclType	zend_class_entry *		47383	0					
ANR	47389	Identifier	disabled_class		47383	1					
ANR	47390	IdentifierDeclStatement	zend_string * key ;	2804:1:81944:81960	47383	1	True				
ANR	47391	IdentifierDecl	* key		47383	0					
ANR	47392	IdentifierDeclType	zend_string *		47383	0					
ANR	47393	Identifier	key		47383	1					
ANR	47394	ExpressionStatement	"key = zend_string_alloc ( class_name_length , 0 )"	2806:1:81964:82009	47383	2	True				
ANR	47395	AssignmentExpression	"key = zend_string_alloc ( class_name_length , 0 )"		47383	0		=			
ANR	47396	Identifier	key		47383	0					
ANR	47397	CallExpression	"zend_string_alloc ( class_name_length , 0 )"		47383	1					
ANR	47398	Callee	zend_string_alloc		47383	0					
ANR	47399	Identifier	zend_string_alloc		47383	0					
ANR	47400	ArgumentList	class_name_length		47383	1					
ANR	47401	Argument	class_name_length		47383	0					
ANR	47402	Identifier	class_name_length		47383	0					
ANR	47403	Argument	0		47383	1					
ANR	47404	PrimaryExpression	0		47383	0					
ANR	47405	ExpressionStatement	"zend_str_tolower_copy ( ZSTR_VAL ( key ) , class_name , class_name_length )"	2807:1:82012:82079	47383	3	True				
ANR	47406	CallExpression	"zend_str_tolower_copy ( ZSTR_VAL ( key ) , class_name , class_name_length )"		47383	0					
ANR	47407	Callee	zend_str_tolower_copy		47383	0					
ANR	47408	Identifier	zend_str_tolower_copy		47383	0					
ANR	47409	ArgumentList	ZSTR_VAL ( key )		47383	1					
ANR	47410	Argument	ZSTR_VAL ( key )		47383	0					
ANR	47411	CallExpression	ZSTR_VAL ( key )		47383	0					
ANR	47412	Callee	ZSTR_VAL		47383	0					
ANR	47413	Identifier	ZSTR_VAL		47383	0					
ANR	47414	ArgumentList	key		47383	1					
ANR	47415	Argument	key		47383	0					
ANR	47416	Identifier	key		47383	0					
ANR	47417	Argument	class_name		47383	1					
ANR	47418	Identifier	class_name		47383	0					
ANR	47419	Argument	class_name_length		47383	2					
ANR	47420	Identifier	class_name_length		47383	0					
ANR	47421	ExpressionStatement	"disabled_class = zend_hash_find_ptr ( CG ( class_table ) , key )"	2808:1:82082:82139	47383	4	True				
ANR	47422	AssignmentExpression	"disabled_class = zend_hash_find_ptr ( CG ( class_table ) , key )"		47383	0		=			
ANR	47423	Identifier	disabled_class		47383	0					
ANR	47424	CallExpression	"zend_hash_find_ptr ( CG ( class_table ) , key )"		47383	1					
ANR	47425	Callee	zend_hash_find_ptr		47383	0					
ANR	47426	Identifier	zend_hash_find_ptr		47383	0					
ANR	47427	ArgumentList	CG ( class_table )		47383	1					
ANR	47428	Argument	CG ( class_table )		47383	0					
ANR	47429	CallExpression	CG ( class_table )		47383	0					
ANR	47430	Callee	CG		47383	0					
ANR	47431	Identifier	CG		47383	0					
ANR	47432	ArgumentList	class_table		47383	1					
ANR	47433	Argument	class_table		47383	0					
ANR	47434	Identifier	class_table		47383	0					
ANR	47435	Argument	key		47383	1					
ANR	47436	Identifier	key		47383	0					
ANR	47437	IfStatement	if ( ! disabled_class )		47383	5					
ANR	47438	Condition	! disabled_class	2809:5:82146:82160	47383	0	True				
ANR	47439	UnaryOperationExpression	! disabled_class		47383	0					
ANR	47440	UnaryOperator	!		47383	0					
ANR	47441	Identifier	disabled_class		47383	1					
ANR	47442	CompoundStatement		8:22:256:256	47383	1					
ANR	47443	ReturnStatement	return FAILURE ;	2810:2:82167:82181	47383	0	True				
ANR	47444	Identifier	FAILURE		47383	0					
ANR	47445	ExpressionStatement	"INIT_CLASS_ENTRY_INIT_METHODS ( ( * disabled_class ) , disabled_class_new , NULL , NULL , NULL , NULL , NULL )"	2812:1:82187:82285	47383	6	True				
ANR	47446	CallExpression	"INIT_CLASS_ENTRY_INIT_METHODS ( ( * disabled_class ) , disabled_class_new , NULL , NULL , NULL , NULL , NULL )"		47383	0					
ANR	47447	Callee	INIT_CLASS_ENTRY_INIT_METHODS		47383	0					
ANR	47448	Identifier	INIT_CLASS_ENTRY_INIT_METHODS		47383	0					
ANR	47449	ArgumentList	* disabled_class		47383	1					
ANR	47450	Argument	* disabled_class		47383	0					
ANR	47451	UnaryOperationExpression	* disabled_class		47383	0					
ANR	47452	UnaryOperator	*		47383	0					
ANR	47453	Identifier	disabled_class		47383	1					
ANR	47454	Argument	disabled_class_new		47383	1					
ANR	47455	Identifier	disabled_class_new		47383	0					
ANR	47456	Argument	NULL		47383	2					
ANR	47457	Identifier	NULL		47383	0					
ANR	47458	Argument	NULL		47383	3					
ANR	47459	Identifier	NULL		47383	0					
ANR	47460	Argument	NULL		47383	4					
ANR	47461	Identifier	NULL		47383	0					
ANR	47462	Argument	NULL		47383	5					
ANR	47463	Identifier	NULL		47383	0					
ANR	47464	Argument	NULL		47383	6					
ANR	47465	Identifier	NULL		47383	0					
ANR	47466	ExpressionStatement	disabled_class -> create_object = display_disabled_class	2813:1:82288:82342	47383	7	True				
ANR	47467	AssignmentExpression	disabled_class -> create_object = display_disabled_class		47383	0		=			
ANR	47468	PtrMemberAccess	disabled_class -> create_object		47383	0					
ANR	47469	Identifier	disabled_class		47383	0					
ANR	47470	Identifier	create_object		47383	1					
ANR	47471	Identifier	display_disabled_class		47383	1					
ANR	47472	ExpressionStatement	zend_hash_clean ( & disabled_class -> function_table )	2814:1:82345:82393	47383	8	True				
ANR	47473	CallExpression	zend_hash_clean ( & disabled_class -> function_table )		47383	0					
ANR	47474	Callee	zend_hash_clean		47383	0					
ANR	47475	Identifier	zend_hash_clean		47383	0					
ANR	47476	ArgumentList	& disabled_class -> function_table		47383	1					
ANR	47477	Argument	& disabled_class -> function_table		47383	0					
ANR	47478	UnaryOperationExpression	& disabled_class -> function_table		47383	0					
ANR	47479	UnaryOperator	&		47383	0					
ANR	47480	PtrMemberAccess	disabled_class -> function_table		47383	1					
ANR	47481	Identifier	disabled_class		47383	0					
ANR	47482	Identifier	function_table		47383	1					
ANR	47483	ReturnStatement	return SUCCESS ;	2815:1:82396:82410	47383	9	True				
ANR	47484	Identifier	SUCCESS		47383	0					
ANR	47485	ReturnType	ZEND_API int		47383	1					
ANR	47486	Identifier	zend_disable_class		47383	2					
ANR	47487	ParameterList	"char * class_name , size_t class_name_length"		47383	3					
ANR	47488	Parameter	char * class_name	2801:32:81852:81867	47383	0	True				
ANR	47489	ParameterType	char *		47383	0					
ANR	47490	Identifier	class_name		47383	1					
ANR	47491	Parameter	size_t class_name_length	2801:50:81870:81893	47383	1	True				
ANR	47492	ParameterType	size_t		47383	0					
ANR	47493	Identifier	class_name_length		47383	1					
ANR	47494	CFGEntryNode	ENTRY		47383		True				
ANR	47495	CFGExitNode	EXIT		47383		True				
ANR	47496	Symbol	zend_string_alloc		47383						
ANR	47497	Symbol	NULL		47383						
ANR	47498	Symbol	SUCCESS		47383						
ANR	47499	Symbol	CG		47383						
ANR	47500	Symbol	display_disabled_class		47383						
ANR	47501	Symbol	& disabled_class -> function_table		47383						
ANR	47502	Symbol	disabled_class_new		47383						
ANR	47503	Symbol	class_name_length		47383						
ANR	47504	Symbol	disabled_class		47383						
ANR	47505	Symbol	FAILURE		47383						
ANR	47506	Symbol	ZSTR_VAL		47383						
ANR	47507	Symbol	class_table		47383						
ANR	47508	Symbol	class_name		47383						
ANR	47509	Symbol	zend_hash_find_ptr		47383						
ANR	47510	Symbol	key		47383						
ANR	47511	Symbol	* disabled_class		47383						
ANR	47512	Symbol	disabled_class -> create_object		47383						
ANR	47513	Function	zend_is_callable_check_class	2819:0:82425:85175							
ANR	47514	FunctionDef	"zend_is_callable_check_class (zend_string * name , zend_fcall_info_cache * fcc , int * strict_class , char * * error)"		47513	0					
ANR	47515	CompoundStatement		2820:0:82555:85175	47513	0					
ANR	47516	IdentifierDeclStatement	int ret = 0 ;	2821:1:82558:82569	47513	0	True				
ANR	47517	IdentifierDecl	ret = 0		47513	0					
ANR	47518	IdentifierDeclType	int		47513	0					
ANR	47519	Identifier	ret		47513	1					
ANR	47520	AssignmentExpression	ret = 0		47513	2		=			
ANR	47521	Identifier	ret		47513	0					
ANR	47522	PrimaryExpression	0		47513	1					
ANR	47523	IdentifierDeclStatement	zend_class_entry * ce ;	2822:1:82572:82592	47513	1	True				
ANR	47524	IdentifierDecl	* ce		47513	0					
ANR	47525	IdentifierDeclType	zend_class_entry *		47513	0					
ANR	47526	Identifier	ce		47513	1					
ANR	47527	IdentifierDeclStatement	size_t name_len = ZSTR_LEN ( name ) ;	2823:1:82595:82627	47513	2	True				
ANR	47528	IdentifierDecl	name_len = ZSTR_LEN ( name )		47513	0					
ANR	47529	IdentifierDeclType	size_t		47513	0					
ANR	47530	Identifier	name_len		47513	1					
ANR	47531	AssignmentExpression	name_len = ZSTR_LEN ( name )		47513	2		=			
ANR	47532	Identifier	name_len		47513	0					
ANR	47533	CallExpression	ZSTR_LEN ( name )		47513	1					
ANR	47534	Callee	ZSTR_LEN		47513	0					
ANR	47535	Identifier	ZSTR_LEN		47513	0					
ANR	47536	ArgumentList	name		47513	1					
ANR	47537	Argument	name		47513	0					
ANR	47538	Identifier	name		47513	0					
ANR	47539	IdentifierDeclStatement	zend_string * lcname ;	2824:1:82630:82649	47513	3	True				
ANR	47540	IdentifierDecl	* lcname		47513	0					
ANR	47541	IdentifierDeclType	zend_string *		47513	0					
ANR	47542	Identifier	lcname		47513	1					
ANR	47543	ExpressionStatement	ALLOCA_FLAG ( use_heap )	2825:1:82652:82673	47513	4	True				
ANR	47544	CallExpression	ALLOCA_FLAG ( use_heap )		47513	0					
ANR	47545	Callee	ALLOCA_FLAG		47513	0					
ANR	47546	Identifier	ALLOCA_FLAG		47513	0					
ANR	47547	ArgumentList	use_heap		47513	1					
ANR	47548	Argument	use_heap		47513	0					
ANR	47549	Identifier	use_heap		47513	0					
ANR	47550	ExpressionStatement	"ZSTR_ALLOCA_ALLOC ( lcname , name_len , use_heap )"	2827:1:82677:82722	47513	5	True				
ANR	47551	CallExpression	"ZSTR_ALLOCA_ALLOC ( lcname , name_len , use_heap )"		47513	0					
ANR	47552	Callee	ZSTR_ALLOCA_ALLOC		47513	0					
ANR	47553	Identifier	ZSTR_ALLOCA_ALLOC		47513	0					
ANR	47554	ArgumentList	lcname		47513	1					
ANR	47555	Argument	lcname		47513	0					
ANR	47556	Identifier	lcname		47513	0					
ANR	47557	Argument	name_len		47513	1					
ANR	47558	Identifier	name_len		47513	0					
ANR	47559	Argument	use_heap		47513	2					
ANR	47560	Identifier	use_heap		47513	0					
ANR	47561	ExpressionStatement	"zend_str_tolower_copy ( ZSTR_VAL ( lcname ) , ZSTR_VAL ( name ) , name_len )"	2828:1:82725:82790	47513	6	True				
ANR	47562	CallExpression	"zend_str_tolower_copy ( ZSTR_VAL ( lcname ) , ZSTR_VAL ( name ) , name_len )"		47513	0					
ANR	47563	Callee	zend_str_tolower_copy		47513	0					
ANR	47564	Identifier	zend_str_tolower_copy		47513	0					
ANR	47565	ArgumentList	ZSTR_VAL ( lcname )		47513	1					
ANR	47566	Argument	ZSTR_VAL ( lcname )		47513	0					
ANR	47567	CallExpression	ZSTR_VAL ( lcname )		47513	0					
ANR	47568	Callee	ZSTR_VAL		47513	0					
ANR	47569	Identifier	ZSTR_VAL		47513	0					
ANR	47570	ArgumentList	lcname		47513	1					
ANR	47571	Argument	lcname		47513	0					
ANR	47572	Identifier	lcname		47513	0					
ANR	47573	Argument	ZSTR_VAL ( name )		47513	1					
ANR	47574	CallExpression	ZSTR_VAL ( name )		47513	0					
ANR	47575	Callee	ZSTR_VAL		47513	0					
ANR	47576	Identifier	ZSTR_VAL		47513	0					
ANR	47577	ArgumentList	name		47513	1					
ANR	47578	Argument	name		47513	0					
ANR	47579	Identifier	name		47513	0					
ANR	47580	Argument	name_len		47513	2					
ANR	47581	Identifier	name_len		47513	0					
ANR	47582	ExpressionStatement	* strict_class = 0	2830:1:82794:82811	47513	7	True				
ANR	47583	AssignmentExpression	* strict_class = 0		47513	0		=			
ANR	47584	UnaryOperationExpression	* strict_class		47513	0					
ANR	47585	UnaryOperator	*		47513	0					
ANR	47586	Identifier	strict_class		47513	1					
ANR	47587	PrimaryExpression	0		47513	1					
ANR	47588	IfStatement	"if ( zend_string_equals_literal ( lcname , ""self"" ) )"		47513	8					
ANR	47589	Condition	"zend_string_equals_literal ( lcname , ""self"" )"	2831:5:82818:82859	47513	0	True				
ANR	47590	CallExpression	"zend_string_equals_literal ( lcname , ""self"" )"		47513	0					
ANR	47591	Callee	zend_string_equals_literal		47513	0					
ANR	47592	Identifier	zend_string_equals_literal		47513	0					
ANR	47593	ArgumentList	lcname		47513	1					
ANR	47594	Argument	lcname		47513	0					
ANR	47595	Identifier	lcname		47513	0					
ANR	47596	Argument	"""self"""		47513	1					
ANR	47597	PrimaryExpression	"""self"""		47513	0					
ANR	47598	CompoundStatement		12:49:306:306	47513	1					
ANR	47599	IfStatement	if ( ! EG ( scope ) )		47513	0					
ANR	47600	Condition	! EG ( scope )	2832:6:82870:82879	47513	0	True				
ANR	47601	UnaryOperationExpression	! EG ( scope )		47513	0					
ANR	47602	UnaryOperator	!		47513	0					
ANR	47603	CallExpression	EG ( scope )		47513	1					
ANR	47604	Callee	EG		47513	0					
ANR	47605	Identifier	EG		47513	0					
ANR	47606	ArgumentList	scope		47513	1					
ANR	47607	Argument	scope		47513	0					
ANR	47608	Identifier	scope		47513	0					
ANR	47609	CompoundStatement		13:18:326:326	47513	1					
ANR	47610	IfStatement	if ( error )		47513	0					
ANR	47611	Condition	error	2833:7:82891:82895	47513	0	True				
ANR	47612	Identifier	error		47513	0					
ANR	47613	ExpressionStatement	"* error = estrdup ( ""cannot access self:: when no class scope is active"" )"	2833:14:82898:82968	47513	1	True				
ANR	47614	AssignmentExpression	"* error = estrdup ( ""cannot access self:: when no class scope is active"" )"		47513	0		=			
ANR	47615	UnaryOperationExpression	* error		47513	0					
ANR	47616	UnaryOperator	*		47513	0					
ANR	47617	Identifier	error		47513	1					
ANR	47618	CallExpression	"estrdup ( ""cannot access self:: when no class scope is active"" )"		47513	1					
ANR	47619	Callee	estrdup		47513	0					
ANR	47620	Identifier	estrdup		47513	0					
ANR	47621	ArgumentList	"""cannot access self:: when no class scope is active"""		47513	1					
ANR	47622	Argument	"""cannot access self:: when no class scope is active"""		47513	0					
ANR	47623	PrimaryExpression	"""cannot access self:: when no class scope is active"""		47513	0					
ANR	47624	ElseStatement	else		47513	0					
ANR	47625	CompoundStatement		15:9:423:423	47513	0					
ANR	47626	ExpressionStatement	fcc -> called_scope = zend_get_called_scope ( EG ( current_execute_data ) )	2835:3:82984:83051	47513	0	True				
ANR	47627	AssignmentExpression	fcc -> called_scope = zend_get_called_scope ( EG ( current_execute_data ) )		47513	0		=			
ANR	47628	PtrMemberAccess	fcc -> called_scope		47513	0					
ANR	47629	Identifier	fcc		47513	0					
ANR	47630	Identifier	called_scope		47513	1					
ANR	47631	CallExpression	zend_get_called_scope ( EG ( current_execute_data ) )		47513	1					
ANR	47632	Callee	zend_get_called_scope		47513	0					
ANR	47633	Identifier	zend_get_called_scope		47513	0					
ANR	47634	ArgumentList	EG ( current_execute_data )		47513	1					
ANR	47635	Argument	EG ( current_execute_data )		47513	0					
ANR	47636	CallExpression	EG ( current_execute_data )		47513	0					
ANR	47637	Callee	EG		47513	0					
ANR	47638	Identifier	EG		47513	0					
ANR	47639	ArgumentList	current_execute_data		47513	1					
ANR	47640	Argument	current_execute_data		47513	0					
ANR	47641	Identifier	current_execute_data		47513	0					
ANR	47642	ExpressionStatement	fcc -> calling_scope = EG ( scope )	2836:3:83056:83086	47513	1	True				
ANR	47643	AssignmentExpression	fcc -> calling_scope = EG ( scope )		47513	0		=			
ANR	47644	PtrMemberAccess	fcc -> calling_scope		47513	0					
ANR	47645	Identifier	fcc		47513	0					
ANR	47646	Identifier	calling_scope		47513	1					
ANR	47647	CallExpression	EG ( scope )		47513	1					
ANR	47648	Callee	EG		47513	0					
ANR	47649	Identifier	EG		47513	0					
ANR	47650	ArgumentList	scope		47513	1					
ANR	47651	Argument	scope		47513	0					
ANR	47652	Identifier	scope		47513	0					
ANR	47653	IfStatement	if ( ! fcc -> object )		47513	2					
ANR	47654	Condition	! fcc -> object	2837:7:83095:83106	47513	0	True				
ANR	47655	UnaryOperationExpression	! fcc -> object		47513	0					
ANR	47656	UnaryOperator	!		47513	0					
ANR	47657	PtrMemberAccess	fcc -> object		47513	1					
ANR	47658	Identifier	fcc		47513	0					
ANR	47659	Identifier	object		47513	1					
ANR	47660	CompoundStatement		18:21:553:553	47513	1					
ANR	47661	ExpressionStatement	fcc -> object = zend_get_this_object ( EG ( current_execute_data ) )	2838:4:83115:83175	47513	0	True				
ANR	47662	AssignmentExpression	fcc -> object = zend_get_this_object ( EG ( current_execute_data ) )		47513	0		=			
ANR	47663	PtrMemberAccess	fcc -> object		47513	0					
ANR	47664	Identifier	fcc		47513	0					
ANR	47665	Identifier	object		47513	1					
ANR	47666	CallExpression	zend_get_this_object ( EG ( current_execute_data ) )		47513	1					
ANR	47667	Callee	zend_get_this_object		47513	0					
ANR	47668	Identifier	zend_get_this_object		47513	0					
ANR	47669	ArgumentList	EG ( current_execute_data )		47513	1					
ANR	47670	Argument	EG ( current_execute_data )		47513	0					
ANR	47671	CallExpression	EG ( current_execute_data )		47513	0					
ANR	47672	Callee	EG		47513	0					
ANR	47673	Identifier	EG		47513	0					
ANR	47674	ArgumentList	current_execute_data		47513	1					
ANR	47675	Argument	current_execute_data		47513	0					
ANR	47676	Identifier	current_execute_data		47513	0					
ANR	47677	ExpressionStatement	ret = 1	2840:3:83185:83192	47513	3	True				
ANR	47678	AssignmentExpression	ret = 1		47513	0		=			
ANR	47679	Identifier	ret		47513	0					
ANR	47680	PrimaryExpression	1		47513	1					
ANR	47681	ElseStatement	else		47513	0					
ANR	47682	IfStatement	"if ( zend_string_equals_literal ( lcname , ""parent"" ) )"		47513	0					
ANR	47683	Condition	"zend_string_equals_literal ( lcname , ""parent"" )"	2842:12:83210:83253	47513	0	True				
ANR	47684	CallExpression	"zend_string_equals_literal ( lcname , ""parent"" )"		47513	0					
ANR	47685	Callee	zend_string_equals_literal		47513	0					
ANR	47686	Identifier	zend_string_equals_literal		47513	0					
ANR	47687	ArgumentList	lcname		47513	1					
ANR	47688	Argument	lcname		47513	0					
ANR	47689	Identifier	lcname		47513	0					
ANR	47690	Argument	"""parent"""		47513	1					
ANR	47691	PrimaryExpression	"""parent"""		47513	0					
ANR	47692	CompoundStatement		23:58:700:700	47513	1					
ANR	47693	IfStatement	if ( ! EG ( scope ) )		47513	0					
ANR	47694	Condition	! EG ( scope )	2843:6:83264:83273	47513	0	True				
ANR	47695	UnaryOperationExpression	! EG ( scope )		47513	0					
ANR	47696	UnaryOperator	!		47513	0					
ANR	47697	CallExpression	EG ( scope )		47513	1					
ANR	47698	Callee	EG		47513	0					
ANR	47699	Identifier	EG		47513	0					
ANR	47700	ArgumentList	scope		47513	1					
ANR	47701	Argument	scope		47513	0					
ANR	47702	Identifier	scope		47513	0					
ANR	47703	CompoundStatement		24:18:720:720	47513	1					
ANR	47704	IfStatement	if ( error )		47513	0					
ANR	47705	Condition	error	2844:7:83285:83289	47513	0	True				
ANR	47706	Identifier	error		47513	0					
ANR	47707	ExpressionStatement	"* error = estrdup ( ""cannot access parent:: when no class scope is active"" )"	2844:14:83292:83364	47513	1	True				
ANR	47708	AssignmentExpression	"* error = estrdup ( ""cannot access parent:: when no class scope is active"" )"		47513	0		=			
ANR	47709	UnaryOperationExpression	* error		47513	0					
ANR	47710	UnaryOperator	*		47513	0					
ANR	47711	Identifier	error		47513	1					
ANR	47712	CallExpression	"estrdup ( ""cannot access parent:: when no class scope is active"" )"		47513	1					
ANR	47713	Callee	estrdup		47513	0					
ANR	47714	Identifier	estrdup		47513	0					
ANR	47715	ArgumentList	"""cannot access parent:: when no class scope is active"""		47513	1					
ANR	47716	Argument	"""cannot access parent:: when no class scope is active"""		47513	0					
ANR	47717	PrimaryExpression	"""cannot access parent:: when no class scope is active"""		47513	0					
ANR	47718	ElseStatement	else		47513	0					
ANR	47719	IfStatement	if ( ! EG ( scope ) -> parent )		47513	0					
ANR	47720	Condition	! EG ( scope ) -> parent	2845:13:83379:83396	47513	0	True				
ANR	47721	UnaryOperationExpression	! EG ( scope ) -> parent		47513	0					
ANR	47722	UnaryOperator	!		47513	0					
ANR	47723	PtrMemberAccess	EG ( scope ) -> parent		47513	1					
ANR	47724	CallExpression	EG ( scope )		47513	0					
ANR	47725	Callee	EG		47513	0					
ANR	47726	Identifier	EG		47513	0					
ANR	47727	ArgumentList	scope		47513	1					
ANR	47728	Argument	scope		47513	0					
ANR	47729	Identifier	scope		47513	0					
ANR	47730	Identifier	parent		47513	1					
ANR	47731	CompoundStatement		26:33:843:843	47513	1					
ANR	47732	IfStatement	if ( error )		47513	0					
ANR	47733	Condition	error	2846:7:83408:83412	47513	0	True				
ANR	47734	Identifier	error		47513	0					
ANR	47735	ExpressionStatement	"* error = estrdup ( ""cannot access parent:: when current class scope has no parent"" )"	2846:14:83415:83496	47513	1	True				
ANR	47736	AssignmentExpression	"* error = estrdup ( ""cannot access parent:: when current class scope has no parent"" )"		47513	0		=			
ANR	47737	UnaryOperationExpression	* error		47513	0					
ANR	47738	UnaryOperator	*		47513	0					
ANR	47739	Identifier	error		47513	1					
ANR	47740	CallExpression	"estrdup ( ""cannot access parent:: when current class scope has no parent"" )"		47513	1					
ANR	47741	Callee	estrdup		47513	0					
ANR	47742	Identifier	estrdup		47513	0					
ANR	47743	ArgumentList	"""cannot access parent:: when current class scope has no parent"""		47513	1					
ANR	47744	Argument	"""cannot access parent:: when current class scope has no parent"""		47513	0					
ANR	47745	PrimaryExpression	"""cannot access parent:: when current class scope has no parent"""		47513	0					
ANR	47746	ElseStatement	else		47513	0					
ANR	47747	CompoundStatement		28:9:951:951	47513	0					
ANR	47748	ExpressionStatement	fcc -> called_scope = zend_get_called_scope ( EG ( current_execute_data ) )	2848:3:83512:83579	47513	0	True				
ANR	47749	AssignmentExpression	fcc -> called_scope = zend_get_called_scope ( EG ( current_execute_data ) )		47513	0		=			
ANR	47750	PtrMemberAccess	fcc -> called_scope		47513	0					
ANR	47751	Identifier	fcc		47513	0					
ANR	47752	Identifier	called_scope		47513	1					
ANR	47753	CallExpression	zend_get_called_scope ( EG ( current_execute_data ) )		47513	1					
ANR	47754	Callee	zend_get_called_scope		47513	0					
ANR	47755	Identifier	zend_get_called_scope		47513	0					
ANR	47756	ArgumentList	EG ( current_execute_data )		47513	1					
ANR	47757	Argument	EG ( current_execute_data )		47513	0					
ANR	47758	CallExpression	EG ( current_execute_data )		47513	0					
ANR	47759	Callee	EG		47513	0					
ANR	47760	Identifier	EG		47513	0					
ANR	47761	ArgumentList	current_execute_data		47513	1					
ANR	47762	Argument	current_execute_data		47513	0					
ANR	47763	Identifier	current_execute_data		47513	0					
ANR	47764	ExpressionStatement	fcc -> calling_scope = EG ( scope ) -> parent	2849:3:83584:83622	47513	1	True				
ANR	47765	AssignmentExpression	fcc -> calling_scope = EG ( scope ) -> parent		47513	0		=			
ANR	47766	PtrMemberAccess	fcc -> calling_scope		47513	0					
ANR	47767	Identifier	fcc		47513	0					
ANR	47768	Identifier	calling_scope		47513	1					
ANR	47769	PtrMemberAccess	EG ( scope ) -> parent		47513	1					
ANR	47770	CallExpression	EG ( scope )		47513	0					
ANR	47771	Callee	EG		47513	0					
ANR	47772	Identifier	EG		47513	0					
ANR	47773	ArgumentList	scope		47513	1					
ANR	47774	Argument	scope		47513	0					
ANR	47775	Identifier	scope		47513	0					
ANR	47776	Identifier	parent		47513	1					
ANR	47777	IfStatement	if ( ! fcc -> object )		47513	2					
ANR	47778	Condition	! fcc -> object	2850:7:83631:83642	47513	0	True				
ANR	47779	UnaryOperationExpression	! fcc -> object		47513	0					
ANR	47780	UnaryOperator	!		47513	0					
ANR	47781	PtrMemberAccess	fcc -> object		47513	1					
ANR	47782	Identifier	fcc		47513	0					
ANR	47783	Identifier	object		47513	1					
ANR	47784	CompoundStatement		31:21:1089:1089	47513	1					
ANR	47785	ExpressionStatement	fcc -> object = zend_get_this_object ( EG ( current_execute_data ) )	2851:4:83651:83711	47513	0	True				
ANR	47786	AssignmentExpression	fcc -> object = zend_get_this_object ( EG ( current_execute_data ) )		47513	0		=			
ANR	47787	PtrMemberAccess	fcc -> object		47513	0					
ANR	47788	Identifier	fcc		47513	0					
ANR	47789	Identifier	object		47513	1					
ANR	47790	CallExpression	zend_get_this_object ( EG ( current_execute_data ) )		47513	1					
ANR	47791	Callee	zend_get_this_object		47513	0					
ANR	47792	Identifier	zend_get_this_object		47513	0					
ANR	47793	ArgumentList	EG ( current_execute_data )		47513	1					
ANR	47794	Argument	EG ( current_execute_data )		47513	0					
ANR	47795	CallExpression	EG ( current_execute_data )		47513	0					
ANR	47796	Callee	EG		47513	0					
ANR	47797	Identifier	EG		47513	0					
ANR	47798	ArgumentList	current_execute_data		47513	1					
ANR	47799	Argument	current_execute_data		47513	0					
ANR	47800	Identifier	current_execute_data		47513	0					
ANR	47801	ExpressionStatement	* strict_class = 1	2853:3:83721:83738	47513	3	True				
ANR	47802	AssignmentExpression	* strict_class = 1		47513	0		=			
ANR	47803	UnaryOperationExpression	* strict_class		47513	0					
ANR	47804	UnaryOperator	*		47513	0					
ANR	47805	Identifier	strict_class		47513	1					
ANR	47806	PrimaryExpression	1		47513	1					
ANR	47807	ExpressionStatement	ret = 1	2854:3:83743:83750	47513	4	True				
ANR	47808	AssignmentExpression	ret = 1		47513	0		=			
ANR	47809	Identifier	ret		47513	0					
ANR	47810	PrimaryExpression	1		47513	1					
ANR	47811	ElseStatement	else		47513	0					
ANR	47812	IfStatement	"if ( zend_string_equals_literal ( lcname , ""static"" ) )"		47513	0					
ANR	47813	Condition	"zend_string_equals_literal ( lcname , ""static"" )"	2856:12:83768:83811	47513	0	True				
ANR	47814	CallExpression	"zend_string_equals_literal ( lcname , ""static"" )"		47513	0					
ANR	47815	Callee	zend_string_equals_literal		47513	0					
ANR	47816	Identifier	zend_string_equals_literal		47513	0					
ANR	47817	ArgumentList	lcname		47513	1					
ANR	47818	Argument	lcname		47513	0					
ANR	47819	Identifier	lcname		47513	0					
ANR	47820	Argument	"""static"""		47513	1					
ANR	47821	PrimaryExpression	"""static"""		47513	0					
ANR	47822	CompoundStatement		38:2:1262:1342	47513	1					
ANR	47823	IdentifierDeclStatement	zend_class_entry * called_scope = zend_get_called_scope ( EG ( current_execute_data ) ) ;	2857:2:83818:83898	47513	0	True				
ANR	47824	IdentifierDecl	* called_scope = zend_get_called_scope ( EG ( current_execute_data ) )		47513	0					
ANR	47825	IdentifierDeclType	zend_class_entry *		47513	0					
ANR	47826	Identifier	called_scope		47513	1					
ANR	47827	AssignmentExpression	* called_scope = zend_get_called_scope ( EG ( current_execute_data ) )		47513	2		=			
ANR	47828	Identifier	called_scope		47513	0					
ANR	47829	CallExpression	zend_get_called_scope ( EG ( current_execute_data ) )		47513	1					
ANR	47830	Callee	zend_get_called_scope		47513	0					
ANR	47831	Identifier	zend_get_called_scope		47513	0					
ANR	47832	ArgumentList	EG ( current_execute_data )		47513	1					
ANR	47833	Argument	EG ( current_execute_data )		47513	0					
ANR	47834	CallExpression	EG ( current_execute_data )		47513	0					
ANR	47835	Callee	EG		47513	0					
ANR	47836	Identifier	EG		47513	0					
ANR	47837	ArgumentList	current_execute_data		47513	1					
ANR	47838	Argument	current_execute_data		47513	0					
ANR	47839	Identifier	current_execute_data		47513	0					
ANR	47840	IfStatement	if ( ! called_scope )		47513	1					
ANR	47841	Condition	! called_scope	2859:6:83907:83919	47513	0	True				
ANR	47842	UnaryOperationExpression	! called_scope		47513	0					
ANR	47843	UnaryOperator	!		47513	0					
ANR	47844	Identifier	called_scope		47513	1					
ANR	47845	CompoundStatement		40:21:1366:1366	47513	1					
ANR	47846	IfStatement	if ( error )		47513	0					
ANR	47847	Condition	error	2860:7:83931:83935	47513	0	True				
ANR	47848	Identifier	error		47513	0					
ANR	47849	ExpressionStatement	"* error = estrdup ( ""cannot access static:: when no class scope is active"" )"	2860:14:83938:84010	47513	1	True				
ANR	47850	AssignmentExpression	"* error = estrdup ( ""cannot access static:: when no class scope is active"" )"		47513	0		=			
ANR	47851	UnaryOperationExpression	* error		47513	0					
ANR	47852	UnaryOperator	*		47513	0					
ANR	47853	Identifier	error		47513	1					
ANR	47854	CallExpression	"estrdup ( ""cannot access static:: when no class scope is active"" )"		47513	1					
ANR	47855	Callee	estrdup		47513	0					
ANR	47856	Identifier	estrdup		47513	0					
ANR	47857	ArgumentList	"""cannot access static:: when no class scope is active"""		47513	1					
ANR	47858	Argument	"""cannot access static:: when no class scope is active"""		47513	0					
ANR	47859	PrimaryExpression	"""cannot access static:: when no class scope is active"""		47513	0					
ANR	47860	ElseStatement	else		47513	0					
ANR	47861	CompoundStatement		42:9:1465:1465	47513	0					
ANR	47862	ExpressionStatement	fcc -> called_scope = called_scope	2862:3:84026:84058	47513	0	True				
ANR	47863	AssignmentExpression	fcc -> called_scope = called_scope		47513	0		=			
ANR	47864	PtrMemberAccess	fcc -> called_scope		47513	0					
ANR	47865	Identifier	fcc		47513	0					
ANR	47866	Identifier	called_scope		47513	1					
ANR	47867	Identifier	called_scope		47513	1					
ANR	47868	ExpressionStatement	fcc -> calling_scope = called_scope	2863:3:84063:84096	47513	1	True				
ANR	47869	AssignmentExpression	fcc -> calling_scope = called_scope		47513	0		=			
ANR	47870	PtrMemberAccess	fcc -> calling_scope		47513	0					
ANR	47871	Identifier	fcc		47513	0					
ANR	47872	Identifier	calling_scope		47513	1					
ANR	47873	Identifier	called_scope		47513	1					
ANR	47874	IfStatement	if ( ! fcc -> object )		47513	2					
ANR	47875	Condition	! fcc -> object	2864:7:84105:84116	47513	0	True				
ANR	47876	UnaryOperationExpression	! fcc -> object		47513	0					
ANR	47877	UnaryOperator	!		47513	0					
ANR	47878	PtrMemberAccess	fcc -> object		47513	1					
ANR	47879	Identifier	fcc		47513	0					
ANR	47880	Identifier	object		47513	1					
ANR	47881	CompoundStatement		45:21:1563:1563	47513	1					
ANR	47882	ExpressionStatement	fcc -> object = zend_get_this_object ( EG ( current_execute_data ) )	2865:4:84125:84185	47513	0	True				
ANR	47883	AssignmentExpression	fcc -> object = zend_get_this_object ( EG ( current_execute_data ) )		47513	0		=			
ANR	47884	PtrMemberAccess	fcc -> object		47513	0					
ANR	47885	Identifier	fcc		47513	0					
ANR	47886	Identifier	object		47513	1					
ANR	47887	CallExpression	zend_get_this_object ( EG ( current_execute_data ) )		47513	1					
ANR	47888	Callee	zend_get_this_object		47513	0					
ANR	47889	Identifier	zend_get_this_object		47513	0					
ANR	47890	ArgumentList	EG ( current_execute_data )		47513	1					
ANR	47891	Argument	EG ( current_execute_data )		47513	0					
ANR	47892	CallExpression	EG ( current_execute_data )		47513	0					
ANR	47893	Callee	EG		47513	0					
ANR	47894	Identifier	EG		47513	0					
ANR	47895	ArgumentList	current_execute_data		47513	1					
ANR	47896	Argument	current_execute_data		47513	0					
ANR	47897	Identifier	current_execute_data		47513	0					
ANR	47898	ExpressionStatement	* strict_class = 1	2867:3:84195:84212	47513	3	True				
ANR	47899	AssignmentExpression	* strict_class = 1		47513	0		=			
ANR	47900	UnaryOperationExpression	* strict_class		47513	0					
ANR	47901	UnaryOperator	*		47513	0					
ANR	47902	Identifier	strict_class		47513	1					
ANR	47903	PrimaryExpression	1		47513	1					
ANR	47904	ExpressionStatement	ret = 1	2868:3:84217:84224	47513	4	True				
ANR	47905	AssignmentExpression	ret = 1		47513	0		=			
ANR	47906	Identifier	ret		47513	0					
ANR	47907	PrimaryExpression	1		47513	1					
ANR	47908	ElseStatement	else		47513	0					
ANR	47909	IfStatement	"if ( ( ce = zend_lookup_class_ex ( name , NULL , 1 ) ) != NULL )"		47513	0					
ANR	47910	Condition	"( ce = zend_lookup_class_ex ( name , NULL , 1 ) ) != NULL"	2870:12:84242:84291	47513	0	True				
ANR	47911	EqualityExpression	"( ce = zend_lookup_class_ex ( name , NULL , 1 ) ) != NULL"		47513	0		!=			
ANR	47912	AssignmentExpression	"ce = zend_lookup_class_ex ( name , NULL , 1 )"		47513	0		=			
ANR	47913	Identifier	ce		47513	0					
ANR	47914	CallExpression	"zend_lookup_class_ex ( name , NULL , 1 )"		47513	1					
ANR	47915	Callee	zend_lookup_class_ex		47513	0					
ANR	47916	Identifier	zend_lookup_class_ex		47513	0					
ANR	47917	ArgumentList	name		47513	1					
ANR	47918	Argument	name		47513	0					
ANR	47919	Identifier	name		47513	0					
ANR	47920	Argument	NULL		47513	1					
ANR	47921	Identifier	NULL		47513	0					
ANR	47922	Argument	1		47513	2					
ANR	47923	PrimaryExpression	1		47513	0					
ANR	47924	Identifier	NULL		47513	1					
ANR	47925	CompoundStatement		53:2:1769:1817	47513	1					
ANR	47926	IdentifierDeclStatement	zend_class_entry * scope ;	2871:2:84298:84321	47513	0	True				
ANR	47927	IdentifierDecl	* scope		47513	0					
ANR	47928	IdentifierDeclType	zend_class_entry *		47513	0					
ANR	47929	Identifier	scope		47513	1					
ANR	47930	IdentifierDeclStatement	zend_execute_data * ex = EG ( current_execute_data ) ;	2872:2:84325:84373	47513	1	True				
ANR	47931	IdentifierDecl	* ex = EG ( current_execute_data )		47513	0					
ANR	47932	IdentifierDeclType	zend_execute_data *		47513	0					
ANR	47933	Identifier	ex		47513	1					
ANR	47934	AssignmentExpression	* ex = EG ( current_execute_data )		47513	2		=			
ANR	47935	Identifier	ex		47513	0					
ANR	47936	CallExpression	EG ( current_execute_data )		47513	1					
ANR	47937	Callee	EG		47513	0					
ANR	47938	Identifier	EG		47513	0					
ANR	47939	ArgumentList	current_execute_data		47513	1					
ANR	47940	Argument	current_execute_data		47513	0					
ANR	47941	Identifier	current_execute_data		47513	0					
ANR	47942	WhileStatement	while ( ex && ( ! ex -> func || ! ZEND_USER_CODE ( ex -> func -> type ) ) )		47513	2					
ANR	47943	Condition	ex && ( ! ex -> func || ! ZEND_USER_CODE ( ex -> func -> type ) )	2874:9:84385:84436	47513	0	True				
ANR	47944	AndExpression	ex && ( ! ex -> func || ! ZEND_USER_CODE ( ex -> func -> type ) )		47513	0		&&			
ANR	47945	Identifier	ex		47513	0					
ANR	47946	OrExpression	! ex -> func || ! ZEND_USER_CODE ( ex -> func -> type )		47513	1		||			
ANR	47947	UnaryOperationExpression	! ex -> func		47513	0					
ANR	47948	UnaryOperator	!		47513	0					
ANR	47949	PtrMemberAccess	ex -> func		47513	1					
ANR	47950	Identifier	ex		47513	0					
ANR	47951	Identifier	func		47513	1					
ANR	47952	UnaryOperationExpression	! ZEND_USER_CODE ( ex -> func -> type )		47513	1					
ANR	47953	UnaryOperator	!		47513	0					
ANR	47954	CallExpression	ZEND_USER_CODE ( ex -> func -> type )		47513	1					
ANR	47955	Callee	ZEND_USER_CODE		47513	0					
ANR	47956	Identifier	ZEND_USER_CODE		47513	0					
ANR	47957	ArgumentList	ex -> func -> type		47513	1					
ANR	47958	Argument	ex -> func -> type		47513	0					
ANR	47959	PtrMemberAccess	ex -> func -> type		47513	0					
ANR	47960	PtrMemberAccess	ex -> func		47513	0					
ANR	47961	Identifier	ex		47513	0					
ANR	47962	Identifier	func		47513	1					
ANR	47963	Identifier	type		47513	1					
ANR	47964	CompoundStatement		55:63:1883:1883	47513	1					
ANR	47965	ExpressionStatement	ex = ex -> prev_execute_data	2875:3:84444:84470	47513	0	True				
ANR	47966	AssignmentExpression	ex = ex -> prev_execute_data		47513	0		=			
ANR	47967	Identifier	ex		47513	0					
ANR	47968	PtrMemberAccess	ex -> prev_execute_data		47513	1					
ANR	47969	Identifier	ex		47513	0					
ANR	47970	Identifier	prev_execute_data		47513	1					
ANR	47971	ExpressionStatement	scope = ex ? ex -> func -> common . scope : NULL	2877:2:84478:84520	47513	3	True				
ANR	47972	AssignmentExpression	scope = ex ? ex -> func -> common . scope : NULL		47513	0		=			
ANR	47973	Identifier	scope		47513	0					
ANR	47974	ConditionalExpression	ex ? ex -> func -> common . scope : NULL		47513	1					
ANR	47975	Condition	ex		47513	0					
ANR	47976	Identifier	ex		47513	0					
ANR	47977	MemberAccess	ex -> func -> common . scope		47513	1					
ANR	47978	PtrMemberAccess	ex -> func -> common		47513	0					
ANR	47979	PtrMemberAccess	ex -> func		47513	0					
ANR	47980	Identifier	ex		47513	0					
ANR	47981	Identifier	func		47513	1					
ANR	47982	Identifier	common		47513	1					
ANR	47983	Identifier	scope		47513	1					
ANR	47984	Identifier	NULL		47513	2					
ANR	47985	ExpressionStatement	fcc -> calling_scope = ce	2878:2:84524:84547	47513	4	True				
ANR	47986	AssignmentExpression	fcc -> calling_scope = ce		47513	0		=			
ANR	47987	PtrMemberAccess	fcc -> calling_scope		47513	0					
ANR	47988	Identifier	fcc		47513	0					
ANR	47989	Identifier	calling_scope		47513	1					
ANR	47990	Identifier	ce		47513	1					
ANR	47991	IfStatement	if ( scope && ! fcc -> object )		47513	5					
ANR	47992	Condition	scope && ! fcc -> object	2879:6:84555:84575	47513	0	True				
ANR	47993	AndExpression	scope && ! fcc -> object		47513	0		&&			
ANR	47994	Identifier	scope		47513	0					
ANR	47995	UnaryOperationExpression	! fcc -> object		47513	1					
ANR	47996	UnaryOperator	!		47513	0					
ANR	47997	PtrMemberAccess	fcc -> object		47513	1					
ANR	47998	Identifier	fcc		47513	0					
ANR	47999	Identifier	object		47513	1					
ANR	48000	CompoundStatement		61:3:2027:2095	47513	1					
ANR	48001	IdentifierDeclStatement	zend_object * object = zend_get_this_object ( EG ( current_execute_data ) ) ;	2880:3:84583:84651	47513	0	True				
ANR	48002	IdentifierDecl	* object = zend_get_this_object ( EG ( current_execute_data ) )		47513	0					
ANR	48003	IdentifierDeclType	zend_object *		47513	0					
ANR	48004	Identifier	object		47513	1					
ANR	48005	AssignmentExpression	* object = zend_get_this_object ( EG ( current_execute_data ) )		47513	2		=			
ANR	48006	Identifier	object		47513	0					
ANR	48007	CallExpression	zend_get_this_object ( EG ( current_execute_data ) )		47513	1					
ANR	48008	Callee	zend_get_this_object		47513	0					
ANR	48009	Identifier	zend_get_this_object		47513	0					
ANR	48010	ArgumentList	EG ( current_execute_data )		47513	1					
ANR	48011	Argument	EG ( current_execute_data )		47513	0					
ANR	48012	CallExpression	EG ( current_execute_data )		47513	0					
ANR	48013	Callee	EG		47513	0					
ANR	48014	Identifier	EG		47513	0					
ANR	48015	ArgumentList	current_execute_data		47513	1					
ANR	48016	Argument	current_execute_data		47513	0					
ANR	48017	Identifier	current_execute_data		47513	0					
ANR	48018	IfStatement	"if ( object && instanceof_function ( object -> ce , scope ) && instanceof_function ( scope , fcc -> calling_scope ) )"		47513	1					
ANR	48019	Condition	"object && instanceof_function ( object -> ce , scope ) && instanceof_function ( scope , fcc -> calling_scope )"	2882:7:84661:84772	47513	0	True				
ANR	48020	AndExpression	"object && instanceof_function ( object -> ce , scope ) && instanceof_function ( scope , fcc -> calling_scope )"		47513	0		&&			
ANR	48021	Identifier	object		47513	0					
ANR	48022	AndExpression	"instanceof_function ( object -> ce , scope ) && instanceof_function ( scope , fcc -> calling_scope )"		47513	1		&&			
ANR	48023	CallExpression	"instanceof_function ( object -> ce , scope )"		47513	0					
ANR	48024	Callee	instanceof_function		47513	0					
ANR	48025	Identifier	instanceof_function		47513	0					
ANR	48026	ArgumentList	object -> ce		47513	1					
ANR	48027	Argument	object -> ce		47513	0					
ANR	48028	PtrMemberAccess	object -> ce		47513	0					
ANR	48029	Identifier	object		47513	0					
ANR	48030	Identifier	ce		47513	1					
ANR	48031	Argument	scope		47513	1					
ANR	48032	Identifier	scope		47513	0					
ANR	48033	CallExpression	"instanceof_function ( scope , fcc -> calling_scope )"		47513	1					
ANR	48034	Callee	instanceof_function		47513	0					
ANR	48035	Identifier	instanceof_function		47513	0					
ANR	48036	ArgumentList	scope		47513	1					
ANR	48037	Argument	scope		47513	0					
ANR	48038	Identifier	scope		47513	0					
ANR	48039	Argument	fcc -> calling_scope		47513	1					
ANR	48040	PtrMemberAccess	fcc -> calling_scope		47513	0					
ANR	48041	Identifier	fcc		47513	0					
ANR	48042	Identifier	calling_scope		47513	1					
ANR	48043	CompoundStatement		65:55:2219:2219	47513	1					
ANR	48044	ExpressionStatement	fcc -> object = object	2885:4:84781:84801	47513	0	True				
ANR	48045	AssignmentExpression	fcc -> object = object		47513	0		=			
ANR	48046	PtrMemberAccess	fcc -> object		47513	0					
ANR	48047	Identifier	fcc		47513	0					
ANR	48048	Identifier	object		47513	1					
ANR	48049	Identifier	object		47513	1					
ANR	48050	ExpressionStatement	fcc -> called_scope = object -> ce	2886:4:84807:84837	47513	1	True				
ANR	48051	AssignmentExpression	fcc -> called_scope = object -> ce		47513	0		=			
ANR	48052	PtrMemberAccess	fcc -> called_scope		47513	0					
ANR	48053	Identifier	fcc		47513	0					
ANR	48054	Identifier	called_scope		47513	1					
ANR	48055	PtrMemberAccess	object -> ce		47513	1					
ANR	48056	Identifier	object		47513	0					
ANR	48057	Identifier	ce		47513	1					
ANR	48058	ElseStatement	else		47513	0					
ANR	48059	CompoundStatement		68:10:2293:2293	47513	0					
ANR	48060	ExpressionStatement	fcc -> called_scope = fcc -> calling_scope	2888:4:84855:84893	47513	0	True				
ANR	48061	AssignmentExpression	fcc -> called_scope = fcc -> calling_scope		47513	0		=			
ANR	48062	PtrMemberAccess	fcc -> called_scope		47513	0					
ANR	48063	Identifier	fcc		47513	0					
ANR	48064	Identifier	called_scope		47513	1					
ANR	48065	PtrMemberAccess	fcc -> calling_scope		47513	1					
ANR	48066	Identifier	fcc		47513	0					
ANR	48067	Identifier	calling_scope		47513	1					
ANR	48068	ElseStatement	else		47513	0					
ANR	48069	CompoundStatement		71:9:2353:2353	47513	0					
ANR	48070	ExpressionStatement	fcc -> called_scope = fcc -> object ? fcc -> object -> ce : fcc -> calling_scope	2891:3:84914:84984	47513	0	True				
ANR	48071	AssignmentExpression	fcc -> called_scope = fcc -> object ? fcc -> object -> ce : fcc -> calling_scope		47513	0		=			
ANR	48072	PtrMemberAccess	fcc -> called_scope		47513	0					
ANR	48073	Identifier	fcc		47513	0					
ANR	48074	Identifier	called_scope		47513	1					
ANR	48075	ConditionalExpression	fcc -> object ? fcc -> object -> ce : fcc -> calling_scope		47513	1					
ANR	48076	Condition	fcc -> object		47513	0					
ANR	48077	PtrMemberAccess	fcc -> object		47513	0					
ANR	48078	Identifier	fcc		47513	0					
ANR	48079	Identifier	object		47513	1					
ANR	48080	PtrMemberAccess	fcc -> object -> ce		47513	1					
ANR	48081	PtrMemberAccess	fcc -> object		47513	0					
ANR	48082	Identifier	fcc		47513	0					
ANR	48083	Identifier	object		47513	1					
ANR	48084	Identifier	ce		47513	1					
ANR	48085	PtrMemberAccess	fcc -> calling_scope		47513	2					
ANR	48086	Identifier	fcc		47513	0					
ANR	48087	Identifier	calling_scope		47513	1					
ANR	48088	ExpressionStatement	* strict_class = 1	2893:2:84992:85009	47513	6	True				
ANR	48089	AssignmentExpression	* strict_class = 1		47513	0		=			
ANR	48090	UnaryOperationExpression	* strict_class		47513	0					
ANR	48091	UnaryOperator	*		47513	0					
ANR	48092	Identifier	strict_class		47513	1					
ANR	48093	PrimaryExpression	1		47513	1					
ANR	48094	ExpressionStatement	ret = 1	2894:2:85013:85020	47513	7	True				
ANR	48095	AssignmentExpression	ret = 1		47513	0		=			
ANR	48096	Identifier	ret		47513	0					
ANR	48097	PrimaryExpression	1		47513	1					
ANR	48098	ElseStatement	else		47513	0					
ANR	48099	CompoundStatement		76:8:2474:2474	47513	0					
ANR	48100	IfStatement	if ( error )		47513	0					
ANR	48101	Condition	error	2896:6:85038:85042	47513	0	True				
ANR	48102	Identifier	error		47513	0					
ANR	48103	ExpressionStatement	"zend_spprintf ( error , 0 , ""class '%.*s' not found"" , name_len , ZSTR_VAL ( name ) )"	2896:13:85045:85120	47513	1	True				
ANR	48104	CallExpression	"zend_spprintf ( error , 0 , ""class '%.*s' not found"" , name_len , ZSTR_VAL ( name ) )"		47513	0					
ANR	48105	Callee	zend_spprintf		47513	0					
ANR	48106	Identifier	zend_spprintf		47513	0					
ANR	48107	ArgumentList	error		47513	1					
ANR	48108	Argument	error		47513	0					
ANR	48109	Identifier	error		47513	0					
ANR	48110	Argument	0		47513	1					
ANR	48111	PrimaryExpression	0		47513	0					
ANR	48112	Argument	"""class '%.*s' not found"""		47513	2					
ANR	48113	PrimaryExpression	"""class '%.*s' not found"""		47513	0					
ANR	48114	Argument	name_len		47513	3					
ANR	48115	Identifier	name_len		47513	0					
ANR	48116	Argument	ZSTR_VAL ( name )		47513	4					
ANR	48117	CallExpression	ZSTR_VAL ( name )		47513	0					
ANR	48118	Callee	ZSTR_VAL		47513	0					
ANR	48119	Identifier	ZSTR_VAL		47513	0					
ANR	48120	ArgumentList	name		47513	1					
ANR	48121	Argument	name		47513	0					
ANR	48122	Identifier	name		47513	0					
ANR	48123	ExpressionStatement	"ZSTR_ALLOCA_FREE ( lcname , use_heap )"	2898:1:85126:85160	47513	9	True				
ANR	48124	CallExpression	"ZSTR_ALLOCA_FREE ( lcname , use_heap )"		47513	0					
ANR	48125	Callee	ZSTR_ALLOCA_FREE		47513	0					
ANR	48126	Identifier	ZSTR_ALLOCA_FREE		47513	0					
ANR	48127	ArgumentList	lcname		47513	1					
ANR	48128	Argument	lcname		47513	0					
ANR	48129	Identifier	lcname		47513	0					
ANR	48130	Argument	use_heap		47513	1					
ANR	48131	Identifier	use_heap		47513	0					
ANR	48132	ReturnStatement	return ret ;	2899:1:85163:85173	47513	10	True				
ANR	48133	Identifier	ret		47513	0					
ANR	48134	ReturnType	static int		47513	1					
ANR	48135	Identifier	zend_is_callable_check_class		47513	2					
ANR	48136	ParameterList	"zend_string * name , zend_fcall_info_cache * fcc , int * strict_class , char * * error"		47513	3					
ANR	48137	Parameter	zend_string * name	2819:40:82465:82481	47513	0	True				
ANR	48138	ParameterType	zend_string *		47513	0					
ANR	48139	Identifier	name		47513	1					
ANR	48140	Parameter	zend_fcall_info_cache * fcc	2819:59:82484:82509	47513	1	True				
ANR	48141	ParameterType	zend_fcall_info_cache *		47513	0					
ANR	48142	Identifier	fcc		47513	1					
ANR	48143	Parameter	int * strict_class	2819:87:82512:82528	47513	2	True				
ANR	48144	ParameterType	int *		47513	0					
ANR	48145	Identifier	strict_class		47513	1					
ANR	48146	Parameter	char * * error	2819:106:82531:82542	47513	3	True				
ANR	48147	ParameterType	char * *		47513	0					
ANR	48148	Identifier	error		47513	1					
ANR	48149	CFGEntryNode	ENTRY		47513		True				
ANR	48150	CFGExitNode	EXIT		47513		True				
ANR	48151	Symbol	zend_lookup_class_ex		47513						
ANR	48152	Symbol	instanceof_function		47513						
ANR	48153	Symbol	zend_string_equals_literal		47513						
ANR	48154	Symbol	object -> ce		47513						
ANR	48155	Symbol	ex -> func -> type		47513						
ANR	48156	Symbol	fcc		47513						
ANR	48157	Symbol	current_execute_data		47513						
ANR	48158	Symbol	fcc -> calling_scope		47513						
ANR	48159	Symbol	called_scope		47513						
ANR	48160	Symbol	* EG		47513						
ANR	48161	Symbol	error		47513						
ANR	48162	Symbol	* object		47513						
ANR	48163	Symbol	zend_get_called_scope		47513						
ANR	48164	Symbol	ex -> func		47513						
ANR	48165	Symbol	zend_get_this_object		47513						
ANR	48166	Symbol	* fcc		47513						
ANR	48167	Symbol	scope		47513						
ANR	48168	Symbol	* strict_class		47513						
ANR	48169	Symbol	* * fcc		47513						
ANR	48170	Symbol	name_len		47513						
ANR	48171	Symbol	ex -> func -> common		47513						
ANR	48172	Symbol	* * ex		47513						
ANR	48173	Symbol	strict_class		47513						
ANR	48174	Symbol	ret		47513						
ANR	48175	Symbol	ce		47513						
ANR	48176	Symbol	EG		47513						
ANR	48177	Symbol	NULL		47513						
ANR	48178	Symbol	ex -> prev_execute_data		47513						
ANR	48179	Symbol	ex -> func -> common . scope		47513						
ANR	48180	Symbol	EG ( scope ) -> parent		47513						
ANR	48181	Symbol	* fcc -> object		47513						
ANR	48182	Symbol	fcc -> object		47513						
ANR	48183	Symbol	ZSTR_VAL		47513						
ANR	48184	Symbol	lcname		47513						
ANR	48185	Symbol	ex		47513						
ANR	48186	Symbol	* error		47513						
ANR	48187	Symbol	name		47513						
ANR	48188	Symbol	ZSTR_LEN		47513						
ANR	48189	Symbol	estrdup		47513						
ANR	48190	Symbol	fcc -> called_scope		47513						
ANR	48191	Symbol	ZEND_USER_CODE		47513						
ANR	48192	Symbol	* ex		47513						
ANR	48193	Symbol	* ex -> func		47513						
ANR	48194	Symbol	fcc -> object -> ce		47513						
ANR	48195	Symbol	use_heap		47513						
ANR	48196	Symbol	object		47513						
ANR	48197	Function	zend_is_callable_check_func	2903:0:85188:94956							
ANR	48198	FunctionDef	"zend_is_callable_check_func (int check_flags , zval * callable , zend_fcall_info_cache * fcc , int strict_class , char * * error)"		48197	0					
ANR	48199	CompoundStatement		2904:0:85330:94956	48197	0					
ANR	48200	IdentifierDeclStatement	zend_class_entry * ce_org = fcc -> calling_scope ;	2905:1:85333:85378	48197	0	True				
ANR	48201	IdentifierDecl	* ce_org = fcc -> calling_scope		48197	0					
ANR	48202	IdentifierDeclType	zend_class_entry *		48197	0					
ANR	48203	Identifier	ce_org		48197	1					
ANR	48204	AssignmentExpression	* ce_org = fcc -> calling_scope		48197	2		=			
ANR	48205	Identifier	ce_org		48197	0					
ANR	48206	PtrMemberAccess	fcc -> calling_scope		48197	1					
ANR	48207	Identifier	fcc		48197	0					
ANR	48208	Identifier	calling_scope		48197	1					
ANR	48209	IdentifierDeclStatement	int retval = 0 ;	2906:1:85381:85395	48197	1	True				
ANR	48210	IdentifierDecl	retval = 0		48197	0					
ANR	48211	IdentifierDeclType	int		48197	0					
ANR	48212	Identifier	retval		48197	1					
ANR	48213	AssignmentExpression	retval = 0		48197	2		=			
ANR	48214	Identifier	retval		48197	0					
ANR	48215	PrimaryExpression	0		48197	1					
ANR	48216	IdentifierDeclStatement	"zend_string * mname , * cname ;"	2907:1:85398:85424	48197	2	True				
ANR	48217	IdentifierDecl	* mname		48197	0					
ANR	48218	IdentifierDeclType	zend_string *		48197	0					
ANR	48219	Identifier	mname		48197	1					
ANR	48220	IdentifierDecl	* cname		48197	1					
ANR	48221	IdentifierDeclType	zend_string *		48197	0					
ANR	48222	Identifier	cname		48197	1					
ANR	48223	IdentifierDeclStatement	zend_string * lmname ;	2908:1:85427:85446	48197	3	True				
ANR	48224	IdentifierDecl	* lmname		48197	0					
ANR	48225	IdentifierDeclType	zend_string *		48197	0					
ANR	48226	Identifier	lmname		48197	1					
ANR	48227	IdentifierDeclStatement	const char * colon ;	2909:1:85449:85466	48197	4	True				
ANR	48228	IdentifierDecl	* colon		48197	0					
ANR	48229	IdentifierDeclType	const char *		48197	0					
ANR	48230	Identifier	colon		48197	1					
ANR	48231	IdentifierDeclStatement	"size_t clen , mlen ;"	2910:1:85469:85486	48197	5	True				
ANR	48232	IdentifierDecl	clen		48197	0					
ANR	48233	IdentifierDeclType	size_t		48197	0					
ANR	48234	Identifier	clen		48197	1					
ANR	48235	IdentifierDecl	mlen		48197	1					
ANR	48236	IdentifierDeclType	size_t		48197	0					
ANR	48237	Identifier	mlen		48197	1					
ANR	48238	IdentifierDeclStatement	zend_class_entry * last_scope ;	2911:1:85489:85517	48197	6	True				
ANR	48239	IdentifierDecl	* last_scope		48197	0					
ANR	48240	IdentifierDeclType	zend_class_entry *		48197	0					
ANR	48241	Identifier	last_scope		48197	1					
ANR	48242	IdentifierDeclStatement	HashTable * ftable ;	2912:1:85520:85537	48197	7	True				
ANR	48243	IdentifierDecl	* ftable		48197	0					
ANR	48244	IdentifierDeclType	HashTable *		48197	0					
ANR	48245	Identifier	ftable		48197	1					
ANR	48246	IdentifierDeclStatement	int call_via_handler = 0 ;	2913:1:85540:85564	48197	8	True				
ANR	48247	IdentifierDecl	call_via_handler = 0		48197	0					
ANR	48248	IdentifierDeclType	int		48197	0					
ANR	48249	Identifier	call_via_handler		48197	1					
ANR	48250	AssignmentExpression	call_via_handler = 0		48197	2		=			
ANR	48251	Identifier	call_via_handler		48197	0					
ANR	48252	PrimaryExpression	0		48197	1					
ANR	48253	Statement	ALLOCA_FLAG	2914:1:85567:85577	48197	9	True				
ANR	48254	Statement	(	2914:12:85578:85578	48197	10	True				
ANR	48255	Statement	use_heap	2914:13:85579:85586	48197	11	True				
ANR	48256	Statement	)	2914:21:85587:85587	48197	12	True				
ANR	48257	IfStatement	if ( error )		48197	13					
ANR	48258	Condition	error	2916:5:85595:85599	48197	0	True				
ANR	48259	Identifier	error		48197	0					
ANR	48260	CompoundStatement		13:12:271:271	48197	1					
ANR	48261	ExpressionStatement	* error = NULL	2917:2:85606:85619	48197	0	True				
ANR	48262	AssignmentExpression	* error = NULL		48197	0		=			
ANR	48263	UnaryOperationExpression	* error		48197	0					
ANR	48264	UnaryOperator	*		48197	0					
ANR	48265	Identifier	error		48197	1					
ANR	48266	Identifier	NULL		48197	1					
ANR	48267	ExpressionStatement	fcc -> calling_scope = NULL	2920:1:85626:85651	48197	14	True				
ANR	48268	AssignmentExpression	fcc -> calling_scope = NULL		48197	0		=			
ANR	48269	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	48270	Identifier	fcc		48197	0					
ANR	48271	Identifier	calling_scope		48197	1					
ANR	48272	Identifier	NULL		48197	1					
ANR	48273	ExpressionStatement	fcc -> function_handler = NULL	2921:1:85654:85682	48197	15	True				
ANR	48274	AssignmentExpression	fcc -> function_handler = NULL		48197	0		=			
ANR	48275	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	48276	Identifier	fcc		48197	0					
ANR	48277	Identifier	function_handler		48197	1					
ANR	48278	Identifier	NULL		48197	1					
ANR	48279	IfStatement	if ( ! ce_org )		48197	16					
ANR	48280	Condition	! ce_org	2923:5:85690:85696	48197	0	True				
ANR	48281	UnaryOperationExpression	! ce_org		48197	0					
ANR	48282	UnaryOperator	!		48197	0					
ANR	48283	Identifier	ce_org		48197	1					
ANR	48284	CompoundStatement		21:2:372:391	48197	1					
ANR	48285	IdentifierDeclStatement	zend_string * lmname ;	2924:2:85703:85722	48197	0	True				
ANR	48286	IdentifierDecl	* lmname		48197	0					
ANR	48287	IdentifierDeclType	zend_string *		48197	0					
ANR	48288	Identifier	lmname		48197	1					
ANR	48289	IfStatement	if ( UNEXPECTED ( Z_STRVAL_P ( callable ) [ 0 ] == '\\\\' ) )		48197	1					
ANR	48290	Condition	UNEXPECTED ( Z_STRVAL_P ( callable ) [ 0 ] == '\\\\' )	2927:6:85754:85796	48197	0	True				
ANR	48291	CallExpression	UNEXPECTED ( Z_STRVAL_P ( callable ) [ 0 ] == '\\\\' )		48197	0					
ANR	48292	Callee	UNEXPECTED		48197	0					
ANR	48293	Identifier	UNEXPECTED		48197	0					
ANR	48294	ArgumentList	Z_STRVAL_P ( callable ) [ 0 ] == '\\\\'		48197	1					
ANR	48295	Argument	Z_STRVAL_P ( callable ) [ 0 ] == '\\\\'		48197	0					
ANR	48296	EqualityExpression	Z_STRVAL_P ( callable ) [ 0 ] == '\\\\'		48197	0		==			
ANR	48297	ArrayIndexing	Z_STRVAL_P ( callable ) [ 0 ]		48197	0					
ANR	48298	CallExpression	Z_STRVAL_P ( callable )		48197	0					
ANR	48299	Callee	Z_STRVAL_P		48197	0					
ANR	48300	Identifier	Z_STRVAL_P		48197	0					
ANR	48301	ArgumentList	callable		48197	1					
ANR	48302	Argument	callable		48197	0					
ANR	48303	Identifier	callable		48197	0					
ANR	48304	PrimaryExpression	0		48197	1					
ANR	48305	PrimaryExpression	'\\\\'		48197	1					
ANR	48306	CompoundStatement		24:51:468:468	48197	1					
ANR	48307	ExpressionStatement	"ZSTR_ALLOCA_INIT ( lmname , Z_STRVAL_P ( callable ) + 1 , Z_STRLEN_P ( callable ) - 1 , use_heap )"	2928:3:85804:85890	48197	0	True				
ANR	48308	CallExpression	"ZSTR_ALLOCA_INIT ( lmname , Z_STRVAL_P ( callable ) + 1 , Z_STRLEN_P ( callable ) - 1 , use_heap )"		48197	0					
ANR	48309	Callee	ZSTR_ALLOCA_INIT		48197	0					
ANR	48310	Identifier	ZSTR_ALLOCA_INIT		48197	0					
ANR	48311	ArgumentList	lmname		48197	1					
ANR	48312	Argument	lmname		48197	0					
ANR	48313	Identifier	lmname		48197	0					
ANR	48314	Argument	Z_STRVAL_P ( callable ) + 1		48197	1					
ANR	48315	AdditiveExpression	Z_STRVAL_P ( callable ) + 1		48197	0		+			
ANR	48316	CallExpression	Z_STRVAL_P ( callable )		48197	0					
ANR	48317	Callee	Z_STRVAL_P		48197	0					
ANR	48318	Identifier	Z_STRVAL_P		48197	0					
ANR	48319	ArgumentList	callable		48197	1					
ANR	48320	Argument	callable		48197	0					
ANR	48321	Identifier	callable		48197	0					
ANR	48322	PrimaryExpression	1		48197	1					
ANR	48323	Argument	Z_STRLEN_P ( callable ) - 1		48197	2					
ANR	48324	AdditiveExpression	Z_STRLEN_P ( callable ) - 1		48197	0		-			
ANR	48325	CallExpression	Z_STRLEN_P ( callable )		48197	0					
ANR	48326	Callee	Z_STRLEN_P		48197	0					
ANR	48327	Identifier	Z_STRLEN_P		48197	0					
ANR	48328	ArgumentList	callable		48197	1					
ANR	48329	Argument	callable		48197	0					
ANR	48330	Identifier	callable		48197	0					
ANR	48331	PrimaryExpression	1		48197	1					
ANR	48332	Argument	use_heap		48197	3					
ANR	48333	Identifier	use_heap		48197	0					
ANR	48334	ElseStatement	else		48197	0					
ANR	48335	CompoundStatement		26:9:570:570	48197	0					
ANR	48336	ExpressionStatement	lmname = Z_STR_P ( callable )	2930:3:85906:85932	48197	0	True				
ANR	48337	AssignmentExpression	lmname = Z_STR_P ( callable )		48197	0		=			
ANR	48338	Identifier	lmname		48197	0					
ANR	48339	CallExpression	Z_STR_P ( callable )		48197	1					
ANR	48340	Callee	Z_STR_P		48197	0					
ANR	48341	Identifier	Z_STR_P		48197	0					
ANR	48342	ArgumentList	callable		48197	1					
ANR	48343	Argument	callable		48197	0					
ANR	48344	Identifier	callable		48197	0					
ANR	48345	IfStatement	"if ( EXPECTED ( ( fcc -> function_handler = zend_hash_find_ptr ( EG ( function_table ) , lmname ) ) != NULL ) )"		48197	2					
ANR	48346	Condition	"EXPECTED ( ( fcc -> function_handler = zend_hash_find_ptr ( EG ( function_table ) , lmname ) ) != NULL )"	2934:6:86056:86145	48197	0	True				
ANR	48347	CallExpression	"EXPECTED ( ( fcc -> function_handler = zend_hash_find_ptr ( EG ( function_table ) , lmname ) ) != NULL )"		48197	0					
ANR	48348	Callee	EXPECTED		48197	0					
ANR	48349	Identifier	EXPECTED		48197	0					
ANR	48350	ArgumentList	"( fcc -> function_handler = zend_hash_find_ptr ( EG ( function_table ) , lmname ) ) != NULL"		48197	1					
ANR	48351	Argument	"( fcc -> function_handler = zend_hash_find_ptr ( EG ( function_table ) , lmname ) ) != NULL"		48197	0					
ANR	48352	EqualityExpression	"( fcc -> function_handler = zend_hash_find_ptr ( EG ( function_table ) , lmname ) ) != NULL"		48197	0		!=			
ANR	48353	AssignmentExpression	"fcc -> function_handler = zend_hash_find_ptr ( EG ( function_table ) , lmname )"		48197	0		=			
ANR	48354	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	48355	Identifier	fcc		48197	0					
ANR	48356	Identifier	function_handler		48197	1					
ANR	48357	CallExpression	"zend_hash_find_ptr ( EG ( function_table ) , lmname )"		48197	1					
ANR	48358	Callee	zend_hash_find_ptr		48197	0					
ANR	48359	Identifier	zend_hash_find_ptr		48197	0					
ANR	48360	ArgumentList	EG ( function_table )		48197	1					
ANR	48361	Argument	EG ( function_table )		48197	0					
ANR	48362	CallExpression	EG ( function_table )		48197	0					
ANR	48363	Callee	EG		48197	0					
ANR	48364	Identifier	EG		48197	0					
ANR	48365	ArgumentList	function_table		48197	1					
ANR	48366	Argument	function_table		48197	0					
ANR	48367	Identifier	function_table		48197	0					
ANR	48368	Argument	lmname		48197	1					
ANR	48369	Identifier	lmname		48197	0					
ANR	48370	Identifier	NULL		48197	1					
ANR	48371	CompoundStatement		31:98:817:817	48197	1					
ANR	48372	IfStatement	if ( lmname != Z_STR_P ( callable ) )		48197	0					
ANR	48373	Condition	lmname != Z_STR_P ( callable )	2935:7:86157:86183	48197	0	True				
ANR	48374	EqualityExpression	lmname != Z_STR_P ( callable )		48197	0		!=			
ANR	48375	Identifier	lmname		48197	0					
ANR	48376	CallExpression	Z_STR_P ( callable )		48197	1					
ANR	48377	Callee	Z_STR_P		48197	0					
ANR	48378	Identifier	Z_STR_P		48197	0					
ANR	48379	ArgumentList	callable		48197	1					
ANR	48380	Argument	callable		48197	0					
ANR	48381	Identifier	callable		48197	0					
ANR	48382	CompoundStatement		32:36:855:855	48197	1					
ANR	48383	ExpressionStatement	"ZSTR_ALLOCA_FREE ( lmname , use_heap )"	2936:4:86192:86226	48197	0	True				
ANR	48384	CallExpression	"ZSTR_ALLOCA_FREE ( lmname , use_heap )"		48197	0					
ANR	48385	Callee	ZSTR_ALLOCA_FREE		48197	0					
ANR	48386	Identifier	ZSTR_ALLOCA_FREE		48197	0					
ANR	48387	ArgumentList	lmname		48197	1					
ANR	48388	Argument	lmname		48197	0					
ANR	48389	Identifier	lmname		48197	0					
ANR	48390	Argument	use_heap		48197	1					
ANR	48391	Identifier	use_heap		48197	0					
ANR	48392	ExpressionStatement	fcc -> initialized = 1	2938:3:86236:86256	48197	1	True				
ANR	48393	AssignmentExpression	fcc -> initialized = 1		48197	0		=			
ANR	48394	PtrMemberAccess	fcc -> initialized		48197	0					
ANR	48395	Identifier	fcc		48197	0					
ANR	48396	Identifier	initialized		48197	1					
ANR	48397	PrimaryExpression	1		48197	1					
ANR	48398	ReturnStatement	return 1 ;	2939:3:86261:86269	48197	2	True				
ANR	48399	PrimaryExpression	1		48197	0					
ANR	48400	ElseStatement	else		48197	0					
ANR	48401	CompoundStatement		37:9:949:949	48197	0					
ANR	48402	IfStatement	if ( lmname == Z_STR_P ( callable ) )		48197	0					
ANR	48403	Condition	lmname == Z_STR_P ( callable )	2941:7:86289:86315	48197	0	True				
ANR	48404	EqualityExpression	lmname == Z_STR_P ( callable )		48197	0		==			
ANR	48405	Identifier	lmname		48197	0					
ANR	48406	CallExpression	Z_STR_P ( callable )		48197	1					
ANR	48407	Callee	Z_STR_P		48197	0					
ANR	48408	Identifier	Z_STR_P		48197	0					
ANR	48409	ArgumentList	callable		48197	1					
ANR	48410	Argument	callable		48197	0					
ANR	48411	Identifier	callable		48197	0					
ANR	48412	CompoundStatement		38:36:987:987	48197	1					
ANR	48413	ExpressionStatement	"ZSTR_ALLOCA_INIT ( lmname , Z_STRVAL_P ( callable ) , Z_STRLEN_P ( callable ) , use_heap )"	2942:4:86324:86402	48197	0	True				
ANR	48414	CallExpression	"ZSTR_ALLOCA_INIT ( lmname , Z_STRVAL_P ( callable ) , Z_STRLEN_P ( callable ) , use_heap )"		48197	0					
ANR	48415	Callee	ZSTR_ALLOCA_INIT		48197	0					
ANR	48416	Identifier	ZSTR_ALLOCA_INIT		48197	0					
ANR	48417	ArgumentList	lmname		48197	1					
ANR	48418	Argument	lmname		48197	0					
ANR	48419	Identifier	lmname		48197	0					
ANR	48420	Argument	Z_STRVAL_P ( callable )		48197	1					
ANR	48421	CallExpression	Z_STRVAL_P ( callable )		48197	0					
ANR	48422	Callee	Z_STRVAL_P		48197	0					
ANR	48423	Identifier	Z_STRVAL_P		48197	0					
ANR	48424	ArgumentList	callable		48197	1					
ANR	48425	Argument	callable		48197	0					
ANR	48426	Identifier	callable		48197	0					
ANR	48427	Argument	Z_STRLEN_P ( callable )		48197	2					
ANR	48428	CallExpression	Z_STRLEN_P ( callable )		48197	0					
ANR	48429	Callee	Z_STRLEN_P		48197	0					
ANR	48430	Identifier	Z_STRLEN_P		48197	0					
ANR	48431	ArgumentList	callable		48197	1					
ANR	48432	Argument	callable		48197	0					
ANR	48433	Identifier	callable		48197	0					
ANR	48434	Argument	use_heap		48197	3					
ANR	48435	Identifier	use_heap		48197	0					
ANR	48436	ElseStatement	else		48197	0					
ANR	48437	CompoundStatement		40:10:1083:1083	48197	0					
ANR	48438	ExpressionStatement	zend_string_forget_hash_val ( lmname )	2944:4:86420:86455	48197	0	True				
ANR	48439	CallExpression	zend_string_forget_hash_val ( lmname )		48197	0					
ANR	48440	Callee	zend_string_forget_hash_val		48197	0					
ANR	48441	Identifier	zend_string_forget_hash_val		48197	0					
ANR	48442	ArgumentList	lmname		48197	1					
ANR	48443	Argument	lmname		48197	0					
ANR	48444	Identifier	lmname		48197	0					
ANR	48445	ExpressionStatement	"zend_str_tolower ( ZSTR_VAL ( lmname ) , ZSTR_LEN ( lmname ) )"	2946:3:86465:86517	48197	1	True				
ANR	48446	CallExpression	"zend_str_tolower ( ZSTR_VAL ( lmname ) , ZSTR_LEN ( lmname ) )"		48197	0					
ANR	48447	Callee	zend_str_tolower		48197	0					
ANR	48448	Identifier	zend_str_tolower		48197	0					
ANR	48449	ArgumentList	ZSTR_VAL ( lmname )		48197	1					
ANR	48450	Argument	ZSTR_VAL ( lmname )		48197	0					
ANR	48451	CallExpression	ZSTR_VAL ( lmname )		48197	0					
ANR	48452	Callee	ZSTR_VAL		48197	0					
ANR	48453	Identifier	ZSTR_VAL		48197	0					
ANR	48454	ArgumentList	lmname		48197	1					
ANR	48455	Argument	lmname		48197	0					
ANR	48456	Identifier	lmname		48197	0					
ANR	48457	Argument	ZSTR_LEN ( lmname )		48197	1					
ANR	48458	CallExpression	ZSTR_LEN ( lmname )		48197	0					
ANR	48459	Callee	ZSTR_LEN		48197	0					
ANR	48460	Identifier	ZSTR_LEN		48197	0					
ANR	48461	ArgumentList	lmname		48197	1					
ANR	48462	Argument	lmname		48197	0					
ANR	48463	Identifier	lmname		48197	0					
ANR	48464	IfStatement	"if ( ( fcc -> function_handler = zend_hash_find_ptr ( EG ( function_table ) , lmname ) ) != NULL )"		48197	2					
ANR	48465	Condition	"( fcc -> function_handler = zend_hash_find_ptr ( EG ( function_table ) , lmname ) ) != NULL"	2947:7:86526:86605	48197	0	True				
ANR	48466	EqualityExpression	"( fcc -> function_handler = zend_hash_find_ptr ( EG ( function_table ) , lmname ) ) != NULL"		48197	0		!=			
ANR	48467	AssignmentExpression	"fcc -> function_handler = zend_hash_find_ptr ( EG ( function_table ) , lmname )"		48197	0		=			
ANR	48468	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	48469	Identifier	fcc		48197	0					
ANR	48470	Identifier	function_handler		48197	1					
ANR	48471	CallExpression	"zend_hash_find_ptr ( EG ( function_table ) , lmname )"		48197	1					
ANR	48472	Callee	zend_hash_find_ptr		48197	0					
ANR	48473	Identifier	zend_hash_find_ptr		48197	0					
ANR	48474	ArgumentList	EG ( function_table )		48197	1					
ANR	48475	Argument	EG ( function_table )		48197	0					
ANR	48476	CallExpression	EG ( function_table )		48197	0					
ANR	48477	Callee	EG		48197	0					
ANR	48478	Identifier	EG		48197	0					
ANR	48479	ArgumentList	function_table		48197	1					
ANR	48480	Argument	function_table		48197	0					
ANR	48481	Identifier	function_table		48197	0					
ANR	48482	Argument	lmname		48197	1					
ANR	48483	Identifier	lmname		48197	0					
ANR	48484	Identifier	NULL		48197	1					
ANR	48485	CompoundStatement		44:89:1277:1277	48197	1					
ANR	48486	ExpressionStatement	"ZSTR_ALLOCA_FREE ( lmname , use_heap )"	2948:4:86614:86648	48197	0	True				
ANR	48487	CallExpression	"ZSTR_ALLOCA_FREE ( lmname , use_heap )"		48197	0					
ANR	48488	Callee	ZSTR_ALLOCA_FREE		48197	0					
ANR	48489	Identifier	ZSTR_ALLOCA_FREE		48197	0					
ANR	48490	ArgumentList	lmname		48197	1					
ANR	48491	Argument	lmname		48197	0					
ANR	48492	Identifier	lmname		48197	0					
ANR	48493	Argument	use_heap		48197	1					
ANR	48494	Identifier	use_heap		48197	0					
ANR	48495	ExpressionStatement	fcc -> initialized = 1	2949:4:86654:86674	48197	1	True				
ANR	48496	AssignmentExpression	fcc -> initialized = 1		48197	0		=			
ANR	48497	PtrMemberAccess	fcc -> initialized		48197	0					
ANR	48498	Identifier	fcc		48197	0					
ANR	48499	Identifier	initialized		48197	1					
ANR	48500	PrimaryExpression	1		48197	1					
ANR	48501	ReturnStatement	return 1 ;	2950:4:86680:86688	48197	2	True				
ANR	48502	PrimaryExpression	1		48197	0					
ANR	48503	IfStatement	if ( lmname != Z_STR_P ( callable ) )		48197	3					
ANR	48504	Condition	lmname != Z_STR_P ( callable )	2953:6:86705:86731	48197	0	True				
ANR	48505	EqualityExpression	lmname != Z_STR_P ( callable )		48197	0		!=			
ANR	48506	Identifier	lmname		48197	0					
ANR	48507	CallExpression	Z_STR_P ( callable )		48197	1					
ANR	48508	Callee	Z_STR_P		48197	0					
ANR	48509	Identifier	Z_STR_P		48197	0					
ANR	48510	ArgumentList	callable		48197	1					
ANR	48511	Argument	callable		48197	0					
ANR	48512	Identifier	callable		48197	0					
ANR	48513	CompoundStatement		50:35:1403:1403	48197	1					
ANR	48514	ExpressionStatement	"ZSTR_ALLOCA_FREE ( lmname , use_heap )"	2954:3:86739:86773	48197	0	True				
ANR	48515	CallExpression	"ZSTR_ALLOCA_FREE ( lmname , use_heap )"		48197	0					
ANR	48516	Callee	ZSTR_ALLOCA_FREE		48197	0					
ANR	48517	Identifier	ZSTR_ALLOCA_FREE		48197	0					
ANR	48518	ArgumentList	lmname		48197	1					
ANR	48519	Argument	lmname		48197	0					
ANR	48520	Identifier	lmname		48197	0					
ANR	48521	Argument	use_heap		48197	1					
ANR	48522	Identifier	use_heap		48197	0					
ANR	48523	IfStatement	"if ( ( colon = zend_memrchr ( Z_STRVAL_P ( callable ) , ':' , Z_STRLEN_P ( callable ) ) ) != NULL && colon > Z_STRVAL_P ( callable ) && * ( colon - 1 ) == ':' )"		48197	17					
ANR	48524	Condition	"( colon = zend_memrchr ( Z_STRVAL_P ( callable ) , ':' , Z_STRLEN_P ( callable ) ) ) != NULL && colon > Z_STRVAL_P ( callable ) && * ( colon - 1 ) == ':'"	2959:5:86853:86988	48197	0	True				
ANR	48525	AndExpression	"( colon = zend_memrchr ( Z_STRVAL_P ( callable ) , ':' , Z_STRLEN_P ( callable ) ) ) != NULL && colon > Z_STRVAL_P ( callable ) && * ( colon - 1 ) == ':'"		48197	0		&&			
ANR	48526	EqualityExpression	"( colon = zend_memrchr ( Z_STRVAL_P ( callable ) , ':' , Z_STRLEN_P ( callable ) ) ) != NULL"		48197	0		!=			
ANR	48527	AssignmentExpression	"colon = zend_memrchr ( Z_STRVAL_P ( callable ) , ':' , Z_STRLEN_P ( callable ) )"		48197	0		=			
ANR	48528	Identifier	colon		48197	0					
ANR	48529	CallExpression	"zend_memrchr ( Z_STRVAL_P ( callable ) , ':' , Z_STRLEN_P ( callable ) )"		48197	1					
ANR	48530	Callee	zend_memrchr		48197	0					
ANR	48531	Identifier	zend_memrchr		48197	0					
ANR	48532	ArgumentList	Z_STRVAL_P ( callable )		48197	1					
ANR	48533	Argument	Z_STRVAL_P ( callable )		48197	0					
ANR	48534	CallExpression	Z_STRVAL_P ( callable )		48197	0					
ANR	48535	Callee	Z_STRVAL_P		48197	0					
ANR	48536	Identifier	Z_STRVAL_P		48197	0					
ANR	48537	ArgumentList	callable		48197	1					
ANR	48538	Argument	callable		48197	0					
ANR	48539	Identifier	callable		48197	0					
ANR	48540	Argument	':'		48197	1					
ANR	48541	PrimaryExpression	':'		48197	0					
ANR	48542	Argument	Z_STRLEN_P ( callable )		48197	2					
ANR	48543	CallExpression	Z_STRLEN_P ( callable )		48197	0					
ANR	48544	Callee	Z_STRLEN_P		48197	0					
ANR	48545	Identifier	Z_STRLEN_P		48197	0					
ANR	48546	ArgumentList	callable		48197	1					
ANR	48547	Argument	callable		48197	0					
ANR	48548	Identifier	callable		48197	0					
ANR	48549	Identifier	NULL		48197	1					
ANR	48550	AndExpression	colon > Z_STRVAL_P ( callable ) && * ( colon - 1 ) == ':'		48197	1		&&			
ANR	48551	RelationalExpression	colon > Z_STRVAL_P ( callable )		48197	0		>			
ANR	48552	Identifier	colon		48197	0					
ANR	48553	CallExpression	Z_STRVAL_P ( callable )		48197	1					
ANR	48554	Callee	Z_STRVAL_P		48197	0					
ANR	48555	Identifier	Z_STRVAL_P		48197	0					
ANR	48556	ArgumentList	callable		48197	1					
ANR	48557	Argument	callable		48197	0					
ANR	48558	Identifier	callable		48197	0					
ANR	48559	EqualityExpression	* ( colon - 1 ) == ':'		48197	1		==			
ANR	48560	UnaryOperationExpression	* ( colon - 1 )		48197	0					
ANR	48561	UnaryOperator	*		48197	0					
ANR	48562	AdditiveExpression	colon - 1		48197	1		-			
ANR	48563	Identifier	colon		48197	0					
ANR	48564	PrimaryExpression	1		48197	1					
ANR	48565	PrimaryExpression	':'		48197	1					
ANR	48566	CompoundStatement		59:3:1662:1662	48197	1					
ANR	48567	ExpressionStatement	colon --	2963:2:86997:87004	48197	0	True				
ANR	48568	PostIncDecOperationExpression	colon --		48197	0					
ANR	48569	Identifier	colon		48197	0					
ANR	48570	IncDec	--		48197	1					
ANR	48571	ExpressionStatement	clen = colon - Z_STRVAL_P ( callable )	2964:2:87008:87043	48197	1	True				
ANR	48572	AssignmentExpression	clen = colon - Z_STRVAL_P ( callable )		48197	0		=			
ANR	48573	Identifier	clen		48197	0					
ANR	48574	AdditiveExpression	colon - Z_STRVAL_P ( callable )		48197	1		-			
ANR	48575	Identifier	colon		48197	0					
ANR	48576	CallExpression	Z_STRVAL_P ( callable )		48197	1					
ANR	48577	Callee	Z_STRVAL_P		48197	0					
ANR	48578	Identifier	Z_STRVAL_P		48197	0					
ANR	48579	ArgumentList	callable		48197	1					
ANR	48580	Argument	callable		48197	0					
ANR	48581	Identifier	callable		48197	0					
ANR	48582	ExpressionStatement	mlen = Z_STRLEN_P ( callable ) - clen - 2	2965:2:87047:87085	48197	2	True				
ANR	48583	AssignmentExpression	mlen = Z_STRLEN_P ( callable ) - clen - 2		48197	0		=			
ANR	48584	Identifier	mlen		48197	0					
ANR	48585	AdditiveExpression	Z_STRLEN_P ( callable ) - clen - 2		48197	1		-			
ANR	48586	CallExpression	Z_STRLEN_P ( callable )		48197	0					
ANR	48587	Callee	Z_STRLEN_P		48197	0					
ANR	48588	Identifier	Z_STRLEN_P		48197	0					
ANR	48589	ArgumentList	callable		48197	1					
ANR	48590	Argument	callable		48197	0					
ANR	48591	Identifier	callable		48197	0					
ANR	48592	AdditiveExpression	clen - 2		48197	1		-			
ANR	48593	Identifier	clen		48197	0					
ANR	48594	PrimaryExpression	2		48197	1					
ANR	48595	IfStatement	if ( colon == Z_STRVAL_P ( callable ) )		48197	3					
ANR	48596	Condition	colon == Z_STRVAL_P ( callable )	2967:6:87094:87122	48197	0	True				
ANR	48597	EqualityExpression	colon == Z_STRVAL_P ( callable )		48197	0		==			
ANR	48598	Identifier	colon		48197	0					
ANR	48599	CallExpression	Z_STRVAL_P ( callable )		48197	1					
ANR	48600	Callee	Z_STRVAL_P		48197	0					
ANR	48601	Identifier	Z_STRVAL_P		48197	0					
ANR	48602	ArgumentList	callable		48197	1					
ANR	48603	Argument	callable		48197	0					
ANR	48604	Identifier	callable		48197	0					
ANR	48605	CompoundStatement		64:37:1794:1794	48197	1					
ANR	48606	IfStatement	if ( error )		48197	0					
ANR	48607	Condition	error	2968:7:87134:87138	48197	0	True				
ANR	48608	Identifier	error		48197	0					
ANR	48609	ExpressionStatement	"zend_spprintf ( error , 0 , ""invalid function name"" )"	2968:14:87141:87189	48197	1	True				
ANR	48610	CallExpression	"zend_spprintf ( error , 0 , ""invalid function name"" )"		48197	0					
ANR	48611	Callee	zend_spprintf		48197	0					
ANR	48612	Identifier	zend_spprintf		48197	0					
ANR	48613	ArgumentList	error		48197	1					
ANR	48614	Argument	error		48197	0					
ANR	48615	Identifier	error		48197	0					
ANR	48616	Argument	0		48197	1					
ANR	48617	PrimaryExpression	0		48197	0					
ANR	48618	Argument	"""invalid function name"""		48197	2					
ANR	48619	PrimaryExpression	"""invalid function name"""		48197	0					
ANR	48620	ReturnStatement	return 0 ;	2969:3:87194:87202	48197	1	True				
ANR	48621	PrimaryExpression	0		48197	0					
ANR	48622	ExpressionStatement	last_scope = EG ( scope )	2974:2:87297:87319	48197	4	True				
ANR	48623	AssignmentExpression	last_scope = EG ( scope )		48197	0		=			
ANR	48624	Identifier	last_scope		48197	0					
ANR	48625	CallExpression	EG ( scope )		48197	1					
ANR	48626	Callee	EG		48197	0					
ANR	48627	Identifier	EG		48197	0					
ANR	48628	ArgumentList	scope		48197	1					
ANR	48629	Argument	scope		48197	0					
ANR	48630	Identifier	scope		48197	0					
ANR	48631	IfStatement	if ( ce_org )		48197	5					
ANR	48632	Condition	ce_org	2975:6:87327:87332	48197	0	True				
ANR	48633	Identifier	ce_org		48197	0					
ANR	48634	CompoundStatement		72:14:2004:2004	48197	1					
ANR	48635	ExpressionStatement	EG ( scope ) = ce_org	2976:3:87340:87358	48197	0	True				
ANR	48636	AssignmentExpression	EG ( scope ) = ce_org		48197	0		=			
ANR	48637	CallExpression	EG ( scope )		48197	0					
ANR	48638	Callee	EG		48197	0					
ANR	48639	Identifier	EG		48197	0					
ANR	48640	ArgumentList	scope		48197	1					
ANR	48641	Argument	scope		48197	0					
ANR	48642	Identifier	scope		48197	0					
ANR	48643	Identifier	ce_org		48197	1					
ANR	48644	ExpressionStatement	"cname = zend_string_init ( Z_STRVAL_P ( callable ) , clen , 0 )"	2979:2:87367:87422	48197	6	True				
ANR	48645	AssignmentExpression	"cname = zend_string_init ( Z_STRVAL_P ( callable ) , clen , 0 )"		48197	0		=			
ANR	48646	Identifier	cname		48197	0					
ANR	48647	CallExpression	"zend_string_init ( Z_STRVAL_P ( callable ) , clen , 0 )"		48197	1					
ANR	48648	Callee	zend_string_init		48197	0					
ANR	48649	Identifier	zend_string_init		48197	0					
ANR	48650	ArgumentList	Z_STRVAL_P ( callable )		48197	1					
ANR	48651	Argument	Z_STRVAL_P ( callable )		48197	0					
ANR	48652	CallExpression	Z_STRVAL_P ( callable )		48197	0					
ANR	48653	Callee	Z_STRVAL_P		48197	0					
ANR	48654	Identifier	Z_STRVAL_P		48197	0					
ANR	48655	ArgumentList	callable		48197	1					
ANR	48656	Argument	callable		48197	0					
ANR	48657	Identifier	callable		48197	0					
ANR	48658	Argument	clen		48197	1					
ANR	48659	Identifier	clen		48197	0					
ANR	48660	Argument	0		48197	2					
ANR	48661	PrimaryExpression	0		48197	0					
ANR	48662	IfStatement	"if ( ! zend_is_callable_check_class ( cname , fcc , & strict_class , error ) )"		48197	7					
ANR	48663	Condition	"! zend_is_callable_check_class ( cname , fcc , & strict_class , error )"	2980:6:87430:87492	48197	0	True				
ANR	48664	UnaryOperationExpression	"! zend_is_callable_check_class ( cname , fcc , & strict_class , error )"		48197	0					
ANR	48665	UnaryOperator	!		48197	0					
ANR	48666	CallExpression	"zend_is_callable_check_class ( cname , fcc , & strict_class , error )"		48197	1					
ANR	48667	Callee	zend_is_callable_check_class		48197	0					
ANR	48668	Identifier	zend_is_callable_check_class		48197	0					
ANR	48669	ArgumentList	cname		48197	1					
ANR	48670	Argument	cname		48197	0					
ANR	48671	Identifier	cname		48197	0					
ANR	48672	Argument	fcc		48197	1					
ANR	48673	Identifier	fcc		48197	0					
ANR	48674	Argument	& strict_class		48197	2					
ANR	48675	UnaryOperationExpression	& strict_class		48197	0					
ANR	48676	UnaryOperator	&		48197	0					
ANR	48677	Identifier	strict_class		48197	1					
ANR	48678	Argument	error		48197	3					
ANR	48679	Identifier	error		48197	0					
ANR	48680	CompoundStatement		77:71:2164:2164	48197	1					
ANR	48681	ExpressionStatement	zend_string_release ( cname )	2981:3:87500:87526	48197	0	True				
ANR	48682	CallExpression	zend_string_release ( cname )		48197	0					
ANR	48683	Callee	zend_string_release		48197	0					
ANR	48684	Identifier	zend_string_release		48197	0					
ANR	48685	ArgumentList	cname		48197	1					
ANR	48686	Argument	cname		48197	0					
ANR	48687	Identifier	cname		48197	0					
ANR	48688	ExpressionStatement	EG ( scope ) = last_scope	2982:3:87531:87553	48197	1	True				
ANR	48689	AssignmentExpression	EG ( scope ) = last_scope		48197	0		=			
ANR	48690	CallExpression	EG ( scope )		48197	0					
ANR	48691	Callee	EG		48197	0					
ANR	48692	Identifier	EG		48197	0					
ANR	48693	ArgumentList	scope		48197	1					
ANR	48694	Argument	scope		48197	0					
ANR	48695	Identifier	scope		48197	0					
ANR	48696	Identifier	last_scope		48197	1					
ANR	48697	ReturnStatement	return 0 ;	2983:3:87558:87566	48197	2	True				
ANR	48698	PrimaryExpression	0		48197	0					
ANR	48699	ExpressionStatement	zend_string_release ( cname )	2985:2:87574:87600	48197	8	True				
ANR	48700	CallExpression	zend_string_release ( cname )		48197	0					
ANR	48701	Callee	zend_string_release		48197	0					
ANR	48702	Identifier	zend_string_release		48197	0					
ANR	48703	ArgumentList	cname		48197	1					
ANR	48704	Argument	cname		48197	0					
ANR	48705	Identifier	cname		48197	0					
ANR	48706	ExpressionStatement	EG ( scope ) = last_scope	2986:2:87604:87626	48197	9	True				
ANR	48707	AssignmentExpression	EG ( scope ) = last_scope		48197	0		=			
ANR	48708	CallExpression	EG ( scope )		48197	0					
ANR	48709	Callee	EG		48197	0					
ANR	48710	Identifier	EG		48197	0					
ANR	48711	ArgumentList	scope		48197	1					
ANR	48712	Argument	scope		48197	0					
ANR	48713	Identifier	scope		48197	0					
ANR	48714	Identifier	last_scope		48197	1					
ANR	48715	ExpressionStatement	ftable = & fcc -> calling_scope -> function_table	2988:2:87631:87675	48197	10	True				
ANR	48716	AssignmentExpression	ftable = & fcc -> calling_scope -> function_table		48197	0		=			
ANR	48717	Identifier	ftable		48197	0					
ANR	48718	UnaryOperationExpression	& fcc -> calling_scope -> function_table		48197	1					
ANR	48719	UnaryOperator	&		48197	0					
ANR	48720	PtrMemberAccess	fcc -> calling_scope -> function_table		48197	1					
ANR	48721	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	48722	Identifier	fcc		48197	0					
ANR	48723	Identifier	calling_scope		48197	1					
ANR	48724	Identifier	function_table		48197	1					
ANR	48725	IfStatement	"if ( ce_org && ! instanceof_function ( ce_org , fcc -> calling_scope ) )"		48197	11					
ANR	48726	Condition	"ce_org && ! instanceof_function ( ce_org , fcc -> calling_scope )"	2989:6:87683:87740	48197	0	True				
ANR	48727	AndExpression	"ce_org && ! instanceof_function ( ce_org , fcc -> calling_scope )"		48197	0		&&			
ANR	48728	Identifier	ce_org		48197	0					
ANR	48729	UnaryOperationExpression	"! instanceof_function ( ce_org , fcc -> calling_scope )"		48197	1					
ANR	48730	UnaryOperator	!		48197	0					
ANR	48731	CallExpression	"instanceof_function ( ce_org , fcc -> calling_scope )"		48197	1					
ANR	48732	Callee	instanceof_function		48197	0					
ANR	48733	Identifier	instanceof_function		48197	0					
ANR	48734	ArgumentList	ce_org		48197	1					
ANR	48735	Argument	ce_org		48197	0					
ANR	48736	Identifier	ce_org		48197	0					
ANR	48737	Argument	fcc -> calling_scope		48197	1					
ANR	48738	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	48739	Identifier	fcc		48197	0					
ANR	48740	Identifier	calling_scope		48197	1					
ANR	48741	CompoundStatement		86:66:2412:2412	48197	1					
ANR	48742	IfStatement	if ( error )		48197	0					
ANR	48743	Condition	error	2990:7:87752:87756	48197	0	True				
ANR	48744	Identifier	error		48197	0					
ANR	48745	ExpressionStatement	"zend_spprintf ( error , 0 , ""class '%s' is not a subclass of '%s'"" , ZSTR_VAL ( ce_org -> name ) , ZSTR_VAL ( fcc -> calling_scope -> name ) )"	2990:14:87759:87882	48197	1	True				
ANR	48746	CallExpression	"zend_spprintf ( error , 0 , ""class '%s' is not a subclass of '%s'"" , ZSTR_VAL ( ce_org -> name ) , ZSTR_VAL ( fcc -> calling_scope -> name ) )"		48197	0					
ANR	48747	Callee	zend_spprintf		48197	0					
ANR	48748	Identifier	zend_spprintf		48197	0					
ANR	48749	ArgumentList	error		48197	1					
ANR	48750	Argument	error		48197	0					
ANR	48751	Identifier	error		48197	0					
ANR	48752	Argument	0		48197	1					
ANR	48753	PrimaryExpression	0		48197	0					
ANR	48754	Argument	"""class '%s' is not a subclass of '%s'"""		48197	2					
ANR	48755	PrimaryExpression	"""class '%s' is not a subclass of '%s'"""		48197	0					
ANR	48756	Argument	ZSTR_VAL ( ce_org -> name )		48197	3					
ANR	48757	CallExpression	ZSTR_VAL ( ce_org -> name )		48197	0					
ANR	48758	Callee	ZSTR_VAL		48197	0					
ANR	48759	Identifier	ZSTR_VAL		48197	0					
ANR	48760	ArgumentList	ce_org -> name		48197	1					
ANR	48761	Argument	ce_org -> name		48197	0					
ANR	48762	PtrMemberAccess	ce_org -> name		48197	0					
ANR	48763	Identifier	ce_org		48197	0					
ANR	48764	Identifier	name		48197	1					
ANR	48765	Argument	ZSTR_VAL ( fcc -> calling_scope -> name )		48197	4					
ANR	48766	CallExpression	ZSTR_VAL ( fcc -> calling_scope -> name )		48197	0					
ANR	48767	Callee	ZSTR_VAL		48197	0					
ANR	48768	Identifier	ZSTR_VAL		48197	0					
ANR	48769	ArgumentList	fcc -> calling_scope -> name		48197	1					
ANR	48770	Argument	fcc -> calling_scope -> name		48197	0					
ANR	48771	PtrMemberAccess	fcc -> calling_scope -> name		48197	0					
ANR	48772	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	48773	Identifier	fcc		48197	0					
ANR	48774	Identifier	calling_scope		48197	1					
ANR	48775	Identifier	name		48197	1					
ANR	48776	ReturnStatement	return 0 ;	2991:3:87887:87895	48197	1	True				
ANR	48777	PrimaryExpression	0		48197	0					
ANR	48778	ExpressionStatement	"mname = zend_string_init ( Z_STRVAL_P ( callable ) + clen + 2 , mlen , 0 )"	2993:2:87903:87969	48197	12	True				
ANR	48779	AssignmentExpression	"mname = zend_string_init ( Z_STRVAL_P ( callable ) + clen + 2 , mlen , 0 )"		48197	0		=			
ANR	48780	Identifier	mname		48197	0					
ANR	48781	CallExpression	"zend_string_init ( Z_STRVAL_P ( callable ) + clen + 2 , mlen , 0 )"		48197	1					
ANR	48782	Callee	zend_string_init		48197	0					
ANR	48783	Identifier	zend_string_init		48197	0					
ANR	48784	ArgumentList	Z_STRVAL_P ( callable ) + clen + 2		48197	1					
ANR	48785	Argument	Z_STRVAL_P ( callable ) + clen + 2		48197	0					
ANR	48786	AdditiveExpression	Z_STRVAL_P ( callable ) + clen + 2		48197	0		+			
ANR	48787	CallExpression	Z_STRVAL_P ( callable )		48197	0					
ANR	48788	Callee	Z_STRVAL_P		48197	0					
ANR	48789	Identifier	Z_STRVAL_P		48197	0					
ANR	48790	ArgumentList	callable		48197	1					
ANR	48791	Argument	callable		48197	0					
ANR	48792	Identifier	callable		48197	0					
ANR	48793	AdditiveExpression	clen + 2		48197	1		+			
ANR	48794	Identifier	clen		48197	0					
ANR	48795	PrimaryExpression	2		48197	1					
ANR	48796	Argument	mlen		48197	1					
ANR	48797	Identifier	mlen		48197	0					
ANR	48798	Argument	0		48197	2					
ANR	48799	PrimaryExpression	0		48197	0					
ANR	48800	ElseStatement	else		48197	0					
ANR	48801	IfStatement	if ( ce_org )		48197	0					
ANR	48802	Condition	ce_org	2994:12:87983:87988	48197	0	True				
ANR	48803	Identifier	ce_org		48197	0					
ANR	48804	CompoundStatement		91:20:2660:2660	48197	1					
ANR	48805	ExpressionStatement	mlen = Z_STRLEN_P ( callable )	2996:2:88051:88078	48197	0	True				
ANR	48806	AssignmentExpression	mlen = Z_STRLEN_P ( callable )		48197	0		=			
ANR	48807	Identifier	mlen		48197	0					
ANR	48808	CallExpression	Z_STRLEN_P ( callable )		48197	1					
ANR	48809	Callee	Z_STRLEN_P		48197	0					
ANR	48810	Identifier	Z_STRLEN_P		48197	0					
ANR	48811	ArgumentList	callable		48197	1					
ANR	48812	Argument	callable		48197	0					
ANR	48813	Identifier	callable		48197	0					
ANR	48814	ExpressionStatement	mname = Z_STR_P ( callable )	2997:2:88082:88107	48197	1	True				
ANR	48815	AssignmentExpression	mname = Z_STR_P ( callable )		48197	0		=			
ANR	48816	Identifier	mname		48197	0					
ANR	48817	CallExpression	Z_STR_P ( callable )		48197	1					
ANR	48818	Callee	Z_STR_P		48197	0					
ANR	48819	Identifier	Z_STR_P		48197	0					
ANR	48820	ArgumentList	callable		48197	1					
ANR	48821	Argument	callable		48197	0					
ANR	48822	Identifier	callable		48197	0					
ANR	48823	ExpressionStatement	zend_string_addref ( mname )	2998:2:88111:88136	48197	2	True				
ANR	48824	CallExpression	zend_string_addref ( mname )		48197	0					
ANR	48825	Callee	zend_string_addref		48197	0					
ANR	48826	Identifier	zend_string_addref		48197	0					
ANR	48827	ArgumentList	mname		48197	1					
ANR	48828	Argument	mname		48197	0					
ANR	48829	Identifier	mname		48197	0					
ANR	48830	ExpressionStatement	ftable = & ce_org -> function_table	2999:2:88140:88172	48197	3	True				
ANR	48831	AssignmentExpression	ftable = & ce_org -> function_table		48197	0		=			
ANR	48832	Identifier	ftable		48197	0					
ANR	48833	UnaryOperationExpression	& ce_org -> function_table		48197	1					
ANR	48834	UnaryOperator	&		48197	0					
ANR	48835	PtrMemberAccess	ce_org -> function_table		48197	1					
ANR	48836	Identifier	ce_org		48197	0					
ANR	48837	Identifier	function_table		48197	1					
ANR	48838	ExpressionStatement	fcc -> calling_scope = ce_org	3000:2:88176:88203	48197	4	True				
ANR	48839	AssignmentExpression	fcc -> calling_scope = ce_org		48197	0		=			
ANR	48840	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	48841	Identifier	fcc		48197	0					
ANR	48842	Identifier	calling_scope		48197	1					
ANR	48843	Identifier	ce_org		48197	1					
ANR	48844	ElseStatement	else		48197	0					
ANR	48845	CompoundStatement		98:8:2882:2882	48197	0					
ANR	48846	IfStatement	if ( error && ! ( check_flags & IS_CALLABLE_CHECK_SILENT ) )		48197	0					
ANR	48847	Condition	error && ! ( check_flags & IS_CALLABLE_CHECK_SILENT )	3003:6:88275:88324	48197	0	True				
ANR	48848	AndExpression	error && ! ( check_flags & IS_CALLABLE_CHECK_SILENT )		48197	0		&&			
ANR	48849	Identifier	error		48197	0					
ANR	48850	UnaryOperationExpression	! ( check_flags & IS_CALLABLE_CHECK_SILENT )		48197	1					
ANR	48851	UnaryOperator	!		48197	0					
ANR	48852	BitAndExpression	check_flags & IS_CALLABLE_CHECK_SILENT		48197	1		&			
ANR	48853	Identifier	check_flags		48197	0					
ANR	48854	Identifier	IS_CALLABLE_CHECK_SILENT		48197	1					
ANR	48855	CompoundStatement		100:58:2996:2996	48197	1					
ANR	48856	ExpressionStatement	"zend_spprintf ( error , 0 , ""function '%s' not found or invalid function name"" , Z_STRVAL_P ( callable ) )"	3004:3:88332:88429	48197	0	True				
ANR	48857	CallExpression	"zend_spprintf ( error , 0 , ""function '%s' not found or invalid function name"" , Z_STRVAL_P ( callable ) )"		48197	0					
ANR	48858	Callee	zend_spprintf		48197	0					
ANR	48859	Identifier	zend_spprintf		48197	0					
ANR	48860	ArgumentList	error		48197	1					
ANR	48861	Argument	error		48197	0					
ANR	48862	Identifier	error		48197	0					
ANR	48863	Argument	0		48197	1					
ANR	48864	PrimaryExpression	0		48197	0					
ANR	48865	Argument	"""function '%s' not found or invalid function name"""		48197	2					
ANR	48866	PrimaryExpression	"""function '%s' not found or invalid function name"""		48197	0					
ANR	48867	Argument	Z_STRVAL_P ( callable )		48197	3					
ANR	48868	CallExpression	Z_STRVAL_P ( callable )		48197	0					
ANR	48869	Callee	Z_STRVAL_P		48197	0					
ANR	48870	Identifier	Z_STRVAL_P		48197	0					
ANR	48871	ArgumentList	callable		48197	1					
ANR	48872	Argument	callable		48197	0					
ANR	48873	Identifier	callable		48197	0					
ANR	48874	ReturnStatement	return 0 ;	3006:2:88437:88445	48197	1	True				
ANR	48875	PrimaryExpression	0		48197	0					
ANR	48876	ExpressionStatement	lmname = zend_string_tolower ( mname )	3009:1:88452:88487	48197	18	True				
ANR	48877	AssignmentExpression	lmname = zend_string_tolower ( mname )		48197	0		=			
ANR	48878	Identifier	lmname		48197	0					
ANR	48879	CallExpression	zend_string_tolower ( mname )		48197	1					
ANR	48880	Callee	zend_string_tolower		48197	0					
ANR	48881	Identifier	zend_string_tolower		48197	0					
ANR	48882	ArgumentList	mname		48197	1					
ANR	48883	Argument	mname		48197	0					
ANR	48884	Identifier	mname		48197	0					
ANR	48885	IfStatement	"if ( strict_class && fcc -> calling_scope && zend_string_equals_literal ( lmname , ZEND_CONSTRUCTOR_FUNC_NAME ) )"		48197	19					
ANR	48886	Condition	"strict_class && fcc -> calling_scope && zend_string_equals_literal ( lmname , ZEND_CONSTRUCTOR_FUNC_NAME )"	3010:5:88494:88600	48197	0	True				
ANR	48887	AndExpression	"strict_class && fcc -> calling_scope && zend_string_equals_literal ( lmname , ZEND_CONSTRUCTOR_FUNC_NAME )"		48197	0		&&			
ANR	48888	Identifier	strict_class		48197	0					
ANR	48889	AndExpression	"fcc -> calling_scope && zend_string_equals_literal ( lmname , ZEND_CONSTRUCTOR_FUNC_NAME )"		48197	1		&&			
ANR	48890	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	48891	Identifier	fcc		48197	0					
ANR	48892	Identifier	calling_scope		48197	1					
ANR	48893	CallExpression	"zend_string_equals_literal ( lmname , ZEND_CONSTRUCTOR_FUNC_NAME )"		48197	1					
ANR	48894	Callee	zend_string_equals_literal		48197	0					
ANR	48895	Identifier	zend_string_equals_literal		48197	0					
ANR	48896	ArgumentList	lmname		48197	1					
ANR	48897	Argument	lmname		48197	0					
ANR	48898	Identifier	lmname		48197	0					
ANR	48899	Argument	ZEND_CONSTRUCTOR_FUNC_NAME		48197	1					
ANR	48900	Identifier	ZEND_CONSTRUCTOR_FUNC_NAME		48197	0					
ANR	48901	CompoundStatement		109:66:3272:3272	48197	1					
ANR	48902	ExpressionStatement	fcc -> function_handler = fcc -> calling_scope -> constructor	3013:2:88607:88662	48197	0	True				
ANR	48903	AssignmentExpression	fcc -> function_handler = fcc -> calling_scope -> constructor		48197	0		=			
ANR	48904	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	48905	Identifier	fcc		48197	0					
ANR	48906	Identifier	function_handler		48197	1					
ANR	48907	PtrMemberAccess	fcc -> calling_scope -> constructor		48197	1					
ANR	48908	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	48909	Identifier	fcc		48197	0					
ANR	48910	Identifier	calling_scope		48197	1					
ANR	48911	Identifier	constructor		48197	1					
ANR	48912	IfStatement	if ( fcc -> function_handler )		48197	1					
ANR	48913	Condition	fcc -> function_handler	3014:6:88670:88690	48197	0	True				
ANR	48914	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	48915	Identifier	fcc		48197	0					
ANR	48916	Identifier	function_handler		48197	1					
ANR	48917	CompoundStatement		111:29:3362:3362	48197	1					
ANR	48918	ExpressionStatement	retval = 1	3015:3:88698:88708	48197	0	True				
ANR	48919	AssignmentExpression	retval = 1		48197	0		=			
ANR	48920	Identifier	retval		48197	0					
ANR	48921	PrimaryExpression	1		48197	1					
ANR	48922	ElseStatement	else		48197	0					
ANR	48923	IfStatement	"if ( ( fcc -> function_handler = zend_hash_find_ptr ( ftable , lmname ) ) != NULL )"		48197	0					
ANR	48924	Condition	"( fcc -> function_handler = zend_hash_find_ptr ( ftable , lmname ) ) != NULL"	3017:12:88726:88793	48197	0	True				
ANR	48925	EqualityExpression	"( fcc -> function_handler = zend_hash_find_ptr ( ftable , lmname ) ) != NULL"		48197	0		!=			
ANR	48926	AssignmentExpression	"fcc -> function_handler = zend_hash_find_ptr ( ftable , lmname )"		48197	0		=			
ANR	48927	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	48928	Identifier	fcc		48197	0					
ANR	48929	Identifier	function_handler		48197	1					
ANR	48930	CallExpression	"zend_hash_find_ptr ( ftable , lmname )"		48197	1					
ANR	48931	Callee	zend_hash_find_ptr		48197	0					
ANR	48932	Identifier	zend_hash_find_ptr		48197	0					
ANR	48933	ArgumentList	ftable		48197	1					
ANR	48934	Argument	ftable		48197	0					
ANR	48935	Identifier	ftable		48197	0					
ANR	48936	Argument	lmname		48197	1					
ANR	48937	Identifier	lmname		48197	0					
ANR	48938	Identifier	NULL		48197	1					
ANR	48939	CompoundStatement		114:82:3465:3465	48197	1					
ANR	48940	ExpressionStatement	retval = 1	3018:2:88800:88810	48197	0	True				
ANR	48941	AssignmentExpression	retval = 1		48197	0		=			
ANR	48942	Identifier	retval		48197	0					
ANR	48943	PrimaryExpression	1		48197	1					
ANR	48944	IfStatement	"if ( ( fcc -> function_handler -> op_array . fn_flags & ZEND_ACC_CHANGED ) && ! strict_class && EG ( scope ) && instanceof_function ( fcc -> function_handler -> common . scope , EG ( scope ) ) )"		48197	1					
ANR	48945	Condition	"( fcc -> function_handler -> op_array . fn_flags & ZEND_ACC_CHANGED ) && ! strict_class && EG ( scope ) && instanceof_function ( fcc -> function_handler -> common . scope , EG ( scope ) )"	3019:6:88818:88991	48197	0	True				
ANR	48946	AndExpression	"( fcc -> function_handler -> op_array . fn_flags & ZEND_ACC_CHANGED ) && ! strict_class && EG ( scope ) && instanceof_function ( fcc -> function_handler -> common . scope , EG ( scope ) )"		48197	0		&&			
ANR	48947	BitAndExpression	fcc -> function_handler -> op_array . fn_flags & ZEND_ACC_CHANGED		48197	0		&			
ANR	48948	MemberAccess	fcc -> function_handler -> op_array . fn_flags		48197	0					
ANR	48949	PtrMemberAccess	fcc -> function_handler -> op_array		48197	0					
ANR	48950	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	48951	Identifier	fcc		48197	0					
ANR	48952	Identifier	function_handler		48197	1					
ANR	48953	Identifier	op_array		48197	1					
ANR	48954	Identifier	fn_flags		48197	1					
ANR	48955	Identifier	ZEND_ACC_CHANGED		48197	1					
ANR	48956	AndExpression	"! strict_class && EG ( scope ) && instanceof_function ( fcc -> function_handler -> common . scope , EG ( scope ) )"		48197	1		&&			
ANR	48957	UnaryOperationExpression	! strict_class		48197	0					
ANR	48958	UnaryOperator	!		48197	0					
ANR	48959	Identifier	strict_class		48197	1					
ANR	48960	AndExpression	"EG ( scope ) && instanceof_function ( fcc -> function_handler -> common . scope , EG ( scope ) )"		48197	1		&&			
ANR	48961	CallExpression	EG ( scope )		48197	0					
ANR	48962	Callee	EG		48197	0					
ANR	48963	Identifier	EG		48197	0					
ANR	48964	ArgumentList	scope		48197	1					
ANR	48965	Argument	scope		48197	0					
ANR	48966	Identifier	scope		48197	0					
ANR	48967	CallExpression	"instanceof_function ( fcc -> function_handler -> common . scope , EG ( scope ) )"		48197	1					
ANR	48968	Callee	instanceof_function		48197	0					
ANR	48969	Identifier	instanceof_function		48197	0					
ANR	48970	ArgumentList	fcc -> function_handler -> common . scope		48197	1					
ANR	48971	Argument	fcc -> function_handler -> common . scope		48197	0					
ANR	48972	MemberAccess	fcc -> function_handler -> common . scope		48197	0					
ANR	48973	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	48974	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	48975	Identifier	fcc		48197	0					
ANR	48976	Identifier	function_handler		48197	1					
ANR	48977	Identifier	common		48197	1					
ANR	48978	Identifier	scope		48197	1					
ANR	48979	Argument	EG ( scope )		48197	1					
ANR	48980	CallExpression	EG ( scope )		48197	0					
ANR	48981	Callee	EG		48197	0					
ANR	48982	Identifier	EG		48197	0					
ANR	48983	ArgumentList	scope		48197	1					
ANR	48984	Argument	scope		48197	0					
ANR	48985	Identifier	scope		48197	0					
ANR	48986	CompoundStatement		119:3:3668:3691	48197	1					
ANR	48987	IdentifierDeclStatement	zend_function * priv_fbc ;	3022:3:88999:89022	48197	0	True				
ANR	48988	IdentifierDecl	* priv_fbc		48197	0					
ANR	48989	IdentifierDeclType	zend_function *		48197	0					
ANR	48990	Identifier	priv_fbc		48197	1					
ANR	48991	IfStatement	"if ( ( priv_fbc = zend_hash_find_ptr ( & EG ( scope ) -> function_table , lmname ) ) != NULL && priv_fbc -> common . fn_flags & ZEND_ACC_PRIVATE && priv_fbc -> common . scope == EG ( scope ) )"		48197	1					
ANR	48992	Condition	"( priv_fbc = zend_hash_find_ptr ( & EG ( scope ) -> function_table , lmname ) ) != NULL && priv_fbc -> common . fn_flags & ZEND_ACC_PRIVATE && priv_fbc -> common . scope == EG ( scope )"	3024:7:89032:89201	48197	0	True				
ANR	48993	AndExpression	"( priv_fbc = zend_hash_find_ptr ( & EG ( scope ) -> function_table , lmname ) ) != NULL && priv_fbc -> common . fn_flags & ZEND_ACC_PRIVATE && priv_fbc -> common . scope == EG ( scope )"		48197	0		&&			
ANR	48994	EqualityExpression	"( priv_fbc = zend_hash_find_ptr ( & EG ( scope ) -> function_table , lmname ) ) != NULL"		48197	0		!=			
ANR	48995	AssignmentExpression	"priv_fbc = zend_hash_find_ptr ( & EG ( scope ) -> function_table , lmname )"		48197	0		=			
ANR	48996	Identifier	priv_fbc		48197	0					
ANR	48997	CallExpression	"zend_hash_find_ptr ( & EG ( scope ) -> function_table , lmname )"		48197	1					
ANR	48998	Callee	zend_hash_find_ptr		48197	0					
ANR	48999	Identifier	zend_hash_find_ptr		48197	0					
ANR	49000	ArgumentList	& EG ( scope ) -> function_table		48197	1					
ANR	49001	Argument	& EG ( scope ) -> function_table		48197	0					
ANR	49002	UnaryOperationExpression	& EG ( scope ) -> function_table		48197	0					
ANR	49003	UnaryOperator	&		48197	0					
ANR	49004	PtrMemberAccess	EG ( scope ) -> function_table		48197	1					
ANR	49005	CallExpression	EG ( scope )		48197	0					
ANR	49006	Callee	EG		48197	0					
ANR	49007	Identifier	EG		48197	0					
ANR	49008	ArgumentList	scope		48197	1					
ANR	49009	Argument	scope		48197	0					
ANR	49010	Identifier	scope		48197	0					
ANR	49011	Identifier	function_table		48197	1					
ANR	49012	Argument	lmname		48197	1					
ANR	49013	Identifier	lmname		48197	0					
ANR	49014	Identifier	NULL		48197	1					
ANR	49015	AndExpression	priv_fbc -> common . fn_flags & ZEND_ACC_PRIVATE && priv_fbc -> common . scope == EG ( scope )		48197	1		&&			
ANR	49016	BitAndExpression	priv_fbc -> common . fn_flags & ZEND_ACC_PRIVATE		48197	0		&			
ANR	49017	MemberAccess	priv_fbc -> common . fn_flags		48197	0					
ANR	49018	PtrMemberAccess	priv_fbc -> common		48197	0					
ANR	49019	Identifier	priv_fbc		48197	0					
ANR	49020	Identifier	common		48197	1					
ANR	49021	Identifier	fn_flags		48197	1					
ANR	49022	Identifier	ZEND_ACC_PRIVATE		48197	1					
ANR	49023	EqualityExpression	priv_fbc -> common . scope == EG ( scope )		48197	1		==			
ANR	49024	MemberAccess	priv_fbc -> common . scope		48197	0					
ANR	49025	PtrMemberAccess	priv_fbc -> common		48197	0					
ANR	49026	Identifier	priv_fbc		48197	0					
ANR	49027	Identifier	common		48197	1					
ANR	49028	Identifier	scope		48197	1					
ANR	49029	CallExpression	EG ( scope )		48197	1					
ANR	49030	Callee	EG		48197	0					
ANR	49031	Identifier	EG		48197	0					
ANR	49032	ArgumentList	scope		48197	1					
ANR	49033	Argument	scope		48197	0					
ANR	49034	Identifier	scope		48197	0					
ANR	49035	CompoundStatement		123:44:3873:3873	48197	1					
ANR	49036	ExpressionStatement	fcc -> function_handler = priv_fbc	3027:4:89210:89242	48197	0	True				
ANR	49037	AssignmentExpression	fcc -> function_handler = priv_fbc		48197	0		=			
ANR	49038	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49039	Identifier	fcc		48197	0					
ANR	49040	Identifier	function_handler		48197	1					
ANR	49041	Identifier	priv_fbc		48197	1					
ANR	49042	IfStatement	if ( ( check_flags & IS_CALLABLE_CHECK_NO_ACCESS ) == 0 && ( fcc -> calling_scope && ( ( fcc -> object && fcc -> calling_scope -> __call ) || ( ! fcc -> object && fcc -> calling_scope -> __callstatic ) ) ) )		48197	2					
ANR	49043	Condition	( check_flags & IS_CALLABLE_CHECK_NO_ACCESS ) == 0 && ( fcc -> calling_scope && ( ( fcc -> object && fcc -> calling_scope -> __call ) || ( ! fcc -> object && fcc -> calling_scope -> __callstatic ) ) )	3030:6:89259:89454	48197	0	True				
ANR	49044	AndExpression	( check_flags & IS_CALLABLE_CHECK_NO_ACCESS ) == 0 && ( fcc -> calling_scope && ( ( fcc -> object && fcc -> calling_scope -> __call ) || ( ! fcc -> object && fcc -> calling_scope -> __callstatic ) ) )		48197	0		&&			
ANR	49045	EqualityExpression	( check_flags & IS_CALLABLE_CHECK_NO_ACCESS ) == 0		48197	0		==			
ANR	49046	BitAndExpression	check_flags & IS_CALLABLE_CHECK_NO_ACCESS		48197	0		&			
ANR	49047	Identifier	check_flags		48197	0					
ANR	49048	Identifier	IS_CALLABLE_CHECK_NO_ACCESS		48197	1					
ANR	49049	PrimaryExpression	0		48197	1					
ANR	49050	AndExpression	fcc -> calling_scope && ( ( fcc -> object && fcc -> calling_scope -> __call ) || ( ! fcc -> object && fcc -> calling_scope -> __callstatic ) )		48197	1		&&			
ANR	49051	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	49052	Identifier	fcc		48197	0					
ANR	49053	Identifier	calling_scope		48197	1					
ANR	49054	OrExpression	( fcc -> object && fcc -> calling_scope -> __call ) || ( ! fcc -> object && fcc -> calling_scope -> __callstatic )		48197	1		||			
ANR	49055	AndExpression	fcc -> object && fcc -> calling_scope -> __call		48197	0		&&			
ANR	49056	PtrMemberAccess	fcc -> object		48197	0					
ANR	49057	Identifier	fcc		48197	0					
ANR	49058	Identifier	object		48197	1					
ANR	49059	PtrMemberAccess	fcc -> calling_scope -> __call		48197	1					
ANR	49060	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	49061	Identifier	fcc		48197	0					
ANR	49062	Identifier	calling_scope		48197	1					
ANR	49063	Identifier	__call		48197	1					
ANR	49064	AndExpression	! fcc -> object && fcc -> calling_scope -> __callstatic		48197	1		&&			
ANR	49065	UnaryOperationExpression	! fcc -> object		48197	0					
ANR	49066	UnaryOperator	!		48197	0					
ANR	49067	PtrMemberAccess	fcc -> object		48197	1					
ANR	49068	Identifier	fcc		48197	0					
ANR	49069	Identifier	object		48197	1					
ANR	49070	PtrMemberAccess	fcc -> calling_scope -> __callstatic		48197	1					
ANR	49071	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	49072	Identifier	fcc		48197	0					
ANR	49073	Identifier	calling_scope		48197	1					
ANR	49074	Identifier	__callstatic		48197	1					
ANR	49075	CompoundStatement		130:62:4126:4126	48197	1					
ANR	49076	IfStatement	if ( fcc -> function_handler -> op_array . fn_flags & ZEND_ACC_PRIVATE )		48197	0					
ANR	49077	Condition	fcc -> function_handler -> op_array . fn_flags & ZEND_ACC_PRIVATE	3034:7:89466:89524	48197	0	True				
ANR	49078	BitAndExpression	fcc -> function_handler -> op_array . fn_flags & ZEND_ACC_PRIVATE		48197	0		&			
ANR	49079	MemberAccess	fcc -> function_handler -> op_array . fn_flags		48197	0					
ANR	49080	PtrMemberAccess	fcc -> function_handler -> op_array		48197	0					
ANR	49081	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49082	Identifier	fcc		48197	0					
ANR	49083	Identifier	function_handler		48197	1					
ANR	49084	Identifier	op_array		48197	1					
ANR	49085	Identifier	fn_flags		48197	1					
ANR	49086	Identifier	ZEND_ACC_PRIVATE		48197	1					
ANR	49087	CompoundStatement		131:68:4196:4196	48197	1					
ANR	49088	IfStatement	"if ( ! zend_check_private ( fcc -> function_handler , fcc -> object ? fcc -> object -> ce : EG ( scope ) , lmname ) )"		48197	0					
ANR	49089	Condition	"! zend_check_private ( fcc -> function_handler , fcc -> object ? fcc -> object -> ce : EG ( scope ) , lmname )"	3035:8:89537:89629	48197	0	True				
ANR	49090	UnaryOperationExpression	"! zend_check_private ( fcc -> function_handler , fcc -> object ? fcc -> object -> ce : EG ( scope ) , lmname )"		48197	0					
ANR	49091	UnaryOperator	!		48197	0					
ANR	49092	CallExpression	"zend_check_private ( fcc -> function_handler , fcc -> object ? fcc -> object -> ce : EG ( scope ) , lmname )"		48197	1					
ANR	49093	Callee	zend_check_private		48197	0					
ANR	49094	Identifier	zend_check_private		48197	0					
ANR	49095	ArgumentList	fcc -> function_handler		48197	1					
ANR	49096	Argument	fcc -> function_handler		48197	0					
ANR	49097	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49098	Identifier	fcc		48197	0					
ANR	49099	Identifier	function_handler		48197	1					
ANR	49100	Argument	fcc -> object ? fcc -> object -> ce : EG ( scope )		48197	1					
ANR	49101	ConditionalExpression	fcc -> object ? fcc -> object -> ce : EG ( scope )		48197	0					
ANR	49102	Condition	fcc -> object		48197	0					
ANR	49103	PtrMemberAccess	fcc -> object		48197	0					
ANR	49104	Identifier	fcc		48197	0					
ANR	49105	Identifier	object		48197	1					
ANR	49106	PtrMemberAccess	fcc -> object -> ce		48197	1					
ANR	49107	PtrMemberAccess	fcc -> object		48197	0					
ANR	49108	Identifier	fcc		48197	0					
ANR	49109	Identifier	object		48197	1					
ANR	49110	Identifier	ce		48197	1					
ANR	49111	CallExpression	EG ( scope )		48197	2					
ANR	49112	Callee	EG		48197	0					
ANR	49113	Identifier	EG		48197	0					
ANR	49114	ArgumentList	scope		48197	1					
ANR	49115	Argument	scope		48197	0					
ANR	49116	Identifier	scope		48197	0					
ANR	49117	Argument	lmname		48197	2					
ANR	49118	Identifier	lmname		48197	0					
ANR	49119	CompoundStatement		132:103:4301:4301	48197	1					
ANR	49120	ExpressionStatement	retval = 0	3036:5:89639:89649	48197	0	True				
ANR	49121	AssignmentExpression	retval = 0		48197	0		=			
ANR	49122	Identifier	retval		48197	0					
ANR	49123	PrimaryExpression	0		48197	1					
ANR	49124	ExpressionStatement	fcc -> function_handler = NULL	3037:5:89656:89684	48197	1	True				
ANR	49125	AssignmentExpression	fcc -> function_handler = NULL		48197	0		=			
ANR	49126	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49127	Identifier	fcc		48197	0					
ANR	49128	Identifier	function_handler		48197	1					
ANR	49129	Identifier	NULL		48197	1					
ANR	49130	GotoStatement	goto get_function_via_handler ;	3038:5:89691:89720	48197	2	True				
ANR	49131	Identifier	get_function_via_handler		48197	0					
ANR	49132	ElseStatement	else		48197	0					
ANR	49133	IfStatement	if ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_PROTECTED )		48197	0					
ANR	49134	Condition	fcc -> function_handler -> common . fn_flags & ZEND_ACC_PROTECTED	3040:14:89742:89800	48197	0	True				
ANR	49135	BitAndExpression	fcc -> function_handler -> common . fn_flags & ZEND_ACC_PROTECTED		48197	0		&			
ANR	49136	MemberAccess	fcc -> function_handler -> common . fn_flags		48197	0					
ANR	49137	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	49138	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49139	Identifier	fcc		48197	0					
ANR	49140	Identifier	function_handler		48197	1					
ANR	49141	Identifier	common		48197	1					
ANR	49142	Identifier	fn_flags		48197	1					
ANR	49143	Identifier	ZEND_ACC_PROTECTED		48197	1					
ANR	49144	CompoundStatement		137:75:4472:4472	48197	1					
ANR	49145	IfStatement	"if ( ! zend_check_protected ( fcc -> function_handler -> common . scope , EG ( scope ) ) )"		48197	0					
ANR	49146	Condition	"! zend_check_protected ( fcc -> function_handler -> common . scope , EG ( scope ) )"	3041:8:89813:89881	48197	0	True				
ANR	49147	UnaryOperationExpression	"! zend_check_protected ( fcc -> function_handler -> common . scope , EG ( scope ) )"		48197	0					
ANR	49148	UnaryOperator	!		48197	0					
ANR	49149	CallExpression	"zend_check_protected ( fcc -> function_handler -> common . scope , EG ( scope ) )"		48197	1					
ANR	49150	Callee	zend_check_protected		48197	0					
ANR	49151	Identifier	zend_check_protected		48197	0					
ANR	49152	ArgumentList	fcc -> function_handler -> common . scope		48197	1					
ANR	49153	Argument	fcc -> function_handler -> common . scope		48197	0					
ANR	49154	MemberAccess	fcc -> function_handler -> common . scope		48197	0					
ANR	49155	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	49156	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49157	Identifier	fcc		48197	0					
ANR	49158	Identifier	function_handler		48197	1					
ANR	49159	Identifier	common		48197	1					
ANR	49160	Identifier	scope		48197	1					
ANR	49161	Argument	EG ( scope )		48197	1					
ANR	49162	CallExpression	EG ( scope )		48197	0					
ANR	49163	Callee	EG		48197	0					
ANR	49164	Identifier	EG		48197	0					
ANR	49165	ArgumentList	scope		48197	1					
ANR	49166	Argument	scope		48197	0					
ANR	49167	Identifier	scope		48197	0					
ANR	49168	CompoundStatement		138:79:4553:4553	48197	1					
ANR	49169	ExpressionStatement	retval = 0	3042:5:89891:89901	48197	0	True				
ANR	49170	AssignmentExpression	retval = 0		48197	0		=			
ANR	49171	Identifier	retval		48197	0					
ANR	49172	PrimaryExpression	0		48197	1					
ANR	49173	ExpressionStatement	fcc -> function_handler = NULL	3043:5:89908:89936	48197	1	True				
ANR	49174	AssignmentExpression	fcc -> function_handler = NULL		48197	0		=			
ANR	49175	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49176	Identifier	fcc		48197	0					
ANR	49177	Identifier	function_handler		48197	1					
ANR	49178	Identifier	NULL		48197	1					
ANR	49179	GotoStatement	goto get_function_via_handler ;	3044:5:89943:89972	48197	2	True				
ANR	49180	Identifier	get_function_via_handler		48197	0					
ANR	49181	ElseStatement	else		48197	0					
ANR	49182	CompoundStatement		145:8:4666:4666	48197	0					
ANR	49183	Label	get_function_via_handler :	3049:0:89999:90023	48197	0	True				
ANR	49184	Identifier	get_function_via_handler		48197	0					
ANR	49185	IfStatement	if ( fcc -> object && fcc -> calling_scope == ce_org )		48197	1					
ANR	49186	Condition	fcc -> object && fcc -> calling_scope == ce_org	3050:6:90031:90073	48197	0	True				
ANR	49187	AndExpression	fcc -> object && fcc -> calling_scope == ce_org		48197	0		&&			
ANR	49188	PtrMemberAccess	fcc -> object		48197	0					
ANR	49189	Identifier	fcc		48197	0					
ANR	49190	Identifier	object		48197	1					
ANR	49191	EqualityExpression	fcc -> calling_scope == ce_org		48197	1		==			
ANR	49192	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	49193	Identifier	fcc		48197	0					
ANR	49194	Identifier	calling_scope		48197	1					
ANR	49195	Identifier	ce_org		48197	1					
ANR	49196	CompoundStatement		147:51:4745:4745	48197	1					
ANR	49197	IfStatement	if ( strict_class && ce_org -> __call )		48197	0					
ANR	49198	Condition	strict_class && ce_org -> __call	3051:7:90085:90114	48197	0	True				
ANR	49199	AndExpression	strict_class && ce_org -> __call		48197	0		&&			
ANR	49200	Identifier	strict_class		48197	0					
ANR	49201	PtrMemberAccess	ce_org -> __call		48197	1					
ANR	49202	Identifier	ce_org		48197	0					
ANR	49203	Identifier	__call		48197	1					
ANR	49204	CompoundStatement		148:39:4786:4786	48197	1					
ANR	49205	ExpressionStatement	"fcc -> function_handler = zend_get_call_trampoline_func ( ce_org , mname , 0 )"	3052:4:90123:90194	48197	0	True				
ANR	49206	AssignmentExpression	"fcc -> function_handler = zend_get_call_trampoline_func ( ce_org , mname , 0 )"		48197	0		=			
ANR	49207	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49208	Identifier	fcc		48197	0					
ANR	49209	Identifier	function_handler		48197	1					
ANR	49210	CallExpression	"zend_get_call_trampoline_func ( ce_org , mname , 0 )"		48197	1					
ANR	49211	Callee	zend_get_call_trampoline_func		48197	0					
ANR	49212	Identifier	zend_get_call_trampoline_func		48197	0					
ANR	49213	ArgumentList	ce_org		48197	1					
ANR	49214	Argument	ce_org		48197	0					
ANR	49215	Identifier	ce_org		48197	0					
ANR	49216	Argument	mname		48197	1					
ANR	49217	Identifier	mname		48197	0					
ANR	49218	Argument	0		48197	2					
ANR	49219	PrimaryExpression	0		48197	0					
ANR	49220	ExpressionStatement	call_via_handler = 1	3053:4:90200:90220	48197	1	True				
ANR	49221	AssignmentExpression	call_via_handler = 1		48197	0		=			
ANR	49222	Identifier	call_via_handler		48197	0					
ANR	49223	PrimaryExpression	1		48197	1					
ANR	49224	ExpressionStatement	retval = 1	3054:4:90226:90236	48197	2	True				
ANR	49225	AssignmentExpression	retval = 1		48197	0		=			
ANR	49226	Identifier	retval		48197	0					
ANR	49227	PrimaryExpression	1		48197	1					
ANR	49228	ElseStatement	else		48197	0					
ANR	49229	IfStatement	if ( fcc -> object -> handlers -> get_method )		48197	0					
ANR	49230	Condition	fcc -> object -> handlers -> get_method	3055:14:90252:90284	48197	0	True				
ANR	49231	PtrMemberAccess	fcc -> object -> handlers -> get_method		48197	0					
ANR	49232	PtrMemberAccess	fcc -> object -> handlers		48197	0					
ANR	49233	PtrMemberAccess	fcc -> object		48197	0					
ANR	49234	Identifier	fcc		48197	0					
ANR	49235	Identifier	object		48197	1					
ANR	49236	Identifier	handlers		48197	1					
ANR	49237	Identifier	get_method		48197	1					
ANR	49238	CompoundStatement		152:49:4956:4956	48197	1					
ANR	49239	ExpressionStatement	"fcc -> function_handler = fcc -> object -> handlers -> get_method ( & fcc -> object , mname , NULL )"	3056:4:90293:90377	48197	0	True				
ANR	49240	AssignmentExpression	"fcc -> function_handler = fcc -> object -> handlers -> get_method ( & fcc -> object , mname , NULL )"		48197	0		=			
ANR	49241	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49242	Identifier	fcc		48197	0					
ANR	49243	Identifier	function_handler		48197	1					
ANR	49244	CallExpression	"fcc -> object -> handlers -> get_method ( & fcc -> object , mname , NULL )"		48197	1					
ANR	49245	Callee	fcc -> object -> handlers -> get_method		48197	0					
ANR	49246	PtrMemberAccess	fcc -> object -> handlers -> get_method		48197	0					
ANR	49247	PtrMemberAccess	fcc -> object -> handlers		48197	0					
ANR	49248	PtrMemberAccess	fcc -> object		48197	0					
ANR	49249	Identifier	fcc		48197	0					
ANR	49250	Identifier	object		48197	1					
ANR	49251	Identifier	handlers		48197	1					
ANR	49252	Identifier	get_method		48197	1					
ANR	49253	ArgumentList	& fcc -> object		48197	1					
ANR	49254	Argument	& fcc -> object		48197	0					
ANR	49255	UnaryOperationExpression	& fcc -> object		48197	0					
ANR	49256	UnaryOperator	&		48197	0					
ANR	49257	PtrMemberAccess	fcc -> object		48197	1					
ANR	49258	Identifier	fcc		48197	0					
ANR	49259	Identifier	object		48197	1					
ANR	49260	Argument	mname		48197	1					
ANR	49261	Identifier	mname		48197	0					
ANR	49262	Argument	NULL		48197	2					
ANR	49263	Identifier	NULL		48197	0					
ANR	49264	IfStatement	if ( fcc -> function_handler )		48197	1					
ANR	49265	Condition	fcc -> function_handler	3057:8:90387:90407	48197	0	True				
ANR	49266	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49267	Identifier	fcc		48197	0					
ANR	49268	Identifier	function_handler		48197	1					
ANR	49269	CompoundStatement		154:31:5079:5079	48197	1					
ANR	49270	IfStatement	"if ( strict_class && ( ! fcc -> function_handler -> common . scope || ! instanceof_function ( ce_org , fcc -> function_handler -> common . scope ) ) )"		48197	0					
ANR	49271	Condition	"strict_class && ( ! fcc -> function_handler -> common . scope || ! instanceof_function ( ce_org , fcc -> function_handler -> common . scope ) )"	3058:9:90421:90562	48197	0	True				
ANR	49272	AndExpression	"strict_class && ( ! fcc -> function_handler -> common . scope || ! instanceof_function ( ce_org , fcc -> function_handler -> common . scope ) )"		48197	0		&&			
ANR	49273	Identifier	strict_class		48197	0					
ANR	49274	OrExpression	"! fcc -> function_handler -> common . scope || ! instanceof_function ( ce_org , fcc -> function_handler -> common . scope )"		48197	1		||			
ANR	49275	UnaryOperationExpression	! fcc -> function_handler -> common . scope		48197	0					
ANR	49276	UnaryOperator	!		48197	0					
ANR	49277	MemberAccess	fcc -> function_handler -> common . scope		48197	1					
ANR	49278	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	49279	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49280	Identifier	fcc		48197	0					
ANR	49281	Identifier	function_handler		48197	1					
ANR	49282	Identifier	common		48197	1					
ANR	49283	Identifier	scope		48197	1					
ANR	49284	UnaryOperationExpression	"! instanceof_function ( ce_org , fcc -> function_handler -> common . scope )"		48197	1					
ANR	49285	UnaryOperator	!		48197	0					
ANR	49286	CallExpression	"instanceof_function ( ce_org , fcc -> function_handler -> common . scope )"		48197	1					
ANR	49287	Callee	instanceof_function		48197	0					
ANR	49288	Identifier	instanceof_function		48197	0					
ANR	49289	ArgumentList	ce_org		48197	1					
ANR	49290	Argument	ce_org		48197	0					
ANR	49291	Identifier	ce_org		48197	0					
ANR	49292	Argument	fcc -> function_handler -> common . scope		48197	1					
ANR	49293	MemberAccess	fcc -> function_handler -> common . scope		48197	0					
ANR	49294	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	49295	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49296	Identifier	fcc		48197	0					
ANR	49297	Identifier	function_handler		48197	1					
ANR	49298	Identifier	common		48197	1					
ANR	49299	Identifier	scope		48197	1					
ANR	49300	CompoundStatement		157:78:5234:5234	48197	1					
ANR	49301	IfStatement	if ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE )		48197	0					
ANR	49302	Condition	fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE	3061:10:90577:90645	48197	0	True				
ANR	49303	BitAndExpression	fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE		48197	0		&			
ANR	49304	MemberAccess	fcc -> function_handler -> common . fn_flags		48197	0					
ANR	49305	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	49306	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49307	Identifier	fcc		48197	0					
ANR	49308	Identifier	function_handler		48197	1					
ANR	49309	Identifier	common		48197	1					
ANR	49310	Identifier	fn_flags		48197	1					
ANR	49311	Identifier	ZEND_ACC_CALL_VIA_TRAMPOLINE		48197	1					
ANR	49312	CompoundStatement		158:81:5317:5317	48197	1					
ANR	49313	IfStatement	if ( fcc -> function_handler -> type != ZEND_OVERLOADED_FUNCTION )		48197	0					
ANR	49314	Condition	fcc -> function_handler -> type != ZEND_OVERLOADED_FUNCTION	3062:11:90661:90715	48197	0	True				
ANR	49315	EqualityExpression	fcc -> function_handler -> type != ZEND_OVERLOADED_FUNCTION		48197	0		!=			
ANR	49316	PtrMemberAccess	fcc -> function_handler -> type		48197	0					
ANR	49317	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49318	Identifier	fcc		48197	0					
ANR	49319	Identifier	function_handler		48197	1					
ANR	49320	Identifier	type		48197	1					
ANR	49321	Identifier	ZEND_OVERLOADED_FUNCTION		48197	1					
ANR	49322	CompoundStatement		159:68:5387:5387	48197	1					
ANR	49323	ExpressionStatement	zend_string_release ( fcc -> function_handler -> common . function_name )	3063:8:90728:90792	48197	0	True				
ANR	49324	CallExpression	zend_string_release ( fcc -> function_handler -> common . function_name )		48197	0					
ANR	49325	Callee	zend_string_release		48197	0					
ANR	49326	Identifier	zend_string_release		48197	0					
ANR	49327	ArgumentList	fcc -> function_handler -> common . function_name		48197	1					
ANR	49328	Argument	fcc -> function_handler -> common . function_name		48197	0					
ANR	49329	MemberAccess	fcc -> function_handler -> common . function_name		48197	0					
ANR	49330	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	49331	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49332	Identifier	fcc		48197	0					
ANR	49333	Identifier	function_handler		48197	1					
ANR	49334	Identifier	common		48197	1					
ANR	49335	Identifier	function_name		48197	1					
ANR	49336	ExpressionStatement	zend_free_trampoline ( fcc -> function_handler )	3065:7:90810:90853	48197	1	True				
ANR	49337	CallExpression	zend_free_trampoline ( fcc -> function_handler )		48197	0					
ANR	49338	Callee	zend_free_trampoline		48197	0					
ANR	49339	Identifier	zend_free_trampoline		48197	0					
ANR	49340	ArgumentList	fcc -> function_handler		48197	1					
ANR	49341	Argument	fcc -> function_handler		48197	0					
ANR	49342	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49343	Identifier	fcc		48197	0					
ANR	49344	Identifier	function_handler		48197	1					
ANR	49345	ElseStatement	else		48197	0					
ANR	49346	CompoundStatement		164:12:5544:5544	48197	0					
ANR	49347	ExpressionStatement	retval = 1	3068:6:90883:90893	48197	0	True				
ANR	49348	AssignmentExpression	retval = 1		48197	0		=			
ANR	49349	Identifier	retval		48197	0					
ANR	49350	PrimaryExpression	1		48197	1					
ANR	49351	ExpressionStatement	call_via_handler = ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) != 0	3069:6:90901:90996	48197	1	True				
ANR	49352	AssignmentExpression	call_via_handler = ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) != 0		48197	0		=			
ANR	49353	Identifier	call_via_handler		48197	0					
ANR	49354	EqualityExpression	( fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) != 0		48197	1		!=			
ANR	49355	BitAndExpression	fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE		48197	0		&			
ANR	49356	MemberAccess	fcc -> function_handler -> common . fn_flags		48197	0					
ANR	49357	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	49358	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49359	Identifier	fcc		48197	0					
ANR	49360	Identifier	function_handler		48197	1					
ANR	49361	Identifier	common		48197	1					
ANR	49362	Identifier	fn_flags		48197	1					
ANR	49363	Identifier	ZEND_ACC_CALL_VIA_TRAMPOLINE		48197	1					
ANR	49364	PrimaryExpression	0		48197	1					
ANR	49365	ElseStatement	else		48197	0					
ANR	49366	IfStatement	if ( fcc -> calling_scope )		48197	0					
ANR	49367	Condition	fcc -> calling_scope	3073:13:91029:91046	48197	0	True				
ANR	49368	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	49369	Identifier	fcc		48197	0					
ANR	49370	Identifier	calling_scope		48197	1					
ANR	49371	CompoundStatement		170:33:5718:5718	48197	1					
ANR	49372	IfStatement	if ( fcc -> calling_scope -> get_static_method )		48197	0					
ANR	49373	Condition	fcc -> calling_scope -> get_static_method	3074:7:91058:91094	48197	0	True				
ANR	49374	PtrMemberAccess	fcc -> calling_scope -> get_static_method		48197	0					
ANR	49375	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	49376	Identifier	fcc		48197	0					
ANR	49377	Identifier	calling_scope		48197	1					
ANR	49378	Identifier	get_static_method		48197	1					
ANR	49379	CompoundStatement		171:46:5766:5766	48197	1					
ANR	49380	ExpressionStatement	"fcc -> function_handler = fcc -> calling_scope -> get_static_method ( fcc -> calling_scope , mname )"	3075:4:91103:91191	48197	0	True				
ANR	49381	AssignmentExpression	"fcc -> function_handler = fcc -> calling_scope -> get_static_method ( fcc -> calling_scope , mname )"		48197	0		=			
ANR	49382	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49383	Identifier	fcc		48197	0					
ANR	49384	Identifier	function_handler		48197	1					
ANR	49385	CallExpression	"fcc -> calling_scope -> get_static_method ( fcc -> calling_scope , mname )"		48197	1					
ANR	49386	Callee	fcc -> calling_scope -> get_static_method		48197	0					
ANR	49387	PtrMemberAccess	fcc -> calling_scope -> get_static_method		48197	0					
ANR	49388	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	49389	Identifier	fcc		48197	0					
ANR	49390	Identifier	calling_scope		48197	1					
ANR	49391	Identifier	get_static_method		48197	1					
ANR	49392	ArgumentList	fcc -> calling_scope		48197	1					
ANR	49393	Argument	fcc -> calling_scope		48197	0					
ANR	49394	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	49395	Identifier	fcc		48197	0					
ANR	49396	Identifier	calling_scope		48197	1					
ANR	49397	Argument	mname		48197	1					
ANR	49398	Identifier	mname		48197	0					
ANR	49399	ElseStatement	else		48197	0					
ANR	49400	CompoundStatement		173:10:5872:5872	48197	0					
ANR	49401	ExpressionStatement	"fcc -> function_handler = zend_std_get_static_method ( fcc -> calling_scope , mname , NULL )"	3077:4:91209:91292	48197	0	True				
ANR	49402	AssignmentExpression	"fcc -> function_handler = zend_std_get_static_method ( fcc -> calling_scope , mname , NULL )"		48197	0		=			
ANR	49403	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49404	Identifier	fcc		48197	0					
ANR	49405	Identifier	function_handler		48197	1					
ANR	49406	CallExpression	"zend_std_get_static_method ( fcc -> calling_scope , mname , NULL )"		48197	1					
ANR	49407	Callee	zend_std_get_static_method		48197	0					
ANR	49408	Identifier	zend_std_get_static_method		48197	0					
ANR	49409	ArgumentList	fcc -> calling_scope		48197	1					
ANR	49410	Argument	fcc -> calling_scope		48197	0					
ANR	49411	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	49412	Identifier	fcc		48197	0					
ANR	49413	Identifier	calling_scope		48197	1					
ANR	49414	Argument	mname		48197	1					
ANR	49415	Identifier	mname		48197	0					
ANR	49416	Argument	NULL		48197	2					
ANR	49417	Identifier	NULL		48197	0					
ANR	49418	IfStatement	if ( fcc -> function_handler )		48197	1					
ANR	49419	Condition	fcc -> function_handler	3079:7:91306:91326	48197	0	True				
ANR	49420	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49421	Identifier	fcc		48197	0					
ANR	49422	Identifier	function_handler		48197	1					
ANR	49423	CompoundStatement		176:30:5998:5998	48197	1					
ANR	49424	ExpressionStatement	retval = 1	3080:4:91335:91345	48197	0	True				
ANR	49425	AssignmentExpression	retval = 1		48197	0		=			
ANR	49426	Identifier	retval		48197	0					
ANR	49427	PrimaryExpression	1		48197	1					
ANR	49428	ExpressionStatement	call_via_handler = ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) != 0	3081:4:91351:91446	48197	1	True				
ANR	49429	AssignmentExpression	call_via_handler = ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) != 0		48197	0		=			
ANR	49430	Identifier	call_via_handler		48197	0					
ANR	49431	EqualityExpression	( fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) != 0		48197	1		!=			
ANR	49432	BitAndExpression	fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE		48197	0		&			
ANR	49433	MemberAccess	fcc -> function_handler -> common . fn_flags		48197	0					
ANR	49434	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	49435	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49436	Identifier	fcc		48197	0					
ANR	49437	Identifier	function_handler		48197	1					
ANR	49438	Identifier	common		48197	1					
ANR	49439	Identifier	fn_flags		48197	1					
ANR	49440	Identifier	ZEND_ACC_CALL_VIA_TRAMPOLINE		48197	1					
ANR	49441	PrimaryExpression	0		48197	1					
ANR	49442	IfStatement	if ( call_via_handler && ! fcc -> object )		48197	2					
ANR	49443	Condition	call_via_handler && ! fcc -> object	3082:8:91456:91487	48197	0	True				
ANR	49444	AndExpression	call_via_handler && ! fcc -> object		48197	0		&&			
ANR	49445	Identifier	call_via_handler		48197	0					
ANR	49446	UnaryOperationExpression	! fcc -> object		48197	1					
ANR	49447	UnaryOperator	!		48197	0					
ANR	49448	PtrMemberAccess	fcc -> object		48197	1					
ANR	49449	Identifier	fcc		48197	0					
ANR	49450	Identifier	object		48197	1					
ANR	49451	CompoundStatement		180:5:6166:6234	48197	1					
ANR	49452	IdentifierDeclStatement	zend_object * object = zend_get_this_object ( EG ( current_execute_data ) ) ;	3083:5:91497:91565	48197	0	True				
ANR	49453	IdentifierDecl	* object = zend_get_this_object ( EG ( current_execute_data ) )		48197	0					
ANR	49454	IdentifierDeclType	zend_object *		48197	0					
ANR	49455	Identifier	object		48197	1					
ANR	49456	AssignmentExpression	* object = zend_get_this_object ( EG ( current_execute_data ) )		48197	2		=			
ANR	49457	Identifier	object		48197	0					
ANR	49458	CallExpression	zend_get_this_object ( EG ( current_execute_data ) )		48197	1					
ANR	49459	Callee	zend_get_this_object		48197	0					
ANR	49460	Identifier	zend_get_this_object		48197	0					
ANR	49461	ArgumentList	EG ( current_execute_data )		48197	1					
ANR	49462	Argument	EG ( current_execute_data )		48197	0					
ANR	49463	CallExpression	EG ( current_execute_data )		48197	0					
ANR	49464	Callee	EG		48197	0					
ANR	49465	Identifier	EG		48197	0					
ANR	49466	ArgumentList	current_execute_data		48197	1					
ANR	49467	Argument	current_execute_data		48197	0					
ANR	49468	Identifier	current_execute_data		48197	0					
ANR	49469	IfStatement	"if ( object && instanceof_function ( object -> ce , fcc -> calling_scope ) )"		48197	1					
ANR	49470	Condition	"object && instanceof_function ( object -> ce , fcc -> calling_scope )"	3084:9:91576:91645	48197	0	True				
ANR	49471	AndExpression	"object && instanceof_function ( object -> ce , fcc -> calling_scope )"		48197	0		&&			
ANR	49472	Identifier	object		48197	0					
ANR	49473	CallExpression	"instanceof_function ( object -> ce , fcc -> calling_scope )"		48197	1					
ANR	49474	Callee	instanceof_function		48197	0					
ANR	49475	Identifier	instanceof_function		48197	0					
ANR	49476	ArgumentList	object -> ce		48197	1					
ANR	49477	Argument	object -> ce		48197	0					
ANR	49478	PtrMemberAccess	object -> ce		48197	0					
ANR	49479	Identifier	object		48197	0					
ANR	49480	Identifier	ce		48197	1					
ANR	49481	Argument	fcc -> calling_scope		48197	1					
ANR	49482	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	49483	Identifier	fcc		48197	0					
ANR	49484	Identifier	calling_scope		48197	1					
ANR	49485	CompoundStatement		182:62:6317:6317	48197	1					
ANR	49486	ExpressionStatement	fcc -> object = object	3086:6:91656:91676	48197	0	True				
ANR	49487	AssignmentExpression	fcc -> object = object		48197	0		=			
ANR	49488	PtrMemberAccess	fcc -> object		48197	0					
ANR	49489	Identifier	fcc		48197	0					
ANR	49490	Identifier	object		48197	1					
ANR	49491	Identifier	object		48197	1					
ANR	49492	IfStatement	if ( retval )		48197	20					
ANR	49493	Condition	retval	3093:5:91709:91714	48197	0	True				
ANR	49494	Identifier	retval		48197	0					
ANR	49495	CompoundStatement		190:13:6386:6386	48197	1					
ANR	49496	IfStatement	if ( fcc -> calling_scope && ! call_via_handler )		48197	0					
ANR	49497	Condition	fcc -> calling_scope && ! call_via_handler	3094:6:91725:91763	48197	0	True				
ANR	49498	AndExpression	fcc -> calling_scope && ! call_via_handler		48197	0		&&			
ANR	49499	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	49500	Identifier	fcc		48197	0					
ANR	49501	Identifier	calling_scope		48197	1					
ANR	49502	UnaryOperationExpression	! call_via_handler		48197	1					
ANR	49503	UnaryOperator	!		48197	0					
ANR	49504	Identifier	call_via_handler		48197	1					
ANR	49505	CompoundStatement		191:47:6435:6435	48197	1					
ANR	49506	IfStatement	if ( ! fcc -> object && ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_ABSTRACT ) )		48197	0					
ANR	49507	Condition	! fcc -> object && ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_ABSTRACT )	3095:7:91775:91850	48197	0	True				
ANR	49508	AndExpression	! fcc -> object && ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_ABSTRACT )		48197	0		&&			
ANR	49509	UnaryOperationExpression	! fcc -> object		48197	0					
ANR	49510	UnaryOperator	!		48197	0					
ANR	49511	PtrMemberAccess	fcc -> object		48197	1					
ANR	49512	Identifier	fcc		48197	0					
ANR	49513	Identifier	object		48197	1					
ANR	49514	BitAndExpression	fcc -> function_handler -> common . fn_flags & ZEND_ACC_ABSTRACT		48197	1		&			
ANR	49515	MemberAccess	fcc -> function_handler -> common . fn_flags		48197	0					
ANR	49516	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	49517	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49518	Identifier	fcc		48197	0					
ANR	49519	Identifier	function_handler		48197	1					
ANR	49520	Identifier	common		48197	1					
ANR	49521	Identifier	fn_flags		48197	1					
ANR	49522	Identifier	ZEND_ACC_ABSTRACT		48197	1					
ANR	49523	CompoundStatement		192:85:6522:6522	48197	1					
ANR	49524	IfStatement	if ( error )		48197	0					
ANR	49525	Condition	error	3096:8:91863:91867	48197	0	True				
ANR	49526	Identifier	error		48197	0					
ANR	49527	CompoundStatement		193:15:6539:6539	48197	1					
ANR	49528	ExpressionStatement	"zend_spprintf ( error , 0 , ""cannot call abstract method %s::%s()"" , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_VAL ( fcc -> function_handler -> common . function_name ) )"	3097:5:91877:92031	48197	0	True				
ANR	49529	CallExpression	"zend_spprintf ( error , 0 , ""cannot call abstract method %s::%s()"" , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_VAL ( fcc -> function_handler -> common . function_name ) )"		48197	0					
ANR	49530	Callee	zend_spprintf		48197	0					
ANR	49531	Identifier	zend_spprintf		48197	0					
ANR	49532	ArgumentList	error		48197	1					
ANR	49533	Argument	error		48197	0					
ANR	49534	Identifier	error		48197	0					
ANR	49535	Argument	0		48197	1					
ANR	49536	PrimaryExpression	0		48197	0					
ANR	49537	Argument	"""cannot call abstract method %s::%s()"""		48197	2					
ANR	49538	PrimaryExpression	"""cannot call abstract method %s::%s()"""		48197	0					
ANR	49539	Argument	ZSTR_VAL ( fcc -> calling_scope -> name )		48197	3					
ANR	49540	CallExpression	ZSTR_VAL ( fcc -> calling_scope -> name )		48197	0					
ANR	49541	Callee	ZSTR_VAL		48197	0					
ANR	49542	Identifier	ZSTR_VAL		48197	0					
ANR	49543	ArgumentList	fcc -> calling_scope -> name		48197	1					
ANR	49544	Argument	fcc -> calling_scope -> name		48197	0					
ANR	49545	PtrMemberAccess	fcc -> calling_scope -> name		48197	0					
ANR	49546	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	49547	Identifier	fcc		48197	0					
ANR	49548	Identifier	calling_scope		48197	1					
ANR	49549	Identifier	name		48197	1					
ANR	49550	Argument	ZSTR_VAL ( fcc -> function_handler -> common . function_name )		48197	4					
ANR	49551	CallExpression	ZSTR_VAL ( fcc -> function_handler -> common . function_name )		48197	0					
ANR	49552	Callee	ZSTR_VAL		48197	0					
ANR	49553	Identifier	ZSTR_VAL		48197	0					
ANR	49554	ArgumentList	fcc -> function_handler -> common . function_name		48197	1					
ANR	49555	Argument	fcc -> function_handler -> common . function_name		48197	0					
ANR	49556	MemberAccess	fcc -> function_handler -> common . function_name		48197	0					
ANR	49557	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	49558	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49559	Identifier	fcc		48197	0					
ANR	49560	Identifier	function_handler		48197	1					
ANR	49561	Identifier	common		48197	1					
ANR	49562	Identifier	function_name		48197	1					
ANR	49563	ExpressionStatement	retval = 0	3098:5:92038:92048	48197	1	True				
ANR	49564	AssignmentExpression	retval = 0		48197	0		=			
ANR	49565	Identifier	retval		48197	0					
ANR	49566	PrimaryExpression	0		48197	1					
ANR	49567	ElseStatement	else		48197	0					
ANR	49568	CompoundStatement		196:11:6730:6730	48197	0					
ANR	49569	ExpressionStatement	"zend_throw_error ( NULL , ""Cannot call abstract method %s::%s()"" , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_VAL ( fcc -> function_handler -> common . function_name ) )"	3100:5:92068:92221	48197	0	True				
ANR	49570	CallExpression	"zend_throw_error ( NULL , ""Cannot call abstract method %s::%s()"" , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_VAL ( fcc -> function_handler -> common . function_name ) )"		48197	0					
ANR	49571	Callee	zend_throw_error		48197	0					
ANR	49572	Identifier	zend_throw_error		48197	0					
ANR	49573	ArgumentList	NULL		48197	1					
ANR	49574	Argument	NULL		48197	0					
ANR	49575	Identifier	NULL		48197	0					
ANR	49576	Argument	"""Cannot call abstract method %s::%s()"""		48197	1					
ANR	49577	PrimaryExpression	"""Cannot call abstract method %s::%s()"""		48197	0					
ANR	49578	Argument	ZSTR_VAL ( fcc -> calling_scope -> name )		48197	2					
ANR	49579	CallExpression	ZSTR_VAL ( fcc -> calling_scope -> name )		48197	0					
ANR	49580	Callee	ZSTR_VAL		48197	0					
ANR	49581	Identifier	ZSTR_VAL		48197	0					
ANR	49582	ArgumentList	fcc -> calling_scope -> name		48197	1					
ANR	49583	Argument	fcc -> calling_scope -> name		48197	0					
ANR	49584	PtrMemberAccess	fcc -> calling_scope -> name		48197	0					
ANR	49585	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	49586	Identifier	fcc		48197	0					
ANR	49587	Identifier	calling_scope		48197	1					
ANR	49588	Identifier	name		48197	1					
ANR	49589	Argument	ZSTR_VAL ( fcc -> function_handler -> common . function_name )		48197	3					
ANR	49590	CallExpression	ZSTR_VAL ( fcc -> function_handler -> common . function_name )		48197	0					
ANR	49591	Callee	ZSTR_VAL		48197	0					
ANR	49592	Identifier	ZSTR_VAL		48197	0					
ANR	49593	ArgumentList	fcc -> function_handler -> common . function_name		48197	1					
ANR	49594	Argument	fcc -> function_handler -> common . function_name		48197	0					
ANR	49595	MemberAccess	fcc -> function_handler -> common . function_name		48197	0					
ANR	49596	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	49597	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49598	Identifier	fcc		48197	0					
ANR	49599	Identifier	function_handler		48197	1					
ANR	49600	Identifier	common		48197	1					
ANR	49601	Identifier	function_name		48197	1					
ANR	49602	ReturnStatement	return 0 ;	3101:5:92228:92236	48197	1	True				
ANR	49603	PrimaryExpression	0		48197	0					
ANR	49604	ElseStatement	else		48197	0					
ANR	49605	IfStatement	if ( ! fcc -> object && ! ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_STATIC ) )		48197	0					
ANR	49606	Condition	! fcc -> object && ! ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_STATIC )	3103:14:92258:92332	48197	0	True				
ANR	49607	AndExpression	! fcc -> object && ! ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_STATIC )		48197	0		&&			
ANR	49608	UnaryOperationExpression	! fcc -> object		48197	0					
ANR	49609	UnaryOperator	!		48197	0					
ANR	49610	PtrMemberAccess	fcc -> object		48197	1					
ANR	49611	Identifier	fcc		48197	0					
ANR	49612	Identifier	object		48197	1					
ANR	49613	UnaryOperationExpression	! ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_STATIC )		48197	1					
ANR	49614	UnaryOperator	!		48197	0					
ANR	49615	BitAndExpression	fcc -> function_handler -> common . fn_flags & ZEND_ACC_STATIC		48197	1		&			
ANR	49616	MemberAccess	fcc -> function_handler -> common . fn_flags		48197	0					
ANR	49617	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	49618	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49619	Identifier	fcc		48197	0					
ANR	49620	Identifier	function_handler		48197	1					
ANR	49621	Identifier	common		48197	1					
ANR	49622	Identifier	fn_flags		48197	1					
ANR	49623	Identifier	ZEND_ACC_STATIC		48197	1					
ANR	49624	CompoundStatement		202:4:7028:7038	48197	1					
ANR	49625	IdentifierDeclStatement	int severity ;	3104:4:92341:92353	48197	0	True				
ANR	49626	IdentifierDecl	severity		48197	0					
ANR	49627	IdentifierDeclType	int		48197	0					
ANR	49628	Identifier	severity		48197	1					
ANR	49629	IdentifierDeclStatement	char * verb ;	3105:4:92359:92369	48197	1	True				
ANR	49630	IdentifierDecl	* verb		48197	0					
ANR	49631	IdentifierDeclType	char *		48197	0					
ANR	49632	Identifier	verb		48197	1					
ANR	49633	IfStatement	if ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_ALLOW_STATIC )		48197	2					
ANR	49634	Condition	fcc -> function_handler -> common . fn_flags & ZEND_ACC_ALLOW_STATIC	3106:8:92379:92440	48197	0	True				
ANR	49635	BitAndExpression	fcc -> function_handler -> common . fn_flags & ZEND_ACC_ALLOW_STATIC		48197	0		&			
ANR	49636	MemberAccess	fcc -> function_handler -> common . fn_flags		48197	0					
ANR	49637	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	49638	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49639	Identifier	fcc		48197	0					
ANR	49640	Identifier	function_handler		48197	1					
ANR	49641	Identifier	common		48197	1					
ANR	49642	Identifier	fn_flags		48197	1					
ANR	49643	Identifier	ZEND_ACC_ALLOW_STATIC		48197	1					
ANR	49644	CompoundStatement		203:72:7112:7112	48197	1					
ANR	49645	ExpressionStatement	severity = E_DEPRECATED	3107:5:92450:92473	48197	0	True				
ANR	49646	AssignmentExpression	severity = E_DEPRECATED		48197	0		=			
ANR	49647	Identifier	severity		48197	0					
ANR	49648	Identifier	E_DEPRECATED		48197	1					
ANR	49649	ExpressionStatement	"verb = ""should not"""	3108:5:92480:92499	48197	1	True				
ANR	49650	AssignmentExpression	"verb = ""should not"""		48197	0		=			
ANR	49651	Identifier	verb		48197	0					
ANR	49652	PrimaryExpression	"""should not"""		48197	1					
ANR	49653	ElseStatement	else		48197	0					
ANR	49654	CompoundStatement		206:11:7181:7181	48197	0					
ANR	49655	ExpressionStatement	severity = E_ERROR	3111:5:92639:92657	48197	0	True				
ANR	49656	AssignmentExpression	severity = E_ERROR		48197	0		=			
ANR	49657	Identifier	severity		48197	0					
ANR	49658	Identifier	E_ERROR		48197	1					
ANR	49659	ExpressionStatement	"verb = ""cannot"""	3112:5:92664:92679	48197	1	True				
ANR	49660	AssignmentExpression	"verb = ""cannot"""		48197	0		=			
ANR	49661	Identifier	verb		48197	0					
ANR	49662	PrimaryExpression	"""cannot"""		48197	1					
ANR	49663	IfStatement	if ( ( check_flags & IS_CALLABLE_CHECK_IS_STATIC ) != 0 )		48197	3					
ANR	49664	Condition	( check_flags & IS_CALLABLE_CHECK_IS_STATIC ) != 0	3114:8:92695:92742	48197	0	True				
ANR	49665	EqualityExpression	( check_flags & IS_CALLABLE_CHECK_IS_STATIC ) != 0		48197	0		!=			
ANR	49666	BitAndExpression	check_flags & IS_CALLABLE_CHECK_IS_STATIC		48197	0		&			
ANR	49667	Identifier	check_flags		48197	0					
ANR	49668	Identifier	IS_CALLABLE_CHECK_IS_STATIC		48197	1					
ANR	49669	PrimaryExpression	0		48197	1					
ANR	49670	CompoundStatement		211:58:7414:7414	48197	1					
ANR	49671	ExpressionStatement	retval = 0	3115:5:92752:92762	48197	0	True				
ANR	49672	AssignmentExpression	retval = 0		48197	0		=			
ANR	49673	Identifier	retval		48197	0					
ANR	49674	PrimaryExpression	0		48197	1					
ANR	49675	IfStatement	if ( error )		48197	4					
ANR	49676	Condition	error	3117:8:92778:92782	48197	0	True				
ANR	49677	Identifier	error		48197	0					
ANR	49678	CompoundStatement		214:15:7454:7454	48197	1					
ANR	49679	ExpressionStatement	"zend_spprintf ( error , 0 , ""non-static method %s::%s() %s be called statically"" , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_VAL ( fcc -> function_handler -> common . function_name ) , verb )"	3118:5:92792:92966	48197	0	True				
ANR	49680	CallExpression	"zend_spprintf ( error , 0 , ""non-static method %s::%s() %s be called statically"" , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_VAL ( fcc -> function_handler -> common . function_name ) , verb )"		48197	0					
ANR	49681	Callee	zend_spprintf		48197	0					
ANR	49682	Identifier	zend_spprintf		48197	0					
ANR	49683	ArgumentList	error		48197	1					
ANR	49684	Argument	error		48197	0					
ANR	49685	Identifier	error		48197	0					
ANR	49686	Argument	0		48197	1					
ANR	49687	PrimaryExpression	0		48197	0					
ANR	49688	Argument	"""non-static method %s::%s() %s be called statically"""		48197	2					
ANR	49689	PrimaryExpression	"""non-static method %s::%s() %s be called statically"""		48197	0					
ANR	49690	Argument	ZSTR_VAL ( fcc -> calling_scope -> name )		48197	3					
ANR	49691	CallExpression	ZSTR_VAL ( fcc -> calling_scope -> name )		48197	0					
ANR	49692	Callee	ZSTR_VAL		48197	0					
ANR	49693	Identifier	ZSTR_VAL		48197	0					
ANR	49694	ArgumentList	fcc -> calling_scope -> name		48197	1					
ANR	49695	Argument	fcc -> calling_scope -> name		48197	0					
ANR	49696	PtrMemberAccess	fcc -> calling_scope -> name		48197	0					
ANR	49697	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	49698	Identifier	fcc		48197	0					
ANR	49699	Identifier	calling_scope		48197	1					
ANR	49700	Identifier	name		48197	1					
ANR	49701	Argument	ZSTR_VAL ( fcc -> function_handler -> common . function_name )		48197	4					
ANR	49702	CallExpression	ZSTR_VAL ( fcc -> function_handler -> common . function_name )		48197	0					
ANR	49703	Callee	ZSTR_VAL		48197	0					
ANR	49704	Identifier	ZSTR_VAL		48197	0					
ANR	49705	ArgumentList	fcc -> function_handler -> common . function_name		48197	1					
ANR	49706	Argument	fcc -> function_handler -> common . function_name		48197	0					
ANR	49707	MemberAccess	fcc -> function_handler -> common . function_name		48197	0					
ANR	49708	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	49709	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49710	Identifier	fcc		48197	0					
ANR	49711	Identifier	function_handler		48197	1					
ANR	49712	Identifier	common		48197	1					
ANR	49713	Identifier	function_name		48197	1					
ANR	49714	Argument	verb		48197	5					
ANR	49715	Identifier	verb		48197	0					
ANR	49716	IfStatement	if ( severity != E_DEPRECATED )		48197	1					
ANR	49717	Condition	severity != E_DEPRECATED	3119:9:92977:93000	48197	0	True				
ANR	49718	EqualityExpression	severity != E_DEPRECATED		48197	0		!=			
ANR	49719	Identifier	severity		48197	0					
ANR	49720	Identifier	E_DEPRECATED		48197	1					
ANR	49721	CompoundStatement		216:35:7672:7672	48197	1					
ANR	49722	ExpressionStatement	retval = 0	3120:6:93011:93021	48197	0	True				
ANR	49723	AssignmentExpression	retval = 0		48197	0		=			
ANR	49724	Identifier	retval		48197	0					
ANR	49725	PrimaryExpression	0		48197	1					
ANR	49726	ElseStatement	else		48197	0					
ANR	49727	IfStatement	if ( retval )		48197	0					
ANR	49728	Condition	retval	3122:15:93045:93050	48197	0	True				
ANR	49729	Identifier	retval		48197	0					
ANR	49730	CompoundStatement		219:23:7722:7722	48197	1					
ANR	49731	IfStatement	if ( severity == E_ERROR )		48197	0					
ANR	49732	Condition	severity == E_ERROR	3123:9:93064:93082	48197	0	True				
ANR	49733	EqualityExpression	severity == E_ERROR		48197	0		==			
ANR	49734	Identifier	severity		48197	0					
ANR	49735	Identifier	E_ERROR		48197	1					
ANR	49736	CompoundStatement		220:30:7754:7754	48197	1					
ANR	49737	ExpressionStatement	"zend_throw_error ( NULL , ""Non-static method %s::%s() %s be called statically"" , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_VAL ( fcc -> function_handler -> common . function_name ) , verb )"	3124:6:93093:93266	48197	0	True				
ANR	49738	CallExpression	"zend_throw_error ( NULL , ""Non-static method %s::%s() %s be called statically"" , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_VAL ( fcc -> function_handler -> common . function_name ) , verb )"		48197	0					
ANR	49739	Callee	zend_throw_error		48197	0					
ANR	49740	Identifier	zend_throw_error		48197	0					
ANR	49741	ArgumentList	NULL		48197	1					
ANR	49742	Argument	NULL		48197	0					
ANR	49743	Identifier	NULL		48197	0					
ANR	49744	Argument	"""Non-static method %s::%s() %s be called statically"""		48197	1					
ANR	49745	PrimaryExpression	"""Non-static method %s::%s() %s be called statically"""		48197	0					
ANR	49746	Argument	ZSTR_VAL ( fcc -> calling_scope -> name )		48197	2					
ANR	49747	CallExpression	ZSTR_VAL ( fcc -> calling_scope -> name )		48197	0					
ANR	49748	Callee	ZSTR_VAL		48197	0					
ANR	49749	Identifier	ZSTR_VAL		48197	0					
ANR	49750	ArgumentList	fcc -> calling_scope -> name		48197	1					
ANR	49751	Argument	fcc -> calling_scope -> name		48197	0					
ANR	49752	PtrMemberAccess	fcc -> calling_scope -> name		48197	0					
ANR	49753	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	49754	Identifier	fcc		48197	0					
ANR	49755	Identifier	calling_scope		48197	1					
ANR	49756	Identifier	name		48197	1					
ANR	49757	Argument	ZSTR_VAL ( fcc -> function_handler -> common . function_name )		48197	3					
ANR	49758	CallExpression	ZSTR_VAL ( fcc -> function_handler -> common . function_name )		48197	0					
ANR	49759	Callee	ZSTR_VAL		48197	0					
ANR	49760	Identifier	ZSTR_VAL		48197	0					
ANR	49761	ArgumentList	fcc -> function_handler -> common . function_name		48197	1					
ANR	49762	Argument	fcc -> function_handler -> common . function_name		48197	0					
ANR	49763	MemberAccess	fcc -> function_handler -> common . function_name		48197	0					
ANR	49764	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	49765	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49766	Identifier	fcc		48197	0					
ANR	49767	Identifier	function_handler		48197	1					
ANR	49768	Identifier	common		48197	1					
ANR	49769	Identifier	function_name		48197	1					
ANR	49770	Argument	verb		48197	4					
ANR	49771	Identifier	verb		48197	0					
ANR	49772	ElseStatement	else		48197	0					
ANR	49773	CompoundStatement		222:12:7949:7949	48197	0					
ANR	49774	ExpressionStatement	"zend_error ( severity , ""Non-static method %s::%s() %s be called statically"" , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_VAL ( fcc -> function_handler -> common . function_name ) , verb )"	3126:6:93288:93459	48197	0	True				
ANR	49775	CallExpression	"zend_error ( severity , ""Non-static method %s::%s() %s be called statically"" , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_VAL ( fcc -> function_handler -> common . function_name ) , verb )"		48197	0					
ANR	49776	Callee	zend_error		48197	0					
ANR	49777	Identifier	zend_error		48197	0					
ANR	49778	ArgumentList	severity		48197	1					
ANR	49779	Argument	severity		48197	0					
ANR	49780	Identifier	severity		48197	0					
ANR	49781	Argument	"""Non-static method %s::%s() %s be called statically"""		48197	1					
ANR	49782	PrimaryExpression	"""Non-static method %s::%s() %s be called statically"""		48197	0					
ANR	49783	Argument	ZSTR_VAL ( fcc -> calling_scope -> name )		48197	2					
ANR	49784	CallExpression	ZSTR_VAL ( fcc -> calling_scope -> name )		48197	0					
ANR	49785	Callee	ZSTR_VAL		48197	0					
ANR	49786	Identifier	ZSTR_VAL		48197	0					
ANR	49787	ArgumentList	fcc -> calling_scope -> name		48197	1					
ANR	49788	Argument	fcc -> calling_scope -> name		48197	0					
ANR	49789	PtrMemberAccess	fcc -> calling_scope -> name		48197	0					
ANR	49790	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	49791	Identifier	fcc		48197	0					
ANR	49792	Identifier	calling_scope		48197	1					
ANR	49793	Identifier	name		48197	1					
ANR	49794	Argument	ZSTR_VAL ( fcc -> function_handler -> common . function_name )		48197	3					
ANR	49795	CallExpression	ZSTR_VAL ( fcc -> function_handler -> common . function_name )		48197	0					
ANR	49796	Callee	ZSTR_VAL		48197	0					
ANR	49797	Identifier	ZSTR_VAL		48197	0					
ANR	49798	ArgumentList	fcc -> function_handler -> common . function_name		48197	1					
ANR	49799	Argument	fcc -> function_handler -> common . function_name		48197	0					
ANR	49800	MemberAccess	fcc -> function_handler -> common . function_name		48197	0					
ANR	49801	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	49802	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49803	Identifier	fcc		48197	0					
ANR	49804	Identifier	function_handler		48197	1					
ANR	49805	Identifier	common		48197	1					
ANR	49806	Identifier	function_name		48197	1					
ANR	49807	Argument	verb		48197	4					
ANR	49808	Identifier	verb		48197	0					
ANR	49809	IfStatement	if ( retval && ( check_flags & IS_CALLABLE_CHECK_NO_ACCESS ) == 0 )		48197	1					
ANR	49810	Condition	retval && ( check_flags & IS_CALLABLE_CHECK_NO_ACCESS ) == 0	3130:7:93486:93543	48197	0	True				
ANR	49811	AndExpression	retval && ( check_flags & IS_CALLABLE_CHECK_NO_ACCESS ) == 0		48197	0		&&			
ANR	49812	Identifier	retval		48197	0					
ANR	49813	EqualityExpression	( check_flags & IS_CALLABLE_CHECK_NO_ACCESS ) == 0		48197	1		==			
ANR	49814	BitAndExpression	check_flags & IS_CALLABLE_CHECK_NO_ACCESS		48197	0		&			
ANR	49815	Identifier	check_flags		48197	0					
ANR	49816	Identifier	IS_CALLABLE_CHECK_NO_ACCESS		48197	1					
ANR	49817	PrimaryExpression	0		48197	1					
ANR	49818	CompoundStatement		227:67:8215:8215	48197	1					
ANR	49819	IfStatement	if ( fcc -> function_handler -> op_array . fn_flags & ZEND_ACC_PRIVATE )		48197	0					
ANR	49820	Condition	fcc -> function_handler -> op_array . fn_flags & ZEND_ACC_PRIVATE	3131:8:93556:93614	48197	0	True				
ANR	49821	BitAndExpression	fcc -> function_handler -> op_array . fn_flags & ZEND_ACC_PRIVATE		48197	0		&			
ANR	49822	MemberAccess	fcc -> function_handler -> op_array . fn_flags		48197	0					
ANR	49823	PtrMemberAccess	fcc -> function_handler -> op_array		48197	0					
ANR	49824	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49825	Identifier	fcc		48197	0					
ANR	49826	Identifier	function_handler		48197	1					
ANR	49827	Identifier	op_array		48197	1					
ANR	49828	Identifier	fn_flags		48197	1					
ANR	49829	Identifier	ZEND_ACC_PRIVATE		48197	1					
ANR	49830	CompoundStatement		228:69:8286:8286	48197	1					
ANR	49831	IfStatement	"if ( ! zend_check_private ( fcc -> function_handler , fcc -> object ? fcc -> object -> ce : EG ( scope ) , lmname ) )"		48197	0					
ANR	49832	Condition	"! zend_check_private ( fcc -> function_handler , fcc -> object ? fcc -> object -> ce : EG ( scope ) , lmname )"	3132:9:93628:93720	48197	0	True				
ANR	49833	UnaryOperationExpression	"! zend_check_private ( fcc -> function_handler , fcc -> object ? fcc -> object -> ce : EG ( scope ) , lmname )"		48197	0					
ANR	49834	UnaryOperator	!		48197	0					
ANR	49835	CallExpression	"zend_check_private ( fcc -> function_handler , fcc -> object ? fcc -> object -> ce : EG ( scope ) , lmname )"		48197	1					
ANR	49836	Callee	zend_check_private		48197	0					
ANR	49837	Identifier	zend_check_private		48197	0					
ANR	49838	ArgumentList	fcc -> function_handler		48197	1					
ANR	49839	Argument	fcc -> function_handler		48197	0					
ANR	49840	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49841	Identifier	fcc		48197	0					
ANR	49842	Identifier	function_handler		48197	1					
ANR	49843	Argument	fcc -> object ? fcc -> object -> ce : EG ( scope )		48197	1					
ANR	49844	ConditionalExpression	fcc -> object ? fcc -> object -> ce : EG ( scope )		48197	0					
ANR	49845	Condition	fcc -> object		48197	0					
ANR	49846	PtrMemberAccess	fcc -> object		48197	0					
ANR	49847	Identifier	fcc		48197	0					
ANR	49848	Identifier	object		48197	1					
ANR	49849	PtrMemberAccess	fcc -> object -> ce		48197	1					
ANR	49850	PtrMemberAccess	fcc -> object		48197	0					
ANR	49851	Identifier	fcc		48197	0					
ANR	49852	Identifier	object		48197	1					
ANR	49853	Identifier	ce		48197	1					
ANR	49854	CallExpression	EG ( scope )		48197	2					
ANR	49855	Callee	EG		48197	0					
ANR	49856	Identifier	EG		48197	0					
ANR	49857	ArgumentList	scope		48197	1					
ANR	49858	Argument	scope		48197	0					
ANR	49859	Identifier	scope		48197	0					
ANR	49860	Argument	lmname		48197	2					
ANR	49861	Identifier	lmname		48197	0					
ANR	49862	CompoundStatement		229:104:8392:8392	48197	1					
ANR	49863	IfStatement	if ( error )		48197	0					
ANR	49864	Condition	error	3133:10:93735:93739	48197	0	True				
ANR	49865	Identifier	error		48197	0					
ANR	49866	CompoundStatement		230:17:8411:8411	48197	1					
ANR	49867	IfStatement	if ( * error )		48197	0					
ANR	49868	Condition	* error	3134:11:93755:93760	48197	0	True				
ANR	49869	UnaryOperationExpression	* error		48197	0					
ANR	49870	UnaryOperator	*		48197	0					
ANR	49871	Identifier	error		48197	1					
ANR	49872	CompoundStatement		231:19:8432:8432	48197	1					
ANR	49873	ExpressionStatement	efree ( * error )	3135:8:93773:93786	48197	0	True				
ANR	49874	CallExpression	efree ( * error )		48197	0					
ANR	49875	Callee	efree		48197	0					
ANR	49876	Identifier	efree		48197	0					
ANR	49877	ArgumentList	* error		48197	1					
ANR	49878	Argument	* error		48197	0					
ANR	49879	UnaryOperationExpression	* error		48197	0					
ANR	49880	UnaryOperator	*		48197	0					
ANR	49881	Identifier	error		48197	1					
ANR	49882	ExpressionStatement	"zend_spprintf ( error , 0 , ""cannot access private method %s::%s()"" , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_VAL ( fcc -> function_handler -> common . function_name ) )"	3137:7:93804:93959	48197	1	True				
ANR	49883	CallExpression	"zend_spprintf ( error , 0 , ""cannot access private method %s::%s()"" , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_VAL ( fcc -> function_handler -> common . function_name ) )"		48197	0					
ANR	49884	Callee	zend_spprintf		48197	0					
ANR	49885	Identifier	zend_spprintf		48197	0					
ANR	49886	ArgumentList	error		48197	1					
ANR	49887	Argument	error		48197	0					
ANR	49888	Identifier	error		48197	0					
ANR	49889	Argument	0		48197	1					
ANR	49890	PrimaryExpression	0		48197	0					
ANR	49891	Argument	"""cannot access private method %s::%s()"""		48197	2					
ANR	49892	PrimaryExpression	"""cannot access private method %s::%s()"""		48197	0					
ANR	49893	Argument	ZSTR_VAL ( fcc -> calling_scope -> name )		48197	3					
ANR	49894	CallExpression	ZSTR_VAL ( fcc -> calling_scope -> name )		48197	0					
ANR	49895	Callee	ZSTR_VAL		48197	0					
ANR	49896	Identifier	ZSTR_VAL		48197	0					
ANR	49897	ArgumentList	fcc -> calling_scope -> name		48197	1					
ANR	49898	Argument	fcc -> calling_scope -> name		48197	0					
ANR	49899	PtrMemberAccess	fcc -> calling_scope -> name		48197	0					
ANR	49900	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	49901	Identifier	fcc		48197	0					
ANR	49902	Identifier	calling_scope		48197	1					
ANR	49903	Identifier	name		48197	1					
ANR	49904	Argument	ZSTR_VAL ( fcc -> function_handler -> common . function_name )		48197	4					
ANR	49905	CallExpression	ZSTR_VAL ( fcc -> function_handler -> common . function_name )		48197	0					
ANR	49906	Callee	ZSTR_VAL		48197	0					
ANR	49907	Identifier	ZSTR_VAL		48197	0					
ANR	49908	ArgumentList	fcc -> function_handler -> common . function_name		48197	1					
ANR	49909	Argument	fcc -> function_handler -> common . function_name		48197	0					
ANR	49910	MemberAccess	fcc -> function_handler -> common . function_name		48197	0					
ANR	49911	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	49912	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49913	Identifier	fcc		48197	0					
ANR	49914	Identifier	function_handler		48197	1					
ANR	49915	Identifier	common		48197	1					
ANR	49916	Identifier	function_name		48197	1					
ANR	49917	ExpressionStatement	retval = 0	3139:6:93975:93985	48197	1	True				
ANR	49918	AssignmentExpression	retval = 0		48197	0		=			
ANR	49919	Identifier	retval		48197	0					
ANR	49920	PrimaryExpression	0		48197	1					
ANR	49921	ElseStatement	else		48197	0					
ANR	49922	IfStatement	if ( ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_PROTECTED ) )		48197	0					
ANR	49923	Condition	fcc -> function_handler -> common . fn_flags & ZEND_ACC_PROTECTED	3141:15:94009:94069	48197	0	True				
ANR	49924	BitAndExpression	fcc -> function_handler -> common . fn_flags & ZEND_ACC_PROTECTED		48197	0		&			
ANR	49925	MemberAccess	fcc -> function_handler -> common . fn_flags		48197	0					
ANR	49926	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	49927	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49928	Identifier	fcc		48197	0					
ANR	49929	Identifier	function_handler		48197	1					
ANR	49930	Identifier	common		48197	1					
ANR	49931	Identifier	fn_flags		48197	1					
ANR	49932	Identifier	ZEND_ACC_PROTECTED		48197	1					
ANR	49933	CompoundStatement		238:78:8741:8741	48197	1					
ANR	49934	IfStatement	"if ( ! zend_check_protected ( fcc -> function_handler -> common . scope , EG ( scope ) ) )"		48197	0					
ANR	49935	Condition	"! zend_check_protected ( fcc -> function_handler -> common . scope , EG ( scope ) )"	3142:9:94083:94151	48197	0	True				
ANR	49936	UnaryOperationExpression	"! zend_check_protected ( fcc -> function_handler -> common . scope , EG ( scope ) )"		48197	0					
ANR	49937	UnaryOperator	!		48197	0					
ANR	49938	CallExpression	"zend_check_protected ( fcc -> function_handler -> common . scope , EG ( scope ) )"		48197	1					
ANR	49939	Callee	zend_check_protected		48197	0					
ANR	49940	Identifier	zend_check_protected		48197	0					
ANR	49941	ArgumentList	fcc -> function_handler -> common . scope		48197	1					
ANR	49942	Argument	fcc -> function_handler -> common . scope		48197	0					
ANR	49943	MemberAccess	fcc -> function_handler -> common . scope		48197	0					
ANR	49944	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	49945	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	49946	Identifier	fcc		48197	0					
ANR	49947	Identifier	function_handler		48197	1					
ANR	49948	Identifier	common		48197	1					
ANR	49949	Identifier	scope		48197	1					
ANR	49950	Argument	EG ( scope )		48197	1					
ANR	49951	CallExpression	EG ( scope )		48197	0					
ANR	49952	Callee	EG		48197	0					
ANR	49953	Identifier	EG		48197	0					
ANR	49954	ArgumentList	scope		48197	1					
ANR	49955	Argument	scope		48197	0					
ANR	49956	Identifier	scope		48197	0					
ANR	49957	CompoundStatement		239:80:8823:8823	48197	1					
ANR	49958	IfStatement	if ( error )		48197	0					
ANR	49959	Condition	error	3143:10:94166:94170	48197	0	True				
ANR	49960	Identifier	error		48197	0					
ANR	49961	CompoundStatement		240:17:8842:8842	48197	1					
ANR	49962	IfStatement	if ( * error )		48197	0					
ANR	49963	Condition	* error	3144:11:94186:94191	48197	0	True				
ANR	49964	UnaryOperationExpression	* error		48197	0					
ANR	49965	UnaryOperator	*		48197	0					
ANR	49966	Identifier	error		48197	1					
ANR	49967	CompoundStatement		241:19:8863:8863	48197	1					
ANR	49968	ExpressionStatement	efree ( * error )	3145:8:94204:94217	48197	0	True				
ANR	49969	CallExpression	efree ( * error )		48197	0					
ANR	49970	Callee	efree		48197	0					
ANR	49971	Identifier	efree		48197	0					
ANR	49972	ArgumentList	* error		48197	1					
ANR	49973	Argument	* error		48197	0					
ANR	49974	UnaryOperationExpression	* error		48197	0					
ANR	49975	UnaryOperator	*		48197	0					
ANR	49976	Identifier	error		48197	1					
ANR	49977	ExpressionStatement	"zend_spprintf ( error , 0 , ""cannot access protected method %s::%s()"" , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_VAL ( fcc -> function_handler -> common . function_name ) )"	3147:7:94235:94392	48197	1	True				
ANR	49978	CallExpression	"zend_spprintf ( error , 0 , ""cannot access protected method %s::%s()"" , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_VAL ( fcc -> function_handler -> common . function_name ) )"		48197	0					
ANR	49979	Callee	zend_spprintf		48197	0					
ANR	49980	Identifier	zend_spprintf		48197	0					
ANR	49981	ArgumentList	error		48197	1					
ANR	49982	Argument	error		48197	0					
ANR	49983	Identifier	error		48197	0					
ANR	49984	Argument	0		48197	1					
ANR	49985	PrimaryExpression	0		48197	0					
ANR	49986	Argument	"""cannot access protected method %s::%s()"""		48197	2					
ANR	49987	PrimaryExpression	"""cannot access protected method %s::%s()"""		48197	0					
ANR	49988	Argument	ZSTR_VAL ( fcc -> calling_scope -> name )		48197	3					
ANR	49989	CallExpression	ZSTR_VAL ( fcc -> calling_scope -> name )		48197	0					
ANR	49990	Callee	ZSTR_VAL		48197	0					
ANR	49991	Identifier	ZSTR_VAL		48197	0					
ANR	49992	ArgumentList	fcc -> calling_scope -> name		48197	1					
ANR	49993	Argument	fcc -> calling_scope -> name		48197	0					
ANR	49994	PtrMemberAccess	fcc -> calling_scope -> name		48197	0					
ANR	49995	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	49996	Identifier	fcc		48197	0					
ANR	49997	Identifier	calling_scope		48197	1					
ANR	49998	Identifier	name		48197	1					
ANR	49999	Argument	ZSTR_VAL ( fcc -> function_handler -> common . function_name )		48197	4					
ANR	50000	CallExpression	ZSTR_VAL ( fcc -> function_handler -> common . function_name )		48197	0					
ANR	50001	Callee	ZSTR_VAL		48197	0					
ANR	50002	Identifier	ZSTR_VAL		48197	0					
ANR	50003	ArgumentList	fcc -> function_handler -> common . function_name		48197	1					
ANR	50004	Argument	fcc -> function_handler -> common . function_name		48197	0					
ANR	50005	MemberAccess	fcc -> function_handler -> common . function_name		48197	0					
ANR	50006	PtrMemberAccess	fcc -> function_handler -> common		48197	0					
ANR	50007	PtrMemberAccess	fcc -> function_handler		48197	0					
ANR	50008	Identifier	fcc		48197	0					
ANR	50009	Identifier	function_handler		48197	1					
ANR	50010	Identifier	common		48197	1					
ANR	50011	Identifier	function_name		48197	1					
ANR	50012	ExpressionStatement	retval = 0	3149:6:94408:94418	48197	1	True				
ANR	50013	AssignmentExpression	retval = 0		48197	0		=			
ANR	50014	Identifier	retval		48197	0					
ANR	50015	PrimaryExpression	0		48197	1					
ANR	50016	ElseStatement	else		48197	0					
ANR	50017	IfStatement	if ( error && ! ( check_flags & IS_CALLABLE_CHECK_SILENT ) )		48197	0					
ANR	50018	Condition	error && ! ( check_flags & IS_CALLABLE_CHECK_SILENT )	3154:12:94454:94503	48197	0	True				
ANR	50019	AndExpression	error && ! ( check_flags & IS_CALLABLE_CHECK_SILENT )		48197	0		&&			
ANR	50020	Identifier	error		48197	0					
ANR	50021	UnaryOperationExpression	! ( check_flags & IS_CALLABLE_CHECK_SILENT )		48197	1					
ANR	50022	UnaryOperator	!		48197	0					
ANR	50023	BitAndExpression	check_flags & IS_CALLABLE_CHECK_SILENT		48197	1		&			
ANR	50024	Identifier	check_flags		48197	0					
ANR	50025	Identifier	IS_CALLABLE_CHECK_SILENT		48197	1					
ANR	50026	CompoundStatement		251:64:9175:9175	48197	1					
ANR	50027	IfStatement	if ( fcc -> calling_scope )		48197	0					
ANR	50028	Condition	fcc -> calling_scope	3155:6:94514:94531	48197	0	True				
ANR	50029	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	50030	Identifier	fcc		48197	0					
ANR	50031	Identifier	calling_scope		48197	1					
ANR	50032	CompoundStatement		252:26:9203:9203	48197	1					
ANR	50033	IfStatement	if ( error )		48197	0					
ANR	50034	Condition	error	3156:7:94543:94547	48197	0	True				
ANR	50035	Identifier	error		48197	0					
ANR	50036	ExpressionStatement	"zend_spprintf ( error , 0 , ""class '%s' does not have a method '%s'"" , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_VAL ( mname ) )"	3156:14:94550:94668	48197	1	True				
ANR	50037	CallExpression	"zend_spprintf ( error , 0 , ""class '%s' does not have a method '%s'"" , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_VAL ( mname ) )"		48197	0					
ANR	50038	Callee	zend_spprintf		48197	0					
ANR	50039	Identifier	zend_spprintf		48197	0					
ANR	50040	ArgumentList	error		48197	1					
ANR	50041	Argument	error		48197	0					
ANR	50042	Identifier	error		48197	0					
ANR	50043	Argument	0		48197	1					
ANR	50044	PrimaryExpression	0		48197	0					
ANR	50045	Argument	"""class '%s' does not have a method '%s'"""		48197	2					
ANR	50046	PrimaryExpression	"""class '%s' does not have a method '%s'"""		48197	0					
ANR	50047	Argument	ZSTR_VAL ( fcc -> calling_scope -> name )		48197	3					
ANR	50048	CallExpression	ZSTR_VAL ( fcc -> calling_scope -> name )		48197	0					
ANR	50049	Callee	ZSTR_VAL		48197	0					
ANR	50050	Identifier	ZSTR_VAL		48197	0					
ANR	50051	ArgumentList	fcc -> calling_scope -> name		48197	1					
ANR	50052	Argument	fcc -> calling_scope -> name		48197	0					
ANR	50053	PtrMemberAccess	fcc -> calling_scope -> name		48197	0					
ANR	50054	PtrMemberAccess	fcc -> calling_scope		48197	0					
ANR	50055	Identifier	fcc		48197	0					
ANR	50056	Identifier	calling_scope		48197	1					
ANR	50057	Identifier	name		48197	1					
ANR	50058	Argument	ZSTR_VAL ( mname )		48197	4					
ANR	50059	CallExpression	ZSTR_VAL ( mname )		48197	0					
ANR	50060	Callee	ZSTR_VAL		48197	0					
ANR	50061	Identifier	ZSTR_VAL		48197	0					
ANR	50062	ArgumentList	mname		48197	1					
ANR	50063	Argument	mname		48197	0					
ANR	50064	Identifier	mname		48197	0					
ANR	50065	ElseStatement	else		48197	0					
ANR	50066	CompoundStatement		254:9:9348:9348	48197	0					
ANR	50067	IfStatement	if ( error )		48197	0					
ANR	50068	Condition	error	3158:7:94688:94692	48197	0	True				
ANR	50069	Identifier	error		48197	0					
ANR	50070	ExpressionStatement	"zend_spprintf ( error , 0 , ""function '%s' does not exist"" , ZSTR_VAL ( mname ) )"	3158:14:94695:94767	48197	1	True				
ANR	50071	CallExpression	"zend_spprintf ( error , 0 , ""function '%s' does not exist"" , ZSTR_VAL ( mname ) )"		48197	0					
ANR	50072	Callee	zend_spprintf		48197	0					
ANR	50073	Identifier	zend_spprintf		48197	0					
ANR	50074	ArgumentList	error		48197	1					
ANR	50075	Argument	error		48197	0					
ANR	50076	Identifier	error		48197	0					
ANR	50077	Argument	0		48197	1					
ANR	50078	PrimaryExpression	0		48197	0					
ANR	50079	Argument	"""function '%s' does not exist"""		48197	2					
ANR	50080	PrimaryExpression	"""function '%s' does not exist"""		48197	0					
ANR	50081	Argument	ZSTR_VAL ( mname )		48197	3					
ANR	50082	CallExpression	ZSTR_VAL ( mname )		48197	0					
ANR	50083	Callee	ZSTR_VAL		48197	0					
ANR	50084	Identifier	ZSTR_VAL		48197	0					
ANR	50085	ArgumentList	mname		48197	1					
ANR	50086	Argument	mname		48197	0					
ANR	50087	Identifier	mname		48197	0					
ANR	50088	ExpressionStatement	zend_string_release ( lmname )	3161:1:94777:94804	48197	21	True				
ANR	50089	CallExpression	zend_string_release ( lmname )		48197	0					
ANR	50090	Callee	zend_string_release		48197	0					
ANR	50091	Identifier	zend_string_release		48197	0					
ANR	50092	ArgumentList	lmname		48197	1					
ANR	50093	Argument	lmname		48197	0					
ANR	50094	Identifier	lmname		48197	0					
ANR	50095	ExpressionStatement	zend_string_release ( mname )	3162:1:94807:94833	48197	22	True				
ANR	50096	CallExpression	zend_string_release ( mname )		48197	0					
ANR	50097	Callee	zend_string_release		48197	0					
ANR	50098	Identifier	zend_string_release		48197	0					
ANR	50099	ArgumentList	mname		48197	1					
ANR	50100	Argument	mname		48197	0					
ANR	50101	Identifier	mname		48197	0					
ANR	50102	IfStatement	if ( fcc -> object )		48197	23					
ANR	50103	Condition	fcc -> object	3164:5:94841:94851	48197	0	True				
ANR	50104	PtrMemberAccess	fcc -> object		48197	0					
ANR	50105	Identifier	fcc		48197	0					
ANR	50106	Identifier	object		48197	1					
ANR	50107	CompoundStatement		261:18:9523:9523	48197	1					
ANR	50108	ExpressionStatement	fcc -> called_scope = fcc -> object -> ce	3165:2:94858:94893	48197	0	True				
ANR	50109	AssignmentExpression	fcc -> called_scope = fcc -> object -> ce		48197	0		=			
ANR	50110	PtrMemberAccess	fcc -> called_scope		48197	0					
ANR	50111	Identifier	fcc		48197	0					
ANR	50112	Identifier	called_scope		48197	1					
ANR	50113	PtrMemberAccess	fcc -> object -> ce		48197	1					
ANR	50114	PtrMemberAccess	fcc -> object		48197	0					
ANR	50115	Identifier	fcc		48197	0					
ANR	50116	Identifier	object		48197	1					
ANR	50117	Identifier	ce		48197	1					
ANR	50118	IfStatement	if ( retval )		48197	24					
ANR	50119	Condition	retval	3167:5:94903:94908	48197	0	True				
ANR	50120	Identifier	retval		48197	0					
ANR	50121	CompoundStatement		264:13:9580:9580	48197	1					
ANR	50122	ExpressionStatement	fcc -> initialized = 1	3168:2:94915:94935	48197	0	True				
ANR	50123	AssignmentExpression	fcc -> initialized = 1		48197	0		=			
ANR	50124	PtrMemberAccess	fcc -> initialized		48197	0					
ANR	50125	Identifier	fcc		48197	0					
ANR	50126	Identifier	initialized		48197	1					
ANR	50127	PrimaryExpression	1		48197	1					
ANR	50128	ReturnStatement	return retval ;	3170:1:94941:94954	48197	25	True				
ANR	50129	Identifier	retval		48197	0					
ANR	50130	ReturnType	static int		48197	1					
ANR	50131	Identifier	zend_is_callable_check_func		48197	2					
ANR	50132	ParameterList	"int check_flags , zval * callable , zend_fcall_info_cache * fcc , int strict_class , char * * error"		48197	3					
ANR	50133	Parameter	int check_flags	2903:39:85227:85241	48197	0	True				
ANR	50134	ParameterType	int		48197	0					
ANR	50135	Identifier	check_flags		48197	1					
ANR	50136	Parameter	zval * callable	2903:56:85244:85257	48197	1	True				
ANR	50137	ParameterType	zval *		48197	0					
ANR	50138	Identifier	callable		48197	1					
ANR	50139	Parameter	zend_fcall_info_cache * fcc	2903:72:85260:85285	48197	2	True				
ANR	50140	ParameterType	zend_fcall_info_cache *		48197	0					
ANR	50141	Identifier	fcc		48197	1					
ANR	50142	Parameter	int strict_class	2903:100:85288:85303	48197	3	True				
ANR	50143	ParameterType	int		48197	0					
ANR	50144	Identifier	strict_class		48197	1					
ANR	50145	Parameter	char * * error	2903:118:85306:85317	48197	4	True				
ANR	50146	ParameterType	char * *		48197	0					
ANR	50147	Identifier	error		48197	1					
ANR	50148	CFGEntryNode	ENTRY		48197		True				
ANR	50149	CFGExitNode	EXIT		48197		True				
ANR	50150	Symbol	zend_string_equals_literal		48197						
ANR	50151	Symbol	callable		48197						
ANR	50152	Symbol	& fcc -> calling_scope -> function_table		48197						
ANR	50153	Symbol	fcc -> function_handler -> common . scope		48197						
ANR	50154	Symbol	* fcc		48197						
ANR	50155	Symbol	priv_fbc -> common . fn_flags		48197						
ANR	50156	Symbol	zend_string_init		48197						
ANR	50157	Symbol	check_flags		48197						
ANR	50158	Symbol	* * fcc		48197						
ANR	50159	Symbol	call_via_handler		48197						
ANR	50160	Symbol	verb		48197						
ANR	50161	Symbol	& ce_org -> function_table		48197						
ANR	50162	Symbol	* fcc -> object		48197						
ANR	50163	Symbol	fcc -> calling_scope -> __callstatic		48197						
ANR	50164	Symbol	ce_org -> name		48197						
ANR	50165	Symbol	ce_org		48197						
ANR	50166	Symbol	fcc -> function_handler -> op_array		48197						
ANR	50167	Symbol	fcc -> calling_scope -> name		48197						
ANR	50168	Symbol	fcc -> called_scope		48197						
ANR	50169	Symbol	& EG ( scope ) -> function_table		48197						
ANR	50170	Symbol	function_table		48197						
ANR	50171	Symbol	fcc -> function_handler -> common		48197						
ANR	50172	Symbol	fcc -> object -> ce		48197						
ANR	50173	Symbol	object		48197						
ANR	50174	Symbol	fcc		48197						
ANR	50175	Symbol	mname		48197						
ANR	50176	Symbol	* object		48197						
ANR	50177	Symbol	* fcc -> object -> handlers		48197						
ANR	50178	Symbol	* ce_org		48197						
ANR	50179	Symbol	ZEND_ACC_PROTECTED		48197						
ANR	50180	Symbol	Z_STRLEN_P		48197						
ANR	50181	Symbol	* ( colon - 1 )		48197						
ANR	50182	Symbol	* Z_STRVAL_P		48197						
ANR	50183	Symbol	zend_memrchr		48197						
ANR	50184	Symbol	priv_fbc -> common . scope		48197						
ANR	50185	Symbol	last_scope		48197						
ANR	50186	Symbol	fcc -> calling_scope -> __call		48197						
ANR	50187	Symbol	fcc -> function_handler -> common . function_name		48197						
ANR	50188	Symbol	fcc -> object -> handlers		48197						
ANR	50189	Symbol	ZEND_ACC_ABSTRACT		48197						
ANR	50190	Symbol	E_ERROR		48197						
ANR	50191	Symbol	IS_CALLABLE_CHECK_IS_STATIC		48197						
ANR	50192	Symbol	priv_fbc		48197						
ANR	50193	Symbol	ce_org -> __call		48197						
ANR	50194	Symbol	IS_CALLABLE_CHECK_SILENT		48197						
ANR	50195	Symbol	zend_check_protected		48197						
ANR	50196	Symbol	* * fcc -> object		48197						
ANR	50197	Symbol	fcc -> calling_scope -> constructor		48197						
ANR	50198	Symbol	object -> ce		48197						
ANR	50199	Symbol	ZEND_CONSTRUCTOR_FUNC_NAME		48197						
ANR	50200	Symbol	current_execute_data		48197						
ANR	50201	Symbol	fcc -> calling_scope		48197						
ANR	50202	Symbol	zend_string_tolower		48197						
ANR	50203	Symbol	& fcc -> object		48197						
ANR	50204	Symbol	& strict_class		48197						
ANR	50205	Symbol	ZEND_OVERLOADED_FUNCTION		48197						
ANR	50206	Symbol	zend_hash_find_ptr		48197						
ANR	50207	Symbol	EG		48197						
ANR	50208	Symbol	NULL		48197						
ANR	50209	Symbol	zend_std_get_static_method		48197						
ANR	50210	Symbol	fcc -> calling_scope -> get_static_method		48197						
ANR	50211	Symbol	* fcc -> calling_scope		48197						
ANR	50212	Symbol	ZEND_ACC_CALL_VIA_TRAMPOLINE		48197						
ANR	50213	Symbol	retval		48197						
ANR	50214	Symbol	zend_check_private		48197						
ANR	50215	Symbol	* priv_fbc		48197						
ANR	50216	Symbol	E_DEPRECATED		48197						
ANR	50217	Symbol	ftable		48197						
ANR	50218	Symbol	* error		48197						
ANR	50219	Symbol	mlen		48197						
ANR	50220	Symbol	Z_STR_P		48197						
ANR	50221	Symbol	fcc -> function_handler		48197						
ANR	50222	Symbol	ZEND_ACC_ALLOW_STATIC		48197						
ANR	50223	Symbol	fcc -> function_handler -> common . fn_flags		48197						
ANR	50224	Symbol	use_heap		48197						
ANR	50225	Symbol	instanceof_function		48197						
ANR	50226	Symbol	IS_CALLABLE_CHECK_NO_ACCESS		48197						
ANR	50227	Symbol	* * * fcc		48197						
ANR	50228	Symbol	fcc -> function_handler -> op_array . fn_flags		48197						
ANR	50229	Symbol	cname		48197						
ANR	50230	Symbol	ZEND_ACC_CHANGED		48197						
ANR	50231	Symbol	error		48197						
ANR	50232	Symbol	zend_get_this_object		48197						
ANR	50233	Symbol	UNEXPECTED		48197						
ANR	50234	Symbol	scope		48197						
ANR	50235	Symbol	priv_fbc -> common		48197						
ANR	50236	Symbol	ZEND_ACC_STATIC		48197						
ANR	50237	Symbol	fcc -> initialized		48197						
ANR	50238	Symbol	strict_class		48197						
ANR	50239	Symbol	severity		48197						
ANR	50240	Symbol	* fcc -> function_handler		48197						
ANR	50241	Symbol	fcc -> function_handler -> type		48197						
ANR	50242	Symbol	zend_get_call_trampoline_func		48197						
ANR	50243	Symbol	fcc -> object		48197						
ANR	50244	Symbol	Z_STRVAL_P		48197						
ANR	50245	Symbol	* colon		48197						
ANR	50246	Symbol	zend_is_callable_check_class		48197						
ANR	50247	Symbol	ZSTR_VAL		48197						
ANR	50248	Symbol	ZEND_ACC_PRIVATE		48197						
ANR	50249	Symbol	lmname		48197						
ANR	50250	Symbol	colon		48197						
ANR	50251	Symbol	ZSTR_LEN		48197						
ANR	50252	Symbol	fcc -> object -> handlers -> get_method		48197						
ANR	50253	Symbol	clen		48197						
ANR	50254	Symbol	EXPECTED		48197						
ANR	50255	Function	zend_is_callable_ex	3174:0:94969:101463							
ANR	50256	FunctionDef	"zend_is_callable_ex (zval * callable , zend_object * object , uint check_flags , zend_string * * callable_name , zend_fcall_info_cache * fcc , char * * error)"		50255	0					
ANR	50257	CompoundStatement		3175:0:95144:101463	50255	0					
ANR	50258	IdentifierDeclStatement	zend_bool ret ;	3176:1:95147:95160	50255	0	True				
ANR	50259	IdentifierDecl	ret		50255	0					
ANR	50260	IdentifierDeclType	zend_bool		50255	0					
ANR	50261	Identifier	ret		50255	1					
ANR	50262	IdentifierDeclStatement	zend_fcall_info_cache fcc_local ;	3177:1:95163:95194	50255	1	True				
ANR	50263	IdentifierDecl	fcc_local		50255	0					
ANR	50264	IdentifierDeclType	zend_fcall_info_cache		50255	0					
ANR	50265	Identifier	fcc_local		50255	1					
ANR	50266	IfStatement	if ( callable_name )		50255	2					
ANR	50267	Condition	callable_name	3179:5:95202:95214	50255	0	True				
ANR	50268	Identifier	callable_name		50255	0					
ANR	50269	CompoundStatement		5:20:72:72	50255	1					
ANR	50270	ExpressionStatement	* callable_name = NULL	3180:2:95221:95242	50255	0	True				
ANR	50271	AssignmentExpression	* callable_name = NULL		50255	0		=			
ANR	50272	UnaryOperationExpression	* callable_name		50255	0					
ANR	50273	UnaryOperator	*		50255	0					
ANR	50274	Identifier	callable_name		50255	1					
ANR	50275	Identifier	NULL		50255	1					
ANR	50276	IfStatement	if ( fcc == NULL )		50255	3					
ANR	50277	Condition	fcc == NULL	3182:5:95252:95262	50255	0	True				
ANR	50278	EqualityExpression	fcc == NULL		50255	0		==			
ANR	50279	Identifier	fcc		50255	0					
ANR	50280	Identifier	NULL		50255	1					
ANR	50281	CompoundStatement		8:18:120:120	50255	1					
ANR	50282	ExpressionStatement	fcc = & fcc_local	3183:2:95269:95285	50255	0	True				
ANR	50283	AssignmentExpression	fcc = & fcc_local		50255	0		=			
ANR	50284	Identifier	fcc		50255	0					
ANR	50285	UnaryOperationExpression	& fcc_local		50255	1					
ANR	50286	UnaryOperator	&		50255	0					
ANR	50287	Identifier	fcc_local		50255	1					
ANR	50288	IfStatement	if ( error )		50255	4					
ANR	50289	Condition	error	3185:5:95295:95299	50255	0	True				
ANR	50290	Identifier	error		50255	0					
ANR	50291	CompoundStatement		11:12:157:157	50255	1					
ANR	50292	ExpressionStatement	* error = NULL	3186:2:95306:95319	50255	0	True				
ANR	50293	AssignmentExpression	* error = NULL		50255	0		=			
ANR	50294	UnaryOperationExpression	* error		50255	0					
ANR	50295	UnaryOperator	*		50255	0					
ANR	50296	Identifier	error		50255	1					
ANR	50297	Identifier	NULL		50255	1					
ANR	50298	ExpressionStatement	fcc -> initialized = 0	3189:1:95326:95346	50255	5	True				
ANR	50299	AssignmentExpression	fcc -> initialized = 0		50255	0		=			
ANR	50300	PtrMemberAccess	fcc -> initialized		50255	0					
ANR	50301	Identifier	fcc		50255	0					
ANR	50302	Identifier	initialized		50255	1					
ANR	50303	PrimaryExpression	0		50255	1					
ANR	50304	ExpressionStatement	fcc -> calling_scope = NULL	3190:1:95349:95374	50255	6	True				
ANR	50305	AssignmentExpression	fcc -> calling_scope = NULL		50255	0		=			
ANR	50306	PtrMemberAccess	fcc -> calling_scope		50255	0					
ANR	50307	Identifier	fcc		50255	0					
ANR	50308	Identifier	calling_scope		50255	1					
ANR	50309	Identifier	NULL		50255	1					
ANR	50310	ExpressionStatement	fcc -> called_scope = NULL	3191:1:95377:95401	50255	7	True				
ANR	50311	AssignmentExpression	fcc -> called_scope = NULL		50255	0		=			
ANR	50312	PtrMemberAccess	fcc -> called_scope		50255	0					
ANR	50313	Identifier	fcc		50255	0					
ANR	50314	Identifier	called_scope		50255	1					
ANR	50315	Identifier	NULL		50255	1					
ANR	50316	ExpressionStatement	fcc -> function_handler = NULL	3192:1:95404:95432	50255	8	True				
ANR	50317	AssignmentExpression	fcc -> function_handler = NULL		50255	0		=			
ANR	50318	PtrMemberAccess	fcc -> function_handler		50255	0					
ANR	50319	Identifier	fcc		50255	0					
ANR	50320	Identifier	function_handler		50255	1					
ANR	50321	Identifier	NULL		50255	1					
ANR	50322	ExpressionStatement	fcc -> object = NULL	3193:1:95435:95453	50255	9	True				
ANR	50323	AssignmentExpression	fcc -> object = NULL		50255	0		=			
ANR	50324	PtrMemberAccess	fcc -> object		50255	0					
ANR	50325	Identifier	fcc		50255	0					
ANR	50326	Identifier	object		50255	1					
ANR	50327	Identifier	NULL		50255	1					
ANR	50328	IfStatement	if ( object && ( ! EG ( objects_store ) . object_buckets || ! IS_OBJ_VALID ( EG ( objects_store ) . object_buckets [ object -> handle ] ) ) )		50255	10					
ANR	50329	Condition	object && ( ! EG ( objects_store ) . object_buckets || ! IS_OBJ_VALID ( EG ( objects_store ) . object_buckets [ object -> handle ] ) )	3195:5:95461:95583	50255	0	True				
ANR	50330	AndExpression	object && ( ! EG ( objects_store ) . object_buckets || ! IS_OBJ_VALID ( EG ( objects_store ) . object_buckets [ object -> handle ] ) )		50255	0		&&			
ANR	50331	Identifier	object		50255	0					
ANR	50332	OrExpression	! EG ( objects_store ) . object_buckets || ! IS_OBJ_VALID ( EG ( objects_store ) . object_buckets [ object -> handle ] )		50255	1		||			
ANR	50333	UnaryOperationExpression	! EG ( objects_store ) . object_buckets		50255	0					
ANR	50334	UnaryOperator	!		50255	0					
ANR	50335	MemberAccess	EG ( objects_store ) . object_buckets		50255	1					
ANR	50336	CallExpression	EG ( objects_store )		50255	0					
ANR	50337	Callee	EG		50255	0					
ANR	50338	Identifier	EG		50255	0					
ANR	50339	ArgumentList	objects_store		50255	1					
ANR	50340	Argument	objects_store		50255	0					
ANR	50341	Identifier	objects_store		50255	0					
ANR	50342	Identifier	object_buckets		50255	1					
ANR	50343	UnaryOperationExpression	! IS_OBJ_VALID ( EG ( objects_store ) . object_buckets [ object -> handle ] )		50255	1					
ANR	50344	UnaryOperator	!		50255	0					
ANR	50345	CallExpression	IS_OBJ_VALID ( EG ( objects_store ) . object_buckets [ object -> handle ] )		50255	1					
ANR	50346	Callee	IS_OBJ_VALID		50255	0					
ANR	50347	Identifier	IS_OBJ_VALID		50255	0					
ANR	50348	ArgumentList	EG ( objects_store ) . object_buckets [ object -> handle ]		50255	1					
ANR	50349	Argument	EG ( objects_store ) . object_buckets [ object -> handle ]		50255	0					
ANR	50350	ArrayIndexing	EG ( objects_store ) . object_buckets [ object -> handle ]		50255	0					
ANR	50351	MemberAccess	EG ( objects_store ) . object_buckets		50255	0					
ANR	50352	CallExpression	EG ( objects_store )		50255	0					
ANR	50353	Callee	EG		50255	0					
ANR	50354	Identifier	EG		50255	0					
ANR	50355	ArgumentList	objects_store		50255	1					
ANR	50356	Argument	objects_store		50255	0					
ANR	50357	Identifier	objects_store		50255	0					
ANR	50358	Identifier	object_buckets		50255	1					
ANR	50359	PtrMemberAccess	object -> handle		50255	1					
ANR	50360	Identifier	object		50255	0					
ANR	50361	Identifier	handle		50255	1					
ANR	50362	CompoundStatement		23:72:441:441	50255	1					
ANR	50363	ReturnStatement	return 0 ;	3198:2:95590:95598	50255	0	True				
ANR	50364	PrimaryExpression	0		50255	0					
ANR	50365	Label	again :	3201:0:95604:95609	50255	11	True				
ANR	50366	Identifier	again		50255	0					
ANR	50367	SwitchStatement	switch ( Z_TYPE_P ( callable ) )		50255	12					
ANR	50368	Condition	Z_TYPE_P ( callable )	3202:9:95620:95637	50255	0	True				
ANR	50369	CallExpression	Z_TYPE_P ( callable )		50255	0					
ANR	50370	Callee	Z_TYPE_P		50255	0					
ANR	50371	Identifier	Z_TYPE_P		50255	0					
ANR	50372	ArgumentList	callable		50255	1					
ANR	50373	Argument	callable		50255	0					
ANR	50374	Identifier	callable		50255	0					
ANR	50375	CompoundStatement		28:29:495:495	50255	1					
ANR	50376	Label	case IS_STRING :	3203:2:95644:95658	50255	0	True				
ANR	50377	Identifier	IS_STRING		50255	0					
ANR	50378	IfStatement	if ( object )		50255	1					
ANR	50379	Condition	object	3204:7:95667:95672	50255	0	True				
ANR	50380	Identifier	object		50255	0					
ANR	50381	CompoundStatement		30:15:530:530	50255	1					
ANR	50382	ExpressionStatement	fcc -> object = object	3205:4:95681:95701	50255	0	True				
ANR	50383	AssignmentExpression	fcc -> object = object		50255	0		=			
ANR	50384	PtrMemberAccess	fcc -> object		50255	0					
ANR	50385	Identifier	fcc		50255	0					
ANR	50386	Identifier	object		50255	1					
ANR	50387	Identifier	object		50255	1					
ANR	50388	ExpressionStatement	fcc -> calling_scope = object -> ce	3206:4:95707:95738	50255	1	True				
ANR	50389	AssignmentExpression	fcc -> calling_scope = object -> ce		50255	0		=			
ANR	50390	PtrMemberAccess	fcc -> calling_scope		50255	0					
ANR	50391	Identifier	fcc		50255	0					
ANR	50392	Identifier	calling_scope		50255	1					
ANR	50393	PtrMemberAccess	object -> ce		50255	1					
ANR	50394	Identifier	object		50255	0					
ANR	50395	Identifier	ce		50255	1					
ANR	50396	IfStatement	if ( callable_name )		50255	2					
ANR	50397	Condition	callable_name	3207:8:95748:95760	50255	0	True				
ANR	50398	Identifier	callable_name		50255	0					
ANR	50399	CompoundStatement		34:5:625:634	50255	1					
ANR	50400	IdentifierDeclStatement	char * ptr ;	3208:5:95770:95779	50255	0	True				
ANR	50401	IdentifierDecl	* ptr		50255	0					
ANR	50402	IdentifierDeclType	char *		50255	0					
ANR	50403	Identifier	ptr		50255	1					
ANR	50404	ExpressionStatement	"* callable_name = zend_string_alloc ( ZSTR_LEN ( fcc -> calling_scope -> name ) + Z_STRLEN_P ( callable ) + sizeof ( ""::"" ) - 1 , 0 )"	3210:5:95787:95902	50255	1	True				
ANR	50405	AssignmentExpression	"* callable_name = zend_string_alloc ( ZSTR_LEN ( fcc -> calling_scope -> name ) + Z_STRLEN_P ( callable ) + sizeof ( ""::"" ) - 1 , 0 )"		50255	0		=			
ANR	50406	UnaryOperationExpression	* callable_name		50255	0					
ANR	50407	UnaryOperator	*		50255	0					
ANR	50408	Identifier	callable_name		50255	1					
ANR	50409	CallExpression	"zend_string_alloc ( ZSTR_LEN ( fcc -> calling_scope -> name ) + Z_STRLEN_P ( callable ) + sizeof ( ""::"" ) - 1 , 0 )"		50255	1					
ANR	50410	Callee	zend_string_alloc		50255	0					
ANR	50411	Identifier	zend_string_alloc		50255	0					
ANR	50412	ArgumentList	"ZSTR_LEN ( fcc -> calling_scope -> name ) + Z_STRLEN_P ( callable ) + sizeof ( ""::"" ) - 1"		50255	1					
ANR	50413	Argument	"ZSTR_LEN ( fcc -> calling_scope -> name ) + Z_STRLEN_P ( callable ) + sizeof ( ""::"" ) - 1"		50255	0					
ANR	50414	AdditiveExpression	"ZSTR_LEN ( fcc -> calling_scope -> name ) + Z_STRLEN_P ( callable ) + sizeof ( ""::"" ) - 1"		50255	0		+			
ANR	50415	CallExpression	ZSTR_LEN ( fcc -> calling_scope -> name )		50255	0					
ANR	50416	Callee	ZSTR_LEN		50255	0					
ANR	50417	Identifier	ZSTR_LEN		50255	0					
ANR	50418	ArgumentList	fcc -> calling_scope -> name		50255	1					
ANR	50419	Argument	fcc -> calling_scope -> name		50255	0					
ANR	50420	PtrMemberAccess	fcc -> calling_scope -> name		50255	0					
ANR	50421	PtrMemberAccess	fcc -> calling_scope		50255	0					
ANR	50422	Identifier	fcc		50255	0					
ANR	50423	Identifier	calling_scope		50255	1					
ANR	50424	Identifier	name		50255	1					
ANR	50425	AdditiveExpression	"Z_STRLEN_P ( callable ) + sizeof ( ""::"" ) - 1"		50255	1		+			
ANR	50426	CallExpression	Z_STRLEN_P ( callable )		50255	0					
ANR	50427	Callee	Z_STRLEN_P		50255	0					
ANR	50428	Identifier	Z_STRLEN_P		50255	0					
ANR	50429	ArgumentList	callable		50255	1					
ANR	50430	Argument	callable		50255	0					
ANR	50431	Identifier	callable		50255	0					
ANR	50432	AdditiveExpression	"sizeof ( ""::"" ) - 1"		50255	1		-			
ANR	50433	SizeofExpression	"sizeof ( ""::"" )"		50255	0					
ANR	50434	Sizeof	sizeof		50255	0					
ANR	50435	PrimaryExpression	"""::"""		50255	1					
ANR	50436	PrimaryExpression	1		50255	1					
ANR	50437	Argument	0		50255	1					
ANR	50438	PrimaryExpression	0		50255	0					
ANR	50439	ExpressionStatement	ptr = ZSTR_VAL ( * callable_name )	3211:5:95909:95939	50255	2	True				
ANR	50440	AssignmentExpression	ptr = ZSTR_VAL ( * callable_name )		50255	0		=			
ANR	50441	Identifier	ptr		50255	0					
ANR	50442	CallExpression	ZSTR_VAL ( * callable_name )		50255	1					
ANR	50443	Callee	ZSTR_VAL		50255	0					
ANR	50444	Identifier	ZSTR_VAL		50255	0					
ANR	50445	ArgumentList	* callable_name		50255	1					
ANR	50446	Argument	* callable_name		50255	0					
ANR	50447	UnaryOperationExpression	* callable_name		50255	0					
ANR	50448	UnaryOperator	*		50255	0					
ANR	50449	Identifier	callable_name		50255	1					
ANR	50450	ExpressionStatement	"memcpy ( ptr , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_LEN ( fcc -> calling_scope -> name ) )"	3212:5:95946:96029	50255	3	True				
ANR	50451	CallExpression	"memcpy ( ptr , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_LEN ( fcc -> calling_scope -> name ) )"		50255	0					
ANR	50452	Callee	memcpy		50255	0					
ANR	50453	Identifier	memcpy		50255	0					
ANR	50454	ArgumentList	ptr		50255	1					
ANR	50455	Argument	ptr		50255	0					
ANR	50456	Identifier	ptr		50255	0					
ANR	50457	Argument	ZSTR_VAL ( fcc -> calling_scope -> name )		50255	1					
ANR	50458	CallExpression	ZSTR_VAL ( fcc -> calling_scope -> name )		50255	0					
ANR	50459	Callee	ZSTR_VAL		50255	0					
ANR	50460	Identifier	ZSTR_VAL		50255	0					
ANR	50461	ArgumentList	fcc -> calling_scope -> name		50255	1					
ANR	50462	Argument	fcc -> calling_scope -> name		50255	0					
ANR	50463	PtrMemberAccess	fcc -> calling_scope -> name		50255	0					
ANR	50464	PtrMemberAccess	fcc -> calling_scope		50255	0					
ANR	50465	Identifier	fcc		50255	0					
ANR	50466	Identifier	calling_scope		50255	1					
ANR	50467	Identifier	name		50255	1					
ANR	50468	Argument	ZSTR_LEN ( fcc -> calling_scope -> name )		50255	2					
ANR	50469	CallExpression	ZSTR_LEN ( fcc -> calling_scope -> name )		50255	0					
ANR	50470	Callee	ZSTR_LEN		50255	0					
ANR	50471	Identifier	ZSTR_LEN		50255	0					
ANR	50472	ArgumentList	fcc -> calling_scope -> name		50255	1					
ANR	50473	Argument	fcc -> calling_scope -> name		50255	0					
ANR	50474	PtrMemberAccess	fcc -> calling_scope -> name		50255	0					
ANR	50475	PtrMemberAccess	fcc -> calling_scope		50255	0					
ANR	50476	Identifier	fcc		50255	0					
ANR	50477	Identifier	calling_scope		50255	1					
ANR	50478	Identifier	name		50255	1					
ANR	50479	ExpressionStatement	ptr += ZSTR_LEN ( fcc -> calling_scope -> name )	3213:5:96036:96077	50255	4	True				
ANR	50480	AssignmentExpression	ptr += ZSTR_LEN ( fcc -> calling_scope -> name )		50255	0		+=			
ANR	50481	Identifier	ptr		50255	0					
ANR	50482	CallExpression	ZSTR_LEN ( fcc -> calling_scope -> name )		50255	1					
ANR	50483	Callee	ZSTR_LEN		50255	0					
ANR	50484	Identifier	ZSTR_LEN		50255	0					
ANR	50485	ArgumentList	fcc -> calling_scope -> name		50255	1					
ANR	50486	Argument	fcc -> calling_scope -> name		50255	0					
ANR	50487	PtrMemberAccess	fcc -> calling_scope -> name		50255	0					
ANR	50488	PtrMemberAccess	fcc -> calling_scope		50255	0					
ANR	50489	Identifier	fcc		50255	0					
ANR	50490	Identifier	calling_scope		50255	1					
ANR	50491	Identifier	name		50255	1					
ANR	50492	ExpressionStatement	"memcpy ( ptr , ""::"" , sizeof ( ""::"" ) - 1 )"	3214:5:96084:96119	50255	5	True				
ANR	50493	CallExpression	"memcpy ( ptr , ""::"" , sizeof ( ""::"" ) - 1 )"		50255	0					
ANR	50494	Callee	memcpy		50255	0					
ANR	50495	Identifier	memcpy		50255	0					
ANR	50496	ArgumentList	ptr		50255	1					
ANR	50497	Argument	ptr		50255	0					
ANR	50498	Identifier	ptr		50255	0					
ANR	50499	Argument	"""::"""		50255	1					
ANR	50500	PrimaryExpression	"""::"""		50255	0					
ANR	50501	Argument	"sizeof ( ""::"" ) - 1"		50255	2					
ANR	50502	AdditiveExpression	"sizeof ( ""::"" ) - 1"		50255	0		-			
ANR	50503	SizeofExpression	"sizeof ( ""::"" )"		50255	0					
ANR	50504	Sizeof	sizeof		50255	0					
ANR	50505	PrimaryExpression	"""::"""		50255	1					
ANR	50506	PrimaryExpression	1		50255	1					
ANR	50507	ExpressionStatement	"ptr += sizeof ( ""::"" ) - 1"	3215:5:96126:96149	50255	6	True				
ANR	50508	AssignmentExpression	"ptr += sizeof ( ""::"" ) - 1"		50255	0		+=			
ANR	50509	Identifier	ptr		50255	0					
ANR	50510	AdditiveExpression	"sizeof ( ""::"" ) - 1"		50255	1		-			
ANR	50511	SizeofExpression	"sizeof ( ""::"" )"		50255	0					
ANR	50512	Sizeof	sizeof		50255	0					
ANR	50513	PrimaryExpression	"""::"""		50255	1					
ANR	50514	PrimaryExpression	1		50255	1					
ANR	50515	ExpressionStatement	"memcpy ( ptr , Z_STRVAL_P ( callable ) , Z_STRLEN_P ( callable ) + 1 )"	3216:5:96156:96215	50255	7	True				
ANR	50516	CallExpression	"memcpy ( ptr , Z_STRVAL_P ( callable ) , Z_STRLEN_P ( callable ) + 1 )"		50255	0					
ANR	50517	Callee	memcpy		50255	0					
ANR	50518	Identifier	memcpy		50255	0					
ANR	50519	ArgumentList	ptr		50255	1					
ANR	50520	Argument	ptr		50255	0					
ANR	50521	Identifier	ptr		50255	0					
ANR	50522	Argument	Z_STRVAL_P ( callable )		50255	1					
ANR	50523	CallExpression	Z_STRVAL_P ( callable )		50255	0					
ANR	50524	Callee	Z_STRVAL_P		50255	0					
ANR	50525	Identifier	Z_STRVAL_P		50255	0					
ANR	50526	ArgumentList	callable		50255	1					
ANR	50527	Argument	callable		50255	0					
ANR	50528	Identifier	callable		50255	0					
ANR	50529	Argument	Z_STRLEN_P ( callable ) + 1		50255	2					
ANR	50530	AdditiveExpression	Z_STRLEN_P ( callable ) + 1		50255	0		+			
ANR	50531	CallExpression	Z_STRLEN_P ( callable )		50255	0					
ANR	50532	Callee	Z_STRLEN_P		50255	0					
ANR	50533	Identifier	Z_STRLEN_P		50255	0					
ANR	50534	ArgumentList	callable		50255	1					
ANR	50535	Argument	callable		50255	0					
ANR	50536	Identifier	callable		50255	0					
ANR	50537	PrimaryExpression	1		50255	1					
ANR	50538	ElseStatement	else		50255	0					
ANR	50539	IfStatement	if ( callable_name )		50255	0					
ANR	50540	Condition	callable_name	3218:14:96237:96249	50255	0	True				
ANR	50541	Identifier	callable_name		50255	0					
ANR	50542	CompoundStatement		44:29:1107:1107	50255	1					
ANR	50543	ExpressionStatement	* callable_name = zend_string_copy ( Z_STR_P ( callable ) )	3219:4:96258:96310	50255	0	True				
ANR	50544	AssignmentExpression	* callable_name = zend_string_copy ( Z_STR_P ( callable ) )		50255	0		=			
ANR	50545	UnaryOperationExpression	* callable_name		50255	0					
ANR	50546	UnaryOperator	*		50255	0					
ANR	50547	Identifier	callable_name		50255	1					
ANR	50548	CallExpression	zend_string_copy ( Z_STR_P ( callable ) )		50255	1					
ANR	50549	Callee	zend_string_copy		50255	0					
ANR	50550	Identifier	zend_string_copy		50255	0					
ANR	50551	ArgumentList	Z_STR_P ( callable )		50255	1					
ANR	50552	Argument	Z_STR_P ( callable )		50255	0					
ANR	50553	CallExpression	Z_STR_P ( callable )		50255	0					
ANR	50554	Callee	Z_STR_P		50255	0					
ANR	50555	Identifier	Z_STR_P		50255	0					
ANR	50556	ArgumentList	callable		50255	1					
ANR	50557	Argument	callable		50255	0					
ANR	50558	Identifier	callable		50255	0					
ANR	50559	IfStatement	if ( check_flags & IS_CALLABLE_CHECK_SYNTAX_ONLY )		50255	2					
ANR	50560	Condition	check_flags & IS_CALLABLE_CHECK_SYNTAX_ONLY	3221:7:96324:96366	50255	0	True				
ANR	50561	BitAndExpression	check_flags & IS_CALLABLE_CHECK_SYNTAX_ONLY		50255	0		&			
ANR	50562	Identifier	check_flags		50255	0					
ANR	50563	Identifier	IS_CALLABLE_CHECK_SYNTAX_ONLY		50255	1					
ANR	50564	CompoundStatement		47:52:1224:1224	50255	1					
ANR	50565	ExpressionStatement	fcc -> called_scope = fcc -> calling_scope	3222:4:96375:96413	50255	0	True				
ANR	50566	AssignmentExpression	fcc -> called_scope = fcc -> calling_scope		50255	0		=			
ANR	50567	PtrMemberAccess	fcc -> called_scope		50255	0					
ANR	50568	Identifier	fcc		50255	0					
ANR	50569	Identifier	called_scope		50255	1					
ANR	50570	PtrMemberAccess	fcc -> calling_scope		50255	1					
ANR	50571	Identifier	fcc		50255	0					
ANR	50572	Identifier	calling_scope		50255	1					
ANR	50573	ReturnStatement	return 1 ;	3223:4:96419:96427	50255	1	True				
ANR	50574	PrimaryExpression	1		50255	0					
ANR	50575	ExpressionStatement	"ret = zend_is_callable_check_func ( check_flags , callable , fcc , 0 , error )"	3226:3:96438:96509	50255	3	True				
ANR	50576	AssignmentExpression	"ret = zend_is_callable_check_func ( check_flags , callable , fcc , 0 , error )"		50255	0		=			
ANR	50577	Identifier	ret		50255	0					
ANR	50578	CallExpression	"zend_is_callable_check_func ( check_flags , callable , fcc , 0 , error )"		50255	1					
ANR	50579	Callee	zend_is_callable_check_func		50255	0					
ANR	50580	Identifier	zend_is_callable_check_func		50255	0					
ANR	50581	ArgumentList	check_flags		50255	1					
ANR	50582	Argument	check_flags		50255	0					
ANR	50583	Identifier	check_flags		50255	0					
ANR	50584	Argument	callable		50255	1					
ANR	50585	Identifier	callable		50255	0					
ANR	50586	Argument	fcc		50255	2					
ANR	50587	Identifier	fcc		50255	0					
ANR	50588	Argument	0		50255	3					
ANR	50589	PrimaryExpression	0		50255	0					
ANR	50590	Argument	error		50255	4					
ANR	50591	Identifier	error		50255	0					
ANR	50592	IfStatement	if ( fcc == & fcc_local && fcc -> function_handler && ( ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION ) )		50255	4					
ANR	50593	Condition	fcc == & fcc_local && fcc -> function_handler && ( ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION )	3227:7:96518:96791	50255	0	True				
ANR	50594	AndExpression	fcc == & fcc_local && fcc -> function_handler && ( ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION )		50255	0		&&			
ANR	50595	EqualityExpression	fcc == & fcc_local		50255	0		==			
ANR	50596	Identifier	fcc		50255	0					
ANR	50597	UnaryOperationExpression	& fcc_local		50255	1					
ANR	50598	UnaryOperator	&		50255	0					
ANR	50599	Identifier	fcc_local		50255	1					
ANR	50600	AndExpression	fcc -> function_handler && ( ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION )		50255	1		&&			
ANR	50601	PtrMemberAccess	fcc -> function_handler		50255	0					
ANR	50602	Identifier	fcc		50255	0					
ANR	50603	Identifier	function_handler		50255	1					
ANR	50604	OrExpression	( fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION		50255	1		||			
ANR	50605	BitAndExpression	fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE		50255	0		&			
ANR	50606	MemberAccess	fcc -> function_handler -> common . fn_flags		50255	0					
ANR	50607	PtrMemberAccess	fcc -> function_handler -> common		50255	0					
ANR	50608	PtrMemberAccess	fcc -> function_handler		50255	0					
ANR	50609	Identifier	fcc		50255	0					
ANR	50610	Identifier	function_handler		50255	1					
ANR	50611	Identifier	common		50255	1					
ANR	50612	Identifier	fn_flags		50255	1					
ANR	50613	Identifier	ZEND_ACC_CALL_VIA_TRAMPOLINE		50255	1					
ANR	50614	OrExpression	fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION		50255	1		||			
ANR	50615	EqualityExpression	fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY		50255	0		==			
ANR	50616	PtrMemberAccess	fcc -> function_handler -> type		50255	0					
ANR	50617	PtrMemberAccess	fcc -> function_handler		50255	0					
ANR	50618	Identifier	fcc		50255	0					
ANR	50619	Identifier	function_handler		50255	1					
ANR	50620	Identifier	type		50255	1					
ANR	50621	Identifier	ZEND_OVERLOADED_FUNCTION_TEMPORARY		50255	1					
ANR	50622	EqualityExpression	fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION		50255	1		==			
ANR	50623	PtrMemberAccess	fcc -> function_handler -> type		50255	0					
ANR	50624	PtrMemberAccess	fcc -> function_handler		50255	0					
ANR	50625	Identifier	fcc		50255	0					
ANR	50626	Identifier	function_handler		50255	1					
ANR	50627	Identifier	type		50255	1					
ANR	50628	Identifier	ZEND_OVERLOADED_FUNCTION		50255	1					
ANR	50629	CompoundStatement		57:66:1649:1649	50255	1					
ANR	50630	IfStatement	if ( fcc -> function_handler -> type != ZEND_OVERLOADED_FUNCTION )		50255	0					
ANR	50631	Condition	fcc -> function_handler -> type != ZEND_OVERLOADED_FUNCTION	3232:8:96804:96858	50255	0	True				
ANR	50632	EqualityExpression	fcc -> function_handler -> type != ZEND_OVERLOADED_FUNCTION		50255	0		!=			
ANR	50633	PtrMemberAccess	fcc -> function_handler -> type		50255	0					
ANR	50634	PtrMemberAccess	fcc -> function_handler		50255	0					
ANR	50635	Identifier	fcc		50255	0					
ANR	50636	Identifier	function_handler		50255	1					
ANR	50637	Identifier	type		50255	1					
ANR	50638	Identifier	ZEND_OVERLOADED_FUNCTION		50255	1					
ANR	50639	CompoundStatement		58:65:1716:1716	50255	1					
ANR	50640	ExpressionStatement	zend_string_release ( fcc -> function_handler -> common . function_name )	3233:5:96868:96932	50255	0	True				
ANR	50641	CallExpression	zend_string_release ( fcc -> function_handler -> common . function_name )		50255	0					
ANR	50642	Callee	zend_string_release		50255	0					
ANR	50643	Identifier	zend_string_release		50255	0					
ANR	50644	ArgumentList	fcc -> function_handler -> common . function_name		50255	1					
ANR	50645	Argument	fcc -> function_handler -> common . function_name		50255	0					
ANR	50646	MemberAccess	fcc -> function_handler -> common . function_name		50255	0					
ANR	50647	PtrMemberAccess	fcc -> function_handler -> common		50255	0					
ANR	50648	PtrMemberAccess	fcc -> function_handler		50255	0					
ANR	50649	Identifier	fcc		50255	0					
ANR	50650	Identifier	function_handler		50255	1					
ANR	50651	Identifier	common		50255	1					
ANR	50652	Identifier	function_name		50255	1					
ANR	50653	ExpressionStatement	zend_free_trampoline ( fcc -> function_handler )	3235:4:96944:96987	50255	1	True				
ANR	50654	CallExpression	zend_free_trampoline ( fcc -> function_handler )		50255	0					
ANR	50655	Callee	zend_free_trampoline		50255	0					
ANR	50656	Identifier	zend_free_trampoline		50255	0					
ANR	50657	ArgumentList	fcc -> function_handler		50255	1					
ANR	50658	Argument	fcc -> function_handler		50255	0					
ANR	50659	PtrMemberAccess	fcc -> function_handler		50255	0					
ANR	50660	Identifier	fcc		50255	0					
ANR	50661	Identifier	function_handler		50255	1					
ANR	50662	ReturnStatement	return ret ;	3237:3:96997:97007	50255	5	True				
ANR	50663	Identifier	ret		50255	0					
ANR	50664	Label	case IS_ARRAY :	3239:2:97012:97025	50255	6	True				
ANR	50665	Identifier	IS_ARRAY		50255	0					
ANR	50666	CompoundStatement		69:4:1938:1958	50255	7					
ANR	50667	IdentifierDeclStatement	zval * method = NULL ;	3241:4:97036:97055	50255	0	True				
ANR	50668	IdentifierDecl	* method = NULL		50255	0					
ANR	50669	IdentifierDeclType	zval *		50255	0					
ANR	50670	Identifier	method		50255	1					
ANR	50671	AssignmentExpression	* method = NULL		50255	2		=			
ANR	50672	Identifier	NULL		50255	0					
ANR	50673	Identifier	NULL		50255	1					
ANR	50674	IdentifierDeclStatement	zval * obj = NULL ;	3242:4:97061:97077	50255	1	True				
ANR	50675	IdentifierDecl	* obj = NULL		50255	0					
ANR	50676	IdentifierDeclType	zval *		50255	0					
ANR	50677	Identifier	obj		50255	1					
ANR	50678	AssignmentExpression	* obj = NULL		50255	2		=			
ANR	50679	Identifier	NULL		50255	0					
ANR	50680	Identifier	NULL		50255	1					
ANR	50681	IdentifierDeclStatement	int strict_class = 0 ;	3243:4:97083:97103	50255	2	True				
ANR	50682	IdentifierDecl	strict_class = 0		50255	0					
ANR	50683	IdentifierDeclType	int		50255	0					
ANR	50684	Identifier	strict_class		50255	1					
ANR	50685	AssignmentExpression	strict_class = 0		50255	2		=			
ANR	50686	Identifier	strict_class		50255	0					
ANR	50687	PrimaryExpression	0		50255	1					
ANR	50688	IfStatement	if ( zend_hash_num_elements ( Z_ARRVAL_P ( callable ) ) == 2 )		50255	3					
ANR	50689	Condition	zend_hash_num_elements ( Z_ARRVAL_P ( callable ) ) == 2	3245:8:97114:97162	50255	0	True				
ANR	50690	EqualityExpression	zend_hash_num_elements ( Z_ARRVAL_P ( callable ) ) == 2		50255	0		==			
ANR	50691	CallExpression	zend_hash_num_elements ( Z_ARRVAL_P ( callable ) )		50255	0					
ANR	50692	Callee	zend_hash_num_elements		50255	0					
ANR	50693	Identifier	zend_hash_num_elements		50255	0					
ANR	50694	ArgumentList	Z_ARRVAL_P ( callable )		50255	1					
ANR	50695	Argument	Z_ARRVAL_P ( callable )		50255	0					
ANR	50696	CallExpression	Z_ARRVAL_P ( callable )		50255	0					
ANR	50697	Callee	Z_ARRVAL_P		50255	0					
ANR	50698	Identifier	Z_ARRVAL_P		50255	0					
ANR	50699	ArgumentList	callable		50255	1					
ANR	50700	Argument	callable		50255	0					
ANR	50701	Identifier	callable		50255	0					
ANR	50702	PrimaryExpression	2		50255	1					
ANR	50703	CompoundStatement		71:59:2020:2020	50255	1					
ANR	50704	ExpressionStatement	"obj = zend_hash_index_find ( Z_ARRVAL_P ( callable ) , 0 )"	3246:5:97172:97223	50255	0	True				
ANR	50705	AssignmentExpression	"obj = zend_hash_index_find ( Z_ARRVAL_P ( callable ) , 0 )"		50255	0		=			
ANR	50706	Identifier	obj		50255	0					
ANR	50707	CallExpression	"zend_hash_index_find ( Z_ARRVAL_P ( callable ) , 0 )"		50255	1					
ANR	50708	Callee	zend_hash_index_find		50255	0					
ANR	50709	Identifier	zend_hash_index_find		50255	0					
ANR	50710	ArgumentList	Z_ARRVAL_P ( callable )		50255	1					
ANR	50711	Argument	Z_ARRVAL_P ( callable )		50255	0					
ANR	50712	CallExpression	Z_ARRVAL_P ( callable )		50255	0					
ANR	50713	Callee	Z_ARRVAL_P		50255	0					
ANR	50714	Identifier	Z_ARRVAL_P		50255	0					
ANR	50715	ArgumentList	callable		50255	1					
ANR	50716	Argument	callable		50255	0					
ANR	50717	Identifier	callable		50255	0					
ANR	50718	Argument	0		50255	1					
ANR	50719	PrimaryExpression	0		50255	0					
ANR	50720	ExpressionStatement	"method = zend_hash_index_find ( Z_ARRVAL_P ( callable ) , 1 )"	3247:5:97230:97284	50255	1	True				
ANR	50721	AssignmentExpression	"method = zend_hash_index_find ( Z_ARRVAL_P ( callable ) , 1 )"		50255	0		=			
ANR	50722	Identifier	method		50255	0					
ANR	50723	CallExpression	"zend_hash_index_find ( Z_ARRVAL_P ( callable ) , 1 )"		50255	1					
ANR	50724	Callee	zend_hash_index_find		50255	0					
ANR	50725	Identifier	zend_hash_index_find		50255	0					
ANR	50726	ArgumentList	Z_ARRVAL_P ( callable )		50255	1					
ANR	50727	Argument	Z_ARRVAL_P ( callable )		50255	0					
ANR	50728	CallExpression	Z_ARRVAL_P ( callable )		50255	0					
ANR	50729	Callee	Z_ARRVAL_P		50255	0					
ANR	50730	Identifier	Z_ARRVAL_P		50255	0					
ANR	50731	ArgumentList	callable		50255	1					
ANR	50732	Argument	callable		50255	0					
ANR	50733	Identifier	callable		50255	0					
ANR	50734	Argument	1		50255	1					
ANR	50735	PrimaryExpression	1		50255	0					
ANR	50736	DoStatement	do		50255	4					
ANR	50737	CompoundStatement		76:7:2155:2155	50255	0					
ANR	50738	IfStatement	if ( obj == NULL || method == NULL )		50255	0					
ANR	50739	Condition	obj == NULL || method == NULL	3251:9:97311:97339	50255	0	True				
ANR	50740	OrExpression	obj == NULL || method == NULL		50255	0		||			
ANR	50741	EqualityExpression	obj == NULL		50255	0		==			
ANR	50742	Identifier	obj		50255	0					
ANR	50743	Identifier	NULL		50255	1					
ANR	50744	EqualityExpression	method == NULL		50255	1		==			
ANR	50745	Identifier	method		50255	0					
ANR	50746	Identifier	NULL		50255	1					
ANR	50747	CompoundStatement		77:40:2197:2197	50255	1					
ANR	50748	BreakStatement	break ;	3252:6:97350:97355	50255	0	True				
ANR	50749	ExpressionStatement	ZVAL_DEREF ( method )	3255:5:97370:97388	50255	1	True				
ANR	50750	CallExpression	ZVAL_DEREF ( method )		50255	0					
ANR	50751	Callee	ZVAL_DEREF		50255	0					
ANR	50752	Identifier	ZVAL_DEREF		50255	0					
ANR	50753	ArgumentList	method		50255	1					
ANR	50754	Argument	method		50255	0					
ANR	50755	Identifier	method		50255	0					
ANR	50756	IfStatement	if ( Z_TYPE_P ( method ) != IS_STRING )		50255	2					
ANR	50757	Condition	Z_TYPE_P ( method ) != IS_STRING	3256:9:97399:97427	50255	0	True				
ANR	50758	EqualityExpression	Z_TYPE_P ( method ) != IS_STRING		50255	0		!=			
ANR	50759	CallExpression	Z_TYPE_P ( method )		50255	0					
ANR	50760	Callee	Z_TYPE_P		50255	0					
ANR	50761	Identifier	Z_TYPE_P		50255	0					
ANR	50762	ArgumentList	method		50255	1					
ANR	50763	Argument	method		50255	0					
ANR	50764	Identifier	method		50255	0					
ANR	50765	Identifier	IS_STRING		50255	1					
ANR	50766	CompoundStatement		82:40:2285:2285	50255	1					
ANR	50767	BreakStatement	break ;	3257:6:97438:97443	50255	0	True				
ANR	50768	ExpressionStatement	ZVAL_DEREF ( obj )	3260:5:97458:97473	50255	3	True				
ANR	50769	CallExpression	ZVAL_DEREF ( obj )		50255	0					
ANR	50770	Callee	ZVAL_DEREF		50255	0					
ANR	50771	Identifier	ZVAL_DEREF		50255	0					
ANR	50772	ArgumentList	obj		50255	1					
ANR	50773	Argument	obj		50255	0					
ANR	50774	Identifier	obj		50255	0					
ANR	50775	IfStatement	if ( Z_TYPE_P ( obj ) == IS_STRING )		50255	4					
ANR	50776	Condition	Z_TYPE_P ( obj ) == IS_STRING	3261:9:97484:97509	50255	0	True				
ANR	50777	EqualityExpression	Z_TYPE_P ( obj ) == IS_STRING		50255	0		==			
ANR	50778	CallExpression	Z_TYPE_P ( obj )		50255	0					
ANR	50779	Callee	Z_TYPE_P		50255	0					
ANR	50780	Identifier	Z_TYPE_P		50255	0					
ANR	50781	ArgumentList	obj		50255	1					
ANR	50782	Argument	obj		50255	0					
ANR	50783	Identifier	obj		50255	0					
ANR	50784	Identifier	IS_STRING		50255	1					
ANR	50785	CompoundStatement		87:37:2367:2367	50255	1					
ANR	50786	IfStatement	if ( callable_name )		50255	0					
ANR	50787	Condition	callable_name	3262:10:97524:97536	50255	0	True				
ANR	50788	Identifier	callable_name		50255	0					
ANR	50789	CompoundStatement		89:7:2403:2412	50255	1					
ANR	50790	IdentifierDeclStatement	char * ptr ;	3263:7:97548:97557	50255	0	True				
ANR	50791	IdentifierDecl	* ptr		50255	0					
ANR	50792	IdentifierDeclType	char *		50255	0					
ANR	50793	Identifier	ptr		50255	1					
ANR	50794	ExpressionStatement	"* callable_name = zend_string_alloc ( Z_STRLEN_P ( obj ) + Z_STRLEN_P ( method ) + sizeof ( ""::"" ) - 1 , 0 )"	3266:7:97568:97662	50255	1	True				
ANR	50795	AssignmentExpression	"* callable_name = zend_string_alloc ( Z_STRLEN_P ( obj ) + Z_STRLEN_P ( method ) + sizeof ( ""::"" ) - 1 , 0 )"		50255	0		=			
ANR	50796	UnaryOperationExpression	* callable_name		50255	0					
ANR	50797	UnaryOperator	*		50255	0					
ANR	50798	Identifier	callable_name		50255	1					
ANR	50799	CallExpression	"zend_string_alloc ( Z_STRLEN_P ( obj ) + Z_STRLEN_P ( method ) + sizeof ( ""::"" ) - 1 , 0 )"		50255	1					
ANR	50800	Callee	zend_string_alloc		50255	0					
ANR	50801	Identifier	zend_string_alloc		50255	0					
ANR	50802	ArgumentList	"Z_STRLEN_P ( obj ) + Z_STRLEN_P ( method ) + sizeof ( ""::"" ) - 1"		50255	1					
ANR	50803	Argument	"Z_STRLEN_P ( obj ) + Z_STRLEN_P ( method ) + sizeof ( ""::"" ) - 1"		50255	0					
ANR	50804	AdditiveExpression	"Z_STRLEN_P ( obj ) + Z_STRLEN_P ( method ) + sizeof ( ""::"" ) - 1"		50255	0		+			
ANR	50805	CallExpression	Z_STRLEN_P ( obj )		50255	0					
ANR	50806	Callee	Z_STRLEN_P		50255	0					
ANR	50807	Identifier	Z_STRLEN_P		50255	0					
ANR	50808	ArgumentList	obj		50255	1					
ANR	50809	Argument	obj		50255	0					
ANR	50810	Identifier	obj		50255	0					
ANR	50811	AdditiveExpression	"Z_STRLEN_P ( method ) + sizeof ( ""::"" ) - 1"		50255	1		+			
ANR	50812	CallExpression	Z_STRLEN_P ( method )		50255	0					
ANR	50813	Callee	Z_STRLEN_P		50255	0					
ANR	50814	Identifier	Z_STRLEN_P		50255	0					
ANR	50815	ArgumentList	method		50255	1					
ANR	50816	Argument	method		50255	0					
ANR	50817	Identifier	method		50255	0					
ANR	50818	AdditiveExpression	"sizeof ( ""::"" ) - 1"		50255	1		-			
ANR	50819	SizeofExpression	"sizeof ( ""::"" )"		50255	0					
ANR	50820	Sizeof	sizeof		50255	0					
ANR	50821	PrimaryExpression	"""::"""		50255	1					
ANR	50822	PrimaryExpression	1		50255	1					
ANR	50823	Argument	0		50255	1					
ANR	50824	PrimaryExpression	0		50255	0					
ANR	50825	ExpressionStatement	ptr = ZSTR_VAL ( * callable_name )	3267:7:97671:97701	50255	2	True				
ANR	50826	AssignmentExpression	ptr = ZSTR_VAL ( * callable_name )		50255	0		=			
ANR	50827	Identifier	ptr		50255	0					
ANR	50828	CallExpression	ZSTR_VAL ( * callable_name )		50255	1					
ANR	50829	Callee	ZSTR_VAL		50255	0					
ANR	50830	Identifier	ZSTR_VAL		50255	0					
ANR	50831	ArgumentList	* callable_name		50255	1					
ANR	50832	Argument	* callable_name		50255	0					
ANR	50833	UnaryOperationExpression	* callable_name		50255	0					
ANR	50834	UnaryOperator	*		50255	0					
ANR	50835	Identifier	callable_name		50255	1					
ANR	50836	ExpressionStatement	"memcpy ( ptr , Z_STRVAL_P ( obj ) , Z_STRLEN_P ( obj ) )"	3268:7:97710:97755	50255	3	True				
ANR	50837	CallExpression	"memcpy ( ptr , Z_STRVAL_P ( obj ) , Z_STRLEN_P ( obj ) )"		50255	0					
ANR	50838	Callee	memcpy		50255	0					
ANR	50839	Identifier	memcpy		50255	0					
ANR	50840	ArgumentList	ptr		50255	1					
ANR	50841	Argument	ptr		50255	0					
ANR	50842	Identifier	ptr		50255	0					
ANR	50843	Argument	Z_STRVAL_P ( obj )		50255	1					
ANR	50844	CallExpression	Z_STRVAL_P ( obj )		50255	0					
ANR	50845	Callee	Z_STRVAL_P		50255	0					
ANR	50846	Identifier	Z_STRVAL_P		50255	0					
ANR	50847	ArgumentList	obj		50255	1					
ANR	50848	Argument	obj		50255	0					
ANR	50849	Identifier	obj		50255	0					
ANR	50850	Argument	Z_STRLEN_P ( obj )		50255	2					
ANR	50851	CallExpression	Z_STRLEN_P ( obj )		50255	0					
ANR	50852	Callee	Z_STRLEN_P		50255	0					
ANR	50853	Identifier	Z_STRLEN_P		50255	0					
ANR	50854	ArgumentList	obj		50255	1					
ANR	50855	Argument	obj		50255	0					
ANR	50856	Identifier	obj		50255	0					
ANR	50857	ExpressionStatement	ptr += Z_STRLEN_P ( obj )	3269:7:97764:97786	50255	4	True				
ANR	50858	AssignmentExpression	ptr += Z_STRLEN_P ( obj )		50255	0		+=			
ANR	50859	Identifier	ptr		50255	0					
ANR	50860	CallExpression	Z_STRLEN_P ( obj )		50255	1					
ANR	50861	Callee	Z_STRLEN_P		50255	0					
ANR	50862	Identifier	Z_STRLEN_P		50255	0					
ANR	50863	ArgumentList	obj		50255	1					
ANR	50864	Argument	obj		50255	0					
ANR	50865	Identifier	obj		50255	0					
ANR	50866	ExpressionStatement	"memcpy ( ptr , ""::"" , sizeof ( ""::"" ) - 1 )"	3270:7:97795:97830	50255	5	True				
ANR	50867	CallExpression	"memcpy ( ptr , ""::"" , sizeof ( ""::"" ) - 1 )"		50255	0					
ANR	50868	Callee	memcpy		50255	0					
ANR	50869	Identifier	memcpy		50255	0					
ANR	50870	ArgumentList	ptr		50255	1					
ANR	50871	Argument	ptr		50255	0					
ANR	50872	Identifier	ptr		50255	0					
ANR	50873	Argument	"""::"""		50255	1					
ANR	50874	PrimaryExpression	"""::"""		50255	0					
ANR	50875	Argument	"sizeof ( ""::"" ) - 1"		50255	2					
ANR	50876	AdditiveExpression	"sizeof ( ""::"" ) - 1"		50255	0		-			
ANR	50877	SizeofExpression	"sizeof ( ""::"" )"		50255	0					
ANR	50878	Sizeof	sizeof		50255	0					
ANR	50879	PrimaryExpression	"""::"""		50255	1					
ANR	50880	PrimaryExpression	1		50255	1					
ANR	50881	ExpressionStatement	"ptr += sizeof ( ""::"" ) - 1"	3271:7:97839:97862	50255	6	True				
ANR	50882	AssignmentExpression	"ptr += sizeof ( ""::"" ) - 1"		50255	0		+=			
ANR	50883	Identifier	ptr		50255	0					
ANR	50884	AdditiveExpression	"sizeof ( ""::"" ) - 1"		50255	1		-			
ANR	50885	SizeofExpression	"sizeof ( ""::"" )"		50255	0					
ANR	50886	Sizeof	sizeof		50255	0					
ANR	50887	PrimaryExpression	"""::"""		50255	1					
ANR	50888	PrimaryExpression	1		50255	1					
ANR	50889	ExpressionStatement	"memcpy ( ptr , Z_STRVAL_P ( method ) , Z_STRLEN_P ( method ) + 1 )"	3272:7:97871:97926	50255	7	True				
ANR	50890	CallExpression	"memcpy ( ptr , Z_STRVAL_P ( method ) , Z_STRLEN_P ( method ) + 1 )"		50255	0					
ANR	50891	Callee	memcpy		50255	0					
ANR	50892	Identifier	memcpy		50255	0					
ANR	50893	ArgumentList	ptr		50255	1					
ANR	50894	Argument	ptr		50255	0					
ANR	50895	Identifier	ptr		50255	0					
ANR	50896	Argument	Z_STRVAL_P ( method )		50255	1					
ANR	50897	CallExpression	Z_STRVAL_P ( method )		50255	0					
ANR	50898	Callee	Z_STRVAL_P		50255	0					
ANR	50899	Identifier	Z_STRVAL_P		50255	0					
ANR	50900	ArgumentList	method		50255	1					
ANR	50901	Argument	method		50255	0					
ANR	50902	Identifier	method		50255	0					
ANR	50903	Argument	Z_STRLEN_P ( method ) + 1		50255	2					
ANR	50904	AdditiveExpression	Z_STRLEN_P ( method ) + 1		50255	0		+			
ANR	50905	CallExpression	Z_STRLEN_P ( method )		50255	0					
ANR	50906	Callee	Z_STRLEN_P		50255	0					
ANR	50907	Identifier	Z_STRLEN_P		50255	0					
ANR	50908	ArgumentList	method		50255	1					
ANR	50909	Argument	method		50255	0					
ANR	50910	Identifier	method		50255	0					
ANR	50911	PrimaryExpression	1		50255	1					
ANR	50912	IfStatement	if ( check_flags & IS_CALLABLE_CHECK_SYNTAX_ONLY )		50255	1					
ANR	50913	Condition	check_flags & IS_CALLABLE_CHECK_SYNTAX_ONLY	3275:10:97947:97989	50255	0	True				
ANR	50914	BitAndExpression	check_flags & IS_CALLABLE_CHECK_SYNTAX_ONLY		50255	0		&			
ANR	50915	Identifier	check_flags		50255	0					
ANR	50916	Identifier	IS_CALLABLE_CHECK_SYNTAX_ONLY		50255	1					
ANR	50917	CompoundStatement		101:55:2847:2847	50255	1					
ANR	50918	ReturnStatement	return 1 ;	3276:7:98001:98009	50255	0	True				
ANR	50919	PrimaryExpression	1		50255	0					
ANR	50920	IfStatement	"if ( ! zend_is_callable_check_class ( Z_STR_P ( obj ) , fcc , & strict_class , error ) )"		50255	2					
ANR	50921	Condition	"! zend_is_callable_check_class ( Z_STR_P ( obj ) , fcc , & strict_class , error )"	3279:10:98030:98099	50255	0	True				
ANR	50922	UnaryOperationExpression	"! zend_is_callable_check_class ( Z_STR_P ( obj ) , fcc , & strict_class , error )"		50255	0					
ANR	50923	UnaryOperator	!		50255	0					
ANR	50924	CallExpression	"zend_is_callable_check_class ( Z_STR_P ( obj ) , fcc , & strict_class , error )"		50255	1					
ANR	50925	Callee	zend_is_callable_check_class		50255	0					
ANR	50926	Identifier	zend_is_callable_check_class		50255	0					
ANR	50927	ArgumentList	Z_STR_P ( obj )		50255	1					
ANR	50928	Argument	Z_STR_P ( obj )		50255	0					
ANR	50929	CallExpression	Z_STR_P ( obj )		50255	0					
ANR	50930	Callee	Z_STR_P		50255	0					
ANR	50931	Identifier	Z_STR_P		50255	0					
ANR	50932	ArgumentList	obj		50255	1					
ANR	50933	Argument	obj		50255	0					
ANR	50934	Identifier	obj		50255	0					
ANR	50935	Argument	fcc		50255	1					
ANR	50936	Identifier	fcc		50255	0					
ANR	50937	Argument	& strict_class		50255	2					
ANR	50938	UnaryOperationExpression	& strict_class		50255	0					
ANR	50939	UnaryOperator	&		50255	0					
ANR	50940	Identifier	strict_class		50255	1					
ANR	50941	Argument	error		50255	3					
ANR	50942	Identifier	error		50255	0					
ANR	50943	CompoundStatement		105:82:2957:2957	50255	1					
ANR	50944	ReturnStatement	return 0 ;	3280:7:98111:98119	50255	0	True				
ANR	50945	PrimaryExpression	0		50255	0					
ANR	50946	ElseStatement	else		50255	0					
ANR	50947	IfStatement	if ( Z_TYPE_P ( obj ) == IS_OBJECT )		50255	0					
ANR	50948	Condition	Z_TYPE_P ( obj ) == IS_OBJECT	3283:16:98146:98171	50255	0	True				
ANR	50949	EqualityExpression	Z_TYPE_P ( obj ) == IS_OBJECT		50255	0		==			
ANR	50950	CallExpression	Z_TYPE_P ( obj )		50255	0					
ANR	50951	Callee	Z_TYPE_P		50255	0					
ANR	50952	Identifier	Z_TYPE_P		50255	0					
ANR	50953	ArgumentList	obj		50255	1					
ANR	50954	Argument	obj		50255	0					
ANR	50955	Identifier	obj		50255	0					
ANR	50956	Identifier	IS_OBJECT		50255	1					
ANR	50957	CompoundStatement		109:44:3029:3029	50255	1					
ANR	50958	IfStatement	if ( ! EG ( objects_store ) . object_buckets || ! IS_OBJ_VALID ( EG ( objects_store ) . object_buckets [ Z_OBJ_HANDLE_P ( obj ) ] ) )		50255	0					
ANR	50959	Condition	! EG ( objects_store ) . object_buckets || ! IS_OBJ_VALID ( EG ( objects_store ) . object_buckets [ Z_OBJ_HANDLE_P ( obj ) ] )	3284:10:98186:98300	50255	0	True				
ANR	50960	OrExpression	! EG ( objects_store ) . object_buckets || ! IS_OBJ_VALID ( EG ( objects_store ) . object_buckets [ Z_OBJ_HANDLE_P ( obj ) ] )		50255	0		||			
ANR	50961	UnaryOperationExpression	! EG ( objects_store ) . object_buckets		50255	0					
ANR	50962	UnaryOperator	!		50255	0					
ANR	50963	MemberAccess	EG ( objects_store ) . object_buckets		50255	1					
ANR	50964	CallExpression	EG ( objects_store )		50255	0					
ANR	50965	Callee	EG		50255	0					
ANR	50966	Identifier	EG		50255	0					
ANR	50967	ArgumentList	objects_store		50255	1					
ANR	50968	Argument	objects_store		50255	0					
ANR	50969	Identifier	objects_store		50255	0					
ANR	50970	Identifier	object_buckets		50255	1					
ANR	50971	UnaryOperationExpression	! IS_OBJ_VALID ( EG ( objects_store ) . object_buckets [ Z_OBJ_HANDLE_P ( obj ) ] )		50255	1					
ANR	50972	UnaryOperator	!		50255	0					
ANR	50973	CallExpression	IS_OBJ_VALID ( EG ( objects_store ) . object_buckets [ Z_OBJ_HANDLE_P ( obj ) ] )		50255	1					
ANR	50974	Callee	IS_OBJ_VALID		50255	0					
ANR	50975	Identifier	IS_OBJ_VALID		50255	0					
ANR	50976	ArgumentList	EG ( objects_store ) . object_buckets [ Z_OBJ_HANDLE_P ( obj ) ]		50255	1					
ANR	50977	Argument	EG ( objects_store ) . object_buckets [ Z_OBJ_HANDLE_P ( obj ) ]		50255	0					
ANR	50978	ArrayIndexing	EG ( objects_store ) . object_buckets [ Z_OBJ_HANDLE_P ( obj ) ]		50255	0					
ANR	50979	MemberAccess	EG ( objects_store ) . object_buckets		50255	0					
ANR	50980	CallExpression	EG ( objects_store )		50255	0					
ANR	50981	Callee	EG		50255	0					
ANR	50982	Identifier	EG		50255	0					
ANR	50983	ArgumentList	objects_store		50255	1					
ANR	50984	Argument	objects_store		50255	0					
ANR	50985	Identifier	objects_store		50255	0					
ANR	50986	Identifier	object_buckets		50255	1					
ANR	50987	CallExpression	Z_OBJ_HANDLE_P ( obj )		50255	1					
ANR	50988	Callee	Z_OBJ_HANDLE_P		50255	0					
ANR	50989	Identifier	Z_OBJ_HANDLE_P		50255	0					
ANR	50990	ArgumentList	obj		50255	1					
ANR	50991	Argument	obj		50255	0					
ANR	50992	Identifier	obj		50255	0					
ANR	50993	CompoundStatement		111:80:3158:3158	50255	1					
ANR	50994	ReturnStatement	return 0 ;	3286:7:98312:98320	50255	0	True				
ANR	50995	PrimaryExpression	0		50255	0					
ANR	50996	ExpressionStatement	fcc -> calling_scope = Z_OBJCE_P ( obj )	3289:6:98337:98372	50255	1	True				
ANR	50997	AssignmentExpression	fcc -> calling_scope = Z_OBJCE_P ( obj )		50255	0		=			
ANR	50998	PtrMemberAccess	fcc -> calling_scope		50255	0					
ANR	50999	Identifier	fcc		50255	0					
ANR	51000	Identifier	calling_scope		50255	1					
ANR	51001	CallExpression	Z_OBJCE_P ( obj )		50255	1					
ANR	51002	Callee	Z_OBJCE_P		50255	0					
ANR	51003	Identifier	Z_OBJCE_P		50255	0					
ANR	51004	ArgumentList	obj		50255	1					
ANR	51005	Argument	obj		50255	0					
ANR	51006	Identifier	obj		50255	0					
ANR	51007	ExpressionStatement	fcc -> object = Z_OBJ_P ( obj )	3291:6:98421:98447	50255	2	True				
ANR	51008	AssignmentExpression	fcc -> object = Z_OBJ_P ( obj )		50255	0		=			
ANR	51009	PtrMemberAccess	fcc -> object		50255	0					
ANR	51010	Identifier	fcc		50255	0					
ANR	51011	Identifier	object		50255	1					
ANR	51012	CallExpression	Z_OBJ_P ( obj )		50255	1					
ANR	51013	Callee	Z_OBJ_P		50255	0					
ANR	51014	Identifier	Z_OBJ_P		50255	0					
ANR	51015	ArgumentList	obj		50255	1					
ANR	51016	Argument	obj		50255	0					
ANR	51017	Identifier	obj		50255	0					
ANR	51018	IfStatement	if ( callable_name )		50255	3					
ANR	51019	Condition	callable_name	3293:10:98460:98472	50255	0	True				
ANR	51020	Identifier	callable_name		50255	0					
ANR	51021	CompoundStatement		120:7:3339:3348	50255	1					
ANR	51022	IdentifierDeclStatement	char * ptr ;	3294:7:98484:98493	50255	0	True				
ANR	51023	IdentifierDecl	* ptr		50255	0					
ANR	51024	IdentifierDeclType	char *		50255	0					
ANR	51025	Identifier	ptr		50255	1					
ANR	51026	ExpressionStatement	"* callable_name = zend_string_alloc ( ZSTR_LEN ( fcc -> calling_scope -> name ) + Z_STRLEN_P ( method ) + sizeof ( ""::"" ) - 1 , 0 )"	3296:7:98503:98616	50255	1	True				
ANR	51027	AssignmentExpression	"* callable_name = zend_string_alloc ( ZSTR_LEN ( fcc -> calling_scope -> name ) + Z_STRLEN_P ( method ) + sizeof ( ""::"" ) - 1 , 0 )"		50255	0		=			
ANR	51028	UnaryOperationExpression	* callable_name		50255	0					
ANR	51029	UnaryOperator	*		50255	0					
ANR	51030	Identifier	callable_name		50255	1					
ANR	51031	CallExpression	"zend_string_alloc ( ZSTR_LEN ( fcc -> calling_scope -> name ) + Z_STRLEN_P ( method ) + sizeof ( ""::"" ) - 1 , 0 )"		50255	1					
ANR	51032	Callee	zend_string_alloc		50255	0					
ANR	51033	Identifier	zend_string_alloc		50255	0					
ANR	51034	ArgumentList	"ZSTR_LEN ( fcc -> calling_scope -> name ) + Z_STRLEN_P ( method ) + sizeof ( ""::"" ) - 1"		50255	1					
ANR	51035	Argument	"ZSTR_LEN ( fcc -> calling_scope -> name ) + Z_STRLEN_P ( method ) + sizeof ( ""::"" ) - 1"		50255	0					
ANR	51036	AdditiveExpression	"ZSTR_LEN ( fcc -> calling_scope -> name ) + Z_STRLEN_P ( method ) + sizeof ( ""::"" ) - 1"		50255	0		+			
ANR	51037	CallExpression	ZSTR_LEN ( fcc -> calling_scope -> name )		50255	0					
ANR	51038	Callee	ZSTR_LEN		50255	0					
ANR	51039	Identifier	ZSTR_LEN		50255	0					
ANR	51040	ArgumentList	fcc -> calling_scope -> name		50255	1					
ANR	51041	Argument	fcc -> calling_scope -> name		50255	0					
ANR	51042	PtrMemberAccess	fcc -> calling_scope -> name		50255	0					
ANR	51043	PtrMemberAccess	fcc -> calling_scope		50255	0					
ANR	51044	Identifier	fcc		50255	0					
ANR	51045	Identifier	calling_scope		50255	1					
ANR	51046	Identifier	name		50255	1					
ANR	51047	AdditiveExpression	"Z_STRLEN_P ( method ) + sizeof ( ""::"" ) - 1"		50255	1		+			
ANR	51048	CallExpression	Z_STRLEN_P ( method )		50255	0					
ANR	51049	Callee	Z_STRLEN_P		50255	0					
ANR	51050	Identifier	Z_STRLEN_P		50255	0					
ANR	51051	ArgumentList	method		50255	1					
ANR	51052	Argument	method		50255	0					
ANR	51053	Identifier	method		50255	0					
ANR	51054	AdditiveExpression	"sizeof ( ""::"" ) - 1"		50255	1		-			
ANR	51055	SizeofExpression	"sizeof ( ""::"" )"		50255	0					
ANR	51056	Sizeof	sizeof		50255	0					
ANR	51057	PrimaryExpression	"""::"""		50255	1					
ANR	51058	PrimaryExpression	1		50255	1					
ANR	51059	Argument	0		50255	1					
ANR	51060	PrimaryExpression	0		50255	0					
ANR	51061	ExpressionStatement	ptr = ZSTR_VAL ( * callable_name )	3297:7:98625:98655	50255	2	True				
ANR	51062	AssignmentExpression	ptr = ZSTR_VAL ( * callable_name )		50255	0		=			
ANR	51063	Identifier	ptr		50255	0					
ANR	51064	CallExpression	ZSTR_VAL ( * callable_name )		50255	1					
ANR	51065	Callee	ZSTR_VAL		50255	0					
ANR	51066	Identifier	ZSTR_VAL		50255	0					
ANR	51067	ArgumentList	* callable_name		50255	1					
ANR	51068	Argument	* callable_name		50255	0					
ANR	51069	UnaryOperationExpression	* callable_name		50255	0					
ANR	51070	UnaryOperator	*		50255	0					
ANR	51071	Identifier	callable_name		50255	1					
ANR	51072	ExpressionStatement	"memcpy ( ptr , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_LEN ( fcc -> calling_scope -> name ) )"	3298:7:98664:98747	50255	3	True				
ANR	51073	CallExpression	"memcpy ( ptr , ZSTR_VAL ( fcc -> calling_scope -> name ) , ZSTR_LEN ( fcc -> calling_scope -> name ) )"		50255	0					
ANR	51074	Callee	memcpy		50255	0					
ANR	51075	Identifier	memcpy		50255	0					
ANR	51076	ArgumentList	ptr		50255	1					
ANR	51077	Argument	ptr		50255	0					
ANR	51078	Identifier	ptr		50255	0					
ANR	51079	Argument	ZSTR_VAL ( fcc -> calling_scope -> name )		50255	1					
ANR	51080	CallExpression	ZSTR_VAL ( fcc -> calling_scope -> name )		50255	0					
ANR	51081	Callee	ZSTR_VAL		50255	0					
ANR	51082	Identifier	ZSTR_VAL		50255	0					
ANR	51083	ArgumentList	fcc -> calling_scope -> name		50255	1					
ANR	51084	Argument	fcc -> calling_scope -> name		50255	0					
ANR	51085	PtrMemberAccess	fcc -> calling_scope -> name		50255	0					
ANR	51086	PtrMemberAccess	fcc -> calling_scope		50255	0					
ANR	51087	Identifier	fcc		50255	0					
ANR	51088	Identifier	calling_scope		50255	1					
ANR	51089	Identifier	name		50255	1					
ANR	51090	Argument	ZSTR_LEN ( fcc -> calling_scope -> name )		50255	2					
ANR	51091	CallExpression	ZSTR_LEN ( fcc -> calling_scope -> name )		50255	0					
ANR	51092	Callee	ZSTR_LEN		50255	0					
ANR	51093	Identifier	ZSTR_LEN		50255	0					
ANR	51094	ArgumentList	fcc -> calling_scope -> name		50255	1					
ANR	51095	Argument	fcc -> calling_scope -> name		50255	0					
ANR	51096	PtrMemberAccess	fcc -> calling_scope -> name		50255	0					
ANR	51097	PtrMemberAccess	fcc -> calling_scope		50255	0					
ANR	51098	Identifier	fcc		50255	0					
ANR	51099	Identifier	calling_scope		50255	1					
ANR	51100	Identifier	name		50255	1					
ANR	51101	ExpressionStatement	ptr += ZSTR_LEN ( fcc -> calling_scope -> name )	3299:7:98756:98797	50255	4	True				
ANR	51102	AssignmentExpression	ptr += ZSTR_LEN ( fcc -> calling_scope -> name )		50255	0		+=			
ANR	51103	Identifier	ptr		50255	0					
ANR	51104	CallExpression	ZSTR_LEN ( fcc -> calling_scope -> name )		50255	1					
ANR	51105	Callee	ZSTR_LEN		50255	0					
ANR	51106	Identifier	ZSTR_LEN		50255	0					
ANR	51107	ArgumentList	fcc -> calling_scope -> name		50255	1					
ANR	51108	Argument	fcc -> calling_scope -> name		50255	0					
ANR	51109	PtrMemberAccess	fcc -> calling_scope -> name		50255	0					
ANR	51110	PtrMemberAccess	fcc -> calling_scope		50255	0					
ANR	51111	Identifier	fcc		50255	0					
ANR	51112	Identifier	calling_scope		50255	1					
ANR	51113	Identifier	name		50255	1					
ANR	51114	ExpressionStatement	"memcpy ( ptr , ""::"" , sizeof ( ""::"" ) - 1 )"	3300:7:98806:98841	50255	5	True				
ANR	51115	CallExpression	"memcpy ( ptr , ""::"" , sizeof ( ""::"" ) - 1 )"		50255	0					
ANR	51116	Callee	memcpy		50255	0					
ANR	51117	Identifier	memcpy		50255	0					
ANR	51118	ArgumentList	ptr		50255	1					
ANR	51119	Argument	ptr		50255	0					
ANR	51120	Identifier	ptr		50255	0					
ANR	51121	Argument	"""::"""		50255	1					
ANR	51122	PrimaryExpression	"""::"""		50255	0					
ANR	51123	Argument	"sizeof ( ""::"" ) - 1"		50255	2					
ANR	51124	AdditiveExpression	"sizeof ( ""::"" ) - 1"		50255	0		-			
ANR	51125	SizeofExpression	"sizeof ( ""::"" )"		50255	0					
ANR	51126	Sizeof	sizeof		50255	0					
ANR	51127	PrimaryExpression	"""::"""		50255	1					
ANR	51128	PrimaryExpression	1		50255	1					
ANR	51129	ExpressionStatement	"ptr += sizeof ( ""::"" ) - 1"	3301:7:98850:98873	50255	6	True				
ANR	51130	AssignmentExpression	"ptr += sizeof ( ""::"" ) - 1"		50255	0		+=			
ANR	51131	Identifier	ptr		50255	0					
ANR	51132	AdditiveExpression	"sizeof ( ""::"" ) - 1"		50255	1		-			
ANR	51133	SizeofExpression	"sizeof ( ""::"" )"		50255	0					
ANR	51134	Sizeof	sizeof		50255	0					
ANR	51135	PrimaryExpression	"""::"""		50255	1					
ANR	51136	PrimaryExpression	1		50255	1					
ANR	51137	ExpressionStatement	"memcpy ( ptr , Z_STRVAL_P ( method ) , Z_STRLEN_P ( method ) + 1 )"	3302:7:98882:98937	50255	7	True				
ANR	51138	CallExpression	"memcpy ( ptr , Z_STRVAL_P ( method ) , Z_STRLEN_P ( method ) + 1 )"		50255	0					
ANR	51139	Callee	memcpy		50255	0					
ANR	51140	Identifier	memcpy		50255	0					
ANR	51141	ArgumentList	ptr		50255	1					
ANR	51142	Argument	ptr		50255	0					
ANR	51143	Identifier	ptr		50255	0					
ANR	51144	Argument	Z_STRVAL_P ( method )		50255	1					
ANR	51145	CallExpression	Z_STRVAL_P ( method )		50255	0					
ANR	51146	Callee	Z_STRVAL_P		50255	0					
ANR	51147	Identifier	Z_STRVAL_P		50255	0					
ANR	51148	ArgumentList	method		50255	1					
ANR	51149	Argument	method		50255	0					
ANR	51150	Identifier	method		50255	0					
ANR	51151	Argument	Z_STRLEN_P ( method ) + 1		50255	2					
ANR	51152	AdditiveExpression	Z_STRLEN_P ( method ) + 1		50255	0		+			
ANR	51153	CallExpression	Z_STRLEN_P ( method )		50255	0					
ANR	51154	Callee	Z_STRLEN_P		50255	0					
ANR	51155	Identifier	Z_STRLEN_P		50255	0					
ANR	51156	ArgumentList	method		50255	1					
ANR	51157	Argument	method		50255	0					
ANR	51158	Identifier	method		50255	0					
ANR	51159	PrimaryExpression	1		50255	1					
ANR	51160	IfStatement	if ( check_flags & IS_CALLABLE_CHECK_SYNTAX_ONLY )		50255	4					
ANR	51161	Condition	check_flags & IS_CALLABLE_CHECK_SYNTAX_ONLY	3305:10:98958:99000	50255	0	True				
ANR	51162	BitAndExpression	check_flags & IS_CALLABLE_CHECK_SYNTAX_ONLY		50255	0		&			
ANR	51163	Identifier	check_flags		50255	0					
ANR	51164	Identifier	IS_CALLABLE_CHECK_SYNTAX_ONLY		50255	1					
ANR	51165	CompoundStatement		131:55:3858:3858	50255	1					
ANR	51166	ExpressionStatement	fcc -> called_scope = fcc -> calling_scope	3306:7:99012:99050	50255	0	True				
ANR	51167	AssignmentExpression	fcc -> called_scope = fcc -> calling_scope		50255	0		=			
ANR	51168	PtrMemberAccess	fcc -> called_scope		50255	0					
ANR	51169	Identifier	fcc		50255	0					
ANR	51170	Identifier	called_scope		50255	1					
ANR	51171	PtrMemberAccess	fcc -> calling_scope		50255	1					
ANR	51172	Identifier	fcc		50255	0					
ANR	51173	Identifier	calling_scope		50255	1					
ANR	51174	ReturnStatement	return 1 ;	3307:7:99059:99067	50255	1	True				
ANR	51175	PrimaryExpression	1		50255	0					
ANR	51176	ElseStatement	else		50255	0					
ANR	51177	CompoundStatement		135:12:3944:3944	50255	0					
ANR	51178	BreakStatement	break ;	3310:6:99097:99102	50255	0	True				
ANR	51179	ExpressionStatement	"ret = zend_is_callable_check_func ( check_flags , method , fcc , strict_class , error )"	3313:5:99117:99197	50255	5	True				
ANR	51180	AssignmentExpression	"ret = zend_is_callable_check_func ( check_flags , method , fcc , strict_class , error )"		50255	0		=			
ANR	51181	Identifier	ret		50255	0					
ANR	51182	CallExpression	"zend_is_callable_check_func ( check_flags , method , fcc , strict_class , error )"		50255	1					
ANR	51183	Callee	zend_is_callable_check_func		50255	0					
ANR	51184	Identifier	zend_is_callable_check_func		50255	0					
ANR	51185	ArgumentList	check_flags		50255	1					
ANR	51186	Argument	check_flags		50255	0					
ANR	51187	Identifier	check_flags		50255	0					
ANR	51188	Argument	method		50255	1					
ANR	51189	Identifier	method		50255	0					
ANR	51190	Argument	fcc		50255	2					
ANR	51191	Identifier	fcc		50255	0					
ANR	51192	Argument	strict_class		50255	3					
ANR	51193	Identifier	strict_class		50255	0					
ANR	51194	Argument	error		50255	4					
ANR	51195	Identifier	error		50255	0					
ANR	51196	IfStatement	if ( fcc == & fcc_local && fcc -> function_handler && ( ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION ) )		50255	6					
ANR	51197	Condition	fcc == & fcc_local && fcc -> function_handler && ( ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION )	3314:9:99208:99489	50255	0	True				
ANR	51198	AndExpression	fcc == & fcc_local && fcc -> function_handler && ( ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION )		50255	0		&&			
ANR	51199	EqualityExpression	fcc == & fcc_local		50255	0		==			
ANR	51200	Identifier	fcc		50255	0					
ANR	51201	UnaryOperationExpression	& fcc_local		50255	1					
ANR	51202	UnaryOperator	&		50255	0					
ANR	51203	Identifier	fcc_local		50255	1					
ANR	51204	AndExpression	fcc -> function_handler && ( ( fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION )		50255	1		&&			
ANR	51205	PtrMemberAccess	fcc -> function_handler		50255	0					
ANR	51206	Identifier	fcc		50255	0					
ANR	51207	Identifier	function_handler		50255	1					
ANR	51208	OrExpression	( fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION		50255	1		||			
ANR	51209	BitAndExpression	fcc -> function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE		50255	0		&			
ANR	51210	MemberAccess	fcc -> function_handler -> common . fn_flags		50255	0					
ANR	51211	PtrMemberAccess	fcc -> function_handler -> common		50255	0					
ANR	51212	PtrMemberAccess	fcc -> function_handler		50255	0					
ANR	51213	Identifier	fcc		50255	0					
ANR	51214	Identifier	function_handler		50255	1					
ANR	51215	Identifier	common		50255	1					
ANR	51216	Identifier	fn_flags		50255	1					
ANR	51217	Identifier	ZEND_ACC_CALL_VIA_TRAMPOLINE		50255	1					
ANR	51218	OrExpression	fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY || fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION		50255	1		||			
ANR	51219	EqualityExpression	fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY		50255	0		==			
ANR	51220	PtrMemberAccess	fcc -> function_handler -> type		50255	0					
ANR	51221	PtrMemberAccess	fcc -> function_handler		50255	0					
ANR	51222	Identifier	fcc		50255	0					
ANR	51223	Identifier	function_handler		50255	1					
ANR	51224	Identifier	type		50255	1					
ANR	51225	Identifier	ZEND_OVERLOADED_FUNCTION_TEMPORARY		50255	1					
ANR	51226	EqualityExpression	fcc -> function_handler -> type == ZEND_OVERLOADED_FUNCTION		50255	1		==			
ANR	51227	PtrMemberAccess	fcc -> function_handler -> type		50255	0					
ANR	51228	PtrMemberAccess	fcc -> function_handler		50255	0					
ANR	51229	Identifier	fcc		50255	0					
ANR	51230	Identifier	function_handler		50255	1					
ANR	51231	Identifier	type		50255	1					
ANR	51232	Identifier	ZEND_OVERLOADED_FUNCTION		50255	1					
ANR	51233	CompoundStatement		144:68:4347:4347	50255	1					
ANR	51234	IfStatement	if ( fcc -> function_handler -> type != ZEND_OVERLOADED_FUNCTION )		50255	0					
ANR	51235	Condition	fcc -> function_handler -> type != ZEND_OVERLOADED_FUNCTION	3319:10:99504:99558	50255	0	True				
ANR	51236	EqualityExpression	fcc -> function_handler -> type != ZEND_OVERLOADED_FUNCTION		50255	0		!=			
ANR	51237	PtrMemberAccess	fcc -> function_handler -> type		50255	0					
ANR	51238	PtrMemberAccess	fcc -> function_handler		50255	0					
ANR	51239	Identifier	fcc		50255	0					
ANR	51240	Identifier	function_handler		50255	1					
ANR	51241	Identifier	type		50255	1					
ANR	51242	Identifier	ZEND_OVERLOADED_FUNCTION		50255	1					
ANR	51243	CompoundStatement		145:67:4416:4416	50255	1					
ANR	51244	ExpressionStatement	zend_string_release ( fcc -> function_handler -> common . function_name )	3320:7:99570:99634	50255	0	True				
ANR	51245	CallExpression	zend_string_release ( fcc -> function_handler -> common . function_name )		50255	0					
ANR	51246	Callee	zend_string_release		50255	0					
ANR	51247	Identifier	zend_string_release		50255	0					
ANR	51248	ArgumentList	fcc -> function_handler -> common . function_name		50255	1					
ANR	51249	Argument	fcc -> function_handler -> common . function_name		50255	0					
ANR	51250	MemberAccess	fcc -> function_handler -> common . function_name		50255	0					
ANR	51251	PtrMemberAccess	fcc -> function_handler -> common		50255	0					
ANR	51252	PtrMemberAccess	fcc -> function_handler		50255	0					
ANR	51253	Identifier	fcc		50255	0					
ANR	51254	Identifier	function_handler		50255	1					
ANR	51255	Identifier	common		50255	1					
ANR	51256	Identifier	function_name		50255	1					
ANR	51257	ExpressionStatement	zend_free_trampoline ( fcc -> function_handler )	3322:6:99650:99693	50255	1	True				
ANR	51258	CallExpression	zend_free_trampoline ( fcc -> function_handler )		50255	0					
ANR	51259	Callee	zend_free_trampoline		50255	0					
ANR	51260	Identifier	zend_free_trampoline		50255	0					
ANR	51261	ArgumentList	fcc -> function_handler		50255	1					
ANR	51262	Argument	fcc -> function_handler		50255	0					
ANR	51263	PtrMemberAccess	fcc -> function_handler		50255	0					
ANR	51264	Identifier	fcc		50255	0					
ANR	51265	Identifier	function_handler		50255	1					
ANR	51266	ReturnStatement	return ret ;	3324:5:99707:99717	50255	7	True				
ANR	51267	Identifier	ret		50255	0					
ANR	51268	Condition	0	3326:13:99733:99733	50255	1	True				
ANR	51269	PrimaryExpression	0		50255	0					
ANR	51270	IfStatement	if ( zend_hash_num_elements ( Z_ARRVAL_P ( callable ) ) == 2 )		50255	5					
ANR	51271	Condition	zend_hash_num_elements ( Z_ARRVAL_P ( callable ) ) == 2	3327:8:99745:99793	50255	0	True				
ANR	51272	EqualityExpression	zend_hash_num_elements ( Z_ARRVAL_P ( callable ) ) == 2		50255	0		==			
ANR	51273	CallExpression	zend_hash_num_elements ( Z_ARRVAL_P ( callable ) )		50255	0					
ANR	51274	Callee	zend_hash_num_elements		50255	0					
ANR	51275	Identifier	zend_hash_num_elements		50255	0					
ANR	51276	ArgumentList	Z_ARRVAL_P ( callable )		50255	1					
ANR	51277	Argument	Z_ARRVAL_P ( callable )		50255	0					
ANR	51278	CallExpression	Z_ARRVAL_P ( callable )		50255	0					
ANR	51279	Callee	Z_ARRVAL_P		50255	0					
ANR	51280	Identifier	Z_ARRVAL_P		50255	0					
ANR	51281	ArgumentList	callable		50255	1					
ANR	51282	Argument	callable		50255	0					
ANR	51283	Identifier	callable		50255	0					
ANR	51284	PrimaryExpression	2		50255	1					
ANR	51285	CompoundStatement		153:59:4651:4651	50255	1					
ANR	51286	IfStatement	if ( ! obj || ( ! Z_ISREF_P ( obj ) ? ( Z_TYPE_P ( obj ) != IS_STRING && Z_TYPE_P ( obj ) != IS_OBJECT ) : ( Z_TYPE_P ( Z_REFVAL_P ( obj ) ) != IS_STRING && Z_TYPE_P ( Z_REFVAL_P ( obj ) ) != IS_OBJECT ) ) )		50255	0					
ANR	51287	Condition	! obj || ( ! Z_ISREF_P ( obj ) ? ( Z_TYPE_P ( obj ) != IS_STRING && Z_TYPE_P ( obj ) != IS_OBJECT ) : ( Z_TYPE_P ( Z_REFVAL_P ( obj ) ) != IS_STRING && Z_TYPE_P ( Z_REFVAL_P ( obj ) ) != IS_OBJECT ) )	3328:9:99807:99992	50255	0	True				
ANR	51288	OrExpression	! obj || ( ! Z_ISREF_P ( obj ) ? ( Z_TYPE_P ( obj ) != IS_STRING && Z_TYPE_P ( obj ) != IS_OBJECT ) : ( Z_TYPE_P ( Z_REFVAL_P ( obj ) ) != IS_STRING && Z_TYPE_P ( Z_REFVAL_P ( obj ) ) != IS_OBJECT ) )		50255	0		||			
ANR	51289	UnaryOperationExpression	! obj		50255	0					
ANR	51290	UnaryOperator	!		50255	0					
ANR	51291	Identifier	obj		50255	1					
ANR	51292	ConditionalExpression	! Z_ISREF_P ( obj ) ? ( Z_TYPE_P ( obj ) != IS_STRING && Z_TYPE_P ( obj ) != IS_OBJECT ) : ( Z_TYPE_P ( Z_REFVAL_P ( obj ) ) != IS_STRING && Z_TYPE_P ( Z_REFVAL_P ( obj ) ) != IS_OBJECT )		50255	1					
ANR	51293	Condition	! Z_ISREF_P ( obj )		50255	0					
ANR	51294	UnaryOperationExpression	! Z_ISREF_P ( obj )		50255	0					
ANR	51295	UnaryOperator	!		50255	0					
ANR	51296	CallExpression	Z_ISREF_P ( obj )		50255	1					
ANR	51297	Callee	Z_ISREF_P		50255	0					
ANR	51298	Identifier	Z_ISREF_P		50255	0					
ANR	51299	ArgumentList	obj		50255	1					
ANR	51300	Argument	obj		50255	0					
ANR	51301	Identifier	obj		50255	0					
ANR	51302	AndExpression	Z_TYPE_P ( obj ) != IS_STRING && Z_TYPE_P ( obj ) != IS_OBJECT		50255	1		&&			
ANR	51303	EqualityExpression	Z_TYPE_P ( obj ) != IS_STRING		50255	0		!=			
ANR	51304	CallExpression	Z_TYPE_P ( obj )		50255	0					
ANR	51305	Callee	Z_TYPE_P		50255	0					
ANR	51306	Identifier	Z_TYPE_P		50255	0					
ANR	51307	ArgumentList	obj		50255	1					
ANR	51308	Argument	obj		50255	0					
ANR	51309	Identifier	obj		50255	0					
ANR	51310	Identifier	IS_STRING		50255	1					
ANR	51311	EqualityExpression	Z_TYPE_P ( obj ) != IS_OBJECT		50255	1		!=			
ANR	51312	CallExpression	Z_TYPE_P ( obj )		50255	0					
ANR	51313	Callee	Z_TYPE_P		50255	0					
ANR	51314	Identifier	Z_TYPE_P		50255	0					
ANR	51315	ArgumentList	obj		50255	1					
ANR	51316	Argument	obj		50255	0					
ANR	51317	Identifier	obj		50255	0					
ANR	51318	Identifier	IS_OBJECT		50255	1					
ANR	51319	AndExpression	Z_TYPE_P ( Z_REFVAL_P ( obj ) ) != IS_STRING && Z_TYPE_P ( Z_REFVAL_P ( obj ) ) != IS_OBJECT		50255	2		&&			
ANR	51320	EqualityExpression	Z_TYPE_P ( Z_REFVAL_P ( obj ) ) != IS_STRING		50255	0		!=			
ANR	51321	CallExpression	Z_TYPE_P ( Z_REFVAL_P ( obj ) )		50255	0					
ANR	51322	Callee	Z_TYPE_P		50255	0					
ANR	51323	Identifier	Z_TYPE_P		50255	0					
ANR	51324	ArgumentList	Z_REFVAL_P ( obj )		50255	1					
ANR	51325	Argument	Z_REFVAL_P ( obj )		50255	0					
ANR	51326	CallExpression	Z_REFVAL_P ( obj )		50255	0					
ANR	51327	Callee	Z_REFVAL_P		50255	0					
ANR	51328	Identifier	Z_REFVAL_P		50255	0					
ANR	51329	ArgumentList	obj		50255	1					
ANR	51330	Argument	obj		50255	0					
ANR	51331	Identifier	obj		50255	0					
ANR	51332	Identifier	IS_STRING		50255	1					
ANR	51333	EqualityExpression	Z_TYPE_P ( Z_REFVAL_P ( obj ) ) != IS_OBJECT		50255	1		!=			
ANR	51334	CallExpression	Z_TYPE_P ( Z_REFVAL_P ( obj ) )		50255	0					
ANR	51335	Callee	Z_TYPE_P		50255	0					
ANR	51336	Identifier	Z_TYPE_P		50255	0					
ANR	51337	ArgumentList	Z_REFVAL_P ( obj )		50255	1					
ANR	51338	Argument	Z_REFVAL_P ( obj )		50255	0					
ANR	51339	CallExpression	Z_REFVAL_P ( obj )		50255	0					
ANR	51340	Callee	Z_REFVAL_P		50255	0					
ANR	51341	Identifier	Z_REFVAL_P		50255	0					
ANR	51342	ArgumentList	obj		50255	1					
ANR	51343	Argument	obj		50255	0					
ANR	51344	Identifier	obj		50255	0					
ANR	51345	Identifier	IS_OBJECT		50255	1					
ANR	51346	CompoundStatement		156:93:4850:4850	50255	1					
ANR	51347	IfStatement	if ( error )		50255	0					
ANR	51348	Condition	error	3331:10:100007:100011	50255	0	True				
ANR	51349	Identifier	error		50255	0					
ANR	51350	ExpressionStatement	"zend_spprintf ( error , 0 , ""first array member is not a valid class name or object"" )"	3331:17:100014:100095	50255	1	True				
ANR	51351	CallExpression	"zend_spprintf ( error , 0 , ""first array member is not a valid class name or object"" )"		50255	0					
ANR	51352	Callee	zend_spprintf		50255	0					
ANR	51353	Identifier	zend_spprintf		50255	0					
ANR	51354	ArgumentList	error		50255	1					
ANR	51355	Argument	error		50255	0					
ANR	51356	Identifier	error		50255	0					
ANR	51357	Argument	0		50255	1					
ANR	51358	PrimaryExpression	0		50255	0					
ANR	51359	Argument	"""first array member is not a valid class name or object"""		50255	2					
ANR	51360	PrimaryExpression	"""first array member is not a valid class name or object"""		50255	0					
ANR	51361	ElseStatement	else		50255	0					
ANR	51362	CompoundStatement		158:12:4964:4964	50255	0					
ANR	51363	IfStatement	if ( error )		50255	0					
ANR	51364	Condition	error	3333:10:100121:100125	50255	0	True				
ANR	51365	Identifier	error		50255	0					
ANR	51366	ExpressionStatement	"zend_spprintf ( error , 0 , ""second array member is not a valid method"" )"	3333:17:100128:100196	50255	1	True				
ANR	51367	CallExpression	"zend_spprintf ( error , 0 , ""second array member is not a valid method"" )"		50255	0					
ANR	51368	Callee	zend_spprintf		50255	0					
ANR	51369	Identifier	zend_spprintf		50255	0					
ANR	51370	ArgumentList	error		50255	1					
ANR	51371	Argument	error		50255	0					
ANR	51372	Identifier	error		50255	0					
ANR	51373	Argument	0		50255	1					
ANR	51374	PrimaryExpression	0		50255	0					
ANR	51375	Argument	"""second array member is not a valid method"""		50255	2					
ANR	51376	PrimaryExpression	"""second array member is not a valid method"""		50255	0					
ANR	51377	ElseStatement	else		50255	0					
ANR	51378	CompoundStatement		161:11:5071:5071	50255	0					
ANR	51379	IfStatement	if ( error )		50255	0					
ANR	51380	Condition	error	3336:9:100227:100231	50255	0	True				
ANR	51381	Identifier	error		50255	0					
ANR	51382	ExpressionStatement	"zend_spprintf ( error , 0 , ""array must have exactly two members"" )"	3336:16:100234:100296	50255	1	True				
ANR	51383	CallExpression	"zend_spprintf ( error , 0 , ""array must have exactly two members"" )"		50255	0					
ANR	51384	Callee	zend_spprintf		50255	0					
ANR	51385	Identifier	zend_spprintf		50255	0					
ANR	51386	ArgumentList	error		50255	1					
ANR	51387	Argument	error		50255	0					
ANR	51388	Identifier	error		50255	0					
ANR	51389	Argument	0		50255	1					
ANR	51390	PrimaryExpression	0		50255	0					
ANR	51391	Argument	"""array must have exactly two members"""		50255	2					
ANR	51392	PrimaryExpression	"""array must have exactly two members"""		50255	0					
ANR	51393	IfStatement	if ( callable_name )		50255	6					
ANR	51394	Condition	callable_name	3338:8:100312:100324	50255	0	True				
ANR	51395	Identifier	callable_name		50255	0					
ANR	51396	CompoundStatement		164:23:5182:5182	50255	1					
ANR	51397	ExpressionStatement	"* callable_name = zend_string_init ( ""Array"" , sizeof ( ""Array"" ) - 1 , 0 )"	3339:5:100334:100398	50255	0	True				
ANR	51398	AssignmentExpression	"* callable_name = zend_string_init ( ""Array"" , sizeof ( ""Array"" ) - 1 , 0 )"		50255	0		=			
ANR	51399	UnaryOperationExpression	* callable_name		50255	0					
ANR	51400	UnaryOperator	*		50255	0					
ANR	51401	Identifier	callable_name		50255	1					
ANR	51402	CallExpression	"zend_string_init ( ""Array"" , sizeof ( ""Array"" ) - 1 , 0 )"		50255	1					
ANR	51403	Callee	zend_string_init		50255	0					
ANR	51404	Identifier	zend_string_init		50255	0					
ANR	51405	ArgumentList	"""Array"""		50255	1					
ANR	51406	Argument	"""Array"""		50255	0					
ANR	51407	PrimaryExpression	"""Array"""		50255	0					
ANR	51408	Argument	"sizeof ( ""Array"" ) - 1"		50255	1					
ANR	51409	AdditiveExpression	"sizeof ( ""Array"" ) - 1"		50255	0		-			
ANR	51410	SizeofExpression	"sizeof ( ""Array"" )"		50255	0					
ANR	51411	Sizeof	sizeof		50255	0					
ANR	51412	PrimaryExpression	"""Array"""		50255	1					
ANR	51413	PrimaryExpression	1		50255	1					
ANR	51414	Argument	0		50255	2					
ANR	51415	PrimaryExpression	0		50255	0					
ANR	51416	ReturnStatement	return 0 ;	3342:3:100414:100422	50255	8	True				
ANR	51417	PrimaryExpression	0		50255	0					
ANR	51418	Label	case IS_OBJECT :	3343:2:100426:100440	50255	9	True				
ANR	51419	Identifier	IS_OBJECT		50255	0					
ANR	51420	IfStatement	"if ( Z_OBJ_HANDLER_P ( callable , get_closure ) && Z_OBJ_HANDLER_P ( callable , get_closure ) ( callable , & fcc -> calling_scope , & fcc -> function_handler , & fcc -> object ) == SUCCESS )"		50255	10					
ANR	51421	Condition	"Z_OBJ_HANDLER_P ( callable , get_closure ) && Z_OBJ_HANDLER_P ( callable , get_closure ) ( callable , & fcc -> calling_scope , & fcc -> function_handler , & fcc -> object ) == SUCCESS"	3344:7:100449:100608	50255	0	True				
ANR	51422	AndExpression	"Z_OBJ_HANDLER_P ( callable , get_closure ) && Z_OBJ_HANDLER_P ( callable , get_closure ) ( callable , & fcc -> calling_scope , & fcc -> function_handler , & fcc -> object ) == SUCCESS"		50255	0		&&			
ANR	51423	CallExpression	"Z_OBJ_HANDLER_P ( callable , get_closure )"		50255	0					
ANR	51424	Callee	Z_OBJ_HANDLER_P		50255	0					
ANR	51425	Identifier	Z_OBJ_HANDLER_P		50255	0					
ANR	51426	ArgumentList	callable		50255	1					
ANR	51427	Argument	callable		50255	0					
ANR	51428	Identifier	callable		50255	0					
ANR	51429	Argument	get_closure		50255	1					
ANR	51430	Identifier	get_closure		50255	0					
ANR	51431	EqualityExpression	"Z_OBJ_HANDLER_P ( callable , get_closure ) ( callable , & fcc -> calling_scope , & fcc -> function_handler , & fcc -> object ) == SUCCESS"		50255	1		==			
ANR	51432	CallExpression	"Z_OBJ_HANDLER_P ( callable , get_closure ) ( callable , & fcc -> calling_scope , & fcc -> function_handler , & fcc -> object )"		50255	0					
ANR	51433	Callee	"Z_OBJ_HANDLER_P ( callable , get_closure )"		50255	0					
ANR	51434	CallExpression	"Z_OBJ_HANDLER_P ( callable , get_closure )"		50255	0					
ANR	51435	Callee	Z_OBJ_HANDLER_P		50255	0					
ANR	51436	Identifier	Z_OBJ_HANDLER_P		50255	0					
ANR	51437	ArgumentList	callable		50255	1					
ANR	51438	Argument	callable		50255	0					
ANR	51439	Identifier	callable		50255	0					
ANR	51440	Argument	get_closure		50255	1					
ANR	51441	Identifier	get_closure		50255	0					
ANR	51442	ArgumentList	callable		50255	1					
ANR	51443	Argument	callable		50255	0					
ANR	51444	Identifier	callable		50255	0					
ANR	51445	Argument	& fcc -> calling_scope		50255	1					
ANR	51446	UnaryOperationExpression	& fcc -> calling_scope		50255	0					
ANR	51447	UnaryOperator	&		50255	0					
ANR	51448	PtrMemberAccess	fcc -> calling_scope		50255	1					
ANR	51449	Identifier	fcc		50255	0					
ANR	51450	Identifier	calling_scope		50255	1					
ANR	51451	Argument	& fcc -> function_handler		50255	2					
ANR	51452	UnaryOperationExpression	& fcc -> function_handler		50255	0					
ANR	51453	UnaryOperator	&		50255	0					
ANR	51454	PtrMemberAccess	fcc -> function_handler		50255	1					
ANR	51455	Identifier	fcc		50255	0					
ANR	51456	Identifier	function_handler		50255	1					
ANR	51457	Argument	& fcc -> object		50255	3					
ANR	51458	UnaryOperationExpression	& fcc -> object		50255	0					
ANR	51459	UnaryOperator	&		50255	0					
ANR	51460	PtrMemberAccess	fcc -> object		50255	1					
ANR	51461	Identifier	fcc		50255	0					
ANR	51462	Identifier	object		50255	1					
ANR	51463	Identifier	SUCCESS		50255	1					
ANR	51464	CompoundStatement		170:169:5466:5466	50255	1					
ANR	51465	ExpressionStatement	fcc -> called_scope = fcc -> calling_scope	3345:4:100617:100655	50255	0	True				
ANR	51466	AssignmentExpression	fcc -> called_scope = fcc -> calling_scope		50255	0		=			
ANR	51467	PtrMemberAccess	fcc -> called_scope		50255	0					
ANR	51468	Identifier	fcc		50255	0					
ANR	51469	Identifier	called_scope		50255	1					
ANR	51470	PtrMemberAccess	fcc -> calling_scope		50255	1					
ANR	51471	Identifier	fcc		50255	0					
ANR	51472	Identifier	calling_scope		50255	1					
ANR	51473	IfStatement	if ( callable_name )		50255	1					
ANR	51474	Condition	callable_name	3346:8:100665:100677	50255	0	True				
ANR	51475	Identifier	callable_name		50255	0					
ANR	51476	CompoundStatement		173:5:5542:5584	50255	1					
ANR	51477	IdentifierDeclStatement	zend_class_entry * ce = Z_OBJCE_P ( callable ) ;	3347:5:100687:100729	50255	0	True				
ANR	51478	IdentifierDecl	* ce = Z_OBJCE_P ( callable )		50255	0					
ANR	51479	IdentifierDeclType	zend_class_entry *		50255	0					
ANR	51480	Identifier	ce		50255	1					
ANR	51481	AssignmentExpression	* ce = Z_OBJCE_P ( callable )		50255	2		=			
ANR	51482	Identifier	ce		50255	0					
ANR	51483	CallExpression	Z_OBJCE_P ( callable )		50255	1					
ANR	51484	Callee	Z_OBJCE_P		50255	0					
ANR	51485	Identifier	Z_OBJCE_P		50255	0					
ANR	51486	ArgumentList	callable		50255	1					
ANR	51487	Argument	callable		50255	0					
ANR	51488	Identifier	callable		50255	0					
ANR	51489	ExpressionStatement	"* callable_name = zend_string_alloc ( ZSTR_LEN ( ce -> name ) + sizeof ( ""::__invoke"" ) - 1 , 0 )"	3349:5:100777:100861	50255	1	True				
ANR	51490	AssignmentExpression	"* callable_name = zend_string_alloc ( ZSTR_LEN ( ce -> name ) + sizeof ( ""::__invoke"" ) - 1 , 0 )"		50255	0		=			
ANR	51491	UnaryOperationExpression	* callable_name		50255	0					
ANR	51492	UnaryOperator	*		50255	0					
ANR	51493	Identifier	callable_name		50255	1					
ANR	51494	CallExpression	"zend_string_alloc ( ZSTR_LEN ( ce -> name ) + sizeof ( ""::__invoke"" ) - 1 , 0 )"		50255	1					
ANR	51495	Callee	zend_string_alloc		50255	0					
ANR	51496	Identifier	zend_string_alloc		50255	0					
ANR	51497	ArgumentList	"ZSTR_LEN ( ce -> name ) + sizeof ( ""::__invoke"" ) - 1"		50255	1					
ANR	51498	Argument	"ZSTR_LEN ( ce -> name ) + sizeof ( ""::__invoke"" ) - 1"		50255	0					
ANR	51499	AdditiveExpression	"ZSTR_LEN ( ce -> name ) + sizeof ( ""::__invoke"" ) - 1"		50255	0		+			
ANR	51500	CallExpression	ZSTR_LEN ( ce -> name )		50255	0					
ANR	51501	Callee	ZSTR_LEN		50255	0					
ANR	51502	Identifier	ZSTR_LEN		50255	0					
ANR	51503	ArgumentList	ce -> name		50255	1					
ANR	51504	Argument	ce -> name		50255	0					
ANR	51505	PtrMemberAccess	ce -> name		50255	0					
ANR	51506	Identifier	ce		50255	0					
ANR	51507	Identifier	name		50255	1					
ANR	51508	AdditiveExpression	"sizeof ( ""::__invoke"" ) - 1"		50255	1		-			
ANR	51509	SizeofExpression	"sizeof ( ""::__invoke"" )"		50255	0					
ANR	51510	Sizeof	sizeof		50255	0					
ANR	51511	PrimaryExpression	"""::__invoke"""		50255	1					
ANR	51512	PrimaryExpression	1		50255	1					
ANR	51513	Argument	0		50255	1					
ANR	51514	PrimaryExpression	0		50255	0					
ANR	51515	ExpressionStatement	"memcpy ( ZSTR_VAL ( * callable_name ) , ZSTR_VAL ( ce -> name ) , ZSTR_LEN ( ce -> name ) )"	3350:5:100868:100940	50255	2	True				
ANR	51516	CallExpression	"memcpy ( ZSTR_VAL ( * callable_name ) , ZSTR_VAL ( ce -> name ) , ZSTR_LEN ( ce -> name ) )"		50255	0					
ANR	51517	Callee	memcpy		50255	0					
ANR	51518	Identifier	memcpy		50255	0					
ANR	51519	ArgumentList	ZSTR_VAL ( * callable_name )		50255	1					
ANR	51520	Argument	ZSTR_VAL ( * callable_name )		50255	0					
ANR	51521	CallExpression	ZSTR_VAL ( * callable_name )		50255	0					
ANR	51522	Callee	ZSTR_VAL		50255	0					
ANR	51523	Identifier	ZSTR_VAL		50255	0					
ANR	51524	ArgumentList	* callable_name		50255	1					
ANR	51525	Argument	* callable_name		50255	0					
ANR	51526	UnaryOperationExpression	* callable_name		50255	0					
ANR	51527	UnaryOperator	*		50255	0					
ANR	51528	Identifier	callable_name		50255	1					
ANR	51529	Argument	ZSTR_VAL ( ce -> name )		50255	1					
ANR	51530	CallExpression	ZSTR_VAL ( ce -> name )		50255	0					
ANR	51531	Callee	ZSTR_VAL		50255	0					
ANR	51532	Identifier	ZSTR_VAL		50255	0					
ANR	51533	ArgumentList	ce -> name		50255	1					
ANR	51534	Argument	ce -> name		50255	0					
ANR	51535	PtrMemberAccess	ce -> name		50255	0					
ANR	51536	Identifier	ce		50255	0					
ANR	51537	Identifier	name		50255	1					
ANR	51538	Argument	ZSTR_LEN ( ce -> name )		50255	2					
ANR	51539	CallExpression	ZSTR_LEN ( ce -> name )		50255	0					
ANR	51540	Callee	ZSTR_LEN		50255	0					
ANR	51541	Identifier	ZSTR_LEN		50255	0					
ANR	51542	ArgumentList	ce -> name		50255	1					
ANR	51543	Argument	ce -> name		50255	0					
ANR	51544	PtrMemberAccess	ce -> name		50255	0					
ANR	51545	Identifier	ce		50255	0					
ANR	51546	Identifier	name		50255	1					
ANR	51547	ExpressionStatement	"memcpy ( ZSTR_VAL ( * callable_name ) + ZSTR_LEN ( ce -> name ) , ""::__invoke"" , sizeof ( ""::__invoke"" ) )"	3351:5:100947:101036	50255	3	True				
ANR	51548	CallExpression	"memcpy ( ZSTR_VAL ( * callable_name ) + ZSTR_LEN ( ce -> name ) , ""::__invoke"" , sizeof ( ""::__invoke"" ) )"		50255	0					
ANR	51549	Callee	memcpy		50255	0					
ANR	51550	Identifier	memcpy		50255	0					
ANR	51551	ArgumentList	ZSTR_VAL ( * callable_name ) + ZSTR_LEN ( ce -> name )		50255	1					
ANR	51552	Argument	ZSTR_VAL ( * callable_name ) + ZSTR_LEN ( ce -> name )		50255	0					
ANR	51553	AdditiveExpression	ZSTR_VAL ( * callable_name ) + ZSTR_LEN ( ce -> name )		50255	0		+			
ANR	51554	CallExpression	ZSTR_VAL ( * callable_name )		50255	0					
ANR	51555	Callee	ZSTR_VAL		50255	0					
ANR	51556	Identifier	ZSTR_VAL		50255	0					
ANR	51557	ArgumentList	* callable_name		50255	1					
ANR	51558	Argument	* callable_name		50255	0					
ANR	51559	UnaryOperationExpression	* callable_name		50255	0					
ANR	51560	UnaryOperator	*		50255	0					
ANR	51561	Identifier	callable_name		50255	1					
ANR	51562	CallExpression	ZSTR_LEN ( ce -> name )		50255	1					
ANR	51563	Callee	ZSTR_LEN		50255	0					
ANR	51564	Identifier	ZSTR_LEN		50255	0					
ANR	51565	ArgumentList	ce -> name		50255	1					
ANR	51566	Argument	ce -> name		50255	0					
ANR	51567	PtrMemberAccess	ce -> name		50255	0					
ANR	51568	Identifier	ce		50255	0					
ANR	51569	Identifier	name		50255	1					
ANR	51570	Argument	"""::__invoke"""		50255	1					
ANR	51571	PrimaryExpression	"""::__invoke"""		50255	0					
ANR	51572	Argument	"sizeof ( ""::__invoke"" )"		50255	2					
ANR	51573	SizeofExpression	"sizeof ( ""::__invoke"" )"		50255	0					
ANR	51574	Sizeof	sizeof		50255	0					
ANR	51575	PrimaryExpression	"""::__invoke"""		50255	1					
ANR	51576	ReturnStatement	return 1 ;	3353:4:101048:101056	50255	2	True				
ANR	51577	PrimaryExpression	1		50255	0					
ANR	51578	IfStatement	if ( callable_name )		50255	11					
ANR	51579	Condition	callable_name	3355:7:101070:101082	50255	0	True				
ANR	51580	Identifier	callable_name		50255	0					
ANR	51581	CompoundStatement		181:22:5940:5940	50255	1					
ANR	51582	ExpressionStatement	* callable_name = zval_get_string ( callable )	3356:4:101091:101133	50255	0	True				
ANR	51583	AssignmentExpression	* callable_name = zval_get_string ( callable )		50255	0		=			
ANR	51584	UnaryOperationExpression	* callable_name		50255	0					
ANR	51585	UnaryOperator	*		50255	0					
ANR	51586	Identifier	callable_name		50255	1					
ANR	51587	CallExpression	zval_get_string ( callable )		50255	1					
ANR	51588	Callee	zval_get_string		50255	0					
ANR	51589	Identifier	zval_get_string		50255	0					
ANR	51590	ArgumentList	callable		50255	1					
ANR	51591	Argument	callable		50255	0					
ANR	51592	Identifier	callable		50255	0					
ANR	51593	IfStatement	if ( error )		50255	12					
ANR	51594	Condition	error	3358:7:101147:101151	50255	0	True				
ANR	51595	Identifier	error		50255	0					
ANR	51596	ExpressionStatement	"zend_spprintf ( error , 0 , ""no array or string given"" )"	3358:14:101154:101205	50255	1	True				
ANR	51597	CallExpression	"zend_spprintf ( error , 0 , ""no array or string given"" )"		50255	0					
ANR	51598	Callee	zend_spprintf		50255	0					
ANR	51599	Identifier	zend_spprintf		50255	0					
ANR	51600	ArgumentList	error		50255	1					
ANR	51601	Argument	error		50255	0					
ANR	51602	Identifier	error		50255	0					
ANR	51603	Argument	0		50255	1					
ANR	51604	PrimaryExpression	0		50255	0					
ANR	51605	Argument	"""no array or string given"""		50255	2					
ANR	51606	PrimaryExpression	"""no array or string given"""		50255	0					
ANR	51607	ReturnStatement	return 0 ;	3359:3:101210:101218	50255	13	True				
ANR	51608	PrimaryExpression	0		50255	0					
ANR	51609	Label	case IS_REFERENCE :	3360:2:101222:101239	50255	14	True				
ANR	51610	Identifier	IS_REFERENCE		50255	0					
ANR	51611	ExpressionStatement	callable = Z_REFVAL_P ( callable )	3361:3:101244:101275	50255	15	True				
ANR	51612	AssignmentExpression	callable = Z_REFVAL_P ( callable )		50255	0		=			
ANR	51613	Identifier	callable		50255	0					
ANR	51614	CallExpression	Z_REFVAL_P ( callable )		50255	1					
ANR	51615	Callee	Z_REFVAL_P		50255	0					
ANR	51616	Identifier	Z_REFVAL_P		50255	0					
ANR	51617	ArgumentList	callable		50255	1					
ANR	51618	Argument	callable		50255	0					
ANR	51619	Identifier	callable		50255	0					
ANR	51620	GotoStatement	goto again ;	3362:3:101280:101290	50255	16	True				
ANR	51621	Identifier	again		50255	0					
ANR	51622	Label	default :	3363:2:101294:101301	50255	17	True				
ANR	51623	Identifier	default		50255	0					
ANR	51624	IfStatement	if ( callable_name )		50255	18					
ANR	51625	Condition	callable_name	3364:7:101310:101322	50255	0	True				
ANR	51626	Identifier	callable_name		50255	0					
ANR	51627	CompoundStatement		190:22:6180:6180	50255	1					
ANR	51628	ExpressionStatement	* callable_name = zval_get_string ( callable )	3365:4:101331:101373	50255	0	True				
ANR	51629	AssignmentExpression	* callable_name = zval_get_string ( callable )		50255	0		=			
ANR	51630	UnaryOperationExpression	* callable_name		50255	0					
ANR	51631	UnaryOperator	*		50255	0					
ANR	51632	Identifier	callable_name		50255	1					
ANR	51633	CallExpression	zval_get_string ( callable )		50255	1					
ANR	51634	Callee	zval_get_string		50255	0					
ANR	51635	Identifier	zval_get_string		50255	0					
ANR	51636	ArgumentList	callable		50255	1					
ANR	51637	Argument	callable		50255	0					
ANR	51638	Identifier	callable		50255	0					
ANR	51639	IfStatement	if ( error )		50255	19					
ANR	51640	Condition	error	3367:7:101387:101391	50255	0	True				
ANR	51641	Identifier	error		50255	0					
ANR	51642	ExpressionStatement	"zend_spprintf ( error , 0 , ""no array or string given"" )"	3367:14:101394:101445	50255	1	True				
ANR	51643	CallExpression	"zend_spprintf ( error , 0 , ""no array or string given"" )"		50255	0					
ANR	51644	Callee	zend_spprintf		50255	0					
ANR	51645	Identifier	zend_spprintf		50255	0					
ANR	51646	ArgumentList	error		50255	1					
ANR	51647	Argument	error		50255	0					
ANR	51648	Identifier	error		50255	0					
ANR	51649	Argument	0		50255	1					
ANR	51650	PrimaryExpression	0		50255	0					
ANR	51651	Argument	"""no array or string given"""		50255	2					
ANR	51652	PrimaryExpression	"""no array or string given"""		50255	0					
ANR	51653	ReturnStatement	return 0 ;	3368:3:101450:101458	50255	20	True				
ANR	51654	PrimaryExpression	0		50255	0					
ANR	51655	ReturnType	ZEND_API zend_bool		50255	1					
ANR	51656	Identifier	zend_is_callable_ex		50255	2					
ANR	51657	ParameterList	"zval * callable , zend_object * object , uint check_flags , zend_string * * callable_name , zend_fcall_info_cache * fcc , char * * error"		50255	3					
ANR	51658	Parameter	zval * callable	3174:39:95008:95021	50255	0	True				
ANR	51659	ParameterType	zval *		50255	0					
ANR	51660	Identifier	callable		50255	1					
ANR	51661	Parameter	zend_object * object	3174:55:95024:95042	50255	1	True				
ANR	51662	ParameterType	zend_object *		50255	0					
ANR	51663	Identifier	object		50255	1					
ANR	51664	Parameter	uint check_flags	3174:76:95045:95060	50255	2	True				
ANR	51665	ParameterType	uint		50255	0					
ANR	51666	Identifier	check_flags		50255	1					
ANR	51667	Parameter	zend_string * * callable_name	3174:94:95063:95089	50255	3	True				
ANR	51668	ParameterType	zend_string * *		50255	0					
ANR	51669	Identifier	callable_name		50255	1					
ANR	51670	Parameter	zend_fcall_info_cache * fcc	3174:123:95092:95117	50255	4	True				
ANR	51671	ParameterType	zend_fcall_info_cache *		50255	0					
ANR	51672	Identifier	fcc		50255	1					
ANR	51673	Parameter	char * * error	3174:151:95120:95131	50255	5	True				
ANR	51674	ParameterType	char * *		50255	0					
ANR	51675	Identifier	error		50255	1					
ANR	51676	CFGEntryNode	ENTRY		50255		True				
ANR	51677	CFGExitNode	EXIT		50255		True				
ANR	51678	Symbol	callable		50255						
ANR	51679	Symbol	object -> ce		50255						
ANR	51680	Symbol	* callable_name		50255						
ANR	51681	Symbol	fcc -> calling_scope		50255						
ANR	51682	Symbol	ZEND_OVERLOADED_FUNCTION_TEMPORARY		50255						
ANR	51683	Symbol	* ce		50255						
ANR	51684	Symbol	* fcc		50255						
ANR	51685	Symbol	& fcc -> object		50255						
ANR	51686	Symbol	fcc_local		50255						
ANR	51687	Symbol	zend_string_init		50255						
ANR	51688	Symbol	check_flags		50255						
ANR	51689	Symbol	EG ( objects_store ) . object_buckets		50255						
ANR	51690	Symbol	& strict_class		50255						
ANR	51691	Symbol	* * fcc		50255						
ANR	51692	Symbol	Z_OBJ_HANDLER_P		50255						
ANR	51693	Symbol	ZEND_OVERLOADED_FUNCTION		50255						
ANR	51694	Symbol	IS_STRING		50255						
ANR	51695	Symbol	ce -> name		50255						
ANR	51696	Symbol	& fcc -> function_handler		50255						
ANR	51697	Symbol	ret		50255						
ANR	51698	Symbol	IS_OBJ_VALID		50255						
ANR	51699	Symbol	* EG ( objects_store ) . object_buckets		50255						
ANR	51700	Symbol	zend_hash_index_find		50255						
ANR	51701	Symbol	EG		50255						
ANR	51702	Symbol	zend_string_alloc		50255						
ANR	51703	Symbol	NULL		50255						
ANR	51704	Symbol	method		50255						
ANR	51705	Symbol	* fcc -> calling_scope		50255						
ANR	51706	Symbol	zend_string_copy		50255						
ANR	51707	Symbol	ZEND_ACC_CALL_VIA_TRAMPOLINE		50255						
ANR	51708	Symbol	zend_is_callable_check_func		50255						
ANR	51709	Symbol	* error		50255						
ANR	51710	Symbol	fcc -> called_scope		50255						
ANR	51711	Symbol	fcc -> calling_scope -> name		50255						
ANR	51712	Symbol	Z_STR_P		50255						
ANR	51713	Symbol	& fcc -> calling_scope		50255						
ANR	51714	Symbol	fcc -> function_handler		50255						
ANR	51715	Symbol	fcc -> function_handler -> common		50255						
ANR	51716	Symbol	fcc -> function_handler -> common . fn_flags		50255						
ANR	51717	Symbol	Z_ISREF_P		50255						
ANR	51718	Symbol	object		50255						
ANR	51719	Symbol	* object -> handle		50255						
ANR	51720	Symbol	IS_CALLABLE_CHECK_SYNTAX_ONLY		50255						
ANR	51721	Symbol	Z_OBJ_P		50255						
ANR	51722	Symbol	fcc		50255						
ANR	51723	Symbol	* EG		50255						
ANR	51724	Symbol	error		50255						
ANR	51725	Symbol	* object		50255						
ANR	51726	Symbol	callable_name		50255						
ANR	51727	Symbol	Z_OBJCE_P		50255						
ANR	51728	Symbol	Z_STRLEN_P		50255						
ANR	51729	Symbol	Z_ARRVAL_P		50255						
ANR	51730	Symbol	fcc -> initialized		50255						
ANR	51731	Symbol	strict_class		50255						
ANR	51732	Symbol	* fcc -> function_handler		50255						
ANR	51733	Symbol	ce		50255						
ANR	51734	Symbol	Z_OBJ_HANDLE_P		50255						
ANR	51735	Symbol	SUCCESS		50255						
ANR	51736	Symbol	get_closure		50255						
ANR	51737	Symbol	zend_hash_num_elements		50255						
ANR	51738	Symbol	objects_store		50255						
ANR	51739	Symbol	fcc -> function_handler -> type		50255						
ANR	51740	Symbol	zval_get_string		50255						
ANR	51741	Symbol	fcc -> function_handler -> common . function_name		50255						
ANR	51742	Symbol	fcc -> object		50255						
ANR	51743	Symbol	Z_TYPE_P		50255						
ANR	51744	Symbol	Z_STRVAL_P		50255						
ANR	51745	Symbol	zend_is_callable_check_class		50255						
ANR	51746	Symbol	ptr		50255						
ANR	51747	Symbol	ZSTR_VAL		50255						
ANR	51748	Symbol	obj		50255						
ANR	51749	Symbol	object -> handle		50255						
ANR	51750	Symbol	Z_REFVAL_P		50255						
ANR	51751	Symbol	* * object		50255						
ANR	51752	Symbol	ZSTR_LEN		50255						
ANR	51753	Symbol	& fcc_local		50255						
ANR	51754	Symbol	IS_OBJECT		50255						
ANR	51755	Symbol	* Z_OBJ_HANDLE_P		50255						
ANR	51756	Function	zend_is_callable	3373:0:101476:101672							
ANR	51757	FunctionDef	"zend_is_callable (zval * callable , uint check_flags , zend_string * * callable_name)"		51756	0					
ANR	51758	CompoundStatement		3374:0:101585:101672	51756	0					
ANR	51759	ReturnStatement	"return zend_is_callable_ex ( callable , NULL , check_flags , callable_name , NULL , NULL ) ;"	3375:1:101588:101670	51756	0	True				
ANR	51760	CallExpression	"zend_is_callable_ex ( callable , NULL , check_flags , callable_name , NULL , NULL )"		51756	0					
ANR	51761	Callee	zend_is_callable_ex		51756	0					
ANR	51762	Identifier	zend_is_callable_ex		51756	0					
ANR	51763	ArgumentList	callable		51756	1					
ANR	51764	Argument	callable		51756	0					
ANR	51765	Identifier	callable		51756	0					
ANR	51766	Argument	NULL		51756	1					
ANR	51767	Identifier	NULL		51756	0					
ANR	51768	Argument	check_flags		51756	2					
ANR	51769	Identifier	check_flags		51756	0					
ANR	51770	Argument	callable_name		51756	3					
ANR	51771	Identifier	callable_name		51756	0					
ANR	51772	Argument	NULL		51756	4					
ANR	51773	Identifier	NULL		51756	0					
ANR	51774	Argument	NULL		51756	5					
ANR	51775	Identifier	NULL		51756	0					
ANR	51776	ReturnType	ZEND_API zend_bool		51756	1					
ANR	51777	Identifier	zend_is_callable		51756	2					
ANR	51778	ParameterList	"zval * callable , uint check_flags , zend_string * * callable_name"		51756	3					
ANR	51779	Parameter	zval * callable	3373:36:101512:101525	51756	0	True				
ANR	51780	ParameterType	zval *		51756	0					
ANR	51781	Identifier	callable		51756	1					
ANR	51782	Parameter	uint check_flags	3373:52:101528:101543	51756	1	True				
ANR	51783	ParameterType	uint		51756	0					
ANR	51784	Identifier	check_flags		51756	1					
ANR	51785	Parameter	zend_string * * callable_name	3373:70:101546:101572	51756	2	True				
ANR	51786	ParameterType	zend_string * *		51756	0					
ANR	51787	Identifier	callable_name		51756	1					
ANR	51788	CFGEntryNode	ENTRY		51756		True				
ANR	51789	CFGExitNode	EXIT		51756		True				
ANR	51790	Symbol	check_flags		51756						
ANR	51791	Symbol	callable		51756						
ANR	51792	Symbol	NULL		51756						
ANR	51793	Symbol	zend_is_callable_ex		51756						
ANR	51794	Symbol	callable_name		51756						
ANR	51795	Function	zend_make_callable	3379:0:101685:102651							
ANR	51796	FunctionDef	"zend_make_callable (zval * callable , zend_string * * callable_name)"		51795	0					
ANR	51797	CompoundStatement		3380:0:101778:102651	51795	0					
ANR	51798	IdentifierDeclStatement	zend_fcall_info_cache fcc ;	3381:1:101781:101806	51795	0	True				
ANR	51799	IdentifierDecl	fcc		51795	0					
ANR	51800	IdentifierDeclType	zend_fcall_info_cache		51795	0					
ANR	51801	Identifier	fcc		51795	1					
ANR	51802	IfStatement	"if ( zend_is_callable_ex ( callable , NULL , IS_CALLABLE_STRICT , callable_name , & fcc , NULL ) )"		51795	1					
ANR	51803	Condition	"zend_is_callable_ex ( callable , NULL , IS_CALLABLE_STRICT , callable_name , & fcc , NULL )"	3383:5:101814:101895	51795	0	True				
ANR	51804	CallExpression	"zend_is_callable_ex ( callable , NULL , IS_CALLABLE_STRICT , callable_name , & fcc , NULL )"		51795	0					
ANR	51805	Callee	zend_is_callable_ex		51795	0					
ANR	51806	Identifier	zend_is_callable_ex		51795	0					
ANR	51807	ArgumentList	callable		51795	1					
ANR	51808	Argument	callable		51795	0					
ANR	51809	Identifier	callable		51795	0					
ANR	51810	Argument	NULL		51795	1					
ANR	51811	Identifier	NULL		51795	0					
ANR	51812	Argument	IS_CALLABLE_STRICT		51795	2					
ANR	51813	Identifier	IS_CALLABLE_STRICT		51795	0					
ANR	51814	Argument	callable_name		51795	3					
ANR	51815	Identifier	callable_name		51795	0					
ANR	51816	Argument	& fcc		51795	4					
ANR	51817	UnaryOperationExpression	& fcc		51795	0					
ANR	51818	UnaryOperator	&		51795	0					
ANR	51819	Identifier	fcc		51795	1					
ANR	51820	Argument	NULL		51795	5					
ANR	51821	Identifier	NULL		51795	0					
ANR	51822	CompoundStatement		4:89:119:119	51795	1					
ANR	51823	IfStatement	if ( Z_TYPE_P ( callable ) == IS_STRING && fcc . calling_scope )		51795	0					
ANR	51824	Condition	Z_TYPE_P ( callable ) == IS_STRING && fcc . calling_scope	3384:6:101906:101957	51795	0	True				
ANR	51825	AndExpression	Z_TYPE_P ( callable ) == IS_STRING && fcc . calling_scope		51795	0		&&			
ANR	51826	EqualityExpression	Z_TYPE_P ( callable ) == IS_STRING		51795	0		==			
ANR	51827	CallExpression	Z_TYPE_P ( callable )		51795	0					
ANR	51828	Callee	Z_TYPE_P		51795	0					
ANR	51829	Identifier	Z_TYPE_P		51795	0					
ANR	51830	ArgumentList	callable		51795	1					
ANR	51831	Argument	callable		51795	0					
ANR	51832	Identifier	callable		51795	0					
ANR	51833	Identifier	IS_STRING		51795	1					
ANR	51834	MemberAccess	fcc . calling_scope		51795	1					
ANR	51835	Identifier	fcc		51795	0					
ANR	51836	Identifier	calling_scope		51795	1					
ANR	51837	CompoundStatement		5:60:181:181	51795	1					
ANR	51838	ExpressionStatement	zval_dtor ( callable )	3385:3:101965:101984	51795	0	True				
ANR	51839	CallExpression	zval_dtor ( callable )		51795	0					
ANR	51840	Callee	zval_dtor		51795	0					
ANR	51841	Identifier	zval_dtor		51795	0					
ANR	51842	ArgumentList	callable		51795	1					
ANR	51843	Argument	callable		51795	0					
ANR	51844	Identifier	callable		51795	0					
ANR	51845	ExpressionStatement	array_init ( callable )	3386:3:101989:102009	51795	1	True				
ANR	51846	CallExpression	array_init ( callable )		51795	0					
ANR	51847	Callee	array_init		51795	0					
ANR	51848	Identifier	array_init		51795	0					
ANR	51849	ArgumentList	callable		51795	1					
ANR	51850	Argument	callable		51795	0					
ANR	51851	Identifier	callable		51795	0					
ANR	51852	ExpressionStatement	"add_next_index_str ( callable , zend_string_copy ( fcc . calling_scope -> name ) )"	3387:3:102014:102085	51795	2	True				
ANR	51853	CallExpression	"add_next_index_str ( callable , zend_string_copy ( fcc . calling_scope -> name ) )"		51795	0					
ANR	51854	Callee	add_next_index_str		51795	0					
ANR	51855	Identifier	add_next_index_str		51795	0					
ANR	51856	ArgumentList	callable		51795	1					
ANR	51857	Argument	callable		51795	0					
ANR	51858	Identifier	callable		51795	0					
ANR	51859	Argument	zend_string_copy ( fcc . calling_scope -> name )		51795	1					
ANR	51860	CallExpression	zend_string_copy ( fcc . calling_scope -> name )		51795	0					
ANR	51861	Callee	zend_string_copy		51795	0					
ANR	51862	Identifier	zend_string_copy		51795	0					
ANR	51863	ArgumentList	fcc . calling_scope -> name		51795	1					
ANR	51864	Argument	fcc . calling_scope -> name		51795	0					
ANR	51865	PtrMemberAccess	fcc . calling_scope -> name		51795	0					
ANR	51866	MemberAccess	fcc . calling_scope		51795	0					
ANR	51867	Identifier	fcc		51795	0					
ANR	51868	Identifier	calling_scope		51795	1					
ANR	51869	Identifier	name		51795	1					
ANR	51870	ExpressionStatement	"add_next_index_str ( callable , zend_string_copy ( fcc . function_handler -> common . function_name ) )"	3388:3:102090:102180	51795	3	True				
ANR	51871	CallExpression	"add_next_index_str ( callable , zend_string_copy ( fcc . function_handler -> common . function_name ) )"		51795	0					
ANR	51872	Callee	add_next_index_str		51795	0					
ANR	51873	Identifier	add_next_index_str		51795	0					
ANR	51874	ArgumentList	callable		51795	1					
ANR	51875	Argument	callable		51795	0					
ANR	51876	Identifier	callable		51795	0					
ANR	51877	Argument	zend_string_copy ( fcc . function_handler -> common . function_name )		51795	1					
ANR	51878	CallExpression	zend_string_copy ( fcc . function_handler -> common . function_name )		51795	0					
ANR	51879	Callee	zend_string_copy		51795	0					
ANR	51880	Identifier	zend_string_copy		51795	0					
ANR	51881	ArgumentList	fcc . function_handler -> common . function_name		51795	1					
ANR	51882	Argument	fcc . function_handler -> common . function_name		51795	0					
ANR	51883	MemberAccess	fcc . function_handler -> common . function_name		51795	0					
ANR	51884	PtrMemberAccess	fcc . function_handler -> common		51795	0					
ANR	51885	MemberAccess	fcc . function_handler		51795	0					
ANR	51886	Identifier	fcc		51795	0					
ANR	51887	Identifier	function_handler		51795	1					
ANR	51888	Identifier	common		51795	1					
ANR	51889	Identifier	function_name		51795	1					
ANR	51890	IfStatement	if ( fcc . function_handler && ( ( fcc . function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) || fcc . function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY || fcc . function_handler -> type == ZEND_OVERLOADED_FUNCTION ) )		51795	1					
ANR	51891	Condition	fcc . function_handler && ( ( fcc . function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) || fcc . function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY || fcc . function_handler -> type == ZEND_OVERLOADED_FUNCTION )	3390:6:102192:102430	51795	0	True				
ANR	51892	AndExpression	fcc . function_handler && ( ( fcc . function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) || fcc . function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY || fcc . function_handler -> type == ZEND_OVERLOADED_FUNCTION )		51795	0		&&			
ANR	51893	MemberAccess	fcc . function_handler		51795	0					
ANR	51894	Identifier	fcc		51795	0					
ANR	51895	Identifier	function_handler		51795	1					
ANR	51896	OrExpression	( fcc . function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE ) || fcc . function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY || fcc . function_handler -> type == ZEND_OVERLOADED_FUNCTION		51795	1		||			
ANR	51897	BitAndExpression	fcc . function_handler -> common . fn_flags & ZEND_ACC_CALL_VIA_TRAMPOLINE		51795	0		&			
ANR	51898	MemberAccess	fcc . function_handler -> common . fn_flags		51795	0					
ANR	51899	PtrMemberAccess	fcc . function_handler -> common		51795	0					
ANR	51900	MemberAccess	fcc . function_handler		51795	0					
ANR	51901	Identifier	fcc		51795	0					
ANR	51902	Identifier	function_handler		51795	1					
ANR	51903	Identifier	common		51795	1					
ANR	51904	Identifier	fn_flags		51795	1					
ANR	51905	Identifier	ZEND_ACC_CALL_VIA_TRAMPOLINE		51795	1					
ANR	51906	OrExpression	fcc . function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY || fcc . function_handler -> type == ZEND_OVERLOADED_FUNCTION		51795	1		||			
ANR	51907	EqualityExpression	fcc . function_handler -> type == ZEND_OVERLOADED_FUNCTION_TEMPORARY		51795	0		==			
ANR	51908	PtrMemberAccess	fcc . function_handler -> type		51795	0					
ANR	51909	MemberAccess	fcc . function_handler		51795	0					
ANR	51910	Identifier	fcc		51795	0					
ANR	51911	Identifier	function_handler		51795	1					
ANR	51912	Identifier	type		51795	1					
ANR	51913	Identifier	ZEND_OVERLOADED_FUNCTION_TEMPORARY		51795	1					
ANR	51914	EqualityExpression	fcc . function_handler -> type == ZEND_OVERLOADED_FUNCTION		51795	1		==			
ANR	51915	PtrMemberAccess	fcc . function_handler -> type		51795	0					
ANR	51916	MemberAccess	fcc . function_handler		51795	0					
ANR	51917	Identifier	fcc		51795	0					
ANR	51918	Identifier	function_handler		51795	1					
ANR	51919	Identifier	type		51795	1					
ANR	51920	Identifier	ZEND_OVERLOADED_FUNCTION		51795	1					
ANR	51921	CompoundStatement		14:64:654:654	51795	1					
ANR	51922	IfStatement	if ( fcc . function_handler -> type != ZEND_OVERLOADED_FUNCTION )		51795	0					
ANR	51923	Condition	fcc . function_handler -> type != ZEND_OVERLOADED_FUNCTION	3394:7:102442:102495	51795	0	True				
ANR	51924	EqualityExpression	fcc . function_handler -> type != ZEND_OVERLOADED_FUNCTION		51795	0		!=			
ANR	51925	PtrMemberAccess	fcc . function_handler -> type		51795	0					
ANR	51926	MemberAccess	fcc . function_handler		51795	0					
ANR	51927	Identifier	fcc		51795	0					
ANR	51928	Identifier	function_handler		51795	1					
ANR	51929	Identifier	type		51795	1					
ANR	51930	Identifier	ZEND_OVERLOADED_FUNCTION		51795	1					
ANR	51931	CompoundStatement		15:63:719:719	51795	1					
ANR	51932	ExpressionStatement	zend_string_release ( fcc . function_handler -> common . function_name )	3395:4:102504:102567	51795	0	True				
ANR	51933	CallExpression	zend_string_release ( fcc . function_handler -> common . function_name )		51795	0					
ANR	51934	Callee	zend_string_release		51795	0					
ANR	51935	Identifier	zend_string_release		51795	0					
ANR	51936	ArgumentList	fcc . function_handler -> common . function_name		51795	1					
ANR	51937	Argument	fcc . function_handler -> common . function_name		51795	0					
ANR	51938	MemberAccess	fcc . function_handler -> common . function_name		51795	0					
ANR	51939	PtrMemberAccess	fcc . function_handler -> common		51795	0					
ANR	51940	MemberAccess	fcc . function_handler		51795	0					
ANR	51941	Identifier	fcc		51795	0					
ANR	51942	Identifier	function_handler		51795	1					
ANR	51943	Identifier	common		51795	1					
ANR	51944	Identifier	function_name		51795	1					
ANR	51945	ExpressionStatement	zend_free_trampoline ( fcc . function_handler )	3397:3:102577:102619	51795	1	True				
ANR	51946	CallExpression	zend_free_trampoline ( fcc . function_handler )		51795	0					
ANR	51947	Callee	zend_free_trampoline		51795	0					
ANR	51948	Identifier	zend_free_trampoline		51795	0					
ANR	51949	ArgumentList	fcc . function_handler		51795	1					
ANR	51950	Argument	fcc . function_handler		51795	0					
ANR	51951	MemberAccess	fcc . function_handler		51795	0					
ANR	51952	Identifier	fcc		51795	0					
ANR	51953	Identifier	function_handler		51795	1					
ANR	51954	ReturnStatement	return 1 ;	3399:2:102627:102635	51795	2	True				
ANR	51955	PrimaryExpression	1		51795	0					
ANR	51956	ReturnStatement	return 0 ;	3401:1:102641:102649	51795	2	True				
ANR	51957	PrimaryExpression	0		51795	0					
ANR	51958	ReturnType	ZEND_API zend_bool		51795	1					
ANR	51959	Identifier	zend_make_callable		51795	2					
ANR	51960	ParameterList	"zval * callable , zend_string * * callable_name"		51795	3					
ANR	51961	Parameter	zval * callable	3379:38:101723:101736	51795	0	True				
ANR	51962	ParameterType	zval *		51795	0					
ANR	51963	Identifier	callable		51795	1					
ANR	51964	Parameter	zend_string * * callable_name	3379:54:101739:101765	51795	1	True				
ANR	51965	ParameterType	zend_string * *		51795	0					
ANR	51966	Identifier	callable_name		51795	1					
ANR	51967	CFGEntryNode	ENTRY		51795		True				
ANR	51968	CFGExitNode	EXIT		51795		True				
ANR	51969	Symbol	fcc . calling_scope -> name		51795						
ANR	51970	Symbol	callable		51795						
ANR	51971	Symbol	NULL		51795						
ANR	51972	Symbol	zend_is_callable_ex		51795						
ANR	51973	Symbol	fcc		51795						
ANR	51974	Symbol	fcc . function_handler		51795						
ANR	51975	Symbol	& fcc		51795						
ANR	51976	Symbol	fcc . calling_scope		51795						
ANR	51977	Symbol	zend_string_copy		51795						
ANR	51978	Symbol	ZEND_ACC_CALL_VIA_TRAMPOLINE		51795						
ANR	51979	Symbol	ZEND_OVERLOADED_FUNCTION_TEMPORARY		51795						
ANR	51980	Symbol	Z_TYPE_P		51795						
ANR	51981	Symbol	callable_name		51795						
ANR	51982	Symbol	* fcc . calling_scope		51795						
ANR	51983	Symbol	* fcc		51795						
ANR	51984	Symbol	fcc . function_handler -> common . fn_flags		51795						
ANR	51985	Symbol	IS_CALLABLE_STRICT		51795						
ANR	51986	Symbol	fcc . function_handler -> common		51795						
ANR	51987	Symbol	fcc . function_handler -> type		51795						
ANR	51988	Symbol	fcc . function_handler -> common . function_name		51795						
ANR	51989	Symbol	* fcc . function_handler		51795						
ANR	51990	Symbol	IS_STRING		51795						
ANR	51991	Symbol	ZEND_OVERLOADED_FUNCTION		51795						
ANR	51992	Function	zend_fcall_info_init	3405:0:102664:103285							
ANR	51993	FunctionDef	"zend_fcall_info_init (zval * callable , uint check_flags , zend_fcall_info * fci , zend_fcall_info_cache * fcc , zend_string * * callable_name , char * * error)"		51992	0					
ANR	51994	CompoundStatement		3406:0:102835:103285	51992	0					
ANR	51995	IfStatement	"if ( ! zend_is_callable_ex ( callable , NULL , check_flags , callable_name , fcc , error ) )"		51992	0					
ANR	51996	Condition	"! zend_is_callable_ex ( callable , NULL , check_flags , callable_name , fcc , error )"	3407:5:102842:102917	51992	0	True				
ANR	51997	UnaryOperationExpression	"! zend_is_callable_ex ( callable , NULL , check_flags , callable_name , fcc , error )"		51992	0					
ANR	51998	UnaryOperator	!		51992	0					
ANR	51999	CallExpression	"zend_is_callable_ex ( callable , NULL , check_flags , callable_name , fcc , error )"		51992	1					
ANR	52000	Callee	zend_is_callable_ex		51992	0					
ANR	52001	Identifier	zend_is_callable_ex		51992	0					
ANR	52002	ArgumentList	callable		51992	1					
ANR	52003	Argument	callable		51992	0					
ANR	52004	Identifier	callable		51992	0					
ANR	52005	Argument	NULL		51992	1					
ANR	52006	Identifier	NULL		51992	0					
ANR	52007	Argument	check_flags		51992	2					
ANR	52008	Identifier	check_flags		51992	0					
ANR	52009	Argument	callable_name		51992	3					
ANR	52010	Identifier	callable_name		51992	0					
ANR	52011	Argument	fcc		51992	4					
ANR	52012	Identifier	fcc		51992	0					
ANR	52013	Argument	error		51992	5					
ANR	52014	Identifier	error		51992	0					
ANR	52015	CompoundStatement		2:83:84:84	51992	1					
ANR	52016	ReturnStatement	return FAILURE ;	3408:2:102924:102938	51992	0	True				
ANR	52017	Identifier	FAILURE		51992	0					
ANR	52018	ExpressionStatement	fci -> size = sizeof ( * fci )	3411:1:102945:102969	51992	1	True				
ANR	52019	AssignmentExpression	fci -> size = sizeof ( * fci )		51992	0		=			
ANR	52020	PtrMemberAccess	fci -> size		51992	0					
ANR	52021	Identifier	fci		51992	0					
ANR	52022	Identifier	size		51992	1					
ANR	52023	SizeofExpression	sizeof ( * fci )		51992	1					
ANR	52024	Sizeof	sizeof		51992	0					
ANR	52025	UnaryOperationExpression	* fci		51992	1					
ANR	52026	UnaryOperator	*		51992	0					
ANR	52027	Identifier	fci		51992	1					
ANR	52028	ExpressionStatement	fci -> function_table = fcc -> calling_scope ? & fcc -> calling_scope -> function_table : EG ( function_table )	3412:1:102972:103071	51992	2	True				
ANR	52029	AssignmentExpression	fci -> function_table = fcc -> calling_scope ? & fcc -> calling_scope -> function_table : EG ( function_table )		51992	0		=			
ANR	52030	PtrMemberAccess	fci -> function_table		51992	0					
ANR	52031	Identifier	fci		51992	0					
ANR	52032	Identifier	function_table		51992	1					
ANR	52033	ConditionalExpression	fcc -> calling_scope ? & fcc -> calling_scope -> function_table : EG ( function_table )		51992	1					
ANR	52034	Condition	fcc -> calling_scope		51992	0					
ANR	52035	PtrMemberAccess	fcc -> calling_scope		51992	0					
ANR	52036	Identifier	fcc		51992	0					
ANR	52037	Identifier	calling_scope		51992	1					
ANR	52038	UnaryOperationExpression	& fcc -> calling_scope -> function_table		51992	1					
ANR	52039	UnaryOperator	&		51992	0					
ANR	52040	PtrMemberAccess	fcc -> calling_scope -> function_table		51992	1					
ANR	52041	PtrMemberAccess	fcc -> calling_scope		51992	0					
ANR	52042	Identifier	fcc		51992	0					
ANR	52043	Identifier	calling_scope		51992	1					
ANR	52044	Identifier	function_table		51992	1					
ANR	52045	CallExpression	EG ( function_table )		51992	2					
ANR	52046	Callee	EG		51992	0					
ANR	52047	Identifier	EG		51992	0					
ANR	52048	ArgumentList	function_table		51992	1					
ANR	52049	Argument	function_table		51992	0					
ANR	52050	Identifier	function_table		51992	0					
ANR	52051	ExpressionStatement	fci -> object = fcc -> object	3413:1:103074:103099	51992	3	True				
ANR	52052	AssignmentExpression	fci -> object = fcc -> object		51992	0		=			
ANR	52053	PtrMemberAccess	fci -> object		51992	0					
ANR	52054	Identifier	fci		51992	0					
ANR	52055	Identifier	object		51992	1					
ANR	52056	PtrMemberAccess	fcc -> object		51992	1					
ANR	52057	Identifier	fcc		51992	0					
ANR	52058	Identifier	object		51992	1					
ANR	52059	ExpressionStatement	"ZVAL_COPY_VALUE ( & fci -> function_name , callable )"	3414:1:103102:103148	51992	4	True				
ANR	52060	CallExpression	"ZVAL_COPY_VALUE ( & fci -> function_name , callable )"		51992	0					
ANR	52061	Callee	ZVAL_COPY_VALUE		51992	0					
ANR	52062	Identifier	ZVAL_COPY_VALUE		51992	0					
ANR	52063	ArgumentList	& fci -> function_name		51992	1					
ANR	52064	Argument	& fci -> function_name		51992	0					
ANR	52065	UnaryOperationExpression	& fci -> function_name		51992	0					
ANR	52066	UnaryOperator	&		51992	0					
ANR	52067	PtrMemberAccess	fci -> function_name		51992	1					
ANR	52068	Identifier	fci		51992	0					
ANR	52069	Identifier	function_name		51992	1					
ANR	52070	Argument	callable		51992	1					
ANR	52071	Identifier	callable		51992	0					
ANR	52072	ExpressionStatement	fci -> retval = NULL	3415:1:103151:103169	51992	5	True				
ANR	52073	AssignmentExpression	fci -> retval = NULL		51992	0		=			
ANR	52074	PtrMemberAccess	fci -> retval		51992	0					
ANR	52075	Identifier	fci		51992	0					
ANR	52076	Identifier	retval		51992	1					
ANR	52077	Identifier	NULL		51992	1					
ANR	52078	ExpressionStatement	fci -> param_count = 0	3416:1:103172:103192	51992	6	True				
ANR	52079	AssignmentExpression	fci -> param_count = 0		51992	0		=			
ANR	52080	PtrMemberAccess	fci -> param_count		51992	0					
ANR	52081	Identifier	fci		51992	0					
ANR	52082	Identifier	param_count		51992	1					
ANR	52083	PrimaryExpression	0		51992	1					
ANR	52084	ExpressionStatement	fci -> params = NULL	3417:1:103195:103213	51992	7	True				
ANR	52085	AssignmentExpression	fci -> params = NULL		51992	0		=			
ANR	52086	PtrMemberAccess	fci -> params		51992	0					
ANR	52087	Identifier	fci		51992	0					
ANR	52088	Identifier	params		51992	1					
ANR	52089	Identifier	NULL		51992	1					
ANR	52090	ExpressionStatement	fci -> no_separation = 1	3418:1:103216:103238	51992	8	True				
ANR	52091	AssignmentExpression	fci -> no_separation = 1		51992	0		=			
ANR	52092	PtrMemberAccess	fci -> no_separation		51992	0					
ANR	52093	Identifier	fci		51992	0					
ANR	52094	Identifier	no_separation		51992	1					
ANR	52095	PrimaryExpression	1		51992	1					
ANR	52096	ExpressionStatement	fci -> symbol_table = NULL	3419:1:103241:103265	51992	9	True				
ANR	52097	AssignmentExpression	fci -> symbol_table = NULL		51992	0		=			
ANR	52098	PtrMemberAccess	fci -> symbol_table		51992	0					
ANR	52099	Identifier	fci		51992	0					
ANR	52100	Identifier	symbol_table		51992	1					
ANR	52101	Identifier	NULL		51992	1					
ANR	52102	ReturnStatement	return SUCCESS ;	3421:1:103269:103283	51992	10	True				
ANR	52103	Identifier	SUCCESS		51992	0					
ANR	52104	ReturnType	ZEND_API int		51992	1					
ANR	52105	Identifier	zend_fcall_info_init		51992	2					
ANR	52106	ParameterList	"zval * callable , uint check_flags , zend_fcall_info * fci , zend_fcall_info_cache * fcc , zend_string * * callable_name , char * * error"		51992	3					
ANR	52107	Parameter	zval * callable	3405:34:102698:102711	51992	0	True				
ANR	52108	ParameterType	zval *		51992	0					
ANR	52109	Identifier	callable		51992	1					
ANR	52110	Parameter	uint check_flags	3405:50:102714:102729	51992	1	True				
ANR	52111	ParameterType	uint		51992	0					
ANR	52112	Identifier	check_flags		51992	1					
ANR	52113	Parameter	zend_fcall_info * fci	3405:68:102732:102751	51992	2	True				
ANR	52114	ParameterType	zend_fcall_info *		51992	0					
ANR	52115	Identifier	fci		51992	1					
ANR	52116	Parameter	zend_fcall_info_cache * fcc	3405:90:102754:102779	51992	3	True				
ANR	52117	ParameterType	zend_fcall_info_cache *		51992	0					
ANR	52118	Identifier	fcc		51992	1					
ANR	52119	Parameter	zend_string * * callable_name	3405:118:102782:102808	51992	4	True				
ANR	52120	ParameterType	zend_string * *		51992	0					
ANR	52121	Identifier	callable_name		51992	1					
ANR	52122	Parameter	char * * error	3405:147:102811:102822	51992	5	True				
ANR	52123	ParameterType	char * *		51992	0					
ANR	52124	Identifier	error		51992	1					
ANR	52125	CFGEntryNode	ENTRY		51992		True				
ANR	52126	CFGExitNode	EXIT		51992		True				
ANR	52127	Symbol	fci -> object		51992						
ANR	52128	Symbol	callable		51992						
ANR	52129	Symbol	zend_is_callable_ex		51992						
ANR	52130	Symbol	& fcc -> calling_scope -> function_table		51992						
ANR	52131	Symbol	fci -> size		51992						
ANR	52132	Symbol	fcc		51992						
ANR	52133	Symbol	fcc -> calling_scope		51992						
ANR	52134	Symbol	* fci		51992						
ANR	52135	Symbol	error		51992						
ANR	52136	Symbol	fci		51992						
ANR	52137	Symbol	callable_name		51992						
ANR	52138	Symbol	fci -> symbol_table		51992						
ANR	52139	Symbol	* fcc		51992						
ANR	52140	Symbol	check_flags		51992						
ANR	52141	Symbol	fci -> retval		51992						
ANR	52142	Symbol	fci -> no_separation		51992						
ANR	52143	Symbol	EG		51992						
ANR	52144	Symbol	NULL		51992						
ANR	52145	Symbol	SUCCESS		51992						
ANR	52146	Symbol	fci -> params		51992						
ANR	52147	Symbol	fcc -> object		51992						
ANR	52148	Symbol	FAILURE		51992						
ANR	52149	Symbol	fci -> param_count		51992						
ANR	52150	Symbol	function_table		51992						
ANR	52151	Symbol	fci -> function_table		51992						
ANR	52152	Symbol	& fci -> function_name		51992						
ANR	52153	Function	zend_fcall_info_args_clear	3425:0:103298:103637							
ANR	52154	FunctionDef	"zend_fcall_info_args_clear (zend_fcall_info * fci , int free_mem)"		52153	0					
ANR	52155	CompoundStatement		3426:0:103385:103637	52153	0					
ANR	52156	IfStatement	if ( fci -> params )		52153	0					
ANR	52157	Condition	fci -> params	3427:5:103392:103402	52153	0	True				
ANR	52158	PtrMemberAccess	fci -> params		52153	0					
ANR	52159	Identifier	fci		52153	0					
ANR	52160	Identifier	params		52153	1					
ANR	52161	CompoundStatement		4:2:48:80	52153	1					
ANR	52162	IdentifierDeclStatement	zval * p = fci -> params ;	3428:2:103409:103430	52153	0	True				
ANR	52163	IdentifierDecl	* p = fci -> params		52153	0					
ANR	52164	IdentifierDeclType	zval *		52153	0					
ANR	52165	Identifier	p		52153	1					
ANR	52166	AssignmentExpression	* p = fci -> params		52153	2		=			
ANR	52167	Identifier	p		52153	0					
ANR	52168	PtrMemberAccess	fci -> params		52153	1					
ANR	52169	Identifier	fci		52153	0					
ANR	52170	Identifier	params		52153	1					
ANR	52171	IdentifierDeclStatement	zval * end = p + fci -> param_count ;	3429:2:103434:103466	52153	1	True				
ANR	52172	IdentifierDecl	* end = p + fci -> param_count		52153	0					
ANR	52173	IdentifierDeclType	zval *		52153	0					
ANR	52174	Identifier	end		52153	1					
ANR	52175	AssignmentExpression	* end = p + fci -> param_count		52153	2		=			
ANR	52176	Identifier	end		52153	0					
ANR	52177	AdditiveExpression	p + fci -> param_count		52153	1		+			
ANR	52178	Identifier	p		52153	0					
ANR	52179	PtrMemberAccess	fci -> param_count		52153	1					
ANR	52180	Identifier	fci		52153	0					
ANR	52181	Identifier	param_count		52153	1					
ANR	52182	WhileStatement	while ( p != end )		52153	2					
ANR	52183	Condition	p != end	3431:9:103478:103485	52153	0	True				
ANR	52184	EqualityExpression	p != end		52153	0		!=			
ANR	52185	Identifier	p		52153	0					
ANR	52186	Identifier	end		52153	1					
ANR	52187	CompoundStatement		6:19:102:102	52153	1					
ANR	52188	Statement	i_zval_ptr_dtor	3432:3:103493:103507	52153	0	True				
ANR	52189	Statement	(	3432:18:103508:103508	52153	1	True				
ANR	52190	Statement	p	3432:19:103509:103509	52153	2	True				
ANR	52191	Statement	ZEND_FILE_LINE_CC	3432:21:103511:103527	52153	3	True				
ANR	52192	Statement	)	3432:38:103528:103528	52153	4	True				
ANR	52193	ExpressionStatement		3432:39:103529:103529	52153	5	True				
ANR	52194	ExpressionStatement	p ++	3433:3:103534:103537	52153	6	True				
ANR	52195	PostIncDecOperationExpression	p ++		52153	0					
ANR	52196	Identifier	p		52153	0					
ANR	52197	IncDec	++		52153	1					
ANR	52198	IfStatement	if ( free_mem )		52153	3					
ANR	52199	Condition	free_mem	3435:6:103549:103556	52153	0	True				
ANR	52200	Identifier	free_mem		52153	0					
ANR	52201	CompoundStatement		10:16:173:173	52153	1					
ANR	52202	ExpressionStatement	efree ( fci -> params )	3436:3:103564:103582	52153	0	True				
ANR	52203	CallExpression	efree ( fci -> params )		52153	0					
ANR	52204	Callee	efree		52153	0					
ANR	52205	Identifier	efree		52153	0					
ANR	52206	ArgumentList	fci -> params		52153	1					
ANR	52207	Argument	fci -> params		52153	0					
ANR	52208	PtrMemberAccess	fci -> params		52153	0					
ANR	52209	Identifier	fci		52153	0					
ANR	52210	Identifier	params		52153	1					
ANR	52211	ExpressionStatement	fci -> params = NULL	3437:3:103587:103605	52153	1	True				
ANR	52212	AssignmentExpression	fci -> params = NULL		52153	0		=			
ANR	52213	PtrMemberAccess	fci -> params		52153	0					
ANR	52214	Identifier	fci		52153	0					
ANR	52215	Identifier	params		52153	1					
ANR	52216	Identifier	NULL		52153	1					
ANR	52217	ExpressionStatement	fci -> param_count = 0	3440:1:103615:103635	52153	1	True				
ANR	52218	AssignmentExpression	fci -> param_count = 0		52153	0		=			
ANR	52219	PtrMemberAccess	fci -> param_count		52153	0					
ANR	52220	Identifier	fci		52153	0					
ANR	52221	Identifier	param_count		52153	1					
ANR	52222	PrimaryExpression	0		52153	1					
ANR	52223	ReturnType	ZEND_API void		52153	1					
ANR	52224	Identifier	zend_fcall_info_args_clear		52153	2					
ANR	52225	ParameterList	"zend_fcall_info * fci , int free_mem"		52153	3					
ANR	52226	Parameter	zend_fcall_info * fci	3425:41:103339:103358	52153	0	True				
ANR	52227	ParameterType	zend_fcall_info *		52153	0					
ANR	52228	Identifier	fci		52153	1					
ANR	52229	Parameter	int free_mem	3425:63:103361:103372	52153	1	True				
ANR	52230	ParameterType	int		52153	0					
ANR	52231	Identifier	free_mem		52153	1					
ANR	52232	CFGEntryNode	ENTRY		52153		True				
ANR	52233	CFGExitNode	EXIT		52153		True				
ANR	52234	Symbol	p		52153						
ANR	52235	Symbol	free_mem		52153						
ANR	52236	Symbol	NULL		52153						
ANR	52237	Symbol	fci -> params		52153						
ANR	52238	Symbol	fci -> param_count		52153						
ANR	52239	Symbol	* fci		52153						
ANR	52240	Symbol	end		52153						
ANR	52241	Symbol	fci		52153						
ANR	52242	Function	zend_fcall_info_args_save	3444:0:103650:103859							
ANR	52243	FunctionDef	"zend_fcall_info_args_save (zend_fcall_info * fci , int * param_count , zval * * params)"		52242	0					
ANR	52244	CompoundStatement		3445:0:103755:103859	52242	0					
ANR	52245	ExpressionStatement	* param_count = fci -> param_count	3446:1:103758:103789	52242	0	True				
ANR	52246	AssignmentExpression	* param_count = fci -> param_count		52242	0		=			
ANR	52247	UnaryOperationExpression	* param_count		52242	0					
ANR	52248	UnaryOperator	*		52242	0					
ANR	52249	Identifier	param_count		52242	1					
ANR	52250	PtrMemberAccess	fci -> param_count		52242	1					
ANR	52251	Identifier	fci		52242	0					
ANR	52252	Identifier	param_count		52242	1					
ANR	52253	ExpressionStatement	* params = fci -> params	3447:1:103792:103813	52242	1	True				
ANR	52254	AssignmentExpression	* params = fci -> params		52242	0		=			
ANR	52255	UnaryOperationExpression	* params		52242	0					
ANR	52256	UnaryOperator	*		52242	0					
ANR	52257	Identifier	params		52242	1					
ANR	52258	PtrMemberAccess	fci -> params		52242	1					
ANR	52259	Identifier	fci		52242	0					
ANR	52260	Identifier	params		52242	1					
ANR	52261	ExpressionStatement	fci -> param_count = 0	3448:1:103816:103836	52242	2	True				
ANR	52262	AssignmentExpression	fci -> param_count = 0		52242	0		=			
ANR	52263	PtrMemberAccess	fci -> param_count		52242	0					
ANR	52264	Identifier	fci		52242	0					
ANR	52265	Identifier	param_count		52242	1					
ANR	52266	PrimaryExpression	0		52242	1					
ANR	52267	ExpressionStatement	fci -> params = NULL	3449:1:103839:103857	52242	3	True				
ANR	52268	AssignmentExpression	fci -> params = NULL		52242	0		=			
ANR	52269	PtrMemberAccess	fci -> params		52242	0					
ANR	52270	Identifier	fci		52242	0					
ANR	52271	Identifier	params		52242	1					
ANR	52272	Identifier	NULL		52242	1					
ANR	52273	ReturnType	ZEND_API void		52242	1					
ANR	52274	Identifier	zend_fcall_info_args_save		52242	2					
ANR	52275	ParameterList	"zend_fcall_info * fci , int * param_count , zval * * params"		52242	3					
ANR	52276	Parameter	zend_fcall_info * fci	3444:40:103690:103709	52242	0	True				
ANR	52277	ParameterType	zend_fcall_info *		52242	0					
ANR	52278	Identifier	fci		52242	1					
ANR	52279	Parameter	int * param_count	3444:62:103712:103727	52242	1	True				
ANR	52280	ParameterType	int *		52242	0					
ANR	52281	Identifier	param_count		52242	1					
ANR	52282	Parameter	zval * * params	3444:80:103730:103742	52242	2	True				
ANR	52283	ParameterType	zval * *		52242	0					
ANR	52284	Identifier	params		52242	1					
ANR	52285	CFGEntryNode	ENTRY		52242		True				
ANR	52286	CFGExitNode	EXIT		52242		True				
ANR	52287	Symbol	NULL		52242						
ANR	52288	Symbol	fci -> params		52242						
ANR	52289	Symbol	param_count		52242						
ANR	52290	Symbol	fci -> param_count		52242						
ANR	52291	Symbol	* fci		52242						
ANR	52292	Symbol	* param_count		52242						
ANR	52293	Symbol	params		52242						
ANR	52294	Symbol	fci		52242						
ANR	52295	Symbol	* params		52242						
ANR	52296	Function	zend_fcall_info_args_restore	3453:0:103872:104073							
ANR	52297	FunctionDef	"zend_fcall_info_args_restore (zend_fcall_info * fci , int param_count , zval * params)"		52296	0					
ANR	52298	CompoundStatement		3454:0:103978:104073	52296	0					
ANR	52299	ExpressionStatement	"zend_fcall_info_args_clear ( fci , 1 )"	3455:1:103981:104015	52296	0	True				
ANR	52300	CallExpression	"zend_fcall_info_args_clear ( fci , 1 )"		52296	0					
ANR	52301	Callee	zend_fcall_info_args_clear		52296	0					
ANR	52302	Identifier	zend_fcall_info_args_clear		52296	0					
ANR	52303	ArgumentList	fci		52296	1					
ANR	52304	Argument	fci		52296	0					
ANR	52305	Identifier	fci		52296	0					
ANR	52306	Argument	1		52296	1					
ANR	52307	PrimaryExpression	1		52296	0					
ANR	52308	ExpressionStatement	fci -> param_count = param_count	3456:1:104018:104048	52296	1	True				
ANR	52309	AssignmentExpression	fci -> param_count = param_count		52296	0		=			
ANR	52310	PtrMemberAccess	fci -> param_count		52296	0					
ANR	52311	Identifier	fci		52296	0					
ANR	52312	Identifier	param_count		52296	1					
ANR	52313	Identifier	param_count		52296	1					
ANR	52314	ExpressionStatement	fci -> params = params	3457:1:104051:104071	52296	2	True				
ANR	52315	AssignmentExpression	fci -> params = params		52296	0		=			
ANR	52316	PtrMemberAccess	fci -> params		52296	0					
ANR	52317	Identifier	fci		52296	0					
ANR	52318	Identifier	params		52296	1					
ANR	52319	Identifier	params		52296	1					
ANR	52320	ReturnType	ZEND_API void		52296	1					
ANR	52321	Identifier	zend_fcall_info_args_restore		52296	2					
ANR	52322	ParameterList	"zend_fcall_info * fci , int param_count , zval * params"		52296	3					
ANR	52323	Parameter	zend_fcall_info * fci	3453:43:103915:103934	52296	0	True				
ANR	52324	ParameterType	zend_fcall_info *		52296	0					
ANR	52325	Identifier	fci		52296	1					
ANR	52326	Parameter	int param_count	3453:65:103937:103951	52296	1	True				
ANR	52327	ParameterType	int		52296	0					
ANR	52328	Identifier	param_count		52296	1					
ANR	52329	Parameter	zval * params	3453:82:103954:103965	52296	2	True				
ANR	52330	ParameterType	zval *		52296	0					
ANR	52331	Identifier	params		52296	1					
ANR	52332	CFGEntryNode	ENTRY		52296		True				
ANR	52333	CFGExitNode	EXIT		52296		True				
ANR	52334	Symbol	fci -> params		52296						
ANR	52335	Symbol	param_count		52296						
ANR	52336	Symbol	fci -> param_count		52296						
ANR	52337	Symbol	* fci		52296						
ANR	52338	Symbol	params		52296						
ANR	52339	Symbol	fci		52296						
ANR	52340	Function	zend_fcall_info_args_ex	3461:0:104086:104828							
ANR	52341	FunctionDef	"zend_fcall_info_args_ex (zend_fcall_info * fci , zend_function * func , zval * args)"		52340	0					
ANR	52342	CompoundStatement		3462:0:104188:104828	52340	0					
ANR	52343	IdentifierDeclStatement	"zval * arg , * params ;"	3463:1:104191:104209	52340	0	True				
ANR	52344	IdentifierDecl	* arg		52340	0					
ANR	52345	IdentifierDeclType	zval *		52340	0					
ANR	52346	Identifier	arg		52340	1					
ANR	52347	IdentifierDecl	* params		52340	1					
ANR	52348	IdentifierDeclType	zval *		52340	0					
ANR	52349	Identifier	params		52340	1					
ANR	52350	IdentifierDeclStatement	uint32_t n = 1 ;	3464:1:104212:104226	52340	1	True				
ANR	52351	IdentifierDecl	n = 1		52340	0					
ANR	52352	IdentifierDeclType	uint32_t		52340	0					
ANR	52353	Identifier	n		52340	1					
ANR	52354	AssignmentExpression	n = 1		52340	2		=			
ANR	52355	Identifier	n		52340	0					
ANR	52356	PrimaryExpression	1		52340	1					
ANR	52357	ExpressionStatement	"zend_fcall_info_args_clear ( fci , ! args )"	3466:1:104230:104268	52340	2	True				
ANR	52358	CallExpression	"zend_fcall_info_args_clear ( fci , ! args )"		52340	0					
ANR	52359	Callee	zend_fcall_info_args_clear		52340	0					
ANR	52360	Identifier	zend_fcall_info_args_clear		52340	0					
ANR	52361	ArgumentList	fci		52340	1					
ANR	52362	Argument	fci		52340	0					
ANR	52363	Identifier	fci		52340	0					
ANR	52364	Argument	! args		52340	1					
ANR	52365	UnaryOperationExpression	! args		52340	0					
ANR	52366	UnaryOperator	!		52340	0					
ANR	52367	Identifier	args		52340	1					
ANR	52368	IfStatement	if ( ! args )		52340	3					
ANR	52369	Condition	! args	3468:5:104276:104280	52340	0	True				
ANR	52370	UnaryOperationExpression	! args		52340	0					
ANR	52371	UnaryOperator	!		52340	0					
ANR	52372	Identifier	args		52340	1					
ANR	52373	CompoundStatement		7:12:94:94	52340	1					
ANR	52374	ReturnStatement	return SUCCESS ;	3469:2:104287:104301	52340	0	True				
ANR	52375	Identifier	SUCCESS		52340	0					
ANR	52376	IfStatement	if ( Z_TYPE_P ( args ) != IS_ARRAY )		52340	4					
ANR	52377	Condition	Z_TYPE_P ( args ) != IS_ARRAY	3472:5:104312:104337	52340	0	True				
ANR	52378	EqualityExpression	Z_TYPE_P ( args ) != IS_ARRAY		52340	0		!=			
ANR	52379	CallExpression	Z_TYPE_P ( args )		52340	0					
ANR	52380	Callee	Z_TYPE_P		52340	0					
ANR	52381	Identifier	Z_TYPE_P		52340	0					
ANR	52382	ArgumentList	args		52340	1					
ANR	52383	Argument	args		52340	0					
ANR	52384	Identifier	args		52340	0					
ANR	52385	Identifier	IS_ARRAY		52340	1					
ANR	52386	CompoundStatement		11:33:151:151	52340	1					
ANR	52387	ReturnStatement	return FAILURE ;	3473:2:104344:104358	52340	0	True				
ANR	52388	Identifier	FAILURE		52340	0					
ANR	52389	ExpressionStatement	fci -> param_count = zend_hash_num_elements ( Z_ARRVAL_P ( args ) )	3476:1:104365:104424	52340	5	True				
ANR	52390	AssignmentExpression	fci -> param_count = zend_hash_num_elements ( Z_ARRVAL_P ( args ) )		52340	0		=			
ANR	52391	PtrMemberAccess	fci -> param_count		52340	0					
ANR	52392	Identifier	fci		52340	0					
ANR	52393	Identifier	param_count		52340	1					
ANR	52394	CallExpression	zend_hash_num_elements ( Z_ARRVAL_P ( args ) )		52340	1					
ANR	52395	Callee	zend_hash_num_elements		52340	0					
ANR	52396	Identifier	zend_hash_num_elements		52340	0					
ANR	52397	ArgumentList	Z_ARRVAL_P ( args )		52340	1					
ANR	52398	Argument	Z_ARRVAL_P ( args )		52340	0					
ANR	52399	CallExpression	Z_ARRVAL_P ( args )		52340	0					
ANR	52400	Callee	Z_ARRVAL_P		52340	0					
ANR	52401	Identifier	Z_ARRVAL_P		52340	0					
ANR	52402	ArgumentList	args		52340	1					
ANR	52403	Argument	args		52340	0					
ANR	52404	Identifier	args		52340	0					
ANR	52405	ExpressionStatement	"fci -> params = params = ( zval * ) erealloc ( fci -> params , fci -> param_count * sizeof ( zval ) )"	3477:1:104427:104513	52340	6	True				
ANR	52406	AssignmentExpression	"fci -> params = params = ( zval * ) erealloc ( fci -> params , fci -> param_count * sizeof ( zval ) )"		52340	0		=			
ANR	52407	PtrMemberAccess	fci -> params		52340	0					
ANR	52408	Identifier	fci		52340	0					
ANR	52409	Identifier	params		52340	1					
ANR	52410	AssignmentExpression	"params = ( zval * ) erealloc ( fci -> params , fci -> param_count * sizeof ( zval ) )"		52340	1		=			
ANR	52411	Identifier	params		52340	0					
ANR	52412	CastExpression	"( zval * ) erealloc ( fci -> params , fci -> param_count * sizeof ( zval ) )"		52340	1					
ANR	52413	CastTarget	zval *		52340	0					
ANR	52414	CallExpression	"erealloc ( fci -> params , fci -> param_count * sizeof ( zval ) )"		52340	1					
ANR	52415	Callee	erealloc		52340	0					
ANR	52416	Identifier	erealloc		52340	0					
ANR	52417	ArgumentList	fci -> params		52340	1					
ANR	52418	Argument	fci -> params		52340	0					
ANR	52419	PtrMemberAccess	fci -> params		52340	0					
ANR	52420	Identifier	fci		52340	0					
ANR	52421	Identifier	params		52340	1					
ANR	52422	Argument	fci -> param_count * sizeof ( zval )		52340	1					
ANR	52423	MultiplicativeExpression	fci -> param_count * sizeof ( zval )		52340	0		*			
ANR	52424	PtrMemberAccess	fci -> param_count		52340	0					
ANR	52425	Identifier	fci		52340	0					
ANR	52426	Identifier	param_count		52340	1					
ANR	52427	SizeofExpression	sizeof ( zval )		52340	1					
ANR	52428	Sizeof	sizeof		52340	0					
ANR	52429	SizeofOperand	zval		52340	1					
ANR	52430	Statement	ZEND_HASH_FOREACH_VAL	3479:1:104517:104537	52340	7	True				
ANR	52431	Statement	(	3479:22:104538:104538	52340	8	True				
ANR	52432	Statement	Z_ARRVAL_P	3479:23:104539:104548	52340	9	True				
ANR	52433	Statement	(	3479:33:104549:104549	52340	10	True				
ANR	52434	Statement	args	3479:34:104550:104553	52340	11	True				
ANR	52435	Statement	)	3479:38:104554:104554	52340	12	True				
ANR	52436	Statement	","	3479:39:104555:104555	52340	13	True				
ANR	52437	Statement	arg	3479:41:104557:104559	52340	14	True				
ANR	52438	Statement	)	3479:44:104560:104560	52340	15	True				
ANR	52439	CompoundStatement		18:46:373:373	52340	16					
ANR	52440	IfStatement	"if ( func && ! Z_ISREF_P ( arg ) && ARG_SHOULD_BE_SENT_BY_REF ( func , n ) )"		52340	0					
ANR	52441	Condition	"func && ! Z_ISREF_P ( arg ) && ARG_SHOULD_BE_SENT_BY_REF ( func , n )"	3480:6:104570:104630	52340	0	True				
ANR	52442	AndExpression	"func && ! Z_ISREF_P ( arg ) && ARG_SHOULD_BE_SENT_BY_REF ( func , n )"		52340	0		&&			
ANR	52443	Identifier	func		52340	0					
ANR	52444	AndExpression	"! Z_ISREF_P ( arg ) && ARG_SHOULD_BE_SENT_BY_REF ( func , n )"		52340	1		&&			
ANR	52445	UnaryOperationExpression	! Z_ISREF_P ( arg )		52340	0					
ANR	52446	UnaryOperator	!		52340	0					
ANR	52447	CallExpression	Z_ISREF_P ( arg )		52340	1					
ANR	52448	Callee	Z_ISREF_P		52340	0					
ANR	52449	Identifier	Z_ISREF_P		52340	0					
ANR	52450	ArgumentList	arg		52340	1					
ANR	52451	Argument	arg		52340	0					
ANR	52452	Identifier	arg		52340	0					
ANR	52453	CallExpression	"ARG_SHOULD_BE_SENT_BY_REF ( func , n )"		52340	1					
ANR	52454	Callee	ARG_SHOULD_BE_SENT_BY_REF		52340	0					
ANR	52455	Identifier	ARG_SHOULD_BE_SENT_BY_REF		52340	0					
ANR	52456	ArgumentList	func		52340	1					
ANR	52457	Argument	func		52340	0					
ANR	52458	Identifier	func		52340	0					
ANR	52459	Argument	n		52340	1					
ANR	52460	Identifier	n		52340	0					
ANR	52461	CompoundStatement		19:69:444:444	52340	1					
ANR	52462	ExpressionStatement	"ZVAL_NEW_REF ( params , arg )"	3481:3:104638:104663	52340	0	True				
ANR	52463	CallExpression	"ZVAL_NEW_REF ( params , arg )"		52340	0					
ANR	52464	Callee	ZVAL_NEW_REF		52340	0					
ANR	52465	Identifier	ZVAL_NEW_REF		52340	0					
ANR	52466	ArgumentList	params		52340	1					
ANR	52467	Argument	params		52340	0					
ANR	52468	Identifier	params		52340	0					
ANR	52469	Argument	arg		52340	1					
ANR	52470	Identifier	arg		52340	0					
ANR	52471	IfStatement	if ( Z_REFCOUNTED_P ( arg ) )		52340	1					
ANR	52472	Condition	Z_REFCOUNTED_P ( arg )	3482:7:104672:104690	52340	0	True				
ANR	52473	CallExpression	Z_REFCOUNTED_P ( arg )		52340	0					
ANR	52474	Callee	Z_REFCOUNTED_P		52340	0					
ANR	52475	Identifier	Z_REFCOUNTED_P		52340	0					
ANR	52476	ArgumentList	arg		52340	1					
ANR	52477	Argument	arg		52340	0					
ANR	52478	Identifier	arg		52340	0					
ANR	52479	CompoundStatement		21:28:504:504	52340	1					
ANR	52480	ExpressionStatement	Z_ADDREF_P ( arg )	3483:4:104699:104714	52340	0	True				
ANR	52481	CallExpression	Z_ADDREF_P ( arg )		52340	0					
ANR	52482	Callee	Z_ADDREF_P		52340	0					
ANR	52483	Identifier	Z_ADDREF_P		52340	0					
ANR	52484	ArgumentList	arg		52340	1					
ANR	52485	Argument	arg		52340	0					
ANR	52486	Identifier	arg		52340	0					
ANR	52487	ElseStatement	else		52340	0					
ANR	52488	CompoundStatement		24:9:541:541	52340	0					
ANR	52489	ExpressionStatement	"ZVAL_COPY ( params , arg )"	3486:3:104735:104757	52340	0	True				
ANR	52490	CallExpression	"ZVAL_COPY ( params , arg )"		52340	0					
ANR	52491	Callee	ZVAL_COPY		52340	0					
ANR	52492	Identifier	ZVAL_COPY		52340	0					
ANR	52493	ArgumentList	params		52340	1					
ANR	52494	Argument	params		52340	0					
ANR	52495	Identifier	params		52340	0					
ANR	52496	Argument	arg		52340	1					
ANR	52497	Identifier	arg		52340	0					
ANR	52498	ExpressionStatement	params ++	3488:2:104765:104773	52340	1	True				
ANR	52499	PostIncDecOperationExpression	params ++		52340	0					
ANR	52500	Identifier	params		52340	0					
ANR	52501	IncDec	++		52340	1					
ANR	52502	ExpressionStatement	n ++	3489:2:104777:104780	52340	2	True				
ANR	52503	PostIncDecOperationExpression	n ++		52340	0					
ANR	52504	Identifier	n		52340	0					
ANR	52505	IncDec	++		52340	1					
ANR	52506	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	3490:3:104785:104808	52340	17	True				
ANR	52507	CallExpression	ZEND_HASH_FOREACH_END ( )		52340	0					
ANR	52508	Callee	ZEND_HASH_FOREACH_END		52340	0					
ANR	52509	Identifier	ZEND_HASH_FOREACH_END		52340	0					
ANR	52510	ArgumentList			52340	1					
ANR	52511	ReturnStatement	return SUCCESS ;	3492:1:104812:104826	52340	18	True				
ANR	52512	Identifier	SUCCESS		52340	0					
ANR	52513	ReturnType	ZEND_API int		52340	1					
ANR	52514	Identifier	zend_fcall_info_args_ex		52340	2					
ANR	52515	ParameterList	"zend_fcall_info * fci , zend_function * func , zval * args"		52340	3					
ANR	52516	Parameter	zend_fcall_info * fci	3461:37:104123:104142	52340	0	True				
ANR	52517	ParameterType	zend_fcall_info *		52340	0					
ANR	52518	Identifier	fci		52340	1					
ANR	52519	Parameter	zend_function * func	3461:59:104145:104163	52340	1	True				
ANR	52520	ParameterType	zend_function *		52340	0					
ANR	52521	Identifier	func		52340	1					
ANR	52522	Parameter	zval * args	3461:80:104166:104175	52340	2	True				
ANR	52523	ParameterType	zval *		52340	0					
ANR	52524	Identifier	args		52340	1					
ANR	52525	CFGEntryNode	ENTRY		52340		True				
ANR	52526	CFGExitNode	EXIT		52340		True				
ANR	52527	Symbol	ARG_SHOULD_BE_SENT_BY_REF		52340						
ANR	52528	Symbol	SUCCESS		52340						
ANR	52529	Symbol	fci -> params		52340						
ANR	52530	Symbol	zend_hash_num_elements		52340						
ANR	52531	Symbol	* fci		52340						
ANR	52532	Symbol	params		52340						
ANR	52533	Symbol	Z_TYPE_P		52340						
ANR	52534	Symbol	fci		52340						
ANR	52535	Symbol	FAILURE		52340						
ANR	52536	Symbol	n		52340						
ANR	52537	Symbol	args		52340						
ANR	52538	Symbol	func		52340						
ANR	52539	Symbol	IS_ARRAY		52340						
ANR	52540	Symbol	fci -> param_count		52340						
ANR	52541	Symbol	arg		52340						
ANR	52542	Symbol	Z_REFCOUNTED_P		52340						
ANR	52543	Symbol	Z_ARRVAL_P		52340						
ANR	52544	Symbol	erealloc		52340						
ANR	52545	Symbol	Z_ISREF_P		52340						
ANR	52546	Function	zend_fcall_info_args	3496:0:104841:104971							
ANR	52547	FunctionDef	"zend_fcall_info_args (zend_fcall_info * fci , zval * args)"		52546	0					
ANR	52548	CompoundStatement		3497:0:104919:104971	52546	0					
ANR	52549	ReturnStatement	"return zend_fcall_info_args_ex ( fci , NULL , args ) ;"	3498:1:104922:104969	52546	0	True				
ANR	52550	CallExpression	"zend_fcall_info_args_ex ( fci , NULL , args )"		52546	0					
ANR	52551	Callee	zend_fcall_info_args_ex		52546	0					
ANR	52552	Identifier	zend_fcall_info_args_ex		52546	0					
ANR	52553	ArgumentList	fci		52546	1					
ANR	52554	Argument	fci		52546	0					
ANR	52555	Identifier	fci		52546	0					
ANR	52556	Argument	NULL		52546	1					
ANR	52557	Identifier	NULL		52546	0					
ANR	52558	Argument	args		52546	2					
ANR	52559	Identifier	args		52546	0					
ANR	52560	ReturnType	ZEND_API int		52546	1					
ANR	52561	Identifier	zend_fcall_info_args		52546	2					
ANR	52562	ParameterList	"zend_fcall_info * fci , zval * args"		52546	3					
ANR	52563	Parameter	zend_fcall_info * fci	3496:34:104875:104894	52546	0	True				
ANR	52564	ParameterType	zend_fcall_info *		52546	0					
ANR	52565	Identifier	fci		52546	1					
ANR	52566	Parameter	zval * args	3496:56:104897:104906	52546	1	True				
ANR	52567	ParameterType	zval *		52546	0					
ANR	52568	Identifier	args		52546	1					
ANR	52569	CFGEntryNode	ENTRY		52546		True				
ANR	52570	CFGExitNode	EXIT		52546		True				
ANR	52571	Symbol	args		52546						
ANR	52572	Symbol	zend_fcall_info_args_ex		52546						
ANR	52573	Symbol	NULL		52546						
ANR	52574	Symbol	fci		52546						
ANR	52575	Function	zend_fcall_info_argp	3502:0:104984:105383							
ANR	52576	FunctionDef	"zend_fcall_info_argp (zend_fcall_info * fci , int argc , zval * argv)"		52575	0					
ANR	52577	CompoundStatement		3503:0:105072:105383	52575	0					
ANR	52578	IdentifierDeclStatement	int i ;	3504:1:105075:105080	52575	0	True				
ANR	52579	IdentifierDecl	i		52575	0					
ANR	52580	IdentifierDeclType	int		52575	0					
ANR	52581	Identifier	i		52575	1					
ANR	52582	IfStatement	if ( argc < 0 )		52575	1					
ANR	52583	Condition	argc < 0	3506:5:105088:105095	52575	0	True				
ANR	52584	RelationalExpression	argc < 0		52575	0		<			
ANR	52585	Identifier	argc		52575	0					
ANR	52586	PrimaryExpression	0		52575	1					
ANR	52587	CompoundStatement		4:15:25:25	52575	1					
ANR	52588	ReturnStatement	return FAILURE ;	3507:2:105102:105116	52575	0	True				
ANR	52589	Identifier	FAILURE		52575	0					
ANR	52590	ExpressionStatement	"zend_fcall_info_args_clear ( fci , ! argc )"	3510:1:105123:105161	52575	2	True				
ANR	52591	CallExpression	"zend_fcall_info_args_clear ( fci , ! argc )"		52575	0					
ANR	52592	Callee	zend_fcall_info_args_clear		52575	0					
ANR	52593	Identifier	zend_fcall_info_args_clear		52575	0					
ANR	52594	ArgumentList	fci		52575	1					
ANR	52595	Argument	fci		52575	0					
ANR	52596	Identifier	fci		52575	0					
ANR	52597	Argument	! argc		52575	1					
ANR	52598	UnaryOperationExpression	! argc		52575	0					
ANR	52599	UnaryOperator	!		52575	0					
ANR	52600	Identifier	argc		52575	1					
ANR	52601	IfStatement	if ( argc )		52575	3					
ANR	52602	Condition	argc	3512:5:105169:105172	52575	0	True				
ANR	52603	Identifier	argc		52575	0					
ANR	52604	CompoundStatement		10:11:102:102	52575	1					
ANR	52605	ExpressionStatement	fci -> param_count = argc	3513:2:105179:105202	52575	0	True				
ANR	52606	AssignmentExpression	fci -> param_count = argc		52575	0		=			
ANR	52607	PtrMemberAccess	fci -> param_count		52575	0					
ANR	52608	Identifier	fci		52575	0					
ANR	52609	Identifier	param_count		52575	1					
ANR	52610	Identifier	argc		52575	1					
ANR	52611	ExpressionStatement	"fci -> params = ( zval * ) erealloc ( fci -> params , fci -> param_count * sizeof ( zval ) )"	3514:2:105206:105283	52575	1	True				
ANR	52612	AssignmentExpression	"fci -> params = ( zval * ) erealloc ( fci -> params , fci -> param_count * sizeof ( zval ) )"		52575	0		=			
ANR	52613	PtrMemberAccess	fci -> params		52575	0					
ANR	52614	Identifier	fci		52575	0					
ANR	52615	Identifier	params		52575	1					
ANR	52616	CastExpression	"( zval * ) erealloc ( fci -> params , fci -> param_count * sizeof ( zval ) )"		52575	1					
ANR	52617	CastTarget	zval *		52575	0					
ANR	52618	CallExpression	"erealloc ( fci -> params , fci -> param_count * sizeof ( zval ) )"		52575	1					
ANR	52619	Callee	erealloc		52575	0					
ANR	52620	Identifier	erealloc		52575	0					
ANR	52621	ArgumentList	fci -> params		52575	1					
ANR	52622	Argument	fci -> params		52575	0					
ANR	52623	PtrMemberAccess	fci -> params		52575	0					
ANR	52624	Identifier	fci		52575	0					
ANR	52625	Identifier	params		52575	1					
ANR	52626	Argument	fci -> param_count * sizeof ( zval )		52575	1					
ANR	52627	MultiplicativeExpression	fci -> param_count * sizeof ( zval )		52575	0		*			
ANR	52628	PtrMemberAccess	fci -> param_count		52575	0					
ANR	52629	Identifier	fci		52575	0					
ANR	52630	Identifier	param_count		52575	1					
ANR	52631	SizeofExpression	sizeof ( zval )		52575	1					
ANR	52632	Sizeof	sizeof		52575	0					
ANR	52633	SizeofOperand	zval		52575	1					
ANR	52634	ForStatement	for ( i = 0 ; i < argc ; ++ i )		52575	2					
ANR	52635	ForInit	i = 0 ;	3516:7:105293:105298	52575	0	True				
ANR	52636	AssignmentExpression	i = 0		52575	0		=			
ANR	52637	Identifier	i		52575	0					
ANR	52638	PrimaryExpression	0		52575	1					
ANR	52639	Condition	i < argc	3516:14:105300:105307	52575	1	True				
ANR	52640	RelationalExpression	i < argc		52575	0		<			
ANR	52641	Identifier	i		52575	0					
ANR	52642	Identifier	argc		52575	1					
ANR	52643	UnaryExpression	++ i	3516:24:105310:105312	52575	2	True				
ANR	52644	IncDec	++		52575	0					
ANR	52645	Identifier	i		52575	1					
ANR	52646	CompoundStatement		14:29:242:242	52575	3					
ANR	52647	ExpressionStatement	"ZVAL_COPY ( & fci -> params [ i ] , & argv [ i ] )"	3517:3:105320:105356	52575	0	True				
ANR	52648	CallExpression	"ZVAL_COPY ( & fci -> params [ i ] , & argv [ i ] )"		52575	0					
ANR	52649	Callee	ZVAL_COPY		52575	0					
ANR	52650	Identifier	ZVAL_COPY		52575	0					
ANR	52651	ArgumentList	& fci -> params [ i ]		52575	1					
ANR	52652	Argument	& fci -> params [ i ]		52575	0					
ANR	52653	UnaryOperationExpression	& fci -> params [ i ]		52575	0					
ANR	52654	UnaryOperator	&		52575	0					
ANR	52655	ArrayIndexing	fci -> params [ i ]		52575	1					
ANR	52656	PtrMemberAccess	fci -> params		52575	0					
ANR	52657	Identifier	fci		52575	0					
ANR	52658	Identifier	params		52575	1					
ANR	52659	Identifier	i		52575	1					
ANR	52660	Argument	& argv [ i ]		52575	1					
ANR	52661	UnaryOperationExpression	& argv [ i ]		52575	0					
ANR	52662	UnaryOperator	&		52575	0					
ANR	52663	ArrayIndexing	argv [ i ]		52575	1					
ANR	52664	Identifier	argv		52575	0					
ANR	52665	Identifier	i		52575	1					
ANR	52666	ReturnStatement	return SUCCESS ;	3521:1:105367:105381	52575	4	True				
ANR	52667	Identifier	SUCCESS		52575	0					
ANR	52668	ReturnType	ZEND_API int		52575	1					
ANR	52669	Identifier	zend_fcall_info_argp		52575	2					
ANR	52670	ParameterList	"zend_fcall_info * fci , int argc , zval * argv"		52575	3					
ANR	52671	Parameter	zend_fcall_info * fci	3502:34:105018:105037	52575	0	True				
ANR	52672	ParameterType	zend_fcall_info *		52575	0					
ANR	52673	Identifier	fci		52575	1					
ANR	52674	Parameter	int argc	3502:56:105040:105047	52575	1	True				
ANR	52675	ParameterType	int		52575	0					
ANR	52676	Identifier	argc		52575	1					
ANR	52677	Parameter	zval * argv	3502:66:105050:105059	52575	2	True				
ANR	52678	ParameterType	zval *		52575	0					
ANR	52679	Identifier	argv		52575	1					
ANR	52680	CFGEntryNode	ENTRY		52575		True				
ANR	52681	CFGExitNode	EXIT		52575		True				
ANR	52682	Symbol	argc		52575						
ANR	52683	Symbol	SUCCESS		52575						
ANR	52684	Symbol	fci -> params		52575						
ANR	52685	Symbol	fci -> param_count		52575						
ANR	52686	Symbol	i		52575						
ANR	52687	Symbol	* fci		52575						
ANR	52688	Symbol	fci		52575						
ANR	52689	Symbol	argv		52575						
ANR	52690	Symbol	FAILURE		52575						
ANR	52691	Symbol	erealloc		52575						
ANR	52692	Function	zend_fcall_info_argv	3525:0:105396:105837							
ANR	52693	FunctionDef	"zend_fcall_info_argv (zend_fcall_info * fci , int argc , va_list * argv)"		52692	0					
ANR	52694	CompoundStatement		3526:0:105487:105837	52692	0					
ANR	52695	IdentifierDeclStatement	int i ;	3527:1:105490:105495	52692	0	True				
ANR	52696	IdentifierDecl	i		52692	0					
ANR	52697	IdentifierDeclType	int		52692	0					
ANR	52698	Identifier	i		52692	1					
ANR	52699	IdentifierDeclStatement	zval * arg ;	3528:1:105498:105507	52692	1	True				
ANR	52700	IdentifierDecl	* arg		52692	0					
ANR	52701	IdentifierDeclType	zval *		52692	0					
ANR	52702	Identifier	arg		52692	1					
ANR	52703	IfStatement	if ( argc < 0 )		52692	2					
ANR	52704	Condition	argc < 0	3530:5:105515:105522	52692	0	True				
ANR	52705	RelationalExpression	argc < 0		52692	0		<			
ANR	52706	Identifier	argc		52692	0					
ANR	52707	PrimaryExpression	0		52692	1					
ANR	52708	CompoundStatement		5:15:37:37	52692	1					
ANR	52709	ReturnStatement	return FAILURE ;	3531:2:105529:105543	52692	0	True				
ANR	52710	Identifier	FAILURE		52692	0					
ANR	52711	ExpressionStatement	"zend_fcall_info_args_clear ( fci , ! argc )"	3534:1:105550:105588	52692	3	True				
ANR	52712	CallExpression	"zend_fcall_info_args_clear ( fci , ! argc )"		52692	0					
ANR	52713	Callee	zend_fcall_info_args_clear		52692	0					
ANR	52714	Identifier	zend_fcall_info_args_clear		52692	0					
ANR	52715	ArgumentList	fci		52692	1					
ANR	52716	Argument	fci		52692	0					
ANR	52717	Identifier	fci		52692	0					
ANR	52718	Argument	! argc		52692	1					
ANR	52719	UnaryOperationExpression	! argc		52692	0					
ANR	52720	UnaryOperator	!		52692	0					
ANR	52721	Identifier	argc		52692	1					
ANR	52722	IfStatement	if ( argc )		52692	4					
ANR	52723	Condition	argc	3536:5:105596:105599	52692	0	True				
ANR	52724	Identifier	argc		52692	0					
ANR	52725	CompoundStatement		11:11:114:114	52692	1					
ANR	52726	ExpressionStatement	fci -> param_count = argc	3537:2:105606:105629	52692	0	True				
ANR	52727	AssignmentExpression	fci -> param_count = argc		52692	0		=			
ANR	52728	PtrMemberAccess	fci -> param_count		52692	0					
ANR	52729	Identifier	fci		52692	0					
ANR	52730	Identifier	param_count		52692	1					
ANR	52731	Identifier	argc		52692	1					
ANR	52732	ExpressionStatement	"fci -> params = ( zval * ) erealloc ( fci -> params , fci -> param_count * sizeof ( zval ) )"	3538:2:105633:105710	52692	1	True				
ANR	52733	AssignmentExpression	"fci -> params = ( zval * ) erealloc ( fci -> params , fci -> param_count * sizeof ( zval ) )"		52692	0		=			
ANR	52734	PtrMemberAccess	fci -> params		52692	0					
ANR	52735	Identifier	fci		52692	0					
ANR	52736	Identifier	params		52692	1					
ANR	52737	CastExpression	"( zval * ) erealloc ( fci -> params , fci -> param_count * sizeof ( zval ) )"		52692	1					
ANR	52738	CastTarget	zval *		52692	0					
ANR	52739	CallExpression	"erealloc ( fci -> params , fci -> param_count * sizeof ( zval ) )"		52692	1					
ANR	52740	Callee	erealloc		52692	0					
ANR	52741	Identifier	erealloc		52692	0					
ANR	52742	ArgumentList	fci -> params		52692	1					
ANR	52743	Argument	fci -> params		52692	0					
ANR	52744	PtrMemberAccess	fci -> params		52692	0					
ANR	52745	Identifier	fci		52692	0					
ANR	52746	Identifier	params		52692	1					
ANR	52747	Argument	fci -> param_count * sizeof ( zval )		52692	1					
ANR	52748	MultiplicativeExpression	fci -> param_count * sizeof ( zval )		52692	0		*			
ANR	52749	PtrMemberAccess	fci -> param_count		52692	0					
ANR	52750	Identifier	fci		52692	0					
ANR	52751	Identifier	param_count		52692	1					
ANR	52752	SizeofExpression	sizeof ( zval )		52692	1					
ANR	52753	Sizeof	sizeof		52692	0					
ANR	52754	SizeofOperand	zval		52692	1					
ANR	52755	ForStatement	for ( i = 0 ; i < argc ; ++ i )		52692	2					
ANR	52756	ForInit	i = 0 ;	3540:7:105720:105725	52692	0	True				
ANR	52757	AssignmentExpression	i = 0		52692	0		=			
ANR	52758	Identifier	i		52692	0					
ANR	52759	PrimaryExpression	0		52692	1					
ANR	52760	Condition	i < argc	3540:14:105727:105734	52692	1	True				
ANR	52761	RelationalExpression	i < argc		52692	0		<			
ANR	52762	Identifier	i		52692	0					
ANR	52763	Identifier	argc		52692	1					
ANR	52764	UnaryExpression	++ i	3540:24:105737:105739	52692	2	True				
ANR	52765	IncDec	++		52692	0					
ANR	52766	Identifier	i		52692	1					
ANR	52767	CompoundStatement		15:29:254:254	52692	3					
ANR	52768	Statement	arg	3541:3:105747:105749	52692	0	True				
ANR	52769	Statement	=	3541:7:105751:105751	52692	1	True				
ANR	52770	Statement	va_arg	3541:9:105753:105758	52692	2	True				
ANR	52771	Statement	(	3541:15:105759:105759	52692	3	True				
ANR	52772	Statement	*	3541:16:105760:105760	52692	4	True				
ANR	52773	Statement	argv	3541:17:105761:105764	52692	5	True				
ANR	52774	Statement	","	3541:21:105765:105765	52692	6	True				
ANR	52775	Statement	zval	3541:23:105767:105770	52692	7	True				
ANR	52776	Statement	*	3541:28:105772:105772	52692	8	True				
ANR	52777	Statement	)	3541:29:105773:105773	52692	9	True				
ANR	52778	ExpressionStatement		3541:30:105774:105774	52692	10	True				
ANR	52779	ExpressionStatement	"ZVAL_COPY ( & fci -> params [ i ] , arg )"	3542:3:105779:105810	52692	11	True				
ANR	52780	CallExpression	"ZVAL_COPY ( & fci -> params [ i ] , arg )"		52692	0					
ANR	52781	Callee	ZVAL_COPY		52692	0					
ANR	52782	Identifier	ZVAL_COPY		52692	0					
ANR	52783	ArgumentList	& fci -> params [ i ]		52692	1					
ANR	52784	Argument	& fci -> params [ i ]		52692	0					
ANR	52785	UnaryOperationExpression	& fci -> params [ i ]		52692	0					
ANR	52786	UnaryOperator	&		52692	0					
ANR	52787	ArrayIndexing	fci -> params [ i ]		52692	1					
ANR	52788	PtrMemberAccess	fci -> params		52692	0					
ANR	52789	Identifier	fci		52692	0					
ANR	52790	Identifier	params		52692	1					
ANR	52791	Identifier	i		52692	1					
ANR	52792	Argument	arg		52692	1					
ANR	52793	Identifier	arg		52692	0					
ANR	52794	ReturnStatement	return SUCCESS ;	3546:1:105821:105835	52692	5	True				
ANR	52795	Identifier	SUCCESS		52692	0					
ANR	52796	ReturnType	ZEND_API int		52692	1					
ANR	52797	Identifier	zend_fcall_info_argv		52692	2					
ANR	52798	ParameterList	"zend_fcall_info * fci , int argc , va_list * argv"		52692	3					
ANR	52799	Parameter	zend_fcall_info * fci	3525:34:105430:105449	52692	0	True				
ANR	52800	ParameterType	zend_fcall_info *		52692	0					
ANR	52801	Identifier	fci		52692	1					
ANR	52802	Parameter	int argc	3525:56:105452:105459	52692	1	True				
ANR	52803	ParameterType	int		52692	0					
ANR	52804	Identifier	argc		52692	1					
ANR	52805	Parameter	va_list * argv	3525:66:105462:105474	52692	2	True				
ANR	52806	ParameterType	va_list *		52692	0					
ANR	52807	Identifier	argv		52692	1					
ANR	52808	CFGEntryNode	ENTRY		52692		True				
ANR	52809	CFGExitNode	EXIT		52692		True				
ANR	52810	Symbol	argc		52692						
ANR	52811	Symbol	SUCCESS		52692						
ANR	52812	Symbol	fci -> params		52692						
ANR	52813	Symbol	fci -> param_count		52692						
ANR	52814	Symbol	arg		52692						
ANR	52815	Symbol	i		52692						
ANR	52816	Symbol	* fci		52692						
ANR	52817	Symbol	fci		52692						
ANR	52818	Symbol	argv		52692						
ANR	52819	Symbol	FAILURE		52692						
ANR	52820	Symbol	erealloc		52692						
ANR	52821	Function	zend_fcall_info_argn	3550:0:105850:106058							
ANR	52822	FunctionDef	"zend_fcall_info_argn (zend_fcall_info * fci , int argc)"		52821	0					
ANR	52823	CompoundStatement		3551:0:105931:106058	52821	0					
ANR	52824	IdentifierDeclStatement	int ret ;	3552:1:105934:105941	52821	0	True				
ANR	52825	IdentifierDecl	ret		52821	0					
ANR	52826	IdentifierDeclType	int		52821	0					
ANR	52827	Identifier	ret		52821	1					
ANR	52828	IdentifierDeclStatement	va_list argv ;	3553:1:105944:105956	52821	1	True				
ANR	52829	IdentifierDecl	argv		52821	0					
ANR	52830	IdentifierDeclType	va_list		52821	0					
ANR	52831	Identifier	argv		52821	1					
ANR	52832	ExpressionStatement	"va_start ( argv , argc )"	3555:1:105960:105980	52821	2	True				
ANR	52833	CallExpression	"va_start ( argv , argc )"		52821	0					
ANR	52834	Callee	va_start		52821	0					
ANR	52835	Identifier	va_start		52821	0					
ANR	52836	ArgumentList	argv		52821	1					
ANR	52837	Argument	argv		52821	0					
ANR	52838	Identifier	argv		52821	0					
ANR	52839	Argument	argc		52821	1					
ANR	52840	Identifier	argc		52821	0					
ANR	52841	ExpressionStatement	"ret = zend_fcall_info_argv ( fci , argc , & argv )"	3556:1:105983:106027	52821	3	True				
ANR	52842	AssignmentExpression	"ret = zend_fcall_info_argv ( fci , argc , & argv )"		52821	0		=			
ANR	52843	Identifier	ret		52821	0					
ANR	52844	CallExpression	"zend_fcall_info_argv ( fci , argc , & argv )"		52821	1					
ANR	52845	Callee	zend_fcall_info_argv		52821	0					
ANR	52846	Identifier	zend_fcall_info_argv		52821	0					
ANR	52847	ArgumentList	fci		52821	1					
ANR	52848	Argument	fci		52821	0					
ANR	52849	Identifier	fci		52821	0					
ANR	52850	Argument	argc		52821	1					
ANR	52851	Identifier	argc		52821	0					
ANR	52852	Argument	& argv		52821	2					
ANR	52853	UnaryOperationExpression	& argv		52821	0					
ANR	52854	UnaryOperator	&		52821	0					
ANR	52855	Identifier	argv		52821	1					
ANR	52856	ExpressionStatement	va_end ( argv )	3557:1:106030:106042	52821	4	True				
ANR	52857	CallExpression	va_end ( argv )		52821	0					
ANR	52858	Callee	va_end		52821	0					
ANR	52859	Identifier	va_end		52821	0					
ANR	52860	ArgumentList	argv		52821	1					
ANR	52861	Argument	argv		52821	0					
ANR	52862	Identifier	argv		52821	0					
ANR	52863	ReturnStatement	return ret ;	3559:1:106046:106056	52821	5	True				
ANR	52864	Identifier	ret		52821	0					
ANR	52865	ReturnType	ZEND_API int		52821	1					
ANR	52866	Identifier	zend_fcall_info_argn		52821	2					
ANR	52867	ParameterList	"zend_fcall_info * fci , int argc"		52821	3					
ANR	52868	Parameter	zend_fcall_info * fci	3550:34:105884:105903	52821	0	True				
ANR	52869	ParameterType	zend_fcall_info *		52821	0					
ANR	52870	Identifier	fci		52821	1					
ANR	52871	Parameter	int argc	3550:56:105906:105913	52821	1	True				
ANR	52872	ParameterType	int		52821	0					
ANR	52873	Identifier	argc		52821	1					
ANR	52874	CFGEntryNode	ENTRY		52821		True				
ANR	52875	CFGExitNode	EXIT		52821		True				
ANR	52876	Symbol	argc		52821						
ANR	52877	Symbol	ret		52821						
ANR	52878	Symbol	zend_fcall_info_argv		52821						
ANR	52879	Symbol	& argv		52821						
ANR	52880	Symbol	fci		52821						
ANR	52881	Symbol	argv		52821						
ANR	52882	Function	zend_fcall_info_call	3563:0:106071:106632							
ANR	52883	FunctionDef	"zend_fcall_info_call (zend_fcall_info * fci , zend_fcall_info_cache * fcc , zval * retval_ptr , zval * args)"		52882	0					
ANR	52884	CompoundStatement		3564:0:106195:106632	52882	0					
ANR	52885	IdentifierDeclStatement	"zval retval , * org_params = NULL ;"	3565:1:106198:106229	52882	0	True				
ANR	52886	IdentifierDecl	retval		52882	0					
ANR	52887	IdentifierDeclType	zval		52882	0					
ANR	52888	Identifier	retval		52882	1					
ANR	52889	IdentifierDecl	* org_params = NULL		52882	1					
ANR	52890	IdentifierDeclType	zval *		52882	0					
ANR	52891	Identifier	org_params		52882	1					
ANR	52892	AssignmentExpression	* org_params = NULL		52882	2		=			
ANR	52893	Identifier	NULL		52882	0					
ANR	52894	Identifier	NULL		52882	1					
ANR	52895	IdentifierDeclStatement	"int result , org_count = 0 ;"	3566:1:106232:106257	52882	1	True				
ANR	52896	IdentifierDecl	result		52882	0					
ANR	52897	IdentifierDeclType	int		52882	0					
ANR	52898	Identifier	result		52882	1					
ANR	52899	IdentifierDecl	org_count = 0		52882	1					
ANR	52900	IdentifierDeclType	int		52882	0					
ANR	52901	Identifier	org_count		52882	1					
ANR	52902	AssignmentExpression	org_count = 0		52882	2		=			
ANR	52903	Identifier	org_count		52882	0					
ANR	52904	PrimaryExpression	0		52882	1					
ANR	52905	ExpressionStatement	fci -> retval = retval_ptr ? retval_ptr : & retval	3568:1:106261:106308	52882	2	True				
ANR	52906	AssignmentExpression	fci -> retval = retval_ptr ? retval_ptr : & retval		52882	0		=			
ANR	52907	PtrMemberAccess	fci -> retval		52882	0					
ANR	52908	Identifier	fci		52882	0					
ANR	52909	Identifier	retval		52882	1					
ANR	52910	ConditionalExpression	retval_ptr ? retval_ptr : & retval		52882	1					
ANR	52911	Condition	retval_ptr		52882	0					
ANR	52912	Identifier	retval_ptr		52882	0					
ANR	52913	Identifier	retval_ptr		52882	1					
ANR	52914	UnaryOperationExpression	& retval		52882	2					
ANR	52915	UnaryOperator	&		52882	0					
ANR	52916	Identifier	retval		52882	1					
ANR	52917	IfStatement	if ( args )		52882	3					
ANR	52918	Condition	args	3569:5:106315:106318	52882	0	True				
ANR	52919	Identifier	args		52882	0					
ANR	52920	CompoundStatement		6:11:125:125	52882	1					
ANR	52921	ExpressionStatement	"zend_fcall_info_args_save ( fci , & org_count , & org_params )"	3570:2:106325:106380	52882	0	True				
ANR	52922	CallExpression	"zend_fcall_info_args_save ( fci , & org_count , & org_params )"		52882	0					
ANR	52923	Callee	zend_fcall_info_args_save		52882	0					
ANR	52924	Identifier	zend_fcall_info_args_save		52882	0					
ANR	52925	ArgumentList	fci		52882	1					
ANR	52926	Argument	fci		52882	0					
ANR	52927	Identifier	fci		52882	0					
ANR	52928	Argument	& org_count		52882	1					
ANR	52929	UnaryOperationExpression	& org_count		52882	0					
ANR	52930	UnaryOperator	&		52882	0					
ANR	52931	Identifier	org_count		52882	1					
ANR	52932	Argument	& org_params		52882	2					
ANR	52933	UnaryOperationExpression	& org_params		52882	0					
ANR	52934	UnaryOperator	&		52882	0					
ANR	52935	Identifier	org_params		52882	1					
ANR	52936	ExpressionStatement	"zend_fcall_info_args ( fci , args )"	3571:2:106384:106415	52882	1	True				
ANR	52937	CallExpression	"zend_fcall_info_args ( fci , args )"		52882	0					
ANR	52938	Callee	zend_fcall_info_args		52882	0					
ANR	52939	Identifier	zend_fcall_info_args		52882	0					
ANR	52940	ArgumentList	fci		52882	1					
ANR	52941	Argument	fci		52882	0					
ANR	52942	Identifier	fci		52882	0					
ANR	52943	Argument	args		52882	1					
ANR	52944	Identifier	args		52882	0					
ANR	52945	ExpressionStatement	"result = zend_call_function ( fci , fcc )"	3573:1:106421:106458	52882	4	True				
ANR	52946	AssignmentExpression	"result = zend_call_function ( fci , fcc )"		52882	0		=			
ANR	52947	Identifier	result		52882	0					
ANR	52948	CallExpression	"zend_call_function ( fci , fcc )"		52882	1					
ANR	52949	Callee	zend_call_function		52882	0					
ANR	52950	Identifier	zend_call_function		52882	0					
ANR	52951	ArgumentList	fci		52882	1					
ANR	52952	Argument	fci		52882	0					
ANR	52953	Identifier	fci		52882	0					
ANR	52954	Argument	fcc		52882	1					
ANR	52955	Identifier	fcc		52882	0					
ANR	52956	IfStatement	if ( ! retval_ptr && Z_TYPE ( retval ) != IS_UNDEF )		52882	5					
ANR	52957	Condition	! retval_ptr && Z_TYPE ( retval ) != IS_UNDEF	3575:5:106466:106506	52882	0	True				
ANR	52958	AndExpression	! retval_ptr && Z_TYPE ( retval ) != IS_UNDEF		52882	0		&&			
ANR	52959	UnaryOperationExpression	! retval_ptr		52882	0					
ANR	52960	UnaryOperator	!		52882	0					
ANR	52961	Identifier	retval_ptr		52882	1					
ANR	52962	EqualityExpression	Z_TYPE ( retval ) != IS_UNDEF		52882	1		!=			
ANR	52963	CallExpression	Z_TYPE ( retval )		52882	0					
ANR	52964	Callee	Z_TYPE		52882	0					
ANR	52965	Identifier	Z_TYPE		52882	0					
ANR	52966	ArgumentList	retval		52882	1					
ANR	52967	Argument	retval		52882	0					
ANR	52968	Identifier	retval		52882	0					
ANR	52969	Identifier	IS_UNDEF		52882	1					
ANR	52970	CompoundStatement		12:48:313:313	52882	1					
ANR	52971	ExpressionStatement	zval_ptr_dtor ( & retval )	3576:2:106513:106535	52882	0	True				
ANR	52972	CallExpression	zval_ptr_dtor ( & retval )		52882	0					
ANR	52973	Callee	zval_ptr_dtor		52882	0					
ANR	52974	Identifier	zval_ptr_dtor		52882	0					
ANR	52975	ArgumentList	& retval		52882	1					
ANR	52976	Argument	& retval		52882	0					
ANR	52977	UnaryOperationExpression	& retval		52882	0					
ANR	52978	UnaryOperator	&		52882	0					
ANR	52979	Identifier	retval		52882	1					
ANR	52980	IfStatement	if ( args )		52882	6					
ANR	52981	Condition	args	3578:5:106545:106548	52882	0	True				
ANR	52982	Identifier	args		52882	0					
ANR	52983	CompoundStatement		15:11:355:355	52882	1					
ANR	52984	ExpressionStatement	"zend_fcall_info_args_restore ( fci , org_count , org_params )"	3579:2:106555:106611	52882	0	True				
ANR	52985	CallExpression	"zend_fcall_info_args_restore ( fci , org_count , org_params )"		52882	0					
ANR	52986	Callee	zend_fcall_info_args_restore		52882	0					
ANR	52987	Identifier	zend_fcall_info_args_restore		52882	0					
ANR	52988	ArgumentList	fci		52882	1					
ANR	52989	Argument	fci		52882	0					
ANR	52990	Identifier	fci		52882	0					
ANR	52991	Argument	org_count		52882	1					
ANR	52992	Identifier	org_count		52882	0					
ANR	52993	Argument	org_params		52882	2					
ANR	52994	Identifier	org_params		52882	0					
ANR	52995	ReturnStatement	return result ;	3581:1:106617:106630	52882	7	True				
ANR	52996	Identifier	result		52882	0					
ANR	52997	ReturnType	ZEND_API int		52882	1					
ANR	52998	Identifier	zend_fcall_info_call		52882	2					
ANR	52999	ParameterList	"zend_fcall_info * fci , zend_fcall_info_cache * fcc , zval * retval_ptr , zval * args"		52882	3					
ANR	53000	Parameter	zend_fcall_info * fci	3563:34:106105:106124	52882	0	True				
ANR	53001	ParameterType	zend_fcall_info *		52882	0					
ANR	53002	Identifier	fci		52882	1					
ANR	53003	Parameter	zend_fcall_info_cache * fcc	3563:56:106127:106152	52882	1	True				
ANR	53004	ParameterType	zend_fcall_info_cache *		52882	0					
ANR	53005	Identifier	fcc		52882	1					
ANR	53006	Parameter	zval * retval_ptr	3563:84:106155:106170	52882	2	True				
ANR	53007	ParameterType	zval *		52882	0					
ANR	53008	Identifier	retval_ptr		52882	1					
ANR	53009	Parameter	zval * args	3563:102:106173:106182	52882	3	True				
ANR	53010	ParameterType	zval *		52882	0					
ANR	53011	Identifier	args		52882	1					
ANR	53012	CFGEntryNode	ENTRY		52882		True				
ANR	53013	CFGExitNode	EXIT		52882		True				
ANR	53014	Symbol	& org_params		52882						
ANR	53015	Symbol	& org_count		52882						
ANR	53016	Symbol	NULL		52882						
ANR	53017	Symbol	org_count		52882						
ANR	53018	Symbol	org_params		52882						
ANR	53019	Symbol	fcc		52882						
ANR	53020	Symbol	* fci		52882						
ANR	53021	Symbol	Z_TYPE		52882						
ANR	53022	Symbol	fci		52882						
ANR	53023	Symbol	retval		52882						
ANR	53024	Symbol	retval_ptr		52882						
ANR	53025	Symbol	args		52882						
ANR	53026	Symbol	result		52882						
ANR	53027	Symbol	fci -> retval		52882						
ANR	53028	Symbol	& retval		52882						
ANR	53029	Symbol	zend_call_function		52882						
ANR	53030	Symbol	IS_UNDEF		52882						
ANR	53031	Function	zend_get_module_version	3585:9:106654:107044							
ANR	53032	FunctionDef	zend_get_module_version (const char * module_name)		53031	0					
ANR	53033	CompoundStatement		3586:0:106725:107044	53031	0					
ANR	53034	IdentifierDeclStatement	zend_string * lname ;	3587:1:106728:106746	53031	0	True				
ANR	53035	IdentifierDecl	* lname		53031	0					
ANR	53036	IdentifierDeclType	zend_string *		53031	0					
ANR	53037	Identifier	lname		53031	1					
ANR	53038	IdentifierDeclStatement	size_t name_len = strlen ( module_name ) ;	3588:1:106749:106786	53031	1	True				
ANR	53039	IdentifierDecl	name_len = strlen ( module_name )		53031	0					
ANR	53040	IdentifierDeclType	size_t		53031	0					
ANR	53041	Identifier	name_len		53031	1					
ANR	53042	AssignmentExpression	name_len = strlen ( module_name )		53031	2		=			
ANR	53043	Identifier	name_len		53031	0					
ANR	53044	CallExpression	strlen ( module_name )		53031	1					
ANR	53045	Callee	strlen		53031	0					
ANR	53046	Identifier	strlen		53031	0					
ANR	53047	ArgumentList	module_name		53031	1					
ANR	53048	Argument	module_name		53031	0					
ANR	53049	Identifier	module_name		53031	0					
ANR	53050	IdentifierDeclStatement	zend_module_entry * module ;	3589:1:106789:106814	53031	2	True				
ANR	53051	IdentifierDecl	* module		53031	0					
ANR	53052	IdentifierDeclType	zend_module_entry *		53031	0					
ANR	53053	Identifier	module		53031	1					
ANR	53054	ExpressionStatement	"lname = zend_string_alloc ( name_len , 0 )"	3591:1:106818:106856	53031	3	True				
ANR	53055	AssignmentExpression	"lname = zend_string_alloc ( name_len , 0 )"		53031	0		=			
ANR	53056	Identifier	lname		53031	0					
ANR	53057	CallExpression	"zend_string_alloc ( name_len , 0 )"		53031	1					
ANR	53058	Callee	zend_string_alloc		53031	0					
ANR	53059	Identifier	zend_string_alloc		53031	0					
ANR	53060	ArgumentList	name_len		53031	1					
ANR	53061	Argument	name_len		53031	0					
ANR	53062	Identifier	name_len		53031	0					
ANR	53063	Argument	0		53031	1					
ANR	53064	PrimaryExpression	0		53031	0					
ANR	53065	ExpressionStatement	"zend_str_tolower_copy ( ZSTR_VAL ( lname ) , module_name , name_len )"	3592:1:106859:106920	53031	4	True				
ANR	53066	CallExpression	"zend_str_tolower_copy ( ZSTR_VAL ( lname ) , module_name , name_len )"		53031	0					
ANR	53067	Callee	zend_str_tolower_copy		53031	0					
ANR	53068	Identifier	zend_str_tolower_copy		53031	0					
ANR	53069	ArgumentList	ZSTR_VAL ( lname )		53031	1					
ANR	53070	Argument	ZSTR_VAL ( lname )		53031	0					
ANR	53071	CallExpression	ZSTR_VAL ( lname )		53031	0					
ANR	53072	Callee	ZSTR_VAL		53031	0					
ANR	53073	Identifier	ZSTR_VAL		53031	0					
ANR	53074	ArgumentList	lname		53031	1					
ANR	53075	Argument	lname		53031	0					
ANR	53076	Identifier	lname		53031	0					
ANR	53077	Argument	module_name		53031	1					
ANR	53078	Identifier	module_name		53031	0					
ANR	53079	Argument	name_len		53031	2					
ANR	53080	Identifier	name_len		53031	0					
ANR	53081	ExpressionStatement	"module = zend_hash_find_ptr ( & module_registry , lname )"	3593:1:106923:106975	53031	5	True				
ANR	53082	AssignmentExpression	"module = zend_hash_find_ptr ( & module_registry , lname )"		53031	0		=			
ANR	53083	Identifier	module		53031	0					
ANR	53084	CallExpression	"zend_hash_find_ptr ( & module_registry , lname )"		53031	1					
ANR	53085	Callee	zend_hash_find_ptr		53031	0					
ANR	53086	Identifier	zend_hash_find_ptr		53031	0					
ANR	53087	ArgumentList	& module_registry		53031	1					
ANR	53088	Argument	& module_registry		53031	0					
ANR	53089	UnaryOperationExpression	& module_registry		53031	0					
ANR	53090	UnaryOperator	&		53031	0					
ANR	53091	Identifier	module_registry		53031	1					
ANR	53092	Argument	lname		53031	1					
ANR	53093	Identifier	lname		53031	0					
ANR	53094	ExpressionStatement	zend_string_free ( lname )	3594:1:106978:107001	53031	6	True				
ANR	53095	CallExpression	zend_string_free ( lname )		53031	0					
ANR	53096	Callee	zend_string_free		53031	0					
ANR	53097	Identifier	zend_string_free		53031	0					
ANR	53098	ArgumentList	lname		53031	1					
ANR	53099	Argument	lname		53031	0					
ANR	53100	Identifier	lname		53031	0					
ANR	53101	ReturnStatement	return module ? module -> version : NULL ;	3595:1:107004:107042	53031	7	True				
ANR	53102	ConditionalExpression	module ? module -> version : NULL		53031	0					
ANR	53103	Condition	module		53031	0					
ANR	53104	Identifier	module		53031	0					
ANR	53105	PtrMemberAccess	module -> version		53031	1					
ANR	53106	Identifier	module		53031	0					
ANR	53107	Identifier	version		53031	1					
ANR	53108	Identifier	NULL		53031	2					
ANR	53109	ReturnType	const char *		53031	1					
ANR	53110	Identifier	zend_get_module_version		53031	2					
ANR	53111	ParameterList	const char * module_name		53031	3					
ANR	53112	Parameter	const char * module_name	3585:45:106690:106712	53031	0	True				
ANR	53113	ParameterType	const char *		53031	0					
ANR	53114	Identifier	module_name		53031	1					
ANR	53115	CFGEntryNode	ENTRY		53031		True				
ANR	53116	CFGExitNode	EXIT		53031		True				
ANR	53117	Symbol	strlen		53031						
ANR	53118	Symbol	lname		53031						
ANR	53119	Symbol	zend_string_alloc		53031						
ANR	53120	Symbol	module -> version		53031						
ANR	53121	Symbol	NULL		53031						
ANR	53122	Symbol	* module		53031						
ANR	53123	Symbol	module		53031						
ANR	53124	Symbol	& module_registry		53031						
ANR	53125	Symbol	module_name		53031						
ANR	53126	Symbol	name_len		53031						
ANR	53127	Symbol	zend_hash_find_ptr		53031						
ANR	53128	Symbol	ZSTR_VAL		53031						
ANR	53129	Function	zend_declare_property_ex	3599:0:107057:110254							
ANR	53130	FunctionDef	"zend_declare_property_ex (zend_class_entry * ce , zend_string * name , zval * property , int access_type , zend_string * doc_comment)"		53129	0					
ANR	53131	CompoundStatement		3600:0:107205:110254	53129	0					
ANR	53132	IdentifierDeclStatement	"zend_property_info * property_info , * property_info_ptr ;"	3601:1:107208:107261	53129	0	True				
ANR	53133	IdentifierDecl	* property_info		53129	0					
ANR	53134	IdentifierDeclType	zend_property_info *		53129	0					
ANR	53135	Identifier	property_info		53129	1					
ANR	53136	IdentifierDecl	* property_info_ptr		53129	1					
ANR	53137	IdentifierDeclType	zend_property_info *		53129	0					
ANR	53138	Identifier	property_info_ptr		53129	1					
ANR	53139	IfStatement	if ( ce -> type == ZEND_INTERNAL_CLASS )		53129	1					
ANR	53140	Condition	ce -> type == ZEND_INTERNAL_CLASS	3603:5:107269:107299	53129	0	True				
ANR	53141	EqualityExpression	ce -> type == ZEND_INTERNAL_CLASS		53129	0		==			
ANR	53142	PtrMemberAccess	ce -> type		53129	0					
ANR	53143	Identifier	ce		53129	0					
ANR	53144	Identifier	type		53129	1					
ANR	53145	Identifier	ZEND_INTERNAL_CLASS		53129	1					
ANR	53146	CompoundStatement		4:38:96:96	53129	1					
ANR	53147	ExpressionStatement	"property_info = pemalloc ( sizeof ( zend_property_info ) , 1 )"	3604:2:107306:107361	53129	0	True				
ANR	53148	AssignmentExpression	"property_info = pemalloc ( sizeof ( zend_property_info ) , 1 )"		53129	0		=			
ANR	53149	Identifier	property_info		53129	0					
ANR	53150	CallExpression	"pemalloc ( sizeof ( zend_property_info ) , 1 )"		53129	1					
ANR	53151	Callee	pemalloc		53129	0					
ANR	53152	Identifier	pemalloc		53129	0					
ANR	53153	ArgumentList	sizeof ( zend_property_info )		53129	1					
ANR	53154	Argument	sizeof ( zend_property_info )		53129	0					
ANR	53155	SizeofExpression	sizeof ( zend_property_info )		53129	0					
ANR	53156	Sizeof	sizeof		53129	0					
ANR	53157	SizeofOperand	zend_property_info		53129	1					
ANR	53158	Argument	1		53129	1					
ANR	53159	PrimaryExpression	1		53129	0					
ANR	53160	IfStatement	if ( ( access_type & ZEND_ACC_STATIC ) || Z_CONSTANT_P ( property ) )		53129	1					
ANR	53161	Condition	( access_type & ZEND_ACC_STATIC ) || Z_CONSTANT_P ( property )	3605:6:107369:107425	53129	0	True				
ANR	53162	OrExpression	( access_type & ZEND_ACC_STATIC ) || Z_CONSTANT_P ( property )		53129	0		||			
ANR	53163	BitAndExpression	access_type & ZEND_ACC_STATIC		53129	0		&			
ANR	53164	Identifier	access_type		53129	0					
ANR	53165	Identifier	ZEND_ACC_STATIC		53129	1					
ANR	53166	CallExpression	Z_CONSTANT_P ( property )		53129	1					
ANR	53167	Callee	Z_CONSTANT_P		53129	0					
ANR	53168	Identifier	Z_CONSTANT_P		53129	0					
ANR	53169	ArgumentList	property		53129	1					
ANR	53170	Argument	property		53129	0					
ANR	53171	Identifier	property		53129	0					
ANR	53172	CompoundStatement		6:65:222:222	53129	1					
ANR	53173	ExpressionStatement	ce -> ce_flags &= ~ZEND_ACC_CONSTANTS_UPDATED	3606:3:107433:107476	53129	0	True				
ANR	53174	AssignmentExpression	ce -> ce_flags &= ~ZEND_ACC_CONSTANTS_UPDATED		53129	0		&=			
ANR	53175	PtrMemberAccess	ce -> ce_flags		53129	0					
ANR	53176	Identifier	ce		53129	0					
ANR	53177	Identifier	ce_flags		53129	1					
ANR	53178	Identifier	~ZEND_ACC_CONSTANTS_UPDATED		53129	1					
ANR	53179	ElseStatement	else		53129	0					
ANR	53180	CompoundStatement		9:8:284:284	53129	0					
ANR	53181	ExpressionStatement	"property_info = zend_arena_alloc ( & CG ( arena ) , sizeof ( zend_property_info ) )"	3609:2:107494:107566	53129	0	True				
ANR	53182	AssignmentExpression	"property_info = zend_arena_alloc ( & CG ( arena ) , sizeof ( zend_property_info ) )"		53129	0		=			
ANR	53183	Identifier	property_info		53129	0					
ANR	53184	CallExpression	"zend_arena_alloc ( & CG ( arena ) , sizeof ( zend_property_info ) )"		53129	1					
ANR	53185	Callee	zend_arena_alloc		53129	0					
ANR	53186	Identifier	zend_arena_alloc		53129	0					
ANR	53187	ArgumentList	& CG ( arena )		53129	1					
ANR	53188	Argument	& CG ( arena )		53129	0					
ANR	53189	UnaryOperationExpression	& CG ( arena )		53129	0					
ANR	53190	UnaryOperator	&		53129	0					
ANR	53191	CallExpression	CG ( arena )		53129	1					
ANR	53192	Callee	CG		53129	0					
ANR	53193	Identifier	CG		53129	0					
ANR	53194	ArgumentList	arena		53129	1					
ANR	53195	Argument	arena		53129	0					
ANR	53196	Identifier	arena		53129	0					
ANR	53197	Argument	sizeof ( zend_property_info )		53129	1					
ANR	53198	SizeofExpression	sizeof ( zend_property_info )		53129	0					
ANR	53199	Sizeof	sizeof		53129	0					
ANR	53200	SizeofOperand	zend_property_info		53129	1					
ANR	53201	IfStatement	if ( Z_CONSTANT_P ( property ) )		53129	1					
ANR	53202	Condition	Z_CONSTANT_P ( property )	3610:6:107574:107595	53129	0	True				
ANR	53203	CallExpression	Z_CONSTANT_P ( property )		53129	0					
ANR	53204	Callee	Z_CONSTANT_P		53129	0					
ANR	53205	Identifier	Z_CONSTANT_P		53129	0					
ANR	53206	ArgumentList	property		53129	1					
ANR	53207	Argument	property		53129	0					
ANR	53208	Identifier	property		53129	0					
ANR	53209	CompoundStatement		11:30:392:392	53129	1					
ANR	53210	ExpressionStatement	ce -> ce_flags &= ~ZEND_ACC_CONSTANTS_UPDATED	3611:3:107603:107646	53129	0	True				
ANR	53211	AssignmentExpression	ce -> ce_flags &= ~ZEND_ACC_CONSTANTS_UPDATED		53129	0		&=			
ANR	53212	PtrMemberAccess	ce -> ce_flags		53129	0					
ANR	53213	Identifier	ce		53129	0					
ANR	53214	Identifier	ce_flags		53129	1					
ANR	53215	Identifier	~ZEND_ACC_CONSTANTS_UPDATED		53129	1					
ANR	53216	IfStatement	if ( ! ( access_type & ZEND_ACC_PPP_MASK ) )		53129	2					
ANR	53217	Condition	! ( access_type & ZEND_ACC_PPP_MASK )	3615:5:107661:107694	53129	0	True				
ANR	53218	UnaryOperationExpression	! ( access_type & ZEND_ACC_PPP_MASK )		53129	0					
ANR	53219	UnaryOperator	!		53129	0					
ANR	53220	BitAndExpression	access_type & ZEND_ACC_PPP_MASK		53129	1		&			
ANR	53221	Identifier	access_type		53129	0					
ANR	53222	Identifier	ZEND_ACC_PPP_MASK		53129	1					
ANR	53223	CompoundStatement		16:41:491:491	53129	1					
ANR	53224	ExpressionStatement	access_type |= ZEND_ACC_PUBLIC	3616:2:107701:107731	53129	0	True				
ANR	53225	AssignmentExpression	access_type |= ZEND_ACC_PUBLIC		53129	0		|=			
ANR	53226	Identifier	access_type		53129	0					
ANR	53227	Identifier	ZEND_ACC_PUBLIC		53129	1					
ANR	53228	IfStatement	if ( access_type & ZEND_ACC_STATIC )		53129	3					
ANR	53229	Condition	access_type & ZEND_ACC_STATIC	3618:5:107741:107769	53129	0	True				
ANR	53230	BitAndExpression	access_type & ZEND_ACC_STATIC		53129	0		&			
ANR	53231	Identifier	access_type		53129	0					
ANR	53232	Identifier	ZEND_ACC_STATIC		53129	1					
ANR	53233	CompoundStatement		19:36:566:566	53129	1					
ANR	53234	IfStatement	"if ( ( property_info_ptr = zend_hash_find_ptr ( & ce -> properties_info , name ) ) != NULL && ( property_info_ptr -> flags & ZEND_ACC_STATIC ) != 0 )"		53129	0					
ANR	53235	Condition	"( property_info_ptr = zend_hash_find_ptr ( & ce -> properties_info , name ) ) != NULL && ( property_info_ptr -> flags & ZEND_ACC_STATIC ) != 0"	3619:6:107780:107914	53129	0	True				
ANR	53236	AndExpression	"( property_info_ptr = zend_hash_find_ptr ( & ce -> properties_info , name ) ) != NULL && ( property_info_ptr -> flags & ZEND_ACC_STATIC ) != 0"		53129	0		&&			
ANR	53237	EqualityExpression	"( property_info_ptr = zend_hash_find_ptr ( & ce -> properties_info , name ) ) != NULL"		53129	0		!=			
ANR	53238	AssignmentExpression	"property_info_ptr = zend_hash_find_ptr ( & ce -> properties_info , name )"		53129	0		=			
ANR	53239	Identifier	property_info_ptr		53129	0					
ANR	53240	CallExpression	"zend_hash_find_ptr ( & ce -> properties_info , name )"		53129	1					
ANR	53241	Callee	zend_hash_find_ptr		53129	0					
ANR	53242	Identifier	zend_hash_find_ptr		53129	0					
ANR	53243	ArgumentList	& ce -> properties_info		53129	1					
ANR	53244	Argument	& ce -> properties_info		53129	0					
ANR	53245	UnaryOperationExpression	& ce -> properties_info		53129	0					
ANR	53246	UnaryOperator	&		53129	0					
ANR	53247	PtrMemberAccess	ce -> properties_info		53129	1					
ANR	53248	Identifier	ce		53129	0					
ANR	53249	Identifier	properties_info		53129	1					
ANR	53250	Argument	name		53129	1					
ANR	53251	Identifier	name		53129	0					
ANR	53252	Identifier	NULL		53129	1					
ANR	53253	EqualityExpression	( property_info_ptr -> flags & ZEND_ACC_STATIC ) != 0		53129	1		!=			
ANR	53254	BitAndExpression	property_info_ptr -> flags & ZEND_ACC_STATIC		53129	0		&			
ANR	53255	PtrMemberAccess	property_info_ptr -> flags		53129	0					
ANR	53256	Identifier	property_info_ptr		53129	0					
ANR	53257	Identifier	flags		53129	1					
ANR	53258	Identifier	ZEND_ACC_STATIC		53129	1					
ANR	53259	PrimaryExpression	0		53129	1					
ANR	53260	CompoundStatement		21:57:711:711	53129	1					
ANR	53261	ExpressionStatement	property_info -> offset = property_info_ptr -> offset	3621:3:107922:107971	53129	0	True				
ANR	53262	AssignmentExpression	property_info -> offset = property_info_ptr -> offset		53129	0		=			
ANR	53263	PtrMemberAccess	property_info -> offset		53129	0					
ANR	53264	Identifier	property_info		53129	0					
ANR	53265	Identifier	offset		53129	1					
ANR	53266	PtrMemberAccess	property_info_ptr -> offset		53129	1					
ANR	53267	Identifier	property_info_ptr		53129	0					
ANR	53268	Identifier	offset		53129	1					
ANR	53269	ExpressionStatement	zval_ptr_dtor ( & ce -> default_static_members_table [ property_info -> offset ] )	3622:3:107976:108047	53129	1	True				
ANR	53270	CallExpression	zval_ptr_dtor ( & ce -> default_static_members_table [ property_info -> offset ] )		53129	0					
ANR	53271	Callee	zval_ptr_dtor		53129	0					
ANR	53272	Identifier	zval_ptr_dtor		53129	0					
ANR	53273	ArgumentList	& ce -> default_static_members_table [ property_info -> offset ]		53129	1					
ANR	53274	Argument	& ce -> default_static_members_table [ property_info -> offset ]		53129	0					
ANR	53275	UnaryOperationExpression	& ce -> default_static_members_table [ property_info -> offset ]		53129	0					
ANR	53276	UnaryOperator	&		53129	0					
ANR	53277	ArrayIndexing	ce -> default_static_members_table [ property_info -> offset ]		53129	1					
ANR	53278	PtrMemberAccess	ce -> default_static_members_table		53129	0					
ANR	53279	Identifier	ce		53129	0					
ANR	53280	Identifier	default_static_members_table		53129	1					
ANR	53281	PtrMemberAccess	property_info -> offset		53129	1					
ANR	53282	Identifier	property_info		53129	0					
ANR	53283	Identifier	offset		53129	1					
ANR	53284	ExpressionStatement	"zend_hash_del ( & ce -> properties_info , name )"	3623:3:108052:108093	53129	2	True				
ANR	53285	CallExpression	"zend_hash_del ( & ce -> properties_info , name )"		53129	0					
ANR	53286	Callee	zend_hash_del		53129	0					
ANR	53287	Identifier	zend_hash_del		53129	0					
ANR	53288	ArgumentList	& ce -> properties_info		53129	1					
ANR	53289	Argument	& ce -> properties_info		53129	0					
ANR	53290	UnaryOperationExpression	& ce -> properties_info		53129	0					
ANR	53291	UnaryOperator	&		53129	0					
ANR	53292	PtrMemberAccess	ce -> properties_info		53129	1					
ANR	53293	Identifier	ce		53129	0					
ANR	53294	Identifier	properties_info		53129	1					
ANR	53295	Argument	name		53129	1					
ANR	53296	Identifier	name		53129	0					
ANR	53297	ElseStatement	else		53129	0					
ANR	53298	CompoundStatement		25:9:898:898	53129	0					
ANR	53299	ExpressionStatement	property_info -> offset = ce -> default_static_members_count ++	3625:3:108109:108167	53129	0	True				
ANR	53300	AssignmentExpression	property_info -> offset = ce -> default_static_members_count ++		53129	0		=			
ANR	53301	PtrMemberAccess	property_info -> offset		53129	0					
ANR	53302	Identifier	property_info		53129	0					
ANR	53303	Identifier	offset		53129	1					
ANR	53304	PostIncDecOperationExpression	ce -> default_static_members_count ++		53129	1					
ANR	53305	PtrMemberAccess	ce -> default_static_members_count		53129	0					
ANR	53306	Identifier	ce		53129	0					
ANR	53307	Identifier	default_static_members_count		53129	1					
ANR	53308	IncDec	++		53129	1					
ANR	53309	ExpressionStatement	"ce -> default_static_members_table = perealloc ( ce -> default_static_members_table , sizeof ( zval ) * ce -> default_static_members_count , ce -> type == ZEND_INTERNAL_CLASS )"	3626:3:108172:108332	53129	1	True				
ANR	53310	AssignmentExpression	"ce -> default_static_members_table = perealloc ( ce -> default_static_members_table , sizeof ( zval ) * ce -> default_static_members_count , ce -> type == ZEND_INTERNAL_CLASS )"		53129	0		=			
ANR	53311	PtrMemberAccess	ce -> default_static_members_table		53129	0					
ANR	53312	Identifier	ce		53129	0					
ANR	53313	Identifier	default_static_members_table		53129	1					
ANR	53314	CallExpression	"perealloc ( ce -> default_static_members_table , sizeof ( zval ) * ce -> default_static_members_count , ce -> type == ZEND_INTERNAL_CLASS )"		53129	1					
ANR	53315	Callee	perealloc		53129	0					
ANR	53316	Identifier	perealloc		53129	0					
ANR	53317	ArgumentList	ce -> default_static_members_table		53129	1					
ANR	53318	Argument	ce -> default_static_members_table		53129	0					
ANR	53319	PtrMemberAccess	ce -> default_static_members_table		53129	0					
ANR	53320	Identifier	ce		53129	0					
ANR	53321	Identifier	default_static_members_table		53129	1					
ANR	53322	Argument	sizeof ( zval ) * ce -> default_static_members_count		53129	1					
ANR	53323	MultiplicativeExpression	sizeof ( zval ) * ce -> default_static_members_count		53129	0		*			
ANR	53324	SizeofExpression	sizeof ( zval )		53129	0					
ANR	53325	Sizeof	sizeof		53129	0					
ANR	53326	SizeofOperand	zval		53129	1					
ANR	53327	PtrMemberAccess	ce -> default_static_members_count		53129	1					
ANR	53328	Identifier	ce		53129	0					
ANR	53329	Identifier	default_static_members_count		53129	1					
ANR	53330	Argument	ce -> type == ZEND_INTERNAL_CLASS		53129	2					
ANR	53331	EqualityExpression	ce -> type == ZEND_INTERNAL_CLASS		53129	0		==			
ANR	53332	PtrMemberAccess	ce -> type		53129	0					
ANR	53333	Identifier	ce		53129	0					
ANR	53334	Identifier	type		53129	1					
ANR	53335	Identifier	ZEND_INTERNAL_CLASS		53129	1					
ANR	53336	ExpressionStatement	"ZVAL_COPY_VALUE ( & ce -> default_static_members_table [ property_info -> offset ] , property )"	3628:2:108340:108423	53129	1	True				
ANR	53337	CallExpression	"ZVAL_COPY_VALUE ( & ce -> default_static_members_table [ property_info -> offset ] , property )"		53129	0					
ANR	53338	Callee	ZVAL_COPY_VALUE		53129	0					
ANR	53339	Identifier	ZVAL_COPY_VALUE		53129	0					
ANR	53340	ArgumentList	& ce -> default_static_members_table [ property_info -> offset ]		53129	1					
ANR	53341	Argument	& ce -> default_static_members_table [ property_info -> offset ]		53129	0					
ANR	53342	UnaryOperationExpression	& ce -> default_static_members_table [ property_info -> offset ]		53129	0					
ANR	53343	UnaryOperator	&		53129	0					
ANR	53344	ArrayIndexing	ce -> default_static_members_table [ property_info -> offset ]		53129	1					
ANR	53345	PtrMemberAccess	ce -> default_static_members_table		53129	0					
ANR	53346	Identifier	ce		53129	0					
ANR	53347	Identifier	default_static_members_table		53129	1					
ANR	53348	PtrMemberAccess	property_info -> offset		53129	1					
ANR	53349	Identifier	property_info		53129	0					
ANR	53350	Identifier	offset		53129	1					
ANR	53351	Argument	property		53129	1					
ANR	53352	Identifier	property		53129	0					
ANR	53353	IfStatement	if ( ce -> type == ZEND_USER_CLASS )		53129	2					
ANR	53354	Condition	ce -> type == ZEND_USER_CLASS	3629:6:108431:108457	53129	0	True				
ANR	53355	EqualityExpression	ce -> type == ZEND_USER_CLASS		53129	0		==			
ANR	53356	PtrMemberAccess	ce -> type		53129	0					
ANR	53357	Identifier	ce		53129	0					
ANR	53358	Identifier	type		53129	1					
ANR	53359	Identifier	ZEND_USER_CLASS		53129	1					
ANR	53360	CompoundStatement		30:35:1254:1254	53129	1					
ANR	53361	ExpressionStatement	ce -> static_members_table = ce -> default_static_members_table	3630:3:108465:108524	53129	0	True				
ANR	53362	AssignmentExpression	ce -> static_members_table = ce -> default_static_members_table		53129	0		=			
ANR	53363	PtrMemberAccess	ce -> static_members_table		53129	0					
ANR	53364	Identifier	ce		53129	0					
ANR	53365	Identifier	static_members_table		53129	1					
ANR	53366	PtrMemberAccess	ce -> default_static_members_table		53129	1					
ANR	53367	Identifier	ce		53129	0					
ANR	53368	Identifier	default_static_members_table		53129	1					
ANR	53369	ElseStatement	else		53129	0					
ANR	53370	CompoundStatement		33:8:1332:1332	53129	0					
ANR	53371	IfStatement	"if ( ( property_info_ptr = zend_hash_find_ptr ( & ce -> properties_info , name ) ) != NULL && ( property_info_ptr -> flags & ZEND_ACC_STATIC ) == 0 )"		53129	0					
ANR	53372	Condition	"( property_info_ptr = zend_hash_find_ptr ( & ce -> properties_info , name ) ) != NULL && ( property_info_ptr -> flags & ZEND_ACC_STATIC ) == 0"	3633:6:108546:108680	53129	0	True				
ANR	53373	AndExpression	"( property_info_ptr = zend_hash_find_ptr ( & ce -> properties_info , name ) ) != NULL && ( property_info_ptr -> flags & ZEND_ACC_STATIC ) == 0"		53129	0		&&			
ANR	53374	EqualityExpression	"( property_info_ptr = zend_hash_find_ptr ( & ce -> properties_info , name ) ) != NULL"		53129	0		!=			
ANR	53375	AssignmentExpression	"property_info_ptr = zend_hash_find_ptr ( & ce -> properties_info , name )"		53129	0		=			
ANR	53376	Identifier	property_info_ptr		53129	0					
ANR	53377	CallExpression	"zend_hash_find_ptr ( & ce -> properties_info , name )"		53129	1					
ANR	53378	Callee	zend_hash_find_ptr		53129	0					
ANR	53379	Identifier	zend_hash_find_ptr		53129	0					
ANR	53380	ArgumentList	& ce -> properties_info		53129	1					
ANR	53381	Argument	& ce -> properties_info		53129	0					
ANR	53382	UnaryOperationExpression	& ce -> properties_info		53129	0					
ANR	53383	UnaryOperator	&		53129	0					
ANR	53384	PtrMemberAccess	ce -> properties_info		53129	1					
ANR	53385	Identifier	ce		53129	0					
ANR	53386	Identifier	properties_info		53129	1					
ANR	53387	Argument	name		53129	1					
ANR	53388	Identifier	name		53129	0					
ANR	53389	Identifier	NULL		53129	1					
ANR	53390	EqualityExpression	( property_info_ptr -> flags & ZEND_ACC_STATIC ) == 0		53129	1		==			
ANR	53391	BitAndExpression	property_info_ptr -> flags & ZEND_ACC_STATIC		53129	0		&			
ANR	53392	PtrMemberAccess	property_info_ptr -> flags		53129	0					
ANR	53393	Identifier	property_info_ptr		53129	0					
ANR	53394	Identifier	flags		53129	1					
ANR	53395	Identifier	ZEND_ACC_STATIC		53129	1					
ANR	53396	PrimaryExpression	0		53129	1					
ANR	53397	CompoundStatement		35:57:1477:1477	53129	1					
ANR	53398	ExpressionStatement	property_info -> offset = property_info_ptr -> offset	3635:3:108688:108737	53129	0	True				
ANR	53399	AssignmentExpression	property_info -> offset = property_info_ptr -> offset		53129	0		=			
ANR	53400	PtrMemberAccess	property_info -> offset		53129	0					
ANR	53401	Identifier	property_info		53129	0					
ANR	53402	Identifier	offset		53129	1					
ANR	53403	PtrMemberAccess	property_info_ptr -> offset		53129	1					
ANR	53404	Identifier	property_info_ptr		53129	0					
ANR	53405	Identifier	offset		53129	1					
ANR	53406	ExpressionStatement	zval_ptr_dtor ( & ce -> default_properties_table [ OBJ_PROP_TO_NUM ( property_info -> offset ) ] )	3636:3:108742:108826	53129	1	True				
ANR	53407	CallExpression	zval_ptr_dtor ( & ce -> default_properties_table [ OBJ_PROP_TO_NUM ( property_info -> offset ) ] )		53129	0					
ANR	53408	Callee	zval_ptr_dtor		53129	0					
ANR	53409	Identifier	zval_ptr_dtor		53129	0					
ANR	53410	ArgumentList	& ce -> default_properties_table [ OBJ_PROP_TO_NUM ( property_info -> offset ) ]		53129	1					
ANR	53411	Argument	& ce -> default_properties_table [ OBJ_PROP_TO_NUM ( property_info -> offset ) ]		53129	0					
ANR	53412	UnaryOperationExpression	& ce -> default_properties_table [ OBJ_PROP_TO_NUM ( property_info -> offset ) ]		53129	0					
ANR	53413	UnaryOperator	&		53129	0					
ANR	53414	ArrayIndexing	ce -> default_properties_table [ OBJ_PROP_TO_NUM ( property_info -> offset ) ]		53129	1					
ANR	53415	PtrMemberAccess	ce -> default_properties_table		53129	0					
ANR	53416	Identifier	ce		53129	0					
ANR	53417	Identifier	default_properties_table		53129	1					
ANR	53418	CallExpression	OBJ_PROP_TO_NUM ( property_info -> offset )		53129	1					
ANR	53419	Callee	OBJ_PROP_TO_NUM		53129	0					
ANR	53420	Identifier	OBJ_PROP_TO_NUM		53129	0					
ANR	53421	ArgumentList	property_info -> offset		53129	1					
ANR	53422	Argument	property_info -> offset		53129	0					
ANR	53423	PtrMemberAccess	property_info -> offset		53129	0					
ANR	53424	Identifier	property_info		53129	0					
ANR	53425	Identifier	offset		53129	1					
ANR	53426	ExpressionStatement	"zend_hash_del ( & ce -> properties_info , name )"	3637:3:108831:108872	53129	2	True				
ANR	53427	CallExpression	"zend_hash_del ( & ce -> properties_info , name )"		53129	0					
ANR	53428	Callee	zend_hash_del		53129	0					
ANR	53429	Identifier	zend_hash_del		53129	0					
ANR	53430	ArgumentList	& ce -> properties_info		53129	1					
ANR	53431	Argument	& ce -> properties_info		53129	0					
ANR	53432	UnaryOperationExpression	& ce -> properties_info		53129	0					
ANR	53433	UnaryOperator	&		53129	0					
ANR	53434	PtrMemberAccess	ce -> properties_info		53129	1					
ANR	53435	Identifier	ce		53129	0					
ANR	53436	Identifier	properties_info		53129	1					
ANR	53437	Argument	name		53129	1					
ANR	53438	Identifier	name		53129	0					
ANR	53439	ElseStatement	else		53129	0					
ANR	53440	CompoundStatement		39:9:1677:1677	53129	0					
ANR	53441	ExpressionStatement	property_info -> offset = OBJ_PROP_TO_OFFSET ( ce -> default_properties_count )	3639:3:108888:108960	53129	0	True				
ANR	53442	AssignmentExpression	property_info -> offset = OBJ_PROP_TO_OFFSET ( ce -> default_properties_count )		53129	0		=			
ANR	53443	PtrMemberAccess	property_info -> offset		53129	0					
ANR	53444	Identifier	property_info		53129	0					
ANR	53445	Identifier	offset		53129	1					
ANR	53446	CallExpression	OBJ_PROP_TO_OFFSET ( ce -> default_properties_count )		53129	1					
ANR	53447	Callee	OBJ_PROP_TO_OFFSET		53129	0					
ANR	53448	Identifier	OBJ_PROP_TO_OFFSET		53129	0					
ANR	53449	ArgumentList	ce -> default_properties_count		53129	1					
ANR	53450	Argument	ce -> default_properties_count		53129	0					
ANR	53451	PtrMemberAccess	ce -> default_properties_count		53129	0					
ANR	53452	Identifier	ce		53129	0					
ANR	53453	Identifier	default_properties_count		53129	1					
ANR	53454	ExpressionStatement	ce -> default_properties_count ++	3640:3:108965:108995	53129	1	True				
ANR	53455	PostIncDecOperationExpression	ce -> default_properties_count ++		53129	0					
ANR	53456	PtrMemberAccess	ce -> default_properties_count		53129	0					
ANR	53457	Identifier	ce		53129	0					
ANR	53458	Identifier	default_properties_count		53129	1					
ANR	53459	IncDec	++		53129	1					
ANR	53460	ExpressionStatement	"ce -> default_properties_table = perealloc ( ce -> default_properties_table , sizeof ( zval ) * ce -> default_properties_count , ce -> type == ZEND_INTERNAL_CLASS )"	3641:3:109000:109148	53129	2	True				
ANR	53461	AssignmentExpression	"ce -> default_properties_table = perealloc ( ce -> default_properties_table , sizeof ( zval ) * ce -> default_properties_count , ce -> type == ZEND_INTERNAL_CLASS )"		53129	0		=			
ANR	53462	PtrMemberAccess	ce -> default_properties_table		53129	0					
ANR	53463	Identifier	ce		53129	0					
ANR	53464	Identifier	default_properties_table		53129	1					
ANR	53465	CallExpression	"perealloc ( ce -> default_properties_table , sizeof ( zval ) * ce -> default_properties_count , ce -> type == ZEND_INTERNAL_CLASS )"		53129	1					
ANR	53466	Callee	perealloc		53129	0					
ANR	53467	Identifier	perealloc		53129	0					
ANR	53468	ArgumentList	ce -> default_properties_table		53129	1					
ANR	53469	Argument	ce -> default_properties_table		53129	0					
ANR	53470	PtrMemberAccess	ce -> default_properties_table		53129	0					
ANR	53471	Identifier	ce		53129	0					
ANR	53472	Identifier	default_properties_table		53129	1					
ANR	53473	Argument	sizeof ( zval ) * ce -> default_properties_count		53129	1					
ANR	53474	MultiplicativeExpression	sizeof ( zval ) * ce -> default_properties_count		53129	0		*			
ANR	53475	SizeofExpression	sizeof ( zval )		53129	0					
ANR	53476	Sizeof	sizeof		53129	0					
ANR	53477	SizeofOperand	zval		53129	1					
ANR	53478	PtrMemberAccess	ce -> default_properties_count		53129	1					
ANR	53479	Identifier	ce		53129	0					
ANR	53480	Identifier	default_properties_count		53129	1					
ANR	53481	Argument	ce -> type == ZEND_INTERNAL_CLASS		53129	2					
ANR	53482	EqualityExpression	ce -> type == ZEND_INTERNAL_CLASS		53129	0		==			
ANR	53483	PtrMemberAccess	ce -> type		53129	0					
ANR	53484	Identifier	ce		53129	0					
ANR	53485	Identifier	type		53129	1					
ANR	53486	Identifier	ZEND_INTERNAL_CLASS		53129	1					
ANR	53487	ExpressionStatement	"ZVAL_COPY_VALUE ( & ce -> default_properties_table [ OBJ_PROP_TO_NUM ( property_info -> offset ) ] , property )"	3643:2:109156:109252	53129	1	True				
ANR	53488	CallExpression	"ZVAL_COPY_VALUE ( & ce -> default_properties_table [ OBJ_PROP_TO_NUM ( property_info -> offset ) ] , property )"		53129	0					
ANR	53489	Callee	ZVAL_COPY_VALUE		53129	0					
ANR	53490	Identifier	ZVAL_COPY_VALUE		53129	0					
ANR	53491	ArgumentList	& ce -> default_properties_table [ OBJ_PROP_TO_NUM ( property_info -> offset ) ]		53129	1					
ANR	53492	Argument	& ce -> default_properties_table [ OBJ_PROP_TO_NUM ( property_info -> offset ) ]		53129	0					
ANR	53493	UnaryOperationExpression	& ce -> default_properties_table [ OBJ_PROP_TO_NUM ( property_info -> offset ) ]		53129	0					
ANR	53494	UnaryOperator	&		53129	0					
ANR	53495	ArrayIndexing	ce -> default_properties_table [ OBJ_PROP_TO_NUM ( property_info -> offset ) ]		53129	1					
ANR	53496	PtrMemberAccess	ce -> default_properties_table		53129	0					
ANR	53497	Identifier	ce		53129	0					
ANR	53498	Identifier	default_properties_table		53129	1					
ANR	53499	CallExpression	OBJ_PROP_TO_NUM ( property_info -> offset )		53129	1					
ANR	53500	Callee	OBJ_PROP_TO_NUM		53129	0					
ANR	53501	Identifier	OBJ_PROP_TO_NUM		53129	0					
ANR	53502	ArgumentList	property_info -> offset		53129	1					
ANR	53503	Argument	property_info -> offset		53129	0					
ANR	53504	PtrMemberAccess	property_info -> offset		53129	0					
ANR	53505	Identifier	property_info		53129	0					
ANR	53506	Identifier	offset		53129	1					
ANR	53507	Argument	property		53129	1					
ANR	53508	Identifier	property		53129	0					
ANR	53509	IfStatement	if ( ce -> type & ZEND_INTERNAL_CLASS )		53129	4					
ANR	53510	Condition	ce -> type & ZEND_INTERNAL_CLASS	3645:5:109262:109291	53129	0	True				
ANR	53511	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		53129	0		&			
ANR	53512	PtrMemberAccess	ce -> type		53129	0					
ANR	53513	Identifier	ce		53129	0					
ANR	53514	Identifier	type		53129	1					
ANR	53515	Identifier	ZEND_INTERNAL_CLASS		53129	1					
ANR	53516	CompoundStatement		46:37:2088:2088	53129	1					
ANR	53517	SwitchStatement	switch ( Z_TYPE_P ( property ) )		53129	0					
ANR	53518	Condition	Z_TYPE_P ( property )	3646:9:109305:109322	53129	0	True				
ANR	53519	CallExpression	Z_TYPE_P ( property )		53129	0					
ANR	53520	Callee	Z_TYPE_P		53129	0					
ANR	53521	Identifier	Z_TYPE_P		53129	0					
ANR	53522	ArgumentList	property		53129	1					
ANR	53523	Argument	property		53129	0					
ANR	53524	Identifier	property		53129	0					
ANR	53525	CompoundStatement		47:29:2119:2119	53129	1					
ANR	53526	Label	case IS_ARRAY :	3647:3:109330:109343	53129	0	True				
ANR	53527	Identifier	IS_ARRAY		53129	0					
ANR	53528	Label	case IS_OBJECT :	3648:3:109348:109362	53129	1	True				
ANR	53529	Identifier	IS_OBJECT		53129	0					
ANR	53530	Label	case IS_RESOURCE :	3649:3:109367:109383	53129	2	True				
ANR	53531	Identifier	IS_RESOURCE		53129	0					
ANR	53532	ExpressionStatement	"zend_error_noreturn ( E_CORE_ERROR , ""Internal zval's can't be arrays, objects or resources"" )"	3650:4:109389:109479	53129	3	True				
ANR	53533	CallExpression	"zend_error_noreturn ( E_CORE_ERROR , ""Internal zval's can't be arrays, objects or resources"" )"		53129	0					
ANR	53534	Callee	zend_error_noreturn		53129	0					
ANR	53535	Identifier	zend_error_noreturn		53129	0					
ANR	53536	ArgumentList	E_CORE_ERROR		53129	1					
ANR	53537	Argument	E_CORE_ERROR		53129	0					
ANR	53538	Identifier	E_CORE_ERROR		53129	0					
ANR	53539	Argument	"""Internal zval's can't be arrays, objects or resources"""		53129	1					
ANR	53540	PrimaryExpression	"""Internal zval's can't be arrays, objects or resources"""		53129	0					
ANR	53541	BreakStatement	break ;	3651:4:109485:109490	53129	4	True				
ANR	53542	Label	default :	3652:3:109495:109502	53129	5	True				
ANR	53543	Identifier	default		53129	0					
ANR	53544	BreakStatement	break ;	3653:4:109508:109513	53129	6	True				
ANR	53545	IfStatement	if ( access_type & ZEND_ACC_PUBLIC )		53129	5					
ANR	53546	Condition	access_type & ZEND_ACC_PUBLIC	3656:5:109527:109555	53129	0	True				
ANR	53547	BitAndExpression	access_type & ZEND_ACC_PUBLIC		53129	0		&			
ANR	53548	Identifier	access_type		53129	0					
ANR	53549	Identifier	ZEND_ACC_PUBLIC		53129	1					
ANR	53550	CompoundStatement		57:36:2352:2352	53129	1					
ANR	53551	ExpressionStatement	property_info -> name = zend_string_copy ( name )	3657:2:109562:109606	53129	0	True				
ANR	53552	AssignmentExpression	property_info -> name = zend_string_copy ( name )		53129	0		=			
ANR	53553	PtrMemberAccess	property_info -> name		53129	0					
ANR	53554	Identifier	property_info		53129	0					
ANR	53555	Identifier	name		53129	1					
ANR	53556	CallExpression	zend_string_copy ( name )		53129	1					
ANR	53557	Callee	zend_string_copy		53129	0					
ANR	53558	Identifier	zend_string_copy		53129	0					
ANR	53559	ArgumentList	name		53129	1					
ANR	53560	Argument	name		53129	0					
ANR	53561	Identifier	name		53129	0					
ANR	53562	ElseStatement	else		53129	0					
ANR	53563	IfStatement	if ( access_type & ZEND_ACC_PRIVATE )		53129	0					
ANR	53564	Condition	access_type & ZEND_ACC_PRIVATE	3658:12:109620:109649	53129	0	True				
ANR	53565	BitAndExpression	access_type & ZEND_ACC_PRIVATE		53129	0		&			
ANR	53566	Identifier	access_type		53129	0					
ANR	53567	Identifier	ZEND_ACC_PRIVATE		53129	1					
ANR	53568	CompoundStatement		59:44:2446:2446	53129	1					
ANR	53569	ExpressionStatement	"property_info -> name = zend_mangle_property_name ( ZSTR_VAL ( ce -> name ) , ZSTR_LEN ( ce -> name ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) , ce -> type & ZEND_INTERNAL_CLASS )"	3659:2:109656:109807	53129	0	True				
ANR	53570	AssignmentExpression	"property_info -> name = zend_mangle_property_name ( ZSTR_VAL ( ce -> name ) , ZSTR_LEN ( ce -> name ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) , ce -> type & ZEND_INTERNAL_CLASS )"		53129	0		=			
ANR	53571	PtrMemberAccess	property_info -> name		53129	0					
ANR	53572	Identifier	property_info		53129	0					
ANR	53573	Identifier	name		53129	1					
ANR	53574	CallExpression	"zend_mangle_property_name ( ZSTR_VAL ( ce -> name ) , ZSTR_LEN ( ce -> name ) , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) , ce -> type & ZEND_INTERNAL_CLASS )"		53129	1					
ANR	53575	Callee	zend_mangle_property_name		53129	0					
ANR	53576	Identifier	zend_mangle_property_name		53129	0					
ANR	53577	ArgumentList	ZSTR_VAL ( ce -> name )		53129	1					
ANR	53578	Argument	ZSTR_VAL ( ce -> name )		53129	0					
ANR	53579	CallExpression	ZSTR_VAL ( ce -> name )		53129	0					
ANR	53580	Callee	ZSTR_VAL		53129	0					
ANR	53581	Identifier	ZSTR_VAL		53129	0					
ANR	53582	ArgumentList	ce -> name		53129	1					
ANR	53583	Argument	ce -> name		53129	0					
ANR	53584	PtrMemberAccess	ce -> name		53129	0					
ANR	53585	Identifier	ce		53129	0					
ANR	53586	Identifier	name		53129	1					
ANR	53587	Argument	ZSTR_LEN ( ce -> name )		53129	1					
ANR	53588	CallExpression	ZSTR_LEN ( ce -> name )		53129	0					
ANR	53589	Callee	ZSTR_LEN		53129	0					
ANR	53590	Identifier	ZSTR_LEN		53129	0					
ANR	53591	ArgumentList	ce -> name		53129	1					
ANR	53592	Argument	ce -> name		53129	0					
ANR	53593	PtrMemberAccess	ce -> name		53129	0					
ANR	53594	Identifier	ce		53129	0					
ANR	53595	Identifier	name		53129	1					
ANR	53596	Argument	ZSTR_VAL ( name )		53129	2					
ANR	53597	CallExpression	ZSTR_VAL ( name )		53129	0					
ANR	53598	Callee	ZSTR_VAL		53129	0					
ANR	53599	Identifier	ZSTR_VAL		53129	0					
ANR	53600	ArgumentList	name		53129	1					
ANR	53601	Argument	name		53129	0					
ANR	53602	Identifier	name		53129	0					
ANR	53603	Argument	ZSTR_LEN ( name )		53129	3					
ANR	53604	CallExpression	ZSTR_LEN ( name )		53129	0					
ANR	53605	Callee	ZSTR_LEN		53129	0					
ANR	53606	Identifier	ZSTR_LEN		53129	0					
ANR	53607	ArgumentList	name		53129	1					
ANR	53608	Argument	name		53129	0					
ANR	53609	Identifier	name		53129	0					
ANR	53610	Argument	ce -> type & ZEND_INTERNAL_CLASS		53129	4					
ANR	53611	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		53129	0		&			
ANR	53612	PtrMemberAccess	ce -> type		53129	0					
ANR	53613	Identifier	ce		53129	0					
ANR	53614	Identifier	type		53129	1					
ANR	53615	Identifier	ZEND_INTERNAL_CLASS		53129	1					
ANR	53616	ElseStatement	else		53129	0					
ANR	53617	CompoundStatement		61:8:2611:2611	53129	0					
ANR	53618	ExpressionStatement	ZEND_ASSERT ( access_type & ZEND_ACC_PROTECTED )	3661:2:109821:109866	53129	0	True				
ANR	53619	CallExpression	ZEND_ASSERT ( access_type & ZEND_ACC_PROTECTED )		53129	0					
ANR	53620	Callee	ZEND_ASSERT		53129	0					
ANR	53621	Identifier	ZEND_ASSERT		53129	0					
ANR	53622	ArgumentList	access_type & ZEND_ACC_PROTECTED		53129	1					
ANR	53623	Argument	access_type & ZEND_ACC_PROTECTED		53129	0					
ANR	53624	BitAndExpression	access_type & ZEND_ACC_PROTECTED		53129	0		&			
ANR	53625	Identifier	access_type		53129	0					
ANR	53626	Identifier	ZEND_ACC_PROTECTED		53129	1					
ANR	53627	ExpressionStatement	"property_info -> name = zend_mangle_property_name ( ""*"" , 1 , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) , ce -> type & ZEND_INTERNAL_CLASS )"	3662:2:109870:109989	53129	1	True				
ANR	53628	AssignmentExpression	"property_info -> name = zend_mangle_property_name ( ""*"" , 1 , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) , ce -> type & ZEND_INTERNAL_CLASS )"		53129	0		=			
ANR	53629	PtrMemberAccess	property_info -> name		53129	0					
ANR	53630	Identifier	property_info		53129	0					
ANR	53631	Identifier	name		53129	1					
ANR	53632	CallExpression	"zend_mangle_property_name ( ""*"" , 1 , ZSTR_VAL ( name ) , ZSTR_LEN ( name ) , ce -> type & ZEND_INTERNAL_CLASS )"		53129	1					
ANR	53633	Callee	zend_mangle_property_name		53129	0					
ANR	53634	Identifier	zend_mangle_property_name		53129	0					
ANR	53635	ArgumentList	"""*"""		53129	1					
ANR	53636	Argument	"""*"""		53129	0					
ANR	53637	PrimaryExpression	"""*"""		53129	0					
ANR	53638	Argument	1		53129	1					
ANR	53639	PrimaryExpression	1		53129	0					
ANR	53640	Argument	ZSTR_VAL ( name )		53129	2					
ANR	53641	CallExpression	ZSTR_VAL ( name )		53129	0					
ANR	53642	Callee	ZSTR_VAL		53129	0					
ANR	53643	Identifier	ZSTR_VAL		53129	0					
ANR	53644	ArgumentList	name		53129	1					
ANR	53645	Argument	name		53129	0					
ANR	53646	Identifier	name		53129	0					
ANR	53647	Argument	ZSTR_LEN ( name )		53129	3					
ANR	53648	CallExpression	ZSTR_LEN ( name )		53129	0					
ANR	53649	Callee	ZSTR_LEN		53129	0					
ANR	53650	Identifier	ZSTR_LEN		53129	0					
ANR	53651	ArgumentList	name		53129	1					
ANR	53652	Argument	name		53129	0					
ANR	53653	Identifier	name		53129	0					
ANR	53654	Argument	ce -> type & ZEND_INTERNAL_CLASS		53129	4					
ANR	53655	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		53129	0		&			
ANR	53656	PtrMemberAccess	ce -> type		53129	0					
ANR	53657	Identifier	ce		53129	0					
ANR	53658	Identifier	type		53129	1					
ANR	53659	Identifier	ZEND_INTERNAL_CLASS		53129	1					
ANR	53660	ExpressionStatement	property_info -> name = zend_new_interned_string ( property_info -> name )	3665:1:109996:110063	53129	6	True				
ANR	53661	AssignmentExpression	property_info -> name = zend_new_interned_string ( property_info -> name )		53129	0		=			
ANR	53662	PtrMemberAccess	property_info -> name		53129	0					
ANR	53663	Identifier	property_info		53129	0					
ANR	53664	Identifier	name		53129	1					
ANR	53665	CallExpression	zend_new_interned_string ( property_info -> name )		53129	1					
ANR	53666	Callee	zend_new_interned_string		53129	0					
ANR	53667	Identifier	zend_new_interned_string		53129	0					
ANR	53668	ArgumentList	property_info -> name		53129	1					
ANR	53669	Argument	property_info -> name		53129	0					
ANR	53670	PtrMemberAccess	property_info -> name		53129	0					
ANR	53671	Identifier	property_info		53129	0					
ANR	53672	Identifier	name		53129	1					
ANR	53673	ExpressionStatement	property_info -> flags = access_type	3666:1:110066:110100	53129	7	True				
ANR	53674	AssignmentExpression	property_info -> flags = access_type		53129	0		=			
ANR	53675	PtrMemberAccess	property_info -> flags		53129	0					
ANR	53676	Identifier	property_info		53129	0					
ANR	53677	Identifier	flags		53129	1					
ANR	53678	Identifier	access_type		53129	1					
ANR	53679	ExpressionStatement	property_info -> doc_comment = doc_comment	3667:1:110103:110143	53129	8	True				
ANR	53680	AssignmentExpression	property_info -> doc_comment = doc_comment		53129	0		=			
ANR	53681	PtrMemberAccess	property_info -> doc_comment		53129	0					
ANR	53682	Identifier	property_info		53129	0					
ANR	53683	Identifier	doc_comment		53129	1					
ANR	53684	Identifier	doc_comment		53129	1					
ANR	53685	ExpressionStatement	property_info -> ce = ce	3668:1:110146:110168	53129	9	True				
ANR	53686	AssignmentExpression	property_info -> ce = ce		53129	0		=			
ANR	53687	PtrMemberAccess	property_info -> ce		53129	0					
ANR	53688	Identifier	property_info		53129	0					
ANR	53689	Identifier	ce		53129	1					
ANR	53690	Identifier	ce		53129	1					
ANR	53691	ExpressionStatement	"zend_hash_update_ptr ( & ce -> properties_info , name , property_info )"	3669:1:110171:110234	53129	10	True				
ANR	53692	CallExpression	"zend_hash_update_ptr ( & ce -> properties_info , name , property_info )"		53129	0					
ANR	53693	Callee	zend_hash_update_ptr		53129	0					
ANR	53694	Identifier	zend_hash_update_ptr		53129	0					
ANR	53695	ArgumentList	& ce -> properties_info		53129	1					
ANR	53696	Argument	& ce -> properties_info		53129	0					
ANR	53697	UnaryOperationExpression	& ce -> properties_info		53129	0					
ANR	53698	UnaryOperator	&		53129	0					
ANR	53699	PtrMemberAccess	ce -> properties_info		53129	1					
ANR	53700	Identifier	ce		53129	0					
ANR	53701	Identifier	properties_info		53129	1					
ANR	53702	Argument	name		53129	1					
ANR	53703	Identifier	name		53129	0					
ANR	53704	Argument	property_info		53129	2					
ANR	53705	Identifier	property_info		53129	0					
ANR	53706	ReturnStatement	return SUCCESS ;	3671:1:110238:110252	53129	11	True				
ANR	53707	Identifier	SUCCESS		53129	0					
ANR	53708	ReturnType	ZEND_API int		53129	1					
ANR	53709	Identifier	zend_declare_property_ex		53129	2					
ANR	53710	ParameterList	"zend_class_entry * ce , zend_string * name , zval * property , int access_type , zend_string * doc_comment"		53129	3					
ANR	53711	Parameter	zend_class_entry * ce	3599:38:107095:107114	53129	0	True				
ANR	53712	ParameterType	zend_class_entry *		53129	0					
ANR	53713	Identifier	ce		53129	1					
ANR	53714	Parameter	zend_string * name	3599:60:107117:107133	53129	1	True				
ANR	53715	ParameterType	zend_string *		53129	0					
ANR	53716	Identifier	name		53129	1					
ANR	53717	Parameter	zval * property	3599:79:107136:107149	53129	2	True				
ANR	53718	ParameterType	zval *		53129	0					
ANR	53719	Identifier	property		53129	1					
ANR	53720	Parameter	int access_type	3599:95:107152:107166	53129	3	True				
ANR	53721	ParameterType	int		53129	0					
ANR	53722	Identifier	access_type		53129	1					
ANR	53723	Parameter	zend_string * doc_comment	3599:112:107169:107192	53129	4	True				
ANR	53724	ParameterType	zend_string *		53129	0					
ANR	53725	Identifier	doc_comment		53129	1					
ANR	53726	CFGEntryNode	ENTRY		53129		True				
ANR	53727	CFGExitNode	EXIT		53129		True				
ANR	53728	Symbol	doc_comment		53129						
ANR	53729	Symbol	ce -> default_properties_count		53129						
ANR	53730	Symbol	Z_CONSTANT_P		53129						
ANR	53731	Symbol	OBJ_PROP_TO_OFFSET		53129						
ANR	53732	Symbol	zend_mangle_property_name		53129						
ANR	53733	Symbol	* ce		53129						
ANR	53734	Symbol	arena		53129						
ANR	53735	Symbol	ce -> static_members_table		53129						
ANR	53736	Symbol	& CG		53129						
ANR	53737	Symbol	* property_info		53129						
ANR	53738	Symbol	property_info_ptr -> flags		53129						
ANR	53739	Symbol	ZEND_USER_CLASS		53129						
ANR	53740	Symbol	property		53129						
ANR	53741	Symbol	ce -> name		53129						
ANR	53742	Symbol	property_info_ptr		53129						
ANR	53743	Symbol	zend_hash_find_ptr		53129						
ANR	53744	Symbol	ZEND_INTERNAL_CLASS		53129						
ANR	53745	Symbol	NULL		53129						
ANR	53746	Symbol	zend_arena_alloc		53129						
ANR	53747	Symbol	ce -> default_properties_table		53129						
ANR	53748	Symbol	property_info -> name		53129						
ANR	53749	Symbol	zend_string_copy		53129						
ANR	53750	Symbol	ce -> default_static_members_table		53129						
ANR	53751	Symbol	property_info -> ce		53129						
ANR	53752	Symbol	ce -> ce_flags		53129						
ANR	53753	Symbol	& ce -> properties_info		53129						
ANR	53754	Symbol	name		53129						
ANR	53755	Symbol	~ZEND_ACC_CONSTANTS_UPDATED		53129						
ANR	53756	Symbol	ce -> type		53129						
ANR	53757	Symbol	access_type		53129						
ANR	53758	Symbol	property_info -> offset		53129						
ANR	53759	Symbol	property_info_ptr -> offset		53129						
ANR	53760	Symbol	ce -> default_static_members_count		53129						
ANR	53761	Symbol	ZEND_ACC_PPP_MASK		53129						
ANR	53762	Symbol	ZEND_ACC_PUBLIC		53129						
ANR	53763	Symbol	E_CORE_ERROR		53129						
ANR	53764	Symbol	ZEND_ACC_STATIC		53129						
ANR	53765	Symbol	ZEND_ACC_PROTECTED		53129						
ANR	53766	Symbol	* property_info_ptr		53129						
ANR	53767	Symbol	property_info -> flags		53129						
ANR	53768	Symbol	property_info		53129						
ANR	53769	Symbol	OBJ_PROP_TO_NUM		53129						
ANR	53770	Symbol	ce		53129						
ANR	53771	Symbol	SUCCESS		53129						
ANR	53772	Symbol	Z_TYPE_P		53129						
ANR	53773	Symbol	ZEND_ACC_PRIVATE		53129						
ANR	53774	Symbol	ZSTR_VAL		53129						
ANR	53775	Symbol	property_info -> doc_comment		53129						
ANR	53776	Symbol	zend_new_interned_string		53129						
ANR	53777	Symbol	ZSTR_LEN		53129						
ANR	53778	Symbol	perealloc		53129						
ANR	53779	Symbol	pemalloc		53129						
ANR	53780	Function	zend_declare_property	3675:0:110267:110611							
ANR	53781	FunctionDef	"zend_declare_property (zend_class_entry * ce , const char * name , size_t name_length , zval * property , int access_type)"		53780	0					
ANR	53782	CompoundStatement		3676:0:110405:110611	53780	0					
ANR	53783	IdentifierDeclStatement	"zend_string * key = zend_string_init ( name , name_length , ce -> type & ZEND_INTERNAL_CLASS ) ;"	3677:1:110408:110494	53780	0	True				
ANR	53784	IdentifierDecl	"* key = zend_string_init ( name , name_length , ce -> type & ZEND_INTERNAL_CLASS )"		53780	0					
ANR	53785	IdentifierDeclType	zend_string *		53780	0					
ANR	53786	Identifier	key		53780	1					
ANR	53787	AssignmentExpression	"* key = zend_string_init ( name , name_length , ce -> type & ZEND_INTERNAL_CLASS )"		53780	2		=			
ANR	53788	Identifier	key		53780	0					
ANR	53789	CallExpression	"zend_string_init ( name , name_length , ce -> type & ZEND_INTERNAL_CLASS )"		53780	1					
ANR	53790	Callee	zend_string_init		53780	0					
ANR	53791	Identifier	zend_string_init		53780	0					
ANR	53792	ArgumentList	name		53780	1					
ANR	53793	Argument	name		53780	0					
ANR	53794	Identifier	name		53780	0					
ANR	53795	Argument	name_length		53780	1					
ANR	53796	Identifier	name_length		53780	0					
ANR	53797	Argument	ce -> type & ZEND_INTERNAL_CLASS		53780	2					
ANR	53798	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		53780	0		&			
ANR	53799	PtrMemberAccess	ce -> type		53780	0					
ANR	53800	Identifier	ce		53780	0					
ANR	53801	Identifier	type		53780	1					
ANR	53802	Identifier	ZEND_INTERNAL_CLASS		53780	1					
ANR	53803	IdentifierDeclStatement	"int ret = zend_declare_property_ex ( ce , key , property , access_type , NULL ) ;"	3678:1:110497:110569	53780	1	True				
ANR	53804	IdentifierDecl	"ret = zend_declare_property_ex ( ce , key , property , access_type , NULL )"		53780	0					
ANR	53805	IdentifierDeclType	int		53780	0					
ANR	53806	Identifier	ret		53780	1					
ANR	53807	AssignmentExpression	"ret = zend_declare_property_ex ( ce , key , property , access_type , NULL )"		53780	2		=			
ANR	53808	Identifier	ret		53780	0					
ANR	53809	CallExpression	"zend_declare_property_ex ( ce , key , property , access_type , NULL )"		53780	1					
ANR	53810	Callee	zend_declare_property_ex		53780	0					
ANR	53811	Identifier	zend_declare_property_ex		53780	0					
ANR	53812	ArgumentList	ce		53780	1					
ANR	53813	Argument	ce		53780	0					
ANR	53814	Identifier	ce		53780	0					
ANR	53815	Argument	key		53780	1					
ANR	53816	Identifier	key		53780	0					
ANR	53817	Argument	property		53780	2					
ANR	53818	Identifier	property		53780	0					
ANR	53819	Argument	access_type		53780	3					
ANR	53820	Identifier	access_type		53780	0					
ANR	53821	Argument	NULL		53780	4					
ANR	53822	Identifier	NULL		53780	0					
ANR	53823	ExpressionStatement	zend_string_release ( key )	3679:1:110572:110596	53780	2	True				
ANR	53824	CallExpression	zend_string_release ( key )		53780	0					
ANR	53825	Callee	zend_string_release		53780	0					
ANR	53826	Identifier	zend_string_release		53780	0					
ANR	53827	ArgumentList	key		53780	1					
ANR	53828	Argument	key		53780	0					
ANR	53829	Identifier	key		53780	0					
ANR	53830	ReturnStatement	return ret ;	3680:1:110599:110609	53780	3	True				
ANR	53831	Identifier	ret		53780	0					
ANR	53832	ReturnType	ZEND_API int		53780	1					
ANR	53833	Identifier	zend_declare_property		53780	2					
ANR	53834	ParameterList	"zend_class_entry * ce , const char * name , size_t name_length , zval * property , int access_type"		53780	3					
ANR	53835	Parameter	zend_class_entry * ce	3675:35:110302:110321	53780	0	True				
ANR	53836	ParameterType	zend_class_entry *		53780	0					
ANR	53837	Identifier	ce		53780	1					
ANR	53838	Parameter	const char * name	3675:57:110324:110339	53780	1	True				
ANR	53839	ParameterType	const char *		53780	0					
ANR	53840	Identifier	name		53780	1					
ANR	53841	Parameter	size_t name_length	3675:75:110342:110359	53780	2	True				
ANR	53842	ParameterType	size_t		53780	0					
ANR	53843	Identifier	name_length		53780	1					
ANR	53844	Parameter	zval * property	3675:95:110362:110375	53780	3	True				
ANR	53845	ParameterType	zval *		53780	0					
ANR	53846	Identifier	property		53780	1					
ANR	53847	Parameter	int access_type	3675:111:110378:110392	53780	4	True				
ANR	53848	ParameterType	int		53780	0					
ANR	53849	Identifier	access_type		53780	1					
ANR	53850	CFGEntryNode	ENTRY		53780		True				
ANR	53851	CFGExitNode	EXIT		53780		True				
ANR	53852	Symbol	ZEND_INTERNAL_CLASS		53780						
ANR	53853	Symbol	ret		53780						
ANR	53854	Symbol	ce -> type		53780						
ANR	53855	Symbol	ce		53780						
ANR	53856	Symbol	access_type		53780						
ANR	53857	Symbol	NULL		53780						
ANR	53858	Symbol	name_length		53780						
ANR	53859	Symbol	* ce		53780						
ANR	53860	Symbol	zend_string_init		53780						
ANR	53861	Symbol	zend_declare_property_ex		53780						
ANR	53862	Symbol	name		53780						
ANR	53863	Symbol	property		53780						
ANR	53864	Symbol	key		53780						
ANR	53865	Function	zend_declare_property_null	3684:0:110624:110871							
ANR	53866	FunctionDef	"zend_declare_property_null (zend_class_entry * ce , const char * name , size_t name_length , int access_type)"		53865	0					
ANR	53867	CompoundStatement		3685:0:110751:110871	53865	0					
ANR	53868	IdentifierDeclStatement	zval property ;	3686:1:110754:110767	53865	0	True				
ANR	53869	IdentifierDecl	property		53865	0					
ANR	53870	IdentifierDeclType	zval		53865	0					
ANR	53871	Identifier	property		53865	1					
ANR	53872	ExpressionStatement	ZVAL_NULL ( & property )	3688:1:110771:110791	53865	1	True				
ANR	53873	CallExpression	ZVAL_NULL ( & property )		53865	0					
ANR	53874	Callee	ZVAL_NULL		53865	0					
ANR	53875	Identifier	ZVAL_NULL		53865	0					
ANR	53876	ArgumentList	& property		53865	1					
ANR	53877	Argument	& property		53865	0					
ANR	53878	UnaryOperationExpression	& property		53865	0					
ANR	53879	UnaryOperator	&		53865	0					
ANR	53880	Identifier	property		53865	1					
ANR	53881	ReturnStatement	"return zend_declare_property ( ce , name , name_length , & property , access_type ) ;"	3689:1:110794:110869	53865	2	True				
ANR	53882	CallExpression	"zend_declare_property ( ce , name , name_length , & property , access_type )"		53865	0					
ANR	53883	Callee	zend_declare_property		53865	0					
ANR	53884	Identifier	zend_declare_property		53865	0					
ANR	53885	ArgumentList	ce		53865	1					
ANR	53886	Argument	ce		53865	0					
ANR	53887	Identifier	ce		53865	0					
ANR	53888	Argument	name		53865	1					
ANR	53889	Identifier	name		53865	0					
ANR	53890	Argument	name_length		53865	2					
ANR	53891	Identifier	name_length		53865	0					
ANR	53892	Argument	& property		53865	3					
ANR	53893	UnaryOperationExpression	& property		53865	0					
ANR	53894	UnaryOperator	&		53865	0					
ANR	53895	Identifier	property		53865	1					
ANR	53896	Argument	access_type		53865	4					
ANR	53897	Identifier	access_type		53865	0					
ANR	53898	ReturnType	ZEND_API int		53865	1					
ANR	53899	Identifier	zend_declare_property_null		53865	2					
ANR	53900	ParameterList	"zend_class_entry * ce , const char * name , size_t name_length , int access_type"		53865	3					
ANR	53901	Parameter	zend_class_entry * ce	3684:40:110664:110683	53865	0	True				
ANR	53902	ParameterType	zend_class_entry *		53865	0					
ANR	53903	Identifier	ce		53865	1					
ANR	53904	Parameter	const char * name	3684:62:110686:110701	53865	1	True				
ANR	53905	ParameterType	const char *		53865	0					
ANR	53906	Identifier	name		53865	1					
ANR	53907	Parameter	size_t name_length	3684:80:110704:110721	53865	2	True				
ANR	53908	ParameterType	size_t		53865	0					
ANR	53909	Identifier	name_length		53865	1					
ANR	53910	Parameter	int access_type	3684:100:110724:110738	53865	3	True				
ANR	53911	ParameterType	int		53865	0					
ANR	53912	Identifier	access_type		53865	1					
ANR	53913	CFGEntryNode	ENTRY		53865		True				
ANR	53914	CFGExitNode	EXIT		53865		True				
ANR	53915	Symbol	ce		53865						
ANR	53916	Symbol	access_type		53865						
ANR	53917	Symbol	name		53865						
ANR	53918	Symbol	property		53865						
ANR	53919	Symbol	name_length		53865						
ANR	53920	Symbol	& property		53865						
ANR	53921	Symbol	zend_declare_property		53865						
ANR	53922	Function	zend_declare_property_bool	3693:0:110884:111155							
ANR	53923	FunctionDef	"zend_declare_property_bool (zend_class_entry * ce , const char * name , size_t name_length , zend_long value , int access_type)"		53922	0					
ANR	53924	CompoundStatement		3694:0:111028:111155	53922	0					
ANR	53925	IdentifierDeclStatement	zval property ;	3695:1:111031:111044	53922	0	True				
ANR	53926	IdentifierDecl	property		53922	0					
ANR	53927	IdentifierDeclType	zval		53922	0					
ANR	53928	Identifier	property		53922	1					
ANR	53929	ExpressionStatement	"ZVAL_BOOL ( & property , value )"	3697:1:111048:111075	53922	1	True				
ANR	53930	CallExpression	"ZVAL_BOOL ( & property , value )"		53922	0					
ANR	53931	Callee	ZVAL_BOOL		53922	0					
ANR	53932	Identifier	ZVAL_BOOL		53922	0					
ANR	53933	ArgumentList	& property		53922	1					
ANR	53934	Argument	& property		53922	0					
ANR	53935	UnaryOperationExpression	& property		53922	0					
ANR	53936	UnaryOperator	&		53922	0					
ANR	53937	Identifier	property		53922	1					
ANR	53938	Argument	value		53922	1					
ANR	53939	Identifier	value		53922	0					
ANR	53940	ReturnStatement	"return zend_declare_property ( ce , name , name_length , & property , access_type ) ;"	3698:1:111078:111153	53922	2	True				
ANR	53941	CallExpression	"zend_declare_property ( ce , name , name_length , & property , access_type )"		53922	0					
ANR	53942	Callee	zend_declare_property		53922	0					
ANR	53943	Identifier	zend_declare_property		53922	0					
ANR	53944	ArgumentList	ce		53922	1					
ANR	53945	Argument	ce		53922	0					
ANR	53946	Identifier	ce		53922	0					
ANR	53947	Argument	name		53922	1					
ANR	53948	Identifier	name		53922	0					
ANR	53949	Argument	name_length		53922	2					
ANR	53950	Identifier	name_length		53922	0					
ANR	53951	Argument	& property		53922	3					
ANR	53952	UnaryOperationExpression	& property		53922	0					
ANR	53953	UnaryOperator	&		53922	0					
ANR	53954	Identifier	property		53922	1					
ANR	53955	Argument	access_type		53922	4					
ANR	53956	Identifier	access_type		53922	0					
ANR	53957	ReturnType	ZEND_API int		53922	1					
ANR	53958	Identifier	zend_declare_property_bool		53922	2					
ANR	53959	ParameterList	"zend_class_entry * ce , const char * name , size_t name_length , zend_long value , int access_type"		53922	3					
ANR	53960	Parameter	zend_class_entry * ce	3693:40:110924:110943	53922	0	True				
ANR	53961	ParameterType	zend_class_entry *		53922	0					
ANR	53962	Identifier	ce		53922	1					
ANR	53963	Parameter	const char * name	3693:62:110946:110961	53922	1	True				
ANR	53964	ParameterType	const char *		53922	0					
ANR	53965	Identifier	name		53922	1					
ANR	53966	Parameter	size_t name_length	3693:80:110964:110981	53922	2	True				
ANR	53967	ParameterType	size_t		53922	0					
ANR	53968	Identifier	name_length		53922	1					
ANR	53969	Parameter	zend_long value	3693:100:110984:110998	53922	3	True				
ANR	53970	ParameterType	zend_long		53922	0					
ANR	53971	Identifier	value		53922	1					
ANR	53972	Parameter	int access_type	3693:117:111001:111015	53922	4	True				
ANR	53973	ParameterType	int		53922	0					
ANR	53974	Identifier	access_type		53922	1					
ANR	53975	CFGEntryNode	ENTRY		53922		True				
ANR	53976	CFGExitNode	EXIT		53922		True				
ANR	53977	Symbol	ce		53922						
ANR	53978	Symbol	access_type		53922						
ANR	53979	Symbol	name		53922						
ANR	53980	Symbol	property		53922						
ANR	53981	Symbol	name_length		53922						
ANR	53982	Symbol	value		53922						
ANR	53983	Symbol	& property		53922						
ANR	53984	Symbol	zend_declare_property		53922						
ANR	53985	Function	zend_declare_property_long	3702:0:111168:111439							
ANR	53986	FunctionDef	"zend_declare_property_long (zend_class_entry * ce , const char * name , size_t name_length , zend_long value , int access_type)"		53985	0					
ANR	53987	CompoundStatement		3703:0:111312:111439	53985	0					
ANR	53988	IdentifierDeclStatement	zval property ;	3704:1:111315:111328	53985	0	True				
ANR	53989	IdentifierDecl	property		53985	0					
ANR	53990	IdentifierDeclType	zval		53985	0					
ANR	53991	Identifier	property		53985	1					
ANR	53992	ExpressionStatement	"ZVAL_LONG ( & property , value )"	3706:1:111332:111359	53985	1	True				
ANR	53993	CallExpression	"ZVAL_LONG ( & property , value )"		53985	0					
ANR	53994	Callee	ZVAL_LONG		53985	0					
ANR	53995	Identifier	ZVAL_LONG		53985	0					
ANR	53996	ArgumentList	& property		53985	1					
ANR	53997	Argument	& property		53985	0					
ANR	53998	UnaryOperationExpression	& property		53985	0					
ANR	53999	UnaryOperator	&		53985	0					
ANR	54000	Identifier	property		53985	1					
ANR	54001	Argument	value		53985	1					
ANR	54002	Identifier	value		53985	0					
ANR	54003	ReturnStatement	"return zend_declare_property ( ce , name , name_length , & property , access_type ) ;"	3707:1:111362:111437	53985	2	True				
ANR	54004	CallExpression	"zend_declare_property ( ce , name , name_length , & property , access_type )"		53985	0					
ANR	54005	Callee	zend_declare_property		53985	0					
ANR	54006	Identifier	zend_declare_property		53985	0					
ANR	54007	ArgumentList	ce		53985	1					
ANR	54008	Argument	ce		53985	0					
ANR	54009	Identifier	ce		53985	0					
ANR	54010	Argument	name		53985	1					
ANR	54011	Identifier	name		53985	0					
ANR	54012	Argument	name_length		53985	2					
ANR	54013	Identifier	name_length		53985	0					
ANR	54014	Argument	& property		53985	3					
ANR	54015	UnaryOperationExpression	& property		53985	0					
ANR	54016	UnaryOperator	&		53985	0					
ANR	54017	Identifier	property		53985	1					
ANR	54018	Argument	access_type		53985	4					
ANR	54019	Identifier	access_type		53985	0					
ANR	54020	ReturnType	ZEND_API int		53985	1					
ANR	54021	Identifier	zend_declare_property_long		53985	2					
ANR	54022	ParameterList	"zend_class_entry * ce , const char * name , size_t name_length , zend_long value , int access_type"		53985	3					
ANR	54023	Parameter	zend_class_entry * ce	3702:40:111208:111227	53985	0	True				
ANR	54024	ParameterType	zend_class_entry *		53985	0					
ANR	54025	Identifier	ce		53985	1					
ANR	54026	Parameter	const char * name	3702:62:111230:111245	53985	1	True				
ANR	54027	ParameterType	const char *		53985	0					
ANR	54028	Identifier	name		53985	1					
ANR	54029	Parameter	size_t name_length	3702:80:111248:111265	53985	2	True				
ANR	54030	ParameterType	size_t		53985	0					
ANR	54031	Identifier	name_length		53985	1					
ANR	54032	Parameter	zend_long value	3702:100:111268:111282	53985	3	True				
ANR	54033	ParameterType	zend_long		53985	0					
ANR	54034	Identifier	value		53985	1					
ANR	54035	Parameter	int access_type	3702:117:111285:111299	53985	4	True				
ANR	54036	ParameterType	int		53985	0					
ANR	54037	Identifier	access_type		53985	1					
ANR	54038	CFGEntryNode	ENTRY		53985		True				
ANR	54039	CFGExitNode	EXIT		53985		True				
ANR	54040	Symbol	ce		53985						
ANR	54041	Symbol	access_type		53985						
ANR	54042	Symbol	name		53985						
ANR	54043	Symbol	property		53985						
ANR	54044	Symbol	name_length		53985						
ANR	54045	Symbol	value		53985						
ANR	54046	Symbol	& property		53985						
ANR	54047	Symbol	zend_declare_property		53985						
ANR	54048	Function	zend_declare_property_double	3711:0:111452:111724							
ANR	54049	FunctionDef	"zend_declare_property_double (zend_class_entry * ce , const char * name , size_t name_length , double value , int access_type)"		54048	0					
ANR	54050	CompoundStatement		3712:0:111595:111724	54048	0					
ANR	54051	IdentifierDeclStatement	zval property ;	3713:1:111598:111611	54048	0	True				
ANR	54052	IdentifierDecl	property		54048	0					
ANR	54053	IdentifierDeclType	zval		54048	0					
ANR	54054	Identifier	property		54048	1					
ANR	54055	ExpressionStatement	"ZVAL_DOUBLE ( & property , value )"	3715:1:111615:111644	54048	1	True				
ANR	54056	CallExpression	"ZVAL_DOUBLE ( & property , value )"		54048	0					
ANR	54057	Callee	ZVAL_DOUBLE		54048	0					
ANR	54058	Identifier	ZVAL_DOUBLE		54048	0					
ANR	54059	ArgumentList	& property		54048	1					
ANR	54060	Argument	& property		54048	0					
ANR	54061	UnaryOperationExpression	& property		54048	0					
ANR	54062	UnaryOperator	&		54048	0					
ANR	54063	Identifier	property		54048	1					
ANR	54064	Argument	value		54048	1					
ANR	54065	Identifier	value		54048	0					
ANR	54066	ReturnStatement	"return zend_declare_property ( ce , name , name_length , & property , access_type ) ;"	3716:1:111647:111722	54048	2	True				
ANR	54067	CallExpression	"zend_declare_property ( ce , name , name_length , & property , access_type )"		54048	0					
ANR	54068	Callee	zend_declare_property		54048	0					
ANR	54069	Identifier	zend_declare_property		54048	0					
ANR	54070	ArgumentList	ce		54048	1					
ANR	54071	Argument	ce		54048	0					
ANR	54072	Identifier	ce		54048	0					
ANR	54073	Argument	name		54048	1					
ANR	54074	Identifier	name		54048	0					
ANR	54075	Argument	name_length		54048	2					
ANR	54076	Identifier	name_length		54048	0					
ANR	54077	Argument	& property		54048	3					
ANR	54078	UnaryOperationExpression	& property		54048	0					
ANR	54079	UnaryOperator	&		54048	0					
ANR	54080	Identifier	property		54048	1					
ANR	54081	Argument	access_type		54048	4					
ANR	54082	Identifier	access_type		54048	0					
ANR	54083	ReturnType	ZEND_API int		54048	1					
ANR	54084	Identifier	zend_declare_property_double		54048	2					
ANR	54085	ParameterList	"zend_class_entry * ce , const char * name , size_t name_length , double value , int access_type"		54048	3					
ANR	54086	Parameter	zend_class_entry * ce	3711:42:111494:111513	54048	0	True				
ANR	54087	ParameterType	zend_class_entry *		54048	0					
ANR	54088	Identifier	ce		54048	1					
ANR	54089	Parameter	const char * name	3711:64:111516:111531	54048	1	True				
ANR	54090	ParameterType	const char *		54048	0					
ANR	54091	Identifier	name		54048	1					
ANR	54092	Parameter	size_t name_length	3711:82:111534:111551	54048	2	True				
ANR	54093	ParameterType	size_t		54048	0					
ANR	54094	Identifier	name_length		54048	1					
ANR	54095	Parameter	double value	3711:102:111554:111565	54048	3	True				
ANR	54096	ParameterType	double		54048	0					
ANR	54097	Identifier	value		54048	1					
ANR	54098	Parameter	int access_type	3711:116:111568:111582	54048	4	True				
ANR	54099	ParameterType	int		54048	0					
ANR	54100	Identifier	access_type		54048	1					
ANR	54101	CFGEntryNode	ENTRY		54048		True				
ANR	54102	CFGExitNode	EXIT		54048		True				
ANR	54103	Symbol	ce		54048						
ANR	54104	Symbol	access_type		54048						
ANR	54105	Symbol	name		54048						
ANR	54106	Symbol	property		54048						
ANR	54107	Symbol	name_length		54048						
ANR	54108	Symbol	value		54048						
ANR	54109	Symbol	& property		54048						
ANR	54110	Symbol	zend_declare_property		54048						
ANR	54111	Function	zend_declare_property_string	3720:0:111737:112080							
ANR	54112	FunctionDef	"zend_declare_property_string (zend_class_entry * ce , const char * name , size_t name_length , const char * value , int access_type)"		54111	0					
ANR	54113	CompoundStatement		3721:0:111885:112080	54111	0					
ANR	54114	IdentifierDeclStatement	zval property ;	3722:1:111888:111901	54111	0	True				
ANR	54115	IdentifierDecl	property		54111	0					
ANR	54116	IdentifierDeclType	zval		54111	0					
ANR	54117	Identifier	property		54111	1					
ANR	54118	ExpressionStatement	"ZVAL_NEW_STR ( & property , zend_string_init ( value , strlen ( value ) , ce -> type & ZEND_INTERNAL_CLASS ) )"	3724:1:111905:112000	54111	1	True				
ANR	54119	CallExpression	"ZVAL_NEW_STR ( & property , zend_string_init ( value , strlen ( value ) , ce -> type & ZEND_INTERNAL_CLASS ) )"		54111	0					
ANR	54120	Callee	ZVAL_NEW_STR		54111	0					
ANR	54121	Identifier	ZVAL_NEW_STR		54111	0					
ANR	54122	ArgumentList	& property		54111	1					
ANR	54123	Argument	& property		54111	0					
ANR	54124	UnaryOperationExpression	& property		54111	0					
ANR	54125	UnaryOperator	&		54111	0					
ANR	54126	Identifier	property		54111	1					
ANR	54127	Argument	"zend_string_init ( value , strlen ( value ) , ce -> type & ZEND_INTERNAL_CLASS )"		54111	1					
ANR	54128	CallExpression	"zend_string_init ( value , strlen ( value ) , ce -> type & ZEND_INTERNAL_CLASS )"		54111	0					
ANR	54129	Callee	zend_string_init		54111	0					
ANR	54130	Identifier	zend_string_init		54111	0					
ANR	54131	ArgumentList	value		54111	1					
ANR	54132	Argument	value		54111	0					
ANR	54133	Identifier	value		54111	0					
ANR	54134	Argument	strlen ( value )		54111	1					
ANR	54135	CallExpression	strlen ( value )		54111	0					
ANR	54136	Callee	strlen		54111	0					
ANR	54137	Identifier	strlen		54111	0					
ANR	54138	ArgumentList	value		54111	1					
ANR	54139	Argument	value		54111	0					
ANR	54140	Identifier	value		54111	0					
ANR	54141	Argument	ce -> type & ZEND_INTERNAL_CLASS		54111	2					
ANR	54142	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		54111	0		&			
ANR	54143	PtrMemberAccess	ce -> type		54111	0					
ANR	54144	Identifier	ce		54111	0					
ANR	54145	Identifier	type		54111	1					
ANR	54146	Identifier	ZEND_INTERNAL_CLASS		54111	1					
ANR	54147	ReturnStatement	"return zend_declare_property ( ce , name , name_length , & property , access_type ) ;"	3725:1:112003:112078	54111	2	True				
ANR	54148	CallExpression	"zend_declare_property ( ce , name , name_length , & property , access_type )"		54111	0					
ANR	54149	Callee	zend_declare_property		54111	0					
ANR	54150	Identifier	zend_declare_property		54111	0					
ANR	54151	ArgumentList	ce		54111	1					
ANR	54152	Argument	ce		54111	0					
ANR	54153	Identifier	ce		54111	0					
ANR	54154	Argument	name		54111	1					
ANR	54155	Identifier	name		54111	0					
ANR	54156	Argument	name_length		54111	2					
ANR	54157	Identifier	name_length		54111	0					
ANR	54158	Argument	& property		54111	3					
ANR	54159	UnaryOperationExpression	& property		54111	0					
ANR	54160	UnaryOperator	&		54111	0					
ANR	54161	Identifier	property		54111	1					
ANR	54162	Argument	access_type		54111	4					
ANR	54163	Identifier	access_type		54111	0					
ANR	54164	ReturnType	ZEND_API int		54111	1					
ANR	54165	Identifier	zend_declare_property_string		54111	2					
ANR	54166	ParameterList	"zend_class_entry * ce , const char * name , size_t name_length , const char * value , int access_type"		54111	3					
ANR	54167	Parameter	zend_class_entry * ce	3720:42:111779:111798	54111	0	True				
ANR	54168	ParameterType	zend_class_entry *		54111	0					
ANR	54169	Identifier	ce		54111	1					
ANR	54170	Parameter	const char * name	3720:64:111801:111816	54111	1	True				
ANR	54171	ParameterType	const char *		54111	0					
ANR	54172	Identifier	name		54111	1					
ANR	54173	Parameter	size_t name_length	3720:82:111819:111836	54111	2	True				
ANR	54174	ParameterType	size_t		54111	0					
ANR	54175	Identifier	name_length		54111	1					
ANR	54176	Parameter	const char * value	3720:102:111839:111855	54111	3	True				
ANR	54177	ParameterType	const char *		54111	0					
ANR	54178	Identifier	value		54111	1					
ANR	54179	Parameter	int access_type	3720:121:111858:111872	54111	4	True				
ANR	54180	ParameterType	int		54111	0					
ANR	54181	Identifier	access_type		54111	1					
ANR	54182	CFGEntryNode	ENTRY		54111		True				
ANR	54183	CFGExitNode	EXIT		54111		True				
ANR	54184	Symbol	ZEND_INTERNAL_CLASS		54111						
ANR	54185	Symbol	ce -> type		54111						
ANR	54186	Symbol	ce		54111						
ANR	54187	Symbol	access_type		54111						
ANR	54188	Symbol	name_length		54111						
ANR	54189	Symbol	* ce		54111						
ANR	54190	Symbol	& property		54111						
ANR	54191	Symbol	zend_declare_property		54111						
ANR	54192	Symbol	strlen		54111						
ANR	54193	Symbol	zend_string_init		54111						
ANR	54194	Symbol	name		54111						
ANR	54195	Symbol	property		54111						
ANR	54196	Symbol	value		54111						
ANR	54197	Function	zend_declare_property_stringl	3729:0:112093:112451							
ANR	54198	FunctionDef	"zend_declare_property_stringl (zend_class_entry * ce , const char * name , size_t name_length , const char * value , size_t value_len , int access_type)"		54197	0					
ANR	54199	CompoundStatement		3730:0:112260:112451	54197	0					
ANR	54200	IdentifierDeclStatement	zval property ;	3731:1:112263:112276	54197	0	True				
ANR	54201	IdentifierDecl	property		54197	0					
ANR	54202	IdentifierDeclType	zval		54197	0					
ANR	54203	Identifier	property		54197	1					
ANR	54204	ExpressionStatement	"ZVAL_NEW_STR ( & property , zend_string_init ( value , value_len , ce -> type & ZEND_INTERNAL_CLASS ) )"	3733:1:112280:112371	54197	1	True				
ANR	54205	CallExpression	"ZVAL_NEW_STR ( & property , zend_string_init ( value , value_len , ce -> type & ZEND_INTERNAL_CLASS ) )"		54197	0					
ANR	54206	Callee	ZVAL_NEW_STR		54197	0					
ANR	54207	Identifier	ZVAL_NEW_STR		54197	0					
ANR	54208	ArgumentList	& property		54197	1					
ANR	54209	Argument	& property		54197	0					
ANR	54210	UnaryOperationExpression	& property		54197	0					
ANR	54211	UnaryOperator	&		54197	0					
ANR	54212	Identifier	property		54197	1					
ANR	54213	Argument	"zend_string_init ( value , value_len , ce -> type & ZEND_INTERNAL_CLASS )"		54197	1					
ANR	54214	CallExpression	"zend_string_init ( value , value_len , ce -> type & ZEND_INTERNAL_CLASS )"		54197	0					
ANR	54215	Callee	zend_string_init		54197	0					
ANR	54216	Identifier	zend_string_init		54197	0					
ANR	54217	ArgumentList	value		54197	1					
ANR	54218	Argument	value		54197	0					
ANR	54219	Identifier	value		54197	0					
ANR	54220	Argument	value_len		54197	1					
ANR	54221	Identifier	value_len		54197	0					
ANR	54222	Argument	ce -> type & ZEND_INTERNAL_CLASS		54197	2					
ANR	54223	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		54197	0		&			
ANR	54224	PtrMemberAccess	ce -> type		54197	0					
ANR	54225	Identifier	ce		54197	0					
ANR	54226	Identifier	type		54197	1					
ANR	54227	Identifier	ZEND_INTERNAL_CLASS		54197	1					
ANR	54228	ReturnStatement	"return zend_declare_property ( ce , name , name_length , & property , access_type ) ;"	3734:1:112374:112449	54197	2	True				
ANR	54229	CallExpression	"zend_declare_property ( ce , name , name_length , & property , access_type )"		54197	0					
ANR	54230	Callee	zend_declare_property		54197	0					
ANR	54231	Identifier	zend_declare_property		54197	0					
ANR	54232	ArgumentList	ce		54197	1					
ANR	54233	Argument	ce		54197	0					
ANR	54234	Identifier	ce		54197	0					
ANR	54235	Argument	name		54197	1					
ANR	54236	Identifier	name		54197	0					
ANR	54237	Argument	name_length		54197	2					
ANR	54238	Identifier	name_length		54197	0					
ANR	54239	Argument	& property		54197	3					
ANR	54240	UnaryOperationExpression	& property		54197	0					
ANR	54241	UnaryOperator	&		54197	0					
ANR	54242	Identifier	property		54197	1					
ANR	54243	Argument	access_type		54197	4					
ANR	54244	Identifier	access_type		54197	0					
ANR	54245	ReturnType	ZEND_API int		54197	1					
ANR	54246	Identifier	zend_declare_property_stringl		54197	2					
ANR	54247	ParameterList	"zend_class_entry * ce , const char * name , size_t name_length , const char * value , size_t value_len , int access_type"		54197	3					
ANR	54248	Parameter	zend_class_entry * ce	3729:43:112136:112155	54197	0	True				
ANR	54249	ParameterType	zend_class_entry *		54197	0					
ANR	54250	Identifier	ce		54197	1					
ANR	54251	Parameter	const char * name	3729:65:112158:112173	54197	1	True				
ANR	54252	ParameterType	const char *		54197	0					
ANR	54253	Identifier	name		54197	1					
ANR	54254	Parameter	size_t name_length	3729:83:112176:112193	54197	2	True				
ANR	54255	ParameterType	size_t		54197	0					
ANR	54256	Identifier	name_length		54197	1					
ANR	54257	Parameter	const char * value	3729:103:112196:112212	54197	3	True				
ANR	54258	ParameterType	const char *		54197	0					
ANR	54259	Identifier	value		54197	1					
ANR	54260	Parameter	size_t value_len	3729:122:112215:112230	54197	4	True				
ANR	54261	ParameterType	size_t		54197	0					
ANR	54262	Identifier	value_len		54197	1					
ANR	54263	Parameter	int access_type	3729:140:112233:112247	54197	5	True				
ANR	54264	ParameterType	int		54197	0					
ANR	54265	Identifier	access_type		54197	1					
ANR	54266	CFGEntryNode	ENTRY		54197		True				
ANR	54267	CFGExitNode	EXIT		54197		True				
ANR	54268	Symbol	ZEND_INTERNAL_CLASS		54197						
ANR	54269	Symbol	ce -> type		54197						
ANR	54270	Symbol	ce		54197						
ANR	54271	Symbol	access_type		54197						
ANR	54272	Symbol	value_len		54197						
ANR	54273	Symbol	name_length		54197						
ANR	54274	Symbol	* ce		54197						
ANR	54275	Symbol	& property		54197						
ANR	54276	Symbol	zend_declare_property		54197						
ANR	54277	Symbol	zend_string_init		54197						
ANR	54278	Symbol	name		54197						
ANR	54279	Symbol	property		54197						
ANR	54280	Symbol	value		54197						
ANR	54281	Function	zend_declare_class_constant	3738:0:112464:112768							
ANR	54282	FunctionDef	"zend_declare_class_constant (zend_class_entry * ce , const char * name , size_t name_length , zval * value)"		54281	0					
ANR	54283	CompoundStatement		3739:0:112588:112768	54281	0					
ANR	54284	IfStatement	if ( Z_CONSTANT_P ( value ) )		54281	0					
ANR	54285	Condition	Z_CONSTANT_P ( value )	3740:5:112595:112613	54281	0	True				
ANR	54286	CallExpression	Z_CONSTANT_P ( value )		54281	0					
ANR	54287	Callee	Z_CONSTANT_P		54281	0					
ANR	54288	Identifier	Z_CONSTANT_P		54281	0					
ANR	54289	ArgumentList	value		54281	1					
ANR	54290	Argument	value		54281	0					
ANR	54291	Identifier	value		54281	0					
ANR	54292	CompoundStatement		2:26:27:27	54281	1					
ANR	54293	ExpressionStatement	ce -> ce_flags &= ~ZEND_ACC_CONSTANTS_UPDATED	3741:2:112620:112663	54281	0	True				
ANR	54294	AssignmentExpression	ce -> ce_flags &= ~ZEND_ACC_CONSTANTS_UPDATED		54281	0		&=			
ANR	54295	PtrMemberAccess	ce -> ce_flags		54281	0					
ANR	54296	Identifier	ce		54281	0					
ANR	54297	Identifier	ce_flags		54281	1					
ANR	54298	Identifier	~ZEND_ACC_CONSTANTS_UPDATED		54281	1					
ANR	54299	ReturnStatement	"return zend_hash_str_update ( & ce -> constants_table , name , name_length , value ) ? SUCCESS : FAILURE ;"	3743:1:112669:112766	54281	1	True				
ANR	54300	ConditionalExpression	"zend_hash_str_update ( & ce -> constants_table , name , name_length , value ) ? SUCCESS : FAILURE"		54281	0					
ANR	54301	Condition	"zend_hash_str_update ( & ce -> constants_table , name , name_length , value )"		54281	0					
ANR	54302	CallExpression	"zend_hash_str_update ( & ce -> constants_table , name , name_length , value )"		54281	0					
ANR	54303	Callee	zend_hash_str_update		54281	0					
ANR	54304	Identifier	zend_hash_str_update		54281	0					
ANR	54305	ArgumentList	& ce -> constants_table		54281	1					
ANR	54306	Argument	& ce -> constants_table		54281	0					
ANR	54307	UnaryOperationExpression	& ce -> constants_table		54281	0					
ANR	54308	UnaryOperator	&		54281	0					
ANR	54309	PtrMemberAccess	ce -> constants_table		54281	1					
ANR	54310	Identifier	ce		54281	0					
ANR	54311	Identifier	constants_table		54281	1					
ANR	54312	Argument	name		54281	1					
ANR	54313	Identifier	name		54281	0					
ANR	54314	Argument	name_length		54281	2					
ANR	54315	Identifier	name_length		54281	0					
ANR	54316	Argument	value		54281	3					
ANR	54317	Identifier	value		54281	0					
ANR	54318	Identifier	SUCCESS		54281	1					
ANR	54319	Identifier	FAILURE		54281	2					
ANR	54320	ReturnType	ZEND_API int		54281	1					
ANR	54321	Identifier	zend_declare_class_constant		54281	2					
ANR	54322	ParameterList	"zend_class_entry * ce , const char * name , size_t name_length , zval * value"		54281	3					
ANR	54323	Parameter	zend_class_entry * ce	3738:41:112505:112524	54281	0	True				
ANR	54324	ParameterType	zend_class_entry *		54281	0					
ANR	54325	Identifier	ce		54281	1					
ANR	54326	Parameter	const char * name	3738:63:112527:112542	54281	1	True				
ANR	54327	ParameterType	const char *		54281	0					
ANR	54328	Identifier	name		54281	1					
ANR	54329	Parameter	size_t name_length	3738:81:112545:112562	54281	2	True				
ANR	54330	ParameterType	size_t		54281	0					
ANR	54331	Identifier	name_length		54281	1					
ANR	54332	Parameter	zval * value	3738:101:112565:112575	54281	3	True				
ANR	54333	ParameterType	zval *		54281	0					
ANR	54334	Identifier	value		54281	1					
ANR	54335	CFGEntryNode	ENTRY		54281		True				
ANR	54336	CFGExitNode	EXIT		54281		True				
ANR	54337	Symbol	ce -> ce_flags		54281						
ANR	54338	Symbol	ce		54281						
ANR	54339	Symbol	& ce -> constants_table		54281						
ANR	54340	Symbol	Z_CONSTANT_P		54281						
ANR	54341	Symbol	SUCCESS		54281						
ANR	54342	Symbol	zend_hash_str_update		54281						
ANR	54343	Symbol	name		54281						
ANR	54344	Symbol	name_length		54281						
ANR	54345	Symbol	* ce		54281						
ANR	54346	Symbol	value		54281						
ANR	54347	Symbol	FAILURE		54281						
ANR	54348	Symbol	~ZEND_ACC_CONSTANTS_UPDATED		54281						
ANR	54349	Function	zend_declare_class_constant_null	3748:0:112781:113010							
ANR	54350	FunctionDef	"zend_declare_class_constant_null (zend_class_entry * ce , const char * name , size_t name_length)"		54349	0					
ANR	54351	CompoundStatement		3749:0:112897:113010	54349	0					
ANR	54352	IdentifierDeclStatement	zval constant ;	3750:1:112900:112913	54349	0	True				
ANR	54353	IdentifierDecl	constant		54349	0					
ANR	54354	IdentifierDeclType	zval		54349	0					
ANR	54355	Identifier	constant		54349	1					
ANR	54356	ExpressionStatement	ZVAL_NULL ( & constant )	3752:1:112917:112937	54349	1	True				
ANR	54357	CallExpression	ZVAL_NULL ( & constant )		54349	0					
ANR	54358	Callee	ZVAL_NULL		54349	0					
ANR	54359	Identifier	ZVAL_NULL		54349	0					
ANR	54360	ArgumentList	& constant		54349	1					
ANR	54361	Argument	& constant		54349	0					
ANR	54362	UnaryOperationExpression	& constant		54349	0					
ANR	54363	UnaryOperator	&		54349	0					
ANR	54364	Identifier	constant		54349	1					
ANR	54365	ReturnStatement	"return zend_declare_class_constant ( ce , name , name_length , & constant ) ;"	3753:1:112940:113008	54349	2	True				
ANR	54366	CallExpression	"zend_declare_class_constant ( ce , name , name_length , & constant )"		54349	0					
ANR	54367	Callee	zend_declare_class_constant		54349	0					
ANR	54368	Identifier	zend_declare_class_constant		54349	0					
ANR	54369	ArgumentList	ce		54349	1					
ANR	54370	Argument	ce		54349	0					
ANR	54371	Identifier	ce		54349	0					
ANR	54372	Argument	name		54349	1					
ANR	54373	Identifier	name		54349	0					
ANR	54374	Argument	name_length		54349	2					
ANR	54375	Identifier	name_length		54349	0					
ANR	54376	Argument	& constant		54349	3					
ANR	54377	UnaryOperationExpression	& constant		54349	0					
ANR	54378	UnaryOperator	&		54349	0					
ANR	54379	Identifier	constant		54349	1					
ANR	54380	ReturnType	ZEND_API int		54349	1					
ANR	54381	Identifier	zend_declare_class_constant_null		54349	2					
ANR	54382	ParameterList	"zend_class_entry * ce , const char * name , size_t name_length"		54349	3					
ANR	54383	Parameter	zend_class_entry * ce	3748:46:112827:112846	54349	0	True				
ANR	54384	ParameterType	zend_class_entry *		54349	0					
ANR	54385	Identifier	ce		54349	1					
ANR	54386	Parameter	const char * name	3748:68:112849:112864	54349	1	True				
ANR	54387	ParameterType	const char *		54349	0					
ANR	54388	Identifier	name		54349	1					
ANR	54389	Parameter	size_t name_length	3748:86:112867:112884	54349	2	True				
ANR	54390	ParameterType	size_t		54349	0					
ANR	54391	Identifier	name_length		54349	1					
ANR	54392	CFGEntryNode	ENTRY		54349		True				
ANR	54393	CFGExitNode	EXIT		54349		True				
ANR	54394	Symbol	ce		54349						
ANR	54395	Symbol	& constant		54349						
ANR	54396	Symbol	constant		54349						
ANR	54397	Symbol	zend_declare_class_constant		54349						
ANR	54398	Symbol	name		54349						
ANR	54399	Symbol	name_length		54349						
ANR	54400	Function	zend_declare_class_constant_long	3757:0:113023:113276							
ANR	54401	FunctionDef	"zend_declare_class_constant_long (zend_class_entry * ce , const char * name , size_t name_length , zend_long value)"		54400	0					
ANR	54402	CompoundStatement		3758:0:113156:113276	54400	0					
ANR	54403	IdentifierDeclStatement	zval constant ;	3759:1:113159:113172	54400	0	True				
ANR	54404	IdentifierDecl	constant		54400	0					
ANR	54405	IdentifierDeclType	zval		54400	0					
ANR	54406	Identifier	constant		54400	1					
ANR	54407	ExpressionStatement	"ZVAL_LONG ( & constant , value )"	3761:1:113176:113203	54400	1	True				
ANR	54408	CallExpression	"ZVAL_LONG ( & constant , value )"		54400	0					
ANR	54409	Callee	ZVAL_LONG		54400	0					
ANR	54410	Identifier	ZVAL_LONG		54400	0					
ANR	54411	ArgumentList	& constant		54400	1					
ANR	54412	Argument	& constant		54400	0					
ANR	54413	UnaryOperationExpression	& constant		54400	0					
ANR	54414	UnaryOperator	&		54400	0					
ANR	54415	Identifier	constant		54400	1					
ANR	54416	Argument	value		54400	1					
ANR	54417	Identifier	value		54400	0					
ANR	54418	ReturnStatement	"return zend_declare_class_constant ( ce , name , name_length , & constant ) ;"	3762:1:113206:113274	54400	2	True				
ANR	54419	CallExpression	"zend_declare_class_constant ( ce , name , name_length , & constant )"		54400	0					
ANR	54420	Callee	zend_declare_class_constant		54400	0					
ANR	54421	Identifier	zend_declare_class_constant		54400	0					
ANR	54422	ArgumentList	ce		54400	1					
ANR	54423	Argument	ce		54400	0					
ANR	54424	Identifier	ce		54400	0					
ANR	54425	Argument	name		54400	1					
ANR	54426	Identifier	name		54400	0					
ANR	54427	Argument	name_length		54400	2					
ANR	54428	Identifier	name_length		54400	0					
ANR	54429	Argument	& constant		54400	3					
ANR	54430	UnaryOperationExpression	& constant		54400	0					
ANR	54431	UnaryOperator	&		54400	0					
ANR	54432	Identifier	constant		54400	1					
ANR	54433	ReturnType	ZEND_API int		54400	1					
ANR	54434	Identifier	zend_declare_class_constant_long		54400	2					
ANR	54435	ParameterList	"zend_class_entry * ce , const char * name , size_t name_length , zend_long value"		54400	3					
ANR	54436	Parameter	zend_class_entry * ce	3757:46:113069:113088	54400	0	True				
ANR	54437	ParameterType	zend_class_entry *		54400	0					
ANR	54438	Identifier	ce		54400	1					
ANR	54439	Parameter	const char * name	3757:68:113091:113106	54400	1	True				
ANR	54440	ParameterType	const char *		54400	0					
ANR	54441	Identifier	name		54400	1					
ANR	54442	Parameter	size_t name_length	3757:86:113109:113126	54400	2	True				
ANR	54443	ParameterType	size_t		54400	0					
ANR	54444	Identifier	name_length		54400	1					
ANR	54445	Parameter	zend_long value	3757:106:113129:113143	54400	3	True				
ANR	54446	ParameterType	zend_long		54400	0					
ANR	54447	Identifier	value		54400	1					
ANR	54448	CFGEntryNode	ENTRY		54400		True				
ANR	54449	CFGExitNode	EXIT		54400		True				
ANR	54450	Symbol	ce		54400						
ANR	54451	Symbol	& constant		54400						
ANR	54452	Symbol	constant		54400						
ANR	54453	Symbol	zend_declare_class_constant		54400						
ANR	54454	Symbol	name		54400						
ANR	54455	Symbol	name_length		54400						
ANR	54456	Symbol	value		54400						
ANR	54457	Function	zend_declare_class_constant_bool	3766:0:113289:113542							
ANR	54458	FunctionDef	"zend_declare_class_constant_bool (zend_class_entry * ce , const char * name , size_t name_length , zend_bool value)"		54457	0					
ANR	54459	CompoundStatement		3767:0:113422:113542	54457	0					
ANR	54460	IdentifierDeclStatement	zval constant ;	3768:1:113425:113438	54457	0	True				
ANR	54461	IdentifierDecl	constant		54457	0					
ANR	54462	IdentifierDeclType	zval		54457	0					
ANR	54463	Identifier	constant		54457	1					
ANR	54464	ExpressionStatement	"ZVAL_BOOL ( & constant , value )"	3770:1:113442:113469	54457	1	True				
ANR	54465	CallExpression	"ZVAL_BOOL ( & constant , value )"		54457	0					
ANR	54466	Callee	ZVAL_BOOL		54457	0					
ANR	54467	Identifier	ZVAL_BOOL		54457	0					
ANR	54468	ArgumentList	& constant		54457	1					
ANR	54469	Argument	& constant		54457	0					
ANR	54470	UnaryOperationExpression	& constant		54457	0					
ANR	54471	UnaryOperator	&		54457	0					
ANR	54472	Identifier	constant		54457	1					
ANR	54473	Argument	value		54457	1					
ANR	54474	Identifier	value		54457	0					
ANR	54475	ReturnStatement	"return zend_declare_class_constant ( ce , name , name_length , & constant ) ;"	3771:1:113472:113540	54457	2	True				
ANR	54476	CallExpression	"zend_declare_class_constant ( ce , name , name_length , & constant )"		54457	0					
ANR	54477	Callee	zend_declare_class_constant		54457	0					
ANR	54478	Identifier	zend_declare_class_constant		54457	0					
ANR	54479	ArgumentList	ce		54457	1					
ANR	54480	Argument	ce		54457	0					
ANR	54481	Identifier	ce		54457	0					
ANR	54482	Argument	name		54457	1					
ANR	54483	Identifier	name		54457	0					
ANR	54484	Argument	name_length		54457	2					
ANR	54485	Identifier	name_length		54457	0					
ANR	54486	Argument	& constant		54457	3					
ANR	54487	UnaryOperationExpression	& constant		54457	0					
ANR	54488	UnaryOperator	&		54457	0					
ANR	54489	Identifier	constant		54457	1					
ANR	54490	ReturnType	ZEND_API int		54457	1					
ANR	54491	Identifier	zend_declare_class_constant_bool		54457	2					
ANR	54492	ParameterList	"zend_class_entry * ce , const char * name , size_t name_length , zend_bool value"		54457	3					
ANR	54493	Parameter	zend_class_entry * ce	3766:46:113335:113354	54457	0	True				
ANR	54494	ParameterType	zend_class_entry *		54457	0					
ANR	54495	Identifier	ce		54457	1					
ANR	54496	Parameter	const char * name	3766:68:113357:113372	54457	1	True				
ANR	54497	ParameterType	const char *		54457	0					
ANR	54498	Identifier	name		54457	1					
ANR	54499	Parameter	size_t name_length	3766:86:113375:113392	54457	2	True				
ANR	54500	ParameterType	size_t		54457	0					
ANR	54501	Identifier	name_length		54457	1					
ANR	54502	Parameter	zend_bool value	3766:106:113395:113409	54457	3	True				
ANR	54503	ParameterType	zend_bool		54457	0					
ANR	54504	Identifier	value		54457	1					
ANR	54505	CFGEntryNode	ENTRY		54457		True				
ANR	54506	CFGExitNode	EXIT		54457		True				
ANR	54507	Symbol	ce		54457						
ANR	54508	Symbol	& constant		54457						
ANR	54509	Symbol	constant		54457						
ANR	54510	Symbol	zend_declare_class_constant		54457						
ANR	54511	Symbol	name		54457						
ANR	54512	Symbol	name_length		54457						
ANR	54513	Symbol	value		54457						
ANR	54514	Function	zend_declare_class_constant_double	3775:0:113555:113809							
ANR	54515	FunctionDef	"zend_declare_class_constant_double (zend_class_entry * ce , const char * name , size_t name_length , double value)"		54514	0					
ANR	54516	CompoundStatement		3776:0:113687:113809	54514	0					
ANR	54517	IdentifierDeclStatement	zval constant ;	3777:1:113690:113703	54514	0	True				
ANR	54518	IdentifierDecl	constant		54514	0					
ANR	54519	IdentifierDeclType	zval		54514	0					
ANR	54520	Identifier	constant		54514	1					
ANR	54521	ExpressionStatement	"ZVAL_DOUBLE ( & constant , value )"	3779:1:113707:113736	54514	1	True				
ANR	54522	CallExpression	"ZVAL_DOUBLE ( & constant , value )"		54514	0					
ANR	54523	Callee	ZVAL_DOUBLE		54514	0					
ANR	54524	Identifier	ZVAL_DOUBLE		54514	0					
ANR	54525	ArgumentList	& constant		54514	1					
ANR	54526	Argument	& constant		54514	0					
ANR	54527	UnaryOperationExpression	& constant		54514	0					
ANR	54528	UnaryOperator	&		54514	0					
ANR	54529	Identifier	constant		54514	1					
ANR	54530	Argument	value		54514	1					
ANR	54531	Identifier	value		54514	0					
ANR	54532	ReturnStatement	"return zend_declare_class_constant ( ce , name , name_length , & constant ) ;"	3780:1:113739:113807	54514	2	True				
ANR	54533	CallExpression	"zend_declare_class_constant ( ce , name , name_length , & constant )"		54514	0					
ANR	54534	Callee	zend_declare_class_constant		54514	0					
ANR	54535	Identifier	zend_declare_class_constant		54514	0					
ANR	54536	ArgumentList	ce		54514	1					
ANR	54537	Argument	ce		54514	0					
ANR	54538	Identifier	ce		54514	0					
ANR	54539	Argument	name		54514	1					
ANR	54540	Identifier	name		54514	0					
ANR	54541	Argument	name_length		54514	2					
ANR	54542	Identifier	name_length		54514	0					
ANR	54543	Argument	& constant		54514	3					
ANR	54544	UnaryOperationExpression	& constant		54514	0					
ANR	54545	UnaryOperator	&		54514	0					
ANR	54546	Identifier	constant		54514	1					
ANR	54547	ReturnType	ZEND_API int		54514	1					
ANR	54548	Identifier	zend_declare_class_constant_double		54514	2					
ANR	54549	ParameterList	"zend_class_entry * ce , const char * name , size_t name_length , double value"		54514	3					
ANR	54550	Parameter	zend_class_entry * ce	3775:48:113603:113622	54514	0	True				
ANR	54551	ParameterType	zend_class_entry *		54514	0					
ANR	54552	Identifier	ce		54514	1					
ANR	54553	Parameter	const char * name	3775:70:113625:113640	54514	1	True				
ANR	54554	ParameterType	const char *		54514	0					
ANR	54555	Identifier	name		54514	1					
ANR	54556	Parameter	size_t name_length	3775:88:113643:113660	54514	2	True				
ANR	54557	ParameterType	size_t		54514	0					
ANR	54558	Identifier	name_length		54514	1					
ANR	54559	Parameter	double value	3775:108:113663:113674	54514	3	True				
ANR	54560	ParameterType	double		54514	0					
ANR	54561	Identifier	value		54514	1					
ANR	54562	CFGEntryNode	ENTRY		54514		True				
ANR	54563	CFGExitNode	EXIT		54514		True				
ANR	54564	Symbol	ce		54514						
ANR	54565	Symbol	& constant		54514						
ANR	54566	Symbol	constant		54514						
ANR	54567	Symbol	zend_declare_class_constant		54514						
ANR	54568	Symbol	name		54514						
ANR	54569	Symbol	name_length		54514						
ANR	54570	Symbol	value		54514						
ANR	54571	Function	zend_declare_class_constant_stringl	3784:0:113822:114168							
ANR	54572	FunctionDef	"zend_declare_class_constant_stringl (zend_class_entry * ce , const char * name , size_t name_length , const char * value , size_t value_length)"		54571	0					
ANR	54573	CompoundStatement		3785:0:113981:114168	54571	0					
ANR	54574	IdentifierDeclStatement	zval constant ;	3786:1:113984:113997	54571	0	True				
ANR	54575	IdentifierDecl	constant		54571	0					
ANR	54576	IdentifierDeclType	zval		54571	0					
ANR	54577	Identifier	constant		54571	1					
ANR	54578	ExpressionStatement	"ZVAL_NEW_STR ( & constant , zend_string_init ( value , value_length , ce -> type & ZEND_INTERNAL_CLASS ) )"	3788:1:114001:114095	54571	1	True				
ANR	54579	CallExpression	"ZVAL_NEW_STR ( & constant , zend_string_init ( value , value_length , ce -> type & ZEND_INTERNAL_CLASS ) )"		54571	0					
ANR	54580	Callee	ZVAL_NEW_STR		54571	0					
ANR	54581	Identifier	ZVAL_NEW_STR		54571	0					
ANR	54582	ArgumentList	& constant		54571	1					
ANR	54583	Argument	& constant		54571	0					
ANR	54584	UnaryOperationExpression	& constant		54571	0					
ANR	54585	UnaryOperator	&		54571	0					
ANR	54586	Identifier	constant		54571	1					
ANR	54587	Argument	"zend_string_init ( value , value_length , ce -> type & ZEND_INTERNAL_CLASS )"		54571	1					
ANR	54588	CallExpression	"zend_string_init ( value , value_length , ce -> type & ZEND_INTERNAL_CLASS )"		54571	0					
ANR	54589	Callee	zend_string_init		54571	0					
ANR	54590	Identifier	zend_string_init		54571	0					
ANR	54591	ArgumentList	value		54571	1					
ANR	54592	Argument	value		54571	0					
ANR	54593	Identifier	value		54571	0					
ANR	54594	Argument	value_length		54571	1					
ANR	54595	Identifier	value_length		54571	0					
ANR	54596	Argument	ce -> type & ZEND_INTERNAL_CLASS		54571	2					
ANR	54597	BitAndExpression	ce -> type & ZEND_INTERNAL_CLASS		54571	0		&			
ANR	54598	PtrMemberAccess	ce -> type		54571	0					
ANR	54599	Identifier	ce		54571	0					
ANR	54600	Identifier	type		54571	1					
ANR	54601	Identifier	ZEND_INTERNAL_CLASS		54571	1					
ANR	54602	ReturnStatement	"return zend_declare_class_constant ( ce , name , name_length , & constant ) ;"	3789:1:114098:114166	54571	2	True				
ANR	54603	CallExpression	"zend_declare_class_constant ( ce , name , name_length , & constant )"		54571	0					
ANR	54604	Callee	zend_declare_class_constant		54571	0					
ANR	54605	Identifier	zend_declare_class_constant		54571	0					
ANR	54606	ArgumentList	ce		54571	1					
ANR	54607	Argument	ce		54571	0					
ANR	54608	Identifier	ce		54571	0					
ANR	54609	Argument	name		54571	1					
ANR	54610	Identifier	name		54571	0					
ANR	54611	Argument	name_length		54571	2					
ANR	54612	Identifier	name_length		54571	0					
ANR	54613	Argument	& constant		54571	3					
ANR	54614	UnaryOperationExpression	& constant		54571	0					
ANR	54615	UnaryOperator	&		54571	0					
ANR	54616	Identifier	constant		54571	1					
ANR	54617	ReturnType	ZEND_API int		54571	1					
ANR	54618	Identifier	zend_declare_class_constant_stringl		54571	2					
ANR	54619	ParameterList	"zend_class_entry * ce , const char * name , size_t name_length , const char * value , size_t value_length"		54571	3					
ANR	54620	Parameter	zend_class_entry * ce	3784:49:113871:113890	54571	0	True				
ANR	54621	ParameterType	zend_class_entry *		54571	0					
ANR	54622	Identifier	ce		54571	1					
ANR	54623	Parameter	const char * name	3784:71:113893:113908	54571	1	True				
ANR	54624	ParameterType	const char *		54571	0					
ANR	54625	Identifier	name		54571	1					
ANR	54626	Parameter	size_t name_length	3784:89:113911:113928	54571	2	True				
ANR	54627	ParameterType	size_t		54571	0					
ANR	54628	Identifier	name_length		54571	1					
ANR	54629	Parameter	const char * value	3784:109:113931:113947	54571	3	True				
ANR	54630	ParameterType	const char *		54571	0					
ANR	54631	Identifier	value		54571	1					
ANR	54632	Parameter	size_t value_length	3784:128:113950:113968	54571	4	True				
ANR	54633	ParameterType	size_t		54571	0					
ANR	54634	Identifier	value_length		54571	1					
ANR	54635	CFGEntryNode	ENTRY		54571		True				
ANR	54636	CFGExitNode	EXIT		54571		True				
ANR	54637	Symbol	ZEND_INTERNAL_CLASS		54571						
ANR	54638	Symbol	ce -> type		54571						
ANR	54639	Symbol	zend_string_init		54571						
ANR	54640	Symbol	ce		54571						
ANR	54641	Symbol	& constant		54571						
ANR	54642	Symbol	constant		54571						
ANR	54643	Symbol	value_length		54571						
ANR	54644	Symbol	zend_declare_class_constant		54571						
ANR	54645	Symbol	name		54571						
ANR	54646	Symbol	name_length		54571						
ANR	54647	Symbol	* ce		54571						
ANR	54648	Symbol	value		54571						
ANR	54649	Function	zend_declare_class_constant_string	3793:0:114181:114410							
ANR	54650	FunctionDef	"zend_declare_class_constant_string (zend_class_entry * ce , const char * name , size_t name_length , const char * value)"		54649	0					
ANR	54651	CompoundStatement		3794:0:114318:114410	54649	0					
ANR	54652	ReturnStatement	"return zend_declare_class_constant_stringl ( ce , name , name_length , value , strlen ( value ) ) ;"	3795:1:114321:114408	54649	0	True				
ANR	54653	CallExpression	"zend_declare_class_constant_stringl ( ce , name , name_length , value , strlen ( value ) )"		54649	0					
ANR	54654	Callee	zend_declare_class_constant_stringl		54649	0					
ANR	54655	Identifier	zend_declare_class_constant_stringl		54649	0					
ANR	54656	ArgumentList	ce		54649	1					
ANR	54657	Argument	ce		54649	0					
ANR	54658	Identifier	ce		54649	0					
ANR	54659	Argument	name		54649	1					
ANR	54660	Identifier	name		54649	0					
ANR	54661	Argument	name_length		54649	2					
ANR	54662	Identifier	name_length		54649	0					
ANR	54663	Argument	value		54649	3					
ANR	54664	Identifier	value		54649	0					
ANR	54665	Argument	strlen ( value )		54649	4					
ANR	54666	CallExpression	strlen ( value )		54649	0					
ANR	54667	Callee	strlen		54649	0					
ANR	54668	Identifier	strlen		54649	0					
ANR	54669	ArgumentList	value		54649	1					
ANR	54670	Argument	value		54649	0					
ANR	54671	Identifier	value		54649	0					
ANR	54672	ReturnType	ZEND_API int		54649	1					
ANR	54673	Identifier	zend_declare_class_constant_string		54649	2					
ANR	54674	ParameterList	"zend_class_entry * ce , const char * name , size_t name_length , const char * value"		54649	3					
ANR	54675	Parameter	zend_class_entry * ce	3793:48:114229:114248	54649	0	True				
ANR	54676	ParameterType	zend_class_entry *		54649	0					
ANR	54677	Identifier	ce		54649	1					
ANR	54678	Parameter	const char * name	3793:70:114251:114266	54649	1	True				
ANR	54679	ParameterType	const char *		54649	0					
ANR	54680	Identifier	name		54649	1					
ANR	54681	Parameter	size_t name_length	3793:88:114269:114286	54649	2	True				
ANR	54682	ParameterType	size_t		54649	0					
ANR	54683	Identifier	name_length		54649	1					
ANR	54684	Parameter	const char * value	3793:108:114289:114305	54649	3	True				
ANR	54685	ParameterType	const char *		54649	0					
ANR	54686	Identifier	value		54649	1					
ANR	54687	CFGEntryNode	ENTRY		54649		True				
ANR	54688	CFGExitNode	EXIT		54649		True				
ANR	54689	Symbol	strlen		54649						
ANR	54690	Symbol	ce		54649						
ANR	54691	Symbol	name		54649						
ANR	54692	Symbol	zend_declare_class_constant_stringl		54649						
ANR	54693	Symbol	name_length		54649						
ANR	54694	Symbol	value		54649						
ANR	54695	Function	zend_update_property_ex	3799:0:114423:114916							
ANR	54696	FunctionDef	"zend_update_property_ex (zend_class_entry * scope , zval * object , zend_string * name , zval * value)"		54695	0					
ANR	54697	CompoundStatement		3800:0:114542:114916	54695	0					
ANR	54698	IdentifierDeclStatement	zval property ;	3801:1:114545:114558	54695	0	True				
ANR	54699	IdentifierDecl	property		54695	0					
ANR	54700	IdentifierDeclType	zval		54695	0					
ANR	54701	Identifier	property		54695	1					
ANR	54702	IdentifierDeclStatement	zend_class_entry * old_scope = EG ( scope ) ;	3802:1:114561:114600	54695	1	True				
ANR	54703	IdentifierDecl	* old_scope = EG ( scope )		54695	0					
ANR	54704	IdentifierDeclType	zend_class_entry *		54695	0					
ANR	54705	Identifier	old_scope		54695	1					
ANR	54706	AssignmentExpression	* old_scope = EG ( scope )		54695	2		=			
ANR	54707	Identifier	old_scope		54695	0					
ANR	54708	CallExpression	EG ( scope )		54695	1					
ANR	54709	Callee	EG		54695	0					
ANR	54710	Identifier	EG		54695	0					
ANR	54711	ArgumentList	scope		54695	1					
ANR	54712	Argument	scope		54695	0					
ANR	54713	Identifier	scope		54695	0					
ANR	54714	ExpressionStatement	EG ( scope ) = scope	3804:1:114604:114621	54695	2	True				
ANR	54715	AssignmentExpression	EG ( scope ) = scope		54695	0		=			
ANR	54716	CallExpression	EG ( scope )		54695	0					
ANR	54717	Callee	EG		54695	0					
ANR	54718	Identifier	EG		54695	0					
ANR	54719	ArgumentList	scope		54695	1					
ANR	54720	Argument	scope		54695	0					
ANR	54721	Identifier	scope		54695	0					
ANR	54722	Identifier	scope		54695	1					
ANR	54723	IfStatement	if ( ! Z_OBJ_HT_P ( object ) -> write_property )		54695	3					
ANR	54724	Condition	! Z_OBJ_HT_P ( object ) -> write_property	3806:5:114629:114663	54695	0	True				
ANR	54725	UnaryOperationExpression	! Z_OBJ_HT_P ( object ) -> write_property		54695	0					
ANR	54726	UnaryOperator	!		54695	0					
ANR	54727	PtrMemberAccess	Z_OBJ_HT_P ( object ) -> write_property		54695	1					
ANR	54728	CallExpression	Z_OBJ_HT_P ( object )		54695	0					
ANR	54729	Callee	Z_OBJ_HT_P		54695	0					
ANR	54730	Identifier	Z_OBJ_HT_P		54695	0					
ANR	54731	ArgumentList	object		54695	1					
ANR	54732	Argument	object		54695	0					
ANR	54733	Identifier	object		54695	0					
ANR	54734	Identifier	write_property		54695	1					
ANR	54735	CompoundStatement		7:42:123:123	54695	1					
ANR	54736	ExpressionStatement	"zend_error_noreturn ( E_CORE_ERROR , ""Property %s of class %s cannot be updated"" , name , ZSTR_VAL ( Z_OBJCE_P ( object ) -> name ) )"	3807:2:114670:114789	54695	0	True				
ANR	54737	CallExpression	"zend_error_noreturn ( E_CORE_ERROR , ""Property %s of class %s cannot be updated"" , name , ZSTR_VAL ( Z_OBJCE_P ( object ) -> name ) )"		54695	0					
ANR	54738	Callee	zend_error_noreturn		54695	0					
ANR	54739	Identifier	zend_error_noreturn		54695	0					
ANR	54740	ArgumentList	E_CORE_ERROR		54695	1					
ANR	54741	Argument	E_CORE_ERROR		54695	0					
ANR	54742	Identifier	E_CORE_ERROR		54695	0					
ANR	54743	Argument	"""Property %s of class %s cannot be updated"""		54695	1					
ANR	54744	PrimaryExpression	"""Property %s of class %s cannot be updated"""		54695	0					
ANR	54745	Argument	name		54695	2					
ANR	54746	Identifier	name		54695	0					
ANR	54747	Argument	ZSTR_VAL ( Z_OBJCE_P ( object ) -> name )		54695	3					
ANR	54748	CallExpression	ZSTR_VAL ( Z_OBJCE_P ( object ) -> name )		54695	0					
ANR	54749	Callee	ZSTR_VAL		54695	0					
ANR	54750	Identifier	ZSTR_VAL		54695	0					
ANR	54751	ArgumentList	Z_OBJCE_P ( object ) -> name		54695	1					
ANR	54752	Argument	Z_OBJCE_P ( object ) -> name		54695	0					
ANR	54753	PtrMemberAccess	Z_OBJCE_P ( object ) -> name		54695	0					
ANR	54754	CallExpression	Z_OBJCE_P ( object )		54695	0					
ANR	54755	Callee	Z_OBJCE_P		54695	0					
ANR	54756	Identifier	Z_OBJCE_P		54695	0					
ANR	54757	ArgumentList	object		54695	1					
ANR	54758	Argument	object		54695	0					
ANR	54759	Identifier	object		54695	0					
ANR	54760	Identifier	name		54695	1					
ANR	54761	ExpressionStatement	"ZVAL_STR ( & property , name )"	3809:1:114795:114820	54695	4	True				
ANR	54762	CallExpression	"ZVAL_STR ( & property , name )"		54695	0					
ANR	54763	Callee	ZVAL_STR		54695	0					
ANR	54764	Identifier	ZVAL_STR		54695	0					
ANR	54765	ArgumentList	& property		54695	1					
ANR	54766	Argument	& property		54695	0					
ANR	54767	UnaryOperationExpression	& property		54695	0					
ANR	54768	UnaryOperator	&		54695	0					
ANR	54769	Identifier	property		54695	1					
ANR	54770	Argument	name		54695	1					
ANR	54771	Identifier	name		54695	0					
ANR	54772	ExpressionStatement	"Z_OBJ_HT_P ( object ) -> write_property ( object , & property , value , NULL )"	3810:1:114823:114889	54695	5	True				
ANR	54773	CallExpression	"Z_OBJ_HT_P ( object ) -> write_property ( object , & property , value , NULL )"		54695	0					
ANR	54774	Callee	Z_OBJ_HT_P ( object ) -> write_property		54695	0					
ANR	54775	PtrMemberAccess	Z_OBJ_HT_P ( object ) -> write_property		54695	0					
ANR	54776	CallExpression	Z_OBJ_HT_P ( object )		54695	0					
ANR	54777	Callee	Z_OBJ_HT_P		54695	0					
ANR	54778	Identifier	Z_OBJ_HT_P		54695	0					
ANR	54779	ArgumentList	object		54695	1					
ANR	54780	Argument	object		54695	0					
ANR	54781	Identifier	object		54695	0					
ANR	54782	Identifier	write_property		54695	1					
ANR	54783	ArgumentList	object		54695	1					
ANR	54784	Argument	object		54695	0					
ANR	54785	Identifier	object		54695	0					
ANR	54786	Argument	& property		54695	1					
ANR	54787	UnaryOperationExpression	& property		54695	0					
ANR	54788	UnaryOperator	&		54695	0					
ANR	54789	Identifier	property		54695	1					
ANR	54790	Argument	value		54695	2					
ANR	54791	Identifier	value		54695	0					
ANR	54792	Argument	NULL		54695	3					
ANR	54793	Identifier	NULL		54695	0					
ANR	54794	ExpressionStatement	EG ( scope ) = old_scope	3812:1:114893:114914	54695	6	True				
ANR	54795	AssignmentExpression	EG ( scope ) = old_scope		54695	0		=			
ANR	54796	CallExpression	EG ( scope )		54695	0					
ANR	54797	Callee	EG		54695	0					
ANR	54798	Identifier	EG		54695	0					
ANR	54799	ArgumentList	scope		54695	1					
ANR	54800	Argument	scope		54695	0					
ANR	54801	Identifier	scope		54695	0					
ANR	54802	Identifier	old_scope		54695	1					
ANR	54803	ReturnType	ZEND_API void		54695	1					
ANR	54804	Identifier	zend_update_property_ex		54695	2					
ANR	54805	ParameterList	"zend_class_entry * scope , zval * object , zend_string * name , zval * value"		54695	3					
ANR	54806	Parameter	zend_class_entry * scope	3799:38:114461:114483	54695	0	True				
ANR	54807	ParameterType	zend_class_entry *		54695	0					
ANR	54808	Identifier	scope		54695	1					
ANR	54809	Parameter	zval * object	3799:63:114486:114497	54695	1	True				
ANR	54810	ParameterType	zval *		54695	0					
ANR	54811	Identifier	object		54695	1					
ANR	54812	Parameter	zend_string * name	3799:77:114500:114516	54695	2	True				
ANR	54813	ParameterType	zend_string *		54695	0					
ANR	54814	Identifier	name		54695	1					
ANR	54815	Parameter	zval * value	3799:96:114519:114529	54695	3	True				
ANR	54816	ParameterType	zval *		54695	0					
ANR	54817	Identifier	value		54695	1					
ANR	54818	CFGEntryNode	ENTRY		54695		True				
ANR	54819	CFGExitNode	EXIT		54695		True				
ANR	54820	Symbol	EG		54695						
ANR	54821	Symbol	Z_OBJ_HT_P ( object ) -> write_property		54695						
ANR	54822	Symbol	Z_OBJCE_P ( object ) -> name		54695						
ANR	54823	Symbol	NULL		54695						
ANR	54824	Symbol	old_scope		54695						
ANR	54825	Symbol	* Z_OBJ_HT_P		54695						
ANR	54826	Symbol	& property		54695						
ANR	54827	Symbol	ZSTR_VAL		54695						
ANR	54828	Symbol	E_CORE_ERROR		54695						
ANR	54829	Symbol	scope		54695						
ANR	54830	Symbol	name		54695						
ANR	54831	Symbol	property		54695						
ANR	54832	Symbol	Z_OBJ_HT_P		54695						
ANR	54833	Symbol	Z_OBJCE_P		54695						
ANR	54834	Symbol	value		54695						
ANR	54835	Symbol	object		54695						
ANR	54836	Symbol	* Z_OBJCE_P		54695						
ANR	54837	Function	zend_update_property	3816:0:114929:115482							
ANR	54838	FunctionDef	"zend_update_property (zend_class_entry * scope , zval * object , const char * name , size_t name_length , zval * value)"		54837	0					
ANR	54839	CompoundStatement		3817:0:115064:115482	54837	0					
ANR	54840	IdentifierDeclStatement	zval property ;	3818:1:115067:115080	54837	0	True				
ANR	54841	IdentifierDecl	property		54837	0					
ANR	54842	IdentifierDeclType	zval		54837	0					
ANR	54843	Identifier	property		54837	1					
ANR	54844	IdentifierDeclStatement	zend_class_entry * old_scope = EG ( scope ) ;	3819:1:115083:115122	54837	1	True				
ANR	54845	IdentifierDecl	* old_scope = EG ( scope )		54837	0					
ANR	54846	IdentifierDeclType	zend_class_entry *		54837	0					
ANR	54847	Identifier	old_scope		54837	1					
ANR	54848	AssignmentExpression	* old_scope = EG ( scope )		54837	2		=			
ANR	54849	Identifier	old_scope		54837	0					
ANR	54850	CallExpression	EG ( scope )		54837	1					
ANR	54851	Callee	EG		54837	0					
ANR	54852	Identifier	EG		54837	0					
ANR	54853	ArgumentList	scope		54837	1					
ANR	54854	Argument	scope		54837	0					
ANR	54855	Identifier	scope		54837	0					
ANR	54856	ExpressionStatement	EG ( scope ) = scope	3821:1:115126:115143	54837	2	True				
ANR	54857	AssignmentExpression	EG ( scope ) = scope		54837	0		=			
ANR	54858	CallExpression	EG ( scope )		54837	0					
ANR	54859	Callee	EG		54837	0					
ANR	54860	Identifier	EG		54837	0					
ANR	54861	ArgumentList	scope		54837	1					
ANR	54862	Argument	scope		54837	0					
ANR	54863	Identifier	scope		54837	0					
ANR	54864	Identifier	scope		54837	1					
ANR	54865	IfStatement	if ( ! Z_OBJ_HT_P ( object ) -> write_property )		54837	3					
ANR	54866	Condition	! Z_OBJ_HT_P ( object ) -> write_property	3823:5:115151:115185	54837	0	True				
ANR	54867	UnaryOperationExpression	! Z_OBJ_HT_P ( object ) -> write_property		54837	0					
ANR	54868	UnaryOperator	!		54837	0					
ANR	54869	PtrMemberAccess	Z_OBJ_HT_P ( object ) -> write_property		54837	1					
ANR	54870	CallExpression	Z_OBJ_HT_P ( object )		54837	0					
ANR	54871	Callee	Z_OBJ_HT_P		54837	0					
ANR	54872	Identifier	Z_OBJ_HT_P		54837	0					
ANR	54873	ArgumentList	object		54837	1					
ANR	54874	Argument	object		54837	0					
ANR	54875	Identifier	object		54837	0					
ANR	54876	Identifier	write_property		54837	1					
ANR	54877	CompoundStatement		7:42:123:123	54837	1					
ANR	54878	ExpressionStatement	"zend_error_noreturn ( E_CORE_ERROR , ""Property %s of class %s cannot be updated"" , name , ZSTR_VAL ( Z_OBJCE_P ( object ) -> name ) )"	3824:2:115192:115311	54837	0	True				
ANR	54879	CallExpression	"zend_error_noreturn ( E_CORE_ERROR , ""Property %s of class %s cannot be updated"" , name , ZSTR_VAL ( Z_OBJCE_P ( object ) -> name ) )"		54837	0					
ANR	54880	Callee	zend_error_noreturn		54837	0					
ANR	54881	Identifier	zend_error_noreturn		54837	0					
ANR	54882	ArgumentList	E_CORE_ERROR		54837	1					
ANR	54883	Argument	E_CORE_ERROR		54837	0					
ANR	54884	Identifier	E_CORE_ERROR		54837	0					
ANR	54885	Argument	"""Property %s of class %s cannot be updated"""		54837	1					
ANR	54886	PrimaryExpression	"""Property %s of class %s cannot be updated"""		54837	0					
ANR	54887	Argument	name		54837	2					
ANR	54888	Identifier	name		54837	0					
ANR	54889	Argument	ZSTR_VAL ( Z_OBJCE_P ( object ) -> name )		54837	3					
ANR	54890	CallExpression	ZSTR_VAL ( Z_OBJCE_P ( object ) -> name )		54837	0					
ANR	54891	Callee	ZSTR_VAL		54837	0					
ANR	54892	Identifier	ZSTR_VAL		54837	0					
ANR	54893	ArgumentList	Z_OBJCE_P ( object ) -> name		54837	1					
ANR	54894	Argument	Z_OBJCE_P ( object ) -> name		54837	0					
ANR	54895	PtrMemberAccess	Z_OBJCE_P ( object ) -> name		54837	0					
ANR	54896	CallExpression	Z_OBJCE_P ( object )		54837	0					
ANR	54897	Callee	Z_OBJCE_P		54837	0					
ANR	54898	Identifier	Z_OBJCE_P		54837	0					
ANR	54899	ArgumentList	object		54837	1					
ANR	54900	Argument	object		54837	0					
ANR	54901	Identifier	object		54837	0					
ANR	54902	Identifier	name		54837	1					
ANR	54903	ExpressionStatement	"ZVAL_STRINGL ( & property , name , name_length )"	3826:1:115317:115359	54837	4	True				
ANR	54904	CallExpression	"ZVAL_STRINGL ( & property , name , name_length )"		54837	0					
ANR	54905	Callee	ZVAL_STRINGL		54837	0					
ANR	54906	Identifier	ZVAL_STRINGL		54837	0					
ANR	54907	ArgumentList	& property		54837	1					
ANR	54908	Argument	& property		54837	0					
ANR	54909	UnaryOperationExpression	& property		54837	0					
ANR	54910	UnaryOperator	&		54837	0					
ANR	54911	Identifier	property		54837	1					
ANR	54912	Argument	name		54837	1					
ANR	54913	Identifier	name		54837	0					
ANR	54914	Argument	name_length		54837	2					
ANR	54915	Identifier	name_length		54837	0					
ANR	54916	ExpressionStatement	"Z_OBJ_HT_P ( object ) -> write_property ( object , & property , value , NULL )"	3827:1:115362:115428	54837	5	True				
ANR	54917	CallExpression	"Z_OBJ_HT_P ( object ) -> write_property ( object , & property , value , NULL )"		54837	0					
ANR	54918	Callee	Z_OBJ_HT_P ( object ) -> write_property		54837	0					
ANR	54919	PtrMemberAccess	Z_OBJ_HT_P ( object ) -> write_property		54837	0					
ANR	54920	CallExpression	Z_OBJ_HT_P ( object )		54837	0					
ANR	54921	Callee	Z_OBJ_HT_P		54837	0					
ANR	54922	Identifier	Z_OBJ_HT_P		54837	0					
ANR	54923	ArgumentList	object		54837	1					
ANR	54924	Argument	object		54837	0					
ANR	54925	Identifier	object		54837	0					
ANR	54926	Identifier	write_property		54837	1					
ANR	54927	ArgumentList	object		54837	1					
ANR	54928	Argument	object		54837	0					
ANR	54929	Identifier	object		54837	0					
ANR	54930	Argument	& property		54837	1					
ANR	54931	UnaryOperationExpression	& property		54837	0					
ANR	54932	UnaryOperator	&		54837	0					
ANR	54933	Identifier	property		54837	1					
ANR	54934	Argument	value		54837	2					
ANR	54935	Identifier	value		54837	0					
ANR	54936	Argument	NULL		54837	3					
ANR	54937	Identifier	NULL		54837	0					
ANR	54938	ExpressionStatement	zval_ptr_dtor ( & property )	3828:1:115431:115455	54837	6	True				
ANR	54939	CallExpression	zval_ptr_dtor ( & property )		54837	0					
ANR	54940	Callee	zval_ptr_dtor		54837	0					
ANR	54941	Identifier	zval_ptr_dtor		54837	0					
ANR	54942	ArgumentList	& property		54837	1					
ANR	54943	Argument	& property		54837	0					
ANR	54944	UnaryOperationExpression	& property		54837	0					
ANR	54945	UnaryOperator	&		54837	0					
ANR	54946	Identifier	property		54837	1					
ANR	54947	ExpressionStatement	EG ( scope ) = old_scope	3830:1:115459:115480	54837	7	True				
ANR	54948	AssignmentExpression	EG ( scope ) = old_scope		54837	0		=			
ANR	54949	CallExpression	EG ( scope )		54837	0					
ANR	54950	Callee	EG		54837	0					
ANR	54951	Identifier	EG		54837	0					
ANR	54952	ArgumentList	scope		54837	1					
ANR	54953	Argument	scope		54837	0					
ANR	54954	Identifier	scope		54837	0					
ANR	54955	Identifier	old_scope		54837	1					
ANR	54956	ReturnType	ZEND_API void		54837	1					
ANR	54957	Identifier	zend_update_property		54837	2					
ANR	54958	ParameterList	"zend_class_entry * scope , zval * object , const char * name , size_t name_length , zval * value"		54837	3					
ANR	54959	Parameter	zend_class_entry * scope	3816:35:114964:114986	54837	0	True				
ANR	54960	ParameterType	zend_class_entry *		54837	0					
ANR	54961	Identifier	scope		54837	1					
ANR	54962	Parameter	zval * object	3816:60:114989:115000	54837	1	True				
ANR	54963	ParameterType	zval *		54837	0					
ANR	54964	Identifier	object		54837	1					
ANR	54965	Parameter	const char * name	3816:74:115003:115018	54837	2	True				
ANR	54966	ParameterType	const char *		54837	0					
ANR	54967	Identifier	name		54837	1					
ANR	54968	Parameter	size_t name_length	3816:92:115021:115038	54837	3	True				
ANR	54969	ParameterType	size_t		54837	0					
ANR	54970	Identifier	name_length		54837	1					
ANR	54971	Parameter	zval * value	3816:112:115041:115051	54837	4	True				
ANR	54972	ParameterType	zval *		54837	0					
ANR	54973	Identifier	value		54837	1					
ANR	54974	CFGEntryNode	ENTRY		54837		True				
ANR	54975	CFGExitNode	EXIT		54837		True				
ANR	54976	Symbol	EG		54837						
ANR	54977	Symbol	Z_OBJ_HT_P ( object ) -> write_property		54837						
ANR	54978	Symbol	Z_OBJCE_P ( object ) -> name		54837						
ANR	54979	Symbol	NULL		54837						
ANR	54980	Symbol	old_scope		54837						
ANR	54981	Symbol	name_length		54837						
ANR	54982	Symbol	* Z_OBJ_HT_P		54837						
ANR	54983	Symbol	& property		54837						
ANR	54984	Symbol	ZSTR_VAL		54837						
ANR	54985	Symbol	E_CORE_ERROR		54837						
ANR	54986	Symbol	scope		54837						
ANR	54987	Symbol	name		54837						
ANR	54988	Symbol	property		54837						
ANR	54989	Symbol	Z_OBJ_HT_P		54837						
ANR	54990	Symbol	Z_OBJCE_P		54837						
ANR	54991	Symbol	value		54837						
ANR	54992	Symbol	object		54837						
ANR	54993	Symbol	* Z_OBJCE_P		54837						
ANR	54994	Function	zend_update_property_null	3834:0:115495:115717							
ANR	54995	FunctionDef	"zend_update_property_null (zend_class_entry * scope , zval * object , const char * name , size_t name_length)"		54994	0					
ANR	54996	CompoundStatement		3835:0:115622:115717	54994	0					
ANR	54997	IdentifierDeclStatement	zval tmp ;	3836:1:115625:115633	54994	0	True				
ANR	54998	IdentifierDecl	tmp		54994	0					
ANR	54999	IdentifierDeclType	zval		54994	0					
ANR	55000	Identifier	tmp		54994	1					
ANR	55001	ExpressionStatement	ZVAL_NULL ( & tmp )	3838:1:115637:115652	54994	1	True				
ANR	55002	CallExpression	ZVAL_NULL ( & tmp )		54994	0					
ANR	55003	Callee	ZVAL_NULL		54994	0					
ANR	55004	Identifier	ZVAL_NULL		54994	0					
ANR	55005	ArgumentList	& tmp		54994	1					
ANR	55006	Argument	& tmp		54994	0					
ANR	55007	UnaryOperationExpression	& tmp		54994	0					
ANR	55008	UnaryOperator	&		54994	0					
ANR	55009	Identifier	tmp		54994	1					
ANR	55010	ExpressionStatement	"zend_update_property ( scope , object , name , name_length , & tmp )"	3839:1:115655:115715	54994	2	True				
ANR	55011	CallExpression	"zend_update_property ( scope , object , name , name_length , & tmp )"		54994	0					
ANR	55012	Callee	zend_update_property		54994	0					
ANR	55013	Identifier	zend_update_property		54994	0					
ANR	55014	ArgumentList	scope		54994	1					
ANR	55015	Argument	scope		54994	0					
ANR	55016	Identifier	scope		54994	0					
ANR	55017	Argument	object		54994	1					
ANR	55018	Identifier	object		54994	0					
ANR	55019	Argument	name		54994	2					
ANR	55020	Identifier	name		54994	0					
ANR	55021	Argument	name_length		54994	3					
ANR	55022	Identifier	name_length		54994	0					
ANR	55023	Argument	& tmp		54994	4					
ANR	55024	UnaryOperationExpression	& tmp		54994	0					
ANR	55025	UnaryOperator	&		54994	0					
ANR	55026	Identifier	tmp		54994	1					
ANR	55027	ReturnType	ZEND_API void		54994	1					
ANR	55028	Identifier	zend_update_property_null		54994	2					
ANR	55029	ParameterList	"zend_class_entry * scope , zval * object , const char * name , size_t name_length"		54994	3					
ANR	55030	Parameter	zend_class_entry * scope	3834:40:115535:115557	54994	0	True				
ANR	55031	ParameterType	zend_class_entry *		54994	0					
ANR	55032	Identifier	scope		54994	1					
ANR	55033	Parameter	zval * object	3834:65:115560:115571	54994	1	True				
ANR	55034	ParameterType	zval *		54994	0					
ANR	55035	Identifier	object		54994	1					
ANR	55036	Parameter	const char * name	3834:79:115574:115589	54994	2	True				
ANR	55037	ParameterType	const char *		54994	0					
ANR	55038	Identifier	name		54994	1					
ANR	55039	Parameter	size_t name_length	3834:97:115592:115609	54994	3	True				
ANR	55040	ParameterType	size_t		54994	0					
ANR	55041	Identifier	name_length		54994	1					
ANR	55042	CFGEntryNode	ENTRY		54994		True				
ANR	55043	CFGExitNode	EXIT		54994		True				
ANR	55044	Symbol	tmp		54994						
ANR	55045	Symbol	scope		54994						
ANR	55046	Symbol	name		54994						
ANR	55047	Symbol	name_length		54994						
ANR	55048	Symbol	& tmp		54994						
ANR	55049	Symbol	object		54994						
ANR	55050	Function	zend_update_property_bool	3843:0:115730:115976							
ANR	55051	FunctionDef	"zend_update_property_bool (zend_class_entry * scope , zval * object , const char * name , size_t name_length , zend_long value)"		55050	0					
ANR	55052	CompoundStatement		3844:0:115874:115976	55050	0					
ANR	55053	IdentifierDeclStatement	zval tmp ;	3845:1:115877:115885	55050	0	True				
ANR	55054	IdentifierDecl	tmp		55050	0					
ANR	55055	IdentifierDeclType	zval		55050	0					
ANR	55056	Identifier	tmp		55050	1					
ANR	55057	ExpressionStatement	"ZVAL_BOOL ( & tmp , value )"	3847:1:115889:115911	55050	1	True				
ANR	55058	CallExpression	"ZVAL_BOOL ( & tmp , value )"		55050	0					
ANR	55059	Callee	ZVAL_BOOL		55050	0					
ANR	55060	Identifier	ZVAL_BOOL		55050	0					
ANR	55061	ArgumentList	& tmp		55050	1					
ANR	55062	Argument	& tmp		55050	0					
ANR	55063	UnaryOperationExpression	& tmp		55050	0					
ANR	55064	UnaryOperator	&		55050	0					
ANR	55065	Identifier	tmp		55050	1					
ANR	55066	Argument	value		55050	1					
ANR	55067	Identifier	value		55050	0					
ANR	55068	ExpressionStatement	"zend_update_property ( scope , object , name , name_length , & tmp )"	3848:1:115914:115974	55050	2	True				
ANR	55069	CallExpression	"zend_update_property ( scope , object , name , name_length , & tmp )"		55050	0					
ANR	55070	Callee	zend_update_property		55050	0					
ANR	55071	Identifier	zend_update_property		55050	0					
ANR	55072	ArgumentList	scope		55050	1					
ANR	55073	Argument	scope		55050	0					
ANR	55074	Identifier	scope		55050	0					
ANR	55075	Argument	object		55050	1					
ANR	55076	Identifier	object		55050	0					
ANR	55077	Argument	name		55050	2					
ANR	55078	Identifier	name		55050	0					
ANR	55079	Argument	name_length		55050	3					
ANR	55080	Identifier	name_length		55050	0					
ANR	55081	Argument	& tmp		55050	4					
ANR	55082	UnaryOperationExpression	& tmp		55050	0					
ANR	55083	UnaryOperator	&		55050	0					
ANR	55084	Identifier	tmp		55050	1					
ANR	55085	ReturnType	ZEND_API void		55050	1					
ANR	55086	Identifier	zend_update_property_bool		55050	2					
ANR	55087	ParameterList	"zend_class_entry * scope , zval * object , const char * name , size_t name_length , zend_long value"		55050	3					
ANR	55088	Parameter	zend_class_entry * scope	3843:40:115770:115792	55050	0	True				
ANR	55089	ParameterType	zend_class_entry *		55050	0					
ANR	55090	Identifier	scope		55050	1					
ANR	55091	Parameter	zval * object	3843:65:115795:115806	55050	1	True				
ANR	55092	ParameterType	zval *		55050	0					
ANR	55093	Identifier	object		55050	1					
ANR	55094	Parameter	const char * name	3843:79:115809:115824	55050	2	True				
ANR	55095	ParameterType	const char *		55050	0					
ANR	55096	Identifier	name		55050	1					
ANR	55097	Parameter	size_t name_length	3843:97:115827:115844	55050	3	True				
ANR	55098	ParameterType	size_t		55050	0					
ANR	55099	Identifier	name_length		55050	1					
ANR	55100	Parameter	zend_long value	3843:117:115847:115861	55050	4	True				
ANR	55101	ParameterType	zend_long		55050	0					
ANR	55102	Identifier	value		55050	1					
ANR	55103	CFGEntryNode	ENTRY		55050		True				
ANR	55104	CFGExitNode	EXIT		55050		True				
ANR	55105	Symbol	tmp		55050						
ANR	55106	Symbol	scope		55050						
ANR	55107	Symbol	name		55050						
ANR	55108	Symbol	name_length		55050						
ANR	55109	Symbol	& tmp		55050						
ANR	55110	Symbol	value		55050						
ANR	55111	Symbol	object		55050						
ANR	55112	Function	zend_update_property_long	3852:0:115989:116235							
ANR	55113	FunctionDef	"zend_update_property_long (zend_class_entry * scope , zval * object , const char * name , size_t name_length , zend_long value)"		55112	0					
ANR	55114	CompoundStatement		3853:0:116133:116235	55112	0					
ANR	55115	IdentifierDeclStatement	zval tmp ;	3854:1:116136:116144	55112	0	True				
ANR	55116	IdentifierDecl	tmp		55112	0					
ANR	55117	IdentifierDeclType	zval		55112	0					
ANR	55118	Identifier	tmp		55112	1					
ANR	55119	ExpressionStatement	"ZVAL_LONG ( & tmp , value )"	3856:1:116148:116170	55112	1	True				
ANR	55120	CallExpression	"ZVAL_LONG ( & tmp , value )"		55112	0					
ANR	55121	Callee	ZVAL_LONG		55112	0					
ANR	55122	Identifier	ZVAL_LONG		55112	0					
ANR	55123	ArgumentList	& tmp		55112	1					
ANR	55124	Argument	& tmp		55112	0					
ANR	55125	UnaryOperationExpression	& tmp		55112	0					
ANR	55126	UnaryOperator	&		55112	0					
ANR	55127	Identifier	tmp		55112	1					
ANR	55128	Argument	value		55112	1					
ANR	55129	Identifier	value		55112	0					
ANR	55130	ExpressionStatement	"zend_update_property ( scope , object , name , name_length , & tmp )"	3857:1:116173:116233	55112	2	True				
ANR	55131	CallExpression	"zend_update_property ( scope , object , name , name_length , & tmp )"		55112	0					
ANR	55132	Callee	zend_update_property		55112	0					
ANR	55133	Identifier	zend_update_property		55112	0					
ANR	55134	ArgumentList	scope		55112	1					
ANR	55135	Argument	scope		55112	0					
ANR	55136	Identifier	scope		55112	0					
ANR	55137	Argument	object		55112	1					
ANR	55138	Identifier	object		55112	0					
ANR	55139	Argument	name		55112	2					
ANR	55140	Identifier	name		55112	0					
ANR	55141	Argument	name_length		55112	3					
ANR	55142	Identifier	name_length		55112	0					
ANR	55143	Argument	& tmp		55112	4					
ANR	55144	UnaryOperationExpression	& tmp		55112	0					
ANR	55145	UnaryOperator	&		55112	0					
ANR	55146	Identifier	tmp		55112	1					
ANR	55147	ReturnType	ZEND_API void		55112	1					
ANR	55148	Identifier	zend_update_property_long		55112	2					
ANR	55149	ParameterList	"zend_class_entry * scope , zval * object , const char * name , size_t name_length , zend_long value"		55112	3					
ANR	55150	Parameter	zend_class_entry * scope	3852:40:116029:116051	55112	0	True				
ANR	55151	ParameterType	zend_class_entry *		55112	0					
ANR	55152	Identifier	scope		55112	1					
ANR	55153	Parameter	zval * object	3852:65:116054:116065	55112	1	True				
ANR	55154	ParameterType	zval *		55112	0					
ANR	55155	Identifier	object		55112	1					
ANR	55156	Parameter	const char * name	3852:79:116068:116083	55112	2	True				
ANR	55157	ParameterType	const char *		55112	0					
ANR	55158	Identifier	name		55112	1					
ANR	55159	Parameter	size_t name_length	3852:97:116086:116103	55112	3	True				
ANR	55160	ParameterType	size_t		55112	0					
ANR	55161	Identifier	name_length		55112	1					
ANR	55162	Parameter	zend_long value	3852:117:116106:116120	55112	4	True				
ANR	55163	ParameterType	zend_long		55112	0					
ANR	55164	Identifier	value		55112	1					
ANR	55165	CFGEntryNode	ENTRY		55112		True				
ANR	55166	CFGExitNode	EXIT		55112		True				
ANR	55167	Symbol	tmp		55112						
ANR	55168	Symbol	scope		55112						
ANR	55169	Symbol	name		55112						
ANR	55170	Symbol	name_length		55112						
ANR	55171	Symbol	& tmp		55112						
ANR	55172	Symbol	value		55112						
ANR	55173	Symbol	object		55112						
ANR	55174	Function	zend_update_property_double	3861:0:116248:116495							
ANR	55175	FunctionDef	"zend_update_property_double (zend_class_entry * scope , zval * object , const char * name , size_t name_length , double value)"		55174	0					
ANR	55176	CompoundStatement		3862:0:116391:116495	55174	0					
ANR	55177	IdentifierDeclStatement	zval tmp ;	3863:1:116394:116402	55174	0	True				
ANR	55178	IdentifierDecl	tmp		55174	0					
ANR	55179	IdentifierDeclType	zval		55174	0					
ANR	55180	Identifier	tmp		55174	1					
ANR	55181	ExpressionStatement	"ZVAL_DOUBLE ( & tmp , value )"	3865:1:116406:116430	55174	1	True				
ANR	55182	CallExpression	"ZVAL_DOUBLE ( & tmp , value )"		55174	0					
ANR	55183	Callee	ZVAL_DOUBLE		55174	0					
ANR	55184	Identifier	ZVAL_DOUBLE		55174	0					
ANR	55185	ArgumentList	& tmp		55174	1					
ANR	55186	Argument	& tmp		55174	0					
ANR	55187	UnaryOperationExpression	& tmp		55174	0					
ANR	55188	UnaryOperator	&		55174	0					
ANR	55189	Identifier	tmp		55174	1					
ANR	55190	Argument	value		55174	1					
ANR	55191	Identifier	value		55174	0					
ANR	55192	ExpressionStatement	"zend_update_property ( scope , object , name , name_length , & tmp )"	3866:1:116433:116493	55174	2	True				
ANR	55193	CallExpression	"zend_update_property ( scope , object , name , name_length , & tmp )"		55174	0					
ANR	55194	Callee	zend_update_property		55174	0					
ANR	55195	Identifier	zend_update_property		55174	0					
ANR	55196	ArgumentList	scope		55174	1					
ANR	55197	Argument	scope		55174	0					
ANR	55198	Identifier	scope		55174	0					
ANR	55199	Argument	object		55174	1					
ANR	55200	Identifier	object		55174	0					
ANR	55201	Argument	name		55174	2					
ANR	55202	Identifier	name		55174	0					
ANR	55203	Argument	name_length		55174	3					
ANR	55204	Identifier	name_length		55174	0					
ANR	55205	Argument	& tmp		55174	4					
ANR	55206	UnaryOperationExpression	& tmp		55174	0					
ANR	55207	UnaryOperator	&		55174	0					
ANR	55208	Identifier	tmp		55174	1					
ANR	55209	ReturnType	ZEND_API void		55174	1					
ANR	55210	Identifier	zend_update_property_double		55174	2					
ANR	55211	ParameterList	"zend_class_entry * scope , zval * object , const char * name , size_t name_length , double value"		55174	3					
ANR	55212	Parameter	zend_class_entry * scope	3861:42:116290:116312	55174	0	True				
ANR	55213	ParameterType	zend_class_entry *		55174	0					
ANR	55214	Identifier	scope		55174	1					
ANR	55215	Parameter	zval * object	3861:67:116315:116326	55174	1	True				
ANR	55216	ParameterType	zval *		55174	0					
ANR	55217	Identifier	object		55174	1					
ANR	55218	Parameter	const char * name	3861:81:116329:116344	55174	2	True				
ANR	55219	ParameterType	const char *		55174	0					
ANR	55220	Identifier	name		55174	1					
ANR	55221	Parameter	size_t name_length	3861:99:116347:116364	55174	3	True				
ANR	55222	ParameterType	size_t		55174	0					
ANR	55223	Identifier	name_length		55174	1					
ANR	55224	Parameter	double value	3861:119:116367:116378	55174	4	True				
ANR	55225	ParameterType	double		55174	0					
ANR	55226	Identifier	value		55174	1					
ANR	55227	CFGEntryNode	ENTRY		55174		True				
ANR	55228	CFGExitNode	EXIT		55174		True				
ANR	55229	Symbol	tmp		55174						
ANR	55230	Symbol	scope		55174						
ANR	55231	Symbol	name		55174						
ANR	55232	Symbol	name_length		55174						
ANR	55233	Symbol	& tmp		55174						
ANR	55234	Symbol	value		55174						
ANR	55235	Symbol	object		55174						
ANR	55236	Function	zend_update_property_str	3870:0:116508:116755							
ANR	55237	FunctionDef	"zend_update_property_str (zend_class_entry * scope , zval * object , const char * name , size_t name_length , zend_string * value)"		55236	0					
ANR	55238	CompoundStatement		3871:0:116654:116755	55236	0					
ANR	55239	IdentifierDeclStatement	zval tmp ;	3872:1:116657:116665	55236	0	True				
ANR	55240	IdentifierDecl	tmp		55236	0					
ANR	55241	IdentifierDeclType	zval		55236	0					
ANR	55242	Identifier	tmp		55236	1					
ANR	55243	ExpressionStatement	"ZVAL_STR ( & tmp , value )"	3874:1:116669:116690	55236	1	True				
ANR	55244	CallExpression	"ZVAL_STR ( & tmp , value )"		55236	0					
ANR	55245	Callee	ZVAL_STR		55236	0					
ANR	55246	Identifier	ZVAL_STR		55236	0					
ANR	55247	ArgumentList	& tmp		55236	1					
ANR	55248	Argument	& tmp		55236	0					
ANR	55249	UnaryOperationExpression	& tmp		55236	0					
ANR	55250	UnaryOperator	&		55236	0					
ANR	55251	Identifier	tmp		55236	1					
ANR	55252	Argument	value		55236	1					
ANR	55253	Identifier	value		55236	0					
ANR	55254	ExpressionStatement	"zend_update_property ( scope , object , name , name_length , & tmp )"	3875:1:116693:116753	55236	2	True				
ANR	55255	CallExpression	"zend_update_property ( scope , object , name , name_length , & tmp )"		55236	0					
ANR	55256	Callee	zend_update_property		55236	0					
ANR	55257	Identifier	zend_update_property		55236	0					
ANR	55258	ArgumentList	scope		55236	1					
ANR	55259	Argument	scope		55236	0					
ANR	55260	Identifier	scope		55236	0					
ANR	55261	Argument	object		55236	1					
ANR	55262	Identifier	object		55236	0					
ANR	55263	Argument	name		55236	2					
ANR	55264	Identifier	name		55236	0					
ANR	55265	Argument	name_length		55236	3					
ANR	55266	Identifier	name_length		55236	0					
ANR	55267	Argument	& tmp		55236	4					
ANR	55268	UnaryOperationExpression	& tmp		55236	0					
ANR	55269	UnaryOperator	&		55236	0					
ANR	55270	Identifier	tmp		55236	1					
ANR	55271	ReturnType	ZEND_API void		55236	1					
ANR	55272	Identifier	zend_update_property_str		55236	2					
ANR	55273	ParameterList	"zend_class_entry * scope , zval * object , const char * name , size_t name_length , zend_string * value"		55236	3					
ANR	55274	Parameter	zend_class_entry * scope	3870:39:116547:116569	55236	0	True				
ANR	55275	ParameterType	zend_class_entry *		55236	0					
ANR	55276	Identifier	scope		55236	1					
ANR	55277	Parameter	zval * object	3870:64:116572:116583	55236	1	True				
ANR	55278	ParameterType	zval *		55236	0					
ANR	55279	Identifier	object		55236	1					
ANR	55280	Parameter	const char * name	3870:78:116586:116601	55236	2	True				
ANR	55281	ParameterType	const char *		55236	0					
ANR	55282	Identifier	name		55236	1					
ANR	55283	Parameter	size_t name_length	3870:96:116604:116621	55236	3	True				
ANR	55284	ParameterType	size_t		55236	0					
ANR	55285	Identifier	name_length		55236	1					
ANR	55286	Parameter	zend_string * value	3870:116:116624:116641	55236	4	True				
ANR	55287	ParameterType	zend_string *		55236	0					
ANR	55288	Identifier	value		55236	1					
ANR	55289	CFGEntryNode	ENTRY		55236		True				
ANR	55290	CFGExitNode	EXIT		55236		True				
ANR	55291	Symbol	tmp		55236						
ANR	55292	Symbol	scope		55236						
ANR	55293	Symbol	name		55236						
ANR	55294	Symbol	name_length		55236						
ANR	55295	Symbol	& tmp		55236						
ANR	55296	Symbol	value		55236						
ANR	55297	Symbol	object		55236						
ANR	55298	Function	zend_update_property_string	3879:0:116768:117045							
ANR	55299	FunctionDef	"zend_update_property_string (zend_class_entry * scope , zval * object , const char * name , size_t name_length , const char * value)"		55298	0					
ANR	55300	CompoundStatement		3880:0:116916:117045	55298	0					
ANR	55301	IdentifierDeclStatement	zval tmp ;	3881:1:116919:116927	55298	0	True				
ANR	55302	IdentifierDecl	tmp		55298	0					
ANR	55303	IdentifierDeclType	zval		55298	0					
ANR	55304	Identifier	tmp		55298	1					
ANR	55305	ExpressionStatement	"ZVAL_STRING ( & tmp , value )"	3883:1:116931:116955	55298	1	True				
ANR	55306	CallExpression	"ZVAL_STRING ( & tmp , value )"		55298	0					
ANR	55307	Callee	ZVAL_STRING		55298	0					
ANR	55308	Identifier	ZVAL_STRING		55298	0					
ANR	55309	ArgumentList	& tmp		55298	1					
ANR	55310	Argument	& tmp		55298	0					
ANR	55311	UnaryOperationExpression	& tmp		55298	0					
ANR	55312	UnaryOperator	&		55298	0					
ANR	55313	Identifier	tmp		55298	1					
ANR	55314	Argument	value		55298	1					
ANR	55315	Identifier	value		55298	0					
ANR	55316	ExpressionStatement	"Z_SET_REFCOUNT ( tmp , 0 )"	3884:1:116958:116980	55298	2	True				
ANR	55317	CallExpression	"Z_SET_REFCOUNT ( tmp , 0 )"		55298	0					
ANR	55318	Callee	Z_SET_REFCOUNT		55298	0					
ANR	55319	Identifier	Z_SET_REFCOUNT		55298	0					
ANR	55320	ArgumentList	tmp		55298	1					
ANR	55321	Argument	tmp		55298	0					
ANR	55322	Identifier	tmp		55298	0					
ANR	55323	Argument	0		55298	1					
ANR	55324	PrimaryExpression	0		55298	0					
ANR	55325	ExpressionStatement	"zend_update_property ( scope , object , name , name_length , & tmp )"	3885:1:116983:117043	55298	3	True				
ANR	55326	CallExpression	"zend_update_property ( scope , object , name , name_length , & tmp )"		55298	0					
ANR	55327	Callee	zend_update_property		55298	0					
ANR	55328	Identifier	zend_update_property		55298	0					
ANR	55329	ArgumentList	scope		55298	1					
ANR	55330	Argument	scope		55298	0					
ANR	55331	Identifier	scope		55298	0					
ANR	55332	Argument	object		55298	1					
ANR	55333	Identifier	object		55298	0					
ANR	55334	Argument	name		55298	2					
ANR	55335	Identifier	name		55298	0					
ANR	55336	Argument	name_length		55298	3					
ANR	55337	Identifier	name_length		55298	0					
ANR	55338	Argument	& tmp		55298	4					
ANR	55339	UnaryOperationExpression	& tmp		55298	0					
ANR	55340	UnaryOperator	&		55298	0					
ANR	55341	Identifier	tmp		55298	1					
ANR	55342	ReturnType	ZEND_API void		55298	1					
ANR	55343	Identifier	zend_update_property_string		55298	2					
ANR	55344	ParameterList	"zend_class_entry * scope , zval * object , const char * name , size_t name_length , const char * value"		55298	3					
ANR	55345	Parameter	zend_class_entry * scope	3879:42:116810:116832	55298	0	True				
ANR	55346	ParameterType	zend_class_entry *		55298	0					
ANR	55347	Identifier	scope		55298	1					
ANR	55348	Parameter	zval * object	3879:67:116835:116846	55298	1	True				
ANR	55349	ParameterType	zval *		55298	0					
ANR	55350	Identifier	object		55298	1					
ANR	55351	Parameter	const char * name	3879:81:116849:116864	55298	2	True				
ANR	55352	ParameterType	const char *		55298	0					
ANR	55353	Identifier	name		55298	1					
ANR	55354	Parameter	size_t name_length	3879:99:116867:116884	55298	3	True				
ANR	55355	ParameterType	size_t		55298	0					
ANR	55356	Identifier	name_length		55298	1					
ANR	55357	Parameter	const char * value	3879:119:116887:116903	55298	4	True				
ANR	55358	ParameterType	const char *		55298	0					
ANR	55359	Identifier	value		55298	1					
ANR	55360	CFGEntryNode	ENTRY		55298		True				
ANR	55361	CFGExitNode	EXIT		55298		True				
ANR	55362	Symbol	tmp		55298						
ANR	55363	Symbol	scope		55298						
ANR	55364	Symbol	name		55298						
ANR	55365	Symbol	name_length		55298						
ANR	55366	Symbol	& tmp		55298						
ANR	55367	Symbol	value		55298						
ANR	55368	Symbol	object		55298						
ANR	55369	Function	zend_update_property_stringl	3889:0:117058:117366							
ANR	55370	FunctionDef	"zend_update_property_stringl (zend_class_entry * scope , zval * object , const char * name , size_t name_length , const char * value , size_t value_len)"		55369	0					
ANR	55371	CompoundStatement		3890:0:117225:117366	55369	0					
ANR	55372	IdentifierDeclStatement	zval tmp ;	3891:1:117228:117236	55369	0	True				
ANR	55373	IdentifierDecl	tmp		55369	0					
ANR	55374	IdentifierDeclType	zval		55369	0					
ANR	55375	Identifier	tmp		55369	1					
ANR	55376	ExpressionStatement	"ZVAL_STRINGL ( & tmp , value , value_len )"	3893:1:117240:117276	55369	1	True				
ANR	55377	CallExpression	"ZVAL_STRINGL ( & tmp , value , value_len )"		55369	0					
ANR	55378	Callee	ZVAL_STRINGL		55369	0					
ANR	55379	Identifier	ZVAL_STRINGL		55369	0					
ANR	55380	ArgumentList	& tmp		55369	1					
ANR	55381	Argument	& tmp		55369	0					
ANR	55382	UnaryOperationExpression	& tmp		55369	0					
ANR	55383	UnaryOperator	&		55369	0					
ANR	55384	Identifier	tmp		55369	1					
ANR	55385	Argument	value		55369	1					
ANR	55386	Identifier	value		55369	0					
ANR	55387	Argument	value_len		55369	2					
ANR	55388	Identifier	value_len		55369	0					
ANR	55389	ExpressionStatement	"Z_SET_REFCOUNT ( tmp , 0 )"	3894:1:117279:117301	55369	2	True				
ANR	55390	CallExpression	"Z_SET_REFCOUNT ( tmp , 0 )"		55369	0					
ANR	55391	Callee	Z_SET_REFCOUNT		55369	0					
ANR	55392	Identifier	Z_SET_REFCOUNT		55369	0					
ANR	55393	ArgumentList	tmp		55369	1					
ANR	55394	Argument	tmp		55369	0					
ANR	55395	Identifier	tmp		55369	0					
ANR	55396	Argument	0		55369	1					
ANR	55397	PrimaryExpression	0		55369	0					
ANR	55398	ExpressionStatement	"zend_update_property ( scope , object , name , name_length , & tmp )"	3895:1:117304:117364	55369	3	True				
ANR	55399	CallExpression	"zend_update_property ( scope , object , name , name_length , & tmp )"		55369	0					
ANR	55400	Callee	zend_update_property		55369	0					
ANR	55401	Identifier	zend_update_property		55369	0					
ANR	55402	ArgumentList	scope		55369	1					
ANR	55403	Argument	scope		55369	0					
ANR	55404	Identifier	scope		55369	0					
ANR	55405	Argument	object		55369	1					
ANR	55406	Identifier	object		55369	0					
ANR	55407	Argument	name		55369	2					
ANR	55408	Identifier	name		55369	0					
ANR	55409	Argument	name_length		55369	3					
ANR	55410	Identifier	name_length		55369	0					
ANR	55411	Argument	& tmp		55369	4					
ANR	55412	UnaryOperationExpression	& tmp		55369	0					
ANR	55413	UnaryOperator	&		55369	0					
ANR	55414	Identifier	tmp		55369	1					
ANR	55415	ReturnType	ZEND_API void		55369	1					
ANR	55416	Identifier	zend_update_property_stringl		55369	2					
ANR	55417	ParameterList	"zend_class_entry * scope , zval * object , const char * name , size_t name_length , const char * value , size_t value_len"		55369	3					
ANR	55418	Parameter	zend_class_entry * scope	3889:43:117101:117123	55369	0	True				
ANR	55419	ParameterType	zend_class_entry *		55369	0					
ANR	55420	Identifier	scope		55369	1					
ANR	55421	Parameter	zval * object	3889:68:117126:117137	55369	1	True				
ANR	55422	ParameterType	zval *		55369	0					
ANR	55423	Identifier	object		55369	1					
ANR	55424	Parameter	const char * name	3889:82:117140:117155	55369	2	True				
ANR	55425	ParameterType	const char *		55369	0					
ANR	55426	Identifier	name		55369	1					
ANR	55427	Parameter	size_t name_length	3889:100:117158:117175	55369	3	True				
ANR	55428	ParameterType	size_t		55369	0					
ANR	55429	Identifier	name_length		55369	1					
ANR	55430	Parameter	const char * value	3889:120:117178:117194	55369	4	True				
ANR	55431	ParameterType	const char *		55369	0					
ANR	55432	Identifier	value		55369	1					
ANR	55433	Parameter	size_t value_len	3889:139:117197:117212	55369	5	True				
ANR	55434	ParameterType	size_t		55369	0					
ANR	55435	Identifier	value_len		55369	1					
ANR	55436	CFGEntryNode	ENTRY		55369		True				
ANR	55437	CFGExitNode	EXIT		55369		True				
ANR	55438	Symbol	value_len		55369						
ANR	55439	Symbol	tmp		55369						
ANR	55440	Symbol	scope		55369						
ANR	55441	Symbol	name		55369						
ANR	55442	Symbol	name_length		55369						
ANR	55443	Symbol	& tmp		55369						
ANR	55444	Symbol	value		55369						
ANR	55445	Symbol	object		55369						
ANR	55446	Function	zend_update_static_property	3899:0:117379:118316							
ANR	55447	FunctionDef	"zend_update_static_property (zend_class_entry * scope , const char * name , size_t name_length , zval * value)"		55446	0					
ANR	55448	CompoundStatement		3900:0:117506:118316	55446	0					
ANR	55449	IdentifierDeclStatement	zval * property ;	3901:1:117509:117523	55446	0	True				
ANR	55450	IdentifierDecl	* property		55446	0					
ANR	55451	IdentifierDeclType	zval *		55446	0					
ANR	55452	Identifier	property		55446	1					
ANR	55453	IdentifierDeclStatement	zend_class_entry * old_scope = EG ( scope ) ;	3902:1:117526:117565	55446	1	True				
ANR	55454	IdentifierDecl	* old_scope = EG ( scope )		55446	0					
ANR	55455	IdentifierDeclType	zend_class_entry *		55446	0					
ANR	55456	Identifier	old_scope		55446	1					
ANR	55457	AssignmentExpression	* old_scope = EG ( scope )		55446	2		=			
ANR	55458	Identifier	old_scope		55446	0					
ANR	55459	CallExpression	EG ( scope )		55446	1					
ANR	55460	Callee	EG		55446	0					
ANR	55461	Identifier	EG		55446	0					
ANR	55462	ArgumentList	scope		55446	1					
ANR	55463	Argument	scope		55446	0					
ANR	55464	Identifier	scope		55446	0					
ANR	55465	IdentifierDeclStatement	"zend_string * key = zend_string_init ( name , name_length , 0 ) ;"	3903:1:117568:117625	55446	2	True				
ANR	55466	IdentifierDecl	"* key = zend_string_init ( name , name_length , 0 )"		55446	0					
ANR	55467	IdentifierDeclType	zend_string *		55446	0					
ANR	55468	Identifier	key		55446	1					
ANR	55469	AssignmentExpression	"* key = zend_string_init ( name , name_length , 0 )"		55446	2		=			
ANR	55470	Identifier	key		55446	0					
ANR	55471	CallExpression	"zend_string_init ( name , name_length , 0 )"		55446	1					
ANR	55472	Callee	zend_string_init		55446	0					
ANR	55473	Identifier	zend_string_init		55446	0					
ANR	55474	ArgumentList	name		55446	1					
ANR	55475	Argument	name		55446	0					
ANR	55476	Identifier	name		55446	0					
ANR	55477	Argument	name_length		55446	1					
ANR	55478	Identifier	name_length		55446	0					
ANR	55479	Argument	0		55446	2					
ANR	55480	PrimaryExpression	0		55446	0					
ANR	55481	ExpressionStatement	EG ( scope ) = scope	3905:1:117629:117646	55446	3	True				
ANR	55482	AssignmentExpression	EG ( scope ) = scope		55446	0		=			
ANR	55483	CallExpression	EG ( scope )		55446	0					
ANR	55484	Callee	EG		55446	0					
ANR	55485	Identifier	EG		55446	0					
ANR	55486	ArgumentList	scope		55446	1					
ANR	55487	Argument	scope		55446	0					
ANR	55488	Identifier	scope		55446	0					
ANR	55489	Identifier	scope		55446	1					
ANR	55490	ExpressionStatement	"property = zend_std_get_static_property ( scope , key , 0 )"	3906:1:117649:117703	55446	4	True				
ANR	55491	AssignmentExpression	"property = zend_std_get_static_property ( scope , key , 0 )"		55446	0		=			
ANR	55492	Identifier	property		55446	0					
ANR	55493	CallExpression	"zend_std_get_static_property ( scope , key , 0 )"		55446	1					
ANR	55494	Callee	zend_std_get_static_property		55446	0					
ANR	55495	Identifier	zend_std_get_static_property		55446	0					
ANR	55496	ArgumentList	scope		55446	1					
ANR	55497	Argument	scope		55446	0					
ANR	55498	Identifier	scope		55446	0					
ANR	55499	Argument	key		55446	1					
ANR	55500	Identifier	key		55446	0					
ANR	55501	Argument	0		55446	2					
ANR	55502	PrimaryExpression	0		55446	0					
ANR	55503	ExpressionStatement	EG ( scope ) = old_scope	3907:1:117706:117727	55446	5	True				
ANR	55504	AssignmentExpression	EG ( scope ) = old_scope		55446	0		=			
ANR	55505	CallExpression	EG ( scope )		55446	0					
ANR	55506	Callee	EG		55446	0					
ANR	55507	Identifier	EG		55446	0					
ANR	55508	ArgumentList	scope		55446	1					
ANR	55509	Argument	scope		55446	0					
ANR	55510	Identifier	scope		55446	0					
ANR	55511	Identifier	old_scope		55446	1					
ANR	55512	ExpressionStatement	zend_string_free ( key )	3908:1:117730:117751	55446	6	True				
ANR	55513	CallExpression	zend_string_free ( key )		55446	0					
ANR	55514	Callee	zend_string_free		55446	0					
ANR	55515	Identifier	zend_string_free		55446	0					
ANR	55516	ArgumentList	key		55446	1					
ANR	55517	Argument	key		55446	0					
ANR	55518	Identifier	key		55446	0					
ANR	55519	IfStatement	if ( ! property )		55446	7					
ANR	55520	Condition	! property	3909:5:117758:117766	55446	0	True				
ANR	55521	UnaryOperationExpression	! property		55446	0					
ANR	55522	UnaryOperator	!		55446	0					
ANR	55523	Identifier	property		55446	1					
ANR	55524	CompoundStatement		10:16:262:262	55446	1					
ANR	55525	ReturnStatement	return FAILURE ;	3910:2:117773:117787	55446	0	True				
ANR	55526	Identifier	FAILURE		55446	0					
ANR	55527	ElseStatement	else		55446	0					
ANR	55528	CompoundStatement		12:8:290:290	55446	0					
ANR	55529	IfStatement	if ( property != value )		55446	0					
ANR	55530	Condition	property != value	3912:6:117805:117821	55446	0	True				
ANR	55531	EqualityExpression	property != value		55446	0		!=			
ANR	55532	Identifier	property		55446	0					
ANR	55533	Identifier	value		55446	1					
ANR	55534	CompoundStatement		13:25:317:317	55446	1					
ANR	55535	IfStatement	if ( Z_ISREF_P ( property ) )		55446	0					
ANR	55536	Condition	Z_ISREF_P ( property )	3913:7:117833:117851	55446	0	True				
ANR	55537	CallExpression	Z_ISREF_P ( property )		55446	0					
ANR	55538	Callee	Z_ISREF_P		55446	0					
ANR	55539	Identifier	Z_ISREF_P		55446	0					
ANR	55540	ArgumentList	property		55446	1					
ANR	55541	Argument	property		55446	0					
ANR	55542	Identifier	property		55446	0					
ANR	55543	CompoundStatement		14:28:347:347	55446	1					
ANR	55544	ExpressionStatement	zval_dtor ( property )	3914:4:117860:117879	55446	0	True				
ANR	55545	CallExpression	zval_dtor ( property )		55446	0					
ANR	55546	Callee	zval_dtor		55446	0					
ANR	55547	Identifier	zval_dtor		55446	0					
ANR	55548	ArgumentList	property		55446	1					
ANR	55549	Argument	property		55446	0					
ANR	55550	Identifier	property		55446	0					
ANR	55551	ExpressionStatement	"ZVAL_COPY_VALUE ( property , value )"	3915:4:117885:117917	55446	1	True				
ANR	55552	CallExpression	"ZVAL_COPY_VALUE ( property , value )"		55446	0					
ANR	55553	Callee	ZVAL_COPY_VALUE		55446	0					
ANR	55554	Identifier	ZVAL_COPY_VALUE		55446	0					
ANR	55555	ArgumentList	property		55446	1					
ANR	55556	Argument	property		55446	0					
ANR	55557	Identifier	property		55446	0					
ANR	55558	Argument	value		55446	1					
ANR	55559	Identifier	value		55446	0					
ANR	55560	IfStatement	if ( Z_REFCOUNTED_P ( value ) && Z_REFCOUNT_P ( value ) > 0 )		55446	2					
ANR	55561	Condition	Z_REFCOUNTED_P ( value ) && Z_REFCOUNT_P ( value ) > 0	3916:8:117927:117974	55446	0	True				
ANR	55562	AndExpression	Z_REFCOUNTED_P ( value ) && Z_REFCOUNT_P ( value ) > 0		55446	0		&&			
ANR	55563	CallExpression	Z_REFCOUNTED_P ( value )		55446	0					
ANR	55564	Callee	Z_REFCOUNTED_P		55446	0					
ANR	55565	Identifier	Z_REFCOUNTED_P		55446	0					
ANR	55566	ArgumentList	value		55446	1					
ANR	55567	Argument	value		55446	0					
ANR	55568	Identifier	value		55446	0					
ANR	55569	RelationalExpression	Z_REFCOUNT_P ( value ) > 0		55446	1		>			
ANR	55570	CallExpression	Z_REFCOUNT_P ( value )		55446	0					
ANR	55571	Callee	Z_REFCOUNT_P		55446	0					
ANR	55572	Identifier	Z_REFCOUNT_P		55446	0					
ANR	55573	ArgumentList	value		55446	1					
ANR	55574	Argument	value		55446	0					
ANR	55575	Identifier	value		55446	0					
ANR	55576	PrimaryExpression	0		55446	1					
ANR	55577	CompoundStatement		17:58:470:470	55446	1					
ANR	55578	ExpressionStatement	zval_opt_copy_ctor ( property )	3917:5:117984:118012	55446	0	True				
ANR	55579	CallExpression	zval_opt_copy_ctor ( property )		55446	0					
ANR	55580	Callee	zval_opt_copy_ctor		55446	0					
ANR	55581	Identifier	zval_opt_copy_ctor		55446	0					
ANR	55582	ArgumentList	property		55446	1					
ANR	55583	Argument	property		55446	0					
ANR	55584	Identifier	property		55446	0					
ANR	55585	ElseStatement	else		55446	0					
ANR	55586	CompoundStatement		21:4:529:541	55446	0					
ANR	55587	IdentifierDeclStatement	zval garbage ;	3920:4:118036:118048	55446	0	True				
ANR	55588	IdentifierDecl	garbage		55446	0					
ANR	55589	IdentifierDeclType	zval		55446	0					
ANR	55590	Identifier	garbage		55446	1					
ANR	55591	ExpressionStatement	"ZVAL_COPY_VALUE ( & garbage , property )"	3922:4:118055:118090	55446	1	True				
ANR	55592	CallExpression	"ZVAL_COPY_VALUE ( & garbage , property )"		55446	0					
ANR	55593	Callee	ZVAL_COPY_VALUE		55446	0					
ANR	55594	Identifier	ZVAL_COPY_VALUE		55446	0					
ANR	55595	ArgumentList	& garbage		55446	1					
ANR	55596	Argument	& garbage		55446	0					
ANR	55597	UnaryOperationExpression	& garbage		55446	0					
ANR	55598	UnaryOperator	&		55446	0					
ANR	55599	Identifier	garbage		55446	1					
ANR	55600	Argument	property		55446	1					
ANR	55601	Identifier	property		55446	0					
ANR	55602	IfStatement	if ( Z_REFCOUNTED_P ( value ) )		55446	2					
ANR	55603	Condition	Z_REFCOUNTED_P ( value )	3923:8:118100:118120	55446	0	True				
ANR	55604	CallExpression	Z_REFCOUNTED_P ( value )		55446	0					
ANR	55605	Callee	Z_REFCOUNTED_P		55446	0					
ANR	55606	Identifier	Z_REFCOUNTED_P		55446	0					
ANR	55607	ArgumentList	value		55446	1					
ANR	55608	Argument	value		55446	0					
ANR	55609	Identifier	value		55446	0					
ANR	55610	CompoundStatement		24:31:616:616	55446	1					
ANR	55611	ExpressionStatement	Z_ADDREF_P ( value )	3924:5:118130:118147	55446	0	True				
ANR	55612	CallExpression	Z_ADDREF_P ( value )		55446	0					
ANR	55613	Callee	Z_ADDREF_P		55446	0					
ANR	55614	Identifier	Z_ADDREF_P		55446	0					
ANR	55615	ArgumentList	value		55446	1					
ANR	55616	Argument	value		55446	0					
ANR	55617	Identifier	value		55446	0					
ANR	55618	IfStatement	if ( Z_ISREF_P ( value ) )		55446	1					
ANR	55619	Condition	Z_ISREF_P ( value )	3925:9:118158:118173	55446	0	True				
ANR	55620	CallExpression	Z_ISREF_P ( value )		55446	0					
ANR	55621	Callee	Z_ISREF_P		55446	0					
ANR	55622	Identifier	Z_ISREF_P		55446	0					
ANR	55623	ArgumentList	value		55446	1					
ANR	55624	Argument	value		55446	0					
ANR	55625	Identifier	value		55446	0					
ANR	55626	CompoundStatement		26:27:669:669	55446	1					
ANR	55627	ExpressionStatement	SEPARATE_ZVAL ( value )	3926:6:118184:118204	55446	0	True				
ANR	55628	CallExpression	SEPARATE_ZVAL ( value )		55446	0					
ANR	55629	Callee	SEPARATE_ZVAL		55446	0					
ANR	55630	Identifier	SEPARATE_ZVAL		55446	0					
ANR	55631	ArgumentList	value		55446	1					
ANR	55632	Argument	value		55446	0					
ANR	55633	Identifier	value		55446	0					
ANR	55634	ExpressionStatement	"ZVAL_COPY_VALUE ( property , value )"	3929:4:118223:118255	55446	3	True				
ANR	55635	CallExpression	"ZVAL_COPY_VALUE ( property , value )"		55446	0					
ANR	55636	Callee	ZVAL_COPY_VALUE		55446	0					
ANR	55637	Identifier	ZVAL_COPY_VALUE		55446	0					
ANR	55638	ArgumentList	property		55446	1					
ANR	55639	Argument	property		55446	0					
ANR	55640	Identifier	property		55446	0					
ANR	55641	Argument	value		55446	1					
ANR	55642	Identifier	value		55446	0					
ANR	55643	ExpressionStatement	zval_ptr_dtor ( & garbage )	3930:4:118261:118284	55446	4	True				
ANR	55644	CallExpression	zval_ptr_dtor ( & garbage )		55446	0					
ANR	55645	Callee	zval_ptr_dtor		55446	0					
ANR	55646	Identifier	zval_ptr_dtor		55446	0					
ANR	55647	ArgumentList	& garbage		55446	1					
ANR	55648	Argument	& garbage		55446	0					
ANR	55649	UnaryOperationExpression	& garbage		55446	0					
ANR	55650	UnaryOperator	&		55446	0					
ANR	55651	Identifier	garbage		55446	1					
ANR	55652	ReturnStatement	return SUCCESS ;	3933:2:118297:118311	55446	1	True				
ANR	55653	Identifier	SUCCESS		55446	0					
ANR	55654	ReturnType	ZEND_API int		55446	1					
ANR	55655	Identifier	zend_update_static_property		55446	2					
ANR	55656	ParameterList	"zend_class_entry * scope , const char * name , size_t name_length , zval * value"		55446	3					
ANR	55657	Parameter	zend_class_entry * scope	3899:41:117420:117442	55446	0	True				
ANR	55658	ParameterType	zend_class_entry *		55446	0					
ANR	55659	Identifier	scope		55446	1					
ANR	55660	Parameter	const char * name	3899:66:117445:117460	55446	1	True				
ANR	55661	ParameterType	const char *		55446	0					
ANR	55662	Identifier	name		55446	1					
ANR	55663	Parameter	size_t name_length	3899:84:117463:117480	55446	2	True				
ANR	55664	ParameterType	size_t		55446	0					
ANR	55665	Identifier	name_length		55446	1					
ANR	55666	Parameter	zval * value	3899:104:117483:117493	55446	3	True				
ANR	55667	ParameterType	zval *		55446	0					
ANR	55668	Identifier	value		55446	1					
ANR	55669	CFGEntryNode	ENTRY		55446		True				
ANR	55670	CFGExitNode	EXIT		55446		True				
ANR	55671	Symbol	EG		55446						
ANR	55672	Symbol	SUCCESS		55446						
ANR	55673	Symbol	old_scope		55446						
ANR	55674	Symbol	garbage		55446						
ANR	55675	Symbol	name_length		55446						
ANR	55676	Symbol	FAILURE		55446						
ANR	55677	Symbol	Z_REFCOUNT_P		55446						
ANR	55678	Symbol	zend_std_get_static_property		55446						
ANR	55679	Symbol	zend_string_init		55446						
ANR	55680	Symbol	& garbage		55446						
ANR	55681	Symbol	scope		55446						
ANR	55682	Symbol	name		55446						
ANR	55683	Symbol	property		55446						
ANR	55684	Symbol	Z_REFCOUNTED_P		55446						
ANR	55685	Symbol	value		55446						
ANR	55686	Symbol	key		55446						
ANR	55687	Symbol	Z_ISREF_P		55446						
ANR	55688	Function	zend_update_static_property_null	3938:0:118329:118549							
ANR	55689	FunctionDef	"zend_update_static_property_null (zend_class_entry * scope , const char * name , size_t name_length)"		55688	0					
ANR	55690	CompoundStatement		3939:0:118448:118549	55688	0					
ANR	55691	IdentifierDeclStatement	zval tmp ;	3940:1:118451:118459	55688	0	True				
ANR	55692	IdentifierDecl	tmp		55688	0					
ANR	55693	IdentifierDeclType	zval		55688	0					
ANR	55694	Identifier	tmp		55688	1					
ANR	55695	ExpressionStatement	ZVAL_NULL ( & tmp )	3942:1:118463:118478	55688	1	True				
ANR	55696	CallExpression	ZVAL_NULL ( & tmp )		55688	0					
ANR	55697	Callee	ZVAL_NULL		55688	0					
ANR	55698	Identifier	ZVAL_NULL		55688	0					
ANR	55699	ArgumentList	& tmp		55688	1					
ANR	55700	Argument	& tmp		55688	0					
ANR	55701	UnaryOperationExpression	& tmp		55688	0					
ANR	55702	UnaryOperator	&		55688	0					
ANR	55703	Identifier	tmp		55688	1					
ANR	55704	ReturnStatement	"return zend_update_static_property ( scope , name , name_length , & tmp ) ;"	3943:1:118481:118547	55688	2	True				
ANR	55705	CallExpression	"zend_update_static_property ( scope , name , name_length , & tmp )"		55688	0					
ANR	55706	Callee	zend_update_static_property		55688	0					
ANR	55707	Identifier	zend_update_static_property		55688	0					
ANR	55708	ArgumentList	scope		55688	1					
ANR	55709	Argument	scope		55688	0					
ANR	55710	Identifier	scope		55688	0					
ANR	55711	Argument	name		55688	1					
ANR	55712	Identifier	name		55688	0					
ANR	55713	Argument	name_length		55688	2					
ANR	55714	Identifier	name_length		55688	0					
ANR	55715	Argument	& tmp		55688	3					
ANR	55716	UnaryOperationExpression	& tmp		55688	0					
ANR	55717	UnaryOperator	&		55688	0					
ANR	55718	Identifier	tmp		55688	1					
ANR	55719	ReturnType	ZEND_API int		55688	1					
ANR	55720	Identifier	zend_update_static_property_null		55688	2					
ANR	55721	ParameterList	"zend_class_entry * scope , const char * name , size_t name_length"		55688	3					
ANR	55722	Parameter	zend_class_entry * scope	3938:46:118375:118397	55688	0	True				
ANR	55723	ParameterType	zend_class_entry *		55688	0					
ANR	55724	Identifier	scope		55688	1					
ANR	55725	Parameter	const char * name	3938:71:118400:118415	55688	1	True				
ANR	55726	ParameterType	const char *		55688	0					
ANR	55727	Identifier	name		55688	1					
ANR	55728	Parameter	size_t name_length	3938:89:118418:118435	55688	2	True				
ANR	55729	ParameterType	size_t		55688	0					
ANR	55730	Identifier	name_length		55688	1					
ANR	55731	CFGEntryNode	ENTRY		55688		True				
ANR	55732	CFGExitNode	EXIT		55688		True				
ANR	55733	Symbol	tmp		55688						
ANR	55734	Symbol	scope		55688						
ANR	55735	Symbol	name		55688						
ANR	55736	Symbol	name_length		55688						
ANR	55737	Symbol	& tmp		55688						
ANR	55738	Symbol	zend_update_static_property		55688						
ANR	55739	Function	zend_update_static_property_bool	3947:0:118562:118806							
ANR	55740	FunctionDef	"zend_update_static_property_bool (zend_class_entry * scope , const char * name , size_t name_length , zend_long value)"		55739	0					
ANR	55741	CompoundStatement		3948:0:118698:118806	55739	0					
ANR	55742	IdentifierDeclStatement	zval tmp ;	3949:1:118701:118709	55739	0	True				
ANR	55743	IdentifierDecl	tmp		55739	0					
ANR	55744	IdentifierDeclType	zval		55739	0					
ANR	55745	Identifier	tmp		55739	1					
ANR	55746	ExpressionStatement	"ZVAL_BOOL ( & tmp , value )"	3951:1:118713:118735	55739	1	True				
ANR	55747	CallExpression	"ZVAL_BOOL ( & tmp , value )"		55739	0					
ANR	55748	Callee	ZVAL_BOOL		55739	0					
ANR	55749	Identifier	ZVAL_BOOL		55739	0					
ANR	55750	ArgumentList	& tmp		55739	1					
ANR	55751	Argument	& tmp		55739	0					
ANR	55752	UnaryOperationExpression	& tmp		55739	0					
ANR	55753	UnaryOperator	&		55739	0					
ANR	55754	Identifier	tmp		55739	1					
ANR	55755	Argument	value		55739	1					
ANR	55756	Identifier	value		55739	0					
ANR	55757	ReturnStatement	"return zend_update_static_property ( scope , name , name_length , & tmp ) ;"	3952:1:118738:118804	55739	2	True				
ANR	55758	CallExpression	"zend_update_static_property ( scope , name , name_length , & tmp )"		55739	0					
ANR	55759	Callee	zend_update_static_property		55739	0					
ANR	55760	Identifier	zend_update_static_property		55739	0					
ANR	55761	ArgumentList	scope		55739	1					
ANR	55762	Argument	scope		55739	0					
ANR	55763	Identifier	scope		55739	0					
ANR	55764	Argument	name		55739	1					
ANR	55765	Identifier	name		55739	0					
ANR	55766	Argument	name_length		55739	2					
ANR	55767	Identifier	name_length		55739	0					
ANR	55768	Argument	& tmp		55739	3					
ANR	55769	UnaryOperationExpression	& tmp		55739	0					
ANR	55770	UnaryOperator	&		55739	0					
ANR	55771	Identifier	tmp		55739	1					
ANR	55772	ReturnType	ZEND_API int		55739	1					
ANR	55773	Identifier	zend_update_static_property_bool		55739	2					
ANR	55774	ParameterList	"zend_class_entry * scope , const char * name , size_t name_length , zend_long value"		55739	3					
ANR	55775	Parameter	zend_class_entry * scope	3947:46:118608:118630	55739	0	True				
ANR	55776	ParameterType	zend_class_entry *		55739	0					
ANR	55777	Identifier	scope		55739	1					
ANR	55778	Parameter	const char * name	3947:71:118633:118648	55739	1	True				
ANR	55779	ParameterType	const char *		55739	0					
ANR	55780	Identifier	name		55739	1					
ANR	55781	Parameter	size_t name_length	3947:89:118651:118668	55739	2	True				
ANR	55782	ParameterType	size_t		55739	0					
ANR	55783	Identifier	name_length		55739	1					
ANR	55784	Parameter	zend_long value	3947:109:118671:118685	55739	3	True				
ANR	55785	ParameterType	zend_long		55739	0					
ANR	55786	Identifier	value		55739	1					
ANR	55787	CFGEntryNode	ENTRY		55739		True				
ANR	55788	CFGExitNode	EXIT		55739		True				
ANR	55789	Symbol	tmp		55739						
ANR	55790	Symbol	scope		55739						
ANR	55791	Symbol	name		55739						
ANR	55792	Symbol	name_length		55739						
ANR	55793	Symbol	& tmp		55739						
ANR	55794	Symbol	value		55739						
ANR	55795	Symbol	zend_update_static_property		55739						
ANR	55796	Function	zend_update_static_property_long	3956:0:118819:119063							
ANR	55797	FunctionDef	"zend_update_static_property_long (zend_class_entry * scope , const char * name , size_t name_length , zend_long value)"		55796	0					
ANR	55798	CompoundStatement		3957:0:118955:119063	55796	0					
ANR	55799	IdentifierDeclStatement	zval tmp ;	3958:1:118958:118966	55796	0	True				
ANR	55800	IdentifierDecl	tmp		55796	0					
ANR	55801	IdentifierDeclType	zval		55796	0					
ANR	55802	Identifier	tmp		55796	1					
ANR	55803	ExpressionStatement	"ZVAL_LONG ( & tmp , value )"	3960:1:118970:118992	55796	1	True				
ANR	55804	CallExpression	"ZVAL_LONG ( & tmp , value )"		55796	0					
ANR	55805	Callee	ZVAL_LONG		55796	0					
ANR	55806	Identifier	ZVAL_LONG		55796	0					
ANR	55807	ArgumentList	& tmp		55796	1					
ANR	55808	Argument	& tmp		55796	0					
ANR	55809	UnaryOperationExpression	& tmp		55796	0					
ANR	55810	UnaryOperator	&		55796	0					
ANR	55811	Identifier	tmp		55796	1					
ANR	55812	Argument	value		55796	1					
ANR	55813	Identifier	value		55796	0					
ANR	55814	ReturnStatement	"return zend_update_static_property ( scope , name , name_length , & tmp ) ;"	3961:1:118995:119061	55796	2	True				
ANR	55815	CallExpression	"zend_update_static_property ( scope , name , name_length , & tmp )"		55796	0					
ANR	55816	Callee	zend_update_static_property		55796	0					
ANR	55817	Identifier	zend_update_static_property		55796	0					
ANR	55818	ArgumentList	scope		55796	1					
ANR	55819	Argument	scope		55796	0					
ANR	55820	Identifier	scope		55796	0					
ANR	55821	Argument	name		55796	1					
ANR	55822	Identifier	name		55796	0					
ANR	55823	Argument	name_length		55796	2					
ANR	55824	Identifier	name_length		55796	0					
ANR	55825	Argument	& tmp		55796	3					
ANR	55826	UnaryOperationExpression	& tmp		55796	0					
ANR	55827	UnaryOperator	&		55796	0					
ANR	55828	Identifier	tmp		55796	1					
ANR	55829	ReturnType	ZEND_API int		55796	1					
ANR	55830	Identifier	zend_update_static_property_long		55796	2					
ANR	55831	ParameterList	"zend_class_entry * scope , const char * name , size_t name_length , zend_long value"		55796	3					
ANR	55832	Parameter	zend_class_entry * scope	3956:46:118865:118887	55796	0	True				
ANR	55833	ParameterType	zend_class_entry *		55796	0					
ANR	55834	Identifier	scope		55796	1					
ANR	55835	Parameter	const char * name	3956:71:118890:118905	55796	1	True				
ANR	55836	ParameterType	const char *		55796	0					
ANR	55837	Identifier	name		55796	1					
ANR	55838	Parameter	size_t name_length	3956:89:118908:118925	55796	2	True				
ANR	55839	ParameterType	size_t		55796	0					
ANR	55840	Identifier	name_length		55796	1					
ANR	55841	Parameter	zend_long value	3956:109:118928:118942	55796	3	True				
ANR	55842	ParameterType	zend_long		55796	0					
ANR	55843	Identifier	value		55796	1					
ANR	55844	CFGEntryNode	ENTRY		55796		True				
ANR	55845	CFGExitNode	EXIT		55796		True				
ANR	55846	Symbol	tmp		55796						
ANR	55847	Symbol	scope		55796						
ANR	55848	Symbol	name		55796						
ANR	55849	Symbol	name_length		55796						
ANR	55850	Symbol	& tmp		55796						
ANR	55851	Symbol	value		55796						
ANR	55852	Symbol	zend_update_static_property		55796						
ANR	55853	Function	zend_update_static_property_double	3965:0:119076:119321							
ANR	55854	FunctionDef	"zend_update_static_property_double (zend_class_entry * scope , const char * name , size_t name_length , double value)"		55853	0					
ANR	55855	CompoundStatement		3966:0:119211:119321	55853	0					
ANR	55856	IdentifierDeclStatement	zval tmp ;	3967:1:119214:119222	55853	0	True				
ANR	55857	IdentifierDecl	tmp		55853	0					
ANR	55858	IdentifierDeclType	zval		55853	0					
ANR	55859	Identifier	tmp		55853	1					
ANR	55860	ExpressionStatement	"ZVAL_DOUBLE ( & tmp , value )"	3969:1:119226:119250	55853	1	True				
ANR	55861	CallExpression	"ZVAL_DOUBLE ( & tmp , value )"		55853	0					
ANR	55862	Callee	ZVAL_DOUBLE		55853	0					
ANR	55863	Identifier	ZVAL_DOUBLE		55853	0					
ANR	55864	ArgumentList	& tmp		55853	1					
ANR	55865	Argument	& tmp		55853	0					
ANR	55866	UnaryOperationExpression	& tmp		55853	0					
ANR	55867	UnaryOperator	&		55853	0					
ANR	55868	Identifier	tmp		55853	1					
ANR	55869	Argument	value		55853	1					
ANR	55870	Identifier	value		55853	0					
ANR	55871	ReturnStatement	"return zend_update_static_property ( scope , name , name_length , & tmp ) ;"	3970:1:119253:119319	55853	2	True				
ANR	55872	CallExpression	"zend_update_static_property ( scope , name , name_length , & tmp )"		55853	0					
ANR	55873	Callee	zend_update_static_property		55853	0					
ANR	55874	Identifier	zend_update_static_property		55853	0					
ANR	55875	ArgumentList	scope		55853	1					
ANR	55876	Argument	scope		55853	0					
ANR	55877	Identifier	scope		55853	0					
ANR	55878	Argument	name		55853	1					
ANR	55879	Identifier	name		55853	0					
ANR	55880	Argument	name_length		55853	2					
ANR	55881	Identifier	name_length		55853	0					
ANR	55882	Argument	& tmp		55853	3					
ANR	55883	UnaryOperationExpression	& tmp		55853	0					
ANR	55884	UnaryOperator	&		55853	0					
ANR	55885	Identifier	tmp		55853	1					
ANR	55886	ReturnType	ZEND_API int		55853	1					
ANR	55887	Identifier	zend_update_static_property_double		55853	2					
ANR	55888	ParameterList	"zend_class_entry * scope , const char * name , size_t name_length , double value"		55853	3					
ANR	55889	Parameter	zend_class_entry * scope	3965:48:119124:119146	55853	0	True				
ANR	55890	ParameterType	zend_class_entry *		55853	0					
ANR	55891	Identifier	scope		55853	1					
ANR	55892	Parameter	const char * name	3965:73:119149:119164	55853	1	True				
ANR	55893	ParameterType	const char *		55853	0					
ANR	55894	Identifier	name		55853	1					
ANR	55895	Parameter	size_t name_length	3965:91:119167:119184	55853	2	True				
ANR	55896	ParameterType	size_t		55853	0					
ANR	55897	Identifier	name_length		55853	1					
ANR	55898	Parameter	double value	3965:111:119187:119198	55853	3	True				
ANR	55899	ParameterType	double		55853	0					
ANR	55900	Identifier	value		55853	1					
ANR	55901	CFGEntryNode	ENTRY		55853		True				
ANR	55902	CFGExitNode	EXIT		55853		True				
ANR	55903	Symbol	tmp		55853						
ANR	55904	Symbol	scope		55853						
ANR	55905	Symbol	name		55853						
ANR	55906	Symbol	name_length		55853						
ANR	55907	Symbol	& tmp		55853						
ANR	55908	Symbol	value		55853						
ANR	55909	Symbol	zend_update_static_property		55853						
ANR	55910	Function	zend_update_static_property_string	3974:0:119334:119609							
ANR	55911	FunctionDef	"zend_update_static_property_string (zend_class_entry * scope , const char * name , size_t name_length , const char * value)"		55910	0					
ANR	55912	CompoundStatement		3975:0:119474:119609	55910	0					
ANR	55913	IdentifierDeclStatement	zval tmp ;	3976:1:119477:119485	55910	0	True				
ANR	55914	IdentifierDecl	tmp		55910	0					
ANR	55915	IdentifierDeclType	zval		55910	0					
ANR	55916	Identifier	tmp		55910	1					
ANR	55917	ExpressionStatement	"ZVAL_STRING ( & tmp , value )"	3978:1:119489:119513	55910	1	True				
ANR	55918	CallExpression	"ZVAL_STRING ( & tmp , value )"		55910	0					
ANR	55919	Callee	ZVAL_STRING		55910	0					
ANR	55920	Identifier	ZVAL_STRING		55910	0					
ANR	55921	ArgumentList	& tmp		55910	1					
ANR	55922	Argument	& tmp		55910	0					
ANR	55923	UnaryOperationExpression	& tmp		55910	0					
ANR	55924	UnaryOperator	&		55910	0					
ANR	55925	Identifier	tmp		55910	1					
ANR	55926	Argument	value		55910	1					
ANR	55927	Identifier	value		55910	0					
ANR	55928	ExpressionStatement	"Z_SET_REFCOUNT ( tmp , 0 )"	3979:1:119516:119538	55910	2	True				
ANR	55929	CallExpression	"Z_SET_REFCOUNT ( tmp , 0 )"		55910	0					
ANR	55930	Callee	Z_SET_REFCOUNT		55910	0					
ANR	55931	Identifier	Z_SET_REFCOUNT		55910	0					
ANR	55932	ArgumentList	tmp		55910	1					
ANR	55933	Argument	tmp		55910	0					
ANR	55934	Identifier	tmp		55910	0					
ANR	55935	Argument	0		55910	1					
ANR	55936	PrimaryExpression	0		55910	0					
ANR	55937	ReturnStatement	"return zend_update_static_property ( scope , name , name_length , & tmp ) ;"	3980:1:119541:119607	55910	3	True				
ANR	55938	CallExpression	"zend_update_static_property ( scope , name , name_length , & tmp )"		55910	0					
ANR	55939	Callee	zend_update_static_property		55910	0					
ANR	55940	Identifier	zend_update_static_property		55910	0					
ANR	55941	ArgumentList	scope		55910	1					
ANR	55942	Argument	scope		55910	0					
ANR	55943	Identifier	scope		55910	0					
ANR	55944	Argument	name		55910	1					
ANR	55945	Identifier	name		55910	0					
ANR	55946	Argument	name_length		55910	2					
ANR	55947	Identifier	name_length		55910	0					
ANR	55948	Argument	& tmp		55910	3					
ANR	55949	UnaryOperationExpression	& tmp		55910	0					
ANR	55950	UnaryOperator	&		55910	0					
ANR	55951	Identifier	tmp		55910	1					
ANR	55952	ReturnType	ZEND_API int		55910	1					
ANR	55953	Identifier	zend_update_static_property_string		55910	2					
ANR	55954	ParameterList	"zend_class_entry * scope , const char * name , size_t name_length , const char * value"		55910	3					
ANR	55955	Parameter	zend_class_entry * scope	3974:48:119382:119404	55910	0	True				
ANR	55956	ParameterType	zend_class_entry *		55910	0					
ANR	55957	Identifier	scope		55910	1					
ANR	55958	Parameter	const char * name	3974:73:119407:119422	55910	1	True				
ANR	55959	ParameterType	const char *		55910	0					
ANR	55960	Identifier	name		55910	1					
ANR	55961	Parameter	size_t name_length	3974:91:119425:119442	55910	2	True				
ANR	55962	ParameterType	size_t		55910	0					
ANR	55963	Identifier	name_length		55910	1					
ANR	55964	Parameter	const char * value	3974:111:119445:119461	55910	3	True				
ANR	55965	ParameterType	const char *		55910	0					
ANR	55966	Identifier	value		55910	1					
ANR	55967	CFGEntryNode	ENTRY		55910		True				
ANR	55968	CFGExitNode	EXIT		55910		True				
ANR	55969	Symbol	tmp		55910						
ANR	55970	Symbol	scope		55910						
ANR	55971	Symbol	name		55910						
ANR	55972	Symbol	name_length		55910						
ANR	55973	Symbol	& tmp		55910						
ANR	55974	Symbol	value		55910						
ANR	55975	Symbol	zend_update_static_property		55910						
ANR	55976	Function	zend_update_static_property_stringl	3984:0:119622:119928							
ANR	55977	FunctionDef	"zend_update_static_property_stringl (zend_class_entry * scope , const char * name , size_t name_length , const char * value , size_t value_len)"		55976	0					
ANR	55978	CompoundStatement		3985:0:119781:119928	55976	0					
ANR	55979	IdentifierDeclStatement	zval tmp ;	3986:1:119784:119792	55976	0	True				
ANR	55980	IdentifierDecl	tmp		55976	0					
ANR	55981	IdentifierDeclType	zval		55976	0					
ANR	55982	Identifier	tmp		55976	1					
ANR	55983	ExpressionStatement	"ZVAL_STRINGL ( & tmp , value , value_len )"	3988:1:119796:119832	55976	1	True				
ANR	55984	CallExpression	"ZVAL_STRINGL ( & tmp , value , value_len )"		55976	0					
ANR	55985	Callee	ZVAL_STRINGL		55976	0					
ANR	55986	Identifier	ZVAL_STRINGL		55976	0					
ANR	55987	ArgumentList	& tmp		55976	1					
ANR	55988	Argument	& tmp		55976	0					
ANR	55989	UnaryOperationExpression	& tmp		55976	0					
ANR	55990	UnaryOperator	&		55976	0					
ANR	55991	Identifier	tmp		55976	1					
ANR	55992	Argument	value		55976	1					
ANR	55993	Identifier	value		55976	0					
ANR	55994	Argument	value_len		55976	2					
ANR	55995	Identifier	value_len		55976	0					
ANR	55996	ExpressionStatement	"Z_SET_REFCOUNT ( tmp , 0 )"	3989:1:119835:119857	55976	2	True				
ANR	55997	CallExpression	"Z_SET_REFCOUNT ( tmp , 0 )"		55976	0					
ANR	55998	Callee	Z_SET_REFCOUNT		55976	0					
ANR	55999	Identifier	Z_SET_REFCOUNT		55976	0					
ANR	56000	ArgumentList	tmp		55976	1					
ANR	56001	Argument	tmp		55976	0					
ANR	56002	Identifier	tmp		55976	0					
ANR	56003	Argument	0		55976	1					
ANR	56004	PrimaryExpression	0		55976	0					
ANR	56005	ReturnStatement	"return zend_update_static_property ( scope , name , name_length , & tmp ) ;"	3990:1:119860:119926	55976	3	True				
ANR	56006	CallExpression	"zend_update_static_property ( scope , name , name_length , & tmp )"		55976	0					
ANR	56007	Callee	zend_update_static_property		55976	0					
ANR	56008	Identifier	zend_update_static_property		55976	0					
ANR	56009	ArgumentList	scope		55976	1					
ANR	56010	Argument	scope		55976	0					
ANR	56011	Identifier	scope		55976	0					
ANR	56012	Argument	name		55976	1					
ANR	56013	Identifier	name		55976	0					
ANR	56014	Argument	name_length		55976	2					
ANR	56015	Identifier	name_length		55976	0					
ANR	56016	Argument	& tmp		55976	3					
ANR	56017	UnaryOperationExpression	& tmp		55976	0					
ANR	56018	UnaryOperator	&		55976	0					
ANR	56019	Identifier	tmp		55976	1					
ANR	56020	ReturnType	ZEND_API int		55976	1					
ANR	56021	Identifier	zend_update_static_property_stringl		55976	2					
ANR	56022	ParameterList	"zend_class_entry * scope , const char * name , size_t name_length , const char * value , size_t value_len"		55976	3					
ANR	56023	Parameter	zend_class_entry * scope	3984:49:119671:119693	55976	0	True				
ANR	56024	ParameterType	zend_class_entry *		55976	0					
ANR	56025	Identifier	scope		55976	1					
ANR	56026	Parameter	const char * name	3984:74:119696:119711	55976	1	True				
ANR	56027	ParameterType	const char *		55976	0					
ANR	56028	Identifier	name		55976	1					
ANR	56029	Parameter	size_t name_length	3984:92:119714:119731	55976	2	True				
ANR	56030	ParameterType	size_t		55976	0					
ANR	56031	Identifier	name_length		55976	1					
ANR	56032	Parameter	const char * value	3984:112:119734:119750	55976	3	True				
ANR	56033	ParameterType	const char *		55976	0					
ANR	56034	Identifier	value		55976	1					
ANR	56035	Parameter	size_t value_len	3984:131:119753:119768	55976	4	True				
ANR	56036	ParameterType	size_t		55976	0					
ANR	56037	Identifier	value_len		55976	1					
ANR	56038	CFGEntryNode	ENTRY		55976		True				
ANR	56039	CFGExitNode	EXIT		55976		True				
ANR	56040	Symbol	value_len		55976						
ANR	56041	Symbol	tmp		55976						
ANR	56042	Symbol	scope		55976						
ANR	56043	Symbol	name		55976						
ANR	56044	Symbol	name_length		55976						
ANR	56045	Symbol	& tmp		55976						
ANR	56046	Symbol	value		55976						
ANR	56047	Symbol	zend_update_static_property		55976						
ANR	56048	Function	zend_read_property	3994:0:119941:120559							
ANR	56049	FunctionDef	"zend_read_property (zend_class_entry * scope , zval * object , const char * name , size_t name_length , zend_bool silent , zval * rv)"		56048	0					
ANR	56050	CompoundStatement		3995:0:120090:120559	56048	0					
ANR	56051	IdentifierDeclStatement	"zval property , * value ;"	3996:1:120093:120114	56048	0	True				
ANR	56052	IdentifierDecl	property		56048	0					
ANR	56053	IdentifierDeclType	zval		56048	0					
ANR	56054	Identifier	property		56048	1					
ANR	56055	IdentifierDecl	* value		56048	1					
ANR	56056	IdentifierDeclType	zval *		56048	0					
ANR	56057	Identifier	value		56048	1					
ANR	56058	IdentifierDeclStatement	zend_class_entry * old_scope = EG ( scope ) ;	3997:1:120117:120156	56048	1	True				
ANR	56059	IdentifierDecl	* old_scope = EG ( scope )		56048	0					
ANR	56060	IdentifierDeclType	zend_class_entry *		56048	0					
ANR	56061	Identifier	old_scope		56048	1					
ANR	56062	AssignmentExpression	* old_scope = EG ( scope )		56048	2		=			
ANR	56063	Identifier	old_scope		56048	0					
ANR	56064	CallExpression	EG ( scope )		56048	1					
ANR	56065	Callee	EG		56048	0					
ANR	56066	Identifier	EG		56048	0					
ANR	56067	ArgumentList	scope		56048	1					
ANR	56068	Argument	scope		56048	0					
ANR	56069	Identifier	scope		56048	0					
ANR	56070	ExpressionStatement	EG ( scope ) = scope	3999:1:120160:120177	56048	2	True				
ANR	56071	AssignmentExpression	EG ( scope ) = scope		56048	0		=			
ANR	56072	CallExpression	EG ( scope )		56048	0					
ANR	56073	Callee	EG		56048	0					
ANR	56074	Identifier	EG		56048	0					
ANR	56075	ArgumentList	scope		56048	1					
ANR	56076	Argument	scope		56048	0					
ANR	56077	Identifier	scope		56048	0					
ANR	56078	Identifier	scope		56048	1					
ANR	56079	IfStatement	if ( ! Z_OBJ_HT_P ( object ) -> read_property )		56048	3					
ANR	56080	Condition	! Z_OBJ_HT_P ( object ) -> read_property	4001:5:120185:120218	56048	0	True				
ANR	56081	UnaryOperationExpression	! Z_OBJ_HT_P ( object ) -> read_property		56048	0					
ANR	56082	UnaryOperator	!		56048	0					
ANR	56083	PtrMemberAccess	Z_OBJ_HT_P ( object ) -> read_property		56048	1					
ANR	56084	CallExpression	Z_OBJ_HT_P ( object )		56048	0					
ANR	56085	Callee	Z_OBJ_HT_P		56048	0					
ANR	56086	Identifier	Z_OBJ_HT_P		56048	0					
ANR	56087	ArgumentList	object		56048	1					
ANR	56088	Argument	object		56048	0					
ANR	56089	Identifier	object		56048	0					
ANR	56090	Identifier	read_property		56048	1					
ANR	56091	CompoundStatement		7:41:130:130	56048	1					
ANR	56092	ExpressionStatement	"zend_error_noreturn ( E_CORE_ERROR , ""Property %s of class %s cannot be read"" , name , ZSTR_VAL ( Z_OBJCE_P ( object ) -> name ) )"	4002:2:120225:120341	56048	0	True				
ANR	56093	CallExpression	"zend_error_noreturn ( E_CORE_ERROR , ""Property %s of class %s cannot be read"" , name , ZSTR_VAL ( Z_OBJCE_P ( object ) -> name ) )"		56048	0					
ANR	56094	Callee	zend_error_noreturn		56048	0					
ANR	56095	Identifier	zend_error_noreturn		56048	0					
ANR	56096	ArgumentList	E_CORE_ERROR		56048	1					
ANR	56097	Argument	E_CORE_ERROR		56048	0					
ANR	56098	Identifier	E_CORE_ERROR		56048	0					
ANR	56099	Argument	"""Property %s of class %s cannot be read"""		56048	1					
ANR	56100	PrimaryExpression	"""Property %s of class %s cannot be read"""		56048	0					
ANR	56101	Argument	name		56048	2					
ANR	56102	Identifier	name		56048	0					
ANR	56103	Argument	ZSTR_VAL ( Z_OBJCE_P ( object ) -> name )		56048	3					
ANR	56104	CallExpression	ZSTR_VAL ( Z_OBJCE_P ( object ) -> name )		56048	0					
ANR	56105	Callee	ZSTR_VAL		56048	0					
ANR	56106	Identifier	ZSTR_VAL		56048	0					
ANR	56107	ArgumentList	Z_OBJCE_P ( object ) -> name		56048	1					
ANR	56108	Argument	Z_OBJCE_P ( object ) -> name		56048	0					
ANR	56109	PtrMemberAccess	Z_OBJCE_P ( object ) -> name		56048	0					
ANR	56110	CallExpression	Z_OBJCE_P ( object )		56048	0					
ANR	56111	Callee	Z_OBJCE_P		56048	0					
ANR	56112	Identifier	Z_OBJCE_P		56048	0					
ANR	56113	ArgumentList	object		56048	1					
ANR	56114	Argument	object		56048	0					
ANR	56115	Identifier	object		56048	0					
ANR	56116	Identifier	name		56048	1					
ANR	56117	ExpressionStatement	"ZVAL_STRINGL ( & property , name , name_length )"	4005:1:120348:120390	56048	4	True				
ANR	56118	CallExpression	"ZVAL_STRINGL ( & property , name , name_length )"		56048	0					
ANR	56119	Callee	ZVAL_STRINGL		56048	0					
ANR	56120	Identifier	ZVAL_STRINGL		56048	0					
ANR	56121	ArgumentList	& property		56048	1					
ANR	56122	Argument	& property		56048	0					
ANR	56123	UnaryOperationExpression	& property		56048	0					
ANR	56124	UnaryOperator	&		56048	0					
ANR	56125	Identifier	property		56048	1					
ANR	56126	Argument	name		56048	1					
ANR	56127	Identifier	name		56048	0					
ANR	56128	Argument	name_length		56048	2					
ANR	56129	Identifier	name_length		56048	0					
ANR	56130	ExpressionStatement	"value = Z_OBJ_HT_P ( object ) -> read_property ( object , & property , silent ? BP_VAR_IS : BP_VAR_R , NULL , rv )"	4006:1:120393:120490	56048	5	True				
ANR	56131	AssignmentExpression	"value = Z_OBJ_HT_P ( object ) -> read_property ( object , & property , silent ? BP_VAR_IS : BP_VAR_R , NULL , rv )"		56048	0		=			
ANR	56132	Identifier	value		56048	0					
ANR	56133	CallExpression	"Z_OBJ_HT_P ( object ) -> read_property ( object , & property , silent ? BP_VAR_IS : BP_VAR_R , NULL , rv )"		56048	1					
ANR	56134	Callee	Z_OBJ_HT_P ( object ) -> read_property		56048	0					
ANR	56135	PtrMemberAccess	Z_OBJ_HT_P ( object ) -> read_property		56048	0					
ANR	56136	CallExpression	Z_OBJ_HT_P ( object )		56048	0					
ANR	56137	Callee	Z_OBJ_HT_P		56048	0					
ANR	56138	Identifier	Z_OBJ_HT_P		56048	0					
ANR	56139	ArgumentList	object		56048	1					
ANR	56140	Argument	object		56048	0					
ANR	56141	Identifier	object		56048	0					
ANR	56142	Identifier	read_property		56048	1					
ANR	56143	ArgumentList	object		56048	1					
ANR	56144	Argument	object		56048	0					
ANR	56145	Identifier	object		56048	0					
ANR	56146	Argument	& property		56048	1					
ANR	56147	UnaryOperationExpression	& property		56048	0					
ANR	56148	UnaryOperator	&		56048	0					
ANR	56149	Identifier	property		56048	1					
ANR	56150	Argument	silent ? BP_VAR_IS : BP_VAR_R		56048	2					
ANR	56151	ConditionalExpression	silent ? BP_VAR_IS : BP_VAR_R		56048	0					
ANR	56152	Condition	silent		56048	0					
ANR	56153	Identifier	silent		56048	0					
ANR	56154	Identifier	BP_VAR_IS		56048	1					
ANR	56155	Identifier	BP_VAR_R		56048	2					
ANR	56156	Argument	NULL		56048	3					
ANR	56157	Identifier	NULL		56048	0					
ANR	56158	Argument	rv		56048	4					
ANR	56159	Identifier	rv		56048	0					
ANR	56160	ExpressionStatement	zval_ptr_dtor ( & property )	4007:1:120493:120517	56048	6	True				
ANR	56161	CallExpression	zval_ptr_dtor ( & property )		56048	0					
ANR	56162	Callee	zval_ptr_dtor		56048	0					
ANR	56163	Identifier	zval_ptr_dtor		56048	0					
ANR	56164	ArgumentList	& property		56048	1					
ANR	56165	Argument	& property		56048	0					
ANR	56166	UnaryOperationExpression	& property		56048	0					
ANR	56167	UnaryOperator	&		56048	0					
ANR	56168	Identifier	property		56048	1					
ANR	56169	ExpressionStatement	EG ( scope ) = old_scope	4009:1:120521:120542	56048	7	True				
ANR	56170	AssignmentExpression	EG ( scope ) = old_scope		56048	0		=			
ANR	56171	CallExpression	EG ( scope )		56048	0					
ANR	56172	Callee	EG		56048	0					
ANR	56173	Identifier	EG		56048	0					
ANR	56174	ArgumentList	scope		56048	1					
ANR	56175	Argument	scope		56048	0					
ANR	56176	Identifier	scope		56048	0					
ANR	56177	Identifier	old_scope		56048	1					
ANR	56178	ReturnStatement	return value ;	4010:1:120545:120557	56048	8	True				
ANR	56179	Identifier	value		56048	0					
ANR	56180	ReturnType	ZEND_API zval *		56048	1					
ANR	56181	Identifier	zend_read_property		56048	2					
ANR	56182	ParameterList	"zend_class_entry * scope , zval * object , const char * name , size_t name_length , zend_bool silent , zval * rv"		56048	3					
ANR	56183	Parameter	zend_class_entry * scope	3994:34:119975:119997	56048	0	True				
ANR	56184	ParameterType	zend_class_entry *		56048	0					
ANR	56185	Identifier	scope		56048	1					
ANR	56186	Parameter	zval * object	3994:59:120000:120011	56048	1	True				
ANR	56187	ParameterType	zval *		56048	0					
ANR	56188	Identifier	object		56048	1					
ANR	56189	Parameter	const char * name	3994:73:120014:120029	56048	2	True				
ANR	56190	ParameterType	const char *		56048	0					
ANR	56191	Identifier	name		56048	1					
ANR	56192	Parameter	size_t name_length	3994:91:120032:120049	56048	3	True				
ANR	56193	ParameterType	size_t		56048	0					
ANR	56194	Identifier	name_length		56048	1					
ANR	56195	Parameter	zend_bool silent	3994:111:120052:120067	56048	4	True				
ANR	56196	ParameterType	zend_bool		56048	0					
ANR	56197	Identifier	silent		56048	1					
ANR	56198	Parameter	zval * rv	3994:129:120070:120077	56048	5	True				
ANR	56199	ParameterType	zval *		56048	0					
ANR	56200	Identifier	rv		56048	1					
ANR	56201	CFGEntryNode	ENTRY		56048		True				
ANR	56202	CFGExitNode	EXIT		56048		True				
ANR	56203	Symbol	silent		56048						
ANR	56204	Symbol	EG		56048						
ANR	56205	Symbol	Z_OBJ_HT_P ( object ) -> read_property		56048						
ANR	56206	Symbol	Z_OBJCE_P ( object ) -> name		56048						
ANR	56207	Symbol	NULL		56048						
ANR	56208	Symbol	rv		56048						
ANR	56209	Symbol	old_scope		56048						
ANR	56210	Symbol	name_length		56048						
ANR	56211	Symbol	* Z_OBJ_HT_P		56048						
ANR	56212	Symbol	& property		56048						
ANR	56213	Symbol	ZSTR_VAL		56048						
ANR	56214	Symbol	E_CORE_ERROR		56048						
ANR	56215	Symbol	scope		56048						
ANR	56216	Symbol	name		56048						
ANR	56217	Symbol	property		56048						
ANR	56218	Symbol	Z_OBJ_HT_P		56048						
ANR	56219	Symbol	Z_OBJCE_P		56048						
ANR	56220	Symbol	value		56048						
ANR	56221	Symbol	BP_VAR_IS		56048						
ANR	56222	Symbol	BP_VAR_R		56048						
ANR	56223	Symbol	object		56048						
ANR	56224	Symbol	* Z_OBJCE_P		56048						
ANR	56225	Function	zend_read_static_property	4014:0:120572:120975							
ANR	56226	FunctionDef	"zend_read_static_property (zend_class_entry * scope , const char * name , size_t name_length , zend_bool silent)"		56225	0					
ANR	56227	CompoundStatement		4015:0:120704:120975	56225	0					
ANR	56228	IdentifierDeclStatement	zval * property ;	4016:1:120707:120721	56225	0	True				
ANR	56229	IdentifierDecl	* property		56225	0					
ANR	56230	IdentifierDeclType	zval *		56225	0					
ANR	56231	Identifier	property		56225	1					
ANR	56232	IdentifierDeclStatement	zend_class_entry * old_scope = EG ( scope ) ;	4017:1:120724:120763	56225	1	True				
ANR	56233	IdentifierDecl	* old_scope = EG ( scope )		56225	0					
ANR	56234	IdentifierDeclType	zend_class_entry *		56225	0					
ANR	56235	Identifier	old_scope		56225	1					
ANR	56236	AssignmentExpression	* old_scope = EG ( scope )		56225	2		=			
ANR	56237	Identifier	old_scope		56225	0					
ANR	56238	CallExpression	EG ( scope )		56225	1					
ANR	56239	Callee	EG		56225	0					
ANR	56240	Identifier	EG		56225	0					
ANR	56241	ArgumentList	scope		56225	1					
ANR	56242	Argument	scope		56225	0					
ANR	56243	Identifier	scope		56225	0					
ANR	56244	IdentifierDeclStatement	"zend_string * key = zend_string_init ( name , name_length , 0 ) ;"	4018:1:120766:120823	56225	2	True				
ANR	56245	IdentifierDecl	"* key = zend_string_init ( name , name_length , 0 )"		56225	0					
ANR	56246	IdentifierDeclType	zend_string *		56225	0					
ANR	56247	Identifier	key		56225	1					
ANR	56248	AssignmentExpression	"* key = zend_string_init ( name , name_length , 0 )"		56225	2		=			
ANR	56249	Identifier	key		56225	0					
ANR	56250	CallExpression	"zend_string_init ( name , name_length , 0 )"		56225	1					
ANR	56251	Callee	zend_string_init		56225	0					
ANR	56252	Identifier	zend_string_init		56225	0					
ANR	56253	ArgumentList	name		56225	1					
ANR	56254	Argument	name		56225	0					
ANR	56255	Identifier	name		56225	0					
ANR	56256	Argument	name_length		56225	1					
ANR	56257	Identifier	name_length		56225	0					
ANR	56258	Argument	0		56225	2					
ANR	56259	PrimaryExpression	0		56225	0					
ANR	56260	ExpressionStatement	EG ( scope ) = scope	4020:1:120827:120844	56225	3	True				
ANR	56261	AssignmentExpression	EG ( scope ) = scope		56225	0		=			
ANR	56262	CallExpression	EG ( scope )		56225	0					
ANR	56263	Callee	EG		56225	0					
ANR	56264	Identifier	EG		56225	0					
ANR	56265	ArgumentList	scope		56225	1					
ANR	56266	Argument	scope		56225	0					
ANR	56267	Identifier	scope		56225	0					
ANR	56268	Identifier	scope		56225	1					
ANR	56269	ExpressionStatement	"property = zend_std_get_static_property ( scope , key , silent )"	4021:1:120847:120906	56225	4	True				
ANR	56270	AssignmentExpression	"property = zend_std_get_static_property ( scope , key , silent )"		56225	0		=			
ANR	56271	Identifier	property		56225	0					
ANR	56272	CallExpression	"zend_std_get_static_property ( scope , key , silent )"		56225	1					
ANR	56273	Callee	zend_std_get_static_property		56225	0					
ANR	56274	Identifier	zend_std_get_static_property		56225	0					
ANR	56275	ArgumentList	scope		56225	1					
ANR	56276	Argument	scope		56225	0					
ANR	56277	Identifier	scope		56225	0					
ANR	56278	Argument	key		56225	1					
ANR	56279	Identifier	key		56225	0					
ANR	56280	Argument	silent		56225	2					
ANR	56281	Identifier	silent		56225	0					
ANR	56282	ExpressionStatement	EG ( scope ) = old_scope	4022:1:120909:120930	56225	5	True				
ANR	56283	AssignmentExpression	EG ( scope ) = old_scope		56225	0		=			
ANR	56284	CallExpression	EG ( scope )		56225	0					
ANR	56285	Callee	EG		56225	0					
ANR	56286	Identifier	EG		56225	0					
ANR	56287	ArgumentList	scope		56225	1					
ANR	56288	Argument	scope		56225	0					
ANR	56289	Identifier	scope		56225	0					
ANR	56290	Identifier	old_scope		56225	1					
ANR	56291	ExpressionStatement	zend_string_free ( key )	4023:1:120933:120954	56225	6	True				
ANR	56292	CallExpression	zend_string_free ( key )		56225	0					
ANR	56293	Callee	zend_string_free		56225	0					
ANR	56294	Identifier	zend_string_free		56225	0					
ANR	56295	ArgumentList	key		56225	1					
ANR	56296	Argument	key		56225	0					
ANR	56297	Identifier	key		56225	0					
ANR	56298	ReturnStatement	return property ;	4025:1:120958:120973	56225	7	True				
ANR	56299	Identifier	property		56225	0					
ANR	56300	ReturnType	ZEND_API zval *		56225	1					
ANR	56301	Identifier	zend_read_static_property		56225	2					
ANR	56302	ParameterList	"zend_class_entry * scope , const char * name , size_t name_length , zend_bool silent"		56225	3					
ANR	56303	Parameter	zend_class_entry * scope	4014:41:120613:120635	56225	0	True				
ANR	56304	ParameterType	zend_class_entry *		56225	0					
ANR	56305	Identifier	scope		56225	1					
ANR	56306	Parameter	const char * name	4014:66:120638:120653	56225	1	True				
ANR	56307	ParameterType	const char *		56225	0					
ANR	56308	Identifier	name		56225	1					
ANR	56309	Parameter	size_t name_length	4014:84:120656:120673	56225	2	True				
ANR	56310	ParameterType	size_t		56225	0					
ANR	56311	Identifier	name_length		56225	1					
ANR	56312	Parameter	zend_bool silent	4014:104:120676:120691	56225	3	True				
ANR	56313	ParameterType	zend_bool		56225	0					
ANR	56314	Identifier	silent		56225	1					
ANR	56315	CFGEntryNode	ENTRY		56225		True				
ANR	56316	CFGExitNode	EXIT		56225		True				
ANR	56317	Symbol	zend_string_init		56225						
ANR	56318	Symbol	silent		56225						
ANR	56319	Symbol	EG		56225						
ANR	56320	Symbol	old_scope		56225						
ANR	56321	Symbol	scope		56225						
ANR	56322	Symbol	name		56225						
ANR	56323	Symbol	property		56225						
ANR	56324	Symbol	name_length		56225						
ANR	56325	Symbol	key		56225						
ANR	56326	Symbol	zend_std_get_static_property		56225						
ANR	56327	Function	zend_save_error_handling	4029:0:120988:121214							
ANR	56328	FunctionDef	zend_save_error_handling (zend_error_handling * current)		56327	0					
ANR	56329	CompoundStatement		4030:0:121067:121214	56327	0					
ANR	56330	ExpressionStatement	current -> handling = EG ( error_handling )	4031:1:121070:121108	56327	0	True				
ANR	56331	AssignmentExpression	current -> handling = EG ( error_handling )		56327	0		=			
ANR	56332	PtrMemberAccess	current -> handling		56327	0					
ANR	56333	Identifier	current		56327	0					
ANR	56334	Identifier	handling		56327	1					
ANR	56335	CallExpression	EG ( error_handling )		56327	1					
ANR	56336	Callee	EG		56327	0					
ANR	56337	Identifier	EG		56327	0					
ANR	56338	ArgumentList	error_handling		56327	1					
ANR	56339	Argument	error_handling		56327	0					
ANR	56340	Identifier	error_handling		56327	0					
ANR	56341	ExpressionStatement	current -> exception = EG ( exception_class )	4032:1:121111:121151	56327	1	True				
ANR	56342	AssignmentExpression	current -> exception = EG ( exception_class )		56327	0		=			
ANR	56343	PtrMemberAccess	current -> exception		56327	0					
ANR	56344	Identifier	current		56327	0					
ANR	56345	Identifier	exception		56327	1					
ANR	56346	CallExpression	EG ( exception_class )		56327	1					
ANR	56347	Callee	EG		56327	0					
ANR	56348	Identifier	EG		56327	0					
ANR	56349	ArgumentList	exception_class		56327	1					
ANR	56350	Argument	exception_class		56327	0					
ANR	56351	Identifier	exception_class		56327	0					
ANR	56352	ExpressionStatement	"ZVAL_COPY ( & current -> user_handler , & EG ( user_error_handler ) )"	4033:1:121154:121212	56327	2	True				
ANR	56353	CallExpression	"ZVAL_COPY ( & current -> user_handler , & EG ( user_error_handler ) )"		56327	0					
ANR	56354	Callee	ZVAL_COPY		56327	0					
ANR	56355	Identifier	ZVAL_COPY		56327	0					
ANR	56356	ArgumentList	& current -> user_handler		56327	1					
ANR	56357	Argument	& current -> user_handler		56327	0					
ANR	56358	UnaryOperationExpression	& current -> user_handler		56327	0					
ANR	56359	UnaryOperator	&		56327	0					
ANR	56360	PtrMemberAccess	current -> user_handler		56327	1					
ANR	56361	Identifier	current		56327	0					
ANR	56362	Identifier	user_handler		56327	1					
ANR	56363	Argument	& EG ( user_error_handler )		56327	1					
ANR	56364	UnaryOperationExpression	& EG ( user_error_handler )		56327	0					
ANR	56365	UnaryOperator	&		56327	0					
ANR	56366	CallExpression	EG ( user_error_handler )		56327	1					
ANR	56367	Callee	EG		56327	0					
ANR	56368	Identifier	EG		56327	0					
ANR	56369	ArgumentList	user_error_handler		56327	1					
ANR	56370	Argument	user_error_handler		56327	0					
ANR	56371	Identifier	user_error_handler		56327	0					
ANR	56372	ReturnType	ZEND_API void		56327	1					
ANR	56373	Identifier	zend_save_error_handling		56327	2					
ANR	56374	ParameterList	zend_error_handling * current		56327	3					
ANR	56375	Parameter	zend_error_handling * current	4029:39:121027:121054	56327	0	True				
ANR	56376	ParameterType	zend_error_handling *		56327	0					
ANR	56377	Identifier	current		56327	1					
ANR	56378	CFGEntryNode	ENTRY		56327		True				
ANR	56379	CFGExitNode	EXIT		56327		True				
ANR	56380	Symbol	current		56327						
ANR	56381	Symbol	EG		56327						
ANR	56382	Symbol	user_error_handler		56327						
ANR	56383	Symbol	current -> handling		56327						
ANR	56384	Symbol	* current		56327						
ANR	56385	Symbol	current -> exception		56327						
ANR	56386	Symbol	exception_class		56327						
ANR	56387	Symbol	error_handling		56327						
ANR	56388	Symbol	& current -> user_handler		56327						
ANR	56389	Symbol	& EG		56327						
ANR	56390	Function	zend_replace_error_handling	4037:0:121227:121724							
ANR	56391	FunctionDef	"zend_replace_error_handling (zend_error_handling_t error_handling , zend_class_entry * exception_class , zend_error_handling * current)"		56390	0					
ANR	56392	CompoundStatement		4038:0:121382:121724	56390	0					
ANR	56393	IfStatement	if ( current )		56390	0					
ANR	56394	Condition	current	4039:5:121389:121395	56390	0	True				
ANR	56395	Identifier	current		56390	0					
ANR	56396	CompoundStatement		2:14:15:15	56390	1					
ANR	56397	ExpressionStatement	zend_save_error_handling ( current )	4040:2:121402:121435	56390	0	True				
ANR	56398	CallExpression	zend_save_error_handling ( current )		56390	0					
ANR	56399	Callee	zend_save_error_handling		56390	0					
ANR	56400	Identifier	zend_save_error_handling		56390	0					
ANR	56401	ArgumentList	current		56390	1					
ANR	56402	Argument	current		56390	0					
ANR	56403	Identifier	current		56390	0					
ANR	56404	IfStatement	if ( error_handling != EH_NORMAL && Z_TYPE ( EG ( user_error_handler ) ) != IS_UNDEF )		56390	1					
ANR	56405	Condition	error_handling != EH_NORMAL && Z_TYPE ( EG ( user_error_handler ) ) != IS_UNDEF	4041:6:121443:121515	56390	0	True				
ANR	56406	AndExpression	error_handling != EH_NORMAL && Z_TYPE ( EG ( user_error_handler ) ) != IS_UNDEF		56390	0		&&			
ANR	56407	EqualityExpression	error_handling != EH_NORMAL		56390	0		!=			
ANR	56408	Identifier	error_handling		56390	0					
ANR	56409	Identifier	EH_NORMAL		56390	1					
ANR	56410	EqualityExpression	Z_TYPE ( EG ( user_error_handler ) ) != IS_UNDEF		56390	1		!=			
ANR	56411	CallExpression	Z_TYPE ( EG ( user_error_handler ) )		56390	0					
ANR	56412	Callee	Z_TYPE		56390	0					
ANR	56413	Identifier	Z_TYPE		56390	0					
ANR	56414	ArgumentList	EG ( user_error_handler )		56390	1					
ANR	56415	Argument	EG ( user_error_handler )		56390	0					
ANR	56416	CallExpression	EG ( user_error_handler )		56390	0					
ANR	56417	Callee	EG		56390	0					
ANR	56418	Identifier	EG		56390	0					
ANR	56419	ArgumentList	user_error_handler		56390	1					
ANR	56420	Argument	user_error_handler		56390	0					
ANR	56421	Identifier	user_error_handler		56390	0					
ANR	56422	Identifier	IS_UNDEF		56390	1					
ANR	56423	CompoundStatement		4:81:135:135	56390	1					
ANR	56424	ExpressionStatement	zval_ptr_dtor ( & EG ( user_error_handler ) )	4042:3:121523:121561	56390	0	True				
ANR	56425	CallExpression	zval_ptr_dtor ( & EG ( user_error_handler ) )		56390	0					
ANR	56426	Callee	zval_ptr_dtor		56390	0					
ANR	56427	Identifier	zval_ptr_dtor		56390	0					
ANR	56428	ArgumentList	& EG ( user_error_handler )		56390	1					
ANR	56429	Argument	& EG ( user_error_handler )		56390	0					
ANR	56430	UnaryOperationExpression	& EG ( user_error_handler )		56390	0					
ANR	56431	UnaryOperator	&		56390	0					
ANR	56432	CallExpression	EG ( user_error_handler )		56390	1					
ANR	56433	Callee	EG		56390	0					
ANR	56434	Identifier	EG		56390	0					
ANR	56435	ArgumentList	user_error_handler		56390	1					
ANR	56436	Argument	user_error_handler		56390	0					
ANR	56437	Identifier	user_error_handler		56390	0					
ANR	56438	ExpressionStatement	ZVAL_UNDEF ( & EG ( user_error_handler ) )	4043:3:121566:121601	56390	1	True				
ANR	56439	CallExpression	ZVAL_UNDEF ( & EG ( user_error_handler ) )		56390	0					
ANR	56440	Callee	ZVAL_UNDEF		56390	0					
ANR	56441	Identifier	ZVAL_UNDEF		56390	0					
ANR	56442	ArgumentList	& EG ( user_error_handler )		56390	1					
ANR	56443	Argument	& EG ( user_error_handler )		56390	0					
ANR	56444	UnaryOperationExpression	& EG ( user_error_handler )		56390	0					
ANR	56445	UnaryOperator	&		56390	0					
ANR	56446	CallExpression	EG ( user_error_handler )		56390	1					
ANR	56447	Callee	EG		56390	0					
ANR	56448	Identifier	EG		56390	0					
ANR	56449	ArgumentList	user_error_handler		56390	1					
ANR	56450	Argument	user_error_handler		56390	0					
ANR	56451	Identifier	user_error_handler		56390	0					
ANR	56452	ExpressionStatement	EG ( error_handling ) = error_handling	4046:1:121611:121646	56390	1	True				
ANR	56453	AssignmentExpression	EG ( error_handling ) = error_handling		56390	0		=			
ANR	56454	CallExpression	EG ( error_handling )		56390	0					
ANR	56455	Callee	EG		56390	0					
ANR	56456	Identifier	EG		56390	0					
ANR	56457	ArgumentList	error_handling		56390	1					
ANR	56458	Argument	error_handling		56390	0					
ANR	56459	Identifier	error_handling		56390	0					
ANR	56460	Identifier	error_handling		56390	1					
ANR	56461	ExpressionStatement	EG ( exception_class ) = error_handling == EH_THROW ? exception_class : NULL	4047:1:121649:121722	56390	2	True				
ANR	56462	AssignmentExpression	EG ( exception_class ) = error_handling == EH_THROW ? exception_class : NULL		56390	0		=			
ANR	56463	CallExpression	EG ( exception_class )		56390	0					
ANR	56464	Callee	EG		56390	0					
ANR	56465	Identifier	EG		56390	0					
ANR	56466	ArgumentList	exception_class		56390	1					
ANR	56467	Argument	exception_class		56390	0					
ANR	56468	Identifier	exception_class		56390	0					
ANR	56469	ConditionalExpression	error_handling == EH_THROW ? exception_class : NULL		56390	1					
ANR	56470	Condition	error_handling == EH_THROW		56390	0					
ANR	56471	EqualityExpression	error_handling == EH_THROW		56390	0		==			
ANR	56472	Identifier	error_handling		56390	0					
ANR	56473	Identifier	EH_THROW		56390	1					
ANR	56474	Identifier	exception_class		56390	1					
ANR	56475	Identifier	NULL		56390	2					
ANR	56476	ReturnType	ZEND_API void		56390	1					
ANR	56477	Identifier	zend_replace_error_handling		56390	2					
ANR	56478	ParameterList	"zend_error_handling_t error_handling , zend_class_entry * exception_class , zend_error_handling * current"		56390	3					
ANR	56479	Parameter	zend_error_handling_t error_handling	4037:42:121269:121304	56390	0	True				
ANR	56480	ParameterType	zend_error_handling_t		56390	0					
ANR	56481	Identifier	error_handling		56390	1					
ANR	56482	Parameter	zend_class_entry * exception_class	4037:80:121307:121339	56390	1	True				
ANR	56483	ParameterType	zend_class_entry *		56390	0					
ANR	56484	Identifier	exception_class		56390	1					
ANR	56485	Parameter	zend_error_handling * current	4037:115:121342:121369	56390	2	True				
ANR	56486	ParameterType	zend_error_handling *		56390	0					
ANR	56487	Identifier	current		56390	1					
ANR	56488	CFGEntryNode	ENTRY		56390		True				
ANR	56489	CFGExitNode	EXIT		56390		True				
ANR	56490	Symbol	current		56390						
ANR	56491	Symbol	EG		56390						
ANR	56492	Symbol	user_error_handler		56390						
ANR	56493	Symbol	EH_NORMAL		56390						
ANR	56494	Symbol	NULL		56390						
ANR	56495	Symbol	EH_THROW		56390						
ANR	56496	Symbol	Z_TYPE		56390						
ANR	56497	Symbol	exception_class		56390						
ANR	56498	Symbol	error_handling		56390						
ANR	56499	Symbol	& EG		56390						
ANR	56500	Symbol	IS_UNDEF		56390						
ANR	56501	Function	same_zval	4051:0:121737:122218							
ANR	56502	FunctionDef	"same_zval (zval * zv1 , zval * zv2)"		56501	0					
ANR	56503	CompoundStatement		4052:0:121791:122218	56501	0					
ANR	56504	IfStatement	if ( Z_TYPE_P ( zv1 ) != Z_TYPE_P ( zv2 ) )		56501	0					
ANR	56505	Condition	Z_TYPE_P ( zv1 ) != Z_TYPE_P ( zv2 )	4053:5:121798:121827	56501	0	True				
ANR	56506	EqualityExpression	Z_TYPE_P ( zv1 ) != Z_TYPE_P ( zv2 )		56501	0		!=			
ANR	56507	CallExpression	Z_TYPE_P ( zv1 )		56501	0					
ANR	56508	Callee	Z_TYPE_P		56501	0					
ANR	56509	Identifier	Z_TYPE_P		56501	0					
ANR	56510	ArgumentList	zv1		56501	1					
ANR	56511	Argument	zv1		56501	0					
ANR	56512	Identifier	zv1		56501	0					
ANR	56513	CallExpression	Z_TYPE_P ( zv2 )		56501	1					
ANR	56514	Callee	Z_TYPE_P		56501	0					
ANR	56515	Identifier	Z_TYPE_P		56501	0					
ANR	56516	ArgumentList	zv2		56501	1					
ANR	56517	Argument	zv2		56501	0					
ANR	56518	Identifier	zv2		56501	0					
ANR	56519	CompoundStatement		2:37:38:38	56501	1					
ANR	56520	ReturnStatement	return 0 ;	4054:2:121834:121842	56501	0	True				
ANR	56521	PrimaryExpression	0		56501	0					
ANR	56522	SwitchStatement	switch ( Z_TYPE_P ( zv1 ) )		56501	1					
ANR	56523	Condition	Z_TYPE_P ( zv1 )	4056:9:121856:121868	56501	0	True				
ANR	56524	CallExpression	Z_TYPE_P ( zv1 )		56501	0					
ANR	56525	Callee	Z_TYPE_P		56501	0					
ANR	56526	Identifier	Z_TYPE_P		56501	0					
ANR	56527	ArgumentList	zv1		56501	1					
ANR	56528	Argument	zv1		56501	0					
ANR	56529	Identifier	zv1		56501	0					
ANR	56530	CompoundStatement		5:24:79:79	56501	1					
ANR	56531	Label	case IS_UNDEF :	4057:2:121875:121888	56501	0	True				
ANR	56532	Identifier	IS_UNDEF		56501	0					
ANR	56533	Label	case IS_NULL :	4058:2:121892:121904	56501	1	True				
ANR	56534	Identifier	IS_NULL		56501	0					
ANR	56535	Label	case IS_FALSE :	4059:2:121908:121921	56501	2	True				
ANR	56536	Identifier	IS_FALSE		56501	0					
ANR	56537	Label	case IS_TRUE :	4060:2:121925:121937	56501	3	True				
ANR	56538	Identifier	IS_TRUE		56501	0					
ANR	56539	ReturnStatement	return 1 ;	4061:3:121942:121950	56501	4	True				
ANR	56540	PrimaryExpression	1		56501	0					
ANR	56541	Label	case IS_LONG :	4062:2:121954:121966	56501	5	True				
ANR	56542	Identifier	IS_LONG		56501	0					
ANR	56543	ReturnStatement	return Z_LVAL_P ( zv1 ) == Z_LVAL_P ( zv2 ) ;	4063:3:121971:122008	56501	6	True				
ANR	56544	EqualityExpression	Z_LVAL_P ( zv1 ) == Z_LVAL_P ( zv2 )		56501	0		==			
ANR	56545	CallExpression	Z_LVAL_P ( zv1 )		56501	0					
ANR	56546	Callee	Z_LVAL_P		56501	0					
ANR	56547	Identifier	Z_LVAL_P		56501	0					
ANR	56548	ArgumentList	zv1		56501	1					
ANR	56549	Argument	zv1		56501	0					
ANR	56550	Identifier	zv1		56501	0					
ANR	56551	CallExpression	Z_LVAL_P ( zv2 )		56501	1					
ANR	56552	Callee	Z_LVAL_P		56501	0					
ANR	56553	Identifier	Z_LVAL_P		56501	0					
ANR	56554	ArgumentList	zv2		56501	1					
ANR	56555	Argument	zv2		56501	0					
ANR	56556	Identifier	zv2		56501	0					
ANR	56557	Label	case IS_DOUBLE :	4064:2:122012:122026	56501	7	True				
ANR	56558	Identifier	IS_DOUBLE		56501	0					
ANR	56559	ReturnStatement	return Z_LVAL_P ( zv1 ) == Z_LVAL_P ( zv2 ) ;	4065:3:122031:122068	56501	8	True				
ANR	56560	EqualityExpression	Z_LVAL_P ( zv1 ) == Z_LVAL_P ( zv2 )		56501	0		==			
ANR	56561	CallExpression	Z_LVAL_P ( zv1 )		56501	0					
ANR	56562	Callee	Z_LVAL_P		56501	0					
ANR	56563	Identifier	Z_LVAL_P		56501	0					
ANR	56564	ArgumentList	zv1		56501	1					
ANR	56565	Argument	zv1		56501	0					
ANR	56566	Identifier	zv1		56501	0					
ANR	56567	CallExpression	Z_LVAL_P ( zv2 )		56501	1					
ANR	56568	Callee	Z_LVAL_P		56501	0					
ANR	56569	Identifier	Z_LVAL_P		56501	0					
ANR	56570	ArgumentList	zv2		56501	1					
ANR	56571	Argument	zv2		56501	0					
ANR	56572	Identifier	zv2		56501	0					
ANR	56573	Label	case IS_STRING :	4066:2:122072:122086	56501	9	True				
ANR	56574	Identifier	IS_STRING		56501	0					
ANR	56575	Label	case IS_ARRAY :	4067:2:122090:122103	56501	10	True				
ANR	56576	Identifier	IS_ARRAY		56501	0					
ANR	56577	Label	case IS_OBJECT :	4068:2:122107:122121	56501	11	True				
ANR	56578	Identifier	IS_OBJECT		56501	0					
ANR	56579	Label	case IS_RESOURCE :	4069:2:122125:122141	56501	12	True				
ANR	56580	Identifier	IS_RESOURCE		56501	0					
ANR	56581	ReturnStatement	return Z_COUNTED_P ( zv1 ) == Z_COUNTED_P ( zv2 ) ;	4070:3:122146:122189	56501	13	True				
ANR	56582	EqualityExpression	Z_COUNTED_P ( zv1 ) == Z_COUNTED_P ( zv2 )		56501	0		==			
ANR	56583	CallExpression	Z_COUNTED_P ( zv1 )		56501	0					
ANR	56584	Callee	Z_COUNTED_P		56501	0					
ANR	56585	Identifier	Z_COUNTED_P		56501	0					
ANR	56586	ArgumentList	zv1		56501	1					
ANR	56587	Argument	zv1		56501	0					
ANR	56588	Identifier	zv1		56501	0					
ANR	56589	CallExpression	Z_COUNTED_P ( zv2 )		56501	1					
ANR	56590	Callee	Z_COUNTED_P		56501	0					
ANR	56591	Identifier	Z_COUNTED_P		56501	0					
ANR	56592	ArgumentList	zv2		56501	1					
ANR	56593	Argument	zv2		56501	0					
ANR	56594	Identifier	zv2		56501	0					
ANR	56595	Label	default :	4071:2:122193:122200	56501	14	True				
ANR	56596	Identifier	default		56501	0					
ANR	56597	ReturnStatement	return 0 ;	4072:3:122205:122213	56501	15	True				
ANR	56598	PrimaryExpression	0		56501	0					
ANR	56599	ReturnType	static int		56501	1					
ANR	56600	Identifier	same_zval		56501	2					
ANR	56601	ParameterList	"zval * zv1 , zval * zv2"		56501	3					
ANR	56602	Parameter	zval * zv1	4051:21:121758:121766	56501	0	True				
ANR	56603	ParameterType	zval *		56501	0					
ANR	56604	Identifier	zv1		56501	1					
ANR	56605	Parameter	zval * zv2	4051:32:121769:121777	56501	1	True				
ANR	56606	ParameterType	zval *		56501	0					
ANR	56607	Identifier	zv2		56501	1					
ANR	56608	CFGEntryNode	ENTRY		56501		True				
ANR	56609	CFGExitNode	EXIT		56501		True				
ANR	56610	Symbol	Z_COUNTED_P		56501						
ANR	56611	Symbol	zv1		56501						
ANR	56612	Symbol	zv2		56501						
ANR	56613	Symbol	Z_TYPE_P		56501						
ANR	56614	Symbol	Z_LVAL_P		56501						
ANR	56615	Function	zend_restore_error_handling	4077:0:122231:122769							
ANR	56616	FunctionDef	zend_restore_error_handling (zend_error_handling * saved)		56615	0					
ANR	56617	CompoundStatement		4078:0:122311:122769	56615	0					
ANR	56618	ExpressionStatement	EG ( error_handling ) = saved -> handling	4079:1:122314:122350	56615	0	True				
ANR	56619	AssignmentExpression	EG ( error_handling ) = saved -> handling		56615	0		=			
ANR	56620	CallExpression	EG ( error_handling )		56615	0					
ANR	56621	Callee	EG		56615	0					
ANR	56622	Identifier	EG		56615	0					
ANR	56623	ArgumentList	error_handling		56615	1					
ANR	56624	Argument	error_handling		56615	0					
ANR	56625	Identifier	error_handling		56615	0					
ANR	56626	PtrMemberAccess	saved -> handling		56615	1					
ANR	56627	Identifier	saved		56615	0					
ANR	56628	Identifier	handling		56615	1					
ANR	56629	ExpressionStatement	EG ( exception_class ) = saved -> handling == EH_THROW ? saved -> exception : NULL	4080:1:122353:122428	56615	1	True				
ANR	56630	AssignmentExpression	EG ( exception_class ) = saved -> handling == EH_THROW ? saved -> exception : NULL		56615	0		=			
ANR	56631	CallExpression	EG ( exception_class )		56615	0					
ANR	56632	Callee	EG		56615	0					
ANR	56633	Identifier	EG		56615	0					
ANR	56634	ArgumentList	exception_class		56615	1					
ANR	56635	Argument	exception_class		56615	0					
ANR	56636	Identifier	exception_class		56615	0					
ANR	56637	ConditionalExpression	saved -> handling == EH_THROW ? saved -> exception : NULL		56615	1					
ANR	56638	Condition	saved -> handling == EH_THROW		56615	0					
ANR	56639	EqualityExpression	saved -> handling == EH_THROW		56615	0		==			
ANR	56640	PtrMemberAccess	saved -> handling		56615	0					
ANR	56641	Identifier	saved		56615	0					
ANR	56642	Identifier	handling		56615	1					
ANR	56643	Identifier	EH_THROW		56615	1					
ANR	56644	PtrMemberAccess	saved -> exception		56615	1					
ANR	56645	Identifier	saved		56615	0					
ANR	56646	Identifier	exception		56615	1					
ANR	56647	Identifier	NULL		56615	2					
ANR	56648	IfStatement	"if ( Z_TYPE ( saved -> user_handler ) != IS_UNDEF && ! same_zval ( & saved -> user_handler , & EG ( user_error_handler ) ) )"		56615	2					
ANR	56649	Condition	"Z_TYPE ( saved -> user_handler ) != IS_UNDEF && ! same_zval ( & saved -> user_handler , & EG ( user_error_handler ) )"	4081:5:122435:122536	56615	0	True				
ANR	56650	AndExpression	"Z_TYPE ( saved -> user_handler ) != IS_UNDEF && ! same_zval ( & saved -> user_handler , & EG ( user_error_handler ) )"		56615	0		&&			
ANR	56651	EqualityExpression	Z_TYPE ( saved -> user_handler ) != IS_UNDEF		56615	0		!=			
ANR	56652	CallExpression	Z_TYPE ( saved -> user_handler )		56615	0					
ANR	56653	Callee	Z_TYPE		56615	0					
ANR	56654	Identifier	Z_TYPE		56615	0					
ANR	56655	ArgumentList	saved -> user_handler		56615	1					
ANR	56656	Argument	saved -> user_handler		56615	0					
ANR	56657	PtrMemberAccess	saved -> user_handler		56615	0					
ANR	56658	Identifier	saved		56615	0					
ANR	56659	Identifier	user_handler		56615	1					
ANR	56660	Identifier	IS_UNDEF		56615	1					
ANR	56661	UnaryOperationExpression	"! same_zval ( & saved -> user_handler , & EG ( user_error_handler ) )"		56615	1					
ANR	56662	UnaryOperator	!		56615	0					
ANR	56663	CallExpression	"same_zval ( & saved -> user_handler , & EG ( user_error_handler ) )"		56615	1					
ANR	56664	Callee	same_zval		56615	0					
ANR	56665	Identifier	same_zval		56615	0					
ANR	56666	ArgumentList	& saved -> user_handler		56615	1					
ANR	56667	Argument	& saved -> user_handler		56615	0					
ANR	56668	UnaryOperationExpression	& saved -> user_handler		56615	0					
ANR	56669	UnaryOperator	&		56615	0					
ANR	56670	PtrMemberAccess	saved -> user_handler		56615	1					
ANR	56671	Identifier	saved		56615	0					
ANR	56672	Identifier	user_handler		56615	1					
ANR	56673	Argument	& EG ( user_error_handler )		56615	1					
ANR	56674	UnaryOperationExpression	& EG ( user_error_handler )		56615	0					
ANR	56675	UnaryOperator	&		56615	0					
ANR	56676	CallExpression	EG ( user_error_handler )		56615	1					
ANR	56677	Callee	EG		56615	0					
ANR	56678	Identifier	EG		56615	0					
ANR	56679	ArgumentList	user_error_handler		56615	1					
ANR	56680	Argument	user_error_handler		56615	0					
ANR	56681	Identifier	user_error_handler		56615	0					
ANR	56682	CompoundStatement		5:64:227:227	56615	1					
ANR	56683	ExpressionStatement	zval_ptr_dtor ( & EG ( user_error_handler ) )	4083:2:122543:122581	56615	0	True				
ANR	56684	CallExpression	zval_ptr_dtor ( & EG ( user_error_handler ) )		56615	0					
ANR	56685	Callee	zval_ptr_dtor		56615	0					
ANR	56686	Identifier	zval_ptr_dtor		56615	0					
ANR	56687	ArgumentList	& EG ( user_error_handler )		56615	1					
ANR	56688	Argument	& EG ( user_error_handler )		56615	0					
ANR	56689	UnaryOperationExpression	& EG ( user_error_handler )		56615	0					
ANR	56690	UnaryOperator	&		56615	0					
ANR	56691	CallExpression	EG ( user_error_handler )		56615	1					
ANR	56692	Callee	EG		56615	0					
ANR	56693	Identifier	EG		56615	0					
ANR	56694	ArgumentList	user_error_handler		56615	1					
ANR	56695	Argument	user_error_handler		56615	0					
ANR	56696	Identifier	user_error_handler		56615	0					
ANR	56697	ExpressionStatement	"ZVAL_COPY_VALUE ( & EG ( user_error_handler ) , & saved -> user_handler )"	4084:2:122585:122647	56615	1	True				
ANR	56698	CallExpression	"ZVAL_COPY_VALUE ( & EG ( user_error_handler ) , & saved -> user_handler )"		56615	0					
ANR	56699	Callee	ZVAL_COPY_VALUE		56615	0					
ANR	56700	Identifier	ZVAL_COPY_VALUE		56615	0					
ANR	56701	ArgumentList	& EG ( user_error_handler )		56615	1					
ANR	56702	Argument	& EG ( user_error_handler )		56615	0					
ANR	56703	UnaryOperationExpression	& EG ( user_error_handler )		56615	0					
ANR	56704	UnaryOperator	&		56615	0					
ANR	56705	CallExpression	EG ( user_error_handler )		56615	1					
ANR	56706	Callee	EG		56615	0					
ANR	56707	Identifier	EG		56615	0					
ANR	56708	ArgumentList	user_error_handler		56615	1					
ANR	56709	Argument	user_error_handler		56615	0					
ANR	56710	Identifier	user_error_handler		56615	0					
ANR	56711	Argument	& saved -> user_handler		56615	1					
ANR	56712	UnaryOperationExpression	& saved -> user_handler		56615	0					
ANR	56713	UnaryOperator	&		56615	0					
ANR	56714	PtrMemberAccess	saved -> user_handler		56615	1					
ANR	56715	Identifier	saved		56615	0					
ANR	56716	Identifier	user_handler		56615	1					
ANR	56717	ElseStatement	else		56615	0					
ANR	56718	IfStatement	if ( Z_TYPE ( saved -> user_handler ) )		56615	0					
ANR	56719	Condition	Z_TYPE ( saved -> user_handler )	4085:12:122661:122687	56615	0	True				
ANR	56720	CallExpression	Z_TYPE ( saved -> user_handler )		56615	0					
ANR	56721	Callee	Z_TYPE		56615	0					
ANR	56722	Identifier	Z_TYPE		56615	0					
ANR	56723	ArgumentList	saved -> user_handler		56615	1					
ANR	56724	Argument	saved -> user_handler		56615	0					
ANR	56725	PtrMemberAccess	saved -> user_handler		56615	0					
ANR	56726	Identifier	saved		56615	0					
ANR	56727	Identifier	user_handler		56615	1					
ANR	56728	CompoundStatement		8:41:378:378	56615	1					
ANR	56729	ExpressionStatement	zval_ptr_dtor ( & saved -> user_handler )	4086:2:122694:122729	56615	0	True				
ANR	56730	CallExpression	zval_ptr_dtor ( & saved -> user_handler )		56615	0					
ANR	56731	Callee	zval_ptr_dtor		56615	0					
ANR	56732	Identifier	zval_ptr_dtor		56615	0					
ANR	56733	ArgumentList	& saved -> user_handler		56615	1					
ANR	56734	Argument	& saved -> user_handler		56615	0					
ANR	56735	UnaryOperationExpression	& saved -> user_handler		56615	0					
ANR	56736	UnaryOperator	&		56615	0					
ANR	56737	PtrMemberAccess	saved -> user_handler		56615	1					
ANR	56738	Identifier	saved		56615	0					
ANR	56739	Identifier	user_handler		56615	1					
ANR	56740	ExpressionStatement	ZVAL_UNDEF ( & saved -> user_handler )	4088:1:122735:122767	56615	3	True				
ANR	56741	CallExpression	ZVAL_UNDEF ( & saved -> user_handler )		56615	0					
ANR	56742	Callee	ZVAL_UNDEF		56615	0					
ANR	56743	Identifier	ZVAL_UNDEF		56615	0					
ANR	56744	ArgumentList	& saved -> user_handler		56615	1					
ANR	56745	Argument	& saved -> user_handler		56615	0					
ANR	56746	UnaryOperationExpression	& saved -> user_handler		56615	0					
ANR	56747	UnaryOperator	&		56615	0					
ANR	56748	PtrMemberAccess	saved -> user_handler		56615	1					
ANR	56749	Identifier	saved		56615	0					
ANR	56750	Identifier	user_handler		56615	1					
ANR	56751	ReturnType	ZEND_API void		56615	1					
ANR	56752	Identifier	zend_restore_error_handling		56615	2					
ANR	56753	ParameterList	zend_error_handling * saved		56615	3					
ANR	56754	Parameter	zend_error_handling * saved	4077:42:122273:122298	56615	0	True				
ANR	56755	ParameterType	zend_error_handling *		56615	0					
ANR	56756	Identifier	saved		56615	1					
ANR	56757	CFGEntryNode	ENTRY		56615		True				
ANR	56758	CFGExitNode	EXIT		56615		True				
ANR	56759	Symbol	EG		56615						
ANR	56760	Symbol	NULL		56615						
ANR	56761	Symbol	user_error_handler		56615						
ANR	56762	Symbol	same_zval		56615						
ANR	56763	Symbol	saved		56615						
ANR	56764	Symbol	EH_THROW		56615						
ANR	56765	Symbol	saved -> exception		56615						
ANR	56766	Symbol	Z_TYPE		56615						
ANR	56767	Symbol	exception_class		56615						
ANR	56768	Symbol	error_handling		56615						
ANR	56769	Symbol	& EG		56615						
ANR	56770	Symbol	* saved		56615						
ANR	56771	Symbol	saved -> user_handler		56615						
ANR	56772	Symbol	& saved -> user_handler		56615						
ANR	56773	Symbol	IS_UNDEF		56615						
ANR	56774	Symbol	saved -> handling		56615						
ANR	56775	Function	zend_find_alias_name	4092:0:122782:123157							
ANR	56776	FunctionDef	"zend_find_alias_name (zend_class_entry * ce , zend_string * name)"		56775	0					
ANR	56777	CompoundStatement		4093:0:122876:123157	56775	0					
ANR	56778	IdentifierDeclStatement	"zend_trait_alias * alias , * * alias_ptr ;"	4094:1:122879:122915	56775	0	True				
ANR	56779	IdentifierDecl	* alias		56775	0					
ANR	56780	IdentifierDeclType	zend_trait_alias *		56775	0					
ANR	56781	Identifier	alias		56775	1					
ANR	56782	IdentifierDecl	* * alias_ptr		56775	1					
ANR	56783	IdentifierDeclType	zend_trait_alias * *		56775	0					
ANR	56784	Identifier	alias_ptr		56775	1					
ANR	56785	IfStatement	if ( ( alias_ptr = ce -> trait_aliases ) )		56775	1					
ANR	56786	Condition	alias_ptr = ce -> trait_aliases	4096:5:122923:122953	56775	0	True				
ANR	56787	AssignmentExpression	alias_ptr = ce -> trait_aliases		56775	0		=			
ANR	56788	Identifier	alias_ptr		56775	0					
ANR	56789	PtrMemberAccess	ce -> trait_aliases		56775	1					
ANR	56790	Identifier	ce		56775	0					
ANR	56791	Identifier	trait_aliases		56775	1					
ANR	56792	CompoundStatement		4:38:79:79	56775	1					
ANR	56793	ExpressionStatement	alias = * alias_ptr	4097:2:122960:122978	56775	0	True				
ANR	56794	AssignmentExpression	alias = * alias_ptr		56775	0		=			
ANR	56795	Identifier	alias		56775	0					
ANR	56796	UnaryOperationExpression	* alias_ptr		56775	1					
ANR	56797	UnaryOperator	*		56775	0					
ANR	56798	Identifier	alias_ptr		56775	1					
ANR	56799	WhileStatement	while ( alias )		56775	1					
ANR	56800	Condition	alias	4098:9:122989:122993	56775	0	True				
ANR	56801	Identifier	alias		56775	0					
ANR	56802	CompoundStatement		6:16:119:119	56775	1					
ANR	56803	IfStatement	"if ( alias -> alias && zend_string_equals_ci ( alias -> alias , name ) )"		56775	0					
ANR	56804	Condition	"alias -> alias && zend_string_equals_ci ( alias -> alias , name )"	4099:7:123005:123061	56775	0	True				
ANR	56805	AndExpression	"alias -> alias && zend_string_equals_ci ( alias -> alias , name )"		56775	0		&&			
ANR	56806	PtrMemberAccess	alias -> alias		56775	0					
ANR	56807	Identifier	alias		56775	0					
ANR	56808	Identifier	alias		56775	1					
ANR	56809	CallExpression	"zend_string_equals_ci ( alias -> alias , name )"		56775	1					
ANR	56810	Callee	zend_string_equals_ci		56775	0					
ANR	56811	Identifier	zend_string_equals_ci		56775	0					
ANR	56812	ArgumentList	alias -> alias		56775	1					
ANR	56813	Argument	alias -> alias		56775	0					
ANR	56814	PtrMemberAccess	alias -> alias		56775	0					
ANR	56815	Identifier	alias		56775	0					
ANR	56816	Identifier	alias		56775	1					
ANR	56817	Argument	name		56775	1					
ANR	56818	Identifier	name		56775	0					
ANR	56819	CompoundStatement		7:66:187:187	56775	1					
ANR	56820	ReturnStatement	return alias -> alias ;	4100:4:123070:123089	56775	0	True				
ANR	56821	PtrMemberAccess	alias -> alias		56775	0					
ANR	56822	Identifier	alias		56775	0					
ANR	56823	Identifier	alias		56775	1					
ANR	56824	ExpressionStatement	alias_ptr ++	4102:3:123099:123110	56775	1	True				
ANR	56825	PostIncDecOperationExpression	alias_ptr ++		56775	0					
ANR	56826	Identifier	alias_ptr		56775	0					
ANR	56827	IncDec	++		56775	1					
ANR	56828	ExpressionStatement	alias = * alias_ptr	4103:3:123115:123133	56775	2	True				
ANR	56829	AssignmentExpression	alias = * alias_ptr		56775	0		=			
ANR	56830	Identifier	alias		56775	0					
ANR	56831	UnaryOperationExpression	* alias_ptr		56775	1					
ANR	56832	UnaryOperator	*		56775	0					
ANR	56833	Identifier	alias_ptr		56775	1					
ANR	56834	ReturnStatement	return name ;	4107:1:123144:123155	56775	2	True				
ANR	56835	Identifier	name		56775	0					
ANR	56836	ReturnType	ZEND_API zend_string *		56775	1					
ANR	56837	Identifier	zend_find_alias_name		56775	2					
ANR	56838	ParameterList	"zend_class_entry * ce , zend_string * name"		56775	3					
ANR	56839	Parameter	zend_class_entry * ce	4092:43:122825:122844	56775	0	True				
ANR	56840	ParameterType	zend_class_entry *		56775	0					
ANR	56841	Identifier	ce		56775	1					
ANR	56842	Parameter	zend_string * name	4092:65:122847:122863	56775	1	True				
ANR	56843	ParameterType	zend_string *		56775	0					
ANR	56844	Identifier	name		56775	1					
ANR	56845	CFGEntryNode	ENTRY		56775		True				
ANR	56846	CFGExitNode	EXIT		56775		True				
ANR	56847	Symbol	* alias		56775						
ANR	56848	Symbol	ce		56775						
ANR	56849	Symbol	ce -> trait_aliases		56775						
ANR	56850	Symbol	zend_string_equals_ci		56775						
ANR	56851	Symbol	name		56775						
ANR	56852	Symbol	alias		56775						
ANR	56853	Symbol	* ce		56775						
ANR	56854	Symbol	alias_ptr		56775						
ANR	56855	Symbol	alias -> alias		56775						
ANR	56856	Symbol	* alias_ptr		56775						
ANR	56857	Function	zend_resolve_method_name	4111:0:123170:124058							
ANR	56858	FunctionDef	"zend_resolve_method_name (zend_class_entry * ce , zend_function * f)"		56857	0					
ANR	56859	CompoundStatement		4112:0:123267:124058	56857	0					
ANR	56860	IdentifierDeclStatement	zend_function * func ;	4113:1:123270:123289	56857	0	True				
ANR	56861	IdentifierDecl	* func		56857	0					
ANR	56862	IdentifierDeclType	zend_function *		56857	0					
ANR	56863	Identifier	func		56857	1					
ANR	56864	IdentifierDeclStatement	HashTable * function_table ;	4114:1:123292:123317	56857	1	True				
ANR	56865	IdentifierDecl	* function_table		56857	0					
ANR	56866	IdentifierDeclType	HashTable *		56857	0					
ANR	56867	Identifier	function_table		56857	1					
ANR	56868	IdentifierDeclStatement	zend_string * name ;	4115:1:123320:123337	56857	2	True				
ANR	56869	IdentifierDecl	* name		56857	0					
ANR	56870	IdentifierDeclType	zend_string *		56857	0					
ANR	56871	Identifier	name		56857	1					
ANR	56872	IfStatement	if ( f -> common . type != ZEND_USER_FUNCTION || ( f -> op_array . refcount && * ( f -> op_array . refcount ) < 2 ) || ! f -> common . scope || ! f -> common . scope -> trait_aliases )		56857	3					
ANR	56873	Condition	f -> common . type != ZEND_USER_FUNCTION || ( f -> op_array . refcount && * ( f -> op_array . refcount ) < 2 ) || ! f -> common . scope || ! f -> common . scope -> trait_aliases	4117:5:123345:123507	56857	0	True				
ANR	56874	OrExpression	f -> common . type != ZEND_USER_FUNCTION || ( f -> op_array . refcount && * ( f -> op_array . refcount ) < 2 ) || ! f -> common . scope || ! f -> common . scope -> trait_aliases		56857	0		||			
ANR	56875	EqualityExpression	f -> common . type != ZEND_USER_FUNCTION		56857	0		!=			
ANR	56876	MemberAccess	f -> common . type		56857	0					
ANR	56877	PtrMemberAccess	f -> common		56857	0					
ANR	56878	Identifier	f		56857	0					
ANR	56879	Identifier	common		56857	1					
ANR	56880	Identifier	type		56857	1					
ANR	56881	Identifier	ZEND_USER_FUNCTION		56857	1					
ANR	56882	OrExpression	( f -> op_array . refcount && * ( f -> op_array . refcount ) < 2 ) || ! f -> common . scope || ! f -> common . scope -> trait_aliases		56857	1		||			
ANR	56883	AndExpression	f -> op_array . refcount && * ( f -> op_array . refcount ) < 2		56857	0		&&			
ANR	56884	MemberAccess	f -> op_array . refcount		56857	0					
ANR	56885	PtrMemberAccess	f -> op_array		56857	0					
ANR	56886	Identifier	f		56857	0					
ANR	56887	Identifier	op_array		56857	1					
ANR	56888	Identifier	refcount		56857	1					
ANR	56889	RelationalExpression	* ( f -> op_array . refcount ) < 2		56857	1		<			
ANR	56890	UnaryOperationExpression	* ( f -> op_array . refcount )		56857	0					
ANR	56891	UnaryOperator	*		56857	0					
ANR	56892	MemberAccess	f -> op_array . refcount		56857	1					
ANR	56893	PtrMemberAccess	f -> op_array		56857	0					
ANR	56894	Identifier	f		56857	0					
ANR	56895	Identifier	op_array		56857	1					
ANR	56896	Identifier	refcount		56857	1					
ANR	56897	PrimaryExpression	2		56857	1					
ANR	56898	OrExpression	! f -> common . scope || ! f -> common . scope -> trait_aliases		56857	1		||			
ANR	56899	UnaryOperationExpression	! f -> common . scope		56857	0					
ANR	56900	UnaryOperator	!		56857	0					
ANR	56901	MemberAccess	f -> common . scope		56857	1					
ANR	56902	PtrMemberAccess	f -> common		56857	0					
ANR	56903	Identifier	f		56857	0					
ANR	56904	Identifier	common		56857	1					
ANR	56905	Identifier	scope		56857	1					
ANR	56906	UnaryOperationExpression	! f -> common . scope -> trait_aliases		56857	1					
ANR	56907	UnaryOperator	!		56857	0					
ANR	56908	PtrMemberAccess	f -> common . scope -> trait_aliases		56857	1					
ANR	56909	MemberAccess	f -> common . scope		56857	0					
ANR	56910	PtrMemberAccess	f -> common		56857	0					
ANR	56911	Identifier	f		56857	0					
ANR	56912	Identifier	common		56857	1					
ANR	56913	Identifier	scope		56857	1					
ANR	56914	Identifier	trait_aliases		56857	1					
ANR	56915	CompoundStatement		9:38:242:242	56857	1					
ANR	56916	ReturnStatement	return f -> common . function_name ;	4121:2:123514:123544	56857	0	True				
ANR	56917	MemberAccess	f -> common . function_name		56857	0					
ANR	56918	PtrMemberAccess	f -> common		56857	0					
ANR	56919	Identifier	f		56857	0					
ANR	56920	Identifier	common		56857	1					
ANR	56921	Identifier	function_name		56857	1					
ANR	56922	ExpressionStatement	function_table = & ce -> function_table	4124:1:123551:123587	56857	4	True				
ANR	56923	AssignmentExpression	function_table = & ce -> function_table		56857	0		=			
ANR	56924	Identifier	function_table		56857	0					
ANR	56925	UnaryOperationExpression	& ce -> function_table		56857	1					
ANR	56926	UnaryOperator	&		56857	0					
ANR	56927	PtrMemberAccess	ce -> function_table		56857	1					
ANR	56928	Identifier	ce		56857	0					
ANR	56929	Identifier	function_table		56857	1					
ANR	56930	Statement	ZEND_HASH_FOREACH_STR_KEY_PTR	4125:1:123590:123618	56857	5	True				
ANR	56931	Statement	(	4125:30:123619:123619	56857	6	True				
ANR	56932	Statement	function_table	4125:31:123620:123633	56857	7	True				
ANR	56933	Statement	","	4125:45:123634:123634	56857	8	True				
ANR	56934	Statement	name	4125:47:123636:123639	56857	9	True				
ANR	56935	Statement	","	4125:51:123640:123640	56857	10	True				
ANR	56936	Statement	func	4125:53:123642:123645	56857	11	True				
ANR	56937	Statement	)	4125:57:123646:123646	56857	12	True				
ANR	56938	CompoundStatement		14:59:380:380	56857	13					
ANR	56939	IfStatement	if ( func == f )		56857	0					
ANR	56940	Condition	func == f	4126:6:123656:123664	56857	0	True				
ANR	56941	EqualityExpression	func == f		56857	0		==			
ANR	56942	Identifier	func		56857	0					
ANR	56943	Identifier	f		56857	1					
ANR	56944	CompoundStatement		15:17:399:399	56857	1					
ANR	56945	IfStatement	if ( ! name )		56857	0					
ANR	56946	Condition	! name	4127:7:123676:123680	56857	0	True				
ANR	56947	UnaryOperationExpression	! name		56857	0					
ANR	56948	UnaryOperator	!		56857	0					
ANR	56949	Identifier	name		56857	1					
ANR	56950	CompoundStatement		16:14:415:415	56857	1					
ANR	56951	ReturnStatement	return f -> common . function_name ;	4128:4:123689:123719	56857	0	True				
ANR	56952	MemberAccess	f -> common . function_name		56857	0					
ANR	56953	PtrMemberAccess	f -> common		56857	0					
ANR	56954	Identifier	f		56857	0					
ANR	56955	Identifier	common		56857	1					
ANR	56956	Identifier	function_name		56857	1					
ANR	56957	IfStatement	"if ( ZSTR_LEN ( name ) == ZSTR_LEN ( f -> common . function_name ) && ! strncasecmp ( ZSTR_VAL ( name ) , ZSTR_VAL ( f -> common . function_name ) , ZSTR_LEN ( f -> common . function_name ) ) )"		56857	1					
ANR	56958	Condition	"ZSTR_LEN ( name ) == ZSTR_LEN ( f -> common . function_name ) && ! strncasecmp ( ZSTR_VAL ( name ) , ZSTR_VAL ( f -> common . function_name ) , ZSTR_LEN ( f -> common . function_name ) )"	4130:7:123733:123892	56857	0	True				
ANR	56959	AndExpression	"ZSTR_LEN ( name ) == ZSTR_LEN ( f -> common . function_name ) && ! strncasecmp ( ZSTR_VAL ( name ) , ZSTR_VAL ( f -> common . function_name ) , ZSTR_LEN ( f -> common . function_name ) )"		56857	0		&&			
ANR	56960	EqualityExpression	ZSTR_LEN ( name ) == ZSTR_LEN ( f -> common . function_name )		56857	0		==			
ANR	56961	CallExpression	ZSTR_LEN ( name )		56857	0					
ANR	56962	Callee	ZSTR_LEN		56857	0					
ANR	56963	Identifier	ZSTR_LEN		56857	0					
ANR	56964	ArgumentList	name		56857	1					
ANR	56965	Argument	name		56857	0					
ANR	56966	Identifier	name		56857	0					
ANR	56967	CallExpression	ZSTR_LEN ( f -> common . function_name )		56857	1					
ANR	56968	Callee	ZSTR_LEN		56857	0					
ANR	56969	Identifier	ZSTR_LEN		56857	0					
ANR	56970	ArgumentList	f -> common . function_name		56857	1					
ANR	56971	Argument	f -> common . function_name		56857	0					
ANR	56972	MemberAccess	f -> common . function_name		56857	0					
ANR	56973	PtrMemberAccess	f -> common		56857	0					
ANR	56974	Identifier	f		56857	0					
ANR	56975	Identifier	common		56857	1					
ANR	56976	Identifier	function_name		56857	1					
ANR	56977	UnaryOperationExpression	"! strncasecmp ( ZSTR_VAL ( name ) , ZSTR_VAL ( f -> common . function_name ) , ZSTR_LEN ( f -> common . function_name ) )"		56857	1					
ANR	56978	UnaryOperator	!		56857	0					
ANR	56979	CallExpression	"strncasecmp ( ZSTR_VAL ( name ) , ZSTR_VAL ( f -> common . function_name ) , ZSTR_LEN ( f -> common . function_name ) )"		56857	1					
ANR	56980	Callee	strncasecmp		56857	0					
ANR	56981	Identifier	strncasecmp		56857	0					
ANR	56982	ArgumentList	ZSTR_VAL ( name )		56857	1					
ANR	56983	Argument	ZSTR_VAL ( name )		56857	0					
ANR	56984	CallExpression	ZSTR_VAL ( name )		56857	0					
ANR	56985	Callee	ZSTR_VAL		56857	0					
ANR	56986	Identifier	ZSTR_VAL		56857	0					
ANR	56987	ArgumentList	name		56857	1					
ANR	56988	Argument	name		56857	0					
ANR	56989	Identifier	name		56857	0					
ANR	56990	Argument	ZSTR_VAL ( f -> common . function_name )		56857	1					
ANR	56991	CallExpression	ZSTR_VAL ( f -> common . function_name )		56857	0					
ANR	56992	Callee	ZSTR_VAL		56857	0					
ANR	56993	Identifier	ZSTR_VAL		56857	0					
ANR	56994	ArgumentList	f -> common . function_name		56857	1					
ANR	56995	Argument	f -> common . function_name		56857	0					
ANR	56996	MemberAccess	f -> common . function_name		56857	0					
ANR	56997	PtrMemberAccess	f -> common		56857	0					
ANR	56998	Identifier	f		56857	0					
ANR	56999	Identifier	common		56857	1					
ANR	57000	Identifier	function_name		56857	1					
ANR	57001	Argument	ZSTR_LEN ( f -> common . function_name )		56857	2					
ANR	57002	CallExpression	ZSTR_LEN ( f -> common . function_name )		56857	0					
ANR	57003	Callee	ZSTR_LEN		56857	0					
ANR	57004	Identifier	ZSTR_LEN		56857	0					
ANR	57005	ArgumentList	f -> common . function_name		56857	1					
ANR	57006	Argument	f -> common . function_name		56857	0					
ANR	57007	MemberAccess	f -> common . function_name		56857	0					
ANR	57008	PtrMemberAccess	f -> common		56857	0					
ANR	57009	Identifier	f		56857	0					
ANR	57010	Identifier	common		56857	1					
ANR	57011	Identifier	function_name		56857	1					
ANR	57012	CompoundStatement		20:107:627:627	56857	1					
ANR	57013	ReturnStatement	return f -> common . function_name ;	4132:4:123901:123931	56857	0	True				
ANR	57014	MemberAccess	f -> common . function_name		56857	0					
ANR	57015	PtrMemberAccess	f -> common		56857	0					
ANR	57016	Identifier	f		56857	0					
ANR	57017	Identifier	common		56857	1					
ANR	57018	Identifier	function_name		56857	1					
ANR	57019	ReturnStatement	"return zend_find_alias_name ( f -> common . scope , name ) ;"	4134:3:123941:123991	56857	2	True				
ANR	57020	CallExpression	"zend_find_alias_name ( f -> common . scope , name )"		56857	0					
ANR	57021	Callee	zend_find_alias_name		56857	0					
ANR	57022	Identifier	zend_find_alias_name		56857	0					
ANR	57023	ArgumentList	f -> common . scope		56857	1					
ANR	57024	Argument	f -> common . scope		56857	0					
ANR	57025	MemberAccess	f -> common . scope		56857	0					
ANR	57026	PtrMemberAccess	f -> common		56857	0					
ANR	57027	Identifier	f		56857	0					
ANR	57028	Identifier	common		56857	1					
ANR	57029	Identifier	scope		56857	1					
ANR	57030	Argument	name		56857	1					
ANR	57031	Identifier	name		56857	0					
ANR	57032	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	4136:3:124000:124023	56857	14	True				
ANR	57033	CallExpression	ZEND_HASH_FOREACH_END ( )		56857	0					
ANR	57034	Callee	ZEND_HASH_FOREACH_END		56857	0					
ANR	57035	Identifier	ZEND_HASH_FOREACH_END		56857	0					
ANR	57036	ArgumentList			56857	1					
ANR	57037	ReturnStatement	return f -> common . function_name ;	4137:1:124026:124056	56857	15	True				
ANR	57038	MemberAccess	f -> common . function_name		56857	0					
ANR	57039	PtrMemberAccess	f -> common		56857	0					
ANR	57040	Identifier	f		56857	0					
ANR	57041	Identifier	common		56857	1					
ANR	57042	Identifier	function_name		56857	1					
ANR	57043	ReturnType	ZEND_API zend_string *		56857	1					
ANR	57044	Identifier	zend_resolve_method_name		56857	2					
ANR	57045	ParameterList	"zend_class_entry * ce , zend_function * f"		56857	3					
ANR	57046	Parameter	zend_class_entry * ce	4111:47:123217:123236	56857	0	True				
ANR	57047	ParameterType	zend_class_entry *		56857	0					
ANR	57048	Identifier	ce		56857	1					
ANR	57049	Parameter	zend_function * f	4111:69:123239:123254	56857	1	True				
ANR	57050	ParameterType	zend_function *		56857	0					
ANR	57051	Identifier	f		56857	1					
ANR	57052	CFGEntryNode	ENTRY		56857		True				
ANR	57053	CFGExitNode	EXIT		56857		True				
ANR	57054	Symbol	* ( f -> op_array . refcount )		56857						
ANR	57055	Symbol	* f -> common . scope		56857						
ANR	57056	Symbol	f -> op_array . refcount		56857						
ANR	57057	Symbol	strncasecmp		56857						
ANR	57058	Symbol	& ce -> function_table		56857						
ANR	57059	Symbol	f -> common . function_name		56857						
ANR	57060	Symbol	* f -> common		56857						
ANR	57061	Symbol	ZEND_USER_FUNCTION		56857						
ANR	57062	Symbol	f -> common . scope -> trait_aliases		56857						
ANR	57063	Symbol	* f -> op_array . refcount		56857						
ANR	57064	Symbol	ce		56857						
ANR	57065	Symbol	f -> common		56857						
ANR	57066	Symbol	* * f		56857						
ANR	57067	Symbol	f		56857						
ANR	57068	Symbol	f -> op_array		56857						
ANR	57069	Symbol	* f -> op_array		56857						
ANR	57070	Symbol	f -> common . type		56857						
ANR	57071	Symbol	ZSTR_VAL		56857						
ANR	57072	Symbol	zend_find_alias_name		56857						
ANR	57073	Symbol	* f		56857						
ANR	57074	Symbol	func		56857						
ANR	57075	Symbol	f -> common . scope		56857						
ANR	57076	Symbol	name		56857						
ANR	57077	Symbol	ZSTR_LEN		56857						
ANR	57078	Symbol	function_table		56857						
ANR	57079	Function	zend_get_object_type	4141:9:124080:124310							
ANR	57080	FunctionDef	zend_get_object_type (const zend_class_entry * ce)		57079	0					
ANR	57081	CompoundStatement		4142:0:124151:124310	57079	0					
ANR	57082	IfStatement	if ( ce -> ce_flags & ZEND_ACC_TRAIT )		57079	0					
ANR	57083	Condition	ce -> ce_flags & ZEND_ACC_TRAIT	4143:4:124157:124185	57079	0	True				
ANR	57084	BitAndExpression	ce -> ce_flags & ZEND_ACC_TRAIT		57079	0		&			
ANR	57085	PtrMemberAccess	ce -> ce_flags		57079	0					
ANR	57086	Identifier	ce		57079	0					
ANR	57087	Identifier	ce_flags		57079	1					
ANR	57088	Identifier	ZEND_ACC_TRAIT		57079	1					
ANR	57089	CompoundStatement		2:35:36:36	57079	1					
ANR	57090	ReturnStatement	"return ""trait"" ;"	4144:2:124192:124206	57079	0	True				
ANR	57091	PrimaryExpression	"""trait"""		57079	0					
ANR	57092	ElseStatement	else		57079	0					
ANR	57093	IfStatement	if ( ce -> ce_flags & ZEND_ACC_INTERFACE )		57079	0					
ANR	57094	Condition	ce -> ce_flags & ZEND_ACC_INTERFACE	4145:12:124220:124252	57079	0	True				
ANR	57095	BitAndExpression	ce -> ce_flags & ZEND_ACC_INTERFACE		57079	0		&			
ANR	57096	PtrMemberAccess	ce -> ce_flags		57079	0					
ANR	57097	Identifier	ce		57079	0					
ANR	57098	Identifier	ce_flags		57079	1					
ANR	57099	Identifier	ZEND_ACC_INTERFACE		57079	1					
ANR	57100	CompoundStatement		4:47:103:103	57079	1					
ANR	57101	ReturnStatement	"return ""interface"" ;"	4146:2:124259:124277	57079	0	True				
ANR	57102	PrimaryExpression	"""interface"""		57079	0					
ANR	57103	ElseStatement	else		57079	0					
ANR	57104	CompoundStatement		6:8:135:135	57079	0					
ANR	57105	ReturnStatement	"return ""class"" ;"	4148:2:124291:124305	57079	0	True				
ANR	57106	PrimaryExpression	"""class"""		57079	0					
ANR	57107	ReturnType	const char *		57079	1					
ANR	57108	Identifier	zend_get_object_type		57079	2					
ANR	57109	ParameterList	const zend_class_entry * ce		57079	3					
ANR	57110	Parameter	const zend_class_entry * ce	4141:42:124113:124138	57079	0	True				
ANR	57111	ParameterType	const zend_class_entry *		57079	0					
ANR	57112	Identifier	ce		57079	1					
ANR	57113	CFGEntryNode	ENTRY		57079		True				
ANR	57114	CFGExitNode	EXIT		57079		True				
ANR	57115	Symbol	ce -> ce_flags		57079						
ANR	57116	Symbol	ce		57079						
ANR	57117	Symbol	* ce		57079						
ANR	57118	Symbol	ZEND_ACC_INTERFACE		57079						
ANR	57119	Symbol	ZEND_ACC_TRAIT		57079						
