command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1157762	File	data/converged/CVE-2015-8617_php-src/ext_mbstring_oniguruma_enc_utf32_be.c								
ANR	1157763	Function	utf32be_is_mbc_newline	38:0:1685:2178							
ANR	1157764	FunctionDef	"utf32be_is_mbc_newline (const UChar * p , const UChar * end)"		1157763	0					
ANR	1157765	CompoundStatement		40:0:1753:2178	1157763	0					
ANR	1157766	IfStatement	if ( p + 3 < end )		1157763	0					
ANR	1157767	Condition	p + 3 < end	41:6:1761:1771	1157763	0	True				
ANR	1157768	RelationalExpression	p + 3 < end		1157763	0		<			
ANR	1157769	AdditiveExpression	p + 3		1157763	0		+			
ANR	1157770	Identifier	p		1157763	0					
ANR	1157771	PrimaryExpression	3		1157763	1					
ANR	1157772	Identifier	end		1157763	1					
ANR	1157773	CompoundStatement		2:19:20:20	1157763	1					
ANR	1157774	IfStatement	if ( * ( p + 3 ) == 0x0a && * ( p + 2 ) == 0 && * ( p + 1 ) == 0 && * p == 0 )		1157763	0					
ANR	1157775	Condition	* ( p + 3 ) == 0x0a && * ( p + 2 ) == 0 && * ( p + 1 ) == 0 && * p == 0	42:8:1784:1838	1157763	0	True				
ANR	1157776	AndExpression	* ( p + 3 ) == 0x0a && * ( p + 2 ) == 0 && * ( p + 1 ) == 0 && * p == 0		1157763	0		&&			
ANR	1157777	EqualityExpression	* ( p + 3 ) == 0x0a		1157763	0		==			
ANR	1157778	UnaryOperationExpression	* ( p + 3 )		1157763	0					
ANR	1157779	UnaryOperator	*		1157763	0					
ANR	1157780	AdditiveExpression	p + 3		1157763	1		+			
ANR	1157781	Identifier	p		1157763	0					
ANR	1157782	PrimaryExpression	3		1157763	1					
ANR	1157783	PrimaryExpression	0x0a		1157763	1					
ANR	1157784	AndExpression	* ( p + 2 ) == 0 && * ( p + 1 ) == 0 && * p == 0		1157763	1		&&			
ANR	1157785	EqualityExpression	* ( p + 2 ) == 0		1157763	0		==			
ANR	1157786	UnaryOperationExpression	* ( p + 2 )		1157763	0					
ANR	1157787	UnaryOperator	*		1157763	0					
ANR	1157788	AdditiveExpression	p + 2		1157763	1		+			
ANR	1157789	Identifier	p		1157763	0					
ANR	1157790	PrimaryExpression	2		1157763	1					
ANR	1157791	PrimaryExpression	0		1157763	1					
ANR	1157792	AndExpression	* ( p + 1 ) == 0 && * p == 0		1157763	1		&&			
ANR	1157793	EqualityExpression	* ( p + 1 ) == 0		1157763	0		==			
ANR	1157794	UnaryOperationExpression	* ( p + 1 )		1157763	0					
ANR	1157795	UnaryOperator	*		1157763	0					
ANR	1157796	AdditiveExpression	p + 1		1157763	1		+			
ANR	1157797	Identifier	p		1157763	0					
ANR	1157798	PrimaryExpression	1		1157763	1					
ANR	1157799	PrimaryExpression	0		1157763	1					
ANR	1157800	EqualityExpression	* p == 0		1157763	1		==			
ANR	1157801	UnaryOperationExpression	* p		1157763	0					
ANR	1157802	UnaryOperator	*		1157763	0					
ANR	1157803	Identifier	p		1157763	1					
ANR	1157804	PrimaryExpression	0		1157763	1					
ANR	1157805	ReturnStatement	return 1 ;	43:6:1847:1855	1157763	1	True				
ANR	1157806	PrimaryExpression	1		1157763	0					
ANR	1157807	Statement	if	45:4:1901:1902	1157763	1	True				
ANR	1157808	Statement	(	45:7:1904:1904	1157763	2	True				
ANR	1157809	Statement	(	45:8:1905:1905	1157763	3	True				
ANR	1157810	Statement	*	47:2:1945:1945	1157763	4	True				
ANR	1157811	Statement	(	47:3:1946:1946	1157763	5	True				
ANR	1157812	Statement	p	47:4:1947:1947	1157763	6	True				
ANR	1157813	Statement	+	47:5:1948:1948	1157763	7	True				
ANR	1157814	Statement	3	47:6:1949:1949	1157763	8	True				
ANR	1157815	Statement	)	47:7:1950:1950	1157763	9	True				
ANR	1157816	Statement	==	47:9:1952:1953	1157763	10	True				
ANR	1157817	Statement	0x0d	47:12:1955:1958	1157763	11	True				
ANR	1157818	Statement	||	47:17:1960:1961	1157763	12	True				
ANR	1157819	Statement	*	49:2:1972:1972	1157763	13	True				
ANR	1157820	Statement	(	49:3:1973:1973	1157763	14	True				
ANR	1157821	Statement	p	49:4:1974:1974	1157763	15	True				
ANR	1157822	Statement	+	49:5:1975:1975	1157763	16	True				
ANR	1157823	Statement	3	49:6:1976:1976	1157763	17	True				
ANR	1157824	Statement	)	49:7:1977:1977	1157763	18	True				
ANR	1157825	Statement	==	49:9:1979:1980	1157763	19	True				
ANR	1157826	Statement	0x85	49:12:1982:1985	1157763	20	True				
ANR	1157827	Statement	)	49:16:1986:1986	1157763	21	True				
ANR	1157828	Statement	&&	50:1:1989:1990	1157763	22	True				
ANR	1157829	Statement	*	50:4:1992:1992	1157763	23	True				
ANR	1157830	Statement	(	50:5:1993:1993	1157763	24	True				
ANR	1157831	Statement	p	50:6:1994:1994	1157763	25	True				
ANR	1157832	Statement	+	50:7:1995:1995	1157763	26	True				
ANR	1157833	Statement	2	50:8:1996:1996	1157763	27	True				
ANR	1157834	Statement	)	50:9:1997:1997	1157763	28	True				
ANR	1157835	Statement	==	50:11:1999:2000	1157763	29	True				
ANR	1157836	Statement	0	50:14:2002:2002	1157763	30	True				
ANR	1157837	Statement	&&	50:16:2004:2005	1157763	31	True				
ANR	1157838	Statement	*	50:19:2007:2007	1157763	32	True				
ANR	1157839	Statement	(	50:20:2008:2008	1157763	33	True				
ANR	1157840	Statement	p	50:21:2009:2009	1157763	34	True				
ANR	1157841	Statement	+	50:22:2010:2010	1157763	35	True				
ANR	1157842	Statement	1	50:23:2011:2011	1157763	36	True				
ANR	1157843	Statement	)	50:24:2012:2012	1157763	37	True				
ANR	1157844	Statement	==	50:26:2014:2015	1157763	38	True				
ANR	1157845	Statement	0	50:29:2017:2017	1157763	39	True				
ANR	1157846	Statement	&&	50:31:2019:2020	1157763	40	True				
ANR	1157847	Statement	*	50:34:2022:2022	1157763	41	True				
ANR	1157848	Statement	p	50:35:2023:2023	1157763	42	True				
ANR	1157849	Statement	==	50:37:2025:2026	1157763	43	True				
ANR	1157850	Statement	0x00	50:40:2028:2031	1157763	44	True				
ANR	1157851	Statement	)	50:44:2032:2032	1157763	45	True				
ANR	1157852	ReturnStatement	return 1 ;	51:6:2040:2048	1157763	46	True				
ANR	1157853	PrimaryExpression	1		1157763	0					
ANR	1157854	IfStatement	if ( * ( p + 2 ) == 0x20 && ( * ( p + 3 ) == 0x29 || * ( p + 3 ) == 0x28 ) && * ( p + 1 ) == 0 && * p == 0 )		1157763	47					
ANR	1157855	Condition	* ( p + 2 ) == 0x20 && ( * ( p + 3 ) == 0x29 || * ( p + 3 ) == 0x28 ) && * ( p + 1 ) == 0 && * p == 0	52:8:2058:2136	1157763	0	True				
ANR	1157856	AndExpression	* ( p + 2 ) == 0x20 && ( * ( p + 3 ) == 0x29 || * ( p + 3 ) == 0x28 ) && * ( p + 1 ) == 0 && * p == 0		1157763	0		&&			
ANR	1157857	EqualityExpression	* ( p + 2 ) == 0x20		1157763	0		==			
ANR	1157858	UnaryOperationExpression	* ( p + 2 )		1157763	0					
ANR	1157859	UnaryOperator	*		1157763	0					
ANR	1157860	AdditiveExpression	p + 2		1157763	1		+			
ANR	1157861	Identifier	p		1157763	0					
ANR	1157862	PrimaryExpression	2		1157763	1					
ANR	1157863	PrimaryExpression	0x20		1157763	1					
ANR	1157864	AndExpression	( * ( p + 3 ) == 0x29 || * ( p + 3 ) == 0x28 ) && * ( p + 1 ) == 0 && * p == 0		1157763	1		&&			
ANR	1157865	OrExpression	* ( p + 3 ) == 0x29 || * ( p + 3 ) == 0x28		1157763	0		||			
ANR	1157866	EqualityExpression	* ( p + 3 ) == 0x29		1157763	0		==			
ANR	1157867	UnaryOperationExpression	* ( p + 3 )		1157763	0					
ANR	1157868	UnaryOperator	*		1157763	0					
ANR	1157869	AdditiveExpression	p + 3		1157763	1		+			
ANR	1157870	Identifier	p		1157763	0					
ANR	1157871	PrimaryExpression	3		1157763	1					
ANR	1157872	PrimaryExpression	0x29		1157763	1					
ANR	1157873	EqualityExpression	* ( p + 3 ) == 0x28		1157763	1		==			
ANR	1157874	UnaryOperationExpression	* ( p + 3 )		1157763	0					
ANR	1157875	UnaryOperator	*		1157763	0					
ANR	1157876	AdditiveExpression	p + 3		1157763	1		+			
ANR	1157877	Identifier	p		1157763	0					
ANR	1157878	PrimaryExpression	3		1157763	1					
ANR	1157879	PrimaryExpression	0x28		1157763	1					
ANR	1157880	AndExpression	* ( p + 1 ) == 0 && * p == 0		1157763	1		&&			
ANR	1157881	EqualityExpression	* ( p + 1 ) == 0		1157763	0		==			
ANR	1157882	UnaryOperationExpression	* ( p + 1 )		1157763	0					
ANR	1157883	UnaryOperator	*		1157763	0					
ANR	1157884	AdditiveExpression	p + 1		1157763	1		+			
ANR	1157885	Identifier	p		1157763	0					
ANR	1157886	PrimaryExpression	1		1157763	1					
ANR	1157887	PrimaryExpression	0		1157763	1					
ANR	1157888	EqualityExpression	* p == 0		1157763	1		==			
ANR	1157889	UnaryOperationExpression	* p		1157763	0					
ANR	1157890	UnaryOperator	*		1157763	0					
ANR	1157891	Identifier	p		1157763	1					
ANR	1157892	PrimaryExpression	0		1157763	1					
ANR	1157893	ReturnStatement	return 1 ;	54:6:2145:2153	1157763	1	True				
ANR	1157894	PrimaryExpression	1		1157763	0					
ANR	1157895	ReturnStatement	return 0 ;	57:2:2168:2176	1157763	1	True				
ANR	1157896	PrimaryExpression	0		1157763	0					
ANR	1157897	ReturnType	static int		1157763	1					
ANR	1157898	Identifier	utf32be_is_mbc_newline		1157763	2					
ANR	1157899	ParameterList	"const UChar * p , const UChar * end"		1157763	3					
ANR	1157900	Parameter	const UChar * p	39:23:1719:1732	1157763	0	True				
ANR	1157901	ParameterType	const UChar *		1157763	0					
ANR	1157902	Identifier	p		1157763	1					
ANR	1157903	Parameter	const UChar * end	39:39:1735:1750	1157763	1	True				
ANR	1157904	ParameterType	const UChar *		1157763	0					
ANR	1157905	Identifier	end		1157763	1					
ANR	1157906	CFGEntryNode	ENTRY		1157763		True				
ANR	1157907	CFGExitNode	EXIT		1157763		True				
ANR	1157908	Symbol	p		1157763						
ANR	1157909	Symbol	* ( p + 2 )		1157763						
ANR	1157910	Symbol	* ( p + 3 )		1157763						
ANR	1157911	Symbol	end		1157763						
ANR	1157912	Symbol	* p		1157763						
ANR	1157913	Symbol	* ( p + 1 )		1157763						
ANR	1157914	Function	utf32be_code_to_mbclen	66:0:2348:2427							
ANR	1157915	FunctionDef	utf32be_code_to_mbclen (OnigCodePoint code ARG_UNUSED)		1157914	0					
ANR	1157916	CompoundStatement		68:0:2413:2427	1157914	0					
ANR	1157917	ReturnStatement	return 4 ;	69:2:2417:2425	1157914	0	True				
ANR	1157918	PrimaryExpression	4		1157914	0					
ANR	1157919	ReturnType	static int		1157914	1					
ANR	1157920	Identifier	utf32be_code_to_mbclen		1157914	2					
ANR	1157921	ParameterList	OnigCodePoint code ARG_UNUSED		1157914	3					
ANR	1157922	Parameter	OnigCodePoint code ARG_UNUSED	67:23:2382:2410	1157914	0	True				
ANR	1157923	ParameterType	OnigCodePoint code		1157914	0					
ANR	1157924	Identifier	ARG_UNUSED		1157914	1					
ANR	1157925	CFGEntryNode	ENTRY		1157914		True				
ANR	1157926	CFGExitNode	EXIT		1157914		True				
ANR	1157927	Symbol	ARG_UNUSED		1157914						
ANR	1157928	Function	utf32be_code_to_mbc	72:0:2430:2694							
ANR	1157929	FunctionDef	"utf32be_code_to_mbc (OnigCodePoint code , UChar * buf)"		1157928	0					
ANR	1157930	CompoundStatement		74:0:2493:2694	1157928	0					
ANR	1157931	IdentifierDeclStatement	UChar * p = buf ;	75:2:2497:2511	1157928	0	True				
ANR	1157932	IdentifierDecl	* p = buf		1157928	0					
ANR	1157933	IdentifierDeclType	UChar *		1157928	0					
ANR	1157934	Identifier	p		1157928	1					
ANR	1157935	AssignmentExpression	* p = buf		1157928	2		=			
ANR	1157936	Identifier	buf		1157928	0					
ANR	1157937	Identifier	buf		1157928	1					
ANR	1157938	ExpressionStatement	* p ++ = ( UChar ) ( ( code & 0xff000000 ) >> 24 )	77:2:2516:2557	1157928	1	True				
ANR	1157939	AssignmentExpression	* p ++ = ( UChar ) ( ( code & 0xff000000 ) >> 24 )		1157928	0		=			
ANR	1157940	UnaryOperationExpression	* p ++		1157928	0					
ANR	1157941	UnaryOperator	*		1157928	0					
ANR	1157942	PostIncDecOperationExpression	p ++		1157928	1					
ANR	1157943	Identifier	p		1157928	0					
ANR	1157944	IncDec	++		1157928	1					
ANR	1157945	CastExpression	( UChar ) ( ( code & 0xff000000 ) >> 24 )		1157928	1					
ANR	1157946	CastTarget	UChar		1157928	0					
ANR	1157947	ShiftExpression	( code & 0xff000000 ) >> 24		1157928	1		>>			
ANR	1157948	BitAndExpression	code & 0xff000000		1157928	0		&			
ANR	1157949	Identifier	code		1157928	0					
ANR	1157950	PrimaryExpression	0xff000000		1157928	1					
ANR	1157951	PrimaryExpression	24		1157928	1					
ANR	1157952	ExpressionStatement	* p ++ = ( UChar ) ( ( code & 0xff0000 ) >> 16 )	78:2:2561:2602	1157928	2	True				
ANR	1157953	AssignmentExpression	* p ++ = ( UChar ) ( ( code & 0xff0000 ) >> 16 )		1157928	0		=			
ANR	1157954	UnaryOperationExpression	* p ++		1157928	0					
ANR	1157955	UnaryOperator	*		1157928	0					
ANR	1157956	PostIncDecOperationExpression	p ++		1157928	1					
ANR	1157957	Identifier	p		1157928	0					
ANR	1157958	IncDec	++		1157928	1					
ANR	1157959	CastExpression	( UChar ) ( ( code & 0xff0000 ) >> 16 )		1157928	1					
ANR	1157960	CastTarget	UChar		1157928	0					
ANR	1157961	ShiftExpression	( code & 0xff0000 ) >> 16		1157928	1		>>			
ANR	1157962	BitAndExpression	code & 0xff0000		1157928	0		&			
ANR	1157963	Identifier	code		1157928	0					
ANR	1157964	PrimaryExpression	0xff0000		1157928	1					
ANR	1157965	PrimaryExpression	16		1157928	1					
ANR	1157966	ExpressionStatement	* p ++ = ( UChar ) ( ( code & 0xff00 ) >> 8 )	79:2:2606:2647	1157928	3	True				
ANR	1157967	AssignmentExpression	* p ++ = ( UChar ) ( ( code & 0xff00 ) >> 8 )		1157928	0		=			
ANR	1157968	UnaryOperationExpression	* p ++		1157928	0					
ANR	1157969	UnaryOperator	*		1157928	0					
ANR	1157970	PostIncDecOperationExpression	p ++		1157928	1					
ANR	1157971	Identifier	p		1157928	0					
ANR	1157972	IncDec	++		1157928	1					
ANR	1157973	CastExpression	( UChar ) ( ( code & 0xff00 ) >> 8 )		1157928	1					
ANR	1157974	CastTarget	UChar		1157928	0					
ANR	1157975	ShiftExpression	( code & 0xff00 ) >> 8		1157928	1		>>			
ANR	1157976	BitAndExpression	code & 0xff00		1157928	0		&			
ANR	1157977	Identifier	code		1157928	0					
ANR	1157978	PrimaryExpression	0xff00		1157928	1					
ANR	1157979	PrimaryExpression	8		1157928	1					
ANR	1157980	ExpressionStatement	* p ++ = ( UChar ) ( code & 0xff )	80:2:2651:2680	1157928	4	True				
ANR	1157981	AssignmentExpression	* p ++ = ( UChar ) ( code & 0xff )		1157928	0		=			
ANR	1157982	UnaryOperationExpression	* p ++		1157928	0					
ANR	1157983	UnaryOperator	*		1157928	0					
ANR	1157984	PostIncDecOperationExpression	p ++		1157928	1					
ANR	1157985	Identifier	p		1157928	0					
ANR	1157986	IncDec	++		1157928	1					
ANR	1157987	CastExpression	( UChar ) ( code & 0xff )		1157928	1					
ANR	1157988	CastTarget	UChar		1157928	0					
ANR	1157989	BitAndExpression	code & 0xff		1157928	1		&			
ANR	1157990	Identifier	code		1157928	0					
ANR	1157991	PrimaryExpression	0xff		1157928	1					
ANR	1157992	ReturnStatement	return 4 ;	81:2:2684:2692	1157928	5	True				
ANR	1157993	PrimaryExpression	4		1157928	0					
ANR	1157994	ReturnType	static int		1157928	1					
ANR	1157995	Identifier	utf32be_code_to_mbc		1157928	2					
ANR	1157996	ParameterList	"OnigCodePoint code , UChar * buf"		1157928	3					
ANR	1157997	Parameter	OnigCodePoint code	73:20:2461:2478	1157928	0	True				
ANR	1157998	ParameterType	OnigCodePoint		1157928	0					
ANR	1157999	Identifier	code		1157928	1					
ANR	1158000	Parameter	UChar * buf	73:40:2481:2490	1157928	1	True				
ANR	1158001	ParameterType	UChar *		1157928	0					
ANR	1158002	Identifier	buf		1157928	1					
ANR	1158003	CFGEntryNode	ENTRY		1157928		True				
ANR	1158004	CFGExitNode	EXIT		1157928		True				
ANR	1158005	Symbol	p		1157928						
ANR	1158006	Symbol	buf		1157928						
ANR	1158007	Symbol	code		1157928						
ANR	1158008	Symbol	* p ++		1157928						
ANR	1158009	Function	utf32be_mbc_case_fold	84:0:2697:3365							
ANR	1158010	FunctionDef	"utf32be_mbc_case_fold (OnigCaseFoldType flag , const UChar * * pp , const UChar * end , UChar * fold)"		1158009	0					
ANR	1158011	CompoundStatement		87:0:2810:3365	1158009	0					
ANR	1158012	IdentifierDeclStatement	const UChar * p = * pp ;	88:2:2814:2834	1158009	0	True				
ANR	1158013	IdentifierDecl	* p = * pp		1158009	0					
ANR	1158014	IdentifierDeclType	const UChar *		1158009	0					
ANR	1158015	Identifier	p		1158009	1					
ANR	1158016	AssignmentExpression	* p = * pp		1158009	2		=			
ANR	1158017	Identifier	p		1158009	0					
ANR	1158018	UnaryOperationExpression	* pp		1158009	1					
ANR	1158019	UnaryOperator	*		1158009	0					
ANR	1158020	Identifier	pp		1158009	1					
ANR	1158021	IfStatement	if ( ONIGENC_IS_ASCII_CODE ( * ( p + 3 ) ) && * ( p + 2 ) == 0 && * ( p + 1 ) == 0 && * p == 0 )		1158009	1					
ANR	1158022	Condition	ONIGENC_IS_ASCII_CODE ( * ( p + 3 ) ) && * ( p + 2 ) == 0 && * ( p + 1 ) == 0 && * p == 0	90:6:2843:2912	1158009	0	True				
ANR	1158023	AndExpression	ONIGENC_IS_ASCII_CODE ( * ( p + 3 ) ) && * ( p + 2 ) == 0 && * ( p + 1 ) == 0 && * p == 0		1158009	0		&&			
ANR	1158024	CallExpression	ONIGENC_IS_ASCII_CODE ( * ( p + 3 ) )		1158009	0					
ANR	1158025	Callee	ONIGENC_IS_ASCII_CODE		1158009	0					
ANR	1158026	Identifier	ONIGENC_IS_ASCII_CODE		1158009	0					
ANR	1158027	ArgumentList	* ( p + 3 )		1158009	1					
ANR	1158028	Argument	* ( p + 3 )		1158009	0					
ANR	1158029	UnaryOperationExpression	* ( p + 3 )		1158009	0					
ANR	1158030	UnaryOperator	*		1158009	0					
ANR	1158031	AdditiveExpression	p + 3		1158009	1		+			
ANR	1158032	Identifier	p		1158009	0					
ANR	1158033	PrimaryExpression	3		1158009	1					
ANR	1158034	AndExpression	* ( p + 2 ) == 0 && * ( p + 1 ) == 0 && * p == 0		1158009	1		&&			
ANR	1158035	EqualityExpression	* ( p + 2 ) == 0		1158009	0		==			
ANR	1158036	UnaryOperationExpression	* ( p + 2 )		1158009	0					
ANR	1158037	UnaryOperator	*		1158009	0					
ANR	1158038	AdditiveExpression	p + 2		1158009	1		+			
ANR	1158039	Identifier	p		1158009	0					
ANR	1158040	PrimaryExpression	2		1158009	1					
ANR	1158041	PrimaryExpression	0		1158009	1					
ANR	1158042	AndExpression	* ( p + 1 ) == 0 && * p == 0		1158009	1		&&			
ANR	1158043	EqualityExpression	* ( p + 1 ) == 0		1158009	0		==			
ANR	1158044	UnaryOperationExpression	* ( p + 1 )		1158009	0					
ANR	1158045	UnaryOperator	*		1158009	0					
ANR	1158046	AdditiveExpression	p + 1		1158009	1		+			
ANR	1158047	Identifier	p		1158009	0					
ANR	1158048	PrimaryExpression	1		1158009	1					
ANR	1158049	PrimaryExpression	0		1158009	1					
ANR	1158050	EqualityExpression	* p == 0		1158009	1		==			
ANR	1158051	UnaryOperationExpression	* p		1158009	0					
ANR	1158052	UnaryOperator	*		1158009	0					
ANR	1158053	Identifier	p		1158009	1					
ANR	1158054	PrimaryExpression	0		1158009	1					
ANR	1158055	CompoundStatement		4:78:104:104	1158009	1					
ANR	1158056	ExpressionStatement	* fold ++ = 0	91:4:2921:2932	1158009	0	True				
ANR	1158057	AssignmentExpression	* fold ++ = 0		1158009	0		=			
ANR	1158058	UnaryOperationExpression	* fold ++		1158009	0					
ANR	1158059	UnaryOperator	*		1158009	0					
ANR	1158060	PostIncDecOperationExpression	fold ++		1158009	1					
ANR	1158061	Identifier	fold		1158009	0					
ANR	1158062	IncDec	++		1158009	1					
ANR	1158063	PrimaryExpression	0		1158009	1					
ANR	1158064	ExpressionStatement	* fold ++ = 0	92:4:2938:2949	1158009	1	True				
ANR	1158065	AssignmentExpression	* fold ++ = 0		1158009	0		=			
ANR	1158066	UnaryOperationExpression	* fold ++		1158009	0					
ANR	1158067	UnaryOperator	*		1158009	0					
ANR	1158068	PostIncDecOperationExpression	fold ++		1158009	1					
ANR	1158069	Identifier	fold		1158009	0					
ANR	1158070	IncDec	++		1158009	1					
ANR	1158071	PrimaryExpression	0		1158009	1					
ANR	1158072	IfStatement	if ( ( flag & ONIGENC_CASE_FOLD_TURKISH_AZERI ) != 0 )		1158009	2					
ANR	1158073	Condition	( flag & ONIGENC_CASE_FOLD_TURKISH_AZERI ) != 0	95:8:3003:3047	1158009	0	True				
ANR	1158074	EqualityExpression	( flag & ONIGENC_CASE_FOLD_TURKISH_AZERI ) != 0		1158009	0		!=			
ANR	1158075	BitAndExpression	flag & ONIGENC_CASE_FOLD_TURKISH_AZERI		1158009	0		&			
ANR	1158076	Identifier	flag		1158009	0					
ANR	1158077	Identifier	ONIGENC_CASE_FOLD_TURKISH_AZERI		1158009	1					
ANR	1158078	PrimaryExpression	0		1158009	1					
ANR	1158079	CompoundStatement		9:55:239:239	1158009	1					
ANR	1158080	IfStatement	if ( * ( p + 3 ) == 0x49 )		1158009	0					
ANR	1158081	Condition	* ( p + 3 ) == 0x49	96:10:3062:3075	1158009	0	True				
ANR	1158082	EqualityExpression	* ( p + 3 ) == 0x49		1158009	0		==			
ANR	1158083	UnaryOperationExpression	* ( p + 3 )		1158009	0					
ANR	1158084	UnaryOperator	*		1158009	0					
ANR	1158085	AdditiveExpression	p + 3		1158009	1		+			
ANR	1158086	Identifier	p		1158009	0					
ANR	1158087	PrimaryExpression	3		1158009	1					
ANR	1158088	PrimaryExpression	0x49		1158009	1					
ANR	1158089	CompoundStatement		10:26:267:267	1158009	1					
ANR	1158090	ExpressionStatement	* fold ++ = 0x01	97:1:3081:3095	1158009	0	True				
ANR	1158091	AssignmentExpression	* fold ++ = 0x01		1158009	0		=			
ANR	1158092	UnaryOperationExpression	* fold ++		1158009	0					
ANR	1158093	UnaryOperator	*		1158009	0					
ANR	1158094	PostIncDecOperationExpression	fold ++		1158009	1					
ANR	1158095	Identifier	fold		1158009	0					
ANR	1158096	IncDec	++		1158009	1					
ANR	1158097	PrimaryExpression	0x01		1158009	1					
ANR	1158098	ExpressionStatement	* fold = 0x31	98:1:3098:3112	1158009	1	True				
ANR	1158099	AssignmentExpression	* fold = 0x31		1158009	0		=			
ANR	1158100	UnaryOperationExpression	* fold		1158009	0					
ANR	1158101	UnaryOperator	*		1158009	0					
ANR	1158102	Identifier	fold		1158009	1					
ANR	1158103	PrimaryExpression	0x31		1158009	1					
ANR	1158104	ExpressionStatement	( * pp ) += 4	99:1:3115:3125	1158009	2	True				
ANR	1158105	AssignmentExpression	( * pp ) += 4		1158009	0		+=			
ANR	1158106	UnaryOperationExpression	* pp		1158009	0					
ANR	1158107	UnaryOperator	*		1158009	0					
ANR	1158108	Identifier	pp		1158009	1					
ANR	1158109	PrimaryExpression	4		1158009	1					
ANR	1158110	ReturnStatement	return 4 ;	100:1:3128:3136	1158009	3	True				
ANR	1158111	PrimaryExpression	4		1158009	0					
ANR	1158112	ExpressionStatement	* fold ++ = 0	105:4:3164:3175	1158009	3	True				
ANR	1158113	AssignmentExpression	* fold ++ = 0		1158009	0		=			
ANR	1158114	UnaryOperationExpression	* fold ++		1158009	0					
ANR	1158115	UnaryOperator	*		1158009	0					
ANR	1158116	PostIncDecOperationExpression	fold ++		1158009	1					
ANR	1158117	Identifier	fold		1158009	0					
ANR	1158118	IncDec	++		1158009	1					
ANR	1158119	PrimaryExpression	0		1158009	1					
ANR	1158120	ExpressionStatement	* fold = ONIGENC_ASCII_CODE_TO_LOWER_CASE ( * ( p + 3 ) )	106:4:3181:3231	1158009	4	True				
ANR	1158121	AssignmentExpression	* fold = ONIGENC_ASCII_CODE_TO_LOWER_CASE ( * ( p + 3 ) )		1158009	0		=			
ANR	1158122	UnaryOperationExpression	* fold		1158009	0					
ANR	1158123	UnaryOperator	*		1158009	0					
ANR	1158124	Identifier	fold		1158009	1					
ANR	1158125	CallExpression	ONIGENC_ASCII_CODE_TO_LOWER_CASE ( * ( p + 3 ) )		1158009	1					
ANR	1158126	Callee	ONIGENC_ASCII_CODE_TO_LOWER_CASE		1158009	0					
ANR	1158127	Identifier	ONIGENC_ASCII_CODE_TO_LOWER_CASE		1158009	0					
ANR	1158128	ArgumentList	* ( p + 3 )		1158009	1					
ANR	1158129	Argument	* ( p + 3 )		1158009	0					
ANR	1158130	UnaryOperationExpression	* ( p + 3 )		1158009	0					
ANR	1158131	UnaryOperator	*		1158009	0					
ANR	1158132	AdditiveExpression	p + 3		1158009	1		+			
ANR	1158133	Identifier	p		1158009	0					
ANR	1158134	PrimaryExpression	3		1158009	1					
ANR	1158135	ExpressionStatement	* pp += 4	107:4:3237:3245	1158009	5	True				
ANR	1158136	AssignmentExpression	* pp += 4		1158009	0		+=			
ANR	1158137	UnaryOperationExpression	* pp		1158009	0					
ANR	1158138	UnaryOperator	*		1158009	0					
ANR	1158139	Identifier	pp		1158009	1					
ANR	1158140	PrimaryExpression	4		1158009	1					
ANR	1158141	ReturnStatement	return 4 ;	108:4:3251:3259	1158009	6	True				
ANR	1158142	PrimaryExpression	4		1158009	0					
ANR	1158143	ElseStatement	else		1158009	0					
ANR	1158144	ReturnStatement	"return onigenc_unicode_mbc_case_fold ( ONIG_ENCODING_UTF32_BE , flag , pp , end , fold ) ;"	111:4:3276:3363	1158009	0	True				
ANR	1158145	CallExpression	"onigenc_unicode_mbc_case_fold ( ONIG_ENCODING_UTF32_BE , flag , pp , end , fold )"		1158009	0					
ANR	1158146	Callee	onigenc_unicode_mbc_case_fold		1158009	0					
ANR	1158147	Identifier	onigenc_unicode_mbc_case_fold		1158009	0					
ANR	1158148	ArgumentList	ONIG_ENCODING_UTF32_BE		1158009	1					
ANR	1158149	Argument	ONIG_ENCODING_UTF32_BE		1158009	0					
ANR	1158150	Identifier	ONIG_ENCODING_UTF32_BE		1158009	0					
ANR	1158151	Argument	flag		1158009	1					
ANR	1158152	Identifier	flag		1158009	0					
ANR	1158153	Argument	pp		1158009	2					
ANR	1158154	Identifier	pp		1158009	0					
ANR	1158155	Argument	end		1158009	3					
ANR	1158156	Identifier	end		1158009	0					
ANR	1158157	Argument	fold		1158009	4					
ANR	1158158	Identifier	fold		1158009	0					
ANR	1158159	ReturnType	static int		1158009	1					
ANR	1158160	Identifier	utf32be_mbc_case_fold		1158009	2					
ANR	1158161	ParameterList	"OnigCaseFoldType flag , const UChar * * pp , const UChar * end , UChar * fold"		1158009	3					
ANR	1158162	Parameter	OnigCaseFoldType flag	85:22:2730:2750	1158009	0	True				
ANR	1158163	ParameterType	OnigCaseFoldType		1158009	0					
ANR	1158164	Identifier	flag		1158009	1					
ANR	1158165	Parameter	const UChar * * pp	86:8:2761:2776	1158009	1	True				
ANR	1158166	ParameterType	const UChar * *		1158009	0					
ANR	1158167	Identifier	pp		1158009	1					
ANR	1158168	Parameter	const UChar * end	86:26:2779:2794	1158009	2	True				
ANR	1158169	ParameterType	const UChar *		1158009	0					
ANR	1158170	Identifier	end		1158009	1					
ANR	1158171	Parameter	UChar * fold	86:44:2797:2807	1158009	3	True				
ANR	1158172	ParameterType	UChar *		1158009	0					
ANR	1158173	Identifier	fold		1158009	1					
ANR	1158174	CFGEntryNode	ENTRY		1158009		True				
ANR	1158175	CFGExitNode	EXIT		1158009		True				
ANR	1158176	Symbol	pp		1158009						
ANR	1158177	Symbol	ONIGENC_IS_ASCII_CODE		1158009						
ANR	1158178	Symbol	flag		1158009						
ANR	1158179	Symbol	* ( p + 2 )		1158009						
ANR	1158180	Symbol	* pp		1158009						
ANR	1158181	Symbol	* ( p + 3 )		1158009						
ANR	1158182	Symbol	* fold		1158009						
ANR	1158183	Symbol	* ( p + 1 )		1158009						
ANR	1158184	Symbol	* fold ++		1158009						
ANR	1158185	Symbol	p		1158009						
ANR	1158186	Symbol	fold		1158009						
ANR	1158187	Symbol	ONIGENC_ASCII_CODE_TO_LOWER_CASE		1158009						
ANR	1158188	Symbol	ONIG_ENCODING_UTF32_BE		1158009						
ANR	1158189	Symbol	ONIGENC_CASE_FOLD_TURKISH_AZERI		1158009						
ANR	1158190	Symbol	end		1158009						
ANR	1158191	Symbol	* p		1158009						
ANR	1158192	Symbol	onigenc_unicode_mbc_case_fold		1158009						
ANR	1158193	Function	utf32be_is_mbc_ambiguous	116:0:3374:4058							
ANR	1158194	FunctionDef	"utf32be_is_mbc_ambiguous (OnigCaseFoldType flag , const UChar * * pp , const UChar * end)"		1158193	0					
ANR	1158195	CompoundStatement		118:0:3469:4058	1158193	0					
ANR	1158196	IdentifierDeclStatement	const UChar * p = * pp ;	119:2:3473:3493	1158193	0	True				
ANR	1158197	IdentifierDecl	* p = * pp		1158193	0					
ANR	1158198	IdentifierDeclType	const UChar *		1158193	0					
ANR	1158199	Identifier	p		1158193	1					
ANR	1158200	AssignmentExpression	* p = * pp		1158193	2		=			
ANR	1158201	Identifier	p		1158193	0					
ANR	1158202	UnaryOperationExpression	* pp		1158193	1					
ANR	1158203	UnaryOperator	*		1158193	0					
ANR	1158204	Identifier	pp		1158193	1					
ANR	1158205	ExpressionStatement	( * pp ) += 4	121:2:3498:3508	1158193	1	True				
ANR	1158206	AssignmentExpression	( * pp ) += 4		1158193	0		+=			
ANR	1158207	UnaryOperationExpression	* pp		1158193	0					
ANR	1158208	UnaryOperator	*		1158193	0					
ANR	1158209	Identifier	pp		1158193	1					
ANR	1158210	PrimaryExpression	4		1158193	1					
ANR	1158211	IfStatement	if ( * ( p + 2 ) == 0 && * ( p + 1 ) == 0 && * p == 0 )		1158193	2					
ANR	1158212	Condition	* ( p + 2 ) == 0 && * ( p + 1 ) == 0 && * p == 0	123:6:3517:3553	1158193	0	True				
ANR	1158213	AndExpression	* ( p + 2 ) == 0 && * ( p + 1 ) == 0 && * p == 0		1158193	0		&&			
ANR	1158214	EqualityExpression	* ( p + 2 ) == 0		1158193	0		==			
ANR	1158215	UnaryOperationExpression	* ( p + 2 )		1158193	0					
ANR	1158216	UnaryOperator	*		1158193	0					
ANR	1158217	AdditiveExpression	p + 2		1158193	1		+			
ANR	1158218	Identifier	p		1158193	0					
ANR	1158219	PrimaryExpression	2		1158193	1					
ANR	1158220	PrimaryExpression	0		1158193	1					
ANR	1158221	AndExpression	* ( p + 1 ) == 0 && * p == 0		1158193	1		&&			
ANR	1158222	EqualityExpression	* ( p + 1 ) == 0		1158193	0		==			
ANR	1158223	UnaryOperationExpression	* ( p + 1 )		1158193	0					
ANR	1158224	UnaryOperator	*		1158193	0					
ANR	1158225	AdditiveExpression	p + 1		1158193	1		+			
ANR	1158226	Identifier	p		1158193	0					
ANR	1158227	PrimaryExpression	1		1158193	1					
ANR	1158228	PrimaryExpression	0		1158193	1					
ANR	1158229	EqualityExpression	* p == 0		1158193	1		==			
ANR	1158230	UnaryOperationExpression	* p		1158193	0					
ANR	1158231	UnaryOperator	*		1158193	0					
ANR	1158232	Identifier	p		1158193	1					
ANR	1158233	PrimaryExpression	0		1158193	1					
ANR	1158234	CompoundStatement		7:4:92:100	1158193	1					
ANR	1158235	IdentifierDeclStatement	"int c , v ;"	124:4:3562:3570	1158193	0	True				
ANR	1158236	IdentifierDecl	c		1158193	0					
ANR	1158237	IdentifierDeclType	int		1158193	0					
ANR	1158238	Identifier	c		1158193	1					
ANR	1158239	IdentifierDecl	v		1158193	1					
ANR	1158240	IdentifierDeclType	int		1158193	0					
ANR	1158241	Identifier	v		1158193	1					
ANR	1158242	ExpressionStatement	p += 3	126:4:3577:3583	1158193	1	True				
ANR	1158243	AssignmentExpression	p += 3		1158193	0		+=			
ANR	1158244	Identifier	p		1158193	0					
ANR	1158245	PrimaryExpression	3		1158193	1					
ANR	1158246	IfStatement	if ( * p == 0xdf && ( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0 )		1158193	2					
ANR	1158247	Condition	* p == 0xdf && ( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0	127:8:3593:3657	1158193	0	True				
ANR	1158248	AndExpression	* p == 0xdf && ( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0		1158193	0		&&			
ANR	1158249	EqualityExpression	* p == 0xdf		1158193	0		==			
ANR	1158250	UnaryOperationExpression	* p		1158193	0					
ANR	1158251	UnaryOperator	*		1158193	0					
ANR	1158252	Identifier	p		1158193	1					
ANR	1158253	PrimaryExpression	0xdf		1158193	1					
ANR	1158254	EqualityExpression	( flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR ) != 0		1158193	1		!=			
ANR	1158255	BitAndExpression	flag & INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR		1158193	0		&			
ANR	1158256	Identifier	flag		1158193	0					
ANR	1158257	Identifier	INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR		1158193	1					
ANR	1158258	PrimaryExpression	0		1158193	1					
ANR	1158259	CompoundStatement		10:75:190:190	1158193	1					
ANR	1158260	ReturnStatement	return TRUE ;	128:6:3668:3679	1158193	0	True				
ANR	1158261	Identifier	TRUE		1158193	0					
ANR	1158262	ExpressionStatement	c = * p	131:4:3692:3698	1158193	3	True				
ANR	1158263	AssignmentExpression	c = * p		1158193	0		=			
ANR	1158264	Identifier	c		1158193	0					
ANR	1158265	UnaryOperationExpression	* p		1158193	1					
ANR	1158266	UnaryOperator	*		1158193	0					
ANR	1158267	Identifier	p		1158193	1					
ANR	1158268	ExpressionStatement	"v = ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE ( c , ( BIT_CTYPE_UPPER | BIT_CTYPE_LOWER ) )"	132:4:3704:3810	1158193	4	True				
ANR	1158269	AssignmentExpression	"v = ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE ( c , ( BIT_CTYPE_UPPER | BIT_CTYPE_LOWER ) )"		1158193	0		=			
ANR	1158270	Identifier	v		1158193	0					
ANR	1158271	CallExpression	"ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE ( c , ( BIT_CTYPE_UPPER | BIT_CTYPE_LOWER ) )"		1158193	1					
ANR	1158272	Callee	ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE		1158193	0					
ANR	1158273	Identifier	ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE		1158193	0					
ANR	1158274	ArgumentList	c		1158193	1					
ANR	1158275	Argument	c		1158193	0					
ANR	1158276	Identifier	c		1158193	0					
ANR	1158277	Argument	BIT_CTYPE_UPPER | BIT_CTYPE_LOWER		1158193	1					
ANR	1158278	InclusiveOrExpression	BIT_CTYPE_UPPER | BIT_CTYPE_LOWER		1158193	0		|			
ANR	1158279	Identifier	BIT_CTYPE_UPPER		1158193	0					
ANR	1158280	Identifier	BIT_CTYPE_LOWER		1158193	1					
ANR	1158281	IfStatement	if ( ( v | BIT_CTYPE_LOWER ) != 0 )		1158193	5					
ANR	1158282	Condition	( v | BIT_CTYPE_LOWER ) != 0	134:8:3820:3845	1158193	0	True				
ANR	1158283	EqualityExpression	( v | BIT_CTYPE_LOWER ) != 0		1158193	0		!=			
ANR	1158284	InclusiveOrExpression	v | BIT_CTYPE_LOWER		1158193	0		|			
ANR	1158285	Identifier	v		1158193	0					
ANR	1158286	Identifier	BIT_CTYPE_LOWER		1158193	1					
ANR	1158287	PrimaryExpression	0		1158193	1					
ANR	1158288	CompoundStatement		17:36:378:378	1158193	1					
ANR	1158289	IfStatement	if ( c >= 0xaa && c <= 0xba )		1158193	0					
ANR	1158290	Condition	c >= 0xaa && c <= 0xba	136:10:3931:3952	1158193	0	True				
ANR	1158291	AndExpression	c >= 0xaa && c <= 0xba		1158193	0		&&			
ANR	1158292	RelationalExpression	c >= 0xaa		1158193	0		>=			
ANR	1158293	Identifier	c		1158193	0					
ANR	1158294	PrimaryExpression	0xaa		1158193	1					
ANR	1158295	RelationalExpression	c <= 0xba		1158193	1		<=			
ANR	1158296	Identifier	c		1158193	0					
ANR	1158297	PrimaryExpression	0xba		1158193	1					
ANR	1158298	ReturnStatement	return FALSE ;	137:1:3956:3968	1158193	1	True				
ANR	1158299	Identifier	FALSE		1158193	0					
ANR	1158300	ElseStatement	else		1158193	0					
ANR	1158301	ReturnStatement	return TRUE ;	139:1:3982:3993	1158193	0	True				
ANR	1158302	Identifier	TRUE		1158193	0					
ANR	1158303	ReturnStatement	return ( v != 0 ? TRUE : FALSE ) ;	141:4:4005:4035	1158193	6	True				
ANR	1158304	ConditionalExpression	v != 0 ? TRUE : FALSE		1158193	0					
ANR	1158305	Condition	v != 0		1158193	0					
ANR	1158306	EqualityExpression	v != 0		1158193	0		!=			
ANR	1158307	Identifier	v		1158193	0					
ANR	1158308	PrimaryExpression	0		1158193	1					
ANR	1158309	Identifier	TRUE		1158193	1					
ANR	1158310	Identifier	FALSE		1158193	2					
ANR	1158311	ReturnStatement	return FALSE ;	144:2:4044:4056	1158193	3	True				
ANR	1158312	Identifier	FALSE		1158193	0					
ANR	1158313	ReturnType	static int		1158193	1					
ANR	1158314	Identifier	utf32be_is_mbc_ambiguous		1158193	2					
ANR	1158315	ParameterList	"OnigCaseFoldType flag , const UChar * * pp , const UChar * end"		1158193	3					
ANR	1158316	Parameter	OnigCaseFoldType flag	117:25:3410:3430	1158193	0	True				
ANR	1158317	ParameterType	OnigCaseFoldType		1158193	0					
ANR	1158318	Identifier	flag		1158193	1					
ANR	1158319	Parameter	const UChar * * pp	117:48:3433:3448	1158193	1	True				
ANR	1158320	ParameterType	const UChar * *		1158193	0					
ANR	1158321	Identifier	pp		1158193	1					
ANR	1158322	Parameter	const UChar * end	117:66:3451:3466	1158193	2	True				
ANR	1158323	ParameterType	const UChar *		1158193	0					
ANR	1158324	Identifier	end		1158193	1					
ANR	1158325	CFGEntryNode	ENTRY		1158193		True				
ANR	1158326	CFGExitNode	EXIT		1158193		True				
ANR	1158327	Symbol	pp		1158193						
ANR	1158328	Symbol	flag		1158193						
ANR	1158329	Symbol	c		1158193						
ANR	1158330	Symbol	* ( p + 2 )		1158193						
ANR	1158331	Symbol	* pp		1158193						
ANR	1158332	Symbol	TRUE		1158193						
ANR	1158333	Symbol	* ( p + 1 )		1158193						
ANR	1158334	Symbol	p		1158193						
ANR	1158335	Symbol	ONIGENC_IS_UNICODE_ISO_8859_1_BIT_CTYPE		1158193						
ANR	1158336	Symbol	v		1158193						
ANR	1158337	Symbol	BIT_CTYPE_LOWER		1158193						
ANR	1158338	Symbol	end		1158193						
ANR	1158339	Symbol	* p		1158193						
ANR	1158340	Symbol	INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR		1158193						
ANR	1158341	Symbol	BIT_CTYPE_UPPER		1158193						
ANR	1158342	Symbol	FALSE		1158193						
ANR	1158343	Function	utf32be_left_adjust_char_head	148:0:4068:4254							
ANR	1158344	FunctionDef	"utf32be_left_adjust_char_head (const UChar * start , const UChar * s)"		1158343	0					
ANR	1158345	CompoundStatement		150:0:4148:4254	1158343	0					
ANR	1158346	IdentifierDeclStatement	int rem ;	151:2:4152:4159	1158343	0	True				
ANR	1158347	IdentifierDecl	rem		1158343	0					
ANR	1158348	IdentifierDeclType	int		1158343	0					
ANR	1158349	Identifier	rem		1158343	1					
ANR	1158350	IfStatement	if ( s <= start )		1158343	1					
ANR	1158351	Condition	s <= start	153:6:4168:4177	1158343	0	True				
ANR	1158352	RelationalExpression	s <= start		1158343	0		<=			
ANR	1158353	Identifier	s		1158343	0					
ANR	1158354	Identifier	start		1158343	1					
ANR	1158355	ReturnStatement	return ( UChar * ) s ;	153:18:4180:4197	1158343	1	True				
ANR	1158356	CastExpression	( UChar * ) s		1158343	0					
ANR	1158357	CastTarget	UChar *		1158343	0					
ANR	1158358	Identifier	s		1158343	1					
ANR	1158359	ExpressionStatement	rem = ( s - start ) % 4	155:2:4202:4223	1158343	2	True				
ANR	1158360	AssignmentExpression	rem = ( s - start ) % 4		1158343	0		=			
ANR	1158361	Identifier	rem		1158343	0					
ANR	1158362	MultiplicativeExpression	( s - start ) % 4		1158343	1		%			
ANR	1158363	AdditiveExpression	s - start		1158343	0		-			
ANR	1158364	Identifier	s		1158343	0					
ANR	1158365	Identifier	start		1158343	1					
ANR	1158366	PrimaryExpression	4		1158343	1					
ANR	1158367	ReturnStatement	return ( UChar * ) ( s - rem ) ;	156:2:4227:4252	1158343	3	True				
ANR	1158368	CastExpression	( UChar * ) ( s - rem )		1158343	0					
ANR	1158369	CastTarget	UChar *		1158343	0					
ANR	1158370	AdditiveExpression	s - rem		1158343	1		-			
ANR	1158371	Identifier	s		1158343	0					
ANR	1158372	Identifier	rem		1158343	1					
ANR	1158373	ReturnType	static UChar *		1158343	1					
ANR	1158374	Identifier	utf32be_left_adjust_char_head		1158343	2					
ANR	1158375	ParameterList	"const UChar * start , const UChar * s"		1158343	3					
ANR	1158376	Parameter	const UChar * start	149:30:4112:4129	1158343	0	True				
ANR	1158377	ParameterType	const UChar *		1158343	0					
ANR	1158378	Identifier	start		1158343	1					
ANR	1158379	Parameter	const UChar * s	149:50:4132:4145	1158343	1	True				
ANR	1158380	ParameterType	const UChar *		1158343	0					
ANR	1158381	Identifier	s		1158343	1					
ANR	1158382	CFGEntryNode	ENTRY		1158343		True				
ANR	1158383	CFGExitNode	EXIT		1158343		True				
ANR	1158384	Symbol	s		1158343						
ANR	1158385	Symbol	start		1158343						
ANR	1158386	Symbol	rem		1158343						
ANR	1158387	Function	utf32be_get_case_fold_codes_by_str	159:0:4257:4512							
ANR	1158388	FunctionDef	"utf32be_get_case_fold_codes_by_str (OnigCaseFoldType flag , const OnigUChar * p , const OnigUChar * end , OnigCaseFoldCodeItem items [ ])"		1158387	0					
ANR	1158389	CompoundStatement		162:0:4402:4512	1158387	0					
ANR	1158390	ReturnStatement	"return onigenc_unicode_get_case_fold_codes_by_str ( ONIG_ENCODING_UTF32_BE , flag , p , end , items ) ;"	163:2:4406:4510	1158387	0	True				
ANR	1158391	CallExpression	"onigenc_unicode_get_case_fold_codes_by_str ( ONIG_ENCODING_UTF32_BE , flag , p , end , items )"		1158387	0					
ANR	1158392	Callee	onigenc_unicode_get_case_fold_codes_by_str		1158387	0					
ANR	1158393	Identifier	onigenc_unicode_get_case_fold_codes_by_str		1158387	0					
ANR	1158394	ArgumentList	ONIG_ENCODING_UTF32_BE		1158387	1					
ANR	1158395	Argument	ONIG_ENCODING_UTF32_BE		1158387	0					
ANR	1158396	Identifier	ONIG_ENCODING_UTF32_BE		1158387	0					
ANR	1158397	Argument	flag		1158387	1					
ANR	1158398	Identifier	flag		1158387	0					
ANR	1158399	Argument	p		1158387	2					
ANR	1158400	Identifier	p		1158387	0					
ANR	1158401	Argument	end		1158387	3					
ANR	1158402	Identifier	end		1158387	0					
ANR	1158403	Argument	items		1158387	4					
ANR	1158404	Identifier	items		1158387	0					
ANR	1158405	ReturnType	static int		1158387	1					
ANR	1158406	Identifier	utf32be_get_case_fold_codes_by_str		1158387	2					
ANR	1158407	ParameterList	"OnigCaseFoldType flag , const OnigUChar * p , const OnigUChar * end , OnigCaseFoldCodeItem items [ ]"		1158387	3					
ANR	1158408	Parameter	OnigCaseFoldType flag	160:35:4303:4323	1158387	0	True				
ANR	1158409	ParameterType	OnigCaseFoldType		1158387	0					
ANR	1158410	Identifier	flag		1158387	1					
ANR	1158411	Parameter	const OnigUChar * p	161:4:4330:4347	1158387	1	True				
ANR	1158412	ParameterType	const OnigUChar *		1158387	0					
ANR	1158413	Identifier	p		1158387	1					
ANR	1158414	Parameter	const OnigUChar * end	161:24:4350:4369	1158387	2	True				
ANR	1158415	ParameterType	const OnigUChar *		1158387	0					
ANR	1158416	Identifier	end		1158387	1					
ANR	1158417	Parameter	OnigCaseFoldCodeItem items [ ]	161:46:4372:4399	1158387	3	True				
ANR	1158418	ParameterType	OnigCaseFoldCodeItem [ ]		1158387	0					
ANR	1158419	Identifier	items		1158387	1					
ANR	1158420	CFGEntryNode	ENTRY		1158387		True				
ANR	1158421	CFGExitNode	EXIT		1158387		True				
ANR	1158422	Symbol	p		1158387						
ANR	1158423	Symbol	flag		1158387						
ANR	1158424	Symbol	ONIG_ENCODING_UTF32_BE		1158387						
ANR	1158425	Symbol	onigenc_unicode_get_case_fold_codes_by_str		1158387						
ANR	1158426	Symbol	end		1158387						
ANR	1158427	Symbol	items		1158387						
ANR	1158428	DeclStmt									
ANR	1158429	Decl							OnigEncodingType	OnigEncodingType	OnigEncodingUTF32_BE
