command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1682029	File	data/converged/CVE-2015-8617_php-src/ext_pcre_pcrelib_sljit_sljitNativeX86_64.c								
ANR	1682030	Function	emit_load_imm64	29:0:1499:1876							
ANR	1682031	FunctionDef	"emit_load_imm64 (struct sljit_compiler * compiler , sljit_si reg , sljit_sw imm)"		1682030	0					
ANR	1682032	CompoundStatement		30:0:1592:1876	1682030	0					
ANR	1682033	IdentifierDeclStatement	sljit_ub * inst ;	31:1:1595:1609	1682030	0	True				
ANR	1682034	IdentifierDecl	* inst		1682030	0					
ANR	1682035	IdentifierDeclType	sljit_ub *		1682030	0					
ANR	1682036	Identifier	inst		1682030	1					
ANR	1682037	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 2 + sizeof ( sljit_sw ) )"	33:1:1613:1677	1682030	1	True				
ANR	1682038	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 2 + sizeof ( sljit_sw ) )"		1682030	0		=			
ANR	1682039	Identifier	inst		1682030	0					
ANR	1682040	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 2 + sizeof ( sljit_sw ) )"		1682030	1					
ANR	1682041	CastTarget	sljit_ub *		1682030	0					
ANR	1682042	CallExpression	"ensure_buf ( compiler , 1 + 2 + sizeof ( sljit_sw ) )"		1682030	1					
ANR	1682043	Callee	ensure_buf		1682030	0					
ANR	1682044	Identifier	ensure_buf		1682030	0					
ANR	1682045	ArgumentList	compiler		1682030	1					
ANR	1682046	Argument	compiler		1682030	0					
ANR	1682047	Identifier	compiler		1682030	0					
ANR	1682048	Argument	1 + 2 + sizeof ( sljit_sw )		1682030	1					
ANR	1682049	AdditiveExpression	1 + 2 + sizeof ( sljit_sw )		1682030	0		+			
ANR	1682050	PrimaryExpression	1		1682030	0					
ANR	1682051	AdditiveExpression	2 + sizeof ( sljit_sw )		1682030	1		+			
ANR	1682052	PrimaryExpression	2		1682030	0					
ANR	1682053	SizeofExpression	sizeof ( sljit_sw )		1682030	1					
ANR	1682054	Sizeof	sizeof		1682030	0					
ANR	1682055	SizeofOperand	sljit_sw		1682030	1					
ANR	1682056	ExpressionStatement	FAIL_IF ( ! inst )	34:1:1680:1694	1682030	2	True				
ANR	1682057	CallExpression	FAIL_IF ( ! inst )		1682030	0					
ANR	1682058	Callee	FAIL_IF		1682030	0					
ANR	1682059	Identifier	FAIL_IF		1682030	0					
ANR	1682060	ArgumentList	! inst		1682030	1					
ANR	1682061	Argument	! inst		1682030	0					
ANR	1682062	UnaryOperationExpression	! inst		1682030	0					
ANR	1682063	UnaryOperator	!		1682030	0					
ANR	1682064	Identifier	inst		1682030	1					
ANR	1682065	ExpressionStatement	INC_SIZE ( 2 + sizeof ( sljit_sw ) )	35:1:1697:1727	1682030	3	True				
ANR	1682066	CallExpression	INC_SIZE ( 2 + sizeof ( sljit_sw ) )		1682030	0					
ANR	1682067	Callee	INC_SIZE		1682030	0					
ANR	1682068	Identifier	INC_SIZE		1682030	0					
ANR	1682069	ArgumentList	2 + sizeof ( sljit_sw )		1682030	1					
ANR	1682070	Argument	2 + sizeof ( sljit_sw )		1682030	0					
ANR	1682071	AdditiveExpression	2 + sizeof ( sljit_sw )		1682030	0		+			
ANR	1682072	PrimaryExpression	2		1682030	0					
ANR	1682073	SizeofExpression	sizeof ( sljit_sw )		1682030	1					
ANR	1682074	Sizeof	sizeof		1682030	0					
ANR	1682075	SizeofOperand	sljit_sw		1682030	1					
ANR	1682076	ExpressionStatement	* inst ++ = REX_W | ( ( reg_map [ reg ] <= 7 ) ? 0 : REX_B )	36:1:1730:1781	1682030	4	True				
ANR	1682077	AssignmentExpression	* inst ++ = REX_W | ( ( reg_map [ reg ] <= 7 ) ? 0 : REX_B )		1682030	0		=			
ANR	1682078	UnaryOperationExpression	* inst ++		1682030	0					
ANR	1682079	UnaryOperator	*		1682030	0					
ANR	1682080	PostIncDecOperationExpression	inst ++		1682030	1					
ANR	1682081	Identifier	inst		1682030	0					
ANR	1682082	IncDec	++		1682030	1					
ANR	1682083	InclusiveOrExpression	REX_W | ( ( reg_map [ reg ] <= 7 ) ? 0 : REX_B )		1682030	1		|			
ANR	1682084	Identifier	REX_W		1682030	0					
ANR	1682085	ConditionalExpression	( reg_map [ reg ] <= 7 ) ? 0 : REX_B		1682030	1					
ANR	1682086	Condition	reg_map [ reg ] <= 7		1682030	0					
ANR	1682087	RelationalExpression	reg_map [ reg ] <= 7		1682030	0		<=			
ANR	1682088	ArrayIndexing	reg_map [ reg ]		1682030	0					
ANR	1682089	Identifier	reg_map		1682030	0					
ANR	1682090	Identifier	reg		1682030	1					
ANR	1682091	PrimaryExpression	7		1682030	1					
ANR	1682092	PrimaryExpression	0		1682030	1					
ANR	1682093	Identifier	REX_B		1682030	2					
ANR	1682094	ExpressionStatement	* inst ++ = MOV_r_i32 + ( reg_map [ reg ] & 0x7 )	37:1:1784:1826	1682030	5	True				
ANR	1682095	AssignmentExpression	* inst ++ = MOV_r_i32 + ( reg_map [ reg ] & 0x7 )		1682030	0		=			
ANR	1682096	UnaryOperationExpression	* inst ++		1682030	0					
ANR	1682097	UnaryOperator	*		1682030	0					
ANR	1682098	PostIncDecOperationExpression	inst ++		1682030	1					
ANR	1682099	Identifier	inst		1682030	0					
ANR	1682100	IncDec	++		1682030	1					
ANR	1682101	AdditiveExpression	MOV_r_i32 + ( reg_map [ reg ] & 0x7 )		1682030	1		+			
ANR	1682102	Identifier	MOV_r_i32		1682030	0					
ANR	1682103	BitAndExpression	reg_map [ reg ] & 0x7		1682030	1		&			
ANR	1682104	ArrayIndexing	reg_map [ reg ]		1682030	0					
ANR	1682105	Identifier	reg_map		1682030	0					
ANR	1682106	Identifier	reg		1682030	1					
ANR	1682107	PrimaryExpression	0x7		1682030	1					
ANR	1682108	ExpressionStatement	* ( sljit_sw * ) inst = imm	38:1:1829:1851	1682030	6	True				
ANR	1682109	AssignmentExpression	* ( sljit_sw * ) inst = imm		1682030	0		=			
ANR	1682110	UnaryOperationExpression	* ( sljit_sw * ) inst		1682030	0					
ANR	1682111	UnaryOperator	*		1682030	0					
ANR	1682112	CastExpression	( sljit_sw * ) inst		1682030	1					
ANR	1682113	CastTarget	sljit_sw *		1682030	0					
ANR	1682114	Identifier	inst		1682030	1					
ANR	1682115	Identifier	imm		1682030	1					
ANR	1682116	ReturnStatement	return SLJIT_SUCCESS ;	39:1:1854:1874	1682030	7	True				
ANR	1682117	Identifier	SLJIT_SUCCESS		1682030	0					
ANR	1682118	ReturnType	static sljit_si		1682030	1					
ANR	1682119	Identifier	emit_load_imm64		1682030	2					
ANR	1682120	ParameterList	"struct sljit_compiler * compiler , sljit_si reg , sljit_sw imm"		1682030	3					
ANR	1682121	Parameter	struct sljit_compiler * compiler	29:32:1531:1561	1682030	0	True				
ANR	1682122	ParameterType	struct sljit_compiler *		1682030	0					
ANR	1682123	Identifier	compiler		1682030	1					
ANR	1682124	Parameter	sljit_si reg	29:65:1564:1575	1682030	1	True				
ANR	1682125	ParameterType	sljit_si		1682030	0					
ANR	1682126	Identifier	reg		1682030	1					
ANR	1682127	Parameter	sljit_sw imm	29:79:1578:1589	1682030	2	True				
ANR	1682128	ParameterType	sljit_sw		1682030	0					
ANR	1682129	Identifier	imm		1682030	1					
ANR	1682130	CFGEntryNode	ENTRY		1682030		True				
ANR	1682131	CFGExitNode	EXIT		1682030		True				
ANR	1682132	Symbol	* inst		1682030						
ANR	1682133	Symbol	imm		1682030						
ANR	1682134	Symbol	* inst ++		1682030						
ANR	1682135	Symbol	reg_map		1682030						
ANR	1682136	Symbol	MOV_r_i32		1682030						
ANR	1682137	Symbol	SLJIT_SUCCESS		1682030						
ANR	1682138	Symbol	* ( sljit_sw * ) inst		1682030						
ANR	1682139	Symbol	REX_B		1682030						
ANR	1682140	Symbol	* reg_map		1682030						
ANR	1682141	Symbol	reg		1682030						
ANR	1682142	Symbol	inst		1682030						
ANR	1682143	Symbol	ensure_buf		1682030						
ANR	1682144	Symbol	REX_W		1682030						
ANR	1682145	Symbol	compiler		1682030						
ANR	1682146	Symbol	* reg		1682030						
ANR	1682147	Function	generate_far_jump_code	42:0:1879:2561							
ANR	1682148	FunctionDef	"generate_far_jump_code (struct sljit_jump * jump , sljit_ub * code_ptr , sljit_si type)"		1682147	0					
ANR	1682149	CompoundStatement		43:0:1979:2561	1682147	0					
ANR	1682150	IfStatement	if ( type < SLJIT_JUMP )		1682147	0					
ANR	1682151	Condition	type < SLJIT_JUMP	44:5:1986:2002	1682147	0	True				
ANR	1682152	RelationalExpression	type < SLJIT_JUMP		1682147	0		<			
ANR	1682153	Identifier	type		1682147	0					
ANR	1682154	Identifier	SLJIT_JUMP		1682147	1					
ANR	1682155	CompoundStatement		2:24:25:25	1682147	1					
ANR	1682156	ExpressionStatement	* code_ptr ++ = get_jump_code ( type ^ 0x1 ) - 0x10	46:2:2030:2076	1682147	0	True				
ANR	1682157	AssignmentExpression	* code_ptr ++ = get_jump_code ( type ^ 0x1 ) - 0x10		1682147	0		=			
ANR	1682158	UnaryOperationExpression	* code_ptr ++		1682147	0					
ANR	1682159	UnaryOperator	*		1682147	0					
ANR	1682160	PostIncDecOperationExpression	code_ptr ++		1682147	1					
ANR	1682161	Identifier	code_ptr		1682147	0					
ANR	1682162	IncDec	++		1682147	1					
ANR	1682163	AdditiveExpression	get_jump_code ( type ^ 0x1 ) - 0x10		1682147	1		-			
ANR	1682164	CallExpression	get_jump_code ( type ^ 0x1 )		1682147	0					
ANR	1682165	Callee	get_jump_code		1682147	0					
ANR	1682166	Identifier	get_jump_code		1682147	0					
ANR	1682167	ArgumentList	type ^ 0x1		1682147	1					
ANR	1682168	Argument	type ^ 0x1		1682147	0					
ANR	1682169	ExclusiveOrExpression	type ^ 0x1		1682147	0		^			
ANR	1682170	Identifier	type		1682147	0					
ANR	1682171	PrimaryExpression	0x1		1682147	1					
ANR	1682172	PrimaryExpression	0x10		1682147	1					
ANR	1682173	ExpressionStatement	* code_ptr ++ = 10 + 3	47:2:2080:2100	1682147	1	True				
ANR	1682174	AssignmentExpression	* code_ptr ++ = 10 + 3		1682147	0		=			
ANR	1682175	UnaryOperationExpression	* code_ptr ++		1682147	0					
ANR	1682176	UnaryOperator	*		1682147	0					
ANR	1682177	PostIncDecOperationExpression	code_ptr ++		1682147	1					
ANR	1682178	Identifier	code_ptr		1682147	0					
ANR	1682179	IncDec	++		1682147	1					
ANR	1682180	AdditiveExpression	10 + 3		1682147	1		+			
ANR	1682181	PrimaryExpression	10		1682147	0					
ANR	1682182	PrimaryExpression	3		1682147	1					
ANR	1682183	ExpressionStatement	"SLJIT_COMPILE_ASSERT ( reg_map [ TMP_REG3 ] == 9 , tmp3_is_9_first )"	50:1:2107:2168	1682147	1	True				
ANR	1682184	CallExpression	"SLJIT_COMPILE_ASSERT ( reg_map [ TMP_REG3 ] == 9 , tmp3_is_9_first )"		1682147	0					
ANR	1682185	Callee	SLJIT_COMPILE_ASSERT		1682147	0					
ANR	1682186	Identifier	SLJIT_COMPILE_ASSERT		1682147	0					
ANR	1682187	ArgumentList	reg_map [ TMP_REG3 ] == 9		1682147	1					
ANR	1682188	Argument	reg_map [ TMP_REG3 ] == 9		1682147	0					
ANR	1682189	EqualityExpression	reg_map [ TMP_REG3 ] == 9		1682147	0		==			
ANR	1682190	ArrayIndexing	reg_map [ TMP_REG3 ]		1682147	0					
ANR	1682191	Identifier	reg_map		1682147	0					
ANR	1682192	Identifier	TMP_REG3		1682147	1					
ANR	1682193	PrimaryExpression	9		1682147	1					
ANR	1682194	Argument	tmp3_is_9_first		1682147	1					
ANR	1682195	Identifier	tmp3_is_9_first		1682147	0					
ANR	1682196	ExpressionStatement	* code_ptr ++ = REX_W | REX_B	51:1:2171:2198	1682147	2	True				
ANR	1682197	AssignmentExpression	* code_ptr ++ = REX_W | REX_B		1682147	0		=			
ANR	1682198	UnaryOperationExpression	* code_ptr ++		1682147	0					
ANR	1682199	UnaryOperator	*		1682147	0					
ANR	1682200	PostIncDecOperationExpression	code_ptr ++		1682147	1					
ANR	1682201	Identifier	code_ptr		1682147	0					
ANR	1682202	IncDec	++		1682147	1					
ANR	1682203	InclusiveOrExpression	REX_W | REX_B		1682147	1		|			
ANR	1682204	Identifier	REX_W		1682147	0					
ANR	1682205	Identifier	REX_B		1682147	1					
ANR	1682206	ExpressionStatement	* code_ptr ++ = MOV_r_i32 + 1	52:1:2201:2228	1682147	3	True				
ANR	1682207	AssignmentExpression	* code_ptr ++ = MOV_r_i32 + 1		1682147	0		=			
ANR	1682208	UnaryOperationExpression	* code_ptr ++		1682147	0					
ANR	1682209	UnaryOperator	*		1682147	0					
ANR	1682210	PostIncDecOperationExpression	code_ptr ++		1682147	1					
ANR	1682211	Identifier	code_ptr		1682147	0					
ANR	1682212	IncDec	++		1682147	1					
ANR	1682213	AdditiveExpression	MOV_r_i32 + 1		1682147	1		+			
ANR	1682214	Identifier	MOV_r_i32		1682147	0					
ANR	1682215	PrimaryExpression	1		1682147	1					
ANR	1682216	ExpressionStatement	jump -> addr = ( sljit_uw ) code_ptr	53:1:2231:2262	1682147	4	True				
ANR	1682217	AssignmentExpression	jump -> addr = ( sljit_uw ) code_ptr		1682147	0		=			
ANR	1682218	PtrMemberAccess	jump -> addr		1682147	0					
ANR	1682219	Identifier	jump		1682147	0					
ANR	1682220	Identifier	addr		1682147	1					
ANR	1682221	CastExpression	( sljit_uw ) code_ptr		1682147	1					
ANR	1682222	CastTarget	sljit_uw		1682147	0					
ANR	1682223	Identifier	code_ptr		1682147	1					
ANR	1682224	IfStatement	if ( jump -> flags & JUMP_LABEL )		1682147	5					
ANR	1682225	Condition	jump -> flags & JUMP_LABEL	55:5:2270:2293	1682147	0	True				
ANR	1682226	BitAndExpression	jump -> flags & JUMP_LABEL		1682147	0		&			
ANR	1682227	PtrMemberAccess	jump -> flags		1682147	0					
ANR	1682228	Identifier	jump		1682147	0					
ANR	1682229	Identifier	flags		1682147	1					
ANR	1682230	Identifier	JUMP_LABEL		1682147	1					
ANR	1682231	ExpressionStatement	jump -> flags |= PATCH_MD	56:2:2298:2321	1682147	1	True				
ANR	1682232	AssignmentExpression	jump -> flags |= PATCH_MD		1682147	0		|=			
ANR	1682233	PtrMemberAccess	jump -> flags		1682147	0					
ANR	1682234	Identifier	jump		1682147	0					
ANR	1682235	Identifier	flags		1682147	1					
ANR	1682236	Identifier	PATCH_MD		1682147	1					
ANR	1682237	ElseStatement	else		1682147	0					
ANR	1682238	ExpressionStatement	* ( sljit_sw * ) code_ptr = jump -> u . target	58:2:2331:2368	1682147	0	True				
ANR	1682239	AssignmentExpression	* ( sljit_sw * ) code_ptr = jump -> u . target		1682147	0		=			
ANR	1682240	UnaryOperationExpression	* ( sljit_sw * ) code_ptr		1682147	0					
ANR	1682241	UnaryOperator	*		1682147	0					
ANR	1682242	CastExpression	( sljit_sw * ) code_ptr		1682147	1					
ANR	1682243	CastTarget	sljit_sw *		1682147	0					
ANR	1682244	Identifier	code_ptr		1682147	1					
ANR	1682245	MemberAccess	jump -> u . target		1682147	1					
ANR	1682246	PtrMemberAccess	jump -> u		1682147	0					
ANR	1682247	Identifier	jump		1682147	0					
ANR	1682248	Identifier	u		1682147	1					
ANR	1682249	Identifier	target		1682147	1					
ANR	1682250	ExpressionStatement	code_ptr += sizeof ( sljit_sw )	60:1:2372:2400	1682147	6	True				
ANR	1682251	AssignmentExpression	code_ptr += sizeof ( sljit_sw )		1682147	0		+=			
ANR	1682252	Identifier	code_ptr		1682147	0					
ANR	1682253	SizeofExpression	sizeof ( sljit_sw )		1682147	1					
ANR	1682254	Sizeof	sizeof		1682147	0					
ANR	1682255	SizeofOperand	sljit_sw		1682147	1					
ANR	1682256	ExpressionStatement	* code_ptr ++ = REX_B	61:1:2403:2422	1682147	7	True				
ANR	1682257	AssignmentExpression	* code_ptr ++ = REX_B		1682147	0		=			
ANR	1682258	UnaryOperationExpression	* code_ptr ++		1682147	0					
ANR	1682259	UnaryOperator	*		1682147	0					
ANR	1682260	PostIncDecOperationExpression	code_ptr ++		1682147	1					
ANR	1682261	Identifier	code_ptr		1682147	0					
ANR	1682262	IncDec	++		1682147	1					
ANR	1682263	Identifier	REX_B		1682147	1					
ANR	1682264	ExpressionStatement	* code_ptr ++ = GROUP_FF	62:1:2425:2447	1682147	8	True				
ANR	1682265	AssignmentExpression	* code_ptr ++ = GROUP_FF		1682147	0		=			
ANR	1682266	UnaryOperationExpression	* code_ptr ++		1682147	0					
ANR	1682267	UnaryOperator	*		1682147	0					
ANR	1682268	PostIncDecOperationExpression	code_ptr ++		1682147	1					
ANR	1682269	Identifier	code_ptr		1682147	0					
ANR	1682270	IncDec	++		1682147	1					
ANR	1682271	Identifier	GROUP_FF		1682147	1					
ANR	1682272	ExpressionStatement	* code_ptr ++ = ( type >= SLJIT_FAST_CALL ) ? ( MOD_REG | CALL_rm | 1 ) : ( MOD_REG | JMP_rm | 1 )	63:1:2450:2540	1682147	9	True				
ANR	1682273	AssignmentExpression	* code_ptr ++ = ( type >= SLJIT_FAST_CALL ) ? ( MOD_REG | CALL_rm | 1 ) : ( MOD_REG | JMP_rm | 1 )		1682147	0		=			
ANR	1682274	UnaryOperationExpression	* code_ptr ++		1682147	0					
ANR	1682275	UnaryOperator	*		1682147	0					
ANR	1682276	PostIncDecOperationExpression	code_ptr ++		1682147	1					
ANR	1682277	Identifier	code_ptr		1682147	0					
ANR	1682278	IncDec	++		1682147	1					
ANR	1682279	ConditionalExpression	( type >= SLJIT_FAST_CALL ) ? ( MOD_REG | CALL_rm | 1 ) : ( MOD_REG | JMP_rm | 1 )		1682147	1					
ANR	1682280	Condition	type >= SLJIT_FAST_CALL		1682147	0					
ANR	1682281	RelationalExpression	type >= SLJIT_FAST_CALL		1682147	0		>=			
ANR	1682282	Identifier	type		1682147	0					
ANR	1682283	Identifier	SLJIT_FAST_CALL		1682147	1					
ANR	1682284	InclusiveOrExpression	MOD_REG | CALL_rm | 1		1682147	1		|			
ANR	1682285	Identifier	MOD_REG		1682147	0					
ANR	1682286	InclusiveOrExpression	CALL_rm | 1		1682147	1		|			
ANR	1682287	Identifier	CALL_rm		1682147	0					
ANR	1682288	PrimaryExpression	1		1682147	1					
ANR	1682289	InclusiveOrExpression	MOD_REG | JMP_rm | 1		1682147	2		|			
ANR	1682290	Identifier	MOD_REG		1682147	0					
ANR	1682291	InclusiveOrExpression	JMP_rm | 1		1682147	1		|			
ANR	1682292	Identifier	JMP_rm		1682147	0					
ANR	1682293	PrimaryExpression	1		1682147	1					
ANR	1682294	ReturnStatement	return code_ptr ;	65:1:2544:2559	1682147	10	True				
ANR	1682295	Identifier	code_ptr		1682147	0					
ANR	1682296	ReturnType	static sljit_ub *		1682147	1					
ANR	1682297	Identifier	generate_far_jump_code		1682147	2					
ANR	1682298	ParameterList	"struct sljit_jump * jump , sljit_ub * code_ptr , sljit_si type"		1682147	3					
ANR	1682299	Parameter	struct sljit_jump * jump	42:40:1919:1941	1682147	0	True				
ANR	1682300	ParameterType	struct sljit_jump *		1682147	0					
ANR	1682301	Identifier	jump		1682147	1					
ANR	1682302	Parameter	sljit_ub * code_ptr	42:65:1944:1961	1682147	1	True				
ANR	1682303	ParameterType	sljit_ub *		1682147	0					
ANR	1682304	Identifier	code_ptr		1682147	1					
ANR	1682305	Parameter	sljit_si type	42:85:1964:1976	1682147	2	True				
ANR	1682306	ParameterType	sljit_si		1682147	0					
ANR	1682307	Identifier	type		1682147	1					
ANR	1682308	CFGEntryNode	ENTRY		1682147		True				
ANR	1682309	CFGExitNode	EXIT		1682147		True				
ANR	1682310	Symbol	TMP_REG3		1682147						
ANR	1682311	Symbol	SLJIT_JUMP		1682147						
ANR	1682312	Symbol	CALL_rm		1682147						
ANR	1682313	Symbol	* jump		1682147						
ANR	1682314	Symbol	jump -> u		1682147						
ANR	1682315	Symbol	jump -> flags		1682147						
ANR	1682316	Symbol	reg_map		1682147						
ANR	1682317	Symbol	MOV_r_i32		1682147						
ANR	1682318	Symbol	JUMP_LABEL		1682147						
ANR	1682319	Symbol	get_jump_code		1682147						
ANR	1682320	Symbol	type		1682147						
ANR	1682321	Symbol	code_ptr		1682147						
ANR	1682322	Symbol	SLJIT_FAST_CALL		1682147						
ANR	1682323	Symbol	* code_ptr ++		1682147						
ANR	1682324	Symbol	* TMP_REG3		1682147						
ANR	1682325	Symbol	jump		1682147						
ANR	1682326	Symbol	JMP_rm		1682147						
ANR	1682327	Symbol	jump -> addr		1682147						
ANR	1682328	Symbol	* reg_map		1682147						
ANR	1682329	Symbol	REX_B		1682147						
ANR	1682330	Symbol	MOD_REG		1682147						
ANR	1682331	Symbol	* code_ptr		1682147						
ANR	1682332	Symbol	PATCH_MD		1682147						
ANR	1682333	Symbol	tmp3_is_9_first		1682147						
ANR	1682334	Symbol	GROUP_FF		1682147						
ANR	1682335	Symbol	jump -> u . target		1682147						
ANR	1682336	Symbol	REX_W		1682147						
ANR	1682337	Symbol	* ( sljit_sw * ) code_ptr		1682147						
ANR	1682338	Function	generate_fixed_jump	68:0:2564:3214							
ANR	1682339	FunctionDef	"generate_fixed_jump (sljit_ub * code_ptr , sljit_sw addr , sljit_si type)"		1682338	0					
ANR	1682340	CompoundStatement		69:0:2651:3214	1682338	0					
ANR	1682341	IdentifierDeclStatement	sljit_sw delta = addr - ( ( sljit_sw ) code_ptr + 1 + sizeof ( sljit_si ) ) ;	70:1:2654:2721	1682338	0	True				
ANR	1682342	IdentifierDecl	delta = addr - ( ( sljit_sw ) code_ptr + 1 + sizeof ( sljit_si ) )		1682338	0					
ANR	1682343	IdentifierDeclType	sljit_sw		1682338	0					
ANR	1682344	Identifier	delta		1682338	1					
ANR	1682345	AssignmentExpression	delta = addr - ( ( sljit_sw ) code_ptr + 1 + sizeof ( sljit_si ) )		1682338	2		=			
ANR	1682346	Identifier	delta		1682338	0					
ANR	1682347	AdditiveExpression	addr - ( ( sljit_sw ) code_ptr + 1 + sizeof ( sljit_si ) )		1682338	1		-			
ANR	1682348	Identifier	addr		1682338	0					
ANR	1682349	AdditiveExpression	( sljit_sw ) code_ptr + 1 + sizeof ( sljit_si )		1682338	1		+			
ANR	1682350	CastExpression	( sljit_sw ) code_ptr		1682338	0					
ANR	1682351	CastTarget	sljit_sw		1682338	0					
ANR	1682352	Identifier	code_ptr		1682338	1					
ANR	1682353	AdditiveExpression	1 + sizeof ( sljit_si )		1682338	1		+			
ANR	1682354	PrimaryExpression	1		1682338	0					
ANR	1682355	SizeofExpression	sizeof ( sljit_si )		1682338	1					
ANR	1682356	Sizeof	sizeof		1682338	0					
ANR	1682357	SizeofOperand	sljit_si		1682338	1					
ANR	1682358	IfStatement	if ( delta <= HALFWORD_MAX && delta >= HALFWORD_MIN )		1682338	1					
ANR	1682359	Condition	delta <= HALFWORD_MAX && delta >= HALFWORD_MIN	72:5:2729:2774	1682338	0	True				
ANR	1682360	AndExpression	delta <= HALFWORD_MAX && delta >= HALFWORD_MIN		1682338	0		&&			
ANR	1682361	RelationalExpression	delta <= HALFWORD_MAX		1682338	0		<=			
ANR	1682362	Identifier	delta		1682338	0					
ANR	1682363	Identifier	HALFWORD_MAX		1682338	1					
ANR	1682364	RelationalExpression	delta >= HALFWORD_MIN		1682338	1		>=			
ANR	1682365	Identifier	delta		1682338	0					
ANR	1682366	Identifier	HALFWORD_MIN		1682338	1					
ANR	1682367	CompoundStatement		4:53:125:125	1682338	1					
ANR	1682368	ExpressionStatement	* code_ptr ++ = ( type == 2 ) ? CALL_i32 : JMP_i32	73:2:2781:2827	1682338	0	True				
ANR	1682369	AssignmentExpression	* code_ptr ++ = ( type == 2 ) ? CALL_i32 : JMP_i32		1682338	0		=			
ANR	1682370	UnaryOperationExpression	* code_ptr ++		1682338	0					
ANR	1682371	UnaryOperator	*		1682338	0					
ANR	1682372	PostIncDecOperationExpression	code_ptr ++		1682338	1					
ANR	1682373	Identifier	code_ptr		1682338	0					
ANR	1682374	IncDec	++		1682338	1					
ANR	1682375	ConditionalExpression	( type == 2 ) ? CALL_i32 : JMP_i32		1682338	1					
ANR	1682376	Condition	type == 2		1682338	0					
ANR	1682377	EqualityExpression	type == 2		1682338	0		==			
ANR	1682378	Identifier	type		1682338	0					
ANR	1682379	PrimaryExpression	2		1682338	1					
ANR	1682380	Identifier	CALL_i32		1682338	1					
ANR	1682381	Identifier	JMP_i32		1682338	2					
ANR	1682382	ExpressionStatement	* ( sljit_sw * ) code_ptr = delta	74:2:2831:2859	1682338	1	True				
ANR	1682383	AssignmentExpression	* ( sljit_sw * ) code_ptr = delta		1682338	0		=			
ANR	1682384	UnaryOperationExpression	* ( sljit_sw * ) code_ptr		1682338	0					
ANR	1682385	UnaryOperator	*		1682338	0					
ANR	1682386	CastExpression	( sljit_sw * ) code_ptr		1682338	1					
ANR	1682387	CastTarget	sljit_sw *		1682338	0					
ANR	1682388	Identifier	code_ptr		1682338	1					
ANR	1682389	Identifier	delta		1682338	1					
ANR	1682390	ElseStatement	else		1682338	0					
ANR	1682391	CompoundStatement		8:6:218:218	1682338	0					
ANR	1682392	ExpressionStatement	"SLJIT_COMPILE_ASSERT ( reg_map [ TMP_REG3 ] == 9 , tmp3_is_9_second )"	77:2:2874:2936	1682338	0	True				
ANR	1682393	CallExpression	"SLJIT_COMPILE_ASSERT ( reg_map [ TMP_REG3 ] == 9 , tmp3_is_9_second )"		1682338	0					
ANR	1682394	Callee	SLJIT_COMPILE_ASSERT		1682338	0					
ANR	1682395	Identifier	SLJIT_COMPILE_ASSERT		1682338	0					
ANR	1682396	ArgumentList	reg_map [ TMP_REG3 ] == 9		1682338	1					
ANR	1682397	Argument	reg_map [ TMP_REG3 ] == 9		1682338	0					
ANR	1682398	EqualityExpression	reg_map [ TMP_REG3 ] == 9		1682338	0		==			
ANR	1682399	ArrayIndexing	reg_map [ TMP_REG3 ]		1682338	0					
ANR	1682400	Identifier	reg_map		1682338	0					
ANR	1682401	Identifier	TMP_REG3		1682338	1					
ANR	1682402	PrimaryExpression	9		1682338	1					
ANR	1682403	Argument	tmp3_is_9_second		1682338	1					
ANR	1682404	Identifier	tmp3_is_9_second		1682338	0					
ANR	1682405	ExpressionStatement	* code_ptr ++ = REX_W | REX_B	78:2:2940:2967	1682338	1	True				
ANR	1682406	AssignmentExpression	* code_ptr ++ = REX_W | REX_B		1682338	0		=			
ANR	1682407	UnaryOperationExpression	* code_ptr ++		1682338	0					
ANR	1682408	UnaryOperator	*		1682338	0					
ANR	1682409	PostIncDecOperationExpression	code_ptr ++		1682338	1					
ANR	1682410	Identifier	code_ptr		1682338	0					
ANR	1682411	IncDec	++		1682338	1					
ANR	1682412	InclusiveOrExpression	REX_W | REX_B		1682338	1		|			
ANR	1682413	Identifier	REX_W		1682338	0					
ANR	1682414	Identifier	REX_B		1682338	1					
ANR	1682415	ExpressionStatement	* code_ptr ++ = MOV_r_i32 + 1	79:2:2971:2998	1682338	2	True				
ANR	1682416	AssignmentExpression	* code_ptr ++ = MOV_r_i32 + 1		1682338	0		=			
ANR	1682417	UnaryOperationExpression	* code_ptr ++		1682338	0					
ANR	1682418	UnaryOperator	*		1682338	0					
ANR	1682419	PostIncDecOperationExpression	code_ptr ++		1682338	1					
ANR	1682420	Identifier	code_ptr		1682338	0					
ANR	1682421	IncDec	++		1682338	1					
ANR	1682422	AdditiveExpression	MOV_r_i32 + 1		1682338	1		+			
ANR	1682423	Identifier	MOV_r_i32		1682338	0					
ANR	1682424	PrimaryExpression	1		1682338	1					
ANR	1682425	ExpressionStatement	* ( sljit_sw * ) code_ptr = addr	80:2:3002:3029	1682338	3	True				
ANR	1682426	AssignmentExpression	* ( sljit_sw * ) code_ptr = addr		1682338	0		=			
ANR	1682427	UnaryOperationExpression	* ( sljit_sw * ) code_ptr		1682338	0					
ANR	1682428	UnaryOperator	*		1682338	0					
ANR	1682429	CastExpression	( sljit_sw * ) code_ptr		1682338	1					
ANR	1682430	CastTarget	sljit_sw *		1682338	0					
ANR	1682431	Identifier	code_ptr		1682338	1					
ANR	1682432	Identifier	addr		1682338	1					
ANR	1682433	ExpressionStatement	code_ptr += sizeof ( sljit_sw )	81:2:3033:3061	1682338	4	True				
ANR	1682434	AssignmentExpression	code_ptr += sizeof ( sljit_sw )		1682338	0		+=			
ANR	1682435	Identifier	code_ptr		1682338	0					
ANR	1682436	SizeofExpression	sizeof ( sljit_sw )		1682338	1					
ANR	1682437	Sizeof	sizeof		1682338	0					
ANR	1682438	SizeofOperand	sljit_sw		1682338	1					
ANR	1682439	ExpressionStatement	* code_ptr ++ = REX_B	82:2:3065:3084	1682338	5	True				
ANR	1682440	AssignmentExpression	* code_ptr ++ = REX_B		1682338	0		=			
ANR	1682441	UnaryOperationExpression	* code_ptr ++		1682338	0					
ANR	1682442	UnaryOperator	*		1682338	0					
ANR	1682443	PostIncDecOperationExpression	code_ptr ++		1682338	1					
ANR	1682444	Identifier	code_ptr		1682338	0					
ANR	1682445	IncDec	++		1682338	1					
ANR	1682446	Identifier	REX_B		1682338	1					
ANR	1682447	ExpressionStatement	* code_ptr ++ = GROUP_FF	83:2:3088:3110	1682338	6	True				
ANR	1682448	AssignmentExpression	* code_ptr ++ = GROUP_FF		1682338	0		=			
ANR	1682449	UnaryOperationExpression	* code_ptr ++		1682338	0					
ANR	1682450	UnaryOperator	*		1682338	0					
ANR	1682451	PostIncDecOperationExpression	code_ptr ++		1682338	1					
ANR	1682452	Identifier	code_ptr		1682338	0					
ANR	1682453	IncDec	++		1682338	1					
ANR	1682454	Identifier	GROUP_FF		1682338	1					
ANR	1682455	ExpressionStatement	* code_ptr ++ = ( type == 2 ) ? ( MOD_REG | CALL_rm | 1 ) : ( MOD_REG | JMP_rm | 1 )	84:2:3114:3190	1682338	7	True				
ANR	1682456	AssignmentExpression	* code_ptr ++ = ( type == 2 ) ? ( MOD_REG | CALL_rm | 1 ) : ( MOD_REG | JMP_rm | 1 )		1682338	0		=			
ANR	1682457	UnaryOperationExpression	* code_ptr ++		1682338	0					
ANR	1682458	UnaryOperator	*		1682338	0					
ANR	1682459	PostIncDecOperationExpression	code_ptr ++		1682338	1					
ANR	1682460	Identifier	code_ptr		1682338	0					
ANR	1682461	IncDec	++		1682338	1					
ANR	1682462	ConditionalExpression	( type == 2 ) ? ( MOD_REG | CALL_rm | 1 ) : ( MOD_REG | JMP_rm | 1 )		1682338	1					
ANR	1682463	Condition	type == 2		1682338	0					
ANR	1682464	EqualityExpression	type == 2		1682338	0		==			
ANR	1682465	Identifier	type		1682338	0					
ANR	1682466	PrimaryExpression	2		1682338	1					
ANR	1682467	InclusiveOrExpression	MOD_REG | CALL_rm | 1		1682338	1		|			
ANR	1682468	Identifier	MOD_REG		1682338	0					
ANR	1682469	InclusiveOrExpression	CALL_rm | 1		1682338	1		|			
ANR	1682470	Identifier	CALL_rm		1682338	0					
ANR	1682471	PrimaryExpression	1		1682338	1					
ANR	1682472	InclusiveOrExpression	MOD_REG | JMP_rm | 1		1682338	2		|			
ANR	1682473	Identifier	MOD_REG		1682338	0					
ANR	1682474	InclusiveOrExpression	JMP_rm | 1		1682338	1		|			
ANR	1682475	Identifier	JMP_rm		1682338	0					
ANR	1682476	PrimaryExpression	1		1682338	1					
ANR	1682477	ReturnStatement	return code_ptr ;	87:1:3197:3212	1682338	2	True				
ANR	1682478	Identifier	code_ptr		1682338	0					
ANR	1682479	ReturnType	static sljit_ub *		1682338	1					
ANR	1682480	Identifier	generate_fixed_jump		1682338	2					
ANR	1682481	ParameterList	"sljit_ub * code_ptr , sljit_sw addr , sljit_si type"		1682338	3					
ANR	1682482	Parameter	sljit_ub * code_ptr	68:37:2601:2618	1682338	0	True				
ANR	1682483	ParameterType	sljit_ub *		1682338	0					
ANR	1682484	Identifier	code_ptr		1682338	1					
ANR	1682485	Parameter	sljit_sw addr	68:57:2621:2633	1682338	1	True				
ANR	1682486	ParameterType	sljit_sw		1682338	0					
ANR	1682487	Identifier	addr		1682338	1					
ANR	1682488	Parameter	sljit_si type	68:72:2636:2648	1682338	2	True				
ANR	1682489	ParameterType	sljit_si		1682338	0					
ANR	1682490	Identifier	type		1682338	1					
ANR	1682491	CFGEntryNode	ENTRY		1682338		True				
ANR	1682492	CFGExitNode	EXIT		1682338		True				
ANR	1682493	Symbol	TMP_REG3		1682338						
ANR	1682494	Symbol	CALL_rm		1682338						
ANR	1682495	Symbol	JMP_rm		1682338						
ANR	1682496	Symbol	HALFWORD_MIN		1682338						
ANR	1682497	Symbol	delta		1682338						
ANR	1682498	Symbol	CALL_i32		1682338						
ANR	1682499	Symbol	reg_map		1682338						
ANR	1682500	Symbol	MOV_r_i32		1682338						
ANR	1682501	Symbol	type		1682338						
ANR	1682502	Symbol	* reg_map		1682338						
ANR	1682503	Symbol	REX_B		1682338						
ANR	1682504	Symbol	MOD_REG		1682338						
ANR	1682505	Symbol	JMP_i32		1682338						
ANR	1682506	Symbol	* code_ptr		1682338						
ANR	1682507	Symbol	code_ptr		1682338						
ANR	1682508	Symbol	HALFWORD_MAX		1682338						
ANR	1682509	Symbol	GROUP_FF		1682338						
ANR	1682510	Symbol	REX_W		1682338						
ANR	1682511	Symbol	* code_ptr ++		1682338						
ANR	1682512	Symbol	* ( sljit_sw * ) code_ptr		1682338						
ANR	1682513	Symbol	addr		1682338						
ANR	1682514	Symbol	* TMP_REG3		1682338						
ANR	1682515	Symbol	tmp3_is_9_second		1682338						
ANR	1682516	Function	sljit_emit_enter	90:0:3217:7452							
ANR	1682517	FunctionDef	"sljit_emit_enter (struct sljit_compiler * compiler , sljit_si options , sljit_si args , sljit_si scratches , sljit_si saveds , sljit_si fscratches , sljit_si fsaveds , sljit_si local_size)"		1682516	0					
ANR	1682518	CompoundStatement		93:0:3433:7452	1682516	0					
ANR	1682519	IdentifierDeclStatement	"sljit_si i , tmp , size , saved_register_size ;"	94:1:3436:3478	1682516	0	True				
ANR	1682520	IdentifierDecl	i		1682516	0					
ANR	1682521	IdentifierDeclType	sljit_si		1682516	0					
ANR	1682522	Identifier	i		1682516	1					
ANR	1682523	IdentifierDecl	tmp		1682516	1					
ANR	1682524	IdentifierDeclType	sljit_si		1682516	0					
ANR	1682525	Identifier	tmp		1682516	1					
ANR	1682526	IdentifierDecl	size		1682516	2					
ANR	1682527	IdentifierDeclType	sljit_si		1682516	0					
ANR	1682528	Identifier	size		1682516	1					
ANR	1682529	IdentifierDecl	saved_register_size		1682516	3					
ANR	1682530	IdentifierDeclType	sljit_si		1682516	0					
ANR	1682531	Identifier	saved_register_size		1682516	1					
ANR	1682532	IdentifierDeclStatement	sljit_ub * inst ;	95:1:3481:3495	1682516	1	True				
ANR	1682533	IdentifierDecl	* inst		1682516	0					
ANR	1682534	IdentifierDeclType	sljit_ub *		1682516	0					
ANR	1682535	Identifier	inst		1682516	1					
ANR	1682536	ExpressionStatement	CHECK_ERROR ( )	97:1:3499:3512	1682516	2	True				
ANR	1682537	CallExpression	CHECK_ERROR ( )		1682516	0					
ANR	1682538	Callee	CHECK_ERROR		1682516	0					
ANR	1682539	Identifier	CHECK_ERROR		1682516	0					
ANR	1682540	ArgumentList			1682516	1					
ANR	1682541	ExpressionStatement	"CHECK ( check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size ) )"	98:1:3515:3621	1682516	3	True				
ANR	1682542	CallExpression	"CHECK ( check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size ) )"		1682516	0					
ANR	1682543	Callee	CHECK		1682516	0					
ANR	1682544	Identifier	CHECK		1682516	0					
ANR	1682545	ArgumentList	"check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1682516	1					
ANR	1682546	Argument	"check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1682516	0					
ANR	1682547	CallExpression	"check_sljit_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1682516	0					
ANR	1682548	Callee	check_sljit_emit_enter		1682516	0					
ANR	1682549	Identifier	check_sljit_emit_enter		1682516	0					
ANR	1682550	ArgumentList	compiler		1682516	1					
ANR	1682551	Argument	compiler		1682516	0					
ANR	1682552	Identifier	compiler		1682516	0					
ANR	1682553	Argument	options		1682516	1					
ANR	1682554	Identifier	options		1682516	0					
ANR	1682555	Argument	args		1682516	2					
ANR	1682556	Identifier	args		1682516	0					
ANR	1682557	Argument	scratches		1682516	3					
ANR	1682558	Identifier	scratches		1682516	0					
ANR	1682559	Argument	saveds		1682516	4					
ANR	1682560	Identifier	saveds		1682516	0					
ANR	1682561	Argument	fscratches		1682516	5					
ANR	1682562	Identifier	fscratches		1682516	0					
ANR	1682563	Argument	fsaveds		1682516	6					
ANR	1682564	Identifier	fsaveds		1682516	0					
ANR	1682565	Argument	local_size		1682516	7					
ANR	1682566	Identifier	local_size		1682516	0					
ANR	1682567	ExpressionStatement	"set_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"	99:1:3624:3715	1682516	4	True				
ANR	1682568	CallExpression	"set_emit_enter ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1682516	0					
ANR	1682569	Callee	set_emit_enter		1682516	0					
ANR	1682570	Identifier	set_emit_enter		1682516	0					
ANR	1682571	ArgumentList	compiler		1682516	1					
ANR	1682572	Argument	compiler		1682516	0					
ANR	1682573	Identifier	compiler		1682516	0					
ANR	1682574	Argument	options		1682516	1					
ANR	1682575	Identifier	options		1682516	0					
ANR	1682576	Argument	args		1682516	2					
ANR	1682577	Identifier	args		1682516	0					
ANR	1682578	Argument	scratches		1682516	3					
ANR	1682579	Identifier	scratches		1682516	0					
ANR	1682580	Argument	saveds		1682516	4					
ANR	1682581	Identifier	saveds		1682516	0					
ANR	1682582	Argument	fscratches		1682516	5					
ANR	1682583	Identifier	fscratches		1682516	0					
ANR	1682584	Argument	fsaveds		1682516	6					
ANR	1682585	Identifier	fsaveds		1682516	0					
ANR	1682586	Argument	local_size		1682516	7					
ANR	1682587	Identifier	local_size		1682516	0					
ANR	1682588	ExpressionStatement	compiler -> flags_saved = 0	101:1:3719:3744	1682516	5	True				
ANR	1682589	AssignmentExpression	compiler -> flags_saved = 0		1682516	0		=			
ANR	1682590	PtrMemberAccess	compiler -> flags_saved		1682516	0					
ANR	1682591	Identifier	compiler		1682516	0					
ANR	1682592	Identifier	flags_saved		1682516	1					
ANR	1682593	PrimaryExpression	0		1682516	1					
ANR	1682594	ExpressionStatement	"saved_register_size = GET_SAVED_REGISTERS_SIZE ( scratches , saveds , 1 )"	104:1:3815:3883	1682516	6	True				
ANR	1682595	AssignmentExpression	"saved_register_size = GET_SAVED_REGISTERS_SIZE ( scratches , saveds , 1 )"		1682516	0		=			
ANR	1682596	Identifier	saved_register_size		1682516	0					
ANR	1682597	CallExpression	"GET_SAVED_REGISTERS_SIZE ( scratches , saveds , 1 )"		1682516	1					
ANR	1682598	Callee	GET_SAVED_REGISTERS_SIZE		1682516	0					
ANR	1682599	Identifier	GET_SAVED_REGISTERS_SIZE		1682516	0					
ANR	1682600	ArgumentList	scratches		1682516	1					
ANR	1682601	Argument	scratches		1682516	0					
ANR	1682602	Identifier	scratches		1682516	0					
ANR	1682603	Argument	saveds		1682516	1					
ANR	1682604	Identifier	saveds		1682516	0					
ANR	1682605	Argument	1		1682516	2					
ANR	1682606	PrimaryExpression	1		1682516	0					
ANR	1682607	ExpressionStatement	tmp = saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS ? ( SLJIT_S0 + 1 - saveds ) : SLJIT_FIRST_SAVED_REG	106:1:3887:3983	1682516	7	True				
ANR	1682608	AssignmentExpression	tmp = saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS ? ( SLJIT_S0 + 1 - saveds ) : SLJIT_FIRST_SAVED_REG		1682516	0		=			
ANR	1682609	Identifier	tmp		1682516	0					
ANR	1682610	ConditionalExpression	saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS ? ( SLJIT_S0 + 1 - saveds ) : SLJIT_FIRST_SAVED_REG		1682516	1					
ANR	1682611	Condition	saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS		1682516	0					
ANR	1682612	RelationalExpression	saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS		1682516	0		<			
ANR	1682613	Identifier	saveds		1682516	0					
ANR	1682614	Identifier	SLJIT_NUMBER_OF_SAVED_REGISTERS		1682516	1					
ANR	1682615	AdditiveExpression	SLJIT_S0 + 1 - saveds		1682516	1		+			
ANR	1682616	Identifier	SLJIT_S0		1682516	0					
ANR	1682617	AdditiveExpression	1 - saveds		1682516	1		-			
ANR	1682618	PrimaryExpression	1		1682516	0					
ANR	1682619	Identifier	saveds		1682516	1					
ANR	1682620	Identifier	SLJIT_FIRST_SAVED_REG		1682516	2					
ANR	1682621	ForStatement	for ( i = SLJIT_S0 ; i >= tmp ; i -- )		1682516	8					
ANR	1682622	ForInit	i = SLJIT_S0 ;	107:6:3991:4003	1682516	0	True				
ANR	1682623	AssignmentExpression	i = SLJIT_S0		1682516	0		=			
ANR	1682624	Identifier	i		1682516	0					
ANR	1682625	Identifier	SLJIT_S0		1682516	1					
ANR	1682626	Condition	i >= tmp	107:20:4005:4012	1682516	1	True				
ANR	1682627	RelationalExpression	i >= tmp		1682516	0		>=			
ANR	1682628	Identifier	i		1682516	0					
ANR	1682629	Identifier	tmp		1682516	1					
ANR	1682630	PostIncDecOperationExpression	i --	107:30:4015:4017	1682516	2	True				
ANR	1682631	Identifier	i		1682516	0					
ANR	1682632	IncDec	--		1682516	1					
ANR	1682633	CompoundStatement		15:35:586:586	1682516	3					
ANR	1682634	ExpressionStatement	size = reg_map [ i ] >= 8 ? 2 : 1	108:2:4024:4054	1682516	0	True				
ANR	1682635	AssignmentExpression	size = reg_map [ i ] >= 8 ? 2 : 1		1682516	0		=			
ANR	1682636	Identifier	size		1682516	0					
ANR	1682637	ConditionalExpression	reg_map [ i ] >= 8 ? 2 : 1		1682516	1					
ANR	1682638	Condition	reg_map [ i ] >= 8		1682516	0					
ANR	1682639	RelationalExpression	reg_map [ i ] >= 8		1682516	0		>=			
ANR	1682640	ArrayIndexing	reg_map [ i ]		1682516	0					
ANR	1682641	Identifier	reg_map		1682516	0					
ANR	1682642	Identifier	i		1682516	1					
ANR	1682643	PrimaryExpression	8		1682516	1					
ANR	1682644	PrimaryExpression	2		1682516	1					
ANR	1682645	PrimaryExpression	1		1682516	2					
ANR	1682646	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"	109:2:4058:4106	1682516	1	True				
ANR	1682647	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1682516	0		=			
ANR	1682648	Identifier	inst		1682516	0					
ANR	1682649	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1682516	1					
ANR	1682650	CastTarget	sljit_ub *		1682516	0					
ANR	1682651	CallExpression	"ensure_buf ( compiler , 1 + size )"		1682516	1					
ANR	1682652	Callee	ensure_buf		1682516	0					
ANR	1682653	Identifier	ensure_buf		1682516	0					
ANR	1682654	ArgumentList	compiler		1682516	1					
ANR	1682655	Argument	compiler		1682516	0					
ANR	1682656	Identifier	compiler		1682516	0					
ANR	1682657	Argument	1 + size		1682516	1					
ANR	1682658	AdditiveExpression	1 + size		1682516	0		+			
ANR	1682659	PrimaryExpression	1		1682516	0					
ANR	1682660	Identifier	size		1682516	1					
ANR	1682661	ExpressionStatement	FAIL_IF ( ! inst )	110:2:4110:4124	1682516	2	True				
ANR	1682662	CallExpression	FAIL_IF ( ! inst )		1682516	0					
ANR	1682663	Callee	FAIL_IF		1682516	0					
ANR	1682664	Identifier	FAIL_IF		1682516	0					
ANR	1682665	ArgumentList	! inst		1682516	1					
ANR	1682666	Argument	! inst		1682516	0					
ANR	1682667	UnaryOperationExpression	! inst		1682516	0					
ANR	1682668	UnaryOperator	!		1682516	0					
ANR	1682669	Identifier	inst		1682516	1					
ANR	1682670	ExpressionStatement	INC_SIZE ( size )	111:2:4128:4142	1682516	3	True				
ANR	1682671	CallExpression	INC_SIZE ( size )		1682516	0					
ANR	1682672	Callee	INC_SIZE		1682516	0					
ANR	1682673	Identifier	INC_SIZE		1682516	0					
ANR	1682674	ArgumentList	size		1682516	1					
ANR	1682675	Argument	size		1682516	0					
ANR	1682676	Identifier	size		1682516	0					
ANR	1682677	IfStatement	if ( reg_map [ i ] >= 8 )		1682516	4					
ANR	1682678	Condition	reg_map [ i ] >= 8	112:6:4150:4164	1682516	0	True				
ANR	1682679	RelationalExpression	reg_map [ i ] >= 8		1682516	0		>=			
ANR	1682680	ArrayIndexing	reg_map [ i ]		1682516	0					
ANR	1682681	Identifier	reg_map		1682516	0					
ANR	1682682	Identifier	i		1682516	1					
ANR	1682683	PrimaryExpression	8		1682516	1					
ANR	1682684	ExpressionStatement	* inst ++ = REX_B	113:3:4170:4185	1682516	1	True				
ANR	1682685	AssignmentExpression	* inst ++ = REX_B		1682516	0		=			
ANR	1682686	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1682687	UnaryOperator	*		1682516	0					
ANR	1682688	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1682689	Identifier	inst		1682516	0					
ANR	1682690	IncDec	++		1682516	1					
ANR	1682691	Identifier	REX_B		1682516	1					
ANR	1682692	ExpressionStatement	PUSH_REG ( reg_lmap [ i ] )	114:2:4189:4210	1682516	5	True				
ANR	1682693	CallExpression	PUSH_REG ( reg_lmap [ i ] )		1682516	0					
ANR	1682694	Callee	PUSH_REG		1682516	0					
ANR	1682695	Identifier	PUSH_REG		1682516	0					
ANR	1682696	ArgumentList	reg_lmap [ i ]		1682516	1					
ANR	1682697	Argument	reg_lmap [ i ]		1682516	0					
ANR	1682698	ArrayIndexing	reg_lmap [ i ]		1682516	0					
ANR	1682699	Identifier	reg_lmap		1682516	0					
ANR	1682700	Identifier	i		1682516	1					
ANR	1682701	ForStatement	for ( i = scratches ; i >= SLJIT_FIRST_SAVED_REG ; i -- )		1682516	9					
ANR	1682702	ForInit	i = scratches ;	117:6:4222:4235	1682516	0	True				
ANR	1682703	AssignmentExpression	i = scratches		1682516	0		=			
ANR	1682704	Identifier	i		1682516	0					
ANR	1682705	Identifier	scratches		1682516	1					
ANR	1682706	Condition	i >= SLJIT_FIRST_SAVED_REG	117:21:4237:4262	1682516	1	True				
ANR	1682707	RelationalExpression	i >= SLJIT_FIRST_SAVED_REG		1682516	0		>=			
ANR	1682708	Identifier	i		1682516	0					
ANR	1682709	Identifier	SLJIT_FIRST_SAVED_REG		1682516	1					
ANR	1682710	PostIncDecOperationExpression	i --	117:49:4265:4267	1682516	2	True				
ANR	1682711	Identifier	i		1682516	0					
ANR	1682712	IncDec	--		1682516	1					
ANR	1682713	CompoundStatement		25:54:836:836	1682516	3					
ANR	1682714	ExpressionStatement	size = reg_map [ i ] >= 8 ? 2 : 1	118:2:4274:4304	1682516	0	True				
ANR	1682715	AssignmentExpression	size = reg_map [ i ] >= 8 ? 2 : 1		1682516	0		=			
ANR	1682716	Identifier	size		1682516	0					
ANR	1682717	ConditionalExpression	reg_map [ i ] >= 8 ? 2 : 1		1682516	1					
ANR	1682718	Condition	reg_map [ i ] >= 8		1682516	0					
ANR	1682719	RelationalExpression	reg_map [ i ] >= 8		1682516	0		>=			
ANR	1682720	ArrayIndexing	reg_map [ i ]		1682516	0					
ANR	1682721	Identifier	reg_map		1682516	0					
ANR	1682722	Identifier	i		1682516	1					
ANR	1682723	PrimaryExpression	8		1682516	1					
ANR	1682724	PrimaryExpression	2		1682516	1					
ANR	1682725	PrimaryExpression	1		1682516	2					
ANR	1682726	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"	119:2:4308:4356	1682516	1	True				
ANR	1682727	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1682516	0		=			
ANR	1682728	Identifier	inst		1682516	0					
ANR	1682729	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1682516	1					
ANR	1682730	CastTarget	sljit_ub *		1682516	0					
ANR	1682731	CallExpression	"ensure_buf ( compiler , 1 + size )"		1682516	1					
ANR	1682732	Callee	ensure_buf		1682516	0					
ANR	1682733	Identifier	ensure_buf		1682516	0					
ANR	1682734	ArgumentList	compiler		1682516	1					
ANR	1682735	Argument	compiler		1682516	0					
ANR	1682736	Identifier	compiler		1682516	0					
ANR	1682737	Argument	1 + size		1682516	1					
ANR	1682738	AdditiveExpression	1 + size		1682516	0		+			
ANR	1682739	PrimaryExpression	1		1682516	0					
ANR	1682740	Identifier	size		1682516	1					
ANR	1682741	ExpressionStatement	FAIL_IF ( ! inst )	120:2:4360:4374	1682516	2	True				
ANR	1682742	CallExpression	FAIL_IF ( ! inst )		1682516	0					
ANR	1682743	Callee	FAIL_IF		1682516	0					
ANR	1682744	Identifier	FAIL_IF		1682516	0					
ANR	1682745	ArgumentList	! inst		1682516	1					
ANR	1682746	Argument	! inst		1682516	0					
ANR	1682747	UnaryOperationExpression	! inst		1682516	0					
ANR	1682748	UnaryOperator	!		1682516	0					
ANR	1682749	Identifier	inst		1682516	1					
ANR	1682750	ExpressionStatement	INC_SIZE ( size )	121:2:4378:4392	1682516	3	True				
ANR	1682751	CallExpression	INC_SIZE ( size )		1682516	0					
ANR	1682752	Callee	INC_SIZE		1682516	0					
ANR	1682753	Identifier	INC_SIZE		1682516	0					
ANR	1682754	ArgumentList	size		1682516	1					
ANR	1682755	Argument	size		1682516	0					
ANR	1682756	Identifier	size		1682516	0					
ANR	1682757	IfStatement	if ( reg_map [ i ] >= 8 )		1682516	4					
ANR	1682758	Condition	reg_map [ i ] >= 8	122:6:4400:4414	1682516	0	True				
ANR	1682759	RelationalExpression	reg_map [ i ] >= 8		1682516	0		>=			
ANR	1682760	ArrayIndexing	reg_map [ i ]		1682516	0					
ANR	1682761	Identifier	reg_map		1682516	0					
ANR	1682762	Identifier	i		1682516	1					
ANR	1682763	PrimaryExpression	8		1682516	1					
ANR	1682764	ExpressionStatement	* inst ++ = REX_B	123:3:4420:4435	1682516	1	True				
ANR	1682765	AssignmentExpression	* inst ++ = REX_B		1682516	0		=			
ANR	1682766	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1682767	UnaryOperator	*		1682516	0					
ANR	1682768	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1682769	Identifier	inst		1682516	0					
ANR	1682770	IncDec	++		1682516	1					
ANR	1682771	Identifier	REX_B		1682516	1					
ANR	1682772	ExpressionStatement	PUSH_REG ( reg_lmap [ i ] )	124:2:4439:4460	1682516	5	True				
ANR	1682773	CallExpression	PUSH_REG ( reg_lmap [ i ] )		1682516	0					
ANR	1682774	Callee	PUSH_REG		1682516	0					
ANR	1682775	Identifier	PUSH_REG		1682516	0					
ANR	1682776	ArgumentList	reg_lmap [ i ]		1682516	1					
ANR	1682777	Argument	reg_lmap [ i ]		1682516	0					
ANR	1682778	ArrayIndexing	reg_lmap [ i ]		1682516	0					
ANR	1682779	Identifier	reg_lmap		1682516	0					
ANR	1682780	Identifier	i		1682516	1					
ANR	1682781	IfStatement	if ( args > 0 )		1682516	10					
ANR	1682782	Condition	args > 0	127:5:4471:4478	1682516	0	True				
ANR	1682783	RelationalExpression	args > 0		1682516	0		>			
ANR	1682784	Identifier	args		1682516	0					
ANR	1682785	PrimaryExpression	0		1682516	1					
ANR	1682786	CompoundStatement		35:15:1047:1047	1682516	1					
ANR	1682787	ExpressionStatement	size = args * 3	128:2:4485:4500	1682516	0	True				
ANR	1682788	AssignmentExpression	size = args * 3		1682516	0		=			
ANR	1682789	Identifier	size		1682516	0					
ANR	1682790	MultiplicativeExpression	args * 3		1682516	1		*			
ANR	1682791	Identifier	args		1682516	0					
ANR	1682792	PrimaryExpression	3		1682516	1					
ANR	1682793	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"	129:2:4504:4552	1682516	1	True				
ANR	1682794	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1682516	0		=			
ANR	1682795	Identifier	inst		1682516	0					
ANR	1682796	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1682516	1					
ANR	1682797	CastTarget	sljit_ub *		1682516	0					
ANR	1682798	CallExpression	"ensure_buf ( compiler , 1 + size )"		1682516	1					
ANR	1682799	Callee	ensure_buf		1682516	0					
ANR	1682800	Identifier	ensure_buf		1682516	0					
ANR	1682801	ArgumentList	compiler		1682516	1					
ANR	1682802	Argument	compiler		1682516	0					
ANR	1682803	Identifier	compiler		1682516	0					
ANR	1682804	Argument	1 + size		1682516	1					
ANR	1682805	AdditiveExpression	1 + size		1682516	0		+			
ANR	1682806	PrimaryExpression	1		1682516	0					
ANR	1682807	Identifier	size		1682516	1					
ANR	1682808	ExpressionStatement	FAIL_IF ( ! inst )	130:2:4556:4570	1682516	2	True				
ANR	1682809	CallExpression	FAIL_IF ( ! inst )		1682516	0					
ANR	1682810	Callee	FAIL_IF		1682516	0					
ANR	1682811	Identifier	FAIL_IF		1682516	0					
ANR	1682812	ArgumentList	! inst		1682516	1					
ANR	1682813	Argument	! inst		1682516	0					
ANR	1682814	UnaryOperationExpression	! inst		1682516	0					
ANR	1682815	UnaryOperator	!		1682516	0					
ANR	1682816	Identifier	inst		1682516	1					
ANR	1682817	ExpressionStatement	INC_SIZE ( size )	132:2:4575:4589	1682516	3	True				
ANR	1682818	CallExpression	INC_SIZE ( size )		1682516	0					
ANR	1682819	Callee	INC_SIZE		1682516	0					
ANR	1682820	Identifier	INC_SIZE		1682516	0					
ANR	1682821	ArgumentList	size		1682516	1					
ANR	1682822	Argument	size		1682516	0					
ANR	1682823	Identifier	size		1682516	0					
ANR	1682824	IfStatement	if ( args > 0 )		1682516	4					
ANR	1682825	Condition	args > 0	135:6:4613:4620	1682516	0	True				
ANR	1682826	RelationalExpression	args > 0		1682516	0		>			
ANR	1682827	Identifier	args		1682516	0					
ANR	1682828	PrimaryExpression	0		1682516	1					
ANR	1682829	CompoundStatement		43:16:1189:1189	1682516	1					
ANR	1682830	ExpressionStatement	* inst ++ = REX_W	136:3:4628:4643	1682516	0	True				
ANR	1682831	AssignmentExpression	* inst ++ = REX_W		1682516	0		=			
ANR	1682832	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1682833	UnaryOperator	*		1682516	0					
ANR	1682834	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1682835	Identifier	inst		1682516	0					
ANR	1682836	IncDec	++		1682516	1					
ANR	1682837	Identifier	REX_W		1682516	1					
ANR	1682838	ExpressionStatement	* inst ++ = MOV_r_rm	137:3:4648:4666	1682516	1	True				
ANR	1682839	AssignmentExpression	* inst ++ = MOV_r_rm		1682516	0		=			
ANR	1682840	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1682841	UnaryOperator	*		1682516	0					
ANR	1682842	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1682843	Identifier	inst		1682516	0					
ANR	1682844	IncDec	++		1682516	1					
ANR	1682845	Identifier	MOV_r_rm		1682516	1					
ANR	1682846	ExpressionStatement	* inst ++ = MOD_REG | ( reg_map [ SLJIT_S0 ] << 3 ) | 0x7	138:3:4671:4731	1682516	2	True				
ANR	1682847	AssignmentExpression	* inst ++ = MOD_REG | ( reg_map [ SLJIT_S0 ] << 3 ) | 0x7		1682516	0		=			
ANR	1682848	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1682849	UnaryOperator	*		1682516	0					
ANR	1682850	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1682851	Identifier	inst		1682516	0					
ANR	1682852	IncDec	++		1682516	1					
ANR	1682853	InclusiveOrExpression	MOD_REG | ( reg_map [ SLJIT_S0 ] << 3 ) | 0x7		1682516	1		|			
ANR	1682854	Identifier	MOD_REG		1682516	0					
ANR	1682855	InclusiveOrExpression	( reg_map [ SLJIT_S0 ] << 3 ) | 0x7		1682516	1		|			
ANR	1682856	ShiftExpression	reg_map [ SLJIT_S0 ] << 3		1682516	0		<<			
ANR	1682857	ArrayIndexing	reg_map [ SLJIT_S0 ]		1682516	0					
ANR	1682858	Identifier	reg_map		1682516	0					
ANR	1682859	Identifier	SLJIT_S0		1682516	1					
ANR	1682860	PrimaryExpression	3		1682516	1					
ANR	1682861	PrimaryExpression	0x7		1682516	1					
ANR	1682862	IfStatement	if ( args > 1 )		1682516	5					
ANR	1682863	Condition	args > 1	140:6:4743:4750	1682516	0	True				
ANR	1682864	RelationalExpression	args > 1		1682516	0		>			
ANR	1682865	Identifier	args		1682516	0					
ANR	1682866	PrimaryExpression	1		1682516	1					
ANR	1682867	CompoundStatement		48:16:1319:1319	1682516	1					
ANR	1682868	ExpressionStatement	* inst ++ = REX_W | REX_R	141:3:4758:4781	1682516	0	True				
ANR	1682869	AssignmentExpression	* inst ++ = REX_W | REX_R		1682516	0		=			
ANR	1682870	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1682871	UnaryOperator	*		1682516	0					
ANR	1682872	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1682873	Identifier	inst		1682516	0					
ANR	1682874	IncDec	++		1682516	1					
ANR	1682875	InclusiveOrExpression	REX_W | REX_R		1682516	1		|			
ANR	1682876	Identifier	REX_W		1682516	0					
ANR	1682877	Identifier	REX_R		1682516	1					
ANR	1682878	ExpressionStatement	* inst ++ = MOV_r_rm	142:3:4786:4804	1682516	1	True				
ANR	1682879	AssignmentExpression	* inst ++ = MOV_r_rm		1682516	0		=			
ANR	1682880	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1682881	UnaryOperator	*		1682516	0					
ANR	1682882	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1682883	Identifier	inst		1682516	0					
ANR	1682884	IncDec	++		1682516	1					
ANR	1682885	Identifier	MOV_r_rm		1682516	1					
ANR	1682886	ExpressionStatement	* inst ++ = MOD_REG | ( reg_lmap [ SLJIT_S1 ] << 3 ) | 0x6	143:3:4809:4870	1682516	2	True				
ANR	1682887	AssignmentExpression	* inst ++ = MOD_REG | ( reg_lmap [ SLJIT_S1 ] << 3 ) | 0x6		1682516	0		=			
ANR	1682888	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1682889	UnaryOperator	*		1682516	0					
ANR	1682890	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1682891	Identifier	inst		1682516	0					
ANR	1682892	IncDec	++		1682516	1					
ANR	1682893	InclusiveOrExpression	MOD_REG | ( reg_lmap [ SLJIT_S1 ] << 3 ) | 0x6		1682516	1		|			
ANR	1682894	Identifier	MOD_REG		1682516	0					
ANR	1682895	InclusiveOrExpression	( reg_lmap [ SLJIT_S1 ] << 3 ) | 0x6		1682516	1		|			
ANR	1682896	ShiftExpression	reg_lmap [ SLJIT_S1 ] << 3		1682516	0		<<			
ANR	1682897	ArrayIndexing	reg_lmap [ SLJIT_S1 ]		1682516	0					
ANR	1682898	Identifier	reg_lmap		1682516	0					
ANR	1682899	Identifier	SLJIT_S1		1682516	1					
ANR	1682900	PrimaryExpression	3		1682516	1					
ANR	1682901	PrimaryExpression	0x6		1682516	1					
ANR	1682902	IfStatement	if ( args > 2 )		1682516	6					
ANR	1682903	Condition	args > 2	145:6:4882:4889	1682516	0	True				
ANR	1682904	RelationalExpression	args > 2		1682516	0		>			
ANR	1682905	Identifier	args		1682516	0					
ANR	1682906	PrimaryExpression	2		1682516	1					
ANR	1682907	CompoundStatement		53:16:1458:1458	1682516	1					
ANR	1682908	ExpressionStatement	* inst ++ = REX_W | REX_R	146:3:4897:4920	1682516	0	True				
ANR	1682909	AssignmentExpression	* inst ++ = REX_W | REX_R		1682516	0		=			
ANR	1682910	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1682911	UnaryOperator	*		1682516	0					
ANR	1682912	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1682913	Identifier	inst		1682516	0					
ANR	1682914	IncDec	++		1682516	1					
ANR	1682915	InclusiveOrExpression	REX_W | REX_R		1682516	1		|			
ANR	1682916	Identifier	REX_W		1682516	0					
ANR	1682917	Identifier	REX_R		1682516	1					
ANR	1682918	ExpressionStatement	* inst ++ = MOV_r_rm	147:3:4925:4943	1682516	1	True				
ANR	1682919	AssignmentExpression	* inst ++ = MOV_r_rm		1682516	0		=			
ANR	1682920	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1682921	UnaryOperator	*		1682516	0					
ANR	1682922	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1682923	Identifier	inst		1682516	0					
ANR	1682924	IncDec	++		1682516	1					
ANR	1682925	Identifier	MOV_r_rm		1682516	1					
ANR	1682926	ExpressionStatement	* inst ++ = MOD_REG | ( reg_lmap [ SLJIT_S2 ] << 3 ) | 0x2	148:3:4948:5009	1682516	2	True				
ANR	1682927	AssignmentExpression	* inst ++ = MOD_REG | ( reg_lmap [ SLJIT_S2 ] << 3 ) | 0x2		1682516	0		=			
ANR	1682928	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1682929	UnaryOperator	*		1682516	0					
ANR	1682930	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1682931	Identifier	inst		1682516	0					
ANR	1682932	IncDec	++		1682516	1					
ANR	1682933	InclusiveOrExpression	MOD_REG | ( reg_lmap [ SLJIT_S2 ] << 3 ) | 0x2		1682516	1		|			
ANR	1682934	Identifier	MOD_REG		1682516	0					
ANR	1682935	InclusiveOrExpression	( reg_lmap [ SLJIT_S2 ] << 3 ) | 0x2		1682516	1		|			
ANR	1682936	ShiftExpression	reg_lmap [ SLJIT_S2 ] << 3		1682516	0		<<			
ANR	1682937	ArrayIndexing	reg_lmap [ SLJIT_S2 ]		1682516	0					
ANR	1682938	Identifier	reg_lmap		1682516	0					
ANR	1682939	Identifier	SLJIT_S2		1682516	1					
ANR	1682940	PrimaryExpression	3		1682516	1					
ANR	1682941	PrimaryExpression	0x2		1682516	1					
ANR	1682942	ExpressionStatement	local_size = ( ( local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15 ) & ~15 ) - saved_register_size	169:1:5430:5534	1682516	11	True				
ANR	1682943	AssignmentExpression	local_size = ( ( local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15 ) & ~15 ) - saved_register_size		1682516	0		=			
ANR	1682944	Identifier	local_size		1682516	0					
ANR	1682945	AdditiveExpression	( ( local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15 ) & ~15 ) - saved_register_size		1682516	1		-			
ANR	1682946	BitAndExpression	( local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15 ) & ~15		1682516	0		&			
ANR	1682947	AdditiveExpression	local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15		1682516	0		+			
ANR	1682948	Identifier	local_size		1682516	0					
ANR	1682949	AdditiveExpression	SLJIT_LOCALS_OFFSET + saved_register_size + 15		1682516	1		+			
ANR	1682950	Identifier	SLJIT_LOCALS_OFFSET		1682516	0					
ANR	1682951	AdditiveExpression	saved_register_size + 15		1682516	1		+			
ANR	1682952	Identifier	saved_register_size		1682516	0					
ANR	1682953	PrimaryExpression	15		1682516	1					
ANR	1682954	Identifier	~15		1682516	1					
ANR	1682955	Identifier	saved_register_size		1682516	1					
ANR	1682956	ExpressionStatement	compiler -> local_size = local_size	170:1:5537:5570	1682516	12	True				
ANR	1682957	AssignmentExpression	compiler -> local_size = local_size		1682516	0		=			
ANR	1682958	PtrMemberAccess	compiler -> local_size		1682516	0					
ANR	1682959	Identifier	compiler		1682516	0					
ANR	1682960	Identifier	local_size		1682516	1					
ANR	1682961	Identifier	local_size		1682516	1					
ANR	1682962	IfStatement	if ( local_size > 1024 )		1682516	13					
ANR	1682963	Condition	local_size > 1024	173:5:5592:5608	1682516	0	True				
ANR	1682964	RelationalExpression	local_size > 1024		1682516	0		>			
ANR	1682965	Identifier	local_size		1682516	0					
ANR	1682966	PrimaryExpression	1024		1682516	1					
ANR	1682967	CompoundStatement		81:24:2177:2177	1682516	1					
ANR	1682968	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 4 + ( 3 + sizeof ( sljit_si ) ) )"	175:2:5679:5749	1682516	0	True				
ANR	1682969	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 4 + ( 3 + sizeof ( sljit_si ) ) )"		1682516	0		=			
ANR	1682970	Identifier	inst		1682516	0					
ANR	1682971	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 4 + ( 3 + sizeof ( sljit_si ) ) )"		1682516	1					
ANR	1682972	CastTarget	sljit_ub *		1682516	0					
ANR	1682973	CallExpression	"ensure_buf ( compiler , 1 + 4 + ( 3 + sizeof ( sljit_si ) ) )"		1682516	1					
ANR	1682974	Callee	ensure_buf		1682516	0					
ANR	1682975	Identifier	ensure_buf		1682516	0					
ANR	1682976	ArgumentList	compiler		1682516	1					
ANR	1682977	Argument	compiler		1682516	0					
ANR	1682978	Identifier	compiler		1682516	0					
ANR	1682979	Argument	1 + 4 + ( 3 + sizeof ( sljit_si ) )		1682516	1					
ANR	1682980	AdditiveExpression	1 + 4 + ( 3 + sizeof ( sljit_si ) )		1682516	0		+			
ANR	1682981	PrimaryExpression	1		1682516	0					
ANR	1682982	AdditiveExpression	4 + ( 3 + sizeof ( sljit_si ) )		1682516	1		+			
ANR	1682983	PrimaryExpression	4		1682516	0					
ANR	1682984	AdditiveExpression	3 + sizeof ( sljit_si )		1682516	1		+			
ANR	1682985	PrimaryExpression	3		1682516	0					
ANR	1682986	SizeofExpression	sizeof ( sljit_si )		1682516	1					
ANR	1682987	Sizeof	sizeof		1682516	0					
ANR	1682988	SizeofOperand	sljit_si		1682516	1					
ANR	1682989	ExpressionStatement	FAIL_IF ( ! inst )	176:2:5753:5767	1682516	1	True				
ANR	1682990	CallExpression	FAIL_IF ( ! inst )		1682516	0					
ANR	1682991	Callee	FAIL_IF		1682516	0					
ANR	1682992	Identifier	FAIL_IF		1682516	0					
ANR	1682993	ArgumentList	! inst		1682516	1					
ANR	1682994	Argument	! inst		1682516	0					
ANR	1682995	UnaryOperationExpression	! inst		1682516	0					
ANR	1682996	UnaryOperator	!		1682516	0					
ANR	1682997	Identifier	inst		1682516	1					
ANR	1682998	ExpressionStatement	INC_SIZE ( 4 + ( 3 + sizeof ( sljit_si ) ) )	177:2:5771:5807	1682516	2	True				
ANR	1682999	CallExpression	INC_SIZE ( 4 + ( 3 + sizeof ( sljit_si ) ) )		1682516	0					
ANR	1683000	Callee	INC_SIZE		1682516	0					
ANR	1683001	Identifier	INC_SIZE		1682516	0					
ANR	1683002	ArgumentList	4 + ( 3 + sizeof ( sljit_si ) )		1682516	1					
ANR	1683003	Argument	4 + ( 3 + sizeof ( sljit_si ) )		1682516	0					
ANR	1683004	AdditiveExpression	4 + ( 3 + sizeof ( sljit_si ) )		1682516	0		+			
ANR	1683005	PrimaryExpression	4		1682516	0					
ANR	1683006	AdditiveExpression	3 + sizeof ( sljit_si )		1682516	1		+			
ANR	1683007	PrimaryExpression	3		1682516	0					
ANR	1683008	SizeofExpression	sizeof ( sljit_si )		1682516	1					
ANR	1683009	Sizeof	sizeof		1682516	0					
ANR	1683010	SizeofOperand	sljit_si		1682516	1					
ANR	1683011	ExpressionStatement	* inst ++ = REX_W	178:2:5811:5826	1682516	3	True				
ANR	1683012	AssignmentExpression	* inst ++ = REX_W		1682516	0		=			
ANR	1683013	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1683014	UnaryOperator	*		1682516	0					
ANR	1683015	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1683016	Identifier	inst		1682516	0					
ANR	1683017	IncDec	++		1682516	1					
ANR	1683018	Identifier	REX_W		1682516	1					
ANR	1683019	ExpressionStatement	* inst ++ = GROUP_BINARY_83	179:2:5830:5855	1682516	4	True				
ANR	1683020	AssignmentExpression	* inst ++ = GROUP_BINARY_83		1682516	0		=			
ANR	1683021	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1683022	UnaryOperator	*		1682516	0					
ANR	1683023	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1683024	Identifier	inst		1682516	0					
ANR	1683025	IncDec	++		1682516	1					
ANR	1683026	Identifier	GROUP_BINARY_83		1682516	1					
ANR	1683027	ExpressionStatement	* inst ++ = MOD_REG | SUB | 4	180:2:5859:5886	1682516	5	True				
ANR	1683028	AssignmentExpression	* inst ++ = MOD_REG | SUB | 4		1682516	0		=			
ANR	1683029	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1683030	UnaryOperator	*		1682516	0					
ANR	1683031	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1683032	Identifier	inst		1682516	0					
ANR	1683033	IncDec	++		1682516	1					
ANR	1683034	InclusiveOrExpression	MOD_REG | SUB | 4		1682516	1		|			
ANR	1683035	Identifier	MOD_REG		1682516	0					
ANR	1683036	InclusiveOrExpression	SUB | 4		1682516	1		|			
ANR	1683037	Identifier	SUB		1682516	0					
ANR	1683038	PrimaryExpression	4		1682516	1					
ANR	1683039	ExpressionStatement	SLJIT_ASSERT ( ! ( saved_register_size & 0x7 ) )	182:2:5951:5993	1682516	6	True				
ANR	1683040	CallExpression	SLJIT_ASSERT ( ! ( saved_register_size & 0x7 ) )		1682516	0					
ANR	1683041	Callee	SLJIT_ASSERT		1682516	0					
ANR	1683042	Identifier	SLJIT_ASSERT		1682516	0					
ANR	1683043	ArgumentList	! ( saved_register_size & 0x7 )		1682516	1					
ANR	1683044	Argument	! ( saved_register_size & 0x7 )		1682516	0					
ANR	1683045	UnaryOperationExpression	! ( saved_register_size & 0x7 )		1682516	0					
ANR	1683046	UnaryOperator	!		1682516	0					
ANR	1683047	BitAndExpression	saved_register_size & 0x7		1682516	1		&			
ANR	1683048	Identifier	saved_register_size		1682516	0					
ANR	1683049	PrimaryExpression	0x7		1682516	1					
ANR	1683050	IfStatement	if ( saved_register_size & 0x8 )		1682516	7					
ANR	1683051	Condition	saved_register_size & 0x8	184:6:6029:6053	1682516	0	True				
ANR	1683052	BitAndExpression	saved_register_size & 0x8		1682516	0		&			
ANR	1683053	Identifier	saved_register_size		1682516	0					
ANR	1683054	PrimaryExpression	0x8		1682516	1					
ANR	1683055	CompoundStatement		92:33:2622:2622	1682516	1					
ANR	1683056	ExpressionStatement	* inst ++ = 5 * sizeof ( sljit_sw )	185:3:6061:6091	1682516	0	True				
ANR	1683057	AssignmentExpression	* inst ++ = 5 * sizeof ( sljit_sw )		1682516	0		=			
ANR	1683058	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1683059	UnaryOperator	*		1682516	0					
ANR	1683060	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1683061	Identifier	inst		1682516	0					
ANR	1683062	IncDec	++		1682516	1					
ANR	1683063	MultiplicativeExpression	5 * sizeof ( sljit_sw )		1682516	1		*			
ANR	1683064	PrimaryExpression	5		1682516	0					
ANR	1683065	SizeofExpression	sizeof ( sljit_sw )		1682516	1					
ANR	1683066	Sizeof	sizeof		1682516	0					
ANR	1683067	SizeofOperand	sljit_sw		1682516	1					
ANR	1683068	ExpressionStatement	local_size -= 5 * sizeof ( sljit_sw )	186:3:6096:6130	1682516	1	True				
ANR	1683069	AssignmentExpression	local_size -= 5 * sizeof ( sljit_sw )		1682516	0		-=			
ANR	1683070	Identifier	local_size		1682516	0					
ANR	1683071	MultiplicativeExpression	5 * sizeof ( sljit_sw )		1682516	1		*			
ANR	1683072	PrimaryExpression	5		1682516	0					
ANR	1683073	SizeofExpression	sizeof ( sljit_sw )		1682516	1					
ANR	1683074	Sizeof	sizeof		1682516	0					
ANR	1683075	SizeofOperand	sljit_sw		1682516	1					
ANR	1683076	ElseStatement	else		1682516	0					
ANR	1683077	CompoundStatement		95:9:2707:2707	1682516	0					
ANR	1683078	ExpressionStatement	* inst ++ = 4 * sizeof ( sljit_sw )	188:3:6146:6176	1682516	0	True				
ANR	1683079	AssignmentExpression	* inst ++ = 4 * sizeof ( sljit_sw )		1682516	0		=			
ANR	1683080	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1683081	UnaryOperator	*		1682516	0					
ANR	1683082	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1683083	Identifier	inst		1682516	0					
ANR	1683084	IncDec	++		1682516	1					
ANR	1683085	MultiplicativeExpression	4 * sizeof ( sljit_sw )		1682516	1		*			
ANR	1683086	PrimaryExpression	4		1682516	0					
ANR	1683087	SizeofExpression	sizeof ( sljit_sw )		1682516	1					
ANR	1683088	Sizeof	sizeof		1682516	0					
ANR	1683089	SizeofOperand	sljit_sw		1682516	1					
ANR	1683090	ExpressionStatement	local_size -= 4 * sizeof ( sljit_sw )	189:3:6181:6215	1682516	1	True				
ANR	1683091	AssignmentExpression	local_size -= 4 * sizeof ( sljit_sw )		1682516	0		-=			
ANR	1683092	Identifier	local_size		1682516	0					
ANR	1683093	MultiplicativeExpression	4 * sizeof ( sljit_sw )		1682516	1		*			
ANR	1683094	PrimaryExpression	4		1682516	0					
ANR	1683095	SizeofExpression	sizeof ( sljit_sw )		1682516	1					
ANR	1683096	Sizeof	sizeof		1682516	0					
ANR	1683097	SizeofOperand	sljit_sw		1682516	1					
ANR	1683098	ExpressionStatement	"SLJIT_COMPILE_ASSERT ( reg_map [ SLJIT_R0 ] < 8 , temporary_reg1_is_loreg )"	192:2:6250:6318	1682516	8	True				
ANR	1683099	CallExpression	"SLJIT_COMPILE_ASSERT ( reg_map [ SLJIT_R0 ] < 8 , temporary_reg1_is_loreg )"		1682516	0					
ANR	1683100	Callee	SLJIT_COMPILE_ASSERT		1682516	0					
ANR	1683101	Identifier	SLJIT_COMPILE_ASSERT		1682516	0					
ANR	1683102	ArgumentList	reg_map [ SLJIT_R0 ] < 8		1682516	1					
ANR	1683103	Argument	reg_map [ SLJIT_R0 ] < 8		1682516	0					
ANR	1683104	RelationalExpression	reg_map [ SLJIT_R0 ] < 8		1682516	0		<			
ANR	1683105	ArrayIndexing	reg_map [ SLJIT_R0 ]		1682516	0					
ANR	1683106	Identifier	reg_map		1682516	0					
ANR	1683107	Identifier	SLJIT_R0		1682516	1					
ANR	1683108	PrimaryExpression	8		1682516	1					
ANR	1683109	Argument	temporary_reg1_is_loreg		1682516	1					
ANR	1683110	Identifier	temporary_reg1_is_loreg		1682516	0					
ANR	1683111	ExpressionStatement	* inst ++ = REX_W	193:2:6322:6337	1682516	9	True				
ANR	1683112	AssignmentExpression	* inst ++ = REX_W		1682516	0		=			
ANR	1683113	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1683114	UnaryOperator	*		1682516	0					
ANR	1683115	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1683116	Identifier	inst		1682516	0					
ANR	1683117	IncDec	++		1682516	1					
ANR	1683118	Identifier	REX_W		1682516	1					
ANR	1683119	ExpressionStatement	* inst ++ = MOV_rm_i32	194:2:6341:6361	1682516	10	True				
ANR	1683120	AssignmentExpression	* inst ++ = MOV_rm_i32		1682516	0		=			
ANR	1683121	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1683122	UnaryOperator	*		1682516	0					
ANR	1683123	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1683124	Identifier	inst		1682516	0					
ANR	1683125	IncDec	++		1682516	1					
ANR	1683126	Identifier	MOV_rm_i32		1682516	1					
ANR	1683127	ExpressionStatement	* inst ++ = MOD_REG | reg_lmap [ SLJIT_R0 ]	195:2:6365:6403	1682516	11	True				
ANR	1683128	AssignmentExpression	* inst ++ = MOD_REG | reg_lmap [ SLJIT_R0 ]		1682516	0		=			
ANR	1683129	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1683130	UnaryOperator	*		1682516	0					
ANR	1683131	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1683132	Identifier	inst		1682516	0					
ANR	1683133	IncDec	++		1682516	1					
ANR	1683134	InclusiveOrExpression	MOD_REG | reg_lmap [ SLJIT_R0 ]		1682516	1		|			
ANR	1683135	Identifier	MOD_REG		1682516	0					
ANR	1683136	ArrayIndexing	reg_lmap [ SLJIT_R0 ]		1682516	1					
ANR	1683137	Identifier	reg_lmap		1682516	0					
ANR	1683138	Identifier	SLJIT_R0		1682516	1					
ANR	1683139	ExpressionStatement	* ( sljit_si * ) inst = local_size	196:2:6407:6436	1682516	12	True				
ANR	1683140	AssignmentExpression	* ( sljit_si * ) inst = local_size		1682516	0		=			
ANR	1683141	UnaryOperationExpression	* ( sljit_si * ) inst		1682516	0					
ANR	1683142	UnaryOperator	*		1682516	0					
ANR	1683143	CastExpression	( sljit_si * ) inst		1682516	1					
ANR	1683144	CastTarget	sljit_si *		1682516	0					
ANR	1683145	Identifier	inst		1682516	1					
ANR	1683146	Identifier	local_size		1682516	1					
ANR	1683147	Statement	||	198:3:6488:6489	1682516	13	True				
ANR	1683148	Statement	(	198:6:6491:6491	1682516	14	True				
ANR	1683149	Statement	defined	198:7:6492:6498	1682516	15	True				
ANR	1683150	Statement	SLJIT_ARGUMENT_CHECKS	198:15:6500:6520	1682516	16	True				
ANR	1683151	Statement	&&	198:37:6522:6523	1682516	17	True				
ANR	1683152	Statement	SLJIT_ARGUMENT_CHECKS	198:40:6525:6545	1682516	18	True				
ANR	1683153	Statement	)	198:61:6546:6546	1682516	19	True				
ANR	1683154	ExpressionStatement	compiler -> skip_checks = 1	199:2:6550:6575	1682516	20	True				
ANR	1683155	AssignmentExpression	compiler -> skip_checks = 1		1682516	0		=			
ANR	1683156	PtrMemberAccess	compiler -> skip_checks		1682516	0					
ANR	1683157	Identifier	compiler		1682516	0					
ANR	1683158	Identifier	skip_checks		1682516	1					
ANR	1683159	PrimaryExpression	1		1682516	1					
ANR	1683160	ExpressionStatement	"FAIL_IF ( sljit_emit_ijump ( compiler , SLJIT_CALL1 , SLJIT_IMM , SLJIT_FUNC_OFFSET ( sljit_grow_stack ) ) )"	201:2:6586:6682	1682516	21	True				
ANR	1683161	CallExpression	"FAIL_IF ( sljit_emit_ijump ( compiler , SLJIT_CALL1 , SLJIT_IMM , SLJIT_FUNC_OFFSET ( sljit_grow_stack ) ) )"		1682516	0					
ANR	1683162	Callee	FAIL_IF		1682516	0					
ANR	1683163	Identifier	FAIL_IF		1682516	0					
ANR	1683164	ArgumentList	"sljit_emit_ijump ( compiler , SLJIT_CALL1 , SLJIT_IMM , SLJIT_FUNC_OFFSET ( sljit_grow_stack ) )"		1682516	1					
ANR	1683165	Argument	"sljit_emit_ijump ( compiler , SLJIT_CALL1 , SLJIT_IMM , SLJIT_FUNC_OFFSET ( sljit_grow_stack ) )"		1682516	0					
ANR	1683166	CallExpression	"sljit_emit_ijump ( compiler , SLJIT_CALL1 , SLJIT_IMM , SLJIT_FUNC_OFFSET ( sljit_grow_stack ) )"		1682516	0					
ANR	1683167	Callee	sljit_emit_ijump		1682516	0					
ANR	1683168	Identifier	sljit_emit_ijump		1682516	0					
ANR	1683169	ArgumentList	compiler		1682516	1					
ANR	1683170	Argument	compiler		1682516	0					
ANR	1683171	Identifier	compiler		1682516	0					
ANR	1683172	Argument	SLJIT_CALL1		1682516	1					
ANR	1683173	Identifier	SLJIT_CALL1		1682516	0					
ANR	1683174	Argument	SLJIT_IMM		1682516	2					
ANR	1683175	Identifier	SLJIT_IMM		1682516	0					
ANR	1683176	Argument	SLJIT_FUNC_OFFSET ( sljit_grow_stack )		1682516	3					
ANR	1683177	CallExpression	SLJIT_FUNC_OFFSET ( sljit_grow_stack )		1682516	0					
ANR	1683178	Callee	SLJIT_FUNC_OFFSET		1682516	0					
ANR	1683179	Identifier	SLJIT_FUNC_OFFSET		1682516	0					
ANR	1683180	ArgumentList	sljit_grow_stack		1682516	1					
ANR	1683181	Argument	sljit_grow_stack		1682516	0					
ANR	1683182	Identifier	sljit_grow_stack		1682516	0					
ANR	1683183	ExpressionStatement	SLJIT_ASSERT ( local_size > 0 )	205:1:6696:6724	1682516	14	True				
ANR	1683184	CallExpression	SLJIT_ASSERT ( local_size > 0 )		1682516	0					
ANR	1683185	Callee	SLJIT_ASSERT		1682516	0					
ANR	1683186	Identifier	SLJIT_ASSERT		1682516	0					
ANR	1683187	ArgumentList	local_size > 0		1682516	1					
ANR	1683188	Argument	local_size > 0		1682516	0					
ANR	1683189	RelationalExpression	local_size > 0		1682516	0		>			
ANR	1683190	Identifier	local_size		1682516	0					
ANR	1683191	PrimaryExpression	0		1682516	1					
ANR	1683192	IfStatement	if ( local_size <= 127 )		1682516	15					
ANR	1683193	Condition	local_size <= 127	206:5:6731:6747	1682516	0	True				
ANR	1683194	RelationalExpression	local_size <= 127		1682516	0		<=			
ANR	1683195	Identifier	local_size		1682516	0					
ANR	1683196	PrimaryExpression	127		1682516	1					
ANR	1683197	CompoundStatement		114:24:3316:3316	1682516	1					
ANR	1683198	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 4 )"	207:2:6754:6799	1682516	0	True				
ANR	1683199	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 4 )"		1682516	0		=			
ANR	1683200	Identifier	inst		1682516	0					
ANR	1683201	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 4 )"		1682516	1					
ANR	1683202	CastTarget	sljit_ub *		1682516	0					
ANR	1683203	CallExpression	"ensure_buf ( compiler , 1 + 4 )"		1682516	1					
ANR	1683204	Callee	ensure_buf		1682516	0					
ANR	1683205	Identifier	ensure_buf		1682516	0					
ANR	1683206	ArgumentList	compiler		1682516	1					
ANR	1683207	Argument	compiler		1682516	0					
ANR	1683208	Identifier	compiler		1682516	0					
ANR	1683209	Argument	1 + 4		1682516	1					
ANR	1683210	AdditiveExpression	1 + 4		1682516	0		+			
ANR	1683211	PrimaryExpression	1		1682516	0					
ANR	1683212	PrimaryExpression	4		1682516	1					
ANR	1683213	ExpressionStatement	FAIL_IF ( ! inst )	208:2:6803:6817	1682516	1	True				
ANR	1683214	CallExpression	FAIL_IF ( ! inst )		1682516	0					
ANR	1683215	Callee	FAIL_IF		1682516	0					
ANR	1683216	Identifier	FAIL_IF		1682516	0					
ANR	1683217	ArgumentList	! inst		1682516	1					
ANR	1683218	Argument	! inst		1682516	0					
ANR	1683219	UnaryOperationExpression	! inst		1682516	0					
ANR	1683220	UnaryOperator	!		1682516	0					
ANR	1683221	Identifier	inst		1682516	1					
ANR	1683222	ExpressionStatement	INC_SIZE ( 4 )	209:2:6821:6832	1682516	2	True				
ANR	1683223	CallExpression	INC_SIZE ( 4 )		1682516	0					
ANR	1683224	Callee	INC_SIZE		1682516	0					
ANR	1683225	Identifier	INC_SIZE		1682516	0					
ANR	1683226	ArgumentList	4		1682516	1					
ANR	1683227	Argument	4		1682516	0					
ANR	1683228	PrimaryExpression	4		1682516	0					
ANR	1683229	ExpressionStatement	* inst ++ = REX_W	210:2:6836:6851	1682516	3	True				
ANR	1683230	AssignmentExpression	* inst ++ = REX_W		1682516	0		=			
ANR	1683231	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1683232	UnaryOperator	*		1682516	0					
ANR	1683233	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1683234	Identifier	inst		1682516	0					
ANR	1683235	IncDec	++		1682516	1					
ANR	1683236	Identifier	REX_W		1682516	1					
ANR	1683237	ExpressionStatement	* inst ++ = GROUP_BINARY_83	211:2:6855:6880	1682516	4	True				
ANR	1683238	AssignmentExpression	* inst ++ = GROUP_BINARY_83		1682516	0		=			
ANR	1683239	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1683240	UnaryOperator	*		1682516	0					
ANR	1683241	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1683242	Identifier	inst		1682516	0					
ANR	1683243	IncDec	++		1682516	1					
ANR	1683244	Identifier	GROUP_BINARY_83		1682516	1					
ANR	1683245	ExpressionStatement	* inst ++ = MOD_REG | SUB | 4	212:2:6884:6911	1682516	5	True				
ANR	1683246	AssignmentExpression	* inst ++ = MOD_REG | SUB | 4		1682516	0		=			
ANR	1683247	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1683248	UnaryOperator	*		1682516	0					
ANR	1683249	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1683250	Identifier	inst		1682516	0					
ANR	1683251	IncDec	++		1682516	1					
ANR	1683252	InclusiveOrExpression	MOD_REG | SUB | 4		1682516	1		|			
ANR	1683253	Identifier	MOD_REG		1682516	0					
ANR	1683254	InclusiveOrExpression	SUB | 4		1682516	1		|			
ANR	1683255	Identifier	SUB		1682516	0					
ANR	1683256	PrimaryExpression	4		1682516	1					
ANR	1683257	ExpressionStatement	* inst ++ = local_size	213:2:6915:6935	1682516	6	True				
ANR	1683258	AssignmentExpression	* inst ++ = local_size		1682516	0		=			
ANR	1683259	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1683260	UnaryOperator	*		1682516	0					
ANR	1683261	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1683262	Identifier	inst		1682516	0					
ANR	1683263	IncDec	++		1682516	1					
ANR	1683264	Identifier	local_size		1682516	1					
ANR	1683265	ElseStatement	else		1682516	0					
ANR	1683266	CompoundStatement		123:6:3512:3512	1682516	0					
ANR	1683267	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 7 )"	216:2:6950:6995	1682516	0	True				
ANR	1683268	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 7 )"		1682516	0		=			
ANR	1683269	Identifier	inst		1682516	0					
ANR	1683270	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 7 )"		1682516	1					
ANR	1683271	CastTarget	sljit_ub *		1682516	0					
ANR	1683272	CallExpression	"ensure_buf ( compiler , 1 + 7 )"		1682516	1					
ANR	1683273	Callee	ensure_buf		1682516	0					
ANR	1683274	Identifier	ensure_buf		1682516	0					
ANR	1683275	ArgumentList	compiler		1682516	1					
ANR	1683276	Argument	compiler		1682516	0					
ANR	1683277	Identifier	compiler		1682516	0					
ANR	1683278	Argument	1 + 7		1682516	1					
ANR	1683279	AdditiveExpression	1 + 7		1682516	0		+			
ANR	1683280	PrimaryExpression	1		1682516	0					
ANR	1683281	PrimaryExpression	7		1682516	1					
ANR	1683282	ExpressionStatement	FAIL_IF ( ! inst )	217:2:6999:7013	1682516	1	True				
ANR	1683283	CallExpression	FAIL_IF ( ! inst )		1682516	0					
ANR	1683284	Callee	FAIL_IF		1682516	0					
ANR	1683285	Identifier	FAIL_IF		1682516	0					
ANR	1683286	ArgumentList	! inst		1682516	1					
ANR	1683287	Argument	! inst		1682516	0					
ANR	1683288	UnaryOperationExpression	! inst		1682516	0					
ANR	1683289	UnaryOperator	!		1682516	0					
ANR	1683290	Identifier	inst		1682516	1					
ANR	1683291	ExpressionStatement	INC_SIZE ( 7 )	218:2:7017:7028	1682516	2	True				
ANR	1683292	CallExpression	INC_SIZE ( 7 )		1682516	0					
ANR	1683293	Callee	INC_SIZE		1682516	0					
ANR	1683294	Identifier	INC_SIZE		1682516	0					
ANR	1683295	ArgumentList	7		1682516	1					
ANR	1683296	Argument	7		1682516	0					
ANR	1683297	PrimaryExpression	7		1682516	0					
ANR	1683298	ExpressionStatement	* inst ++ = REX_W	219:2:7032:7047	1682516	3	True				
ANR	1683299	AssignmentExpression	* inst ++ = REX_W		1682516	0		=			
ANR	1683300	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1683301	UnaryOperator	*		1682516	0					
ANR	1683302	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1683303	Identifier	inst		1682516	0					
ANR	1683304	IncDec	++		1682516	1					
ANR	1683305	Identifier	REX_W		1682516	1					
ANR	1683306	ExpressionStatement	* inst ++ = GROUP_BINARY_81	220:2:7051:7076	1682516	4	True				
ANR	1683307	AssignmentExpression	* inst ++ = GROUP_BINARY_81		1682516	0		=			
ANR	1683308	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1683309	UnaryOperator	*		1682516	0					
ANR	1683310	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1683311	Identifier	inst		1682516	0					
ANR	1683312	IncDec	++		1682516	1					
ANR	1683313	Identifier	GROUP_BINARY_81		1682516	1					
ANR	1683314	ExpressionStatement	* inst ++ = MOD_REG | SUB | 4	221:2:7080:7107	1682516	5	True				
ANR	1683315	AssignmentExpression	* inst ++ = MOD_REG | SUB | 4		1682516	0		=			
ANR	1683316	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1683317	UnaryOperator	*		1682516	0					
ANR	1683318	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1683319	Identifier	inst		1682516	0					
ANR	1683320	IncDec	++		1682516	1					
ANR	1683321	InclusiveOrExpression	MOD_REG | SUB | 4		1682516	1		|			
ANR	1683322	Identifier	MOD_REG		1682516	0					
ANR	1683323	InclusiveOrExpression	SUB | 4		1682516	1		|			
ANR	1683324	Identifier	SUB		1682516	0					
ANR	1683325	PrimaryExpression	4		1682516	1					
ANR	1683326	ExpressionStatement	* ( sljit_si * ) inst = local_size	222:2:7111:7140	1682516	6	True				
ANR	1683327	AssignmentExpression	* ( sljit_si * ) inst = local_size		1682516	0		=			
ANR	1683328	UnaryOperationExpression	* ( sljit_si * ) inst		1682516	0					
ANR	1683329	UnaryOperator	*		1682516	0					
ANR	1683330	CastExpression	( sljit_si * ) inst		1682516	1					
ANR	1683331	CastTarget	sljit_si *		1682516	0					
ANR	1683332	Identifier	inst		1682516	1					
ANR	1683333	Identifier	local_size		1682516	1					
ANR	1683334	ExpressionStatement	inst += sizeof ( sljit_si )	223:2:7144:7168	1682516	7	True				
ANR	1683335	AssignmentExpression	inst += sizeof ( sljit_si )		1682516	0		+=			
ANR	1683336	Identifier	inst		1682516	0					
ANR	1683337	SizeofExpression	sizeof ( sljit_si )		1682516	1					
ANR	1683338	Sizeof	sizeof		1682516	0					
ANR	1683339	SizeofOperand	sljit_si		1682516	1					
ANR	1683340	IfStatement	if ( fscratches >= 6 || fsaveds >= 1 )		1682516	16					
ANR	1683341	Condition	fscratches >= 6 || fsaveds >= 1	228:5:7246:7276	1682516	0	True				
ANR	1683342	OrExpression	fscratches >= 6 || fsaveds >= 1		1682516	0		||			
ANR	1683343	RelationalExpression	fscratches >= 6		1682516	0		>=			
ANR	1683344	Identifier	fscratches		1682516	0					
ANR	1683345	PrimaryExpression	6		1682516	1					
ANR	1683346	RelationalExpression	fsaveds >= 1		1682516	1		>=			
ANR	1683347	Identifier	fsaveds		1682516	0					
ANR	1683348	PrimaryExpression	1		1682516	1					
ANR	1683349	CompoundStatement		136:38:3845:3845	1682516	1					
ANR	1683350	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 5 )"	229:2:7283:7328	1682516	0	True				
ANR	1683351	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 5 )"		1682516	0		=			
ANR	1683352	Identifier	inst		1682516	0					
ANR	1683353	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 5 )"		1682516	1					
ANR	1683354	CastTarget	sljit_ub *		1682516	0					
ANR	1683355	CallExpression	"ensure_buf ( compiler , 1 + 5 )"		1682516	1					
ANR	1683356	Callee	ensure_buf		1682516	0					
ANR	1683357	Identifier	ensure_buf		1682516	0					
ANR	1683358	ArgumentList	compiler		1682516	1					
ANR	1683359	Argument	compiler		1682516	0					
ANR	1683360	Identifier	compiler		1682516	0					
ANR	1683361	Argument	1 + 5		1682516	1					
ANR	1683362	AdditiveExpression	1 + 5		1682516	0		+			
ANR	1683363	PrimaryExpression	1		1682516	0					
ANR	1683364	PrimaryExpression	5		1682516	1					
ANR	1683365	ExpressionStatement	FAIL_IF ( ! inst )	230:2:7332:7346	1682516	1	True				
ANR	1683366	CallExpression	FAIL_IF ( ! inst )		1682516	0					
ANR	1683367	Callee	FAIL_IF		1682516	0					
ANR	1683368	Identifier	FAIL_IF		1682516	0					
ANR	1683369	ArgumentList	! inst		1682516	1					
ANR	1683370	Argument	! inst		1682516	0					
ANR	1683371	UnaryOperationExpression	! inst		1682516	0					
ANR	1683372	UnaryOperator	!		1682516	0					
ANR	1683373	Identifier	inst		1682516	1					
ANR	1683374	ExpressionStatement	INC_SIZE ( 5 )	231:2:7350:7361	1682516	2	True				
ANR	1683375	CallExpression	INC_SIZE ( 5 )		1682516	0					
ANR	1683376	Callee	INC_SIZE		1682516	0					
ANR	1683377	Identifier	INC_SIZE		1682516	0					
ANR	1683378	ArgumentList	5		1682516	1					
ANR	1683379	Argument	5		1682516	0					
ANR	1683380	PrimaryExpression	5		1682516	0					
ANR	1683381	ExpressionStatement	* inst ++ = GROUP_0F	232:2:7365:7383	1682516	3	True				
ANR	1683382	AssignmentExpression	* inst ++ = GROUP_0F		1682516	0		=			
ANR	1683383	UnaryOperationExpression	* inst ++		1682516	0					
ANR	1683384	UnaryOperator	*		1682516	0					
ANR	1683385	PostIncDecOperationExpression	inst ++		1682516	1					
ANR	1683386	Identifier	inst		1682516	0					
ANR	1683387	IncDec	++		1682516	1					
ANR	1683388	Identifier	GROUP_0F		1682516	1					
ANR	1683389	ExpressionStatement	* ( sljit_si * ) inst = 0x20247429	233:2:7387:7416	1682516	4	True				
ANR	1683390	AssignmentExpression	* ( sljit_si * ) inst = 0x20247429		1682516	0		=			
ANR	1683391	UnaryOperationExpression	* ( sljit_si * ) inst		1682516	0					
ANR	1683392	UnaryOperator	*		1682516	0					
ANR	1683393	CastExpression	( sljit_si * ) inst		1682516	1					
ANR	1683394	CastTarget	sljit_si *		1682516	0					
ANR	1683395	Identifier	inst		1682516	1					
ANR	1683396	PrimaryExpression	0x20247429		1682516	1					
ANR	1683397	ReturnStatement	return SLJIT_SUCCESS ;	237:1:7430:7450	1682516	17	True				
ANR	1683398	Identifier	SLJIT_SUCCESS		1682516	0					
ANR	1683399	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1682516	1					
ANR	1683400	Identifier	sljit_emit_enter		1682516	2					
ANR	1683401	ParameterList	"struct sljit_compiler * compiler , sljit_si options , sljit_si args , sljit_si scratches , sljit_si saveds , sljit_si fscratches , sljit_si fsaveds , sljit_si local_size"		1682516	3					
ANR	1683402	Parameter	struct sljit_compiler * compiler	90:51:3268:3298	1682516	0	True				
ANR	1683403	ParameterType	struct sljit_compiler *		1682516	0					
ANR	1683404	Identifier	compiler		1682516	1					
ANR	1683405	Parameter	sljit_si options	91:1:3302:3317	1682516	1	True				
ANR	1683406	ParameterType	sljit_si		1682516	0					
ANR	1683407	Identifier	options		1682516	1					
ANR	1683408	Parameter	sljit_si args	91:19:3320:3332	1682516	2	True				
ANR	1683409	ParameterType	sljit_si		1682516	0					
ANR	1683410	Identifier	args		1682516	1					
ANR	1683411	Parameter	sljit_si scratches	91:34:3335:3352	1682516	3	True				
ANR	1683412	ParameterType	sljit_si		1682516	0					
ANR	1683413	Identifier	scratches		1682516	1					
ANR	1683414	Parameter	sljit_si saveds	91:54:3355:3369	1682516	4	True				
ANR	1683415	ParameterType	sljit_si		1682516	0					
ANR	1683416	Identifier	saveds		1682516	1					
ANR	1683417	Parameter	sljit_si fscratches	92:1:3373:3391	1682516	5	True				
ANR	1683418	ParameterType	sljit_si		1682516	0					
ANR	1683419	Identifier	fscratches		1682516	1					
ANR	1683420	Parameter	sljit_si fsaveds	92:22:3394:3409	1682516	6	True				
ANR	1683421	ParameterType	sljit_si		1682516	0					
ANR	1683422	Identifier	fsaveds		1682516	1					
ANR	1683423	Parameter	sljit_si local_size	92:40:3412:3430	1682516	7	True				
ANR	1683424	ParameterType	sljit_si		1682516	0					
ANR	1683425	Identifier	local_size		1682516	1					
ANR	1683426	CFGEntryNode	ENTRY		1682516		True				
ANR	1683427	CFGExitNode	EXIT		1682516		True				
ANR	1683428	Symbol	sljit_grow_stack		1682516						
ANR	1683429	Symbol	saveds		1682516						
ANR	1683430	Symbol	compiler -> flags_saved		1682516						
ANR	1683431	Symbol	* inst ++		1682516						
ANR	1683432	Symbol	reg_map		1682516						
ANR	1683433	Symbol	check_sljit_emit_enter		1682516						
ANR	1683434	Symbol	* compiler		1682516						
ANR	1683435	Symbol	SLJIT_R0		1682516						
ANR	1683436	Symbol	SLJIT_IMM		1682516						
ANR	1683437	Symbol	tmp		1682516						
ANR	1683438	Symbol	SLJIT_LOCALS_OFFSET		1682516						
ANR	1683439	Symbol	* reg_lmap		1682516						
ANR	1683440	Symbol	temporary_reg1_is_loreg		1682516						
ANR	1683441	Symbol	options		1682516						
ANR	1683442	Symbol	* SLJIT_R0		1682516						
ANR	1683443	Symbol	GET_SAVED_REGISTERS_SIZE		1682516						
ANR	1683444	Symbol	SUB		1682516						
ANR	1683445	Symbol	GROUP_0F		1682516						
ANR	1683446	Symbol	~15		1682516						
ANR	1683447	Symbol	* reg_map		1682516						
ANR	1683448	Symbol	REX_B		1682516						
ANR	1683449	Symbol	SLJIT_S2		1682516						
ANR	1683450	Symbol	SLJIT_S0		1682516						
ANR	1683451	Symbol	SLJIT_S1		1682516						
ANR	1683452	Symbol	fscratches		1682516						
ANR	1683453	Symbol	compiler -> local_size		1682516						
ANR	1683454	Symbol	fsaveds		1682516						
ANR	1683455	Symbol	size		1682516						
ANR	1683456	Symbol	saved_register_size		1682516						
ANR	1683457	Symbol	GROUP_BINARY_81		1682516						
ANR	1683458	Symbol	SLJIT_FIRST_SAVED_REG		1682516						
ANR	1683459	Symbol	GROUP_BINARY_83		1682516						
ANR	1683460	Symbol	REX_W		1682516						
ANR	1683461	Symbol	REX_R		1682516						
ANR	1683462	Symbol	* ( sljit_si * ) inst		1682516						
ANR	1683463	Symbol	scratches		1682516						
ANR	1683464	Symbol	sljit_emit_ijump		1682516						
ANR	1683465	Symbol	SLJIT_NUMBER_OF_SAVED_REGISTERS		1682516						
ANR	1683466	Symbol	SLJIT_FUNC_OFFSET		1682516						
ANR	1683467	Symbol	MOV_rm_i32		1682516						
ANR	1683468	Symbol	compiler		1682516						
ANR	1683469	Symbol	local_size		1682516						
ANR	1683470	Symbol	* inst		1682516						
ANR	1683471	Symbol	MOV_r_rm		1682516						
ANR	1683472	Symbol	i		1682516						
ANR	1683473	Symbol	SLJIT_SUCCESS		1682516						
ANR	1683474	Symbol	MOD_REG		1682516						
ANR	1683475	Symbol	args		1682516						
ANR	1683476	Symbol	reg_lmap		1682516						
ANR	1683477	Symbol	* SLJIT_S2		1682516						
ANR	1683478	Symbol	* i		1682516						
ANR	1683479	Symbol	inst		1682516						
ANR	1683480	Symbol	ensure_buf		1682516						
ANR	1683481	Symbol	compiler -> skip_checks		1682516						
ANR	1683482	Symbol	SLJIT_CALL1		1682516						
ANR	1683483	Symbol	* SLJIT_S0		1682516						
ANR	1683484	Symbol	* SLJIT_S1		1682516						
ANR	1683485	Function	sljit_set_context	240:0:7455:8206							
ANR	1683486	FunctionDef	"sljit_set_context (struct sljit_compiler * compiler , sljit_si options , sljit_si args , sljit_si scratches , sljit_si saveds , sljit_si fscratches , sljit_si fsaveds , sljit_si local_size)"		1683485	0					
ANR	1683487	CompoundStatement		243:0:7672:8206	1683485	0					
ANR	1683488	IdentifierDeclStatement	sljit_si saved_register_size ;	244:1:7675:7703	1683485	0	True				
ANR	1683489	IdentifierDecl	saved_register_size		1683485	0					
ANR	1683490	IdentifierDeclType	sljit_si		1683485	0					
ANR	1683491	Identifier	saved_register_size		1683485	1					
ANR	1683492	ExpressionStatement	CHECK_ERROR ( )	246:1:7707:7720	1683485	1	True				
ANR	1683493	CallExpression	CHECK_ERROR ( )		1683485	0					
ANR	1683494	Callee	CHECK_ERROR		1683485	0					
ANR	1683495	Identifier	CHECK_ERROR		1683485	0					
ANR	1683496	ArgumentList			1683485	1					
ANR	1683497	ExpressionStatement	"CHECK ( check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size ) )"	247:1:7723:7830	1683485	2	True				
ANR	1683498	CallExpression	"CHECK ( check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size ) )"		1683485	0					
ANR	1683499	Callee	CHECK		1683485	0					
ANR	1683500	Identifier	CHECK		1683485	0					
ANR	1683501	ArgumentList	"check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1683485	1					
ANR	1683502	Argument	"check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1683485	0					
ANR	1683503	CallExpression	"check_sljit_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1683485	0					
ANR	1683504	Callee	check_sljit_set_context		1683485	0					
ANR	1683505	Identifier	check_sljit_set_context		1683485	0					
ANR	1683506	ArgumentList	compiler		1683485	1					
ANR	1683507	Argument	compiler		1683485	0					
ANR	1683508	Identifier	compiler		1683485	0					
ANR	1683509	Argument	options		1683485	1					
ANR	1683510	Identifier	options		1683485	0					
ANR	1683511	Argument	args		1683485	2					
ANR	1683512	Identifier	args		1683485	0					
ANR	1683513	Argument	scratches		1683485	3					
ANR	1683514	Identifier	scratches		1683485	0					
ANR	1683515	Argument	saveds		1683485	4					
ANR	1683516	Identifier	saveds		1683485	0					
ANR	1683517	Argument	fscratches		1683485	5					
ANR	1683518	Identifier	fscratches		1683485	0					
ANR	1683519	Argument	fsaveds		1683485	6					
ANR	1683520	Identifier	fsaveds		1683485	0					
ANR	1683521	Argument	local_size		1683485	7					
ANR	1683522	Identifier	local_size		1683485	0					
ANR	1683523	ExpressionStatement	"set_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"	248:1:7833:7925	1683485	3	True				
ANR	1683524	CallExpression	"set_set_context ( compiler , options , args , scratches , saveds , fscratches , fsaveds , local_size )"		1683485	0					
ANR	1683525	Callee	set_set_context		1683485	0					
ANR	1683526	Identifier	set_set_context		1683485	0					
ANR	1683527	ArgumentList	compiler		1683485	1					
ANR	1683528	Argument	compiler		1683485	0					
ANR	1683529	Identifier	compiler		1683485	0					
ANR	1683530	Argument	options		1683485	1					
ANR	1683531	Identifier	options		1683485	0					
ANR	1683532	Argument	args		1683485	2					
ANR	1683533	Identifier	args		1683485	0					
ANR	1683534	Argument	scratches		1683485	3					
ANR	1683535	Identifier	scratches		1683485	0					
ANR	1683536	Argument	saveds		1683485	4					
ANR	1683537	Identifier	saveds		1683485	0					
ANR	1683538	Argument	fscratches		1683485	5					
ANR	1683539	Identifier	fscratches		1683485	0					
ANR	1683540	Argument	fsaveds		1683485	6					
ANR	1683541	Identifier	fsaveds		1683485	0					
ANR	1683542	Argument	local_size		1683485	7					
ANR	1683543	Identifier	local_size		1683485	0					
ANR	1683544	ExpressionStatement	"saved_register_size = GET_SAVED_REGISTERS_SIZE ( scratches , saveds , 1 )"	251:1:7996:8064	1683485	4	True				
ANR	1683545	AssignmentExpression	"saved_register_size = GET_SAVED_REGISTERS_SIZE ( scratches , saveds , 1 )"		1683485	0		=			
ANR	1683546	Identifier	saved_register_size		1683485	0					
ANR	1683547	CallExpression	"GET_SAVED_REGISTERS_SIZE ( scratches , saveds , 1 )"		1683485	1					
ANR	1683548	Callee	GET_SAVED_REGISTERS_SIZE		1683485	0					
ANR	1683549	Identifier	GET_SAVED_REGISTERS_SIZE		1683485	0					
ANR	1683550	ArgumentList	scratches		1683485	1					
ANR	1683551	Argument	scratches		1683485	0					
ANR	1683552	Identifier	scratches		1683485	0					
ANR	1683553	Argument	saveds		1683485	1					
ANR	1683554	Identifier	saveds		1683485	0					
ANR	1683555	Argument	1		1683485	2					
ANR	1683556	PrimaryExpression	1		1683485	0					
ANR	1683557	ExpressionStatement	compiler -> local_size = ( ( local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15 ) & ~15 ) - saved_register_size	252:1:8067:8181	1683485	5	True				
ANR	1683558	AssignmentExpression	compiler -> local_size = ( ( local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15 ) & ~15 ) - saved_register_size		1683485	0		=			
ANR	1683559	PtrMemberAccess	compiler -> local_size		1683485	0					
ANR	1683560	Identifier	compiler		1683485	0					
ANR	1683561	Identifier	local_size		1683485	1					
ANR	1683562	AdditiveExpression	( ( local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15 ) & ~15 ) - saved_register_size		1683485	1		-			
ANR	1683563	BitAndExpression	( local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15 ) & ~15		1683485	0		&			
ANR	1683564	AdditiveExpression	local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15		1683485	0		+			
ANR	1683565	Identifier	local_size		1683485	0					
ANR	1683566	AdditiveExpression	SLJIT_LOCALS_OFFSET + saved_register_size + 15		1683485	1		+			
ANR	1683567	Identifier	SLJIT_LOCALS_OFFSET		1683485	0					
ANR	1683568	AdditiveExpression	saved_register_size + 15		1683485	1		+			
ANR	1683569	Identifier	saved_register_size		1683485	0					
ANR	1683570	PrimaryExpression	15		1683485	1					
ANR	1683571	Identifier	~15		1683485	1					
ANR	1683572	Identifier	saved_register_size		1683485	1					
ANR	1683573	ReturnStatement	return SLJIT_SUCCESS ;	253:1:8184:8204	1683485	6	True				
ANR	1683574	Identifier	SLJIT_SUCCESS		1683485	0					
ANR	1683575	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1683485	1					
ANR	1683576	Identifier	sljit_set_context		1683485	2					
ANR	1683577	ParameterList	"struct sljit_compiler * compiler , sljit_si options , sljit_si args , sljit_si scratches , sljit_si saveds , sljit_si fscratches , sljit_si fsaveds , sljit_si local_size"		1683485	3					
ANR	1683578	Parameter	struct sljit_compiler * compiler	240:52:7507:7537	1683485	0	True				
ANR	1683579	ParameterType	struct sljit_compiler *		1683485	0					
ANR	1683580	Identifier	compiler		1683485	1					
ANR	1683581	Parameter	sljit_si options	241:1:7541:7556	1683485	1	True				
ANR	1683582	ParameterType	sljit_si		1683485	0					
ANR	1683583	Identifier	options		1683485	1					
ANR	1683584	Parameter	sljit_si args	241:19:7559:7571	1683485	2	True				
ANR	1683585	ParameterType	sljit_si		1683485	0					
ANR	1683586	Identifier	args		1683485	1					
ANR	1683587	Parameter	sljit_si scratches	241:34:7574:7591	1683485	3	True				
ANR	1683588	ParameterType	sljit_si		1683485	0					
ANR	1683589	Identifier	scratches		1683485	1					
ANR	1683590	Parameter	sljit_si saveds	241:54:7594:7608	1683485	4	True				
ANR	1683591	ParameterType	sljit_si		1683485	0					
ANR	1683592	Identifier	saveds		1683485	1					
ANR	1683593	Parameter	sljit_si fscratches	242:1:7612:7630	1683485	5	True				
ANR	1683594	ParameterType	sljit_si		1683485	0					
ANR	1683595	Identifier	fscratches		1683485	1					
ANR	1683596	Parameter	sljit_si fsaveds	242:22:7633:7648	1683485	6	True				
ANR	1683597	ParameterType	sljit_si		1683485	0					
ANR	1683598	Identifier	fsaveds		1683485	1					
ANR	1683599	Parameter	sljit_si local_size	242:40:7651:7669	1683485	7	True				
ANR	1683600	ParameterType	sljit_si		1683485	0					
ANR	1683601	Identifier	local_size		1683485	1					
ANR	1683602	CFGEntryNode	ENTRY		1683485		True				
ANR	1683603	CFGExitNode	EXIT		1683485		True				
ANR	1683604	Symbol	GET_SAVED_REGISTERS_SIZE		1683485						
ANR	1683605	Symbol	local_size		1683485						
ANR	1683606	Symbol	~15		1683485						
ANR	1683607	Symbol	scratches		1683485						
ANR	1683608	Symbol	saveds		1683485						
ANR	1683609	Symbol	check_sljit_set_context		1683485						
ANR	1683610	Symbol	SLJIT_SUCCESS		1683485						
ANR	1683611	Symbol	* compiler		1683485						
ANR	1683612	Symbol	args		1683485						
ANR	1683613	Symbol	fscratches		1683485						
ANR	1683614	Symbol	compiler -> local_size		1683485						
ANR	1683615	Symbol	fsaveds		1683485						
ANR	1683616	Symbol	saved_register_size		1683485						
ANR	1683617	Symbol	SLJIT_LOCALS_OFFSET		1683485						
ANR	1683618	Symbol	options		1683485						
ANR	1683619	Symbol	compiler		1683485						
ANR	1683620	Function	sljit_emit_return	256:0:8209:10040							
ANR	1683621	FunctionDef	"sljit_emit_return (struct sljit_compiler * compiler , sljit_si op , sljit_si src , sljit_sw srcw)"		1683620	0					
ANR	1683622	CompoundStatement		257:0:8336:10040	1683620	0					
ANR	1683623	IdentifierDeclStatement	"sljit_si i , tmp , size ;"	258:1:8339:8360	1683620	0	True				
ANR	1683624	IdentifierDecl	i		1683620	0					
ANR	1683625	IdentifierDeclType	sljit_si		1683620	0					
ANR	1683626	Identifier	i		1683620	1					
ANR	1683627	IdentifierDecl	tmp		1683620	1					
ANR	1683628	IdentifierDeclType	sljit_si		1683620	0					
ANR	1683629	Identifier	tmp		1683620	1					
ANR	1683630	IdentifierDecl	size		1683620	2					
ANR	1683631	IdentifierDeclType	sljit_si		1683620	0					
ANR	1683632	Identifier	size		1683620	1					
ANR	1683633	IdentifierDeclStatement	sljit_ub * inst ;	259:1:8363:8377	1683620	1	True				
ANR	1683634	IdentifierDecl	* inst		1683620	0					
ANR	1683635	IdentifierDeclType	sljit_ub *		1683620	0					
ANR	1683636	Identifier	inst		1683620	1					
ANR	1683637	ExpressionStatement	CHECK_ERROR ( )	261:1:8381:8394	1683620	2	True				
ANR	1683638	CallExpression	CHECK_ERROR ( )		1683620	0					
ANR	1683639	Callee	CHECK_ERROR		1683620	0					
ANR	1683640	Identifier	CHECK_ERROR		1683620	0					
ANR	1683641	ArgumentList			1683620	1					
ANR	1683642	ExpressionStatement	"CHECK ( check_sljit_emit_return ( compiler , op , src , srcw ) )"	262:1:8397:8452	1683620	3	True				
ANR	1683643	CallExpression	"CHECK ( check_sljit_emit_return ( compiler , op , src , srcw ) )"		1683620	0					
ANR	1683644	Callee	CHECK		1683620	0					
ANR	1683645	Identifier	CHECK		1683620	0					
ANR	1683646	ArgumentList	"check_sljit_emit_return ( compiler , op , src , srcw )"		1683620	1					
ANR	1683647	Argument	"check_sljit_emit_return ( compiler , op , src , srcw )"		1683620	0					
ANR	1683648	CallExpression	"check_sljit_emit_return ( compiler , op , src , srcw )"		1683620	0					
ANR	1683649	Callee	check_sljit_emit_return		1683620	0					
ANR	1683650	Identifier	check_sljit_emit_return		1683620	0					
ANR	1683651	ArgumentList	compiler		1683620	1					
ANR	1683652	Argument	compiler		1683620	0					
ANR	1683653	Identifier	compiler		1683620	0					
ANR	1683654	Argument	op		1683620	1					
ANR	1683655	Identifier	op		1683620	0					
ANR	1683656	Argument	src		1683620	2					
ANR	1683657	Identifier	src		1683620	0					
ANR	1683658	Argument	srcw		1683620	3					
ANR	1683659	Identifier	srcw		1683620	0					
ANR	1683660	ExpressionStatement	compiler -> flags_saved = 0	264:1:8456:8481	1683620	4	True				
ANR	1683661	AssignmentExpression	compiler -> flags_saved = 0		1683620	0		=			
ANR	1683662	PtrMemberAccess	compiler -> flags_saved		1683620	0					
ANR	1683663	Identifier	compiler		1683620	0					
ANR	1683664	Identifier	flags_saved		1683620	1					
ANR	1683665	PrimaryExpression	0		1683620	1					
ANR	1683666	ExpressionStatement	"FAIL_IF ( emit_mov_before_return ( compiler , op , src , srcw ) )"	265:1:8484:8540	1683620	5	True				
ANR	1683667	CallExpression	"FAIL_IF ( emit_mov_before_return ( compiler , op , src , srcw ) )"		1683620	0					
ANR	1683668	Callee	FAIL_IF		1683620	0					
ANR	1683669	Identifier	FAIL_IF		1683620	0					
ANR	1683670	ArgumentList	"emit_mov_before_return ( compiler , op , src , srcw )"		1683620	1					
ANR	1683671	Argument	"emit_mov_before_return ( compiler , op , src , srcw )"		1683620	0					
ANR	1683672	CallExpression	"emit_mov_before_return ( compiler , op , src , srcw )"		1683620	0					
ANR	1683673	Callee	emit_mov_before_return		1683620	0					
ANR	1683674	Identifier	emit_mov_before_return		1683620	0					
ANR	1683675	ArgumentList	compiler		1683620	1					
ANR	1683676	Argument	compiler		1683620	0					
ANR	1683677	Identifier	compiler		1683620	0					
ANR	1683678	Argument	op		1683620	1					
ANR	1683679	Identifier	op		1683620	0					
ANR	1683680	Argument	src		1683620	2					
ANR	1683681	Identifier	src		1683620	0					
ANR	1683682	Argument	srcw		1683620	3					
ANR	1683683	Identifier	srcw		1683620	0					
ANR	1683684	IfStatement	if ( compiler -> fscratches >= 6 || compiler -> fsaveds >= 1 )		1683620	6					
ANR	1683685	Condition	compiler -> fscratches >= 6 || compiler -> fsaveds >= 1	269:5:8618:8668	1683620	0	True				
ANR	1683686	OrExpression	compiler -> fscratches >= 6 || compiler -> fsaveds >= 1		1683620	0		||			
ANR	1683687	RelationalExpression	compiler -> fscratches >= 6		1683620	0		>=			
ANR	1683688	PtrMemberAccess	compiler -> fscratches		1683620	0					
ANR	1683689	Identifier	compiler		1683620	0					
ANR	1683690	Identifier	fscratches		1683620	1					
ANR	1683691	PrimaryExpression	6		1683620	1					
ANR	1683692	RelationalExpression	compiler -> fsaveds >= 1		1683620	1		>=			
ANR	1683693	PtrMemberAccess	compiler -> fsaveds		1683620	0					
ANR	1683694	Identifier	compiler		1683620	0					
ANR	1683695	Identifier	fsaveds		1683620	1					
ANR	1683696	PrimaryExpression	1		1683620	1					
ANR	1683697	CompoundStatement		13:58:334:334	1683620	1					
ANR	1683698	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 5 )"	270:2:8675:8720	1683620	0	True				
ANR	1683699	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 5 )"		1683620	0		=			
ANR	1683700	Identifier	inst		1683620	0					
ANR	1683701	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 5 )"		1683620	1					
ANR	1683702	CastTarget	sljit_ub *		1683620	0					
ANR	1683703	CallExpression	"ensure_buf ( compiler , 1 + 5 )"		1683620	1					
ANR	1683704	Callee	ensure_buf		1683620	0					
ANR	1683705	Identifier	ensure_buf		1683620	0					
ANR	1683706	ArgumentList	compiler		1683620	1					
ANR	1683707	Argument	compiler		1683620	0					
ANR	1683708	Identifier	compiler		1683620	0					
ANR	1683709	Argument	1 + 5		1683620	1					
ANR	1683710	AdditiveExpression	1 + 5		1683620	0		+			
ANR	1683711	PrimaryExpression	1		1683620	0					
ANR	1683712	PrimaryExpression	5		1683620	1					
ANR	1683713	ExpressionStatement	FAIL_IF ( ! inst )	271:2:8724:8738	1683620	1	True				
ANR	1683714	CallExpression	FAIL_IF ( ! inst )		1683620	0					
ANR	1683715	Callee	FAIL_IF		1683620	0					
ANR	1683716	Identifier	FAIL_IF		1683620	0					
ANR	1683717	ArgumentList	! inst		1683620	1					
ANR	1683718	Argument	! inst		1683620	0					
ANR	1683719	UnaryOperationExpression	! inst		1683620	0					
ANR	1683720	UnaryOperator	!		1683620	0					
ANR	1683721	Identifier	inst		1683620	1					
ANR	1683722	ExpressionStatement	INC_SIZE ( 5 )	272:2:8742:8753	1683620	2	True				
ANR	1683723	CallExpression	INC_SIZE ( 5 )		1683620	0					
ANR	1683724	Callee	INC_SIZE		1683620	0					
ANR	1683725	Identifier	INC_SIZE		1683620	0					
ANR	1683726	ArgumentList	5		1683620	1					
ANR	1683727	Argument	5		1683620	0					
ANR	1683728	PrimaryExpression	5		1683620	0					
ANR	1683729	ExpressionStatement	* inst ++ = GROUP_0F	273:2:8757:8775	1683620	3	True				
ANR	1683730	AssignmentExpression	* inst ++ = GROUP_0F		1683620	0		=			
ANR	1683731	UnaryOperationExpression	* inst ++		1683620	0					
ANR	1683732	UnaryOperator	*		1683620	0					
ANR	1683733	PostIncDecOperationExpression	inst ++		1683620	1					
ANR	1683734	Identifier	inst		1683620	0					
ANR	1683735	IncDec	++		1683620	1					
ANR	1683736	Identifier	GROUP_0F		1683620	1					
ANR	1683737	ExpressionStatement	* ( sljit_si * ) inst = 0x20247428	274:2:8779:8808	1683620	4	True				
ANR	1683738	AssignmentExpression	* ( sljit_si * ) inst = 0x20247428		1683620	0		=			
ANR	1683739	UnaryOperationExpression	* ( sljit_si * ) inst		1683620	0					
ANR	1683740	UnaryOperator	*		1683620	0					
ANR	1683741	CastExpression	( sljit_si * ) inst		1683620	1					
ANR	1683742	CastTarget	sljit_si *		1683620	0					
ANR	1683743	Identifier	inst		1683620	1					
ANR	1683744	PrimaryExpression	0x20247428		1683620	1					
ANR	1683745	ExpressionStatement	SLJIT_ASSERT ( compiler -> local_size > 0 )	278:1:8822:8860	1683620	7	True				
ANR	1683746	CallExpression	SLJIT_ASSERT ( compiler -> local_size > 0 )		1683620	0					
ANR	1683747	Callee	SLJIT_ASSERT		1683620	0					
ANR	1683748	Identifier	SLJIT_ASSERT		1683620	0					
ANR	1683749	ArgumentList	compiler -> local_size > 0		1683620	1					
ANR	1683750	Argument	compiler -> local_size > 0		1683620	0					
ANR	1683751	RelationalExpression	compiler -> local_size > 0		1683620	0		>			
ANR	1683752	PtrMemberAccess	compiler -> local_size		1683620	0					
ANR	1683753	Identifier	compiler		1683620	0					
ANR	1683754	Identifier	local_size		1683620	1					
ANR	1683755	PrimaryExpression	0		1683620	1					
ANR	1683756	IfStatement	if ( compiler -> local_size <= 127 )		1683620	8					
ANR	1683757	Condition	compiler -> local_size <= 127	279:5:8867:8893	1683620	0	True				
ANR	1683758	RelationalExpression	compiler -> local_size <= 127		1683620	0		<=			
ANR	1683759	PtrMemberAccess	compiler -> local_size		1683620	0					
ANR	1683760	Identifier	compiler		1683620	0					
ANR	1683761	Identifier	local_size		1683620	1					
ANR	1683762	PrimaryExpression	127		1683620	1					
ANR	1683763	CompoundStatement		23:34:559:559	1683620	1					
ANR	1683764	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 4 )"	280:2:8900:8945	1683620	0	True				
ANR	1683765	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 4 )"		1683620	0		=			
ANR	1683766	Identifier	inst		1683620	0					
ANR	1683767	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 4 )"		1683620	1					
ANR	1683768	CastTarget	sljit_ub *		1683620	0					
ANR	1683769	CallExpression	"ensure_buf ( compiler , 1 + 4 )"		1683620	1					
ANR	1683770	Callee	ensure_buf		1683620	0					
ANR	1683771	Identifier	ensure_buf		1683620	0					
ANR	1683772	ArgumentList	compiler		1683620	1					
ANR	1683773	Argument	compiler		1683620	0					
ANR	1683774	Identifier	compiler		1683620	0					
ANR	1683775	Argument	1 + 4		1683620	1					
ANR	1683776	AdditiveExpression	1 + 4		1683620	0		+			
ANR	1683777	PrimaryExpression	1		1683620	0					
ANR	1683778	PrimaryExpression	4		1683620	1					
ANR	1683779	ExpressionStatement	FAIL_IF ( ! inst )	281:2:8949:8963	1683620	1	True				
ANR	1683780	CallExpression	FAIL_IF ( ! inst )		1683620	0					
ANR	1683781	Callee	FAIL_IF		1683620	0					
ANR	1683782	Identifier	FAIL_IF		1683620	0					
ANR	1683783	ArgumentList	! inst		1683620	1					
ANR	1683784	Argument	! inst		1683620	0					
ANR	1683785	UnaryOperationExpression	! inst		1683620	0					
ANR	1683786	UnaryOperator	!		1683620	0					
ANR	1683787	Identifier	inst		1683620	1					
ANR	1683788	ExpressionStatement	INC_SIZE ( 4 )	282:2:8967:8978	1683620	2	True				
ANR	1683789	CallExpression	INC_SIZE ( 4 )		1683620	0					
ANR	1683790	Callee	INC_SIZE		1683620	0					
ANR	1683791	Identifier	INC_SIZE		1683620	0					
ANR	1683792	ArgumentList	4		1683620	1					
ANR	1683793	Argument	4		1683620	0					
ANR	1683794	PrimaryExpression	4		1683620	0					
ANR	1683795	ExpressionStatement	* inst ++ = REX_W	283:2:8982:8997	1683620	3	True				
ANR	1683796	AssignmentExpression	* inst ++ = REX_W		1683620	0		=			
ANR	1683797	UnaryOperationExpression	* inst ++		1683620	0					
ANR	1683798	UnaryOperator	*		1683620	0					
ANR	1683799	PostIncDecOperationExpression	inst ++		1683620	1					
ANR	1683800	Identifier	inst		1683620	0					
ANR	1683801	IncDec	++		1683620	1					
ANR	1683802	Identifier	REX_W		1683620	1					
ANR	1683803	ExpressionStatement	* inst ++ = GROUP_BINARY_83	284:2:9001:9026	1683620	4	True				
ANR	1683804	AssignmentExpression	* inst ++ = GROUP_BINARY_83		1683620	0		=			
ANR	1683805	UnaryOperationExpression	* inst ++		1683620	0					
ANR	1683806	UnaryOperator	*		1683620	0					
ANR	1683807	PostIncDecOperationExpression	inst ++		1683620	1					
ANR	1683808	Identifier	inst		1683620	0					
ANR	1683809	IncDec	++		1683620	1					
ANR	1683810	Identifier	GROUP_BINARY_83		1683620	1					
ANR	1683811	ExpressionStatement	* inst ++ = MOD_REG | ADD | 4	285:2:9030:9057	1683620	5	True				
ANR	1683812	AssignmentExpression	* inst ++ = MOD_REG | ADD | 4		1683620	0		=			
ANR	1683813	UnaryOperationExpression	* inst ++		1683620	0					
ANR	1683814	UnaryOperator	*		1683620	0					
ANR	1683815	PostIncDecOperationExpression	inst ++		1683620	1					
ANR	1683816	Identifier	inst		1683620	0					
ANR	1683817	IncDec	++		1683620	1					
ANR	1683818	InclusiveOrExpression	MOD_REG | ADD | 4		1683620	1		|			
ANR	1683819	Identifier	MOD_REG		1683620	0					
ANR	1683820	InclusiveOrExpression	ADD | 4		1683620	1		|			
ANR	1683821	Identifier	ADD		1683620	0					
ANR	1683822	PrimaryExpression	4		1683620	1					
ANR	1683823	ExpressionStatement	* inst = compiler -> local_size	286:2:9061:9089	1683620	6	True				
ANR	1683824	AssignmentExpression	* inst = compiler -> local_size		1683620	0		=			
ANR	1683825	UnaryOperationExpression	* inst		1683620	0					
ANR	1683826	UnaryOperator	*		1683620	0					
ANR	1683827	Identifier	inst		1683620	1					
ANR	1683828	PtrMemberAccess	compiler -> local_size		1683620	1					
ANR	1683829	Identifier	compiler		1683620	0					
ANR	1683830	Identifier	local_size		1683620	1					
ANR	1683831	ElseStatement	else		1683620	0					
ANR	1683832	CompoundStatement		32:6:763:763	1683620	0					
ANR	1683833	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 7 )"	289:2:9104:9149	1683620	0	True				
ANR	1683834	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 7 )"		1683620	0		=			
ANR	1683835	Identifier	inst		1683620	0					
ANR	1683836	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 7 )"		1683620	1					
ANR	1683837	CastTarget	sljit_ub *		1683620	0					
ANR	1683838	CallExpression	"ensure_buf ( compiler , 1 + 7 )"		1683620	1					
ANR	1683839	Callee	ensure_buf		1683620	0					
ANR	1683840	Identifier	ensure_buf		1683620	0					
ANR	1683841	ArgumentList	compiler		1683620	1					
ANR	1683842	Argument	compiler		1683620	0					
ANR	1683843	Identifier	compiler		1683620	0					
ANR	1683844	Argument	1 + 7		1683620	1					
ANR	1683845	AdditiveExpression	1 + 7		1683620	0		+			
ANR	1683846	PrimaryExpression	1		1683620	0					
ANR	1683847	PrimaryExpression	7		1683620	1					
ANR	1683848	ExpressionStatement	FAIL_IF ( ! inst )	290:2:9153:9167	1683620	1	True				
ANR	1683849	CallExpression	FAIL_IF ( ! inst )		1683620	0					
ANR	1683850	Callee	FAIL_IF		1683620	0					
ANR	1683851	Identifier	FAIL_IF		1683620	0					
ANR	1683852	ArgumentList	! inst		1683620	1					
ANR	1683853	Argument	! inst		1683620	0					
ANR	1683854	UnaryOperationExpression	! inst		1683620	0					
ANR	1683855	UnaryOperator	!		1683620	0					
ANR	1683856	Identifier	inst		1683620	1					
ANR	1683857	ExpressionStatement	INC_SIZE ( 7 )	291:2:9171:9182	1683620	2	True				
ANR	1683858	CallExpression	INC_SIZE ( 7 )		1683620	0					
ANR	1683859	Callee	INC_SIZE		1683620	0					
ANR	1683860	Identifier	INC_SIZE		1683620	0					
ANR	1683861	ArgumentList	7		1683620	1					
ANR	1683862	Argument	7		1683620	0					
ANR	1683863	PrimaryExpression	7		1683620	0					
ANR	1683864	ExpressionStatement	* inst ++ = REX_W	292:2:9186:9201	1683620	3	True				
ANR	1683865	AssignmentExpression	* inst ++ = REX_W		1683620	0		=			
ANR	1683866	UnaryOperationExpression	* inst ++		1683620	0					
ANR	1683867	UnaryOperator	*		1683620	0					
ANR	1683868	PostIncDecOperationExpression	inst ++		1683620	1					
ANR	1683869	Identifier	inst		1683620	0					
ANR	1683870	IncDec	++		1683620	1					
ANR	1683871	Identifier	REX_W		1683620	1					
ANR	1683872	ExpressionStatement	* inst ++ = GROUP_BINARY_81	293:2:9205:9230	1683620	4	True				
ANR	1683873	AssignmentExpression	* inst ++ = GROUP_BINARY_81		1683620	0		=			
ANR	1683874	UnaryOperationExpression	* inst ++		1683620	0					
ANR	1683875	UnaryOperator	*		1683620	0					
ANR	1683876	PostIncDecOperationExpression	inst ++		1683620	1					
ANR	1683877	Identifier	inst		1683620	0					
ANR	1683878	IncDec	++		1683620	1					
ANR	1683879	Identifier	GROUP_BINARY_81		1683620	1					
ANR	1683880	ExpressionStatement	* inst ++ = MOD_REG | ADD | 4	294:2:9234:9261	1683620	5	True				
ANR	1683881	AssignmentExpression	* inst ++ = MOD_REG | ADD | 4		1683620	0		=			
ANR	1683882	UnaryOperationExpression	* inst ++		1683620	0					
ANR	1683883	UnaryOperator	*		1683620	0					
ANR	1683884	PostIncDecOperationExpression	inst ++		1683620	1					
ANR	1683885	Identifier	inst		1683620	0					
ANR	1683886	IncDec	++		1683620	1					
ANR	1683887	InclusiveOrExpression	MOD_REG | ADD | 4		1683620	1		|			
ANR	1683888	Identifier	MOD_REG		1683620	0					
ANR	1683889	InclusiveOrExpression	ADD | 4		1683620	1		|			
ANR	1683890	Identifier	ADD		1683620	0					
ANR	1683891	PrimaryExpression	4		1683620	1					
ANR	1683892	ExpressionStatement	* ( sljit_si * ) inst = compiler -> local_size	295:2:9265:9304	1683620	6	True				
ANR	1683893	AssignmentExpression	* ( sljit_si * ) inst = compiler -> local_size		1683620	0		=			
ANR	1683894	UnaryOperationExpression	* ( sljit_si * ) inst		1683620	0					
ANR	1683895	UnaryOperator	*		1683620	0					
ANR	1683896	CastExpression	( sljit_si * ) inst		1683620	1					
ANR	1683897	CastTarget	sljit_si *		1683620	0					
ANR	1683898	Identifier	inst		1683620	1					
ANR	1683899	PtrMemberAccess	compiler -> local_size		1683620	1					
ANR	1683900	Identifier	compiler		1683620	0					
ANR	1683901	Identifier	local_size		1683620	1					
ANR	1683902	ExpressionStatement	tmp = compiler -> scratches	298:1:9311:9336	1683620	9	True				
ANR	1683903	AssignmentExpression	tmp = compiler -> scratches		1683620	0		=			
ANR	1683904	Identifier	tmp		1683620	0					
ANR	1683905	PtrMemberAccess	compiler -> scratches		1683620	1					
ANR	1683906	Identifier	compiler		1683620	0					
ANR	1683907	Identifier	scratches		1683620	1					
ANR	1683908	ForStatement	for ( i = SLJIT_FIRST_SAVED_REG ; i <= tmp ; i ++ )		1683620	10					
ANR	1683909	ForInit	i = SLJIT_FIRST_SAVED_REG ;	299:6:9344:9369	1683620	0	True				
ANR	1683910	AssignmentExpression	i = SLJIT_FIRST_SAVED_REG		1683620	0		=			
ANR	1683911	Identifier	i		1683620	0					
ANR	1683912	Identifier	SLJIT_FIRST_SAVED_REG		1683620	1					
ANR	1683913	Condition	i <= tmp	299:33:9371:9378	1683620	1	True				
ANR	1683914	RelationalExpression	i <= tmp		1683620	0		<=			
ANR	1683915	Identifier	i		1683620	0					
ANR	1683916	Identifier	tmp		1683620	1					
ANR	1683917	PostIncDecOperationExpression	i ++	299:43:9381:9383	1683620	2	True				
ANR	1683918	Identifier	i		1683620	0					
ANR	1683919	IncDec	++		1683620	1					
ANR	1683920	CompoundStatement		43:48:1049:1049	1683620	3					
ANR	1683921	ExpressionStatement	size = reg_map [ i ] >= 8 ? 2 : 1	300:2:9390:9420	1683620	0	True				
ANR	1683922	AssignmentExpression	size = reg_map [ i ] >= 8 ? 2 : 1		1683620	0		=			
ANR	1683923	Identifier	size		1683620	0					
ANR	1683924	ConditionalExpression	reg_map [ i ] >= 8 ? 2 : 1		1683620	1					
ANR	1683925	Condition	reg_map [ i ] >= 8		1683620	0					
ANR	1683926	RelationalExpression	reg_map [ i ] >= 8		1683620	0		>=			
ANR	1683927	ArrayIndexing	reg_map [ i ]		1683620	0					
ANR	1683928	Identifier	reg_map		1683620	0					
ANR	1683929	Identifier	i		1683620	1					
ANR	1683930	PrimaryExpression	8		1683620	1					
ANR	1683931	PrimaryExpression	2		1683620	1					
ANR	1683932	PrimaryExpression	1		1683620	2					
ANR	1683933	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"	301:2:9424:9472	1683620	1	True				
ANR	1683934	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1683620	0		=			
ANR	1683935	Identifier	inst		1683620	0					
ANR	1683936	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1683620	1					
ANR	1683937	CastTarget	sljit_ub *		1683620	0					
ANR	1683938	CallExpression	"ensure_buf ( compiler , 1 + size )"		1683620	1					
ANR	1683939	Callee	ensure_buf		1683620	0					
ANR	1683940	Identifier	ensure_buf		1683620	0					
ANR	1683941	ArgumentList	compiler		1683620	1					
ANR	1683942	Argument	compiler		1683620	0					
ANR	1683943	Identifier	compiler		1683620	0					
ANR	1683944	Argument	1 + size		1683620	1					
ANR	1683945	AdditiveExpression	1 + size		1683620	0		+			
ANR	1683946	PrimaryExpression	1		1683620	0					
ANR	1683947	Identifier	size		1683620	1					
ANR	1683948	ExpressionStatement	FAIL_IF ( ! inst )	302:2:9476:9490	1683620	2	True				
ANR	1683949	CallExpression	FAIL_IF ( ! inst )		1683620	0					
ANR	1683950	Callee	FAIL_IF		1683620	0					
ANR	1683951	Identifier	FAIL_IF		1683620	0					
ANR	1683952	ArgumentList	! inst		1683620	1					
ANR	1683953	Argument	! inst		1683620	0					
ANR	1683954	UnaryOperationExpression	! inst		1683620	0					
ANR	1683955	UnaryOperator	!		1683620	0					
ANR	1683956	Identifier	inst		1683620	1					
ANR	1683957	ExpressionStatement	INC_SIZE ( size )	303:2:9494:9508	1683620	3	True				
ANR	1683958	CallExpression	INC_SIZE ( size )		1683620	0					
ANR	1683959	Callee	INC_SIZE		1683620	0					
ANR	1683960	Identifier	INC_SIZE		1683620	0					
ANR	1683961	ArgumentList	size		1683620	1					
ANR	1683962	Argument	size		1683620	0					
ANR	1683963	Identifier	size		1683620	0					
ANR	1683964	IfStatement	if ( reg_map [ i ] >= 8 )		1683620	4					
ANR	1683965	Condition	reg_map [ i ] >= 8	304:6:9516:9530	1683620	0	True				
ANR	1683966	RelationalExpression	reg_map [ i ] >= 8		1683620	0		>=			
ANR	1683967	ArrayIndexing	reg_map [ i ]		1683620	0					
ANR	1683968	Identifier	reg_map		1683620	0					
ANR	1683969	Identifier	i		1683620	1					
ANR	1683970	PrimaryExpression	8		1683620	1					
ANR	1683971	ExpressionStatement	* inst ++ = REX_B	305:3:9536:9551	1683620	1	True				
ANR	1683972	AssignmentExpression	* inst ++ = REX_B		1683620	0		=			
ANR	1683973	UnaryOperationExpression	* inst ++		1683620	0					
ANR	1683974	UnaryOperator	*		1683620	0					
ANR	1683975	PostIncDecOperationExpression	inst ++		1683620	1					
ANR	1683976	Identifier	inst		1683620	0					
ANR	1683977	IncDec	++		1683620	1					
ANR	1683978	Identifier	REX_B		1683620	1					
ANR	1683979	ExpressionStatement	POP_REG ( reg_lmap [ i ] )	306:2:9555:9575	1683620	5	True				
ANR	1683980	CallExpression	POP_REG ( reg_lmap [ i ] )		1683620	0					
ANR	1683981	Callee	POP_REG		1683620	0					
ANR	1683982	Identifier	POP_REG		1683620	0					
ANR	1683983	ArgumentList	reg_lmap [ i ]		1683620	1					
ANR	1683984	Argument	reg_lmap [ i ]		1683620	0					
ANR	1683985	ArrayIndexing	reg_lmap [ i ]		1683620	0					
ANR	1683986	Identifier	reg_lmap		1683620	0					
ANR	1683987	Identifier	i		1683620	1					
ANR	1683988	ExpressionStatement	tmp = compiler -> saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS ? ( SLJIT_S0 + 1 - compiler -> saveds ) : SLJIT_FIRST_SAVED_REG	309:1:9582:9698	1683620	11	True				
ANR	1683989	AssignmentExpression	tmp = compiler -> saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS ? ( SLJIT_S0 + 1 - compiler -> saveds ) : SLJIT_FIRST_SAVED_REG		1683620	0		=			
ANR	1683990	Identifier	tmp		1683620	0					
ANR	1683991	ConditionalExpression	compiler -> saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS ? ( SLJIT_S0 + 1 - compiler -> saveds ) : SLJIT_FIRST_SAVED_REG		1683620	1					
ANR	1683992	Condition	compiler -> saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS		1683620	0					
ANR	1683993	RelationalExpression	compiler -> saveds < SLJIT_NUMBER_OF_SAVED_REGISTERS		1683620	0		<			
ANR	1683994	PtrMemberAccess	compiler -> saveds		1683620	0					
ANR	1683995	Identifier	compiler		1683620	0					
ANR	1683996	Identifier	saveds		1683620	1					
ANR	1683997	Identifier	SLJIT_NUMBER_OF_SAVED_REGISTERS		1683620	1					
ANR	1683998	AdditiveExpression	SLJIT_S0 + 1 - compiler -> saveds		1683620	1		+			
ANR	1683999	Identifier	SLJIT_S0		1683620	0					
ANR	1684000	AdditiveExpression	1 - compiler -> saveds		1683620	1		-			
ANR	1684001	PrimaryExpression	1		1683620	0					
ANR	1684002	PtrMemberAccess	compiler -> saveds		1683620	1					
ANR	1684003	Identifier	compiler		1683620	0					
ANR	1684004	Identifier	saveds		1683620	1					
ANR	1684005	Identifier	SLJIT_FIRST_SAVED_REG		1683620	2					
ANR	1684006	ForStatement	for ( i = tmp ; i <= SLJIT_S0 ; i ++ )		1683620	12					
ANR	1684007	ForInit	i = tmp ;	310:6:9706:9713	1683620	0	True				
ANR	1684008	AssignmentExpression	i = tmp		1683620	0		=			
ANR	1684009	Identifier	i		1683620	0					
ANR	1684010	Identifier	tmp		1683620	1					
ANR	1684011	Condition	i <= SLJIT_S0	310:15:9715:9727	1683620	1	True				
ANR	1684012	RelationalExpression	i <= SLJIT_S0		1683620	0		<=			
ANR	1684013	Identifier	i		1683620	0					
ANR	1684014	Identifier	SLJIT_S0		1683620	1					
ANR	1684015	PostIncDecOperationExpression	i ++	310:30:9730:9732	1683620	2	True				
ANR	1684016	Identifier	i		1683620	0					
ANR	1684017	IncDec	++		1683620	1					
ANR	1684018	CompoundStatement		54:35:1398:1398	1683620	3					
ANR	1684019	ExpressionStatement	size = reg_map [ i ] >= 8 ? 2 : 1	311:2:9739:9769	1683620	0	True				
ANR	1684020	AssignmentExpression	size = reg_map [ i ] >= 8 ? 2 : 1		1683620	0		=			
ANR	1684021	Identifier	size		1683620	0					
ANR	1684022	ConditionalExpression	reg_map [ i ] >= 8 ? 2 : 1		1683620	1					
ANR	1684023	Condition	reg_map [ i ] >= 8		1683620	0					
ANR	1684024	RelationalExpression	reg_map [ i ] >= 8		1683620	0		>=			
ANR	1684025	ArrayIndexing	reg_map [ i ]		1683620	0					
ANR	1684026	Identifier	reg_map		1683620	0					
ANR	1684027	Identifier	i		1683620	1					
ANR	1684028	PrimaryExpression	8		1683620	1					
ANR	1684029	PrimaryExpression	2		1683620	1					
ANR	1684030	PrimaryExpression	1		1683620	2					
ANR	1684031	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"	312:2:9773:9821	1683620	1	True				
ANR	1684032	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1683620	0		=			
ANR	1684033	Identifier	inst		1683620	0					
ANR	1684034	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + size )"		1683620	1					
ANR	1684035	CastTarget	sljit_ub *		1683620	0					
ANR	1684036	CallExpression	"ensure_buf ( compiler , 1 + size )"		1683620	1					
ANR	1684037	Callee	ensure_buf		1683620	0					
ANR	1684038	Identifier	ensure_buf		1683620	0					
ANR	1684039	ArgumentList	compiler		1683620	1					
ANR	1684040	Argument	compiler		1683620	0					
ANR	1684041	Identifier	compiler		1683620	0					
ANR	1684042	Argument	1 + size		1683620	1					
ANR	1684043	AdditiveExpression	1 + size		1683620	0		+			
ANR	1684044	PrimaryExpression	1		1683620	0					
ANR	1684045	Identifier	size		1683620	1					
ANR	1684046	ExpressionStatement	FAIL_IF ( ! inst )	313:2:9825:9839	1683620	2	True				
ANR	1684047	CallExpression	FAIL_IF ( ! inst )		1683620	0					
ANR	1684048	Callee	FAIL_IF		1683620	0					
ANR	1684049	Identifier	FAIL_IF		1683620	0					
ANR	1684050	ArgumentList	! inst		1683620	1					
ANR	1684051	Argument	! inst		1683620	0					
ANR	1684052	UnaryOperationExpression	! inst		1683620	0					
ANR	1684053	UnaryOperator	!		1683620	0					
ANR	1684054	Identifier	inst		1683620	1					
ANR	1684055	ExpressionStatement	INC_SIZE ( size )	314:2:9843:9857	1683620	3	True				
ANR	1684056	CallExpression	INC_SIZE ( size )		1683620	0					
ANR	1684057	Callee	INC_SIZE		1683620	0					
ANR	1684058	Identifier	INC_SIZE		1683620	0					
ANR	1684059	ArgumentList	size		1683620	1					
ANR	1684060	Argument	size		1683620	0					
ANR	1684061	Identifier	size		1683620	0					
ANR	1684062	IfStatement	if ( reg_map [ i ] >= 8 )		1683620	4					
ANR	1684063	Condition	reg_map [ i ] >= 8	315:6:9865:9879	1683620	0	True				
ANR	1684064	RelationalExpression	reg_map [ i ] >= 8		1683620	0		>=			
ANR	1684065	ArrayIndexing	reg_map [ i ]		1683620	0					
ANR	1684066	Identifier	reg_map		1683620	0					
ANR	1684067	Identifier	i		1683620	1					
ANR	1684068	PrimaryExpression	8		1683620	1					
ANR	1684069	ExpressionStatement	* inst ++ = REX_B	316:3:9885:9900	1683620	1	True				
ANR	1684070	AssignmentExpression	* inst ++ = REX_B		1683620	0		=			
ANR	1684071	UnaryOperationExpression	* inst ++		1683620	0					
ANR	1684072	UnaryOperator	*		1683620	0					
ANR	1684073	PostIncDecOperationExpression	inst ++		1683620	1					
ANR	1684074	Identifier	inst		1683620	0					
ANR	1684075	IncDec	++		1683620	1					
ANR	1684076	Identifier	REX_B		1683620	1					
ANR	1684077	ExpressionStatement	POP_REG ( reg_lmap [ i ] )	317:2:9904:9924	1683620	5	True				
ANR	1684078	CallExpression	POP_REG ( reg_lmap [ i ] )		1683620	0					
ANR	1684079	Callee	POP_REG		1683620	0					
ANR	1684080	Identifier	POP_REG		1683620	0					
ANR	1684081	ArgumentList	reg_lmap [ i ]		1683620	1					
ANR	1684082	Argument	reg_lmap [ i ]		1683620	0					
ANR	1684083	ArrayIndexing	reg_lmap [ i ]		1683620	0					
ANR	1684084	Identifier	reg_lmap		1683620	0					
ANR	1684085	Identifier	i		1683620	1					
ANR	1684086	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"	320:1:9931:9976	1683620	13	True				
ANR	1684087	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"		1683620	0		=			
ANR	1684088	Identifier	inst		1683620	0					
ANR	1684089	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"		1683620	1					
ANR	1684090	CastTarget	sljit_ub *		1683620	0					
ANR	1684091	CallExpression	"ensure_buf ( compiler , 1 + 1 )"		1683620	1					
ANR	1684092	Callee	ensure_buf		1683620	0					
ANR	1684093	Identifier	ensure_buf		1683620	0					
ANR	1684094	ArgumentList	compiler		1683620	1					
ANR	1684095	Argument	compiler		1683620	0					
ANR	1684096	Identifier	compiler		1683620	0					
ANR	1684097	Argument	1 + 1		1683620	1					
ANR	1684098	AdditiveExpression	1 + 1		1683620	0		+			
ANR	1684099	PrimaryExpression	1		1683620	0					
ANR	1684100	PrimaryExpression	1		1683620	1					
ANR	1684101	ExpressionStatement	FAIL_IF ( ! inst )	321:1:9979:9993	1683620	14	True				
ANR	1684102	CallExpression	FAIL_IF ( ! inst )		1683620	0					
ANR	1684103	Callee	FAIL_IF		1683620	0					
ANR	1684104	Identifier	FAIL_IF		1683620	0					
ANR	1684105	ArgumentList	! inst		1683620	1					
ANR	1684106	Argument	! inst		1683620	0					
ANR	1684107	UnaryOperationExpression	! inst		1683620	0					
ANR	1684108	UnaryOperator	!		1683620	0					
ANR	1684109	Identifier	inst		1683620	1					
ANR	1684110	ExpressionStatement	INC_SIZE ( 1 )	322:1:9996:10007	1683620	15	True				
ANR	1684111	CallExpression	INC_SIZE ( 1 )		1683620	0					
ANR	1684112	Callee	INC_SIZE		1683620	0					
ANR	1684113	Identifier	INC_SIZE		1683620	0					
ANR	1684114	ArgumentList	1		1683620	1					
ANR	1684115	Argument	1		1683620	0					
ANR	1684116	PrimaryExpression	1		1683620	0					
ANR	1684117	ExpressionStatement	RET ( )	323:1:10010:10015	1683620	16	True				
ANR	1684118	CallExpression	RET ( )		1683620	0					
ANR	1684119	Callee	RET		1683620	0					
ANR	1684120	Identifier	RET		1683620	0					
ANR	1684121	ArgumentList			1683620	1					
ANR	1684122	ReturnStatement	return SLJIT_SUCCESS ;	324:1:10018:10038	1683620	17	True				
ANR	1684123	Identifier	SLJIT_SUCCESS		1683620	0					
ANR	1684124	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1683620	1					
ANR	1684125	Identifier	sljit_emit_return		1683620	2					
ANR	1684126	ParameterList	"struct sljit_compiler * compiler , sljit_si op , sljit_si src , sljit_sw srcw"		1683620	3					
ANR	1684127	Parameter	struct sljit_compiler * compiler	256:52:8261:8291	1683620	0	True				
ANR	1684128	ParameterType	struct sljit_compiler *		1683620	0					
ANR	1684129	Identifier	compiler		1683620	1					
ANR	1684130	Parameter	sljit_si op	256:85:8294:8304	1683620	1	True				
ANR	1684131	ParameterType	sljit_si		1683620	0					
ANR	1684132	Identifier	op		1683620	1					
ANR	1684133	Parameter	sljit_si src	256:98:8307:8318	1683620	2	True				
ANR	1684134	ParameterType	sljit_si		1683620	0					
ANR	1684135	Identifier	src		1683620	1					
ANR	1684136	Parameter	sljit_sw srcw	256:112:8321:8333	1683620	3	True				
ANR	1684137	ParameterType	sljit_sw		1683620	0					
ANR	1684138	Identifier	srcw		1683620	1					
ANR	1684139	CFGEntryNode	ENTRY		1683620		True				
ANR	1684140	CFGExitNode	EXIT		1683620		True				
ANR	1684141	Symbol	compiler -> fsaveds		1683620						
ANR	1684142	Symbol	ADD		1683620						
ANR	1684143	Symbol	compiler -> scratches		1683620						
ANR	1684144	Symbol	compiler -> flags_saved		1683620						
ANR	1684145	Symbol	* inst ++		1683620						
ANR	1684146	Symbol	reg_map		1683620						
ANR	1684147	Symbol	* compiler		1683620						
ANR	1684148	Symbol	SLJIT_NUMBER_OF_SAVED_REGISTERS		1683620						
ANR	1684149	Symbol	check_sljit_emit_return		1683620						
ANR	1684150	Symbol	tmp		1683620						
ANR	1684151	Symbol	* reg_lmap		1683620						
ANR	1684152	Symbol	compiler		1683620						
ANR	1684153	Symbol	compiler -> fscratches		1683620						
ANR	1684154	Symbol	op		1683620						
ANR	1684155	Symbol	GROUP_0F		1683620						
ANR	1684156	Symbol	* inst		1683620						
ANR	1684157	Symbol	src		1683620						
ANR	1684158	Symbol	srcw		1683620						
ANR	1684159	Symbol	i		1683620						
ANR	1684160	Symbol	SLJIT_SUCCESS		1683620						
ANR	1684161	Symbol	* reg_map		1683620						
ANR	1684162	Symbol	REX_B		1683620						
ANR	1684163	Symbol	MOD_REG		1683620						
ANR	1684164	Symbol	SLJIT_S0		1683620						
ANR	1684165	Symbol	reg_lmap		1683620						
ANR	1684166	Symbol	compiler -> local_size		1683620						
ANR	1684167	Symbol	* i		1683620						
ANR	1684168	Symbol	compiler -> saveds		1683620						
ANR	1684169	Symbol	size		1683620						
ANR	1684170	Symbol	GROUP_BINARY_81		1683620						
ANR	1684171	Symbol	inst		1683620						
ANR	1684172	Symbol	ensure_buf		1683620						
ANR	1684173	Symbol	GROUP_BINARY_83		1683620						
ANR	1684174	Symbol	SLJIT_FIRST_SAVED_REG		1683620						
ANR	1684175	Symbol	REX_W		1683620						
ANR	1684176	Symbol	emit_mov_before_return		1683620						
ANR	1684177	Symbol	* ( sljit_si * ) inst		1683620						
ANR	1684178	Function	emit_do_imm32	331:0:10272:10640							
ANR	1684179	FunctionDef	"emit_do_imm32 (struct sljit_compiler * compiler , sljit_ub rex , sljit_ub opcode , sljit_sw imm)"		1684178	0					
ANR	1684180	CompoundStatement		332:0:10380:10640	1684178	0					
ANR	1684181	IdentifierDeclStatement	sljit_ub * inst ;	333:1:10383:10397	1684178	0	True				
ANR	1684182	IdentifierDecl	* inst		1684178	0					
ANR	1684183	IdentifierDeclType	sljit_ub *		1684178	0					
ANR	1684184	Identifier	inst		1684178	1					
ANR	1684185	IdentifierDeclStatement	sljit_si length = 1 + ( rex ? 1 : 0 ) + sizeof ( sljit_si ) ;	334:1:10400:10454	1684178	1	True				
ANR	1684186	IdentifierDecl	length = 1 + ( rex ? 1 : 0 ) + sizeof ( sljit_si )		1684178	0					
ANR	1684187	IdentifierDeclType	sljit_si		1684178	0					
ANR	1684188	Identifier	length		1684178	1					
ANR	1684189	AssignmentExpression	length = 1 + ( rex ? 1 : 0 ) + sizeof ( sljit_si )		1684178	2		=			
ANR	1684190	Identifier	length		1684178	0					
ANR	1684191	AdditiveExpression	1 + ( rex ? 1 : 0 ) + sizeof ( sljit_si )		1684178	1		+			
ANR	1684192	PrimaryExpression	1		1684178	0					
ANR	1684193	AdditiveExpression	( rex ? 1 : 0 ) + sizeof ( sljit_si )		1684178	1		+			
ANR	1684194	ConditionalExpression	rex ? 1 : 0		1684178	0					
ANR	1684195	Condition	rex		1684178	0					
ANR	1684196	Identifier	rex		1684178	0					
ANR	1684197	PrimaryExpression	1		1684178	1					
ANR	1684198	PrimaryExpression	0		1684178	2					
ANR	1684199	SizeofExpression	sizeof ( sljit_si )		1684178	1					
ANR	1684200	Sizeof	sizeof		1684178	0					
ANR	1684201	SizeofOperand	sljit_si		1684178	1					
ANR	1684202	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + length )"	336:1:10458:10508	1684178	2	True				
ANR	1684203	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + length )"		1684178	0		=			
ANR	1684204	Identifier	inst		1684178	0					
ANR	1684205	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + length )"		1684178	1					
ANR	1684206	CastTarget	sljit_ub *		1684178	0					
ANR	1684207	CallExpression	"ensure_buf ( compiler , 1 + length )"		1684178	1					
ANR	1684208	Callee	ensure_buf		1684178	0					
ANR	1684209	Identifier	ensure_buf		1684178	0					
ANR	1684210	ArgumentList	compiler		1684178	1					
ANR	1684211	Argument	compiler		1684178	0					
ANR	1684212	Identifier	compiler		1684178	0					
ANR	1684213	Argument	1 + length		1684178	1					
ANR	1684214	AdditiveExpression	1 + length		1684178	0		+			
ANR	1684215	PrimaryExpression	1		1684178	0					
ANR	1684216	Identifier	length		1684178	1					
ANR	1684217	ExpressionStatement	FAIL_IF ( ! inst )	337:1:10511:10525	1684178	3	True				
ANR	1684218	CallExpression	FAIL_IF ( ! inst )		1684178	0					
ANR	1684219	Callee	FAIL_IF		1684178	0					
ANR	1684220	Identifier	FAIL_IF		1684178	0					
ANR	1684221	ArgumentList	! inst		1684178	1					
ANR	1684222	Argument	! inst		1684178	0					
ANR	1684223	UnaryOperationExpression	! inst		1684178	0					
ANR	1684224	UnaryOperator	!		1684178	0					
ANR	1684225	Identifier	inst		1684178	1					
ANR	1684226	ExpressionStatement	INC_SIZE ( length )	338:1:10528:10544	1684178	4	True				
ANR	1684227	CallExpression	INC_SIZE ( length )		1684178	0					
ANR	1684228	Callee	INC_SIZE		1684178	0					
ANR	1684229	Identifier	INC_SIZE		1684178	0					
ANR	1684230	ArgumentList	length		1684178	1					
ANR	1684231	Argument	length		1684178	0					
ANR	1684232	Identifier	length		1684178	0					
ANR	1684233	IfStatement	if ( rex )		1684178	5					
ANR	1684234	Condition	rex	339:5:10551:10553	1684178	0	True				
ANR	1684235	Identifier	rex		1684178	0					
ANR	1684236	ExpressionStatement	* inst ++ = rex	340:2:10558:10571	1684178	1	True				
ANR	1684237	AssignmentExpression	* inst ++ = rex		1684178	0		=			
ANR	1684238	UnaryOperationExpression	* inst ++		1684178	0					
ANR	1684239	UnaryOperator	*		1684178	0					
ANR	1684240	PostIncDecOperationExpression	inst ++		1684178	1					
ANR	1684241	Identifier	inst		1684178	0					
ANR	1684242	IncDec	++		1684178	1					
ANR	1684243	Identifier	rex		1684178	1					
ANR	1684244	ExpressionStatement	* inst ++ = opcode	341:1:10574:10590	1684178	6	True				
ANR	1684245	AssignmentExpression	* inst ++ = opcode		1684178	0		=			
ANR	1684246	UnaryOperationExpression	* inst ++		1684178	0					
ANR	1684247	UnaryOperator	*		1684178	0					
ANR	1684248	PostIncDecOperationExpression	inst ++		1684178	1					
ANR	1684249	Identifier	inst		1684178	0					
ANR	1684250	IncDec	++		1684178	1					
ANR	1684251	Identifier	opcode		1684178	1					
ANR	1684252	ExpressionStatement	* ( sljit_si * ) inst = imm	342:1:10593:10615	1684178	7	True				
ANR	1684253	AssignmentExpression	* ( sljit_si * ) inst = imm		1684178	0		=			
ANR	1684254	UnaryOperationExpression	* ( sljit_si * ) inst		1684178	0					
ANR	1684255	UnaryOperator	*		1684178	0					
ANR	1684256	CastExpression	( sljit_si * ) inst		1684178	1					
ANR	1684257	CastTarget	sljit_si *		1684178	0					
ANR	1684258	Identifier	inst		1684178	1					
ANR	1684259	Identifier	imm		1684178	1					
ANR	1684260	ReturnStatement	return SLJIT_SUCCESS ;	343:1:10618:10638	1684178	8	True				
ANR	1684261	Identifier	SLJIT_SUCCESS		1684178	0					
ANR	1684262	ReturnType	static sljit_si		1684178	1					
ANR	1684263	Identifier	emit_do_imm32		1684178	2					
ANR	1684264	ParameterList	"struct sljit_compiler * compiler , sljit_ub rex , sljit_ub opcode , sljit_sw imm"		1684178	3					
ANR	1684265	Parameter	struct sljit_compiler * compiler	331:30:10302:10332	1684178	0	True				
ANR	1684266	ParameterType	struct sljit_compiler *		1684178	0					
ANR	1684267	Identifier	compiler		1684178	1					
ANR	1684268	Parameter	sljit_ub rex	331:63:10335:10346	1684178	1	True				
ANR	1684269	ParameterType	sljit_ub		1684178	0					
ANR	1684270	Identifier	rex		1684178	1					
ANR	1684271	Parameter	sljit_ub opcode	331:77:10349:10363	1684178	2	True				
ANR	1684272	ParameterType	sljit_ub		1684178	0					
ANR	1684273	Identifier	opcode		1684178	1					
ANR	1684274	Parameter	sljit_sw imm	331:94:10366:10377	1684178	3	True				
ANR	1684275	ParameterType	sljit_sw		1684178	0					
ANR	1684276	Identifier	imm		1684178	1					
ANR	1684277	CFGEntryNode	ENTRY		1684178		True				
ANR	1684278	CFGExitNode	EXIT		1684178		True				
ANR	1684279	Symbol	* inst		1684178						
ANR	1684280	Symbol	rex		1684178						
ANR	1684281	Symbol	inst		1684178						
ANR	1684282	Symbol	ensure_buf		1684178						
ANR	1684283	Symbol	imm		1684178						
ANR	1684284	Symbol	length		1684178						
ANR	1684285	Symbol	* inst ++		1684178						
ANR	1684286	Symbol	SLJIT_SUCCESS		1684178						
ANR	1684287	Symbol	compiler		1684178						
ANR	1684288	Symbol	opcode		1684178						
ANR	1684289	Symbol	* ( sljit_si * ) inst		1684178						
ANR	1684290	Function	emit_x86_instruction	346:0:10643:16269							
ANR	1684291	FunctionDef	"emit_x86_instruction (struct sljit_compiler * compiler , sljit_si size , sljit_si a , sljit_sw imma , sljit_si b , sljit_sw immb)"		1684290	0					
ANR	1684292	CompoundStatement		351:0:10871:16269	1684290	0					
ANR	1684293	IdentifierDeclStatement	sljit_ub * inst ;	352:1:10874:10888	1684290	0	True				
ANR	1684294	IdentifierDecl	* inst		1684290	0					
ANR	1684295	IdentifierDeclType	sljit_ub *		1684290	0					
ANR	1684296	Identifier	inst		1684290	1					
ANR	1684297	IdentifierDeclStatement	sljit_ub * buf_ptr ;	353:1:10891:10908	1684290	1	True				
ANR	1684298	IdentifierDecl	* buf_ptr		1684290	0					
ANR	1684299	IdentifierDeclType	sljit_ub *		1684290	0					
ANR	1684300	Identifier	buf_ptr		1684290	1					
ANR	1684301	IdentifierDeclStatement	sljit_ub rex = 0 ;	354:1:10911:10927	1684290	2	True				
ANR	1684302	IdentifierDecl	rex = 0		1684290	0					
ANR	1684303	IdentifierDeclType	sljit_ub		1684290	0					
ANR	1684304	Identifier	rex		1684290	1					
ANR	1684305	AssignmentExpression	rex = 0		1684290	2		=			
ANR	1684306	Identifier	rex		1684290	0					
ANR	1684307	PrimaryExpression	0		1684290	1					
ANR	1684308	IdentifierDeclStatement	sljit_si flags = size & ~0xf ;	355:1:10930:10958	1684290	3	True				
ANR	1684309	IdentifierDecl	flags = size & ~0xf		1684290	0					
ANR	1684310	IdentifierDeclType	sljit_si		1684290	0					
ANR	1684311	Identifier	flags		1684290	1					
ANR	1684312	AssignmentExpression	flags = size & ~0xf		1684290	2		=			
ANR	1684313	Identifier	flags		1684290	0					
ANR	1684314	BitAndExpression	size & ~0xf		1684290	1		&			
ANR	1684315	Identifier	size		1684290	0					
ANR	1684316	Identifier	~0xf		1684290	1					
ANR	1684317	IdentifierDeclStatement	sljit_si inst_size ;	356:1:10961:10979	1684290	4	True				
ANR	1684318	IdentifierDecl	inst_size		1684290	0					
ANR	1684319	IdentifierDeclType	sljit_si		1684290	0					
ANR	1684320	Identifier	inst_size		1684290	1					
ANR	1684321	ExpressionStatement	SLJIT_ASSERT ( ! ( a & SLJIT_IMM ) || compiler -> mode32 || IS_HALFWORD ( imma ) )	359:1:11028:11099	1684290	5	True				
ANR	1684322	CallExpression	SLJIT_ASSERT ( ! ( a & SLJIT_IMM ) || compiler -> mode32 || IS_HALFWORD ( imma ) )		1684290	0					
ANR	1684323	Callee	SLJIT_ASSERT		1684290	0					
ANR	1684324	Identifier	SLJIT_ASSERT		1684290	0					
ANR	1684325	ArgumentList	! ( a & SLJIT_IMM ) || compiler -> mode32 || IS_HALFWORD ( imma )		1684290	1					
ANR	1684326	Argument	! ( a & SLJIT_IMM ) || compiler -> mode32 || IS_HALFWORD ( imma )		1684290	0					
ANR	1684327	OrExpression	! ( a & SLJIT_IMM ) || compiler -> mode32 || IS_HALFWORD ( imma )		1684290	0		||			
ANR	1684328	UnaryOperationExpression	! ( a & SLJIT_IMM )		1684290	0					
ANR	1684329	UnaryOperator	!		1684290	0					
ANR	1684330	BitAndExpression	a & SLJIT_IMM		1684290	1		&			
ANR	1684331	Identifier	a		1684290	0					
ANR	1684332	Identifier	SLJIT_IMM		1684290	1					
ANR	1684333	OrExpression	compiler -> mode32 || IS_HALFWORD ( imma )		1684290	1		||			
ANR	1684334	PtrMemberAccess	compiler -> mode32		1684290	0					
ANR	1684335	Identifier	compiler		1684290	0					
ANR	1684336	Identifier	mode32		1684290	1					
ANR	1684337	CallExpression	IS_HALFWORD ( imma )		1684290	1					
ANR	1684338	Callee	IS_HALFWORD		1684290	0					
ANR	1684339	Identifier	IS_HALFWORD		1684290	0					
ANR	1684340	ArgumentList	imma		1684290	1					
ANR	1684341	Argument	imma		1684290	0					
ANR	1684342	Identifier	imma		1684290	0					
ANR	1684343	ExpressionStatement	SLJIT_ASSERT ( ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) != ( EX86_BIN_INS | EX86_SHIFT_INS ) )	361:1:11137:11227	1684290	6	True				
ANR	1684344	CallExpression	SLJIT_ASSERT ( ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) != ( EX86_BIN_INS | EX86_SHIFT_INS ) )		1684290	0					
ANR	1684345	Callee	SLJIT_ASSERT		1684290	0					
ANR	1684346	Identifier	SLJIT_ASSERT		1684290	0					
ANR	1684347	ArgumentList	( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) != ( EX86_BIN_INS | EX86_SHIFT_INS )		1684290	1					
ANR	1684348	Argument	( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) != ( EX86_BIN_INS | EX86_SHIFT_INS )		1684290	0					
ANR	1684349	EqualityExpression	( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) != ( EX86_BIN_INS | EX86_SHIFT_INS )		1684290	0		!=			
ANR	1684350	BitAndExpression	flags & ( EX86_BIN_INS | EX86_SHIFT_INS )		1684290	0		&			
ANR	1684351	Identifier	flags		1684290	0					
ANR	1684352	InclusiveOrExpression	EX86_BIN_INS | EX86_SHIFT_INS		1684290	1		|			
ANR	1684353	Identifier	EX86_BIN_INS		1684290	0					
ANR	1684354	Identifier	EX86_SHIFT_INS		1684290	1					
ANR	1684355	InclusiveOrExpression	EX86_BIN_INS | EX86_SHIFT_INS		1684290	1		|			
ANR	1684356	Identifier	EX86_BIN_INS		1684290	0					
ANR	1684357	Identifier	EX86_SHIFT_INS		1684290	1					
ANR	1684358	ExpressionStatement	SLJIT_ASSERT ( ! ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) || ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) == 0 )	363:1:11284:11390	1684290	7	True				
ANR	1684359	CallExpression	SLJIT_ASSERT ( ! ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) || ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) == 0 )		1684290	0					
ANR	1684360	Callee	SLJIT_ASSERT		1684290	0					
ANR	1684361	Identifier	SLJIT_ASSERT		1684290	0					
ANR	1684362	ArgumentList	! ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) || ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) == 0		1684290	1					
ANR	1684363	Argument	! ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) || ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) == 0		1684290	0					
ANR	1684364	OrExpression	! ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) ) || ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) == 0		1684290	0		||			
ANR	1684365	UnaryOperationExpression	! ( flags & ( EX86_BIN_INS | EX86_SHIFT_INS ) )		1684290	0					
ANR	1684366	UnaryOperator	!		1684290	0					
ANR	1684367	BitAndExpression	flags & ( EX86_BIN_INS | EX86_SHIFT_INS )		1684290	1		&			
ANR	1684368	Identifier	flags		1684290	0					
ANR	1684369	InclusiveOrExpression	EX86_BIN_INS | EX86_SHIFT_INS		1684290	1		|			
ANR	1684370	Identifier	EX86_BIN_INS		1684290	0					
ANR	1684371	Identifier	EX86_SHIFT_INS		1684290	1					
ANR	1684372	EqualityExpression	( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) == 0		1684290	1		==			
ANR	1684373	BitAndExpression	flags & ( EX86_BYTE_ARG | EX86_HALF_ARG )		1684290	0		&			
ANR	1684374	Identifier	flags		1684290	0					
ANR	1684375	InclusiveOrExpression	EX86_BYTE_ARG | EX86_HALF_ARG		1684290	1		|			
ANR	1684376	Identifier	EX86_BYTE_ARG		1684290	0					
ANR	1684377	Identifier	EX86_HALF_ARG		1684290	1					
ANR	1684378	PrimaryExpression	0		1684290	1					
ANR	1684379	ExpressionStatement	SLJIT_ASSERT ( ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) != ( EX86_BYTE_ARG | EX86_HALF_ARG ) )	365:1:11439:11529	1684290	8	True				
ANR	1684380	CallExpression	SLJIT_ASSERT ( ( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) != ( EX86_BYTE_ARG | EX86_HALF_ARG ) )		1684290	0					
ANR	1684381	Callee	SLJIT_ASSERT		1684290	0					
ANR	1684382	Identifier	SLJIT_ASSERT		1684290	0					
ANR	1684383	ArgumentList	( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) != ( EX86_BYTE_ARG | EX86_HALF_ARG )		1684290	1					
ANR	1684384	Argument	( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) != ( EX86_BYTE_ARG | EX86_HALF_ARG )		1684290	0					
ANR	1684385	EqualityExpression	( flags & ( EX86_BYTE_ARG | EX86_HALF_ARG ) ) != ( EX86_BYTE_ARG | EX86_HALF_ARG )		1684290	0		!=			
ANR	1684386	BitAndExpression	flags & ( EX86_BYTE_ARG | EX86_HALF_ARG )		1684290	0		&			
ANR	1684387	Identifier	flags		1684290	0					
ANR	1684388	InclusiveOrExpression	EX86_BYTE_ARG | EX86_HALF_ARG		1684290	1		|			
ANR	1684389	Identifier	EX86_BYTE_ARG		1684290	0					
ANR	1684390	Identifier	EX86_HALF_ARG		1684290	1					
ANR	1684391	InclusiveOrExpression	EX86_BYTE_ARG | EX86_HALF_ARG		1684290	1		|			
ANR	1684392	Identifier	EX86_BYTE_ARG		1684290	0					
ANR	1684393	Identifier	EX86_HALF_ARG		1684290	1					
ANR	1684394	ExpressionStatement	SLJIT_ASSERT ( ! ( a & SLJIT_IMM ) || ! ( flags & EX86_SSE2 ) )	367:1:11575:11629	1684290	9	True				
ANR	1684395	CallExpression	SLJIT_ASSERT ( ! ( a & SLJIT_IMM ) || ! ( flags & EX86_SSE2 ) )		1684290	0					
ANR	1684396	Callee	SLJIT_ASSERT		1684290	0					
ANR	1684397	Identifier	SLJIT_ASSERT		1684290	0					
ANR	1684398	ArgumentList	! ( a & SLJIT_IMM ) || ! ( flags & EX86_SSE2 )		1684290	1					
ANR	1684399	Argument	! ( a & SLJIT_IMM ) || ! ( flags & EX86_SSE2 )		1684290	0					
ANR	1684400	OrExpression	! ( a & SLJIT_IMM ) || ! ( flags & EX86_SSE2 )		1684290	0		||			
ANR	1684401	UnaryOperationExpression	! ( a & SLJIT_IMM )		1684290	0					
ANR	1684402	UnaryOperator	!		1684290	0					
ANR	1684403	BitAndExpression	a & SLJIT_IMM		1684290	1		&			
ANR	1684404	Identifier	a		1684290	0					
ANR	1684405	Identifier	SLJIT_IMM		1684290	1					
ANR	1684406	UnaryOperationExpression	! ( flags & EX86_SSE2 )		1684290	1					
ANR	1684407	UnaryOperator	!		1684290	0					
ANR	1684408	BitAndExpression	flags & EX86_SSE2		1684290	1		&			
ANR	1684409	Identifier	flags		1684290	0					
ANR	1684410	Identifier	EX86_SSE2		1684290	1					
ANR	1684411	ExpressionStatement	SLJIT_ASSERT ( ( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) ) != ( EX86_PREF_F2 | EX86_PREF_F3 ) && ( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 ) && ( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 ) )	368:1:11632:11874	1684290	10	True				
ANR	1684412	CallExpression	SLJIT_ASSERT ( ( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) ) != ( EX86_PREF_F2 | EX86_PREF_F3 ) && ( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 ) && ( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 ) )		1684290	0					
ANR	1684413	Callee	SLJIT_ASSERT		1684290	0					
ANR	1684414	Identifier	SLJIT_ASSERT		1684290	0					
ANR	1684415	ArgumentList	( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) ) != ( EX86_PREF_F2 | EX86_PREF_F3 ) && ( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 ) && ( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 )		1684290	1					
ANR	1684416	Argument	( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) ) != ( EX86_PREF_F2 | EX86_PREF_F3 ) && ( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 ) && ( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 )		1684290	0					
ANR	1684417	AndExpression	( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) ) != ( EX86_PREF_F2 | EX86_PREF_F3 ) && ( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 ) && ( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 )		1684290	0		&&			
ANR	1684418	EqualityExpression	( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) ) != ( EX86_PREF_F2 | EX86_PREF_F3 )		1684290	0		!=			
ANR	1684419	BitAndExpression	flags & ( EX86_PREF_F2 | EX86_PREF_F3 )		1684290	0		&			
ANR	1684420	Identifier	flags		1684290	0					
ANR	1684421	InclusiveOrExpression	EX86_PREF_F2 | EX86_PREF_F3		1684290	1		|			
ANR	1684422	Identifier	EX86_PREF_F2		1684290	0					
ANR	1684423	Identifier	EX86_PREF_F3		1684290	1					
ANR	1684424	InclusiveOrExpression	EX86_PREF_F2 | EX86_PREF_F3		1684290	1		|			
ANR	1684425	Identifier	EX86_PREF_F2		1684290	0					
ANR	1684426	Identifier	EX86_PREF_F3		1684290	1					
ANR	1684427	AndExpression	( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 ) && ( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 )		1684290	1		&&			
ANR	1684428	EqualityExpression	( flags & ( EX86_PREF_F2 | EX86_PREF_66 ) ) != ( EX86_PREF_F2 | EX86_PREF_66 )		1684290	0		!=			
ANR	1684429	BitAndExpression	flags & ( EX86_PREF_F2 | EX86_PREF_66 )		1684290	0		&			
ANR	1684430	Identifier	flags		1684290	0					
ANR	1684431	InclusiveOrExpression	EX86_PREF_F2 | EX86_PREF_66		1684290	1		|			
ANR	1684432	Identifier	EX86_PREF_F2		1684290	0					
ANR	1684433	Identifier	EX86_PREF_66		1684290	1					
ANR	1684434	InclusiveOrExpression	EX86_PREF_F2 | EX86_PREF_66		1684290	1		|			
ANR	1684435	Identifier	EX86_PREF_F2		1684290	0					
ANR	1684436	Identifier	EX86_PREF_66		1684290	1					
ANR	1684437	EqualityExpression	( flags & ( EX86_PREF_F3 | EX86_PREF_66 ) ) != ( EX86_PREF_F3 | EX86_PREF_66 )		1684290	1		!=			
ANR	1684438	BitAndExpression	flags & ( EX86_PREF_F3 | EX86_PREF_66 )		1684290	0		&			
ANR	1684439	Identifier	flags		1684290	0					
ANR	1684440	InclusiveOrExpression	EX86_PREF_F3 | EX86_PREF_66		1684290	1		|			
ANR	1684441	Identifier	EX86_PREF_F3		1684290	0					
ANR	1684442	Identifier	EX86_PREF_66		1684290	1					
ANR	1684443	InclusiveOrExpression	EX86_PREF_F3 | EX86_PREF_66		1684290	1		|			
ANR	1684444	Identifier	EX86_PREF_F3		1684290	0					
ANR	1684445	Identifier	EX86_PREF_66		1684290	1					
ANR	1684446	ExpressionStatement	size &= 0xf	372:1:11878:11889	1684290	11	True				
ANR	1684447	AssignmentExpression	size &= 0xf		1684290	0		&=			
ANR	1684448	Identifier	size		1684290	0					
ANR	1684449	PrimaryExpression	0xf		1684290	1					
ANR	1684450	ExpressionStatement	inst_size = size	373:1:11892:11908	1684290	12	True				
ANR	1684451	AssignmentExpression	inst_size = size		1684290	0		=			
ANR	1684452	Identifier	inst_size		1684290	0					
ANR	1684453	Identifier	size		1684290	1					
ANR	1684454	IfStatement	if ( ! compiler -> mode32 && ! ( flags & EX86_NO_REXW ) )		1684290	13					
ANR	1684455	Condition	! compiler -> mode32 && ! ( flags & EX86_NO_REXW )	375:5:11916:11959	1684290	0	True				
ANR	1684456	AndExpression	! compiler -> mode32 && ! ( flags & EX86_NO_REXW )		1684290	0		&&			
ANR	1684457	UnaryOperationExpression	! compiler -> mode32		1684290	0					
ANR	1684458	UnaryOperator	!		1684290	0					
ANR	1684459	PtrMemberAccess	compiler -> mode32		1684290	1					
ANR	1684460	Identifier	compiler		1684290	0					
ANR	1684461	Identifier	mode32		1684290	1					
ANR	1684462	UnaryOperationExpression	! ( flags & EX86_NO_REXW )		1684290	1					
ANR	1684463	UnaryOperator	!		1684290	0					
ANR	1684464	BitAndExpression	flags & EX86_NO_REXW		1684290	1		&			
ANR	1684465	Identifier	flags		1684290	0					
ANR	1684466	Identifier	EX86_NO_REXW		1684290	1					
ANR	1684467	ExpressionStatement	rex |= REX_W	376:2:11964:11976	1684290	1	True				
ANR	1684468	AssignmentExpression	rex |= REX_W		1684290	0		|=			
ANR	1684469	Identifier	rex		1684290	0					
ANR	1684470	Identifier	REX_W		1684290	1					
ANR	1684471	ElseStatement	else		1684290	0					
ANR	1684472	IfStatement	if ( flags & EX86_REX )		1684290	0					
ANR	1684473	Condition	flags & EX86_REX	377:10:11988:12003	1684290	0	True				
ANR	1684474	BitAndExpression	flags & EX86_REX		1684290	0		&			
ANR	1684475	Identifier	flags		1684290	0					
ANR	1684476	Identifier	EX86_REX		1684290	1					
ANR	1684477	ExpressionStatement	rex |= REX	378:2:12008:12018	1684290	1	True				
ANR	1684478	AssignmentExpression	rex |= REX		1684290	0		|=			
ANR	1684479	Identifier	rex		1684290	0					
ANR	1684480	Identifier	REX		1684290	1					
ANR	1684481	IfStatement	if ( flags & ( EX86_PREF_F2 | EX86_PREF_F3 ) )		1684290	14					
ANR	1684482	Condition	flags & ( EX86_PREF_F2 | EX86_PREF_F3 )	380:5:12026:12062	1684290	0	True				
ANR	1684483	BitAndExpression	flags & ( EX86_PREF_F2 | EX86_PREF_F3 )		1684290	0		&			
ANR	1684484	Identifier	flags		1684290	0					
ANR	1684485	InclusiveOrExpression	EX86_PREF_F2 | EX86_PREF_F3		1684290	1		|			
ANR	1684486	Identifier	EX86_PREF_F2		1684290	0					
ANR	1684487	Identifier	EX86_PREF_F3		1684290	1					
ANR	1684488	ExpressionStatement	inst_size ++	381:2:12067:12078	1684290	1	True				
ANR	1684489	PostIncDecOperationExpression	inst_size ++		1684290	0					
ANR	1684490	Identifier	inst_size		1684290	0					
ANR	1684491	IncDec	++		1684290	1					
ANR	1684492	IfStatement	if ( flags & EX86_PREF_66 )		1684290	15					
ANR	1684493	Condition	flags & EX86_PREF_66	382:5:12085:12104	1684290	0	True				
ANR	1684494	BitAndExpression	flags & EX86_PREF_66		1684290	0		&			
ANR	1684495	Identifier	flags		1684290	0					
ANR	1684496	Identifier	EX86_PREF_66		1684290	1					
ANR	1684497	ExpressionStatement	inst_size ++	383:2:12109:12120	1684290	1	True				
ANR	1684498	PostIncDecOperationExpression	inst_size ++		1684290	0					
ANR	1684499	Identifier	inst_size		1684290	0					
ANR	1684500	IncDec	++		1684290	1					
ANR	1684501	ExpressionStatement	inst_size += 1	386:1:12152:12166	1684290	16	True				
ANR	1684502	AssignmentExpression	inst_size += 1		1684290	0		+=			
ANR	1684503	Identifier	inst_size		1684290	0					
ANR	1684504	PrimaryExpression	1		1684290	1					
ANR	1684505	IfStatement	if ( b & SLJIT_MEM )		1684290	17					
ANR	1684506	Condition	b & SLJIT_MEM	387:5:12193:12205	1684290	0	True				
ANR	1684507	BitAndExpression	b & SLJIT_MEM		1684290	0		&			
ANR	1684508	Identifier	b		1684290	0					
ANR	1684509	Identifier	SLJIT_MEM		1684290	1					
ANR	1684510	CompoundStatement		37:20:1336:1336	1684290	1					
ANR	1684511	IfStatement	if ( ! ( b & OFFS_REG_MASK ) )		1684290	0					
ANR	1684512	Condition	! ( b & OFFS_REG_MASK )	388:6:12216:12235	1684290	0	True				
ANR	1684513	UnaryOperationExpression	! ( b & OFFS_REG_MASK )		1684290	0					
ANR	1684514	UnaryOperator	!		1684290	0					
ANR	1684515	BitAndExpression	b & OFFS_REG_MASK		1684290	1		&			
ANR	1684516	Identifier	b		1684290	0					
ANR	1684517	Identifier	OFFS_REG_MASK		1684290	1					
ANR	1684518	CompoundStatement		38:28:1366:1366	1684290	1					
ANR	1684519	IfStatement	if ( NOT_HALFWORD ( immb ) )		1684290	0					
ANR	1684520	Condition	NOT_HALFWORD ( immb )	389:7:12247:12264	1684290	0	True				
ANR	1684521	CallExpression	NOT_HALFWORD ( immb )		1684290	0					
ANR	1684522	Callee	NOT_HALFWORD		1684290	0					
ANR	1684523	Identifier	NOT_HALFWORD		1684290	0					
ANR	1684524	ArgumentList	immb		1684290	1					
ANR	1684525	Argument	immb		1684290	0					
ANR	1684526	Identifier	immb		1684290	0					
ANR	1684527	CompoundStatement		39:27:1395:1395	1684290	1					
ANR	1684528	IfStatement	"if ( emit_load_imm64 ( compiler , TMP_REG3 , immb ) )"		1684290	0					
ANR	1684529	Condition	"emit_load_imm64 ( compiler , TMP_REG3 , immb )"	390:8:12277:12317	1684290	0	True				
ANR	1684530	CallExpression	"emit_load_imm64 ( compiler , TMP_REG3 , immb )"		1684290	0					
ANR	1684531	Callee	emit_load_imm64		1684290	0					
ANR	1684532	Identifier	emit_load_imm64		1684290	0					
ANR	1684533	ArgumentList	compiler		1684290	1					
ANR	1684534	Argument	compiler		1684290	0					
ANR	1684535	Identifier	compiler		1684290	0					
ANR	1684536	Argument	TMP_REG3		1684290	1					
ANR	1684537	Identifier	TMP_REG3		1684290	0					
ANR	1684538	Argument	immb		1684290	2					
ANR	1684539	Identifier	immb		1684290	0					
ANR	1684540	ReturnStatement	return NULL ;	391:5:12325:12336	1684290	1	True				
ANR	1684541	Identifier	NULL		1684290	0					
ANR	1684542	ExpressionStatement	immb = 0	392:4:12342:12350	1684290	1	True				
ANR	1684543	AssignmentExpression	immb = 0		1684290	0		=			
ANR	1684544	Identifier	immb		1684290	0					
ANR	1684545	PrimaryExpression	0		1684290	1					
ANR	1684546	IfStatement	if ( b & REG_MASK )		1684290	2					
ANR	1684547	Condition	b & REG_MASK	393:8:12360:12371	1684290	0	True				
ANR	1684548	BitAndExpression	b & REG_MASK		1684290	0		&			
ANR	1684549	Identifier	b		1684290	0					
ANR	1684550	Identifier	REG_MASK		1684290	1					
ANR	1684551	ExpressionStatement	b |= TO_OFFS_REG ( TMP_REG3 )	394:5:12379:12405	1684290	1	True				
ANR	1684552	AssignmentExpression	b |= TO_OFFS_REG ( TMP_REG3 )		1684290	0		|=			
ANR	1684553	Identifier	b		1684290	0					
ANR	1684554	CallExpression	TO_OFFS_REG ( TMP_REG3 )		1684290	1					
ANR	1684555	Callee	TO_OFFS_REG		1684290	0					
ANR	1684556	Identifier	TO_OFFS_REG		1684290	0					
ANR	1684557	ArgumentList	TMP_REG3		1684290	1					
ANR	1684558	Argument	TMP_REG3		1684290	0					
ANR	1684559	Identifier	TMP_REG3		1684290	0					
ANR	1684560	ElseStatement	else		1684290	0					
ANR	1684561	ExpressionStatement	b |= TMP_REG3	396:5:12421:12434	1684290	0	True				
ANR	1684562	AssignmentExpression	b |= TMP_REG3		1684290	0		|=			
ANR	1684563	Identifier	b		1684290	0					
ANR	1684564	Identifier	TMP_REG3		1684290	1					
ANR	1684565	ElseStatement	else		1684290	0					
ANR	1684566	IfStatement	if ( reg_lmap [ b & REG_MASK ] == 4 )		1684290	0					
ANR	1684567	Condition	reg_lmap [ b & REG_MASK ] == 4	398:12:12453:12479	1684290	0	True				
ANR	1684568	EqualityExpression	reg_lmap [ b & REG_MASK ] == 4		1684290	0		==			
ANR	1684569	ArrayIndexing	reg_lmap [ b & REG_MASK ]		1684290	0					
ANR	1684570	Identifier	reg_lmap		1684290	0					
ANR	1684571	BitAndExpression	b & REG_MASK		1684290	1		&			
ANR	1684572	Identifier	b		1684290	0					
ANR	1684573	Identifier	REG_MASK		1684290	1					
ANR	1684574	PrimaryExpression	4		1684290	1					
ANR	1684575	ExpressionStatement	b |= TO_OFFS_REG ( SLJIT_SP )	399:4:12486:12512	1684290	1	True				
ANR	1684576	AssignmentExpression	b |= TO_OFFS_REG ( SLJIT_SP )		1684290	0		|=			
ANR	1684577	Identifier	b		1684290	0					
ANR	1684578	CallExpression	TO_OFFS_REG ( SLJIT_SP )		1684290	1					
ANR	1684579	Callee	TO_OFFS_REG		1684290	0					
ANR	1684580	Identifier	TO_OFFS_REG		1684290	0					
ANR	1684581	ArgumentList	SLJIT_SP		1684290	1					
ANR	1684582	Argument	SLJIT_SP		1684290	0					
ANR	1684583	Identifier	SLJIT_SP		1684290	0					
ANR	1684584	IfStatement	if ( ( b & REG_MASK ) == SLJIT_UNUSED )		1684290	1					
ANR	1684585	Condition	( b & REG_MASK ) == SLJIT_UNUSED	402:6:12525:12554	1684290	0	True				
ANR	1684586	EqualityExpression	( b & REG_MASK ) == SLJIT_UNUSED		1684290	0		==			
ANR	1684587	BitAndExpression	b & REG_MASK		1684290	0		&			
ANR	1684588	Identifier	b		1684290	0					
ANR	1684589	Identifier	REG_MASK		1684290	1					
ANR	1684590	Identifier	SLJIT_UNUSED		1684290	1					
ANR	1684591	ExpressionStatement	inst_size += 1 + sizeof ( sljit_si )	403:3:12560:12593	1684290	1	True				
ANR	1684592	AssignmentExpression	inst_size += 1 + sizeof ( sljit_si )		1684290	0		+=			
ANR	1684593	Identifier	inst_size		1684290	0					
ANR	1684594	AdditiveExpression	1 + sizeof ( sljit_si )		1684290	1		+			
ANR	1684595	PrimaryExpression	1		1684290	0					
ANR	1684596	SizeofExpression	sizeof ( sljit_si )		1684290	1					
ANR	1684597	Sizeof	sizeof		1684290	0					
ANR	1684598	SizeofOperand	sljit_si		1684290	1					
ANR	1684599	ElseStatement	else		1684290	0					
ANR	1684600	CompoundStatement		54:7:1785:1785	1684290	0					
ANR	1684601	IfStatement	if ( reg_map [ b & REG_MASK ] >= 8 )		1684290	0					
ANR	1684602	Condition	reg_map [ b & REG_MASK ] >= 8	405:7:12666:12691	1684290	0	True				
ANR	1684603	RelationalExpression	reg_map [ b & REG_MASK ] >= 8		1684290	0		>=			
ANR	1684604	ArrayIndexing	reg_map [ b & REG_MASK ]		1684290	0					
ANR	1684605	Identifier	reg_map		1684290	0					
ANR	1684606	BitAndExpression	b & REG_MASK		1684290	1		&			
ANR	1684607	Identifier	b		1684290	0					
ANR	1684608	Identifier	REG_MASK		1684290	1					
ANR	1684609	PrimaryExpression	8		1684290	1					
ANR	1684610	ExpressionStatement	rex |= REX_B	406:4:12698:12710	1684290	1	True				
ANR	1684611	AssignmentExpression	rex |= REX_B		1684290	0		|=			
ANR	1684612	Identifier	rex		1684290	0					
ANR	1684613	Identifier	REX_B		1684290	1					
ANR	1684614	IfStatement	if ( immb != 0 && ( ! ( b & OFFS_REG_MASK ) || ( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP ) ) )		1684290	1					
ANR	1684615	Condition	immb != 0 && ( ! ( b & OFFS_REG_MASK ) || ( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP ) )	408:7:12720:12802	1684290	0	True				
ANR	1684616	AndExpression	immb != 0 && ( ! ( b & OFFS_REG_MASK ) || ( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP ) )		1684290	0		&&			
ANR	1684617	EqualityExpression	immb != 0		1684290	0		!=			
ANR	1684618	Identifier	immb		1684290	0					
ANR	1684619	PrimaryExpression	0		1684290	1					
ANR	1684620	OrExpression	! ( b & OFFS_REG_MASK ) || ( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP )		1684290	1		||			
ANR	1684621	UnaryOperationExpression	! ( b & OFFS_REG_MASK )		1684290	0					
ANR	1684622	UnaryOperator	!		1684290	0					
ANR	1684623	BitAndExpression	b & OFFS_REG_MASK		1684290	1		&			
ANR	1684624	Identifier	b		1684290	0					
ANR	1684625	Identifier	OFFS_REG_MASK		1684290	1					
ANR	1684626	EqualityExpression	( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP )		1684290	1		==			
ANR	1684627	BitAndExpression	b & OFFS_REG_MASK		1684290	0		&			
ANR	1684628	Identifier	b		1684290	0					
ANR	1684629	Identifier	OFFS_REG_MASK		1684290	1					
ANR	1684630	CallExpression	TO_OFFS_REG ( SLJIT_SP )		1684290	1					
ANR	1684631	Callee	TO_OFFS_REG		1684290	0					
ANR	1684632	Identifier	TO_OFFS_REG		1684290	0					
ANR	1684633	ArgumentList	SLJIT_SP		1684290	1					
ANR	1684634	Argument	SLJIT_SP		1684290	0					
ANR	1684635	Identifier	SLJIT_SP		1684290	0					
ANR	1684636	CompoundStatement		58:92:1933:1933	1684290	1					
ANR	1684637	IfStatement	if ( immb <= 127 && immb >= - 128 )		1684290	0					
ANR	1684638	Condition	immb <= 127 && immb >= - 128	410:8:12844:12870	1684290	0	True				
ANR	1684639	AndExpression	immb <= 127 && immb >= - 128		1684290	0		&&			
ANR	1684640	RelationalExpression	immb <= 127		1684290	0		<=			
ANR	1684641	Identifier	immb		1684290	0					
ANR	1684642	PrimaryExpression	127		1684290	1					
ANR	1684643	RelationalExpression	immb >= - 128		1684290	1		>=			
ANR	1684644	Identifier	immb		1684290	0					
ANR	1684645	UnaryOperationExpression	- 128		1684290	1					
ANR	1684646	UnaryOperator	-		1684290	0					
ANR	1684647	PrimaryExpression	128		1684290	1					
ANR	1684648	ExpressionStatement	inst_size += sizeof ( sljit_sb )	411:5:12878:12907	1684290	1	True				
ANR	1684649	AssignmentExpression	inst_size += sizeof ( sljit_sb )		1684290	0		+=			
ANR	1684650	Identifier	inst_size		1684290	0					
ANR	1684651	SizeofExpression	sizeof ( sljit_sb )		1684290	1					
ANR	1684652	Sizeof	sizeof		1684290	0					
ANR	1684653	SizeofOperand	sljit_sb		1684290	1					
ANR	1684654	ElseStatement	else		1684290	0					
ANR	1684655	ExpressionStatement	inst_size += sizeof ( sljit_si )	413:5:12923:12952	1684290	0	True				
ANR	1684656	AssignmentExpression	inst_size += sizeof ( sljit_si )		1684290	0		+=			
ANR	1684657	Identifier	inst_size		1684290	0					
ANR	1684658	SizeofExpression	sizeof ( sljit_si )		1684290	1					
ANR	1684659	Sizeof	sizeof		1684290	0					
ANR	1684660	SizeofOperand	sljit_si		1684290	1					
ANR	1684661	ElseStatement	else		1684290	0					
ANR	1684662	IfStatement	if ( reg_lmap [ b & REG_MASK ] == 5 )		1684290	0					
ANR	1684663	Condition	reg_lmap [ b & REG_MASK ] == 5	415:12:12971:12997	1684290	0	True				
ANR	1684664	EqualityExpression	reg_lmap [ b & REG_MASK ] == 5		1684290	0		==			
ANR	1684665	ArrayIndexing	reg_lmap [ b & REG_MASK ]		1684290	0					
ANR	1684666	Identifier	reg_lmap		1684290	0					
ANR	1684667	BitAndExpression	b & REG_MASK		1684290	1		&			
ANR	1684668	Identifier	b		1684290	0					
ANR	1684669	Identifier	REG_MASK		1684290	1					
ANR	1684670	PrimaryExpression	5		1684290	1					
ANR	1684671	ExpressionStatement	inst_size += sizeof ( sljit_sb )	416:4:13004:13033	1684290	1	True				
ANR	1684672	AssignmentExpression	inst_size += sizeof ( sljit_sb )		1684290	0		+=			
ANR	1684673	Identifier	inst_size		1684290	0					
ANR	1684674	SizeofExpression	sizeof ( sljit_sb )		1684290	1					
ANR	1684675	Sizeof	sizeof		1684290	0					
ANR	1684676	SizeofOperand	sljit_sb		1684290	1					
ANR	1684677	IfStatement	if ( ( b & OFFS_REG_MASK ) != SLJIT_UNUSED )		1684290	2					
ANR	1684678	Condition	( b & OFFS_REG_MASK ) != SLJIT_UNUSED	418:7:13043:13077	1684290	0	True				
ANR	1684679	EqualityExpression	( b & OFFS_REG_MASK ) != SLJIT_UNUSED		1684290	0		!=			
ANR	1684680	BitAndExpression	b & OFFS_REG_MASK		1684290	0		&			
ANR	1684681	Identifier	b		1684290	0					
ANR	1684682	Identifier	OFFS_REG_MASK		1684290	1					
ANR	1684683	Identifier	SLJIT_UNUSED		1684290	1					
ANR	1684684	CompoundStatement		68:44:2208:2208	1684290	1					
ANR	1684685	ExpressionStatement	inst_size += 1	419:4:13086:13100	1684290	0	True				
ANR	1684686	AssignmentExpression	inst_size += 1		1684290	0		+=			
ANR	1684687	Identifier	inst_size		1684290	0					
ANR	1684688	PrimaryExpression	1		1684290	1					
ANR	1684689	IfStatement	if ( reg_map [ OFFS_REG ( b ) ] >= 8 )		1684290	1					
ANR	1684690	Condition	reg_map [ OFFS_REG ( b ) ] >= 8	420:8:13126:13150	1684290	0	True				
ANR	1684691	RelationalExpression	reg_map [ OFFS_REG ( b ) ] >= 8		1684290	0		>=			
ANR	1684692	ArrayIndexing	reg_map [ OFFS_REG ( b ) ]		1684290	0					
ANR	1684693	Identifier	reg_map		1684290	0					
ANR	1684694	CallExpression	OFFS_REG ( b )		1684290	1					
ANR	1684695	Callee	OFFS_REG		1684290	0					
ANR	1684696	Identifier	OFFS_REG		1684290	0					
ANR	1684697	ArgumentList	b		1684290	1					
ANR	1684698	Argument	b		1684290	0					
ANR	1684699	Identifier	b		1684290	0					
ANR	1684700	PrimaryExpression	8		1684290	1					
ANR	1684701	ExpressionStatement	rex |= REX_X	421:5:13158:13170	1684290	1	True				
ANR	1684702	AssignmentExpression	rex |= REX_X		1684290	0		|=			
ANR	1684703	Identifier	rex		1684290	0					
ANR	1684704	Identifier	REX_X		1684290	1					
ANR	1684705	ElseStatement	else		1684290	0					
ANR	1684706	IfStatement	if ( ! ( flags & EX86_SSE2_OP2 ) && reg_map [ b ] >= 8 )		1684290	0					
ANR	1684707	Condition	! ( flags & EX86_SSE2_OP2 ) && reg_map [ b ] >= 8	425:10:13194:13236	1684290	0	True				
ANR	1684708	AndExpression	! ( flags & EX86_SSE2_OP2 ) && reg_map [ b ] >= 8		1684290	0		&&			
ANR	1684709	UnaryOperationExpression	! ( flags & EX86_SSE2_OP2 )		1684290	0					
ANR	1684710	UnaryOperator	!		1684290	0					
ANR	1684711	BitAndExpression	flags & EX86_SSE2_OP2		1684290	1		&			
ANR	1684712	Identifier	flags		1684290	0					
ANR	1684713	Identifier	EX86_SSE2_OP2		1684290	1					
ANR	1684714	RelationalExpression	reg_map [ b ] >= 8		1684290	1		>=			
ANR	1684715	ArrayIndexing	reg_map [ b ]		1684290	0					
ANR	1684716	Identifier	reg_map		1684290	0					
ANR	1684717	Identifier	b		1684290	1					
ANR	1684718	PrimaryExpression	8		1684290	1					
ANR	1684719	ExpressionStatement	rex |= REX_B	426:2:13241:13253	1684290	1	True				
ANR	1684720	AssignmentExpression	rex |= REX_B		1684290	0		|=			
ANR	1684721	Identifier	rex		1684290	0					
ANR	1684722	Identifier	REX_B		1684290	1					
ANR	1684723	IfStatement	if ( a & SLJIT_IMM )		1684290	18					
ANR	1684724	Condition	a & SLJIT_IMM	428:5:13261:13273	1684290	0	True				
ANR	1684725	BitAndExpression	a & SLJIT_IMM		1684290	0		&			
ANR	1684726	Identifier	a		1684290	0					
ANR	1684727	Identifier	SLJIT_IMM		1684290	1					
ANR	1684728	CompoundStatement		78:20:2404:2404	1684290	1					
ANR	1684729	IfStatement	if ( flags & EX86_BIN_INS )		1684290	0					
ANR	1684730	Condition	flags & EX86_BIN_INS	429:6:13284:13303	1684290	0	True				
ANR	1684731	BitAndExpression	flags & EX86_BIN_INS		1684290	0		&			
ANR	1684732	Identifier	flags		1684290	0					
ANR	1684733	Identifier	EX86_BIN_INS		1684290	1					
ANR	1684734	CompoundStatement		79:28:2434:2434	1684290	1					
ANR	1684735	IfStatement	if ( imma <= 127 && imma >= - 128 )		1684290	0					
ANR	1684736	Condition	imma <= 127 && imma >= - 128	430:7:13315:13341	1684290	0	True				
ANR	1684737	AndExpression	imma <= 127 && imma >= - 128		1684290	0		&&			
ANR	1684738	RelationalExpression	imma <= 127		1684290	0		<=			
ANR	1684739	Identifier	imma		1684290	0					
ANR	1684740	PrimaryExpression	127		1684290	1					
ANR	1684741	RelationalExpression	imma >= - 128		1684290	1		>=			
ANR	1684742	Identifier	imma		1684290	0					
ANR	1684743	UnaryOperationExpression	- 128		1684290	1					
ANR	1684744	UnaryOperator	-		1684290	0					
ANR	1684745	PrimaryExpression	128		1684290	1					
ANR	1684746	CompoundStatement		80:36:2472:2472	1684290	1					
ANR	1684747	ExpressionStatement	inst_size += 1	431:4:13350:13364	1684290	0	True				
ANR	1684748	AssignmentExpression	inst_size += 1		1684290	0		+=			
ANR	1684749	Identifier	inst_size		1684290	0					
ANR	1684750	PrimaryExpression	1		1684290	1					
ANR	1684751	ExpressionStatement	flags |= EX86_BYTE_ARG	432:4:13370:13392	1684290	1	True				
ANR	1684752	AssignmentExpression	flags |= EX86_BYTE_ARG		1684290	0		|=			
ANR	1684753	Identifier	flags		1684290	0					
ANR	1684754	Identifier	EX86_BYTE_ARG		1684290	1					
ANR	1684755	ElseStatement	else		1684290	0					
ANR	1684756	ExpressionStatement	inst_size += 4	434:4:13408:13422	1684290	0	True				
ANR	1684757	AssignmentExpression	inst_size += 4		1684290	0		+=			
ANR	1684758	Identifier	inst_size		1684290	0					
ANR	1684759	PrimaryExpression	4		1684290	1					
ANR	1684760	ElseStatement	else		1684290	0					
ANR	1684761	IfStatement	if ( flags & EX86_SHIFT_INS )		1684290	0					
ANR	1684762	Condition	flags & EX86_SHIFT_INS	436:11:13439:13460	1684290	0	True				
ANR	1684763	BitAndExpression	flags & EX86_SHIFT_INS		1684290	0		&			
ANR	1684764	Identifier	flags		1684290	0					
ANR	1684765	Identifier	EX86_SHIFT_INS		1684290	1					
ANR	1684766	CompoundStatement		86:35:2591:2591	1684290	1					
ANR	1684767	ExpressionStatement	imma &= compiler -> mode32 ? 0x1f : 0x3f	437:3:13468:13506	1684290	0	True				
ANR	1684768	AssignmentExpression	imma &= compiler -> mode32 ? 0x1f : 0x3f		1684290	0		&=			
ANR	1684769	Identifier	imma		1684290	0					
ANR	1684770	ConditionalExpression	compiler -> mode32 ? 0x1f : 0x3f		1684290	1					
ANR	1684771	Condition	compiler -> mode32		1684290	0					
ANR	1684772	PtrMemberAccess	compiler -> mode32		1684290	0					
ANR	1684773	Identifier	compiler		1684290	0					
ANR	1684774	Identifier	mode32		1684290	1					
ANR	1684775	PrimaryExpression	0x1f		1684290	1					
ANR	1684776	PrimaryExpression	0x3f		1684290	2					
ANR	1684777	IfStatement	if ( imma != 1 )		1684290	1					
ANR	1684778	Condition	imma != 1	438:7:13515:13523	1684290	0	True				
ANR	1684779	EqualityExpression	imma != 1		1684290	0		!=			
ANR	1684780	Identifier	imma		1684290	0					
ANR	1684781	PrimaryExpression	1		1684290	1					
ANR	1684782	CompoundStatement		88:18:2654:2654	1684290	1					
ANR	1684783	ExpressionStatement	inst_size ++	439:4:13532:13544	1684290	0	True				
ANR	1684784	PostIncDecOperationExpression	inst_size ++		1684290	0					
ANR	1684785	Identifier	inst_size		1684290	0					
ANR	1684786	IncDec	++		1684290	1					
ANR	1684787	ExpressionStatement	flags |= EX86_BYTE_ARG	440:4:13550:13572	1684290	1	True				
ANR	1684788	AssignmentExpression	flags |= EX86_BYTE_ARG		1684290	0		|=			
ANR	1684789	Identifier	flags		1684290	0					
ANR	1684790	Identifier	EX86_BYTE_ARG		1684290	1					
ANR	1684791	ElseStatement	else		1684290	0					
ANR	1684792	IfStatement	if ( flags & EX86_BYTE_ARG )		1684290	0					
ANR	1684793	Condition	flags & EX86_BYTE_ARG	442:13:13592:13612	1684290	0	True				
ANR	1684794	BitAndExpression	flags & EX86_BYTE_ARG		1684290	0		&			
ANR	1684795	Identifier	flags		1684290	0					
ANR	1684796	Identifier	EX86_BYTE_ARG		1684290	1					
ANR	1684797	ExpressionStatement	inst_size ++	443:3:13618:13629	1684290	1	True				
ANR	1684798	PostIncDecOperationExpression	inst_size ++		1684290	0					
ANR	1684799	Identifier	inst_size		1684290	0					
ANR	1684800	IncDec	++		1684290	1					
ANR	1684801	ElseStatement	else		1684290	0					
ANR	1684802	IfStatement	if ( flags & EX86_HALF_ARG )		1684290	0					
ANR	1684803	Condition	flags & EX86_HALF_ARG	444:11:13642:13662	1684290	0	True				
ANR	1684804	BitAndExpression	flags & EX86_HALF_ARG		1684290	0		&			
ANR	1684805	Identifier	flags		1684290	0					
ANR	1684806	Identifier	EX86_HALF_ARG		1684290	1					
ANR	1684807	ExpressionStatement	inst_size += sizeof ( short )	445:3:13668:13694	1684290	1	True				
ANR	1684808	AssignmentExpression	inst_size += sizeof ( short )		1684290	0		+=			
ANR	1684809	Identifier	inst_size		1684290	0					
ANR	1684810	SizeofExpression	sizeof ( short )		1684290	1					
ANR	1684811	Sizeof	sizeof		1684290	0					
ANR	1684812	SizeofOperand	short		1684290	1					
ANR	1684813	ElseStatement	else		1684290	0					
ANR	1684814	ExpressionStatement	inst_size += sizeof ( sljit_si )	447:3:13706:13735	1684290	0	True				
ANR	1684815	AssignmentExpression	inst_size += sizeof ( sljit_si )		1684290	0		+=			
ANR	1684816	Identifier	inst_size		1684290	0					
ANR	1684817	SizeofExpression	sizeof ( sljit_si )		1684290	1					
ANR	1684818	Sizeof	sizeof		1684290	0					
ANR	1684819	SizeofOperand	sljit_si		1684290	1					
ANR	1684820	ElseStatement	else		1684290	0					
ANR	1684821	CompoundStatement		99:6:2874:2874	1684290	0					
ANR	1684822	ExpressionStatement	SLJIT_ASSERT ( ! ( flags & EX86_SHIFT_INS ) || a == SLJIT_PREF_SHIFT_REG )	450:2:13750:13818	1684290	0	True				
ANR	1684823	CallExpression	SLJIT_ASSERT ( ! ( flags & EX86_SHIFT_INS ) || a == SLJIT_PREF_SHIFT_REG )		1684290	0					
ANR	1684824	Callee	SLJIT_ASSERT		1684290	0					
ANR	1684825	Identifier	SLJIT_ASSERT		1684290	0					
ANR	1684826	ArgumentList	! ( flags & EX86_SHIFT_INS ) || a == SLJIT_PREF_SHIFT_REG		1684290	1					
ANR	1684827	Argument	! ( flags & EX86_SHIFT_INS ) || a == SLJIT_PREF_SHIFT_REG		1684290	0					
ANR	1684828	OrExpression	! ( flags & EX86_SHIFT_INS ) || a == SLJIT_PREF_SHIFT_REG		1684290	0		||			
ANR	1684829	UnaryOperationExpression	! ( flags & EX86_SHIFT_INS )		1684290	0					
ANR	1684830	UnaryOperator	!		1684290	0					
ANR	1684831	BitAndExpression	flags & EX86_SHIFT_INS		1684290	1		&			
ANR	1684832	Identifier	flags		1684290	0					
ANR	1684833	Identifier	EX86_SHIFT_INS		1684290	1					
ANR	1684834	EqualityExpression	a == SLJIT_PREF_SHIFT_REG		1684290	1		==			
ANR	1684835	Identifier	a		1684290	0					
ANR	1684836	Identifier	SLJIT_PREF_SHIFT_REG		1684290	1					
ANR	1684837	IfStatement	if ( ! ( flags & EX86_SSE2_OP1 ) && reg_map [ a ] >= 8 )		1684290	1					
ANR	1684838	Condition	! ( flags & EX86_SSE2_OP1 ) && reg_map [ a ] >= 8	452:6:13880:13922	1684290	0	True				
ANR	1684839	AndExpression	! ( flags & EX86_SSE2_OP1 ) && reg_map [ a ] >= 8		1684290	0		&&			
ANR	1684840	UnaryOperationExpression	! ( flags & EX86_SSE2_OP1 )		1684290	0					
ANR	1684841	UnaryOperator	!		1684290	0					
ANR	1684842	BitAndExpression	flags & EX86_SSE2_OP1		1684290	1		&			
ANR	1684843	Identifier	flags		1684290	0					
ANR	1684844	Identifier	EX86_SSE2_OP1		1684290	1					
ANR	1684845	RelationalExpression	reg_map [ a ] >= 8		1684290	1		>=			
ANR	1684846	ArrayIndexing	reg_map [ a ]		1684290	0					
ANR	1684847	Identifier	reg_map		1684290	0					
ANR	1684848	Identifier	a		1684290	1					
ANR	1684849	PrimaryExpression	8		1684290	1					
ANR	1684850	ExpressionStatement	rex |= REX_R	453:3:13928:13940	1684290	1	True				
ANR	1684851	AssignmentExpression	rex |= REX_R		1684290	0		|=			
ANR	1684852	Identifier	rex		1684290	0					
ANR	1684853	Identifier	REX_R		1684290	1					
ANR	1684854	IfStatement	if ( rex )		1684290	19					
ANR	1684855	Condition	rex	456:5:13951:13953	1684290	0	True				
ANR	1684856	Identifier	rex		1684290	0					
ANR	1684857	ExpressionStatement	inst_size ++	457:2:13958:13969	1684290	1	True				
ANR	1684858	PostIncDecOperationExpression	inst_size ++		1684290	0					
ANR	1684859	Identifier	inst_size		1684290	0					
ANR	1684860	IncDec	++		1684290	1					
ANR	1684861	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + inst_size )"	459:1:13973:14026	1684290	20	True				
ANR	1684862	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + inst_size )"		1684290	0		=			
ANR	1684863	Identifier	inst		1684290	0					
ANR	1684864	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + inst_size )"		1684290	1					
ANR	1684865	CastTarget	sljit_ub *		1684290	0					
ANR	1684866	CallExpression	"ensure_buf ( compiler , 1 + inst_size )"		1684290	1					
ANR	1684867	Callee	ensure_buf		1684290	0					
ANR	1684868	Identifier	ensure_buf		1684290	0					
ANR	1684869	ArgumentList	compiler		1684290	1					
ANR	1684870	Argument	compiler		1684290	0					
ANR	1684871	Identifier	compiler		1684290	0					
ANR	1684872	Argument	1 + inst_size		1684290	1					
ANR	1684873	AdditiveExpression	1 + inst_size		1684290	0		+			
ANR	1684874	PrimaryExpression	1		1684290	0					
ANR	1684875	Identifier	inst_size		1684290	1					
ANR	1684876	ExpressionStatement	PTR_FAIL_IF ( ! inst )	460:1:14029:14047	1684290	21	True				
ANR	1684877	CallExpression	PTR_FAIL_IF ( ! inst )		1684290	0					
ANR	1684878	Callee	PTR_FAIL_IF		1684290	0					
ANR	1684879	Identifier	PTR_FAIL_IF		1684290	0					
ANR	1684880	ArgumentList	! inst		1684290	1					
ANR	1684881	Argument	! inst		1684290	0					
ANR	1684882	UnaryOperationExpression	! inst		1684290	0					
ANR	1684883	UnaryOperator	!		1684290	0					
ANR	1684884	Identifier	inst		1684290	1					
ANR	1684885	ExpressionStatement	INC_SIZE ( inst_size )	463:1:14077:14096	1684290	22	True				
ANR	1684886	CallExpression	INC_SIZE ( inst_size )		1684290	0					
ANR	1684887	Callee	INC_SIZE		1684290	0					
ANR	1684888	Identifier	INC_SIZE		1684290	0					
ANR	1684889	ArgumentList	inst_size		1684290	1					
ANR	1684890	Argument	inst_size		1684290	0					
ANR	1684891	Identifier	inst_size		1684290	0					
ANR	1684892	IfStatement	if ( flags & EX86_PREF_F2 )		1684290	23					
ANR	1684893	Condition	flags & EX86_PREF_F2	464:5:14103:14122	1684290	0	True				
ANR	1684894	BitAndExpression	flags & EX86_PREF_F2		1684290	0		&			
ANR	1684895	Identifier	flags		1684290	0					
ANR	1684896	Identifier	EX86_PREF_F2		1684290	1					
ANR	1684897	ExpressionStatement	* inst ++ = 0xf2	465:2:14127:14141	1684290	1	True				
ANR	1684898	AssignmentExpression	* inst ++ = 0xf2		1684290	0		=			
ANR	1684899	UnaryOperationExpression	* inst ++		1684290	0					
ANR	1684900	UnaryOperator	*		1684290	0					
ANR	1684901	PostIncDecOperationExpression	inst ++		1684290	1					
ANR	1684902	Identifier	inst		1684290	0					
ANR	1684903	IncDec	++		1684290	1					
ANR	1684904	PrimaryExpression	0xf2		1684290	1					
ANR	1684905	IfStatement	if ( flags & EX86_PREF_F3 )		1684290	24					
ANR	1684906	Condition	flags & EX86_PREF_F3	466:5:14148:14167	1684290	0	True				
ANR	1684907	BitAndExpression	flags & EX86_PREF_F3		1684290	0		&			
ANR	1684908	Identifier	flags		1684290	0					
ANR	1684909	Identifier	EX86_PREF_F3		1684290	1					
ANR	1684910	ExpressionStatement	* inst ++ = 0xf3	467:2:14172:14186	1684290	1	True				
ANR	1684911	AssignmentExpression	* inst ++ = 0xf3		1684290	0		=			
ANR	1684912	UnaryOperationExpression	* inst ++		1684290	0					
ANR	1684913	UnaryOperator	*		1684290	0					
ANR	1684914	PostIncDecOperationExpression	inst ++		1684290	1					
ANR	1684915	Identifier	inst		1684290	0					
ANR	1684916	IncDec	++		1684290	1					
ANR	1684917	PrimaryExpression	0xf3		1684290	1					
ANR	1684918	IfStatement	if ( flags & EX86_PREF_66 )		1684290	25					
ANR	1684919	Condition	flags & EX86_PREF_66	468:5:14193:14212	1684290	0	True				
ANR	1684920	BitAndExpression	flags & EX86_PREF_66		1684290	0		&			
ANR	1684921	Identifier	flags		1684290	0					
ANR	1684922	Identifier	EX86_PREF_66		1684290	1					
ANR	1684923	ExpressionStatement	* inst ++ = 0x66	469:2:14217:14231	1684290	1	True				
ANR	1684924	AssignmentExpression	* inst ++ = 0x66		1684290	0		=			
ANR	1684925	UnaryOperationExpression	* inst ++		1684290	0					
ANR	1684926	UnaryOperator	*		1684290	0					
ANR	1684927	PostIncDecOperationExpression	inst ++		1684290	1					
ANR	1684928	Identifier	inst		1684290	0					
ANR	1684929	IncDec	++		1684290	1					
ANR	1684930	PrimaryExpression	0x66		1684290	1					
ANR	1684931	IfStatement	if ( rex )		1684290	26					
ANR	1684932	Condition	rex	470:5:14238:14240	1684290	0	True				
ANR	1684933	Identifier	rex		1684290	0					
ANR	1684934	ExpressionStatement	* inst ++ = rex	471:2:14245:14258	1684290	1	True				
ANR	1684935	AssignmentExpression	* inst ++ = rex		1684290	0		=			
ANR	1684936	UnaryOperationExpression	* inst ++		1684290	0					
ANR	1684937	UnaryOperator	*		1684290	0					
ANR	1684938	PostIncDecOperationExpression	inst ++		1684290	1					
ANR	1684939	Identifier	inst		1684290	0					
ANR	1684940	IncDec	++		1684290	1					
ANR	1684941	Identifier	rex		1684290	1					
ANR	1684942	ExpressionStatement	buf_ptr = inst + size	472:1:14261:14282	1684290	27	True				
ANR	1684943	AssignmentExpression	buf_ptr = inst + size		1684290	0		=			
ANR	1684944	Identifier	buf_ptr		1684290	0					
ANR	1684945	AdditiveExpression	inst + size		1684290	1		+			
ANR	1684946	Identifier	inst		1684290	0					
ANR	1684947	Identifier	size		1684290	1					
ANR	1684948	IfStatement	if ( ! ( flags & EX86_SHIFT_INS ) )		1684290	28					
ANR	1684949	Condition	! ( flags & EX86_SHIFT_INS )	475:5:14317:14341	1684290	0	True				
ANR	1684950	UnaryOperationExpression	! ( flags & EX86_SHIFT_INS )		1684290	0					
ANR	1684951	UnaryOperator	!		1684290	0					
ANR	1684952	BitAndExpression	flags & EX86_SHIFT_INS		1684290	1		&			
ANR	1684953	Identifier	flags		1684290	0					
ANR	1684954	Identifier	EX86_SHIFT_INS		1684290	1					
ANR	1684955	CompoundStatement		125:32:3472:3472	1684290	1					
ANR	1684956	IfStatement	if ( ( flags & EX86_BIN_INS ) && ( a & SLJIT_IMM ) )		1684290	0					
ANR	1684957	Condition	( flags & EX86_BIN_INS ) && ( a & SLJIT_IMM )	476:6:14352:14392	1684290	0	True				
ANR	1684958	AndExpression	( flags & EX86_BIN_INS ) && ( a & SLJIT_IMM )		1684290	0		&&			
ANR	1684959	BitAndExpression	flags & EX86_BIN_INS		1684290	0		&			
ANR	1684960	Identifier	flags		1684290	0					
ANR	1684961	Identifier	EX86_BIN_INS		1684290	1					
ANR	1684962	BitAndExpression	a & SLJIT_IMM		1684290	1		&			
ANR	1684963	Identifier	a		1684290	0					
ANR	1684964	Identifier	SLJIT_IMM		1684290	1					
ANR	1684965	ExpressionStatement	* inst = ( flags & EX86_BYTE_ARG ) ? GROUP_BINARY_83 : GROUP_BINARY_81	477:3:14398:14465	1684290	1	True				
ANR	1684966	AssignmentExpression	* inst = ( flags & EX86_BYTE_ARG ) ? GROUP_BINARY_83 : GROUP_BINARY_81		1684290	0		=			
ANR	1684967	UnaryOperationExpression	* inst		1684290	0					
ANR	1684968	UnaryOperator	*		1684290	0					
ANR	1684969	Identifier	inst		1684290	1					
ANR	1684970	ConditionalExpression	( flags & EX86_BYTE_ARG ) ? GROUP_BINARY_83 : GROUP_BINARY_81		1684290	1					
ANR	1684971	Condition	flags & EX86_BYTE_ARG		1684290	0					
ANR	1684972	BitAndExpression	flags & EX86_BYTE_ARG		1684290	0		&			
ANR	1684973	Identifier	flags		1684290	0					
ANR	1684974	Identifier	EX86_BYTE_ARG		1684290	1					
ANR	1684975	Identifier	GROUP_BINARY_83		1684290	1					
ANR	1684976	Identifier	GROUP_BINARY_81		1684290	2					
ANR	1684977	IfStatement	if ( ( a & SLJIT_IMM ) || ( a == 0 ) )		1684290	1					
ANR	1684978	Condition	( a & SLJIT_IMM ) || ( a == 0 )	479:6:14474:14500	1684290	0	True				
ANR	1684979	OrExpression	( a & SLJIT_IMM ) || ( a == 0 )		1684290	0		||			
ANR	1684980	BitAndExpression	a & SLJIT_IMM		1684290	0		&			
ANR	1684981	Identifier	a		1684290	0					
ANR	1684982	Identifier	SLJIT_IMM		1684290	1					
ANR	1684983	EqualityExpression	a == 0		1684290	1		==			
ANR	1684984	Identifier	a		1684290	0					
ANR	1684985	PrimaryExpression	0		1684290	1					
ANR	1684986	ExpressionStatement	* buf_ptr = 0	480:3:14506:14518	1684290	1	True				
ANR	1684987	AssignmentExpression	* buf_ptr = 0		1684290	0		=			
ANR	1684988	UnaryOperationExpression	* buf_ptr		1684290	0					
ANR	1684989	UnaryOperator	*		1684290	0					
ANR	1684990	Identifier	buf_ptr		1684290	1					
ANR	1684991	PrimaryExpression	0		1684290	1					
ANR	1684992	ElseStatement	else		1684290	0					
ANR	1684993	IfStatement	if ( ! ( flags & EX86_SSE2_OP1 ) )		1684290	0					
ANR	1684994	Condition	! ( flags & EX86_SSE2_OP1 )	481:11:14531:14554	1684290	0	True				
ANR	1684995	UnaryOperationExpression	! ( flags & EX86_SSE2_OP1 )		1684290	0					
ANR	1684996	UnaryOperator	!		1684290	0					
ANR	1684997	BitAndExpression	flags & EX86_SSE2_OP1		1684290	1		&			
ANR	1684998	Identifier	flags		1684290	0					
ANR	1684999	Identifier	EX86_SSE2_OP1		1684290	1					
ANR	1685000	ExpressionStatement	* buf_ptr = reg_lmap [ a ] << 3	482:3:14560:14587	1684290	1	True				
ANR	1685001	AssignmentExpression	* buf_ptr = reg_lmap [ a ] << 3		1684290	0		=			
ANR	1685002	UnaryOperationExpression	* buf_ptr		1684290	0					
ANR	1685003	UnaryOperator	*		1684290	0					
ANR	1685004	Identifier	buf_ptr		1684290	1					
ANR	1685005	ShiftExpression	reg_lmap [ a ] << 3		1684290	1		<<			
ANR	1685006	ArrayIndexing	reg_lmap [ a ]		1684290	0					
ANR	1685007	Identifier	reg_lmap		1684290	0					
ANR	1685008	Identifier	a		1684290	1					
ANR	1685009	PrimaryExpression	3		1684290	1					
ANR	1685010	ElseStatement	else		1684290	0					
ANR	1685011	ExpressionStatement	* buf_ptr = a << 3	484:3:14599:14616	1684290	0	True				
ANR	1685012	AssignmentExpression	* buf_ptr = a << 3		1684290	0		=			
ANR	1685013	UnaryOperationExpression	* buf_ptr		1684290	0					
ANR	1685014	UnaryOperator	*		1684290	0					
ANR	1685015	Identifier	buf_ptr		1684290	1					
ANR	1685016	ShiftExpression	a << 3		1684290	1		<<			
ANR	1685017	Identifier	a		1684290	0					
ANR	1685018	PrimaryExpression	3		1684290	1					
ANR	1685019	ElseStatement	else		1684290	0					
ANR	1685020	CompoundStatement		136:6:3755:3755	1684290	0					
ANR	1685021	IfStatement	if ( a & SLJIT_IMM )		1684290	0					
ANR	1685022	Condition	a & SLJIT_IMM	487:6:14635:14647	1684290	0	True				
ANR	1685023	BitAndExpression	a & SLJIT_IMM		1684290	0		&			
ANR	1685024	Identifier	a		1684290	0					
ANR	1685025	Identifier	SLJIT_IMM		1684290	1					
ANR	1685026	CompoundStatement		137:21:3778:3778	1684290	1					
ANR	1685027	IfStatement	if ( imma == 1 )		1684290	0					
ANR	1685028	Condition	imma == 1	488:7:14659:14667	1684290	0	True				
ANR	1685029	EqualityExpression	imma == 1		1684290	0		==			
ANR	1685030	Identifier	imma		1684290	0					
ANR	1685031	PrimaryExpression	1		1684290	1					
ANR	1685032	ExpressionStatement	* inst = GROUP_SHIFT_1	489:4:14674:14695	1684290	1	True				
ANR	1685033	AssignmentExpression	* inst = GROUP_SHIFT_1		1684290	0		=			
ANR	1685034	UnaryOperationExpression	* inst		1684290	0					
ANR	1685035	UnaryOperator	*		1684290	0					
ANR	1685036	Identifier	inst		1684290	1					
ANR	1685037	Identifier	GROUP_SHIFT_1		1684290	1					
ANR	1685038	ElseStatement	else		1684290	0					
ANR	1685039	ExpressionStatement	* inst = GROUP_SHIFT_N	491:4:14709:14730	1684290	0	True				
ANR	1685040	AssignmentExpression	* inst = GROUP_SHIFT_N		1684290	0		=			
ANR	1685041	UnaryOperationExpression	* inst		1684290	0					
ANR	1685042	UnaryOperator	*		1684290	0					
ANR	1685043	Identifier	inst		1684290	1					
ANR	1685044	Identifier	GROUP_SHIFT_N		1684290	1					
ANR	1685045	ElseStatement	else		1684290	0					
ANR	1685046	ExpressionStatement	* inst = GROUP_SHIFT_CL	493:3:14744:14766	1684290	0	True				
ANR	1685047	AssignmentExpression	* inst = GROUP_SHIFT_CL		1684290	0		=			
ANR	1685048	UnaryOperationExpression	* inst		1684290	0					
ANR	1685049	UnaryOperator	*		1684290	0					
ANR	1685050	Identifier	inst		1684290	1					
ANR	1685051	Identifier	GROUP_SHIFT_CL		1684290	1					
ANR	1685052	ExpressionStatement	* buf_ptr = 0	494:2:14770:14782	1684290	1	True				
ANR	1685053	AssignmentExpression	* buf_ptr = 0		1684290	0		=			
ANR	1685054	UnaryOperationExpression	* buf_ptr		1684290	0					
ANR	1685055	UnaryOperator	*		1684290	0					
ANR	1685056	Identifier	buf_ptr		1684290	1					
ANR	1685057	PrimaryExpression	0		1684290	1					
ANR	1685058	IfStatement	if ( ! ( b & SLJIT_MEM ) )		1684290	29					
ANR	1685059	Condition	! ( b & SLJIT_MEM )	497:5:14793:14808	1684290	0	True				
ANR	1685060	UnaryOperationExpression	! ( b & SLJIT_MEM )		1684290	0					
ANR	1685061	UnaryOperator	!		1684290	0					
ANR	1685062	BitAndExpression	b & SLJIT_MEM		1684290	1		&			
ANR	1685063	Identifier	b		1684290	0					
ANR	1685064	Identifier	SLJIT_MEM		1684290	1					
ANR	1685065	ExpressionStatement	* buf_ptr ++ |= MOD_REG + ( ( ! ( flags & EX86_SSE2_OP2 ) ) ? reg_lmap [ b ] : b )	498:2:14813:14883	1684290	1	True				
ANR	1685066	AssignmentExpression	* buf_ptr ++ |= MOD_REG + ( ( ! ( flags & EX86_SSE2_OP2 ) ) ? reg_lmap [ b ] : b )		1684290	0		|=			
ANR	1685067	UnaryOperationExpression	* buf_ptr ++		1684290	0					
ANR	1685068	UnaryOperator	*		1684290	0					
ANR	1685069	PostIncDecOperationExpression	buf_ptr ++		1684290	1					
ANR	1685070	Identifier	buf_ptr		1684290	0					
ANR	1685071	IncDec	++		1684290	1					
ANR	1685072	AdditiveExpression	MOD_REG + ( ( ! ( flags & EX86_SSE2_OP2 ) ) ? reg_lmap [ b ] : b )		1684290	1		+			
ANR	1685073	Identifier	MOD_REG		1684290	0					
ANR	1685074	ConditionalExpression	( ! ( flags & EX86_SSE2_OP2 ) ) ? reg_lmap [ b ] : b		1684290	1					
ANR	1685075	Condition	! ( flags & EX86_SSE2_OP2 )		1684290	0					
ANR	1685076	UnaryOperationExpression	! ( flags & EX86_SSE2_OP2 )		1684290	0					
ANR	1685077	UnaryOperator	!		1684290	0					
ANR	1685078	BitAndExpression	flags & EX86_SSE2_OP2		1684290	1		&			
ANR	1685079	Identifier	flags		1684290	0					
ANR	1685080	Identifier	EX86_SSE2_OP2		1684290	1					
ANR	1685081	ArrayIndexing	reg_lmap [ b ]		1684290	1					
ANR	1685082	Identifier	reg_lmap		1684290	0					
ANR	1685083	Identifier	b		1684290	1					
ANR	1685084	Identifier	b		1684290	2					
ANR	1685085	ElseStatement	else		1684290	0					
ANR	1685086	IfStatement	if ( ( b & REG_MASK ) != SLJIT_UNUSED )		1684290	0					
ANR	1685087	Condition	( b & REG_MASK ) != SLJIT_UNUSED	499:10:14895:14924	1684290	0	True				
ANR	1685088	EqualityExpression	( b & REG_MASK ) != SLJIT_UNUSED		1684290	0		!=			
ANR	1685089	BitAndExpression	b & REG_MASK		1684290	0		&			
ANR	1685090	Identifier	b		1684290	0					
ANR	1685091	Identifier	REG_MASK		1684290	1					
ANR	1685092	Identifier	SLJIT_UNUSED		1684290	1					
ANR	1685093	CompoundStatement		149:42:4055:4055	1684290	1					
ANR	1685094	IfStatement	if ( ( b & OFFS_REG_MASK ) == SLJIT_UNUSED || ( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP ) )		1684290	0					
ANR	1685095	Condition	( b & OFFS_REG_MASK ) == SLJIT_UNUSED || ( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP )	500:6:14935:15017	1684290	0	True				
ANR	1685096	OrExpression	( b & OFFS_REG_MASK ) == SLJIT_UNUSED || ( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP )		1684290	0		||			
ANR	1685097	EqualityExpression	( b & OFFS_REG_MASK ) == SLJIT_UNUSED		1684290	0		==			
ANR	1685098	BitAndExpression	b & OFFS_REG_MASK		1684290	0		&			
ANR	1685099	Identifier	b		1684290	0					
ANR	1685100	Identifier	OFFS_REG_MASK		1684290	1					
ANR	1685101	Identifier	SLJIT_UNUSED		1684290	1					
ANR	1685102	EqualityExpression	( b & OFFS_REG_MASK ) == TO_OFFS_REG ( SLJIT_SP )		1684290	1		==			
ANR	1685103	BitAndExpression	b & OFFS_REG_MASK		1684290	0		&			
ANR	1685104	Identifier	b		1684290	0					
ANR	1685105	Identifier	OFFS_REG_MASK		1684290	1					
ANR	1685106	CallExpression	TO_OFFS_REG ( SLJIT_SP )		1684290	1					
ANR	1685107	Callee	TO_OFFS_REG		1684290	0					
ANR	1685108	Identifier	TO_OFFS_REG		1684290	0					
ANR	1685109	ArgumentList	SLJIT_SP		1684290	1					
ANR	1685110	Argument	SLJIT_SP		1684290	0					
ANR	1685111	Identifier	SLJIT_SP		1684290	0					
ANR	1685112	CompoundStatement		150:91:4148:4148	1684290	1					
ANR	1685113	IfStatement	if ( immb != 0 || reg_lmap [ b & REG_MASK ] == 5 )		1684290	0					
ANR	1685114	Condition	immb != 0 || reg_lmap [ b & REG_MASK ] == 5	501:7:15029:15068	1684290	0	True				
ANR	1685115	OrExpression	immb != 0 || reg_lmap [ b & REG_MASK ] == 5		1684290	0		||			
ANR	1685116	EqualityExpression	immb != 0		1684290	0		!=			
ANR	1685117	Identifier	immb		1684290	0					
ANR	1685118	PrimaryExpression	0		1684290	1					
ANR	1685119	EqualityExpression	reg_lmap [ b & REG_MASK ] == 5		1684290	1		==			
ANR	1685120	ArrayIndexing	reg_lmap [ b & REG_MASK ]		1684290	0					
ANR	1685121	Identifier	reg_lmap		1684290	0					
ANR	1685122	BitAndExpression	b & REG_MASK		1684290	1		&			
ANR	1685123	Identifier	b		1684290	0					
ANR	1685124	Identifier	REG_MASK		1684290	1					
ANR	1685125	PrimaryExpression	5		1684290	1					
ANR	1685126	CompoundStatement		151:49:4199:4199	1684290	1					
ANR	1685127	IfStatement	if ( immb <= 127 && immb >= - 128 )		1684290	0					
ANR	1685128	Condition	immb <= 127 && immb >= - 128	502:8:15081:15107	1684290	0	True				
ANR	1685129	AndExpression	immb <= 127 && immb >= - 128		1684290	0		&&			
ANR	1685130	RelationalExpression	immb <= 127		1684290	0		<=			
ANR	1685131	Identifier	immb		1684290	0					
ANR	1685132	PrimaryExpression	127		1684290	1					
ANR	1685133	RelationalExpression	immb >= - 128		1684290	1		>=			
ANR	1685134	Identifier	immb		1684290	0					
ANR	1685135	UnaryOperationExpression	- 128		1684290	1					
ANR	1685136	UnaryOperator	-		1684290	0					
ANR	1685137	PrimaryExpression	128		1684290	1					
ANR	1685138	ExpressionStatement	* buf_ptr |= 0x40	503:5:15115:15131	1684290	1	True				
ANR	1685139	AssignmentExpression	* buf_ptr |= 0x40		1684290	0		|=			
ANR	1685140	UnaryOperationExpression	* buf_ptr		1684290	0					
ANR	1685141	UnaryOperator	*		1684290	0					
ANR	1685142	Identifier	buf_ptr		1684290	1					
ANR	1685143	PrimaryExpression	0x40		1684290	1					
ANR	1685144	ElseStatement	else		1684290	0					
ANR	1685145	ExpressionStatement	* buf_ptr |= 0x80	505:5:15147:15163	1684290	0	True				
ANR	1685146	AssignmentExpression	* buf_ptr |= 0x80		1684290	0		|=			
ANR	1685147	UnaryOperationExpression	* buf_ptr		1684290	0					
ANR	1685148	UnaryOperator	*		1684290	0					
ANR	1685149	Identifier	buf_ptr		1684290	1					
ANR	1685150	PrimaryExpression	0x80		1684290	1					
ANR	1685151	IfStatement	if ( ( b & OFFS_REG_MASK ) == SLJIT_UNUSED )		1684290	1					
ANR	1685152	Condition	( b & OFFS_REG_MASK ) == SLJIT_UNUSED	508:7:15178:15212	1684290	0	True				
ANR	1685153	EqualityExpression	( b & OFFS_REG_MASK ) == SLJIT_UNUSED		1684290	0		==			
ANR	1685154	BitAndExpression	b & OFFS_REG_MASK		1684290	0		&			
ANR	1685155	Identifier	b		1684290	0					
ANR	1685156	Identifier	OFFS_REG_MASK		1684290	1					
ANR	1685157	Identifier	SLJIT_UNUSED		1684290	1					
ANR	1685158	ExpressionStatement	* buf_ptr ++ |= reg_lmap [ b & REG_MASK ]	509:4:15219:15255	1684290	1	True				
ANR	1685159	AssignmentExpression	* buf_ptr ++ |= reg_lmap [ b & REG_MASK ]		1684290	0		|=			
ANR	1685160	UnaryOperationExpression	* buf_ptr ++		1684290	0					
ANR	1685161	UnaryOperator	*		1684290	0					
ANR	1685162	PostIncDecOperationExpression	buf_ptr ++		1684290	1					
ANR	1685163	Identifier	buf_ptr		1684290	0					
ANR	1685164	IncDec	++		1684290	1					
ANR	1685165	ArrayIndexing	reg_lmap [ b & REG_MASK ]		1684290	1					
ANR	1685166	Identifier	reg_lmap		1684290	0					
ANR	1685167	BitAndExpression	b & REG_MASK		1684290	1		&			
ANR	1685168	Identifier	b		1684290	0					
ANR	1685169	Identifier	REG_MASK		1684290	1					
ANR	1685170	ElseStatement	else		1684290	0					
ANR	1685171	CompoundStatement		160:8:4393:4393	1684290	0					
ANR	1685172	ExpressionStatement	* buf_ptr ++ |= 0x04	511:4:15271:15289	1684290	0	True				
ANR	1685173	AssignmentExpression	* buf_ptr ++ |= 0x04		1684290	0		|=			
ANR	1685174	UnaryOperationExpression	* buf_ptr ++		1684290	0					
ANR	1685175	UnaryOperator	*		1684290	0					
ANR	1685176	PostIncDecOperationExpression	buf_ptr ++		1684290	1					
ANR	1685177	Identifier	buf_ptr		1684290	0					
ANR	1685178	IncDec	++		1684290	1					
ANR	1685179	PrimaryExpression	0x04		1684290	1					
ANR	1685180	ExpressionStatement	* buf_ptr ++ = reg_lmap [ b & REG_MASK ] | ( reg_lmap [ OFFS_REG ( b ) ] << 3 )	512:4:15295:15361	1684290	1	True				
ANR	1685181	AssignmentExpression	* buf_ptr ++ = reg_lmap [ b & REG_MASK ] | ( reg_lmap [ OFFS_REG ( b ) ] << 3 )		1684290	0		=			
ANR	1685182	UnaryOperationExpression	* buf_ptr ++		1684290	0					
ANR	1685183	UnaryOperator	*		1684290	0					
ANR	1685184	PostIncDecOperationExpression	buf_ptr ++		1684290	1					
ANR	1685185	Identifier	buf_ptr		1684290	0					
ANR	1685186	IncDec	++		1684290	1					
ANR	1685187	InclusiveOrExpression	reg_lmap [ b & REG_MASK ] | ( reg_lmap [ OFFS_REG ( b ) ] << 3 )		1684290	1		|			
ANR	1685188	ArrayIndexing	reg_lmap [ b & REG_MASK ]		1684290	0					
ANR	1685189	Identifier	reg_lmap		1684290	0					
ANR	1685190	BitAndExpression	b & REG_MASK		1684290	1		&			
ANR	1685191	Identifier	b		1684290	0					
ANR	1685192	Identifier	REG_MASK		1684290	1					
ANR	1685193	ShiftExpression	reg_lmap [ OFFS_REG ( b ) ] << 3		1684290	1		<<			
ANR	1685194	ArrayIndexing	reg_lmap [ OFFS_REG ( b ) ]		1684290	0					
ANR	1685195	Identifier	reg_lmap		1684290	0					
ANR	1685196	CallExpression	OFFS_REG ( b )		1684290	1					
ANR	1685197	Callee	OFFS_REG		1684290	0					
ANR	1685198	Identifier	OFFS_REG		1684290	0					
ANR	1685199	ArgumentList	b		1684290	1					
ANR	1685200	Argument	b		1684290	0					
ANR	1685201	Identifier	b		1684290	0					
ANR	1685202	PrimaryExpression	3		1684290	1					
ANR	1685203	IfStatement	if ( immb != 0 || reg_lmap [ b & REG_MASK ] == 5 )		1684290	2					
ANR	1685204	Condition	immb != 0 || reg_lmap [ b & REG_MASK ] == 5	515:7:15376:15415	1684290	0	True				
ANR	1685205	OrExpression	immb != 0 || reg_lmap [ b & REG_MASK ] == 5		1684290	0		||			
ANR	1685206	EqualityExpression	immb != 0		1684290	0		!=			
ANR	1685207	Identifier	immb		1684290	0					
ANR	1685208	PrimaryExpression	0		1684290	1					
ANR	1685209	EqualityExpression	reg_lmap [ b & REG_MASK ] == 5		1684290	1		==			
ANR	1685210	ArrayIndexing	reg_lmap [ b & REG_MASK ]		1684290	0					
ANR	1685211	Identifier	reg_lmap		1684290	0					
ANR	1685212	BitAndExpression	b & REG_MASK		1684290	1		&			
ANR	1685213	Identifier	b		1684290	0					
ANR	1685214	Identifier	REG_MASK		1684290	1					
ANR	1685215	PrimaryExpression	5		1684290	1					
ANR	1685216	CompoundStatement		165:49:4546:4546	1684290	1					
ANR	1685217	IfStatement	if ( immb <= 127 && immb >= - 128 )		1684290	0					
ANR	1685218	Condition	immb <= 127 && immb >= - 128	516:8:15428:15454	1684290	0	True				
ANR	1685219	AndExpression	immb <= 127 && immb >= - 128		1684290	0		&&			
ANR	1685220	RelationalExpression	immb <= 127		1684290	0		<=			
ANR	1685221	Identifier	immb		1684290	0					
ANR	1685222	PrimaryExpression	127		1684290	1					
ANR	1685223	RelationalExpression	immb >= - 128		1684290	1		>=			
ANR	1685224	Identifier	immb		1684290	0					
ANR	1685225	UnaryOperationExpression	- 128		1684290	1					
ANR	1685226	UnaryOperator	-		1684290	0					
ANR	1685227	PrimaryExpression	128		1684290	1					
ANR	1685228	ExpressionStatement	* buf_ptr ++ = immb	517:5:15462:15479	1684290	1	True				
ANR	1685229	AssignmentExpression	* buf_ptr ++ = immb		1684290	0		=			
ANR	1685230	UnaryOperationExpression	* buf_ptr ++		1684290	0					
ANR	1685231	UnaryOperator	*		1684290	0					
ANR	1685232	PostIncDecOperationExpression	buf_ptr ++		1684290	1					
ANR	1685233	Identifier	buf_ptr		1684290	0					
ANR	1685234	IncDec	++		1684290	1					
ANR	1685235	Identifier	immb		1684290	1					
ANR	1685236	ElseStatement	else		1684290	0					
ANR	1685237	CompoundStatement		168:9:4644:4644	1684290	0					
ANR	1685238	ExpressionStatement	* ( sljit_si * ) buf_ptr = immb	519:5:15523:15549	1684290	0	True				
ANR	1685239	AssignmentExpression	* ( sljit_si * ) buf_ptr = immb		1684290	0		=			
ANR	1685240	UnaryOperationExpression	* ( sljit_si * ) buf_ptr		1684290	0					
ANR	1685241	UnaryOperator	*		1684290	0					
ANR	1685242	CastExpression	( sljit_si * ) buf_ptr		1684290	1					
ANR	1685243	CastTarget	sljit_si *		1684290	0					
ANR	1685244	Identifier	buf_ptr		1684290	1					
ANR	1685245	Identifier	immb		1684290	1					
ANR	1685246	ExpressionStatement	buf_ptr += sizeof ( sljit_si )	520:5:15583:15610	1684290	1	True				
ANR	1685247	AssignmentExpression	buf_ptr += sizeof ( sljit_si )		1684290	0		+=			
ANR	1685248	Identifier	buf_ptr		1684290	0					
ANR	1685249	SizeofExpression	sizeof ( sljit_si )		1684290	1					
ANR	1685250	Sizeof	sizeof		1684290	0					
ANR	1685251	SizeofOperand	sljit_si		1684290	1					
ANR	1685252	ElseStatement	else		1684290	0					
ANR	1685253	CompoundStatement		174:7:4762:4762	1684290	0					
ANR	1685254	IfStatement	if ( reg_lmap [ b & REG_MASK ] == 5 )		1684290	0					
ANR	1685255	Condition	reg_lmap [ b & REG_MASK ] == 5	525:7:15643:15669	1684290	0	True				
ANR	1685256	EqualityExpression	reg_lmap [ b & REG_MASK ] == 5		1684290	0		==			
ANR	1685257	ArrayIndexing	reg_lmap [ b & REG_MASK ]		1684290	0					
ANR	1685258	Identifier	reg_lmap		1684290	0					
ANR	1685259	BitAndExpression	b & REG_MASK		1684290	1		&			
ANR	1685260	Identifier	b		1684290	0					
ANR	1685261	Identifier	REG_MASK		1684290	1					
ANR	1685262	PrimaryExpression	5		1684290	1					
ANR	1685263	ExpressionStatement	* buf_ptr |= 0x40	526:4:15676:15692	1684290	1	True				
ANR	1685264	AssignmentExpression	* buf_ptr |= 0x40		1684290	0		|=			
ANR	1685265	UnaryOperationExpression	* buf_ptr		1684290	0					
ANR	1685266	UnaryOperator	*		1684290	0					
ANR	1685267	Identifier	buf_ptr		1684290	1					
ANR	1685268	PrimaryExpression	0x40		1684290	1					
ANR	1685269	ExpressionStatement	* buf_ptr ++ |= 0x04	527:3:15697:15715	1684290	1	True				
ANR	1685270	AssignmentExpression	* buf_ptr ++ |= 0x04		1684290	0		|=			
ANR	1685271	UnaryOperationExpression	* buf_ptr ++		1684290	0					
ANR	1685272	UnaryOperator	*		1684290	0					
ANR	1685273	PostIncDecOperationExpression	buf_ptr ++		1684290	1					
ANR	1685274	Identifier	buf_ptr		1684290	0					
ANR	1685275	IncDec	++		1684290	1					
ANR	1685276	PrimaryExpression	0x04		1684290	1					
ANR	1685277	ExpressionStatement	* buf_ptr ++ = reg_lmap [ b & REG_MASK ] | ( reg_lmap [ OFFS_REG ( b ) ] << 3 ) | ( immb << 6 )	528:3:15720:15800	1684290	2	True				
ANR	1685278	AssignmentExpression	* buf_ptr ++ = reg_lmap [ b & REG_MASK ] | ( reg_lmap [ OFFS_REG ( b ) ] << 3 ) | ( immb << 6 )		1684290	0		=			
ANR	1685279	UnaryOperationExpression	* buf_ptr ++		1684290	0					
ANR	1685280	UnaryOperator	*		1684290	0					
ANR	1685281	PostIncDecOperationExpression	buf_ptr ++		1684290	1					
ANR	1685282	Identifier	buf_ptr		1684290	0					
ANR	1685283	IncDec	++		1684290	1					
ANR	1685284	InclusiveOrExpression	reg_lmap [ b & REG_MASK ] | ( reg_lmap [ OFFS_REG ( b ) ] << 3 ) | ( immb << 6 )		1684290	1		|			
ANR	1685285	ArrayIndexing	reg_lmap [ b & REG_MASK ]		1684290	0					
ANR	1685286	Identifier	reg_lmap		1684290	0					
ANR	1685287	BitAndExpression	b & REG_MASK		1684290	1		&			
ANR	1685288	Identifier	b		1684290	0					
ANR	1685289	Identifier	REG_MASK		1684290	1					
ANR	1685290	InclusiveOrExpression	( reg_lmap [ OFFS_REG ( b ) ] << 3 ) | ( immb << 6 )		1684290	1		|			
ANR	1685291	ShiftExpression	reg_lmap [ OFFS_REG ( b ) ] << 3		1684290	0		<<			
ANR	1685292	ArrayIndexing	reg_lmap [ OFFS_REG ( b ) ]		1684290	0					
ANR	1685293	Identifier	reg_lmap		1684290	0					
ANR	1685294	CallExpression	OFFS_REG ( b )		1684290	1					
ANR	1685295	Callee	OFFS_REG		1684290	0					
ANR	1685296	Identifier	OFFS_REG		1684290	0					
ANR	1685297	ArgumentList	b		1684290	1					
ANR	1685298	Argument	b		1684290	0					
ANR	1685299	Identifier	b		1684290	0					
ANR	1685300	PrimaryExpression	3		1684290	1					
ANR	1685301	ShiftExpression	immb << 6		1684290	1		<<			
ANR	1685302	Identifier	immb		1684290	0					
ANR	1685303	PrimaryExpression	6		1684290	1					
ANR	1685304	IfStatement	if ( reg_lmap [ b & REG_MASK ] == 5 )		1684290	3					
ANR	1685305	Condition	reg_lmap [ b & REG_MASK ] == 5	529:7:15809:15835	1684290	0	True				
ANR	1685306	EqualityExpression	reg_lmap [ b & REG_MASK ] == 5		1684290	0		==			
ANR	1685307	ArrayIndexing	reg_lmap [ b & REG_MASK ]		1684290	0					
ANR	1685308	Identifier	reg_lmap		1684290	0					
ANR	1685309	BitAndExpression	b & REG_MASK		1684290	1		&			
ANR	1685310	Identifier	b		1684290	0					
ANR	1685311	Identifier	REG_MASK		1684290	1					
ANR	1685312	PrimaryExpression	5		1684290	1					
ANR	1685313	ExpressionStatement	* buf_ptr ++ = 0	530:4:15842:15856	1684290	1	True				
ANR	1685314	AssignmentExpression	* buf_ptr ++ = 0		1684290	0		=			
ANR	1685315	UnaryOperationExpression	* buf_ptr ++		1684290	0					
ANR	1685316	UnaryOperator	*		1684290	0					
ANR	1685317	PostIncDecOperationExpression	buf_ptr ++		1684290	1					
ANR	1685318	Identifier	buf_ptr		1684290	0					
ANR	1685319	IncDec	++		1684290	1					
ANR	1685320	PrimaryExpression	0		1684290	1					
ANR	1685321	ElseStatement	else		1684290	0					
ANR	1685322	CompoundStatement		183:6:4999:4999	1684290	0					
ANR	1685323	ExpressionStatement	* buf_ptr ++ |= 0x04	534:2:15875:15893	1684290	0	True				
ANR	1685324	AssignmentExpression	* buf_ptr ++ |= 0x04		1684290	0		|=			
ANR	1685325	UnaryOperationExpression	* buf_ptr ++		1684290	0					
ANR	1685326	UnaryOperator	*		1684290	0					
ANR	1685327	PostIncDecOperationExpression	buf_ptr ++		1684290	1					
ANR	1685328	Identifier	buf_ptr		1684290	0					
ANR	1685329	IncDec	++		1684290	1					
ANR	1685330	PrimaryExpression	0x04		1684290	1					
ANR	1685331	ExpressionStatement	* buf_ptr ++ = 0x25	535:2:15897:15914	1684290	1	True				
ANR	1685332	AssignmentExpression	* buf_ptr ++ = 0x25		1684290	0		=			
ANR	1685333	UnaryOperationExpression	* buf_ptr ++		1684290	0					
ANR	1685334	UnaryOperator	*		1684290	0					
ANR	1685335	PostIncDecOperationExpression	buf_ptr ++		1684290	1					
ANR	1685336	Identifier	buf_ptr		1684290	0					
ANR	1685337	IncDec	++		1684290	1					
ANR	1685338	PrimaryExpression	0x25		1684290	1					
ANR	1685339	ExpressionStatement	* ( sljit_si * ) buf_ptr = immb	536:2:15918:15944	1684290	2	True				
ANR	1685340	AssignmentExpression	* ( sljit_si * ) buf_ptr = immb		1684290	0		=			
ANR	1685341	UnaryOperationExpression	* ( sljit_si * ) buf_ptr		1684290	0					
ANR	1685342	UnaryOperator	*		1684290	0					
ANR	1685343	CastExpression	( sljit_si * ) buf_ptr		1684290	1					
ANR	1685344	CastTarget	sljit_si *		1684290	0					
ANR	1685345	Identifier	buf_ptr		1684290	1					
ANR	1685346	Identifier	immb		1684290	1					
ANR	1685347	ExpressionStatement	buf_ptr += sizeof ( sljit_si )	537:2:15975:16002	1684290	3	True				
ANR	1685348	AssignmentExpression	buf_ptr += sizeof ( sljit_si )		1684290	0		+=			
ANR	1685349	Identifier	buf_ptr		1684290	0					
ANR	1685350	SizeofExpression	sizeof ( sljit_si )		1684290	1					
ANR	1685351	Sizeof	sizeof		1684290	0					
ANR	1685352	SizeofOperand	sljit_si		1684290	1					
ANR	1685353	IfStatement	if ( a & SLJIT_IMM )		1684290	30					
ANR	1685354	Condition	a & SLJIT_IMM	540:5:16013:16025	1684290	0	True				
ANR	1685355	BitAndExpression	a & SLJIT_IMM		1684290	0		&			
ANR	1685356	Identifier	a		1684290	0					
ANR	1685357	Identifier	SLJIT_IMM		1684290	1					
ANR	1685358	CompoundStatement		190:20:5156:5156	1684290	1					
ANR	1685359	IfStatement	if ( flags & EX86_BYTE_ARG )		1684290	0					
ANR	1685360	Condition	flags & EX86_BYTE_ARG	541:6:16036:16056	1684290	0	True				
ANR	1685361	BitAndExpression	flags & EX86_BYTE_ARG		1684290	0		&			
ANR	1685362	Identifier	flags		1684290	0					
ANR	1685363	Identifier	EX86_BYTE_ARG		1684290	1					
ANR	1685364	ExpressionStatement	* buf_ptr = imma	542:3:16062:16077	1684290	1	True				
ANR	1685365	AssignmentExpression	* buf_ptr = imma		1684290	0		=			
ANR	1685366	UnaryOperationExpression	* buf_ptr		1684290	0					
ANR	1685367	UnaryOperator	*		1684290	0					
ANR	1685368	Identifier	buf_ptr		1684290	1					
ANR	1685369	Identifier	imma		1684290	1					
ANR	1685370	ElseStatement	else		1684290	0					
ANR	1685371	IfStatement	if ( flags & EX86_HALF_ARG )		1684290	0					
ANR	1685372	Condition	flags & EX86_HALF_ARG	543:11:16090:16110	1684290	0	True				
ANR	1685373	BitAndExpression	flags & EX86_HALF_ARG		1684290	0		&			
ANR	1685374	Identifier	flags		1684290	0					
ANR	1685375	Identifier	EX86_HALF_ARG		1684290	1					
ANR	1685376	ExpressionStatement	* ( short * ) buf_ptr = imma	544:3:16116:16139	1684290	1	True				
ANR	1685377	AssignmentExpression	* ( short * ) buf_ptr = imma		1684290	0		=			
ANR	1685378	UnaryOperationExpression	* ( short * ) buf_ptr		1684290	0					
ANR	1685379	UnaryOperator	*		1684290	0					
ANR	1685380	CastExpression	( short * ) buf_ptr		1684290	1					
ANR	1685381	CastTarget	short *		1684290	0					
ANR	1685382	Identifier	buf_ptr		1684290	1					
ANR	1685383	Identifier	imma		1684290	1					
ANR	1685384	ElseStatement	else		1684290	0					
ANR	1685385	IfStatement	if ( ! ( flags & EX86_SHIFT_INS ) )		1684290	0					
ANR	1685386	Condition	! ( flags & EX86_SHIFT_INS )	545:11:16152:16176	1684290	0	True				
ANR	1685387	UnaryOperationExpression	! ( flags & EX86_SHIFT_INS )		1684290	0					
ANR	1685388	UnaryOperator	!		1684290	0					
ANR	1685389	BitAndExpression	flags & EX86_SHIFT_INS		1684290	1		&			
ANR	1685390	Identifier	flags		1684290	0					
ANR	1685391	Identifier	EX86_SHIFT_INS		1684290	1					
ANR	1685392	ExpressionStatement	* ( sljit_si * ) buf_ptr = imma	546:3:16182:16208	1684290	1	True				
ANR	1685393	AssignmentExpression	* ( sljit_si * ) buf_ptr = imma		1684290	0		=			
ANR	1685394	UnaryOperationExpression	* ( sljit_si * ) buf_ptr		1684290	0					
ANR	1685395	UnaryOperator	*		1684290	0					
ANR	1685396	CastExpression	( sljit_si * ) buf_ptr		1684290	1					
ANR	1685397	CastTarget	sljit_si *		1684290	0					
ANR	1685398	Identifier	buf_ptr		1684290	1					
ANR	1685399	Identifier	imma		1684290	1					
ANR	1685400	ReturnStatement	return ! ( flags & EX86_SHIFT_INS ) ? inst : ( inst + 1 ) ;	549:1:16215:16267	1684290	31	True				
ANR	1685401	ConditionalExpression	! ( flags & EX86_SHIFT_INS ) ? inst : ( inst + 1 )		1684290	0					
ANR	1685402	Condition	! ( flags & EX86_SHIFT_INS )		1684290	0					
ANR	1685403	UnaryOperationExpression	! ( flags & EX86_SHIFT_INS )		1684290	0					
ANR	1685404	UnaryOperator	!		1684290	0					
ANR	1685405	BitAndExpression	flags & EX86_SHIFT_INS		1684290	1		&			
ANR	1685406	Identifier	flags		1684290	0					
ANR	1685407	Identifier	EX86_SHIFT_INS		1684290	1					
ANR	1685408	Identifier	inst		1684290	1					
ANR	1685409	AdditiveExpression	inst + 1		1684290	2		+			
ANR	1685410	Identifier	inst		1684290	0					
ANR	1685411	PrimaryExpression	1		1684290	1					
ANR	1685412	ReturnType	static sljit_ub *		1684290	1					
ANR	1685413	Identifier	emit_x86_instruction		1684290	2					
ANR	1685414	ParameterList	"struct sljit_compiler * compiler , sljit_si size , sljit_si a , sljit_sw imma , sljit_si b , sljit_sw immb"		1684290	3					
ANR	1685415	Parameter	struct sljit_compiler * compiler	346:38:10681:10711	1684290	0	True				
ANR	1685416	ParameterType	struct sljit_compiler *		1684290	0					
ANR	1685417	Identifier	compiler		1684290	1					
ANR	1685418	Parameter	sljit_si size	346:71:10714:10726	1684290	1	True				
ANR	1685419	ParameterType	sljit_si		1684290	0					
ANR	1685420	Identifier	size		1684290	1					
ANR	1685421	Parameter	sljit_si a	348:1:10772:10781	1684290	2	True				
ANR	1685422	ParameterType	sljit_si		1684290	0					
ANR	1685423	Identifier	a		1684290	1					
ANR	1685424	Parameter	sljit_sw imma	348:13:10784:10796	1684290	3	True				
ANR	1685425	ParameterType	sljit_sw		1684290	0					
ANR	1685426	Identifier	imma		1684290	1					
ANR	1685427	Parameter	sljit_si b	350:1:10844:10853	1684290	4	True				
ANR	1685428	ParameterType	sljit_si		1684290	0					
ANR	1685429	Identifier	b		1684290	1					
ANR	1685430	Parameter	sljit_sw immb	350:13:10856:10868	1684290	5	True				
ANR	1685431	ParameterType	sljit_sw		1684290	0					
ANR	1685432	Identifier	immb		1684290	1					
ANR	1685433	CFGEntryNode	ENTRY		1684290		True				
ANR	1685434	CFGExitNode	EXIT		1684290		True				
ANR	1685435	Symbol	emit_load_imm64		1684290						
ANR	1685436	Symbol	TMP_REG3		1684290						
ANR	1685437	Symbol	* ( sljit_si * ) buf_ptr		1684290						
ANR	1685438	Symbol	REX		1684290						
ANR	1685439	Symbol	EX86_NO_REXW		1684290						
ANR	1685440	Symbol	SLJIT_MEM		1684290						
ANR	1685441	Symbol	immb		1684290						
ANR	1685442	Symbol	* inst ++		1684290						
ANR	1685443	Symbol	imma		1684290						
ANR	1685444	Symbol	reg_map		1684290						
ANR	1685445	Symbol	* compiler		1684290						
ANR	1685446	Symbol	SLJIT_IMM		1684290						
ANR	1685447	Symbol	* reg_lmap		1684290						
ANR	1685448	Symbol	GROUP_SHIFT_N		1684290						
ANR	1685449	Symbol	NULL		1684290						
ANR	1685450	Symbol	rex		1684290						
ANR	1685451	Symbol	EX86_PREF_F2		1684290						
ANR	1685452	Symbol	EX86_PREF_F3		1684290						
ANR	1685453	Symbol	OFFS_REG_MASK		1684290						
ANR	1685454	Symbol	* buf_ptr ++		1684290						
ANR	1685455	Symbol	* reg_map		1684290						
ANR	1685456	Symbol	REX_B		1684290						
ANR	1685457	Symbol	GROUP_SHIFT_CL		1684290						
ANR	1685458	Symbol	EX86_SSE2_OP2		1684290						
ANR	1685459	Symbol	buf_ptr		1684290						
ANR	1685460	Symbol	EX86_SSE2_OP1		1684290						
ANR	1685461	Symbol	size		1684290						
ANR	1685462	Symbol	EX86_SHIFT_INS		1684290						
ANR	1685463	Symbol	GROUP_BINARY_81		1684290						
ANR	1685464	Symbol	GROUP_BINARY_83		1684290						
ANR	1685465	Symbol	REX_W		1684290						
ANR	1685466	Symbol	REX_X		1684290						
ANR	1685467	Symbol	OFFS_REG		1684290						
ANR	1685468	Symbol	REX_R		1684290						
ANR	1685469	Symbol	EX86_REX		1684290						
ANR	1685470	Symbol	EX86_BYTE_ARG		1684290						
ANR	1685471	Symbol	* ( short * ) buf_ptr		1684290						
ANR	1685472	Symbol	* REG_MASK		1684290						
ANR	1685473	Symbol	EX86_SSE2		1684290						
ANR	1685474	Symbol	flags		1684290						
ANR	1685475	Symbol	SLJIT_SP		1684290						
ANR	1685476	Symbol	SLJIT_PREF_SHIFT_REG		1684290						
ANR	1685477	Symbol	EX86_PREF_66		1684290						
ANR	1685478	Symbol	~0xf		1684290						
ANR	1685479	Symbol	IS_HALFWORD		1684290						
ANR	1685480	Symbol	EX86_BIN_INS		1684290						
ANR	1685481	Symbol	compiler		1684290						
ANR	1685482	Symbol	* buf_ptr		1684290						
ANR	1685483	Symbol	a		1684290						
ANR	1685484	Symbol	TO_OFFS_REG		1684290						
ANR	1685485	Symbol	b		1684290						
ANR	1685486	Symbol	REG_MASK		1684290						
ANR	1685487	Symbol	* inst		1684290						
ANR	1685488	Symbol	NOT_HALFWORD		1684290						
ANR	1685489	Symbol	* a		1684290						
ANR	1685490	Symbol	* b		1684290						
ANR	1685491	Symbol	MOD_REG		1684290						
ANR	1685492	Symbol	reg_lmap		1684290						
ANR	1685493	Symbol	* OFFS_REG		1684290						
ANR	1685494	Symbol	EX86_HALF_ARG		1684290						
ANR	1685495	Symbol	SLJIT_UNUSED		1684290						
ANR	1685496	Symbol	inst		1684290						
ANR	1685497	Symbol	ensure_buf		1684290						
ANR	1685498	Symbol	inst_size		1684290						
ANR	1685499	Symbol	compiler -> mode32		1684290						
ANR	1685500	Symbol	GROUP_SHIFT_1		1684290						
ANR	1685501	Function	call_with_args	556:0:16501:17649							
ANR	1685502	FunctionDef	"call_with_args (struct sljit_compiler * compiler , sljit_si type)"		1685501	0					
ANR	1685503	CompoundStatement		557:0:16593:17649	1685501	0					
ANR	1685504	IdentifierDeclStatement	sljit_ub * inst ;	558:1:16596:16610	1685501	0	True				
ANR	1685505	IdentifierDecl	* inst		1685501	0					
ANR	1685506	IdentifierDeclType	sljit_ub *		1685501	0					
ANR	1685507	Identifier	inst		1685501	1					
ANR	1685508	ExpressionStatement	"SLJIT_COMPILE_ASSERT ( reg_map [ SLJIT_R1 ] == 6 && reg_map [ SLJIT_R0 ] < 8 && reg_map [ SLJIT_R2 ] < 8 , args_registers )"	561:1:16629:16739	1685501	1	True				
ANR	1685509	CallExpression	"SLJIT_COMPILE_ASSERT ( reg_map [ SLJIT_R1 ] == 6 && reg_map [ SLJIT_R0 ] < 8 && reg_map [ SLJIT_R2 ] < 8 , args_registers )"		1685501	0					
ANR	1685510	Callee	SLJIT_COMPILE_ASSERT		1685501	0					
ANR	1685511	Identifier	SLJIT_COMPILE_ASSERT		1685501	0					
ANR	1685512	ArgumentList	reg_map [ SLJIT_R1 ] == 6 && reg_map [ SLJIT_R0 ] < 8 && reg_map [ SLJIT_R2 ] < 8		1685501	1					
ANR	1685513	Argument	reg_map [ SLJIT_R1 ] == 6 && reg_map [ SLJIT_R0 ] < 8 && reg_map [ SLJIT_R2 ] < 8		1685501	0					
ANR	1685514	AndExpression	reg_map [ SLJIT_R1 ] == 6 && reg_map [ SLJIT_R0 ] < 8 && reg_map [ SLJIT_R2 ] < 8		1685501	0		&&			
ANR	1685515	EqualityExpression	reg_map [ SLJIT_R1 ] == 6		1685501	0		==			
ANR	1685516	ArrayIndexing	reg_map [ SLJIT_R1 ]		1685501	0					
ANR	1685517	Identifier	reg_map		1685501	0					
ANR	1685518	Identifier	SLJIT_R1		1685501	1					
ANR	1685519	PrimaryExpression	6		1685501	1					
ANR	1685520	AndExpression	reg_map [ SLJIT_R0 ] < 8 && reg_map [ SLJIT_R2 ] < 8		1685501	1		&&			
ANR	1685521	RelationalExpression	reg_map [ SLJIT_R0 ] < 8		1685501	0		<			
ANR	1685522	ArrayIndexing	reg_map [ SLJIT_R0 ]		1685501	0					
ANR	1685523	Identifier	reg_map		1685501	0					
ANR	1685524	Identifier	SLJIT_R0		1685501	1					
ANR	1685525	PrimaryExpression	8		1685501	1					
ANR	1685526	RelationalExpression	reg_map [ SLJIT_R2 ] < 8		1685501	1		<			
ANR	1685527	ArrayIndexing	reg_map [ SLJIT_R2 ]		1685501	0					
ANR	1685528	Identifier	reg_map		1685501	0					
ANR	1685529	Identifier	SLJIT_R2		1685501	1					
ANR	1685530	PrimaryExpression	8		1685501	1					
ANR	1685531	Argument	args_registers		1685501	1					
ANR	1685532	Identifier	args_registers		1685501	0					
ANR	1685533	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + ( ( type < SLJIT_CALL3 ) ? 3 : 6 ) )"	563:1:16743:16817	1685501	2	True				
ANR	1685534	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + ( ( type < SLJIT_CALL3 ) ? 3 : 6 ) )"		1685501	0		=			
ANR	1685535	Identifier	inst		1685501	0					
ANR	1685536	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + ( ( type < SLJIT_CALL3 ) ? 3 : 6 ) )"		1685501	1					
ANR	1685537	CastTarget	sljit_ub *		1685501	0					
ANR	1685538	CallExpression	"ensure_buf ( compiler , 1 + ( ( type < SLJIT_CALL3 ) ? 3 : 6 ) )"		1685501	1					
ANR	1685539	Callee	ensure_buf		1685501	0					
ANR	1685540	Identifier	ensure_buf		1685501	0					
ANR	1685541	ArgumentList	compiler		1685501	1					
ANR	1685542	Argument	compiler		1685501	0					
ANR	1685543	Identifier	compiler		1685501	0					
ANR	1685544	Argument	1 + ( ( type < SLJIT_CALL3 ) ? 3 : 6 )		1685501	1					
ANR	1685545	AdditiveExpression	1 + ( ( type < SLJIT_CALL3 ) ? 3 : 6 )		1685501	0		+			
ANR	1685546	PrimaryExpression	1		1685501	0					
ANR	1685547	ConditionalExpression	( type < SLJIT_CALL3 ) ? 3 : 6		1685501	1					
ANR	1685548	Condition	type < SLJIT_CALL3		1685501	0					
ANR	1685549	RelationalExpression	type < SLJIT_CALL3		1685501	0		<			
ANR	1685550	Identifier	type		1685501	0					
ANR	1685551	Identifier	SLJIT_CALL3		1685501	1					
ANR	1685552	PrimaryExpression	3		1685501	1					
ANR	1685553	PrimaryExpression	6		1685501	2					
ANR	1685554	ExpressionStatement	FAIL_IF ( ! inst )	564:1:16820:16834	1685501	3	True				
ANR	1685555	CallExpression	FAIL_IF ( ! inst )		1685501	0					
ANR	1685556	Callee	FAIL_IF		1685501	0					
ANR	1685557	Identifier	FAIL_IF		1685501	0					
ANR	1685558	ArgumentList	! inst		1685501	1					
ANR	1685559	Argument	! inst		1685501	0					
ANR	1685560	UnaryOperationExpression	! inst		1685501	0					
ANR	1685561	UnaryOperator	!		1685501	0					
ANR	1685562	Identifier	inst		1685501	1					
ANR	1685563	ExpressionStatement	INC_SIZE ( ( type < SLJIT_CALL3 ) ? 3 : 6 )	565:1:16837:16875	1685501	4	True				
ANR	1685564	CallExpression	INC_SIZE ( ( type < SLJIT_CALL3 ) ? 3 : 6 )		1685501	0					
ANR	1685565	Callee	INC_SIZE		1685501	0					
ANR	1685566	Identifier	INC_SIZE		1685501	0					
ANR	1685567	ArgumentList	( type < SLJIT_CALL3 ) ? 3 : 6		1685501	1					
ANR	1685568	Argument	( type < SLJIT_CALL3 ) ? 3 : 6		1685501	0					
ANR	1685569	ConditionalExpression	( type < SLJIT_CALL3 ) ? 3 : 6		1685501	0					
ANR	1685570	Condition	type < SLJIT_CALL3		1685501	0					
ANR	1685571	RelationalExpression	type < SLJIT_CALL3		1685501	0		<			
ANR	1685572	Identifier	type		1685501	0					
ANR	1685573	Identifier	SLJIT_CALL3		1685501	1					
ANR	1685574	PrimaryExpression	3		1685501	1					
ANR	1685575	PrimaryExpression	6		1685501	2					
ANR	1685576	IfStatement	if ( type >= SLJIT_CALL3 )		1685501	5					
ANR	1685577	Condition	type >= SLJIT_CALL3	566:5:16882:16900	1685501	0	True				
ANR	1685578	RelationalExpression	type >= SLJIT_CALL3		1685501	0		>=			
ANR	1685579	Identifier	type		1685501	0					
ANR	1685580	Identifier	SLJIT_CALL3		1685501	1					
ANR	1685581	CompoundStatement		10:26:309:309	1685501	1					
ANR	1685582	ExpressionStatement	* inst ++ = REX_W	567:2:16907:16922	1685501	0	True				
ANR	1685583	AssignmentExpression	* inst ++ = REX_W		1685501	0		=			
ANR	1685584	UnaryOperationExpression	* inst ++		1685501	0					
ANR	1685585	UnaryOperator	*		1685501	0					
ANR	1685586	PostIncDecOperationExpression	inst ++		1685501	1					
ANR	1685587	Identifier	inst		1685501	0					
ANR	1685588	IncDec	++		1685501	1					
ANR	1685589	Identifier	REX_W		1685501	1					
ANR	1685590	ExpressionStatement	* inst ++ = MOV_r_rm	568:2:16926:16944	1685501	1	True				
ANR	1685591	AssignmentExpression	* inst ++ = MOV_r_rm		1685501	0		=			
ANR	1685592	UnaryOperationExpression	* inst ++		1685501	0					
ANR	1685593	UnaryOperator	*		1685501	0					
ANR	1685594	PostIncDecOperationExpression	inst ++		1685501	1					
ANR	1685595	Identifier	inst		1685501	0					
ANR	1685596	IncDec	++		1685501	1					
ANR	1685597	Identifier	MOV_r_rm		1685501	1					
ANR	1685598	ExpressionStatement	* inst ++ = MOD_REG | ( 0x2 << 3 ) | reg_lmap [ SLJIT_R2 ]	569:2:16948:17009	1685501	2	True				
ANR	1685599	AssignmentExpression	* inst ++ = MOD_REG | ( 0x2 << 3 ) | reg_lmap [ SLJIT_R2 ]		1685501	0		=			
ANR	1685600	UnaryOperationExpression	* inst ++		1685501	0					
ANR	1685601	UnaryOperator	*		1685501	0					
ANR	1685602	PostIncDecOperationExpression	inst ++		1685501	1					
ANR	1685603	Identifier	inst		1685501	0					
ANR	1685604	IncDec	++		1685501	1					
ANR	1685605	InclusiveOrExpression	MOD_REG | ( 0x2 << 3 ) | reg_lmap [ SLJIT_R2 ]		1685501	1		|			
ANR	1685606	Identifier	MOD_REG		1685501	0					
ANR	1685607	InclusiveOrExpression	( 0x2 << 3 ) | reg_lmap [ SLJIT_R2 ]		1685501	1		|			
ANR	1685608	ShiftExpression	0x2 << 3		1685501	0		<<			
ANR	1685609	PrimaryExpression	0x2		1685501	0					
ANR	1685610	PrimaryExpression	3		1685501	1					
ANR	1685611	ArrayIndexing	reg_lmap [ SLJIT_R2 ]		1685501	1					
ANR	1685612	Identifier	reg_lmap		1685501	0					
ANR	1685613	Identifier	SLJIT_R2		1685501	1					
ANR	1685614	ExpressionStatement	* inst ++ = REX_W	571:1:17015:17030	1685501	6	True				
ANR	1685615	AssignmentExpression	* inst ++ = REX_W		1685501	0		=			
ANR	1685616	UnaryOperationExpression	* inst ++		1685501	0					
ANR	1685617	UnaryOperator	*		1685501	0					
ANR	1685618	PostIncDecOperationExpression	inst ++		1685501	1					
ANR	1685619	Identifier	inst		1685501	0					
ANR	1685620	IncDec	++		1685501	1					
ANR	1685621	Identifier	REX_W		1685501	1					
ANR	1685622	ExpressionStatement	* inst ++ = MOV_r_rm	572:1:17033:17051	1685501	7	True				
ANR	1685623	AssignmentExpression	* inst ++ = MOV_r_rm		1685501	0		=			
ANR	1685624	UnaryOperationExpression	* inst ++		1685501	0					
ANR	1685625	UnaryOperator	*		1685501	0					
ANR	1685626	PostIncDecOperationExpression	inst ++		1685501	1					
ANR	1685627	Identifier	inst		1685501	0					
ANR	1685628	IncDec	++		1685501	1					
ANR	1685629	Identifier	MOV_r_rm		1685501	1					
ANR	1685630	ExpressionStatement	* inst ++ = MOD_REG | ( 0x7 << 3 ) | reg_lmap [ SLJIT_R0 ]	573:1:17054:17115	1685501	8	True				
ANR	1685631	AssignmentExpression	* inst ++ = MOD_REG | ( 0x7 << 3 ) | reg_lmap [ SLJIT_R0 ]		1685501	0		=			
ANR	1685632	UnaryOperationExpression	* inst ++		1685501	0					
ANR	1685633	UnaryOperator	*		1685501	0					
ANR	1685634	PostIncDecOperationExpression	inst ++		1685501	1					
ANR	1685635	Identifier	inst		1685501	0					
ANR	1685636	IncDec	++		1685501	1					
ANR	1685637	InclusiveOrExpression	MOD_REG | ( 0x7 << 3 ) | reg_lmap [ SLJIT_R0 ]		1685501	1		|			
ANR	1685638	Identifier	MOD_REG		1685501	0					
ANR	1685639	InclusiveOrExpression	( 0x7 << 3 ) | reg_lmap [ SLJIT_R0 ]		1685501	1		|			
ANR	1685640	ShiftExpression	0x7 << 3		1685501	0		<<			
ANR	1685641	PrimaryExpression	0x7		1685501	0					
ANR	1685642	PrimaryExpression	3		1685501	1					
ANR	1685643	ArrayIndexing	reg_lmap [ SLJIT_R0 ]		1685501	1					
ANR	1685644	Identifier	reg_lmap		1685501	0					
ANR	1685645	Identifier	SLJIT_R0		1685501	1					
ANR	1685646	ReturnStatement	return SLJIT_SUCCESS ;	589:1:17627:17647	1685501	9	True				
ANR	1685647	Identifier	SLJIT_SUCCESS		1685501	0					
ANR	1685648	ReturnType	static SLJIT_INLINE sljit_si		1685501	1					
ANR	1685649	Identifier	call_with_args		1685501	2					
ANR	1685650	ParameterList	"struct sljit_compiler * compiler , sljit_si type"		1685501	3					
ANR	1685651	Parameter	struct sljit_compiler * compiler	556:44:16545:16575	1685501	0	True				
ANR	1685652	ParameterType	struct sljit_compiler *		1685501	0					
ANR	1685653	Identifier	compiler		1685501	1					
ANR	1685654	Parameter	sljit_si type	556:77:16578:16590	1685501	1	True				
ANR	1685655	ParameterType	sljit_si		1685501	0					
ANR	1685656	Identifier	type		1685501	1					
ANR	1685657	CFGEntryNode	ENTRY		1685501		True				
ANR	1685658	CFGExitNode	EXIT		1685501		True				
ANR	1685659	Symbol	MOV_r_rm		1685501						
ANR	1685660	Symbol	* inst ++		1685501						
ANR	1685661	Symbol	reg_map		1685501						
ANR	1685662	Symbol	SLJIT_SUCCESS		1685501						
ANR	1685663	Symbol	type		1685501						
ANR	1685664	Symbol	* reg_map		1685501						
ANR	1685665	Symbol	args_registers		1685501						
ANR	1685666	Symbol	SLJIT_R1		1685501						
ANR	1685667	Symbol	SLJIT_R2		1685501						
ANR	1685668	Symbol	MOD_REG		1685501						
ANR	1685669	Symbol	SLJIT_R0		1685501						
ANR	1685670	Symbol	* SLJIT_R1		1685501						
ANR	1685671	Symbol	reg_lmap		1685501						
ANR	1685672	Symbol	* SLJIT_R2		1685501						
ANR	1685673	Symbol	inst		1685501						
ANR	1685674	Symbol	ensure_buf		1685501						
ANR	1685675	Symbol	* reg_lmap		1685501						
ANR	1685676	Symbol	REX_W		1685501						
ANR	1685677	Symbol	SLJIT_CALL3		1685501						
ANR	1685678	Symbol	compiler		1685501						
ANR	1685679	Symbol	* SLJIT_R0		1685501						
ANR	1685680	Function	sljit_emit_fast_enter	592:0:17652:18534							
ANR	1685681	FunctionDef	"sljit_emit_fast_enter (struct sljit_compiler * compiler , sljit_si dst , sljit_sw dstw)"		1685680	0					
ANR	1685682	CompoundStatement		593:0:17770:18534	1685680	0					
ANR	1685683	IdentifierDeclStatement	sljit_ub * inst ;	594:1:17773:17787	1685680	0	True				
ANR	1685684	IdentifierDecl	* inst		1685680	0					
ANR	1685685	IdentifierDeclType	sljit_ub *		1685680	0					
ANR	1685686	Identifier	inst		1685680	1					
ANR	1685687	ExpressionStatement	CHECK_ERROR ( )	596:1:17791:17804	1685680	1	True				
ANR	1685688	CallExpression	CHECK_ERROR ( )		1685680	0					
ANR	1685689	Callee	CHECK_ERROR		1685680	0					
ANR	1685690	Identifier	CHECK_ERROR		1685680	0					
ANR	1685691	ArgumentList			1685680	1					
ANR	1685692	ExpressionStatement	"CHECK ( check_sljit_emit_fast_enter ( compiler , dst , dstw ) )"	597:1:17807:17862	1685680	2	True				
ANR	1685693	CallExpression	"CHECK ( check_sljit_emit_fast_enter ( compiler , dst , dstw ) )"		1685680	0					
ANR	1685694	Callee	CHECK		1685680	0					
ANR	1685695	Identifier	CHECK		1685680	0					
ANR	1685696	ArgumentList	"check_sljit_emit_fast_enter ( compiler , dst , dstw )"		1685680	1					
ANR	1685697	Argument	"check_sljit_emit_fast_enter ( compiler , dst , dstw )"		1685680	0					
ANR	1685698	CallExpression	"check_sljit_emit_fast_enter ( compiler , dst , dstw )"		1685680	0					
ANR	1685699	Callee	check_sljit_emit_fast_enter		1685680	0					
ANR	1685700	Identifier	check_sljit_emit_fast_enter		1685680	0					
ANR	1685701	ArgumentList	compiler		1685680	1					
ANR	1685702	Argument	compiler		1685680	0					
ANR	1685703	Identifier	compiler		1685680	0					
ANR	1685704	Argument	dst		1685680	1					
ANR	1685705	Identifier	dst		1685680	0					
ANR	1685706	Argument	dstw		1685680	2					
ANR	1685707	Identifier	dstw		1685680	0					
ANR	1685708	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( dst , dstw )"	598:1:17865:17895	1685680	3	True				
ANR	1685709	CallExpression	"ADJUST_LOCAL_OFFSET ( dst , dstw )"		1685680	0					
ANR	1685710	Callee	ADJUST_LOCAL_OFFSET		1685680	0					
ANR	1685711	Identifier	ADJUST_LOCAL_OFFSET		1685680	0					
ANR	1685712	ArgumentList	dst		1685680	1					
ANR	1685713	Argument	dst		1685680	0					
ANR	1685714	Identifier	dst		1685680	0					
ANR	1685715	Argument	dstw		1685680	1					
ANR	1685716	Identifier	dstw		1685680	0					
ANR	1685717	IfStatement	if ( dst == SLJIT_UNUSED )		1685680	4					
ANR	1685718	Condition	dst == SLJIT_UNUSED	601:5:17950:17968	1685680	0	True				
ANR	1685719	EqualityExpression	dst == SLJIT_UNUSED		1685680	0		==			
ANR	1685720	Identifier	dst		1685680	0					
ANR	1685721	Identifier	SLJIT_UNUSED		1685680	1					
ANR	1685722	ExpressionStatement	dst = TMP_REG1	602:2:17973:17987	1685680	1	True				
ANR	1685723	AssignmentExpression	dst = TMP_REG1		1685680	0		=			
ANR	1685724	Identifier	dst		1685680	0					
ANR	1685725	Identifier	TMP_REG1		1685680	1					
ANR	1685726	IfStatement	if ( FAST_IS_REG ( dst ) )		1685680	5					
ANR	1685727	Condition	FAST_IS_REG ( dst )	604:5:17995:18010	1685680	0	True				
ANR	1685728	CallExpression	FAST_IS_REG ( dst )		1685680	0					
ANR	1685729	Callee	FAST_IS_REG		1685680	0					
ANR	1685730	Identifier	FAST_IS_REG		1685680	0					
ANR	1685731	ArgumentList	dst		1685680	1					
ANR	1685732	Argument	dst		1685680	0					
ANR	1685733	Identifier	dst		1685680	0					
ANR	1685734	CompoundStatement		12:23:242:242	1685680	1					
ANR	1685735	IfStatement	if ( reg_map [ dst ] < 8 )		1685680	0					
ANR	1685736	Condition	reg_map [ dst ] < 8	605:6:18021:18036	1685680	0	True				
ANR	1685737	RelationalExpression	reg_map [ dst ] < 8		1685680	0		<			
ANR	1685738	ArrayIndexing	reg_map [ dst ]		1685680	0					
ANR	1685739	Identifier	reg_map		1685680	0					
ANR	1685740	Identifier	dst		1685680	1					
ANR	1685741	PrimaryExpression	8		1685680	1					
ANR	1685742	CompoundStatement		13:24:268:268	1685680	1					
ANR	1685743	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"	606:3:18044:18089	1685680	0	True				
ANR	1685744	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"		1685680	0		=			
ANR	1685745	Identifier	inst		1685680	0					
ANR	1685746	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"		1685680	1					
ANR	1685747	CastTarget	sljit_ub *		1685680	0					
ANR	1685748	CallExpression	"ensure_buf ( compiler , 1 + 1 )"		1685680	1					
ANR	1685749	Callee	ensure_buf		1685680	0					
ANR	1685750	Identifier	ensure_buf		1685680	0					
ANR	1685751	ArgumentList	compiler		1685680	1					
ANR	1685752	Argument	compiler		1685680	0					
ANR	1685753	Identifier	compiler		1685680	0					
ANR	1685754	Argument	1 + 1		1685680	1					
ANR	1685755	AdditiveExpression	1 + 1		1685680	0		+			
ANR	1685756	PrimaryExpression	1		1685680	0					
ANR	1685757	PrimaryExpression	1		1685680	1					
ANR	1685758	ExpressionStatement	FAIL_IF ( ! inst )	607:3:18094:18108	1685680	1	True				
ANR	1685759	CallExpression	FAIL_IF ( ! inst )		1685680	0					
ANR	1685760	Callee	FAIL_IF		1685680	0					
ANR	1685761	Identifier	FAIL_IF		1685680	0					
ANR	1685762	ArgumentList	! inst		1685680	1					
ANR	1685763	Argument	! inst		1685680	0					
ANR	1685764	UnaryOperationExpression	! inst		1685680	0					
ANR	1685765	UnaryOperator	!		1685680	0					
ANR	1685766	Identifier	inst		1685680	1					
ANR	1685767	ExpressionStatement	INC_SIZE ( 1 )	608:3:18113:18124	1685680	2	True				
ANR	1685768	CallExpression	INC_SIZE ( 1 )		1685680	0					
ANR	1685769	Callee	INC_SIZE		1685680	0					
ANR	1685770	Identifier	INC_SIZE		1685680	0					
ANR	1685771	ArgumentList	1		1685680	1					
ANR	1685772	Argument	1		1685680	0					
ANR	1685773	PrimaryExpression	1		1685680	0					
ANR	1685774	ExpressionStatement	POP_REG ( reg_lmap [ dst ] )	609:3:18129:18151	1685680	3	True				
ANR	1685775	CallExpression	POP_REG ( reg_lmap [ dst ] )		1685680	0					
ANR	1685776	Callee	POP_REG		1685680	0					
ANR	1685777	Identifier	POP_REG		1685680	0					
ANR	1685778	ArgumentList	reg_lmap [ dst ]		1685680	1					
ANR	1685779	Argument	reg_lmap [ dst ]		1685680	0					
ANR	1685780	ArrayIndexing	reg_lmap [ dst ]		1685680	0					
ANR	1685781	Identifier	reg_lmap		1685680	0					
ANR	1685782	Identifier	dst		1685680	1					
ANR	1685783	ReturnStatement	return SLJIT_SUCCESS ;	610:3:18156:18176	1685680	4	True				
ANR	1685784	Identifier	SLJIT_SUCCESS		1685680	0					
ANR	1685785	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 2 )"	613:2:18185:18230	1685680	1	True				
ANR	1685786	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 2 )"		1685680	0		=			
ANR	1685787	Identifier	inst		1685680	0					
ANR	1685788	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 2 )"		1685680	1					
ANR	1685789	CastTarget	sljit_ub *		1685680	0					
ANR	1685790	CallExpression	"ensure_buf ( compiler , 1 + 2 )"		1685680	1					
ANR	1685791	Callee	ensure_buf		1685680	0					
ANR	1685792	Identifier	ensure_buf		1685680	0					
ANR	1685793	ArgumentList	compiler		1685680	1					
ANR	1685794	Argument	compiler		1685680	0					
ANR	1685795	Identifier	compiler		1685680	0					
ANR	1685796	Argument	1 + 2		1685680	1					
ANR	1685797	AdditiveExpression	1 + 2		1685680	0		+			
ANR	1685798	PrimaryExpression	1		1685680	0					
ANR	1685799	PrimaryExpression	2		1685680	1					
ANR	1685800	ExpressionStatement	FAIL_IF ( ! inst )	614:2:18234:18248	1685680	2	True				
ANR	1685801	CallExpression	FAIL_IF ( ! inst )		1685680	0					
ANR	1685802	Callee	FAIL_IF		1685680	0					
ANR	1685803	Identifier	FAIL_IF		1685680	0					
ANR	1685804	ArgumentList	! inst		1685680	1					
ANR	1685805	Argument	! inst		1685680	0					
ANR	1685806	UnaryOperationExpression	! inst		1685680	0					
ANR	1685807	UnaryOperator	!		1685680	0					
ANR	1685808	Identifier	inst		1685680	1					
ANR	1685809	ExpressionStatement	INC_SIZE ( 2 )	615:2:18252:18263	1685680	3	True				
ANR	1685810	CallExpression	INC_SIZE ( 2 )		1685680	0					
ANR	1685811	Callee	INC_SIZE		1685680	0					
ANR	1685812	Identifier	INC_SIZE		1685680	0					
ANR	1685813	ArgumentList	2		1685680	1					
ANR	1685814	Argument	2		1685680	0					
ANR	1685815	PrimaryExpression	2		1685680	0					
ANR	1685816	ExpressionStatement	* inst ++ = REX_B	616:2:18267:18282	1685680	4	True				
ANR	1685817	AssignmentExpression	* inst ++ = REX_B		1685680	0		=			
ANR	1685818	UnaryOperationExpression	* inst ++		1685680	0					
ANR	1685819	UnaryOperator	*		1685680	0					
ANR	1685820	PostIncDecOperationExpression	inst ++		1685680	1					
ANR	1685821	Identifier	inst		1685680	0					
ANR	1685822	IncDec	++		1685680	1					
ANR	1685823	Identifier	REX_B		1685680	1					
ANR	1685824	ExpressionStatement	POP_REG ( reg_lmap [ dst ] )	617:2:18286:18308	1685680	5	True				
ANR	1685825	CallExpression	POP_REG ( reg_lmap [ dst ] )		1685680	0					
ANR	1685826	Callee	POP_REG		1685680	0					
ANR	1685827	Identifier	POP_REG		1685680	0					
ANR	1685828	ArgumentList	reg_lmap [ dst ]		1685680	1					
ANR	1685829	Argument	reg_lmap [ dst ]		1685680	0					
ANR	1685830	ArrayIndexing	reg_lmap [ dst ]		1685680	0					
ANR	1685831	Identifier	reg_lmap		1685680	0					
ANR	1685832	Identifier	dst		1685680	1					
ANR	1685833	ReturnStatement	return SLJIT_SUCCESS ;	618:2:18312:18332	1685680	6	True				
ANR	1685834	Identifier	SLJIT_SUCCESS		1685680	0					
ANR	1685835	ExpressionStatement	compiler -> mode32 = 1	622:1:18393:18413	1685680	6	True				
ANR	1685836	AssignmentExpression	compiler -> mode32 = 1		1685680	0		=			
ANR	1685837	PtrMemberAccess	compiler -> mode32		1685680	0					
ANR	1685838	Identifier	compiler		1685680	0					
ANR	1685839	Identifier	mode32		1685680	1					
ANR	1685840	PrimaryExpression	1		1685680	1					
ANR	1685841	ExpressionStatement	"inst = emit_x86_instruction ( compiler , 1 , 0 , 0 , dst , dstw )"	623:1:18416:18473	1685680	7	True				
ANR	1685842	AssignmentExpression	"inst = emit_x86_instruction ( compiler , 1 , 0 , 0 , dst , dstw )"		1685680	0		=			
ANR	1685843	Identifier	inst		1685680	0					
ANR	1685844	CallExpression	"emit_x86_instruction ( compiler , 1 , 0 , 0 , dst , dstw )"		1685680	1					
ANR	1685845	Callee	emit_x86_instruction		1685680	0					
ANR	1685846	Identifier	emit_x86_instruction		1685680	0					
ANR	1685847	ArgumentList	compiler		1685680	1					
ANR	1685848	Argument	compiler		1685680	0					
ANR	1685849	Identifier	compiler		1685680	0					
ANR	1685850	Argument	1		1685680	1					
ANR	1685851	PrimaryExpression	1		1685680	0					
ANR	1685852	Argument	0		1685680	2					
ANR	1685853	PrimaryExpression	0		1685680	0					
ANR	1685854	Argument	0		1685680	3					
ANR	1685855	PrimaryExpression	0		1685680	0					
ANR	1685856	Argument	dst		1685680	4					
ANR	1685857	Identifier	dst		1685680	0					
ANR	1685858	Argument	dstw		1685680	5					
ANR	1685859	Identifier	dstw		1685680	0					
ANR	1685860	ExpressionStatement	FAIL_IF ( ! inst )	624:1:18476:18490	1685680	8	True				
ANR	1685861	CallExpression	FAIL_IF ( ! inst )		1685680	0					
ANR	1685862	Callee	FAIL_IF		1685680	0					
ANR	1685863	Identifier	FAIL_IF		1685680	0					
ANR	1685864	ArgumentList	! inst		1685680	1					
ANR	1685865	Argument	! inst		1685680	0					
ANR	1685866	UnaryOperationExpression	! inst		1685680	0					
ANR	1685867	UnaryOperator	!		1685680	0					
ANR	1685868	Identifier	inst		1685680	1					
ANR	1685869	ExpressionStatement	* inst ++ = POP_rm	625:1:18493:18509	1685680	9	True				
ANR	1685870	AssignmentExpression	* inst ++ = POP_rm		1685680	0		=			
ANR	1685871	UnaryOperationExpression	* inst ++		1685680	0					
ANR	1685872	UnaryOperator	*		1685680	0					
ANR	1685873	PostIncDecOperationExpression	inst ++		1685680	1					
ANR	1685874	Identifier	inst		1685680	0					
ANR	1685875	IncDec	++		1685680	1					
ANR	1685876	Identifier	POP_rm		1685680	1					
ANR	1685877	ReturnStatement	return SLJIT_SUCCESS ;	626:1:18512:18532	1685680	10	True				
ANR	1685878	Identifier	SLJIT_SUCCESS		1685680	0					
ANR	1685879	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1685680	1					
ANR	1685880	Identifier	sljit_emit_fast_enter		1685680	2					
ANR	1685881	ParameterList	"struct sljit_compiler * compiler , sljit_si dst , sljit_sw dstw"		1685680	3					
ANR	1685882	Parameter	struct sljit_compiler * compiler	592:56:17708:17738	1685680	0	True				
ANR	1685883	ParameterType	struct sljit_compiler *		1685680	0					
ANR	1685884	Identifier	compiler		1685680	1					
ANR	1685885	Parameter	sljit_si dst	592:89:17741:17752	1685680	1	True				
ANR	1685886	ParameterType	sljit_si		1685680	0					
ANR	1685887	Identifier	dst		1685680	1					
ANR	1685888	Parameter	sljit_sw dstw	592:103:17755:17767	1685680	2	True				
ANR	1685889	ParameterType	sljit_sw		1685680	0					
ANR	1685890	Identifier	dstw		1685680	1					
ANR	1685891	CFGEntryNode	ENTRY		1685680		True				
ANR	1685892	CFGExitNode	EXIT		1685680		True				
ANR	1685893	Symbol	check_sljit_emit_fast_enter		1685680						
ANR	1685894	Symbol	TMP_REG1		1685680						
ANR	1685895	Symbol	emit_x86_instruction		1685680						
ANR	1685896	Symbol	FAST_IS_REG		1685680						
ANR	1685897	Symbol	dst		1685680						
ANR	1685898	Symbol	* inst ++		1685680						
ANR	1685899	Symbol	reg_map		1685680						
ANR	1685900	Symbol	SLJIT_SUCCESS		1685680						
ANR	1685901	Symbol	* compiler		1685680						
ANR	1685902	Symbol	POP_rm		1685680						
ANR	1685903	Symbol	* reg_map		1685680						
ANR	1685904	Symbol	REX_B		1685680						
ANR	1685905	Symbol	* dst		1685680						
ANR	1685906	Symbol	reg_lmap		1685680						
ANR	1685907	Symbol	SLJIT_UNUSED		1685680						
ANR	1685908	Symbol	inst		1685680						
ANR	1685909	Symbol	ensure_buf		1685680						
ANR	1685910	Symbol	* reg_lmap		1685680						
ANR	1685911	Symbol	compiler -> mode32		1685680						
ANR	1685912	Symbol	compiler		1685680						
ANR	1685913	Symbol	dstw		1685680						
ANR	1685914	Function	sljit_emit_fast_return	629:0:18537:19824							
ANR	1685915	FunctionDef	"sljit_emit_fast_return (struct sljit_compiler * compiler , sljit_si src , sljit_sw srcw)"		1685914	0					
ANR	1685916	CompoundStatement		630:0:18656:19824	1685914	0					
ANR	1685917	IdentifierDeclStatement	sljit_ub * inst ;	631:1:18659:18673	1685914	0	True				
ANR	1685918	IdentifierDecl	* inst		1685914	0					
ANR	1685919	IdentifierDeclType	sljit_ub *		1685914	0					
ANR	1685920	Identifier	inst		1685914	1					
ANR	1685921	ExpressionStatement	CHECK_ERROR ( )	633:1:18677:18690	1685914	1	True				
ANR	1685922	CallExpression	CHECK_ERROR ( )		1685914	0					
ANR	1685923	Callee	CHECK_ERROR		1685914	0					
ANR	1685924	Identifier	CHECK_ERROR		1685914	0					
ANR	1685925	ArgumentList			1685914	1					
ANR	1685926	ExpressionStatement	"CHECK ( check_sljit_emit_fast_return ( compiler , src , srcw ) )"	634:1:18693:18749	1685914	2	True				
ANR	1685927	CallExpression	"CHECK ( check_sljit_emit_fast_return ( compiler , src , srcw ) )"		1685914	0					
ANR	1685928	Callee	CHECK		1685914	0					
ANR	1685929	Identifier	CHECK		1685914	0					
ANR	1685930	ArgumentList	"check_sljit_emit_fast_return ( compiler , src , srcw )"		1685914	1					
ANR	1685931	Argument	"check_sljit_emit_fast_return ( compiler , src , srcw )"		1685914	0					
ANR	1685932	CallExpression	"check_sljit_emit_fast_return ( compiler , src , srcw )"		1685914	0					
ANR	1685933	Callee	check_sljit_emit_fast_return		1685914	0					
ANR	1685934	Identifier	check_sljit_emit_fast_return		1685914	0					
ANR	1685935	ArgumentList	compiler		1685914	1					
ANR	1685936	Argument	compiler		1685914	0					
ANR	1685937	Identifier	compiler		1685914	0					
ANR	1685938	Argument	src		1685914	1					
ANR	1685939	Identifier	src		1685914	0					
ANR	1685940	Argument	srcw		1685914	2					
ANR	1685941	Identifier	srcw		1685914	0					
ANR	1685942	ExpressionStatement	"ADJUST_LOCAL_OFFSET ( src , srcw )"	635:1:18752:18782	1685914	3	True				
ANR	1685943	CallExpression	"ADJUST_LOCAL_OFFSET ( src , srcw )"		1685914	0					
ANR	1685944	Callee	ADJUST_LOCAL_OFFSET		1685914	0					
ANR	1685945	Identifier	ADJUST_LOCAL_OFFSET		1685914	0					
ANR	1685946	ArgumentList	src		1685914	1					
ANR	1685947	Argument	src		1685914	0					
ANR	1685948	Identifier	src		1685914	0					
ANR	1685949	Argument	srcw		1685914	1					
ANR	1685950	Identifier	srcw		1685914	0					
ANR	1685951	IfStatement	if ( ( src & SLJIT_IMM ) && NOT_HALFWORD ( srcw ) )		1685914	4					
ANR	1685952	Condition	( src & SLJIT_IMM ) && NOT_HALFWORD ( srcw )	637:5:18790:18828	1685914	0	True				
ANR	1685953	AndExpression	( src & SLJIT_IMM ) && NOT_HALFWORD ( srcw )		1685914	0		&&			
ANR	1685954	BitAndExpression	src & SLJIT_IMM		1685914	0		&			
ANR	1685955	Identifier	src		1685914	0					
ANR	1685956	Identifier	SLJIT_IMM		1685914	1					
ANR	1685957	CallExpression	NOT_HALFWORD ( srcw )		1685914	1					
ANR	1685958	Callee	NOT_HALFWORD		1685914	0					
ANR	1685959	Identifier	NOT_HALFWORD		1685914	0					
ANR	1685960	ArgumentList	srcw		1685914	1					
ANR	1685961	Argument	srcw		1685914	0					
ANR	1685962	Identifier	srcw		1685914	0					
ANR	1685963	CompoundStatement		8:46:174:174	1685914	1					
ANR	1685964	ExpressionStatement	"FAIL_IF ( emit_load_imm64 ( compiler , TMP_REG1 , srcw ) )"	638:2:18835:18885	1685914	0	True				
ANR	1685965	CallExpression	"FAIL_IF ( emit_load_imm64 ( compiler , TMP_REG1 , srcw ) )"		1685914	0					
ANR	1685966	Callee	FAIL_IF		1685914	0					
ANR	1685967	Identifier	FAIL_IF		1685914	0					
ANR	1685968	ArgumentList	"emit_load_imm64 ( compiler , TMP_REG1 , srcw )"		1685914	1					
ANR	1685969	Argument	"emit_load_imm64 ( compiler , TMP_REG1 , srcw )"		1685914	0					
ANR	1685970	CallExpression	"emit_load_imm64 ( compiler , TMP_REG1 , srcw )"		1685914	0					
ANR	1685971	Callee	emit_load_imm64		1685914	0					
ANR	1685972	Identifier	emit_load_imm64		1685914	0					
ANR	1685973	ArgumentList	compiler		1685914	1					
ANR	1685974	Argument	compiler		1685914	0					
ANR	1685975	Identifier	compiler		1685914	0					
ANR	1685976	Argument	TMP_REG1		1685914	1					
ANR	1685977	Identifier	TMP_REG1		1685914	0					
ANR	1685978	Argument	srcw		1685914	2					
ANR	1685979	Identifier	srcw		1685914	0					
ANR	1685980	ExpressionStatement	src = TMP_REG1	639:2:18889:18903	1685914	1	True				
ANR	1685981	AssignmentExpression	src = TMP_REG1		1685914	0		=			
ANR	1685982	Identifier	src		1685914	0					
ANR	1685983	Identifier	TMP_REG1		1685914	1					
ANR	1685984	IfStatement	if ( FAST_IS_REG ( src ) )		1685914	5					
ANR	1685985	Condition	FAST_IS_REG ( src )	642:5:18914:18929	1685914	0	True				
ANR	1685986	CallExpression	FAST_IS_REG ( src )		1685914	0					
ANR	1685987	Callee	FAST_IS_REG		1685914	0					
ANR	1685988	Identifier	FAST_IS_REG		1685914	0					
ANR	1685989	ArgumentList	src		1685914	1					
ANR	1685990	Argument	src		1685914	0					
ANR	1685991	Identifier	src		1685914	0					
ANR	1685992	CompoundStatement		13:23:275:275	1685914	1					
ANR	1685993	IfStatement	if ( reg_map [ src ] < 8 )		1685914	0					
ANR	1685994	Condition	reg_map [ src ] < 8	643:6:18940:18955	1685914	0	True				
ANR	1685995	RelationalExpression	reg_map [ src ] < 8		1685914	0		<			
ANR	1685996	ArrayIndexing	reg_map [ src ]		1685914	0					
ANR	1685997	Identifier	reg_map		1685914	0					
ANR	1685998	Identifier	src		1685914	1					
ANR	1685999	PrimaryExpression	8		1685914	1					
ANR	1686000	CompoundStatement		14:24:301:301	1685914	1					
ANR	1686001	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 + 1 )"	644:3:18963:19012	1685914	0	True				
ANR	1686002	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 + 1 )"		1685914	0		=			
ANR	1686003	Identifier	inst		1685914	0					
ANR	1686004	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 1 + 1 )"		1685914	1					
ANR	1686005	CastTarget	sljit_ub *		1685914	0					
ANR	1686006	CallExpression	"ensure_buf ( compiler , 1 + 1 + 1 )"		1685914	1					
ANR	1686007	Callee	ensure_buf		1685914	0					
ANR	1686008	Identifier	ensure_buf		1685914	0					
ANR	1686009	ArgumentList	compiler		1685914	1					
ANR	1686010	Argument	compiler		1685914	0					
ANR	1686011	Identifier	compiler		1685914	0					
ANR	1686012	Argument	1 + 1 + 1		1685914	1					
ANR	1686013	AdditiveExpression	1 + 1 + 1		1685914	0		+			
ANR	1686014	PrimaryExpression	1		1685914	0					
ANR	1686015	AdditiveExpression	1 + 1		1685914	1		+			
ANR	1686016	PrimaryExpression	1		1685914	0					
ANR	1686017	PrimaryExpression	1		1685914	1					
ANR	1686018	ExpressionStatement	FAIL_IF ( ! inst )	645:3:19017:19031	1685914	1	True				
ANR	1686019	CallExpression	FAIL_IF ( ! inst )		1685914	0					
ANR	1686020	Callee	FAIL_IF		1685914	0					
ANR	1686021	Identifier	FAIL_IF		1685914	0					
ANR	1686022	ArgumentList	! inst		1685914	1					
ANR	1686023	Argument	! inst		1685914	0					
ANR	1686024	UnaryOperationExpression	! inst		1685914	0					
ANR	1686025	UnaryOperator	!		1685914	0					
ANR	1686026	Identifier	inst		1685914	1					
ANR	1686027	ExpressionStatement	INC_SIZE ( 1 + 1 )	647:3:19037:19052	1685914	2	True				
ANR	1686028	CallExpression	INC_SIZE ( 1 + 1 )		1685914	0					
ANR	1686029	Callee	INC_SIZE		1685914	0					
ANR	1686030	Identifier	INC_SIZE		1685914	0					
ANR	1686031	ArgumentList	1 + 1		1685914	1					
ANR	1686032	Argument	1 + 1		1685914	0					
ANR	1686033	AdditiveExpression	1 + 1		1685914	0		+			
ANR	1686034	PrimaryExpression	1		1685914	0					
ANR	1686035	PrimaryExpression	1		1685914	1					
ANR	1686036	ExpressionStatement	PUSH_REG ( reg_lmap [ src ] )	648:3:19057:19080	1685914	3	True				
ANR	1686037	CallExpression	PUSH_REG ( reg_lmap [ src ] )		1685914	0					
ANR	1686038	Callee	PUSH_REG		1685914	0					
ANR	1686039	Identifier	PUSH_REG		1685914	0					
ANR	1686040	ArgumentList	reg_lmap [ src ]		1685914	1					
ANR	1686041	Argument	reg_lmap [ src ]		1685914	0					
ANR	1686042	ArrayIndexing	reg_lmap [ src ]		1685914	0					
ANR	1686043	Identifier	reg_lmap		1685914	0					
ANR	1686044	Identifier	src		1685914	1					
ANR	1686045	ElseStatement	else		1685914	0					
ANR	1686046	CompoundStatement		21:7:436:436	1685914	0					
ANR	1686047	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 2 + 1 )"	651:3:19098:19147	1685914	0	True				
ANR	1686048	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 2 + 1 )"		1685914	0		=			
ANR	1686049	Identifier	inst		1685914	0					
ANR	1686050	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 2 + 1 )"		1685914	1					
ANR	1686051	CastTarget	sljit_ub *		1685914	0					
ANR	1686052	CallExpression	"ensure_buf ( compiler , 1 + 2 + 1 )"		1685914	1					
ANR	1686053	Callee	ensure_buf		1685914	0					
ANR	1686054	Identifier	ensure_buf		1685914	0					
ANR	1686055	ArgumentList	compiler		1685914	1					
ANR	1686056	Argument	compiler		1685914	0					
ANR	1686057	Identifier	compiler		1685914	0					
ANR	1686058	Argument	1 + 2 + 1		1685914	1					
ANR	1686059	AdditiveExpression	1 + 2 + 1		1685914	0		+			
ANR	1686060	PrimaryExpression	1		1685914	0					
ANR	1686061	AdditiveExpression	2 + 1		1685914	1		+			
ANR	1686062	PrimaryExpression	2		1685914	0					
ANR	1686063	PrimaryExpression	1		1685914	1					
ANR	1686064	ExpressionStatement	FAIL_IF ( ! inst )	652:3:19152:19166	1685914	1	True				
ANR	1686065	CallExpression	FAIL_IF ( ! inst )		1685914	0					
ANR	1686066	Callee	FAIL_IF		1685914	0					
ANR	1686067	Identifier	FAIL_IF		1685914	0					
ANR	1686068	ArgumentList	! inst		1685914	1					
ANR	1686069	Argument	! inst		1685914	0					
ANR	1686070	UnaryOperationExpression	! inst		1685914	0					
ANR	1686071	UnaryOperator	!		1685914	0					
ANR	1686072	Identifier	inst		1685914	1					
ANR	1686073	ExpressionStatement	INC_SIZE ( 2 + 1 )	654:3:19172:19187	1685914	2	True				
ANR	1686074	CallExpression	INC_SIZE ( 2 + 1 )		1685914	0					
ANR	1686075	Callee	INC_SIZE		1685914	0					
ANR	1686076	Identifier	INC_SIZE		1685914	0					
ANR	1686077	ArgumentList	2 + 1		1685914	1					
ANR	1686078	Argument	2 + 1		1685914	0					
ANR	1686079	AdditiveExpression	2 + 1		1685914	0		+			
ANR	1686080	PrimaryExpression	2		1685914	0					
ANR	1686081	PrimaryExpression	1		1685914	1					
ANR	1686082	ExpressionStatement	* inst ++ = REX_B	655:3:19192:19207	1685914	3	True				
ANR	1686083	AssignmentExpression	* inst ++ = REX_B		1685914	0		=			
ANR	1686084	UnaryOperationExpression	* inst ++		1685914	0					
ANR	1686085	UnaryOperator	*		1685914	0					
ANR	1686086	PostIncDecOperationExpression	inst ++		1685914	1					
ANR	1686087	Identifier	inst		1685914	0					
ANR	1686088	IncDec	++		1685914	1					
ANR	1686089	Identifier	REX_B		1685914	1					
ANR	1686090	ExpressionStatement	PUSH_REG ( reg_lmap [ src ] )	656:3:19212:19235	1685914	4	True				
ANR	1686091	CallExpression	PUSH_REG ( reg_lmap [ src ] )		1685914	0					
ANR	1686092	Callee	PUSH_REG		1685914	0					
ANR	1686093	Identifier	PUSH_REG		1685914	0					
ANR	1686094	ArgumentList	reg_lmap [ src ]		1685914	1					
ANR	1686095	Argument	reg_lmap [ src ]		1685914	0					
ANR	1686096	ArrayIndexing	reg_lmap [ src ]		1685914	0					
ANR	1686097	Identifier	reg_lmap		1685914	0					
ANR	1686098	Identifier	src		1685914	1					
ANR	1686099	ElseStatement	else		1685914	0					
ANR	1686100	IfStatement	if ( src & SLJIT_MEM )		1685914	0					
ANR	1686101	Condition	src & SLJIT_MEM	659:10:19254:19268	1685914	0	True				
ANR	1686102	BitAndExpression	src & SLJIT_MEM		1685914	0		&			
ANR	1686103	Identifier	src		1685914	0					
ANR	1686104	Identifier	SLJIT_MEM		1685914	1					
ANR	1686105	CompoundStatement		30:27:614:614	1685914	1					
ANR	1686106	ExpressionStatement	compiler -> mode32 = 1	661:2:19330:19350	1685914	0	True				
ANR	1686107	AssignmentExpression	compiler -> mode32 = 1		1685914	0		=			
ANR	1686108	PtrMemberAccess	compiler -> mode32		1685914	0					
ANR	1686109	Identifier	compiler		1685914	0					
ANR	1686110	Identifier	mode32		1685914	1					
ANR	1686111	PrimaryExpression	1		1685914	1					
ANR	1686112	ExpressionStatement	"inst = emit_x86_instruction ( compiler , 1 , 0 , 0 , src , srcw )"	662:2:19354:19411	1685914	1	True				
ANR	1686113	AssignmentExpression	"inst = emit_x86_instruction ( compiler , 1 , 0 , 0 , src , srcw )"		1685914	0		=			
ANR	1686114	Identifier	inst		1685914	0					
ANR	1686115	CallExpression	"emit_x86_instruction ( compiler , 1 , 0 , 0 , src , srcw )"		1685914	1					
ANR	1686116	Callee	emit_x86_instruction		1685914	0					
ANR	1686117	Identifier	emit_x86_instruction		1685914	0					
ANR	1686118	ArgumentList	compiler		1685914	1					
ANR	1686119	Argument	compiler		1685914	0					
ANR	1686120	Identifier	compiler		1685914	0					
ANR	1686121	Argument	1		1685914	1					
ANR	1686122	PrimaryExpression	1		1685914	0					
ANR	1686123	Argument	0		1685914	2					
ANR	1686124	PrimaryExpression	0		1685914	0					
ANR	1686125	Argument	0		1685914	3					
ANR	1686126	PrimaryExpression	0		1685914	0					
ANR	1686127	Argument	src		1685914	4					
ANR	1686128	Identifier	src		1685914	0					
ANR	1686129	Argument	srcw		1685914	5					
ANR	1686130	Identifier	srcw		1685914	0					
ANR	1686131	ExpressionStatement	FAIL_IF ( ! inst )	663:2:19415:19429	1685914	2	True				
ANR	1686132	CallExpression	FAIL_IF ( ! inst )		1685914	0					
ANR	1686133	Callee	FAIL_IF		1685914	0					
ANR	1686134	Identifier	FAIL_IF		1685914	0					
ANR	1686135	ArgumentList	! inst		1685914	1					
ANR	1686136	Argument	! inst		1685914	0					
ANR	1686137	UnaryOperationExpression	! inst		1685914	0					
ANR	1686138	UnaryOperator	!		1685914	0					
ANR	1686139	Identifier	inst		1685914	1					
ANR	1686140	ExpressionStatement	* inst ++ = GROUP_FF	664:2:19433:19451	1685914	3	True				
ANR	1686141	AssignmentExpression	* inst ++ = GROUP_FF		1685914	0		=			
ANR	1686142	UnaryOperationExpression	* inst ++		1685914	0					
ANR	1686143	UnaryOperator	*		1685914	0					
ANR	1686144	PostIncDecOperationExpression	inst ++		1685914	1					
ANR	1686145	Identifier	inst		1685914	0					
ANR	1686146	IncDec	++		1685914	1					
ANR	1686147	Identifier	GROUP_FF		1685914	1					
ANR	1686148	ExpressionStatement	* inst |= PUSH_rm	665:2:19455:19471	1685914	4	True				
ANR	1686149	AssignmentExpression	* inst |= PUSH_rm		1685914	0		|=			
ANR	1686150	UnaryOperationExpression	* inst		1685914	0					
ANR	1686151	UnaryOperator	*		1685914	0					
ANR	1686152	Identifier	inst		1685914	1					
ANR	1686153	Identifier	PUSH_rm		1685914	1					
ANR	1686154	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"	667:2:19476:19521	1685914	5	True				
ANR	1686155	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"		1685914	0		=			
ANR	1686156	Identifier	inst		1685914	0					
ANR	1686157	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 1 )"		1685914	1					
ANR	1686158	CastTarget	sljit_ub *		1685914	0					
ANR	1686159	CallExpression	"ensure_buf ( compiler , 1 + 1 )"		1685914	1					
ANR	1686160	Callee	ensure_buf		1685914	0					
ANR	1686161	Identifier	ensure_buf		1685914	0					
ANR	1686162	ArgumentList	compiler		1685914	1					
ANR	1686163	Argument	compiler		1685914	0					
ANR	1686164	Identifier	compiler		1685914	0					
ANR	1686165	Argument	1 + 1		1685914	1					
ANR	1686166	AdditiveExpression	1 + 1		1685914	0		+			
ANR	1686167	PrimaryExpression	1		1685914	0					
ANR	1686168	PrimaryExpression	1		1685914	1					
ANR	1686169	ExpressionStatement	FAIL_IF ( ! inst )	668:2:19525:19539	1685914	6	True				
ANR	1686170	CallExpression	FAIL_IF ( ! inst )		1685914	0					
ANR	1686171	Callee	FAIL_IF		1685914	0					
ANR	1686172	Identifier	FAIL_IF		1685914	0					
ANR	1686173	ArgumentList	! inst		1685914	1					
ANR	1686174	Argument	! inst		1685914	0					
ANR	1686175	UnaryOperationExpression	! inst		1685914	0					
ANR	1686176	UnaryOperator	!		1685914	0					
ANR	1686177	Identifier	inst		1685914	1					
ANR	1686178	ExpressionStatement	INC_SIZE ( 1 )	669:2:19543:19554	1685914	7	True				
ANR	1686179	CallExpression	INC_SIZE ( 1 )		1685914	0					
ANR	1686180	Callee	INC_SIZE		1685914	0					
ANR	1686181	Identifier	INC_SIZE		1685914	0					
ANR	1686182	ArgumentList	1		1685914	1					
ANR	1686183	Argument	1		1685914	0					
ANR	1686184	PrimaryExpression	1		1685914	0					
ANR	1686185	ElseStatement	else		1685914	0					
ANR	1686186	CompoundStatement		42:6:908:908	1685914	0					
ANR	1686187	ExpressionStatement	SLJIT_ASSERT ( IS_HALFWORD ( srcw ) )	672:2:19569:19600	1685914	0	True				
ANR	1686188	CallExpression	SLJIT_ASSERT ( IS_HALFWORD ( srcw ) )		1685914	0					
ANR	1686189	Callee	SLJIT_ASSERT		1685914	0					
ANR	1686190	Identifier	SLJIT_ASSERT		1685914	0					
ANR	1686191	ArgumentList	IS_HALFWORD ( srcw )		1685914	1					
ANR	1686192	Argument	IS_HALFWORD ( srcw )		1685914	0					
ANR	1686193	CallExpression	IS_HALFWORD ( srcw )		1685914	0					
ANR	1686194	Callee	IS_HALFWORD		1685914	0					
ANR	1686195	Identifier	IS_HALFWORD		1685914	0					
ANR	1686196	ArgumentList	srcw		1685914	1					
ANR	1686197	Argument	srcw		1685914	0					
ANR	1686198	Identifier	srcw		1685914	0					
ANR	1686199	ExpressionStatement	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 5 + 1 )"	674:2:19623:19672	1685914	1	True				
ANR	1686200	AssignmentExpression	"inst = ( sljit_ub * ) ensure_buf ( compiler , 1 + 5 + 1 )"		1685914	0		=			
ANR	1686201	Identifier	inst		1685914	0					
ANR	1686202	CastExpression	"( sljit_ub * ) ensure_buf ( compiler , 1 + 5 + 1 )"		1685914	1					
ANR	1686203	CastTarget	sljit_ub *		1685914	0					
ANR	1686204	CallExpression	"ensure_buf ( compiler , 1 + 5 + 1 )"		1685914	1					
ANR	1686205	Callee	ensure_buf		1685914	0					
ANR	1686206	Identifier	ensure_buf		1685914	0					
ANR	1686207	ArgumentList	compiler		1685914	1					
ANR	1686208	Argument	compiler		1685914	0					
ANR	1686209	Identifier	compiler		1685914	0					
ANR	1686210	Argument	1 + 5 + 1		1685914	1					
ANR	1686211	AdditiveExpression	1 + 5 + 1		1685914	0		+			
ANR	1686212	PrimaryExpression	1		1685914	0					
ANR	1686213	AdditiveExpression	5 + 1		1685914	1		+			
ANR	1686214	PrimaryExpression	5		1685914	0					
ANR	1686215	PrimaryExpression	1		1685914	1					
ANR	1686216	ExpressionStatement	FAIL_IF ( ! inst )	675:2:19676:19690	1685914	2	True				
ANR	1686217	CallExpression	FAIL_IF ( ! inst )		1685914	0					
ANR	1686218	Callee	FAIL_IF		1685914	0					
ANR	1686219	Identifier	FAIL_IF		1685914	0					
ANR	1686220	ArgumentList	! inst		1685914	1					
ANR	1686221	Argument	! inst		1685914	0					
ANR	1686222	UnaryOperationExpression	! inst		1685914	0					
ANR	1686223	UnaryOperator	!		1685914	0					
ANR	1686224	Identifier	inst		1685914	1					
ANR	1686225	ExpressionStatement	INC_SIZE ( 5 + 1 )	677:2:19695:19710	1685914	3	True				
ANR	1686226	CallExpression	INC_SIZE ( 5 + 1 )		1685914	0					
ANR	1686227	Callee	INC_SIZE		1685914	0					
ANR	1686228	Identifier	INC_SIZE		1685914	0					
ANR	1686229	ArgumentList	5 + 1		1685914	1					
ANR	1686230	Argument	5 + 1		1685914	0					
ANR	1686231	AdditiveExpression	5 + 1		1685914	0		+			
ANR	1686232	PrimaryExpression	5		1685914	0					
ANR	1686233	PrimaryExpression	1		1685914	1					
ANR	1686234	ExpressionStatement	* inst ++ = PUSH_i32	678:2:19714:19732	1685914	4	True				
ANR	1686235	AssignmentExpression	* inst ++ = PUSH_i32		1685914	0		=			
ANR	1686236	UnaryOperationExpression	* inst ++		1685914	0					
ANR	1686237	UnaryOperator	*		1685914	0					
ANR	1686238	PostIncDecOperationExpression	inst ++		1685914	1					
ANR	1686239	Identifier	inst		1685914	0					
ANR	1686240	IncDec	++		1685914	1					
ANR	1686241	Identifier	PUSH_i32		1685914	1					
ANR	1686242	ExpressionStatement	* ( sljit_si * ) inst = srcw	679:2:19736:19759	1685914	5	True				
ANR	1686243	AssignmentExpression	* ( sljit_si * ) inst = srcw		1685914	0		=			
ANR	1686244	UnaryOperationExpression	* ( sljit_si * ) inst		1685914	0					
ANR	1686245	UnaryOperator	*		1685914	0					
ANR	1686246	CastExpression	( sljit_si * ) inst		1685914	1					
ANR	1686247	CastTarget	sljit_si *		1685914	0					
ANR	1686248	Identifier	inst		1685914	1					
ANR	1686249	Identifier	srcw		1685914	1					
ANR	1686250	ExpressionStatement	inst += sizeof ( sljit_si )	680:2:19763:19787	1685914	6	True				
ANR	1686251	AssignmentExpression	inst += sizeof ( sljit_si )		1685914	0		+=			
ANR	1686252	Identifier	inst		1685914	0					
ANR	1686253	SizeofExpression	sizeof ( sljit_si )		1685914	1					
ANR	1686254	Sizeof	sizeof		1685914	0					
ANR	1686255	SizeofOperand	sljit_si		1685914	1					
ANR	1686256	ExpressionStatement	RET ( )	683:1:19794:19799	1685914	6	True				
ANR	1686257	CallExpression	RET ( )		1685914	0					
ANR	1686258	Callee	RET		1685914	0					
ANR	1686259	Identifier	RET		1685914	0					
ANR	1686260	ArgumentList			1685914	1					
ANR	1686261	ReturnStatement	return SLJIT_SUCCESS ;	684:1:19802:19822	1685914	7	True				
ANR	1686262	Identifier	SLJIT_SUCCESS		1685914	0					
ANR	1686263	ReturnType	SLJIT_API_FUNC_ATTRIBUTE sljit_si		1685914	1					
ANR	1686264	Identifier	sljit_emit_fast_return		1685914	2					
ANR	1686265	ParameterList	"struct sljit_compiler * compiler , sljit_si src , sljit_sw srcw"		1685914	3					
ANR	1686266	Parameter	struct sljit_compiler * compiler	629:57:18594:18624	1685914	0	True				
ANR	1686267	ParameterType	struct sljit_compiler *		1685914	0					
ANR	1686268	Identifier	compiler		1685914	1					
ANR	1686269	Parameter	sljit_si src	629:90:18627:18638	1685914	1	True				
ANR	1686270	ParameterType	sljit_si		1685914	0					
ANR	1686271	Identifier	src		1685914	1					
ANR	1686272	Parameter	sljit_sw srcw	629:104:18641:18653	1685914	2	True				
ANR	1686273	ParameterType	sljit_sw		1685914	0					
ANR	1686274	Identifier	srcw		1685914	1					
ANR	1686275	CFGEntryNode	ENTRY		1685914		True				
ANR	1686276	CFGExitNode	EXIT		1685914		True				
ANR	1686277	Symbol	emit_load_imm64		1685914						
ANR	1686278	Symbol	TMP_REG1		1685914						
ANR	1686279	Symbol	SLJIT_MEM		1685914						
ANR	1686280	Symbol	* inst ++		1685914						
ANR	1686281	Symbol	reg_map		1685914						
ANR	1686282	Symbol	* compiler		1685914						
ANR	1686283	Symbol	* src		1685914						
ANR	1686284	Symbol	SLJIT_IMM		1685914						
ANR	1686285	Symbol	* reg_lmap		1685914						
ANR	1686286	Symbol	IS_HALFWORD		1685914						
ANR	1686287	Symbol	compiler		1685914						
ANR	1686288	Symbol	emit_x86_instruction		1685914						
ANR	1686289	Symbol	FAST_IS_REG		1685914						
ANR	1686290	Symbol	* inst		1685914						
ANR	1686291	Symbol	src		1685914						
ANR	1686292	Symbol	srcw		1685914						
ANR	1686293	Symbol	NOT_HALFWORD		1685914						
ANR	1686294	Symbol	SLJIT_SUCCESS		1685914						
ANR	1686295	Symbol	* reg_map		1685914						
ANR	1686296	Symbol	REX_B		1685914						
ANR	1686297	Symbol	reg_lmap		1685914						
ANR	1686298	Symbol	PUSH_rm		1685914						
ANR	1686299	Symbol	check_sljit_emit_fast_return		1685914						
ANR	1686300	Symbol	GROUP_FF		1685914						
ANR	1686301	Symbol	PUSH_i32		1685914						
ANR	1686302	Symbol	inst		1685914						
ANR	1686303	Symbol	ensure_buf		1685914						
ANR	1686304	Symbol	compiler -> mode32		1685914						
ANR	1686305	Symbol	* ( sljit_si * ) inst		1685914						
ANR	1686306	Function	emit_mov_int	692:0:20057:21442							
ANR	1686307	FunctionDef	"emit_mov_int (struct sljit_compiler * compiler , sljit_si sign , sljit_si dst , sljit_sw dstw , sljit_si src , sljit_sw srcw)"		1686306	0					
ANR	1686308	CompoundStatement		695:0:20194:21442	1686306	0					
ANR	1686309	IdentifierDeclStatement	sljit_ub * inst ;	696:1:20197:20211	1686306	0	True				
ANR	1686310	IdentifierDecl	* inst		1686306	0					
ANR	1686311	IdentifierDeclType	sljit_ub *		1686306	0					
ANR	1686312	Identifier	inst		1686306	1					
ANR	1686313	IdentifierDeclStatement	sljit_si dst_r ;	697:1:20214:20228	1686306	1	True				
ANR	1686314	IdentifierDecl	dst_r		1686306	0					
ANR	1686315	IdentifierDeclType	sljit_si		1686306	0					
ANR	1686316	Identifier	dst_r		1686306	1					
ANR	1686317	ExpressionStatement	compiler -> mode32 = 0	699:1:20232:20252	1686306	2	True				
ANR	1686318	AssignmentExpression	compiler -> mode32 = 0		1686306	0		=			
ANR	1686319	PtrMemberAccess	compiler -> mode32		1686306	0					
ANR	1686320	Identifier	compiler		1686306	0					
ANR	1686321	Identifier	mode32		1686306	1					
ANR	1686322	PrimaryExpression	0		1686306	1					
ANR	1686323	IfStatement	if ( dst == SLJIT_UNUSED && ! ( src & SLJIT_MEM ) )		1686306	3					
ANR	1686324	Condition	dst == SLJIT_UNUSED && ! ( src & SLJIT_MEM )	701:5:20260:20300	1686306	0	True				
ANR	1686325	AndExpression	dst == SLJIT_UNUSED && ! ( src & SLJIT_MEM )		1686306	0		&&			
ANR	1686326	EqualityExpression	dst == SLJIT_UNUSED		1686306	0		==			
ANR	1686327	Identifier	dst		1686306	0					
ANR	1686328	Identifier	SLJIT_UNUSED		1686306	1					
ANR	1686329	UnaryOperationExpression	! ( src & SLJIT_MEM )		1686306	1					
ANR	1686330	UnaryOperator	!		1686306	0					
ANR	1686331	BitAndExpression	src & SLJIT_MEM		1686306	1		&			
ANR	1686332	Identifier	src		1686306	0					
ANR	1686333	Identifier	SLJIT_MEM		1686306	1					
ANR	1686334	ReturnStatement	return SLJIT_SUCCESS ;	702:2:20305:20325	1686306	1	True				
ANR	1686335	Identifier	SLJIT_SUCCESS		1686306	0					
ANR	1686336	IfStatement	if ( src & SLJIT_IMM )		1686306	4					
ANR	1686337	Condition	src & SLJIT_IMM	704:5:20358:20372	1686306	0	True				
ANR	1686338	BitAndExpression	src & SLJIT_IMM		1686306	0		&			
ANR	1686339	Identifier	src		1686306	0					
ANR	1686340	Identifier	SLJIT_IMM		1686306	1					
ANR	1686341	CompoundStatement		10:22:180:180	1686306	1					
ANR	1686342	IfStatement	if ( FAST_IS_REG ( dst ) )		1686306	0					
ANR	1686343	Condition	FAST_IS_REG ( dst )	705:6:20383:20398	1686306	0	True				
ANR	1686344	CallExpression	FAST_IS_REG ( dst )		1686306	0					
ANR	1686345	Callee	FAST_IS_REG		1686306	0					
ANR	1686346	Identifier	FAST_IS_REG		1686306	0					
ANR	1686347	ArgumentList	dst		1686306	1					
ANR	1686348	Argument	dst		1686306	0					
ANR	1686349	Identifier	dst		1686306	0					
ANR	1686350	CompoundStatement		11:24:206:206	1686306	1					
ANR	1686351	IfStatement	if ( sign || ( ( sljit_uw ) srcw <= 0x7fffffff ) )		1686306	0					
ANR	1686352	Condition	sign || ( ( sljit_uw ) srcw <= 0x7fffffff )	706:7:20410:20447	1686306	0	True				
ANR	1686353	OrExpression	sign || ( ( sljit_uw ) srcw <= 0x7fffffff )		1686306	0		||			
ANR	1686354	Identifier	sign		1686306	0					
ANR	1686355	RelationalExpression	( sljit_uw ) srcw <= 0x7fffffff		1686306	1		<=			
ANR	1686356	CastExpression	( sljit_uw ) srcw		1686306	0					
ANR	1686357	CastTarget	sljit_uw		1686306	0					
ANR	1686358	Identifier	srcw		1686306	1					
ANR	1686359	PrimaryExpression	0x7fffffff		1686306	1					
ANR	1686360	CompoundStatement		12:47:255:255	1686306	1					
ANR	1686361	ExpressionStatement	"inst = emit_x86_instruction ( compiler , 1 , SLJIT_IMM , ( sljit_sw ) ( sljit_si ) srcw , dst , dstw )"	707:4:20456:20544	1686306	0	True				
ANR	1686362	AssignmentExpression	"inst = emit_x86_instruction ( compiler , 1 , SLJIT_IMM , ( sljit_sw ) ( sljit_si ) srcw , dst , dstw )"		1686306	0		=			
ANR	1686363	Identifier	inst		1686306	0					
ANR	1686364	CallExpression	"emit_x86_instruction ( compiler , 1 , SLJIT_IMM , ( sljit_sw ) ( sljit_si ) srcw , dst , dstw )"		1686306	1					
ANR	1686365	Callee	emit_x86_instruction		1686306	0					
ANR	1686366	Identifier	emit_x86_instruction		1686306	0					
ANR	1686367	ArgumentList	compiler		1686306	1					
ANR	1686368	Argument	compiler		1686306	0					
ANR	1686369	Identifier	compiler		1686306	0					
ANR	1686370	Argument	1		1686306	1					
ANR	1686371	PrimaryExpression	1		1686306	0					
ANR	1686372	Argument	SLJIT_IMM		1686306	2					
ANR	1686373	Identifier	SLJIT_IMM		1686306	0					
ANR	1686374	Argument	( sljit_sw ) ( sljit_si ) srcw		1686306	3					
ANR	1686375	CastExpression	( sljit_sw ) ( sljit_si ) srcw		1686306	0					
ANR	1686376	CastTarget	sljit_sw		1686306	0					
ANR	1686377	CastExpression	( sljit_si ) srcw		1686306	1					
ANR	1686378	CastTarget	sljit_si		1686306	0					
ANR	1686379	Identifier	srcw		1686306	1					
ANR	1686380	Argument	dst		1686306	4					
ANR	1686381	Identifier	dst		1686306	0					
ANR	1686382	Argument	dstw		1686306	5					
ANR	1686383	Identifier	dstw		1686306	0					
ANR	1686384	ExpressionStatement	FAIL_IF ( ! inst )	708:4:20550:20564	1686306	1	True				
ANR	1686385	CallExpression	FAIL_IF ( ! inst )		1686306	0					
ANR	1686386	Callee	FAIL_IF		1686306	0					
ANR	1686387	Identifier	FAIL_IF		1686306	0					
ANR	1686388	ArgumentList	! inst		1686306	1					
ANR	1686389	Argument	! inst		1686306	0					
ANR	1686390	UnaryOperationExpression	! inst		1686306	0					
ANR	1686391	UnaryOperator	!		1686306	0					
ANR	1686392	Identifier	inst		1686306	1					
ANR	1686393	ExpressionStatement	* inst = MOV_rm_i32	709:4:20570:20588	1686306	2	True				
ANR	1686394	AssignmentExpression	* inst = MOV_rm_i32		1686306	0		=			
ANR	1686395	UnaryOperationExpression	* inst		1686306	0					
ANR	1686396	UnaryOperator	*		1686306	0					
ANR	1686397	Identifier	inst		1686306	1					
ANR	1686398	Identifier	MOV_rm_i32		1686306	1					
ANR	1686399	ReturnStatement	return SLJIT_SUCCESS ;	710:4:20594:20614	1686306	3	True				
ANR	1686400	Identifier	SLJIT_SUCCESS		1686306	0					
ANR	1686401	ReturnStatement	"return emit_load_imm64 ( compiler , dst , srcw ) ;"	712:3:20624:20667	1686306	1	True				
ANR	1686402	CallExpression	"emit_load_imm64 ( compiler , dst , srcw )"		1686306	0					
ANR	1686403	Callee	emit_load_imm64		1686306	0					
ANR	1686404	Identifier	emit_load_imm64		1686306	0					
ANR	1686405	ArgumentList	compiler		1686306	1					
ANR	1686406	Argument	compiler		1686306	0					
ANR	1686407	Identifier	compiler		1686306	0					
ANR	1686408	Argument	dst		1686306	1					
ANR	1686409	Identifier	dst		1686306	0					
ANR	1686410	Argument	srcw		1686306	2					
ANR	1686411	Identifier	srcw		1686306	0					
ANR	1686412	ExpressionStatement	compiler -> mode32 = 1	714:2:20675:20695	1686306	1	True				
ANR	1686413	AssignmentExpression	compiler -> mode32 = 1		1686306	0		=			
ANR	1686414	PtrMemberAccess	compiler -> mode32		1686306	0					
ANR	1686415	Identifier	compiler		1686306	0					
ANR	1686416	Identifier	mode32		1686306	1					
ANR	1686417	PrimaryExpression	1		1686306	1					
ANR	1686418	ExpressionStatement	"inst = emit_x86_instruction ( compiler , 1 , SLJIT_IMM , ( sljit_sw ) ( sljit_si ) srcw , dst , dstw )"	715:2:20699:20787	1686306	2	True				
ANR	1686419	AssignmentExpression	"inst = emit_x86_instruction ( compiler , 1 , SLJIT_IMM , ( sljit_sw ) ( sljit_si ) srcw , dst , dstw )"		1686306	0		=			
ANR	1686420	Identifier	inst		1686306	0					
ANR	1686421	CallExpression	"emit_x86_instruction ( compiler , 1 , SLJIT_IMM , ( sljit_sw ) ( sljit_si ) srcw , dst , dstw )"		1686306	1					
ANR	1686422	Callee	emit_x86_instruction		1686306	0					
ANR	1686423	Identifier	emit_x86_instruction		1686306	0					
ANR	1686424	ArgumentList	compiler		1686306	1					
ANR	1686425	Argument	compiler		1686306	0					
ANR	1686426	Identifier	compiler		1686306	0					
ANR	1686427	Argument	1		1686306	1					
ANR	1686428	PrimaryExpression	1		1686306	0					
ANR	1686429	Argument	SLJIT_IMM		1686306	2					
ANR	1686430	Identifier	SLJIT_IMM		1686306	0					
ANR	1686431	Argument	( sljit_sw ) ( sljit_si ) srcw		1686306	3					
ANR	1686432	CastExpression	( sljit_sw ) ( sljit_si ) srcw		1686306	0					
ANR	1686433	CastTarget	sljit_sw		1686306	0					
ANR	1686434	CastExpression	( sljit_si ) srcw		1686306	1					
ANR	1686435	CastTarget	sljit_si		1686306	0					
ANR	1686436	Identifier	srcw		1686306	1					
ANR	1686437	Argument	dst		1686306	4					
ANR	1686438	Identifier	dst		1686306	0					
ANR	1686439	Argument	dstw		1686306	5					
ANR	1686440	Identifier	dstw		1686306	0					
ANR	1686441	ExpressionStatement	FAIL_IF ( ! inst )	716:2:20791:20805	1686306	3	True				
ANR	1686442	CallExpression	FAIL_IF ( ! inst )		1686306	0					
ANR	1686443	Callee	FAIL_IF		1686306	0					
ANR	1686444	Identifier	FAIL_IF		1686306	0					
ANR	1686445	ArgumentList	! inst		1686306	1					
ANR	1686446	Argument	! inst		1686306	0					
ANR	1686447	UnaryOperationExpression	! inst		1686306	0					
ANR	1686448	UnaryOperator	!		1686306	0					
ANR	1686449	Identifier	inst		1686306	1					
ANR	1686450	ExpressionStatement	* inst = MOV_rm_i32	717:2:20809:20827	1686306	4	True				
ANR	1686451	AssignmentExpression	* inst = MOV_rm_i32		1686306	0		=			
ANR	1686452	UnaryOperationExpression	* inst		1686306	0					
ANR	1686453	UnaryOperator	*		1686306	0					
ANR	1686454	Identifier	inst		1686306	1					
ANR	1686455	Identifier	MOV_rm_i32		1686306	1					
ANR	1686456	ExpressionStatement	compiler -> mode32 = 0	718:2:20831:20851	1686306	5	True				
ANR	1686457	AssignmentExpression	compiler -> mode32 = 0		1686306	0		=			
ANR	1686458	PtrMemberAccess	compiler -> mode32		1686306	0					
ANR	1686459	Identifier	compiler		1686306	0					
ANR	1686460	Identifier	mode32		1686306	1					
ANR	1686461	PrimaryExpression	0		1686306	1					
ANR	1686462	ReturnStatement	return SLJIT_SUCCESS ;	719:2:20855:20875	1686306	6	True				
ANR	1686463	Identifier	SLJIT_SUCCESS		1686306	0					
ANR	1686464	ExpressionStatement	dst_r = FAST_IS_REG ( dst ) ? dst : TMP_REG1	722:1:20882:20923	1686306	5	True				
ANR	1686465	AssignmentExpression	dst_r = FAST_IS_REG ( dst ) ? dst : TMP_REG1		1686306	0		=			
ANR	1686466	Identifier	dst_r		1686306	0					
ANR	1686467	ConditionalExpression	FAST_IS_REG ( dst ) ? dst : TMP_REG1		1686306	1					
ANR	1686468	Condition	FAST_IS_REG ( dst )		1686306	0					
ANR	1686469	CallExpression	FAST_IS_REG ( dst )		1686306	0					
ANR	1686470	Callee	FAST_IS_REG		1686306	0					
ANR	1686471	Identifier	FAST_IS_REG		1686306	0					
ANR	1686472	ArgumentList	dst		1686306	1					
ANR	1686473	Argument	dst		1686306	0					
ANR	1686474	Identifier	dst		1686306	0					
ANR	1686475	Identifier	dst		1686306	1					
ANR	1686476	Identifier	TMP_REG1		1686306	2					
ANR	1686477	IfStatement	if ( ( dst & SLJIT_MEM ) && FAST_IS_REG ( src ) )		1686306	6					
ANR	1686478	Condition	( dst & SLJIT_MEM ) && FAST_IS_REG ( src )	724:5:20931:20967	1686306	0	True				
ANR	1686479	AndExpression	( dst & SLJIT_MEM ) && FAST_IS_REG ( src )		1686306	0		&&			
ANR	1686480	BitAndExpression	dst & SLJIT_MEM		1686306	0		&			
ANR	1686481	Identifier	dst		1686306	0					
ANR	1686482	Identifier	SLJIT_MEM		1686306	1					
ANR	1686483	CallExpression	FAST_IS_REG ( src )		1686306	1					
ANR	1686484	Callee	FAST_IS_REG		1686306	0					
ANR	1686485	Identifier	FAST_IS_REG		1686306	0					
ANR	1686486	ArgumentList	src		1686306	1					
ANR	1686487	Argument	src		1686306	0					
ANR	1686488	Identifier	src		1686306	0					
ANR	1686489	ExpressionStatement	dst_r = src	725:2:20972:20983	1686306	1	True				
ANR	1686490	AssignmentExpression	dst_r = src		1686306	0		=			
ANR	1686491	Identifier	dst_r		1686306	0					
ANR	1686492	Identifier	src		1686306	1					
ANR	1686493	ElseStatement	else		1686306	0					
ANR	1686494	CompoundStatement		32:6:796:796	1686306	0					
ANR	1686495	IfStatement	if ( sign )		1686306	0					
ANR	1686496	Condition	sign	727:6:20999:21002	1686306	0	True				
ANR	1686497	Identifier	sign		1686306	0					
ANR	1686498	CompoundStatement		33:12:810:810	1686306	1					
ANR	1686499	ExpressionStatement	"inst = emit_x86_instruction ( compiler , 1 , dst_r , 0 , src , srcw )"	728:3:21010:21071	1686306	0	True				
ANR	1686500	AssignmentExpression	"inst = emit_x86_instruction ( compiler , 1 , dst_r , 0 , src , srcw )"		1686306	0		=			
ANR	1686501	Identifier	inst		1686306	0					
ANR	1686502	CallExpression	"emit_x86_instruction ( compiler , 1 , dst_r , 0 , src , srcw )"		1686306	1					
ANR	1686503	Callee	emit_x86_instruction		1686306	0					
ANR	1686504	Identifier	emit_x86_instruction		1686306	0					
ANR	1686505	ArgumentList	compiler		1686306	1					
ANR	1686506	Argument	compiler		1686306	0					
ANR	1686507	Identifier	compiler		1686306	0					
ANR	1686508	Argument	1		1686306	1					
ANR	1686509	PrimaryExpression	1		1686306	0					
ANR	1686510	Argument	dst_r		1686306	2					
ANR	1686511	Identifier	dst_r		1686306	0					
ANR	1686512	Argument	0		1686306	3					
ANR	1686513	PrimaryExpression	0		1686306	0					
ANR	1686514	Argument	src		1686306	4					
ANR	1686515	Identifier	src		1686306	0					
ANR	1686516	Argument	srcw		1686306	5					
ANR	1686517	Identifier	srcw		1686306	0					
ANR	1686518	ExpressionStatement	FAIL_IF ( ! inst )	729:3:21076:21090	1686306	1	True				
ANR	1686519	CallExpression	FAIL_IF ( ! inst )		1686306	0					
ANR	1686520	Callee	FAIL_IF		1686306	0					
ANR	1686521	Identifier	FAIL_IF		1686306	0					
ANR	1686522	ArgumentList	! inst		1686306	1					
ANR	1686523	Argument	! inst		1686306	0					
ANR	1686524	UnaryOperationExpression	! inst		1686306	0					
ANR	1686525	UnaryOperator	!		1686306	0					
ANR	1686526	Identifier	inst		1686306	1					
ANR	1686527	ExpressionStatement	* inst ++ = MOVSXD_r_rm	730:3:21095:21116	1686306	2	True				
ANR	1686528	AssignmentExpression	* inst ++ = MOVSXD_r_rm		1686306	0		=			
ANR	1686529	UnaryOperationExpression	* inst ++		1686306	0					
ANR	1686530	UnaryOperator	*		1686306	0					
ANR	1686531	PostIncDecOperationExpression	inst ++		1686306	1					
ANR	1686532	Identifier	inst		1686306	0					
ANR	1686533	IncDec	++		1686306	1					
ANR	1686534	Identifier	MOVSXD_r_rm		1686306	1					
ANR	1686535	ElseStatement	else		1686306	0					
ANR	1686536	CompoundStatement		37:9:932:932	1686306	0					
ANR	1686537	ExpressionStatement	compiler -> mode32 = 1	732:3:21132:21152	1686306	0	True				
ANR	1686538	AssignmentExpression	compiler -> mode32 = 1		1686306	0		=			
ANR	1686539	PtrMemberAccess	compiler -> mode32		1686306	0					
ANR	1686540	Identifier	compiler		1686306	0					
ANR	1686541	Identifier	mode32		1686306	1					
ANR	1686542	PrimaryExpression	1		1686306	1					
ANR	1686543	ExpressionStatement	"FAIL_IF ( emit_mov ( compiler , dst_r , 0 , src , srcw ) )"	733:3:21157:21205	1686306	1	True				
ANR	1686544	CallExpression	"FAIL_IF ( emit_mov ( compiler , dst_r , 0 , src , srcw ) )"		1686306	0					
ANR	1686545	Callee	FAIL_IF		1686306	0					
ANR	1686546	Identifier	FAIL_IF		1686306	0					
ANR	1686547	ArgumentList	"emit_mov ( compiler , dst_r , 0 , src , srcw )"		1686306	1					
ANR	1686548	Argument	"emit_mov ( compiler , dst_r , 0 , src , srcw )"		1686306	0					
ANR	1686549	CallExpression	"emit_mov ( compiler , dst_r , 0 , src , srcw )"		1686306	0					
ANR	1686550	Callee	emit_mov		1686306	0					
ANR	1686551	Identifier	emit_mov		1686306	0					
ANR	1686552	ArgumentList	compiler		1686306	1					
ANR	1686553	Argument	compiler		1686306	0					
ANR	1686554	Identifier	compiler		1686306	0					
ANR	1686555	Argument	dst_r		1686306	1					
ANR	1686556	Identifier	dst_r		1686306	0					
ANR	1686557	Argument	0		1686306	2					
ANR	1686558	PrimaryExpression	0		1686306	0					
ANR	1686559	Argument	src		1686306	3					
ANR	1686560	Identifier	src		1686306	0					
ANR	1686561	Argument	srcw		1686306	4					
ANR	1686562	Identifier	srcw		1686306	0					
ANR	1686563	ExpressionStatement	compiler -> mode32 = 0	734:3:21210:21230	1686306	2	True				
ANR	1686564	AssignmentExpression	compiler -> mode32 = 0		1686306	0		=			
ANR	1686565	PtrMemberAccess	compiler -> mode32		1686306	0					
ANR	1686566	Identifier	compiler		1686306	0					
ANR	1686567	Identifier	mode32		1686306	1					
ANR	1686568	PrimaryExpression	0		1686306	1					
ANR	1686569	IfStatement	if ( dst & SLJIT_MEM )		1686306	7					
ANR	1686570	Condition	dst & SLJIT_MEM	738:5:21245:21259	1686306	0	True				
ANR	1686571	BitAndExpression	dst & SLJIT_MEM		1686306	0		&			
ANR	1686572	Identifier	dst		1686306	0					
ANR	1686573	Identifier	SLJIT_MEM		1686306	1					
ANR	1686574	CompoundStatement		44:22:1067:1067	1686306	1					
ANR	1686575	ExpressionStatement	compiler -> mode32 = 1	739:2:21266:21286	1686306	0	True				
ANR	1686576	AssignmentExpression	compiler -> mode32 = 1		1686306	0		=			
ANR	1686577	PtrMemberAccess	compiler -> mode32		1686306	0					
ANR	1686578	Identifier	compiler		1686306	0					
ANR	1686579	Identifier	mode32		1686306	1					
ANR	1686580	PrimaryExpression	1		1686306	1					
ANR	1686581	ExpressionStatement	"inst = emit_x86_instruction ( compiler , 1 , dst_r , 0 , dst , dstw )"	740:2:21290:21351	1686306	1	True				
ANR	1686582	AssignmentExpression	"inst = emit_x86_instruction ( compiler , 1 , dst_r , 0 , dst , dstw )"		1686306	0		=			
ANR	1686583	Identifier	inst		1686306	0					
ANR	1686584	CallExpression	"emit_x86_instruction ( compiler , 1 , dst_r , 0 , dst , dstw )"		1686306	1					
ANR	1686585	Callee	emit_x86_instruction		1686306	0					
ANR	1686586	Identifier	emit_x86_instruction		1686306	0					
ANR	1686587	ArgumentList	compiler		1686306	1					
ANR	1686588	Argument	compiler		1686306	0					
ANR	1686589	Identifier	compiler		1686306	0					
ANR	1686590	Argument	1		1686306	1					
ANR	1686591	PrimaryExpression	1		1686306	0					
ANR	1686592	Argument	dst_r		1686306	2					
ANR	1686593	Identifier	dst_r		1686306	0					
ANR	1686594	Argument	0		1686306	3					
ANR	1686595	PrimaryExpression	0		1686306	0					
ANR	1686596	Argument	dst		1686306	4					
ANR	1686597	Identifier	dst		1686306	0					
ANR	1686598	Argument	dstw		1686306	5					
ANR	1686599	Identifier	dstw		1686306	0					
ANR	1686600	ExpressionStatement	FAIL_IF ( ! inst )	741:2:21355:21369	1686306	2	True				
ANR	1686601	CallExpression	FAIL_IF ( ! inst )		1686306	0					
ANR	1686602	Callee	FAIL_IF		1686306	0					
ANR	1686603	Identifier	FAIL_IF		1686306	0					
ANR	1686604	ArgumentList	! inst		1686306	1					
ANR	1686605	Argument	! inst		1686306	0					
ANR	1686606	UnaryOperationExpression	! inst		1686306	0					
ANR	1686607	UnaryOperator	!		1686306	0					
ANR	1686608	Identifier	inst		1686306	1					
ANR	1686609	ExpressionStatement	* inst = MOV_rm_r	742:2:21373:21389	1686306	3	True				
ANR	1686610	AssignmentExpression	* inst = MOV_rm_r		1686306	0		=			
ANR	1686611	UnaryOperationExpression	* inst		1686306	0					
ANR	1686612	UnaryOperator	*		1686306	0					
ANR	1686613	Identifier	inst		1686306	1					
ANR	1686614	Identifier	MOV_rm_r		1686306	1					
ANR	1686615	ExpressionStatement	compiler -> mode32 = 0	743:2:21393:21413	1686306	4	True				
ANR	1686616	AssignmentExpression	compiler -> mode32 = 0		1686306	0		=			
ANR	1686617	PtrMemberAccess	compiler -> mode32		1686306	0					
ANR	1686618	Identifier	compiler		1686306	0					
ANR	1686619	Identifier	mode32		1686306	1					
ANR	1686620	PrimaryExpression	0		1686306	1					
ANR	1686621	ReturnStatement	return SLJIT_SUCCESS ;	746:1:21420:21440	1686306	8	True				
ANR	1686622	Identifier	SLJIT_SUCCESS		1686306	0					
ANR	1686623	ReturnType	static sljit_si		1686306	1					
ANR	1686624	Identifier	emit_mov_int		1686306	2					
ANR	1686625	ParameterList	"struct sljit_compiler * compiler , sljit_si sign , sljit_si dst , sljit_sw dstw , sljit_si src , sljit_sw srcw"		1686306	3					
ANR	1686626	Parameter	struct sljit_compiler * compiler	692:29:20086:20116	1686306	0	True				
ANR	1686627	ParameterType	struct sljit_compiler *		1686306	0					
ANR	1686628	Identifier	compiler		1686306	1					
ANR	1686629	Parameter	sljit_si sign	692:62:20119:20131	1686306	1	True				
ANR	1686630	ParameterType	sljit_si		1686306	0					
ANR	1686631	Identifier	sign		1686306	1					
ANR	1686632	Parameter	sljit_si dst	693:1:20135:20146	1686306	2	True				
ANR	1686633	ParameterType	sljit_si		1686306	0					
ANR	1686634	Identifier	dst		1686306	1					
ANR	1686635	Parameter	sljit_sw dstw	693:15:20149:20161	1686306	3	True				
ANR	1686636	ParameterType	sljit_sw		1686306	0					
ANR	1686637	Identifier	dstw		1686306	1					
ANR	1686638	Parameter	sljit_si src	694:1:20165:20176	1686306	4	True				
ANR	1686639	ParameterType	sljit_si		1686306	0					
ANR	1686640	Identifier	src		1686306	1					
ANR	1686641	Parameter	sljit_sw srcw	694:15:20179:20191	1686306	5	True				
ANR	1686642	ParameterType	sljit_sw		1686306	0					
ANR	1686643	Identifier	srcw		1686306	1					
ANR	1686644	CFGEntryNode	ENTRY		1686306		True				
ANR	1686645	CFGExitNode	EXIT		1686306		True				
ANR	1686646	Symbol	emit_load_imm64		1686306						
ANR	1686647	Symbol	emit_x86_instruction		1686306						
ANR	1686648	Symbol	TMP_REG1		1686306						
ANR	1686649	Symbol	FAST_IS_REG		1686306						
ANR	1686650	Symbol	* inst		1686306						
ANR	1686651	Symbol	dst		1686306						
ANR	1686652	Symbol	src		1686306						
ANR	1686653	Symbol	srcw		1686306						
ANR	1686654	Symbol	SLJIT_MEM		1686306						
ANR	1686655	Symbol	sign		1686306						
ANR	1686656	Symbol	* inst ++		1686306						
ANR	1686657	Symbol	SLJIT_SUCCESS		1686306						
ANR	1686658	Symbol	* compiler		1686306						
ANR	1686659	Symbol	MOVSXD_r_rm		1686306						
ANR	1686660	Symbol	MOV_rm_r		1686306						
ANR	1686661	Symbol	dst_r		1686306						
ANR	1686662	Symbol	MOV_rm_i32		1686306						
ANR	1686663	Symbol	SLJIT_IMM		1686306						
ANR	1686664	Symbol	emit_mov		1686306						
ANR	1686665	Symbol	SLJIT_UNUSED		1686306						
ANR	1686666	Symbol	inst		1686306						
ANR	1686667	Symbol	compiler -> mode32		1686306						
ANR	1686668	Symbol	compiler		1686306						
ANR	1686669	Symbol	dstw		1686306						
