command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	314768	File	data/converged/CVE-2015-8617_php-src/Zend_zend_opcode.c								
ANR	314769	Function	zend_extension_op_array_ctor_handler	33:0:1473:1650							
ANR	314770	FunctionDef	"zend_extension_op_array_ctor_handler (zend_extension * extension , zend_op_array * op_array)"		314769	0					
ANR	314771	CompoundStatement		34:0:1574:1650	314769	0					
ANR	314772	IfStatement	if ( extension -> op_array_ctor )		314769	0					
ANR	314773	Condition	extension -> op_array_ctor	35:5:1581:1604	314769	0	True				
ANR	314774	PtrMemberAccess	extension -> op_array_ctor		314769	0					
ANR	314775	Identifier	extension		314769	0					
ANR	314776	Identifier	op_array_ctor		314769	1					
ANR	314777	CompoundStatement		2:31:32:32	314769	1					
ANR	314778	ExpressionStatement	extension -> op_array_ctor ( op_array )	36:2:1611:1645	314769	0	True				
ANR	314779	CallExpression	extension -> op_array_ctor ( op_array )		314769	0					
ANR	314780	Callee	extension -> op_array_ctor		314769	0					
ANR	314781	PtrMemberAccess	extension -> op_array_ctor		314769	0					
ANR	314782	Identifier	extension		314769	0					
ANR	314783	Identifier	op_array_ctor		314769	1					
ANR	314784	ArgumentList	op_array		314769	1					
ANR	314785	Argument	op_array		314769	0					
ANR	314786	Identifier	op_array		314769	0					
ANR	314787	ReturnType	static void		314769	1					
ANR	314788	Identifier	zend_extension_op_array_ctor_handler		314769	2					
ANR	314789	ParameterList	"zend_extension * extension , zend_op_array * op_array"		314769	3					
ANR	314790	Parameter	zend_extension * extension	33:49:1522:1546	314769	0	True				
ANR	314791	ParameterType	zend_extension *		314769	0					
ANR	314792	Identifier	extension		314769	1					
ANR	314793	Parameter	zend_op_array * op_array	33:76:1549:1571	314769	1	True				
ANR	314794	ParameterType	zend_op_array *		314769	0					
ANR	314795	Identifier	op_array		314769	1					
ANR	314796	CFGEntryNode	ENTRY		314769		True				
ANR	314797	CFGExitNode	EXIT		314769		True				
ANR	314798	Symbol	extension -> op_array_ctor		314769						
ANR	314799	Symbol	extension		314769						
ANR	314800	Symbol	* extension		314769						
ANR	314801	Symbol	op_array		314769						
ANR	314802	Function	zend_extension_op_array_dtor_handler	40:0:1653:1830							
ANR	314803	FunctionDef	"zend_extension_op_array_dtor_handler (zend_extension * extension , zend_op_array * op_array)"		314802	0					
ANR	314804	CompoundStatement		41:0:1754:1830	314802	0					
ANR	314805	IfStatement	if ( extension -> op_array_dtor )		314802	0					
ANR	314806	Condition	extension -> op_array_dtor	42:5:1761:1784	314802	0	True				
ANR	314807	PtrMemberAccess	extension -> op_array_dtor		314802	0					
ANR	314808	Identifier	extension		314802	0					
ANR	314809	Identifier	op_array_dtor		314802	1					
ANR	314810	CompoundStatement		2:31:32:32	314802	1					
ANR	314811	ExpressionStatement	extension -> op_array_dtor ( op_array )	43:2:1791:1825	314802	0	True				
ANR	314812	CallExpression	extension -> op_array_dtor ( op_array )		314802	0					
ANR	314813	Callee	extension -> op_array_dtor		314802	0					
ANR	314814	PtrMemberAccess	extension -> op_array_dtor		314802	0					
ANR	314815	Identifier	extension		314802	0					
ANR	314816	Identifier	op_array_dtor		314802	1					
ANR	314817	ArgumentList	op_array		314802	1					
ANR	314818	Argument	op_array		314802	0					
ANR	314819	Identifier	op_array		314802	0					
ANR	314820	ReturnType	static void		314802	1					
ANR	314821	Identifier	zend_extension_op_array_dtor_handler		314802	2					
ANR	314822	ParameterList	"zend_extension * extension , zend_op_array * op_array"		314802	3					
ANR	314823	Parameter	zend_extension * extension	40:49:1702:1726	314802	0	True				
ANR	314824	ParameterType	zend_extension *		314802	0					
ANR	314825	Identifier	extension		314802	1					
ANR	314826	Parameter	zend_op_array * op_array	40:76:1729:1751	314802	1	True				
ANR	314827	ParameterType	zend_op_array *		314802	0					
ANR	314828	Identifier	op_array		314802	1					
ANR	314829	CFGEntryNode	ENTRY		314802		True				
ANR	314830	CFGExitNode	EXIT		314802		True				
ANR	314831	Symbol	extension		314802						
ANR	314832	Symbol	extension -> op_array_dtor		314802						
ANR	314833	Symbol	* extension		314802						
ANR	314834	Symbol	op_array		314802						
ANR	314835	Function	op_array_alloc_ops	47:0:1833:1980							
ANR	314836	FunctionDef	"op_array_alloc_ops (zend_op_array * op_array , uint32_t size)"		314835	0					
ANR	314837	CompoundStatement		48:0:1904:1980	314835	0					
ANR	314838	ExpressionStatement	"op_array -> opcodes = erealloc ( op_array -> opcodes , size * sizeof ( zend_op ) )"	49:1:1907:1978	314835	0	True				
ANR	314839	AssignmentExpression	"op_array -> opcodes = erealloc ( op_array -> opcodes , size * sizeof ( zend_op ) )"		314835	0		=			
ANR	314840	PtrMemberAccess	op_array -> opcodes		314835	0					
ANR	314841	Identifier	op_array		314835	0					
ANR	314842	Identifier	opcodes		314835	1					
ANR	314843	CallExpression	"erealloc ( op_array -> opcodes , size * sizeof ( zend_op ) )"		314835	1					
ANR	314844	Callee	erealloc		314835	0					
ANR	314845	Identifier	erealloc		314835	0					
ANR	314846	ArgumentList	op_array -> opcodes		314835	1					
ANR	314847	Argument	op_array -> opcodes		314835	0					
ANR	314848	PtrMemberAccess	op_array -> opcodes		314835	0					
ANR	314849	Identifier	op_array		314835	0					
ANR	314850	Identifier	opcodes		314835	1					
ANR	314851	Argument	size * sizeof ( zend_op )		314835	1					
ANR	314852	MultiplicativeExpression	size * sizeof ( zend_op )		314835	0		*			
ANR	314853	Identifier	size		314835	0					
ANR	314854	SizeofExpression	sizeof ( zend_op )		314835	1					
ANR	314855	Sizeof	sizeof		314835	0					
ANR	314856	SizeofOperand	zend_op		314835	1					
ANR	314857	ReturnType	static void		314835	1					
ANR	314858	Identifier	op_array_alloc_ops		314835	2					
ANR	314859	ParameterList	"zend_op_array * op_array , uint32_t size"		314835	3					
ANR	314860	Parameter	zend_op_array * op_array	47:31:1864:1886	314835	0	True				
ANR	314861	ParameterType	zend_op_array *		314835	0					
ANR	314862	Identifier	op_array		314835	1					
ANR	314863	Parameter	uint32_t size	47:56:1889:1901	314835	1	True				
ANR	314864	ParameterType	uint32_t		314835	0					
ANR	314865	Identifier	size		314835	1					
ANR	314866	CFGEntryNode	ENTRY		314835		True				
ANR	314867	CFGExitNode	EXIT		314835		True				
ANR	314868	Symbol	op_array -> opcodes		314835						
ANR	314869	Symbol	size		314835						
ANR	314870	Symbol	erealloc		314835						
ANR	314871	Symbol	op_array		314835						
ANR	314872	Symbol	* op_array		314835						
ANR	314873	Function	init_op_array	52:0:1983:3345							
ANR	314874	FunctionDef	"init_op_array (zend_op_array * op_array , zend_uchar type , int initial_ops_size)"		314873	0					
ANR	314875	CompoundStatement		53:0:2066:3345	314873	0					
ANR	314876	ExpressionStatement	op_array -> type = type	54:1:2069:2090	314873	0	True				
ANR	314877	AssignmentExpression	op_array -> type = type		314873	0		=			
ANR	314878	PtrMemberAccess	op_array -> type		314873	0					
ANR	314879	Identifier	op_array		314873	0					
ANR	314880	Identifier	type		314873	1					
ANR	314881	Identifier	type		314873	1					
ANR	314882	ExpressionStatement	op_array -> arg_flags [ 0 ] = 0	55:1:2093:2119	314873	1	True				
ANR	314883	AssignmentExpression	op_array -> arg_flags [ 0 ] = 0		314873	0		=			
ANR	314884	ArrayIndexing	op_array -> arg_flags [ 0 ]		314873	0					
ANR	314885	PtrMemberAccess	op_array -> arg_flags		314873	0					
ANR	314886	Identifier	op_array		314873	0					
ANR	314887	Identifier	arg_flags		314873	1					
ANR	314888	PrimaryExpression	0		314873	1					
ANR	314889	PrimaryExpression	0		314873	1					
ANR	314890	ExpressionStatement	op_array -> arg_flags [ 1 ] = 0	56:1:2122:2148	314873	2	True				
ANR	314891	AssignmentExpression	op_array -> arg_flags [ 1 ] = 0		314873	0		=			
ANR	314892	ArrayIndexing	op_array -> arg_flags [ 1 ]		314873	0					
ANR	314893	PtrMemberAccess	op_array -> arg_flags		314873	0					
ANR	314894	Identifier	op_array		314873	0					
ANR	314895	Identifier	arg_flags		314873	1					
ANR	314896	PrimaryExpression	1		314873	1					
ANR	314897	PrimaryExpression	0		314873	1					
ANR	314898	ExpressionStatement	op_array -> arg_flags [ 2 ] = 0	57:1:2151:2177	314873	3	True				
ANR	314899	AssignmentExpression	op_array -> arg_flags [ 2 ] = 0		314873	0		=			
ANR	314900	ArrayIndexing	op_array -> arg_flags [ 2 ]		314873	0					
ANR	314901	PtrMemberAccess	op_array -> arg_flags		314873	0					
ANR	314902	Identifier	op_array		314873	0					
ANR	314903	Identifier	arg_flags		314873	1					
ANR	314904	PrimaryExpression	2		314873	1					
ANR	314905	PrimaryExpression	0		314873	1					
ANR	314906	ExpressionStatement	op_array -> refcount = ( uint32_t * ) emalloc ( sizeof ( uint32_t ) )	59:1:2181:2240	314873	4	True				
ANR	314907	AssignmentExpression	op_array -> refcount = ( uint32_t * ) emalloc ( sizeof ( uint32_t ) )		314873	0		=			
ANR	314908	PtrMemberAccess	op_array -> refcount		314873	0					
ANR	314909	Identifier	op_array		314873	0					
ANR	314910	Identifier	refcount		314873	1					
ANR	314911	CastExpression	( uint32_t * ) emalloc ( sizeof ( uint32_t ) )		314873	1					
ANR	314912	CastTarget	uint32_t *		314873	0					
ANR	314913	CallExpression	emalloc ( sizeof ( uint32_t ) )		314873	1					
ANR	314914	Callee	emalloc		314873	0					
ANR	314915	Identifier	emalloc		314873	0					
ANR	314916	ArgumentList	sizeof ( uint32_t )		314873	1					
ANR	314917	Argument	sizeof ( uint32_t )		314873	0					
ANR	314918	SizeofExpression	sizeof ( uint32_t )		314873	0					
ANR	314919	Sizeof	sizeof		314873	0					
ANR	314920	SizeofOperand	uint32_t		314873	1					
ANR	314921	ExpressionStatement	* op_array -> refcount = 1	60:1:2243:2266	314873	5	True				
ANR	314922	AssignmentExpression	* op_array -> refcount = 1		314873	0		=			
ANR	314923	UnaryOperationExpression	* op_array -> refcount		314873	0					
ANR	314924	UnaryOperator	*		314873	0					
ANR	314925	PtrMemberAccess	op_array -> refcount		314873	1					
ANR	314926	Identifier	op_array		314873	0					
ANR	314927	Identifier	refcount		314873	1					
ANR	314928	PrimaryExpression	1		314873	1					
ANR	314929	ExpressionStatement	op_array -> last = 0	61:1:2269:2287	314873	6	True				
ANR	314930	AssignmentExpression	op_array -> last = 0		314873	0		=			
ANR	314931	PtrMemberAccess	op_array -> last		314873	0					
ANR	314932	Identifier	op_array		314873	0					
ANR	314933	Identifier	last		314873	1					
ANR	314934	PrimaryExpression	0		314873	1					
ANR	314935	ExpressionStatement	op_array -> opcodes = NULL	62:1:2290:2314	314873	7	True				
ANR	314936	AssignmentExpression	op_array -> opcodes = NULL		314873	0		=			
ANR	314937	PtrMemberAccess	op_array -> opcodes		314873	0					
ANR	314938	Identifier	op_array		314873	0					
ANR	314939	Identifier	opcodes		314873	1					
ANR	314940	Identifier	NULL		314873	1					
ANR	314941	ExpressionStatement	"op_array_alloc_ops ( op_array , initial_ops_size )"	63:1:2317:2363	314873	8	True				
ANR	314942	CallExpression	"op_array_alloc_ops ( op_array , initial_ops_size )"		314873	0					
ANR	314943	Callee	op_array_alloc_ops		314873	0					
ANR	314944	Identifier	op_array_alloc_ops		314873	0					
ANR	314945	ArgumentList	op_array		314873	1					
ANR	314946	Argument	op_array		314873	0					
ANR	314947	Identifier	op_array		314873	0					
ANR	314948	Argument	initial_ops_size		314873	1					
ANR	314949	Identifier	initial_ops_size		314873	0					
ANR	314950	ExpressionStatement	op_array -> last_var = 0	65:1:2367:2389	314873	9	True				
ANR	314951	AssignmentExpression	op_array -> last_var = 0		314873	0		=			
ANR	314952	PtrMemberAccess	op_array -> last_var		314873	0					
ANR	314953	Identifier	op_array		314873	0					
ANR	314954	Identifier	last_var		314873	1					
ANR	314955	PrimaryExpression	0		314873	1					
ANR	314956	ExpressionStatement	op_array -> vars = NULL	66:1:2392:2413	314873	10	True				
ANR	314957	AssignmentExpression	op_array -> vars = NULL		314873	0		=			
ANR	314958	PtrMemberAccess	op_array -> vars		314873	0					
ANR	314959	Identifier	op_array		314873	0					
ANR	314960	Identifier	vars		314873	1					
ANR	314961	Identifier	NULL		314873	1					
ANR	314962	ExpressionStatement	op_array -> T = 0	68:1:2417:2432	314873	11	True				
ANR	314963	AssignmentExpression	op_array -> T = 0		314873	0		=			
ANR	314964	PtrMemberAccess	op_array -> T		314873	0					
ANR	314965	Identifier	op_array		314873	0					
ANR	314966	Identifier	T		314873	1					
ANR	314967	PrimaryExpression	0		314873	1					
ANR	314968	ExpressionStatement	op_array -> function_name = NULL	70:1:2436:2466	314873	12	True				
ANR	314969	AssignmentExpression	op_array -> function_name = NULL		314873	0		=			
ANR	314970	PtrMemberAccess	op_array -> function_name		314873	0					
ANR	314971	Identifier	op_array		314873	0					
ANR	314972	Identifier	function_name		314873	1					
ANR	314973	Identifier	NULL		314873	1					
ANR	314974	ExpressionStatement	op_array -> filename = zend_get_compiled_filename ( )	71:1:2469:2518	314873	13	True				
ANR	314975	AssignmentExpression	op_array -> filename = zend_get_compiled_filename ( )		314873	0		=			
ANR	314976	PtrMemberAccess	op_array -> filename		314873	0					
ANR	314977	Identifier	op_array		314873	0					
ANR	314978	Identifier	filename		314873	1					
ANR	314979	CallExpression	zend_get_compiled_filename ( )		314873	1					
ANR	314980	Callee	zend_get_compiled_filename		314873	0					
ANR	314981	Identifier	zend_get_compiled_filename		314873	0					
ANR	314982	ArgumentList			314873	1					
ANR	314983	ExpressionStatement	op_array -> doc_comment = NULL	72:1:2521:2549	314873	14	True				
ANR	314984	AssignmentExpression	op_array -> doc_comment = NULL		314873	0		=			
ANR	314985	PtrMemberAccess	op_array -> doc_comment		314873	0					
ANR	314986	Identifier	op_array		314873	0					
ANR	314987	Identifier	doc_comment		314873	1					
ANR	314988	Identifier	NULL		314873	1					
ANR	314989	ExpressionStatement	op_array -> arg_info = NULL	74:1:2553:2578	314873	15	True				
ANR	314990	AssignmentExpression	op_array -> arg_info = NULL		314873	0		=			
ANR	314991	PtrMemberAccess	op_array -> arg_info		314873	0					
ANR	314992	Identifier	op_array		314873	0					
ANR	314993	Identifier	arg_info		314873	1					
ANR	314994	Identifier	NULL		314873	1					
ANR	314995	ExpressionStatement	op_array -> num_args = 0	75:1:2581:2603	314873	16	True				
ANR	314996	AssignmentExpression	op_array -> num_args = 0		314873	0		=			
ANR	314997	PtrMemberAccess	op_array -> num_args		314873	0					
ANR	314998	Identifier	op_array		314873	0					
ANR	314999	Identifier	num_args		314873	1					
ANR	315000	PrimaryExpression	0		314873	1					
ANR	315001	ExpressionStatement	op_array -> required_num_args = 0	76:1:2606:2637	314873	17	True				
ANR	315002	AssignmentExpression	op_array -> required_num_args = 0		314873	0		=			
ANR	315003	PtrMemberAccess	op_array -> required_num_args		314873	0					
ANR	315004	Identifier	op_array		314873	0					
ANR	315005	Identifier	required_num_args		314873	1					
ANR	315006	PrimaryExpression	0		314873	1					
ANR	315007	ExpressionStatement	op_array -> scope = NULL	78:1:2641:2663	314873	18	True				
ANR	315008	AssignmentExpression	op_array -> scope = NULL		314873	0		=			
ANR	315009	PtrMemberAccess	op_array -> scope		314873	0					
ANR	315010	Identifier	op_array		314873	0					
ANR	315011	Identifier	scope		314873	1					
ANR	315012	Identifier	NULL		314873	1					
ANR	315013	ExpressionStatement	op_array -> prototype = NULL	79:1:2666:2692	314873	19	True				
ANR	315014	AssignmentExpression	op_array -> prototype = NULL		314873	0		=			
ANR	315015	PtrMemberAccess	op_array -> prototype		314873	0					
ANR	315016	Identifier	op_array		314873	0					
ANR	315017	Identifier	prototype		314873	1					
ANR	315018	Identifier	NULL		314873	1					
ANR	315019	ExpressionStatement	op_array -> brk_cont_array = NULL	81:1:2696:2727	314873	20	True				
ANR	315020	AssignmentExpression	op_array -> brk_cont_array = NULL		314873	0		=			
ANR	315021	PtrMemberAccess	op_array -> brk_cont_array		314873	0					
ANR	315022	Identifier	op_array		314873	0					
ANR	315023	Identifier	brk_cont_array		314873	1					
ANR	315024	Identifier	NULL		314873	1					
ANR	315025	ExpressionStatement	op_array -> try_catch_array = NULL	82:1:2730:2762	314873	21	True				
ANR	315026	AssignmentExpression	op_array -> try_catch_array = NULL		314873	0		=			
ANR	315027	PtrMemberAccess	op_array -> try_catch_array		314873	0					
ANR	315028	Identifier	op_array		314873	0					
ANR	315029	Identifier	try_catch_array		314873	1					
ANR	315030	Identifier	NULL		314873	1					
ANR	315031	ExpressionStatement	op_array -> last_brk_cont = 0	83:1:2765:2792	314873	22	True				
ANR	315032	AssignmentExpression	op_array -> last_brk_cont = 0		314873	0		=			
ANR	315033	PtrMemberAccess	op_array -> last_brk_cont		314873	0					
ANR	315034	Identifier	op_array		314873	0					
ANR	315035	Identifier	last_brk_cont		314873	1					
ANR	315036	PrimaryExpression	0		314873	1					
ANR	315037	ExpressionStatement	op_array -> static_variables = NULL	85:1:2796:2829	314873	23	True				
ANR	315038	AssignmentExpression	op_array -> static_variables = NULL		314873	0		=			
ANR	315039	PtrMemberAccess	op_array -> static_variables		314873	0					
ANR	315040	Identifier	op_array		314873	0					
ANR	315041	Identifier	static_variables		314873	1					
ANR	315042	Identifier	NULL		314873	1					
ANR	315043	ExpressionStatement	op_array -> last_try_catch = 0	86:1:2832:2860	314873	24	True				
ANR	315044	AssignmentExpression	op_array -> last_try_catch = 0		314873	0		=			
ANR	315045	PtrMemberAccess	op_array -> last_try_catch		314873	0					
ANR	315046	Identifier	op_array		314873	0					
ANR	315047	Identifier	last_try_catch		314873	1					
ANR	315048	PrimaryExpression	0		314873	1					
ANR	315049	ExpressionStatement	op_array -> this_var = - 1	88:1:2864:2887	314873	25	True				
ANR	315050	AssignmentExpression	op_array -> this_var = - 1		314873	0		=			
ANR	315051	PtrMemberAccess	op_array -> this_var		314873	0					
ANR	315052	Identifier	op_array		314873	0					
ANR	315053	Identifier	this_var		314873	1					
ANR	315054	UnaryOperationExpression	- 1		314873	1					
ANR	315055	UnaryOperator	-		314873	0					
ANR	315056	PrimaryExpression	1		314873	1					
ANR	315057	ExpressionStatement	op_array -> fn_flags = 0	90:1:2891:2913	314873	26	True				
ANR	315058	AssignmentExpression	op_array -> fn_flags = 0		314873	0		=			
ANR	315059	PtrMemberAccess	op_array -> fn_flags		314873	0					
ANR	315060	Identifier	op_array		314873	0					
ANR	315061	Identifier	fn_flags		314873	1					
ANR	315062	PrimaryExpression	0		314873	1					
ANR	315063	ExpressionStatement	op_array -> early_binding = - 1	92:1:2917:2945	314873	27	True				
ANR	315064	AssignmentExpression	op_array -> early_binding = - 1		314873	0		=			
ANR	315065	PtrMemberAccess	op_array -> early_binding		314873	0					
ANR	315066	Identifier	op_array		314873	0					
ANR	315067	Identifier	early_binding		314873	1					
ANR	315068	UnaryOperationExpression	- 1		314873	1					
ANR	315069	UnaryOperator	-		314873	0					
ANR	315070	PrimaryExpression	1		314873	1					
ANR	315071	ExpressionStatement	op_array -> last_literal = 0	94:1:2949:2975	314873	28	True				
ANR	315072	AssignmentExpression	op_array -> last_literal = 0		314873	0		=			
ANR	315073	PtrMemberAccess	op_array -> last_literal		314873	0					
ANR	315074	Identifier	op_array		314873	0					
ANR	315075	Identifier	last_literal		314873	1					
ANR	315076	PrimaryExpression	0		314873	1					
ANR	315077	ExpressionStatement	op_array -> literals = NULL	95:1:2978:3003	314873	29	True				
ANR	315078	AssignmentExpression	op_array -> literals = NULL		314873	0		=			
ANR	315079	PtrMemberAccess	op_array -> literals		314873	0					
ANR	315080	Identifier	op_array		314873	0					
ANR	315081	Identifier	literals		314873	1					
ANR	315082	Identifier	NULL		314873	1					
ANR	315083	ExpressionStatement	op_array -> run_time_cache = NULL	97:1:3007:3038	314873	30	True				
ANR	315084	AssignmentExpression	op_array -> run_time_cache = NULL		314873	0		=			
ANR	315085	PtrMemberAccess	op_array -> run_time_cache		314873	0					
ANR	315086	Identifier	op_array		314873	0					
ANR	315087	Identifier	run_time_cache		314873	1					
ANR	315088	Identifier	NULL		314873	1					
ANR	315089	ExpressionStatement	op_array -> cache_size = 0	98:1:3041:3065	314873	31	True				
ANR	315090	AssignmentExpression	op_array -> cache_size = 0		314873	0		=			
ANR	315091	PtrMemberAccess	op_array -> cache_size		314873	0					
ANR	315092	Identifier	op_array		314873	0					
ANR	315093	Identifier	cache_size		314873	1					
ANR	315094	PrimaryExpression	0		314873	1					
ANR	315095	ExpressionStatement	"memset ( op_array -> reserved , 0 , ZEND_MAX_RESERVED_RESOURCES * sizeof ( void * ) )"	100:1:3069:3143	314873	32	True				
ANR	315096	CallExpression	"memset ( op_array -> reserved , 0 , ZEND_MAX_RESERVED_RESOURCES * sizeof ( void * ) )"		314873	0					
ANR	315097	Callee	memset		314873	0					
ANR	315098	Identifier	memset		314873	0					
ANR	315099	ArgumentList	op_array -> reserved		314873	1					
ANR	315100	Argument	op_array -> reserved		314873	0					
ANR	315101	PtrMemberAccess	op_array -> reserved		314873	0					
ANR	315102	Identifier	op_array		314873	0					
ANR	315103	Identifier	reserved		314873	1					
ANR	315104	Argument	0		314873	1					
ANR	315105	PrimaryExpression	0		314873	0					
ANR	315106	Argument	ZEND_MAX_RESERVED_RESOURCES * sizeof ( void * )		314873	2					
ANR	315107	MultiplicativeExpression	ZEND_MAX_RESERVED_RESOURCES * sizeof ( void * )		314873	0		*			
ANR	315108	Identifier	ZEND_MAX_RESERVED_RESOURCES		314873	0					
ANR	315109	SizeofExpression	sizeof ( void * )		314873	1					
ANR	315110	Sizeof	sizeof		314873	0					
ANR	315111	SizeofOperand	void *		314873	1					
ANR	315112	IfStatement	if ( zend_extension_flags & ZEND_EXTENSIONS_HAVE_OP_ARRAY_CTOR )		314873	33					
ANR	315113	Condition	zend_extension_flags & ZEND_EXTENSIONS_HAVE_OP_ARRAY_CTOR	102:5:3151:3207	314873	0	True				
ANR	315114	BitAndExpression	zend_extension_flags & ZEND_EXTENSIONS_HAVE_OP_ARRAY_CTOR		314873	0		&			
ANR	315115	Identifier	zend_extension_flags		314873	0					
ANR	315116	Identifier	ZEND_EXTENSIONS_HAVE_OP_ARRAY_CTOR		314873	1					
ANR	315117	CompoundStatement		50:64:1143:1143	314873	1					
ANR	315118	ExpressionStatement	"zend_llist_apply_with_argument ( & zend_extensions , ( llist_apply_with_arg_func_t ) zend_extension_op_array_ctor_handler , op_array )"	103:2:3214:3340	314873	0	True				
ANR	315119	CallExpression	"zend_llist_apply_with_argument ( & zend_extensions , ( llist_apply_with_arg_func_t ) zend_extension_op_array_ctor_handler , op_array )"		314873	0					
ANR	315120	Callee	zend_llist_apply_with_argument		314873	0					
ANR	315121	Identifier	zend_llist_apply_with_argument		314873	0					
ANR	315122	ArgumentList	& zend_extensions		314873	1					
ANR	315123	Argument	& zend_extensions		314873	0					
ANR	315124	UnaryOperationExpression	& zend_extensions		314873	0					
ANR	315125	UnaryOperator	&		314873	0					
ANR	315126	Identifier	zend_extensions		314873	1					
ANR	315127	Argument	( llist_apply_with_arg_func_t ) zend_extension_op_array_ctor_handler		314873	1					
ANR	315128	CastExpression	( llist_apply_with_arg_func_t ) zend_extension_op_array_ctor_handler		314873	0					
ANR	315129	CastTarget	llist_apply_with_arg_func_t		314873	0					
ANR	315130	Identifier	zend_extension_op_array_ctor_handler		314873	1					
ANR	315131	Argument	op_array		314873	2					
ANR	315132	Identifier	op_array		314873	0					
ANR	315133	ReturnType	void		314873	1					
ANR	315134	Identifier	init_op_array		314873	2					
ANR	315135	ParameterList	"zend_op_array * op_array , zend_uchar type , int initial_ops_size"		314873	3					
ANR	315136	Parameter	zend_op_array * op_array	52:19:2002:2024	314873	0	True				
ANR	315137	ParameterType	zend_op_array *		314873	0					
ANR	315138	Identifier	op_array		314873	1					
ANR	315139	Parameter	zend_uchar type	52:44:2027:2041	314873	1	True				
ANR	315140	ParameterType	zend_uchar		314873	0					
ANR	315141	Identifier	type		314873	1					
ANR	315142	Parameter	int initial_ops_size	52:61:2044:2063	314873	2	True				
ANR	315143	ParameterType	int		314873	0					
ANR	315144	Identifier	initial_ops_size		314873	1					
ANR	315145	CFGEntryNode	ENTRY		314873		True				
ANR	315146	CFGExitNode	EXIT		314873		True				
ANR	315147	Symbol	& zend_extensions		314873						
ANR	315148	Symbol	* op_array -> arg_flags		314873						
ANR	315149	Symbol	op_array -> last_var		314873						
ANR	315150	Symbol	* op_array -> refcount		314873						
ANR	315151	Symbol	type		314873						
ANR	315152	Symbol	op_array -> type		314873						
ANR	315153	Symbol	op_array -> run_time_cache		314873						
ANR	315154	Symbol	emalloc		314873						
ANR	315155	Symbol	op_array -> brk_cont_array		314873						
ANR	315156	Symbol	op_array -> opcodes		314873						
ANR	315157	Symbol	op_array -> required_num_args		314873						
ANR	315158	Symbol	op_array -> fn_flags		314873						
ANR	315159	Symbol	op_array -> arg_flags		314873						
ANR	315160	Symbol	op_array -> early_binding		314873						
ANR	315161	Symbol	op_array -> prototype		314873						
ANR	315162	Symbol	op_array -> last_literal		314873						
ANR	315163	Symbol	op_array -> num_args		314873						
ANR	315164	Symbol	op_array -> static_variables		314873						
ANR	315165	Symbol	zend_extension_op_array_ctor_handler		314873						
ANR	315166	Symbol	op_array -> try_catch_array		314873						
ANR	315167	Symbol	op_array -> doc_comment		314873						
ANR	315168	Symbol	op_array -> T		314873						
ANR	315169	Symbol	NULL		314873						
ANR	315170	Symbol	op_array -> vars		314873						
ANR	315171	Symbol	op_array -> this_var		314873						
ANR	315172	Symbol	op_array -> reserved		314873						
ANR	315173	Symbol	ZEND_MAX_RESERVED_RESOURCES		314873						
ANR	315174	Symbol	initial_ops_size		314873						
ANR	315175	Symbol	* op_array		314873						
ANR	315176	Symbol	op_array -> refcount		314873						
ANR	315177	Symbol	op_array -> scope		314873						
ANR	315178	Symbol	op_array -> function_name		314873						
ANR	315179	Symbol	op_array -> last_brk_cont		314873						
ANR	315180	Symbol	op_array -> last_try_catch		314873						
ANR	315181	Symbol	op_array -> last		314873						
ANR	315182	Symbol	zend_get_compiled_filename		314873						
ANR	315183	Symbol	op_array -> literals		314873						
ANR	315184	Symbol	ZEND_EXTENSIONS_HAVE_OP_ARRAY_CTOR		314873						
ANR	315185	Symbol	zend_extension_flags		314873						
ANR	315186	Symbol	op_array -> cache_size		314873						
ANR	315187	Symbol	* * op_array		314873						
ANR	315188	Symbol	op_array -> filename		314873						
ANR	315189	Symbol	op_array		314873						
ANR	315190	Symbol	op_array -> arg_info		314873						
ANR	315191	Function	destroy_zend_function	107:0:3348:3669							
ANR	315192	FunctionDef	destroy_zend_function (zend_function * function)		315191	0					
ANR	315193	CompoundStatement		108:0:3409:3669	315191	0					
ANR	315194	IfStatement	if ( function -> type == ZEND_USER_FUNCTION )		315191	0					
ANR	315195	Condition	function -> type == ZEND_USER_FUNCTION	109:5:3416:3451	315191	0	True				
ANR	315196	EqualityExpression	function -> type == ZEND_USER_FUNCTION		315191	0		==			
ANR	315197	PtrMemberAccess	function -> type		315191	0					
ANR	315198	Identifier	function		315191	0					
ANR	315199	Identifier	type		315191	1					
ANR	315200	Identifier	ZEND_USER_FUNCTION		315191	1					
ANR	315201	CompoundStatement		2:43:44:44	315191	1					
ANR	315202	ExpressionStatement	destroy_op_array ( & function -> op_array )	110:2:3458:3495	315191	0	True				
ANR	315203	CallExpression	destroy_op_array ( & function -> op_array )		315191	0					
ANR	315204	Callee	destroy_op_array		315191	0					
ANR	315205	Identifier	destroy_op_array		315191	0					
ANR	315206	ArgumentList	& function -> op_array		315191	1					
ANR	315207	Argument	& function -> op_array		315191	0					
ANR	315208	UnaryOperationExpression	& function -> op_array		315191	0					
ANR	315209	UnaryOperator	&		315191	0					
ANR	315210	PtrMemberAccess	function -> op_array		315191	1					
ANR	315211	Identifier	function		315191	0					
ANR	315212	Identifier	op_array		315191	1					
ANR	315213	ElseStatement	else		315191	0					
ANR	315214	CompoundStatement		4:8:95:95	315191	0					
ANR	315215	ExpressionStatement	ZEND_ASSERT ( function -> type == ZEND_INTERNAL_FUNCTION )	112:2:3509:3562	315191	0	True				
ANR	315216	CallExpression	ZEND_ASSERT ( function -> type == ZEND_INTERNAL_FUNCTION )		315191	0					
ANR	315217	Callee	ZEND_ASSERT		315191	0					
ANR	315218	Identifier	ZEND_ASSERT		315191	0					
ANR	315219	ArgumentList	function -> type == ZEND_INTERNAL_FUNCTION		315191	1					
ANR	315220	Argument	function -> type == ZEND_INTERNAL_FUNCTION		315191	0					
ANR	315221	EqualityExpression	function -> type == ZEND_INTERNAL_FUNCTION		315191	0		==			
ANR	315222	PtrMemberAccess	function -> type		315191	0					
ANR	315223	Identifier	function		315191	0					
ANR	315224	Identifier	type		315191	1					
ANR	315225	Identifier	ZEND_INTERNAL_FUNCTION		315191	1					
ANR	315226	ExpressionStatement	ZEND_ASSERT ( function -> common . function_name )	113:2:3566:3609	315191	1	True				
ANR	315227	CallExpression	ZEND_ASSERT ( function -> common . function_name )		315191	0					
ANR	315228	Callee	ZEND_ASSERT		315191	0					
ANR	315229	Identifier	ZEND_ASSERT		315191	0					
ANR	315230	ArgumentList	function -> common . function_name		315191	1					
ANR	315231	Argument	function -> common . function_name		315191	0					
ANR	315232	MemberAccess	function -> common . function_name		315191	0					
ANR	315233	PtrMemberAccess	function -> common		315191	0					
ANR	315234	Identifier	function		315191	0					
ANR	315235	Identifier	common		315191	1					
ANR	315236	Identifier	function_name		315191	1					
ANR	315237	ExpressionStatement	zend_string_release ( function -> common . function_name )	114:2:3613:3664	315191	2	True				
ANR	315238	CallExpression	zend_string_release ( function -> common . function_name )		315191	0					
ANR	315239	Callee	zend_string_release		315191	0					
ANR	315240	Identifier	zend_string_release		315191	0					
ANR	315241	ArgumentList	function -> common . function_name		315191	1					
ANR	315242	Argument	function -> common . function_name		315191	0					
ANR	315243	MemberAccess	function -> common . function_name		315191	0					
ANR	315244	PtrMemberAccess	function -> common		315191	0					
ANR	315245	Identifier	function		315191	0					
ANR	315246	Identifier	common		315191	1					
ANR	315247	Identifier	function_name		315191	1					
ANR	315248	ReturnType	ZEND_API void		315191	1					
ANR	315249	Identifier	destroy_zend_function		315191	2					
ANR	315250	ParameterList	zend_function * function		315191	3					
ANR	315251	Parameter	zend_function * function	107:36:3384:3406	315191	0	True				
ANR	315252	ParameterType	zend_function *		315191	0					
ANR	315253	Identifier	function		315191	1					
ANR	315254	CFGEntryNode	ENTRY		315191		True				
ANR	315255	CFGExitNode	EXIT		315191		True				
ANR	315256	Symbol	ZEND_INTERNAL_FUNCTION		315191						
ANR	315257	Symbol	function -> common		315191						
ANR	315258	Symbol	ZEND_USER_FUNCTION		315191						
ANR	315259	Symbol	function		315191						
ANR	315260	Symbol	* function		315191						
ANR	315261	Symbol	function -> common . function_name		315191						
ANR	315262	Symbol	& function -> op_array		315191						
ANR	315263	Symbol	function -> type		315191						
ANR	315264	Function	zend_function_dtor	118:0:3672:4228							
ANR	315265	FunctionDef	zend_function_dtor (zval * zv)		315264	0					
ANR	315266	CompoundStatement		119:0:3715:4228	315264	0					
ANR	315267	IdentifierDeclStatement	zend_function * function = Z_PTR_P ( zv ) ;	120:1:3718:3755	315264	0	True				
ANR	315268	IdentifierDecl	* function = Z_PTR_P ( zv )		315264	0					
ANR	315269	IdentifierDeclType	zend_function *		315264	0					
ANR	315270	Identifier	function		315264	1					
ANR	315271	AssignmentExpression	* function = Z_PTR_P ( zv )		315264	2		=			
ANR	315272	Identifier	function		315264	0					
ANR	315273	CallExpression	Z_PTR_P ( zv )		315264	1					
ANR	315274	Callee	Z_PTR_P		315264	0					
ANR	315275	Identifier	Z_PTR_P		315264	0					
ANR	315276	ArgumentList	zv		315264	1					
ANR	315277	Argument	zv		315264	0					
ANR	315278	Identifier	zv		315264	0					
ANR	315279	IfStatement	if ( function -> type == ZEND_USER_FUNCTION )		315264	1					
ANR	315280	Condition	function -> type == ZEND_USER_FUNCTION	122:5:3763:3798	315264	0	True				
ANR	315281	EqualityExpression	function -> type == ZEND_USER_FUNCTION		315264	0		==			
ANR	315282	PtrMemberAccess	function -> type		315264	0					
ANR	315283	Identifier	function		315264	0					
ANR	315284	Identifier	type		315264	1					
ANR	315285	Identifier	ZEND_USER_FUNCTION		315264	1					
ANR	315286	CompoundStatement		4:43:85:85	315264	1					
ANR	315287	ExpressionStatement	ZEND_ASSERT ( function -> common . function_name )	123:2:3805:3848	315264	0	True				
ANR	315288	CallExpression	ZEND_ASSERT ( function -> common . function_name )		315264	0					
ANR	315289	Callee	ZEND_ASSERT		315264	0					
ANR	315290	Identifier	ZEND_ASSERT		315264	0					
ANR	315291	ArgumentList	function -> common . function_name		315264	1					
ANR	315292	Argument	function -> common . function_name		315264	0					
ANR	315293	MemberAccess	function -> common . function_name		315264	0					
ANR	315294	PtrMemberAccess	function -> common		315264	0					
ANR	315295	Identifier	function		315264	0					
ANR	315296	Identifier	common		315264	1					
ANR	315297	Identifier	function_name		315264	1					
ANR	315298	ExpressionStatement	destroy_op_array ( & function -> op_array )	124:2:3852:3889	315264	1	True				
ANR	315299	CallExpression	destroy_op_array ( & function -> op_array )		315264	0					
ANR	315300	Callee	destroy_op_array		315264	0					
ANR	315301	Identifier	destroy_op_array		315264	0					
ANR	315302	ArgumentList	& function -> op_array		315264	1					
ANR	315303	Argument	& function -> op_array		315264	0					
ANR	315304	UnaryOperationExpression	& function -> op_array		315264	0					
ANR	315305	UnaryOperator	&		315264	0					
ANR	315306	PtrMemberAccess	function -> op_array		315264	1					
ANR	315307	Identifier	function		315264	0					
ANR	315308	Identifier	op_array		315264	1					
ANR	315309	ElseStatement	else		315264	0					
ANR	315310	CompoundStatement		8:8:255:255	315264	0					
ANR	315311	ExpressionStatement	ZEND_ASSERT ( function -> type == ZEND_INTERNAL_FUNCTION )	127:2:3975:4028	315264	0	True				
ANR	315312	CallExpression	ZEND_ASSERT ( function -> type == ZEND_INTERNAL_FUNCTION )		315264	0					
ANR	315313	Callee	ZEND_ASSERT		315264	0					
ANR	315314	Identifier	ZEND_ASSERT		315264	0					
ANR	315315	ArgumentList	function -> type == ZEND_INTERNAL_FUNCTION		315264	1					
ANR	315316	Argument	function -> type == ZEND_INTERNAL_FUNCTION		315264	0					
ANR	315317	EqualityExpression	function -> type == ZEND_INTERNAL_FUNCTION		315264	0		==			
ANR	315318	PtrMemberAccess	function -> type		315264	0					
ANR	315319	Identifier	function		315264	0					
ANR	315320	Identifier	type		315264	1					
ANR	315321	Identifier	ZEND_INTERNAL_FUNCTION		315264	1					
ANR	315322	ExpressionStatement	ZEND_ASSERT ( function -> common . function_name )	128:2:4032:4075	315264	1	True				
ANR	315323	CallExpression	ZEND_ASSERT ( function -> common . function_name )		315264	0					
ANR	315324	Callee	ZEND_ASSERT		315264	0					
ANR	315325	Identifier	ZEND_ASSERT		315264	0					
ANR	315326	ArgumentList	function -> common . function_name		315264	1					
ANR	315327	Argument	function -> common . function_name		315264	0					
ANR	315328	MemberAccess	function -> common . function_name		315264	0					
ANR	315329	PtrMemberAccess	function -> common		315264	0					
ANR	315330	Identifier	function		315264	0					
ANR	315331	Identifier	common		315264	1					
ANR	315332	Identifier	function_name		315264	1					
ANR	315333	ExpressionStatement	zend_string_release ( function -> common . function_name )	129:2:4079:4130	315264	2	True				
ANR	315334	CallExpression	zend_string_release ( function -> common . function_name )		315264	0					
ANR	315335	Callee	zend_string_release		315264	0					
ANR	315336	Identifier	zend_string_release		315264	0					
ANR	315337	ArgumentList	function -> common . function_name		315264	1					
ANR	315338	Argument	function -> common . function_name		315264	0					
ANR	315339	MemberAccess	function -> common . function_name		315264	0					
ANR	315340	PtrMemberAccess	function -> common		315264	0					
ANR	315341	Identifier	function		315264	0					
ANR	315342	Identifier	common		315264	1					
ANR	315343	Identifier	function_name		315264	1					
ANR	315344	IfStatement	if ( ! ( function -> common . fn_flags & ZEND_ACC_ARENA_ALLOCATED ) )		315264	3					
ANR	315345	Condition	! ( function -> common . fn_flags & ZEND_ACC_ARENA_ALLOCATED )	130:6:4138:4192	315264	0	True				
ANR	315346	UnaryOperationExpression	! ( function -> common . fn_flags & ZEND_ACC_ARENA_ALLOCATED )		315264	0					
ANR	315347	UnaryOperator	!		315264	0					
ANR	315348	BitAndExpression	function -> common . fn_flags & ZEND_ACC_ARENA_ALLOCATED		315264	1		&			
ANR	315349	MemberAccess	function -> common . fn_flags		315264	0					
ANR	315350	PtrMemberAccess	function -> common		315264	0					
ANR	315351	Identifier	function		315264	0					
ANR	315352	Identifier	common		315264	1					
ANR	315353	Identifier	fn_flags		315264	1					
ANR	315354	Identifier	ZEND_ACC_ARENA_ALLOCATED		315264	1					
ANR	315355	CompoundStatement		12:63:479:479	315264	1					
ANR	315356	ExpressionStatement	"pefree ( function , 1 )"	131:3:4200:4219	315264	0	True				
ANR	315357	CallExpression	"pefree ( function , 1 )"		315264	0					
ANR	315358	Callee	pefree		315264	0					
ANR	315359	Identifier	pefree		315264	0					
ANR	315360	ArgumentList	function		315264	1					
ANR	315361	Argument	function		315264	0					
ANR	315362	Identifier	function		315264	0					
ANR	315363	Argument	1		315264	1					
ANR	315364	PrimaryExpression	1		315264	0					
ANR	315365	ReturnType	ZEND_API void		315264	1					
ANR	315366	Identifier	zend_function_dtor		315264	2					
ANR	315367	ParameterList	zval * zv		315264	3					
ANR	315368	Parameter	zval * zv	118:33:3705:3712	315264	0	True				
ANR	315369	ParameterType	zval *		315264	0					
ANR	315370	Identifier	zv		315264	1					
ANR	315371	CFGEntryNode	ENTRY		315264		True				
ANR	315372	CFGExitNode	EXIT		315264		True				
ANR	315373	Symbol	ZEND_INTERNAL_FUNCTION		315264						
ANR	315374	Symbol	Z_PTR_P		315264						
ANR	315375	Symbol	function -> common		315264						
ANR	315376	Symbol	function -> common . fn_flags		315264						
ANR	315377	Symbol	ZEND_USER_FUNCTION		315264						
ANR	315378	Symbol	ZEND_ACC_ARENA_ALLOCATED		315264						
ANR	315379	Symbol	function		315264						
ANR	315380	Symbol	* function		315264						
ANR	315381	Symbol	function -> common . function_name		315264						
ANR	315382	Symbol	& function -> op_array		315264						
ANR	315383	Symbol	zv		315264						
ANR	315384	Symbol	function -> type		315264						
ANR	315385	Function	zend_cleanup_op_array_data	136:0:4231:4453							
ANR	315386	FunctionDef	zend_cleanup_op_array_data (zend_op_array * op_array)		315385	0					
ANR	315387	CompoundStatement		137:0:4297:4453	315385	0					
ANR	315388	IfStatement	if ( op_array -> static_variables && ! ( GC_FLAGS ( op_array -> static_variables ) & IS_ARRAY_IMMUTABLE ) )		315385	0					
ANR	315389	Condition	op_array -> static_variables && ! ( GC_FLAGS ( op_array -> static_variables ) & IS_ARRAY_IMMUTABLE )	138:5:4304:4398	315385	0	True				
ANR	315390	AndExpression	op_array -> static_variables && ! ( GC_FLAGS ( op_array -> static_variables ) & IS_ARRAY_IMMUTABLE )		315385	0		&&			
ANR	315391	PtrMemberAccess	op_array -> static_variables		315385	0					
ANR	315392	Identifier	op_array		315385	0					
ANR	315393	Identifier	static_variables		315385	1					
ANR	315394	UnaryOperationExpression	! ( GC_FLAGS ( op_array -> static_variables ) & IS_ARRAY_IMMUTABLE )		315385	1					
ANR	315395	UnaryOperator	!		315385	0					
ANR	315396	BitAndExpression	GC_FLAGS ( op_array -> static_variables ) & IS_ARRAY_IMMUTABLE		315385	1		&			
ANR	315397	CallExpression	GC_FLAGS ( op_array -> static_variables )		315385	0					
ANR	315398	Callee	GC_FLAGS		315385	0					
ANR	315399	Identifier	GC_FLAGS		315385	0					
ANR	315400	ArgumentList	op_array -> static_variables		315385	1					
ANR	315401	Argument	op_array -> static_variables		315385	0					
ANR	315402	PtrMemberAccess	op_array -> static_variables		315385	0					
ANR	315403	Identifier	op_array		315385	0					
ANR	315404	Identifier	static_variables		315385	1					
ANR	315405	Identifier	IS_ARRAY_IMMUTABLE		315385	1					
ANR	315406	CompoundStatement		3:67:103:103	315385	1					
ANR	315407	ExpressionStatement	zend_hash_clean ( op_array -> static_variables )	140:2:4405:4448	315385	0	True				
ANR	315408	CallExpression	zend_hash_clean ( op_array -> static_variables )		315385	0					
ANR	315409	Callee	zend_hash_clean		315385	0					
ANR	315410	Identifier	zend_hash_clean		315385	0					
ANR	315411	ArgumentList	op_array -> static_variables		315385	1					
ANR	315412	Argument	op_array -> static_variables		315385	0					
ANR	315413	PtrMemberAccess	op_array -> static_variables		315385	0					
ANR	315414	Identifier	op_array		315385	0					
ANR	315415	Identifier	static_variables		315385	1					
ANR	315416	ReturnType	ZEND_API void		315385	1					
ANR	315417	Identifier	zend_cleanup_op_array_data		315385	2					
ANR	315418	ParameterList	zend_op_array * op_array		315385	3					
ANR	315419	Parameter	zend_op_array * op_array	136:41:4272:4294	315385	0	True				
ANR	315420	ParameterType	zend_op_array *		315385	0					
ANR	315421	Identifier	op_array		315385	1					
ANR	315422	CFGEntryNode	ENTRY		315385		True				
ANR	315423	CFGExitNode	EXIT		315385		True				
ANR	315424	Symbol	op_array -> static_variables		315385						
ANR	315425	Symbol	IS_ARRAY_IMMUTABLE		315385						
ANR	315426	Symbol	GC_FLAGS		315385						
ANR	315427	Symbol	op_array		315385						
ANR	315428	Symbol	* op_array		315385						
ANR	315429	Function	zend_cleanup_user_class_data	144:0:4456:5360							
ANR	315430	FunctionDef	zend_cleanup_user_class_data (zend_class_entry * ce)		315429	0					
ANR	315431	CompoundStatement		145:0:4521:5360	315429	0					
ANR	315432	IfStatement	if ( ce -> ce_flags & ZEND_HAS_STATIC_IN_METHODS )		315429	0					
ANR	315433	Condition	ce -> ce_flags & ZEND_HAS_STATIC_IN_METHODS	149:5:4724:4764	315429	0	True				
ANR	315434	BitAndExpression	ce -> ce_flags & ZEND_HAS_STATIC_IN_METHODS		315429	0		&			
ANR	315435	PtrMemberAccess	ce -> ce_flags		315429	0					
ANR	315436	Identifier	ce		315429	0					
ANR	315437	Identifier	ce_flags		315429	1					
ANR	315438	Identifier	ZEND_HAS_STATIC_IN_METHODS		315429	1					
ANR	315439	CompoundStatement		6:2:249:268	315429	1					
ANR	315440	IdentifierDeclStatement	zend_function * func ;	150:2:4771:4790	315429	0	True				
ANR	315441	IdentifierDecl	* func		315429	0					
ANR	315442	IdentifierDeclType	zend_function *		315429	0					
ANR	315443	Identifier	func		315429	1					
ANR	315444	Statement	ZEND_HASH_FOREACH_PTR	152:2:4795:4815	315429	1	True				
ANR	315445	Statement	(	152:23:4816:4816	315429	2	True				
ANR	315446	Statement	&	152:24:4817:4817	315429	3	True				
ANR	315447	Statement	ce	152:25:4818:4819	315429	4	True				
ANR	315448	Statement	->	152:27:4820:4821	315429	5	True				
ANR	315449	Statement	function_table	152:29:4822:4835	315429	6	True				
ANR	315450	Statement	","	152:43:4836:4836	315429	7	True				
ANR	315451	Statement	func	152:45:4838:4841	315429	8	True				
ANR	315452	Statement	)	152:49:4842:4842	315429	9	True				
ANR	315453	CompoundStatement		8:51:322:322	315429	10					
ANR	315454	IfStatement	if ( func -> type == ZEND_USER_FUNCTION )		315429	0					
ANR	315455	Condition	func -> type == ZEND_USER_FUNCTION	153:7:4853:4884	315429	0	True				
ANR	315456	EqualityExpression	func -> type == ZEND_USER_FUNCTION		315429	0		==			
ANR	315457	PtrMemberAccess	func -> type		315429	0					
ANR	315458	Identifier	func		315429	0					
ANR	315459	Identifier	type		315429	1					
ANR	315460	Identifier	ZEND_USER_FUNCTION		315429	1					
ANR	315461	CompoundStatement		9:41:365:365	315429	1					
ANR	315462	ExpressionStatement	zend_cleanup_op_array_data ( ( zend_op_array * ) func )	154:4:4893:4943	315429	0	True				
ANR	315463	CallExpression	zend_cleanup_op_array_data ( ( zend_op_array * ) func )		315429	0					
ANR	315464	Callee	zend_cleanup_op_array_data		315429	0					
ANR	315465	Identifier	zend_cleanup_op_array_data		315429	0					
ANR	315466	ArgumentList	( zend_op_array * ) func		315429	1					
ANR	315467	Argument	( zend_op_array * ) func		315429	0					
ANR	315468	CastExpression	( zend_op_array * ) func		315429	0					
ANR	315469	CastTarget	zend_op_array *		315429	0					
ANR	315470	Identifier	func		315429	1					
ANR	315471	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	156:4:4954:4977	315429	11	True				
ANR	315472	CallExpression	ZEND_HASH_FOREACH_END ( )		315429	0					
ANR	315473	Callee	ZEND_HASH_FOREACH_END		315429	0					
ANR	315474	Identifier	ZEND_HASH_FOREACH_END		315429	0					
ANR	315475	ArgumentList			315429	1					
ANR	315476	IfStatement	if ( ce -> static_members_table )		315429	1					
ANR	315477	Condition	ce -> static_members_table	158:5:4987:5010	315429	0	True				
ANR	315478	PtrMemberAccess	ce -> static_members_table		315429	0					
ANR	315479	Identifier	ce		315429	0					
ANR	315480	Identifier	static_members_table		315429	1					
ANR	315481	CompoundStatement		17:2:574:622	315429	1					
ANR	315482	IdentifierDeclStatement	zval * static_members = ce -> static_members_table ;	159:2:5017:5064	315429	0	True				
ANR	315483	IdentifierDecl	* static_members = ce -> static_members_table		315429	0					
ANR	315484	IdentifierDeclType	zval *		315429	0					
ANR	315485	Identifier	static_members		315429	1					
ANR	315486	AssignmentExpression	* static_members = ce -> static_members_table		315429	2		=			
ANR	315487	Identifier	static_members		315429	0					
ANR	315488	PtrMemberAccess	ce -> static_members_table		315429	1					
ANR	315489	Identifier	ce		315429	0					
ANR	315490	Identifier	static_members_table		315429	1					
ANR	315491	IdentifierDeclStatement	zval * p = static_members ;	160:2:5068:5092	315429	1	True				
ANR	315492	IdentifierDecl	* p = static_members		315429	0					
ANR	315493	IdentifierDeclType	zval *		315429	0					
ANR	315494	Identifier	p		315429	1					
ANR	315495	AssignmentExpression	* p = static_members		315429	2		=			
ANR	315496	Identifier	static_members		315429	0					
ANR	315497	Identifier	static_members		315429	1					
ANR	315498	IdentifierDeclStatement	zval * end = p + ce -> default_static_members_count ;	161:2:5096:5144	315429	2	True				
ANR	315499	IdentifierDecl	* end = p + ce -> default_static_members_count		315429	0					
ANR	315500	IdentifierDeclType	zval *		315429	0					
ANR	315501	Identifier	end		315429	1					
ANR	315502	AssignmentExpression	* end = p + ce -> default_static_members_count		315429	2		=			
ANR	315503	Identifier	end		315429	0					
ANR	315504	AdditiveExpression	p + ce -> default_static_members_count		315429	1		+			
ANR	315505	Identifier	p		315429	0					
ANR	315506	PtrMemberAccess	ce -> default_static_members_count		315429	1					
ANR	315507	Identifier	ce		315429	0					
ANR	315508	Identifier	default_static_members_count		315429	1					
ANR	315509	ExpressionStatement	ce -> default_static_members_count = 0	164:2:5150:5186	315429	3	True				
ANR	315510	AssignmentExpression	ce -> default_static_members_count = 0		315429	0		=			
ANR	315511	PtrMemberAccess	ce -> default_static_members_count		315429	0					
ANR	315512	Identifier	ce		315429	0					
ANR	315513	Identifier	default_static_members_count		315429	1					
ANR	315514	PrimaryExpression	0		315429	1					
ANR	315515	ExpressionStatement	ce -> default_static_members_table = ce -> static_members_table = NULL	165:2:5190:5256	315429	4	True				
ANR	315516	AssignmentExpression	ce -> default_static_members_table = ce -> static_members_table = NULL		315429	0		=			
ANR	315517	PtrMemberAccess	ce -> default_static_members_table		315429	0					
ANR	315518	Identifier	ce		315429	0					
ANR	315519	Identifier	default_static_members_table		315429	1					
ANR	315520	AssignmentExpression	ce -> static_members_table = NULL		315429	1		=			
ANR	315521	PtrMemberAccess	ce -> static_members_table		315429	0					
ANR	315522	Identifier	ce		315429	0					
ANR	315523	Identifier	static_members_table		315429	1					
ANR	315524	Identifier	NULL		315429	1					
ANR	315525	WhileStatement	while ( p != end )		315429	5					
ANR	315526	Condition	p != end	166:9:5267:5274	315429	0	True				
ANR	315527	EqualityExpression	p != end		315429	0		!=			
ANR	315528	Identifier	p		315429	0					
ANR	315529	Identifier	end		315429	1					
ANR	315530	CompoundStatement		22:19:755:755	315429	1					
ANR	315531	Statement	i_zval_ptr_dtor	167:3:5282:5296	315429	0	True				
ANR	315532	Statement	(	167:18:5297:5297	315429	1	True				
ANR	315533	Statement	p	167:19:5298:5298	315429	2	True				
ANR	315534	Statement	ZEND_FILE_LINE_CC	167:21:5300:5316	315429	3	True				
ANR	315535	Statement	)	167:38:5317:5317	315429	4	True				
ANR	315536	ExpressionStatement		167:39:5318:5318	315429	5	True				
ANR	315537	ExpressionStatement	p ++	168:3:5323:5326	315429	6	True				
ANR	315538	PostIncDecOperationExpression	p ++		315429	0					
ANR	315539	Identifier	p		315429	0					
ANR	315540	IncDec	++		315429	1					
ANR	315541	ExpressionStatement	efree ( static_members )	170:2:5334:5355	315429	6	True				
ANR	315542	CallExpression	efree ( static_members )		315429	0					
ANR	315543	Callee	efree		315429	0					
ANR	315544	Identifier	efree		315429	0					
ANR	315545	ArgumentList	static_members		315429	1					
ANR	315546	Argument	static_members		315429	0					
ANR	315547	Identifier	static_members		315429	0					
ANR	315548	ReturnType	ZEND_API void		315429	1					
ANR	315549	Identifier	zend_cleanup_user_class_data		315429	2					
ANR	315550	ParameterList	zend_class_entry * ce		315429	3					
ANR	315551	Parameter	zend_class_entry * ce	144:43:4499:4518	315429	0	True				
ANR	315552	ParameterType	zend_class_entry *		315429	0					
ANR	315553	Identifier	ce		315429	1					
ANR	315554	CFGEntryNode	ENTRY		315429		True				
ANR	315555	CFGExitNode	EXIT		315429		True				
ANR	315556	Symbol	ce		315429						
ANR	315557	Symbol	NULL		315429						
ANR	315558	Symbol	* func		315429						
ANR	315559	Symbol	ce -> default_static_members_count		315429						
ANR	315560	Symbol	ZEND_HAS_STATIC_IN_METHODS		315429						
ANR	315561	Symbol	* ce		315429						
ANR	315562	Symbol	ce -> static_members_table		315429						
ANR	315563	Symbol	static_members		315429						
ANR	315564	Symbol	ce -> default_static_members_table		315429						
ANR	315565	Symbol	ce -> ce_flags		315429						
ANR	315566	Symbol	p		315429						
ANR	315567	Symbol	func		315429						
ANR	315568	Symbol	ZEND_USER_FUNCTION		315429						
ANR	315569	Symbol	func -> type		315429						
ANR	315570	Symbol	end		315429						
ANR	315571	Function	zend_cleanup_internal_class_data	174:0:5363:5879							
ANR	315572	FunctionDef	zend_cleanup_internal_class_data (zend_class_entry * ce)		315571	0					
ANR	315573	CompoundStatement		175:0:5432:5879	315571	0					
ANR	315574	IfStatement	if ( CE_STATIC_MEMBERS ( ce ) )		315571	0					
ANR	315575	Condition	CE_STATIC_MEMBERS ( ce )	176:5:5439:5459	315571	0	True				
ANR	315576	CallExpression	CE_STATIC_MEMBERS ( ce )		315571	0					
ANR	315577	Callee	CE_STATIC_MEMBERS		315571	0					
ANR	315578	Identifier	CE_STATIC_MEMBERS		315571	0					
ANR	315579	ArgumentList	ce		315571	1					
ANR	315580	Argument	ce		315571	0					
ANR	315581	Identifier	ce		315571	0					
ANR	315582	CompoundStatement		5:2:109:157	315571	1					
ANR	315583	IdentifierDeclStatement	zval * static_members = CE_STATIC_MEMBERS ( ce ) ;	177:2:5466:5510	315571	0	True				
ANR	315584	IdentifierDecl	* static_members = CE_STATIC_MEMBERS ( ce )		315571	0					
ANR	315585	IdentifierDeclType	zval *		315571	0					
ANR	315586	Identifier	static_members		315571	1					
ANR	315587	AssignmentExpression	* static_members = CE_STATIC_MEMBERS ( ce )		315571	2		=			
ANR	315588	Identifier	static_members		315571	0					
ANR	315589	CallExpression	CE_STATIC_MEMBERS ( ce )		315571	1					
ANR	315590	Callee	CE_STATIC_MEMBERS		315571	0					
ANR	315591	Identifier	CE_STATIC_MEMBERS		315571	0					
ANR	315592	ArgumentList	ce		315571	1					
ANR	315593	Argument	ce		315571	0					
ANR	315594	Identifier	ce		315571	0					
ANR	315595	IdentifierDeclStatement	zval * p = static_members ;	178:2:5514:5538	315571	1	True				
ANR	315596	IdentifierDecl	* p = static_members		315571	0					
ANR	315597	IdentifierDeclType	zval *		315571	0					
ANR	315598	Identifier	p		315571	1					
ANR	315599	AssignmentExpression	* p = static_members		315571	2		=			
ANR	315600	Identifier	static_members		315571	0					
ANR	315601	Identifier	static_members		315571	1					
ANR	315602	IdentifierDeclStatement	zval * end = p + ce -> default_static_members_count ;	179:2:5542:5590	315571	2	True				
ANR	315603	IdentifierDecl	* end = p + ce -> default_static_members_count		315571	0					
ANR	315604	IdentifierDeclType	zval *		315571	0					
ANR	315605	Identifier	end		315571	1					
ANR	315606	AssignmentExpression	* end = p + ce -> default_static_members_count		315571	2		=			
ANR	315607	Identifier	end		315571	0					
ANR	315608	AdditiveExpression	p + ce -> default_static_members_count		315571	1		+			
ANR	315609	Identifier	p		315571	0					
ANR	315610	PtrMemberAccess	ce -> default_static_members_count		315571	1					
ANR	315611	Identifier	ce		315571	0					
ANR	315612	Identifier	default_static_members_count		315571	1					
ANR	315613	ExpressionStatement	CG ( static_members_table ) [ ( zend_intptr_t ) ( ce -> static_members_table ) ] = NULL	182:2:5606:5680	315571	3	True				
ANR	315614	AssignmentExpression	CG ( static_members_table ) [ ( zend_intptr_t ) ( ce -> static_members_table ) ] = NULL		315571	0		=			
ANR	315615	ArrayIndexing	CG ( static_members_table ) [ ( zend_intptr_t ) ( ce -> static_members_table ) ]		315571	0					
ANR	315616	CallExpression	CG ( static_members_table )		315571	0					
ANR	315617	Callee	CG		315571	0					
ANR	315618	Identifier	CG		315571	0					
ANR	315619	ArgumentList	static_members_table		315571	1					
ANR	315620	Argument	static_members_table		315571	0					
ANR	315621	Identifier	static_members_table		315571	0					
ANR	315622	CastExpression	( zend_intptr_t ) ( ce -> static_members_table )		315571	1					
ANR	315623	CastTarget	zend_intptr_t		315571	0					
ANR	315624	PtrMemberAccess	ce -> static_members_table		315571	1					
ANR	315625	Identifier	ce		315571	0					
ANR	315626	Identifier	static_members_table		315571	1					
ANR	315627	Identifier	NULL		315571	1					
ANR	315628	ExpressionStatement	ce -> ce_flags &= ~ZEND_ACC_CONSTANTS_UPDATED	186:2:5732:5775	315571	4	True				
ANR	315629	AssignmentExpression	ce -> ce_flags &= ~ZEND_ACC_CONSTANTS_UPDATED		315571	0		&=			
ANR	315630	PtrMemberAccess	ce -> ce_flags		315571	0					
ANR	315631	Identifier	ce		315571	0					
ANR	315632	Identifier	ce_flags		315571	1					
ANR	315633	Identifier	~ZEND_ACC_CONSTANTS_UPDATED		315571	1					
ANR	315634	WhileStatement	while ( p != end )		315571	5					
ANR	315635	Condition	p != end	187:9:5786:5793	315571	0	True				
ANR	315636	EqualityExpression	p != end		315571	0		!=			
ANR	315637	Identifier	p		315571	0					
ANR	315638	Identifier	end		315571	1					
ANR	315639	CompoundStatement		13:19:363:363	315571	1					
ANR	315640	Statement	i_zval_ptr_dtor	188:3:5801:5815	315571	0	True				
ANR	315641	Statement	(	188:18:5816:5816	315571	1	True				
ANR	315642	Statement	p	188:19:5817:5817	315571	2	True				
ANR	315643	Statement	ZEND_FILE_LINE_CC	188:21:5819:5835	315571	3	True				
ANR	315644	Statement	)	188:38:5836:5836	315571	4	True				
ANR	315645	ExpressionStatement		188:39:5837:5837	315571	5	True				
ANR	315646	ExpressionStatement	p ++	189:3:5842:5845	315571	6	True				
ANR	315647	PostIncDecOperationExpression	p ++		315571	0					
ANR	315648	Identifier	p		315571	0					
ANR	315649	IncDec	++		315571	1					
ANR	315650	ExpressionStatement	efree ( static_members )	191:2:5853:5874	315571	6	True				
ANR	315651	CallExpression	efree ( static_members )		315571	0					
ANR	315652	Callee	efree		315571	0					
ANR	315653	Identifier	efree		315571	0					
ANR	315654	ArgumentList	static_members		315571	1					
ANR	315655	Argument	static_members		315571	0					
ANR	315656	Identifier	static_members		315571	0					
ANR	315657	ReturnType	ZEND_API void		315571	1					
ANR	315658	Identifier	zend_cleanup_internal_class_data		315571	2					
ANR	315659	ParameterList	zend_class_entry * ce		315571	3					
ANR	315660	Parameter	zend_class_entry * ce	174:47:5410:5429	315571	0	True				
ANR	315661	ParameterType	zend_class_entry *		315571	0					
ANR	315662	Identifier	ce		315571	1					
ANR	315663	CFGEntryNode	ENTRY		315571		True				
ANR	315664	CFGExitNode	EXIT		315571		True				
ANR	315665	Symbol	ce		315571						
ANR	315666	Symbol	NULL		315571						
ANR	315667	Symbol	ce -> default_static_members_count		315571						
ANR	315668	Symbol	CG		315571						
ANR	315669	Symbol	CE_STATIC_MEMBERS		315571						
ANR	315670	Symbol	static_members_table		315571						
ANR	315671	Symbol	* CG		315571						
ANR	315672	Symbol	* ce		315571						
ANR	315673	Symbol	* * ce		315571						
ANR	315674	Symbol	ce -> static_members_table		315571						
ANR	315675	Symbol	static_members		315571						
ANR	315676	Symbol	* ce -> static_members_table		315571						
ANR	315677	Symbol	p		315571						
ANR	315678	Symbol	ce -> ce_flags		315571						
ANR	315679	Symbol	end		315571						
ANR	315680	Symbol	~ZEND_ACC_CONSTANTS_UPDATED		315571						
ANR	315681	Function	_destroy_zend_class_traits_info	195:0:5882:7376							
ANR	315682	FunctionDef	_destroy_zend_class_traits_info (zend_class_entry * ce)		315681	0					
ANR	315683	CompoundStatement		196:0:5941:7376	315681	0					
ANR	315684	IfStatement	if ( ce -> num_traits > 0 && ce -> traits )		315681	0					
ANR	315685	Condition	ce -> num_traits > 0 && ce -> traits	197:5:5948:5979	315681	0	True				
ANR	315686	AndExpression	ce -> num_traits > 0 && ce -> traits		315681	0		&&			
ANR	315687	RelationalExpression	ce -> num_traits > 0		315681	0		>			
ANR	315688	PtrMemberAccess	ce -> num_traits		315681	0					
ANR	315689	Identifier	ce		315681	0					
ANR	315690	Identifier	num_traits		315681	1					
ANR	315691	PrimaryExpression	0		315681	1					
ANR	315692	PtrMemberAccess	ce -> traits		315681	1					
ANR	315693	Identifier	ce		315681	0					
ANR	315694	Identifier	traits		315681	1					
ANR	315695	CompoundStatement		2:39:40:40	315681	1					
ANR	315696	ExpressionStatement	efree ( ce -> traits )	198:2:5986:6003	315681	0	True				
ANR	315697	CallExpression	efree ( ce -> traits )		315681	0					
ANR	315698	Callee	efree		315681	0					
ANR	315699	Identifier	efree		315681	0					
ANR	315700	ArgumentList	ce -> traits		315681	1					
ANR	315701	Argument	ce -> traits		315681	0					
ANR	315702	PtrMemberAccess	ce -> traits		315681	0					
ANR	315703	Identifier	ce		315681	0					
ANR	315704	Identifier	traits		315681	1					
ANR	315705	IfStatement	if ( ce -> trait_aliases )		315681	1					
ANR	315706	Condition	ce -> trait_aliases	201:5:6014:6030	315681	0	True				
ANR	315707	PtrMemberAccess	ce -> trait_aliases		315681	0					
ANR	315708	Identifier	ce		315681	0					
ANR	315709	Identifier	trait_aliases		315681	1					
ANR	315710	CompoundStatement		7:2:95:107	315681	1					
ANR	315711	IdentifierDeclStatement	size_t i = 0 ;	202:2:6037:6049	315681	0	True				
ANR	315712	IdentifierDecl	i = 0		315681	0					
ANR	315713	IdentifierDeclType	size_t		315681	0					
ANR	315714	Identifier	i		315681	1					
ANR	315715	AssignmentExpression	i = 0		315681	2		=			
ANR	315716	Identifier	i		315681	0					
ANR	315717	PrimaryExpression	0		315681	1					
ANR	315718	WhileStatement	while ( ce -> trait_aliases [ i ] )		315681	1					
ANR	315719	Condition	ce -> trait_aliases [ i ]	203:9:6060:6079	315681	0	True				
ANR	315720	ArrayIndexing	ce -> trait_aliases [ i ]		315681	0					
ANR	315721	PtrMemberAccess	ce -> trait_aliases		315681	0					
ANR	315722	Identifier	ce		315681	0					
ANR	315723	Identifier	trait_aliases		315681	1					
ANR	315724	Identifier	i		315681	1					
ANR	315725	CompoundStatement		8:31:140:140	315681	1					
ANR	315726	IfStatement	if ( ce -> trait_aliases [ i ] -> trait_method )		315681	0					
ANR	315727	Condition	ce -> trait_aliases [ i ] -> trait_method	204:7:6091:6124	315681	0	True				
ANR	315728	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method		315681	0					
ANR	315729	ArrayIndexing	ce -> trait_aliases [ i ]		315681	0					
ANR	315730	PtrMemberAccess	ce -> trait_aliases		315681	0					
ANR	315731	Identifier	ce		315681	0					
ANR	315732	Identifier	trait_aliases		315681	1					
ANR	315733	Identifier	i		315681	1					
ANR	315734	Identifier	trait_method		315681	1					
ANR	315735	CompoundStatement		9:43:185:185	315681	1					
ANR	315736	IfStatement	if ( ce -> trait_aliases [ i ] -> trait_method -> method_name )		315681	0					
ANR	315737	Condition	ce -> trait_aliases [ i ] -> trait_method -> method_name	205:8:6137:6183	315681	0	True				
ANR	315738	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method -> method_name		315681	0					
ANR	315739	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method		315681	0					
ANR	315740	ArrayIndexing	ce -> trait_aliases [ i ]		315681	0					
ANR	315741	PtrMemberAccess	ce -> trait_aliases		315681	0					
ANR	315742	Identifier	ce		315681	0					
ANR	315743	Identifier	trait_aliases		315681	1					
ANR	315744	Identifier	i		315681	1					
ANR	315745	Identifier	trait_method		315681	1					
ANR	315746	Identifier	method_name		315681	1					
ANR	315747	CompoundStatement		10:57:244:244	315681	1					
ANR	315748	ExpressionStatement	zend_string_release ( ce -> trait_aliases [ i ] -> trait_method -> method_name )	206:6:6194:6262	315681	0	True				
ANR	315749	CallExpression	zend_string_release ( ce -> trait_aliases [ i ] -> trait_method -> method_name )		315681	0					
ANR	315750	Callee	zend_string_release		315681	0					
ANR	315751	Identifier	zend_string_release		315681	0					
ANR	315752	ArgumentList	ce -> trait_aliases [ i ] -> trait_method -> method_name		315681	1					
ANR	315753	Argument	ce -> trait_aliases [ i ] -> trait_method -> method_name		315681	0					
ANR	315754	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method -> method_name		315681	0					
ANR	315755	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method		315681	0					
ANR	315756	ArrayIndexing	ce -> trait_aliases [ i ]		315681	0					
ANR	315757	PtrMemberAccess	ce -> trait_aliases		315681	0					
ANR	315758	Identifier	ce		315681	0					
ANR	315759	Identifier	trait_aliases		315681	1					
ANR	315760	Identifier	i		315681	1					
ANR	315761	Identifier	trait_method		315681	1					
ANR	315762	Identifier	method_name		315681	1					
ANR	315763	IfStatement	if ( ce -> trait_aliases [ i ] -> trait_method -> class_name )		315681	1					
ANR	315764	Condition	ce -> trait_aliases [ i ] -> trait_method -> class_name	208:8:6278:6323	315681	0	True				
ANR	315765	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method -> class_name		315681	0					
ANR	315766	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method		315681	0					
ANR	315767	ArrayIndexing	ce -> trait_aliases [ i ]		315681	0					
ANR	315768	PtrMemberAccess	ce -> trait_aliases		315681	0					
ANR	315769	Identifier	ce		315681	0					
ANR	315770	Identifier	trait_aliases		315681	1					
ANR	315771	Identifier	i		315681	1					
ANR	315772	Identifier	trait_method		315681	1					
ANR	315773	Identifier	class_name		315681	1					
ANR	315774	CompoundStatement		13:56:384:384	315681	1					
ANR	315775	ExpressionStatement	zend_string_release ( ce -> trait_aliases [ i ] -> trait_method -> class_name )	209:6:6334:6401	315681	0	True				
ANR	315776	CallExpression	zend_string_release ( ce -> trait_aliases [ i ] -> trait_method -> class_name )		315681	0					
ANR	315777	Callee	zend_string_release		315681	0					
ANR	315778	Identifier	zend_string_release		315681	0					
ANR	315779	ArgumentList	ce -> trait_aliases [ i ] -> trait_method -> class_name		315681	1					
ANR	315780	Argument	ce -> trait_aliases [ i ] -> trait_method -> class_name		315681	0					
ANR	315781	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method -> class_name		315681	0					
ANR	315782	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method		315681	0					
ANR	315783	ArrayIndexing	ce -> trait_aliases [ i ]		315681	0					
ANR	315784	PtrMemberAccess	ce -> trait_aliases		315681	0					
ANR	315785	Identifier	ce		315681	0					
ANR	315786	Identifier	trait_aliases		315681	1					
ANR	315787	Identifier	i		315681	1					
ANR	315788	Identifier	trait_method		315681	1					
ANR	315789	Identifier	class_name		315681	1					
ANR	315790	ExpressionStatement	efree ( ce -> trait_aliases [ i ] -> trait_method )	211:4:6413:6454	315681	2	True				
ANR	315791	CallExpression	efree ( ce -> trait_aliases [ i ] -> trait_method )		315681	0					
ANR	315792	Callee	efree		315681	0					
ANR	315793	Identifier	efree		315681	0					
ANR	315794	ArgumentList	ce -> trait_aliases [ i ] -> trait_method		315681	1					
ANR	315795	Argument	ce -> trait_aliases [ i ] -> trait_method		315681	0					
ANR	315796	PtrMemberAccess	ce -> trait_aliases [ i ] -> trait_method		315681	0					
ANR	315797	ArrayIndexing	ce -> trait_aliases [ i ]		315681	0					
ANR	315798	PtrMemberAccess	ce -> trait_aliases		315681	0					
ANR	315799	Identifier	ce		315681	0					
ANR	315800	Identifier	trait_aliases		315681	1					
ANR	315801	Identifier	i		315681	1					
ANR	315802	Identifier	trait_method		315681	1					
ANR	315803	IfStatement	if ( ce -> trait_aliases [ i ] -> alias )		315681	1					
ANR	315804	Condition	ce -> trait_aliases [ i ] -> alias	214:7:6469:6495	315681	0	True				
ANR	315805	PtrMemberAccess	ce -> trait_aliases [ i ] -> alias		315681	0					
ANR	315806	ArrayIndexing	ce -> trait_aliases [ i ]		315681	0					
ANR	315807	PtrMemberAccess	ce -> trait_aliases		315681	0					
ANR	315808	Identifier	ce		315681	0					
ANR	315809	Identifier	trait_aliases		315681	1					
ANR	315810	Identifier	i		315681	1					
ANR	315811	Identifier	alias		315681	1					
ANR	315812	CompoundStatement		19:36:556:556	315681	1					
ANR	315813	ExpressionStatement	zend_string_release ( ce -> trait_aliases [ i ] -> alias )	215:4:6504:6552	315681	0	True				
ANR	315814	CallExpression	zend_string_release ( ce -> trait_aliases [ i ] -> alias )		315681	0					
ANR	315815	Callee	zend_string_release		315681	0					
ANR	315816	Identifier	zend_string_release		315681	0					
ANR	315817	ArgumentList	ce -> trait_aliases [ i ] -> alias		315681	1					
ANR	315818	Argument	ce -> trait_aliases [ i ] -> alias		315681	0					
ANR	315819	PtrMemberAccess	ce -> trait_aliases [ i ] -> alias		315681	0					
ANR	315820	ArrayIndexing	ce -> trait_aliases [ i ]		315681	0					
ANR	315821	PtrMemberAccess	ce -> trait_aliases		315681	0					
ANR	315822	Identifier	ce		315681	0					
ANR	315823	Identifier	trait_aliases		315681	1					
ANR	315824	Identifier	i		315681	1					
ANR	315825	Identifier	alias		315681	1					
ANR	315826	ExpressionStatement	efree ( ce -> trait_aliases [ i ] )	218:3:6563:6590	315681	2	True				
ANR	315827	CallExpression	efree ( ce -> trait_aliases [ i ] )		315681	0					
ANR	315828	Callee	efree		315681	0					
ANR	315829	Identifier	efree		315681	0					
ANR	315830	ArgumentList	ce -> trait_aliases [ i ]		315681	1					
ANR	315831	Argument	ce -> trait_aliases [ i ]		315681	0					
ANR	315832	ArrayIndexing	ce -> trait_aliases [ i ]		315681	0					
ANR	315833	PtrMemberAccess	ce -> trait_aliases		315681	0					
ANR	315834	Identifier	ce		315681	0					
ANR	315835	Identifier	trait_aliases		315681	1					
ANR	315836	Identifier	i		315681	1					
ANR	315837	ExpressionStatement	i ++	219:3:6595:6598	315681	3	True				
ANR	315838	PostIncDecOperationExpression	i ++		315681	0					
ANR	315839	Identifier	i		315681	0					
ANR	315840	IncDec	++		315681	1					
ANR	315841	ExpressionStatement	efree ( ce -> trait_aliases )	222:2:6607:6631	315681	2	True				
ANR	315842	CallExpression	efree ( ce -> trait_aliases )		315681	0					
ANR	315843	Callee	efree		315681	0					
ANR	315844	Identifier	efree		315681	0					
ANR	315845	ArgumentList	ce -> trait_aliases		315681	1					
ANR	315846	Argument	ce -> trait_aliases		315681	0					
ANR	315847	PtrMemberAccess	ce -> trait_aliases		315681	0					
ANR	315848	Identifier	ce		315681	0					
ANR	315849	Identifier	trait_aliases		315681	1					
ANR	315850	IfStatement	if ( ce -> trait_precedences )		315681	2					
ANR	315851	Condition	ce -> trait_precedences	225:5:6642:6662	315681	0	True				
ANR	315852	PtrMemberAccess	ce -> trait_precedences		315681	0					
ANR	315853	Identifier	ce		315681	0					
ANR	315854	Identifier	trait_precedences		315681	1					
ANR	315855	CompoundStatement		31:2:727:739	315681	1					
ANR	315856	IdentifierDeclStatement	size_t i = 0 ;	226:2:6669:6681	315681	0	True				
ANR	315857	IdentifierDecl	i = 0		315681	0					
ANR	315858	IdentifierDeclType	size_t		315681	0					
ANR	315859	Identifier	i		315681	1					
ANR	315860	AssignmentExpression	i = 0		315681	2		=			
ANR	315861	Identifier	i		315681	0					
ANR	315862	PrimaryExpression	0		315681	1					
ANR	315863	WhileStatement	while ( ce -> trait_precedences [ i ] )		315681	1					
ANR	315864	Condition	ce -> trait_precedences [ i ]	228:9:6693:6716	315681	0	True				
ANR	315865	ArrayIndexing	ce -> trait_precedences [ i ]		315681	0					
ANR	315866	PtrMemberAccess	ce -> trait_precedences		315681	0					
ANR	315867	Identifier	ce		315681	0					
ANR	315868	Identifier	trait_precedences		315681	1					
ANR	315869	Identifier	i		315681	1					
ANR	315870	CompoundStatement		33:35:777:777	315681	1					
ANR	315871	ExpressionStatement	zend_string_release ( ce -> trait_precedences [ i ] -> trait_method -> method_name )	229:3:6724:6796	315681	0	True				
ANR	315872	CallExpression	zend_string_release ( ce -> trait_precedences [ i ] -> trait_method -> method_name )		315681	0					
ANR	315873	Callee	zend_string_release		315681	0					
ANR	315874	Identifier	zend_string_release		315681	0					
ANR	315875	ArgumentList	ce -> trait_precedences [ i ] -> trait_method -> method_name		315681	1					
ANR	315876	Argument	ce -> trait_precedences [ i ] -> trait_method -> method_name		315681	0					
ANR	315877	PtrMemberAccess	ce -> trait_precedences [ i ] -> trait_method -> method_name		315681	0					
ANR	315878	PtrMemberAccess	ce -> trait_precedences [ i ] -> trait_method		315681	0					
ANR	315879	ArrayIndexing	ce -> trait_precedences [ i ]		315681	0					
ANR	315880	PtrMemberAccess	ce -> trait_precedences		315681	0					
ANR	315881	Identifier	ce		315681	0					
ANR	315882	Identifier	trait_precedences		315681	1					
ANR	315883	Identifier	i		315681	1					
ANR	315884	Identifier	trait_method		315681	1					
ANR	315885	Identifier	method_name		315681	1					
ANR	315886	ExpressionStatement	zend_string_release ( ce -> trait_precedences [ i ] -> trait_method -> class_name )	230:3:6801:6872	315681	1	True				
ANR	315887	CallExpression	zend_string_release ( ce -> trait_precedences [ i ] -> trait_method -> class_name )		315681	0					
ANR	315888	Callee	zend_string_release		315681	0					
ANR	315889	Identifier	zend_string_release		315681	0					
ANR	315890	ArgumentList	ce -> trait_precedences [ i ] -> trait_method -> class_name		315681	1					
ANR	315891	Argument	ce -> trait_precedences [ i ] -> trait_method -> class_name		315681	0					
ANR	315892	PtrMemberAccess	ce -> trait_precedences [ i ] -> trait_method -> class_name		315681	0					
ANR	315893	PtrMemberAccess	ce -> trait_precedences [ i ] -> trait_method		315681	0					
ANR	315894	ArrayIndexing	ce -> trait_precedences [ i ]		315681	0					
ANR	315895	PtrMemberAccess	ce -> trait_precedences		315681	0					
ANR	315896	Identifier	ce		315681	0					
ANR	315897	Identifier	trait_precedences		315681	1					
ANR	315898	Identifier	i		315681	1					
ANR	315899	Identifier	trait_method		315681	1					
ANR	315900	Identifier	class_name		315681	1					
ANR	315901	ExpressionStatement	efree ( ce -> trait_precedences [ i ] -> trait_method )	231:3:6877:6922	315681	2	True				
ANR	315902	CallExpression	efree ( ce -> trait_precedences [ i ] -> trait_method )		315681	0					
ANR	315903	Callee	efree		315681	0					
ANR	315904	Identifier	efree		315681	0					
ANR	315905	ArgumentList	ce -> trait_precedences [ i ] -> trait_method		315681	1					
ANR	315906	Argument	ce -> trait_precedences [ i ] -> trait_method		315681	0					
ANR	315907	PtrMemberAccess	ce -> trait_precedences [ i ] -> trait_method		315681	0					
ANR	315908	ArrayIndexing	ce -> trait_precedences [ i ]		315681	0					
ANR	315909	PtrMemberAccess	ce -> trait_precedences		315681	0					
ANR	315910	Identifier	ce		315681	0					
ANR	315911	Identifier	trait_precedences		315681	1					
ANR	315912	Identifier	i		315681	1					
ANR	315913	Identifier	trait_method		315681	1					
ANR	315914	IfStatement	if ( ce -> trait_precedences [ i ] -> exclude_from_classes )		315681	3					
ANR	315915	Condition	ce -> trait_precedences [ i ] -> exclude_from_classes	233:7:6932:6977	315681	0	True				
ANR	315916	PtrMemberAccess	ce -> trait_precedences [ i ] -> exclude_from_classes		315681	0					
ANR	315917	ArrayIndexing	ce -> trait_precedences [ i ]		315681	0					
ANR	315918	PtrMemberAccess	ce -> trait_precedences		315681	0					
ANR	315919	Identifier	ce		315681	0					
ANR	315920	Identifier	trait_precedences		315681	1					
ANR	315921	Identifier	i		315681	1					
ANR	315922	Identifier	exclude_from_classes		315681	1					
ANR	315923	CompoundStatement		40:4:1062:1126	315681	1					
ANR	315924	IdentifierDeclStatement	size_t j = 0 ;	234:4:6986:6998	315681	0	True				
ANR	315925	IdentifierDecl	j = 0		315681	0					
ANR	315926	IdentifierDeclType	size_t		315681	0					
ANR	315927	Identifier	j		315681	1					
ANR	315928	AssignmentExpression	j = 0		315681	2		=			
ANR	315929	Identifier	j		315681	0					
ANR	315930	PrimaryExpression	0		315681	1					
ANR	315931	IdentifierDeclStatement	zend_trait_precedence * cur_precedence = ce -> trait_precedences [ i ] ;	235:4:7004:7068	315681	1	True				
ANR	315932	IdentifierDecl	* cur_precedence = ce -> trait_precedences [ i ]		315681	0					
ANR	315933	IdentifierDeclType	zend_trait_precedence *		315681	0					
ANR	315934	Identifier	cur_precedence		315681	1					
ANR	315935	AssignmentExpression	* cur_precedence = ce -> trait_precedences [ i ]		315681	2		=			
ANR	315936	Identifier	cur_precedence		315681	0					
ANR	315937	ArrayIndexing	ce -> trait_precedences [ i ]		315681	1					
ANR	315938	PtrMemberAccess	ce -> trait_precedences		315681	0					
ANR	315939	Identifier	ce		315681	0					
ANR	315940	Identifier	trait_precedences		315681	1					
ANR	315941	Identifier	i		315681	1					
ANR	315942	WhileStatement	while ( cur_precedence -> exclude_from_classes [ j ] . class_name )		315681	2					
ANR	315943	Condition	cur_precedence -> exclude_from_classes [ j ] . class_name	236:11:7081:7130	315681	0	True				
ANR	315944	MemberAccess	cur_precedence -> exclude_from_classes [ j ] . class_name		315681	0					
ANR	315945	ArrayIndexing	cur_precedence -> exclude_from_classes [ j ]		315681	0					
ANR	315946	PtrMemberAccess	cur_precedence -> exclude_from_classes		315681	0					
ANR	315947	Identifier	cur_precedence		315681	0					
ANR	315948	Identifier	exclude_from_classes		315681	1					
ANR	315949	Identifier	j		315681	1					
ANR	315950	Identifier	class_name		315681	1					
ANR	315951	CompoundStatement		41:63:1191:1191	315681	1					
ANR	315952	ExpressionStatement	zend_string_release ( cur_precedence -> exclude_from_classes [ j ] . class_name )	237:5:7140:7211	315681	0	True				
ANR	315953	CallExpression	zend_string_release ( cur_precedence -> exclude_from_classes [ j ] . class_name )		315681	0					
ANR	315954	Callee	zend_string_release		315681	0					
ANR	315955	Identifier	zend_string_release		315681	0					
ANR	315956	ArgumentList	cur_precedence -> exclude_from_classes [ j ] . class_name		315681	1					
ANR	315957	Argument	cur_precedence -> exclude_from_classes [ j ] . class_name		315681	0					
ANR	315958	MemberAccess	cur_precedence -> exclude_from_classes [ j ] . class_name		315681	0					
ANR	315959	ArrayIndexing	cur_precedence -> exclude_from_classes [ j ]		315681	0					
ANR	315960	PtrMemberAccess	cur_precedence -> exclude_from_classes		315681	0					
ANR	315961	Identifier	cur_precedence		315681	0					
ANR	315962	Identifier	exclude_from_classes		315681	1					
ANR	315963	Identifier	j		315681	1					
ANR	315964	Identifier	class_name		315681	1					
ANR	315965	ExpressionStatement	j ++	238:5:7218:7221	315681	1	True				
ANR	315966	PostIncDecOperationExpression	j ++		315681	0					
ANR	315967	Identifier	j		315681	0					
ANR	315968	IncDec	++		315681	1					
ANR	315969	ExpressionStatement	efree ( ce -> trait_precedences [ i ] -> exclude_from_classes )	240:4:7233:7286	315681	3	True				
ANR	315970	CallExpression	efree ( ce -> trait_precedences [ i ] -> exclude_from_classes )		315681	0					
ANR	315971	Callee	efree		315681	0					
ANR	315972	Identifier	efree		315681	0					
ANR	315973	ArgumentList	ce -> trait_precedences [ i ] -> exclude_from_classes		315681	1					
ANR	315974	Argument	ce -> trait_precedences [ i ] -> exclude_from_classes		315681	0					
ANR	315975	PtrMemberAccess	ce -> trait_precedences [ i ] -> exclude_from_classes		315681	0					
ANR	315976	ArrayIndexing	ce -> trait_precedences [ i ]		315681	0					
ANR	315977	PtrMemberAccess	ce -> trait_precedences		315681	0					
ANR	315978	Identifier	ce		315681	0					
ANR	315979	Identifier	trait_precedences		315681	1					
ANR	315980	Identifier	i		315681	1					
ANR	315981	Identifier	exclude_from_classes		315681	1					
ANR	315982	ExpressionStatement	efree ( ce -> trait_precedences [ i ] )	242:3:7296:7327	315681	4	True				
ANR	315983	CallExpression	efree ( ce -> trait_precedences [ i ] )		315681	0					
ANR	315984	Callee	efree		315681	0					
ANR	315985	Identifier	efree		315681	0					
ANR	315986	ArgumentList	ce -> trait_precedences [ i ]		315681	1					
ANR	315987	Argument	ce -> trait_precedences [ i ]		315681	0					
ANR	315988	ArrayIndexing	ce -> trait_precedences [ i ]		315681	0					
ANR	315989	PtrMemberAccess	ce -> trait_precedences		315681	0					
ANR	315990	Identifier	ce		315681	0					
ANR	315991	Identifier	trait_precedences		315681	1					
ANR	315992	Identifier	i		315681	1					
ANR	315993	ExpressionStatement	i ++	243:3:7332:7335	315681	5	True				
ANR	315994	PostIncDecOperationExpression	i ++		315681	0					
ANR	315995	Identifier	i		315681	0					
ANR	315996	IncDec	++		315681	1					
ANR	315997	ExpressionStatement	efree ( ce -> trait_precedences )	245:2:7343:7371	315681	2	True				
ANR	315998	CallExpression	efree ( ce -> trait_precedences )		315681	0					
ANR	315999	Callee	efree		315681	0					
ANR	316000	Identifier	efree		315681	0					
ANR	316001	ArgumentList	ce -> trait_precedences		315681	1					
ANR	316002	Argument	ce -> trait_precedences		315681	0					
ANR	316003	PtrMemberAccess	ce -> trait_precedences		315681	0					
ANR	316004	Identifier	ce		315681	0					
ANR	316005	Identifier	trait_precedences		315681	1					
ANR	316006	ReturnType	void		315681	1					
ANR	316007	Identifier	_destroy_zend_class_traits_info		315681	2					
ANR	316008	ParameterList	zend_class_entry * ce		315681	3					
ANR	316009	Parameter	zend_class_entry * ce	195:37:5919:5938	315681	0	True				
ANR	316010	ParameterType	zend_class_entry *		315681	0					
ANR	316011	Identifier	ce		315681	1					
ANR	316012	CFGEntryNode	ENTRY		315681		True				
ANR	316013	CFGExitNode	EXIT		315681		True				
ANR	316014	Symbol	ce -> trait_aliases [ i ] -> trait_method -> class_name		315681						
ANR	316015	Symbol	ce -> trait_aliases [ i ] -> alias		315681						
ANR	316016	Symbol	* ce		315681						
ANR	316017	Symbol	* * ce		315681						
ANR	316018	Symbol	cur_precedence		315681						
ANR	316019	Symbol	ce -> trait_precedences [ i ] -> trait_method -> class_name		315681						
ANR	316020	Symbol	ce -> trait_precedences [ i ] -> exclude_from_classes		315681						
ANR	316021	Symbol	* ce -> trait_precedences		315681						
ANR	316022	Symbol	ce -> trait_aliases [ i ] -> trait_method -> method_name		315681						
ANR	316023	Symbol	* * ce -> trait_aliases		315681						
ANR	316024	Symbol	* * * ce -> trait_precedences		315681						
ANR	316025	Symbol	* cur_precedence		315681						
ANR	316026	Symbol	cur_precedence -> exclude_from_classes [ j ] . class_name		315681						
ANR	316027	Symbol	ce		315681						
ANR	316028	Symbol	* * i		315681						
ANR	316029	Symbol	ce -> trait_aliases		315681						
ANR	316030	Symbol	* * ce -> trait_precedences		315681						
ANR	316031	Symbol	ce -> trait_precedences [ i ] -> trait_method -> method_name		315681						
ANR	316032	Symbol	ce -> trait_precedences [ i ] -> trait_method		315681						
ANR	316033	Symbol	i		315681						
ANR	316034	Symbol	j		315681						
ANR	316035	Symbol	ce -> num_traits		315681						
ANR	316036	Symbol	* cur_precedence -> exclude_from_classes		315681						
ANR	316037	Symbol	ce -> trait_precedences		315681						
ANR	316038	Symbol	cur_precedence -> exclude_from_classes		315681						
ANR	316039	Symbol	ce -> traits		315681						
ANR	316040	Symbol	* * * * ce		315681						
ANR	316041	Symbol	* * * ce -> trait_aliases		315681						
ANR	316042	Symbol	* i		315681						
ANR	316043	Symbol	ce -> trait_aliases [ i ] -> trait_method		315681						
ANR	316044	Symbol	* ce -> trait_aliases		315681						
ANR	316045	Symbol	* j		315681						
ANR	316046	Symbol	* * * i		315681						
ANR	316047	Symbol	* ce -> trait_aliases [ i ] -> trait_method		315681						
ANR	316048	Symbol	* ce -> trait_precedences [ i ] -> trait_method		315681						
ANR	316049	Symbol	* * cur_precedence		315681						
ANR	316050	Symbol	* * * ce		315681						
ANR	316051	Function	destroy_zend_class	249:0:7379:9614							
ANR	316052	FunctionDef	destroy_zend_class (zval * zv)		316051	0					
ANR	316053	CompoundStatement		250:0:7422:9614	316051	0					
ANR	316054	IdentifierDeclStatement	zend_property_info * prop_info ;	251:1:7425:7454	316051	0	True				
ANR	316055	IdentifierDecl	* prop_info		316051	0					
ANR	316056	IdentifierDeclType	zend_property_info *		316051	0					
ANR	316057	Identifier	prop_info		316051	1					
ANR	316058	IdentifierDeclStatement	zend_class_entry * ce = Z_PTR_P ( zv ) ;	252:1:7457:7491	316051	1	True				
ANR	316059	IdentifierDecl	* ce = Z_PTR_P ( zv )		316051	0					
ANR	316060	IdentifierDeclType	zend_class_entry *		316051	0					
ANR	316061	Identifier	ce		316051	1					
ANR	316062	AssignmentExpression	* ce = Z_PTR_P ( zv )		316051	2		=			
ANR	316063	Identifier	ce		316051	0					
ANR	316064	CallExpression	Z_PTR_P ( zv )		316051	1					
ANR	316065	Callee	Z_PTR_P		316051	0					
ANR	316066	Identifier	Z_PTR_P		316051	0					
ANR	316067	ArgumentList	zv		316051	1					
ANR	316068	Argument	zv		316051	0					
ANR	316069	Identifier	zv		316051	0					
ANR	316070	IfStatement	if ( -- ce -> refcount > 0 )		316051	2					
ANR	316071	Condition	-- ce -> refcount > 0	254:5:7499:7516	316051	0	True				
ANR	316072	RelationalExpression	-- ce -> refcount > 0		316051	0		>			
ANR	316073	UnaryExpression	-- ce -> refcount		316051	0					
ANR	316074	IncDec	--		316051	0					
ANR	316075	PtrMemberAccess	ce -> refcount		316051	1					
ANR	316076	Identifier	ce		316051	0					
ANR	316077	Identifier	refcount		316051	1					
ANR	316078	PrimaryExpression	0		316051	1					
ANR	316079	CompoundStatement		5:25:96:96	316051	1					
ANR	316080	ReturnStatement	return ;	255:2:7523:7529	316051	0	True				
ANR	316081	SwitchStatement	switch ( ce -> type )		316051	3					
ANR	316082	Condition	ce -> type	257:9:7543:7550	316051	0	True				
ANR	316083	PtrMemberAccess	ce -> type		316051	0					
ANR	316084	Identifier	ce		316051	0					
ANR	316085	Identifier	type		316051	1					
ANR	316086	CompoundStatement		8:19:130:130	316051	1					
ANR	316087	Label	case ZEND_USER_CLASS :	258:2:7557:7577	316051	0	True				
ANR	316088	Identifier	ZEND_USER_CLASS		316051	0					
ANR	316089	IfStatement	if ( ce -> default_properties_table )		316051	1					
ANR	316090	Condition	ce -> default_properties_table	259:7:7586:7613	316051	0	True				
ANR	316091	PtrMemberAccess	ce -> default_properties_table		316051	0					
ANR	316092	Identifier	ce		316051	0					
ANR	316093	Identifier	default_properties_table		316051	1					
ANR	316094	CompoundStatement		12:4:243:287	316051	1					
ANR	316095	IdentifierDeclStatement	zval * p = ce -> default_properties_table ;	260:4:7622:7660	316051	0	True				
ANR	316096	IdentifierDecl	* p = ce -> default_properties_table		316051	0					
ANR	316097	IdentifierDeclType	zval *		316051	0					
ANR	316098	Identifier	p		316051	1					
ANR	316099	AssignmentExpression	* p = ce -> default_properties_table		316051	2		=			
ANR	316100	Identifier	p		316051	0					
ANR	316101	PtrMemberAccess	ce -> default_properties_table		316051	1					
ANR	316102	Identifier	ce		316051	0					
ANR	316103	Identifier	default_properties_table		316051	1					
ANR	316104	IdentifierDeclStatement	zval * end = p + ce -> default_properties_count ;	261:4:7666:7710	316051	1	True				
ANR	316105	IdentifierDecl	* end = p + ce -> default_properties_count		316051	0					
ANR	316106	IdentifierDeclType	zval *		316051	0					
ANR	316107	Identifier	end		316051	1					
ANR	316108	AssignmentExpression	* end = p + ce -> default_properties_count		316051	2		=			
ANR	316109	Identifier	end		316051	0					
ANR	316110	AdditiveExpression	p + ce -> default_properties_count		316051	1		+			
ANR	316111	Identifier	p		316051	0					
ANR	316112	PtrMemberAccess	ce -> default_properties_count		316051	1					
ANR	316113	Identifier	ce		316051	0					
ANR	316114	Identifier	default_properties_count		316051	1					
ANR	316115	WhileStatement	while ( p != end )		316051	2					
ANR	316116	Condition	p != end	263:11:7724:7731	316051	0	True				
ANR	316117	EqualityExpression	p != end		316051	0		!=			
ANR	316118	Identifier	p		316051	0					
ANR	316119	Identifier	end		316051	1					
ANR	316120	CompoundStatement		14:21:311:311	316051	1					
ANR	316121	Statement	i_zval_ptr_dtor	264:5:7741:7755	316051	0	True				
ANR	316122	Statement	(	264:20:7756:7756	316051	1	True				
ANR	316123	Statement	p	264:21:7757:7757	316051	2	True				
ANR	316124	Statement	ZEND_FILE_LINE_CC	264:23:7759:7775	316051	3	True				
ANR	316125	Statement	)	264:40:7776:7776	316051	4	True				
ANR	316126	ExpressionStatement		264:41:7777:7777	316051	5	True				
ANR	316127	ExpressionStatement	p ++	265:5:7784:7787	316051	6	True				
ANR	316128	PostIncDecOperationExpression	p ++		316051	0					
ANR	316129	Identifier	p		316051	0					
ANR	316130	IncDec	++		316051	1					
ANR	316131	ExpressionStatement	efree ( ce -> default_properties_table )	267:4:7799:7834	316051	3	True				
ANR	316132	CallExpression	efree ( ce -> default_properties_table )		316051	0					
ANR	316133	Callee	efree		316051	0					
ANR	316134	Identifier	efree		316051	0					
ANR	316135	ArgumentList	ce -> default_properties_table		316051	1					
ANR	316136	Argument	ce -> default_properties_table		316051	0					
ANR	316137	PtrMemberAccess	ce -> default_properties_table		316051	0					
ANR	316138	Identifier	ce		316051	0					
ANR	316139	Identifier	default_properties_table		316051	1					
ANR	316140	IfStatement	if ( ce -> default_static_members_table )		316051	2					
ANR	316141	Condition	ce -> default_static_members_table	269:7:7848:7879	316051	0	True				
ANR	316142	PtrMemberAccess	ce -> default_static_members_table		316051	0					
ANR	316143	Identifier	ce		316051	0					
ANR	316144	Identifier	default_static_members_table		316051	1					
ANR	316145	CompoundStatement		22:4:513:561	316051	1					
ANR	316146	IdentifierDeclStatement	zval * p = ce -> default_static_members_table ;	270:4:7888:7930	316051	0	True				
ANR	316147	IdentifierDecl	* p = ce -> default_static_members_table		316051	0					
ANR	316148	IdentifierDeclType	zval *		316051	0					
ANR	316149	Identifier	p		316051	1					
ANR	316150	AssignmentExpression	* p = ce -> default_static_members_table		316051	2		=			
ANR	316151	Identifier	p		316051	0					
ANR	316152	PtrMemberAccess	ce -> default_static_members_table		316051	1					
ANR	316153	Identifier	ce		316051	0					
ANR	316154	Identifier	default_static_members_table		316051	1					
ANR	316155	IdentifierDeclStatement	zval * end = p + ce -> default_static_members_count ;	271:4:7936:7984	316051	1	True				
ANR	316156	IdentifierDecl	* end = p + ce -> default_static_members_count		316051	0					
ANR	316157	IdentifierDeclType	zval *		316051	0					
ANR	316158	Identifier	end		316051	1					
ANR	316159	AssignmentExpression	* end = p + ce -> default_static_members_count		316051	2		=			
ANR	316160	Identifier	end		316051	0					
ANR	316161	AdditiveExpression	p + ce -> default_static_members_count		316051	1		+			
ANR	316162	Identifier	p		316051	0					
ANR	316163	PtrMemberAccess	ce -> default_static_members_count		316051	1					
ANR	316164	Identifier	ce		316051	0					
ANR	316165	Identifier	default_static_members_count		316051	1					
ANR	316166	WhileStatement	while ( p != end )		316051	2					
ANR	316167	Condition	p != end	273:11:7998:8005	316051	0	True				
ANR	316168	EqualityExpression	p != end		316051	0		!=			
ANR	316169	Identifier	p		316051	0					
ANR	316170	Identifier	end		316051	1					
ANR	316171	CompoundStatement		24:21:585:585	316051	1					
ANR	316172	Statement	i_zval_ptr_dtor	274:5:8015:8029	316051	0	True				
ANR	316173	Statement	(	274:20:8030:8030	316051	1	True				
ANR	316174	Statement	p	274:21:8031:8031	316051	2	True				
ANR	316175	Statement	ZEND_FILE_LINE_CC	274:23:8033:8049	316051	3	True				
ANR	316176	Statement	)	274:40:8050:8050	316051	4	True				
ANR	316177	ExpressionStatement		274:41:8051:8051	316051	5	True				
ANR	316178	ExpressionStatement	p ++	275:5:8058:8061	316051	6	True				
ANR	316179	PostIncDecOperationExpression	p ++		316051	0					
ANR	316180	Identifier	p		316051	0					
ANR	316181	IncDec	++		316051	1					
ANR	316182	ExpressionStatement	efree ( ce -> default_static_members_table )	277:4:8073:8112	316051	3	True				
ANR	316183	CallExpression	efree ( ce -> default_static_members_table )		316051	0					
ANR	316184	Callee	efree		316051	0					
ANR	316185	Identifier	efree		316051	0					
ANR	316186	ArgumentList	ce -> default_static_members_table		316051	1					
ANR	316187	Argument	ce -> default_static_members_table		316051	0					
ANR	316188	PtrMemberAccess	ce -> default_static_members_table		316051	0					
ANR	316189	Identifier	ce		316051	0					
ANR	316190	Identifier	default_static_members_table		316051	1					
ANR	316191	Statement	ZEND_HASH_FOREACH_PTR	279:3:8122:8142	316051	3	True				
ANR	316192	Statement	(	279:24:8143:8143	316051	4	True				
ANR	316193	Statement	&	279:25:8144:8144	316051	5	True				
ANR	316194	Statement	ce	279:26:8145:8146	316051	6	True				
ANR	316195	Statement	->	279:28:8147:8148	316051	7	True				
ANR	316196	Statement	properties_info	279:30:8149:8163	316051	8	True				
ANR	316197	Statement	","	279:45:8164:8164	316051	9	True				
ANR	316198	Statement	prop_info	279:47:8166:8174	316051	10	True				
ANR	316199	Statement	)	279:56:8175:8175	316051	11	True				
ANR	316200	CompoundStatement		30:58:754:754	316051	12					
ANR	316201	IfStatement	if ( prop_info -> ce == ce || ( prop_info -> flags & ZEND_ACC_SHADOW ) )		316051	0					
ANR	316202	Condition	prop_info -> ce == ce || ( prop_info -> flags & ZEND_ACC_SHADOW )	280:8:8187:8245	316051	0	True				
ANR	316203	OrExpression	prop_info -> ce == ce || ( prop_info -> flags & ZEND_ACC_SHADOW )		316051	0		||			
ANR	316204	EqualityExpression	prop_info -> ce == ce		316051	0		==			
ANR	316205	PtrMemberAccess	prop_info -> ce		316051	0					
ANR	316206	Identifier	prop_info		316051	0					
ANR	316207	Identifier	ce		316051	1					
ANR	316208	Identifier	ce		316051	1					
ANR	316209	BitAndExpression	prop_info -> flags & ZEND_ACC_SHADOW		316051	1		&			
ANR	316210	PtrMemberAccess	prop_info -> flags		316051	0					
ANR	316211	Identifier	prop_info		316051	0					
ANR	316212	Identifier	flags		316051	1					
ANR	316213	Identifier	ZEND_ACC_SHADOW		316051	1					
ANR	316214	CompoundStatement		31:69:825:825	316051	1					
ANR	316215	ExpressionStatement	zend_string_release ( prop_info -> name )	281:5:8255:8291	316051	0	True				
ANR	316216	CallExpression	zend_string_release ( prop_info -> name )		316051	0					
ANR	316217	Callee	zend_string_release		316051	0					
ANR	316218	Identifier	zend_string_release		316051	0					
ANR	316219	ArgumentList	prop_info -> name		316051	1					
ANR	316220	Argument	prop_info -> name		316051	0					
ANR	316221	PtrMemberAccess	prop_info -> name		316051	0					
ANR	316222	Identifier	prop_info		316051	0					
ANR	316223	Identifier	name		316051	1					
ANR	316224	IfStatement	if ( prop_info -> doc_comment )		316051	1					
ANR	316225	Condition	prop_info -> doc_comment	282:9:8302:8323	316051	0	True				
ANR	316226	PtrMemberAccess	prop_info -> doc_comment		316051	0					
ANR	316227	Identifier	prop_info		316051	0					
ANR	316228	Identifier	doc_comment		316051	1					
ANR	316229	CompoundStatement		33:33:903:903	316051	1					
ANR	316230	ExpressionStatement	zend_string_release ( prop_info -> doc_comment )	283:6:8334:8377	316051	0	True				
ANR	316231	CallExpression	zend_string_release ( prop_info -> doc_comment )		316051	0					
ANR	316232	Callee	zend_string_release		316051	0					
ANR	316233	Identifier	zend_string_release		316051	0					
ANR	316234	ArgumentList	prop_info -> doc_comment		316051	1					
ANR	316235	Argument	prop_info -> doc_comment		316051	0					
ANR	316236	PtrMemberAccess	prop_info -> doc_comment		316051	0					
ANR	316237	Identifier	prop_info		316051	0					
ANR	316238	Identifier	doc_comment		316051	1					
ANR	316239	ExpressionStatement	ZEND_HASH_FOREACH_END ( )	286:5:8397:8420	316051	13	True				
ANR	316240	CallExpression	ZEND_HASH_FOREACH_END ( )		316051	0					
ANR	316241	Callee	ZEND_HASH_FOREACH_END		316051	0					
ANR	316242	Identifier	ZEND_HASH_FOREACH_END		316051	0					
ANR	316243	ArgumentList			316051	1					
ANR	316244	ExpressionStatement	zend_hash_destroy ( & ce -> properties_info )	287:3:8425:8464	316051	14	True				
ANR	316245	CallExpression	zend_hash_destroy ( & ce -> properties_info )		316051	0					
ANR	316246	Callee	zend_hash_destroy		316051	0					
ANR	316247	Identifier	zend_hash_destroy		316051	0					
ANR	316248	ArgumentList	& ce -> properties_info		316051	1					
ANR	316249	Argument	& ce -> properties_info		316051	0					
ANR	316250	UnaryOperationExpression	& ce -> properties_info		316051	0					
ANR	316251	UnaryOperator	&		316051	0					
ANR	316252	PtrMemberAccess	ce -> properties_info		316051	1					
ANR	316253	Identifier	ce		316051	0					
ANR	316254	Identifier	properties_info		316051	1					
ANR	316255	ExpressionStatement	zend_string_release ( ce -> name )	288:3:8469:8498	316051	15	True				
ANR	316256	CallExpression	zend_string_release ( ce -> name )		316051	0					
ANR	316257	Callee	zend_string_release		316051	0					
ANR	316258	Identifier	zend_string_release		316051	0					
ANR	316259	ArgumentList	ce -> name		316051	1					
ANR	316260	Argument	ce -> name		316051	0					
ANR	316261	PtrMemberAccess	ce -> name		316051	0					
ANR	316262	Identifier	ce		316051	0					
ANR	316263	Identifier	name		316051	1					
ANR	316264	ExpressionStatement	zend_hash_destroy ( & ce -> function_table )	289:3:8503:8541	316051	16	True				
ANR	316265	CallExpression	zend_hash_destroy ( & ce -> function_table )		316051	0					
ANR	316266	Callee	zend_hash_destroy		316051	0					
ANR	316267	Identifier	zend_hash_destroy		316051	0					
ANR	316268	ArgumentList	& ce -> function_table		316051	1					
ANR	316269	Argument	& ce -> function_table		316051	0					
ANR	316270	UnaryOperationExpression	& ce -> function_table		316051	0					
ANR	316271	UnaryOperator	&		316051	0					
ANR	316272	PtrMemberAccess	ce -> function_table		316051	1					
ANR	316273	Identifier	ce		316051	0					
ANR	316274	Identifier	function_table		316051	1					
ANR	316275	ExpressionStatement	zend_hash_destroy ( & ce -> constants_table )	290:3:8546:8585	316051	17	True				
ANR	316276	CallExpression	zend_hash_destroy ( & ce -> constants_table )		316051	0					
ANR	316277	Callee	zend_hash_destroy		316051	0					
ANR	316278	Identifier	zend_hash_destroy		316051	0					
ANR	316279	ArgumentList	& ce -> constants_table		316051	1					
ANR	316280	Argument	& ce -> constants_table		316051	0					
ANR	316281	UnaryOperationExpression	& ce -> constants_table		316051	0					
ANR	316282	UnaryOperator	&		316051	0					
ANR	316283	PtrMemberAccess	ce -> constants_table		316051	1					
ANR	316284	Identifier	ce		316051	0					
ANR	316285	Identifier	constants_table		316051	1					
ANR	316286	IfStatement	if ( ce -> num_interfaces > 0 && ce -> interfaces )		316051	18					
ANR	316287	Condition	ce -> num_interfaces > 0 && ce -> interfaces	291:7:8594:8633	316051	0	True				
ANR	316288	AndExpression	ce -> num_interfaces > 0 && ce -> interfaces		316051	0		&&			
ANR	316289	RelationalExpression	ce -> num_interfaces > 0		316051	0		>			
ANR	316290	PtrMemberAccess	ce -> num_interfaces		316051	0					
ANR	316291	Identifier	ce		316051	0					
ANR	316292	Identifier	num_interfaces		316051	1					
ANR	316293	PrimaryExpression	0		316051	1					
ANR	316294	PtrMemberAccess	ce -> interfaces		316051	1					
ANR	316295	Identifier	ce		316051	0					
ANR	316296	Identifier	interfaces		316051	1					
ANR	316297	CompoundStatement		42:49:1213:1213	316051	1					
ANR	316298	ExpressionStatement	efree ( ce -> interfaces )	292:4:8642:8663	316051	0	True				
ANR	316299	CallExpression	efree ( ce -> interfaces )		316051	0					
ANR	316300	Callee	efree		316051	0					
ANR	316301	Identifier	efree		316051	0					
ANR	316302	ArgumentList	ce -> interfaces		316051	1					
ANR	316303	Argument	ce -> interfaces		316051	0					
ANR	316304	PtrMemberAccess	ce -> interfaces		316051	0					
ANR	316305	Identifier	ce		316051	0					
ANR	316306	Identifier	interfaces		316051	1					
ANR	316307	IfStatement	if ( ce -> info . user . doc_comment )		316051	19					
ANR	316308	Condition	ce -> info . user . doc_comment	294:7:8677:8701	316051	0	True				
ANR	316309	MemberAccess	ce -> info . user . doc_comment		316051	0					
ANR	316310	MemberAccess	ce -> info . user		316051	0					
ANR	316311	PtrMemberAccess	ce -> info		316051	0					
ANR	316312	Identifier	ce		316051	0					
ANR	316313	Identifier	info		316051	1					
ANR	316314	Identifier	user		316051	1					
ANR	316315	Identifier	doc_comment		316051	1					
ANR	316316	CompoundStatement		45:34:1281:1281	316051	1					
ANR	316317	ExpressionStatement	zend_string_release ( ce -> info . user . doc_comment )	295:4:8710:8756	316051	0	True				
ANR	316318	CallExpression	zend_string_release ( ce -> info . user . doc_comment )		316051	0					
ANR	316319	Callee	zend_string_release		316051	0					
ANR	316320	Identifier	zend_string_release		316051	0					
ANR	316321	ArgumentList	ce -> info . user . doc_comment		316051	1					
ANR	316322	Argument	ce -> info . user . doc_comment		316051	0					
ANR	316323	MemberAccess	ce -> info . user . doc_comment		316051	0					
ANR	316324	MemberAccess	ce -> info . user		316051	0					
ANR	316325	PtrMemberAccess	ce -> info		316051	0					
ANR	316326	Identifier	ce		316051	0					
ANR	316327	Identifier	info		316051	1					
ANR	316328	Identifier	user		316051	1					
ANR	316329	Identifier	doc_comment		316051	1					
ANR	316330	ExpressionStatement	_destroy_zend_class_traits_info ( ce )	298:3:8767:8802	316051	20	True				
ANR	316331	CallExpression	_destroy_zend_class_traits_info ( ce )		316051	0					
ANR	316332	Callee	_destroy_zend_class_traits_info		316051	0					
ANR	316333	Identifier	_destroy_zend_class_traits_info		316051	0					
ANR	316334	ArgumentList	ce		316051	1					
ANR	316335	Argument	ce		316051	0					
ANR	316336	Identifier	ce		316051	0					
ANR	316337	BreakStatement	break ;	300:3:8808:8813	316051	21	True				
ANR	316338	Label	case ZEND_INTERNAL_CLASS :	301:2:8817:8841	316051	22	True				
ANR	316339	Identifier	ZEND_INTERNAL_CLASS		316051	0					
ANR	316340	IfStatement	if ( ce -> default_properties_table )		316051	23					
ANR	316341	Condition	ce -> default_properties_table	302:7:8850:8877	316051	0	True				
ANR	316342	PtrMemberAccess	ce -> default_properties_table		316051	0					
ANR	316343	Identifier	ce		316051	0					
ANR	316344	Identifier	default_properties_table		316051	1					
ANR	316345	CompoundStatement		55:4:1507:1551	316051	1					
ANR	316346	IdentifierDeclStatement	zval * p = ce -> default_properties_table ;	303:4:8886:8924	316051	0	True				
ANR	316347	IdentifierDecl	* p = ce -> default_properties_table		316051	0					
ANR	316348	IdentifierDeclType	zval *		316051	0					
ANR	316349	Identifier	p		316051	1					
ANR	316350	AssignmentExpression	* p = ce -> default_properties_table		316051	2		=			
ANR	316351	Identifier	p		316051	0					
ANR	316352	PtrMemberAccess	ce -> default_properties_table		316051	1					
ANR	316353	Identifier	ce		316051	0					
ANR	316354	Identifier	default_properties_table		316051	1					
ANR	316355	IdentifierDeclStatement	zval * end = p + ce -> default_properties_count ;	304:4:8930:8974	316051	1	True				
ANR	316356	IdentifierDecl	* end = p + ce -> default_properties_count		316051	0					
ANR	316357	IdentifierDeclType	zval *		316051	0					
ANR	316358	Identifier	end		316051	1					
ANR	316359	AssignmentExpression	* end = p + ce -> default_properties_count		316051	2		=			
ANR	316360	Identifier	end		316051	0					
ANR	316361	AdditiveExpression	p + ce -> default_properties_count		316051	1		+			
ANR	316362	Identifier	p		316051	0					
ANR	316363	PtrMemberAccess	ce -> default_properties_count		316051	1					
ANR	316364	Identifier	ce		316051	0					
ANR	316365	Identifier	default_properties_count		316051	1					
ANR	316366	WhileStatement	while ( p != end )		316051	2					
ANR	316367	Condition	p != end	306:11:8988:8995	316051	0	True				
ANR	316368	EqualityExpression	p != end		316051	0		!=			
ANR	316369	Identifier	p		316051	0					
ANR	316370	Identifier	end		316051	1					
ANR	316371	CompoundStatement		57:21:1575:1575	316051	1					
ANR	316372	ExpressionStatement	zval_internal_ptr_dtor ( p )	307:5:9005:9030	316051	0	True				
ANR	316373	CallExpression	zval_internal_ptr_dtor ( p )		316051	0					
ANR	316374	Callee	zval_internal_ptr_dtor		316051	0					
ANR	316375	Identifier	zval_internal_ptr_dtor		316051	0					
ANR	316376	ArgumentList	p		316051	1					
ANR	316377	Argument	p		316051	0					
ANR	316378	Identifier	p		316051	0					
ANR	316379	ExpressionStatement	p ++	308:5:9037:9040	316051	1	True				
ANR	316380	PostIncDecOperationExpression	p ++		316051	0					
ANR	316381	Identifier	p		316051	0					
ANR	316382	IncDec	++		316051	1					
ANR	316383	ExpressionStatement	free ( ce -> default_properties_table )	310:4:9052:9086	316051	3	True				
ANR	316384	CallExpression	free ( ce -> default_properties_table )		316051	0					
ANR	316385	Callee	free		316051	0					
ANR	316386	Identifier	free		316051	0					
ANR	316387	ArgumentList	ce -> default_properties_table		316051	1					
ANR	316388	Argument	ce -> default_properties_table		316051	0					
ANR	316389	PtrMemberAccess	ce -> default_properties_table		316051	0					
ANR	316390	Identifier	ce		316051	0					
ANR	316391	Identifier	default_properties_table		316051	1					
ANR	316392	IfStatement	if ( ce -> default_static_members_table )		316051	24					
ANR	316393	Condition	ce -> default_static_members_table	312:7:9100:9131	316051	0	True				
ANR	316394	PtrMemberAccess	ce -> default_static_members_table		316051	0					
ANR	316395	Identifier	ce		316051	0					
ANR	316396	Identifier	default_static_members_table		316051	1					
ANR	316397	CompoundStatement		65:4:1765:1813	316051	1					
ANR	316398	IdentifierDeclStatement	zval * p = ce -> default_static_members_table ;	313:4:9140:9182	316051	0	True				
ANR	316399	IdentifierDecl	* p = ce -> default_static_members_table		316051	0					
ANR	316400	IdentifierDeclType	zval *		316051	0					
ANR	316401	Identifier	p		316051	1					
ANR	316402	AssignmentExpression	* p = ce -> default_static_members_table		316051	2		=			
ANR	316403	Identifier	p		316051	0					
ANR	316404	PtrMemberAccess	ce -> default_static_members_table		316051	1					
ANR	316405	Identifier	ce		316051	0					
ANR	316406	Identifier	default_static_members_table		316051	1					
ANR	316407	IdentifierDeclStatement	zval * end = p + ce -> default_static_members_count ;	314:4:9188:9236	316051	1	True				
ANR	316408	IdentifierDecl	* end = p + ce -> default_static_members_count		316051	0					
ANR	316409	IdentifierDeclType	zval *		316051	0					
ANR	316410	Identifier	end		316051	1					
ANR	316411	AssignmentExpression	* end = p + ce -> default_static_members_count		316051	2		=			
ANR	316412	Identifier	end		316051	0					
ANR	316413	AdditiveExpression	p + ce -> default_static_members_count		316051	1		+			
ANR	316414	Identifier	p		316051	0					
ANR	316415	PtrMemberAccess	ce -> default_static_members_count		316051	1					
ANR	316416	Identifier	ce		316051	0					
ANR	316417	Identifier	default_static_members_count		316051	1					
ANR	316418	WhileStatement	while ( p != end )		316051	2					
ANR	316419	Condition	p != end	316:11:9250:9257	316051	0	True				
ANR	316420	EqualityExpression	p != end		316051	0		!=			
ANR	316421	Identifier	p		316051	0					
ANR	316422	Identifier	end		316051	1					
ANR	316423	CompoundStatement		67:21:1837:1837	316051	1					
ANR	316424	ExpressionStatement	zval_internal_ptr_dtor ( p )	317:5:9267:9292	316051	0	True				
ANR	316425	CallExpression	zval_internal_ptr_dtor ( p )		316051	0					
ANR	316426	Callee	zval_internal_ptr_dtor		316051	0					
ANR	316427	Identifier	zval_internal_ptr_dtor		316051	0					
ANR	316428	ArgumentList	p		316051	1					
ANR	316429	Argument	p		316051	0					
ANR	316430	Identifier	p		316051	0					
ANR	316431	ExpressionStatement	p ++	318:5:9299:9302	316051	1	True				
ANR	316432	PostIncDecOperationExpression	p ++		316051	0					
ANR	316433	Identifier	p		316051	0					
ANR	316434	IncDec	++		316051	1					
ANR	316435	ExpressionStatement	free ( ce -> default_static_members_table )	320:4:9314:9352	316051	3	True				
ANR	316436	CallExpression	free ( ce -> default_static_members_table )		316051	0					
ANR	316437	Callee	free		316051	0					
ANR	316438	Identifier	free		316051	0					
ANR	316439	ArgumentList	ce -> default_static_members_table		316051	1					
ANR	316440	Argument	ce -> default_static_members_table		316051	0					
ANR	316441	PtrMemberAccess	ce -> default_static_members_table		316051	0					
ANR	316442	Identifier	ce		316051	0					
ANR	316443	Identifier	default_static_members_table		316051	1					
ANR	316444	ExpressionStatement	zend_hash_destroy ( & ce -> properties_info )	322:3:9362:9401	316051	25	True				
ANR	316445	CallExpression	zend_hash_destroy ( & ce -> properties_info )		316051	0					
ANR	316446	Callee	zend_hash_destroy		316051	0					
ANR	316447	Identifier	zend_hash_destroy		316051	0					
ANR	316448	ArgumentList	& ce -> properties_info		316051	1					
ANR	316449	Argument	& ce -> properties_info		316051	0					
ANR	316450	UnaryOperationExpression	& ce -> properties_info		316051	0					
ANR	316451	UnaryOperator	&		316051	0					
ANR	316452	PtrMemberAccess	ce -> properties_info		316051	1					
ANR	316453	Identifier	ce		316051	0					
ANR	316454	Identifier	properties_info		316051	1					
ANR	316455	ExpressionStatement	zend_string_release ( ce -> name )	323:3:9406:9435	316051	26	True				
ANR	316456	CallExpression	zend_string_release ( ce -> name )		316051	0					
ANR	316457	Callee	zend_string_release		316051	0					
ANR	316458	Identifier	zend_string_release		316051	0					
ANR	316459	ArgumentList	ce -> name		316051	1					
ANR	316460	Argument	ce -> name		316051	0					
ANR	316461	PtrMemberAccess	ce -> name		316051	0					
ANR	316462	Identifier	ce		316051	0					
ANR	316463	Identifier	name		316051	1					
ANR	316464	ExpressionStatement	zend_hash_destroy ( & ce -> function_table )	324:3:9440:9478	316051	27	True				
ANR	316465	CallExpression	zend_hash_destroy ( & ce -> function_table )		316051	0					
ANR	316466	Callee	zend_hash_destroy		316051	0					
ANR	316467	Identifier	zend_hash_destroy		316051	0					
ANR	316468	ArgumentList	& ce -> function_table		316051	1					
ANR	316469	Argument	& ce -> function_table		316051	0					
ANR	316470	UnaryOperationExpression	& ce -> function_table		316051	0					
ANR	316471	UnaryOperator	&		316051	0					
ANR	316472	PtrMemberAccess	ce -> function_table		316051	1					
ANR	316473	Identifier	ce		316051	0					
ANR	316474	Identifier	function_table		316051	1					
ANR	316475	ExpressionStatement	zend_hash_destroy ( & ce -> constants_table )	325:3:9483:9522	316051	28	True				
ANR	316476	CallExpression	zend_hash_destroy ( & ce -> constants_table )		316051	0					
ANR	316477	Callee	zend_hash_destroy		316051	0					
ANR	316478	Identifier	zend_hash_destroy		316051	0					
ANR	316479	ArgumentList	& ce -> constants_table		316051	1					
ANR	316480	Argument	& ce -> constants_table		316051	0					
ANR	316481	UnaryOperationExpression	& ce -> constants_table		316051	0					
ANR	316482	UnaryOperator	&		316051	0					
ANR	316483	PtrMemberAccess	ce -> constants_table		316051	1					
ANR	316484	Identifier	ce		316051	0					
ANR	316485	Identifier	constants_table		316051	1					
ANR	316486	IfStatement	if ( ce -> num_interfaces > 0 )		316051	29					
ANR	316487	Condition	ce -> num_interfaces > 0	326:7:9531:9552	316051	0	True				
ANR	316488	RelationalExpression	ce -> num_interfaces > 0		316051	0		>			
ANR	316489	PtrMemberAccess	ce -> num_interfaces		316051	0					
ANR	316490	Identifier	ce		316051	0					
ANR	316491	Identifier	num_interfaces		316051	1					
ANR	316492	PrimaryExpression	0		316051	1					
ANR	316493	CompoundStatement		77:31:2132:2132	316051	1					
ANR	316494	ExpressionStatement	free ( ce -> interfaces )	327:4:9561:9581	316051	0	True				
ANR	316495	CallExpression	free ( ce -> interfaces )		316051	0					
ANR	316496	Callee	free		316051	0					
ANR	316497	Identifier	free		316051	0					
ANR	316498	ArgumentList	ce -> interfaces		316051	1					
ANR	316499	Argument	ce -> interfaces		316051	0					
ANR	316500	PtrMemberAccess	ce -> interfaces		316051	0					
ANR	316501	Identifier	ce		316051	0					
ANR	316502	Identifier	interfaces		316051	1					
ANR	316503	ExpressionStatement	free ( ce )	329:3:9591:9599	316051	30	True				
ANR	316504	CallExpression	free ( ce )		316051	0					
ANR	316505	Callee	free		316051	0					
ANR	316506	Identifier	free		316051	0					
ANR	316507	ArgumentList	ce		316051	1					
ANR	316508	Argument	ce		316051	0					
ANR	316509	Identifier	ce		316051	0					
ANR	316510	BreakStatement	break ;	330:3:9604:9609	316051	31	True				
ANR	316511	ReturnType	ZEND_API void		316051	1					
ANR	316512	Identifier	destroy_zend_class		316051	2					
ANR	316513	ParameterList	zval * zv		316051	3					
ANR	316514	Parameter	zval * zv	249:33:7412:7419	316051	0	True				
ANR	316515	ParameterType	zval *		316051	0					
ANR	316516	Identifier	zv		316051	1					
ANR	316517	CFGEntryNode	ENTRY		316051		True				
ANR	316518	CFGExitNode	EXIT		316051		True				
ANR	316519	Symbol	ce -> type		316051						
ANR	316520	Symbol	ce -> default_properties_count		316051						
ANR	316521	Symbol	ce -> default_static_members_count		316051						
ANR	316522	Symbol	prop_info -> name		316051						
ANR	316523	Symbol	& ce -> function_table		316051						
ANR	316524	Symbol	* ce		316051						
ANR	316525	Symbol	prop_info -> doc_comment		316051						
ANR	316526	Symbol	ce -> num_interfaces		316051						
ANR	316527	Symbol	ZEND_ACC_SHADOW		316051						
ANR	316528	Symbol	end		316051						
ANR	316529	Symbol	ce -> name		316051						
ANR	316530	Symbol	* prop_info		316051						
ANR	316531	Symbol	prop_info		316051						
ANR	316532	Symbol	Z_PTR_P		316051						
ANR	316533	Symbol	ce		316051						
ANR	316534	Symbol	ce -> interfaces		316051						
ANR	316535	Symbol	ce -> info . user		316051						
ANR	316536	Symbol	ce -> default_properties_table		316051						
ANR	316537	Symbol	ce -> refcount		316051						
ANR	316538	Symbol	ce -> default_static_members_table		316051						
ANR	316539	Symbol	p		316051						
ANR	316540	Symbol	& ce -> constants_table		316051						
ANR	316541	Symbol	ce -> info . user . doc_comment		316051						
ANR	316542	Symbol	prop_info -> flags		316051						
ANR	316543	Symbol	& ce -> properties_info		316051						
ANR	316544	Symbol	prop_info -> ce		316051						
ANR	316545	Symbol	ce -> info		316051						
ANR	316546	Symbol	zv		316051						
ANR	316547	Function	zend_class_add_ref	334:0:9617:9708							
ANR	316548	FunctionDef	zend_class_add_ref (zval * zv)		316547	0					
ANR	316549	CompoundStatement		335:0:9651:9708	316547	0					
ANR	316550	IdentifierDeclStatement	zend_class_entry * ce = Z_PTR_P ( zv ) ;	336:1:9654:9688	316547	0	True				
ANR	316551	IdentifierDecl	* ce = Z_PTR_P ( zv )		316547	0					
ANR	316552	IdentifierDeclType	zend_class_entry *		316547	0					
ANR	316553	Identifier	ce		316547	1					
ANR	316554	AssignmentExpression	* ce = Z_PTR_P ( zv )		316547	2		=			
ANR	316555	Identifier	ce		316547	0					
ANR	316556	CallExpression	Z_PTR_P ( zv )		316547	1					
ANR	316557	Callee	Z_PTR_P		316547	0					
ANR	316558	Identifier	Z_PTR_P		316547	0					
ANR	316559	ArgumentList	zv		316547	1					
ANR	316560	Argument	zv		316547	0					
ANR	316561	Identifier	zv		316547	0					
ANR	316562	ExpressionStatement	ce -> refcount ++	338:1:9692:9706	316547	1	True				
ANR	316563	PostIncDecOperationExpression	ce -> refcount ++		316547	0					
ANR	316564	PtrMemberAccess	ce -> refcount		316547	0					
ANR	316565	Identifier	ce		316547	0					
ANR	316566	Identifier	refcount		316547	1					
ANR	316567	IncDec	++		316547	1					
ANR	316568	ReturnType	void		316547	1					
ANR	316569	Identifier	zend_class_add_ref		316547	2					
ANR	316570	ParameterList	zval * zv		316547	3					
ANR	316571	Parameter	zval * zv	334:24:9641:9648	316547	0	True				
ANR	316572	ParameterType	zval *		316547	0					
ANR	316573	Identifier	zv		316547	1					
ANR	316574	CFGEntryNode	ENTRY		316547		True				
ANR	316575	CFGExitNode	EXIT		316547		True				
ANR	316576	Symbol	Z_PTR_P		316547						
ANR	316577	Symbol	ce		316547						
ANR	316578	Symbol	* ce		316547						
ANR	316579	Symbol	ce -> refcount		316547						
ANR	316580	Symbol	zv		316547						
ANR	316581	Function	destroy_op_array	341:0:9711:11744							
ANR	316582	FunctionDef	destroy_op_array (zend_op_array * op_array)		316581	0					
ANR	316583	CompoundStatement		342:0:9767:11744	316581	0					
ANR	316584	IdentifierDeclStatement	zval * literal = op_array -> literals ;	343:1:9770:9804	316581	0	True				
ANR	316585	IdentifierDecl	* literal = op_array -> literals		316581	0					
ANR	316586	IdentifierDeclType	zval *		316581	0					
ANR	316587	Identifier	literal		316581	1					
ANR	316588	AssignmentExpression	* literal = op_array -> literals		316581	2		=			
ANR	316589	Identifier	literal		316581	0					
ANR	316590	PtrMemberAccess	op_array -> literals		316581	1					
ANR	316591	Identifier	op_array		316581	0					
ANR	316592	Identifier	literals		316581	1					
ANR	316593	IdentifierDeclStatement	zval * end ;	344:1:9807:9816	316581	1	True				
ANR	316594	IdentifierDecl	* end		316581	0					
ANR	316595	IdentifierDeclType	zval *		316581	0					
ANR	316596	Identifier	end		316581	1					
ANR	316597	IdentifierDeclStatement	uint32_t i ;	345:1:9819:9829	316581	2	True				
ANR	316598	IdentifierDecl	i		316581	0					
ANR	316599	IdentifierDeclType	uint32_t		316581	0					
ANR	316600	Identifier	i		316581	1					
ANR	316601	IfStatement	if ( op_array -> static_variables && ! ( GC_FLAGS ( op_array -> static_variables ) & IS_ARRAY_IMMUTABLE ) )		316581	3					
ANR	316602	Condition	op_array -> static_variables && ! ( GC_FLAGS ( op_array -> static_variables ) & IS_ARRAY_IMMUTABLE )	347:5:9837:9931	316581	0	True				
ANR	316603	AndExpression	op_array -> static_variables && ! ( GC_FLAGS ( op_array -> static_variables ) & IS_ARRAY_IMMUTABLE )		316581	0		&&			
ANR	316604	PtrMemberAccess	op_array -> static_variables		316581	0					
ANR	316605	Identifier	op_array		316581	0					
ANR	316606	Identifier	static_variables		316581	1					
ANR	316607	UnaryOperationExpression	! ( GC_FLAGS ( op_array -> static_variables ) & IS_ARRAY_IMMUTABLE )		316581	1					
ANR	316608	UnaryOperator	!		316581	0					
ANR	316609	BitAndExpression	GC_FLAGS ( op_array -> static_variables ) & IS_ARRAY_IMMUTABLE		316581	1		&			
ANR	316610	CallExpression	GC_FLAGS ( op_array -> static_variables )		316581	0					
ANR	316611	Callee	GC_FLAGS		316581	0					
ANR	316612	Identifier	GC_FLAGS		316581	0					
ANR	316613	ArgumentList	op_array -> static_variables		316581	1					
ANR	316614	Argument	op_array -> static_variables		316581	0					
ANR	316615	PtrMemberAccess	op_array -> static_variables		316581	0					
ANR	316616	Identifier	op_array		316581	0					
ANR	316617	Identifier	static_variables		316581	1					
ANR	316618	Identifier	IS_ARRAY_IMMUTABLE		316581	1					
ANR	316619	CompoundStatement		7:67:166:166	316581	1					
ANR	316620	IfStatement	if ( -- GC_REFCOUNT ( op_array -> static_variables ) == 0 )		316581	0					
ANR	316621	Condition	-- GC_REFCOUNT ( op_array -> static_variables ) == 0	349:6:9942:9987	316581	0	True				
ANR	316622	EqualityExpression	-- GC_REFCOUNT ( op_array -> static_variables ) == 0		316581	0		==			
ANR	316623	UnaryExpression	-- GC_REFCOUNT ( op_array -> static_variables )		316581	0					
ANR	316624	IncDec	--		316581	0					
ANR	316625	CallExpression	GC_REFCOUNT ( op_array -> static_variables )		316581	1					
ANR	316626	Callee	GC_REFCOUNT		316581	0					
ANR	316627	Identifier	GC_REFCOUNT		316581	0					
ANR	316628	ArgumentList	op_array -> static_variables		316581	1					
ANR	316629	Argument	op_array -> static_variables		316581	0					
ANR	316630	PtrMemberAccess	op_array -> static_variables		316581	0					
ANR	316631	Identifier	op_array		316581	0					
ANR	316632	Identifier	static_variables		316581	1					
ANR	316633	PrimaryExpression	0		316581	1					
ANR	316634	CompoundStatement		8:54:222:222	316581	1					
ANR	316635	ExpressionStatement	zend_array_destroy ( op_array -> static_variables )	350:3:9995:10041	316581	0	True				
ANR	316636	CallExpression	zend_array_destroy ( op_array -> static_variables )		316581	0					
ANR	316637	Callee	zend_array_destroy		316581	0					
ANR	316638	Identifier	zend_array_destroy		316581	0					
ANR	316639	ArgumentList	op_array -> static_variables		316581	1					
ANR	316640	Argument	op_array -> static_variables		316581	0					
ANR	316641	PtrMemberAccess	op_array -> static_variables		316581	0					
ANR	316642	Identifier	op_array		316581	0					
ANR	316643	Identifier	static_variables		316581	1					
ANR	316644	IfStatement	if ( op_array -> run_time_cache && ! op_array -> function_name )		316581	4					
ANR	316645	Condition	op_array -> run_time_cache && ! op_array -> function_name	354:5:10056:10107	316581	0	True				
ANR	316646	AndExpression	op_array -> run_time_cache && ! op_array -> function_name		316581	0		&&			
ANR	316647	PtrMemberAccess	op_array -> run_time_cache		316581	0					
ANR	316648	Identifier	op_array		316581	0					
ANR	316649	Identifier	run_time_cache		316581	1					
ANR	316650	UnaryOperationExpression	! op_array -> function_name		316581	1					
ANR	316651	UnaryOperator	!		316581	0					
ANR	316652	PtrMemberAccess	op_array -> function_name		316581	1					
ANR	316653	Identifier	op_array		316581	0					
ANR	316654	Identifier	function_name		316581	1					
ANR	316655	CompoundStatement		13:59:342:342	316581	1					
ANR	316656	ExpressionStatement	efree ( op_array -> run_time_cache )	355:2:10114:10145	316581	0	True				
ANR	316657	CallExpression	efree ( op_array -> run_time_cache )		316581	0					
ANR	316658	Callee	efree		316581	0					
ANR	316659	Identifier	efree		316581	0					
ANR	316660	ArgumentList	op_array -> run_time_cache		316581	1					
ANR	316661	Argument	op_array -> run_time_cache		316581	0					
ANR	316662	PtrMemberAccess	op_array -> run_time_cache		316581	0					
ANR	316663	Identifier	op_array		316581	0					
ANR	316664	Identifier	run_time_cache		316581	1					
ANR	316665	ExpressionStatement	op_array -> run_time_cache = NULL	356:2:10149:10180	316581	1	True				
ANR	316666	AssignmentExpression	op_array -> run_time_cache = NULL		316581	0		=			
ANR	316667	PtrMemberAccess	op_array -> run_time_cache		316581	0					
ANR	316668	Identifier	op_array		316581	0					
ANR	316669	Identifier	run_time_cache		316581	1					
ANR	316670	Identifier	NULL		316581	1					
ANR	316671	IfStatement	if ( ! op_array -> refcount || -- ( * op_array -> refcount ) > 0 )		316581	5					
ANR	316672	Condition	! op_array -> refcount || -- ( * op_array -> refcount ) > 0	359:5:10191:10240	316581	0	True				
ANR	316673	OrExpression	! op_array -> refcount || -- ( * op_array -> refcount ) > 0		316581	0		||			
ANR	316674	UnaryOperationExpression	! op_array -> refcount		316581	0					
ANR	316675	UnaryOperator	!		316581	0					
ANR	316676	PtrMemberAccess	op_array -> refcount		316581	1					
ANR	316677	Identifier	op_array		316581	0					
ANR	316678	Identifier	refcount		316581	1					
ANR	316679	RelationalExpression	-- ( * op_array -> refcount ) > 0		316581	1		>			
ANR	316680	UnaryExpression	-- ( * op_array -> refcount )		316581	0					
ANR	316681	IncDec	--		316581	0					
ANR	316682	UnaryOperationExpression	* op_array -> refcount		316581	1					
ANR	316683	UnaryOperator	*		316581	0					
ANR	316684	PtrMemberAccess	op_array -> refcount		316581	1					
ANR	316685	Identifier	op_array		316581	0					
ANR	316686	Identifier	refcount		316581	1					
ANR	316687	PrimaryExpression	0		316581	1					
ANR	316688	CompoundStatement		18:57:475:475	316581	1					
ANR	316689	ReturnStatement	return ;	360:2:10247:10253	316581	0	True				
ANR	316690	ExpressionStatement	"efree_size ( op_array -> refcount , sizeof ( * ( op_array -> refcount ) ) )"	363:1:10260:10321	316581	6	True				
ANR	316691	CallExpression	"efree_size ( op_array -> refcount , sizeof ( * ( op_array -> refcount ) ) )"		316581	0					
ANR	316692	Callee	efree_size		316581	0					
ANR	316693	Identifier	efree_size		316581	0					
ANR	316694	ArgumentList	op_array -> refcount		316581	1					
ANR	316695	Argument	op_array -> refcount		316581	0					
ANR	316696	PtrMemberAccess	op_array -> refcount		316581	0					
ANR	316697	Identifier	op_array		316581	0					
ANR	316698	Identifier	refcount		316581	1					
ANR	316699	Argument	sizeof ( * ( op_array -> refcount ) )		316581	1					
ANR	316700	SizeofExpression	sizeof ( * ( op_array -> refcount ) )		316581	0					
ANR	316701	Sizeof	sizeof		316581	0					
ANR	316702	UnaryOperationExpression	* ( op_array -> refcount )		316581	1					
ANR	316703	UnaryOperator	*		316581	0					
ANR	316704	PtrMemberAccess	op_array -> refcount		316581	1					
ANR	316705	Identifier	op_array		316581	0					
ANR	316706	Identifier	refcount		316581	1					
ANR	316707	IfStatement	if ( op_array -> vars )		316581	7					
ANR	316708	Condition	op_array -> vars	365:5:10329:10342	316581	0	True				
ANR	316709	PtrMemberAccess	op_array -> vars		316581	0					
ANR	316710	Identifier	op_array		316581	0					
ANR	316711	Identifier	vars		316581	1					
ANR	316712	CompoundStatement		24:21:577:577	316581	1					
ANR	316713	ExpressionStatement	i = op_array -> last_var	366:2:10349:10371	316581	0	True				
ANR	316714	AssignmentExpression	i = op_array -> last_var		316581	0		=			
ANR	316715	Identifier	i		316581	0					
ANR	316716	PtrMemberAccess	op_array -> last_var		316581	1					
ANR	316717	Identifier	op_array		316581	0					
ANR	316718	Identifier	last_var		316581	1					
ANR	316719	WhileStatement	while ( i > 0 )		316581	1					
ANR	316720	Condition	i > 0	367:9:10382:10386	316581	0	True				
ANR	316721	RelationalExpression	i > 0		316581	0		>			
ANR	316722	Identifier	i		316581	0					
ANR	316723	PrimaryExpression	0		316581	1					
ANR	316724	CompoundStatement		26:16:621:621	316581	1					
ANR	316725	ExpressionStatement	i --	368:3:10394:10397	316581	0	True				
ANR	316726	PostIncDecOperationExpression	i --		316581	0					
ANR	316727	Identifier	i		316581	0					
ANR	316728	IncDec	--		316581	1					
ANR	316729	ExpressionStatement	zend_string_release ( op_array -> vars [ i ] )	369:3:10402:10440	316581	1	True				
ANR	316730	CallExpression	zend_string_release ( op_array -> vars [ i ] )		316581	0					
ANR	316731	Callee	zend_string_release		316581	0					
ANR	316732	Identifier	zend_string_release		316581	0					
ANR	316733	ArgumentList	op_array -> vars [ i ]		316581	1					
ANR	316734	Argument	op_array -> vars [ i ]		316581	0					
ANR	316735	ArrayIndexing	op_array -> vars [ i ]		316581	0					
ANR	316736	PtrMemberAccess	op_array -> vars		316581	0					
ANR	316737	Identifier	op_array		316581	0					
ANR	316738	Identifier	vars		316581	1					
ANR	316739	Identifier	i		316581	1					
ANR	316740	ExpressionStatement	efree ( op_array -> vars )	371:2:10448:10469	316581	2	True				
ANR	316741	CallExpression	efree ( op_array -> vars )		316581	0					
ANR	316742	Callee	efree		316581	0					
ANR	316743	Identifier	efree		316581	0					
ANR	316744	ArgumentList	op_array -> vars		316581	1					
ANR	316745	Argument	op_array -> vars		316581	0					
ANR	316746	PtrMemberAccess	op_array -> vars		316581	0					
ANR	316747	Identifier	op_array		316581	0					
ANR	316748	Identifier	vars		316581	1					
ANR	316749	IfStatement	if ( literal )		316581	8					
ANR	316750	Condition	literal	374:5:10480:10486	316581	0	True				
ANR	316751	Identifier	literal		316581	0					
ANR	316752	CompoundStatement		33:14:721:721	316581	1					
ANR	316753	ExpressionStatement	end = literal + op_array -> last_literal	375:3:10494:10532	316581	0	True				
ANR	316754	AssignmentExpression	end = literal + op_array -> last_literal		316581	0		=			
ANR	316755	Identifier	end		316581	0					
ANR	316756	AdditiveExpression	literal + op_array -> last_literal		316581	1		+			
ANR	316757	Identifier	literal		316581	0					
ANR	316758	PtrMemberAccess	op_array -> last_literal		316581	1					
ANR	316759	Identifier	op_array		316581	0					
ANR	316760	Identifier	last_literal		316581	1					
ANR	316761	WhileStatement	while ( literal < end )		316581	1					
ANR	316762	Condition	literal < end	376:10:10544:10556	316581	0	True				
ANR	316763	RelationalExpression	literal < end		316581	0		<			
ANR	316764	Identifier	literal		316581	0					
ANR	316765	Identifier	end		316581	1					
ANR	316766	CompoundStatement		35:25:791:791	316581	1					
ANR	316767	ExpressionStatement	zval_ptr_dtor_nogc ( literal )	377:3:10564:10591	316581	0	True				
ANR	316768	CallExpression	zval_ptr_dtor_nogc ( literal )		316581	0					
ANR	316769	Callee	zval_ptr_dtor_nogc		316581	0					
ANR	316770	Identifier	zval_ptr_dtor_nogc		316581	0					
ANR	316771	ArgumentList	literal		316581	1					
ANR	316772	Argument	literal		316581	0					
ANR	316773	Identifier	literal		316581	0					
ANR	316774	ExpressionStatement	literal ++	378:3:10596:10605	316581	1	True				
ANR	316775	PostIncDecOperationExpression	literal ++		316581	0					
ANR	316776	Identifier	literal		316581	0					
ANR	316777	IncDec	++		316581	1					
ANR	316778	ExpressionStatement	efree ( op_array -> literals )	380:2:10613:10638	316581	2	True				
ANR	316779	CallExpression	efree ( op_array -> literals )		316581	0					
ANR	316780	Callee	efree		316581	0					
ANR	316781	Identifier	efree		316581	0					
ANR	316782	ArgumentList	op_array -> literals		316581	1					
ANR	316783	Argument	op_array -> literals		316581	0					
ANR	316784	PtrMemberAccess	op_array -> literals		316581	0					
ANR	316785	Identifier	op_array		316581	0					
ANR	316786	Identifier	literals		316581	1					
ANR	316787	ExpressionStatement	efree ( op_array -> opcodes )	382:1:10644:10668	316581	9	True				
ANR	316788	CallExpression	efree ( op_array -> opcodes )		316581	0					
ANR	316789	Callee	efree		316581	0					
ANR	316790	Identifier	efree		316581	0					
ANR	316791	ArgumentList	op_array -> opcodes		316581	1					
ANR	316792	Argument	op_array -> opcodes		316581	0					
ANR	316793	PtrMemberAccess	op_array -> opcodes		316581	0					
ANR	316794	Identifier	op_array		316581	0					
ANR	316795	Identifier	opcodes		316581	1					
ANR	316796	IfStatement	if ( op_array -> function_name )		316581	10					
ANR	316797	Condition	op_array -> function_name	384:5:10676:10698	316581	0	True				
ANR	316798	PtrMemberAccess	op_array -> function_name		316581	0					
ANR	316799	Identifier	op_array		316581	0					
ANR	316800	Identifier	function_name		316581	1					
ANR	316801	CompoundStatement		43:30:933:933	316581	1					
ANR	316802	ExpressionStatement	zend_string_release ( op_array -> function_name )	385:2:10705:10749	316581	0	True				
ANR	316803	CallExpression	zend_string_release ( op_array -> function_name )		316581	0					
ANR	316804	Callee	zend_string_release		316581	0					
ANR	316805	Identifier	zend_string_release		316581	0					
ANR	316806	ArgumentList	op_array -> function_name		316581	1					
ANR	316807	Argument	op_array -> function_name		316581	0					
ANR	316808	PtrMemberAccess	op_array -> function_name		316581	0					
ANR	316809	Identifier	op_array		316581	0					
ANR	316810	Identifier	function_name		316581	1					
ANR	316811	IfStatement	if ( op_array -> doc_comment )		316581	11					
ANR	316812	Condition	op_array -> doc_comment	387:5:10759:10779	316581	0	True				
ANR	316813	PtrMemberAccess	op_array -> doc_comment		316581	0					
ANR	316814	Identifier	op_array		316581	0					
ANR	316815	Identifier	doc_comment		316581	1					
ANR	316816	CompoundStatement		46:28:1014:1014	316581	1					
ANR	316817	ExpressionStatement	zend_string_release ( op_array -> doc_comment )	388:2:10786:10828	316581	0	True				
ANR	316818	CallExpression	zend_string_release ( op_array -> doc_comment )		316581	0					
ANR	316819	Callee	zend_string_release		316581	0					
ANR	316820	Identifier	zend_string_release		316581	0					
ANR	316821	ArgumentList	op_array -> doc_comment		316581	1					
ANR	316822	Argument	op_array -> doc_comment		316581	0					
ANR	316823	PtrMemberAccess	op_array -> doc_comment		316581	0					
ANR	316824	Identifier	op_array		316581	0					
ANR	316825	Identifier	doc_comment		316581	1					
ANR	316826	IfStatement	if ( op_array -> brk_cont_array )		316581	12					
ANR	316827	Condition	op_array -> brk_cont_array	390:5:10838:10861	316581	0	True				
ANR	316828	PtrMemberAccess	op_array -> brk_cont_array		316581	0					
ANR	316829	Identifier	op_array		316581	0					
ANR	316830	Identifier	brk_cont_array		316581	1					
ANR	316831	CompoundStatement		49:31:1096:1096	316581	1					
ANR	316832	ExpressionStatement	efree ( op_array -> brk_cont_array )	391:2:10868:10899	316581	0	True				
ANR	316833	CallExpression	efree ( op_array -> brk_cont_array )		316581	0					
ANR	316834	Callee	efree		316581	0					
ANR	316835	Identifier	efree		316581	0					
ANR	316836	ArgumentList	op_array -> brk_cont_array		316581	1					
ANR	316837	Argument	op_array -> brk_cont_array		316581	0					
ANR	316838	PtrMemberAccess	op_array -> brk_cont_array		316581	0					
ANR	316839	Identifier	op_array		316581	0					
ANR	316840	Identifier	brk_cont_array		316581	1					
ANR	316841	IfStatement	if ( op_array -> try_catch_array )		316581	13					
ANR	316842	Condition	op_array -> try_catch_array	393:5:10909:10933	316581	0	True				
ANR	316843	PtrMemberAccess	op_array -> try_catch_array		316581	0					
ANR	316844	Identifier	op_array		316581	0					
ANR	316845	Identifier	try_catch_array		316581	1					
ANR	316846	CompoundStatement		52:32:1168:1168	316581	1					
ANR	316847	ExpressionStatement	efree ( op_array -> try_catch_array )	394:2:10940:10972	316581	0	True				
ANR	316848	CallExpression	efree ( op_array -> try_catch_array )		316581	0					
ANR	316849	Callee	efree		316581	0					
ANR	316850	Identifier	efree		316581	0					
ANR	316851	ArgumentList	op_array -> try_catch_array		316581	1					
ANR	316852	Argument	op_array -> try_catch_array		316581	0					
ANR	316853	PtrMemberAccess	op_array -> try_catch_array		316581	0					
ANR	316854	Identifier	op_array		316581	0					
ANR	316855	Identifier	try_catch_array		316581	1					
ANR	316856	IfStatement	if ( zend_extension_flags & ZEND_EXTENSIONS_HAVE_OP_ARRAY_DTOR )		316581	14					
ANR	316857	Condition	zend_extension_flags & ZEND_EXTENSIONS_HAVE_OP_ARRAY_DTOR	396:5:10982:11038	316581	0	True				
ANR	316858	BitAndExpression	zend_extension_flags & ZEND_EXTENSIONS_HAVE_OP_ARRAY_DTOR		316581	0		&			
ANR	316859	Identifier	zend_extension_flags		316581	0					
ANR	316860	Identifier	ZEND_EXTENSIONS_HAVE_OP_ARRAY_DTOR		316581	1					
ANR	316861	CompoundStatement		55:64:1273:1273	316581	1					
ANR	316862	IfStatement	if ( op_array -> fn_flags & ZEND_ACC_DONE_PASS_TWO )		316581	0					
ANR	316863	Condition	op_array -> fn_flags & ZEND_ACC_DONE_PASS_TWO	397:6:11049:11091	316581	0	True				
ANR	316864	BitAndExpression	op_array -> fn_flags & ZEND_ACC_DONE_PASS_TWO		316581	0		&			
ANR	316865	PtrMemberAccess	op_array -> fn_flags		316581	0					
ANR	316866	Identifier	op_array		316581	0					
ANR	316867	Identifier	fn_flags		316581	1					
ANR	316868	Identifier	ZEND_ACC_DONE_PASS_TWO		316581	1					
ANR	316869	CompoundStatement		56:51:1326:1326	316581	1					
ANR	316870	ExpressionStatement	"zend_llist_apply_with_argument ( & zend_extensions , ( llist_apply_with_arg_func_t ) zend_extension_op_array_dtor_handler , op_array )"	398:3:11099:11225	316581	0	True				
ANR	316871	CallExpression	"zend_llist_apply_with_argument ( & zend_extensions , ( llist_apply_with_arg_func_t ) zend_extension_op_array_dtor_handler , op_array )"		316581	0					
ANR	316872	Callee	zend_llist_apply_with_argument		316581	0					
ANR	316873	Identifier	zend_llist_apply_with_argument		316581	0					
ANR	316874	ArgumentList	& zend_extensions		316581	1					
ANR	316875	Argument	& zend_extensions		316581	0					
ANR	316876	UnaryOperationExpression	& zend_extensions		316581	0					
ANR	316877	UnaryOperator	&		316581	0					
ANR	316878	Identifier	zend_extensions		316581	1					
ANR	316879	Argument	( llist_apply_with_arg_func_t ) zend_extension_op_array_dtor_handler		316581	1					
ANR	316880	CastExpression	( llist_apply_with_arg_func_t ) zend_extension_op_array_dtor_handler		316581	0					
ANR	316881	CastTarget	llist_apply_with_arg_func_t		316581	0					
ANR	316882	Identifier	zend_extension_op_array_dtor_handler		316581	1					
ANR	316883	Argument	op_array		316581	2					
ANR	316884	Identifier	op_array		316581	0					
ANR	316885	IfStatement	if ( op_array -> arg_info )		316581	15					
ANR	316886	Condition	op_array -> arg_info	401:5:11239:11256	316581	0	True				
ANR	316887	PtrMemberAccess	op_array -> arg_info		316581	0					
ANR	316888	Identifier	op_array		316581	0					
ANR	316889	Identifier	arg_info		316581	1					
ANR	316890	CompoundStatement		63:2:1584:1593	316581	1					
ANR	316891	IdentifierDeclStatement	int32_t num_args = op_array -> num_args ;	402:2:11263:11300	316581	0	True				
ANR	316892	IdentifierDecl	num_args = op_array -> num_args		316581	0					
ANR	316893	IdentifierDeclType	int32_t		316581	0					
ANR	316894	Identifier	num_args		316581	1					
ANR	316895	AssignmentExpression	num_args = op_array -> num_args		316581	2		=			
ANR	316896	Identifier	num_args		316581	0					
ANR	316897	PtrMemberAccess	op_array -> num_args		316581	1					
ANR	316898	Identifier	op_array		316581	0					
ANR	316899	Identifier	num_args		316581	1					
ANR	316900	IdentifierDeclStatement	zend_arg_info * arg_info = op_array -> arg_info ;	403:2:11304:11348	316581	1	True				
ANR	316901	IdentifierDecl	* arg_info = op_array -> arg_info		316581	0					
ANR	316902	IdentifierDeclType	zend_arg_info *		316581	0					
ANR	316903	Identifier	arg_info		316581	1					
ANR	316904	AssignmentExpression	* arg_info = op_array -> arg_info		316581	2		=			
ANR	316905	Identifier	arg_info		316581	0					
ANR	316906	PtrMemberAccess	op_array -> arg_info		316581	1					
ANR	316907	Identifier	op_array		316581	0					
ANR	316908	Identifier	arg_info		316581	1					
ANR	316909	IdentifierDeclStatement	int32_t i ;	404:2:11352:11361	316581	2	True				
ANR	316910	IdentifierDecl	i		316581	0					
ANR	316911	IdentifierDeclType	int32_t		316581	0					
ANR	316912	Identifier	i		316581	1					
ANR	316913	IfStatement	if ( op_array -> fn_flags & ZEND_ACC_HAS_RETURN_TYPE )		316581	3					
ANR	316914	Condition	op_array -> fn_flags & ZEND_ACC_HAS_RETURN_TYPE	406:6:11370:11414	316581	0	True				
ANR	316915	BitAndExpression	op_array -> fn_flags & ZEND_ACC_HAS_RETURN_TYPE		316581	0		&			
ANR	316916	PtrMemberAccess	op_array -> fn_flags		316581	0					
ANR	316917	Identifier	op_array		316581	0					
ANR	316918	Identifier	fn_flags		316581	1					
ANR	316919	Identifier	ZEND_ACC_HAS_RETURN_TYPE		316581	1					
ANR	316920	CompoundStatement		65:53:1649:1649	316581	1					
ANR	316921	ExpressionStatement	arg_info --	407:3:11422:11432	316581	0	True				
ANR	316922	PostIncDecOperationExpression	arg_info --		316581	0					
ANR	316923	Identifier	arg_info		316581	0					
ANR	316924	IncDec	--		316581	1					
ANR	316925	ExpressionStatement	num_args ++	408:3:11437:11447	316581	1	True				
ANR	316926	PostIncDecOperationExpression	num_args ++		316581	0					
ANR	316927	Identifier	num_args		316581	0					
ANR	316928	IncDec	++		316581	1					
ANR	316929	IfStatement	if ( op_array -> fn_flags & ZEND_ACC_VARIADIC )		316581	4					
ANR	316930	Condition	op_array -> fn_flags & ZEND_ACC_VARIADIC	410:6:11459:11496	316581	0	True				
ANR	316931	BitAndExpression	op_array -> fn_flags & ZEND_ACC_VARIADIC		316581	0		&			
ANR	316932	PtrMemberAccess	op_array -> fn_flags		316581	0					
ANR	316933	Identifier	op_array		316581	0					
ANR	316934	Identifier	fn_flags		316581	1					
ANR	316935	Identifier	ZEND_ACC_VARIADIC		316581	1					
ANR	316936	CompoundStatement		69:46:1731:1731	316581	1					
ANR	316937	ExpressionStatement	num_args ++	411:3:11504:11514	316581	0	True				
ANR	316938	PostIncDecOperationExpression	num_args ++		316581	0					
ANR	316939	Identifier	num_args		316581	0					
ANR	316940	IncDec	++		316581	1					
ANR	316941	ForStatement	for ( i = 0 ; i < num_args ; i ++ )		316581	5					
ANR	316942	ForInit	i = 0 ;	413:7:11527:11533	316581	0	True				
ANR	316943	AssignmentExpression	i = 0		316581	0		=			
ANR	316944	Identifier	i		316581	0					
ANR	316945	PrimaryExpression	0		316581	1					
ANR	316946	Condition	i < num_args	413:15:11535:11546	316581	1	True				
ANR	316947	RelationalExpression	i < num_args		316581	0		<			
ANR	316948	Identifier	i		316581	0					
ANR	316949	Identifier	num_args		316581	1					
ANR	316950	PostIncDecOperationExpression	i ++	413:29:11549:11551	316581	2	True				
ANR	316951	Identifier	i		316581	0					
ANR	316952	IncDec	++		316581	1					
ANR	316953	CompoundStatement		72:34:1786:1786	316581	3					
ANR	316954	IfStatement	if ( arg_info [ i ] . name )		316581	0					
ANR	316955	Condition	arg_info [ i ] . name	414:7:11563:11578	316581	0	True				
ANR	316956	MemberAccess	arg_info [ i ] . name		316581	0					
ANR	316957	ArrayIndexing	arg_info [ i ]		316581	0					
ANR	316958	Identifier	arg_info		316581	0					
ANR	316959	Identifier	i		316581	1					
ANR	316960	Identifier	name		316581	1					
ANR	316961	CompoundStatement		73:25:1813:1813	316581	1					
ANR	316962	ExpressionStatement	zend_string_release ( arg_info [ i ] . name )	415:4:11587:11624	316581	0	True				
ANR	316963	CallExpression	zend_string_release ( arg_info [ i ] . name )		316581	0					
ANR	316964	Callee	zend_string_release		316581	0					
ANR	316965	Identifier	zend_string_release		316581	0					
ANR	316966	ArgumentList	arg_info [ i ] . name		316581	1					
ANR	316967	Argument	arg_info [ i ] . name		316581	0					
ANR	316968	MemberAccess	arg_info [ i ] . name		316581	0					
ANR	316969	ArrayIndexing	arg_info [ i ]		316581	0					
ANR	316970	Identifier	arg_info		316581	0					
ANR	316971	Identifier	i		316581	1					
ANR	316972	Identifier	name		316581	1					
ANR	316973	IfStatement	if ( arg_info [ i ] . class_name )		316581	1					
ANR	316974	Condition	arg_info [ i ] . class_name	417:7:11638:11659	316581	0	True				
ANR	316975	MemberAccess	arg_info [ i ] . class_name		316581	0					
ANR	316976	ArrayIndexing	arg_info [ i ]		316581	0					
ANR	316977	Identifier	arg_info		316581	0					
ANR	316978	Identifier	i		316581	1					
ANR	316979	Identifier	class_name		316581	1					
ANR	316980	CompoundStatement		76:31:1894:1894	316581	1					
ANR	316981	ExpressionStatement	zend_string_release ( arg_info [ i ] . class_name )	418:4:11668:11711	316581	0	True				
ANR	316982	CallExpression	zend_string_release ( arg_info [ i ] . class_name )		316581	0					
ANR	316983	Callee	zend_string_release		316581	0					
ANR	316984	Identifier	zend_string_release		316581	0					
ANR	316985	ArgumentList	arg_info [ i ] . class_name		316581	1					
ANR	316986	Argument	arg_info [ i ] . class_name		316581	0					
ANR	316987	MemberAccess	arg_info [ i ] . class_name		316581	0					
ANR	316988	ArrayIndexing	arg_info [ i ]		316581	0					
ANR	316989	Identifier	arg_info		316581	0					
ANR	316990	Identifier	i		316581	1					
ANR	316991	Identifier	class_name		316581	1					
ANR	316992	ExpressionStatement	efree ( arg_info )	421:2:11724:11739	316581	6	True				
ANR	316993	CallExpression	efree ( arg_info )		316581	0					
ANR	316994	Callee	efree		316581	0					
ANR	316995	Identifier	efree		316581	0					
ANR	316996	ArgumentList	arg_info		316581	1					
ANR	316997	Argument	arg_info		316581	0					
ANR	316998	Identifier	arg_info		316581	0					
ANR	316999	ReturnType	ZEND_API void		316581	1					
ANR	317000	Identifier	destroy_op_array		316581	2					
ANR	317001	ParameterList	zend_op_array * op_array		316581	3					
ANR	317002	Parameter	zend_op_array * op_array	341:31:9742:9764	316581	0	True				
ANR	317003	ParameterType	zend_op_array *		316581	0					
ANR	317004	Identifier	op_array		316581	1					
ANR	317005	CFGEntryNode	ENTRY		316581		True				
ANR	317006	CFGExitNode	EXIT		316581		True				
ANR	317007	Symbol	& zend_extensions		316581						
ANR	317008	Symbol	op_array -> last_var		316581						
ANR	317009	Symbol	GC_FLAGS		316581						
ANR	317010	Symbol	* op_array -> refcount		316581						
ANR	317011	Symbol	literal		316581						
ANR	317012	Symbol	* arg_info		316581						
ANR	317013	Symbol	op_array -> run_time_cache		316581						
ANR	317014	Symbol	op_array -> brk_cont_array		316581						
ANR	317015	Symbol	* op_array -> vars		316581						
ANR	317016	Symbol	op_array -> opcodes		316581						
ANR	317017	Symbol	op_array -> fn_flags		316581						
ANR	317018	Symbol	ZEND_EXTENSIONS_HAVE_OP_ARRAY_DTOR		316581						
ANR	317019	Symbol	op_array -> last_literal		316581						
ANR	317020	Symbol	num_args		316581						
ANR	317021	Symbol	end		316581						
ANR	317022	Symbol	op_array -> static_variables		316581						
ANR	317023	Symbol	op_array -> num_args		316581						
ANR	317024	Symbol	op_array -> try_catch_array		316581						
ANR	317025	Symbol	GC_REFCOUNT		316581						
ANR	317026	Symbol	arg_info [ i ] . name		316581						
ANR	317027	Symbol	op_array -> doc_comment		316581						
ANR	317028	Symbol	NULL		316581						
ANR	317029	Symbol	* ( op_array -> refcount )		316581						
ANR	317030	Symbol	op_array -> vars		316581						
ANR	317031	Symbol	ZEND_ACC_HAS_RETURN_TYPE		316581						
ANR	317032	Symbol	i		316581						
ANR	317033	Symbol	IS_ARRAY_IMMUTABLE		316581						
ANR	317034	Symbol	* op_array		316581						
ANR	317035	Symbol	op_array -> refcount		316581						
ANR	317036	Symbol	op_array -> function_name		316581						
ANR	317037	Symbol	arg_info		316581						
ANR	317038	Symbol	ZEND_ACC_VARIADIC		316581						
ANR	317039	Symbol	ZEND_ACC_DONE_PASS_TWO		316581						
ANR	317040	Symbol	* i		316581						
ANR	317041	Symbol	zend_extension_op_array_dtor_handler		316581						
ANR	317042	Symbol	op_array -> literals		316581						
ANR	317043	Symbol	zend_extension_flags		316581						
ANR	317044	Symbol	arg_info [ i ] . class_name		316581						
ANR	317045	Symbol	* * op_array		316581						
ANR	317046	Symbol	op_array		316581						
ANR	317047	Symbol	op_array -> arg_info		316581						
ANR	317048	Function	init_op	425:0:11747:11864							
ANR	317049	FunctionDef	init_op (zend_op * op)		317048	0					
ANR	317050	CompoundStatement		426:0:11773:11864	317048	0					
ANR	317051	ExpressionStatement	"memset ( op , 0 , sizeof ( zend_op ) )"	427:1:11776:11806	317048	0	True				
ANR	317052	CallExpression	"memset ( op , 0 , sizeof ( zend_op ) )"		317048	0					
ANR	317053	Callee	memset		317048	0					
ANR	317054	Identifier	memset		317048	0					
ANR	317055	ArgumentList	op		317048	1					
ANR	317056	Argument	op		317048	0					
ANR	317057	Identifier	op		317048	0					
ANR	317058	Argument	0		317048	1					
ANR	317059	PrimaryExpression	0		317048	0					
ANR	317060	Argument	sizeof ( zend_op )		317048	2					
ANR	317061	SizeofExpression	sizeof ( zend_op )		317048	0					
ANR	317062	Sizeof	sizeof		317048	0					
ANR	317063	SizeofOperand	zend_op		317048	1					
ANR	317064	ExpressionStatement	op -> lineno = CG ( zend_lineno )	428:1:11809:11837	317048	1	True				
ANR	317065	AssignmentExpression	op -> lineno = CG ( zend_lineno )		317048	0		=			
ANR	317066	PtrMemberAccess	op -> lineno		317048	0					
ANR	317067	Identifier	op		317048	0					
ANR	317068	Identifier	lineno		317048	1					
ANR	317069	CallExpression	CG ( zend_lineno )		317048	1					
ANR	317070	Callee	CG		317048	0					
ANR	317071	Identifier	CG		317048	0					
ANR	317072	ArgumentList	zend_lineno		317048	1					
ANR	317073	Argument	zend_lineno		317048	0					
ANR	317074	Identifier	zend_lineno		317048	0					
ANR	317075	ExpressionStatement	SET_UNUSED ( op -> result )	429:1:11840:11862	317048	2	True				
ANR	317076	CallExpression	SET_UNUSED ( op -> result )		317048	0					
ANR	317077	Callee	SET_UNUSED		317048	0					
ANR	317078	Identifier	SET_UNUSED		317048	0					
ANR	317079	ArgumentList	op -> result		317048	1					
ANR	317080	Argument	op -> result		317048	0					
ANR	317081	PtrMemberAccess	op -> result		317048	0					
ANR	317082	Identifier	op		317048	0					
ANR	317083	Identifier	result		317048	1					
ANR	317084	ReturnType	void		317048	1					
ANR	317085	Identifier	init_op		317048	2					
ANR	317086	ParameterList	zend_op * op		317048	3					
ANR	317087	Parameter	zend_op * op	425:13:11760:11770	317048	0	True				
ANR	317088	ParameterType	zend_op *		317048	0					
ANR	317089	Identifier	op		317048	1					
ANR	317090	CFGEntryNode	ENTRY		317048		True				
ANR	317091	CFGExitNode	EXIT		317048		True				
ANR	317092	Symbol	op		317048						
ANR	317093	Symbol	op -> lineno		317048						
ANR	317094	Symbol	* op		317048						
ANR	317095	Symbol	CG		317048						
ANR	317096	Symbol	op -> result		317048						
ANR	317097	Symbol	zend_lineno		317048						
ANR	317098	Function	get_next_op	432:0:11867:12204							
ANR	317099	FunctionDef	get_next_op (zend_op_array * op_array)		317098	0					
ANR	317100	CompoundStatement		433:0:11913:12204	317098	0					
ANR	317101	IdentifierDeclStatement	uint32_t next_op_num = op_array -> last ++ ;	434:1:11916:11955	317098	0	True				
ANR	317102	IdentifierDecl	next_op_num = op_array -> last ++		317098	0					
ANR	317103	IdentifierDeclType	uint32_t		317098	0					
ANR	317104	Identifier	next_op_num		317098	1					
ANR	317105	AssignmentExpression	next_op_num = op_array -> last ++		317098	2		=			
ANR	317106	Identifier	next_op_num		317098	0					
ANR	317107	PostIncDecOperationExpression	op_array -> last ++		317098	1					
ANR	317108	PtrMemberAccess	op_array -> last		317098	0					
ANR	317109	Identifier	op_array		317098	0					
ANR	317110	Identifier	last		317098	1					
ANR	317111	IncDec	++		317098	1					
ANR	317112	IdentifierDeclStatement	zend_op * next_op ;	435:1:11958:11974	317098	1	True				
ANR	317113	IdentifierDecl	* next_op		317098	0					
ANR	317114	IdentifierDeclType	zend_op *		317098	0					
ANR	317115	Identifier	next_op		317098	1					
ANR	317116	IfStatement	if ( next_op_num >= CG ( context ) . opcodes_size )		317098	2					
ANR	317117	Condition	next_op_num >= CG ( context ) . opcodes_size	437:5:11982:12020	317098	0	True				
ANR	317118	RelationalExpression	next_op_num >= CG ( context ) . opcodes_size		317098	0		>=			
ANR	317119	Identifier	next_op_num		317098	0					
ANR	317120	MemberAccess	CG ( context ) . opcodes_size		317098	1					
ANR	317121	CallExpression	CG ( context )		317098	0					
ANR	317122	Callee	CG		317098	0					
ANR	317123	Identifier	CG		317098	0					
ANR	317124	ArgumentList	context		317098	1					
ANR	317125	Argument	context		317098	0					
ANR	317126	Identifier	context		317098	0					
ANR	317127	Identifier	opcodes_size		317098	1					
ANR	317128	CompoundStatement		5:46:109:109	317098	1					
ANR	317129	ExpressionStatement	CG ( context ) . opcodes_size *= 4	438:2:12027:12056	317098	0	True				
ANR	317130	AssignmentExpression	CG ( context ) . opcodes_size *= 4		317098	0		*=			
ANR	317131	MemberAccess	CG ( context ) . opcodes_size		317098	0					
ANR	317132	CallExpression	CG ( context )		317098	0					
ANR	317133	Callee	CG		317098	0					
ANR	317134	Identifier	CG		317098	0					
ANR	317135	ArgumentList	context		317098	1					
ANR	317136	Argument	context		317098	0					
ANR	317137	Identifier	context		317098	0					
ANR	317138	Identifier	opcodes_size		317098	1					
ANR	317139	PrimaryExpression	4		317098	1					
ANR	317140	ExpressionStatement	"op_array_alloc_ops ( op_array , CG ( context ) . opcodes_size )"	439:2:12060:12114	317098	1	True				
ANR	317141	CallExpression	"op_array_alloc_ops ( op_array , CG ( context ) . opcodes_size )"		317098	0					
ANR	317142	Callee	op_array_alloc_ops		317098	0					
ANR	317143	Identifier	op_array_alloc_ops		317098	0					
ANR	317144	ArgumentList	op_array		317098	1					
ANR	317145	Argument	op_array		317098	0					
ANR	317146	Identifier	op_array		317098	0					
ANR	317147	Argument	CG ( context ) . opcodes_size		317098	1					
ANR	317148	MemberAccess	CG ( context ) . opcodes_size		317098	0					
ANR	317149	CallExpression	CG ( context )		317098	0					
ANR	317150	Callee	CG		317098	0					
ANR	317151	Identifier	CG		317098	0					
ANR	317152	ArgumentList	context		317098	1					
ANR	317153	Argument	context		317098	0					
ANR	317154	Identifier	context		317098	0					
ANR	317155	Identifier	opcodes_size		317098	1					
ANR	317156	ExpressionStatement	next_op = & ( op_array -> opcodes [ next_op_num ] )	442:1:12121:12164	317098	3	True				
ANR	317157	AssignmentExpression	next_op = & ( op_array -> opcodes [ next_op_num ] )		317098	0		=			
ANR	317158	Identifier	next_op		317098	0					
ANR	317159	UnaryOperationExpression	& ( op_array -> opcodes [ next_op_num ] )		317098	1					
ANR	317160	UnaryOperator	&		317098	0					
ANR	317161	ArrayIndexing	op_array -> opcodes [ next_op_num ]		317098	1					
ANR	317162	PtrMemberAccess	op_array -> opcodes		317098	0					
ANR	317163	Identifier	op_array		317098	0					
ANR	317164	Identifier	opcodes		317098	1					
ANR	317165	Identifier	next_op_num		317098	1					
ANR	317166	ExpressionStatement	init_op ( next_op )	444:1:12168:12184	317098	4	True				
ANR	317167	CallExpression	init_op ( next_op )		317098	0					
ANR	317168	Callee	init_op		317098	0					
ANR	317169	Identifier	init_op		317098	0					
ANR	317170	ArgumentList	next_op		317098	1					
ANR	317171	Argument	next_op		317098	0					
ANR	317172	Identifier	next_op		317098	0					
ANR	317173	ReturnStatement	return next_op ;	446:1:12188:12202	317098	5	True				
ANR	317174	Identifier	next_op		317098	0					
ANR	317175	ReturnType	zend_op *		317098	1					
ANR	317176	Identifier	get_next_op		317098	2					
ANR	317177	ParameterList	zend_op_array * op_array		317098	3					
ANR	317178	Parameter	zend_op_array * op_array	432:21:11888:11910	317098	0	True				
ANR	317179	ParameterType	zend_op_array *		317098	0					
ANR	317180	Identifier	op_array		317098	1					
ANR	317181	CFGEntryNode	ENTRY		317098		True				
ANR	317182	CFGExitNode	EXIT		317098		True				
ANR	317183	Symbol	op_array -> last		317098						
ANR	317184	Symbol	op_array -> opcodes		317098						
ANR	317185	Symbol	CG		317098						
ANR	317186	Symbol	next_op		317098						
ANR	317187	Symbol	context		317098						
ANR	317188	Symbol	op_array		317098						
ANR	317189	Symbol	* op_array		317098						
ANR	317190	Symbol	next_op_num		317098						
ANR	317191	Symbol	CG ( context ) . opcodes_size		317098						
ANR	317192	Function	get_next_op_number	449:0:12207:12281							
ANR	317193	FunctionDef	get_next_op_number (zend_op_array * op_array)		317192	0					
ANR	317194	CompoundStatement		450:0:12255:12281	317192	0					
ANR	317195	ReturnStatement	return op_array -> last ;	451:1:12258:12279	317192	0	True				
ANR	317196	PtrMemberAccess	op_array -> last		317192	0					
ANR	317197	Identifier	op_array		317192	0					
ANR	317198	Identifier	last		317192	1					
ANR	317199	ReturnType	int		317192	1					
ANR	317200	Identifier	get_next_op_number		317192	2					
ANR	317201	ParameterList	zend_op_array * op_array		317192	3					
ANR	317202	Parameter	zend_op_array * op_array	449:23:12230:12252	317192	0	True				
ANR	317203	ParameterType	zend_op_array *		317192	0					
ANR	317204	Identifier	op_array		317192	1					
ANR	317205	CFGEntryNode	ENTRY		317192		True				
ANR	317206	CFGExitNode	EXIT		317192		True				
ANR	317207	Symbol	op_array -> last		317192						
ANR	317208	Symbol	op_array		317192						
ANR	317209	Symbol	* op_array		317192						
ANR	317210	Function	get_next_brk_cont_element	454:0:12284:12569							
ANR	317211	FunctionDef	get_next_brk_cont_element (zend_op_array * op_array)		317210	0					
ANR	317212	CompoundStatement		455:0:12358:12569	317210	0					
ANR	317213	ExpressionStatement	op_array -> last_brk_cont ++	456:1:12361:12386	317210	0	True				
ANR	317214	PostIncDecOperationExpression	op_array -> last_brk_cont ++		317210	0					
ANR	317215	PtrMemberAccess	op_array -> last_brk_cont		317210	0					
ANR	317216	Identifier	op_array		317210	0					
ANR	317217	Identifier	last_brk_cont		317210	1					
ANR	317218	IncDec	++		317210	1					
ANR	317219	ExpressionStatement	"op_array -> brk_cont_array = erealloc ( op_array -> brk_cont_array , sizeof ( zend_brk_cont_element ) * op_array -> last_brk_cont )"	457:1:12389:12505	317210	1	True				
ANR	317220	AssignmentExpression	"op_array -> brk_cont_array = erealloc ( op_array -> brk_cont_array , sizeof ( zend_brk_cont_element ) * op_array -> last_brk_cont )"		317210	0		=			
ANR	317221	PtrMemberAccess	op_array -> brk_cont_array		317210	0					
ANR	317222	Identifier	op_array		317210	0					
ANR	317223	Identifier	brk_cont_array		317210	1					
ANR	317224	CallExpression	"erealloc ( op_array -> brk_cont_array , sizeof ( zend_brk_cont_element ) * op_array -> last_brk_cont )"		317210	1					
ANR	317225	Callee	erealloc		317210	0					
ANR	317226	Identifier	erealloc		317210	0					
ANR	317227	ArgumentList	op_array -> brk_cont_array		317210	1					
ANR	317228	Argument	op_array -> brk_cont_array		317210	0					
ANR	317229	PtrMemberAccess	op_array -> brk_cont_array		317210	0					
ANR	317230	Identifier	op_array		317210	0					
ANR	317231	Identifier	brk_cont_array		317210	1					
ANR	317232	Argument	sizeof ( zend_brk_cont_element ) * op_array -> last_brk_cont		317210	1					
ANR	317233	MultiplicativeExpression	sizeof ( zend_brk_cont_element ) * op_array -> last_brk_cont		317210	0		*			
ANR	317234	SizeofExpression	sizeof ( zend_brk_cont_element )		317210	0					
ANR	317235	Sizeof	sizeof		317210	0					
ANR	317236	SizeofOperand	zend_brk_cont_element		317210	1					
ANR	317237	PtrMemberAccess	op_array -> last_brk_cont		317210	1					
ANR	317238	Identifier	op_array		317210	0					
ANR	317239	Identifier	last_brk_cont		317210	1					
ANR	317240	ReturnStatement	return & op_array -> brk_cont_array [ op_array -> last_brk_cont - 1 ] ;	458:1:12508:12567	317210	2	True				
ANR	317241	UnaryOperationExpression	& op_array -> brk_cont_array [ op_array -> last_brk_cont - 1 ]		317210	0					
ANR	317242	UnaryOperator	&		317210	0					
ANR	317243	ArrayIndexing	op_array -> brk_cont_array [ op_array -> last_brk_cont - 1 ]		317210	1					
ANR	317244	PtrMemberAccess	op_array -> brk_cont_array		317210	0					
ANR	317245	Identifier	op_array		317210	0					
ANR	317246	Identifier	brk_cont_array		317210	1					
ANR	317247	AdditiveExpression	op_array -> last_brk_cont - 1		317210	1		-			
ANR	317248	PtrMemberAccess	op_array -> last_brk_cont		317210	0					
ANR	317249	Identifier	op_array		317210	0					
ANR	317250	Identifier	last_brk_cont		317210	1					
ANR	317251	PrimaryExpression	1		317210	1					
ANR	317252	ReturnType	zend_brk_cont_element *		317210	1					
ANR	317253	Identifier	get_next_brk_cont_element		317210	2					
ANR	317254	ParameterList	zend_op_array * op_array		317210	3					
ANR	317255	Parameter	zend_op_array * op_array	454:49:12333:12355	317210	0	True				
ANR	317256	ParameterType	zend_op_array *		317210	0					
ANR	317257	Identifier	op_array		317210	1					
ANR	317258	CFGEntryNode	ENTRY		317210		True				
ANR	317259	CFGExitNode	EXIT		317210		True				
ANR	317260	Symbol	op_array -> brk_cont_array		317210						
ANR	317261	Symbol	erealloc		317210						
ANR	317262	Symbol	op_array		317210						
ANR	317263	Symbol	* op_array		317210						
ANR	317264	Symbol	op_array -> last_brk_cont		317210						
ANR	317265	Function	zend_update_extended_info	461:0:12572:13044							
ANR	317266	FunctionDef	zend_update_extended_info (zend_op_array * op_array)		317265	0					
ANR	317267	CompoundStatement		462:0:12635:13044	317265	0					
ANR	317268	IdentifierDeclStatement	"zend_op * opline = op_array -> opcodes , * end = opline + op_array -> last ;"	463:1:12638:12701	317265	0	True				
ANR	317269	IdentifierDecl	* opline = op_array -> opcodes		317265	0					
ANR	317270	IdentifierDeclType	zend_op *		317265	0					
ANR	317271	Identifier	opline		317265	1					
ANR	317272	AssignmentExpression	* opline = op_array -> opcodes		317265	2		=			
ANR	317273	Identifier	opline		317265	0					
ANR	317274	PtrMemberAccess	op_array -> opcodes		317265	1					
ANR	317275	Identifier	op_array		317265	0					
ANR	317276	Identifier	opcodes		317265	1					
ANR	317277	IdentifierDecl	* end = opline + op_array -> last		317265	1					
ANR	317278	IdentifierDeclType	zend_op *		317265	0					
ANR	317279	Identifier	end		317265	1					
ANR	317280	AssignmentExpression	* end = opline + op_array -> last		317265	2		=			
ANR	317281	Identifier	end		317265	0					
ANR	317282	AdditiveExpression	opline + op_array -> last		317265	1		+			
ANR	317283	Identifier	opline		317265	0					
ANR	317284	PtrMemberAccess	op_array -> last		317265	1					
ANR	317285	Identifier	op_array		317265	0					
ANR	317286	Identifier	last		317265	1					
ANR	317287	WhileStatement	while ( opline < end )		317265	1					
ANR	317288	Condition	opline < end	465:8:12712:12721	317265	0	True				
ANR	317289	RelationalExpression	opline < end		317265	0		<			
ANR	317290	Identifier	opline		317265	0					
ANR	317291	Identifier	end		317265	1					
ANR	317292	CompoundStatement		4:20:88:88	317265	1					
ANR	317293	IfStatement	if ( opline -> opcode == ZEND_EXT_STMT )		317265	0					
ANR	317294	Condition	opline -> opcode == ZEND_EXT_STMT	466:6:12732:12762	317265	0	True				
ANR	317295	EqualityExpression	opline -> opcode == ZEND_EXT_STMT		317265	0		==			
ANR	317296	PtrMemberAccess	opline -> opcode		317265	0					
ANR	317297	Identifier	opline		317265	0					
ANR	317298	Identifier	opcode		317265	1					
ANR	317299	Identifier	ZEND_EXT_STMT		317265	1					
ANR	317300	CompoundStatement		5:39:129:129	317265	1					
ANR	317301	IfStatement	if ( opline + 1 < end )		317265	0					
ANR	317302	Condition	opline + 1 < end	467:7:12774:12785	317265	0	True				
ANR	317303	RelationalExpression	opline + 1 < end		317265	0		<			
ANR	317304	AdditiveExpression	opline + 1		317265	0		+			
ANR	317305	Identifier	opline		317265	0					
ANR	317306	PrimaryExpression	1		317265	1					
ANR	317307	Identifier	end		317265	1					
ANR	317308	CompoundStatement		6:21:152:152	317265	1					
ANR	317309	IfStatement	if ( ( opline + 1 ) -> opcode == ZEND_EXT_STMT )		317265	0					
ANR	317310	Condition	( opline + 1 ) -> opcode == ZEND_EXT_STMT	468:8:12798:12832	317265	0	True				
ANR	317311	EqualityExpression	( opline + 1 ) -> opcode == ZEND_EXT_STMT		317265	0		==			
ANR	317312	PtrMemberAccess	( opline + 1 ) -> opcode		317265	0					
ANR	317313	AdditiveExpression	opline + 1		317265	0		+			
ANR	317314	Identifier	opline		317265	0					
ANR	317315	PrimaryExpression	1		317265	1					
ANR	317316	Identifier	opcode		317265	1					
ANR	317317	Identifier	ZEND_EXT_STMT		317265	1					
ANR	317318	CompoundStatement		7:45:199:199	317265	1					
ANR	317319	ExpressionStatement	opline -> opcode = ZEND_NOP	469:5:12842:12867	317265	0	True				
ANR	317320	AssignmentExpression	opline -> opcode = ZEND_NOP		317265	0		=			
ANR	317321	PtrMemberAccess	opline -> opcode		317265	0					
ANR	317322	Identifier	opline		317265	0					
ANR	317323	Identifier	opcode		317265	1					
ANR	317324	Identifier	ZEND_NOP		317265	1					
ANR	317325	ExpressionStatement	opline ++	470:5:12874:12882	317265	1	True				
ANR	317326	PostIncDecOperationExpression	opline ++		317265	0					
ANR	317327	Identifier	opline		317265	0					
ANR	317328	IncDec	++		317265	1					
ANR	317329	ContinueStatement	continue ;	471:5:12889:12897	317265	2	True				
ANR	317330	IfStatement	if ( opline + 1 < end )		317265	1					
ANR	317331	Condition	opline + 1 < end	473:8:12913:12924	317265	0	True				
ANR	317332	RelationalExpression	opline + 1 < end		317265	0		<			
ANR	317333	AdditiveExpression	opline + 1		317265	0		+			
ANR	317334	Identifier	opline		317265	0					
ANR	317335	PrimaryExpression	1		317265	1					
ANR	317336	Identifier	end		317265	1					
ANR	317337	CompoundStatement		12:22:291:291	317265	1					
ANR	317338	ExpressionStatement	opline -> lineno = ( opline + 1 ) -> lineno	474:5:12934:12969	317265	0	True				
ANR	317339	AssignmentExpression	opline -> lineno = ( opline + 1 ) -> lineno		317265	0		=			
ANR	317340	PtrMemberAccess	opline -> lineno		317265	0					
ANR	317341	Identifier	opline		317265	0					
ANR	317342	Identifier	lineno		317265	1					
ANR	317343	PtrMemberAccess	( opline + 1 ) -> lineno		317265	1					
ANR	317344	AdditiveExpression	opline + 1		317265	0		+			
ANR	317345	Identifier	opline		317265	0					
ANR	317346	PrimaryExpression	1		317265	1					
ANR	317347	Identifier	lineno		317265	1					
ANR	317348	ElseStatement	else		317265	0					
ANR	317349	CompoundStatement		15:10:351:351	317265	0					
ANR	317350	ExpressionStatement	opline -> opcode = ZEND_NOP	477:4:12993:13018	317265	0	True				
ANR	317351	AssignmentExpression	opline -> opcode = ZEND_NOP		317265	0		=			
ANR	317352	PtrMemberAccess	opline -> opcode		317265	0					
ANR	317353	Identifier	opline		317265	0					
ANR	317354	Identifier	opcode		317265	1					
ANR	317355	Identifier	ZEND_NOP		317265	1					
ANR	317356	ExpressionStatement	opline ++	480:2:13031:13039	317265	1	True				
ANR	317357	PostIncDecOperationExpression	opline ++		317265	0					
ANR	317358	Identifier	opline		317265	0					
ANR	317359	IncDec	++		317265	1					
ANR	317360	ReturnType	static void		317265	1					
ANR	317361	Identifier	zend_update_extended_info		317265	2					
ANR	317362	ParameterList	zend_op_array * op_array		317265	3					
ANR	317363	Parameter	zend_op_array * op_array	461:38:12610:12632	317265	0	True				
ANR	317364	ParameterType	zend_op_array *		317265	0					
ANR	317365	Identifier	op_array		317265	1					
ANR	317366	CFGEntryNode	ENTRY		317265		True				
ANR	317367	CFGExitNode	EXIT		317265		True				
ANR	317368	Symbol	( opline + 1 ) -> lineno		317265						
ANR	317369	Symbol	ZEND_NOP		317265						
ANR	317370	Symbol	* op_array		317265						
ANR	317371	Symbol	op_array -> last		317265						
ANR	317372	Symbol	ZEND_EXT_STMT		317265						
ANR	317373	Symbol	opline -> lineno		317265						
ANR	317374	Symbol	opline		317265						
ANR	317375	Symbol	op_array -> opcodes		317265						
ANR	317376	Symbol	* opline		317265						
ANR	317377	Symbol	opline -> opcode		317265						
ANR	317378	Symbol	( opline + 1 ) -> opcode		317265						
ANR	317379	Symbol	end		317265						
ANR	317380	Symbol	op_array		317265						
ANR	317381	Function	zend_extension_op_array_handler	484:0:13047:13225							
ANR	317382	FunctionDef	"zend_extension_op_array_handler (zend_extension * extension , zend_op_array * op_array)"		317381	0					
ANR	317383	CompoundStatement		485:0:13143:13225	317381	0					
ANR	317384	IfStatement	if ( extension -> op_array_handler )		317381	0					
ANR	317385	Condition	extension -> op_array_handler	486:5:13150:13176	317381	0	True				
ANR	317386	PtrMemberAccess	extension -> op_array_handler		317381	0					
ANR	317387	Identifier	extension		317381	0					
ANR	317388	Identifier	op_array_handler		317381	1					
ANR	317389	CompoundStatement		2:34:35:35	317381	1					
ANR	317390	ExpressionStatement	extension -> op_array_handler ( op_array )	487:2:13183:13220	317381	0	True				
ANR	317391	CallExpression	extension -> op_array_handler ( op_array )		317381	0					
ANR	317392	Callee	extension -> op_array_handler		317381	0					
ANR	317393	PtrMemberAccess	extension -> op_array_handler		317381	0					
ANR	317394	Identifier	extension		317381	0					
ANR	317395	Identifier	op_array_handler		317381	1					
ANR	317396	ArgumentList	op_array		317381	1					
ANR	317397	Argument	op_array		317381	0					
ANR	317398	Identifier	op_array		317381	0					
ANR	317399	ReturnType	static void		317381	1					
ANR	317400	Identifier	zend_extension_op_array_handler		317381	2					
ANR	317401	ParameterList	"zend_extension * extension , zend_op_array * op_array"		317381	3					
ANR	317402	Parameter	zend_extension * extension	484:44:13091:13115	317381	0	True				
ANR	317403	ParameterType	zend_extension *		317381	0					
ANR	317404	Identifier	extension		317381	1					
ANR	317405	Parameter	zend_op_array * op_array	484:71:13118:13140	317381	1	True				
ANR	317406	ParameterType	zend_op_array *		317381	0					
ANR	317407	Identifier	op_array		317381	1					
ANR	317408	CFGEntryNode	ENTRY		317381		True				
ANR	317409	CFGExitNode	EXIT		317381		True				
ANR	317410	Symbol	extension -> op_array_handler		317381						
ANR	317411	Symbol	extension		317381						
ANR	317412	Symbol	* extension		317381						
ANR	317413	Symbol	op_array		317381						
ANR	317414	Function	zend_check_finally_breakout	491:0:13228:14285							
ANR	317415	FunctionDef	"zend_check_finally_breakout (zend_op_array * op_array , uint32_t op_num , uint32_t dst_num)"		317414	0					
ANR	317416	CompoundStatement		492:0:13328:14285	317414	0					
ANR	317417	IdentifierDeclStatement	int i ;	493:1:13331:13336	317414	0	True				
ANR	317418	IdentifierDecl	i		317414	0					
ANR	317419	IdentifierDeclType	int		317414	0					
ANR	317420	Identifier	i		317414	1					
ANR	317421	ForStatement	for ( i = 0 ; i < op_array -> last_try_catch ; i ++ )		317414	1					
ANR	317422	ForInit	i = 0 ;	495:6:13345:13350	317414	0	True				
ANR	317423	AssignmentExpression	i = 0		317414	0		=			
ANR	317424	Identifier	i		317414	0					
ANR	317425	PrimaryExpression	0		317414	1					
ANR	317426	Condition	i < op_array -> last_try_catch	495:13:13352:13379	317414	1	True				
ANR	317427	RelationalExpression	i < op_array -> last_try_catch		317414	0		<			
ANR	317428	Identifier	i		317414	0					
ANR	317429	PtrMemberAccess	op_array -> last_try_catch		317414	1					
ANR	317430	Identifier	op_array		317414	0					
ANR	317431	Identifier	last_try_catch		317414	1					
ANR	317432	PostIncDecOperationExpression	i ++	495:43:13382:13384	317414	2	True				
ANR	317433	Identifier	i		317414	0					
ANR	317434	IncDec	++		317414	1					
ANR	317435	CompoundStatement		4:48:58:58	317414	3					
ANR	317436	IfStatement	if ( ( op_num < op_array -> try_catch_array [ i ] . finally_op || op_num >= op_array -> try_catch_array [ i ] . finally_end ) && ( dst_num >= op_array -> try_catch_array [ i ] . finally_op && dst_num <= op_array -> try_catch_array [ i ] . finally_end ) )		317414	0					
ANR	317437	Condition	( op_num < op_array -> try_catch_array [ i ] . finally_op || op_num >= op_array -> try_catch_array [ i ] . finally_end ) && ( dst_num >= op_array -> try_catch_array [ i ] . finally_op && dst_num <= op_array -> try_catch_array [ i ] . finally_end )	496:6:13395:13624	317414	0	True				
ANR	317438	AndExpression	( op_num < op_array -> try_catch_array [ i ] . finally_op || op_num >= op_array -> try_catch_array [ i ] . finally_end ) && ( dst_num >= op_array -> try_catch_array [ i ] . finally_op && dst_num <= op_array -> try_catch_array [ i ] . finally_end )		317414	0		&&			
ANR	317439	OrExpression	op_num < op_array -> try_catch_array [ i ] . finally_op || op_num >= op_array -> try_catch_array [ i ] . finally_end		317414	0		||			
ANR	317440	RelationalExpression	op_num < op_array -> try_catch_array [ i ] . finally_op		317414	0		<			
ANR	317441	Identifier	op_num		317414	0					
ANR	317442	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		317414	1					
ANR	317443	ArrayIndexing	op_array -> try_catch_array [ i ]		317414	0					
ANR	317444	PtrMemberAccess	op_array -> try_catch_array		317414	0					
ANR	317445	Identifier	op_array		317414	0					
ANR	317446	Identifier	try_catch_array		317414	1					
ANR	317447	Identifier	i		317414	1					
ANR	317448	Identifier	finally_op		317414	1					
ANR	317449	RelationalExpression	op_num >= op_array -> try_catch_array [ i ] . finally_end		317414	1		>=			
ANR	317450	Identifier	op_num		317414	0					
ANR	317451	MemberAccess	op_array -> try_catch_array [ i ] . finally_end		317414	1					
ANR	317452	ArrayIndexing	op_array -> try_catch_array [ i ]		317414	0					
ANR	317453	PtrMemberAccess	op_array -> try_catch_array		317414	0					
ANR	317454	Identifier	op_array		317414	0					
ANR	317455	Identifier	try_catch_array		317414	1					
ANR	317456	Identifier	i		317414	1					
ANR	317457	Identifier	finally_end		317414	1					
ANR	317458	AndExpression	dst_num >= op_array -> try_catch_array [ i ] . finally_op && dst_num <= op_array -> try_catch_array [ i ] . finally_end		317414	1		&&			
ANR	317459	RelationalExpression	dst_num >= op_array -> try_catch_array [ i ] . finally_op		317414	0		>=			
ANR	317460	Identifier	dst_num		317414	0					
ANR	317461	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		317414	1					
ANR	317462	ArrayIndexing	op_array -> try_catch_array [ i ]		317414	0					
ANR	317463	PtrMemberAccess	op_array -> try_catch_array		317414	0					
ANR	317464	Identifier	op_array		317414	0					
ANR	317465	Identifier	try_catch_array		317414	1					
ANR	317466	Identifier	i		317414	1					
ANR	317467	Identifier	finally_op		317414	1					
ANR	317468	RelationalExpression	dst_num <= op_array -> try_catch_array [ i ] . finally_end		317414	1		<=			
ANR	317469	Identifier	dst_num		317414	0					
ANR	317470	MemberAccess	op_array -> try_catch_array [ i ] . finally_end		317414	1					
ANR	317471	ArrayIndexing	op_array -> try_catch_array [ i ]		317414	0					
ANR	317472	PtrMemberAccess	op_array -> try_catch_array		317414	0					
ANR	317473	Identifier	op_array		317414	0					
ANR	317474	Identifier	try_catch_array		317414	1					
ANR	317475	Identifier	i		317414	1					
ANR	317476	Identifier	finally_end		317414	1					
ANR	317477	CompoundStatement		8:60:298:298	317414	1					
ANR	317478	ExpressionStatement	CG ( in_compilation ) = 1	500:3:13632:13654	317414	0	True				
ANR	317479	AssignmentExpression	CG ( in_compilation ) = 1		317414	0		=			
ANR	317480	CallExpression	CG ( in_compilation )		317414	0					
ANR	317481	Callee	CG		317414	0					
ANR	317482	Identifier	CG		317414	0					
ANR	317483	ArgumentList	in_compilation		317414	1					
ANR	317484	Argument	in_compilation		317414	0					
ANR	317485	Identifier	in_compilation		317414	0					
ANR	317486	PrimaryExpression	1		317414	1					
ANR	317487	ExpressionStatement	CG ( active_op_array ) = op_array	501:3:13659:13689	317414	1	True				
ANR	317488	AssignmentExpression	CG ( active_op_array ) = op_array		317414	0		=			
ANR	317489	CallExpression	CG ( active_op_array )		317414	0					
ANR	317490	Callee	CG		317414	0					
ANR	317491	Identifier	CG		317414	0					
ANR	317492	ArgumentList	active_op_array		317414	1					
ANR	317493	Argument	active_op_array		317414	0					
ANR	317494	Identifier	active_op_array		317414	0					
ANR	317495	Identifier	op_array		317414	1					
ANR	317496	ExpressionStatement	CG ( zend_lineno ) = op_array -> opcodes [ op_num ] . lineno	502:3:13694:13744	317414	2	True				
ANR	317497	AssignmentExpression	CG ( zend_lineno ) = op_array -> opcodes [ op_num ] . lineno		317414	0		=			
ANR	317498	CallExpression	CG ( zend_lineno )		317414	0					
ANR	317499	Callee	CG		317414	0					
ANR	317500	Identifier	CG		317414	0					
ANR	317501	ArgumentList	zend_lineno		317414	1					
ANR	317502	Argument	zend_lineno		317414	0					
ANR	317503	Identifier	zend_lineno		317414	0					
ANR	317504	MemberAccess	op_array -> opcodes [ op_num ] . lineno		317414	1					
ANR	317505	ArrayIndexing	op_array -> opcodes [ op_num ]		317414	0					
ANR	317506	PtrMemberAccess	op_array -> opcodes		317414	0					
ANR	317507	Identifier	op_array		317414	0					
ANR	317508	Identifier	opcodes		317414	1					
ANR	317509	Identifier	op_num		317414	1					
ANR	317510	Identifier	lineno		317414	1					
ANR	317511	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""jump into a finally block is disallowed"" )"	503:3:13749:13828	317414	3	True				
ANR	317512	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""jump into a finally block is disallowed"" )"		317414	0					
ANR	317513	Callee	zend_error_noreturn		317414	0					
ANR	317514	Identifier	zend_error_noreturn		317414	0					
ANR	317515	ArgumentList	E_COMPILE_ERROR		317414	1					
ANR	317516	Argument	E_COMPILE_ERROR		317414	0					
ANR	317517	Identifier	E_COMPILE_ERROR		317414	0					
ANR	317518	Argument	"""jump into a finally block is disallowed"""		317414	1					
ANR	317519	PrimaryExpression	"""jump into a finally block is disallowed"""		317414	0					
ANR	317520	ElseStatement	else		317414	0					
ANR	317521	IfStatement	if ( ( op_num >= op_array -> try_catch_array [ i ] . finally_op && op_num <= op_array -> try_catch_array [ i ] . finally_end ) && ( dst_num > op_array -> try_catch_array [ i ] . finally_end || dst_num < op_array -> try_catch_array [ i ] . finally_op ) )		317414	0					
ANR	317522	Condition	( op_num >= op_array -> try_catch_array [ i ] . finally_op && op_num <= op_array -> try_catch_array [ i ] . finally_end ) && ( dst_num > op_array -> try_catch_array [ i ] . finally_end || dst_num < op_array -> try_catch_array [ i ] . finally_op )	504:13:13843:14070	317414	0	True				
ANR	317523	AndExpression	( op_num >= op_array -> try_catch_array [ i ] . finally_op && op_num <= op_array -> try_catch_array [ i ] . finally_end ) && ( dst_num > op_array -> try_catch_array [ i ] . finally_end || dst_num < op_array -> try_catch_array [ i ] . finally_op )		317414	0		&&			
ANR	317524	AndExpression	op_num >= op_array -> try_catch_array [ i ] . finally_op && op_num <= op_array -> try_catch_array [ i ] . finally_end		317414	0		&&			
ANR	317525	RelationalExpression	op_num >= op_array -> try_catch_array [ i ] . finally_op		317414	0		>=			
ANR	317526	Identifier	op_num		317414	0					
ANR	317527	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		317414	1					
ANR	317528	ArrayIndexing	op_array -> try_catch_array [ i ]		317414	0					
ANR	317529	PtrMemberAccess	op_array -> try_catch_array		317414	0					
ANR	317530	Identifier	op_array		317414	0					
ANR	317531	Identifier	try_catch_array		317414	1					
ANR	317532	Identifier	i		317414	1					
ANR	317533	Identifier	finally_op		317414	1					
ANR	317534	RelationalExpression	op_num <= op_array -> try_catch_array [ i ] . finally_end		317414	1		<=			
ANR	317535	Identifier	op_num		317414	0					
ANR	317536	MemberAccess	op_array -> try_catch_array [ i ] . finally_end		317414	1					
ANR	317537	ArrayIndexing	op_array -> try_catch_array [ i ]		317414	0					
ANR	317538	PtrMemberAccess	op_array -> try_catch_array		317414	0					
ANR	317539	Identifier	op_array		317414	0					
ANR	317540	Identifier	try_catch_array		317414	1					
ANR	317541	Identifier	i		317414	1					
ANR	317542	Identifier	finally_end		317414	1					
ANR	317543	OrExpression	dst_num > op_array -> try_catch_array [ i ] . finally_end || dst_num < op_array -> try_catch_array [ i ] . finally_op		317414	1		||			
ANR	317544	RelationalExpression	dst_num > op_array -> try_catch_array [ i ] . finally_end		317414	0		>			
ANR	317545	Identifier	dst_num		317414	0					
ANR	317546	MemberAccess	op_array -> try_catch_array [ i ] . finally_end		317414	1					
ANR	317547	ArrayIndexing	op_array -> try_catch_array [ i ]		317414	0					
ANR	317548	PtrMemberAccess	op_array -> try_catch_array		317414	0					
ANR	317549	Identifier	op_array		317414	0					
ANR	317550	Identifier	try_catch_array		317414	1					
ANR	317551	Identifier	i		317414	1					
ANR	317552	Identifier	finally_end		317414	1					
ANR	317553	RelationalExpression	dst_num < op_array -> try_catch_array [ i ] . finally_op		317414	1		<			
ANR	317554	Identifier	dst_num		317414	0					
ANR	317555	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		317414	1					
ANR	317556	ArrayIndexing	op_array -> try_catch_array [ i ]		317414	0					
ANR	317557	PtrMemberAccess	op_array -> try_catch_array		317414	0					
ANR	317558	Identifier	op_array		317414	0					
ANR	317559	Identifier	try_catch_array		317414	1					
ANR	317560	Identifier	i		317414	1					
ANR	317561	Identifier	finally_op		317414	1					
ANR	317562	CompoundStatement		16:60:744:744	317414	1					
ANR	317563	ExpressionStatement	CG ( in_compilation ) = 1	508:3:14078:14100	317414	0	True				
ANR	317564	AssignmentExpression	CG ( in_compilation ) = 1		317414	0		=			
ANR	317565	CallExpression	CG ( in_compilation )		317414	0					
ANR	317566	Callee	CG		317414	0					
ANR	317567	Identifier	CG		317414	0					
ANR	317568	ArgumentList	in_compilation		317414	1					
ANR	317569	Argument	in_compilation		317414	0					
ANR	317570	Identifier	in_compilation		317414	0					
ANR	317571	PrimaryExpression	1		317414	1					
ANR	317572	ExpressionStatement	CG ( active_op_array ) = op_array	509:3:14105:14135	317414	1	True				
ANR	317573	AssignmentExpression	CG ( active_op_array ) = op_array		317414	0		=			
ANR	317574	CallExpression	CG ( active_op_array )		317414	0					
ANR	317575	Callee	CG		317414	0					
ANR	317576	Identifier	CG		317414	0					
ANR	317577	ArgumentList	active_op_array		317414	1					
ANR	317578	Argument	active_op_array		317414	0					
ANR	317579	Identifier	active_op_array		317414	0					
ANR	317580	Identifier	op_array		317414	1					
ANR	317581	ExpressionStatement	CG ( zend_lineno ) = op_array -> opcodes [ op_num ] . lineno	510:3:14140:14190	317414	2	True				
ANR	317582	AssignmentExpression	CG ( zend_lineno ) = op_array -> opcodes [ op_num ] . lineno		317414	0		=			
ANR	317583	CallExpression	CG ( zend_lineno )		317414	0					
ANR	317584	Callee	CG		317414	0					
ANR	317585	Identifier	CG		317414	0					
ANR	317586	ArgumentList	zend_lineno		317414	1					
ANR	317587	Argument	zend_lineno		317414	0					
ANR	317588	Identifier	zend_lineno		317414	0					
ANR	317589	MemberAccess	op_array -> opcodes [ op_num ] . lineno		317414	1					
ANR	317590	ArrayIndexing	op_array -> opcodes [ op_num ]		317414	0					
ANR	317591	PtrMemberAccess	op_array -> opcodes		317414	0					
ANR	317592	Identifier	op_array		317414	0					
ANR	317593	Identifier	opcodes		317414	1					
ANR	317594	Identifier	op_num		317414	1					
ANR	317595	Identifier	lineno		317414	1					
ANR	317596	ExpressionStatement	"zend_error_noreturn ( E_COMPILE_ERROR , ""jump out of a finally block is disallowed"" )"	511:3:14195:14276	317414	3	True				
ANR	317597	CallExpression	"zend_error_noreturn ( E_COMPILE_ERROR , ""jump out of a finally block is disallowed"" )"		317414	0					
ANR	317598	Callee	zend_error_noreturn		317414	0					
ANR	317599	Identifier	zend_error_noreturn		317414	0					
ANR	317600	ArgumentList	E_COMPILE_ERROR		317414	1					
ANR	317601	Argument	E_COMPILE_ERROR		317414	0					
ANR	317602	Identifier	E_COMPILE_ERROR		317414	0					
ANR	317603	Argument	"""jump out of a finally block is disallowed"""		317414	1					
ANR	317604	PrimaryExpression	"""jump out of a finally block is disallowed"""		317414	0					
ANR	317605	ReturnType	static void		317414	1					
ANR	317606	Identifier	zend_check_finally_breakout		317414	2					
ANR	317607	ParameterList	"zend_op_array * op_array , uint32_t op_num , uint32_t dst_num"		317414	3					
ANR	317608	Parameter	zend_op_array * op_array	491:40:13268:13290	317414	0	True				
ANR	317609	ParameterType	zend_op_array *		317414	0					
ANR	317610	Identifier	op_array		317414	1					
ANR	317611	Parameter	uint32_t op_num	491:65:13293:13307	317414	1	True				
ANR	317612	ParameterType	uint32_t		317414	0					
ANR	317613	Identifier	op_num		317414	1					
ANR	317614	Parameter	uint32_t dst_num	491:82:13310:13325	317414	2	True				
ANR	317615	ParameterType	uint32_t		317414	0					
ANR	317616	Identifier	dst_num		317414	1					
ANR	317617	CFGEntryNode	ENTRY		317414		True				
ANR	317618	CFGExitNode	EXIT		317414		True				
ANR	317619	Symbol	CG		317414						
ANR	317620	Symbol	active_op_array		317414						
ANR	317621	Symbol	* op_num		317414						
ANR	317622	Symbol	E_COMPILE_ERROR		317414						
ANR	317623	Symbol	op_num		317414						
ANR	317624	Symbol	i		317414						
ANR	317625	Symbol	* op_array -> try_catch_array		317414						
ANR	317626	Symbol	op_array -> opcodes [ op_num ] . lineno		317414						
ANR	317627	Symbol	* op_array		317414						
ANR	317628	Symbol	in_compilation		317414						
ANR	317629	Symbol	op_array -> last_try_catch		317414						
ANR	317630	Symbol	op_array -> try_catch_array [ i ] . finally_op		317414						
ANR	317631	Symbol	* i		317414						
ANR	317632	Symbol	op_array -> opcodes		317414						
ANR	317633	Symbol	dst_num		317414						
ANR	317634	Symbol	zend_lineno		317414						
ANR	317635	Symbol	op_array -> try_catch_array [ i ] . finally_end		317414						
ANR	317636	Symbol	op_array -> try_catch_array		317414						
ANR	317637	Symbol	* * op_array		317414						
ANR	317638	Symbol	op_array		317414						
ANR	317639	Symbol	* op_array -> opcodes		317414						
ANR	317640	Function	zend_resolve_fast_call	516:0:14288:14916							
ANR	317641	FunctionDef	"zend_resolve_fast_call (zend_op_array * op_array , uint32_t op_num)"		317640	0					
ANR	317642	CompoundStatement		517:0:14365:14916	317640	0					
ANR	317643	IdentifierDeclStatement	int i ;	518:1:14368:14373	317640	0	True				
ANR	317644	IdentifierDecl	i		317640	0					
ANR	317645	IdentifierDeclType	int		317640	0					
ANR	317646	Identifier	i		317640	1					
ANR	317647	IdentifierDeclStatement	uint32_t finally_op_num = 0 ;	519:1:14376:14403	317640	1	True				
ANR	317648	IdentifierDecl	finally_op_num = 0		317640	0					
ANR	317649	IdentifierDeclType	uint32_t		317640	0					
ANR	317650	Identifier	finally_op_num		317640	1					
ANR	317651	AssignmentExpression	finally_op_num = 0		317640	2		=			
ANR	317652	Identifier	finally_op_num		317640	0					
ANR	317653	PrimaryExpression	0		317640	1					
ANR	317654	ForStatement	for ( i = 0 ; i < op_array -> last_try_catch ; i ++ )		317640	2					
ANR	317655	ForInit	i = 0 ;	521:6:14412:14417	317640	0	True				
ANR	317656	AssignmentExpression	i = 0		317640	0		=			
ANR	317657	Identifier	i		317640	0					
ANR	317658	PrimaryExpression	0		317640	1					
ANR	317659	Condition	i < op_array -> last_try_catch	521:13:14419:14446	317640	1	True				
ANR	317660	RelationalExpression	i < op_array -> last_try_catch		317640	0		<			
ANR	317661	Identifier	i		317640	0					
ANR	317662	PtrMemberAccess	op_array -> last_try_catch		317640	1					
ANR	317663	Identifier	op_array		317640	0					
ANR	317664	Identifier	last_try_catch		317640	1					
ANR	317665	PostIncDecOperationExpression	i ++	521:43:14449:14451	317640	2	True				
ANR	317666	Identifier	i		317640	0					
ANR	317667	IncDec	++		317640	1					
ANR	317668	CompoundStatement		5:48:88:88	317640	3					
ANR	317669	IfStatement	if ( op_num >= op_array -> try_catch_array [ i ] . finally_op && op_num < op_array -> try_catch_array [ i ] . finally_end )		317640	0					
ANR	317670	Condition	op_num >= op_array -> try_catch_array [ i ] . finally_op && op_num < op_array -> try_catch_array [ i ] . finally_end	522:6:14462:14567	317640	0	True				
ANR	317671	AndExpression	op_num >= op_array -> try_catch_array [ i ] . finally_op && op_num < op_array -> try_catch_array [ i ] . finally_end		317640	0		&&			
ANR	317672	RelationalExpression	op_num >= op_array -> try_catch_array [ i ] . finally_op		317640	0		>=			
ANR	317673	Identifier	op_num		317640	0					
ANR	317674	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		317640	1					
ANR	317675	ArrayIndexing	op_array -> try_catch_array [ i ]		317640	0					
ANR	317676	PtrMemberAccess	op_array -> try_catch_array		317640	0					
ANR	317677	Identifier	op_array		317640	0					
ANR	317678	Identifier	try_catch_array		317640	1					
ANR	317679	Identifier	i		317640	1					
ANR	317680	Identifier	finally_op		317640	1					
ANR	317681	RelationalExpression	op_num < op_array -> try_catch_array [ i ] . finally_end		317640	1		<			
ANR	317682	Identifier	op_num		317640	0					
ANR	317683	MemberAccess	op_array -> try_catch_array [ i ] . finally_end		317640	1					
ANR	317684	ArrayIndexing	op_array -> try_catch_array [ i ]		317640	0					
ANR	317685	PtrMemberAccess	op_array -> try_catch_array		317640	0					
ANR	317686	Identifier	op_array		317640	0					
ANR	317687	Identifier	try_catch_array		317640	1					
ANR	317688	Identifier	i		317640	1					
ANR	317689	Identifier	finally_end		317640	1					
ANR	317690	CompoundStatement		7:58:204:204	317640	1					
ANR	317691	ExpressionStatement	finally_op_num = op_array -> try_catch_array [ i ] . finally_op	524:3:14575:14631	317640	0	True				
ANR	317692	AssignmentExpression	finally_op_num = op_array -> try_catch_array [ i ] . finally_op		317640	0		=			
ANR	317693	Identifier	finally_op_num		317640	0					
ANR	317694	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		317640	1					
ANR	317695	ArrayIndexing	op_array -> try_catch_array [ i ]		317640	0					
ANR	317696	PtrMemberAccess	op_array -> try_catch_array		317640	0					
ANR	317697	Identifier	op_array		317640	0					
ANR	317698	Identifier	try_catch_array		317640	1					
ANR	317699	Identifier	i		317640	1					
ANR	317700	Identifier	finally_op		317640	1					
ANR	317701	IfStatement	if ( finally_op_num )		317640	3					
ANR	317702	Condition	finally_op_num	528:5:14646:14659	317640	0	True				
ANR	317703	Identifier	finally_op_num		317640	0					
ANR	317704	CompoundStatement		12:21:296:296	317640	1					
ANR	317705	ExpressionStatement	ZEND_ASSERT ( op_array -> opcodes [ finally_op_num - 2 ] . opcode == ZEND_FAST_CALL )	530:2:14697:14772	317640	0	True				
ANR	317706	CallExpression	ZEND_ASSERT ( op_array -> opcodes [ finally_op_num - 2 ] . opcode == ZEND_FAST_CALL )		317640	0					
ANR	317707	Callee	ZEND_ASSERT		317640	0					
ANR	317708	Identifier	ZEND_ASSERT		317640	0					
ANR	317709	ArgumentList	op_array -> opcodes [ finally_op_num - 2 ] . opcode == ZEND_FAST_CALL		317640	1					
ANR	317710	Argument	op_array -> opcodes [ finally_op_num - 2 ] . opcode == ZEND_FAST_CALL		317640	0					
ANR	317711	EqualityExpression	op_array -> opcodes [ finally_op_num - 2 ] . opcode == ZEND_FAST_CALL		317640	0		==			
ANR	317712	MemberAccess	op_array -> opcodes [ finally_op_num - 2 ] . opcode		317640	0					
ANR	317713	ArrayIndexing	op_array -> opcodes [ finally_op_num - 2 ]		317640	0					
ANR	317714	PtrMemberAccess	op_array -> opcodes		317640	0					
ANR	317715	Identifier	op_array		317640	0					
ANR	317716	Identifier	opcodes		317640	1					
ANR	317717	AdditiveExpression	finally_op_num - 2		317640	1		-			
ANR	317718	Identifier	finally_op_num		317640	0					
ANR	317719	PrimaryExpression	2		317640	1					
ANR	317720	Identifier	opcode		317640	1					
ANR	317721	Identifier	ZEND_FAST_CALL		317640	1					
ANR	317722	ExpressionStatement	op_array -> opcodes [ op_num ] . extended_value = ZEND_FAST_CALL_FROM_FINALLY	531:2:14776:14846	317640	1	True				
ANR	317723	AssignmentExpression	op_array -> opcodes [ op_num ] . extended_value = ZEND_FAST_CALL_FROM_FINALLY		317640	0		=			
ANR	317724	MemberAccess	op_array -> opcodes [ op_num ] . extended_value		317640	0					
ANR	317725	ArrayIndexing	op_array -> opcodes [ op_num ]		317640	0					
ANR	317726	PtrMemberAccess	op_array -> opcodes		317640	0					
ANR	317727	Identifier	op_array		317640	0					
ANR	317728	Identifier	opcodes		317640	1					
ANR	317729	Identifier	op_num		317640	1					
ANR	317730	Identifier	extended_value		317640	1					
ANR	317731	Identifier	ZEND_FAST_CALL_FROM_FINALLY		317640	1					
ANR	317732	ExpressionStatement	op_array -> opcodes [ op_num ] . op2 . opline_num = finally_op_num - 2	532:2:14850:14911	317640	2	True				
ANR	317733	AssignmentExpression	op_array -> opcodes [ op_num ] . op2 . opline_num = finally_op_num - 2		317640	0		=			
ANR	317734	MemberAccess	op_array -> opcodes [ op_num ] . op2 . opline_num		317640	0					
ANR	317735	MemberAccess	op_array -> opcodes [ op_num ] . op2		317640	0					
ANR	317736	ArrayIndexing	op_array -> opcodes [ op_num ]		317640	0					
ANR	317737	PtrMemberAccess	op_array -> opcodes		317640	0					
ANR	317738	Identifier	op_array		317640	0					
ANR	317739	Identifier	opcodes		317640	1					
ANR	317740	Identifier	op_num		317640	1					
ANR	317741	Identifier	op2		317640	1					
ANR	317742	Identifier	opline_num		317640	1					
ANR	317743	AdditiveExpression	finally_op_num - 2		317640	1		-			
ANR	317744	Identifier	finally_op_num		317640	0					
ANR	317745	PrimaryExpression	2		317640	1					
ANR	317746	ReturnType	static void		317640	1					
ANR	317747	Identifier	zend_resolve_fast_call		317640	2					
ANR	317748	ParameterList	"zend_op_array * op_array , uint32_t op_num"		317640	3					
ANR	317749	Parameter	zend_op_array * op_array	516:35:14323:14345	317640	0	True				
ANR	317750	ParameterType	zend_op_array *		317640	0					
ANR	317751	Identifier	op_array		317640	1					
ANR	317752	Parameter	uint32_t op_num	516:60:14348:14362	317640	1	True				
ANR	317753	ParameterType	uint32_t		317640	0					
ANR	317754	Identifier	op_num		317640	1					
ANR	317755	CFGEntryNode	ENTRY		317640		True				
ANR	317756	CFGExitNode	EXIT		317640		True				
ANR	317757	Symbol	ZEND_FAST_CALL		317640						
ANR	317758	Symbol	op_array -> opcodes [ finally_op_num - 2 ] . opcode		317640						
ANR	317759	Symbol	op_array -> opcodes [ op_num ] . op2		317640						
ANR	317760	Symbol	* op_num		317640						
ANR	317761	Symbol	op_num		317640						
ANR	317762	Symbol	i		317640						
ANR	317763	Symbol	* op_array -> try_catch_array		317640						
ANR	317764	Symbol	* op_array		317640						
ANR	317765	Symbol	op_array -> last_try_catch		317640						
ANR	317766	Symbol	op_array -> try_catch_array [ i ] . finally_op		317640						
ANR	317767	Symbol	op_array -> opcodes [ op_num ] . extended_value		317640						
ANR	317768	Symbol	* i		317640						
ANR	317769	Symbol	op_array -> opcodes		317640						
ANR	317770	Symbol	* finally_op_num		317640						
ANR	317771	Symbol	finally_op_num		317640						
ANR	317772	Symbol	ZEND_FAST_CALL_FROM_FINALLY		317640						
ANR	317773	Symbol	op_array -> try_catch_array [ i ] . finally_end		317640						
ANR	317774	Symbol	op_array -> opcodes [ op_num ] . op2 . opline_num		317640						
ANR	317775	Symbol	op_array -> try_catch_array		317640						
ANR	317776	Symbol	* * op_array		317640						
ANR	317777	Symbol	op_array		317640						
ANR	317778	Symbol	* op_array -> opcodes		317640						
ANR	317779	Function	zend_resolve_finally_ret	536:0:14919:15924							
ANR	317780	FunctionDef	"zend_resolve_finally_ret (zend_op_array * op_array , uint32_t op_num)"		317779	0					
ANR	317781	CompoundStatement		537:0:14998:15924	317779	0					
ANR	317782	IdentifierDeclStatement	int i ;	538:1:15001:15006	317779	0	True				
ANR	317783	IdentifierDecl	i		317779	0					
ANR	317784	IdentifierDeclType	int		317779	0					
ANR	317785	Identifier	i		317779	1					
ANR	317786	IdentifierDeclStatement	"uint32_t catch_op_num = 0 , finally_op_num = 0 ;"	539:1:15009:15054	317779	1	True				
ANR	317787	IdentifierDecl	catch_op_num = 0		317779	0					
ANR	317788	IdentifierDeclType	uint32_t		317779	0					
ANR	317789	Identifier	catch_op_num		317779	1					
ANR	317790	AssignmentExpression	catch_op_num = 0		317779	2		=			
ANR	317791	Identifier	catch_op_num		317779	0					
ANR	317792	PrimaryExpression	0		317779	1					
ANR	317793	IdentifierDecl	finally_op_num = 0		317779	1					
ANR	317794	IdentifierDeclType	uint32_t		317779	0					
ANR	317795	Identifier	finally_op_num		317779	1					
ANR	317796	AssignmentExpression	finally_op_num = 0		317779	2		=			
ANR	317797	Identifier	finally_op_num		317779	0					
ANR	317798	PrimaryExpression	0		317779	1					
ANR	317799	ForStatement	for ( i = 0 ; i < op_array -> last_try_catch ; i ++ )		317779	2					
ANR	317800	ForInit	i = 0 ;	541:6:15063:15068	317779	0	True				
ANR	317801	AssignmentExpression	i = 0		317779	0		=			
ANR	317802	Identifier	i		317779	0					
ANR	317803	PrimaryExpression	0		317779	1					
ANR	317804	Condition	i < op_array -> last_try_catch	541:13:15070:15097	317779	1	True				
ANR	317805	RelationalExpression	i < op_array -> last_try_catch		317779	0		<			
ANR	317806	Identifier	i		317779	0					
ANR	317807	PtrMemberAccess	op_array -> last_try_catch		317779	1					
ANR	317808	Identifier	op_array		317779	0					
ANR	317809	Identifier	last_try_catch		317779	1					
ANR	317810	PostIncDecOperationExpression	i ++	541:43:15100:15102	317779	2	True				
ANR	317811	Identifier	i		317779	0					
ANR	317812	IncDec	++		317779	1					
ANR	317813	CompoundStatement		5:48:106:106	317779	3					
ANR	317814	IfStatement	if ( op_array -> try_catch_array [ i ] . try_op > op_num )		317779	0					
ANR	317815	Condition	op_array -> try_catch_array [ i ] . try_op > op_num	542:6:15113:15156	317779	0	True				
ANR	317816	RelationalExpression	op_array -> try_catch_array [ i ] . try_op > op_num		317779	0		>			
ANR	317817	MemberAccess	op_array -> try_catch_array [ i ] . try_op		317779	0					
ANR	317818	ArrayIndexing	op_array -> try_catch_array [ i ]		317779	0					
ANR	317819	PtrMemberAccess	op_array -> try_catch_array		317779	0					
ANR	317820	Identifier	op_array		317779	0					
ANR	317821	Identifier	try_catch_array		317779	1					
ANR	317822	Identifier	i		317779	1					
ANR	317823	Identifier	try_op		317779	1					
ANR	317824	Identifier	op_num		317779	1					
ANR	317825	CompoundStatement		6:52:160:160	317779	1					
ANR	317826	BreakStatement	break ;	543:3:15164:15169	317779	0	True				
ANR	317827	IfStatement	if ( op_num < op_array -> try_catch_array [ i ] . finally_op )		317779	1					
ANR	317828	Condition	op_num < op_array -> try_catch_array [ i ] . finally_op	545:6:15181:15228	317779	0	True				
ANR	317829	RelationalExpression	op_num < op_array -> try_catch_array [ i ] . finally_op		317779	0		<			
ANR	317830	Identifier	op_num		317779	0					
ANR	317831	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		317779	1					
ANR	317832	ArrayIndexing	op_array -> try_catch_array [ i ]		317779	0					
ANR	317833	PtrMemberAccess	op_array -> try_catch_array		317779	0					
ANR	317834	Identifier	op_array		317779	0					
ANR	317835	Identifier	try_catch_array		317779	1					
ANR	317836	Identifier	i		317779	1					
ANR	317837	Identifier	finally_op		317779	1					
ANR	317838	CompoundStatement		9:56:232:232	317779	1					
ANR	317839	ExpressionStatement	finally_op_num = op_array -> try_catch_array [ i ] . finally_op	546:3:15236:15292	317779	0	True				
ANR	317840	AssignmentExpression	finally_op_num = op_array -> try_catch_array [ i ] . finally_op		317779	0		=			
ANR	317841	Identifier	finally_op_num		317779	0					
ANR	317842	MemberAccess	op_array -> try_catch_array [ i ] . finally_op		317779	1					
ANR	317843	ArrayIndexing	op_array -> try_catch_array [ i ]		317779	0					
ANR	317844	PtrMemberAccess	op_array -> try_catch_array		317779	0					
ANR	317845	Identifier	op_array		317779	0					
ANR	317846	Identifier	try_catch_array		317779	1					
ANR	317847	Identifier	i		317779	1					
ANR	317848	Identifier	finally_op		317779	1					
ANR	317849	IfStatement	if ( op_num < op_array -> try_catch_array [ i ] . catch_op )		317779	2					
ANR	317850	Condition	op_num < op_array -> try_catch_array [ i ] . catch_op	548:6:15304:15349	317779	0	True				
ANR	317851	RelationalExpression	op_num < op_array -> try_catch_array [ i ] . catch_op		317779	0		<			
ANR	317852	Identifier	op_num		317779	0					
ANR	317853	MemberAccess	op_array -> try_catch_array [ i ] . catch_op		317779	1					
ANR	317854	ArrayIndexing	op_array -> try_catch_array [ i ]		317779	0					
ANR	317855	PtrMemberAccess	op_array -> try_catch_array		317779	0					
ANR	317856	Identifier	op_array		317779	0					
ANR	317857	Identifier	try_catch_array		317779	1					
ANR	317858	Identifier	i		317779	1					
ANR	317859	Identifier	catch_op		317779	1					
ANR	317860	CompoundStatement		12:54:353:353	317779	1					
ANR	317861	ExpressionStatement	catch_op_num = op_array -> try_catch_array [ i ] . catch_op	549:3:15357:15409	317779	0	True				
ANR	317862	AssignmentExpression	catch_op_num = op_array -> try_catch_array [ i ] . catch_op		317779	0		=			
ANR	317863	Identifier	catch_op_num		317779	0					
ANR	317864	MemberAccess	op_array -> try_catch_array [ i ] . catch_op		317779	1					
ANR	317865	ArrayIndexing	op_array -> try_catch_array [ i ]		317779	0					
ANR	317866	PtrMemberAccess	op_array -> try_catch_array		317779	0					
ANR	317867	Identifier	op_array		317779	0					
ANR	317868	Identifier	try_catch_array		317779	1					
ANR	317869	Identifier	i		317779	1					
ANR	317870	Identifier	catch_op		317779	1					
ANR	317871	IfStatement	if ( finally_op_num && ( ! catch_op_num || catch_op_num >= finally_op_num ) )		317779	3					
ANR	317872	Condition	finally_op_num && ( ! catch_op_num || catch_op_num >= finally_op_num )	553:5:15424:15490	317779	0	True				
ANR	317873	AndExpression	finally_op_num && ( ! catch_op_num || catch_op_num >= finally_op_num )		317779	0		&&			
ANR	317874	Identifier	finally_op_num		317779	0					
ANR	317875	OrExpression	! catch_op_num || catch_op_num >= finally_op_num		317779	1		||			
ANR	317876	UnaryOperationExpression	! catch_op_num		317779	0					
ANR	317877	UnaryOperator	!		317779	0					
ANR	317878	Identifier	catch_op_num		317779	1					
ANR	317879	RelationalExpression	catch_op_num >= finally_op_num		317779	1		>=			
ANR	317880	Identifier	catch_op_num		317779	0					
ANR	317881	Identifier	finally_op_num		317779	1					
ANR	317882	CompoundStatement		17:74:494:494	317779	1					
ANR	317883	ExpressionStatement	op_array -> opcodes [ op_num ] . extended_value = ZEND_FAST_RET_TO_FINALLY	555:2:15567:15634	317779	0	True				
ANR	317884	AssignmentExpression	op_array -> opcodes [ op_num ] . extended_value = ZEND_FAST_RET_TO_FINALLY		317779	0		=			
ANR	317885	MemberAccess	op_array -> opcodes [ op_num ] . extended_value		317779	0					
ANR	317886	ArrayIndexing	op_array -> opcodes [ op_num ]		317779	0					
ANR	317887	PtrMemberAccess	op_array -> opcodes		317779	0					
ANR	317888	Identifier	op_array		317779	0					
ANR	317889	Identifier	opcodes		317779	1					
ANR	317890	Identifier	op_num		317779	1					
ANR	317891	Identifier	extended_value		317779	1					
ANR	317892	Identifier	ZEND_FAST_RET_TO_FINALLY		317779	1					
ANR	317893	ExpressionStatement	op_array -> opcodes [ op_num ] . op2 . opline_num = finally_op_num	556:2:15638:15695	317779	1	True				
ANR	317894	AssignmentExpression	op_array -> opcodes [ op_num ] . op2 . opline_num = finally_op_num		317779	0		=			
ANR	317895	MemberAccess	op_array -> opcodes [ op_num ] . op2 . opline_num		317779	0					
ANR	317896	MemberAccess	op_array -> opcodes [ op_num ] . op2		317779	0					
ANR	317897	ArrayIndexing	op_array -> opcodes [ op_num ]		317779	0					
ANR	317898	PtrMemberAccess	op_array -> opcodes		317779	0					
ANR	317899	Identifier	op_array		317779	0					
ANR	317900	Identifier	opcodes		317779	1					
ANR	317901	Identifier	op_num		317779	1					
ANR	317902	Identifier	op2		317779	1					
ANR	317903	Identifier	opline_num		317779	1					
ANR	317904	Identifier	finally_op_num		317779	1					
ANR	317905	ElseStatement	else		317779	0					
ANR	317906	IfStatement	if ( catch_op_num )		317779	0					
ANR	317907	Condition	catch_op_num	557:12:15709:15720	317779	0	True				
ANR	317908	Identifier	catch_op_num		317779	0					
ANR	317909	CompoundStatement		21:26:724:724	317779	1					
ANR	317910	ExpressionStatement	op_array -> opcodes [ op_num ] . extended_value = ZEND_FAST_RET_TO_CATCH	559:2:15795:15860	317779	0	True				
ANR	317911	AssignmentExpression	op_array -> opcodes [ op_num ] . extended_value = ZEND_FAST_RET_TO_CATCH		317779	0		=			
ANR	317912	MemberAccess	op_array -> opcodes [ op_num ] . extended_value		317779	0					
ANR	317913	ArrayIndexing	op_array -> opcodes [ op_num ]		317779	0					
ANR	317914	PtrMemberAccess	op_array -> opcodes		317779	0					
ANR	317915	Identifier	op_array		317779	0					
ANR	317916	Identifier	opcodes		317779	1					
ANR	317917	Identifier	op_num		317779	1					
ANR	317918	Identifier	extended_value		317779	1					
ANR	317919	Identifier	ZEND_FAST_RET_TO_CATCH		317779	1					
ANR	317920	ExpressionStatement	op_array -> opcodes [ op_num ] . op2 . opline_num = catch_op_num	560:2:15864:15919	317779	1	True				
ANR	317921	AssignmentExpression	op_array -> opcodes [ op_num ] . op2 . opline_num = catch_op_num		317779	0		=			
ANR	317922	MemberAccess	op_array -> opcodes [ op_num ] . op2 . opline_num		317779	0					
ANR	317923	MemberAccess	op_array -> opcodes [ op_num ] . op2		317779	0					
ANR	317924	ArrayIndexing	op_array -> opcodes [ op_num ]		317779	0					
ANR	317925	PtrMemberAccess	op_array -> opcodes		317779	0					
ANR	317926	Identifier	op_array		317779	0					
ANR	317927	Identifier	opcodes		317779	1					
ANR	317928	Identifier	op_num		317779	1					
ANR	317929	Identifier	op2		317779	1					
ANR	317930	Identifier	opline_num		317779	1					
ANR	317931	Identifier	catch_op_num		317779	1					
ANR	317932	ReturnType	static void		317779	1					
ANR	317933	Identifier	zend_resolve_finally_ret		317779	2					
ANR	317934	ParameterList	"zend_op_array * op_array , uint32_t op_num"		317779	3					
ANR	317935	Parameter	zend_op_array * op_array	536:37:14956:14978	317779	0	True				
ANR	317936	ParameterType	zend_op_array *		317779	0					
ANR	317937	Identifier	op_array		317779	1					
ANR	317938	Parameter	uint32_t op_num	536:62:14981:14995	317779	1	True				
ANR	317939	ParameterType	uint32_t		317779	0					
ANR	317940	Identifier	op_num		317779	1					
ANR	317941	CFGEntryNode	ENTRY		317779		True				
ANR	317942	CFGExitNode	EXIT		317779		True				
ANR	317943	Symbol	ZEND_FAST_RET_TO_CATCH		317779						
ANR	317944	Symbol	op_array -> opcodes [ op_num ] . op2		317779						
ANR	317945	Symbol	op_array -> try_catch_array [ i ] . try_op		317779						
ANR	317946	Symbol	* op_num		317779						
ANR	317947	Symbol	catch_op_num		317779						
ANR	317948	Symbol	op_num		317779						
ANR	317949	Symbol	i		317779						
ANR	317950	Symbol	* op_array -> try_catch_array		317779						
ANR	317951	Symbol	* op_array		317779						
ANR	317952	Symbol	op_array -> last_try_catch		317779						
ANR	317953	Symbol	op_array -> try_catch_array [ i ] . finally_op		317779						
ANR	317954	Symbol	op_array -> opcodes [ op_num ] . extended_value		317779						
ANR	317955	Symbol	* i		317779						
ANR	317956	Symbol	op_array -> opcodes		317779						
ANR	317957	Symbol	ZEND_FAST_RET_TO_FINALLY		317779						
ANR	317958	Symbol	finally_op_num		317779						
ANR	317959	Symbol	op_array -> try_catch_array [ i ] . catch_op		317779						
ANR	317960	Symbol	op_array -> opcodes [ op_num ] . op2 . opline_num		317779						
ANR	317961	Symbol	op_array -> try_catch_array		317779						
ANR	317962	Symbol	* * op_array		317779						
ANR	317963	Symbol	op_array		317779						
ANR	317964	Symbol	* op_array -> opcodes		317779						
ANR	317965	Function	zend_get_brk_cont_target	564:0:15927:16346							
ANR	317966	FunctionDef	"zend_get_brk_cont_target (const zend_op_array * op_array , const zend_op * opline)"		317965	0					
ANR	317967	CompoundStatement		564:95:16022:16346	317965	0					
ANR	317968	IdentifierDeclStatement	int nest_levels = opline -> op2 . num ;	565:1:16025:16058	317965	0	True				
ANR	317969	IdentifierDecl	nest_levels = opline -> op2 . num		317965	0					
ANR	317970	IdentifierDeclType	int		317965	0					
ANR	317971	Identifier	nest_levels		317965	1					
ANR	317972	AssignmentExpression	nest_levels = opline -> op2 . num		317965	2		=			
ANR	317973	Identifier	nest_levels		317965	0					
ANR	317974	MemberAccess	opline -> op2 . num		317965	1					
ANR	317975	PtrMemberAccess	opline -> op2		317965	0					
ANR	317976	Identifier	opline		317965	0					
ANR	317977	Identifier	op2		317965	1					
ANR	317978	Identifier	num		317965	1					
ANR	317979	IdentifierDeclStatement	int array_offset = opline -> op1 . num ;	566:1:16061:16095	317965	1	True				
ANR	317980	IdentifierDecl	array_offset = opline -> op1 . num		317965	0					
ANR	317981	IdentifierDeclType	int		317965	0					
ANR	317982	Identifier	array_offset		317965	1					
ANR	317983	AssignmentExpression	array_offset = opline -> op1 . num		317965	2		=			
ANR	317984	Identifier	array_offset		317965	0					
ANR	317985	MemberAccess	opline -> op1 . num		317965	1					
ANR	317986	PtrMemberAccess	opline -> op1		317965	0					
ANR	317987	Identifier	opline		317965	0					
ANR	317988	Identifier	op1		317965	1					
ANR	317989	Identifier	num		317965	1					
ANR	317990	IdentifierDeclStatement	zend_brk_cont_element * jmp_to ;	567:1:16098:16127	317965	2	True				
ANR	317991	IdentifierDecl	* jmp_to		317965	0					
ANR	317992	IdentifierDeclType	zend_brk_cont_element *		317965	0					
ANR	317993	Identifier	jmp_to		317965	1					
ANR	317994	DoStatement	do		317965	3					
ANR	317995	CompoundStatement		5:4:110:110	317965	0					
ANR	317996	ExpressionStatement	jmp_to = & op_array -> brk_cont_array [ array_offset ]	569:2:16137:16185	317965	0	True				
ANR	317997	AssignmentExpression	jmp_to = & op_array -> brk_cont_array [ array_offset ]		317965	0		=			
ANR	317998	Identifier	jmp_to		317965	0					
ANR	317999	UnaryOperationExpression	& op_array -> brk_cont_array [ array_offset ]		317965	1					
ANR	318000	UnaryOperator	&		317965	0					
ANR	318001	ArrayIndexing	op_array -> brk_cont_array [ array_offset ]		317965	1					
ANR	318002	PtrMemberAccess	op_array -> brk_cont_array		317965	0					
ANR	318003	Identifier	op_array		317965	0					
ANR	318004	Identifier	brk_cont_array		317965	1					
ANR	318005	Identifier	array_offset		317965	1					
ANR	318006	IfStatement	if ( nest_levels > 1 )		317965	1					
ANR	318007	Condition	nest_levels > 1	570:6:16193:16207	317965	0	True				
ANR	318008	RelationalExpression	nest_levels > 1		317965	0		>			
ANR	318009	Identifier	nest_levels		317965	0					
ANR	318010	PrimaryExpression	1		317965	1					
ANR	318011	CompoundStatement		7:23:187:187	317965	1					
ANR	318012	ExpressionStatement	array_offset = jmp_to -> parent	571:3:16215:16244	317965	0	True				
ANR	318013	AssignmentExpression	array_offset = jmp_to -> parent		317965	0		=			
ANR	318014	Identifier	array_offset		317965	0					
ANR	318015	PtrMemberAccess	jmp_to -> parent		317965	1					
ANR	318016	Identifier	jmp_to		317965	0					
ANR	318017	Identifier	parent		317965	1					
ANR	318018	Condition	-- nest_levels > 0	573:10:16260:16276	317965	1	True				
ANR	318019	RelationalExpression	-- nest_levels > 0		317965	0		>			
ANR	318020	UnaryExpression	-- nest_levels		317965	0					
ANR	318021	IncDec	--		317965	0					
ANR	318022	Identifier	nest_levels		317965	1					
ANR	318023	PrimaryExpression	0		317965	1					
ANR	318024	ReturnStatement	return opline -> opcode == ZEND_BRK ? jmp_to -> brk : jmp_to -> cont ;	575:1:16282:16344	317965	4	True				
ANR	318025	ConditionalExpression	opline -> opcode == ZEND_BRK ? jmp_to -> brk : jmp_to -> cont		317965	0					
ANR	318026	Condition	opline -> opcode == ZEND_BRK		317965	0					
ANR	318027	EqualityExpression	opline -> opcode == ZEND_BRK		317965	0		==			
ANR	318028	PtrMemberAccess	opline -> opcode		317965	0					
ANR	318029	Identifier	opline		317965	0					
ANR	318030	Identifier	opcode		317965	1					
ANR	318031	Identifier	ZEND_BRK		317965	1					
ANR	318032	PtrMemberAccess	jmp_to -> brk		317965	1					
ANR	318033	Identifier	jmp_to		317965	0					
ANR	318034	Identifier	brk		317965	1					
ANR	318035	PtrMemberAccess	jmp_to -> cont		317965	2					
ANR	318036	Identifier	jmp_to		317965	0					
ANR	318037	Identifier	cont		317965	1					
ANR	318038	ReturnType	static uint32_t		317965	1					
ANR	318039	Identifier	zend_get_brk_cont_target		317965	2					
ANR	318040	ParameterList	"const zend_op_array * op_array , const zend_op * opline"		317965	3					
ANR	318041	Parameter	const zend_op_array * op_array	564:41:15968:15996	317965	0	True				
ANR	318042	ParameterType	const zend_op_array *		317965	0					
ANR	318043	Identifier	op_array		317965	1					
ANR	318044	Parameter	const zend_op * opline	564:72:15999:16019	317965	1	True				
ANR	318045	ParameterType	const zend_op *		317965	0					
ANR	318046	Identifier	opline		317965	1					
ANR	318047	CFGEntryNode	ENTRY		317965		True				
ANR	318048	CFGExitNode	EXIT		317965		True				
ANR	318049	Symbol	opline -> op1		317965						
ANR	318050	Symbol	opline -> op2		317965						
ANR	318051	Symbol	opline -> op2 . num		317965						
ANR	318052	Symbol	ZEND_BRK		317965						
ANR	318053	Symbol	array_offset		317965						
ANR	318054	Symbol	jmp_to -> cont		317965						
ANR	318055	Symbol	* jmp_to		317965						
ANR	318056	Symbol	* op_array		317965						
ANR	318057	Symbol	nest_levels		317965						
ANR	318058	Symbol	op_array -> brk_cont_array		317965						
ANR	318059	Symbol	opline		317965						
ANR	318060	Symbol	* opline		317965						
ANR	318061	Symbol	jmp_to -> parent		317965						
ANR	318062	Symbol	opline -> opcode		317965						
ANR	318063	Symbol	opline -> op1 . num		317965						
ANR	318064	Symbol	jmp_to		317965						
ANR	318065	Symbol	jmp_to -> brk		317965						
ANR	318066	Symbol	op_array		317965						
ANR	318067	Function	pass_two	578:0:16349:21039							
ANR	318068	FunctionDef	pass_two (zend_op_array * op_array)		318067	0					
ANR	318069	CompoundStatement		579:0:16396:21039	318067	0					
ANR	318070	IdentifierDeclStatement	"zend_op * opline , * end ;"	580:1:16399:16420	318067	0	True				
ANR	318071	IdentifierDecl	* opline		318067	0					
ANR	318072	IdentifierDeclType	zend_op *		318067	0					
ANR	318073	Identifier	opline		318067	1					
ANR	318074	IdentifierDecl	* end		318067	1					
ANR	318075	IdentifierDeclType	zend_op *		318067	0					
ANR	318076	Identifier	end		318067	1					
ANR	318077	IfStatement	if ( ! ZEND_USER_CODE ( op_array -> type ) )		318067	1					
ANR	318078	Condition	! ZEND_USER_CODE ( op_array -> type )	582:5:16428:16458	318067	0	True				
ANR	318079	UnaryOperationExpression	! ZEND_USER_CODE ( op_array -> type )		318067	0					
ANR	318080	UnaryOperator	!		318067	0					
ANR	318081	CallExpression	ZEND_USER_CODE ( op_array -> type )		318067	1					
ANR	318082	Callee	ZEND_USER_CODE		318067	0					
ANR	318083	Identifier	ZEND_USER_CODE		318067	0					
ANR	318084	ArgumentList	op_array -> type		318067	1					
ANR	318085	Argument	op_array -> type		318067	0					
ANR	318086	PtrMemberAccess	op_array -> type		318067	0					
ANR	318087	Identifier	op_array		318067	0					
ANR	318088	Identifier	type		318067	1					
ANR	318089	CompoundStatement		4:38:64:64	318067	1					
ANR	318090	ReturnStatement	return 0 ;	583:2:16465:16473	318067	0	True				
ANR	318091	PrimaryExpression	0		318067	0					
ANR	318092	IfStatement	if ( CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO )		318067	2					
ANR	318093	Condition	CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO	585:5:16483:16531	318067	0	True				
ANR	318094	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_EXTENDED_INFO		318067	0		&			
ANR	318095	CallExpression	CG ( compiler_options )		318067	0					
ANR	318096	Callee	CG		318067	0					
ANR	318097	Identifier	CG		318067	0					
ANR	318098	ArgumentList	compiler_options		318067	1					
ANR	318099	Argument	compiler_options		318067	0					
ANR	318100	Identifier	compiler_options		318067	0					
ANR	318101	Identifier	ZEND_COMPILE_EXTENDED_INFO		318067	1					
ANR	318102	CompoundStatement		7:56:137:137	318067	1					
ANR	318103	ExpressionStatement	zend_update_extended_info ( op_array )	586:2:16538:16573	318067	0	True				
ANR	318104	CallExpression	zend_update_extended_info ( op_array )		318067	0					
ANR	318105	Callee	zend_update_extended_info		318067	0					
ANR	318106	Identifier	zend_update_extended_info		318067	0					
ANR	318107	ArgumentList	op_array		318067	1					
ANR	318108	Argument	op_array		318067	0					
ANR	318109	Identifier	op_array		318067	0					
ANR	318110	IfStatement	if ( CG ( compiler_options ) & ZEND_COMPILE_HANDLE_OP_ARRAY )		318067	3					
ANR	318111	Condition	CG ( compiler_options ) & ZEND_COMPILE_HANDLE_OP_ARRAY	588:5:16583:16633	318067	0	True				
ANR	318112	BitAndExpression	CG ( compiler_options ) & ZEND_COMPILE_HANDLE_OP_ARRAY		318067	0		&			
ANR	318113	CallExpression	CG ( compiler_options )		318067	0					
ANR	318114	Callee	CG		318067	0					
ANR	318115	Identifier	CG		318067	0					
ANR	318116	ArgumentList	compiler_options		318067	1					
ANR	318117	Argument	compiler_options		318067	0					
ANR	318118	Identifier	compiler_options		318067	0					
ANR	318119	Identifier	ZEND_COMPILE_HANDLE_OP_ARRAY		318067	1					
ANR	318120	CompoundStatement		10:58:239:239	318067	1					
ANR	318121	IfStatement	if ( zend_extension_flags & ZEND_EXTENSIONS_HAVE_OP_ARRAY_PERSIST )		318067	0					
ANR	318122	Condition	zend_extension_flags & ZEND_EXTENSIONS_HAVE_OP_ARRAY_PERSIST	589:6:16644:16703	318067	0	True				
ANR	318123	BitAndExpression	zend_extension_flags & ZEND_EXTENSIONS_HAVE_OP_ARRAY_PERSIST		318067	0		&			
ANR	318124	Identifier	zend_extension_flags		318067	0					
ANR	318125	Identifier	ZEND_EXTENSIONS_HAVE_OP_ARRAY_PERSIST		318067	1					
ANR	318126	CompoundStatement		11:68:309:309	318067	1					
ANR	318127	ExpressionStatement	"zend_llist_apply_with_argument ( & zend_extensions , ( llist_apply_with_arg_func_t ) zend_extension_op_array_handler , op_array )"	590:3:16711:16832	318067	0	True				
ANR	318128	CallExpression	"zend_llist_apply_with_argument ( & zend_extensions , ( llist_apply_with_arg_func_t ) zend_extension_op_array_handler , op_array )"		318067	0					
ANR	318129	Callee	zend_llist_apply_with_argument		318067	0					
ANR	318130	Identifier	zend_llist_apply_with_argument		318067	0					
ANR	318131	ArgumentList	& zend_extensions		318067	1					
ANR	318132	Argument	& zend_extensions		318067	0					
ANR	318133	UnaryOperationExpression	& zend_extensions		318067	0					
ANR	318134	UnaryOperator	&		318067	0					
ANR	318135	Identifier	zend_extensions		318067	1					
ANR	318136	Argument	( llist_apply_with_arg_func_t ) zend_extension_op_array_handler		318067	1					
ANR	318137	CastExpression	( llist_apply_with_arg_func_t ) zend_extension_op_array_handler		318067	0					
ANR	318138	CastTarget	llist_apply_with_arg_func_t		318067	0					
ANR	318139	Identifier	zend_extension_op_array_handler		318067	1					
ANR	318140	Argument	op_array		318067	2					
ANR	318141	Identifier	op_array		318067	0					
ANR	318142	IfStatement	if ( CG ( context ) . vars_size != op_array -> last_var )		318067	4					
ANR	318143	Condition	CG ( context ) . vars_size != op_array -> last_var	594:5:16847:16889	318067	0	True				
ANR	318144	EqualityExpression	CG ( context ) . vars_size != op_array -> last_var		318067	0		!=			
ANR	318145	MemberAccess	CG ( context ) . vars_size		318067	0					
ANR	318146	CallExpression	CG ( context )		318067	0					
ANR	318147	Callee	CG		318067	0					
ANR	318148	Identifier	CG		318067	0					
ANR	318149	ArgumentList	context		318067	1					
ANR	318150	Argument	context		318067	0					
ANR	318151	Identifier	context		318067	0					
ANR	318152	Identifier	vars_size		318067	1					
ANR	318153	PtrMemberAccess	op_array -> last_var		318067	1					
ANR	318154	Identifier	op_array		318067	0					
ANR	318155	Identifier	last_var		318067	1					
ANR	318156	CompoundStatement		16:50:495:495	318067	1					
ANR	318157	ExpressionStatement	"op_array -> vars = ( zend_string * * ) erealloc ( op_array -> vars , sizeof ( zend_string * ) * op_array -> last_var )"	595:2:16896:16994	318067	0	True				
ANR	318158	AssignmentExpression	"op_array -> vars = ( zend_string * * ) erealloc ( op_array -> vars , sizeof ( zend_string * ) * op_array -> last_var )"		318067	0		=			
ANR	318159	PtrMemberAccess	op_array -> vars		318067	0					
ANR	318160	Identifier	op_array		318067	0					
ANR	318161	Identifier	vars		318067	1					
ANR	318162	CastExpression	"( zend_string * * ) erealloc ( op_array -> vars , sizeof ( zend_string * ) * op_array -> last_var )"		318067	1					
ANR	318163	CastTarget	zend_string * *		318067	0					
ANR	318164	CallExpression	"erealloc ( op_array -> vars , sizeof ( zend_string * ) * op_array -> last_var )"		318067	1					
ANR	318165	Callee	erealloc		318067	0					
ANR	318166	Identifier	erealloc		318067	0					
ANR	318167	ArgumentList	op_array -> vars		318067	1					
ANR	318168	Argument	op_array -> vars		318067	0					
ANR	318169	PtrMemberAccess	op_array -> vars		318067	0					
ANR	318170	Identifier	op_array		318067	0					
ANR	318171	Identifier	vars		318067	1					
ANR	318172	Argument	sizeof ( zend_string * ) * op_array -> last_var		318067	1					
ANR	318173	MultiplicativeExpression	sizeof ( zend_string * ) * op_array -> last_var		318067	0		*			
ANR	318174	SizeofExpression	sizeof ( zend_string * )		318067	0					
ANR	318175	Sizeof	sizeof		318067	0					
ANR	318176	SizeofOperand	zend_string *		318067	1					
ANR	318177	PtrMemberAccess	op_array -> last_var		318067	1					
ANR	318178	Identifier	op_array		318067	0					
ANR	318179	Identifier	last_var		318067	1					
ANR	318180	ExpressionStatement	CG ( context ) . vars_size = op_array -> last_var	596:2:16998:17040	318067	1	True				
ANR	318181	AssignmentExpression	CG ( context ) . vars_size = op_array -> last_var		318067	0		=			
ANR	318182	MemberAccess	CG ( context ) . vars_size		318067	0					
ANR	318183	CallExpression	CG ( context )		318067	0					
ANR	318184	Callee	CG		318067	0					
ANR	318185	Identifier	CG		318067	0					
ANR	318186	ArgumentList	context		318067	1					
ANR	318187	Argument	context		318067	0					
ANR	318188	Identifier	context		318067	0					
ANR	318189	Identifier	vars_size		318067	1					
ANR	318190	PtrMemberAccess	op_array -> last_var		318067	1					
ANR	318191	Identifier	op_array		318067	0					
ANR	318192	Identifier	last_var		318067	1					
ANR	318193	IfStatement	if ( CG ( context ) . opcodes_size != op_array -> last )		318067	5					
ANR	318194	Condition	CG ( context ) . opcodes_size != op_array -> last	598:5:17050:17091	318067	0	True				
ANR	318195	EqualityExpression	CG ( context ) . opcodes_size != op_array -> last		318067	0		!=			
ANR	318196	MemberAccess	CG ( context ) . opcodes_size		318067	0					
ANR	318197	CallExpression	CG ( context )		318067	0					
ANR	318198	Callee	CG		318067	0					
ANR	318199	Identifier	CG		318067	0					
ANR	318200	ArgumentList	context		318067	1					
ANR	318201	Argument	context		318067	0					
ANR	318202	Identifier	context		318067	0					
ANR	318203	Identifier	opcodes_size		318067	1					
ANR	318204	PtrMemberAccess	op_array -> last		318067	1					
ANR	318205	Identifier	op_array		318067	0					
ANR	318206	Identifier	last		318067	1					
ANR	318207	CompoundStatement		20:49:697:697	318067	1					
ANR	318208	ExpressionStatement	"op_array -> opcodes = ( zend_op * ) erealloc ( op_array -> opcodes , sizeof ( zend_op ) * op_array -> last )"	599:2:17098:17189	318067	0	True				
ANR	318209	AssignmentExpression	"op_array -> opcodes = ( zend_op * ) erealloc ( op_array -> opcodes , sizeof ( zend_op ) * op_array -> last )"		318067	0		=			
ANR	318210	PtrMemberAccess	op_array -> opcodes		318067	0					
ANR	318211	Identifier	op_array		318067	0					
ANR	318212	Identifier	opcodes		318067	1					
ANR	318213	CastExpression	"( zend_op * ) erealloc ( op_array -> opcodes , sizeof ( zend_op ) * op_array -> last )"		318067	1					
ANR	318214	CastTarget	zend_op *		318067	0					
ANR	318215	CallExpression	"erealloc ( op_array -> opcodes , sizeof ( zend_op ) * op_array -> last )"		318067	1					
ANR	318216	Callee	erealloc		318067	0					
ANR	318217	Identifier	erealloc		318067	0					
ANR	318218	ArgumentList	op_array -> opcodes		318067	1					
ANR	318219	Argument	op_array -> opcodes		318067	0					
ANR	318220	PtrMemberAccess	op_array -> opcodes		318067	0					
ANR	318221	Identifier	op_array		318067	0					
ANR	318222	Identifier	opcodes		318067	1					
ANR	318223	Argument	sizeof ( zend_op ) * op_array -> last		318067	1					
ANR	318224	MultiplicativeExpression	sizeof ( zend_op ) * op_array -> last		318067	0		*			
ANR	318225	SizeofExpression	sizeof ( zend_op )		318067	0					
ANR	318226	Sizeof	sizeof		318067	0					
ANR	318227	SizeofOperand	zend_op		318067	1					
ANR	318228	PtrMemberAccess	op_array -> last		318067	1					
ANR	318229	Identifier	op_array		318067	0					
ANR	318230	Identifier	last		318067	1					
ANR	318231	ExpressionStatement	CG ( context ) . opcodes_size = op_array -> last	600:2:17193:17234	318067	1	True				
ANR	318232	AssignmentExpression	CG ( context ) . opcodes_size = op_array -> last		318067	0		=			
ANR	318233	MemberAccess	CG ( context ) . opcodes_size		318067	0					
ANR	318234	CallExpression	CG ( context )		318067	0					
ANR	318235	Callee	CG		318067	0					
ANR	318236	Identifier	CG		318067	0					
ANR	318237	ArgumentList	context		318067	1					
ANR	318238	Argument	context		318067	0					
ANR	318239	Identifier	context		318067	0					
ANR	318240	Identifier	opcodes_size		318067	1					
ANR	318241	PtrMemberAccess	op_array -> last		318067	1					
ANR	318242	Identifier	op_array		318067	0					
ANR	318243	Identifier	last		318067	1					
ANR	318244	IfStatement	if ( CG ( context ) . literals_size != op_array -> last_literal )		318067	6					
ANR	318245	Condition	CG ( context ) . literals_size != op_array -> last_literal	602:5:17244:17294	318067	0	True				
ANR	318246	EqualityExpression	CG ( context ) . literals_size != op_array -> last_literal		318067	0		!=			
ANR	318247	MemberAccess	CG ( context ) . literals_size		318067	0					
ANR	318248	CallExpression	CG ( context )		318067	0					
ANR	318249	Callee	CG		318067	0					
ANR	318250	Identifier	CG		318067	0					
ANR	318251	ArgumentList	context		318067	1					
ANR	318252	Argument	context		318067	0					
ANR	318253	Identifier	context		318067	0					
ANR	318254	Identifier	literals_size		318067	1					
ANR	318255	PtrMemberAccess	op_array -> last_literal		318067	1					
ANR	318256	Identifier	op_array		318067	0					
ANR	318257	Identifier	last_literal		318067	1					
ANR	318258	CompoundStatement		24:58:900:900	318067	1					
ANR	318259	ExpressionStatement	"op_array -> literals = ( zval * ) erealloc ( op_array -> literals , sizeof ( zval ) * op_array -> last_literal )"	603:2:17301:17396	318067	0	True				
ANR	318260	AssignmentExpression	"op_array -> literals = ( zval * ) erealloc ( op_array -> literals , sizeof ( zval ) * op_array -> last_literal )"		318067	0		=			
ANR	318261	PtrMemberAccess	op_array -> literals		318067	0					
ANR	318262	Identifier	op_array		318067	0					
ANR	318263	Identifier	literals		318067	1					
ANR	318264	CastExpression	"( zval * ) erealloc ( op_array -> literals , sizeof ( zval ) * op_array -> last_literal )"		318067	1					
ANR	318265	CastTarget	zval *		318067	0					
ANR	318266	CallExpression	"erealloc ( op_array -> literals , sizeof ( zval ) * op_array -> last_literal )"		318067	1					
ANR	318267	Callee	erealloc		318067	0					
ANR	318268	Identifier	erealloc		318067	0					
ANR	318269	ArgumentList	op_array -> literals		318067	1					
ANR	318270	Argument	op_array -> literals		318067	0					
ANR	318271	PtrMemberAccess	op_array -> literals		318067	0					
ANR	318272	Identifier	op_array		318067	0					
ANR	318273	Identifier	literals		318067	1					
ANR	318274	Argument	sizeof ( zval ) * op_array -> last_literal		318067	1					
ANR	318275	MultiplicativeExpression	sizeof ( zval ) * op_array -> last_literal		318067	0		*			
ANR	318276	SizeofExpression	sizeof ( zval )		318067	0					
ANR	318277	Sizeof	sizeof		318067	0					
ANR	318278	SizeofOperand	zval		318067	1					
ANR	318279	PtrMemberAccess	op_array -> last_literal		318067	1					
ANR	318280	Identifier	op_array		318067	0					
ANR	318281	Identifier	last_literal		318067	1					
ANR	318282	ExpressionStatement	CG ( context ) . literals_size = op_array -> last_literal	604:2:17400:17450	318067	1	True				
ANR	318283	AssignmentExpression	CG ( context ) . literals_size = op_array -> last_literal		318067	0		=			
ANR	318284	MemberAccess	CG ( context ) . literals_size		318067	0					
ANR	318285	CallExpression	CG ( context )		318067	0					
ANR	318286	Callee	CG		318067	0					
ANR	318287	Identifier	CG		318067	0					
ANR	318288	ArgumentList	context		318067	1					
ANR	318289	Argument	context		318067	0					
ANR	318290	Identifier	context		318067	0					
ANR	318291	Identifier	literals_size		318067	1					
ANR	318292	PtrMemberAccess	op_array -> last_literal		318067	1					
ANR	318293	Identifier	op_array		318067	0					
ANR	318294	Identifier	last_literal		318067	1					
ANR	318295	ExpressionStatement	opline = op_array -> opcodes	606:1:17456:17482	318067	7	True				
ANR	318296	AssignmentExpression	opline = op_array -> opcodes		318067	0		=			
ANR	318297	Identifier	opline		318067	0					
ANR	318298	PtrMemberAccess	op_array -> opcodes		318067	1					
ANR	318299	Identifier	op_array		318067	0					
ANR	318300	Identifier	opcodes		318067	1					
ANR	318301	ExpressionStatement	end = opline + op_array -> last	607:1:17485:17514	318067	8	True				
ANR	318302	AssignmentExpression	end = opline + op_array -> last		318067	0		=			
ANR	318303	Identifier	end		318067	0					
ANR	318304	AdditiveExpression	opline + op_array -> last		318067	1		+			
ANR	318305	Identifier	opline		318067	0					
ANR	318306	PtrMemberAccess	op_array -> last		318067	1					
ANR	318307	Identifier	op_array		318067	0					
ANR	318308	Identifier	last		318067	1					
ANR	318309	WhileStatement	while ( opline < end )		318067	9					
ANR	318310	Condition	opline < end	608:8:17524:17535	318067	0	True				
ANR	318311	RelationalExpression	opline < end		318067	0		<			
ANR	318312	Identifier	opline		318067	0					
ANR	318313	Identifier	end		318067	1					
ANR	318314	CompoundStatement		30:22:1141:1141	318067	1					
ANR	318315	SwitchStatement	switch ( opline -> opcode )		318067	0					
ANR	318316	Condition	opline -> opcode	609:10:17550:17563	318067	0	True				
ANR	318317	PtrMemberAccess	opline -> opcode		318067	0					
ANR	318318	Identifier	opline		318067	0					
ANR	318319	Identifier	opcode		318067	1					
ANR	318320	CompoundStatement		31:26:1169:1169	318067	1					
ANR	318321	Label	case ZEND_FAST_CALL :	610:3:17571:17590	318067	0	True				
ANR	318322	Identifier	ZEND_FAST_CALL		318067	0					
ANR	318323	ExpressionStatement	opline -> op1 . opline_num = op_array -> try_catch_array [ opline -> op1 . num ] . finally_op	611:4:17596:17674	318067	1	True				
ANR	318324	AssignmentExpression	opline -> op1 . opline_num = op_array -> try_catch_array [ opline -> op1 . num ] . finally_op		318067	0		=			
ANR	318325	MemberAccess	opline -> op1 . opline_num		318067	0					
ANR	318326	PtrMemberAccess	opline -> op1		318067	0					
ANR	318327	Identifier	opline		318067	0					
ANR	318328	Identifier	op1		318067	1					
ANR	318329	Identifier	opline_num		318067	1					
ANR	318330	MemberAccess	op_array -> try_catch_array [ opline -> op1 . num ] . finally_op		318067	1					
ANR	318331	ArrayIndexing	op_array -> try_catch_array [ opline -> op1 . num ]		318067	0					
ANR	318332	PtrMemberAccess	op_array -> try_catch_array		318067	0					
ANR	318333	Identifier	op_array		318067	0					
ANR	318334	Identifier	try_catch_array		318067	1					
ANR	318335	MemberAccess	opline -> op1 . num		318067	1					
ANR	318336	PtrMemberAccess	opline -> op1		318067	0					
ANR	318337	Identifier	opline		318067	0					
ANR	318338	Identifier	op1		318067	1					
ANR	318339	Identifier	num		318067	1					
ANR	318340	Identifier	finally_op		318067	1					
ANR	318341	ExpressionStatement	"zend_resolve_fast_call ( op_array , opline - op_array -> opcodes )"	612:4:17680:17740	318067	2	True				
ANR	318342	CallExpression	"zend_resolve_fast_call ( op_array , opline - op_array -> opcodes )"		318067	0					
ANR	318343	Callee	zend_resolve_fast_call		318067	0					
ANR	318344	Identifier	zend_resolve_fast_call		318067	0					
ANR	318345	ArgumentList	op_array		318067	1					
ANR	318346	Argument	op_array		318067	0					
ANR	318347	Identifier	op_array		318067	0					
ANR	318348	Argument	opline - op_array -> opcodes		318067	1					
ANR	318349	AdditiveExpression	opline - op_array -> opcodes		318067	0		-			
ANR	318350	Identifier	opline		318067	0					
ANR	318351	PtrMemberAccess	op_array -> opcodes		318067	1					
ANR	318352	Identifier	op_array		318067	0					
ANR	318353	Identifier	opcodes		318067	1					
ANR	318354	ExpressionStatement	"ZEND_PASS_TWO_UPDATE_JMP_TARGET ( op_array , opline , opline -> op1 )"	613:4:17746:17808	318067	3	True				
ANR	318355	CallExpression	"ZEND_PASS_TWO_UPDATE_JMP_TARGET ( op_array , opline , opline -> op1 )"		318067	0					
ANR	318356	Callee	ZEND_PASS_TWO_UPDATE_JMP_TARGET		318067	0					
ANR	318357	Identifier	ZEND_PASS_TWO_UPDATE_JMP_TARGET		318067	0					
ANR	318358	ArgumentList	op_array		318067	1					
ANR	318359	Argument	op_array		318067	0					
ANR	318360	Identifier	op_array		318067	0					
ANR	318361	Argument	opline		318067	1					
ANR	318362	Identifier	opline		318067	0					
ANR	318363	Argument	opline -> op1		318067	2					
ANR	318364	PtrMemberAccess	opline -> op1		318067	0					
ANR	318365	Identifier	opline		318067	0					
ANR	318366	Identifier	op1		318067	1					
ANR	318367	BreakStatement	break ;	614:4:17814:17819	318067	4	True				
ANR	318368	Label	case ZEND_FAST_RET :	615:3:17824:17842	318067	5	True				
ANR	318369	Identifier	ZEND_FAST_RET		318067	0					
ANR	318370	ExpressionStatement	"zend_resolve_finally_ret ( op_array , opline - op_array -> opcodes )"	616:4:17848:17910	318067	6	True				
ANR	318371	CallExpression	"zend_resolve_finally_ret ( op_array , opline - op_array -> opcodes )"		318067	0					
ANR	318372	Callee	zend_resolve_finally_ret		318067	0					
ANR	318373	Identifier	zend_resolve_finally_ret		318067	0					
ANR	318374	ArgumentList	op_array		318067	1					
ANR	318375	Argument	op_array		318067	0					
ANR	318376	Identifier	op_array		318067	0					
ANR	318377	Argument	opline - op_array -> opcodes		318067	1					
ANR	318378	AdditiveExpression	opline - op_array -> opcodes		318067	0		-			
ANR	318379	Identifier	opline		318067	0					
ANR	318380	PtrMemberAccess	op_array -> opcodes		318067	1					
ANR	318381	Identifier	op_array		318067	0					
ANR	318382	Identifier	opcodes		318067	1					
ANR	318383	BreakStatement	break ;	617:4:17916:17921	318067	7	True				
ANR	318384	Label	case ZEND_DECLARE_ANON_INHERITED_CLASS :	618:3:17926:17964	318067	8	True				
ANR	318385	Identifier	ZEND_DECLARE_ANON_INHERITED_CLASS		318067	0					
ANR	318386	ExpressionStatement	"ZEND_PASS_TWO_UPDATE_JMP_TARGET ( op_array , opline , opline -> op1 )"	619:4:17970:18032	318067	9	True				
ANR	318387	CallExpression	"ZEND_PASS_TWO_UPDATE_JMP_TARGET ( op_array , opline , opline -> op1 )"		318067	0					
ANR	318388	Callee	ZEND_PASS_TWO_UPDATE_JMP_TARGET		318067	0					
ANR	318389	Identifier	ZEND_PASS_TWO_UPDATE_JMP_TARGET		318067	0					
ANR	318390	ArgumentList	op_array		318067	1					
ANR	318391	Argument	op_array		318067	0					
ANR	318392	Identifier	op_array		318067	0					
ANR	318393	Argument	opline		318067	1					
ANR	318394	Identifier	opline		318067	0					
ANR	318395	Argument	opline -> op1		318067	2					
ANR	318396	PtrMemberAccess	opline -> op1		318067	0					
ANR	318397	Identifier	opline		318067	0					
ANR	318398	Identifier	op1		318067	1					
ANR	318399	Label	case ZEND_DECLARE_INHERITED_CLASS :	621:3:18075:18108	318067	10	True				
ANR	318400	Identifier	ZEND_DECLARE_INHERITED_CLASS		318067	0					
ANR	318401	Label	case ZEND_DECLARE_INHERITED_CLASS_DELAYED :	622:3:18113:18154	318067	11	True				
ANR	318402	Identifier	ZEND_DECLARE_INHERITED_CLASS_DELAYED		318067	0					
ANR	318403	ExpressionStatement	"opline -> extended_value = ( uint32_t ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> extended_value )"	623:4:18160:18278	318067	12	True				
ANR	318404	AssignmentExpression	"opline -> extended_value = ( uint32_t ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> extended_value )"		318067	0		=			
ANR	318405	PtrMemberAccess	opline -> extended_value		318067	0					
ANR	318406	Identifier	opline		318067	0					
ANR	318407	Identifier	extended_value		318067	1					
ANR	318408	CastExpression	"( uint32_t ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> extended_value )"		318067	1					
ANR	318409	CastTarget	uint32_t		318067	0					
ANR	318410	CastExpression	"( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> extended_value )"		318067	1					
ANR	318411	CastTarget	zend_intptr_t		318067	0					
ANR	318412	CallExpression	"ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> extended_value )"		318067	1					
ANR	318413	Callee	ZEND_CALL_VAR_NUM		318067	0					
ANR	318414	Identifier	ZEND_CALL_VAR_NUM		318067	0					
ANR	318415	ArgumentList	NULL		318067	1					
ANR	318416	Argument	NULL		318067	0					
ANR	318417	Identifier	NULL		318067	0					
ANR	318418	Argument	op_array -> last_var + opline -> extended_value		318067	1					
ANR	318419	AdditiveExpression	op_array -> last_var + opline -> extended_value		318067	0		+			
ANR	318420	PtrMemberAccess	op_array -> last_var		318067	0					
ANR	318421	Identifier	op_array		318067	0					
ANR	318422	Identifier	last_var		318067	1					
ANR	318423	PtrMemberAccess	opline -> extended_value		318067	1					
ANR	318424	Identifier	opline		318067	0					
ANR	318425	Identifier	extended_value		318067	1					
ANR	318426	BreakStatement	break ;	624:4:18284:18289	318067	13	True				
ANR	318427	Label	case ZEND_BRK :	625:3:18294:18307	318067	14	True				
ANR	318428	Identifier	ZEND_BRK		318067	0					
ANR	318429	Label	case ZEND_CONT :	626:3:18312:18326	318067	15	True				
ANR	318430	Identifier	ZEND_CONT		318067	0					
ANR	318431	CompoundStatement		50:5:1942:2006	318067	16					
ANR	318432	IdentifierDeclStatement	"uint32_t jmp_target = zend_get_brk_cont_target ( op_array , opline ) ;"	628:5:18339:18403	318067	0	True				
ANR	318433	IdentifierDecl	"jmp_target = zend_get_brk_cont_target ( op_array , opline )"		318067	0					
ANR	318434	IdentifierDeclType	uint32_t		318067	0					
ANR	318435	Identifier	jmp_target		318067	1					
ANR	318436	AssignmentExpression	"jmp_target = zend_get_brk_cont_target ( op_array , opline )"		318067	2		=			
ANR	318437	Identifier	jmp_target		318067	0					
ANR	318438	CallExpression	"zend_get_brk_cont_target ( op_array , opline )"		318067	1					
ANR	318439	Callee	zend_get_brk_cont_target		318067	0					
ANR	318440	Identifier	zend_get_brk_cont_target		318067	0					
ANR	318441	ArgumentList	op_array		318067	1					
ANR	318442	Argument	op_array		318067	0					
ANR	318443	Identifier	op_array		318067	0					
ANR	318444	Argument	opline		318067	1					
ANR	318445	Identifier	opline		318067	0					
ANR	318446	IfStatement	if ( op_array -> fn_flags & ZEND_ACC_HAS_FINALLY_BLOCK )		318067	1					
ANR	318447	Condition	op_array -> fn_flags & ZEND_ACC_HAS_FINALLY_BLOCK	630:9:18415:18461	318067	0	True				
ANR	318448	BitAndExpression	op_array -> fn_flags & ZEND_ACC_HAS_FINALLY_BLOCK		318067	0		&			
ANR	318449	PtrMemberAccess	op_array -> fn_flags		318067	0					
ANR	318450	Identifier	op_array		318067	0					
ANR	318451	Identifier	fn_flags		318067	1					
ANR	318452	Identifier	ZEND_ACC_HAS_FINALLY_BLOCK		318067	1					
ANR	318453	CompoundStatement		52:58:2067:2067	318067	1					
ANR	318454	ExpressionStatement	"zend_check_finally_breakout ( op_array , opline - op_array -> opcodes , jmp_target )"	631:6:18472:18549	318067	0	True				
ANR	318455	CallExpression	"zend_check_finally_breakout ( op_array , opline - op_array -> opcodes , jmp_target )"		318067	0					
ANR	318456	Callee	zend_check_finally_breakout		318067	0					
ANR	318457	Identifier	zend_check_finally_breakout		318067	0					
ANR	318458	ArgumentList	op_array		318067	1					
ANR	318459	Argument	op_array		318067	0					
ANR	318460	Identifier	op_array		318067	0					
ANR	318461	Argument	opline - op_array -> opcodes		318067	1					
ANR	318462	AdditiveExpression	opline - op_array -> opcodes		318067	0		-			
ANR	318463	Identifier	opline		318067	0					
ANR	318464	PtrMemberAccess	op_array -> opcodes		318067	1					
ANR	318465	Identifier	op_array		318067	0					
ANR	318466	Identifier	opcodes		318067	1					
ANR	318467	Argument	jmp_target		318067	2					
ANR	318468	Identifier	jmp_target		318067	0					
ANR	318469	ExpressionStatement	opline -> opcode = ZEND_JMP	633:5:18563:18588	318067	2	True				
ANR	318470	AssignmentExpression	opline -> opcode = ZEND_JMP		318067	0		=			
ANR	318471	PtrMemberAccess	opline -> opcode		318067	0					
ANR	318472	Identifier	opline		318067	0					
ANR	318473	Identifier	opcode		318067	1					
ANR	318474	Identifier	ZEND_JMP		318067	1					
ANR	318475	ExpressionStatement	opline -> op1 . opline_num = jmp_target	634:5:18595:18630	318067	3	True				
ANR	318476	AssignmentExpression	opline -> op1 . opline_num = jmp_target		318067	0		=			
ANR	318477	MemberAccess	opline -> op1 . opline_num		318067	0					
ANR	318478	PtrMemberAccess	opline -> op1		318067	0					
ANR	318479	Identifier	opline		318067	0					
ANR	318480	Identifier	op1		318067	1					
ANR	318481	Identifier	opline_num		318067	1					
ANR	318482	Identifier	jmp_target		318067	1					
ANR	318483	ExpressionStatement	opline -> op2 . num = 0	635:5:18637:18656	318067	4	True				
ANR	318484	AssignmentExpression	opline -> op2 . num = 0		318067	0		=			
ANR	318485	MemberAccess	opline -> op2 . num		318067	0					
ANR	318486	PtrMemberAccess	opline -> op2		318067	0					
ANR	318487	Identifier	opline		318067	0					
ANR	318488	Identifier	op2		318067	1					
ANR	318489	Identifier	num		318067	1					
ANR	318490	PrimaryExpression	0		318067	1					
ANR	318491	ExpressionStatement	"ZEND_PASS_TWO_UPDATE_JMP_TARGET ( op_array , opline , opline -> op1 )"	636:5:18663:18725	318067	5	True				
ANR	318492	CallExpression	"ZEND_PASS_TWO_UPDATE_JMP_TARGET ( op_array , opline , opline -> op1 )"		318067	0					
ANR	318493	Callee	ZEND_PASS_TWO_UPDATE_JMP_TARGET		318067	0					
ANR	318494	Identifier	ZEND_PASS_TWO_UPDATE_JMP_TARGET		318067	0					
ANR	318495	ArgumentList	op_array		318067	1					
ANR	318496	Argument	op_array		318067	0					
ANR	318497	Identifier	op_array		318067	0					
ANR	318498	Argument	opline		318067	1					
ANR	318499	Identifier	opline		318067	0					
ANR	318500	Argument	opline -> op1		318067	2					
ANR	318501	PtrMemberAccess	opline -> op1		318067	0					
ANR	318502	Identifier	opline		318067	0					
ANR	318503	Identifier	op1		318067	1					
ANR	318504	BreakStatement	break ;	638:4:18737:18742	318067	17	True				
ANR	318505	Label	case ZEND_GOTO :	639:3:18747:18761	318067	18	True				
ANR	318506	Identifier	ZEND_GOTO		318067	0					
ANR	318507	ExpressionStatement	"zend_resolve_goto_label ( op_array , opline )"	640:4:18767:18808	318067	19	True				
ANR	318508	CallExpression	"zend_resolve_goto_label ( op_array , opline )"		318067	0					
ANR	318509	Callee	zend_resolve_goto_label		318067	0					
ANR	318510	Identifier	zend_resolve_goto_label		318067	0					
ANR	318511	ArgumentList	op_array		318067	1					
ANR	318512	Argument	op_array		318067	0					
ANR	318513	Identifier	op_array		318067	0					
ANR	318514	Argument	opline		318067	1					
ANR	318515	Identifier	opline		318067	0					
ANR	318516	IfStatement	if ( op_array -> fn_flags & ZEND_ACC_HAS_FINALLY_BLOCK )		318067	20					
ANR	318517	Condition	op_array -> fn_flags & ZEND_ACC_HAS_FINALLY_BLOCK	641:8:18818:18864	318067	0	True				
ANR	318518	BitAndExpression	op_array -> fn_flags & ZEND_ACC_HAS_FINALLY_BLOCK		318067	0		&			
ANR	318519	PtrMemberAccess	op_array -> fn_flags		318067	0					
ANR	318520	Identifier	op_array		318067	0					
ANR	318521	Identifier	fn_flags		318067	1					
ANR	318522	Identifier	ZEND_ACC_HAS_FINALLY_BLOCK		318067	1					
ANR	318523	CompoundStatement		63:57:2470:2470	318067	1					
ANR	318524	ExpressionStatement	"zend_check_finally_breakout ( op_array , opline - op_array -> opcodes , opline -> op1 . opline_num )"	642:5:18874:18963	318067	0	True				
ANR	318525	CallExpression	"zend_check_finally_breakout ( op_array , opline - op_array -> opcodes , opline -> op1 . opline_num )"		318067	0					
ANR	318526	Callee	zend_check_finally_breakout		318067	0					
ANR	318527	Identifier	zend_check_finally_breakout		318067	0					
ANR	318528	ArgumentList	op_array		318067	1					
ANR	318529	Argument	op_array		318067	0					
ANR	318530	Identifier	op_array		318067	0					
ANR	318531	Argument	opline - op_array -> opcodes		318067	1					
ANR	318532	AdditiveExpression	opline - op_array -> opcodes		318067	0		-			
ANR	318533	Identifier	opline		318067	0					
ANR	318534	PtrMemberAccess	op_array -> opcodes		318067	1					
ANR	318535	Identifier	op_array		318067	0					
ANR	318536	Identifier	opcodes		318067	1					
ANR	318537	Argument	opline -> op1 . opline_num		318067	2					
ANR	318538	MemberAccess	opline -> op1 . opline_num		318067	0					
ANR	318539	PtrMemberAccess	opline -> op1		318067	0					
ANR	318540	Identifier	opline		318067	0					
ANR	318541	Identifier	op1		318067	1					
ANR	318542	Identifier	opline_num		318067	1					
ANR	318543	Label	case ZEND_JMP :	645:3:19012:19025	318067	21	True				
ANR	318544	Identifier	ZEND_JMP		318067	0					
ANR	318545	Label	case ZEND_DECLARE_ANON_CLASS :	646:3:19030:19058	318067	22	True				
ANR	318546	Identifier	ZEND_DECLARE_ANON_CLASS		318067	0					
ANR	318547	ExpressionStatement	"ZEND_PASS_TWO_UPDATE_JMP_TARGET ( op_array , opline , opline -> op1 )"	647:4:19064:19126	318067	23	True				
ANR	318548	CallExpression	"ZEND_PASS_TWO_UPDATE_JMP_TARGET ( op_array , opline , opline -> op1 )"		318067	0					
ANR	318549	Callee	ZEND_PASS_TWO_UPDATE_JMP_TARGET		318067	0					
ANR	318550	Identifier	ZEND_PASS_TWO_UPDATE_JMP_TARGET		318067	0					
ANR	318551	ArgumentList	op_array		318067	1					
ANR	318552	Argument	op_array		318067	0					
ANR	318553	Identifier	op_array		318067	0					
ANR	318554	Argument	opline		318067	1					
ANR	318555	Identifier	opline		318067	0					
ANR	318556	Argument	opline -> op1		318067	2					
ANR	318557	PtrMemberAccess	opline -> op1		318067	0					
ANR	318558	Identifier	opline		318067	0					
ANR	318559	Identifier	op1		318067	1					
ANR	318560	BreakStatement	break ;	648:4:19132:19137	318067	24	True				
ANR	318561	Label	case ZEND_JMPZNZ :	649:3:19142:19158	318067	25	True				
ANR	318562	Identifier	ZEND_JMPZNZ		318067	0					
ANR	318563	ExpressionStatement	"opline -> extended_value = ZEND_OPLINE_NUM_TO_OFFSET ( op_array , opline , opline -> extended_value )"	651:4:19208:19300	318067	26	True				
ANR	318564	AssignmentExpression	"opline -> extended_value = ZEND_OPLINE_NUM_TO_OFFSET ( op_array , opline , opline -> extended_value )"		318067	0		=			
ANR	318565	PtrMemberAccess	opline -> extended_value		318067	0					
ANR	318566	Identifier	opline		318067	0					
ANR	318567	Identifier	extended_value		318067	1					
ANR	318568	CallExpression	"ZEND_OPLINE_NUM_TO_OFFSET ( op_array , opline , opline -> extended_value )"		318067	1					
ANR	318569	Callee	ZEND_OPLINE_NUM_TO_OFFSET		318067	0					
ANR	318570	Identifier	ZEND_OPLINE_NUM_TO_OFFSET		318067	0					
ANR	318571	ArgumentList	op_array		318067	1					
ANR	318572	Argument	op_array		318067	0					
ANR	318573	Identifier	op_array		318067	0					
ANR	318574	Argument	opline		318067	1					
ANR	318575	Identifier	opline		318067	0					
ANR	318576	Argument	opline -> extended_value		318067	2					
ANR	318577	PtrMemberAccess	opline -> extended_value		318067	0					
ANR	318578	Identifier	opline		318067	0					
ANR	318579	Identifier	extended_value		318067	1					
ANR	318580	Label	case ZEND_JMPZ :	653:3:19343:19357	318067	27	True				
ANR	318581	Identifier	ZEND_JMPZ		318067	0					
ANR	318582	Label	case ZEND_JMPNZ :	654:3:19362:19377	318067	28	True				
ANR	318583	Identifier	ZEND_JMPNZ		318067	0					
ANR	318584	Label	case ZEND_JMPZ_EX :	655:3:19382:19399	318067	29	True				
ANR	318585	Identifier	ZEND_JMPZ_EX		318067	0					
ANR	318586	Label	case ZEND_JMPNZ_EX :	656:3:19404:19422	318067	30	True				
ANR	318587	Identifier	ZEND_JMPNZ_EX		318067	0					
ANR	318588	Label	case ZEND_JMP_SET :	657:3:19427:19444	318067	31	True				
ANR	318589	Identifier	ZEND_JMP_SET		318067	0					
ANR	318590	Label	case ZEND_COALESCE :	658:3:19449:19467	318067	32	True				
ANR	318591	Identifier	ZEND_COALESCE		318067	0					
ANR	318592	Label	case ZEND_NEW :	659:3:19472:19485	318067	33	True				
ANR	318593	Identifier	ZEND_NEW		318067	0					
ANR	318594	Label	case ZEND_FE_RESET_R :	660:3:19490:19510	318067	34	True				
ANR	318595	Identifier	ZEND_FE_RESET_R		318067	0					
ANR	318596	Label	case ZEND_FE_RESET_RW :	661:3:19515:19536	318067	35	True				
ANR	318597	Identifier	ZEND_FE_RESET_RW		318067	0					
ANR	318598	Label	case ZEND_ASSERT_CHECK :	662:3:19541:19563	318067	36	True				
ANR	318599	Identifier	ZEND_ASSERT_CHECK		318067	0					
ANR	318600	ExpressionStatement	"ZEND_PASS_TWO_UPDATE_JMP_TARGET ( op_array , opline , opline -> op2 )"	663:4:19569:19631	318067	37	True				
ANR	318601	CallExpression	"ZEND_PASS_TWO_UPDATE_JMP_TARGET ( op_array , opline , opline -> op2 )"		318067	0					
ANR	318602	Callee	ZEND_PASS_TWO_UPDATE_JMP_TARGET		318067	0					
ANR	318603	Identifier	ZEND_PASS_TWO_UPDATE_JMP_TARGET		318067	0					
ANR	318604	ArgumentList	op_array		318067	1					
ANR	318605	Argument	op_array		318067	0					
ANR	318606	Identifier	op_array		318067	0					
ANR	318607	Argument	opline		318067	1					
ANR	318608	Identifier	opline		318067	0					
ANR	318609	Argument	opline -> op2		318067	2					
ANR	318610	PtrMemberAccess	opline -> op2		318067	0					
ANR	318611	Identifier	opline		318067	0					
ANR	318612	Identifier	op2		318067	1					
ANR	318613	BreakStatement	break ;	664:4:19637:19642	318067	38	True				
ANR	318614	Label	case ZEND_FE_FETCH_R :	665:3:19647:19667	318067	39	True				
ANR	318615	Identifier	ZEND_FE_FETCH_R		318067	0					
ANR	318616	Label	case ZEND_FE_FETCH_RW :	666:3:19672:19693	318067	40	True				
ANR	318617	Identifier	ZEND_FE_FETCH_RW		318067	0					
ANR	318618	ExpressionStatement	"opline -> extended_value = ZEND_OPLINE_NUM_TO_OFFSET ( op_array , opline , opline -> extended_value )"	667:4:19699:19791	318067	41	True				
ANR	318619	AssignmentExpression	"opline -> extended_value = ZEND_OPLINE_NUM_TO_OFFSET ( op_array , opline , opline -> extended_value )"		318067	0		=			
ANR	318620	PtrMemberAccess	opline -> extended_value		318067	0					
ANR	318621	Identifier	opline		318067	0					
ANR	318622	Identifier	extended_value		318067	1					
ANR	318623	CallExpression	"ZEND_OPLINE_NUM_TO_OFFSET ( op_array , opline , opline -> extended_value )"		318067	1					
ANR	318624	Callee	ZEND_OPLINE_NUM_TO_OFFSET		318067	0					
ANR	318625	Identifier	ZEND_OPLINE_NUM_TO_OFFSET		318067	0					
ANR	318626	ArgumentList	op_array		318067	1					
ANR	318627	Argument	op_array		318067	0					
ANR	318628	Identifier	op_array		318067	0					
ANR	318629	Argument	opline		318067	1					
ANR	318630	Identifier	opline		318067	0					
ANR	318631	Argument	opline -> extended_value		318067	2					
ANR	318632	PtrMemberAccess	opline -> extended_value		318067	0					
ANR	318633	Identifier	opline		318067	0					
ANR	318634	Identifier	extended_value		318067	1					
ANR	318635	BreakStatement	break ;	668:4:19797:19802	318067	42	True				
ANR	318636	Label	case ZEND_VERIFY_RETURN_TYPE :	669:3:19807:19835	318067	43	True				
ANR	318637	Identifier	ZEND_VERIFY_RETURN_TYPE		318067	0					
ANR	318638	IfStatement	if ( op_array -> fn_flags & ZEND_ACC_GENERATOR )		318067	44					
ANR	318639	Condition	op_array -> fn_flags & ZEND_ACC_GENERATOR	670:8:19845:19883	318067	0	True				
ANR	318640	BitAndExpression	op_array -> fn_flags & ZEND_ACC_GENERATOR		318067	0		&			
ANR	318641	PtrMemberAccess	op_array -> fn_flags		318067	0					
ANR	318642	Identifier	op_array		318067	0					
ANR	318643	Identifier	fn_flags		318067	1					
ANR	318644	Identifier	ZEND_ACC_GENERATOR		318067	1					
ANR	318645	CompoundStatement		92:49:3489:3489	318067	1					
ANR	318646	IfStatement	if ( opline -> op1_type != IS_UNUSED )		318067	0					
ANR	318647	Condition	opline -> op1_type != IS_UNUSED	671:9:19897:19925	318067	0	True				
ANR	318648	EqualityExpression	opline -> op1_type != IS_UNUSED		318067	0		!=			
ANR	318649	PtrMemberAccess	opline -> op1_type		318067	0					
ANR	318650	Identifier	opline		318067	0					
ANR	318651	Identifier	op1_type		318067	1					
ANR	318652	Identifier	IS_UNUSED		318067	1					
ANR	318653	CompoundStatement		93:40:3531:3531	318067	1					
ANR	318654	ExpressionStatement	( opline + 1 ) -> op1 = opline -> op1	672:6:19936:19967	318067	0	True				
ANR	318655	AssignmentExpression	( opline + 1 ) -> op1 = opline -> op1		318067	0		=			
ANR	318656	PtrMemberAccess	( opline + 1 ) -> op1		318067	0					
ANR	318657	AdditiveExpression	opline + 1		318067	0		+			
ANR	318658	Identifier	opline		318067	0					
ANR	318659	PrimaryExpression	1		318067	1					
ANR	318660	Identifier	op1		318067	1					
ANR	318661	PtrMemberAccess	opline -> op1		318067	1					
ANR	318662	Identifier	opline		318067	0					
ANR	318663	Identifier	op1		318067	1					
ANR	318664	ExpressionStatement	( opline + 1 ) -> op1_type = opline -> op1_type	673:6:19975:20016	318067	1	True				
ANR	318665	AssignmentExpression	( opline + 1 ) -> op1_type = opline -> op1_type		318067	0		=			
ANR	318666	PtrMemberAccess	( opline + 1 ) -> op1_type		318067	0					
ANR	318667	AdditiveExpression	opline + 1		318067	0		+			
ANR	318668	Identifier	opline		318067	0					
ANR	318669	PrimaryExpression	1		318067	1					
ANR	318670	Identifier	op1_type		318067	1					
ANR	318671	PtrMemberAccess	opline -> op1_type		318067	1					
ANR	318672	Identifier	opline		318067	0					
ANR	318673	Identifier	op1_type		318067	1					
ANR	318674	ExpressionStatement	MAKE_NOP ( opline )	675:5:20030:20046	318067	1	True				
ANR	318675	CallExpression	MAKE_NOP ( opline )		318067	0					
ANR	318676	Callee	MAKE_NOP		318067	0					
ANR	318677	Identifier	MAKE_NOP		318067	0					
ANR	318678	ArgumentList	opline		318067	1					
ANR	318679	Argument	opline		318067	0					
ANR	318680	Identifier	opline		318067	0					
ANR	318681	BreakStatement	break ;	677:4:20058:20063	318067	45	True				
ANR	318682	Label	case ZEND_RETURN :	678:3:20068:20084	318067	46	True				
ANR	318683	Identifier	ZEND_RETURN		318067	0					
ANR	318684	Label	case ZEND_RETURN_BY_REF :	679:3:20089:20112	318067	47	True				
ANR	318685	Identifier	ZEND_RETURN_BY_REF		318067	0					
ANR	318686	IfStatement	if ( op_array -> fn_flags & ZEND_ACC_GENERATOR )		318067	48					
ANR	318687	Condition	op_array -> fn_flags & ZEND_ACC_GENERATOR	680:8:20122:20160	318067	0	True				
ANR	318688	BitAndExpression	op_array -> fn_flags & ZEND_ACC_GENERATOR		318067	0		&			
ANR	318689	PtrMemberAccess	op_array -> fn_flags		318067	0					
ANR	318690	Identifier	op_array		318067	0					
ANR	318691	Identifier	fn_flags		318067	1					
ANR	318692	Identifier	ZEND_ACC_GENERATOR		318067	1					
ANR	318693	CompoundStatement		102:49:3766:3766	318067	1					
ANR	318694	ExpressionStatement	opline -> opcode = ZEND_GENERATOR_RETURN	681:5:20170:20208	318067	0	True				
ANR	318695	AssignmentExpression	opline -> opcode = ZEND_GENERATOR_RETURN		318067	0		=			
ANR	318696	PtrMemberAccess	opline -> opcode		318067	0					
ANR	318697	Identifier	opline		318067	0					
ANR	318698	Identifier	opcode		318067	1					
ANR	318699	Identifier	ZEND_GENERATOR_RETURN		318067	1					
ANR	318700	BreakStatement	break ;	683:4:20220:20225	318067	49	True				
ANR	318701	IfStatement	if ( opline -> op1_type == IS_CONST )		318067	1					
ANR	318702	Condition	opline -> op1_type == IS_CONST	685:6:20237:20264	318067	0	True				
ANR	318703	EqualityExpression	opline -> op1_type == IS_CONST		318067	0		==			
ANR	318704	PtrMemberAccess	opline -> op1_type		318067	0					
ANR	318705	Identifier	opline		318067	0					
ANR	318706	Identifier	op1_type		318067	1					
ANR	318707	Identifier	IS_CONST		318067	1					
ANR	318708	CompoundStatement		107:36:3870:3870	318067	1					
ANR	318709	ExpressionStatement	"ZEND_PASS_TWO_UPDATE_CONSTANT ( op_array , opline -> op1 )"	686:3:20272:20324	318067	0	True				
ANR	318710	CallExpression	"ZEND_PASS_TWO_UPDATE_CONSTANT ( op_array , opline -> op1 )"		318067	0					
ANR	318711	Callee	ZEND_PASS_TWO_UPDATE_CONSTANT		318067	0					
ANR	318712	Identifier	ZEND_PASS_TWO_UPDATE_CONSTANT		318067	0					
ANR	318713	ArgumentList	op_array		318067	1					
ANR	318714	Argument	op_array		318067	0					
ANR	318715	Identifier	op_array		318067	0					
ANR	318716	Argument	opline -> op1		318067	1					
ANR	318717	PtrMemberAccess	opline -> op1		318067	0					
ANR	318718	Identifier	opline		318067	0					
ANR	318719	Identifier	op1		318067	1					
ANR	318720	ElseStatement	else		318067	0					
ANR	318721	IfStatement	if ( opline -> op1_type & ( IS_VAR | IS_TMP_VAR ) )		318067	0					
ANR	318722	Condition	opline -> op1_type & ( IS_VAR | IS_TMP_VAR )	687:13:20339:20376	318067	0	True				
ANR	318723	BitAndExpression	opline -> op1_type & ( IS_VAR | IS_TMP_VAR )		318067	0		&			
ANR	318724	PtrMemberAccess	opline -> op1_type		318067	0					
ANR	318725	Identifier	opline		318067	0					
ANR	318726	Identifier	op1_type		318067	1					
ANR	318727	InclusiveOrExpression	IS_VAR | IS_TMP_VAR		318067	1		|			
ANR	318728	Identifier	IS_VAR		318067	0					
ANR	318729	Identifier	IS_TMP_VAR		318067	1					
ANR	318730	CompoundStatement		109:53:3982:3982	318067	1					
ANR	318731	ExpressionStatement	"opline -> op1 . var = ( uint32_t ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> op1 . var )"	688:3:20384:20488	318067	0	True				
ANR	318732	AssignmentExpression	"opline -> op1 . var = ( uint32_t ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> op1 . var )"		318067	0		=			
ANR	318733	MemberAccess	opline -> op1 . var		318067	0					
ANR	318734	PtrMemberAccess	opline -> op1		318067	0					
ANR	318735	Identifier	opline		318067	0					
ANR	318736	Identifier	op1		318067	1					
ANR	318737	Identifier	var		318067	1					
ANR	318738	CastExpression	"( uint32_t ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> op1 . var )"		318067	1					
ANR	318739	CastTarget	uint32_t		318067	0					
ANR	318740	CastExpression	"( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> op1 . var )"		318067	1					
ANR	318741	CastTarget	zend_intptr_t		318067	0					
ANR	318742	CallExpression	"ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> op1 . var )"		318067	1					
ANR	318743	Callee	ZEND_CALL_VAR_NUM		318067	0					
ANR	318744	Identifier	ZEND_CALL_VAR_NUM		318067	0					
ANR	318745	ArgumentList	NULL		318067	1					
ANR	318746	Argument	NULL		318067	0					
ANR	318747	Identifier	NULL		318067	0					
ANR	318748	Argument	op_array -> last_var + opline -> op1 . var		318067	1					
ANR	318749	AdditiveExpression	op_array -> last_var + opline -> op1 . var		318067	0		+			
ANR	318750	PtrMemberAccess	op_array -> last_var		318067	0					
ANR	318751	Identifier	op_array		318067	0					
ANR	318752	Identifier	last_var		318067	1					
ANR	318753	MemberAccess	opline -> op1 . var		318067	1					
ANR	318754	PtrMemberAccess	opline -> op1		318067	0					
ANR	318755	Identifier	opline		318067	0					
ANR	318756	Identifier	op1		318067	1					
ANR	318757	Identifier	var		318067	1					
ANR	318758	IfStatement	if ( opline -> op2_type == IS_CONST )		318067	2					
ANR	318759	Condition	opline -> op2_type == IS_CONST	690:6:20500:20527	318067	0	True				
ANR	318760	EqualityExpression	opline -> op2_type == IS_CONST		318067	0		==			
ANR	318761	PtrMemberAccess	opline -> op2_type		318067	0					
ANR	318762	Identifier	opline		318067	0					
ANR	318763	Identifier	op2_type		318067	1					
ANR	318764	Identifier	IS_CONST		318067	1					
ANR	318765	CompoundStatement		112:36:4133:4133	318067	1					
ANR	318766	ExpressionStatement	"ZEND_PASS_TWO_UPDATE_CONSTANT ( op_array , opline -> op2 )"	691:3:20535:20587	318067	0	True				
ANR	318767	CallExpression	"ZEND_PASS_TWO_UPDATE_CONSTANT ( op_array , opline -> op2 )"		318067	0					
ANR	318768	Callee	ZEND_PASS_TWO_UPDATE_CONSTANT		318067	0					
ANR	318769	Identifier	ZEND_PASS_TWO_UPDATE_CONSTANT		318067	0					
ANR	318770	ArgumentList	op_array		318067	1					
ANR	318771	Argument	op_array		318067	0					
ANR	318772	Identifier	op_array		318067	0					
ANR	318773	Argument	opline -> op2		318067	1					
ANR	318774	PtrMemberAccess	opline -> op2		318067	0					
ANR	318775	Identifier	opline		318067	0					
ANR	318776	Identifier	op2		318067	1					
ANR	318777	ElseStatement	else		318067	0					
ANR	318778	IfStatement	if ( opline -> op2_type & ( IS_VAR | IS_TMP_VAR ) )		318067	0					
ANR	318779	Condition	opline -> op2_type & ( IS_VAR | IS_TMP_VAR )	692:13:20602:20639	318067	0	True				
ANR	318780	BitAndExpression	opline -> op2_type & ( IS_VAR | IS_TMP_VAR )		318067	0		&			
ANR	318781	PtrMemberAccess	opline -> op2_type		318067	0					
ANR	318782	Identifier	opline		318067	0					
ANR	318783	Identifier	op2_type		318067	1					
ANR	318784	InclusiveOrExpression	IS_VAR | IS_TMP_VAR		318067	1		|			
ANR	318785	Identifier	IS_VAR		318067	0					
ANR	318786	Identifier	IS_TMP_VAR		318067	1					
ANR	318787	CompoundStatement		114:53:4245:4245	318067	1					
ANR	318788	ExpressionStatement	"opline -> op2 . var = ( uint32_t ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> op2 . var )"	693:3:20647:20751	318067	0	True				
ANR	318789	AssignmentExpression	"opline -> op2 . var = ( uint32_t ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> op2 . var )"		318067	0		=			
ANR	318790	MemberAccess	opline -> op2 . var		318067	0					
ANR	318791	PtrMemberAccess	opline -> op2		318067	0					
ANR	318792	Identifier	opline		318067	0					
ANR	318793	Identifier	op2		318067	1					
ANR	318794	Identifier	var		318067	1					
ANR	318795	CastExpression	"( uint32_t ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> op2 . var )"		318067	1					
ANR	318796	CastTarget	uint32_t		318067	0					
ANR	318797	CastExpression	"( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> op2 . var )"		318067	1					
ANR	318798	CastTarget	zend_intptr_t		318067	0					
ANR	318799	CallExpression	"ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> op2 . var )"		318067	1					
ANR	318800	Callee	ZEND_CALL_VAR_NUM		318067	0					
ANR	318801	Identifier	ZEND_CALL_VAR_NUM		318067	0					
ANR	318802	ArgumentList	NULL		318067	1					
ANR	318803	Argument	NULL		318067	0					
ANR	318804	Identifier	NULL		318067	0					
ANR	318805	Argument	op_array -> last_var + opline -> op2 . var		318067	1					
ANR	318806	AdditiveExpression	op_array -> last_var + opline -> op2 . var		318067	0		+			
ANR	318807	PtrMemberAccess	op_array -> last_var		318067	0					
ANR	318808	Identifier	op_array		318067	0					
ANR	318809	Identifier	last_var		318067	1					
ANR	318810	MemberAccess	opline -> op2 . var		318067	1					
ANR	318811	PtrMemberAccess	opline -> op2		318067	0					
ANR	318812	Identifier	opline		318067	0					
ANR	318813	Identifier	op2		318067	1					
ANR	318814	Identifier	var		318067	1					
ANR	318815	IfStatement	if ( opline -> result_type & ( IS_VAR | IS_TMP_VAR ) )		318067	3					
ANR	318816	Condition	opline -> result_type & ( IS_VAR | IS_TMP_VAR )	695:6:20763:20803	318067	0	True				
ANR	318817	BitAndExpression	opline -> result_type & ( IS_VAR | IS_TMP_VAR )		318067	0		&			
ANR	318818	PtrMemberAccess	opline -> result_type		318067	0					
ANR	318819	Identifier	opline		318067	0					
ANR	318820	Identifier	result_type		318067	1					
ANR	318821	InclusiveOrExpression	IS_VAR | IS_TMP_VAR		318067	1		|			
ANR	318822	Identifier	IS_VAR		318067	0					
ANR	318823	Identifier	IS_TMP_VAR		318067	1					
ANR	318824	CompoundStatement		117:49:4409:4409	318067	1					
ANR	318825	ExpressionStatement	"opline -> result . var = ( uint32_t ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> result . var )"	696:3:20811:20921	318067	0	True				
ANR	318826	AssignmentExpression	"opline -> result . var = ( uint32_t ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> result . var )"		318067	0		=			
ANR	318827	MemberAccess	opline -> result . var		318067	0					
ANR	318828	PtrMemberAccess	opline -> result		318067	0					
ANR	318829	Identifier	opline		318067	0					
ANR	318830	Identifier	result		318067	1					
ANR	318831	Identifier	var		318067	1					
ANR	318832	CastExpression	"( uint32_t ) ( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> result . var )"		318067	1					
ANR	318833	CastTarget	uint32_t		318067	0					
ANR	318834	CastExpression	"( zend_intptr_t ) ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> result . var )"		318067	1					
ANR	318835	CastTarget	zend_intptr_t		318067	0					
ANR	318836	CallExpression	"ZEND_CALL_VAR_NUM ( NULL , op_array -> last_var + opline -> result . var )"		318067	1					
ANR	318837	Callee	ZEND_CALL_VAR_NUM		318067	0					
ANR	318838	Identifier	ZEND_CALL_VAR_NUM		318067	0					
ANR	318839	ArgumentList	NULL		318067	1					
ANR	318840	Argument	NULL		318067	0					
ANR	318841	Identifier	NULL		318067	0					
ANR	318842	Argument	op_array -> last_var + opline -> result . var		318067	1					
ANR	318843	AdditiveExpression	op_array -> last_var + opline -> result . var		318067	0		+			
ANR	318844	PtrMemberAccess	op_array -> last_var		318067	0					
ANR	318845	Identifier	op_array		318067	0					
ANR	318846	Identifier	last_var		318067	1					
ANR	318847	MemberAccess	opline -> result . var		318067	1					
ANR	318848	PtrMemberAccess	opline -> result		318067	0					
ANR	318849	Identifier	opline		318067	0					
ANR	318850	Identifier	result		318067	1					
ANR	318851	Identifier	var		318067	1					
ANR	318852	ExpressionStatement	ZEND_VM_SET_OPCODE_HANDLER ( opline )	698:2:20929:20963	318067	4	True				
ANR	318853	CallExpression	ZEND_VM_SET_OPCODE_HANDLER ( opline )		318067	0					
ANR	318854	Callee	ZEND_VM_SET_OPCODE_HANDLER		318067	0					
ANR	318855	Identifier	ZEND_VM_SET_OPCODE_HANDLER		318067	0					
ANR	318856	ArgumentList	opline		318067	1					
ANR	318857	Argument	opline		318067	0					
ANR	318858	Identifier	opline		318067	0					
ANR	318859	ExpressionStatement	opline ++	699:2:20967:20975	318067	5	True				
ANR	318860	PostIncDecOperationExpression	opline ++		318067	0					
ANR	318861	Identifier	opline		318067	0					
ANR	318862	IncDec	++		318067	1					
ANR	318863	ExpressionStatement	op_array -> fn_flags |= ZEND_ACC_DONE_PASS_TWO	702:1:20982:21026	318067	10	True				
ANR	318864	AssignmentExpression	op_array -> fn_flags |= ZEND_ACC_DONE_PASS_TWO		318067	0		|=			
ANR	318865	PtrMemberAccess	op_array -> fn_flags		318067	0					
ANR	318866	Identifier	op_array		318067	0					
ANR	318867	Identifier	fn_flags		318067	1					
ANR	318868	Identifier	ZEND_ACC_DONE_PASS_TWO		318067	1					
ANR	318869	ReturnStatement	return 0 ;	703:1:21029:21037	318067	11	True				
ANR	318870	PrimaryExpression	0		318067	0					
ANR	318871	ReturnType	ZEND_API int		318067	1					
ANR	318872	Identifier	pass_two		318067	2					
ANR	318873	ParameterList	zend_op_array * op_array		318067	3					
ANR	318874	Parameter	zend_op_array * op_array	578:22:16371:16393	318067	0	True				
ANR	318875	ParameterType	zend_op_array *		318067	0					
ANR	318876	Identifier	op_array		318067	1					
ANR	318877	CFGEntryNode	ENTRY		318067		True				
ANR	318878	CFGExitNode	EXIT		318067		True				
ANR	318879	Symbol	opline -> op2 . var		318067						
ANR	318880	Symbol	ZEND_EXTENSIONS_HAVE_OP_ARRAY_PERSIST		318067						
ANR	318881	Symbol	opline -> extended_value		318067						
ANR	318882	Symbol	ZEND_OPLINE_NUM_TO_OFFSET		318067						
ANR	318883	Symbol	opline -> result		318067						
ANR	318884	Symbol	op_array -> type		318067						
ANR	318885	Symbol	opline		318067						
ANR	318886	Symbol	* opline -> op1		318067						
ANR	318887	Symbol	op_array -> fn_flags		318067						
ANR	318888	Symbol	op_array -> last_literal		318067						
ANR	318889	Symbol	context		318067						
ANR	318890	Symbol	op_array -> try_catch_array		318067						
ANR	318891	Symbol	ZEND_ACC_GENERATOR		318067						
ANR	318892	Symbol	erealloc		318067						
ANR	318893	Symbol	IS_TMP_VAR		318067						
ANR	318894	Symbol	( opline + 1 ) -> op1_type		318067						
ANR	318895	Symbol	IS_CONST		318067						
ANR	318896	Symbol	op_array -> vars		318067						
ANR	318897	Symbol	NULL		318067						
ANR	318898	Symbol	ZEND_COMPILE_EXTENDED_INFO		318067						
ANR	318899	Symbol	* op_array		318067						
ANR	318900	Symbol	opline -> op1_type		318067						
ANR	318901	Symbol	ZEND_GENERATOR_RETURN		318067						
ANR	318902	Symbol	op_array -> last		318067						
ANR	318903	Symbol	ZEND_ACC_DONE_PASS_TWO		318067						
ANR	318904	Symbol	op_array -> literals		318067						
ANR	318905	Symbol	ZEND_CALL_VAR_NUM		318067						
ANR	318906	Symbol	ZEND_USER_CODE		318067						
ANR	318907	Symbol	zend_extension_flags		318067						
ANR	318908	Symbol	opline -> op1 . num		318067						
ANR	318909	Symbol	* * op_array		318067						
ANR	318910	Symbol	IS_VAR		318067						
ANR	318911	Symbol	CG ( context ) . opcodes_size		318067						
ANR	318912	Symbol	opline -> op1		318067						
ANR	318913	Symbol	opline -> op2		318067						
ANR	318914	Symbol	& zend_extensions		318067						
ANR	318915	Symbol	CG ( context ) . vars_size		318067						
ANR	318916	Symbol	* opline -> op1 . num		318067						
ANR	318917	Symbol	op_array -> last_var		318067						
ANR	318918	Symbol	CG ( context ) . literals_size		318067						
ANR	318919	Symbol	* op_array -> try_catch_array		318067						
ANR	318920	Symbol	( opline + 1 ) -> op1		318067						
ANR	318921	Symbol	compiler_options		318067						
ANR	318922	Symbol	op_array -> opcodes		318067						
ANR	318923	Symbol	ZEND_ACC_HAS_FINALLY_BLOCK		318067						
ANR	318924	Symbol	end		318067						
ANR	318925	Symbol	* * opline		318067						
ANR	318926	Symbol	opline -> op1 . var		318067						
ANR	318927	Symbol	ZEND_COMPILE_HANDLE_OP_ARRAY		318067						
ANR	318928	Symbol	opline -> result_type		318067						
ANR	318929	Symbol	opline -> op2 . num		318067						
ANR	318930	Symbol	CG		318067						
ANR	318931	Symbol	op_array -> try_catch_array [ opline -> op1 . num ] . finally_op		318067						
ANR	318932	Symbol	opline -> op1 . opline_num		318067						
ANR	318933	Symbol	zend_get_brk_cont_target		318067						
ANR	318934	Symbol	ZEND_JMP		318067						
ANR	318935	Symbol	* opline		318067						
ANR	318936	Symbol	opline -> opcode		318067						
ANR	318937	Symbol	opline -> op2_type		318067						
ANR	318938	Symbol	zend_extension_op_array_handler		318067						
ANR	318939	Symbol	jmp_target		318067						
ANR	318940	Symbol	op_array		318067						
ANR	318941	Symbol	opline -> result . var		318067						
ANR	318942	Symbol	IS_UNUSED		318067						
ANR	318943	Function	get_unary_op	706:0:21042:21295							
ANR	318944	FunctionDef	get_unary_op (int opcode)		318943	0					
ANR	318945	CompoundStatement		707:0:21090:21295	318943	0					
ANR	318946	SwitchStatement	switch ( opcode )		318943	0					
ANR	318947	Condition	opcode	708:9:21101:21106	318943	0	True				
ANR	318948	Identifier	opcode		318943	0					
ANR	318949	CompoundStatement		2:17:18:18	318943	1					
ANR	318950	Label	case ZEND_BW_NOT :	709:2:21113:21129	318943	0	True				
ANR	318951	Identifier	ZEND_BW_NOT		318943	0					
ANR	318952	ReturnStatement	return ( unary_op_type ) bitwise_not_function ;	710:3:21134:21177	318943	1	True				
ANR	318953	CastExpression	( unary_op_type ) bitwise_not_function		318943	0					
ANR	318954	CastTarget	unary_op_type		318943	0					
ANR	318955	Identifier	bitwise_not_function		318943	1					
ANR	318956	Label	case ZEND_BOOL_NOT :	711:2:21181:21199	318943	2	True				
ANR	318957	Identifier	ZEND_BOOL_NOT		318943	0					
ANR	318958	ReturnStatement	return ( unary_op_type ) boolean_not_function ;	712:3:21204:21247	318943	3	True				
ANR	318959	CastExpression	( unary_op_type ) boolean_not_function		318943	0					
ANR	318960	CastTarget	unary_op_type		318943	0					
ANR	318961	Identifier	boolean_not_function		318943	1					
ANR	318962	Label	default :	713:2:21251:21258	318943	4	True				
ANR	318963	Identifier	default		318943	0					
ANR	318964	ReturnStatement	return ( unary_op_type ) NULL ;	714:3:21263:21290	318943	5	True				
ANR	318965	CastExpression	( unary_op_type ) NULL		318943	0					
ANR	318966	CastTarget	unary_op_type		318943	0					
ANR	318967	Identifier	NULL		318943	1					
ANR	318968	ReturnType	ZEND_API unary_op_type		318943	1					
ANR	318969	Identifier	get_unary_op		318943	2					
ANR	318970	ParameterList	int opcode		318943	3					
ANR	318971	Parameter	int opcode	706:36:21078:21087	318943	0	True				
ANR	318972	ParameterType	int		318943	0					
ANR	318973	Identifier	opcode		318943	1					
ANR	318974	CFGEntryNode	ENTRY		318943		True				
ANR	318975	CFGExitNode	EXIT		318943		True				
ANR	318976	Symbol	NULL		318943						
ANR	318977	Symbol	bitwise_not_function		318943						
ANR	318978	Symbol	opcode		318943						
ANR	318979	Symbol	boolean_not_function		318943						
ANR	318980	Function	get_binary_op	718:0:21298:23065							
ANR	318981	FunctionDef	get_binary_op (int opcode)		318980	0					
ANR	318982	CompoundStatement		719:0:21348:23065	318980	0					
ANR	318983	SwitchStatement	switch ( opcode )		318980	0					
ANR	318984	Condition	opcode	720:9:21359:21364	318980	0	True				
ANR	318985	Identifier	opcode		318980	0					
ANR	318986	CompoundStatement		2:17:18:18	318980	1					
ANR	318987	Label	case ZEND_ADD :	721:2:21371:21384	318980	0	True				
ANR	318988	Identifier	ZEND_ADD		318980	0					
ANR	318989	Label	case ZEND_ASSIGN_ADD :	722:2:21388:21408	318980	1	True				
ANR	318990	Identifier	ZEND_ASSIGN_ADD		318980	0					
ANR	318991	ReturnStatement	return ( binary_op_type ) add_function ;	723:3:21413:21449	318980	2	True				
ANR	318992	CastExpression	( binary_op_type ) add_function		318980	0					
ANR	318993	CastTarget	binary_op_type		318980	0					
ANR	318994	Identifier	add_function		318980	1					
ANR	318995	Label	case ZEND_SUB :	724:2:21453:21466	318980	3	True				
ANR	318996	Identifier	ZEND_SUB		318980	0					
ANR	318997	Label	case ZEND_ASSIGN_SUB :	725:2:21470:21490	318980	4	True				
ANR	318998	Identifier	ZEND_ASSIGN_SUB		318980	0					
ANR	318999	ReturnStatement	return ( binary_op_type ) sub_function ;	726:3:21495:21531	318980	5	True				
ANR	319000	CastExpression	( binary_op_type ) sub_function		318980	0					
ANR	319001	CastTarget	binary_op_type		318980	0					
ANR	319002	Identifier	sub_function		318980	1					
ANR	319003	Label	case ZEND_MUL :	727:2:21535:21548	318980	6	True				
ANR	319004	Identifier	ZEND_MUL		318980	0					
ANR	319005	Label	case ZEND_ASSIGN_MUL :	728:2:21552:21572	318980	7	True				
ANR	319006	Identifier	ZEND_ASSIGN_MUL		318980	0					
ANR	319007	ReturnStatement	return ( binary_op_type ) mul_function ;	729:3:21577:21613	318980	8	True				
ANR	319008	CastExpression	( binary_op_type ) mul_function		318980	0					
ANR	319009	CastTarget	binary_op_type		318980	0					
ANR	319010	Identifier	mul_function		318980	1					
ANR	319011	Label	case ZEND_POW :	730:2:21617:21630	318980	9	True				
ANR	319012	Identifier	ZEND_POW		318980	0					
ANR	319013	ReturnStatement	return ( binary_op_type ) pow_function ;	731:3:21635:21671	318980	10	True				
ANR	319014	CastExpression	( binary_op_type ) pow_function		318980	0					
ANR	319015	CastTarget	binary_op_type		318980	0					
ANR	319016	Identifier	pow_function		318980	1					
ANR	319017	Label	case ZEND_DIV :	732:2:21675:21688	318980	11	True				
ANR	319018	Identifier	ZEND_DIV		318980	0					
ANR	319019	Label	case ZEND_ASSIGN_DIV :	733:2:21692:21712	318980	12	True				
ANR	319020	Identifier	ZEND_ASSIGN_DIV		318980	0					
ANR	319021	ReturnStatement	return ( binary_op_type ) div_function ;	734:3:21717:21753	318980	13	True				
ANR	319022	CastExpression	( binary_op_type ) div_function		318980	0					
ANR	319023	CastTarget	binary_op_type		318980	0					
ANR	319024	Identifier	div_function		318980	1					
ANR	319025	Label	case ZEND_MOD :	735:2:21757:21770	318980	14	True				
ANR	319026	Identifier	ZEND_MOD		318980	0					
ANR	319027	Label	case ZEND_ASSIGN_MOD :	736:2:21774:21794	318980	15	True				
ANR	319028	Identifier	ZEND_ASSIGN_MOD		318980	0					
ANR	319029	ReturnStatement	return ( binary_op_type ) mod_function ;	737:3:21799:21835	318980	16	True				
ANR	319030	CastExpression	( binary_op_type ) mod_function		318980	0					
ANR	319031	CastTarget	binary_op_type		318980	0					
ANR	319032	Identifier	mod_function		318980	1					
ANR	319033	Label	case ZEND_SL :	738:2:21839:21851	318980	17	True				
ANR	319034	Identifier	ZEND_SL		318980	0					
ANR	319035	Label	case ZEND_ASSIGN_SL :	739:2:21855:21874	318980	18	True				
ANR	319036	Identifier	ZEND_ASSIGN_SL		318980	0					
ANR	319037	ReturnStatement	return ( binary_op_type ) shift_left_function ;	740:3:21879:21922	318980	19	True				
ANR	319038	CastExpression	( binary_op_type ) shift_left_function		318980	0					
ANR	319039	CastTarget	binary_op_type		318980	0					
ANR	319040	Identifier	shift_left_function		318980	1					
ANR	319041	Label	case ZEND_SR :	741:2:21926:21938	318980	20	True				
ANR	319042	Identifier	ZEND_SR		318980	0					
ANR	319043	Label	case ZEND_ASSIGN_SR :	742:2:21942:21961	318980	21	True				
ANR	319044	Identifier	ZEND_ASSIGN_SR		318980	0					
ANR	319045	ReturnStatement	return ( binary_op_type ) shift_right_function ;	743:3:21966:22010	318980	22	True				
ANR	319046	CastExpression	( binary_op_type ) shift_right_function		318980	0					
ANR	319047	CastTarget	binary_op_type		318980	0					
ANR	319048	Identifier	shift_right_function		318980	1					
ANR	319049	Label	case ZEND_FAST_CONCAT :	744:2:22014:22035	318980	23	True				
ANR	319050	Identifier	ZEND_FAST_CONCAT		318980	0					
ANR	319051	Label	case ZEND_CONCAT :	745:2:22039:22055	318980	24	True				
ANR	319052	Identifier	ZEND_CONCAT		318980	0					
ANR	319053	Label	case ZEND_ASSIGN_CONCAT :	746:2:22059:22082	318980	25	True				
ANR	319054	Identifier	ZEND_ASSIGN_CONCAT		318980	0					
ANR	319055	ReturnStatement	return ( binary_op_type ) concat_function ;	747:3:22087:22126	318980	26	True				
ANR	319056	CastExpression	( binary_op_type ) concat_function		318980	0					
ANR	319057	CastTarget	binary_op_type		318980	0					
ANR	319058	Identifier	concat_function		318980	1					
ANR	319059	Label	case ZEND_IS_IDENTICAL :	748:2:22130:22152	318980	27	True				
ANR	319060	Identifier	ZEND_IS_IDENTICAL		318980	0					
ANR	319061	ReturnStatement	return ( binary_op_type ) is_identical_function ;	749:3:22157:22202	318980	28	True				
ANR	319062	CastExpression	( binary_op_type ) is_identical_function		318980	0					
ANR	319063	CastTarget	binary_op_type		318980	0					
ANR	319064	Identifier	is_identical_function		318980	1					
ANR	319065	Label	case ZEND_IS_NOT_IDENTICAL :	750:2:22206:22232	318980	29	True				
ANR	319066	Identifier	ZEND_IS_NOT_IDENTICAL		318980	0					
ANR	319067	ReturnStatement	return ( binary_op_type ) is_not_identical_function ;	751:3:22237:22286	318980	30	True				
ANR	319068	CastExpression	( binary_op_type ) is_not_identical_function		318980	0					
ANR	319069	CastTarget	binary_op_type		318980	0					
ANR	319070	Identifier	is_not_identical_function		318980	1					
ANR	319071	Label	case ZEND_IS_EQUAL :	752:2:22290:22308	318980	31	True				
ANR	319072	Identifier	ZEND_IS_EQUAL		318980	0					
ANR	319073	ReturnStatement	return ( binary_op_type ) is_equal_function ;	753:3:22313:22354	318980	32	True				
ANR	319074	CastExpression	( binary_op_type ) is_equal_function		318980	0					
ANR	319075	CastTarget	binary_op_type		318980	0					
ANR	319076	Identifier	is_equal_function		318980	1					
ANR	319077	Label	case ZEND_IS_NOT_EQUAL :	754:2:22358:22380	318980	33	True				
ANR	319078	Identifier	ZEND_IS_NOT_EQUAL		318980	0					
ANR	319079	ReturnStatement	return ( binary_op_type ) is_not_equal_function ;	755:3:22385:22430	318980	34	True				
ANR	319080	CastExpression	( binary_op_type ) is_not_equal_function		318980	0					
ANR	319081	CastTarget	binary_op_type		318980	0					
ANR	319082	Identifier	is_not_equal_function		318980	1					
ANR	319083	Label	case ZEND_IS_SMALLER :	756:2:22434:22454	318980	35	True				
ANR	319084	Identifier	ZEND_IS_SMALLER		318980	0					
ANR	319085	ReturnStatement	return ( binary_op_type ) is_smaller_function ;	757:3:22459:22502	318980	36	True				
ANR	319086	CastExpression	( binary_op_type ) is_smaller_function		318980	0					
ANR	319087	CastTarget	binary_op_type		318980	0					
ANR	319088	Identifier	is_smaller_function		318980	1					
ANR	319089	Label	case ZEND_IS_SMALLER_OR_EQUAL :	758:2:22506:22535	318980	37	True				
ANR	319090	Identifier	ZEND_IS_SMALLER_OR_EQUAL		318980	0					
ANR	319091	ReturnStatement	return ( binary_op_type ) is_smaller_or_equal_function ;	759:3:22540:22592	318980	38	True				
ANR	319092	CastExpression	( binary_op_type ) is_smaller_or_equal_function		318980	0					
ANR	319093	CastTarget	binary_op_type		318980	0					
ANR	319094	Identifier	is_smaller_or_equal_function		318980	1					
ANR	319095	Label	case ZEND_SPACESHIP :	760:2:22596:22615	318980	39	True				
ANR	319096	Identifier	ZEND_SPACESHIP		318980	0					
ANR	319097	ReturnStatement	return ( binary_op_type ) compare_function ;	761:3:22620:22660	318980	40	True				
ANR	319098	CastExpression	( binary_op_type ) compare_function		318980	0					
ANR	319099	CastTarget	binary_op_type		318980	0					
ANR	319100	Identifier	compare_function		318980	1					
ANR	319101	Label	case ZEND_BW_OR :	762:2:22664:22679	318980	41	True				
ANR	319102	Identifier	ZEND_BW_OR		318980	0					
ANR	319103	Label	case ZEND_ASSIGN_BW_OR :	763:2:22683:22705	318980	42	True				
ANR	319104	Identifier	ZEND_ASSIGN_BW_OR		318980	0					
ANR	319105	ReturnStatement	return ( binary_op_type ) bitwise_or_function ;	764:3:22710:22753	318980	43	True				
ANR	319106	CastExpression	( binary_op_type ) bitwise_or_function		318980	0					
ANR	319107	CastTarget	binary_op_type		318980	0					
ANR	319108	Identifier	bitwise_or_function		318980	1					
ANR	319109	Label	case ZEND_BW_AND :	765:2:22757:22773	318980	44	True				
ANR	319110	Identifier	ZEND_BW_AND		318980	0					
ANR	319111	Label	case ZEND_ASSIGN_BW_AND :	766:2:22777:22800	318980	45	True				
ANR	319112	Identifier	ZEND_ASSIGN_BW_AND		318980	0					
ANR	319113	ReturnStatement	return ( binary_op_type ) bitwise_and_function ;	767:3:22805:22849	318980	46	True				
ANR	319114	CastExpression	( binary_op_type ) bitwise_and_function		318980	0					
ANR	319115	CastTarget	binary_op_type		318980	0					
ANR	319116	Identifier	bitwise_and_function		318980	1					
ANR	319117	Label	case ZEND_BW_XOR :	768:2:22853:22869	318980	47	True				
ANR	319118	Identifier	ZEND_BW_XOR		318980	0					
ANR	319119	Label	case ZEND_ASSIGN_BW_XOR :	769:2:22873:22896	318980	48	True				
ANR	319120	Identifier	ZEND_ASSIGN_BW_XOR		318980	0					
ANR	319121	ReturnStatement	return ( binary_op_type ) bitwise_xor_function ;	770:3:22901:22945	318980	49	True				
ANR	319122	CastExpression	( binary_op_type ) bitwise_xor_function		318980	0					
ANR	319123	CastTarget	binary_op_type		318980	0					
ANR	319124	Identifier	bitwise_xor_function		318980	1					
ANR	319125	Label	case ZEND_BOOL_XOR :	771:2:22949:22967	318980	50	True				
ANR	319126	Identifier	ZEND_BOOL_XOR		318980	0					
ANR	319127	ReturnStatement	return ( binary_op_type ) boolean_xor_function ;	772:3:22972:23016	318980	51	True				
ANR	319128	CastExpression	( binary_op_type ) boolean_xor_function		318980	0					
ANR	319129	CastTarget	binary_op_type		318980	0					
ANR	319130	Identifier	boolean_xor_function		318980	1					
ANR	319131	Label	default :	773:2:23020:23027	318980	52	True				
ANR	319132	Identifier	default		318980	0					
ANR	319133	ReturnStatement	return ( binary_op_type ) NULL ;	774:3:23032:23060	318980	53	True				
ANR	319134	CastExpression	( binary_op_type ) NULL		318980	0					
ANR	319135	CastTarget	binary_op_type		318980	0					
ANR	319136	Identifier	NULL		318980	1					
ANR	319137	ReturnType	ZEND_API binary_op_type		318980	1					
ANR	319138	Identifier	get_binary_op		318980	2					
ANR	319139	ParameterList	int opcode		318980	3					
ANR	319140	Parameter	int opcode	718:38:21336:21345	318980	0	True				
ANR	319141	ParameterType	int		318980	0					
ANR	319142	Identifier	opcode		318980	1					
ANR	319143	CFGEntryNode	ENTRY		318980		True				
ANR	319144	CFGExitNode	EXIT		318980		True				
ANR	319145	Symbol	is_identical_function		318980						
ANR	319146	Symbol	is_not_equal_function		318980						
ANR	319147	Symbol	bitwise_or_function		318980						
ANR	319148	Symbol	boolean_xor_function		318980						
ANR	319149	Symbol	NULL		318980						
ANR	319150	Symbol	mod_function		318980						
ANR	319151	Symbol	concat_function		318980						
ANR	319152	Symbol	pow_function		318980						
ANR	319153	Symbol	div_function		318980						
ANR	319154	Symbol	is_equal_function		318980						
ANR	319155	Symbol	bitwise_xor_function		318980						
ANR	319156	Symbol	mul_function		318980						
ANR	319157	Symbol	bitwise_and_function		318980						
ANR	319158	Symbol	shift_right_function		318980						
ANR	319159	Symbol	opcode		318980						
ANR	319160	Symbol	is_not_identical_function		318980						
ANR	319161	Symbol	compare_function		318980						
ANR	319162	Symbol	sub_function		318980						
ANR	319163	Symbol	is_smaller_function		318980						
ANR	319164	Symbol	is_smaller_or_equal_function		318980						
ANR	319165	Symbol	shift_left_function		318980						
ANR	319166	Symbol	add_function		318980						
